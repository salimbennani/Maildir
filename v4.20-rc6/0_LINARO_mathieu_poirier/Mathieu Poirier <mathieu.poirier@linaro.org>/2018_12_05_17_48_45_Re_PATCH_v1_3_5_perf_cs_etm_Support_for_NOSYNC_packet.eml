Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 06 Dec 2018 08:56:57 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 26B4B5804C1;
	Wed,  5 Dec 2018 09:49:03 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 05 Dec 2018 09:49:02 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AsUFKEhHgp+OctsDXKK6bfp1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75o8u8bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJWCNBDIGz?=
 =?us-ascii?q?YYsBAeQCIOhWsZXyp0AWrRa8HgSsGP/jxyVUinPqwaE30eIsGhzG0gw6GNIOtW?=
 =?us-ascii?q?zZotLvO6cOUeC1zbfHzSjeZP1M3jf96ZLIchE/rvGWQLl9ds/RxlMzFwPFj1Wf?=
 =?us-ascii?q?t5HlMymN1uQKsmib9etgWvy1i2M8rwFxoz6vyd02ionOnI4VzUrE9SpgzYszON?=
 =?us-ascii?q?a2S1Z7bMa6HJdMsyyWLZZ6T808T21ypSo3yaEKtYS6cSUI0Jgr2QLTZvidf4WL?=
 =?us-ascii?q?4h/vTvudLDZ5iX5/Zb6ygxm//E69wePmTMa0ykxFri9dn9nMqH8N0xvT59CZSv?=
 =?us-ascii?q?ty4EihwyyD1wPN5eFeJ0A7i67bJ4Qmwr4qmZofqUXDHinol0XqlKKaaFko9+yy?=
 =?us-ascii?q?5+j6bLjquIWQO5J3hw3iKKgjm86yDfw9MgcUXmib/eq81Kfk/U38WLhKivw2kq?=
 =?us-ascii?q?/EsJHVPMgbpbC2AxVT0ok97xazFjCm0doenXYZNlJIYwyHj4f3NFHUOvz4Dumw?=
 =?us-ascii?q?g06qkDh1w/DKJLrhAo/CLnTbirfuYa5961JAyAo01d1f45NUCrIfL/7pVU7xqc?=
 =?us-ascii?q?fVDhs4Mwyy3ubmB89x1oIYWWKTHKCZNLnevkOP5uIqO+OMfpMauC7hK/g54P7j?=
 =?us-ascii?q?lX85lkUcfam1x5QXb2q0HvR7I0qDZ3rsjcwMEWMLvgo4Uezrh0eOUT9VZ3auQa?=
 =?us-ascii?q?084is3B56hDYfGXoqtmqCO3D+nHp1KYWBLElKMEXD2eImeWPcMbySSIslmkjEf?=
 =?us-ascii?q?UbihSokh1QyhtQPgyrpnKPbU9TMctZ75yNd14OjTnwko9TNoF8Sdz32NT2Zsk2?=
 =?us-ascii?q?wSXD823Kd/oU9nxleZy6d4gedVFdhS5/NPTwc7OoTQz+18C9DuRA3Bes2FR0qh?=
 =?us-ascii?q?QtWjGTsxVM4+w8cSY0ZhHNWvlhPD0DCsA7MPk7yLBYY78qTT33XqI8Z9ynDG1L?=
 =?us-ascii?q?QujlU8Q8tPM3GmibB79wTJG4HJlECZnb6wdasAxC7N6HuDzW2WsU5FSgFwT7vK?=
 =?us-ascii?q?UWofZkTMq9T5/V3NT7mpBbQjMQtBzMqCJ7BOat3oi1VGWfjiNM7fY2K3h2e/Gx?=
 =?us-ascii?q?KIyqmQY4rtfmUXxD/dB1QckwAP4XaGMhAzCTq7rGLAEjNiD1LvbFnq8elltny7?=
 =?us-ascii?q?SFQ5zwWLb01nyrq09QQZhf2aS/MPwL0EvD0tpClzHFa4x9jWEcaPpxJ9fKVAZt?=
 =?us-ascii?q?Mw+EtH1WPctwx6IpygL6BjikQCcwhtuEPuzRF3CoRGkcglt34qyAtyKaSF0FJO?=
 =?us-ascii?q?bT+Y3JbwOqHJJWn25hygd6nW2lTG2taM5qgP8Og4q0nkvAyxDEUi92to0tZL3H?=
 =?us-ascii?q?qc/JnFFxcSXo/rXUYx9Bh6oK/abzI554PV031sLKa1viXD29IvGOsq1BKgc81D?=
 =?us-ascii?q?P6ODEQ/4C9caCNS2KOw2h1ipaQoJPeBP9KIuI8yqbfqH2K6xM+ZmkzKrlmBH4I?=
 =?us-ascii?q?F70kKR+CtwUO/I35AZw/6G2guLTSvzjFCkssrvg4BLeSkSHnajySjjHINRfKxy?=
 =?us-ascii?q?cpoRBme0PsK3wc9yh5jzVH5C9V6vHk8J19WteRWPcVP9xwpQ1UIMrHyjmCu4yS?=
 =?us-ascii?q?F0kj4zoqqe2izO3/rtdB4dNmFXQ2liiE/mIZKogNACQEiocw8pmQOl5Eb73aRa?=
 =?us-ascii?q?pL5zL3LOQUdOZCX2K2BiUq2ttruNecJP6ZUosTlJX+S4e1yVVrn9ox4C2SP5A2?=
 =?us-ascii?q?Re3Cw7dy2tupjhnRx1knidLHVwrHreY81w3g3Q5N/fRf5Q2DoJWi94hCLTBli9?=
 =?us-ascii?q?Odmp4NqVm43CsuC4S2KuSJlTfTP3woOHsSux/XdqDgGnn/Cvht3nFhA30C/h2N?=
 =?us-ascii?q?ltTynIrhf8Yo/w2qS+MOJneFRoBVDm58p7HIF+jpU/hJUK1XcGgZWV+GINkX3v?=
 =?us-ascii?q?PtVDxaL+cH0NSCYIw9HP4Qjpwk1jLm+TyIL/WXWQ2c9hZ9i8YmML1SMx9cFKCK?=
 =?us-ascii?q?GI7LNamSt5uEa3rQXUYfJlhDcS1eMu6GIGg+EOoActyySdArMIEkVCMy3jiQ+I?=
 =?us-ascii?q?78ygo6VNf2mgb6Kw1EVlkNClDbGCpBxcWXnjdpcjGy9w8ttwMFbW3HLv7YHkfc?=
 =?us-ascii?q?HabcgPuR2MjxfAk+9VJYotlvoNgCprI2P8smcjy+4mlhxuxpC6sZODK2Vs+qK5?=
 =?us-ascii?q?HxFZOif0Z8MV5jHik6JektyK0ICoG5VrAi8LU4fwTfK0DDISsuzqOB2UHz07rn?=
 =?us-ascii?q?ebBKDTHQuC6Ep9q3LPEparN2yYJXUDzNViQgWdK1JbgAwOQDo6mZs5HBiwxMP9?=
 =?us-ascii?q?aEd5+iwR5lngpxtO0O1oMgfwUnzFqAe0cDs0S4WfLBlL7gFE/UjVKteT7uZyHy?=
 =?us-ascii?q?Fe452goxaBKm2dZwRUE24JXlaICEzkPrmr/dPA6fSXBvKiL/vSZrWDsexfV/CV?=
 =?us-ascii?q?xZK2z4tp5TCMOt+UPnllCf071VFOXXR4G8TfhjUORDYblyPLb86Huhi8/jd7od?=
 =?us-ascii?q?y48PTuQAjv/5eAC6NOMdVz/BC7maeDOPCRhCZ6KjZY14kAxXzSyLgY014dlTtu?=
 =?us-ascii?q?dyS2EbkbsS7NTaTQmrJYDhIBaiNzMtdI4Lw43gVXJcHbjdb13KZijvEpE1dFSU?=
 =?us-ascii?q?DhmsaxaMMQPmGyL0nHC1iLNbicIT3Lwtr6Yae9Sb1WkeVVuAe8uTedE0//IDuD?=
 =?us-ascii?q?kyPlWAyoMeFJlCubJgBRuJmhchZxDmjuVM7mahy+MNNtkTI626E7hnPUOm4aKj?=
 =?us-ascii?q?V8d0JNrruN7SJXmPl/GmpB7mZ7IumAgSqW8+7YKpMOu/txHit0j/5a4Gg9y7ZN?=
 =?us-ascii?q?7CBLXvp1mC7Trt5ou16nk+mPxSBhUBpBsTtLgIOLvUN/OaTW7JVAWHDE/A4T4m?=
 =?us-ascii?q?WUERgFu9xlCti885xXn/zCk+rCITEKp9bZ+o0NDs78LMOBOWAmdx3zF2iHIhEC?=
 =?us-ascii?q?SGuOPH3fhkFA2MmV92eUo4Jy/p3lhJoPR6IdTFs0DPIXEGxhHdoLOpAxWSkrx+?=
 =?us-ascii?q?3IxPUU7Gaz+UGCDP5RuYrKA7fLWa3i?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BAAAA1Dwhch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBVAQBAQsBg2sUE4N5lCeCDRSXTIFiKRMBh1MiNwYNAQMBAQEBAQECARMBAQE?=
 =?us-ascii?q?IDQkIKSMMgjYkAYJhAQEBAQIBAQIgBBkBATcBBQkBAQoLDQICJgICAx8SAQUBH?=
 =?us-ascii?q?AYTBYMcgXoIBZo+PIodcHwzgnYBAQWHJQgSeYsTgVc/g241hGqDG4JXiREgASu?=
 =?us-ascii?q?BR4UPhTiKbQcCgiAEjx4YgVuFFIpALJhDMIE7gXczGjB0BoI1ghuJAYVfHzOBB?=
 =?us-ascii?q?QEBilwBAQ?=
X-IPAS-Result: =?us-ascii?q?A0BAAAA1Dwhch0O0hNFkHAEBAQQBAQcEAQGBVAQBAQsBg2s?=
 =?us-ascii?q?UE4N5lCeCDRSXTIFiKRMBh1MiNwYNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkA?=
 =?us-ascii?q?YJhAQEBAQIBAQIgBBkBATcBBQkBAQoLDQICJgICAx8SAQUBHAYTBYMcgXoIBZo?=
 =?us-ascii?q?+PIodcHwzgnYBAQWHJQgSeYsTgVc/g241hGqDG4JXiREgASuBR4UPhTiKbQcCg?=
 =?us-ascii?q?iAEjx4YgVuFFIpALJhDMIE7gXczGjB0BoI1ghuJAYVfHzOBBQEBilwBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,318,1539673200"; 
   d="scan'208";a="54674155"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 05 Dec 2018 09:49:00 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727889AbeLERs5 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 5 Dec 2018 12:48:57 -0500
Received: from mail-it1-f194.google.com ([209.85.166.194]:53034 "EHLO
        mail-it1-f194.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727349AbeLERs5 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 5 Dec 2018 12:48:57 -0500
Received: by mail-it1-f194.google.com with SMTP id g76so2740171itg.2
        for <linux-kernel@vger.kernel.org>; Wed, 05 Dec 2018 09:48:56 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=d++t2nZr1qCftJckZMZdxevjAVDxBeVn6BBLCL4SvUA=;
        b=FroNUStp70TJN4KhqRKaYBCwDT3fUlbPZb++pAxek99PQQFInr2JTdm5OIJ5VvK4dB
         X3+gcCZBBNO/cCskrq3DXWa5X3UmCdBjqkPR87gdAygL667H+jSz9c2RN3jFbIRC2Wem
         R80EwNtytgcsLP5c6ETAXoFVZuKjjnjf+l0QU=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=d++t2nZr1qCftJckZMZdxevjAVDxBeVn6BBLCL4SvUA=;
        b=iW//8urKRrdpW1hkyJt1i7g6N2goflFY8rBE6p2wVNes9IBVeYLZg3h3F25kyxMSo3
         T4kXzmoaRzvaUk58MmVKFHqUxIvlWZ7u7cIFCorJDzNul/1Jp+uG19J8kVT7c2/Jo02u
         25Gi+xO4dqZ2QNQpR2yODqA+aMrMRGur3C8QJJ6yk0kYXec28PdoHyli+BAzjdbzQGh2
         xIKs2Bqldamz0EmJQqpTuHcWctfUAFJ45t0PLkyBIcVUrfzS5CxqUHy2o64FqC3UK5KB
         /0JGn/yTCLROWnfsuFdVql4yEvIb0ifSEx8l26wZB+/gymZ8KdhtjtJpBujX2FHkmZ0m
         0pPA==
X-Gm-Message-State: AA+aEWbBuzPLiiGB1LyekiKNsSQ/Q/St3f55e4lWWirvshECdIFyNmod
        kgzp5l4VhUjt1vSu91UWs6R3veIT0U6iDtTxEKpH7g==
X-Google-Smtp-Source: AFSGD/W8hIa7cRxP2mVTCLSzVJeeWpSsSF+m5HT3tksyPR6MoKV7z1PoaCHvhWrDmH3MK4ggIRBXcTwBhZKRC24Tg7s=
X-Received: by 2002:a05:660c:34f:: with SMTP id b15mr16548692itl.146.1544032136245;
 Wed, 05 Dec 2018 09:48:56 -0800 (PST)
MIME-Version: 1.0
References: <1541912383-19915-1-git-send-email-leo.yan@linaro.org>
 <1541912383-19915-4-git-send-email-leo.yan@linaro.org> <20181119182759.GA608@xps15>
 <20181205033145.GA15964@leoy-ThinkPad-X240s>
In-Reply-To: <20181205033145.GA15964@leoy-ThinkPad-X240s>
From: Mathieu Poirier <mathieu.poirier@linaro.org>
Date: Wed, 5 Dec 2018 10:48:45 -0700
Message-ID: <CANLsYkyMb58D9JetJN4BdVcaTmurPRqd5BZy99zX=5DA0J9wDA@mail.gmail.com>
Subject: Re: [PATCH v1 3/5] perf cs-etm: Support for NO_SYNC packet
To: Leo Yan <leo.yan@linaro.org>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>,
        Alexander Shishkin <alexander.shishkin@linux.intel.com>,
        Jiri Olsa <jolsa@redhat.com>,
        Namhyung Kim <namhyung@kernel.org>,
        linux-arm-kernel <linux-arm-kernel@lists.infradead.org>,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>,
        Mike Leach <mike.leach@linaro.org>,
        Robert Walker <robert.walker@arm.com>,
        Al Grant <Al.Grant@arm.com>,
        Coresight ML <coresight@lists.linaro.org>
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Tue, 4 Dec 2018 at 20:31, <leo.yan@linaro.org> wrote:
>
> On Mon, Nov 19, 2018 at 11:27:59AM -0700, Mathieu Poirier wrote:
> > On Sun, Nov 11, 2018 at 12:59:41PM +0800, Leo Yan wrote:
> > > As described in OpenCSD (CoreSight decoder lib), in the decoding stream
> > > it includes one trace element with type OCSD_GEN_TRC_ELEM_NO_SYNC; the
> > > element indicates 'either at start of decode, or after overflow / bad
> > > packet', we should take it as a signal for the tracing off and this will
> > > cause tracing discontinuity.  From the trace dump with 'perf script',
> > > sometimes the element OCSD_GEN_TRC_ELEM_NO_SYNC collaborates with
> > > element OCSD_GEN_TRC_ELEM_TRACE_ON to show the tracing flow have been
> > > turned off and on, in this case the cs-etm code has handled TRACE_ON
> > > packet well so we observe the tracing discontinuity; but in another case
> > > it only inserts the element OCSD_GEN_TRC_ELEM_NO_SYNC into instructions
> > > packets, we miss to handle the case if has only standalone NO_SYNC
> > > element and users cannot receive the info for tracing discontinuity.
> > >
> > > This patch introduces new type CS_ETM_TRACE_OFF to generate packet for
> > > receiving element OCSD_GEN_TRC_ELEM_NO_SYNC from decoder; when generate
> > > sample, CS_ETM_TRACE_OFF packet has almost the same behaviour with
> >
> > Here you have used the word "almost", leading me to beleive there are cases
> > where the handling of TRACE_ON and NO_SYNC packets differ, but the
> > implementation enacts the same behavior for both.
> >
> > Mike or Robert, can you confirm that TRACE_ON and NO_SYNC packets should be
> > treated the same way?
>
> I also would like to get suggestions/comments from Mike and Rob.
>
> For NO_SYNC packet, Mike before has given some explination for it:
>
> "looking at the decoder flow, when the decoder is reset, then it is
> returned to an unsynchronised state and a NO_SYNC will be output.
> With perf, it can concatenate multiple trace buffers into a single
> section of the perf.data file. To ensure that the decode process can
> see the start of a new buffer, the drivers will insert a barrier
> packet between different buffers so that the decoder can spot the
> boundaries. When the decoder hits a barrier packet it will
> automatically reset so that it correctly decodes the next trace
> buffer. This could be what you are seeing here."
>
> So I think there still have some difference between TRACE_ON and
> NO_SYNC packets, TRACE_ON packet indicates the start of trace and it's
> also possible caused by tracing discontinuity; NO_SYNC packets usually
> caused by an unsynchronised state.  But both of them presents
> discontinuity in perf trace data.
>
> I prefer to use two different packet types to present them, this can
> let the code to be more readable and easier to be maintained later.

Absolutely.  Make sure to get to the bottom of the story with Mike
and/or Robert before sending your next patchset.

>
> If you agree with this, I also will rephrase the commit log to avoid
> confusion that these two packets are the same thing.

Yes please.

>
> > Leo, if handling of the TRACE_ON and NO_SYNC packets is the same then we should
> > treat them the same way in cs_etm_decoder__gen_trace_elem_printer(), i.e simply
> > call cs_etm_decoder__buffer_trace_on().  That way packet handling in cs-etm.c
> > doesn't change.  Otherwise see my comments below.
> >
> > > CS_ETM_TRACE_ON packet: both of them invokes cs_etm__flush() to generate
> > > samples for the previous instructions packet, and in cs_etm__sample() it
> > > also needs to generate samples if TRACE_OFF packet is followed by one
> > > sequential instructions packet.  This patch also converts the address to
> > > 0 for TRACE_OFF packet, this is same with TRACE_ON packet as well.
> > >
> > > Signed-off-by: Leo Yan <leo.yan@linaro.org>
> > > ---
> > >  tools/perf/util/cs-etm-decoder/cs-etm-decoder.c | 10 ++++++++++
> > >  tools/perf/util/cs-etm-decoder/cs-etm-decoder.h |  7 ++++---
> > >  tools/perf/util/cs-etm.c                        | 15 +++++++++++----
> > >  3 files changed, 25 insertions(+), 7 deletions(-)
> > >
> > > diff --git a/tools/perf/util/cs-etm-decoder/cs-etm-decoder.c b/tools/perf/util/cs-etm-decoder/cs-etm-decoder.c
> > > index 5efb616..9d52727 100644
> > > --- a/tools/perf/util/cs-etm-decoder/cs-etm-decoder.c
> > > +++ b/tools/perf/util/cs-etm-decoder/cs-etm-decoder.c
> > > @@ -369,6 +369,14 @@ cs_etm_decoder__buffer_range(struct cs_etm_decoder *decoder,
> > >  }
> > >
> > >  static ocsd_datapath_resp_t
> > > +cs_etm_decoder__buffer_trace_off(struct cs_etm_decoder *decoder,
> > > +                            const uint8_t trace_chan_id)
> > > +{
> > > +   return cs_etm_decoder__buffer_packet(decoder, trace_chan_id,
> > > +                                        CS_ETM_TRACE_OFF);
> > > +}
> > > +
> > > +static ocsd_datapath_resp_t
> > >  cs_etm_decoder__buffer_trace_on(struct cs_etm_decoder *decoder,
> > >                             const uint8_t trace_chan_id)
> > >  {
> > > @@ -389,6 +397,8 @@ static ocsd_datapath_resp_t cs_etm_decoder__gen_trace_elem_printer(
> > >     case OCSD_GEN_TRC_ELEM_UNKNOWN:
> > >             break;
> > >     case OCSD_GEN_TRC_ELEM_NO_SYNC:
> > > +           resp = cs_etm_decoder__buffer_trace_off(decoder,
> > > +                                                   trace_chan_id);
> >
> > If we want to handle NO_SYNC element types, why introduce a "trace_off"
> > function?  Wouldn't it make more sense to call it
> > cs_etm_decoder__buffer_no_sync() ?
>
> Will change to cs_etm_decoder__buffer_no_sync().
>
> > >             decoder->trace_on = false;
> > >             break;
> > >     case OCSD_GEN_TRC_ELEM_TRACE_ON:
> > > diff --git a/tools/perf/util/cs-etm-decoder/cs-etm-decoder.h b/tools/perf/util/cs-etm-decoder/cs-etm-decoder.h
> > > index 9351bd1..a38c97c 100644
> > > --- a/tools/perf/util/cs-etm-decoder/cs-etm-decoder.h
> > > +++ b/tools/perf/util/cs-etm-decoder/cs-etm-decoder.h
> > > @@ -23,9 +23,10 @@ struct cs_etm_buffer {
> > >  };
> > >
> > >  enum cs_etm_sample_type {
> > > -   CS_ETM_EMPTY = 0,
> > > -   CS_ETM_RANGE = 1 << 0,
> > > -   CS_ETM_TRACE_ON = 1 << 1,
> > > +   CS_ETM_EMPTY            = 0,
> > > +   CS_ETM_RANGE            = 1 << 0,
> > > +   CS_ETM_TRACE_ON         = 1 << 1,
> > > +   CS_ETM_TRACE_OFF        = 1 << 2,
> >
> > CS_ETM_NO_SYNC, see above comment.  And please don't use indentation.
>
> Will do this.
>
> > >  };
> > >
> > >  enum cs_etm_isa {
> > > diff --git a/tools/perf/util/cs-etm.c b/tools/perf/util/cs-etm.c
> > > index f4fa877..2a0cef9 100644
> > > --- a/tools/perf/util/cs-etm.c
> > > +++ b/tools/perf/util/cs-etm.c
> > > @@ -517,8 +517,9 @@ static inline int cs_etm__t32_instr_size(struct cs_etm_queue *etmq,
> > >
> > >  static inline u64 cs_etm__first_executed_instr(struct cs_etm_packet *packet)
> > >  {
> > > -   /* Returns 0 for the CS_ETM_TRACE_ON packet */
> > > -   if (packet->sample_type == CS_ETM_TRACE_ON)
> > > +   /* Returns 0 for TRACE_ON and TRACE_OFF packets */
> > > +   if (packet->sample_type == CS_ETM_TRACE_ON ||
> > > +       packet->sample_type == CS_ETM_TRACE_OFF)
> > >             return 0;
> > >
> > >     return packet->start_addr;
> > > @@ -527,8 +528,9 @@ static inline u64 cs_etm__first_executed_instr(struct cs_etm_packet *packet)
> > >  static inline
> > >  u64 cs_etm__last_executed_instr(const struct cs_etm_packet *packet)
> > >  {
> > > -   /* Returns 0 for the CS_ETM_TRACE_ON packet */
> > > -   if (packet->sample_type == CS_ETM_TRACE_ON)
> > > +   /* Returns 0 for TRACE_ON and TRACE_OFF packets */
> > > +   if (packet->sample_type == CS_ETM_TRACE_ON ||
> > > +       packet->sample_type == CS_ETM_TRACE_OFF)
> > >             return 0;
> > >
> > >     return packet->end_addr - packet->last_instr_size;
> > > @@ -930,6 +932,10 @@ static int cs_etm__sample(struct cs_etm_queue *etmq)
> > >             if (etmq->prev_packet->sample_type == CS_ETM_TRACE_ON)
> > >                     generate_sample = true;
> > >
> > > +           /* Generate sample for tracing off packet */
> > > +           if (etmq->prev_packet->sample_type == CS_ETM_TRACE_OFF)
> > > +                   generate_sample = true;
> > > +
> > >             /* Generate sample for branch taken packet */
> > >             if (etmq->prev_packet->sample_type == CS_ETM_RANGE &&
> > >                 etmq->prev_packet->last_instr_taken_branch)
> > > @@ -1085,6 +1091,7 @@ static int cs_etm__run_decoder(struct cs_etm_queue *etmq)
> > >                                     cs_etm__sample(etmq);
> > >                                     break;
> > >                             case CS_ETM_TRACE_ON:
> > > +                           case CS_ETM_TRACE_OFF:
> > >                                     /*
> > >                                      * Discontinuity in trace, flush
> > >                                      * previous branch stack
> > > --
> > > 2.7.4
> > >
