Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:46:49 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 5F3BF58042F
	for <like.xu@linux.intel.com>; Thu,  6 Dec 2018 06:07:21 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga006-1.jf.intel.com with ESMTP; 06 Dec 2018 06:07:21 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AaOzUehSyIaXzmWld7BJHGhERCNpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa67ZBWCt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZDYy8?=
 =?us-ascii?q?YYkAAeoPM+hbsYfyu0YArQO8CAeuC+7j1zFFimPo0q0hyOkhDR3K0RY8E94SrH?=
 =?us-ascii?q?jZrtP4P7oSX+Cvy6nIyC3OYelI1jfh9ofIaA0qr/aWUrNwbMXe100vFwfYhViX?=
 =?us-ascii?q?sYzqIS+V2foXs2SB6upvT+KuhHM5pAF1pjii3cMsiojPho0P0FDE8j91wIEvJd?=
 =?us-ascii?q?23UUN2Z8OvHphItyyCKYd6XsAvT3t1tConybAKo4C3cSYKxZg92hLSaeSLf5aJ?=
 =?us-ascii?q?7x7/VuucJDl4iXF+d76jghu//kutx+zzW8SxzlpGsi9In9zCu30C2RHe7NWMRO?=
 =?us-ascii?q?Fn8Ue7wzmP0hje6uFaLkAwkqrWM5ohwr8rlpoPqkTPBCD2mEPrjKOMcUUk4Oeo?=
 =?us-ascii?q?5/zmYrXguJCcK5d5hh/iPqktgMCzHPk0PwsUU2SF9+mx1Kfv8VD7TblSi/05iK?=
 =?us-ascii?q?jZsJTUJcQBoa65BhdY0p895Ba6EjeqyckXkmcZLF1bfBKLlpPmO1bTIPD+Efiw?=
 =?us-ascii?q?nU+snDBvx/DHPb3uHI/BL3fekLr5ebZ96khcyBc8zNxF5pJUDK0BL+z3WkPrqN?=
 =?us-ascii?q?PYCRo5Pheyw+bgDtV92YUeWX+VDq+eKqPSvkeE5vgzLOmUeI8VpDH9JuAh5/7v?=
 =?us-ascii?q?jn82h0URfKa03ZYMbHC4H/JmI1iWYHb2g9cBF3sKsRQ6TODwlFKCVjtTND6PWb?=
 =?us-ascii?q?kh7GQ7FJ6+FtWEAYSsm6CamiG8GJJQeyZBEF/LFH7pc4CNXbALcD6TJcl61SUJ?=
 =?us-ascii?q?UKXkR4I/2BX9iQnh1rAyK+PV/jEf54vu0cUw6+DNmBV37zFtEsmGz0mLSGd7mH?=
 =?us-ascii?q?5OQCU5i7tiq05wwUvWzK5jnvZDHsZS7f4abgBvD5/Xz+VgB5jSVwTNc82ST1Du?=
 =?us-ascii?q?Fs+nCjE4VN53w9IIb0tnANKkphTC2SOwBPkSjbPdV7Iu9aeJ53XtKtw17n/X2K?=
 =?us-ascii?q?QlixFyWsZTOHfgg6du+wXXA6bNkkOQjaHscr4Tin2evFyfxHaD6RkLGDV7Vr/I?=
 =?us-ascii?q?CDVGPhPb?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0CPAgBeLAlcmBHrdtBkHgEGBwaBZYExg?=
 =?us-ascii?q?k8Tg3qIeI08fJhFFBgUh1ciOBIBAwEBAQEBAQIBEwEBAQEBCAsLBhsOIwyCNgU?=
 =?us-ascii?q?CAxoBBoJbAQEBAQIBAQIgBBkBAQQKKQECAgEBAgYBAQoLDQICIgQCAgMBHhIBB?=
 =?us-ascii?q?QEcBhMFgxyBeggBBJoTPIodcHwzgnYBAQWHJQgSeYsTgVc/gRGCXTWEWoMrgle?=
 =?us-ascii?q?JIoYXgUyPXAcCgiAEjyIYgVyIO4cemHwPIYE8gXYzGjB0BoI1ghsMFxKITIU/Q?=
 =?us-ascii?q?TGBB4gaVoF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0CPAgBeLAlcmBHrdtBkHgEGBwaBZYExgk8Tg3qIeI08fJh?=
 =?us-ascii?q?FFBgUh1ciOBIBAwEBAQEBAQIBEwEBAQEBCAsLBhsOIwyCNgUCAxoBBoJbAQEBA?=
 =?us-ascii?q?QIBAQIgBBkBAQQKKQECAgEBAgYBAQoLDQICIgQCAgMBHhIBBQEcBhMFgxyBegg?=
 =?us-ascii?q?BBJoTPIodcHwzgnYBAQWHJQgSeYsTgVc/gRGCXTWEWoMrgleJIoYXgUyPXAcCg?=
 =?us-ascii?q?iAEjyIYgVyIO4cemHwPIYE8gXYzGjB0BoI1ghsMFxKITIU/QTGBB4gaVoF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,322,1539673200"; 
   d="scan'208";a="43007041"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 06 Dec 2018 06:07:20 -0800
Received: from localhost ([::1]:41172 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gUuJD-0006Ng-NX
	for like.xu@linux.intel.com; Thu, 06 Dec 2018 09:07:19 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:51308)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <peter.maydell@linaro.org>) id 1gUuE5-0000R6-8P
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 09:02:06 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <peter.maydell@linaro.org>) id 1gUu2N-0006X1-BB
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 08:50:01 -0500
Received: from mail-ot1-x343.google.com ([2607:f8b0:4864:20::343]:40124)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <peter.maydell@linaro.org>)
	id 1gUu2L-0006W6-Ug
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 08:49:54 -0500
Received: by mail-ot1-x343.google.com with SMTP id s5so430605oth.7
	for <qemu-devel@nongnu.org>; Thu, 06 Dec 2018 05:49:53 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linaro.org; s=google;
	h=mime-version:references:in-reply-to:from:date:message-id:subject:to
	:cc; bh=eVxowix1MLd8a6uUwIV3j01pKlhiEIMCq427mK/au/0=;
	b=j33GdqY90Rmd4aK9+ZM2M8yW83aoGbLiywAUBSdB0yepYm0Sp4Wyxg0kCMpKRaGc1/
	Dl1wNsFyYMj2RdQAkY/+XSmrb7uvm8Txq61/d6pe56p8yDapTBPr11RT/WXn0W5VRnJX
	NwGM6HcGLOBoeBs1Mt4DPQSLx2Y1raeF5bclU=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:mime-version:references:in-reply-to:from:date
	:message-id:subject:to:cc;
	bh=eVxowix1MLd8a6uUwIV3j01pKlhiEIMCq427mK/au/0=;
	b=ROtY5smqR4uaxNXgeQzJzBkjJ6vRdZi8Hgj7UrHQMAasv/4caQdzApyQEL6JY3qeqY
	KuJZDzn+w/nJzuVFPkQ977PJAcOMEIrO3miEOsiCcgZxRklZPblIUwqrBg7emPcYCaj4
	w8Ka17Br5tUczscBD5Ck17wZkv7nY72J0kIueuWvry67avHsvhHbnP+uRtu39i4pVgB0
	JVc3SIYIh3bEqxsOzSC/Ap6fB62n6P8kJWLiTEipZo6SZW6UJFFqj9N3Ww9YwL6gW9V5
	qXpHH9OkNXyx93aUFtCrjHbq6XMj7iuT0bfhhyL1iupvwo+WFQW9HFIW9fIrv3A6fuJ0
	xh+w==
X-Gm-Message-State: AA+aEWZ1feFG11wwF/kpzwMV9qq3i3Z70saG2BTiKWORZmAZ6I1udzgF
	njbHTxRhRD5x4jEJ7GTR8tnbEO/j2DXHTrtCGDY/GA==
X-Google-Smtp-Source: AFSGD/WwuaAGRXmK2AfK+Za5rhJuepbRO64dYwpA12LL2BufzOG0fMpWUsNxtkr6Pckf3QynqhfGFMsMgIhq/8skYC0=
X-Received: by 2002:a9d:3d44:: with SMTP id a62mr16748256otc.363.1544104192902;
	Thu, 06 Dec 2018 05:49:52 -0800 (PST)
MIME-Version: 1.0
References: <20181203203839.757-1-richard.henderson@linaro.org>
	<20181203203839.757-9-richard.henderson@linaro.org>
In-Reply-To: <20181203203839.757-9-richard.henderson@linaro.org>
From: Peter Maydell <peter.maydell@linaro.org>
Date: Thu, 6 Dec 2018 13:49:41 +0000
Message-ID: <CAFEAcA__1C-GkRk65E+JL9Ovte7GhZhGKmP3Zcv_w=wZSqV7=A@mail.gmail.com>
To: Richard Henderson <richard.henderson@linaro.org>
Content-Type: text/plain; charset="UTF-8"
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 2607:f8b0:4864:20::343
Subject: Re: [Qemu-devel] [PATCH v2 08/10] target/arm: Implement the
 ARMv8.1-LOR extension
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: QEMU Developers <qemu-devel@nongnu.org>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Mon, 3 Dec 2018 at 20:38, Richard Henderson
<richard.henderson@linaro.org> wrote:
>
> Provide a trivial implementation with zero limited ordering regions,
> which causes the LDLAR and STLLR instructions to devolve into the
> LDAR and STLR instructions from the base ARMv8.0 instruction set.
>
> Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
>
> ---
> v2: Mark LORID_EL1 read-only.
>     Add TLOR access checks.
>     Conditionally unmask TLOR in hcr/scr_write.
> ---
>  target/arm/cpu.h           |  5 +++
>  target/arm/cpu64.c         |  4 ++
>  target/arm/helper.c        | 91 ++++++++++++++++++++++++++++++++++++++
>  target/arm/translate-a64.c | 12 +++++
>  4 files changed, 112 insertions(+)
>
> diff --git a/target/arm/cpu.h b/target/arm/cpu.h
> index a84101efa9..ba0c368292 100644
> --- a/target/arm/cpu.h
> +++ b/target/arm/cpu.h
> @@ -3285,6 +3285,11 @@ static inline bool isar_feature_aa64_atomics(const ARMISARegisters *id)
>      return FIELD_EX64(id->id_aa64isar0, ID_AA64ISAR0, ATOMIC) != 0;
>  }
>
> +static inline bool isar_feature_aa64_lor(const ARMISARegisters *id)
> +{
> +    return FIELD_EX64(id->id_aa64mmfr0, ID_AA64MMFR1, LO) != 0;

You're testing the wrong ID register here...

> +}
> +

> +static CPAccessResult access_lor_other(CPUARMState *env,
> +                                       const ARMCPRegInfo *ri, bool isread)
> +{
> +    int el = arm_current_el(env);
> +
> +    if (arm_is_secure_below_el3(env)) {
> +        /* Access denied in secure mode.  */
> +        return CP_ACCESS_TRAP;
> +    }
> +    if (el < 2 && arm_el_is_aa64(env, 2)) {

You don't need to explicitly check if EL2 is AArch64 --
these registers are AArch64 only so if we accessed them
from a lower EL then that EL is AArch64 and so all the
ELs above it must be too.

> +        uint64_t hcr = arm_hcr_el2_eff(env);
> +        if (hcr & HCR_E2H) {
> +            hcr &= HCR_TLOR;
> +        } else {
> +            hcr &= HCR_TGE | HCR_TLOR;

This doesn't make sense to me: I think TGE can't be 1 here.
We know (.access flag) that we're not in EL0. We know from
the el < 2 that we're in EL1, and we've already ruled out
Secure EL1. So this is NS EL1. If E2H == 0 then TGE can't
be set, because E2H,TGE={0,1} means the CPU can never be
in NS EL1.

(these remarks apply also to the access_lorid function)

> +        }
> +        if (hcr == HCR_TLOR) {
> +            return CP_ACCESS_TRAP_EL2;
> +        }
> +    }
> +    if (el < 3 && (env->cp15.scr_el3 & SCR_TLOR)) {
> +        return CP_ACCESS_TRAP_EL3;
> +    }
> +    return CP_ACCESS_OK;
> +}
> +
>  void register_cp_regs_for_features(ARMCPU *cpu)
>  {
>      /* Register all the coprocessor registers based on feature bits */
> @@ -5741,6 +5800,38 @@ void register_cp_regs_for_features(ARMCPU *cpu)
>          define_one_arm_cp_reg(cpu, &sctlr);
>      }
>
> +    if (cpu_isar_feature(aa64_lor, cpu)) {
> +        /*
> +         * A trivial implementation of ARMv8.1-LOR leaves all of these
> +         * registers fixed at 0, which indicates that there are zero
> +         * supported Limited Ordering regions.
> +         */
> +        static const ARMCPRegInfo lor_reginfo[] = {
> +            { .name = "LORSA_EL1", .state = ARM_CP_STATE_AA64,
> +              .opc0 = 3, .opc1 = 0, .crn = 10, .crm = 4, .opc2 = 0,
> +              .access = PL1_RW, .accessfn = access_lor_other,
> +              .type = ARM_CP_CONST, .resetvalue = 0 },
> +            { .name = "LOREA_EL1", .state = ARM_CP_STATE_AA64,
> +              .opc0 = 3, .opc1 = 0, .crn = 10, .crm = 4, .opc2 = 1,
> +              .access = PL1_RW, .accessfn = access_lor_other,
> +              .type = ARM_CP_CONST, .resetvalue = 0 },
> +            { .name = "LORN_EL1", .state = ARM_CP_STATE_AA64,
> +              .opc0 = 3, .opc1 = 0, .crn = 10, .crm = 4, .opc2 = 2,
> +              .access = PL1_RW, .accessfn = access_lor_other,
> +              .type = ARM_CP_CONST, .resetvalue = 0 },
> +            { .name = "LORC_EL1", .state = ARM_CP_STATE_AA64,
> +              .opc0 = 3, .opc1 = 0, .crn = 10, .crm = 4, .opc2 = 3,
> +              .access = PL1_RW, .accessfn = access_lor_other,
> +              .type = ARM_CP_CONST, .resetvalue = 0 },
> +            { .name = "LORID_EL1", .state = ARM_CP_STATE_AA64,
> +              .opc0 = 3, .opc1 = 0, .crn = 10, .crm = 4, .opc2 = 7,
> +              .access = PL1_R, .accessfn = access_lorid,
> +              .type = ARM_CP_CONST, .resetvalue = 0 },
> +            REGINFO_SENTINEL
> +        };
> +        define_arm_cp_regs(cpu, lor_reginfo);
> +    }
> +
>      if (cpu_isar_feature(aa64_sve, cpu)) {
>          define_one_arm_cp_reg(cpu, &zcr_el1_reginfo);
>          if (arm_feature(env, ARM_FEATURE_EL2)) {
> diff --git a/target/arm/translate-a64.c b/target/arm/translate-a64.c
> index fd36425f1a..5952a9d1cc 100644
> --- a/target/arm/translate-a64.c
> +++ b/target/arm/translate-a64.c
> @@ -2290,6 +2290,12 @@ static void disas_ldst_excl(DisasContext *s, uint32_t insn)
>          }
>          return;
>
> +    case 0x8: /* STLLR */
> +        if (!dc_isar_feature(aa64_lor, s)) {
> +            break;
> +        }
> +        /* StoreLORelease is the same as Store-Release for QEMU.  */
> +        /* fallthru */

We are as usual a bit inconsistent, but we seem to use the
spelling "fall through" for this linter-hint more often than
any of the other variations.

>      case 0x9: /* STLR */
>          /* Generate ISS for non-exclusive accesses including LASR.  */
>          if (rn == 31) {
> @@ -2301,6 +2307,12 @@ static void disas_ldst_excl(DisasContext *s, uint32_t insn)
>                    disas_ldst_compute_iss_sf(size, false, 0), is_lasr);
>          return;
>
> +    case 0xc: /* LDLAR */
> +        if (!dc_isar_feature(aa64_lor, s)) {
> +            break;
> +        }
> +        /* LoadLOAcquire is the same as Load-Acquire for QEMU.  */
> +        /* fallthru */
>      case 0xd: /* LDAR */
>          /* Generate ISS for non-exclusive accesses including LASR.  */
>          if (rn == 31) {

thanks
-- PMM

