Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 04 Dec 2018 18:30:04 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 0D0B2580375;
	Mon,  3 Dec 2018 23:35:48 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga006-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 03 Dec 2018 23:35:47 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AsX9qehThM5Dp8oOX4cNOvxI8sNpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64YRaPt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZDI2y?=
 =?us-ascii?q?b5UBAfcCM+ZWoIbyu0YBohmwCgm3HOPiyCRFhmPq0aAgz+gtDRvL0BImEtkTsH?=
 =?us-ascii?q?rUttL1NKIKXO6yzanH0TXDYOlS2Tzg6obIdQwuofKLXbltdsfRzEkvFwTZgVWT?=
 =?us-ascii?q?rozoJDCV2foXs2id8eVgUfiji2k9qwF+uzWiwNonhIfOhoIQ0F/E9CN5zZ4wJd?=
 =?us-ascii?q?KmTU57ZsSkEZtKuy6GLod6W9ouTHtwtCY/1LIGvIa7fC8OyJQm2xHea+aLfJSR?=
 =?us-ascii?q?7h76TeqeOzF1j29mdrKnnxu+71Ssx+nmWsWp3ltGsDBJnsTPu3wRzRDe68qKRu?=
 =?us-ascii?q?Ng8kql2TuDzR3f5+9ELEwui6bXNYItzqQumpcTvknOGDL9ll/sg6+MbEok//Cl?=
 =?us-ascii?q?6+T5bbXioZ+RL5F0ig7gPaQ0gMC/Avo3MhIIX2eF/eSwzrrj/Vf2QLlSj/02lL?=
 =?us-ascii?q?fWsIzCKMgFuqK0BxVZ3pst5hqhFTuqzdcVkWUdIF9Eeh+Ll43pNEvPIPD8A/e/?=
 =?us-ascii?q?mVOskDJzyvDCP73hBIjNL3fanLfiY7l98UhcxxQ3zdxG4JJVBLcBL+zpWkLqqt?=
 =?us-ascii?q?zYAQE2Mxauz+bkFtp9zIUeVnyLAqODN6PSq1CI6vo1I+aQfI8VpCr9K/896v7q?=
 =?us-ascii?q?jH85mkEScbOm3JsKc324GvVmI0OEYXvjmNsBEGEKvhYgQ+zuklGNTTlTZ3OqVa?=
 =?us-ascii?q?Im+j47EJ6mDZvERo21gLyOxia7HoFMaWBBEFyMEWroeJ+CW/cDcy+SJs5hkjoZ?=
 =?us-ascii?q?VbmuUYMh1BeutBPkxLpjNObb5ioYtZf73thv++LTjQ0y9SBzD8mF0WGNSH97kn?=
 =?us-ascii?q?kLRz8x2qB/p0t9x0yH0ah5hfxYCNNS6+lIUgc8KZ7T0eh6B8ruVQLGe9eDUEym?=
 =?us-ascii?q?Tcm+ATEtUtIxxMcDbFxmG9WiiRDD3DCmA6UPmLyJH5E09qPc337sJ8dy0XrG1a?=
 =?us-ascii?q?8hj0U4TctLL2Gpmql/9w3LDY7Tj0qZj7qqdbgb3CPV92eM12yOsFtcUA5xS6rF?=
 =?us-ascii?q?W38fa1DSrdT44EPCUrCvBa4mMgtH1c6NNK9KZsf1glVBQffpIM7ebH6pm2esGR?=
 =?us-ascii?q?aIwauBY5fwdGUDwirREkgEnBoV/XadKwc+ACCto2bdDDxrEVLieEfs8eh4qHOm?=
 =?us-ascii?q?QU441QCKb0t917Wr/h4Zn+CTS/QW3rgcoicuty10HEqh39LRE9ePuhBufLtCbt?=
 =?us-ascii?q?8n4FdIz2TZtxdjMZymNK1igl8ecwJqv0LhzRl3C4NAkdQ0o3Mu1gZ9NaWY0FZZ?=
 =?us-ascii?q?fTOCwZ/wIqHXKnX1/B23d67W21Te0NGK+qcP6PU0sUnjsBuuFko493Vn0t9V03?=
 =?us-ascii?q?SH65XODQoSV4/xU0kt+xh7obHafjcy54fO2XJwNqm0tyfI28g1C+s91hagY9Bf?=
 =?us-ascii?q?PbueGw/2DcIbCNahKewwl1eycxILIfpd9Kg3P8OhafuLw6qrPOdmnDK7gmVL+o?=
 =?us-ascii?q?F90kSQ9yViTu7ExYoKw/ad3gGfTTfzkE+hstzrmYBDfTwTHne/xTL4C4JLZ6xy?=
 =?us-ascii?q?fZwECWGhI8CswtV+hpjtW2NX9VK5BlMG3tOpdgSWb1DnwQJQ0kEXq2S9mSSk1z?=
 =?us-ascii?q?x0jy0prq2H0SzUwuTtaAAIOnRWS2lll1vsJ5a7j8obXESxcwcmjh+l6lvkyKhB?=
 =?us-ascii?q?o6R/KXLeQUNJfyjwMmFjXbG8truEY85T9pwotT9bX/i7YVCfUrT9uQcV0zv/H2?=
 =?us-ascii?q?tCwzA2bzGrupTjkx16km6dN2tzrHzCdMF0xBff4sHcRPFL0joHQil4lSfYBlym?=
 =?us-ascii?q?M9a1+tWUko/JsvqiWGK5Sp1TbS7rwJuCtCSh/21qAh6/n/eplt38Cwc60iz719?=
 =?us-ascii?q?hsVSrWqhbxeY3r16W8MeJ6cUhkHl7868xmGo5glos8no0f2X8fhp+N53oIjX/z?=
 =?us-ascii?q?MclH2aL5dHcMRSQEw9nP7Ajn2U1jKGmEx4b4VnWb38tgaMO2YmIQ2iIh8c9KDL?=
 =?us-ascii?q?2Y46BDnStwulC4tx7eYeBhnjcBzvsj8H0ajPsIuAY3ziWdH6odHU9XPSH3kxSI?=
 =?us-ascii?q?7ta+rLhYZWq1cLiw0lZ+ks6lDL2Yvg5cX3P5cI84HSBs9sV/LE7M0Hrr54Hhed?=
 =?us-ascii?q?nQbsgcugeakhjelOhVNIw+luARiiV5I2L9smYoy+o6jRxowJG7s5KLK2Rr/KKl?=
 =?us-ascii?q?HBFYMif5aN8U+jHolaxehNqZ35izHpV9HTUGRIfoTfWtED4ItPXoLQCOECAnqn?=
 =?us-ascii?q?eAGLrSBguf6EZgr3LSHJGnLXCXJH8Fzdp8QBmRPlBQgAcRXD8ihJ42ChiqxND9?=
 =?us-ascii?q?cEd+/j0e/UT3qhxIyuJ1LRX/VnrfqRysajc1TpifMRVX4htD50fTLcyR8OZzEz?=
 =?us-ascii?q?tE8Z2mqQyHMnabaBhQDWEVRkyEAEjuPru06tnF7eeYHfCyL+fUbbWNtOxeVOqI?=
 =?us-ascii?q?xZS13Yt95DuMMsSPPn9/D/w0wEZDXHZ5G9jHlDULUSAYiyXNb8uDrhem5iJ3tt?=
 =?us-ascii?q?y/8OjsWA/35YqPDKZSMcxy+x+sh6ePLfWQhCF/KTZXzZ4MwX7IyL4C3F8dkS1u?=
 =?us-ascii?q?dj+tEageui7JVq7fhqhXDxsDYSNpKMRI97483hVKOcPDitP6yL94jv02C1dET1?=
 =?us-ascii?q?DhmdupZcsFI26jLlPHGV2LOa+CJT3KxcH3fKy9RadRjOVSqx2/pzKbH1X/MTSE?=
 =?us-ascii?q?kjnjTwqvPv1UjCGHIBxev5mwfQxwCWf4VtLpdB26PMVzjT032rA0gnLKNWgBMT?=
 =?us-ascii?q?lzaU9Nr7uQ7T9GjfV7AWBO8n1lLeyckSaD8+bYMooWsedsAilsi+Ja4XE6x6FJ?=
 =?us-ascii?q?4y1eWPN1mDXdrth1rlGik+mPzCdnURVUpjZKgoKLoVttOaHD+pZcXnbE+QoH7X?=
 =?us-ascii?q?+MBBQSu9tlFtrvtrhQy9fVkqLzLTZC89TM8sodB8jbMsSHMHU6PBrtGT7UChYF?=
 =?us-ascii?q?TDGxOWHegUxdjO+d9nmPopcmrZjsnclGdrgOeFUrF/9SMEVoGsAALYw/CiklnL?=
 =?us-ascii?q?iHjsMTzXW5qxbVSYNRuZWRBdyIBvC6DTeSjbBALzsPyrD/ZdAWNorw2EtKaVRg?=
 =?us-ascii?q?monOXU3KUoYe8WVacgYorRAVozBFRWop1hegM1v17Q=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AUAAD4LQZch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUgYBAQsBgVUFghEnmCCCDRSXNYEkA0wsEwGIDiI1CA0BAwEBAQEBAQIBEwE?=
 =?us-ascii?q?BAQoLCQgpL4I2JAGCYQEBAQECAQECJBM/BQEJAQEKGAkTEgMMBUkTBRaDBoF6C?=
 =?us-ascii?q?AQBpSozijKMHBeBQD+BEYMSilwCiTGXFQmRNAsYiWaHQJo6AWmBITMaCCgIgye?=
 =?us-ascii?q?CJxd/AQmNFT8ygQUBAYsDAQE?=
X-IPAS-Result: =?us-ascii?q?A0AUAAD4LQZch0O0hNFkHAEBAQQBAQcEAQGBUgYBAQsBgVU?=
 =?us-ascii?q?FghEnmCCCDRSXNYEkA0wsEwGIDiI1CA0BAwEBAQEBAQIBEwEBAQoLCQgpL4I2J?=
 =?us-ascii?q?AGCYQEBAQECAQECJBM/BQEJAQEKGAkTEgMMBUkTBRaDBoF6CAQBpSozijKMHBe?=
 =?us-ascii?q?BQD+BEYMSilwCiTGXFQmRNAsYiWaHQJo6AWmBITMaCCgIgyeCJxd/AQmNFT8yg?=
 =?us-ascii?q?QUBAYsDAQE?=
X-IronPort-AV: E=Sophos;i="5.56,313,1539673200"; 
   d="scan'208";a="54402815"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 03 Dec 2018 23:35:45 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726079AbeLDHfm (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 4 Dec 2018 02:35:42 -0500
Received: from mx2.suse.de ([195.135.220.15]:42928 "EHLO mx1.suse.de"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726017AbeLDHfm (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 4 Dec 2018 02:35:42 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (unknown [195.135.220.254])
        by mx1.suse.de (Postfix) with ESMTP id D83CBACEA;
        Tue,  4 Dec 2018 07:35:36 +0000 (UTC)
Date: Tue, 4 Dec 2018 08:35:35 +0100
From: Michal Hocko <mhocko@kernel.org>
To: David Rientjes <rientjes@google.com>
Cc: Linus Torvalds <torvalds@linux-foundation.org>,
        Andrea Arcangeli <aarcange@redhat.com>, ying.huang@intel.com,
        s.priebe@profihost.ag, mgorman@techsingularity.net,
        Linux List Kernel Mailing <linux-kernel@vger.kernel.org>,
        alex.williamson@redhat.com, lkp@01.org, kirill@shutemov.name,
        Andrew Morton <akpm@linux-foundation.org>,
        zi.yan@cs.rutgers.edu, Vlastimil Babka <vbabka@suse.cz>
Subject: Re: [patch 1/2 for-4.20] mm, thp: restore node-local hugepage
 allocations
Message-ID: <20181204073535.GV31738@dhcp22.suse.cz>
References: <alpine.DEB.2.21.1812031545080.161134@chino.kir.corp.google.com>
 <alpine.DEB.2.21.1812031545560.161134@chino.kir.corp.google.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <alpine.DEB.2.21.1812031545560.161134@chino.kir.corp.google.com>
User-Agent: Mutt/1.10.1 (2018-07-13)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Mon 03-12-18 15:50:24, David Rientjes wrote:
> This is a full revert of ac5b2c18911f ("mm: thp: relax __GFP_THISNODE for
> MADV_HUGEPAGE mappings") and a partial revert of 89c83fb539f9 ("mm, thp:
> consolidate THP gfp handling into alloc_hugepage_direct_gfpmask").
> 
> By not setting __GFP_THISNODE, applications can allocate remote hugepages
> when the local node is fragmented or low on memory when either the thp
> defrag setting is "always" or the vma has been madvised with
> MADV_HUGEPAGE.
> 
> Remote access to hugepages often has much higher latency than local pages
> of the native page size.  On Haswell, ac5b2c18911f was shown to have a
> 13.9% access regression after this commit for binaries that remap their
> text segment to be backed by transparent hugepages.
> 
> The intent of ac5b2c18911f is to address an issue where a local node is
> low on memory or fragmented such that a hugepage cannot be allocated.  In
> every scenario where this was described as a fix, there is abundant and
> unfragmented remote memory available to allocate from, even with a greater
> access latency.
> 
> If remote memory is also low or fragmented, not setting __GFP_THISNODE was
> also measured on Haswell to have a 40% regression in allocation latency.
> 
> Restore __GFP_THISNODE for thp allocations.
> 
> Fixes: ac5b2c18911f ("mm: thp: relax __GFP_THISNODE for MADV_HUGEPAGE mappings")
> Fixes: 89c83fb539f9 ("mm, thp: consolidate THP gfp handling into alloc_hugepage_direct_gfpmask")

At minimum do not remove the cleanup part which consolidates the gfp
hadnling to a single place. There is no real reason to have the
__GFP_THISNODE ugliness outside of alloc_hugepage_direct_gfpmask.

I still hate the __GFP_THISNODE part as mentioned before. It is an ugly
hack but I can learn to live with it if this is indeed the only option
for the short term workaround until we find a proper solution.

> Signed-off-by: David Rientjes <rientjes@google.com>
> ---
>  include/linux/mempolicy.h |  2 --
>  mm/huge_memory.c          | 42 +++++++++++++++------------------------
>  mm/mempolicy.c            |  7 ++++---
>  3 files changed, 20 insertions(+), 31 deletions(-)
> 
> diff --git a/include/linux/mempolicy.h b/include/linux/mempolicy.h
> --- a/include/linux/mempolicy.h
> +++ b/include/linux/mempolicy.h
> @@ -139,8 +139,6 @@ struct mempolicy *mpol_shared_policy_lookup(struct shared_policy *sp,
>  struct mempolicy *get_task_policy(struct task_struct *p);
>  struct mempolicy *__get_vma_policy(struct vm_area_struct *vma,
>  		unsigned long addr);
> -struct mempolicy *get_vma_policy(struct vm_area_struct *vma,
> -						unsigned long addr);
>  bool vma_policy_mof(struct vm_area_struct *vma);
>  
>  extern void numa_default_policy(void);
> diff --git a/mm/huge_memory.c b/mm/huge_memory.c
> --- a/mm/huge_memory.c
> +++ b/mm/huge_memory.c
> @@ -632,37 +632,27 @@ static vm_fault_t __do_huge_pmd_anonymous_page(struct vm_fault *vmf,
>  static inline gfp_t alloc_hugepage_direct_gfpmask(struct vm_area_struct *vma, unsigned long addr)
>  {
>  	const bool vma_madvised = !!(vma->vm_flags & VM_HUGEPAGE);
> -	gfp_t this_node = 0;
> -
> -#ifdef CONFIG_NUMA
> -	struct mempolicy *pol;
> -	/*
> -	 * __GFP_THISNODE is used only when __GFP_DIRECT_RECLAIM is not
> -	 * specified, to express a general desire to stay on the current
> -	 * node for optimistic allocation attempts. If the defrag mode
> -	 * and/or madvise hint requires the direct reclaim then we prefer
> -	 * to fallback to other node rather than node reclaim because that
> -	 * can lead to excessive reclaim even though there is free memory
> -	 * on other nodes. We expect that NUMA preferences are specified
> -	 * by memory policies.
> -	 */
> -	pol = get_vma_policy(vma, addr);
> -	if (pol->mode != MPOL_BIND)
> -		this_node = __GFP_THISNODE;
> -	mpol_cond_put(pol);
> -#endif
> +	const gfp_t gfp_mask = GFP_TRANSHUGE_LIGHT | __GFP_THISNODE;
>  
> +	/* Always do synchronous compaction */
>  	if (test_bit(TRANSPARENT_HUGEPAGE_DEFRAG_DIRECT_FLAG, &transparent_hugepage_flags))
> -		return GFP_TRANSHUGE | (vma_madvised ? 0 : __GFP_NORETRY);
> +		return GFP_TRANSHUGE | __GFP_THISNODE |
> +		       (vma_madvised ? 0 : __GFP_NORETRY);
> +
> +	/* Kick kcompactd and fail quickly */
>  	if (test_bit(TRANSPARENT_HUGEPAGE_DEFRAG_KSWAPD_FLAG, &transparent_hugepage_flags))
> -		return GFP_TRANSHUGE_LIGHT | __GFP_KSWAPD_RECLAIM | this_node;
> +		return gfp_mask | __GFP_KSWAPD_RECLAIM;
> +
> +	/* Synchronous compaction if madvised, otherwise kick kcompactd */
>  	if (test_bit(TRANSPARENT_HUGEPAGE_DEFRAG_KSWAPD_OR_MADV_FLAG, &transparent_hugepage_flags))
> -		return GFP_TRANSHUGE_LIGHT | (vma_madvised ? __GFP_DIRECT_RECLAIM :
> -							     __GFP_KSWAPD_RECLAIM | this_node);
> +		return gfp_mask | (vma_madvised ? __GFP_DIRECT_RECLAIM :
> +						  __GFP_KSWAPD_RECLAIM);
> +
> +	/* Only do synchronous compaction if madvised */
>  	if (test_bit(TRANSPARENT_HUGEPAGE_DEFRAG_REQ_MADV_FLAG, &transparent_hugepage_flags))
> -		return GFP_TRANSHUGE_LIGHT | (vma_madvised ? __GFP_DIRECT_RECLAIM :
> -							     this_node);
> -	return GFP_TRANSHUGE_LIGHT | this_node;
> +		return gfp_mask | (vma_madvised ? __GFP_DIRECT_RECLAIM : 0);
> +
> +	return gfp_mask;
>  }
>  
>  /* Caller must hold page table lock. */
> diff --git a/mm/mempolicy.c b/mm/mempolicy.c
> --- a/mm/mempolicy.c
> +++ b/mm/mempolicy.c
> @@ -1116,8 +1116,9 @@ static struct page *new_page(struct page *page, unsigned long start)
>  	} else if (PageTransHuge(page)) {
>  		struct page *thp;
>  
> -		thp = alloc_pages_vma(GFP_TRANSHUGE, HPAGE_PMD_ORDER, vma,
> -				address, numa_node_id());
> +		thp = alloc_pages_vma(GFP_TRANSHUGE | __GFP_THISNODE,
> +				      HPAGE_PMD_ORDER, vma, address,
> +				      numa_node_id());
>  		if (!thp)
>  			return NULL;
>  		prep_transhuge_page(thp);
> @@ -1662,7 +1663,7 @@ struct mempolicy *__get_vma_policy(struct vm_area_struct *vma,
>   * freeing by another task.  It is the caller's responsibility to free the
>   * extra reference for shared policies.
>   */
> -struct mempolicy *get_vma_policy(struct vm_area_struct *vma,
> +static struct mempolicy *get_vma_policy(struct vm_area_struct *vma,
>  						unsigned long addr)
>  {
>  	struct mempolicy *pol = __get_vma_policy(vma, addr);

-- 
Michal Hocko
SUSE Labs
