Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 06 Dec 2018 08:48:30 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 6F5D5580443;
	Wed,  5 Dec 2018 01:42:28 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga007-1.jf.intel.com with ESMTP; 05 Dec 2018 01:42:28 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AwnmFeBES3EHGSD/BbljZA51GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75o8m9bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJVyJPHJ6y?=
 =?us-ascii?q?YYUMAeQGP+lYoZL9p0MMoBalGQWgGPnixiNSi3PqwaE31fkqHwHc3AwnGtIDqG?=
 =?us-ascii?q?nao8/uNKcSS+++0a/Gwivdb/NX3zf29Y/Fcgs7rvGXXbJ/a87RxFIsFwzblFWQ?=
 =?us-ascii?q?r5LqPzeP2uQKqWib4PNtWOSygGAkswF8uiajytsoh4XTm44YxE7I+T9kzIs2Od?=
 =?us-ascii?q?G0Uk92bNy8HJdOqi2XOZF6T8MgTm1ypSo3xbMLtYSmcCQXzpks2gTRZOadc4eS?=
 =?us-ascii?q?5xLuTOaRLil8hHJiYL+/mRmy/la6yuHmVcm7zkxKrixbndnIrHwN0AbT6sefRv?=
 =?us-ascii?q?t8+EeuxyqP2hjN5u1YJU04j7fXJpA/zrIqi5YesljPEjX3lUj0lKOWc18r+ums?=
 =?us-ascii?q?6+TpeLXmoZqcOpdwigH/NKQuh8O+Df07MgcQRWib//qz1Ln68U3+TrRKiOM5kr?=
 =?us-ascii?q?PCvZDEKsQUuLS5DxVW0ok98Ra/CSmp0NACkXkANlJFdwqLj5L1NFHWPPD4EfC/?=
 =?us-ascii?q?jkyokDdqxPDJIKftA5rQLnXYlLfhfLB961NTyQYpzNBf4Y5UBa8FIP7pRkDxs9?=
 =?us-ascii?q?nYBAcjMwOo2+bnFMl91oQGVGKPGKCZMb/SvkWP5u41I+mMeZUauDDyK/U+4/7u?=
 =?us-ascii?q?jHk5mUISfKWz3JsXbmy4EepiI0mDfXXshdIBG38QvgUiVOzqlEGCUTlLanawWK?=
 =?us-ascii?q?Iz+Cs3CIGhDYfFQICth6eM3CO6Hp1Qe2BHBUqAEXbud4WYRfgMbDieLdNmkjwB?=
 =?us-ascii?q?TbKhUZMu1QmytA/mzLpqNvDb+jYYtZLk19h5/ffTmgsw9TFvC8Sd0meNT3x7n2?=
 =?us-ascii?q?8SRj822rx/rlJ5yluZzad4hPlYH8RJ5/xVSgc6KYLcz+tiBtDxQA3BeM2FSFKn?=
 =?us-ascii?q?Qtq8BzExQck8w9sPY0Z7BtWjgQrP3yusA78JibOLAIY4/b7b33j0P8x90WrJ1L?=
 =?us-ascii?q?E9j1k6RctCLXCpibRh9wfNHYLJk1+Wl6CxdasC2i7B82ODzWmLvEFcSwNwVaTF?=
 =?us-ascii?q?XXYCZkrZt9j550XCT6OwBrQjKAdO1cmCKq5SYN3zkVpGXOvjOMjZY2+phmi/Hw?=
 =?us-ascii?q?iIya2WYIrqYWod2j7dB1YCkw0I+XaGNA4+Bjquom7EDTxuE07vbF3o8eVktHy7?=
 =?us-ascii?q?SUo0xRmQb0J9z7q15gIVhfuERvMP37IEvSAhqyl0HFe9xd7WF8CMpw17fKVYYN?=
 =?us-ascii?q?M95lhH2Hndtwx8OJygMq9jikQfcwRxo0PhyRF3Bp9cnsgtqXMg1BByJr6A0FNd?=
 =?us-ascii?q?azOY2oj9NafTKmbs8xGgda7X1kvF39aL56gA8vI4q1bkvAG3DUci93Rn099I03?=
 =?us-ascii?q?qT/JnKDQwSUY7vXUYz7RR1u7baYiwl7YPOyXJsKbW0siPF298xBOol1wyscMtF?=
 =?us-ascii?q?PKKFFA/9CcsaB8e1JewumlipaA8EPe9I+K41OcOma+WJ2KqxMOl8mzKmiHxN4J?=
 =?us-ascii?q?ph3UKU6yp8VunI0o4fw/GZwgSITS38g0qmssztn4BLeysSHmumxSf4HoFRYrB9?=
 =?us-ascii?q?cpgRCWepJc263dF+h5/rW35F+1+vHVIG2Mm1eRWMa1zxxxFf1UMSoXa/gyu30y?=
 =?us-ascii?q?R0ky01rqqYxCHPw+XieAAHO2JRX2likFHsLJOwj9AbWkiocgcomAGk5Ub826hU?=
 =?us-ascii?q?uqB/I3PPTkdPeij8N3tiXbeotrqef85P74slsSdNX+SmYlCaSbn9rwEB0yz5HG?=
 =?us-ascii?q?texzE7dze0tZX/hBF6jGOdLHBurHvWY81wxBHf5MDCSv5VxDYJWC54iTzPDFim?=
 =?us-ascii?q?I9ap5cmUl4vEsu2mV2OuTJpTfTPpzYOBsiu2/mlqARy5n/CuldzrCwk60Snn19?=
 =?us-ascii?q?Z0USXEtgrzYo7u166iK+JoYlFoBEPg68p9Aox+kZE/hJAK1Xgam5Wa53wHkWjo?=
 =?us-ascii?q?PNVf2KL+amcNRDERz97U5gjlxFNsLnaTy43lUXWdx9NrZ8OmbWMOxiI988dKBb?=
 =?us-ascii?q?+R7LxFnit6uEC0rAzPbvhmgjcS1+Eu52UEjOETtwog1SGdArEUHUlFMi3gjRWI?=
 =?us-ascii?q?79airKpJYGaja6S/1E17ndq5FrGNvhlcWGrlepclBSJw8sJ/MFfW3Hzy8I7kfs?=
 =?us-ascii?q?TQbckIth2ViBrAi+lVKJQslvsFnyZnOGT9vWE7xO4/lxBhwZa6vI2fIWV34K25?=
 =?us-ascii?q?GgJYNiHyZ84L4T7il6FensKL34y1GpVhBy4GXJ/pTfKuDTITuu7rNweIED0gtH?=
 =?us-ascii?q?ibHaDTEhOY6Edjt3jPCYykN2mLJHkFytVvXBudK1ZagA8KRzU2hII5GhqpxMz8?=
 =?us-ascii?q?c0d5+zYR6UTjqhZXzuJoNh//UnrQpQuyazc0ToSfIwRS7g1Y+0jVNsme5PppHy?=
 =?us-ascii?q?5E5p2hsBCNKmuDagVICmEJR1WEB035Mbmo/9XA6O+YBuyxL/bVZbWOqOpeV+qH?=
 =?us-ascii?q?xJ6104tm+SqMOduLPnV4E/I73U9DV2hjG8vFgzUPVzAXlyXVYs6buhi8+y53rs?=
 =?us-ascii?q?O+8PjxWwLv/4yPC7RMPtV15hC2mryON+qRhCZ/NDZZ2YkAxX7OyLgDwlESjzti?=
 =?us-ascii?q?eCWqEbQFrSTNVr7fmrdLDx4HbCN+LNFH778n0QlXJ8Haisn51rp5jvMuD1dFVF?=
 =?us-ascii?q?rhmtymZMAQImG9Mk/HC1iPNLicOTLLxMT3a7umSbJMlOVUqwGwuTGDHk//PzSD?=
 =?us-ascii?q?kiPlWAy1Pe5QjCGUIhpetZq5chZsD2jjUd3nZge6MN9xkT0537k0imnWOm4bND?=
 =?us-ascii?q?h2a1lNoaGI7SNEnvV/HHRM73p/IumCniaZ7u/YJY4XsPtrGCt0ke1a7W8+y7tU?=
 =?us-ascii?q?6iFEWfN0lDHTrt5ov1GpjO2PxiB7XxpJrzYYzL6M6F5+MK/d+7FeVnveuhEA92?=
 =?us-ascii?q?OdD1INvdQhQtnuvb1Aj9vCjqT+LB9c/N/Ou8gRHc7ZLISAKnVyHwDuHWvvBRAF?=
 =?us-ascii?q?RHaPOH/egQQJi/iJ9nSRhps3sJ7hnNwJULANBw99Le8TFkkwRI9KG5xwRD5x1O?=
 =?us-ascii?q?fD1MM=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AeAADynAdch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUwUBAQsBg2snmCCCDRSXOIFzFBgTAYdPIjYHDQEDAQEBAQEBAgETAQEBCA0?=
 =?us-ascii?q?JCCkjDII2JAGCYgMDAQIkGQEBNwEFCQEBHzEDVAcSBYMcggIEAaQUgWwzgnYBA?=
 =?us-ascii?q?QWHJwiHb4MTgRwXgUA/iQ6FcYkaD4cKUI9VCYIkjxMLGJEviQmBKY5MgU0JgX0?=
 =?us-ascii?q?zGggoCIMnghsMF4hehV0iMoEFAQGIUiUGgiABAQ?=
X-IPAS-Result: =?us-ascii?q?A0AeAADynAdch0O0hNFkHAEBAQQBAQcEAQGBUwUBAQsBg2s?=
 =?us-ascii?q?nmCCCDRSXOIFzFBgTAYdPIjYHDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2JAGCY?=
 =?us-ascii?q?gMDAQIkGQEBNwEFCQEBHzEDVAcSBYMcggIEAaQUgWwzgnYBAQWHJwiHb4MTgRw?=
 =?us-ascii?q?XgUA/iQ6FcYkaD4cKUI9VCYIkjxMLGJEviQmBKY5MgU0JgX0zGggoCIMnghsMF?=
 =?us-ascii?q?4hehV0iMoEFAQGIUiUGgiABAQ?=
X-IronPort-AV: E=Sophos;i="5.56,317,1539673200"; 
   d="scan'208";a="42812628"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 05 Dec 2018 01:42:26 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728495AbeLEJlq (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 5 Dec 2018 04:41:46 -0500
Received: from mail.kernel.org ([198.145.29.99]:46228 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1727564AbeLEJln (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 5 Dec 2018 04:41:43 -0500
Received: from sasha-vm.mshome.net (unknown [213.57.143.11])
        (using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 0A92820850;
        Wed,  5 Dec 2018 09:41:39 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1544002901;
        bh=Sim1mrP5hkkRaJ4B3924zh8vsZq6+DKU1GAaQ98dXng=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=qj68u1eW+LAnhgPfjaHudYl0nEscHreX/LuVzOjCJTSyEfw7wCrA8vJrLMr3HtkbP
         T2tsrHwpeCBaBBBzhgEyPGQW2rDEpjtN0Odl4soFVqPV5IPR310Gpsewmi/nMYYcJ8
         SQqIt1EwhqdaLok9DLRLmUk8DyqIBCZMHE7RF+5w=
From: Sasha Levin <sashal@kernel.org>
To: stable@vger.kernel.org, linux-kernel@vger.kernel.org
Cc: David Howells <dhowells@redhat.com>,
        Al Viro <viro@zeniv.linux.org.uk>,
        Sasha Levin <sashal@kernel.org>, linux-afs@lists.infradead.org
Subject: [PATCH AUTOSEL 4.19 105/123] afs: Fix validation/callback interaction
Date: Wed,  5 Dec 2018 04:35:37 -0500
Message-Id: <20181205093555.5386-105-sashal@kernel.org>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20181205093555.5386-1-sashal@kernel.org>
References: <20181205093555.5386-1-sashal@kernel.org>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From: David Howells <dhowells@redhat.com>

[ Upstream commit ae3b7361dc0ee9a425bf7d77ce211f533500b39b ]

When afs_validate() is called to validate a vnode (inode), there are two
unhandled cases in the fastpath at the top of the function:

 (1) If the vnode is promised (AFS_VNODE_CB_PROMISED is set), the break
     counters match and the data has expired, then there's an implicit case
     in which the vnode needs revalidating.

     This has no consequences since the default "valid = false" set at the
     top of the function happens to do the right thing.

 (2) If the vnode is not promised and it hasn't been deleted
     (AFS_VNODE_DELETED is not set) then there's a default case we're not
     handling in which the vnode is invalid.  If the vnode is invalid, we
     need to bring cb_s_break and cb_v_break up to date before we refetch
     the status.

     As a consequence, once the server loses track of the client
     (ie. sufficient time has passed since we last sent it an operation),
     it will send us a CB.InitCallBackState* operation when we next try to
     talk to it.  This calls afs_init_callback_state() which increments
     afs_server::cb_s_break, but this then doesn't propagate to the
     afs_vnode record.

     The result being that every afs_validate() call thereafter sends a
     status fetch operation to the server.

Clarify and fix this by:

 (A) Setting valid in all the branches rather than initialising it at the
     top so that the compiler catches where we've missed.

 (B) Restructuring the logic in the 'promised' branch so that we set valid
     to false if the callback is due to expire (or has expired) and so that
     the final case is that the vnode is still valid.

 (C) Adding an else-statement that ups cb_s_break and cb_v_break if the
     promised and deleted cases don't match.

Fixes: c435ee34551e ("afs: Overhaul the callback handling")
Signed-off-by: David Howells <dhowells@redhat.com>
Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
Signed-off-by: Sasha Levin <sashal@kernel.org>
---
 fs/afs/inode.c | 18 ++++++++++++------
 1 file changed, 12 insertions(+), 6 deletions(-)

diff --git a/fs/afs/inode.c b/fs/afs/inode.c
index 479b7fdda124..071075d775a9 100644
--- a/fs/afs/inode.c
+++ b/fs/afs/inode.c
@@ -379,7 +379,7 @@ void afs_zap_data(struct afs_vnode *vnode)
 int afs_validate(struct afs_vnode *vnode, struct key *key)
 {
 	time64_t now = ktime_get_real_seconds();
-	bool valid = false;
+	bool valid;
 	int ret;
 
 	_enter("{v={%x:%u} fl=%lx},%x",
@@ -399,15 +399,21 @@ int afs_validate(struct afs_vnode *vnode, struct key *key)
 			vnode->cb_v_break = vnode->volume->cb_v_break;
 			valid = false;
 		} else if (vnode->status.type == AFS_FTYPE_DIR &&
-			   test_bit(AFS_VNODE_DIR_VALID, &vnode->flags) &&
-			   vnode->cb_expires_at - 10 > now) {
-			valid = true;
-		} else if (!test_bit(AFS_VNODE_ZAP_DATA, &vnode->flags) &&
-			   vnode->cb_expires_at - 10 > now) {
+			   (!test_bit(AFS_VNODE_DIR_VALID, &vnode->flags) ||
+			    vnode->cb_expires_at - 10 <= now)) {
+			valid = false;
+		} else if (test_bit(AFS_VNODE_ZAP_DATA, &vnode->flags) ||
+			   vnode->cb_expires_at - 10 <= now) {
+			valid = false;
+		} else {
 			valid = true;
 		}
 	} else if (test_bit(AFS_VNODE_DELETED, &vnode->flags)) {
 		valid = true;
+	} else {
+		vnode->cb_s_break = vnode->cb_interest->server->cb_s_break;
+		vnode->cb_v_break = vnode->volume->cb_v_break;
+		valid = false;
 	}
 
 	read_sequnlock_excl(&vnode->cb_lock);
-- 
2.17.1

