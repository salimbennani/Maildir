Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 09 Dec 2018 18:53:15 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 6213758052C;
	Fri,  7 Dec 2018 12:16:16 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 07 Dec 2018 12:16:15 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AavoqVBT2BCdMvLkuH2/PvblDcdpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64YB2Et8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZAo2y?=
 =?us-ascii?q?cZYBAeQCM+hfrYb9qUAOrQO8CAS3GO/j1iVFimPs0KEmz+gsFxzN0gw6H9IJtX?=
 =?us-ascii?q?TZtMn7NKAXUe+vyqnD0DTNb+5N2Tf99IfIchEhofeRVr93fsrR1FMvFwTfgVWW?=
 =?us-ascii?q?soHlMDaV2f4Ms2if9eZvSeWvi2s+pgx3vzOhxd8sh5HXio4Jzl3I7zh1zYgrKd?=
 =?us-ascii?q?GiVUJ2YsKoHIFRuiyYL4d6XMIvT390tCs/17EKpYO0cS0Wx5g7wxPTd/mKf5aU?=
 =?us-ascii?q?7h7/UeucJDZ1iXd4d7+8iRu96k6twfDmWMauylZFtC9Fn8HMtn8T0xzT7dCKSu?=
 =?us-ascii?q?Vy/ki/wzaDzQPT5f9eIUAyi6XbL4QtwrkqlpocqUjDHyn2l1vqjKKOaEko5uyl?=
 =?us-ascii?q?5/76brjouJOQLZJ4hwLiPqg0m8GyA/w0Mg0UUGia/eS82qfj/Ur8QLhSiv02k6?=
 =?us-ascii?q?/ZsI3VJMgCpa62HRVV0oA95Ba7Fjum19oZnX8ZI1JfYx+HkYfpNE/UIPziDvew?=
 =?us-ascii?q?nU6skDF1yPDCJLHhBY/NLnfbnLf7Ybl981JcyBY0zd1H45JUC7IBL+zpVk7+qd?=
 =?us-ascii?q?zVFRs5Mw2yw+b6B9RxzIIeWWSTAqCHNKPeq0OH5uUqI+OUfo8apC79K+Q55/7p?=
 =?us-ascii?q?lXI5mUUSfai13ZQNb3C0BPRmI1iDbnrqjdcMCmMKvgs4TOz3h1yOSz9TZ3CuX6?=
 =?us-ascii?q?0i4jE3Ep6pDYDGRoq1mryOwD+7HoFKZmBBEl2ME3DoeJueV/cPbyKSJMlhkjsf?=
 =?us-ascii?q?WLilSo8h0wyutQDgx7pmKOrU5jMXtZb52Ndp4O3TkAk49SZoAMSFz2GNU2Z0k3?=
 =?us-ascii?q?sSSD8t3KB/pk99xk2Z0adigfxVDthT5/JPUgcnOp/Q1e16C9buWg3feteFUkqp?=
 =?us-ascii?q?QtKjATspVNI+38cOY1phG9Wllh3D3DClA7kPm7yPBZw76KTc33fqKsZ5ynbG0r?=
 =?us-ascii?q?QhjlY8TstOM22mmrBw9wzJC4HVlEWZkr6gdb4A0y7V6GeD0W2OsVlFXwFqT6XK?=
 =?us-ascii?q?Q2oTZkvMotT//UPNUbmuBbMjMgtCzM6CLrBHatnojVVAWffiN87SY2O3m2esGx?=
 =?us-ascii?q?mIwqmAY5bte2UYxC/dElQLkxgP/XaaMggzHjqurHjADDNwD17vY1nj8e9lqHyl?=
 =?us-ascii?q?SE851AWKb0xn17qo9R8Zn/2cS/UP3r0avCctsSl7HFG439jOEdqPuxJhfLlAYd?=
 =?us-ascii?q?M6+FpHyWPZtwl6Ppy8L6BjhkQScxhts0PpzRV3DoRAkc4lrH4xyApyKKSY0E5O?=
 =?us-ascii?q?dj+C3JDwPKHXJXf2/By1d6HW3VTe2s6M+qgT8PQ4t0njvAaxG0U493VozdZU3G?=
 =?us-ascii?q?Wc55nQFwUSTI/+XVwx9xh5oLHafDIw54fV1X1qLKm1vSXO29MvBOs51Bmge81T?=
 =?us-ascii?q?P7+DFA/3C8caHdShKPQ2m1i1aRIJJOBT9LMuM8y6bfeH2a6rM/xmnDKplmlH5I?=
 =?us-ascii?q?F90kSR9ytzUOLI3pAFw+2G0QuDTTvzkFChssXvk4BeeT4SBna/yTTjBINJfK1y?=
 =?us-ascii?q?fJoEBn20I8KqwdVynZjtVGBC9F6iHl8JxNWmeR6PYFPjxw1Q0kIXrGejmSu5yT?=
 =?us-ascii?q?x0jj4oorCe3CzI3+Ttah4HNnRXS2lliFfmOZK0gMwCXEi0cwgpkwOo5Eb7x6RB?=
 =?us-ascii?q?pKVzNXLTQVpOfyXtK2FiU62wtqeNYsJV6ZMotzlXX/q4YVyAVrH9pB4a2Tv5H2?=
 =?us-ascii?q?RC3DA7ay2qupLhkhx4km2dNnVzrHneec1q3hfQ/t/cRf1Q3joAWiZ4jyLaBly9?=
 =?us-ascii?q?P9mv4NWVmI3PsuG4V2K9SJJTdTPnwp+HtCu+/WdqGwGwn+ivmt37Fgg3yS/62M?=
 =?us-ascii?q?NtVSnSrhb8Y4/r2r++MeJmeEloGVD959B7GoF4jos/mpUQ1WIGiZWS+HoNiX3z?=
 =?us-ascii?q?PslD2aLicHoNQiYGw93P7wjkwkFjLm+JyJj/VnWS2cZhY9i6YmUL2iMy9cxKCa?=
 =?us-ascii?q?GU7KBakitxuFa3sQXRYf1llDcH1fQu8GIag/0OuAc1yyWdA7MSElNCMS3iiRuI?=
 =?us-ascii?q?9My+o7tNZGm0b7ewzkV+kMulDLGDpAFcRXn4do0jHS928sVwLlbM3Gfv5YHjfd?=
 =?us-ascii?q?nadcgTuQGMkxfck+hVL4o8luYNhSpiI278vGcqy+gmjRx1xpG6vZOKK2Fs/KK/?=
 =?us-ascii?q?Hx5ZOSf5Z8IV+jHxk6lemtya0JyoHpVkAj8LRofnTeq0EDIOsvTqLx2BHyc7qn?=
 =?us-ascii?q?efBLrTBwuf6Fp9onLLEpCrMWyXJXYDwdVjQhmdOFJQgAQOUDommZ45ExigxNb9?=
 =?us-ascii?q?f0dh+jAR+ln4pwNOyu1yMhnwTHzfqB20ajsuS5ifMRlW7hxE50jPKsyT9eZzHy?=
 =?us-ascii?q?Be/p28ow2BMG2bZwJUDW4XXkyIHUzsPr6r5dPY6eiXGvK+L+fSYbWJseFfV/CI?=
 =?us-ascii?q?xY+20ot75TmMMN+DPmJlD/091UpORnR5G8XfmzUSRC0bjSPNb8iHpBii/i17tN?=
 =?us-ascii?q?yw8PPuWAj3/4uAF6NSMclz+xCxmaqDN/CfhCd6KTZb15MA33zIyKIY3F4dlS5u?=
 =?us-ascii?q?bSStEa8buC7JTaLQnLJXDhEBZyNyMstI87wz3g1XNcHHjdP106ZyjuQpBFddSV?=
 =?us-ascii?q?zhhsapaNQQLGGgL1zHHliENbScKT3PwsH6eqe8SbxWjOVJuBy8ozebE0n/Pjud?=
 =?us-ascii?q?kznlTQygMeZJjCuDJhxRpJm9cgpxCWjkVN/mdhy7MNptgTIq27E7mnPKOnAaMT?=
 =?us-ascii?q?Vnd0NNr7uQ7T5Xg/llGmxB6GZlIveAmyqD8+bYLZMWu+NxAitoj+Ja/Gg6y7xN?=
 =?us-ascii?q?4SBEXvN1ni7Srt9oo16+k+iPyiBoUBxBqjtQgIKLvENiObjW95VaWHbE+g4N4n?=
 =?us-ascii?q?uUCxgQu9RlDdjv6OhszY3zmaDuLn9i/tWcqdceL8vZMsSKNDwmKxW/XHbzCAYK?=
 =?us-ascii?q?BRimLn3SnUtD2KWV8nCahoI3ppjlhNwFTboNB3IvEfZPMENgFdpKD4psXjgkkL?=
 =?us-ascii?q?jT2MEV/323qjHeQcxbutbMUffEUqanEyqQkbQRP0hA+rj/N4lGc9Sjg0E=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BCAADt0wpch0O0hNFbCBwBAQEEAQEHB?=
 =?us-ascii?q?AEBgVQEAQELAYEwgS2BDieYJFABAQaBSYkMA26PLxQBARgTAYddIjcGDQEDAQE?=
 =?us-ascii?q?BAQEBAgETAQEBCgsJCCkjDII2JAGCYgMDAQIkGQEbHQEDAgkBAQUTOAMgEQEFA?=
 =?us-ascii?q?RwGARIFgxyBaQEDCA0BBJoPPIwJFgUBF4J3BYRBChknDV2BNwIGEodhgxOBHBd?=
 =?us-ascii?q?4gQeIf4YAAokTUIZUkDAJkUAjgVyIBzaHHyyIZI9kBgIJBw8hgTuBd00jFYMng?=
 =?us-ascii?q?hsMF4NKinQfMoEFAQGKZQEB?=
X-IPAS-Result: =?us-ascii?q?A0BCAADt0wpch0O0hNFbCBwBAQEEAQEHBAEBgVQEAQELAYE?=
 =?us-ascii?q?wgS2BDieYJFABAQaBSYkMA26PLxQBARgTAYddIjcGDQEDAQEBAQEBAgETAQEBC?=
 =?us-ascii?q?gsJCCkjDII2JAGCYgMDAQIkGQEbHQEDAgkBAQUTOAMgEQEFARwGARIFgxyBaQE?=
 =?us-ascii?q?DCA0BBJoPPIwJFgUBF4J3BYRBChknDV2BNwIGEodhgxOBHBd4gQeIf4YAAokTU?=
 =?us-ascii?q?IZUkDAJkUAjgVyIBzaHHyyIZI9kBgIJBw8hgTuBd00jFYMnghsMF4NKinQfMoE?=
 =?us-ascii?q?FAQGKZQEB?=
X-IronPort-AV: E=Sophos;i="5.56,327,1539673200"; 
   d="scan'208";a="141251270"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 07 Dec 2018 12:16:14 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726370AbeLGUPm (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 7 Dec 2018 15:15:42 -0500
Received: from mail-pg1-f196.google.com ([209.85.215.196]:42262 "EHLO
        mail-pg1-f196.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726331AbeLGUPj (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 7 Dec 2018 15:15:39 -0500
Received: by mail-pg1-f196.google.com with SMTP id d72so2176310pga.9;
        Fri, 07 Dec 2018 12:15:38 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=from:to:cc:subject:date:message-id:in-reply-to:references;
        bh=AF6FjZ5bYHqrhn2j5NEFo6/8zOWEnmu3uN/KpDBNyX8=;
        b=Zab/XM4V325VwLDjQweH6/BjCmL72mI1hULkW0qXSRg8VLOY0XFTvNNtOPrJPZL50C
         eq1kPcbT++Kv9gQaRQassMfIIa4TjxnlWxGak0TIK7KWHKsTDevl5n1aPTBKIRaMtcH/
         365X7yjF6admMely003US2abDL4tEZEVQgPShcLtBSzu5G5XPFq+qeIcA4aakQh5koOR
         TORvjAVHpA3Qe53DyMmCvUk51knVyBPPacmJ+uHZyyIKVCbu5fVA1PIV8JJZS4UMqNcO
         0Bs1g+Zfffl7P022i3lO54vLdB20PdVYUCzQuEUJ8pOZHdDatawPP6aoODY3S4xa5tGg
         Cbiw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references;
        bh=AF6FjZ5bYHqrhn2j5NEFo6/8zOWEnmu3uN/KpDBNyX8=;
        b=PxOWmIF9WmxBi0lZVkSsghhTGjebyDHYrMJoFOdRo5sBGsECQ4UMpbvhEjcTOQop5N
         1p+F4XA+sRy9Ym0vahcOVRaRGkOGKdHq3eYRPtOOBUfybaxxqZZz0ve6C+gW3CjgJ1Fd
         11WyqLDNxUjcwpbr52lELuGmnOji1knJH73hlTJ93ADtkSoMVdTayoU3WDNyoXukmSgk
         PUqHclnY1kz5kB9LM2Nhywis2dcoJOs6CKsnZe5Iy6F7j/mFhznraS52SFxRmh5SZkYZ
         R9ME0dfFUfoENNAbZl5nanhHdqwEofg0Ki98Z9p/fBjYeLjL+C3Rpt/Qb29EKl0xjtTj
         3ylA==
X-Gm-Message-State: AA+aEWbXLciIOVs00VD8ZOvtwHSFXoEkJ4+9CJ94sXnGI2pT6oW1RJoF
        MshZL7WOUPRBxngWJ9+n7+8=
X-Google-Smtp-Source: AFSGD/W9Uo+dyGKJC3EyYGG4gUbwzT3syau4aeixLuZm/XXzFbmUHUFNos5Py5QC5NN1ilRKzr/cjw==
X-Received: by 2002:a63:d846:: with SMTP id k6mr3216257pgj.251.1544213738150;
        Fri, 07 Dec 2018 12:15:38 -0800 (PST)
Received: from castle.thefacebook.com ([2620:10d:c090:200::6:d83b])
        by smtp.gmail.com with ESMTPSA id q75sm5870898pfa.38.2018.12.07.12.15.37
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Fri, 07 Dec 2018 12:15:37 -0800 (PST)
From: Roman Gushchin <guroan@gmail.com>
X-Google-Original-From: Roman Gushchin <guro@fb.com>
To: Tejun Heo <tj@kernel.org>, Oleg Nesterov <oleg@redhat.com>
Cc: Dan Carpenter <dan.carpenter@oracle.com>,
        Mike Rapoport <rppt@linux.vnet.ibm.com>,
        cgroups@vger.kernel.org, linux-doc@vger.kernel.org,
        linux-kernel@vger.kernel.org, kernel-team@fb.com,
        Roman Gushchin <guro@fb.com>
Subject: [PATCH v5 3/7] cgroup: protect cgroup->nr_(dying_)descendants by css_set_lock
Date: Fri,  7 Dec 2018 12:15:27 -0800
Message-Id: <20181207201531.1665-4-guro@fb.com>
X-Mailer: git-send-email 2.17.2
In-Reply-To: <20181207201531.1665-1-guro@fb.com>
References: <20181207201531.1665-1-guro@fb.com>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The number of descendant cgroups and the number of dying
descendant cgroups are currently synchronized using the cgroup_mutex.

The number of descendant cgroups will be required by the cgroup v2
freezer, which will use it to determine if a cgroup is frozen
(depending on total number of descendants and number of frozen
descendants). It's not always acceptable to grab the cgroup_mutex,
especially from quite hot paths (e.g. exit()).

To avoid this, let's additionally synchronize these counters using
the css_set_lock.

So, it's safe to read these counters with either cgroup_mutex or
css_set_lock locked, and for changing both locks should be acquired.

Signed-off-by: Roman Gushchin <guro@fb.com>
Cc: Tejun Heo <tj@kernel.org>
Cc: kernel-team@fb.com
---
 include/linux/cgroup-defs.h | 5 +++++
 kernel/cgroup/cgroup.c      | 6 ++++++
 2 files changed, 11 insertions(+)

diff --git a/include/linux/cgroup-defs.h b/include/linux/cgroup-defs.h
index 8fcbae1b8db0..03355d7008ff 100644
--- a/include/linux/cgroup-defs.h
+++ b/include/linux/cgroup-defs.h
@@ -348,6 +348,11 @@ struct cgroup {
 	 * Dying cgroups are cgroups which were deleted by a user,
 	 * but are still existing because someone else is holding a reference.
 	 * max_descendants is a maximum allowed number of descent cgroups.
+	 *
+	 * nr_descendants and nr_dying_descendants are protected
+	 * by cgroup_mutex and css_set_lock. It's fine to read them holding
+	 * any of cgroup_mutex and css_set_lock; for writing both locks
+	 * should be held.
 	 */
 	int nr_descendants;
 	int nr_dying_descendants;
diff --git a/kernel/cgroup/cgroup.c b/kernel/cgroup/cgroup.c
index 7519a4307021..f89dde50f693 100644
--- a/kernel/cgroup/cgroup.c
+++ b/kernel/cgroup/cgroup.c
@@ -4723,9 +4723,11 @@ static void css_release_work_fn(struct work_struct *work)
 		if (cgroup_on_dfl(cgrp))
 			cgroup_rstat_flush(cgrp);
 
+		spin_lock_irq(&css_set_lock);
 		for (tcgrp = cgroup_parent(cgrp); tcgrp;
 		     tcgrp = cgroup_parent(tcgrp))
 			tcgrp->nr_dying_descendants--;
+		spin_unlock_irq(&css_set_lock);
 
 		cgroup_idr_remove(&cgrp->root->cgroup_idr, cgrp->id);
 		cgrp->id = -1;
@@ -4943,12 +4945,14 @@ static struct cgroup *cgroup_create(struct cgroup *parent)
 	if (ret)
 		goto out_psi_free;
 
+	spin_lock_irq(&css_set_lock);
 	for (tcgrp = cgrp; tcgrp; tcgrp = cgroup_parent(tcgrp)) {
 		cgrp->ancestor_ids[tcgrp->level] = tcgrp->id;
 
 		if (tcgrp != cgrp)
 			tcgrp->nr_descendants++;
 	}
+	spin_unlock_irq(&css_set_lock);
 
 	if (notify_on_release(parent))
 		set_bit(CGRP_NOTIFY_ON_RELEASE, &cgrp->flags);
@@ -5233,10 +5237,12 @@ static int cgroup_destroy_locked(struct cgroup *cgrp)
 	if (parent && cgroup_is_threaded(cgrp))
 		parent->nr_threaded_children--;
 
+	spin_lock_irq(&css_set_lock);
 	for (tcgrp = cgroup_parent(cgrp); tcgrp; tcgrp = cgroup_parent(tcgrp)) {
 		tcgrp->nr_descendants--;
 		tcgrp->nr_dying_descendants++;
 	}
+	spin_unlock_irq(&css_set_lock);
 
 	cgroup1_check_for_release(parent);
 
-- 
2.17.2

