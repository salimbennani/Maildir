Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:48:49 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 2E116580443;
	Thu,  6 Dec 2018 07:00:48 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 07:00:47 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AAUpJPRCK1co4aWCHtem8UyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7/oMiwAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95RWSJfDIOy?=
 =?us-ascii?q?YYkAAekPMulXs4bzukAOrQO8CAS3GOPj1iVFimPq0aAgz+gsFxzN0gw6H9IJtX?=
 =?us-ascii?q?TZtMv6O7wTUe+r0abH0y/Db/ZN1Dby7YjIcwshoeqNXbJ3d8rd01UgFwTAjl6N?=
 =?us-ascii?q?rYDrMCmV1uURvGOG7+VsT/+khnMmqw5vvzeg2N0siozTiYITz1zJ8zhyzoUtJd?=
 =?us-ascii?q?CgVkJ3fdqpHIFNuyyUKYd6WN4uTmJ0tCogy7ALu4a3cSkJxZg92RLTdf6Kf5KV?=
 =?us-ascii?q?7h/hW+udOyl0iX15dL+5mh2861KvyvfmWcmxyFtKrjRKkt3Ltn0VyRzT5daISu?=
 =?us-ascii?q?Fn8keixzmPzQbT5f9AIUwukqrbMZEhzqYxlpoVr0vDAjf7lFvqgKKSbEko5+al?=
 =?us-ascii?q?5/r9brn7pZKQK5V4hwD8P6g2n8ywG+U4MgwAX2iB/uS80aXu/Un4QLVMk/03nb?=
 =?us-ascii?q?DVsJPEKsQBoK62HQtV3p8k6xexCTepzs4YkGIZLFJKZh2HlZLlO1LQL/DiC/ew?=
 =?us-ascii?q?nVCsnC1sx/DcMb3tGo/NIWTbkLf9YbZ97FZRyA4yzdBc+Z1YEL4AIO/oV0/1td?=
 =?us-ascii?q?zYCAI5MgOuz+bmDtV9yp0RWWaVDqCFN6PStEeC5vgzLOmUeI8VpDH9JuAl5/H0?=
 =?us-ascii?q?jH85hUUSfa6z0ZsXdXC3BPJmI0qCbHrog9cBF3oKvwUkQOzrjl2CTSBcZ3KoU6?=
 =?us-ascii?q?0g4TE7DZqsDZ3fSYC1nLyBwCC7E4VUZmBBFF+AC3Tod4KCW/cKbyKfOcthkj0C?=
 =?us-ascii?q?Vbi8RI4tzxCutAnmy7V5KurY4DEXtZXm1NJt/e3ciQky9SBoD8Say2yCVXp0nm?=
 =?us-ascii?q?MPRz81xqx/u1ZyylWY3Kh8gvxYE8FT5vxTXgc7M57c0/J1C9ToVg3dedeJTU6s?=
 =?us-ascii?q?Qs+6DjEpUtIx39gObl5+G9q4iBDPxS6qA74PmLyNC5w56abc33n3J8ZgxHfKzq?=
 =?us-ascii?q?ghj186QsRRMW2qnLJw9w/WB4TRiUWWi76qdbgA3C7K7GqM0HCBvF9GXwJqUaXK?=
 =?us-ascii?q?R3YfZlDIotT/4U/CS7yuCbEjMgZazc6CK61KasDmjFlcRffjPsjebHy1m2uqGR?=
 =?us-ascii?q?mIwbaMZpLwe2oBxCXdFFQEkwcL8HmbLwc+GDmur3jeDDN0E1LveF3j8e9lpXO/?=
 =?us-ascii?q?T080yRyKbkJ727q0/B4VmeKTS/cJ0r0Yvychri1+HEyh0NLOF9qAuw1hcb1AYd?=
 =?us-ascii?q?M85VdH0n7Ztwx9P5C6M6BunFkecx5zv0Pv0RV3BZ5NkcwrrHMs0QpzJriU0FJH?=
 =?us-ascii?q?dzOEw5/wPqfbJXX1/BCqc6TWwE3R0M6K+qcT7/Q1s0/svAW3GUst7Xpm08NZ3G?=
 =?us-ascii?q?CB5prXFgUSV5HxUkEp9xVho7HaYy89557b1HF2MKm0tCPC1MwtBOc/1hmgeNJf?=
 =?us-ascii?q?OrueFADuC80aG9SuKOsyllmpcxIIJvxd+LQ1PsOmbfSG3qGrMf1knDKni2RH/Y?=
 =?us-ascii?q?983liN9yp6Vu7HwZIFz+uE0QuAUjf2lE2hvdzvmYBYeTESGXKyyTLlBIFNfKJy?=
 =?us-ascii?q?Z5sECWC0L82x2Np+nZ/tV2dE+1G5A1MJxdGmeQCVb1z7xgBQ0UUXoXq6mSq31T?=
 =?us-ascii?q?B0kjcprraB0yzK2ejtaB0HOmtTTml4kVjsOZS0j8wdXEWwbwkplQGp5Ebgy6hA?=
 =?us-ascii?q?uaR/KXLeQUNJfyjwMmFjXbG8truEY85T9pwotT9bX/i7YVCfUrT9uQcV0zv/H2?=
 =?us-ascii?q?tCwzA2bzOqtY/jnxx5i2KdK2x/rGHDdsFzxhff5drcSuBX3jcdQCl4iD/XBkWz?=
 =?us-ascii?q?PtWz/NWUkYvDvf66V267SpJTdizrx5uatCSn/W1qHQG/n/erl9znCwc61jX319?=
 =?us-ascii?q?trVSXOtxv8Zojr16KnMeNoZEVoBVn869ZkFYF6iIc/mJYQ2X0CjJWP4XUHiXvz?=
 =?us-ascii?q?Mclc2a/mb3oCXz8Lz8TV4Aj4wkJjKH2Jypn9VnWcxMtheta7bnkX2iI788BFFq?=
 =?us-ascii?q?OU4KZYkityp1qytRjRbuRlnjcB1fsu72YXg+QIuAou1CqRGL4TEldDPSzwiRuI?=
 =?us-ascii?q?9cuxo7tNZGagarWw0Et+nda8DLCNuA1cWXD5eos8Ei909MlwLFXM0Hjr4IH+ZN?=
 =?us-ascii?q?bQdc4TtgGTkxrYk+hVL5cxmuALhCV9P2L9oGYly/U6jRF12ZG6vY6HK3hi/a6j?=
 =?us-ascii?q?Ax5YMCH1aN0X+j33kalemcOW1Zi1Hpp9AjULQIfoTfWwHT0Jr/vnMAKOECAmpn?=
 =?us-ascii?q?efBLrSBguf6EZgr3LSHJGnLXCXJH8Fzdp8QBmRPlBQgAcRXD8ihJ42ChiqxND9?=
 =?us-ascii?q?cEd+/j0R5ET3qh5SxeJzLRX/Tn3TpAS1ajc3VZifKgBZ7hpZ6kfRMMye6P9zHi?=
 =?us-ascii?q?5C8p2gqgyNNnKUZwBSAW4VXUyEAkjpPqOy6tnY7+iYGu2+IuPOYLWJtOxeTuqI?=
 =?us-ascii?q?yoip0od85DaMMcOPPnZ5Av0/20pDW215GsvDlzUOTSwXizzCb8qBqBig/S13q9?=
 =?us-ascii?q?i18O73VwL3+YuPF7xSPM1v+x+ogKeDNO2QhCdjJTZbzJMMwnDIx6YF3F4PkCFj?=
 =?us-ascii?q?bD2tEbUGtS7QQ6PcgK5XDxgHayxtMMtE9b4z3g5IOcTDkNP6yqZ4juIpC1dCTV?=
 =?us-ascii?q?HugNypatcQI26jNFLLHkKLNLWdKD3PwsH3Z768SLJKgOVVsR2wpSiUE0v5Mjuf?=
 =?us-ascii?q?kDnpUgilMftQgyGDIBxepIa9fw5xCWjiSdLqcAG0PMVrgj0237I0gGjHNWodMT?=
 =?us-ascii?q?h6bkNMoaec7SJegvVjBWNB6mBpIvWDmyac9+PYMIoZseN3AiRokOJX+HQ7xKFT?=
 =?us-ascii?q?7CFBRfx1njPdr99uo168lOmPxSFqUB5PqjZNmYKKsl9uOaTf9plcR3nE+AgB4n?=
 =?us-ascii?q?mXCxQP9JNZDYjMtq1LgvPIk6G7fDRP/snf+swfL8PUMsWCMWckdx3zF2iHIhEC?=
 =?us-ascii?q?SGumP2DSi0FHldmC83yOtZk9rN7nn59GCpJBVVd9KbVSIEVoENEYJZ5xH2B32Y?=
 =?us-ascii?q?WHhdIFsCLt5CLaQ99X69WeDqqf?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AHAABhOQlch0O0hNFkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBVAIBAQEBCwGDayeMcosvgSpjFIENmCMRGBMBgUuGDCI3Bg0BAwE?=
 =?us-ascii?q?BAQEBAQIBEwEBAQgNCQgpL4I2JAGCYQEBAQECAQECJFIFAQkBAQoUBAkTEgMMA?=
 =?us-ascii?q?QRJEwUZgwOBeggFpmEziimMHxeBf4MlSTWKXAKJKweBcoUPUIRpinMJkV6BXIU?=
 =?us-ascii?q?VikWZDIFcgXdwgzyCJxeOPCIxgQUBAYdtB4JGAQE?=
X-IPAS-Result: =?us-ascii?q?A0AHAABhOQlch0O0hNFkGgEBAQEBAgEBAQEHAgEBAQGBVAI?=
 =?us-ascii?q?BAQEBCwGDayeMcosvgSpjFIENmCMRGBMBgUuGDCI3Bg0BAwEBAQEBAQIBEwEBA?=
 =?us-ascii?q?QgNCQgpL4I2JAGCYQEBAQECAQECJFIFAQkBAQoUBAkTEgMMAQRJEwUZgwOBegg?=
 =?us-ascii?q?FpmEziimMHxeBf4MlSTWKXAKJKweBcoUPUIRpinMJkV6BXIUVikWZDIFcgXdwg?=
 =?us-ascii?q?zyCJxeOPCIxgQUBAYdtB4JGAQE?=
X-IronPort-AV: E=Sophos;i="5.56,322,1539673200"; 
   d="scan'208";a="54814440"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 06 Dec 2018 07:00:46 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726013AbeLFPAR (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 6 Dec 2018 10:00:17 -0500
Received: from out03.mta.xmission.com ([166.70.13.233]:43821 "EHLO
        out03.mta.xmission.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1730048AbeLFOkv (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 6 Dec 2018 09:40:51 -0500
Received: from in01.mta.xmission.com ([166.70.13.51])
        by out03.mta.xmission.com with esmtps (TLS1.2:ECDHE_RSA_AES_128_GCM_SHA256:128)
        (Exim 4.87)
        (envelope-from <ebiederm@xmission.com>)
        id 1gUupd-0005ao-H5; Thu, 06 Dec 2018 07:40:49 -0700
Received: from ip68-227-174-240.om.om.cox.net ([68.227.174.240] helo=x220.xmission.com)
        by in01.mta.xmission.com with esmtpsa (TLS1.2:ECDHE_RSA_AES_128_GCM_SHA256:128)
        (Exim 4.87)
        (envelope-from <ebiederm@xmission.com>)
        id 1gUupZ-0006M5-8H; Thu, 06 Dec 2018 07:40:49 -0700
From: ebiederm@xmission.com (Eric W. Biederman)
To: Kees Cook <keescook@chromium.org>
Cc: Linus Torvalds <torvalds@linux-foundation.org>,
        Tycho Andersen <tycho@tycho.ws>,
        Thomas Gleixner <tglx@linutronix.de>,
        Oleg Nesterov <oleg@redhat.com>,
        LKML <linux-kernel@vger.kernel.org>
References: <20181112171144.GI3645@cisco> <87efbqi1xa.fsf@xmission.com>
        <20181112185538.GK3645@cisco> <20181112192443.GL3645@cisco>
        <20181127232126.GA23658@cisco>
        <CAGXu5jLw0m8pG16u3huThNM2fYGjKoB2-5baUmg_FH6Z=L2SAg@mail.gmail.com>
        <CAGXu5jJaZAOzP1qFz66tYrtbuywqb+UN2SOA1VLHpCCOiYvYeg@mail.gmail.com>
        <87zhtthkuy.fsf@xmission.com>
        <CAGXu5jJv+TG8hovHi3Z5kTccz+Cx-keu=KZf032mCz2VRpc=Og@mail.gmail.com>
        <87k1ktqoe5.fsf@xmission.com>
        <CAGXu5jJgFrWajK5m8ev72DV9ueznLnbGV2-UGECnz0iZ_EFDUg@mail.gmail.com>
Date: Thu, 06 Dec 2018 08:40:34 -0600
In-Reply-To: <CAGXu5jJgFrWajK5m8ev72DV9ueznLnbGV2-UGECnz0iZ_EFDUg@mail.gmail.com>
        (Kees Cook's message of "Wed, 5 Dec 2018 17:00:34 -0800")
Message-ID: <87r2euiuql.fsf@xmission.com>
User-Agent: Gnus/5.13 (Gnus v5.13) Emacs/25.1 (gnu/linux)
MIME-Version: 1.0
Content-Type: text/plain
X-XM-SPF: eid=1gUupZ-0006M5-8H;;;mid=<87r2euiuql.fsf@xmission.com>;;;hst=in01.mta.xmission.com;;;ip=68.227.174.240;;;frm=ebiederm@xmission.com;;;spf=neutral
X-XM-AID: U2FsdGVkX1/NpyzcGyTUuZwdNv3rUGdARisMuWITK8w=
X-SA-Exim-Connect-IP: 68.227.174.240
X-SA-Exim-Mail-From: ebiederm@xmission.com
X-Spam-Checker-Version: SpamAssassin 3.4.2 (2018-09-13) on sa07.xmission.com
X-Spam-Level: *
X-Spam-Status: No, score=1.0 required=8.0 tests=ALL_TRUSTED,BAYES_50,
        DCC_CHECK_NEGATIVE,T_TM2_M_HEADER_IN_MSG,T_XMDrugObfuBody_08,
        T_XMDrugObfuBody_14 autolearn=disabled version=3.4.2
X-Spam-Report: * -1.0 ALL_TRUSTED Passed through trusted hosts only via SMTP
        *  0.8 BAYES_50 BODY: Bayes spam probability is 40 to 60%
        *      [score: 0.5000]
        *  0.0 T_TM2_M_HEADER_IN_MSG BODY: No description available.
        * -0.0 DCC_CHECK_NEGATIVE Not listed in DCC
        *      [sa07 1397; Body=1 Fuz1=1 Fuz2=1]
        *  1.0 T_XMDrugObfuBody_08 obfuscated drug references
        *  0.2 T_XMDrugObfuBody_14 obfuscated drug references
X-Spam-DCC: XMission; sa07 1397; Body=1 Fuz1=1 Fuz2=1 
X-Spam-Combo: *;Kees Cook <keescook@chromium.org>
X-Spam-Relay-Country: 
X-Spam-Timing: total 3800 ms - load_scoreonly_sql: 0.06 (0.0%),
        signal_user_changed: 3.1 (0.1%), b_tie_ro: 2.1 (0.1%), parse: 1.07
        (0.0%), extract_message_metadata: 24 (0.6%), get_uri_detail_list: 6
        (0.1%), tests_pri_-1000: 33 (0.9%), tests_pri_-950: 1.37 (0.0%),
        tests_pri_-900: 1.10 (0.0%), tests_pri_-90: 43 (1.1%), check_bayes: 41
        (1.1%), b_tokenize: 16 (0.4%), b_tok_get_all: 14 (0.4%), b_comp_prob:
        4.7 (0.1%), b_tok_touch_all: 4.5 (0.1%), b_finish: 0.64 (0.0%),
        tests_pri_0: 776 (20.4%), check_dkim_signature: 0.70 (0.0%),
        check_dkim_adsp: 6 (0.2%), poll_dns_idle: 2896 (76.2%), tests_pri_10:
        2.6 (0.1%), tests_pri_500: 2911 (76.6%), rewrite_mail: 0.00 (0.0%)
Subject: Re: siginfo pid not populated from ptrace?
X-Spam-Flag: No
X-SA-Exim-Version: 4.2.1 (built Thu, 05 May 2016 13:38:54 -0600)
X-SA-Exim-Scanned: Yes (on in01.mta.xmission.com)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Kees Cook <keescook@chromium.org> writes:

> On Sat, Dec 1, 2018 at 7:04 AM Eric W. Biederman <ebiederm@xmission.com> wrote:
>>
>> Kees Cook <keescook@chromium.org> writes:
>>
>> > On Tue, Nov 27, 2018 at 8:44 PM Eric W. Biederman <ebiederm@xmission.com> wrote:
>> >>
>> >> Kees Cook <keescook@chromium.org> writes:
>> >>
>> >> > On Tue, Nov 27, 2018 at 4:38 PM, Kees Cook <keescook@chromium.org> wrote:
>> >> >> On Tue, Nov 27, 2018 at 3:21 PM, Tycho Andersen <tycho@tycho.ws> wrote:
>> >> >>> On Mon, Nov 12, 2018 at 12:24:43PM -0700, Tycho Andersen wrote:
>> >> >>>> On Mon, Nov 12, 2018 at 11:55:38AM -0700, Tycho Andersen wrote:
>> >> >>>> > I haven't manage to reproduce it on stock v4.20-rc2, unfortunately.
>> >> >>>>
>> >> >>>> Ok, now I have,
>> >> >>>>
>> >> >>>> seccomp_bpf.c:2736:global.syscall_restart:Expected getpid() (1493) == info._sifields._kill.si_pid (0)
>> >> >>>> global.syscall_restart: Test failed at step #22
>> >> >>>
>> >> >>> Seems like this is still happening on v4.20-rc4,
>> >> >>>
>> >> >>> [ RUN      ] global.syscall_restart
>> >> >>> seccomp_bpf.c:2736:global.syscall_restart:Expected getpid() (1901) == info._sifields._kill.si_pid (0)
>> >> >>> global.syscall_restart: Test failed at step #22
>> >> >>
>> >> >> This fails every time for me -- is it still racey for you?
>> >> >>
>> >> >> I'm attempting a bisect, hoping it doesn't _become_ racey for me. ;)
>> >> >
>> >> > This bisects to here for me:
>> >> >
>> >> > commit f149b31557446aff9ca96d4be7e39cc266f6e7cc
>> >> > Author: Eric W. Biederman <ebiederm@xmission.com>
>> >> > Date:   Mon Sep 3 09:50:36 2018 +0200
>> >> >
>> >> >     signal: Never allocate siginfo for SIGKILL or SIGSTOP
>> >> >
>> >> >     The SIGKILL and SIGSTOP signals are never delivered to userspace so
>> >> >     queued siginfo for these signals can never be observed.  Therefore
>> >> >     remove the chance of failure by never even attempting to allocate
>> >> >     siginfo in those cases.
>> >> >
>> >> >     Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
>> >> >     Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
>> >> >
>> >> > They are certainly visible via seccomp ;)
>> >>
>> >> Well SIGSTOP is visible via PTRACE_GETSIGINFO.
>> >>
>> >> I see what is happening now.  Since we don't have queued siginfo
>> >> we generate some as:
>> >>                 /*
>> >>                  * Ok, it wasn't in the queue.  This must be
>> >>                  * a fast-pathed signal or we must have been
>> >>                  * out of queue space.  So zero out the info.
>> >>                  */
>> >>                 clear_siginfo(info);
>> >>                 info->si_signo = sig;
>> >>                 info->si_errno = 0;
>> >>                 info->si_code = SI_USER;
>> >>                 info->si_pid = 0;
>> >>                 info->si_uid = 0;
>> >>
>> >> Which allows last_signfo to be set,
>> >> so despite not really having any siginfo PTRACE_GET_SIGINFO
>> >> has something to return so does not return -EINVAL.
>> >>
>> >> Reconstructing my context that was part of removing SEND_SIG_FORCED
>> >> so this looks like it will take a little more than a revert to fix
>> >> this.
>> >>
>> >> This is definitely a change that is visible to user space.  The logic in
>> >> my patch was definitely wrong with respect to SIGSTOP and
>> >> PTRACE_GETSIGINFO.  Is there something in userspace that actually cares?
>> >> AKA is the idiom that the test seccomp_bpf.c is using something that
>> >> non-test code does?
>> >
>> > I think this would be needed by any ptracer that handled multiple
>> > threads. It needs to figure out which pid stopped. I think it's worth
>> > fixing, yes.
>> >
>> >> The change below should restore the old behavior.  I am just wondering
>> >> if this is something we want to do.  siginfo is allocated with
>> >> GFP_ATOMIC so if your machine is under memory pressure there is a real
>> >> chance the allocation can fail.  Which would cause whatever is breaking
>> >> now to break less deterministically then.
>> >
>> > I think memory pressure that would block a 128 byte GFP_ATOMIC
>> > allocation would mean the system was about to seriously fall over.
>> > Given the user-facing behavior change and that an existing test was
>> > already checking for this means we need to fix it.
>>
>> That sounds good but it is all rubbish.
>> A) It doesn't matter for tracing multiple processes because ptrace
>>    only works on a single signal at a time.  AKA if by the time you
>>    are calling PTRACE_GETSIGINFO you already know which process you are
>>    working against.
>> B) Not every signal includes si_pid so even if you didn't know who you
>>    were talking to this would be an issue.
>> C) For a non-rt signal we only every try and queue up a signal signal.
>>    We don't even attempt to queue siginfo otherwise.
>
> Fair enough, all true.
>
>> So what is the real world use case?
>
> A quick search didn't show anything I could find (looking for
> combinations of PTRACE_GETSIGINFO and si_pid use around a SIGSTOP).
> That doesn't mean it doesn't exist, though. The reason seccomp's
> selftests are so extensive is because we've had some very
> corner-case[1] bugs in real-world software.

I support that.

>> The most useful I can think of is the whole check if this tracer was the
>> one who sent SIGSTOP.  But that is fundamentally unreliable because we
>> only queue a single signal anyway.  We must to that to preserve
>> compatibility for non-rt signals as otherwise there are cases we could
>> queue the same signal twice.  So with two simultaneous SIGSTOPs it is a
>> race condition which siginfo is made available.
>
> Understood. However, the point of the seccomp test is for making sure
> that the ordering of the controlled test gets us the right pattern of
> events across a syscall interruption when seccomp is filtering. This
> is about making sure nothing around the restart changes since this
> could impact seccomp filters in the wild.

That is fair.  Does the test fundamentally need to check the sender of
SIGSTOP to know everything you are sending is working for seccomp?

>> Right now we are on the edge of letting test cases for debug
>> infrastructure prevent obvious optimizations/improvements to the code.
>> So if we can find something other than our seccomp_bpf.c test case that
>> fails I am happy to go with the change I posted.  Otherwise I think we
>> just need to fix seccomp_bpf.c.
>
> I wouldn't call this "debug infrastructure": they are behavioral test
> cases for seccomp, syscall, and ptrace interaction, and even this one
> has found bugs (see the "FIXME" note a few lines down, that remains
> unsolved[2] in arm32).

I would call ptrace "debug infrastructure".

My concern is that there were a number of signal senders that were
setting SEND_SIG_FORCED.  They were setting SEND_SIG_FORCED to cause
the signal delivery process to work differently.  Ensuring the pid
namespace init was killed, to not allocate siginfo, etc.

This was very fragile code internal to the kernel and required much
to much knowledge from the signal senders of the signals.  So I updated
the code to apply the transformations whenever reasonably possible so
senders of those signals would not need to think about it.  Reducing
bugs overall and making the kernel more consistent.

The logic was that the siginfo from SIGSTOP and SIGKILL could not be
observed.  Except for PTRACE_GETSIGINFO for SIGSTOP is actually true.

> If this actually doesn't count as breaking userspace, then okay, sure,
> I'll drop the sanity check in the seccomp selftest. But it feels wrong
> to me.

With just a test showing this, this doesn't yet count as breaking
userspace.  At the same time this is on a funny edge.

If something that is not a test truly depends on this it would
definitely count as breaking userspace.   Equally if there is a case
where it can be shown that userspace can reasonably depend on this
behavior to achieve something userspace needs to do.  Then sure.

We have in the past had ptrace users that weren't just about debugging
so I don't know that it is fair to just dismiss it as debugging
infrastructure.

Right now I am trying to understand why seccomp bpf cares.  So that I
can figure out if I need to do something.

The optimization of not allocating siginfo for SIGSTOP is very
reasonable except when the process is being ptraced.  It even has the
possibility of making SIGSTOP working better for the common case.  So I
am reluctant to give up a kernel improvement until I understand what
reasonable case in userspace I am breaking.

What I am seeing is a case where for a multi-threaded process the
ptracer has to win the multi-threaded signal lottery to see
the siginfo.  Further no one else but the ptracer can send SIGSTOP
in the same window and generate an alternate SIGSTOP.

So my best analysis is that except under very controlled circumstances
si_pid for SIGSTOP will be unreliable.  Except in a test I don't know
how you could guarantee those controlled circumstances.  But please if
you can see a scenario that I don't please let me know.

Eric
