Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 06 Dec 2018 09:00:44 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 021785804C1;
	Wed,  5 Dec 2018 15:49:56 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga003-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 05 Dec 2018 15:49:55 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A9TSOOhXXQP2pxmouKXHfNQmbw/LV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhCPuadThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGoCy?=
 =?us-ascii?q?YIUBAeQBI+hWsof9qFQSohulHQmhBvjiyiNUinL4waE2z/4sHAPA0Qc9H9wOqn?=
 =?us-ascii?q?PUrNDtOakPTeC60rfIwivFb/hLxTn975PIcgw/rv6RQbJ7bM3cyVMoFwPeklWf?=
 =?us-ascii?q?t5HqPy+O2+QCtGib6PdvVeeui248sQ1xpSKvxsg1h4TPm4kbxFfE9SBjz4Y0I9?=
 =?us-ascii?q?21UE17bsC+EJtWqS6aM5F6QsQ4Q2Fnvisx174IuYajcSQU1JgqwwTTZ+GJfoSW?=
 =?us-ascii?q?+B7vSeWcLStiiH9ker+znxe//Em6xuHiWcS4ylZHoytfntTOtX0A0QHY5NKdRf?=
 =?us-ascii?q?tn5Eih3C6C1wDN5eFAJkA5jbTbK5E/zb4qjJYTslrMHjXwmEroiK+abEIk+vKn?=
 =?us-ascii?q?6+j/Y7XmoIGTN5Nshw3gLqgjntazDfk2PwQQRWSX5Oex2KH58UD4QrhGlvg2nb?=
 =?us-ascii?q?PYsJDeK8QbvKm5AwpN34Yn6ha/CSqm0dsBkXkEMl1FYhSHgJbtO13XJ/D5A/G/?=
 =?us-ascii?q?jEq2kDpw2fDGMaPuAo/XInjAjrjhZ7B95FBYyAYpytBf/Z1UBqkbIP3vQk/xqM?=
 =?us-ascii?q?DYDhghPgywwubnC8ty2pkRWGKSGaKZNKLSsVmV5uMgOeWMZYkVuCrjJPgh/fLh?=
 =?us-ascii?q?kXg5mVoFd6mzwZQXcGy4HuhhI0iBYXrjmNYBEXsQsQo5VuDqiECCXiRVZ3a9RK?=
 =?us-ascii?q?884jA7CIS7DYbMXIytgbqB3DulEZ1SfGxJFleMEXLwfYWeR/gMcD6SItNmkjEc?=
 =?us-ascii?q?V7ihTJEu2QuttA/9zbpnKO3U9zYctZLi0th1+uLSmQsz9TxyE8SSzWWNQ3tokW?=
 =?us-ascii?q?MPQj88xLp/rlBlylefzah4hORVGsZI5/NJVQc6NoTQz/ZgBNDwQQ/BetaJSFC7?=
 =?us-ascii?q?QtSpGz0xT9Qxw8MQbEZ5AdmtkhfD3y+yCb8Pi7OLHIA08r7b33XpJMZy0XDG2L?=
 =?us-ascii?q?Mlj1knWMRPM2Kmi7V79wjSAY7JjkqYm7yrdaQawC7C6mODwXCSs0FfVQ56Sb/F?=
 =?us-ascii?q?UmwHZkvKsdT54VvPQKK0BrQ5LARN086CJbFMat3yk1pGQvDvONDdY2K0n2e9Hh?=
 =?us-ascii?q?KIxrKKbIr3dGQRxiTdCE4Ykw8N+XaKLxQxBiCko2jGFjxhCUrvY1/w8el5sH60?=
 =?us-ascii?q?U1U7zx+UYEF717q64BgVheeCRPMVxb8EvCYhqzNpHFeyxd7WCtyApxZ/c6VYe9?=
 =?us-ascii?q?8y/FBH1WfBvQxnIpOgN7xihkIZcwlvo0Pu1hB3CoJckcgqrHIm1hZyJbif0FNb?=
 =?us-ascii?q?czOY3JbwOrLMJ2n2/RCvbbPW217E3NaX/KcP9Oo3q1H5sA61EUoi9m1t08NJ3H?=
 =?us-ascii?q?uE+pXKEA0SXIrrXUYz6Rd7qK/VYykn64zPyH1jLLO7sjnB29IuGuso0RKgf9ZZ?=
 =?us-ascii?q?MKOZGw7+CcwaB86yKOM0n1ildA4LPOdX9KQsJcOpa+OG2LK3POZnhD+njXlH7J?=
 =?us-ascii?q?ph3U6W9it8SvTH35AKw/yD2guHVjH8jEqus8ztmIBEYy0SEXS7yST+GIFRYahy?=
 =?us-ascii?q?d54RCWiyO8232sl+h5n1Vn5C9V6sG0kJ2NW0dhqVdVD92xNf1V4WoXC+hSS31T?=
 =?us-ascii?q?h0nCw3oaqF2yzOxf/vdB4GOm5NWWljgk3gIYmyj9AGQkeoaxIlmwei5Ub/36Jb?=
 =?us-ascii?q?vrhwL3HPQUdUeCj7N2FjUqqquruCecJP844osSNMXeS4YFCaTKP9ohQA3yPiGW?=
 =?us-ascii?q?te2C40dzWwtprlmBx6jXqXLGxvo3rBZcFw2RDf6cTeRfFLxDoGRyp4iT7NClin?=
 =?us-ascii?q?Jdap/taUl5bFsu+gUWKsTZlTcSjtzYOduyq3/2xqARujn/+tnt3rCxQ10Sj+19?=
 =?us-ascii?q?NyTyXHsA78YpX316S9Ke9mflNnBFjm58p4G4F+lJA9hJUR2Xgcm5WU8mALkWb1?=
 =?us-ascii?q?MdVHx63+aGABSiIMw97Q+ALlwlFsLmqVx4LlUXWQ2shhaMO7Ym8M2iI98tpFCK?=
 =?us-ascii?q?Gb7LFfmSt1o1y4rR/eYPRnnzcdz+cu52Aeg+0TpAUtySCdCKgIHUZEJSzsiwiI?=
 =?us-ascii?q?79emoaVSZWavcqK/2FBwnN+/F7GCvh9TWGzidZg8By9w4d5yMFbN0H3194Hld8?=
 =?us-ascii?q?PcbdMVth2IjRjAi/JZJ442lvoPnSBnI37yvWU5y+4nihxjxY26vI+CK2l3/aO2?=
 =?us-ascii?q?GBhYNiDuZ8MI+zHglqJenseQ34CyEZRtADQLXJ30Tf22FDIer+joNwGLEDcksH?=
 =?us-ascii?q?eUBaLfHROD6Edht3/ACIqkN3aTJHkE19liQASdKVdbgAAVWjU6g5E4GhqrxMzn?=
 =?us-ascii?q?bEd2+DQR6kTkpRtLz+JiLwP/XXvHpAe0djc0T4CSLBhM4QFH+UjVKtaS7v5pEy?=
 =?us-ascii?q?Fb452hrxGNKmqBaARTFmwJXk2EB1b+Prih/9XA8u6YBvagIPvKe7mBteteV/KQ?=
 =?us-ascii?q?z5K1zoRm5yqMNtmIPnR6D/w73VdDXWlkG8vDnTUDUTcXlyXLb86Uvxq8/ix3rs?=
 =?us-ascii?q?ai8PXkQg7v5I2PC6dMPtVr4Ry5naCDN+uIjiZjNTlYzo8MxWPPyLUH3F4dlSBu?=
 =?us-ascii?q?dzquEbQBryLNT7jQmqhYDxEFcSNzKdBI4rk43glMP87bl9z02qR5jv4zF1dKS1?=
 =?us-ascii?q?jhltu1aswNJmG3LEnHC1qTNLSaOT3LxNn6brmhSbJLluVbqR2xtSyfE0/iJTmD?=
 =?us-ascii?q?kzjpVxayMeBDli2bPRpeuJ2jfRZpE2TsUNXmahijOt9tkTI22aE0hm/NNWMELT?=
 =?us-ascii?q?h8ckZNoqeM4i9Cnvp/G3JO7nx+IOmAmiaZ6fTYK5kMvftqBCR0i/xV4HAgx7RJ?=
 =?us-ascii?q?6yFEQeR/mDHOod52v1Gmju6PxyJnURVUrDZLgYOLvUN6NqTY9plPQ3DE/B0W4G?=
 =?us-ascii?q?WUChQKocZlC9L1t6BRzNjPiLz8KDNY/93I+sscApucFMXSNHsnLAqsGzPOCgYB?=
 =?us-ascii?q?ZSCkOHuZhEFHlvyWsHqPocsUsJ/pzaESR6FWUhQPEegGB0h5VIgYJ4xrUz84ub?=
 =?us-ascii?q?Gci8IN5GH4qwPeEpYJ9qvbX+6fVK28YA2SiqNJMl5Rmev1?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAACnYwhch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgVqBD4ECJ4N5iBlfiy6CDRRojUWJC4FzFBgNBgGHUyI0CQ0BAwE?=
 =?us-ascii?q?BAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmIDAwECIARSBgkBAR8FAgUTDgICAwwtG?=
 =?us-ascii?q?xkFglFLAYIBBQqmC3wMJ4QtAYEThG2BC4sTF4F/gRGCXQeEeIM7glcCiTOBb4Q?=
 =?us-ascii?q?TfJAlCYcDijQjgiiPB4p5gnmLDIFGgg0zGggoCDuCbAkKghQXEohMhV0iMgEBA?=
 =?us-ascii?q?YECAQGIBYJNAQE?=
X-IPAS-Result: =?us-ascii?q?A0ANAACnYwhch0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBgVq?=
 =?us-ascii?q?BD4ECJ4N5iBlfiy6CDRRojUWJC4FzFBgNBgGHUyI0CQ0BAwEBAQEBAQIBEwEBA?=
 =?us-ascii?q?QgNCQgpIwyCNiQBgmIDAwECIARSBgkBAR8FAgUTDgICAwwtGxkFglFLAYIBBQq?=
 =?us-ascii?q?mC3wMJ4QtAYEThG2BC4sTF4F/gRGCXQeEeIM7glcCiTOBb4QTfJAlCYcDijQjg?=
 =?us-ascii?q?iiPB4p5gnmLDIFGgg0zGggoCDuCbAkKghQXEohMhV0iMgEBAYECAQGIBYJNAQE?=
X-IronPort-AV: E=Sophos;i="5.56,320,1539673200"; 
   d="scan'208";a="54731445"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 05 Dec 2018 15:49:54 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729003AbeLEXsh (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 5 Dec 2018 18:48:37 -0500
Received: from mail.kernel.org ([198.145.29.99]:58332 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1728938AbeLEXsd (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 5 Dec 2018 18:48:33 -0500
Received: from gandalf.local.home (cpe-66-24-56-78.stny.res.rr.com [66.24.56.78])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 9FC5F20989;
        Wed,  5 Dec 2018 23:48:32 +0000 (UTC)
Received: from rostedt by gandalf.local.home with local (Exim 4.91)
        (envelope-from <rostedt@goodmis.org>)
        id 1gUgu7-0000He-MY; Wed, 05 Dec 2018 18:48:31 -0500
Message-Id: <20181205234831.598635573@goodmis.org>
User-Agent: quilt/0.65
Date: Wed, 05 Dec 2018 18:48:10 -0500
From: Steven Rostedt <rostedt@goodmis.org>
To: linux-kernel@vger.kernel.org
Cc: Ingo Molnar <mingo@kernel.org>,
        Andrew Morton <akpm@linux-foundation.org>,
        Namhyung Kim <namhyung@kernel.org>,
        Masami Hiramatsu <mhiramat@kernel.org>,
        Tom Zanussi <zanussi@kernel.org>,
        Ravi Bangoria <ravi.bangoria@linux.vnet.ibm.com>,
        Tom Zanussi <tom.zanussi@linux.intel.com>
Subject: [for-next][PATCH 21/30] tracing: Simplify creation and deletion of synthetic events
References: <20181205234749.372720574@goodmis.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From: Masami Hiramatsu <mhiramat@kernel.org>

Since the event_mutex and synth_event_mutex ordering issue
is gone, we can skip existing event check when adding or
deleting events, and some redundant code in error path.

This changes release_all_synth_events() to abort the process
when it hits any error and returns the error code. It succeeds
only if it has no error.

Link: http://lkml.kernel.org/r/154140847194.17322.17960275728005067803.stgit@devbox

Reviewed-by: Tom Zanussi <tom.zanussi@linux.intel.com>
Tested-by: Tom Zanussi <tom.zanussi@linux.intel.com>
Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
---
 kernel/trace/trace_events_hist.c | 53 +++++++++++---------------------
 1 file changed, 18 insertions(+), 35 deletions(-)

diff --git a/kernel/trace/trace_events_hist.c b/kernel/trace/trace_events_hist.c
index 1670c65389fe..0feb7f460123 100644
--- a/kernel/trace/trace_events_hist.c
+++ b/kernel/trace/trace_events_hist.c
@@ -1008,18 +1008,6 @@ struct hist_var_data {
 	struct hist_trigger_data *hist_data;
 };
 
-static void add_or_delete_synth_event(struct synth_event *event, int delete)
-{
-	if (delete)
-		free_synth_event(event);
-	else {
-		if (!find_synth_event(event->name))
-			list_add(&event->list, &synth_event_list);
-		else
-			free_synth_event(event);
-	}
-}
-
 static int create_synth_event(int argc, char **argv)
 {
 	struct synth_field *field, *fields[SYNTH_FIELDS_MAX];
@@ -1052,15 +1040,16 @@ static int create_synth_event(int argc, char **argv)
 	if (event) {
 		if (delete_event) {
 			if (event->ref) {
-				event = NULL;
 				ret = -EBUSY;
 				goto out;
 			}
-			list_del(&event->list);
-			goto out;
-		}
-		event = NULL;
-		ret = -EEXIST;
+			ret = unregister_synth_event(event);
+			if (!ret) {
+				list_del(&event->list);
+				free_synth_event(event);
+			}
+		} else
+			ret = -EEXIST;
 		goto out;
 	} else if (delete_event) {
 		ret = -ENOENT;
@@ -1100,29 +1089,21 @@ static int create_synth_event(int argc, char **argv)
 		event = NULL;
 		goto err;
 	}
+	ret = register_synth_event(event);
+	if (!ret)
+		list_add(&event->list, &synth_event_list);
+	else
+		free_synth_event(event);
  out:
-	if (event) {
-		if (delete_event) {
-			ret = unregister_synth_event(event);
-			add_or_delete_synth_event(event, !ret);
-		} else {
-			ret = register_synth_event(event);
-			add_or_delete_synth_event(event, ret);
-		}
-	}
 	mutex_unlock(&synth_event_mutex);
 	mutex_unlock(&event_mutex);
 
 	return ret;
  err:
-	mutex_unlock(&synth_event_mutex);
-	mutex_unlock(&event_mutex);
-
 	for (i = 0; i < n_fields; i++)
 		free_synth_field(fields[i]);
-	free_synth_event(event);
 
-	return ret;
+	goto out;
 }
 
 static int release_all_synth_events(void)
@@ -1141,10 +1122,12 @@ static int release_all_synth_events(void)
 	}
 
 	list_for_each_entry_safe(event, e, &synth_event_list, list) {
-		list_del(&event->list);
-
 		ret = unregister_synth_event(event);
-		add_or_delete_synth_event(event, !ret);
+		if (!ret) {
+			list_del(&event->list);
+			free_synth_event(event);
+		} else
+			break;
 	}
 	mutex_unlock(&synth_event_mutex);
 	mutex_unlock(&event_mutex);
-- 
2.19.1


