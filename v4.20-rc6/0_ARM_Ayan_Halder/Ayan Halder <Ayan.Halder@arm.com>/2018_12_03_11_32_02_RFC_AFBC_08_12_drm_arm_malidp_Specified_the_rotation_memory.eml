Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 03 Dec 2018 20:26:07 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 2CC9E580375;
	Mon,  3 Dec 2018 03:33:06 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga004-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 03 Dec 2018 03:33:05 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AOC35TBVr/1VdcCZuPMspR41/7CfV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZxeBuqdThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGoOy?=
 =?us-ascii?q?YZUSAeodM+hWrIf9qFkPrRSiCgejC/jvyidKi3Ltwa06yv4sHR3a0AA8At4Dtm?=
 =?us-ascii?q?nfotXvNKcVVOC41LXFzDXZYPNQxDzz6pLHchQ8rv6SR7J7bM3cxFUvFgzfiFWc?=
 =?us-ascii?q?s47rMCmR1usQrWeb9fFtWvi1i24isQ1+vj+vxsI1h4TPm4kbyUjE+D1nzIopId?=
 =?us-ascii?q?C0UlN3bNC6HJdKqi2XNJd6TtkjTmxqoCo21KAKtJyhcCQXx5kr2wTTZ+Gbf4WJ?=
 =?us-ascii?q?+B7uVOacLS92hH17e7+zmxO//E2jx+D4V8S7ylNHoyhYntXQs30ByQbc58ubRf?=
 =?us-ascii?q?Z44EitxziP2BrV5+pZO047j7DbJIQkwrMolpocr0DDHijulUXog6+ZaF8k9vKr?=
 =?us-ascii?q?6+v5eLXmoIGTN4tuhgH5KKQuldSzAeU+MgcQQ2iW4fqw2KHn8EHjXblHgOM6nr?=
 =?us-ascii?q?PEvJ3ZOcgXvK+0Dg1N3oYm8Rm/DjOm0NoCnXkAKVJIYBaHj4nvO1HTL/H0FPS/?=
 =?us-ascii?q?jEq2kDdt2f/GOqTtApLDL3jFjrjhZ61w61BTyAUt19BT/ZFUBa8bIPL1REDxsM?=
 =?us-ascii?q?bUDhgjMwy72+rnEsly1psCWWKTBa+UKKfSsV6L5u0xOeWNa5IVtS35K/gk4f7u?=
 =?us-ascii?q?kHA4lUUcfamvwZsYdnS4Eu56LEWeZHrmms0BHnsSvgoiUOzqj0WPUT5JaHazQ6?=
 =?us-ascii?q?Iz/DY7BJimDYfeXI+thrOB0Ty/Hp1XYGBGF1+NHW3pd4WCR/cDdiaSLtV9nTwD?=
 =?us-ascii?q?ULirU5Uh2g22tA/m17pnKfLZ+i8ftZ39ztR15OrTlRc09TxzFMmd12CNT2dpnm?=
 =?us-ascii?q?IHXTM23aZ/oVBjxVeHy6R3n/tYFdlL7fNTTgg6LYLcz/B9C93qQA3BZdeJSFGl?=
 =?us-ascii?q?Qtm8GzE+VNAxzsQKY0Z8HdWikx/C0zCrA78Ti7yEGpg0/rjA0Hj2IsZ302zG27?=
 =?us-ascii?q?U5j1k6XstPMnWrhq1l+AjVHYLJl0SZmLysdaQTxyPN8GaDzWyTvEBXSgJwUKPF?=
 =?us-ascii?q?XWwBaUvSt9j2+kTCT7q2A7Q9LgRB0dKCKrdNatDxkFpJXunjN8rEb2KxgWiwAw?=
 =?us-ascii?q?2Iya2KbIbtf2Ud3yDdCEwfngAX/HaGMxU+Byi7r2LfCjxuCUzgY0f2/eZir3O7?=
 =?us-ascii?q?S1c+zxuWYE15y7q15hkViOSBRPwJwLILpj0tqzVuE1a7xNLZFdyAqhFlfKVdZ9?=
 =?us-ascii?q?M9/VhG2XjYtwx7IpyvMaRiikQCfARwukPkzw93BZlYkcg2sHMqyxJ/Kb6Z0FNE?=
 =?us-ascii?q?cDOYwZDwO73NJmnu5hyvbLTW2lXf0NaQ9acC8/A4q1TlvAG0GUsu6XRn099J03?=
 =?us-ascii?q?SC4pXGFhYdUZX0Ukwv7Rh1u6naYjUh54PTzXBjK620vSHN2t03BOop0A2vf8pC?=
 =?us-ascii?q?P6yeEg/yEMoaB9a1JewumlipaA8EPe9I+K41OcOma+WJ2KqxMOl8mzKmiHxN4J?=
 =?us-ascii?q?ph3UKU6yp8VunI0o4FwvGFxAeISy3wjVahss/tn4BEaiofHm6+ySjiGY5Qabd+?=
 =?us-ascii?q?fYcNCWeyPcK3ws9yiILqW35d7FSjHU8J2Ne1eRqOaFzwxRdQ1UULrnO9gyu30j?=
 =?us-ascii?q?t0nysvrqWBxizOwv3uewYdNW5PWWZtk03sIY+yj90BWEiobg4plAaq5Ergxqhb?=
 =?us-ascii?q?orh/IHfXQUtSYyf2KGRiWLOqtrWee85P9I8osSJPXeW8YFCWUL78rwEB0yP+GW?=
 =?us-ascii?q?tT3zQ7dzCsupXkkB12kmOdLHBvrHXHfcF83wvQ5NvZRfRJxDoJWDF4iSXLBli7?=
 =?us-ascii?q?J9Sp/8+bl43AsuC9UGKtTIZTfjPozYODtSu743NlARukkvC3m93nFxU60CDh29?=
 =?us-ascii?q?lrUyXIsAjzYo3x26umNuJne1FiBEXg5MpiBoF+jowwiYkQ2HcAgZWZ53gHkWb1?=
 =?us-ascii?q?MdhA3aL+bXwNRSMEwtLP4Qjl3lFjIWyNx47jSnqdxc5hbcGgYmwKwiI989xKCK?=
 =?us-ascii?q?CM4bxHhyR1o0C0rQLMYfdnmDcdxuAj6Hobg+EPpQoswT+RArEUHUlEIyPskw6E?=
 =?us-ascii?q?4My5rKVSfGyva6S/1FJindC9C7GPugRcWHf6epg4ByNx4NtwMEnQ0HLt8IHrY8?=
 =?us-ascii?q?ffbcgcthCPlxfAju5VKI8+l/YQhCpnP379smMhy+IhkRNu2pS6tpCdK2px5KK5?=
 =?us-ascii?q?HgJYNjrtasMP/THtiLxSn8eM0ICpA5VhAS4LXJrzQPKsETISs+nnNgmUHD09rH?=
 =?us-ascii?q?ebBaTQHQuF5Eh6qHLPFoihN2uLK3kB0dViWB6dKVREjw8OWzU6moM5GhquxMz8?=
 =?us-ascii?q?a0p54jER5ljlqhpD0O5oNh//UnvBqwescDs7VJ+fLB9O5AFY+0jVKdCe7v50Hy?=
 =?us-ascii?q?xA/J2utgmNJXKAZwhSEWEFQE+EB03gPrmz49nP6fOYC/G6L/vPZ7WOtONfW+2J?=
 =?us-ascii?q?xZKpzotp4TKMOt+TMXllCv0xwlBDUmxhG8TFhzUPTDQaliLKb86GvRe85zd4rs?=
 =?us-ascii?q?al/PTwXwLv44SPBqBWMdVu/RC2nKiCO/SRhCZ/NTZXyJcMyWXUx7gY2V4Ykztu?=
 =?us-ascii?q?eCW1EbQcqS7NS7rdmq9JAB4aaCNzN8pI47g/3glXPs7bhc361qRljv4uEFpFUV?=
 =?us-ascii?q?3hmse0Zc0FOW29NVXHBFqVO7SCPzHE38b3YaakQ71KkOpUrwGwuSqcE0L7JDuD?=
 =?us-ascii?q?iiLmVwqxPuBMli2bOB1etZq5chZsD2jjUd3nZge6MN9xkT0537k0imnWOm4bND?=
 =?us-ascii?q?h2a1lNoaGI7SNEnvV/HHRM7mZkLemBgSqW8/PUJYoWsfR1BCR5jOZa4HU8y7tI?=
 =?us-ascii?q?4yBIXv11mC3OrtFwp1GqiPWAyj1iUBBWsDZEmJqLvVl+OaXe7pRBWWzL/BQI7W?=
 =?us-ascii?q?WRDRQFv9pkCt31tKBWxdjCj6bzKDZE89LJ8soQHcnUKMSbMHU/NRrlAiLbDAwA?=
 =?us-ascii?q?TW3jCWaKrl1Ulrmy/3mZo4Jy/rH9kZxIarZfWFEvPvoADwJuG9lUZN9TXy0ljP?=
 =?us-ascii?q?a3kcIB+DLqiBjPRdgcko3LX++6CO/qbj2eiO8ALzESwLr+Zb8PP5f41l0qPnNg?=
 =?us-ascii?q?nY3MXXHMVMpOrzxJZxUx5k5K9S46Bic20kbkZhuF7ngIDri9hBtwgQx7K6x58T?=
 =?us-ascii?q?7o4lsvDlTNvzB2mVM0397ihGbVOHT4Lb20XIxaIy71sVUhdJL2CU4hZAyomU1p?=
 =?us-ascii?q?OB/ARrRMn/1heDYvwEXQo5oKFfNCQKlsZB4L2erRae8l3FhRsSa7wlcB4vHKQ9?=
 =?us-ascii?q?M2mBErNJKhsX9E8wZid8IuY6LKKadFw0NTmqWW+Ciy2bZ1iEUaJkAQ4CaRdTQO?=
 =?us-ascii?q?tUggKLYrPWyr8/Zq5AjEnCFMMiBYU/ssv+Iv9U4nPemE5zzv3qQFKU2rMeGbaa?=
 =?us-ascii?q?SDtD6E3YSNS0Mx005OjUhd9KJ6+c0kdFaQVkZpx7yUXVxdMMPSKARYKdBT7HHJ?=
 =?us-ascii?q?cQ6EtuLRxZNzeY66E7asBaWVua8SqlqjGxwtDsIW88JLVs233UjeBd/gK6QB2F?=
 =?us-ascii?q?M3+QK9YB3PCf1AYg6GlnEDqse8zJhtxpV1IjAbHHU7MCOr67KRrQgvyrLXWd4/?=
 =?us-ascii?q?eGsXWM0AP3Q1WMqggDJxu3VGESnx0+QFxQzE5Dj58GCYRjL7ddBueN+QehUqDt?=
 =?us-ascii?q?yqs31r+K+sg1PL2pHBISf8OMg0/peF7OgaqpaOAbBPRLxmrkHTs4pVXXqnVyjI?=
 =?us-ascii?q?C9H/b8z1YIkhbdX+SW2zV0eijT0dTMrrOtupaK+SjlesDcxbqoSU3zALMc67Cy?=
 =?us-ascii?q?EQHAp2q+gf5aV6IwoZbNBzNRHyugs9N4S7IQGFwtupXmChICdXSP8Zyv+1Mfgf?=
 =?us-ascii?q?hSYlcOK/4HcpUJw/y+657QgLSY1AxkXSzOiuYqFSWDb+H3hadRmJoyclwSwpfO?=
 =?us-ascii?q?8x2uIXxBLOrElZPTeWcuBgdG1DuZc7H1zYaSF/CXI9b1udi5fTpwCrwrYe9jdc?=
 =?us-ascii?q?mNAS1vdK5jy29JneazWoUbftp5jPqScIaNktuap6MY37ZMCBsdmWyjreR57Uux?=
 =?us-ascii?q?bDXiOgDfdyn9lbOiVTQPhQ32oiPJpC8cBI80w9fs4kIbBFTqUh7Pj+YCBiAQYb?=
 =?us-ascii?q?1ykVXcWM0WpGyq242r3HhlKcd58KLhMJqtNBj8EbXiowZTkR7uf3U4TQin/BRm?=
 =?us-ascii?q?8ACBkc4B4K5w8akIJ0OOf/79ybYoVLzmt/svtyGgvCEpVl7ROvY3Cfhx7YQfGt?=
 =?us-ascii?q?nvaB1BhXivnr149IC1ZEFUFByrMOxQMTI7ZtJvxV59aSvw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A1AAD3EwVch0O0hNFiHgEGBwaBUwcLA?=
 =?us-ascii?q?YEwUIFcBAsVEgqHNgOQDoJrlzSBJANMEwEYEwGIAyI2Bw0BAwEBAQEBAQIBEwE?=
 =?us-ascii?q?BAQoLCQgpIwyCNiQBgmIDAwECJBkBAREmAQUJAQEBAU4DLyUCBAENBQWDHIFqA?=
 =?us-ascii?q?xUBAgEBmXgCigeBbDOCdgEBBYEEAQGDchiCCQiMHIFXP4ERjW6PdZBNBwKCI48?=
 =?us-ascii?q?bFpEmiQSPQgIEAgQFAg0BAQWBTQaCADMaI4M8ghsJAxcSgziKHAE2coEFAQEhi?=
 =?us-ascii?q?SwBgR4BAQ?=
X-IPAS-Result: =?us-ascii?q?A0A1AAD3EwVch0O0hNFiHgEGBwaBUwcLAYEwUIFcBAsVEgq?=
 =?us-ascii?q?HNgOQDoJrlzSBJANMEwEYEwGIAyI2Bw0BAwEBAQEBAQIBEwEBAQoLCQgpIwyCN?=
 =?us-ascii?q?iQBgmIDAwECJBkBAREmAQUJAQEBAU4DLyUCBAENBQWDHIFqAxUBAgEBmXgCige?=
 =?us-ascii?q?BbDOCdgEBBYEEAQGDchiCCQiMHIFXP4ERjW6PdZBNBwKCI48bFpEmiQSPQgIEA?=
 =?us-ascii?q?gQFAg0BAQWBTQaCADMaI4M8ghsJAxcSgziKHAE2coEFAQEhiSwBgR4BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,310,1539673200"; 
   d="scan'208";a="54265846"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 03 Dec 2018 03:32:44 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726542AbeLCLdT (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 3 Dec 2018 06:33:19 -0500
Received: from mail-eopbgr20052.outbound.protection.outlook.com ([40.107.2.52]:21376
        "EHLO EUR02-VE1-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726439AbeLCLcv (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 3 Dec 2018 06:32:51 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=armh.onmicrosoft.com;
 s=selector1-arm-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=FVT2l6+vvsPZ4FRF/AnKfcGC5jNsldyhxmNg5gGYMt4=;
 b=LwHMXB75d9xH1VZJFPp1kV/DCttiFr30OGb2Xt7eQrX4HI2eTwK6JFHKXkx1tNYjOjNyHaPajNmfAhZYrp0kW1YM4nVqBmjty7FKSjFW7tFkT0jsD895xRycGVIO0Z6n4Sxl35LdczxiegsSo90rI86lqtP6z0E0iKrcljoQD9g=
Received: from AM0PR08MB3891.eurprd08.prod.outlook.com (20.178.82.147) by
 AM0PR08MB3491.eurprd08.prod.outlook.com (20.177.108.222) with Microsoft SMTP
 Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1382.18; Mon, 3 Dec 2018 11:32:02 +0000
Received: from AM0PR08MB3891.eurprd08.prod.outlook.com
 ([fe80::896a:710:2a8c:e2fa]) by AM0PR08MB3891.eurprd08.prod.outlook.com
 ([fe80::896a:710:2a8c:e2fa%6]) with mapi id 15.20.1382.020; Mon, 3 Dec 2018
 11:32:02 +0000
From: Ayan Halder <Ayan.Halder@arm.com>
To: Ayan Halder <Ayan.Halder@arm.com>,
        Liviu Dudau <Liviu.Dudau@arm.com>,
        Brian Starkey <Brian.Starkey@arm.com>,
        "malidp@foss.arm.com" <malidp@foss.arm.com>,
        "airlied@linux.ie" <airlied@linux.ie>,
        "dri-devel@lists.freedesktop.org" <dri-devel@lists.freedesktop.org>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        "maxime.ripard@bootlin.com" <maxime.ripard@bootlin.com>,
        "sean@poorly.run" <sean@poorly.run>,
        "maarten.lankhorst@linux.intel.com" 
        <maarten.lankhorst@linux.intel.com>,
        "corbet@lwn.net" <corbet@lwn.net>,
        "mchehab+samsung@kernel.org" <mchehab+samsung@kernel.org>,
        "gregkh@linuxfoundation.org" <gregkh@linuxfoundation.org>,
        "davem@davemloft.net" <davem@davemloft.net>,
        "akpm@linux-foundation.org" <akpm@linux-foundation.org>,
        "nicolas.ferre@microchip.com" <nicolas.ferre@microchip.com>,
        "arnd@arndb.de" <arnd@arndb.de>,
        "linux-doc@vger.kernel.org" <linux-doc@vger.kernel.org>
CC: nd <nd@arm.com>
Subject: [RFC AFBC 08/12] drm/arm/malidp: Specified the rotation memory
 requirements for AFBC YUV formats
Thread-Topic: [RFC AFBC 08/12] drm/arm/malidp: Specified the rotation memory
 requirements for AFBC YUV formats
Thread-Index: AQHUivvPzQJfI8D9iUy5lgsE4OxoLw==
Date: Mon, 3 Dec 2018 11:32:02 +0000
Message-ID: <1543836703-8491-9-git-send-email-ayan.halder@arm.com>
References: <1543836703-8491-1-git-send-email-ayan.halder@arm.com>
In-Reply-To: <1543836703-8491-1-git-send-email-ayan.halder@arm.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-clientproxiedby: LO2P265CA0279.GBRP265.PROD.OUTLOOK.COM
 (2603:10a6:600:a1::27) To AM0PR08MB3891.eurprd08.prod.outlook.com
 (2603:10a6:208:109::19)
authentication-results: spf=none (sender IP is )
 smtp.mailfrom=Ayan.Halder@arm.com; 
x-ms-exchange-messagesentrepresentingtype: 1
x-originating-ip: [217.140.106.55]
x-ms-publictraffictype: Email
x-microsoft-exchange-diagnostics: 1;AM0PR08MB3491;6:rCS6QDsbjMR1bnhypOsMzAWLrqAUZyErYekHDohIoXUhdy4zBV9Xsr/F4+9Zn04iywMMh19cJ+DWUpsQsy2EslTaHmQiiKikaLl44dQcAOCQz4osaEJeeyVvtfztqhEMk85jVMV3fCKT2083/iFmqafytkW3EEKx+0h5VOpnzdwr8k8dZkb50Guz71yLl7eJFEGukw9/wgs5u7aFMFckw1GuLQfdsPtdAIGCLslGOMdhS1gQVa5EVlbeJlJTNZizoc17HZW8MNuahjTMnnlAxmFrAFEw5FAPtkaarxaofKjxrS/qebHNOHWaUai6TwlGMlXTGVVbElURphORtthy4RXAedXB11KH3z4rHsEFGN+uHtbGVO2euuXGNcJe+bz2VJDX1yvDbHvkpDI7sEiNpcHDViW4aucmvhqe6sqAfhWcR4pQvDLdCNuXzdID9QsoXR9pzMVurbqyoLcF+rH1Lw==;5:aVwJdj8lwBbI3p5B4dGVy6TMmTsme25IouN5SpyjzDG0EWwEHzQvWa5goIS95yChByx+U/UWM+V2oXNXJ8CH8qBtQwEKnyQxJ7gE0BZM4BVnqzj1htlIYgIVtWGzdJRRyn96FwGbL/pemROhZ6RCRCkZcabE4cOSg48FUOHmocQ=;7:SK8RQ2qtAoVw3IdXg4N+4tAnf7B2jrOdnKSasSII3gOtgtWOF5tQpL+8GZ56AxZyOLz0CFtROHwacFDgvu9q5GmDJ/kG1q/Hixk2jvL0/W98rMVdAYCR3i+wO3nfpKFGktIl342agPid6TXk2hMqww==
x-ms-office365-filtering-correlation-id: 543222fd-5086-44e7-eb0f-08d65912f1ed
x-ms-office365-filtering-ht: Tenant
x-microsoft-antispam: BCL:0;PCL:0;RULEID:(2390098)(7020095)(4652040)(8989299)(5600074)(711020)(4618075)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(2017052603328)(7153060)(7193020);SRVR:AM0PR08MB3491;
x-ms-traffictypediagnostic: AM0PR08MB3491:
nodisclaimer: True
x-microsoft-antispam-prvs: <AM0PR08MB3491DFA0ADF01D56BD2900C1E4AE0@AM0PR08MB3491.eurprd08.prod.outlook.com>
x-ms-exchange-senderadcheck: 1
x-exchange-antispam-report-cfa-test: BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(8121501046)(5005006)(3002001)(10201501046)(3231455)(999002)(944501493)(52105112)(93006095)(93001095)(6055026)(148016)(149066)(150057)(6041310)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123560045)(20161123564045)(20161123562045)(20161123558120)(201708071742011)(7699051)(76991095);SRVR:AM0PR08MB3491;BCL:0;PCL:0;RULEID:;SRVR:AM0PR08MB3491;
x-forefront-prvs: 08756AC3C8
x-forefront-antispam-report: SFV:NSPM;SFS:(10009020)(396003)(39860400002)(376002)(136003)(346002)(366004)(199004)(189003)(99286004)(4326008)(71190400001)(97736004)(36756003)(71200400001)(106356001)(6486002)(68736007)(72206003)(256004)(14454004)(66066001)(478600001)(7416002)(5660300001)(81166006)(8936002)(7736002)(25786009)(2201001)(81156014)(305945005)(3846002)(6116002)(26005)(102836004)(316002)(186003)(6436002)(11346002)(486006)(2906002)(2501003)(8676002)(575784001)(2616005)(44832011)(476003)(6512007)(105586002)(217873002)(53936002)(52116002)(446003)(386003)(6506007)(86362001)(110136005)(76176011)(921003)(1121003);DIR:OUT;SFP:1101;SCL:1;SRVR:AM0PR08MB3491;H:AM0PR08MB3891.eurprd08.prod.outlook.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;A:1;MX:1;
x-microsoft-antispam-message-info: Hvn5Hqr6TT7LEk7FuRwIWa716egxwjmkMfsa599T6oNb69vBhhR7BqO4bkI78JlPXb3vSvnpc9fjBu3V2ZdYHbxus7cJ93kmcblptx9BhIuhYvZOB5Pmm/kNwSekereuBLv2Eag+ifdAvEfX2Zzg/qRcQeRE3P+peczjRaceKcXTyG/Fr6bE3Z3mwxwgIBz+7scfwaT5ICMUMqV9uQKa2kSeuSFyiLB0Tk/SzKdWWmrPfjDNOmSnFMxO/9tsNuPWwMQ4zI7XQBN1Th+FZ6dAkZj7Ht4QwqCXGAp9M5Dbz4bT0qLRmLCb2LORYX3M/ySWMqN6Ibb3nIWaTbXaPkb09eG1BFmU5m5z7rtzUzROOHs=
spamdiagnosticoutput: 1:99
spamdiagnosticmetadata: NSPM
Content-Type: text/plain; charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
X-OriginatorOrg: arm.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 543222fd-5086-44e7-eb0f-08d65912f1ed
X-MS-Exchange-CrossTenant-originalarrivaltime: 03 Dec 2018 11:32:02.6060
 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: f34e5979-57d9-4aaa-ad4d-b122a662184d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: AM0PR08MB3491
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The newly supported AFBC YUV formats have the following rotation memory
constraints (in DP550/DP650).
1. DRM_FORMAT_VUY888/DRM_FORMAT_VUY101010 :- It can rotate upto 8
horizontal lines in the AFBC output buffer.
2. DRM_FORMAT_YUV420_8BIT :- It can rotate upto 16 horizontal lines
in the AFBC output buffer.

Also some of the pixel formats are specified in bits per pixel (rather
than bytes per pixel), so the calculation needs to take note of this.

Besides there are some difference between DP550 and DP650 and these are
as follows:-
1. DRM_FORMAT_X0L2 (in uncompressed format) does not support rotation in DP=
550.
For DP650, it can rotate upto 16 horizontal lines in the AFBC output buffer=
,
whereas in DP550 (with AFBC), it can rotate upto 8 horizontal lines.
2. DRM_FORMAT_YUV420_10BIT :- It can rotate upto 8 horizontal lines in
dp550 and 16 horizontal lines in DP650.

Signed-off-by: Ayan Kumar halder <ayan.halder@arm.com>
---
 drivers/gpu/drm/arm/malidp_hw.c     | 101 ++++++++++++++++++++++++++++++++=
----
 drivers/gpu/drm/arm/malidp_hw.h     |   5 +-
 drivers/gpu/drm/arm/malidp_planes.c |   3 +-
 3 files changed, 98 insertions(+), 11 deletions(-)

diff --git a/drivers/gpu/drm/arm/malidp_hw.c b/drivers/gpu/drm/arm/malidp_h=
w.c
index 4a774be..d9866a8 100644
--- a/drivers/gpu/drm/arm/malidp_hw.c
+++ b/drivers/gpu/drm/arm/malidp_hw.c
@@ -375,14 +375,39 @@ static void malidp500_modeset(struct malidp_hw_device=
 *hwdev, struct videomode *
 		malidp_hw_clearbits(hwdev, MALIDP_DISP_FUNC_ILACED, MALIDP_DE_DISPLAY_FU=
NC);
 }
=20
-static int malidp500_rotmem_required(struct malidp_hw_device *hwdev, u16 w=
, u16 h, u32 fmt)
+int malidp_format_get_bpp(u32 fmt)
+{
+	int bpp =3D drm_format_plane_cpp(fmt, 0) * 8;
+
+	if (bpp =3D=3D 0) {
+		switch (fmt) {
+		case DRM_FORMAT_VUY101010:
+			bpp =3D 30;
+		case DRM_FORMAT_YUV420_10BIT:
+			bpp =3D 15;
+			break;
+		case DRM_FORMAT_YUV420_8BIT:
+			bpp =3D 12;
+			break;
+		default:
+			bpp =3D 0;
+		}
+	}
+
+	return bpp;
+}
+
+static int malidp500_rotmem_required(struct malidp_hw_device *hwdev, u16 w=
,
+				     u16 h, u32 fmt, bool has_modifier)
 {
 	/*
 	 * Each layer needs enough rotation memory to fit 8 lines
 	 * worth of pixel data. Required size is then:
 	 *    size =3D rotated_width * (bpp / 8) * 8;
 	 */
-	return w * drm_format_plane_cpp(fmt, 0) * 8;
+	int bpp =3D malidp_format_get_bpp(fmt);
+
+	return w * bpp;
 }
=20
 static void malidp500_se_write_pp_coefftab(struct malidp_hw_device *hwdev,
@@ -660,9 +685,9 @@ static void malidp550_modeset(struct malidp_hw_device *=
hwdev, struct videomode *
 		malidp_hw_clearbits(hwdev, MALIDP_DISP_FUNC_ILACED, MALIDP_DE_DISPLAY_FU=
NC);
 }
=20
-static int malidp550_rotmem_required(struct malidp_hw_device *hwdev, u16 w=
, u16 h, u32 fmt)
+static int malidpx50_get_bytes_per_column(u32 fmt)
 {
-	u32 bytes_per_col;
+	u32 bytes_per_column;
=20
 	switch (fmt) {
 	/* 8 lines at 4 bytes per pixel */
@@ -688,19 +713,77 @@ static int malidp550_rotmem_required(struct malidp_hw=
_device *hwdev, u16 w, u16
 	case DRM_FORMAT_UYVY:
 	case DRM_FORMAT_YUYV:
 	case DRM_FORMAT_X0L0:
-	case DRM_FORMAT_X0L2:
-		bytes_per_col =3D 32;
+		bytes_per_column =3D 32;
 		break;
 	/* 16 lines at 1.5 bytes per pixel */
 	case DRM_FORMAT_NV12:
 	case DRM_FORMAT_YUV420:
-		bytes_per_col =3D 24;
+	/* 8 lines at 3 bytes per pixel */
+	case DRM_FORMAT_VUY888:
+	/* 16 lines at 12 bits per pixel */
+	case DRM_FORMAT_YUV420_8BIT:
+	/* 8 lines at 3 bytes per pixel */
+	case DRM_FORMAT_P010:
+		bytes_per_column =3D 24;
+		break;
+	/* 8 lines at 30 bits per pixel */
+	case DRM_FORMAT_VUY101010:
+	/* 16 lines at 15 bits per pixel */
+	case DRM_FORMAT_YUV420_10BIT:
+		bytes_per_column =3D 30;
 		break;
 	default:
 		return -EINVAL;
 	}
=20
-	return w * bytes_per_col;
+	return bytes_per_column;
+}
+
+static int malidp550_rotmem_required(struct malidp_hw_device *hwdev, u16 w=
,
+				     u16 h, u32 fmt, bool has_modifier)
+{
+	int bytes_per_column =3D 0;
+
+	switch (fmt) {
+	/* 8 lines at 15 bits per pixel */
+	case DRM_FORMAT_YUV420_10BIT:
+		bytes_per_column =3D 15;
+		break;
+	/* Uncompressed YUV 420 10 bit single plane cannot be rotated */
+	case DRM_FORMAT_X0L2:
+		if (has_modifier)
+			bytes_per_column =3D 8;
+		else
+			return -EINVAL;
+		break;
+	default:
+		bytes_per_column =3D malidpx50_get_bytes_per_column(fmt);
+	}
+
+	if (bytes_per_column =3D=3D -EINVAL)
+		return bytes_per_column;
+
+	return w * bytes_per_column;
+}
+
+static int malidp650_rotmem_required(struct malidp_hw_device *hwdev, u16 w=
,
+				     u16 h, u32 fmt, bool has_modifier)
+{
+	int bytes_per_column =3D 0;
+
+	switch (fmt) {
+	/* 16 lines at 2 bytes per pixel */
+	case DRM_FORMAT_X0L2:
+		bytes_per_column =3D 32;
+		break;
+	default:
+		bytes_per_column =3D malidpx50_get_bytes_per_column(fmt);
+	}
+
+	if (bytes_per_column =3D=3D -EINVAL)
+		return bytes_per_column;
+
+	return w * bytes_per_column;
 }
=20
 static int malidp550_se_set_scaling_coeffs(struct malidp_hw_device *hwdev,
@@ -979,7 +1062,7 @@ const struct malidp_hw malidp_device[MALIDP_MAX_DEVICE=
S] =3D {
 		.in_config_mode =3D malidp550_in_config_mode,
 		.set_config_valid =3D malidp550_set_config_valid,
 		.modeset =3D malidp550_modeset,
-		.rotmem_required =3D malidp550_rotmem_required,
+		.rotmem_required =3D malidp650_rotmem_required,
 		.se_set_scaling_coeffs =3D malidp550_se_set_scaling_coeffs,
 		.se_calc_mclk =3D malidp550_se_calc_mclk,
 		.enable_memwrite =3D malidp550_enable_memwrite,
diff --git a/drivers/gpu/drm/arm/malidp_hw.h b/drivers/gpu/drm/arm/malidp_h=
w.h
index 52188f0..e89a06a 100644
--- a/drivers/gpu/drm/arm/malidp_hw.h
+++ b/drivers/gpu/drm/arm/malidp_hw.h
@@ -184,7 +184,8 @@ struct malidp_hw {
 	 * Calculate the required rotation memory given the active area
 	 * and the buffer format.
 	 */
-	int (*rotmem_required)(struct malidp_hw_device *hwdev, u16 w, u16 h, u32 =
fmt);
+	int (*rotmem_required)(struct malidp_hw_device *hwdev, u16 w, u16 h,
+			       u32 fmt, bool has_modifier);
=20
 	int (*se_set_scaling_coeffs)(struct malidp_hw_device *hwdev,
 				     struct malidp_se_config *se_config,
@@ -326,6 +327,8 @@ void malidp_se_irq_fini(struct malidp_hw_device *hwdev)=
;
 u8 malidp_hw_get_format_id(const struct malidp_hw_regmap *map,
 			   u8 layer_id, u32 format, bool has_modifier);
=20
+int malidp_format_get_bpp(u32 fmt);
+
 static inline u8 malidp_hw_get_pitch_align(struct malidp_hw_device *hwdev,=
 bool rotated)
 {
 	/*
diff --git a/drivers/gpu/drm/arm/malidp_planes.c b/drivers/gpu/drm/arm/mali=
dp_planes.c
index 0765cee..d0a00ee 100644
--- a/drivers/gpu/drm/arm/malidp_planes.c
+++ b/drivers/gpu/drm/arm/malidp_planes.c
@@ -595,7 +595,8 @@ static int malidp_de_plane_check(struct drm_plane *plan=
e,
=20
 		val =3D mp->hwdev->hw->rotmem_required(mp->hwdev, state->crtc_w,
 						     state->crtc_h,
-						     fb->format->format);
+						     fb->format->format,
+						     !!(fb->modifier));
 		if (val < 0)
 			return val;
=20
--=20
2.7.4

