Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 03 Dec 2018 20:26:08 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 6B82D580375;
	Mon,  3 Dec 2018 03:35:11 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga001-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 03 Dec 2018 03:35:10 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ApM0uGhWBPKrD0cou/6bmQ/IXp7TV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZxCDvqdThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGoOy?=
 =?us-ascii?q?YZUSAeodM+hWrIf9qFkPrRSiCgejC/jvyidKi3Ltwa06yv4sHR3a0AA8At4Dtm?=
 =?us-ascii?q?nfotXvNKcVVOC41LXFzDXZYPNQxDzz6pLHchQ8rv6SR7J7bM3cxFUvFgzfiFWc?=
 =?us-ascii?q?s47rMCmR1usQrWeb9fFtWvi1i24isQ1+vj+vxsI1h4TPm4kbxFfE9SBjz4Y0I9?=
 =?us-ascii?q?21UEB7YcS6H5ROqi6VKZB2QsA+Q2FvoCY20LoGuYS0fCQSzZQnxgLQa+aAc4iT?=
 =?us-ascii?q?5RLjWvqRLS1ki3JifbKygQu5/0u4yuDkSMW4zFJHojBYntTCqHwBzQHf58ubRv?=
 =?us-ascii?q?dn/0qs2y6D2x7O5uxGO0w4iKXWJ4I7zrItipYesF7PEy/2lUnugq+ZaEYp9vSt?=
 =?us-ascii?q?5uniYbjrop6ROJVxhwz8L6gihsmyDfoiPQUNQ2eW/Pqz2KPt/ULjRrhBk+c4nb?=
 =?us-ascii?q?PDsJ/AIMQWvq65DBFR0oYk8xu/ETim38oCnXUdL1JKZgiHj473NFHKOvz4Cu2/?=
 =?us-ascii?q?g1u0nDdqwfDJIKHhD43TInTflLrtZ6tx5kBCxAYp0NxS5I5YBqsALf/xQkPxsc?=
 =?us-ascii?q?bXDh49Mwy62ebnD9B925saWWKOBK+ZLazTvUaL5u0xOemMYpEauDLkJ/gi6f/u?=
 =?us-ascii?q?i2E2mUUGcKm30psYdmq4Eu5lI0qHe3rshMkOEWMQsgo5Vuzqh0WOUSRPaHaqQ6?=
 =?us-ascii?q?I8+jY7BZqiDYfCRYCinqaN3SimHpBNYmBGC1aMEWrndomeWvcMbj6SLdFlkjAe?=
 =?us-ascii?q?SbehTIoh3wm0tADm07pnMvbU+ioAuJLjztd15vHTmgs19TBuD8SdznuCT2d7nm?=
 =?us-ascii?q?4TQz823aZ/oVFyy1uZ0Kh4heBYGsJX5/9TTgg6MpvcxfRgC9/uQgLBYsuJSFG+?=
 =?us-ascii?q?T9WkBjE+UMg9w9wJY0Z7HdWiiQvO3y6rA78TiryKC4Y48qPa33jtOcl9z2zK27?=
 =?us-ascii?q?Umj1kjWsFPL3GphrZj9wjPAI7Ei1+Wl72qdaQb3y7B7n2DwnCMvExDVA5wUKPF?=
 =?us-ascii?q?XW0QZ0fMrNT54F/CQKGqCbg9LgRBzsuCILNQatL1lVVGWOvjONPGbmKygWiwAw?=
 =?us-ascii?q?yExreNbIXwfWUd0z7QCEwFkwAV4HaHOhIyBiano2LCEjNuEUjjbF/r8el7sHm7?=
 =?us-ascii?q?VFM7zxmWb0190Lq44gMaiuaCS/wNxL4EuD0uqzNvHFmj2dLaDN6ApwlkfKVYet?=
 =?us-ascii?q?495FZH1WTEtw1yJJCgLqZihkIAfARzpU/hyxJ3CoBYm8gwsHwq1BZyKb6f0F5Z?=
 =?us-ascii?q?ajyXx47wNaPNJmny5h+vbbXW1U/Y0NuN/qcP6fI4q0jsvQ2zF0oi9Wln3MdR03?=
 =?us-ascii?q?eG+prKCw8SW4rrUkkr7xh6u63aYi4l6oPI1H1sNK60siPC29MpHucl1gysf9BF?=
 =?us-ascii?q?MKOAFQ/yFcIaCtOqKOwrnVipcx0FMPpT9K4yI8Opaf+G1LS3M+ZnmTKslX5H75?=
 =?us-ascii?q?xl0kKQ6yp8TfbF0IwBw/6G0QqISTf9gE26vcDqhI9LfzcSHmm4ySj6H4NRYqxy?=
 =?us-ascii?q?fYAWCWahOcG3x9N+h4LzVH5c7lKsG1QG2MqxcxqIc1P9xRFQ1VgQoXG/mSq40i?=
 =?us-ascii?q?Z4nC0zoque3CzB2eLidBUcN25PRWlii0rsIIeug9AbWkiocxYmlB+/6UnmwKhb?=
 =?us-ascii?q?obx1L3PPTkdQYyj2M2ZiX7OqtrqDf8FA8okovjhQUOimZ1CVVKT9oxoD3yz/BW?=
 =?us-ascii?q?RewC00eC+wupX+mRx3k2adLHd1rHrEdsB83xbf5NrARfFP2joKXjV3iT7SBlKk?=
 =?us-ascii?q?Jdmm4c2Ul4vfsuC5T2+gVpxTfTPrzI+aryu7+GtqDAa7n/CynN3nDAc73TX619?=
 =?us-ascii?q?lsSSXHshL8bpP32KS9NOJtZlNoC0Pk68pmBoF+lZM9hJMK1ngAhZWV/n0HnX3o?=
 =?us-ascii?q?MdpB2qL+b3sNRTgVzN7T+wXl3ExjLnSUx4P2THmdw81hZ8WkbWMSwC4y88dKCK?=
 =?us-ascii?q?KM5rxegSR1uka4rR7WYfVlnjYS0/wu5GQYg+EIvgog1SGdArEUHUlFMi3gjRWI?=
 =?us-ascii?q?79airKpJYGaja6S/1E17ndq5FrGNvhlcWGrlepclBSJw7d9wMFPW3H3z94HrYt?=
 =?us-ascii?q?/Qbd0Iux2QkhfAifVVKZ0rmvoLgypnJXzyvXk/x+Enihxu2ImwvJKbJGV14KK5?=
 =?us-ascii?q?HhlYOyXwZ8MS+THil7xSn8iI0IC0ApVuBC8LU4D2QvKyHzIfrvDnNweIED0hpX?=
 =?us-ascii?q?aXA7vfHQmD6Eh4q3LDCYykN3aSJHMB19VtWAGdJFBDgAATRDg6gpk5FgWwyM3g?=
 =?us-ascii?q?akh54C0R5kXjqhtN0e9oMxj/UmHCpAancDs0SZ6fLAZI4QFG/UvaLcue7udrFS?=
 =?us-ascii?q?FC4pKhtBCNKnCcZwlQFm4GQEuEB1T+PrW04dnA7vOVBu6/L/vIfLWPpvZSV/aO?=
 =?us-ascii?q?xZKzzIRm+yyAOdmIPnlnF/c7wFZMXWhlG8TFnDUCUy4XmDjIb8GFvxew4DF3ot?=
 =?us-ascii?q?q88PT2WwLv+I2PBKFJMdh0/xC2gKGDN/OfhSpjKDZY0I8MymHMyLQFwFESjCRu?=
 =?us-ascii?q?fSG3EbscrS7NUL7QmqhPAh8bbCNzKdJI778m0QlLI8LbkdT11rh3jvMuD1dFVF?=
 =?us-ascii?q?rhmtymZMAQImG9Mk/HC1iPNLicOTLLxMT3a7umSbJMlOVUqwGwuTGDHk/jIDuD?=
 =?us-ascii?q?ljrpVxOuMe1WjyGbJhteuI6jfRZ3FGjjV8nrahm6MN9xkD03zqc4hnLMNW4ALz?=
 =?us-ascii?q?d8d1lBoaGX7SNdmv9/AXBO7mJ5LemYnCaU9/PXKosNvvtxHCt1l/hW4HA7y7ZO?=
 =?us-ascii?q?6CFERfp1mDbdr9J0olGmlPWPxSRjUBZUtjlLg4eLt114OarF7plARWrE/BUV4G?=
 =?us-ascii?q?WMChQKosFpBcH1t69MytjAiqTzJSxG89LV+8scGsfVJNiGMHonLRrmBjrUABEZ?=
 =?us-ascii?q?Qj6sMGHVn1Zdn+2K9n2Jspg6rYDhmZoURb9dUVw1F/UaBVxkHdwCOph3WDwknK?=
 =?us-ascii?q?WfjM4J43q+sRbQSN9bvpDBSvKdH/HvJCyFgrlDYhtbiY//eK0CP4uz+0VmZlRg?=
 =?us-ascii?q?1NDjCkPWG/BEpiFsdCc9ukAL+397GCl7/0P7ax7lzGIfHOP8yjo3lApjJ8gw+D?=
 =?us-ascii?q?7xy14tIxzBoy5m1AEbg9Tsh3iqbDfrL6qhFdV8ESv9sQ4KLprhQAtkRQSomApv?=
 =?us-ascii?q?MzKSA/obirJkdGxzoAHbooAJEORZC6ZDZVVYkfSeY/QkyXxSrT68g0Zd4K3ODp?=
 =?us-ascii?q?400ENgeJ+2q3NN1ypnbdgoNerRKeABmlFRnKaPsyOA0uE33R9YJktbtCvYdDQJ?=
 =?us-ascii?q?/UAFKLQiDy6p5fB3rwKYljZPdXMPS/0y5PVw+Ql1b+iazmfs3qBOLmi1NveDNO?=
 =?us-ascii?q?WXoWXNmcOTQU83zgUPjUYTufA81cYlblrRVE01yraVPwoGONCEKgxPacdWsn/J?=
 =?us-ascii?q?cmzG5eHMx49leoawDOblSceQu6sOxEGpBgAkG8IL9MtXWtHm1UjILMLqaqQE0R?=
 =?us-ascii?q?w36CzhI1KZCPVPPhmMlX1P98S23J5y0M9HJykUG2lVOyKw+rLWoEkhh//VGJ98?=
 =?us-ascii?q?eXoTWKMcMXUsXNz8gTNf9TwUFzS+1MoBzw+Y6y66vDnWWn20Jd9qbe2IaBUqDN?=
 =?us-ascii?q?iw+jU46bOqoVrW9IjOYWD8Kdlm/NTI7KlS85OOAulIQL87t07amIlfXWe2e2rO?=
 =?us-ascii?q?F8OlYZn2d4QoK9fzDyD+Gha0jCg/QtvZOMmraK6FnUugEY1TqoOWwBgnKsn7ED?=
 =?us-ascii?q?wCTVM47eQI5K98bAdAeJM+egPuuCw9Ora5LQPe1c+hCS75LDBWQvlWx6ahbrlM?=
 =?us-ascii?q?0iwjRuy30n0tStc91ebhtQZHS4sHgRLe7fKiYZROXy/uHHBUZwTIo2w+jWcrfr?=
 =?us-ascii?q?I92OowwxPgtVgaLiCFc/FvZGVYvtY6Q1SILiMyQiA0TkGRiKLP6xCh2rQV8Tcb?=
 =?us-ascii?q?mdtIm6URvHHgs5r3bDuyVamvrpvJ9SwtcY5i6+d4MpTmCs+Hso7O2zLYUZ/cux?=
 =?us-ascii?q?GEVyj8EOBV0JAEKSFARdFMmGc4KYkIvpdH5UMtV8A4YbtVB/9o7vqsaDFjCScJ?=
 =?us-ascii?q?iyEUTZmN9DkDif270LvbjlGbd5FoeEgCsZ5FhtIGFSB7eDkTjKqiXJ/RnG+FUi?=
 =?us-ascii?q?4AJwJFqUwG7RgGmqd5ZObp6szEQdUEnzdMpf5cWzHNGpMu+1atDinchVn+VeXk?=
 =?us-ascii?q?n+ui9Rxdweiq0dQBXhN7T09HyKwewk8pLqxnbqUXtabUvTKSM0D3pmTgzK2hPl?=
 =?us-ascii?q?YHmuPOcFitJZvMsyLcWykQ9GdcEaZewXeZNZ0WnwdjQK8xoRNHJ4XwKRW23CAt?=
 =?us-ascii?q?24k8R+rwbsus3Vtw6C9eHyo=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ATAACMEwVch0O0hNFiHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGBMFBpcwQLFRIKhzYDhE6LQIJXFJc0gSQDRRoBGA0GAYN6hAkiNAkNAQM?=
 =?us-ascii?q?BAQEBAQECARMBAQEKCwkIKSMMgjYkAYJiAwMBAj0BAREmAQUJAQEBAR0xAyUKJ?=
 =?us-ascii?q?QIEAQ0FBYMcAYFpAxUBAgEBCpluAooHgh+CdgEBBYEEAQEqAQMDDUCCdBiCCQM?=
 =?us-ascii?q?FjByBVz+BEYJkg0wDAoEnhhKJHgIPAygJhhKFcIoIVQcCgiOEXYMygmyEIBaBW?=
 =?us-ascii?q?4URijqJBIRlil0CBAIEBQINAQEFgUaBeQwIMxojXQyCU4IbCRqDSoUUhQgBNnI?=
 =?us-ascii?q?BgQQBASGHfoEuAYEeAQE?=
X-IPAS-Result: =?us-ascii?q?A0ATAACMEwVch0O0hNFiHQEBBQEHBQGBUQgBCwGBMFBpcwQ?=
 =?us-ascii?q?LFRIKhzYDhE6LQIJXFJc0gSQDRRoBGA0GAYN6hAkiNAkNAQMBAQEBAQECARMBA?=
 =?us-ascii?q?QEKCwkIKSMMgjYkAYJiAwMBAj0BAREmAQUJAQEBAR0xAyUKJQIEAQ0FBYMcAYF?=
 =?us-ascii?q?pAxUBAgEBCpluAooHgh+CdgEBBYEEAQEqAQMDDUCCdBiCCQMFjByBVz+BEYJkg?=
 =?us-ascii?q?0wDAoEnhhKJHgIPAygJhhKFcIoIVQcCgiOEXYMygmyEIBaBW4URijqJBIRlil0?=
 =?us-ascii?q?CBAIEBQINAQEFgUaBeQwIMxojXQyCU4IbCRqDSoUUhQgBNnIBgQQBASGHfoEuA?=
 =?us-ascii?q?YEeAQE?=
X-IronPort-AV: E=Sophos;i="5.56,310,1539673200"; 
   d="scan'208";a="65023100"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 03 Dec 2018 03:35:08 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726420AbeLCLcq (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 3 Dec 2018 06:32:46 -0500
Received: from mail-eopbgr20052.outbound.protection.outlook.com ([40.107.2.52]:21376
        "EHLO EUR02-VE1-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726328AbeLCLcp (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 3 Dec 2018 06:32:45 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=armh.onmicrosoft.com;
 s=selector1-arm-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=dH0HviKmC/Vu8HUFZckW3p6Xx9+TL8TchyZ+aFdpbQ8=;
 b=nzY4qQdQVef7LBkxB4s3pOWdtle+BaRQtRBMZctFPAVw84itNWhwhRDnrGSvnohEdQdexsHHlRbrEkdP9Os09e0PkJ7u2yIyT01PJNNNIbpv3HE1y7x37EX4xJ3gsyvpHWs5HkLKFZO11bATYf9aY8C7+CgT9sOH4oSOJrEd4Zk=
Received: from AM0PR08MB3891.eurprd08.prod.outlook.com (20.178.82.147) by
 AM0PR08MB3491.eurprd08.prod.outlook.com (20.177.108.222) with Microsoft SMTP
 Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1382.18; Mon, 3 Dec 2018 11:31:55 +0000
Received: from AM0PR08MB3891.eurprd08.prod.outlook.com
 ([fe80::896a:710:2a8c:e2fa]) by AM0PR08MB3891.eurprd08.prod.outlook.com
 ([fe80::896a:710:2a8c:e2fa%6]) with mapi id 15.20.1382.020; Mon, 3 Dec 2018
 11:31:55 +0000
From: Ayan Halder <Ayan.Halder@arm.com>
To: Ayan Halder <Ayan.Halder@arm.com>,
        Liviu Dudau <Liviu.Dudau@arm.com>,
        Brian Starkey <Brian.Starkey@arm.com>,
        "malidp@foss.arm.com" <malidp@foss.arm.com>,
        "airlied@linux.ie" <airlied@linux.ie>,
        "dri-devel@lists.freedesktop.org" <dri-devel@lists.freedesktop.org>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        "maxime.ripard@bootlin.com" <maxime.ripard@bootlin.com>,
        "sean@poorly.run" <sean@poorly.run>,
        "maarten.lankhorst@linux.intel.com" 
        <maarten.lankhorst@linux.intel.com>,
        "corbet@lwn.net" <corbet@lwn.net>,
        "mchehab+samsung@kernel.org" <mchehab+samsung@kernel.org>,
        "gregkh@linuxfoundation.org" <gregkh@linuxfoundation.org>,
        "davem@davemloft.net" <davem@davemloft.net>,
        "akpm@linux-foundation.org" <akpm@linux-foundation.org>,
        "nicolas.ferre@microchip.com" <nicolas.ferre@microchip.com>,
        "arnd@arndb.de" <arnd@arndb.de>,
        "linux-doc@vger.kernel.org" <linux-doc@vger.kernel.org>
CC: nd <nd@arm.com>
Subject: [RFC AFBC 01/12] drm/fourcc: Add AFBC yuv fourccs for Mali
Thread-Topic: [RFC AFBC 01/12] drm/fourcc: Add AFBC yuv fourccs for Mali
Thread-Index: AQHUivvLhdpemUHBzUiBjUfFvAvaaA==
Date: Mon, 3 Dec 2018 11:31:55 +0000
Message-ID: <1543836703-8491-2-git-send-email-ayan.halder@arm.com>
References: <1543836703-8491-1-git-send-email-ayan.halder@arm.com>
In-Reply-To: <1543836703-8491-1-git-send-email-ayan.halder@arm.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-clientproxiedby: LO2P265CA0279.GBRP265.PROD.OUTLOOK.COM
 (2603:10a6:600:a1::27) To AM0PR08MB3891.eurprd08.prod.outlook.com
 (2603:10a6:208:109::19)
authentication-results: spf=none (sender IP is )
 smtp.mailfrom=Ayan.Halder@arm.com; 
x-ms-exchange-messagesentrepresentingtype: 1
x-originating-ip: [217.140.106.55]
x-ms-publictraffictype: Email
x-microsoft-exchange-diagnostics: 1;AM0PR08MB3491;6:im3xltO+QvRTRNm9ZEDbV7hOO9j+jn7gVfJBN6bBYxkIIfHQCUHWt5m2GcHq6EqnvQUKpQPiCQfppY3nJi9q9rMhfKM0jlPQKTWaWnl6AnQoSA37wGf59iCojEiSDy7MnaKIsFKnbduXQPk2y7k3eLLetCTgrypPB/IjbNCEOkG3wXl876kB2Qt9HW37DfV0WynpK50iF2x0vYIha7MN/oMmpzv9CMA76VDMGDRsBbd4S68b+Qo8BbJenR+6bBqaxYneRqSrTsaonuMSAQ+1Ru7NYb6yVCPl6KnREYLoQU8ulclLcrfIG7wTpYKS2pIMqi1IJ6yE+LWQHrToCIo3VyIwKt7mS9agsyEM3F11nI8JOAsyOojc8awSfPUMtYcajjSyPCORlUnS00q/NzX2I91vHwGMtXTDuW6qnYfpmQuDaWnvNkIh5CD0cBlhfsLSQntxuh3RdoJZ47C/dS24dg==;5:ty1jcSNhQGBZARw+V4YRIEWaOtgeudYpZByFXk/FGbd3ewmuHPaw7u2Mh8MKowJhktmJ5mmCwg/P5n9/4ivMtfG21PdwmIXpgLOxmHi/hSeatnsv2K35ArsBUDJJoY976aUZALTXIigDbICHb2Z0Wgg5YzwJONs/Q9oVT11Z5QE=;7:K8GmGXUoW0ZD8AVYuq2cPitfYZpGjCJ+lPog2vFPWVKhQnoXePRQ1iLSPyBjyM4jVpVrC53kggqDx3YwzhUHwmg+Pq9w607LNdR88arb3mOCCM6xsntkFHpEIM0MYR+2gVMU3XwsB6zUU1G8pnyaZA==
x-ms-office365-filtering-correlation-id: 16f270d2-6ee7-4667-0d5f-08d65912eda2
x-ms-office365-filtering-ht: Tenant
x-microsoft-antispam: BCL:0;PCL:0;RULEID:(2390098)(7020095)(4652040)(8989299)(5600074)(711020)(4618075)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(2017052603328)(7153060)(7193020);SRVR:AM0PR08MB3491;
x-ms-traffictypediagnostic: AM0PR08MB3491:
nodisclaimer: True
x-microsoft-antispam-prvs: <AM0PR08MB34914A9F7A0893B7361F5203E4AE0@AM0PR08MB3491.eurprd08.prod.outlook.com>
x-ms-exchange-senderadcheck: 1
x-exchange-antispam-report-cfa-test: BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(8121501046)(5005006)(3002001)(10201501046)(3231455)(999002)(944501493)(52105112)(93006095)(93001095)(6055026)(148016)(149066)(150057)(6041310)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123560045)(20161123564045)(20161123562045)(20161123558120)(201708071742011)(7699051)(76991095);SRVR:AM0PR08MB3491;BCL:0;PCL:0;RULEID:;SRVR:AM0PR08MB3491;
x-forefront-prvs: 08756AC3C8
x-forefront-antispam-report: SFV:NSPM;SFS:(10009020)(396003)(39860400002)(376002)(136003)(346002)(366004)(199004)(189003)(99286004)(4326008)(71190400001)(97736004)(36756003)(4744004)(71200400001)(106356001)(6486002)(68736007)(72206003)(256004)(14454004)(66066001)(478600001)(7416002)(5660300001)(81166006)(8936002)(7736002)(25786009)(2201001)(81156014)(305945005)(3846002)(6116002)(26005)(102836004)(316002)(186003)(6436002)(11346002)(486006)(2906002)(2501003)(8676002)(14444005)(575784001)(966005)(2616005)(44832011)(476003)(6512007)(6306002)(105586002)(217873002)(53936002)(52116002)(446003)(386003)(6506007)(86362001)(110136005)(76176011)(21314003)(921003)(1121003);DIR:OUT;SFP:1101;SCL:1;SRVR:AM0PR08MB3491;H:AM0PR08MB3891.eurprd08.prod.outlook.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;A:1;MX:1;
x-microsoft-antispam-message-info: SI4qtplACuW/IXS/dGthB0E+90Lw8xp1V9HYPbRqXIDbDqN8MCNN4Ou8rzAkmVLbCNdEhfYNZaOSBW4xVoBOln4R0I9DF3E3ge0f927oA4nK/8HBLfU6g5Nv72MPLTF9wdIsMOj4nqqowwySxzqCpd2IEbRQlE4dO1P2jHatTWkBZho0iudSusIc1c5HLc4DxgEymE1pQRgLGKHgAIhC0fZr28xs5hPWatm33b7keLMtHlLeFQtbdg25A65ZN+AbCPusEsH1WanV5fUCOwFiuqrOSE0si90U/ayl+vf2gEcKWUqU3gCh5QyjLISyHjcdg0f2rfiFcV/IuIQx4g51lm5ebSh3IqHjK/G8EIZuCoI=
spamdiagnosticoutput: 1:99
spamdiagnosticmetadata: NSPM
Content-Type: text/plain; charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
X-OriginatorOrg: arm.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 16f270d2-6ee7-4667-0d5f-08d65912eda2
X-MS-Exchange-CrossTenant-originalarrivaltime: 03 Dec 2018 11:31:55.3809
 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: f34e5979-57d9-4aaa-ad4d-b122a662184d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: AM0PR08MB3491
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From: Brian Starkey <brian.starkey@arm.com>

As we look to enable AFBC using DRM format modifiers, we run into
problems which we've historically handled via vendor-private details
(i.e. gralloc, on Android).

AFBC (as an encoding) is fully flexible, and for example YUV data can
be encoded into 1, 2 or 3 encoded "planes", much like the linear
equivalents. Component order is also meaningful, as AFBC doesn't
necessarily care about what each "channel" of the data it encodes
contains. Therefore ABGR8888 and RGBA8888 can be encoded in AFBC with
different representations. Similarly, 'X' components may be encoded
into AFBC streams in cases where a decoder expects to decode a 4th
component.

In addition, AFBC is a licensable IP, meaning that to support the
ecosystem we need to ensure that _all_ AFBC users are able to describe
the encodings that they need. This is much better achieved by
preserving meaning in the fourcc codes when they are combined with an
AFBC modifier.

In essence, we want to use the modifier to describe the parameters of
the AFBC encode/decode, and use the fourcc code to describe the data
being encoded/decoded.

To do anything different would be to introduce redundancy - we would
need to duplicate in the modifier information which is _already_
conveyed clearly and non-ambigiously by a fourcc code.

I hope that for RGB this is non-controversial.
(BGRA8888 + MODIFIER_AFBC) is a different format from
(RGBA8888 + MODIFIER_AFBC).

Possibly more controversial is that (XBGR8888 + MODIFIER_AFBC)
is different from (BGR888 + MODIFIER_AFBC). I understand that in some
schemes it is not the case - but in AFBC it is so.

Where we run into problems is where there are not already fourcc codes
which represent the data which the AFBC encoder/decoder is processing.
To that end, we want to introduce new fourcc codes to describe the
data being encoded/decoded, in the places where none of the existing
fourcc codes are applicable.

Where we don't support an equivalent non-compressed layout, or where
no "obvious" linear layout exists, we are proposing adding fourcc
codes which have no associated linear layout - because any layout we
proposed would be completely arbitrary.

Some formats are following the naming conventions from [2].

The summary of the new formats is:
 DRM_FORMAT_VUY888 - Packed 8-bit YUV 444. Y followed by U then V.
 DRM_FORMAT_VUY101010 - Packed 10-bit YUV 444. Y followed by U then
                        V. No defined linear encoding.
 DRM_FORMAT_Y210 - Packed 10-bit YUV 422. Y followed by U (then Y)
                   then V. 10-bit samples in 16-bit words.
 DRM_FORMAT_Y410 - Packed 10-bit YUV 444, with 2-bit alpha.
 DRM_FORMAT_P210 - Semi-planar 10-bit YUV 422. Y plane, followed by
                   interleaved U-then-V plane. 10-bit samples in
                   16-bit words.
 DRM_FORMAT_YUV420_8BIT - Packed 8-bit YUV 420. Y followed by U then
                          V. No defined linear encoding
 DRM_FORMAT_YUV420_10BIT - Packed 10-bit YUV 420. Y followed by U
                           then V. No defined linear encoding

Please also note that in the absence of AFBC, we would still need to
add Y410, Y210 and P210.

Full rationale follows:

YUV 444 8-bit, 1-plane
----------------------
 The currently defined AYUV format encodes a 4th alpha component,
 which makes it unsuitable for representing a 3-component YUV 444
 AFBC stream.

 The proposed[1] XYUV format which is supported by Mali-DP in linear
 layout is also unsuitable, because the component order is the
 opposite of the AFBC version, and it encodes a 4th 'X' component.

 DRM_FORMAT_VUY888 is the "obvious" format for a 3-component, packed,
 YUV 444 8-bit format, with the component order which our HW expects to
 encode/decode. It conforms to the same naming convention as the
 existing packed YUV 444 format.
 The naming here is meant to be consistent with DRM_FORMAT_AYUV and
 DRM_FORMAT_XYUV[1]

YUV 444 10-bit, 1-plane
-----------------------
 There is no currently-defined YUV 444 10-bit format in
 drm_fourcc.h, irrespective of number of planes.

 The proposed[1] XVYU2101010 format which is supported by Mali-DP in
 linear layout uses the wrong component order, and also encodes a 4th
 'X' component, which doesn't match the AFBC version of YUV 444
 10-bit which we support.

 DRM_FORMAT_Y410 is the same layout as XVYU2101010, but with 2 bits of
 alpha.  This format is supported with linear layout by Mali GPUs. The
 naming follows[2].

 There is no "obvious" linear encoding for a 3-component 10:10:10
 packed format, and so DRM_FORMAT_VUY101010 defines a component
 order, but not a bit encoding. Again, the naming is meant to be
 consistent with DRM_FORMAT_AYUV.

YUV 422 8-bit, 1-plane
----------------------
 The existing DRM_FORMAT_YUYV (and the other component orders) are
 single-planar YUV 422 8-bit formats. Following the convention of
 the component orders of the RGB formats, YUYV has the correct
 component order for our AFBC encoding (Y followed by U followed by
 V). We can use YUYV for AFBC YUV 422 8-bit.

YUV 422 10-bit, 1-plane
-----------------------
 There is no currently-defined YUV 422 10-bit format in drm_fourcc.h

 DRM_FORMAT_Y210 is analogous to YUYV, but with 10-bits per sample
 packed into the upper 10-bits of 16-bit samples. This format is
 supported in both linear and AFBC by Mali GPUs.

YUV 422 10-bit, 2-plane
-----------------------
 The recently defined DRM_FORMAT_P010 format is a 10-bit semi-planar
 YUV 420 format, which has the correct component ordering for an AFBC
 2-plane YUV 420 buffer. The linear layout contains meaningless padding
 bits, which will not be encoded in an AFBC stream.

YUV 420 8-bit, 1-plane
----------------------
 There is no currently defined single-planar YUV 420, 8-bit format
 in drm_fourcc.h. There's differing opinions on whether using the
 existing fourcc-implied n_planes where possible is a good idea or
 not when using modifiers.

 For me, it's much more "obvious" to use NV12 for 2-plane AFBC and
 YUV420 for 3-plane AFBC. This keeps the aforementioned separation
 between the AFBC codec settings (in the modifier) and the pixel data
 format (in the fourcc). With different vendors using AFBC, this helps
 to ensure that there is no confusion in interoperation. It also
 ensures that the AFBC modifiers describe AFBC itself (which is a
 licensable component), and not implementation details which are not
 defined by AFBC.

 The proposed[1] X0L0 format which Mali-DP supports with Linear layout
 is unsuitable, as it contains a 4th 'X' component, and our AFBC
 decoder expects only 3 components.

 To that end, we propose a new YUV 420 8-bit format. There is no
 "obvious" linear encoding for a 3-component 8:8:8, 420, packed format,
 and so DRM_FORMAT_YUV420_8BIT defines a component order, but not a
 bit encoding. I'm happy to hear different naming suggestions.

YUV 420 8-bit, 2-, 3-plane
--------------------------
 These already exist, we can use NV12 and YUV420.

YUV 420 10-bit, 1-plane
-----------------------
 As above, no current definition exists, and X0L2 encodes a 4th 'X'
 channel.

 Analogous to DRM_FORMAT_YUV420_8BIT, we define DRM_FORMAT_YUV420_10BIT.

[1] https://lists.freedesktop.org/archives/dri-devel/2018-July/184598.html
[2] https://docs.microsoft.com/en-us/windows/desktop/medfound/10-bit-and-16=
-bit-yuv-video-formats

Changes since RFC v1:
 - Fix confusing subsampling vs bit-depth X:X:X notation in
   descriptions (danvet)
 - Rename DRM_FORMAT_AVYU1101010 to DRM_FORMAT_Y410 (Lisa Wu)
 - Add drm_format_info structures for the new formats, using the
   new 'bpp' field for those with non-integer bytes-per-pixel
 - Rebase, including Juha-Pekka Heikkila's format definitions

Signed-off-by: Brian Starkey <brian.starkey@arm.com>
Reviewed-by: Liviu Dudau <liviu.dudau@arm.com>
---
 drivers/gpu/drm/drm_fourcc.c  | 10 ++++++++++
 include/uapi/drm/drm_fourcc.h | 16 +++++++++++++++-
 2 files changed, 25 insertions(+), 1 deletion(-)

diff --git a/drivers/gpu/drm/drm_fourcc.c b/drivers/gpu/drm/drm_fourcc.c
index d45a3a4..6b7a62e 100644
--- a/drivers/gpu/drm/drm_fourcc.c
+++ b/drivers/gpu/drm/drm_fourcc.c
@@ -225,10 +225,14 @@ const struct drm_format_info *__drm_format_info(u32 f=
ormat)
 		{ .format =3D DRM_FORMAT_UYVY,		.depth =3D 0,  .num_planes =3D 1, .cpp =
=3D { 2, 0, 0 }, .hsub =3D 2, .vsub =3D 1, .is_yuv =3D true },
 		{ .format =3D DRM_FORMAT_VYUY,		.depth =3D 0,  .num_planes =3D 1, .cpp =
=3D { 2, 0, 0 }, .hsub =3D 2, .vsub =3D 1, .is_yuv =3D true },
 		{ .format =3D DRM_FORMAT_XYUV8888,	.depth =3D 0,  .num_planes =3D 1, .cp=
p =3D { 4, 0, 0 }, .hsub =3D 1, .vsub =3D 1, .is_yuv =3D true },
+		{ .format =3D DRM_FORMAT_Y210,		.depth =3D 0,  .num_planes =3D 1, .cpp =
=3D { 4, 0, 0 }, .hsub =3D 2, .vsub =3D 1, .is_yuv =3D true },
+		{ .format =3D DRM_FORMAT_VUY888,          .depth =3D 0,  .num_planes =3D=
 1, .cpp =3D { 3, 0, 0 }, .hsub =3D 1, .vsub =3D 1, .is_yuv =3D true },
+		{ .format =3D DRM_FORMAT_Y410,            .depth =3D 0,  .num_planes =3D=
 1, .cpp =3D { 4, 0, 0 }, .hsub =3D 1, .vsub =3D 1, .has_alpha =3D true, .i=
s_yuv =3D true },
 		{ .format =3D DRM_FORMAT_AYUV,		.depth =3D 0,  .num_planes =3D 1, .cpp =
=3D { 4, 0, 0 }, .hsub =3D 1, .vsub =3D 1, .has_alpha =3D true, .is_yuv =3D=
 true },
 		{ .format =3D DRM_FORMAT_P010,		.depth =3D 0,  .num_planes =3D 2, .cpp =
=3D { 2, 4, 0 }, .hsub =3D 2, .vsub =3D 2, .is_yuv =3D true  },
 		{ .format =3D DRM_FORMAT_P012,		.depth =3D 0,  .num_planes =3D 2, .cpp =
=3D { 2, 4, 0 }, .hsub =3D 2, .vsub =3D 2, .is_yuv =3D true  },
 		{ .format =3D DRM_FORMAT_P016,		.depth =3D 0,  .num_planes =3D 2, .cpp =
=3D { 2, 4, 0 }, .hsub =3D 2, .vsub =3D 2, .is_yuv =3D true  },
+		{ .format =3D DRM_FORMAT_P210,		.depth =3D 0,  .num_planes =3D 2, .cpp =
=3D { 2, 4, 0 }, .hsub =3D 2, .vsub =3D 1, .is_yuv =3D true  },
 		{ .format =3D DRM_FORMAT_Y0L0,		.depth =3D 0,  .num_planes =3D 1,
 		  .char_per_block =3D { 8, 0, 0 }, .block_w =3D { 2, 0, 0 }, .block_h =
=3D { 2, 0, 0 },
 		  .hsub =3D 2, .vsub =3D 2, .has_alpha =3D true, .is_yuv =3D true },
@@ -241,6 +245,12 @@ const struct drm_format_info *__drm_format_info(u32 fo=
rmat)
 		{ .format =3D DRM_FORMAT_X0L2,		.depth =3D 0,  .num_planes =3D 1,
 		  .char_per_block =3D { 8, 0, 0 }, .block_w =3D { 2, 0, 0 }, .block_h =
=3D { 2, 0, 0 },
 		  .hsub =3D 2, .vsub =3D 2, .is_yuv =3D true },
+		{ .format =3D DRM_FORMAT_VUY101010,	.depth =3D 0,  .num_planes =3D 1,
+		  .cpp =3D { 0, 0, 0 }, .hsub =3D 1, .vsub =3D 1, .is_yuv =3D true },
+		{ .format =3D DRM_FORMAT_YUV420_8BIT,     .depth =3D 0,  .num_planes =3D=
 1,
+		  .cpp =3D { 0, 0, 0 }, .hsub =3D 2, .vsub =3D 2, .is_yuv =3D true },
+		{ .format =3D DRM_FORMAT_YUV420_10BIT,    .depth =3D 0,  .num_planes =3D=
 1,
+		  .cpp =3D { 0, 0, 0 }, .hsub =3D 2, .vsub =3D 2, .is_yuv =3D true },
 	};
=20
 	unsigned int i;
diff --git a/include/uapi/drm/drm_fourcc.h b/include/uapi/drm/drm_fourcc.h
index c6e4598..71b2bc7 100644
--- a/include/uapi/drm/drm_fourcc.h
+++ b/include/uapi/drm/drm_fourcc.h
@@ -149,9 +149,13 @@ extern "C" {
 #define DRM_FORMAT_YVYU		fourcc_code('Y', 'V', 'Y', 'U') /* [31:0] Cb0:Y1:=
Cr0:Y0 8:8:8:8 little endian */
 #define DRM_FORMAT_UYVY		fourcc_code('U', 'Y', 'V', 'Y') /* [31:0] Y1:Cr0:=
Y0:Cb0 8:8:8:8 little endian */
 #define DRM_FORMAT_VYUY		fourcc_code('V', 'Y', 'U', 'Y') /* [31:0] Y1:Cb0:=
Y0:Cr0 8:8:8:8 little endian */
+#define DRM_FORMAT_Y210		fourcc_code('Y', '2', '1', '0') /* [63:0] Cr0:0:Y=
1:0:Cb0:0:Y0:0 10:6:10:6:10:6:10:6 little endian */
=20
 #define DRM_FORMAT_AYUV		fourcc_code('A', 'Y', 'U', 'V') /* [31:0] A:Y:Cb:=
Cr 8:8:8:8 little endian */
-#define DRM_FORMAT_XYUV8888		fourcc_code('X', 'Y', 'U', 'V') /* [31:0] X:Y=
:Cb:Cr 8:8:8:8 little endian */
+#define DRM_FORMAT_XYUV8888	fourcc_code('X', 'Y', 'U', 'V') /* [31:0] X:Y:=
Cb:Cr 8:8:8:8 little endian */
+#define DRM_FORMAT_VUY888	fourcc_code('V', 'U', '2', '4') /* [23:0] Cr:Cb:=
Y 8:8:8 little endian */
+#define DRM_FORMAT_Y410		fourcc_code('Y', '4', '1', '0') /* [31:0] A:Cr:Y:=
Cb 2:10:10:10 little endian */
+#define DRM_FORMAT_VUY101010	fourcc_code('V', 'U', '3', '0') /* Y followed=
 by U then V, 10:10:10. Non-linear modifier only */
=20
 /*
  * packed YCbCr420 2x2 tiled formats
@@ -168,6 +172,15 @@ extern "C" {
 #define DRM_FORMAT_X0L2		fourcc_code('X', '0', 'L', '2')
=20
 /*
+ * 1-plane YUV 4:2:0
+ * In these formats, the component ordering is specified (Y, followed by U
+ * then V), but the exact Linear layout is undefined.
+ * These formats can only be used with a non-Linear modifier.
+ */
+#define DRM_FORMAT_YUV420_8BIT	fourcc_code('Y', 'U', '0', '8')
+#define DRM_FORMAT_YUV420_10BIT	fourcc_code('Y', 'U', '1', '0')
+
+/*
  * 2 plane RGB + A
  * index 0 =3D RGB plane, same format as the corresponding non _A8 format =
has
  * index 1 =3D A plane, [7:0] A
@@ -201,6 +214,7 @@ extern "C" {
  * component xxx msb Y [xxx:16-xxx]
  * index 1 =3D Cr:Cb plane, [31:0] Cr:Cb little endian [xxx:16-xxx:xxx:16-=
xxx]
  */
+#define DRM_FORMAT_P210		fourcc_code('P', '2', '1', '0') /* 2x1 subsampled=
 Cr:Cb plane, 10 bit per channel */
 #define DRM_FORMAT_P010		fourcc_code('P', '0', '1', '0') /* 2x2 subsampled=
 Cr:Cb plane, 10 bit per channel */
 #define DRM_FORMAT_P012		fourcc_code('P', '0', '1', '2') /* 2x2 subsampled=
 Cr:Cb plane, 12 bit per channel */
 #define DRM_FORMAT_P016		fourcc_code('P', '0', '1', '6') /* 2x2 subsampled=
 Cr:Cb plane, 16 bit per channel */
--=20
2.7.4

