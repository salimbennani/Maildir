Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 04 Dec 2018 08:58:07 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id A527558014B;
	Mon,  3 Dec 2018 13:12:49 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by fmsmga006-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 03 Dec 2018 13:12:49 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3APskpMBdtnKpm0Xel9NjIlGdFlGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc+7ZhGN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRODYOy?=
 =?us-ascii?q?bYQBD+QPM+VFoYfju1QAogC+BRGuCe701j9In2X70bEm3+g9EwzL2hErEdIUsH?=
 =?us-ascii?q?TTqdX4LLsfUfqow6LV0DjDbu1Z2Sz96IfWbxAhv++DXbZtesfW00YvDR7Kgk+L?=
 =?us-ascii?q?pozkITyVzeQNvHaG7+p+S+2vj3UqqwVwojip3MgskI7JipgSylDe+iV02YA4Ls?=
 =?us-ascii?q?C2Rk58ZN6rCppQtyeCOot1XMwiWWdotzg+yrEcvp67ZicKxZI6zBDcc/yKa5aE?=
 =?us-ascii?q?7g7nWeqLPDt1imxpdKiiixux7USs0OzxW8us3FpUsiZIlsPAu3MN2hDJ98SKS/?=
 =?us-ascii?q?pw8l281TuL1g3e7PxPL1oumqrBMZEhx6Y9lpoNvkTHGS/7gFv2jKCIeUU+4OSo?=
 =?us-ascii?q?6ProYq/gppCCM494kAb+Mr4hmsCnAOQ4NBYBX3SD9OiiyLHu+Vf1TKhEg/EoiK?=
 =?us-ascii?q?XVrZPXKdgBqqO4AQJZyoMj5Ay+Dzei3tQYh34HLFdddRKDjojpPUzOIf/hAfe8?=
 =?us-ascii?q?nVusijFryO7CPrH4BZXMIH7Dn6n7fbtm9U5cxxQ8zcpF65JXFL4BOvTzVVH1tN?=
 =?us-ascii?q?DCCR85KQO0z/79CNphzoMeRX6PAqiBPaPWsF+I5fwgL/ODZY8Iozv9L/kl5/jz?=
 =?us-ascii?q?jX42g1MdfK+p3YcJZ3C8BPhpP0KZYX/0iNcbDWgKphY+TPDtiFCaUT5cfXeyX7?=
 =?us-ascii?q?4m6TE8Eo6mDZrDSZqrgLyOxyq7GpxWZmZbClGDC3vodoOEW+sSZyKWOMNujjsE?=
 =?us-ascii?q?Vb25QY87yR6urBP6y6ZgLufM+C0Ysozs2MJ25+3UkxEy8zt0At+Z02GMSWF0g2?=
 =?us-ascii?q?wJSyU33KB5vUxy1FOD3bJkjPxfENxZ/+lJXRsiNZ7A0+x6DMj/VRjafteJT1am?=
 =?us-ascii?q?Qc+qASsrQdIz2NIOZ0d9G9O/jhHMxSaqArkVl6CVC5ww6K7Tw3/xJ8NlwXbcyK?=
 =?us-ascii?q?Yhl0UmQtdINWC+ha5w7Q7TC5TNk0WYjamqc6sc0TXJ9GeCy2qOoU5ZXBRxUaXD?=
 =?us-ascii?q?QXAQeE/Woc7l6UPFSr+kEa4nPRdZyc6eNqtKbcXkgkhcS/f9JtvSeWKxlH22BR?=
 =?us-ascii?q?aT2LyMao3me2Ee3CXYDEgJiAQT/XeANQgjCSatuWPeDDpyFV3xZ0Pg6/VxqHS+?=
 =?us-ascii?q?TkUs1QGFc1Vh16ap+h4SnfGTVukc3qwatys7qzV7BlC938nIBNqGvAdheKRcYd?=
 =?us-ascii?q?Ug4FZIz27Ztgp9PoC+IKBmnFIRbwN3v0b23RVtFopAidQqrG8tzAdqNaKY0VZB?=
 =?us-ascii?q?dzSE3ZDwOrzbMHXy8Aqoa67M3lHe0dCW+qgU5fQ8qlXjuhypF0U4/3Vm1dlVz2?=
 =?us-ascii?q?WT5pHQAAUOVpLxV1499wJmqLHCfik9+4TU2GV2PqmwrDDD1MwmBes/xhm7YtdQ?=
 =?us-ascii?q?LbmLFAnxE80dGcijM+gqm1mvbhIZM+Fe7q80P8W6d/SY3K6nJvpvnDWjjW5f+o?=
 =?us-ascii?q?ByzlqM9zZgSu7Px5sEw+yY0hGbWDvmjVahstr4mYZLZTwJGmq/yC7kBJNeZ6Fo?=
 =?us-ascii?q?fIYLD3uuLNOzxtlkm5HtXHtY/ka5B1wawM+pZQaSb1vl0A1K1EQYvWaomTGlwD?=
 =?us-ascii?q?xziT0pqLSQ3DbPw+j7aBUIIGpLS3R8glf2Joi0icsXXEypbwgviRuk6lz2x6ld?=
 =?us-ascii?q?pKRjMWbTRV1EcDTxL2FnSqGwrKaNY9ZT6JM0tiVaSOS9YVGARr/9uRcayD7jH2?=
 =?us-ascii?q?1FyTA/djGqvIj5nhNghGKcKnZzsGTWecVqyRjD49zcQOZb3iAaSylglTnXGl+8?=
 =?us-ascii?q?MsGr/dqOjZfDseO+V2W7Wp1IaybrzoCAtCq95WJ0Bx2yhPSzmtzhEQgn3i73zd?=
 =?us-ascii?q?hqVSPUrBniZonnzbi1MeVifkNwHl/z99J6Gp1ikos3nJwR2WIVhpKP8XoFkGfz?=
 =?us-ascii?q?N85W2ab/bHoLWD4KzMTZ4Anj2E1/MH2Jw5j1WWmawstkf9O6eH8Z2joh78BWD6?=
 =?us-ascii?q?eZ9L9EkjF0olairQLRfOJynjESyfY17H4agucJuBcizymHA7ASG1VYMjLolxiS?=
 =?us-ascii?q?89++q6BXbn61cbeszEp+gcyhDLaarwFZWXb5eY0tETV+78phK1LMzGP86pv/d9?=
 =?us-ascii?q?bOd9ITuQaZkxPBj+hTNZIwmeAGhSthOWLho3Ilz/Q3ggBp3ZG/pIKHMXli/Lql?=
 =?us-ascii?q?Ah5EMT34f98T+jbojapEn8eZxYavHoh6GjUQXZvlVvaoEDMUtfT6OAeCCjw8qn?=
 =?us-ascii?q?GHGbXBGQ+T8ltpr3XKE5qzLXGYOGEZzcl+RBmaPEFQmxobXDI+np4kDAyqwNHh?=
 =?us-ascii?q?fVx95jAQ4F74txRNxvhpNxn5TmfQugOoZi0oR5iYKRpc9htC6FvNMcyC8uJzGD?=
 =?us-ascii?q?lV/p+7owyINGObfB5EDX0TVkyHGlDjPaSu5d/a/OiDHee+K/rOYbOTqe1RTfuI?=
 =?us-ascii?q?xJSv0pd48DaILMmAIn5iD/gj0EpZQX95A9jZmykISyEPlyPNaNObpA6h+iJtqM?=
 =?us-ascii?q?Cz6u/rWAXp5YuAELZSNdRv+xargaaMLeKQhSB5KSpG2ZMI33PH1L8f3FsKgSF0?=
 =?us-ascii?q?azatCagAtTLKTK/Imq9YER8bayBwNMtJ9a483RNNOcnUitzrzL54k+U1BkxBVV?=
 =?us-ascii?q?zgnMGpeMMLL3u8NFPBGEaEKrCGKSfXzMHwZKO2UadQg/lMtx2spTabFFfuMS6e?=
 =?us-ascii?q?lzbyTRCgL+FNgDufPBxfo4y9dhdtCW7+TNPpcBG7Mdl3jSEozr0wnH/FKWkcMT?=
 =?us-ascii?q?1keUNXsrKQ9T9Ygul4G2FZ8nplLOyElzyF4OXCNpkWseVkAiJvmuJe4XQ6zaZV?=
 =?us-ascii?q?7S5eSPx0nivSssBho1W8nuaTzTpnVQJEqixXi4KToUViJaLZ+4FAWHne+hIN6G?=
 =?us-ascii?q?SQCxISqNpkCt3goaZQytfUmaL3KTdC9c/U/MQGC8jVLsKHLGQuMR7zFDHICwsF?=
 =?us-ascii?q?SG3jCWaKq0VDnbmy/3uOo55y/pTlhpdISrZdT1EzPvcbDFl1Wt0EPJpzGDgjlO?=
 =?us-ascii?q?jfxO8O6n32iR7VQsxA9sTCV/SdBt31JTqZhKUCbBwNl/ewZ5gTO8XywUdiLUkq?=
 =?us-ascii?q?wszPEkvWQdlMpCB7dUV89FUdrlB9Q3c11kajbRmitjtbE+Wolxg5hyNlfP8gsj?=
 =?us-ascii?q?vhpx8NJ1mCuiI22HMwlNGt1SqQfTrZN7qqR4BbD2z/sE1ndtvATgx8dhGzlEos?=
 =?us-ascii?q?HTHIXaBcjfNbdG10iQjG8c9FGPFRRLZVSBsRw+yLffIu0EQapijxgQdk286NBZ?=
 =?us-ascii?q?Z8mQ9idJetq3NG1EpnbcUpbfjTOq9h0FddnOSNszWu2+R3xxURcQJFukGbYykO?=
 =?us-ascii?q?8GVOfpUhISeu8OFo5UbKzxlKY28Kf+g6+Pk2sEg6PrLEhwbh1aNTYmO8LeqSK+?=
 =?us-ascii?q?u8smnElMiHCncxzV9Aw01E+6VmlMQuaUyZU2gxw7aLURcEL8zPLUdSdcUEsDDy?=
 =?us-ascii?q?eymJ+cDKxZR8Jc3pE+HuQuimt6sOhE+gWgEzENJIpv4IEpipmGLCJsJuNvZR0x?=
 =?us-ascii?q?Y37wHiPn2fAfhJcQ7NmzAC9YX3hr8xlbFQOjwHSUx7LySxrP6DphcjqOiSQNAs?=
 =?us-ascii?q?JHwdW91Afk42X8izgGZ2u3lBHD+6yKpN1AeG/xf4pyLNECP7adtzIvuZM1ckId?=
 =?us-ascii?q?e66H0b7rSxjF/N6ZbfbzX+KMhlktzC8+UXo9CAEfwCCfFXtF3dgI1RWTSSXnLM?=
 =?us-ascii?q?FsD9c5LoQ5IxdtGyBnvsFhS7ijQoX4L8MtfleqyJhxz4AItasaGF0z05c8ywDD?=
 =?us-ascii?q?cTH1F3ve5VoOpEbAoHZNIRZhj6tgI/f/inKgCewNSoQk63JDdWRuUZxuK/Me95?=
 =?us-ascii?q?1S0pO8agxDMKT5whz+Sq70MJDMUDlB2Yz/eufIlTTDb+HlRZegPGvy1/kHJuYL?=
 =?us-ascii?q?VhitwjyQ/F5AFPewuAc/ZkPSkd54kx?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AXAAAEnAVch0O0hNFjHgEGBwaBUQkLA?=
 =?us-ascii?q?YJpgQIngzo/ljIUlzSBcywLCAGEQINJIjQJDQEDAQEBAQEBAgETAQEBCgsJCCk?=
 =?us-ascii?q?jDII2JAGCYgECAwECCRcEGQEBNwEFCQEBCAILDQICJgICAx8SAQUBHAYBEgUDg?=
 =?us-ascii?q?xkBggEFCopxkAc8ih1wfDOCdgEBBYEFASoBhXUDBRJ5ixGBVz+EI4UBgwSCV4k?=
 =?us-ascii?q?yljtVBwKCHwSEXYo8GJEmLIhYhGWKdTCBJYINfXQGgjUTgggMF4hehQgBNz4zA?=
 =?us-ascii?q?QEIewEBiloBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AXAAAEnAVch0O0hNFjHgEGBwaBUQkLAYJpgQIngzo/ljI?=
 =?us-ascii?q?UlzSBcywLCAGEQINJIjQJDQEDAQEBAQEBAgETAQEBCgsJCCkjDII2JAGCYgECA?=
 =?us-ascii?q?wECCRcEGQEBNwEFCQEBCAILDQICJgICAx8SAQUBHAYBEgUDgxkBggEFCopxkAc?=
 =?us-ascii?q?8ih1wfDOCdgEBBYEFASoBhXUDBRJ5ixGBVz+EI4UBgwSCV4kyljtVBwKCHwSEX?=
 =?us-ascii?q?Yo8GJEmLIhYhGWKdTCBJYINfXQGgjUTgggMF4hehQgBNz4zAQEIewEBiloBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,311,1539673200"; 
   d="scan'208";a="55355023"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 03 Dec 2018 13:12:34 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726013AbeLCVMc (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 3 Dec 2018 16:12:32 -0500
Received: from mail-it1-f196.google.com ([209.85.166.196]:40110 "EHLO
        mail-it1-f196.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725951AbeLCVMc (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 3 Dec 2018 16:12:32 -0500
Received: by mail-it1-f196.google.com with SMTP id h193so10909751ita.5
        for <linux-kernel@vger.kernel.org>; Mon, 03 Dec 2018 13:12:31 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc:content-transfer-encoding;
        bh=yhIoV1dlJMenFm8edG2JD4Ef45e8aCymQaFOXM0M0dE=;
        b=c6f3xHN64JNAu4OHg/gLyl2qOK/TyxhK5AoPdT8JT95w4+yCIEe4lDyPPdt1sO90Za
         cv4m2Kb0E52NPtiVkgWSQ32NW+9TaiIl2HMvc5JGpfkHrggS9lAkq1h9D7eKAndtP4aY
         T0UGAyBmnNVj2BsWAghwV2wrDMauz7DgGwBuA=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc:content-transfer-encoding;
        bh=yhIoV1dlJMenFm8edG2JD4Ef45e8aCymQaFOXM0M0dE=;
        b=MlyhvrjFX51+LFjMjQnH64cpwrKO4lLXVPsbniiLApNASTrqQ7CUwaK8UELf8vtSnB
         kaE7kYE+CF6PlIAMRbmbgKlFkaALkp3JOkWZ9Vw2Q4eImdfhNgW9I3dLXCzjLsl5SESL
         g3wvS9zZGGO8xoMyTQ1qugVmBLVjVBbJwr0RputEOP9nN89MWmWV4kEZN8Px66TDdiPx
         N8/0EGwsGAXm2S+qDZfY4SOm0skapp2W9jzDpkqDDSw5voo4fY10KObLSzUP3Z8qE39u
         P9d61vSFdOt+HRCMmx03wzPhj3OrJcMD5J0TPE8rHSwgC8j3s/dX3KwfLq0JwB+6vmd2
         ZNYQ==
X-Gm-Message-State: AA+aEWYZ8wAtXhNmAIcWQ8PiWu/6U8iv2kNpWttYJfOYhsa7zBHsORka
        9LW3jaDhh3BkT9ABmtSUO501VNahzz/c+mOYMElSAw==
X-Google-Smtp-Source: AFSGD/VQLpPaJ+9uZg/2zjeSkDRwFa2atwtXr9CPUbBf9cO8rWtrInzY/vzT/qbZWuzlCj2nEsb/S2LZqJyXBzLo/Js=
X-Received: by 2002:a24:edc4:: with SMTP id r187mr10260248ith.158.1543871550657;
 Mon, 03 Dec 2018 13:12:30 -0800 (PST)
MIME-Version: 1.0
References: <20181129150210.2k4mawt37ow6c2vq@linutronix.de> <tip-7d79adb87fa79e4a4c59424fd5b5a922861fc5f6@git.kernel.org>
In-Reply-To: <tip-7d79adb87fa79e4a4c59424fd5b5a922861fc5f6@git.kernel.org>
From: Ard Biesheuvel <ard.biesheuvel@linaro.org>
Date: Mon, 3 Dec 2018 22:12:19 +0100
Message-ID: <CAKv+Gu-s59fSWrMevmbJWyBtNVYLkF7FATALGBD470CWsN9C1Q@mail.gmail.com>
Subject: Re: [tip:x86/fpu] x86/fpu: Don't export __kernel_fpu_{begin,end}()
To: Dave Hansen <dave.hansen@linux.intel.com>,
        Ingo Molnar <mingo@redhat.com>,
        "the arch/x86 maintainers" <x86@kernel.org>, nstange@suse.de,
        Rik van Riel <riel@surriel.com>,
        Sebastian Andrzej Siewior <bigeasy@linutronix.de>,
        KVM devel mailing list <kvm@vger.kernel.org>,
        "Jason A. Donenfeld" <Jason@zx2c4.com>,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>,
        Ingo Molnar <mingo@kernel.org>,
        =?UTF-8?B?UmFkaW0gS3LEjW3DocWZ?= <rkrcmar@redhat.com>,
        "H. Peter Anvin" <hpa@zytor.com>,
        Thomas Gleixner <tglx@linutronix.de>,
        Andy Lutomirski <luto@kernel.org>,
        Borislav Petkov <bp@suse.de>,
        linux-efi <linux-efi@vger.kernel.org>,
        Paolo Bonzini <pbonzini@redhat.com>
Cc: linux-tip-commits@vger.kernel.org
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Mon, 3 Dec 2018 at 22:04, tip-bot for Sebastian Andrzej Siewior
<tipbot@zytor.com> wrote:
>
> Commit-ID:  7d79adb87fa79e4a4c59424fd5b5a922861fc5f6
> Gitweb:     https://git.kernel.org/tip/7d79adb87fa79e4a4c59424fd5b5a92286=
1fc5f6
> Author:     Sebastian Andrzej Siewior <bigeasy@linutronix.de>
> AuthorDate: Thu, 29 Nov 2018 16:02:10 +0100
> Committer:  Borislav Petkov <bp@suse.de>
> CommitDate: Mon, 3 Dec 2018 19:37:27 +0100
>
> x86/fpu: Don't export __kernel_fpu_{begin,end}()
>
> There is one user of __kernel_fpu_begin() and before invoking it,
> it invokes preempt_disable(). So it could invoke kernel_fpu_begin()
> right away. The 32bit version of arch_efi_call_virt_setup() and
> arch_efi_call_virt_teardown() does this already.
>
> The comment above *kernel_fpu*() claims that before invoking
> __kernel_fpu_begin() preemption should be disabled and that KVM is a
> good example of doing it. Well, KVM doesn't do that since commit
>
>   f775b13eedee2 ("x86,kvm: move qemu/guest FPU switching out to vcpu_run"=
)
>
> so it is not an example anymore.
>
> With EFI gone as the last user of __kernel_fpu_{begin|end}(), both can
> be made static and not exported anymore.
>
> Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
> Signed-off-by: Borislav Petkov <bp@suse.de>
> Reviewed-by: Rik van Riel <riel@surriel.com>
> Cc: "H. Peter Anvin" <hpa@zytor.com>
> Cc: "Jason A. Donenfeld" <Jason@zx2c4.com>
> Cc: Andy Lutomirski <luto@kernel.org>
> Cc: Ard Biesheuvel <ard.biesheuvel@linaro.org>
> Cc: Dave Hansen <dave.hansen@linux.intel.com>
> Cc: Ingo Molnar <mingo@redhat.com>
> Cc: Nicolai Stange <nstange@suse.de>
> Cc: Paolo Bonzini <pbonzini@redhat.com>
> Cc: Radim Kr=C4=8Dm=C3=A1=C5=99 <rkrcmar@redhat.com>
> Cc: Thomas Gleixner <tglx@linutronix.de>
> Cc: kvm ML <kvm@vger.kernel.org>
> Cc: linux-efi <linux-efi@vger.kernel.org>
> Cc: x86-ml <x86@kernel.org>
> Link: https://lkml.kernel.org/r/20181129150210.2k4mawt37ow6c2vq@linutroni=
x.de
> ---
>  arch/x86/include/asm/efi.h     |  6 ++----
>  arch/x86/include/asm/fpu/api.h | 16 ++++++----------
>  arch/x86/kernel/fpu/core.c     |  6 ++----
>  3 files changed, 10 insertions(+), 18 deletions(-)
>
> diff --git a/arch/x86/include/asm/efi.h b/arch/x86/include/asm/efi.h
> index eea40d52ca78..45864898f7e5 100644
> --- a/arch/x86/include/asm/efi.h
> +++ b/arch/x86/include/asm/efi.h
> @@ -82,8 +82,7 @@ struct efi_scratch {
>  #define arch_efi_call_virt_setup()                                     \
>  ({                                                                     \
>         efi_sync_low_kernel_mappings();                                 \
> -       preempt_disable();                                              \
> -       __kernel_fpu_begin();                                           \
> +       kernel_fpu_begin();                                             \
>         firmware_restrict_branch_speculation_start();                   \
>                                                                         \
>         if (!efi_enabled(EFI_OLD_MEMMAP))                               \
> @@ -99,8 +98,7 @@ struct efi_scratch {
>                 efi_switch_mm(efi_scratch.prev_mm);                     \
>                                                                         \
>         firmware_restrict_branch_speculation_end();                     \
> -       __kernel_fpu_end();                                             \
> -       preempt_enable();                                               \
> +       kernel_fpu_end();                                               \
>  })
>
>  extern void __iomem *__init efi_ioremap(unsigned long addr, unsigned lon=
g size,
> diff --git a/arch/x86/include/asm/fpu/api.h b/arch/x86/include/asm/fpu/ap=
i.h
> index a9caac9d4a72..e368d8d94ca6 100644
> --- a/arch/x86/include/asm/fpu/api.h
> +++ b/arch/x86/include/asm/fpu/api.h
> @@ -12,17 +12,13 @@
>  #define _ASM_X86_FPU_API_H
>
>  /*
> - * Careful: __kernel_fpu_begin/end() must be called with preempt disable=
d
> - * and they don't touch the preempt state on their own.
> - * If you enable preemption after __kernel_fpu_begin(), preempt notifier
> - * should call the __kernel_fpu_end() to prevent the kernel/user FPU
> - * state from getting corrupted. KVM for example uses this model.
> - *
> - * All other cases use kernel_fpu_begin/end() which disable preemption
> - * during kernel FPU usage.
> + * Use kernel_fpu_begin/end() if you intend to use FPU in kernel context=
. It
> + * disables preemption so be careful if you intend to use it for long pe=
riods
> + * of time.
> + * If you intend to use the FPU in softirq you need to check first with
> + * irq_fpu_usable() if it is possible.
> + * Using the FPU in hardirq is not allowed.

According to the documentation in x86/kernel/fpu/core.c, this is not
true. So which one is accurate?

>   */
> -extern void __kernel_fpu_begin(void);
> -extern void __kernel_fpu_end(void);
>  extern void kernel_fpu_begin(void);
>  extern void kernel_fpu_end(void);
>  extern bool irq_fpu_usable(void);
> diff --git a/arch/x86/kernel/fpu/core.c b/arch/x86/kernel/fpu/core.c
> index 2ea85b32421a..2e5003fef51a 100644
> --- a/arch/x86/kernel/fpu/core.c
> +++ b/arch/x86/kernel/fpu/core.c
> @@ -93,7 +93,7 @@ bool irq_fpu_usable(void)
>  }
>  EXPORT_SYMBOL(irq_fpu_usable);
>
> -void __kernel_fpu_begin(void)
> +static void __kernel_fpu_begin(void)
>  {
>         struct fpu *fpu =3D &current->thread.fpu;
>
> @@ -111,9 +111,8 @@ void __kernel_fpu_begin(void)
>                 __cpu_invalidate_fpregs_state();
>         }
>  }
> -EXPORT_SYMBOL(__kernel_fpu_begin);
>
> -void __kernel_fpu_end(void)
> +static void __kernel_fpu_end(void)
>  {
>         struct fpu *fpu =3D &current->thread.fpu;
>
> @@ -122,7 +121,6 @@ void __kernel_fpu_end(void)
>
>         kernel_fpu_enable();
>  }
> -EXPORT_SYMBOL(__kernel_fpu_end);
>
>  void kernel_fpu_begin(void)
>  {
