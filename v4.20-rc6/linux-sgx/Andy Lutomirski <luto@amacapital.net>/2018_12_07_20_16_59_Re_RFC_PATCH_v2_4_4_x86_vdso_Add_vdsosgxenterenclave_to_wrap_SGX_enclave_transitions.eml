Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 09 Dec 2018 18:53:19 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 0003B5804F9;
	Fri,  7 Dec 2018 12:17:10 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by orsmga003-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 07 Dec 2018 12:17:10 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ARRriYR2Bth+f9HmIsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segTKfjxwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJdUcleSiJPAoSy?=
 =?us-ascii?q?YIkBAeQOPuhYoZfzp0AWrRa8HgSsGPrvyjpUin/2waE30eIsGhzG0gw6GNIOtW?=
 =?us-ascii?q?zZocnzNKgPUeG+0a/GzSjfb/NR3Df96ZLIcgsiofGNQLl9ds7RyVQzFwPClVif?=
 =?us-ascii?q?s4nlMCmJ2esXq2ib7vZgWviri2I9rQF+vCSvy94qh4LUhYwV0kjJ+TtlzIsxP9?=
 =?us-ascii?q?G0VUB2bcC+HJdNtCyWK5F6T8IgTm1wpio3y6EKtYK+cSQX1Jgr2gLTZvmcfISU?=
 =?us-ascii?q?/B7uUOOcLitliH9nZL2yggy9/Ei6xeD9U8S7zlhKoyVLn9TJuHAA1RLT5daCR/?=
 =?us-ascii?q?Z84kiuxyqD2gbO4e9eO080j7DUK5s5z74wiJUTtUPDEzfomEX5kqCWbF8o+uu2?=
 =?us-ascii?q?5OT9ZLXpuJucO5VzigHkPaQigs2/AeImPQgSR2WX5/iw2bn58UHkTrhGkOc6nr?=
 =?us-ascii?q?TavZzGP8gWp6y0DxdQ0ok56ha/Czmm0M4fnXkCNF9FfBOHj470O1DBOfz4Dumw?=
 =?us-ascii?q?g06qkDh1w/DKJ7rhA5vLLnfdirfsZqh960FCxwop19xf5IxbCqsHIP3tXk/9rt?=
 =?us-ascii?q?vYDgU2MwCs2eboFM191p8CWWKIGqKZNKLSsVyW6e41LOiMeZQYuDL8K/gj+v7v?=
 =?us-ascii?q?gmU1mV4bfam1w5QXbGq0EehhI0WceXDsmMsOEX8WvgoiS+znkF2CXiRSZ3auRa?=
 =?us-ascii?q?084Ss3CIK7DYjZQICtj6eM3CO6Hp1Qe2BHBUqAEXbud4WYRfgMbDieLdNmkjwB?=
 =?us-ascii?q?TbKhUZMu1QmytA/mzLpqNujU+ioGup7519h14OvTlRc19TFvC8Sd0meNT3x7n2?=
 =?us-ascii?q?8SRj822rx/rlJ5yluZzad4hPlYH8RJ5/xVSgc6KYLcz+tiBt/oQQLBftCJSFW8?=
 =?us-ascii?q?TtW8Gz4xTMk8w9sPY0Z7BtWjgQrP3yusA78JibOLAIY4/b7b33j0P8x90WrJ1L?=
 =?us-ascii?q?E9j1k6RctCLW6mibR59wTJA47Jkl+Wl6CldakH2C7N9WGDzXeBvU1CUQ5wV7nF?=
 =?us-ascii?q?Um4bZkfMsdv54UbCRae0Cbs7KgtB1dKCKqxSZ9L0l1pGWunsNM7eY22rnWewHg?=
 =?us-ascii?q?iHxrWLYIrueGUd2SHdBVMAkwAS+3aGKAc/Cj2go2LYEDxhC1bvb1nw/ul5rXOx?=
 =?us-ascii?q?VlU0wB2Sb019y7q1/QYYiuGGRPMNwL0IoichpC9yHFamwd3WDcGNpw5gfKVafN?=
 =?us-ascii?q?M8701L1WPftwxhIJOgK7puiUIZcwRyp0nuzQl4Cp1ckcg2q3Mn1BZyKaOd0FNG?=
 =?us-ascii?q?azOY3ZDxNqfLKmXo+xCvcarW2lDY0NaZ4aoP7PU4q1P+vACmDEYi8nNn08VL3H?=
 =?us-ascii?q?uY/JnFEA0SUZfpWEYt6xd6v63aYjU6547Mz3JsNbe7szDc1NMpHucq0QugcMpF?=
 =?us-ascii?q?P6OCFw/yFNMaCtOqKOwrnVipcx0FMPpT9K4yI8Opaf+G1LS3M+ZnmTKslX5H75?=
 =?us-ascii?q?xl0kKQ6yp8TfbF3pYYw/2CwgSLTTb9jFe7vcDxloBJfjUSHmu5ySj5C49dfKxy?=
 =?us-ascii?q?fYAXCWiwJ8273Mlxh5noW3RA7l6sG0sG2NO1eRqVd1H9xwxQ2lgNrny9hCS4yC?=
 =?us-ascii?q?Z4kzc3oaqF3SzC2vjtewADOmFWWmZil1DsIY6vgtAeXUioaRUplRS/6Ub7wahb?=
 =?us-ascii?q?uLpwL23JTUhUeCj2KnloUrGsubqaf85P9JQovD1XUeS9e1ybSqTxowAH0yPlBG?=
 =?us-ascii?q?ZewDE7dze3upT2hRB6iWSdLGpto3rdY81/2RDf5NnET/5LwjUGXDV4iSXQBlWk?=
 =?us-ascii?q?Pdmm58+Ul5TAsuC5TW6hTYdccSrozYOBsiu0+2tqDAa7n/CynN3nDAc73TX619?=
 =?us-ascii?q?lsSSXHshL8bpP32KS9NOJtZlNoC0Pk68pmBoF+lZM9hZEK1ngdnJmV/3sHkWHo?=
 =?us-ascii?q?PNVf2KL+amcNRDERz97U5gjlxFNsLnaTy43lUXWdx9NrZ8OmbWMOxiI988dKBb?=
 =?us-ascii?q?+X7LNenCt5uFq4rR/Lbvh7kTcQ0v8u6H8cg+EUtwsh1CSdArYOHUZGOSzgjQiH?=
 =?us-ascii?q?79e7rK9PfmagbaCw1FZindCmFLyCpwBcWHXjdZs4Ey5/8N5/ME7S333p8Y7rZs?=
 =?us-ascii?q?PQbd0Iux2QkhfAifVVKZ0rmvoLgypnJXzyvXk/x+Enihxu2ImwvJKbJGV14KK5?=
 =?us-ascii?q?HhlYOyXpZ8MU/zHhl6dfkdyQ34CyBZVhATQLUYDsTfKpFjISqPvmOxyPED06tn?=
 =?us-ascii?q?eUB77fERWD50dhqnLFC4qrOG2PJHkF0dViQwGQK1dFjwATWDU6g4Q1FgS3xMH6?=
 =?us-ascii?q?dEd55zYR5kP3qxdWy+JoMQX/XXnbpAuydjg0T52fJgJM7g5e/0fVLdCe7uVrEi?=
 =?us-ascii?q?Fa5JKhqRKCKneBawRUF20JWVGEB1P+Prmo/9bA6POVBu6/L/vIfLWPpvZSV/aO?=
 =?us-ascii?q?xZKzzIRm+yyAOdmIPnlnF/c7wFZMXWhlG8TFnDUCUywWlyXQb86CuRez4Ct3ot?=
 =?us-ascii?q?qk8PTsXgLv6pCCC79TMdVp5hC3jr2PN++WhCZlNzlY0okAymPPyLgaxFQSkT1h?=
 =?us-ascii?q?dyGxEbQcsi7AVKLQlbFWDx4YaCNzNdFE76Em3glKNs7UlMn11qNjjvMuD1dFVF?=
 =?us-ascii?q?rhmtymZMAQImG9Mk/HC1iPNLicOTLLxMT3a7umSbJMlOVUqwGwuTGDHkD5IzSM?=
 =?us-ascii?q?jCPpWA6vMO1WiCGbPQdTuIW8chZrFGjiQ8jqahy9MN9rkzI2xac4iW/NNW4ZKT?=
 =?us-ascii?q?J8aV9CrqWM7SNEhfVyA3BB7ntgLeWehymV9fXXKpYIvvttGSl0k+Na4HIny7pa?=
 =?us-ascii?q?9i1ERfp1mDfMod5quV2pju6Pyj9/WhpUtjlLnJ6LvVllOajB9phPQ3DE/BcM7W?=
 =?us-ascii?q?WWExsLpttlBcfpu6Bf0dXPkKPzKDFf89Pb58ccBs7UKN6ZP3olKxbmBDnUDA5W?=
 =?us-ascii?q?BQKsYFrSjkoVu/GI92aJqYA6p4L3n5xGHqRWXVpzFLURCl5kB8AFOJd6RCgjl5?=
 =?us-ascii?q?aaitIF4Ty1qxyHF+tAuZWSf/SeEL3LNSqeiLhefBgJief8MJgUHoT+0kdrclhm?=
 =?us-ascii?q?lYCMHUfMC4Me6hZ9ZxM59R0euEN1SXc+jge8Mlug?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AHAAAY1Qpch0O0hNFjGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBVAIBAQEBCwGBMII7J4N6lCpQAQEGgRAlFIkMiTWGHgNMEgEBGBM?=
 =?us-ascii?q?BhECDHSI3Bg0BAwEBAQEBAQIBEwEBAQoLCQgpIwyCNiQBgmEBAQEBAgEBAiAEG?=
 =?us-ascii?q?QEBNwEEAQkBAQoYAgImAgIDMQEFAQ4BDQYTBYMcgXUFCAEEmg48ih1wfDOCdgE?=
 =?us-ascii?q?BBYcrCBJ5ixcXeIEHgREnDBOCTIUBgwQxgiaLKYUQkDAJkWOBXIgHNocfLJVrg?=
 =?us-ascii?q?l0CBAIEBQIFDyGBO4F3ewplAYJBPoFdCwEXEoM4inQfMgGBBAEBIYpEAQE?=
X-IPAS-Result: =?us-ascii?q?A0AHAAAY1Qpch0O0hNFjGgEBAQEBAgEBAQEHAgEBAQGBVAI?=
 =?us-ascii?q?BAQEBCwGBMII7J4N6lCpQAQEGgRAlFIkMiTWGHgNMEgEBGBMBhECDHSI3Bg0BA?=
 =?us-ascii?q?wEBAQEBAQIBEwEBAQoLCQgpIwyCNiQBgmEBAQEBAgEBAiAEGQEBNwEEAQkBAQo?=
 =?us-ascii?q?YAgImAgIDMQEFAQ4BDQYTBYMcgXUFCAEEmg48ih1wfDOCdgEBBYcrCBJ5ixcXe?=
 =?us-ascii?q?IEHgREnDBOCTIUBgwQxgiaLKYUQkDAJkWOBXIgHNocfLJVrgl0CBAIEBQIFDyG?=
 =?us-ascii?q?BO4F3ewplAYJBPoFdCwEXEoM4inQfMgGBBAEBIYpEAQE?=
X-IronPort-AV: E=Sophos;i="5.56,327,1539673200"; 
   d="scan'208";a="56017270"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 07 Dec 2018 12:17:08 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726249AbeLGURE (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 7 Dec 2018 15:17:04 -0500
Received: from mail-pf1-f196.google.com ([209.85.210.196]:39968 "EHLO
        mail-pf1-f196.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726104AbeLGURE (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 7 Dec 2018 15:17:04 -0500
Received: by mail-pf1-f196.google.com with SMTP id i12so2439204pfo.7
        for <linux-kernel@vger.kernel.org>; Fri, 07 Dec 2018 12:17:03 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=amacapital-net.20150623.gappssmtp.com; s=20150623;
        h=mime-version:subject:from:in-reply-to:date:cc
         :content-transfer-encoding:message-id:references:to;
        bh=pjVnQ5FDILgERAcDn7BNzHjEa7TnukijT6untP9L3tI=;
        b=nzr0wqol6Zw06x0MaAQzWsQyXEoGKJZE5AX1ZccaGLH1EUgCH77WDm+XQ34TNFN3Tb
         JsZRrYIpG1sbWnyT8rb1NxecasLuhk7HZRefr5sUhY/o8BvPDpEtdvDcBcY8frCoNTWF
         V4+UJEVVVO2tjuIx0QwkKvJ6A4sSJeEOdR9mmJk89+i0hHBMXJV9yUmIKi79yYusv8kl
         DYHoq+VLQT7c89vGXewBBqw05XEbffAnG+jIGVKQl8mYiOBWeg59fu7U6S99zpEAw7Fz
         7bAKZQqrtArEAecL+WiVJaPYmGH1mjOHqtC+JtiHGREEHG2EQ2FX/8AUMYr+dVIfUHes
         Cyog==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:subject:from:in-reply-to:date:cc
         :content-transfer-encoding:message-id:references:to;
        bh=pjVnQ5FDILgERAcDn7BNzHjEa7TnukijT6untP9L3tI=;
        b=kqYXRuWsJHTBQQJ/wXrOJOsE44v3tc8TIZgWrp3suwGnWn+ok3v2kyUYdtpKQmQd+e
         9PRVSpUAlkfZzqZztwSgUt3FzBhrMhz4HiQFUjcVFWPpI4+mpvD6JfifArWjMBj0hPAe
         C6nHMRv4He/5x+LTT2STsKdbOWQ+o+fn+uYOA7yfbflyPCbjs2eNJrGf3+FzRqyU8rNu
         s2EW2WYuBK9/GP+7mnnpuOLQGfNqJv2ph1E2BBOoS5eQE50ri85b6akewP68ZNs98aYf
         f/GXK/6jB/Z5X4TAaWp1rhPwhr0Ljtk9E1UD9vIPEsHLIDXLvaEM67YwY+KAnf8Hbfdf
         ur5A==
X-Gm-Message-State: AA+aEWaNm3dLFVgi0eFgCZZI2s1opgvATNHCpUuZILu0IN86znNjli+7
        gXEII4dN6U8RhjBa6NpUWvOQOw==
X-Google-Smtp-Source: AFSGD/Wo5N5ExKrr3cEwrcyoGWbsTZdWpl7wMH9Cey/Ni9LIwxLOiQ7Ajpn+WjKVecGC6Ycdm6CcwQ==
X-Received: by 2002:a62:8949:: with SMTP id v70mr3505778pfd.85.1544213822767;
        Fri, 07 Dec 2018 12:17:02 -0800 (PST)
Received: from ?IPv6:2600:1010:b029:c17c:a5a6:ef43:f7fe:6ce0? ([2600:1010:b029:c17c:a5a6:ef43:f7fe:6ce0])
        by smtp.gmail.com with ESMTPSA id m3sm4965938pgl.69.2018.12.07.12.17.01
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Fri, 07 Dec 2018 12:17:01 -0800 (PST)
Content-Type: text/plain;
        charset=utf-8
Mime-Version: 1.0 (1.0)
Subject: Re: [RFC PATCH v2 4/4] x86/vdso: Add __vdso_sgx_enter_enclave() to wrap SGX enclave transitions
From: Andy Lutomirski <luto@amacapital.net>
X-Mailer: iPhone Mail (16B92)
In-Reply-To: <20181207200935.GE10404@linux.intel.com>
Date: Fri, 7 Dec 2018 12:16:59 -0800
Cc: Andy Lutomirski <luto@kernel.org>,
        Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        X86 ML <x86@kernel.org>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        Peter Zijlstra <peterz@infradead.org>,
        "H. Peter Anvin" <hpa@zytor.com>,
        LKML <linux-kernel@vger.kernel.org>,
        Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>,
        Josh Triplett <josh@joshtriplett.org>,
        linux-sgx@vger.kernel.org, haitao.huang@linux.intel.com,
        Jethro Beekman <jethro@fortanix.com>,
        "Dr. Greg Wettstein" <greg@enjellic.com>
Content-Transfer-Encoding: quoted-printable
Message-Id: <4CEB5945-9562-40FA-8CCA-A1675D55B001@amacapital.net>
References: <20181206221922.31012-1-sean.j.christopherson@intel.com> <20181206221922.31012-5-sean.j.christopherson@intel.com> <CALCETrXRJ645=08fyeoMQ949fLB1TvhsgERFVx5mAHdViEjq8Q@mail.gmail.com> <20181207165145.GB10404@linux.intel.com> <CALCETrVkEW82PzQZhJ5iS849DLY1gbd8YjH5F7P1J7hgjkjiOQ@mail.gmail.com> <20181207190257.GC10404@linux.intel.com> <EFA99261-BE93-49DA-9A8F-E6FD28069AFC@amacapital.net> <20181207200935.GE10404@linux.intel.com>
To: Sean Christopherson <sean.j.christopherson@intel.com>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org



> On Dec 7, 2018, at 12:09 PM, Sean Christopherson <sean.j.christopherson@in=
tel.com> wrote:
>=20
>> On Fri, Dec 07, 2018 at 11:23:10AM -0800, Andy Lutomirski wrote:
>>=20
>>>> On Dec 7, 2018, at 11:02 AM, Sean Christopherson <sean.j.christopherson=
@intel.com> wrote:
>>>>=20
>>>> On Fri, Dec 07, 2018 at 09:56:09AM -0800, Andy Lutomirski wrote:
>>>> On Fri, Dec 7, 2018 at 8:51 AM Sean Christopherson
>>>> <sean.j.christopherson@intel.com> wrote:
>>>>> I like that the exit handler allows userspace to trap/panic with the f=
ull
>>>>> call stack in place, and in a dedicated path, i.e. outside of the basi=
c
>>>>> enter/exit code.  An exit handler probably doesn't fundamentally chang=
e
>>>>> what userspace can do with respect to debugging/reporting, but I think=

>>>>> it would actually simplify some userspace implementations, e.g. I'd us=
e
>>>>> it in my tests like so:
>>>>>=20
>>>>> long fault_handler(struct sgx_enclave_exit_info *exit_info, void *tcs,=
 void *priv)
>>>>> {
>>>>>       if (exit_info->leaf =3D=3D SGX_EEXIT)
>>>>>               return 0;
>>>>>=20
>>>>>       <report exception and die/hang>
>>>>> }
>>>>>=20
>>>>=20
>>>> Hmm.  That't not totally silly, although you could accomplish almost
>>>> the same thing by wrapping the vDSO helper in another function.
>>>=20
>>> True, but I think there's value in having the option to intercept an
>>> exception at the exact(ish) point of failure, without having to return
>>> up the stack.
>>>=20
>>> The enclave has full access to the process' memory space, including the
>>> untrsuted stack.  It's not too far fetched to envision a scenario where
>>> the enclave corrupts the stack even if the enclave isn't intentionally
>>> using the stack, e.g. the host passes in variable that a points at the
>>> stack instead of whatever memory is supposed to be shared between the
>>> enclave and host.  It'd be nice to have the ability to triage something
>>> like that without having to e.g. configure breakpoints on the stack.
>>=20
>> Ah, I see. You=E2=80=99re saying that, if the non-enclave stare is corrup=
ted such
>> that RIP  is okay and RSP still points somewhere reasonable but the retur=
n
>> address is garbage, then we can at least get to the fault handler and pri=
nt
>> something?
>=20
> Yep.  Even for something more subtle like GPR corruption it could dump the=

> entire call stack before attempting to return back up.
>=20
>> This only works if the fault handler pointer itself is okay, though, whic=
h
>> somewhat limits the usefulness, given that its pointer is quite likely to=

>> be on the stack very close to the return address.
>=20
> Yeah, it's not a silver bullet by any means, but it does seem useful for a=
t
> least some scenarios.  Even exploding when invoking the handler instead of=

> at a random point might prove useful, e.g. "calling my exit handler explod=
ed,
> maybe my enclave corrupted the stack!".

Here=E2=80=99s another idea: calculate some little hash or other checksum of=
 RSP, RBP, and perhaps a couple words on the stack, and do:

call __vdso_enclave_corrupted_state

If you get a mismatch after return. That function could be:

call __vdso_enclave_corrupted_state:
  ud2

And now the debug trace makes it very clear what happened.

This may or may not be worth the effort. But ISTM the enclave is almost as l=
ikely to corrupt the host state and the. EEXIT as it is to corrupt the host s=
tate and then fault.

BTW, I read through Fortanix=E2=80=99s documentation of the Windows SGX call=
ing conventions, and it seems to want RSI and RDI as out params.  Letting th=
e vDSO be used to invoke Windows-targeted enclaves seems useful.

>=20
>> I really wish the ENCLU instruction had seen fit to preserve some registe=
rs.
>=20
> Speaking of preserving registers, the asm blob needs to mark RBX as
> clobbered since it's modified for EEXIT.

Have fun with that.  The x86_32 compiler seems to really like having its PIC=
 register preserved, and you may get some lovely compiler errors.=
