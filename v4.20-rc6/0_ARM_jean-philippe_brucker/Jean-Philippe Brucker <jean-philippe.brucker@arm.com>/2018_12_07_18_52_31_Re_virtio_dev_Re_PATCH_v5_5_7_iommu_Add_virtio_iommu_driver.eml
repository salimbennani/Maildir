Return-Path: <virtualization-bounces@lists.linux-foundation.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 09 Dec 2018 18:52:40 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 2149A5804F9
	for <like.xu@linux.intel.com>; Fri,  7 Dec 2018 10:53:07 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 07 Dec 2018 10:53:06 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AZpiFMh/x/gd4l/9uRHKM819IXTAuvvDOBiVQ1KB+?=
 =?us-ascii?q?0u8TIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDwULs6Wymt771zRRHolS?=
 =?us-ascii?q?kJKTA5/mLZhMN+g61Uogqhqh59zYPbfY2YOuZycb/Sc9MBW2VMRdpRWi5bD4+g?=
 =?us-ascii?q?c4cCAfQNMOBFpIf9vVsOqh6+CBGoCuzx0DBIgGb607c60+QgFQHG3RQgH8oQv3?=
 =?us-ascii?q?/Jsdj1LroSXvy2zKbW1zXIcvRb2TXj54fSdBAtuOmMXbJxccrVyEkvDxvFgUuK?=
 =?us-ascii?q?pYP+JTOVy/gCs2uF4Op6Tu+gkXQnqwRrrjezwccsj5DEi4QIwV7K8iV5xZw6Jd?=
 =?us-ascii?q?y+SENjZN6rCppQtyWDO4RsWMMtX2FouCckyrIYo5K0YC8KyJE/yx7bavyHdZWI?=
 =?us-ascii?q?4x3tVOaWPDd4gm9qd6ijhxaz9kigzPfwVs6u0FZFtiZFkMHMuWsX1xzO9seHSe?=
 =?us-ascii?q?Vy/l271TaJyQ/T9udJKl03m6rDM5Mt37E9moYJvUjdAyP6hV/6gLKXe0gg4OSk?=
 =?us-ascii?q?9vrrbq34qpOBNYJ4kBzyP6sylsClHOg0LhUCU3KZ9Oig0rDo4Ff3T69QjvIsl6?=
 =?us-ascii?q?nUqJDaKtofpq6+GwJV15ws6xe7Dzu81NQYnH8HLE9KeRKJiIjpJlfOL+3iAvej?=
 =?us-ascii?q?glSslzFry+rBPr37DZXBNnnDkLH/crZh80NQ1QU+wcxF655KF70NPej/VlLwud?=
 =?us-ascii?q?HcFBM1LhK4z/7iCNpn14MeXWyPArWeMKPXqVKI+OMvI/OQZI8Iojn9L/kl5v/0?=
 =?us-ascii?q?gn8lmF8deq+p0YIMZ3C/A/RmJVmWbmT3gtoaFWcKvxE+TPDxiFGYVT5TZnCyX7?=
 =?us-ascii?q?8z5z0iBoKmCprDRoawj7ObwCe7H5pWZmZcBlCLC3foeJ2IW+0QZyKKPs9hjjsE?=
 =?us-ascii?q?WKClS48g1hGhqhX2yrV6LufP/i0YtJTj1MV65uHJlBEy8yB0ANqZ022XU250mW?=
 =?us-ascii?q?YIFHcL2rtiqxl91kubyvo/xPhZDsBIofdIVBoqO5nByeBzF9H1XETGZNjOTV+n?=
 =?us-ascii?q?RtCvB3Y2Vs4wxNkVJFh8Acm/hxTCzSO2ArgTxIGNH4E+p6fV3nztIJRjymzaya?=
 =?us-ascii?q?AljksvXspIMyi8i7di+hPPL4rIiFmC0aKrc7kMmSDK6WGPxHaPu0ceVxR/Br7Y?=
 =?us-ascii?q?V3ISbVeDsNLi+0nZRKWvA7l0DgwUg+uDIatDZ9mhthMOeOziItffZSj5z2KrGT?=
 =?us-ascii?q?6Sy7+MZZascGIYinbzEk8BxiIe9HDDDQg/Aia5u2+WJiZzHlHieQu48+R3rjaj?=
 =?us-ascii?q?Tk4wzhmSYgtrzae++RMPrfWGTrUY2bdS63RpkCl9AFvoh4GeMNGHvQc0JKg=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AFAADZwApchwyp04xjGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUgQBAQEBCwGCaYEpjHKLMoFgLYEhli6BcxQYDQeBS4Ivg2MiNQg?=
 =?us-ascii?q?NAQMBAQEBAQECARMBAQEKCwkIKSMMgjYFAgMYCYJbAQEBAQEBAQEBATcMCh4GB?=
 =?us-ascii?q?QMCAQECBgEBChgeBAQIAwEjAS8GDQYCAQEBgxwBgXkIBAEKpxmKLYwighaBESe?=
 =?us-ascii?q?Ca4MeAQICgT4BAYV5AokTTAmGGZARD0YHAocGhiaEGR6CKYc4EodFjgGLGoFHA?=
 =?us-ascii?q?YILTSNQgmwJgh4Xg0qEWTuFPz8BATEBAQGBBIgnR4F3AQE?=
X-IPAS-Result: =?us-ascii?q?A0AFAADZwApchwyp04xjGgEBAQEBAgEBAQEHAgEBAQGBUgQ?=
 =?us-ascii?q?BAQEBCwGCaYEpjHKLMoFgLYEhli6BcxQYDQeBS4Ivg2MiNQgNAQMBAQEBAQECA?=
 =?us-ascii?q?RMBAQEKCwkIKSMMgjYFAgMYCYJbAQEBAQEBAQEBATcMCh4GBQMCAQECBgEBChg?=
 =?us-ascii?q?eBAQIAwEjAS8GDQYCAQEBgxwBgXkIBAEKpxmKLYwighaBESeCa4MeAQICgT4BA?=
 =?us-ascii?q?YV5AokTTAmGGZARD0YHAocGhiaEGR6CKYc4EodFjgGLGoFHAYILTSNQgmwJgh4?=
 =?us-ascii?q?Xg0qEWTuFPz8BATEBAQGBBIgnR4F3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,327,1539673200"; 
   d="scan'208";a="55389010"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from mail.linuxfoundation.org ([140.211.169.12])
  by mtab.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 07 Dec 2018 10:53:06 -0800
Received: from mail.linux-foundation.org (localhost [127.0.0.1])
	by mail.linuxfoundation.org (Postfix) with ESMTP id 89C18AF8;
	Fri,  7 Dec 2018 18:52:58 +0000 (UTC)
X-Original-To: virtualization@lists.linux-foundation.org
Delivered-To: virtualization@mail.linuxfoundation.org
Received: from smtp1.linuxfoundation.org (smtp1.linux-foundation.org
	[172.17.192.35])
	by mail.linuxfoundation.org (Postfix) with ESMTPS id 24B5A927;
	Fri,  7 Dec 2018 18:52:57 +0000 (UTC)
X-Greylist: domain auto-whitelisted by SQLgrey-1.7.6
X-Greylist: domain auto-whitelisted by SQLgrey-1.7.6
Received: from foss.arm.com (foss.arm.com [217.140.101.70])
	by smtp1.linuxfoundation.org (Postfix) with ESMTP id 67DFE7A4;
	Fri,  7 Dec 2018 18:52:56 +0000 (UTC)
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.72.51.249])
	by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id F29E215AD;
	Fri,  7 Dec 2018 10:52:55 -0800 (PST)
Received: from [10.1.196.78] (ostrya.cambridge.arm.com [10.1.196.78])
	by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPSA id 4565F3F5AF;
	Fri,  7 Dec 2018 10:52:53 -0800 (PST)
From: Jean-Philippe Brucker <jean-philippe.brucker@arm.com>
Subject: Re: [virtio-dev] Re: [PATCH v5 5/7] iommu: Add virtio-iommu driver
To: "Michael S. Tsirkin" <mst@redhat.com>
References: <20181122193801.50510-1-jean-philippe.brucker@arm.com>
	<20181122193801.50510-6-jean-philippe.brucker@arm.com>
	<20181123165206-mutt-send-email-mst@kernel.org>
	<e76a51ba-7a0f-3fca-a1ae-640131f9dfe1@arm.com>
	<20181127130527-mutt-send-email-mst@kernel.org>
Message-ID: <e1dde79c-0bc4-ea99-1bb0-9e70b56955fb@arm.com>
Date: Fri, 7 Dec 2018 18:52:31 +0000
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
	Thunderbird/60.0
MIME-Version: 1.0
In-Reply-To: <20181127130527-mutt-send-email-mst@kernel.org>
Content-Language: en-US
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	smtp1.linux-foundation.org
Cc: mark.rutland@arm.com, virtio-dev@lists.oasis-open.org,
	lorenzo.pieralisi@arm.com, tnowicki@caviumnetworks.com,
	devicetree@vger.kernel.org, marc.zyngier@arm.com,
	linux-pci@vger.kernel.org, joro@8bytes.org, will.deacon@arm.com,
	virtualization@lists.linux-foundation.org, eric.auger@redhat.com,
	iommu@lists.linux-foundation.org, robh+dt@kernel.org,
	bhelgaas@google.com, robin.murphy@arm.com, kvmarm@lists.cs.columbia.edu
X-BeenThere: virtualization@lists.linux-foundation.org
X-Mailman-Version: 2.1.12
Precedence: list
List-Id: Linux virtualization <virtualization.lists.linux-foundation.org>
List-Unsubscribe: <https://lists.linuxfoundation.org/mailman/options/virtualization>,
	<mailto:virtualization-request@lists.linux-foundation.org?subject=unsubscribe>
List-Archive: <http://lists.linuxfoundation.org/pipermail/virtualization/>
List-Post: <mailto:virtualization@lists.linux-foundation.org>
List-Help: <mailto:virtualization-request@lists.linux-foundation.org?subject=help>
List-Subscribe: <https://lists.linuxfoundation.org/mailman/listinfo/virtualization>,
	<mailto:virtualization-request@lists.linux-foundation.org?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Sender: virtualization-bounces@lists.linux-foundation.org
Errors-To: virtualization-bounces@lists.linux-foundation.org

Sorry for the delay, I wanted to do a little more performance analysis
before continuing.

On 27/11/2018 18:10, Michael S. Tsirkin wrote:
> On Tue, Nov 27, 2018 at 05:55:20PM +0000, Jean-Philippe Brucker wrote:
>>>> +	if (!virtio_has_feature(vdev, VIRTIO_F_VERSION_1) ||
>>>> +	    !virtio_has_feature(vdev, VIRTIO_IOMMU_F_MAP_UNMAP))
>>>
>>> Why bother with a feature bit for this then btw?
>>
>> We'll need a new feature bit for sharing page tables with the hardware,
>> because they require different requests (attach_table/invalidate instead
>> of map/unmap.) A future device supporting page table sharing won't
>> necessarily need to support map/unmap.
>>
> I don't see virtio iommu being extended to support ARM specific
> requests. This just won't scale, too many different
> descriptor formats out there.

They aren't really ARM specific requests. The two new requests are
ATTACH_TABLE and INVALIDATE, which would be used by x86 IOMMUs as well.

Sharing CPU address space with the HW IOMMU (SVM) has been in the scope
of virtio-iommu since the first RFC, and I've been working with that
extension in mind since the beginning. As an example you can have a look
at my current draft for this [1], which is inspired from the VFIO work
we've been doing with Intel.

The negotiation phase inevitably requires vendor-specific fields in the
descriptors - host tells which formats are supported, guest chooses a
format and attaches page tables. But invalidation and fault reporting
descriptors are fairly generic.

> If you want to go that way down the road, you should avoid
> virtio iommu, instead emulate and share code with the ARM SMMU (probably
> with a different vendor id so you can implement the
> report on map for devices without PRI).

vSMMU has to stay in userspace though. The main reason we're proposing
virtio-iommu is that emulating every possible vIOMMU model in the kernel
would be unmaintainable. With virtio-iommu we can process the fast path
in the host kernel, through vhost-iommu, and do the heavy lifting in
userspace. As said above, I'm trying to keep the fast path for
virtio-iommu generic.


More notes on what I consider to be the fast path, and comparison with
vSMMU:

(1) The primary use-case we have in mind for vIOMMU is something like
DPDK in the guest, assigning a hardware device to guest userspace. DPDK
maps a large amount of memory statically, to be used by a pass-through
device. For this case I don't think we care about vIOMMU performance.
Setup and teardown need to be reasonably fast, sure, but the MAP/UNMAP
requests don't have to be optimal.


(2) If the assigned device is owned by the guest kernel, then mappings
are dynamic and require dma_map/unmap() to be fast, but there generally
is no need for a vIOMMU, since device and drivers are trusted by the
guest kernel. Even when the user does enable a vIOMMU for this case
(allowing to over-commit guest memory, which needs to be pinned
otherwise), we generally play tricks like lazy TLBI (non-strict mode) to
make it faster. Here device and drivers are trusted, therefore the
vulnerability window of lazy mode isn't a concern.

If the reason to enable the vIOMMU is over-comitting guest memory
however, you can't use nested translation because it requires pinning
the second-level tables. For this case performance matters a bit,
because your invalidate-on-map needs to be fast, even if you enable lazy
mode and only receive inval-on-unmap every 10ms. It won't ever be as
fast as nested translation, though. For this case I think vSMMU+Caching
Mode and userspace virtio-iommu with MAP/UNMAP would perform similarly
(given page-sized payloads), because the pagetable walk doesn't add a
lot of overhead compared to the context switch. But given the results
below, vhost-iommu would be faster than vSMMU+CM.


(3) Then there is SVM. For SVM, any destructive change to the process
address space requires a synchronous invalidation command to the
hardware (at least when using PCI ATS). Given that SVM is based on page
faults, fault reporting from host to guest also needs to be fast, as
well as fault response from guest to host.

I think this is where performance matters the most. To get a feel of the
advantage we get with virtio-iommu, I compared the vSMMU page-table
sharing implementation [2] and vhost-iommu + VFIO with page table
sharing (based on Tomasz Nowicki's vhost-iommu prototype). That's on a
ThunderX2 with a 10Gb NIC assigned to the guest kernel, which
corresponds to case (2) above, with nesting page tables and without the
lazy mode. The host's only job is forwarding invalidation to the HW SMMU.

vhost-iommu performed on average 1.8x and 5.5x better than vSMMU on
netperf TCP_STREAM and TCP_MAERTS respectively (~200 samples). I think
this can be further optimized (that was still polling under the vq
lock), and unlike vSMMU, virtio-iommu offers the possibility of
multi-queue for improved scalability. In addition, the guest will need
to send both TLB and ATC invalidations with vSMMU, but virtio-iommu
allows to multiplex those, and to invalidate ranges. Similarly for fault
injection, having the ability to report page faults to the guest from
the host kernel should be significantly faster than having to go to
userspace and back to the kernel.


(4) Virtio and vhost endpoints weren't really a priority for the base
virtio-iommu device, we were looking mainly at device pass-through. I
have optimizations in mind for this, although a lot of them are based on
page tables, not MAP/UNMAP requests. But just getting the vIOMMU closer
to vhost devices, avoiding the trip to userspace through vhost-tlb,
should already improve things.

The important difference when DMA is done by software is that you don't
need to mirror all mappings into the HW IOMMU - you don't need
inval-on-map. The endpoint can ask the vIOMMU for mappings when it needs
them, like vhost-iotlb does for example. So the MAP/UNMAP interface of
virtio-iommu performs poorly for emulated/PV endpoints compared to an
emulated IOMMU, since it requires three context switches for DMA
(MAP/DMA/UNMAP) between host and guest, rather than two (DMA/INVAL).
There is a feature I call "posted MAP", that avoids the kick on MAP and
instead lets the device fetch the MAP request on TLB miss, but I haven't
spent enough time experimenting with this.

> Others on the TC might feel differently.
> 
> If someone's looking into adding virtio iommu support in hardware,
> that's a different matter. Which is it?

I'm not aware of anything like that, and suspect that no one would
consider it until virtio-iommu is more widely adopted.

Thanks,
Jean


[1] Diff between current spec and page table sharing draft
    (Very rough, missing page fault support and I'd like to rework the
     PASID model a bit, but table descriptors p.24-26 for both Arm
     SMMUv2 and SMMUv3.)

http://jpbrucker.net/virtio-iommu/spec-table/diffs/virtio-iommu-pdf-diff-v0.9-v0.10.dev03.pdf

[2] [RFC v2 00/28] vSMMUv3/pSMMUv3 2 stage VFIO integration
    https://www.mail-archive.com/qemu-devel@nongnu.org/msg562369.html
_______________________________________________
Virtualization mailing list
Virtualization@lists.linux-foundation.org
https://lists.linuxfoundation.org/mailman/listinfo/virtualization
