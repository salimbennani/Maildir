Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 04 Dec 2018 20:38:03 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 78AE5580375;
	Tue,  4 Dec 2018 03:46:24 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga007-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 04 Dec 2018 03:46:24 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AFxd+fR+iLz0z/v9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?2+MRIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDwULs6Wymt771zRRHmiC?=
 =?us-ascii?q?kJNCQ5/2PZisJukaxVpx2uqRNjzIHJe4GVLPhzc7jBfd4ZX2dNQtxcWzBDD466?=
 =?us-ascii?q?coABD/ABPeFdr4Tlu1sOrAO+CRC3C+Po1j9Dm3H23aog0+88DA/JwhcvEMgVsH?=
 =?us-ascii?q?TIrdX6LqESWv2pwanO0DrDdfJX1in/6IPVbx4hoO+DXLxxccrW00kkCgTIjkmR?=
 =?us-ascii?q?qYz9JDyV0fgNvnOa7utgSeKvjHQnpxttrTiow8chk4/EjZ8bxFDD8CV22oc1Jd?=
 =?us-ascii?q?ugRU54f9GkCp1QuD+eN4dsRcMiWW5otSAnwbMFoZ62ZDYGxIgjyhLFdvCKfZaE?=
 =?us-ascii?q?7gj+WOuSPTt0nnNodbCnixqv9UWtyffwWtS63VtItCZJjMXAum4X2xDO5MWKS/?=
 =?us-ascii?q?1w9Vq71zmVzQDc8ORELFg0laXFL54hxaY9loQcsUvdBC/6gkb2g7GMdkUi5Oeo?=
 =?us-ascii?q?7/7rYrL8pp+TL4N0iwf+PboymsGnH+g0LgwDU3KG9emyyrHv51D1TbZWgvEsk6?=
 =?us-ascii?q?TUsojWJcEBqa64Bw9V3Jwj6xG6Dzq+1NQYnH8HLE9KeR6ejIjmJUvOIPbmAve7?=
 =?us-ascii?q?mlislzlqx/bYMb37GZjNMHfDn6n7fbpn6E5T1hAzzdZB6JJQEL0BJ+jzWkDpuN?=
 =?us-ascii?q?zCEhA5KxC0w/rgCNhl0oMeWGGPDbGDPKLdrF+F/eYvI+iKZI8ItzfxMfkl5/jy?=
 =?us-ascii?q?jXAnnV8RZ7Wm3ZwSaHqgBPRpP12ZYWbwgtcGCWoKvhAxTO32iFKYVj5ffXayX7?=
 =?us-ascii?q?8m6TE9B4KrFoPDRoGrgLyc0ya3BJxWZmZaCl+SFXfkbZmLW/AJaCiKOM9ujiQE?=
 =?us-ascii?q?VaS9S48mzRyutgj6xKR9IurX/S0Ys5Tj1N9u6u3XlBEy8yF0DsuH32GMSWF0gn?=
 =?us-ascii?q?0HRzss0K9jpkx9z0+J0bJkjPxACdxT+/RJXx8gOp7Hz+x6DNPyVhjbftiTSlar?=
 =?us-ascii?q?WdGmATA3TtIszN4CeUd9G9O+jh/d2yqmGaMal7uOBJYs6KLTw2DxJ9phy3bBzK?=
 =?us-ascii?q?QhjEMpQs1VOW2ih65w7Q7TB4HSnkWdlqaqc7kc3SHX+GeCy2qOoF9XUApqXarZ?=
 =?us-ascii?q?WnAfY1Pcrc7l6UPaU7+uFbMnPxNcxsGYNKtFdMfljVVcS/flI9TRfWSxl2C0BR?=
 =?us-ascii?q?aLw7OMaJHne2Ec3CXbFUgFnBof/XeANQgiGCihp3jSAyBpFVLqe0ns6/VxqGun?=
 =?us-ascii?q?Tk8oyAGHd1Bu2KCr+hELn/CcS+kc3rQfuCg/rTV5B1K939PQC9qdqAttZqRcYd?=
 =?us-ascii?q?Uh4FhZ0WLVrRByPpulL6p6nF4Rbxx3v1/y1xVwEohAjckqrHYtzApuKaKZ0ElN?=
 =?us-ascii?q?dy+C0ZD3IL3XLmjy/Baga6PN3lHe0dCW+roA6fgiqlXjuh2pGVQm83l9z9ZV1H?=
 =?us-ascii?q?6c7I3QDAUOSZLxTlo39x9iqr7AZiky+YzV2mNsMKWuqTDCxs8mC/EjyhajeNdf?=
 =?us-ascii?q?LriJFAvzE80cGsivJ/Ymm1mvbhIYIu9S8LQ4MN+hd/uDwKSrJvpvnCq6jWRb54?=
 =?us-ascii?q?BwykKN9zdmRuHUxZoEwvGY0RGBVzfzl1qhtsH3mYZZZTAdBGa/yC7kBJJPaa12?=
 =?us-ascii?q?Z4oEFWCuI8ivzNVkm5HtQ2JY9EKkB14ews+peAadYEbn3QJN0kQbu3qnljWizz?=
 =?us-ascii?q?x1ij0msrCQ3CjTzOv8bhoHPWhLSXJmjVftJ4i0kt8bUFKpbwgviBuq+0L6y7JH?=
 =?us-ascii?q?q6R4KmnZWV1IcDTuL2F+TquwsaKPYs5O6J8ysSRbSv+8YU2cSrPmpxsa0iXjH3?=
 =?us-ascii?q?ZRxTwhdjGqvIn5kAJ+iG6HMHlzq3/Zc9lqxRjD/NzcWeJR3j0eSSl6kzbXHFu8?=
 =?us-ascii?q?P9qu/dmOjJfMqOO+V2GgVp1Vbybry5iNtC+65W1sHB2+kOq/mtzhEQgmzyD708?=
 =?us-ascii?q?NmWjnPrBb5eoPrzbi1Mfp7fkl0A1/x88p7FZt5kocqhpEQ2H4ai46R/XoGl2fz?=
 =?us-ascii?q?LNpa1bj/bHoLWT4E3drV7BL5101kK3KD35j5WWmFwst9e9m6ZXsb2iEn4MBLEq?=
 =?us-ascii?q?uU7KFEkjFzolq3tg/RZfl9njEAyfoh8nIagucJuBYzwSWZGLwdAU5YPSn0nRSS?=
 =?us-ascii?q?89++tLlXZHqocbWo0Up+nNOhA6uYrgBSRnn5YYsiEjFq7spkLl3MynLz55rgeN?=
 =?us-ascii?q?nRa9ITqxKVnw3Bj+hTNJI+iP4KiTB7NmL6uH0v0/Q7ggB23ZGmoIiHLH1g/L6+?=
 =?us-ascii?q?Ah5dLDH0Ztkc+jfwjaZFhcaW3puiHpFgGjUNQZvpQuikEDMUtfT7KQmOFCcwpW?=
 =?us-ascii?q?ucGbraBQWf8ltpr2rTE5C3MHGaPGIWws9lRBmZOUxTmgQUXCghk549FwCqwtHh?=
 =?us-ascii?q?cUhj6jAQ4F74tgVDyuZyOxbjVWffoR+iai0oR5iHMBpW8gZC6l/XMcOE6+J8AT?=
 =?us-ascii?q?pY8oe9rACXKWybegdIDXwPWkOeHFDuJb2u5djG8+iFCeuyNfrOYbOSqeNAU/eE?=
 =?us-ascii?q?346g0oxj/zyULMWAImFiD+En2kpERX14G8PZmygWSywKjS3NadSXpAy7+i1xoc?=
 =?us-ascii?q?Cy6/DrWAPp5YuSBLpeK9Rv+xaqgaidM+6cnjp2KTFd1pkU33/H1KAf3EIOiyFp?=
 =?us-ascii?q?bzStEaoPtS/OTKLTm69bFR0bazl0NMtH8a08xBRNOdXAh9Px1754iOM1ClhfWV?=
 =?us-ascii?q?zgnMGpedIFI2WnOFzbA0aLMayMJSfXzMHvfaO8VbpQgf1OuB2tojmbCVHsPzSZ?=
 =?us-ascii?q?mzntVhCiKuVMjCCdPBxDt4CxaBdtCW7/TN34bh23KsN4jTozwbcsnHPFKXYcMS?=
 =?us-ascii?q?Rgc0NKtrCQ8SJYgvBlF2Nd9HZqMemElDif7+TDLpYWsP1rAjl7lu5A4XQ6zadV?=
 =?us-ascii?q?4z9ARPBvhCTSqdtuqUm8kuaT0jpnTAZOqjFTiYOLp0piP6DZ9phGWXnc/RMN7X?=
 =?us-ascii?q?+fCxIFp9Z+Dt3vuqZQysXAla7pKTdC9c7U8tUYB8TONM2HN38hYlLVH2vQDQ0Y?=
 =?us-ascii?q?XXu3NHmajEtYlfCO7VWLoZUg7JvhgpwDTvlcTlNmLP4CDlVZG4kYIZpzdig5i6?=
 =?us-ascii?q?SagcpO7n276FHdTdtX+JDOUOmfB93rKTCEnf9FYQcFxfXzKoFXfq/ywEtkQktq?=
 =?us-ascii?q?xo+WXUHXWJQFojVoRh0lvEJXtnN5Syl731/5bSuu7WUVGPrymQQ5zkNkYv4m8T?=
 =?us-ascii?q?72y006KlrDuG07l0x10dDkhz+WWCT8IKe5QcddDC+w/1A7NZXpQgB0RRe/kUxt?=
 =?us-ascii?q?KHHPQLcVx79hc317zQzRo51CHdZCQqBeJhwd3/eaY7Mvy1sY4i+mykJO/vrtDZ?=
 =?us-ascii?q?pkiRcwdpitvzRM1kYrZsYdPrHLKexFwxwYmq2Krges1+Ys3BUZIUcdtm+fPGYB?=
 =?us-ascii?q?okBOPLgrPCql4/Jh7SSGmj1KYm9KUOAl5rps7V80PeuN5zn9yLMFJk31f+ieKb?=
 =?us-ascii?q?6J/mXOlOaWTV4qkEAFjU9I+f5xy8hnO0+VUU8o5LicDRIEMYzFMw4RJ9oCqlDQ?=
 =?us-ascii?q?cDyIvOGLxoh6e82+COXAU+CDruAXj1iiEQJvGJ4DveobGZz5zEDAaM3gMPYLzg?=
 =?us-ascii?q?9l3wnhLU6ZDf1PMDuNnC0VrsP39556wohaPHlJHWRlOyKrzqTGuggwxvGEWYFl?=
 =?us-ascii?q?MT8hQoIYOyduC4WBkClDsiEYAQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AkAABdaAZch0O0hNFjHgEGBwaBUQkLA?=
 =?us-ascii?q?YJpgQIngzo/iHiLLgGCIZc1IIFTEgEBGAsIAYgRIjQJDQEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BCgsJCCkjDII2IoJlAwMBAgkXBAUGAUYGCQEBCBwCJgICA1QZBQODGQGCAQUKi?=
 =?us-ascii?q?EybUHwzHoQPAYEDhH4FE3iLExEGgX+MKIJXAokxhn2PRFUJhwOKVotPhVcsjUC?=
 =?us-ascii?q?KYgIEAgQFAhSBRoINTSMVgW8OCwEMgRITghQXiF6FYB4BMgEBCHsBAYsSAQE?=
X-IPAS-Result: =?us-ascii?q?A0AkAABdaAZch0O0hNFjHgEGBwaBUQkLAYJpgQIngzo/iHi?=
 =?us-ascii?q?LLgGCIZc1IIFTEgEBGAsIAYgRIjQJDQEDAQEBAQEBAgETAQEBCgsJCCkjDII2I?=
 =?us-ascii?q?oJlAwMBAgkXBAUGAUYGCQEBCBwCJgICA1QZBQODGQGCAQUKiEybUHwzHoQPAYE?=
 =?us-ascii?q?DhH4FE3iLExEGgX+MKIJXAokxhn2PRFUJhwOKVotPhVcsjUCKYgIEAgQFAhSBR?=
 =?us-ascii?q?oINTSMVgW8OCwEMgRITghQXiF6FYB4BMgEBCHsBAYsSAQE?=
X-IronPort-AV: E=Sophos;i="5.56,313,1539673200"; 
   d="scan'208";a="53738563"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 04 Dec 2018 03:46:22 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726254AbeLDLqS (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 4 Dec 2018 06:46:18 -0500
Received: from terminus.zytor.com ([198.137.202.136]:41709 "EHLO
        terminus.zytor.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725764AbeLDLqS (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 4 Dec 2018 06:46:18 -0500
Received: from terminus.zytor.com (localhost [127.0.0.1])
        by terminus.zytor.com (8.15.2/8.15.2) with ESMTPS id wB4BjqXB849064
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=NO);
        Tue, 4 Dec 2018 03:45:52 -0800
Received: (from tipbot@localhost)
        by terminus.zytor.com (8.15.2/8.15.2/Submit) id wB4BjqkY849061;
        Tue, 4 Dec 2018 03:45:52 -0800
Date: Tue, 4 Dec 2018 03:45:52 -0800
X-Authentication-Warning: terminus.zytor.com: tipbot set sender to tipbot@zytor.com using -f
From: tip-bot for Sebastian Andrzej Siewior <tipbot@zytor.com>
Message-ID: <tip-12209993e98c5fa1855c467f22a24e3d5b8be205@git.kernel.org>
Cc: Jason@zx2c4.com, hpa@zytor.com, luto@kernel.org,
        rkrcmar@redhat.com, pbonzini@redhat.com, mingo@redhat.com,
        dave.hansen@linux.intel.com, riel@surriel.com,
        ard.biesheuvel@linaro.org, nstange@suse.de,
        linux-efi@vger.kernel.org, kvm@vger.kernel.org, x86@kernel.org,
        mingo@kernel.org, linux-kernel@vger.kernel.org,
        bigeasy@linutronix.de, bp@suse.de, tglx@linutronix.de
Reply-To: riel@surriel.com, dave.hansen@linux.intel.com, Jason@zx2c4.com,
          hpa@zytor.com, luto@kernel.org, rkrcmar@redhat.com,
          mingo@redhat.com, pbonzini@redhat.com,
          linux-kernel@vger.kernel.org, bigeasy@linutronix.de, bp@suse.de,
          tglx@linutronix.de, ard.biesheuvel@linaro.org, nstange@suse.de,
          linux-efi@vger.kernel.org, mingo@kernel.org, x86@kernel.org,
          kvm@vger.kernel.org
In-Reply-To: <20181129150210.2k4mawt37ow6c2vq@linutronix.de>
References: <20181129150210.2k4mawt37ow6c2vq@linutronix.de>
To: linux-tip-commits@vger.kernel.org
Subject: [tip:x86/fpu] x86/fpu: Don't export __kernel_fpu_{begin,end}()
Git-Commit-ID: 12209993e98c5fa1855c467f22a24e3d5b8be205
X-Mailer: tip-git-log-daemon
Robot-ID: <tip-bot.git.kernel.org>
Robot-Unsubscribe: Contact <mailto:hpa@kernel.org> to get blacklisted from
 these emails
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Content-Type: text/plain; charset=UTF-8
Content-Disposition: inline
X-Spam-Status: No, score=-0.0 required=5.0 tests=ALL_TRUSTED,BAYES_00,
        DATE_IN_FUTURE_96_Q autolearn=no autolearn_force=no version=3.4.2
X-Spam-Checker-Version: SpamAssassin 3.4.2 (2018-09-13) on terminus.zytor.com
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Commit-ID:  12209993e98c5fa1855c467f22a24e3d5b8be205
Gitweb:     https://git.kernel.org/tip/12209993e98c5fa1855c467f22a24e3d5b8be205
Author:     Sebastian Andrzej Siewior <bigeasy@linutronix.de>
AuthorDate: Thu, 29 Nov 2018 16:02:10 +0100
Committer:  Borislav Petkov <bp@suse.de>
CommitDate: Tue, 4 Dec 2018 12:37:28 +0100

x86/fpu: Don't export __kernel_fpu_{begin,end}()

There is one user of __kernel_fpu_begin() and before invoking it,
it invokes preempt_disable(). So it could invoke kernel_fpu_begin()
right away. The 32bit version of arch_efi_call_virt_setup() and
arch_efi_call_virt_teardown() does this already.

The comment above *kernel_fpu*() claims that before invoking
__kernel_fpu_begin() preemption should be disabled and that KVM is a
good example of doing it. Well, KVM doesn't do that since commit

  f775b13eedee2 ("x86,kvm: move qemu/guest FPU switching out to vcpu_run")

so it is not an example anymore.

With EFI gone as the last user of __kernel_fpu_{begin|end}(), both can
be made static and not exported anymore.

Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Signed-off-by: Borislav Petkov <bp@suse.de>
Reviewed-by: Rik van Riel <riel@surriel.com>
Cc: "H. Peter Anvin" <hpa@zytor.com>
Cc: "Jason A. Donenfeld" <Jason@zx2c4.com>
Cc: Andy Lutomirski <luto@kernel.org>
Cc: Ard Biesheuvel <ard.biesheuvel@linaro.org>
Cc: Dave Hansen <dave.hansen@linux.intel.com>
Cc: Ingo Molnar <mingo@redhat.com>
Cc: Nicolai Stange <nstange@suse.de>
Cc: Paolo Bonzini <pbonzini@redhat.com>
Cc: Radim Krčmář <rkrcmar@redhat.com>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: kvm ML <kvm@vger.kernel.org>
Cc: linux-efi <linux-efi@vger.kernel.org>
Cc: x86-ml <x86@kernel.org>
Link: https://lkml.kernel.org/r/20181129150210.2k4mawt37ow6c2vq@linutronix.de
---
 arch/x86/include/asm/efi.h     |  6 ++----
 arch/x86/include/asm/fpu/api.h | 15 +++++----------
 arch/x86/kernel/fpu/core.c     |  6 ++----
 3 files changed, 9 insertions(+), 18 deletions(-)

diff --git a/arch/x86/include/asm/efi.h b/arch/x86/include/asm/efi.h
index eea40d52ca78..45864898f7e5 100644
--- a/arch/x86/include/asm/efi.h
+++ b/arch/x86/include/asm/efi.h
@@ -82,8 +82,7 @@ struct efi_scratch {
 #define arch_efi_call_virt_setup()					\
 ({									\
 	efi_sync_low_kernel_mappings();					\
-	preempt_disable();						\
-	__kernel_fpu_begin();						\
+	kernel_fpu_begin();						\
 	firmware_restrict_branch_speculation_start();			\
 									\
 	if (!efi_enabled(EFI_OLD_MEMMAP))				\
@@ -99,8 +98,7 @@ struct efi_scratch {
 		efi_switch_mm(efi_scratch.prev_mm);			\
 									\
 	firmware_restrict_branch_speculation_end();			\
-	__kernel_fpu_end();						\
-	preempt_enable();						\
+	kernel_fpu_end();						\
 })
 
 extern void __iomem *__init efi_ioremap(unsigned long addr, unsigned long size,
diff --git a/arch/x86/include/asm/fpu/api.h b/arch/x86/include/asm/fpu/api.h
index a9caac9d4a72..b56d504af654 100644
--- a/arch/x86/include/asm/fpu/api.h
+++ b/arch/x86/include/asm/fpu/api.h
@@ -12,17 +12,12 @@
 #define _ASM_X86_FPU_API_H
 
 /*
- * Careful: __kernel_fpu_begin/end() must be called with preempt disabled
- * and they don't touch the preempt state on their own.
- * If you enable preemption after __kernel_fpu_begin(), preempt notifier
- * should call the __kernel_fpu_end() to prevent the kernel/user FPU
- * state from getting corrupted. KVM for example uses this model.
- *
- * All other cases use kernel_fpu_begin/end() which disable preemption
- * during kernel FPU usage.
+ * Use kernel_fpu_begin/end() if you intend to use FPU in kernel context. It
+ * disables preemption so be careful if you intend to use it for long periods
+ * of time.
+ * If you intend to use the FPU in softirq you need to check first with
+ * irq_fpu_usable() if it is possible.
  */
-extern void __kernel_fpu_begin(void);
-extern void __kernel_fpu_end(void);
 extern void kernel_fpu_begin(void);
 extern void kernel_fpu_end(void);
 extern bool irq_fpu_usable(void);
diff --git a/arch/x86/kernel/fpu/core.c b/arch/x86/kernel/fpu/core.c
index 2ea85b32421a..2e5003fef51a 100644
--- a/arch/x86/kernel/fpu/core.c
+++ b/arch/x86/kernel/fpu/core.c
@@ -93,7 +93,7 @@ bool irq_fpu_usable(void)
 }
 EXPORT_SYMBOL(irq_fpu_usable);
 
-void __kernel_fpu_begin(void)
+static void __kernel_fpu_begin(void)
 {
 	struct fpu *fpu = &current->thread.fpu;
 
@@ -111,9 +111,8 @@ void __kernel_fpu_begin(void)
 		__cpu_invalidate_fpregs_state();
 	}
 }
-EXPORT_SYMBOL(__kernel_fpu_begin);
 
-void __kernel_fpu_end(void)
+static void __kernel_fpu_end(void)
 {
 	struct fpu *fpu = &current->thread.fpu;
 
@@ -122,7 +121,6 @@ void __kernel_fpu_end(void)
 
 	kernel_fpu_enable();
 }
-EXPORT_SYMBOL(__kernel_fpu_end);
 
 void kernel_fpu_begin(void)
 {
