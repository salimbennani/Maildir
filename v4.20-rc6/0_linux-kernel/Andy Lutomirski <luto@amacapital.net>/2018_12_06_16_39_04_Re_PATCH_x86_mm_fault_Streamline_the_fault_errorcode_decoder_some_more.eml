Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:50:21 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 1934258042F;
	Thu,  6 Dec 2018 08:39:13 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga007-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 08:39:12 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AAco2VxO8NUHKI1ZUUOEl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KPn4o8bcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRtpeWCNcDI28?=
 =?us-ascii?q?aIUADeQPM+lboYnzuVUOtgO+CAu3CePz0z9Ig2P63a0m3+kjFwzNwQwuH8gJsH?=
 =?us-ascii?q?TRtNj4KKESXv21zaLVyzvDcu9W2TD46IjJaBAhuvKMXbNtesfWzUkvCh/FjlKL?=
 =?us-ascii?q?pIP/OjOazPgCvHKD7+phSeKgkWonpxt3ojex2schk4/EjZ8WxFDc7Sh13po5KN?=
 =?us-ascii?q?miREJmb9OoDoFcuzyZOodqWM8vQmNltD4kxrAHpZK3YC0HxIk7yxLCd/CKdpOH?=
 =?us-ascii?q?7g79WOmPJDp1gGxpdbC+ihu39UWs1+3xWtWx3VlXrSdJj9vBu3UN2hDO8MeIV/?=
 =?us-ascii?q?5w80ai1DmVygze7PxPL1oumqrBMZEhx6Y9lpoNvkTHGS/7gFv2jKCIeUU+4OSo?=
 =?us-ascii?q?6ProYq/gppCCM494kAb+Mr4hmsCnAOQ4NBYBX3SD9OiiyLHu+Vf1TKhEg/EoiK?=
 =?us-ascii?q?XVrZPXKdgBqqO4AQJZyoMj5Ay+Dzei3tQYh34HLFdddRKDjojpPUzOIf/hAfe8?=
 =?us-ascii?q?nVusijFryO7CPrH4BZXMIH7Dn6n7fbtm9U5cxxQ8zcpF65JXFL4BOvTzVVH1tN?=
 =?us-ascii?q?DCCR85KQO0z/79CNphzoMeRX6PAqiBPaPWsF+I5fwgL/ODZY8Iozv9L/kl5/jz?=
 =?us-ascii?q?jX42g1MdfK+p3YcJZ3C8BPhpP0KZYX/0iNcbDWgKphY+TPDtiFCaUT5cfXeyX7?=
 =?us-ascii?q?4m6TE8Eo6mDZrDSZqrgLyOxyq7GpxWZmZbClGDC3vodoOEW+sSZyKWOMNujjsE?=
 =?us-ascii?q?Vb25QY87yR6urBP6y6ZgLufM+C0Ysozs2MJ25+3UkxEy8zt0At+Z02GMSWF0g2?=
 =?us-ascii?q?wJSyU33KB5vUxy1FOD3bJkjPxfENxZ/+lJXRsiNZ7A0+x6DMj/VRjafteJT1am?=
 =?us-ascii?q?Qc+qASsrQdIz2NIOZ0d9G9O/jhHMxSaqArkVl6CVC5ww6K7Tw3/xJ8NlwXbcyK?=
 =?us-ascii?q?Yhl0UmQtdINWC+ha5w7Q7TC5TNk0WYjamqc6sc0TXJ9GeCy2qOoU5ZXBRxUaXD?=
 =?us-ascii?q?QXAQeE/Woc7l6UPFSr+kEa4nPRdZyc6eNqtKbcXkgkhcS/f9JtvSeWKxlH22BR?=
 =?us-ascii?q?aT2LyMao3me2Ee3CXYDEgJiAQT/XeANQgjCSatuWPeDDpyFV3xZ0Pg6/VxqHS+?=
 =?us-ascii?q?TkUs1QGFc1Vh16ap+h4SnfGTVukc3qwatys7qzV7BlC938nIBNqGvAdheKRcYd?=
 =?us-ascii?q?Ug4FZIz27Ztgp9PoC+IKBmnFIRbwN3v0b23RVtFopAidQqrG8tzAdqNaKY0VZB?=
 =?us-ascii?q?dzSE3ZDwOrzbMHXy8Aqoa67M3lHe0dCW+qgU5fQ8qlXjuhypF0U4/3Vm1dlVz2?=
 =?us-ascii?q?WT5pHQAAUOVpLxV1499wJmqLHCfik9+4TU2GV2PqmwrDDD1MwmBes/xhm7YtdQ?=
 =?us-ascii?q?LbmLFAnxE80dGcijM+gqm1mvbhIZM+Fe7q80P8W6d/SY3K6nJvpvnDWjjW5f+o?=
 =?us-ascii?q?ByzlqM9zZgSu7Px5sEw+yY0hGbWDvmjVahstr4mYZLZTwJGmq/yC7kBJNeZ6Fo?=
 =?us-ascii?q?fIYLD3uuLNOzxtlkm5HtXHtY/ka5B1wawM+pZQaSb1vl0A1K1EQYvWaomTGlwD?=
 =?us-ascii?q?xziT0pqLSQ3DbPw+j7aBUIIGpLS3R8glf2Joi0icsXXEypbwgviRuk6lz2x6ld?=
 =?us-ascii?q?pKRjMWbTRV1EcDTxL2FnSqGwrKaNY9ZT6JM0tiVaSOS9YVGARr/9uRcayD7jH2?=
 =?us-ascii?q?1FyTA/djGqvIj5nhNghGKcKnZzsGTWecVqyRjD49zcQOZb3iAaSylglTnXGl+8?=
 =?us-ascii?q?MsGr/dqOjZfDseO+V2W7Wp1IaybrzoCAtCq95WJ0Bx2yhPSzmtzhEQgn3i73zd?=
 =?us-ascii?q?hqVSPUrBniZonnzbi1MeVifkNwHl/z99J6Gp1ikos3nJwR2WIVhpKP8XoFkGfz?=
 =?us-ascii?q?N85W2ab/bHoLWD4KzMTZ4Anj2E1/MH2Jw5j1WWmawstkf9O6eH8Z2joh78BWD6?=
 =?us-ascii?q?eZ9L9EkjF0olairQLRfOJynjESyfY17H4agucJuBcizymHA7ASG1VYMjLolxiS?=
 =?us-ascii?q?89++q6BXbn61cbeszEp+gcyhDLaarwFZWXb5eY0tETV+78phK1LMzGP86pv/d9?=
 =?us-ascii?q?bOd9ITuQaZkxPBj+hTNZIwmeAGhSthOWLho3Ilz/Q3ggBp3ZG/pIKHMXli/Lql?=
 =?us-ascii?q?Ah5EMT34f98T+jbojapEn8eZxYavHoh6GjUQXZvlVvaoEDMUtfT6OAeCCjw8qn?=
 =?us-ascii?q?GHGbXBGQ+T8ltpr3XKE5qzLXGYOGEZzcl+RBmaPEFQmxobXDI+np4kDAyqwNHh?=
 =?us-ascii?q?fVx95jAQ4F74txRNxvhpNxn5TmfQugOoZi0oR5iYKRpc9htC6FvNMcyC8uJzGD?=
 =?us-ascii?q?lV/p+7owyINGObfB5EDX0TVkyHGlDjPaSu5d/a/OiDHee+K/rOYbOTqe1RTfuI?=
 =?us-ascii?q?xJSv0pd48DaILMmAIn5iD/gj0EpZQX95A9jZmykISyEPlyPNaNObpA6h+iJtqM?=
 =?us-ascii?q?Cz6u/rWAXp5YuAELZSNdRv+xargaaMLeKQhSB5KSpG2ZMI33PH1L8f3FsKgSF0?=
 =?us-ascii?q?azatCagAtTLKTK/Imq9YER8bayBwNMtJ9a483RNNOcnUitzrzL54k+U1BkxBVV?=
 =?us-ascii?q?zgnMGpeMMLL3u8NFPBGEaEKrCGKSfXzMHwZKO2UadQg/lMtx2spTabFFfuMS6e?=
 =?us-ascii?q?lzbyTRCgL+FNgDufPBxfo4y9dhdtCW7+TNPpcBG7Mdl3jSEozr0wnH/FKWkcMT?=
 =?us-ascii?q?1keUNXsrKQ9T9Ygul4G2FZ8nplLOyElzyF4OXCNpkWseVkAiJvmuJe4XQ6zaZV?=
 =?us-ascii?q?7S5eSPx0nivSssBho1W8nuaTzTpnVQJEqixXi4KToUViJaLZ+4FAWHne+hIN6G?=
 =?us-ascii?q?SQCxISqNpkCt3goaZQytfUmaL3KTdC9c/U/MQGC8jVLsKHLGQuMR7zFDHICwsF?=
 =?us-ascii?q?SG3jCWaKvEFUlrm59meUtYQ9spjhgoEJTPcPT1E8ELUYTE9lBt0ZPJBvXj4+ir?=
 =?us-ascii?q?mdpM8O+Xe66hLWQZMJkIrAU6e7B/n+YBKEkb5BZgETwrKweYAOKorT0klrYVBi?=
 =?us-ascii?q?nZjDHwzWUMwb8X4pVRM9vEgYqCs2dWY0wU+wL1r1uHI=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AEAADtSAlch0O0hNFjGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUQYBAQELAYEwgjsng3qIGYwOUAEBBoEQJRRoiCSOLoEkA0wSAQEYEwG?=
 =?us-ascii?q?EQCKCdSI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmEBAQEBAgEBAiAdA?=
 =?us-ascii?q?QE3AQQBCQEBChgCAiYCAgMxAQUBHAYTBYMcgXUFCAEEmjw8ih1wgS+CdgEBBYc?=
 =?us-ascii?q?jCBJ5ixQXeIEHgREnDBOCFzWETTSDBDGCJosmhQ+QLAmRXoFchRWCcTaHHiyVX?=
 =?us-ascii?q?IJdAgQCBAUCBQ8hgSWCDXsKZQGCQT6BXQwXg0qKdB8yAYEEAQEhihkBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AEAADtSAlch0O0hNFjGwEBAQEDAQEBBwMBAQGBUQYBAQE?=
 =?us-ascii?q?LAYEwgjsng3qIGYwOUAEBBoEQJRRoiCSOLoEkA0wSAQEYEwGEQCKCdSI0CQ0BA?=
 =?us-ascii?q?wEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmEBAQEBAgEBAiAdAQE3AQQBCQEBChg?=
 =?us-ascii?q?CAiYCAgMxAQUBHAYTBYMcgXUFCAEEmjw8ih1wgS+CdgEBBYcjCBJ5ixQXeIEHg?=
 =?us-ascii?q?REnDBOCFzWETTSDBDGCJosmhQ+QLAmRXoFchRWCcTaHHiyVXIJdAgQCBAUCBQ8?=
 =?us-ascii?q?hgSWCDXsKZQGCQT6BXQwXg0qKdB8yAYEEAQEhihkBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,323,1539673200"; 
   d="scan'208";a="55212893"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 06 Dec 2018 08:39:11 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726041AbeLFQjI (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 6 Dec 2018 11:39:08 -0500
Received: from mail-pf1-f194.google.com ([209.85.210.194]:42600 "EHLO
        mail-pf1-f194.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725889AbeLFQjI (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 6 Dec 2018 11:39:08 -0500
Received: by mail-pf1-f194.google.com with SMTP id 64so429205pfr.9
        for <linux-kernel@vger.kernel.org>; Thu, 06 Dec 2018 08:39:07 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=amacapital-net.20150623.gappssmtp.com; s=20150623;
        h=mime-version:subject:from:in-reply-to:date:cc
         :content-transfer-encoding:message-id:references:to;
        bh=udiQJJcn4nE0aVYzQACeHraPTDeU/ZbLmxjcFCIsdtM=;
        b=Nsy20nm6153G7YUz0rr0KD2Yhb/Pzj8ckxS0Ci8R6y4NnS7hDj+JQ3fbyFmMcLtbsX
         LKdDxjx8tn/0CNdvoLVofibBFQ+dRi5RrA+KtPYYdfYwzyWoo7FVDQ9QnUUiT7b46p27
         rCc0coGRZEX3vPX6N0hUXnHvbAt/xSPJi0QW/wMKy+7BzZOL7xXl1Teu3oyFqswlQSC9
         BMP6Cb3a3Uo7rtJW6UKmzB0vsaXDo24nSPkOUwNQu8iOHMU+ksbKW8UHxORLUaNQtc3p
         RwVrBlYIexFL8s1VcESNyrzQkmlfF7eNCvw2WwUnwXnYxZpNqfjlOAQLr/BbYRsDWeuE
         Ruwg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:subject:from:in-reply-to:date:cc
         :content-transfer-encoding:message-id:references:to;
        bh=udiQJJcn4nE0aVYzQACeHraPTDeU/ZbLmxjcFCIsdtM=;
        b=SINEf4tJGkLCQbn4Y4YIB3SFPOpZdg4zqnHVXEgeAjFMbCFqIxHX9k4/fiO3OU4MQD
         OlP8J5JLuiyl4OeqF6g2gkvDQXbzfaQBqizC4uuWU7jUAM5UEKGrtJ1RT7e17E0ik9I7
         uBhFkRF1adViDKkVFR+vxHQpySCcFvf5zuUpOBPLKi56YSIM7N+2T2YN99HfYXNZGCmc
         XQrYWcFJD65ptjpkfapetA8Mx8qN8dSrVNoiZWsM8yUvUeu7BXGvhwrOcXPN6cPkx7JT
         2u3+V99T8I1IsxiymxYHzFXOxNdKjNSuf3X8R3azMW8LGcXnnFcOmEb39LsoLjixbsPb
         SkzQ==
X-Gm-Message-State: AA+aEWa0U7BEe+UPCHmqreWMNutYSkPgIUM4cGEhqvsB6E6xjlyJUlt2
        NDkW7mXTH1JhNtvbQtG7alb3eg==
X-Google-Smtp-Source: AFSGD/WMPdmWcPib7+jDtJQfxZBwfW0cHFWbqlCRVGhcDONfO9OPGwBtIxQ+IWmUAB32cDEh44rATQ==
X-Received: by 2002:a65:4b82:: with SMTP id t2mr23571011pgq.189.1544114347080;
        Thu, 06 Dec 2018 08:39:07 -0800 (PST)
Received: from ?IPv6:2600:1010:b02e:9276:9150:d817:51ad:68a1? ([2600:1010:b02e:9276:9150:d817:51ad:68a1])
        by smtp.gmail.com with ESMTPSA id d202sm1207715pfd.58.2018.12.06.08.39.05
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Thu, 06 Dec 2018 08:39:05 -0800 (PST)
Content-Type: text/plain;
        charset=utf-8
Mime-Version: 1.0 (1.0)
Subject: Re: [PATCH] x86/mm/fault: Streamline the fault error_code decoder some more
From: Andy Lutomirski <luto@amacapital.net>
X-Mailer: iPhone Mail (16B92)
In-Reply-To: <20181206155336.GC31263@linux.intel.com>
Date: Thu, 6 Dec 2018 08:39:04 -0800
Cc: Ingo Molnar <mingo@kernel.org>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        Andy Lutomirski <luto@kernel.org>,
        Peter Zijlstra <peterz@infradead.org>,
        Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        x86@kernel.org, "H. Peter Anvin" <hpa@zytor.com>,
        linux-kernel@vger.kernel.org,
        Linus Torvalds <torvalds@linux-foundation.org>,
        Rik van Riel <riel@surriel.com>,
        Yu-cheng Yu <yu-cheng.yu@intel.com>
Content-Transfer-Encoding: quoted-printable
Message-Id: <C1F7477E-70B1-4F26-9457-EA6D825501A6@amacapital.net>
References: <20181205163624.1842-1-sean.j.christopherson@intel.com> <20181206073409.GA64887@gmail.com> <20181206155336.GC31263@linux.intel.com>
To: Sean Christopherson <sean.j.christopherson@intel.com>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org




> On Dec 6, 2018, at 7:53 AM, Sean Christopherson <sean.j.christopherson@int=
el.com> wrote:
>=20
>> On Thu, Dec 06, 2018 at 08:34:09AM +0100, Ingo Molnar wrote:
>> I like your '!' idea, but with a further simplification: how about using=20=

>> '-/+' differentiation and a single character and a fixed-length message.
>>=20
>> The new output will be lines of:
>>=20
>>  #PF error code: -P -W -U -S -I -K (0x00)
>>  ...
>>  #PF error code: -P -W +U +S -I -K (0x0c)
>>  ...
>>  #PF error code: +P +W +U +S +I +K (0x3f)
>>=20
>> The symbol abbreviations are pretty self-explanatory:
>>=20
>>  P =3D protection fault   (X86_PF_PROT)
>>  W =3D write access       (X86_PF_WRITE)
>>  U =3D user-mode access   (X86_PF_USER)
>>  S =3D supervisor mode    (X86_PF_RSVD)
>>  I =3D instruction fault  (X86_PF_INSTR)
>>  K =3D keys fault         (X86_PF_PK)
>>=20
>> Misc notes:
>>=20
>> - In principle the new text is now short enough to include it in one of=20=

>>  the existing output lines, further shortening the oops output - but I
>>  havent done that in this patch.
>>=20
>> - Another question is the ordering of the bits: the symbolic display is=20=

>>  actually big endian, while the numeric hexa printout is little endian.
>>=20
>>  I kind of still like it that way, not just because the decoding loop is=20=

>>  more natural, but because the bits are actually ordered by importance:=20=

>>  the PROT bits is more important than the INSTR or the PK bits - and the=20=

>>  more important bits are displayed first.
>=20
> Hmm, my eyes tend to be drawn to the end of the line, e.g. having PROT
> be the last thing makes it stand out more than being buried in the middle
> of the line.  Inverting the ordering between raw and decoded also makes
> it very difficult to correlate the raw value with each bit.
>=20
>> - Only build-tested the patch and looked at the generated assembly, but=20=

>>  it all looks sane enough so will obviously work just fine! ;-)
>=20
> ...
>=20
>> /*
>> - * This helper function transforms the #PF error_code bits into
>> - * "[PROT] [USER]" type of descriptive, almost human-readable error stri=
ngs:
>> + * This maps the somewhat obscure error_code number to symbolic text:
>> + *
>> + * P =3D protection fault   (X86_PF_PROT)
>> + * W =3D write access       (X86_PF_WRITE)
>> + * U =3D user-mode access   (X86_PF_USER)
>> + * S =3D supervisor mode    (X86_PF_RSVD)
>> + * I =3D instruction fault  (X86_PF_INSTR)
>> + * K =3D keys fault         (X86_PF_PK)
>>  */
>> -static void err_str_append(unsigned long error_code, char *buf, unsigned=
 long mask, const char *txt)
>> +static const char error_code_chars[] =3D "PWUSIK";
>> +
>> +/*
>> + * This helper function transforms the #PF error_code bits into " +P -W +=
U -R -I -K"
>> + * type of descriptive, almost human-readable error strings:
>> + */
>> +static void show_error_code(struct pt_regs *regs, unsigned long error_co=
de)
>=20
> No need for @regs.
>=20
>> {
>> -     if (error_code & mask) {
>> -             if (buf[0])
>> -                     strcat(buf, " ");
>> -             strcat(buf, txt);
>> +     unsigned int bit, mask;
>> +     char err_txt[6*3+1]; /* Fixed length of 6 bits decoded plus zero at=
 the end */
>=20
> Assuming the error code bits are contiguous breaks if/when SGX gets added,=

> which uses bit 15.  Oopsing on an SGX fault should be nigh impossible, but=

> it might be nice to be able to reuse show_error_code in other places.
>=20
> Hardcoding "6" is also a bit painful.
>=20
>> +
>> +     /* We go from the X86_PF_PROT bit to the X86_PF_PK bit: */
>> +
>> +     for (bit =3D 0; bit < 6; bit++) {
>> +             unsigned int offset =3D bit*3;
>> +
>> +             err_txt[offset+0] =3D ' ';
>> +
>> +             mask =3D 1 << bit;
>> +             if (error_code & mask)
>> +                     err_txt[offset+1] =3D '+';
>> +             else
>> +                     err_txt[offset+1] =3D '-';
>=20
> To me, using '!' contrasts better when side-by-side with '+'.
>=20
>> +
>> +             err_txt[offset+2] =3D error_code_chars[bit];
>>      }
>> +
>> +     /* Close the string: */
>> +     err_txt[sizeof(err_txt)-1] =3D 0;
>> +
>> +     pr_alert("#PF error code: %s (%02lx)\n", err_txt, error_code);
>=20
> The changelog example has a leading "0x" on the error code.  That being
> said, I actually like it without the "0x".
>=20
> How about printing the raw value before the colon?  Having it at the end
> makes it look like extra noise.  And for me, seeing the raw code first
> (reading left to right) cue's my brain that it's about to decode some
> bits.
>=20
> SGX will also break the two digit printing.  And for whatever reason four
> digits makes me think "this is an error code!".  IIRC the vectoring ucode
> makes a lot of assumptions about the error code being at most 16 bits, so
> in theory four digits is all we'll ever need.
>=20
> E.g.
>=20
> [    0.144247] #PF error code:  +P -W -U -S -I -K (01)
> [    0.144411] #PF error code:  +P +W -U -S -I -K (03)
> [    0.144826] #PF error code:  +P +W +U -S -I -K (07)
> [    0.145252] #PF error code:  +P -W +U -S -I +K (25)
> [    0.145706] #PF error code:  -P +W -U -S -I -K (02)
> [    0.146111] #PF error code:  -P -W +U -S -I -K (04)
> [    0.146521] #PF error code:  -P +W +U -S -I -K (06)
> [    0.146934] #PF error code:  -P -W +U -S +I -K (14)
> [    0.147348] #PF error code:  +P -W -U -S +I -K (11)
> [    0.147767] #PF error code:  -P -W -U -S -I -K (00)

>=20
> vs. (with SGX added as 'G' for testing purposes)
>=20
> [    0.158849] #PF error code(0001):  +P !W !U !S !I !K !G
> [    0.159292] #PF error code(0003):  +P +W !U !S !I !K !G
> [    0.159742] #PF error code(0007):  +P +W +U !S !I !K !G
> [    0.160190] #PF error code(0025):  +P !W +U !S !I +K !G
> [    0.160638] #PF error code(0002):  !P +W !U !S !I !K !G
> [    0.161087] #PF error code(0004):  !P !W +U !S !I !K !G
> [    0.161538] #PF error code(0006):  !P +W +U !S !I !K !G
> [    0.161992] #PF error code(0014):  !P !W +U !S +I !K !G
> [    0.162450] #PF error code(0011):  +P !W !U !S +I !K !G
> [    0.162667] #PF error code(8001):  +P !W !U !S !I !K +G
> [    0.162667] #PF error code(8003):  +P +W !U !S !I !K +G
> [    0.162667] #PF error code(8007):  +P +W +U !S !I !K +G
> [    0.162667] #PF error code(8025):  +P !W +U !S !I +K +G
> [    0.162667] #PF error code(8002):  !P +W !U !S !I !K +G
> [    0.162667] #PF error code(8004):  !P !W +U !S !I !K +G
> [    0.162667] #PF error code(8006):  !P +W +U !S !I !K +G
> [    0.162667] #PF error code(8014):  !P !W +U !S +I !K +G
> [    0.162667] #PF error code(8011):  +P !W !U !S +I !K +G
> [    0.162667] #PF error code(0000):  !P !W !U !S !I !K !G
>=20

Please don=E2=80=99t. The whole reason I added the decoding was to make it e=
asy to read without a cheat sheet. This is incomprehensible without referenc=
e to the code, and I=E2=80=99m familiar with it to begin with.

How about:

#PF error code: 0001 [PROT read kernel]

#PF error code: 0001 [PROT WRITE kernel]

#PF error code: 0001 [PROT read kernel]

#PF error code: 8011 [PROT INSTR kernel SGX]

This has no noise from unset bits except that we add lowercase =E2=80=9Cread=
=E2=80=9D or =E2=80=9Ckernel=E2=80=9D as appropriate.  Even =E2=80=9Ckernel=E2=
=80=9D seems barely necessary.

