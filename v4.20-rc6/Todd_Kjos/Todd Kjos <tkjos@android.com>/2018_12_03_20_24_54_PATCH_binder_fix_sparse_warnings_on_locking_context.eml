Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 04 Dec 2018 08:57:38 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga008.fm.intel.com (fmsmga008.fm.intel.com [10.253.24.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 254A258014B;
	Mon,  3 Dec 2018 12:26:12 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga008-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 03 Dec 2018 12:26:11 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ApG2q2hbsYT1LmqVh7rb/84n/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpcm8Zx7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v6bpgRh31hy?=
 =?us-ascii?q?cdLzM38H/ZhNF+gqxYpxyuqBNxw5XMYIyXL/dyYqDQcMkGSWdbQspdSypMCZ68?=
 =?us-ascii?q?YYsVCOoBOP5VoZf6p1QTsBS1GAyiBOHoyj9Tm3T72rE60+cjEQHBxwwtBMgBsH?=
 =?us-ascii?q?LJo9XvM6cSUP26wLPUwjXEavNbwDHw45XLfBA5ufyAQ658fM7LxUUyGQ7JkE+c?=
 =?us-ascii?q?pZHmMj+JzOgAsmqW4/J+We+ulWIrtwR8riSqy8sxloXFmp4Zx1XZ+Sh43Io5ON?=
 =?us-ascii?q?i1RU9nbtG4DJddsjyVOoRrTsw/RmxnoyI3x78atZO+cigF1ZYqyhjCYPKdaYeI?=
 =?us-ascii?q?+AjsVOOJLDd4mn1lfLW/ig6s8Uiv1OL8TNO40FVUoSpflNnDqHQN2wbU6sidRf?=
 =?us-ascii?q?tx5kah2TCR2ADP8uxIP1w4mK7BJ5I8zLM8iIAfvVnAEyPqgkn7ja2bel0h+uey?=
 =?us-ascii?q?6uTnZrvmpoWbN49xkgz+NqUumsqiAeU3KwQOXHaU+f661LL9+U31WbJKj/Mwkq?=
 =?us-ascii?q?bHqpDXPtobpqGnDA9PyIoj6AiwDy2g0NsGmXkLNlVFeAiIj4TxIVHBPOj4Deuj?=
 =?us-ascii?q?g1SriDprw/HGPr7/DZnXIXnDjazsfbJ8605a1QoywspT55NSCrEdPv3zXlX9u8?=
 =?us-ascii?q?DfDh88Kwa02froCM1h1oMCXmKCGq+ZP7nTsV+U/O0vJPOAZI8IuDnnLfgl6OXj?=
 =?us-ascii?q?jXs4mV8bYKmo0oEbaHG+HvR6PUqZZWDgjcsGEWcPpgA+VvDliEWeUT5PYHa/R6?=
 =?us-ascii?q?A85jYlB468DofDQYatgLqG3CqgGp1WZ2ZGCk2DEHvydoWEXesMZzyWIsN7jjME?=
 =?us-ascii?q?Ur2hQZc71R6yrA/616ZnLu3M9yICrpLj1N915+7JmREo7zN0Dd+Q02WMT2Fyg2?=
 =?us-ascii?q?MJSCU63KF5oUxh1FiD1bJ0jOBfFdxW//lJSBs1NYbAz+xmDND/QgHBcc2PSFq8?=
 =?us-ascii?q?RtWmACs+TtQ+w9IVZ0Z9GtOijg3M3iawAr8VkaCLC4Iw8q7Gw3fxIMN9wW7c1K?=
 =?us-ascii?q?Y9l1kmXtdPNWq+i6Fi7QfTGZDGn1+Zl6mwc6QcxzDC9GGEwWqKv0FYVQpwXL7B?=
 =?us-ascii?q?XXAeYEvWsNv46lnDT7+oFbQoLA9BxdSeJatNb93jlU9GS+v7ONTCf2KxnH+9Cg?=
 =?us-ascii?q?uSybOScoXmYWUd0z/bCEgfjQ8T+22LNQw/BienvmLfAyZiFVPpY0Pw7+Z+rGm3?=
 =?us-ascii?q?QVMzzwGPd0dhzaa6+gYJhfyATPMexq4EuCYkqzVzAFa939LXB8CcpwZ7e6Vce9?=
 =?us-ascii?q?c94FZB1WLWrAF9Op2gL6Z/hl8RaQh3vkXu1wlpBYVEi8QlsHQqzA9qI6KCzFxB?=
 =?us-ascii?q?by+Y3Yz3OrDPMGby+A6gaqHI1VDeytqZ4boP5+kipFXlvwGpEVQi/m5j09lU1X?=
 =?us-ascii?q?uc+5rLABATUZL3TkY46Rx6q6vGbSk64oPezWdsPrWssj/ex9IpA/Moyxa9f9tF?=
 =?us-ascii?q?LKyIDg7zE80ACMioJ+wngFypbhMCPOBP+684JcKmd/2a2KG1OOZshi6pjWNC4I?=
 =?us-ascii?q?plyEKD6zJ8SvLU35YC2/yYxAqHWCvmg1e7r8/3nppIZTcMEWqlyCjoHZJeabd2?=
 =?us-ascii?q?fYkWF2iuOcq3xtNlip7pWn5Y8kOjBlwc1M+ofxqSc0Ly3QlK2UsLpnynnDOyzy?=
 =?us-ascii?q?ZonDExsqqfwCvOzvzidRoGIGJKRHNujUzxIYiylN0aWEmobw40lBqq/0r6xq5b?=
 =?us-ascii?q?pLhhIGnXW0tHYy/2L2R6WKuqqrWCe9JP6I8vsShPUuSze0qaSr3+oxsdyS/jBH?=
 =?us-ascii?q?FRxDM4dzGrvJX2gRp6hXmZLHZyqnrZZM5xyQ3e5NzaWf5ewD4GSDNkhjnQA1i2?=
 =?us-ascii?q?J8Op8smMl5ffruC+UHqsV51Jfins14+Atiq75WtxDB27nvCznMDnEAcg3S/60d?=
 =?us-ascii?q?lqSTvHrBLmbob30KS6NPptflN0C1/k98p6BoZ+n5MzhJ4K2HgWnJWV/Wcdnmf1?=
 =?us-ascii?q?PtVWwqb+bHsLRT4WzN/Z+gnl2Et/Ln2Xw4L1TGmSwsxkZ9OieGMZxjo979xWCK?=
 =?us-ascii?q?eT9LFEmCp1olmiog7Lb/lygCwdyecw534AmO4GphAtziqGD7AWHElYOzHslhuS?=
 =?us-ascii?q?49C/qqVXeHigcbyq2EVimtChCamIohtAV3bhZpciAShw491jMFLL1X3/8IDld8?=
 =?us-ascii?q?PWbdIOrR2UiBbAgvNRKJIwkPoKmCVmNXj8vX0j1+40kxhu0Yums4iALmVn5Li5?=
 =?us-ascii?q?DQJANj3pe8MT/Snggr1EkcaR24CvA49tGjEWXJbzSfKoETQStenoNgqUET08rG?=
 =?us-ascii?q?ubFqTbHQOF9EhmqHfPGYixN36LPHkZ0cliRB6FKUxdmg8UWSs1noUjGgC23sDh?=
 =?us-ascii?q?c1p55jMM5l7+sBRM0fllNx3+UmfZuQepZS04SJmZLBpK8A5C413ZPtCZ7uJ2By?=
 =?us-ascii?q?tY5IGurBSRKmyHYARFFWEIWkuZB1D6I7mh/9/A//KDBuq5KfvObq6DqehfV/eO?=
 =?us-ascii?q?2JKu3ZFq/zeKNsWTIHZiC+c31VZEXXB8A87ZgSkASzQLlyLRaM6WvBe89TN2rs?=
 =?us-ascii?q?C88/TrWRjj5YiVC7tVPtVg5Qq2gbqYN+OLgCZ5KDBY1o4DxHPSybgf2kIShD9q?=
 =?us-ascii?q?dzW3DbsAsivNRrrKmqBLFx4bdz9zNMxQ4q0mwwlCItTbhc3117Jiiv41CkxIVV?=
 =?us-ascii?q?jgmsGveMwLLHuxNFLBBEaXKruGISfHzN3wYaO5UbdQlvlbtwWsuTaHFE/uJiiD?=
 =?us-ascii?q?lzjsVxy1Le5Alj2UPBxAt4G7aRttDWnjTNT7ahy0KtN3jDs2waEqiXPOL2ITLT?=
 =?us-ascii?q?98c0ZVpL2K8SxYmul/G3BG7nd9LeiLgSCZ7+zZKpYQqfRqAyR0mPhc4HQ10LZV?=
 =?us-ascii?q?6CBERPpomCrdtNJuolemkvWRxTpjShZBtjFLhIfY9XllbLna9J5bcXnD+x0J4C?=
 =?us-ascii?q?ObDBFO79R/B9Lsu4hUy97ShKz0NTFO+s7V+s1aANLbbIqOKmQsGRPvFCTTDQdD?=
 =?us-ascii?q?RjmucSnTilJQlNme7HyLo4I2p4aqn4ETTaRfElsvGbdSDkVjAcxHI5ptWD4gua?=
 =?us-ascii?q?CUgdRO5nekqhTVAsJAsdSPU/uZBt3gLzGWibQCbBwNhfv6KokXHo/81khsZ0N8?=
 =?us-ascii?q?lYLGFlGWWspC8QN7aQphnEJB/DBdTGookxb5aQGq+1caE/KumR86zAB5ZLJ+p3?=
 =?us-ascii?q?/X/14rKw+S92MLm04rlIC9jA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AaAABxkAVch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUgYBAQsBgTCCOyeaP5c0gSQDTBIBARgTAYgJIjUIDQEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BCgsJCCkjDII2IoJsAiQLAQ0BATcBBQkCUAMxAQUBIxIFgxyCAgEEmm48ih2Bb?=
 =?us-ascii?q?DOCdgEBBYcmCBKHW4MTgRwXgUA/gRGDbYNvhhKQLJAWCZExCxiJW4dKAYkEj0I?=
 =?us-ascii?q?CBAIEBQIFDyGBJwFpgSEzGggbFYMnghsMF4NKinQfMoEFAQGIDYJNAQE?=
X-IPAS-Result: =?us-ascii?q?A0AaAABxkAVch0O0hNFjHAEBAQQBAQcEAQGBUgYBAQsBgTC?=
 =?us-ascii?q?COyeaP5c0gSQDTBIBARgTAYgJIjUIDQEDAQEBAQEBAgETAQEBCgsJCCkjDII2I?=
 =?us-ascii?q?oJsAiQLAQ0BATcBBQkCUAMxAQUBIxIFgxyCAgEEmm48ih2BbDOCdgEBBYcmCBK?=
 =?us-ascii?q?HW4MTgRwXgUA/gRGDbYNvhhKQLJAWCZExCxiJW4dKAYkEj0ICBAIEBQIFDyGBJ?=
 =?us-ascii?q?wFpgSEzGggbFYMnghsMF4NKinQfMoEFAQGIDYJNAQE?=
X-IronPort-AV: E=Sophos;i="5.56,311,1539673200"; 
   d="scan'208";a="53651731"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 03 Dec 2018 12:26:10 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1725999AbeLCU0I (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 3 Dec 2018 15:26:08 -0500
Received: from mail-pl1-f195.google.com ([209.85.214.195]:37755 "EHLO
        mail-pl1-f195.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725890AbeLCU0I (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 3 Dec 2018 15:26:08 -0500
Received: by mail-pl1-f195.google.com with SMTP id b5so7047892plr.4
        for <linux-kernel@vger.kernel.org>; Mon, 03 Dec 2018 12:26:06 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=android.com; s=20161025;
        h=from:to:cc:subject:date:message-id:mime-version
         :content-transfer-encoding;
        bh=x1XY4BjWxxiH8rvheHX9G+gMIGFbmNlTPOSK/soDkFk=;
        b=PzR+66SGsYkW7zECxtAlN67QRmKw9sBXnsUKZCMHWsDPbOYJjERTwazRrxbIFQc5Fb
         yL5B3EW/c2dzfrIVNCf/jBlotKyzKmKkeguI+kUW62KOBz/mWuxz03WKSvEMR9BKDARO
         qxbgT6OSohUbnEMIQ4yLRps8E49Lsr40Dnrhc1OsMiccZr612lKRgjggTxAt18Dl++/Q
         /IP+/l2Vd6GNd2scLsSUelXK6Ko4BkLCAl1qE3c0/G07SehH5c4KWyS11X7/u0LJlQLZ
         3HXZKps9BPizUHcpPuZTtBqguUctvNAWAhngSOYAPVKUOsqCl5lFrevdq2imScmRm/h2
         eiag==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:mime-version
         :content-transfer-encoding;
        bh=x1XY4BjWxxiH8rvheHX9G+gMIGFbmNlTPOSK/soDkFk=;
        b=s7sXQuhSji+0+ZH8dtEfaO+mpb5vIh9gQ90PMC+q6ddgI2tI7UIfBLvwT1z3bi06bL
         UWkSO1wIOIODVJQOc0aeLnhCLcN7eQBpzwJbBJXht0b9bQ+I5GUMpRj095/WAbm8OIvC
         4mzaWPgfzk5uzzq86KcTBmdQYN2PH5KeGtXtfPF41Dg/eV/vjY6zHh3JWfMPK3BCIGCo
         ES3SrrX4vn8IBAQJjwdCwJ1UT0S7eEJWtzIVLgV51zcdNohLm0a/73cpkb4jd4HjMqF7
         N1BxTZ6QT/73a1NdisTYgqLXcSVwyQZgR/KacsSaBrgWs/rMZuqzs26aDcUHRkUv6HA1
         nrVQ==
X-Gm-Message-State: AA+aEWblyW9pecR5MOXZ4E9GNaCFpMhLdBQT6HYxvNM8KwNHM6SkIFtb
        HvaUxDe8sUJVGFw/FIIo22Fn/r4dmS4QTw==
X-Google-Smtp-Source: AFSGD/U+d1uBkQYXgX5VEO56zZMwhwzNwuuj8+y7Q1PP16c39+cTSYnK3s+8DP2C1OMoTrCf2imsKQ==
X-Received: by 2002:a17:902:bd92:: with SMTP id q18mr17457504pls.167.1543868766214;
        Mon, 03 Dec 2018 12:26:06 -0800 (PST)
Received: from ava-linux2.mtv.corp.google.com ([2620:0:1000:1601:6cc0:d41d:b970:fd7])
        by smtp.googlemail.com with ESMTPSA id q7sm16562725pgp.40.2018.12.03.12.26.05
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Mon, 03 Dec 2018 12:26:05 -0800 (PST)
From: Todd Kjos <tkjos@android.com>
X-Google-Original-From: Todd Kjos <tkjos@google.com>
To: tkjos@google.com, gregkh@linuxfoundation.org, arve@android.com,
        devel@driverdev.osuosl.org, linux-kernel@vger.kernel.org,
        maco@google.com, joel@joelfernandes.org
Cc: kernel-team@android.com
Subject: [PATCH] binder: fix sparse warnings on locking context
Date: Mon,  3 Dec 2018 12:24:54 -0800
Message-Id: <20181203202457.228972-1-tkjos@google.com>
X-Mailer: git-send-email 2.20.0.rc1.387.gf8505762e3-goog
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Add __acquire()/__release() annnotations to fix warnings
in sparse context checking

There is one case where the warning was due to a lack of
a "default:" case in a switch statement where a lock was
being released in each of the cases, so the default
case was added.

Signed-off-by: Todd Kjos <tkjos@google.com>
---
 drivers/android/binder.c       | 43 +++++++++++++++++++++++++++++++++-
 drivers/android/binder_alloc.c |  1 +
 2 files changed, 43 insertions(+), 1 deletion(-)

diff --git a/drivers/android/binder.c b/drivers/android/binder.c
index 9f1000d2a40c7..9f2059d24ae2d 100644
--- a/drivers/android/binder.c
+++ b/drivers/android/binder.c
@@ -660,6 +660,7 @@ struct binder_transaction {
 #define binder_proc_lock(proc) _binder_proc_lock(proc, __LINE__)
 static void
 _binder_proc_lock(struct binder_proc *proc, int line)
+	__acquires(&proc->outer_lock)
 {
 	binder_debug(BINDER_DEBUG_SPINLOCKS,
 		     "%s: line=%d\n", __func__, line);
@@ -675,6 +676,7 @@ _binder_proc_lock(struct binder_proc *proc, int line)
 #define binder_proc_unlock(_proc) _binder_proc_unlock(_proc, __LINE__)
 static void
 _binder_proc_unlock(struct binder_proc *proc, int line)
+	__releases(&proc->outer_lock)
 {
 	binder_debug(BINDER_DEBUG_SPINLOCKS,
 		     "%s: line=%d\n", __func__, line);
@@ -690,6 +692,7 @@ _binder_proc_unlock(struct binder_proc *proc, int line)
 #define binder_inner_proc_lock(proc) _binder_inner_proc_lock(proc, __LINE__)
 static void
 _binder_inner_proc_lock(struct binder_proc *proc, int line)
+	__acquires(&proc->inner_lock)
 {
 	binder_debug(BINDER_DEBUG_SPINLOCKS,
 		     "%s: line=%d\n", __func__, line);
@@ -705,6 +708,7 @@ _binder_inner_proc_lock(struct binder_proc *proc, int line)
 #define binder_inner_proc_unlock(proc) _binder_inner_proc_unlock(proc, __LINE__)
 static void
 _binder_inner_proc_unlock(struct binder_proc *proc, int line)
+	__releases(&proc->inner_lock)
 {
 	binder_debug(BINDER_DEBUG_SPINLOCKS,
 		     "%s: line=%d\n", __func__, line);
@@ -720,6 +724,7 @@ _binder_inner_proc_unlock(struct binder_proc *proc, int line)
 #define binder_node_lock(node) _binder_node_lock(node, __LINE__)
 static void
 _binder_node_lock(struct binder_node *node, int line)
+	__acquires(&node->lock)
 {
 	binder_debug(BINDER_DEBUG_SPINLOCKS,
 		     "%s: line=%d\n", __func__, line);
@@ -735,6 +740,7 @@ _binder_node_lock(struct binder_node *node, int line)
 #define binder_node_unlock(node) _binder_node_unlock(node, __LINE__)
 static void
 _binder_node_unlock(struct binder_node *node, int line)
+	__releases(&node->lock)
 {
 	binder_debug(BINDER_DEBUG_SPINLOCKS,
 		     "%s: line=%d\n", __func__, line);
@@ -751,12 +757,16 @@ _binder_node_unlock(struct binder_node *node, int line)
 #define binder_node_inner_lock(node) _binder_node_inner_lock(node, __LINE__)
 static void
 _binder_node_inner_lock(struct binder_node *node, int line)
+	__acquires(&node->lock) __acquires(&node->proc->inner_lock)
 {
 	binder_debug(BINDER_DEBUG_SPINLOCKS,
 		     "%s: line=%d\n", __func__, line);
 	spin_lock(&node->lock);
 	if (node->proc)
 		binder_inner_proc_lock(node->proc);
+	else
+		/* annotation for sparse */
+		__acquire(&node->proc->inner_lock);
 }
 
 /**
@@ -768,6 +778,7 @@ _binder_node_inner_lock(struct binder_node *node, int line)
 #define binder_node_inner_unlock(node) _binder_node_inner_unlock(node, __LINE__)
 static void
 _binder_node_inner_unlock(struct binder_node *node, int line)
+	__releases(&node->lock) __releases(&node->proc->inner_lock)
 {
 	struct binder_proc *proc = node->proc;
 
@@ -775,6 +786,9 @@ _binder_node_inner_unlock(struct binder_node *node, int line)
 		     "%s: line=%d\n", __func__, line);
 	if (proc)
 		binder_inner_proc_unlock(proc);
+	else
+		/* annotation for sparse */
+		__release(&node->proc->inner_lock);
 	spin_unlock(&node->lock);
 }
 
@@ -1384,10 +1398,14 @@ static void binder_dec_node_tmpref(struct binder_node *node)
 	binder_node_inner_lock(node);
 	if (!node->proc)
 		spin_lock(&binder_dead_nodes_lock);
+	else
+		__acquire(&binder_dead_nodes_lock);
 	node->tmp_refs--;
 	BUG_ON(node->tmp_refs < 0);
 	if (!node->proc)
 		spin_unlock(&binder_dead_nodes_lock);
+	else
+		__release(&binder_dead_nodes_lock);
 	/*
 	 * Call binder_dec_node() to check if all refcounts are 0
 	 * and cleanup is needed. Calling with strong=0 and internal=1
@@ -1890,18 +1908,22 @@ static struct binder_thread *binder_get_txn_from(
  */
 static struct binder_thread *binder_get_txn_from_and_acq_inner(
 		struct binder_transaction *t)
+	__acquires(&t->from->proc->inner_lock)
 {
 	struct binder_thread *from;
 
 	from = binder_get_txn_from(t);
-	if (!from)
+	if (!from) {
+		__acquire(&from->proc->inner_lock);
 		return NULL;
+	}
 	binder_inner_proc_lock(from->proc);
 	if (t->from) {
 		BUG_ON(from != t->from);
 		return from;
 	}
 	binder_inner_proc_unlock(from->proc);
+	__acquire(&from->proc->inner_lock);
 	binder_thread_dec_tmpref(from);
 	return NULL;
 }
@@ -1973,6 +1995,8 @@ static void binder_send_failed_reply(struct binder_transaction *t,
 			binder_thread_dec_tmpref(target_thread);
 			binder_free_transaction(t);
 			return;
+		} else {
+			__release(&target_thread->proc->inner_lock);
 		}
 		next = t->from_parent;
 
@@ -2394,11 +2418,15 @@ static int binder_translate_handle(struct flat_binder_object *fp,
 		fp->cookie = node->cookie;
 		if (node->proc)
 			binder_inner_proc_lock(node->proc);
+		else
+			__acquire(&node->proc->inner_lock);
 		binder_inc_node_nilocked(node,
 					 fp->hdr.type == BINDER_TYPE_BINDER,
 					 0, NULL);
 		if (node->proc)
 			binder_inner_proc_unlock(node->proc);
+		else
+			__release(&node->proc->inner_lock);
 		trace_binder_transaction_ref_to_node(t, node, &src_rdata);
 		binder_debug(BINDER_DEBUG_TRANSACTION,
 			     "        ref %d desc %d -> node %d u%016llx\n",
@@ -2762,6 +2790,8 @@ static void binder_transaction(struct binder_proc *proc,
 		binder_set_nice(in_reply_to->saved_priority);
 		target_thread = binder_get_txn_from_and_acq_inner(in_reply_to);
 		if (target_thread == NULL) {
+			/* annotation for sparse */
+			__release(&target_thread->proc->inner_lock);
 			return_error = BR_DEAD_REPLY;
 			return_error_line = __LINE__;
 			goto err_dead_binder;
@@ -4164,6 +4194,11 @@ static int binder_thread_read(struct binder_proc *proc,
 			if (cmd == BR_DEAD_BINDER)
 				goto done; /* DEAD_BINDER notifications can cause transactions */
 		} break;
+		default:
+			binder_inner_proc_unlock(proc);
+			pr_err("%d:%d: bad work type %d\n",
+			       proc->pid, thread->pid, w->type);
+			break;
 		}
 
 		if (!t)
@@ -4467,6 +4502,8 @@ static int binder_thread_release(struct binder_proc *proc,
 		spin_lock(&t->lock);
 		if (t->to_thread == thread)
 			send_reply = t;
+	} else {
+		__acquire(&t->lock);
 	}
 	thread->is_dead = true;
 
@@ -4495,7 +4532,11 @@ static int binder_thread_release(struct binder_proc *proc,
 		spin_unlock(&last_t->lock);
 		if (t)
 			spin_lock(&t->lock);
+		else
+			__acquire(&t->lock);
 	}
+	/* annotation for sparse, lock not acquired in last iteration above */
+	__release(&t->lock);
 
 	/*
 	 * If this thread used poll, make sure we remove the waitqueue
diff --git a/drivers/android/binder_alloc.c b/drivers/android/binder_alloc.c
index 030c98f35cca7..022cd80e80cc3 100644
--- a/drivers/android/binder_alloc.c
+++ b/drivers/android/binder_alloc.c
@@ -939,6 +939,7 @@ enum lru_status binder_alloc_free_page(struct list_head *item,
 				       struct list_lru_one *lru,
 				       spinlock_t *lock,
 				       void *cb_arg)
+	__must_hold(lock)
 {
 	struct mm_struct *mm = NULL;
 	struct binder_lru_page *page = container_of(item,
-- 
2.20.0.rc1.387.gf8505762e3-goog

