Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 04 Dec 2018 08:58:15 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id B85D7580375;
	Mon,  3 Dec 2018 13:30:24 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by fmsmga001-1.fm.intel.com with ESMTP; 03 Dec 2018 13:30:23 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AxTvE0RQp9QRBH1hPDcUHwSqcUNpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64YRCAt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZDI2y?=
 =?us-ascii?q?b5UBAekDMuZWsofyqEcBoxS/BQerGOPv0SdIi33t0K0m0ekuDR3K0RY8E98Mtn?=
 =?us-ascii?q?nfsdX7NL0VUeCw1KTGyi/Mb+9W2Tf89ofIbw0qr/+SUrJrd8rRzkkuGB3fjlWL?=
 =?us-ascii?q?tIfoODaV2f4Rs2ib7upvS/+vh3Q6pA5vuTivwMAsi4nXiYIP0VDJ7jt2wIg7Jd?=
 =?us-ascii?q?25VEF7YNmkEIBKuy6GMIt2R9ovTmd1syg0zb0GvIS0fCkMyJk/2RHfZfKHc4mU?=
 =?us-ascii?q?7RLiU+aROi10i25ieLK6gRu57EuuyvXkW8WqzFpHqjBJnsTCu3wTzRDf98uKRu?=
 =?us-ascii?q?dn8kqg2zuDzx3f5+BGLEwuiKbXNpEszqQtmpccr0jPBDL6lUv1gaKQa04q4PKn?=
 =?us-ascii?q?6/79bbXjvpKcN5F7igX5Mqk2hMy/Dvo3MhIUU2iY5+u8zrvj8lP9QLlQif02iK?=
 =?us-ascii?q?bZvIjbJcQduKG5HxdY3pg/5xu7FTuqzdoVkWcdIF5Yex+Lk5LlNlDMLfzgCPew?=
 =?us-ascii?q?mVWskDNlx/DcOb3hB43ALnzCkLfnYLZ85FdQyAktwtBF4ZJbFLUBLOv0Wk7/st?=
 =?us-ascii?q?zXEAU5Pheqw+boFtp9zJkSWWGRDa+DNqPdr1uI6vgoI+mWa48ZoCz9JOQ95/7y?=
 =?us-ascii?q?kX85nkcQfa2o3ZsUdn+0BPtnI1iCbHrog9cBF3oKvwUkQOzrjl2CTSBcZ3KoU6?=
 =?us-ascii?q?0g4TE7DZqsDZ3fSYC1nLyBwCC7E4VWZm9cC1CMDW3nd4KeV/cMdSKdOMlhkjMf?=
 =?us-ascii?q?WLilSo8h0wyutQDgx7pmKOrU5jMXtZb52Ndp4O3TkAk49SZoAMSFz2GNU2Z0k3?=
 =?us-ascii?q?sKRz8xwq9zu099ylCF0ah+hPxVDthT5/JPUgcnOp/Q1e16C9buWg3feteFUkqp?=
 =?us-ascii?q?QtKjATspVNI+38cOY1phG9Wllh3MxTGqA78Sl7yIHpA06LjT33rqKsZ5ynbG0r?=
 =?us-ascii?q?QhjlY8TstOM22mmrBw9wzJC4HVlEWZkr6gdb4A0y7V6GeD0W2OsVlbUAFqV6XJ?=
 =?us-ascii?q?R3QfZkrMotT/6UPPVLuuCbUhMgtcxs+OMKpKatv1jVpYQPfvIsjRY2W0m22oHx?=
 =?us-ascii?q?aH2quMbJb2e2UaxCjSFVILkx4N8nqcNQgxHCGho3nAAzxoEl7vZ0Ds8ex6qH6g?=
 =?us-ascii?q?Sk80zgeKb1Bu1rav+x4Vg+CcRO0X3r4epCghrDB0Fk6n393KE9qAuxZhfKJEbN?=
 =?us-ascii?q?wg+lhHy3zWuxZ9PpO6KaBinUARcwJsskPq1hV3DJhAkMcwoHMrygpyNbyX0Fdb?=
 =?us-ascii?q?ezyE2pDwP6XdKnPu8xC3d67Wxlbe3c6K+qcO7fQ4rEnjvAGpF0Y473Vryd5V02?=
 =?us-ascii?q?GY5pXLCgoSXon8UkI29xh8urHbbTMx54LS1X1wL6a0tiXO1M4uBOsg0hygZctQ?=
 =?us-ascii?q?MLuYFA/uFM0XH9KhKOg0lFmmcB0FPPpe+7UpP8y7bfSG3q2rPOF+nD+9iWRH4Y?=
 =?us-ascii?q?Z90l+D9iZmS+7I2YoFzO+c3gedSzj8i1KhuNjtmY9YfTESAna/yS/8CY9Re61+?=
 =?us-ascii?q?Z5oEBX2vIs233Np+gZHtVmVc9F6iAVMGxcCodQCTb1z7wQ1fy0AXrWa7liu/yj?=
 =?us-ascii?q?x+iyspobaH3CzS3+TicwIKOnRKRGZ+l1jsO5W7j9cAUEiucQcpjhql6V/myKdB?=
 =?us-ascii?q?oKRwMnfcQV1PfyjwNGxiVqqwtryfY89A8p8osCNXUPiiblCeULLyvxwa0yb7FW?=
 =?us-ascii?q?tE2D87by2quon+nxFiiGOdLWx/rXrDdcFr2Bff4sfRRfpQ3joAWSl5hiPbBlm6?=
 =?us-ascii?q?P9m149qUk43Pvfy5V2KkTpdTazXkzZuctCun4m1nGR+/kOqpmt3kEgg61jX318?=
 =?us-ascii?q?JwWiXLrxb8Y4/r2Lq8Me98ekloBVn869d1G41kk4swgo0Q1mYehpmP4XUHlmLz?=
 =?us-ascii?q?O81B2a3idHoNWSILw9nN7QnlwkJjKWiFx4D4VnWb2cZhY9i6YmUL2iMy9cxKCa?=
 =?us-ascii?q?GU7KBakitxuFa3sQXRYf1llDcH1fQu8GIag/0OuAc1zSWSGLESEVNYPSzxjRuI?=
 =?us-ascii?q?6d++ob5TZGaud7iwyUV/kcqgDLGEvgFTRnL5do0+Ei9368V1KEjM32Hr6oH4ZN?=
 =?us-ascii?q?nQasoethiVkxfDledZMpwwmeQRhSp7J239p2YqxPAhjRxhxpy6uImHK2Nw/KO2?=
 =?us-ascii?q?GBJYNzv1Z98N9THpl6pRgsGW34W3FJV7BjoLRIfoTe6vED8KqfTnMAOOHCc9q3?=
 =?us-ascii?q?iBH7rfABSf6Fxnr3/UF5CrNneXJGQWzNl4RRmdIlBfjx4QXDkggpE5EQWqztT7?=
 =?us-ascii?q?cEhl/jAR+kL4qhxUx+1zLRb/VWPfpBqyZjcwVZiSNx5W7gBE50fIPs2S9ONzHy?=
 =?us-ascii?q?dE/pK/qAyBMHCUZwNNDWsRQEyLG0jjPqWy5dnH6+WYBPCxL/7QbrWVs+BeS+2E?=
 =?us-ascii?q?xZGy0otl4jaMMN+APmJ5Av0/20pDW215GsvDlzUOTSwXizzCb8qBqBig/S13q9?=
 =?us-ascii?q?i18O73VwL3+YuPF7xSPM1v+hCxnKeDLvOQizx/KTpCzZMMwnnIyLcE0V4WiiFu?=
 =?us-ascii?q?cSStELsauS7MSqLQhrFYDxoBZyxvM8tI6ro23hNRNs7DltP1yrl4g+Y1C1hbVF?=
 =?us-ascii?q?zhmcKpZc0QL2G+LlPHA0mLO6qcJT3W2MH6eqe8SbxWjOVJuBy8ozebE0n/Pjud?=
 =?us-ascii?q?kznlTQygMeZJjCuDJhxRpJm9cgpxCWjkVN/pcAC7P8RtjTIowbw4nHfKNW8HPD?=
 =?us-ascii?q?h4ckNNqKCQ7CxCjvV+HWxB8mRqLe2elymF6OnYL44cseF3DSRsi+Ja/HM6xqNJ?=
 =?us-ascii?q?7CFFQfx5gjfdosRyrFGmjOaPzCFqUB5PqjZNmYKKsl9uOaTf9plcR3nE+AgB4n?=
 =?us-ascii?q?mXCxQPv9FlEMHgu7hMytjTk6L+MDdD/MjS/csZBsjULtqIMXshMRXzHj7UAxAI?=
 =?us-ascii?q?TTqqNWHZmkxcn+ue9nyTrpgmtJfsnIACRaNcVFwwRbsmDRFfHdcCaLl6WjApi/?=
 =?us-ascii?q?bPgMcM5HOlhB3QTs4cuYrIAKG8G/LqfROQkblFagZA7b7jK4MCO5fgkxhnY0V6?=
 =?us-ascii?q?nYnXXUbdRtZKsyB7dSc5rktM+3l5VSs43EezOVDl22MaCfPhxk1+sQB5e+l4sW?=
 =?us-ascii?q?60u1o=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AGAQD0nwVch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBZYExJQWBD4ECJwqDb4h3jRYlFJknLAcMAYgJIjgSAQMBAQEBAQECARMBAQE?=
 =?us-ascii?q?KCwkIKSMMgjYkAYJiAQIDAQIgHQEBEyQBBQkBAQEBCA4KAgINGQICA1QCBBMFF?=
 =?us-ascii?q?IMIAYIBAQSlSHCBL4J2AQEFhyYIgQuLEYFXP4FEgl+EW4MqgleJYIFBhFU2kBY?=
 =?us-ascii?q?HAoIfBI8xgVuFEYo6mhM3gXZNI1CCbAmCEjVtAQKCSIpxVIECAwEBIROHWoEtA?=
 =?us-ascii?q?YEeAQE?=
X-IPAS-Result: =?us-ascii?q?A0AGAQD0nwVch0O0hNFjHAEBAQQBAQcEAQGBZYExJQWBD4E?=
 =?us-ascii?q?CJwqDb4h3jRYlFJknLAcMAYgJIjgSAQMBAQEBAQECARMBAQEKCwkIKSMMgjYkA?=
 =?us-ascii?q?YJiAQIDAQIgHQEBEyQBBQkBAQEBCA4KAgINGQICA1QCBBMFFIMIAYIBAQSlSHC?=
 =?us-ascii?q?BL4J2AQEFhyYIgQuLEYFXP4FEgl+EW4MqgleJYIFBhFU2kBYHAoIfBI8xgVuFE?=
 =?us-ascii?q?Yo6mhM3gXZNI1CCbAmCEjVtAQKCSIpxVIECAwEBIROHWoEtAYEeAQE?=
X-IronPort-AV: E=Sophos;i="5.56,311,1539673200"; 
   d="scan'208";a="55910199"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 03 Dec 2018 13:30:21 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1725999AbeLCVaT (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 3 Dec 2018 16:30:19 -0500
Received: from mail.efficios.com ([167.114.142.138]:53832 "EHLO
        mail.efficios.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725908AbeLCVaT (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 3 Dec 2018 16:30:19 -0500
Received: from localhost (ip6-localhost [IPv6:::1])
        by mail.efficios.com (Postfix) with ESMTP id 131C59FD33;
        Mon,  3 Dec 2018 16:30:17 -0500 (EST)
Received: from mail.efficios.com ([IPv6:::1])
        by localhost (mail02.efficios.com [IPv6:::1]) (amavisd-new, port 10032)
        with ESMTP id j3A71C7nC_RR; Mon,  3 Dec 2018 16:30:16 -0500 (EST)
Received: from localhost (ip6-localhost [IPv6:::1])
        by mail.efficios.com (Postfix) with ESMTP id 53C6B9FD2E;
        Mon,  3 Dec 2018 16:30:16 -0500 (EST)
DKIM-Filter: OpenDKIM Filter v2.10.3 mail.efficios.com 53C6B9FD2E
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=efficios.com;
        s=default; t=1543872616;
        bh=S/zAy5VdYr19tTNeV3tbEZU4EWNkeuni842DwoOz69Q=;
        h=Date:From:To:Message-ID:MIME-Version;
        b=Q0Bn3MGiFfr5SbpivR/x/ESVW3kIL1Hx/4m69RjNTGPDpuPqlRA4F4vWKMsSbZPJP
         M7429khUPrI/uiXjuk3GhOk65eYQsJsX+SBWqcAlsaorYbfb9fb6c+OYZx2PNMxZ84
         gS2XQqB1eOVwiNlcMX5d0IBrZUqwmdKJTJs3+2UkKWLB6mqbTbo8XdfgIHEZPtqTfN
         bmhTsorcq1kp08Z/iYxhEk30fqWzLXFh55e1aULOfSuzdK2ocR2ak/nX8eAyfbCb/U
         pGuSKsupjI+T8Q7CqcC+yAtqTTJWWfcTPpmQoVlDqUYS4jO5QO23XLXI6KAt492DhS
         tYfDiGXbBVNOg==
X-Virus-Scanned: amavisd-new at efficios.com
Received: from mail.efficios.com ([IPv6:::1])
        by localhost (mail02.efficios.com [IPv6:::1]) (amavisd-new, port 10026)
        with ESMTP id 6YjoOrBQNURB; Mon,  3 Dec 2018 16:30:16 -0500 (EST)
Received: from mail02.efficios.com (mail02.efficios.com [167.114.142.138])
        by mail.efficios.com (Postfix) with ESMTP id 33E7C9FD25;
        Mon,  3 Dec 2018 16:30:16 -0500 (EST)
Date: Mon, 3 Dec 2018 16:30:16 -0500 (EST)
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
To: Rich Felker <dalias@libc.org>
Cc: Florian Weimer <fweimer@redhat.com>, carlos <carlos@redhat.com>,
        Joseph Myers <joseph@codesourcery.com>,
        Szabolcs Nagy <szabolcs.nagy@arm.com>,
        libc-alpha <libc-alpha@sourceware.org>,
        Thomas Gleixner <tglx@linutronix.de>,
        Ben Maurer <bmaurer@fb.com>,
        Peter Zijlstra <peterz@infradead.org>,
        "Paul E. McKenney" <paulmck@linux.vnet.ibm.com>,
        Boqun Feng <boqun.feng@gmail.com>,
        Will Deacon <will.deacon@arm.com>,
        Dave Watson <davejwatson@fb.com>, Paul Turner <pjt@google.com>,
        linux-kernel <linux-kernel@vger.kernel.org>,
        linux-api <linux-api@vger.kernel.org>
Message-ID: <785966510.18633.1543872616041.JavaMail.zimbra@efficios.com>
In-Reply-To: <2125113706.12987.1543260125953.JavaMail.zimbra@efficios.com>
References: <20181121183936.8176-1-mathieu.desnoyers@efficios.com> <20181123183558.GM23599@brightrain.aerifal.cx> <1758017676.12041.1543007347347.JavaMail.zimbra@efficios.com> <87bm6cqm31.fsf@oldenburg.str.redhat.com> <688718071.12798.1543247469553.JavaMail.zimbra@efficios.com> <874lc3omh5.fsf@oldenburg.str.redhat.com> <20181126171045.GQ23599@brightrain.aerifal.cx> <2125113706.12987.1543260125953.JavaMail.zimbra@efficios.com>
Subject: Re: [RFC PATCH v4 1/5] glibc: Perform rseq(2) registration at nptl
 init and thread creation
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: 7bit
X-Originating-IP: [167.114.142.138]
X-Mailer: Zimbra 8.8.10_GA_3047 (ZimbraWebClient - FF52 (Linux)/8.8.10_GA_3041)
Thread-Topic: glibc: Perform rseq(2) registration at nptl init and thread creation
Thread-Index: Gp6Ud2j0fZ3nhKmGwY2/0Y0DiscpuwTtowJW
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

----- On Nov 26, 2018, at 2:22 PM, Mathieu Desnoyers mathieu.desnoyers@efficios.com wrote:

> ----- On Nov 26, 2018, at 12:10 PM, Rich Felker dalias@libc.org wrote:
> 
>> On Mon, Nov 26, 2018 at 05:03:02PM +0100, Florian Weimer wrote:
>>> * Mathieu Desnoyers:
>>> 
>>> > So let's make __rseq_abi and __rseq_refcount strong symbols then ?
>>> 
>>> Yes, please.  (But I'm still not sure we need the reference counter.)
>> 
>> The reference counter is needed for out-of-libc implementations
>> interacting and using the dtor hack. An in-libc implementation doesn't
>> need to inspect/honor the reference counter, but it does seem to need
>> to indicate that it has a reference, if you want it to be compatible
>> with out-of-libc implementations, so that the out-of-libc one will not
>> unregister the rseq before libc is done with it.
> 
> Let's consider two use-cases here: one (simpler) is use of rseq TLS
> from thread context by out-of-libc implementations. The other is use of
> rseq TLS from signal handler by out-of-libc implementations.
> 
> If we only care about users of rseq from thread context, then libc
> could simply set the refcount value to 1 on thread start,
> and should not care about the value on thread exit. The libc can
> either directly call rseq unregister, or rely on thread calling exit
> to implicitly unregister rseq, which depends on its own TLS life-time
> guarantees. For instance, if the IE-model TLS is valid up until call
> to exit, just calling the exit system call is fine. However, if a libc
> has a window at thread exit during which the kernel can preempt the
> thread with the IE-model TLS area being already reclaimed, then it
> needs to explicitly call rseq unregister before freeing the TLS.
> 
> The second use-case is out-of-libc implementations using rseq from
> signal handler. This one is trickier. First, pthread_key setspecific
> is unfortunately not async-signal-safe. I can't find a good way to
> seamlessly integrate rseq into out-of-libc signal handlers while
> performing lazy registration without races on thread exit. If we
> figure out a way to do this though, we should increment the refcount
> at thread start in libc (rather than just set it to 1) in case a
> signal handler gets nested immediately over the start of the thread
> and registers rseq as well.
> 
> It looks like it's not the only issue I have with calling lttng-ust
> instrumentation from signal handlers, here is the list I have so
> far:
> 
> * glibc global-dynamic TLS variables are not async-signal-safe,
>  and lttng-ust cannot use IE-model TLS because it is meant to be
>  dlopen'd,
> * pthread_setspecific is not async-signal-safe,
> 
> There should be ways to eventually solve those issues, but it would
> be nice if for now the way rseq is implemented in libc does not add
> yet another limitation for signal handlers.

So, after thinking about a bit further, considering that current glibc
do not offer the async-signal-safe APIs required to proceed to touch
global-dynamic TLS variables from signal handlers nor register pthread key
destructors from signal handlers, I will end up needing glibc improvements
to eventually make lttng-ust instrumentation signal-safe.

This means that my main use-case for supporting out-of-libc rseq registration
from signal handlers does not exist today, and will require new glibc APIs
anyway. Therefore, it would make sense to require use of rseq from signal
handlers to depend on rseq registration by glibc at thread start, and limit
the use-case of out-of-libc rseq registration to those that do not nest
within signal handlers.

If we _never_ even want to allow signal handlers to register rseq, we could
set the __rseq_refcount to 1 at thread start in nptl and nptl init. However,
if we want to eventually allow rseq registration from signal handlers in the
future, we may want to consider keeping the __rseq_refcount relaxed atomic
increment at thread start, as long as it does not represent a too big
performance overhead.

For thread exit, we don't care about the __rseq_refcount value at thread exit
and we can unregister rseq unconditionally.

As long as it is not too costly to increment the __rseq_refcount at thread start,
I would be inclined to keep it as an increment rather than setting it to 1, so
we can have more flexibility with respect to future registration of rseq from
signal handlers, even though it is not possible today.

Thoughts ?

Thanks,

Mathieu


-- 
Mathieu Desnoyers
EfficiOS Inc.
http://www.efficios.com
