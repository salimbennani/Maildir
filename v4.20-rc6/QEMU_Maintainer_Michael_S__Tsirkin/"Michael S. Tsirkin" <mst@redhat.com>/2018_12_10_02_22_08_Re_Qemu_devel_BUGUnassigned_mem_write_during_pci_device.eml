Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 10 Dec 2018 18:13:00 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from FMSMGA003.fm.intel.com (fmsmga003.fm.intel.com [10.253.24.29])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 636435804A8
	for <like.xu@linux.intel.com>; Sun,  9 Dec 2018 18:23:27 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by FMSMGA003-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 09 Dec 2018 18:23:27 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3ApeKdlh+x20IfVv9uRHKM819IXTAuvvDOBiVQ1KB2?=
 =?us-ascii?q?1OMcTK2v8tzYMVDF4r011RmVBdWds6oMotGVmpioYXYH75eFvSJKW713fDhBt/?=
 =?us-ascii?q?8rmRc9CtWOE0zxIa2iRSU7GMNfSA0tpCnjYgBaF8nkelLdvGC54yIMFRXjLwp1?=
 =?us-ascii?q?Ifn+FpLPg8it2O2+557ebx9UiDahfLh/MAi4oQLNu8cMnIBsMLwxyhzHontJf+?=
 =?us-ascii?q?RZ22ZlLk+Nkhj/+8m94odt/zxftPw9+cFAV776f7kjQrxDEDsmKWE169b1uhTF?=
 =?us-ascii?q?UACC+2ETUmQSkhpPHgjF8BT3VYr/vyfmquZw3jSRMNboRr4oRzut86ZrSAfpiC?=
 =?us-ascii?q?gZMT457HrXgdF0gK5CvR6tuwBzz4vSbYqINvRxY7ndcMsUS2RBQMhfVCJBDYyg?=
 =?us-ascii?q?YIQSDeUPMvtWr5H/qlUMohayGAehCP/xxT9TnXL2wbQ63v49HQ3awAAtHdQDu2?=
 =?us-ascii?q?nUotXvM6cSVPi4wKfPwzXCc/xW2S3y55bMchs8vP+AR697f9TKyUkuDQPFjVSQ?=
 =?us-ascii?q?qYrrMziI0ekNtnOb7/Z7WOK1lWEotgFxrSKzxss2lobJgYcVx0nC+C5kw4g1Pc?=
 =?us-ascii?q?W1RFBnbdOnCpdcqjyWOohsTs88TWxluDw2xqAEtJKjYiQG1JAqywTCZ/GJbYSE?=
 =?us-ascii?q?+A/vWeWfLDtimn5oe7SyjAuo/0e60O3zTMy03U5KriVbltnMsWgA1xjS6sicVv?=
 =?us-ascii?q?t95V2t2TmJ1wDO8O1EJlo0laXDJ54gxL4/iIYTvFzdEiPqm0j6lrKaelgn9+Sy?=
 =?us-ascii?q?9ejqbLXrqoWBO4J2kg3+N74hms27AeQ2KAgOWG2b9Pyl1LL9+E35XaxGgeAona?=
 =?us-ascii?q?nHrp/aId0XqbW+Aw9I1IYs9wiwDyyh3NQcnHkHL0xKdAiIjoj0I1zOJPH4DfGi?=
 =?us-ascii?q?g1WjijtrxvbGPqH/DZXJNHTMjLDhfbNm5k5azwozy99f55RJCr0bJ/LzQEDxuM?=
 =?us-ascii?q?TCDhAlKwy03/rnCNJl24MaWGKPAbGWPLndsF+V/e8vJ+iMZIkIuDfyMfQl5vju?=
 =?us-ascii?q?jWMnll8ZZ6WmwZwXaHXrVslgOFiTNHrwns8aQyBNugslUPesjlqEXjhOIXGoUO?=
 =?us-ascii?q?U57zA/DYugSoDbWoGqhqfGxSq+A9haa35LDgOxF2z1fdCBUvYIdCXAO8Jkj3kI?=
 =?us-ascii?q?WKasT8o72AizuRTm47xgKOXS52sfr520z8V/5eDYiUQv8ydpBd+WyWCHQjJImT?=
 =?us-ascii?q?YYWi4/2qx4p0M1nkeewKF+j/teGoZ75+5ATQo7c5XbyropJcr1X1eLW9aCSF+r?=
 =?us-ascii?q?Rp2dR3kNVdMrwN4IKQ4pHs6+pgrO0yqjH/kekLndV898yb7Vw3Wkf5U18H3Bzq?=
 =?us-ascii?q?R0ygB+GsY=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AeAACNzQ1cmBHrdtBkGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBVAMBAQELAYEwhlyIeIsugg2ZRBQYFIRAgx0iNwYNAQMBAQEBAQECARM?=
 =?us-ascii?q?BAQEBAQgLCwYbDi+CNgUCAxoBBoJbAQEBAQIBAQIgBB8KKQMCAQECBgEBChgCA?=
 =?us-ascii?q?iIEAgIDATkaBhiDHIF6CAEEpTp8M4ofgQuLFhEGgX+BEYJkLoRbJoMEglcCiTW?=
 =?us-ascii?q?BdIURkDsHAgKRTQIWgVyICjaHIYMChyWPCYFcgXhwFYMogiYXjjsjgTgciXxVg?=
 =?us-ascii?q?XQDAQE?=
X-IPAS-Result: =?us-ascii?q?A0AeAACNzQ1cmBHrdtBkGwEBAQEDAQEBBwMBAQGBVAMBAQE?=
 =?us-ascii?q?LAYEwhlyIeIsugg2ZRBQYFIRAgx0iNwYNAQMBAQEBAQECARMBAQEBAQgLCwYbD?=
 =?us-ascii?q?i+CNgUCAxoBBoJbAQEBAQIBAQIgBB8KKQMCAQECBgEBChgCAiIEAgIDATkaBhi?=
 =?us-ascii?q?DHIF6CAEEpTp8M4ofgQuLFhEGgX+BEYJkLoRbJoMEglcCiTWBdIURkDsHAgKRT?=
 =?us-ascii?q?QIWgVyICjaHIYMChyWPCYFcgXhwFYMogiYXjjsjgTgciXxVgXQDAQE?=
X-IronPort-AV: E=Sophos;i="5.56,336,1539673200"; 
   d="scan'208";a="56190486"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 09 Dec 2018 18:23:26 -0800
Received: from localhost ([::1]:58174 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gWBED-0007pR-ES
	for like.xu@linux.intel.com; Sun, 09 Dec 2018 21:23:25 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:45180)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <mst@redhat.com>) id 1gWBD8-0005lU-Ua
	for qemu-devel@nongnu.org; Sun, 09 Dec 2018 21:22:19 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <mst@redhat.com>) id 1gWBD5-0008O4-7d
	for qemu-devel@nongnu.org; Sun, 09 Dec 2018 21:22:18 -0500
Received: from mx1.redhat.com ([209.132.183.28]:49984)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <mst@redhat.com>) id 1gWBD4-0008NA-Uk
	for qemu-devel@nongnu.org; Sun, 09 Dec 2018 21:22:15 -0500
Received: from smtp.corp.redhat.com (int-mx06.intmail.prod.int.phx2.redhat.com
	[10.5.11.16])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 9794F3082E46;
	Mon, 10 Dec 2018 02:22:12 +0000 (UTC)
Received: from redhat.com (ovpn-120-192.rdu2.redhat.com [10.10.120.192])
	by smtp.corp.redhat.com (Postfix) with ESMTP id 4CE2D5C1B2;
	Mon, 10 Dec 2018 02:22:09 +0000 (UTC)
Date: Sun, 9 Dec 2018 21:22:08 -0500
From: "Michael S. Tsirkin" <mst@redhat.com>
To: xuyandong <xuyandong2@huawei.com>
Message-ID: <20181209211730-mutt-send-email-mst@kernel.org>
References: <7CECC2DFC21538489F72729DF5EFB4D908ABD3A4@dggemm521-mbs.china.huawei.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
In-Reply-To: <7CECC2DFC21538489F72729DF5EFB4D908ABD3A4@dggemm521-mbs.china.huawei.com>
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.16
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.46]);
	Mon, 10 Dec 2018 02:22:12 +0000 (UTC)
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [BUG]Unassigned mem write during pci device
 hot-plug
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: "Huangweidong \(C\)" <weidong.huang@huawei.com>,
	Zhanghailiang <zhang.zhanghailiang@huawei.com>,
	"wangxin \(U\)" <wangxinxin.wang@huawei.com>,
	"qemu-devel@nongnu.org" <qemu-devel@nongnu.org>,
	"marcel@redhat.com" <marcel@redhat.com>,
	Paolo Bonzini <pbonzini@redhat.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Sat, Dec 08, 2018 at 11:58:59AM +0000, xuyandong wrote:
> Hi all,
>=20
> =20
>=20
> In our test, we configured VM with several pci-bridges and a virtio-net=
 nic
> been attached with bus 4,
>=20
> After VM is startup, We ping this nic from host to judge if it is worki=
ng
> normally. Then, we hot add pci devices to this VM with bus 0.
>=20
> We  found the virtio-net NIC in bus 4 is not working (can not connect)
> occasionally, as it kick virtio backend failure with error below:
>=20
>     Unassigned mem write 00000000fc803004 =3D 0x1
>=20
> =20
>=20
> memory-region: pci_bridge_pci
>=20
>   0000000000000000-ffffffffffffffff (prio 0, RW): pci_bridge_pci
>=20
>     00000000fc800000-00000000fc803fff (prio 1, RW): virtio-pci
>=20
>       00000000fc800000-00000000fc800fff (prio 0, RW): virtio-pci-common
>=20
>       00000000fc801000-00000000fc801fff (prio 0, RW): virtio-pci-isr
>=20
>       00000000fc802000-00000000fc802fff (prio 0, RW): virtio-pci-device
>=20
>       00000000fc803000-00000000fc803fff (prio 0, RW): virtio-pci-notify=
  <- io
> mem unassigned
>=20
>       =E2=80=A6
>=20
> =20
>=20
> We caught an exceptional address changing while this problem happened, =
show as
> follow:
>=20
> Before pci_bridge_update_mappings=EF=BC=9A
>=20
>       00000000fc000000-00000000fc1fffff (prio 1, RW): alias pci_bridge_=
pref_mem
> @pci_bridge_pci 00000000fc000000-00000000fc1fffff
>=20
>       00000000fc200000-00000000fc3fffff (prio 1, RW): alias pci_bridge_=
pref_mem
> @pci_bridge_pci 00000000fc200000-00000000fc3fffff
>=20
>       00000000fc400000-00000000fc5fffff (prio 1, RW): alias pci_bridge_=
pref_mem
> @pci_bridge_pci 00000000fc400000-00000000fc5fffff
>=20
>       00000000fc600000-00000000fc7fffff (prio 1, RW): alias pci_bridge_=
pref_mem
> @pci_bridge_pci 00000000fc600000-00000000fc7fffff
>=20
>       00000000fc800000-00000000fc9fffff (prio 1, RW): alias pci_bridge_=
pref_mem
> @pci_bridge_pci 00000000fc800000-00000000fc9fffff <- correct Adress Spc=
e
>=20
>       00000000fca00000-00000000fcbfffff (prio 1, RW): alias pci_bridge_=
pref_mem
> @pci_bridge_pci 00000000fca00000-00000000fcbfffff
>=20
>       00000000fcc00000-00000000fcdfffff (prio 1, RW): alias pci_bridge_=
pref_mem
> @pci_bridge_pci 00000000fcc00000-00000000fcdfffff
>=20
>       00000000fce00000-00000000fcffffff (prio 1, RW): alias pci_bridge_=
pref_mem
> @pci_bridge_pci 00000000fce00000-00000000fcffffff
>=20
> =20
>=20
> After pci_bridge_update_mappings=EF=BC=9A
>=20
>       00000000fda00000-00000000fdbfffff (prio 1, RW): alias pci_bridge_=
mem
> @pci_bridge_pci 00000000fda00000-00000000fdbfffff
>=20
>       00000000fdc00000-00000000fddfffff (prio 1, RW): alias pci_bridge_=
mem
> @pci_bridge_pci 00000000fdc00000-00000000fddfffff
>=20
>       00000000fde00000-00000000fdffffff (prio 1, RW): alias pci_bridge_=
mem
> @pci_bridge_pci 00000000fde00000-00000000fdffffff
>=20
>       00000000fe000000-00000000fe1fffff (prio 1, RW): alias pci_bridge_=
mem
> @pci_bridge_pci 00000000fe000000-00000000fe1fffff
>=20
>       00000000fe200000-00000000fe3fffff (prio 1, RW): alias pci_bridge_=
mem
> @pci_bridge_pci 00000000fe200000-00000000fe3fffff
>=20
>       00000000fe400000-00000000fe5fffff (prio 1, RW): alias pci_bridge_=
mem
> @pci_bridge_pci 00000000fe400000-00000000fe5fffff
>=20
>       00000000fe600000-00000000fe7fffff (prio 1, RW): alias pci_bridge_=
mem
> @pci_bridge_pci 00000000fe600000-00000000fe7fffff
>=20
>       00000000fe800000-00000000fe9fffff (prio 1, RW): alias pci_bridge_=
mem
> @pci_bridge_pci 00000000fe800000-00000000fe9fffff
>=20
>       fffffffffc800000-fffffffffc800000 (prio 1, RW): alias pci_bridge_=
pref_mem
> @pci_bridge_pci fffffffffc800000-fffffffffc800000   <- Exceptional Adre=
ss Space

This one is empty though right?

> =20
>=20
> We have figured out why this address becomes this value,  according to =
pci
> spec,  pci driver can get BAR address size by writing 0xffffffff to
>=20
> the pci register firstly, and then read back the value from this regist=
er.


OK however as you show below the BAR being sized is the BAR
if a bridge. Are you then adding a bridge device by hotplug?



> We didn't handle this value  specially while process pci write in qemu,=
 the
> function call stack is:
>=20
> Pci_bridge_dev_write_config
>=20
> -> pci_bridge_write_config
>=20
> -> pci_default_write_config (we update the config[address] value here t=
o
> fffffffffc800000, which should be 0xfc800000 )
>
> -> pci_bridge_update_mappings
>=20
>                 ->pci_bridge_region_del(br, br->windows);
>=20
> -> pci_bridge_region_init
>=20
>                                                                 ->
> pci_bridge_init_alias (here pci_bridge_get_base, we use the wrong value
> fffffffffc800000)
>=20
>                                                 ->
> memory_region_transaction_commit
>=20
> =20
>=20
> So, as we can see, we use the wrong base address in qemu to update the =
memory
> regions, though, we update the base address to
>=20
> The correct value after pci driver in VM write the original value back,=
 the
> virtio NIC in bus 4 may still sends net packets concurrently with
>=20
> The wrong memory region address.
>=20
> =20
>=20
> We have tried to skip the memory region update action in qemu while det=
ect pci
> write with 0xffffffff value, and it does work, but
>=20
> This seems to be not gently.

For sure. But I'm still puzzled as to why does Linux try to
size the BAR of the bridge while a device behind it is
used.

Can you pls post your QEMU command line?



> =20
>=20
> diff --git a/hw/pci/pci_bridge.c b/hw/pci/pci_bridge.c
>=20
> index b2e50c3..84b405d 100644
>=20
> --- a/hw/pci/pci_bridge.c
>=20
> +++ b/hw/pci/pci_bridge.c
>=20
> @@ -256,7 +256,8 @@ void pci_bridge_write_config(PCIDevice *d,
>=20
>      pci_default_write_config(d, address, val, len);
>=20
> -    if (ranges_overlap(address, len, PCI_COMMAND, 2) ||
>=20
> +    if ( (val !=3D 0xffffffff) &&
>=20
> +        (ranges_overlap(address, len, PCI_COMMAND, 2) ||
>=20
>          /* io base/limit */
>=20
>          ranges_overlap(address, len, PCI_IO_BASE, 2) ||
>=20
> @@ -266,7 +267,7 @@ void pci_bridge_write_config(PCIDevice *d,
>=20
>          ranges_overlap(address, len, PCI_MEMORY_BASE, 20) ||
>=20
>          /* vga enable */
>=20
> -        ranges_overlap(address, len, PCI_BRIDGE_CONTROL, 2)) {
>=20
> +        ranges_overlap(address, len, PCI_BRIDGE_CONTROL, 2))) {
>=20
>          pci_bridge_update_mappings(s);
>=20
>      }
>=20
> =20
>=20
> Thinks,
>=20
> Xu
>=20

