Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:47:54 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga007.fm.intel.com (fmsmga007.fm.intel.com [10.253.24.52])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 1F68F580443;
	Thu,  6 Dec 2018 06:46:53 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by fmsmga007-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 06:46:52 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AV2aV2xzu+CEfUA/XCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e4eLfad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWpPUNhMWSJPAY2y?=
 =?us-ascii?q?aIkAD+QPMulXs4bzqEAOrQO8CAS3GOPiyTFFimPs0KAg0eksFxzN0gw6H9IJtX?=
 =?us-ascii?q?TZtNT7NL0MXuC60aLGyC/Db/RM1jf98YTGcAouoeuQXbJ1a8XRz1QkGgTKjlWK?=
 =?us-ascii?q?t4PlMDCV1uQWvmif7upgU/+vimEpqwF2vzivwNojhZPVhoIUzVDE8z91wIEvJd?=
 =?us-ascii?q?23UUN2Z8OvHphItyyCKYd6XscvT3t1tCs01LEKo4O3cSsWxJg9xhPSaeSLfouG?=
 =?us-ascii?q?7x75V+ucIC10iXFhdb6lmhq+7Uqtx+vhXceuyllKtDBKktzUu3ANyRPT7s+HR+?=
 =?us-ascii?q?Nj/keuxzmPzRrf6uJaLkAuk6rUNZohzqQ3lpoJvkTPBi72mEPog6+Kbkgo5PSk?=
 =?us-ascii?q?5uD9brn7qJKQKZV4hhz9P6gygMCyAOY1PhALX2eB+OS80LPj/Vf+QLVPlvA2lq?=
 =?us-ascii?q?jZsJbHJcUUv6K5ABFa0pwl6xmhCzeqydMYnHcBLF1bYhKKlJbpO17QL/DiF/u/?=
 =?us-ascii?q?gEqjkC1tx//YOr3tGJLNLmLMkLv5Z7Zy91ZcyBYvzdBY/59UDrABIPHtVUPru9?=
 =?us-ascii?q?3YEwQ0Mwi1w+bhFdV82ZkSWWOJAq+FLqzStUWE6f4oI+mJfIUVoiryK+A55/7y?=
 =?us-ascii?q?in80gV8dcrOo3ZsLcn+4Ge5qI0WEYXX2hNcBHnwHvg4/TOzslV2DXiRfZ3e0X6?=
 =?us-ascii?q?Ig+D47DJiqApvERoComLaBxju0HoVKZmBaDVCBCXXod4KaVPsWayKSJclhkjoD?=
 =?us-ascii?q?VbW6T48h1BeutBL1yrZ9L+rU/DEYuozn1NRv++LTkhQy/yRuD8uBy2GNU310nm?=
 =?us-ascii?q?QQSjAsx6B/oUt9ylSZ3ahimfNYF8de5/dIUgc8KJ7dwPZ2C9H0WgLdYNiJTEyq?=
 =?us-ascii?q?TcmhATE0Vtgx2cMBY15hG9W+iRDOxymqDKUTl7CRAJw087jT337+J8tmz3bG1a?=
 =?us-ascii?q?8hj0QpQ8dVNG2mgLJ/+BbXB4LTj0qZkKOqf7wG3CHR7GeD0XaOvEZAXQFtS6rF?=
 =?us-ascii?q?Q24QalHWrdvj4EPCVKGhCbIgPgtFys6CL69KZ8btjVVHQvfjJdvfb3iwm2e2GR?=
 =?us-ascii?q?aH2LeMYJD2dGUa2SXXEFIEnBwL/XaaKQg+AT+srH/EAzxwC13jeUPs/vN4qHOg?=
 =?us-ascii?q?UEA0yRqHb0lg17qz5x4UiuaQS/IV3rIYpighry94E0q639LTE9CAvRZufL1AYd?=
 =?us-ascii?q?Mh51dKzX7Ztw14PpynM6Bihl4ffx5rv0/00BV3EIFAkcksrHMl1wdyLaOY0FVc?=
 =?us-ascii?q?dzKXx5zwO7vXKnXs8xCrcaLZxlbe0NOO8KcV9Ps4s0njvB2uFkc66Xpn18da0n?=
 =?us-ascii?q?SC6ZTKFgYdSo/xXVst+Bh8pLHaZTc96pjQ1X1tN6m0rzDD18goBOsj1havYdNf?=
 =?us-ascii?q?PLmYGw/1Fs0QH9KuJ/Aym1i1chIEO/hf9a4pP8+8a/SKwq+qPOZ6kzKggmRK+4?=
 =?us-ascii?q?R90kOK9yphRe/ExZcFw/eE3gSZUzfwlkuussfymYpcfzEdAnK/yTT4BI5WfqBy?=
 =?us-ascii?q?Z4cLBnu0LM2t29p+gIThW3hG+165BlMKwdOmdgCWb1PgwwJQz0MXoXq8lCu8zj?=
 =?us-ascii?q?x0lSwpr6WF0CzPxeTiaAQIOmpRSGZ+ilfsJJC+j8oGU0iwcwgpiByl6F76xqha?=
 =?us-ascii?q?vqh+L3PfQVxVfyjwNGxiVqqwtryfY89A8p8osCNXUPiiblCeULLyvxwa0yb7FW?=
 =?us-ascii?q?tE2D87by2quon+nxFiimKSNmxzrHnaecF33xvf/8bTRf1S3joHQil3lz/XC0O4?=
 =?us-ascii?q?P9mo+9WUipjCvvq/V2KnSp1cby3rwZmcuyu84G1gGQe/kOyrmt37DQg61jf21t?=
 =?us-ascii?q?lwWiXPthr8YIjr16KhPOJjf0loAkL86sVgFoF/lIswmI8f2XwAipqJ+noHlH/5?=
 =?us-ascii?q?Mc9H1qLmcHoNWTkLzsbW4Af/2U1vNHKJx5/jWXWbzctsfN26YmIQ2iIg4MFGEq?=
 =?us-ascii?q?aU7LpYnSRrplq0tx7eYf94nj0F0/sh9GYag/0VuAoq1iidB7ESHUpCMiD2mRWH?=
 =?us-ascii?q?8cu+rLlJa2a1are/ylB+nd+6AbGGowFcXmv5e5g4ES9x6MV/LEzD0Hnp5o74f9?=
 =?us-ascii?q?nQaMoZtgeInBfYk+hVNJUxm+IWhSpgPGLxp3wkxPQ9jRxzxpG6p4mHJn5p/KK4?=
 =?us-ascii?q?BB5YKzL0a9kS+jHrkaZRgMKW05qzEZVmHzUBRIHoQu6wEDIOqfTnMB6DHyYmpX?=
 =?us-ascii?q?ecHbrfABWT6EN7r3/UF5CrNneXJGQWzNl4RRmdIlBfjx4QXDkggpE5EQWqztT7?=
 =?us-ascii?q?cEhl/jAR+kL4qhxUx+JqLRb/V3nQpByyZjcoUpSfLwdW7gJf50fTK8Oe9fl+Hy?=
 =?us-ascii?q?VZ/p2nsQyMJXaXZwVODWEVREOEA0rvMaWp5dnF6+KYHPaxL+PSYbWSruxTT/eJ?=
 =?us-ascii?q?xZWy0ot/4jaDLMOPMmN5D/083EpDUmt0G8DYmzUJViwWmDjBb8+dpBeg5CJ3qt?=
 =?us-ascii?q?qz/+jsWALq/YGPEaddMc1z+xCqhqeOL+6Qizh4KTZb1ZMMxGXEyLsF3F4VhCFh?=
 =?us-ascii?q?aSOtEakbtSPWSKLQm6lXDwMUai9pNctI6b480RdJOcLBltz10bt4hOYvC1hZTV?=
 =?us-ascii?q?zhht2pZcsSLm6nKVPIH1yLO6qGJDHRx8H3YLixSblRjOVSqh2xtiyXE07lPjSf?=
 =?us-ascii?q?iTbpUwqjPv1LjCGeJBZeop2ycg5xCWj/S9LrcgG7MN5yjTEs3bI4nG/FNW4CPj?=
 =?us-ascii?q?h6aE5NqryQ7SVFgvRwAWBB73xlLfWalCad9eXXNpEWsf5zCCRui+1a+Gg6y6dS?=
 =?us-ascii?q?7CxcRP16gi3Srttvo1GgiuaOyzpnXwBIqjZEn4+LuURiOaPE9phPQ3rE/RQN7X?=
 =?us-ascii?q?mOBBQOvddqFtrvu6UDguTIwabyLipSttHZ580RA+DKJ8+ddnksKxzkHHjTFgRW?=
 =?us-ascii?q?YySsMDTwnUFS2NKI8XSV67gzsITpkZxGHrBBWVM2FtseC0J4DNIFPZF7Vy8llr?=
 =?us-ascii?q?jdi9QHsynt5CLNTdlX68iUHsmZBu/ifXPA1eFJ?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAAAcNQlch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBg2sng3qIGV+LL4INFGiWUhSBYhEYEwGHVyI0CQ0BAwEBAQEBAQI?=
 =?us-ascii?q?BEwEBAQgNCQgpIwyCNiQBgmIDAwECIAQLAQ0BATcBBQkBAR8FAgUhAgIDDEgZB?=
 =?us-ascii?q?YMcggIEAaRzcHwMJ4J2AQEFhyQIgQuGZYMTgRwXgX+BEYJdhR+DG4JXiTeXKgm?=
 =?us-ascii?q?ROyOBXIUVikWZDIFGgg0zGggoCIMnghsMF4hehUA/MoECAwEBIROKBgEB?=
X-IPAS-Result: =?us-ascii?q?A0ANAAAcNQlch0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBg2s?=
 =?us-ascii?q?ng3qIGV+LL4INFGiWUhSBYhEYEwGHVyI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpI?=
 =?us-ascii?q?wyCNiQBgmIDAwECIAQLAQ0BATcBBQkBAR8FAgUhAgIDDEgZBYMcggIEAaRzcHw?=
 =?us-ascii?q?MJ4J2AQEFhyQIgQuGZYMTgRwXgX+BEYJdhR+DG4JXiTeXKgmROyOBXIUVikWZD?=
 =?us-ascii?q?IFGgg0zGggoCIMnghsMF4hehUA/MoECAwEBIROKBgEB?=
X-IronPort-AV: E=Sophos;i="5.56,322,1539673200"; 
   d="scan'208";a="65616910"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 06 Dec 2018 06:46:51 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1731289AbeLFOql (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 6 Dec 2018 09:46:41 -0500
Received: from mail.kernel.org ([198.145.29.99]:51344 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1731276AbeLFOqg (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 6 Dec 2018 09:46:36 -0500
Received: from localhost (5356596B.cm-6-7b.dynamic.ziggo.nl [83.86.89.107])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 6FFDE2082B;
        Thu,  6 Dec 2018 14:46:34 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1544107594;
        bh=Uge0lcBER6o9//sTkmx563DUw09NMBN0olt9ePWvv6s=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=0YYpZrA+sA4VQ5WJcR8YI1r4x+CbKSDQXR2krq5F6iD9EO+iu56BPxNwUdLCFKQRG
         H3BMuo9hlPYm5KAw+Epdw1uMClq5b2D8EpWHcJ3Z5TGQQZq0YGl6I3G1DfJQtYDLl4
         oq+A2ikOXjLAl3jY/zOKfij6ryb27tDUjUY5PXQY=
From: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
To: linux-kernel@vger.kernel.org
Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        stable@vger.kernel.org,
        Ramiro Oliveira <Ramiro.Oliveira@synopsys.com>,
        Philipp Zabel <p.zabel@pengutronix.de>,
        Dinh Nguyen <dinguyen@kernel.org>
Subject: [PATCH 4.9 038/101] reset: make optional functions really optional
Date: Thu,  6 Dec 2018 15:38:37 +0100
Message-Id: <20181206143013.724534909@linuxfoundation.org>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <20181206143011.174892052@linuxfoundation.org>
References: <20181206143011.174892052@linuxfoundation.org>
User-Agent: quilt/0.65
X-stable: review
X-Patchwork-Hint: ignore
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

4.9-stable review patch.  If anyone has any objections, please let me know.

------------------

From: Ramiro Oliveira <Ramiro.Oliveira@synopsys.com>

commit bb475230b8e59a547ab66ac3b02572df21a580e9 upstream.

The *_get_optional_* functions weren't really optional so this patch
makes them really optional.

These *_get_optional_* functions will now return NULL instead of an error
if no matching reset phandle is found in the DT, and all the
reset_control_* functions now accept NULL rstc pointers.

Signed-off-by: Ramiro Oliveira <Ramiro.Oliveira@synopsys.com>
Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
Cc: Dinh Nguyen <dinguyen@kernel.org>
Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>


---
 drivers/reset/core.c  |   48 +++++++++++++++++++++++++++++++++++++-----------
 include/linux/reset.h |   45 ++++++++++++++++++++++++++-------------------
 2 files changed, 63 insertions(+), 30 deletions(-)

--- a/drivers/reset/core.c
+++ b/drivers/reset/core.c
@@ -135,11 +135,16 @@ EXPORT_SYMBOL_GPL(devm_reset_controller_
  * @rstc: reset controller
  *
  * Calling this on a shared reset controller is an error.
+ *
+ * If rstc is NULL it is an optional reset and the function will just
+ * return 0.
  */
 int reset_control_reset(struct reset_control *rstc)
 {
-	if (WARN_ON(IS_ERR_OR_NULL(rstc)) ||
-	    WARN_ON(rstc->shared))
+	if (!rstc)
+		return 0;
+
+	if (WARN_ON(IS_ERR(rstc)))
 		return -EINVAL;
 
 	if (rstc->rcdev->ops->reset)
@@ -159,10 +164,16 @@ EXPORT_SYMBOL_GPL(reset_control_reset);
  *
  * For shared reset controls a driver cannot expect the hw's registers and
  * internal state to be reset, but must be prepared for this to happen.
+ *
+ * If rstc is NULL it is an optional reset and the function will just
+ * return 0.
  */
 int reset_control_assert(struct reset_control *rstc)
 {
-	if (WARN_ON(IS_ERR_OR_NULL(rstc)))
+	if (!rstc)
+		return 0;
+
+	if (WARN_ON(IS_ERR(rstc)))
 		return -EINVAL;
 
 	if (!rstc->rcdev->ops->assert)
@@ -185,10 +196,16 @@ EXPORT_SYMBOL_GPL(reset_control_assert);
  * @rstc: reset controller
  *
  * After calling this function, the reset is guaranteed to be deasserted.
+ *
+ * If rstc is NULL it is an optional reset and the function will just
+ * return 0.
  */
 int reset_control_deassert(struct reset_control *rstc)
 {
-	if (WARN_ON(IS_ERR_OR_NULL(rstc)))
+	if (!rstc)
+		return 0;
+
+	if (WARN_ON(IS_ERR(rstc)))
 		return -EINVAL;
 
 	if (!rstc->rcdev->ops->deassert)
@@ -206,12 +223,15 @@ EXPORT_SYMBOL_GPL(reset_control_deassert
 /**
  * reset_control_status - returns a negative errno if not supported, a
  * positive value if the reset line is asserted, or zero if the reset
- * line is not asserted.
+ * line is not asserted or if the desc is NULL (optional reset).
  * @rstc: reset controller
  */
 int reset_control_status(struct reset_control *rstc)
 {
-	if (WARN_ON(IS_ERR_OR_NULL(rstc)))
+	if (!rstc)
+		return 0;
+
+	if (WARN_ON(IS_ERR(rstc)))
 		return -EINVAL;
 
 	if (rstc->rcdev->ops->status)
@@ -268,7 +288,8 @@ static void __reset_control_put(struct r
 }
 
 struct reset_control *__of_reset_control_get(struct device_node *node,
-				     const char *id, int index, int shared)
+				     const char *id, int index, bool shared,
+				     bool optional)
 {
 	struct reset_control *rstc;
 	struct reset_controller_dev *r, *rcdev;
@@ -282,14 +303,18 @@ struct reset_control *__of_reset_control
 	if (id) {
 		index = of_property_match_string(node,
 						 "reset-names", id);
+		if (index == -EILSEQ)
+			return ERR_PTR(index);
 		if (index < 0)
-			return ERR_PTR(-ENOENT);
+			return optional ? NULL : ERR_PTR(-ENOENT);
 	}
 
 	ret = of_parse_phandle_with_args(node, "resets", "#reset-cells",
 					 index, &args);
-	if (ret)
+	if (ret == -EINVAL)
 		return ERR_PTR(ret);
+	if (ret)
+		return optional ? NULL : ERR_PTR(ret);
 
 	mutex_lock(&reset_list_mutex);
 	rcdev = NULL;
@@ -348,7 +373,8 @@ static void devm_reset_control_release(s
 }
 
 struct reset_control *__devm_reset_control_get(struct device *dev,
-				     const char *id, int index, int shared)
+				     const char *id, int index, bool shared,
+				     bool optional)
 {
 	struct reset_control **ptr, *rstc;
 
@@ -358,7 +384,7 @@ struct reset_control *__devm_reset_contr
 		return ERR_PTR(-ENOMEM);
 
 	rstc = __of_reset_control_get(dev ? dev->of_node : NULL,
-				      id, index, shared);
+				      id, index, shared, optional);
 	if (!IS_ERR(rstc)) {
 		*ptr = rstc;
 		devres_add(dev, ptr);
--- a/include/linux/reset.h
+++ b/include/linux/reset.h
@@ -13,10 +13,12 @@ int reset_control_deassert(struct reset_
 int reset_control_status(struct reset_control *rstc);
 
 struct reset_control *__of_reset_control_get(struct device_node *node,
-				     const char *id, int index, int shared);
+				     const char *id, int index, bool shared,
+				     bool optional);
 void reset_control_put(struct reset_control *rstc);
 struct reset_control *__devm_reset_control_get(struct device *dev,
-				     const char *id, int index, int shared);
+				     const char *id, int index, bool shared,
+				     bool optional);
 
 int __must_check device_reset(struct device *dev);
 
@@ -69,14 +71,15 @@ static inline int device_reset_optional(
 
 static inline struct reset_control *__of_reset_control_get(
 					struct device_node *node,
-					const char *id, int index, int shared)
+					const char *id, int index, bool shared,
+					bool optional)
 {
 	return ERR_PTR(-ENOTSUPP);
 }
 
 static inline struct reset_control *__devm_reset_control_get(
-					struct device *dev,
-					const char *id, int index, int shared)
+					struct device *dev, const char *id,
+					int index, bool shared, bool optional)
 {
 	return ERR_PTR(-ENOTSUPP);
 }
@@ -104,7 +107,8 @@ __must_check reset_control_get_exclusive
 #ifndef CONFIG_RESET_CONTROLLER
 	WARN_ON(1);
 #endif
-	return __of_reset_control_get(dev ? dev->of_node : NULL, id, 0, 0);
+	return __of_reset_control_get(dev ? dev->of_node : NULL, id, 0, false,
+									false);
 }
 
 /**
@@ -132,19 +136,22 @@ __must_check reset_control_get_exclusive
 static inline struct reset_control *reset_control_get_shared(
 					struct device *dev, const char *id)
 {
-	return __of_reset_control_get(dev ? dev->of_node : NULL, id, 0, 1);
+	return __of_reset_control_get(dev ? dev->of_node : NULL, id, 0, true,
+									false);
 }
 
 static inline struct reset_control *reset_control_get_optional_exclusive(
 					struct device *dev, const char *id)
 {
-	return __of_reset_control_get(dev ? dev->of_node : NULL, id, 0, 0);
+	return __of_reset_control_get(dev ? dev->of_node : NULL, id, 0, false,
+									true);
 }
 
 static inline struct reset_control *reset_control_get_optional_shared(
 					struct device *dev, const char *id)
 {
-	return __of_reset_control_get(dev ? dev->of_node : NULL, id, 0, 1);
+	return __of_reset_control_get(dev ? dev->of_node : NULL, id, 0, true,
+									true);
 }
 
 /**
@@ -160,7 +167,7 @@ static inline struct reset_control *rese
 static inline struct reset_control *of_reset_control_get_exclusive(
 				struct device_node *node, const char *id)
 {
-	return __of_reset_control_get(node, id, 0, 0);
+	return __of_reset_control_get(node, id, 0, false, false);
 }
 
 /**
@@ -185,7 +192,7 @@ static inline struct reset_control *of_r
 static inline struct reset_control *of_reset_control_get_shared(
 				struct device_node *node, const char *id)
 {
-	return __of_reset_control_get(node, id, 0, 1);
+	return __of_reset_control_get(node, id, 0, true, false);
 }
 
 /**
@@ -202,7 +209,7 @@ static inline struct reset_control *of_r
 static inline struct reset_control *of_reset_control_get_exclusive_by_index(
 					struct device_node *node, int index)
 {
-	return __of_reset_control_get(node, NULL, index, 0);
+	return __of_reset_control_get(node, NULL, index, false, false);
 }
 
 /**
@@ -230,7 +237,7 @@ static inline struct reset_control *of_r
 static inline struct reset_control *of_reset_control_get_shared_by_index(
 					struct device_node *node, int index)
 {
-	return __of_reset_control_get(node, NULL, index, 1);
+	return __of_reset_control_get(node, NULL, index, true, false);
 }
 
 /**
@@ -252,7 +259,7 @@ __must_check devm_reset_control_get_excl
 #ifndef CONFIG_RESET_CONTROLLER
 	WARN_ON(1);
 #endif
-	return __devm_reset_control_get(dev, id, 0, 0);
+	return __devm_reset_control_get(dev, id, 0, false, false);
 }
 
 /**
@@ -267,19 +274,19 @@ __must_check devm_reset_control_get_excl
 static inline struct reset_control *devm_reset_control_get_shared(
 					struct device *dev, const char *id)
 {
-	return __devm_reset_control_get(dev, id, 0, 1);
+	return __devm_reset_control_get(dev, id, 0, true, false);
 }
 
 static inline struct reset_control *devm_reset_control_get_optional_exclusive(
 					struct device *dev, const char *id)
 {
-	return __devm_reset_control_get(dev, id, 0, 0);
+	return __devm_reset_control_get(dev, id, 0, false, true);
 }
 
 static inline struct reset_control *devm_reset_control_get_optional_shared(
 					struct device *dev, const char *id)
 {
-	return __devm_reset_control_get(dev, id, 0, 1);
+	return __devm_reset_control_get(dev, id, 0, true, true);
 }
 
 /**
@@ -297,7 +304,7 @@ static inline struct reset_control *devm
 static inline struct reset_control *
 devm_reset_control_get_exclusive_by_index(struct device *dev, int index)
 {
-	return __devm_reset_control_get(dev, NULL, index, 0);
+	return __devm_reset_control_get(dev, NULL, index, false, false);
 }
 
 /**
@@ -313,7 +320,7 @@ devm_reset_control_get_exclusive_by_inde
 static inline struct reset_control *
 devm_reset_control_get_shared_by_index(struct device *dev, int index)
 {
-	return __devm_reset_control_get(dev, NULL, index, 1);
+	return __devm_reset_control_get(dev, NULL, index, true, false);
 }
 
 /*


