Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:46:58 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 454AC58042F;
	Thu,  6 Dec 2018 06:13:15 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 06:13:14 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AZmixuhKkYwxdR/OLitmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgUL/3yrarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZUMhfVzJPDJ6/?=
 =?us-ascii?q?YYsBAOUOIftXoIvzqFsVtRuzBxKhBP/zxjJSmnP6wbc33/onHArb3AIgBdUOsH?=
 =?us-ascii?q?HModjrNKcSS+G1zLLUzTXEd/NW2Sr25orWfRAlpfGNU7NwccXMwkQoFwPKklWQ?=
 =?us-ascii?q?pJfkPzOT2OQNqXKU4Pd+Wu21lmErsQZxoiKgxso1jITCm4wbylfB9SpjwYY1I8?=
 =?us-ascii?q?W1SEp6Yd6iDZtRuC+aN4xrQsMkXm5nojo6yrwBuZ69ZiQKz44nxxHZZveacIaI?=
 =?us-ascii?q?+gruWPiNLTp8nn5pZbyyiwio/US9yeDwStO43VdIoyZdj9XBsnMA2wbO5sWJSP?=
 =?us-ascii?q?Zx5Fmt1SqR2wzJ9+1JL045mKzGIJA72LEwjIAcsUHbEy/2hkr2iKiWe106+uin?=
 =?us-ascii?q?9evneK/qppyCOI9ujAHxLKAulta4AeQiPQgCR2mb+eKi273/5UD1XqlGg/ksnq?=
 =?us-ascii?q?XEvp3WO94XqrO6DgNJyIou6hSyAy+j0NsCnHkHKFxFeAiAj4jsI1zOJPH4DfGi?=
 =?us-ascii?q?g1WjiTtrxO7JPqfnAprTKnjPibDhfLh760FC0go+1s5f551KBbEbOv7zWVH+tM?=
 =?us-ascii?q?beDhAnNwy42eHnCM9y1o8GQ2KAHreZML/OsV+P/u8vJ+iMZIwLtzrnJPkl+uXj?=
 =?us-ascii?q?jXs4mV8bYKmo0oEbaHG+HvR6PUqZZWDgjcsGEWcPpgA+VvDliEWeUT5PYHa/R6?=
 =?us-ascii?q?I86Ss6CIK6F4jDQZqhgLyc3CihGJ1WaXtLClSNEXfuaoWFVO0AaCOUIs99jDME?=
 =?us-ascii?q?UaKtRJMm1RGrrAX60aZoLvLI+i0EspLuzNp15+rNmh0o9jx0CMKd02eKT2xvmm?=
 =?us-ascii?q?MIRjk23L1woEBny1eD17R4jOJcFdBJ+/xJVQI6P4bGz+NmE9DyRh7BftCRRVm8?=
 =?us-ascii?q?WdWmATYxTtErz98UeUl9Gc6vjhTC3yqsHr8UmKaHBJ0y8qLAwXfxI9xxxGrB1K?=
 =?us-ascii?q?kkl1MmWNdANXW6hq5j8AjeH43JnF+fl6qwcaQc3TTC9GGMzWeVuEFYUQhwUbjK?=
 =?us-ascii?q?XHwFZ0vWq8j56V3GT7O0FbsnNQ5Bw9aYKqRWct3pkUlGRPD7NdvDeW2xhXm/CQ?=
 =?us-ascii?q?yIxryWaorqYHsS3CPaBEgAkAAT+HKGOBM6BiegpWLeETNvGUjuY0Pq7elxtne7?=
 =?us-ascii?q?QlUowAGNak1rz6C19QINhfyAV/MT2aoJtzo7pDVqAlmxxdLWBMCGpwp6YqpcZ8?=
 =?us-ascii?q?gw4FNG1WLfqgx8MYasL6Fkhl4CbQt3u1ni2AlwCoVFicIqtm8lzBJuKaKE11NM?=
 =?us-ascii?q?by+Y3ZH1Or3QNmny/BCuZ7TK2l3E19aW4KMP6PU+q1XspwypEksi83N609hayX?=
 =?us-ascii?q?ec55PKDBYMXpL1SEo46x96p7TCaCkn+4zUzWFsMbWzsjLawd0pAPUqyxm+cNZf?=
 =?us-ascii?q?Kq+LDxLyHNAACMioK+wqnEapYwkAPOBT8q40Isyne+GH2K6tIOZvgjamgX5b74?=
 =?us-ascii?q?B610KG7zB8RfLQ35YZ3/GY2ROKVjfhjFu7rs/7g4FFZTEIEWq5xijpH4pRZqx0?=
 =?us-ascii?q?fYYWBmaiOcy3xtNih5HzX35U7kKsB1QD2MWxYxqdc0T93RFM1UQQuXGngyq4wC?=
 =?us-ascii?q?BunDEzs6Wf2zbCw+L8exodO25HXXVtgk3oIYepkd8aRk+obw4ymRuh5Eb6wbVb?=
 =?us-ascii?q?patlI2nSR0dIYzb5L2V4XqSssbqCZtZF6Ik0viVPTOS8fVeaR6b9ohsbyS/iH3?=
 =?us-ascii?q?FSxCsmdzGsoZj5mx16iGSALHd8tnbZeMdwxQvB69zYX/Jewj0GRCxggznNGle8?=
 =?us-ascii?q?J8Wp/cmTl5rbsOCxTXihVp5QcSns14+ArzG05W5pAR2+mfC8hNvnHBM+0S/60d?=
 =?us-ascii?q?lqSCrJoAz9Yonty6S1L+ZnclN0C1/77spwApt+nZcohJEMxXgagY2Y/Hodnmf0?=
 =?us-ascii?q?K9lb26P+bHwWSD4Pwt7V5hXl2UJ5InKIwYL5SmuSws97a9amZWMW3zo379pWB6?=
 =?us-ascii?q?eM8LxEgSx1r0K7rQ3LYPhxhDcdyeY0534cjOEEow4tziSbArAPEkhUJy3slxKU?=
 =?us-ascii?q?79+gqKVbfnqgcb+11EBmh9CuEKmCoh1AWHb+YpoiGC5w7sZlP17W3nz89JrkeM?=
 =?us-ascii?q?XOYtIJrRKbjQ3Aj+dOJZI1l/oKgzdnOG3nsX0kze47kQJh3ZWgsIebLGVt+bqz?=
 =?us-ascii?q?AgREOT3te8MT5jbtgL5CnsaR2oCjBJRgFS8NXJv1VvKoCzMSuO/jNwaPFj08t3?=
 =?us-ascii?q?iaFaDeHQ+Z9EdpsXbPH4q3OHGQIXkT1c9iSwWFJExDnAAUWy03kYUjGQCtwMzh?=
 =?us-ascii?q?bV115jQM5lPjrhtMy+RoNwTwU2vFpQeobCs0R4abLBZM8g5C4ELVO9SE7u1vBy?=
 =?us-ascii?q?FY4oGhrAuVJ2yZfQtICH8GWleeC1D/JLWu5sTA8+uFBuq4NfTOeq6DqehfV/eO?=
 =?us-ascii?q?2JKu3ZFq/zeKNsWTIHZiC+c31VZEXXB8A87ZgSkASzQLlyLRaM6WvBe9+ipqrs?=
 =?us-ascii?q?Cm7fTkQgTv6ZGUC7tVN9Vv9Au7gaOCN+6WmSZ4JixU1pIKxX/U1rcf2EQehD1p?=
 =?us-ascii?q?dzmoCb4ArzLCTLrMmq9LCB4WcyNzO9VJ76I/3QlNONTXitDv1r5/gf46FU1FVU?=
 =?us-ascii?q?H6msyyYcwKIme9NE7IBUqRNbSGIyHLzN/zYa+mVbJQi+BUvQWquTmHC0/jIiiD?=
 =?us-ascii?q?lz7xWh+1LOFDlzubMwJeuY2ndhZtCHPuTNbnah29Ld92gic6wbwyhnPWK2EcNS?=
 =?us-ascii?q?JwfF9Krr2V9SlYmOlwG3Rd7np5KumJgzqZ7+jdKpoMrfRnGDh7l+JE73Q80LZV?=
 =?us-ascii?q?6CBERPpomCrdtNJuolemkvWRxTpjShZBtjFLhIeTt0V4JarZ7oVAWWrD/B8V7W?=
 =?us-ascii?q?SfERIKp95kCt3po69Ry9jPm7j1KDdN6N/U+cocB87JKMOIKnYhMBzpGCLKAwsB?=
 =?us-ascii?q?VzKkKWbfh0kO2M2Vo1aVtJkhtp/0mNIuR7tfS106XqcaAURNGMceZpt6CGAKi7?=
 =?us-ascii?q?me2eUI/3ulsB7JRI16s5TDSfOdSaHvIzaxjL9KfRIEzLr0a4MJOduoiARZdlBm?=
 =?us-ascii?q?kdGSSALrVtdXr3gkN1dsrQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ADAAAPLglch0O0hNFkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGCaYECFRKME44bFIkMiTWEeYFzLAsIAYMshCsiNAk?=
 =?us-ascii?q?NAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkAYJiAQIDAQEBJBMGAQEsCwEFCQEBC?=
 =?us-ascii?q?g4KCRMSAwwFEwEUIRMFgxwBgXQNBQqkaIFsM4J2AQEFhyUDBYweF4F/gRGDEoM?=
 =?us-ascii?q?eAQSHOYk3hn6PZkYJhwSGJIQTI5E1LI1NjFiCDTMaCCgIO4JsghsMF4hehWAeM?=
 =?us-ascii?q?4EFAQGKZwEB?=
X-IPAS-Result: =?us-ascii?q?A0ADAAAPLglch0O0hNFkGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGCaYECFRKME44bFIkMiTWEeYFzLAsIAYMshCsiNAkNAQMBAQEBAQECA?=
 =?us-ascii?q?RMBAQEIDQkIKSMMgjYkAYJiAQIDAQEBJBMGAQEsCwEFCQEBCg4KCRMSAwwFEwE?=
 =?us-ascii?q?UIRMFgxwBgXQNBQqkaIFsM4J2AQEFhyUDBYweF4F/gRGDEoMeAQSHOYk3hn6PZ?=
 =?us-ascii?q?kYJhwSGJIQTI5E1LI1NjFiCDTMaCCgIO4JsghsMF4hehWAeM4EFAQGKZwEB?=
X-IronPort-AV: E=Sophos;i="5.56,322,1539673200"; 
   d="scan'208";a="55188573"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 06 Dec 2018 06:13:12 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729646AbeLFONJ (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 6 Dec 2018 09:13:09 -0500
Received: from bombadil.infradead.org ([198.137.202.133]:42536 "EHLO
        bombadil.infradead.org" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1728648AbeLFONI (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 6 Dec 2018 09:13:08 -0500
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
        d=infradead.org; s=bombadil.20170209; h=In-Reply-To:Content-Type:MIME-Version
        :References:Message-ID:Subject:Cc:To:From:Date:Sender:Reply-To:
        Content-Transfer-Encoding:Content-ID:Content-Description:Resent-Date:
        Resent-From:Resent-Sender:Resent-To:Resent-Cc:Resent-Message-ID:List-Id:
        List-Help:List-Unsubscribe:List-Subscribe:List-Post:List-Owner:List-Archive;
         bh=PMWwlz1Rp3FGP1S0BmTNwyIHN10oYPgixjpO1G2iji0=; b=DhdVVUXnjhgYNeYjslMFivM+p
        Qu8Kd/HPJliEYcYc9SLgMt5qZWCy7kCA59TLDl9WBlhNXCOJrfkPCmkZgJi56xyHEdGYeErCmniEe
        k2L+2HWYTYMckLzjW7NkjrkaHKNbCgLVJzDTQyTsEaOgJxj+Yeou7QSHOfW/cJkq3HGz4wXJzpWrd
        Ln+u2eC7iTl+clM9g3IHy2fALdgaxy3Q0SQweiLcWIPBl5LK4+yKGgweh5KtTElseDL/PGAnvguqX
        XlozDDOXUnUmTIp6GSTMxcQ+Io4zHcMYXEdUfG5XlffdtpPuhQgsBO3miqYGlLDY/hs5T6r00dlRu
        lx333kGkg==;
Received: from hch by bombadil.infradead.org with local (Exim 4.90_1 #2 (Red Hat Linux))
        id 1gUuMI-0001Cj-T1; Thu, 06 Dec 2018 14:10:30 +0000
Date: Thu, 6 Dec 2018 06:10:30 -0800
From: Christoph Hellwig <hch@infradead.org>
To: Christoph Hellwig <hch@lst.de>
Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>,
        Paul Mackerras <paulus@samba.org>,
        Michael Ellerman <mpe@ellerman.id.au>,
        linux-arch@vger.kernel.org, linux-mm@kvack.org,
        iommu@lists.linux-foundation.org, linuxppc-dev@lists.ozlabs.org,
        linux-kernel@vger.kernel.org
Subject: Re: [PATCH 08/34] powerpc/dma: untangle vio_dma_mapping_ops from
 dma_iommu_ops
Message-ID: <20181206141030.GH29741@infradead.org>
References: <20181114082314.8965-1-hch@lst.de>
 <20181114082314.8965-9-hch@lst.de>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181114082314.8965-9-hch@lst.de>
User-Agent: Mutt/1.9.2 (2017-12-15)
X-SRS-Rewrite: SMTP reverse-path rewritten from <hch@infradead.org> by bombadil.infradead.org. See http://www.infradead.org/rpr.html
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

ping?

On Wed, Nov 14, 2018 at 09:22:48AM +0100, Christoph Hellwig wrote:
> vio_dma_mapping_ops currently does a lot of indirect calls through
> dma_iommu_ops, which not only make the code harder to follow but are
> also expensive in the post-spectre world.  Unwind the indirect calls
> by calling the ppc_iommu_* or iommu_* APIs directly applicable, or
> just use the dma_iommu_* methods directly where we can.
> 
> Signed-off-by: Christoph Hellwig <hch@lst.de>
> ---
>  arch/powerpc/include/asm/iommu.h     |  1 +
>  arch/powerpc/kernel/dma-iommu.c      |  2 +-
>  arch/powerpc/platforms/pseries/vio.c | 87 ++++++++++++----------------
>  3 files changed, 38 insertions(+), 52 deletions(-)
> 
> diff --git a/arch/powerpc/include/asm/iommu.h b/arch/powerpc/include/asm/iommu.h
> index 35db0cbc9222..75daa10f31a4 100644
> --- a/arch/powerpc/include/asm/iommu.h
> +++ b/arch/powerpc/include/asm/iommu.h
> @@ -242,6 +242,7 @@ static inline int __init tce_iommu_bus_notifier_init(void)
>  }
>  #endif /* !CONFIG_IOMMU_API */
>  
> +u64 dma_iommu_get_required_mask(struct device *dev);
>  int dma_iommu_mapping_error(struct device *dev, dma_addr_t dma_addr);
>  
>  #else
> diff --git a/arch/powerpc/kernel/dma-iommu.c b/arch/powerpc/kernel/dma-iommu.c
> index 2ca6cfaebf65..0613278abf9f 100644
> --- a/arch/powerpc/kernel/dma-iommu.c
> +++ b/arch/powerpc/kernel/dma-iommu.c
> @@ -92,7 +92,7 @@ int dma_iommu_dma_supported(struct device *dev, u64 mask)
>  		return 1;
>  }
>  
> -static u64 dma_iommu_get_required_mask(struct device *dev)
> +u64 dma_iommu_get_required_mask(struct device *dev)
>  {
>  	struct iommu_table *tbl = get_iommu_table_base(dev);
>  	u64 mask;
> diff --git a/arch/powerpc/platforms/pseries/vio.c b/arch/powerpc/platforms/pseries/vio.c
> index 88f1ad1d6309..ea3a9745c812 100644
> --- a/arch/powerpc/platforms/pseries/vio.c
> +++ b/arch/powerpc/platforms/pseries/vio.c
> @@ -492,7 +492,9 @@ static void *vio_dma_iommu_alloc_coherent(struct device *dev, size_t size,
>  		return NULL;
>  	}
>  
> -	ret = dma_iommu_ops.alloc(dev, size, dma_handle, flag, attrs);
> +	ret = iommu_alloc_coherent(dev, get_iommu_table_base(dev), size,
> +				    dma_handle, dev->coherent_dma_mask, flag,
> +				    dev_to_node(dev));
>  	if (unlikely(ret == NULL)) {
>  		vio_cmo_dealloc(viodev, roundup(size, PAGE_SIZE));
>  		atomic_inc(&viodev->cmo.allocs_failed);
> @@ -507,8 +509,7 @@ static void vio_dma_iommu_free_coherent(struct device *dev, size_t size,
>  {
>  	struct vio_dev *viodev = to_vio_dev(dev);
>  
> -	dma_iommu_ops.free(dev, size, vaddr, dma_handle, attrs);
> -
> +	iommu_free_coherent(get_iommu_table_base(dev), size, vaddr, dma_handle);
>  	vio_cmo_dealloc(viodev, roundup(size, PAGE_SIZE));
>  }
>  
> @@ -518,22 +519,22 @@ static dma_addr_t vio_dma_iommu_map_page(struct device *dev, struct page *page,
>                                           unsigned long attrs)
>  {
>  	struct vio_dev *viodev = to_vio_dev(dev);
> -	struct iommu_table *tbl;
> +	struct iommu_table *tbl = get_iommu_table_base(dev);
>  	dma_addr_t ret = IOMMU_MAPPING_ERROR;
>  
> -	tbl = get_iommu_table_base(dev);
> -	if (vio_cmo_alloc(viodev, roundup(size, IOMMU_PAGE_SIZE(tbl)))) {
> -		atomic_inc(&viodev->cmo.allocs_failed);
> -		return ret;
> -	}
> -
> -	ret = dma_iommu_ops.map_page(dev, page, offset, size, direction, attrs);
> -	if (unlikely(dma_mapping_error(dev, ret))) {
> -		vio_cmo_dealloc(viodev, roundup(size, IOMMU_PAGE_SIZE(tbl)));
> -		atomic_inc(&viodev->cmo.allocs_failed);
> -	}
> -
> +	if (vio_cmo_alloc(viodev, roundup(size, IOMMU_PAGE_SIZE(tbl))))
> +		goto out_fail;
> +	ret = iommu_map_page(dev, tbl, page, offset, size, device_to_mask(dev),
> +			direction, attrs);
> +	if (unlikely(ret == IOMMU_MAPPING_ERROR))
> +		goto out_deallocate;
>  	return ret;
> +
> +out_deallocate:
> +	vio_cmo_dealloc(viodev, roundup(size, IOMMU_PAGE_SIZE(tbl)));
> +out_fail:
> +	atomic_inc(&viodev->cmo.allocs_failed);
> +	return IOMMU_MAPPING_ERROR;
>  }
>  
>  static void vio_dma_iommu_unmap_page(struct device *dev, dma_addr_t dma_handle,
> @@ -542,11 +543,9 @@ static void vio_dma_iommu_unmap_page(struct device *dev, dma_addr_t dma_handle,
>  				     unsigned long attrs)
>  {
>  	struct vio_dev *viodev = to_vio_dev(dev);
> -	struct iommu_table *tbl;
> -
> -	tbl = get_iommu_table_base(dev);
> -	dma_iommu_ops.unmap_page(dev, dma_handle, size, direction, attrs);
> +	struct iommu_table *tbl = get_iommu_table_base(dev);
>  
> +	iommu_unmap_page(tbl, dma_handle, size, direction, attrs);
>  	vio_cmo_dealloc(viodev, roundup(size, IOMMU_PAGE_SIZE(tbl)));
>  }
>  
> @@ -555,34 +554,32 @@ static int vio_dma_iommu_map_sg(struct device *dev, struct scatterlist *sglist,
>                                  unsigned long attrs)
>  {
>  	struct vio_dev *viodev = to_vio_dev(dev);
> -	struct iommu_table *tbl;
> +	struct iommu_table *tbl = get_iommu_table_base(dev);
>  	struct scatterlist *sgl;
>  	int ret, count;
>  	size_t alloc_size = 0;
>  
> -	tbl = get_iommu_table_base(dev);
>  	for_each_sg(sglist, sgl, nelems, count)
>  		alloc_size += roundup(sgl->length, IOMMU_PAGE_SIZE(tbl));
>  
> -	if (vio_cmo_alloc(viodev, alloc_size)) {
> -		atomic_inc(&viodev->cmo.allocs_failed);
> -		return 0;
> -	}
> -
> -	ret = dma_iommu_ops.map_sg(dev, sglist, nelems, direction, attrs);
> -
> -	if (unlikely(!ret)) {
> -		vio_cmo_dealloc(viodev, alloc_size);
> -		atomic_inc(&viodev->cmo.allocs_failed);
> -		return ret;
> -	}
> +	if (vio_cmo_alloc(viodev, alloc_size))
> +		goto out_fail;
> +	ret = ppc_iommu_map_sg(dev, tbl, sglist, nelems, device_to_mask(dev),
> +			direction, attrs);
> +	if (unlikely(!ret))
> +		goto out_deallocate;
>  
>  	for_each_sg(sglist, sgl, ret, count)
>  		alloc_size -= roundup(sgl->dma_length, IOMMU_PAGE_SIZE(tbl));
>  	if (alloc_size)
>  		vio_cmo_dealloc(viodev, alloc_size);
> -
>  	return ret;
> +
> +out_deallocate:
> +	vio_cmo_dealloc(viodev, alloc_size);
> +out_fail:
> +	atomic_inc(&viodev->cmo.allocs_failed);
> +	return 0;
>  }
>  
>  static void vio_dma_iommu_unmap_sg(struct device *dev,
> @@ -591,30 +588,18 @@ static void vio_dma_iommu_unmap_sg(struct device *dev,
>  		unsigned long attrs)
>  {
>  	struct vio_dev *viodev = to_vio_dev(dev);
> -	struct iommu_table *tbl;
> +	struct iommu_table *tbl = get_iommu_table_base(dev);
>  	struct scatterlist *sgl;
>  	size_t alloc_size = 0;
>  	int count;
>  
> -	tbl = get_iommu_table_base(dev);
>  	for_each_sg(sglist, sgl, nelems, count)
>  		alloc_size += roundup(sgl->dma_length, IOMMU_PAGE_SIZE(tbl));
>  
> -	dma_iommu_ops.unmap_sg(dev, sglist, nelems, direction, attrs);
> -
> +	ppc_iommu_unmap_sg(tbl, sglist, nelems, direction, attrs);
>  	vio_cmo_dealloc(viodev, alloc_size);
>  }
>  
> -static int vio_dma_iommu_dma_supported(struct device *dev, u64 mask)
> -{
> -        return dma_iommu_ops.dma_supported(dev, mask);
> -}
> -
> -static u64 vio_dma_get_required_mask(struct device *dev)
> -{
> -        return dma_iommu_ops.get_required_mask(dev);
> -}
> -
>  static const struct dma_map_ops vio_dma_mapping_ops = {
>  	.alloc             = vio_dma_iommu_alloc_coherent,
>  	.free              = vio_dma_iommu_free_coherent,
> @@ -623,8 +608,8 @@ static const struct dma_map_ops vio_dma_mapping_ops = {
>  	.unmap_sg          = vio_dma_iommu_unmap_sg,
>  	.map_page          = vio_dma_iommu_map_page,
>  	.unmap_page        = vio_dma_iommu_unmap_page,
> -	.dma_supported     = vio_dma_iommu_dma_supported,
> -	.get_required_mask = vio_dma_get_required_mask,
> +	.dma_supported     = dma_iommu_mapping_error,
> +	.get_required_mask = dma_iommu_get_required_mask,
>  	.mapping_error	   = dma_iommu_mapping_error,
>  };
>  
> -- 
> 2.19.1
> 
> _______________________________________________
> iommu mailing list
> iommu@lists.linux-foundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/iommu
---end quoted text---
