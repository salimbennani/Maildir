Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 04 Dec 2018 08:57:01 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 6715358014B;
	Mon,  3 Dec 2018 10:54:03 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 03 Dec 2018 10:54:02 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A6FNWFRWNFcZS6uo4mSmvLWiWuUrV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhOEtKdThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGoOy?=
 =?us-ascii?q?YZUSAeQPPuhWqIvyp1UBohWxHgmsHOHixyRUinL1x6A2z/4sHR3a0AEmAtkAsG?=
 =?us-ascii?q?7UrNLwNKoKTe20zKzIwi/Fb/hLxDry8ofIfQo6rv6WRrJ7bM3cxlMvFgPAlFqQ?=
 =?us-ascii?q?r5bpMCiP2eQCqWeU9PBvVfm0hm4orgF+uDmvxsM2hobVgYIVz0nJ+CNky4g2Pd?=
 =?us-ascii?q?21UFB3bcKgHZdKqi2XOZV6Ttk/T2xrpCo20LwLtJyjcCQXxpkr2wTTZ+KHfoWH?=
 =?us-ascii?q?+B7vSfqdLDhiiH9leL+ygQu5/1K6xe3mTMa01U5HripbndnIsXAAzwLT6seZRf?=
 =?us-ascii?q?tn5Euh2iiA1xrV6u5aJUA4j63bK4QuwrIol5oTt1rMHjPulUnokKObcl8o9vWm?=
 =?us-ascii?q?5uj5eLnqu5yRO5Nuhgz/MKkigsm/Dv45MggKUWib4+O81Lj78E39QbVKiOA2k6?=
 =?us-ascii?q?bAvJDZO8sbvKi5DBFR0oo67Ba+ATGm38oCnXQcMlJFdwyIj5LzN1HNPv/4F/G/?=
 =?us-ascii?q?jEqokDtxwPDGJLLhDo3XLnffiLfhYap960lExQo3zNBf5IxbBqsOIfLuQULxsN?=
 =?us-ascii?q?3YDhkkMw272ernCdN91p8AVmKLGKOWLKTSsVqQ7OI1P+aMfJMVuCr6K/U95/7h?=
 =?us-ascii?q?l345mUMHcqmux5cXaG24Ee5gI0WWenfshtYBEWEXvgsxVuDqiVuCUSJNaHa2Ra?=
 =?us-ascii?q?4z+jY7CIe+B4fZWo+tmKCB3Du8HpBOZGBGDU6DHW3rd4WDXfcMbiWSL9RlkjwF?=
 =?us-ascii?q?U7ihVoAg2QuvtA/817poMO7U9jcEupLk0dh///fTmg0q9TxoE8Sd1HmAQHtvnm?=
 =?us-ascii?q?MIQD8237pzoVZnxVeByqV4h/1YFdpO5/JGSAs6NJjcz/BkBND2QA7OYtCJSFO+?=
 =?us-ascii?q?SNW8HT4xVs4xw8MJY0tlGNWtlBbD0zCuA78UjbOLApM0/7nY33jwIcZ91nnH2L?=
 =?us-ascii?q?Mgj1kgXstAK2mmirRj+AjUAo7Di1+ZmLqydaQAwC7N83+OwneUs0FGTgF8S6XF?=
 =?us-ascii?q?UmoZZkvNs9v54ETOT7utCbQiNgtM0sqCKqpMat30glRKXvbjONLCY22vn2e8Hw?=
 =?us-ascii?q?qHxrSJbIDyYWUSwD3dCFQYkwAU5XuJKBIxBjm/rG7EDDxhD1TvY1jy/ul4s367?=
 =?us-ascii?q?Sk40zweXb0xuzba1+xgVheCCRPMXxL4LpCAhqzBsFlanw93WE8aApxZmfKhEfd?=
 =?us-ascii?q?M94VJH1WXFtwx9Pp2sNbxiikQZcwRtu0Pu1hN3CopbnMgurXMqyhdyKK2C3FNA?=
 =?us-ascii?q?cTOYwY7/OrnNJmbu+xCvbrbc2kvC39aO5qcP9PM4pk35swGtCEUj/Gto0tlP33?=
 =?us-ascii?q?SH+5XFERAdUZTyUkYw6Rh3vLXaYig754PJ2nxgK6i0sjne2903AOsp0Aqvf9Ba?=
 =?us-ascii?q?MKmcDg/9D9UaB9SyKOwtg1Wobg8EMPpO+6IuPsKmd+GJ2KikPOt7mDKmjGJH4J?=
 =?us-ascii?q?1y006W9ip8TPLI0IgBw/2CwgSHUDL8hk+7ss/rgYBEeS0SHm2nxCj+BY5eerd9?=
 =?us-ascii?q?fZwWBmepOcG3wMtxh4TsW3JB6FGsHVcG19K3dhqIaFz92xZd1UAWoXyhhCu5wC?=
 =?us-ascii?q?Z4kzAvrqqDwiPOx/7uewYAOm5OXGNil0vjIZCoj9AGW0ildwgolBq/6Uf63aRb?=
 =?us-ascii?q?v7l/L2/ITEdMfij2KXxiU6SqurqDZc5P9I0nsSFNXOugZlCaT6b3owEG3CP7A2?=
 =?us-ascii?q?te2Dc7eimouprjhRx6i2GdLHFpoHrCY85wxhTf5N3aRfFP2DoLXy14iTjRBlih?=
 =?us-ascii?q?MNil59SUl5Hfsu+gU2KtTIFccS7uzYmYriu0+XVqAQGjn/C0gtDmERI10Sjh29?=
 =?us-ascii?q?loVCXIqg3xYo3q16S8LOJmcVNkBF7668pmBI5+lpE8i40X2Xgfnp+V52YIkX/v?=
 =?us-ascii?q?MdVH3qLzdHkNSiQKw9LP4AjlxVdsLnSGx4/iUnWdw81hZ8S1Y28M2yI96dxKB7?=
 =?us-ascii?q?mQ7LBegSR1pV+4pxrLYfdhhjcd1ecu6HkCjuEMuQotzT+SDqocHEZGJizsiwqH?=
 =?us-ascii?q?78qlo6pJfmavfqO91E5/ndCnEbGDrRtQWHf/epc+AyBw6t9zP07L0H328ovkYs?=
 =?us-ascii?q?XfbcoPth2IlBfNl/RVKJU0lvYQhCtoI2T9vWA+y+4gjBxjxpW6vImBK2Vw86O1?=
 =?us-ascii?q?GB9YNjvpZ8wN/jHhl7pRnsGT34q3BJVuBi0LXIf0TfKvCD8dru7oNwGKED0hsH?=
 =?us-ascii?q?ubHaffEBSb6EdnqXLPDp+qO2uWJHkf0dVtWh2dKFZDjwATWTUwhoQ5GRyyxMz9?=
 =?us-ascii?q?bEd54Sgc5lzipRtJ1O1oLAPzUnvFqAerdzc0S4WfLBxM4QFZ/ErVNc2e7uRuHy?=
 =?us-ascii?q?BX5JGhrQqNKnCFaARMF20GRkuEB1X7NLm0+dbA6/SYBva5L/bWYbSOrvFeV+6V?=
 =?us-ascii?q?xZ211Itq5S2MNsKJPnltFPA73ktDXXZkG8XWgTkPSioXlz7TYM6fvhuz5ip3rs?=
 =?us-ascii?q?Wn+vTxRA3v/ZePC6dVMdh3+xC5n6aDN+2ThCZ4MzpY1YkMxXjHyLcBxl4Sljpu?=
 =?us-ascii?q?eiKpEbQBsy7NUa3RlrVWDx4ddyN8Ks9I47gg0QlKPM7Rksn12aJgjv4pF1dFUk?=
 =?us-ascii?q?Tsldu0ZcMROWGyKlPGCFyPNLSHPjDLx8D3YaWhSbxflulUthuwuSqFHE/nJDiM?=
 =?us-ascii?q?iz7pVxW3O+FWkC6bJABeuJ26cht1FWjjTdfmZgenP9NtkTI2waM7hnXROG4YMD?=
 =?us-ascii?q?h8dV5Nr7KK4SNZhPV/B3JO7n5/IeaYnCaZ6vHSKowKvvtzHiR0i+Va7Ww6yrRP?=
 =?us-ascii?q?6iFEQf11mC3Kod9vo1GpiO+PyjV8XRpKqzZLgp+LvEp4NaXY8JlARWjL/BYX4W?=
 =?us-ascii?q?qMDBQKoogtNtq6l6lK0NXJ3IL6MisKp97K/cIGG+DVLsydOXYsOBavHyTbWk9N?=
 =?us-ascii?q?ZDinJCnkh0FDm/Gf8H6S5swzrJT9sJsIRKVSWFE8GrUdEEszWJQgKY1wRTctj/?=
 =?us-ascii?q?a4ndUF4XP2+AHcXshKlojKTP+CR/79fnLRsbBHbgAIwPvZMo0Sftnn2lNra3Fh?=
 =?us-ascii?q?gZ/HXUHXWIYJ6g5obws9pkoFwXF4QSVn2Evkbgqr71cJGPewghM1zAB5ZLJpvB?=
 =?us-ascii?q?fx4h8IL1zF7H8wjUh3htzjjhiaeTj2Kqa7VIUQAC3x4Qx5NpL9XhYwbgCom0Fg?=
 =?us-ascii?q?HCnLSqgXjLZ6c21vzgjGtt8HAfpVUaNDehpVyeuWefgylEQM9A25ykJdo+jIE5?=
 =?us-ascii?q?1vkE0ta5Ho53tEwAsmYNMrKKj4La5Sxx1InKWMsyS0kOcrz1wwPUEIpUqDfScO?=
 =?us-ascii?q?8GYBObAsLjHgquV97AWE3TFKd2EGXuECrfdj90d7MOOFmXGzm4VfI1y8YrTMZ5?=
 =?us-ascii?q?iSvHLNwIvRGgs9?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAAD1egVch0O0hNFjGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGBWoEPgQInjBGOLZc0FIFiDwEBGAMQAYgJIjQJDQE?=
 =?us-ascii?q?DAQEBAQEBAgETAQEBCgsJCCkjDII2JAGCYgMDAQIkCwENARsdAQMCCQEBBRADJ?=
 =?us-ascii?q?hIDHgIRAQUBHAYBEgUWgjtLAYFoAQMVBZpSPIwJFgUBF4J3BYEGAYMxChknDV2?=
 =?us-ascii?q?BNwIGEodbgxOBHIFXP4ERhWmBb4YWAokshgJ8j2guBwKCHwSEXYcOgyMLGIIoh?=
 =?us-ascii?q?zOHS4kEhXCJUgYCCQcPCRiBJYINMxojgQGCOwmCEgwXg0qEUYVLAVQiMoEFAQG?=
 =?us-ascii?q?KWgEB?=
X-IPAS-Result: =?us-ascii?q?A0ABAAD1egVch0O0hNFjGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGBWoEPgQInjBGOLZc0FIFiDwEBGAMQAYgJIjQJDQEDAQEBAQEBAgETA?=
 =?us-ascii?q?QEBCgsJCCkjDII2JAGCYgMDAQIkCwENARsdAQMCCQEBBRADJhIDHgIRAQUBHAY?=
 =?us-ascii?q?BEgUWgjtLAYFoAQMVBZpSPIwJFgUBF4J3BYEGAYMxChknDV2BNwIGEodbgxOBH?=
 =?us-ascii?q?IFXP4ERhWmBb4YWAokshgJ8j2guBwKCHwSEXYcOgyMLGIIohzOHS4kEhXCJUgY?=
 =?us-ascii?q?CCQcPCRiBJYINMxojgQGCOwmCEgwXg0qEUYVLAVQiMoEFAQGKWgEB?=
X-IronPort-AV: E=Sophos;i="5.56,311,1539673200"; 
   d="scan'208";a="65098850"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 03 Dec 2018 10:54:01 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726952AbeLCSyB (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 3 Dec 2018 13:54:01 -0500
Received: from mail-yb1-f194.google.com ([209.85.219.194]:41793 "EHLO
        mail-yb1-f194.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726029AbeLCSyA (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 3 Dec 2018 13:54:00 -0500
Received: by mail-yb1-f194.google.com with SMTP id t13-v6so5733124ybb.8;
        Mon, 03 Dec 2018 10:53:57 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding;
        bh=8zZTnSbo8cQ2o+GieMnXGxj9kwkcdcthOGgnhLwEJto=;
        b=TL8CMvrbwbAsiLk4yRT2+ojo9qVqIP8OrMr+j5fd/HckSNKhZMHIy3ih1yGNRGj5C3
         Qe7B3wG/1Euyr0oPTTg0El8J7O8ItEXSj3h9Kh/6mweUjyb8RMzwATpM4xMdCQ40gpva
         o1wIhc169I7Wbo91ekBD7xpJxQw9GKPwMxscFtbtyIZtOjVxX7pL4ATdWMa2F/cUMZ0c
         jKvJykPdhJEiRSuIbcnlF4CDar9vl587Wj1SOIV58nZZy+qKRcc3Hz7j7D8jGMUK1ojR
         73IVH6qyCJOXJz2LJbOiULZVfJmN2mVeAziknZRer5/rryK17Q+0Ox/6ondD9MbriKi7
         0C9Q==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=8zZTnSbo8cQ2o+GieMnXGxj9kwkcdcthOGgnhLwEJto=;
        b=ikcrDXhrzFKFzIgxdCwLZQ+088vgEEutax8XUV80Vhrn0sUioXOxNBt9Sb3HiwngHo
         VdVvl1aN7Tu0whjy88HivW3kb3tXJ42DWiYfu+pg5iEPzG2GLa9LRajHeptZ2AgLaGh7
         xvfsuagAuJBX6g/wcvA9XRQp0Yzpb42IbH9pz60wodb2/UqF2xR6xhygKMoGhISeXaZL
         aZEF8xfC5sstFDryuhTd5fgVqQedL6ijUhdkwacX9QO5+9xCJ3AM3X8Mvny8wG095+Hc
         lGEy7valJk2POX5HhNCBKvkV3+4s18bpFp8AyKjhm0LQK+9pXWc5ykHsH3DXN2VlFeZE
         b17g==
X-Gm-Message-State: AA+aEWYsx06McQBGLSLT6vVveuqxOASi6n1YMR1RhCgko7aS8kfAvhDu
        ZeVC2jDWmaj4nNhRNPTVMQ==
X-Google-Smtp-Source: AFSGD/XK+cFkwVPQqO1PahdHnfto/u+b6CkSNaVTkr6w1Sa2XEjyLwZ4U9viaAAPWSmYBMRT2knsQg==
X-Received: by 2002:a25:aca6:: with SMTP id x38mr2651743ybi.49.1543863236971;
        Mon, 03 Dec 2018 10:53:56 -0800 (PST)
Received: from 960.armstrong.edu ([130.254.104.55])
        by smtp.gmail.com with ESMTPSA id u132sm4842769ywc.11.2018.12.03.10.53.56
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Mon, 03 Dec 2018 10:53:56 -0800 (PST)
From: Ayman Bagabas <ayman.bagabas@gmail.com>
To: Darren Hart <dvhart@infradead.org>,
        Andy Shevchenko <andy@infradead.org>,
        Jaroslav Kysela <perex@perex.cz>,
        Takashi Iwai <tiwai@suse.com>,
        Kailang Yang <kailang@realtek.com>,
        Hui Wang <hui.wang@canonical.com>,
        linux-kernel@vger.kernel.org, platform-driver-x86@vger.kernel.org,
        alsa-devel@alsa-project.org
Cc: ayman.bagabas@gmail.com
Subject: [PATCH v9 2/3] x86: add support for Huawei WMI hotkeys.
Date: Mon,  3 Dec 2018 13:53:39 -0500
Message-Id: <20181203185344.3521-3-ayman.bagabas@gmail.com>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <20181203185344.3521-1-ayman.bagabas@gmail.com>
References: <20181203185344.3521-1-ayman.bagabas@gmail.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This driver adds support for missing hotkeys on some Huawei laptops.
Laptops such as the Matebook X have non functioning hotkeys. Whereas
newer laptops such as the Matebook X Pro come with working hotkeys out
of the box.

Old laptops, such as the Matebook X, report hotkey events through ACPI
device "\WMI0". However, new laptops, such as the Matebook X Pro,
does not have this WMI device.

All the hotkeys on the Matebook X Pro work fine
without this patch except (micmute, wlan, and huawei key). These keys
and the brightness keys report events to "\AMW0" ACPI device. One
problem is that brightness keys on the Matebook X Pro work without this
patch. This results in reporting two brightness key press
events one is captured by ACPI and another by this driver.

A solution would be to check if such event came from the "\AMW0" WMI driver
then skip reporting event. Another solution would be to leave this to
user-space to handle. Which can be achieved by using "hwdb" tables and
remap those keys to "unknown". This solution seems more natural to me
because it leaves the decision to user-space.

Signed-off-by: Ayman Bagabas <ayman.bagabas@gmail.com>
---
 drivers/platform/x86/Kconfig      |  16 +++
 drivers/platform/x86/Makefile     |   1 +
 drivers/platform/x86/huawei-wmi.c | 226 ++++++++++++++++++++++++++++++
 3 files changed, 243 insertions(+)
 create mode 100644 drivers/platform/x86/huawei-wmi.c

diff --git a/drivers/platform/x86/Kconfig b/drivers/platform/x86/Kconfig
index 87f70e8f4dd0..27db3ce7a1e1 100644
--- a/drivers/platform/x86/Kconfig
+++ b/drivers/platform/x86/Kconfig
@@ -1292,6 +1292,22 @@ config INTEL_ATOMISP2_PM
 	  To compile this driver as a module, choose M here: the module
 	  will be called intel_atomisp2_pm.
 
+config HUAWEI_WMI
+	tristate "Huawei WMI hotkeys driver"
+	depends on ACPI_WMI
+	depends on INPUT
+	select INPUT_SPARSEKMAP
+	select LEDS_CLASS
+	select LEDS_TRIGGERS
+	select LEDS_TRIGGER_AUDIO
+	help
+	  This driver provides support for Huawei WMI hotkeys.
+	  It enables the missing keys and adds support to the micmute
+	  LED found on some of these laptops.
+
+	  To compile this driver as a module, choose M here: the module
+	  will be called huawei-wmi.
+
 endif # X86_PLATFORM_DEVICES
 
 config PMC_ATOM
diff --git a/drivers/platform/x86/Makefile b/drivers/platform/x86/Makefile
index 39ae94135406..d841c550e3cc 100644
--- a/drivers/platform/x86/Makefile
+++ b/drivers/platform/x86/Makefile
@@ -32,6 +32,7 @@ obj-$(CONFIG_ACERHDF)		+= acerhdf.o
 obj-$(CONFIG_HP_ACCEL)		+= hp_accel.o
 obj-$(CONFIG_HP_WIRELESS)	+= hp-wireless.o
 obj-$(CONFIG_HP_WMI)		+= hp-wmi.o
+obj-$(CONFIG_HUAWEI_WMI)		+= huawei-wmi.o
 obj-$(CONFIG_AMILO_RFKILL)	+= amilo-rfkill.o
 obj-$(CONFIG_GPD_POCKET_FAN)	+= gpd-pocket-fan.o
 obj-$(CONFIG_TC1100_WMI)	+= tc1100-wmi.o
diff --git a/drivers/platform/x86/huawei-wmi.c b/drivers/platform/x86/huawei-wmi.c
new file mode 100644
index 000000000000..afa030fd1285
--- /dev/null
+++ b/drivers/platform/x86/huawei-wmi.c
@@ -0,0 +1,226 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ *  Huawei WMI hotkeys
+ *
+ *  Copyright (C) 2018	      Ayman Bagabas <ayman.bagabas@gmail.com>
+ */
+
+#include <linux/acpi.h>
+#include <linux/input.h>
+#include <linux/input/sparse-keymap.h>
+#include <linux/leds.h>
+#include <linux/module.h>
+#include <linux/wmi.h>
+
+/*
+ * Huawei WMI Events GUIDs
+ */
+#define WMI0_EVENT_GUID "59142400-C6A3-40fa-BADB-8A2652834100"
+#define AMW0_EVENT_GUID "ABBC0F5C-8EA1-11D1-A000-C90629100000"
+
+struct huawei_wmi_priv {
+	struct input_dev *idev;
+	struct led_classdev cdev;
+	acpi_handle handle;
+	char *acpi_method;
+};
+
+static const struct key_entry huawei_wmi_keymap[] = {
+	{ KE_KEY,    0x281, { KEY_BRIGHTNESSDOWN } },
+	{ KE_KEY,    0x282, { KEY_BRIGHTNESSUP } },
+	{ KE_KEY,    0x284, { KEY_MUTE } },
+	{ KE_KEY,    0x285, { KEY_VOLUMEDOWN } },
+	{ KE_KEY,    0x286, { KEY_VOLUMEUP } },
+	{ KE_KEY,    0x287, { KEY_MICMUTE } },
+	{ KE_KEY,    0x289, { KEY_WLAN } },
+	// Huawei |M| button
+	{ KE_KEY,    0x28a, { KEY_CONFIG } },
+	// Keyboard light
+	{ KE_IGNORE, 0x293, { KEY_KBDILLUMTOGGLE } },
+	{ KE_IGNORE, 0x294, { KEY_KBDILLUMUP } },
+	{ KE_IGNORE, 0x295, { KEY_KBDILLUMUP } },
+	{ KE_END,	 0 }
+};
+
+static int huawei_wmi_micmute_led_set(struct led_classdev *led_cdev,
+		enum led_brightness brightness)
+{
+	struct huawei_wmi_priv *priv = dev_get_drvdata(led_cdev->dev->parent);
+	acpi_status status;
+	union acpi_object args[3];
+	struct acpi_object_list arg_list = {
+		.pointer = args,
+		.count = ARRAY_SIZE(args),
+	};
+
+	args[0].type = args[1].type = args[2].type = ACPI_TYPE_INTEGER;
+	args[1].integer.value = 0x04;
+
+	if (strcmp(priv->acpi_method, "SPIN") == 0) {
+		args[0].integer.value = 0;
+		args[2].integer.value = brightness ? 1 : 0;
+	} else if (strcmp(priv->acpi_method, "WPIN") == 0) {
+		args[0].integer.value = 1;
+		args[2].integer.value = brightness ? 0 : 1;
+	} else {
+		return -EINVAL;
+	}
+
+	status = acpi_evaluate_object(priv->handle, priv->acpi_method, &arg_list, NULL);
+	if (ACPI_FAILURE(status))
+		return -ENXIO;
+
+	return 0;
+}
+
+static int huawei_wmi_leds_setup(struct wmi_device *wdev)
+{
+	struct huawei_wmi_priv *priv = dev_get_drvdata(&wdev->dev);
+	acpi_status status;
+
+	// Skip registering LED subsystem if no ACPI method was found.
+	status = acpi_get_handle(NULL, "\\_SB.PCI0.LPCB.EC0", &priv->handle);
+	if (ACPI_FAILURE(status))
+		return 0;
+
+	if (acpi_has_method(priv->handle, "SPIN"))
+		priv->acpi_method = "SPIN";
+	else if (acpi_has_method(priv->handle, "WPIN"))
+		priv->acpi_method = "WPIN";
+	else
+		return 0;
+
+	priv->cdev.name = "platform::micmute";
+	priv->cdev.max_brightness = 1;
+	priv->cdev.brightness_set_blocking = huawei_wmi_micmute_led_set;
+	priv->cdev.default_trigger = "audio-micmute";
+	priv->cdev.brightness = ledtrig_audio_get(LED_AUDIO_MICMUTE);
+	priv->cdev.dev = &wdev->dev;
+	priv->cdev.flags = LED_CORE_SUSPENDRESUME;
+
+	return devm_led_classdev_register(&wdev->dev, &priv->cdev);
+}
+
+static void huawei_wmi_process_key(struct wmi_device *wdev, int code)
+{
+	struct huawei_wmi_priv *priv = dev_get_drvdata(&wdev->dev);
+	const struct key_entry *key;
+
+	/*
+	 * WMI0 uses code 0x80 to indicate a hotkey event.
+	 * The actual key is fetched from the method WQ00.
+	 */
+	if (code == 0x80) {
+		acpi_status status;
+		acpi_handle handle;
+		unsigned long long result;
+		union acpi_object args[1];
+		struct acpi_object_list arg_list = {
+			.pointer = args,
+			.count = ARRAY_SIZE(args),
+		};
+
+		args[0].type = ACPI_TYPE_INTEGER;
+		args[0].integer.value = 0;
+
+		status = acpi_get_handle(NULL, "\\WMI0", &handle);
+		if (ACPI_FAILURE(status)) {
+			dev_err(&wdev->dev, "Unable to get ACPI handle\n");
+			return;
+		}
+
+		status = acpi_evaluate_integer(NULL, "WQ00", &arg_list, &result);
+		if (ACPI_FAILURE(status)) {
+			dev_err(&wdev->dev, "Unable to evaluate ACPI method\n");
+			return;
+		}
+
+		code = result;
+	}
+
+	key = sparse_keymap_entry_from_scancode(priv->idev, code);
+	if (!key) {
+		dev_info(&wdev->dev, "Unknown key pressed, code: 0x%04x\n", code);
+		return;
+	}
+
+	sparse_keymap_report_entry(priv->idev, key, 1, true);
+}
+
+static void huawei_wmi_notify(struct wmi_device *wdev,
+		union acpi_object *obj)
+{
+	if (obj->type == ACPI_TYPE_INTEGER)
+		huawei_wmi_process_key(wdev, obj->integer.value);
+	else
+		dev_info(&wdev->dev, "Bad response type %d\n", obj->type);
+}
+
+static int huawei_wmi_input_setup(struct wmi_device *wdev)
+{
+	struct huawei_wmi_priv *priv = dev_get_drvdata(&wdev->dev);
+	int err;
+
+	priv->idev = devm_input_allocate_device(&wdev->dev);
+	if (!priv->idev)
+		return -ENOMEM;
+
+	priv->idev->name = "Huawei WMI hotkeys";
+	priv->idev->phys = "wmi/input0";
+	priv->idev->id.bustype = BUS_HOST;
+	priv->idev->dev.parent = &wdev->dev;
+
+	err = sparse_keymap_setup(priv->idev, huawei_wmi_keymap, NULL);
+	if (err)
+		return err;
+
+	err = input_register_device(priv->idev);
+	if (err)
+		return err;
+
+	return 0;
+}
+
+static int huawei_wmi_probe(struct wmi_device *wdev)
+{
+	struct huawei_wmi_priv *priv;
+	int err;
+
+	priv = devm_kzalloc(&wdev->dev, sizeof(struct huawei_wmi_priv), GFP_KERNEL);
+	if (!priv)
+		return -ENOMEM;
+	dev_set_drvdata(&wdev->dev, priv);
+
+	err = huawei_wmi_input_setup(wdev);
+	if (err)
+		return err;
+
+	err = huawei_wmi_leds_setup(wdev);
+	if (err)
+		return err;
+
+	return 0;
+}
+
+static const struct wmi_device_id huawei_wmi_id_table[] = {
+	{ .guid_string = WMI0_EVENT_GUID },
+	{ .guid_string = AMW0_EVENT_GUID },
+	{  }
+};
+
+static struct wmi_driver huawei_wmi_driver = {
+	.driver = {
+		.name = "huawei-wmi",
+	},
+	.id_table = huawei_wmi_id_table,
+	.probe = huawei_wmi_probe,
+	.notify = huawei_wmi_notify,
+};
+
+module_wmi_driver(huawei_wmi_driver);
+
+MODULE_ALIAS("wmi:"WMI0_EVENT_GUID);
+MODULE_ALIAS("wmi:"AMW0_EVENT_GUID);
+MODULE_AUTHOR("Ayman Bagabas <ayman.bagabas@gmail.com>");
+MODULE_DESCRIPTION("Huawei WMI hotkeys");
+MODULE_LICENSE("GPL v2");
-- 
2.19.2

