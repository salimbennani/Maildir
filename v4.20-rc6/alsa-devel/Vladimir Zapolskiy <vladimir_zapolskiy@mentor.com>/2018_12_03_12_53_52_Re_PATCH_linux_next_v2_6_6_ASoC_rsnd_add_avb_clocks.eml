Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 04 Dec 2018 08:52:23 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 2ABDD580578;
	Mon,  3 Dec 2018 04:57:43 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 03 Dec 2018 04:57:43 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ARPboNhMZz4n8OvX1Z40l6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KPn/o8bcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Xymp4aV2Rx/ykC?=
 =?us-ascii?q?oJKiA38G/XhMJzgqxUrh2uqB5jzIDbYYGVL+J+c6HGcNMGRmdMRNpdWzBPD46+?=
 =?us-ascii?q?aYYEEuoPPfxfr4n4v1YBoh++ChOxC+Puzz9Ih2X21rA53Os7CQHG2wggH8kNsH?=
 =?us-ascii?q?TVrNT+KaAfUf6xzKbS0DrDbvZW2Tbn6IfQcxEuu+mMXbV0ccrKykkvFgPEg06V?=
 =?us-ascii?q?qYP7OTOVyuMNs3KB4+V8UuKvjncqpgdsqTas3schkpfFip4Rx1ze6Cl0zpg5Kc?=
 =?us-ascii?q?elREN4fdKoCppduiOCO4drTM4vQXtktDgmxrEYo5K3YDIGxZA7yxPZdveJaZKH?=
 =?us-ascii?q?4gj5W+aUOTp4hGxqeLa4hxuq70igxfPzVtOu3FZJsCVFiN/MuW4J1xDJ7ciHUP?=
 =?us-ascii?q?R98l+g2TaJyQ/T9vlJLV4omaffMZIt37A9moQJvUjeHSL6hF/6ga6Ue0k8/+in?=
 =?us-ascii?q?8eXnYrHopp+GMI90jxnzMqAvmsy5HOQ5PRECX2uF9uSm0r3s40n5TKxNjvw4lK?=
 =?us-ascii?q?nWroraKN8Fpq62HQBVyJwv6xWhADe81tQXg30HIEhCeBKdgIjlI0vOL+zgDfej?=
 =?us-ascii?q?n1Ssly9mx/THPr3iHJrBNHfCkKr6cLZ56k5czhczzN9F65JVDLEBPOz8WkvruN?=
 =?us-ascii?q?PECR85NhS+w/z7B9VlyoMeRWWPD7eZMKzIsF+I+vggI+6WaI8VpTbyMf4l5/H1?=
 =?us-ascii?q?gH89mF8de7Sp3JQNZHC5GPRmP1uWYX72jtgdFmcKuxI0TPb2h12aTT5Te3GyUr?=
 =?us-ascii?q?o+5jE8Fo2qF4TDRoergLyH2ye2BZlWZmFAClCRHnbkbYSEW/EQaC2MJs9tiCAL?=
 =?us-ascii?q?Vb+kS4U5zxGhqBf6y6Z7LurT4iAXr4nj1Nhy5+3Qjx0y7yZ7D8aG3mGJTmF0mH?=
 =?us-ascii?q?4IRjAs0KB+p0x91kmM0axij/NEEtxT4utDUh0mOp7E0+x6F9fyVxrCftiTTlaq?=
 =?us-ascii?q?WNGmATArQdI3zN8DeEJ9G9SkjhDe0CumGb4Vl7qXBJMq9qLQxWT+J8F4y3zezq?=
 =?us-ascii?q?kuk0EmQtdTNW2hnqNw6hLcB5DXnEmDl6alb6Ic3DXT+2eFymaOuEJYUAt0Uaje?=
 =?us-ascii?q?WXAfZ03Wrcn250/YTr+uD6gnPRVFycKYNqRKbdjph01cRPj/INTef36xm2CoCB?=
 =?us-ascii?q?mV3LyMcpTld38d3CrHDkgEiB4c/XCdOAg6ByehpX/eDTN0GVLuZUPs7fdxqHeh?=
 =?us-ascii?q?QkAoyAGKalVr16Cp9R4NmfycV/QT06oYuCcgrjV0G0q939LWCtaauwptZqJcYc?=
 =?us-ascii?q?k54FdG02LZuBdwPpihL6Bkm14ffB57v0Lo1xVrFIpAldImo28tzAp3MaiYyk9O?=
 =?us-ascii?q?dyuE3ZDsPb3aMnP9/BSxZK/ZxF7f0Mya9bwS6PslsVrjugKpFk0883h819lV0n?=
 =?us-ascii?q?2c5ojFDQYIUJLxVFo3+AZ+p73AfiY94IbU32V2Maaoqj/Cx84pBOw9xxegYtdT?=
 =?us-ascii?q?Kr+LGBXzEs0aHceuLuMqlkOtbhIFOuBS6aE1M9mnd/uAxK6kIuJgkCi6gmRA5Y?=
 =?us-ascii?q?B3yliM+DZkSu7Uw5YFxOmV3hGGVzjgllihqN34mYdeaTEUAGW/0ynkCJdNaaJo?=
 =?us-ascii?q?eYYEFHmhI9ewxtV4nJPtX39Y9Fi+B1IJwsOpeBySb0Dj0g1Uz0gYvXunmS6gxT?=
 =?us-ascii?q?xujz4ptraf3DDJw+n6dBsHO3RHRWl4gVf3PIi0icsXXEypbwgviRuk6lz2x6ld?=
 =?us-ascii?q?pKRjMWbTRV1EcDTxL2FnSqGwrKaNY9ZT6JM0tiVaSOa8bkqASr7+oBsa1DnvH3?=
 =?us-ascii?q?BEyzA4dDGqu5P5kAJ8iG+GKHZzrXzZedx/xBvF5dzcQ+JR0SQCRCVilTbXAV28?=
 =?us-ascii?q?NcGz/dqIj5fDrvy+V2W5W5xTaybrypmMtCm65W1sGhC/m/Gzmtv6EQk1yyP71t?=
 =?us-ascii?q?9qVTnWoxb4eIXky6O6Med/dElyGFD889Z6Gp15koYoh5Efw3kaio+V/Xoai2jz?=
 =?us-ascii?q?N9pb1Ln6bHoMQz4L3tHU7BLk2E1lMnKG2Yb5Wm+BzctmYtmwenkW1T4l78BWFK?=
 =?us-ascii?q?eU66RJnS50olq7tw3de/Z8kSkGyfsy9nEamfoGtxQ3ziWSGb0SGUhYPSrxlxWH?=
 =?us-ascii?q?9dy+raNXZHqxfri0zkZxgdehDLSaqAFGRHn5YosiHTN37shnLFLM13jz5pvled?=
 =?us-ascii?q?bKa9ITqwaUkwzBj+VOLJIxl/wKhTdoOG7nvH0lzfI7ggJq3Z2goIeHLGBt9rqj?=
 =?us-ascii?q?AhFELj31e98T+jb1gKlFhMmW2ISvHoh7FjUPQZvlVvaoEDMUtfT6OAeCCjw8qn?=
 =?us-ascii?q?GHGbXBGQ+T8ltpr3XKE5qzLXGYOGEZzcl+RBmaPEFfghobXDAkkZ4iDAyq2Nbt?=
 =?us-ascii?q?cERk5jAS+174rAFDyvlzOhn7U2ffohqoazguRJieKhpW8h9N50PPPcOC6eJzGj?=
 =?us-ascii?q?lS/oe9owyVNmybewNIAHkJW0yDGlDjJ6Su6sPG8+SCHeq+KP3OYbqVpOxaVveI?=
 =?us-ascii?q?w4+v04R88zaNMMWPImdtD/kh1kVfWnB5HtzTmy8TRCwPiyLNc8mbqQ+8+iJpr8?=
 =?us-ascii?q?C/8/frWAP16YuMEbtSNtpv9A6sgaeeLO6dnyJ5KTde1pMRyn7E0rkf3FgOiy5w?=
 =?us-ascii?q?czmhC6gPtSnITKjIgK9YEwYbaz9vNMtP968zxBRNNtXBitzr1r90lPo1C1ZeWF?=
 =?us-ascii?q?zlm8GpY9EKIm6nOFPGAkaLKKqJJTnRz87rZqO8TKVajP9IuB2opTabD0jjMyyf?=
 =?us-ascii?q?lznoUhCjK/1DgDuHMxxepo69dA1gCWziTNLgdx26P8V7jTwwwb0omHzKMXQQPi?=
 =?us-ascii?q?R7c0NItreQ9z9Xgu1jG2xd6XpoNemFlDyf7+ndK5YWt+NkAyV0l+1A5nQ6xKBY?=
 =?us-ascii?q?7CVFRPxzhSvTocRio1CgkumT1DVnVABCpSpMhIKO7g1ePvCN9JhJVX/z4xsL4k?=
 =?us-ascii?q?2VBhIWoMEjAdrq7eQYntLVk6X1KTpq8N/O+8YYQc/OJ5TDeC45PADkCBbMAREI?=
 =?us-ascii?q?XXigJzebzxhBke6b91WOs4M37JPrncxKAutYSVo0EPQACwJgG8YDJZBrWXUrgZ?=
 =?us-ascii?q?aBgcgF/nOl6hLWQZMJkIrAU6esBfzjKTOYl/F2bgMPxaj7LJVbYpP/0kBjb1hg?=
 =?us-ascii?q?q5bDA03URtNMswVkYwkop18L+397GD5gk3n5Yx+gtSdAXcW/mQQ731Nz?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AgAAAEKAVch0O0hNFiGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBVAMBAQELAYJpgQIUEwqDb4h3jQstFIMxlBeBYhEYAxABiAMiNwYNAQM?=
 =?us-ascii?q?BAQEBAQECARMBAQEKCwkIKSMMgjYigmQBAQEBAwECIAQLAUYGCQEBChUDAgImA?=
 =?us-ascii?q?gIDRBAGAQwBBQICAYMcAYIBBaR8fDOEAgGBPYRfgQuLEYIWgREngmuERiODHIJ?=
 =?us-ascii?q?XAo8ukRIJBYIZAQQDhFqKNgYYgVtNhESCf4c7iQSBA45mgVyBd00jgzwJgh4Xi?=
 =?us-ascii?q?BuFSwE4cAGBBAEBIYksAYEeAQE?=
X-IPAS-Result: =?us-ascii?q?A0AgAAAEKAVch0O0hNFiGwEBAQEDAQEBBwMBAQGBVAMBAQE?=
 =?us-ascii?q?LAYJpgQIUEwqDb4h3jQstFIMxlBeBYhEYAxABiAMiNwYNAQMBAQEBAQECARMBA?=
 =?us-ascii?q?QEKCwkIKSMMgjYigmQBAQEBAwECIAQLAUYGCQEBChUDAgImAgIDRBAGAQwBBQI?=
 =?us-ascii?q?CAYMcAYIBBaR8fDOEAgGBPYRfgQuLEYIWgREngmuERiODHIJXAo8ukRIJBYIZA?=
 =?us-ascii?q?QQDhFqKNgYYgVtNhESCf4c7iQSBA45mgVyBd00jgzwJgh4XiBuFSwE4cAGBBAE?=
 =?us-ascii?q?BIYksAYEeAQE?=
X-IronPort-AV: E=Sophos;i="5.56,310,1539673200"; 
   d="scan'208";a="54658564"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 03 Dec 2018 04:57:41 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726588AbeLCM6e (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 3 Dec 2018 07:58:34 -0500
Received: from relay1.mentorg.com ([192.94.38.131]:43097 "EHLO
        relay1.mentorg.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726386AbeLCM6e (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 3 Dec 2018 07:58:34 -0500
Received: from nat-ies.mentorg.com ([192.94.31.2] helo=SVR-IES-MBX-04.mgc.mentorg.com)
        by relay1.mentorg.com with esmtps (TLSv1.2:ECDHE-RSA-AES256-SHA384:256)
        id 1gTnjY-0004u4-VG from Vladimir_Zapolskiy@mentor.com ; Mon, 03 Dec 2018 04:53:57 -0800
Received: from [137.202.108.125] (137.202.0.90) by
 SVR-IES-MBX-04.mgc.mentorg.com (139.181.222.4) with Microsoft SMTP Server
 (TLS) id 15.0.1320.4; Mon, 3 Dec 2018 12:53:52 +0000
Subject: Re: [PATCH linux-next v2 6/6] ASoC: rsnd: add avb clocks
To: <jiada_wang@mentor.com>, <broonie@kernel.org>, <perex@perex.cz>,
        <tiwai@suse.com>, <kuninori.morimoto.gx@renesas.com>
References: <20181203112427.18324-1-jiada_wang@mentor.com>
CC: <alsa-devel@alsa-project.org>, <linux-kernel@vger.kernel.org>
From: Vladimir Zapolskiy <vladimir_zapolskiy@mentor.com>
Message-ID: <e42bdbde-0d1a-eb1f-58af-ef4cf468ac38@mentor.com>
Date: Mon, 3 Dec 2018 14:53:52 +0200
User-Agent: Mozilla/5.0 (X11; Linux i686; rv:45.0) Gecko/20100101
 Icedove/45.2.0
MIME-Version: 1.0
In-Reply-To: <20181203112427.18324-1-jiada_wang@mentor.com>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 8bit
X-Originating-IP: [137.202.0.90]
X-ClientProxiedBy: SVR-IES-MBX-08.mgc.mentorg.com (139.181.222.8) To
 SVR-IES-MBX-04.mgc.mentorg.com (139.181.222.4)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi Jiada,

On 12/03/2018 01:24 PM, jiada_wang@mentor.com wrote:
> From: Jiada Wang <jiada_wang@mentor.com>
> 
> There are AVB Counter Clocks in ADG, each clock has 12bits integral
> and 8 bits fractional dividers which operates with S0D1Ï• clock.
> 
> This patch registers 8 AVB Counter Clocks when clock-cells of
> rcar_sound node is 2,
> 
> Signed-off-by: Jiada Wang <jiada_wang@mentor.com>
> ---
>  sound/soc/sh/rcar/adg.c  | 306 +++++++++++++++++++++++++++++++++++++--
>  sound/soc/sh/rcar/gen.c  |   9 ++
>  sound/soc/sh/rcar/rsnd.h |   9 ++
>  3 files changed, 315 insertions(+), 9 deletions(-)
> 
> diff --git a/sound/soc/sh/rcar/adg.c b/sound/soc/sh/rcar/adg.c
> index 6768a66588eb..2c03d420ae76 100644
> --- a/sound/soc/sh/rcar/adg.c
> +++ b/sound/soc/sh/rcar/adg.c
> @@ -5,6 +5,8 @@
>  //  Copyright (C) 2013  Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
>  
>  #include <linux/clk-provider.h>
> +#include <linux/of_address.h>
> +#include <dt-bindings/clock/renesas-adg.h>

Drop the inclusion of the header above, see my comment to patch 5/6.

>  #include "rsnd.h"
>  
>  #define CLKA	0
> @@ -21,13 +23,33 @@
>  
>  #define BRRx_MASK(x) (0x3FF & x)
>  
> +#define ADG_CLK_NAME		"adg"
> +#define AVB_CLK_NAME		"avb"

Can you please remove two macro above and replace their usage by values in 
clk_register_avb() function?

Also I don't think that it is good to hardcode parent clock name here,
likely you should get it in runtime, see __clk_get_name().

> +#define AVB_CLK_NUM		8
> +#define AVB_CLK_NAME_SIZE	10

The one macro above also can be removed in my opinion.

> +#define AVB_MAX_RATE		25000000
> +#define AVB_DIV_EN_COM		BIT(31)
> +#define AVB_DIV_MASK		0x3ffff
> +#define AVB_MAX_DIV		0x3ffc0
> +
>  static struct rsnd_mod_ops adg_ops = {
>  	.name = "adg",
>  };
>  
> +struct clk_avb {
> +	struct clk_hw hw;
> +	unsigned int idx;
> +	struct rsnd_mod *mod;
> +	/* lock reg access */
> +	spinlock_t *lock;
> +};
> +
> +#define to_clk_avb(_hw) container_of(_hw, struct clk_avb, hw)
> +
>  struct rsnd_adg {
>  	struct clk *clk[CLKMAX];
>  	struct clk *clkout[CLKOUTMAX];
> +	struct clk *clkavb[AVB_CLK_NUM];
>  	struct clk_onecell_data onecell;
>  	struct rsnd_mod mod;
>  	u32 flags;
> @@ -37,6 +59,7 @@ struct rsnd_adg {
>  
>  	int rbga_rate_for_441khz; /* RBGA */
>  	int rbgb_rate_for_48khz;  /* RBGB */
> +	spinlock_t avb_lock;
>  };
>  
>  #define LRCLK_ASYNC	(1 << 0)
> @@ -408,6 +431,239 @@ void rsnd_adg_clk_control(struct rsnd_priv *priv, int enable)
>  	}
>  }
>  
> +static struct clk *rsnd_adg_clk_src_twocell_get(struct of_phandle_args *clkspec,
> +						void *data)
> +{
> +	unsigned int clkidx = clkspec->args[1];
> +	struct rsnd_adg *adg = data;
> +	const char *type;
> +	struct clk *clk;
> +
> +	switch (clkspec->args[0]) {
> +	case ADG_FIX:
> +		type = "fixed";

Apparently you need 'type' local variable just to print an error message.

Please remove the variable and update format strings accordingly.

> +		if (clkidx >= CLKOUTMAX) {
> +			pr_err("Invalid %s clock index %u\n", type,
> +			       clkidx);
> +			return ERR_PTR(-EINVAL);
> +		}
> +		clk = adg->clkout[clkidx];
> +		break;
> +	case ADG_AVB:
> +		type = "avb";
> +		if (clkidx >= AVB_CLK_NUM) {
> +			pr_err("Invalid %s clock index %u\n", type,
> +			       clkidx);
> +			return ERR_PTR(-EINVAL);
> +		}
> +		clk = adg->clkavb[clkidx];
> +		break;
> +	default:
> +		pr_err("Invalid ADG clock type %u\n", clkspec->args[0]);
> +		return ERR_PTR(-EINVAL);
> +	}
> +
> +	return clk;
> +}
> +
> +static void clk_avb_div_write(struct rsnd_mod *mod, u32 data, int idx)

unsigned int idx to match a type of 'struct clk_avb' field.

> +{
> +	switch (idx) {
> +	case 0:
> +		rsnd_mod_write(mod, AVB_CLK_DIV0, data);
> +		break;
> +	case 1:
> +		rsnd_mod_write(mod, AVB_CLK_DIV1, data);
> +		break;
> +	case 2:
> +		rsnd_mod_write(mod, AVB_CLK_DIV2, data);
> +		break;
> +	case 3:
> +		rsnd_mod_write(mod, AVB_CLK_DIV3, data);
> +		break;
> +	case 4:
> +		rsnd_mod_write(mod, AVB_CLK_DIV4, data);
> +		break;
> +	case 5:
> +		rsnd_mod_write(mod, AVB_CLK_DIV5, data);
> +		break;
> +	case 6:
> +		rsnd_mod_write(mod, AVB_CLK_DIV6, data);
> +		break;
> +	case 7:
> +		rsnd_mod_write(mod, AVB_CLK_DIV7, data);
> +		break;
> +	}
> +}
> +
> +static u32 clk_avb_div_read(struct rsnd_mod *mod, int idx)

unsigned int idx to match a type of 'struct clk_avb' field.

> +{
> +	u32 val = 0;
> +
> +	switch (idx) {
> +	case 0:
> +		val = rsnd_mod_read(mod, AVB_CLK_DIV0);
> +		break;
> +	case 1:
> +		val = rsnd_mod_read(mod, AVB_CLK_DIV1);
> +		break;
> +	case 2:
> +		val = rsnd_mod_read(mod, AVB_CLK_DIV2);
> +		break;
> +	case 3:
> +		val = rsnd_mod_read(mod, AVB_CLK_DIV3);
> +		break;
> +	case 4:
> +		val = rsnd_mod_read(mod, AVB_CLK_DIV4);
> +		break;
> +	case 5:
> +		val = rsnd_mod_read(mod, AVB_CLK_DIV5);
> +		break;
> +	case 6:
> +		val = rsnd_mod_read(mod, AVB_CLK_DIV6);
> +		break;
> +	case 7:
> +		val = rsnd_mod_read(mod, AVB_CLK_DIV7);
> +		break;
> +	}
> +
> +	return val;
> +}

Apparently the macro nature of rsnd_mod_read() and rsnd_mod_write()
does not allow to define a helper mapping function from index into
RSND_REG_AVB_CLK_DIVx, okay...

> +
> +static int clk_avb_is_enabled(struct clk_hw *hw)
> +{
> +	struct clk_avb *avb = to_clk_avb(hw);
> +
> +	return rsnd_mod_read(avb->mod, AVB_CLK_CONFIG) & BIT(avb->idx);
> +}
> +
> +static int clk_avb_enabledisable(struct clk_hw *hw, int enable)
> +{
> +	struct clk_avb *avb = to_clk_avb(hw);
> +	u32 val;
> +
> +	spin_lock(avb->lock);
> +
> +	val = rsnd_mod_read(avb->mod, AVB_CLK_CONFIG);
> +	if (enable)
> +		val |= BIT(avb->idx);
> +	else
> +		val &= ~BIT(avb->idx);
> +	rsnd_mod_write(avb->mod, AVB_CLK_CONFIG,  val);
> +
> +	spin_unlock(avb->lock);
> +
> +	return 0;
> +}
> +
> +static int clk_avb_enable(struct clk_hw *hw)
> +{
> +	return clk_avb_enabledisable(hw, 1);
> +}
> +
> +static void clk_avb_disable(struct clk_hw *hw)
> +{
> +	clk_avb_enabledisable(hw, 0);
> +}
> +
> +static unsigned long clk_avb_recalc_rate(struct clk_hw *hw,
> +					 unsigned long parent_rate)
> +{
> +	struct clk_avb *avb = to_clk_avb(hw);
> +	u32 div;
> +
> +	div = clk_avb_div_read(avb->mod, avb->idx) & AVB_DIV_MASK;
> +	if (!div)
> +		return parent_rate;
> +
> +	return parent_rate * 32 / div;
> +}
> +
> +static unsigned int clk_avb_calc_div(unsigned long rate,
> +				     unsigned long parent_rate)
> +{
> +	unsigned int div;
> +
> +	if (!rate)
> +		rate = 1;
> +
> +	if (rate > AVB_MAX_RATE)
> +		rate = AVB_MAX_RATE;
> +
> +	div = DIV_ROUND_CLOSEST(parent_rate * 32, rate);
> +
> +	if (div > AVB_MAX_DIV)
> +		div = AVB_MAX_DIV;
> +
> +	return div;
> +}
> +
> +static long clk_avb_round_rate(struct clk_hw *hw, unsigned long rate,
> +			       unsigned long *parent_rate)
> +{
> +	unsigned int div = clk_avb_calc_div(rate, *parent_rate);
> +
> +	return (*parent_rate * 32) / div;
> +}
> +
> +static int clk_avb_set_rate(struct clk_hw *hw, unsigned long rate,
> +			    unsigned long parent_rate)
> +{
> +	struct clk_avb *avb = to_clk_avb(hw);
> +	unsigned int div = clk_avb_calc_div(rate, parent_rate);
> +	u32 val;
> +
> +	val = clk_avb_div_read(avb->mod, avb->idx) & ~AVB_DIV_MASK;
> +	clk_avb_div_write(avb->mod, val | div, avb->idx);
> +
> +	return 0;
> +}
> +
> +static const struct clk_ops clk_avb_ops = {
> +	.enable = clk_avb_enable,
> +	.disable = clk_avb_disable,
> +	.is_enabled = clk_avb_is_enabled,
> +	.recalc_rate = clk_avb_recalc_rate,
> +	.round_rate = clk_avb_round_rate,
> +	.set_rate = clk_avb_set_rate,
> +};
> +
> +static struct clk *clk_register_avb(struct device *dev, struct rsnd_mod *mod,
> +				    unsigned int id, spinlock_t *lock)
> +{
> +	struct clk_init_data init;
> +	struct clk_avb *avb;
> +	struct clk *clk;
> +	char name[AVB_CLK_NAME_SIZE];
> +	const char *parent_name = ADG_CLK_NAME;
> +
> +	avb = devm_kzalloc(dev, sizeof(*avb), GFP_KERNEL);
> +	if (!avb)
> +		return ERR_PTR(-ENOMEM);
> +
> +	snprintf(name, AVB_CLK_NAME_SIZE, "%s%u", AVB_CLK_NAME, id);
> +
> +	avb->idx = id;
> +	avb->lock = lock;
> +	avb->mod = mod;
> +
> +	/* Register the clock. */
> +	init.name = name;
> +	init.ops = &clk_avb_ops;
> +	init.flags = CLK_IS_BASIC;
> +	init.parent_names = &parent_name;
> +	init.num_parents = 1;
> +
> +	avb->hw.init = &init;
> +
> +	/* init DIV to a valid state */
> +	clk_avb_div_write(avb->mod, avb->idx, AVB_MAX_DIV);
> +
> +	clk = devm_clk_register(dev, &avb->hw);
> +
> +	return clk;
> +}
> +
>  static void rsnd_adg_get_clkin(struct rsnd_priv *priv,
>  			       struct rsnd_adg *adg)
>  {
> @@ -436,6 +692,7 @@ static void rsnd_adg_get_clkout(struct rsnd_priv *priv,
>  	unsigned long req_48kHz_rate, req_441kHz_rate;
>  	int i, req_size;
>  	const char *parent_clk_name = NULL;
> +	struct rsnd_mod *mod = rsnd_mod_get(adg);
>  	static const char * const clkout_name[] = {
>  		[CLKOUT]  = "audio_clkout",
>  		[CLKOUT1] = "audio_clkout1",
> @@ -540,21 +797,23 @@ static void rsnd_adg_get_clkout(struct rsnd_priv *priv,
>  	 */
>  
>  	of_property_read_u32(np, "#clock-cells", &count);
> -	/*
> -	 * for clkout
> -	 */
> -	if (!count) {
> +
> +	switch (count) {
> +	case 0:
> +		/*
> +		 * for clkout
> +		 */
>  		clk = clk_register_fixed_rate(dev, clkout_name[CLKOUT],
>  					      parent_clk_name, 0, req_rate[0]);
>  		if (!IS_ERR(clk)) {
>  			adg->clkout[CLKOUT] = clk;
>  			of_clk_add_provider(np, of_clk_src_simple_get, clk);
>  		}
> -	}
> -	/*
> -	 * for clkout0/1/2/3
> -	 */
> -	else {
> +		break;
> +	case 1:
> +		/*
> +		 * for clkout0/1/2/3
> +		 */
>  		for (i = 0; i < CLKOUTMAX; i++) {
>  			clk = clk_register_fixed_rate(dev, clkout_name[i],
>  						      parent_clk_name, 0,
> @@ -566,6 +825,33 @@ static void rsnd_adg_get_clkout(struct rsnd_priv *priv,
>  		adg->onecell.clk_num	= CLKOUTMAX;
>  		of_clk_add_provider(np, of_clk_src_onecell_get,
>  				    &adg->onecell);
> +		break;
> +	case 2:
> +		/*
> +		 * for clkout0/1/2/3 and avb clocks
> +		 */
> +		for (i = 0; i < CLKOUTMAX; i++) {
> +			clk = clk_register_fixed_rate(dev, clkout_name[i],
> +						      parent_clk_name, 0,
> +						      req_rate[0]);
> +			if (!IS_ERR(clk))
> +				adg->clkout[i] = clk;
> +		}
> +
> +		for (i = 0; i < AVB_CLK_NUM; i++) {
> +			clk = clk_register_avb(dev, mod, i, &adg->avb_lock);
> +			if (!IS_ERR(clk))
> +				adg->clkavb[i] = clk;
> +		}
> +
> +		of_clk_add_provider(np, rsnd_adg_clk_src_twocell_get, adg);
> +
> +		rsnd_mod_write(mod, AVB_CLK_CONFIG, AVB_DIV_EN_COM);
> +
> +		break;
> +	default:
> +		dev_err(dev, "Invalid clock-cell %d\n", count);
> +		break;
>  	}
>  
>  rsnd_adg_get_clkout_end:
> @@ -612,6 +898,8 @@ int rsnd_adg_probe(struct rsnd_priv *priv)
>  	if (!adg)
>  		return -ENOMEM;
>  
> +	spin_lock_init(&adg->avb_lock);
> +
>  	ret = rsnd_mod_init(priv, &adg->mod, &adg_ops,
>  		      NULL, 0, 0);
>  	if (ret)

--
Best wishes,
Vladimir
