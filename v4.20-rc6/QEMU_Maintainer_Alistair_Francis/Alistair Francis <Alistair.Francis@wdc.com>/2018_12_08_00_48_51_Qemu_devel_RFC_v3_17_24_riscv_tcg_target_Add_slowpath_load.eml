Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 09 Dec 2018 18:54:30 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id B8CD45804F7
	for <like.xu@linux.intel.com>; Fri,  7 Dec 2018 16:59:26 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 07 Dec 2018 16:59:26 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A8FUhBRYQEF8VKQuLLwW+j+f/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZps27Zx7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v6bpgRh31hy?=
 =?us-ascii?q?cdLzM38H/ZitB+gqxYrhKupRtxw4/Ib4+aO/VwY7vdcNEYS2dOQ8pcWTBNDZ2n?=
 =?us-ascii?q?b4YUE+oBJPxVo5XnqlcSsBezAxSnCuP1yj9Pg3/7xbE30+AgEQHdwAwvBdMOsG?=
 =?us-ascii?q?7Jp9v1LqcdS+a1w7XJzTXYcvhb3ivw6IzJchA6vfGDR7NwcdDLxUcvDQPKlFOQ?=
 =?us-ascii?q?ppDkPzOOzekMvXWU4PZ6We2zjG4nrhh8rz6yzckijYnJg5gaylHC9ShhxoY1It?=
 =?us-ascii?q?u4SEF9Yd65CpdQsDuaN4RwT8g/QG9ooD43xqMatZO4ZiQG1Ykryh3FZ/CZfYWF?=
 =?us-ascii?q?4gjvWPuTLDtgmX5ofLayiwys/UWgyuDwTMa53VlQoiZbktTAqmgB1xLN5cWEVv?=
 =?us-ascii?q?dw+0Ks1iuS2w3d9+5JJF04mK7GJJMvx7MwmIYcvEDNEyLzhkn5krOZe0Ui9+O1?=
 =?us-ascii?q?8eroeK/mqYWZN4JsigHxLKAumsunDOQ8MwgORHSb+f+m2L3s+035Xa9Gjvoskq?=
 =?us-ascii?q?nWqJzaJMIbqbClAwJNzIov9xWyAy273NgFnnQLNkxJdRyHgoTzJl3DIuj0DfKl?=
 =?us-ascii?q?jFStlDdryerGPrrkApjVN3jMjrLhfatk50FB1gUz085Q55ZNBr4aJ/LzR0nxu8?=
 =?us-ascii?q?DGAR8iNAC0x+fnCNZj2Y8EVmOPH7eUMKfTsV+O++IuLPOAZI4TuDbhNfcl4+Ti?=
 =?us-ascii?q?gmM+mV8YZqSp25wXaHa3HvRgPkWVe33sgs0OEWsSpAoxUPTqiEGeUT5Uf3uyW6?=
 =?us-ascii?q?M85jIlB468AobDW5uggLiA3Ce9A51XaXpKClGKEXf0aYqEX+0AZz6VIs9kwXQ5?=
 =?us-ascii?q?U6O8QdohyQ22r129jL5mNfbPvCsfs53lyZ5y/eKUkBgz8Tl9CYOay32MSGdv2X?=
 =?us-ascii?q?oFQiJz0K1hrEgu91GYzKIthvVZEcBUtepEVxp/OZPCwug/Ed3rRw/aYv+PT1Cp?=
 =?us-ascii?q?RMjgBis+Gcksyd0DaFooBtO5kxrY1DCrCbJGq7veToU597+Z03XvKsJVzXHA26?=
 =?us-ascii?q?88yV48TYEHYXSrg7M6+wXNCorhlUKfmKC3M6MG03iJvC2awG+T+VtZSwVueaPC?=
 =?us-ascii?q?W38Zew3Rt9uzrhfbQrqzTK4mKQBf4ciFLKRMd5vul1oQF9n5P9GLSmawgHu5BA?=
 =?us-ascii?q?zA6KmFaoHrYC1J9SHcE1QNkhpV02yPMwM/HQ++r2mYBztrQwG8K3jw+PVz/Svo?=
 =?us-ascii?q?BnQ/yBuHOhVs?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AaAACxFgtcmBHrdtBkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgTBQaXA5Coc3A4RPX4poSoFogSGWU4EkA08QARgLCYddIjQJDQE?=
 =?us-ascii?q?DAQEBAQEBAgETAQEBAQEICwsGGw4jDII2BQIDGAmCXAIBAwECDxUZAQEECgMmA?=
 =?us-ascii?q?QIDAQIGAQEBAUYIAwEkCiUCBAESBR2CfwGBaQMVAQQKmWo9AmACigeBbDOCdgE?=
 =?us-ascii?q?BBYEwAQMCDEI/gkQYggkDBYdzgxOBHIFXP4EQATOCKoNTAQIChzmQApBnBwKCJ?=
 =?us-ascii?q?YRhhiaEN5E4iRCEcYpzAgQCBAUCDQEBBYFGgg0fFBojgzyCGwwXEoM4hRSFP3K?=
 =?us-ascii?q?BByGIRVgBgR4BAQ?=
X-IPAS-Result: =?us-ascii?q?A0AaAACxFgtcmBHrdtBkHAEBAQQBAQcEAQGBUQcBAQsBgTB?=
 =?us-ascii?q?QaXA5Coc3A4RPX4poSoFogSGWU4EkA08QARgLCYddIjQJDQEDAQEBAQEBAgETA?=
 =?us-ascii?q?QEBAQEICwsGGw4jDII2BQIDGAmCXAIBAwECDxUZAQEECgMmAQIDAQIGAQEBAUY?=
 =?us-ascii?q?IAwEkCiUCBAESBR2CfwGBaQMVAQQKmWo9AmACigeBbDOCdgEBBYEwAQMCDEI/g?=
 =?us-ascii?q?kQYggkDBYdzgxOBHIFXP4EQATOCKoNTAQIChzmQApBnBwKCJYRhhiaEN5E4iRC?=
 =?us-ascii?q?EcYpzAgQCBAUCDQEBBYFGgg0fFBojgzyCGwwXEoM4hRSFP3KBByGIRVgBgR4BA?=
 =?us-ascii?q?Q?=
X-IronPort-AV: E=Sophos;i="5.56,328,1539673200"; 
   d="scan'208";a="44096305"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 07 Dec 2018 16:59:25 -0800
Received: from localhost ([::1]:48581 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gVQxo-0004Tv-EC
	for like.xu@linux.intel.com; Fri, 07 Dec 2018 19:59:24 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:40240)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <prvs=8739c4fd6=Alistair.Francis@wdc.com>)
	id 1gVQni-0003CE-Ik
	for qemu-devel@nongnu.org; Fri, 07 Dec 2018 19:49:00 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <prvs=8739c4fd6=Alistair.Francis@wdc.com>)
	id 1gVQnf-0001AC-77
	for qemu-devel@nongnu.org; Fri, 07 Dec 2018 19:48:58 -0500
Received: from esa5.hgst.iphmx.com ([216.71.153.144]:41992)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <prvs=8739c4fd6=Alistair.Francis@wdc.com>)
	id 1gVQne-00019t-RY; Fri, 07 Dec 2018 19:48:55 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple;
	d=wdc.com; i=@wdc.com; q=dns/txt; s=dkim.wdc.com;
	t=1544230136; x=1575766136;
	h=from:to:cc:subject:date:message-id:references:
	in-reply-to:content-transfer-encoding:mime-version;
	bh=2I/5/jioIo0xz+N1LcZxy2pLjaMUXNuaR4pFbfFsGW4=;
	b=MswR5Yv0wl1JjaRAHnCNJdj/3KjeIazVHEl96dAH25iKY+aFB4pp7LWL
	fEekh5e8zNbvK8eXjsFt/D0Pzrl0m2qSnCkj3flhMwjKOXgYmFsizxlzO
	R+14z2uNQ8L1dO5xtBFXjiONv6h662qPIqnxP9O18qC8vdjVA8S0/1vjg
	3OLqhwrHdI47RSUfUl3e7Wg1zZReOIUcTsGmTle6NwvBvu6pY7biSZsCb
	j/cX4XqnuQZvfRnjh6iSamPFcTqf++m1cN//JqKmDMD7R07h9+H3imPZu
	jJQQLOwrB8iJs/7+3N+mmWGVt7jCfaYAJkqEMTp3PBLHwpWijNKi0OP2X w==;
X-IronPort-AV: E=Sophos;i="5.56,328,1539619200"; d="scan'208";a="97343908"
Received: from mail-sn1nam01lp2051.outbound.protection.outlook.com (HELO
	NAM01-SN1-obe.outbound.protection.outlook.com) ([104.47.32.51])
	by ob1.hgst.iphmx.com with ESMTP; 08 Dec 2018 08:48:54 +0800
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=sharedspace.onmicrosoft.com; s=selector1-wdc-com;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
	bh=DgTtvyxOfD7n5OHsKDJwOMkG8ROEn3ZjN8xZaJocq64=;
	b=IGMd2HnB9oUUCBq7IngwLk+a8Fz5VpFTIkNCGOzolK2Kbg77kiQtFHUEsAd5+i/bgNvX6iKMfUff2UATz0z5/uk+A1oZH4ccN56bFFkvvD7m/awIzUBcIZeUj7gUtkrXvOH+i1gJ18aso5lkAWXVWGxrqPsmSbWEAM9rLua990g=
Received: from MWHPR04MB0401.namprd04.prod.outlook.com (10.173.48.18) by
	MWHPR04MB0304.namprd04.prod.outlook.com (10.169.202.138) with Microsoft
	SMTP
	Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
	15.20.1404.20; Sat, 8 Dec 2018 00:48:51 +0000
Received: from MWHPR04MB0401.namprd04.prod.outlook.com
	([fe80::d13d:19d3:fc93:2ec5]) by
	MWHPR04MB0401.namprd04.prod.outlook.com
	([fe80::d13d:19d3:fc93:2ec5%9]) with mapi id 15.20.1404.021;
	Sat, 8 Dec 2018 00:48:51 +0000
From: Alistair Francis <Alistair.Francis@wdc.com>
To: "qemu-devel@nongnu.org" <qemu-devel@nongnu.org>, "qemu-riscv@nongnu.org"
	<qemu-riscv@nongnu.org>
Thread-Topic: [RFC v3 17/24] riscv: tcg-target: Add slowpath load and store
	instructions
Thread-Index: AQHUjo/J9I53cmioSEKzl0bnlWrgxg==
Date: Sat, 8 Dec 2018 00:48:51 +0000
Message-ID: <989024c7cf2a45f6e4a7d793f7760c90e1b36e45.1544229872.git.alistair.francis@wdc.com>
References: <cover.1544229872.git.alistair.francis@wdc.com>
In-Reply-To: <cover.1544229872.git.alistair.francis@wdc.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-mailer: git-send-email 2.19.1
x-clientproxiedby: BYAPR04CA0020.namprd04.prod.outlook.com
	(2603:10b6:a03:40::33) To MWHPR04MB0401.namprd04.prod.outlook.com
	(2603:10b6:300:70::18)
authentication-results: spf=none (sender IP is )
	smtp.mailfrom=Alistair.Francis@wdc.com; 
x-ms-exchange-messagesentrepresentingtype: 1
x-originating-ip: [199.255.44.250]
x-ms-publictraffictype: Email
x-microsoft-exchange-diagnostics: 1; MWHPR04MB0304;
	6:qJ9DFTgko0TgnZnRWd7cXzo+jVU5rdySWpvxU4g9tlm/x9wpCKtu5gTHLrZu9j2jQ5eVqKOpp6UAv2umW3i7Zc1QVm4X1qN+zk877a6TC6tJxy/DMP5x0dqxq2eVeqY9KN7kfQiC+VS/3384CXpdQ/RX+3kzyiHZlbmveyxhUUyaIze7BMqOKSS1hcJni7n4uOLk9QHgBTv6CBUqD7NT1yT0clgKIj2piTUkLEfjqwhBicYBXbhYLkQ0TFbVfPk0KL4rAGE34ghak9IUY8CDNCcqx7hpEnvjTfyZeEcdIzDaEfP2EubUpW64pADHufiueU7uxWAxXXhxAY8J4qODJNYAvzc4ziZBTohYsamafjD7WMO3DVWm42TKg7Yak/AgW7zsg6z/1cDnRNm9hDn3b2nmzluuuquRUB7hWW1rk04GAdFw1nxWb78H1HnSCqaKS+Z1HMkKv2JSiu5agwTgzQ==;
	5:ACaUg54Yzmg2goJTQWwa4rrqaAHTSWPZGKTg8Ocgo2d4UltTSxqJwlnShsdb0Eg/8qsYNHJaS5mhGNdcD+gqzpb/I+PrpVj5xGeNknfT7LaG+u5DELy5TbfFjDAbbKddVVMdF3RqP/wyYcV+lzDmZWpxmJgtDNXKNo/PN53TatY=;
	7:reUARGCNrtLQDmPQ4JWZQVb3zQ4MyfaEtPo7R9OMW88LC1Yz7TkMNmn8UibCK2Z10buxqTPU4skaPOZvDXo4Gl8lGEcVqJwYYWt+T/zRBxePl61SURNhl0wEP1i33HGORVfJwh0EEVjjpcJeuMcnFQ==
x-ms-office365-filtering-correlation-id: 5a6f446f-36e7-4319-ee80-08d65ca6ec18
x-ms-office365-filtering-ht: Tenant
x-microsoft-antispam: BCL:0; PCL:0;
	RULEID:(2390098)(7020095)(4652040)(8989299)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(5600074)(711020)(4618075)(2017052603328)(7153060)(7193020);
	SRVR:MWHPR04MB0304; 
x-ms-traffictypediagnostic: MWHPR04MB0304:
wdcipoutbound: EOP-TRUE
x-microsoft-antispam-prvs: <MWHPR04MB0304A2C38CE0F93E44A8D36890AB0@MWHPR04MB0304.namprd04.prod.outlook.com>
x-ms-exchange-senderadcheck: 1
x-exchange-antispam-report-cfa-test: BCL:0; PCL:0;
	RULEID:(8211001083)(6040522)(2401047)(5005006)(8121501046)(93006095)(93001095)(3231455)(999002)(944501520)(52105112)(3002001)(10201501046)(6055026)(148016)(149066)(150057)(6041310)(20161123564045)(20161123560045)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123562045)(20161123558120)(201708071742011)(7699051)(76991095);
	SRVR:MWHPR04MB0304; BCL:0; PCL:0; RULEID:; SRVR:MWHPR04MB0304; 
x-forefront-prvs: 0880FB6EC1
x-forefront-antispam-report: SFV:NSPM;
	SFS:(10019020)(346002)(396003)(39860400002)(366004)(376002)(136003)(189003)(199004)(54906003)(110136005)(44832011)(386003)(6506007)(5660300001)(68736007)(2906002)(71190400001)(25786009)(71200400001)(86362001)(316002)(99286004)(14454004)(6306002)(66066001)(102836004)(2501003)(6512007)(53936002)(4326008)(11346002)(6116002)(478600001)(81166006)(81156014)(3846002)(72206003)(8936002)(105586002)(256004)(118296001)(106356001)(39060400002)(446003)(6436002)(36756003)(6486002)(486006)(76176011)(186003)(2616005)(305945005)(26005)(97736004)(52116002)(476003)(50226002)(7736002)(966005)(8676002);
	DIR:OUT; SFP:1102; SCL:1; SRVR:MWHPR04MB0304;
	H:MWHPR04MB0401.namprd04.prod.outlook.com; FPR:; SPF:None;
	LANG:en; PTR:InfoNoRecords; MX:1; A:1; 
x-microsoft-antispam-message-info: HMm/XcJenuagAoyvOOJt2qQ5dcZdC9LUzsbsF25Ehd3LB6xSt82GZiFcuy7UHunwK38Dbp8m4IxopIsNLbVgRQbF4fu3Zfx62YllHJiQCj9uLCv2dMxsOlFCrsFQ7+SdU6S/ZihopCu3qxAvj4fxp0CfzTdePIEzvPLu9uuOc07Ikdr4DtomB9Eupr4ervkgOM9HOPCsKiP6HNnXf2Jh9+CiE0wBuS7hw/fKrVmOQulHBys2i+I/EF+e3/XQdpW8lGAP017Y6Nrfgu2KqvnenTbl/SLXAAoYquYv4uZtOl8gWVv+/h3RUyUX50ETsVkC2r9wX7E47Sl5HmrxLNXZRVIJyH4bbrcCJ8T9RThyMfg=
spamdiagnosticoutput: 1:99
spamdiagnosticmetadata: NSPM
Content-Type: text/plain; charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
X-OriginatorOrg: wdc.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 5a6f446f-36e7-4319-ee80-08d65ca6ec18
X-MS-Exchange-CrossTenant-originalarrivaltime: 08 Dec 2018 00:48:51.7439 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: b61c8803-16f3-4c35-9b17-6f65f441df86
X-MS-Exchange-Transport-CrossTenantHeadersStamped: MWHPR04MB0304
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 216.71.153.144
Subject: [Qemu-devel] [RFC v3 17/24] riscv: tcg-target: Add slowpath load
 and store instructions
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: "alistair23@gmail.com" <alistair23@gmail.com>,
	"richard.henderson@linaro.org" <richard.henderson@linaro.org>,
	Alistair Francis <Alistair.Francis@wdc.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Signed-off-by: Alistair Francis <alistair.francis@wdc.com>
Signed-off-by: Michael Clark <mjc@sifive.com>
Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
---
 tcg/riscv/tcg-target.inc.c | 254 +++++++++++++++++++++++++++++++++++++
 1 file changed, 254 insertions(+)

diff --git a/tcg/riscv/tcg-target.inc.c b/tcg/riscv/tcg-target.inc.c
index a00bbe8ff1..9d07d5ecde 100644
--- a/tcg/riscv/tcg-target.inc.c
+++ b/tcg/riscv/tcg-target.inc.c
@@ -878,3 +878,257 @@ static void tcg_out_call(TCGContext *s, tcg_insn_unit=
 *arg)
 {
     tcg_out_call_int(s, arg, false);
 }
+
+static void tcg_out_mb(TCGContext *s, TCGArg a0)
+{
+    tcg_insn_unit insn =3D OPC_FENCE;
+
+    if (a0 & TCG_MO_LD_LD) {
+        insn |=3D 0x02200000;
+    }
+    if (a0 & TCG_MO_ST_LD) {
+        insn |=3D 0x01200000;
+    }
+    if (a0 & TCG_MO_LD_ST) {
+        insn |=3D 0x02100000;
+    }
+    if (a0 & TCG_MO_ST_ST) {
+        insn |=3D 0x02200000;
+    }
+    tcg_out32(s, insn);
+}
+
+/*
+ * Load/store and TLB
+ */
+
+#if defined(CONFIG_SOFTMMU)
+#include "tcg-ldst.inc.c"
+
+/* helper signature: helper_ret_ld_mmu(CPUState *env, target_ulong addr,
+ *                                     TCGMemOpIdx oi, uintptr_t ra)
+ */
+static void * const qemu_ld_helpers[16] =3D {
+    [MO_UB]   =3D helper_ret_ldub_mmu,
+    [MO_SB]   =3D helper_ret_ldsb_mmu,
+    [MO_LEUW] =3D helper_le_lduw_mmu,
+    [MO_LESW] =3D helper_le_ldsw_mmu,
+    [MO_LEUL] =3D helper_le_ldul_mmu,
+#if TCG_TARGET_REG_BITS =3D=3D 64
+    [MO_LESL] =3D helper_le_ldsl_mmu,
+#endif
+    [MO_LEQ]  =3D helper_le_ldq_mmu,
+    [MO_BEUW] =3D helper_be_lduw_mmu,
+    [MO_BESW] =3D helper_be_ldsw_mmu,
+    [MO_BEUL] =3D helper_be_ldul_mmu,
+#if TCG_TARGET_REG_BITS =3D=3D 64
+    [MO_BESL] =3D helper_be_ldsl_mmu,
+#endif
+    [MO_BEQ]  =3D helper_be_ldq_mmu,
+};
+
+/* helper signature: helper_ret_st_mmu(CPUState *env, target_ulong addr,
+ *                                     uintxx_t val, TCGMemOpIdx oi,
+ *                                     uintptr_t ra)
+ */
+static void * const qemu_st_helpers[16] =3D {
+    [MO_UB]   =3D helper_ret_stb_mmu,
+    [MO_LEUW] =3D helper_le_stw_mmu,
+    [MO_LEUL] =3D helper_le_stl_mmu,
+    [MO_LEQ]  =3D helper_le_stq_mmu,
+    [MO_BEUW] =3D helper_be_stw_mmu,
+    [MO_BEUL] =3D helper_be_stl_mmu,
+    [MO_BEQ]  =3D helper_be_stq_mmu,
+};
+
+static void tcg_out_tlb_load(TCGContext *s, TCGReg addrl,
+                             TCGReg addrh, TCGMemOpIdx oi,
+                             tcg_insn_unit **label_ptr, bool is_load)
+{
+    TCGMemOp opc =3D get_memop(oi);
+    unsigned s_bits =3D opc & MO_SIZE;
+    unsigned a_bits =3D get_alignment_bits(opc);
+    target_ulong mask;
+    int mem_index =3D get_mmuidx(oi);
+    int cmp_off
+        =3D (is_load
+           ? offsetof(CPUArchState, tlb_table[mem_index][0].addr_read)
+           : offsetof(CPUArchState, tlb_table[mem_index][0].addr_write));
+    int add_off =3D offsetof(CPUArchState, tlb_table[mem_index][0].addend)=
;
+    RISCVInsn load_cmp_op =3D (TARGET_LONG_BITS =3D=3D 64 ? OPC_LD :
+                             TCG_TARGET_REG_BITS =3D=3D 64 ? OPC_LWU : OPC=
_LW);
+    RISCVInsn load_add_op =3D TCG_TARGET_REG_BITS =3D=3D 64 ? OPC_LD : OPC=
_LW;
+    TCGReg base =3D TCG_AREG0;
+
+    /* We don't support oversize guests */
+    if (TCG_TARGET_REG_BITS < TARGET_LONG_BITS) {
+        g_assert_not_reached();
+    }
+
+    /* We don't support unaligned accesses. */
+    if (a_bits < s_bits) {
+        a_bits =3D s_bits;
+    }
+    mask =3D (target_ulong)TARGET_PAGE_MASK | ((1 << a_bits) - 1);
+
+
+    /* Compensate for very large offsets.  */
+    if (add_off >=3D 0x1000) {
+        int adj;
+        base =3D TCG_REG_TMP2;
+        if (cmp_off <=3D 2 * 0xfff) {
+            adj =3D 0xfff;
+            tcg_out_opc_imm(s, OPC_ADDI, base, TCG_AREG0, adj);
+        } else {
+            adj =3D cmp_off - sextreg(cmp_off, 0, 12);
+            tcg_debug_assert(add_off - adj >=3D -0x1000
+                             && add_off - adj < 0x1000);
+
+            tcg_out_opc_upper(s, OPC_LUI, base, adj);
+            tcg_out_opc_reg(s, OPC_ADD, base, base, TCG_AREG0);
+        }
+        add_off -=3D adj;
+        cmp_off -=3D adj;
+    }
+
+    /* Extract the page index.  */
+    if (CPU_TLB_BITS + CPU_TLB_ENTRY_BITS < 12) {
+        tcg_out_opc_imm(s, OPC_SRLI, TCG_REG_TMP0, addrl,
+                        TARGET_PAGE_BITS - CPU_TLB_ENTRY_BITS);
+        tcg_out_opc_imm(s, OPC_ANDI, TCG_REG_TMP0, TCG_REG_TMP0,
+                        MAKE_64BIT_MASK(CPU_TLB_ENTRY_BITS, CPU_TLB_BITS))=
;
+    } else if (TARGET_PAGE_BITS >=3D 12) {
+        tcg_out_opc_upper(s, OPC_LUI, TCG_REG_TMP0,
+                          MAKE_64BIT_MASK(TARGET_PAGE_BITS, CPU_TLB_BITS))=
;
+        tcg_out_opc_reg(s, OPC_AND, TCG_REG_TMP0, TCG_REG_TMP0, addrl);
+        tcg_out_opc_imm(s, OPC_SRLI, TCG_REG_TMP0, TCG_REG_TMP0,
+                        CPU_TLB_BITS - CPU_TLB_ENTRY_BITS);
+    } else {
+        tcg_out_opc_imm(s, OPC_SRLI, TCG_REG_TMP0, addrl, TARGET_PAGE_BITS=
);
+        tcg_out_opc_imm(s, OPC_ANDI, TCG_REG_TMP0, TCG_REG_TMP0,
+                        MAKE_64BIT_MASK(0, CPU_TLB_BITS));
+        tcg_out_opc_imm(s, OPC_SLLI, TCG_REG_TMP0, TCG_REG_TMP0,
+                        CPU_TLB_ENTRY_BITS);
+    }
+
+    /* Add that to the base address to index the tlb.  */
+    tcg_out_opc_reg(s, OPC_ADD, TCG_REG_TMP2, base, TCG_REG_TMP0);
+    base =3D TCG_REG_TMP2;
+
+    /* Load the tlb comparator and the addend.  */
+    tcg_out_ldst(s, load_cmp_op, TCG_REG_TMP0, base, cmp_off);
+    tcg_out_ldst(s, load_add_op, TCG_REG_TMP2, base, add_off);
+
+    /* Clear the non-page, non-alignment bits from the address.  */
+    if (mask =3D=3D sextreg(mask, 0, 12)) {
+        tcg_out_opc_imm(s, OPC_ANDI, TCG_REG_TMP1, addrl, mask);
+    } else {
+        tcg_out_movi(s, TCG_TYPE_REG, TCG_REG_TMP1, mask);
+        tcg_out_opc_reg(s, OPC_AND, TCG_REG_TMP1, TCG_REG_TMP1, addrl);
+     }
+
+    /* Compare masked address with the TLB entry. */
+    label_ptr[0] =3D s->code_ptr;
+    tcg_out_opc_branch(s, OPC_BNE, TCG_REG_TMP0, TCG_REG_TMP1, 0);
+    /* TODO: Move this out of line
+     * see:
+     *   https://lists.nongnu.org/archive/html/qemu-devel/2018-11/msg02234=
.html
+     */
+
+    /* TLB Hit - translate address using addend.  */
+    if (TCG_TARGET_REG_BITS > TARGET_LONG_BITS) {
+        tcg_out_ext32u(s, TCG_REG_TMP0, addrl);
+        addrl =3D TCG_REG_TMP0;
+    }
+    tcg_out_opc_reg(s, OPC_ADD, TCG_REG_TMP0, TCG_REG_TMP2, addrl);
+}
+
+static void add_qemu_ldst_label(TCGContext *s, int is_ld, TCGMemOpIdx oi,
+                                TCGType ext,
+                                TCGReg datalo, TCGReg datahi,
+                                TCGReg addrlo, TCGReg addrhi,
+                                void *raddr, tcg_insn_unit **label_ptr)
+{
+    TCGLabelQemuLdst *label =3D new_ldst_label(s);
+
+    label->is_ld =3D is_ld;
+    label->oi =3D oi;
+    label->type =3D ext;
+    label->datalo_reg =3D datalo;
+    label->datahi_reg =3D datahi;
+    label->addrlo_reg =3D addrlo;
+    label->addrhi_reg =3D addrhi;
+    label->raddr =3D raddr;
+    label->label_ptr[0] =3D label_ptr[0];
+}
+
+static void tcg_out_qemu_ld_slow_path(TCGContext *s, TCGLabelQemuLdst *l)
+{
+    TCGMemOpIdx oi =3D l->oi;
+    TCGMemOp opc =3D get_memop(oi);
+    TCGReg a0 =3D tcg_target_call_iarg_regs[0];
+    TCGReg a1 =3D tcg_target_call_iarg_regs[1];
+    TCGReg a2 =3D tcg_target_call_iarg_regs[2];
+    TCGReg a3 =3D tcg_target_call_iarg_regs[3];
+
+    /* We don't support oversize guests */
+    if (TCG_TARGET_REG_BITS < TARGET_LONG_BITS) {
+        g_assert_not_reached();
+    }
+
+    /* resolve label address */
+    reloc_sbimm12(l->label_ptr[0], s->code_ptr);
+
+    /* call load helper */
+    tcg_out_mov(s, TCG_TYPE_PTR, a0, TCG_AREG0);
+    tcg_out_mov(s, TCG_TYPE_PTR, a1, l->addrlo_reg);
+    tcg_out_movi(s, TCG_TYPE_PTR, a2, oi);
+    tcg_out_movi(s, TCG_TYPE_PTR, a3, (tcg_target_long)l->raddr);
+
+    tcg_out_call(s, qemu_ld_helpers[opc & (MO_BSWAP | MO_SSIZE)]);
+    tcg_out_mov(s, (opc & MO_SIZE) =3D=3D MO_64, l->datalo_reg, a0);
+
+    tcg_out_goto(s, l->raddr);
+}
+
+static void tcg_out_qemu_st_slow_path(TCGContext *s, TCGLabelQemuLdst *l)
+{
+    TCGMemOpIdx oi =3D l->oi;
+    TCGMemOp opc =3D get_memop(oi);
+    TCGMemOp s_bits =3D opc & MO_SIZE;
+    TCGReg a0 =3D tcg_target_call_iarg_regs[0];
+    TCGReg a1 =3D tcg_target_call_iarg_regs[1];
+    TCGReg a2 =3D tcg_target_call_iarg_regs[2];
+    TCGReg a3 =3D tcg_target_call_iarg_regs[3];
+    TCGReg a4 =3D tcg_target_call_iarg_regs[4];
+
+    /* We don't support oversize guests */
+    if (TCG_TARGET_REG_BITS < TARGET_LONG_BITS) {
+        g_assert_not_reached();
+    }
+
+    /* resolve label address */
+    reloc_sbimm12(l->label_ptr[0], s->code_ptr);
+
+    /* call store helper */
+    tcg_out_mov(s, TCG_TYPE_PTR, a0, TCG_AREG0);
+    tcg_out_mov(s, TCG_TYPE_PTR, a1, l->addrlo_reg);
+    tcg_out_mov(s, TCG_TYPE_PTR, a2, l->datalo_reg);
+    switch (s_bits) {
+    case MO_8:
+        tcg_out_ext8u(s, a2, a2);
+        break;
+    case MO_16:
+        tcg_out_ext16u(s, a2, a2);
+        break;
+    default:
+        break;
+    }
+    tcg_out_movi(s, TCG_TYPE_PTR, a3, oi);
+    tcg_out_movi(s, TCG_TYPE_PTR, a4, (tcg_target_long)l->raddr);
+
+    tcg_out_call(s, qemu_st_helpers[opc & (MO_BSWAP | MO_SSIZE)]);
+
+    tcg_out_goto(s, l->raddr);
+}
+#endif /* CONFIG_SOFTMMU */
--=20
2.19.1


