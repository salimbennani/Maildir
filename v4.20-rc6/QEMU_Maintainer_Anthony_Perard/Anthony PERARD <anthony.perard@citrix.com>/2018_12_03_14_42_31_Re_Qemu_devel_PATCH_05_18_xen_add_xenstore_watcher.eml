Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 04 Dec 2018 08:53:31 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id EF414580117
	for <like.xu@linux.intel.com>; Mon,  3 Dec 2018 06:43:56 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga006-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 03 Dec 2018 06:43:56 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3Alsh2eB3V/kNY7kglsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?seMfI/ad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWRPUMZPWSJCDIOz?=
 =?us-ascii?q?YJcAAPcDMulWsof9v1kDoxmxCAWxCu7j1iFHhmTt0K0mz+gsCx3K0BA6Et4Qtn?=
 =?us-ascii?q?nfsdX7NL0VUeCw1KTF0TPDb+9W2Tf67ojJcg0qr+uDU7xsbcff1UchHB7Cg1qK?=
 =?us-ascii?q?r4zlIzOV1uMLs2mb9eZgTfygi3Q9pAFrvzei3dsjiojVhoIPy1DF+j91z5oyJd?=
 =?us-ascii?q?29UUN2Z8OvHphItyyCKYd6XsAvT3t1tConybAKo4C3cSYKxZg92hLSaeSLf5WJ?=
 =?us-ascii?q?7x79TuqdPyl0iG9/dL6ihxu/8FKsx+38W8SyzV1EtDBKksPWuXAIzxHT6taISv?=
 =?us-ascii?q?96/kq53TaP1hvT6v1fIUwumqrbLYMhzqQ3lpoJvkTPBi72mEPog6+Kbkgo5PSk?=
 =?us-ascii?q?5uf9brn7u5ORNJV4hh/wP6kugMCzHOY1PhALX2eB+OS80LPj/Vf+QLVPlvA2i7?=
 =?us-ascii?q?fWsJXHJcgCu6G2HRFV3Zgn6xqmFDim18kYnX8bI11bYxKLiIzpO1DNIP/mF/u+?=
 =?us-ascii?q?jEmsnS9vx/DHOL3hH5rMImLCkLfnYbZy9UpcxBAvwtBY4pJZEbcBIPX1Wk/+st?=
 =?us-ascii?q?zYEwU1Mwuuw+boENl9zJ8RWXqTAq+FN6PfqVuI5uMsI+aSfoMUtyv9JuMh5/7v?=
 =?us-ascii?q?i385hFAccbOo3ZsRdHC3APBmL1+Fbnrrh9dSWVoMpRc0Gez2lEWZA3kUY3epQ7?=
 =?us-ascii?q?l64DY9B4S7S4DZSceoib2F2S69WZpOemFBDEvLCHrtasCIVukBbHGvJNR8mGkB?=
 =?us-ascii?q?XLmlV4hzzByrqUr2xqRqKq/O9zQFuIn//N5y4eLViFc17zMjFNmX0WyGUzRpmH?=
 =?us-ascii?q?gVTSQ9xqF1rB9BzQK72LV8y9BFD8Za4e8BBh8zKJqaw/FgEdn0RirKf8uTSUbg?=
 =?us-ascii?q?SdKjV2IfVNU0lvYIf0Z6HcTqtj359hCGS+sckaCLA5oltLrRxXHrK+52ymrc1b?=
 =?us-ascii?q?lnhF4jFJgcfVa6j7JyolCAT7XClF+UwuPzLfwR?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAACTQAVchxHrdtBiGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBgTAqgiUTjBFfiyuCDZdIgXMUGBSICSI0CQ0?=
 =?us-ascii?q?BAwEBAQEBAQIBEwEBAQoLCQgbDi+CNgUCAxoBBoJbAQEBAQIBAQIkEwwKKQMCA?=
 =?us-ascii?q?QECBgEBChgJFQgIAwELBQs+EwWCUUuBeggBBKYkM4ofjByBVz+BEYMSilwCiSY?=
 =?us-ascii?q?Gh06EZIpiBwIcggePDgsYkSaHapEDgUaCDXBQgmyCJxeOHUExgQeIYIF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0ABAACTQAVchxHrdtBiGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBgTAqgiUTjBFfiyuCDZdIgXMUGBSICSI0CQ0BAwEBAQEBAQIBE?=
 =?us-ascii?q?wEBAQoLCQgbDi+CNgUCAxoBBoJbAQEBAQIBAQIkEwwKKQMCAQECBgEBChgJFQg?=
 =?us-ascii?q?IAwELBQs+EwWCUUuBeggBBKYkM4ofjByBVz+BEYMSilwCiSYGh06EZIpiBwIcg?=
 =?us-ascii?q?gePDgsYkSaHapEDgUaCDXBQgmyCJxeOHUExgQeIYIF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,310,1539673200"; 
   d="scan'208";a="54670843"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 03 Dec 2018 06:43:56 -0800
Received: from localhost ([::1]:49845 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gTpRz-0005A9-JC
	for like.xu@linux.intel.com; Mon, 03 Dec 2018 09:43:55 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:34832)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <prvs=86815d540=anthony.perard@citrix.com>)
	id 1gTpQq-0004RA-Eh
	for qemu-devel@nongnu.org; Mon, 03 Dec 2018 09:42:48 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <prvs=86815d540=anthony.perard@citrix.com>)
	id 1gTpQo-0002L5-MR
	for qemu-devel@nongnu.org; Mon, 03 Dec 2018 09:42:44 -0500
Received: from smtp03.citrix.com ([162.221.156.55]:62927)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71)
	(envelope-from <prvs=86815d540=anthony.perard@citrix.com>)
	id 1gTpQi-0002Fw-O6; Mon, 03 Dec 2018 09:42:36 -0500
X-IronPort-AV: E=Sophos;i="5.56,310,1539648000"; d="scan'208";a="72161395"
Date: Mon, 3 Dec 2018 14:42:31 +0000
From: Anthony PERARD <anthony.perard@citrix.com>
To: Paul Durrant <paul.durrant@citrix.com>
Message-ID: <20181203144231.GK14786@perard.uk.xensource.com>
References: <20181121151211.15997-1-paul.durrant@citrix.com>
	<20181121151211.15997-6-paul.durrant@citrix.com>
MIME-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Content-Disposition: inline
In-Reply-To: <20181121151211.15997-6-paul.durrant@citrix.com>
User-Agent: Mutt/1.11.0 (2018-11-25)
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 162.221.156.55
Subject: Re: [Qemu-devel] [PATCH 05/18] xen: add xenstore watcher
 infratructure
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Kevin Wolf <kwolf@redhat.com>, Stefano Stabellini <sstabellini@kernel.org>,
	qemu-block@nongnu.org, qemu-devel@nongnu.org,
	Max Reitz <mreitz@redhat.com>, xen-devel@lists.xenproject.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Wed, Nov 21, 2018 at 03:11:58PM +0000, Paul Durrant wrote:
> A Xen PV frontend communicates its state to the PV backend by writing to
> the 'state' key in the frontend area in xenstore. It is therefore
> necessary for a XenDevice implementation to be notified whenever the
> value of this key changes.
> 
> This patch adds code to do this as follows:
> 
> - an 'fd handler' is registered on the libxenstore handle which will be
>   triggered whenever a 'watch' event occurs
> - primitives are added to xen-bus-helper to add or remove watch events
> - a list of Notifier objects is added to XenBus to provide a mechanism
>   to call the appropriate 'watch handler' when its associated event
>   occurs
> 
> The xen-qisk implementation is extended with a 'frontend_changed' method,

"The xen-qdisk"

> which calls as-yet stub 'connect' and 'disconnect' functions when the
> relevant frontend state transitions occur. A subsequent patch will supply
> a full implementation for these functions.
> 
> Signed-off-by: Paul Durrant <paul.durrant@citrix.com>
> ---
> diff --git a/hw/block/xen-qdisk.c b/hw/block/xen-qdisk.c
> index 0859643f7d..35f7b70480 100644
> --- a/hw/block/xen-qdisk.c
> +++ b/hw/block/xen-qdisk.c
> +static void xen_qdisk_frontend_changed(XenDevice *xendev,
> +                                       enum xenbus_state frontend_state,
> +                                       Error **errp)
> +{
> +    XenQdiskDevice *qdiskdev = XEN_QDISK_DEVICE(xendev);
> +    enum xenbus_state backend_state = xen_device_backend_get_state(xendev);
> +    Error *local_err = NULL;
> +
> +    switch (frontend_state) {
> +    case XenbusStateInitialised:
> +    case XenbusStateConnected:
> +        if (backend_state == XenbusStateConnected) {
> +            break;
> +        }
> +
> +        xen_qdisk_disconnect(qdiskdev, &error_fatal);

Do we want to crash (actually exit) QEMU when disconnect failed?

> +        xen_qdisk_connect(qdiskdev, &local_err);
> +        if (local_err) {
> +            error_propagate(errp, local_err);
> +            break;
> +        }
> +
> +        xen_device_backend_set_state(xendev, XenbusStateConnected);
> +        break;
> +
> +    case XenbusStateClosing:
> +        xen_device_backend_set_state(xendev, XenbusStateClosing);
> +        break;
> +
> +    case XenbusStateClosed:
> +        xen_qdisk_disconnect(qdiskdev, &error_fatal);
> +        xen_device_backend_set_state(xendev, XenbusStateClosed);
> +        break;
> +
> +    default:
> +        break;
> +    }
> +}
> +
> diff --git a/hw/xen/xen-bus-helper.c b/hw/xen/xen-bus-helper.c
> index d9ee2ed6a0..b44acc8047 100644
> --- a/hw/xen/xen-bus-helper.c
> +++ b/hw/xen/xen-bus-helper.c
> @@ -122,3 +122,31 @@ int xs_node_scanf(struct xs_handle *xsh, const char *node, const char *key,
>  
>      return rc;
>  }
> +
> +void xs_node_watch(struct xs_handle *xsh, const char *node, const char *key,
> +                   char *token, Error **errp)
> +{
> +    char *path;
> +
> +    path = (strlen(node) != 0) ? g_strdup_printf("%s/%s", node, key) :
> +        g_strdup(key);
> +
> +    if (!xs_watch(xsh, path, token)) {
> +        error_setg_errno(errp, errno, "failed to watch path '%s'", path);
> +    }
> +
> +    g_free(path);
> +}
> +
> +void xs_node_unwatch(struct xs_handle *xsh, const char *node,
> +                     const char *key, const char *token)
> +{
> +    char *path;
> +
> +    path = (strlen(node) != 0) ? g_strdup_printf("%s/%s", node, key) :
> +        g_strdup(key);
> +
> +    xs_unwatch(xsh, path, token);

I think we should check for error from xs_unwatch as well.

> +
> +    g_free(path);
> +}
> diff --git a/hw/xen/xen-bus.c b/hw/xen/xen-bus.c
> index 663aa8e117..99988f8568 100644
> --- a/hw/xen/xen-bus.c
> +++ b/hw/xen/xen-bus.c
> +static XenWatch *xen_bus_add_watch(XenBus *xenbus, const char *node,
> +                                   const char *key, XenWatchHandler handler,
> +                                   void *opaque, Error **errp)
> +{
> +    XenWatch *watch = g_new0(XenWatch, 1);
> +    QemuUUID uuid;
> +    Error *local_err = NULL;
> +
> +    qemu_uuid_generate(&uuid);
> +    watch->token = qemu_uuid_unparse_strdup(&uuid);
> +
> +    trace_xen_bus_add_watch(node, key, watch->token);
> +
> +    watch->node = g_strdup(node);
> +    watch->key = g_strdup(key);
> +    watch->handler = handler;
> +    watch->opaque = opaque;
> +    watch->notifier.notify = watch_notify;
> +
> +    notifier_list_add(&xenbus->watch_notifiers, &watch->notifier);
> +
> +    xs_node_watch(xenbus->xsh, node, key, watch->token, &local_err);
> +
> +    if (local_err) {
> +        error_propagate(errp, local_err);
> +
> +        notifier_remove(&watch->notifier);
> +
> +        g_free(watch->token);
> +        g_free(watch->key);
> +        g_free(watch->node);
> +
> +        g_free(watch);

It would be better to have a function that will free/dispose of a
XenWatch, or maybe simply calling xen_bus_remove_watch here might be
enough.

> +        watch = NULL;

You could return NULL instead.

> +    }
> +
> +    return watch;
> +}
> +
> +static void xen_bus_remove_watch(XenBus *xenbus, XenWatch *watch)
> +{
> +    trace_xen_bus_remove_watch(watch->node, watch->key, watch->token);
> +
> +    xs_node_unwatch(xenbus->xsh, watch->node, watch->key, watch->token);
> +
> +    notifier_remove(&watch->notifier);
> +
> +    g_free(watch->token);
> +    g_free(watch->key);
> +    g_free(watch->node);
> +
> +    g_free(watch);
> +}

> +static void xen_bus_watch(void *opaque)
> +{
> +    XenBus *xenbus = opaque;
> +    char **v;
> +    const char *token;
> +    unsigned int n;
> +
> +    g_assert(xenbus->xsh);
> +
> +    v = xs_read_watch(xenbus->xsh, &n);

What is the n for?
Also, maybe you wanted to call xs_check_watch instead? (In a loop, until
EGAIN)

> +    if (!v) {
> +        return;
> +    }
> +
> +    token = v[XS_WATCH_TOKEN];
> +
> +    trace_xen_bus_watch(token);
> +
> +    notifier_list_notify(&xenbus->watch_notifiers, (void *)token);
> +
> +    free(v);
> +}
> +
>  static void xen_bus_realize(BusState *bus, Error **errp)
>  {
>      XenBus *xenbus = XEN_BUS(bus);
> @@ -230,12 +419,24 @@ static void xen_device_frontend_create(XenDevice *xendev, Error **errp)
>          error_propagate(errp, local_err);
>          error_prepend(errp, "failed to create frontend: ");
>      }
> +
> +    xendev->frontend_state_watch =
> +        xen_bus_add_watch(xenbus, xendev->frontend_path, "state",
> +                          xen_device_frontend_changed, xendev, &local_err);

You can't reuse local_err here, *local_err must be null (It isn't
exactly written like this, but that what I understand from reading
qapi/error.h).

Maybe you meant to return when the previous function failed (call of
xs_node_create)?

> +    if (local_err) {
> +        error_propagate(errp, local_err);
> +        error_prepend(errp, "failed to watch frontend state: ");
> +    }
>  }

Thanks,

-- 
Anthony PERARD

