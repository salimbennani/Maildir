Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 06 Dec 2018 08:51:55 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id F35DE5804C1
	for <like.xu@linux.intel.com>; Wed,  5 Dec 2018 04:26:20 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga001-1.jf.intel.com with ESMTP; 05 Dec 2018 04:26:20 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AEyw9ThAFhOsoW5JzPjS5UyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSPX8o8bcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRshRWCJBDI2i?=
 =?us-ascii?q?bYQBAekPMulEoIfyulUOtRmzCwujCe/yxDJEmmH53bYh3uQ9CAHLxhAsE84UvX?=
 =?us-ascii?q?nWqtj+KaccUfqyzKnN1TjOc/dW1iny6YPVbx0uv/eMXbRqdsXP1EIiEBnKjlGO?=
 =?us-ascii?q?po3qJT+azfoCs26d7+V+S+2ikGonqwB3oje13McsjZPFhoUPylDL7Ch0xps+K9?=
 =?us-ascii?q?6gSENjf9KoDJhduzuHO4drQc4uWX9ktSg6x7EcpJK2fjAGxZc6yxLFdvCLbYuF?=
 =?us-ascii?q?7gj+WOuSITp0nnxodb25ih2v60av0Pf8WdOx0FtSripKjN3MtncV2hzX68iHUe?=
 =?us-ascii?q?d9/ly71TaA0QDT9/tIIUcularUM5Ihw7gwmYQPsUnbACP6hEb7gLWLekk5+eWk?=
 =?us-ascii?q?8frrb7vmq5OGKoN5iBnyMqE0lcy+BeQ4PBIOX2+e+emkzb3s40j5QKhTgvIrjK?=
 =?us-ascii?q?bZro7VJcACqqGiBA9Vz4Aj5AqhADe919gYmXgHLFFbdx6dgInpJknDIPT5Dfe5?=
 =?us-ascii?q?nlStny1nx/HAPr39HJrNKmLPn6vmfbZ48ENczg0zzdZQ55JSF7ENOvXzWlX+tN?=
 =?us-ascii?q?DAFB82LxS0w/r7CNV6zo4eXWOPAqyHP6/Ivl6I+/kiI+2NZI8TpTb8JOIp5//o?=
 =?us-ascii?q?jX8lh1AdebOl0ocQaHC9TbxbJV6Eay/snssZCjVN+Q4/V/DxzluFVzFVejC1Ra?=
 =?us-ascii?q?174zg6DIevC8DEXpysh7qamz62G4ATam1YB1TfLHHzao/RXv4NbD6VcNZslyFB?=
 =?us-ascii?q?WbW/Rotkzxy3qQLh15JhKezb/DBesojsg8No7e/eng1n6DpvEs6G2HuMRWwnom?=
 =?us-ascii?q?RdDRIz3aR+pgRSjB+o1rRxybQMHttP7ttDSA4zLdjb1eMsWP7oXQeUV9OEWB6M?=
 =?us-ascii?q?T9OggDx5Gts1zs9IaUt7HdivphTC2SOwBPkSjbPdV898yb7Vw3Wkf5U18H3Bzq?=
 =?us-ascii?q?R0ygB+GsY=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BIAgAZwwdchxHrdtBkHQEBBQEHBQGBZ?=
 =?us-ascii?q?YExgmKDeYh4iy+CDZk/EgEBGBSEQIMSIjgSAQMBAQEBAQECARMBAQEKCwkIGw4?=
 =?us-ascii?q?jDII2BQIDGgEGglwBAgIBAQIgBBkBAQQKKQECAgEBAgYBAQoaAgUdBAICAwELA?=
 =?us-ascii?q?SQBBQEBGwYTBYMcgXoIAQMBmS08ih1wfDOCdgEBBYJDg16BBQgSEGmJd4Ecgha?=
 =?us-ascii?q?DAW01hQGDBIJXoFgHApFCGIlgh0+YVwYCCQcPIYE8gXYzSoMvghs1iEyFP3KBB?=
 =?us-ascii?q?4kmgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0BIAgAZwwdchxHrdtBkHQEBBQEHBQGBZYExgmKDeYh4iy+?=
 =?us-ascii?q?CDZk/EgEBGBSEQIMSIjgSAQMBAQEBAQECARMBAQEKCwkIGw4jDII2BQIDGgEGg?=
 =?us-ascii?q?lwBAgIBAQIgBBkBAQQKKQECAgEBAgYBAQoaAgUdBAICAwELASQBBQEBGwYTBYM?=
 =?us-ascii?q?cgXoIAQMBmS08ih1wfDOCdgEBBYJDg16BBQgSEGmJd4EcghaDAW01hQGDBIJXo?=
 =?us-ascii?q?FgHApFCGIlgh0+YVwYCCQcPIYE8gXYzSoMvghs1iEyFP3KBB4kmgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,317,1539673200"; 
   d="scan'208";a="56180413"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 05 Dec 2018 04:26:20 -0800
Received: from localhost ([::1]:33789 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gUWFv-00045L-FQ
	for like.xu@linux.intel.com; Wed, 05 Dec 2018 07:26:19 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:50217)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <alex.bennee@linaro.org>) id 1gUWFf-00042Z-EL
	for qemu-devel@nongnu.org; Wed, 05 Dec 2018 07:26:07 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <alex.bennee@linaro.org>) id 1gUWFF-0004px-JE
	for qemu-devel@nongnu.org; Wed, 05 Dec 2018 07:25:42 -0500
Received: from mail-wm1-x342.google.com ([2a00:1450:4864:20::342]:51779)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <alex.bennee@linaro.org>)
	id 1gUWFF-0004pY-AZ
	for qemu-devel@nongnu.org; Wed, 05 Dec 2018 07:25:37 -0500
Received: by mail-wm1-x342.google.com with SMTP id s14so13087723wmh.1
	for <qemu-devel@nongnu.org>; Wed, 05 Dec 2018 04:25:37 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linaro.org; s=google;
	h=references:user-agent:from:to:cc:subject:in-reply-to:date
	:message-id:mime-version:content-transfer-encoding;
	bh=M9vGHa4UOIWpgl9soXOPkWdrCy6KpFp0amI1jS0d/0A=;
	b=KDpY7O/2OLJ0XdFoDQqlth1T2RTTjFsnaTgPH9LKeSeNTLK+R+MhimDT+F3wICHR+3
	CZvbwe3J/ybvB8VP6/HqZKuku5vjGq59zux5Xdf7uiNEDkhqWsnmqnpqAzOiHb2vzYtk
	v3MJTY4Ro+yOICTQNkerJq95SXpVaY7om4SOY=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:references:user-agent:from:to:cc:subject
	:in-reply-to:date:message-id:mime-version:content-transfer-encoding;
	bh=M9vGHa4UOIWpgl9soXOPkWdrCy6KpFp0amI1jS0d/0A=;
	b=lUezarTY2B/kMyPkjJqlq/QciKGg6qC+kTk4maRzO6QOqCcXx8ap2ib5ALNROMWdER
	RcG+Jq1sgkZL4qbkUjgmG/f/eFpZ5yZCcyuuCu5ThI9yeKsBNbwnuddEqBihBd29TJFs
	T0XViQJXr3nIx2NVWWOcxUjkJmhmy7bSE13AeM+p6bEd14vrbxj6IKEfDyxMhVfIV33f
	lW7ztH6IEwEeFxMR4V5XanyemE+WAtnlc9Txa2yAEi4GiYwNoJPIt8FJCEXhPpb+D87d
	T6HTecvBUbb5fC4oKeK1Jn2Nqf9fqp5w5CyDqq6rZGOeAWkHu4b1wu0pf9AkgY4y5X9p
	pnlg==
X-Gm-Message-State: AA+aEWa+5NiXuvCMrdjAiBNqAhEqVmALCws3dPa7mByMAYQu7lYYbwZS
	ty6l9p/FJ9sRxaUjUHEEoof3HQ==
X-Google-Smtp-Source: AFSGD/WgKVqdCtr0E36Ywx2oKf1UX10EgnrwMzhUzGMNhBbfY+BWe8081CD1ddJVTPLuCC2DOgdG3Q==
X-Received: by 2002:a1c:c483:: with SMTP id u125mr15493799wmf.14.1544012735965;
	Wed, 05 Dec 2018 04:25:35 -0800 (PST)
Received: from zen.linaro.local ([81.128.185.34])
	by smtp.gmail.com with ESMTPSA id
	g129sm13124317wmf.39.2018.12.05.04.25.33
	(version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
	Wed, 05 Dec 2018 04:25:34 -0800 (PST)
Received: from zen (localhost [127.0.0.1])
	by zen.linaro.local (Postfix) with ESMTPS id 502773E01DB;
	Wed,  5 Dec 2018 12:25:33 +0000 (GMT)
References: <20181124235553.17371-1-cota@braap.org>
	<20181124235553.17371-12-cota@braap.org>
User-agent: mu4e 1.1.0; emacs 26.1.90
From: Alex =?utf-8?Q?Benn=C3=A9e?= <alex.bennee@linaro.org>
To: "Emilio G. Cota" <cota@braap.org>
In-reply-to: <20181124235553.17371-12-cota@braap.org>
Date: Wed, 05 Dec 2018 12:25:33 +0000
Message-ID: <875zw82m9u.fsf@linaro.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 2a00:1450:4864:20::342
Subject: Re: [Qemu-devel] [PATCH v6 11/13] hardfloat: implement float32/64
 fused multiply-add
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Richard Henderson <richard.henderson@linaro.org>, qemu-devel@nongnu.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>


Emilio G. Cota <cota@braap.org> writes:

> Performance results for fp-bench:
>
> 1. Intel(R) Core(TM) i7-6700K CPU @ 4.00GHz
> - before:
> fma-single: 74.73 MFlops
> fma-double: 74.54 MFlops
> - after:
> fma-single: 203.37 MFlops
> fma-double: 169.37 MFlops
>
> 2. ARM Aarch64 A57 @ 2.4GHz
> - before:
> fma-single: 23.24 MFlops
> fma-double: 23.70 MFlops
> - after:
> fma-single: 66.14 MFlops
> fma-double: 63.10 MFlops
>
> 3. IBM POWER8E @ 2.1 GHz
> - before:
> fma-single: 37.26 MFlops
> fma-double: 37.29 MFlops
> - after:
> fma-single: 48.90 MFlops
> fma-double: 59.51 MFlops
>
> Here having 3FP64 set to 1 pays off for x86_64:
> [1] 170.15 vs [0] 153.12 MFlops
>
> Signed-off-by: Emilio G. Cota <cota@braap.org>

Reviewed-by: Alex Benn=C3=A9e <alex.bennee@linaro.org>


> ---
>  fpu/softfloat.c | 132 ++++++++++++++++++++++++++++++++++++++++++++++--
>  1 file changed, 128 insertions(+), 4 deletions(-)
>
> diff --git a/fpu/softfloat.c b/fpu/softfloat.c
> index e35ebfaae7..e03feafb6f 100644
> --- a/fpu/softfloat.c
> +++ b/fpu/softfloat.c
> @@ -1514,8 +1514,9 @@ float16 QEMU_FLATTEN float16_muladd(float16 a, floa=
t16 b, float16 c,
>      return float16_round_pack_canonical(pr, status);
>  }
>
> -float32 QEMU_FLATTEN float32_muladd(float32 a, float32 b, float32 c,
> -                                                int flags, float_status =
*status)
> +static float32 QEMU_SOFTFLOAT_ATTR
> +soft_f32_muladd(float32 a, float32 b, float32 c, int flags,
> +                float_status *status)
>  {
>      FloatParts pa =3D float32_unpack_canonical(a, status);
>      FloatParts pb =3D float32_unpack_canonical(b, status);
> @@ -1525,8 +1526,9 @@ float32 QEMU_FLATTEN float32_muladd(float32 a, floa=
t32 b, float32 c,
>      return float32_round_pack_canonical(pr, status);
>  }
>
> -float64 QEMU_FLATTEN float64_muladd(float64 a, float64 b, float64 c,
> -                                                int flags, float_status =
*status)
> +static float64 QEMU_SOFTFLOAT_ATTR
> +soft_f64_muladd(float64 a, float64 b, float64 c, int flags,
> +                float_status *status)
>  {
>      FloatParts pa =3D float64_unpack_canonical(a, status);
>      FloatParts pb =3D float64_unpack_canonical(b, status);
> @@ -1536,6 +1538,128 @@ float64 QEMU_FLATTEN float64_muladd(float64 a, fl=
oat64 b, float64 c,
>      return float64_round_pack_canonical(pr, status);
>  }
>
> +float32 QEMU_FLATTEN
> +float32_muladd(float32 xa, float32 xb, float32 xc, int flags, float_stat=
us *s)
> +{
> +    union_float32 ua, ub, uc, ur;
> +
> +    ua.s =3D xa;
> +    ub.s =3D xb;
> +    uc.s =3D xc;
> +
> +    if (unlikely(!can_use_fpu(s))) {
> +        goto soft;
> +    }
> +    if (unlikely(flags & float_muladd_halve_result)) {
> +        goto soft;
> +    }
> +
> +    float32_input_flush3(&ua.s, &ub.s, &uc.s, s);
> +    if (unlikely(!f32_is_zon3(ua, ub, uc))) {
> +        goto soft;
> +    }
> +    /*
> +     * When (a || b) =3D=3D 0, there's no need to check for under/over f=
low,
> +     * since we know the addend is (normal || 0) and the product is 0.
> +     */
> +    if (float32_is_zero(ua.s) || float32_is_zero(ub.s)) {
> +        union_float32 up;
> +        bool prod_sign;
> +
> +        prod_sign =3D float32_is_neg(ua.s) ^ float32_is_neg(ub.s);
> +        prod_sign ^=3D !!(flags & float_muladd_negate_product);
> +        up.s =3D float32_set_sign(float32_zero, prod_sign);
> +
> +        if (flags & float_muladd_negate_c) {
> +            uc.h =3D -uc.h;
> +        }
> +        ur.h =3D up.h + uc.h;
> +    } else {
> +        if (flags & float_muladd_negate_product) {
> +            ua.h =3D -ua.h;
> +        }
> +        if (flags & float_muladd_negate_c) {
> +            uc.h =3D -uc.h;
> +        }
> +
> +        ur.h =3D fmaf(ua.h, ub.h, uc.h);
> +
> +        if (unlikely(f32_is_inf(ur))) {
> +            s->float_exception_flags |=3D float_flag_overflow;
> +        } else if (unlikely(fabsf(ur.h) <=3D FLT_MIN)) {
> +            goto soft;
> +        }
> +    }
> +    if (flags & float_muladd_negate_result) {
> +        return float32_chs(ur.s);
> +    }
> +    return ur.s;
> +
> + soft:
> +    return soft_f32_muladd(ua.s, ub.s, uc.s, flags, s);
> +}
> +
> +float64 QEMU_FLATTEN
> +float64_muladd(float64 xa, float64 xb, float64 xc, int flags, float_stat=
us *s)
> +{
> +    union_float64 ua, ub, uc, ur;
> +
> +    ua.s =3D xa;
> +    ub.s =3D xb;
> +    uc.s =3D xc;
> +
> +    if (unlikely(!can_use_fpu(s))) {
> +        goto soft;
> +    }
> +    if (unlikely(flags & float_muladd_halve_result)) {
> +        goto soft;
> +    }
> +
> +    float64_input_flush3(&ua.s, &ub.s, &uc.s, s);
> +    if (unlikely(!f64_is_zon3(ua, ub, uc))) {
> +        goto soft;
> +    }
> +    /*
> +     * When (a || b) =3D=3D 0, there's no need to check for under/over f=
low,
> +     * since we know the addend is (normal || 0) and the product is 0.
> +     */
> +    if (float64_is_zero(ua.s) || float64_is_zero(ub.s)) {
> +        union_float64 up;
> +        bool prod_sign;
> +
> +        prod_sign =3D float64_is_neg(ua.s) ^ float64_is_neg(ub.s);
> +        prod_sign ^=3D !!(flags & float_muladd_negate_product);
> +        up.s =3D float64_set_sign(float64_zero, prod_sign);
> +
> +        if (flags & float_muladd_negate_c) {
> +            uc.h =3D -uc.h;
> +        }
> +        ur.h =3D up.h + uc.h;
> +    } else {
> +        if (flags & float_muladd_negate_product) {
> +            ua.h =3D -ua.h;
> +        }
> +        if (flags & float_muladd_negate_c) {
> +            uc.h =3D -uc.h;
> +        }
> +
> +        ur.h =3D fma(ua.h, ub.h, uc.h);
> +
> +        if (unlikely(f64_is_inf(ur))) {
> +            s->float_exception_flags |=3D float_flag_overflow;
> +        } else if (unlikely(fabs(ur.h) <=3D FLT_MIN)) {
> +            goto soft;
> +        }
> +    }
> +    if (flags & float_muladd_negate_result) {
> +        return float64_chs(ur.s);
> +    }
> +    return ur.s;
> +
> + soft:
> +    return soft_f64_muladd(ua.s, ub.s, uc.s, flags, s);
> +}
> +
>  /*
>   * Returns the result of dividing the floating-point value `a' by the
>   * corresponding value `b'. The operation is performed according to


--
Alex Benn=C3=A9e

