Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 06 Dec 2018 08:46:52 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id D944D580443;
	Wed,  5 Dec 2018 00:23:15 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga002-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 05 Dec 2018 00:23:15 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AQN5N4xeDKEw9/W2Ojk/ld/KylGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc6+bByN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRcDI2i?=
 =?us-ascii?q?YYsBD+kPM+hWoIbypVQBsRSwBRK0BO7t0TJImn370Lcm3+g9HwzL3gotFM8Ovn?=
 =?us-ascii?q?TOq9X1Mb8fX/mxzKbWzjXDdOlZ2THg54jSbxssvfeMUq9qccrM0kkvFx/KjlWO?=
 =?us-ascii?q?pozjPDOV0fkGvm+B4OpmSO2vkXArpx1trjSz3coshYzJiZgUylDA7yl23IE1Jd?=
 =?us-ascii?q?ihRUN9fNWqE4NQujmEO4dqRs4uWXxktSgkxrEcpJK2fzQGxI4myhPdc/CKcIiF?=
 =?us-ascii?q?7gj9WOqPLzp0nmxpdK67ihqo70Ss1OvxXdSu3llQtCpKiNzMu2gN1xPN7siHTe?=
 =?us-ascii?q?Nw/lmu2TmRzQDf8OJELl4ulardNZEhxqQ8lp0JsUTMBiP2mUP2g7GKdkg85OSk?=
 =?us-ascii?q?9+Dqbq/7qpKSKYN4kBzyP6cylsClAOk1MBACX22B9uS90L3j81f5QLJPjvAulq?=
 =?us-ascii?q?nZsZbaJdkUp6KgAA9azJwj6xChADeiydgYmncGLFRbdxKdlIXpJV7OL+7iDful?=
 =?us-ascii?q?gFSjji1rx/bYMb3lGJnNKWLDkLj5cbZn90Fc0BYzzcxY559MDrEBIfHzVVHruN?=
 =?us-ascii?q?3XEx80KAi0w+fhCNVg2YISQ2OPAqmFMKzMtV+E/P4gI+6JZIUNojbyN+Al5+Ly?=
 =?us-ascii?q?jX8+gVIdfbOm3ZoLaH+iGfRqOUWZYWf2jdcHHmcHpQ4+TO3siF2fXj9ffXeyX6?=
 =?us-ascii?q?Qg5j4lDIKqF5vMRoeogLaZxie0AoVWZnxaClCLCXrodYKEVOkWZCKRJc9hlDoE?=
 =?us-ascii?q?Vb+6Ro8l1BGushL6yrV9IurV/C0YqYzs1Nxv6+LPkhEy8CR+D96B3GGVU2F0gm?=
 =?us-ascii?q?QISics06BkoUx9zVSD3bJig/NCF9xe/PdJUgY8NZ7BwO12EdHyWgTdftiXTFaq?=
 =?us-ascii?q?WMmpATY0Ttgp2d8Bf159G8m+jhDExyeqAKUal7qRCJww86LTxX7xJ8lmxnbC1a?=
 =?us-ascii?q?khiUQmQ8RVOW2ngK5/6xbcB4rTn0qFkKaqcLwW3DTR+2eb0WqOoEZYXRZtXqrf?=
 =?us-ascii?q?Q3AQeFHardTj6UPEVL+hF7InPgxFyc6BL6tKbsbkjVFHRPflJdTfbHi9m2a2BR?=
 =?us-ascii?q?aU2LyMaJDmdHka3CXYEEIEiRwc/W6aNQgiASesu3/RAyZwFV3xeU/s8fNxqHWg?=
 =?us-ascii?q?TkAqyQGHdElh17uz+h4Iiv2QUfIT3rQYuCg/rzV4Bkqy39XTC9CYvQpuYL1cYc?=
 =?us-ascii?q?8h4FdAzW/Zqw19PpmnL6B+hl4fcx57v1/02xVwEIVAlckqrHUlzAdpLaKY0VVB?=
 =?us-ascii?q?dy6X3JzqO73XLHXy8w6ra6LMxl7e19OW8L8V6Psks1XjoB2pFk06/np919lazX?=
 =?us-ascii?q?Sd6YvKDQYISp3xT1s4+AJ8p7HZZSk9+ZjZ1XltMamyrz/D1MglBOojyha8Ydhf?=
 =?us-ascii?q?NLmIGxP1E80fH8KuMvAlm0C1bhIYO+Bf7K41P968e/SawqKqPeZgkyigjWRI+4?=
 =?us-ascii?q?191kOM9yxhSu/HxZoFwveY3heZWDf4lluursf3mYVcbzEIAmW/0TTkBJJWZqBq?=
 =?us-ascii?q?Z4YLCHuhLNetxtpjgJ7hQXhY+0C5B1MHwcOmZQCdb1jg0gJOz0QXpnqnlDC8zz?=
 =?us-ascii?q?x1lTEps6We0DbPw+TkaBoIJGpLSHN+glfrJIi+l8oaU1Swbwg1iBul4l73xqha?=
 =?us-ascii?q?pKhlL2jfW1xIfzXwL2x5Vquwt7yCY9NA6Z8ysCVXVvi8bk6eSrLnvxQa1CbjFX?=
 =?us-ascii?q?NExD8nbzGqpon5nxtihWKfNnlztnnZecJ3xRvF/9zTX/1R3jkHRCl+lzbXAEOx?=
 =?us-ascii?q?P92o/dWSipfCvfqyV2OnVp1PbybryZmMuze85W1vGRe/hey8msX7EQgm1i/2z9?=
 =?us-ascii?q?lrWj/PrBrmYInr1qK6PPljfklpAl/89sV7Fpt/kos2mJEfx3waio+J8noAlGf5?=
 =?us-ascii?q?Kc9b1r7mbHoRWT4LxMbY4Av/101iNH6Jx5/5WW+bwstufNS6ZmIW2iQg78FFEq?=
 =?us-ascii?q?uU7bpEnTdrrVq8tw7eff99njIFw/s09HEam/0JuBYqziiFB7ASHEpYMjb2mxWG?=
 =?us-ascii?q?8d++t7lXa3i1cberykV+h9+hAaqGogFdXnb5Z5gjETVx7sV5LFLDznnz5pv4d9?=
 =?us-ascii?q?nXaNIZrgeUnAvYj+hJNJIxkeIHhTZgOWL4p3EkyvQ0jRpz3ZGhp4iHKn5g/Ka4?=
 =?us-ascii?q?Ah5eKz30aNkf+jDrjaZCgMmW25qjEYlmGjUORJHoV+6nECoOtfT7MAaDCCYzpW?=
 =?us-ascii?q?2cGbrbAA+T8kNmr2/UHpCvNnGXImQZzNp4SBmcIkxfnB4bXDEgkpElEQCqwdTr?=
 =?us-ascii?q?cF1l6TAJ+l74thxMx/pqNxblV2fQuhyoZi0oSJSFLxpW8wJC51rTMcOE9eJ+BC?=
 =?us-ascii?q?VY/pynrAyQJW2XfQVIDWcVWkOaA1DvJKWh5d7F8+KAHOqxM+POYamSqexZT/qJ?=
 =?us-ascii?q?xZWv0pZ//zaRLMqPOGNuD+Y82kpFUnB0AMDZmzQJSywKmCPBdc+bpBGg+iJpqs?=
 =?us-ascii?q?Cz6ujkWAXq5YGXEbtdLc1v+wyqgaeEL+OQhDh2KTdb1pMPxH/E0rsf3EQViyFh?=
 =?us-ascii?q?aTatC6kAtTXWQaLUm69XCQMbaixpOMtJ6aI8whdCOcrBhtzp0b54i+Y/C01ZWl?=
 =?us-ascii?q?z5hsGpecsKLnmnO1PaH0mLLqqJJD3Rz8HzYKOxUrlQjORStx2ttjeXCU7jPjKf?=
 =?us-ascii?q?lzb3UxCjK/1DjCaePBZGooGybg5tCXT/TNLhchC7LN53jTgszbIonH/FKW4cPi?=
 =?us-ascii?q?Z6c05Wqr2Q7CVYguhwGmBb73plK/WElDid7+XCNpkWtv5rCDxul+1G+HQ616dV?=
 =?us-ascii?q?7CZcSf11giTSqNtuo1CgkuaXyztnUABBqjBEhI+QuUViOKPZ9oRPWHre/RIN63?=
 =?us-ascii?q?mQBAoOp9d/FtLvvKVQmZDzk/ffITFD/tacw8YAG8XOYJaLOXwgPB6vBjPIEAYf?=
 =?us-ascii?q?ZTClKmXbwUddxqK87HqQ+78+p5v3kZwCUPdyUlAvC+gaAURoGt8FaMN+WD8+y+?=
 =?us-ascii?q?bD1OYH4HO/qF/aQ8AM7cOPbe6bHfi6cGXRtrJDfRZdhOqgdYk=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AkAABKigdch0O0hNFkGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUQYBAQELAYJdgQ4ng3mDe4QejF4BAQaBCAglFGiIAyEIaY07FIFjDgE?=
 =?us-ascii?q?BGBMBhECDDSI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmEBAQEBAwECF?=
 =?us-ascii?q?wkEEQgBGx0BAwIJAQEFBQsKAwICJgICAyARAQUBHAYNBgIBAQGDHIFpAQMIDQQ?=
 =?us-ascii?q?BmTI8iw18FgUBF4J3BYJEgXkKGScNXVBnAgYSeYl3gRyBD4EHgREnDIIqNYRGO?=
 =?us-ascii?q?4MEglcCgSoBAQGHewYEhkiBBo9OAQYCAYFVBY9hBhiBW4UUgnEQJocWlgeCSwI?=
 =?us-ascii?q?EAgQFAgUPIYElgg1wUDFtgU6CGwwXEoM4ilU+MoEFAQGLJwEB?=
X-IPAS-Result: =?us-ascii?q?A0AkAABKigdch0O0hNFkGwEBAQEDAQEBBwMBAQGBUQYBAQE?=
 =?us-ascii?q?LAYJdgQ4ng3mDe4QejF4BAQaBCAglFGiIAyEIaY07FIFjDgEBGBMBhECDDSI0C?=
 =?us-ascii?q?Q0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmEBAQEBAwECFwkEEQgBGx0BAwI?=
 =?us-ascii?q?JAQEFBQsKAwICJgICAyARAQUBHAYNBgIBAQGDHIFpAQMIDQQBmTI8iw18FgUBF?=
 =?us-ascii?q?4J3BYJEgXkKGScNXVBnAgYSeYl3gRyBD4EHgREnDIIqNYRGO4MEglcCgSoBAQG?=
 =?us-ascii?q?HewYEhkiBBo9OAQYCAYFVBY9hBhiBW4UUgnEQJocWlgeCSwIEAgQFAgUPIYElg?=
 =?us-ascii?q?g1wUDFtgU6CGwwXEoM4ilU+MoEFAQGLJwEB?=
X-IronPort-AV: E=Sophos;i="5.56,317,1539673200"; 
   d="scan'208";a="53889981"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 05 Dec 2018 00:23:13 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726979AbeLEIUK (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 5 Dec 2018 03:20:10 -0500
Received: from mail-lf1-f68.google.com ([209.85.167.68]:35235 "EHLO
        mail-lf1-f68.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726351AbeLEIUJ (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 5 Dec 2018 03:20:09 -0500
Received: by mail-lf1-f68.google.com with SMTP id e26so14059043lfc.2
        for <linux-kernel@vger.kernel.org>; Wed, 05 Dec 2018 00:20:06 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=subject:to:cc:references:from:message-id:date:user-agent
         :mime-version:in-reply-to:content-transfer-encoding:content-language;
        bh=qo59pa65k7u6J1vqLft7ywS0uHCF9Dh7yiCoQwNlKcw=;
        b=WFnFb13khNtu+Dd87dtiSUNhv+NV2/hDOBEH6uohd4mEuMe/wh6gYRevJLeYhtpt2i
         uzkOG3+X0N1Q3hvsUL2aClAvLONxBE1nTet8B4vzrQ1rsU5/8s40IEEUkFQsKbY0u+Om
         OK/as5SppPtjHz/d2dQ3chKxW8L5uPhZ/mDZnk7+coXXrKhC87SUx2oo26Sw2XjNVnb5
         Q+kyQZmzelFaEYVtQdBz7/oPHF5EjqzYkOMmLMWO4ZrkrbpZmduPfH01S5hF8QPqVWNQ
         PdiSXu0jcZDg2uY8vXD41aSCUj2DACRm/Z2ooZ7L0Vf95o+dE/g99Yrx8JrH5N7AoWQ0
         +K/Q==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:subject:to:cc:references:from:message-id:date
         :user-agent:mime-version:in-reply-to:content-transfer-encoding
         :content-language;
        bh=qo59pa65k7u6J1vqLft7ywS0uHCF9Dh7yiCoQwNlKcw=;
        b=dNPYEwIOYl4Q5lKU5C4mZyX0Ug9Zrh1+f6sh1sLMiqZUEyYYjJ0wgfW3MwHIy9oWas
         /cKwoBW3D+rX7y+1O8n20a1Qqsqk6eJ9dMbMaJOT3fh6a0fIy/vsbFS5H7srgqEke6dA
         MXzSHdqEfhyFrMAWmOiBzBm2mY/F7bNAlbfl7iWX2uyecjxfLnG8tL9VXPWaW1249alq
         Hn8WUEFif64xjjtDft59CbbrMtU0xBe2eeL+PYCPgz4hFstUO5+eDDXwab1r4e2sZaml
         lnGiRIwT0AuAFqwhNKLf3QLuln6Gpq+f/dkESVVi6XZs6T2k1/fMXzk6soh+c9YXspfK
         i22Q==
X-Gm-Message-State: AA+aEWao0Im7eFdkgSUN0twH4kEcqAIzku+kwXoBub61fXaPPLeNB0X9
        oghx0RuF6kl0YpkFSRcXptE=
X-Google-Smtp-Source: AFSGD/VMtprWuBrQKXIcNnHYKmgv4j/HX07hLuHYN2D6s4lP/tZUf7vrvLsXYC+Eze+ReAs0kZ4U5A==
X-Received: by 2002:a19:4bc9:: with SMTP id y192mr13476496lfa.49.1543998005083;
        Wed, 05 Dec 2018 00:20:05 -0800 (PST)
Received: from [10.17.182.20] (ll-22.209.223.85.sovam.net.ua. [85.223.209.22])
        by smtp.gmail.com with ESMTPSA id g4-v6sm3690469lji.17.2018.12.05.00.20.03
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Wed, 05 Dec 2018 00:20:04 -0800 (PST)
Subject: Re: [Xen-devel][PATCH v2 2/3] drm/xen-front: Use Xen common shared
 buffer implementation
To: Daniel Vetter <daniel.vetter@ffwll.ch>
Cc: xen-devel@lists.xenproject.org, linux-kernel@vger.kernel.org,
        dri-devel@lists.freedesktop.org, alsa-devel@alsa-project.org,
        jgross@suse.com, boris.ostrovsky@oracle.com,
        Oleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>
References: <20181130074205.20496-1-andr2000@gmail.com>
 <20181130074205.20496-2-andr2000@gmail.com>
From: Oleksandr Andrushchenko <andr2000@gmail.com>
Message-ID: <3c69d924-11e1-7037-bfa5-276d22b245fe@gmail.com>
Date: Wed, 5 Dec 2018 10:20:03 +0200
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.2.1
MIME-Version: 1.0
In-Reply-To: <20181130074205.20496-2-andr2000@gmail.com>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 7bit
Content-Language: en-US
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hello, Daniel!

Could you please ack/nack the patch, so either we can merge the

series or I can address your comments if any

Thank you,

Oleksandr

On 11/30/18 9:42 AM, Oleksandr Andrushchenko wrote:
> From: Oleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>
>
> Use page directory based shared buffer implementation
> now available as common code for Xen frontend drivers.
>
> Remove flushing of shared buffer on page flip as this
> workaround needs a proper fix.
>
> Signed-off-by: Oleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>
> ---
>   drivers/gpu/drm/xen/Kconfig               |   1 +
>   drivers/gpu/drm/xen/Makefile              |   1 -
>   drivers/gpu/drm/xen/xen_drm_front.c       |  65 ++--
>   drivers/gpu/drm/xen/xen_drm_front_gem.c   |   1 -
>   drivers/gpu/drm/xen/xen_drm_front_shbuf.c | 414 ----------------------
>   drivers/gpu/drm/xen/xen_drm_front_shbuf.h |  64 ----
>   6 files changed, 26 insertions(+), 520 deletions(-)
>   delete mode 100644 drivers/gpu/drm/xen/xen_drm_front_shbuf.c
>   delete mode 100644 drivers/gpu/drm/xen/xen_drm_front_shbuf.h
>
> diff --git a/drivers/gpu/drm/xen/Kconfig b/drivers/gpu/drm/xen/Kconfig
> index 4cca160782ab..f969d486855d 100644
> --- a/drivers/gpu/drm/xen/Kconfig
> +++ b/drivers/gpu/drm/xen/Kconfig
> @@ -12,6 +12,7 @@ config DRM_XEN_FRONTEND
>   	select DRM_KMS_HELPER
>   	select VIDEOMODE_HELPERS
>   	select XEN_XENBUS_FRONTEND
> +	select XEN_FRONT_PGDIR_SHBUF
>   	help
>   	  Choose this option if you want to enable a para-virtualized
>   	  frontend DRM/KMS driver for Xen guest OSes.
> diff --git a/drivers/gpu/drm/xen/Makefile b/drivers/gpu/drm/xen/Makefile
> index 712afff5ffc3..825905f67faa 100644
> --- a/drivers/gpu/drm/xen/Makefile
> +++ b/drivers/gpu/drm/xen/Makefile
> @@ -4,7 +4,6 @@ drm_xen_front-objs := xen_drm_front.o \
>   		      xen_drm_front_kms.o \
>   		      xen_drm_front_conn.o \
>   		      xen_drm_front_evtchnl.o \
> -		      xen_drm_front_shbuf.o \
>   		      xen_drm_front_cfg.o \
>   		      xen_drm_front_gem.o
>   
> diff --git a/drivers/gpu/drm/xen/xen_drm_front.c b/drivers/gpu/drm/xen/xen_drm_front.c
> index 6b6d5ab82ec3..4d3d36fc3a5d 100644
> --- a/drivers/gpu/drm/xen/xen_drm_front.c
> +++ b/drivers/gpu/drm/xen/xen_drm_front.c
> @@ -19,6 +19,7 @@
>   #include <xen/xen.h>
>   #include <xen/xenbus.h>
>   
> +#include <xen/xen-front-pgdir-shbuf.h>
>   #include <xen/interface/io/displif.h>
>   
>   #include "xen_drm_front.h"
> @@ -26,28 +27,20 @@
>   #include "xen_drm_front_evtchnl.h"
>   #include "xen_drm_front_gem.h"
>   #include "xen_drm_front_kms.h"
> -#include "xen_drm_front_shbuf.h"
>   
>   struct xen_drm_front_dbuf {
>   	struct list_head list;
>   	u64 dbuf_cookie;
>   	u64 fb_cookie;
> -	struct xen_drm_front_shbuf *shbuf;
> +
> +	struct xen_front_pgdir_shbuf shbuf;
>   };
>   
> -static int dbuf_add_to_list(struct xen_drm_front_info *front_info,
> -			    struct xen_drm_front_shbuf *shbuf, u64 dbuf_cookie)
> +static void dbuf_add_to_list(struct xen_drm_front_info *front_info,
> +			     struct xen_drm_front_dbuf *dbuf, u64 dbuf_cookie)
>   {
> -	struct xen_drm_front_dbuf *dbuf;
> -
> -	dbuf = kzalloc(sizeof(*dbuf), GFP_KERNEL);
> -	if (!dbuf)
> -		return -ENOMEM;
> -
>   	dbuf->dbuf_cookie = dbuf_cookie;
> -	dbuf->shbuf = shbuf;
>   	list_add(&dbuf->list, &front_info->dbuf_list);
> -	return 0;
>   }
>   
>   static struct xen_drm_front_dbuf *dbuf_get(struct list_head *dbuf_list,
> @@ -62,15 +55,6 @@ static struct xen_drm_front_dbuf *dbuf_get(struct list_head *dbuf_list,
>   	return NULL;
>   }
>   
> -static void dbuf_flush_fb(struct list_head *dbuf_list, u64 fb_cookie)
> -{
> -	struct xen_drm_front_dbuf *buf, *q;
> -
> -	list_for_each_entry_safe(buf, q, dbuf_list, list)
> -		if (buf->fb_cookie == fb_cookie)
> -			xen_drm_front_shbuf_flush(buf->shbuf);
> -}
> -
>   static void dbuf_free(struct list_head *dbuf_list, u64 dbuf_cookie)
>   {
>   	struct xen_drm_front_dbuf *buf, *q;
> @@ -78,8 +62,8 @@ static void dbuf_free(struct list_head *dbuf_list, u64 dbuf_cookie)
>   	list_for_each_entry_safe(buf, q, dbuf_list, list)
>   		if (buf->dbuf_cookie == dbuf_cookie) {
>   			list_del(&buf->list);
> -			xen_drm_front_shbuf_unmap(buf->shbuf);
> -			xen_drm_front_shbuf_free(buf->shbuf);
> +			xen_front_pgdir_shbuf_unmap(&buf->shbuf);
> +			xen_front_pgdir_shbuf_free(&buf->shbuf);
>   			kfree(buf);
>   			break;
>   		}
> @@ -91,8 +75,8 @@ static void dbuf_free_all(struct list_head *dbuf_list)
>   
>   	list_for_each_entry_safe(buf, q, dbuf_list, list) {
>   		list_del(&buf->list);
> -		xen_drm_front_shbuf_unmap(buf->shbuf);
> -		xen_drm_front_shbuf_free(buf->shbuf);
> +		xen_front_pgdir_shbuf_unmap(&buf->shbuf);
> +		xen_front_pgdir_shbuf_free(&buf->shbuf);
>   		kfree(buf);
>   	}
>   }
> @@ -171,9 +155,9 @@ int xen_drm_front_dbuf_create(struct xen_drm_front_info *front_info,
>   			      u32 bpp, u64 size, struct page **pages)
>   {
>   	struct xen_drm_front_evtchnl *evtchnl;
> -	struct xen_drm_front_shbuf *shbuf;
> +	struct xen_drm_front_dbuf *dbuf;
>   	struct xendispl_req *req;
> -	struct xen_drm_front_shbuf_cfg buf_cfg;
> +	struct xen_front_pgdir_shbuf_cfg buf_cfg;
>   	unsigned long flags;
>   	int ret;
>   
> @@ -181,28 +165,29 @@ int xen_drm_front_dbuf_create(struct xen_drm_front_info *front_info,
>   	if (unlikely(!evtchnl))
>   		return -EIO;
>   
> +	dbuf = kzalloc(sizeof(*dbuf), GFP_KERNEL);
> +	if (!dbuf)
> +		return -ENOMEM;
> +
> +	dbuf_add_to_list(front_info, dbuf, dbuf_cookie);
> +
>   	memset(&buf_cfg, 0, sizeof(buf_cfg));
>   	buf_cfg.xb_dev = front_info->xb_dev;
> +	buf_cfg.num_pages = DIV_ROUND_UP(size, PAGE_SIZE);
>   	buf_cfg.pages = pages;
> -	buf_cfg.size = size;
> +	buf_cfg.pgdir = &dbuf->shbuf;
>   	buf_cfg.be_alloc = front_info->cfg.be_alloc;
>   
> -	shbuf = xen_drm_front_shbuf_alloc(&buf_cfg);
> -	if (IS_ERR(shbuf))
> -		return PTR_ERR(shbuf);
> -
> -	ret = dbuf_add_to_list(front_info, shbuf, dbuf_cookie);
> -	if (ret < 0) {
> -		xen_drm_front_shbuf_free(shbuf);
> -		return ret;
> -	}
> +	ret = xen_front_pgdir_shbuf_alloc(&buf_cfg);
> +	if (ret < 0)
> +		goto fail_shbuf_alloc;
>   
>   	mutex_lock(&evtchnl->u.req.req_io_lock);
>   
>   	spin_lock_irqsave(&front_info->io_lock, flags);
>   	req = be_prepare_req(evtchnl, XENDISPL_OP_DBUF_CREATE);
>   	req->op.dbuf_create.gref_directory =
> -			xen_drm_front_shbuf_get_dir_start(shbuf);
> +			xen_front_pgdir_shbuf_get_dir_start(&dbuf->shbuf);
>   	req->op.dbuf_create.buffer_sz = size;
>   	req->op.dbuf_create.dbuf_cookie = dbuf_cookie;
>   	req->op.dbuf_create.width = width;
> @@ -221,7 +206,7 @@ int xen_drm_front_dbuf_create(struct xen_drm_front_info *front_info,
>   	if (ret < 0)
>   		goto fail;
>   
> -	ret = xen_drm_front_shbuf_map(shbuf);
> +	ret = xen_front_pgdir_shbuf_map(&dbuf->shbuf);
>   	if (ret < 0)
>   		goto fail;
>   
> @@ -230,6 +215,7 @@ int xen_drm_front_dbuf_create(struct xen_drm_front_info *front_info,
>   
>   fail:
>   	mutex_unlock(&evtchnl->u.req.req_io_lock);
> +fail_shbuf_alloc:
>   	dbuf_free(&front_info->dbuf_list, dbuf_cookie);
>   	return ret;
>   }
> @@ -358,7 +344,6 @@ int xen_drm_front_page_flip(struct xen_drm_front_info *front_info,
>   	if (unlikely(conn_idx >= front_info->num_evt_pairs))
>   		return -EINVAL;
>   
> -	dbuf_flush_fb(&front_info->dbuf_list, fb_cookie);
>   	evtchnl = &front_info->evt_pairs[conn_idx].req;
>   
>   	mutex_lock(&evtchnl->u.req.req_io_lock);
> diff --git a/drivers/gpu/drm/xen/xen_drm_front_gem.c b/drivers/gpu/drm/xen/xen_drm_front_gem.c
> index c85bfe7571cb..53be4c7dc0a4 100644
> --- a/drivers/gpu/drm/xen/xen_drm_front_gem.c
> +++ b/drivers/gpu/drm/xen/xen_drm_front_gem.c
> @@ -22,7 +22,6 @@
>   #include <xen/balloon.h>
>   
>   #include "xen_drm_front.h"
> -#include "xen_drm_front_shbuf.h"
>   
>   struct xen_gem_object {
>   	struct drm_gem_object base;
> diff --git a/drivers/gpu/drm/xen/xen_drm_front_shbuf.c b/drivers/gpu/drm/xen/xen_drm_front_shbuf.c
> deleted file mode 100644
> index d333b67cc1a0..000000000000
> --- a/drivers/gpu/drm/xen/xen_drm_front_shbuf.c
> +++ /dev/null
> @@ -1,414 +0,0 @@
> -// SPDX-License-Identifier: GPL-2.0 OR MIT
> -
> -/*
> - *  Xen para-virtual DRM device
> - *
> - * Copyright (C) 2016-2018 EPAM Systems Inc.
> - *
> - * Author: Oleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>
> - */
> -
> -#include <drm/drmP.h>
> -
> -#if defined(CONFIG_X86)
> -#include <drm/drm_cache.h>
> -#endif
> -#include <linux/errno.h>
> -#include <linux/mm.h>
> -
> -#include <asm/xen/hypervisor.h>
> -#include <xen/balloon.h>
> -#include <xen/xen.h>
> -#include <xen/xenbus.h>
> -#include <xen/interface/io/ring.h>
> -#include <xen/interface/io/displif.h>
> -
> -#include "xen_drm_front.h"
> -#include "xen_drm_front_shbuf.h"
> -
> -struct xen_drm_front_shbuf_ops {
> -	/*
> -	 * Calculate number of grefs required to handle this buffer,
> -	 * e.g. if grefs are required for page directory only or the buffer
> -	 * pages as well.
> -	 */
> -	void (*calc_num_grefs)(struct xen_drm_front_shbuf *buf);
> -	/* Fill page directory according to para-virtual display protocol. */
> -	void (*fill_page_dir)(struct xen_drm_front_shbuf *buf);
> -	/* Claim grant references for the pages of the buffer. */
> -	int (*grant_refs_for_buffer)(struct xen_drm_front_shbuf *buf,
> -				     grant_ref_t *priv_gref_head, int gref_idx);
> -	/* Map grant references of the buffer. */
> -	int (*map)(struct xen_drm_front_shbuf *buf);
> -	/* Unmap grant references of the buffer. */
> -	int (*unmap)(struct xen_drm_front_shbuf *buf);
> -};
> -
> -grant_ref_t xen_drm_front_shbuf_get_dir_start(struct xen_drm_front_shbuf *buf)
> -{
> -	if (!buf->grefs)
> -		return GRANT_INVALID_REF;
> -
> -	return buf->grefs[0];
> -}
> -
> -int xen_drm_front_shbuf_map(struct xen_drm_front_shbuf *buf)
> -{
> -	if (buf->ops->map)
> -		return buf->ops->map(buf);
> -
> -	/* no need to map own grant references */
> -	return 0;
> -}
> -
> -int xen_drm_front_shbuf_unmap(struct xen_drm_front_shbuf *buf)
> -{
> -	if (buf->ops->unmap)
> -		return buf->ops->unmap(buf);
> -
> -	/* no need to unmap own grant references */
> -	return 0;
> -}
> -
> -void xen_drm_front_shbuf_flush(struct xen_drm_front_shbuf *buf)
> -{
> -#if defined(CONFIG_X86)
> -	drm_clflush_pages(buf->pages, buf->num_pages);
> -#endif
> -}
> -
> -void xen_drm_front_shbuf_free(struct xen_drm_front_shbuf *buf)
> -{
> -	if (buf->grefs) {
> -		int i;
> -
> -		for (i = 0; i < buf->num_grefs; i++)
> -			if (buf->grefs[i] != GRANT_INVALID_REF)
> -				gnttab_end_foreign_access(buf->grefs[i],
> -							  0, 0UL);
> -	}
> -	kfree(buf->grefs);
> -	kfree(buf->directory);
> -	kfree(buf);
> -}
> -
> -/*
> - * number of grefs a page can hold with respect to the
> - * struct xendispl_page_directory header
> - */
> -#define XEN_DRM_NUM_GREFS_PER_PAGE ((PAGE_SIZE - \
> -		offsetof(struct xendispl_page_directory, gref)) / \
> -		sizeof(grant_ref_t))
> -
> -static int get_num_pages_dir(struct xen_drm_front_shbuf *buf)
> -{
> -	/* number of pages the page directory consumes itself */
> -	return DIV_ROUND_UP(buf->num_pages, XEN_DRM_NUM_GREFS_PER_PAGE);
> -}
> -
> -static void backend_calc_num_grefs(struct xen_drm_front_shbuf *buf)
> -{
> -	/* only for pages the page directory consumes itself */
> -	buf->num_grefs = get_num_pages_dir(buf);
> -}
> -
> -static void guest_calc_num_grefs(struct xen_drm_front_shbuf *buf)
> -{
> -	/*
> -	 * number of pages the page directory consumes itself
> -	 * plus grefs for the buffer pages
> -	 */
> -	buf->num_grefs = get_num_pages_dir(buf) + buf->num_pages;
> -}
> -
> -#define xen_page_to_vaddr(page) \
> -		((uintptr_t)pfn_to_kaddr(page_to_xen_pfn(page)))
> -
> -static int backend_unmap(struct xen_drm_front_shbuf *buf)
> -{
> -	struct gnttab_unmap_grant_ref *unmap_ops;
> -	int i, ret;
> -
> -	if (!buf->pages || !buf->backend_map_handles || !buf->grefs)
> -		return 0;
> -
> -	unmap_ops = kcalloc(buf->num_pages, sizeof(*unmap_ops),
> -			    GFP_KERNEL);
> -	if (!unmap_ops) {
> -		DRM_ERROR("Failed to get memory while unmapping\n");
> -		return -ENOMEM;
> -	}
> -
> -	for (i = 0; i < buf->num_pages; i++) {
> -		phys_addr_t addr;
> -
> -		addr = xen_page_to_vaddr(buf->pages[i]);
> -		gnttab_set_unmap_op(&unmap_ops[i], addr, GNTMAP_host_map,
> -				    buf->backend_map_handles[i]);
> -	}
> -
> -	ret = gnttab_unmap_refs(unmap_ops, NULL, buf->pages,
> -				buf->num_pages);
> -
> -	for (i = 0; i < buf->num_pages; i++) {
> -		if (unlikely(unmap_ops[i].status != GNTST_okay))
> -			DRM_ERROR("Failed to unmap page %d: %d\n",
> -				  i, unmap_ops[i].status);
> -	}
> -
> -	if (ret)
> -		DRM_ERROR("Failed to unmap grant references, ret %d", ret);
> -
> -	kfree(unmap_ops);
> -	kfree(buf->backend_map_handles);
> -	buf->backend_map_handles = NULL;
> -	return ret;
> -}
> -
> -static int backend_map(struct xen_drm_front_shbuf *buf)
> -{
> -	struct gnttab_map_grant_ref *map_ops = NULL;
> -	unsigned char *ptr;
> -	int ret, cur_gref, cur_dir_page, cur_page, grefs_left;
> -
> -	map_ops = kcalloc(buf->num_pages, sizeof(*map_ops), GFP_KERNEL);
> -	if (!map_ops)
> -		return -ENOMEM;
> -
> -	buf->backend_map_handles = kcalloc(buf->num_pages,
> -					   sizeof(*buf->backend_map_handles),
> -					   GFP_KERNEL);
> -	if (!buf->backend_map_handles) {
> -		kfree(map_ops);
> -		return -ENOMEM;
> -	}
> -
> -	/*
> -	 * read page directory to get grefs from the backend: for external
> -	 * buffer we only allocate buf->grefs for the page directory,
> -	 * so buf->num_grefs has number of pages in the page directory itself
> -	 */
> -	ptr = buf->directory;
> -	grefs_left = buf->num_pages;
> -	cur_page = 0;
> -	for (cur_dir_page = 0; cur_dir_page < buf->num_grefs; cur_dir_page++) {
> -		struct xendispl_page_directory *page_dir =
> -				(struct xendispl_page_directory *)ptr;
> -		int to_copy = XEN_DRM_NUM_GREFS_PER_PAGE;
> -
> -		if (to_copy > grefs_left)
> -			to_copy = grefs_left;
> -
> -		for (cur_gref = 0; cur_gref < to_copy; cur_gref++) {
> -			phys_addr_t addr;
> -
> -			addr = xen_page_to_vaddr(buf->pages[cur_page]);
> -			gnttab_set_map_op(&map_ops[cur_page], addr,
> -					  GNTMAP_host_map,
> -					  page_dir->gref[cur_gref],
> -					  buf->xb_dev->otherend_id);
> -			cur_page++;
> -		}
> -
> -		grefs_left -= to_copy;
> -		ptr += PAGE_SIZE;
> -	}
> -	ret = gnttab_map_refs(map_ops, NULL, buf->pages, buf->num_pages);
> -
> -	/* save handles even if error, so we can unmap */
> -	for (cur_page = 0; cur_page < buf->num_pages; cur_page++) {
> -		buf->backend_map_handles[cur_page] = map_ops[cur_page].handle;
> -		if (unlikely(map_ops[cur_page].status != GNTST_okay))
> -			DRM_ERROR("Failed to map page %d: %d\n",
> -				  cur_page, map_ops[cur_page].status);
> -	}
> -
> -	if (ret) {
> -		DRM_ERROR("Failed to map grant references, ret %d", ret);
> -		backend_unmap(buf);
> -	}
> -
> -	kfree(map_ops);
> -	return ret;
> -}
> -
> -static void backend_fill_page_dir(struct xen_drm_front_shbuf *buf)
> -{
> -	struct xendispl_page_directory *page_dir;
> -	unsigned char *ptr;
> -	int i, num_pages_dir;
> -
> -	ptr = buf->directory;
> -	num_pages_dir = get_num_pages_dir(buf);
> -
> -	/* fill only grefs for the page directory itself */
> -	for (i = 0; i < num_pages_dir - 1; i++) {
> -		page_dir = (struct xendispl_page_directory *)ptr;
> -
> -		page_dir->gref_dir_next_page = buf->grefs[i + 1];
> -		ptr += PAGE_SIZE;
> -	}
> -	/* last page must say there is no more pages */
> -	page_dir = (struct xendispl_page_directory *)ptr;
> -	page_dir->gref_dir_next_page = GRANT_INVALID_REF;
> -}
> -
> -static void guest_fill_page_dir(struct xen_drm_front_shbuf *buf)
> -{
> -	unsigned char *ptr;
> -	int cur_gref, grefs_left, to_copy, i, num_pages_dir;
> -
> -	ptr = buf->directory;
> -	num_pages_dir = get_num_pages_dir(buf);
> -
> -	/*
> -	 * while copying, skip grefs at start, they are for pages
> -	 * granted for the page directory itself
> -	 */
> -	cur_gref = num_pages_dir;
> -	grefs_left = buf->num_pages;
> -	for (i = 0; i < num_pages_dir; i++) {
> -		struct xendispl_page_directory *page_dir =
> -				(struct xendispl_page_directory *)ptr;
> -
> -		if (grefs_left <= XEN_DRM_NUM_GREFS_PER_PAGE) {
> -			to_copy = grefs_left;
> -			page_dir->gref_dir_next_page = GRANT_INVALID_REF;
> -		} else {
> -			to_copy = XEN_DRM_NUM_GREFS_PER_PAGE;
> -			page_dir->gref_dir_next_page = buf->grefs[i + 1];
> -		}
> -		memcpy(&page_dir->gref, &buf->grefs[cur_gref],
> -		       to_copy * sizeof(grant_ref_t));
> -		ptr += PAGE_SIZE;
> -		grefs_left -= to_copy;
> -		cur_gref += to_copy;
> -	}
> -}
> -
> -static int guest_grant_refs_for_buffer(struct xen_drm_front_shbuf *buf,
> -				       grant_ref_t *priv_gref_head,
> -				       int gref_idx)
> -{
> -	int i, cur_ref, otherend_id;
> -
> -	otherend_id = buf->xb_dev->otherend_id;
> -	for (i = 0; i < buf->num_pages; i++) {
> -		cur_ref = gnttab_claim_grant_reference(priv_gref_head);
> -		if (cur_ref < 0)
> -			return cur_ref;
> -
> -		gnttab_grant_foreign_access_ref(cur_ref, otherend_id,
> -						xen_page_to_gfn(buf->pages[i]),
> -						0);
> -		buf->grefs[gref_idx++] = cur_ref;
> -	}
> -	return 0;
> -}
> -
> -static int grant_references(struct xen_drm_front_shbuf *buf)
> -{
> -	grant_ref_t priv_gref_head;
> -	int ret, i, j, cur_ref;
> -	int otherend_id, num_pages_dir;
> -
> -	ret = gnttab_alloc_grant_references(buf->num_grefs, &priv_gref_head);
> -	if (ret < 0) {
> -		DRM_ERROR("Cannot allocate grant references\n");
> -		return ret;
> -	}
> -
> -	otherend_id = buf->xb_dev->otherend_id;
> -	j = 0;
> -	num_pages_dir = get_num_pages_dir(buf);
> -	for (i = 0; i < num_pages_dir; i++) {
> -		unsigned long frame;
> -
> -		cur_ref = gnttab_claim_grant_reference(&priv_gref_head);
> -		if (cur_ref < 0)
> -			return cur_ref;
> -
> -		frame = xen_page_to_gfn(virt_to_page(buf->directory +
> -					PAGE_SIZE * i));
> -		gnttab_grant_foreign_access_ref(cur_ref, otherend_id, frame, 0);
> -		buf->grefs[j++] = cur_ref;
> -	}
> -
> -	if (buf->ops->grant_refs_for_buffer) {
> -		ret = buf->ops->grant_refs_for_buffer(buf, &priv_gref_head, j);
> -		if (ret)
> -			return ret;
> -	}
> -
> -	gnttab_free_grant_references(priv_gref_head);
> -	return 0;
> -}
> -
> -static int alloc_storage(struct xen_drm_front_shbuf *buf)
> -{
> -	buf->grefs = kcalloc(buf->num_grefs, sizeof(*buf->grefs), GFP_KERNEL);
> -	if (!buf->grefs)
> -		return -ENOMEM;
> -
> -	buf->directory = kcalloc(get_num_pages_dir(buf), PAGE_SIZE, GFP_KERNEL);
> -	if (!buf->directory)
> -		return -ENOMEM;
> -
> -	return 0;
> -}
> -
> -/*
> - * For be allocated buffers we don't need grant_refs_for_buffer as those
> - * grant references are allocated at backend side
> - */
> -static const struct xen_drm_front_shbuf_ops backend_ops = {
> -	.calc_num_grefs = backend_calc_num_grefs,
> -	.fill_page_dir = backend_fill_page_dir,
> -	.map = backend_map,
> -	.unmap = backend_unmap
> -};
> -
> -/* For locally granted references we do not need to map/unmap the references */
> -static const struct xen_drm_front_shbuf_ops local_ops = {
> -	.calc_num_grefs = guest_calc_num_grefs,
> -	.fill_page_dir = guest_fill_page_dir,
> -	.grant_refs_for_buffer = guest_grant_refs_for_buffer,
> -};
> -
> -struct xen_drm_front_shbuf *
> -xen_drm_front_shbuf_alloc(struct xen_drm_front_shbuf_cfg *cfg)
> -{
> -	struct xen_drm_front_shbuf *buf;
> -	int ret;
> -
> -	buf = kzalloc(sizeof(*buf), GFP_KERNEL);
> -	if (!buf)
> -		return ERR_PTR(-ENOMEM);
> -
> -	if (cfg->be_alloc)
> -		buf->ops = &backend_ops;
> -	else
> -		buf->ops = &local_ops;
> -
> -	buf->xb_dev = cfg->xb_dev;
> -	buf->num_pages = DIV_ROUND_UP(cfg->size, PAGE_SIZE);
> -	buf->pages = cfg->pages;
> -
> -	buf->ops->calc_num_grefs(buf);
> -
> -	ret = alloc_storage(buf);
> -	if (ret)
> -		goto fail;
> -
> -	ret = grant_references(buf);
> -	if (ret)
> -		goto fail;
> -
> -	buf->ops->fill_page_dir(buf);
> -
> -	return buf;
> -
> -fail:
> -	xen_drm_front_shbuf_free(buf);
> -	return ERR_PTR(ret);
> -}
> diff --git a/drivers/gpu/drm/xen/xen_drm_front_shbuf.h b/drivers/gpu/drm/xen/xen_drm_front_shbuf.h
> deleted file mode 100644
> index 7545c692539e..000000000000
> --- a/drivers/gpu/drm/xen/xen_drm_front_shbuf.h
> +++ /dev/null
> @@ -1,64 +0,0 @@
> -/* SPDX-License-Identifier: GPL-2.0 OR MIT */
> -
> -/*
> - *  Xen para-virtual DRM device
> - *
> - * Copyright (C) 2016-2018 EPAM Systems Inc.
> - *
> - * Author: Oleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>
> - */
> -
> -#ifndef __XEN_DRM_FRONT_SHBUF_H_
> -#define __XEN_DRM_FRONT_SHBUF_H_
> -
> -#include <linux/kernel.h>
> -#include <linux/scatterlist.h>
> -
> -#include <xen/grant_table.h>
> -
> -struct xen_drm_front_shbuf {
> -	/*
> -	 * number of references granted for the backend use:
> -	 *  - for allocated/imported dma-buf's this holds number of grant
> -	 *    references for the page directory and pages of the buffer
> -	 *  - for the buffer provided by the backend this holds number of
> -	 *    grant references for the page directory as grant references for
> -	 *    the buffer will be provided by the backend
> -	 */
> -	int num_grefs;
> -	grant_ref_t *grefs;
> -	unsigned char *directory;
> -
> -	int num_pages;
> -	struct page **pages;
> -
> -	struct xenbus_device *xb_dev;
> -
> -	/* these are the ops used internally depending on be_alloc mode */
> -	const struct xen_drm_front_shbuf_ops *ops;
> -
> -	/* Xen map handles for the buffer allocated by the backend */
> -	grant_handle_t *backend_map_handles;
> -};
> -
> -struct xen_drm_front_shbuf_cfg {
> -	struct xenbus_device *xb_dev;
> -	size_t size;
> -	struct page **pages;
> -	bool be_alloc;
> -};
> -
> -struct xen_drm_front_shbuf *
> -xen_drm_front_shbuf_alloc(struct xen_drm_front_shbuf_cfg *cfg);
> -
> -grant_ref_t xen_drm_front_shbuf_get_dir_start(struct xen_drm_front_shbuf *buf);
> -
> -int xen_drm_front_shbuf_map(struct xen_drm_front_shbuf *buf);
> -
> -int xen_drm_front_shbuf_unmap(struct xen_drm_front_shbuf *buf);
> -
> -void xen_drm_front_shbuf_flush(struct xen_drm_front_shbuf *buf);
> -
> -void xen_drm_front_shbuf_free(struct xen_drm_front_shbuf *buf);
> -
> -#endif /* __XEN_DRM_FRONT_SHBUF_H_ */
