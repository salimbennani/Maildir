Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 06 Dec 2018 08:50:42 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id AC9575804F9;
	Wed,  5 Dec 2018 02:20:25 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 05 Dec 2018 02:20:25 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Ag+UOuxWjvXGVKIlwljJCLszPhmvV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhKEuKdThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGoOy?=
 =?us-ascii?q?YZUSAeodM+hWrIf9qFkPrRSiCgejC/jvyidKi3Ltwa06yv4sHR3a0AA8At4Dtm?=
 =?us-ascii?q?nfotXvNKcVVOC41KfEzTfZYPNTxzj985XDcgkgof6WW7J7bMTQxlMpFwPKk16c?=
 =?us-ascii?q?rZDoPymQ1u8QrWaU8fZvVeKpi24grwFxpTevx8cxgYTXhoIVy1bE+j98zIo7ON?=
 =?us-ascii?q?a1T0x7bsShEJROrCGWLZJ2QsI4TGFuoio7xKcJuZi0fCUR0psn3RvfZ+abfIiP?=
 =?us-ascii?q?5xLuTeCcKip2inJifbKwnRey8U64x+3lV8m7ylBKojBLk9bWsHAN2Bre4dWERP?=
 =?us-ascii?q?tl5kqtxyqD2gTJ5u1ZL004i7DXJ4Miz7IsjJYesEbOEjfrlEnrgqKabFso9+yy?=
 =?us-ascii?q?5+nkYbjqvJ2RO5d6ig7gMakihsmyDOE2PwUNQmeW+eGx26Dj8ELnXrpHi+Y5n6?=
 =?us-ascii?q?3FvJ/GIMkWorK1DxJJ3Ysl9h2xFS2p0M4CknkCNF9FeAyIj4zuO1zWPvD4Aumw?=
 =?us-ascii?q?g062nDdo2f/GJLvhDYvJLnTZl7fhZ7l951ZdyAo1099f+4pZBq8dLP/3QEP9qd?=
 =?us-ascii?q?LVAgEjPwCpwOvrFM9x24IcVG6XB6+WKqLSsVuG5uI1JOmMYZcYuDL8K/gj+v7v?=
 =?us-ascii?q?gmY1mVwDcqmz25sYdnS4Eu1hI0SXZ3rjnM0BHHwUvgoxUuPqkkeOUT1NaHaoWa?=
 =?us-ascii?q?Iz+DU7BJihDYfZSYChmKaB0zujHp1KemBGDUiBEXPpd4WHRfgAci2TItJ6nzwA?=
 =?us-ascii?q?VLihTZIh1B60uA/7zbpnMvTb+ikCuZ3/09h14vXZlQsu+jxsE8Sdz2aNQnl0nm?=
 =?us-ascii?q?wSRj82wLpwoUtnxleDzKh3mfpYFdNI6vNNUwc6M4PczuNgB9DzXALBYsmGSFK8?=
 =?us-ascii?q?Ttq6BjExS8o7w8USbEZlB9WikhfD0jKoA78SibOHHp808qXa33j3IMZw0HLG1K?=
 =?us-ascii?q?gnj1k7TcpDL2ymhqhj9wfNA47FiVmWl6Gvda4Exi7C6H+DzXaSvEFfSAN/S77F?=
 =?us-ascii?q?XXAYZkvVt9j5/FnNT721BLQjMwtBz9OCK6RQZt3oi1VGWOnsONDEb22tnGewAA?=
 =?us-ascii?q?6CxqmQY4ryZ2UdwCLdBVAHkw8J+3aKLww+Bia7rGLYAzxjDlbvY0Lq8eljp3K3?=
 =?us-ascii?q?VE40zweWb0J/07q54AIahfuZS/kLxLILpD8hqyloHFa6x9/ZFsCPpxR/c6lGYd?=
 =?us-ascii?q?My+lFH1XnHuAx7OZCgK6Nihlsacwlsu0Pu1hN3CphPkMQwrXMqyhZyJryc0F9b?=
 =?us-ascii?q?azyY2pXwMKXNKmbu5BCvd7LW2lbG3dmL4KgP9uo3p0/jvA6zEEoi6Gto099O3n?=
 =?us-ascii?q?uY55XKChcSUJ3rXkY28Rh6u6/VYi0n64zI0n1sNLG+siXe1NIxGOsl1hGgcs9D?=
 =?us-ascii?q?MKOFEQ/yFNEaB8iuKeAwh1ildBUEPPpW9K41OcOmeOCL2KqqPOZmgTKngn5L4I?=
 =?us-ascii?q?F70kKQ6SV8TvTE0IoCw/GdxgGHTSvzjE+9ssDrnoBJfSsdHm6hxinrGoFQZrd+?=
 =?us-ascii?q?cp0WCWizOcK3wNZ+h5nzW3ND8F6jBlUG2NKmeBaIblz92xFQ2loToXC9hSS4yD?=
 =?us-ascii?q?l0mSkzrqWDxCzO3/jidB0fN29LWWlul0vjLZK1jtAaRkeoaQcpmQCh5Ub7wahb?=
 =?us-ascii?q?uat+I3PSQUdOYyj5MWViXrGsubqFZs5F8IkovjlPUOSgfVCaTabwowEb0yz/BW?=
 =?us-ascii?q?Re3i00dzawtpX/gRN6kmOdIG9vo3XDfcF/2AnQ5MbbRf5XxTcGQCh4iT/KBlmz?=
 =?us-ascii?q?JdWp/NOUl4vdveC6TW6uSppTcSzzx4OaqCS7/XFqAQG4n/2rmtznEBI20C/h29?=
 =?us-ascii?q?lxSCXIqg3xYo3q16S8LOJmcVNkBF7668pmBI5+lpE8i40X2Xgfnp+V52YIkX/v?=
 =?us-ascii?q?MdVH3qLzdHgNSiQRw97W4wjl31dvLmmTyIL6VXWdw81haMe8Ym4N3iI97sZKCL?=
 =?us-ascii?q?qb7bBenCt1pEa4ohzVYfRngjgdzv4u4mYAg+4VoAot0jmdArcKEEhYJyPskA6E?=
 =?us-ascii?q?79K/rKVRf2uvdbmw1ExjndGuFr2CowdcWGrndZcmByN/8sJ/MFfU2n3p9o7kYM?=
 =?us-ascii?q?XQbc4UthCMkBfPlelVJIgxlvoXnyVnP239sGYhy+46ixxuwJ67sJKGK2Vr4KK2?=
 =?us-ascii?q?HBpYOifpaMMU/zHnlbxekdqO34CzApVhHS0GXJ7pTfKrCj0er/rmOBiVED0gtH?=
 =?us-ascii?q?ibA6HQEhGF6EdptH/PF5GrN3eKJHgW19liRR+dJFBBjwAQRjk1gpk5FgWyzsz7?=
 =?us-ascii?q?bEh5/iwR5kL/qhZU1uJoMBz/Xn3epQiybDc0VYOfLAFX7gxZ40fVMMqe7v98Hi?=
 =?us-ascii?q?1C/52hqhCNJXKfZwhSEW4JXUmEDUj5Pray/dnA7/SYBu2mIvTVe7qOruheV+qS?=
 =?us-ascii?q?yZKrz4tr5DKMNsSJPnl/APw3wEtDXXZlG8vHnzUDUTAYlyXIb8SDvhez5jV3rt?=
 =?us-ascii?q?yj8PTsQA/v55GAC75MPtV04Ry2nb2PN+2NhCZ6NDZY0IkDxWTTxbgb3V4SjTxu?=
 =?us-ascii?q?dja3HbQBsy7NULzfmqtNAxEHbCNzMdNC77gg0QlVJc7bltT126Z4j/4yFldFTE?=
 =?us-ascii?q?HhlduvZcAQOGG9M1XHBEmQObSCJD3Lxdz3YKymRb1RiuVUqwO/uTKBH0D/OTSD?=
 =?us-ascii?q?kiHjVwqzPuFUkCGbIBtetZm9chlzCGjjT9HmahyhPN90lz02xrI0iW3QNW4BKj?=
 =?us-ascii?q?hxaEdNrryW7SNFjfRzAW1B7nx5LeaanyaV9fXXKpETsfFzGCR7i/pa4Ggmy7tS?=
 =?us-ascii?q?9CxLXuF1lzDIrtFwo1CqiO2Pyjt8XRpKqzZLgp+LvEp4NaXY8JlARWjL/BYX4W?=
 =?us-ascii?q?qMDBQKosNvCsfztKBI1tjPiKXzJS9e89LV+MsQHdTbJNibP3ohLxXpHiXZDA8E?=
 =?us-ascii?q?TT6tKGHeiFZRkPCU9n2JsJc6roLgl4YJSr9eTFY1DO8VClx5HNweJ5d6RjMlnq?=
 =?us-ascii?q?SdjM4N5Hq+qgHeRcRavp/dUPKSDu7iKDKYjblCehsJzqn0LYUVNo3nxUNibkN2?=
 =?us-ascii?q?k5jNG0rVDphxpXhFbxE1vQ1h7XR3UyVn/0P7ax7rzGIfHOOclwQzzAB5ZLJ+2i?=
 =?us-ascii?q?3r5gJ9JFPPqTB4iUg4n536iDaeOH7YNqL4YYxdCyzzs08+I9vQQwdzZEz41Rhm?=
 =?us-ascii?q?PTLJXPRIjrJmM39ijgD0sIFKX/VbSPsXM1cr2fiLaqBwghxnoSK9yBoCvLOdBA?=
 =?us-ascii?q?=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BkAAAppQdch0O0hNFkHgEGBwaBUggLA?=
 =?us-ascii?q?YEwUGlzBAsUEwqHNgOQE0opgT85aIlvh2iEeRSBEANFGgEYAxABh1EiNQgNAQM?=
 =?us-ascii?q?BAQEBAQECARMBAQEIDQkIKSMMgjYkAYJiAwMBAiQZAQE3AQUJAQEBAU4DLyUCB?=
 =?us-ascii?q?A4FBYMcAYFpAxQBAQICmh4CigeBbDOCdgEBBYUGGIIJCIweVSWBHIERM4IqhHs?=
 =?us-ascii?q?EEIYCiREagXmEWIEHj1UHAgKDE4NuijQjgiiPByyYKwIEAgQFAg0BAQWBRwGCC?=
 =?us-ascii?q?3BQgmwJghIMF4NKiC2CJkExAYEEAQEhiC+BLgGBHgEB?=
X-IPAS-Result: =?us-ascii?q?A0BkAAAppQdch0O0hNFkHgEGBwaBUggLAYEwUGlzBAsUEwq?=
 =?us-ascii?q?HNgOQE0opgT85aIlvh2iEeRSBEANFGgEYAxABh1EiNQgNAQMBAQEBAQECARMBA?=
 =?us-ascii?q?QEIDQkIKSMMgjYkAYJiAwMBAiQZAQE3AQUJAQEBAU4DLyUCBA4FBYMcAYFpAxQ?=
 =?us-ascii?q?BAQICmh4CigeBbDOCdgEBBYUGGIIJCIweVSWBHIERM4IqhHsEEIYCiREagXmEW?=
 =?us-ascii?q?IEHj1UHAgKDE4NuijQjgiiPByyYKwIEAgQFAg0BAQWBRwGCC3BQgmwJghIMF4N?=
 =?us-ascii?q?KiC2CJkExAYEEAQEhiC+BLgGBHgEB?=
X-IronPort-AV: E=Sophos;i="5.56,317,1539673200"; 
   d="scan'208";a="140843605"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 05 Dec 2018 02:20:24 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727777AbeLEKTl (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 5 Dec 2018 05:19:41 -0500
Received: from mail-eopbgr10082.outbound.protection.outlook.com ([40.107.1.82]:3841
        "EHLO EUR02-HE1-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1727349AbeLEKTk (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 5 Dec 2018 05:19:40 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=armh.onmicrosoft.com;
 s=selector1-arm-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=vFMV7eD1MZLdiKF64kYi0NC6yVA0pOU5YhUaggDBOUk=;
 b=V5Gfj2bJY+gIY+uCnfkR7VQqX0IV5BPt1rK5x3IJrSlM74j3keYRJucBIHkrjawlCc2yp4Id0qas9ST4kvlW5pzFwgG+8XVanfCOVAP4iMmq5zeINqRgkHt1wlQw4/Fy5GMdD3jVzGd3xj5eFOXk00zfcHcClEG5OT3vIneOWL4=
Received: from AM3PR08MB0611.eurprd08.prod.outlook.com (10.163.188.149) by
 AM3PR08MB0580.eurprd08.prod.outlook.com (10.163.188.142) with Microsoft SMTP
 Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1404.17; Wed, 5 Dec 2018 10:19:29 +0000
Received: from AM3PR08MB0611.eurprd08.prod.outlook.com
 ([fe80::38d5:d5ee:b90c:901c]) by AM3PR08MB0611.eurprd08.prod.outlook.com
 ([fe80::38d5:d5ee:b90c:901c%4]) with mapi id 15.20.1382.023; Wed, 5 Dec 2018
 10:19:29 +0000
From: "james qian wang (Arm Technology China)" <james.qian.wang@arm.com>
To: Liviu Dudau <Liviu.Dudau@arm.com>
CC: "Jonathan Chai (Arm Technology China)" <Jonathan.Chai@arm.com>,
        Brian Starkey <Brian.Starkey@arm.com>,
        "Julien Yin (Arm Technology China)" <Julien.Yin@arm.com>,
        "thomas Sun (Arm Technology China)" <thomas.Sun@arm.com>,
        Alexandru-Cosmin Gheorghe <Alexandru-Cosmin.Gheorghe@arm.com>,
        "Lowry Li (Arm Technology China)" <Lowry.Li@arm.com>,
        nd <nd@arm.com>, Ayan Halder <Ayan.Halder@arm.com>,
        "Tiannan Zhu (Arm Technology China)" <Tiannan.Zhu@arm.com>,
        "Jin Gao (Arm Technology China)" <Jin.Gao@arm.com>,
        "Yiqi Kang (Arm Technology China)" <Yiqi.Kang@arm.com>,
        "maarten.lankhorst@linux.intel.com" 
        <maarten.lankhorst@linux.intel.com>,
        "maxime.ripard@bootlin.com" <maxime.ripard@bootlin.com>,
        "sean@poorly.run" <sean@poorly.run>,
        "airlied@linux.ie" <airlied@linux.ie>,
        Liviu Dudau <Liviu.Dudau@arm.com>,
        "malidp@foss.arm.com" <malidp@foss.arm.com>,
        "dri-devel@lists.freedesktop.org" <dri-devel@lists.freedesktop.org>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        "james qian wang (Arm Technology China)" <james.qian.wang@arm.com>
Subject: [PATCH v1 5/9] drm/komeda: Add komeda_format_caps for format handling
Thread-Topic: [PATCH v1 5/9] drm/komeda: Add komeda_format_caps for format
 handling
Thread-Index: AQHUjIQBkxJsMs3do0KhkS81Ugytfg==
Date: Wed, 5 Dec 2018 10:19:29 +0000
Message-ID: <20181205101635.7696-6-james.qian.wang@arm.com>
References: <20181205101635.7696-1-james.qian.wang@arm.com>
In-Reply-To: <20181205101635.7696-1-james.qian.wang@arm.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-originating-ip: [113.29.88.7]
x-clientproxiedby: SYCPR01CA0014.ausprd01.prod.outlook.com
 (2603:10c6:10:31::26) To AM3PR08MB0611.eurprd08.prod.outlook.com
 (2a01:111:e400:c408::21)
authentication-results: spf=none (sender IP is )
 smtp.mailfrom=james.qian.wang@arm.com; 
x-ms-exchange-messagesentrepresentingtype: 1
x-ms-publictraffictype: Email
x-microsoft-exchange-diagnostics: 1;AM3PR08MB0580;6:njBOZmLT2GZuS7FgqLK5RIoWNulqmNYZ4Y21HM7ryiQWeIRXmA3YIdsI1h7cgtw0hfmSU+DnJelJggWnLZlGbdgpQwSJVTXTXWwGXNNkS4YcTiufn0a+H5hityp7mB7Ku5ZMT3Ad4ktVDI5gOa83ZGZzwXB9D7KE7ma4q+70YMgMxlt+gSYzF9RTkv1i+VLY1GCKGdBmuVDbt3xgcwpf5DAm85BoxL4yqpOefc6YikW83RuzFQvyDwU8+irXz9u3nhvgKN4L1cr0vqjTOpR2O0o9jJce4Up0xpccklRRKjd5VnZjGMnB7Ppu/Y+epH8oHi86UtursSgFgPU8PTj3doreehiSfJXRyThWLLFdcj3omO+QLXBEgFKeQscA5zKKJfUM6JcgKnWDmXcgMtmPH+axVJDNhCFgXtvBqKrMWdy+MkQUrlT3ljQHachiUjX4O6jJiMxE2o6r+3KXX7fsGg==;5:4Ifsxz4XlvkFjqCQxP56oNVgF5jRi8aCjcR0D0x3MW20U9gOJAl7qpU4Sxa+u/gQ/K6MrRrr/4ekS/Ad7FYtjoV7/Q1G0BCNBvLQ7ZYekUKaY4FB7hXt+KMjpUKG2t0Lk3nVOcmftNR1czTOO+nu7VRjKr2OnhOyGpDPxN67pbA=;7:DTbaQ1yhh08wd1Lq1M/D63Z4L/fbbK/C2ZMy8kFJtl2CHa10HcQD1NHJrjCRjVRGN1RUjsvO/CEeBoOeysdEOa3QCvR8EDga13tbtiKRsGhYUdIMIlpeY8/LTvpA/pBtMr0E+WRalH3g3bK+t1UUJg==
x-ms-office365-filtering-correlation-id: 5b07bab8-a58c-4c3d-2fce-08d65a9b2417
x-ms-office365-filtering-ht: Tenant
x-microsoft-antispam: BCL:0;PCL:0;RULEID:(2390098)(7020095)(4652040)(8989299)(5600074)(711020)(4618075)(4534185)(7168020)(4627221)(201703031133081)(201702281549075)(8990200)(2017052603328)(7153060)(7193020);SRVR:AM3PR08MB0580;
x-ms-traffictypediagnostic: AM3PR08MB0580:
nodisclaimer: True
x-microsoft-antispam-prvs: <AM3PR08MB0580F4349BB06F9CC25A0458B3A80@AM3PR08MB0580.eurprd08.prod.outlook.com>
x-ms-exchange-senderadcheck: 1
x-exchange-antispam-report-cfa-test: BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(8121501046)(5005006)(3002001)(93006095)(93001095)(3231455)(999002)(944501520)(52105112)(10201501046)(6055026)(148016)(149066)(150057)(6041310)(20161123562045)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123560045)(20161123564045)(20161123558120)(201708071742011)(7699051)(76991095);SRVR:AM3PR08MB0580;BCL:0;PCL:0;RULEID:;SRVR:AM3PR08MB0580;
x-forefront-prvs: 08770259B4
x-forefront-antispam-report: SFV:NSPM;SFS:(10009020)(366004)(136003)(39860400002)(346002)(396003)(376002)(199004)(189003)(446003)(71190400001)(25786009)(4326008)(486006)(71200400001)(3846002)(478600001)(6116002)(575784001)(186003)(256004)(102836004)(55236004)(14454004)(6862004)(86362001)(97736004)(4744004)(26005)(14444005)(105586002)(103116003)(37006003)(53936002)(106356001)(36756003)(476003)(2906002)(386003)(7736002)(6506007)(305945005)(6436002)(8676002)(68736007)(2616005)(6636002)(6512007)(8936002)(6486002)(76176011)(1076002)(81156014)(52116002)(11346002)(99286004)(66066001)(316002)(81166006)(54906003)(5660300001)(21314003);DIR:OUT;SFP:1101;SCL:1;SRVR:AM3PR08MB0580;H:AM3PR08MB0611.eurprd08.prod.outlook.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;A:1;MX:1;
x-microsoft-antispam-message-info: gT9XAlgpYVcFQTYI4eEiHDYQt3QsMhoI7Vtcgl2Lr1D5B3dt6AnnOnWY72ZdUNIcvDLtVlgCR/m3y5LZYq4kctn78bUrMaMkyIDngorJWg7py3NIoR/nUz827g3vqMAHbk9L+J+DuP/bcShyHHJEfS/RKkqtJ4hL1L+54YmLz5IXq7qc4UJ+7UU15xX3plk3TO4R8onW1sBMufj/eYv0eLH2Cp8OHWR89O23CAJKfjkY9c71zLHW0uCO6T2m/At0C9Eit5fWVxpyv/DW88jnlt7Qk2Acq0ns+uhIH9R75KWc7ktWfCOfdCBZ9OgaNBHFoxQxofLS5FzZtl7YzOEhJX1U/TCXf9rQyTECwHPtvWM=
spamdiagnosticoutput: 1:99
spamdiagnosticmetadata: NSPM
Content-Type: text/plain; charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
X-OriginatorOrg: arm.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 5b07bab8-a58c-4c3d-2fce-08d65a9b2417
X-MS-Exchange-CrossTenant-originalarrivaltime: 05 Dec 2018 10:19:29.5317
 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: f34e5979-57d9-4aaa-ad4d-b122a662184d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: AM3PR08MB0580
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

komeda_format_caps is for describing ARM display specific features and
limitations of a specific format, and format_caps will be linked into
&komeda_framebuffer like a extension of &drm_format_info.
And komed_format_caps_table will be initialized before the enum_resources,
since the layer features description depend on this format_caps table, so
we'd better initialize the table first.

Signed-off-by: James (Qian) Wang <james.qian.wang@arm.com>
---
 drivers/gpu/drm/arm/display/komeda/Makefile   |  1 +
 .../gpu/drm/arm/display/komeda/d71/d71_dev.c  | 78 ++++++++++++++++
 .../gpu/drm/arm/display/komeda/komeda_dev.c   |  2 +
 .../gpu/drm/arm/display/komeda/komeda_dev.h   | 11 ++-
 .../arm/display/komeda/komeda_format_caps.c   | 75 ++++++++++++++++
 .../arm/display/komeda/komeda_format_caps.h   | 89 +++++++++++++++++++
 .../drm/arm/display/komeda/komeda_pipeline.h  |  1 +
 7 files changed, 256 insertions(+), 1 deletion(-)
 create mode 100644 drivers/gpu/drm/arm/display/komeda/komeda_format_caps.c
 create mode 100644 drivers/gpu/drm/arm/display/komeda/komeda_format_caps.h

diff --git a/drivers/gpu/drm/arm/display/komeda/Makefile b/drivers/gpu/drm/=
arm/display/komeda/Makefile
index 4efcce0cdce8..c86602131dbc 100644
--- a/drivers/gpu/drm/arm/display/komeda/Makefile
+++ b/drivers/gpu/drm/arm/display/komeda/Makefile
@@ -7,6 +7,7 @@ ccflags-y :=3D \
 komeda-y :=3D \
 	komeda_drv.o \
 	komeda_dev.o \
+	komeda_format_caps.o \
 	komeda_pipeline.o
=20
 komeda-y +=3D \
diff --git a/drivers/gpu/drm/arm/display/komeda/d71/d71_dev.c b/drivers/gpu=
/drm/arm/display/komeda/d71/d71_dev.c
index af3dabb499cd..2d22be54ef48 100644
--- a/drivers/gpu/drm/arm/display/komeda/d71/d71_dev.c
+++ b/drivers/gpu/drm/arm/display/komeda/d71/d71_dev.c
@@ -13,7 +13,85 @@ static int d71_enum_resources(struct komeda_dev *mdev)
 	return -1;
 }
=20
+#define __HW_ID(__group, __format) \
+	(((__group & 0x7) << 3) | (__format & 0x7))
+
+#define RICH		KOMEDA_FMT_RICH_LAYER
+#define SIMPLE		KOMEDA_FMT_SIMPLE_LAYER
+#define RICH_SIMPLE	KOMEDA_FMT_RICH_LAYER | KOMEDA_FMT_SIMPLE_LAYER
+#define RICH_WB		KOMEDA_FMT_RICH_LAYER | KOMEDA_FMT_WB_LAYER
+#define RICH_SIMPLE_WB	RICH_SIMPLE | KOMEDA_FMT_WB_LAYER
+
+#define Rot_0		DRM_MODE_ROTATE_0
+#define Flip_H_V	DRM_MODE_REFLECT_X | DRM_MODE_REFLECT_Y | Rot_0
+#define Rot_ALL_H_V	DRM_MODE_ROTATE_MASK | Flip_H_V
+
+#define LYT_NM		BIT(AFBC_FORMAT_MOD_BLOCK_SIZE_16x16)
+#define LYT_WB		BIT(AFBC_FORMAT_MOD_BLOCK_SIZE_32x8)
+#define LYT_NM_WB	LYT_NM | LYT_WB
+
+#define AFB_TH		AFBC(_TILED | _SPARSE)
+#define AFB_TH_SC_YTR	AFBC(_TILED | _SC | _SPARSE | _YTR)
+#define AFB_TH_SC_YTR_BS AFBC(_TILED | _SC | _SPARSE | _YTR | _SPLIT)
+
+static struct komeda_format_caps d71_format_caps_table[] =3D {
+	/*   HW_ID    |        fourcc        | tile_sz |   layer_types |   rots  =
  | afbc_layouts | afbc_features */
+	/* ABGR_2101010*/
+	{__HW_ID(0, 0),	DRM_FORMAT_ARGB2101010,	1,	RICH_SIMPLE_WB,	Flip_H_V,		0, =
0},
+	{__HW_ID(0, 1),	DRM_FORMAT_ABGR2101010,	1,	RICH_SIMPLE_WB,	Flip_H_V,		0, =
0},
+	{__HW_ID(0, 1),	DRM_FORMAT_ABGR2101010,	1,	RICH_SIMPLE,	Rot_ALL_H_V,	LYT_=
NM_WB, AFB_TH_SC_YTR_BS}, /* afbc */
+	{__HW_ID(0, 2),	DRM_FORMAT_RGBA1010102,	1,	RICH_SIMPLE_WB,	Flip_H_V,		0, =
0},
+	{__HW_ID(0, 3),	DRM_FORMAT_BGRA1010102,	1,	RICH_SIMPLE_WB,	Flip_H_V,		0, =
0},
+	/* ABGR_8888*/
+	{__HW_ID(1, 0),	DRM_FORMAT_ARGB8888,	1,	RICH_SIMPLE_WB,	Flip_H_V,		0, 0},
+	{__HW_ID(1, 1),	DRM_FORMAT_ABGR8888,	1,	RICH_SIMPLE_WB,	Flip_H_V,		0, 0},
+	{__HW_ID(1, 1),	DRM_FORMAT_ABGR8888,	1,	RICH_SIMPLE,	Rot_ALL_H_V,	LYT_NM_=
WB, AFB_TH_SC_YTR_BS}, /* afbc */
+	{__HW_ID(1, 2),	DRM_FORMAT_RGBA8888,	1,	RICH_SIMPLE_WB,	Flip_H_V,		0, 0},
+	{__HW_ID(1, 3),	DRM_FORMAT_BGRA8888,	1,	RICH_SIMPLE_WB,	Flip_H_V,		0, 0},
+	/* XBGB_8888 */
+	{__HW_ID(2, 0),	DRM_FORMAT_XRGB8888,	1,	RICH_SIMPLE_WB,	Flip_H_V,		0, 0},
+	{__HW_ID(2, 1),	DRM_FORMAT_XBGR8888,	1,	RICH_SIMPLE_WB,	Flip_H_V,		0, 0},
+	{__HW_ID(2, 2),	DRM_FORMAT_RGBX8888,	1,	RICH_SIMPLE_WB,	Flip_H_V,		0, 0},
+	{__HW_ID(2, 3),	DRM_FORMAT_BGRX8888,	1,	RICH_SIMPLE_WB,	Flip_H_V,		0, 0},
+	/* BGR_888 */ /* none-afbc RGB888 doesn't support rotation and flip */
+	{__HW_ID(3, 0),	DRM_FORMAT_RGB888,	1,	RICH_SIMPLE_WB,	Rot_0,			0, 0},
+	{__HW_ID(3, 1),	DRM_FORMAT_BGR888,	1,	RICH_SIMPLE_WB,	Rot_0,			0, 0},
+	{__HW_ID(3, 1),	DRM_FORMAT_BGR888,	1,	RICH_SIMPLE,	Rot_ALL_H_V,	LYT_NM_WB=
, AFB_TH_SC_YTR_BS}, /* afbc */
+	/* BGR 16bpp */
+	{__HW_ID(4, 0),	DRM_FORMAT_RGBA5551,	1,	RICH_SIMPLE,	Flip_H_V,		0, 0},
+	{__HW_ID(4, 1),	DRM_FORMAT_ABGR1555,	1,	RICH_SIMPLE,	Flip_H_V,		0, 0},
+	{__HW_ID(4, 1),	DRM_FORMAT_ABGR1555,	1,	RICH_SIMPLE,	Rot_ALL_H_V,	LYT_NM_=
WB, AFB_TH_SC_YTR}, /* afbc */
+	{__HW_ID(4, 2),	DRM_FORMAT_RGB565,	1,	RICH_SIMPLE,	Flip_H_V,		0, 0},
+	{__HW_ID(4, 3),	DRM_FORMAT_BGR565,	1,	RICH_SIMPLE,	Flip_H_V,		0, 0},
+	{__HW_ID(4, 3),	DRM_FORMAT_BGR565,	1,	RICH_SIMPLE,	Rot_ALL_H_V,	LYT_NM_WB=
, AFB_TH_SC_YTR}, /* afbc */
+	{__HW_ID(4, 4), DRM_FORMAT_R8,		1,	SIMPLE,		Rot_0,			0, 0},
+	/* YUV 444/422/420 8bit  */
+	{__HW_ID(5, 0),	0 /*XYUV8888*/,		1,	0,		0,			0, 0},
+	/* XYUV unsupported*/
+	{__HW_ID(5, 1),	DRM_FORMAT_YUYV,	1,	RICH,		Rot_ALL_H_V,	LYT_NM, AFB_TH}, =
/* afbc */
+	{__HW_ID(5, 2),	DRM_FORMAT_YUYV,	1,	RICH,		Flip_H_V,		0, 0},
+	{__HW_ID(5, 3),	DRM_FORMAT_UYVY,	1,	RICH,		Flip_H_V,		0, 0},
+	{__HW_ID(5, 4),	0, /*X0L0 */		2,		0,			0, 0}, /* Y0L0 unsupported */
+	{__HW_ID(5, 6),	DRM_FORMAT_NV12,	1,	RICH,		Flip_H_V,		0, 0},
+	{__HW_ID(5, 6),	0/*DRM_FORMAT_YUV420_8BIT*/,	1,	RICH,	Rot_ALL_H_V,	LYT_NM=
, AFB_TH}, /* afbc */
+	{__HW_ID(5, 7),	DRM_FORMAT_YUV420,	1,	RICH,		Flip_H_V,		0, 0},
+	/* YUV 10bit*/
+	{__HW_ID(6, 0),	0,/*XVYU2101010*/	1,	0,		0,			0, 0},/* VYV30 unsupported =
*/
+	{__HW_ID(6, 6),	0/*DRM_FORMAT_X0L2*/,	2,	RICH,		Flip_H_V,		0, 0},
+	{__HW_ID(6, 7),	0/*DRM_FORMAT_P010*/,	1,	RICH,		Flip_H_V,		0, 0},
+	{__HW_ID(6, 7),	0/*DRM_FORMAT_YUV420_10BIT*/,1,	RICH,	Rot_ALL_H_V,	LYT_NM=
, AFB_TH},
+};
+
+static void d71_init_fmt_tbl(struct komeda_dev *mdev)
+{
+	struct komeda_format_caps_table *table =3D &mdev->fmt_tbl;
+
+	table->format_caps =3D d71_format_caps_table;
+	table->n_formats =3D ARRAY_SIZE(d71_format_caps_table);
+}
+
 static struct komeda_dev_funcs d71_chip_funcs =3D {
+	.init_format_table =3D d71_init_fmt_tbl,
 	.enum_resources	=3D d71_enum_resources,
 	.cleanup	=3D NULL,
 };
diff --git a/drivers/gpu/drm/arm/display/komeda/komeda_dev.c b/drivers/gpu/=
drm/arm/display/komeda/komeda_dev.c
index ace2db84cb1a..eba7ba77391e 100644
--- a/drivers/gpu/drm/arm/display/komeda/komeda_dev.c
+++ b/drivers/gpu/drm/arm/display/komeda/komeda_dev.c
@@ -136,6 +136,8 @@ struct komeda_dev *komeda_dev_create(struct device *dev=
)
 		 MALIDP_CORE_ID_MAJOR(mdev->chip.core_id),
 		 MALIDP_CORE_ID_MINOR(mdev->chip.core_id));
=20
+	mdev->funcs->init_format_table(mdev);
+
 	err =3D mdev->funcs->enum_resources(mdev);
 	if (err) {
 		DRM_ERROR("enumerate display resource failed.\n");
diff --git a/drivers/gpu/drm/arm/display/komeda/komeda_dev.h b/drivers/gpu/=
drm/arm/display/komeda/komeda_dev.h
index 4a27a44e2ec6..555510be66f1 100644
--- a/drivers/gpu/drm/arm/display/komeda/komeda_dev.h
+++ b/drivers/gpu/drm/arm/display/komeda/komeda_dev.h
@@ -11,6 +11,7 @@
 #include <linux/interrupt.h>
 #include "komeda_pipeline.h"
 #include "malidp_product.h"
+#include "komeda_format_caps.h"
=20
 /* malidp device id */
 enum {
@@ -44,6 +45,13 @@ struct komeda_dev;
  * Supplied by chip level and returned by the chip entry function xxx_iden=
tify,
  */
 struct komeda_dev_funcs {
+	/**
+	 * @init_format_table:
+	 *
+	 * initialize &komeda_dev->format_table, this function should be called
+	 * before the &enum_resource
+	 */
+	void (*init_format_table)(struct komeda_dev *mdev);
 	/**
 	 * @enum_resources:
 	 *
@@ -66,7 +74,8 @@ struct komeda_dev {
 	u32 __iomem   *reg_base;
=20
 	struct komeda_chip_info chip;
-
+	/** @fmt_tbl: initialized by &komeda_dev_funcs->init_format_table */
+	struct komeda_format_caps_table fmt_tbl;
 	/** @pclk: APB clock for register access */
 	struct clk *pclk;
 	/** @mck: HW main engine clk */
diff --git a/drivers/gpu/drm/arm/display/komeda/komeda_format_caps.c b/driv=
ers/gpu/drm/arm/display/komeda/komeda_format_caps.c
new file mode 100644
index 000000000000..38aeb7d30048
--- /dev/null
+++ b/drivers/gpu/drm/arm/display/komeda/komeda_format_caps.c
@@ -0,0 +1,75 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * (C) COPYRIGHT 2018 ARM Limited. All rights reserved.
+ * Author: James.Qian.Wang <james.qian.wang@arm.com>
+ *
+ */
+
+#include <linux/slab.h>
+#include "komeda_format_caps.h"
+#include "malidp_utils.h"
+
+const struct komeda_format_caps *
+komeda_get_format_caps(struct komeda_format_caps_table *table,
+		       u32 fourcc, u64 modifier)
+{
+	const struct komeda_format_caps *caps;
+	u64 afbc_features =3D modifier & ~(AFBC_FORMAT_MOD_BLOCK_SIZE_MASK);
+	u32 afbc_layout =3D modifier & AFBC_FORMAT_MOD_BLOCK_SIZE_MASK;
+	int id;
+
+	for(id =3D 0; id < table->n_formats; id++) {
+		caps =3D &table->format_caps[id];
+
+		if(fourcc !=3D caps->fourcc)
+			continue;
+
+		if ((modifier =3D=3D 0ULL) && (caps->supported_afbc_layouts =3D=3D 0))
+			return caps;
+
+		if ((has_bits(afbc_features, caps->supported_afbc_features)) &&
+		    (has_bit(afbc_layout, caps->supported_afbc_layouts)))
+			return caps;
+	}
+
+	return NULL;
+}
+
+u32 *komeda_get_layer_fourcc_list(struct komeda_format_caps_table *table,
+				  u32 layer_type, u32 *n_fmts)
+{
+	const struct komeda_format_caps *cap;
+	u32 *fmts;
+	int i, j, n =3D 0;
+
+	fmts =3D kzalloc(sizeof(u32) * table->n_formats, GFP_KERNEL);
+	if (fmts =3D=3D NULL)
+		return NULL;
+
+	for (i =3D 0; i < table->n_formats; i++) {
+		cap =3D &table->format_caps[i];
+		if (!(layer_type & cap->supported_layer_types) ||
+		     (cap->fourcc =3D=3D 0))
+			continue;
+
+		/* one fourcc may has two caps items in table (afbc/none-afbc),
+		 * so check the existing list to avoid adding a duplicated one.
+		 */
+		for (j =3D n - 1; j >=3D 0; j--)
+			if (fmts[j] =3D=3D cap->fourcc)
+				break;
+
+		if (j < 0)
+			fmts[n++] =3D cap->fourcc;
+	}
+
+	if (n_fmts !=3D NULL)
+		*n_fmts =3D n;
+
+	return fmts;
+}
+
+void komeda_put_fourcc_list(u32 *fourcc_list)
+{
+	kfree(fourcc_list);
+}
\ No newline at end of file
diff --git a/drivers/gpu/drm/arm/display/komeda/komeda_format_caps.h b/driv=
ers/gpu/drm/arm/display/komeda/komeda_format_caps.h
new file mode 100644
index 000000000000..fe7ebaf60687
--- /dev/null
+++ b/drivers/gpu/drm/arm/display/komeda/komeda_format_caps.h
@@ -0,0 +1,89 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * (C) COPYRIGHT 2018 ARM Limited. All rights reserved.
+ * Author: James.Qian.Wang <james.qian.wang@arm.com>
+ *
+ */
+
+#ifndef _KOMEDA_FORMAT_CAPS_H_
+#define _KOMEDA_FORMAT_CAPS_H_
+
+#include <linux/types.h>
+#include <uapi/drm/drm_fourcc.h>
+#include <drm/drm_fourcc.h>
+
+#define AFBC(x)		DRM_FORMAT_MOD_ARM_AFBC(x)
+
+/* afbc layerout */
+#define AFBC_16x16(x)	AFBC(AFBC_FORMAT_MOD_BLOCK_SIZE_16x16 | (x))
+#define AFBC_32x8(x)	AFBC(AFBC_FORMAT_MOD_BLOCK_SIZE_32x8 | (x))
+
+/* afbc features */
+#define _YTR		AFBC_FORMAT_MOD_YTR
+#define _SPLIT		AFBC_FORMAT_MOD_SPLIT
+#define _SPARSE		AFBC_FORMAT_MOD_SPARSE
+#define _CBR		AFBC_FORMAT_MOD_CBR
+#define _TILED		AFBC_FORMAT_MOD_TILED
+#define _SC		AFBC_FORMAT_MOD_SC
+
+/* layer_type */
+#define KOMEDA_FMT_RICH_LAYER		BIT(0)
+#define KOMEDA_FMT_SIMPLE_LAYER		BIT(1)
+#define KOMEDA_FMT_WB_LAYER		BIT(2)
+
+#define AFBC_TH_LAYOUT_ALIGNMENT	8
+#define AFBC_HEADER_SIZE 		16
+#define AFBC_SUPERBLK_ALIGNMENT		128
+#define AFBC_SUPERBLK_PIXELS		256
+#define AFBC_BODY_START_ALIGNMENT	1024
+#define AFBC_TH_BODY_START_ALIGNMENT	4096
+
+/**
+ * struct komeda_format_caps
+ *
+ * komeda_format_caps is for describing ARM display specific features and
+ * limitations for a specific format, and format_caps will be linked into
+ * &komeda_framebuffer like a extension of &drm_format_info.
+ *
+ * NOTE: one fourcc may has two different format_caps items for fourcc and
+ * fourcc+modifier
+ *
+ * @hw_id: hw format id, hw specific value.
+ * @fourcc: drm fourcc format.
+ * @tile_size: format tiled size, used by ARM format X0L0/X0L2
+ * @supported_layer_types: indicate which layer supports this format
+ * @supported_rots: allowed rotations for this format
+ * @supported_afbc_layouts: supported afbc layerout
+ * @supported_afbc_features: supported afbc features
+ */
+struct komeda_format_caps {
+	u32 hw_id;
+	u32 fourcc;
+	u32 tile_size;
+	u32 supported_layer_types;
+	u32 supported_rots;
+	u32 supported_afbc_layouts;
+	u64 supported_afbc_features;
+};
+
+/**
+ * struct komeda_format_caps_table - format_caps mananger
+ *
+ * @n_formats: the size of format_caps list.
+ * @format_caps: format_caps list.
+ */
+struct komeda_format_caps_table {
+	u32 n_formats;
+	const struct komeda_format_caps *format_caps;
+};
+
+const struct komeda_format_caps *
+komeda_get_format_caps(struct komeda_format_caps_table *table,
+		       u32 fourcc, u64 modifier);
+
+u32 *komeda_get_layer_fourcc_list(struct komeda_format_caps_table *table,
+				  u32 layer_type, u32 *n_fmts);
+
+void komeda_put_fourcc_list(u32 *fourcc_list);
+
+#endif
diff --git a/drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h b/drivers=
/gpu/drm/arm/display/komeda/komeda_pipeline.h
index 506e5d1acf54..0218762d2e53 100644
--- a/drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h
+++ b/drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h
@@ -210,6 +210,7 @@ static inline u16 component_changed_inputs(struct komed=
a_component_state *st)
 struct komeda_layer {
 	struct komeda_component base;
 	/* layer specific features and caps */
+	int layer_type; /* RICH, SIMPLE or WB */
 };
=20
 struct komeda_layer_state {
--=20
2.17.1

