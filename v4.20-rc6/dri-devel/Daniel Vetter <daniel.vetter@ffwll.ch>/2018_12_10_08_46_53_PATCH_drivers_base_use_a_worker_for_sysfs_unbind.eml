Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 10 Dec 2018 18:14:56 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 62F555804A8;
	Mon, 10 Dec 2018 00:47:10 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 10 Dec 2018 00:47:10 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Ao1TAOhRjvNMCxOVyzUw2muhyzNpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64YRSCt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZAo2y?=
 =?us-ascii?q?cZYBAeQCM+hfoIbzqEAOrQO8CAS3GO/iySVFimPs0KEmz+gsFxzN0gw6H9IJtX?=
 =?us-ascii?q?TZtNv7O70UUeC00qbIySjIYPxI1jfh9IjHbAohquyLUL1ta8XRz0gvGB3BjlmK?=
 =?us-ascii?q?t4zqIS+V1vgTvGiB9OdgW+yvimAjqwF1uDSg2scsh5DPi4kIyV7E7T10zJgpKd?=
 =?us-ascii?q?C8UkJ3fNCpHIVKuy2HNIZ6XtkuTmBqtSoi1LEJo4K3cDYPxZg6xhPSaPmKfoiJ?=
 =?us-ascii?q?7x/nSumcJCt0iXdrdb6imxq/8E2txfD9W8S60ltHqzdKn9vSun0D0hHc9MuKR/?=
 =?us-ascii?q?t980qnxD2BzRrc6vteLkAxjafbK4Auwro3lpcLr0TDETH5mF/sgK+VaEok4O6o?=
 =?us-ascii?q?5PrjYrn8oZ+cLYB0hhn/MqQohMO/Hfw1PhYSU2Wf4+iwybPu8VPjTLlXjfA6jr?=
 =?us-ascii?q?PVvZHYKMgDo662GQ5V0oIt6xalCDem1cwVnX0GLFJDZRKGgJHlO1LQL/DiC/ew?=
 =?us-ascii?q?nVCsnC5sx/HIOL3uHI/NI2PdkLfuY7l98VRQyAktwtBF4ZJbFLUBLOj0Wk/ru9?=
 =?us-ascii?q?zUFgU5PBCsw+b7FNV90ZsTWWaOAq+aLqzeq1CJ5v80LumIZY8Vviv9Kvc/6/7v?=
 =?us-ascii?q?i385hUESfa2z0ZQLb3C4G+xsI1+Fbnr0ntcBDWAKsxI+TOPwiV2CTSRcZ3GoU6?=
 =?us-ascii?q?I8+zE0EoSmDYjYS4CpgbyB2jq7H5JMamBHDFCMDWnnd4GeV/gQbyKSJ9drkiYY?=
 =?us-ascii?q?Wri5V48hyRauuRf4y7pgMOXY4C4YtZXl1Nhz4O3ejhUy9T1yD8SA3GCBVWB0nm?=
 =?us-ascii?q?UURzAo2KBzu1ByylCG0aJgmfxXCcRT5+9VUgc9LZPT1fd6C9D1WgLCZNuJUkyp?=
 =?us-ascii?q?Qte9DDE1T9IxxcIOYklnF9WjiBDDwzSlA7sPm7OXA5w097rW32LtKMZl13bGyK?=
 =?us-ascii?q?4hgkElQsRVM22qnKp/9wnJCI7PnEWUjKKqdaUa3C7Q+2aP12uOvEdEUAFuVaXJ?=
 =?us-ascii?q?R2wQZkzTrd7h/EPNU6euCag7MgtG0cONN7FFasP3gllcRPfsItLeY3mvlGe2Ah?=
 =?us-ascii?q?qIwrCMbI/ue2gG2CXdCU4Ekx0c/HqcNAg+ADuhrHzaDDB0CV3vZEbs+/FkqHyn?=
 =?us-ascii?q?Vk800x2Kb0p52rWo4BEVm+KTR+kT3r0evichsCt7HFCm0tLSCtqAoRdhfapGbd?=
 =?us-ascii?q?M85ldHyXzWtwhnMpO8KKBig0YUcx5rsEP2yxV3FoJAnNA2rHMryQpyLr6Y0FNB?=
 =?us-ascii?q?dj+CwZD8ILrXKnP2/BCuba7W1UrT0NKX+qcJ9fQ5pE/vvACvFko+7Xpn18NZ3G?=
 =?us-ascii?q?eb5pXPFAASS47+Ul4r9xhmoLHXejMy54fK2nxjL6a1siXO1Mk0BOQ40BmgedRf?=
 =?us-ascii?q?MKSaFALpF80aBs6uKPElmlSzbxIEOvxS+7AwP8+8a/SG36urNv56nD26lWRH/J?=
 =?us-ascii?q?x90kWU+it8V+7ExYoKz+uZ3wuHTTj8ilihv9vzmYBFYzESA2W+xTLlBI5Xeq19?=
 =?us-ascii?q?Y4ILBX2yLM2ww9V0n4TtVGJA9F6/G1MG39ekeQCTb1PhxwJQz1kYoXu9lSu+0T?=
 =?us-ascii?q?N0iTAporOD0yPUx+TtaQQIOnRMRGlkllrsJYm0j9YHXEmndQQplR2l5VrkyKhf?=
 =?us-ascii?q?vqhwM27TQUJQdSjsM25iSrewtqaFY8NX6JIosD9bUeSmbVCBV779pQAX0yfiH2?=
 =?us-ascii?q?tY2TA6eCumupT/nxxmlm2dKGx/o2beecF13R3f/sDTReZN3joaQyl1kTvXCUKm?=
 =?us-ascii?q?P9mq/tWUkI3PsvukWGKiVZ1TcC/rwp2GtCag4W1qABu/n+28m9H9EAg61zP72M?=
 =?us-ascii?q?duVSnSsBn8ZYzr3bygMe17ZkloGEP8681iF4B+iIQwg4sc2XobhpWT5ncHlWbz?=
 =?us-ascii?q?MdNG2aPxdnYNRDgLw8LL7wjhwkFsMnWJx4fhXHWH3sRhf8W6Yn8R2i8l7MBFEq?=
 =?us-ascii?q?aU4KZEnStouFW4qw3RbON5njccz/su9XEbj/sIuAor0iWSHLQSEVNEMizrkhSC?=
 =?us-ascii?q?98q+o7lPZGazbbiw01JzndWgDLGBuA5QQnj4dYk5HS9s8Mp/KknD32Pp6oHrY9?=
 =?us-ascii?q?TQadMTthuJkxbPleRVKZQxluYUiipjI27yoXoly+sjhxx0wZ66pJSHK3lq/K+h?=
 =?us-ascii?q?Hh5YMTj1a9kS+z73i6Zeg92W35uuHph6HjULXZ3oTe+nET4ItPTnMRqOHyM4qn?=
 =?us-ascii?q?uBBbXfGgqf4l98r33TC5CrK22XJH4BwNp5XhadI0hfgB0OUDU+g540DQSqxM3n?=
 =?us-ascii?q?cEdk6TEd/F/4qh1Qyu12MxnzSHvQpACtaj0sUpiQMAJW7h1e50fSKcGe7Ph8Hy?=
 =?us-ascii?q?RG8Z26tgCNNnaXZwdVDWEKR0yEAUrsPqK16NnE8uiYAPe+LvTUbbWPr+xeS+mH?=
 =?us-ascii?q?xZa13oR6+DaMM92FPmN+AP0jxkpDQXd5FtzZmjUIViwXjj/NYNSdpBum4S13qc?=
 =?us-ascii?q?a/8PvwVQLr5IuPDaZSMNp19xC3h6eDK/CfhCJjJTlE0ZMMwGfCyKID014KlyFu?=
 =?us-ascii?q?az6tHKwAtSHTTaLQmaxXDx8BZyNwLstI6K080RdXOc7GkdP4zbp4jv8zC1dYWl?=
 =?us-ascii?q?3tgMCpZcoWI26jMFPLHlqENLODJTfT2cH4fbu8SaFMjOVTrxC/oyubHFT5Pjud?=
 =?us-ascii?q?lzjlTRSvMeBXgSGfPRxevpy9cxl3BWjiStLmdgO0MNttgTIqxr00g2vANXQAPj?=
 =?us-ascii?q?hkb0NNsrqQ4DtEgvV+HmxN9GZqIfOYlCaZ8ebYLI0bsf9qAiRyiuJb7242y7pT?=
 =?us-ascii?q?7CFYWvN1nDHeocJpo1GjiuOP0CZoUAJSqjZXg4KGpUVjNr/f9plFWHbE+goC7G?=
 =?us-ascii?q?SQCxsQodtlBcbiu6RRytjJiaLyJy1O89PS/csAGcfULNiLP2YmMRrsS3boC14h?=
 =?us-ascii?q?bhuPfTXbhkpAgLSR+2eTo5wStJfhgtwNR6VdWVhzEekVXBdLBtsHdbt+WDIplf?=
 =?us-ascii?q?algdIU6GD2+BXYQsRXutbZW+6ODO/HJjiGib0CbBtekuCwFpgaKoCugx8qUVJ9?=
 =?us-ascii?q?homfXhOIBd0=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAADIJg5ch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgTCCOyeME4wNgiGXPYFzEgEBGBMBh2oiNAkNAQMBAQEBAQECARM?=
 =?us-ascii?q?BAQEIDQkIKSMMgjYkAYJpAiQLAQ0BATcBBQkCUAMxAQUBIhMFgxyCAgEEmRs8i?=
 =?us-ascii?q?h2BbDOCdgEBBYYzZwgSh2CDE4EcgVc/gRGBcIYHhXeLK5VCCgcCgRWBDASPHws?=
 =?us-ascii?q?YiWaHVgGZCQIEAgQFAgUPIYElgg4zGoNfghsMF4Miinw/MoEFAQGMSQEB?=
X-IPAS-Result: =?us-ascii?q?A0ANAADIJg5ch0O0hNFjHAEBAQQBAQcEAQGBUQcBAQsBgTC?=
 =?us-ascii?q?COyeME4wNgiGXPYFzEgEBGBMBh2oiNAkNAQMBAQEBAQECARMBAQEIDQkIKSMMg?=
 =?us-ascii?q?jYkAYJpAiQLAQ0BATcBBQkCUAMxAQUBIhMFgxyCAgEEmRs8ih2BbDOCdgEBBYY?=
 =?us-ascii?q?zZwgSh2CDE4EcgVc/gRGBcIYHhXeLK5VCCgcCgRWBDASPHwsYiWaHVgGZCQIEA?=
 =?us-ascii?q?gQFAgUPIYElgg4zGoNfghsMF4Miinw/MoEFAQGMSQEB?=
X-IronPort-AV: E=Sophos;i="5.56,337,1539673200"; 
   d="scan'208";a="55661253"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 10 Dec 2018 00:47:08 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726689AbeLJIrF (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 10 Dec 2018 03:47:05 -0500
Received: from mail-ed1-f66.google.com ([209.85.208.66]:42315 "EHLO
        mail-ed1-f66.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726029AbeLJIrF (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 10 Dec 2018 03:47:05 -0500
Received: by mail-ed1-f66.google.com with SMTP id j6so8730109edp.9
        for <linux-kernel@vger.kernel.org>; Mon, 10 Dec 2018 00:47:04 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=ffwll.ch; s=google;
        h=from:to:cc:subject:date:message-id:mime-version
         :content-transfer-encoding;
        bh=PyJg/7OGI94QojOV1ZOHnTNv87np2XPFaVlKIJxUtoY=;
        b=E8mw/8ut8Z0dWiBP6nQm5dzsopAXWZ2OhyZbJ4gkoqACeBt70ZYxrJ9GeDZrpezTkr
         s+MYN3DiQSW+vnD9cRa1pWhqs6TKjQbGGzQwAI714JoGWOvlTfwmWFfNn3HNhJlBGAef
         H2Ohn/CGYlxp8Ujq0+vbTwvxlt+kFVnwYenWg=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:mime-version
         :content-transfer-encoding;
        bh=PyJg/7OGI94QojOV1ZOHnTNv87np2XPFaVlKIJxUtoY=;
        b=Y6rO4kyJkiTCCEzhog8uTWL1B2Qtz8eczY0zSzFyBIMIeSmkbx3HVXiDssQ04CBEQC
         mc4EiBbZVEXzmSLLv0prC2CNw9N4hJWFNZqinLxDY3birF87/yFRU7MstE1zD8wtmn9y
         DXsHOZCxavEushjAO5Bn8P7Nar/ZdsXbvzkVAIGmYxaC8KPx+OuZQUTwK4YV9fFm6pz+
         3lkXj9IlGRrAYB6vGsTG2fzFLUDWPDS25muEs1s4uvnxsrc0/pLyGvpesS3PR6cpGfcI
         nRpGUUkotUYEeqbtB4rtZhyIv5zng6uslzgiArnLsWQ/s1/k+PFnZyyy+9DYmaWCM7jB
         XZqg==
X-Gm-Message-State: AA+aEWZeZvNiT3Cw87U7Im3yq0Gfgh62BHUImaMPqJYu38fg8sl1m47d
        dfmBVJLRdbj1gR21Ko7XnhqDdfunTLA=
X-Google-Smtp-Source: AFSGD/V/rTQ5VrYlje6awFauHZaB1Rnnxt9n2Ys6kGkzZ45KuQ0erc4Cd5E3Mb4vPwlxE0GKjXdlcw==
X-Received: by 2002:a17:906:4bd7:: with SMTP id x23-v6mr9160287ejv.105.1544431622947;
        Mon, 10 Dec 2018 00:47:02 -0800 (PST)
Received: from phenom.ffwll.local ([2a02:168:569e:0:3106:d637:d723:e855])
        by smtp.gmail.com with ESMTPSA id j31sm3237338eda.46.2018.12.10.00.47.01
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Mon, 10 Dec 2018 00:47:01 -0800 (PST)
From: Daniel Vetter <daniel.vetter@ffwll.ch>
To: LKML <linux-kernel@vger.kernel.org>
Cc: DRI Development <dri-devel@lists.freedesktop.org>,
        Daniel Vetter <daniel.vetter@ffwll.ch>,
        Ramalingam C <ramalingam.c@intel.com>,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        "Rafael J. Wysocki" <rafael@kernel.org>,
        Daniel Vetter <daniel.vetter@intel.com>
Subject: [PATCH] drivers/base: use a worker for sysfs unbind
Date: Mon, 10 Dec 2018 09:46:53 +0100
Message-Id: <20181210084653.7268-1-daniel.vetter@ffwll.ch>
X-Mailer: git-send-email 2.20.0.rc1
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Drivers might want to remove some sysfs files, which needs the same
locks and ends up angering lockdep. Relevant snippet of the stack
trace:

  kernfs_remove_by_name_ns+0x3b/0x80
  bus_remove_driver+0x92/0xa0
  acpi_video_unregister+0x24/0x40
  i915_driver_unload+0x42/0x130 [i915]
  i915_pci_remove+0x19/0x30 [i915]
  pci_device_remove+0x36/0xb0
  device_release_driver_internal+0x185/0x250
  unbind_store+0xaf/0x180
  kernfs_fop_write+0x104/0x190

I've stumbled over this because some new patches by Ram connect the
snd-hda-intel unload (where we do use sysfs unbind) with the locking
chains in the i915 unload code (but without creating a new loop),
which upset our CI. But the bug is already there and can be easily
reproduced by unbind i915 directly.

No idea whether this is the correct place to fix this, should at least
get CI happy again. Also not sure whether we should do the same on the
bind side, there we have the additional complication that the current
code forwards the driver load errno.

Note that the bus locking is already done by
device_release_driver_internal (if you give it the parent), so I
dropped that part. Also note that we don't recheck that the device is
still bound by the same driver, but neither does the current code do
that without races. And I figured that's a obscure enough corner case
to not bother.

v2: Use a task work. An entirely async work leads to impressive
fireworks in our CI, notably in the vtcon bind/unbind code. Task work
will be as synchronous as the current code, and so keep all these
preexisting races neatly tugged under the rug.

Cc: Ramalingam C <ramalingam.c@intel.com>
Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Cc: "Rafael J. Wysocki" <rafael@kernel.org>
Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>
---
 drivers/base/bus.c | 35 +++++++++++++++++++++++++++++------
 1 file changed, 29 insertions(+), 6 deletions(-)

diff --git a/drivers/base/bus.c b/drivers/base/bus.c
index 8bfd27ec73d6..095c4a140d76 100644
--- a/drivers/base/bus.c
+++ b/drivers/base/bus.c
@@ -17,6 +17,7 @@
 #include <linux/string.h>
 #include <linux/mutex.h>
 #include <linux/sysfs.h>
+#include <linux/task_work.h>
 #include "base.h"
 #include "power/power.h"
 
@@ -174,22 +175,44 @@ static const struct kset_uevent_ops bus_uevent_ops = {
 
 static struct kset *bus_kset;
 
+struct unbind_work {
+	struct callback_head twork;
+	struct device *dev;
+};
+
+void unbind_work_fn(struct callback_head *work)
+{
+	struct unbind_work *unbind_work =
+		container_of(work, struct unbind_work, twork);
+
+	device_release_driver_internal(unbind_work->dev, NULL,
+				       unbind_work->dev->parent);
+	put_device(unbind_work->dev);
+	kfree(unbind_work);
+}
+
 /* Manually detach a device from its associated driver. */
 static ssize_t unbind_store(struct device_driver *drv, const char *buf,
 			    size_t count)
 {
 	struct bus_type *bus = bus_get(drv->bus);
+	struct unbind_work *unbind_work;
 	struct device *dev;
 	int err = -ENODEV;
 
 	dev = bus_find_device_by_name(bus, NULL, buf);
 	if (dev && dev->driver == drv) {
-		if (dev->parent && dev->bus->need_parent_lock)
-			device_lock(dev->parent);
-		device_release_driver(dev);
-		if (dev->parent && dev->bus->need_parent_lock)
-			device_unlock(dev->parent);
-		err = count;
+		unbind_work = kmalloc(sizeof(*unbind_work), GFP_KERNEL);
+		if (unbind_work) {
+			unbind_work->dev = dev;
+			get_device(dev);
+			init_task_work(&unbind_work->twork, unbind_work_fn);
+			task_work_add(current, &unbind_work->twork, true);
+
+			err = count;
+		} else {
+			err = -ENOMEM;
+		}
 	}
 	put_device(dev);
 	bus_put(bus);
-- 
2.20.0.rc1

