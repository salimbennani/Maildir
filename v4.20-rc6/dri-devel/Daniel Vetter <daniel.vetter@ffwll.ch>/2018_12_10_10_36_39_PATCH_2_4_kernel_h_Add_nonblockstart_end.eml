Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 10 Dec 2018 19:35:52 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 6E55E580297;
	Mon, 10 Dec 2018 02:37:32 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 10 Dec 2018 02:37:31 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A7EYXxBQSMbaAhIZlTO+4/y8S6Npsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64YReBt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZAo2y?=
 =?us-ascii?q?cZYBAeQCM+hfrYb9qVQBogexCwm3HOPiyCRFhmP10KAgz+gsCx3K0Q4mEtkTsH?=
 =?us-ascii?q?rUttL1NKIKXO671qbIyzTDYO1S2Tzg54fHbAwhoe2SUrJqbMHczlQgGBnDjlWR?=
 =?us-ascii?q?t4PlOymZ1voTvGiH8+pvS/ivhnUpqwF/rDmvwsMshpPViYIV013J8zhyzoUtJd?=
 =?us-ascii?q?CgVkJ3fdqpHIFNuyyUKYd6WN4uTmJ0tCogy7ALu4a3cDYQx5g72RLSbuGLfomL?=
 =?us-ascii?q?7x/mVOucIDN1i2xgdb6jghu//1WsxvH9W8SxzVlHryRIn9vJu38Q1RHf9MaKR/?=
 =?us-ascii?q?5j8Uqi2TuC1wbe4fxeL08uj6rUMZshz6YwlpUNtUTDGTf7mFv5jKCIbEUo4Ouo?=
 =?us-ascii?q?5Pr9YrXguJCcM5V4igbkMqQhgsC/AOI4PRYSX2WD5+iwyLnu8VfkTLhEkPE6iL?=
 =?us-ascii?q?TVvZPGKcgBp6O0ARdZ0oM55Ba+Czem3s4YnX4CLF9dfBKHjo7pO0zBIfzhDvew?=
 =?us-ascii?q?nU6skDF1yPDCJ7HhBZvMLn7dn7f7Zrt99UFcxxQpzdxF5JJbFKsBIPTtVU/1rt?=
 =?us-ascii?q?DYCQU5MwOsz+b9FNp9zp8eWX6IAqKBNKPSsFyI6fw1L+iDeY8YozL9K/kj5/7z?=
 =?us-ascii?q?gn41g14dfa+13ZQJbHC0BOhpI0KcYXD0mNcODX8KvhYiTOztkFCCUSRcZ3euX6?=
 =?us-ascii?q?0m4TE3EoKmDZrZSYCrj7yMxyO7HpxQZmBbBVGAC3bod4OYW/gSbCKeONNukjsB?=
 =?us-ascii?q?VbK5UY8uyQmutBPmy7pgNufU+CoYuoz52Nh24O3Tkxcy9TtvAsSZ0mGNSXx0n2?=
 =?us-ascii?q?wSSz832qB/vVJyylOZ3adkhPxYEMRZ5+lVXQciKZ7c0+t6BsjoVQLafteJT1Wm?=
 =?us-ascii?q?Ts+8AT4rTNI82NsOY0d7G9W/gRHPxSuqA7kJl7OVAJw46L7T33/0J8xl0XbJyL?=
 =?us-ascii?q?Ehj0U6QstILWCmhbRw9w7JC47NkkWWjaCqdasH0S7J9WeDy3eOvU5CXA5xV6XF?=
 =?us-ascii?q?QW4QZk/Modvl4UPCSqekCa47PQtZ1c6CNqxKZ8X0glpcWvfsJs7SY2KrlGe2Hh?=
 =?us-ascii?q?aH2LWMYI3ue2Ue2SXdDFMJkwQS/XaAKAg/CT2to2PYDDxyC13vZ1ng/vV5qHO+?=
 =?us-ascii?q?VkU01R2Fb1V917qp/R4YneGTROkN3r0aoishqy97HFCm393IDdqNvA5hfKRaYd?=
 =?us-ascii?q?Mg71ZLz2PZtwphPpO+K6BunEIRcwNyv0n2zRV4Fp1AkdQ2rHMt1AdyNaOY0FZG?=
 =?us-ascii?q?dzOE3ZDxOqfbKnXo8BCoca7W3lDe0NCZ+qoU7PQ4qlPjvBymF0Y48nVn1cVV3G?=
 =?us-ascii?q?WY5pnQEAUSVpfxWF4t9xdmv7HafjU954TM2HJ2Nam7rDDD1MwpBec/0RmgYspQ?=
 =?us-ascii?q?P7mCFA/xFM0aGdOjKOgrm1ivcxIFM/pe9K8yP8O6afSG3LSnM/pnnDKjlW5H+p?=
 =?us-ascii?q?xy0lqQ9ypgTe7Fx5YEw+yC0gSbTTv9jVehvdrxmYBLfjwSGmu/yS75BI9efKFy?=
 =?us-ascii?q?fIALCXuwLM2z3Nlxm5ntW3tA/l65G1wGwNOpeQaVb1Hlxw1Q1FgYrma9mSSlyD?=
 =?us-ascii?q?x4iTcpobSF3CzP2ujtaAAIOmpWS2Z8l1fsJo60gsseXEipaQgpiRSk6Vz7x6hd?=
 =?us-ascii?q?uKRwMW3TTV1UcCjxKmFoSrGwuaaaY85T9JMotj1aUeS9YVyASr/xuQAa0z7lH2?=
 =?us-ascii?q?ZFwDA7djequoj2nhBgiWKdKmpzo2Tdec1q2Rjf49ncT+ZL3jUaXCl4lSXXBl+k?=
 =?us-ascii?q?Mtmr59qUjZTDsuO5V267TZ1cayrrzYCBtCu9+2JqBwayn/Symt3hDAg73jX319?=
 =?us-ascii?q?hsVSXUshn8ZpPn2Li9MeJiZkNoHkPz69JmGoFilYs9nJER1mIdhpmP/3oHkGHz?=
 =?us-ascii?q?PM5f2aL/anoNWDEKz8TU4AjjxE1sMHaJy5jlWXWax8trf8O6bX8O2iIh88BKD7?=
 =?us-ascii?q?+Z7L9ekit0uFa4rR/RbuJ7njcS0vYu7H8ag+cUuAsi1CmdA7YSHVVGMizojRiH?=
 =?us-ascii?q?89e+rKBPbma1bbewzFZ+ncymDLyapwFcWXX5dY04ES5+8Mp/K07M32Pp6o7/Zt?=
 =?us-ascii?q?bQd90TuwaQkxfBiehVNZ0wmuALhSphJWLyo3klx/Qnghxp2JGwpJKHJHl1/KKl?=
 =?us-ascii?q?Hh5YMSX4Z98U+jHol6pfn9yZ34ayHpV6ATULXYDlTfapEDIUqPTmOByCEDw6qn?=
 =?us-ascii?q?eHB7XfGRWT51thr3LKC5qrLW2YJGEFzdV+QxmQPFdQjxoTXDU+g541DASqxNH6?=
 =?us-ascii?q?fUd95zAR4EP4qxRWxuJpMRn/TnnQpAOyZjgoT5ifKQJc7hte6EfNLcye8uVzEj?=
 =?us-ascii?q?la/pK7qQyCNHebax5UDW0TWUyEGlPjPqSo5dba6OiVHe6+L/rIYbWTpu1STfaI?=
 =?us-ascii?q?xZSz0oR4+zaALNmAPn5nD/cjwEpMQWh5G9jFmzUIUyEWlyXNb9OCpBeh4CJ3qN?=
 =?us-ascii?q?qz8O/sWALp6ouCEL9SMdRp+xCrjqaPLe+QhCBlKTlG0pMA32PHyL8a3FQKkSFh?=
 =?us-ascii?q?ayGtEagctS7KVK/QmrFYDx8YayNwNctE9aE83hNKOc7UlNz1zKN4juUuBldBVF?=
 =?us-ascii?q?zhnNypZMMQL2G8MlPHGFiENLCcKTLXxMH3ZLu2SadMg+VMqx2wpTGbHlf5MTSe?=
 =?us-ascii?q?jDbpTQ6gMOFWgCGfPRxTo4W9chdrCWj+Q9PqcBy7MNlrjTIoxb04nG/FNWkZMT?=
 =?us-ascii?q?JkaUNCsqWQ7T9EgvV4A2FB8ntlLeyelymF9eXXNpYWvuVtAilvk+Ja4XI6y6Za?=
 =?us-ascii?q?7S1eRfx1njfSocBqo128juaPzT9nWgJUqjlXnIKLoVliOaLB+5hAQ3nE+hcN7W?=
 =?us-ascii?q?SWCxsSptplCsfgu6ZfytXUkKLzKTFC88/b/McGBsjULt6HP2QlMRbzBDHUCw4F?=
 =?us-ascii?q?HnaXMjT+gVBQlLm97HSNrpkxsdDAlYQDTrhDUVEzCrtOC0J5EdhHL5lndjcliq?=
 =?us-ascii?q?KAysAS6HeyoQLSWMJC+JfdWaTBL+/oLWO1hL9Fah9A/77kMYkJftn30kpjZ108?=
 =?us-ascii?q?gonWB0fKdd5DvSllKAQ09hYeuENiR3E+jhq2Ijim52UeQLvtxkY7?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAACUQQ5ch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgTCCOyeDOz+IGYwNgiGXPYEkA0wSAQEYEwGHaiI0CQ0BAwEBAQE?=
 =?us-ascii?q?BAQIBEwEBAQgNCQgpIwyCNiQBgmIDAwECCRcECwENAQE3AQUJAQEIHAImAgIDM?=
 =?us-ascii?q?QEFARwGEwWDHIICAQSJKJAHPIodcHwzgnYBAQVEhW9nCBJ5hmeDE4EcgVc/gwG?=
 =?us-ascii?q?JJ4JXiyuEFIY3ijs8CgcCgRWBDASPHwsYiWaHVyyYXQIEAgQFAgUPIYElbYEhM?=
 =?us-ascii?q?xqDX4IbDBeDIop8PzKBBQEBjEkBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ANAACUQQ5ch0O0hNFjHAEBAQQBAQcEAQGBUQcBAQsBgTC?=
 =?us-ascii?q?COyeDOz+IGYwNgiGXPYEkA0wSAQEYEwGHaiI0CQ0BAwEBAQEBAQIBEwEBAQgNC?=
 =?us-ascii?q?QgpIwyCNiQBgmIDAwECCRcECwENAQE3AQUJAQEIHAImAgIDMQEFARwGEwWDHII?=
 =?us-ascii?q?CAQSJKJAHPIodcHwzgnYBAQVEhW9nCBJ5hmeDE4EcgVc/gwGJJ4JXiyuEFIY3i?=
 =?us-ascii?q?js8CgcCgRWBDASPHwsYiWaHVyyYXQIEAgQFAgUPIYElbYEhMxqDX4IbDBeDIop?=
 =?us-ascii?q?8PzKBBQEBjEkBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,338,1539673200"; 
   d="scan'208";a="66085161"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 10 Dec 2018 02:37:10 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727334AbeLJKhH (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 10 Dec 2018 05:37:07 -0500
Received: from mail-ed1-f68.google.com ([209.85.208.68]:46553 "EHLO
        mail-ed1-f68.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727271AbeLJKgx (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 10 Dec 2018 05:36:53 -0500
Received: by mail-ed1-f68.google.com with SMTP id o10so8995733edt.13
        for <linux-kernel@vger.kernel.org>; Mon, 10 Dec 2018 02:36:51 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=ffwll.ch; s=google;
        h=from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding;
        bh=XEsctnSJl6ojJTv9Gu+kKqy9VNezjsl3TRV+ARV/mkc=;
        b=ZnZyWQMH6WIayzR/QKbBPP6+0b9sXHlAARJt64WBv2Unoue68evGiPArqIPwCa/XLM
         7p0ILYs2uj3fACNC8YILBa+TPUR2csiYsBl0GkHkJapOJlF8MCR3+Y+/Zh8S4grK4BOt
         384VE9HqGSj3KwckvLatg1ved/XePWOFAfv40=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=XEsctnSJl6ojJTv9Gu+kKqy9VNezjsl3TRV+ARV/mkc=;
        b=mtpU4U44goXDj6m65H5dVSd6yor+XrKcrS0kxrXweA8OqHEYSEUr94dNMHoScmuJMJ
         0Av9OeiWN1YNW90S1lXDw5+pd32v5oSwWYVVQOZtijjJ1ggYnDgMMe1f+LBq3jCTjHO/
         jfXS4++pjxCDkIPxdShaOG3tatqRBjtE/NlXJSNT72YZSCU3jwq+9GXJydhQ+UhIDMBv
         2ktZ/d/Zp5Okm8LGrrIjUX1MoJijaH2Ar/UG1Givzw9AbJLmdZdxwnjsKgdFPJu22AEA
         T+DfZOePXbBZZUh7Gh9ztjwUHsdLD0RhreBHsZQ3O1O4ZESBefuSQNe/LYBIOk8hHFfi
         OoMQ==
X-Gm-Message-State: AA+aEWZEMqTiCpO49KNZwF76fwmhrE3hhusQJtg3bG2o1vdKfJxvAwpV
        9VHVY7IpzyASQ2xiLwvSpsWxUA==
X-Google-Smtp-Source: AFSGD/Uk9Y35fLYH2MG6TLt5GU2n4GMlNtntTdbUScLCDF73rMg9GXcbK7pjTLciIvgEi+Dvmd7bgA==
X-Received: by 2002:a17:906:55a:: with SMTP id k26-v6mr9502822eja.218.1544438210804;
        Mon, 10 Dec 2018 02:36:50 -0800 (PST)
Received: from phenom.ffwll.local ([2a02:168:569e:0:3106:d637:d723:e855])
        by smtp.gmail.com with ESMTPSA id q50sm3223862edd.66.2018.12.10.02.36.49
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Mon, 10 Dec 2018 02:36:50 -0800 (PST)
From: Daniel Vetter <daniel.vetter@ffwll.ch>
To: Intel Graphics Development <intel-gfx@lists.freedesktop.org>
Cc: DRI Development <dri-devel@lists.freedesktop.org>,
        LKML <linux-kernel@vger.kernel.org>, linux-mm@kvack.org,
        Daniel Vetter <daniel.vetter@ffwll.ch>,
        Andrew Morton <akpm@linux-foundation.org>,
        Michal Hocko <mhocko@suse.com>,
        David Rientjes <rientjes@google.com>,
        =?UTF-8?q?Christian=20K=C3=B6nig?= <christian.koenig@amd.com>,
        =?UTF-8?q?J=C3=A9r=C3=B4me=20Glisse?= <jglisse@redhat.com>,
        Daniel Vetter <daniel.vetter@intel.com>
Subject: [PATCH 2/4] kernel.h: Add non_block_start/end()
Date: Mon, 10 Dec 2018 11:36:39 +0100
Message-Id: <20181210103641.31259-3-daniel.vetter@ffwll.ch>
X-Mailer: git-send-email 2.20.0.rc1
In-Reply-To: <20181210103641.31259-1-daniel.vetter@ffwll.ch>
References: <20181210103641.31259-1-daniel.vetter@ffwll.ch>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

In some special cases we must not block, but there's not a
spinlock, preempt-off, irqs-off or similar critical section already
that arms the might_sleep() debug checks. Add a non_block_start/end()
pair to annotate these.

This will be used in the oom paths of mmu-notifiers, where blocking is
not allowed to make sure there's forward progress.

Suggested by Michal Hocko.

Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Michal Hocko <mhocko@suse.com>
Cc: David Rientjes <rientjes@google.com>
Cc: "Christian König" <christian.koenig@amd.com>
Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
Cc: "Jérôme Glisse" <jglisse@redhat.com>
Cc: linux-mm@kvack.org
Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>
---
 include/linux/kernel.h | 10 +++++++++-
 include/linux/sched.h  |  4 ++++
 kernel/sched/core.c    |  6 +++---
 3 files changed, 16 insertions(+), 4 deletions(-)

diff --git a/include/linux/kernel.h b/include/linux/kernel.h
index d6aac75b51ba..c2cf31515b3d 100644
--- a/include/linux/kernel.h
+++ b/include/linux/kernel.h
@@ -251,7 +251,9 @@ extern int _cond_resched(void);
  * might_sleep - annotation for functions that can sleep
  *
  * this macro will print a stack trace if it is executed in an atomic
- * context (spinlock, irq-handler, ...).
+ * context (spinlock, irq-handler, ...). Additional sections where blocking is
+ * not allowed can be annotated with non_block_start() and non_block_end()
+ * pairs.
  *
  * This is a useful debugging help to be able to catch problems early and not
  * be bitten later when the calling function happens to sleep when it is not
@@ -260,6 +262,10 @@ extern int _cond_resched(void);
 # define might_sleep() \
 	do { __might_sleep(__FILE__, __LINE__, 0); might_resched(); } while (0)
 # define sched_annotate_sleep()	(current->task_state_change = 0)
+# define non_block_start() \
+	do { current->non_block_count++; } while (0)
+# define non_block_end() \
+	do { WARN_ON(current->non_block_count-- == 0); } while (0)
 #else
   static inline void ___might_sleep(const char *file, int line,
 				   int preempt_offset) { }
@@ -267,6 +273,8 @@ extern int _cond_resched(void);
 				   int preempt_offset) { }
 # define might_sleep() do { might_resched(); } while (0)
 # define sched_annotate_sleep() do { } while (0)
+# define non_block_start() do { } while (0)
+# define non_block_end() do { } while (0)
 #endif
 
 #define might_sleep_if(cond) do { if (cond) might_sleep(); } while (0)
diff --git a/include/linux/sched.h b/include/linux/sched.h
index ecffd4e37453..41249dbf8f27 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -916,6 +916,10 @@ struct task_struct {
 	struct mutex_waiter		*blocked_on;
 #endif
 
+#ifdef CONFIG_DEBUG_ATOMIC_SLEEP
+	int				non_block_count;
+#endif
+
 #ifdef CONFIG_TRACE_IRQFLAGS
 	unsigned int			irq_events;
 	unsigned long			hardirq_enable_ip;
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index 6fedf3a98581..969d7a71f30c 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -6113,7 +6113,7 @@ void ___might_sleep(const char *file, int line, int preempt_offset)
 	rcu_sleep_check();
 
 	if ((preempt_count_equals(preempt_offset) && !irqs_disabled() &&
-	     !is_idle_task(current)) ||
+	     !is_idle_task(current) && !current->non_block_count) ||
 	    system_state == SYSTEM_BOOTING || system_state > SYSTEM_RUNNING ||
 	    oops_in_progress)
 		return;
@@ -6129,8 +6129,8 @@ void ___might_sleep(const char *file, int line, int preempt_offset)
 		"BUG: sleeping function called from invalid context at %s:%d\n",
 			file, line);
 	printk(KERN_ERR
-		"in_atomic(): %d, irqs_disabled(): %d, pid: %d, name: %s\n",
-			in_atomic(), irqs_disabled(),
+		"in_atomic(): %d, irqs_disabled(): %d, non_block: %d, pid: %d, name: %s\n",
+			in_atomic(), irqs_disabled(), current->non_block_count,
 			current->pid, current->comm);
 
 	if (task_stack_end_corrupted(current))
-- 
2.20.0.rc1

