Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 09 Dec 2018 18:53:01 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from FMSMGA003.fm.intel.com (fmsmga003.fm.intel.com [10.253.24.29])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id DA3345804F7;
	Fri,  7 Dec 2018 11:52:32 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by FMSMGA003-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 07 Dec 2018 11:52:32 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AAi73QxTkjZVAVyesJ2HPMYjINdpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64YxCPt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZAo2y?=
 =?us-ascii?q?cZYBAeQCM+hfrYb9qVQBoxSlBQm0Bu7i0SNEi3zs0KEmyektDR3K0Qo9FNwOqn?=
 =?us-ascii?q?TUq9D1Ob8PX++r1qbIyyjIYu1W2Tfn6YjIaQwhofaUXbJwb8XR01IvFwTDjl6N?=
 =?us-ascii?q?roHlJC2a2f4Ls2SB7epsT/6gi249qwFwuTiv2sAsipHJho0L0FDE7iJ5wIAuKN?=
 =?us-ascii?q?25Tk57fcCrEJ9Kuy6GMIt2R9ovTmd1syg0zb0GvIS0fCkMyJk/xB7QdeaHc46W?=
 =?us-ascii?q?7RLnTuqRJi14hH1jdbmihBiy6VCtxvPgWsSwylpGsyRInsfWunwQ1BHf9tKLR/?=
 =?us-ascii?q?p/80u5xDqC2Q/e5vtZLU06mqfXMYMtz7Axm5YJr0jOESn7k1jsgqCMbEUr4O2o?=
 =?us-ascii?q?5vznYrr4op+cMJd5ih/xMqswgMyzG+c4PRYUX2id5+u80Kfv/UrjQLVFlvE2k6?=
 =?us-ascii?q?/Zv47GJckDuKK1HwtY3pw+5xuxETuqyskUkHobIF5feR+KjZDlO1TUL/D5Cfe/?=
 =?us-ascii?q?jU6skDBux/3eOr3hA5PNLmXMkbv4frZy9VRcyAwtwtBb/p5UDb8AIPTtVU/rr9?=
 =?us-ascii?q?HYEBA5PBKuw+r9C9VyyJkeWWSRDa+dKq/StkWI5u03L+mWeIAVoCr9K+Qi5/P2?=
 =?us-ascii?q?iX85mFwdcrez0ZoYdXC1BfBmI0SfYXrxjdYNC2YKvgwiTOP0jF2OSyJcZ3G3X6?=
 =?us-ascii?q?gk/DE0FJqmDZvfRoCqmLGB3D20HpxKZm9cDVCAC3fod5ieVPcKZyKfOcthkj0C?=
 =?us-ascii?q?Vbi8RI4tzxCutAnmy7V5KurY4DEXtZXm1NJt/e3ciQky9SBoD8Say2yNTWZ0kX?=
 =?us-ascii?q?0SSz8126B/p0p9ylCY3Kh8gvxYE8FT5vxTXgc7M57c0/J1C9ToVg3dedeJTU6s?=
 =?us-ascii?q?Qs+6DjEpUtIx39gObl5nFNW5jhDD2CmqD6UPl7ORBpw56abc33n3J8ZgxHfKzq?=
 =?us-ascii?q?ghj186QsRRMW2qnLJw9w/WB4TRiUWWi76qdbgA3C7K7GqDznCBvEdCXA50UKXK?=
 =?us-ascii?q?R3YfZkTNoNT950PCSaKuCLs9PgtAz86CNrVFatnzgVpaQ/fjPczUY3itlGeoGR?=
 =?us-ascii?q?aI2rSMYZL3dGoHwiXSFlIIkwAJ8naALggxGCGhr2XaDDxtEFLvZ1jh8e1/qHO9?=
 =?us-ascii?q?U081wBuGb0xn17qp5BEVgeaQRO8U3rIBoC0hsSl7HE6h39LKDNqNvxduc79CYd?=
 =?us-ascii?q?wj+ltH1XjWtwpmPpO+KaBvnVoecwVxv0Pz2BR7EIRAkc42rHw0yAp+M76X0FRE?=
 =?us-ascii?q?dzmAx5D/JqXXKnXu/BCoc6PWxlDe0NOR+qcT6PQ5q0/vvB2zGkol6XVn19hV03?=
 =?us-ascii?q?2T5pjRCAoSUJTxUls49hRgprHaZDU96J3Q1XF2Laa0tTrC0cozBOQ50hagY8tf?=
 =?us-ascii?q?MKScGQDoF80VGcevJ/IqmlSzdR0EIf1d+7QyP8OlcPuGxrWmPOJhnDKgkGRG75?=
 =?us-ascii?q?px0kOK9ypgVOHI24wJzO2f3guCTz38lkuustjrmYBYYjEfBmq+yTX+CIFNfKFz?=
 =?us-ascii?q?fIYLBn2oI8243dh+g5/tW3hF9F+sHV8G2cmpeQaMYFz5xwFfyUMXoXm/kyui0z?=
 =?us-ascii?q?N0iy0prraY3CHW2eTidQYINXRRRGZ/ilfgO460gM4AXEipdgQmiAGq5ULnyKdF?=
 =?us-ascii?q?vqR/KG/TTFxMfyj3KWFiT6SxuqCDY85J9JMnryFXXP6gblCdT773uwEa3D/7H2?=
 =?us-ascii?q?tC2DA7cCmnu5X4nxBgiGORNm1zrGffecxrwRff5drcReNe3zYcRSl4jyXXCUa4?=
 =?us-ascii?q?P9Wz4dqUkJLDuPikV229Tp1TbTXrzYSYuSu5/2JqGx6/n/O0mtH9Cgg1yyz719?=
 =?us-ascii?q?prVSXOshn8ZJLm16C7MeJhY0lpC0Xw68t8GoFijIQwgIsc1mQdhpWQ5XAHi3v8?=
 =?us-ascii?q?Mc1H2aLia3oAXT4KzMTS4AT/2k1jL3SJypn9VnWcxMtheta7bnkX2iI788BFFq?=
 =?us-ascii?q?OU4KZYkityp1qytRjRbuRlnjcB1fsu72YXg+ITtwos1CmdAq0SElNePSzjjBmI?=
 =?us-ascii?q?69G+rKNKZGega7Sw1Ux+ncy/A7GGuA1TRHH5epI6Fy9q8sp/KE7M0GH06oz8fd?=
 =?us-ascii?q?nQbNETuQeOnxbOkedVM44xmeQQhSV8J239p3IlxvU/jRxv25G6oYeGJ39s/KK/?=
 =?us-ascii?q?Hh5XKDn1a9kP9THqiKZUhtyW0Jy3HpV9BjULW4PlTe6vEDIXr/jmNhyBEDshqn?=
 =?us-ascii?q?eAArrfHBSS6ENnr3LJDpCqOGubJHgfzdV+WhadIFZTjxwTXDU/hpQ5DBylxNT9?=
 =?us-ascii?q?cEdl4TAc/kX3pQFLyuJsKhnzSGPfpBqzZzcwSZifKgdW7w5Y60fUN8ye8vx8Hy?=
 =?us-ascii?q?VC8pK9qwyNL3SRZx5UAmERRkyEG1fjM6Gs5dba9uiXGPG+I+HSYbmUquxeSvSI?=
 =?us-ascii?q?xY+p0oR85DaBLcGPPnhkD/0m1UtPR3F5G8LFmzoRTywbjT7Cb8mepB2k4C14st?=
 =?us-ascii?q?i/8Oj3WALo/YaOC7xSMch2+xCrm6iDMfSchD1+KTZe2ZMB3nvIyLkZ3F4PhCBi?=
 =?us-ascii?q?bTitEbIctSHTSKLcgLNYDxkeaylrLstH87o83hVROc7ckt711qB3jv82C1dGVF?=
 =?us-ascii?q?ztgMKpZdYNI2GyKlzHHluLNK+dKD3PwsH3Z768SLJKgOVVsR2wpSiUE0v5Mjuf?=
 =?us-ascii?q?kDnpUgilMftQgyGDIBxepIa9fw53Bmj+V93mcAO0Md9tgT0ywL05nXfKNW8aMT?=
 =?us-ascii?q?hhfEJBtLyQ7SVEgvphH2xN9GZqLe6BmyyB9enXNo4Wsed3AiRzj+9a/HU6y75P?=
 =?us-ascii?q?4C5YXvB6hCvSocBoo1y9lumPyzxnUAdBqzpRhYKLu1liNrvd9pVaRXnE+xcN53?=
 =?us-ascii?q?2KCxsWv9tlFsHvu6dIx9nPjq3zLjJC89PS/cQEBsnUKNiIMHwuMRfyHD7UDQ0F?=
 =?us-ascii?q?TSOkNG3Fhkxdlu2S+WORrpQgtpfsn58OGfdnUwkZH+0XQmRsGscPJt8jUjo6nP?=
 =?us-ascii?q?ibhcgT6HyWqBjXWdUcv5bbW/bUCvLqfnLRpL9IdlMs3K//KIUJLY76kxhmd0V9?=
 =?us-ascii?q?tIfHAUzdWZZKuCI3KkcMrVlA6jBMT283wF7/Y0v5+HIPGOSmth8whBF3bekk+H?=
 =?us-ascii?q?Hr+VhhYhL2pCw1mVJ5ttHogCCXfSS5eLu/WZF+DyvyqlQrNZX6U0B5YFv21W1i?=
 =?us-ascii?q?OzCMYrVVibJ6PTRuiQnTvrNVFPJcRLECaxgVk7XfTfIy0E9Yozvv/UJb5uzbQc?=
 =?us-ascii?q?9ojCMjdZ+hqSIG1w81KJYldfL4J6dTyFVUwKWUsXyGzOc0lTQTLkBF22OIeTUU?=
 =?us-ascii?q?v1QIO6M9ICzgqvdh4ArEmX1IeHINTOYtuvJn7Fg6PcyByT7t1/hILUXnZL/XFL?=
 =?us-ascii?q?+Qp2WVzZ3AeVg3zE5d0hAdpbU=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ADAAA5zwpch0O0hNFjGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGBVYEUgQInjBOMESmBPzmXO4FzFBgNBgGHXSI0CQ0?=
 =?us-ascii?q?BAwEBAQEBAQIBEwEBAQoLCQgpIwyCNiQBgmIDAwECLwFGBgkBAVADVAYBEgWDH?=
 =?us-ascii?q?AGCAQUKpwiEAgGGJgWHc4QveoEcgREzgjGCAoFKBIEZJgEBhXkCiTeBcIQUfI9?=
 =?us-ascii?q?bD0YHAocGgRqJIAsYgVyIPYcfiRCEcYsagUaCDXCDPIInF4hehQgBVx4BATEBA?=
 =?us-ascii?q?YEDAQGIJ4I+AQE?=
X-IPAS-Result: =?us-ascii?q?A0ADAAA5zwpch0O0hNFjGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGBVYEUgQInjBOMESmBPzmXO4FzFBgNBgGHXSI0CQ0BAwEBAQEBAQIBE?=
 =?us-ascii?q?wEBAQoLCQgpIwyCNiQBgmIDAwECLwFGBgkBAVADVAYBEgWDHAGCAQUKpwiEAgG?=
 =?us-ascii?q?GJgWHc4QveoEcgREzgjGCAoFKBIEZJgEBhXkCiTeBcIQUfI9bD0YHAocGgRqJI?=
 =?us-ascii?q?AsYgVyIPYcfiRCEcYsagUaCDXCDPIInF4hehQgBVx4BATEBAYEDAQGIJ4I+AQE?=
X-IronPort-AV: E=Sophos;i="5.56,327,1539673200"; 
   d="scan'208";a="54308974"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 07 Dec 2018 11:52:31 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726079AbeLGTw2 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 7 Dec 2018 14:52:28 -0500
Received: from mga09.intel.com ([134.134.136.24]:49113 "EHLO mga09.intel.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726041AbeLGTw2 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 7 Dec 2018 14:52:28 -0500
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from fmsmga001.fm.intel.com ([10.253.24.23])
  by orsmga102.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 07 Dec 2018 11:52:27 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,327,1539673200"; 
   d="scan'208";a="128065736"
Received: from sjchrist-coffee.jf.intel.com ([10.54.74.154])
  by fmsmga001.fm.intel.com with ESMTP; 07 Dec 2018 11:52:27 -0800
From: Sean Christopherson <sean.j.christopherson@intel.com>
To: Dave Hansen <dave.hansen@linux.intel.com>,
        Andy Lutomirski <luto@kernel.org>,
        Peter Zijlstra <peterz@infradead.org>,
        Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        x86@kernel.org
Cc: "H. Peter Anvin" <hpa@zytor.com>, linux-kernel@vger.kernel.org,
        Linus Torvalds <torvalds@linux-foundation.org>,
        Rik van Riel <riel@surriel.com>,
        Yu-cheng Yu <yu-cheng.yu@intel.com>,
        Ingo Molnar <mingo@kernel.org>
Subject: [PATCH v2] x86/fault: Decode and print #PF oops in human readable form
Date: Fri,  7 Dec 2018 11:52:23 -0800
Message-Id: <20181207195223.23968-1-sean.j.christopherson@intel.com>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <20181207184423.1962-1-sean.j.christopherson@intel.com>
References: <20181207184423.1962-1-sean.j.christopherson@intel.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Linus pointed out that deciphering the raw #PF error code and printing
a more human readable message are two different things, and also that
printing the negative cases is mostly just noise[1].  For example, the
USER bit doesn't mean the fault originated in user code and stating
that an oops wasn't due to a protection keys violation isn't interesting
since an oops on a keys violation is a one-in-a-million scenario.

Remove the per-bit decoding of the error code and instead print:
  - the raw error code
  - why the fault occurred
  - the effective privilege level of the access
  - the type of access
  - whether the fault originated in user code or kernel code

This provides the user with the information needed to triage 99.9% of
oopses without polluting the log with useless information or conflating
the error_code with the CPL.

[1] https://lkml.kernel.org/r/CAHk-=whk_fsnxVMvF1T2fFCaP2WrvSybABrLQCWLJyCvHw6NKA@mail.gmail.com

Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
Cc: Andy Lutomirski <luto@kernel.org>
Cc: Borislav Petkov <bp@alien8.de>
Cc: Dave Hansen <dave.hansen@linux.intel.com>
Cc: H. Peter Anvin <hpa@zytor.com>
Cc: Linus Torvalds <torvalds@linux-foundation.org>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Rik van Riel <riel@surriel.com>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Yu-cheng Yu <yu-cheng.yu@intel.com>
Cc: linux-kernel@vger.kernel.org
Cc: Ingo Molnar <mingo@kernel.org>
Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
---

v2:
  - Explicitly call out protection keys violations
  - "Slightly" reword the changelog

 arch/x86/mm/fault.c | 42 +++++++++++-------------------------------
 1 file changed, 11 insertions(+), 31 deletions(-)

diff --git a/arch/x86/mm/fault.c b/arch/x86/mm/fault.c
index 2ff25ad33233..26feb8c525c1 100644
--- a/arch/x86/mm/fault.c
+++ b/arch/x86/mm/fault.c
@@ -603,24 +603,9 @@ static void show_ldttss(const struct desc_ptr *gdt, const char *name, u16 index)
 		 name, index, addr, (desc.limit0 | (desc.limit1 << 16)));
 }
 
-/*
- * This helper function transforms the #PF error_code bits into
- * "[PROT] [USER]" type of descriptive, almost human-readable error strings:
- */
-static void err_str_append(unsigned long error_code, char *buf, unsigned long mask, const char *txt)
-{
-	if (error_code & mask) {
-		if (buf[0])
-			strcat(buf, " ");
-		strcat(buf, txt);
-	}
-}
-
 static void
 show_fault_oops(struct pt_regs *regs, unsigned long error_code, unsigned long address)
 {
-	char err_txt[64];
-
 	if (!oops_may_print())
 		return;
 
@@ -648,27 +633,22 @@ show_fault_oops(struct pt_regs *regs, unsigned long error_code, unsigned long ad
 		 address < PAGE_SIZE ? "NULL pointer dereference" : "paging request",
 		 (void *)address);
 
-	err_txt[0] = 0;
-
-	/*
-	 * Note: length of these appended strings including the separation space and the
-	 * zero delimiter must fit into err_txt[].
-	 */
-	err_str_append(error_code, err_txt, X86_PF_PROT,  "[PROT]" );
-	err_str_append(error_code, err_txt, X86_PF_WRITE, "[WRITE]");
-	err_str_append(error_code, err_txt, X86_PF_USER,  "[USER]" );
-	err_str_append(error_code, err_txt, X86_PF_RSVD,  "[RSVD]" );
-	err_str_append(error_code, err_txt, X86_PF_INSTR, "[INSTR]");
-	err_str_append(error_code, err_txt, X86_PF_PK,    "[PK]"   );
-
-	pr_alert("#PF error: %s\n", error_code ? err_txt : "[normal kernel read fault]");
+	pr_alert("#PF: error_code(0x%04lx) - %s\n", error_code,
+		!(error_code & X86_PF_PROT) ? "not-present page" :
+		(error_code & X86_PF_RSVD)  ? "reserved bit violation" :
+		(error_code & X86_PF_PK)    ? "protection keys violation" :
+					      "permissions violation");
+	pr_alert("#PF: %s-privileged %s from %s code\n",
+		(error_code & X86_PF_USER)  ? "user" : "supervisor",
+		(error_code & X86_PF_INSTR) ? "instruction fetch" :
+		(error_code & X86_PF_WRITE) ? "write access" :
+					      "read access",
+			    user_mode(regs) ? "user" : "kernel");
 
 	if (!(error_code & X86_PF_USER) && user_mode(regs)) {
 		struct desc_ptr idt, gdt;
 		u16 ldtr, tr;
 
-		pr_alert("This was a system access from user code\n");
-
 		/*
 		 * This can happen for quite a few reasons.  The more obvious
 		 * ones are faults accessing the GDT, or LDT.  Perhaps
-- 
2.19.2

