Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 09 Dec 2018 18:55:41 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 8E81C58052C
	for <like.xu@linux.intel.com>; Sat,  8 Dec 2018 03:38:25 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga006-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 08 Dec 2018 03:38:25 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3At0T/EBBr2KXsarN46GWMUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP37p8SwAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95eWCxPAIyy?=
 =?us-ascii?q?b4UBAekfM+lEoIfzukMOoBm8CwSjGe/ixCNEiWHt3aAhz+QhCBvL0BA8E94Ssn?=
 =?us-ascii?q?nZqsj+OqcIUeCyyanF1TLNYOlM2Tjh8YTFbhYhruyWXbVqbMHfz1QvFxnbgVqK?=
 =?us-ascii?q?tIzuIjSY1uEXvGiB8+VvT+SvhHM9qw5vuDSvwtosipPXiY0P11DJ7j95z5goKt?=
 =?us-ascii?q?24UkF7fcSoH4dXtyGfLoZ7RN4pTWJwuCsi1LEKpZ22cDIXxJg6xBPTceKLfoaI?=
 =?us-ascii?q?7x75SeqcIy90iGx5dL+7nRq/8kitxvfhWsS1zFpGtDdJn93Cu30Lyhfd8NKISu?=
 =?us-ascii?q?Fn8UekwTuP1x7c6uVDIU0skarbKoUhwqIrlpYJvkTDGDL2lF/xjK+MeUUo4umo?=
 =?us-ascii?q?6+L5bbX6vpKQKZN4hwLkPqgzh8CyAv40PhYAUmWb4+iwyb/u8VX8QLpQj/02lq?=
 =?us-ascii?q?fZsIrdJcQevqO5GhFa0oM+6xqmEjipzsoYkmcDLF5cYx2HiJXpO1fSL//mFvez?=
 =?us-ascii?q?hFCskDZox//YJLHgDYjNI2DHkLfge7Z99kFdxBAyzdBZ+5JbFLUBLOjvVU/2sd?=
 =?us-ascii?q?zVFRk5Mwuyw+boDtV9y5kSWWWVAq+WKK/Sq0OH5vozI+mQY48YoDL9K/km5/Hw?=
 =?us-ascii?q?l3M4lkIdcLKt3ZsWbnC4A/tnL1+YYXrqntcOD2MKshAiQ+ztjV3RGQNVfGu4Cq?=
 =?us-ascii?q?Ig+ikgWsXhCYbYWpvrhruH0yGmWJpMaSdDA1GIFH7uMIKcR/YLbjnVO8Jkj3kI?=
 =?us-ascii?q?WKasT9wc0wqzvlr/wrtjMu2G4yAdqNfv2cZ446jJmAgv+CdoJ8Ka1W6LUidzhG?=
 =?us-ascii?q?xfXCI83q10vRlgzEye27Nzmf1SGI9v4KZQXwIncJLR0eF+Q4TrVwfcO9uEVlui?=
 =?us-ascii?q?atOhBz43U5Q22dBYMGhnHND3qxnZ1G+DBbMPFvSvGYY5+7+Ui334Pc10zXrc2e?=
 =?us-ascii?q?8lkkMrS9ZnL2CqhqdjsQPUAtiawA2ii6+2ePFEj2b2/2CZwD/L5RkAXQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0DGAADrrAtcmBHrdtBkHgEfBgeBTAKBL?=
 =?us-ascii?q?yqBD4Epg3qIeIsxgWsFHYd3ghGNSYF2ERgDEYQ8AgKDHSI2Bw0BAwEBAQEBAQI?=
 =?us-ascii?q?BEwEBAQEBCAsLBhsOIwyCNgUCAxoBBoJcAQIDAQIgIwopAwMBAgYBAQoLDQICI?=
 =?us-ascii?q?gQCAgMBHhIBBQEcBhMFA4JOSwGCAQEEmyk8iw2BL4RBQIQigQ4SeYsWghaEI4U?=
 =?us-ascii?q?BgwSCVwKJFYYoepA+BwKHCIpHGIIpjxSLEY4QDyGBLARVgS4zGiMvUgaCNQmLZ?=
 =?us-ascii?q?IRzPDGBB4lRgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0DGAADrrAtcmBHrdtBkHgEfBgeBTAKBLyqBD4Epg3qIeIs?=
 =?us-ascii?q?xgWsFHYd3ghGNSYF2ERgDEYQ8AgKDHSI2Bw0BAwEBAQEBAQIBEwEBAQEBCAsLB?=
 =?us-ascii?q?hsOIwyCNgUCAxoBBoJcAQIDAQIgIwopAwMBAgYBAQoLDQICIgQCAgMBHhIBBQE?=
 =?us-ascii?q?cBhMFA4JOSwGCAQEEmyk8iw2BL4RBQIQigQ4SeYsWghaEI4UBgwSCVwKJFYYoe?=
 =?us-ascii?q?pA+BwKHCIpHGIIpjxSLEY4QDyGBLARVgS4zGiMvUgaCNQmLZIRzPDGBB4lRgXc?=
 =?us-ascii?q?BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,330,1539673200"; 
   d="scan'208";a="55481959"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 08 Dec 2018 03:38:24 -0800
Received: from localhost ([::1]:50451 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gVaw8-0007qP-K8
	for like.xu@linux.intel.com; Sat, 08 Dec 2018 06:38:20 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:60452)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <mlureau@redhat.com>) id 1gVadt-0007PQ-3I
	for qemu-devel@nongnu.org; Sat, 08 Dec 2018 06:19:31 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <mlureau@redhat.com>) id 1gVadp-00051L-Tq
	for qemu-devel@nongnu.org; Sat, 08 Dec 2018 06:19:29 -0500
Received: from mail-qt1-f193.google.com ([209.85.160.193]:40049)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <mlureau@redhat.com>) id 1gVadp-000513-In
	for qemu-devel@nongnu.org; Sat, 08 Dec 2018 06:19:25 -0500
Received: by mail-qt1-f193.google.com with SMTP id k12so7421930qtf.7
	for <qemu-devel@nongnu.org>; Sat, 08 Dec 2018 03:19:25 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:mime-version:references:in-reply-to:from:date
	:message-id:subject:to:cc:content-transfer-encoding;
	bh=Yigu9oCSwKrn0EsYDY73Tiok45eZ55VVZjJvMWPA8Ng=;
	b=sDUT7hKWIBn/6TwiRg8Vuo6Ukk1oc4p8fGrgUPnDDpW5x6YybjQiXge3QjcC0sIybs
	xwSFPQ7T5+XrdoumLmGiSHCfHLaDQE0BifPDTCQxjUewzejwSrAzP1I2xkXu+xcbf2/S
	ZXRBFMk+BxoaEkf49ST5rem2J1iUwE8Xs3tm8jGvOKovNWOpcflQAnZDmAoIUItEgq3I
	3toczrt/E5Q1ILBoD+D55ab+aqJ0TkVMvTkx5ofXuE/pmMdBLP97pU1Gmf5ZEPPF2hI1
	IDKwl3qpt0o9u5ZKKOgqro1//DW3P0x8OSkvlB/0Z1qBXcHJeNrfdtLHpoeiRcKufg2Q
	FKFA==
X-Gm-Message-State: AA+aEWbRDma7uH49RYuCT9bfy+aWvPpEanM6X9CHzGy/hZNKN/CWBdsq
	nRaTQUi7xgc4ismAAGXp7IcdGLII0a/M9w3VjrkVT5PMCyg=
X-Google-Smtp-Source: AFSGD/WuH5uIIURhdqdBNUwK4IKfw4gjs1S/rbAhGJV5Qh9BSm0wCEQdbhNj5RkDUQrnUvg8BXYXiTOUkZOMxsP+B54=
X-Received: by 2002:a0c:afd1:: with SMTP id t17mr5098554qvc.93.1544267963578; 
	Sat, 08 Dec 2018 03:19:23 -0800 (PST)
MIME-Version: 1.0
References: <20181208111606.8505-1-marcandre.lureau@redhat.com>
In-Reply-To: <20181208111606.8505-1-marcandre.lureau@redhat.com>
From: =?UTF-8?B?TWFyYy1BbmRyw6kgTHVyZWF1?= <marcandre.lureau@redhat.com>
Date: Sat, 8 Dec 2018 15:19:11 +0400
Message-ID: <CAMxuvazbS3hq8FgXXU1YnDgWoFkeu35bDUQz83fOJWGXZdq0Lg@mail.gmail.com>
To: qemu-devel <qemu-devel@nongnu.org>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.85.160.193
Subject: Re: [Qemu-devel] [PATCH for-4.0 v7 00/27] Hi,
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: "Armbruster, Markus" <armbru@redhat.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Hi,

The cover letter title should be "qapi: add #if pre-processor
conditions to generated code (part 2)"


On Sat, Dec 8, 2018 at 3:16 PM Marc-Andr=C3=A9 Lureau
<marcandre.lureau@redhat.com> wrote:
>
> This is the second part of the "add #if pre-processor conditions to
> generated code" series, adding schema member conditions (roughly
> 16-38/49).
>
> Members can be exploded as dictionnary with 'type'/'if' keys:
>
> { 'struct': 'TestIfStruct', 'data':
>   { 'foo': 'int',
>     'bar': { 'type': 'int', 'if': 'defined(TEST_IF_STRUCT_BAR)'} } }
>
> Enum values can be exploded as dictionnary with 'type'/'if' keys:
>
> { 'enum': 'TestIfEnum', 'data':
>   [ 'foo',
>     { 'name' : 'bar', 'if': 'defined(TEST_IF_ENUM_BAR)' } ] }
>
> v7:
> - replaced osdep.h include by a #warning check
> - renamed event_names/event_enum_members, enum_name/event_enum_ename
> - move normalization after checking
> - simplify make_enum_members()
> - some tests changes
> - rebase/conflicts tweaks
> - squash documentation changes in related patches
> - tweak generated documentation code & output
> - modify commit comments, add rb tags
>
> v6:
> - subset of v5 series: add schema member conditions
> - split "qapi: factor out check_known_keys()", error report improvements
> - add a patch to "qapi: include osdep.h in type headers" to avoid
>   potential build configuration change issues
> - rebased, on top of Markus's qapi-next branch (first 4 patches,
>   included for patchew testing)
>
> Marc-Andr=C3=A9 Lureau (27):
>   qapi: make sure osdep.h is included in type headers
>   qapi: do not define enumeration value explicitly
>   qapi: rename QAPISchemaEnumType.values to .members
>   qapi: change enum visitor and gen_enum* to take QAPISchemaMember
>   tests: print enum type members more like object type members
>   qapi: factor out checking for keys
>   qapi: improve reporting of unknown or missing keys
>   qapi: add a dictionary form with 'name' key for enum members
>   qapi: add 'if' to enum members
>   qapi-events: add 'if' condition to implicit event enum
>   qapi: pass long form enum to make_enum_members
>   qapi: rename allow_dict to allow_implicit
>   qapi: add a dictionary form for TYPE
>   qapi: add 'if' to implicit struct members
>   qapi: add an error in case a discriminator is conditional
>   qapi: add 'if' to union members
>   qapi: simplify make_enum_members()
>   tests/qapi: add command with condition on union argument
>   qapi: add 'if' to alternate members
>   tests/qapi: add command with condition on alternate argument
>   qapi: add #if conditions to generated code members
>   qapi: add 'If:' condition to enum values documentation
>   qapi: add 'If:' condition to struct members documentation
>   qapi: add condition to variants documentation
>   qapi: break long lines at 'data' member
>   qapi: add more conditions to SPICE
>   qapi: add conditions to REPLICATION type/commands on the schema
>
>  qapi/block-core.json                          |  26 +-
>  qapi/char.json                                | 150 ++++++-----
>  qapi/migration.json                           |  15 +-
>  qapi/misc.json                                |   7 +-
>  qapi/net.json                                 |   3 +-
>  qapi/tpm.json                                 |   5 +-
>  qapi/ui.json                                  |   3 +-
>  scripts/qapi/common.py                        | 253 ++++++++++++------
>  scripts/qapi/doc.py                           |  30 ++-
>  scripts/qapi/events.py                        |  13 +-
>  scripts/qapi/introspect.py                    |  16 +-
>  scripts/qapi/types.py                         |  13 +-
>  scripts/qapi/visit.py                         |   8 +-
>  migration/colo.c                              |  16 +-
>  monitor.c                                     |   5 -
>  docs/devel/qapi-code-gen.txt                  |  19 ++
>  tests/Makefile.include                        |  11 +-
>  tests/qapi-schema/alternate-base.err          |   1 +
>  tests/qapi-schema/alternate-invalid-dict.err  |   1 +
>  ...ember.exit =3D> alternate-invalid-dict.exit} |   0
>  tests/qapi-schema/alternate-invalid-dict.json |   4 +
>  ...-member.out =3D> alternate-invalid-dict.out} |   0
>  tests/qapi-schema/comments.out                |  14 +-
>  tests/qapi-schema/doc-bad-section.out         |  13 +-
>  tests/qapi-schema/doc-good.json               |  11 +-
>  tests/qapi-schema/doc-good.out                |  22 +-
>  tests/qapi-schema/doc-good.texi               |   7 +-
>  tests/qapi-schema/double-type.err             |   1 +
>  tests/qapi-schema/empty.out                   |   9 +-
>  tests/qapi-schema/enum-bad-member.err         |   1 +
>  tests/qapi-schema/enum-bad-member.exit        |   1 +
>  tests/qapi-schema/enum-bad-member.json        |   2 +
>  tests/qapi-schema/enum-bad-member.out         |   0
>  .../qapi-schema/enum-dict-member-unknown.err  |   2 +
>  .../qapi-schema/enum-dict-member-unknown.exit |   1 +
>  .../qapi-schema/enum-dict-member-unknown.json |   2 +
>  .../qapi-schema/enum-dict-member-unknown.out  |   0
>  tests/qapi-schema/enum-dict-member.err        |   1 -
>  tests/qapi-schema/enum-dict-member.json       |   2 -
>  tests/qapi-schema/enum-if-invalid.err         |   1 +
>  tests/qapi-schema/enum-if-invalid.exit        |   1 +
>  tests/qapi-schema/enum-if-invalid.json        |   3 +
>  tests/qapi-schema/enum-if-invalid.out         |   0
>  tests/qapi-schema/event-case.out              |   9 +-
>  .../qapi-schema/event-member-invalid-dict.err |   1 +
>  .../event-member-invalid-dict.exit            |   1 +
>  .../event-member-invalid-dict.json            |   2 +
>  .../qapi-schema/event-member-invalid-dict.out |   0
>  tests/qapi-schema/event-nest-struct.json      |   2 +-
>  .../flat-union-inline-invalid-dict.err        |   1 +
>  .../flat-union-inline-invalid-dict.exit       |   1 +
>  .../flat-union-inline-invalid-dict.json       |  11 +
>  .../flat-union-inline-invalid-dict.out        |   0
>  tests/qapi-schema/flat-union-inline.json      |   2 +-
>  .../flat-union-invalid-if-discriminator.err   |   1 +
>  .../flat-union-invalid-if-discriminator.exit  |   1 +
>  .../flat-union-invalid-if-discriminator.json  |  17 ++
>  .../flat-union-invalid-if-discriminator.out   |   0
>  tests/qapi-schema/ident-with-escape.out       |   9 +-
>  tests/qapi-schema/include-relpath.out         |  14 +-
>  tests/qapi-schema/include-repetition.out      |  14 +-
>  tests/qapi-schema/include-simple.out          |  14 +-
>  tests/qapi-schema/indented-expr.out           |   9 +-
>  .../nested-struct-data-invalid-dict.err       |   1 +
>  .../nested-struct-data-invalid-dict.exit      |   1 +
>  .../nested-struct-data-invalid-dict.json      |   3 +
>  .../nested-struct-data-invalid-dict.out       |   0
>  tests/qapi-schema/nested-struct-data.json     |   2 +-
>  tests/qapi-schema/qapi-schema-test.json       |  39 ++-
>  tests/qapi-schema/qapi-schema-test.out        |  74 ++++-
>  .../struct-member-invalid-dict.err            |   1 +
>  .../struct-member-invalid-dict.exit           |   1 +
>  .../struct-member-invalid-dict.json           |   3 +
>  .../struct-member-invalid-dict.out            |   0
>  tests/qapi-schema/test-qapi.py                |   9 +-
>  .../qapi-schema/union-branch-invalid-dict.err |   1 +
>  .../union-branch-invalid-dict.exit            |   1 +
>  .../union-branch-invalid-dict.json            |   4 +
>  .../qapi-schema/union-branch-invalid-dict.out |   0
>  tests/qapi-schema/unknown-expr-key.err        |   3 +-
>  tests/qapi-schema/unknown-expr-key.json       |   2 +-
>  81 files changed, 681 insertions(+), 266 deletions(-)
>  create mode 100644 tests/qapi-schema/alternate-invalid-dict.err
>  rename tests/qapi-schema/{enum-dict-member.exit =3D> alternate-invalid-d=
ict.exit} (100%)
>  create mode 100644 tests/qapi-schema/alternate-invalid-dict.json
>  rename tests/qapi-schema/{enum-dict-member.out =3D> alternate-invalid-di=
ct.out} (100%)
>  create mode 100644 tests/qapi-schema/enum-bad-member.err
>  create mode 100644 tests/qapi-schema/enum-bad-member.exit
>  create mode 100644 tests/qapi-schema/enum-bad-member.json
>  create mode 100644 tests/qapi-schema/enum-bad-member.out
>  create mode 100644 tests/qapi-schema/enum-dict-member-unknown.err
>  create mode 100644 tests/qapi-schema/enum-dict-member-unknown.exit
>  create mode 100644 tests/qapi-schema/enum-dict-member-unknown.json
>  create mode 100644 tests/qapi-schema/enum-dict-member-unknown.out
>  delete mode 100644 tests/qapi-schema/enum-dict-member.err
>  delete mode 100644 tests/qapi-schema/enum-dict-member.json
>  create mode 100644 tests/qapi-schema/enum-if-invalid.err
>  create mode 100644 tests/qapi-schema/enum-if-invalid.exit
>  create mode 100644 tests/qapi-schema/enum-if-invalid.json
>  create mode 100644 tests/qapi-schema/enum-if-invalid.out
>  create mode 100644 tests/qapi-schema/event-member-invalid-dict.err
>  create mode 100644 tests/qapi-schema/event-member-invalid-dict.exit
>  create mode 100644 tests/qapi-schema/event-member-invalid-dict.json
>  create mode 100644 tests/qapi-schema/event-member-invalid-dict.out
>  create mode 100644 tests/qapi-schema/flat-union-inline-invalid-dict.err
>  create mode 100644 tests/qapi-schema/flat-union-inline-invalid-dict.exit
>  create mode 100644 tests/qapi-schema/flat-union-inline-invalid-dict.json
>  create mode 100644 tests/qapi-schema/flat-union-inline-invalid-dict.out
>  create mode 100644 tests/qapi-schema/flat-union-invalid-if-discriminator=
.err
>  create mode 100644 tests/qapi-schema/flat-union-invalid-if-discriminator=
.exit
>  create mode 100644 tests/qapi-schema/flat-union-invalid-if-discriminator=
.json
>  create mode 100644 tests/qapi-schema/flat-union-invalid-if-discriminator=
.out
>  create mode 100644 tests/qapi-schema/nested-struct-data-invalid-dict.err
>  create mode 100644 tests/qapi-schema/nested-struct-data-invalid-dict.exi=
t
>  create mode 100644 tests/qapi-schema/nested-struct-data-invalid-dict.jso=
n
>  create mode 100644 tests/qapi-schema/nested-struct-data-invalid-dict.out
>  create mode 100644 tests/qapi-schema/struct-member-invalid-dict.err
>  create mode 100644 tests/qapi-schema/struct-member-invalid-dict.exit
>  create mode 100644 tests/qapi-schema/struct-member-invalid-dict.json
>  create mode 100644 tests/qapi-schema/struct-member-invalid-dict.out
>  create mode 100644 tests/qapi-schema/union-branch-invalid-dict.err
>  create mode 100644 tests/qapi-schema/union-branch-invalid-dict.exit
>  create mode 100644 tests/qapi-schema/union-branch-invalid-dict.json
>  create mode 100644 tests/qapi-schema/union-branch-invalid-dict.out
>
> --
> 2.20.0.rc1
>

