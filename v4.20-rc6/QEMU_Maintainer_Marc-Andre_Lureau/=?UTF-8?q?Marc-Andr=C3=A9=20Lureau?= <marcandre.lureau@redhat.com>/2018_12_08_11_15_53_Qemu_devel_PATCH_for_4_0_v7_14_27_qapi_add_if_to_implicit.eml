Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 09 Dec 2018 18:55:32 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id F2C535803E4
	for <like.xu@linux.intel.com>; Sat,  8 Dec 2018 03:24:20 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga006-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 08 Dec 2018 03:24:20 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AUMFz7RLV+7z5eOhZ59mcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgXKv/6rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZXshfSSJPDIC+?=
 =?us-ascii?q?YIsBAOUOIelWoZTlp1YMrxWzChSgCe3zxjBWnX/7xrE60/07HA3awAAsA9ADvX?=
 =?us-ascii?q?LJp9v1LqcSVuW1wbHPwzrZdfNZxS7x5ZTOch88u/GLR697f8zMyUk1CQzKlEiQ?=
 =?us-ascii?q?opHiMjOQzOsNqXSU4PBmVe2ykW4otRt9ojyyxsc2lIbGnJ8Vx0ve9Spn3Yk1Jc?=
 =?us-ascii?q?e3SFJhbdG4F5tQsjiXOo1rSc0sRGFovTw1yrwAuZOjYCgLyIwnyADFZ/yBaYeI?=
 =?us-ascii?q?5wzsWeCMKjl7nHJoYKyziwqx/ES61+HwS8q53ExUoidLktTArG0B2h7L5sSZVv?=
 =?us-ascii?q?dw+l2t1SuB2gzN8O1IPEM5mKTBJ5I/wbM9kIcYv17ZES/sgkr2ibebdkU69eis?=
 =?us-ascii?q?7OTqerHmpp6HN49okQHyKKsumsqiAegiNQgORWeb9fy91L3l40L5XK1HguMqnq?=
 =?us-ascii?q?TaqpzWONkXq62jDwNL3Isu6wyzAyqk3dgAmHkINlNFeBaJj4jzPFHOJej1De6h?=
 =?us-ascii?q?jFSpjTdn3u3JMaP/AprTKnjPiazufbFg605a1AU808tf65VQCrEAI/L8RFX9td?=
 =?us-ascii?q?PFDhIhNwy0wuDnCMhy148EWGKPBLOZP73WsVOS+u0vJOyMaZQTuDb6Lfgl6Pju?=
 =?us-ascii?q?jWIjlV8aZ6mp0oMbaGqkEfR+P0WZfX3sj88FEWcLvQoxUvbmiVKfUTNIY3ayXq?=
 =?us-ascii?q?Q85iw0CY68DIfDQJytj6KF3CuhApJWYWVGWRixF2z1fdCER+sUc3DVZctgiSAf?=
 =?us-ascii?q?E76mTYAnyFeprgC9zrNmKu/d/GofrY7i095uoPTekAx3+TFqAsDO7meWUmshm2?=
 =?us-ascii?q?oJQyMxjrlypFE4xlqd3Kw9mfFBCNFI+9tPVQE1M4OayPZ1XMvvUADMdcvcVVC9?=
 =?us-ascii?q?X9+9CiswRN9i/9hbekt4BpCugw7O2wKsBLkakaHNA4Y7oYzG2H2kAs9nwDPv0q?=
 =?us-ascii?q?U7DhECX9FCPHDu0qt27QPaAYLTngOdirynfLk0xiPB9G6fi2GJuRcLA0ZLTazZ?=
 =?us-ascii?q?UCVHNQPtptPj6xaHFuf2BA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0CHAACbqQtcmBHrdtBkHQEBBQEHBQGBV?=
 =?us-ascii?q?AUBCwGBMCqBD4Epg3qIeIsygwmYSBQYAxGHXSI3Bg0BAwEBAQEBAQIBEwEBAQE?=
 =?us-ascii?q?BCAsLBhsOIwyCNgUCAxoBBoJcAwMBAiAEHwopAwMBAgYBASQCIgQCAgMBUxkFg?=
 =?us-ascii?q?lFLAYIBAQSnA3wzhUCDZIENgQuLF4IWgRGCXYg6glcCjzt6kDUHAocIijsLGII?=
 =?us-ascii?q?phzuHV4d2kTiBXIF3MxojUIJsCYtkhHM8MYEHHIk0gXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0CHAACbqQtcmBHrdtBkHQEBBQEHBQGBVAUBCwGBMCqBD4E?=
 =?us-ascii?q?pg3qIeIsygwmYSBQYAxGHXSI3Bg0BAwEBAQEBAQIBEwEBAQEBCAsLBhsOIwyCN?=
 =?us-ascii?q?gUCAxoBBoJcAwMBAiAEHwopAwMBAgYBASQCIgQCAgMBUxkFglFLAYIBAQSnA3w?=
 =?us-ascii?q?zhUCDZIENgQuLF4IWgRGCXYg6glcCjzt6kDUHAocIijsLGIIphzuHV4d2kTiBX?=
 =?us-ascii?q?IF3MxojUIJsCYtkhHM8MYEHHIk0gXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,330,1539673200"; 
   d="scan'208";a="54369989"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 08 Dec 2018 03:24:19 -0800
Received: from localhost ([::1]:50371 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gVaiZ-000529-4f
	for like.xu@linux.intel.com; Sat, 08 Dec 2018 06:24:19 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:59928)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <marcandre.lureau@redhat.com>) id 1gVacQ-000501-Mq
	for qemu-devel@nongnu.org; Sat, 08 Dec 2018 06:18:00 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <marcandre.lureau@redhat.com>) id 1gVacP-00047V-Hm
	for qemu-devel@nongnu.org; Sat, 08 Dec 2018 06:17:58 -0500
Received: from mx1.redhat.com ([209.132.183.28]:44716)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <marcandre.lureau@redhat.com>)
	id 1gVacP-00047I-94
	for qemu-devel@nongnu.org; Sat, 08 Dec 2018 06:17:57 -0500
Received: from smtp.corp.redhat.com (int-mx04.intmail.prod.int.phx2.redhat.com
	[10.5.11.14])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 9EAE030832C7;
	Sat,  8 Dec 2018 11:17:56 +0000 (UTC)
Received: from localhost (unknown [10.36.112.11])
	by smtp.corp.redhat.com (Postfix) with ESMTP id 254615D9C6;
	Sat,  8 Dec 2018 11:17:52 +0000 (UTC)
From: =?UTF-8?q?Marc-Andr=C3=A9=20Lureau?= <marcandre.lureau@redhat.com>
To: qemu-devel@nongnu.org
Date: Sat,  8 Dec 2018 15:15:53 +0400
Message-Id: <20181208111606.8505-15-marcandre.lureau@redhat.com>
In-Reply-To: <20181208111606.8505-1-marcandre.lureau@redhat.com>
References: <20181208111606.8505-1-marcandre.lureau@redhat.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.14
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.44]);
	Sat, 08 Dec 2018 11:17:56 +0000 (UTC)
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: [Qemu-devel] [PATCH for-4.0 v7 14/27] qapi: add 'if' to implicit
 struct members
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: =?UTF-8?q?Marc-Andr=C3=A9=20Lureau?= <marcandre.lureau@redhat.com>,
	armbru@redhat.com, Michael Roth <mdroth@linux.vnet.ibm.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

The generated code is for now *unconditional*. Later patches generate
the conditionals.

Signed-off-by: Marc-Andr=C3=A9 Lureau <marcandre.lureau@redhat.com>
Reviewed-by: Markus Armbruster <armbru@redhat.com>
---
 scripts/qapi/common.py                  | 14 +++++++-------
 docs/devel/qapi-code-gen.txt            | 10 ++++++++++
 tests/qapi-schema/qapi-schema-test.json | 12 +++++++++---
 tests/qapi-schema/qapi-schema-test.out  |  5 +++++
 tests/qapi-schema/test-qapi.py          |  1 +
 5 files changed, 32 insertions(+), 10 deletions(-)

diff --git a/scripts/qapi/common.py b/scripts/qapi/common.py
index 4b3ba53dc7..aec51acb07 100644
--- a/scripts/qapi/common.py
+++ b/scripts/qapi/common.py
@@ -717,7 +717,7 @@ def check_type(info, source, value, allow_array=3DFal=
se,
         # an optional argument.
         if isinstance(arg, dict):
             check_known_keys(info, "member '%s' of %s" % (key, source),
-                             arg, ['type'], [])
+                             arg, ['type'], ['if'])
             typ =3D arg['type']
         else:
             typ =3D arg
@@ -1438,8 +1438,8 @@ class QAPISchemaMember(object):
=20
=20
 class QAPISchemaObjectTypeMember(QAPISchemaMember):
-    def __init__(self, name, typ, optional):
-        QAPISchemaMember.__init__(self, name)
+    def __init__(self, name, typ, optional, ifcond=3DNone):
+        QAPISchemaMember.__init__(self, name, ifcond)
         assert isinstance(typ, str)
         assert isinstance(optional, bool)
         self._type_name =3D typ
@@ -1762,7 +1762,7 @@ class QAPISchema(object):
             name, info, doc, ifcond,
             self._make_enum_members(data), prefix))
=20
-    def _make_member(self, name, typ, info):
+    def _make_member(self, name, typ, ifcond, info):
         optional =3D False
         if name.startswith('*'):
             name =3D name[1:]
@@ -1770,10 +1770,10 @@ class QAPISchema(object):
         if isinstance(typ, list):
             assert len(typ) =3D=3D 1
             typ =3D self._make_array_type(typ[0], info)
-        return QAPISchemaObjectTypeMember(name, typ, optional)
+        return QAPISchemaObjectTypeMember(name, typ, optional, ifcond)
=20
     def _make_members(self, data, info):
-        return [self._make_member(key, value['type'], info)
+        return [self._make_member(key, value['type'], value.get('if'), i=
nfo)
                 for (key, value) in data.items()]
=20
     def _def_struct_type(self, expr, info, doc):
@@ -1794,7 +1794,7 @@ class QAPISchema(object):
             typ =3D self._make_array_type(typ[0], info)
         typ =3D self._make_implicit_object_type(
             typ, info, None, self.lookup_type(typ),
-            'wrapper', [self._make_member('data', typ, info)])
+            'wrapper', [self._make_member('data', typ, None, info)])
         return QAPISchemaObjectTypeVariant(case, typ)
=20
     def _def_union_type(self, expr, info, doc):
diff --git a/docs/devel/qapi-code-gen.txt b/docs/devel/qapi-code-gen.txt
index 08c5ef97ff..e6fff32241 100644
--- a/docs/devel/qapi-code-gen.txt
+++ b/docs/devel/qapi-code-gen.txt
@@ -752,6 +752,16 @@ gets its generated code guarded like this:
  #endif /* defined(HAVE_BAR) */
  #endif /* defined(CONFIG_FOO) */
=20
+Where a member can be defined with a single string value for its type,
+it is also possible to supply a dictionary instead with both 'type'
+and 'if' keys. (TODO: union and alternate)
+
+Example: a conditional 'bar' member
+
+{ 'struct': 'IfStruct', 'data':
+  { 'foo': 'int',
+    'bar': { 'type': 'int', 'if': 'defined(IFCOND)'} } }
+
 An enum value can be replaced by a dictionary with a 'name' and a 'if'
 key.
=20
diff --git a/tests/qapi-schema/qapi-schema-test.json b/tests/qapi-schema/=
qapi-schema-test.json
index 94570154c9..b8565a3913 100644
--- a/tests/qapi-schema/qapi-schema-test.json
+++ b/tests/qapi-schema/qapi-schema-test.json
@@ -201,7 +201,9 @@
=20
 # test 'if' condition handling
=20
-{ 'struct': 'TestIfStruct', 'data': { 'foo': 'int' },
+{ 'struct': 'TestIfStruct', 'data':
+  { 'foo': 'int',
+    'bar': { 'type': 'int', 'if': 'defined(TEST_IF_STRUCT_BAR)'} },
   'if': 'defined(TEST_IF_STRUCT)' }
=20
 { 'enum': 'TestIfEnum', 'data':
@@ -214,11 +216,15 @@
 { 'alternate': 'TestIfAlternate', 'data': { 'foo': 'int', 'bar': 'TestSt=
ruct' },
   'if': 'defined(TEST_IF_ALT) && defined(TEST_IF_STRUCT)' }
=20
-{ 'command': 'TestIfCmd', 'data': { 'foo': 'TestIfStruct', 'bar': 'TestI=
fEnum' },
+{ 'command': 'TestIfCmd', 'data':
+  { 'foo': 'TestIfStruct',
+    'bar': { 'type': 'TestIfEnum', 'if': 'defined(TEST_IF_CMD_BAR)' } },
   'returns': 'UserDefThree',
   'if': ['defined(TEST_IF_CMD)', 'defined(TEST_IF_STRUCT)'] }
=20
 { 'command': 'TestCmdReturnDefThree', 'returns': 'UserDefThree' }
=20
-{ 'event': 'TestIfEvent', 'data': { 'foo': 'TestIfStruct' },
+{ 'event': 'TestIfEvent', 'data':
+  { 'foo': 'TestIfStruct',
+    'bar': { 'type': 'TestIfEnum', 'if': 'defined(TEST_IF_EVT_BAR)' } },
   'if': 'defined(TEST_IF_EVT) && defined(TEST_IF_STRUCT)' }
diff --git a/tests/qapi-schema/qapi-schema-test.out b/tests/qapi-schema/q=
api-schema-test.out
index 130199fe8f..23fb078b85 100644
--- a/tests/qapi-schema/qapi-schema-test.out
+++ b/tests/qapi-schema/qapi-schema-test.out
@@ -268,6 +268,8 @@ command __org.qemu_x-command q_obj___org.qemu_x-comma=
nd-arg -> __org.qemu_x-Unio
    gen=3DTrue success_response=3DTrue boxed=3DFalse oob=3DFalse preconfi=
g=3DFalse
 object TestIfStruct
     member foo: int optional=3DFalse
+    member bar: int optional=3DFalse
+        if ['defined(TEST_IF_STRUCT_BAR)']
     if ['defined(TEST_IF_STRUCT)']
 enum TestIfEnum
     member foo
@@ -292,6 +294,7 @@ alternate TestIfAlternate
 object q_obj_TestIfCmd-arg
     member foo: TestIfStruct optional=3DFalse
     member bar: TestIfEnum optional=3DFalse
+        if ['defined(TEST_IF_CMD_BAR)']
     if ['defined(TEST_IF_CMD)', 'defined(TEST_IF_STRUCT)']
 command TestIfCmd q_obj_TestIfCmd-arg -> UserDefThree
    gen=3DTrue success_response=3DTrue boxed=3DFalse oob=3DFalse preconfi=
g=3DFalse
@@ -300,6 +303,8 @@ command TestCmdReturnDefThree None -> UserDefThree
    gen=3DTrue success_response=3DTrue boxed=3DFalse oob=3DFalse preconfi=
g=3DFalse
 object q_obj_TestIfEvent-arg
     member foo: TestIfStruct optional=3DFalse
+    member bar: TestIfEnum optional=3DFalse
+        if ['defined(TEST_IF_EVT_BAR)']
     if ['defined(TEST_IF_EVT) && defined(TEST_IF_STRUCT)']
 event TestIfEvent q_obj_TestIfEvent-arg
    boxed=3DFalse
diff --git a/tests/qapi-schema/test-qapi.py b/tests/qapi-schema/test-qapi=
.py
index aadf252d9d..27081cb50c 100644
--- a/tests/qapi-schema/test-qapi.py
+++ b/tests/qapi-schema/test-qapi.py
@@ -39,6 +39,7 @@ class QAPISchemaTestVisitor(QAPISchemaVisitor):
         for m in members:
             print('    member %s: %s optional=3D%s'
                   % (m.name, m.type.name, m.optional))
+            self._print_if(m.ifcond, 8)
         self._print_variants(variants)
         self._print_if(ifcond)
=20
--=20
2.20.0.rc1


