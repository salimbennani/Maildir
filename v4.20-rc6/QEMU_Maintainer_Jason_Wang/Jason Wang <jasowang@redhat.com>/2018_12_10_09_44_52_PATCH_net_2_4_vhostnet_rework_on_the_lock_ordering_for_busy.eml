Return-Path: <virtualization-bounces@lists.linux-foundation.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 10 Dec 2018 18:15:31 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 9B6EA580297
	for <like.xu@linux.intel.com>; Mon, 10 Dec 2018 01:45:37 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 10 Dec 2018 01:45:37 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AZ4omJB+5GeP9AP9uRHKM819IXTAuvvDOBiVQ1KB+?=
 =?us-ascii?q?0u4SIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDwULs6Wymt771zRRHoli?=
 =?us-ascii?q?kJKjA3/mLVhcx+lKJWohCvqhNiz4PafI2aO+ZxcKzGfdwEXmdBQsRcWjZdDo+g?=
 =?us-ascii?q?c4cDEewMNvtYoYnnoFsOqAOzCw22C+P0zT9IgGL90q0g3OQnHgHNwQstH9AUv3?=
 =?us-ascii?q?TPq9X0Or0dUea6zKTT1zXMce5Z2Tfn54jUaBwuvfaMXbdpfMfX1EIhGQTFjlCK?=
 =?us-ascii?q?pozkOTOYzuANs2md7+p9WuOvhWknqxx3ojey3MgslojJhoUTylze8iV52ok1KN?=
 =?us-ascii?q?ulQ0B4ed6pCIZcui6GO4dsXM8uXnxktDwnxrAHvZO3ZjUGxIo/yxLBd/CKd5KE?=
 =?us-ascii?q?7g/tWeqPOzt0mXFodbylixqs8kWtzPD3WNOu31ZQtCVFl8HBtnAT2BzX7ciKUv?=
 =?us-ascii?q?598V2g2TaLzQzT7uBEIUYplavUJZ4hxaMwlpwOvkvZAi/2mUL2jKmMekUj4Oio?=
 =?us-ascii?q?5PzrYrTgppCCK495khzyP6sylsClH+g0LxUCU3KG9em90LDv51D1TKtSgv0ziK?=
 =?us-ascii?q?bZsZTaJcoBpq6+Bg9Yypgj6xelDze6zdQXh30HLFNEeR2dk4jpOlbOIPbhAfik?=
 =?us-ascii?q?hFSsjTFryOzYMb36GZjNKnnDkKz9fbZm8UJczAszzdZC55NbE70BLvXzWlL3tN?=
 =?us-ascii?q?PFFBA5Lw20w+HhCNln0YMeQ22PDreDMKzOqV+I+v4vI+6UaY8RuTb9KOYq6+Th?=
 =?us-ascii?q?jH8kglIdeaip3Z0KaHG3BPhmIkOZYWbyjdcFC2sFog0+TOm5wGCESiNZMnauQ7?=
 =?us-ascii?q?ontHZ8DIO9EZyFQoGrnayP2zq9EpRKZ2dATFeWHjDtfoSAXv4KLyWKPs5mlCdD?=
 =?us-ascii?q?S7m7V5Io0RC8vRP7zLw0E+zP5ydNsJvi0MRytfPSjw0v/Dh1Hc2B0maLCnt5h3?=
 =?us-ascii?q?4FXCMe2KFkvVc7zlaFzLg9jftFE9Ba+/JOVEE9L5GL1PFwCd35RlfceMyUQk2t?=
 =?us-ascii?q?WNSsDGINSYc02MMmeUtxG9y+yBvE2m7iAbYOkKOCApMc6K/Q33HtYc16zjKO17?=
 =?us-ascii?q?ckp0cpT9EJNmC8gKN7sQ/JCMqBjUSDi7ujcaUO1TLM82GryWuVoFoeVA92TLWA?=
 =?us-ascii?q?U3cCYEffsdX+4AXFVbDqQbIqLgdM1+acJaZQLN7kl1NLQLHkItuaK2awnXqgQB?=
 =?us-ascii?q?WF3LWBaKL0dGgHmibQEk4Jl0YU53nVGxI5A3KDqnnZCnRRHFTgKxfu+PJ5t3q9?=
 =?us-ascii?q?QWcuwg2KZlEn3L2wrE1GzceAQu8ei+pX8BwqrC95SQ6w?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AnAAAgNQ5chwyp04xjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUwUBAQsBgVqBD4EXEoxyiy6DLodxjj+BcxQYCwmDeoNwIjYHDQEDAQEBAQE?=
 =?us-ascii?q?BAgETAQEBCgsJCCkjDII2BQIDGAmCXAECAwEBASQTDAoeDgMBAgYBAUAEBAgDA?=
 =?us-ascii?q?R0GAS8HEgWDHAGBaQMVBQqlZjOHdg2CFwWMIReBQD+GekcBBIc5AokVhm42j3Y?=
 =?us-ascii?q?YLgmHCIYoMz2DJAsYgX+HZQKHVyyIdoRzgQ6KDYFNDYF6MxoIGxU7gmyCJxd/A?=
 =?us-ascii?q?QKHXIVMMgEBMQGBIoo2gXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AnAAAgNQ5chwyp04xjHAEBAQQBAQcEAQGBUwUBAQsBgVq?=
 =?us-ascii?q?BD4EXEoxyiy6DLodxjj+BcxQYCwmDeoNwIjYHDQEDAQEBAQEBAgETAQEBCgsJC?=
 =?us-ascii?q?CkjDII2BQIDGAmCXAECAwEBASQTDAoeDgMBAgYBAUAEBAgDAR0GAS8HEgWDHAG?=
 =?us-ascii?q?BaQMVBQqlZjOHdg2CFwWMIReBQD+GekcBBIc5AokVhm42j3YYLgmHCIYoMz2DJ?=
 =?us-ascii?q?AsYgX+HZQKHVyyIdoRzgQ6KDYFNDYF6MxoIGxU7gmyCJxd/AQKHXIVMMgEBMQG?=
 =?us-ascii?q?BIoo2gXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,338,1539673200"; 
   d="scan'208";a="44271165"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from mail.linuxfoundation.org ([140.211.169.12])
  by mtab.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 10 Dec 2018 01:45:37 -0800
Received: from mail.linux-foundation.org (localhost [127.0.0.1])
	by mail.linuxfoundation.org (Postfix) with ESMTP id 3D621AA5;
	Mon, 10 Dec 2018 09:45:13 +0000 (UTC)
X-Original-To: virtualization@lists.linux-foundation.org
Delivered-To: virtualization@mail.linuxfoundation.org
Received: from smtp1.linuxfoundation.org (smtp1.linux-foundation.org
	[172.17.192.35])
	by mail.linuxfoundation.org (Postfix) with ESMTPS id 239B4A67
	for <virtualization@lists.linux-foundation.org>;
	Mon, 10 Dec 2018 09:45:11 +0000 (UTC)
X-Greylist: domain auto-whitelisted by SQLgrey-1.7.6
Received: from mx1.redhat.com (mx1.redhat.com [209.132.183.28])
	by smtp1.linuxfoundation.org (Postfix) with ESMTPS id 9587470B
	for <virtualization@lists.linux-foundation.org>;
	Mon, 10 Dec 2018 09:45:10 +0000 (UTC)
Received: from smtp.corp.redhat.com (int-mx02.intmail.prod.int.phx2.redhat.com
	[10.5.11.12])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 081283DE03;
	Mon, 10 Dec 2018 09:45:10 +0000 (UTC)
Received: from jason-ThinkPad-T450s.redhat.com (ovpn-12-196.pek2.redhat.com
	[10.72.12.196])
	by smtp.corp.redhat.com (Postfix) with ESMTP id 16E7E60C45;
	Mon, 10 Dec 2018 09:45:05 +0000 (UTC)
From: Jason Wang <jasowang@redhat.com>
To: mst@redhat.com, jasowang@redhat.com, kvm@vger.kernel.org,
	virtualization@lists.linux-foundation.org, netdev@vger.kernel.org,
	linux-kernel@vger.kernel.org
Subject: [PATCH net 2/4] vhost_net: rework on the lock ordering for busy
	polling
Date: Mon, 10 Dec 2018 17:44:52 +0800
Message-Id: <20181210094454.21144-3-jasowang@redhat.com>
In-Reply-To: <20181210094454.21144-1-jasowang@redhat.com>
References: <20181210094454.21144-1-jasowang@redhat.com>
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.12
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.29]);
	Mon, 10 Dec 2018 09:45:10 +0000 (UTC)
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	smtp1.linux-foundation.org
X-BeenThere: virtualization@lists.linux-foundation.org
X-Mailman-Version: 2.1.12
Precedence: list
List-Id: Linux virtualization <virtualization.lists.linux-foundation.org>
List-Unsubscribe: <https://lists.linuxfoundation.org/mailman/options/virtualization>,
	<mailto:virtualization-request@lists.linux-foundation.org?subject=unsubscribe>
List-Archive: <http://lists.linuxfoundation.org/pipermail/virtualization/>
List-Post: <mailto:virtualization@lists.linux-foundation.org>
List-Help: <mailto:virtualization-request@lists.linux-foundation.org?subject=help>
List-Subscribe: <https://lists.linuxfoundation.org/mailman/listinfo/virtualization>,
	<mailto:virtualization-request@lists.linux-foundation.org?subject=subscribe>
MIME-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Sender: virtualization-bounces@lists.linux-foundation.org
Errors-To: virtualization-bounces@lists.linux-foundation.org

When we try to do rx busy polling in tx path in commit 441abde4cd84
("net: vhost: add rx busy polling in tx path"), we lock rx vq mutex
after tx vq mutex is held. This may lead deadlock so we try to lock vq
one by one in commit 78139c94dc8c ("net: vhost: lock the vqs one by
one"). With this commit, we avoid the deadlock with the assumption
that handle_rx() and handle_tx() run in a same process. But this
commit remove the protection for IOTLB updating which requires the
mutex of each vq to be held.

To solve this issue, the first step is to have a exact same lock
ordering for vhost_net. This is done through:

- For handle_rx(), if busy polling is enabled, lock tx vq immediately.
- For handle_tx(), always lock rx vq before tx vq, and unlock it if
  busy polling is not enabled.
- Remove the tricky locking codes in busy polling.

With this, we can have a exact same lock ordering for vhost_net, this
allows us to safely revert commit 78139c94dc8c ("net: vhost: lock the
vqs one by one") in next patch.

The patch will add two more atomic operations on the tx path during
each round of handle_tx(). 1 byte TCP_RR does not notice such
overhead.

Fixes: commit 78139c94dc8c ("net: vhost: lock the vqs one by one")
Cc: Tonghao Zhang <xiangxia.m.yue@gmail.com>
Signed-off-by: Jason Wang <jasowang@redhat.com>
---
 drivers/vhost/net.c | 18 +++++++++++++++---
 1 file changed, 15 insertions(+), 3 deletions(-)

diff --git a/drivers/vhost/net.c b/drivers/vhost/net.c
index ab11b2bee273..5f272ab4d5b4 100644
--- a/drivers/vhost/net.c
+++ b/drivers/vhost/net.c
@@ -513,7 +513,6 @@ static void vhost_net_busy_poll(struct vhost_net *net,
 	struct socket *sock;
 	struct vhost_virtqueue *vq = poll_rx ? tvq : rvq;
 
-	mutex_lock_nested(&vq->mutex, poll_rx ? VHOST_NET_VQ_TX: VHOST_NET_VQ_RX);
 	vhost_disable_notify(&net->dev, vq);
 	sock = rvq->private_data;
 
@@ -543,8 +542,6 @@ static void vhost_net_busy_poll(struct vhost_net *net,
 		vhost_net_busy_poll_try_queue(net, vq);
 	else if (!poll_rx) /* On tx here, sock has no rx data. */
 		vhost_enable_notify(&net->dev, rvq);
-
-	mutex_unlock(&vq->mutex);
 }
 
 static int vhost_net_tx_get_vq_desc(struct vhost_net *net,
@@ -913,10 +910,16 @@ static void handle_tx_zerocopy(struct vhost_net *net, struct socket *sock)
 static void handle_tx(struct vhost_net *net)
 {
 	struct vhost_net_virtqueue *nvq = &net->vqs[VHOST_NET_VQ_TX];
+	struct vhost_net_virtqueue *nvq_rx = &net->vqs[VHOST_NET_VQ_RX];
 	struct vhost_virtqueue *vq = &nvq->vq;
+	struct vhost_virtqueue *vq_rx = &nvq_rx->vq;
 	struct socket *sock;
 
+	mutex_lock_nested(&vq_rx->mutex, VHOST_NET_VQ_RX);
 	mutex_lock_nested(&vq->mutex, VHOST_NET_VQ_TX);
+	if (!vq->busyloop_timeout)
+		mutex_unlock(&vq_rx->mutex);
+
 	sock = vq->private_data;
 	if (!sock)
 		goto out;
@@ -933,6 +936,8 @@ static void handle_tx(struct vhost_net *net)
 		handle_tx_copy(net, sock);
 
 out:
+	if (vq->busyloop_timeout)
+		mutex_unlock(&vq_rx->mutex);
 	mutex_unlock(&vq->mutex);
 }
 
@@ -1060,7 +1065,9 @@ static int get_rx_bufs(struct vhost_virtqueue *vq,
 static void handle_rx(struct vhost_net *net)
 {
 	struct vhost_net_virtqueue *nvq = &net->vqs[VHOST_NET_VQ_RX];
+	struct vhost_net_virtqueue *nvq_tx = &net->vqs[VHOST_NET_VQ_TX];
 	struct vhost_virtqueue *vq = &nvq->vq;
+	struct vhost_virtqueue *vq_tx = &nvq_tx->vq;
 	unsigned uninitialized_var(in), log;
 	struct vhost_log *vq_log;
 	struct msghdr msg = {
@@ -1086,6 +1093,9 @@ static void handle_rx(struct vhost_net *net)
 	int recv_pkts = 0;
 
 	mutex_lock_nested(&vq->mutex, VHOST_NET_VQ_RX);
+	if (vq->busyloop_timeout)
+		mutex_lock_nested(&vq_tx->mutex, VHOST_NET_VQ_TX);
+
 	sock = vq->private_data;
 	if (!sock)
 		goto out;
@@ -1200,6 +1210,8 @@ static void handle_rx(struct vhost_net *net)
 out:
 	vhost_net_signal_used(nvq);
 	mutex_unlock(&vq->mutex);
+	if (vq->busyloop_timeout)
+		mutex_unlock(&vq_tx->mutex);
 }
 
 static void handle_tx_kick(struct vhost_work *work)
-- 
2.17.1

_______________________________________________
Virtualization mailing list
Virtualization@lists.linux-foundation.org
https://lists.linuxfoundation.org/mailman/listinfo/virtualization
