Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 09 Dec 2018 18:57:17 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 695EE5800E0;
	Sat,  8 Dec 2018 20:47:04 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by fmsmga004-1.fm.intel.com with ESMTP; 08 Dec 2018 20:47:03 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ALUdOShesY3i4hN6gDN1gVq+hlGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc6/YBSN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRPDI28?=
 =?us-ascii?q?cYUBEukPPehXoIbhulQBrxWxBRK0BO7t0TJImmP60Lcm3+g9CwzKwgotFM8Ovn?=
 =?us-ascii?q?TOq9X1Mb8fX+6wzKnJ0TXDdfNX0irj5ojPaBAhpvKMXbJ3ccrP1EIiEB7KjlCR?=
 =?us-ascii?q?qYz5JTOU1v4Bs3Sc7+p6UuKviG4nqwZvojW0yccsj5PGhoMRylze6Sp5x4M1KM?=
 =?us-ascii?q?S+RUVmYtCkCINduz+GO4ZyWM8uXm9ltDggxrEbupO3YDIGxZUlyhLHdfCKcpaE?=
 =?us-ascii?q?7g7mWeqMITp3mHdodKyjixqs9EWs1PHwWtSx3VtEtCVKj8XDu3UW2BDP6cWIVv?=
 =?us-ascii?q?5w80W71jmTyw/e7/pLLE4qmafbLZMq36Q+mYAJsUvZGy/7gEX2g7GSdkUj4uWo?=
 =?us-ascii?q?9evnbav8ppOGNI97lBv+MqIwlcy7G+g4NRIOX2eD9eS90r3s41H5Ta1UgvEqlq?=
 =?us-ascii?q?TVqo3WKMoFqqKjHgNY0Zov5wy+AjqkyNgYmGMILFNBeBKJlYjpPFTOLej8Dfe+?=
 =?us-ascii?q?hVSsjThqy+nFPrL/GJXNKGbMkLP4cbZ65U9czhQ8zcpE6pJKBbEOPujzVlXytN?=
 =?us-ascii?q?PGFB85NRK7w+L9BNV6zIMeVnqDArWFP6PKrV+I+uUvLvGIZI8UuzbyNeIp5vHz?=
 =?us-ascii?q?jXIinV8dfK+p3YYYaXyiH/RmJVmZbmTogtsbDWgKuQ8+RvTwiFKeST5Te2qyX6?=
 =?us-ascii?q?Uk6zE7Eo2mDJvDSZqqgLCb3Ce7A4dZZmZJCl2XFXfodoOEW+oDaS6II89hlCAE?=
 =?us-ascii?q?WqalS4M7yR6uswr6waJ9LuXI4i0YqY7j1N9t6u3RkhE96yZ4D8ea02GLSWF0mX?=
 =?us-ascii?q?gFRzs33KB5vEx8xU2P0al+g/xEC9NT4+lFXRs9NZ7Z1+Z6Ecz9WhrdfteVT1ar?=
 =?us-ascii?q?Ws+pASoxTtI2wN8CeVx9FM+gjh3Y2yqqArkVl6GEBZAu86Lc2WTxKNh5y3rcyK?=
 =?us-ascii?q?YhiFwmSNNVNWK6nq5/6xTTB4nRnkWajamqc74Q3CrM9GiZy2qOs1pVUApxUaXD?=
 =?us-ascii?q?QHAeaVHardX/5kPeUbCuDa4rPRdGyc6HMqFKcMHmjU1aRPf/P9TTe3++lH2uBR?=
 =?us-ascii?q?mW3L+MbJDle2MG3CrDDkgIlAQT/XWDNQg6HSqhp2PeDDpzFVPgeU/s8O9+qG+l?=
 =?us-ascii?q?QU8w1Q2Fc0ph17+t8B4PmfOcU+8T3q4DuCo5tjp7Bki90MzMB9qAvQVher5cbs?=
 =?us-ascii?q?074Fpc0WLZtgp9PoGvLqx4h14edRh3sF3q1xltFopAls0qpmswzAVuMaKYzE9B?=
 =?us-ascii?q?dzSA0JDsO73XL27y/Ayva6/WwF3ezMya+qAV6PQ8qlXjug6pG1Em83Vm1dlVzn?=
 =?us-ascii?q?Sd6o/LDAoUTZL+TEI3+wJmqLHdZyk3/5nU2mF0Mamorj/C3MokC/Ehyhm+cNZQ?=
 =?us-ascii?q?LqOFGBXpHM0HGsehMuoqm1uubhIaJ+1S8K80P8W7d/qJwqKrPeBgnC64gmRD+o?=
 =?us-ascii?q?xyzkWM9y9kQO7Sw5kF2+2Y3heAVzrkjFahr9r7lpxeaTATHmqw0y7kBIFKa612?=
 =?us-ascii?q?fIYLD3quIsKtytV/gZ7tR2BX9Fq5C1wa38+pfAKYb0bh0g1IyUQXvXunlDOizz?=
 =?us-ascii?q?x1jz4mtLCf0zHJw+j4choIJHRLRGh7gVjwO4e0i80VU1aybwgukhuo/kL6x6ld?=
 =?us-ascii?q?pKRiIGjfW0ZIfy7qL258Vqu8rKaNY8lK6JkwqyVYTPy8YUyGSr76uxYb0yLjE3?=
 =?us-ascii?q?FexTwhbDGqp5P5kgd+iGKcKnZzsXXYddtxxRfZ+NzTW/pR0iAaSyl/jDndHkK8?=
 =?us-ascii?q?MMWx/dWIi5fDtfizV2C7WZ1JcinrzoSAuDGg5WJwAh2/nPGzmtv5Hgg8yiL709?=
 =?us-ascii?q?hqVSPVrBfzeIXr1qK6Mf55cUlsHlPz9816GoRmmIsqmJ4QwWQahomS/XcfkWb8?=
 =?us-ascii?q?K9Jb1bj8bHoMQz4G2NrV4Anj2E1+IXOF3YP5VnOBwsR/Y9m2eH8Z2iU478pSEq?=
 =?us-ascii?q?eb8KREnTdpolq/tQ/RYuJynjYHxfsu9X4VmecJuAU2wyWZA7ASG1RYPCP2mxSJ?=
 =?us-ascii?q?6dC+sLtYZGK1fbes00p+mMirDKuerQFERHb5ZpAiEDd17sV+M1LDymf/64/6d9?=
 =?us-ascii?q?nLcdIcqAeUnAzegOhPJ5I8jf4KhSthOWLgsnwp0e87jRpy3Z6kuIiLMXli/KW8?=
 =?us-ascii?q?AhRALD36e9sT+i3xjaZZhsuWw4evHpB7FjQKRpToS++oECkJtfTmLAuOFDw8qn?=
 =?us-ascii?q?GGGbvQBwOf6UFmr27RHJCvLX2YOH4ZzdB6ThmHOENfmBwUXCk9npMhDQ+l3svh?=
 =?us-ascii?q?cENk5jwL4l74twBByuZpNxn5T2feqx2kajYySJiDMhVW6htO6FvSMcyb9uhzBT?=
 =?us-ascii?q?1X/oW9rAyRLWyWfwZIAnsMWkOaHFDvJKWu6cPD8+iFBeq+Mv3Obq+VqeFFU/eI?=
 =?us-ascii?q?xJSv0pZp/jqWN8WPOGViAOM/2kZZQX95HMHZkS0VSyMLjyLNc9KbpBCk9yx3qc?=
 =?us-ascii?q?C/7e3rWB/16ouJEbdSKtJv+xa5gaqYM+6QhSB5KStX158WxH/IzqQf00AWiy10?=
 =?us-ascii?q?azatFrEAvzbXTK3Mgq9XEwIbayRrOctI8a083wpNOc3ait/v1b54lPk1C1hbWl?=
 =?us-ascii?q?z7h8GpftcHI2W8NFPBGUaKO66KJTzNw8Hrf6y8Tadcg/lTtx21oTybCVPsPiyf?=
 =?us-ascii?q?lzn1UBCiKftDjDyAMxxEpo68cgxhCWziTN/9bh27Mdl3jSA5wLEuh3PKM3IcPi?=
 =?us-ascii?q?Z4c09XsrKQ6iZYiO1lG2Nd9nplMfWEmyGB4unEK5YWtOFnDThum+1G4HQ11b1V?=
 =?us-ascii?q?4TpARPx0nivSs9Fvr0unkumJ1jpoTh5OpixXi4KMuEVoIb/Z+YVYWXbY4BIN6n?=
 =?us-ascii?q?2dChQQqNtjD93vuqZQxcDOlaLzMjhC9d3U8NAYB8jVLsKHLXUgPQDoGD7SEAsK?=
 =?us-ascii?q?UzqrOXvDiExalfHBvkGS+747oZ/okYFGcbZWUk59NO4eC0ljGtFKdJFsVz4ig7?=
 =?us-ascii?q?yGiM8F43yzhALMX8gcsp2RBdyIBvC6BDOYkaNVLycP27T7LYMNftn33k1+cEg8?=
 =?us-ascii?q?gIPQHEnQWs5lrShobwtyq0JIpistBlYv0l7oP1v+qEQYEuS5y1tv0lNz?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAABfnQxch0O0hNFjGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGBMII7J4wTjA6CDRSJfY1AFIFiDwEBGBMBgUuGEiI?=
 =?us-ascii?q?0CQ0BAwEBAQEBAQIBEwEBAQoLCQgpIwyCNiQBgmIBAgMBAiQTBgEbHQEDAgkBA?=
 =?us-ascii?q?QUFGAklAwwFDxEBBQEiEwWDHIFpAQMVAQSYRjyMCRYFAReCdwWEMAoZJw1dgTc?=
 =?us-ascii?q?CBhKKc4EcgVc/gRABgxKERoNwgiYCiS+BeoQUfVGEaYo7RgcCgiEEiz6DYSMKg?=
 =?us-ascii?q?VIjhHSCc4dXmQkGAgkHDyGBJYIOTSODPIIbDBeDSop0HzKBBQEBIYseBIJJAQE?=
X-IPAS-Result: =?us-ascii?q?A0ABAABfnQxch0O0hNFjGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGBMII7J4wTjA6CDRSJfY1AFIFiDwEBGBMBgUuGEiI0CQ0BAwEBAQEBA?=
 =?us-ascii?q?QIBEwEBAQoLCQgpIwyCNiQBgmIBAgMBAiQTBgEbHQEDAgkBAQUFGAklAwwFDxE?=
 =?us-ascii?q?BBQEiEwWDHIFpAQMVAQSYRjyMCRYFAReCdwWEMAoZJw1dgTcCBhKKc4EcgVc/g?=
 =?us-ascii?q?RABgxKERoNwgiYCiS+BeoQUfVGEaYo7RgcCgiEEiz6DYSMKgVIjhHSCc4dXmQk?=
 =?us-ascii?q?GAgkHDyGBJYIOTSODPIIbDBeDSop0HzKBBQEBIYseBIJJAQE?=
X-IronPort-AV: E=Sophos;i="5.56,333,1539673200"; 
   d="scan'208";a="43313082"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 08 Dec 2018 20:47:01 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726086AbeLIEn5 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sat, 8 Dec 2018 23:43:57 -0500
Received: from mail-pf1-f195.google.com ([209.85.210.195]:36559 "EHLO
        mail-pf1-f195.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726057AbeLIEn5 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sat, 8 Dec 2018 23:43:57 -0500
Received: by mail-pf1-f195.google.com with SMTP id b85so3798395pfc.3;
        Sat, 08 Dec 2018 20:43:56 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=4l81ngqXSsjUYp1RLzoGA1db5r9aTVc0Yb/XDJyvLes=;
        b=UT9Y3q7YiL6s7da7TbO9aM3hVTL88UCS3A6JmD5Zk4Tj3Z/wKpT9nWJqc4kACSgPsM
         I7f1C81CXzcAHewSmkNb6acMzmddOXoHmrKCf4DjRZvPtSbd7rfhavBEz2+LhNTz0/pQ
         gMAA65Biz1H4+0EKHPk9AD4cI4OIAoljlGfbyWgU+YM65uLL5gMHImXgRiO41yYVhu2V
         sYQxF3bx5bEjqOZb7+g47rjVJNR1reciqgP9AB8h6TTM0lDBs3Hw8buPpwxCKVlcIPOp
         H40j1BdDIsbxFnW6zeNJhH2z37e0x8u67ncOoGEwkyARIk9bakBPu/Np2xK5xBxztAMt
         jBlQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:message-id:references
         :mime-version:content-disposition:in-reply-to:user-agent;
        bh=4l81ngqXSsjUYp1RLzoGA1db5r9aTVc0Yb/XDJyvLes=;
        b=LtM3yyiKnp0pDdAZgVzcNQl8yZZVtTy9wmy0SasPN/SXWM3xXwi3dz9Fgd1VKHaioM
         lWwSdKdvxHxPMCgE1HjgF0l2VdasPi5FFY8gommqLV888g6IlTg0VdAn8j/RxmRj7qzb
         DQTl78Ktex/YCWOek0xLh3UWZGTVdJbdHuOdcIseL46mAk/DroCqqdRMLOQPATjW2te2
         kCXym+gdwezczUje2zSNyn9xSKB5D48ivpBly9gZH77jbEUmYkYs+e6PE4Ah08zMGF0h
         2MFbwbFUZkk4P/p1/GoEcLb1bC5yokvAvk+x7x3mN3/yB2DVWntg0Uai/L3Pk+fW6vqB
         SQ1w==
X-Gm-Message-State: AA+aEWa/TKO631N+8BAZ/9wQ8tzDOPwdTTghi04CkBvkg1XoWdewVBhf
        ZwCxy2oB3gmaC++ZPwP6MQI=
X-Google-Smtp-Source: AFSGD/VRry4um3ggt9RSwnXmdsv6AlU3HIdSODeHQqKnZYt7ZaDdthpaKnovoZhsDKHq8VMTziO/uQ==
X-Received: by 2002:aa7:87ce:: with SMTP id i14mr7862279pfo.20.1544330635678;
        Sat, 08 Dec 2018 20:43:55 -0800 (PST)
Received: from dtor-ws ([2620:15c:202:201:3adc:b08c:7acc:b325])
        by smtp.gmail.com with ESMTPSA id w5sm9806371pfn.89.2018.12.08.20.43.54
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Sat, 08 Dec 2018 20:43:54 -0800 (PST)
Date: Sat, 8 Dec 2018 20:43:52 -0800
From: Dmitry Torokhov <dmitry.torokhov@gmail.com>
To: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
Cc: Henrik Rydberg <rydberg@bitmath.org>,
        linux-rpi-kernel@lists.infradead.org, stefan.wahren@i2se.com,
        eric@anholt.net, agraf@suse.de,
        Corentin Labbe <clabbe.montjoie@gmail.com>,
        Rob Herring <robh@kernel.org>,
        Hans de Goede <hdegoede@redhat.com>,
        Masanari Iida <standby24x7@gmail.com>,
        Zhu Yi <yi.zhu5@cn.bosch.com>,
        Eugen Hristev <eugen.hristev@microchip.com>,
        Jonathan Cameron <Jonathan.Cameron@huawei.com>,
        Hans-Christian Noren Egtvedt <egtvedt@samfundet.no>,
        Heiko Schocher <hs@denx.de>, linux-kernel@vger.kernel.org,
        linux-input@vger.kernel.org
Subject: Re: [PATCH RFC 1/2] input: add official Raspberry Pi's 7"
 touchscreen driver
Message-ID: <20181209044352.GE211094@dtor-ws>
References: <20181205220902.27682-1-nsaenzjulienne@suse.de>
 <20181205220902.27682-2-nsaenzjulienne@suse.de>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181205220902.27682-2-nsaenzjulienne@suse.de>
User-Agent: Mutt/1.10.1 (2018-07-13)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi Nicolas,

On Wed, Dec 05, 2018 at 11:09:03PM +0100, Nicolas Saenz Julienne wrote:
> Adds support to Raspberry Pi's 7" touchscreen device. Instead of using
> a conventional bus all information is copied into a memory mapped area
> by RPi's VC4 firmware.
> 
> Based on the driver found in RPi's downstream kernel repository.
> 
> Signed-off-by: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
> ---
>  drivers/input/touchscreen/Kconfig          |  12 +
>  drivers/input/touchscreen/Makefile         |   1 +
>  drivers/input/touchscreen/raspberrypi-ts.c | 252 +++++++++++++++++++++
>  3 files changed, 265 insertions(+)
>  create mode 100644 drivers/input/touchscreen/raspberrypi-ts.c
> 
> diff --git a/drivers/input/touchscreen/Kconfig b/drivers/input/touchscreen/Kconfig
> index 2a80675cfd94..8d0fcb3dc8a8 100644
> --- a/drivers/input/touchscreen/Kconfig
> +++ b/drivers/input/touchscreen/Kconfig
> @@ -696,6 +696,18 @@ config TOUCHSCREEN_EDT_FT5X06
>  	  To compile this driver as a module, choose M here: the
>  	  module will be called edt-ft5x06.
>  
> +config TOUCHSCREEN_RASPBERRYPI_TS
> +	tristate "Raspberry Pi's firmware base touch screen support"
> +	depends on OF

I think "depends on ASPBERRYPI_FIRMWARE || COMPILE_TEST" is more
precise dependency.

> +	help
> +	  Say Y here if you have the official Raspberry Pi 7' touchscren
> +	  connected on your system.
> +
> +	  If unsure, say N.
> +
> +	  To compile this driver as a module, choose M here: the
> +	  module will be called raspberrypi-ts.
> +
>  config TOUCHSCREEN_MIGOR
>  	tristate "Renesas MIGO-R touchscreen"
>  	depends on (SH_MIGOR || COMPILE_TEST) && I2C
> diff --git a/drivers/input/touchscreen/Makefile b/drivers/input/touchscreen/Makefile
> index 5911a4190cd2..3eccb1925e89 100644
> --- a/drivers/input/touchscreen/Makefile
> +++ b/drivers/input/touchscreen/Makefile
> @@ -109,3 +109,4 @@ obj-$(CONFIG_TOUCHSCREEN_ZET6223)	+= zet6223.o
>  obj-$(CONFIG_TOUCHSCREEN_ZFORCE)	+= zforce_ts.o
>  obj-$(CONFIG_TOUCHSCREEN_COLIBRI_VF50)	+= colibri-vf50-ts.o
>  obj-$(CONFIG_TOUCHSCREEN_ROHM_BU21023)	+= rohm_bu21023.o
> +obj-$(CONFIG_TOUCHSCREEN_RASPBERRYPI_TS)	+= raspberrypi-ts.o
> diff --git a/drivers/input/touchscreen/raspberrypi-ts.c b/drivers/input/touchscreen/raspberrypi-ts.c
> new file mode 100644
> index 000000000000..9d29411a5674
> --- /dev/null
> +++ b/drivers/input/touchscreen/raspberrypi-ts.c
> @@ -0,0 +1,252 @@
> +/*
> + * Raspberry Pi 3 firmware based touchscreen driver
> + *
> + * Copyright (C) 2015, 2017 Raspberry Pi
> + * Copyright (C) 2018 Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
> + *
> + * This program is free software; you can redistribute it and/or modify
> + * it under the terms of the GNU General Public License version 2 as
> + * published by the Free Software Foundation.

Please use SPDX tag for the license.

> + */
> +
> +#include <linux/io.h>
> +#include <linux/slab.h>
> +#include <linux/module.h>
> +#include <linux/bitops.h>
> +#include <linux/dma-mapping.h>
> +#include <linux/platform_device.h>
> +#include <linux/input.h>
> +#include <linux/input/mt.h>
> +#include <linux/input/touchscreen.h>
> +#include <soc/bcm2835/raspberrypi-firmware.h>
> +
> +#define RPI_TS_DEFAULT_WIDTH	800
> +#define RPI_TS_DEFAULT_HEIGHT	480
> +
> +#define RPI_TS_MAX_SUPPORTED_POINTS	10
> +
> +#define RPI_TS_FTS_TOUCH_DOWN		0
> +#define RPI_TS_FTS_TOUCH_CONTACT	2
> +
> +struct rpi_ts {
> +	struct input_dev *input;

Since the only way is to poll, please use polled input device instead of
standard one. It will take care of scheduling polling, stopping it when
needed, etc.

> +	struct touchscreen_properties prop;
> +
> +	void __iomem *ts_base;
> +	dma_addr_t bus_addr;
> +
> +	struct delayed_work work;
> +	int known_ids;
> +};
> +
> +struct rpi_ts_regs {
> +	uint8_t device_mode;
> +	uint8_t gesture_id;
> +	uint8_t num_points;

Simply u8 in kernel.

> +	struct rpi_ts_touch {
> +		uint8_t xh;
> +		uint8_t xl;
> +		uint8_t yh;
> +		uint8_t yl;
> +		uint8_t pressure; /* Not supported */
> +		uint8_t area;     /* Not supported */
> +	} point[RPI_TS_MAX_SUPPORTED_POINTS];
> +};
> +
> +/*
> + * This process polls the memory based register copy of the touch screen chip
> + * registers using the number of points register to know whether the copy has
> + * been updated (we write 99 to the memory copy, the GPU will write between 0 -
> + * 10 points)
> + */
> +static void rpi_ts_work(struct work_struct *work)
> +{
> +	struct rpi_ts *ts = container_of(work, struct rpi_ts, work.work);
> +	struct input_dev *input = ts->input;
> +	struct rpi_ts_regs regs;
> +	int modified_ids = 0;
> +	int released_ids;
> +	int event_type;
> +	int touchid;
> +	int x, y;
> +	int i;
> +
> +	memcpy_fromio(&regs, ts->ts_base, sizeof(struct rpi_ts_regs));
> +	iowrite8(99, ts->ts_base + offsetof(struct rpi_ts_regs, num_points));
> +
> +	if (regs.num_points == 99 ||
> +	    (regs.num_points == 0 && ts->known_ids == 0))
> +	    goto out;
> +
> +	for (i = 0; i < regs.num_points; i++) {
> +		x = (((int)regs.point[i].xh & 0xf) << 8) + regs.point[i].xl;
> +		y = (((int)regs.point[i].yh & 0xf) << 8) + regs.point[i].yl;
> +		touchid = (regs.point[i].yh >> 4) & 0xf;
> +		event_type = (regs.point[i].xh >> 6) & 0x03;
> +
> +		modified_ids |= BIT(touchid);
> +
> +		if (event_type == RPI_TS_FTS_TOUCH_DOWN ||
> +		    event_type == RPI_TS_FTS_TOUCH_CONTACT) {
> +			input_mt_slot(input, touchid);
> +			input_mt_report_slot_state(input, MT_TOOL_FINGER, 1);
> +			touchscreen_report_pos(input, &ts->prop, x, y, true);
> +		}
> +	}
> +
> +	released_ids = ts->known_ids & ~modified_ids;
> +	for (i = 0; released_ids && i < RPI_TS_MAX_SUPPORTED_POINTS; i++) {

If you make released_ids long instead of int you can use
for_each_set_bit() here.

> +		if (released_ids & BIT(i)) {
> +			input_mt_slot(input, i);
> +			input_mt_report_slot_state(input, MT_TOOL_FINGER, 0);
> +			modified_ids &= ~(BIT(i));
> +		}
> +	}
> +	ts->known_ids = modified_ids;
> +
> +	input_mt_report_pointer_emulation(ts->input, true);

input_mt_sync_frame() and then you would not need to call
input_mt_report_pointer_emulation() if you passed right flags to
input_mt_init_slots().

> +	input_sync(ts->input);
> +
> +out:
> +	schedule_delayed_work(&ts->work, msecs_to_jiffies(17)); /* 60 fps */
> +}
> +
> +static int rpi_ts_open(struct input_dev *dev)
> +{
> +	struct rpi_ts *ts = input_get_drvdata(dev);
> +
> +	schedule_delayed_work(&ts->work, 0);
> +
> +	return 0;
> +}
> +
> +static void rpi_ts_close(struct input_dev *dev)
> +{
> +	struct rpi_ts *ts = input_get_drvdata(dev);
> +
> +	cancel_delayed_work_sync(&ts->work);
> +}

Not needed if using polled input device.

> +
> +static int rpi_ts_probe(struct platform_device *pdev)
> +{
> +	struct device *dev = &pdev->dev;
> +	struct device_node *np = dev->of_node;
> +	struct device_node *fw_node;
> +	struct input_dev *input;
> +	struct rpi_firmware *fw;
> +	struct rpi_ts *ts;
> +	u32 touchbuf;
> +	int err = 0;
> +
> +	fw_node = of_get_parent(np);
> +	if (!fw_node) {
> +		dev_err(dev, "Missing firmware node\n");
> +		return -ENOENT;
> +	}
> +
> +	fw = rpi_firmware_get(fw_node);

You are leaking node here I believe. Stick of_node_put() after
rpi_firmware_get() and before "if".

> +	if (!fw)
> +		return -EPROBE_DEFER;
> +
> +	ts = devm_kzalloc(dev, sizeof(struct rpi_ts), GFP_KERNEL);

sizeof(*ts)

> +	if (!ts) {
> +		dev_err(dev, "Failed to allocate memory\n");
> +		return -ENOMEM;
> +	}
> +
> +	input = input_allocate_device();

devm.

> +	if (!input) {
> +		dev_err(dev, "Failed to allocate input device\n");
> +		return -ENOMEM;
> +	}
> +	ts->input = input;
> +
> +	ts->ts_base = dma_zalloc_coherent(dev, PAGE_SIZE, &ts->bus_addr,
> +					  GFP_KERNEL);
> +	if (!ts->ts_base) {
> +		dev_err(dev, "failed to dma_alloc_coherent\n");
> +		err = -ENOMEM;
> +		goto undegister_input_device;
> +	}
> +
> +	touchbuf = (u32)ts->bus_addr;
> +	err = rpi_firmware_property(fw, RPI_FIRMWARE_FRAMEBUFFER_SET_TOUCHBUF,
> +				    &touchbuf, sizeof(touchbuf));
> +
> +	if (err || touchbuf != 0) {
> +		dev_warn(dev, "Failed to set touchbuf, trying to get err:%x\n",
> +			 err);
> +		goto clean_dma_buf;
> +	}
> +
> +	INIT_DELAYED_WORK(&ts->work, rpi_ts_work);
> +	platform_set_drvdata(pdev, ts);
> +
> +	input->name = "raspberrypi-ts";
> +	input->id.bustype = BUS_HOST;
> +	input->open = rpi_ts_open;
> +	input->close = rpi_ts_close;
> +	input->dev.parent = &pdev->dev;
> +
> +	__set_bit(EV_KEY, input->evbit);
> +	__set_bit(EV_SYN, input->evbit);
> +	__set_bit(EV_ABS, input->evbit);
> +
> +	input_set_abs_params(input, ABS_MT_POSITION_X, 0,
> +			     RPI_TS_DEFAULT_WIDTH, 0, 0);
> +	input_set_abs_params(input, ABS_MT_POSITION_Y, 0,
> +			     RPI_TS_DEFAULT_HEIGHT, 0, 0);
> +	touchscreen_parse_properties(input, true, &ts->prop);
> +
> +	input_mt_init_slots(input, RPI_TS_MAX_SUPPORTED_POINTS,
> +			    INPUT_MT_DIRECT);
> +
> +	input_set_drvdata(input, ts);
> +
> +	err = input_register_device(input);
> +	if (err) {
> +		dev_err(dev, "could not register input device, %d\n",
> +			err);
> +		goto clean_dma_buf;
> +	}
> +	return 0;
> +
> +clean_dma_buf:
> +	dma_free_coherent(dev, PAGE_SIZE, ts->ts_base, ts->bus_addr);

I wild make freeing this area a devm custom action
(devm_add_action_or_reset). Then you can get rid of rpi_ts_remove().

> +undegister_input_device:
> +	input_unregister_device(ts->input);
> +
> +	return err;
> +}
> +
> +static int rpi_ts_remove(struct platform_device *pdev)
> +{
> +	struct rpi_ts *ts = (struct rpi_ts *)platform_get_drvdata(pdev);
> +
> +	input_unregister_device(ts->input);
> +	dma_free_coherent(&pdev->dev, PAGE_SIZE, ts->ts_base, ts->bus_addr);
> +	return 0;
> +}
> +
> +static const struct of_device_id rpi_ts_match[] = {
> +	{ .compatible = "raspberrypi,firmware-ts", },
> +	{},
> +};
> +MODULE_DEVICE_TABLE(of, rpi_ts_match);
> +
> +static struct platform_driver rpi_ts_driver = {
> +	.driver = {
> +		.name   = "raspberrypi-ts",
> +		.owner  = THIS_MODULE,

I am pretty sure we no longer need to set owner explicitly.

> +		.of_match_table = rpi_ts_match,
> +	},
> +	.probe          = rpi_ts_probe,
> +	.remove         = rpi_ts_remove,
> +};
> +
> +module_platform_driver(rpi_ts_driver);
> +
> +MODULE_AUTHOR("Gordon Hollingworth");
> +MODULE_AUTHOR("Nicolas Saenz Julienne <nsaenzjulienne@suse.de>");
> +MODULE_DESCRIPTION("Raspberry Pi 3 firmware based touchscreen driver");
> +MODULE_LICENSE("GPL");

This should be "GPL v2" to math the license notice at the top of the
file.

Thanks.

-- 
Dmitry
