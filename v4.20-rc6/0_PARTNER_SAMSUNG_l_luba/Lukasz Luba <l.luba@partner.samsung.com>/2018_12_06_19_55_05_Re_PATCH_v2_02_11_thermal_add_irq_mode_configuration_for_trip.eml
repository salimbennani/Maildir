Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:52:44 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id AF058580375;
	Thu,  6 Dec 2018 11:55:19 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga006-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 11:55:19 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Ae9kgRxDaSmxl+skD3eFaUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP79psSwAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95MWSJBHI2y?=
 =?us-ascii?q?bIUBAOQOMulaoIfyu1UOrQCmBQSuH+7v1jxFi2Xq0aEm3eksEwfL1xEgEdIUt3?=
 =?us-ascii?q?TUqc34OqEPUeC21qbI1jTCZO5Q1zfg84fHaA0qrPaIXb5qdcrR1FIgGBneg1WI?=
 =?us-ascii?q?s4PlJS+V1uITvGiB9eZgTvigi2s8qwFspDivyd0ghZXOhoIQ013J8zhyzoUtJd?=
 =?us-ascii?q?CgVkJ3fdqpHIFNuyyUKYd6WN4uTmJ0tCogy7ALu4a3cDUWxJkm3RLTduKLf5SS?=
 =?us-ascii?q?7h/jSeqdOyl0iG5jdbminRi961Kgxff5VsSs0FZFsC5Fkt7Uu3AT2Bzc9NKHRu?=
 =?us-ascii?q?F+/ki/wzaP0R7c6uVeLUAzj6rbJIYtwr82lpUNrUTOBjH6lFnygaOMa0kp9Pak?=
 =?us-ascii?q?5/76brjlupOQLY55hwPmPqQrgMO/AOA4MgYUX2ic/OSxzLnj/Uz/QLVXgfw6i6?=
 =?us-ascii?q?rZv47AJcQduKG5BxZZ0oEt6ha5ETimys8VnWcILF1bYhKLlYvpNE/UIPD+E/i/?=
 =?us-ascii?q?h06gkDBxx/DJJrHhGInCLmDfkLf9erZw80pcyAswzd9B/Z5VBawBLen3Wk/wst?=
 =?us-ascii?q?zYExA4Pxa1w+bhFNVyyIceVXiTDa+eNaPYqUWI6f43I+mQeI8Vvy7wK/g/6P7v?=
 =?us-ascii?q?kX82g1gdcbOp3ZsKcn+4GPtmLl6dYXrthNcBDGgLshA/TOzslF2NTzpTa2yuUK?=
 =?us-ascii?q?I74zExEJimApvbRoCxnLyB2z+2Hp9RZm9YEFyMEnDod4OCW/cLcy+SJs5hkjoZ?=
 =?us-ascii?q?VbmuUYMh1BeutBPkxLpjNObb5ioYtZf73thv++LTjQ0y9SBzD8mFyW6NVGF0nm?=
 =?us-ascii?q?QLRzMsxqBwu059x0yH0ah5hfxYCNNS6+lIUgc8KZ7T0eh6B8ruVQLGe9eDUEym?=
 =?us-ascii?q?Tcm+ATEtUtIxxMcDY0VnFNWklBzD2yuqDKUTl7yEH5E09qPc337sJ8dy0XrG1a?=
 =?us-ascii?q?8hj0U4TctLL2Gpmql/9w3LDY7Tj0qZj7qqdbgb3CPV6WiM13SOs19CXA5wS6rF?=
 =?us-ascii?q?W2sfaVXQrdj+4kPCTLquCbA8PwtFyM6CLLZKa9LzgVVHQvfjJMrRY2arl2isAh?=
 =?us-ascii?q?aIw6uGbJD2dGUFwCXdFE8EnhgO8nmcKwgxGD2to2LEAzxoDlLgfUXs/PJ6qHO6?=
 =?us-ascii?q?SE800g6LY1dg17qz5h4am/icR+kP0bIDvScrsy90E0ql39LKF9qAoBJsfLldYd?=
 =?us-ascii?q?M451dHyWLZtgxnMpy8NaxigUQecwB2v0Po2BV6EYFAkcksrHM3wwt+M6OY0FVd?=
 =?us-ascii?q?dzyG2ZD8IKHYKm73/Bq3ca7Zxkne0MqK+qcI8Pk3sVHjsx+mF0U883RrycJa02?=
 =?us-ascii?q?aB6ZrQCgoSUpXxUlgs+hh+prHaZDQ95ozO2X1tN6m0riHN29YzCOQ5zRages9V?=
 =?us-ascii?q?MLmYGw/qD80aG8+uJfQqmli0dB4LIPpe9a80P8y8cfuG17WmPOJhnDKgkGRG75?=
 =?us-ascii?q?px0kOK9ypgVOHI24wJzO2f3guCTz38lkuustjrmYBYYjEfBnC/ySn4C4FLfK19?=
 =?us-ascii?q?YIELBX2oI8Kp3NV+hofhVGJC+16nGlwJxtWpeR2Ub1Hm2Q1Q1EIXoWGomCeizj?=
 =?us-ascii?q?x0lS0pobSb3CDU3+vicx8HMHZRRGZ+lVfsPZS0j9cCUUmobggljhuk6Vzhx6hG?=
 =?us-ascii?q?oqRyNG3TQUZOfyjrIGBuSKqwtryeY8FR7JMkqzlYUOO5YVqCUL7yvwMa0z//H2?=
 =?us-ascii?q?tZ3D07dSuluo/6nxx5j2KRNm1zo2DaecFzxBff4sLTRfhK0zoCRSl4jyTXB1em?=
 =?us-ascii?q?M9mo+9WUi4nMsuSkW229UZ1TdDHhzZmcuyuj+W1qHRq/kuizm9L9Fgg2yy3719?=
 =?us-ascii?q?hsVSjTqBb8Y4/r17m1MO59f0loAkP85NR+Go1kjoQwg5QQ02AAhpqJ5XoHjXvz?=
 =?us-ascii?q?MdJD1KL9dnUNRCQHw97I4Af/3k1jIWmEx4b4VnWb38tgaMO2YmIQ2iIh8c9KDL?=
 =?us-ascii?q?2Y46BDnStwulC4tx7eYeBhnjcBzvsj8Hsag+AKuAU31CmcDK4dHVJEPSPyjRSH?=
 =?us-ascii?q?9M6xrL9YZGu0dbiw1Ux+nc2uDb2YowFcXmr5dYkmHSNq8sp/N1fM2mXp6o74YN?=
 =?us-ascii?q?nQcc4TthqMnhfciOhVLYg9l/sQiiphJGL9pmYly+8ggBxq3JG6upWHKmp38KK4?=
 =?us-ascii?q?BB5YKiP6Z8cJ9j7xiqZem96c35qzEZV5BjULQJzoQOqzHz0IsvTnMxuOHCc4qn?=
 =?us-ascii?q?eGArffGQ6f6EF7r3PACZyrNneXJGUHwtVmXhWSOEtfgAUMVjUggpE5DhyqxNDm?=
 =?us-ascii?q?cEph5DAe/Fv4pQVXyu5yKxnzSGTfpBqrajcpTpiQNgFW4xpG50fUN8ye8+1yEz?=
 =?us-ascii?q?tZ/p2nsAyCNGibax5UAmEOX0yOH0rjMaW25dnc7+iYAfKzLvvJYbWTsOxeSu2H?=
 =?us-ascii?q?xZS13ot9+DaMMMqPM2JmD/063EpDQH94F97YmzUJVywYiSbNY9SHqxe7/y19tt?=
 =?us-ascii?q?q//+jzWALz+YuPDKNfMdVx9BC3gqeDNO+QiDx6KTZC0ZMMymHHyKIC3F4JkCxu?=
 =?us-ascii?q?czitEbIdtS/CVq7Qm6lXDwIFZCN3LsdH86U83gxVM87Bltz1zqJ4juIyC1pdT1?=
 =?us-ascii?q?Phh9qmZdYULGC9Ll/HAEeLOa+CJT3KxcH3fKy9RadRjOVSqx2/pzKbH1X/MTSE?=
 =?us-ascii?q?kjnjTwqvPv1UjCGHIBxev5mwcgpsCWjmVt7pdge3P8N3jTIox705nXfKNW8aMT?=
 =?us-ascii?q?hhfEJBtLyQ7SVEgvphH2xN9GZqLe6BmyyB9enXNo4Wsed3AiRzj+9b4G41y71Q?=
 =?us-ascii?q?7CFFQvx6gCrTrt50rFGgnemC0T5nUBtIqjZWi4OHp0RiOaPF9pZeXXbI5g4C7W?=
 =?us-ascii?q?KVC0dCm9wwON3mva8Y8MXO3PbpNTYE4dLd+8Q0Bs7IJcbBO30kZ16hFDPKDQAI?=
 =?us-ascii?q?USSmOEnBiEFH1vKf7HuYqt49sJeo0J4PTKJLEVUvE7YZB15jEdgqJJZsQihikL?=
 =?us-ascii?q?iVlscE6HOy6h7LS4ESupHBS+LXDfLkACiWgKMCZBYSx778a4MJOcmz301kd0k/?=
 =?us-ascii?q?n4nQHUfUdc5CrzcnbQIupkhJtn9kQSl730PjdxPo+Ho7C/G5hFg1hxF4bOBr8y?=
 =?us-ascii?q?3jsHktIV+fgDYzmVIj0fH4iznZJDq3KLq6VKlOAjDosUUrdIjyRh1oawL0lkth?=
 =?us-ascii?q?YmSXD4lNhqdtIDg4wDTXvoFCTLsFFfVJ?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AEAADnfQlch0O0hNFkGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUQYBAQELAYNrJ4N6iBmMDoFgLRSDMYVNjjyBcywTAYdXIjQJDQEDAQE?=
 =?us-ascii?q?BAQEBAgETAQEBCA0JCCkjDII2JAGCYQEBAQECAQECIAQLAQ0BAS8IAQUJAQEIA?=
 =?us-ascii?q?hgCAiYCAgMeJhAGAQwGAgEBAYMcgWoDDQcBBYpfmmBwfDOCdgEBBYR/DYIUCIE?=
 =?us-ascii?q?LiXiBHIFXP4ERJ4JrgleFLoJXh2aBTgOWfC4HAo4YgygeX4kTh0SJDoV6i0qCD?=
 =?us-ascii?q?TMaI4M8ghsMF4NKilRxAYEEAQGKOgEB?=
X-IPAS-Result: =?us-ascii?q?A0AEAADnfQlch0O0hNFkGwEBAQEDAQEBBwMBAQGBUQYBAQE?=
 =?us-ascii?q?LAYNrJ4N6iBmMDoFgLRSDMYVNjjyBcywTAYdXIjQJDQEDAQEBAQEBAgETAQEBC?=
 =?us-ascii?q?A0JCCkjDII2JAGCYQEBAQECAQECIAQLAQ0BAS8IAQUJAQEIAhgCAiYCAgMeJhA?=
 =?us-ascii?q?GAQwGAgEBAYMcgWoDDQcBBYpfmmBwfDOCdgEBBYR/DYIUCIELiXiBHIFXP4ERJ?=
 =?us-ascii?q?4JrgleFLoJXh2aBTgOWfC4HAo4YgygeX4kTh0SJDoV6i0qCDTMaI4M8ghsMF4N?=
 =?us-ascii?q?KilRxAYEEAQGKOgEB?=
X-IronPort-AV: E=Sophos;i="5.56,323,1539673200"; 
   d="scan'208";a="55245284"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 06 Dec 2018 11:55:17 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1725986AbeLFTzO (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 6 Dec 2018 14:55:14 -0500
Received: from mailout2.w1.samsung.com ([210.118.77.12]:38315 "EHLO
        mailout2.w1.samsung.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725945AbeLFTzN (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 6 Dec 2018 14:55:13 -0500
Received: from eucas1p2.samsung.com (unknown [182.198.249.207])
        by mailout2.w1.samsung.com (KnoxPortal) with ESMTP id 20181206195510euoutp023fefd593c11d6c36d87b7903fa39daab~t1oRFqDz81167611676euoutp02f
        for <linux-kernel@vger.kernel.org>; Thu,  6 Dec 2018 19:55:10 +0000 (GMT)
DKIM-Filter: OpenDKIM Filter v2.11.0 mailout2.w1.samsung.com 20181206195510euoutp023fefd593c11d6c36d87b7903fa39daab~t1oRFqDz81167611676euoutp02f
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=samsung.com;
        s=mail20170921; t=1544126110;
        bh=s+vIBKm3zah1KNi6qdZ7micu10JKc38SiTPFQ1YrEBA=;
        h=Subject:From:To:Cc:Date:In-Reply-To:References:From;
        b=g4nfZppKnuI2bD2vZdxbh9TC+6jo83dIQ4k+8CxBiD0Fj3Hi/XJ1RxK+cipCcPt1/
         Gw5BIGsXgq6catlUXt1zTLcJsT3g9wQQm4GPLjLyWrFe8E7kWe1A/OJmuGlY0t+Wa3
         gVExm/6qGXBymHqckj9XmE3RH7Lr/yPIv0wYCdnw=
Received: from eusmges1new.samsung.com (unknown [203.254.199.242]) by
        eucas1p2.samsung.com (KnoxPortal) with ESMTP id
        20181206195509eucas1p241ed156a8d361ac5f7aadbd143a68128~t1oPjO3jX0342703427eucas1p2Y;
        Thu,  6 Dec 2018 19:55:09 +0000 (GMT)
Received: from eucas1p1.samsung.com ( [182.198.249.206]) by
        eusmges1new.samsung.com (EUCPMTA) with SMTP id D8.D9.04441.C9E790C5; Thu,  6
        Dec 2018 19:55:08 +0000 (GMT)
Received: from eusmtrp1.samsung.com (unknown [182.198.249.138]) by
        eucas1p1.samsung.com (KnoxPortal) with ESMTPA id
        20181206195507eucas1p1c47750cb4d12a0876873209f638e9467~t1oN-JYuH3132231322eucas1p1S;
        Thu,  6 Dec 2018 19:55:07 +0000 (GMT)
Received: from eusmgms1.samsung.com (unknown [182.198.249.179]) by
        eusmtrp1.samsung.com (KnoxPortal) with ESMTP id
        20181206195507eusmtrp1df046db5c6b92276aa6b3fec7249b177~t1oNwemEU0729607296eusmtrp1M;
        Thu,  6 Dec 2018 19:55:07 +0000 (GMT)
X-AuditID: cbfec7f2-5c9ff70000001159-42-5c097e9c3af2
Received: from eusmtip2.samsung.com ( [203.254.199.222]) by
        eusmgms1.samsung.com (EUCPMTA) with SMTP id E4.C7.04284.A9E790C5; Thu,  6
        Dec 2018 19:55:06 +0000 (GMT)
Received: from [106.120.51.20] (unknown [106.120.51.20]) by
        eusmtip2.samsung.com (KnoxPortal) with ESMTPA id
        20181206195506eusmtip2f7a152e99efd55c02c25e3d30411e171~t1oM9fu560500705007eusmtip24;
        Thu,  6 Dec 2018 19:55:06 +0000 (GMT)
Subject: Re: [PATCH v2 02/11] thermal: add irq-mode configuration for trip
 point
From: Lukasz Luba <l.luba@partner.samsung.com>
To: Zhang Rui <rui.zhang@intel.com>, devicetree@vger.kernel.org,
        linux-arm-kernel@lists.infradead.org, linux-doc@vger.kernel.org,
        linux-kernel@vger.kernel.org, linux-pm@vger.kernel.org
Cc: edubezval@gmail.com, daniel.lezcano@linaro.org, robh+dt@kernel.org,
        mark.rutland@arm.com, corbet@lwn.net, b.zolnierkie@samsung.com,
        krzk@kernel.org
Message-ID: <3314da31-1b8b-ec19-4aee-38d98aa8adbf@partner.samsung.com>
Date: Thu, 6 Dec 2018 20:55:05 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
        Thunderbird/60.2.1
MIME-Version: 1.0
In-Reply-To: <2ac425fc-7c32-6e2f-7086-c14f85b0bbfd@partner.samsung.com>
Content-Language: en-US
Content-Transfer-Encoding: 8bit
X-Brightmail-Tracker: H4sIAAAAAAAAA02Se0hTYRjG+3Z2zs5Gk8+p7c0uxiqoSCtQOGRIkdSJwMLKSs1cedDI606a
        dqe8NWxEwso5t2qasSxrmplY5CVtRNoy1FaWpXQjE1sjpIicZ5L/Pe/z/j6e94GPJhROMpA+
        kH6I06SrU1WUTNzQMd4VbDwhjV/ZdTWMuXOplmSGHxUhxuSax5jbu0jG/LKXZLq7b0sY29CE
        ulJYKWZ6mowU4zrXjpiqPoeIKXjQLmGG3+uotXK2xlSD2PuGAQlraf4iYm3WsxT7preZYusq
        T7IWXSnJ6uqtiHXZ5m+VxsrWJHGpB3I4zYqIRFmK9tw1KtMckWus6qNOoc5QLZLSgEOhxWEX
        aZGMVuDrCPTu597hJ4Iei54UBheC0Yq34qknj0t+eKlqBFXmj95hBIHl7yfCQ/nhaHjd76a0
        iKYpHAKN1iyP7Y+bEXT/Wu7hCVyOQFtdIfIs5HgD6L574qS0GC+C008KJnUA3gXF725QAuML
        9rLhySukeCOYPusnswisBOewWSToIDhzt5zwBAAel4DxWyUlnB0JN50mJGg/+NpZLxH0XHha
        WuKtxsOzYquXPwZF9kYvEw5tnQ7SU4bAS6G2aYVgr4P+jjaJxwbsA/0jvsIJPnCh4SIh2HIo
        LlQI9BKoL3kuEvQsqK7RS84jlWFaMcO0MoZpZQz/cy8jsRUpuWw+LZnjV6Vzh0N4dRqfnZ4c
        sj8jzYYmftzTv50/GpH7xb5WhGmkminPXSuNV5DqHD4vrRUBTaj85YpjE5Y8SZ13hNNk7NVk
        p3J8K5pDi1VK+dEZg3EKnKw+xB3kuExOM7UV0dLAU8jsjN5xryViaHGgfbssKf9hYZArpFdZ
        KovxHwjvfRd1bzx8dez6/J6ogqETxpMJVYNZ8ZS7zJ5vrW9QjmZuG9z9J2XRpksdBQGNt27s
        3XJWI800vqojrllm9y10HN+zKXHBL0VOzIddkbYXfJlsc8LY2G9H9MGOvlnBeHT+zjAyI04l
        5lPUq5YRGl79D5gas6BtAwAA
X-Brightmail-Tracker: H4sIAAAAAAAAA+NgFnrHIsWRmVeSWpSXmKPExsVy+t/xe7qz6jhjDL59sbDYOGM9q8WTA+2M
        FvM+y1rMP3KO1WL+lWusFufPb2C32PQYyFrYtoTF4vKuOWwWn3uPMFosvX6RyaJ17xF2iycP
        +9gceD3WzFvD6LFz1l12j8V7XjJ5bFrVyeZx59oeNo/NS+o9FvdNZvXo27KK0ePzJrkAzig9
        m6L80pJUhYz84hJbpWhDCyM9Q0sLPSMTSz1DY/NYKyNTJX07m5TUnMyy1CJ9uwS9jK7eZWwF
        8+0q5iy9ztbAeNyki5GTQ0LAROJozyemLkYuDiGBpYwS97adYYdIiElM2rcdyhaW+HOtiw2i
        6DWjxLNHLWwgCWGBIInbN74C2RwcbAJ6EjtWFYKERQT2MEo8Wq0JUs8sMJtR4sOro1AbDjNJ
        7Gu5zAxSxSvgJtH3bhoriM0ioCLRdKIVzBYViJA4+3IdI0SNoMTJmU9YQGxOAXeJeS+mgfUy
        C5hJzNv8EMoWl7j1ZD4ThC0v0bx1NvMERqFZSNpnIWmZhaRlFpKWBYwsqxhFUkuLc9Nziw31
        ihNzi0vz0vWS83M3MQLjetuxn5t3MF7aGHyIUYCDUYmHt8KBM0aINbGsuDL3EKMEB7OSCK9Q
        DVCINyWxsiq1KD++qDQntfgQoynQcxOZpUST84EpJ68k3tDU0NzC0tDc2NzYzEJJnPe8QWWU
        kEB6YklqdmpqQWoRTB8TB6dUA6PDscT/uwJdnuYf05rg5SnRVFAhKs92uWVJRIyW9J8dv1yc
        /UxiDafwv29/Feu3buoe9b+TNiacrEmQ+Gv4NqnqeHa/8t+Ljk5Pmx7evhV0ISrpz1SdaKZJ
        fVbsjTsKF13gmn/N8/D85AS3dyoR93hLAqfpaf839GFXfXK2/fHcJWrrm6QVJiixFGckGmox
        FxUnAgCUpcRhAQMAAA==
X-CMS-MailID: 20181206195507eucas1p1c47750cb4d12a0876873209f638e9467
X-Msg-Generator: CA
Content-Type: text/plain; charset="utf-8"
X-RootMTR: 20181107171036eucas1p13253d56b463c8f888ab8f8e418635297
X-EPHeader: CA
CMS-TYPE: 201P
X-CMS-RootMailID: 20181107171036eucas1p13253d56b463c8f888ab8f8e418635297
References: <1541610593-28542-1-git-send-email-l.luba@partner.samsung.com>
        <CGME20181107171036eucas1p13253d56b463c8f888ab8f8e418635297@eucas1p1.samsung.com>
        <1541610593-28542-3-git-send-email-l.luba@partner.samsung.com>
        <1544022595.2841.45.camel@intel.com>
        <2ac425fc-7c32-6e2f-7086-c14f85b0bbfd@partner.samsung.com>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org



On 12/6/18 8:18 PM, Lukasz Luba wrote:
> Hi Rui,
> 
> On 12/5/18 4:09 PM, Zhang Rui wrote:
>> On 三, 2018-11-07 at 18:09 +0100, Lukasz Luba wrote:
>>> This patch adds support irq mode in trip point.
>>> When that flag is set in DT, there is no need for polling
>>> in thermal framework. Crossing the trip point will rise an IRQ.
>>> The naming convention for tip point 'type' can be confussing
>>> and 'passive' (whic is passive cooling) might be interpretted
>>> wrongly.
>>>
>>> This mechanism prevents from missue and adds explicit setting
>>> for hardware which support interrupts for pre-configured temperature
>>> threshold.
>>>
>>> Cc: Zhang Rui <rui.zhang@intel.com>
>>> Cc: Eduardo Valentin <edubezval@gmail.com>
>>> Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
>>> Signed-off-by: Lukasz Luba <l.luba@partner.samsung.com>
>>> ---
>>>   drivers/thermal/of-thermal.c   | 17 +++++++++++++++++
>>>   drivers/thermal/thermal_core.c | 10 ++++++++--
>>>   include/linux/thermal.h        |  5 +++++
>>>   3 files changed, 30 insertions(+), 2 deletions(-)
>>>
>>> diff --git a/drivers/thermal/of-thermal.c b/drivers/thermal/of-
>>> thermal.c
>>> index 4bfdb4a..1a75946a 100644
>>> --- a/drivers/thermal/of-thermal.c
>>> +++ b/drivers/thermal/of-thermal.c
>>> @@ -312,6 +312,20 @@ static int of_thermal_get_trip_type(struct
>>> thermal_zone_device *tz, int trip,
>>>       return 0;
>>>   }
>>> +static int
>>> +of_thermal_get_trip_irq_mode(struct thermal_zone_device *tz, int
>>> trip,
>>> +                 bool *mode)
>>> +{
>>> +    struct __thermal_zone *data = tz->devdata;
>>> +
>>> +    if (trip >= data->ntrips || trip < 0)
>>> +        return -EDOM;
>>> +
>>> +    *mode = data->trips[trip].irq_mode;
>>> +
>>> +    return 0;
>>> +}
>>> +
>>>   static int of_thermal_get_trip_temp(struct thermal_zone_device *tz,
>>> int trip,
>>>                       int *temp)
>>>   {
>>> @@ -394,6 +408,7 @@ static struct thermal_zone_device_ops
>>> of_thermal_ops = {
>>>       .set_mode = of_thermal_set_mode,
>>>       .get_trip_type = of_thermal_get_trip_type,
>>> +    .get_trip_irq_mode = of_thermal_get_trip_irq_mode,
>>>       .get_trip_temp = of_thermal_get_trip_temp,
>>>       .set_trip_temp = of_thermal_set_trip_temp,
>>>       .get_trip_hyst = of_thermal_get_trip_hyst,
>>> @@ -827,6 +842,8 @@ static int thermal_of_populate_trip(struct
>>> device_node *np,
>>>           return ret;
>>>       }
>>> +    trip->irq_mode = of_property_read_bool(np, "irq-mode");
>>> +
>>>       /* Required for cooling map matching */
>>>       trip->np = np;
>>>       of_node_get(np);
>>> diff --git a/drivers/thermal/thermal_core.c
>>> b/drivers/thermal/thermal_core.c
>>> index 39fc812..6d41e08 100644
>>> --- a/drivers/thermal/thermal_core.c
>>> +++ b/drivers/thermal/thermal_core.c
>>> @@ -406,6 +406,7 @@ static void handle_critical_trips(struct
>>> thermal_zone_device *tz,
>>>   static void handle_thermal_trip(struct thermal_zone_device *tz, int
>>> trip)
>>>   {
>>>       enum thermal_trip_type type;
>>> +    bool irq_mode = false;
>>>       /* Ignore disabled trip points */
>>>       if (test_bit(trip, &tz->trips_disabled))
>>> @@ -419,9 +420,14 @@ static void handle_thermal_trip(struct
>>> thermal_zone_device *tz, int trip)
>>>           handle_non_critical_trips(tz, trip);
>>>       /*
>>>        * Alright, we handled this trip successfully.
>>> -     * So, start monitoring again.
>>> +     * So, start monitoring in polling mode if
>>> +     * trip is not using irq HW support.
>>>        */
>>> -    monitor_thermal_zone(tz);
>>> +    if (tz->ops->get_trip_irq_mode)
>>> +        tz->ops->get_trip_irq_mode(tz, trip, &irq_mode);
>>> +
>>> +    if (!irq_mode)
>>> +        monitor_thermal_zone(tz);
>>>   }
>> handle_thermal_trip() is called from thermal_zone_device_update(), and
>> it is invoked for every trip points.
>> say, you have a passive trip point 1 that supports irq_mode, and
>> another passive trip point 2 that does not support irq_mode,
>> monitor_thermal_zone() is still called in handle_thermal_trip(tz, 2),
>> and the passive timer will be activated anyway, do I miss something?
> Yes, the passive timer will be activated in your example. It is correct
> behavior and does not break anything.
> case 1: there is 'k' passive trip points which have irq_mode and 1
> additional which does not have 'irq_mode', the framework will start
> polling but skip check for those 'k' trip points.
> case 2: all of the passive trip points have irq_mode set, the framework
> will not register 'scheduled_work' because it will not call 
> 'monitor_thermal_zone()'.
> This is the case of most Exynos platforms, but there is one exception 
> which has 'case 1' with 2 trip points not supporting irq_mode.
Do you suggest to cover the 'case 1'?
It would be possible after adding a new enum THERMAL_FRAMEWORK_POLL, 
then function:
thermal_zone_device_check() will call
thermal_zone_device_update(tz, THERMAL_FRAMEWORK_POLL)
and in handle_thermal_trip() implement something like:
--------------8<----------------
static void handle_thermal_trip(struct thermal_zone_device *tz, int trip)
{
	enum thermal_trip_type type;
	bool irq_mode = false;

	/* Ignore disabled trip points */
	if (test_bit(trip, &tz->trips_disabled))
		return;

	if (tz->ops->get_trip_irq_mode)
		tz->ops->get_trip_irq_mode(tz, trip, &irq_mode)

	if (tz->notify_event == THERMAL_FRAMEWORK_POLL && irq_mode)
		return;
...

	if (!irq_mode)
		monitor_thermal_zone(tz);
}

---------->8-----------------------

I could implement it in v3 if you don't see that it add too much of mess 
and agree for this approach.

Regards,
Lukasz

> 
> Regards,
> Lukasz
> 
>>
>> thanks,
>> rui
>>
>>>   static void update_temperature(struct thermal_zone_device *tz)
>>> diff --git a/include/linux/thermal.h b/include/linux/thermal.h
>>> index 5f4705f..b064565 100644
>>> --- a/include/linux/thermal.h
>>> +++ b/include/linux/thermal.h
>>> @@ -103,6 +103,7 @@ struct thermal_zone_device_ops {
>>>           enum thermal_device_mode);
>>>       int (*get_trip_type) (struct thermal_zone_device *, int,
>>>           enum thermal_trip_type *);
>>> +    int (*get_trip_irq_mode) (struct thermal_zone_device *, int,
>>> bool *);
>>>       int (*get_trip_temp) (struct thermal_zone_device *, int, int
>>> *);
>>>       int (*set_trip_temp) (struct thermal_zone_device *, int,
>>> int);
>>>       int (*get_trip_hyst) (struct thermal_zone_device *, int, int
>>> *);
>>> @@ -196,6 +197,7 @@ struct thermal_zone_device {
>>>       struct thermal_attr *trip_temp_attrs;
>>>       struct thermal_attr *trip_type_attrs;
>>>       struct thermal_attr *trip_hyst_attrs;
>>> +    struct thermal_attr *trip_irq_mode_attrs;
>>>       void *devdata;
>>>       int trips;
>>>       unsigned long trips_disabled;    /* bitmap for disabled
>>> trips */
>>> @@ -364,6 +366,8 @@ struct thermal_zone_of_device_ops {
>>>    * @temperature: temperature value in miliCelsius
>>>    * @hysteresis: relative hysteresis in miliCelsius
>>>    * @type: trip point type
>>> + * @irq_mode: to not use polling in framework set support of HW irq
>>> (which will
>>> + *          be triggered when temperature reaches this level).
>>>    */
>>>   struct thermal_trip {
>>> @@ -371,6 +375,7 @@ struct thermal_trip {
>>>       int temperature;
>>>       int hysteresis;
>>>       enum thermal_trip_type type;
>>> +    bool irq_mode;
>>>   };
>>>   /* Function declarations */
>>
>>
