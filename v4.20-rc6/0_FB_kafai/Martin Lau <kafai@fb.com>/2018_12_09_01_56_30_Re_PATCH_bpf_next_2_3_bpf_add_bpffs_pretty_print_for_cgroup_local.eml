Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 09 Dec 2018 18:57:09 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 00E7A5800CB;
	Sat,  8 Dec 2018 17:57:26 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga004-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 08 Dec 2018 17:57:25 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AS9dH4BaxUwZZv9lfbDPDUMX/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpcm6ZB7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyxPDJ2h?=
 =?us-ascii?q?YYsTAeQPPuhYoIv8p1QSohWxChKsBPvtxzJTmn/2xLc33/g9HQ3awgAtGc8Fvn?=
 =?us-ascii?q?TOrNXyMacfSee7w7PSzTXfbvNW3yr25o7SfRA8vPqBWrFwftDfyUY1FgPIlVuQ?=
 =?us-ascii?q?ppf/MzyJ0eQNtnGW4ux9Xuysk24qsx99riSry8s2l4XEiJwZxkrZ+Sh63Io5P9?=
 =?us-ascii?q?y1RUxjbdK6EZZcqT2WOo5rTs8+Xm5lvTo1xqECtJKneSUG1ZcqywLaZvGCboSF?=
 =?us-ascii?q?5xzuWeaPLThlnH5ldqywihWu/UWlz+DxUtS73EhWoidAj9XBtH4N2hnJ5cebVv?=
 =?us-ascii?q?dw/EKs1DeT2wzO7OxPPFo6mrDBK5E7x749jpoTvlrHHi/xgEj2kqCWeVs++uSy?=
 =?us-ascii?q?6OTofK/mppmCOI9wkA3+Nb4umsOnDeQ5NAgBQXSb9Pyi2LH/+UD1WqhGg/Monq?=
 =?us-ascii?q?XDrZzXJtgXqrS4DgJXyooj7gywDzai0NQWh3kHK1dFdQqDj4joPVHOPf/5Ae68?=
 =?us-ascii?q?g1uyijdrwe7JPrn4DpXKIHnDlqnufaxm5k5Cxwo808pf64hXCr4fOvLzXFH+tN?=
 =?us-ascii?q?jCAh8+KQy0zP7rCM9h2YMGRWKPHqiZPbvWsV+J5eIgPfOAZYAIuDvmL/gl5vju?=
 =?us-ascii?q?jWI2mFMHfKmp24cXZ268Hvh8P0qZZn/siM8bEWgWpgo+UPDqiFqaXD5TfXmyXr?=
 =?us-ascii?q?486Ss8CI68DYfDW5qigLqO3CqgGp1WZ2ZGCk2DEHvydoWEXesMZzyWIsN7jjME?=
 =?us-ascii?q?Ur2hQZc71R6yrA/616ZnLu3M9y0aspLsysJ55+7UlRE08zx0CN+Q02WMT2Fyg2?=
 =?us-ascii?q?MJSCU63KF5oUxh1FiD1bJ0jOBfFdxW//lJSBs1NYbAz+xmDND/QhjOfsyJSFah?=
 =?us-ascii?q?QdWqGysxQcgzw9IVZ0Z9GtOijg3M3iawAr8VkaCLC4Iw8q7Gw3fxIMN9wW7c1K?=
 =?us-ascii?q?Y9l1kmXtdPNWq+i6587QfTAZTFk0GYl6mwc6Qc0zXA9GOCzWqIoUFZXxR8UaTD?=
 =?us-ascii?q?XXADeETWqc716V/FT7+rEb4nKBdOydaeKqtWbd3klUhJS+39ONvAeW6xm32/BR?=
 =?us-ascii?q?CTxrySaormfGEd3CbYCEgAiA0T+XeGNQ4jBiauuW7eDTpuFU7xbEPo6+VxtHS7?=
 =?us-ascii?q?TkosxQGQc0Jhz6a1+gIShfGEVvwcxKwEtzk7pzV0Blm92cnWBMSGpwd6eKVcYN?=
 =?us-ascii?q?U94EpI1G7Dtgx9OICgIL5mhlIEbwt3uEbu3Q1tCopcicgqsG8qzA1qJKKE0VNB?=
 =?us-ascii?q?cjSY3YzwOrzXMGXy4Aqja6nM2lHa0daW/KgP5e88q1XiugGpC0Uj/29m09lTz3?=
 =?us-ascii?q?uT+JHKABAOXpL2V0Y97wJ6qK3CYikh+4PU0mVhPrOwsjDc1NMmGuskxgy7cNdC?=
 =?us-ascii?q?LayLDgnyE84dB8iwM+Eqn1mpbhQZPOFd7qI0PsWmd+eY166vJupvgDWmjWFf6o?=
 =?us-ascii?q?Bnzk2M7zZ8SvLP35sdw/CYwxGLWCvmgFagssD4g4ZEZT4JE2q7yCjkApNRZ6Jo?=
 =?us-ascii?q?cYYKD2euP9O4xtFki5HxXH5Y8UapB0ka18+xZRqSc1v90BVK1UQWvXOogzG4wC?=
 =?us-ascii?q?Fzkz0zqKqQwjbOw+X7eBUbIGFLQHRtgkn2IYizidAXR0yobwkvlBu46kf23alb?=
 =?us-ascii?q?pKJjL2bNRUdEZTT5L2ZnUqGorLqNf9ZP6I80sSVQSOm9YVGaRqT9ohcAyCPjAm?=
 =?us-ascii?q?1eySs/dzGrvJX5ghN7hHicLHZ1sHrWZ8VwyQ3D69zbQP5bxiAGSzVgiTnLGli8?=
 =?us-ascii?q?OMGk/deOmJfZseC+VGWhWodIcSbxzoOAtyq75Wt0Dh25hP2zntznEQ4n0S70zd?=
 =?us-ascii?q?VqVCPIrAribYnvzai1LeVnfkxwDl/m98V6Ap1+kpc3hJwI2XkVnJKV8WAFkWfy?=
 =?us-ascii?q?N9VWwqb+bHsLRT4WzN/Z+gnl2Et/Ln2Xw4L1TGmSwsxkZ9OieGMZxjo979xWCK?=
 =?us-ascii?q?eT9LFEnjF6oluioQLRfPhyhDEdyfQ15X4eguEJvhctzyqHDrATG0lYITLjlxCS?=
 =?us-ascii?q?49+iq6VXYX6lcaKs20pmgdChELaCrxlZWHb4eZctBzV878thP1LXzH389Jvkd8?=
 =?us-ascii?q?LOYtIJuR2ZiBPAj+lTKJIsmfsGnytnOWThvXI7z+43lwBh3Za/vIKfMWVi4Lq5?=
 =?us-ascii?q?AgJENj3yf84T5jbtjaNEkseXxY+vGIhhGi4QXJvpVv+oFDMStfL6NweBCjE8q3?=
 =?us-ascii?q?GbGabBEg+b8ktps3XPE5WzPXGNOHYZ1cliRAWaJEFHmw8bRjI6npokFgywwMzh?=
 =?us-ascii?q?bVx05jQQ5l7+txtNxfhkNxj5UmfDugiobi04R4SYLBpT9gtC/VvaMdSC7uJvGC?=
 =?us-ascii?q?FV5p+hoxaIKmOFfAREF30JVlaHB1D+Pbmu+N/A/PKDBuelK/vOYLOOqfFRVvuS?=
 =?us-ascii?q?xJKv1Jdm8CiINsmVInZiCPg70FJZXX9lA8TZhykPSysPmiPNaM6buQ68+jBtoc?=
 =?us-ascii?q?C56vjrQwXv5Y2AC7ZJNdVv+ha2gbqMNuKKhSZ5LypY2Y0IxXPS1Lcf21sSgTl0?=
 =?us-ascii?q?dzaxCbQAqTLNTKXIl69XEREbaiBzNMhJ764m3QlNI8nbitzr2b5ik/41EExIVV?=
 =?us-ascii?q?jgmsGveMwLLHuxNFLBBEaXKruGISfHzN3wYaO5UbdQlvlbtwWsuTaHFE/uJi6M?=
 =?us-ascii?q?lyTyWBC1L+5NjDuXPBhfuIymdhZtCG7jTM/paxGhMd93iyE2zqMwhn/QKWEcNj?=
 =?us-ascii?q?18eVtXrrKM9SNYnul/G2tZ43p5LOmEnjyV4PXCJpkKsftkHCJ0mvle4HQ7zbtV?=
 =?us-ascii?q?8S5FSOZ0mCvUst5hvVWmnvOTxTpgVRpEsixLi56TvUV+JaXZ8YFNWHbe8xIL6G?=
 =?us-ascii?q?WQChIKqMNkC93voa9QzNfPmbn3KDdD9dLU4MQdC9LVKMKBLHouLx7pFCTIAwsC?=
 =?us-ascii?q?SD74fV3Y0nZalfiUvlKItZgxqpnq0M4BV6VcXVodGfYTC0AjF9sHdsRZRDQhxJ?=
 =?us-ascii?q?uSltIJ4zKapQSZEMZTsJnGfvyYR/7oLWDK3vF/exIUzOagfswoPYrh1hknMwEi?=
 =?us-ascii?q?kQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AVAADIdQxch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUgYBAQsBgTCCLAQLJ4dBA4Uuiy9QAQEGgTUUiQyOMYEkA0wSAQEYEwGEQIM?=
 =?us-ascii?q?dIjUIDQEDAQEBAQEBAgETAQEBCgsJCCkjDII2JAGCYgEBAQMBAg8VEwYBATcBB?=
 =?us-ascii?q?QkBAQEBCA4KCRUQAwwjJQIEDgUFHYJ/gWoDCA0BBJk0Ai6JWAEBAYFqM4J2AQE?=
 =?us-ascii?q?FhHoYggkIjCEXeIEHgRGDEoRKIxSFW4srlUwJikOHASOBXIUXikqZCQICAgIEB?=
 =?us-ascii?q?QINAQEFgUgCggozGggbFYMnghsMFxKDOIpTcoEFAQEhihkBJYInAQE?=
X-IPAS-Result: =?us-ascii?q?A0AVAADIdQxch0O0hNFkHAEBAQQBAQcEAQGBUgYBAQsBgTC?=
 =?us-ascii?q?CLAQLJ4dBA4Uuiy9QAQEGgTUUiQyOMYEkA0wSAQEYEwGEQIMdIjUIDQEDAQEBA?=
 =?us-ascii?q?QEBAgETAQEBCgsJCCkjDII2JAGCYgEBAQMBAg8VEwYBATcBBQkBAQEBCA4KCRU?=
 =?us-ascii?q?QAwwjJQIEDgUFHYJ/gWoDCA0BBJk0Ai6JWAEBAYFqM4J2AQEFhHoYggkIjCEXe?=
 =?us-ascii?q?IEHgRGDEoRKIxSFW4srlUwJikOHASOBXIUXikqZCQICAgIEBQINAQEFgUgCggo?=
 =?us-ascii?q?zGggbFYMnghsMFxKDOIpTcoEFAQEhihkBJYInAQE?=
X-IronPort-AV: E=Sophos;i="5.56,332,1539673200"; 
   d="scan'208";a="141357693"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 08 Dec 2018 17:57:24 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726088AbeLIB5S (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sat, 8 Dec 2018 20:57:18 -0500
Received: from mx0a-00082601.pphosted.com ([67.231.145.42]:60692 "EHLO
        mx0a-00082601.pphosted.com" rhost-flags-OK-OK-OK-OK)
        by vger.kernel.org with ESMTP id S1726029AbeLIB5S (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sat, 8 Dec 2018 20:57:18 -0500
Received: from pps.filterd (m0044010.ppops.net [127.0.0.1])
        by mx0a-00082601.pphosted.com (8.16.0.27/8.16.0.27) with SMTP id wB91um7w006877;
        Sat, 8 Dec 2018 17:56:53 -0800
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=fb.com; h=from : to : cc : subject
 : date : message-id : references : in-reply-to : content-type : content-id
 : content-transfer-encoding : mime-version; s=facebook;
 bh=J93kjmZIobs0uI+Jj+LVEg78S3ihiwxZ9U7Um8VRRiw=;
 b=Xy1MbHF07IMhPtkg5j36eNN9thvbtCmTcp5G+uXJOV/L6sUVee2XBAElmnXyz5+dvGIU
 F9FuE6Hq0VAOG0iF5wl3Cgu02ic2I9o+if9cCeyD2oNpTUQMJzbm1I8DvdJN6gxSe6TG
 rsW7e/51Vwuve0q3u1YphAC1RHKZE24VWBU= 
Received: from maileast.thefacebook.com ([199.201.65.23])
        by mx0a-00082601.pphosted.com with ESMTP id 2p8nawrek9-1
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-SHA384 bits=256 verify=NOT);
        Sat, 08 Dec 2018 17:56:53 -0800
Received: from frc-hub02.TheFacebook.com (2620:10d:c021:18::172) by
 frc-hub03.TheFacebook.com (2620:10d:c021:18::173) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384) id
 15.1.1531.3; Sat, 8 Dec 2018 17:56:52 -0800
Received: from NAM05-DM3-obe.outbound.protection.outlook.com (192.168.183.28)
 by o365-in.thefacebook.com (192.168.177.72) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384) id 15.1.1531.3
 via Frontend Transport; Sat, 8 Dec 2018 17:56:52 -0800
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=fb.onmicrosoft.com;
 s=selector1-fb-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=J93kjmZIobs0uI+Jj+LVEg78S3ihiwxZ9U7Um8VRRiw=;
 b=TDW3o0DtAhfQhwdXP6iJbnpxqS0/jdNfN9IJGgD6wgjx+5CezR4acV0JFsq1jasgz3YQVMaH2WD+3sKGFcxF0oIRuxSal4cUczvunw7Gc3+i2PJReNMxyHcLoVozok4L42wvXZgvv56MzS5kPi59acOvKnd++jVvJtg75va92XE=
Received: from MWHPR15MB1790.namprd15.prod.outlook.com (10.174.255.19) by
 MWHPR15MB1328.namprd15.prod.outlook.com (10.175.3.142) with Microsoft SMTP
 Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1404.17; Sun, 9 Dec 2018 01:56:30 +0000
Received: from MWHPR15MB1790.namprd15.prod.outlook.com
 ([fe80::9d20:17f:ac07:601]) by MWHPR15MB1790.namprd15.prod.outlook.com
 ([fe80::9d20:17f:ac07:601%5]) with mapi id 15.20.1404.025; Sun, 9 Dec 2018
 01:56:30 +0000
From: Martin Lau <kafai@fb.com>
To: Roman Gushchin <guroan@gmail.com>
CC: "netdev@vger.kernel.org" <netdev@vger.kernel.org>,
        Kernel Team <Kernel-team@fb.com>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        Roman Gushchin <guro@fb.com>,
        "Alexei Starovoitov" <ast@kernel.org>,
        Daniel Borkmann <daniel@iogearbox.net>
Subject: Re: [PATCH bpf-next 2/3] bpf: add bpffs pretty print for cgroup local
 storage maps
Thread-Topic: [PATCH bpf-next 2/3] bpf: add bpffs pretty print for cgroup
 local storage maps
Thread-Index: AQHUjpCDCEcwAFHkIk67Bg9UX8GCJKV1p6mA
Date: Sun, 9 Dec 2018 01:56:30 +0000
Message-ID: <20181209015627.tkyspsafhwl3ak5b@kafai-mbp.dhcp.thefacebook.com>
References: <20181208005315.3500-1-guro@fb.com>
 <20181208005315.3500-2-guro@fb.com>
In-Reply-To: <20181208005315.3500-2-guro@fb.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-clientproxiedby: MWHPR13CA0039.namprd13.prod.outlook.com
 (2603:10b6:300:95::25) To MWHPR15MB1790.namprd15.prod.outlook.com
 (2603:10b6:301:4e::19)
x-ms-exchange-messagesentrepresentingtype: 1
x-originating-ip: [2620:10d:c090:180::1:352d]
x-ms-publictraffictype: Email
x-microsoft-exchange-diagnostics: 1;MWHPR15MB1328;20:gIkWWrjZlJLR9Hs40GcTAFYrediURX3oICaG/6GZu0IeCvc6Cwfzsrs8WXhSW9Y0hc+oQNi47oZyTRtUZw+hq0q41ovXyDgJRNqr7vTmFB9S1U4K13PPLErduimKWt378YQSardQ+y//oTB4lkwtrpsGGp8hh5QhMghsUOxnsus=
x-ms-office365-filtering-correlation-id: ad303a40-44b6-409f-2f7b-08d65d79895c
x-microsoft-antispam: BCL:0;PCL:0;RULEID:(2390098)(7020095)(4652040)(8989299)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(5600074)(711020)(2017052603328)(7153060)(7193020);SRVR:MWHPR15MB1328;
x-ms-traffictypediagnostic: MWHPR15MB1328:
x-microsoft-antispam-prvs: <MWHPR15MB13280B6ECDB248E8CE1BCE3CD5A40@MWHPR15MB1328.namprd15.prod.outlook.com>
x-ms-exchange-senderadcheck: 1
x-exchange-antispam-report-cfa-test: BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(8121501046)(5005006)(823302103)(3231455)(999002)(11241501185)(944501520)(52105112)(93006095)(93001095)(3002001)(10201501046)(148016)(149066)(150057)(6041310)(20161123564045)(20161123560045)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123562045)(20161123558120)(201708071742011)(7699051)(76991095);SRVR:MWHPR15MB1328;BCL:0;PCL:0;RULEID:;SRVR:MWHPR15MB1328;
x-forefront-prvs: 0881A7A935
x-forefront-antispam-report: SFV:NSPM;SFS:(10019020)(376002)(39860400002)(366004)(346002)(136003)(396003)(189003)(199004)(106356001)(105586002)(97736004)(5660300001)(4326008)(68736007)(53936002)(7736002)(9686003)(6512007)(6116002)(25786009)(305945005)(6246003)(186003)(39060400002)(76176011)(102836004)(46003)(1076002)(2906002)(52116002)(33896004)(99286004)(386003)(81166006)(54906003)(316002)(6436002)(8676002)(8936002)(81156014)(14444005)(5024004)(486006)(446003)(11346002)(256004)(476003)(478600001)(71190400001)(1411001)(6486002)(6506007)(6916009)(71200400001)(14454004)(86362001)(229853002);DIR:OUT;SFP:1102;SCL:1;SRVR:MWHPR15MB1328;H:MWHPR15MB1790.namprd15.prod.outlook.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;MX:1;A:1;
x-microsoft-antispam-message-info: zUVKJxbeTGKPSCL0jBEKGR0s0S6/a6iuRqd6Qnqr4igEqc48rua7DMuctC5Bbo0L2GSDqhxgUt0su23Vgkdw5n0zVlWNguydsiKPtWQt5Zq1Ua97eJTuW0Ex25ppQGOiCr5erE6pP5x92lMg3ltdE7LFSH52u3ucSh8gP/8dxxjMK1QrpPuQH2w/JUBq4qGm9AP00qQ0TYIqdsnKYCZMT2Q6S8K6HbRwKFDuOPDglBU6CTxZg711su5tExr8DT+lEqOEcLt5xcS7qL4z0CzENmeNMO8ro39kifuMB1KoABobWBb2LCXthb8mcPU7s2XrCEPKjoMBeA70yyOx9O8Ez1aEga/hqpj2rq4HOysckDQ=
spamdiagnosticoutput: 1:99
spamdiagnosticmetadata: NSPM
Content-Type: text/plain; charset="us-ascii"
Content-ID: <FD51390EA99D2644A482E388843B86E7@namprd15.prod.outlook.com>
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
X-MS-Exchange-CrossTenant-Network-Message-Id: ad303a40-44b6-409f-2f7b-08d65d79895c
X-MS-Exchange-CrossTenant-originalarrivaltime: 09 Dec 2018 01:56:30.4916
 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: 8ae927fe-1255-47a7-a2af-5f3a069daaa2
X-MS-Exchange-Transport-CrossTenantHeadersStamped: MWHPR15MB1328
X-OriginatorOrg: fb.com
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10434:,, definitions=2018-12-08_09:,,
 signatures=0
X-Proofpoint-Spam-Reason: safe
X-FB-Internal: Safe
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Fri, Dec 07, 2018 at 04:53:14PM -0800, Roman Gushchin wrote:
> Implement bpffs pretty printing for cgroup local storage maps
> (both shared and per-cpu).
> Output example (captured for tools/testing/selftests/bpf/netcnt_prog.c):
>=20
> Shared:
>   $ cat /sys/fs/bpf/map_2
>   # WARNING!! The output is for debug purpose only
>   # WARNING!! The output format will change
>   {4294968594,1}: {9999,1039896}
>=20
> Per-cpu:
>   $ cat /sys/fs/bpf/map_1
>   # WARNING!! The output is for debug purpose only
>   # WARNING!! The output format will change
>   {4294968594,1}: {
>   	cpu0: {0,0,0,0,0}
>   	cpu1: {0,0,0,0,0}
>   	cpu2: {1,104,0,0,0}
>   	cpu3: {0,0,0,0,0}
>   }
>=20
> Signed-off-by: Roman Gushchin <guro@fb.com>
> Cc: Alexei Starovoitov <ast@kernel.org>
> Cc: Daniel Borkmann <daniel@iogearbox.net>
> ---
>  include/linux/btf.h        | 10 +++++
>  kernel/bpf/local_storage.c | 90 +++++++++++++++++++++++++++++++++++++-
>  2 files changed, 99 insertions(+), 1 deletion(-)
>=20
> diff --git a/include/linux/btf.h b/include/linux/btf.h
> index 8c2199b5d250..ac67bc4cbfd9 100644
> --- a/include/linux/btf.h
> +++ b/include/linux/btf.h
> @@ -5,6 +5,7 @@
>  #define _LINUX_BTF_H 1
> =20
>  #include <linux/types.h>
> +#include <uapi/linux/btf.h>
> =20
>  struct btf;
>  struct btf_type;
> @@ -63,4 +64,13 @@ static inline const char *btf_name_by_offset(const str=
uct btf *btf,
>  }
>  #endif
> =20
> +static inline const struct btf_type *btf_orig_type(const struct btf *btf=
,
> +						   const struct btf_type *t)
> +{
> +	while (t && BTF_INFO_KIND(t->info) =3D=3D BTF_KIND_TYPEDEF)
> +		t =3D btf_type_by_id(btf, t->type);
Only typedef is allowed?  Not even const?
If that is not the case, can btf_type_id_size() be reused?
The "type following" has already been done once and then remembered
in the verification time.

If cgroup_storage_check_btf() can only allow typedef, please
move "btf_orig_type()" to the local_storage.c.

> +
> +	return t;
> +}
> +
>  #endif
> diff --git a/kernel/bpf/local_storage.c b/kernel/bpf/local_storage.c
> index b65017dead44..7b51fe1aba3c 100644
> --- a/kernel/bpf/local_storage.c
> +++ b/kernel/bpf/local_storage.c
> @@ -1,11 +1,13 @@
>  //SPDX-License-Identifier: GPL-2.0
>  #include <linux/bpf-cgroup.h>
>  #include <linux/bpf.h>
> +#include <linux/btf.h>
>  #include <linux/bug.h>
>  #include <linux/filter.h>
>  #include <linux/mm.h>
>  #include <linux/rbtree.h>
>  #include <linux/slab.h>
> +#include <uapi/linux/btf.h>
> =20
>  DEFINE_PER_CPU(struct bpf_cgroup_storage*, bpf_cgroup_storage[MAX_BPF_CG=
ROUP_STORAGE_TYPE]);
> =20
> @@ -308,6 +310,91 @@ static int cgroup_storage_delete_elem(struct bpf_map=
 *map, void *key)
>  	return -EINVAL;
>  }
> =20
> +static int cgroup_storage_check_btf(const struct bpf_map *map,
> +				    const struct btf *btf,
> +				    const struct btf_type *key_type,
Actually, in "map_check_btf()" (just before cgroup_storage_check_btf()
is called), btf_type_id_size() has already been called
to get the true size and the resolved type (i.e. BTF_INFO_KIND_STRUCT here)
in order to reject "key_size !=3D map->key_size".  Hence, the key_type
passed to cgroup_storage_check_btf() here will not be KIND_TYPEDEF or
KIND_CONST.

> +				    const struct btf_type *value_type)
> +{
> +	const struct btf_type *st, *t;
> +	struct btf_member *m;
> +
> +	/* Key is expected to be of struct bpf_cgroup_storage_key type,
> +	 * which is:
> +	 * struct bpf_cgroup_storage_key {
> +	 *	__u64	cgroup_inode_id;
> +	 *	__u32	attach_type;
> +	 * };
> +	 */
> +
> +	/*
> +	 * Key_type must be a structure (or a typedef of a structure) with
> +	 * two members.
> +	 */
> +	st =3D btf_orig_type(btf, key_type);
> +	if (BTF_INFO_KIND(st->info) !=3D BTF_KIND_STRUCT ||
> +	    BTF_INFO_VLEN(st->info) !=3D 2)
> +		return -EINVAL;
> +
> +	/*
> +	 * The first field must be a 64 bit integer at 0 offset.
> +	 */
> +	m =3D (struct btf_member *)(st + 1);
> +	t =3D btf_orig_type(btf, btf_type_by_id(btf, m->type));
> +	if (!t || BTF_INFO_KIND(t->info) !=3D BTF_KIND_INT || m->offset ||
> +	    t->size !=3D
> +	    FIELD_SIZEOF(struct bpf_cgroup_storage_key, cgroup_inode_id))
Instead of t->size,
BTF_INT_BITS() and BTF_INT_OFFSET() need to be checked (please refer to the
key_type check in array_map_check_btf()).

I think exposing "btf_type_int_is_regular()" from btf.c will be easier here=
.
Actually, add "btf_type_is_reg_int(t, expected_size)" to btf.h and btf.c,
like (uncompiled and untested code):

/*
 * Not a bit field and it must be the expected size.
 */
bool btf_type_is_reg_int(const struct btf_type *t, u32 expected_size)
{
 	u8 nr_bits, nr_bytes;
        u32 int_data;

	if (!btf_type_is_int(t))
		return false;

	int_data =3D btf_type_int(t);
	nr_bits =3D BTF_INT_BITS(int_data);
	nr_bytes =3D BITS_ROUNDUP_BYTES(nr_bits);
	if (BITS_PER_BYTE_MASKED(nr_bits) ||
	    BTF_INT_OFFSET(int_data) ||
	    nr_bytes !=3D expected_size)
                return false;

	return true;
}


> +		return -EINVAL;
> +
> +	/*
> +	 * The second field must be a 32 bit integer at 0 offset.
> +	 */
> +	m =3D m + 1;
> +	t =3D btf_orig_type(btf, btf_type_by_id(btf, m->type));
> +	if (!t || BTF_INFO_KIND(t->info) !=3D BTF_KIND_INT ||
> +	    m->offset !=3D offsetof(struct bpf_cgroup_storage_key, attach_type)=
 *
> +	    BITS_PER_BYTE || t->size !=3D
> +	    FIELD_SIZEOF(struct bpf_cgroup_storage_key, attach_type))
> +		return -EINVAL;
> +
> +	return 0;
> +}
> +
> +static void cgroup_storage_seq_show_elem(struct bpf_map *map, void *_key=
,
> +					 struct seq_file *m)
> +{
> +	enum bpf_cgroup_storage_type stype =3D cgroup_storage_type(map);
> +	struct bpf_cgroup_storage_key *key =3D _key;
> +	struct bpf_cgroup_storage *storage;
> +	int cpu;
> +
> +	rcu_read_lock();
> +	storage =3D cgroup_storage_lookup(map_to_storage(map), key, false);
> +	if (!storage) {
> +		rcu_read_unlock();
> +		return;
> +	}
> +
> +	btf_type_seq_show(map->btf, map->btf_key_type_id, key, m);
> +	stype =3D cgroup_storage_type(map);
> +	if (stype =3D=3D BPF_CGROUP_STORAGE_SHARED) {
> +		seq_puts(m, ": ");
> +		btf_type_seq_show(map->btf, map->btf_value_type_id,
> +				  &READ_ONCE(storage->buf)->data[0], m);
> +		seq_puts(m, "\n");
> +	} else {
> +		seq_puts(m, ": {\n");
> +		for_each_possible_cpu(cpu) {
> +			seq_printf(m, "\tcpu%d: ", cpu);
> +			btf_type_seq_show(map->btf, map->btf_value_type_id,
> +					  per_cpu_ptr(storage->percpu_buf, cpu),
> +					  m);
> +			seq_puts(m, "\n");
> +		}
> +		seq_puts(m, "}\n");
> +	}
> +	rcu_read_unlock();
> +}
> +
>  const struct bpf_map_ops cgroup_storage_map_ops =3D {
>  	.map_alloc =3D cgroup_storage_map_alloc,
>  	.map_free =3D cgroup_storage_map_free,
> @@ -315,7 +402,8 @@ const struct bpf_map_ops cgroup_storage_map_ops =3D {
>  	.map_lookup_elem =3D cgroup_storage_lookup_elem,
>  	.map_update_elem =3D cgroup_storage_update_elem,
>  	.map_delete_elem =3D cgroup_storage_delete_elem,
> -	.map_check_btf =3D map_check_no_btf,
> +	.map_check_btf =3D cgroup_storage_check_btf,
> +	.map_seq_show_elem =3D cgroup_storage_seq_show_elem,
>  };
> =20
>  int bpf_cgroup_storage_assign(struct bpf_prog *prog, struct bpf_map *_ma=
p)
> --=20
> 2.19.2
>=20
