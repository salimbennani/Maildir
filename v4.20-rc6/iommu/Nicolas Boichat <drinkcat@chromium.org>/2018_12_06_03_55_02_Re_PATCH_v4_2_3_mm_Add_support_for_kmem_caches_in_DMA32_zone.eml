Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:41:01 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga008.fm.intel.com (fmsmga008.fm.intel.com [10.253.24.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 9167A580375;
	Wed,  5 Dec 2018 19:55:57 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by fmsmga008-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 05 Dec 2018 19:55:24 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AoihWrRCybyPy8N0LbGwoUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7/osSwAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95eWCxPAIyy?=
 =?us-ascii?q?b4UBAekcM+hGs4b9vEMOoBmlCAmwGO/i0CNEimPq0aA41ekqDAHI3BYnH9ILqH?=
 =?us-ascii?q?natNT1O7sVUeCx1qbI1ijIYu5R2Tf89IfIcgouoe2RVr93bMXR00gvFwXGjlqM?=
 =?us-ascii?q?s4PlIyiY2fgNs2iB6OpgUOOvi3Miqw1rpTiv3Mgsh5DPi4kIyV7E7T10zJgpKd?=
 =?us-ascii?q?C8UkJ3fNCpHIVKuy2HNIZ6XtkuTmBqtSoi1LEKpZq2cDIJxZkn3RLTdeGLfoeS?=
 =?us-ascii?q?7h7+UOucIDF1j29/dr2lnRa9602gx/X8Vsaq1FZKqTJIksfDtn8TzRzf8MuHRe?=
 =?us-ascii?q?Vn/kenxzmP0xrf6uZeIUA7jabbKpghzaAslpcLr0jPAiv7lF/rgKKYaEko4PWk?=
 =?us-ascii?q?5uf7brn8p5KRNZd4igTkPaQvnsy/D/44Mg8LX2WD/eS81bvj/VD2QblTjf05jL?=
 =?us-ascii?q?PZsJbEKsQfv6K5BAFU0oA95BalFDqmztsYkmcdLF5fexKIkZLpO1fQL/D8F/u/?=
 =?us-ascii?q?hE6skDhzy/DcIrLhGonNLmTEkLr5ebZ96k1cxxQpwdFQ+pJZEbUBIPP1Wk/su9?=
 =?us-ascii?q?3UFB45Mwqow+n5DNVxzJ8RWWWKAqWBKqPdrUeI5v4zI+mLfIIVuCzyK/k55/H0?=
 =?us-ascii?q?in81g18dfbSz0psRZ3C1BfBmI0SfYXrxjdYNC2YKvgwiTOP0jF2OSyJcZ3G3X6?=
 =?us-ascii?q?gk/DE0FJqmDZvfRoCqmLGB3iC7EYNMamBFDVCMF3Hod4KfVvcIaSKSJNJhkzMe?=
 =?us-ascii?q?WbigTY8hyQ+htAvgx7V7KerU/zUStYj/29ht++3TiRYy+CRuAMSG02GNSGJ0kn?=
 =?us-ascii?q?kSRzAs3qByukh9ylaF0ahljP1UD91T5/VVUggkMZ7Q1fB1C9f3WgjZZNeGVE6m?=
 =?us-ascii?q?Qsm6ATE2Vt8xwMUBY0BnF9WmjxDMxSyqA7AOmryPBZw09L/c3nfrK8Z8zXbGyL?=
 =?us-ascii?q?cuj108TsRTMm2mg7Z19xLPCI7Rj0WZi6GqeLwB0yHX6meM03CCvEFCXw52SqXK?=
 =?us-ascii?q?Q3YfakzSrdT640PCS6SjCbAmMgtH1M6DJbFGatzvjVVaWvjjPM7SbH62m2e1HR?=
 =?us-ascii?q?yI3K+DbJL2e2UB2yXQEFULnBoN/XmYLwQ+Bj2uo2TFDDNwE1LieEfs8eh4qHOm?=
 =?us-ascii?q?QU441QCKb0t917Wr/h4Zn+CTS/QW3rgcoicuty10HEqh39LRE9eAuwthfKBbYd?=
 =?us-ascii?q?Mh4FdG1XjVtxBnMpynNaBigl8ecwJ4v0710xV3C4NAkdUlrX8wzQpyL76Y301F?=
 =?us-ascii?q?dz+CwZ/wPbjXIHHo/B+zc67Wxk3e0NGO96gV7PQ3tVrisx+pF0Y46HpnzsRa3G?=
 =?us-ascii?q?Ga5pXJCwoST4n8UkI29xh8urHbbTMx54LS1X1wL6a0tiXO1M4uBOsg0hygZctQ?=
 =?us-ascii?q?MLuYFA/uFM0XH8ivKPEwl1e1dB4FPeBS+7QyP8OpbPaG3K+rPOB9nDOpl2hH4Y?=
 =?us-ascii?q?Z90l6S+Cp4UOLHw5EFw/SA1AudSzj8lEuhstzwmY1cfzESH3awxjL+BIFMYa1+?=
 =?us-ascii?q?Z4ALBnm0I82239lxm4TiW3pF+1G9HVMG38mpdAGWb1z82w1QyEsWrWammSu+0z?=
 =?us-ascii?q?x7jTUporCD0yzJxuTobAAHNXJTRGl+kVfsJpC5jtAbXESybwkljgCl5Vv8x6VA?=
 =?us-ascii?q?oKR/Lm/TQVpHfiTsLmFiVLewuaSGY8JV9JwotiBXWvymYV+GUr79vwca0yT7Em?=
 =?us-ascii?q?tc3j87bTKqupb+nxBgk2KSNnVzrHnYecF22xjf4sfRRfpQ3joAWSl5hiPbBlm6?=
 =?us-ascii?q?P9m149qUk43Pvfy5V2KkTpdTazXkzZuctCun4m1nGR2+kOq0mtH9Ewg60Cn72s?=
 =?us-ascii?q?JuVSXJqhb8f4bq2767MeJhYklnGlv859BmFYF5l4s6nIsQ1mQChpWJ4XoHln/+?=
 =?us-ascii?q?MdZB1qL/dnYNRSMLzMTT4Ajqw0BjKnOJx4TkVnSS2MdhZt+6Yn8I1SI59cxFFK?=
 =?us-ascii?q?CU7LlclytvvlW4tR7RYeR6njoFzPsu6X0ajPsTtAsj0CqdGawSEldCPSP3iRuI?=
 =?us-ascii?q?9d++ob5TZGaud7iwyUV/kcqgDLGEvgFTRnL5do0+Ei9368V1KEjM32Hr6oH4ZN?=
 =?us-ascii?q?nQasoetgGTkxfFleRUKYg+lvwXhSp8ImL9vGYoy+o6jRxowJG7s5KLK2Rr/KKl?=
 =?us-ascii?q?HBFYMif5aN8U+jHolaxehNqZ35izHpV9HTUGRIDnQuivEDIWqPTrLQKOECAnp3?=
 =?us-ascii?q?efGLrfGxKf6Uh8o3LOFZCrK2+YJH0Dwdp+QxmdIVRVgBoIUzUigp45CgeqydTj?=
 =?us-ascii?q?cEhj4zAe+EX4pgFQyu5yNBn/T2TfpBquajguU5iSNx5W7gBE50fIPs2S9ONzHy?=
 =?us-ascii?q?dE/pK/qAyBMHCUZwNNDWsRQEyLG0jjPqWy5dnH6+WZBu2+L+bXYbWTs+NeUe2E?=
 =?us-ascii?q?xYmo0otg8DaBLcGPPnhkD/0m1UtPR3F5G8LFmzoRTywbjT7Cb8mepB2k4C14st?=
 =?us-ascii?q?i/8Oj3WALo/YaPC6VdMdRs+xC1gKePLe2QhDx+KTZXyJwM32LIyKME0V4WiiFu?=
 =?us-ascii?q?cSStELsauS7MSqLQhrFYDxoBZyxvM8tI6ro23hNRNs7DltP1yrl4g+YvBFdYTl?=
 =?us-ascii?q?PhgN+mZMwQL2G5NVPKH0KLNLWAJT3WzMD7e6K8SbtMjOpKsx28oyqUE0jmPj6b?=
 =?us-ascii?q?jTnmSwivMf1QjCGcJBFepIC9chN3BWf/Vt7pdh27P8FxjTAtxb00h3XKNXMTMD?=
 =?us-ascii?q?RmckNNqKGQ4j1cgvllB2NB6X9lJ/GemymF9+nYNooWsfxzDyV0je1a5nE6y7pT?=
 =?us-ascii?q?7C5cRf11mDHdrthho1y9lumPyzxnUAdBqzpRhYKLu1liNrvd9pVaRXnE+xcNvi?=
 =?us-ascii?q?2sDEEQptBlA8fj/b9dy8nGkq3bJzJL8taS9swZVObOL8fSFnsqNh7gA3b+CwoO?=
 =?us-ascii?q?TTe3fTXTnU1bk/qb6lWeroI9r5nxndwJULANBw99Le8TFkkwRI9KG5xwRD5x1O?=
 =?us-ascii?q?fD1MM=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ApAAAonQhch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUgYBAQsBg2sng3qUeAaBNRSIfg6OLIFzLBMBh1MiNQgNAQMBAQEBAQECARM?=
 =?us-ascii?q?BAQEIDQkIKSMMgjYkAYJhAQEBAQIBAQIgBBkBATcBBAEJAQEKCwcCBAICJgICA?=
 =?us-ascii?q?x4BEgEFAQ4OGQWDHIFqAwgFCAWaMzyKHXB8M4J2AQEFhQkNghQIEnmLExd4gQe?=
 =?us-ascii?q?BEYJkLoJXhS6CV4skhQ6PUScuCY4Ugy4YgVuIO4cZjn+JcDCBJgGCCzMaCCgIb?=
 =?us-ascii?q?AaCNYIbDBeIXoVMMjOBBQEBilkBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ApAAAonQhch0O0hNFkHAEBAQQBAQcEAQGBUgYBAQsBg2s?=
 =?us-ascii?q?ng3qUeAaBNRSIfg6OLIFzLBMBh1MiNQgNAQMBAQEBAQECARMBAQEIDQkIKSMMg?=
 =?us-ascii?q?jYkAYJhAQEBAQIBAQIgBBkBATcBBAEJAQEKCwcCBAICJgICAx4BEgEFAQ4OGQW?=
 =?us-ascii?q?DHIFqAwgFCAWaMzyKHXB8M4J2AQEFhQkNghQIEnmLExd4gQeBEYJkLoJXhS6CV?=
 =?us-ascii?q?4skhQ6PUScuCY4Ugy4YgVuIO4cZjn+JcDCBJgGCCzMaCCgIbAaCNYIbDBeIXoV?=
 =?us-ascii?q?MMjOBBQEBilkBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,320,1539673200"; 
   d="scan'208";a="54750355"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 05 Dec 2018 19:55:24 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728846AbeLFDzP (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 5 Dec 2018 22:55:15 -0500
Received: from mail-pl1-f196.google.com ([209.85.214.196]:39441 "EHLO
        mail-pl1-f196.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727940AbeLFDzP (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 5 Dec 2018 22:55:15 -0500
Received: by mail-pl1-f196.google.com with SMTP id 101so11118787pld.6
        for <linux-kernel@vger.kernel.org>; Wed, 05 Dec 2018 19:55:14 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=chromium.org; s=google;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=/26HEVhE+J+82pWZ7x19Z7icV4rhpe/6yS1XvIqAl/g=;
        b=XTtPrMlvj34TYyeHD4apGaDxS4j8VCaMnYudgMgAOq/Nh4wmWtGtTm43oX4g+mXbuC
         wnjku3bbm8hYKjW3Ui6q1lMEHQwh1CxhhV51nB5PxWyv4qUW9m89k67l6I6qp9X0hiG9
         9t0OIqqrz+ND8W1M/oDUUpb7ne16FhukVW4mA=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=/26HEVhE+J+82pWZ7x19Z7icV4rhpe/6yS1XvIqAl/g=;
        b=B9QUB81YrkOtXnj4KZaMmmvbl9NJk+sHrK/IxLLmEReObp9qWW3qj4DGnsu90z8e6g
         BXr+KyY6gfwb0jerxke/U4hwj4mA/oE7C5XuGfkxyF5NeY15puJJ57E4e3DE0xn3svIY
         9ZQCW9K2rBGFShw+BlmXZ6vPmPoTCUbOIPmRIFt0lrzdhV1GB16gjb37DXEnUjYfgZ/l
         U9lV9pUKTwbszH/TUNUDb4Xy/9ZO9KiIL7gnePMyqNYJBqEjRvkmyxaxOtuJWmIzfQTl
         +mcLT/9Gk26MOVzUK6AEFRpRcckBwR2nw0rV/sbYSAJMzhupoLAsriv1O6zFjQfZZmej
         59ug==
X-Gm-Message-State: AA+aEWaR4CRga4okjHWDz9mIxmwD4EbCbSd5KQN9E9/7QsTCN/DKV4kC
        116YJjkR4WC8Hg7YmhpX/botBK5MfQofwAaqFYlSUTaahZE=
X-Google-Smtp-Source: AFSGD/X6feTi0oBIYKRbmtrlSmZt0x99qbfhXvTSXBWS981v7ywDlI2fwclyKRthJcUxT5iN+BRxNiSl6gaAHsgwQGM=
X-Received: by 2002:a17:902:820f:: with SMTP id x15mr25684109pln.224.1544068513939;
 Wed, 05 Dec 2018 19:55:13 -0800 (PST)
MIME-Version: 1.0
References: <20181205054828.183476-1-drinkcat@chromium.org>
 <20181205054828.183476-3-drinkcat@chromium.org> <20181205072528.l7blg6y24ggblh4m@master>
 <CANMq1KCi-k_4-66pMfvByzsjpf1H6_bvC82Ow0b_jEH6B3LHwA@mail.gmail.com>
 <20181205121807.evmslrimsv4pdtza@master> <CANMq1KD3vPpd1-=JpcOGRUyt97V+9+zJ9Yf-Qw5CZCPJBqNyHA@mail.gmail.com>
 <20181206033257.mmgh6efejee2i2ae@master>
In-Reply-To: <20181206033257.mmgh6efejee2i2ae@master>
From: Nicolas Boichat <drinkcat@chromium.org>
Date: Thu, 6 Dec 2018 11:55:02 +0800
Message-ID: <CANMq1KBdV94xGBARLJFke2ke+5aiFtCJe+OMys3+L5NggyxvKA@mail.gmail.com>
Subject: Re: [PATCH v4 2/3] mm: Add support for kmem caches in DMA32 zone
To: richard.weiyang@gmail.com
Cc: Will Deacon <will.deacon@arm.com>, Michal Hocko <mhocko@suse.com>,
        Levin Alexander <Alexander.Levin@microsoft.com>,
        linux-mm@kvack.org, Christoph Lameter <cl@linux.com>,
        Huaisheng Ye <yehs1@lenovo.com>,
        Matthew Wilcox <willy@infradead.org>,
        linux-arm Mailing List <linux-arm-kernel@lists.infradead.org>,
        David Rientjes <rientjes@google.com>,
        yingjoe.chen@mediatek.com, Vlastimil Babka <vbabka@suse.cz>,
        Tomasz Figa <tfiga@google.com>,
        Mike Rapoport <rppt@linux.vnet.ibm.com>,
        Matthias Brugger <matthias.bgg@gmail.com>,
        Joonsoo Kim <iamjoonsoo.kim@lge.com>,
        Robin Murphy <robin.murphy@arm.com>,
        lkml <linux-kernel@vger.kernel.org>,
        Pekka Enberg <penberg@kernel.org>,
        iommu@lists.linux-foundation.org,
        Andrew Morton <akpm@linux-foundation.org>,
        Mel Gorman <mgorman@techsingularity.net>
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Thu, Dec 6, 2018 at 11:32 AM Wei Yang <richard.weiyang@gmail.com> wrote:
>
> On Thu, Dec 06, 2018 at 08:41:36AM +0800, Nicolas Boichat wrote:
> >On Wed, Dec 5, 2018 at 8:18 PM Wei Yang <richard.weiyang@gmail.com> wrote:
> >>
> >> On Wed, Dec 05, 2018 at 03:39:51PM +0800, Nicolas Boichat wrote:
> >> >On Wed, Dec 5, 2018 at 3:25 PM Wei Yang <richard.weiyang@gmail.com> wrote:
> >> >>
> >> >> On Wed, Dec 05, 2018 at 01:48:27PM +0800, Nicolas Boichat wrote:
> >> >> >In some cases (e.g. IOMMU ARMv7s page allocator), we need to allocate
> >> >> >data structures smaller than a page with GFP_DMA32 flag.
> >> >> >
> >> >> >This change makes it possible to create a custom cache in DMA32 zone
> >> >> >using kmem_cache_create, then allocate memory using kmem_cache_alloc.
> >> >> >
> >> >> >We do not create a DMA32 kmalloc cache array, as there are currently
> >> >> >no users of kmalloc(..., GFP_DMA32). The new test in check_slab_flags
> >> >> >ensures that such calls still fail (as they do before this change).
> >> >> >
> >> >> >Fixes: ad67f5a6545f ("arm64: replace ZONE_DMA with ZONE_DMA32")
> >> >> >Signed-off-by: Nicolas Boichat <drinkcat@chromium.org>
> >> >> >---
> >> >> >
> >> >> >Changes since v2:
> >> >> > - Clarified commit message
> >> >> > - Add entry in sysfs-kernel-slab to document the new sysfs file
> >> >> >
> >> >> >(v3 used the page_frag approach)
> >> >> >
> >> >> >Documentation/ABI/testing/sysfs-kernel-slab |  9 +++++++++
> >> >> > include/linux/slab.h                        |  2 ++
> >> >> > mm/internal.h                               |  8 ++++++--
> >> >> > mm/slab.c                                   |  4 +++-
> >> >> > mm/slab.h                                   |  3 ++-
> >> >> > mm/slab_common.c                            |  2 +-
> >> >> > mm/slub.c                                   | 18 +++++++++++++++++-
> >> >> > 7 files changed, 40 insertions(+), 6 deletions(-)
> >> >> >
> >> >> >diff --git a/Documentation/ABI/testing/sysfs-kernel-slab b/Documentation/ABI/testing/sysfs-kernel-slab
> >> >> >index 29601d93a1c2ea..d742c6cfdffbe9 100644
> >> >> >--- a/Documentation/ABI/testing/sysfs-kernel-slab
> >> >> >+++ b/Documentation/ABI/testing/sysfs-kernel-slab
> >> >> >@@ -106,6 +106,15 @@ Description:
> >> >> >               are from ZONE_DMA.
> >> >> >               Available when CONFIG_ZONE_DMA is enabled.
> >> >> >
> >> >> >+What:         /sys/kernel/slab/cache/cache_dma32
> >> >> >+Date:         December 2018
> >> >> >+KernelVersion:        4.21
> >> >> >+Contact:      Nicolas Boichat <drinkcat@chromium.org>
> >> >> >+Description:
> >> >> >+              The cache_dma32 file is read-only and specifies whether objects
> >> >> >+              are from ZONE_DMA32.
> >> >> >+              Available when CONFIG_ZONE_DMA32 is enabled.
> >> >> >+
> >> >> > What:         /sys/kernel/slab/cache/cpu_slabs
> >> >> > Date:         May 2007
> >> >> > KernelVersion:        2.6.22
> >> >> >diff --git a/include/linux/slab.h b/include/linux/slab.h
> >> >> >index 11b45f7ae4057c..9449b19c5f107a 100644
> >> >> >--- a/include/linux/slab.h
> >> >> >+++ b/include/linux/slab.h
> >> >> >@@ -32,6 +32,8 @@
> >> >> > #define SLAB_HWCACHE_ALIGN    ((slab_flags_t __force)0x00002000U)
> >> >> > /* Use GFP_DMA memory */
> >> >> > #define SLAB_CACHE_DMA                ((slab_flags_t __force)0x00004000U)
> >> >> >+/* Use GFP_DMA32 memory */
> >> >> >+#define SLAB_CACHE_DMA32      ((slab_flags_t __force)0x00008000U)
> >> >> > /* DEBUG: Store the last owner for bug hunting */
> >> >> > #define SLAB_STORE_USER               ((slab_flags_t __force)0x00010000U)
> >> >> > /* Panic if kmem_cache_create() fails */
> >> >> >diff --git a/mm/internal.h b/mm/internal.h
> >> >> >index a2ee82a0cd44ae..fd244ad716eaf8 100644
> >> >> >--- a/mm/internal.h
> >> >> >+++ b/mm/internal.h
> >> >> >@@ -14,6 +14,7 @@
> >> >> > #include <linux/fs.h>
> >> >> > #include <linux/mm.h>
> >> >> > #include <linux/pagemap.h>
> >> >> >+#include <linux/slab.h>
> >> >> > #include <linux/tracepoint-defs.h>
> >> >> >
> >> >> > /*
> >> >> >@@ -34,9 +35,12 @@
> >> >> > #define GFP_CONSTRAINT_MASK (__GFP_HARDWALL|__GFP_THISNODE)
> >> >> >
> >> >> > /* Check for flags that must not be used with a slab allocator */
> >> >> >-static inline gfp_t check_slab_flags(gfp_t flags)
> >> >> >+static inline gfp_t check_slab_flags(gfp_t flags, slab_flags_t slab_flags)
> >> >> > {
> >> >> >-      gfp_t bug_mask = __GFP_DMA32 | __GFP_HIGHMEM | ~__GFP_BITS_MASK;
> >> >> >+      gfp_t bug_mask = __GFP_HIGHMEM | ~__GFP_BITS_MASK;
> >> >> >+
> >> >> >+      if (!IS_ENABLED(CONFIG_ZONE_DMA32) || !(slab_flags & SLAB_CACHE_DMA32))
> >> >> >+              bug_mask |= __GFP_DMA32;
> >> >>
> >> >> The original version doesn't check CONFIG_ZONE_DMA32.
> >> >>
> >> >> Do we need to add this condition here?
> >> >> Could we just decide the bug_mask based on slab_flags?
> >> >
> >> >We can. The reason I did it this way is that when we don't have
> >> >CONFIG_ZONE_DMA32, the compiler should be able to simplify to:
> >> >
> >> >bug_mask = __GFP_HIGHMEM | ~__GFP_BITS_MASK;
> >> >if (true || ..) => if (true)
> >> >   bug_mask |= __GFP_DMA32;
> >> >
> >> >Then just
> >> >bug_mask = __GFP_HIGHMEM | ~__GFP_BITS_MASK | __GFP_DMA32;
> >> >
> >> >And since the function is inline, slab_flags would not even need to be
> >> >accessed at all.
> >> >
> >>
> >> Hmm, I get one confusion.
> >>
> >> This means if CONFIG_ZONE_DMA32 is not enabled, bug_mask will always
> >> contains __GFP_DMA32. This will check with cachep->flags.
> >>
> >> If cachep->flags has GFP_DMA32, this always fail?
> >>
> >> Is this possible?
> >
> >Not fully sure to understand the question, but the code is:
> >if (!IS_ENABLED(CONFIG_ZONE_DMA32) || !(slab_flags & SLAB_CACHE_DMA32))
> >       bug_mask |= __GFP_DMA32;
> >
> >IS_ENABLED(CONFIG_ZONE_DMA32) == true:
> > - (slab_flags & SLAB_CACHE_DMA32) => bug_mask untouched, __GFP_DMA32
> >is allowed.
> > - !(slab_flags & SLAB_CACHE_DMA32) => bug_mask |= __GFP_DMA32;,
> >__GFP_DMA32 triggers warning
> >IS_ENABLED(CONFIG_ZONE_DMA32) == false:
> >  => bug_mask |= __GFP_DMA32;, __GFP_DMA32 triggers warning (as
> >expected, GFP_DMA32 does not make sense if there is no DMA32 zone).
>
> This is the case I am thinking.
>
> The warning is reasonable since there is no DMA32. While the
> kmem_cache_create() user is not easy to change their code.
>
> For example, one writes code and wants to have a kmem_cache with DMA32
> capability, so he writes kmem_cache_create(__GFP_DMA32). The code is
> there and not easy to change. But one distro builder decides to disable
> DMA32. This will leads to all the kmem_cache_create() through warning?

I don't think CONFIG_ZONE_DMA32 can be enabled/disabled by
distro/user? IIUC this is a property of the architecture, some have it
enabled, some don't.

> This behavior is what we expect?
>
> >
> >Does that clarify?
> >
> >>
> >> --
> >> Wei Yang
> >> Help you, Help me
>
> --
> Wei Yang
> Help you, Help me
