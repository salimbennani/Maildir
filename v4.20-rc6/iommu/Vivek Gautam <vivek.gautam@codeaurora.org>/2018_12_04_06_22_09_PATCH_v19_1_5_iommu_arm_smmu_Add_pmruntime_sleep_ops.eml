Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 04 Dec 2018 18:29:41 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 29720580117;
	Mon,  3 Dec 2018 22:22:47 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 03 Dec 2018 22:22:46 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AeSyGahamaz5RyG8Mszq5z7b/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpcm5Yx7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v6bpgRh31hy?=
 =?us-ascii?q?cdLzM38H/ZhNF+gqxYpxyupRJ/w5XMYIyXL/dyYr/RcMkGSWdbQspdSypMCZ68?=
 =?us-ascii?q?YYsVCOoBOP5VoIb8p1sQsxS+BhSnCuL1xT9Vmn/5x6g62PkmHAHY3QwgAcwBsH?=
 =?us-ascii?q?fOoNX6LqgSTPy1w7PNzTjYc/xW3iry55bSfRA8u/GMWqhwftDLxUkoDQPFgUyd?=
 =?us-ascii?q?pIr4ND2WzuQAq3aX4/ZkWO61lmIqpR99riKyysovloXFnIMYx1Lc+Slk3Io4K8?=
 =?us-ascii?q?e0RFBlbdOgCpdcqiKXO5FrTs4mRWxjpTw0xaccuZGheSgH0JQnyADba/yAa4WI?=
 =?us-ascii?q?/B3jW/iLITtih3JqZqi/hxCs/kik0OH8UdO00FlSoipElNnDqGwN2gTN5sSbTv?=
 =?us-ascii?q?Zx5Fqt1DiR2wzJ9+1JIlw4mbDaJpMj2rIwk4AcsUXHHi/4gkX2i6qWe10g+uip?=
 =?us-ascii?q?7eTnf7rnqoafN4BqkAH+NLohmsimDeQ/PAkOWXaU+f6n2b398k32Xq9Kguc1kq?=
 =?us-ascii?q?bHqpDaI9oUpqqjDw9SyIYj5A6zDy2639QAgXkHMFVFdQqDj4joOFHBPur0DPii?=
 =?us-ascii?q?g1m3lDdrxvbGPqDuA5nXL3jDlqvhcqh560JG1AUzytVf7YpOCr4dOPLzRlPxtN?=
 =?us-ascii?q?vAAx85KQO0wvrnB8961o8EWWKPH7WWMKXdsVKT4uIvIu+MZJIauTrnKvgl4eLu?=
 =?us-ascii?q?gmE9mVMHYaap2p4XYmiiHvt6O0WZfWbsgtAZHGcIuQoxUvbmiF6FUT5VYXayWL?=
 =?us-ascii?q?kx5jU6CIKgEIfCSZqhgL2H3CenAJJWYnpKBUyLEXftb4+EQesDaDqOIs99lTwJ?=
 =?us-ascii?q?TaKuS5Qh1RGptw/20aBnIfDW+iADsZLj1d515/DclB0o9Dx0Cdid3H+JT21ugm?=
 =?us-ascii?q?wIQDo21rhloUNh0leDzbR4g/tAGNxQ/fxJVB02NZrdz+NgDdDyVRnMftOISFag?=
 =?us-ascii?q?X9WnDis9TtM3w98SfUl9H8+ugQzE3yqvG7UVjaCEBIQo8qLA2Hj8P9tyxGzY1K?=
 =?us-ascii?q?Y/lVUmQtFANWu9hqFh8QjfAIrJk0acl6aubqkc2C/N9GGezWuBpk1YUQhwUbnb?=
 =?us-ascii?q?UnAbfEfZsdP55kbaRb+0FbsnKhdBydKFKqZSd9Lml0tGS+n5NNTeeW2xnXywCg?=
 =?us-ascii?q?iOxr6XaIrqemMd3DjSCUQekgAT+2qGOhY6Biu7v23eCzluH0r1Y0zw6el+tG+7?=
 =?us-ascii?q?TkgswgGWbk1h0r21+gIVhf2cUf8TwqgIuCA7qzVwHVa92d3WBsGEpwpgeqVcfN?=
 =?us-ascii?q?w87E1G1WLfqwxyIJigI7p+iV4ZdgR9p1nu2AlvCoVcjcgqq2snwxB2Ka2G31JO?=
 =?us-ascii?q?aTOZ0YrrNb3KN2b95hava63R2lHAy9uW/qYP6PIlq1Tspg2pF0wi82l53NlRyX?=
 =?us-ascii?q?eT+pLKDA8KW5LrTkk37wR6p63dYiQl54LUyGdgPrWuvj7D29ImHu0lyhm7ctdb?=
 =?us-ascii?q?MaOEEhLyEsIAC8ivLuwqh0ambhYeMO9O8640Otusd+Ga166zIOZggDWmgHxd4I?=
 =?us-ascii?q?B8zk2D7TB8RfPP35ofxfGXwBGHVzblgFi9qM/3nZ1Lai8IHmq4zyjpH4pRZqx0?=
 =?us-ascii?q?fYYWBmaiOcy3xtNih5HzX35U7kKsB1QD2MWxYxqdc0T93RFM1UQQuXGmmSq4wy?=
 =?us-ascii?q?Z0kj0ztaqfwSrOzv/mdBoGPG5LWWZjgU3tIYiyk9AVQkyoYxI1mxui4Ebw37Jb?=
 =?us-ascii?q?q7hnL2nPXUdIeDD7L2N4XauqtbqCYMlP5IkzsSpNU+S8YlGaSrjjrBscyC7jG2?=
 =?us-ascii?q?pexDYmdzCloJn5nhp6iH6DI3Z3tnbWZcZwxRLH7tzGWfFRxiYGRDV/iTTPBlmz?=
 =?us-ascii?q?Jd6p8c+Wl5fCtOCzTGahVpxVcSn2woKMriq75Wt2ARKhm/C/gMHoEQ8/0SXjzd?=
 =?us-ascii?q?llST3IrArgYonsz6m6MvhofkhyCF/89sp1AId+koQriZEU2HgagIiV/HUdnWfy?=
 =?us-ascii?q?N9VbxbzxbH4XSTEXxN7V5RDv2Fd/IXKR24L5SnKdz9NkZ9m7YWMZwDgx7s5UB6?=
 =?us-ascii?q?eP8LxLgzF1rUGmogLLbvhwhTMdyfoo6H4HjOAFogstziOBAr8MGUlUJzDjlxON?=
 =?us-ascii?q?79qmtqVYeH6vcaSs1Ep5hd2hELaCogRGVHf4YJgiGzJw7t5kMFLNy3Dz7oDkeN?=
 =?us-ascii?q?/NbdMcrBGUkhHAj/RLJ5I1jPYFmS1nOWflt30/1+E7lQBu3Y29vIWfMGpi5qW5?=
 =?us-ascii?q?AhpFNjHvY8MT5yrgjaJfnsaQwoCuEY9tGjQNXJv0U/2oFCgeuujgNwaLCDc8sG?=
 =?us-ascii?q?uUGaLDHQ+D70drt3DPHIquN36JP3kV18liSAOeJExCgwAUQTM6kYQiFg2xwMzh?=
 =?us-ascii?q?cUF55i0e51LiqxtMzP5oOAf7UmvFuAiobTI0QoCFLBVK9gFC+1vVMcuG4+NzGC?=
 =?us-ascii?q?FY44ShrBGXJWydfQhIFmYJWkqLB134Ormu5N/A8/WXB+akLvvOZ6mOpvJaV/uS?=
 =?us-ascii?q?2Z2v1Y5m9S6WNsqTJnliE+E72k1bUHB5BcvZmjYPSy8Wly7XbM6bvhC8+iJpoc?=
 =?us-ascii?q?Cl7fTrQxni5Y+OC7tULNVu9Aq6gaaFN+6Mmil5LSxU2Y8LxX/N0LIfxkIdizly?=
 =?us-ascii?q?dzmxFrQNrTTCTL/Lla9NEREaazl/NM9J768n2glNOMjbis7617Jij/41DUtFWk?=
 =?us-ascii?q?Llms2zecMKJGS9PkvdBEmXLLSGOSHLw8bvbKOgSL1Qif9YuAGqtTmHE0/sIDKD?=
 =?us-ascii?q?miLtVxCuN+FMkS6aMAZfuIG7bhZiF2zjQMj6ZR28Nd99lSc2zqEshnPWKW4cNi?=
 =?us-ascii?q?BxckNXob2W6CNYg/N/FHRA73plN+aEnSmZ4vLcKpYXt/trHyt1m/hb4HQ817ta?=
 =?us-ascii?q?8iVESOZplyvVq949622hx+uI0D1PABBftjtQwoWRsgEqI6LT9tpMRV7H8QgL4G?=
 =?us-ascii?q?HWDA4F45N/DdfuveZV18LXlLPbIS1HtdnT+I9UGMnQLISLPXMqNhzBESTRSgAC?=
 =?us-ascii?q?SHrjNGbaglF1lPCJ6mbTqpk8t4iplp0TTLNSSF0yELUdEEshVNAPPpZ8Uy8+nL?=
 =?us-ascii?q?OzksEF/zy9oQPXScEcuYrIBdyIBvC6FjeHgLoMSBIV3br9ZdANN5P22AptY0Rm?=
 =?us-ascii?q?lYHiEE3cUNlQuCp7Z0kzukoboys2dXE6x0+wMlDl23QUD/PhxhM=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AcAABOHAZch0O0hNFjHgEGBwaBUQkLA?=
 =?us-ascii?q?YIAgWsnjHGLMIINFJc1gXMUGBMBiA0iNAkNAQMBAQEBAQECARMBAQEKCwkIKSM?=
 =?us-ascii?q?MgjYigmUDAwECJBkBATcBBQkBAR8xAykrBwoIBYMcggEBBaNkgWwzgnYBAQWHL?=
 =?us-ascii?q?QiHbYMTgRyBVz+BEYd3hXeJKYYJfFGPA0YHAoIfBI8RI4lbh0ssiFiPboFGgg0?=
 =?us-ascii?q?zGjCDL4IbDBeIXoVHODIBgQQBAYg2KYIkAQE?=
X-IPAS-Result: =?us-ascii?q?A0AcAABOHAZch0O0hNFjHgEGBwaBUQkLAYIAgWsnjHGLMII?=
 =?us-ascii?q?NFJc1gXMUGBMBiA0iNAkNAQMBAQEBAQECARMBAQEKCwkIKSMMgjYigmUDAwECJ?=
 =?us-ascii?q?BkBATcBBQkBAR8xAykrBwoIBYMcggEBBaNkgWwzgnYBAQWHLQiHbYMTgRyBVz+?=
 =?us-ascii?q?BEYd3hXeJKYYJfFGPA0YHAoIfBI8RI4lbh0ssiFiPboFGgg0zGjCDL4IbDBeIX?=
 =?us-ascii?q?oVHODIBgQQBAYg2KYIkAQE?=
X-IronPort-AV: E=Sophos;i="5.56,312,1539673200"; 
   d="scan'208";a="54785397"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 03 Dec 2018 22:22:44 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726093AbeLDGWm (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 4 Dec 2018 01:22:42 -0500
Received: from smtp.codeaurora.org ([198.145.29.96]:59222 "EHLO
        smtp.codeaurora.org" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725983AbeLDGWl (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 4 Dec 2018 01:22:41 -0500
Received: by smtp.codeaurora.org (Postfix, from userid 1000)
        id 6E44E60C5F; Tue,  4 Dec 2018 06:22:40 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=codeaurora.org;
        s=default; t=1543904560;
        bh=Lv2XBcuSXkrmN8EsjbZ9MbXd0WFbe8RpTHrG5p9Ik0E=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=N2VzMJXcBLLJWzzLAzpauve2glPvkXbbXhs5R9taiX/k6OZCz2iEtR96BM8XRFBGQ
         Hpwaafgl1giMZcXixrjFXVWhuq6AljM0S4a46CjPZgqJ82mhAUrMncp4Sm0zMIgNHS
         l9HHphwOA56g/JjxZenI5i+sSWxl14EOJJvl6h9c=
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
        pdx-caf-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-2.7 required=2.0 tests=ALL_TRUSTED,BAYES_00,
        DKIM_INVALID,DKIM_SIGNED autolearn=no autolearn_force=no version=3.4.0
Received: from blr-ubuntu-41.ap.qualcomm.com (blr-bdr-fw-01_globalnat_allzones-outside.qualcomm.com [103.229.18.19])
        (using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
        (No client certificate requested)
        (Authenticated sender: vivek.gautam@smtp.codeaurora.org)
        by smtp.codeaurora.org (Postfix) with ESMTPSA id E2ABD609F3;
        Tue,  4 Dec 2018 06:22:32 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=codeaurora.org;
        s=default; t=1543904558;
        bh=Lv2XBcuSXkrmN8EsjbZ9MbXd0WFbe8RpTHrG5p9Ik0E=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=YMA6L1b7vvAKUef547279LWXwnoh6xto4G5Y/o64SuXKFUGdX/sSnhrqBLvrNq55/
         N1zeJUOfRA4S6MK3U8JFoFzLDserg1YL3HVUiKmuM1jNtwlaqmAoASQAkKTKsRJ0ge
         ctYnbbN3KOfjhzdmYu0ob0Eahkt/Wn/zPdRgqM4g=
DMARC-Filter: OpenDMARC Filter v1.3.2 smtp.codeaurora.org E2ABD609F3
Authentication-Results: pdx-caf-mail.web.codeaurora.org; dmarc=none (p=none dis=none) header.from=codeaurora.org
Authentication-Results: pdx-caf-mail.web.codeaurora.org; spf=none smtp.mailfrom=vivek.gautam@codeaurora.org
From: Vivek Gautam <vivek.gautam@codeaurora.org>
To: joro@8bytes.org, robh+dt@kernel.org, robin.murphy@arm.com,
        will.deacon@arm.com, iommu@lists.linux-foundation.org,
        devicetree@vger.kernel.org
Cc: alex.williamson@redhat.com, mark.rutland@arm.com,
        rjw@rjwysocki.net, robdclark@gmail.com,
        linux-kernel@vger.kernel.org, linux-pm@vger.kernel.org,
        freedreno@lists.freedesktop.org, sboyd@kernel.org,
        tfiga@chromium.org, jcrouse@codeaurora.org,
        sricharan@codeaurora.org, m.szyprowski@samsung.com,
        architt@codeaurora.org, linux-arm-msm@vger.kernel.org,
        thor.thayer@linux.intel.com,
        Vivek Gautam <vivek.gautam@codeaurora.org>
Subject: [PATCH v19 1/5] iommu/arm-smmu: Add pm_runtime/sleep ops
Date: Tue,  4 Dec 2018 11:52:09 +0530
Message-Id: <20181204062213.6875-2-vivek.gautam@codeaurora.org>
X-Mailer: git-send-email 2.16.1.72.g5be1f00a9a70
In-Reply-To: <20181204062213.6875-1-vivek.gautam@codeaurora.org>
References: <20181204062213.6875-1-vivek.gautam@codeaurora.org>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From: Sricharan R <sricharan@codeaurora.org>

The smmu needs to be functional only when the respective
master's using it are active. The device_link feature
helps to track such functional dependencies, so that the
iommu gets powered when the master device enables itself
using pm_runtime. So by adapting the smmu driver for
runtime pm, above said dependency can be addressed.

This patch adds the pm runtime/sleep callbacks to the
driver and the corresponding bulk clock handling for all
the clocks needed by smmu.

Also, while we enable the runtime pm, add a pm sleep suspend
callback that pushes devices to low power state by turning
the clocks off in a system sleep.
Add corresponding clock enable path in resume callback as well.

Signed-off-by: Sricharan R <sricharan@codeaurora.org>
Signed-off-by: Archit Taneja <architt@codeaurora.org>
[Thor: Rework to get clocks from device tree]
Signed-off-by: Thor Thayer <thor.thayer@linux.intel.com>
[vivek: rework for clock and pm ops]
Signed-off-by: Vivek Gautam <vivek.gautam@codeaurora.org>
Reviewed-by: Tomasz Figa <tfiga@chromium.org>
Tested-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
Reviewed-by: Robin Murphy <robin.murphy@arm.com>
Tested-by: Thor Thayer <thor.thayer@linux.intel.com>
---

Changes since v18:
 - Replaced the entire clock bulk data filling and handling with
   devm_clk_bulk_get_all().

 drivers/iommu/arm-smmu.c | 58 +++++++++++++++++++++++++++++++++++++++++++++---
 1 file changed, 55 insertions(+), 3 deletions(-)

diff --git a/drivers/iommu/arm-smmu.c b/drivers/iommu/arm-smmu.c
index 5a28ae892504..602b67d4f2d6 100644
--- a/drivers/iommu/arm-smmu.c
+++ b/drivers/iommu/arm-smmu.c
@@ -48,6 +48,7 @@
 #include <linux/of_iommu.h>
 #include <linux/pci.h>
 #include <linux/platform_device.h>
+#include <linux/pm_runtime.h>
 #include <linux/slab.h>
 #include <linux/spinlock.h>
 
@@ -206,6 +207,8 @@ struct arm_smmu_device {
 	u32				num_global_irqs;
 	u32				num_context_irqs;
 	unsigned int			*irqs;
+	struct clk_bulk_data		*clks;
+	int				num_clks;
 
 	u32				cavium_id_base; /* Specific to Cavium */
 
@@ -1947,7 +1950,7 @@ struct arm_smmu_match_data {
 };
 
 #define ARM_SMMU_MATCH_DATA(name, ver, imp)	\
-static struct arm_smmu_match_data name = { .version = ver, .model = imp }
+static const struct arm_smmu_match_data name = { .version = ver, .model = imp }
 
 ARM_SMMU_MATCH_DATA(smmu_generic_v1, ARM_SMMU_V1, GENERIC_SMMU);
 ARM_SMMU_MATCH_DATA(smmu_generic_v2, ARM_SMMU_V2, GENERIC_SMMU);
@@ -2150,6 +2153,17 @@ static int arm_smmu_device_probe(struct platform_device *pdev)
 		smmu->irqs[i] = irq;
 	}
 
+	err = devm_clk_bulk_get_all(dev, &smmu->clks);
+	if (err < 0) {
+		dev_err(dev, "failed to get clocks %d\n", err);
+		return err;
+	}
+	smmu->num_clks = err;
+
+	err = clk_bulk_prepare_enable(smmu->num_clks, smmu->clks);
+	if (err)
+		return err;
+
 	err = arm_smmu_device_cfg_probe(smmu);
 	if (err)
 		return err;
@@ -2236,6 +2250,9 @@ static int arm_smmu_device_remove(struct platform_device *pdev)
 
 	/* Turn the thing off */
 	writel(sCR0_CLIENTPD, ARM_SMMU_GR0_NS(smmu) + ARM_SMMU_GR0_sCR0);
+
+	clk_bulk_disable_unprepare(smmu->num_clks, smmu->clks);
+
 	return 0;
 }
 
@@ -2244,15 +2261,50 @@ static void arm_smmu_device_shutdown(struct platform_device *pdev)
 	arm_smmu_device_remove(pdev);
 }
 
-static int __maybe_unused arm_smmu_pm_resume(struct device *dev)
+static int __maybe_unused arm_smmu_runtime_resume(struct device *dev)
 {
 	struct arm_smmu_device *smmu = dev_get_drvdata(dev);
+	int ret;
+
+	ret = clk_bulk_enable(smmu->num_clks, smmu->clks);
+	if (ret)
+		return ret;
 
 	arm_smmu_device_reset(smmu);
+
 	return 0;
 }
 
-static SIMPLE_DEV_PM_OPS(arm_smmu_pm_ops, NULL, arm_smmu_pm_resume);
+static int __maybe_unused arm_smmu_runtime_suspend(struct device *dev)
+{
+	struct arm_smmu_device *smmu = dev_get_drvdata(dev);
+
+	clk_bulk_disable(smmu->num_clks, smmu->clks);
+
+	return 0;
+}
+
+static int __maybe_unused arm_smmu_pm_resume(struct device *dev)
+{
+	if (pm_runtime_suspended(dev))
+		return 0;
+
+	return arm_smmu_runtime_resume(dev);
+}
+
+static int __maybe_unused arm_smmu_pm_suspend(struct device *dev)
+{
+	if (pm_runtime_suspended(dev))
+		return 0;
+
+	return arm_smmu_runtime_suspend(dev);
+}
+
+static const struct dev_pm_ops arm_smmu_pm_ops = {
+	SET_SYSTEM_SLEEP_PM_OPS(arm_smmu_pm_suspend, arm_smmu_pm_resume)
+	SET_RUNTIME_PM_OPS(arm_smmu_runtime_suspend,
+			   arm_smmu_runtime_resume, NULL)
+};
 
 static struct platform_driver arm_smmu_driver = {
 	.driver	= {
-- 
QUALCOMM INDIA, on behalf of Qualcomm Innovation Center, Inc. is a member
of Code Aurora Forum, hosted by The Linux Foundation

