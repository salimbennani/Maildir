Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:45:25 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id C916958042F;
	Thu,  6 Dec 2018 04:26:47 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 04:26:47 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AQ8PzHRwR46dveZnXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0O8VIvad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWpPUNhMWSJPAY2y?=
 =?us-ascii?q?aIkAD+QOMuhXtIn9v1kDoACiCQSvHu7j1iVFimPq0aA8zu8vERvG3AslH98WrH?=
 =?us-ascii?q?nUqsj6NL0MXuG10aLGyDLDb/VR2Tfj8ofIdhchoe+RVr93a8XRz1QgFxnbgVSQ?=
 =?us-ascii?q?qozlOS2V1uAWvmiU6OpgUu2vi2o5pA1rvjevwcIsh5DPi4kIyV7E7T10zJgpKd?=
 =?us-ascii?q?C8UkJ3fNCpHIVKuy2HNIZ6XtkuTmBqtSoi1LEJo4K3cDQPxZklwxPQdeCLfo2V?=
 =?us-ascii?q?7h/jUeudPCt0iXdrdb6ihBu+7U2tx+LhWsm601tHqyRInsXRunwR0hHT5MaHR/?=
 =?us-ascii?q?pg8kqnxD2BzRrc6vteLkAxjafbK4Auwro3lpcLr0TDETH5mF/sgK+VaEok4O6o?=
 =?us-ascii?q?5PrjYrn8oZ+cLYB0hhn/MqQohMO/Hfw1PhYSU2Wf4+iwybPu8VPjTLlXjfA6jr?=
 =?us-ascii?q?PVvZHYKMgDo662GQ5V0oIt6xalCDem1cwVnX0GLFJDZRKGgJHlO1LQL/DiC/ew?=
 =?us-ascii?q?nVCsnC5sx/HIOL3uHI/NI2PdkLfuY7l98VRQyAktwtBF4ZJbFLUBLOj0Wk/ru9?=
 =?us-ascii?q?zUFgU5PBCsw+b7FNV90ZsTWWaOAq+aLqzeq1CJ5v80LumIZY8Vviv9Kvc/6/7v?=
 =?us-ascii?q?i385hUESfa2z0ZQLb3C4G+xsI1+Fbnr0ntcBDWAKsxI+TOPwiV2CTSRcZ3GoU6?=
 =?us-ascii?q?I8+zE0EoSmDYjYS4CpgbyB2jq7H5JMamBHDFCMDWnnd4GeV/gQbyKSJ9drkiYY?=
 =?us-ascii?q?Wri5V48hyRauuRf4y7pgMOXY4C4YtZXl1Nhz4O3ejhUy9T1yD8SA3GCBVWB0nm?=
 =?us-ascii?q?UURzAo2KBzu1ByylCG0aJgmfxXCcRT5+9VUgc9LZPT1fd6C9D1WgLCZNuJUkyp?=
 =?us-ascii?q?Qte9DDE1T9IxxcIOYklnF9WjiBDDwzSlA7sPm7OXA5w097rW32LtKMZl13bGyK?=
 =?us-ascii?q?4hgkElQsRVM22qnKp/9wnJCI7PnEWUjKKqdaUa3C7Q+2aP12uOvEdEUAFuVaXJ?=
 =?us-ascii?q?R2wQZkzTrd7h/EPNU6euCag7MgtG0cONN7FFasP3gllcRPfsItLeY3mvlGe2Ah?=
 =?us-ascii?q?qIwrCMbI/ue2gG2CXdCU4Ekx0c/HqcNAg+ADuhrHzaDDB0CV3vZEbs+/FkqHyn?=
 =?us-ascii?q?Vk800x2Kb0p52rWo4BEVm+KTR+kT3r0evichsCt7HFCm0tLSCtqAoRdhfapGbd?=
 =?us-ascii?q?M85ldHyXzWtwhnMpO8KKBig0YUcx5rsEP2yxV3FoJAnNA2rHMryQpyLr6Y0FNB?=
 =?us-ascii?q?dj+CwZD8ILrXKnP2/BCuba7W1UrT0NKX+qcJ9fQ5pE/vvACvFko+7Xpn18NZ3G?=
 =?us-ascii?q?eb5pXPFAASS47+Ul4r9xhmoLHXejMy54fK2nxjL6a1siXO1Mk0BOQ40BmgedRf?=
 =?us-ascii?q?MKSaFALpF80aBs6uKPElmlSzbxIEOvxS+7AwP8+8a/SG36urNv56nD26lWRH/J?=
 =?us-ascii?q?x90kWU+it8V+7ExYoKz+uZ3wuHTTj8ilihv9vzmYBFYzESA2W+xTLlBI5Xeq19?=
 =?us-ascii?q?Y4ILBX2yLM2ww9V0n4TtVGJA9F6/G1MG39ekeQCTb1PhxwJQz1kYoXu9lSu+0T?=
 =?us-ascii?q?N0iTAporOD0yPUx+TtaQQIOnRMRGlkllrsJYm0j9YHXEmndQQplR2l5VrkyKhf?=
 =?us-ascii?q?vqhwM27TQUJQdSjsM25iSrewtqaFY8NX6JIosD9bUeSmbVCBV779pQAX0yfiH2?=
 =?us-ascii?q?tY2TA6eCumupT/nxxmlm2dKGx/o2beecF13R3f/sDTReZN3joaQyl1kTvXCUKm?=
 =?us-ascii?q?P9mq/tWUkI3PsvukWGKiVZ1TcC/rwp2GtCag4W1qABu/n+28m9H9EAg61zP72M?=
 =?us-ascii?q?duVSnSsBn8ZYzr3bygMe17ZkloGEP8681iF4B+iIQwg4sc2XobhpWT5ncHlWbz?=
 =?us-ascii?q?MdNG2aPxdnYNRDgLw8LL7wjhwkFsMnWJx4fhXHWH3sRhf8W6Yn8R2i8l7MBFEq?=
 =?us-ascii?q?aU4KZEnStouFW4qw3RbON5njccz/su9XEbj/sIuAor0iWSHLQSEVNEMizrkhSC?=
 =?us-ascii?q?98q+o7lPZGazbbiw01JzndWgDLGBuA5QQnj4dYk5HS9s8Mp/KknD32Pp6oHrY9?=
 =?us-ascii?q?TQadMTthuJkxbPleRVKZQxluYUiipjI27yoXoly+sjhxx0wZ66pJSHK3lq/K+h?=
 =?us-ascii?q?Hh5YMTj1a9kS+z73i6Zeg92W35uuHph6HjULXZ3oTe+nET4ItPTnMRqOHyM4qn?=
 =?us-ascii?q?uBBbXfGgqf4l98r33TC5CrK22XJH4BwNp5XhadI0hfgB0OUDU+g540DQSqxM3n?=
 =?us-ascii?q?cEdk6TEd/F/4qh1Qyu12MxnzSHvQpACtaj0sUpiQMAJW7h1e50fSKcGe7Ph8Hy?=
 =?us-ascii?q?RG8Z26tgCNNnaXZwdVDWEKR0yEAUrsPqK16NnE8uiYAPe+LvTUbbWPr+xeS+mH?=
 =?us-ascii?q?xZa13oR6+DaMM92FPmN+AP0jxkpDQXd5FtzZmjUIViwXjj/NYNSdpBum4S13qc?=
 =?us-ascii?q?a/8PvwVQLr5IuPDaZSMNp19xC3h6eDK/CfhCJjJTlE0ZMMwGfCyKID014KlyFu?=
 =?us-ascii?q?az6tHKwAtSHTTaLQmaxXDx8BZyNwLstI6K080RdXOc7GkdP4zbp4jv8zC1dYWl?=
 =?us-ascii?q?3tgMCpZcoWI26jMFPLHlqENLODJTfT2cH4fbu8SaFMjOVTrxC/oyubHFT5Pjud?=
 =?us-ascii?q?lzjlTRSvMeBXgSGfPRxevpy9cxl3BWjiStLmdgO0MNttgTIqxr00g2vANXQAPj?=
 =?us-ascii?q?hkb0NNsrqQ4DtEgvV+HmxN9GZqIfOYlCaZ8ebYLI0bsf9qAiRyiuJb7242y7pT?=
 =?us-ascii?q?7CFYWvN1nDHeocJpo1GjiuOP0CZoUAJSqjZXg4KGpUVjNr/f9plFWHbE+goC7G?=
 =?us-ascii?q?SQCxsQodtlBcbiu6RRytjJiaLyJy1O89PS/csAGcfULNiLP2YmMRrsS3boC14s?=
 =?us-ascii?q?SzKxOHCXvV1UmvCU93vd+pEgu5HmmZwPTJdFVUYpC/QIGEMjF9sHdtM/dzcpgb?=
 =?us-ascii?q?edgMMSrUK5sBDJScNZudiTWfaTDfj1ADmeirZAal0Dxrauacw/M4znwV0qVEhn?=
 =?us-ascii?q?n4PUUx7cQ8FQoSp/RgAzp0pJ/T51SWhlnwrOYx+k5H4VXdu9hB8wgxA2Ne8k6D?=
 =?us-ascii?q?7o4lFxI1PQpS05i2E4g9CjijeUJnq5E6a0Wcl6BiP/sE55Zoz6RwIzYQC7lkti?=
 =?us-ascii?q?HD7eQvRaiL42MShAiBXdoodIAf4UaaRBbQMd37nDbPEA1VVatzXhzkhCs6+NIJ?=
 =?us-ascii?q?1ujgY1OburtW5H3Uo3Zd0tIITUJaxU3h1egb+Isia01+c3hggEKBBJuEabYi1A?=
 =?us-ascii?q?glEUMrAgK2L8++V26kqYhidHcW4Af/Mwp7Rh8UZrf6ymzinjm5JOMUmsM+qeIr?=
 =?us-ascii?q?mC8zzGmcOTS0400EIFjVJt8r9x3sMuNUGTUhZrhJ6YDR9BB9vEJgBYdYIG8XHJ?=
 =?us-ascii?q?dmCcoOPCwJ9vF4ynE6bjSurY8O44i1ypVCMgBZgN6IxVEpCy3QfdJN37LbgtwA?=
 =?us-ascii?q?8oog/sIQPBRN1TdFqhkToco8yi0pJzld1UPD1bC2RwKiW6+6jaoicugfyKRtBw?=
 =?us-ascii?q?ZW0VCM9MfF8sWcbypGYf915BATW6yOcQzkLKuzL2pyncASP5R8pmZeyPZBRqTt?=
 =?us-ascii?q?qx/GN7u4mwhlmf15LaIWjgfYBnu9nA7ssZqoyBBvcSSqNy5QOUo4BFQzSOWnHV?=
 =?us-ascii?q?HNi+KtCkc4Axadj9FWy3VFeyoz0ySMj1MZCmKa3exUnHSItOrMGmzSw/ONW9ET?=
 =?us-ascii?q?wAFhE48+4O6bhgTQkCZYcrJBu25wd4MLawdkPQ+8+oTy6HJCFZSvBZy63ubqZR?=
 =?us-ascii?q?wwIldOm2wj0sQ8d+h6OU8FQMQJVCp1mYjc2jepVTVC/tUDQJeATVpC490XNhK/?=
 =?us-ascii?q?o/x+Ah6BfJt0QMdTGNaOFtLmdDuod4TXyILHo+KXA/Tl/ZrYPZ/gul2fhG8DFQ?=
 =?us-ascii?q?kNVU+elEtmXusJjCZj6lRK2sr9PSqSV2KZAFqrF8ebf/L9SPro+Wyj/EUJTPux?=
 =?us-ascii?q?eZeCq7EedKlN9NJi5RXPhPnyciI8NQ/cJk6Ek8Hv03P7tXD7Mw7uSwcSJ4JSoT?=
 =?us-ascii?q?yzIJEZ2G0SBEg+25nbDdk0HUOJcrKxUC9ZlPnPMSVCl5Zi4Rvqi+T56QnGiBDi?=
 =?us-ascii?q?APIQEO/UFA4wkoiIB9ZKbm7ZDOQZsKzCRZ57pwUy3WBtxr+kH9R2W+n1f1UrOi?=
 =?us-ascii?q?nvav0AYUy+jjlpEfWRhiGQ1U3eMTlUYyLrxzA60RpZLR9D6Oe1nzsG/kxK2hPl?=
 =?us-ascii?q?YVgcnVcUDoSZHdvHDnXwUC9nAOA4xC0nfSEdIViQU9IKIqokhcZYWjUkXg7jcn?=
 =?us-ascii?q?gYNzEP3wUcGt2kZgrnwbRiOmO8ROBvsgs1/NXjBhJZexp8bLIZJXF0ZW9IeQuh?=
 =?us-ascii?q?96l0NqLSe9zoQUf8hL7iQBTTtJvzG1s9y1R8lOn8RxCslfcZ9Ep37hFfYca9Cq?=
 =?us-ascii?q?qHost+mqkyeB9g=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AXAACUFAlch0O0hNFkHgEGBwaBUQkLA?=
 =?us-ascii?q?YEwgjsnmgk5kkGEeYEkA0wSAQEYEwGHViI0CQ0BAwEBAQEBAQIBEwEBAQgNCQg?=
 =?us-ascii?q?pIwyCNiQBgmIDAwECJAsBDQEBHhkBBQkBARg4AzEBBQEcBgESBYMcggIBBJoAP?=
 =?us-ascii?q?IodgWwzgnYBAQWBBAEBhiAIEoddgxOBHBeBf4ERM4V9Aoc8iTeBb5U7CYIkgxS?=
 =?us-ascii?q?FA4cLGIlhh1QsiGKPVgIEAgQFAgUPIYElbIEhTSODPIIbDBcSgziKHAE3PzKBB?=
 =?us-ascii?q?QEBimcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AXAACUFAlch0O0hNFkHgEGBwaBUQkLAYEwgjsnmgk5kkG?=
 =?us-ascii?q?EeYEkA0wSAQEYEwGHViI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmIDA?=
 =?us-ascii?q?wECJAsBDQEBHhkBBQkBARg4AzEBBQEcBgESBYMcggIBBJoAPIodgWwzgnYBAQW?=
 =?us-ascii?q?BBAEBhiAIEoddgxOBHBeBf4ERM4V9Aoc8iTeBb5U7CYIkgxSFA4cLGIlhh1Qsi?=
 =?us-ascii?q?GKPVgIEAgQFAgUPIYElbIEhTSODPIIbDBcSgziKHAE3PzKBBQEBimcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,322,1539673200"; 
   d="scan'208";a="54085003"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 06 Dec 2018 04:26:46 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729424AbeLFM0m (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 6 Dec 2018 07:26:42 -0500
Received: from mail-wm1-f65.google.com ([209.85.128.65]:36116 "EHLO
        mail-wm1-f65.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1729681AbeLFMZK (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 6 Dec 2018 07:25:10 -0500
Received: by mail-wm1-f65.google.com with SMTP id a18so852282wmj.1
        for <linux-kernel@vger.kernel.org>; Thu, 06 Dec 2018 04:25:08 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding;
        bh=sISq/ZW0TVJBTVtL8WDFsSQvFMzwvGrKZuo3jHEW0rs=;
        b=EIaG8FbVvjfEZBwPVnSoxYhmFaPSG+vHC9ub8Q9UvflzLci7qWq1MIvHhHMYHp+qDe
         aYCb2A46h0HyozZYwd+MH09I2ZtN17SqYJSvjpXS3OWlMZyrAYkp8oRdU0Rvsn1ii2PH
         hgxdrby1RcW8uBjfYxUDDMAMeg/GAfy+QZp72weuTc9DFFG8WxesnWT3ce5AlEqG1XPu
         NUxxu1xI3NGg4i+djtH88GpUdqSqviOaUnu2vrK/1hHU/TEC5YZsyp6TnaTdAvOQTaUe
         zkHqUUKT1p1wYmKjUILEhMirxb9nhAqh+8GNSNz+rwKkyZke8WRAAJA6DaJN86coRzJI
         SjIA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=sISq/ZW0TVJBTVtL8WDFsSQvFMzwvGrKZuo3jHEW0rs=;
        b=Jn2nwR/RxKUsTIO04mvKW700XbJU8vASaiIyI001imhFbwAN3LMy/AYZxJ+RTNXjCG
         luOWXzqv1mDm6VLtT5Uq0HSRwl8Mi496+jjIrI7ZlGA/shXkalKmDQjMmnq7oGQWrRYC
         KVonX9prEatb8WTRbGuG+ICuRx5bOGMRnGz3E6ig0pWNYC2SfcrF9p1AnBmV4iJQdBJw
         lhV+KVx1t+WGlDA6ukblGpup8lvT8g9wv1rXTfNkatTjtq8+G587YgC+XQf+Sbk0Vygk
         WTMoRdDnn3ZWbZACJdwG8EPjEnjenfrw8pTn9mzVJfkp9oW2lDANB1tfzYAQa8qPeaCA
         rdow==
X-Gm-Message-State: AA+aEWYXr7q/kgiueKWXqj15zBeeigbgMrlrDVqlQhqTKXkzGLO7is+s
        f3U52qK10yJ0Ezokw5MWG7PIqA==
X-Google-Smtp-Source: AFSGD/Uvku6Y8UP5YFct8xBdwbQSBOubcGBRJqYe7H9p2WfZHwE/gOIPH+PVv5TfLbG/g+zd551lTw==
X-Received: by 2002:a1c:e088:: with SMTP id x130mr18266740wmg.23.1544099108033;
        Thu, 06 Dec 2018 04:25:08 -0800 (PST)
Received: from andreyknvl0.muc.corp.google.com ([2a00:79e0:15:10:3180:41f8:3010:ff61])
        by smtp.gmail.com with ESMTPSA id j8sm339988wrt.40.2018.12.06.04.25.06
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Thu, 06 Dec 2018 04:25:07 -0800 (PST)
From: Andrey Konovalov <andreyknvl@google.com>
To: Andrey Ryabinin <aryabinin@virtuozzo.com>,
        Alexander Potapenko <glider@google.com>,
        Dmitry Vyukov <dvyukov@google.com>,
        Catalin Marinas <catalin.marinas@arm.com>,
        Will Deacon <will.deacon@arm.com>,
        Christoph Lameter <cl@linux.com>,
        Andrew Morton <akpm@linux-foundation.org>,
        Mark Rutland <mark.rutland@arm.com>,
        Nick Desaulniers <ndesaulniers@google.com>,
        Marc Zyngier <marc.zyngier@arm.com>,
        Dave Martin <dave.martin@arm.com>,
        Ard Biesheuvel <ard.biesheuvel@linaro.org>,
        "Eric W . Biederman" <ebiederm@xmission.com>,
        Ingo Molnar <mingo@kernel.org>,
        Paul Lawrence <paullawrence@google.com>,
        Geert Uytterhoeven <geert@linux-m68k.org>,
        Arnd Bergmann <arnd@arndb.de>,
        "Kirill A . Shutemov" <kirill.shutemov@linux.intel.com>,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        Kate Stewart <kstewart@linuxfoundation.org>,
        Mike Rapoport <rppt@linux.vnet.ibm.com>,
        kasan-dev@googlegroups.com, linux-doc@vger.kernel.org,
        linux-kernel@vger.kernel.org, linux-arm-kernel@lists.infradead.org,
        linux-sparse@vger.kernel.org, linux-mm@kvack.org,
        linux-kbuild@vger.kernel.org
Cc: Kostya Serebryany <kcc@google.com>,
        Evgeniy Stepanov <eugenis@google.com>,
        Lee Smith <Lee.Smith@arm.com>,
        Ramana Radhakrishnan <Ramana.Radhakrishnan@arm.com>,
        Jacob Bramley <Jacob.Bramley@arm.com>,
        Ruben Ayrapetyan <Ruben.Ayrapetyan@arm.com>,
        Jann Horn <jannh@google.com>,
        Mark Brand <markbrand@google.com>,
        Chintan Pandya <cpandya@codeaurora.org>,
        Vishwath Mohan <vishwath@google.com>,
        Andrey Konovalov <andreyknvl@google.com>
Subject: [PATCH v13 12/25] kasan: preassign tags to objects with ctors or SLAB_TYPESAFE_BY_RCU
Date: Thu,  6 Dec 2018 13:24:30 +0100
Message-Id: <f158a8a74a031d66f0a9398a5b0ed453c37ba09a.1544099024.git.andreyknvl@google.com>
X-Mailer: git-send-email 2.20.0.rc1.387.gf8505762e3-goog
In-Reply-To: <cover.1544099024.git.andreyknvl@google.com>
References: <cover.1544099024.git.andreyknvl@google.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

An object constructor can initialize pointers within this objects based on
the address of the object. Since the object address might be tagged, we
need to assign a tag before calling constructor.

The implemented approach is to assign tags to objects with constructors
when a slab is allocated and call constructors once as usual. The
downside is that such object would always have the same tag when it is
reallocated, so we won't catch use-after-frees on it.

Also pressign tags for objects from SLAB_TYPESAFE_BY_RCU caches, since
they can be validy accessed after having been freed.

Reviewed-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
Reviewed-by: Dmitry Vyukov <dvyukov@google.com>
Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
---
 mm/slab.c |  2 +-
 mm/slub.c | 24 ++++++++++++++----------
 2 files changed, 15 insertions(+), 11 deletions(-)

diff --git a/mm/slab.c b/mm/slab.c
index 26f60a22e5e0..27859fb39889 100644
--- a/mm/slab.c
+++ b/mm/slab.c
@@ -2574,7 +2574,7 @@ static void cache_init_objs(struct kmem_cache *cachep,
 
 	for (i = 0; i < cachep->num; i++) {
 		objp = index_to_obj(cachep, page, i);
-		kasan_init_slab_obj(cachep, objp);
+		objp = kasan_init_slab_obj(cachep, objp);
 
 		/* constructor could break poison info */
 		if (DEBUG == 0 && cachep->ctor) {
diff --git a/mm/slub.c b/mm/slub.c
index e739d46600b9..08740c3f3745 100644
--- a/mm/slub.c
+++ b/mm/slub.c
@@ -1451,16 +1451,17 @@ static inline bool slab_free_freelist_hook(struct kmem_cache *s,
 #endif
 }
 
-static void setup_object(struct kmem_cache *s, struct page *page,
+static void *setup_object(struct kmem_cache *s, struct page *page,
 				void *object)
 {
 	setup_object_debug(s, page, object);
-	kasan_init_slab_obj(s, object);
+	object = kasan_init_slab_obj(s, object);
 	if (unlikely(s->ctor)) {
 		kasan_unpoison_object_data(s, object);
 		s->ctor(object);
 		kasan_poison_object_data(s, object);
 	}
+	return object;
 }
 
 /*
@@ -1568,16 +1569,16 @@ static bool shuffle_freelist(struct kmem_cache *s, struct page *page)
 	/* First entry is used as the base of the freelist */
 	cur = next_freelist_entry(s, page, &pos, start, page_limit,
 				freelist_count);
+	cur = setup_object(s, page, cur);
 	page->freelist = cur;
 
 	for (idx = 1; idx < page->objects; idx++) {
-		setup_object(s, page, cur);
 		next = next_freelist_entry(s, page, &pos, start, page_limit,
 			freelist_count);
+		next = setup_object(s, page, next);
 		set_freepointer(s, cur, next);
 		cur = next;
 	}
-	setup_object(s, page, cur);
 	set_freepointer(s, cur, NULL);
 
 	return true;
@@ -1599,7 +1600,7 @@ static struct page *allocate_slab(struct kmem_cache *s, gfp_t flags, int node)
 	struct page *page;
 	struct kmem_cache_order_objects oo = s->oo;
 	gfp_t alloc_gfp;
-	void *start, *p;
+	void *start, *p, *next;
 	int idx, order;
 	bool shuffle;
 
@@ -1651,13 +1652,16 @@ static struct page *allocate_slab(struct kmem_cache *s, gfp_t flags, int node)
 
 	if (!shuffle) {
 		for_each_object_idx(p, idx, s, start, page->objects) {
-			setup_object(s, page, p);
-			if (likely(idx < page->objects))
-				set_freepointer(s, p, p + s->size);
-			else
+			if (likely(idx < page->objects)) {
+				next = p + s->size;
+				next = setup_object(s, page, next);
+				set_freepointer(s, p, next);
+			} else
 				set_freepointer(s, p, NULL);
 		}
-		page->freelist = fixup_red_left(s, start);
+		start = fixup_red_left(s, start);
+		start = setup_object(s, page, start);
+		page->freelist = start;
 	}
 
 	page->inuse = page->objects;
-- 
2.20.0.rc1.387.gf8505762e3-goog

