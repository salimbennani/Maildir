Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:45:21 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 96E7958042F;
	Thu,  6 Dec 2018 04:25:58 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by fmsmga006-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 04:25:58 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AQUAwaxGAtrp/9EfinzjM3p1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ74os+ybnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJVyJPHJ6y?=
 =?us-ascii?q?YYUMAeQGP+lYoYbyqVQVrRumBwShH//jxzxSi3Pqx6A2z/gtHAfb1wIgBdIOt3?=
 =?us-ascii?q?HUoc3pOacUTO+11rfHzDXeZP1T3jf97o/Icg47rvGIWrJwb9faxE41GAPDk1qQ?=
 =?us-ascii?q?s5LqPjOW1uQLrWib6/FtVe2oi24gpAFxpiagyt0whYnOg4IY01bJ/jh6zoYtPd?=
 =?us-ascii?q?C0VlJ3bNq+HJdNuSyWKZF6Tt4hTm10oio3y78LtYalcCcQ1Jgr2xvSZv6DfoeW?=
 =?us-ascii?q?/h7uUfudLDd9iX54ZL6yghi//VWjx+HgU8S530tGriRGn9TJuH0BywHf5tSCR/?=
 =?us-ascii?q?tz8Ees2CuD2gbO4e9eO080j7DUK5s5z74wiJUTtUPDEzfomEX5kqCWbF8o+uu2?=
 =?us-ascii?q?5OT9ZLXpuJucO5VzigHkPaQigs2/AeImPQgSR2WX5/iw2bn58UHkTrhGkOc6nr?=
 =?us-ascii?q?TavZzGP8gWp6y0DxdQ0ok56ha/Czmm0M4fnXkCNF9FfBOHj470O1DBOfz4Dumw?=
 =?us-ascii?q?g06qkDh1w/DKJ7rhA5vLLnfdirfsZqh960FCxwop19xf5IxbCqsHIP3tXk/9rt?=
 =?us-ascii?q?vYDgU2MwCs2eboFM191p8CWWKIGqKZNKLSsVyW6e41LOiMeZQYuDL8K/gj+v7v?=
 =?us-ascii?q?gmU1mV4bfam1w5QXbGq0EehhI0WceXDsmMsOEX8WvgoiS+znkF2CXiRSZ3auRa?=
 =?us-ascii?q?084Ss3CIK7DYjZQICtj6eM3CO6Hp1Qe2BHBUqAEXbud4WYRfgMbDieLdNmkjwB?=
 =?us-ascii?q?TbKhUZMu1QmytA/mzLpqNujU+ioGup7519h14OvTlRc19TFvC8Sd0meNT3x7n2?=
 =?us-ascii?q?8SRj822rx/rlJ5yluZzad4hPlYH8RJ5/xVSgc6KYLcz+tiBt/oQQLBftCJSFW8?=
 =?us-ascii?q?TtW8Gz4xTMk8w9sPY0Z7BtWjgQrP3yusA78JibOLAIY4/b7b33j0P8x90WrJ1L?=
 =?us-ascii?q?E9j1k6RctCLW6mibR59wTJA47Jkl+Wl6CldakH2C7N9WGDzXeBvU1CUQ5wV7nF?=
 =?us-ascii?q?Um4bZkfMsdv54UbCRae0Cbs7KgtB1dKCKqxSZ9L0l1pGWunsNM7eY22rnWewHg?=
 =?us-ascii?q?iHxrWLYIrueGUd2SHdBVMAkwAS+3aGKAc/Cj2go2LYEDxhC1bvb1nw/ul5rXOx?=
 =?us-ascii?q?VlU0wB2Sb019y7q1/QYYiuGGRPMNwL0IoichpC9yHFamwd3WDcGNpw5gfKVafN?=
 =?us-ascii?q?M8701L1WPftwxhIJOgK7puiUIZcwRyp0nuzQl4Cp1ckcg2q3Mn1BZyKaOd0FNG?=
 =?us-ascii?q?azOY3ZDxNqfLKmXo+xCvcarW2lDY0NaZ4aoP7PU4q1P+vACmDEYi8nNn08VL3H?=
 =?us-ascii?q?uY/JnFEA0SUZfpWEYt6xd6v63aYjU6547Mz3JsNbe7szDc1NMpHucq0QugcMpF?=
 =?us-ascii?q?P6OCFw/yFNMaCtOqKOwrnVipcx0FMPpT9K4yI8Opaf+G1LS3M+ZnmTKslX5H75?=
 =?us-ascii?q?xl0kKQ6yp8TfbF3pYYw/2CwgSLTTb9jFe7vcDxloBJfjUSHmu5ySj5C49dfKxy?=
 =?us-ascii?q?fYAXCWiwJ8273Mlxh5noW3RA7l6sG0sG2NO1eRqVd1H9xwxQ2lgNrny9hCS4yC?=
 =?us-ascii?q?Z4kzc3oaqF3SzC2vjtewADOmFWWmZil1DsIY6vgtAeXUioaRUplRS/6Ub7wahb?=
 =?us-ascii?q?uLpwL23JTUhUeCj2KnloUrGsubqaf85P9JQovD1XUeS9e1ybSqTxowAH0yPlBG?=
 =?us-ascii?q?ZewDE7dze3upT2hRB6iWSdLGpto3rdY81/2RDf5NnET/5LwjUGXDV4iSXQBlWk?=
 =?us-ascii?q?Pdmm58+Ul5TAsuC5TW6hTYdccSrozYOBsiu0+2tqDAa7n/CynN3nDAc73TX619?=
 =?us-ascii?q?lsSSXHshL8bpP32KS9NOJtZlNoC0Pk68pmBoF+lZM9hZEK1ngdnJmV/3sHkWHo?=
 =?us-ascii?q?PNVf2KL+amcNRDERz97U5gjlxFNsLnaTy43lUXWdx9NrZ8OmbWMOxiI988dKBb?=
 =?us-ascii?q?+X7LNenCt5uFq4rR/Lbvh7kTcQ0v8u6H8cg+EUtwsh1CSdArYOHUZGOSzgjQiH?=
 =?us-ascii?q?79e7rK9PfmagbaCw1FZindCmFLyCpwBcWHXjdZs4Ey5/8N5/ME7S333p8Y7rZs?=
 =?us-ascii?q?PQbd0Iux2QkhfAifVVKZ0rmvoLgypnJXzyvXk/x+Enihxu2ImwvJKbJGV14KK5?=
 =?us-ascii?q?HhlYOyXpZ8MU/zHhl6dfkdyQ34CyBZVhATQLUYDsTfKpFjISqPvmOxyPED06tn?=
 =?us-ascii?q?eUB77fERWD50dhqnLFC4qrOG2PJHkF0dViQwGQK1dFjwATWDU6g4Q1FgS3xMH6?=
 =?us-ascii?q?dEd55zYR5kP3qxdWy+JoMQX/XXnbpAuydjg0T52fJgJM7g5e/0fVLdCe7uVrEi?=
 =?us-ascii?q?Fa5JKhqRKCKneBawRUF20JWVGEB1P+Prmo/9bA6POVBu6/L/vIfLWPpvZSV/aO?=
 =?us-ascii?q?xZKzzIRm+yyAOdmIPnlnF/c7wFZMXWhlG8TFnDUCUywWlyXQb86CuRez4Ct3ot?=
 =?us-ascii?q?qk8PTsXgLv6pCCC79TMdVp5hC3jr2PN++WhCZlNzlY0okAymPPyLgaxFQSkT1h?=
 =?us-ascii?q?dyGxEbQcsi7AVKLQlbFWDx4YaCNzNdFE76Em3glKNs7UlMn11qNjjvMuD1dFVF?=
 =?us-ascii?q?rhmtymZMAQImG9Mk/HC1iPNLicOTLLxMT3a7umSbJMlOVUqwGwuTGDHkD5IzSM?=
 =?us-ascii?q?jCPpWA6vMO1WiCGbPQdTuIW8chZrFGjiQ8jqahy9MN9rkzI2xac4iW/NNW4ZKT?=
 =?us-ascii?q?J8aV9CrqWM7SNEhfVyA3BB7ntgLeWehymV9fXXKpYIvvttGSl0k+Na4HIny7pa?=
 =?us-ascii?q?9i1ERfp1mDfMod5quV2pju6Pyj9/WhpUtjlLnJ6LvVllOajB9phPQ3DE/BcM7W?=
 =?us-ascii?q?WWExsLpttlBcfpu6Bf0dXPkKPzKDFf89Pb58ccBs7UKN6ZP3olKxbmBDnUDA5W?=
 =?us-ascii?q?BQKsYEjZi1ZQgbmo53Sfr547rNC4kYAfQ7VaUl0zPu0bEFh4G84QJ9F8WTZy1f?=
 =?us-ascii?q?ayiMMY7HyyoQOZfMJGt4jKUPGVSaHgLDeVgKNsaBwPzrf1a48UM9u/k2Bna0Vg?=
 =?us-ascii?q?jcz0ClfTWs4F9iF/fxI3p1tl/395QWk+nUnib1XpqFQaCfewnxh+rwJkYOIk73?=
 =?us-ascii?q?+46F4rL17Lom01mVMwn9z+qTmLdXj6K6LmGclpCi7w/2Q8O5j8RU4hcgy2mQpo?=
 =?us-ascii?q?OT7PQLR5hqFlM2tsjVmY8bBPA/9HUapcYFc0zPSae/gymQBXrg2jxEla9a3ODp?=
 =?us-ascii?q?400EMDd5K2om0I/gV5cNkzbfjZJ7JM5lxRgL+e+yGvy+Y9yRMfIEBL93mdLmpA?=
 =?us-ascii?q?nUUSNfEcOjas9+pgoViHkiFAPnIRS/4jpP5C/1k4fe+HynSkm5hCIUP5G+GEJr?=
 =?us-ascii?q?6dvWnNj9XAFlU821gBik1D/LVsyu8sdE2bU01px7yUQVBBEMPYIklnfsxd9XXJ?=
 =?us-ascii?q?NXKLuP/Gh4BkOYq8G/rARPWL8q0ThxTgVCogAYlEy80bApiqmBXUJNnqarsM0w?=
 =?us-ascii?q?ks4iziPlDDB/NMLlbDuS0L6+u+wYR30JRDKzVVVWxnPWO957vMpgI3nveHdNM3?=
 =?us-ascii?q?ZH4AWc0DLH1gHIXwtjRYtDx/RH//+OMUxAWY6jb67GyEATP9YtZufvK8dRZtE8?=
 =?us-ascii?q?q3/jN5+K+z3xqf05PRICnfMtBks8WHveYboZmAI/BZV79wtwHbgYYOAzSSWnPL?=
 =?us-ascii?q?Wfq8OIL9bYIhJYjsA2u+VlWgkT8zRMrZM9GqIayFxwrvQNAQ+KaW0So/ffKsCi?=
 =?us-ascii?q?0TARd3qv8O4uooagAOeYYTZR/uqhR7MvLvI0GfyNr4By6EMz1aB9NS1+q/brpR?=
 =?us-ascii?q?h34ldOm24HI6SJ0wieW6pwpFDrILlBDawb6KL88WaijuBnFYfBuF7X46lnJgMu?=
 =?us-ascii?q?J02eci3B7Ntkc0NzGNafwvaWpYstV6DlSXdzE+JXA1SBe/l43K4kuM1qoO+iJb?=
 =?us-ascii?q?14Jby+BKs3jWup7ZfSKiX7GtpZzJsi0mK988rPs1ea/qPsbOj4/TgTXFUNGEsR?=
 =?us-ascii?q?aZXTGzDeZyntlWPTJWR+ROlWg5OMsA/41b5hx1HuI/JLEHMqA0oaitcyYsWTQK?=
 =?us-ascii?q?1TMxU4KGwSxEnOGxx/3bnBLWe5MnZlhMs5xZi91YXyNoSiwZo6CnWorMkHKcUS?=
 =?us-ascii?q?4AJwJXpQBN4h8Q04N3dcj774fSCpxB0Thbp7RzSCSPXp1p8UbrD2Kbm171TN2/?=
 =?us-ascii?q?nOGzmwFf1vTh1p8cQhE7QUxcwftG00IyLfR0JrMWs4ritj6TaVi8vWTj0uKqKV?=
 =?us-ascii?q?Bdj8rOeBmwCIvDqHq5STUV42YZbZFAxWuZFpkIlQd9LqExqxEEJIGgZ1a74jkM?=
 =?us-ascii?q?xJpgFLr+Utqkgx4hrHAbV2KpGcdAD+1Orl3aQntmboqtpZGjPI9dEUFK/5jIgl?=
 =?us-ascii?q?FVikh8ew2+z51CIsVK/HZYVT5DuziMv92sTOVM3sh5C5JKKdB67SSuUJhYMYSc?=
 =?us-ascii?q?9iVl8ofkzWXUrnVl6A+3?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ATAACUFAlch0O0hNFkHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGBMII7J4wTjXY5lzqBJANMEgEBGBMBh1YiNAkNAQMBAQEBAQECARMBAQE?=
 =?us-ascii?q?IDQkIKSMMgjYkAYJiAwMBAiQLAQ0BAR4ZAQUJAQEYOAMxAQUBHAYBEgWDHIICA?=
 =?us-ascii?q?QSaADyKHYFsM4J2AQEFgQQBAYYgCBKHXYMTgRwXgX+BRIV9Aoc8iyaVOwmCJIM?=
 =?us-ascii?q?UjA4YiWGHVCyIYo9WAgQCBAUCBQ8hgSVsgSFNI4M8ghsMF4NKihwBNz8ygQUBA?=
 =?us-ascii?q?YpnAQE?=
X-IPAS-Result: =?us-ascii?q?A0ATAACUFAlch0O0hNFkHQEBBQEHBQGBUQgBCwGBMII7J4w?=
 =?us-ascii?q?TjXY5lzqBJANMEgEBGBMBh1YiNAkNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkA?=
 =?us-ascii?q?YJiAwMBAiQLAQ0BAR4ZAQUJAQEYOAMxAQUBHAYBEgWDHIICAQSaADyKHYFsM4J?=
 =?us-ascii?q?2AQEFgQQBAYYgCBKHXYMTgRwXgX+BRIV9Aoc8iyaVOwmCJIMUjA4YiWGHVCyIY?=
 =?us-ascii?q?o9WAgQCBAUCBQ8hgSVsgSFNI4M8ghsMF4NKihwBNz8ygQUBAYpnAQE?=
X-IronPort-AV: E=Sophos;i="5.56,322,1539673200"; 
   d="scan'208";a="141026213"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 06 Dec 2018 04:25:56 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729895AbeLFMZy (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 6 Dec 2018 07:25:54 -0500
Received: from mail-wr1-f52.google.com ([209.85.221.52]:43555 "EHLO
        mail-wr1-f52.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1729817AbeLFMZ0 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 6 Dec 2018 07:25:26 -0500
Received: by mail-wr1-f52.google.com with SMTP id r10so267467wrs.10
        for <linux-kernel@vger.kernel.org>; Thu, 06 Dec 2018 04:25:25 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding;
        bh=AZfZTLqWsknIvYMLnZdolPQtd9B+6yIRrKwPZ48RLc4=;
        b=EW/3SMqpcTiMhWNm2orG3EvbNyLZ48vaZIbUCv4K7/oj7HRZ9uPY1RH0eYr1rAgVW0
         jyMP2dxynkJIJWAOyFDrXOO+bxX/RQl8Uyo6CKjDuuK1f5Yt+om29IOR4qfuWKYTdBa6
         HSbK7N4y6Wq1gjNxQBTGM2y0gddfv8BnrSJP27jRBzimexVneU2mKh133NTPYQ2fqCvG
         CPhOs/+CryNsf6lHjyX+rz5v7pe0z3I5TS14++RGHvLCAQL4JcZIvyC/7qVGdYVi9+AZ
         yENfqxMnbM8uAyVl4QWMFZDJgy1UENGmTQUl26yxkghXpslYWoLlLUoaBcjn9yfCweYI
         TAWw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=AZfZTLqWsknIvYMLnZdolPQtd9B+6yIRrKwPZ48RLc4=;
        b=jsX+91yB1VPwbUC/N0rsoNvM2NYipd/oGI7qgwPZAuuvRfZI4y63UxB7hQ5lHVGdAi
         EHKCWWc3GBJmnGaZljoOpNBhq3aiX/bg4+TF0Z6q2PPCEEg3BuKzKTa2VGmGCTX6fQ/R
         LPHNoUR1SMyFSB3todqLPphIGLU7A+cPSbrvrZbukRT+4UhbpioVRf3j1dBoNziSyiI/
         vl1T0+2v/rDO5KaB123C4wr1CKnePEWcZUqrmEZGa6g1RxUREfp+OW4U2QII9IHG4E3p
         JqexWZppdo22ke8HgrWhk7zUHmwFk52yqpB6+j2uDgqOx+lKoq4dHdA+2UT/iG9Htij8
         QlOQ==
X-Gm-Message-State: AA+aEWYOuMllAKJFb4V4rMn3xvnYHpTIn33FJOtShw0rJdqbZC1P4jXu
        vs62Aa16ljRhIRpxtF010O9+IQ==
X-Google-Smtp-Source: AFSGD/W3yTLYMQBOaLzTZ5SXjxjDat4MU8wRZ1yiVk7CrJyHq5HLrO5lLxvOMClpJkkFYNGGBhGn+A==
X-Received: by 2002:adf:f8d2:: with SMTP id f18mr20884354wrq.265.1544099124211;
        Thu, 06 Dec 2018 04:25:24 -0800 (PST)
Received: from andreyknvl0.muc.corp.google.com ([2a00:79e0:15:10:3180:41f8:3010:ff61])
        by smtp.gmail.com with ESMTPSA id j8sm339988wrt.40.2018.12.06.04.25.22
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Thu, 06 Dec 2018 04:25:23 -0800 (PST)
From: Andrey Konovalov <andreyknvl@google.com>
To: Andrey Ryabinin <aryabinin@virtuozzo.com>,
        Alexander Potapenko <glider@google.com>,
        Dmitry Vyukov <dvyukov@google.com>,
        Catalin Marinas <catalin.marinas@arm.com>,
        Will Deacon <will.deacon@arm.com>,
        Christoph Lameter <cl@linux.com>,
        Andrew Morton <akpm@linux-foundation.org>,
        Mark Rutland <mark.rutland@arm.com>,
        Nick Desaulniers <ndesaulniers@google.com>,
        Marc Zyngier <marc.zyngier@arm.com>,
        Dave Martin <dave.martin@arm.com>,
        Ard Biesheuvel <ard.biesheuvel@linaro.org>,
        "Eric W . Biederman" <ebiederm@xmission.com>,
        Ingo Molnar <mingo@kernel.org>,
        Paul Lawrence <paullawrence@google.com>,
        Geert Uytterhoeven <geert@linux-m68k.org>,
        Arnd Bergmann <arnd@arndb.de>,
        "Kirill A . Shutemov" <kirill.shutemov@linux.intel.com>,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        Kate Stewart <kstewart@linuxfoundation.org>,
        Mike Rapoport <rppt@linux.vnet.ibm.com>,
        kasan-dev@googlegroups.com, linux-doc@vger.kernel.org,
        linux-kernel@vger.kernel.org, linux-arm-kernel@lists.infradead.org,
        linux-sparse@vger.kernel.org, linux-mm@kvack.org,
        linux-kbuild@vger.kernel.org
Cc: Kostya Serebryany <kcc@google.com>,
        Evgeniy Stepanov <eugenis@google.com>,
        Lee Smith <Lee.Smith@arm.com>,
        Ramana Radhakrishnan <Ramana.Radhakrishnan@arm.com>,
        Jacob Bramley <Jacob.Bramley@arm.com>,
        Ruben Ayrapetyan <Ruben.Ayrapetyan@arm.com>,
        Jann Horn <jannh@google.com>,
        Mark Brand <markbrand@google.com>,
        Chintan Pandya <cpandya@codeaurora.org>,
        Vishwath Mohan <vishwath@google.com>,
        Andrey Konovalov <andreyknvl@google.com>
Subject: [PATCH v13 22/25] kasan: add __must_check annotations to kasan hooks
Date: Thu,  6 Dec 2018 13:24:40 +0100
Message-Id: <03b269c5e453945f724bfca3159d4e1333a8fb1c.1544099024.git.andreyknvl@google.com>
X-Mailer: git-send-email 2.20.0.rc1.387.gf8505762e3-goog
In-Reply-To: <cover.1544099024.git.andreyknvl@google.com>
References: <cover.1544099024.git.andreyknvl@google.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This patch adds __must_check annotations to kasan hooks that return a
pointer to make sure that a tagged pointer always gets propagated.

Suggested-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
---
 include/linux/kasan.h | 16 ++++++++++------
 mm/kasan/common.c     | 15 +++++++++------
 2 files changed, 19 insertions(+), 12 deletions(-)

diff --git a/include/linux/kasan.h b/include/linux/kasan.h
index 8da7b7a4397a..b40ea104dd36 100644
--- a/include/linux/kasan.h
+++ b/include/linux/kasan.h
@@ -49,16 +49,20 @@ void kasan_cache_create(struct kmem_cache *cache, unsigned int *size,
 void kasan_poison_slab(struct page *page);
 void kasan_unpoison_object_data(struct kmem_cache *cache, void *object);
 void kasan_poison_object_data(struct kmem_cache *cache, void *object);
-void *kasan_init_slab_obj(struct kmem_cache *cache, const void *object);
+void * __must_check kasan_init_slab_obj(struct kmem_cache *cache,
+					const void *object);
 
-void *kasan_kmalloc_large(const void *ptr, size_t size, gfp_t flags);
+void * __must_check kasan_kmalloc_large(const void *ptr, size_t size,
+						gfp_t flags);
 void kasan_kfree_large(void *ptr, unsigned long ip);
 void kasan_poison_kfree(void *ptr, unsigned long ip);
-void *kasan_kmalloc(struct kmem_cache *s, const void *object, size_t size,
-		  gfp_t flags);
-void *kasan_krealloc(const void *object, size_t new_size, gfp_t flags);
+void * __must_check kasan_kmalloc(struct kmem_cache *s, const void *object,
+					size_t size, gfp_t flags);
+void * __must_check kasan_krealloc(const void *object, size_t new_size,
+					gfp_t flags);
 
-void *kasan_slab_alloc(struct kmem_cache *s, void *object, gfp_t flags);
+void * __must_check kasan_slab_alloc(struct kmem_cache *s, void *object,
+					gfp_t flags);
 bool kasan_slab_free(struct kmem_cache *s, void *object, unsigned long ip);
 
 struct kasan_cache {
diff --git a/mm/kasan/common.c b/mm/kasan/common.c
index 195ca385cf7a..1144e741feb6 100644
--- a/mm/kasan/common.c
+++ b/mm/kasan/common.c
@@ -373,7 +373,8 @@ static u8 assign_tag(struct kmem_cache *cache, const void *object, bool new)
 #endif
 }
 
-void *kasan_init_slab_obj(struct kmem_cache *cache, const void *object)
+void * __must_check kasan_init_slab_obj(struct kmem_cache *cache,
+						const void *object)
 {
 	struct kasan_alloc_meta *alloc_info;
 
@@ -389,7 +390,8 @@ void *kasan_init_slab_obj(struct kmem_cache *cache, const void *object)
 	return (void *)object;
 }
 
-void *kasan_slab_alloc(struct kmem_cache *cache, void *object, gfp_t flags)
+void * __must_check kasan_slab_alloc(struct kmem_cache *cache, void *object,
+					gfp_t flags)
 {
 	return kasan_kmalloc(cache, object, cache->object_size, flags);
 }
@@ -449,8 +451,8 @@ bool kasan_slab_free(struct kmem_cache *cache, void *object, unsigned long ip)
 	return __kasan_slab_free(cache, object, ip, true);
 }
 
-void *kasan_kmalloc(struct kmem_cache *cache, const void *object, size_t size,
-		   gfp_t flags)
+void * __must_check kasan_kmalloc(struct kmem_cache *cache, const void *object,
+					size_t size, gfp_t flags)
 {
 	unsigned long redzone_start;
 	unsigned long redzone_end;
@@ -482,7 +484,8 @@ void *kasan_kmalloc(struct kmem_cache *cache, const void *object, size_t size,
 }
 EXPORT_SYMBOL(kasan_kmalloc);
 
-void *kasan_kmalloc_large(const void *ptr, size_t size, gfp_t flags)
+void * __must_check kasan_kmalloc_large(const void *ptr, size_t size,
+						gfp_t flags)
 {
 	struct page *page;
 	unsigned long redzone_start;
@@ -506,7 +509,7 @@ void *kasan_kmalloc_large(const void *ptr, size_t size, gfp_t flags)
 	return (void *)ptr;
 }
 
-void *kasan_krealloc(const void *object, size_t size, gfp_t flags)
+void * __must_check kasan_krealloc(const void *object, size_t size, gfp_t flags)
 {
 	struct page *page;
 
-- 
2.20.0.rc1.387.gf8505762e3-goog

