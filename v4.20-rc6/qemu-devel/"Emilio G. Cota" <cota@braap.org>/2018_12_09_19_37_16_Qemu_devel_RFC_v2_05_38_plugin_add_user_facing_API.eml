Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 10 Dec 2018 08:56:16 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id F3DBA5800CB
	for <like.xu@linux.intel.com>; Sun,  9 Dec 2018 11:48:16 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga002-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 09 Dec 2018 11:48:16 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3ARSpuRhGO6orHV7xlG7aedZ1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ76p8+zbnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJVyJPHJ6y?=
 =?us-ascii?q?YYUMAeQGP+lYoZLwq0cSoRakGQWhHv/jxiNOi3Tr3aM6yeMhEQTe0QAuENwOtX?=
 =?us-ascii?q?XUrNH0NKcVTOu7zbPExijdYvNRxTfy8obEeQ0mrP6QWrJwbdDexFI0GAPflFqf?=
 =?us-ascii?q?s5TlMymS1uQXvGiW9uxtXv+hhW4grgF+uDmvxsE0h4nGgIIV10rI9SJjwIY6I9?=
 =?us-ascii?q?CzVU11Yca8HZdOqy2XNJF6Tt4/T2xroio21LMLtJ6hcCQXypkr3wPTZ+KEfoSS?=
 =?us-ascii?q?4h/uUPydLSlkiH5/Zr6zmhe//E69wePmTMa0ykxFri9dn9nMqH8N0xvT59CDSv?=
 =?us-ascii?q?t85UehxS2P2xrc6uFCPEA4j63bK4QuwrIol5oTt1rMHjPulUnokKObdV8o9vW1?=
 =?us-ascii?q?5+nkeLnquJGROo9uhg3jMKkigsm/Dv45MggKUWib4+O81Lj78E3gXrpKi+A2nr?=
 =?us-ascii?q?DEv5/EO8QUuKq5DxZO3YYk9ha/CSup38oDnXUAKFJFeRGHgJbzN1DBPfD1FfO/?=
 =?us-ascii?q?g1WqkDd2yPHKJLzhApPRLnfdlLftZ6py60lZyAcoy9Bf4JRUCr4HIPLuQEPxs8?=
 =?us-ascii?q?bYDhAhPwyu3+nnEMl91p8ZWW+XBq+ZMaDSvkGS6uMgPumBf4sVuDf7K/g46P/i?=
 =?us-ascii?q?l345mVkBfaa32Zsbcmy3HvNjI0mBZHrjmNYBEWMEvgokS+zqjUWPXiJUZ3auRa?=
 =?us-ascii?q?0x/So0CJi8AojZXoChmruB3D20HpBQe2tLFFSMEWrzd4WYRfgMcj+cIs5gkzMa?=
 =?us-ascii?q?TbWtV9xp6Be1qQWvy6Z7NvGGvWoctIn/z55z4Ovckwx08iZ7SMGU0mWIRmczmX?=
 =?us-ascii?q?sURjgwx+dmrElgj1uOz6V80MFeDsFZsvZAUwMmMszFwulnTtz/RA/FO82EUUur?=
 =?us-ascii?q?WcmOBzY3QdQshdgUbBFmBt+ggxvfijesGKIfjLeRBZY5oZ7bimH8Its4x3vY2a?=
 =?us-ascii?q?0JiV4gTc1Sc2q8if1R7Q/WUsTklkSdlqHiWuJU9ynR/S3LmWGJoEhwWhR5WL2D?=
 =?us-ascii?q?WmoQMBiF5e/l71/PGuf9QY8sNRFMnIvbcvNH?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AkAACwcA1cmBHrdtBkHgEGBwaBUQkLA?=
 =?us-ascii?q?YEwgTmBKYxyiy6ZXhSBXxQYBw2HXSI0CQ0BAwEBAQEBAQIBEwEBAQEBCAsLBhs?=
 =?us-ascii?q?OIwyCNgUCAxoBBoJcAwMBAj0BAQQKKQECAwECBgEBSAgDAVMZBYMcAYIBAQQKp?=
 =?us-ascii?q?TKCH4J2AQEFgkOEWAMFh3KDE4EcEQaBf4NuhHsjhXOQPJA7BwIChwaKPAsYiWS?=
 =?us-ascii?q?HWY4VixuBRoIOfQiDJ4IbDBeDSoUUhV1UgQIFIROKNYF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0AkAACwcA1cmBHrdtBkHgEGBwaBUQkLAYEwgTmBKYxyiy6?=
 =?us-ascii?q?ZXhSBXxQYBw2HXSI0CQ0BAwEBAQEBAQIBEwEBAQEBCAsLBhsOIwyCNgUCAxoBB?=
 =?us-ascii?q?oJcAwMBAj0BAQQKKQECAwECBgEBSAgDAVMZBYMcAYIBAQQKpTKCH4J2AQEFgkO?=
 =?us-ascii?q?EWAMFh3KDE4EcEQaBf4NuhHsjhXOQPJA7BwIChwaKPAsYiWSHWY4VixuBRoIOf?=
 =?us-ascii?q?QiDJ4IbDBeDSoUUhV1UgQIFIROKNYF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,335,1539673200"; 
   d="scan'208";a="55606747"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 09 Dec 2018 11:48:06 -0800
Received: from localhost ([::1]:56440 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gW53d-00026y-Sd
	for like.xu@linux.intel.com; Sun, 09 Dec 2018 14:48:05 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:33242)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <cota@braap.org>) id 1gW4u0-0000Qk-WA
	for qemu-devel@nongnu.org; Sun, 09 Dec 2018 14:38:10 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <cota@braap.org>) id 1gW4tw-0004zI-UB
	for qemu-devel@nongnu.org; Sun, 09 Dec 2018 14:38:08 -0500
Received: from wout2-smtp.messagingengine.com ([64.147.123.25]:56077)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <cota@braap.org>) id 1gW4tw-0004wU-Ig
	for qemu-devel@nongnu.org; Sun, 09 Dec 2018 14:38:04 -0500
Received: from compute4.internal (compute4.nyi.internal [10.202.2.44])
	by mailout.west.internal (Postfix) with ESMTP id E599FC53;
	Sun,  9 Dec 2018 14:38:01 -0500 (EST)
Received: from mailfrontend2 ([10.202.2.163])
	by compute4.internal (MEProxy); Sun, 09 Dec 2018 14:38:02 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=braap.org; h=
	from:to:cc:subject:date:message-id:in-reply-to:references; s=
	mesmtp; bh=rfJclI7NI++1IdufRjiP12517VE01MU8UhzVle4VSGA=; b=Wdz4D
	Gf8WFZ+TJFb4QKB3nptCCt4yYGI028a8xu2RUyUzaJYbq8OYWsOJAtXFrBHZedhH
	r/a0KYx1sGmuKzkodxIFIgF15lBsWAYy+VLTynjERyD9zWVIC4yBR7XSZQTjcSI+
	uGwtQZAgekhyrlu43hogqq8PugF+FNu6b6hMxs=
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=
	messagingengine.com; h=cc:date:from:in-reply-to:message-id
	:references:subject:to:x-me-proxy:x-me-proxy:x-me-sender
	:x-me-sender:x-sasl-enc; s=fm1; bh=rfJclI7NI++1IdufRjiP12517VE01
	MU8UhzVle4VSGA=; b=cPu9K0zdnKHd08MSByvQYb/zs+568bF2u3GQj2PtVojeh
	jnJuVRXBM/vJb1CYuHtuOcfLjZhtjZRUYxo6lJJ8354nEGNNB5Yu2MT5A0NO+oNx
	hG4FakXXiY5Z8wUrZGwN8d2OM2MHzoTttZW/ox2oQb5Ey6lCiaWvzAVGBgu69Tob
	iVgy7XuVl+sMpqzndZZxfsbDxWD8v5/qS+BRloregbyGnE+aITDOVcOkV3ftNBLG
	MUfGJ2of1w8ppHTu1ENWkJm/yjbRfkgdJCUJadO0dGHjDY9eeuJ/WD43+4M9HmIm
	TUZNfChh2ITG1rv9sL88XP7Y6cr8fYn8KR35gqh6A==
X-ME-Sender: <xms:GW8NXMWXxdm2hA53vOAo51tXPRbx6LwXvCQ20ibo-yYkW7EATHAjuA>
X-ME-Proxy-Cause: gggruggvucftvghtrhhoucdtuddrgedtkedrudegfedguddvkecutefuodetggdotefrod
	ftvfcurfhrohhfihhlvgemucfhrghsthforghilhdpqfhuthenuceurghilhhouhhtmecu
	fedttdenucesvcftvggtihhpihgvnhhtshculddquddttddmnecujfgurhephffvufffkf
	fojghfsedttdertdertddtnecuhfhrohhmpedfgfhmihhlihhoucfirdcuvehothgrfdcu
	oegtohhtrgessghrrggrphdrohhrgheqnecuffhomhgrihhnpehgnhhurdhorhhgnecukf
	hppeduvdekrdehledrvddtrddvudeinecurfgrrhgrmhepmhgrihhlfhhrohhmpegtohht
	rgessghrrggrphdrohhrghenucevlhhushhtvghrufhiiigvpedt
X-ME-Proxy: <xmx:GW8NXK2qlSLuZ1XNxbybf62OuJDpMgcufBmqRbpT-c5iypBocU2JyQ>
	<xmx:GW8NXEUjbKZOpGAsqXb9utcc-2FAKZ7Uzb8VuqmVq_VhKnrSu8alJg>
	<xmx:GW8NXHmBXjMNcmC-kFIkBkoE5rhcyZPVfaSK6L3UC0Cedt_1uK0t6Q>
	<xmx:GW8NXIi2d7odNVYxSyPfomzkVQ92NVQfyvs16XcD1A-21fF77h1Uew>
	<xmx:GW8NXFvP5Zama7TU0DuvOOot4FC3k5PsBCl2h_NJmBTMnBwpOTG0dg>
	<xmx:GW8NXMKOSd6-KtHz1kn8CPUiVpuX-Iyxj3pjWwowY7RKErhsD99U6Q>
Received: from localhost (flamenco.cs.columbia.edu [128.59.20.216])
	by mail.messagingengine.com (Postfix) with ESMTPA id 0FBEF102F2;
	Sun,  9 Dec 2018 14:38:01 -0500 (EST)
From: "Emilio G. Cota" <cota@braap.org>
To: qemu-devel@nongnu.org
Date: Sun,  9 Dec 2018 14:37:16 -0500
Message-Id: <20181209193749.12277-6-cota@braap.org>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20181209193749.12277-1-cota@braap.org>
References: <20181209193749.12277-1-cota@braap.org>
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 64.147.123.25
Subject: [Qemu-devel] [RFC v2 05/38] plugin: add user-facing API
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Richard Henderson <richard.henderson@linaro.org>,
	=?UTF-8?q?Alex=20Benn=C3=A9e?= <alex.bennee@linaro.org>,
	Pavel Dovgalyuk <Pavel.Dovgaluk@ispras.ru>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Add the API first to ease review.

Signed-off-by: Emilio G. Cota <cota@braap.org>
---
 include/qemu/qemu-plugin.h | 241 +++++++++++++++++++++++++++++++++++++
 1 file changed, 241 insertions(+)
 create mode 100644 include/qemu/qemu-plugin.h

diff --git a/include/qemu/qemu-plugin.h b/include/qemu/qemu-plugin.h
new file mode 100644
index 0000000000..6c67211900
--- /dev/null
+++ b/include/qemu/qemu-plugin.h
@@ -0,0 +1,241 @@
+/*
+ * Copyright (C) 2017, Emilio G. Cota <cota@braap.org>
+ *
+ * License: GNU GPL, version 2 or later.
+ *   See the COPYING file in the top-level directory.
+ */
+#ifndef QEMU_PLUGIN_API_H
+#define QEMU_PLUGIN_API_H
+
+#include <inttypes.h>
+#include <stdbool.h>
+
+/*
+ * For best performance, build the plugin with -fvisibility=hidden so that
+ * QEMU_PLUGIN_LOCAL is implicit. Then, just mark qemu_plugin_install with
+ * QEMU_PLUGIN_EXPORT. For more info, see
+ *   https://gcc.gnu.org/wiki/Visibility
+ */
+#if defined _WIN32 || defined __CYGWIN__
+  #ifdef BUILDING_DLL
+    #define QEMU_PLUGIN_EXPORT __declspec(dllexport)
+  #else
+    #define QEMU_PLUGIN_EXPORT __declspec(dllimport)
+  #endif
+  #define QEMU_PLUGIN_LOCAL
+#else
+  #if __GNUC__ >= 4
+    #define QEMU_PLUGIN_EXPORT __attribute__((visibility("default")))
+    #define QEMU_PLUGIN_LOCAL  __attribute__((visibility("hidden")))
+  #else
+    #define QEMU_PLUGIN_EXPORT
+    #define QEMU_PLUGIN_LOCAL
+  #endif
+#endif
+
+typedef uint64_t qemu_plugin_id_t;
+
+/**
+ * qemu_plugin_install - Install a plugin
+ * @id: this plugin's opaque ID
+ * @argc: number of arguments
+ * @argv: array of arguments (@argc elements)
+ *
+ * All plugins must export this symbol.
+ *
+ * Note: @argv is freed after this function returns.
+ */
+QEMU_PLUGIN_EXPORT int qemu_plugin_install(qemu_plugin_id_t id, int argc,
+                                           char **argv);
+
+typedef void (*qemu_plugin_uninstall_cb_t)(qemu_plugin_id_t id);
+
+/**
+ * qemu_plugin_uninstall - Uninstall a plugin
+ * @id: this plugin's opaque ID
+ * @cb: callback to be called once the plugin has been removed
+ *
+ * Do NOT assume that the plugin has been uninstalled once this
+ * function returns. Plugins are uninstalled asynchronously,
+ * and therefore the given plugin might still receive callbacks
+ * from prior subscriptions _until_ @cb is called.
+ */
+void qemu_plugin_uninstall(qemu_plugin_id_t id, qemu_plugin_uninstall_cb_t cb);
+
+typedef void (*qemu_plugin_simple_cb_t)(qemu_plugin_id_t id);
+
+typedef void (*qemu_plugin_udata_cb_t)(qemu_plugin_id_t id, void *userdata);
+
+typedef void (*qemu_plugin_vcpu_simple_cb_t)(qemu_plugin_id_t id,
+                                             unsigned int vcpu_index);
+
+typedef void (*qemu_plugin_vcpu_udata_cb_t)(unsigned int vcpu_index,
+                                            void *userdata);
+
+/**
+ * qemu_plugin_register_vcpu_init_cb - register a vCPU initialization callback
+ * @id: plugin ID
+ * @cb: callback function
+ *
+ * The @cb function is called every time a vCPU is initialized.
+ *
+ * See also: qemu_plugin_register_vcpu_exit_cb()
+ */
+void qemu_plugin_register_vcpu_init_cb(qemu_plugin_id_t id,
+                                       qemu_plugin_vcpu_simple_cb_t cb);
+
+/**
+ * qemu_plugin_register_vcpu_exit_cb - register a vCPU exit callback
+ * @id: plugin ID
+ * @cb: callback function
+ *
+ * The @cb function is called every time a vCPU exits.
+ *
+ * See also: qemu_plugin_register_vcpu_init_cb()
+ */
+void qemu_plugin_register_vcpu_exit_cb(qemu_plugin_id_t id,
+                                       qemu_plugin_vcpu_simple_cb_t cb);
+
+void qemu_plugin_register_vcpu_idle_cb(qemu_plugin_id_t id,
+                                       qemu_plugin_vcpu_simple_cb_t cb);
+
+void qemu_plugin_register_vcpu_resume_cb(qemu_plugin_id_t id,
+                                         qemu_plugin_vcpu_simple_cb_t cb);
+
+struct qemu_plugin_tb;
+struct qemu_plugin_insn;
+
+enum qemu_plugin_cb_flags {
+    QEMU_PLUGIN_CB_NO_REGS, /* callback does not access the CPU's regs */
+    QEMU_PLUGIN_CB_R_REGS,  /* callback reads the CPU's regs */
+    QEMU_PLUGIN_CB_RW_REGS, /* callback reads and writes the CPU's regs */
+};
+
+enum qemu_plugin_mem_rw {
+    QEMU_PLUGIN_MEM_R = 1,
+    QEMU_PLUGIN_MEM_W,
+    QEMU_PLUGIN_MEM_RW,
+};
+
+typedef void (*qemu_plugin_vcpu_tb_trans_cb_t)(qemu_plugin_id_t id,
+                                               unsigned int vcpu_index,
+                                               struct qemu_plugin_tb *tb);
+
+void qemu_plugin_register_vcpu_tb_trans_cb(qemu_plugin_id_t id,
+                                           qemu_plugin_vcpu_tb_trans_cb_t cb);
+
+/* can only call from tb_trans_cb callback */
+void qemu_plugin_register_vcpu_tb_exec_cb(struct qemu_plugin_tb *tb,
+                                          qemu_plugin_vcpu_udata_cb_t cb,
+                                          enum qemu_plugin_cb_flags flags,
+                                          void *userdata);
+
+enum qemu_plugin_op {
+    QEMU_PLUGIN_INLINE_ADD_U64,
+};
+
+void qemu_plugin_register_vcpu_tb_exec_inline(struct qemu_plugin_tb *tb,
+                                              enum qemu_plugin_op op,
+                                              void *ptr, uint64_t imm);
+
+void qemu_plugin_register_vcpu_insn_exec_cb(struct qemu_plugin_insn *insn,
+                                            qemu_plugin_vcpu_udata_cb_t cb,
+                                            enum qemu_plugin_cb_flags flags,
+                                            void *userdata);
+
+void qemu_plugin_register_vcpu_insn_exec_inline(struct qemu_plugin_insn *insn,
+                                                enum qemu_plugin_op op,
+                                                void *ptr, uint64_t imm);
+
+typedef uint32_t qemu_plugin_meminfo_t;
+
+unsigned qemu_plugin_mem_size_shift(qemu_plugin_meminfo_t info);
+bool qemu_plugin_mem_is_sign_extended(qemu_plugin_meminfo_t info);
+bool qemu_plugin_mem_is_big_endian(qemu_plugin_meminfo_t info);
+bool qemu_plugin_mem_is_store(qemu_plugin_meminfo_t info);
+
+typedef void
+(*qemu_plugin_vcpu_mem_cb_t)(unsigned int vcpu_index,
+                             qemu_plugin_meminfo_t info, uint64_t vaddr,
+                             void *userdata);
+
+typedef void
+(*qemu_plugin_vcpu_mem_haddr_cb_t)(unsigned int vcpu_index,
+                                   qemu_plugin_meminfo_t info, uint64_t vaddr,
+                                   void *haddr, void *userdata);
+
+void qemu_plugin_register_vcpu_mem_cb(struct qemu_plugin_insn *insn,
+                                      qemu_plugin_vcpu_mem_cb_t cb,
+                                      enum qemu_plugin_cb_flags flags,
+                                      enum qemu_plugin_mem_rw rw,
+                                      void *userdata);
+
+void qemu_plugin_register_vcpu_mem_haddr_cb(struct qemu_plugin_insn *insn,
+                                            qemu_plugin_vcpu_mem_haddr_cb_t cb,
+                                            enum qemu_plugin_cb_flags flags,
+                                            enum qemu_plugin_mem_rw rw,
+                                            void *userdata);
+
+void qemu_plugin_register_vcpu_mem_inline(struct qemu_plugin_insn *insn,
+                                          enum qemu_plugin_mem_rw rw,
+                                          enum qemu_plugin_op op, void *ptr,
+                                          uint64_t imm);
+
+uint64_t qemu_plugin_ram_addr_from_host(void *haddr);
+
+typedef void
+(*qemu_plugin_vcpu_syscall_cb_t)(qemu_plugin_id_t id, unsigned int vcpu_index,
+                                 int64_t num, uint64_t a1, uint64_t a2,
+                                 uint64_t a3, uint64_t a4, uint64_t a5,
+                                 uint64_t a6, uint64_t a7, uint64_t a8);
+
+void qemu_plugin_register_vcpu_syscall_cb(qemu_plugin_id_t id,
+                                          qemu_plugin_vcpu_syscall_cb_t cb);
+
+typedef void
+(*qemu_plugin_vcpu_syscall_ret_cb_t)(qemu_plugin_id_t id, unsigned int vcpu_idx,
+                                     int64_t num, int64_t ret);
+
+void
+qemu_plugin_register_vcpu_syscall_ret_cb(qemu_plugin_id_t id,
+                                         qemu_plugin_vcpu_syscall_ret_cb_t cb);
+
+size_t qemu_plugin_tb_n_insns(const struct qemu_plugin_tb *tb);
+
+uint64_t qemu_plugin_tb_vaddr(const struct qemu_plugin_tb *tb);
+
+struct qemu_plugin_insn *
+qemu_plugin_tb_get_insn(const struct qemu_plugin_tb *tb, size_t idx);
+
+const void *qemu_plugin_insn_data(const struct qemu_plugin_insn *insn);
+
+size_t qemu_plugin_insn_size(const struct qemu_plugin_insn *insn);
+
+uint64_t qemu_plugin_insn_vaddr(const struct qemu_plugin_insn *insn);
+void *qemu_plugin_insn_haddr(const struct qemu_plugin_insn *insn);
+
+/**
+ * qemu_plugin_vcpu_for_each - iterate over the existing vCPU
+ * @id: plugin ID
+ * @cb: callback function
+ *
+ * The @cb function is called once for each existing vCPU.
+ *
+ * See also: qemu_plugin_register_vcpu_init_cb()
+ */
+void qemu_plugin_vcpu_for_each(qemu_plugin_id_t id,
+                               qemu_plugin_vcpu_simple_cb_t cb);
+
+void qemu_plugin_register_flush_cb(qemu_plugin_id_t id,
+                                   qemu_plugin_simple_cb_t cb);
+
+void qemu_plugin_register_atexit_cb(qemu_plugin_id_t id,
+                                    qemu_plugin_udata_cb_t cb, void *userdata);
+
+/* returns -1 in user-mode */
+int qemu_plugin_n_vcpus(void);
+
+/* returns -1 in user-mode */
+int qemu_plugin_n_max_vcpus(void);
+
+#endif /* QEMU_PLUGIN_API_H */
-- 
2.17.1


