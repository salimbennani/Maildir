Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:40:38 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id B61C5580375
	for <like.xu@linux.intel.com>; Wed,  5 Dec 2018 18:20:15 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga003-1.jf.intel.com with ESMTP; 05 Dec 2018 18:20:15 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AjDNenRc0MKw9qB/ID4lpmcCPlGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc24bBWN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRBDI2i?=
 =?us-ascii?q?c4sBAekPPehaoIn8u1QAohSxCxS0BO7tyDFFiWL60KMm3+s/CgHLxxAgH8sUvX?=
 =?us-ascii?q?jIsNn5KLoeXOaox6fI1zXDaPZW1C/h5YfSaBAhpveMVq92f8rQz0kgChjFgU+Q?=
 =?us-ascii?q?qIf4OD6azP4Cs3Kc7+pmTu+vjHUnpxtrrTiq3scjlJPJiZwJxVDD8CV52Js1Jc?=
 =?us-ascii?q?G5SE59bt6oCodftyafN4ZvRM4pXmJmuD4ix7EYpZK2fzIGxIk6yxPccfCLbYaF?=
 =?us-ascii?q?7xL5WOqMIzp0nGxpdK++ihqo8kWtyvfwWtS23VpWtCZJj9nBu3AV2xzd9MeKSe?=
 =?us-ascii?q?dx80Kk1DuLyw/e6P1LLEUqmafZN5EswLs9m5UPvkvYHCL7nUv2gayIekk4/OWj?=
 =?us-ascii?q?9v7pba/8ppCGMo95kgH+Pboqmsy4Gek4NgkOX3OH+eSnzrHj8kv5QKhQgv0xiK?=
 =?us-ascii?q?nZv4jWJcUdpqGnHw9Yypgv5wq8Aju8zdgUgHoKIEhbdB+Jj4XlIUzCLfLgAfe6?=
 =?us-ascii?q?mVuskTNrx/7cPr3mB5XANmHDn6nkfbZg8kJT1RQ8zc5B6JJQE70OO/XzWlL3tN?=
 =?us-ascii?q?PEEBA5KAu4w+LmCNV+yIwSQ22OArKBPaPWsF+I4P8vIuaWaI8Uvjb9N+Yq5/r0?=
 =?us-ascii?q?gXAlnl8deLKk3Z0QaHC+EfRmJViZbWDrgtcbHmcGphA+Q/DyiF2eTT5TYG6/X6?=
 =?us-ascii?q?Y95jE4Fo2qF4jCRp22jbyF3Se7GIBWZ29cBlCNF3foa5uLW/MWZC2OJc9hl29M?=
 =?us-ascii?q?aL66VoV01Q2yrBSojP1jL/HI4WsespTs0sUz4Pfc0hQ79DhxBsLa1HmRTmZyhS?=
 =?us-ascii?q?QRSjormaxyv0F5mWqFyrVy1vlRFNhP4KFQXwIncJLR0eF+Tsr/Qx/MZcuhTlGg?=
 =?us-ascii?q?TdO7RzYrQYUq3tUMbk1hTsiklQ3JxCGwArUYxICMUdYt/6fBmnHrIu57zHDJ0r?=
 =?us-ascii?q?RniEMpCIMbLGCjm+t27Q37AYnPnEOE0aGwevJYlBbA6GqZhU+HrU1VVAo4Bb3I?=
 =?us-ascii?q?QX0FIE7fvNj04kfqS76oAK4gdAxbxpjGYoJOa8b1hFRcDNn5MdLVYnn5z260BA?=
 =?us-ascii?q?2Uz7KWKoTwcmMW3T71GEkAkgYDu32BMF56Thisoir+ETVoGhq7fE7t2fNzpHOy?=
 =?us-ascii?q?Ugk/yATcKwVZ2qa44FY+n/uHV/MM17MYtW91oC9zB0q9wNvXF9fGvwd9cb90bt?=
 =?us-ascii?q?Y04VMB3mXc4Ug1BJ2rL6l4ihY+fgJ7sln10BM/Xp9Bmsgjtn9szAd0Ja+Cy1RH?=
 =?us-ascii?q?XzeZ25nqPfvQMGakrz61bKuD81jE19De3qYJ5O8xuh23tQizEUwK9G4h2txN3m?=
 =?us-ascii?q?GR7ZLPFBcOUJT+FE0w8k4p9PnhfiAh6taMhjVXOq6uv2qHgopxCQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0CtAQAQhghchxHrdtBkgheBMVCBXAQyC?=
 =?us-ascii?q?oxoimSDU4gWhHGJSYEkA0wTARgUh1MiNAkNAQMBAQEBAQECARMBAQEKCwkIGw4?=
 =?us-ascii?q?jDII2BQIDGgEGglwCAQMBAg8VGQEBBAopAQIDAQIGAQEBARosCAMBHREXDgIEA?=
 =?us-ascii?q?RIFHYJ/gWoDFQECAppjKgKKB4FsM4J2AQEFgQUBhAMNC4IJCIweF4F/gRGCXYM?=
 =?us-ascii?q?MiAWLJIRYkC4uCYIki3CDIyMQT5BQLIhdhXaJWAIEAgQFAg8FgUaCDTMaCBsVg?=
 =?us-ascii?q?yeCJxcSgziKHAE2coEHIYhBWAGBHgEB?=
X-IPAS-Result: =?us-ascii?q?A0CtAQAQhghchxHrdtBkgheBMVCBXAQyCoxoimSDU4gWhHG?=
 =?us-ascii?q?JSYEkA0wTARgUh1MiNAkNAQMBAQEBAQECARMBAQEKCwkIGw4jDII2BQIDGgEGg?=
 =?us-ascii?q?lwCAQMBAg8VGQEBBAopAQIDAQIGAQEBARosCAMBHREXDgIEARIFHYJ/gWoDFQE?=
 =?us-ascii?q?CAppjKgKKB4FsM4J2AQEFgQUBhAMNC4IJCIweF4F/gRGCXYMMiAWLJIRYkC4uC?=
 =?us-ascii?q?YIki3CDIyMQT5BQLIhdhXaJWAIEAgQFAg8FgUaCDTMaCBsVgyeCJxcSgziKHAE?=
 =?us-ascii?q?2coEHIYhBWAGBHgEB?=
X-IronPort-AV: E=Sophos;i="5.56,320,1539673200"; 
   d="scan'208";a="56299354"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 05 Dec 2018 18:20:14 -0800
Received: from localhost ([::1]:38512 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gUjGv-0003bZ-UG
	for like.xu@linux.intel.com; Wed, 05 Dec 2018 21:20:13 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:59487)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <aaron@os.amperecomputing.com>) id 1gUjGU-0003ZI-Ft
	for qemu-devel@nongnu.org; Wed, 05 Dec 2018 21:19:50 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <aaron@os.amperecomputing.com>) id 1gUjGQ-00040Q-3Z
	for qemu-devel@nongnu.org; Wed, 05 Dec 2018 21:19:46 -0500
Received: from mail-eopbgr760090.outbound.protection.outlook.com
	([40.107.76.90]:54176
	helo=NAM02-CY1-obe.outbound.protection.outlook.com)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <aaron@os.amperecomputing.com>)
	id 1gUjG2-0003VE-KA; Wed, 05 Dec 2018 21:19:22 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=amperemail.onmicrosoft.com; s=selector1-os-amperecomputing-com;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
	bh=H+4A+wFBmuvVssaHZTtbIypoPXD7UJkxaa5EwTasED0=;
	b=obtcDdKRJgNJ9tpbWing1h5qpXo5YA+Tvy/rDViWOok8t9xzrbzpCw4JQZaFnqkzdBORQ8RggwbdAXGCQG4gS3p4MIidjNrGqPB9hXo0nTYFTBaakJmzdiUEsVn8j0ihtOm6F7Rxd4oa2wDSL8mSInXL3UOLRwcT4RGGM5y1Tq0=
Received: from BYAPR01MB4695.prod.exchangelabs.com (2603:10b6:a03:82::22) by
	BYAPR01MB4695.prod.exchangelabs.com (2603:10b6:a03:82::22) with
	TransportReplication id Version 15.20 (Build 1404.17); Thu, 6 Dec 2018
	02:19:07 +0000
Received: from DM6PR01MB4825.prod.exchangelabs.com (20.177.218.222) by
	DM6PR01MB4700.prod.exchangelabs.com (20.177.217.81) with Microsoft SMTP
	Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
	15.20.1382.22; Wed, 5 Dec 2018 13:43:20 +0000
Received: from DM6PR01MB4825.prod.exchangelabs.com
	([fe80::9c7c:27c7:4cb7:f820]) by DM6PR01MB4825.prod.exchangelabs.com
	([fe80::9c7c:27c7:4cb7:f820%2]) with mapi id 15.20.1404.016;
	Wed, 5 Dec 2018 13:43:20 +0000
From: Aaron Lindsay <aaron@os.amperecomputing.com>
To: "qemu-arm@nongnu.org" <qemu-arm@nongnu.org>, Peter Maydell
	<peter.maydell@linaro.org>,
	Alistair Francis <alistair.francis@xilinx.com>, 
	Wei Huang <wei@redhat.com>,
	Peter Crosthwaite <crosthwaite.peter@gmail.com>, 
	Richard Henderson <richard.henderson@linaro.org>
Thread-Topic: [PATCH v9 04/14] target/arm: Filter cycle counter based on
	PMCCFILTR_EL0
Thread-Index: AQHUjKB6UrXtXqjnS0mon7f8aIsO3w==
Date: Wed, 5 Dec 2018 13:43:18 +0000
Message-ID: <20181205134243.4791-5-aaron@os.amperecomputing.com>
References: <20181205134243.4791-1-aaron@os.amperecomputing.com>
In-Reply-To: <20181205134243.4791-1-aaron@os.amperecomputing.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-clientproxiedby: BN6PR12CA0032.namprd12.prod.outlook.com
	(2603:10b6:405:70::18) To DM6PR01MB4825.prod.exchangelabs.com
	(2603:10b6:5:6b::30)
x-ms-exchange-messagesentrepresentingtype: 1
x-originating-ip: [216.85.170.155]
x-ms-publictraffictype: Email
x-microsoft-exchange-diagnostics: 1; BYAPR01MB4695;
	6:91mb2VBhyBePwSYQNHaraFxo4cAGIyoG1gOV2s5lrsttbcAxGdosw1yop/l1ll/hUitTAxGJVSKSSb+wvubCm7ZF6ISbcQyGTNJc4lxQiAGjrQvUG75S54zPQjCHQkYUSVh/Ik1e178fwBXbKV5el7ILclCFAd86WvHz3eaGm/TBVP/4YegyzCFvxGnb9lng6r0XRHN9HYI3a316FvLByOaPvyF2Ll8ZFOsj4j5k1MFo4coM2JBhxJY60AxHm70N1xdp9roqj3KOYrWr/lthCIrFsXZCuayIorSChsGZ8BaSR0dBImurTQ8hHXHrDc1w84rWcHeQEFrZvci4ug8rw/sC036ma9xJcdsBO0LbScNON7JFWRsDMjbv3Vvgu4BsaelvYky3jUKOdeE/dXArgCJlmPegETUJ9DUl6PZqQseIX0Hzu21itHkGV3iI74t4uq+cXBQ/AvcDeIG8Q6BSpw==;
	5:WVut7CCkr498wUPjACAwMdOJ5OW3D9GUiMjYD+b9M0aHJ5+SeBdzHt6eoRAXIrZiv+efuRv3sFSF1K5Xx6BI5PRnjVO/tgayLEuz+QuDvkUkxJmLHrCQaZMY5pm4EhHdQPL2jE3D6tk8q0NvCXEw2WneBKo4C8V0yBB5lHrOSvM=;
	7:kXNEvPcn58yeVzTp/wpHGFdUESA+3h6y45Oh+Rv9rqoB4Xee2CmXOluobrrZS76gZBkyrzk+m7nKD/fewXDyErp8sal6Z7y9YTjox+VY0tBZrIbY6n8IZ+gFViRiauClg0NhFmhOtYAR2HHT7dMtkw==
x-ms-office365-filtering-correlation-id: 7e706ad5-ff2a-465f-ce69-08d65ab79d1e
x-microsoft-antispam: BCL:0; PCL:0;
	RULEID:(2390098)(7020095)(4652040)(8989299)(5600074)(711020)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(2017052603328)(7153060)(7193020);
	SRVR:DM6PR01MB4700; 
x-ms-traffictypediagnostic: BYAPR01MB4695:
x-microsoft-antispam-prvs: <BYAPR01MB46957370945D33EAC5D0B1968AA90@BYAPR01MB4695.prod.exchangelabs.com>
x-ms-exchange-senderadcheck: 1
x-exchange-antispam-report-cfa-test: BCL:0; PCL:0;
	RULEID:(8211001083)(6040522)(2401047)(8121501046)(5005006)(10201501046)(3002001)(93006095)(93001095)(3231455)(999002)(944501520)(52105112)(148016)(149066)(150057)(6041310)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123562045)(20161123560045)(20161123558120)(20161123564045)(201708071742011)(7699051)(76991095);
	SRVR:BYAPR01MB4695; BCL:0; PCL:0; RULEID:; SRVR:BYAPR01MB4695; 
x-forefront-prvs: 087894CD3C
x-forefront-antispam-report: SFV:NSPM;
	SFS:(10019020)(396003)(136003)(346002)(366004)(39850400004)(376002)(199004)(189003)(2501003)(81166006)(81156014)(2906002)(8676002)(99286004)(7416002)(446003)(8936002)(25786009)(14454004)(11346002)(5660300001)(14444005)(54906003)(256004)(110136005)(2616005)(478600001)(316002)(97736004)(476003)(7736002)(486006)(106356001)(102836004)(39060400002)(26005)(186003)(105586002)(386003)(6512007)(6116002)(6346003)(53936002)(86362001)(6436002)(575784001)(3846002)(6486002)(52116002)(71200400001)(71190400001)(4326008)(68736007)(305945005)(1076002)(6506007)(66066001)(76176011);
	DIR:OUT; SFP:1102; SCL:1; SRVR:BYAPR01MB4695;
	H:DM6PR01MB4825.prod.exchangelabs.com; FPR:; SPF:None; LANG:en;
	PTR:InfoNoRecords; A:0; MX:1; 
authentication-results: spf=none (sender IP is )
	smtp.mailfrom=aaron@os.amperecomputing.com; 
x-microsoft-antispam-message-info: nWSaw0Q7ZNPwxXrPy6jCw9LglM4tKhsaGM0532nzdqsjuas+ATriMloAEGDybvQPCuOceBprPt4Sa6AutFmw7zJCJXrJmrHPVY7F5zQDQJMj3tIAjnUDCnmQvFKCDxSAE51ONSLgMIdh/6jfJODouGmDTSlayJ6pK97g+/t1mDQVwNzjXo1Zm9+w3v1X7hUgvJU5tXc7R9cAnifoDyoSc54tbrKEast2Wae3txCe+0A1muQt0Bm2GQcyFoAG3+y6M//hJqQZPtQ+6F7gs8ACww2U1lS5CeX9nTsB9JwWbuK/QUk2PuzjX9pVcyxEQwz9K+9D9MdxDKoLGMzgDyLdEV2eThTR9YVxjqF7MoLdXA8=
spamdiagnosticoutput: 1:99
spamdiagnosticmetadata: NSPM
Content-Type: text/plain; charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
X-OriginatorOrg: os.amperecomputing.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 7e706ad5-ff2a-465f-ce69-08d65ab79d1e
X-MS-Exchange-CrossTenant-originalarrivaltime: 05 Dec 2018 13:43:18.3091 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: 3bc2b170-fd94-476d-b0ce-4229bdc904a7
X-MS-Exchange-Transport-CrossTenantHeadersStamped: BYAPR01MB4695
X-detected-operating-system: by eggs.gnu.org: Windows 7 or 8 [fuzzy]
X-Received-From: 40.107.76.90
Subject: [Qemu-devel] [PATCH v9 04/14] target/arm: Filter cycle counter
 based on PMCCFILTR_EL0
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Michael Spradling <mspradli@codeaurora.org>,
	Digant Desai <digantd@codeaurora.org>,
	"qemu-devel@nongnu.org" <qemu-devel@nongnu.org>,
	Aaron Lindsay <aaron@os.amperecomputing.com>,
	Aaron Lindsay <aclindsa@gmail.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Rename arm_ccnt_enabled to pmu_counter_enabled, and add logic to only
return 'true' if the specified counter is enabled and neither prohibited
or filtered.

Signed-off-by: Aaron Lindsay <alindsay@codeaurora.org>
Signed-off-by: Aaron Lindsay <aclindsa@gmail.com>
Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
---
 target/arm/cpu.c    |  3 ++
 target/arm/cpu.h    | 10 ++++-
 target/arm/helper.c | 96 +++++++++++++++++++++++++++++++++++++++++----
 3 files changed, 101 insertions(+), 8 deletions(-)

diff --git a/target/arm/cpu.c b/target/arm/cpu.c
index 60411f6bfe..f7bad04f60 100644
--- a/target/arm/cpu.c
+++ b/target/arm/cpu.c
@@ -1020,6 +1020,9 @@ static void arm_cpu_realizefn(DeviceState *dev, Error=
 **errp)
     if (!cpu->has_pmu) {
         unset_feature(env, ARM_FEATURE_PMU);
         cpu->id_aa64dfr0 &=3D ~0xf00;
+    } else if (!kvm_enabled()) {
+        arm_register_pre_el_change_hook(cpu, &pmu_pre_el_change, 0);
+        arm_register_el_change_hook(cpu, &pmu_post_el_change, 0);
     }
=20
     if (!arm_feature(env, ARM_FEATURE_EL2)) {
diff --git a/target/arm/cpu.h b/target/arm/cpu.h
index 61ac458627..627e5c1995 100644
--- a/target/arm/cpu.h
+++ b/target/arm/cpu.h
@@ -987,6 +987,12 @@ void pmccntr_op_finish(CPUARMState *env);
 void pmu_op_start(CPUARMState *env);
 void pmu_op_finish(CPUARMState *env);
=20
+/**
+ * Functions to register as EL change hooks for PMU mode filtering
+ */
+void pmu_pre_el_change(ARMCPU *cpu, void *ignored);
+void pmu_post_el_change(ARMCPU *cpu, void *ignored);
+
 /* SCTLR bit meanings. Several bits have been reused in newer
  * versions of the architecture; in that case we define constants
  * for both old and new bit meanings. Code which tests against those
@@ -1048,7 +1054,8 @@ void pmu_op_finish(CPUARMState *env);
=20
 #define MDCR_EPMAD    (1U << 21)
 #define MDCR_EDAD     (1U << 20)
-#define MDCR_SPME     (1U << 17)
+#define MDCR_SPME     (1U << 17)  /* MDCR_EL3 */
+#define MDCR_HPMD     (1U << 17)  /* MDCR_EL2 */
 #define MDCR_SDD      (1U << 16)
 #define MDCR_SPD      (3U << 14)
 #define MDCR_TDRA     (1U << 11)
@@ -1058,6 +1065,7 @@ void pmu_op_finish(CPUARMState *env);
 #define MDCR_HPME     (1U << 7)
 #define MDCR_TPM      (1U << 6)
 #define MDCR_TPMCR    (1U << 5)
+#define MDCR_HPMN     (0x1fU)
=20
 /* Not all of the MDCR_EL3 bits are present in the 32-bit SDCR */
 #define SDCR_VALID_MASK (MDCR_EPMAD | MDCR_EDAD | MDCR_SPME | MDCR_SPD)
diff --git a/target/arm/helper.c b/target/arm/helper.c
index 71a5c71e0a..ddb47813d2 100644
--- a/target/arm/helper.c
+++ b/target/arm/helper.c
@@ -976,10 +976,24 @@ static const ARMCPRegInfo v6_cp_reginfo[] =3D {
 /* Definitions for the PMU registers */
 #define PMCRN_MASK  0xf800
 #define PMCRN_SHIFT 11
+#define PMCRDP  0x10
 #define PMCRD   0x8
 #define PMCRC   0x4
 #define PMCRE   0x1
=20
+#define PMXEVTYPER_P          0x80000000
+#define PMXEVTYPER_U          0x40000000
+#define PMXEVTYPER_NSK        0x20000000
+#define PMXEVTYPER_NSU        0x10000000
+#define PMXEVTYPER_NSH        0x08000000
+#define PMXEVTYPER_M          0x04000000
+#define PMXEVTYPER_MT         0x02000000
+#define PMXEVTYPER_EVTCOUNT   0x0000ffff
+#define PMXEVTYPER_MASK       (PMXEVTYPER_P | PMXEVTYPER_U | PMXEVTYPER_NS=
K | \
+                               PMXEVTYPER_NSU | PMXEVTYPER_NSH | \
+                               PMXEVTYPER_M | PMXEVTYPER_MT | \
+                               PMXEVTYPER_EVTCOUNT)
+
 static inline uint32_t pmu_num_counters(CPUARMState *env)
 {
   return (env->cp15.c9_pmcr & PMCRN_MASK) >> PMCRN_SHIFT;
@@ -1075,16 +1089,66 @@ static CPAccessResult pmreg_access_ccntr(CPUARMStat=
e *env,
     return pmreg_access(env, ri, isread);
 }
=20
-static inline bool arm_ccnt_enabled(CPUARMState *env)
+/* Returns true if the counter (pass 31 for PMCCNTR) should count events u=
sing
+ * the current EL, security state, and register configuration.
+ */
+static bool pmu_counter_enabled(CPUARMState *env, uint8_t counter)
 {
-    /* This does not support checking PMCCFILTR_EL0 register */
+    uint64_t filter;
+    bool e, p, u, nsk, nsu, nsh, m;
+    bool enabled, prohibited, filtered;
+    bool secure =3D arm_is_secure(env);
+    int el =3D arm_current_el(env);
+    uint8_t hpmn =3D env->cp15.mdcr_el2 & MDCR_HPMN;
=20
-    if (!(env->cp15.c9_pmcr & PMCRE) || !(env->cp15.c9_pmcnten & (1 << 31)=
)) {
-        return false;
+    if (!arm_feature(env, ARM_FEATURE_EL2) ||
+            (counter < hpmn || counter =3D=3D 31)) {
+        e =3D env->cp15.c9_pmcr & PMCRE;
+    } else {
+        e =3D env->cp15.mdcr_el2 & MDCR_HPME;
     }
+    enabled =3D e && (env->cp15.c9_pmcnten & (1 << counter));
=20
-    return true;
+    if (!secure) {
+        if (el =3D=3D 2 && (counter < hpmn || counter =3D=3D 31)) {
+            prohibited =3D env->cp15.mdcr_el2 & MDCR_HPMD;
+        } else {
+            prohibited =3D false;
+        }
+    } else {
+        prohibited =3D arm_feature(env, ARM_FEATURE_EL3) &&
+           (env->cp15.mdcr_el3 & MDCR_SPME);
+    }
+
+    if (prohibited && counter =3D=3D 31) {
+        prohibited =3D env->cp15.c9_pmcr & PMCRDP;
+    }
+
+    /* TODO Remove assert, set filter to correct PMEVTYPER */
+    assert(counter =3D=3D 31);
+    filter =3D env->cp15.pmccfiltr_el0;
+
+    p   =3D filter & PMXEVTYPER_P;
+    u   =3D filter & PMXEVTYPER_U;
+    nsk =3D arm_feature(env, ARM_FEATURE_EL3) && (filter & PMXEVTYPER_NSK)=
;
+    nsu =3D arm_feature(env, ARM_FEATURE_EL3) && (filter & PMXEVTYPER_NSU)=
;
+    nsh =3D arm_feature(env, ARM_FEATURE_EL2) && (filter & PMXEVTYPER_NSH)=
;
+    m   =3D arm_el_is_aa64(env, 1) &&
+              arm_feature(env, ARM_FEATURE_EL3) && (filter & PMXEVTYPER_M)=
;
+
+    if (el =3D=3D 0) {
+        filtered =3D secure ? u : u !=3D nsu;
+    } else if (el =3D=3D 1) {
+        filtered =3D secure ? p : p !=3D nsk;
+    } else if (el =3D=3D 2) {
+        filtered =3D !nsh;
+    } else { /* EL3 */
+        filtered =3D m !=3D p;
+    }
+
+    return enabled && !prohibited && !filtered;
 }
+
 /*
  * Ensure c15_ccnt is the guest-visible count so that operations such as
  * enabling/disabling the counter or filtering, modifying the count itself=
,
@@ -1097,7 +1161,7 @@ void pmccntr_op_start(CPUARMState *env)
     cycles =3D muldiv64(qemu_clock_get_ns(QEMU_CLOCK_VIRTUAL),
                           ARM_CPU_FREQ, NANOSECONDS_PER_SECOND);
=20
-    if (arm_ccnt_enabled(env)) {
+    if (pmu_counter_enabled(env, 31)) {
         uint64_t eff_cycles =3D cycles;
         if (env->cp15.c9_pmcr & PMCRD) {
             /* Increment once every 64 processor clock cycles */
@@ -1116,7 +1180,7 @@ void pmccntr_op_start(CPUARMState *env)
  */
 void pmccntr_op_finish(CPUARMState *env)
 {
-    if (arm_ccnt_enabled(env)) {
+    if (pmu_counter_enabled(env, 31)) {
         uint64_t prev_cycles =3D env->cp15.c15_ccnt_delta;
=20
         if (env->cp15.c9_pmcr & PMCRD) {
@@ -1138,6 +1202,16 @@ void pmu_op_finish(CPUARMState *env)
     pmccntr_op_finish(env);
 }
=20
+void pmu_pre_el_change(ARMCPU *cpu, void *ignored)
+{
+    pmu_op_start(&cpu->env);
+}
+
+void pmu_post_el_change(ARMCPU *cpu, void *ignored)
+{
+    pmu_op_finish(&cpu->env);
+}
+
 static void pmcr_write(CPUARMState *env, const ARMCPRegInfo *ri,
                        uint64_t value)
 {
@@ -1209,6 +1283,14 @@ void pmu_op_finish(CPUARMState *env)
 {
 }
=20
+void pmu_pre_el_change(ARMCPU *cpu, void *ignored)
+{
+}
+
+void pmu_post_el_change(ARMCPU *cpu, void *ignored)
+{
+}
+
 #endif
=20
 static void pmccfiltr_write(CPUARMState *env, const ARMCPRegInfo *ri,
--=20
2.19.1


