Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 06 Dec 2018 08:53:25 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 1E0545804C1
	for <like.xu@linux.intel.com>; Wed,  5 Dec 2018 05:54:56 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga008-1.jf.intel.com with ESMTP; 05 Dec 2018 05:54:55 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AaHvf2h8iCGhke/9uRHKM819IXTAuvvDOBiVQ1KB+?=
 =?us-ascii?q?0eIXIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CRWRPQNpRWSJCDIOy?=
 =?us-ascii?q?bYQPDvYOM+lXoIfgv1sDrxmwCAaxCO7h1jNHmGT20LYm0+Q4CwzKwBAsE84TvH?=
 =?us-ascii?q?nSsd77NL0SUeewzKTQ0TjMdelW2TD76IPVdB4hoPeMUq9rccXLyUgkCgTIgU+K?=
 =?us-ascii?q?poz/ODOV0P8As2+A7+Z6T+2vjnYnpB9rojex2sgsjYzJhpoIylDY9CV5xok1Kc?=
 =?us-ascii?q?ekR058ZN6pCZ1dvDyZOYtuWs4uXX1ktSUgxrEbpJK2fzIGxIopyhPfcfCLboqF?=
 =?us-ascii?q?7gr9WOqMIDp0nnFodbKlixqv80Ws1vfwWtS03VtKtiZFnMfDu3MR2xHW78WKTu?=
 =?us-ascii?q?dy80W91juKyQze6P1LLEIxmKfUN5Eu2bw9m58dsUnAACP6hEP7h7KMeEo+4Oin?=
 =?us-ascii?q?8eHnb63mppCCM490jRnzMqAvmsykHeQ4KRICX2ed+eShzrHj+lf5QLpSgv03lK?=
 =?us-ascii?q?nWrozaKNwFqqKlAAJZyJsv5wu8Aju8ztgVk3kKIEhYdB+Fl4TpPkvBIPH8Dfex?=
 =?us-ascii?q?mVSslzJryujfPrL/B5XNM2HPn6r/crZj9UFczBM/wstY55JJDLEOPOz8WlT2uN?=
 =?us-ascii?q?zcDx85MBK7z/zoCdVgzo4eXWOPAqmEMKLdq1OI5+QvI/WSa48RojryN/8l5/v1?=
 =?us-ascii?q?gH8/nl8de6ap3Z0KaHyiGfRmOUqZbWL2gtgdCWcKohY+TOvyhV2GUD5TZGi9U7?=
 =?us-ascii?q?gz5zEmE4+mCYbDRoawgL2Oxiu7H5tWZnxYBVCIC3vna4KEW/JfIB+UOdJrxzwY?=
 =?us-ascii?q?SaC6Gchm0RC1qBS8zb1hIezJvCoCutXm3dlx4uTV0hYq6T1zCd/aymyIUiR4k3?=
 =?us-ascii?q?0FQ2wL2rtiqxl4w1aHza8qmvFdCJlf6u1EVkIgOIfBwvdmI9b1XA3HY5GOUlnx?=
 =?us-ascii?q?WcisAzw6UocsxcQTaV12AdSog0P/2H/gGrIQivmCHpkc9KXa0H7sYcFnxDyOgL?=
 =?us-ascii?q?AsikRjS9FKHWuhgKF56k7UHYGf1w2hmrqnb+w51T/B+WOHhT6WsV1VSkh1WLTJ?=
 =?us-ascii?q?UHQbTk/Xq93j4QXFVbD4TfwONgpa1ceDMONkcNTvhlRdDKPqPNXFf2uwgSG+Hx?=
 =?us-ascii?q?+OzbKXRJrrf2QbzGPWD01S10gs8HfOFRU3ACjp933TDRR0GF7val+q+u57/jfz?=
 =?us-ascii?q?dkIowhvCRFdmzKa15RcUmfHUH/gJ2akYuDgoqil5Wk6ww9/MI9WFrgtlOq5bZI?=
 =?us-ascii?q?V5qG1G3mLQrQA1HpGmI614nVkYO1Btvkju3g97TIVNl8QntmgtyiJ2KKSRylQH?=
 =?us-ascii?q?cCmXi8PeILrSf0D75hepI4rX3F3F2cferq4G8vM+g1L4+gisDkc4/n5g1sFIz3?=
 =?us-ascii?q?qa6dPBCw9EAsG5aVo+6xUv/+KSWSI6/Y6BkCQ0aaQ=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BMAgDZ1wdchxHrdtBkgheBMSomgVwEM?=
 =?us-ascii?q?gqMZ4plSoMJjQeJSYEkA0wTARgUh1IiNgcNAQMBAQEBAQECARMBAQEKCwkIGw4?=
 =?us-ascii?q?jDII2BQIDGgEGglwCAQMBAg8uAQEECikBAgMBAgYBAQEBRggDAS4lAgQBEgUdg?=
 =?us-ascii?q?jRLgWoDFQECAplUKgKKB4IfgnYBAQWBBQGDfRiCCQiMHheBf4ERgl2LEYk1hgJ?=
 =?us-ascii?q?FkFwJgiSPEyMQT5BQiQmPTgIEAgQFAg8FgU0LgXszGggbFYMngicXg0qKHAE2c?=
 =?us-ascii?q?oEHIYkFWAGBHgEB?=
X-IPAS-Result: =?us-ascii?q?A0BMAgDZ1wdchxHrdtBkgheBMSomgVwEMgqMZ4plSoMJjQe?=
 =?us-ascii?q?JSYEkA0wTARgUh1IiNgcNAQMBAQEBAQECARMBAQEKCwkIGw4jDII2BQIDGgEGg?=
 =?us-ascii?q?lwCAQMBAg8uAQEECikBAgMBAgYBAQEBRggDAS4lAgQBEgUdgjRLgWoDFQECApl?=
 =?us-ascii?q?UKgKKB4IfgnYBAQWBBQGDfRiCCQiMHheBf4ERgl2LEYk1hgJFkFwJgiSPEyMQT?=
 =?us-ascii?q?5BQiQmPTgIEAgQFAg8FgU0LgXszGggbFYMngicXg0qKHAE2coEHIYkFWAGBHgE?=
 =?us-ascii?q?B?=
X-IronPort-AV: E=Sophos;i="5.56,317,1539673200"; 
   d="scan'208";a="42840001"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 05 Dec 2018 05:54:55 -0800
Received: from localhost ([::1]:34653 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gUXde-0008BR-LB
	for like.xu@linux.intel.com; Wed, 05 Dec 2018 08:54:54 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:51926)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <aaron@os.amperecomputing.com>) id 1gUXTG-0008Ca-Jw
	for qemu-devel@nongnu.org; Wed, 05 Dec 2018 08:44:11 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <aaron@os.amperecomputing.com>) id 1gUXTF-0005gS-An
	for qemu-devel@nongnu.org; Wed, 05 Dec 2018 08:44:10 -0500
Received: from mail-co1nam04on0716.outbound.protection.outlook.com
	([2a01:111:f400:fe4d::716]:64512
	helo=NAM04-CO1-obe.outbound.protection.outlook.com)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <aaron@os.amperecomputing.com>)
	id 1gUXTC-0005F5-B4; Wed, 05 Dec 2018 08:44:06 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=amperemail.onmicrosoft.com; s=selector1-os-amperecomputing-com;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
	bh=MHE/7kApJ+xdUwTYLWERGW21KDFIyFntP5sv/j9135s=;
	b=b2sOXAVwJwQ8a/hwt8oiZvDMMNz59CAtoNKSaiRfHcvba+6QZZtTwt7qyC4HA3EZS3ZB7xQmuo2Lv+LPh+h6+xT1fcigZLeALGCgPK2Yff2SjZ0Khhu5OR/hW7K/AC2d6HQWd1QMcRW52/oZlQIYfQs4jijHiHYRXQApFCgO/Zc=
Received: from DM6PR01MB4825.prod.exchangelabs.com (20.177.218.222) by
	DM6PR01MB4204.prod.exchangelabs.com (20.176.106.157) with Microsoft
	SMTP
	Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
	15.20.1404.19; Wed, 5 Dec 2018 13:43:46 +0000
Received: from DM6PR01MB4825.prod.exchangelabs.com
	([fe80::9c7c:27c7:4cb7:f820]) by DM6PR01MB4825.prod.exchangelabs.com
	([fe80::9c7c:27c7:4cb7:f820%2]) with mapi id 15.20.1404.016;
	Wed, 5 Dec 2018 13:43:46 +0000
From: Aaron Lindsay <aaron@os.amperecomputing.com>
To: "qemu-arm@nongnu.org" <qemu-arm@nongnu.org>, Peter Maydell
	<peter.maydell@linaro.org>,
	Alistair Francis <alistair.francis@xilinx.com>, 
	Wei Huang <wei@redhat.com>,
	Peter Crosthwaite <crosthwaite.peter@gmail.com>, 
	Richard Henderson <richard.henderson@linaro.org>
Thread-Topic: [PATCH v9 11/14] target/arm: PMU: Add instruction and cycle
	events
Thread-Index: AQHUjKB/IPUdo9q60kejsudApNxsYA==
Date: Wed, 5 Dec 2018 13:43:26 +0000
Message-ID: <20181205134243.4791-12-aaron@os.amperecomputing.com>
References: <20181205134243.4791-1-aaron@os.amperecomputing.com>
In-Reply-To: <20181205134243.4791-1-aaron@os.amperecomputing.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-clientproxiedby: BN6PR12CA0032.namprd12.prod.outlook.com
	(2603:10b6:405:70::18) To DM6PR01MB4825.prod.exchangelabs.com
	(2603:10b6:5:6b::30)
authentication-results: spf=none (sender IP is )
	smtp.mailfrom=aaron@os.amperecomputing.com; 
x-ms-exchange-messagesentrepresentingtype: 1
x-originating-ip: [216.85.170.155]
x-ms-publictraffictype: Email
x-microsoft-exchange-diagnostics: 1; DM6PR01MB4204;
	6:fH9rDj4gf1lOpiy4SfP9Pw/NCJ6BwmYvZLFgAOHPB7UE6iMHKx5anZ0jv9SwTecrX/alrT3xtA7xGDtmCSizUWAIdFgGzwH/h/vdErGQXcP8E/hhDoY3yYRnek+lpAbqoPENOVTsz9tfoymYRWePHSqLmNOHqFz55E/SzsPhxkAqetzyXlkmWxd1FErLM8z2FAEVzc91bKNd57a3dUjIOqDd8uZ/h2Tanax/0KbOX4iC+k8qmimDPyCYCK9PdrvKXX8E9SyhwF/rFVHmjSHWtnlGIn6gFpKe4wyAp5qKy4eI3i3T1qmzo2fFsL9RQr8LDgfCoHidJPMtZ0FQ57WGrmmEuFqfwqk3hY4EOG5emm5rPoBKxoPE8yQ/FoqvBSAv13uK6/aMheLHLqIpqz8c4YhRcRwgN3K5ROg6C1b7L5F1XMjbNfVcEryGDaiTPUq0JaS6nNfAJqX4NY81MCCRZw==;
	5:5CVKYz/k+hLuMh5vpPeyJV4tKzb+PxJkXkWScTcQgi4dKkKiKSHwU47KStfObnArWfKKKzUr6f6pSkwRr5y4v6ZEJJkZO6L+tfZPeWrdPeoEQocDW0fiSCiI4brXXU7Ywab3ug4MoXricIH3OHW0MYy98Jc0xXiCZMf16Ah2Jdc=;
	7:l0ydt8eZPsiLFqN9mAA8K1c9D+a7DIIEFIP+jDhsW3DF+LA3pO3a+xYfQ1utgmXKOSSn4l+tC0iKWbNH9gHANv/8CC+RFsmDjeVVFsyL8eoGohn/IVoe7EPbf0dnt2t+7at65EaJhUZGdnQXkzEGlg==
x-ms-office365-filtering-correlation-id: 75402772-f9e9-44f0-96ac-08d65ab7a1d7
x-microsoft-antispam: BCL:0; PCL:0;
	RULEID:(2390098)(7020095)(4652040)(8989299)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(5600074)(711020)(2017052603328)(7153060)(7193020);
	SRVR:DM6PR01MB4204; 
x-ms-traffictypediagnostic: DM6PR01MB4204:
x-microsoft-antispam-prvs: <DM6PR01MB42044772B94CFEDC9B7CE39B8AA80@DM6PR01MB4204.prod.exchangelabs.com>
x-ms-exchange-senderadcheck: 1
x-exchange-antispam-report-cfa-test: BCL:0; PCL:0;
	RULEID:(8211001083)(6040522)(2401047)(5005006)(8121501046)(10201501046)(3002001)(93006095)(93001095)(3231455)(999002)(944501520)(52105112)(148016)(149066)(150057)(6041310)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123558120)(20161123562045)(20161123560045)(20161123564045)(201708071742011)(7699051)(76991095);
	SRVR:DM6PR01MB4204; BCL:0; PCL:0; RULEID:; SRVR:DM6PR01MB4204; 
x-forefront-prvs: 08770259B4
x-forefront-antispam-report: SFV:NSPM;
	SFS:(10019020)(366004)(136003)(39850400004)(346002)(376002)(396003)(189003)(199004)(106356001)(54906003)(110136005)(6436002)(4326008)(68736007)(7416002)(14454004)(14444005)(256004)(316002)(97736004)(6666004)(105586002)(2906002)(8936002)(486006)(1076002)(53936002)(6116002)(3846002)(8676002)(446003)(11346002)(2616005)(81166006)(86362001)(5660300001)(81156014)(6506007)(25786009)(386003)(476003)(71200400001)(26005)(478600001)(76176011)(102836004)(71190400001)(99286004)(52116002)(6486002)(7736002)(305945005)(66066001)(39060400002)(2501003)(6512007)(186003);
	DIR:OUT; SFP:1102; SCL:1; SRVR:DM6PR01MB4204;
	H:DM6PR01MB4825.prod.exchangelabs.com; FPR:; SPF:None; LANG:en;
	PTR:InfoNoRecords; MX:1; A:0; 
x-microsoft-antispam-message-info: tfuOivDAgBYUUyp923FEgPFwXL0TexAS2oGMod3AWaP1aScAzP8I6d0BBaH+3cDzAygT9L5RYJAWb2fpzriHQ8Qr/HhFBxyV9Jf09zCWZMSDxX4RRqzc/ekxzKqv34WxK2q2m5oDj/dXMjqAUKIH+DVRUs7d7HqkPvaGlSl4ihKafdttCFVGO4E3iGggiqAi//mMAFneLPnx24IhaV0mBQxEEZXkmYpH2cGyrkSbsbTMIGRW6imueA2JunxJF9uuwiMidi259K5RlFZtpoU2sY9dThoNikiHIzYkqyFso1MuDfxo37tZgNyECWUXpZ81vD5amxz5phto7RZ93d50lpOil6MHldxlzo22GavjLN4=
spamdiagnosticoutput: 1:99
spamdiagnosticmetadata: NSPM
Content-Type: text/plain; charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
X-OriginatorOrg: os.amperecomputing.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 75402772-f9e9-44f0-96ac-08d65ab7a1d7
X-MS-Exchange-CrossTenant-originalarrivaltime: 05 Dec 2018 13:43:26.4185 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: 3bc2b170-fd94-476d-b0ce-4229bdc904a7
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM6PR01MB4204
X-detected-operating-system: by eggs.gnu.org: Windows 7 or 8 [fuzzy]
X-Received-From: 2a01:111:f400:fe4d::716
Subject: [Qemu-devel] [PATCH v9 11/14] target/arm: PMU: Add instruction and
 cycle events
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Aaron Lindsay <aaron@os.amperecomputing.com>,
	Michael Spradling <mspradli@codeaurora.org>,
	"qemu-devel@nongnu.org" <qemu-devel@nongnu.org>,
	Digant Desai <digantd@codeaurora.org>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

The instruction event is only enabled when icount is used, cycles are
always supported. Always defining get_cycle_count (but altering its
behavior depending on CONFIG_USER_ONLY) allows us to remove some
CONFIG_USER_ONLY #defines throughout the rest of the code.

Signed-off-by: Aaron Lindsay <alindsay@codeaurora.org>
Signed-off-by: Aaron Lindsay <aaron@os.amperecomputing.com>
Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
---
 target/arm/helper.c | 90 ++++++++++++++++++++++-----------------------
 1 file changed, 44 insertions(+), 46 deletions(-)

diff --git a/target/arm/helper.c b/target/arm/helper.c
index c51031d262..a45ab5d9da 100644
--- a/target/arm/helper.c
+++ b/target/arm/helper.c
@@ -15,6 +15,7 @@
 #include "arm_ldst.h"
 #include <zlib.h> /* For crc32 */
 #include "exec/semihost.h"
+#include "sysemu/cpus.h"
 #include "sysemu/kvm.h"
 #include "fpu/softfloat.h"
 #include "qemu/range.h"
@@ -1021,7 +1022,48 @@ typedef struct pm_event {
     uint64_t (*get_count)(CPUARMState *);
 } pm_event;
=20
+static bool event_always_supported(CPUARMState *env)
+{
+    return true;
+}
+
+/*
+ * Return the underlying cycle count for the PMU cycle counters. If we're =
in
+ * usermode, simply return 0.
+ */
+static uint64_t cycles_get_count(CPUARMState *env)
+{
+#ifndef CONFIG_USER_ONLY
+    return muldiv64(qemu_clock_get_ns(QEMU_CLOCK_VIRTUAL),
+                   ARM_CPU_FREQ, NANOSECONDS_PER_SECOND);
+#else
+    return cpu_get_host_ticks();
+#endif
+}
+
+#ifndef CONFIG_USER_ONLY
+static bool instructions_supported(CPUARMState *env)
+{
+    return use_icount =3D=3D 1 /* Precise instruction counting */;
+}
+
+static uint64_t instructions_get_count(CPUARMState *env)
+{
+    return (uint64_t)cpu_get_icount_raw();
+}
+#endif
+
 static const pm_event pm_events[] =3D {
+#ifndef CONFIG_USER_ONLY
+    { .number =3D 0x008, /* INST_RETIRED, Instruction architecturally exec=
uted */
+      .supported =3D instructions_supported,
+      .get_count =3D instructions_get_count,
+    },
+    { .number =3D 0x011, /* CPU_CYCLES, Cycle */
+      .supported =3D event_always_supported,
+      .get_count =3D cycles_get_count,
+    }
+#endif
 };
=20
 /*
@@ -1030,7 +1072,7 @@ static const pm_event pm_events[] =3D {
  * should first be updated to something sparse instead of the current
  * supported_event_map[] array.
  */
-#define MAX_EVENT_ID 0x0
+#define MAX_EVENT_ID 0x11
 #define UNSUPPORTED_EVENT UINT16_MAX
 static uint16_t supported_event_map[MAX_EVENT_ID + 1];
=20
@@ -1131,8 +1173,6 @@ static CPAccessResult pmreg_access_swinc(CPUARMState =
*env,
     return pmreg_access(env, ri, isread);
 }
=20
-#ifndef CONFIG_USER_ONLY
-
 static CPAccessResult pmreg_access_selr(CPUARMState *env,
                                         const ARMCPRegInfo *ri,
                                         bool isread)
@@ -1243,9 +1283,7 @@ static bool pmu_counter_enabled(CPUARMState *env, uin=
t8_t counter)
  */
 void pmccntr_op_start(CPUARMState *env)
 {
-    uint64_t cycles =3D 0;
-    cycles =3D muldiv64(qemu_clock_get_ns(QEMU_CLOCK_VIRTUAL),
-                          ARM_CPU_FREQ, NANOSECONDS_PER_SECOND);
+    uint64_t cycles =3D cycles_get_count(env);
=20
     if (pmu_counter_enabled(env, 31)) {
         uint64_t eff_cycles =3D cycles;
@@ -1391,42 +1429,6 @@ static void pmccntr_write32(CPUARMState *env, const =
ARMCPRegInfo *ri,
     pmccntr_write(env, ri, deposit64(cur_val, 0, 32, value));
 }
=20
-#else /* CONFIG_USER_ONLY */
-
-void pmccntr_op_start(CPUARMState *env)
-{
-}
-
-void pmccntr_op_finish(CPUARMState *env)
-{
-}
-
-void pmevcntr_op_start(CPUARMState *env, uint8_t i)
-{
-}
-
-void pmevcntr_op_finish(CPUARMState *env, uint8_t i)
-{
-}
-
-void pmu_op_start(CPUARMState *env)
-{
-}
-
-void pmu_op_finish(CPUARMState *env)
-{
-}
-
-void pmu_pre_el_change(ARMCPU *cpu, void *ignored)
-{
-}
-
-void pmu_post_el_change(ARMCPU *cpu, void *ignored)
-{
-}
-
-#endif
-
 static void pmccfiltr_write(CPUARMState *env, const ARMCPRegInfo *ri,
                             uint64_t value)
 {
@@ -1814,7 +1816,6 @@ static const ARMCPRegInfo v7_cp_reginfo[] =3D {
     /* Unimplemented so WI. */
     { .name =3D "PMSWINC", .cp =3D 15, .crn =3D 9, .crm =3D 12, .opc1 =3D =
0, .opc2 =3D 4,
       .access =3D PL0_W, .accessfn =3D pmreg_access_swinc, .type =3D ARM_C=
P_NOP },
-#ifndef CONFIG_USER_ONLY
     { .name =3D "PMSELR", .cp =3D 15, .crn =3D 9, .crm =3D 12, .opc1 =3D 0=
, .opc2 =3D 5,
       .access =3D PL0_RW, .type =3D ARM_CP_ALIAS,
       .fieldoffset =3D offsetoflow32(CPUARMState, cp15.c9_pmselr),
@@ -1836,7 +1837,6 @@ static const ARMCPRegInfo v7_cp_reginfo[] =3D {
       .fieldoffset =3D offsetof(CPUARMState, cp15.c15_ccnt),
       .readfn =3D pmccntr_read, .writefn =3D pmccntr_write,
       .raw_readfn =3D raw_read, .raw_writefn =3D raw_write, },
-#endif
     { .name =3D "PMCCFILTR", .cp =3D 15, .opc1 =3D 0, .crn =3D 14, .crm =
=3D 15, .opc2 =3D 7,
       .writefn =3D pmccfiltr_write_a32, .readfn =3D pmccfiltr_read_a32,
       .access =3D PL0_RW, .accessfn =3D pmreg_access,
@@ -5506,7 +5506,6 @@ void register_cp_regs_for_features(ARMCPU *cpu)
          * count register.
          */
         unsigned int i, pmcrn =3D 0;
-#ifndef CONFIG_USER_ONLY
         ARMCPRegInfo pmcr =3D {
             .name =3D "PMCR", .cp =3D 15, .crn =3D 9, .crm =3D 12, .opc1 =
=3D 0, .opc2 =3D 0,
             .access =3D PL0_RW,
@@ -5563,7 +5562,6 @@ void register_cp_regs_for_features(ARMCPU *cpu)
             g_free(pmevtyper_name);
             g_free(pmevtyper_el0_name);
         }
-#endif
         ARMCPRegInfo clidr =3D {
             .name =3D "CLIDR", .state =3D ARM_CP_STATE_BOTH,
             .opc0 =3D 3, .crn =3D 0, .crm =3D 0, .opc1 =3D 1, .opc2 =3D 1,
--=20
2.19.1


