Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:43:46 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from FMSMGA003.fm.intel.com (fmsmga003.fm.intel.com [10.253.24.29])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 48C7458014B
	for <like.xu@linux.intel.com>; Thu,  6 Dec 2018 02:14:40 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by FMSMGA003-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 02:14:39 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A1FStlRNeRpEGkycSgDgl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0I/74rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZXshfSSJPDIC7?=
 =?us-ascii?q?YYQAAOQPIP5Yoov/qVYBsBezCxWgC/30yjJTmnP73rc33/g7HA3awAAtGc8Fvn?=
 =?us-ascii?q?TOrNXyMacfSfq1w7fNzTTDdf9W3zD955bMch06uv6MWah/ftfPxkU2GAPFlFKQ?=
 =?us-ascii?q?qZH9Pz+PyusNtG2b4ux9Xuysk24qsx99riSsy8s2l4XFm4EYxkra+Sh3wIs5P8?=
 =?us-ascii?q?C0RUxjbdK5EpZdtDuWO5VqTs4hWW1kpSc3xqcItJKleiUB1Y4pyATFa/OddoiF?=
 =?us-ascii?q?+hLjW/iVITd/nH9lfLO/hw2u8Ui70OH8Wc+00EtQoipCiNnMuWgB1x3V6seZVv?=
 =?us-ascii?q?tw5lmt1SqM2gzJ9+1IPEM5mbDFJ5MvwrM8jIcfvEbbEi/zgkr2jauWdks++uiv?=
 =?us-ascii?q?7uTqeqzmqYGZN49pkw3xL7ohmtKhDuQ8KwQBRG+b+fm61LL/40L5W7JGjvk3kq?=
 =?us-ascii?q?narp/WP8saprOhDg9R04Yj7Qu/Dji83NQZm3kHMExKeBadg4f1PFHOJev1DfG4?=
 =?us-ascii?q?g1Sqnzdrwe3GMqfmApXXIXjPiK3hcqpl605A1AozyshS55ZVCrECPv3/QEDwtM?=
 =?us-ascii?q?HDAx89Mgy0xfvnCdpn2oMfX2KPHrGWMKfIvVCU4eIvJrrEWYkOpTyoK+Q5/+W8?=
 =?us-ascii?q?yjg9mEQBZu+v2p0Ybm3+Ge5pZECQYH7pi9FGFn8Wvw04V6vzhVifFDJeeXu2DJ?=
 =?us-ascii?q?86/SwxXYevDIPfQdK0jbmcmSu2AJBSI3pLE02BCmvAcYKCVPERLiWILZh6jzYG?=
 =?us-ascii?q?WLO9HpInzgykrwTgyrBqfdbTrzQVsI+m2NVr6un7kxY0+jppScOH3DKjVWZxy3?=
 =?us-ascii?q?kFQi5w2qdypWR3zl6P3O13mftFDZpY4PYaAU8BKZfAwrkiWJjJUQXbc4LMEQ7+?=
 =?us-ascii?q?Tw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0CoAQA/9ghchxHrdtBkgheBMSqBD4Epj?=
 =?us-ascii?q?HKlCYFzEgEBGAMRh1YiNAkNAQMBAQEBAQECARMBAQEKCwkIGw4jDII2BQIDGgE?=
 =?us-ascii?q?Ggl8EAiQLAQ0BAQQKKQECAwECBgIfKQgDATABBQE1BYJRSwGCAQEDAZoWPIodg?=
 =?us-ascii?q?WwzgnYBAQWGAoEkCBKHXYFrgSiBHIIWgRGGF4dXiTMEgW+VOwcChwSDN4cAI4F?=
 =?us-ascii?q?ciAU2hx4siWaOUgIEAgQFAgUPIYElgg1wUIJsCYIeFxKDOIEEiVBxgQQDiHCBd?=
 =?us-ascii?q?wEB?=
X-IPAS-Result: =?us-ascii?q?A0CoAQA/9ghchxHrdtBkgheBMSqBD4EpjHKlCYFzEgEBGAM?=
 =?us-ascii?q?Rh1YiNAkNAQMBAQEBAQECARMBAQEKCwkIGw4jDII2BQIDGgEGgl8EAiQLAQ0BA?=
 =?us-ascii?q?QQKKQECAwECBgIfKQgDATABBQE1BYJRSwGCAQEDAZoWPIodgWwzgnYBAQWGAoE?=
 =?us-ascii?q?kCBKHXYFrgSiBHIIWgRGGF4dXiTMEgW+VOwcChwSDN4cAI4FciAU2hx4siWaOU?=
 =?us-ascii?q?gIEAgQFAgUPIYElgg1wUIJsCYIeFxKDOIEEiVBxgQQDiHCBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,322,1539673200"; 
   d="scan'208";a="141014702"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 06 Dec 2018 02:14:39 -0800
Received: from localhost ([::1]:39917 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gUqg2-0006Zq-Fe
	for like.xu@linux.intel.com; Thu, 06 Dec 2018 05:14:38 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:47282)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <remy.noel@blade-group.com>) id 1gUqfj-0006ZT-Jg
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 05:14:24 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <remy.noel@blade-group.com>) id 1gUqfe-0002Ce-E0
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 05:14:18 -0500
Received: from mail-wm1-x343.google.com ([2a00:1450:4864:20::343]:51680)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <remy.noel@blade-group.com>)
	id 1gUqfd-0002CC-Ra
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 05:14:14 -0500
Received: by mail-wm1-x343.google.com with SMTP id s14so389234wmh.1
	for <qemu-devel@nongnu.org>; Thu, 06 Dec 2018 02:14:13 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=blade-group.com; s=google;
	h=from:to:cc:subject:date:message-id:mime-version
	:content-transfer-encoding;
	bh=Lt9EIp2Qe+BGsgQZspERWCFWYGynF6IW73NeKqEgjRs=;
	b=Vd5/YcT+n3SQfrwUqOYG8WvD0GvND577errbZmDaiGbseYMUXCKrddVsjZDC/q+cpT
	xXipJmf2UztI7F/hsjLjXmF6Uo3QUyt9GcKl4Sx/+Zo6cTlv2gEpoXHeC9NARC+HYHri
	n/iJMLSfWnPn3naWaToJOF4yLvEDSPQJh4r8XOMCnf7rK/S7hJ/OLG+T6W7M1bfny1My
	ocYuSUBQjXNCWqUfeRMpTH+OGL+ZxuMrweSqZXQgUvm1P2ynIGAI2+92jXiWqLxZQN/G
	VzwUQWkLcdsr8cNid+wBkIoJURx1jb4s/kE7roZs3Tg6BQTIuKs2r/6dSTxDlEDRTg/n
	w5kQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:mime-version
	:content-transfer-encoding;
	bh=Lt9EIp2Qe+BGsgQZspERWCFWYGynF6IW73NeKqEgjRs=;
	b=QVqRPvIbK74ZPgxKwakKDINlHWVS1vIUmYz3oRnLOOTe+GU/crG9ikfoF/qmHYKss7
	LI6DkGpdz9FzUo8tUBikDB6KNZmqpZlmnPSm5rdCLQJfeCKGbXEfcBfcm78y4zTW+ieT
	+nNfLDbQthO3c4kHqFiFJLdPXBPdEOTmmrlU8jDC699HIUK/M8oj5+NVYfB2XZC087W7
	hVQtPoglwt+Uvm0iUjpVhRoneBfyqx8rVGbw0f14i9shA/JZe2AbJVIurY/FsVL6++w8
	5RP3VM/Vr/Fr0jO4MNvmwXAgUlTRNnOLd0fpOeq1JOjGtnPVCdiwQYTLipeAkaINr66+
	WgFA==
X-Gm-Message-State: AA+aEWYRr40xfB6QkhS4xynGySTbo/WiWNrhqIytrJq2P3cupbDlFeN1
	YI/i788XZlDwqxwPMfH5XioZo6AtbsQOGg==
X-Google-Smtp-Source: AFSGD/VVjcSWRH2hyf1XT9vVRHSfitmtABMN3miFKdgkgwqJRRpM8la3ZTgoDLummtTeiftKdcTXqg==
X-Received: by 2002:a7b:c34c:: with SMTP id l12mr1605852wmj.147.1544091251707; 
	Thu, 06 Dec 2018 02:14:11 -0800 (PST)
Received: from mocramis-ultrabook.localdomain ([178.208.16.32])
	by smtp.gmail.com with ESMTPSA id
	h131sm466305wmd.17.2018.12.06.02.14.10
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Thu, 06 Dec 2018 02:14:11 -0800 (PST)
From: remy.noel@blade-group.com
To: qemu-devel@nongnu.org
Date: Thu,  6 Dec 2018 11:14:23 +0100
Message-Id: <20181206101423.17344-1-remy.noel@blade-group.com>
X-Mailer: git-send-email 2.19.2
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 2a00:1450:4864:20::343
Subject: [Qemu-devel] [QEMU-devel][PATCH v2] aio-posix: Fix concurrent
 aio_poll/set_fd_handler.
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Fam Zheng <famz@redhat.com>,
	"open list:Block I/O path" <qemu-block@nongnu.org>,
	Stefan Weil <sw@weilnetz.de>, Remy Noel <remy.noel@blade-group.com>,
	Stefan Hajnoczi <stefanha@redhat.com>, Paolo Bonzini <pbonzini@redhat.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

From: Remy Noel <remy.noel@blade-group.com>

It is possible for an io_poll callback to be concurrently executed along
with an aio_set_fd_handlers. This can cause all sorts of problems, like
a NULL callback or a bad opaque pointer.

This changes set_fd_handlers so that it no longer modify existing handlers
entries and instead, always insert those after having proper initialisation.

Also, we do not call aio_epoll_update for deleted handlers as this has
no impact whatsoever.

Signed-off-by: Remy Noel <remy.noel@blade-group.com>
---
 util/aio-posix.c | 85 ++++++++++++++++++++++++++++--------------------
 util/aio-win32.c | 54 ++++++++++++++----------------
 2 files changed, 74 insertions(+), 65 deletions(-)

diff --git a/util/aio-posix.c b/util/aio-posix.c
index 51c41ed3c9..b34d97292a 100644
--- a/util/aio-posix.c
+++ b/util/aio-posix.c
@@ -200,6 +200,31 @@ static AioHandler *find_aio_handler(AioContext *ctx, int fd)
     return NULL;
 }
 
+static bool aio_remove_fd_handler(AioContext *ctx, AioHandler *node)
+{
+    /* If the GSource is in the process of being destroyed then
+     * g_source_remove_poll() causes an assertion failure.  Skip
+     * removal in that case, because glib cleans up its state during
+     * destruction anyway.
+     */
+    if (!g_source_is_destroyed(&ctx->source)) {
+        g_source_remove_poll(&ctx->source, &node->pfd);
+    }
+
+    /* If a read is in progress, just mark the node as deleted */
+    if (qemu_lockcnt_count(&ctx->list_lock)) {
+        node->deleted = 1;
+        node->pfd.revents = 0;
+        return false;
+    }
+    /* Otherwise, delete it for real.  We can't just mark it as
+     * deleted because deleted nodes are only cleaned up while
+     * no one is walking the handlers list.
+     */
+    QLIST_REMOVE(node, node);
+    return true;
+}
+
 void aio_set_fd_handler(AioContext *ctx,
                         int fd,
                         bool is_external,
@@ -209,6 +234,7 @@ void aio_set_fd_handler(AioContext *ctx,
                         void *opaque)
 {
     AioHandler *node;
+    AioHandler *new_node = NULL;
     bool is_new = false;
     bool deleted = false;
     int poll_disable_change;
@@ -223,50 +249,35 @@ void aio_set_fd_handler(AioContext *ctx,
             qemu_lockcnt_unlock(&ctx->list_lock);
             return;
         }
-
-        /* If the GSource is in the process of being destroyed then
-         * g_source_remove_poll() causes an assertion failure.  Skip
-         * removal in that case, because glib cleans up its state during
-         * destruction anyway.
-         */
-        if (!g_source_is_destroyed(&ctx->source)) {
-            g_source_remove_poll(&ctx->source, &node->pfd);
-        }
-
-        /* If a read is in progress, just mark the node as deleted */
-        if (qemu_lockcnt_count(&ctx->list_lock)) {
-            node->deleted = 1;
-            node->pfd.revents = 0;
-        } else {
-            /* Otherwise, delete it for real.  We can't just mark it as
-             * deleted because deleted nodes are only cleaned up while
-             * no one is walking the handlers list.
-             */
-            QLIST_REMOVE(node, node);
-            deleted = true;
-        }
+        deleted = aio_remove_fd_handler(ctx, node);
         poll_disable_change = -!node->io_poll;
     } else {
         poll_disable_change = !io_poll - (node && !node->io_poll);
         if (node == NULL) {
-            /* Alloc and insert if it's not already there */
-            node = g_new0(AioHandler, 1);
-            node->pfd.fd = fd;
-            QLIST_INSERT_HEAD_RCU(&ctx->aio_handlers, node, node);
-
-            g_source_add_poll(&ctx->source, &node->pfd);
             is_new = true;
         }
+        /* Alloc and insert if it's not already there */
+        new_node = g_new0(AioHandler, 1);
 
         /* Update handler with latest information */
-        node->io_read = io_read;
-        node->io_write = io_write;
-        node->io_poll = io_poll;
-        node->opaque = opaque;
-        node->is_external = is_external;
+        new_node->io_read = io_read;
+        new_node->io_write = io_write;
+        new_node->io_poll = io_poll;
+        new_node->opaque = opaque;
+        new_node->is_external = is_external;
+
+        if (is_new) {
+            new_node->pfd.fd = fd;
+        } else {
+            deleted = aio_remove_fd_handler(ctx, node);
+            new_node->pfd = node->pfd;
+        }
+        g_source_add_poll(&ctx->source, &new_node->pfd);
 
-        node->pfd.events = (io_read ? G_IO_IN | G_IO_HUP | G_IO_ERR : 0);
-        node->pfd.events |= (io_write ? G_IO_OUT | G_IO_ERR : 0);
+        new_node->pfd.events = (io_read ? G_IO_IN | G_IO_HUP | G_IO_ERR : 0);
+        new_node->pfd.events |= (io_write ? G_IO_OUT | G_IO_ERR : 0);
+
+        QLIST_INSERT_HEAD_RCU(&ctx->aio_handlers, new_node, node);
     }
 
     /* No need to order poll_disable_cnt writes against other updates;
@@ -278,7 +289,9 @@ void aio_set_fd_handler(AioContext *ctx,
     atomic_set(&ctx->poll_disable_cnt,
                atomic_read(&ctx->poll_disable_cnt) + poll_disable_change);
 
-    aio_epoll_update(ctx, node, is_new);
+    if (new_node) {
+        aio_epoll_update(ctx, new_node, is_new);
+    }
     qemu_lockcnt_unlock(&ctx->list_lock);
     aio_notify(ctx);
 
diff --git a/util/aio-win32.c b/util/aio-win32.c
index c58957cc4b..00e38cdd9f 100644
--- a/util/aio-win32.c
+++ b/util/aio-win32.c
@@ -35,6 +35,22 @@ struct AioHandler {
     QLIST_ENTRY(AioHandler) node;
 };
 
+static void aio_remove_fd_handler(AioContext *ctx, AioHandler *node)
+{
+    /* If aio_poll is in progress, just mark the node as deleted */
+    if (qemu_lockcnt_count(&ctx->list_lock)) {
+        node->deleted = 1;
+        node->pfd.revents = 0;
+    } else {
+        /* Otherwise, delete it for real.  We can't just mark it as
+         * deleted because deleted nodes are only cleaned up after
+         * releasing the list_lock.
+         */
+        QLIST_REMOVE(node, node);
+        g_free(node);
+    }
+}
+
 void aio_set_fd_handler(AioContext *ctx,
                         int fd,
                         bool is_external,
@@ -56,30 +72,20 @@ void aio_set_fd_handler(AioContext *ctx,
     /* Are we deleting the fd handler? */
     if (!io_read && !io_write) {
         if (node) {
-            /* If aio_poll is in progress, just mark the node as deleted */
-            if (qemu_lockcnt_count(&ctx->list_lock)) {
-                node->deleted = 1;
-                node->pfd.revents = 0;
-            } else {
-                /* Otherwise, delete it for real.  We can't just mark it as
-                 * deleted because deleted nodes are only cleaned up after
-                 * releasing the list_lock.
-                 */
-                QLIST_REMOVE(node, node);
-                g_free(node);
-            }
+            aio_remove_fd_handler(ctx, node);
         }
     } else {
         HANDLE event;
         long bitmask = 0;
 
-        if (node == NULL) {
-            /* Alloc and insert if it's not already there */
-            node = g_new0(AioHandler, 1);
-            node->pfd.fd = fd;
-            QLIST_INSERT_HEAD_RCU(&ctx->aio_handlers, node, node);
+        if (node) {
+            aio_remove_fd_handler(ctx, node);
         }
 
+        /* Alloc and insert if it's not already there */
+        node = g_new0(AioHandler, 1);
+        node->pfd.fd = fd;
+
         node->pfd.events = 0;
         if (node->io_read) {
             node->pfd.events |= G_IO_IN;
@@ -104,6 +110,7 @@ void aio_set_fd_handler(AioContext *ctx,
             bitmask |= FD_WRITE | FD_CONNECT;
         }
 
+        QLIST_INSERT_HEAD_RCU(&ctx->aio_handlers, node, node);
         event = event_notifier_get_handle(&ctx->notifier);
         WSAEventSelect(node->pfd.fd, event, bitmask);
     }
@@ -139,18 +146,7 @@ void aio_set_event_notifier(AioContext *ctx,
         if (node) {
             g_source_remove_poll(&ctx->source, &node->pfd);
 
-            /* aio_poll is in progress, just mark the node as deleted */
-            if (qemu_lockcnt_count(&ctx->list_lock)) {
-                node->deleted = 1;
-                node->pfd.revents = 0;
-            } else {
-                /* Otherwise, delete it for real.  We can't just mark it as
-                 * deleted because deleted nodes are only cleaned up after
-                 * releasing the list_lock.
-                 */
-                QLIST_REMOVE(node, node);
-                g_free(node);
-            }
+            aio_remove_fd_handler(ctx, node);
         }
     } else {
         if (node == NULL) {
-- 
2.19.2


