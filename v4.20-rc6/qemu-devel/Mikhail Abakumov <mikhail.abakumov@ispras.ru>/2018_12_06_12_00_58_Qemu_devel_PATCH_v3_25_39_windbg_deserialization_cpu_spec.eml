Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:45:35 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 65683580443
	for <like.xu@linux.intel.com>; Thu,  6 Dec 2018 04:31:08 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga002-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 04:31:08 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A3LLQ1xa05GQDeR/OY5rhupj/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZrsm6bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjmk8qxlSgLniD?=
 =?us-ascii?q?0fOjA57m/ZhM9+g6BVoB2vqBNw34HabpyNNPd8fK3Qcs4WSGRdUslPTCxMGZ+8?=
 =?us-ascii?q?YokVAuYdIepVtYvwql0TphW+HwmsA+bvxydPiH/33q060/4uEQDC3Ac9A98Bq2?=
 =?us-ascii?q?7brNboNKcXVuC10rTDwDLGb/NX2jf96JLHchElof2WR71/atDeyUoyFwPAiVWQ?=
 =?us-ascii?q?t5foPzKO1uQVqWiU9fFgWfi1i246sgx8pCWkyMQ0ioTRmI4Z1lPJ+T9kzIooJt?=
 =?us-ascii?q?C0UlB3bNCkHZdKqi2XNZN6T8AiTm1ypSo3xaMKtYSmcCQXypkr3QDTZ+KGfoWO?=
 =?us-ascii?q?/xntTvyeIS1ii3JgYL+/hwi98UynyuDkUsm00U1KrjZektXWuXAN0QHT5tKASv?=
 =?us-ascii?q?tn8UetwTeP1wbN5eFYOU04i7bXJp07zrIti5Yesl7PEjH4lUj2lqOaa0cp9vCt?=
 =?us-ascii?q?6+v9Y7XmopGcN5VzigH7Kqkug9KwAeElMgQXQmeU5/q826Pn/UHgW7pKieA2kq?=
 =?us-ascii?q?/Fv5/EPsQXoaq5Aw5W0ok98Rq+ACqm3cwcnXkGKlJFZR2Gg5LoO1HIPPD3E/O/?=
 =?us-ascii?q?j06wnzdswvDLJbvhApLLLnjMlrfhYKxx60lGyAo81dxf/Y5bCqkdIPLvXU/8rN?=
 =?us-ascii?q?jYDh46MwOq2ermB8h925gaWWKOBK+ZLazTvUWJ5uIpP+mDeosVtCzhJPgi4v69?=
 =?us-ascii?q?xUI/gkIXKKm1wYMMOjf/GvV9P17fZ33qjdEcV2AQsU07Re3ujVSEFjlLe3e1Wb?=
 =?us-ascii?q?l7/zw+FceqAJnOQtOQhqec1nK+F5xSemcUE12JDDLkepuJX7IWZTuPL9R9ujoD?=
 =?us-ascii?q?U7enVskmzx75rxLwybdsMr/J/DYFv4noztl/6r7vkkQr+DlpSsiQzWyJZ2dzmG?=
 =?us-ascii?q?wOWnkxxq8sj1Z6zwKm0Kt4iv1cXfVZ7vBUVwAkfcrZzu96AtH2HAvLd9SUTVG4?=
 =?us-ascii?q?atS9GSs4VZQr3oldMA5GB9y+g0WbjGKRCLgPmunTCQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AUBQBDFQlcmBHrdtBkHgEfBgeBTAKBL?=
 =?us-ascii?q?4Jig3qIeI0XgSGRJYUtgXMUGBSEOwODGCI0CQ0BAwEBAQEBAQIBEwEBAQEBCAs?=
 =?us-ascii?q?LBhsOL4I2BQIDGAmCXAMDAQIgBB8KKQMDAQIGAQEkAiIEAgIDAUMQGQWDHIICA?=
 =?us-ascii?q?QMBpU18M4orgQuLE4FXP4EQATOCKoUQgyqCVwKPfTOQLwcCgiAEhCOLF4pLhmq?=
 =?us-ascii?q?ZC4FGgg1NMoEBCFaBTpBeb4EHiBtVgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AUBQBDFQlcmBHrdtBkHgEfBgeBTAKBL4Jig3qIeI0XgSG?=
 =?us-ascii?q?RJYUtgXMUGBSEOwODGCI0CQ0BAwEBAQEBAQIBEwEBAQEBCAsLBhsOL4I2BQIDG?=
 =?us-ascii?q?AmCXAMDAQIgBB8KKQMDAQIGAQEkAiIEAgIDAUMQGQWDHIICAQMBpU18M4orgQu?=
 =?us-ascii?q?LE4FXP4EQATOCKoUQgyqCVwKPfTOQLwcCgiAEhCOLF4pLhmqZC4FGgg1NMoEBC?=
 =?us-ascii?q?FaBTpBeb4EHiBtVgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,322,1539673200"; 
   d="scan'208";a="55176424"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 06 Dec 2018 04:31:07 -0800
Received: from localhost ([::1]:40486 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gUso6-0000dj-Om
	for like.xu@linux.intel.com; Thu, 06 Dec 2018 07:31:06 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:41907)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <mikhail.abakumov@ispras.ru>) id 1gUsL9-0000bb-M1
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 07:01:17 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <mikhail.abakumov@ispras.ru>) id 1gUsL5-0005kf-7V
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 07:01:11 -0500
Received: from mail.ispras.ru ([83.149.199.45]:60274)
	by eggs.gnu.org with esmtp (Exim 4.71)
	(envelope-from <mikhail.abakumov@ispras.ru>) id 1gUsL3-0005jc-1Z
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 07:01:07 -0500
Received: from Misha-PC.lan02.inno (unknown [85.142.117.226])
	by mail.ispras.ru (Postfix) with ESMTPSA id 5ED6A540082;
	Thu,  6 Dec 2018 15:01:03 +0300 (MSK)
From: Mikhail Abakumov <mikhail.abakumov@ispras.ru>
To: qemu-devel@nongnu.org
Date: Thu, 06 Dec 2018 15:00:58 +0300
Message-ID: <154409765859.5432.12915507765102369275.stgit@Misha-PC.lan02.inno>
In-Reply-To: <154409751316.5432.3325938832238028060.stgit@Misha-PC.lan02.inno>
References: <154409751316.5432.3325938832238028060.stgit@Misha-PC.lan02.inno>
User-Agent: StGit/0.17.1-dirty
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 3.x [fuzzy]
X-Received-From: 83.149.199.45
Subject: [Qemu-devel] [PATCH v3 25/39] windbg: [de]serialization cpu spec
 registers
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: sw@weilnetz.de, lprosek@redhat.com, dovgaluk@ispras.ru,
	rkagan@virtuozzo.com, pbonzini@redhat.com, den@openvz.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Signed-off-by: Mikhail Abakumov <mikhail.abakumov@ispras.ru>
Signed-off-by: Pavel Dovgalyuk <dovgaluk@ispras.ru>
---
 target/i386/windbgstub.c |  123 ++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 123 insertions(+)

diff --git a/target/i386/windbgstub.c b/target/i386/windbgstub.c
index 7a091e1dee..a1d27b8aca 100644
--- a/target/i386/windbgstub.c
+++ b/target/i386/windbgstub.c
@@ -767,12 +767,135 @@ static int fun_name(CPUState *cs, uint8_t *buf, int buf_size,                  \
     return 0;                                                                  \
 }
 
+#define GEN_WINDBG_KSPEC_REGS_RW(fun_name, is_read)                            \
+static int fun_name(CPUState *cs, uint8_t *buf, int buf_size,                  \
+                    int offset, int len)                                       \
+{                                                                              \
+    X86CPU *cpu = X86_CPU(cs);                                                 \
+    CPUX86State *env = &cpu->env;                                              \
+    uint32_t f_size = 0;                                                       \
+                                                                               \
+    if (len < 0 || len > buf_size) {                                           \
+        WINDBG_ERROR("" #fun_name ": incorrect length %d", len);               \
+        return 1;                                                              \
+    }                                                                          \
+                                                                               \
+    if (offset < 0 || offset + len > sizeof(CPU_KSPECIAL_REGISTERS)) {         \
+        WINDBG_ERROR("" #fun_name ": incorrect offset %d", f_size);            \
+        return 2;                                                              \
+    }                                                                          \
+                                                                               \
+    len = MIN(len, sizeof(CPU_KSPECIAL_REGISTERS) - offset);                   \
+                                                                               \
+    while (offset < len) {                                                     \
+        switch (offset) {                                                      \
+        CASE_FIELD(CPU_KSPECIAL_REGISTERS, Cr0, f_size, {                      \
+            RW_CR(buf, cs, 0, is_read);                                        \
+        });                                                                    \
+        CASE_FIELD(CPU_KSPECIAL_REGISTERS, Cr2, f_size, {                      \
+            if (is_read) {                                                     \
+                env->cr[2] = (int32_t) ldtul_p(buf);                           \
+            } else {                                                           \
+                sttul_p(buf, (target_ulong) env->cr[2]);                       \
+            }                                                                  \
+        });                                                                    \
+        CASE_FIELD(CPU_KSPECIAL_REGISTERS, Cr3, f_size, {                      \
+            RW_CR(buf, cs, 3, is_read);                                        \
+        });                                                                    \
+        CASE_FIELD(CPU_KSPECIAL_REGISTERS, Cr4, f_size, {                      \
+            RW_CR(buf, cs, 4, is_read);                                        \
+        });                                                                    \
+        CASE_FIELD(CPU_KSPECIAL_REGISTERS, KernelDr0, f_size, {                \
+            RW_DR(buf, cs, 0, is_read);                                        \
+        });                                                                    \
+        CASE_FIELD(CPU_KSPECIAL_REGISTERS, KernelDr1, f_size, {                \
+            RW_DR(buf, cs, 1, is_read);                                        \
+        });                                                                    \
+        CASE_FIELD(CPU_KSPECIAL_REGISTERS, KernelDr2, f_size, {                \
+            RW_DR(buf, cs, 2, is_read);                                        \
+        });                                                                    \
+        CASE_FIELD(CPU_KSPECIAL_REGISTERS, KernelDr3, f_size, {                \
+            RW_DR(buf, cs, 3, is_read);                                        \
+        });                                                                    \
+        CASE_FIELD(CPU_KSPECIAL_REGISTERS, KernelDr6, f_size, {                \
+            RW_DR(buf, cs, 6, is_read);                                        \
+        });                                                                    \
+        CASE_FIELD(CPU_KSPECIAL_REGISTERS, KernelDr7, f_size, {                \
+            RW_DR(buf, cs, 7, is_read);                                        \
+        });                                                                    \
+        CASE_FIELD(CPU_KSPECIAL_REGISTERS, Gdtr.Pad, f_size, {});              \
+        CASE_FIELD(CPU_KSPECIAL_REGISTERS, Gdtr.Limit, f_size, {               \
+            rwuw_p(buf, env->gdt.limit, is_read);                              \
+        });                                                                    \
+        CASE_FIELD(CPU_KSPECIAL_REGISTERS, Gdtr.Base, f_size, {                \
+            rwtul_p(buf, env->gdt.base, is_read);                              \
+        });                                                                    \
+        CASE_FIELD(CPU_KSPECIAL_REGISTERS, Idtr.Pad, f_size, {});              \
+        CASE_FIELD(CPU_KSPECIAL_REGISTERS, Idtr.Limit, f_size, {               \
+            rwuw_p(buf, env->idt.limit, is_read);                              \
+        });                                                                    \
+        CASE_FIELD(CPU_KSPECIAL_REGISTERS, Idtr.Base, f_size, {                \
+            rwtul_p(buf, env->idt.base, is_read);                              \
+        });                                                                    \
+        CASE_FIELD(CPU_KSPECIAL_REGISTERS, Tr, f_size, {                       \
+            rwuw_p(buf, env->tr.selector, is_read);                            \
+        });                                                                    \
+        CASE_FIELD(CPU_KSPECIAL_REGISTERS, Ldtr, f_size, {                     \
+            rwuw_p(buf, env->tr.selector, is_read);                            \
+        });                                                                    \
+        CASE_FIELD_X32(CPU_KSPECIAL_REGISTERS, Reserved, f_size, {});          \
+        CASE_FIELD_X64(CPU_KSPECIAL_REGISTERS, MxCsr, f_size, {                \
+            rwl_p(buf, env->mxcsr, is_read);                                   \
+        });                                                                    \
+        CASE_FIELD_X64(CPU_KSPECIAL_REGISTERS, DebugControl, f_size, {});      \
+        CASE_FIELD_X64(CPU_KSPECIAL_REGISTERS, LastBranchToRip, f_size, {});   \
+        CASE_FIELD_X64(CPU_KSPECIAL_REGISTERS, LastBranchFromRip, f_size, {}); \
+        CASE_FIELD_X64(CPU_KSPECIAL_REGISTERS, LastExceptionToRip, f_size, {});\
+        CASE_FIELD_X64(CPU_KSPECIAL_REGISTERS, LastExceptionFromRip, f_size, { \
+        });                                                                    \
+        CASE_FIELD_X64(CPU_KSPECIAL_REGISTERS, Cr8, f_size, {});               \
+        CASE_FIELD_X64(CPU_KSPECIAL_REGISTERS, MsrGsBase, f_size, {            \
+            rwtul_p(buf, env->segs[R_GS].base, is_read);                       \
+        });                                                                    \
+        CASE_FIELD_X64(CPU_KSPECIAL_REGISTERS, MsrGsSwap, f_size, {            \
+            rwtul_p(buf, env->kernelgsbase, is_read);                          \
+        });                                                                    \
+        CASE_FIELD_X64(CPU_KSPECIAL_REGISTERS, MsrStar, f_size, {              \
+            rwtul_p(buf, env->star, is_read);                                  \
+        });                                                                    \
+        CASE_FIELD_X64(CPU_KSPECIAL_REGISTERS, MsrLStar, f_size, {             \
+            rwtul_p(buf, env->lstar, is_read);                                 \
+        });                                                                    \
+        CASE_FIELD_X64(CPU_KSPECIAL_REGISTERS, MsrCStar, f_size, {             \
+            rwtul_p(buf, env->cstar, is_read);                                 \
+        });                                                                    \
+        CASE_FIELD_X64(CPU_KSPECIAL_REGISTERS, MsrSyscallMask, f_size, {       \
+            /* NOTE: Unimplemented in qemu: msr MSR_SFMASK */                  \
+        });                                                                    \
+        CASE_FIELD_X64(CPU_KSPECIAL_REGISTERS, Xcr0, f_size, {                 \
+            rwtul_p(buf, env->xcr0, is_read);                                  \
+        });                                                                    \
+        default:                                                               \
+            f_size = 1;                                                        \
+        }                                                                      \
+        offset += f_size;                                                      \
+        buf += f_size;                                                         \
+    }                                                                          \
+    return 0;                                                                  \
+}
+
 __attribute__ ((unused)) /* unused yet */
 GEN_WINDBG_CONTEXT_RW(windbg_read_context, false)
 
 __attribute__ ((unused)) /* unused yet */
 GEN_WINDBG_CONTEXT_RW(windbg_write_context, true)
 
+__attribute__ ((unused)) /* unused yet */
+GEN_WINDBG_KSPEC_REGS_RW(windbg_read_ks_regs, false)
+
+__attribute__ ((unused)) /* unused yet */
+GEN_WINDBG_KSPEC_REGS_RW(windbg_write_ks_regs, true)
+
 static bool find_KPCR(CPUState *cs)
 {
     X86CPU *cpu = X86_CPU(cs);


