Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 06 Dec 2018 08:52:44 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 6E6BF580433
	for <like.xu@linux.intel.com>; Wed,  5 Dec 2018 05:09:34 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by fmsmga006-1.fm.intel.com with ESMTP; 05 Dec 2018 05:09:34 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3Akju7jxYlo+IV9lL2/MboY0f/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZrsm6bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjmk8qxlSgLniD?=
 =?us-ascii?q?0fOjA57m/ZhM9+g6BVoB2vqBNw34HabpyNNPd8fK3Qcs4WSGRdUslPTCxMGZ+8?=
 =?us-ascii?q?YokVAuYdIepVtYvwql0TphW+HwmsA+bvxydPiH/33q060/4uEQDC3Ac9A98Bq2?=
 =?us-ascii?q?7brNboNKcXVuC10rTDwDLGb/NX2jf96JLHchElof2WR71/atDeyUoyFwPAiVWQ?=
 =?us-ascii?q?t5foPzKO1uQVqWiU9fFgWfi1i246sgx8pCWkyMQ0ioTRmI4Z1lPJ+T9kzIooJt?=
 =?us-ascii?q?C0UlB3bNCkHZdKqi2XNZN6T8AiTm1ypSo3xaMKtYSmcCQXypkr3QDTZ+KGfoWO?=
 =?us-ascii?q?/xntTvyeIS1ii3JgYL+/hwi98UynyuDkUsm00U1KrjZektXWuXAN0QHT5tKASv?=
 =?us-ascii?q?tn8UetwTeP1wbN5eFYOU04i7bXJp07zrIti5Yesl7PEjH4lUj2lqOaa0cp9vCt?=
 =?us-ascii?q?6+v9Y7XmopGcN5VzigH7Kqkug9KwAeElMgQXQmeU5/q826Pn/UHgW7pKieA2kq?=
 =?us-ascii?q?/Fv5/EPsQXoaq5Aw5W0ok98Rq+ACqm3cwcnXkGKlJFZR2Gg5LoO1HIPPD3E/O/?=
 =?us-ascii?q?j06wnzdswvDLJbvhApLLLnjMlrfhYKxx60lGyAo81dxf/Y5bCqkdIPLvXU/8rN?=
 =?us-ascii?q?jYDh46MwOq2ermB8h925gaWWKOBK+ZLazTvUWJ5uIpP+mDeosVtCzhJPgi4v69?=
 =?us-ascii?q?xUI/gkIXKKm1wYMMOjf/GvV9P17fZ33qjdEcV2AQsU07Re3ujVSEFjlLe3e1Wb?=
 =?us-ascii?q?l7/zw+FceqAJnOQtOQhqec1nK+F5xSemcUE12JDDLkepuJX7IWZTuPL9R9ujoD?=
 =?us-ascii?q?U7enVskmzx75rxLwybdsMr/J/DYFv4noztl/6r7vkkQr+DlpSsiQzWyJZ2dzmG?=
 =?us-ascii?q?wOWnkxxq8sj1Z6zwKm0Kt4iv1cXfVZ7vBUVwAkfcrZzu96AtH2HAvLd9SUTVG4?=
 =?us-ascii?q?atS9GSs4VZQr3oldMA5GB9y+g0WbjGKRCLgPmunTCQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BNAAAyzQdchxHrdtBkHgEGBwaBUQkLA?=
 =?us-ascii?q?YEwgmKDeYh4iy+BaJJ4hHmBcxQYFIMsgQ8DgxQiNAkNAQMBAQEBAQECARMBAQE?=
 =?us-ascii?q?KCwkIGw4vgjYFAgMYCYJcAwMBAiAEHwopAwMBAgYBASQCHwMEAgIDAUMQGQWDH?=
 =?us-ascii?q?IICAQMBpHt8M4orgQuLE4FXP4ERM4pkglcCj3szkCgHAoIgBIQiixSKSoZlLJh?=
 =?us-ascii?q?SgUaCDU0ygQEIVoFOgicXEo4Ob4EHiSaBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0BNAAAyzQdchxHrdtBkHgEGBwaBUQkLAYEwgmKDeYh4iy+?=
 =?us-ascii?q?BaJJ4hHmBcxQYFIMsgQ8DgxQiNAkNAQMBAQEBAQECARMBAQEKCwkIGw4vgjYFA?=
 =?us-ascii?q?gMYCYJcAwMBAiAEHwopAwMBAgYBASQCHwMEAgIDAUMQGQWDHIICAQMBpHt8M4o?=
 =?us-ascii?q?rgQuLE4FXP4ERM4pkglcCj3szkCgHAoIgBIQiixSKSoZlLJhSgUaCDU0ygQEIV?=
 =?us-ascii?q?oFOgicXEo4Ob4EHiSaBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,317,1539673200"; 
   d="scan'208";a="42834623"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 05 Dec 2018 05:09:32 -0800
Received: from localhost ([::1]:34135 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gUWvi-0004Su-W0
	for like.xu@linux.intel.com; Wed, 05 Dec 2018 08:09:31 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:34748)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <mikhail.abakumov@ispras.ru>) id 1gUWhh-0003LR-Iw
	for qemu-devel@nongnu.org; Wed, 05 Dec 2018 07:55:02 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <mikhail.abakumov@ispras.ru>) id 1gUWhe-00074z-EE
	for qemu-devel@nongnu.org; Wed, 05 Dec 2018 07:55:01 -0500
Received: from mail.ispras.ru ([83.149.199.45]:50680)
	by eggs.gnu.org with esmtp (Exim 4.71)
	(envelope-from <mikhail.abakumov@ispras.ru>) id 1gUWhd-0006wn-TN
	for qemu-devel@nongnu.org; Wed, 05 Dec 2018 07:54:58 -0500
Received: from Misha-PC.lan02.inno (unknown [85.142.117.226])
	by mail.ispras.ru (Postfix) with ESMTPSA id 3318A540082;
	Wed,  5 Dec 2018 15:54:47 +0300 (MSK)
From: Mikhail Abakumov <mikhail.abakumov@ispras.ru>
To: qemu-devel@nongnu.org
Date: Wed, 05 Dec 2018 15:54:45 +0300
Message-ID: <154401448556.8440.6408536873388032781.stgit@Misha-PC.lan02.inno>
In-Reply-To: <154401431697.8440.845616703562380651.stgit@Misha-PC.lan02.inno>
References: <154401431697.8440.845616703562380651.stgit@Misha-PC.lan02.inno>
User-Agent: StGit/0.17.1-dirty
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 3.x [fuzzy]
X-Received-From: 83.149.199.45
Subject: [Qemu-devel] [PATCH 2 29/39] windbg: implement
 kd_api_write_breakpoint and kd_api_restore_breakpoint
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: sw@weilnetz.de, lprosek@redhat.com, dovgaluk@ispras.ru,
	rkagan@virtuozzo.com, pbonzini@redhat.com, den@openvz.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Signed-off-by: Mikhail Abakumov <mikhail.abakumov@ispras.ru>
Signed-off-by: Pavel Dovgalyuk <dovgaluk@ispras.ru>
---
 include/exec/windbgstub-utils.h |    3 ++
 windbgstub-utils.c              |   68 +++++++++++++++++++++++++++++++++++++++
 windbgstub.c                    |   12 +++++++
 3 files changed, 83 insertions(+)

diff --git a/include/exec/windbgstub-utils.h b/include/exec/windbgstub-utils.h
index 2781a54044..85b7322b82 100644
--- a/include/exec/windbgstub-utils.h
+++ b/include/exec/windbgstub-utils.h
@@ -71,8 +71,11 @@ void kd_api_read_virtual_memory(CPUState *cs, PacketData *pd);
 void kd_api_write_virtual_memory(CPUState *cs, PacketData *pd);
 void kd_api_get_context(CPUState *cs, PacketData *pd);
 void kd_api_set_context(CPUState *cs, PacketData *pd);
+void kd_api_write_breakpoint(CPUState *cs, PacketData *pd);
+void kd_api_restore_breakpoint(CPUState *cs, PacketData *pd);
 void kd_api_read_control_space(CPUState *cs, PacketData *pd);
 void kd_api_write_control_space(CPUState *cs, PacketData *pd);
+void kd_api_clear_all_internal_breakpoints(CPUState *cs, PacketData *pd);
 void kd_api_get_context_ex(CPUState *cs, PacketData *pd);
 void kd_api_set_context_ex(CPUState *cs, PacketData *pd);
 void kd_api_unsupported(CPUState *cs, PacketData *pd);
diff --git a/windbgstub-utils.c b/windbgstub-utils.c
index 61f74dd22e..ea96c0598c 100644
--- a/windbgstub-utils.c
+++ b/windbgstub-utils.c
@@ -80,6 +80,8 @@ static const char *kd_packet_type_names[] = {
     "PACKET_TYPE_MAX",
 };
 
+static InitedAddr bps[KD_BREAKPOINT_MAX];
+
 static void prep_bmbc(const uint8_t *pattern, int pLen, int bmBc[])
 {
     int i;
@@ -247,6 +249,72 @@ void kd_api_write_virtual_memory(CPUState *cs, PacketData *pd)
     stl_p(&mem->ActualBytesWritten, len);
 }
 
+void kd_api_write_breakpoint(CPUState *cs, PacketData *pd)
+{
+    DBGKD_WRITE_BREAKPOINT64 *m64c = &pd->m64.u.WriteBreakPoint;
+    target_ulong addr;
+    int i, err = 0;
+
+    addr = ldtul_p(&m64c->BreakPointAddress);
+
+    for (i = 0; i < KD_BREAKPOINT_MAX; ++i) {
+        if (!bps[i].is_init) {
+            err = cpu_breakpoint_insert(cs, addr, BP_GDB, NULL);
+            if (!err) {
+                bps[i].addr = addr;
+                bps[i].is_init = true;
+                DPRINTF("write_breakpoint: " FMT_ADDR ", index(%d)\n",
+                        addr, i);
+                break;
+            } else {
+                WINDBG_ERROR("write_breakpoint: " FMT_ADDR ", " FMT_ERR, addr,
+                             err);
+                pd->m64.ReturnStatus = STATUS_UNSUCCESSFUL;
+                return;
+            }
+        } else if (addr == bps[i].addr) {
+            break;
+        }
+    }
+
+    if (!err) {
+        stl_p(&m64c->BreakPointHandle, i + 1);
+        pd->m64.ReturnStatus = STATUS_SUCCESS;
+    } else {
+        WINDBG_ERROR("write_breakpoint: All breakpoints occupied");
+        pd->m64.ReturnStatus = STATUS_UNSUCCESSFUL;
+    }
+}
+
+void kd_api_restore_breakpoint(CPUState *cs, PacketData *pd)
+{
+    DBGKD_RESTORE_BREAKPOINT *m64c = &pd->m64.u.RestoreBreakPoint;
+    uint8_t index;
+    int err = -1;
+
+    index = ldtul_p(&m64c->BreakPointHandle) - 1;
+
+    if (bps[index].is_init) {
+        err = cpu_breakpoint_remove(cs, bps[index].addr, BP_GDB);
+        if (!err) {
+            DPRINTF("restore_breakpoint: " FMT_ADDR ", index(%d)\n",
+                    bps[index].addr, index);
+        } else {
+            WINDBG_ERROR("restore_breakpoint: " FMT_ADDR
+                         ", index(%d), " FMT_ERR,
+                         bps[index].addr, index, err);
+        }
+        bps[index].is_init = false;
+        pd->m64.ReturnStatus = STATUS_SUCCESS;
+    } else {
+        pd->m64.ReturnStatus = STATUS_SUCCESS;
+    }
+}
+
+void kd_api_clear_all_internal_breakpoints(CPUState *cs, PacketData *pd)
+{
+}
+
 void kd_api_unsupported(CPUState *cs, PacketData *pd)
 {
     WINDBG_ERROR("Caught unimplemented api %s", kd_api_name(pd->m64.ApiNumber));
diff --git a/windbgstub.c b/windbgstub.c
index 328a04735f..a1c013cd8c 100644
--- a/windbgstub.c
+++ b/windbgstub.c
@@ -165,6 +165,14 @@ static void windbg_process_manipulate_packet(WindbgState *state)
         kd_api_set_context(cs, data);
         break;
 
+    case DbgKdWriteBreakPointApi:
+        kd_api_write_breakpoint(cs, data);
+        break;
+
+    case DbgKdRestoreBreakPointApi:
+        kd_api_restore_breakpoint(cs, data);
+        break;
+
     case DbgKdReadControlSpaceApi:
         kd_api_read_control_space(cs, data);
         break;
@@ -173,6 +181,10 @@ static void windbg_process_manipulate_packet(WindbgState *state)
         kd_api_write_control_space(cs, data);
         break;
 
+    case DbgKdClearAllInternalBreakpointsApi:
+        kd_api_clear_all_internal_breakpoints(cs, data);
+        return;
+
     case DbgKdGetContextExApi:
         kd_api_get_context_ex(cs, data);
         break;


