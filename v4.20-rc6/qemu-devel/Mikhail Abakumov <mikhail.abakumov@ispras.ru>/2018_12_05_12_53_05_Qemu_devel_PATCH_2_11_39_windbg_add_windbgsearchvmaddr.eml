Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 06 Dec 2018 08:52:44 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 5C5C25804C1
	for <like.xu@linux.intel.com>; Wed,  5 Dec 2018 05:10:34 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga003-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 05 Dec 2018 05:10:34 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3Ar7nBwR8nP60Km/9uRHKM819IXTAuvvDOBiVQ1KB2?=
 =?us-ascii?q?1uocTK2v8tzYMVDF4r011RmVBdWds6oMotGVmpioYXYH75eFvSJKW713fDhBt/?=
 =?us-ascii?q?8rmRc9CtWOE0zxIa2iRSU7GMNfSA0tpCnjYgBaF8nkelLdvGC54yIMFRXjLwp1?=
 =?us-ascii?q?Ifn+FpLPg8it2O2+557ebx9UiDahfLh/MAi4oQLNu8cMnIBsMLwxyhzHontJf+?=
 =?us-ascii?q?RZ22ZlLk+Nkhj/+8m94odt/zxftPw9+cFAV776f7kjQrxDEDsmKWE169b1uhTF?=
 =?us-ascii?q?UACC+2ETUmQSkhpPHgjF8BT3VYr/vyfmquZw3jSRMMvrRr42RDui9b9mRh/2hi?=
 =?us-ascii?q?kJNDA28m/XhcJ/g61HrxyvugR/zozWboyaKfZzcL/Rcs0BRWdaQsZcVTZMDp+g?=
 =?us-ascii?q?Y4YVDecMO/tToYnnp1sJqBuzHQ6iBOLsyj9InHD23Kk62Pk9HA7dxgMgHM8OsH?=
 =?us-ascii?q?HTrNXrKawfVuW1zKjLzTXDdfxW2DP95JLSfR86u/6MXq9wcc/WyUkxDA7Fj06Q?=
 =?us-ascii?q?qZT/PzyPzeQBqXKb7/d5WO+plmUpqBlxryCxysswiYTFnJ8Zxk3H+Clj3oo4K9?=
 =?us-ascii?q?21RFRmbdOmCJddtCGXO5FrTs4tXW1kojs2xqAEtJKhYiQG1pUqyhjCYPKdaYeI?=
 =?us-ascii?q?+AjsVOOJLDd4mn1lfLW/ig628Uih0e38StK03ExFripDj9nArHcN1wbc6sSfS/?=
 =?us-ascii?q?t9+Fmu2SqX2gzN9u1JIlo4mbfGJ5Mi2LI8iJQevETZEiPrmkj6lKqWeV8l+uis?=
 =?us-ascii?q?5eTneLLmppqEOo9tlA7+N7kultWiDusmLAgBQWyb9f2n273k4E35RqlFgeMtkq?=
 =?us-ascii?q?XetJDaJMcbqbCjDw5az4Yu8xK/Dzag0NQFkngLNlNFeBSbj4f3P1HCOuz3DfC6?=
 =?us-ascii?q?g1m3ljdrwPbGPrLnApXQNHTDl63hfbll505G1AUz1cxf545TCrwZJPLzW0zxu8?=
 =?us-ascii?q?LCAh42Lgy52OLnCNR71oMDVmODGK6ZMKXOsVCW4uIjOfWDZIgQuGW1Fv4++vS7?=
 =?us-ascii?q?jWMlgURPOu6t3IALcza+GfJpJVjfZmDjxdIIEGMPtwx5S/T2iVqESnlKanOvGq?=
 =?us-ascii?q?4x+Dw/W7+gFprJE4Wkgbid23WiE5hLI2xLFF2IVG3lbpiJQOskbiWULcl81Dse?=
 =?us-ascii?q?Wu+6VoUj2Bqy4RL80KdtNeHO+ycV5q7kgcF44vCWmRws+DhcCcOb3GeQCWZukT?=
 =?us-ascii?q?AmXTgziYV+okx0y1PL+KJxgOFdEsIbs/ZIUQczNJqaxuZzCM33XRzpf8yRUl+9?=
 =?us-ascii?q?BM+7V2JiBuktysMDNh4uU+6piQrOinKn?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AxAAC1zQdchxHrdtBkHgEGBwaBUQkLA?=
 =?us-ascii?q?YEwgmKDeYh4iy+BaJJ4hHmBcxQYFIQ7A4MUIjQJDQEDAQEBAQEBAgETAQEBCgs?=
 =?us-ascii?q?JCBsOL4I2BQIDGAmCXAMDAQIgIwopAwMBAgYBASQCIgQCAgMBQxAZBYMcggIBA?=
 =?us-ascii?q?wGkcoEviiuBC4sTgVc/gUSKZIJXAo97M5AoBwKCIASEIosUikqGZSyYUoFGgg1?=
 =?us-ascii?q?NMoEBCFaBToInF44gb4EHiSaBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0AxAAC1zQdchxHrdtBkHgEGBwaBUQkLAYEwgmKDeYh4iy+?=
 =?us-ascii?q?BaJJ4hHmBcxQYFIQ7A4MUIjQJDQEDAQEBAQEBAgETAQEBCgsJCBsOL4I2BQIDG?=
 =?us-ascii?q?AmCXAMDAQIgIwopAwMBAgYBASQCIgQCAgMBQxAZBYMcggIBAwGkcoEviiuBC4s?=
 =?us-ascii?q?TgVc/gUSKZIJXAo97M5AoBwKCIASEIosUikqGZSyYUoFGgg1NMoEBCFaBToInF?=
 =?us-ascii?q?44gb4EHiSaBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,317,1539673200"; 
   d="scan'208";a="55008408"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 05 Dec 2018 05:10:33 -0800
Received: from localhost ([::1]:34139 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gUWwi-0005BJ-Vg
	for like.xu@linux.intel.com; Wed, 05 Dec 2018 08:10:33 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:33667)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <mikhail.abakumov@ispras.ru>) id 1gUWft-0001KW-EC
	for qemu-devel@nongnu.org; Wed, 05 Dec 2018 07:53:10 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <mikhail.abakumov@ispras.ru>) id 1gUWfs-0005lC-F7
	for qemu-devel@nongnu.org; Wed, 05 Dec 2018 07:53:09 -0500
Received: from mail.ispras.ru ([83.149.199.45]:50190)
	by eggs.gnu.org with esmtp (Exim 4.71)
	(envelope-from <mikhail.abakumov@ispras.ru>) id 1gUWfs-0005ja-08
	for qemu-devel@nongnu.org; Wed, 05 Dec 2018 07:53:08 -0500
Received: from Misha-PC.lan02.inno (unknown [85.142.117.226])
	by mail.ispras.ru (Postfix) with ESMTPSA id C7E36540082;
	Wed,  5 Dec 2018 15:53:06 +0300 (MSK)
From: Mikhail Abakumov <mikhail.abakumov@ispras.ru>
To: qemu-devel@nongnu.org
Date: Wed, 05 Dec 2018 15:53:05 +0300
Message-ID: <154401438514.8440.4565963360304425572.stgit@Misha-PC.lan02.inno>
In-Reply-To: <154401431697.8440.845616703562380651.stgit@Misha-PC.lan02.inno>
References: <154401431697.8440.845616703562380651.stgit@Misha-PC.lan02.inno>
User-Agent: StGit/0.17.1-dirty
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 3.x [fuzzy]
X-Received-From: 83.149.199.45
Subject: [Qemu-devel] [PATCH 2 11/39] windbg: add windbg_search_vmaddr
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: sw@weilnetz.de, lprosek@redhat.com, dovgaluk@ispras.ru,
	rkagan@virtuozzo.com, pbonzini@redhat.com, den@openvz.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Add function to search in virtual memory.
Implemented Boyer-Moore search algorithm.

Signed-off-by: Mikhail Abakumov <mikhail.abakumov@ispras.ru>
Signed-off-by: Pavel Dovgalyuk <dovgaluk@ispras.ru>
---
 include/exec/windbgstub-utils.h |    4 +
 windbgstub-utils.c              |  120 +++++++++++++++++++++++++++++++++++++++
 2 files changed, 124 insertions(+)

diff --git a/include/exec/windbgstub-utils.h b/include/exec/windbgstub-utils.h
index e076227b39..2760684cfb 100644
--- a/include/exec/windbgstub-utils.h
+++ b/include/exec/windbgstub-utils.h
@@ -59,4 +59,8 @@ const char *kd_pkt_type_name(int id);
 bool windbg_on_load(void);
 void windbg_on_reset(void);
 
+InitedAddr windbg_search_vmaddr(CPUState *cs, target_ulong start,
+                                target_ulong finish, const uint8_t *pattern,
+                                int pLen);
+
 #endif /* WINDBGSTUB_UTILS_H */
diff --git a/windbgstub-utils.c b/windbgstub-utils.c
index 968e5cb2dd..6d2bb33307 100644
--- a/windbgstub-utils.c
+++ b/windbgstub-utils.c
@@ -80,6 +80,126 @@ static const char *kd_packet_type_names[] = {
     "PACKET_TYPE_MAX",
 };
 
+static void prep_bmbc(const uint8_t *pattern, int pLen, int bmBc[])
+{
+    int i;
+
+    for (i = 0; i < 256; ++i) {
+        bmBc[i] = pLen;
+    }
+    for (i = 0; i < pLen - 1; ++i) {
+        bmBc[pattern[i]] = pLen - i - 1;
+    }
+}
+
+static void prep_suffixes(const uint8_t *pattern, int pLen, int *suff)
+{
+    int f, g, i;
+
+    suff[pLen - 1] = pLen;
+    f = 0;
+    g = pLen - 1;
+    for (i = pLen - 2; i >= 0; --i) {
+        if (i > g && suff[i + pLen - 1 - f] < i - g) {
+            suff[i] = suff[i + pLen - 1 - f];
+        } else {
+            if (i < g) {
+                g = i;
+            }
+            f = i;
+            while (g >= 0 && pattern[g] == pattern[g + pLen - 1 - f]) {
+                --g;
+            }
+            suff[i] = f - g;
+        }
+    }
+}
+
+static void prep_bmgs(const uint8_t *pattern, int pLen, int bmGs[])
+{
+    int i, j, suff[pLen];
+
+    prep_suffixes(pattern, pLen, suff);
+
+    for (i = 0; i < pLen; ++i) {
+        bmGs[i] = pLen;
+    }
+
+    j = 0;
+    for (i = pLen - 1; i >= 0; --i) {
+        if (suff[i] == i + 1) {
+            for (; j < pLen - 1 - i; ++j) {
+                if (bmGs[j] == pLen) {
+                    bmGs[j] = pLen - 1 - i;
+                }
+            }
+        }
+    }
+
+    for (i = 0; i <= pLen - 2; ++i) {
+        bmGs[pLen - 1 - suff[i]] = pLen - 1 - i;
+    }
+}
+
+static int search_boyermoore(const uint8_t *data, int dLen,
+                             const uint8_t *pattern, int pLen, int bmGs[],
+                             int bmBc[])
+{
+    int i;
+    int j = 0;
+    while (j <= dLen - pLen) {
+        i = pLen - 1;
+        while (i >= 0 && pattern[i] == data[i + j]) {
+            --i;
+        }
+        if (i < 0) {
+            return j;
+        } else {
+            j += MAX(bmGs[i], bmBc[data[i + j]] - pLen + 1 + i);
+        }
+    }
+    return -1;
+}
+
+InitedAddr windbg_search_vmaddr(CPUState *cs, target_ulong start,
+                                target_ulong finish, const uint8_t *pattern,
+                                int pLen)
+{
+    InitedAddr ret = {
+        addr = 0;
+        is_init = false;
+    };
+    int bmGs[pLen], bmBc[256];
+    int find;
+    target_ulong offset = start;
+    target_ulong step = MIN(MAX(finish - start, 0x10000), pLen * 2);
+
+    if (finish <= start || pLen > finish - start) {
+        return ret;
+    }
+
+    uint8_t *buf = g_new(uint8_t, step);
+
+    prep_bmgs(pattern, pLen, bmGs);
+    prep_bmbc(pattern, pLen, bmBc);
+
+    while (offset < finish) {
+        step = MIN(step, finish - offset);
+        if (cpu_memory_rw_debug(cs, offset, buf, step, 0) == 0) {
+            find = search_boyermoore(buf, step, pattern, pLen, bmGs, bmBc);
+            if (find >= 0) {
+                ret.addr = offset + find;
+                ret.is_init = true;
+                break;
+            }
+        }
+        offset += step - pLen;
+    }
+
+    g_free(buf);
+    return ret;
+}
+
 const char *kd_api_name(int id)
 {
     return (id >= DbgKdMinimumManipulate && id < DbgKdMaximumManipulate)


