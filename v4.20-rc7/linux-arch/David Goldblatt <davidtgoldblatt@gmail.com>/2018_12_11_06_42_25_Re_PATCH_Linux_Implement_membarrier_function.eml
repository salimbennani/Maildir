Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 11 Dec 2018 19:47:10 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 22A845807A2;
	Mon, 10 Dec 2018 22:43:03 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga003-1.jf.intel.com with ESMTP; 10 Dec 2018 22:43:02 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AZiOfFBwl5ilTNuPXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e8TKPad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWVOXshTWCJBDI2y?=
 =?us-ascii?q?bJYBAfQdMuZDt4nwpUADrQeiCQS2GO/j1iNEi33w0KYn0+ohCwbG3Ak4EtwAqn?=
 =?us-ascii?q?vUstT1O7oPWu60y6nIySjMYOhS2Tjn9IjIbg0qrPaRUr1qb8rRyFQgFx/KjlWX?=
 =?us-ascii?q?rYzqIiia1uAXvGiH8+ptTu2vi2s9pAFwpjij3Nsjio7Mho8MzF3P6Ct3wIEwJd?=
 =?us-ascii?q?KiSU57Z8apEIBXtyGHLYt5Xt0tQm9ytyYg1LIKo5m7fDIFyJg/wB7fc+KIc46R?=
 =?us-ascii?q?7hL4SOaePC10hHV/eLKwgRu57EuuyvXkW8WqzFpHqjBJnsTCu3wTzRDf98uKRu?=
 =?us-ascii?q?dn8kqg2zuDzx7f5v1ALEwulqfWK4QtzqAumpYOq0jOHy37lUPrh6GMbEok4PKn?=
 =?us-ascii?q?6+H/b7XmuJCcM4h0hxngMqQhhMO/G/40MgsQUGiB/+Szyrnj8Vf+QLVQgf06iq?=
 =?us-ascii?q?jZsJbEKsQHvqO1HRNZ34I55xqiATqqzs4UkWQEIV5ZYh6KjorkN0nLIP/iDPe/?=
 =?us-ascii?q?h1qskC1sx/DDJrDhBpTNLn7ekLbuZLp96FBTyBA1zd9B45JYE7YBIfz1WkDvrt?=
 =?us-ascii?q?zVFQE5MwOqzOb9Etl91Z0RWXiJAqCHNKPeq1iI5vggI+WUfo8apC79K+Q55/7p?=
 =?us-ascii?q?lXI5nV4dfaq30pcNZ3G4A+9rI0GYYXrqn9cAHn0Gvgs4TOz2llKCVSRfaGq1X6?=
 =?us-ascii?q?I5/js7Ep6pDZ/fRoCxh7yMxCe7EYdXZmBaEF+MFm3kd4WZW/gWbiKSLdRskjgF?=
 =?us-ascii?q?VbinVo8g2guitA78y7p7MOXU/jcUuo7k1Nhw/+fTjw099SRoD8SB1GGAV2N0nm?=
 =?us-ascii?q?QWSDMs36B/pkp9ylGE0aVjh/xYFNpT5+5GUwsgNJ7cyfB6BM72Wg7bYtiJT1Om?=
 =?us-ascii?q?SM28AT4tVtIx38MOY0FlFtq4lRDD3y2qA7wPm7yRHpM08LnR33zwJ8Z71nbH27?=
 =?us-ascii?q?Mtj1ggQstTK2KmgrRz+BTUB47Mi0+ZjbqldbwA3C7R82eO1WmOs1teUAJqVaXF?=
 =?us-ascii?q?XGoQZk3Zrdni4kPCTrmuCakoMwdbyM6CLLdKZcPtjVlcWPjjP9HeaXqrm2isHR?=
 =?us-ascii?q?aI2q+MbI3ydmoAxirdFlYLnxoT/XmcMwg+HTmuo2TZADxqFlLvZkfs/PJ6qHO6?=
 =?us-ascii?q?SE800g6LY1dg17qz5h4am/icR+kP0bIDvScrsy90E0ql39LKF9qAoBJsc7hGbt?=
 =?us-ascii?q?Mj/lhLz2LZuBZ7Ppy7Ma9igEUTcwB2v0PoyhV2BZ9MkcksrHM20gVyLbiU309G?=
 =?us-ascii?q?dzOdxZrwIKHYKnHu/BCzbK7bwk3e0NeT+qcI9PQ4q1XisBu1FkY49HVnyd1V03?=
 =?us-ascii?q?qa5pXFFwcSVZPxUkAq9xl1vb3aYy8955/K2n1oK6W7rjjC29cxDus/1hmgZ8tf?=
 =?us-ascii?q?ML+DFALqCcIaA9ahKeM0lFmpdB4LJ/1S+7MuMMOgdPuG37CrMf1knDKni2RH/Y?=
 =?us-ascii?q?983liN9yp6Vu7HwZIFz+uE0QuAUjf2lE2hvdzvmYBYeTESGXKyyCj5BIJLeqJ+?=
 =?us-ascii?q?Z4cKCWe0LM2xydVznJrtW39e9F6+CFIKws6peRyOb1Pj2Q1cz1gYoXuimSGg1T?=
 =?us-ascii?q?x7jykprraD3CzJ2+nibhsHNXJRS2l4kFjsJpK4j9YEU0iybggljQeq6lz+x6dG?=
 =?us-ascii?q?uqt/NW7TQUFTcijyLmFiVLawt7WYb85O7pMorTtYUOCmbV+GTb79pgMQ0zn/EG?=
 =?us-ascii?q?tG2DA7azaqt435nhx7km6cLGx/rGHEecF23hrf4N3cRfhM3jsJXiV4iD/XBkSi?=
 =?us-ascii?q?MNmt59mbi5DDsuWmXWK7SpJTaTXrzZ+HtCaj521lGwe/n/Owmt3gCwQ6yjX019?=
 =?us-ascii?q?ppVSXJqhbzfI/r2r++MeJmeEloGVD959B7GoF4jos/mpUQ1WIGiZWS+HoNiX3z?=
 =?us-ascii?q?PslD2aLicHoNQiYGwt7P7wjiwkFjLHOJx4TiW3WZw8thYcS6Y2wM1iI86cBKFL?=
 =?us-ascii?q?mb7LhekSRppVq4qBrbYeJhkTcF1fsu9HkajvkKuAU3zyWRGLASHVRCMizqmBSF?=
 =?us-ascii?q?9NS+rKRRZGayfrm8zkt+nda9DL6cpgFQQmr2epAnHSVo9MVwLErM0GHv6oHjYN?=
 =?us-ascii?q?TQaNMTth6OnBvagelaNokxluYUiip9Im3yo2cly+EggBxq3JG6upWHKmp38KK4?=
 =?us-ascii?q?BB5YKiP6Z8cJ9j7xiqZem96c35qzEZV5BjULQJzoQOq0EDIVsPTrLQePHyc6qn?=
 =?us-ascii?q?eGArrfBg6f5Vxir3LOFZCrKn6WKGMYzdVkWBmSOkhfjBoIUzU9m54zDhqqy9D5?=
 =?us-ascii?q?cEdl+jAR4Ub1pQBWxeJvMxn/T33TpAO1ajovTJifLRxW7hxN5kvPMMye6P5zED?=
 =?us-ascii?q?9c/pG7sAONLWmbbRxSDW4VQkyEG0zjPr626NnC6eeYA/SxL+DUbbWSs+BeVOqI?=
 =?us-ascii?q?xZGy0otg5TmMLd6CPn1jD/09x0pCUmp1G8XfmzUTVSMXkzjBYNKcpBe54id3tN?=
 =?us-ascii?q?yw8Oz3WALz4ouCE7tTMdJy+xCvnKeMLeiQiDxiKTZf0JMMymTFyLwe3F4UliFv?=
 =?us-ascii?q?eCOhEbUGtS7RUq3QnrVbAAIcayN2LMFI9b4z3hFROc7HjdP4zr54geA0C1dGVl?=
 =?us-ascii?q?zhm9ulZc8QI2G6O1PIGlyLNKmdJTDQx8H3YKW8SaBfjelOth2wvyqbHFHnPjiZ?=
 =?us-ascii?q?izbpUBWvO/lWjC6HJBxepJ29chF1BGf5UdLpcQe7P8F3jDEsxb00h2jHNWodMT?=
 =?us-ascii?q?h6bkNMoaec7SJegvVjBWNB6mBpIvWDmyac9+PYMIoZseN3AiRokOJX+Gg6y7pQ?=
 =?us-ascii?q?7C1eWPN5gjfdrt5wrFGgieSPzjtnUBxTqjdEno6LvENiObnH+ZlEQ3rL4BUN7W?=
 =?us-ascii?q?CIARQQu9RlEsHvu7xXytXXlKP8MjFC89fV/csaH8fVKcKHP2AnMRrmAzPUCAoF?=
 =?us-ascii?q?TTi2NWDQnUBdkfeS9mGLoZg+sJTjhJ0OSroIHGAyQ8sTF0AtOdchLZFxUyJsxa?=
 =?us-ascii?q?aSkcoN7nmWqBjXWdUcv5rCEPmVBKO8BiyeiOxobgUJzfvXKoAfPInyx1AqPlVz?=
 =?us-ascii?q?goXGB0XXWdxHpiR9cic7pUxM9D51SWhliBGtUR+k/HJGTa38pRUxkAYrJL11rD?=
 =?us-ascii?q?o=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0CIAABMWw9ch0O0hNFkHQEBBQEHBQGBV?=
 =?us-ascii?q?AUBCwGCaYECJ4N7g3uQLoINFGiJFo1UgWIpCwgBh3IiNwYNAQMBAQEBAQECARM?=
 =?us-ascii?q?BAQEIDQkIKSMMgjYkAYJiAQIBAgECIB0BGxYHAQMCCQEBBQULCQQCAiYCAgMfA?=
 =?us-ascii?q?REBBQEcBhMFgxwBgWgBAxUFCpoEPIsNgRIFAReCdwWBMQEDAgwCPwGCOgoZJw1?=
 =?us-ascii?q?dgTcCBhJ5iy8XgX+BEYJdNYMeA4EtAQsHAYMjglcCiTouhVZ9kDwJgiaEY4M7h?=
 =?us-ascii?q?wwYgVyFF4pMjhaLDjCBO4EHcU0jgQGCOwmCEoM0OYUUhWAeMwGBBAEBiBcPF4I?=
 =?us-ascii?q?nAQE?=
X-IPAS-Result: =?us-ascii?q?A0CIAABMWw9ch0O0hNFkHQEBBQEHBQGBVAUBCwGCaYECJ4N?=
 =?us-ascii?q?7g3uQLoINFGiJFo1UgWIpCwgBh3IiNwYNAQMBAQEBAQECARMBAQEIDQkIKSMMg?=
 =?us-ascii?q?jYkAYJiAQIBAgECIB0BGxYHAQMCCQEBBQULCQQCAiYCAgMfAREBBQEcBhMFgxw?=
 =?us-ascii?q?BgWgBAxUFCpoEPIsNgRIFAReCdwWBMQEDAgwCPwGCOgoZJw1dgTcCBhJ5iy8Xg?=
 =?us-ascii?q?X+BEYJdNYMeA4EtAQsHAYMjglcCiTouhVZ9kDwJgiaEY4M7hwwYgVyFF4pMjha?=
 =?us-ascii?q?LDjCBO4EHcU0jgQGCOwmCEoM0OYUUhWAeMwGBBAEBiBcPF4InAQE?=
X-IronPort-AV: E=Sophos;i="5.56,341,1539673200"; 
   d="scan'208";a="43542596"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 10 Dec 2018 22:42:45 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726912AbeLKGmk (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 11 Dec 2018 01:42:40 -0500
Received: from mail-wr1-f67.google.com ([209.85.221.67]:42028 "EHLO
        mail-wr1-f67.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725923AbeLKGmk (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 11 Dec 2018 01:42:40 -0500
Received: by mail-wr1-f67.google.com with SMTP id q18so12823181wrx.9;
        Mon, 10 Dec 2018 22:42:38 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=KXmtxN7ePXcIMgJ+dYxNG4yOdWzQoUxvuy6ni7g+6uU=;
        b=SlS6e9tD5Qd3yzli5y9gY1NB3cek8arQ3IAvjSLrWaGOvrULz9wVLM6b55gyJqyDgO
         YYYWjwJcgI71HBlA7HXYYWQRUwUpfHra+vNhaFjm6RU9moCFeCozIb12jkjByxaAkET5
         8SL6iRlEw3ibm7xA5F+hYIU9sIBebpcvnT8wsUKpVqIh/+KHNzyCSqODVOTa2HQWRK/x
         COIdf5wkz8Bcc5Q9hacaC59ugto7vtNxiCb6GNJSP3RmJ/rJgVlvEwAUBg5DmfzPJY3b
         PtlaEVBehxzY156Ud4tYl+mzqdVep7c6P3oPTcUxB6zabj9ZuhOnSIlGcgKXn2aODZ+G
         tCqQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=KXmtxN7ePXcIMgJ+dYxNG4yOdWzQoUxvuy6ni7g+6uU=;
        b=kKwihR9x9zm2TU9f94Zvnf/kYgOthAUx0+WHylW8i6GPfRaU981wtqFU+NR1isj8pn
         0qVraRFcGwPUIELcfBYzxfLDQOctkAH3lD8PDe3O1/uo65IeldR9WDoZkNRovKWD/tQx
         H/OgzvRNdPSb2xwlS0unSaSvY8CUJd79O96fbPAnzLXhSza4WHMqEbrZQFXR0HaD/8dk
         ZE/TZtZml+Bz7CrKcz/v3WfNWtMmFi7O2LrxV8v1ML2PWeIKVI24kHeYJG/e0jPBLDuV
         TFsSXLK5CLm7KB+3fHiTetIF7p2OnBDn8T6qMHgPUP14MPm5aloqX1SqkGEGOlPG8yKW
         8fyA==
X-Gm-Message-State: AA+aEWZyA7frELEE6vg/qdhIqw2N8qNUwI1/hDk6xUGF1+FjlFYzu/GK
        0YEkHKzNtLomNPFDOxkVf1l8kusWHq71XlBajXQ=
X-Google-Smtp-Source: AFSGD/WxgQULKArE5Wc55H2XDjRiuGZbEJN+WjT7ZRGi+lbVpIu6l6HjsxHEMXBhuhsedPsuC+mHvvEVMg3yAM3ymbM=
X-Received: by 2002:adf:e08c:: with SMTP id c12mr11536584wri.199.1544510557499;
 Mon, 10 Dec 2018 22:42:37 -0800 (PST)
MIME-Version: 1.0
References: <8736rldyzm.fsf@oldenburg.str.redhat.com> <1543444466.5493.220.camel@redhat.com>
 <87y39c2dsg.fsf@oldenburg.str.redhat.com> <1689938209.14804.1543502662882.JavaMail.zimbra@efficios.com>
 <20181129150433.GH4170@linux.ibm.com> <CAHD6eXcvx1bskbp-X+vuMYoMQiCLOt0PiCZ5FT1yFsda9Ud-yA@mail.gmail.com>
 <20181206215405.GL4170@linux.ibm.com>
In-Reply-To: <20181206215405.GL4170@linux.ibm.com>
From: David Goldblatt <davidtgoldblatt@gmail.com>
Date: Mon, 10 Dec 2018 22:42:25 -0800
Message-ID: <CAHD6eXeoAXBhGJpx6wY6g9UV4G+zmqTbjbUHnqXnVh2xiNLvug@mail.gmail.com>
Subject: Re: [PATCH] Linux: Implement membarrier function
To: Paul McKenney <paulmck@linux.ibm.com>
Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>,
        Florian Weimer <fweimer@redhat.com>, triegel@redhat.com,
        libc-alpha@sourceware.org, stern@rowland.harvard.edu,
        andrea.parri@amarulasolutions.com,
        Will Deacon <will.deacon@arm.com>, peterz@infradead.org,
        boqun.feng@gmail.com, npiggin@gmail.com, dhowells@redhat.com,
        j.alglave@ucl.ac.uk, luc.maranget@inria.fr, akiyks@gmail.com,
        dlustig@nvidia.com, linux-arch@vger.kernel.org,
        LKML <linux-kernel@vger.kernel.org>
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi Paul, thank you for thinking about all this.

I think the modelling you suggest captures most of the algorithms I
would want to write. I think it's slightly too weak, though, to
implement the model suggested in P1202R0[1], which permits the SC
outcome to be recovered in C-Goldblat-memb-2[2] by inserting a second
smp_memb() after the first, which is a rather nice property (and I
believe is supported by the underlying implementation options). I
afraid though that I'm not familiar enough with the Linux herd
definitions to suggest a tweak (or know how easy a tweak might be).

- David

[1] Which I think may be strengthened a little bit more even in R1.
[2] As a nit, my name has two "t"'s in it, although I'd throw into the
ring "memb-pairwise", "memb-nontransitive", and "memb-sequenced" if
these get non-placeholder names.

On Thu, Dec 6, 2018 at 1:54 PM Paul E. McKenney <paulmck@linux.ibm.com> wrote:
>
> Hello, David,
>
> I took a crack at extending LKMM to accommodate what I think would
> support what you have in your paper.  Please see the very end of this
> email for a patch against the "dev" branch of my -rcu tree.
>
> This gives the expected result for the following three litmus tests,
> but is probably deficient or otherwise misguided in other ways.  I have
> added the LKMM maintainers on CC for their amusement.  ;-)
>
> Thoughts?
>
>                                                 Thanx, Paul
>
> ------------------------------------------------------------------------
>
> C C-Goldblat-memb-1
> {
> }
>
> P0(int *x0, int *x1)
> {
>         WRITE_ONCE(*x0, 1);
>         r1 = READ_ONCE(*x1);
> }
>
>
> P1(int *x0, int *x1)
> {
>         WRITE_ONCE(*x1, 1);
>         smp_memb();
>         r2 = READ_ONCE(*x0);
> }
>
> exists (0:r1=0 /\ 1:r2=0)
>
> ------------------------------------------------------------------------
>
> C C-Goldblat-memb-2
> {
> }
>
> P0(int *x0, int *x1)
> {
>         WRITE_ONCE(*x0, 1);
>         r1 = READ_ONCE(*x1);
> }
>
>
> P1(int *x1, int *x2)
> {
>         WRITE_ONCE(*x1, 1);
>         smp_memb();
>         r1 = READ_ONCE(*x2);
> }
>
> P2(int *x2, int *x0)
> {
>         WRITE_ONCE(*x2, 1);
>         r1 = READ_ONCE(*x0);
> }
>
> exists (0:r1=0 /\ 1:r1=0 /\ 2:r1=0)
>
> ------------------------------------------------------------------------
>
> C C-Goldblat-memb-3
> {
> }
>
> P0(int *x0, int *x1)
> {
>         WRITE_ONCE(*x0, 1);
>         r1 = READ_ONCE(*x1);
> }
>
>
> P1(int *x1, int *x2)
> {
>         WRITE_ONCE(*x1, 1);
>         smp_memb();
>         r1 = READ_ONCE(*x2);
> }
>
> P2(int *x2, int *x3)
> {
>         WRITE_ONCE(*x2, 1);
>         r1 = READ_ONCE(*x3);
> }
>
> P3(int *x3, int *x0)
> {
>         WRITE_ONCE(*x3, 1);
>         smp_memb();
>         r1 = READ_ONCE(*x0);
> }
>
> exists (0:r1=0 /\ 1:r1=0 /\ 2:r1=0 /\ 3:r1=0)
>
> ------------------------------------------------------------------------
>
> On Thu, Nov 29, 2018 at 11:02:17AM -0800, David Goldblatt wrote:
> > One note with the suggested patch is that
> > `atomic_thread_fence(memory_order_acq_rel)` should probably be
> > `atomic_thread_fence (memory_order_seq_cst)` (otherwise the call would
> > be a no-op on, say, x86, which it very much isn't).
> >
> > The non-transitivity thing makes the resulting description arguably
> > incorrect, but this is informal enough that it might not be a big deal
> > to add something after "For these threads, the membarrier function
> > call turns an existing compiler barrier (see above) executed by these
> > threads into full memory barriers" that clarifies it. E.g. you could
> > make it into "turns an existing compiler barrier [...] into full
> > memory barriers, with respect to the calling thread".
> >
> > Since this is targeting the description of the OS call (and doesn't
> > have to concern itself with also being implementable by other
> > asymmetric techniques or degrading to architectural barriers), I think
> > that the description in "approach 2" in P1202 would also make sense
> > for a formal description of the syscall. (Of course, without the
> > kernel itself committing to a rigorous semantics, anything specified
> > on top of it will be on slightly shaky ground).
> >
> > - David
> >
> > On Thu, Nov 29, 2018 at 7:04 AM Paul E. McKenney <paulmck@linux.ibm.com> wrote:
> > >
> > > On Thu, Nov 29, 2018 at 09:44:22AM -0500, Mathieu Desnoyers wrote:
> > > > ----- On Nov 29, 2018, at 8:50 AM, Florian Weimer fweimer@redhat.com wrote:
> > > >
> > > > > * Torvald Riegel:
> > > > >
> > > > >> On Wed, 2018-11-28 at 16:05 +0100, Florian Weimer wrote:
> > > > >>> This is essentially a repost of last year's patch, rebased to the glibc
> > > > >>> 2.29 symbol version and reflecting the introduction of
> > > > >>> MEMBARRIER_CMD_GLOBAL.
> > > > >>>
> > > > >>> I'm not including any changes to manual/ here because the set of
> > > > >>> supported operations is evolving rapidly, we could not get consensus for
> > > > >>> the language I proposed the last time, and I do not want to contribute
> > > > >>> to the manual for the time being.
> > > > >>
> > > > >> Fair enough.  Nonetheless, can you summarize how far you're along with
> > > > >> properly defining the semantics (eg, based on the C/C++ memory model)?
> > > > >
> > > > > I wrote down what you could, but no one liked it.
> > > > >
> > > > > <https://sourceware.org/ml/libc-alpha/2017-12/msg00796.html>
> > > > >
> > > > > I expect that a formalization would interact in non-trivial ways with
> > > > > any potential formalization of usable relaxed memory order semantics,
> > > > > and I'm not sure if anyone knows how to do the latter today.
> > > >
> > > > Adding Paul E. McKenney in CC.
> > >
> > > There is some prototype C++ memory model wording from David Goldblatt (CCed)
> > > here (search for "Standarese"):
> > >
> > > http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1202r0.pdf
> > >
> > > David's key insight is that (in Linuxese) light fences cannot pair with
> > > each other.
>
> ------------------------------------------------------------------------
>
> commit 17e3b6b60e57d1cb791f68a1a6a36e942cb2baad
> Author: Paul E. McKenney <paulmck@linux.ibm.com>
> Date:   Thu Dec 6 13:40:40 2018 -0800
>
>     EXP tools/memory-model: Add semantics for sys_membarrier()
>
>     This prototype commit extends LKMM to accommodate sys_membarrier(),
>     which is a asymmetric barrier with a limited ability to insert full
>     ordering into tasks that provide only compiler ordering.  This commit
>     currently uses the "po" relation for this purpose, but something more
>     sophisticated will be required when plain accesses are added, which
>     the compiler can reorder.
>
>     For more detail, please see David Goldblatt's C++ working paper:
>     http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1202r0.pdf
>
>     Signed-off-by: Paul E. McKenney <paulmck@linux.ibm.com>
>
> diff --git a/tools/memory-model/linux-kernel.bell b/tools/memory-model/linux-kernel.bell
> index 9c42cd9ddcb4..4ef41453f569 100644
> --- a/tools/memory-model/linux-kernel.bell
> +++ b/tools/memory-model/linux-kernel.bell
> @@ -24,6 +24,7 @@ instructions RMW[{'once,'acquire,'release}]
>  enum Barriers = 'wmb (*smp_wmb*) ||
>                 'rmb (*smp_rmb*) ||
>                 'mb (*smp_mb*) ||
> +               'memb (*sys_membarrier*) ||
>                 'rcu-lock (*rcu_read_lock*)  ||
>                 'rcu-unlock (*rcu_read_unlock*) ||
>                 'sync-rcu (*synchronize_rcu*) ||
> diff --git a/tools/memory-model/linux-kernel.cat b/tools/memory-model/linux-kernel.cat
> index 8dcb37835b61..837c3ee20bea 100644
> --- a/tools/memory-model/linux-kernel.cat
> +++ b/tools/memory-model/linux-kernel.cat
> @@ -33,9 +33,10 @@ let mb = ([M] ; fencerel(Mb) ; [M]) |
>         ([M] ; po? ; [LKW] ; fencerel(After-spinlock) ; [M]) |
>         ([M] ; po ; [UL] ; (co | po) ; [LKW] ;
>                 fencerel(After-unlock-lock) ; [M])
> +let memb = [M] ; fencerel(Memb) ; [M]
>  let gp = po ; [Sync-rcu | Sync-srcu] ; po?
>
> -let strong-fence = mb | gp
> +let strong-fence = mb | gp | memb
>
>  (* Release Acquire *)
>  let acq-po = [Acquire] ; po ; [M]
> @@ -86,6 +87,13 @@ acyclic hb as happens-before
>  let pb = prop ; strong-fence ; hb*
>  acyclic pb as propagation
>
> +(********************)
> +(* sys_membarrier() *)
> +(********************)
> +
> +let memb-step = ( prop ; po ; prop )? ; memb
> +acyclic memb-step as memb-before
> +
>  (*******)
>  (* RCU *)
>  (*******)
> diff --git a/tools/memory-model/linux-kernel.def b/tools/memory-model/linux-kernel.def
> index 1d6a120cde14..9ff0691c5f2c 100644
> --- a/tools/memory-model/linux-kernel.def
> +++ b/tools/memory-model/linux-kernel.def
> @@ -17,6 +17,7 @@ rcu_dereference(X) __load{once}(X)
>  smp_store_mb(X,V) { __store{once}(X,V); __fence{mb}; }
>
>  // Fences
> +smp_memb() { __fence{memb}; }
>  smp_mb() { __fence{mb}; }
>  smp_rmb() { __fence{rmb}; }
>  smp_wmb() { __fence{wmb}; }
>
