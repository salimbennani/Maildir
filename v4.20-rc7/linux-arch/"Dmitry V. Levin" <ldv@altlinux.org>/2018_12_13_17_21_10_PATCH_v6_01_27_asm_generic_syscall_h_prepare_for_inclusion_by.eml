Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  14 Dec 2018 08:39:41 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga008.fm.intel.com (fmsmga008.fm.intel.com [10.253.24.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 0D06058061F;
	Thu, 13 Dec 2018 09:21:19 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by fmsmga008-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 13 Dec 2018 09:21:18 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AEmvRexUrX6zvrBoSBd/CjOeJhjzV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhGFuqdThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGo2y?=
 =?us-ascii?q?YYsRAeQcPuhYoYbyqEcTohulHQmhBvjiyiNUinLswaE2z/gtHR/A0Qc9H9wOqn?=
 =?us-ascii?q?PUrNDtOascX+61yajIzSnZb/JWxDzy55LEeQ0nr/6SQ7JwcMzRxUcyHA7CilWf?=
 =?us-ascii?q?tJLlMiiP2eQJr2ib6+tgVeSyi28osQ1xpSKvxsg1h4TPm4kbyUjE+D1nzIopId?=
 =?us-ascii?q?C0UlN3bNC6HJdKqi2XNJd6TtkjTmxqoCo217kLtJGhcCQX1JgqxQTTZ+GFfoSS?=
 =?us-ascii?q?4h/uVuCcKipiin1/YrKwnROy/FCgyuLiUsm0105HrjRKktbSrHABzR/T5dadSv?=
 =?us-ascii?q?t74Eih3SyD1wfJ6uFLOUw0lKzbJIA9wrMoiJYfrUDOEjXrlEj4kqOabFgo9+u0?=
 =?us-ascii?q?5+j9Y7jrpIeQN4puhQH/NqQulNa/AeM9MgUWW2ib+OK81KDs/EHgQ7VFkOc2kq?=
 =?us-ascii?q?/Hv5DePMgboaC4AwlL3YY58Bu/ETim38oCnXUdL1JKZgiHj473NFHKOvz4Cu2/?=
 =?us-ascii?q?g1u0nDdx2//GJqHhAonKLnXblLfhfLV95FBGxAs80NBS/JZUCrAHIPLuVU79rt?=
 =?us-ascii?q?3YDhklMwOqx+brEsly1oQbWWiXGK+WLLvSsUOU5uIoO+SMZJUauDfhK/c/4P7i?=
 =?us-ascii?q?l385mUIHcqmv0psac3S4HvVgI0WEbnvgmNYBEWEWvgUgSOzmkkGNUTlWZ3yqRa?=
 =?us-ascii?q?Iz+ik7CJ66DYfEXo2tgruB0zmhEp1VYWBGDFaMEXDzeoWAWvcMbj+SI8B7njwF?=
 =?us-ascii?q?U7ihV5Eu1RW0uADmzLpnK/Le+jcEupL7yNh1++rTmAko+jxvD8Sd1GKNQ3tunm?=
 =?us-ascii?q?wSRT87x6R/oU17ylee3ql0mf1YFdpP5/xXVgc2L4LTz+t/C9rqQALOYs+JSEq6?=
 =?us-ascii?q?QtWhGTwxTcg+w9kUb0Z5GtWtlBbD3yWxDr8RlryLAoE0863G03jwIcZ912jJ1K?=
 =?us-ascii?q?07g1Y6RctPMHWshrRj+AjLG47Jj0KZmr63eqsGwi7C6n2PzWqUs0FeSw5/T6PF?=
 =?us-ascii?q?UXcbZkvVqNT54ljPT7uvCbQhLwtAxtSOKqpMat31k1pGQO3vN8jZY2K0g22wHw?=
 =?us-ascii?q?qHxquQbIr2fGUQxDjSB1Iakw8N53qGNRIxBiG6o23ACjxjDlbvY0Lq8eljp3K3?=
 =?us-ascii?q?VE40zweWb0J/07q54AIahfuZS/kLxLILpD8hqyloHFa6x9/WF9uApw9mfKVAYd?=
 =?us-ascii?q?M84E1L1X7Duwx6JJygK6FihlgRcwlsu0Pu1hN3CphPkMQwrXMqyhZyJryc0F9b?=
 =?us-ascii?q?azyY2pXwMKXNKmbu5BCvd7LW2lbG3dmM/qcA9vs5pEvjvQ2zDUUi7mho3MNT03?=
 =?us-ascii?q?uf4ZXKEhEfUZbwUkYx6hh7qKvWYig754PIy3JsNbO4vSPF29IsHOEl0Aqvf89D?=
 =?us-ascii?q?MKOYEw//C80bB9W0JOM2gVSobxIEM/pU9K47JM6mc/qG2Ki2POdvhj6mjGJH4J?=
 =?us-ascii?q?xj3UKI7SZzVunI35MdyfGCwgSHTyv8jEumss3vg4BEZC0dEXClySf5A45dfKty?=
 =?us-ascii?q?cpgRCWevOsG42s9xh5rwVHFG7l6jAFUG1dSteRqTaVz9wAJR2V4WoXyhhSu30T?=
 =?us-ascii?q?h0nys1oaqY2SzE2/7iewYfOm5XWGliik/hIIi1j9wAXEmkdRMplAaj5Uvhw6hb?=
 =?us-ascii?q?paJ/L3TcQEtSfij2KX1iXbW0traYf8FP75Youz1NUOugeVCaVqL9oxwC3iPhBW?=
 =?us-ascii?q?Re3jM7dzKtupnjhBx1kmGdLHVyrHrfZ85wwwzS5NjdRf5XwzoHSzN0iTjRBlig?=
 =?us-ascii?q?Idap+c+YmIvEsuC7T2ihTIFccTH3zYOcsyu2/W1rDge4n/ypmN3nEA463DT/19?=
 =?us-ascii?q?lrUyXIsRn9bpPq16S8LeJoYE1oCEXg5Mp9H4F0ipEwi40I2XgGmpWV+mIKkWTp?=
 =?us-ascii?q?PtVaw67+bGcNSiQNw97a+wXl3ExjLnSUx4P2THmdw81hZ8WkbWMSwC4y88dKCK?=
 =?us-ascii?q?KM5rxegSR1uka4rR7WYfVlmzcdyPgu52QAj+AHpgUt1TmdDa4IHUZDIyPsjRuI?=
 =?us-ascii?q?4su6rKVWYmavbLex2FB/ndCnELGNvAVcVGzldZclGC969t9/P07U0H3v9oHkf8?=
 =?us-ascii?q?Hdbc4Uth2RiRvBjvJaKJQslvoRnipnOHnwvXkky+49kBxv0ou2vImBK2Vx4q25?=
 =?us-ascii?q?BgRUOSHyZ8MW4jvtl7pRnt6K34CzGZVsAi4EU4HvTfKsDTIer/DnNxuVHT04q3?=
 =?us-ascii?q?ebH6ffHACF5EdnqXLPD46kN3WNKHYFytViQQGXJFZDjwAMQDU6gpk5GxioxMP7?=
 =?us-ascii?q?dUd2+CsR6kTkqhdWyeJoKhr/UnrZpAiycTc5U5yfLBtQ7gFf6EbZK82e7uRvHy?=
 =?us-ascii?q?5G+p2tthCCKmueZw5QF2EGRlSEB0z/Prmp/dTB8++YBvenL/vTe7qOr/ZSV+yP?=
 =?us-ascii?q?xZKp3Ytr5DKMNsSJPnl/APw3wEtDXXZlG8vHnzUDUTAYlyXIb8SDvhez5jV3rt?=
 =?us-ascii?q?yj8PTsQA/v5ZWAC7pRMdVs+hC6m6SDN/SXhCZ2NzlYzI4MxWTTxbgb3V4SjTxu?=
 =?us-ascii?q?dja3HbQBsy7NULzfmqtNAxEHbCNzMdNC77gg0QlVJc7bltT126Zigf4oEFhFT0?=
 =?us-ascii?q?Lum8GzacwOImGwL1fHBEeNNLSbKjzH2cD3YaWgSbJOiOVYrQG/uTGeE0X7JDSM?=
 =?us-ascii?q?iyHpVwyzMeFLlCybIB1euISnfhlxE2TsUNLmZQO9MNJsiT02wLs0hm7FNGIGMD?=
 =?us-ascii?q?h8dV9NoaOU7S9Cnvp/HGlB5GJ/LeaYgyaZ8/XYKpEOvPprGCt0keda4HU8y7RN?=
 =?us-ascii?q?7SBEROZ6mC3drtN1p1Gmk++PyidoURZUqzZLgp6LsltmOanD6pZAXnPEr1ox6j?=
 =?us-ascii?q?C5ERIG7/FoENLqsqZWgozGjqT/AD5Y9d7eu8cRUYycD8aKPzIHPAH1FSTTEkNR?=
 =?us-ascii?q?SjqmOknFikBdme3U/XqQ+NxyhZXhgoZGd65HSFEvFvQXFEljVIgNLZptQhsgkL?=
 =?us-ascii?q?iGnIsNuyq96h7LS5MJkIrAU6fYLfDuNCyIxYcCLz8F37L+Z8xHMoHl80Vmdl17?=
 =?us-ascii?q?mpnaXU3KUoYe8WVacgYorRAVozBFRWop1hegM1v17Q=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AeAADrkxJch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUwUBAQsBg2snmCiCIZdAgXMsEwGHRSI2Bw0BAwEBAQEBAQIBEwEBAQgNCQg?=
 =?us-ascii?q?pL4I2JAGCYgMDAQI3PwYJAQErJQMMHSsGARIFgxyCAQQBqRaKNIw8EQaBf4xZg?=
 =?us-ascii?q?gQiAokWKYcDVI95BwICkUwjkUqJLpFoCoF9fQiDJ4InF44gPAEygQUBAYxCAQE?=
X-IPAS-Result: =?us-ascii?q?A0AeAADrkxJch0O0hNFkHAEBAQQBAQcEAQGBUwUBAQsBg2s?=
 =?us-ascii?q?nmCiCIZdAgXMsEwGHRSI2Bw0BAwEBAQEBAQIBEwEBAQgNCQgpL4I2JAGCYgMDA?=
 =?us-ascii?q?QI3PwYJAQErJQMMHSsGARIFgxyCAQQBqRaKNIw8EQaBf4xZggQiAokWKYcDVI9?=
 =?us-ascii?q?5BwICkUwjkUqJLpFoCoF9fQiDJ4InF44gPAEygQUBAYxCAQE?=
X-IronPort-AV: E=Sophos;i="5.56,349,1539673200"; 
   d="scan'208,223";a="55791773"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 13 Dec 2018 09:21:17 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729407AbeLMRVO (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 13 Dec 2018 12:21:14 -0500
Received: from vmicros1.altlinux.org ([194.107.17.57]:36570 "EHLO
        vmicros1.altlinux.org" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727775AbeLMRVO (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 13 Dec 2018 12:21:14 -0500
Received: from mua.local.altlinux.org (mua.local.altlinux.org [192.168.1.14])
        by vmicros1.altlinux.org (Postfix) with ESMTP id 0F72172CC6C;
        Thu, 13 Dec 2018 20:21:11 +0300 (MSK)
Received: by mua.local.altlinux.org (Postfix, from userid 508)
        id F0E2E964E82; Thu, 13 Dec 2018 20:21:10 +0300 (MSK)
Date: Thu, 13 Dec 2018 20:21:10 +0300
From: "Dmitry V. Levin" <ldv@altlinux.org>
To: Arnd Bergmann <arnd@arndb.de>, Oleg Nesterov <oleg@redhat.com>,
        Geert Uytterhoeven <geert@linux-m68k.org>
Cc: Elvira Khabirova <lineprinter@altlinux.org>,
        Eugene Syromyatnikov <esyr@redhat.com>,
        linux-arch@vger.kernel.org, linux-kernel@vger.kernel.org
Subject: [PATCH v6 01/27] asm-generic/syscall.h: prepare for inclusion by
 other files
Message-ID: <20181213172110.GA6024@altlinux.org>
References: <20181213171833.GA5240@altlinux.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From the very beginning and up to now asm-generic/syscall.h is used for
documentation purposes only, it could not be included by arch-specific
asm/syscall.h files due to static/non-static conflict of function
prototypes.

Cc: Arnd Bergmann <arnd@arndb.de>
Cc: Oleg Nesterov <oleg@redhat.com>
Cc: Geert Uytterhoeven <geert@linux-m68k.org>
Cc: Elvira Khabirova <lineprinter@altlinux.org>
Cc: Eugene Syromyatnikov <esyr@redhat.com>
Cc: linux-arch@vger.kernel.org
Signed-off-by: Dmitry V. Levin <ldv@altlinux.org>
---

Notes:
    v6: initial revision

 include/asm-generic/syscall.h | 39 +++++++++++++++++++++--------------
 1 file changed, 24 insertions(+), 15 deletions(-)

diff --git a/include/asm-generic/syscall.h b/include/asm-generic/syscall.h
index 0c938a4354f6..9863a5f8fbe8 100644
--- a/include/asm-generic/syscall.h
+++ b/include/asm-generic/syscall.h
@@ -16,8 +16,8 @@
  * cannot return to user mode while we are looking at it.
  */
 
-#ifndef _ASM_SYSCALL_H
-#define _ASM_SYSCALL_H	1
+#ifndef _ASM_GENERIC_SYSCALL_H
+#define _ASM_GENERIC_SYSCALL_H	1
 
 struct task_struct;
 struct pt_regs;
@@ -38,7 +38,8 @@ struct pt_regs;
  *
  * It's only valid to call this when @task is known to be blocked.
  */
-int syscall_get_nr(struct task_struct *task, struct pt_regs *regs);
+static int
+syscall_get_nr(struct task_struct *task, struct pt_regs *regs);
 
 /**
  * syscall_rollback - roll back registers after an aborted system call
@@ -56,7 +57,8 @@ int syscall_get_nr(struct task_struct *task, struct pt_regs *regs);
  * system call instruction.  This may not be the same as what the
  * register state looked like at system call entry tracing.
  */
-void syscall_rollback(struct task_struct *task, struct pt_regs *regs);
+static void
+syscall_rollback(struct task_struct *task, struct pt_regs *regs);
 
 /**
  * syscall_get_error - check result of traced system call
@@ -68,7 +70,8 @@ void syscall_rollback(struct task_struct *task, struct pt_regs *regs);
  * It's only valid to call this when @task is stopped for tracing on exit
  * from a system call, due to %TIF_SYSCALL_TRACE or %TIF_SYSCALL_AUDIT.
  */
-long syscall_get_error(struct task_struct *task, struct pt_regs *regs);
+static long
+syscall_get_error(struct task_struct *task, struct pt_regs *regs);
 
 /**
  * syscall_get_return_value - get the return value of a traced system call
@@ -81,7 +84,8 @@ long syscall_get_error(struct task_struct *task, struct pt_regs *regs);
  * It's only valid to call this when @task is stopped for tracing on exit
  * from a system call, due to %TIF_SYSCALL_TRACE or %TIF_SYSCALL_AUDIT.
  */
-long syscall_get_return_value(struct task_struct *task, struct pt_regs *regs);
+static long
+syscall_get_return_value(struct task_struct *task, struct pt_regs *regs);
 
 /**
  * syscall_set_return_value - change the return value of a traced system call
@@ -98,8 +102,9 @@ long syscall_get_return_value(struct task_struct *task, struct pt_regs *regs);
  * It's only valid to call this when @task is stopped for tracing on exit
  * from a system call, due to %TIF_SYSCALL_TRACE or %TIF_SYSCALL_AUDIT.
  */
-void syscall_set_return_value(struct task_struct *task, struct pt_regs *regs,
-			      int error, long val);
+static void
+syscall_set_return_value(struct task_struct *task, struct pt_regs *regs,
+			 int error, long val);
 
 /**
  * syscall_get_arguments - extract system call parameter values
@@ -118,8 +123,9 @@ void syscall_set_return_value(struct task_struct *task, struct pt_regs *regs,
  * It's invalid to call this with @i + @n > 6; we only support system calls
  * taking up to 6 arguments.
  */
-void syscall_get_arguments(struct task_struct *task, struct pt_regs *regs,
-			   unsigned int i, unsigned int n, unsigned long *args);
+static void
+syscall_get_arguments(struct task_struct *task, struct pt_regs *regs,
+		      unsigned int i, unsigned int n, unsigned long *args);
 
 /**
  * syscall_set_arguments - change system call parameter value
@@ -138,9 +144,10 @@ void syscall_get_arguments(struct task_struct *task, struct pt_regs *regs,
  * It's invalid to call this with @i + @n > 6; we only support system calls
  * taking up to 6 arguments.
  */
-void syscall_set_arguments(struct task_struct *task, struct pt_regs *regs,
-			   unsigned int i, unsigned int n,
-			   const unsigned long *args);
+static void
+syscall_set_arguments(struct task_struct *task, struct pt_regs *regs,
+		      unsigned int i, unsigned int n,
+		      const unsigned long *args);
 
 /**
  * syscall_get_arch - return the AUDIT_ARCH for the current system call
@@ -153,5 +160,7 @@ void syscall_set_arguments(struct task_struct *task, struct pt_regs *regs,
  * Architectures which permit CONFIG_HAVE_ARCH_SECCOMP_FILTER must
  * provide an implementation of this.
  */
-int syscall_get_arch(void);
-#endif	/* _ASM_SYSCALL_H */
+static int
+syscall_get_arch(void);
+
+#endif	/* _ASM_GENERIC_SYSCALL_H */
-- 
ldv
