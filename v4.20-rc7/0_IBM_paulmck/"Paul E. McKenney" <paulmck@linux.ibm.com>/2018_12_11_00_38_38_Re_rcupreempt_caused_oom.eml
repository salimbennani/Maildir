Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 11 Dec 2018 08:45:39 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 2057558028E;
	Mon, 10 Dec 2018 16:38:49 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga003-1.jf.intel.com with ESMTP; 10 Dec 2018 16:38:48 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ALM4oYRPlstF14j/qN2Yl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KPjyocbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRshfWSxfDI2h?=
 =?us-ascii?q?dYsPAeUOMvpFoIb/qVQArgC+BRGuCe701j9EmmX70bEm3+k7Dw3L2hErEdIUsH?=
 =?us-ascii?q?TTqdX4LKkeX/qvw6nVyTXIcvxY1S3g44bPbh8vpO+DXbR2ccXPyUgjGR7Og1KI?=
 =?us-ascii?q?qYP/IjOV0uENvHSY7+d7UeKvimgnqxx+ozS1x8cjkYzJipgJxVDD8CV02YA4Ls?=
 =?us-ascii?q?C7Rk5jedOoDodcuiWAO4drTM4uXXtktDs5x7Eao5K2fSoHxIwjyhLFafGLb5KE?=
 =?us-ascii?q?7xH9WOqLLzp1h3Roc6+liRmo60iv0Oj8W9G00FlUqipFlcHBtm4C1xPN8MiLUP?=
 =?us-ascii?q?h98Vm72TaJyQ/T7vtIIUcularUM5Ihw7gwmYQPsUnbACP6hEH7gLWLekgq5OSk?=
 =?us-ascii?q?8fnrb7b6qpOGNoJ5iBnyMqE0lcy+BeQ4PBIOX2+e+emk0L3j/Ev5QKhFj/Evka?=
 =?us-ascii?q?nWroraJcIFqa69GgNV1Ygi6xChADe8y9kYg3YHI0xfeB6djIjmJUvOIPbmAve7?=
 =?us-ascii?q?mVisly1rx//eMr37HprNNmTDkKvmfbtl705cyQkzws5F65NbF7EMO/bzWk73tN?=
 =?us-ascii?q?zFAR41KQ20w+D7CNpj0oMSQ36AAqicMKnKq1+H+vovI/WQZI8SoDv9K+Iq5//y?=
 =?us-ascii?q?jXAjnl8RZ6mp3YYNZ3C+EfRrOEGZYXvqgtccHmYGpAs+TOr2iFKcVT5ffWq9X6?=
 =?us-ascii?q?U55jsjEoKpEZ/DRpyxgLyGxCq7HJpWaX5cBlCPFnfocYOEW/AXZSKWI89hlCEE?=
 =?us-ascii?q?VLe7R48g0xGuqBH1y759IuXI/S0YsIrp1MJp6O3LiREy6Tt0AtyH3GGWT2F0mW?=
 =?us-ascii?q?AISyUs3K9lo0xw0VOD0al+g/xFGt1f/fJJUgEmNZHCy+x2Ecz9WgXEft2RUlap?=
 =?us-ascii?q?Xs2mAS0tTtI229IOYFxyG9O4ghDH3iqlGbkVl7OQCZww86Lc2WXxJslnx3bH0q?=
 =?us-ascii?q?khk0cpQs9VOWK6ga5/8hDZB5TVnEWBi6aqaaMc0TbQ+2iZ02qBoltUUA5qXqXD?=
 =?us-ascii?q?RnAQeE3WodP95kPBSr+uDa8qMg9Ayc6EN6tLZcfljVRARPf/JtveZ3i9lHu3BR?=
 =?us-ascii?q?aN3rmMdpble30B3CXBD0gJix0c8myYNQcgHCuho3jRDDp1FV3xZUPh6u1+qHK9?=
 =?us-ascii?q?Tk8pwACGdUxh17yp+hELgfyQUe8c3rUBuC05sTV7AE69387KC9qHvwdhYKRcYd?=
 =?us-ascii?q?Y64Fdb1WLYtxZxPoC6I6BlnF4edwV3v0Xh1xhsDoVAkM4qrG4lzQZoKKKY1k9B?=
 =?us-ascii?q?eC2c3ZzqJrLXLWzy9gi1a6HKwlHezMqW+qAX5fsir1Xsog6oGVQi8nl9yNZVzm?=
 =?us-ascii?q?aT6Y/MDAoRVpLxTF069xx7p7Hcfyk86JnY1XxqMamorDDC38glC/ciyhalZ91f?=
 =?us-ascii?q?Kr+LFBfuE80GAMijMOwrm0WzYh0YJuxT9a40MNmgd/uJw6OrOOdgnDS7jWVI+o?=
 =?us-ascii?q?x900SM9zZiRe7MxZoK3/aY3g6fXTfmkFihqtz3mZxDZTwKBGq/yDTrC5RLZqJv?=
 =?us-ascii?q?eoYHE2GuLNOtxtV/npLiR2RX9Fq+CFwYws+pfhySYkf53Q1R00QXvHOmlTG5zz?=
 =?us-ascii?q?xyjzEmsK6f0DbSzOTlcRoNInRLS3V6jVfwPYi0iMgXXUipbwQzlBqp/136x7Vd?=
 =?us-ascii?q?pKlkK2nTQEFIfzX5Lm14U6uwsKaCbNBL6J8yrSpXV+G8a0iASrHhuxsazz/jH2?=
 =?us-ascii?q?xGyTA5bT6qoJb5nx99iG6HN3Z8tnnZecJxxRfZ+tPcQ+Vc3j4HRCl+lDnWCUKw?=
 =?us-ascii?q?P9iv/dWIiZjDtvqyWH6mVp1WaSPr15+PtDOn5W12Bh2yh/CylcfgEQQg0y/71t?=
 =?us-ascii?q?9qWD7MrBb9ZInryqu7PfhmfkluGF/z9c56FptinYs3gZEawWIaiYmN/XobjWfz?=
 =?us-ascii?q?Ns1W2aHkY3oMXzILw8PV7xLj2E1sNX+Jw4P5VnOAwspufdW6Y2UW2j4j4MBOEq?=
 =?us-ascii?q?ub8LtEnS5tqFqisQ3ReeR9nisayfY27X4aguIJtxA3wiSTHL8SBlVYMjL2lxuT?=
 =?us-ascii?q?8d++tqpXaX2rcbix0kp+gN+gAKuDogFaRHb2ZJMiETVs4cV4NVLGyGfz5Z38eN?=
 =?us-ascii?q?nMcdITsQWZkwvHj+hQMp4wl+AFhSx6OWLmpn0lyvU2jRhv3ZG8oYiGJH9h/KO/?=
 =?us-ascii?q?Ah5EKDL1Y9kf9S3qjaZbhsyWxZygHo19GjUXW5vlVemnHygVtfTjKgaCCjk8qm?=
 =?us-ascii?q?qAFLrbHA+f7lpmrn3VH5CqMXGXOGcWzdF4SBaBI0xfhRgeXC8mkZ4hCgCq2Mvh?=
 =?us-ascii?q?fV975j8L4173tABMxvh0NxXlUWffuQSoaioySJeFNxpb9QVC50bTMcyD4eN/BS?=
 =?us-ascii?q?BY/pu9rAOTLmyXfRhHDWYMWkacHVDsIqGu5cXc8+ifHue/L/zOYaiXqexDTfiI?=
 =?us-ascii?q?w4ij0pBh/zaKOcWCJX1iD/w92kpeUnF1AcXZmzMTSyMJkyLBddKUpBC5+idvtM?=
 =?us-ascii?q?Cw7OzrWB7z5YuIE7ZSMctg+xG1gaeANu6cniV5KSxf1pMD23DI0qUf3EUJhiFq?=
 =?us-ascii?q?djmtF6kAtCHXQKLRnK9XEwAUaydpOMRU6KI82xFHOdTHhdPtyr54kvk1Bk9fWl?=
 =?us-ascii?q?z8gc6pf9IFImGnOFPDBUaGL7CGJTzNw8HqbqKwU7xQjONItxKuvTaXCVPsPjOG?=
 =?us-ascii?q?lzPxTRCgLflMjD2HPBxZoIy9bhdtCW35QN36cBG0LN93giMwwbAvgnPKNGgcMS?=
 =?us-ascii?q?Vzck9Xr72Q6z9Yjet7G2Bb8nVlKuyEkT6D7+bEMpYWredrAiNsmuNa+ns6zb5V?=
 =?us-ascii?q?7CBCRPNtmSrSrsRho1epkuSUzjpnURxOqitEhY6RvEViP7nZ+YdEWXre4B0N6m?=
 =?us-ascii?q?CQWFw2oI4vKtCr84pXgJCbnqW1KDpq8tTI8M9aDM/RfpG9PWIlICbuTSbdEQ8A?=
 =?us-ascii?q?Rj2DMWDZmlwbkfuXsHaSq8sUsJ/pzdA2Q6JfHHFzXtYRKUljGtETat8jRjo5lb?=
 =?us-ascii?q?uQj+YM5HyjvF/QTsActZfCAKHBSc7zISqU2OEXLyADxqn1eMFKbtX2?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAAD9BQ9ch0O0hNFkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGDayeME1+NPxSXPYFzEgEBGBMBh20iNAkNAQMBAQE?=
 =?us-ascii?q?BAQECARMBAQEIDQkIKS+CNiQBgmIBAQEDAQIPFRM/BgkBAQoUBAklAwwFGDETB?=
 =?us-ascii?q?R2Cf4ICAwKbSIlYAQEBgWozhTGEe4whEQaBQD+EI4g2giYCiS8KgXCEFH1RjxV?=
 =?us-ascii?q?VBwICjWGDYQsYgX+PPiyYXQIEBgUCEwGBRoIOcBWCCIEfgicXjj5RgQUBASGLe?=
 =?us-ascii?q?wEB?=
X-IPAS-Result: =?us-ascii?q?A0ABAAD9BQ9ch0O0hNFkGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGDayeME1+NPxSXPYFzEgEBGBMBh20iNAkNAQMBAQEBAQECARMBAQEID?=
 =?us-ascii?q?QkIKS+CNiQBgmIBAQEDAQIPFRM/BgkBAQoUBAklAwwFGDETBR2Cf4ICAwKbSIl?=
 =?us-ascii?q?YAQEBgWozhTGEe4whEQaBQD+EI4g2giYCiS8KgXCEFH1RjxVVBwICjWGDYQsYg?=
 =?us-ascii?q?X+PPiyYXQIEBgUCEwGBRoIOcBWCCIEfgicXjj5RgQUBASGLewEB?=
X-IronPort-AV: E=Sophos;i="5.56,340,1539673200"; 
   d="scan'208";a="43513894"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 10 Dec 2018 16:38:47 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728233AbeLKAin (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 10 Dec 2018 19:38:43 -0500
Received: from mx0b-001b2d01.pphosted.com ([148.163.158.5]:33830 "EHLO
        mx0a-001b2d01.pphosted.com" rhost-flags-OK-OK-OK-FAIL)
        by vger.kernel.org with ESMTP id S1726693AbeLKAin (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 10 Dec 2018 19:38:43 -0500
Received: from pps.filterd (m0098421.ppops.net [127.0.0.1])
        by mx0a-001b2d01.pphosted.com (8.16.0.22/8.16.0.22) with SMTP id wBB0XVk3084690
        for <linux-kernel@vger.kernel.org>; Mon, 10 Dec 2018 19:38:41 -0500
Received: from e12.ny.us.ibm.com (e12.ny.us.ibm.com [129.33.205.202])
        by mx0a-001b2d01.pphosted.com with ESMTP id 2p9ypn765n-1
        (version=TLSv1.2 cipher=AES256-GCM-SHA384 bits=256 verify=NOT)
        for <linux-kernel@vger.kernel.org>; Mon, 10 Dec 2018 19:38:41 -0500
Received: from localhost
        by e12.ny.us.ibm.com with IBM ESMTP SMTP Gateway: Authorized Use Only! Violators will be prosecuted
        for <linux-kernel@vger.kernel.org> from <paulmck@linux.vnet.ibm.com>;
        Tue, 11 Dec 2018 00:38:40 -0000
Received: from b01cxnp22033.gho.pok.ibm.com (9.57.198.23)
        by e12.ny.us.ibm.com (146.89.104.199) with IBM ESMTP SMTP Gateway: Authorized Use Only! Violators will be prosecuted;
        (version=TLSv1/SSLv3 cipher=AES256-GCM-SHA384 bits=256/256)
        Tue, 11 Dec 2018 00:38:37 -0000
Received: from b01ledav003.gho.pok.ibm.com (b01ledav003.gho.pok.ibm.com [9.57.199.108])
        by b01cxnp22033.gho.pok.ibm.com (8.14.9/8.14.9/NCO v10.0) with ESMTP id wBB0cax619988556
        (version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256 verify=FAIL);
        Tue, 11 Dec 2018 00:38:36 GMT
Received: from b01ledav003.gho.pok.ibm.com (unknown [127.0.0.1])
        by IMSVA (Postfix) with ESMTP id 00854B2068;
        Tue, 11 Dec 2018 00:38:36 +0000 (GMT)
Received: from b01ledav003.gho.pok.ibm.com (unknown [127.0.0.1])
        by IMSVA (Postfix) with ESMTP id C6109B2066;
        Tue, 11 Dec 2018 00:38:35 +0000 (GMT)
Received: from paulmck-ThinkPad-W541 (unknown [9.70.82.38])
        by b01ledav003.gho.pok.ibm.com (Postfix) with ESMTP;
        Tue, 11 Dec 2018 00:38:35 +0000 (GMT)
Received: by paulmck-ThinkPad-W541 (Postfix, from userid 1000)
        id E8E0D16C37FE; Mon, 10 Dec 2018 16:38:38 -0800 (PST)
Date: Mon, 10 Dec 2018 16:38:38 -0800
From: "Paul E. McKenney" <paulmck@linux.ibm.com>
To: "He, Bo" <bo.he@intel.com>
Cc: Steven Rostedt <rostedt@goodmis.org>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        "josh@joshtriplett.org" <josh@joshtriplett.org>,
        "mathieu.desnoyers@efficios.com" <mathieu.desnoyers@efficios.com>,
        "jiangshanlai@gmail.com" <jiangshanlai@gmail.com>,
        "Zhang, Jun" <jun.zhang@intel.com>,
        "Xiao, Jin" <jin.xiao@intel.com>,
        "Zhang, Yanmin" <yanmin.zhang@intel.com>,
        "Bai, Jie A" <jie.a.bai@intel.com>
Subject: Re: rcu_preempt caused oom
Reply-To: paulmck@linux.ibm.com
References: <CD6925E8781EFD4D8E11882D20FC406D52A1509A@SHSMSX104.ccr.corp.intel.com>
 <20181204194936.GD4170@linux.ibm.com>
 <CD6925E8781EFD4D8E11882D20FC406D52A16605@SHSMSX104.ccr.corp.intel.com>
 <20181205174435.GU4170@linux.ibm.com>
 <CD6925E8781EFD4D8E11882D20FC406D52A16C46@SHSMSX104.ccr.corp.intel.com>
 <20181206173808.GI4170@linux.ibm.com>
 <CD6925E8781EFD4D8E11882D20FC406D52A180C5@SHSMSX104.ccr.corp.intel.com>
 <20181207141131.GP4170@linux.ibm.com>
 <20181209195601.GA7854@linux.ibm.com>
 <CD6925E8781EFD4D8E11882D20FC406D52A186D0@SHSMSX104.ccr.corp.intel.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <CD6925E8781EFD4D8E11882D20FC406D52A186D0@SHSMSX104.ccr.corp.intel.com>
User-Agent: Mutt/1.5.21 (2010-09-15)
X-TM-AS-GCONF: 00
x-cbid: 18121100-0060-0000-0000-000002E2026F
X-IBM-SpamModules-Scores: 
X-IBM-SpamModules-Versions: BY=3.00010210; HX=3.00000242; KW=3.00000007;
 PH=3.00000004; SC=3.00000270; SDB=6.01129960; UDB=6.00587121; IPR=6.00910093;
 MB=3.00024648; MTD=3.00000008; XFM=3.00000015; UTC=2018-12-11 00:38:39
X-IBM-AV-DETECTION: SAVI=unused REMOTE=unused XFE=unused
x-cbparentid: 18121100-0061-0000-0000-0000477E515E
Message-Id: <20181211003838.GD4170@linux.ibm.com>
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10434:,, definitions=2018-12-10_08:,,
 signatures=0
X-Proofpoint-Spam-Details: rule=outbound_notspam policy=outbound score=0 priorityscore=1501
 malwarescore=0 suspectscore=0 phishscore=0 bulkscore=0 spamscore=0
 clxscore=1015 lowpriorityscore=0 mlxscore=0 impostorscore=0
 mlxlogscore=999 adultscore=0 classifier=spam adjust=0 reason=mlx
 scancount=1 engine=8.0.1-1810050000 definitions=main-1812110004
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Mon, Dec 10, 2018 at 06:56:18AM +0000, He, Bo wrote:
> Hi, 
>    We have start the test with the CONFIG_PROVE_RCU=y, and also add one 2s to detect the preempt rcu hang, hope we can get more useful logs tomorrow.
>    I also enclosed the config and the debug patches for you review.

I instead suggest the (lightly tested) debug patch shown below, which
tracks wakeups of RCU's grace-period kthreads and dumps them out if a
given requested grace period fails to start.  Again, it is necessary to
build with CONFIG_PROVE_RCU=y, that is, with CONFIG_PROVE_LOCKING=y.

							Thanx, Paul

------------------------------------------------------------------------

commit 2a3826f15adaf92d046c80e38d090ecff5403807
Author: Paul E. McKenney <paulmck@linux.ibm.com>
Date:   Mon Dec 10 16:33:59 2018 -0800

    rcu: Improve diagnostics for failed RCU grace-period start
    
    Backported from v4.21/v5.0
    
    If a grace period fails to start (for example, because you commented
    out the last two lines of rcu_accelerate_cbs_unlocked()), rcu_core()
    will invoke rcu_check_gp_start_stall(), which will notice and complain.
    However, this complaint is lacking crucial debugging information such
    as when the last wakeup executed and what the value of ->gp_seq was at
    that time.  This commit therefore removes the current pr_alert() from
    rcu_check_gp_start_stall(), instead invoking show_rcu_gp_kthreads(),
    which has been updated to print the needed information, which is collected
    by rcu_gp_kthread_wake().
    
    Signed-off-by: Paul E. McKenney <paulmck@linux.ibm.com>

diff --git a/kernel/rcu/tree.c b/kernel/rcu/tree.c
index 0b760c1369f7..7daaef57d905 100644
--- a/kernel/rcu/tree.c
+++ b/kernel/rcu/tree.c
@@ -626,25 +626,57 @@ void rcu_sched_force_quiescent_state(void)
 }
 EXPORT_SYMBOL_GPL(rcu_sched_force_quiescent_state);
 
+/*
+ * Convert a ->gp_state value to a character string.
+ */
+static const char *gp_state_getname(short gs)
+{
+	if (gs < 0 || gs >= ARRAY_SIZE(gp_state_names))
+		return "???";
+	return gp_state_names[gs];
+}
+
+/*
+ * Return the root node of the specified rcu_state structure.
+ */
+static struct rcu_node *rcu_get_root(struct rcu_state *rsp)
+{
+	return &rsp->node[0];
+}
+
 /*
  * Show the state of the grace-period kthreads.
  */
 void show_rcu_gp_kthreads(void)
 {
 	int cpu;
+	unsigned long j;
+	unsigned long ja;
+	unsigned long jr;
+	unsigned long jw;
 	struct rcu_data *rdp;
 	struct rcu_node *rnp;
 	struct rcu_state *rsp;
 
+	j = jiffies;
 	for_each_rcu_flavor(rsp) {
-		pr_info("%s: wait state: %d ->state: %#lx\n",
-			rsp->name, rsp->gp_state, rsp->gp_kthread->state);
+		ja = j - READ_ONCE(rsp->gp_activity);
+		jr = j - READ_ONCE(rsp->gp_req_activity);
+		jw = j - READ_ONCE(rsp->gp_wake_time);
+		pr_info("%s: wait state: %s(%d) ->state: %#lx delta ->gp_activity %lu ->gp_req_activity %lu ->gp_wake_time %lu ->gp_wake_seq %ld ->gp_seq %ld ->gp_seq_needed %ld ->gp_flags %#x\n",
+			rsp->name, gp_state_getname(rsp->gp_state),
+			rsp->gp_state,
+			rsp->gp_kthread ? rsp->gp_kthread->state : 0x1ffffL,
+			ja, jr, jw, (long)READ_ONCE(rsp->gp_wake_seq),
+			(long)READ_ONCE(rsp->gp_seq),
+			(long)READ_ONCE(rcu_get_root(rsp)->gp_seq_needed),
+			READ_ONCE(rsp->gp_flags));
 		rcu_for_each_node_breadth_first(rsp, rnp) {
 			if (ULONG_CMP_GE(rsp->gp_seq, rnp->gp_seq_needed))
 				continue;
-			pr_info("\trcu_node %d:%d ->gp_seq %lu ->gp_seq_needed %lu\n",
-				rnp->grplo, rnp->grphi, rnp->gp_seq,
-				rnp->gp_seq_needed);
+			pr_info("\trcu_node %d:%d ->gp_seq %ld ->gp_seq_needed %ld\n",
+				rnp->grplo, rnp->grphi, (long)rnp->gp_seq,
+				(long)rnp->gp_seq_needed);
 			if (!rcu_is_leaf_node(rnp))
 				continue;
 			for_each_leaf_node_possible_cpu(rnp, cpu) {
@@ -653,8 +685,8 @@ void show_rcu_gp_kthreads(void)
 				    ULONG_CMP_GE(rsp->gp_seq,
 						 rdp->gp_seq_needed))
 					continue;
-				pr_info("\tcpu %d ->gp_seq_needed %lu\n",
-					cpu, rdp->gp_seq_needed);
+				pr_info("\tcpu %d ->gp_seq_needed %ld\n",
+					cpu, (long)rdp->gp_seq_needed);
 			}
 		}
 		/* sched_show_task(rsp->gp_kthread); */
@@ -690,14 +722,6 @@ void rcutorture_get_gp_data(enum rcutorture_type test_type, int *flags,
 }
 EXPORT_SYMBOL_GPL(rcutorture_get_gp_data);
 
-/*
- * Return the root node of the specified rcu_state structure.
- */
-static struct rcu_node *rcu_get_root(struct rcu_state *rsp)
-{
-	return &rsp->node[0];
-}
-
 /*
  * Enter an RCU extended quiescent state, which can be either the
  * idle loop or adaptive-tickless usermode execution.
@@ -1285,16 +1309,6 @@ static void record_gp_stall_check_time(struct rcu_state *rsp)
 	rsp->n_force_qs_gpstart = READ_ONCE(rsp->n_force_qs);
 }
 
-/*
- * Convert a ->gp_state value to a character string.
- */
-static const char *gp_state_getname(short gs)
-{
-	if (gs < 0 || gs >= ARRAY_SIZE(gp_state_names))
-		return "???";
-	return gp_state_names[gs];
-}
-
 /*
  * Complain about starvation of grace-period kthread.
  */
@@ -1693,7 +1707,8 @@ static bool rcu_future_gp_cleanup(struct rcu_state *rsp, struct rcu_node *rnp)
  * Don't do a self-awaken, and don't bother awakening when there is
  * nothing for the grace-period kthread to do (as in several CPUs
  * raced to awaken, and we lost), and finally don't try to awaken
- * a kthread that has not yet been created.
+ * a kthread that has not yet been created.  If all those checks are
+ * passed, track some debug information and awaken.
  */
 static void rcu_gp_kthread_wake(struct rcu_state *rsp)
 {
@@ -1701,6 +1716,8 @@ static void rcu_gp_kthread_wake(struct rcu_state *rsp)
 	    !READ_ONCE(rsp->gp_flags) ||
 	    !rsp->gp_kthread)
 		return;
+	WRITE_ONCE(rsp->gp_wake_time, jiffies);
+	WRITE_ONCE(rsp->gp_wake_seq, READ_ONCE(rsp->gp_seq));
 	swake_up_one(&rsp->gp_wq);
 }
 
@@ -1774,8 +1791,8 @@ static void rcu_accelerate_cbs_unlocked(struct rcu_state *rsp,
 	raw_spin_lock_rcu_node(rnp); /* irqs already disabled. */
 	needwake = rcu_accelerate_cbs(rsp, rnp, rdp);
 	raw_spin_unlock_rcu_node(rnp); /* irqs remain disabled. */
-	if (needwake)
-		rcu_gp_kthread_wake(rsp);
+	/* if (needwake)
+		rcu_gp_kthread_wake(rsp); */
 }
 
 /*
@@ -2802,16 +2819,11 @@ rcu_check_gp_start_stall(struct rcu_state *rsp, struct rcu_node *rnp,
 		raw_spin_unlock_irqrestore_rcu_node(rnp, flags);
 		return;
 	}
-	pr_alert("%s: g%ld->%ld gar:%lu ga:%lu f%#x gs:%d %s->state:%#lx\n",
-		 __func__, (long)READ_ONCE(rsp->gp_seq),
-		 (long)READ_ONCE(rnp_root->gp_seq_needed),
-		 j - rsp->gp_req_activity, j - rsp->gp_activity,
-		 rsp->gp_flags, rsp->gp_state, rsp->name,
-		 rsp->gp_kthread ? rsp->gp_kthread->state : 0x1ffffL);
 	WARN_ON(1);
 	if (rnp_root != rnp)
 		raw_spin_unlock_rcu_node(rnp_root);
 	raw_spin_unlock_irqrestore_rcu_node(rnp, flags);
+	show_rcu_gp_kthreads();
 }
 
 /*
diff --git a/kernel/rcu/tree.h b/kernel/rcu/tree.h
index 4e74df768c57..0e051d9b5f1a 100644
--- a/kernel/rcu/tree.h
+++ b/kernel/rcu/tree.h
@@ -327,6 +327,8 @@ struct rcu_state {
 	struct swait_queue_head gp_wq;		/* Where GP task waits. */
 	short gp_flags;				/* Commands for GP task. */
 	short gp_state;				/* GP kthread sleep state. */
+	unsigned long gp_wake_time;		/* Last GP kthread wake. */
+	unsigned long gp_wake_seq;		/* ->gp_seq at ^^^. */
 
 	/* End of fields guarded by root rcu_node's lock. */
 

