Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  14 Dec 2018 08:38:21 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 85B2458061F
	for <like.xu@linux.intel.com>; Thu, 13 Dec 2018 07:16:19 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by fmsmga002-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 13 Dec 2018 07:16:19 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3ABD4ZeBNwlClLMFXxD+Il6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0I/r7rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZUMhfVzJPDICy?=
 =?us-ascii?q?b4QAE+UOIORXoIfgqVsWrxawBwahCP7hxzNUmHD2xrY30/g9HQzcwAAsA8gDvG?=
 =?us-ascii?q?rSod7oNKkSS+e1zKzQwDvGcfxWxzb96I7VeR8hpvGMWbxwetfWxEksGQLFiVGQ?=
 =?us-ascii?q?qYL+MjOPyOsCrmib4PB8Ve61l2EnrARxryGpy8wxiYfJnpoYxk7Y+Sh62oo5OM?=
 =?us-ascii?q?C0RU1hbdK6HpZdtzuWO5Z0T886XW1kpCI3xqcbtZO1YiQG0okryh3RZvCdbYSF?=
 =?us-ascii?q?4RTuX/uLLzhinnJqYre/ig6y8Ue+zu38UdG50FJLripejtnMrWoB1xPV6siaUP?=
 =?us-ascii?q?d9+V2h2TmX2wDS7OFLP1w0mLLFJ5I9wbM8jIcfvVnAEyPshkn7gq+bel859uWq?=
 =?us-ascii?q?8+jnZ6/ppp6YN496kAH+NaEul9SmAesmNwgOQnGX9vmi273940L5RKxGgeYxkq?=
 =?us-ascii?q?nEtpDVOdoUprW+Dw9R04Yj6AiwAy2p0dQFhXQHKFNFeBSaj4nmIV3OIfb4Deuh?=
 =?us-ascii?q?jFSoijtk2/fGPrj6D5XLKXjDlrjhfbBg60JGzwoz199f64pOCr4dOPLzRlPxtN?=
 =?us-ascii?q?vAAx89Mgy0wPjoBM9y14MDQm+PBq6ZMKXPsV6H/O4vIu+MZJMLtzb5MfQq+/nu?=
 =?us-ascii?q?jXpq0WIbZrSjiJsLdGijTLMhJ0SCfWGqhNAHHmEX+A0kQ6vvgVyGVDdVIHGqQ6?=
 =?us-ascii?q?M74Cp8EY+jEMLPS56ghO+82jymFMhTb2FCFlfeCHrtasCIVukBbGeIL9Z8nycY?=
 =?us-ascii?q?fb6mTYAnyFeprgCt0KdtLOff5ngFs4n+3sN+/ezZmEIO8mlMBtmZm02QVXt9mH?=
 =?us-ascii?q?9AEwc/waQ5jVFn0F6FzYBzguBCFMwV7PRMBFQUL5nZms93FdH0Ej3GetnBHFW5?=
 =?us-ascii?q?RdGoKSs8QtI435kFZEMrSIbqtQzKwyf/W+xdrLeMHpFht/uEh3U=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0CAAAAvdxJcmBHrdtBjGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBZYExj1aNQZlKERgUh0UiOBIBAwEBAQEBAQIBEwEBAQEBCAsLBhsOL4I?=
 =?us-ascii?q?2BQIDGgEGglwBAgIBAQIkEwwKKQMDAQIGAQEKIR0IAwELBUkYgxyBeQgBBKgGM?=
 =?us-ascii?q?4JMh2OCLooOF4FAP4ERghR+ilwCiS0IgX2EFYFPj3kJkU4LGIlsh16ZSYFdgXc?=
 =?us-ascii?q?zGggbFYMogiYXjh5AgTgciWErKYF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0CAAAAvdxJcmBHrdtBjGwEBAQEDAQEBBwMBAQGBZYExj1a?=
 =?us-ascii?q?NQZlKERgUh0UiOBIBAwEBAQEBAQIBEwEBAQEBCAsLBhsOL4I2BQIDGgEGglwBA?=
 =?us-ascii?q?gIBAQIkEwwKKQMDAQIGAQEKIR0IAwELBUkYgxyBeQgBBKgGM4JMh2OCLooOF4F?=
 =?us-ascii?q?AP4ERghR+ilwCiS0IgX2EFYFPj3kJkU4LGIlsh16ZSYFdgXczGggbFYMogiYXj?=
 =?us-ascii?q?h5AgTgciWErKYF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,349,1539673200"; 
   d="scan'208";a="66685328"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mga01b.intel.com with ESMTP/TLS/AES256-SHA; 13 Dec 2018 07:16:18 -0800
Received: from localhost ([::1]:53195 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gXSin-0007C7-HW
	for like.xu@linux.intel.com; Thu, 13 Dec 2018 10:16:17 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:41144)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <kwolf@redhat.com>) id 1gXSbJ-00086v-3Y
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 10:08:39 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <kwolf@redhat.com>) id 1gXSbH-0000gN-76
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 10:08:33 -0500
Received: from mx1.redhat.com ([209.132.183.28]:56116)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <kwolf@redhat.com>)
	id 1gXSb9-0000Pb-Nc; Thu, 13 Dec 2018 10:08:23 -0500
Received: from smtp.corp.redhat.com (int-mx03.intmail.prod.int.phx2.redhat.com
	[10.5.11.13])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id C58463084258;
	Thu, 13 Dec 2018 15:08:22 +0000 (UTC)
Received: from linux.fritz.box (ovpn-117-232.ams2.redhat.com [10.36.117.232])
	by smtp.corp.redhat.com (Postfix) with ESMTPS id C6612648CA;
	Thu, 13 Dec 2018 15:08:19 +0000 (UTC)
Date: Thu, 13 Dec 2018 16:08:18 +0100
From: Kevin Wolf <kwolf@redhat.com>
To: Paul Durrant <Paul.Durrant@citrix.com>
Message-ID: <20181213150818.GI5427@linux.fritz.box>
References: <1544543862-9997-1-git-send-email-paul.durrant@citrix.com>
	<1544543862-9997-17-git-send-email-paul.durrant@citrix.com>
	<20181213115152.GA5427@linux.fritz.box>
	<b323cd922b6d4a5798a2f3cfae2bd573@AMSPEX02CL03.citrite.net>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <b323cd922b6d4a5798a2f3cfae2bd573@AMSPEX02CL03.citrite.net>
User-Agent: Mutt/1.10.1 (2018-07-13)
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.13
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.40]);
	Thu, 13 Dec 2018 15:08:23 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH v4 16/18] xen: automatically create
 XenBlockDevice-s
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: "xen-devel@lists.xenproject.org" <xen-devel@lists.xenproject.org>,
	Stefano Stabellini <sstabellini@kernel.org>,
	"qemu-devel@nongnu.org" <qemu-devel@nongnu.org>,
	"qemu-block@nongnu.org" <qemu-block@nongnu.org>,
	Max Reitz <mreitz@redhat.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Am 13.12.2018 um 13:44 hat Paul Durrant geschrieben:
> > Essentially, what I'm wondering is whether we have anything that could
> > be treated more or less like another monitor besides QMP and HMP, which
> > would internally work similar to HMP, i.e. map (almost) everything to
> > QMP commands.
> 
> Yes, it would be possible to have a separate 'compatibility' daemon to
> watch xenstore and then formulate the correct sequence of QMP commands
> to instantiate the backend, but that is more complicated and the right
> answer of course is to have the toolstack send the QMP commands in the
> first place.

Okay, if someone is working on actually using QMP instead of xenstore,
that's even better, of course. Disregard this point then.

> > > +    drive_new(drive_opts, IF_NONE, &local_err);
> > > +    if (local_err) {
> > > +        error_propagate_prepend(errp, local_err,
> > > +                                "failed to create drive: ");
> > > +        goto done;
> > > +    }
> > 
> > The other major point is that you're using the legacy drive_*()
> > infrastructure, which should not only go away as soon as we can, but
> > which is also full of magic and nasty surprises.
> > 
> > I think the best way would be to create only a block node
> > (BlockDriverState) here, and get an automatically created anonymous
> > BlockBackend from the qdev drive property.
> > 
> > There are two ways to achieve this: qmp_blockdev_add() would be optimal
> > because that's a stable external interface. It would require you to
> > specify a node-name (you already have the id parameter), and you'd use
> > this node-name for the qdev drive property.
> > 
> > qmp_blockdev_add() requires a BlockdevOptions object, which you can
> > either construct manually in C or use a visitor to convert from an
> > options QDict. Maybe in this case, converting from a QDict is better
> > because otherwise you need special code for each block driver.
> > 
> 
> I was using the legacy interfaces because this code is, as I said
> above, supposed to be a mechanism only required for compatibility with
> the way toolstacks currently operate (and so is essentially 'legacy')
> but using the top-level QMP entry point to construct the does sound
> do-able as long as the underlying file locking can still be avoided
> with that mechanism. Since BlockdevOptions seems to be an
> auto-generated structure, figuring out how to fill it in manually is
> somewhat tricky so the QDict approach is preferable but I'll have to
> figure out how to use a visitor to do the translation.

You can grep for qobject_input_visitor_new() for examples. Some block
drivers use this internally to convert .bdrv_create options to a QAPI
object, it looks like this:

    /* Now get the QAPI type BlockdevCreateOptions */
    v = qobject_input_visitor_new_flat_confused(qdict, errp);
    if (!v) {
        ret = -EINVAL;
        goto finish;
    }

    visit_type_BlockdevCreateOptions(v, NULL, &create_options, &local_err);
    visit_free(v);

    if (local_err) {
        error_propagate(errp, local_err);
        ret = -EINVAL;
        goto finish;
    }

Obviously, you'd use visit_type_BlockdevOptions instead. You also might
not need the _flat_confused variant, which is about QDicts where we
don't know whether values are stored as their actual type or as strings.
In your code, you have control over the types in the QDict, so this
shouldn't be a problem.

> > The other way would be calling bdrv_open() directly, which gives you a
> > BlockDriverState, but it risks using legacy functionality that will be
> > deprecated soon. Again, you'd take the node-name and pass it to the qdev
> > drive option below.
> 
> Yes, xen_disk does things this way but then we end up with legacy
> block device and still fall foul of the assertions buried in the code.

Yes and no. xen_disk is better in that it avoids the drive_* things
(which internally call bdrv_open() anyway), but it's worse in that it
directly assigns blkdev->blk instead of using the qdev property.

What I meant here is that you create the BDS with bdrv_open(), but then
you wouldn't assign it directly to some field in the device state, but
just put the node-name of the BDS into the qdev property 'drive'. This
would be almost like qmp_blockdev_add(), except without validation
against the QAPI schema.

But if using qmp_blockdev_add() is easy enough, that's preferable.

> > 
> > > +
> > > +done:
> > > +    g_free(drive_optstr);
> > > +    g_free(format);
> > > +    g_free(file);
> > > +}
> > > +
> > > +static void xen_block_device_create(BusState *bus, const char *name,
> > > +                                    QDict *opts, Error **errp)
> > > +{
> > > +    unsigned long number;
> > > +    const char *vdev, *device_type;
> > > +    BlockBackend *blk = NULL;
> > > +    IOThread *iothread = NULL;
> > > +    DeviceState *dev = NULL;
> > > +    Error *local_err = NULL;
> > > +    const char *type;
> > > +    XenBlockDevice *blockdev;
> > > +
> > > +    trace_xen_block_device_create(name);
> > > +
> > > +    if (qemu_strtoul(name, NULL, 10, &number)) {
> > > +        error_setg(errp, "failed to parse name '%s'", name);
> > > +        return;
> > > +    }
> > > +
> > > +    vdev = qdict_get_try_str(opts, "dev");
> > > +    if (!vdev) {
> > > +        error_setg(errp, "no dev parameter");
> > > +        return;
> > > +    }
> > > +
> > > +    device_type = qdict_get_try_str(opts, "device-type");
> > > +    if (!device_type) {
> > > +        error_setg(errp, "no device-type parameter");
> > > +        return;
> > > +    }
> > > +
> > > +    if (!strcmp(device_type, "disk")) {
> > > +        type = TYPE_XEN_DISK_DEVICE;
> > > +    } else if (!strcmp(device_type, "cdrom")) {
> > > +        type = TYPE_XEN_CDROM_DEVICE;
> > > +    } else {
> > > +        error_setg(errp, "invalid device-type parameter '%s'",
> > device_type);
> > > +        return;
> > > +    }
> > > +
> > > +    xen_block_drive_create(vdev, device_type, opts, &local_err);
> > > +    if (local_err) {
> > > +        error_propagate(errp, local_err);
> > > +        return;
> > > +    }
> > > +
> > > +    blk = blk_by_name(vdev);
> > > +    g_assert(blk);
> > > +
> > > +    iothread = iothread_create(vdev, &local_err);
> > > +    if (local_err) {
> > > +        error_propagate(errp, local_err);
> > > +        goto unref;
> > > +    }
> > > +
> > > +    dev = qdev_create(bus, type);
> > > +    blockdev = XEN_BLOCK_DEVICE(dev);
> > > +
> > > +    qdev_prop_set_string(dev, "vdev", vdev);
> > > +    if (blockdev->vdev.number != number) {
> > > +        error_setg(errp, "invalid dev parameter '%s'", vdev);
> > > +        goto unref;
> > > +    }
> > > +
> > > +    qdev_prop_set_drive(dev, "drive", blk, &local_err);
> > > +    if (local_err) {
> > > +        error_propagate_prepend(errp, local_err, "failed to set
> > 'drive': ");
> > > +        goto unref;
> > > +    }
> > 
> > So here you would need to use something like this:
> > 
> > object_property_set_str(OBJECT(dev), vdev, "driver", &local_err);
> > 
> > > +
> > > +    blockdev->auto_iothread = iothread;
> > > +
> > > +    object_property_set_bool(OBJECT(dev), true, "realized",
> > &local_err);
> > > +    if (local_err) {
> > > +        error_propagate_prepend(errp, local_err,
> > > +                                "initialization of device %s failed: ",
> > > +                                type);
> > > +        goto unref;
> > > +    }
> > > +
> > > +    blockdev_mark_auto_del(blk);
> > 
> > You don't need this one any more then (if you look into the details,
> > it's one of the more confusing parts of the drive_*() magic, so it's
> > good to get rid of it). When you use the anonymous BlockBackend created
> > by the qdev drive property (because you passed it a node-name rather
> > than a BlockBackend name) means that the BlockBackend disappears
> > together with the drive.
> > 
> 
> Ok.
> 
> > Note that explicitly created block nodes must also be unreferenced
> > explicitly (bdrv_open() should be paired with bdrv_unref() and
> > qmp_blockdev_add() with qmp_blockdev_del()). Maybe XenBackendInfo needs
> > a .destroy callback so we can do destruction symmetrically to device
> > creation?
> > 
> 
> Yes, I'd probably just add a callback function pointer into XenDevice
> which only gets set for devices instantiated via this mechanism.

I think it's a bit nicer to have it in XenBackendInfo for symmetry and
because that sits outside the device, so the device doesn't destroy its
own backend, just like it doesn't create it (even if it's the same
source file).

But yes, whatever works best for you.

Kevin

