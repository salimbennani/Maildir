Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 21:20:49 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 586AA580380
	for <like.xu@linux.intel.com>; Thu, 13 Dec 2018 00:02:19 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga006-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 13 Dec 2018 00:02:18 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AmtZUMRS+YE6vgbtnFfMCEobsatpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa6zbBON2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRPDI28?=
 =?us-ascii?q?cYUBDOgOPehfoYbyu1QAogawBRGuCe3txTJEm3H70bEk3OQ6CgzGwA4tEsgSvH?=
 =?us-ascii?q?nOsNn5KqEfWv21wqnSyjXDautb1zbn6IfWfRAqvPSCXa9qccvQ1EIiEAzFjk+X?=
 =?us-ascii?q?qYz4MDOYzecNvHKc7+V9T+6vjHQnqw5orzWp28wihI7JhocPxVDF8yV02Ik1Jd?=
 =?us-ascii?q?ykSE57fN6rC4FcuD2dN4tzRM4pXmJmuD4ix7EYpZK2fzIGxIk6yxPccfCLbYaF?=
 =?us-ascii?q?7xL5WOqMIzp0nHFodKylixqs8UWtxPfwWteo3FtJtCZJjNbBu3ML2hfO8MaIUO?=
 =?us-ascii?q?F98V2k2TuX1wDc9OVEIUcsmKrfKp4h2aIwloEJvUTMGC/2hV/6jKiMdkUr4uSo?=
 =?us-ascii?q?6uLnbav6ppKEKYN4lgLzPr4zlsCiAuk0KBYCUmab9OimybHu/1X1QLBQgf03lq?=
 =?us-ascii?q?nZvoraJcMepqOhGg9azIMj6wumAzi7ztsYg2cILFZcdB2ciIjpJlfOL+zmAvek?=
 =?us-ascii?q?hFislDZrx/PYMbH7DZTNM2DOkLPgfbZ79k5dxxA/zdFZ55JIFL4BJOj/VVP2tN?=
 =?us-ascii?q?zdFRI5NQu0w+DoCNV7y4MSQ2WPArWWMK/Kq1+H+vovI/WQZI8SoDv9L/kl5/3w?=
 =?us-ascii?q?gnMjll4dYLKk3Z8WaHC+A/RnLF+VYXvqgtcdD2gKuhAyQ/DtiF2HAnZuYW2vVf?=
 =?us-ascii?q?c8+i0jE9DhSoPCXZy2xrqG2ii9A9tRfG8BD1mNFXLhccKDQ+sNbySJZdZslyFB?=
 =?us-ascii?q?WbW/Roty6Be1qQWvzrNmKvbTqDQVsI+m2NVr6umWjxwr6DFvE+yb1GeCSXwymX?=
 =?us-ascii?q?kHECQr1qJyqlAo11GYzKJjiOZZH9EA2/QcewM3JZPNh89zEdz7QQLMYMyKSUfu?=
 =?us-ascii?q?FtynAhk2XNY4ycRIeVsrSPu4iRWW8DCnDPc2iqaZTMg76KXB0FDyLsFxjXHc2/?=
 =?us-ascii?q?9y3BEdXsJTODj+1eZE/A/JCtuMyh3Bmg=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A3AADCERJcmBHrdtBjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUwUBAQsBgTCBOYEpjHSMBQaBNYkhjjOBdhEYCwmHQSI2Bw0BAwEBAQEBAQI?=
 =?us-ascii?q?BEwEBAQEBCAsLBhsOIwyCNgUCAxoBBoJbAQEBAQIBAQIkEwwKKQMCAQECBgEBC?=
 =?us-ascii?q?g4EBgkTBwMIAwELLgwOBhMFgxwBgXMFCAEDAQqnZzOELQGGAgWMPBd4gQeBEYM?=
 =?us-ascii?q?Sgx4CgTuGAQKPR0eRAQmHDYpBCxiRSoMEiyCLJYFNCoF9MxoIKAiDJ4IkAxcSg?=
 =?us-ascii?q?ziKVHGBBAOKBVWBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0A3AADCERJcmBHrdtBjHAEBAQQBAQcEAQGBUwUBAQsBgTC?=
 =?us-ascii?q?BOYEpjHSMBQaBNYkhjjOBdhEYCwmHQSI2Bw0BAwEBAQEBAQIBEwEBAQEBCAsLB?=
 =?us-ascii?q?hsOIwyCNgUCAxoBBoJbAQEBAQIBAQIkEwwKKQMCAQECBgEBCg4EBgkTBwMIAwE?=
 =?us-ascii?q?LLgwOBhMFgxwBgXMFCAEDAQqnZzOELQGGAgWMPBd4gQeBEYMSgx4CgTuGAQKPR?=
 =?us-ascii?q?0eRAQmHDYpBCxiRSoMEiyCLJYFNCoF9MxoIKAiDJ4IkAxcSgziKVHGBBAOKBVW?=
 =?us-ascii?q?BdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,347,1539673200"; 
   d="scan'208";a="56164580"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 13 Dec 2018 00:02:04 -0800
Received: from localhost ([::1]:51065 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gXLwa-0006Uf-7n
	for like.xu@linux.intel.com; Thu, 13 Dec 2018 03:02:04 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:39884)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <groug@kaod.org>) id 1gXLtt-00058a-8a
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 02:59:18 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <groug@kaod.org>) id 1gXLtn-0003PP-Fi
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 02:59:15 -0500
Received: from 10.mo3.mail-out.ovh.net ([87.98.165.232]:53873)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <groug@kaod.org>) id 1gXLtn-0003Mt-4t
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 02:59:11 -0500
Received: from player735.ha.ovh.net (unknown [10.109.143.209])
	by mo3.mail-out.ovh.net (Postfix) with ESMTP id 114FF1EDA8F
	for <qemu-devel@nongnu.org>; Thu, 13 Dec 2018 08:59:09 +0100 (CET)
Received: from kaod.org (lns-bzn-46-82-253-208-248.adsl.proxad.net
	[82.253.208.248]) (Authenticated sender: groug@kaod.org)
	by player735.ha.ovh.net (Postfix) with ESMTPSA id D98D1D13C43;
	Thu, 13 Dec 2018 07:59:02 +0000 (UTC)
Date: Thu, 13 Dec 2018 08:59:01 +0100
From: Greg Kurz <groug@kaod.org>
To: Alexey Kardashevskiy <aik@ozlabs.ru>
Message-ID: <20181213085901.3934fbee@bahia.lab.toulouse-stg.fr.ibm.com>
In-Reply-To: <8492b43c-931c-19d5-38b6-2b8e0dee2e9a@ozlabs.ru>
References: <20181211054926.56717-1-aik@ozlabs.ru>
	<20181211054926.56717-3-aik@ozlabs.ru>
	<20181211173520.785736ae@bahia.lab.toulouse-stg.fr.ibm.com>
	<a24cf2a7-2e96-318f-8ac1-1ab71f331303@ozlabs.ru>
	<20181212104622.5095be55@bahia.lab.toulouse-stg.fr.ibm.com>
	<8492b43c-931c-19d5-38b6-2b8e0dee2e9a@ozlabs.ru>
X-Mailer: Claws Mail 3.16.0 (GTK+ 2.24.32; x86_64-redhat-linux-gnu)
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
X-Ovh-Tracer-Id: 1246371197251656181
X-VR-SPAMSTATE: OK
X-VR-SPAMSCORE: -100
X-VR-SPAMCAUSE: gggruggvucftvghtrhhoucdtuddrgedtkedrudehuddgudduiecutefuodetggdotefrodftvfcurfhrohhfihhlvgemucfqggfjpdevjffgvefmvefgnecuuegrihhlohhuthemucehtddtnecusecvtfgvtghiphhivghnthhsucdlqddutddtmd
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 87.98.165.232
Subject: Re: [Qemu-devel] [Qemu-ppc] [PATCH qemu 2/3] ppc/spapr: Receive and
 store device tree blob from SLOF
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: qemu-ppc@nongnu.org, qemu-devel@nongnu.org,
	David Gibson <david@gibson.dropbear.id.au>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Thu, 13 Dec 2018 13:53:54 +1100
Alexey Kardashevskiy <aik@ozlabs.ru> wrote:

> On 12/12/2018 20:46, Greg Kurz wrote:
> > On Wed, 12 Dec 2018 10:57:20 +1100
> > Alexey Kardashevskiy <aik@ozlabs.ru> wrote:
> >   
> >> On 12/12/2018 03:35, Greg Kurz wrote:  
> >>> On Tue, 11 Dec 2018 16:49:25 +1100
> >>> Alexey Kardashevskiy <aik@ozlabs.ru> wrote:
> >>>     
> >>>> SLOF receives a device tree and updates it with various properties
> >>>> before switching to the guest kernel and QEMU is not aware of any changes
> >>>> made by SLOF. Since there is no real RTAS (QEMU implements it), it makes
> >>>> sense to pass the SLOF final device tree to QEMU to let it implement
> >>>> RTAS related tasks better, such as PCI host bus adapter hotplug.
> >>>>
> >>>> Specifially, now QEMU can find out the actual XICS phandle (for PHB
> >>>> hotplug) and the RTAS linux,rtas-entry/base properties (for firmware
> >>>> assisted NMI - FWNMI).
> >>>>
> >>>> This stores the initial DT blob in the sPAPR machine and replaces it
> >>>> in the KVMPPC_H_UPDATE_DT (new private hypercall) handler.
> >>>>
> >>>> This adds an @update_dt_enabled machine property to allow backward
> >>>> migration.
> >>>>
> >>>> SLOF already has a hypercall since
> >>>> https://github.com/aik/SLOF/commit/e6fc84652c9c0073f9183
> >>>>
> >>>> Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
> >>>> ---
> >>>>  include/hw/ppc/spapr.h |  7 ++++++-
> >>>>  hw/ppc/spapr.c         | 31 ++++++++++++++++++++++++++++++-
> >>>>  hw/ppc/spapr_hcall.c   | 42 ++++++++++++++++++++++++++++++++++++++++++
> >>>>  hw/ppc/trace-events    |  3 +++
> >>>>  4 files changed, 81 insertions(+), 2 deletions(-)
> >>>>
> >>>> diff --git a/include/hw/ppc/spapr.h b/include/hw/ppc/spapr.h
> >>>> index 1987640..86c90df 100644
> >>>> --- a/include/hw/ppc/spapr.h
> >>>> +++ b/include/hw/ppc/spapr.h
> >>>> @@ -102,6 +102,7 @@ struct sPAPRMachineClass {
> >>>>  
> >>>>      /*< public >*/
> >>>>      bool dr_lmb_enabled;       /* enable dynamic-reconfig/hotplug of LMBs */
> >>>> +    bool update_dt_enabled;    /* enable KVMPPC_H_UPDATE_DT */
> >>>>      bool use_ohci_by_default;  /* use USB-OHCI instead of XHCI */
> >>>>      bool pre_2_10_has_unused_icps;
> >>>>      bool legacy_irq_allocation;
> >>>> @@ -138,6 +139,9 @@ struct sPAPRMachineState {
> >>>>      int vrma_adjust;
> >>>>      ssize_t rtas_size;
> >>>>      void *rtas_blob;
> >>>> +    uint32_t fdt_size;
> >>>> +    uint32_t fdt_initial_size;
> >>>> +    void *fdt_blob;
> >>>>      long kernel_size;
> >>>>      bool kernel_le;
> >>>>      uint32_t initrd_base;
> >>>> @@ -464,7 +468,8 @@ struct sPAPRMachineState {
> >>>>  #define KVMPPC_H_LOGICAL_MEMOP  (KVMPPC_HCALL_BASE + 0x1)
> >>>>  /* Client Architecture support */
> >>>>  #define KVMPPC_H_CAS            (KVMPPC_HCALL_BASE + 0x2)
> >>>> -#define KVMPPC_HCALL_MAX        KVMPPC_H_CAS
> >>>> +#define KVMPPC_H_UPDATE_DT      (KVMPPC_HCALL_BASE + 0x3)
> >>>> +#define KVMPPC_HCALL_MAX        KVMPPC_H_UPDATE_DT
> >>>>  
> >>>>  typedef struct sPAPRDeviceTreeUpdateHeader {
> >>>>      uint32_t version_id;
> >>>> diff --git a/hw/ppc/spapr.c b/hw/ppc/spapr.c
> >>>> index 8a18250..984bf32 100644
> >>>> --- a/hw/ppc/spapr.c
> >>>> +++ b/hw/ppc/spapr.c
> >>>> @@ -1654,7 +1654,10 @@ static void spapr_machine_reset(void)
> >>>>      /* Load the fdt */
> >>>>      qemu_fdt_dumpdtb(fdt, fdt_totalsize(fdt));
> >>>>      cpu_physical_memory_write(fdt_addr, fdt, fdt_totalsize(fdt));
> >>>> -    g_free(fdt);
> >>>> +    g_free(spapr->fdt_blob);
> >>>> +    spapr->fdt_size = fdt_totalsize(fdt);
> >>>> +    spapr->fdt_initial_size = spapr->fdt_size;
> >>>> +    spapr->fdt_blob = fdt;
> >>>>  
> >>>>      /* Set up the entry state */
> >>>>      spapr_cpu_set_entry_state(first_ppc_cpu, SPAPR_ENTRY_POINT, fdt_addr);
> >>>> @@ -1908,6 +1911,27 @@ static const VMStateDescription vmstate_spapr_irq_map = {
> >>>>      },
> >>>>  };
> >>>>  
> >>>> +static bool spapr_dtb_needed(void *opaque)
> >>>> +{
> >>>> +    sPAPRMachineClass *smc = SPAPR_MACHINE_GET_CLASS(opaque);
> >>>> +
> >>>> +    return smc->update_dt_enabled;
> >>>> +}
> >>>> +
> >>>> +static const VMStateDescription vmstate_spapr_dtb = {
> >>>> +    .name = "spapr_dtb",
> >>>> +    .version_id = 1,
> >>>> +    .minimum_version_id = 1,
> >>>> +    .needed = spapr_dtb_needed,
> >>>> +    .fields = (VMStateField[]) {
> >>>> +        VMSTATE_UINT32(fdt_initial_size, sPAPRMachineState),
> >>>> +        VMSTATE_UINT32(fdt_size, sPAPRMachineState),
> >>>> +        VMSTATE_VBUFFER_ALLOC_UINT32(fdt_blob, sPAPRMachineState, 0, NULL,
> >>>> +                                     fdt_size),    
> >>>
> >>> Unless I'm missing something, it looks like the initial spapr->fdt_blob in the
> >>> destination might be leaked...    
> >>
> >> ah true.
> >>
> >>  
> >>>     
> >>>> +        VMSTATE_END_OF_LIST()
> >>>> +    },
> >>>> +};
> >>>> +
> >>>>  static const VMStateDescription vmstate_spapr = {
> >>>>      .name = "spapr",
> >>>>      .version_id = 3,
> >>>> @@ -1937,6 +1961,7 @@ static const VMStateDescription vmstate_spapr = {
> >>>>          &vmstate_spapr_cap_ibs,
> >>>>          &vmstate_spapr_irq_map,
> >>>>          &vmstate_spapr_cap_nested_kvm_hv,
> >>>> +        &vmstate_spapr_dtb,
> >>>>          NULL
> >>>>      }
> >>>>  };
> >>>> @@ -3871,6 +3896,7 @@ static void spapr_machine_class_init(ObjectClass *oc, void *data)
> >>>>      hc->unplug = spapr_machine_device_unplug;
> >>>>  
> >>>>      smc->dr_lmb_enabled = true;
> >>>> +    smc->update_dt_enabled = true;
> >>>>      mc->default_cpu_type = POWERPC_CPU_TYPE_NAME("power8_v2.0");
> >>>>      mc->has_hotpluggable_cpus = true;
> >>>>      smc->resize_hpt_default = SPAPR_RESIZE_HPT_ENABLED;
> >>>> @@ -3981,8 +4007,11 @@ static void spapr_machine_3_1_instance_options(MachineState *machine)
> >>>>  
> >>>>  static void spapr_machine_3_1_class_options(MachineClass *mc)
> >>>>  {
> >>>> +    sPAPRMachineClass *smc = SPAPR_MACHINE_CLASS(mc);
> >>>> +
> >>>>      spapr_machine_4_0_class_options(mc);
> >>>>      SET_MACHINE_COMPAT(mc, SPAPR_COMPAT_3_1);
> >>>> +    smc->update_dt_enabled = false;
> >>>>  }
> >>>>  
> >>>>  DEFINE_SPAPR_MACHINE(3_1, "3.1", false);
> >>>> diff --git a/hw/ppc/spapr_hcall.c b/hw/ppc/spapr_hcall.c
> >>>> index ae913d0..dfd3cf3 100644
> >>>> --- a/hw/ppc/spapr_hcall.c
> >>>> +++ b/hw/ppc/spapr_hcall.c
> >>>> @@ -1717,6 +1717,46 @@ static target_ulong h_get_cpu_characteristics(PowerPCCPU *cpu,
> >>>>  
> >>>>      args[0] = characteristics;
> >>>>      args[1] = behaviour;
> >>>> +    return H_SUCCESS;
> >>>> +}
> >>>> +
> >>>> +static target_ulong h_update_dt(PowerPCCPU *cpu, sPAPRMachineState *spapr,
> >>>> +                                target_ulong opcode, target_ulong *args)
> >>>> +{
> >>>> +    target_ulong dt = ppc64_phys_to_real(args[0]);
> >>>> +    struct fdt_header hdr = { 0 };
> >>>> +    unsigned cb;
> >>>> +    sPAPRMachineClass *smc = SPAPR_MACHINE_GET_CLASS(spapr);
> >>>> +    void *fdt;
> >>>> +
> >>>> +    cpu_physical_memory_read(dt, &hdr, sizeof(hdr));
> >>>> +    cb = fdt32_to_cpu(hdr.totalsize);
> >>>> +
> >>>> +    if (!smc->update_dt_enabled) {
> >>>> +        return H_SUCCESS;
> >>>> +    }
> >>>> +
> >>>> +    /* Check that the fdt did not grow out of proportion */
> >>>> +    if (cb > spapr->fdt_initial_size * 2) {    
> >>>
> >>> Ok, so this caps the new fdt tree to 2 megs, which seems reasonable.    
> >>
> >> Why _megs_? It is 2 _times_. We do not expect big growth, it should be  
> > 
> > The initial or cas fdt is capped to 1 meg (FDT_MAX_SIZE), isn't it ? So
> > this check would allow the new fdt to be theoretically up to 2 meg.  
> 
> 
> Sure but I do not set the limit here, why would you bring it up here? Or
> the idea was to do "if(cb > FDT_MAX_SIZE)return H_PARAMETER"? It is
> probably a good idea, David? Thanks,
> 

David already explained elsewhere he preferred checking that the fdt
hasn't grown too much, to checking against a fixed size. 

My point was more about the x2 growth factor which looks quite big
compared to the 10% you're mentioning. But since this is just a
single allocation and the size is _small_, I guest it's ok.

> 
> 
> 
> 
> >   
> >> phandles and some slof nodes (packages, options,...), pretty much. Right
> >> now it is 10% bigger than the initial fdt.
> >>  
> > 
> > Expecting up to 100% may seem overkill then but even with a big initial/cas
> > fdt, it would _only_ be 2 megs, which is a reasonable limit for a guest
> > triggered allocation I guess.
> >   
> >>  
> >>> BTW, why 2 and not some other growth factor ?
> >>>     
> >>>> +        trace_spapr_update_dt_failed_size(spapr->fdt_initial_size, cb,
> >>>> +            fdt32_to_cpu(hdr.magic));
> >>>> +        return H_PARAMETER;
> >>>> +    }
> >>>> +
> >>>> +    fdt = g_malloc0(cb);
> >>>> +    cpu_physical_memory_read(dt, fdt, cb);
> >>>> +
> >>>> +    /* Check the fdt consostency */
> >>>> +    if (fdt_check_full(fdt, cb)) {
> >>>> +        trace_spapr_update_dt_failed_check(spapr->fdt_initial_size, cb,
> >>>> +            fdt32_to_cpu(hdr.magic));
> >>>> +        return H_PARAMETER;
> >>>> +    }
> >>>> +
> >>>> +    g_free(spapr->fdt_blob);
> >>>> +    spapr->fdt_size = cb;
> >>>> +    spapr->fdt_blob = fdt;
> >>>> +    trace_spapr_update_dt(cb);
> >>>>  
> >>>>      return H_SUCCESS;
> >>>>  }
> >>>> @@ -1822,6 +1862,8 @@ static void hypercall_register_types(void)
> >>>>  
> >>>>      /* ibm,client-architecture-support support */
> >>>>      spapr_register_hypercall(KVMPPC_H_CAS, h_client_architecture_support);
> >>>> +
> >>>> +    spapr_register_hypercall(KVMPPC_H_UPDATE_DT, h_update_dt);
> >>>>  }
> >>>>  
> >>>>  type_init(hypercall_register_types)
> >>>> diff --git a/hw/ppc/trace-events b/hw/ppc/trace-events
> >>>> index dc5e65a..0af155e 100644
> >>>> --- a/hw/ppc/trace-events
> >>>> +++ b/hw/ppc/trace-events
> >>>> @@ -22,6 +22,9 @@ spapr_cas_pvr_try(uint32_t pvr) "0x%x"
> >>>>  spapr_cas_pvr(uint32_t cur_pvr, bool explicit_match, uint32_t new_pvr) "current=0x%x, explicit_match=%u, new=0x%x"
> >>>>  spapr_h_resize_hpt_prepare(uint64_t flags, uint64_t shift) "flags=0x%"PRIx64", shift=%"PRIu64
> >>>>  spapr_h_resize_hpt_commit(uint64_t flags, uint64_t shift) "flags=0x%"PRIx64", shift=%"PRIu64
> >>>> +spapr_update_dt(unsigned cb) "New blob %u bytes"
> >>>> +spapr_update_dt_failed_size(unsigned cbold, unsigned cbnew, unsigned magic) "Old blob %u bytes, new blob %u bytes, magic 0x%x"
> >>>> +spapr_update_dt_failed_check(unsigned cbold, unsigned cbnew, unsigned magic) "Old blob %u bytes, new blob %u bytes, magic 0x%x"
> >>>>  
> >>>>  # hw/ppc/spapr_iommu.c
> >>>>  spapr_iommu_put(uint64_t liobn, uint64_t ioba, uint64_t tce, uint64_t ret) "liobn=0x%"PRIx64" ioba=0x%"PRIx64" tce=0x%"PRIx64" ret=%"PRId64    
> >>>     
> >>  
> >   
> 


