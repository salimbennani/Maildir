Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  12 Dec 2018 19:42:30 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga008.fm.intel.com (fmsmga008.fm.intel.com [10.253.24.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 6DE3D5803DC
	for <like.xu@linux.intel.com>; Wed, 12 Dec 2018 00:15:03 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by fmsmga008-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 12 Dec 2018 00:15:03 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AaepEEByC+kkTQhDXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0uoSL/ad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7S60/Vza/4KdxUBLmiD?=
 =?us-ascii?q?kJOTA6/m/QiMNwgr9VoAqjqhJ9zIPYfY+YOOZgcaPGZt4WWXZNU9xNWyFbHo+w?=
 =?us-ascii?q?c40CBPcBM+ZCqIn9okMDohi+BQa2AuPvxSJDiX333aYn1OkgEQDG0BYhHt4UsX?=
 =?us-ascii?q?XUrM/6NKEdUe2uyKnIzDPDb+5Z2Dvn6YjIdAwhru+IXb5qbcXRzkwvGhrDg16N?=
 =?us-ascii?q?qoLlJyuY2voRv2WY9eZsSP+jhm09pw1vrDWixt0ghpTLi44N11zJ+yp0zJwoKd?=
 =?us-ascii?q?C2R0N3e8OoHZVRui2AKod6Xt8uTmd1sygg0LIGo4S0fC0SxZQn2RHfb/uHfpCM?=
 =?us-ascii?q?4hLiT+aRPSx4iGhqeLK5mha+60+gyvfzVsWs0VZKqDRKksXUu3wTyxDe6dKLRu?=
 =?us-ascii?q?Zg8kqiwzqDyQ7e5+FeLUwpl6fXM5shzaQxlpoXv0TDBCj2mEDuga+PaEok//Wo?=
 =?us-ascii?q?5/36bbr4uJ+TKYt0hhjlPaQph8y/B/g3PRYVX2Sc/eS81b7j8lPjTLRFk/07iq?=
 =?us-ascii?q?3ZsJHcJcQGqa+1GQ5V0oA/6xmhCzeqysgXnX4CLF9efhKHiI7pO17IIPDlF/u/?=
 =?us-ascii?q?hE6skDhzy/DcIrLhGonNLmTEkLr5ebZ96k1cxxQpwdFQ+pJZEbUBIPP1Wk/su9?=
 =?us-ascii?q?3UFB45Mwqow+n5DNVxzJ8RWWWKAvzRDaXJrFXd5v4zO/LeI8gRuS3hML4j4Pjh?=
 =?us-ascii?q?i2J/nkUSOqyg3J8SYXb/Gex6IkKfej31j9IcVGsHoAc6H9Hsk0CIBDtaZnKuWP?=
 =?us-ascii?q?Al6zQmTY6rE4rHA5qgmaGMxzuTGJpQaWZbTFeWHiDzao+GVvwQPT+UOdJriTce?=
 =?us-ascii?q?VLKsGLMmgAGvvQj11rNhIfDT/CJeuIji3/B64uTSkVc58jkwR8iU1SePCX51mm?=
 =?us-ascii?q?cJTjot9KF5vUF5jFyE1OwwmOBVG9VV5/phSAo2NZfAied9DpS6QgjGeMWITleO?=
 =?us-ascii?q?WNiqATgtCNk2xptGe09yBs2+hzjZ0iaqCqNTnLuOQNQl7+TXmWrxLsBy43LH0r?=
 =?us-ascii?q?QxyVggXsZLc2ahg/1R7Q/WUrzJmkOW35erPfAN3WjfsnWDxGyBlEVZVhNgF6TD?=
 =?us-ascii?q?QX0bIEDRqIKqtQv5U7ayBOF/YUN6wsmYJ/4SZw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BVAADTwhBcmBHrdtBkHgEGBwaBUQkLA?=
 =?us-ascii?q?YEwglASjHOLMymBPwGXd4FzFBgUhzgiNAkNAQMBAQEBAQECARMBAQEBAQgLCwY?=
 =?us-ascii?q?bDi+CNgUCAxgJglwDAwECJB8KKQMDAQIGAQFICAMBUwcSBYMcggIBBKZQM4owh?=
 =?us-ascii?q?32EP3qBHIERMwGNOgKQQJBHBwINkUgYX5BlLIh6kBOBRoIOcIM8giQDFxKOGDQ?=
 =?us-ascii?q?xAQGBBYswgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0BVAADTwhBcmBHrdtBkHgEGBwaBUQkLAYEwglASjHOLMym?=
 =?us-ascii?q?BPwGXd4FzFBgUhzgiNAkNAQMBAQEBAQECARMBAQEBAQgLCwYbDi+CNgUCAxgJg?=
 =?us-ascii?q?lwDAwECJB8KKQMDAQIGAQFICAMBUwcSBYMcggIBBKZQM4owh32EP3qBHIERMwG?=
 =?us-ascii?q?NOgKQQJBHBwINkUgYX5BlLIh6kBOBRoIOcIM8giQDFxKOGDQxAQGBBYswgXcBA?=
 =?us-ascii?q?Q?=
X-IronPort-AV: E=Sophos;i="5.56,343,1539673200"; 
   d="scan'208";a="56553252"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 12 Dec 2018 00:15:02 -0800
Received: from localhost ([::1]:43064 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gWzfZ-0001xD-Rj
	for like.xu@linux.intel.com; Wed, 12 Dec 2018 03:15:01 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:41060)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <yi.z.zhang@linux.intel.com>) id 1gWzdO-0000Iv-QV
	for qemu-devel@nongnu.org; Wed, 12 Dec 2018 03:12:47 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <yi.z.zhang@linux.intel.com>) id 1gWzdL-0008Cs-Mn
	for qemu-devel@nongnu.org; Wed, 12 Dec 2018 03:12:46 -0500
Received: from mga07.intel.com ([134.134.136.100]:54434)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <yi.z.zhang@linux.intel.com>)
	id 1gWzdL-0008Bn-Dr
	for qemu-devel@nongnu.org; Wed, 12 Dec 2018 03:12:43 -0500
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from fmsmga006.fm.intel.com ([10.253.24.20])
	by orsmga105.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
	12 Dec 2018 00:12:42 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,343,1539673200"; d="scan'208";a="301478650"
Received: from linux.intel.com ([10.54.29.200])
	by fmsmga006.fm.intel.com with ESMTP; 12 Dec 2018 00:12:41 -0800
Received: from dazhang1-ssd.sh.intel.com (unknown [10.239.48.128])
	by linux.intel.com (Postfix) with ESMTP id 926A558079D;
	Wed, 12 Dec 2018 00:12:39 -0800 (PST)
From: Zhang Yi <yi.z.zhang@linux.intel.com>
To: xiaoguangrong.eric@gmail.com, dan.j.williams@intel.com,
	stefanha@redhat.com, pbonzini@redhat.com, pagupta@redhat.com,
	yu.c.zhang@linux.intel.com
Date: Wed, 12 Dec 2018 16:12:33 +0800
Message-Id: <62a8796330b86f9f6571e48755d718db11855a6b.1544598069.git.yi.z.zhang@linux.intel.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <cover.1544598069.git.yi.z.zhang@linux.intel.com>
References: <cover.1544598069.git.yi.z.zhang@linux.intel.com>
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 134.134.136.100
Subject: [Qemu-devel] [PATCH V6 2/6] util/mmap-alloc: switch qemu_ram_mmap()
 to 'flags' parameter
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: imammedo@redhat.com, Zhang Yi <yi.z.zhang@linux.intel.com>,
	qemu-devel@nongnu.org, ehabkost@redhat.com, mst@redhat.com
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

As more flag parameters besides the existing 'shared' are going to be
added to qemu_ram_mmap(), let's switch 'shared' to a 'flags' parameter
in advance, so as to ease the further additions.

Signed-off-by: Haozhong Zhang <haozhong.zhang@intel.com>
Signed-off-by: Zhang Yi <yi.z.zhang@linux.intel.com>
---
 exec.c                    |  7 ++++---
 include/qemu/mmap-alloc.h | 19 ++++++++++++++++++-
 util/mmap-alloc.c         |  8 +++++---
 util/oslib-posix.c        |  8 +++++++-
 4 files changed, 34 insertions(+), 8 deletions(-)

diff --git a/exec.c b/exec.c
index bb6170d..e92a7da 100644
--- a/exec.c
+++ b/exec.c
@@ -1810,6 +1810,7 @@ static void *file_ram_alloc(RAMBlock *block,
                             ram_addr_t memory,
                             int fd,
                             bool truncate,
+                            uint32_t flags,
                             Error **errp)
 {
     void *area;
@@ -1859,8 +1860,7 @@ static void *file_ram_alloc(RAMBlock *block,
         perror("ftruncate");
     }
 
-    area = qemu_ram_mmap(fd, memory, block->mr->align,
-                         block->flags & RAM_SHARED);
+    area = qemu_ram_mmap(fd, memory, block->mr->align, flags);
     if (area == MAP_FAILED) {
         error_setg_errno(errp, errno,
                          "unable to map backing store for guest RAM");
@@ -2279,7 +2279,8 @@ RAMBlock *qemu_ram_alloc_from_fd(ram_addr_t size, MemoryRegion *mr,
     new_block->used_length = size;
     new_block->max_length = size;
     new_block->flags = ram_flags;
-    new_block->host = file_ram_alloc(new_block, size, fd, !file_size, errp);
+    new_block->host = file_ram_alloc(new_block, size, fd, !file_size,
+            ram_flags, errp);
     if (!new_block->host) {
         g_free(new_block);
         return NULL;
diff --git a/include/qemu/mmap-alloc.h b/include/qemu/mmap-alloc.h
index 50385e3..6fe6ed4 100644
--- a/include/qemu/mmap-alloc.h
+++ b/include/qemu/mmap-alloc.h
@@ -7,7 +7,24 @@ size_t qemu_fd_getpagesize(int fd);
 
 size_t qemu_mempath_getpagesize(const char *mem_path);
 
-void *qemu_ram_mmap(int fd, size_t size, size_t align, bool shared);
+/**
+ * qemu_ram_mmap: mmap the specified file or device.
+ *
+ * Parameters:
+ *  @fd: the file or the device to mmap
+ *  @size: the number of bytes to be mmaped
+ *  @align: if not zero, specify the alignment of the starting mapping address;
+ *          otherwise, the alignment in use will be determined by QEMU.
+ *  @flags: specifies additional properties of the mapping, which can be one or
+ *          bit-or of following values
+ *          - RAM_SHARED: mmap with MAP_SHARED flag
+ *          Other bits are ignored.
+ *
+ * Return:
+ *  On success, return a pointer to the mapped area.
+ *  On failure, return MAP_FAILED.
+ */
+void *qemu_ram_mmap(int fd, size_t size, size_t align, uint32_t flags);
 
 void qemu_ram_munmap(void *ptr, size_t size);
 
diff --git a/util/mmap-alloc.c b/util/mmap-alloc.c
index fd329ec..8f0a740 100644
--- a/util/mmap-alloc.c
+++ b/util/mmap-alloc.c
@@ -13,6 +13,7 @@
 #include "qemu/osdep.h"
 #include "qemu/mmap-alloc.h"
 #include "qemu/host-utils.h"
+#include "exec/memory.h"
 
 #define HUGETLBFS_MAGIC       0x958458f6
 
@@ -75,7 +76,7 @@ size_t qemu_mempath_getpagesize(const char *mem_path)
     return getpagesize();
 }
 
-void *qemu_ram_mmap(int fd, size_t size, size_t align, bool shared)
+void *qemu_ram_mmap(int fd, size_t size, size_t align, uint32_t flags)
 {
     /*
      * Note: this always allocates at least one extra page of virtual address
@@ -92,11 +93,12 @@ void *qemu_ram_mmap(int fd, size_t size, size_t align, bool shared)
      * anonymous memory is OK.
      */
     int anonfd = fd == -1 || qemu_fd_getpagesize(fd) == getpagesize() ? -1 : fd;
-    int flags = anonfd == -1 ? MAP_ANONYMOUS : MAP_NORESERVE;
-    void *ptr = mmap(0, total, PROT_NONE, flags | MAP_PRIVATE, anonfd, 0);
+    int mmap_flags = anonfd == -1 ? MAP_ANONYMOUS : MAP_NORESERVE;
+    void *ptr = mmap(0, total, PROT_NONE, mmap_flags | MAP_PRIVATE, anonfd, 0);
 #else
     void *ptr = mmap(0, total, PROT_NONE, MAP_ANONYMOUS | MAP_PRIVATE, -1, 0);
 #endif
+    bool shared = flags & RAM_SHARED;
     size_t offset;
     void *ptr1;
 
diff --git a/util/oslib-posix.c b/util/oslib-posix.c
index fbd0dc8..121c31f 100644
--- a/util/oslib-posix.c
+++ b/util/oslib-posix.c
@@ -203,7 +203,13 @@ void *qemu_memalign(size_t alignment, size_t size)
 void *qemu_anon_ram_alloc(size_t size, uint64_t *alignment, bool shared)
 {
     size_t align = QEMU_VMALLOC_ALIGN;
-    void *ptr = qemu_ram_mmap(-1, size, align, shared);
+    uint32_t flags = 0;
+    void *ptr;
+
+    if (shared) {
+        flags = MAP_SHARED;
+    }
+    ptr = qemu_ram_mmap(-1, size, align, flags);
 
     if (ptr == MAP_FAILED) {
         return NULL;
-- 
2.7.4


