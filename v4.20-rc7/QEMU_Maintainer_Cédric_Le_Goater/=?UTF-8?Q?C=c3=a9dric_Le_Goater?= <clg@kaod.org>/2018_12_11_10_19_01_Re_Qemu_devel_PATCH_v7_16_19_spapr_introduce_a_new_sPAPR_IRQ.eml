Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 11 Dec 2018 19:48:59 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from FMSMGA003.fm.intel.com (fmsmga003.fm.intel.com [10.253.24.29])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 5B84558028E
	for <like.xu@linux.intel.com>; Tue, 11 Dec 2018 02:19:37 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by FMSMGA003-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 11 Dec 2018 02:19:37 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3Ae+4anheuMS51yX7GZJe3JVQOlGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxcW8bB7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTzJPAo28?=
 =?us-ascii?q?YYUMAeQOM+lXoIvhqFUBsBW+HQuhCuHgxzNViHL6wbM10/86HAHaxQwtBc4CvG?=
 =?us-ascii?q?jaodj1MqoZTOC7zLPPzTXGd/5bxy3655XSchAgvf6DRbR+ftTJxkcuEAPKlEmQ?=
 =?us-ascii?q?ppL/PziI0ekCr2yb7+V7WOKskWEnrBx+riKoxsc2hYnEn4QYwU3H+yVh2Is5O8?=
 =?us-ascii?q?G0RU1hbdK5DZddtDuWO5V4T84iWW1kpSQ3xqUCtJKnZiQHy5AqywTCZ/GDcoWE?=
 =?us-ascii?q?+A/vWPuNLTp+mXlrYqiwhwyo/kil0uD8Vte70FJNriddltnMt2sN1wDI6sSdRf?=
 =?us-ascii?q?t9+Fqh1SyI1wDJ5eFIOUE0lazFJJ492rM8iIYfvEfZEiPrhUn7j7Waelsq9+Wo?=
 =?us-ascii?q?8ejrf7frqoeZN4BuiwH+Nqoumta4AeQ9KgUORnaU+eGh1LH64EL2XqtKgeMykq?=
 =?us-ascii?q?XAq5/aItkbpqilDABLyYYv7BK/Dzal0NsGh3UGI09FdQqDj4joPVHOPf/5Ae2+?=
 =?us-ascii?q?g1SqjDdk2fTGMqf9DZXKK3jOi7HhfbF7605Tzgoz0MpT55VOCrEOOP7zQFP+tM?=
 =?us-ascii?q?TEDh8lNAy52+LnCNR+1owAQ26ODbKZPbjWsV+J4OIvPuaNaJUUuDb7N/gq+fru?=
 =?us-ascii?q?gWUlll8aeKn6laYRc22yS/R6P12CMz2rhtYaDXxMuA04Q+r3zlqYXnlWbne2Wq?=
 =?us-ascii?q?s6oTYjFIOhC5yEX42onfmN0Tm2Gs5rYHtbAAWJGHbsa4LWQvoJdWeeL9Fslnke?=
 =?us-ascii?q?WKG8RpQ9/RepsgD81vxgNOWD4TASt5/oyI1o4fbOnwo57z1+Apeh1DShRn91ki?=
 =?us-ascii?q?snRjUt26Y39UB01FaP+ad5iedfE5pf/fRRWAozL9jdw6pzFoahdBjGe4KiyVq8?=
 =?us-ascii?q?Q96RJTwGYdU439IUKxJ2H9qKjRnE02ytGbBDxO/DP4A97q+Jhyu5HM160XuTkf?=
 =?us-ascii?q?B511Q=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AYAAABjg9cmBHrdtBkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgTCCYowUX4sxgWAtfJZWFIFiERgUhECDOSI0CQ0BAwEBAQEBAQI?=
 =?us-ascii?q?BEwEBAQEBCAsLBhsOL4I2BQIDGgEGglsBAQEBAgEBAiQfCikDAgEBAgYBAQoYF?=
 =?us-ascii?q?QcHAwgDATkaBg0GAgEBAYMcgXoIAQMBpiczhUCDYIENjDoRBoF/gREngjY1hDw?=
 =?us-ascii?q?OIBc/hRwCoHcJkUoGGIFcj2OHeYIvjwuBRoIOTTAIgyeCJxcSjgxxgQQDiBdWg?=
 =?us-ascii?q?XcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AYAAABjg9cmBHrdtBkHAEBAQQBAQcEAQGBUQcBAQsBgTC?=
 =?us-ascii?q?CYowUX4sxgWAtfJZWFIFiERgUhECDOSI0CQ0BAwEBAQEBAQIBEwEBAQEBCAsLB?=
 =?us-ascii?q?hsOL4I2BQIDGgEGglsBAQEBAgEBAiQfCikDAgEBAgYBAQoYFQcHAwgDATkaBg0?=
 =?us-ascii?q?GAgEBAYMcgXoIAQMBpiczhUCDYIENjDoRBoF/gREngjY1hDwOIBc/hRwCoHcJk?=
 =?us-ascii?q?UoGGIFcj2OHeYIvjwuBRoIOTTAIgyeCJxcSjgxxgQQDiBdWgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,342,1539673200"; 
   d="scan'208";a="141619276"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 11 Dec 2018 02:19:36 -0800
Received: from localhost ([::1]:37158 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gWf8Z-0002er-Gp
	for like.xu@linux.intel.com; Tue, 11 Dec 2018 05:19:35 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:48020)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <clg@kaod.org>) id 1gWf8K-0002eD-Ds
	for qemu-devel@nongnu.org; Tue, 11 Dec 2018 05:19:23 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <clg@kaod.org>) id 1gWf89-0003ru-D2
	for qemu-devel@nongnu.org; Tue, 11 Dec 2018 05:19:14 -0500
Received: from 5.mo178.mail-out.ovh.net ([46.105.51.53]:33390)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <clg@kaod.org>) id 1gWf88-0003ql-Sq
	for qemu-devel@nongnu.org; Tue, 11 Dec 2018 05:19:09 -0500
Received: from player797.ha.ovh.net (unknown [10.109.146.168])
	by mo178.mail-out.ovh.net (Postfix) with ESMTP id AFF6342E72
	for <qemu-devel@nongnu.org>; Tue, 11 Dec 2018 11:19:06 +0100 (CET)
Received: from kaod.org (lfbn-1-10605-110.w90-89.abo.wanadoo.fr
	[90.89.196.110]) (Authenticated sender: postmaster@kaod.org)
	by player797.ha.ovh.net (Postfix) with ESMTPSA id E86A2D5C40E;
	Tue, 11 Dec 2018 10:19:01 +0000 (UTC)
To: David Gibson <david@gibson.dropbear.id.au>
References: <20181209194610.29727-1-clg@kaod.org>
	<20181209194610.29727-17-clg@kaod.org>
	<20181211020350.GF4261@umbus.fritz.box>
From: =?UTF-8?Q?C=c3=a9dric_Le_Goater?= <clg@kaod.org>
Message-ID: <771f030d-b69f-78e4-ac0c-9f37e3ab9c17@kaod.org>
Date: Tue, 11 Dec 2018 11:19:01 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
	Thunderbird/60.3.1
MIME-Version: 1.0
In-Reply-To: <20181211020350.GF4261@umbus.fritz.box>
Content-Type: text/plain; charset=windows-1252
Content-Language: en-US
X-Ovh-Tracer-Id: 10311554300136557425
X-VR-SPAMSTATE: OK
X-VR-SPAMSCORE: -100
X-VR-SPAMCAUSE: gggruggvucftvghtrhhoucdtuddrgedtkedrudegjedgudefucetufdoteggodetrfdotffvucfrrhhofhhilhgvmecuqfggjfdpvefjgfevmfevgfenuceurghilhhouhhtmecuhedttdenucesvcftvggtihhpihgvnhhtshculddquddttddm
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 46.105.51.53
Subject: Re: [Qemu-devel] [PATCH v7 16/19] spapr: introduce a new sPAPR IRQ
 backend supporting XIVE and XICS
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: qemu-ppc@nongnu.org, qemu-devel@nongnu.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On 12/11/18 3:03 AM, David Gibson wrote:
> On Sun, Dec 09, 2018 at 08:46:07PM +0100, C=E9dric Le Goater wrote:
>> The interrupt mode is chosen by the CAS negotiation process and
>> activated after a reset to take into account the required changes in
>> the machine. These impact the device tree layout, the interrupt
>> presenter object and the exposed MMIO regions in the case of XIVE.
>>
>> This default interrupt mode for the machine is XICS.
>>
>> Signed-off-by: C=E9dric Le Goater <clg@kaod.org>
>> ---
>>  include/hw/ppc/spapr_irq.h |   1 +
>>  hw/ppc/spapr.c             |   3 +-
>>  hw/ppc/spapr_hcall.c       |  13 ++++
>>  hw/ppc/spapr_irq.c         | 143 ++++++++++++++++++++++++++++++++++++=
+
>>  4 files changed, 159 insertions(+), 1 deletion(-)
>>
>> diff --git a/include/hw/ppc/spapr_irq.h b/include/hw/ppc/spapr_irq.h
>> index b34d5a00381b..29936498dbc8 100644
>> --- a/include/hw/ppc/spapr_irq.h
>> +++ b/include/hw/ppc/spapr_irq.h
>> @@ -51,6 +51,7 @@ typedef struct sPAPRIrq {
>>  extern sPAPRIrq spapr_irq_xics;
>>  extern sPAPRIrq spapr_irq_xics_legacy;
>>  extern sPAPRIrq spapr_irq_xive;
>> +extern sPAPRIrq spapr_irq_dual;
>> =20
>>  void spapr_irq_init(sPAPRMachineState *spapr, Error **errp);
>>  int spapr_irq_claim(sPAPRMachineState *spapr, int irq, bool lsi, Erro=
r **errp);
>> diff --git a/hw/ppc/spapr.c b/hw/ppc/spapr.c
>> index 5ef87a00f68b..fa41927d95dd 100644
>> --- a/hw/ppc/spapr.c
>> +++ b/hw/ppc/spapr.c
>> @@ -2631,7 +2631,8 @@ static void spapr_machine_init(MachineState *mac=
hine)
>>      spapr_ovec_set(spapr->ov5, OV5_DRMEM_V2);
>> =20
>>      /* advertise XIVE */
>> -    if (smc->irq->ov5 =3D=3D SPAPR_OV5_XIVE_EXPLOIT) {
>> +    if (smc->irq->ov5 =3D=3D SPAPR_OV5_XIVE_EXPLOIT ||
>> +        smc->irq->ov5 =3D=3D SPAPR_OV5_XIVE_BOTH) {
>>          spapr_ovec_set(spapr->ov5, OV5_XIVE_EXPLOIT);
>>      }
>> =20
>> diff --git a/hw/ppc/spapr_hcall.c b/hw/ppc/spapr_hcall.c
>> index ae913d070f50..186b6a65543f 100644
>> --- a/hw/ppc/spapr_hcall.c
>> +++ b/hw/ppc/spapr_hcall.c
>> @@ -1654,6 +1654,19 @@ static target_ulong h_client_architecture_suppo=
rt(PowerPCCPU *cpu,
>>              (spapr_h_cas_compose_response(spapr, args[1], args[2],
>>                                            ov5_updates) !=3D 0);
>>      }
>> +
>> +    /*
>> +     * Generate a machine reset when we have an update of the
>> +     * interrupt mode. Only required on the machine supporting both
>> +     * mode.
>> +     */
>> +    if (!spapr->cas_reboot) {
>> +        sPAPRMachineClass *smc =3D SPAPR_MACHINE_GET_CLASS(spapr);
>> +
>> +        spapr->cas_reboot =3D spapr_ovec_test(ov5_updates, OV5_XIVE_E=
XPLOIT)
>> +            && smc->irq->ov5 =3D=3D SPAPR_OV5_XIVE_BOTH;
>> +    }
>> +
>>      spapr_ovec_cleanup(ov5_updates);
>> =20
>>      if (spapr->cas_reboot) {
>> diff --git a/hw/ppc/spapr_irq.c b/hw/ppc/spapr_irq.c
>> index a8e50725397c..7c34939f774a 100644
>> --- a/hw/ppc/spapr_irq.c
>> +++ b/hw/ppc/spapr_irq.c
>> @@ -392,6 +392,149 @@ sPAPRIrq spapr_irq_xive =3D {
>>      .reset       =3D spapr_irq_reset_xive,
>>  };
>> =20
>> +/*
>> + * Dual XIVE and XICS IRQ backend.
>> + *
>> + * Both interrupt mode, XIVE and XICS, objects are created but the
>> + * machine starts in legacy interrupt mode (XICS). It can be changed
>> + * by the CAS negotiation process and, in that case, the new mode is
>> + * activated after extra machine reset.
>> + */
>> +
>> +/*
>> + * Returns the sPAPR IRQ backend negotiated by CAS. XICS is the
>> + * default.
>> + */
>> +static sPAPRIrq *spapr_irq_current(sPAPRMachineState *spapr)
>> +{
>> +    return spapr_ovec_test(spapr->ov5_cas, OV5_XIVE_EXPLOIT) ?
>> +        &spapr_irq_xive : &spapr_irq_xics;
>> +}
>> +
>> +static void spapr_irq_init_dual(sPAPRMachineState *spapr, Error **err=
p)
>> +{
>> +    MachineState *machine =3D MACHINE(spapr);
>> +    Error *local_err =3D NULL;
>> +
>> +    if (kvm_enabled() && machine_kernel_irqchip_allowed(machine)) {
>> +        error_setg(errp, "No KVM support for the 'dual' machine");
>> +        return;
>> +    }
>> +
>> +    spapr_irq_xics.init(spapr, &local_err);
>> +    if (local_err) {
>> +        error_propagate(errp, local_err);
>> +        return;
>> +    }
>> +
>> +    spapr_irq_xive.init(spapr, &local_err);
>> +    if (local_err) {
>> +        error_propagate(errp, local_err);
>> +        return;
>> +    }
>> +}
>> +
>> +static int spapr_irq_claim_dual(sPAPRMachineState *spapr, int irq, bo=
ol lsi,
>> +                                Error **errp)
>> +{
>> +    int ret;
>> +    Error *local_err =3D NULL;
>> +
>> +    ret =3D spapr_irq_xive.claim(spapr, irq, lsi, &local_err);
>> +    if (local_err) {
>> +        error_propagate(errp, local_err);
>> +        return ret;
>> +    }
>> +
>> +    ret =3D spapr_irq_xics.claim(spapr, irq, lsi, &local_err);
>> +    if (local_err) {
>> +        error_propagate(errp, local_err);
>> +    }
>> +
>> +    return ret;
>> +}
>> +
>> +static void spapr_irq_free_dual(sPAPRMachineState *spapr, int irq, in=
t num)
>> +{
>> +    spapr_irq_xive.free(spapr, irq, num);
>> +    spapr_irq_xics.free(spapr, irq, num);
>> +}
>> +
>> +static qemu_irq spapr_qirq_dual(sPAPRMachineState *spapr, int irq)
>> +{
>> +    return spapr_irq_current(spapr)->qirq(spapr, irq);
>=20
> Urgh... I don't think this is going to work.  IIRC the various devices
> (PHB, VIO, etc.)  are wired up to their qirqs at realize() time, so if
> you reboot from a XIVE guest to XICS guest (or maybe the other way
> around) the peripherals won't be able to signal irqs in the new
> scheme.

It does. The IRQ numbers are claimed in both backends.=20

This is the problem since the very beginning. For reset and migration
to work, we need to keep in sync the IRQ number space of the machine=20
and the different interrupt controllers.=20

C.=20


> I think instead we need a common set of qirqs, whose set_irq routine
> looks at whether to signal XICS or XIVE.  FOr now I think the easiest
> approach is to layer those on top of the existing XICS or XIVE
> specific qirqs.  Later we might want to remove the (input) qirqs
> entirely from the XICS and XIVE subsystems, instead having just
> explicit trigger functions.  Then spapr will always supply the qirqs
> which call into one or the other.
>=20
>> +}
>> +
>> +static void spapr_irq_print_info_dual(sPAPRMachineState *spapr, Monit=
or *mon)
>> +{
>> +    spapr_irq_current(spapr)->print_info(spapr, mon);
>> +}
>> +
>> +static void spapr_irq_dt_populate_dual(sPAPRMachineState *spapr,
>> +                                       uint32_t nr_servers, void *fdt=
,
>> +                                       uint32_t phandle)
>> +{
>> +    spapr_irq_current(spapr)->dt_populate(spapr, nr_servers, fdt, pha=
ndle);
>> +}
>> +
>> +static Object *spapr_irq_cpu_intc_create_dual(sPAPRMachineState *spap=
r,
>> +                                              Object *cpu, Error **er=
rp)
>> +{
>> +    Error *local_err =3D NULL;
>> +
>> +    spapr_irq_xive.cpu_intc_create(spapr, cpu, &local_err);
>> +    if (local_err) {
>> +        error_propagate(errp, local_err);
>> +        return NULL;
>> +    }
>> +
>> +    /* Default to XICS interrupt mode */
>> +    return spapr_irq_xics.cpu_intc_create(spapr, cpu, errp);
>> +}
>> +
>> +static int spapr_irq_post_load_dual(sPAPRMachineState *spapr, int ver=
sion_id)
>> +{
>> +    /*
>> +     * Force a reset of the XIVE backend after migration. The machine
>> +     * defaults to XICS at startup.
>> +     */
>> +    if (spapr_ovec_test(spapr->ov5_cas, OV5_XIVE_EXPLOIT)) {
>> +        spapr_irq_xive.reset(spapr, &error_fatal);
>> +    }
>> +
>> +    return spapr_irq_current(spapr)->post_load(spapr, version_id);
>> +}
>> +
>> +static void spapr_irq_reset_dual(sPAPRMachineState *spapr, Error **er=
rp)
>> +{
>> +    /*
>> +     * Reset the interrupt mode selected by CAS.
>> +     */
>> +    spapr_irq_current(spapr)->reset(spapr, errp);
>> +}
>> +
>> +/*
>> + * Define values in sync with the XIVE and XICS backend
>> + */
>> +#define SPAPR_IRQ_DUAL_NR_IRQS     0x2000
>> +#define SPAPR_IRQ_DUAL_NR_MSIS     (SPAPR_IRQ_DUAL_NR_IRQS - SPAPR_IR=
Q_MSI)
>> +
>> +sPAPRIrq spapr_irq_dual =3D {
>> +    .nr_irqs     =3D SPAPR_IRQ_DUAL_NR_IRQS,
>> +    .nr_msis     =3D SPAPR_IRQ_DUAL_NR_MSIS,
>> +    .ov5         =3D SPAPR_OV5_XIVE_BOTH,
>> +
>> +    .init        =3D spapr_irq_init_dual,
>> +    .claim       =3D spapr_irq_claim_dual,
>> +    .free        =3D spapr_irq_free_dual,
>> +    .qirq        =3D spapr_qirq_dual,
>> +    .print_info  =3D spapr_irq_print_info_dual,
>> +    .dt_populate =3D spapr_irq_dt_populate_dual,
>> +    .cpu_intc_create =3D spapr_irq_cpu_intc_create_dual,
>> +    .post_load   =3D spapr_irq_post_load_dual,
>> +    .reset       =3D spapr_irq_reset_dual,
>> +};
>> +
>>  /*
>>   * sPAPR IRQ frontend routines for devices
>>   */
>=20


