Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  15 Dec 2018 13:05:39 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 0AA7B58061F;
	Fri, 14 Dec 2018 06:30:01 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by fmsmga001-1.fm.intel.com with ESMTP; 14 Dec 2018 06:30:00 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Aa6KGaBJOaRhgKYSoJdmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgUL/r7rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZQ8hfSSJBDIO/?=
 =?us-ascii?q?YYUBAeUOMuRXoJXyqVsVtRuzBxKhBP/txzJSmnP6waM33uYnHArb3AIgBdUOsH?=
 =?us-ascii?q?HModv0LqcdT++1x7TGwjXFYPNZxy3955bSchs8pvyMUqhwftTeyUkyEQPFgUuf?=
 =?us-ascii?q?qZb7MDOPzekMvXaU7/F8VeKplWEntxt9rSSoxscpkIXGnJ8Vx0nC+C5kzog1It?=
 =?us-ascii?q?i4R1R6Yd6iCJZQtieaN4VsQsw4Xm5npjw1xaActZ68ZigKx5IqzAPcZfyfa4WE?=
 =?us-ascii?q?/A7vWeKLLTtlin9pZqiziwux/ES80OHxV8u53E5XoiZbndTArG0B2h7P5sSdV/?=
 =?us-ascii?q?dw8Vut1SyL2gzO7OxPPFo6mrDBK5E7x749jpoTvlrHHi/xgEj2kqCWeVs++uSy?=
 =?us-ascii?q?6OTofK/mppmCOI9wkA3+Nb4umsOnDeQ5NAgBQXSb9Pyi2LH/+UD1WqhGg/Monq?=
 =?us-ascii?q?XDrZzXJtgXqrS4DgJXyooj7gywDzai0NQWh3kHK1dFdQqDj4joPVHOPf/5Ae68?=
 =?us-ascii?q?g1uyijdrwe7JPrn4DpXKIHnDlqnufaxm5k5Cxwo808pf64hXCr4fOvLzXFH+tN?=
 =?us-ascii?q?jCAh8+KQy0zP7rCM9h2YMGRWKPHqiZPbvWsV+J5eIgPfOAZYAIuDvmL/gl5vju?=
 =?us-ascii?q?jWI2mFMHfKmp24cXZ268Hvh8P0qZZn/siM8bEWgWpgo+UPDqiFqaXD5TfXmyXr?=
 =?us-ascii?q?486Ss8CI68DYfDW5qigLqO3CqgGp1WZ2ZGCk2DEHvydoWEXesMZzyWIsN7jjME?=
 =?us-ascii?q?Ur2hQZc71R6yrA/616ZnLu3M9y0aspLsysJ55+7UlRE08zx0CN+Q02WMT2Fyg2?=
 =?us-ascii?q?MJSCU63KF5oUxh1FiD1bJ0jOBfFdxW//lJSBs1NYbAz+xmDND/QhjOfsyJSFah?=
 =?us-ascii?q?QdWqGysxQcgzw9IVZ0Z9GtOijg3M3iawAr8VkaCLC4Iw8q7Gw3fxIMN9wW7c1K?=
 =?us-ascii?q?Y9l1kmXtdPNWq+i6587QfTAZTFk0GYl6mwc6Qc0zXA9GOCzWqIoUFZXxR8UaTD?=
 =?us-ascii?q?XXADeETWqc716V/FT7+rEb4nKBdOydaeKqtWbd3klUhJS+39ONvAeW6xm32/BR?=
 =?us-ascii?q?CTxrySaormfGEd3CbYCEgAiA0T+XeGNQ4jBiauuW7eDTpuFU7xbEPo6+VxtHS7?=
 =?us-ascii?q?TkosxQGQc0Jhz6a1+gIShfGEVvwcxKwEtzk7pzV0Blm92cnWBMSGpwd6eKVcYN?=
 =?us-ascii?q?U94EpI1G7Dtgx9OICgIL5mhlIEbwt3uEbu3Q1tCopcicgqsG8qzA1qJKKE0VNB?=
 =?us-ascii?q?cjSY3YzwOrzXMGXy4Aqja6nM2lHa0daW/KgP5e88q1XiugGpC0Uj/29m09lTz3?=
 =?us-ascii?q?uT+JHKABAOXpL2V0Y97wJ6qK3CYikh+4PU0mVhPrOwsjDc1NMmGuskxgy7cNdC?=
 =?us-ascii?q?LayLDgnyE84dB8iwM+Eqn1mpbhQZPOFd7qI0PsWmd+eY166vJupvgDWmjWFf6o?=
 =?us-ascii?q?Bnzk2M7zZ8SvLP35sdw/CYwxGLWCvmgFagssD4g4ZEZT4JE2q7yCjkApNRZ6Jo?=
 =?us-ascii?q?cYYKD2euP9O4xtFki5HxXH5Y8UapB0ka18+xZRqSc1v90BVK1UQWvXOogzG4wC?=
 =?us-ascii?q?Fzkz0zqKqQwjbOw+X7eBUbIGFLQHRtgkn2IYizidAXR0yobwkvlBu46kf23alb?=
 =?us-ascii?q?pKJjL2bNRUdEZTT5L2ZnUqGorLqNf9ZP6I80sSVQSOm9YVGaRqT9ohcAyCPjAm?=
 =?us-ascii?q?1eySs/dzGrvJX5ghN7hHicLHZ1sHrWZ8VwyQ3D69zbQP5bxiAGSzVgiTnLGli8?=
 =?us-ascii?q?OMGk/deOmJfZseC+VGWhWodIcSbxzoOAtyq75Wt0Dh25hP2zntznEQ4n0S70zd?=
 =?us-ascii?q?VqVCPIrAribYnvzai1LeVnfkxwDl/m98V6Ap1+kpc3hJwI2XkVnJKV8WAFkWfy?=
 =?us-ascii?q?N9VWwqb+bHsLRT4WzN/Z+gnl2Et/Ln2Xw4L1TGmSwsxkZ9OieGMZxjo979xWCK?=
 =?us-ascii?q?eT9LFEnjF6oluioQLRfPhyhDEdyfQ15X4eguEJvhctzyqHDrATG0lYITLjlxCS?=
 =?us-ascii?q?49+iq6VXYX6lcaKs20pmgdChELaCrxlZWHb4eZctBzV878thP1LXzH389Jvkd8?=
 =?us-ascii?q?LOYtIJuR2ZiBPAj+lTKJIsmfsGnytnOWThvXI7z+43lwBh3Za/vIKfMWVi4Lq5?=
 =?us-ascii?q?AgJENj3yf84T5jbtjaNEkseXxY+vGIhhGi4QXJvpVv+oFDMStfL6NweBCjE8q3?=
 =?us-ascii?q?GbGabBEg+b8ktps3XPE5WzPXGNOHYZ1cliRAWaJEFHmw8bRjI6npokFgywwMzh?=
 =?us-ascii?q?bVx05jQQ5l7+txtNxfhkNxj5UmfDugiobi04R4SYLBpT9gtC/VvaMdSC7uJvGC?=
 =?us-ascii?q?FV5p+hoxaIKmOFfAREF30JVlaHB1D+Pbmu+N/A/PKDBuelK/vOYLOOqfFRVvuS?=
 =?us-ascii?q?xJKv1Jdm8CiINsmVInZiCPg70FJZXX9lA8TZhykPSysPmiPNaM6buQ68+jBtoc?=
 =?us-ascii?q?C56vjrQwXv5Y2AC7ZJNdVv+ha2gbqMNuKKhSZ5LypY2Y0IxXPS1Lcf21sSgTl0?=
 =?us-ascii?q?dzaxCbQAqTLNTKXIl69XEREbaiBzNMhJ764m3QlNI8nbitzr2b5ik/41EExIVV?=
 =?us-ascii?q?jgmsGveMwLLHuxNFLBBEaXKruGISfHzN3wYaO5UbdQlvlbtwWsuTaHFE/uJi6M?=
 =?us-ascii?q?lyTyWBC1L+5NjDuXPBhfuIymdhZtCG7jTM/paxGhMd93iyE2zqMwhn/QKWEcNj?=
 =?us-ascii?q?18eVtXrrKM9SNYnul/G2tZ43p5LOmEnjyV4PXCJpkKsftkHCJ0mvle4HQ7zbtV?=
 =?us-ascii?q?8S5FSOZ0mCvUst5hvVWmnvOTxTpgVRpEsixLi56TvUV+JaXZ8YFNWHbe8xIL6G?=
 =?us-ascii?q?WQChIKqMNkC93voa9QzNfPmbn3KDdD9dLU4MQdC9LVKMKBLHouLx7pFCTIAwsC?=
 =?us-ascii?q?SD74fV3Y0mddivCJ6nqNrtAap5zoh5sBAutbX1wdEugGTEhoSphKD5p6RC9srK?=
 =?us-ascii?q?+HkMMS5X2zshTXDJFVs53dStqWAPPyOHOc0+lHIRwSzuWrA54UM9jUwUFtImR8?=
 =?us-ascii?q?k4nQFlCYCd9XryJ8aAA5ukhX2GdzVXE11l6jYQSopnYOQ63n1iUqgxdzNLx+vA?=
 =?us-ascii?q?zn5E06cx+T/HM9?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0APAAA3vRNch0O0hNFkGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUgUBAQELAYJpcBInBIN4g3uEfYx4CCUUaJZbgXMsDQYBh0ciNQgNAQM?=
 =?us-ascii?q?BAQEBAQECARMBAQEIDQkIKSMMgjYkAYJhAQEBAQMBAiAVQQYJAQEKDgMBAgECA?=
 =?us-ascii?q?QICJgICA0YGCAYBDAYCAQEBgxwBgWcBFwEFCqVagS+ELQGBEoRugQuLMxeBQD+?=
 =?us-ascii?q?BEScMgio1gwWBVYMtglcCiT4EgXSEXZEFCYEDgSWEZYNAhwcekVIsiQ+Edod8h?=
 =?us-ascii?q?HsBggwzGh+DQAmCHheIXoVRLQEyAQl7AQGKaoJNAQE?=
X-IPAS-Result: =?us-ascii?q?A0APAAA3vRNch0O0hNFkGwEBAQEDAQEBBwMBAQGBUgUBAQE?=
 =?us-ascii?q?LAYJpcBInBIN4g3uEfYx4CCUUaJZbgXMsDQYBh0ciNQgNAQMBAQEBAQECARMBA?=
 =?us-ascii?q?QEIDQkIKSMMgjYkAYJhAQEBAQMBAiAVQQYJAQEKDgMBAgECAQICJgICA0YGCAY?=
 =?us-ascii?q?BDAYCAQEBgxwBgWcBFwEFCqVagS+ELQGBEoRugQuLMxeBQD+BEScMgio1gwWBV?=
 =?us-ascii?q?YMtglcCiT4EgXSEXZEFCYEDgSWEZYNAhwcekVIsiQ+Edod8hHsBggwzGh+DQAm?=
 =?us-ascii?q?CHheIXoVRLQEyAQl7AQGKaoJNAQE?=
X-IronPort-AV: E=Sophos;i="5.56,353,1539673200"; 
   d="scan'208";a="57491921"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 14 Dec 2018 06:29:57 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730228AbeLNOX4 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 14 Dec 2018 09:23:56 -0500
Received: from icp-osb-irony-out3.external.iinet.net.au ([203.59.1.153]:14901
        "EHLO icp-osb-irony-out3.external.iinet.net.au" rhost-flags-OK-OK-OK-OK)
        by vger.kernel.org with ESMTP id S1729971AbeLNOX4 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 14 Dec 2018 09:23:56 -0500
X-Greylist: delayed 561 seconds by postgrey-1.27 at vger.kernel.org; Fri, 14 Dec 2018 09:23:54 EST
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A2ACAADwuRNc/1uMqnwNVxkBAQEBAQE?=
 =?us-ascii?q?BAQEBAQEHAQEBAQEBgVIDAQEBAQELAYJpgSmDfIN7kXUIJXyWW4F6MoRHAoM?=
 =?us-ascii?q?nNQgNAQMBAQEBAQECgQmFSAEBAQEDIxVBEAsOAwECAQIBAgImAgJJBggGAQw?=
 =?us-ascii?q?GAgEBgx0BgWcBJ6RocIEvhC0BgRKEboELi0qBQD+BEScMgio1gwWBVYMtglc?=
 =?us-ascii?q?CiT4EgXSEXZEFCYEDgSWEZYNAhwcekVIsiQ+Edod8hHsBggwzGh+DQAmCHhe?=
 =?us-ascii?q?IXoVRYAEJi2eCTQEB?=
X-IPAS-Result: =?us-ascii?q?A2ACAADwuRNc/1uMqnwNVxkBAQEBAQEBAQEBAQEHAQEBA?=
 =?us-ascii?q?QEBgVIDAQEBAQELAYJpgSmDfIN7kXUIJXyWW4F6MoRHAoMnNQgNAQMBAQEBA?=
 =?us-ascii?q?QECgQmFSAEBAQEDIxVBEAsOAwECAQIBAgImAgJJBggGAQwGAgEBgx0BgWcBJ?=
 =?us-ascii?q?6RocIEvhC0BgRKEboELi0qBQD+BEScMgio1gwWBVYMtglcCiT4EgXSEXZEFC?=
 =?us-ascii?q?YEDgSWEZYNAhwcekVIsiQ+Edod8hHsBggwzGh+DQAmCHheIXoVRYAEJi2eCT?=
 =?us-ascii?q?QEB?=
X-IronPort-AV: E=Sophos;i="5.56,353,1539619200"; 
   d="scan'208";a="149574510"
Received: from 124-170-140-91.dyn.iinet.net.au (HELO [192.168.0.106]) ([124.170.140.91])
  by icp-osb-irony-out3.iinet.net.au with ESMTP; 14 Dec 2018 22:14:29 +0800
Subject: Re: [PATCH 1/2] dma-mapping: zero memory returned from dma_alloc_*
To: Christoph Hellwig <hch@lst.de>,
        Geert Uytterhoeven <geert@linux-m68k.org>
Cc: Linux IOMMU <iommu@lists.linux-foundation.org>,
        Michal Simek <monstr@monstr.eu>, ashutosh.dixit@intel.com,
        alpha <linux-alpha@vger.kernel.org>,
        arcml <linux-snps-arc@lists.infradead.org>,
        linux-c6x-dev@linux-c6x.org,
        linux-m68k <linux-m68k@lists.linux-m68k.org>,
        Openrisc <openrisc@lists.librecores.org>,
        Parisc List <linux-parisc@vger.kernel.org>,
        linux-s390 <linux-s390@vger.kernel.org>,
        sparclinux <sparclinux@vger.kernel.org>,
        linux-xtensa@linux-xtensa.org,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>
References: <20181214082515.14835-1-hch@lst.de>
 <20181214082515.14835-2-hch@lst.de>
 <CAMuHMdWOr0EsgFQF8tjJYLxKVXx+Jwn73N8SVKt8AQGLKQ8V-A@mail.gmail.com>
 <20181214114719.GA3316@lst.de>
From: Greg Ungerer <gregungerer@westnet.com.au>
Message-ID: <5ae55118-6858-9121-6b3e-9b19b41550ef@westnet.com.au>
Date: Sat, 15 Dec 2018 00:14:29 +1000
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.2.1
MIME-Version: 1.0
In-Reply-To: <20181214114719.GA3316@lst.de>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Language: en-US
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org


On 14/12/18 9:47 pm, Christoph Hellwig wrote:
> On Fri, Dec 14, 2018 at 10:54:32AM +0100, Geert Uytterhoeven wrote:
>>> -       page = alloc_pages(flag, order);
>>> +       page = alloc_pages(flag | GFP_ZERO, order);
>>>          if (!page)
>>>                  return NULL;
>>
>> There's second implementation below, which calls __get_free_pages() and
>> does an explicit memset().  As __get_free_pages() calls alloc_pages(), perhaps
>> it makes sense to replace the memset() by GFP_ZERO, to increase consistency?
> 
> It would, but this patch really tries to be minimally invasive to just
> provide the zeroing everywhere.  There is plenty of opportunity
> to improve the m68k dma allocator if I can get enough reviewers/testers:
> 
>   - for one the coldfire/nommu case absolutely does not make sense to
>     me as there is not work done at all to make sure the memory is
>     mapped uncached despite the architecture implementing cache
>     flushing for the map interface.  So this whole implementation
>     looks broken to me and will need some major work (I had a previous
>     discussion with Greg on that which needs to be dug out)

Yep, that is right. Certainly the MMU case is broken. Some noMMU cases work
by virtue of the SoC only having an instruction cache (the older V2 cores).

The MMU case is fixable, but I think it will mean changing away from
the fall-back virtual:physical 1:1 mapping it uses for the kernel address
space. So not completely trivial. Either that or a dedicated area of RAM
for coherent allocations that we can mark as non-cachable via the really
course grained and limited ACR registers - not really very appealing.

The noMMU case in general is probably limited to something like that same
type of dedicated RAM/ACR register mechamism.

The most commonly used periperal with DMA is the FEC ethernet module,
and it has some "special" (used very loosely) cache flushing for
parts like the 532x family which probably makes it mostly work right.
There is a PCI bus on the 54xx family of parts, and I know general
ethernet cards on it (like e1000's) have problems I am sure are
related to the fact that coherent memory allocations aren't.

I do plan to have a look at this for the MMU case some time soon.

Regards
Greg




>   - the "regular" implementation in this patch should probably be replaced
>     with the generic remapping helpers that have been added for the 4.21
>     merge window:
> 
> 	http://git.infradead.org/users/hch/dma-mapping.git/commitdiff/0c3b3171ceccb8830c2bb5adff1b4e9b204c1450
> 
> Compile tested only patch below:
> 
> --
>>From ade86dc75b9850daf9111ebf9ce15825a6144f2d Mon Sep 17 00:00:00 2001
> From: Christoph Hellwig <hch@lst.de>
> Date: Fri, 14 Dec 2018 12:41:45 +0100
> Subject: m68k: use the generic dma coherent remap allocator
> 
> This switche to using common code for the DMA allocations, including
> potential use of the CMA allocator if configure.  Also add a few
> comments where the existing behavior seems to be lacking.
> 
> Signed-off-by: Christoph Hellwig <hch@lst.de>
> ---
>   arch/m68k/Kconfig      |  2 ++
>   arch/m68k/kernel/dma.c | 64 ++++++++++++------------------------------
>   2 files changed, 20 insertions(+), 46 deletions(-)
> 
> diff --git a/arch/m68k/Kconfig b/arch/m68k/Kconfig
> index 8a5868e9a3a0..60788cf02fbc 100644
> --- a/arch/m68k/Kconfig
> +++ b/arch/m68k/Kconfig
> @@ -2,10 +2,12 @@
>   config M68K
>   	bool
>   	default y
> +	select ARCH_HAS_DMA_MMAP_PGPROT if MMU && !COLDFIRE
>   	select ARCH_HAS_SYNC_DMA_FOR_DEVICE if HAS_DMA
>   	select ARCH_MIGHT_HAVE_PC_PARPORT if ISA
>   	select ARCH_NO_COHERENT_DMA_MMAP if !MMU
>   	select ARCH_NO_PREEMPT if !COLDFIRE
> +	select DMA_DIRECT_REMAP if MMU && !COLDFIRE
>   	select HAVE_IDE
>   	select HAVE_AOUT if MMU
>   	select HAVE_DEBUG_BUGVERBOSE
> diff --git a/arch/m68k/kernel/dma.c b/arch/m68k/kernel/dma.c
> index dafe99d08a6a..16da5d96e228 100644
> --- a/arch/m68k/kernel/dma.c
> +++ b/arch/m68k/kernel/dma.c
> @@ -18,57 +18,29 @@
>   #include <asm/pgalloc.h>
>   
>   #if defined(CONFIG_MMU) && !defined(CONFIG_COLDFIRE)
> -
> -void *arch_dma_alloc(struct device *dev, size_t size, dma_addr_t *handle,
> -		gfp_t flag, unsigned long attrs)
> +void arch_dma_prep_coherent(struct page *page, size_t size)
>   {
> -	struct page *page, **map;
> -	pgprot_t pgprot;
> -	void *addr;
> -	int i, order;
> -
> -	pr_debug("dma_alloc_coherent: %d,%x\n", size, flag);
> -
> -	size = PAGE_ALIGN(size);
> -	order = get_order(size);
> -
> -	page = alloc_pages(flag | GFP_ZERO, order);
> -	if (!page)
> -		return NULL;
> -
> -	*handle = page_to_phys(page);
> -	map = kmalloc(sizeof(struct page *) << order, flag & ~__GFP_DMA);
> -	if (!map) {
> -		__free_pages(page, order);
> -		return NULL;
> -	}
> -	split_page(page, order);
> -
> -	order = 1 << order;
> -	size >>= PAGE_SHIFT;
> -	map[0] = page;
> -	for (i = 1; i < size; i++)
> -		map[i] = page + i;
> -	for (; i < order; i++)
> -		__free_page(page + i);
> -	pgprot = __pgprot(_PAGE_PRESENT | _PAGE_ACCESSED | _PAGE_DIRTY);
> -	if (CPU_IS_040_OR_060)
> -		pgprot_val(pgprot) |= _PAGE_GLOBAL040 | _PAGE_NOCACHE_S;
> -	else
> -		pgprot_val(pgprot) |= _PAGE_NOCACHE030;
> -	addr = vmap(map, size, VM_MAP, pgprot);
> -	kfree(map);
> -
> -	return addr;
> +	/*
> +	 * XXX: don't we need to flush and invalidate the caches before
> +	 * creating a coherent mapping?
> +	 * coherent?
> +	 */
>   }
>   
> -void arch_dma_free(struct device *dev, size_t size, void *addr,
> -		dma_addr_t handle, unsigned long attrs)
> +pgprot_t arch_dma_mmap_pgprot(struct device *dev, pgprot_t prot,
> +		unsigned long attrs)
>   {
> -	pr_debug("dma_free_coherent: %p, %x\n", addr, handle);
> -	vfree(addr);
> +	/*
> +	 * XXX: this doesn't seem to handle the sun3 MMU at all.
> +	 */
> +	if (CPU_IS_040_OR_060) {
> +		pgprot_val(prot) &= ~_PAGE_CACHE040;
> +		pgprot_val(prot) |= _PAGE_GLOBAL040 | _PAGE_NOCACHE_S;
> +	} else {
> +		pgprot_val(prot) |= _PAGE_NOCACHE030;
> +	}
> +	return prot;
>   }
> -
>   #else
>   
>   #include <asm/cacheflush.h>
> 
