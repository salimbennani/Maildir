Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 08:51:29 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 45B72580380
	for <like.xu@linux.intel.com>; Wed, 12 Dec 2018 06:35:49 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga004-1.jf.intel.com with ESMTP; 12 Dec 2018 06:35:48 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3Amqeuwxal7HU7TieKQGoARTD/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpsy/Zx7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTzJPAo28?=
 =?us-ascii?q?YYUMAeQOM+lXoIvhqFUBsBW+HQuhCuHgxzNViHL6wbM10/86HAHa3wEtBc4CvG?=
 =?us-ascii?q?jaodj3MqoZTOC7zLPPzTXGd/5Ywzf96InMchAgufGMRax/ftLWx0Y1CwPFjlSQ?=
 =?us-ascii?q?ppL4Pz+M2OoCqXWb4Pd6UumyjGMnswFxojmrxscpl4bEnZgVxU7Z+iV52ok1Oc?=
 =?us-ascii?q?e0R1J8Yd6hCZZdsTyROYVxQsMnWW5ouSA6x6UJuZ69YSgG0pMnxwTQa/GBboOG?=
 =?us-ascii?q?4QrjWf6PLTtkh39pYq+ziwux/ES61OHxWMm53ExXoidHitXAq3QA2hzJ5sSaS/?=
 =?us-ascii?q?Zw/12t1SuR2w3R8O1IP104mbbdJpU82LA/jIATvl7GHiLumEX5kquWdkI89+is?=
 =?us-ascii?q?6uTneanmpoSGO497jAH+L74imsulAeQ3KgQOXm6b9vqg1LD740H1XLZHgucrnq?=
 =?us-ascii?q?XEs53WP9oXq6C5DgNPz4ou6Q6zDzK839QZmXkHIkhFeBWCj4XxIlHBPvX4Deqm?=
 =?us-ascii?q?j1uxjjhr2e7JPrn4DprWKXjDjbHhcqpj5E5HzwYzydFf55FKBb0bL/PzR1f8tN?=
 =?us-ascii?q?jZDh8/Lgy1zPzrCNR71oMCR22PBrWVP7/VsV+N/e8vJe6MZIkauDb7Nvgp/fnu?=
 =?us-ascii?q?jWU2mVMFZ6mmwYMXaGykHvRhO0iZZXvsgtQfHmsQsQs+UffniFmDUT5VenazUL?=
 =?us-ascii?q?gw5jA9CIK6E4jDQpqhj6CG3Ce+TdVrYHtbAAWMDWvwbNfDHPMNcz6JZMlmlDMC?=
 =?us-ascii?q?SP6mUYBm0BivsArzzf1gNvbV/SsD8ovu0cUw6+DNmBVhyDpvEs7I1miMS31zzH?=
 =?us-ascii?q?oFQiJz0K1hrEg40FqazKVjn9ReEtpc4e4PVR01YoXBxe53AMynRwTaY92SQ0yn?=
 =?us-ascii?q?SNj1PTZkdts2x9hGSUF7CdSkj1iXxyCtBa0Ukb2jHpE48qvAmXP2IpA5g2/L0b?=
 =?us-ascii?q?Rkg1Q4T89nM2qgiahisQ/JCN3niUKcwp6qdKAdxDbAw0KK0WqPsVwdfAdtXSSN?=
 =?us-ascii?q?CWgfZ0/Tofzj60/CRqPoArMiZFgSgfWeI7dHP4W6xW5NQ+3ubZGHOzq8?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BuAABcHBFcmBHrdtBjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUwUBAQsBgTCBOYEWE4N7iHiLM4FgCCWJE45AFIFiDwEBGAcNgUuFcyI2Bw0?=
 =?us-ascii?q?BAwEBAQEBAQIBEwEBAQEBCAsLBhsOIwyCNgUCAxoBBoJbAQEBAQMBAiAECwETC?=
 =?us-ascii?q?ikDAwECBgEBCg4HAwICIgQCAgMBHRMBBQEcBgEMBgIBAQEEgxgBgWkDCA0BAwG?=
 =?us-ascii?q?aKDyLDXwziAYNgQ+BDRJ5izEXgX+BEScMgl+CVzyBM4M/glcCiSuXGxguCY4ng?=
 =?us-ascii?q?yoGGIlpEIdNiSmGBIFhiAoCBAIEBQIFDyGBKwGCBzMiGxWDJwmCHheIXoVAcYE?=
 =?us-ascii?q?HiwWBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0BuAABcHBFcmBHrdtBjHAEBAQQBAQcEAQGBUwUBAQsBgTC?=
 =?us-ascii?q?BOYEWE4N7iHiLM4FgCCWJE45AFIFiDwEBGAcNgUuFcyI2Bw0BAwEBAQEBAQIBE?=
 =?us-ascii?q?wEBAQEBCAsLBhsOIwyCNgUCAxoBBoJbAQEBAQMBAiAECwETCikDAwECBgEBCg4?=
 =?us-ascii?q?HAwICIgQCAgMBHRMBBQEcBgEMBgIBAQEEgxgBgWkDCA0BAwGaKDyLDXwziAYNg?=
 =?us-ascii?q?Q+BDRJ5izEXgX+BEScMgl+CVzyBM4M/glcCiSuXGxguCY4ngyoGGIlpEIdNiSm?=
 =?us-ascii?q?GBIFhiAoCBAIEBQIFDyGBKwGCBzMiGxWDJwmCHheIXoVAcYEHiwWBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,344,1539673200"; 
   d="scan'208";a="57165708"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 12 Dec 2018 06:35:48 -0800
Received: from localhost ([::1]:45401 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gX5c3-00035v-Fs
	for like.xu@linux.intel.com; Wed, 12 Dec 2018 09:35:47 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:39697)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <philmd@redhat.com>) id 1gX5bl-00034U-8t
	for qemu-devel@nongnu.org; Wed, 12 Dec 2018 09:35:30 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <philmd@redhat.com>) id 1gX5bh-0000Qp-LQ
	for qemu-devel@nongnu.org; Wed, 12 Dec 2018 09:35:28 -0500
Received: from mail-wm1-f65.google.com ([209.85.128.65]:53660)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <philmd@redhat.com>) id 1gX5bh-0000QC-28
	for qemu-devel@nongnu.org; Wed, 12 Dec 2018 09:35:25 -0500
Received: by mail-wm1-f65.google.com with SMTP id y1so5967003wmi.3
	for <qemu-devel@nongnu.org>; Wed, 12 Dec 2018 06:35:24 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:subject:to:cc:references:from:openpgp:message-id
	:date:user-agent:mime-version:in-reply-to:content-language
	:content-transfer-encoding;
	bh=GHbbO8UUaQ9mWjdio/DbEEBmGcdaZtInn+XmndvghFU=;
	b=C2c+xg3j5gataAOoNai6l+t14STbQD8zg+RYizNv3SuzsfAr+le4jeXb2btzE+kx2C
	aDYeAtjCOP7U5PFxmkck0sqC2XV/XehzlbVNyERoqbk6gu9fQUg1eGBeVSjRpF8IPcSb
	YeEXBd8Rw5uDXF76ZV2BJoLKLvcZvSVlkQSHLuz2bmd+oaC2TKRArJt/vN+yz2NwEtzK
	+wpY2c8ocq9YCLw8+ImzckUf+IqbU+7eJZUfLSVSSH0CqTbOTaqofJPYRBSY9pFwl8Xg
	S4WDGgeknL/SKUSoHj0OTheVfB7KZYBHzFj45KW4/DgzuNBhwCWaIo3PJex4kwIk4c4h
	khqg==
X-Gm-Message-State: AA+aEWYuwetdqeTz4ZLh5cq1UgUaRSZbVQQFQ/2o+I67m3wC7KKoqe3o
	4R+aUXSwr+i5W7TGsjYEws7Z6A==
X-Google-Smtp-Source: AFSGD/UaVNR/YSxykEgBD1mcv1Hf2Ur4hHilZQnWGnWMWyeRMgye82HuxjD5rm6pxmV6SXdA1ovAjg==
X-Received: by 2002:a1c:c70f:: with SMTP id x15mr6570735wmf.130.1544625323690; 
	Wed, 12 Dec 2018 06:35:23 -0800 (PST)
Received: from [10.201.33.118] ([195.166.127.210])
	by smtp.gmail.com with ESMTPSA id
	a62sm2906826wmf.47.2018.12.12.06.35.22
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Wed, 12 Dec 2018 06:35:22 -0800 (PST)
To: Paolo Bonzini <pbonzini@redhat.com>, qemu-devel@nongnu.org
References: <1543851204-41186-1-git-send-email-pbonzini@redhat.com>
	<1543851204-41186-23-git-send-email-pbonzini@redhat.com>
From: =?UTF-8?Q?Philippe_Mathieu-Daud=c3=a9?= <philmd@redhat.com>
Openpgp: id=89C1E78F601EE86C867495CBA2A3FD6EDEADC0DE;
	url=http://pgp.mit.edu/pks/lookup?op=get&search=0xA2A3FD6EDEADC0DE
Message-ID: <f999872d-d940-7093-3c4c-f245e27c803f@redhat.com>
Date: Wed, 12 Dec 2018 15:35:21 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
	Thunderbird/60.3.1
MIME-Version: 1.0
In-Reply-To: <1543851204-41186-23-git-send-email-pbonzini@redhat.com>
Content-Type: text/plain; charset=utf-8
Content-Language: en-US
Content-Transfer-Encoding: 8bit
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.85.128.65
Subject: Re: [Qemu-devel] [PATCH 22/71] tests/libqos: sdhci driver and
 interface nodes
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Thomas Huth <thuth@redhat.com>,
	Emanuele Giuseppe Esposito <e.emanuelegiuseppe@gmail.com>,
	Laurent Vivier <laurent@vivier.eu>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On 12/3/18 4:32 PM, Paolo Bonzini wrote:
> From: Emanuele Giuseppe Esposito <e.emanuelegiuseppe@gmail.com>
> 
> Add qgraph nodes for sdhci-pci and generic-sdhci (memory mapped) drivers.
> Both drivers implement (produce) the same interface sdhci, that provides the
> readw - readq - writeq functions.
> 
> Signed-off-by: Emanuele Giuseppe Esposito <e.emanuelegiuseppe@gmail.com>
> Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
> ---
>  tests/Makefile.include |   1 +
>  tests/libqos/sdhci.c   | 163 +++++++++++++++++++++++++++++++++++++++++++++++++
>  tests/libqos/sdhci.h   |  70 +++++++++++++++++++++
>  3 files changed, 234 insertions(+)
>  create mode 100644 tests/libqos/sdhci.c
>  create mode 100644 tests/libqos/sdhci.h
> 
> diff --git a/tests/Makefile.include b/tests/Makefile.include
> index 1266109..66c7848 100644
> --- a/tests/Makefile.include
> +++ b/tests/Makefile.include
> @@ -678,6 +678,7 @@ libqos-virtio-obj-y = $(libqos-spapr-obj-y) $(libqos-pc-obj-y) tests/libqos/virt
>  # Devices
>  qos-test-obj-y = tests/qos-test.o $(libqgraph-obj-y)
>  qos-test-obj-y += $(libqos-pc-obj-y)
> +qos-test-obj-y += tests/libqos/sdhci.o
>  
>  # Machines
>  qos-test-obj-y += tests/libqos/x86_64_pc-machine.o
> diff --git a/tests/libqos/sdhci.c b/tests/libqos/sdhci.c
> new file mode 100644
> index 0000000..0685bee
> --- /dev/null
> +++ b/tests/libqos/sdhci.c
> @@ -0,0 +1,163 @@
> +/*
> + * libqos driver framework
> + *
> + * Copyright (c) 2018 Emanuele Giuseppe Esposito <e.emanuelegiuseppe@gmail.com>
> + *
> + * This library is free software; you can redistribute it and/or
> + * modify it under the terms of the GNU Lesser General Public
> + * License version 2 as published by the Free Software Foundation.
> + *
> + * This library is distributed in the hope that it will be useful,
> + * but WITHOUT ANY WARRANTY; without even the implied warranty of
> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
> + * Lesser General Public License for more details.
> + *
> + * You should have received a copy of the GNU Lesser General Public
> + * License along with this library; if not, see <http://www.gnu.org/licenses/>
> + */
> +
> +#include "qemu/osdep.h"
> +#include "libqtest.h"
> +#include "libqos/qgraph.h"
> +#include "pci.h"
> +#include "sdhci.h"
> +#include "hw/pci/pci.h"
> +
> +static void set_qsdhci_fields(QSDHCI *s, uint8_t version, uint8_t baseclock,
> +                              bool sdma, uint64_t reg)
> +{
> +    s->props.version = version;
> +    s->props.baseclock = baseclock;
> +    s->props.capab.sdma = sdma;
> +    s->props.capab.reg = reg;
> +}
> +
> +/* Memory mapped implementation of QSDHCI */
> +
> +static uint16_t sdhci_mm_readw(QSDHCI *s, uint32_t reg)
> +{
> +    QSDHCI_MemoryMapped *smm = container_of(s, QSDHCI_MemoryMapped, sdhci);
> +    return qtest_readw(smm->qts, smm->addr + reg);
> +}
> +
> +static uint64_t sdhci_mm_readq(QSDHCI *s, uint32_t reg)
> +{
> +    QSDHCI_MemoryMapped *smm = container_of(s, QSDHCI_MemoryMapped, sdhci);
> +    return qtest_readq(smm->qts, smm->addr + reg);
> +}
> +
> +static void sdhci_mm_writeq(QSDHCI *s, uint32_t reg, uint64_t val)
> +{
> +    QSDHCI_MemoryMapped *smm = container_of(s, QSDHCI_MemoryMapped, sdhci);
> +    qtest_writeq(smm->qts, smm->addr + reg, val);
> +}
> +
> +static void *sdhci_mm_get_driver(void *obj, const char *interface)
> +{
> +    QSDHCI_MemoryMapped *smm = obj;
> +    if (!g_strcmp0(interface, "sdhci")) {
> +        return &smm->sdhci;
> +    }
> +    fprintf(stderr, "%s not present in generic-sdhci\n", interface);
> +    g_assert_not_reached();
> +}
> +
> +void qos_init_sdhci_mm(QSDHCI_MemoryMapped *sdhci, QTestState *qts,
> +		       uint32_t addr, QSDHCIProperties *common)
> +{
> +    sdhci->obj.get_driver = sdhci_mm_get_driver;
> +    sdhci->sdhci.readw = sdhci_mm_readw;
> +    sdhci->sdhci.readq = sdhci_mm_readq;
> +    sdhci->sdhci.writeq = sdhci_mm_writeq;
> +    memcpy(&sdhci->sdhci.props, common, sizeof(QSDHCIProperties));
> +    sdhci->addr = addr;
> +    sdhci->qts = qts;
> +}
> +
> +/* PCI implementation of QSDHCI */
> +
> +static uint16_t sdhci_pci_readw(QSDHCI *s, uint32_t reg)
> +{
> +    QSDHCI_PCI *spci = container_of(s, QSDHCI_PCI, sdhci);
> +    return qpci_io_readw(&spci->dev, spci->mem_bar, reg);
> +}
> +
> +static uint64_t sdhci_pci_readq(QSDHCI *s, uint32_t reg)
> +{
> +    QSDHCI_PCI *spci = container_of(s, QSDHCI_PCI, sdhci);
> +    return qpci_io_readq(&spci->dev, spci->mem_bar, reg);
> +}
> +
> +static void sdhci_pci_writeq(QSDHCI *s, uint32_t reg, uint64_t val)
> +{
> +    QSDHCI_PCI *spci = container_of(s, QSDHCI_PCI, sdhci);
> +    return qpci_io_writeq(&spci->dev, spci->mem_bar, reg, val);
> +}
> +
> +static void *sdhci_pci_get_driver(void *object, const char *interface)
> +{
> +    QSDHCI_PCI *spci = object;
> +    if (!g_strcmp0(interface, "sdhci")) {
> +        return &spci->sdhci;
> +    }
> +
> +    fprintf(stderr, "%s not present in sdhci-pci\n", interface);
> +    g_assert_not_reached();
> +}
> +
> +static void sdhci_pci_start_hw(QOSGraphObject *obj)
> +{
> +    QSDHCI_PCI *spci = (QSDHCI_PCI *)obj;
> +    qpci_device_enable(&spci->dev);
> +}
> +
> +static void sdhci_destructor(QOSGraphObject *obj)

sdhci_pci_destructor()

> +{
> +    QSDHCI_PCI *spci = (QSDHCI_PCI *)obj;
> +    qpci_iounmap(&spci->dev, spci->mem_bar);
> +}
> +
> +static void *sdhci_pci_create(void *pci_bus, QGuestAllocator *alloc, void *addr)
> +{
> +    QSDHCI_PCI *spci = g_new0(QSDHCI_PCI, 1);
> +    QPCIBus *bus = pci_bus;
> +    uint64_t barsize;
> +
> +    qpci_device_init(&spci->dev, bus, addr);
> +    spci->mem_bar = qpci_iomap(&spci->dev, 0, &barsize);
> +    spci->sdhci.readw = sdhci_pci_readw;
> +    spci->sdhci.readq = sdhci_pci_readq;
> +    spci->sdhci.writeq = sdhci_pci_writeq;
> +    set_qsdhci_fields(&spci->sdhci, 2, 0, 1, 0x057834b4);
> +
> +    spci->obj.get_driver = sdhci_pci_get_driver;
> +    spci->obj.start_hw = sdhci_pci_start_hw;
> +    spci->obj.destructor = sdhci_destructor;
> +    return &spci->obj;
> +}
> +
> +static void qsdhci_register_nodes(void)
> +{
> +    QPCIAddress addr = {
> +        .devfn = QPCI_DEVFN(4, 0),
> +        .vendor_id = PCI_VENDOR_ID_REDHAT,
> +        .device_id = PCI_DEVICE_ID_REDHAT_SDHCI,
> +    };
> +
> +    QOSGraphEdgeOptions opts = {
> +        .extra_device_opts = "addr=04.0",

Shouldn't this be formatted from the previous QPCIAddress?

> +    };
> +
> +    /* generic-sdhci */
> +    qos_node_create_driver("generic-sdhci", NULL);
> +    qos_node_produces("generic-sdhci", "sdhci");
> +
> +    /* sdhci-pci */
> +    add_qpci_address(&opts, &addr);
> +    qos_node_create_driver("sdhci-pci", sdhci_pci_create);
> +    qos_node_produces("sdhci-pci", "sdhci");
> +    qos_node_consumes("sdhci-pci", "pci-bus", &opts);
> +
> +}
> +
> +libqos_init(qsdhci_register_nodes);
> diff --git a/tests/libqos/sdhci.h b/tests/libqos/sdhci.h
> new file mode 100644
> index 0000000..e9880fc
> --- /dev/null
> +++ b/tests/libqos/sdhci.h
> @@ -0,0 +1,70 @@
> +/*
> + * libqos driver framework
> + *
> + * Copyright (c) 2018 Emanuele Giuseppe Esposito <e.emanuelegiuseppe@gmail.com>
> + *
> + * This library is free software; you can redistribute it and/or
> + * modify it under the terms of the GNU Lesser General Public
> + * License version 2 as published by the Free Software Foundation.
> + *
> + * This library is distributed in the hope that it will be useful,
> + * but WITHOUT ANY WARRANTY; without even the implied warranty of
> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
> + * Lesser General Public License for more details.
> + *
> + * You should have received a copy of the GNU Lesser General Public
> + * License along with this library; if not, see <http://www.gnu.org/licenses/>
> + */
> +
> +#ifndef QGRAPH_QSDHCI
> +#define QGRAPH_QSDHCI
> +
> +#include "libqos/qgraph.h"
> +#include "pci.h"
> +
> +typedef struct QSDHCI QSDHCI;
> +typedef struct QSDHCI_MemoryMapped QSDHCI_MemoryMapped;
> +typedef struct QSDHCI_PCI  QSDHCI_PCI;
> +typedef struct QSDHCIProperties QSDHCIProperties;
> +
> +/* Properties common to all QSDHCI devices */
> +struct QSDHCIProperties {
> +    uint8_t version;
> +    uint8_t baseclock;
> +    struct {
> +        bool sdma;
> +        uint64_t reg;
> +    } capab;
> +};
> +
> +struct QSDHCI {
> +    uint16_t (*readw)(QSDHCI *s, uint32_t reg);
> +    uint64_t (*readq)(QSDHCI *s, uint32_t reg);
> +    void (*writeq)(QSDHCI *s, uint32_t reg, uint64_t val);
> +    QSDHCIProperties props;
> +};
> +
> +/* Memory Mapped implementation of QSDHCI */
> +struct QSDHCI_MemoryMapped {
> +    QOSGraphObject obj;
> +    QTestState *qts;

Maybe 'teststate' or 'state' rather than 'qts'.

> +    QSDHCI sdhci;
> +    uint64_t addr;
> +};
> +
> +/* PCI implementation of QSDHCI */
> +struct QSDHCI_PCI {
> +    QOSGraphObject obj;
> +    QPCIDevice dev;
> +    QSDHCI sdhci;
> +    QPCIBar mem_bar;
> +};
> +
> +/**
> + * qos_init_sdhci_mm(): external constructor used by all drivers/machines
> + * that "contain" a #QSDHCI_MemoryMapped driver
> + */
> +void qos_init_sdhci_mm(QSDHCI_MemoryMapped *sdhci, QTestState *qts,
> +		       uint32_t addr, QSDHCIProperties *common);
> +
> +#endif
> 

Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
Tested-by: Philippe Mathieu-Daudé <philmd@redhat.com>

