Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 08:52:38 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 40684580380
	for <like.xu@linux.intel.com>; Wed, 12 Dec 2018 08:16:14 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by fmsmga005-1.fm.intel.com with ESMTP; 12 Dec 2018 08:16:13 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3Al462xhQJ9NCYa4pFdVX6uhD7r9psv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa67ZROEt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZHI28?=
 =?us-ascii?q?YYsBAekPM+lWoIbypUcBoxSjCwm0Bu7hyDBFimL40KEmzeshChrL3BAjEt8UrH?=
 =?us-ascii?q?jYsNv4OaUUXOuozKfI1zLDb/ZO1Dnn6IjIcxQhofCUXbJob8Xe0U4hGBnZjlWQ?=
 =?us-ascii?q?qIzqIS6V2v0DvWeB8upvSPiogHMgpgFpojivx8MsiozUiY8O0FDL6zh2wIYvKt?=
 =?us-ascii?q?2kUkJ0fdmkEJ5JuiycKoB4TMQiQ2RytyY7zL0LoYK7fDIXyJQ82x7QdeGIfJSP?=
 =?us-ascii?q?4hLmTOaRPCt4hHNjeLKwiBay60+gyvDkVsWu11ZKtCVFn9/RvX4Ozxze8taLRu?=
 =?us-ascii?q?d+80u7xDqDygPe5vtaLU06lafXMYMtz7wompYOtUnOHjX6lFj3gaKXbEko5/ak?=
 =?us-ascii?q?5ub9brn4u5OQK4l5gRzkPKs0gMywG+E4PxAOX2eF/eS806Xu/Un4QLVRkv02ib?=
 =?us-ascii?q?PVsJ/cJcQGvKK5BBVV0ok75xa+CTepzsgYkGEZIF5Zex+LlZXlN0zNLfziE/uy?=
 =?us-ascii?q?jVShnC12y/3EJrHhB4/CLnnHkLfvZ7Z97EtcxRIqzd9B4pJUF6gNL+/tVU/vqt?=
 =?us-ascii?q?PYCgY1PBezw+b6DtVyyp0RWXmIDq+dMaPSskGH6vggIumRfIIVvDf9K/445//h?=
 =?us-ascii?q?l3M5mFkdfbW30psTcny3AvNmI0CCbHrqhdcBF2gKvgwjTODwj12CSzFTa26oX6?=
 =?us-ascii?q?0g/jE7FJ6mDYDbS4CpgbyB3zm0EodZZ2BbEV2MFXbod4OZW/YDci6SI8lhkiAa?=
 =?us-ascii?q?WrilUYMuyRautAqpg4dhNffery0EqYr4hp8y4+zIiQp08ztyAMKAlWaXQCZxl2?=
 =?us-ascii?q?IMQjYwm6dnvU16zEzEyKV9nrlUGMJe46B0VBwnP8vZxu1+F9egQw/EY5KFRUir?=
 =?us-ascii?q?RpC8DCgsQ8kt69kJZUl7BpOllB+UxDegAbIei+mWAocp+LnXxXn7KpVBzCPj3b?=
 =?us-ascii?q?MqynAgTtHOAkm7nKN26kCHAofTmEyfm7ynM6ABxiPE6U+ZwGaOtV0eWwl1B+GN?=
 =?us-ascii?q?RH0aew7aoMr04mvESLmhD6lhNRFOjYa5I65XZ9mhqk9aReWrbM/XZm+2s2OxAw?=
 =?us-ascii?q?uYgLKKcIfuPW4a2XOZQGwNiBIX+j6rLxMzBW/1p2/EFzFtPUjib0Pl7a91r3bt?=
 =?us-ascii?q?HWEuyATfV01g07ut4hMioPWAS/Iew/cosTotKn0gBFa829faI8CNqwpoYONXZt?=
 =?us-ascii?q?ZrswQP7n7QqwEoZs/oFKtlnFNLNl0v504=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BTAAB9MxFcmBHrdtBkGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBZYExgTmBFhODe4h4izOBYAglfJhODgEBGA0HhECCfiI4EgE?=
 =?us-ascii?q?DAQEBAQEBAgETAQEBAQEICwsGGw4jDII2BQIDGgEGglsBAQEBAgEBAhcJBAsBE?=
 =?us-ascii?q?wopAwIBAQIGAQEKFQMCAiIEAgIDATABBQEOAQ0GAQwGAgEBAYMcAYF0BQgBAwE?=
 =?us-ascii?q?Kmjk8iw18M4kggQgFEnmLMReBf4ERJwyCKjWFAYMEglcCiT0xgUKVXAmHC4pGB?=
 =?us-ascii?q?hiBXIgNECaHJ4kphHSKewIEAgQFAgUPIYE8gXczIhsVO4JsgiICAxdaAYgDhUB?=
 =?us-ascii?q?xAYEGilMygXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0BTAAB9MxFcmBHrdtBkGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BZYExgTmBFhODe4h4izOBYAglfJhODgEBGA0HhECCfiI4EgEDAQEBAQEBAgETA?=
 =?us-ascii?q?QEBAQEICwsGGw4jDII2BQIDGgEGglsBAQEBAgEBAhcJBAsBEwopAwIBAQIGAQE?=
 =?us-ascii?q?KFQMCAiIEAgIDATABBQEOAQ0GAQwGAgEBAYMcAYF0BQgBAwEKmjk8iw18M4kgg?=
 =?us-ascii?q?QgFEnmLMReBf4ERJwyCKjWFAYMEglcCiT0xgUKVXAmHC4pGBhiBXIgNECaHJ4k?=
 =?us-ascii?q?phHSKewIEAgQFAgUPIYE8gXczIhsVO4JsgiICAxdaAYgDhUBxAYEGilMygXcBA?=
 =?us-ascii?q?Q?=
X-IronPort-AV: E=Sophos;i="5.56,344,1539673200"; 
   d="scan'208";a="43775005"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 12 Dec 2018 08:16:12 -0800
Received: from localhost ([::1]:45876 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gX7BD-0002we-TF
	for like.xu@linux.intel.com; Wed, 12 Dec 2018 11:16:11 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:38260)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <philmd@redhat.com>) id 1gX74V-0005Br-17
	for qemu-devel@nongnu.org; Wed, 12 Dec 2018 11:09:18 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <philmd@redhat.com>) id 1gX74O-0004L0-GD
	for qemu-devel@nongnu.org; Wed, 12 Dec 2018 11:09:15 -0500
Received: from mail-wr1-f65.google.com ([209.85.221.65]:46991)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <philmd@redhat.com>) id 1gX74O-0004Jz-47
	for qemu-devel@nongnu.org; Wed, 12 Dec 2018 11:09:08 -0500
Received: by mail-wr1-f65.google.com with SMTP id l9so18209210wrt.13
	for <qemu-devel@nongnu.org>; Wed, 12 Dec 2018 08:09:07 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:subject:to:cc:references:from:openpgp:message-id
	:date:user-agent:mime-version:in-reply-to:content-language
	:content-transfer-encoding;
	bh=No32jzKGXotu8k3QgLGIb2pshjUIgC6azkRT/FJDBf4=;
	b=JVukfDXfsYgbN7+A1rXnjGtVwY1y33GfGpq4OjKic3APo+F2nFLJ4lUazAZvvzDNtL
	CV0/4rPnZjbmnIdnRGX9jgC+EwMwrJu80XPyMkLoqPgLJ1NFSQeZR/8jc/KNI/cWxIzD
	2vRX69qcImhwQ4R6bSFH7aFGdjqyngzp/B48fhilXLd2UUlJqTR+HxwqRK23npsHP28j
	5/Bma36EnnoJHXpLtAVlhjqQ4NZD+yz4DCzWPnhVsajmf4mcovLb+XljMO8R4aBc/JZ0
	c3LKOc8r7WjmLKpRY22NNhL12hY1ISV8SejLJ7c5UjBjm2Ns4rE/U14M1bKTrv5EU2PQ
	0rLw==
X-Gm-Message-State: AA+aEWZwyLxAiuw6FZQmLzFF63ql9m8twLqIAOYYVJow/xzpQTSzZcZ8
	/t76n8khTUOwOo+AUU8lpfCY3A==
X-Google-Smtp-Source: AFSGD/Vb9G/mVcoWMDQHABX/mTTBTmZTB9DLIjq2KxjrWASK1BV7+IuDN1Py44xr2bwpHbz9HIhCoQ==
X-Received: by 2002:adf:91c3:: with SMTP id 61mr17131460wri.324.1544630946481; 
	Wed, 12 Dec 2018 08:09:06 -0800 (PST)
Received: from [10.201.33.118] ([195.166.127.210])
	by smtp.gmail.com with ESMTPSA id
	l202sm6554102wma.33.2018.12.12.08.09.04
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Wed, 12 Dec 2018 08:09:05 -0800 (PST)
To: =?UTF-8?Q?Marc-Andr=c3=a9_Lureau?= <marcandre.lureau@redhat.com>,
	qemu-devel@nongnu.org, Samuel Ortiz <sameo@linux.intel.com>,
	Laszlo Ersek <lersek@redhat.com>
References: <20180910083222.8245-1-marcandre.lureau@redhat.com>
	<20180910083222.8245-6-marcandre.lureau@redhat.com>
From: =?UTF-8?Q?Philippe_Mathieu-Daud=c3=a9?= <philmd@redhat.com>
Openpgp: id=89C1E78F601EE86C867495CBA2A3FD6EDEADC0DE;
	url=http://pgp.mit.edu/pks/lookup?op=get&search=0xA2A3FD6EDEADC0DE
Message-ID: <2468e9cb-0a63-1259-41cb-a26ae3500a1b@redhat.com>
Date: Wed, 12 Dec 2018 17:09:03 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
	Thunderbird/60.3.1
MIME-Version: 1.0
In-Reply-To: <20180910083222.8245-6-marcandre.lureau@redhat.com>
Content-Type: text/plain; charset=utf-8
Content-Language: en-US
Content-Transfer-Encoding: 8bit
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.85.221.65
Subject: Re: [Qemu-devel] [PATCH v12 5/6] acpi: build TPM Physical Presence
 interface
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Eduardo Habkost <ehabkost@redhat.com>,
	"Michael S. Tsirkin" <mst@redhat.com>,
	stefanb@linux.vnet.ibm.com, Igor Mammedov <imammedo@redhat.com>,
	Paolo Bonzini <pbonzini@redhat.com>, Richard Henderson <rth@twiddle.net>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On 9/10/18 10:32 AM, Marc-André Lureau wrote:
> From: Stefan Berger <stefanb@linux.vnet.ibm.com>
> 
> The TPM Physical Presence interface consists of an ACPI part, a shared
> memory part, and code in the firmware. Users can send messages to the
> firmware by writing a code into the shared memory through invoking the
> ACPI code. When a reboot happens, the firmware looks for the code and
> acts on it by sending sequences of commands to the TPM.
> 
> This patch adds the ACPI code. It is similar to the one in EDK2 but doesn't
> assume that SMIs are necessary to use. It uses a similar datastructure for
> the shared memory as EDK2 does so that EDK2 and SeaBIOS could both make use
> of it. I extended the shared memory data structure with an array of 256
> bytes, one for each code that could be implemented. The array contains
> flags describing the individual codes. This decouples the ACPI implementation
> from the firmware implementation.
> 
> The underlying TCG specification is accessible from the following page.
> 
> https://trustedcomputinggroup.org/tcg-physical-presence-interface-specification/
> 
> This patch implements version 1.30.
> 
> Signed-off-by: Stefan Berger <stefanb@linux.vnet.ibm.com>
> [ Marc-André - ACPI code improvements and windows fixes ]
> Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
> Acked-by: Michael S. Tsirkin <mst@redhat.com>
> Reviewed-by: Igor Mammedov <imammedo@redhat.com>
> ---
>  include/hw/acpi/tpm.h |   8 +
>  hw/i386/acpi-build.c  | 393 +++++++++++++++++++++++++++++++++++++++++-

The spec doesnt' look X86 specific, I'd add this code in "hw/acpi/tpm.c"

>  docs/specs/tpm.txt    |  83 +++++++++
>  3 files changed, 481 insertions(+), 3 deletions(-)
> 
> diff --git a/include/hw/acpi/tpm.h b/include/hw/acpi/tpm.h
> index a6109a97fc..ecccb96933 100644
> --- a/include/hw/acpi/tpm.h
> +++ b/include/hw/acpi/tpm.h
> @@ -197,4 +197,12 @@ REG32(CRB_DATA_BUFFER, 0x80)
>  #define TPM_PPI_VERSION_NONE        0
>  #define TPM_PPI_VERSION_1_30        1
>  
> +/* whether function is blocked by BIOS settings; bits 0, 1, 2 */
> +#define TPM_PPI_FUNC_NOT_IMPLEMENTED     (0 << 0)
> +#define TPM_PPI_FUNC_BIOS_ONLY           (1 << 0)
> +#define TPM_PPI_FUNC_BLOCKED             (2 << 0)
> +#define TPM_PPI_FUNC_ALLOWED_USR_REQ     (3 << 0)
> +#define TPM_PPI_FUNC_ALLOWED_USR_NOT_REQ (4 << 0)
> +#define TPM_PPI_FUNC_MASK                (7 << 0)
> +
>  #endif /* HW_ACPI_TPM_H */
> diff --git a/hw/i386/acpi-build.c b/hw/i386/acpi-build.c
> index c24f68df02..c5e9a6e11d 100644
> --- a/hw/i386/acpi-build.c
> +++ b/hw/i386/acpi-build.c
> @@ -43,6 +43,7 @@
>  #include "hw/acpi/memory_hotplug.h"
>  #include "sysemu/tpm.h"
>  #include "hw/acpi/tpm.h"
> +#include "hw/tpm/tpm_ppi.h"
>  #include "hw/acpi/vmgenid.h"
>  #include "sysemu/tpm_backend.h"
>  #include "hw/timer/mc146818rtc_regs.h"
> @@ -1789,6 +1790,386 @@ static Aml *build_q35_osc_method(void)
>      return method;
>  }
>  
> +static void
> +build_tpm_ppi(TPMIf *tpm, Aml *dev)
> +{
> +    Aml *method, *field, *ifctx, *ifctx2, *ifctx3, *func_mask,
> +        *not_implemented, *pak, *tpm2, *tpm3, *pprm, *pprq, *zero, *one;
> +
> +    if (!object_property_get_bool(OBJECT(tpm), "ppi", &error_abort)) {
> +        return;
> +    }
> +
> +    zero = aml_int(0);
> +    one = aml_int(1);
> +    func_mask = aml_int(TPM_PPI_FUNC_MASK);
> +    not_implemented = aml_int(TPM_PPI_FUNC_NOT_IMPLEMENTED);
> +
> +    /*
> +     * TPP2 is for the registers that ACPI code used to pass
> +     * the PPI code and parameter (PPRQ, PPRM) to the firmware.
> +     */
> +    aml_append(dev,
> +               aml_operation_region("TPP2", AML_SYSTEM_MEMORY,
> +                                    aml_int(TPM_PPI_ADDR_BASE + 0x100),
> +                                    0x5A));
> +    field = aml_field("TPP2", AML_ANY_ACC, AML_NOLOCK, AML_PRESERVE);
> +    aml_append(field, aml_named_field("PPIN", 8));
> +    aml_append(field, aml_named_field("PPIP", 32));
> +    aml_append(field, aml_named_field("PPRP", 32));
> +    aml_append(field, aml_named_field("PPRQ", 32));
> +    aml_append(field, aml_named_field("PPRM", 32));
> +    aml_append(field, aml_named_field("LPPR", 32));
> +    aml_append(dev, field);
> +    pprq = aml_name("PPRQ");
> +    pprm = aml_name("PPRM");
> +
> +    /*
> +     * DerefOf in Windows is broken with SYSTEM_MEMORY.  Use a dynamic
> +     * operation region inside of a method for getting FUNC[op].
> +     */
> +    method = aml_method("TPFN", 1, AML_SERIALIZED);
> +    {
> +        Aml *op = aml_arg(0);
> +        ifctx = aml_if(aml_lgreater_equal(op, aml_int(0x100)));
> +        {
> +            aml_append(ifctx, aml_return(zero));
> +        }
> +        aml_append(method, ifctx);
> +
> +        aml_append(method,
> +            aml_operation_region("TPP1", AML_SYSTEM_MEMORY,
> +                aml_add(aml_int(TPM_PPI_ADDR_BASE), op, NULL), 0x1));
> +        field = aml_field("TPP1", AML_BYTE_ACC, AML_NOLOCK, AML_PRESERVE);
> +        aml_append(field, aml_named_field("TPPF", 8));
> +        aml_append(method, field);
> +        aml_append(method, aml_return(aml_name("TPPF")));
> +    }
> +    aml_append(dev, method);
> +
> +    /*
> +     * Use global TPM2 & TPM3 variables to workaround Windows ACPI bug
> +     * when returning packages.
> +     */
> +    pak = aml_package(2);
> +    aml_append(pak, zero);
> +    aml_append(pak, zero);
> +    aml_append(dev, aml_name_decl("TPM2", pak));
> +    tpm2 = aml_name("TPM2");
> +
> +    pak = aml_package(3);
> +    aml_append(pak, zero);
> +    aml_append(pak, zero);
> +    aml_append(pak, zero);
> +    aml_append(dev, aml_name_decl("TPM3", pak));
> +    tpm3 = aml_name("TPM3");
> +
> +    method = aml_method("_DSM", 4, AML_SERIALIZED);
> +    {
> +        uint8_t zerobyte[1] = { 0 };
> +        Aml *function, *arguments, *rev, *op, *op_arg, *op_flags, *uuid;
> +
> +        uuid = aml_arg(0);
> +        rev = aml_arg(1);
> +        function = aml_arg(2);
> +        arguments = aml_arg(3);
> +        op = aml_local(0);
> +        op_flags = aml_local(1);
> +
> +        ifctx = aml_if(
> +            aml_equal(uuid,
> +                      aml_touuid("3DDDFAA6-361B-4EB4-A424-8D10089D1653")));
> +        {
> +            /* standard DSM query function */
> +            ifctx2 = aml_if(aml_equal(function, zero));
> +            {
> +                uint8_t byte_list[2] = { 0xff, 0x01 };
> +                aml_append(ifctx2, aml_return(aml_buffer(2, byte_list)));
> +            }
> +            aml_append(ifctx, ifctx2);
> +
> +            /*
> +             * PPI 1.0: 2.1.1 Get Physical Presence Interface Version
> +             *
> +             * Arg 2 (Integer): Function Index = 1
> +             * Arg 3 (Package): Arguments = Empty Package
> +             * Returns: Type: String
> +             */
> +            ifctx2 = aml_if(aml_equal(function, one));
> +            {
> +                aml_append(ifctx2, aml_return(aml_string("1.3")));
> +            }
> +            aml_append(ifctx, ifctx2);
> +
> +            /*
> +             * PPI 1.0: 2.1.3 Submit TPM Operation Request to Pre-OS Environment
> +             *
> +             * Arg 2 (Integer): Function Index = 2
> +             * Arg 3 (Package): Arguments = Package: Type: Integer
> +             *                              Operation Value of the Request
> +             * Returns: Type: Integer
> +             *          0: Success
> +             *          1: Operation Value of the Request Not Supported
> +             *          2: General Failure
> +             */
> +            ifctx2 = aml_if(aml_equal(function, aml_int(2)));
> +            {
> +                /* get opcode */
> +                aml_append(ifctx2,
> +                           aml_store(aml_derefof(aml_index(arguments,
> +                                                           zero)), op));
> +
> +                /* get opcode flags */
> +                aml_append(ifctx2,
> +                           aml_store(aml_call1("TPFN", op), op_flags));
> +
> +                /* if func[opcode] & TPM_PPI_FUNC_NOT_IMPLEMENTED */
> +                ifctx3 = aml_if(
> +                    aml_equal(
> +                        aml_and(op_flags, func_mask, NULL),
> +                        not_implemented));
> +                {
> +                    /* 1: Operation Value of the Request Not Supported */
> +                    aml_append(ifctx3, aml_return(one));
> +                }
> +                aml_append(ifctx2, ifctx3);
> +
> +                aml_append(ifctx2, aml_store(op, pprq));
> +                aml_append(ifctx2, aml_store(zero, pprm));
> +                /* 0: success */
> +                aml_append(ifctx2, aml_return(zero));
> +            }
> +            aml_append(ifctx, ifctx2);
> +
> +            /*
> +             * PPI 1.0: 2.1.4 Get Pending TPM Operation Requested By the OS
> +             *
> +             * Arg 2 (Integer): Function Index = 3
> +             * Arg 3 (Package): Arguments = Empty Package
> +             * Returns: Type: Package of Integers
> +             *          Integer 1: Function Return code
> +             *                     0: Success
> +             *                     1: General Failure
> +             *          Integer 2: Pending operation requested by the OS
> +             *                     0: None
> +             *                    >0: Operation Value of the Pending Request
> +             *          Integer 3: Optional argument to pending operation
> +             *                     requested by the OS
> +             *                     0: None
> +             *                    >0: Argument Value of the Pending Request
> +             */
> +            ifctx2 = aml_if(aml_equal(function, aml_int(3)));
> +            {
> +                /*
> +                 * Revision ID of 1, no integer parameter beyond
> +                 * parameter two are expected
> +                 */
> +                ifctx3 = aml_if(aml_equal(rev, one));
> +                {
> +                    /* TPM2[1] = PPRQ */
> +                    aml_append(ifctx3,
> +                               aml_store(pprq, aml_index(tpm2, one)));
> +                    aml_append(ifctx3, aml_return(tpm2));
> +                }
> +                aml_append(ifctx2, ifctx3);
> +
> +                /*
> +                 * A return value of {0, 23, 1} indicates that
> +                 * operation 23 with argument 1 is pending.
> +                 */
> +                ifctx3 = aml_if(aml_equal(rev, aml_int(2)));
> +                {
> +                    /* TPM3[1] = PPRQ */
> +                    aml_append(ifctx3,
> +                               aml_store(pprq, aml_index(tpm3, one)));
> +                    /* TPM3[2] = PPRM */
> +                    aml_append(ifctx3,
> +                               aml_store(pprm, aml_index(tpm3, aml_int(2))));
> +                    aml_append(ifctx3, aml_return(tpm3));
> +                }
> +                aml_append(ifctx2, ifctx3);
> +            }
> +            aml_append(ifctx, ifctx2);
> +
> +            /*
> +             * PPI 1.0: 2.1.5 Get Platform-Specific Action to Transition to
> +             *     Pre-OS Environment
> +             *
> +             * Arg 2 (Integer): Function Index = 4
> +             * Arg 3 (Package): Arguments = Empty Package
> +             * Returns: Type: Integer
> +             *          0: None
> +             *          1: Shutdown
> +             *          2: Reboot
> +             *          3: OS Vendor-specific
> +             */
> +            ifctx2 = aml_if(aml_equal(function, aml_int(4)));
> +            {
> +                /* reboot */
> +                aml_append(ifctx2, aml_return(aml_int(2)));
> +            }
> +            aml_append(ifctx, ifctx2);
> +
> +            /*
> +             * PPI 1.0: 2.1.6 Return TPM Operation Response to OS Environment
> +             *
> +             * Arg 2 (Integer): Function Index = 5
> +             * Arg 3 (Package): Arguments = Empty Package
> +             * Returns: Type: Package of Integer
> +             *          Integer 1: Function Return code
> +             *                     0: Success
> +             *                     1: General Failure
> +             *          Integer 2: Most recent operation request
> +             *                     0: None
> +             *                    >0: Operation Value of the most recent request
> +             *          Integer 3: Response to the most recent operation request
> +             *                     0: Success
> +             *                     0x00000001..0x00000FFF: Corresponding TPM
> +             *                                             error code
> +             *                     0xFFFFFFF0: User Abort or timeout of dialog
> +             *                     0xFFFFFFF1: firmware Failure
> +             */
> +            ifctx2 = aml_if(aml_equal(function, aml_int(5)));
> +            {
> +                /* TPM3[1] = LPPR */
> +                aml_append(ifctx2,
> +                           aml_store(aml_name("LPPR"),
> +                                     aml_index(tpm3, one)));
> +                /* TPM3[2] = PPRP */
> +                aml_append(ifctx2,
> +                           aml_store(aml_name("PPRP"),
> +                                     aml_index(tpm3, aml_int(2))));
> +                aml_append(ifctx2, aml_return(tpm3));
> +            }
> +            aml_append(ifctx, ifctx2);
> +
> +            /*
> +             * PPI 1.0: 2.1.7 Submit preferred user language
> +             *
> +             * Arg 2 (Integer): Function Index = 6
> +             * Arg 3 (Package): Arguments = String Package
> +             *                  Preferred language code
> +             * Returns: Type: Integer
> +             * Function Return Code
> +             *          3: Not implemented
> +             */
> +            ifctx2 = aml_if(aml_equal(function, aml_int(6)));
> +            {
> +                /* 3 = not implemented */
> +                aml_append(ifctx2, aml_return(aml_int(3)));
> +            }
> +            aml_append(ifctx, ifctx2);
> +
> +            /*
> +             * PPI 1.1: 2.1.7 Submit TPM Operation Request to
> +             *     Pre-OS Environment 2
> +             *
> +             * Arg 2 (Integer): Function Index = 7
> +             * Arg 3 (Package): Arguments = Package: Type: Integer
> +             *                  Integer 1: Operation Value of the Request
> +             *                  Integer 2: Argument for Operation (optional)
> +             * Returns: Type: Integer
> +             *          0: Success
> +             *          1: Not Implemented
> +             *          2: General Failure
> +             *          3: Operation blocked by current firmware settings
> +             */
> +            ifctx2 = aml_if(aml_equal(function, aml_int(7)));
> +            {
> +                /* get opcode */
> +                aml_append(ifctx2, aml_store(aml_derefof(aml_index(arguments,
> +                                                                   zero)),
> +                                             op));
> +
> +                /* get opcode flags */
> +                aml_append(ifctx2, aml_store(aml_call1("TPFN", op),
> +                                             op_flags));
> +                /* if func[opcode] & TPM_PPI_FUNC_NOT_IMPLEMENTED */
> +                ifctx3 = aml_if(
> +                    aml_equal(
> +                        aml_and(op_flags, func_mask, NULL),
> +                        not_implemented));
> +                {
> +                    /* 1: not implemented */
> +                    aml_append(ifctx3, aml_return(one));
> +                }
> +                aml_append(ifctx2, ifctx3);
> +
> +                /* if func[opcode] & TPM_PPI_FUNC_BLOCKED */
> +                ifctx3 = aml_if(
> +                    aml_equal(
> +                        aml_and(op_flags, func_mask, NULL),
> +                        aml_int(TPM_PPI_FUNC_BLOCKED)));
> +                {
> +                    /* 3: blocked by firmware */
> +                    aml_append(ifctx3, aml_return(aml_int(3)));
> +                }
> +                aml_append(ifctx2, ifctx3);
> +
> +                /* revision to integer */
> +                ifctx3 = aml_if(aml_equal(rev, one));
> +                {
> +                    /* revision 1 */
> +                    /* PPRQ = op */
> +                    aml_append(ifctx3, aml_store(op, pprq));
> +                    /* no argument, PPRM = 0 */
> +                    aml_append(ifctx3, aml_store(zero, pprm));
> +                }
> +                aml_append(ifctx2, ifctx3);
> +
> +                ifctx3 = aml_if(aml_equal(rev, aml_int(2)));
> +                {
> +                    /* revision 2 */
> +                    /* PPRQ = op */
> +                    op_arg = aml_derefof(aml_index(arguments, one));
> +                    aml_append(ifctx3, aml_store(op, pprq));
> +                    /* PPRM = arg3[1] */
> +                    aml_append(ifctx3, aml_store(op_arg, pprm));
> +                }
> +                aml_append(ifctx2, ifctx3);
> +                /* 0: success */
> +                aml_append(ifctx2, aml_return(zero));
> +            }
> +            aml_append(ifctx, ifctx2);
> +
> +            /*
> +             * PPI 1.1: 2.1.8 Get User Confirmation Status for Operation
> +             *
> +             * Arg 2 (Integer): Function Index = 8
> +             * Arg 3 (Package): Arguments = Package: Type: Integer
> +             *                  Operation Value that may need user confirmation
> +             * Returns: Type: Integer
> +             *          0: Not implemented
> +             *          1: Firmware only
> +             *          2: Blocked for OS by firmware configuration
> +             *          3: Allowed and physically present user required
> +             *          4: Allowed and physically present user not required
> +             */
> +            ifctx2 = aml_if(aml_equal(function, aml_int(8)));
> +            {
> +                /* get opcode */
> +                aml_append(ifctx2,
> +                           aml_store(aml_derefof(aml_index(arguments,
> +                                                           zero)),
> +                                     op));
> +
> +                /* get opcode flags */
> +                aml_append(ifctx2, aml_store(aml_call1("TPFN", op),
> +                                             op_flags));
> +                /* return confirmation status code */
> +                aml_append(ifctx2,
> +                           aml_return(
> +                               aml_and(op_flags, func_mask, NULL)));
> +            }
> +            aml_append(ifctx, ifctx2);
> +
> +            aml_append(ifctx, aml_return(aml_buffer(1, zerobyte)));
> +        }
> +        aml_append(method, ifctx);
> +    }
> +    aml_append(dev, method);
> +}
> +
>  static void
>  build_dsdt(GArray *table_data, BIOSLinker *linker,
>             AcpiPmInfo *pm, AcpiMiscInfo *misc,
> @@ -1802,6 +2183,7 @@ build_dsdt(GArray *table_data, BIOSLinker *linker,
>      uint32_t nr_mem = machine->ram_slots;
>      int root_bus_limit = 0xFF;
>      PCIBus *bus = NULL;
> +    TPMIf *tpm = tpm_find();
>      int i;
>  
>      dsdt = init_aml_allocator();
> @@ -2139,7 +2521,7 @@ build_dsdt(GArray *table_data, BIOSLinker *linker,
>              /* Scan all PCI buses. Generate tables to support hotplug. */
>              build_append_pci_bus_devices(scope, bus, pm->pcihp_bridge_en);
>  
> -            if (TPM_IS_TIS(tpm_find())) {
> +            if (TPM_IS_TIS(tpm)) {
>                  dev = aml_device("ISA.TPM");
>                  aml_append(dev, aml_name_decl("_HID", aml_eisaid("PNP0C31")));
>                  aml_append(dev, aml_name_decl("_STA", aml_int(0xF)));
> @@ -2153,6 +2535,9 @@ build_dsdt(GArray *table_data, BIOSLinker *linker,
>                   */
>                  /* aml_append(crs, aml_irq_no_flags(TPM_TIS_IRQ)); */
>                  aml_append(dev, aml_name_decl("_CRS", crs));
> +
> +                build_tpm_ppi(tpm, dev);
> +
>                  aml_append(scope, dev);
>              }
>  
> @@ -2160,7 +2545,7 @@ build_dsdt(GArray *table_data, BIOSLinker *linker,
>          }
>      }
>  
> -    if (TPM_IS_CRB(tpm_find())) {
> +    if (TPM_IS_CRB(tpm)) {
>          dev = aml_device("TPM");
>          aml_append(dev, aml_name_decl("_HID", aml_string("MSFT0101")));
>          crs = aml_resource_template();
> @@ -2172,6 +2557,8 @@ build_dsdt(GArray *table_data, BIOSLinker *linker,
>          aml_append(method, aml_return(aml_int(0x0f)));
>          aml_append(dev, method);
>  
> +        build_tpm_ppi(tpm, dev);
> +
>          aml_append(sb_scope, dev);
>      }
>  
> @@ -2924,7 +3311,7 @@ void acpi_setup(void)
>          tpm_config = (FWCfgTPMConfig) {
>              .tpmppi_address = cpu_to_le32(TPM_PPI_ADDR_BASE),
>              .tpm_version = tpm_get_version(tpm_find()),
> -            .tpmppi_version = TPM_PPI_VERSION_NONE
> +            .tpmppi_version = TPM_PPI_VERSION_1_30
>          };
>          fw_cfg_add_file(pcms->fw_cfg, "etc/tpm/config",
>                          &tpm_config, sizeof tpm_config);
> diff --git a/docs/specs/tpm.txt b/docs/specs/tpm.txt
> index a5bdd5f26e..332c2ae597 100644
> --- a/docs/specs/tpm.txt
> +++ b/docs/specs/tpm.txt
> @@ -62,6 +62,89 @@ URL:
>  
>  https://trustedcomputinggroup.org/tcg-acpi-specification/
>  
> +== ACPI PPI Interface ==
> +
> +QEMU supports the Physical Presence Interface (PPI) for TPM 1.2 and TPM 2. This
> +interface requires ACPI and firmware support. The specification can be found at
> +the following URL:
> +
> +https://trustedcomputinggroup.org/resource/tcg-physical-presence-interface-specification/
> +
> +PPI enables a system administrator (root) to request a modification to the
> +TPM upon reboot. The PPI specification defines the operation requests and the
> +actions the firmware has to take. The system administrator passes the operation
> +request number to the firmware through an ACPI interface which writes this
> +number to a memory location that the firmware knows. Upon reboot, the firmware
> +finds the number and sends commands to the the TPM. The firmware writes the TPM
> +result code and the operation request number to a memory location that ACPI can
> +read from and pass the result on to the administrator.
> +
> +The PPI specification defines a set of mandatory and optional operations for
> +the firmware to implement. The ACPI interface also allows an administrator to
> +list the supported operations. In QEMU the ACPI code is generated by QEMU, yet
> +the firmware needs to implement support on a per-operations basis, and
> +different firmwares may support a different subset. Therefore, QEMU introduces
> +the virtual memory device for PPI where the firmware can indicate which
> +operations it supports and ACPI can enable the ones that are supported and
> +disable all others. This interface lies in main memory and has the following
> +layout:
> +
> + +----------+--------+--------+-------------------------------------------+
> + |  Field   | Length | Offset | Description                               |
> + +----------+--------+--------+-------------------------------------------+
> + | func     |  0x100 |  0x000 | Firmware sets values for each supported   |
> + |          |        |        | operation. See defined values below.      |
> + +----------+--------+--------+-------------------------------------------+
> + | ppin     |   0x1  |  0x100 | SMI interrupt to use. Set by firmware.    |
> + |          |        |        | Not supported.                            |
> + +----------+--------+--------+-------------------------------------------+
> + | ppip     |   0x4  |  0x101 | ACPI function index to pass to SMM code.  |
> + |          |        |        | Set by ACPI. Not supported.               |
> + +----------+--------+--------+-------------------------------------------+
> + | pprp     |   0x4  |  0x105 | Result of last executed operation. Set by |
> + |          |        |        | firmware. See function index 5 for values.|
> + +----------+--------+--------+-------------------------------------------+
> + | pprq     |   0x4  |  0x109 | Operation request number to execute. See  |
> + |          |        |        | 'Physical Presence Interface Operation    |
> + |          |        |        | Summary' tables in specs. Set by ACPI.    |
> + +----------+--------+--------+-------------------------------------------+
> + | pprm     |   0x4  |  0x10d | Operation request optional parameter.     |
> + |          |        |        | Values depend on operation. Set by ACPI.  |
> + +----------+--------+--------+-------------------------------------------+
> + | lppr     |   0x4  |  0x111 | Last executed operation request number.   |
> + |          |        |        | Copied from pprq field by firmware.       |
> + +----------+--------+--------+-------------------------------------------+
> + | fret     |   0x4  |  0x115 | Result code from SMM function.            |
> + |          |        |        | Not supported.                            |
> + +----------+--------+--------+-------------------------------------------+
> + | res1     |  0x40  |  0x119 | Reserved for future use                   |
> + +----------+--------+--------+-------------------------------------------+
> + | next_step|   0x1  |  0x159 | Operation to execute after reboot by      |
> + |          |        |        | firmware. Used by firmware.               |
> + +----------+--------+--------+-------------------------------------------+
> +
> +   The following values are supported for the 'func' field. They correspond
> +   to the values used by ACPI function index 8.
> +
> + +----------+-------------------------------------------------------------+
> + | value    | Description                                                 |
> + +----------+-------------------------------------------------------------+
> + | 0        | Operation is not implemented.                               |
> + +----------+-------------------------------------------------------------+
> + | 1        | Operation is only accessible through firmware.              |
> + +----------+-------------------------------------------------------------+
> + | 2        | Operation is blocked for OS by firmware configuration.      |
> + +----------+-------------------------------------------------------------+
> + | 3        | Operation is allowed and physically present user required.  |
> + +----------+-------------------------------------------------------------+
> + | 4        | Operation is allowed and physically present user is not     |
> + |          | required.                                                   |
> + +----------+-------------------------------------------------------------+
> +
> +The location of the table is given by the fw_cfg tpmppi_address field.
> +The PPI memory region size is 0x400 (TPM_PPI_ADDR_SIZE) to leave
> +enough room for future updates.
> +
>  
>  QEMU files related to TPM ACPI tables:
>   - hw/i386/acpi-build.c
> 

