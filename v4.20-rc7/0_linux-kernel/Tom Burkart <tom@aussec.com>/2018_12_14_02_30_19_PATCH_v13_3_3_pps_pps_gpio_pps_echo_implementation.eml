Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  14 Dec 2018 20:23:33 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga007.fm.intel.com (fmsmga007.fm.intel.com [10.253.24.52])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id C509358079D;
	Thu, 13 Dec 2018 18:32:10 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by fmsmga007-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 13 Dec 2018 18:32:09 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AKoSC4R3N8gmJ1t7GsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segSL/7xwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJBUMhPSiJPDICy?=
 =?us-ascii?q?YYwNAOoPJuZYt4vwqkASoReiHwSgGPnixiNUinLwwKY00/4hEQbD3AE4AdwOt3?=
 =?us-ascii?q?HUp8joOacPS+C1z7PHzS/fb/hL3jr99I/IchU6rP6WQLJwatHRxlczGA/fklqQ?=
 =?us-ascii?q?ronlMiqT2+8QsGab9/JtWfyzh2MjsQ19vzaiytk2hoXUhY8Z1krI+CR7zYotON?=
 =?us-ascii?q?G0UlN3bcCnHZdKqS2WKY97Ttk/T2xnuys3zKANt4ShcygQ0psnwgbSa/yZfIiM?=
 =?us-ascii?q?5RLuTPiRIThmi3J/Yr6/hAi98VKmyuLiUsm4ylFKrjBKktXUt3AN0QLc6tSfR/?=
 =?us-ascii?q?dj4kus3SyD2x3d5+1aO0w4iKnWJ4I7zrMxlJcfqUHDETX3mEXygq+WbEIk+u2w?=
 =?us-ascii?q?5uTjY7XmoIKcNoBthgH9LKsugMq/Dvo8MgQXWGia9+K826P5/UDiXrVKgeM5kr?=
 =?us-ascii?q?PDvJDZO8sbvKi5DBFR0oo57Ba/FTim3MwCnXYbNFJFZA6Hj4/xNlHKIfD4Dumw?=
 =?us-ascii?q?j06jkTd23P3GOrzhApPQLnnMirvhfLB961JCxwo319xQ+5VUCrQZKvLpRkDxrM?=
 =?us-ascii?q?DYDgM+MwGsw+boEtR91p8EVmKIGKOZML7SvkWO5uIgOOSMYI4VuDDgK/kq/fLu?=
 =?us-ascii?q?jHk5mUMDcqmtx5cYdHe4HvF+KUWDfXXsmssBEXsNvgcmTuzqj0ONXSRQZ3a1Wa?=
 =?us-ascii?q?I84DY7BZmiDYfCQICtnbOA0D26Hp1QemBJFFSMHW30eIWDXvcGcDiSLdN5kjwY?=
 =?us-ascii?q?SbihTJcs2gu1tA/6zLpnLfDY+jcCupLhz9V14+zTlRcv9T17Fcid0meNT31qkW?=
 =?us-ascii?q?MMXTM5wKd/oUllwFeZzad4m+BYFcBU5/5RUQc1L5jcw/Z+C9DzQA3BeNiJRU2i?=
 =?us-ascii?q?QtWnBzExU90wz8UPY0Z7B9WtkBTD0zC2DL8SkryBHIY0/b7E33jtO8Z9zG7L27?=
 =?us-ascii?q?Q7gFk4XMRDL22mibR59wjIGYHJlUKVl6KpdaQZ2C7A72ODzWuIvEFFXw98S6TF?=
 =?us-ascii?q?XXYDZkTIqdT1/F/NT7irCb4/KAtO1daCKrdWat3ulVhJWe3sOMrAbG6rm2e/Hx?=
 =?us-ascii?q?CIxqiSY4rsYGgd2CTdCE4ZkwEc53qGNA4+Bju/rGLaFjBhCVXvY0b0++lktHy7?=
 =?us-ascii?q?VlM0zx2Nb0B5y7q1+xsVhfuAS/MT3rMIojshpy9zHFan29LWCtyApwV6caVYYN?=
 =?us-ascii?q?M95kpH1G3Duwx8OJygM75thloEfwtruEPu0g19Cp9cnsgysHMq0A1yJLqC31NF?=
 =?us-ascii?q?aTyZ0o7/O73NJmbp4RCgdrTZ2lfd0NaR5KcC8/A4q1TlvAG0GUsu6XRn099J03?=
 =?us-ascii?q?SC4pXGFhYdUZX0Ukwv7Rh1u6naYjUh54PTzXBtMbS0viXe1N4zBeolygyvf9FQ?=
 =?us-ascii?q?MK6fEA/yEssaB9WhKeAwmlipaA4EM/5W9KIuI8ymcP6G0raxPOl8hDKmkXhH4I?=
 =?us-ascii?q?dl30KW9ipzVvTH34wYzPGfxAeHUSnzjE2gsszuhY9LfzUSEXehxij+A45RYLZ/?=
 =?us-ascii?q?fYIKCWeoPs22yc9yh5/rW35E6lGjA0kK19OueRqXd1b9xxFf1VwLoXy7niu11z?=
 =?us-ascii?q?x1kzAzoqufxiDO2PnidBwcN25PRWlii0rsIIeug9AbWkiocxYmlB+/6UnmwKhb?=
 =?us-ascii?q?obx1L3PPTkdQYyj2M2ZiX7OytrWYec5P65AosSJNXOSne1+aSb39oxoc0yz9GW?=
 =?us-ascii?q?tT3zQ7dzCsupXkkB12kmOdLHBvrHXHfcF83wvQ5NvZRfRJxDoJWDF4iSXLBli7?=
 =?us-ascii?q?J9So/c+bl5DZvuC8VmKhUIZecS3qzYOGqSu66ndmARy5n/CvhNLnFRI23jP819?=
 =?us-ascii?q?lvTS/ItgrzYpH316SmNuJqZkpoC0X968ZgGoF+j5E/hJcf2XUBgpWV/HwHkXr8?=
 =?us-ascii?q?MNlB2KL+amYNSiAPw9LP/Afl30hjJGqTx43lTnWd3tdhZ96ib2MT2yI97NpFBL?=
 =?us-ascii?q?2a7bNahit1vkS3rRjKbvdjhDcdxuAj6Hobg+EPpQoswT+RArEUHUlEIyPskw6E?=
 =?us-ascii?q?4My5rKVSfGyva6S/1FJindC9C7GPuh1cWHH8eps4HC5/9MN/ME/X0H3o64HpY9?=
 =?us-ascii?q?3QbdMVth2JnBbMlelVKJQtlvUUgSprI37yvXogy+QjlxxhwYm6vJSbK2Vq5K+2?=
 =?us-ascii?q?GQRXNjrxZ8MO4D3tibtek92S34CuGJVhBzoKUIHpTfKuDDIdq/DnOxySHz07r3?=
 =?us-ascii?q?eRAaDfEhOH6Ed6s3LPFIimN3ONK3kc09piXwORJFBFjAAXQTU6nYM5Fgawy8z6?=
 =?us-ascii?q?a0p54jER5ljlqhpD0O5oNh//UnvBqwescDs7VJ+fLB9O5AFY+0jVKdCe7v50Hy?=
 =?us-ascii?q?xA/pyhqxGNKnWGZwtSC2EFQFeEB1flPrmh/tTA9+mYBuyjL/rBe7mOqOpeV+uW?=
 =?us-ascii?q?ypKryIdp4zGMNsCXNHl4E/I7wlZDXWx+G8nBmzUAVS0XlyHOb86avhu8+Td3rs?=
 =?us-ascii?q?ew8Pv1QgLv+JCPBqBWMdVu/RC2nKiCO/SRhCZ/NTZXyJcMyWXUx7gY2V4Ykztu?=
 =?us-ascii?q?eCW1EbQcqS7NS7rdlbVKDxEAcSN8KstJ47g43glMIsPbjtL11rhljv86EVtFVF?=
 =?us-ascii?q?rhmt23aswOOW2yKFTHBEOTPrScOTLL2933Yb+7SbBIkOVUthiwtSyHHEP5IjuD?=
 =?us-ascii?q?lyfmVxa0POFIjSGbOgFeuY6nfhZsD2jjUMzpahmhPNBrij02xKU+hmnWOm4ELT?=
 =?us-ascii?q?h8b0RNo6WQ7CxChPV/Hm1B7nx9IuiFmyaW9e/YKpkNvPtvAyR0kf9a4Xsgx7tU?=
 =?us-ascii?q?6iFEWOJ6mC/IotFypFGml7rH9j0ydBtItyYDh4+Ru0hmcaDQ951BX3mM+BMW8S?=
 =?us-ascii?q?3EDxUMussgCdD1va1U4sbAmbi1KzpY9d/Qu8wGCJ6HBtiANS8dNh+hMiPODwIf?=
 =?us-ascii?q?UXb/KWbar0VAi+qf/TueqZ1s+cuko4YHVrIODA99LfgdEEkwWYVaeJo=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AEAADnFRNch0O0hNFjGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUQYBAQELAYFaghEnjBWMEYIhl0EUgV8SAQEYEwGHRSI0CQ0BAwEBAQE?=
 =?us-ascii?q?BAQIBEwEBAQgNCQgpIwyCNiQBgmIDAwECJBkBATcBBQkBAVADVAYTBYJRS4IAA?=
 =?us-ascii?q?QWmUoFsM4J2AQEFgQCGKQiHfYMlgRwXgX+BEYd7AYVyiTmBfYQVgU+PewmCKIQ?=
 =?us-ascii?q?liwELGJFLmSkCBAsCFIFGgg5NIxU7gmyCGwwXg0qKZywygQQBAQE7jCoBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AEAADnFRNch0O0hNFjGwEBAQEDAQEBBwMBAQGBUQYBAQE?=
 =?us-ascii?q?LAYFaghEnjBWMEYIhl0EUgV8SAQEYEwGHRSI0CQ0BAwEBAQEBAQIBEwEBAQgNC?=
 =?us-ascii?q?QgpIwyCNiQBgmIDAwECJBkBATcBBQkBAVADVAYTBYJRS4IAAQWmUoFsM4J2AQE?=
 =?us-ascii?q?FgQCGKQiHfYMlgRwXgX+BEYd7AYVyiTmBfYQVgU+PewmCKIQliwELGJFLmSkCB?=
 =?us-ascii?q?AsCFIFGgg5NIxU7gmyCGwwXg0qKZywygQQBAQE7jCoBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,351,1539673200"; 
   d="scan'208";a="56853633"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 13 Dec 2018 18:32:09 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729327AbeLNCcF (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 13 Dec 2018 21:32:05 -0500
Received: from csm1.csm-office.com.au ([165.228.118.109]:38708 "EHLO
        sleepy.aussec.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1729250AbeLNCcA (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 13 Dec 2018 21:32:00 -0500
X-Virus-Scanned: amavisd-new at aussec.com
Received: from localhost.localdomain ([1.128.229.148])
        (authenticated bits=0)
        by sleepy.aussec.com (8.15.2/8.15.2) with ESMTPSA id wBE2UxcE004738
        (version=TLSv1.2 cipher=DHE-RSA-AES128-SHA bits=128 verify=NO);
        Fri, 14 Dec 2018 13:31:33 +1100
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=aussec.com; s=2016;
        t=1544754694; bh=vlqXIxxwLTH77D93HQG3sPOxtpN2R8BaYvqnwtHn6/M=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References;
        b=vkAwf3WovFd0bN5ZGHHTvutGUAhV6P2VUGQcQygTczCtYRu//rr28JcJqQ8Vit29U
         eu5dP1rM5QpnRaCJvE8FKsZyDpGNbLAHhJOfnPZKSuCQb1Fn5JeJjMCcxxAhOXOz4r
         fb8FJaZ98wCJ6EPI7w8VKMO3XwXh57bEImXljP1XqAf50b9p9OeE8+ADpugv/ICL5m
         Y+fILTmKurcT6RPLhHYFMNaJFss4OZ9ZByER68bdZGClBu6EoxGfdcKul43jCgi9FZ
         MNSKIWfWXWF72+w7VRPi53QgL5rI2ZVwihrqHg1QV+/FLDNEsS/uoTyKTAk5z/FblZ
         ppIyiYxwyL7Dg==
From: Tom Burkart <tom@aussec.com>
To: Linux kernel mailing list <linux-kernel@vger.kernel.org>
Cc: Tom Burkart <tom@aussec.com>,
        Rodolfo Giometti <giometti@enneenne.com>,
        Ricardo Martins <rasm@fe.up.pt>,
        James Nuss <jamesnuss@nanometrics.ca>,
        Lukas Senger <lukas@fridolin.com>
Subject: [PATCH v13 3/3] pps: pps-gpio pps-echo implementation
Date: Fri, 14 Dec 2018 13:30:19 +1100
Message-Id: <20181214023019.18805-4-tom@aussec.com>
X-Mailer: git-send-email 2.12.3
In-Reply-To: <20181214023019.18805-3-tom@aussec.com>
References: <20181214023019.18805-1-tom@aussec.com>
 <20181214023019.18805-2-tom@aussec.com>
 <20181214023019.18805-3-tom@aussec.com>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This patch implements the pps echo functionality for pps-gpio, that
sysfs claims is available already.

Configuration is done via device tree bindings.

This patch was originally written by Lukas Senger as part of a masters
thesis project and modified for inclusion into the linux kernel by Tom
Burkart.

Signed-off-by: Lukas Senger <lukas@fridolin.com>
Signed-off-by: Tom Burkart <tom@aussec.com>
---
 drivers/pps/clients/pps-gpio.c | 94 ++++++++++++++++++++++++++++++++++++++++--
 include/linux/pps-gpio.h       |  2 +
 2 files changed, 93 insertions(+), 3 deletions(-)

diff --git a/drivers/pps/clients/pps-gpio.c b/drivers/pps/clients/pps-gpio.c
index 5d764dceabc5..b239c4b9ff51 100644
--- a/drivers/pps/clients/pps-gpio.c
+++ b/drivers/pps/clients/pps-gpio.c
@@ -35,6 +35,8 @@
 #include <linux/list.h>
 #include <linux/of_device.h>
 #include <linux/of_gpio.h>
+#include <linux/timer.h>
+#include <linux/jiffies.h>
 
 /* Info for each registered platform device */
 struct pps_gpio_device_data {
@@ -42,8 +44,13 @@ struct pps_gpio_device_data {
 	struct pps_device *pps;		/* PPS source device */
 	struct pps_source_info info;	/* PPS source information */
 	struct gpio_desc *gpio_pin;	/* GPIO port descriptors */
+	struct gpio_desc *echo_pin;
+	struct timer_list echo_timer;	/* timer to reset echo active state */
 	bool assert_falling_edge;
 	bool capture_clear;
+	bool enable_pps_echo;
+	unsigned int echo_active_ms;	/* PPS echo active duration */
+	unsigned long echo_timeout;	/* timer timeout value in jiffies */
 };
 
 /*
@@ -64,19 +71,57 @@ static irqreturn_t pps_gpio_irq_handler(int irq, void *data)
 	rising_edge = gpiod_get_value(info->gpio_pin);
 	if ((rising_edge && !info->assert_falling_edge) ||
 			(!rising_edge && info->assert_falling_edge))
-		pps_event(info->pps, &ts, PPS_CAPTUREASSERT, NULL);
+		pps_event(info->pps, &ts, PPS_CAPTUREASSERT, data);
 	else if (info->capture_clear &&
 			((rising_edge && info->assert_falling_edge) ||
 			(!rising_edge && !info->assert_falling_edge)))
-		pps_event(info->pps, &ts, PPS_CAPTURECLEAR, NULL);
+		pps_event(info->pps, &ts, PPS_CAPTURECLEAR, data);
 
 	return IRQ_HANDLED;
 }
 
+static void pps_gpio_echo(struct pps_device *pps, int event, void *data)
+{
+	/* add_timer() needs to write into info->echo_timer */
+	struct pps_gpio_device_data *info;
+
+	info = data;
+
+	switch (event) {
+	case PPS_CAPTUREASSERT:
+		if (pps->params.mode & PPS_ECHOASSERT)
+			gpiod_set_value(info->echo_pin, 1);
+		break;
+
+	case PPS_CAPTURECLEAR:
+		if (pps->params.mode & PPS_ECHOCLEAR)
+			gpiod_set_value(info->echo_pin, 1);
+		break;
+	}
+
+	/* fire the timer */
+	if (info->pps->params.mode & (PPS_ECHOASSERT | PPS_ECHOCLEAR)) {
+		info->echo_timer.expires = jiffies + info->echo_timeout;
+		add_timer(&info->echo_timer);
+	}
+}
+
+/* Timer callback to reset the echo pin to the inactive state */
+static void pps_gpio_echo_timer_callback(struct timer_list *t)
+{
+	const struct pps_gpio_device_data *info;
+
+	info = from_timer(info, t, echo_timer);
+
+	gpiod_set_value(info->echo_pin, 0);
+}
+
 static int pps_gpio_setup(struct platform_device *pdev)
 {
 	struct pps_gpio_device_data *data = platform_get_drvdata(pdev);
 	struct device_node *np = pdev->dev.of_node;
+	int ret;
+	u32 value;
 
 	data->gpio_pin = devm_gpiod_get(&pdev->dev,
 		NULL,	/* request "gpios" */
@@ -87,6 +132,35 @@ static int pps_gpio_setup(struct platform_device *pdev)
 		return PTR_ERR(data->gpio_pin);
 	}
 
+	if (of_property_read_bool(np, "echo-gpios")) {
+		data->enable_pps_echo = true;
+
+		data->echo_pin = devm_gpiod_get(&pdev->dev,
+			"echo",
+			GPIOD_OUT_LOW);
+		if (IS_ERR(data->echo_pin)) {
+			dev_err(&pdev->dev, "failed to request ECHO GPIO\n");
+			return PTR_ERR(data->echo_pin);
+		}
+
+		ret = of_property_read_u32(np,
+			"echo-active-ms",
+			&value);
+		if (ret) {
+			dev_err(&pdev->dev,
+				"failed to get echo-active-ms from OF\n");
+			return ret;
+		}
+		data->echo_active_ms = value;
+		/* sanity check on echo_active_ms */
+		if (!data->echo_active_ms || data->echo_active_ms > 999) {
+			dev_err(&pdev->dev,
+				"echo-active-ms: %u - bad value from OF\n",
+				data->echo_active_ms);
+			return -EINVAL;
+		}
+	}
+
 	if (of_property_read_bool(np, "assert-falling-edge"))
 		data->assert_falling_edge = true;
 	return 0;
@@ -122,9 +196,13 @@ static int pps_gpio_probe(struct platform_device *pdev)
 	/* GPIO setup */
 	if (pdata) {
 		data->gpio_pin = pdata->gpio_pin;
+		data->echo_pin = pdata->echo_pin;
+		if (pdata->echo_pin != NULL)
+			data->enable_pps_echo = true;
 
 		data->assert_falling_edge = pdata->assert_falling_edge;
 		data->capture_clear = pdata->capture_clear;
+		data->echo_active_ms = pdata->echo_active_ms;
 	} else {
 		ret = pps_gpio_setup(pdev);
 		if (ret)
@@ -148,6 +226,11 @@ static int pps_gpio_probe(struct platform_device *pdev)
 	data->info.owner = THIS_MODULE;
 	snprintf(data->info.name, PPS_MAX_NAME_LEN - 1, "%s.%d",
 		 pdev->name, pdev->id);
+	if (data->enable_pps_echo) {
+		data->info.echo = pps_gpio_echo;
+		data->echo_timeout = msecs_to_jiffies(data->echo_active_ms);
+		timer_setup(&data->echo_timer, pps_gpio_echo_timer_callback, 0);
+	}
 
 	/* register PPS source */
 	pps_default_params = PPS_CAPTUREASSERT | PPS_OFFSETASSERT;
@@ -180,6 +263,11 @@ static int pps_gpio_remove(struct platform_device *pdev)
 	struct pps_gpio_device_data *data = platform_get_drvdata(pdev);
 
 	pps_unregister_source(data->pps);
+	if (data->enable_pps_echo) {
+		del_timer_sync(&data->echo_timer);
+		/* reset echo pin in any case */
+		gpiod_set_value(data->echo_pin, 0);
+	}
 	dev_info(&pdev->dev, "removed IRQ %d as PPS source\n", data->irq);
 	return 0;
 }
@@ -204,4 +292,4 @@ MODULE_AUTHOR("Ricardo Martins <rasm@fe.up.pt>");
 MODULE_AUTHOR("James Nuss <jamesnuss@nanometrics.ca>");
 MODULE_DESCRIPTION("Use GPIO pin as PPS source");
 MODULE_LICENSE("GPL");
-MODULE_VERSION("1.1.0");
+MODULE_VERSION("1.2.0");
diff --git a/include/linux/pps-gpio.h b/include/linux/pps-gpio.h
index f028d2cda6f5..44171e6b7197 100644
--- a/include/linux/pps-gpio.h
+++ b/include/linux/pps-gpio.h
@@ -24,8 +24,10 @@
 
 struct pps_gpio_platform_data {
 	struct gpio_desc *gpio_pin;
+	struct gpio_desc *echo_pin;
 	bool assert_falling_edge;
 	bool capture_clear;
+	unsigned int echo_active_ms;
 };
 
 #endif /* _PPS_GPIO_H */
-- 
2.12.3

