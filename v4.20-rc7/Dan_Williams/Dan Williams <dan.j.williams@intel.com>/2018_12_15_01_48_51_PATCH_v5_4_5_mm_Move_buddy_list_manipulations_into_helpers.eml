Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  15 Dec 2018 13:11:45 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 831AC58061F;
	Fri, 14 Dec 2018 18:01:34 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga004-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 14 Dec 2018 18:01:34 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AJXkI8xXkFEylRQQuruS1XpFFhpHV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhCBv6dThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGp6y?=
 =?us-ascii?q?YYsRAeQPPuhXrYf9qFUBohSiCgesH/vvxz1Ti3/q36A3yfgtHR3c0QEiGd8FrX?=
 =?us-ascii?q?TarM/yNKcXSe27wrPHzTPeZPxW2Df97IzIchE7rvGJRrJ7bM3cxlQ1GAPDlFmQ?=
 =?us-ascii?q?q5bpPj2U1uQJt2ib7vBvVee0i2M8qgFxpCSvydkoioXTmo0VzVXE+Dx/zY0oJt?=
 =?us-ascii?q?O4UFZ2bcC4HJZUrS2WKoV7Tt04T211uys21qcKtJ+5cSQS1ZgqyRHSZ+aaf4WG?=
 =?us-ascii?q?7R/vTvudLDl5iX5/Zr6zmxC/+lW6xOLmTMm7ylNKozJFktbSsnAN0ATe6taISv?=
 =?us-ascii?q?Rj5EetwzWP2B7J6uFCP080kbDXK5k7wr4/jpYTsELDETHqmEjukqOaakEp9vK1?=
 =?us-ascii?q?5+npfLnqvIKQOoxohg3kM6kjmNSzAeEiPQgPW2ib9/681Lrm/UDhRLVKj/s2kr?=
 =?us-ascii?q?TWsZzDJsQUuLS5AwlL3YYn8hq/CDmn0NIGknkdN19FZh2HgJbzO13UI/D3E+2/?=
 =?us-ascii?q?g1Kynzdv3fzGOafhAprVInjZjLjhZap961JbyAcrydBf5pFUBa8bLPP8R0/8r9?=
 =?us-ascii?q?jYDh4/MwypzOfrEtR91oUCWW2RBq+VKr/dsViN5ug3OemDeJcVuCrhK/gi//Pu?=
 =?us-ascii?q?jWU2mV4Bfaaz2psbcnC4Hul8LEWfbnrhmdMBEWYMvgojQ+3mklyCUThPZ3msW6?=
 =?us-ascii?q?Iw/C00CIWjDY3bXICinKSB3DunHp1Rfm1GCFeMHmnye4WHXPcMbiSSIsh6nzwA?=
 =?us-ascii?q?VLihTZIh1B60uA/7zbpnMvTb+ikCuZ3/09h14vXZlQsu+jxsE8Sdz2aNQnlukW?=
 =?us-ascii?q?MTRz8226N/rVZnyliZ06h1mPhYFd1V5/NUXQY2L5/cz+pmC9/sXgLNZMuGSFGj?=
 =?us-ascii?q?Qt++GzE+Usoxw8MSY0Z6A9iijQrM3yywD78RlryEHpo08q3H0nj1JsZ9zWvG1a?=
 =?us-ascii?q?Y7g1knRMtPKXOphqpl+wfPAI7Jll2Tl7y2eqQEwC7N6GCDwHKTs05CTg5/T7/J?=
 =?us-ascii?q?XXAFaUvQttT2+EXCQ7iqCbQkNwtBzdWPKq9Lat3vkFVHS+3vONXYY2KthWiwAQ?=
 =?us-ascii?q?yEya+LbIrvY28dxjnSCFAYkwAP+naLLRUxCT2/o23AFjBuFUjgY0X38eZgrnO2?=
 =?us-ascii?q?VUs0zwCMb0182Lu54B8VhfqAS/wN2rIIojsuqzJxHFylxdLZF8KApxZ9fKVbed?=
 =?us-ascii?q?49/FZH1WfetwxhPpyhL7puhkIEfwRwpUPu0xR3CoNPkcUxqHMqzQxyKb+X0V9b?=
 =?us-ascii?q?djOY24zwNaPTKmXo4B+vbKvW0EnE0NmK4qcP9Og4q1L7sQ6zEkot7Xpm3MdV0n?=
 =?us-ascii?q?eG/ZrKERcdXoj3UkY08Bh6uarXYi0854PSyH1tPrO4sj7E29I1GuQlzgyscMtY?=
 =?us-ascii?q?MKOBDAXyCdEVB9CyKOw2nFikdhIFPP1I+KEoJc+ndvuG17StPOZvhz+miWVH4I?=
 =?us-ascii?q?Zg0kOD7SZ8S+jI34obzPGcxAeISzD8jFK5uMDthY9EfS0SHna4ySX8Ho5RZ7F9?=
 =?us-ascii?q?cpwRCWizJM273NN+iID3W35Z7VKsG0kJ2Mu0dhWMdVz92gtQ2F8ToXymnyu40j?=
 =?us-ascii?q?N1nysorqqZwCzB3eDieAAbNW5MQWlolU3sLpSsj9AGQEioaBAklRuk5Urgx6lX?=
 =?us-ascii?q?vr9/L3TVQUpTeyj2LmdiUra/t7aYYs5P7o8ovjtTUOimfV+aTbv9qQMA0yz/B2?=
 =?us-ascii?q?te2Cw7dzayt5X7hRN6kmGdLHV0rHbDYsF/3xTf5N/dRf5XwDUGQjJ1iT3WBli6?=
 =?us-ascii?q?Itmo8s+Yl5bFsuCiSW2hUodffjXszYOFrCG7/3FlAQWjn/Cvnd3qCQg73jX819?=
 =?us-ascii?q?VwVyXIrRD8b5Lv16S7N+JnY0ZpCEX968p8BoFxjI8wiIsM1ngdg5Wf5WAHnnvr?=
 =?us-ascii?q?MdVHxaL+a2IART0RzN7U+gTl2FBjIWiPx4L2TXidxsphZ9+nYmIZwC497sZKCL?=
 =?us-ascii?q?uK47xAhyd6vl24rQfJa/hngjgd0ecu6GIdg+wRvQotzyadDaoIEUhWIyPsjAiI?=
 =?us-ascii?q?4M6krKpMemmva7ew2VF6ndCgCrGCvw5dVGz4epckAS9/8MF/PEjQ333074HuYM?=
 =?us-ascii?q?PQYs4Lth2IjxfAiPBYKI42lvoPnyZmOHjyvXs4y+4glhxu3Iq3vIyGK2Vr4aK4?=
 =?us-ascii?q?DQRUNjzzZ8MP5D7tibxSkdqR34CqBp9hACkEXIP0TfK0FzIfre/oOByJED04t3?=
 =?us-ascii?q?eXA77fHRKE5UdirnLPFY2rNn6NKHkYy9ViWAeSJEhFjA8IWzU6m4YzFhq2y8z5?=
 =?us-ascii?q?bEd5+jcR60b6qhRWz+JnKQL/Xn3DpAuyaTc0VZufLAdQ7g5Y/EfYKsie7uN1Hy?=
 =?us-ascii?q?FF8Zyttg2NKmqHZwtWCWEFQFCLB1fmPrO2/9nP7/CYBvaiL/vJebiPqeteV+qR?=
 =?us-ascii?q?xZKyyIRm+SyANt6IPnlkAP02wU5DXXF/G8TElDQDUS0XlyTRb8GFoBew4DF4rs?=
 =?us-ascii?q?e68P7zQgLg+ZOPC6dOMdVo4x22gbmMN++ThCZ6KDZUzJAMxWXPyLgQwlESkTxu?=
 =?us-ascii?q?dyK2HLQEtC7NSr/Qm6BNAx4abSNzKNVH76Ym0gZRPs7bj8v/1qRkgf4tF1dFSV?=
 =?us-ascii?q?vhl9mzaswXOG69Lk3IBUaROLSCJD3G2MX3YaK6Sb1Ng+RYrRywuTCHE0D9OjSP?=
 =?us-ascii?q?jSXmVxeqMetUliGUIAReuJ2hchZqEWXjUNPmahihPNBrlzE53b00iW3MNWMHNT?=
 =?us-ascii?q?h8ckVNrqCf7C9Cg/V/HXBB4WRhLeWehymZ6OzYII4MsfR3GiR0i/5a4HMixrpV?=
 =?us-ascii?q?9i5EQvl1mCrUrtF2olCmkvOAyjxoUBdVrjZLhYSLvVhtOKnD95lAX2rE8wwJ7W?=
 =?us-ascii?q?mKFxsKoN5lWZXTvPVZycDKvKbyLipSttzT4M0QDtTVL8TBN2AuYjTzHzuBIAID?=
 =?us-ascii?q?BQGqMWXejklG2KWe/3vTrN4lq5zomZMLUZdaUkA4ErURDUEzT49KG4t+Qj5xye?=
 =?us-ascii?q?3Tt8UP/3fr6UCJHMg=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0CJAAALYBRch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBVAQBAQsBg1kSJ4N8iHiLGSmBPzmDMZYIERgTAYQ7A4MJIjcGDQEDAQEBAQE?=
 =?us-ascii?q?BAgETAQEBCgsJCCkvgjYkAYJiAwMBAiAEUgYJAQEkAiYCAgNEEBkFgxyCAQWlU?=
 =?us-ascii?q?HwziiyBC4szeoEcgUSCMYg1glcCiUKGUTeFK4sjBwKCKIglhyWLU4V/mWGBXIF?=
 =?us-ascii?q?4TSNQgmyCJxeOPh4BATEBgQQBAY0+AQE?=
X-IPAS-Result: =?us-ascii?q?A0CJAAALYBRch0O0hNFkHAEBAQQBAQcEAQGBVAQBAQsBg1k?=
 =?us-ascii?q?SJ4N8iHiLGSmBPzmDMZYIERgTAYQ7A4MJIjcGDQEDAQEBAQEBAgETAQEBCgsJC?=
 =?us-ascii?q?CkvgjYkAYJiAwMBAiAEUgYJAQEkAiYCAgNEEBkFgxyCAQWlUHwziiyBC4szeoE?=
 =?us-ascii?q?cgUSCMYg1glcCiUKGUTeFK4sjBwKCKIglhyWLU4V/mWGBXIF4TSNQgmyCJxeOP?=
 =?us-ascii?q?h4BATEBgQQBAY0+AQE?=
X-IronPort-AV: E=Sophos;i="5.56,355,1539673200"; 
   d="scan'208";a="56457832"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 14 Dec 2018 18:01:32 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730086AbeLOCB3 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 14 Dec 2018 21:01:29 -0500
Received: from mga02.intel.com ([134.134.136.20]:36217 "EHLO mga02.intel.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1727668AbeLOCB1 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 14 Dec 2018 21:01:27 -0500
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from fmsmga007.fm.intel.com ([10.253.24.52])
  by orsmga101.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 14 Dec 2018 18:01:27 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,355,1539673200"; 
   d="scan'208";a="107576249"
Received: from dwillia2-desk3.jf.intel.com (HELO dwillia2-desk3.amr.corp.intel.com) ([10.54.39.16])
  by fmsmga007.fm.intel.com with ESMTP; 14 Dec 2018 18:01:26 -0800
Subject: [PATCH v5 4/5] mm: Move buddy list manipulations into helpers
From: Dan Williams <dan.j.williams@intel.com>
To: akpm@linux-foundation.org
Cc: Michal Hocko <mhocko@suse.com>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        peterz@infradead.org, linux-mm@kvack.org, x86@kernel.org,
        linux-kernel@vger.kernel.org
Date: Fri, 14 Dec 2018 17:48:51 -0800
Message-ID: <154483853154.1672629.2203749169719124261.stgit@dwillia2-desk3.amr.corp.intel.com>
In-Reply-To: <154483851047.1672629.15001135860756738866.stgit@dwillia2-desk3.amr.corp.intel.com>
References: <154483851047.1672629.15001135860756738866.stgit@dwillia2-desk3.amr.corp.intel.com>
User-Agent: StGit/0.18-2-gc94f
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

In preparation for runtime randomization of the zone lists, take all
(well, most of) the list_*() functions in the buddy allocator and put
them in helper functions. Provide a common control point for injecting
additional behavior when freeing pages.

Cc: Michal Hocko <mhocko@suse.com>
Cc: Dave Hansen <dave.hansen@linux.intel.com>
Signed-off-by: Dan Williams <dan.j.williams@intel.com>
---
 include/linux/mm.h       |    3 --
 include/linux/mm_types.h |    3 ++
 include/linux/mmzone.h   |   51 ++++++++++++++++++++++++++++++++++
 mm/compaction.c          |    4 +--
 mm/page_alloc.c          |   70 ++++++++++++++++++----------------------------
 5 files changed, 84 insertions(+), 47 deletions(-)

diff --git a/include/linux/mm.h b/include/linux/mm.h
index f9647779e82b..43e5a449caaf 100644
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@ -473,9 +473,6 @@ static inline void vma_set_anonymous(struct vm_area_struct *vma)
 struct mmu_gather;
 struct inode;
 
-#define page_private(page)		((page)->private)
-#define set_page_private(page, v)	((page)->private = (v))
-
 #if !defined(__HAVE_ARCH_PTE_DEVMAP) || !defined(CONFIG_TRANSPARENT_HUGEPAGE)
 static inline int pmd_devmap(pmd_t pmd)
 {
diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h
index 5ed8f6292a53..72f37ea6dedb 100644
--- a/include/linux/mm_types.h
+++ b/include/linux/mm_types.h
@@ -209,6 +209,9 @@ struct page {
 #define PAGE_FRAG_CACHE_MAX_SIZE	__ALIGN_MASK(32768, ~PAGE_MASK)
 #define PAGE_FRAG_CACHE_MAX_ORDER	get_order(PAGE_FRAG_CACHE_MAX_SIZE)
 
+#define page_private(page)		((page)->private)
+#define set_page_private(page, v)	((page)->private = (v))
+
 struct page_frag_cache {
 	void * va;
 #if (PAGE_SIZE < PAGE_FRAG_CACHE_MAX_SIZE)
diff --git a/include/linux/mmzone.h b/include/linux/mmzone.h
index eafa66d66232..35cc33af87f2 100644
--- a/include/linux/mmzone.h
+++ b/include/linux/mmzone.h
@@ -18,6 +18,8 @@
 #include <linux/pageblock-flags.h>
 #include <linux/page-flags-layout.h>
 #include <linux/atomic.h>
+#include <linux/mm_types.h>
+#include <linux/page-flags.h>
 #include <asm/page.h>
 
 /* Free memory management - zoned buddy allocator.  */
@@ -98,6 +100,55 @@ struct free_area {
 	unsigned long		nr_free;
 };
 
+/* Used for pages not on another list */
+static inline void add_to_free_area(struct page *page, struct free_area *area,
+			     int migratetype)
+{
+	list_add(&page->lru, &area->free_list[migratetype]);
+	area->nr_free++;
+}
+
+/* Used for pages not on another list */
+static inline void add_to_free_area_tail(struct page *page, struct free_area *area,
+				  int migratetype)
+{
+	list_add_tail(&page->lru, &area->free_list[migratetype]);
+	area->nr_free++;
+}
+
+/* Used for pages which are on another list */
+static inline void move_to_free_area(struct page *page, struct free_area *area,
+			     int migratetype)
+{
+	list_move(&page->lru, &area->free_list[migratetype]);
+}
+
+static inline struct page *get_page_from_free_area(struct free_area *area,
+					    int migratetype)
+{
+	return list_first_entry_or_null(&area->free_list[migratetype],
+					struct page, lru);
+}
+
+static inline void rmv_page_order(struct page *page)
+{
+	__ClearPageBuddy(page);
+	set_page_private(page, 0);
+}
+
+static inline void del_page_from_free_area(struct page *page,
+		struct free_area *area, int migratetype)
+{
+	list_del(&page->lru);
+	rmv_page_order(page);
+	area->nr_free--;
+}
+
+static inline bool free_area_empty(struct free_area *area, int migratetype)
+{
+	return list_empty(&area->free_list[migratetype]);
+}
+
 struct pglist_data;
 
 /*
diff --git a/mm/compaction.c b/mm/compaction.c
index 7c607479de4a..44adbfa073b3 100644
--- a/mm/compaction.c
+++ b/mm/compaction.c
@@ -1359,13 +1359,13 @@ static enum compact_result __compact_finished(struct zone *zone,
 		bool can_steal;
 
 		/* Job done if page is free of the right migratetype */
-		if (!list_empty(&area->free_list[migratetype]))
+		if (!free_area_empty(area, migratetype))
 			return COMPACT_SUCCESS;
 
 #ifdef CONFIG_CMA
 		/* MIGRATE_MOVABLE can fallback on MIGRATE_CMA */
 		if (migratetype == MIGRATE_MOVABLE &&
-			!list_empty(&area->free_list[MIGRATE_CMA]))
+			!free_area_empty(area, MIGRATE_CMA))
 			return COMPACT_SUCCESS;
 #endif
 		/*
diff --git a/mm/page_alloc.c b/mm/page_alloc.c
index a51031cf16fe..d2f7b050bc13 100644
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@ -704,12 +704,6 @@ static inline void set_page_order(struct page *page, unsigned int order)
 	__SetPageBuddy(page);
 }
 
-static inline void rmv_page_order(struct page *page)
-{
-	__ClearPageBuddy(page);
-	set_page_private(page, 0);
-}
-
 /*
  * This function checks whether a page is free && is the buddy
  * we can coalesce a page and its buddy if
@@ -810,13 +804,11 @@ static inline void __free_one_page(struct page *page,
 		 * Our buddy is free or it is CONFIG_DEBUG_PAGEALLOC guard page,
 		 * merge with it and move up one order.
 		 */
-		if (page_is_guard(buddy)) {
+		if (page_is_guard(buddy))
 			clear_page_guard(zone, buddy, order, migratetype);
-		} else {
-			list_del(&buddy->lru);
-			zone->free_area[order].nr_free--;
-			rmv_page_order(buddy);
-		}
+		else
+			del_page_from_free_area(buddy, &zone->free_area[order],
+					migratetype);
 		combined_pfn = buddy_pfn & pfn;
 		page = page + (combined_pfn - pfn);
 		pfn = combined_pfn;
@@ -866,15 +858,13 @@ static inline void __free_one_page(struct page *page,
 		higher_buddy = higher_page + (buddy_pfn - combined_pfn);
 		if (pfn_valid_within(buddy_pfn) &&
 		    page_is_buddy(higher_page, higher_buddy, order + 1)) {
-			list_add_tail(&page->lru,
-				&zone->free_area[order].free_list[migratetype]);
-			goto out;
+			add_to_free_area_tail(page, &zone->free_area[order],
+					      migratetype);
+			return;
 		}
 	}
 
-	list_add(&page->lru, &zone->free_area[order].free_list[migratetype]);
-out:
-	zone->free_area[order].nr_free++;
+	add_to_free_area(page, &zone->free_area[order], migratetype);
 }
 
 /*
@@ -1819,7 +1809,7 @@ static inline void expand(struct zone *zone, struct page *page,
 		if (set_page_guard(zone, &page[size], high, migratetype))
 			continue;
 
-		list_add(&page[size].lru, &area->free_list[migratetype]);
+		add_to_free_area(&page[size], area, migratetype);
 		area->nr_free++;
 		set_page_order(&page[size], high);
 	}
@@ -1961,13 +1951,10 @@ struct page *__rmqueue_smallest(struct zone *zone, unsigned int order,
 	/* Find a page of the appropriate size in the preferred list */
 	for (current_order = order; current_order < MAX_ORDER; ++current_order) {
 		area = &(zone->free_area[current_order]);
-		page = list_first_entry_or_null(&area->free_list[migratetype],
-							struct page, lru);
+		page = get_page_from_free_area(area, migratetype);
 		if (!page)
 			continue;
-		list_del(&page->lru);
-		rmv_page_order(page);
-		area->nr_free--;
+		del_page_from_free_area(page, area, migratetype);
 		expand(zone, page, order, current_order, area, migratetype);
 		set_pcppage_migratetype(page, migratetype);
 		return page;
@@ -2053,8 +2040,7 @@ static int move_freepages(struct zone *zone,
 		}
 
 		order = page_order(page);
-		list_move(&page->lru,
-			  &zone->free_area[order].free_list[migratetype]);
+		move_to_free_area(page, &zone->free_area[order], migratetype);
 		page += 1 << order;
 		pages_moved += 1 << order;
 	}
@@ -2206,7 +2192,7 @@ static void steal_suitable_fallback(struct zone *zone, struct page *page,
 
 single_page:
 	area = &zone->free_area[current_order];
-	list_move(&page->lru, &area->free_list[start_type]);
+	move_to_free_area(page, area, start_type);
 }
 
 /*
@@ -2230,7 +2216,7 @@ int find_suitable_fallback(struct free_area *area, unsigned int order,
 		if (fallback_mt == MIGRATE_TYPES)
 			break;
 
-		if (list_empty(&area->free_list[fallback_mt]))
+		if (free_area_empty(area, fallback_mt))
 			continue;
 
 		if (can_steal_fallback(order, migratetype))
@@ -2317,9 +2303,7 @@ static bool unreserve_highatomic_pageblock(const struct alloc_context *ac,
 		for (order = 0; order < MAX_ORDER; order++) {
 			struct free_area *area = &(zone->free_area[order]);
 
-			page = list_first_entry_or_null(
-					&area->free_list[MIGRATE_HIGHATOMIC],
-					struct page, lru);
+			page = get_page_from_free_area(area, MIGRATE_HIGHATOMIC);
 			if (!page)
 				continue;
 
@@ -2432,8 +2416,7 @@ __rmqueue_fallback(struct zone *zone, int order, int start_migratetype)
 	VM_BUG_ON(current_order == MAX_ORDER);
 
 do_steal:
-	page = list_first_entry(&area->free_list[fallback_mt],
-							struct page, lru);
+	page = get_page_from_free_area(area, fallback_mt);
 
 	steal_suitable_fallback(zone, page, start_migratetype, can_steal);
 
@@ -2860,6 +2843,7 @@ EXPORT_SYMBOL_GPL(split_page);
 
 int __isolate_free_page(struct page *page, unsigned int order)
 {
+	struct free_area *area = &page_zone(page)->free_area[order];
 	unsigned long watermark;
 	struct zone *zone;
 	int mt;
@@ -2884,9 +2868,8 @@ int __isolate_free_page(struct page *page, unsigned int order)
 	}
 
 	/* Remove page from free list */
-	list_del(&page->lru);
-	zone->free_area[order].nr_free--;
-	rmv_page_order(page);
+
+	del_page_from_free_area(page, area, mt);
 
 	/*
 	 * Set the pageblock if the isolated page is at least half of a
@@ -3180,13 +3163,13 @@ bool __zone_watermark_ok(struct zone *z, unsigned int order, unsigned long mark,
 			continue;
 
 		for (mt = 0; mt < MIGRATE_PCPTYPES; mt++) {
-			if (!list_empty(&area->free_list[mt]))
+			if (!free_area_empty(area, mt))
 				return true;
 		}
 
 #ifdef CONFIG_CMA
 		if ((alloc_flags & ALLOC_CMA) &&
-		    !list_empty(&area->free_list[MIGRATE_CMA])) {
+		    !free_area_empty(area, MIGRATE_CMA)) {
 			return true;
 		}
 #endif
@@ -5019,7 +5002,7 @@ void show_free_areas(unsigned int filter, nodemask_t *nodemask)
 
 			types[order] = 0;
 			for (type = 0; type < MIGRATE_TYPES; type++) {
-				if (!list_empty(&area->free_list[type]))
+				if (!free_area_empty(area, type))
 					types[order] |= 1 << type;
 			}
 		}
@@ -8144,6 +8127,9 @@ __offline_isolated_pages(unsigned long start_pfn, unsigned long end_pfn)
 	spin_lock_irqsave(&zone->lock, flags);
 	pfn = start_pfn;
 	while (pfn < end_pfn) {
+		struct free_area *area;
+		int mt;
+
 		if (!pfn_valid(pfn)) {
 			pfn++;
 			continue;
@@ -8162,13 +8148,13 @@ __offline_isolated_pages(unsigned long start_pfn, unsigned long end_pfn)
 		BUG_ON(page_count(page));
 		BUG_ON(!PageBuddy(page));
 		order = page_order(page);
+		area = &zone->free_area[order];
 #ifdef CONFIG_DEBUG_VM
 		pr_info("remove from free list %lx %d %lx\n",
 			pfn, 1 << order, end_pfn);
 #endif
-		list_del(&page->lru);
-		rmv_page_order(page);
-		zone->free_area[order].nr_free--;
+		mt = get_pageblock_migratetype(page);
+		del_page_from_free_area(page, area, mt);
 		for (i = 0; i < (1 << order); i++)
 			SetPageReserved((page+i));
 		pfn += (1 << order);

