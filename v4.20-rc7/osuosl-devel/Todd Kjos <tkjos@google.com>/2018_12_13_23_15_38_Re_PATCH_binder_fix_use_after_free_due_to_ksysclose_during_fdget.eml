Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  14 Dec 2018 08:43:22 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id AECED58061F;
	Thu, 13 Dec 2018 15:15:59 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 13 Dec 2018 15:15:59 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ARB0uoBcTxoMki3AbhTKj/ZFKlGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc6+ZhON2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRODYOy?=
 =?us-ascii?q?bYQBD+QPM+VFoYfju1QOtgO+CAu3CePz1jNFnGP60bEm3+kjFwzNwQwuH8gJsH?=
 =?us-ascii?q?TRtNj7KqASXv2ow6LVyDvDbfRW2Szg44XPbhAhovOMXbVrccfKxkkvEATFjlqU?=
 =?us-ascii?q?qYP7JT+ayuMNs22C4udmSOmhiHYnphlvrjSzwsogkJTFi4wLxlze6Cl0w5o5Kc?=
 =?us-ascii?q?e5RUN5edKoDodcuiWAO4Z1Qs4uWXxktSc4x7EcuJO2fC4Hw4k9yRHFcfyIaY2I?=
 =?us-ascii?q?7wrjVOmPJTd4g2poeKywhxms60is0O78Wdeu0FZMsCVFlsPAtncX1xzc8sSHS/?=
 =?us-ascii?q?198Vm92TuXyQzf9uVJLVopmafVNZIt2KM8m5kPvUjZHyL7ml36jKqMeUUl/uio?=
 =?us-ascii?q?5f7nYrLjppKEM490iwf+Mrkhm8CmAuQ3LBIOX26F9uS4zbHj+kP4QLNUgf0sia?=
 =?us-ascii?q?TZrp/aKtoBpqKjAA9azJwj6xChADeiytgYmmMHLF1ddBKdk4fpI03OIOz/Dfqn?=
 =?us-ascii?q?h1SskTRryO7cMrzuH5XANXzDkLbnfbZg5E9Q0gszzdZD551KDrENOu78Wkj0tN?=
 =?us-ascii?q?bAFB82LxS0w/r7CNV6zo4eWXiAAq6FMKzItl+E/OIvI/SWa48TtzbwMPwl5//o?=
 =?us-ascii?q?jX8kll4RZ6ip3Z0LaH+mGvRqOVmWYX3pgt0ZC2cFohI+TPD2iF2FSTNTZXGyUL?=
 =?us-ascii?q?wm6jE4D4KmC4HDRoe2jbyF3Se7GIBWZ29cBlCNF3foa5uLW/MWZC2OJc9hlyQO?=
 =?us-ascii?q?VaK9RI85yRGuqAj6xqJ9IerP+i0YspHj2MJv5+LJlxE/7jh0D8Wb02GQQGB4hG?=
 =?us-ascii?q?IIRzkq3K9hpUxx0EuM0a99g/ZAD9xc++tJUhsmNZ7b1+F6CMr9WgTbcteNSVap?=
 =?us-ascii?q?WNOmAT4qQ9I1wt8OZVt9Gtq4ghDC2SqqH6Eal7iRCJMo9aLc2mD7J9xhxHbeyK?=
 =?us-ascii?q?khk14mT9NSOmK8mK5w6RLfB47TnEWfjKala6Ic0CnJ9GeAyGqOuFpVUApxUaXD?=
 =?us-ascii?q?QHAeaVHardX/5kPeUbCuDa4rPRdGyc6HMqFKcMHmjU1aRPf/P9TTe3++lH2uBR?=
 =?us-ascii?q?mW3L+MbJDle2MG3CrDDkgJiAQT/XeANQgjCSatuWPeDDpyFV3xZ0Pg6/VxqHS+?=
 =?us-ascii?q?TkUs1QGFc1Vh16ap+h4SnfGcV/IT3rcDuCc9qzV1HEyx387MB9qHvQpheKRcYd?=
 =?us-ascii?q?Uy4Fpc0WLZtgp9PoGvLqx4h14edRh3sF3q1xltFopAls0qpmswzAVuMaKYzE9B?=
 =?us-ascii?q?dzSA0J/qPr3YNGbz8w6vaqLMwV7ezcuZ9b0J6PQ7rFXjohqkFk4j83VhztlU3G?=
 =?us-ascii?q?GQ5pTMDAoOT53xVlw7+AR9p7HfeiM9/Z/b1WVwMamotT/Pw9IoBPY/xhm8Zdte?=
 =?us-ascii?q?MaOEGxX0E80VHMWuLO0qm160bhMLJuxS9ag0P9+4ePuCwqKkIOFgnDe+h2Rd/I?=
 =?us-ascii?q?99yl6M9zZ7SuPQxZYFwu2X0RGdVzjhi1etqMb3lp5eZTETB2aw1TLrBIpMaaJs?=
 =?us-ascii?q?Z4YLDmGuLtazxtV/gZ7tRnFZ+ESiB1MAxM+mZx6SY0bh0g1X0EQduWanljegzz?=
 =?us-ascii?q?xojzEpqbKS3SzPw+j4dBsLIHVLRHRkjVr3JYi0jtYaXFWnbgQzlRul41r6yLZf?=
 =?us-ascii?q?pKhlM2bTRkJIdTDsL25+SquwqqaCY8lX5ZMqqypXSue8YVOdSrLnuBsVySDjH2?=
 =?us-ascii?q?hfxDA9aT6qvI70nxh7iGKbMXZyo2DVecB2xRfD+tPcQeRd0SYBRCl9kTPXHESz?=
 =?us-ascii?q?P8G1/dWIkJfOquC/WHimVpFJcynrzIWAuTC/5W1rBx2/gv+ylsfmEQg8zS/0yd?=
 =?us-ascii?q?1qWT/Uoxb7Z4nhz766Pv5/fkl0GF/87NJ3GoJknYsxnp0Q2WUaiY+T/XoIimrz?=
 =?us-ascii?q?NdRb2aTjbHsCXzILwtjV4BT7101nNH6G24X5VnCFyMt7e9a6en8W2j46781SDa?=
 =?us-ascii?q?eU7b9EkjFvrlu2sw3ReuR9kSkHyfQ19nEame4JtREpziWcBLASAEZZMTbtlxSO?=
 =?us-ascii?q?89CxsqFXaHyzfri30Up0hcqhA62aogFARHb5fY8vHTN37sV6Kl7N0Wf86of5eN?=
 =?us-ascii?q?nLdtITtwaZkxPBj+hTNZIwmeAGhSthOWLho3Ilz/Q3ggBp3ZG/pIKHMXli/Lql?=
 =?us-ascii?q?Ah5EMT34f9gc9SvqjaZag8aaxYSvHoh6FzUPXZvoS++oET0IufTmMQaODCMzqn?=
 =?us-ascii?q?OBFbXDGg+f7V9sr2jTHJCzK3GXOH4ZwM1gRBaHIUxQnhsUUC8mnpIjFQCq2c/h?=
 =?us-ascii?q?cFp/5j8L/V71sR9MyuNuNxniXWbTvgaoajEoSJeBKBpa9B1N50DQMcaG9OJ8Az?=
 =?us-ascii?q?lY/oG9rAyKMmGaZwNIDXwQWkyZHV/jOKOi5cLH8+ieCeqzNP/OYbSIqexDWPaE?=
 =?us-ascii?q?35Ov0o16/zmSMsWDJGVtD/o+2kBbR3B2B9zZmykTSywQjy/Nb9CUpBa/+i10r8?=
 =?us-ascii?q?Cz6vfrWBjo5YuAFbRSK8hv+wutjKeHNu6Qgjt5KDlC2pMNw3/I1KYQ3FoIhy5y?=
 =?us-ascii?q?cDmtFKwKtTTRQ6LIhq9XExkbZjtpO8tV9K08xBdCOM7BhtPx1751lfo1C1ZDVV?=
 =?us-ascii?q?z8lcClf80KI2ehNFzZAEaHLqiJJTrOw8vve6OzVaVQjPlItx23oTubD07jPjGZ?=
 =?us-ascii?q?mzb1TRygLeFMgz+dPBFFvIG9cxBtCXXsTd78ax27NsN3giMywbEumnzKMmscOy?=
 =?us-ascii?q?Bmc0xRtr2Q8T9YgvJnFm1B9HVlK+yEmyef7+bAK5cWseFkAiJ7l+9B5HQ6yr1V?=
 =?us-ascii?q?7DxLRfBvmSvSqMJurE+ikuWV1jVnVx9O+X53g9e3uklucYbb8YIIDWrH/hUWxW?=
 =?us-ascii?q?yWBw4NptcjAdrq7fN+0N/KwZ70JDsK0NDT5oNIG8vWL9mvP30mPh7kXjXTCV1W?=
 =?us-ascii?q?HnaQKWjDihkFw7mp/XqPo81/88C0lQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AeAADr5hJch0O0hNFjHgEGBwaBUwcLA?=
 =?us-ascii?q?YNrJ4N8lCqCDRRolliBJAVNKRMBh0UiNgcNAQMBAQEBAQECARMBAQEIDQkIKSM?=
 =?us-ascii?q?MgjYkAYJiAQIDAQIgBBkBATcBBQkBAQoLAwoCAiYCAgMfEgEFARwGEwWDHIIBB?=
 =?us-ascii?q?ZxkPIodcHwzgnYBAQWHJQgSeYsxF4FAP4EQAYJdNYMeAoRlgleJN4F9hRNRj3k?=
 =?us-ascii?q?JhT2MHBiBXIUcilIsiDeQVzCBLAxagSEzGggbFTsxBoI1ghsMF4NKinQeM4EFA?=
 =?us-ascii?q?QGMPwEB?=
X-IPAS-Result: =?us-ascii?q?A0AeAADr5hJch0O0hNFjHgEGBwaBUwcLAYNrJ4N8lCqCDRR?=
 =?us-ascii?q?olliBJAVNKRMBh0UiNgcNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkAYJiAQIDA?=
 =?us-ascii?q?QIgBBkBATcBBQkBAQoLAwoCAiYCAgMfEgEFARwGEwWDHIIBBZxkPIodcHwzgnY?=
 =?us-ascii?q?BAQWHJQgSeYsxF4FAP4EQAYJdNYMeAoRlgleJN4F9hRNRj3kJhT2MHBiBXIUci?=
 =?us-ascii?q?lIsiDeQVzCBLAxagSEzGggbFTsxBoI1ghsMF4NKinQeM4EFAQGMPwEB?=
X-IronPort-AV: E=Sophos;i="5.56,350,1539673200"; 
   d="scan'208";a="142068455"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 13 Dec 2018 15:15:57 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728941AbeLMXPy (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 13 Dec 2018 18:15:54 -0500
Received: from mail-lf1-f65.google.com ([209.85.167.65]:38310 "EHLO
        mail-lf1-f65.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727928AbeLMXPy (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 13 Dec 2018 18:15:54 -0500
Received: by mail-lf1-f65.google.com with SMTP id p86so2889987lfg.5
        for <linux-kernel@vger.kernel.org>; Thu, 13 Dec 2018 15:15:51 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=cOgtwtXW2hwS4Z5secLwWSgf9qVAsZc00uIwXSzbqcA=;
        b=g2AGV0vvtxqZ4m+7N5P08alz2vCM+Wa+gifJVW71fCojW+eVa70Lsr8S5sGehpXcAr
         Wl+g9HLZvE/yOBNgepugty6gsmtYvs81Qxkx6TqVmAA4LhauSRmfQXblS0DPi5c8QP0S
         3NhDHJ6En9nHyApuRGBjDfxeAs9eE8jmKM9Q1E6AbXmbKRnn35vGyyCfQ+fsv0UsMDKt
         d3zLv+o4eX6Jdt5d+ToSDdjzgP7TvkjJih0onN77ejJB4i/Vp2Aw4HoU35QiJa9na/+u
         1+SX2ueVdQr2pRmPf1ClUIEoBIeLmPN2uuFU5xcoSAwsMrEOGutpwsIPZasvacOanjZj
         UcyA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=cOgtwtXW2hwS4Z5secLwWSgf9qVAsZc00uIwXSzbqcA=;
        b=BIuPcJEAX1ozOmTeJgu5tPRoBLsJm7tmNb5S1kxknReCBAdmeGK9RaQ9VSSLmExOPq
         5n/HbjtVcAMRaPb5QBagTf2yrcEjLMy0f9Dx4qw8FswuSMZUrjoXI7Td+yZ/04OC2aze
         nzeCMS1DOrQ7uKwXuDC/5KHnm2/b+Z3p3yGkd3vOCUjHcmKwhjjZu2L/EisXFJRRfj+H
         W982tTgxH0hdVbVEonfaNigM2IMTGuwwXOpXp65fnYZxE8tDTjloawCk4aOszgGCZ2kd
         1wGEHiKTgBSJdP/MGbY2yEqIKCfk636yIyAxvT2d78HTwpXNkBbAC1xvwdtctQiXjd0a
         6bGw==
X-Gm-Message-State: AA+aEWYwjr17TuYFb5aYnvi/xutWLY8h9UNAHodQmYjNn4sSqpJ8Rcb6
        EfySJCPjIzeaJlya/X3USOUOZieVPW//7ZJCfXUbJQ==
X-Google-Smtp-Source: AFSGD/W+tykRWyPTbmbWJ9e1McGKp6OUzptzxZ3r8BAqpmGpkWVikIqPCXWYh/kZxvLCv7L1JWEK2UnSRdg+rCMWk7w=
X-Received: by 2002:ac2:4215:: with SMTP id y21mr391524lfh.6.1544742949935;
 Thu, 13 Dec 2018 15:15:49 -0800 (PST)
MIME-Version: 1.0
References: <20181213210401.83041-1-tkjos@google.com>
In-Reply-To: <20181213210401.83041-1-tkjos@google.com>
From: Todd Kjos <tkjos@google.com>
Date: Thu, 13 Dec 2018 15:15:38 -0800
Message-ID: <CAHRSSExfd9==SUGqh-iqdFkypVVG_scVD5S+net+2ukCo4U75A@mail.gmail.com>
Subject: Re: [PATCH] binder: fix use-after-free due to ksys_close() during fdget()
To: Todd Kjos <tkjos@android.com>
Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        =?UTF-8?B?QXJ2ZSBIasO4bm5ldsOlZw==?= <arve@android.com>,
        "open list:ANDROID DRIVERS" <devel@driverdev.osuosl.org>,
        LKML <linux-kernel@vger.kernel.org>,
        Martijn Coenen <maco@google.com>,
        Al Viro <viro@zeniv.linux.org.uk>, joel@joelfernandes.org,
        Android Kernel Team <kernel-team@android.com>
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

I need to make a change to this patch, so please ignore this version.
I'll send a v2 soon.
On Thu, Dec 13, 2018 at 1:04 PM Todd Kjos <tkjos@android.com> wrote:
>
> 44d8047f1d8 ("binder: use standard functions to allocate fds")
> exposed a pre-existing issue in the binder driver.
>
> fdget() is used in ksys_ioctl() as a performance optimization.
> One of the rules associated with fdget() is that ksys_close() must
> not be called between the fdget() and the fdput(). There is a case
> where this requirement is not met in the binder driver which results
> in the reference count dropping to 0 when the device is still in
> use. This can result in use-after-free or other issues.
>
> If userpace has passed a file-descriptor for the binder driver using
> a BINDER_TYPE_FDA object, then kys_close() is called on it when
> handling a binder_ioctl(BC_FREE_BUFFER) command. This violates
> the assumptions for using fdget().
>
> The problem is fixed by deferring the fd close using task_work_add()
> so ksys_close() is called after returning from binder_ioctl().
>
> Fixes: 44d8047f1d87a ("binder: use standard functions to allocate fds")
> Suggested-by: Al Viro <viro@zeniv.linux.org.uk>
> Signed-off-by: Todd Kjos <tkjos@google.com>
> ---
>  drivers/android/binder.c | 91 +++++++++++++++++++++++++++++++++++-----
>  1 file changed, 81 insertions(+), 10 deletions(-)
>
> diff --git a/drivers/android/binder.c b/drivers/android/binder.c
> index c525b164d39d2..8f77d6af31209 100644
> --- a/drivers/android/binder.c
> +++ b/drivers/android/binder.c
> @@ -72,6 +72,7 @@
>  #include <linux/spinlock.h>
>  #include <linux/ratelimit.h>
>  #include <linux/syscalls.h>
> +#include <linux/task_work.h>
>
>  #include <uapi/linux/android/binder.h>
>
> @@ -560,6 +561,9 @@ enum {
>   *                        (protected by @proc->inner_lock)
>   * @waiting_thread_node:  element for @proc->waiting_threads list
>   *                        (protected by @proc->inner_lock)
> + * @deferred_close_fd_cb: callback_head for task work
> + * @deferred_close_fds:   list of fds to be closed
> + *                        (only accessed by this thread)
>   * @pid:                  PID for this thread
>   *                        (invariant after initialization)
>   * @looper:               bitmap of looping state
> @@ -592,6 +596,8 @@ struct binder_thread {
>         struct binder_proc *proc;
>         struct rb_node rb_node;
>         struct list_head waiting_thread_node;
> +       struct callback_head deferred_close_fd_cb;
> +       struct hlist_head deferred_close_fds;
>         int pid;
>         int looper;              /* only modified by this thread */
>         bool looper_need_return; /* can be written by other thread */
> @@ -2184,7 +2190,64 @@ static bool binder_validate_fixup(struct binder_buffer *b,
>         return (fixup_offset >= last_min_offset);
>  }
>
> +struct binder_task_work {
> +       struct hlist_node entry;
> +       int fd;
> +};
> +
> +/**
> + * binder_do_fd_close() - close list of file descriptors
> + * @twork:     callback head for task work
> + *
> + * It is not safe to call ksys_close() during the binder_ioctl()
> + * function if there is a chance that binder's own file descriptor
> + * might be closed. This is to meet the requirements for using
> + * fdget() (see comments for __fget_light()). Therefore use
> + * task_add_work() to schedule the close operation once we have
> + * returned from binder_ioctl(). This function is a callback
> + * for that mechanism and does the actual ksys_close() on the list
> + * of file descriptors.
> + */
> +static void binder_do_fd_close(struct callback_head *twork)
> +{
> +       struct binder_thread *thread = container_of(twork,
> +                       struct binder_thread, deferred_close_fd_cb);
> +       struct hlist_node *entry, *tmp;
> +
> +       hlist_for_each_safe(entry, tmp, &thread->deferred_close_fds) {
> +               struct binder_task_work *work = container_of(entry,
> +                               struct binder_task_work, entry);
> +
> +               ksys_close(work->fd);
> +               hlist_del(&work->entry);
> +               kfree(work);
> +       }
> +}
> +
> +/**
> + * binder_deferred_fd_close() - schedule a close for the given file-descriptor
> + * @thread:    struct binder_thread for this task
> + * @fd:                file-descriptor to close
> + *
> + * See comments in binder_do_fd_close(). This function is used to schedule
> + * a file-descriptor to be closed after returning from binder_ioctl().
> + */
> +static void binder_deferred_fd_close(struct binder_thread *thread, int fd)
> +{
> +       struct binder_task_work *work;
> +
> +       work = kzalloc(sizeof(*work), GFP_KERNEL);
> +       if (!work)
> +               return;
> +       work->fd = fd;
> +
> +       if (hlist_empty(&thread->deferred_close_fds))
> +               task_work_add(current, &thread->deferred_close_fd_cb, true);
> +       hlist_add_head(&work->entry, &thread->deferred_close_fds);
> +}
> +
>  static void binder_transaction_buffer_release(struct binder_proc *proc,
> +                                             struct binder_thread *thread,
>                                               struct binder_buffer *buffer,
>                                               binder_size_t *failed_at)
>  {
> @@ -2323,7 +2386,8 @@ static void binder_transaction_buffer_release(struct binder_proc *proc,
>                         }
>                         fd_array = (u32 *)(parent_buffer + (uintptr_t)fda->parent_offset);
>                         for (fd_index = 0; fd_index < fda->num_fds; fd_index++)
> -                               ksys_close(fd_array[fd_index]);
> +                               binder_deferred_fd_close(thread,
> +                                                        fd_array[fd_index]);
>                 } break;
>                 default:
>                         pr_err("transaction release %d bad object type %x\n",
> @@ -3266,7 +3330,7 @@ static void binder_transaction(struct binder_proc *proc,
>  err_copy_data_failed:
>         binder_free_txn_fixups(t);
>         trace_binder_transaction_failed_buffer_release(t->buffer);
> -       binder_transaction_buffer_release(target_proc, t->buffer, offp);
> +       binder_transaction_buffer_release(target_proc, thread, t->buffer, offp);
>         if (target_node)
>                 binder_dec_node_tmpref(target_node);
>         target_node = NULL;
> @@ -3330,6 +3394,7 @@ static void binder_transaction(struct binder_proc *proc,
>  /**
>   * binder_free_buf() - free the specified buffer
>   * @proc:      binder proc that owns buffer
> + * @thread:    current binder thread
>   * @buffer:    buffer to be freed
>   *
>   * If buffer for an async transaction, enqueue the next async
> @@ -3338,7 +3403,8 @@ static void binder_transaction(struct binder_proc *proc,
>   * Cleanup buffer and free it.
>   */
>  static void
> -binder_free_buf(struct binder_proc *proc, struct binder_buffer *buffer)
> +binder_free_buf(struct binder_proc *proc, struct binder_thread *thread,
> +               struct binder_buffer *buffer)
>  {
>         if (buffer->transaction) {
>                 buffer->transaction->buffer = NULL;
> @@ -3364,7 +3430,7 @@ binder_free_buf(struct binder_proc *proc, struct binder_buffer *buffer)
>                 binder_node_inner_unlock(buf_node);
>         }
>         trace_binder_transaction_buffer_release(buffer);
> -       binder_transaction_buffer_release(proc, buffer, NULL);
> +       binder_transaction_buffer_release(proc, thread, buffer, NULL);
>         binder_alloc_free_buf(&proc->alloc, buffer);
>  }
>
> @@ -3558,7 +3624,7 @@ static int binder_thread_write(struct binder_proc *proc,
>                                      proc->pid, thread->pid, (u64)data_ptr,
>                                      buffer->debug_id,
>                                      buffer->transaction ? "active" : "finished");
> -                       binder_free_buf(proc, buffer);
> +                       binder_free_buf(proc, thread, buffer);
>                         break;
>                 }
>
> @@ -3883,7 +3949,8 @@ static int binder_wait_for_work(struct binder_thread *thread,
>
>  /**
>   * binder_apply_fd_fixups() - finish fd translation
> - * @t: binder transaction with list of fd fixups
> + * @thread:    current binder thread
> + * @t:         binder transaction with list of fd fixups
>   *
>   * Now that we are in the context of the transaction target
>   * process, we can allocate and install fds. Process the
> @@ -3894,7 +3961,8 @@ static int binder_wait_for_work(struct binder_thread *thread,
>   * fput'ing files that have not been processed and ksys_close'ing
>   * any fds that have already been allocated.
>   */
> -static int binder_apply_fd_fixups(struct binder_transaction *t)
> +static int binder_apply_fd_fixups(struct binder_thread *thread,
> +                                 struct binder_transaction *t)
>  {
>         struct binder_txn_fd_fixup *fixup, *tmp;
>         int ret = 0;
> @@ -3942,7 +4010,7 @@ static int binder_apply_fd_fixups(struct binder_transaction *t)
>                 } else if (ret) {
>                         u32 *fdp = (u32 *)(t->buffer->data + fixup->offset);
>
> -                       ksys_close(*fdp);
> +                       binder_deferred_fd_close(thread, *fdp);
>                 }
>                 list_del(&fixup->fixup_entry);
>                 kfree(fixup);
> @@ -4237,7 +4305,7 @@ static int binder_thread_read(struct binder_proc *proc,
>                         tr.sender_pid = 0;
>                 }
>
> -               ret = binder_apply_fd_fixups(t);
> +               ret = binder_apply_fd_fixups(thread, t);
>                 if (ret) {
>                         struct binder_buffer *buffer = t->buffer;
>                         bool oneway = !!(t->flags & TF_ONE_WAY);
> @@ -4248,7 +4316,7 @@ static int binder_thread_read(struct binder_proc *proc,
>                         buffer->transaction = NULL;
>                         binder_cleanup_transaction(t, "fd fixups failed",
>                                                    BR_FAILED_REPLY);
> -                       binder_free_buf(proc, buffer);
> +                       binder_free_buf(proc, thread, buffer);
>                         binder_debug(BINDER_DEBUG_FAILED_TRANSACTION,
>                                      "%d:%d %stransaction %d fd fixups failed %d/%d, line %d\n",
>                                      proc->pid, thread->pid,
> @@ -4433,6 +4501,8 @@ static struct binder_thread *binder_get_thread_ilocked(
>         thread->reply_error.work.type = BINDER_WORK_RETURN_ERROR;
>         thread->reply_error.cmd = BR_OK;
>         INIT_LIST_HEAD(&new_thread->waiting_thread_node);
> +       INIT_HLIST_HEAD(&new_thread->deferred_close_fds);
> +       init_task_work(&new_thread->deferred_close_fd_cb, binder_do_fd_close);
>         return thread;
>  }
>
> @@ -4470,6 +4540,7 @@ static void binder_free_proc(struct binder_proc *proc)
>  static void binder_free_thread(struct binder_thread *thread)
>  {
>         BUG_ON(!list_empty(&thread->todo));
> +       BUG_ON(!hlist_empty(&thread->deferred_close_fds));
>         binder_stats_deleted(BINDER_STAT_THREAD);
>         binder_proc_dec_tmpref(thread->proc);
>         kfree(thread);
> --
> 2.20.0.rc2.403.gdbc3b29805-goog
>
