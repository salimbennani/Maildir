Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 11 Dec 2018 19:49:31 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id D8EAD5803DC;
	Tue, 11 Dec 2018 02:55:07 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga007-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 11 Dec 2018 02:55:07 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3As7FuQBfDbfoZQBlH1fFfLYp+lGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc6+bRyN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRBDI2i?=
 =?us-ascii?q?coUBAekPM+FaoInzqFQAogC+BRGuCe701jNFhWX70bEg3ug9DQ3L2hErEdIUsH?=
 =?us-ascii?q?TTqdX4LLsfXvqvzKnPyzXIcu5Y2Svn6IfSchAhpeqDUqxqccre10YvDR7Og1KK?=
 =?us-ascii?q?poP/JTOV0eINv3KA7+p8T+KgkW4nqwVqrTex3McshZfGhpgOx1Dc8iV525o1Ks?=
 =?us-ascii?q?O/SEJhfNGrDoJduieHPIV1WsMvW39ktDo+x7EcpJK2cjYGxI46yxPcd/CLaYmF?=
 =?us-ascii?q?7xD7WOuSJTp0nm9pdb2+ihqo70Ss1PHwWtOp3FtEsiZIlMTHuGoX2BzJ8MeHT+?=
 =?us-ascii?q?Nw/ke/1jaL0ADe8v9EIU8qmqrBMZIhwaA/loAVsUvdGi/6gkL2jLWZdkk8++io?=
 =?us-ascii?q?7froYqn+q5OCK4N5jhvyPrkgl8ChG+g0LwsDU3SB9em91rDv5Uj5T69Ljv0ynK?=
 =?us-ascii?q?nZqpfaJcEDq669Ag9V1Jsj6hmmAzelztsYh38HI0xBeB6eiIjoNVfOL+7iDfqk?=
 =?us-ascii?q?nVSsnylkx+rcMr3iHJrNNH7Dn6nlfbpn7E5c0gUzwchF551IErEBPO7zWkjpud?=
 =?us-ascii?q?zcDx85MBK7z/zoCdVgzY4eXWOPAqmEMKLdq1OI5+QvI/WSa48RojryN/8l5/v2?=
 =?us-ascii?q?h38jhVAdZbWp3YcQaH2gHvRpOUSZYWb2jdcGC2sKvhc+Q/bsiF2NSjNTY3eyX6?=
 =?us-ascii?q?Qh5jA0Eo6mDIHDRpyzj7yFxiu0AppWZmVeAFCWDXjob5mEW+sLaC+KIM9hlSIL?=
 =?us-ascii?q?WaKiS48m0xGusgj6xqFjLurV/C0YqJ3i2MJ05+3ViRE96zh0A96B3GGKSmF+hn?=
 =?us-ascii?q?kISCMu3KBjvUx9zU+O3rJjg/xYEtxT5OlFUh0gOp7e1OF6D9HyWgTcftaGUlqm?=
 =?us-ascii?q?Q9OmAS0vQdI12dMBf0F9G9C6hBDZwyWqG6MVl6CMBJEs8aLTxX7xK9x5y3bHzq?=
 =?us-ascii?q?YhiVYmT9BLNW2ngK5/6gfSC5TIk0Wfi6ala6Ac0DTR+2eEyGqEpFtYXxJoUaXZ?=
 =?us-ascii?q?QXAfYVPbosnj6UPcUbCiE7QnPRFHyc6ZNKRKbNrljVFFRPfmPNTTeGaxm2a2BR?=
 =?us-ascii?q?aVybKAdovqe2MB3CrDDEgIiRwc/XGDNQImHCeuv3reDCByFVLoe07j7PNxqG2l?=
 =?us-ascii?q?QUMuzwGFdUth16Gr9R4TnvGcT/IT3rQZuCYusTl0HVC9387IBNqEvQZuYKJcYd?=
 =?us-ascii?q?Yl6lddyW3ZrxB9PoCnL616ml4ecgF3v0Ty1xV3CoRMi9QqoGktzApoLaKY0VVB?=
 =?us-ascii?q?dzyD0JD0O73XLHTy/R+1Z67X3FHezMiZ+qMV5PskrFXjuRmjFlA+/HV/z9lVz3?=
 =?us-ascii?q?yc643QAwoWT53wXVg49hhgq77Bfyky+pnb1XtvMamzrD/PwNYpBOojyha9cNZT?=
 =?us-ascii?q?KqKEFAnuE8IEA8iiMvAlm1+sbhgcJuBd6LY0P9+6d/uBwKOqPPtgkCi6gmhd4Y?=
 =?us-ascii?q?F90liD9yxzSuPT25YFwveY3haIVjvmjVehtNz3lp5AZT0IAmW/zi3kDpZLZqJu?=
 =?us-ascii?q?ZYYLFXuuI8qvy9Vkhp7iR2RX9ES+CFMBwsOpfwSdb0b83QFJyUsYu3inljamwD?=
 =?us-ascii?q?xulDEpqLGS3CjPw+TkaRoGNXRHRGhkjVfwP4e0i8oWU1SvbwgsjBGl/1r1x7BH?=
 =?us-ascii?q?pKRjKGneWUdJfynsI2BiSKewraeCY8hU5ZMssCVXVvm8YF+ARr78pRsazz3sH2?=
 =?us-ascii?q?9EyD8ncDGqv43znwZmh2KFMHZzsH3ZdNlyxRjF/tzcRv1R3j0cSCljkzbXBVu8?=
 =?us-ascii?q?P9iv/dqKkZfOqeS+V2OnVp1Ofijn14KAtC2n5WJ0BR2zhey8mtriEQIiyy/0y8?=
 =?us-ascii?q?FqVTnUrBb7eoTq1761MeV9cklqBV/87dF3GoV/kos2mZER1mIWhpST/Xobj2jz?=
 =?us-ascii?q?Nc9X1r75bHoIXTQL2cLa4BD52E1/KXKE34H5WW+cwsd7Z9m6f3kZ2iQy781RDK?=
 =?us-ascii?q?eU7bpEnTZ6o1airALRZ+R9kSkZyfc09HEahOQJshI3ziqBGrASAVVYPSv0mhSN?=
 =?us-ascii?q?7tC+r79YaHyhcLeuz0p+gc6uDKuZrQ5CQnb5dYwvHStx7sV5LVLN32f/6oDieN?=
 =?us-ascii?q?nMc90TsgeYnAvHj+hQMJgxjOYFhTJ7OWLhun0o0/I7jRtr3Z2gvYmIMWNt/L+i?=
 =?us-ascii?q?Ah5DNz34fMcT+jDrjaZDkceaxYGvHpN9GjoVWJvkV+6nEDUXtf7/LQaBDCU8qm?=
 =?us-ascii?q?uHGbrYBQKQ811pr3XLE5C2LX2XIGQZwM5mRBmcIkxfnQ8VUC87np4/CgCl2sjh?=
 =?us-ascii?q?fF1l6TAW417ysgFMxf5wNxnjTmffox+lajUuR5iaMhVW9RtO51vPPcyd8+JzHD?=
 =?us-ascii?q?xY/pu7owyWMWGbYwVIDWcUWk2LHVzjP7+u5cXe/OicHOaxM/zOYbCWo+xES/iI?=
 =?us-ascii?q?3Y6v0pdh/zuUNsSPOWRiD+Qm2kVZW3B1Ad/ZmzIJSywYjC/Na8+bpBGh+ix4tM?=
 =?us-ascii?q?y/8fLrWB7x6ouLEbddLdJv+xWui6eZK+GQnDp5KSpf1p4UxX/H1rkf3F0RiyFv?=
 =?us-ascii?q?bTWtEq4AtSnCTK3OgK9XEgUbZjh3NMtJ6aI8wwZMNdTaitPzyr53kPo1B01ZWl?=
 =?us-ascii?q?zmn8GjfdYKLH2lNFPbGEaLM6yLKifWw87se6OzV71RgP9Qtx2xojubF07jPjKe?=
 =?us-ascii?q?lzjmTRyvMOdMjD2FMxxaoo2ybhFtCW37RtL8dhK7KMN3jSExwbAsmnPKNGscPS?=
 =?us-ascii?q?JgfE9XsrKQ7T1XgvNkFmxF73plK/SEmimD4+nZLJYWreVkAiBum+1G53Q6zqNf?=
 =?us-ascii?q?7DtYS/xthCvSstlurkmmk+aVzDpnVRtOqjBTi4OKvUVtI6PZ9pZbVHbA/RIN63?=
 =?us-ascii?q?iQChsQq9tkDN3vp75fytzVmK3vLzdC9oGcwcxJKMHTYPKGOXwueU7mETnEDQID?=
 =?us-ascii?q?QmT2HWHCjlNQkbeZ8XjD/bYgrZ25sZMUTbkTb0AvH/MeAEl/E9EYaMN+Vykjl/?=
 =?us-ascii?q?iAkNQB5X60oQPeSd9yppfcSv+VR/nifmXKxYJYbgcFlOurZb8YMZf2jgk7MgF3?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AXAACQlg9ch0O0hNFkHgEGBwaBUQkLA?=
 =?us-ascii?q?YJpgQInjHOLMYIhji6JEIFzLAMQAYd5IjQJDQEDAQEBAQEBAgETAQEBCA0JCCk?=
 =?us-ascii?q?jDII2JAGCYgMDAQIkCwENAQE3AQUJAQFQA1QGEwWDHAGBaQMVBAGkNIFsM4J2A?=
 =?us-ascii?q?QEFhygIh3uDI4EcgVc/gRGFaYgFiTyXPQcCgRWBDQSEY4o8CxiCKYdIh06aeYI?=
 =?us-ascii?q?OcYM7CYISDBeDfYUPhRI/ATGBBQEBIROKMAEB?=
X-IPAS-Result: =?us-ascii?q?A0AXAACQlg9ch0O0hNFkHgEGBwaBUQkLAYJpgQInjHOLMYI?=
 =?us-ascii?q?hji6JEIFzLAMQAYd5IjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2JAGCYgMDA?=
 =?us-ascii?q?QIkCwENAQE3AQUJAQFQA1QGEwWDHAGBaQMVBAGkNIFsM4J2AQEFhygIh3uDI4E?=
 =?us-ascii?q?cgVc/gRGFaYgFiTyXPQcCgRWBDQSEY4o8CxiCKYdIh06aeYIOcYM7CYISDBeDf?=
 =?us-ascii?q?YUPhRI/ATGBBQEBIROKMAEB?=
X-IronPort-AV: E=Sophos;i="5.56,342,1539673200"; 
   d="scan'208";a="44450268"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 11 Dec 2018 02:55:06 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726610AbeLKKzB (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 11 Dec 2018 05:55:01 -0500
Received: from mout02.posteo.de ([185.67.36.66]:44613 "EHLO mout02.posteo.de"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726582AbeLKKzB (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 11 Dec 2018 05:55:01 -0500
Received: from submission (posteo.de [89.146.220.130]) 
        by mout02.posteo.de (Postfix) with ESMTPS id 15A5B240102
        for <linux-kernel@vger.kernel.org>; Tue, 11 Dec 2018 11:54:58 +0100 (CET)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=posteo.de; s=2017;
        t=1544525698; bh=JFYWYfjr1gRhG9jBvzeP8lZdyLQx694oz6629351v2U=;
        h=From:To:Cc:Subject:Date:From;
        b=O0XMgCRw3/wkaJNhRkhr1XNYivZh1VMc/EYmD5qhYoTtvE6GOOBFaTioT+vx+q4yn
         WCD48UyorDqQPNxP1vp/fRs/5W/hOh2Y8Bl7wMJWE8VxHRBjPDX3HmrmVr1DULS6QZ
         PggOxF17y42jUwvTuKJF+KTKpcsuPbq60CrdWrnEFXx+Qw08pcCCxCidzjendYduZW
         PUchuGaMxknCkGGt8s2v7s8pJnQLZrv1kEZfcQyB+D6pVKwulZZ2JBxt5nbG3GaJvj
         XmM+NVMfY5SI7QMFhMuJ3JeAN13Qb7cQyIkh94w80T78mYbQEwAjCVRU/kxPScPXxf
         GyS6wpAYbz+nQ==
Received: from customer (localhost [127.0.0.1])
        by submission (posteo.de) with ESMTPSA id 43DcKB5vmRz9rxd;
        Tue, 11 Dec 2018 11:54:54 +0100 (CET)
From: Aaron Strahlberger <aaron.strahlberger@posteo.de>
To: Gao Xiang <gaoxiang25@huawei.com>
Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        Chao Yu <yuchao0@huawei.com>, linux-erofs@lists.ozlabs.org,
        devel@driverdev.osuosl.org, linux-kernel@vger.kernel.org,
        linux-kernel@i4.cs.fau.de,
        Aaron Strahlberger <aaron.strahlberger@posteo.de>,
        Julius Wiedmann <julius.wiedmann@fau.de>,
        Dominik Huber <domi250@gmx.de>
Subject: [PATCH 1/5] drivers: staging: erofs: Fix alignment.
Date: Tue, 11 Dec 2018 11:54:39 +0100
Message-Id: <20181211105443.21826-2-aaron.strahlberger@posteo.de>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <20181211105443.21826-1-aaron.strahlberger@posteo.de>
References: <0ed9f3e7-9081-4a8a-06b0-e5ad14e2c872@huawei.com>
 <20181211105443.21826-1-aaron.strahlberger@posteo.de>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Fix of 17 `CHECK: Alignment should match open parenthesis` checkpatch.pl
issues.

Signed-off-by: Aaron Strahlberger <aaron.strahlberger@posteo.de>
Signed-off-by: Julius Wiedmann <julius.wiedmann@fau.de>
Signed-off-by: Dominik Huber <domi250@gmx.de>

LocalWords:  Alighnment
---
 drivers/staging/erofs/data.c | 42 ++++++++++++++++++------------------
 drivers/staging/erofs/dir.c  |  8 +++----
 2 files changed, 25 insertions(+), 25 deletions(-)

diff --git a/drivers/staging/erofs/data.c b/drivers/staging/erofs/data.c
index 6384f73e5418..d1c0a7be6eb8 100644
--- a/drivers/staging/erofs/data.c
+++ b/drivers/staging/erofs/data.c
@@ -40,7 +40,7 @@ static inline void read_endio(struct bio *bio)
 
 /* prio -- true is used for dir */
 struct page *__erofs_get_meta_page(struct super_block *sb,
-	erofs_blk_t blkaddr, bool prio, bool nofail)
+				   erofs_blk_t blkaddr, bool prio, bool nofail)
 {
 	struct inode *const bd_inode = sb->s_bdev->bd_inode;
 	struct address_space *const mapping = bd_inode->i_mapping;
@@ -76,7 +76,7 @@ struct page *__erofs_get_meta_page(struct super_block *sb,
 		}
 
 		__submit_bio(bio, REQ_OP_READ,
-			REQ_META | (prio ? REQ_PRIO : 0));
+			     REQ_META | (prio ? REQ_PRIO : 0));
 
 		lock_page(page);
 
@@ -107,8 +107,8 @@ struct page *__erofs_get_meta_page(struct super_block *sb,
 }
 
 static int erofs_map_blocks_flatmode(struct inode *inode,
-	struct erofs_map_blocks *map,
-	int flags)
+				     struct erofs_map_blocks *map,
+				     int flags)
 {
 	int err = 0;
 	erofs_blk_t nblocks, lastblk;
@@ -151,7 +151,7 @@ static int erofs_map_blocks_flatmode(struct inode *inode,
 		map->m_flags |= EROFS_MAP_META;
 	} else {
 		errln("internal error @ nid: %llu (size %llu), m_la 0x%llx",
-			vi->nid, inode->i_size, map->m_la);
+		      vi->nid, inode->i_size, map->m_la);
 		DBG_BUGON(1);
 		err = -EIO;
 		goto err_out;
@@ -192,27 +192,26 @@ int erofs_map_blocks_iter(struct inode *inode,
 }
 
 int erofs_map_blocks(struct inode *inode,
-	struct erofs_map_blocks *map, int flags)
+		     struct erofs_map_blocks *map, int flags)
 {
 	if (unlikely(is_inode_layout_compression(inode))) {
 		struct page *mpage = NULL;
 		int err;
 
 		err = erofs_map_blocks_iter(inode, map, &mpage, flags);
-		if (mpage != NULL)
+		if (mpage)
 			put_page(mpage);
 		return err;
 	}
 	return erofs_map_blocks_flatmode(inode, map, flags);
 }
 
-static inline struct bio *erofs_read_raw_page(
-	struct bio *bio,
-	struct address_space *mapping,
-	struct page *page,
-	erofs_off_t *last_block,
-	unsigned int nblocks,
-	bool ra)
+static inline struct bio *erofs_read_raw_page(struct bio *bio,
+					      struct address_space *mapping,
+					      struct page *page,
+					      erofs_off_t *last_block,
+					      unsigned int nblocks,
+					      bool ra)
 {
 	struct inode *inode = mapping->host;
 	erofs_off_t current_block = (erofs_off_t)page->index;
@@ -307,7 +306,7 @@ static inline struct bio *erofs_read_raw_page(
 			nblocks = BIO_MAX_PAGES;
 
 		bio = erofs_grab_bio(inode->i_sb,
-			blknr, nblocks, read_endio, false);
+				     blknr, nblocks, read_endio, false);
 
 		if (IS_ERR(bio)) {
 			err = PTR_ERR(bio);
@@ -361,7 +360,7 @@ static int erofs_raw_access_readpage(struct file *file, struct page *page)
 	trace_erofs_readpage(page, true);
 
 	bio = erofs_read_raw_page(NULL, page->mapping,
-		page, &last_block, 1, false);
+				  page, &last_block, 1, false);
 
 	if (IS_ERR(bio))
 		return PTR_ERR(bio);
@@ -371,8 +370,9 @@ static int erofs_raw_access_readpage(struct file *file, struct page *page)
 }
 
 static int erofs_raw_access_readpages(struct file *filp,
-	struct address_space *mapping,
-	struct list_head *pages, unsigned int nr_pages)
+				      struct address_space *mapping,
+				      struct list_head *pages,
+				      unsigned int nr_pages)
 {
 	erofs_off_t last_block;
 	struct bio *bio = NULL;
@@ -389,13 +389,13 @@ static int erofs_raw_access_readpages(struct file *filp,
 
 		if (!add_to_page_cache_lru(page, mapping, page->index, gfp)) {
 			bio = erofs_read_raw_page(bio, mapping, page,
-				&last_block, nr_pages, true);
+						  &last_block, nr_pages, true);
 
 			/* all the page errors are ignored when readahead */
 			if (IS_ERR(bio)) {
 				pr_err("%s, readahead error at page %lu of nid %llu\n",
-					__func__, page->index,
-					EROFS_V(mapping->host)->nid);
+				       __func__, page->index,
+				       EROFS_V(mapping->host)->nid);
 
 				bio = NULL;
 			}
diff --git a/drivers/staging/erofs/dir.c b/drivers/staging/erofs/dir.c
index d1cb0d78ab84..49a4e7730df0 100644
--- a/drivers/staging/erofs/dir.c
+++ b/drivers/staging/erofs/dir.c
@@ -24,8 +24,8 @@ static const unsigned char erofs_filetype_table[EROFS_FT_MAX] = {
 };
 
 static int erofs_fill_dentries(struct dir_context *ctx,
-	void *dentry_blk, unsigned int *ofs,
-	unsigned int nameoff, unsigned int maxsize)
+			       void *dentry_blk, unsigned int *ofs,
+			       unsigned int nameoff, unsigned int maxsize)
 {
 	struct erofs_dirent *de = dentry_blk;
 	const struct erofs_dirent *end = dentry_blk + nameoff;
@@ -101,9 +101,9 @@ static int erofs_readdir(struct file *f, struct dir_context *ctx)
 		nameoff = le16_to_cpu(de->nameoff);
 
 		if (unlikely(nameoff < sizeof(struct erofs_dirent) ||
-			nameoff >= PAGE_SIZE)) {
+			     nameoff >= PAGE_SIZE)) {
 			errln("%s, invalid de[0].nameoff %u",
-				__func__, nameoff);
+			      __func__, nameoff);
 
 			err = -EIO;
 			goto skip_this;
-- 
2.19.2

