Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  14 Dec 2018 08:42:35 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 08A5658079D;
	Thu, 13 Dec 2018 13:31:53 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by fmsmga006-1.fm.intel.com with ESMTP; 13 Dec 2018 13:31:51 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Ai3WYkhZsQM6YWUuWp9Qf76f/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpcS7Zx7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyxPDJ2h?=
 =?us-ascii?q?YYUBDOQPOuRXr4fyqFUBthu+HQuhCfjzxjJLnHL6wbc33/g9HQzAwQcuH8gOsH?=
 =?us-ascii?q?PRrNjtKakdT/q6zK/Vxjjdb/NWwzb96JPUchAmufGMXax/cdDKyUkoEQPOk1Kd?=
 =?us-ascii?q?qZf7MDyP0OQBqWqb4/B8WuKvkW4nqhpxoiSoxsc0ionGmJgVykvD9SV/24s1JN?=
 =?us-ascii?q?u4SFJlbt6gCpdfqyaaN45vT84kXmpmtiE6yrgctp66eigH0JAnyAPEa/CdaIiH?=
 =?us-ascii?q?+QrvW/iXIThkgHJqYqy/iAio/Ui70eLxUNS/3lVSriddjNXAqnQA2wbO5sWJVP?=
 =?us-ascii?q?dx5Fqt1DWT2wzJ6+xJI1g4mbfVJpMu2LI8i5QevEvZEiPrlkj7jbWae0Qk9+Wu?=
 =?us-ascii?q?9u/peK/ppoWGOI9xkgz+Mrohmsi4AekgLAgOUHaU+f6m2L3g40L5WrNKgeMykq?=
 =?us-ascii?q?XDt5DaP8sbqra4Aw9TzIkj9w6yAym63Nkch3ULMVxIdAydg4T0OFzCPOr0APa9?=
 =?us-ascii?q?jli0lTdk3fHGPrnvApXXKXjDla/sfbJ8605a1QoywslT55FKBbEbJvL8REvxuM?=
 =?us-ascii?q?XfDh43NQy73fznBc5j1oMRR22PGLWVMKDMvl+S4OIgPe2MaJUSuDbnJPgp/+Tu?=
 =?us-ascii?q?gmMhmV8BYamp2oMaaHS5HvRlPUqVe3XtgsoaHGcOvwo+SvHqiVKYXT5SYXayQ7?=
 =?us-ascii?q?wz5jUhBI26CofDQ5ingKad0yejAp1WemdGB0iMEXjydoWER+0DaCWILs9hjzwL?=
 =?us-ascii?q?T76hS4A62BGqtQ/6zadnL+XO9i0Zs5LjyMZ65+nJmR4u8jx0CtyX03uRQGFsgm?=
 =?us-ascii?q?MIWzg20bh9oUx61FiPy6t4g/teFdxV4PNESQM6NZ/az+xnBNH+QAPBftGVSFm4?=
 =?us-ascii?q?RtWqGy0+TtU0w9UWeUZyB82ijgzf3yqtG7IajaeLBJwz8qLfxXTxPdxyy3Td2a?=
 =?us-ascii?q?kljlkmRNZPNGK8iq5+8QjTG5DGk0GDm6m2cqQc2TbH9H2fwmqWoEFYTAlwXL3G?=
 =?us-ascii?q?XX8FYEvat9D55kLYQL+oBrQqKQ9Byc+EKqtXZdzll1RGRPH/ONvAZ2K9gXu/BR?=
 =?us-ascii?q?GNxrmUdorlZ30d3DnBCEgDiw0c4GyJNRYgCSu7o2LRFjpuFUnxbEPq9uV+rHC7?=
 =?us-ascii?q?TkowzwyRa01h1ry1+gMahPCGSvMT2K4EtzklqzluAFm92NfWAcKapwV9ZKVcfc?=
 =?us-ascii?q?894FBf2G3ErQN9IIKvI7pihlEEdQR3pF3h1xNsB4VEkMgqqm4qzQVoJaKZ1lNB?=
 =?us-ascii?q?ay2X3ZTqNrLLLWny+Qila7TK1VHGzNaW5qAP5ewkq1XiuQGpEVYi83Vn0tVPz3?=
 =?us-ascii?q?uQ/JLKDBAWUZLwVEY3+AN3p7XbYik7+oPV2mdgMaiysj/exd0pAPEpxQqnf9da?=
 =?us-ascii?q?KKmEDhP9E9UGB8iyL+wng0KmbhYaM+Fd6qE1P9mqeOCb2KG2JulgmjGmjWNZ4I?=
 =?us-ascii?q?1m1kKM9ix8SvPH3pofwvGY2BeHWCn4jFu7rs/3noVEbykIHmWj0SjkGJJRZqpq?=
 =?us-ascii?q?cIcLFGeiOdG4ys9/hp7tQXFY8lGjCkgC2M+ofxqSclP80RdR1UQRvXyohy+4wy?=
 =?us-ascii?q?ZonDEuq6qVxDbOzPj6dBobJm5LQ3FvjU3tIYeold8aRlWnbw8zmBuj+0n63alb?=
 =?us-ascii?q?qL1jIGbJRUdHYjb5L3tlUqu2rbeCZ89P6JU1sSRYSui8YFaaSqLjrBseyS/sA2?=
 =?us-ascii?q?xexDUjfTGwppr5hwB6iH6aLHtrrHvZeNt8xBfF6NzHWP5R2CELRC15iTnRG1i9?=
 =?us-ascii?q?MMOl/dSSl5ffrO++U3itWYFUcSnu1YmArje05XV2AR2jmPC+gt/nHhIg0S/41N?=
 =?us-ascii?q?lqUj/ErA3mbYno1KS6MORncVduBFLn78p6G4d+kpY/hZ0K2HgagImV8mQDkWvp?=
 =?us-ascii?q?Ldpb3qf+ZmIXRTEX297V/BTl2Ep7I3OJ3Y35UW+RwslgZ9m8eW4W3iM978ZXCK?=
 =?us-ascii?q?ab9rBEnC11okamogLVe/RygjAdyf424n4An+4JoBYtzjmaAr0KHklXJy3smw6I?=
 =?us-ascii?q?79CjtqpXYmmvfKO01Ep/m9ChEb6DrhtdWHb/ZpctAytw4t9jP1LL1X358pvkd8?=
 =?us-ascii?q?XIbdIPqh2UlA/Nj+1UKJIyjPUGnyRmNnzmvX051eE7lwdh0o+gvIiIMGht+KO5?=
 =?us-ascii?q?AhhFNjz6fc8T+zftjbpAkcaSxYygApJhGjATVpvyUf2oCC4StejgNwuWDD08rX?=
 =?us-ascii?q?KbFaDeHACF7kdmsmnPE4uqN3yMIHkZzNNiRASSJUBFgQAUWik6kYA9Fgyw2MPh?=
 =?us-ascii?q?d0J57CgL5lHkshtM1v5oNx7nX2jEvgiobTM0SIWFIBpS8wFP/EPVMc2Y7uJuEC?=
 =?us-ascii?q?BU5JyhrAqRKmOFYwREF30GWkuBB1r7JLmh+cHA8/SEBuq5N/bOY6+BqelAWPeT?=
 =?us-ascii?q?356vzpFq/zWRNsWMI3liCec02lFYUHB9GsTZnSgPSiMNmyLMac6buAmz+iltos?=
 =?us-ascii?q?+j9/TrXRrl5ZGTBLtKLdVv5xe2jL+DNu6XmSZ5MCtY2YkKxXPS07gf21gSiy51?=
 =?us-ascii?q?ejmpELQAszPNTa3Klq9WCR4bdz18NM9S460g2QlNPNbRisnp2b5gkv41F1BFWE?=
 =?us-ascii?q?Thms63ZMwKIGK9NFLdCEaILrSGIjLLzN/tYaOhUr1dl+FUtxy2uTaGHE7vJDWD?=
 =?us-ascii?q?lz/1Vx+xNeFAlj2UPBtbuIulaBZiFXDjTM76ah28KNJ4lyA2zqYuhnzUNW8QKz?=
 =?us-ascii?q?x8c0JWo72U7CNYhOh/GmNb4npkK+mEhziW7+3CJpkKtvtrBzx+l/hG73Qi17tV?=
 =?us-ascii?q?8CZESeRpmCvTq95iuU2pnvOTxTpnThVOrC1GhIaKvUVkJKXY+YNMWXfC/BIR82?=
 =?us-ascii?q?qQDw4GqMdiCt3qo6pQ0MTAlLrvKDde9NLZ5csdCNLSKMKCMXohNwLmGT/UDAQf?=
 =?us-ascii?q?Sz6rOnrSh0hckPGU632UoYI2qpnqmJoSVLBbUEY5Ge8dCkRgT5Q+J8JeWD812Z?=
 =?us-ascii?q?qGkMkN5GClrxiZEMFHopfvVf+IB/jrbjGDgu8ALycIxrbxNsw8MoD6y0pvcBEu?=
 =?us-ascii?q?gIvOC2LUXNZQvjdmaA4k5klApjw2b2s83ArAbQer6WVbQfu1mBExohFzbeQk6H?=
 =?us-ascii?q?Hn5FJhYhLgozExi004h53djCySdyC5eK2odYhSCify5w49P8W/CxYlMyWxkFZi?=
 =?us-ascii?q?OTOCQKhey/NMfH5mwC/Vv4BCH7YIQaRabVkQzPeMavMA1VVatzXhxElb6O+DAp?=
 =?us-ascii?q?xnwk9iSZOwomgI6QNhaMUpP6WYcLJE0lVKlIqPuCGy3+w8yQNYIFwCpifaWicS?=
 =?us-ascii?q?u08PfoIvJCmp+OFqoViAkiFAe29KTPMpofNs+0UVP+WG0jKm0rhfJ0T3POuaef?=
 =?us-ascii?q?C3oW/FwPWFS1V4/UMSllJZ+qB23N04dEzcA1sixb3XFVICNdDDMh1Sd8pf7mPU?=
 =?us-ascii?q?ew6Pt/nAxdR+OIDrRbOgdvOHqKtB2hHsJw0uBYlZq51ZRpQ=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BsAACzzhJch0O0hNFjGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBZYFWBYIRJ5gnKYE/OWiRW4ZzERgTAYFLhXoiOBIBAwEBAQEBAQI?=
 =?us-ascii?q?BEwEBAQgNCQgpL4I2JAGCYgMDAQIvAUYGCQEBGDgDVAYBEgWCUUuCAQWpdYQCA?=
 =?us-ascii?q?YYnh32EP3qBHIERATKCKosRAok7AYF2hROQSgcCikyHAgsYkUosiQKQG4FdgXd?=
 =?us-ascii?q?wgzyCJxcSjVQBVx4BATEBgQQBAYxCAQE?=
X-IPAS-Result: =?us-ascii?q?A0BsAACzzhJch0O0hNFjGgEBAQEBAgEBAQEHAgEBAQGBZYF?=
 =?us-ascii?q?WBYIRJ5gnKYE/OWiRW4ZzERgTAYFLhXoiOBIBAwEBAQEBAQIBEwEBAQgNCQgpL?=
 =?us-ascii?q?4I2JAGCYgMDAQIvAUYGCQEBGDgDVAYBEgWCUUuCAQWpdYQCAYYnh32EP3qBHIE?=
 =?us-ascii?q?RATKCKosRAok7AYF2hROQSgcCikyHAgsYkUosiQKQG4FdgXdwgzyCJxcSjVQBV?=
 =?us-ascii?q?x4BATEBgQQBAYxCAQE?=
X-IronPort-AV: E=Sophos;i="5.56,349,1539673200"; 
   d="scan'208";a="43985830"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 13 Dec 2018 13:31:49 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728075AbeLMVbs (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 13 Dec 2018 16:31:48 -0500
Received: from mga03.intel.com ([134.134.136.65]:43553 "EHLO mga03.intel.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1727743AbeLMVbn (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 13 Dec 2018 16:31:43 -0500
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from fmsmga004.fm.intel.com ([10.253.24.48])
  by orsmga103.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 13 Dec 2018 13:31:42 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,349,1539673200"; 
   d="scan'208";a="127709251"
Received: from sjchrist-coffee.jf.intel.com ([10.54.74.154])
  by fmsmga004.fm.intel.com with ESMTP; 13 Dec 2018 13:31:42 -0800
From: Sean Christopherson <sean.j.christopherson@intel.com>
To: Andy Lutomirski <luto@kernel.org>,
        Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        x86@kernel.org, Dave Hansen <dave.hansen@linux.intel.com>,
        Peter Zijlstra <peterz@infradead.org>,
        Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
Cc: "H. Peter Anvin" <hpa@zytor.com>, linux-kernel@vger.kernel.org,
        linux-sgx@vger.kernel.org, Andy Lutomirski <luto@amacapital.net>,
        Josh Triplett <josh@joshtriplett.org>,
        Haitao Huang <haitao.huang@linux.intel.com>,
        Jethro Beekman <jethro@fortanix.com>,
        "Dr . Greg Wettstein" <greg@enjellic.com>
Subject: [RFC PATCH v4 5/5] x86/vdso: Add __vdso_sgx_enter_enclave() to wrap SGX enclave transitions
Date: Thu, 13 Dec 2018 13:31:35 -0800
Message-Id: <20181213213135.12913-6-sean.j.christopherson@intel.com>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <20181213213135.12913-1-sean.j.christopherson@intel.com>
References: <20181213213135.12913-1-sean.j.christopherson@intel.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Intel Software Guard Extensions (SGX) SGX introduces a new CPL3-only
enclave mode that runs as a sort of black box shared object that is
hosted by an untrusted normal CPL3 process.

Enclave transitions have semantics that are a lovely blend of SYCALL,
SYSRET and VM-Exit.  In a non-faulting scenario, entering and exiting
an enclave can only be done through SGX-specific instructions, EENTER
and EEXIT respectively.  EENTER+EEXIT is analogous to SYSCALL+SYSRET,
e.g. EENTER/SYSCALL load RCX with the next RIP and EEXIT/SYSRET load
RIP from R{B,C}X.

But in a faulting/interrupting scenario, enclave transitions act more
like VM-Exit and VMRESUME.  Maintaining the black box nature of the
enclave means that hardware must automatically switch CPU context when
an Asynchronous Exiting Event (AEE) occurs, an AEE being any interrupt
or exception (exceptions are AEEs because asynchronous in this context
is relative to the enclave and not CPU execution, e.g. the enclave
doesn't get an opportunity to save/fuzz CPU state).

Like VM-Exits, all AEEs jump to a common location, referred to as the
Asynchronous Exiting Point (AEP).  The AEP is specified at enclave entry
via register passed to EENTER/ERESUME, similar to how the hypervisor
specifies the VM-Exit point (via VMCS.HOST_RIP at VMLAUNCH/VMRESUME).
Resuming the enclave/VM after the exiting event is handled is done via
ERESUME/VMRESUME respectively.  In SGX, AEEs that are handled by the
kernel, e.g. INTR, NMI and most page faults, IRET will journey back to
the AEP which then ERESUMEs th enclave.

Enclaves also behave a bit like VMs in the sense that they can generate
exceptions as part of their normal operation that for all intents and
purposes need to handled in the enclave/VM.  However, unlike VMX, SGX
doesn't allow the host to modify its guest's, a.k.a. enclave's, state,
as doing so would circumvent the enclave's security.  So to handle an
exception, the enclave must first be re-entered through the normal
EENTER flow (SYSCALL/SYSRET behavior), and then resumed via ERESUME
(VMRESUME behavior) after the source of the exception is resolved.

All of the above is just the tip of the iceberg when it comes to running
an enclave.  But, SGX was designed in such a way that the host process
can utilize a library to build, launch and run an enclave.  This is
roughly analogous to how e.g. libc implementations are used by most
applications so that the application can focus on its business logic.

The big gotcha is that because enclaves can generate *and* handle
exceptions, any SGX library must be prepared to handle nearly any
exception at any time (well, any time a thread is executing in an
enclave).  In Linux, this means the SGX library must register a
signal handler in order to intercept relevant exceptions and forward
them to the enclave (or in some cases, take action on behalf of the
enclave).  Unfortunately, Linux's signal mechanism doesn't mesh well
with libraries, e.g. signal handlers are process wide, are difficult
to chain, etc...  This becomes particularly nasty when using multiple
levels of libraries that register signal handlers, e.g. running an
enclave via cgo inside of the Go runtime.

In comes vDSO to save the day.  Now that vDSO can fixup exceptions,
add a function, __vdso_sgx_enter_enclave(), to wrap enclave transitions
and intercept any exceptions that occur when running the enclave.

__vdso_sgx_enter_enclave() accepts four parameters:

  - The ENCLU leaf to execute (must be EENTER or ERESUME).

  - A pointer to a Thread Control Structure (TCS).  A TCS is a page
    within the enclave that defines/tracks the context of an enclave
    thread.

  - An optional 'struct sgx_enclave_regs' pointer.  If defined, the
    corresponding registers are loaded prior to entering the enclave
    and saved after (cleanly) exiting the enclave.

    The effective enclave register ABI follows the kernel x86-64 ABI.
    The x86-64 userspace ABI is not used due to RCX being usurped by
    hardware to pass the return RIP to the enclave.

  - An optional 'struct sgx_enclave_exception' pointer.  If provided,
    the struct is filled with the faulting ENCLU leaf, trapnr, error
    code and address if an unhandled exception occurs on ENCLU or in
    the enclave.  An unhandled exception is an exception that would
    normally be delivered to userspace via a signal, e.g. SIGSEGV.

    Note that this means that not all enclave exits are reported to
    the caller, e.g. interrupts and faults that are handled by the
    kernel do not trigger fixup and IRET back to ENCLU[ERESUME], i.e.
    unconditionally resume the enclave.

Suggested-by: Andy Lutomirski <luto@amacapital.net>
Cc: Andy Lutomirski <luto@amacapital.net>
Cc: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
Cc: Dave Hansen <dave.hansen@linux.intel.com>
Cc: Josh Triplett <josh@joshtriplett.org>
Cc: Haitao Huang <haitao.huang@linux.intel.com>
Cc: Jethro Beekman <jethro@fortanix.com>
Cc: Dr. Greg Wettstein <greg@enjellic.com>
Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
---
 arch/x86/entry/vdso/Makefile             |   2 +
 arch/x86/entry/vdso/vdso.lds.S           |   1 +
 arch/x86/entry/vdso/vsgx_enter_enclave.S | 136 +++++++++++++++++++++++
 arch/x86/include/uapi/asm/sgx.h          |  44 ++++++++
 4 files changed, 183 insertions(+)
 create mode 100644 arch/x86/entry/vdso/vsgx_enter_enclave.S

diff --git a/arch/x86/entry/vdso/Makefile b/arch/x86/entry/vdso/Makefile
index b8f7c301b88f..5e28f838d8aa 100644
--- a/arch/x86/entry/vdso/Makefile
+++ b/arch/x86/entry/vdso/Makefile
@@ -18,6 +18,7 @@ VDSO32-$(CONFIG_IA32_EMULATION)	:= y
 
 # files to link into the vdso
 vobjs-y := vdso-note.o vclock_gettime.o vgetcpu.o
+vobjs-$(VDSO64-y)		+= vsgx_enter_enclave.o
 
 # files to link into kernel
 obj-y				+= vma.o extable.o
@@ -85,6 +86,7 @@ CFLAGS_REMOVE_vdso-note.o = -pg
 CFLAGS_REMOVE_vclock_gettime.o = -pg
 CFLAGS_REMOVE_vgetcpu.o = -pg
 CFLAGS_REMOVE_vvar.o = -pg
+CFLAGS_REMOVE_vsgx_enter_enclave.o = -pg
 
 #
 # X32 processes use x32 vDSO to access 64bit kernel data.
diff --git a/arch/x86/entry/vdso/vdso.lds.S b/arch/x86/entry/vdso/vdso.lds.S
index d3a2dce4cfa9..50952a995a6c 100644
--- a/arch/x86/entry/vdso/vdso.lds.S
+++ b/arch/x86/entry/vdso/vdso.lds.S
@@ -25,6 +25,7 @@ VERSION {
 		__vdso_getcpu;
 		time;
 		__vdso_time;
+		__vdso_sgx_enter_enclave;
 	local: *;
 	};
 }
diff --git a/arch/x86/entry/vdso/vsgx_enter_enclave.S b/arch/x86/entry/vdso/vsgx_enter_enclave.S
new file mode 100644
index 000000000000..0e4cd8a9549a
--- /dev/null
+++ b/arch/x86/entry/vdso/vsgx_enter_enclave.S
@@ -0,0 +1,136 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+
+#include <linux/linkage.h>
+#include <asm/export.h>
+#include <asm/errno.h>
+
+#include "extable.h"
+
+#define RDI		0*8
+#define RSI		1*8
+#define RDX		2*8
+#define R8		3*8
+#define R9		4*8
+#define R10		5*8
+
+#define EX_LEAF		0*8
+#define EX_TRAPNR	0*8+4
+#define EX_ERROR_CODE	0*8+6
+#define EX_ADDRESS	1*8
+
+.code64
+.section .text, "ax"
+
+/*
+ * long __vdso_sgx_enter_enclave(__u32 leaf, void *tcs
+ *				 struct sgx_enclave_regs *regs
+ *				 struct sgx_enclave_exception *e)
+ * {
+ *	if (leaf != SGX_EENTER && leaf != SGX_ERESUME)
+ *		return -EINVAL;
+ *
+ *	if (!tcs)
+ *		return -EINVAL;
+ *
+ *	if (regs)
+ *		copy_regs_to_cpu(regs);
+ *
+ *	try {
+ *		ENCLU[leaf];
+ *	} catch (exception) {
+ *		if (e)
+ *	 		*e = exception;
+ *		return -EFAULT;
+ *	}
+ *
+ *	if (regs)
+ *		copy_cpu_to_regs(regs);
+ *	return 0;
+ * }
+ */
+ENTRY(__vdso_sgx_enter_enclave)
+	/* EENTER <= leaf <= ERESUME */
+	lea	-0x2(%edi), %eax
+	cmp	$0x1, %eax
+	ja	bad_input
+
+	/* TCS must be non-NULL */
+	test	%rsi, %rsi
+	je	bad_input
+
+	/* save non-volatile registers */
+	push	%rbp
+	mov	%rsp, %rbp
+	push	%r15
+	push	%r14
+	push	%r13
+	push	%r12
+	push	%rbx
+
+	/* save @regs and @e to the red zone */
+	mov	%rdx, -0x8(%rsp)
+	mov	%rcx, -0x10(%rsp)
+
+	/* load leaf, TCS and AEP for ENCLU */
+	mov	%edi,      %eax
+	mov	%rsi,      %rbx
+	lea	1f(%rip),  %rcx
+
+	/* optionally copy @regs to registers */
+	test	%rdx, %rdx
+	je	1f
+
+	mov	%rdx, %r11
+	mov	RDI(%r11), %rdi
+	mov	RSI(%r11), %rsi
+	mov	RDX(%r11), %rdx
+	mov	R8(%r11),  %r8
+	mov	R9(%r11),  %r9
+	mov	R10(%r11), %r10
+
+1:      enclu
+
+	/* ret = 0 */
+	xor	%eax, %eax
+
+	/* optionally copy registers to @regs */
+	mov	-0x8(%rsp), %r11
+	test	%r11, %r11
+	je	2f
+
+	mov	%rdi, RDI(%r11)
+	mov	%rsi, RSI(%r11)
+	mov	%rdx, RDX(%r11)
+	mov	%r8,  R8(%r11)
+	mov	%r9,  R9(%r11)
+	mov	%r10, R10(%r11)
+
+	/* restore non-volatile registers and return */
+2:	pop	%rbx
+	pop	%r12
+	pop	%r13
+	pop	%r14
+	pop	%r15
+	pop	%rbp
+	ret
+
+bad_input:
+	mov     $(-EINVAL), %rax
+	ret
+
+.pushsection .fixup, "ax"
+3:	mov	-0x10(%rsp), %r11
+	test	%r11, %r11
+	je	4f
+
+	mov	%eax, EX_LEAF(%r11)
+	mov	%di,  EX_TRAPNR(%r11)
+	mov	%si,  EX_ERROR_CODE(%r11)
+	mov	%rdx, EX_ADDRESS(%r11)
+4:	mov     $(-EFAULT), %rax
+	jmp     2b
+.popsection
+
+_ASM_VDSO_EXTABLE_HANDLE(1b, 3b)
+
+ENDPROC(__vdso_sgx_enter_enclave)
diff --git a/arch/x86/include/uapi/asm/sgx.h b/arch/x86/include/uapi/asm/sgx.h
index 266b813eefa1..4f840b334369 100644
--- a/arch/x86/include/uapi/asm/sgx.h
+++ b/arch/x86/include/uapi/asm/sgx.h
@@ -96,4 +96,48 @@ struct sgx_enclave_modify_pages {
 	__u8	op;
 } __attribute__((__packed__));
 
+/**
+ * struct sgx_enclave_exception - structure to pass register in/out of enclave
+ *				  by way of __vdso_sgx_enter_enclave
+ *
+ * @rdi:	value of %rdi, loaded/saved on enter/exit
+ * @rsi:	value of %rsi, loaded/saved on enter/exit
+ * @rdx:	value of %rdx, loaded/saved on enter/exit
+ * @r8:		value of %r8, loaded/saved on enter/exit
+ * @r9:		value of %r9, loaded/saved on enter/exit
+ * @r10:	value of %r10, loaded/saved on enter/exit
+ */
+struct sgx_enclave_regs {
+	__u64 rdi;
+	__u64 rsi;
+	__u64 rdx;
+	__u64 r8;
+	__u64 r9;
+	__u64 r10;
+};
+
+/**
+ * struct sgx_enclave_exception - structure to report exceptions encountered in
+ *				  __vdso_sgx_enter_enclave
+ *
+ * @leaf:	ENCLU leaf from %rax at time of exception
+ * @trapnr:	exception trap number, a.k.a. fault vector
+ * @error_cdde:	exception error code
+ * @address:	exception address, e.g. CR2 on a #PF
+ */
+struct sgx_enclave_exception {
+	__u32 leaf;
+	__u16 trapnr;
+	__u16 error_code;
+	__u64 address;
+};
+
+/**
+ * typedef __vsgx_enter_enclave_t - Function pointer prototype for
+ *				    __vdso_sgx_enter_enclave
+ */
+typedef long (*__vsgx_enter_enclave_t)(__u32 leaf, void *tcs,
+				       struct sgx_enclave_regs *regs,
+				       struct sgx_enclave_exception *e);
+
 #endif /* _UAPI_ASM_X86_SGX_H */
-- 
2.19.2

