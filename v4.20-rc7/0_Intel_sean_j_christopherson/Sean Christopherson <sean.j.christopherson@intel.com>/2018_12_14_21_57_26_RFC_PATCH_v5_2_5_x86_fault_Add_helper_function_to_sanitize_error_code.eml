Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  15 Dec 2018 13:10:32 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 2ECC45805FC;
	Fri, 14 Dec 2018 13:57:42 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by fmsmga001-1.fm.intel.com with ESMTP; 14 Dec 2018 13:57:41 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A3N/ecxPVYxJ92hPuMlYl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KPv+oMbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRsZfWTJcDI2y?=
 =?us-ascii?q?bIUBCOgOPehXoIfyvFsOtRmzCBKwCO7s0DJEmmX70bEm3+knDArI3BYgH9ULsH?=
 =?us-ascii?q?nMsdv6Kr0dUeaox6TWzTXDdfJW2Szh6IjPahAhoe+DXahrccrWz0kkCgTIjk6O?=
 =?us-ascii?q?poP/OTOZzOYNv3KH4OpgT+KvinUnqx12oji3xscjlJPJhpkSylDC7ih5wYA1Jc?=
 =?us-ascii?q?GmR05/e9KrDJxQtySDOoZwX8gsQHlotT4kxrEavZO3ZjUGxZo5yxLFdvCKcJSE?=
 =?us-ascii?q?7gjiWeuTOTt0mXZodKylixuy8UWs0O3xWteu3FtJrSdIlMTHuGoX2BzJ8MeHT+?=
 =?us-ascii?q?Nw/ke/1jaL0ADe8v9EIU8qmqrBMZIhwaA/loAVsUvdGi/6gkL2jLWZdkk8++io?=
 =?us-ascii?q?7froYqn+q5OCK4N5jhvyPrkgl8ChG+g0LwsDU3SB9em91rDv5Uj5T69Ljv0ynK?=
 =?us-ascii?q?nZqpfaJcEDq669Ag9V1Jsj6hmmAzelztsYh38HI0xBeB6eiIjoNVfOL+7iDfqk?=
 =?us-ascii?q?nVSsnylkx+rcMr3iHJrNNH7Dn6nlfbpn7E5c0gUzwchF551IErEBPO7zWkjpud?=
 =?us-ascii?q?zcDx85MBK7z/zoCdVgzY4eXWOPAqmEMKLdq1OI5+QvI/WSa48RojryN/8l5/v2?=
 =?us-ascii?q?h38jhVAdZbWp3YcQaH2gHvRpOUSZYWb2jdcGC2sKvhc+Q/bsiF2NSjNTY3eyX6?=
 =?us-ascii?q?Qh5jA0Eo6mDIHDRpyzj7yFxiu0AppWZmVeAFCWDXjob5mEW+sLaC+KIM9hlSIL?=
 =?us-ascii?q?WaKiS48m0xGusgj6xqFjLurV/C0YqJ3i2MJ05+3ViRE96zh0A96B3GGKSmF+hn?=
 =?us-ascii?q?kISCMu3KBjvUx9zU+O3rJjg/xYEtxT5OlFUh0gOp7e1OF6D9HyWgTcftaGUlqm?=
 =?us-ascii?q?Q9OmAS0vQdI12dMBf0F9G9C6hBDZwyWqG6MVl6CMBJEs8aLTxX7xK9x5y3bHzq?=
 =?us-ascii?q?YhiVYmT9BLNW2ngK5/6gfSC5TIk0Wfi6ala6Ac0DTR+2eEyGqEpFtYXxJoUaXZ?=
 =?us-ascii?q?QXAfYVPbosnj6UPcUbCiE7QnPRFHyc6ZNKRKbNrljVFFRPfmPNTTeGaxm2a2BR?=
 =?us-ascii?q?aVybKAdovqe2MB3CrDDEgIiRwc/XGDNQImHCeuv3reDCByFVLoe07j7PNxqG2l?=
 =?us-ascii?q?QUMuzwGFdUth16Gr9R4TnvGcT/IT3rQZuCYusTl0HVC9387IBNqEvQZuYKJcYd?=
 =?us-ascii?q?Yl6lddyW3ZrxB9PoCnL616ml4ecgF3v0Ty1xV3CoRMi9QqoGktzApoLaKY0VVB?=
 =?us-ascii?q?dzyD0JD0O73XLHTy/R+1Z67X3FHezMiZ+qMV5PskrFXjuRmjFlA+/HV/z9lVz3?=
 =?us-ascii?q?yc643QAwoWT53wXVg49hhgq77Bfyky+pnb1XtvMamzrD/PwNYpBOojyha9cNZT?=
 =?us-ascii?q?KqKEFAnuE8IEA8iiMvAlm1+sbhgcJuBd6LY0P9+6d/uBwKOqPPtgkCi6gmhd4Y?=
 =?us-ascii?q?F90liD9yxzSuPT25YFwveY3haIVjvmjVehtNz3lp5AZT0IAmW/zi3kDpZLZqJu?=
 =?us-ascii?q?ZYYLFXuuI8qvy9Vkhp7iR2RX9ES+CFMBwsOpfwSdb0b83QFJyUsYu3inljamwD?=
 =?us-ascii?q?xulDEpqLGS3CjPw+TkaRoGNXRHRGhkjVfwP4e0i8oWU1SvbwgsjBGl/1r1x7BH?=
 =?us-ascii?q?pKRjKGneWUdJfynsI2BiSKewraeCY8hU5ZMssCVXVvm8YF+ARr78pRsazz3sH2?=
 =?us-ascii?q?9EyD8ncDGqv43znwZmh2KFMHZzsH3ZdNlyxRjF/tzcRv1R3j0cSCljkzbXBVu8?=
 =?us-ascii?q?P9iv/dqKkZfOqeS+V2OnVp1Ofijn14KAtC2n5WJ0BR2zhey8mtriEQIiyy/0y8?=
 =?us-ascii?q?FqVTnUrBb7eoTq1761MeV9cklqBV/87dF3GoV/kos2mZER1mIWhpST/Xobj2jz?=
 =?us-ascii?q?Nc9X1r75bHoIXTQL2cLa4BD52E1/KXKE34H5WW+cwsd7Z9m6f3kZ2iQy781RDK?=
 =?us-ascii?q?eU7bpEnTZ6o1airALRZ+R9kSkZyfc09HEahOQJshI3ziqBGrASAVVYPSv0mhSN?=
 =?us-ascii?q?7tC+r79YaHyhcLeuz0p+gc6uDKuZrQ5CQnb5dYwvHStx7sV5LVLN32f/6oDieN?=
 =?us-ascii?q?nMc90TsgeYnAvHj+hQMJgxjOYFhTJ7OWLhun0o0/I7jRtr3Z2gvYmIMWNt/L+i?=
 =?us-ascii?q?Ah5DNz34fMcT+jDrjaZDkceaxYGvHpN9GjoVWJvkV+6nEDUXtf7/LQaBDCU8qm?=
 =?us-ascii?q?uHGbrYBQKQ811pr3XLE5C2LX2XIGQZwM5mRBmcIkxfnQ8VUC87np4/CgCl2sjh?=
 =?us-ascii?q?fF1l6TAW417ysgFMxf5wNxnjTmffox+lajUuR5iaMhVW9RtO51vPPcyd8+JzHD?=
 =?us-ascii?q?xY/pu7owyWMWGbYwVIDWcUWk2LHVzjP7+u5cXe/OicHOaxM/zOYbCWo+xES/iI?=
 =?us-ascii?q?3Y6v0pdh/zuUNsSPOWRiD+Qm2kVZW3B1Ad/ZmzIJSywYjC/Na8+bpBGh+ix4tM?=
 =?us-ascii?q?y/8fLrWB7x6ouLEbddLdJv+xWui6eZK+GQnDp5KSpf1p4UxX/H1rkf3F0RiyFv?=
 =?us-ascii?q?bTWtEq4AtSnCTK3OgK9XEgUbZjh3NMtJ6aI8wwZMNdTaitPzyr53kPo1B01ZWl?=
 =?us-ascii?q?zmn8GjfdYKLH2lNFPbGEaLM6yLKifWw87se6OzV71RgP9Qtx2xojubF07jPjKe?=
 =?us-ascii?q?lzjmTRyvMOdMjD2FMxxaoo2ybhFtCW37RtL8dhK7KMN3jSExwbAsmnPKNGscPS?=
 =?us-ascii?q?JgfE9XsrKQ7T1XgvNkFmxF73plK/SEmimD4+nZLJYWreVkAiBum+1G53Q6zqNf?=
 =?us-ascii?q?7DtYS/xthCvSstlurkmmk+aVzDpnVRtOqjBTi4OKvUVtI6PZ9pZbVHbA/RIN63?=
 =?us-ascii?q?iQChsQq9tkDN3vp75fytzVmK3vLzdC9oGcwcxJLs7YOYqjLWYmNBvzAz3VRF8B?=
 =?us-ascii?q?UCKsHWLSnUpQlLeV7HLD6tAGqp/pkYFGZbtWVUwzG+lSXlhqGMwqJJZxQy8+lr?=
 =?us-ascii?q?ianIgE6Cz65DjXS8ISm5fDUPuISaHqKTCWipFeahcIyK++JoMWYMmz8Ut4a0J+?=
 =?us-ascii?q?lZqCI0fMXtdT6nlrdic9pERA9ig4QmBlnwr1Ol2F43IJE/Ow2BkshU82Te0z+X?=
 =?us-ascii?q?/M6lEsK1yC8Cc5jkR3mdzjmj2XWDrwKrqgG4BQFyfw8UM2N8W/Cz54cQCo1X5l?=
 =?us-ascii?q?NjPfW6hYx+94eHxmkh30uJ1BA/dQQKRIJhgKyqfTL9chy1dfrW2czExE5O3ID9?=
 =?us-ascii?q?M2lgIwcp2r6WlJ2AFiatMzDajRIrdZiFlWmq+K+CSv07Zi7hUZIhM2/WqUMAUI?=
 =?us-ascii?q?ok0TKr4+Jyey5etqoViZljJFPmpKXPowo+l28Vs9Nv6byCTI0rhfJ0T3POuaef?=
 =?us-ascii?q?DK81PcnNKFFwtjnngDkFNIqP0viZ8u?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ADAAC/JhRch0O0hNFkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGDayeMFYt4KYE/OZdDgXEWGBMBh0ciNAkNAQMBAQE?=
 =?us-ascii?q?BAQECARMBAQEIDQkIKS+CNiQBgmIDAwECJAsBRgYJAQEYOANUBgESBYMcggEFp?=
 =?us-ascii?q?xMzhAIBhieHfYRBeoEcgUSCMYsMAokeJIF0hRSQTgcCkU8LGJFSiTuQJoFGgg5?=
 =?us-ascii?q?wgzyCJxeNZgFXHgEBMQGBBAEBjS4BAQ?=
X-IPAS-Result: =?us-ascii?q?A0ADAAC/JhRch0O0hNFkGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGDayeMFYt4KYE/OZdDgXEWGBMBh0ciNAkNAQMBAQEBAQECARMBAQEID?=
 =?us-ascii?q?QkIKS+CNiQBgmIDAwECJAsBRgYJAQEYOANUBgESBYMcggEFpxMzhAIBhieHfYR?=
 =?us-ascii?q?BeoEcgUSCMYsMAokeJIF0hRSQTgcCkU8LGJFSiTuQJoFGgg5wgzyCJxeNZgFXH?=
 =?us-ascii?q?gEBMQGBBAEBjS4BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,354,1539673200"; 
   d="scan'208";a="44132421"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 14 Dec 2018 13:57:39 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1731290AbeLNV5i (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 14 Dec 2018 16:57:38 -0500
Received: from mga01.intel.com ([192.55.52.88]:13311 "EHLO mga01.intel.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1731020AbeLNV5d (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 14 Dec 2018 16:57:33 -0500
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from fmsmga003.fm.intel.com ([10.253.24.29])
  by fmsmga101.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 14 Dec 2018 13:57:33 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,354,1539673200"; 
   d="scan'208";a="118650669"
Received: from sjchrist-coffee.jf.intel.com ([10.54.74.154])
  by FMSMGA003.fm.intel.com with ESMTP; 14 Dec 2018 13:57:33 -0800
From: Sean Christopherson <sean.j.christopherson@intel.com>
To: Andy Lutomirski <luto@kernel.org>,
        Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        x86@kernel.org, Dave Hansen <dave.hansen@linux.intel.com>,
        Peter Zijlstra <peterz@infradead.org>,
        Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
Cc: "H. Peter Anvin" <hpa@zytor.com>, linux-kernel@vger.kernel.org,
        linux-sgx@vger.kernel.org, Andy Lutomirski <luto@amacapital.net>,
        Josh Triplett <josh@joshtriplett.org>,
        Haitao Huang <haitao.huang@linux.intel.com>,
        Jethro Beekman <jethro@fortanix.com>,
        "Dr . Greg Wettstein" <greg@enjellic.com>
Subject: [RFC PATCH v5 2/5] x86/fault: Add helper function to sanitize error code
Date: Fri, 14 Dec 2018 13:57:26 -0800
Message-Id: <20181214215729.4221-3-sean.j.christopherson@intel.com>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <20181214215729.4221-1-sean.j.christopherson@intel.com>
References: <20181214215729.4221-1-sean.j.christopherson@intel.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

...to prepare for vDSO exception fixup, which will expose the error
code to userspace and runs before set_signal_archinfo(), i.e. squashes
the signal when fixup is successful.

Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
---
 arch/x86/mm/fault.c | 26 ++++++++++++++------------
 1 file changed, 14 insertions(+), 12 deletions(-)

diff --git a/arch/x86/mm/fault.c b/arch/x86/mm/fault.c
index 7e8a7558ca07..fefeb745d21d 100644
--- a/arch/x86/mm/fault.c
+++ b/arch/x86/mm/fault.c
@@ -719,18 +719,22 @@ pgtable_bad(struct pt_regs *regs, unsigned long error_code,
 	oops_end(flags, regs, sig);
 }
 
-static void set_signal_archinfo(unsigned long address,
-				unsigned long error_code)
+static void sanitize_error_code(unsigned long address,
+				unsigned long *error_code)
 {
-	struct task_struct *tsk = current;
-
 	/*
 	 * To avoid leaking information about the kernel page
 	 * table layout, pretend that user-mode accesses to
 	 * kernel addresses are always protection faults.
 	 */
 	if (address >= TASK_SIZE_MAX)
-		error_code |= X86_PF_PROT;
+		*error_code |= X86_PF_PROT;
+}
+
+static void set_signal_archinfo(unsigned long address,
+				unsigned long error_code)
+{
+	struct task_struct *tsk = current;
 
 	tsk->thread.trap_nr = X86_TRAP_PF;
 	tsk->thread.error_code = error_code | X86_PF_USER;
@@ -771,6 +775,8 @@ no_context(struct pt_regs *regs, unsigned long error_code,
 		 * faulting through the emulate_vsyscall() logic.
 		 */
 		if (current->thread.sig_on_uaccess_err && signal) {
+			sanitize_error_code(address, &error_code);
+
 			set_signal_archinfo(address, error_code);
 
 			/* XXX: hwpoison faults will set the wrong code. */
@@ -920,13 +926,7 @@ __bad_area_nosemaphore(struct pt_regs *regs, unsigned long error_code,
 		if (is_errata100(regs, address))
 			return;
 
-		/*
-		 * To avoid leaking information about the kernel page table
-		 * layout, pretend that user-mode accesses to kernel addresses
-		 * are always protection faults.
-		 */
-		if (address >= TASK_SIZE_MAX)
-			error_code |= X86_PF_PROT;
+		sanitize_error_code(address, &error_code);
 
 		if (likely(show_unhandled_signals))
 			show_signal_msg(regs, error_code, address, tsk);
@@ -1045,6 +1045,8 @@ do_sigbus(struct pt_regs *regs, unsigned long error_code, unsigned long address,
 	if (is_prefetch(regs, error_code, address))
 		return;
 
+	sanitize_error_code(address, &error_code);
+
 	set_signal_archinfo(address, error_code);
 
 #ifdef CONFIG_MEMORY_FAILURE
-- 
2.19.2

