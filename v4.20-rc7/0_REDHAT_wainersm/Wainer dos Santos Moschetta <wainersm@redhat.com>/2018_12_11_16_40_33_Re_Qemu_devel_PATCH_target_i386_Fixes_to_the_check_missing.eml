Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 12 Dec 2018 08:52:38 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id DD12E580380
	for <like.xu@linux.intel.com>; Tue, 11 Dec 2018 08:46:26 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 11 Dec 2018 08:46:26 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AQ0QtER2YXDKJ5EGEsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?sesWK/XxwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJfUMZfVyJPAY2y?=
 =?us-ascii?q?YIUAAOUDIelWoJTzp0MMoBW8CgSgGe3ixiNWiX/txqA6z+YsHBva0AA8Ed8Dsn?=
 =?us-ascii?q?LZp8j1OqcIVuC1ybHFwjXZYPNX3zfy9pLIeQ08rvGLRrJ7bNffxlMpFwPZiVWQ?=
 =?us-ascii?q?spHuMTSS1uQWr2eb7/RvVf6zi2E9tgp8pTauyd0tionPmI0V0EvE9SBizYYvO9?=
 =?us-ascii?q?K3VU57bsS4EJdKqy6aMI52T9okTmp1uyg60qULtYCncCUJ0pgr2gPTZv+df4SW?=
 =?us-ascii?q?7B/uVPydLSp6iX59Zr6zmxK//VK9xuDySMW4yktGoylLn9XWqHwA1Bre4dWdRP?=
 =?us-ascii?q?Rn5EeuwzOP2hjT6u5aJUA0krLWK5ogwr4ripoTql7PHiDwmEXrlqOWcV8k+uew?=
 =?us-ascii?q?5+TmZLXpuIOcOpdqhg3iMakigNGzDfk7PwQUQWSW9+Sx2Kf+8UD7WLlKi+c5kq?=
 =?us-ascii?q?jdsJDUP8Qboau5DhdM0ok97ha/Ei6q38kGknkZMl1FfAuLgJPuO1HTJvD3Eemw?=
 =?us-ascii?q?g0+rnDdvxvDGPaPuDo/CL3jeiLrhebd960hByAs819xf5pRUCq0fL/L3QEP+qN?=
 =?us-ascii?q?vYDhoiPgyyxObnDtp91oUDWW6VBa+ZKqzSvUeS5u0zO+mMeJMVuDHlJvgh5v7u?=
 =?us-ascii?q?jmE2lUUSfKm0xpYXbHG4HvJ7I0SWe3bsg9EBEXsUsQo6VuDllFqCUTsAL0u0RL?=
 =?us-ascii?q?82szEnFJq9X8CEQoG2nKfH2iC9EZtLIGdcBReJGHbscoyCHPAUdCOVJNQmizEB?=
 =?us-ascii?q?SP2tRpEs0UKTshTnwe9iJ+vQ5ipKrJ/myZ156vPekVQo+CVpAt+B+2eKSW5ygy?=
 =?us-ascii?q?UPXTBhx711o0F21gKe17NliedTD91Z6qB1VVIXOYPV1eB9Q/D7UAHGZcvBHFum?=
 =?us-ascii?q?S9+lBiotZsg8z98HfwB2HND03T7Z2C//PLYUkbGRTJAz6ern1n7tIN017nHd36?=
 =?us-ascii?q?ksk0UvCp9QPGygi7Rk8iDJCoLJmlnfnKGvI/dPlBXR/XuOmDLd9HpTVxR9BOCc?=
 =?us-ascii?q?BSgS?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AyAQBf6Q9cmBHrdtBkGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBZYExgTmBFhODe4h4izGBYC2XZoFfFBgHDYcuIjgSAQMBAQEBAQECARM?=
 =?us-ascii?q?BAQEBAQgLCwYbDiMMgjYFAgMaAQaCWwEBAQECAQECIAQRDgopAwMBAgYBAQoOC?=
 =?us-ascii?q?gICIgQCAgMBUwYNBgIBAQGDHAGBeQgBBKV3fDOFQIRtgQuLMBeBf4E4gjY1hEY?=
 =?us-ascii?q?EIYMaglcCiRcShhZGhXGKMFUJhklAikIGGIIphz2HWpkzgV2Bd00jFTuCbAmCH?=
 =?us-ascii?q?hcSiHqFKSkxgQcch3pWgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AyAQBf6Q9cmBHrdtBkGwEBAQEDAQEBBwMBAQGBZYExgTm?=
 =?us-ascii?q?BFhODe4h4izGBYC2XZoFfFBgHDYcuIjgSAQMBAQEBAQECARMBAQEBAQgLCwYbD?=
 =?us-ascii?q?iMMgjYFAgMaAQaCWwEBAQECAQECIAQRDgopAwMBAgYBAQoOCgICIgQCAgMBUwY?=
 =?us-ascii?q?NBgIBAQGDHAGBeQgBBKV3fDOFQIRtgQuLMBeBf4E4gjY1hEYEIYMaglcCiRcSh?=
 =?us-ascii?q?hZGhXGKMFUJhklAikIGGIIphz2HWpkzgV2Bd00jFTuCbAmCHhcSiHqFKSkxgQc?=
 =?us-ascii?q?ch3pWgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,342,1539673200"; 
   d="scan'208";a="56439908"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 11 Dec 2018 08:46:25 -0800
Received: from localhost ([::1]:40046 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gWlAu-0004Jv-Nr
	for like.xu@linux.intel.com; Tue, 11 Dec 2018 11:46:24 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:40983)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <wainersm@redhat.com>) id 1gWl5Y-00085n-5C
	for qemu-devel@nongnu.org; Tue, 11 Dec 2018 11:40:53 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <wainersm@redhat.com>) id 1gWl5W-0001zo-3D
	for qemu-devel@nongnu.org; Tue, 11 Dec 2018 11:40:52 -0500
Received: from mx1.redhat.com ([209.132.183.28]:41422)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <wainersm@redhat.com>) id 1gWl5S-0001wU-65
	for qemu-devel@nongnu.org; Tue, 11 Dec 2018 11:40:48 -0500
Received: from smtp.corp.redhat.com (int-mx03.intmail.prod.int.phx2.redhat.com
	[10.5.11.13])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 3973D3DE2C;
	Tue, 11 Dec 2018 16:40:42 +0000 (UTC)
Received: from localhost.localdomain (ovpn-121-175.rdu2.redhat.com
	[10.10.121.175])
	by smtp.corp.redhat.com (Postfix) with ESMTP id B24E6608F7;
	Tue, 11 Dec 2018 16:40:39 +0000 (UTC)
To: Eduardo Habkost <ehabkost@redhat.com>
References: <20181207221417.5152-1-wainersm@redhat.com>
	<20181210164657.GB4669@habkost.net>
From: Wainer dos Santos Moschetta <wainersm@redhat.com>
Message-ID: <5cd0b649-c74f-877d-4b5d-a0943a04c7eb@redhat.com>
Date: Tue, 11 Dec 2018 14:40:33 -0200
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101
	Thunderbird/52.5.2
MIME-Version: 1.0
In-Reply-To: <20181210164657.GB4669@habkost.net>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 7bit
Content-Language: en-US
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.13
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.29]);
	Tue, 11 Dec 2018 16:40:42 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH] target/i386: Fixes to the check missing
 features routine
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: pbonzini@redhat.com, crosa@redhat.com, ccarrara@redhat.com,
	qemu-devel@nongnu.org, rth@twiddle.net
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>


On 12/10/2018 02:46 PM, Eduardo Habkost wrote:
> On Fri, Dec 07, 2018 at 05:14:17PM -0500, Wainer dos Santos Moschetta wrote:
>> The x86_cpu_class_check_missing_features() returns a list
>> of unavailable features compared to the host CPU. Currently it may
>> return empty strings for unamed features as well as duplicated
>> names.
>>
>> For example, the qmp "query-cpu-definitions" below shows one empty
>> string and repeated "mpx" entries:
>>
>> (...)
>> {"execute": "query-cpu-definitions"}
>> (...)
>>          {
>>              "name": "Cascadelake-Server",
>>              "typename": "Cascadelake-Server-x86_64-cpu",
>>              "unavailable-features": [
>>                  "hle",
>>                  "rtm",
>>                  "mpx",
>>                  "avx512f",
>>                  "avx512dq",
>>                  "rdseed",
>>                  "adx",
>>                  "smap",
>>                  "clflushopt",
>>                  "clwb",
>>                  "intel-pt",
>>                  "avx512cd",
>>                  "avx512bw",
>>                  "avx512vl",
>>                  "pku",
>>                  "",
>>                  "avx512vnni",
>>                  "spec-ctrl",
>>                  "ssbd",
>>                  "3dnowprefetch",
>>                  "xsavec",
>>                  "xgetbv1",
>>                  "mpx",
>>                  "mpx",
>>                  "avx512f",
>>                  "avx512f",
>>                  "avx512f",
>>                  "pku"
>>              ],
>> (...)
>>
>> Signed-off-by: Wainer dos Santos Moschetta <wainersm@redhat.com>
>> ---
>> Note: the skipped testcase was used to test fix in my system so it has
>> assumptions about the host CPU. It's impracticial to change it to allow
>> running on any system though. Therefore, I am okay on either leave or remove
>> it. Opinions?
>> ---
>>   target/i386/cpu.c                   | 12 +++++-
>>   tests/acceptance/cpu_definitions.py | 61 +++++++++++++++++++++++++++++
>>   2 files changed, 72 insertions(+), 1 deletion(-)
>>   create mode 100644 tests/acceptance/cpu_definitions.py
>>
>> diff --git a/target/i386/cpu.c b/target/i386/cpu.c
>> index f81d35e1f9..2502a3adda 100644
>> --- a/target/i386/cpu.c
>> +++ b/target/i386/cpu.c
>> @@ -3615,19 +3615,29 @@ static void x86_cpu_class_check_missing_features(X86CPUClass *xcc,
>>   
>>       x86_cpu_filter_features(xc);
>>   
>> +    /* Uses an auxiliar dictionary to ensure the list of features has not
>> +       repeated name. */
>> +    QDict *unique_feats_dict = qdict_new();
> Multiline comments are formatted this way:
>
>   /*
>    * like
>    * this
>    */
>
> (See CODING_STYLE for details)

scripts/checkpatch.pl did not catch it. Should it?

Thanks!

- Wainer

>
> In this case, we can probably make the comment fit in a single
> line:
>
>      /* Auxiliary dict to avoid duplicate entries in the list */
>
>> +
>>       for (w = 0; w < FEATURE_WORDS; w++) {
>>           uint32_t filtered = xc->filtered_features[w];
>>           int i;
>>           for (i = 0; i < 32; i++) {
>>               if (filtered & (1UL << i)) {
>> +                const char *fname = g_strdup(x86_cpu_feature_name(w, i));
> I believe you didn't mean to call g_strdup() here, as you are now
> calling g_strdup(fname) below.
>
>> +                if (!fname || qdict_haskey(unique_feats_dict, fname)) {
>> +                    continue;
>> +                }
>>                   strList *new = g_new0(strList, 1);
>> -                new->value = g_strdup(x86_cpu_feature_name(w, i));
>> +                new->value = g_strdup(fname);
>>                   *next = new;
>>                   next = &new->next;
>> +                qdict_put_null(unique_feats_dict, new->value);
>>               }
>>           }
>>       }
>>   
>> +    g_free(unique_feats_dict);
>>       object_unref(OBJECT(xc));
>>   }
>>   
>> diff --git a/tests/acceptance/cpu_definitions.py b/tests/acceptance/cpu_definitions.py
>> new file mode 100644
>> index 0000000000..65cea0427e
>> --- /dev/null
>> +++ b/tests/acceptance/cpu_definitions.py
>> @@ -0,0 +1,61 @@
>> +# CPU definitions tests.
>> +#
>> +# Copyright (c) 2018 Red Hat, Inc.
>> +#
>> +# Author:
>> +#  Wainer dos Santos Moschetta <wainersm@redhat.com>
>> +#
>> +# This work is licensed under the terms of the GNU GPL, version 2 or
>> +# later.  See the COPYING file in the top-level directory.
>> +
>> +from avocado import skip
>> +from avocado_qemu import Test
>> +
>> +
>> +class CPUDefinitions(Test):
>> +    """
>> +    Tests for the CPU definitions.
>> +
>> +    :avocado: enable
>> +    :avocado: tags=x86_64
>> +    """
>> +    def test_unavailable_features(self):
>> +        self.vm.add_args("-machine", "q35,accel=kvm")
> Do you really need accel=kvm to reproduce the original bug?
>
>> +        self.vm.launch()
>> +        cpu_definitions = self.vm.command('query-cpu-definitions')
>> +        self.assertTrue(len(cpu_definitions) > 0)
>> +        for cpu_model in cpu_definitions:
>> +            name = cpu_model.get('name')
>> +            unavailable_features = cpu_model.get('unavailable-features')
>> +
>> +            self.assertNotIn("", unavailable_features,
>> +                             name + " has unamed feature")
>> +            self.assertEqual(len(unavailable_features),
>> +                             len(set(unavailable_features)),
>> +                             name + " has duplicate feature")
>> +
>> +    @skip("Have assumptions about the host CPU")
>> +    def test_unavailable_features_manual(self):
>> +        """
>> +        This test is meant for manual testing only because the list of expected
>> +        unavailable features depend on the actual host CPU knowledge.
>> +        """
>> +        expected_cpu = 'Cascadelake-Server'
>> +        expected_unavailable_features = ["hle", "rtm", "mpx", "avx512f",
>> +                                         "avx512dq", "rdseed", "adx", "smap",
>> +                                         "clflushopt", "clwb", "intel-pt",
>> +                                         "avx512cd", "avx512bw", "avx512vl",
>> +                                         "pku", "avx512vnni", "spec-ctrl",
>> +                                         "ssbd", "3dnowprefetch", "xsavec",
>> +                                         "xgetbv1"]
> It looks like this test will work only on one specific host CPU
> model.  It seems very unlikely that anybody will ever try to run
> it manually.  I suggest just deleting it.
>
>> +
>> +        self.vm.add_args("-machine", "q35,accel=kvm")
>> +        self.vm.launch()
>> +        cpu_definitions = self.vm.command('query-cpu-definitions')
>> +        self.assertTrue(len(cpu_definitions) > 0)
>> +
>> +        cpus = [cpu_model for cpu_model in cpu_definitions
>> +                if cpu_model['name'] == expected_cpu]
>> +        actual_unavailable_features = cpus[0]['unavailable-features']
>> +        self.assertCountEqual(expected_unavailable_features,
>> +                              actual_unavailable_features)
>> -- 
>> 2.19.1
>>


