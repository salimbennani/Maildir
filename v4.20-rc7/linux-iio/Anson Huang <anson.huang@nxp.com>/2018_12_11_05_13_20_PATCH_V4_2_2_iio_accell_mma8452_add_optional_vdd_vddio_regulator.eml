Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 11 Dec 2018 19:46:40 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 30B3E5807A2;
	Mon, 10 Dec 2018 21:13:32 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by fmsmga002-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 10 Dec 2018 21:13:31 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AgIAByhKFormW2k6hz9mcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgVKPj4rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZXshfSTFPAp+y?=
 =?us-ascii?q?YYUMAeoOP+FWr4jhqFUBohS+HhGsCeH0xz9Un3/7x7E23v49HQ3b2gErAtIAsG?=
 =?us-ascii?q?7TrNXwLKofTea1zLLPzTXFcvhY2yr955LOchAuvPqBWqh/cczKyUkoEQPJlFWQ?=
 =?us-ascii?q?qZH/MDOT2eQAqG6b7uV4Ve61l2EnrARxryGpy8wxiYfJnpoYxk7Y+Sh92oo5ON?=
 =?us-ascii?q?O1RFBhbdK5E5ZcqzuWOop0T886Xm1kpSI3xqcItJKmZiQG1ZYqyhHFZ/GGcoWE?=
 =?us-ascii?q?+hzjW/iSLDtkgX9ofaiwiAu88UWjz+D8WMa53VJXoSdAj9bDqGsC2hPW58WHSf?=
 =?us-ascii?q?Z98Fqu1DCS3A7J8O5EO1o7la/DJp4h3LEwkp0TvFzdHi/5hkr2lrWadkY69eiy?=
 =?us-ascii?q?7eTofLHmqoWbN49uhQHyKqUumsqhDuQkKgUCQXSX9OCm2LH+80D1Xq9GguA1n6?=
 =?us-ascii?q?XFqpzXJMYWqra8AwBP04Yj7xi/Dy2h0NQdhXQHKFNFeBSaj4nmIl3OI+73De25?=
 =?us-ascii?q?g1uylDdn3vfGP7PnAprTNHjOi6nhfblj5E5G0gYzzs5Q54hSCr4fJPL/QEjxtM?=
 =?us-ascii?q?bXDhMhKQy73/7nCMlh1oMZQW+PBq6ZMKDMvlOS6eMvPvKBZIsUuDb7Nvgk6OTi?=
 =?us-ascii?q?jX4/mV8BY6ap2YEbZ2y/HvRjO0+Ze2bjgs8dEWcWuQozVOzqh0eDUT5PfXmyWL?=
 =?us-ascii?q?gw5jEmCI28C4fDSZuggLiA3Ce9A51XaXpKClGKEXf0aYqEX+0AZz6VIs9kijYE?=
 =?us-ascii?q?T6SuS5c91RGysw/307hnLu3K9SECtpLj09515+vUlRwp8Tx0DsKd03yCTm1un2?=
 =?us-ascii?q?MIQSM20757oUBn1liD1q14ieRCFdNP//NJThs6NZnEwuNgENDyWgXBftSTRFa8?=
 =?us-ascii?q?WNqmAyo8TtYww98IfkZ8FM+ujhHF3yq2HbAVk6aHC4Az8qLZx3LxPdpyy27a1K?=
 =?us-ascii?q?k9iFkrWshPOneghqJl8wjTBpTGk0OWl6uxcaQc3SjN9HqMzGaUvUFYVhJwXrvB?=
 =?us-ascii?q?XXwFekTWqtH57FvYT7CyEbQnLhdBycmaJ6RXcNLpk0tJSO3jONvEZWKxgHm/BR?=
 =?us-ascii?q?CPyrOIb4rqfmEd0T7ZCEgFlQAT4HmHORI/Bienv2LREjhuGUjzbEPr9Ol0sGm7?=
 =?us-ascii?q?QVMszwGWc01h0KK49QMPivyCVfwfxLIEtz0nqzVvAlm92cnbC96BpwpnYaVdbs?=
 =?us-ascii?q?kx4FZB1WLFqQN9OoasILxlhl4baw53pV/h1w1rCoVclsgntG8qzAt3KaKfzFNB?=
 =?us-ascii?q?dzOZ0YrsOrHNLWny5hSva6/Q2lHRy9uW/qYP6PIlq1Tspg2pF0wi82l53NlRyX?=
 =?us-ascii?q?eT+pLKDA8KW5LrTkk37wR6p63dYiQl/YzU0WNjMKaqvT7Cwd4mH/YlxQu6cNdZ?=
 =?us-ascii?q?M6OEExHyHtYeB8ivLuwqhleoYggFPOBU6K47Iceme+Ga166sOeZqhCimgnhf4I?=
 =?us-ascii?q?BhzkKM8DJxS+7V35of3/6UxAqGVzfmg1envcD6goREZTAUHmqixinoHo9RZqtu?=
 =?us-ascii?q?fYkVDWeiOdG4xtJ7h5T1QX5X6EajB08a2M+uYReSdV390hFK2kQNvHOnnjG0zz?=
 =?us-ascii?q?pqnDEzr6qTxTDBzP7mdBUaJGFLXm5ijVH3LIiwjtAaWlWobgczmBuk40b627ZU?=
 =?us-ascii?q?pKBlI2bPRkdIejD8L3t+XauoqrqCf8lP5YsosCVWSui9YUqWSqXgoxscyC7jG2?=
 =?us-ascii?q?pexDYmdzCloJn5nhp6iH6DI3Z3tnbWZcZwxRLH7tzGWfFRxiYGRDV/iTTPBFiz?=
 =?us-ascii?q?JcOp/daXl5fEqOy+THiuVp5QcSnqy4OPqi276HZuAR2+mfCzh9LmHRI70S/9y9?=
 =?us-ascii?q?llSyHIoAzgbYns0qSwKfhncVVwBF/g98p6HZlzk4sqi5EXw3QahJSV/XwcnGf3?=
 =?us-ascii?q?MNVb37/+bXUXST4Kxd7V/Bbq2El5In2VwIL5U22XwtF9aNmifmMWxiU94thJCK?=
 =?us-ascii?q?iO7bxIhyt1okeiogLXbvhwhTMdyfoo6H4HjOAFogstziOBAr8MGUlUJzDjlxON?=
 =?us-ascii?q?79qmtqVYeH6vcaSs1Ep5hd2hCbCCogJGV3rjdJYtAzRw7tlhP1LWy3L89JvkeN?=
 =?us-ascii?q?bLYNIXtx2UlQrAjudPJJIwkPoKmTRoOWbnsXI5zO47iARk3Yums4ifN2Vt4KW5?=
 =?us-ascii?q?DwZENj3yYsMf4DDsgrxYnsaLxICvBZRhFy4PXJvpS/KoDT0Tue7mNwaIDD0ztH?=
 =?us-ascii?q?ObFaDDEg+Y7Udst2jPHIyzN3GLOHkZys1vSwKHK0xYhAAUQS82npokFg2xwMzh?=
 =?us-ascii?q?cUF55i0e51LiqxtMzP5oOAf7UmvFuAiobTI0QoCFLBVK9gFC+1vVMcuG4+JxBS?=
 =?us-ascii?q?5Y+4OurBeXJmyHfQhIDnwJWk+ZB1DlJLau/sLN8+yZBuq4MvvPbq+Cqe1YV/eU?=
 =?us-ascii?q?252v1pFq8CqLNsWKJnNiFeE02lJfXXBlHMTUgzUOSysKlyLUcs6UvhG89jdsrs?=
 =?us-ascii?q?C49vTrVxni5Y+OC7tULNVu9Aq6gaaFN+6Mmil5LSxU2Y8LxX/N0LIfxkIdizly?=
 =?us-ascii?q?dzmxFrQNrS7NQ7zRmq9UDB4bajl/NMhS76I70QlCJ9Tbis7u1rNjiv41ClFFVU?=
 =?us-ascii?q?Hum82zZMwKJX29O03DBEqRKLuGIjjLydntYaygUb1QkPlUtxqotDmBDk/sJS6D?=
 =?us-ascii?q?mCfpVhy1NeFMjTqWPBhfuIG7bxZsBnLvTNPgah2nLtB3iSc6zqEzhnPPLWQcKy?=
 =?us-ascii?q?Rzc1tRrr2M6iNVmul/G21E7nZ/MeaIgTqW7+nGJZYQqvZrBiV0l+RH4HU10bdV?=
 =?us-ascii?q?7SdEROBrlyvWtNJhv1amkuyXwDp9TBVOsipLhJ6MvUh6OaTW7J9AWXPF/BIL9W?=
 =?us-ascii?q?qRChQKqMFjCt3goK1QztnPlKTuKDZN6d7U/M0cB9TKJ8KDKnYuLR3pGDuHRDcC?=
 =?us-ascii?q?GHSpNGqF3GReneuU+3nTqYI14NC4mpsFEORzV1EvEP4eTEN/E4pGaN10WDotmr?=
 =?us-ascii?q?3djOYH4Gr4oBSbDJFZuJnOXfHUAd3gLSbfgbQSI1NCxbriNqwWO5Hy1UtlLFV3?=
 =?us-ascii?q?1syeH0PKRvhIrzFoYAgz5klApjw2BHU21k//dSu15XIeD+HymBMqwEMqeeEg+S?=
 =?us-ascii?q?3zy08yK1fQu202nVVn3Z2vmzebcH39MI+zUJtQBi6ysFI+eNuvWQF/bU6+gWRn?=
 =?us-ascii?q?OS3CSrYXiKFvIyQjwgrVo5gJA+NASaRCbDcZ3/TRbPItmxwIryy9xgld+PfBAJ?=
 =?us-ascii?q?1uvAIwdNinqHcWn0opY8Q4Kq/QDK5IyEVAiKWTuCOhyuE2xkkZPUlHuDedYiMH?=
 =?us-ascii?q?u0wgMrggOjqm+fFq5QWemjxFPm8WWKxu6rhv/1khOuKD5zrnyKJOLQa9OqbXe6?=
 =?us-ascii?q?aQoXTBk82gWlQryk4P0UVIq/w+9cokdUOOWwgE1raKCxkbfZ7GJAZTZtBesnPJ?=
 =?us-ascii?q?cD2SvPflx4JteY66E7asBaWUqLwZmUOoEC4kG4kH8t4GG5CjlkrfKIHuMfRNnQ?=
 =?us-ascii?q?8x/gnwJVmJJPlNdRmXijACqs75x5hym4BAcHVVS2pgKjm++LH/qwogjfaPUdsx?=
 =?us-ascii?q?eDERWY5OfiY5RdamkjBel3lFBjS73u8VzxLE5Dj58GCYRj39acdzIfaVYjtyB9?=
 =?us-ascii?q?ysvzYy6a67jRjQ6JqUbzX+NNJ/qprO6OQyuZmKEbVXQKN7vkOanJNXETjiGWLC?=
 =?us-ascii?q?D9++KoTqZoQEc9P5EDC5X0a5hjZzSN3+dp75IqWWgArlWZxZvaGF0z05c8ywDD?=
 =?us-ascii?q?cTH1F3ve5VoOo2YQwFfop+YhPysQk6H7KwLR3e0di0RWupbzxMQLMXmeG7YaFH?=
 =?us-ascii?q?iikhdOm3zFM+QZwgieq660gAQNcNlB6Igb7paYRFTSXtE3l1dADGpC5/nG9kfK?=
 =?us-ascii?q?5mzOok3B7WuFw0PDWCdegvY2tB6ZV0T0uILHR6Imc8SlSAl43G6wHq1LcXuSJA?=
 =?us-ascii?q?1Z4AyfdIsXTWs5vSay62X6miptPetC9mZMVw8INrNom2C82ds5WWviHWSpaY5g?=
 =?us-ascii?q?SDSym8UfpHk95fCCRIWL9DnmRzap9OgpZI9UdkDpR2HLdIEqR54+nyMTc=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AYAACQRg9ch0O0hNFkHgEGBwaBUQkLA?=
 =?us-ascii?q?YEwUIFcBAsnCoc4A5AVSoIhlz0UgWIQARgTAYdtIjQJDQEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BCA0JCCkjDII2JAGCYgMDAQIkGQEBNwEFCQEBAQFOAy8lAgQBDQUFgxyCAQEBA?=
 =?us-ascii?q?gKbAAKKB4FsM4J2AQEFgQQBAYYiCIdyhC+BVz+BEYdXIIV3iRcahlOBCY9qBwK?=
 =?us-ascii?q?CIQSPLBaRPYd4gSqPZwIEAgQFAg0BAQWBRoIOMxojgzyCGzWDOIocATZygQUBA?=
 =?us-ascii?q?SGJHwGBHgEB?=
X-IPAS-Result: =?us-ascii?q?A0AYAACQRg9ch0O0hNFkHgEGBwaBUQkLAYEwUIFcBAsnCoc?=
 =?us-ascii?q?4A5AVSoIhlz0UgWIQARgTAYdtIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2J?=
 =?us-ascii?q?AGCYgMDAQIkGQEBNwEFCQEBAQFOAy8lAgQBDQUFgxyCAQEBAgKbAAKKB4FsM4J?=
 =?us-ascii?q?2AQEFgQQBAYYiCIdyhC+BVz+BEYdXIIV3iRcahlOBCY9qBwKCIQSPLBaRPYd4g?=
 =?us-ascii?q?SqPZwIEAgQFAg0BAQWBRoIOMxojgzyCGzWDOIocATZygQUBASGJHwGBHgEB?=
X-IronPort-AV: E=Sophos;i="5.56,341,1539673200"; 
   d="scan'208";a="44418906"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 10 Dec 2018 21:13:29 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728832AbeLKFN1 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 11 Dec 2018 00:13:27 -0500
Received: from mail-eopbgr150078.outbound.protection.outlook.com ([40.107.15.78]:34208
        "EHLO EUR01-DB5-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1725993AbeLKFN0 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 11 Dec 2018 00:13:26 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=nxp.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=FLNkFe9xAxVfVlxW3BihdzjowuzzfrIZWGNtZ6iqDbE=;
 b=WdkwwaEJgHUt80R9iL8OYFV2g5LqT9OBe2+PY1o/g5f+I+xtEaRBNTKWx4IUVKCTfDxWdJY42ae2kHyMTqKoEzwg64Sp9YTTIeH7oiLQKiK9WsDQ6iFTwlL+M95Ujs/+fOQa2gKjDkatK9WW1pW97DgWXt/gJcRVQ+o3yHHtJeY=
Received: from DB3PR0402MB3916.eurprd04.prod.outlook.com (52.134.72.18) by
 DB3PR0402MB3642.eurprd04.prod.outlook.com (52.134.65.24) with Microsoft SMTP
 Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1404.22; Tue, 11 Dec 2018 05:13:20 +0000
Received: from DB3PR0402MB3916.eurprd04.prod.outlook.com
 ([fe80::adf8:f49d:deb4:58fd]) by DB3PR0402MB3916.eurprd04.prod.outlook.com
 ([fe80::adf8:f49d:deb4:58fd%3]) with mapi id 15.20.1404.026; Tue, 11 Dec 2018
 05:13:20 +0000
From: Anson Huang <anson.huang@nxp.com>
To: "jic23@kernel.org" <jic23@kernel.org>,
        "knaack.h@gmx.de" <knaack.h@gmx.de>,
        "lars@metafoo.de" <lars@metafoo.de>,
        "pmeerw@pmeerw.net" <pmeerw@pmeerw.net>,
        "robh+dt@kernel.org" <robh+dt@kernel.org>,
        "mark.rutland@arm.com" <mark.rutland@arm.com>,
        "gregkh@linuxfoundation.org" <gregkh@linuxfoundation.org>,
        "martink@posteo.de" <martink@posteo.de>,
        Leonard Crestez <leonard.crestez@nxp.com>,
        "rtresidd@electromag.com.au" <rtresidd@electromag.com.au>,
        "gustavo@embeddedor.com" <gustavo@embeddedor.com>,
        "linux-iio@vger.kernel.org" <linux-iio@vger.kernel.org>,
        "devicetree@vger.kernel.org" <devicetree@vger.kernel.org>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        "festevam@gmail.com" <festevam@gmail.com>,
        "preid@electromag.com.au" <preid@electromag.com.au>
CC: dl-linux-imx <linux-imx@nxp.com>
Subject: [PATCH V4 2/2] iio: accell: mma8452: add optional vdd/vddio regulator
 operation support
Thread-Topic: [PATCH V4 2/2] iio: accell: mma8452: add optional vdd/vddio
 regulator operation support
Thread-Index: AQHUkRA7HSMNTWQlP0OmsN+xMiTx6Q==
Date: Tue, 11 Dec 2018 05:13:20 +0000
Message-ID: <1544504839-10958-2-git-send-email-Anson.Huang@nxp.com>
References: <1544504839-10958-1-git-send-email-Anson.Huang@nxp.com>
In-Reply-To: <1544504839-10958-1-git-send-email-Anson.Huang@nxp.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-mailer: git-send-email 2.7.4
x-clientproxiedby: HK2PR04CA0066.apcprd04.prod.outlook.com
 (2603:1096:202:14::34) To DB3PR0402MB3916.eurprd04.prod.outlook.com
 (2603:10a6:8:10::18)
authentication-results: spf=none (sender IP is )
 smtp.mailfrom=anson.huang@nxp.com; 
x-ms-exchange-messagesentrepresentingtype: 1
x-originating-ip: [119.31.174.66]
x-ms-publictraffictype: Email
x-microsoft-exchange-diagnostics: 1;DB3PR0402MB3642;6:5YcdXtl22V7GP5UaEoW+IjGt1Cxbm2/J61EB/AMkczkk01rn5+1+i7m+Gf9h0VLTGjelA0CcwQ/2oORed9W955a6FqDsLgSTTYdvAFoELFovbStjX0B1zqR+EFgpfFC+/QfQs492zEoqDkSlDg2yVc5q6SBDCg3CKCW+gR80s48XN3Efl4YGytpmceD4mAa80MrTMywztRG2UoEgniAJa3S5YYY3Uz+nLtKcaBVwD71wtRbMsws795Wxs2wkb3lNNuUDKJpi4XpquDKLaodBa8XNV9u/1M77JJmebwBZFoNP/nEZkVEHpZNlSlpFZmPXo9DfIqyx2YnzQ0qT9sP27vunsLwohHNsD1K5bhFGinvonDPVG8sk/xebEbNT2TiRr20TJHPZ1tfVszWgQQFxdu11xurMyjWlVmEBVfZRjAnGd7DlkLg10/MclB1apOEwRNalhamMbRfVZnX401z7Qw==;5:SKxV3nxXpGCKec75ed6I5VK8ThiOcHa44AUBcrll7VugYngDpGP7rNTAK/kPF8F/D/qG9itTofPDW0S7QRylt58my7jIY5x3vcDKZpeuZaArEu8ywqQegZrKwuXawUP7dnr4Hffd1U+477zE2NO2iUU9SjSOvwFmMGxRtzC/Ezk=;7:YYo4p7/vGtrQ8mqVJU2wL9yjqoqObfaeeQzFRqvtCNANlUIh+J247qo4eX8US5+mUzea3pmDbXc0Ro1vjAGgF3iQ/PaB7v7FnCyCdG3zW/vgiEU4v27qq9o+kNpLNBb4LperAq7JIg1TrQRmL37+zw==
x-ms-office365-filtering-correlation-id: 423ff9df-84ae-4a3f-2f6b-08d65f275df2
x-ms-office365-filtering-ht: Tenant
x-microsoft-antispam: BCL:0;PCL:0;RULEID:(2390098)(7020095)(4652040)(8989299)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(5600074)(711020)(4618075)(2017052603328)(7153060)(7193020);SRVR:DB3PR0402MB3642;
x-ms-traffictypediagnostic: DB3PR0402MB3642:
x-microsoft-antispam-prvs: <DB3PR0402MB3642CE66A2D86D7474E2336FF5A60@DB3PR0402MB3642.eurprd04.prod.outlook.com>
x-ms-exchange-senderadcheck: 1
x-exchange-antispam-report-cfa-test: BCL:0;PCL:0;RULEID:(8211001083)(3230017)(999002)(6040522)(2401047)(5005006)(8121501046)(3231472)(944501520)(52105112)(93006095)(93001095)(10201501046)(3002001)(6055026)(148016)(149066)(150057)(6041310)(20161123560045)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123558120)(20161123562045)(20161123564045)(201708071742011)(7699051)(76991095);SRVR:DB3PR0402MB3642;BCL:0;PCL:0;RULEID:;SRVR:DB3PR0402MB3642;
x-forefront-prvs: 08831F51DC
x-forefront-antispam-report: SFV:NSPM;SFS:(10009020)(136003)(346002)(366004)(396003)(39860400002)(376002)(54534003)(189003)(199004)(2616005)(66066001)(316002)(11346002)(102836004)(476003)(52116002)(6506007)(8936002)(50226002)(7416002)(186003)(76176011)(386003)(486006)(575784001)(8676002)(3846002)(86362001)(2201001)(6116002)(97736004)(6436002)(26005)(478600001)(99286004)(446003)(68736007)(2501003)(81156014)(81166006)(25786009)(6486002)(36756003)(6512007)(14444005)(53936002)(256004)(4326008)(5660300001)(39060400002)(71200400001)(71190400001)(7736002)(2906002)(105586002)(305945005)(110136005)(106356001)(14454004)(921003)(1121003);DIR:OUT;SFP:1101;SCL:1;SRVR:DB3PR0402MB3642;H:DB3PR0402MB3916.eurprd04.prod.outlook.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;MX:1;A:1;
x-microsoft-antispam-message-info: L32KF745gDgyxJeTC/1pOzDAOh7n24wMPnjZkdTCO6LHjqrkDwpKPmW8X4qFHdYFXf4oEIJSfQjf/sKnTkHflNwxq4+mRVM7hqfXZkekAncXdXH9JmGS6CwKGki9duG751yBkyhhe1ZUqVdwG77zVLjzCOeQBqs1htaY3htSpA+KlUXHFXM6APtStIAnlG/26g23NBn12iszM6yDxrFnA0jsfcOTKVz8OmbXNPo3cwSoTaK5bpEMytzTB8WM1CM6mT84OkPwtyt5i4g7riQP+8G3bncFdy+k0NfLoIn5V9so9k+OJPT6hvh4pqKN5jIG
spamdiagnosticoutput: 1:99
spamdiagnosticmetadata: NSPM
Content-Type: text/plain; charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
X-OriginatorOrg: nxp.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 423ff9df-84ae-4a3f-2f6b-08d65f275df2
X-MS-Exchange-CrossTenant-originalarrivaltime: 11 Dec 2018 05:13:20.6731
 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: 686ea1d3-bc2b-4c6f-a92c-d99c5c301635
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DB3PR0402MB3642
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The accelerometer's power supply could be controlled by regulator
on some platforms, such as i.MX6Q-SABRESD board, the mma8451's
power supply is controlled by a GPIO fixed regulator, need to make
sure the regulator is enabled before any communication with mma8451,
this patch adds optional vdd/vddio regulator operation support.

Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
Acked-by: Martin Kepplinger <martink@posteo.de>
---
ChangeLog since V3:
	- add disabling vdd regulator in vddio error path;
	- improve regulator enable/disable sequence.
---
 drivers/iio/accel/mma8452.c | 186 ++++++++++++++++++++++++++++++++++++++++=
+---
 1 file changed, 176 insertions(+), 10 deletions(-)

diff --git a/drivers/iio/accel/mma8452.c b/drivers/iio/accel/mma8452.c
index 421a0a8..590a95d 100644
--- a/drivers/iio/accel/mma8452.c
+++ b/drivers/iio/accel/mma8452.c
@@ -31,6 +31,7 @@
 #include <linux/of_device.h>
 #include <linux/of_irq.h>
 #include <linux/pm_runtime.h>
+#include <linux/regulator/consumer.h>
=20
 #define MMA8452_STATUS				0x00
 #define  MMA8452_STATUS_DRDY			(BIT(2) | BIT(1) | BIT(0))
@@ -107,6 +108,8 @@ struct mma8452_data {
 	u8 data_cfg;
 	const struct mma_chip_info *chip_info;
 	int sleep_val;
+	struct regulator *vdd_reg;
+	struct regulator *vddio_reg;
 };
=20
  /**
@@ -1533,10 +1536,35 @@ static int mma8452_probe(struct i2c_client *client,
 	data->client =3D client;
 	mutex_init(&data->lock);
 	data->chip_info =3D match->data;
+	data->vdd_reg =3D devm_regulator_get_optional(&client->dev, "vdd");
+	if (!IS_ERR(data->vdd_reg)) {
+		ret =3D regulator_enable(data->vdd_reg);
+		if (ret) {
+			dev_err(&client->dev, "failed to enable VDD regulator\n");
+			return ret;
+		}
+	} else {
+		ret =3D PTR_ERR(data->vdd_reg);
+		if (ret !=3D -ENODEV)
+			return ret;
+	}
+
+	data->vddio_reg =3D devm_regulator_get_optional(&client->dev, "vddio");
+	if (!IS_ERR(data->vddio_reg)) {
+		ret =3D regulator_enable(data->vddio_reg);
+		if (ret) {
+			dev_err(&client->dev, "failed to enable VDDIO regulator\n");
+			goto disable_regulator_vdd;
+		}
+	} else {
+		ret =3D PTR_ERR(data->vddio_reg);
+		if (ret !=3D -ENODEV)
+			goto disable_regulator_vdd;
+	}
=20
 	ret =3D i2c_smbus_read_byte_data(client, MMA8452_WHO_AM_I);
 	if (ret < 0)
-		return ret;
+		goto disable_regulators;
=20
 	switch (ret) {
 	case MMA8451_DEVICE_ID:
@@ -1549,7 +1577,8 @@ static int mma8452_probe(struct i2c_client *client,
 			break;
 		/* else: fall through */
 	default:
-		return -ENODEV;
+		ret =3D -ENODEV;
+		goto disable_regulators;
 	}
=20
 	dev_info(&client->dev, "registering %s accelerometer; ID 0x%x\n",
@@ -1566,13 +1595,13 @@ static int mma8452_probe(struct i2c_client *client,
=20
 	ret =3D mma8452_reset(client);
 	if (ret < 0)
-		return ret;
+		goto disable_regulators;
=20
 	data->data_cfg =3D MMA8452_DATA_CFG_FS_2G;
 	ret =3D i2c_smbus_write_byte_data(client, MMA8452_DATA_CFG,
 					data->data_cfg);
 	if (ret < 0)
-		return ret;
+		goto disable_regulators;
=20
 	/*
 	 * By default set transient threshold to max to avoid events if
@@ -1581,7 +1610,7 @@ static int mma8452_probe(struct i2c_client *client,
 	ret =3D i2c_smbus_write_byte_data(client, MMA8452_TRANSIENT_THS,
 					MMA8452_TRANSIENT_THS_MASK);
 	if (ret < 0)
-		return ret;
+		goto disable_regulators;
=20
 	if (client->irq) {
 		int irq2;
@@ -1595,7 +1624,7 @@ static int mma8452_probe(struct i2c_client *client,
 						MMA8452_CTRL_REG5,
 						data->chip_info->all_events);
 			if (ret < 0)
-				return ret;
+				goto disable_regulators;
=20
 			dev_dbg(&client->dev, "using interrupt line INT1\n");
 		}
@@ -1604,11 +1633,11 @@ static int mma8452_probe(struct i2c_client *client,
 					MMA8452_CTRL_REG4,
 					data->chip_info->enabled_events);
 		if (ret < 0)
-			return ret;
+			goto disable_regulators;
=20
 		ret =3D mma8452_trigger_setup(indio_dev);
 		if (ret < 0)
-			return ret;
+			goto disable_regulators;
 	}
=20
 	data->ctrl_reg1 =3D MMA8452_CTRL_ACTIVE |
@@ -1661,12 +1690,22 @@ static int mma8452_probe(struct i2c_client *client,
 trigger_cleanup:
 	mma8452_trigger_cleanup(indio_dev);
=20
+disable_regulators:
+	if (!IS_ERR(data->vddio_reg))
+		regulator_disable(data->vddio_reg);
+
+disable_regulator_vdd:
+	if (!IS_ERR(data->vdd_reg))
+		regulator_disable(data->vdd_reg);
+
 	return ret;
 }
=20
 static int mma8452_remove(struct i2c_client *client)
 {
 	struct iio_dev *indio_dev =3D i2c_get_clientdata(client);
+	struct mma8452_data *data =3D iio_priv(indio_dev);
+	int ret;
=20
 	iio_device_unregister(indio_dev);
=20
@@ -1678,6 +1717,21 @@ static int mma8452_remove(struct i2c_client *client)
 	mma8452_trigger_cleanup(indio_dev);
 	mma8452_standby(iio_priv(indio_dev));
=20
+	if (!IS_ERR(data->vddio_reg)) {
+		ret =3D regulator_disable(data->vddio_reg);
+		if (ret) {
+			dev_err(&client->dev, "failed to disable VDDIO regulator\n");
+			return ret;
+		}
+	}
+	if (!IS_ERR(data->vdd_reg)) {
+		ret =3D regulator_disable(data->vdd_reg);
+		if (ret) {
+			dev_err(&client->dev, "failed to disable VDD regulator\n");
+			return ret;
+		}
+	}
+
 	return 0;
 }
=20
@@ -1696,6 +1750,21 @@ static int mma8452_runtime_suspend(struct device *de=
v)
 		return -EAGAIN;
 	}
=20
+	if (!IS_ERR(data->vddio_reg)) {
+		ret =3D regulator_disable(data->vddio_reg);
+		if (ret) {
+			dev_err(dev, "failed to disable VDDIO regulator\n");
+			return ret;
+		}
+	}
+	if (!IS_ERR(data->vdd_reg)) {
+		ret =3D regulator_disable(data->vdd_reg);
+		if (ret) {
+			dev_err(dev, "failed to disable VDD regulator\n");
+			return ret;
+		}
+	}
+
 	return 0;
 }
=20
@@ -1705,6 +1774,23 @@ static int mma8452_runtime_resume(struct device *dev=
)
 	struct mma8452_data *data =3D iio_priv(indio_dev);
 	int ret, sleep_val;
=20
+	if (!IS_ERR(data->vdd_reg)) {
+		ret =3D regulator_enable(data->vdd_reg);
+		if (ret) {
+			dev_err(dev, "failed to enable VDD regulator\n");
+			return ret;
+		}
+	}
+	if (!IS_ERR(data->vddio_reg)) {
+		ret =3D regulator_enable(data->vddio_reg);
+		if (ret) {
+			dev_err(dev, "failed to enable VDDIO regulator\n");
+			if (!IS_ERR(data->vdd_reg))
+				regulator_disable(data->vdd_reg);
+			return ret;
+		}
+	}
+
 	ret =3D mma8452_active(data);
 	if (ret < 0)
 		return ret;
@@ -1723,14 +1809,94 @@ static int mma8452_runtime_resume(struct device *de=
v)
 #ifdef CONFIG_PM_SLEEP
 static int mma8452_suspend(struct device *dev)
 {
-	return mma8452_standby(iio_priv(i2c_get_clientdata(
+	struct iio_dev *indio_dev =3D i2c_get_clientdata(to_i2c_client(dev));
+	struct mma8452_data *data =3D iio_priv(indio_dev);
+	int ret;
+
+	if (!IS_ERR(data->vdd_reg)) {
+		ret =3D regulator_enable(data->vdd_reg);
+		if (ret) {
+			dev_err(dev, "failed to enable VDD regulator\n");
+			return ret;
+		}
+	}
+	if (!IS_ERR(data->vddio_reg)) {
+		ret =3D regulator_enable(data->vddio_reg);
+		if (ret) {
+			dev_err(dev, "failed to enable VDDIO regulator\n");
+			if (!IS_ERR(data->vdd_reg))
+				regulator_disable(data->vdd_reg);
+			return ret;
+		}
+	}
+
+	ret =3D mma8452_standby(iio_priv(i2c_get_clientdata(
 		to_i2c_client(dev))));
+	if (ret)
+		return ret;
+
+	if (!IS_ERR(data->vddio_reg)) {
+		ret =3D regulator_disable(data->vddio_reg);
+		if (ret) {
+			dev_err(dev, "failed to disable VDDIO regulator\n");
+			return ret;
+		}
+	}
+	if (!IS_ERR(data->vdd_reg)) {
+		ret =3D regulator_disable(data->vdd_reg);
+		if (ret) {
+			dev_err(dev, "failed to disable VDD regulator\n");
+			return ret;
+		}
+	}
+
+	return 0;
 }
=20
 static int mma8452_resume(struct device *dev)
 {
-	return mma8452_active(iio_priv(i2c_get_clientdata(
+	struct iio_dev *indio_dev =3D i2c_get_clientdata(to_i2c_client(dev));
+	struct mma8452_data *data =3D iio_priv(indio_dev);
+	int ret;
+
+	if (!IS_ERR(data->vdd_reg)) {
+		ret =3D regulator_enable(data->vdd_reg);
+		if (ret) {
+			dev_err(dev, "failed to enable VDD regulator\n");
+			return ret;
+		}
+	}
+	if (!IS_ERR(data->vddio_reg)) {
+		ret =3D regulator_enable(data->vddio_reg);
+		if (ret) {
+			dev_err(dev, "failed to enable VDDIO regulator\n");
+			if (!IS_ERR(data->vdd_reg))
+				regulator_disable(data->vdd_reg);
+			return ret;
+		}
+	}
+
+	ret =3D mma8452_active(iio_priv(i2c_get_clientdata(
 		to_i2c_client(dev))));
+	if (ret)
+		return ret;
+
+	if (!IS_ERR(data->vddio_reg)) {
+		ret =3D regulator_disable(data->vddio_reg);
+		if (ret) {
+			dev_err(dev, "failed to disable VDDIO regulator\n");
+			return ret;
+		}
+	}
+	if (!IS_ERR(data->vdd_reg)) {
+		ret =3D regulator_disable(data->vdd_reg);
+		if (ret) {
+			dev_err(dev, "failed to disable VDD regulator\n");
+			return ret;
+		}
+	}
+
+	return 0;
 }
 #endif
=20
--=20
2.7.4

