Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  12 Dec 2018 19:43:02 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 11A185803DC
	for <like.xu@linux.intel.com>; Wed, 12 Dec 2018 01:11:55 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 12 Dec 2018 01:11:54 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A6LUdqBE0nvQFyb0duC1IUZ1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ7yr82wAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95fWSJBHI2y?=
 =?us-ascii?q?bIUPAOUdMulFrYbyqUYArQO8CAeuC+7j1zFFimPo0q0hyOkhDR3K0RY8E94Sqn?=
 =?us-ascii?q?nYstP4P7oSX+Cvy6nIyC3OYPFL2Tzg64fIcgouofeDXbltdsfQyVQvGxnZgVmK?=
 =?us-ascii?q?qI3lPyma1uICs2WA6+pgVOSvi3Moqg1rozivwNsshZfNho4P1l/E8iB5zZ8zKN?=
 =?us-ascii?q?alS0B7ecapHIVMuyyZLYd6X94uTmJytCokxLALuYS3cDUIxZg/2hLSb+KLf5KI?=
 =?us-ascii?q?7x/jTuqcISl0iGh4dL6hmxq/91WrxPfmWcmuyllKqzJIktnSuXAJ0Bze8syHSv?=
 =?us-ascii?q?pm/ke9wjaDzQ/T6udZIUwukqrbMZEhzqYxlpoVr0vDAjf7lFvqgKKVbEko5/Wk?=
 =?us-ascii?q?5uf9brn4qJKRN5V4hhz8P6g2n8ywG+U4MgwAX2iB/uS80aXu/VTnT7VPk/06i7?=
 =?us-ascii?q?TWv47EJcsFoq61GhRa0oE+6xa5Ezipzs8YkX4DLFJEexKIkZLlOl7TIP3gCfe/?=
 =?us-ascii?q?glKskCpkxvzcP73hBInNIWbHkLv7Ybl97EtcxRE1zdBY4ZJUBbcBIO/pVk/2rt?=
 =?us-ascii?q?zYAQc1MxaozOb/FNV9yoQeVHqLAq+YM6Pdr0WE5+0yI+SXYI8VuTD9K+Uq5vL0?=
 =?us-ascii?q?jH85n0Mdcret3ZcNdH+4GfFmcA2kZ2HxiIIBDXsSpVh5C+jrk0GZFzhUYXm0Qu?=
 =?us-ascii?q?Q7/D58DYunCYLKQMeqmKCA2yGgWYRbY30DBl2SHHO7SoOfRv1ZbSuTJtNmwCUJ?=
 =?us-ascii?q?UKXkR4I/2BXrrgLj1rd8MsLS/SsXs4+l08J6sPbOnxM//iAhEsKGzmuWRHt1lG?=
 =?us-ascii?q?5bezhj8axiqFZxzR+j2KJ7hOdEXYhe5/pDUQAhKbbGwuB6Asy0UQXEKISnUlGj?=
 =?us-ascii?q?F+S7SQMxR9Q+i4sffgB2XceihxbM9y6rBaIF0b2NGJEwtKnb2i6idI5G13/a2f?=
 =?us-ascii?q?x53BEdScxVODjj3/Yn+g=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AmAAC/zxBcmBHrdtBkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgTCBOXA5jBRfizMpgWR8llcUgV8UGAcNgUuFbiI0CQ0BAwEBAQE?=
 =?us-ascii?q?BAQIBEwEBAQEBCAsLBhsOIwyCNgUCAxoBBoJcAQIDAQIkEwwKKQMDAQIGAQEKD?=
 =?us-ascii?q?goJHQgDAQtIBhMFgxwBggEBBKZBM4QtAYEShHCMPHoPgQ2BEYJdNYRGFYYBAos?=
 =?us-ascii?q?uhRKQRwcCgiaEZIpACxiBXIhDhyWZOYFGgg5NI4M8CYIeF4kvhHs0MYEHiltVg?=
 =?us-ascii?q?XcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AmAAC/zxBcmBHrdtBkHAEBAQQBAQcEAQGBUQcBAQsBgTC?=
 =?us-ascii?q?BOXA5jBRfizMpgWR8llcUgV8UGAcNgUuFbiI0CQ0BAwEBAQEBAQIBEwEBAQEBC?=
 =?us-ascii?q?AsLBhsOIwyCNgUCAxoBBoJcAQIDAQIkEwwKKQMDAQIGAQEKDgoJHQgDAQtIBhM?=
 =?us-ascii?q?FgxwBggEBBKZBM4QtAYEShHCMPHoPgQ2BEYJdNYRGFYYBAosuhRKQRwcCgiaEZ?=
 =?us-ascii?q?IpACxiBXIhDhyWZOYFGgg5NI4M8CYIeF4kvhHs0MYEHiltVgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,343,1539673200"; 
   d="scan'208";a="141790192"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 12 Dec 2018 01:11:53 -0800
Received: from localhost ([::1]:43283 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gX0Yb-0006xd-5g
	for like.xu@linux.intel.com; Wed, 12 Dec 2018 04:11:53 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:58117)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <yu.c.zhang@linux.intel.com>) id 1gX0YR-0006xJ-Ad
	for qemu-devel@nongnu.org; Wed, 12 Dec 2018 04:11:44 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <yu.c.zhang@linux.intel.com>) id 1gX0YO-00027P-4T
	for qemu-devel@nongnu.org; Wed, 12 Dec 2018 04:11:43 -0500
Received: from mga04.intel.com ([192.55.52.120]:49302)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <yu.c.zhang@linux.intel.com>)
	id 1gX0YN-00021K-6A
	for qemu-devel@nongnu.org; Wed, 12 Dec 2018 04:11:40 -0500
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from orsmga001.jf.intel.com ([10.7.209.18])
	by fmsmga104.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
	12 Dec 2018 01:11:33 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,343,1539673200"; d="scan'208";a="118128318"
Received: from zhangyu-optiplex-9020.bj.intel.com (HELO localhost)
	([10.238.135.159])
	by orsmga001.jf.intel.com with ESMTP; 12 Dec 2018 01:11:31 -0800
Date: Wed, 12 Dec 2018 17:08:39 +0800
From: Yu Zhang <yu.c.zhang@linux.intel.com>
To: Eduardo Habkost <ehabkost@redhat.com>
Message-ID: <20181212090839.iuc5pebm7luitdsk@linux.intel.com>
References: <20181211192527.13254-1-ehabkost@redhat.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181211192527.13254-1-ehabkost@redhat.com>
User-Agent: NeoMutt/20180622-66-b94505
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 192.55.52.120
Subject: Re: [Qemu-devel] [PATCH] x86: host-phys-bits-limit option
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Andrea Arcangeli <aarcange@redhat.com>, paul.c.lai@intel.com,
	qemu-devel@nongnu.org, Bandan Das <bsd@redhat.com>,
	Paolo Bonzini <pbonzini@redhat.com>, Igor Mammedov <imammedo@redhat.com>,
	Richard Henderson <rth@twiddle.net>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Tue, Dec 11, 2018 at 05:25:27PM -0200, Eduardo Habkost wrote:
> Some downstream distributions of QEMU set host-phys-bits=on by
> default.  This worked very well for most use cases, because
> phys-bits really didn't have huge consequences. The only
> difference was on the CPUID data seen by guests, and on the
> handling of reserved bits.
> 
> This changed in KVM commit 855feb673640 ("KVM: MMU: Add 5 level
> EPT & Shadow page table support").  Now choosing a large
> phys-bits value for a VM has bigger impact: it will make KVM use
> 5-level EPT even when it's not really necessary.  This means
> using the host phys-bits value may not be the best choice.
> 
> Management software could address this problem by manually
> configuring phys-bits depending on the size of the VM and the
> amount of MMIO address space required for hotplug.  But this is
> not trivial to implement.
> 
> However, there's another workaround that would work for most
> cases: keep using the host phys-bits value, but only if it's
> smaller than 48.  This patch makes this possible by introducing a
> new "-cpu" option: "host-phys-bits-limit".  Management software
> or users can make sure they will always use 4-level EPT using:
> "host-phys-bits=on,host-phys-bits-limit=48".
> 
> This behavior is still not enabled by default because QEMU
> doesn't enable host-phys-bits=on by default.  But users,
> management software, or downstream distributions may choose to
> change their defaults using the new option.
> 
> Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>

Thanks, Eduardo. One question is, should we check host-phys-bits-limit
against 48? If not, how about we just say in the commit message, that
the suggested value of host-phys-bits-limit is no bigger than 48 to
ensure a 4-level EPT? :-)

B.R.
Yu

> ---
>  target/i386/cpu.h                 |  3 ++
>  target/i386/cpu.c                 |  5 ++
>  tests/acceptance/x86-phys-bits.py | 81 +++++++++++++++++++++++++++++++
>  3 files changed, 89 insertions(+)
>  create mode 100644 tests/acceptance/x86-phys-bits.py
> 
> diff --git a/target/i386/cpu.h b/target/i386/cpu.h
> index 9c52d0cbeb..a545b77c2c 100644
> --- a/target/i386/cpu.h
> +++ b/target/i386/cpu.h
> @@ -1457,6 +1457,9 @@ struct X86CPU {
>      /* if true override the phys_bits value with a value read from the host */
>      bool host_phys_bits;
>  
> +    /* if set, limit maximum value for phys_bits when host_phys_bits is true */
> +    uint8_t host_phys_bits_limit;
> +
>      /* Stop SMI delivery for migration compatibility with old machines */
>      bool kvm_no_smi_migration;
>  
> diff --git a/target/i386/cpu.c b/target/i386/cpu.c
> index f81d35e1f9..df200754a2 100644
> --- a/target/i386/cpu.c
> +++ b/target/i386/cpu.c
> @@ -5152,6 +5152,10 @@ static void x86_cpu_realizefn(DeviceState *dev, Error **errp)
>              if (cpu->host_phys_bits) {
>                  /* The user asked for us to use the host physical bits */
>                  cpu->phys_bits = host_phys_bits;
> +                if (cpu->host_phys_bits_limit &&
> +                    cpu->phys_bits > cpu->host_phys_bits_limit) {
> +                    cpu->phys_bits = cpu->host_phys_bits_limit;
> +                }
>              }
>  
>              /* Print a warning if the user set it to a value that's not the
> @@ -5739,6 +5743,7 @@ static Property x86_cpu_properties[] = {
>      DEFINE_PROP_BOOL("kvm", X86CPU, expose_kvm, true),
>      DEFINE_PROP_UINT32("phys-bits", X86CPU, phys_bits, 0),
>      DEFINE_PROP_BOOL("host-phys-bits", X86CPU, host_phys_bits, false),
> +    DEFINE_PROP_UINT8("host-phys-bits-limit", X86CPU, host_phys_bits_limit, 0),
>      DEFINE_PROP_BOOL("fill-mtrr-mask", X86CPU, fill_mtrr_mask, true),
>      DEFINE_PROP_UINT32("level", X86CPU, env.cpuid_level, UINT32_MAX),
>      DEFINE_PROP_UINT32("xlevel", X86CPU, env.cpuid_xlevel, UINT32_MAX),
> diff --git a/tests/acceptance/x86-phys-bits.py b/tests/acceptance/x86-phys-bits.py
> new file mode 100644
> index 0000000000..ae85d7e4e7
> --- /dev/null
> +++ b/tests/acceptance/x86-phys-bits.py
> @@ -0,0 +1,81 @@
> +# Test for host-phys-bits-limit option
> +#
> +# Copyright (c) 2018 Red Hat, Inc.
> +#
> +# Author:
> +#  Eduardo Habkost <ehabkost@redhat.com>
> +#
> +# This work is licensed under the terms of the GNU GPL, version 2 or
> +# later.  See the COPYING file in the top-level directory.
> +import re
> +
> +from avocado_qemu import Test
> +
> +class HostPhysbits(Test):
> +    """
> +    Check if `host-phys-bits` and `host-phys-bits` options work.
> +
> +    :avocado: enable
> +    :avocado: tags=x86_64
> +    """
> +
> +    def cpu_qom_get(self, prop):
> +        qom_path = self.vm.command('query-cpus')[0]['qom_path']
> +        return self.vm.command('qom-get', path=qom_path, property=prop)
> +
> +    def cpu_phys_bits(self):
> +        return self.cpu_qom_get('phys-bits')
> +
> +    def host_phys_bits(self):
> +        cpuinfo = open('/proc/cpuinfo', 'rb').read()
> +        m = re.search(b'([0-9]+) bits physical', cpuinfo)
> +        if m is None:
> +            self.cancel("Couldn't read phys-bits from /proc/cpuinfo")
> +        return int(m.group(1))
> +
> +    def setUp(self):
> +        super(HostPhysbits, self).setUp()
> +        self.vm.add_args('-S', '-machine', 'accel=kvm:tcg')
> +        self.vm.launch()
> +        if not self.vm.command('query-kvm')['enabled']:
> +            self.cancel("Test case requires KVM")
> +        self.vm.shutdown()
> +
> +
> +    def test_no_host_phys_bits(self):
> +        # default should be phys-bits=40 if host-phys-bits=off
> +        self.vm.add_args('-cpu', 'qemu64,host-phys-bits=off')
> +        self.vm.launch()
> +        self.assertEqual(self.cpu_phys_bits(), 40)
> +
> +    def test_manual_phys_bits(self):
> +        self.vm.add_args('-cpu', 'qemu64,host-phys-bits=off,phys-bits=35')
> +        self.vm.launch()
> +        self.assertEqual(self.cpu_phys_bits(), 35)
> +
> +    def test_host_phys_bits(self):
> +        host_phys_bits = self.host_phys_bits()
> +        self.vm.add_args('-cpu', 'qemu64,host-phys-bits=on')
> +        self.vm.launch()
> +        self.assertEqual(self.cpu_phys_bits(), host_phys_bits)
> +
> +    def test_host_phys_bits_limit_high(self):
> +        hbits = self.host_phys_bits()
> +        self.vm.add_args('-cpu', 'qemu64,host-phys-bits=on,'
> +                                 'host-phys-bits-limit=%d' % (hbits + 1))
> +        self.vm.launch()
> +        self.assertEqual(self.cpu_phys_bits(), hbits)
> +
> +    def test_host_phys_bits_limit_equal(self):
> +        hbits = self.host_phys_bits()
> +        self.vm.add_args('-cpu', 'qemu64,host-phys-bits=on,'
> +                                 'host-phys-bits-limit=%d' % (hbits))
> +        self.vm.launch()
> +        self.assertEqual(self.cpu_phys_bits(), hbits)
> +
> +    def test_host_phys_bits_limit_low(self):
> +        hbits = self.host_phys_bits()
> +        self.vm.add_args('-cpu', 'qemu64,host-phys-bits=on,'
> +                                 'host-phys-bits-limit=%d' % (hbits - 1))
> +        self.vm.launch()
> +        self.assertEqual(self.cpu_phys_bits(), hbits - 1)
> -- 
> 2.18.0.rc1.1.g3f1ff2140
> 
> 

