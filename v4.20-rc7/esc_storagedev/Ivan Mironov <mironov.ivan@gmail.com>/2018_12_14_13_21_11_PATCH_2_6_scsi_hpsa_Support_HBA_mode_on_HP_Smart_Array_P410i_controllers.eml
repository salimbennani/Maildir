Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  14 Dec 2018 21:50:44 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 9C9B558061F;
	Fri, 14 Dec 2018 05:26:24 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by fmsmga002-1.fm.intel.com with ESMTP; 14 Dec 2018 05:26:23 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AohSjdh/XCq4NQ/9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1u8RIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CRWRPQNtfWSJCDI27?=
 =?us-ascii?q?bYQPAeUOM+lDr4nlpVYDtgeyCAq2Ce/z0DJEmmP60Ksn2OohCwHG2wkgEsoNvn?=
 =?us-ascii?q?TKttr1MroZX+e0zKnSyjXDafRW2Sng44XPdxAhoOuMXbV2ccrW10kjDQLFjkuK?=
 =?us-ascii?q?pozjJD6V2eENvHKa7+pkT+6gl2knqwRorzWp28wihI7JhocPxVDF8yV02IU1Ks?=
 =?us-ascii?q?OiSE59f9GkFIFctyaAN4t5Ws8iQ3lotzggxrIavp67eTAGyJsmxx7Da/yHbpOH?=
 =?us-ascii?q?7gj/W+aWJDd1gm9udrGnhxuq70Ss1unxWtOp3FtEsCZJiMTAu3MR2xDJ68WKSO?=
 =?us-ascii?q?Nx8lq91TuLzQzf9+VJLV0umabFNZIswaQ8moQPvUnAGCL9hV/4g7WMdko+/+il?=
 =?us-ascii?q?8+Tnbavipp+bL4J0lA7+Pbo0msClAuQ3LBIOX26F9uS4zrHj+lf5QLpSgv03lK?=
 =?us-ascii?q?nWrozaKNwFqqKlBwJZyJsv5hihAzu8zdgVnmULIEhEdR+Fl4TpPkvBIPH8Dfex?=
 =?us-ascii?q?mVSslzJryujCPr3gBJXNM3fCnK7ifblj8U5czhQ8zdRG65JTBLABJuz8WlXqud?=
 =?us-ascii?q?zGAR82LRa0z/zkCNpjzIMeX3yAAquDPKPVq1+I6fojI/OQa48NpDb9N/8l6ubq?=
 =?us-ascii?q?jX84ml8SY7Ol3JQKaH2jGvRmIkOZYWfjg9sbEGcKuBY+Q/LuiFGYTTFTYHOyVb?=
 =?us-ascii?q?om5j4nEIKmEZvDRoe1jbyBxii7H4FWaXpBClyWEXfoap+LW/EDaC+JJs9hkzoE?=
 =?us-ascii?q?VaWuSoM71BGushP6xKRjLubO5iIYspfj3sBv5+LPjREy6SB0D8OF3mGPSGF7gH?=
 =?us-ascii?q?kERzwx3KB5p0x9zUyO0ax5g/xeCNxS6OlFUgY8NZ7A0eN6D8r+VR7GfteMUFym?=
 =?us-ascii?q?WMmpASktTtItxN8De1xyG86ijhDE3CqmGaUVmKaJBJEv9qLc3n7xJ9tyynrc1a?=
 =?us-ascii?q?khiUUmTdVLNWG8mqF/8A3TDZbTk0qFj6aqabgc3CnV+WeA12WOultUUApxUarf?=
 =?us-ascii?q?W3AfaVDbrdD45kPEUr+vBq4rMgpHyc6eNKRKbsflgklBRPfmIN7eeX6+m3+sBR?=
 =?us-ascii?q?aUwbOBdJfldH8D3CrDEkQEkxoc/XCdNQcgACetpGbeDD9rFVLreE7s9eh+qHWm?=
 =?us-ascii?q?Tk471Q2Kbkth16ar9R4Rn/CTV/QT3rccsic7tzp0BEq9387RC9eYugVuZrtcbs?=
 =?us-ascii?q?0n7FdHz23ZsRd9MYKmL615gl4ecgJ3v17h1hltC4VAl9Qqo20uzAZoNa2Y11ZB?=
 =?us-ascii?q?fSuC3Z/sIr3XNnXy/Be3Zq7K21He1dGW+rsP6PU4sVnjoBulFk0483Vj0tlV1X?=
 =?us-ascii?q?Sc647ODAoTV5LxT0k2+wJ7p7Hcfiky+YfU2WdwPqmztz/Iw8gpC/c9yha8Y9df?=
 =?us-ascii?q?N7uJGxX2E8IECMmhNuwrl0KyYRIZIe9d7qg0P8Chd/uYw6OrOOdgnDS7jWVI+o?=
 =?us-ascii?q?x900SM9zZiRe7MxZoK3/aY3g6fXTfmkFihqtz3mZxDZTwKHmu/1DLoC5JLaqxz?=
 =?us-ascii?q?fYYEE2GuI8Ksy9V6hp7tXWNY9VG5C1MH3s+pZQSdb1jn0QJM0kQXpGStmTGkwD?=
 =?us-ascii?q?xsjzEpsq2f0TTUw+TjaBUIIHRLS3RljVv2J4i7kcoaXEmxYwc1jhSl4Vv1yLZB?=
 =?us-ascii?q?pKR4KWneWkNIfynwL2F/Xaq8rLuCY8hT6Jw2tSVbSvizYVefSrTluRsVzzvjH3?=
 =?us-ascii?q?dCxDA8bzyrupT5kwZ6iW6HN3ZzsXzZdNp0xRfe4tzcWPFQ0iAHRCl+lTnYGFy8?=
 =?us-ascii?q?M8O18tWTkpfJqvq+WH65Vp1PbSnrypuNtCmh6m1wAh2/nPezlsf8EQcg0i/71N?=
 =?us-ascii?q?hqVSPWoxb6eYTr06W6MeR6fkhnHlP86sx6Gp1gnYs0np0fxX8ahpCN93odjWjz?=
 =?us-ascii?q?Kclb2b75bHcVRT8E2dnV7BLn2E1iKHKE3Ib5VnSbwst8aNi2eGIW2iQh789UDK?=
 =?us-ascii?q?eY9qBLnSxwolCgtwLefeB9nisByfsp8HMagPsGuAs3wiWdH7AdB09YPSP3mhSM?=
 =?us-ascii?q?7tC+qrhXZWm1fbix0kp+gc6uDLWYrg5AX3b5f48oHTVs4cVnLFLMzHrz55nheN?=
 =?us-ascii?q?nRbtIcrAeYkhnegOhONJI+iOAKijF5NmLnsn0o0Oo7jR1o3ZGns4mLMWRt/KSl?=
 =?us-ascii?q?AhFGMj35fd8c+jbojaxGhMaZw5ivHol9GjUMRJboUfWoEDcIufXmLQmOFiA8qm?=
 =?us-ascii?q?yAGbreBgKf7EZmr3TSE5GkLX2XJX8Zzcl8SxmZPkBQnAcUXDAilJ4jCg+q3NDh?=
 =?us-ascii?q?cFt+5j0J/VH3sBxMyuZ1NxXlVmffuRylajM1SJiZMRpX4RtO50bTMcyC8O1zGz?=
 =?us-ascii?q?tU8YGmrAyIMmabfRhHDXkVWkyYAFDuJruu6sPF8+eGHeqyNefOba+NqexDVPeI?=
 =?us-ascii?q?2JSv3ZF9/zuXMsWPP39iD+A020ZZXHB5HdjZlCsLSyANiy3NaMubrg+m+iJrts?=
 =?us-ascii?q?C/7OjrWAX36IqPDLtSLMxv+w2sjqeFLeKQnyF5KTBX1p4XwX/Iyb4f3EMdii10?=
 =?us-ascii?q?djmtF6gAujDJTK7KhqBXCBsbYTtpNMRU96I8whVNOcnDh9P1yLF4j/01C1REVV?=
 =?us-ascii?q?D7mcGpf8sKI26jO1PdGUaLL6+LJTnKw8HxfKO9RqdcjORStx2spzmbF1XvMSiE?=
 =?us-ascii?q?lznsTxqvK/1DjDmHPBxCv4GwagxiCXX4Q9L8dBK6MMV7jTk3wbAvgnPKNGgcMS?=
 =?us-ascii?q?Vzck9Xr72Q6z9Yjet7G2Bb8nVlKuyEkT6D7+bEMpYWredrAiNsmuJG4XQ6zqFZ?=
 =?us-ascii?q?4z1eSPNpmCvdsNhurkqikumOzDpnTRVPpixKhIKNoUVtJ6HZ+oNcVnbD+RIH9X?=
 =?us-ascii?q?+QBAgSp9t5Ft3vvLhdy9jVm6L1LTdC8tTU8tMdBsjUMs2HNnUhPAHtGD7VCgsF?=
 =?us-ascii?q?UDGqOXveh0xbjPGd6HmVooImpZjrnZpdAoNcAVg0EO4KT19uB90qPph6RHUnnK?=
 =?us-ascii?q?SdgcpO4mCx6FHURd9duJfZEPOMCPPHJzOQjL0CbBwNkp3iKoFGF5Py3QRHa0N9?=
 =?us-ascii?q?moPUUx7VXMpKpCp/KA4qqUNl/313T2l10EXgPFD+qEQPHOK5y0ZlwjB1Zv4goX?=
 =?us-ascii?q?K1uw86?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AcAADkrhNch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgmmBAhUSjBVfjTlohCWDcokShTIUgV8SAQEYDQYBh0ciNAkNAQM?=
 =?us-ascii?q?BAQEBAQECARMBAQEIDQkIKSMMgjYkAYJiAwMBAiQLAQ0BGx0BAwIJAQEFEAc0A?=
 =?us-ascii?q?x4CEQEFAQ4OBxIFgxwBgWcBAxUEAQqaDjyMCxYFAReCTCsFgQGDPgoZJw1dgTc?=
 =?us-ascii?q?CAQUSh2uDJYEcghaBEIJeB4MFLhkCAhiBL4V1ApBJkCAvBwKGTUCHHYMlCxhfi?=
 =?us-ascii?q?RRthnKJO4RKLIESiXcGAgkHDyGBJYF7CwgzGiOBAYI7ghsMF4NKhRSFRjkyAYE?=
 =?us-ascii?q?DAQEBO4x8AQE?=
X-IPAS-Result: =?us-ascii?q?A0AcAADkrhNch0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBgmm?=
 =?us-ascii?q?BAhUSjBVfjTlohCWDcokShTIUgV8SAQEYDQYBh0ciNAkNAQMBAQEBAQECARMBA?=
 =?us-ascii?q?QEIDQkIKSMMgjYkAYJiAwMBAiQLAQ0BGx0BAwIJAQEFEAc0Ax4CEQEFAQ4OBxI?=
 =?us-ascii?q?FgxwBgWcBAxUEAQqaDjyMCxYFAReCTCsFgQGDPgoZJw1dgTcCAQUSh2uDJYEcg?=
 =?us-ascii?q?haBEIJeB4MFLhkCAhiBL4V1ApBJkCAvBwKGTUCHHYMlCxhfiRRthnKJO4RKLIE?=
 =?us-ascii?q?SiXcGAgkHDyGBJYF7CwgzGiOBAYI7ghsMF4NKhRSFRjkyAYEDAQEBO4x8AQE?=
X-IronPort-AV: E=Sophos;i="5.56,353,1539673200"; 
   d="scan'208";a="44065417"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 14 Dec 2018 05:26:01 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730077AbeLNNW5 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 14 Dec 2018 08:22:57 -0500
Received: from mail-lj1-f195.google.com ([209.85.208.195]:45199 "EHLO
        mail-lj1-f195.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1729923AbeLNNW0 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 14 Dec 2018 08:22:26 -0500
Received: by mail-lj1-f195.google.com with SMTP id s5-v6so4854893ljd.12;
        Fri, 14 Dec 2018 05:22:24 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding;
        bh=Sdvan8lmUD1rlPpiah9NeOqv+lAZYCm82gAAtH1UoSA=;
        b=gyt1IeDKZiteZLbY4cDCvHiymE9xVd8otwaZfuSY/MAWievrpiJQZxnfwj7dvBtosO
         HVHbxVd9st3VvdNH2hD1sWvk9q6O8JdKCh/Fc77PdwR5Lqz5ksJWyxYJh767GvBnMsID
         lXFBT0pPUWVsAFuPfpHkZoG8M9rP6Ovr7rkMYjVeUjxqYdyt15pTm7q65+ipUytPu6BB
         FWpTa1O9HyDcLKS5Dcm4XJXONY9TD9hYiiPWt8LFayarxsEkygW+1M18kala5VPg6xyZ
         2ykDlPWPif1cpSfqJd4NJOWf32EjlYTDyscNYXcv7fpAuK+JlcHVbHoafre2dzPqGF27
         F2pw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=Sdvan8lmUD1rlPpiah9NeOqv+lAZYCm82gAAtH1UoSA=;
        b=Haz67Co9cXIPDmQWoGCAtaPLW7G08wJ8DyWXCv4b8uCjBr0WnMy21GLMWWX53xiqtf
         SSJ2iGr5W7qmAClTMARN4WtAts5LbKXFX9++Oor20HVraETHA9ISA6fpFTC8FSiEXcqM
         lmHS9H0nHe7/IrV8F0JyEjHUYIhJkpHWGo9ZUf56iTzD+etcCL6tf3JhmfEosu68D3rO
         P/0tb3YJnymgiJEMuvRfcHZUJJu6EjHEdAMMB8Z96fDbyqYcDWuk1NtiW4P0VErvB6DX
         jUKVKLyq8ZhYPm+ckmFp9jSmLb3iW3E6pbQX8UCL1JDnPWmsKS//NThsO5g7XsXs0bvb
         HeLA==
X-Gm-Message-State: AA+aEWb2rsPt7d36d6HJjQqiAcSCVd3smqLp8o+6Ypc2BrpaP8o+3+VV
        eEtrQQS3ECL3h5sa8HOF2CIQW59erdSBaNQI
X-Google-Smtp-Source: AFSGD/Uj4RHtlbDdG8bJw6k08Ub/w6u1doNQH3I2lvhRwdEKp8zeDILxqOAiEtlgzB/pkCFcEkCuRg==
X-Received: by 2002:a2e:2281:: with SMTP id i123-v6mr1643078lji.154.1544793743428;
        Fri, 14 Dec 2018 05:22:23 -0800 (PST)
Received: from localhost.localdomain (pool-109-191-228-208.is74.ru. [109.191.228.208])
        by smtp.gmail.com with ESMTPSA id u79-v6sm944101lje.36.2018.12.14.05.22.22
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Fri, 14 Dec 2018 05:22:23 -0800 (PST)
From: Ivan Mironov <mironov.ivan@gmail.com>
To: linux-scsi@vger.kernel.org, mironov.ivan@gmail.com
Cc: linux-kernel@vger.kernel.org, Don Brace <don.brace@microsemi.com>,
        "James E.J. Bottomley" <jejb@linux.vnet.ibm.com>,
        "Martin K. Petersen" <martin.petersen@oracle.com>,
        esc.storagedev@microsemi.com
Subject: [PATCH 2/6] scsi: hpsa: Support HBA mode on HP Smart Array P410i controllers
Date: Fri, 14 Dec 2018 18:21:11 +0500
Message-Id: <20181214132115.21440-3-mironov.ivan@gmail.com>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <20181214132115.21440-1-mironov.ivan@gmail.com>
References: <20181214132115.21440-1-mironov.ivan@gmail.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This patch is based on code from the 316b221, most of which was removed by
the b9092b7.

Originally, HBA mode on these controllers was supported only on
Itanium-based HP Integrity servers running HP-UX. Tool for switching
between RAID and HBA modes existed only in form of EFI binary for
ia64 architecture: saupdate.efi[1]. However, I guessed how to overwrite the
corresponding flags field in controller's NVRAM, and was able to
reimplement RAID/HBA mode switching tool for Linux[2].

This change was successfully tested using blktests[3] and xfstests[4] on
my hardware, with embedded P410i controller (PCI ID: 103c:3245, board
ID: 0x3245103c) with firmware version 6.64.

This may work with some other controllers, but it is not tested
(because I do not have the hardware) and it may be very dangerous. That is
why this functionality is disabled by default and may be enabled only
manually using the new module parameter.

[1] https://support.hpe.com/hpsc/swd/public/detail?swItemId=MTX_0b76aec489764aea9802a6d27b
[2] https://github.com/im-0/hpsahba
[3] https://github.com/osandov/blktests
[4] https://git.kernel.org/pub/scm/fs/xfs/xfstests-dev.git

Signed-off-by: Ivan Mironov <mironov.ivan@gmail.com>
---
 drivers/scsi/hpsa.c | 98 +++++++++++++++++++++++++++++++++++++++++++--
 drivers/scsi/hpsa.h |  3 ++
 2 files changed, 97 insertions(+), 4 deletions(-)

diff --git a/drivers/scsi/hpsa.c b/drivers/scsi/hpsa.c
index fc06b790f16b..ee3d7c722a63 100644
--- a/drivers/scsi/hpsa.c
+++ b/drivers/scsi/hpsa.c
@@ -88,6 +88,11 @@ module_param(hpsa_simple_mode, int, S_IRUGO|S_IWUSR);
 MODULE_PARM_DESC(hpsa_simple_mode,
 	"Use 'simple mode' rather than 'performant mode'");
 
+static bool hpsa_use_nvram_hba_flag;
+module_param(hpsa_use_nvram_hba_flag, bool, 0444);
+MODULE_PARM_DESC(hpsa_use_nvram_hba_flag,
+	"Use flag from NVRAM to enable HBA mode");
+
 /* define the PCI info for the cards we can control */
 static const struct pci_device_id hpsa_pci_device_id[] = {
 	{PCI_VENDOR_ID_HP,     PCI_DEVICE_ID_HP_CISSE,     0x103C, 0x3241},
@@ -3039,6 +3044,37 @@ static int hpsa_scsi_do_inquiry(struct ctlr_info *h, unsigned char *scsi3addr,
 	return rc;
 }
 
+static int hpsa_bmic_ctrl_mode_sense(struct ctlr_info *h,
+	struct bmic_controller_parameters *buf)
+{
+	int rc = IO_OK;
+	struct CommandList *c;
+	struct ErrorInfo *ei;
+
+	c = cmd_alloc(h);
+
+	if (fill_cmd(c, BMIC_SENSE_CONTROLLER_PARAMETERS, h, buf, sizeof(*buf),
+			0, RAID_CTLR_LUNID, TYPE_CMD)) {
+		rc = -1;
+		goto out;
+	}
+
+	rc = hpsa_scsi_do_simple_cmd_with_retry(h, c, PCI_DMA_FROMDEVICE,
+		NO_TIMEOUT);
+	if (rc)
+		goto out;
+
+	ei = c->err_info;
+	if (ei->CommandStatus != 0 && ei->CommandStatus != CMD_DATA_UNDERRUN) {
+		hpsa_scsi_interpret_error(h, c);
+		rc = -1;
+	}
+
+out:
+	cmd_free(h, c);
+	return rc;
+}
+
 static int hpsa_send_reset(struct ctlr_info *h, unsigned char *scsi3addr,
 	u8 reset_type, int reply_queue)
 {
@@ -4296,6 +4332,50 @@ static bool hpsa_skip_device(struct ctlr_info *h, u8 *lunaddrbytes,
 	return false;
 }
 
+static int hpsa_nvram_hba_flag_enabled(struct ctlr_info *h, bool *flag_enabled)
+{
+	int rc;
+	struct bmic_controller_parameters *ctlr_params;
+
+	ctlr_params = kzalloc(sizeof(*ctlr_params), GFP_KERNEL);
+	if (!ctlr_params) {
+		rc = -ENOMEM;
+		goto out;
+	}
+
+	rc = hpsa_bmic_ctrl_mode_sense(h, ctlr_params);
+	if (rc)
+		goto out;
+
+	*flag_enabled = ctlr_params->nvram_flags & HPSA_NVRAM_FLAG_HBA;
+
+out:
+	kfree(ctlr_params);
+	return rc;
+}
+
+static int hpsa_update_nvram_hba_mode(struct ctlr_info *h)
+{
+	int rc;
+	bool flag_enabled;
+
+	if (!hpsa_use_nvram_hba_flag)
+		return 0;
+
+	rc = hpsa_nvram_hba_flag_enabled(h, &flag_enabled);
+	if (rc == -ENOMEM)
+		dev_warn(&h->pdev->dev, "Out of memory.\n");
+	if (rc)
+		return rc;
+
+	dev_info(&h->pdev->dev, "NVRAM HBA flag: %s\n",
+		flag_enabled ? "enabled" : "disabled");
+
+	h->nvram_hba_mode_enabled = flag_enabled;
+
+	return 0;
+}
+
 static void hpsa_update_scsi_devices(struct ctlr_info *h)
 {
 	/* the idea here is we could get notified
@@ -4352,6 +4432,11 @@ static void hpsa_update_scsi_devices(struct ctlr_info *h)
 			__func__);
 	}
 
+	if (hpsa_update_nvram_hba_mode(h)) {
+		h->drv_req_rescan = 1;
+		goto out;
+	}
+
 	/* We might see up to the maximum number of logical and physical disks
 	 * plus external target devices, and a device for the local RAID
 	 * controller.
@@ -4437,11 +4522,16 @@ static void hpsa_update_scsi_devices(struct ctlr_info *h)
 		 * Expose all devices except for physical devices that
 		 * are masked.
 		 */
-		if (MASKED_DEVICE(lunaddrbytes) && this_device->physical_device)
-			this_device->expose_device = 0;
-		else
+		if (MASKED_DEVICE(lunaddrbytes) &&
+				this_device->physical_device) {
+			if (is_disk_or_zbc(this_device) &&
+					h->nvram_hba_mode_enabled)
+				this_device->expose_device = 1;
+			else
+				this_device->expose_device = 0;
+		} else {
 			this_device->expose_device = 1;
-
+		}
 
 		/*
 		 * Get the SAS address for physical devices that are exposed.
diff --git a/drivers/scsi/hpsa.h b/drivers/scsi/hpsa.h
index 59e023696fff..5b508f270520 100644
--- a/drivers/scsi/hpsa.h
+++ b/drivers/scsi/hpsa.h
@@ -158,6 +158,8 @@ struct bmic_controller_parameters {
 };
 #pragma pack()
 
+#define HPSA_NVRAM_FLAG_HBA (1 << 3)
+
 struct ctlr_info {
 	unsigned int *reply_map;
 	int	ctlr;
@@ -182,6 +184,7 @@ struct ctlr_info {
 	unsigned int msix_vectors;
 	int intr_mode; /* either PERF_MODE_INT or SIMPLE_MODE_INT */
 	struct access_method access;
+	bool nvram_hba_mode_enabled;
 
 	/* queue and queue Info */
 	unsigned int Qdepth;
-- 
2.19.2

