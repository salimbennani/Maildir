Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  14 Dec 2018 20:27:23 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id A3CBB58079D;
	Fri, 14 Dec 2018 02:52:32 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga006-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 14 Dec 2018 02:52:32 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AU80JvhIY7DVOVquLK9mcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgULv/6rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZXshfSTFPDI2/?=
 =?us-ascii?q?YYQNAeoOMulWr5Llp1YMthayGQqhCfnzxjNUmnP6was32PkhHwHc2wwgGsoDvm?=
 =?us-ascii?q?7Oo9XyMKcSVv2+wbXTwjrdafNW2Cr25Y/Qch87uv6DQ7RwccvKxEk1CQzKk1WQ?=
 =?us-ascii?q?ppb5Pz+PyusNtG2b4vNmWOmyiGAnsxl8riazysookIXFm4wYxk7e+Slkw4s5Oc?=
 =?us-ascii?q?e0RU95bNK8DpdcqyWXO5FrTs4sXW1kojs2x74ItJKhYiQHy5IqzAPFZfOdaYiH?=
 =?us-ascii?q?+BfjWf6RIThmgHJlf6qyhwi98Ue+0O3wTMq030hQripDjNbMsmoB1xvJ6siIUv?=
 =?us-ascii?q?d9/0Gh1iiT1w3L9O1IPUQ5mbDGJ5Mv3LI8jIcfvEffEiPsmUj7jreadkA+9eip?=
 =?us-ascii?q?7+TnbK/mppiZN4JsjgH+M6IumtGwAOghMQgBQXKb+eKi273n5EH5R7tLjvsona?=
 =?us-ascii?q?nDq53aO8sbqbCjAwNP0YYs9Qy/DzG439Qch3UHK0hFeB2fg4jzJ17OOOz4Deu4?=
 =?us-ascii?q?g1m0lDdrxvPGMaP7DpTCM3jOi7Phfbd7605Bxws/19Ff55RICr4fJPL/QFP+tN?=
 =?us-ascii?q?vdDhUhKQy73/7nCMlh1oMZQW+PArWWMKLOsVCS4eIjOemMZJIPtzb7JPgo/Pru?=
 =?us-ascii?q?jX4/mV8Acqilx5oXaHakHvt4J0WVe2bjgtAEEW0SpAoxUPTqiEGeUT5Uf3uyXa?=
 =?us-ascii?q?U86S8hBIKlCofDQIatgLua0Se/H51WYH1GC1+WHXfpcYWER+kDaCaILsB9lTwE?=
 =?us-ascii?q?UKCrS5U92hG2qA/6171nI/LO9S0DtZLj09t16/fJlR4o9zx5FMCd02CLT2FpkW?=
 =?us-ascii?q?IEXT423KZjoUNjzlePy7R3g/tdFdZL/fNGTh86NYLAz+x9E93yWRjOftGTRFai?=
 =?us-ascii?q?Q9WpGzcxTt0qzt8KYkZ9Hciijx/Z0yqrBb8Vi6KEBJgu/q3A2HjxIt53y2za26?=
 =?us-ascii?q?k5k1kmXsxPOHW7iaFl6QjcGZTFk0WDmKasbqQTwijN+GCHzWqNuUFYVBV9UaHE?=
 =?us-ascii?q?XXAZe0vXos715kLET7+yF7snNhFNxtKFKqtPctfpl0lJRO//ONTCZGK8g3q/Cg?=
 =?us-ascii?q?yWxrySdobqe38S3CPGCEcalQAe5nKGNQk4Bie8rGPSFj1uFVTzY0zy9elysm+0?=
 =?us-ascii?q?TkgxzwuSdU1uy6K1+gIJhfybU/4TwrMEuCImqzVoHFa838jaC8aaqwpmZqVcZd?=
 =?us-ascii?q?I94FFI1W/Cswx9P5qgL71th1IEcgR3uV/u2AtzColajccqq3YqxhJoKa2EyFNB?=
 =?us-ascii?q?ay+Y3ZfoN7LNLmn94h+uZLDW213Ey9mW57oA5+4+q1XguwGpCFEv83Fm09lTzn?=
 =?us-ascii?q?ud6Y/GDAsUUZLtTEk38wJ2qK3dYik4/4nUz2FjMbGosj/e3NIkHOskygu6c9hD?=
 =?us-ascii?q?Kq+FFQ/yHNccB8ihM+Eqn1mpbhQZPOFd7qI0PsWmd+eY166vJupvgDWmjWFf6o?=
 =?us-ascii?q?Bnzk2M7zZ8SvLP35sd2fGY3xeIWC3mjFi8tcD7g4ZEai8IHmq+0CTrGJReZqlv?=
 =?us-ascii?q?cokVE2euJMu3y856h57sXX5Y6VGiC0kH2M+vZRqdcVj90RdM2kQQpHytgTG4wC?=
 =?us-ascii?q?BskzE1sqqf2zTDwuTjdBYdOm9HXnJijUrqIYWvi9AaXU6obxUmlRe/5Eb6wbRb?=
 =?us-ascii?q?q7p7L2XJXUhIeC32JXl4UqSsrrqCf9JP6JQwvCVVSuu8e1OaSr36oxcAyCPsBW?=
 =?us-ascii?q?hexDM6dzGspJr5mQd3iGacLHZ1sXrYdtt8xRbZ5NzAW/FR2iAKSzV/iTnSHlK8?=
 =?us-ascii?q?JcWm/c2Il5ffteCzT2KgWYdUcSXxz4OAtS276HZuAR2+mfCzh9LmHRI70S/9y9?=
 =?us-ascii?q?llSyHIoAzgbYns0qSwKfhncVVwBF/g98p6HZlzkogqi5ERw3QahoiV8mABkWf8?=
 =?us-ascii?q?Kthb3aP+bHwQRT8E2dLV4Q7l2FF9IXKN3Y72SnKdws55bdmgfmwWwj4979xNCK?=
 =?us-ascii?q?qM6bxEnCh1rUCioQPff/d9hSsdxuU06HEBne4JogUtwz6ZArATG0lYICPtmw6J?=
 =?us-ascii?q?79C4sKVYemKvfaKs20p5mNCrFKuCrR1EWHblZpciGjd97tl4MFLJynHy65vreN?=
 =?us-ascii?q?/NbdIIrR2UkgzNj+xUKJI3i/oLijBrOWP7vX051eE7iQZi0o29vIiCM29t5r62?=
 =?us-ascii?q?AgZENj3pYMMe4irigrxZnsaSwoCjBJFhGigQUZvsTPKoFi8StPv9OwaPFj08tm?=
 =?us-ascii?q?mUGb7FEQCD70dmqmrFE4q3OHGPOHkZ0dJiSQGfJENFhQAbQi46koQlFgywx8zh?=
 =?us-ascii?q?bUR55i0X5lHisRtB0eZoNxj5UmfCqwakcDY0SJ6DLBVI6gFO/VvaMcub7uhrBS?=
 =?us-ascii?q?FX4oWhrBCRKmycfwlJDWYJWlGdB1D+JLau48PM8/OfBuq4IPvDerGOqe1YV/eV?=
 =?us-ascii?q?ypOjyIpm/zCQNsqROnluFeE02k1GXXphAcTWhy0PSzALlyLKd8ObpAmz+ix0rs?=
 =?us-ascii?q?C88fTnQgHv5ZGIC7tdL9pv4Q22gbyYOu6UhSZ5LytY15wWyX/JzrgfwEAdiyV0?=
 =?us-ascii?q?ezaxFrQAsDbHTLjMla9PEx4bdyRzOdNS4KIhxQZNI9DUi9Pv2r58j/44EFNFVV?=
 =?us-ascii?q?3nmsG0as0GOWC9NFXbBEmVMLSKPyHEw8byYamkU71fkP1UtwGsuTacC0LjIjWD?=
 =?us-ascii?q?lzzzWx+zK+1DkCGbMwJYuIymdhZtCG7jTM/paxGhMd93iyE2zqMwhn/QKWEcNj?=
 =?us-ascii?q?18eVtXrrKM9SNYnul/G2tZ43tlN+aEnSOZ7+jeKpkOsPprAj57l+RV4Hkhz7tV?=
 =?us-ascii?q?7SdEROF6mSfIr95upU2mnfeLyjZ9TBVOrTNL18q3uhBkNLnV+4doR3nJ5lQO4H?=
 =?us-ascii?q?+WBhBMoMFqWfP1vKUF8tHIkKW7AT1P9dOcqdMVDcXSKeqdPXYhOAavEznRWlhW?=
 =?us-ascii?q?BQW3PH3S0hQO2MqZ8WeY+91j8sDh?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AfAACqihNch0O0hNFjHQEBBQEHBQGBU?=
 =?us-ascii?q?gcBCwGDayeMdIszgWg5l0GBdhEYEwGHRyI1CA0BAwEBAQEBAQIBEwEBAQgNCQg?=
 =?us-ascii?q?pL4I2JAGCYgMDAQIkCwFGBgkBAVADVBkFgxyCAQWnAjOKL4w+F4FAP4ERM407A?=
 =?us-ascii?q?os2lWIJhk2LDRiJb4demViBSAKCCjMaCBsVgyeCJxeOHj4BATGBBQEBHIw6AQE?=
X-IPAS-Result: =?us-ascii?q?A0AfAACqihNch0O0hNFjHQEBBQEHBQGBUgcBCwGDayeMdIs?=
 =?us-ascii?q?zgWg5l0GBdhEYEwGHRyI1CA0BAwEBAQEBAQIBEwEBAQgNCQgpL4I2JAGCYgMDA?=
 =?us-ascii?q?QIkCwFGBgkBAVADVBkFgxyCAQWnAjOKL4w+F4FAP4ERM407Aos2lWIJhk2LDRi?=
 =?us-ascii?q?Jb4demViBSAKCCjMaCBsVgyeCJxeOHj4BATGBBQEBHIw6AQE?=
X-IronPort-AV: E=Sophos;i="5.56,352,1539673200"; 
   d="scan'208";a="44966050"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 14 Dec 2018 02:52:30 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729702AbeLNKw2 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 14 Dec 2018 05:52:28 -0500
Received: from mx1.redhat.com ([209.132.183.28]:48512 "EHLO mx1.redhat.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1729632AbeLNKw0 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 14 Dec 2018 05:52:26 -0500
Received: from smtp.corp.redhat.com (int-mx08.intmail.prod.int.phx2.redhat.com [10.5.11.23])
        (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
        (No client certificate requested)
        by mx1.redhat.com (Postfix) with ESMTPS id 61FAC753E2;
        Fri, 14 Dec 2018 10:52:25 +0000 (UTC)
Received: from localhost.localdomain.com (unknown [10.32.181.131])
        by smtp.corp.redhat.com (Postfix) with ESMTP id E3DC826FA9;
        Fri, 14 Dec 2018 10:52:23 +0000 (UTC)
From: Paolo Abeni <pabeni@redhat.com>
To: netdev@vger.kernel.org
Cc: "David S. Miller" <davem@davemloft.net>,
        Eric Dumazet <eric.dumazet@gmail.com>,
        Paul Turner <pjt@google.com>, linux-kernel@vger.kernel.org,
        Edward Cree <ecree@solarflare.com>,
        David Woodhouse <dwmw2@infradead.org>
Subject: [PATCH net-next v3 3/4] net: use indirect call wrappers at GRO transport layer
Date: Fri, 14 Dec 2018 11:51:59 +0100
Message-Id: <95458ca1cb0119188b644681c966111b33330d30.1544784419.git.pabeni@redhat.com>
In-Reply-To: <cover.1544784419.git.pabeni@redhat.com>
References: <cover.1544784419.git.pabeni@redhat.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Scanned-By: MIMEDefang 2.84 on 10.5.11.23
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16 (mx1.redhat.com [10.5.110.39]); Fri, 14 Dec 2018 10:52:25 +0000 (UTC)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This avoids an indirect call in the receive path for TCP and UDP
packets. TCP takes precedence on UDP, so that we have a single
additional conditional in the common case.

When IPV6 is build as module, all gro symbols except UDPv6 are
builtin, while the latter belong to the ipv6 module, so we
need some special care.

v1 -> v2:
 - adapted to INDIRECT_CALL_ changes
v2 -> v3:
 - fix build issue with CONFIG_IPV6=m

Signed-off-by: Paolo Abeni <pabeni@redhat.com>
---
 include/net/inet_common.h |  7 +++++++
 net/ipv4/af_inet.c        | 13 +++++++++++--
 net/ipv4/tcp_offload.c    |  6 ++++--
 net/ipv4/udp_offload.c    |  7 ++++---
 net/ipv6/ip6_offload.c    | 29 +++++++++++++++++++++++++++--
 net/ipv6/tcpv6_offload.c  |  7 ++++---
 net/ipv6/udp_offload.c    |  7 ++++---
 7 files changed, 61 insertions(+), 15 deletions(-)

diff --git a/include/net/inet_common.h b/include/net/inet_common.h
index 56e7592811ea..975901a95c0f 100644
--- a/include/net/inet_common.h
+++ b/include/net/inet_common.h
@@ -56,4 +56,11 @@ static inline void inet_ctl_sock_destroy(struct sock *sk)
 		sock_release(sk->sk_socket);
 }
 
+#define indirect_call_gro_receive(f2, f1, cb, head, skb)	\
+({								\
+	unlikely(gro_recursion_inc_test(skb)) ?			\
+		NAPI_GRO_CB(skb)->flush |= 1, NULL :		\
+		INDIRECT_CALL_2(cb, f2, f1, head, skb);		\
+})
+
 #endif
diff --git a/net/ipv4/af_inet.c b/net/ipv4/af_inet.c
index 326c422c22f8..0dfb72c46671 100644
--- a/net/ipv4/af_inet.c
+++ b/net/ipv4/af_inet.c
@@ -1385,6 +1385,10 @@ struct sk_buff *inet_gso_segment(struct sk_buff *skb,
 }
 EXPORT_SYMBOL(inet_gso_segment);
 
+INDIRECT_CALLABLE_DECLARE(struct sk_buff *tcp4_gro_receive(struct list_head *,
+							   struct sk_buff *));
+INDIRECT_CALLABLE_DECLARE(struct sk_buff *udp4_gro_receive(struct list_head *,
+							   struct sk_buff *));
 struct sk_buff *inet_gro_receive(struct list_head *head, struct sk_buff *skb)
 {
 	const struct net_offload *ops;
@@ -1494,7 +1498,8 @@ struct sk_buff *inet_gro_receive(struct list_head *head, struct sk_buff *skb)
 	skb_gro_pull(skb, sizeof(*iph));
 	skb_set_transport_header(skb, skb_gro_offset(skb));
 
-	pp = call_gro_receive(ops->callbacks.gro_receive, head, skb);
+	pp = indirect_call_gro_receive(tcp4_gro_receive, udp4_gro_receive,
+				       ops->callbacks.gro_receive, head, skb);
 
 out_unlock:
 	rcu_read_unlock();
@@ -1556,6 +1561,8 @@ int inet_recv_error(struct sock *sk, struct msghdr *msg, int len, int *addr_len)
 	return -EINVAL;
 }
 
+INDIRECT_CALLABLE_DECLARE(int tcp4_gro_complete(struct sk_buff *, int));
+INDIRECT_CALLABLE_DECLARE(int udp4_gro_complete(struct sk_buff *, int));
 int inet_gro_complete(struct sk_buff *skb, int nhoff)
 {
 	__be16 newlen = htons(skb->len - nhoff);
@@ -1581,7 +1588,9 @@ int inet_gro_complete(struct sk_buff *skb, int nhoff)
 	 * because any hdr with option will have been flushed in
 	 * inet_gro_receive().
 	 */
-	err = ops->callbacks.gro_complete(skb, nhoff + sizeof(*iph));
+	err = INDIRECT_CALL_2(ops->callbacks.gro_complete,
+			      tcp4_gro_complete, udp4_gro_complete,
+			      skb, nhoff + sizeof(*iph));
 
 out_unlock:
 	rcu_read_unlock();
diff --git a/net/ipv4/tcp_offload.c b/net/ipv4/tcp_offload.c
index 870b0a335061..0fbf7d4df9da 100644
--- a/net/ipv4/tcp_offload.c
+++ b/net/ipv4/tcp_offload.c
@@ -10,6 +10,7 @@
  *	TCPv4 GSO/GRO support
  */
 
+#include <linux/indirect_call_wrapper.h>
 #include <linux/skbuff.h>
 #include <net/tcp.h>
 #include <net/protocol.h>
@@ -305,7 +306,8 @@ int tcp_gro_complete(struct sk_buff *skb)
 }
 EXPORT_SYMBOL(tcp_gro_complete);
 
-static struct sk_buff *tcp4_gro_receive(struct list_head *head, struct sk_buff *skb)
+INDIRECT_CALLABLE_SCOPE
+struct sk_buff *tcp4_gro_receive(struct list_head *head, struct sk_buff *skb)
 {
 	/* Don't bother verifying checksum if we're going to flush anyway. */
 	if (!NAPI_GRO_CB(skb)->flush &&
@@ -318,7 +320,7 @@ static struct sk_buff *tcp4_gro_receive(struct list_head *head, struct sk_buff *
 	return tcp_gro_receive(head, skb);
 }
 
-static int tcp4_gro_complete(struct sk_buff *skb, int thoff)
+INDIRECT_CALLABLE_SCOPE int tcp4_gro_complete(struct sk_buff *skb, int thoff)
 {
 	const struct iphdr *iph = ip_hdr(skb);
 	struct tcphdr *th = tcp_hdr(skb);
diff --git a/net/ipv4/udp_offload.c b/net/ipv4/udp_offload.c
index 0646d61f4fa8..9a141a6cf1a0 100644
--- a/net/ipv4/udp_offload.c
+++ b/net/ipv4/udp_offload.c
@@ -13,6 +13,7 @@
 #include <linux/skbuff.h>
 #include <net/udp.h>
 #include <net/protocol.h>
+#include <net/inet_common.h>
 
 static struct sk_buff *__skb_udp_tunnel_segment(struct sk_buff *skb,
 	netdev_features_t features,
@@ -451,8 +452,8 @@ struct sk_buff *udp_gro_receive(struct list_head *head, struct sk_buff *skb,
 }
 EXPORT_SYMBOL(udp_gro_receive);
 
-static struct sk_buff *udp4_gro_receive(struct list_head *head,
-					struct sk_buff *skb)
+INDIRECT_CALLABLE_SCOPE
+struct sk_buff *udp4_gro_receive(struct list_head *head, struct sk_buff *skb)
 {
 	struct udphdr *uh = udp_gro_udphdr(skb);
 
@@ -525,7 +526,7 @@ int udp_gro_complete(struct sk_buff *skb, int nhoff,
 }
 EXPORT_SYMBOL(udp_gro_complete);
 
-static int udp4_gro_complete(struct sk_buff *skb, int nhoff)
+INDIRECT_CALLABLE_SCOPE int udp4_gro_complete(struct sk_buff *skb, int nhoff)
 {
 	const struct iphdr *iph = ip_hdr(skb);
 	struct udphdr *uh = (struct udphdr *)(skb->data + nhoff);
diff --git a/net/ipv6/ip6_offload.c b/net/ipv6/ip6_offload.c
index ff8b484d2258..5c045691c302 100644
--- a/net/ipv6/ip6_offload.c
+++ b/net/ipv6/ip6_offload.c
@@ -20,6 +20,23 @@
 
 #include "ip6_offload.h"
 
+/* All GRO functions are always builtin, except UDP over ipv6, which lays in
+ * ipv6 module, as it depends on UDPv6 lookup function, so we need special care
+ * when ipv6 is built as a module
+ */
+#if IS_BUILTIN(CONFIG_IPV6)
+#define INDIRECT_CALL_L4(f, f2, f1, ...) INDIRECT_CALL_2(f, f2, f1, __VA_ARGS__)
+#else
+#define INDIRECT_CALL_L4(f, f2, f1, ...) INDIRECT_CALL_1(f, f2, __VA_ARGS__)
+#endif
+
+#define indirect_call_gro_receive_l4(f2, f1, cb, head, skb)	\
+({								\
+	unlikely(gro_recursion_inc_test(skb)) ?			\
+		NAPI_GRO_CB(skb)->flush |= 1, NULL :		\
+		INDIRECT_CALL_L4(cb, f2, f1, head, skb);	\
+})
+
 static int ipv6_gso_pull_exthdrs(struct sk_buff *skb, int proto)
 {
 	const struct net_offload *ops = NULL;
@@ -164,6 +181,10 @@ static int ipv6_exthdrs_len(struct ipv6hdr *iph,
 	return len;
 }
 
+INDIRECT_CALLABLE_DECLARE(struct sk_buff *tcp6_gro_receive(struct list_head *,
+							   struct sk_buff *));
+INDIRECT_CALLABLE_DECLARE(struct sk_buff *udp6_gro_receive(struct list_head *,
+							   struct sk_buff *));
 INDIRECT_CALLABLE_SCOPE struct sk_buff *ipv6_gro_receive(struct list_head *head,
 							 struct sk_buff *skb)
 {
@@ -260,7 +281,8 @@ INDIRECT_CALLABLE_SCOPE struct sk_buff *ipv6_gro_receive(struct list_head *head,
 
 	skb_gro_postpull_rcsum(skb, iph, nlen);
 
-	pp = call_gro_receive(ops->callbacks.gro_receive, head, skb);
+	pp = indirect_call_gro_receive_l4(tcp6_gro_receive, udp6_gro_receive,
+					 ops->callbacks.gro_receive, head, skb);
 
 out_unlock:
 	rcu_read_unlock();
@@ -301,6 +323,8 @@ static struct sk_buff *ip4ip6_gro_receive(struct list_head *head,
 	return inet_gro_receive(head, skb);
 }
 
+INDIRECT_CALLABLE_DECLARE(int tcp6_gro_complete(struct sk_buff *, int));
+INDIRECT_CALLABLE_DECLARE(int udp6_gro_complete(struct sk_buff *, int));
 INDIRECT_CALLABLE_SCOPE int ipv6_gro_complete(struct sk_buff *skb, int nhoff)
 {
 	const struct net_offload *ops;
@@ -320,7 +344,8 @@ INDIRECT_CALLABLE_SCOPE int ipv6_gro_complete(struct sk_buff *skb, int nhoff)
 	if (WARN_ON(!ops || !ops->callbacks.gro_complete))
 		goto out_unlock;
 
-	err = ops->callbacks.gro_complete(skb, nhoff);
+	err = INDIRECT_CALL_L4(ops->callbacks.gro_complete, tcp6_gro_complete,
+			       udp6_gro_complete, skb, nhoff);
 
 out_unlock:
 	rcu_read_unlock();
diff --git a/net/ipv6/tcpv6_offload.c b/net/ipv6/tcpv6_offload.c
index e72947c99454..3179c425d7ff 100644
--- a/net/ipv6/tcpv6_offload.c
+++ b/net/ipv6/tcpv6_offload.c
@@ -9,14 +9,15 @@
  *
  *      TCPv6 GSO/GRO support
  */
+#include <linux/indirect_call_wrapper.h>
 #include <linux/skbuff.h>
 #include <net/protocol.h>
 #include <net/tcp.h>
 #include <net/ip6_checksum.h>
 #include "ip6_offload.h"
 
-static struct sk_buff *tcp6_gro_receive(struct list_head *head,
-					struct sk_buff *skb)
+INDIRECT_CALLABLE_SCOPE
+struct sk_buff *tcp6_gro_receive(struct list_head *head, struct sk_buff *skb)
 {
 	/* Don't bother verifying checksum if we're going to flush anyway. */
 	if (!NAPI_GRO_CB(skb)->flush &&
@@ -29,7 +30,7 @@ static struct sk_buff *tcp6_gro_receive(struct list_head *head,
 	return tcp_gro_receive(head, skb);
 }
 
-static int tcp6_gro_complete(struct sk_buff *skb, int thoff)
+INDIRECT_CALLABLE_SCOPE int tcp6_gro_complete(struct sk_buff *skb, int thoff)
 {
 	const struct ipv6hdr *iph = ipv6_hdr(skb);
 	struct tcphdr *th = tcp_hdr(skb);
diff --git a/net/ipv6/udp_offload.c b/net/ipv6/udp_offload.c
index 828b2457f97b..83b11d0ac091 100644
--- a/net/ipv6/udp_offload.c
+++ b/net/ipv6/udp_offload.c
@@ -11,6 +11,7 @@
  */
 #include <linux/skbuff.h>
 #include <linux/netdevice.h>
+#include <linux/indirect_call_wrapper.h>
 #include <net/protocol.h>
 #include <net/ipv6.h>
 #include <net/udp.h>
@@ -114,8 +115,8 @@ static struct sk_buff *udp6_ufo_fragment(struct sk_buff *skb,
 	return segs;
 }
 
-static struct sk_buff *udp6_gro_receive(struct list_head *head,
-					struct sk_buff *skb)
+INDIRECT_CALLABLE_SCOPE
+struct sk_buff *udp6_gro_receive(struct list_head *head, struct sk_buff *skb)
 {
 	struct udphdr *uh = udp_gro_udphdr(skb);
 
@@ -142,7 +143,7 @@ static struct sk_buff *udp6_gro_receive(struct list_head *head,
 	return NULL;
 }
 
-static int udp6_gro_complete(struct sk_buff *skb, int nhoff)
+INDIRECT_CALLABLE_SCOPE int udp6_gro_complete(struct sk_buff *skb, int nhoff)
 {
 	const struct ipv6hdr *ipv6h = ipv6_hdr(skb);
 	struct udphdr *uh = (struct udphdr *)(skb->data + nhoff);
-- 
2.19.2

