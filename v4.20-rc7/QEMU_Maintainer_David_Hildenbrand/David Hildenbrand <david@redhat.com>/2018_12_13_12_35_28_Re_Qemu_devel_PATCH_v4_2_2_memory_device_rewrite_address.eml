Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 21:23:45 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 8CC3458079D
	for <like.xu@linux.intel.com>; Thu, 13 Dec 2018 04:36:00 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by fmsmga004-1.fm.intel.com with ESMTP; 13 Dec 2018 04:36:00 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AzsPlpRzqcWdR1xzXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?2uIWIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CW2RBUMZfVytCDI2y?=
 =?us-ascii?q?YYQAAOgOMvpXoYfgv1sDrxmwCAaxCO7h1jNHmGT20LYm0+Q4CwzKwBAsEtwMvX?=
 =?us-ascii?q?nSsd77NL0SUeewzKTQwzvMde1W2Tbg54PVcB4hoPWMUq9ufsrX0kYvDRnKjlON?=
 =?us-ascii?q?pof4OD6ay/4Cs3aa7+V9Tu+vkXAopBxxoje12scgkJXGhoUQyl3d8yhy3YU7Jc?=
 =?us-ascii?q?WgRUJlfdKpE4FcuzyHO4Z1WM8uXW9ltSYgxrEbu5O3ZDYGxIgjyhLFdvCKfZaE?=
 =?us-ascii?q?7gj+WOuSLzp0nmxpdbG5ih2v60av0Pf8WdOx0FtSripKjN3MtncV2hzX68iHUe?=
 =?us-ascii?q?d9/ly71TaA0QDT9/tIIUcularUM5Ihw7gwmYQPsUnbACP6hEb7gLWLekk5+eWk?=
 =?us-ascii?q?8frrb7vmq5OGKoN5iBnyMqE0lcy+BeQ4PBIOX2+e+emkzb3s40j5QKhTgvIrjK?=
 =?us-ascii?q?bZro7VJcACqqGiBA9Vz4Aj5AqhADe919gYmXgHLFFbdx6dgInpJknDIPT5Dfe5?=
 =?us-ascii?q?nlStny1nx/HAPr39HJrNKmLPn6vmfbZ48ENczg0zzdZQ55JSF7ENOvXzWlX+tN?=
 =?us-ascii?q?DAFB82LxS0w/r7CNV6zo4eXWOPAqyHP6/Ivl6I+/kiI+2NZI8TpTb8JOIp5//o?=
 =?us-ascii?q?jX8lh1AdebOl0ocQaHC9TbxbJV6Eay/snssZCjVN+Q4/V/DxzluFVzFVejC1Ra?=
 =?us-ascii?q?174zg6DIevC8DEXpysh7qamz62G4ATam1YB1TfLHHzao/RXv4NbD6VcNZslyFB?=
 =?us-ascii?q?WbW/Rotkzxy3qQLh15JhKezb/DBesojsg8No7e/eng1n6DpvEs6G2HuMRWwnom?=
 =?us-ascii?q?RdZjAxxuhaqEl4x1uEz+AsgvlRENle6/RhSAo2NZfAied9DoahdBjGe4KlQUin?=
 =?us-ascii?q?Tp2GADU9Q9Q72dYIbw4pF9y8jxzrxSemA7YJ0beMAcpnoernw3HtKpMlmD7936?=
 =?us-ascii?q?47ggxjG5MXOA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BHAAA6URJcmBHrdtBjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUwUBAQsBgTCCTxODfIh4jRMIJZdUgXMUGBSEQIMEIjYHDQEDAQEBAQEBAgE?=
 =?us-ascii?q?TAQEBAQEICwsGGw4vgjYFAgMaAQaCWwEBAQECAQECIAQfCikDAwECBgEBCg4KA?=
 =?us-ascii?q?gIiBAICAwFTBg0GAgEBAYMcgXkIAQSme3wzgkyHZYELizEXgX+BEScMgl+FAYM?=
 =?us-ascii?q?EglcCiTwDjEGLDwmCKI8rBhhgfIUcgnQQh06DBJZFgU0EggNwFTuCbIJQjgxAM?=
 =?us-ascii?q?YEHHIo1gXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0BHAAA6URJcmBHrdtBjHAEBAQQBAQcEAQGBUwUBAQsBgTC?=
 =?us-ascii?q?CTxODfIh4jRMIJZdUgXMUGBSEQIMEIjYHDQEDAQEBAQEBAgETAQEBAQEICwsGG?=
 =?us-ascii?q?w4vgjYFAgMaAQaCWwEBAQECAQECIAQfCikDAwECBgEBCg4KAgIiBAICAwFTBg0?=
 =?us-ascii?q?GAgEBAYMcgXkIAQSme3wzgkyHZYELizEXgX+BEScMgl+FAYMEglcCiTwDjEGLD?=
 =?us-ascii?q?wmCKI8rBhhgfIUcgnQQh06DBJZFgU0EggNwFTuCbIJQjgxAMYEHHIo1gXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,349,1539673200"; 
   d="scan'208";a="57319537"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 13 Dec 2018 04:35:58 -0800
Received: from localhost ([::1]:52114 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gXQDd-0007Rt-Oh
	for like.xu@linux.intel.com; Thu, 13 Dec 2018 07:35:57 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:46020)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <david@redhat.com>) id 1gXQDT-0007Qd-LE
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 07:35:48 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <david@redhat.com>) id 1gXQDQ-0008OJ-CM
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 07:35:47 -0500
Received: from mx1.redhat.com ([209.132.183.28]:42956)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <david@redhat.com>) id 1gXQDQ-0008Kf-3h
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 07:35:44 -0500
Received: from smtp.corp.redhat.com (int-mx02.intmail.prod.int.phx2.redhat.com
	[10.5.11.12])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id AA4783082E53;
	Thu, 13 Dec 2018 12:35:42 +0000 (UTC)
Received: from [10.36.116.43] (ovpn-116-43.ams2.redhat.com [10.36.116.43])
	by smtp.corp.redhat.com (Postfix) with ESMTP id 97F8660C69;
	Thu, 13 Dec 2018 12:35:29 +0000 (UTC)
To: Igor Mammedov <imammedo@redhat.com>
References: <20181212092821.18260-1-david@redhat.com>
	<20181212092821.18260-3-david@redhat.com>
	<20181213132850.2b79d12f@redhat.com>
From: David Hildenbrand <david@redhat.com>
Openpgp: preference=signencrypt
Autocrypt: addr=david@redhat.com; prefer-encrypt=mutual; keydata=
	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
	SE+xAvmumFBY
Organization: Red Hat GmbH
Message-ID: <0ba15f35-4827-f6f9-7a62-94a13027c727@redhat.com>
Date: Thu, 13 Dec 2018 13:35:28 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
	Thunderbird/60.3.1
MIME-Version: 1.0
In-Reply-To: <20181213132850.2b79d12f@redhat.com>
Content-Type: text/plain; charset=utf-8
Content-Language: en-US
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.12
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.46]);
	Thu, 13 Dec 2018 12:35:42 +0000 (UTC)
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH v4 2/2] memory-device: rewrite address
 assignment using ranges
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: "Dr . David Alan Gilbert" <dgilbert@redhat.com>,
	David Gibson <david@gibson.dropbear.id.au>,
	qemu-devel@nongnu.org, Eduardo Habkost <ehabkost@redhat.com>,
	"Michael S . Tsirkin" <mst@redhat.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On 13.12.18 13:28, Igor Mammedov wrote:
> On Wed, 12 Dec 2018 10:28:21 +0100
> David Hildenbrand <david@redhat.com> wrote:
>=20
>> Let's rewrite it properly using ranges. This fixes certain overflows t=
hat
>> are right now possible. E.g.
>>
>> qemu-system-x86_64 -m 4G,slots=3D20,maxmem=3D40G -M pc \
>>     -object memory-backend-file,id=3Dmem1,share,mem-path=3D/dev/zero,s=
ize=3D2G
>>     -device pc-dimm,memdev=3Dmem1,id=3Ddimm1,addr=3D-0x40000000
>>
>> Now properly errors out instead of succeeding. (Note that qapi
>> parsing of huge uint64_t values is broken and fixes are on the way)
>>
>> "can't add memory device [0xffffffffa0000000:0x80000000], usable range=
 for
>> memory devices [0x140000000:0xe00000000]"
>>
>> Signed-off-by: David Hildenbrand <david@redhat.com>
>> ---
>>  hw/mem/memory-device.c | 54 ++++++++++++++++++++++++-----------------=
-
>>  1 file changed, 31 insertions(+), 23 deletions(-)
>>
>> diff --git a/hw/mem/memory-device.c b/hw/mem/memory-device.c
>> index 8be63c8032..28e871f562 100644
>> --- a/hw/mem/memory-device.c
>> +++ b/hw/mem/memory-device.c
>> @@ -100,9 +100,8 @@ static uint64_t memory_device_get_free_addr(Machin=
eState *ms,
>>                                              uint64_t align, uint64_t =
size,
>>                                              Error **errp)
>>  {
>> -    uint64_t address_space_start, address_space_end;
>>      GSList *list =3D NULL, *item;
>> -    uint64_t new_addr =3D 0;
>> +    Range as, new =3D range_empty;
>> =20
>>      if (!ms->device_memory) {
>>          error_setg(errp, "memory devices (e.g. for memory hotplug) ar=
e not "
>> @@ -115,13 +114,11 @@ static uint64_t memory_device_get_free_addr(Mach=
ineState *ms,
>>                           "enabled, please specify the maxmem option")=
;
>>          return 0;
>>      }
>> -    address_space_start =3D ms->device_memory->base;
>> -    address_space_end =3D address_space_start +
>> -                        memory_region_size(&ms->device_memory->mr);
>> -    g_assert(address_space_end >=3D address_space_start);
>> +    range_init_nofail(&as, ms->device_memory->base,
>> +                      memory_region_size(&ms->device_memory->mr));
>> =20
>> -    /* address_space_start indicates the maximum alignment we expect =
*/
>> -    if (!QEMU_IS_ALIGNED(address_space_start, align)) {
>> +    /* start of address space indicates the maximum alignment we expe=
ct */
>> +    if (!QEMU_IS_ALIGNED(range_lob(&as), align)) {
>>          error_setg(errp, "the alignment (0x%" PRIx64 ") is not suppor=
ted",
>>                     align);
>>          return 0;
>> @@ -145,20 +142,25 @@ static uint64_t memory_device_get_free_addr(Mach=
ineState *ms,
>>      }
>> =20
>>      if (hint) {
>> -        new_addr =3D *hint;
>> -        if (new_addr < address_space_start) {
>> +        if (range_init(&new, *hint, size)) {
>>              error_setg(errp, "can't add memory device [0x%" PRIx64 ":=
0x%" PRIx64
>> -                       "] before 0x%" PRIx64, new_addr, size,
>> -                       address_space_start);
>> +                       "], usable range for memory devices [0x%" PRIx=
64 ":0x%"
>> +                       PRIx64 "]", *hint, size, range_lob(&as),
>> +                       range_size(&as));
> this changes error message to be the same as the next one and looses 'b=
efore' meaning
> so if you'd like to have the same error message, then prbably merging b=
oth branches would be better.

I can do that, but I'll have to refer to "*hint" and "size" then instead
of range_lob(&new) and range_size(&new), because the range might not be
initialized.

>=20
>>              return 0;
>> -        } else if ((new_addr + size) > address_space_end) {
>> +        }
>> +        if (!range_contains_range(&as, &new)) {
>>              error_setg(errp, "can't add memory device [0x%" PRIx64 ":=
0x%" PRIx64
>> -                       "] beyond 0x%" PRIx64, new_addr, size,
>> -                       address_space_end);
>> +                       "], usable range for memory devices [0x%" PRIx=
64 ":0x%"
>> +                       PRIx64 "]", range_lob(&new), range_size(&new),
>> +                       range_lob(&as), range_size(&as));
>>              return 0;
>>          }
>>      } else {
>> -        new_addr =3D address_space_start;
>> +        if (range_init(&new, range_lob(&as), size)) {
>> +            error_setg(errp, "can't add memory device, device too big=
");
>> +            return 0;
>> +        }
>>      }
>> =20
>>      /* find address range that will fit new memory device */
>> @@ -166,30 +168,36 @@ static uint64_t memory_device_get_free_addr(Mach=
ineState *ms,
>>      for (item =3D list; item; item =3D g_slist_next(item)) {
>>          const MemoryDeviceState *md =3D item->data;
>>          const MemoryDeviceClass *mdc =3D MEMORY_DEVICE_GET_CLASS(OBJE=
CT(md));
>> -        uint64_t md_size, md_addr;
>> +        uint64_t next_addr;
>> +        Range tmp;
>> =20
>> -        md_addr =3D mdc->get_addr(md);
>> -        md_size =3D memory_device_get_region_size(md, &error_abort);
>> +        range_init_nofail(&tmp, mdc->get_addr(md),
>> +                          memory_device_get_region_size(md, &error_ab=
ort));
> is it possible to make QEMU abort here during hotplug here? (range_init=
_nofail)

No, as we've handled (and effectively assigned the addresses of) these
devices when they were effectively added/cold/hotplugged. We only have
to be careful with the new device we're adding.

>=20
>> =20
>> -        if (ranges_overlap(md_addr, md_size, new_addr, size)) {
>> +        if (range_overlaps_range(&tmp, &new)) {
>>              if (hint) {
>>                  const DeviceState *d =3D DEVICE(md);
>>                  error_setg(errp, "address range conflicts with memory=
 device"
>>                             " id=3D'%s'", d->id ? d->id : "(unnamed)")=
;
>>                  goto out;
>>              }
>> -            new_addr =3D QEMU_ALIGN_UP(md_addr + md_size, align);
>> +
>> +            next_addr =3D QEMU_ALIGN_UP(range_upb(&tmp) + 1, align);
>> +            if (!next_addr || range_init(&new, next_addr, range_size(=
&new))) {
>> +                range_make_empty(&new);
>> +                break;
>> +            }
>>          }
>>      }
>> =20
>> -    if (new_addr + size > address_space_end) {
>> +    if (!range_contains_range(&as, &new)) {
>>          error_setg(errp, "could not find position in guest address sp=
ace for "
>>                     "memory device - memory fragmented due to alignmen=
ts");
> it could happen due to fragmentation but also in case remaining free sp=
ace is no enough

That should be handled via memory_device_check_addable(), which is
called at the beginning of the function. It checks for general size
availability.

Thanks!

--=20

Thanks,

David / dhildenb

