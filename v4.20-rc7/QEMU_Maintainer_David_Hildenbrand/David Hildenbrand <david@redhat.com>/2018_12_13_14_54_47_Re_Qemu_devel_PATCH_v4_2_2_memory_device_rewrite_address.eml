Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  14 Dec 2018 08:38:16 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 4636458079D
	for <like.xu@linux.intel.com>; Thu, 13 Dec 2018 07:11:16 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 13 Dec 2018 07:11:08 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AMQJE6hA3Qowcnfc1Wrf8UyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSPXzp8bcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRthfVyJBDIO7?=
 =?us-ascii?q?bIUBAeQOMulaoIbhqFUAsAO+CAuuCu7g1zNFiGP60rMh0+k6DQHL3hYtE84SvH?=
 =?us-ascii?q?nartj4MroZX+CvzKnPyDXOd/1Y1i3j6IjJbx8qvPOCXbN0ccXM10YvERjKjk+K?=
 =?us-ascii?q?pozjIjyey+MAvHWB4Op+VOKglnUqqxtvrTeyxscjkJXJipgJxVDD8CV02YA4Ls?=
 =?us-ascii?q?C7Rk5jedOoDodcuiKAO4drX88vQHtktDg0x7AGo5K3YSoHxIw5yxLDb/GLaZWE?=
 =?us-ascii?q?7xz9WOqLPDt1h3xodKihixux90Wr1/fyWdOu0FlQqypIitnMuW4J1xzU8sWHTv?=
 =?us-ascii?q?p9/ly92TaUzQzT5edEIV0umarcMZ4hzaY8lpsVsUvdAi/7gFv6gLOVe0k+5+Sk?=
 =?us-ascii?q?9ufqbq/4qpKSN4J4kBzyP6Y2lsy6G+s4MwwOX2aB+eS70b3u5VT5T6tPjv0ri6?=
 =?us-ascii?q?XWrY7VJdoFqa69GgNayYEj6wu5Dzi6ztsYhn4LLFZEeBKEkYflIV7PIO3gAPe7?=
 =?us-ascii?q?glSsliprxv/cMr3gBJXNMmbMkLP7cblh7E5czRE+zdZY55JSBbEBJu/zVlX2tN?=
 =?us-ascii?q?zCAR81Kxa0zPr/CNVhyoMeXnqCAquYMKPRr1CE/O0uI/SXaY8RuTb9LeUl5vH0?=
 =?us-ascii?q?gX84n18dYbem3Z8NZH+kGfRmJhbRXHz3n91UEXsWphFsC6vuiUaeSnhVYHC9Wb?=
 =?us-ascii?q?964Ss0T4evDIPGT4bqh6Sd3SC9BdpPa2VbT1yBD3rsJLiCQOoGPSebI8t9lW4d?=
 =?us-ascii?q?WL28DoMsyxyq8RX30qdqNfb8/CoeupT+kt9v6LrIiBsw+DdoWtmbyHyHVGpun2?=
 =?us-ascii?q?kFFAMxiYFwplY1716G1KV0hOIQQd1W7vZMXws9HYTRw+xzF5b5XQeXLfmTT1Pz?=
 =?us-ascii?q?bty4AD15btM1z9IIaVx0Hdnq2hzKwSumK6UYm7yCGNo/9aeKjCu5HNp013uTjP?=
 =?us-ascii?q?pptFIhWMYacDT+3qM=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AWAABKdhJcmBHrdtBjGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUwQBAQELAYEwgk8Tg3yIeI0ULZdUgXMUGBSHRSI2Bw0BAwEBAQEBAQI?=
 =?us-ascii?q?BEwEBAQEBCAsLBhsOL4I2BQIDGgEGglwBAgMBAiAEHwopAwMBAgYBAQoOCgICI?=
 =?us-ascii?q?gQCAgMBUwYNBgIBAQGDHIIBAQSnDHwzii+BC4sxF4F/gREngmuIBYJXAokbIQO?=
 =?us-ascii?q?GT5EBCYIojysGGGB8hRyCdBCHToMElkWBTQ6BeXAVO4JsglCODEAxgQccijWBd?=
 =?us-ascii?q?wEB?=
X-IPAS-Result: =?us-ascii?q?A0AWAABKdhJcmBHrdtBjGwEBAQEDAQEBBwMBAQGBUwQBAQE?=
 =?us-ascii?q?LAYEwgk8Tg3yIeI0ULZdUgXMUGBSHRSI2Bw0BAwEBAQEBAQIBEwEBAQEBCAsLB?=
 =?us-ascii?q?hsOL4I2BQIDGgEGglwBAgMBAiAEHwopAwMBAgYBAQoOCgICIgQCAgMBUwYNBgI?=
 =?us-ascii?q?BAQGDHIIBAQSnDHwzii+BC4sxF4F/gREngmuIBYJXAokbIQOGT5EBCYIojysGG?=
 =?us-ascii?q?GB8hRyCdBCHToMElkWBTQ6BeXAVO4JsglCODEAxgQccijWBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,349,1539673200"; 
   d="scan'208";a="141993052"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 13 Dec 2018 07:10:47 -0800
Received: from localhost ([::1]:53164 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gXSdR-0001yi-H9
	for like.xu@linux.intel.com; Thu, 13 Dec 2018 10:10:45 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:35868)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <david@redhat.com>) id 1gXSO7-00041u-02
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 09:54:56 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <david@redhat.com>) id 1gXSO5-00076U-K3
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 09:54:54 -0500
Received: from mx1.redhat.com ([209.132.183.28]:46350)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <david@redhat.com>) id 1gXSO5-000749-7M
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 09:54:53 -0500
Received: from smtp.corp.redhat.com (int-mx03.intmail.prod.int.phx2.redhat.com
	[10.5.11.13])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 3899C308213F;
	Thu, 13 Dec 2018 14:54:52 +0000 (UTC)
Received: from [10.36.116.43] (ovpn-116-43.ams2.redhat.com [10.36.116.43])
	by smtp.corp.redhat.com (Postfix) with ESMTP id BC751614E6;
	Thu, 13 Dec 2018 14:54:48 +0000 (UTC)
To: Igor Mammedov <imammedo@redhat.com>
References: <20181212092821.18260-1-david@redhat.com>
	<20181212092821.18260-3-david@redhat.com>
	<20181213132850.2b79d12f@redhat.com>
	<0ba15f35-4827-f6f9-7a62-94a13027c727@redhat.com>
	<20181213154838.5c7af97a@redhat.com>
From: David Hildenbrand <david@redhat.com>
Openpgp: preference=signencrypt
Autocrypt: addr=david@redhat.com; prefer-encrypt=mutual; keydata=
	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
	SE+xAvmumFBY
Organization: Red Hat GmbH
Message-ID: <7e959e03-b914-474f-7d99-4c170816bcaa@redhat.com>
Date: Thu, 13 Dec 2018 15:54:47 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
	Thunderbird/60.3.1
MIME-Version: 1.0
In-Reply-To: <20181213154838.5c7af97a@redhat.com>
Content-Type: text/plain; charset=utf-8
Content-Language: en-US
Content-Transfer-Encoding: 7bit
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.13
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.42]);
	Thu, 13 Dec 2018 14:54:52 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH v4 2/2] memory-device: rewrite address
 assignment using ranges
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: "Dr . David Alan Gilbert" <dgilbert@redhat.com>,
	David Gibson <david@gibson.dropbear.id.au>,
	qemu-devel@nongnu.org, Eduardo Habkost <ehabkost@redhat.com>,
	"Michael S . Tsirkin" <mst@redhat.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On 13.12.18 15:48, Igor Mammedov wrote:
> On Thu, 13 Dec 2018 13:35:28 +0100
> David Hildenbrand <david@redhat.com> wrote:
> 
>> On 13.12.18 13:28, Igor Mammedov wrote:
>>> On Wed, 12 Dec 2018 10:28:21 +0100
>>> David Hildenbrand <david@redhat.com> wrote:
>>>   
>>>> Let's rewrite it properly using ranges. This fixes certain overflows that
>>>> are right now possible. E.g.
>>>>
>>>> qemu-system-x86_64 -m 4G,slots=20,maxmem=40G -M pc \
>>>>     -object memory-backend-file,id=mem1,share,mem-path=/dev/zero,size=2G
>>>>     -device pc-dimm,memdev=mem1,id=dimm1,addr=-0x40000000
>>>>
>>>> Now properly errors out instead of succeeding. (Note that qapi
>>>> parsing of huge uint64_t values is broken and fixes are on the way)
>>>>
>>>> "can't add memory device [0xffffffffa0000000:0x80000000], usable range for
>>>> memory devices [0x140000000:0xe00000000]"
>>>>
>>>> Signed-off-by: David Hildenbrand <david@redhat.com>
>>>> ---
>>>>  hw/mem/memory-device.c | 54 ++++++++++++++++++++++++------------------
>>>>  1 file changed, 31 insertions(+), 23 deletions(-)
>>>>
>>>> diff --git a/hw/mem/memory-device.c b/hw/mem/memory-device.c
>>>> index 8be63c8032..28e871f562 100644
>>>> --- a/hw/mem/memory-device.c
>>>> +++ b/hw/mem/memory-device.c
>>>> @@ -100,9 +100,8 @@ static uint64_t memory_device_get_free_addr(MachineState *ms,
>>>>                                              uint64_t align, uint64_t size,
>>>>                                              Error **errp)
>>>>  {
>>>> -    uint64_t address_space_start, address_space_end;
>>>>      GSList *list = NULL, *item;
>>>> -    uint64_t new_addr = 0;
>>>> +    Range as, new = range_empty;
>>>>  
>>>>      if (!ms->device_memory) {
>>>>          error_setg(errp, "memory devices (e.g. for memory hotplug) are not "
>>>> @@ -115,13 +114,11 @@ static uint64_t memory_device_get_free_addr(MachineState *ms,
>>>>                           "enabled, please specify the maxmem option");
>>>>          return 0;
>>>>      }
>>>> -    address_space_start = ms->device_memory->base;
>>>> -    address_space_end = address_space_start +
>>>> -                        memory_region_size(&ms->device_memory->mr);
>>>> -    g_assert(address_space_end >= address_space_start);
>>>> +    range_init_nofail(&as, ms->device_memory->base,
>>>> +                      memory_region_size(&ms->device_memory->mr));
>>>>  
>>>> -    /* address_space_start indicates the maximum alignment we expect */
>>>> -    if (!QEMU_IS_ALIGNED(address_space_start, align)) {
>>>> +    /* start of address space indicates the maximum alignment we expect */
>>>> +    if (!QEMU_IS_ALIGNED(range_lob(&as), align)) {
>>>>          error_setg(errp, "the alignment (0x%" PRIx64 ") is not supported",
>>>>                     align);
>>>>          return 0;
>>>> @@ -145,20 +142,25 @@ static uint64_t memory_device_get_free_addr(MachineState *ms,
>>>>      }
>>>>  
>>>>      if (hint) {
>>>> -        new_addr = *hint;
>>>> -        if (new_addr < address_space_start) {
>>>> +        if (range_init(&new, *hint, size)) {
>>>>              error_setg(errp, "can't add memory device [0x%" PRIx64 ":0x%" PRIx64
>>>> -                       "] before 0x%" PRIx64, new_addr, size,
>>>> -                       address_space_start);
>>>> +                       "], usable range for memory devices [0x%" PRIx64 ":0x%"
>>>> +                       PRIx64 "]", *hint, size, range_lob(&as),
>>>> +                       range_size(&as));  
>>> this changes error message to be the same as the next one and looses 'before' meaning
>>> so if you'd like to have the same error message, then prbably merging both branches would be better.  
>>
>> I can do that, but I'll have to refer to "*hint" and "size" then instead
>> of range_lob(&new) and range_size(&new), because the range might not be
>> initialized.
> either that or better make errors different to avoid confusion.
> 

Will see what turns out better. As we indicate the ranges the user can
figure out what is going wrong.

> [...]
>>>> -            new_addr = QEMU_ALIGN_UP(md_addr + md_size, align);
>>>> +
>>>> +            next_addr = QEMU_ALIGN_UP(range_upb(&tmp) + 1, align);
>>>> +            if (!next_addr || range_init(&new, next_addr, range_size(&new))) {
>>>> +                range_make_empty(&new);
>>>> +                break;
>>>> +            }
>>>>          }
>>>>      }
>>>>  
>>>> -    if (new_addr + size > address_space_end) {
>>>> +    if (!range_contains_range(&as, &new)) {
>>>>          error_setg(errp, "could not find position in guest address space for "
>>>>                     "memory device - memory fragmented due to alignments");  
>>> it could happen due to fragmentation but also in case remaining free space is no enough  
>>
>> That should be handled via memory_device_check_addable(), which is
>> called at the beginning of the function. It checks for general size
>> availability.
> 
> I've meant
>  AS_LOB                 AS_UPB
>    100                   1000
>  MEM1_LOB  MEM1_UPB
>    100     900
> then hotplugging MEM2 with size 200 would fail with this message,
> which could be a bit confusing.
> Maybe "not enough space to plug device of size %d" would be better?


That should be covered by memory_device_check_addable() if I am not wrong.

used_region_size + size > ms->maxram_size - ms->ram_size

For your example (if I don't mess up the numbers):

ms->maxram_size - ms->ram_size = 900
used_region_size = 800

So trying to add anything > 100 will bail out.


>    
>>
>> Thanks!
>>
> 


-- 

Thanks,

David / dhildenb

