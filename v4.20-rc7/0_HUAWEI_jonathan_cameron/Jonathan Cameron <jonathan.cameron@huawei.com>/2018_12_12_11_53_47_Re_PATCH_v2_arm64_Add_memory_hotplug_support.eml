Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  12 Dec 2018 19:58:43 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id E483058079D;
	Wed, 12 Dec 2018 03:57:14 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga006-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 12 Dec 2018 03:57:14 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AQr6hCR9HP62SvP9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1ugTIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CS2RPXthfWTFCDIy+?=
 =?us-ascii?q?YYsPCO0PMulEoIfyplsOtgO+CAu3CePzyDJFnGP60Lcm3+g/FwzNwQwuH8gJsH?=
 =?us-ascii?q?TRtNj7MKASUeavw6nUzTXMdfVW0irj5YfSdxAuv+uMXbV2ccHMzkQvFQTFjlOK?=
 =?us-ascii?q?poz5PzOazOINv3KH4OV6UOKglXQnqwZ3ojW0xscsl5PGh4wLxVDF7yl23IE1Jd?=
 =?us-ascii?q?ihRUN9fNWqE4NQujmEO4dqRs4uWXxktSgkxrEcpJK2fzQGxI4myhPdc/CLbpSE?=
 =?us-ascii?q?7gj9WOqNPzt0nmxpdKy+ihqo/kWty/XwW8a03VpQsCZInd3BumoT2xDO9MSLUO?=
 =?us-ascii?q?Zx80O81TuJygvd8PtLIVoumqreM5MhwqA/lp4UsUnbAC/2l1v5jLWMekUn5Oeo?=
 =?us-ascii?q?8eLnbavippOGMI90kA7+Prwvmsy5H+s4LhADU3aH9em4zrHv4EP0TKtQgvErka?=
 =?us-ascii?q?TVrIrWKMUZq6KhBg9ayIcj6xKxDze819QYmGEKLFZEeBKBkojoNEjCIPPmAvel?=
 =?us-ascii?q?hVSjjjNry+nBPrzvBJXCMGLDnaz/fbZy9UFc0hA/zdNB6JJODLEOPvbzVlX2tN?=
 =?us-ascii?q?zCAR81Kxa0zPr/CNVhyoMeXnqCAquYMKPRr1CE/O0uI/SXaY8RuTb9LeUl5vH0?=
 =?us-ascii?q?gX84n18dYbem3Z8NZH+kGfRmJl2TYWDwjdcZDWcKog0+QfTqiFKYUD5Te2y9X6?=
 =?us-ascii?q?Um6jE7FYKpF4HDRo+2jbyF3Se7GIBWZ29cBlCNF3foa5uLW/MWZC2OJc9hlyQO?=
 =?us-ascii?q?VaK9RI85yRGuqAj6xqJlLurT5CIUr5Hj1N9z5+3VkhE/7jh0D8Wb02GQQGB4hG?=
 =?us-ascii?q?IIRzkq3K9hpUxx0EuM0a99g/ZAD9xc++tJUhsmNZ7b1+F1EcvyWgLGfteKUlqm?=
 =?us-ascii?q?WM+pATMqQ9I1wt8OZVt9Gtq4ghDC2SqqH6Eal7iRCJMo9aLc2mD7J9xhxHbeyK?=
 =?us-ascii?q?khk14mT9NMNWK8gK5z7QzTB4/TnEWfmKanbqAc3C/L9GeewmuCpkBYUAhsUarb?=
 =?us-ascii?q?WXATfFfZrdP85knaVb+hFawnMhddyc6FMqZFd8fmjUtYS/v5ONTReWSxm3yuCh?=
 =?us-ascii?q?aOwb+MaInqe2AZ3CjGDEgEkgYT/WuJNAQkByehpX7eAyJqFV71f0zs9ux+omuh?=
 =?us-ascii?q?TkAo1wGKc1Fh172t9xEIn/OcVe0c0qgEuCg7rTV0B0iy39TNBtqEpgpherhcYN?=
 =?us-ascii?q?wn7FdG02LZqxJyPpi6I69+gV4edhx9v1ny2BVvFoVAjc8qoWs2zApzLKKY109B?=
 =?us-ascii?q?dzOY3JzqJr3bMG7y/Aqra67X3FHe382b+qMO6PQ+tlXisxulFksk83V7zdZV12?=
 =?us-ascii?q?GQ6YnNDAoXSZjxSFo49wBmp7HGZSkw/5nb1XlyPqi7rDDD28glC/A4yhm9Zdhf?=
 =?us-ascii?q?NqCEFAjsE8ABA8iuKeoqm0Wmbx4ePeBS8rI0MN2id/ecxKGrO+Ngliq8jWtb+I?=
 =?us-ascii?q?B9zl6M9y1kR+/IwpYJ2e2X0hGGVjf8llihtM/3lJtAZTETGGq/1CflCJRQZq10?=
 =?us-ascii?q?YYYEF2OuL9erydV5gp7nQ2RY+0K7B1MaxM+pfgKfb0b83QJMz0sXu2GomSyiwz?=
 =?us-ascii?q?xyjT4ptKuf0DXSzOv4cBoIJ3BERHNljVfqOoW0i9EaXE61bwkmjhel5ED6x7RF?=
 =?us-ascii?q?q6R7NWXcXUBIfy3uJWF4TqSwrqaCY9JI6J4wsSRXUf6wYFCARr7mvhsa1TjuH2?=
 =?us-ascii?q?9fxDA9ajGrtY/1nx18iGKBMnlzqGDVdt13xRfa/NbcX+Je3iIaRClkjjnaHlq8?=
 =?us-ascii?q?MMOz/dWXlJfDtfqyV3m7WZ1QcinrzIWAuzW95WBxBR2/nvazmsDoEAQg0C/70c?=
 =?us-ascii?q?VqWjvMrBrmfobr0KG6O/p9fkZ0HF/899Z6GoZmn4ownp4Q3mIWhpeU/XoBimrz?=
 =?us-ascii?q?NdRb2aTjbHsCXzILwtjV4BT7101nNH6G24X5VnCFyMt7e9a6en8W2j46781SC6?=
 =?us-ascii?q?eb9r1EkTF1olqltw3RZ/d9kywZyfsv7n4anu4ItBAsziWbHrAdA01YMTbwmBSP?=
 =?us-ascii?q?6tC0tL9Xa3q3cbisyEp+msisDLSDogFfQnn1YJkjEjFr7sVjLl3Mymb85Z/+eN?=
 =?us-ascii?q?nfdt8TshyUkxHdj+laMp4xl/wKhTZ5NmL5p3Eq1+k7jRl215GgoIeHM3lt/L6+?=
 =?us-ascii?q?AhNAKj31YMYT9ivsjKlEmMaWwpuvHo5gGjgQWJvoTPSoEC8dtPj9NgaOFiE8pW?=
 =?us-ascii?q?mfGbbFAQCf70JmpWrVE5+3L3GXOGUZzdJ6SRaGPkNfhwQUXCggkp49CwCn38jh?=
 =?us-ascii?q?cEZ/5jAM6V/0sBpMyuR0NxbhVmfTvhunajAxSJKHNhpZ8hlC51vJMcyZ9u9zHT?=
 =?us-ascii?q?tX/pi/owyWMGCbex5EDWIUWkyHGlDjOKOh5cLb/uicB+q+KebOYLqUpexfUfeI?=
 =?us-ascii?q?2Yyg0o988zmQMcWPO2FoD+cn1UpbQXB5B8PZli0PSiwQiiLNdtObqw26+iFttc?=
 =?us-ascii?q?C/9/LrWA306IuLCrtSN8hv+h+sjaeCMe6QmDh2KTJC2pwQwn/IzaAV3EQOhCF2?=
 =?us-ascii?q?azmtDbMAuDbNTK3Om69XDB0bayJpOMtL9aI82QZNNtDBitPozb51lfo1C1ZDVV?=
 =?us-ascii?q?z8lcClf80KI2ehNFzZAEaHLqiJJTrOw8vve6OzVaVQjPlItx23oTuUCVLjMS+Z?=
 =?us-ascii?q?lzb3VxGjK+VMjCCAMRxauYG9dAttCGf5QNLnbB27LMF4jTkszbIogXPKMHYWMS?=
 =?us-ascii?q?JgfENVsr2Q8SRYj+1jG2xA63ppN/WLlzyF4OnYNJkWt+BmAiB1l+Jc/XQ7xKFZ?=
 =?us-ascii?q?7CBCRPxphiTSqsRirE2hkumK0jBnSgZBqi5XhIKXukVvIaXY+YNGWXbB/RIN63?=
 =?us-ascii?q?2fChUKp9R/DN3vtLtdytzOlKL1NTdD/MjY/coaB8jINs2HNGAtPgbuGD7RX0M5?=
 =?us-ascii?q?SmuRMmvegQR4jeuK9mzd+oI9oJnq3p8TUKdbRXQ8DPZcAUNgSo8sOpByCxEjl7?=
 =?us-ascii?q?eHjMcOrVG3qRTLQ8MS6pLAUPuOAfzpbj2QiLReYB0gwa7xMokScIb83hoxORFB?=
 =?us-ascii?q?gI3WFh+IDph2qSp7Y1px+R0V/Q=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AEAACs9hBch0O0hNFjGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUQYBAQELAYNrJwqMCowSgg0Ulz+BcywTAYc7IjQJDQEDAQEBAQEBAgE?=
 =?us-ascii?q?TAQEBCA0JCCkvgjYkAYJhAQEBAQIBAQI3PwUBCQEBChgJJQMMSAYOBQWDHIF6C?=
 =?us-ascii?q?AWnEoowjDyBVz+BEYMSilwCiTkLgWqEXJB9BwKCIgSPJAsYkUSaf4IOMxojUIJ?=
 =?us-ascii?q?sgicXjh0/AQExgQQBAQEOi3qBHwEB?=
X-IPAS-Result: =?us-ascii?q?A0AEAACs9hBch0O0hNFjGwEBAQEDAQEBBwMBAQGBUQYBAQE?=
 =?us-ascii?q?LAYNrJwqMCowSgg0Ulz+BcywTAYc7IjQJDQEDAQEBAQEBAgETAQEBCA0JCCkvg?=
 =?us-ascii?q?jYkAYJhAQEBAQIBAQI3PwUBCQEBChgJJQMMSAYOBQWDHIF6CAWnEoowjDyBVz+?=
 =?us-ascii?q?BEYMSilwCiTkLgWqEXJB9BwKCIgSPJAsYkUSaf4IOMxojUIJsgicXjh0/AQExg?=
 =?us-ascii?q?QQBAQEOi3qBHwEB?=
X-IronPort-AV: E=Sophos;i="5.56,344,1539673200"; 
   d="scan'208";a="56023453"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 12 Dec 2018 03:57:08 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727355AbeLLLyF (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 12 Dec 2018 06:54:05 -0500
Received: from szxga05-in.huawei.com ([45.249.212.191]:15677 "EHLO huawei.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726913AbeLLLyF (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 12 Dec 2018 06:54:05 -0500
Received: from DGGEMS413-HUB.china.huawei.com (unknown [172.30.72.60])
        by Forcepoint Email with ESMTP id 6848BBCBA78B6;
        Wed, 12 Dec 2018 19:54:01 +0800 (CST)
Received: from localhost (10.202.226.46) by DGGEMS413-HUB.china.huawei.com
 (10.3.19.213) with Microsoft SMTP Server id 14.3.408.0; Wed, 12 Dec 2018
 19:53:57 +0800
Date: Wed, 12 Dec 2018 11:53:47 +0000
From: Jonathan Cameron <jonathan.cameron@huawei.com>
To: Robin Murphy <robin.murphy@arm.com>
CC: <will.deacon@arm.com>, <catalin.marinas@arm.com>,
        <linux-arm-kernel@lists.infradead.org>,
        <linux-kernel@vger.kernel.org>, <cyrilc@xilinx.com>,
        <james.morse@arm.com>, <anshuman.khandual@arm.com>,
        <linux-mm@kvack.org>
Subject: Re: [PATCH v2] arm64: Add memory hotplug support
Message-ID: <20181212115347.000071f6@huawei.com>
In-Reply-To: <20181212114236.000030c9@huawei.com>
References: <331db1485b4c8c3466217e16a1e1f05618e9bae8.1544553902.git.robin.murphy@arm.com>
        <20181212114236.000030c9@huawei.com>
Organization: Huawei
X-Mailer: Claws Mail 3.16.0 (GTK+ 2.24.32; i686-w64-mingw32)
MIME-Version: 1.0
Content-Type: text/plain; charset="US-ASCII"
Content-Transfer-Encoding: 7bit
X-Originating-IP: [10.202.226.46]
X-CFilter-Loop: Reflected
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Wed, 12 Dec 2018 11:42:36 +0000
Jonathan Cameron <jonathan.cameron@huawei.com> wrote:

> On Tue, 11 Dec 2018 18:48:48 +0000
> Robin Murphy <robin.murphy@arm.com> wrote:
> 
> > Wire up the basic support for hot-adding memory. Since memory hotplug
> > is fairly tightly coupled to sparsemem, we tweak pfn_valid() to also
> > cross-check the presence of a section in the manner of the generic
> > implementation, before falling back to memblock to check for no-map
> > regions within a present section as before. By having arch_add_memory(()
> > create the linear mapping first, this then makes everything work in the
> > way that __add_section() expects.
> > 
> > We expect hotplug to be ACPI-driven, so the swapper_pg_dir updates
> > should be safe from races by virtue of the global device hotplug lock.
> > 
> > Signed-off-by: Robin Murphy <robin.murphy@arm.com>
> Hi Robin,
> 
> What tree is this against?  
> 
> rodata_full doesn't seem be exist for me on 4.20-rc6. 
Ah found it in the arm64 core tree.  I'll pull that in and test.

> 
> With v1 I did the 'new node' test and it looked good except for an
> old cgroups warning that has always been there (and has been on my list
> to track down for a long time).
> 
> Jonathan
> > ---
> > 
> > v2: Handle page-mappings-only cases appropriately
> > 
> >  arch/arm64/Kconfig   |  3 +++
> >  arch/arm64/mm/init.c |  8 ++++++++
> >  arch/arm64/mm/mmu.c  | 17 +++++++++++++++++
> >  arch/arm64/mm/numa.c | 10 ++++++++++
> >  4 files changed, 38 insertions(+)
> > 
> > diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig
> > index 4dbef530cf58..be423fda5cec 100644
> > --- a/arch/arm64/Kconfig
> > +++ b/arch/arm64/Kconfig
> > @@ -261,6 +261,9 @@ config ZONE_DMA32
> >  config HAVE_GENERIC_GUP
> >  	def_bool y
> >  
> > +config ARCH_ENABLE_MEMORY_HOTPLUG
> > +	def_bool y
> > +
> >  config SMP
> >  	def_bool y
> >  
> > diff --git a/arch/arm64/mm/init.c b/arch/arm64/mm/init.c
> > index 6cde00554e9b..4bfe0fc9edac 100644
> > --- a/arch/arm64/mm/init.c
> > +++ b/arch/arm64/mm/init.c
> > @@ -291,6 +291,14 @@ int pfn_valid(unsigned long pfn)
> >  
> >  	if ((addr >> PAGE_SHIFT) != pfn)
> >  		return 0;
> > +
> > +#ifdef CONFIG_SPARSEMEM
> > +	if (pfn_to_section_nr(pfn) >= NR_MEM_SECTIONS)
> > +		return 0;
> > +
> > +	if (!valid_section(__nr_to_section(pfn_to_section_nr(pfn))))
> > +		return 0;
> > +#endif
> >  	return memblock_is_map_memory(addr);
> >  }
> >  EXPORT_SYMBOL(pfn_valid);
> > diff --git a/arch/arm64/mm/mmu.c b/arch/arm64/mm/mmu.c
> > index 674c409a8ce4..da513a1facf4 100644
> > --- a/arch/arm64/mm/mmu.c
> > +++ b/arch/arm64/mm/mmu.c
> > @@ -1046,3 +1046,20 @@ int pud_free_pmd_page(pud_t *pudp, unsigned long addr)
> >  	pmd_free(NULL, table);
> >  	return 1;
> >  }
> > +
> > +#ifdef CONFIG_MEMORY_HOTPLUG
> > +int arch_add_memory(int nid, u64 start, u64 size, struct vmem_altmap *altmap,
> > +		    bool want_memblock)
> > +{
> > +	int flags = 0;
> > +
> > +	if (rodata_full || debug_pagealloc_enabled())
> > +		flags = NO_BLOCK_MAPPINGS | NO_CONT_MAPPINGS;
> > +
> > +	__create_pgd_mapping(swapper_pg_dir, start, __phys_to_virt(start),
> > +			     size, PAGE_KERNEL, pgd_pgtable_alloc, flags);
> > +
> > +	return __add_pages(nid, start >> PAGE_SHIFT, size >> PAGE_SHIFT,
> > +			   altmap, want_memblock);
> > +}
> > +#endif
> > diff --git a/arch/arm64/mm/numa.c b/arch/arm64/mm/numa.c
> > index 27a31efd9e8e..ae34e3a1cef1 100644
> > --- a/arch/arm64/mm/numa.c
> > +++ b/arch/arm64/mm/numa.c
> > @@ -466,3 +466,13 @@ void __init arm64_numa_init(void)
> >  
> >  	numa_init(dummy_numa_init);
> >  }
> > +
> > +/*
> > + * We hope that we will be hotplugging memory on nodes we already know about,
> > + * such that acpi_get_node() succeeds and we never fall back to this...
> > + */
> > +int memory_add_physaddr_to_nid(u64 addr)
> > +{
> > +	pr_warn("Unknown node for memory at 0x%llx, assuming node 0\n", addr);
> > +	return 0;
> > +}
> 


