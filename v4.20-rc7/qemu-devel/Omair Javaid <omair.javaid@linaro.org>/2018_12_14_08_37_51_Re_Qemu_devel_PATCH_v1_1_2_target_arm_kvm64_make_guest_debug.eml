Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  14 Dec 2018 20:26:20 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 5E7995803DC
	for <like.xu@linux.intel.com>; Fri, 14 Dec 2018 01:42:13 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 14 Dec 2018 01:42:13 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AEYVZURMtdqg9uS5cf7Yl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0I/XyrarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZUclRWS5ODIOy?=
 =?us-ascii?q?YYUMEeQOIelWoZTlp1YMrxWzChSgCe3zxjBWnX/7xrE60/07HA3awAAsA9ADvX?=
 =?us-ascii?q?LJp9v1LqcSVuW1wbHRwzXGdfxW2C3945XMfB87v/GDR7NwftfMwkQoEAPFi0+f?=
 =?us-ascii?q?qY3/Pz+P1OQCqXab4PBhVe2ykGMnrwBxoj61ycc2jYnFnIUVykrL9Shgxos+ON?=
 =?us-ascii?q?62SFZjbNK6DJddtDuWO5ZrTs4hWW1kpig3x70ctZKmfiUG0Ioryh/DZ/GFdoWI?=
 =?us-ascii?q?7BHuW/2NLTp9i39oe7Oyihm3/ES+1uHxU8y53VRFoydLlNTHq2oD2AbJ6sedT/?=
 =?us-ascii?q?tw5keh1iiL1wDU8uxEJUE0lbHHK5462LIwmZwTsVnZEi/xgkX2g7eadkQi+ue2?=
 =?us-ascii?q?9+TqeqvqqoOfOoNulw3yL6cjltahDek2MgUCRXWX9Oak2L3m50L5QbFKjvMskq?=
 =?us-ascii?q?netZDXPd0bqbC8Aw9Iy4os9giwDym439QchHUIN1VFeA+Bj4f1JV7OO/f0DfO+?=
 =?us-ascii?q?g1Svjjhn3f/HPqD5D5XJL3jDlqrhfLln505dzgoz0c5Q55ZOBr4dJ/LzX1T8tN?=
 =?us-ascii?q?rfDh8/PAy0xfvnBM961oMEVmKDGrWZP7/KsV+U+uIvJPGBZIsUuDb+Nfcp/fHv?=
 =?us-ascii?q?jWIilF8ZfKmp24YXaX+iEvRnJUWZfWTjgtMbHWgWuQo+Sb+itVuZTDQGZ2quR7?=
 =?us-ascii?q?luoXY/CZm6FsHFQYaihqHH2z20WZhfZ2RDA1bLFm/0doKCQLAVZSePZ8NsjDEA?=
 =?us-ascii?q?BoWnUJIrgBSntQvmzOh+I+/JvyEVq5/nkcJ4/vDejg0a8ztyAMKAlWaXQDZvg2?=
 =?us-ascii?q?kKSjQqib15ulF30VyZ0KJ10MBfQPVX6uMBeAo8Mx/Rh7hzD93iHAjMeNGERX6i?=
 =?us-ascii?q?Q9OvGzZ3Scg+lYwgeUF4TvKnhxHZlwijHbYUm/TfA5k987ia3XHvLsdx43LH0q?=
 =?us-ascii?q?A7iB8hWMQZZj7uvbJ26wWGX92BqE6ejav/MP1EhCM=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0DUAgDweRNchxHrdtBjg0iCTxODfIh4i?=
 =?us-ascii?q?zKCDXyYTBQYFIFLgnWDByI4EgEDAQEBAQEBAgETAQEBCgsJCBsOIwyCNgUCAxo?=
 =?us-ascii?q?BBoJbAQEBAQIBAQIgBBkBAQQKKQECAwECBgEBCgsHBgICIgQCAgMBHhIBBQEOD?=
 =?us-ascii?q?gYTBQODGYF5CAEEmlk8ih9wfDOCdgEBBYcrCBJ5izOBVz+BEYJdNYUBgwSCV5B?=
 =?us-ascii?q?Lj3lWBwKCJASPMhiRTZlJDyGBPIF3MxowdAaCNYJQiEyFRjoxgQeKCSosgXcBA?=
 =?us-ascii?q?Q?=
X-IPAS-Result: =?us-ascii?q?A0DUAgDweRNchxHrdtBjg0iCTxODfIh4izKCDXyYTBQYFIF?=
 =?us-ascii?q?LgnWDByI4EgEDAQEBAQEBAgETAQEBCgsJCBsOIwyCNgUCAxoBBoJbAQEBAQIBA?=
 =?us-ascii?q?QIgBBkBAQQKKQECAwECBgEBCgsHBgICIgQCAgMBHhIBBQEODgYTBQODGYF5CAE?=
 =?us-ascii?q?Emlk8ih9wfDOCdgEBBYcrCBJ5izOBVz+BEYJdNYUBgwSCV5BLj3lWBwKCJASPM?=
 =?us-ascii?q?hiRTZlJDyGBPIF3MxowdAaCNYJQiEyFRjoxgQeKCSosgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,352,1539673200"; 
   d="scan'208";a="55893771"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 14 Dec 2018 01:42:12 -0800
Received: from localhost ([::1]:60490 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gXjz1-0003V8-Lo
	for like.xu@linux.intel.com; Fri, 14 Dec 2018 04:42:11 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:46098)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <omair.javaid@linaro.org>) id 1gXizE-0004O8-SE
	for qemu-devel@nongnu.org; Fri, 14 Dec 2018 03:38:24 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <omair.javaid@linaro.org>) id 1gXizD-0003N4-P0
	for qemu-devel@nongnu.org; Fri, 14 Dec 2018 03:38:20 -0500
Received: from mail-qk1-x743.google.com ([2607:f8b0:4864:20::743]:46931)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <omair.javaid@linaro.org>)
	id 1gXizD-0003J0-E9
	for qemu-devel@nongnu.org; Fri, 14 Dec 2018 03:38:19 -0500
Received: by mail-qk1-x743.google.com with SMTP id q1so2767880qkf.13
	for <qemu-devel@nongnu.org>; Fri, 14 Dec 2018 00:38:18 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linaro.org; s=google;
	h=mime-version:references:in-reply-to:from:date:message-id:subject:to
	:cc:content-transfer-encoding;
	bh=hBDWlxEM4yb82ps77Mp79E5EWOKIqH1F2/vQIxi/QnY=;
	b=fLjF8PNVQdEkCo9Cd4wHBYsy2YkEwbyZLIXi/FfotUGzIMVpuEGF66fYIxkXKqCCDK
	KJqsuahX5A5lqKwqiny3t3M0NjlPo5IeC8gOfwDrDJKpGwNn1iiSIXoQxzz5vVLQNIOh
	i4UNMQXSdODPsiPFPe+X1erIP/jFujMhS9Kao=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:mime-version:references:in-reply-to:from:date
	:message-id:subject:to:cc:content-transfer-encoding;
	bh=hBDWlxEM4yb82ps77Mp79E5EWOKIqH1F2/vQIxi/QnY=;
	b=t5GfvBVDM2aI6vEzxKCtBdTg/nFjf37WX11/3dlT4vi6PHVWaYsG33Jg4haXffPyRs
	D6WVvlJ9/SBxBRDR0c5fg4BblcQn93YREByCbY1+wWqKQrm2qtHIUbr0BisIJoneFy3K
	rbYq8y5CE0XMYfBB8OhcUKP9quFBNEytUB3cWeezlRpXG2yhbiHPzV1aNrVcenPmVRY1
	rfGvxXlLtP0R89WvZaIq7HgqSsQTEJtVW3+HadlTDu4ulZuXVJaxhuRgp9PGaMkSuoz0
	BzDeojb0uqasI5LdVNYUZsAH9Xl8mEfGBLM8RSLf7QTt9vcp9+h3Lku4aKxvSUDDWzYE
	1/4g==
X-Gm-Message-State: AA+aEWZ05bokHnmAm7ajaNxFp081Mpod7wHlb5QbXBFvv609tLedelod
	ZRgIZw8Olpqm0j3eLcE6Ej5aBhxn9sx2tHdXS5LxTg==
X-Google-Smtp-Source: AFSGD/XasrWexB06BfnpampyEqLJtCCA4YTFrUXxAeMwCPdAPmTLwkug0D0e0t4qnN5kyIN9g4b55Bm98WmHwHCBP7o=
X-Received: by 2002:a37:455:: with SMTP id 82mr1785460qke.60.1544776697660;
	Fri, 14 Dec 2018 00:38:17 -0800 (PST)
MIME-Version: 1.0
References: <20181213115503.24188-1-alex.bennee@linaro.org>
	<20181213115503.24188-2-alex.bennee@linaro.org>
In-Reply-To: <20181213115503.24188-2-alex.bennee@linaro.org>
From: Omair Javaid <omair.javaid@linaro.org>
Date: Fri, 14 Dec 2018 13:37:51 +0500
Message-ID: <CANW4E-1UmZOGHya4jHxj10O2Ki7MPGMqme7wT0jaCO8Ufrii6g@mail.gmail.com>
To: =?UTF-8?B?QWxleCBCZW5uw6ll?= <alex.bennee@linaro.org>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 2607:f8b0:4864:20::743
X-Mailman-Approved-At: Fri, 14 Dec 2018 04:41:50 -0500
Subject: Re: [Qemu-devel] [PATCH v1 1/2] target/arm: kvm64 make guest debug
 AA32 break point aware
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: mark.rutland@arm.com, Peter Maydell <peter.maydell@linaro.org>,
	qemu-arm@nongnu.org, qemu-devel@nongnu.org, ard.biesheuvel@linaro.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Thu, 13 Dec 2018 at 16:55, Alex Benn=C3=A9e <alex.bennee@linaro.org> wro=
te:
>
> When supported by the hardware we can run AA32 guests or even AA64 EL1
> code with AA32 EL0 mode code. Inserting a AA64 break point into AA32
> code tends to break things. This is especially acute with gdb as it
> inserts temporary breakpoints when stepping through code.

Hi Alex,

Are you expecting GDB to switch targets (from AArch64 to AArch32 or
vice versa) when there is mode switch for example a AArch64 binary
calling a AArch32 library function.
I think GDB will behave nicely when doing 1 type of debug but seamless
switching between modes is still tricky for GDB. There has been some
work in last few months on this but not sure where it has reached.

>
> The heuristic of checking the current mode works but it's not perfect.
> A user could be placing a break point in code after a mode switch and
> that will still fail. However there doesn't seem to be a way to force
> a hbreak by default. According to "set breakpoint auto-hw on":

On mode switch we ll have to switch target architecture on GDB side
and GDB may not be able to do that seamlessly. Have you tried
debugging such an example?

>
>   This is the default behavior. When GDB sets a breakpoint, it will try
>   to use the target memory map to decide if software or hardware
>   breakpoint must be used.
>
> Reported-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
> Signed-off-by: Alex Benn=C3=A9e <alex.bennee@linaro.org>
> Cc: Omair Javaid <omair.javaid@linaro.org>
> ---
>  target/arm/kvm64.c | 13 ++++++++++---
>  1 file changed, 10 insertions(+), 3 deletions(-)
>
> diff --git a/target/arm/kvm64.c b/target/arm/kvm64.c
> index 0a502091e7..dd564a59b7 100644
> --- a/target/arm/kvm64.c
> +++ b/target/arm/kvm64.c
> @@ -989,14 +989,20 @@ int kvm_arch_get_registers(CPUState *cs)
>      return ret;
>  }
>
> -/* C6.6.29 BRK instruction */
> +/* BRK (A64) and BKPT (A32) instructions */
>  static const uint32_t brk_insn =3D 0xd4200000;
> +static const uint32_t bkpt_insn =3D 0xe1200070;
>
>  int kvm_arch_insert_sw_breakpoint(CPUState *cs, struct kvm_sw_breakpoint=
 *bp)
>  {
> +    CPUARMState *env =3D &ARM_CPU(cs)->env;
> +    int el =3D arm_current_el(env);
> +    bool is_aa64 =3D arm_el_is_aa64(env, el);
> +    const uint32_t *bpi =3D is_aa64 ? &brk_insn : &bkpt_insn;
> +
>      if (have_guest_debug) {
>          if (cpu_memory_rw_debug(cs, bp->pc, (uint8_t *)&bp->saved_insn, =
4, 0) ||
> -            cpu_memory_rw_debug(cs, bp->pc, (uint8_t *)&brk_insn, 4, 1))=
 {
> +            cpu_memory_rw_debug(cs, bp->pc, (uint8_t *)bpi, 4, 1)) {
>              return -EINVAL;
>          }
>          return 0;
> @@ -1012,7 +1018,7 @@ int kvm_arch_remove_sw_breakpoint(CPUState *cs, str=
uct kvm_sw_breakpoint *bp)
>
>      if (have_guest_debug) {
>          if (cpu_memory_rw_debug(cs, bp->pc, (uint8_t *)&brk, 4, 0) ||
> -            brk !=3D brk_insn ||
> +            !(brk =3D=3D brk_insn || brk =3D=3D bkpt_insn) ||
>              cpu_memory_rw_debug(cs, bp->pc, (uint8_t *)&bp->saved_insn, =
4, 1)) {
>              return -EINVAL;
>          }
> @@ -1055,6 +1061,7 @@ bool kvm_arm_handle_debug(CPUState *cs, struct kvm_=
debug_exit_arch *debug_exit)
>              return false;
>          }
>          break;
> +    case EC_AA32_BKPT:
>      case EC_AA64_BKPT:
>          if (kvm_find_sw_breakpoint(cs, env->pc)) {
>              return true;
> --
> 2.17.1
>

