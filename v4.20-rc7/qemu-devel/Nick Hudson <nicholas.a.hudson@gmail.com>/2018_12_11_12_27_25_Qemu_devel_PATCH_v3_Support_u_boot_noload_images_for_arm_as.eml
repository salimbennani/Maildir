Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 12 Dec 2018 08:45:53 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 46EFE580380
	for <like.xu@linux.intel.com>; Tue, 11 Dec 2018 04:27:49 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 11 Dec 2018 04:27:49 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AHHFimB3Xzkeb/ieksmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?sesWLv3xwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJBUMhPVCJPDI2z?=
 =?us-ascii?q?YIQTAOQOIOhYt4vwqVkBoBejCwSgGP3gyiRTi3/q3qA3yfgtHR3I0QEiGd8FrX?=
 =?us-ascii?q?TarM/yNKcXSe271KjIwinAb/hL2zn99ZXHcgsmofGKQLl9dszRyUgzGAPFiVWQ?=
 =?us-ascii?q?rZbqPyiP2usXqWSb7/dgWv+0i24grQF8uTevxsI2hYnIgoIZ0EzL9SJ8wIssI9?=
 =?us-ascii?q?CzVU11Yca8HZdOqy2XNJF6Tt4/T2xroio21LMLtJ6hcCQXypkr3wDTZOabf4SW?=
 =?us-ascii?q?5x/sSOScLip9iX9meb+zmwi9/E2gx+DySsW4zVNHoTZBn9TIt30A0h7e5tWbRf?=
 =?us-ascii?q?dj+0qs1i2A2x3J5exBPEw5lqjWJ4Inz7UtjJQcq17DETXzmEjujK+ZaEEk+u+w?=
 =?us-ascii?q?5uTjY7XmvYOcN5RuhgHxNKQuh9azAeMiMggBR2Sb+OK826P//UDhXrlGkv47nr?=
 =?us-ascii?q?PEvJzHJskXvLC1DgFV34o59hqyDS+q0NECknkGKFJFdgiHj4/sO1zWOfD3E/K/?=
 =?us-ascii?q?g0m1nDh22f/GIKPuApHUInfYl7fhYLB95FJCxwooytxf45NUCrIfL/7pVU7xqc?=
 =?us-ascii?q?TVDhs4Mwyy3ubmB89x1oIYWWKTHKCZNLnevkOP5uIqOOSMYogVuDDyK/gj+v7i?=
 =?us-ascii?q?l3g5mUUSfaWxx5sYdGi4Huh6I0WeeXfshtYBEWQUsQYkQ+3qlUaPUTpSZ3a0Qq?=
 =?us-ascii?q?I96Ss3CIOgDYffWI+thKaN0zu8Hp1TNSh7DEuRGyLoa5mcQKVLLyaTOdN61DoD?=
 =?us-ascii?q?U7enVskmzx7psQb7z79uKK3T4jEZspT4k8F44vCWmRws+DgnMsKGzmvYSmh1mn?=
 =?us-ascii?q?8PFSY72b06rUFjx1PGy6VhnvFDCfRV4PVGVBp8MoTTmPdnAdL/UR6UY9GSVVy9?=
 =?us-ascii?q?Sc+nCzxictVk+vIrXg5RFsuvihfb0jCxS+sMmrmWQZA57K/Y9372Icl71jDBzq?=
 =?us-ascii?q?Z33Hc8Rc4aE2ytheZf6gTIAIiBx0OYnKatca0HmieL9HqP1m2IlE5dWQ90F67C?=
 =?us-ascii?q?WCZMNQPtsd3l6xaaHPeVArM9P14EkJbaJw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A5AADdrA9cmBHrdtBlHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGBMIJig3uIGV+LMSmBNwiKN41AgXYPAQEYFId5IjQJDQEDAQEBAQEBAgE?=
 =?us-ascii?q?TAQEBAQEICwsGGw4jDII2BQIDGgEGgl8EAiAECwEFCAEFCgwdAQIBAgECBgIFA?=
 =?us-ascii?q?w0PAh8DBAICAwEfEQEFASINBgIBAQGDHIFpAQMVAQSJSZAHPIsNfBYFAReCdwW?=
 =?us-ascii?q?CRIF6ChknDV2BNwIGEnmKFIEceoEcgREnDIIxiDOCNSIClQ+LbAcCkUsGGIlmh?=
 =?us-ascii?q?1qZDAIEAgQFAgUPIYElgg4zGiOBAYI7ghsMFxKDOIpTcoEHIYhJgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0A5AADdrA9cmBHrdtBlHQEBBQEHBQGBUQgBCwGBMIJig3u?=
 =?us-ascii?q?IGV+LMSmBNwiKN41AgXYPAQEYFId5IjQJDQEDAQEBAQEBAgETAQEBAQEICwsGG?=
 =?us-ascii?q?w4jDII2BQIDGgEGgl8EAiAECwEFCAEFCgwdAQIBAgECBgIFAw0PAh8DBAICAwE?=
 =?us-ascii?q?fEQEFASINBgIBAQGDHIFpAQMVAQSJSZAHPIsNfBYFAReCdwWCRIF6ChknDV2BN?=
 =?us-ascii?q?wIGEnmKFIEceoEcgREnDIIxiDOCNSIClQ+LbAcCkUsGGIlmh1qZDAIEAgQFAgU?=
 =?us-ascii?q?PIYElgg4zGiOBAYI7ghsMFxKDOIpTcoEHIYhJgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,342,1539673200"; 
   d="scan'208";a="55846584"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 11 Dec 2018 04:27:48 -0800
Received: from localhost ([::1]:37755 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gWh8d-0005Dc-Lu
	for like.xu@linux.intel.com; Tue, 11 Dec 2018 07:27:47 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:59114)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <nicholas.a.hudson@gmail.com>) id 1gWh8R-0005CW-BN
	for qemu-devel@nongnu.org; Tue, 11 Dec 2018 07:27:36 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <nicholas.a.hudson@gmail.com>) id 1gWh8P-0005D6-Vb
	for qemu-devel@nongnu.org; Tue, 11 Dec 2018 07:27:35 -0500
Received: from mail-wm1-x341.google.com ([2a00:1450:4864:20::341]:35821)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <nicholas.a.hudson@gmail.com>)
	id 1gWh8L-00055j-M0; Tue, 11 Dec 2018 07:27:30 -0500
Received: by mail-wm1-x341.google.com with SMTP id c126so2055980wmh.0;
	Tue, 11 Dec 2018 04:27:28 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
	h=from:subject:to:cc:message-id:date:user-agent:mime-version
	:content-transfer-encoding:content-language;
	bh=d3J125H17xpWctfhnZswfebtNELQOmfbKciDFJ9YTk4=;
	b=th9vsMIvLKIzgfQuCU1ZejoXeJioROWwTgjKG3uRESvE5xIwmijA7cc1EBXc/ZO4Xg
	Io9MgmiTuXE7WBGZ99vH18OImauOLFiOwuNj/uqyfX7RZvVN8ElUTsWGwVhXAjU5kW9x
	+ygoDo2xTcF+nsFePuIRoMpe2FB+fxWcUAMhwL8/Tx21QzkiEikt9qXqp3nDjGpY4Kkw
	9WCAfYtnnAdsFZDnsKA8AiJAi9kaJwaa/fIdnfMczmqUq15Djzibe/Uc/VErUQKIdwOY
	XC0OKVBIyys3wOxvRQ0YHffKbtGwLpINvF9j3cXACcwwqBv/3AJnO37gHm3of3N/ifA5
	yGEQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:subject:to:cc:message-id:date:user-agent
	:mime-version:content-transfer-encoding:content-language;
	bh=d3J125H17xpWctfhnZswfebtNELQOmfbKciDFJ9YTk4=;
	b=IdVzNy/PcVVuq7nRt5rpqPxU8hAMHaorPhIxZbBV1ES2F99zkNctdQ49ncwfaWconT
	pm98aelcyTLCja4oSeF1eJcO/C6WSPw3qaCD/Q+745poKOFPjjtMzZJ9yXDu2X02Ffzw
	RzVbuUXPccKKl3REKgE/wfEWG9efRImdDRHB6qIO4J4o6ji3rxJoDhv5uFTzCYdrmsz3
	X+yTYrotm6jlWO3eCmji/3bK2coH/3bTwgo8Zsf5+6CO/itRqeKwIceatcvRmWmVH7Yv
	Zi3FgIqjEuNqOExRbMj0v+KHRqXpJ/xvnSM0P302IqCtfsJ/DX3Ec5ooApIV8rk0ZgEy
	r7yQ==
X-Gm-Message-State: AA+aEWaxaMXcTGaGaFEU+ZvjgXK9jyxHMEUBdQuxQMOsbtQi4bUAxC3T
	MeCkw96A/1LZpOIBtZVn9Qw=
X-Google-Smtp-Source: AFSGD/VGzh7l7zqM/aAFYARbpqPeaN9Tla/HThH8KVD/z0EhY4BYfWr5K0RQL42JtH98JOtZSiacbw==
X-Received: by 2002:a1c:384:: with SMTP id 126mr2179339wmd.26.1544531247033;
	Tue, 11 Dec 2018 04:27:27 -0800 (PST)
Received: from ?IPv6:2a02:c7d:860e:5301:c996:71c2:4b1a:1870?
	([2a02:c7d:860e:5301:c996:71c2:4b1a:1870])
	by smtp.gmail.com with ESMTPSA id
	v132sm1651130wme.20.2018.12.11.04.27.25
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Tue, 11 Dec 2018 04:27:26 -0800 (PST)
From: Nick Hudson <nicholas.a.hudson@gmail.com>
X-Google-Original-From: Nick Hudson <skrll@netbsd.org>
To: QEMU Developers <qemu-devel@nongnu.org>
Message-ID: <975b9131-9937-cfea-3b5d-ef36d0c2b761@gmail.com>
Date: Tue, 11 Dec 2018 12:27:25 +0000
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
	Thunderbird/60.2.1
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 8bit
Content-Language: en-US
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 2a00:1450:4864:20::341
Subject: [Qemu-devel] [PATCH v3] Support u-boot noload images for arm as
 used by, NetBSD/evbarm GENERIC kernel.
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Peter Maydell <peter.maydell@linaro.org>, qemu-arm <qemu-arm@nongnu.org>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>


noload kernels are loaded with the u-boot image header and as a result
the header size needs adding to the entry point.  Fake up a hdr so the
kernel image is loaded at the right address and the entry point is
adjusted appropriately.

The bootloader fits in the space that the uboot header would have occupied.

Clarify the load_uimage API to state the passing of a load address when an
image doesn't specify one, or when loading a ramdisk is expected.

Adjust callers of load_uimage, etc.

Signed-off-by: Nick Hudson<skrll@netbsd.org>

---
  hw/arm/boot.c          |  8 +++++---
  hw/core/loader.c       | 19 ++++++++++++++++---
  hw/core/uboot_image.h  |  1 +
  hw/microblaze/boot.c   |  2 +-
  hw/nios2/boot.c        |  2 +-
  hw/ppc/e500.c          |  1 +
  hw/ppc/ppc440_bamboo.c |  2 +-
  hw/ppc/sam460ex.c      |  2 +-
  include/hw/loader.h    |  7 ++++++-
  9 files changed, 33 insertions(+), 11 deletions(-)

diff --git a/hw/arm/boot.c b/hw/arm/boot.c
index 586baa9b64..450267566a 100644
--- a/hw/arm/boot.c
+++ b/hw/arm/boot.c
@@ -30,8 +30,9 @@
   * Documentation/arm/Booting and Documentation/arm64/booting.txt
   * They have different preferred image load offsets from system RAM base.
   */
-#define KERNEL_ARGS_ADDR 0x100
-#define KERNEL_LOAD_ADDR 0x00010000
+#define KERNEL_ARGS_ADDR   0x100
+#define KERNEL_NOLOAD_ADDR 0x00000000
+#define KERNEL_LOAD_ADDR   0x00010000
  #define KERNEL64_LOAD_ADDR 0x00080000

  #define ARM64_TEXT_OFFSET_OFFSET    8
@@ -1078,7 +1079,8 @@ void arm_load_kernel(ARMCPU *cpu, struct 
arm_boot_info *info)
      }
      entry = elf_entry;
      if (kernel_size < 0) {
-        kernel_size = load_uimage_as(info->kernel_filename, &entry, NULL,
+        uint64_t loadaddr = info->loader_start + KERNEL_NOLOAD_ADDR;
+        kernel_size = load_uimage_as(info->kernel_filename, &entry, 
&loadaddr,
                                       &is_linux, NULL, NULL, as);
      }
      if (arm_feature(&cpu->env, ARM_FEATURE_AARCH64) && kernel_size < 0) {
diff --git a/hw/core/loader.c b/hw/core/loader.c
index aa0b3fc867..7362197162 100644
--- a/hw/core/loader.c
+++ b/hw/core/loader.c
@@ -638,13 +638,26 @@ static int load_uboot_image(const char *filename, 
hwaddr *ep, hwaddr *loadaddr,
          goto out;

      if (hdr->ih_type != image_type) {
-        fprintf(stderr, "Wrong image type %d, expected %d\n", hdr->ih_type,
-                image_type);
-        goto out;
+        if (image_type != IH_TYPE_KERNEL &&
+            hdr->ih_type != IH_TYPE_KERNEL_NOLOAD) {
+            fprintf(stderr, "Wrong image type %d, expected %d\n", 
hdr->ih_type,
+                    image_type);
+            goto out;
+        }
      }

      /* TODO: Implement other image types.  */
      switch (hdr->ih_type) {
+    case IH_TYPE_KERNEL_NOLOAD:
+        if (!loadaddr || *loadaddr == LOAD_UIMAGE_LOADADDR_INVALID) {
+            fprintf(stderr, "this image format (kernel_noload) cannot be "
+                    "loaded on this machine type");
+            goto out;
+        }
+
+        hdr->ih_load = *loadaddr + sizeof(*hdr);
+        hdr->ih_ep += hdr->ih_load;
+        /* fall through */
      case IH_TYPE_KERNEL:
          address = hdr->ih_load;
          if (translate_fn) {
diff --git a/hw/core/uboot_image.h b/hw/core/uboot_image.h
index 34c11a70a6..608022de6e 100644
--- a/hw/core/uboot_image.h
+++ b/hw/core/uboot_image.h
@@ -124,6 +124,7 @@
  #define IH_TYPE_SCRIPT        6    /* Script file     */
  #define IH_TYPE_FILESYSTEM    7    /* Filesystem Image (any type)    */
  #define IH_TYPE_FLATDT        8    /* Binary Flat Device Tree Blob    */
+#define IH_TYPE_KERNEL_NOLOAD  14    /* OS Kernel Image (noload)    */

  /*
   * Compression Types
diff --git a/hw/microblaze/boot.c b/hw/microblaze/boot.c
index 35bfeda7aa..489ab839b7 100644
--- a/hw/microblaze/boot.c
+++ b/hw/microblaze/boot.c
@@ -156,7 +156,7 @@ void microblaze_load_kernel(MicroBlazeCPU *cpu, 
hwaddr ddr_base,

          /* If it wasn't an ELF image, try an u-boot image.  */
          if (kernel_size < 0) {
-            hwaddr uentry, loadaddr;
+            hwaddr uentry, loadaddr = LOAD_UIMAGE_LOADADDR_INVALID;

              kernel_size = load_uimage(kernel_filename, &uentry, 
&loadaddr, 0,
                                        NULL, NULL);
diff --git a/hw/nios2/boot.c b/hw/nios2/boot.c
index 4bb5b601d3..ed5cb28e94 100644
--- a/hw/nios2/boot.c
+++ b/hw/nios2/boot.c
@@ -161,7 +161,7 @@ void nios2_load_kernel(Nios2CPU *cpu, hwaddr ddr_base,

          /* If it wasn't an ELF image, try an u-boot image. */
          if (kernel_size < 0) {
-            hwaddr uentry, loadaddr;
+            hwaddr uentry, loadaddr = LOAD_UIMAGE_LOADADDR_INVALID;

              kernel_size = load_uimage(kernel_filename, &uentry, 
&loadaddr, 0,
                                        NULL, NULL);
diff --git a/hw/ppc/e500.c b/hw/ppc/e500.c
index e6747fce28..e275178951 100644
--- a/hw/ppc/e500.c
+++ b/hw/ppc/e500.c
@@ -997,6 +997,7 @@ void ppce500_init(MachineState *machine)
           * Hrm. No ELF image? Try a uImage, maybe someone is giving us an
           * ePAPR compliant kernel
           */
+        loadaddr = LOAD_UIMAGE_LOADADDR_INVALID;
          payload_size = load_uimage(filename, &bios_entry, &loadaddr, NULL,
                                     NULL, NULL);
          if (payload_size < 0) {
diff --git a/hw/ppc/ppc440_bamboo.c b/hw/ppc/ppc440_bamboo.c
index f5720f979e..70428b1865 100644
--- a/hw/ppc/ppc440_bamboo.c
+++ b/hw/ppc/ppc440_bamboo.c
@@ -180,7 +180,7 @@ static void bamboo_init(MachineState *machine)
      CPUPPCState *env;
      uint64_t elf_entry;
      uint64_t elf_lowaddr;
-    hwaddr loadaddr = 0;
+    hwaddr loadaddr = LOAD_UIMAGE_LOADADDR_INVALID;
      target_long initrd_size = 0;
      DeviceState *dev;
      int success;
diff --git a/hw/ppc/sam460ex.c b/hw/ppc/sam460ex.c
index 5aac58f36e..2d6d5c4402 100644
--- a/hw/ppc/sam460ex.c
+++ b/hw/ppc/sam460ex.c
@@ -402,7 +402,7 @@ static void sam460ex_init(MachineState *machine)
      CPUPPCState *env;
      PPC4xxI2CState *i2c[2];
      hwaddr entry = UBOOT_ENTRY;
-    hwaddr loadaddr = 0;
+    hwaddr loadaddr = LOAD_UIMAGE_LOADADDR_INVALID;
      target_long initrd_size = 0;
      DeviceState *dev;
      SysBusDevice *sbdev;
diff --git a/include/hw/loader.h b/include/hw/loader.h
index 67a0af84ac..a7254bc5c4 100644
--- a/include/hw/loader.h
+++ b/include/hw/loader.h
@@ -160,10 +160,15 @@ void load_elf_hdr(const char *filename, void *hdr, 
bool *is64, Error **errp);
  int load_aout(const char *filename, hwaddr addr, int max_sz,
                int bswap_needed, hwaddr target_page_size);

+#define LOAD_UIMAGE_LOADADDR_INVALID (-1)
+
  /** load_uimage_as:
   * @filename: Path of uimage file
   * @ep: Populated with program entry point. Ignored if NULL.
- * @loadaddr: Populated with the load address. Ignored if NULL.
+ * @loadaddr: load address if none specified in the image or when 
loading a ramdisk.
+ *            Populated with the the load address. Ignored if NULL or
+ *            LOAD_UIMAGE_LOADADDR_INVALID (images which do not specify 
a load address
+ *            will not be loadable).
   * @is_linux: Is set to true if the image loaded is Linux. Ignored if 
NULL.
   * @translate_fn: optional function to translate load addresses
   * @translate_opaque: opaque data passed to @translate_fn
-- 
2.17.1



