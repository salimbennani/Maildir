Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 21:19:45 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 006B1580380
	for <like.xu@linux.intel.com>; Wed, 12 Dec 2018 21:33:11 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga001-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 12 Dec 2018 21:33:10 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3Al3UBZBzeqMkkRovXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0uoXKfad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWpPUNhMWSJPAY2y?=
 =?us-ascii?q?aIkAD+QOMulEoIfwvEcOoBikCAWwHu7j1j1Fi3nr1qM6yeQhFgTG0RQuE9wBtX?=
 =?us-ascii?q?TUrdH1NKYVUeuozafE1yjIYu1R2Tfh8ofEfA0qrPaQUrJ3bcre01IiGBjfjlqK?=
 =?us-ascii?q?s4PlJymZ1uMXs2iU9udtU/+khW0/qwxpvDSj2sQhhpPUio4IyV3I7zt1zYg1KN?=
 =?us-ascii?q?GiVUJ2Y8aoHIZOuyyZLYd7QscvT3t2tCom0LEKp4O3cSkMxZ863RDQceaHfJKN?=
 =?us-ascii?q?4h/7VOaePzN4hHV9dbK7hhay6lSgyvbmWsm71lZKszBJkt7WtnACzxDT686HRe?=
 =?us-ascii?q?Vh/kq5xzqDywPe5vtZLUwplqfXMYAtz7Awm5YJrEjOHDf6mEDsg6+XckUk9PKo?=
 =?us-ascii?q?6+PiYrj+v5+TKYp0ihznPqszhMO/H/o3MgwXU2eA/uS8ybvj8lHnT7VRifE2lq?=
 =?us-ascii?q?jZsJPEKsgBqa+5HhdY0oIi6xa5Ejen384UnXgBLFJZZh2Hi5LlNE3JIPD9Fvq/?=
 =?us-ascii?q?hVOskDFkx/DAI73tGJLNLmLMkLv5Z7Zy91ZcyBYvzdBY/59UDrABIPHtVUPru9?=
 =?us-ascii?q?3YEwQ0Mwi1w+bhFdV82ZkSWWOJAq+FLqzStUWE6f4oI+mJfIMVvSzyK/kh5/7g?=
 =?us-ascii?q?l385nlodcLG10psQdHC3BO9rLF6DYXX2mNgBCX0Gvg0kTOzljlCJTCBeZ3KvX6?=
 =?us-ascii?q?In+jE0FpimA5rCRoGsnrOMxCi2TdVrYHtbAAWMDWvwbNfDHPMNcz6JZMlmlDMC?=
 =?us-ascii?q?SP6mUYBm0BivsArzzf1gNvbV/SsD8ovu0cUw6+DNmBVhyDpvEs7I1miMS31zzH?=
 =?us-ascii?q?oFQiJz0K1hrEg40FqazKVjn9ReEtpc4e4PVR01YoXBxe53AMynRwTaY92SQ0yn?=
 =?us-ascii?q?SNj1PTZkV9803poCblhwH/2kiRbM2TfsBKUaxJKRA5lhuI/Z3nzwII5SjT7t07?=
 =?us-ascii?q?UoxRFyScxTPEWsnKd2707UHYGfwBbRrLqjaalJhH2Fz2yE12fb+RgACAM=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A5AAC87RFcmBHrdtBjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUwUBAQsBgTCCYoN8iHiLM5RkhHyBcxQYFIc+IjYHDQEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BAQEICwsGGw4jDII2BQIDGgEGglwDAwECIAQLAQ0BAQQKKQECAwECBgEBJAIiB?=
 =?us-ascii?q?AICAwFTGQWDHIIBAQSmFXB8M4J2AQEFgkOEbgiBC4ZygyOBHBEGgX+MKIJXiRu?=
 =?us-ascii?q?HKpBJBwICkUoLGIFciAs4hycsmROBTQKCBX0IgyeCGwwXg0qFFIVdVIECBSETi?=
 =?us-ascii?q?i+BdwEB?=
X-IPAS-Result: =?us-ascii?q?A0A5AAC87RFcmBHrdtBjHAEBAQQBAQcEAQGBUwUBAQsBgTC?=
 =?us-ascii?q?CYoN8iHiLM5RkhHyBcxQYFIc+IjYHDQEDAQEBAQEBAgETAQEBAQEICwsGGw4jD?=
 =?us-ascii?q?II2BQIDGgEGglwDAwECIAQLAQ0BAQQKKQECAwECBgEBJAIiBAICAwFTGQWDHII?=
 =?us-ascii?q?BAQSmFXB8M4J2AQEFgkOEbgiBC4ZygyOBHBEGgX+MKIJXiRuHKpBJBwICkUoLG?=
 =?us-ascii?q?IFciAs4hycsmROBTQKCBX0IgyeCGwwXg0qFFIVdVIECBSETii+BdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,347,1539673200"; 
   d="scan'208";a="66612451"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mga01b.intel.com with ESMTP/TLS/AES256-SHA; 12 Dec 2018 21:33:09 -0800
Received: from localhost ([::1]:50569 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gXJcS-0005aH-VE
	for like.xu@linux.intel.com; Thu, 13 Dec 2018 00:33:08 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:55782)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <cota@braap.org>) id 1gXJCp-0007oI-8B
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 00:06:41 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <cota@braap.org>) id 1gXJCn-0001rI-0w
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 00:06:38 -0500
Received: from out1-smtp.messagingengine.com ([66.111.4.25]:50433)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <cota@braap.org>) id 1gXJCm-0001Uf-Cg
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 00:06:36 -0500
Received: from compute4.internal (compute4.nyi.internal [10.202.2.44])
	by mailout.nyi.internal (Postfix) with ESMTP id 57CDD2210C;
	Thu, 13 Dec 2018 00:05:44 -0500 (EST)
Received: from mailfrontend2 ([10.202.2.163])
	by compute4.internal (MEProxy); Thu, 13 Dec 2018 00:05:44 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=braap.org; h=
	from:to:cc:subject:date:message-id:in-reply-to:references
	:mime-version:content-type:content-transfer-encoding; s=mesmtp;
	bh=YDaPQ/oyx5mg3l/cGbNMJOnXNR8eSfVUtRr+q8Uw8Co=; b=J151chOFcMiV
	GoP11B8dQbRaaFugPdCLV5biv4GtYnOrXHxIT4cdUPH9LyGeXLjWJOwjm0qpryF+
	sF1QfNaWCQAoCDFGK+W6pkREsjepaJpmMcbPOpxTb6qJJ/U4Tc8vj/NGlEsgJ43V
	B3Gou/l9voTFNQCWwyNYmXW0gnHYxaw=
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=
	messagingengine.com; h=cc:content-transfer-encoding:content-type
	:date:from:in-reply-to:message-id:mime-version:references
	:subject:to:x-me-proxy:x-me-proxy:x-me-sender:x-me-sender
	:x-sasl-enc; s=fm1; bh=YDaPQ/oyx5mg3l/cGbNMJOnXNR8eSfVUtRr+q8Uw8
	Co=; b=LD9YLI5Vc3rNucXNbge+WzOogx0NRm8pEmgqV6MiHNiy41SWuPTo/5Hz5
	bruvghSdRyplU8fx9wMGvMmg/hBVT7htgAkR0y+61pWkVbK4Ph/UYdDw7XQ4bYUP
	/2Xo3WCOtAZRe4PSr3AIrzdJwpiSS4imVEOHXm2xokO3UC3KIE32Mx3uDKyix9lM
	8WwvkiveE+vxvpWMK8XuVk2UCvFc1ApUmxOhRLi5+O3B3xSOAAkk6W0Eb8NhHAIu
	jJlg2enm7msIMUL4hkpZ/nJMA7Q6HrQkZmVN26m55WGmyC5M+kxcbzerqwrxrFLK
	Q3PGwHW2j8B5uf1uToIv9ADd/gIXw==
X-ME-Sender: <xms:qOgRXIikt9a0-gexvq7F6EAf5tJG8CzeTHfN8vZKUPuEb2y2bsYk0A>
X-ME-Proxy-Cause: gggruggvucftvghtrhhoucdtuddrgedtkedrudehuddgkedtucetufdoteggodetrfdotf
	fvucfrrhhofhhilhgvmecuhfgrshhtofgrihhlpdfquhhtnecuuegrihhlohhuthemucef
	tddtnecusecvtfgvtghiphhivghnthhsucdlqddutddtmdenucfjughrpefhvffufffkof
	gjfhggtgfgsehtkeertdertdejnecuhfhrohhmpedfgfhmihhlihhoucfirdcuvehothgr
	fdcuoegtohhtrgessghrrggrphdrohhrgheqnecukfhppeduvdekrdehledrvddtrddvud
	einecurfgrrhgrmhepmhgrihhlfhhrohhmpegtohhtrgessghrrggrphdrohhrghenucev
	lhhushhtvghrufhiiigvpeeg
X-ME-Proxy: <xmx:qOgRXNa9Q0iKEw26kOSA2aBdtPAws4L93iZ7J_IL6q06aPynxR53aA>
	<xmx:qOgRXEipaXm9nfJtraB9qOcd83Gv8quPyCQIduK3Xjop3bRnxnAExA>
	<xmx:qOgRXHbYqKX6LhTGsKTWQXO0erP3_NFQltRqIyp5LQUPgkY79vuRSA>
	<xmx:qOgRXAIbOeg0Rx0imAaX2FPb5TEklrPhr40YSHmRsvvZhl9c4PQQ-g>
Received: from localhost (flamenco.cs.columbia.edu [128.59.20.216])
	by mail.messagingengine.com (Postfix) with ESMTPA id D7CD310084;
	Thu, 13 Dec 2018 00:05:43 -0500 (EST)
From: "Emilio G. Cota" <cota@braap.org>
To: qemu-devel@nongnu.org
Date: Thu, 13 Dec 2018 00:04:12 -0500
Message-Id: <20181213050453.9677-33-cota@braap.org>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20181213050453.9677-1-cota@braap.org>
References: <20181213050453.9677-1-cota@braap.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 66.111.4.25
Subject: [Qemu-devel] [PATCH v5 32/73] cpu: define cpu_interrupt_request
 helpers
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: =?UTF-8?q?Alex=20Benn=C3=A9e?= <alex.bennee@linaro.org>,
	Paolo Bonzini <pbonzini@redhat.com>,
	Richard Henderson <richard.henderson@linaro.org>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Add a comment about how atomic_read works here. The comment refers to
a "BQL-less CPU loop", which will materialize toward the end
of this series.

Note that the modifications to cpu_reset_interrupt are there to
avoid deadlock during the CPU lock transition; once that is complete,
cpu_interrupt_request will be simple again.

Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
Reviewed-by: Alex Benn√©e <alex.bennee@linaro.org>
Signed-off-by: Emilio G. Cota <cota@braap.org>
---
 include/qom/cpu.h | 37 +++++++++++++++++++++++++++++++++++++
 qom/cpu.c         | 27 +++++++++++++++++++++------
 2 files changed, 58 insertions(+), 6 deletions(-)

diff --git a/include/qom/cpu.h b/include/qom/cpu.h
index 9c5aad1797..95747f5abf 100644
--- a/include/qom/cpu.h
+++ b/include/qom/cpu.h
@@ -505,6 +505,43 @@ static inline void cpu_halted_set(CPUState *cpu, uint32_t val)
     cpu_mutex_unlock(cpu);
 }
 
+/*
+ * When sending an interrupt, setters OR the appropriate bit and kick the
+ * destination vCPU. The latter can then read interrupt_request without
+ * acquiring the CPU lock, because once the kick-induced completes, they'll read
+ * an up-to-date interrupt_request.
+ * Setters always acquire the lock, which guarantees that (1) concurrent
+ * updates from different threads won't result in data races, and (2) the
+ * BQL-less CPU loop will always see an up-to-date interrupt_request, since the
+ * loop holds the CPU lock.
+ */
+static inline uint32_t cpu_interrupt_request(CPUState *cpu)
+{
+    return atomic_read(&cpu->interrupt_request);
+}
+
+static inline void cpu_interrupt_request_or(CPUState *cpu, uint32_t mask)
+{
+    if (cpu_mutex_locked(cpu)) {
+        atomic_set(&cpu->interrupt_request, cpu->interrupt_request | mask);
+        return;
+    }
+    cpu_mutex_lock(cpu);
+    atomic_set(&cpu->interrupt_request, cpu->interrupt_request | mask);
+    cpu_mutex_unlock(cpu);
+}
+
+static inline void cpu_interrupt_request_set(CPUState *cpu, uint32_t val)
+{
+    if (cpu_mutex_locked(cpu)) {
+        atomic_set(&cpu->interrupt_request, val);
+        return;
+    }
+    cpu_mutex_lock(cpu);
+    atomic_set(&cpu->interrupt_request, val);
+    cpu_mutex_unlock(cpu);
+}
+
 static inline void cpu_tb_jmp_cache_clear(CPUState *cpu)
 {
     unsigned int i;
diff --git a/qom/cpu.c b/qom/cpu.c
index 4e964255bf..44b78f1892 100644
--- a/qom/cpu.c
+++ b/qom/cpu.c
@@ -98,14 +98,29 @@ static void cpu_common_get_memory_mapping(CPUState *cpu,
  * BQL here if we need to.  cpu_interrupt assumes it is held.*/
 void cpu_reset_interrupt(CPUState *cpu, int mask)
 {
-    bool need_lock = !qemu_mutex_iothread_locked();
+    bool has_bql = qemu_mutex_iothread_locked();
+    bool has_cpu_lock = cpu_mutex_locked(cpu);
 
-    if (need_lock) {
-        qemu_mutex_lock_iothread();
+    if (has_bql) {
+        if (has_cpu_lock) {
+            atomic_set(&cpu->interrupt_request, cpu->interrupt_request & ~mask);
+        } else {
+            cpu_mutex_lock(cpu);
+            atomic_set(&cpu->interrupt_request, cpu->interrupt_request & ~mask);
+            cpu_mutex_unlock(cpu);
+        }
+        return;
+    }
+
+    if (has_cpu_lock) {
+        cpu_mutex_unlock(cpu);
     }
-    cpu->interrupt_request &= ~mask;
-    if (need_lock) {
-        qemu_mutex_unlock_iothread();
+    qemu_mutex_lock_iothread();
+    cpu_mutex_lock(cpu);
+    atomic_set(&cpu->interrupt_request, cpu->interrupt_request & ~mask);
+    qemu_mutex_unlock_iothread();
+    if (!has_cpu_lock) {
+        cpu_mutex_unlock(cpu);
     }
 }
 
-- 
2.17.1


