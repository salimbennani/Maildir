Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  14 Dec 2018 21:50:59 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 81DE958061F
	for <like.xu@linux.intel.com>; Fri, 14 Dec 2018 05:43:38 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 14 Dec 2018 05:43:38 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A7vCh9xPUQ3QDqEUJH/El6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0I/X8rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0yRD+s7bpkSAXwhS?=
 =?us-ascii?q?kHKTA3/mLZhMtyg6JVvRyhvx5yzYzbbY2IOvdyYr3SfcgBSGZdQspcTTBND5mg?=
 =?us-ascii?q?Y4cTCecKIOZWr5P6p1sLtRaxCg2sC/nyxT9Jg3/23Lc62Pk8Hw7Y2QwvAdQOsG?=
 =?us-ascii?q?jPrNXyKqceSPm7zKbJzTrdcfNWwjT96InIcxs8pvyMQ6lwftTUyUYxEQPFkk6Q?=
 =?us-ascii?q?qYv7Pz6OyOQNsnKb7/Z9VeKoim8mqgZxriKzyccrj4nEn4QYwU3H+yVh2Is5O8?=
 =?us-ascii?q?G0RU1hbdK5DZddtDuWO5V4T84iWW1kpSQ3xqUbtZO4fCUG0ooryhDCZ/CdbYSF?=
 =?us-ascii?q?7Q7vWPyTLDp4gn9uZaixiAyo8Ue6z+3xTsm030hOripCitTMsnEN1wfP6sicUP?=
 =?us-ascii?q?d98UGh2SuV2wDU8OFELlg4lavdK5E/3r49joQfvVjAEyPshUn6kaybel869uWm?=
 =?us-ascii?q?6+nreKjqq52EO49xkA7+M6AumsKlAeQ/NwgDR3Gb9vq51L3+5EH2XatFjuMona?=
 =?us-ascii?q?ndqZzVPsMbprO/AwBJzIkj8BGzDzOn0NQbg3YLNl1EeA+fgojtOlHOJu34DPil?=
 =?us-ascii?q?j1Stljdr2+7JPrn7DprRKXjDlazsfbB6605axwozy81f64hTCrEbL/L/QlXxu8?=
 =?us-ascii?q?DADh8lLwy0xP7qCNF81oMdR22DGKCYML7JvF+M5+IvJfSMZYAPtDb8Lfgl++Dh?=
 =?us-ascii?q?jXsjlVABeqmp2MhfVXajA/4zI1mFeWG+xZAFEHwWpUw4S+rljkDEViRcIHO7Xq?=
 =?us-ascii?q?Y57zd8D5q6DIDFXce0jbmcmSu2AJBSNV1AEU2GRHLhdoGYXKUVZSePZ8NsjDEA?=
 =?us-ascii?q?EKKsUpIszg2Gsgj8xLx6aO3O9XoDqJjh2dNpsvDVjgw47jduDs6QgF2KGnh5m3?=
 =?us-ascii?q?5NTTsx16NXp0t7xVGel69ijLgQDNFW+rZFXxk3MbbayOp1Dc20XRjOLfmTT1Pz?=
 =?us-ascii?q?fNGvDTA0T8h5+NILbkBhANK8yzfM3ie0GLwUhvTfGoc596/aw2P2Oe5jymzaya?=
 =?us-ascii?q?4znV5gScxKYz71zpVj/hTeUtaa236SkLynIPwR?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A5AAAYsxNchxHrdtBkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUwUBAQsBgTCCYox0pHyBcxQYFIdHIjYHDQEDAQEBAQEBAgETAQEBCgsJCBs?=
 =?us-ascii?q?OL4I2BQIDGAmCXAMDAQIkHwopAwMBAgYBAUgIAwFTBxIFgxyCAQEDAaZsM4VAh?=
 =?us-ascii?q?G6HfYRBF4FAP48BAok4CocFVI99CZFPI4oEXIZyiTuQJoFNDIF7TSODPIJQjg4?=
 =?us-ascii?q?+MYEHi0CBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0A5AAAYsxNchxHrdtBkHAEBAQQBAQcEAQGBUwUBAQsBgTC?=
 =?us-ascii?q?CYox0pHyBcxQYFIdHIjYHDQEDAQEBAQEBAgETAQEBCgsJCBsOL4I2BQIDGAmCX?=
 =?us-ascii?q?AMDAQIkHwopAwMBAgYBAUgIAwFTBxIFgxyCAQEDAaZsM4VAhG6HfYRBF4FAP48?=
 =?us-ascii?q?BAok4CocFVI99CZFPI4oEXIZyiTuQJoFNDIF7TSODPIJQjg4+MYEHi0CBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,353,1539673200"; 
   d="scan'208";a="66842391"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mga01b.intel.com with ESMTP/TLS/AES256-SHA; 14 Dec 2018 05:43:37 -0800
Received: from localhost ([::1]:33594 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gXnke-0001Pe-8p
	for like.xu@linux.intel.com; Fri, 14 Dec 2018 08:43:36 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:45503)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <vsementsov@virtuozzo.com>) id 1gXnjv-0000vG-UO
	for qemu-devel@nongnu.org; Fri, 14 Dec 2018 08:42:52 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <vsementsov@virtuozzo.com>) id 1gXnju-0005jh-V1
	for qemu-devel@nongnu.org; Fri, 14 Dec 2018 08:42:51 -0500
Received: from relay.sw.ru ([185.231.240.75]:36732)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <vsementsov@virtuozzo.com>)
	id 1gXnjq-0005eM-ID; Fri, 14 Dec 2018 08:42:46 -0500
Received: from [10.28.8.145] (helo=kvm.sw.ru)
	by relay.sw.ru with esmtp (Exim 4.91)
	(envelope-from <vsementsov@virtuozzo.com>)
	id 1gXnjm-000251-A2; Fri, 14 Dec 2018 16:42:42 +0300
From: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
To: qemu-block@nongnu.org,
	qemu-devel@nongnu.org
Date: Fri, 14 Dec 2018 16:42:40 +0300
Message-Id: <20181214134240.217870-6-vsementsov@virtuozzo.com>
X-Mailer: git-send-email 2.18.0
In-Reply-To: <20181214134240.217870-1-vsementsov@virtuozzo.com>
References: <20181214134240.217870-1-vsementsov@virtuozzo.com>
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 3.x [fuzzy]
X-Received-From: 185.231.240.75
Subject: [Qemu-devel] [PATCH v4 5/5] qcow2-refcount: don't mask corruptions
 under internal errors
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: kwolf@redhat.com, den@openvz.org, vsementsov@virtuozzo.com,
	mreitz@redhat.com
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

No reasons for not reporting found corruptions as corruptions in case
of some internal errors, especially in case of just failed to fix l2
entry (and in this case, missed corruptions may influence comparing
logic, when we calculate difference between corruptions fields of two
results)

Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
---
 block/qcow2-refcount.c | 31 ++++++++++++++-----------------
 1 file changed, 14 insertions(+), 17 deletions(-)

diff --git a/block/qcow2-refcount.c b/block/qcow2-refcount.c
index 8da0e91dd3..b0e006e628 100644
--- a/block/qcow2-refcount.c
+++ b/block/qcow2-refcount.c
@@ -1639,6 +1639,8 @@ static int check_refcounts_l2(BlockDriverState *bs, BdrvCheckResult *res,
 
             /* Correct offsets are cluster aligned */
             if (offset_into_cluster(s, offset)) {
+                res->corruptions++;
+
                 if (qcow2_get_cluster_type(l2_entry) ==
                     QCOW2_CLUSTER_ZERO_ALLOC)
                 {
@@ -1674,18 +1676,16 @@ static int check_refcounts_l2(BlockDriverState *bs, BdrvCheckResult *res,
                             /* Do not abort, continue checking the rest of this
                              * L2 table's entries */
                         } else {
+                            res->corruptions--;
                             res->corruptions_fixed++;
                             /* Skip marking the cluster as used
                              * (it is unused now) */
                             continue;
                         }
-                    } else {
-                        res->corruptions++;
                     }
                 } else {
                     fprintf(stderr, "ERROR offset=%" PRIx64 ": Data cluster is "
                         "not properly aligned; L2 entry corrupted.\n", offset);
-                    res->corruptions++;
                 }
             }
 
@@ -1854,6 +1854,7 @@ static int check_oflag_copied(BlockDriverState *bs, BdrvCheckResult *res,
             continue;
         }
         if ((refcount == 1) != ((l1_entry & QCOW_OFLAG_COPIED) != 0)) {
+            res->corruptions++;
             fprintf(stderr, "%s OFLAG_COPIED L2 cluster: l1_index=%d "
                     "l1_entry=%" PRIx64 " refcount=%" PRIu64 "\n",
                     repair ? "Repairing" : "ERROR", i, l1_entry, refcount);
@@ -1866,9 +1867,8 @@ static int check_oflag_copied(BlockDriverState *bs, BdrvCheckResult *res,
                     res->check_errors++;
                     goto fail;
                 }
+                res->corruptions--;
                 res->corruptions_fixed++;
-            } else {
-                res->corruptions++;
             }
         }
 
@@ -1899,19 +1899,16 @@ static int check_oflag_copied(BlockDriverState *bs, BdrvCheckResult *res,
                     fprintf(stderr, "%s OFLAG_COPIED data cluster: "
                             "l2_entry=%" PRIx64 " refcount=%" PRIu64 "\n",
                             repair ? "Repairing" : "ERROR", l2_entry, refcount);
-                    if (repair) {
-                        l2_table[j] = cpu_to_be64(refcount == 1
-                                    ? l2_entry |  QCOW_OFLAG_COPIED
-                                    : l2_entry & ~QCOW_OFLAG_COPIED);
-                        l2_dirty++;
-                    } else {
-                        res->corruptions++;
-                    }
+                    l2_table[j] = cpu_to_be64(refcount == 1
+                                ? l2_entry |  QCOW_OFLAG_COPIED
+                                : l2_entry & ~QCOW_OFLAG_COPIED);
+                    l2_dirty++;
                 }
             }
         }
 
-        if (l2_dirty > 0) {
+        res->corruptions += l2_dirty;
+        if (repair && l2_dirty > 0) {
             ret = qcow2_pre_write_overlap_check(bs, QCOW2_OL_ACTIVE_L2,
                                                 l2_offset, s->cluster_size);
             if (ret < 0) {
@@ -1929,6 +1926,7 @@ static int check_oflag_copied(BlockDriverState *bs, BdrvCheckResult *res,
                 res->check_errors++;
                 goto fail;
             }
+            res->corruptions -= l2_dirty;
             res->corruptions_fixed += l2_dirty;
         }
     }
@@ -1967,6 +1965,7 @@ static int check_refblocks(BlockDriverState *bs, BdrvCheckResult *res,
         }
 
         if (cluster >= *nb_clusters) {
+            res->corruptions++;
             fprintf(stderr, "%s refcount block %" PRId64 " is outside image\n",
                     fix & BDRV_FIX_ERRORS ? "Repairing" : "ERROR", i);
 
@@ -2006,6 +2005,7 @@ static int check_refblocks(BlockDriverState *bs, BdrvCheckResult *res,
                     goto resize_fail;
                 }
 
+                res->corruptions--;
                 res->corruptions_fixed++;
                 ret = qcow2_inc_refcounts_imrt(bs, res,
                                                refcount_table, nb_clusters,
@@ -2019,12 +2019,9 @@ static int check_refblocks(BlockDriverState *bs, BdrvCheckResult *res,
                 continue;
 
 resize_fail:
-                res->corruptions++;
                 *rebuild = true;
                 fprintf(stderr, "ERROR could not resize image: %s\n",
                         strerror(-ret));
-            } else {
-                res->corruptions++;
             }
             continue;
         }
-- 
2.18.0


