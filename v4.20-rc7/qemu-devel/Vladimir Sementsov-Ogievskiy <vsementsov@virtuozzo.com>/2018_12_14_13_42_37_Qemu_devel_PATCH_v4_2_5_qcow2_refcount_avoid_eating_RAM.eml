Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  14 Dec 2018 21:51:01 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 5608058061F
	for <like.xu@linux.intel.com>; Fri, 14 Dec 2018 05:46:22 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 14 Dec 2018 05:46:22 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AAZWLkxF/dEimT04tBYKMcp1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ7yrsuwAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VDK/5KlpVRDokj?=
 =?us-ascii?q?8KOT4n/m/ZicJ+i6BUoBy8qRxnwYPaYo6YOOdwc6/BY9waXnFMUtpNWyFbHo+x?=
 =?us-ascii?q?dZcDA/YHMO1Fr4f9vVwOrR6mCAajAOPg0CJHhn7z3a07yeQqDBzI0xIlH90Qtn?=
 =?us-ascii?q?TUsM71NKAMUeys1afIwjTDYO1I2Tfm64jIcxAgquyLULJuasre10wvGB3DjlWM?=
 =?us-ascii?q?sozlOC2V2/8Ts2ia9epgSf+vi2kmqgBwpTij3Nsjio7Mho8MzF3P6CZ3wJ4tKN?=
 =?us-ascii?q?GmVEJ2YsSoHIZNuyyZLYd6XM0vTmFytConyLAKoYO3cSsKxZg92RLSZeGLf5KW?=
 =?us-ascii?q?7h/sSOqdOzV1iXJjdbminRi961Kgxff5VsSs0FZFsC5Fkt7Uu3AJ1hzT8dSHSu?=
 =?us-ascii?q?Bn8keu3zaPyhrf6uZeIUA7jabbKpghzaAslpcLr0jPAiz7lF/rgKOLdUgo4Pak?=
 =?us-ascii?q?5urnb7n8u5ORNZd4igTkPaQvnsy/D/44Mg8LX2WD4OSzyrjj/VDgTLpXkPI2jL?=
 =?us-ascii?q?fWsJTDKcsAoa65HglV3Zo95BakCDum1NUYnXoZI15fdxOHkpDkO1XPIPD+EPe+?=
 =?us-ascii?q?jE6gkDZtx/DaILLhBo/BIWTEkLfkZrt97UlcyAw8zdBZ+pJYELYBIOj8WkPprt?=
 =?us-ascii?q?zXEgc5MxCow+bgENh90oIeWWGRDaODP6LSrESF5uYuI+mKeY8UtyzxK/kj5/7y?=
 =?us-ascii?q?k3A5nUURcrWu3ZsSOziFGO97KRCZfWb0mYVGVmMLpRYlCurtjlKETHhUfXn1Wq?=
 =?us-ascii?q?s94jQyDsWhFZvCQYa2x6WM2Tr+EpBIa2QVN1aXDH29coyFX+sLOjufJ9IknjEa?=
 =?us-ascii?q?WLzkUYI4yBy1qCf8zLxoKPeS/TcX4on+3tp47PGGiBcp6DZvBN6c2Wzec2Yhh2?=
 =?us-ascii?q?4NWno82Kd0omR7zVGM17U+hOZXUZRK6vZUFws3K5PY5+p9Dd/0R0TGZNjaZkyh?=
 =?us-ascii?q?R4CYBTg9T9cw2Zc1bkNwHcm5iQ6G+CWrDqEOlL2aTMgq6a/Z0n7tPMFj42jHzr?=
 =?us-ascii?q?U8iEs0RY1EMmjw1f03zBTaG4OcyxbRrK2tb6lJhCM=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A5AAAYsxNchxHrdtBkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUwUBAQsBgTCCYox0pHyBcxQYFIdHIjYHDQEDAQEBAQEBAgETAQEBCgsJCBs?=
 =?us-ascii?q?OL4I2BQIDGAmCXAMDAQIkHwopAwMBAgYBAUgIAwFTBxIFgxyCAQEDAaZsM4VAh?=
 =?us-ascii?q?G6HfYRBF4FAP48BAokeGocPVI99CZFPI4oEXIZyiTuQJoFNAoIFTSODPIIkGo4?=
 =?us-ascii?q?gPjGBB4tAgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0A5AAAYsxNchxHrdtBkHAEBAQQBAQcEAQGBUwUBAQsBgTC?=
 =?us-ascii?q?CYox0pHyBcxQYFIdHIjYHDQEDAQEBAQEBAgETAQEBCgsJCBsOL4I2BQIDGAmCX?=
 =?us-ascii?q?AMDAQIkHwopAwMBAgYBAUgIAwFTBxIFgxyCAQEDAaZsM4VAhG6HfYRBF4FAP48?=
 =?us-ascii?q?BAokeGocPVI99CZFPI4oEXIZyiTuQJoFNAoIFTSODPIIkGo4gPjGBB4tAgXcBA?=
 =?us-ascii?q?Q?=
X-IronPort-AV: E=Sophos;i="5.56,353,1539673200"; 
   d="scan'208";a="55192957"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 14 Dec 2018 05:46:21 -0800
Received: from localhost ([::1]:33612 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gXnnI-0004jj-O3
	for like.xu@linux.intel.com; Fri, 14 Dec 2018 08:46:20 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:45506)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <vsementsov@virtuozzo.com>) id 1gXnjv-0000vI-Vc
	for qemu-devel@nongnu.org; Fri, 14 Dec 2018 08:42:52 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <vsementsov@virtuozzo.com>) id 1gXnjv-0005jm-0a
	for qemu-devel@nongnu.org; Fri, 14 Dec 2018 08:42:51 -0500
Received: from relay.sw.ru ([185.231.240.75]:36712)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <vsementsov@virtuozzo.com>)
	id 1gXnjq-0005eH-GE; Fri, 14 Dec 2018 08:42:46 -0500
Received: from [10.28.8.145] (helo=kvm.sw.ru)
	by relay.sw.ru with esmtp (Exim 4.91)
	(envelope-from <vsementsov@virtuozzo.com>)
	id 1gXnjl-000251-V2; Fri, 14 Dec 2018 16:42:41 +0300
From: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
To: qemu-block@nongnu.org,
	qemu-devel@nongnu.org
Date: Fri, 14 Dec 2018 16:42:37 +0300
Message-Id: <20181214134240.217870-3-vsementsov@virtuozzo.com>
X-Mailer: git-send-email 2.18.0
In-Reply-To: <20181214134240.217870-1-vsementsov@virtuozzo.com>
References: <20181214134240.217870-1-vsementsov@virtuozzo.com>
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 3.x [fuzzy]
X-Received-From: 185.231.240.75
Subject: [Qemu-devel] [PATCH v4 2/5] qcow2-refcount: avoid eating RAM
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: kwolf@redhat.com, den@openvz.org, vsementsov@virtuozzo.com,
	mreitz@redhat.com
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

qcow2_inc_refcounts_imrt() (through realloc_refcount_array()) can eat
an unpredictable amount of memory on corrupted table entries, which are
referencing regions far beyond the end of file.

Prevent this, by skipping such regions from further processing.

Interesting that iotest 138 checks exactly the behavior which we fix
here. So, change the test appropriately.

Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
---
 block/qcow2-refcount.c     | 18 ++++++++++++++++++
 tests/qemu-iotests/138     | 12 +++++-------
 tests/qemu-iotests/138.out |  5 ++++-
 3 files changed, 27 insertions(+), 8 deletions(-)

diff --git a/block/qcow2-refcount.c b/block/qcow2-refcount.c
index b717fdecc6..c41c1fbe00 100644
--- a/block/qcow2-refcount.c
+++ b/block/qcow2-refcount.c
@@ -1505,12 +1505,30 @@ int qcow2_inc_refcounts_imrt(BlockDriverState *bs, BdrvCheckResult *res,
 {
     BDRVQcow2State *s = bs->opaque;
     uint64_t start, last, cluster_offset, k, refcount;
+    int64_t file_len;
     int ret;
 
     if (size <= 0) {
         return 0;
     }
 
+    file_len = bdrv_getlength(bs->file->bs);
+    if (file_len < 0) {
+        return file_len;
+    }
+
+    /* Last cluster of qcow2 image may be semi-allocated, so it's may be OK to
+     * reference some space after file end but it should be less than one
+     * cluster.
+     */
+    if (offset + size - file_len >= s->cluster_size) {
+        fprintf(stderr, "ERROR: counting reference for region exceeding the "
+                "end of the file by one cluster or more: offset 0x%" PRIx64
+                " size 0x%" PRIx64 "\n", offset, size);
+        res->corruptions++;
+        return 0;
+    }
+
     start = start_of_cluster(s, offset);
     last = start_of_cluster(s, offset + size - 1);
     for(cluster_offset = start; cluster_offset <= last;
diff --git a/tests/qemu-iotests/138 b/tests/qemu-iotests/138
index eccbcae3a6..12e20762e5 100755
--- a/tests/qemu-iotests/138
+++ b/tests/qemu-iotests/138
@@ -54,15 +54,13 @@ $QEMU_IO -c 'write 0 512' "$TEST_IMG" | _filter_qemu_io
 # Put the data cluster at a multiple of 2 TB, resulting in the image apparently
 # having a multiple of 2^32 clusters
 # (To be more specific: It is at 32 PB)
-poke_file "$TEST_IMG" 2048 "\x80\x80\x00\x00\x00\x00\x00\x00"
+poke_file "$TEST_IMG" $((2048 + 8)) "\x00\x80\x00\x00\x00\x00\x00\x00"
 
 # An offset of 32 PB results in qemu-img check having to allocate an in-memory
-# refcount table of 128 TB (16 bit refcounts, 512 byte clusters).
-# This should be generally too much for any system and thus fail.
-# What this test is checking is that the qcow2 driver actually tries to allocate
-# such a large amount of memory (and is consequently aborting) instead of having
-# truncated the cluster count somewhere (which would result in much less memory
-# being allocated and then a segfault occurring).
+# refcount table of 128 TB (16 bit refcounts, 512 byte clusters), if qemu-img
+# don't check that referenced data cluster is far beyond the end of file.
+# But starting from 4.0, qemu-img does this check, and instead of "Cannot
+# allocate memory", we have an error showing that l2 entry is invalid.
 _check_test_img
 
 # success, all done
diff --git a/tests/qemu-iotests/138.out b/tests/qemu-iotests/138.out
index 3fe911f85a..aca7d47a80 100644
--- a/tests/qemu-iotests/138.out
+++ b/tests/qemu-iotests/138.out
@@ -5,5 +5,8 @@ QA output created by 138
 Formatting 'TEST_DIR/t.IMGFMT', fmt=IMGFMT size=512
 wrote 512/512 bytes at offset 0
 512 bytes, X ops; XX:XX:XX.X (XXX YYY/sec and XXX ops/sec)
-qemu-img: Check failed: Cannot allocate memory
+ERROR: counting reference for region exceeding the end of the file by one cluster or more: offset 0x80000000000000 size 0x200
+
+1 errors were found on the image.
+Data may be corrupted, or further writes to the image may corrupt it.
 *** done
-- 
2.18.0


