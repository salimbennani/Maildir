Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 12 Dec 2018 08:47:07 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 53D8C58079D
	for <like.xu@linux.intel.com>; Tue, 11 Dec 2018 06:31:29 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 11 Dec 2018 06:31:28 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AMi+71BNF0qL/JFeXuPEl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0K/z5o8bcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRsleVyJDDY28?=
 =?us-ascii?q?YYUBDPQPMvpXoYfgv1sDrxmwCAaxCO7h1jNHmGT20LYm0+Q4CwzKwBAsE84MvX?=
 =?us-ascii?q?nSsd77NL0SUeewzKTQyjvMdelW1ivk5IXUdBAuvOuMWqhtesTX1EkvDR3KgU+N?=
 =?us-ascii?q?qYf4OD6V0/4Cs3KH4OV6U+KglnQnpB9rrjir28cskJfGiZgIyl3f+iV5xZw6Jd?=
 =?us-ascii?q?y8SEJhfdGkF55QujicOoBrQc0iW3lltDgmxrAFo5K3YTUGxZc9yxLBZfGKc5KE?=
 =?us-ascii?q?7g/hWeqJPzt3nm5pdK66ihqv/kWtyvHwW8y73VtJrydIndzBum4R2xHW78WKRf?=
 =?us-ascii?q?Rw80in1D2SzQ7c8PtELloxlafDK54u3Lowlp0LvETHHy/2g1n2jLSMekUr/Oio?=
 =?us-ascii?q?9v7rYrL8pp+TL4N0iwf+PboymsGnH+g0LgsDU3KG9eih17Dv51P1TbtKg/Esj6?=
 =?us-ascii?q?XUsojWJcEBqa64Bw9V3Jwj6xG6Dzq+ydQXg3wHLE9cdB2akYfpJU/BIPThAfik?=
 =?us-ascii?q?hFSsjTFryOzYMb36BZnNKnnDkLT/crpn5E9c1RI+zdRe55JSF7EAL+j/Wk73tN?=
 =?us-ascii?q?zEEBA5Nxa4zPrgCNV4zY4eX2WPAqmWMKPUrF+E/OUvI/ODZIMNojbyN+Al5+Ly?=
 =?us-ascii?q?jX8+gVIdeaip3ZgJZ3yiEfVmPl6UYX7tgtcHDGcLsRAyTO3siF2eTzFTY2y+UL?=
 =?us-ascii?q?475jE+W8qbC5zeTNWtnKCZx3X8WZlXfXxdTFaLF3juasODQfhLbSuTJspolHsD?=
 =?us-ascii?q?TaSgTIk6kgijsRK/x7d5I+6HxysDqJi20dF04/HUxwg/8CExA8mD3mXIVWxtg2?=
 =?us-ascii?q?4TWxcw26Zwp1E7zU2MhrNlif5VHsAG+vVSTw0hPoTdxeEpN9endw7cd82FTx6G?=
 =?us-ascii?q?S9+lBiotBoY8w9YEYEFmB/24gxzD1jbsCLgQwe+lHpsxp4fVxXO0DsBx0feO8L?=
 =?us-ascii?q?Q7glA7Cp9KPHetj6hz7QWVA5PTnkyEv6mvfKUYmiXK8THQniK1oEhEXVsoAu3+?=
 =?us-ascii?q?VncFax6T9Iyh6w=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0DJAgAMyQ9cmBHrdtBlHgEGBwaBZYExg?=
 =?us-ascii?q?mKDe4h4izGCDYd4gSxlCY8zFBgUhECCbiI4EgEDAQEBAQEBAgETAQEBAQEICws?=
 =?us-ascii?q?GGw4jDII2BQIDGgEGglsBAQEBAgEBAiAEGQEFCgwdAQIBAgECBgEBBQULAwoCA?=
 =?us-ascii?q?h8DBAICAwEeAREBBQEcBhMFgxyBaQEDDQgBBJlqPIsNfBYFAReCdwWEPAoZJw1?=
 =?us-ascii?q?dMYEGAgYSeYswghaBEYMShQGDBIJXAosrhQ6EVotsBwKRURiRQJkkDyGBPEmBL?=
 =?us-ascii?q?jMaI1AxgjuCGwwXEoM4ilg8MYEHiGqBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0DJAgAMyQ9cmBHrdtBlHgEGBwaBZYExgmKDe4h4izGCDYd?=
 =?us-ascii?q?4gSxlCY8zFBgUhECCbiI4EgEDAQEBAQEBAgETAQEBAQEICwsGGw4jDII2BQIDG?=
 =?us-ascii?q?gEGglsBAQEBAgEBAiAEGQEFCgwdAQIBAgECBgEBBQULAwoCAh8DBAICAwEeARE?=
 =?us-ascii?q?BBQEcBhMFgxyBaQEDDQgBBJlqPIsNfBYFAReCdwWEPAoZJw1dMYEGAgYSeYswg?=
 =?us-ascii?q?haBEYMShQGDBIJXAosrhQ6EVotsBwKRURiRQJkkDyGBPEmBLjMaI1AxgjuCGww?=
 =?us-ascii?q?XEoM4ilg8MYEHiGqBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,342,1539673200"; 
   d="scan'208";a="44475423"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 11 Dec 2018 06:31:27 -0800
Received: from localhost ([::1]:38446 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gWj4J-0005JD-6v
	for like.xu@linux.intel.com; Tue, 11 Dec 2018 09:31:27 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:40524)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <marcandre.lureau@gmail.com>) id 1gWj3t-0005G6-Is
	for qemu-devel@nongnu.org; Tue, 11 Dec 2018 09:31:07 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <marcandre.lureau@gmail.com>) id 1gWj3q-0002ak-MB
	for qemu-devel@nongnu.org; Tue, 11 Dec 2018 09:31:00 -0500
Received: from mail-wr1-x444.google.com ([2a00:1450:4864:20::444]:34014)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <marcandre.lureau@gmail.com>)
	id 1gWj3e-0001zP-6l; Tue, 11 Dec 2018 09:30:46 -0500
Received: by mail-wr1-x444.google.com with SMTP id j2so14337057wrw.1;
	Tue, 11 Dec 2018 06:30:46 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
	h=mime-version:references:in-reply-to:from:date:message-id:subject:to
	:cc:content-transfer-encoding;
	bh=JHKKuzzVjb7ZlmD16/2MT6az+KfBgjND2+BxpkUm41w=;
	b=qjPMz2gTHH+z3UCCQJ1o3zJ9/La2t6h5MreZL8mCnlZIQu+IzKLMeQe2uhvB1Q/aVQ
	1yShZFtH5pGR9rSe7qxaNOuny2bgL9XBfexV6HWkdnhL3YK14HQ7d7DGrLvppknLAluv
	lC1MpM03idm9QzV03D4eFENB+edAfU2WxHScZKW6NVJVMXMezmCB/4zmSqfngH0vlYfw
	u/JdHmLWgVuI5ePdRENJsyK+nWMKg02NOLeF8GMFQZ4JdH7NYldErZ3M8B2LvKm8uZxS
	EVH5C2jLRP7e3FMB/0vZu5Seuq0PWcxl/8f38IOAqFtH17IsCXG2zM0fMuB8aTn6yFo6
	nlxA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:mime-version:references:in-reply-to:from:date
	:message-id:subject:to:cc:content-transfer-encoding;
	bh=JHKKuzzVjb7ZlmD16/2MT6az+KfBgjND2+BxpkUm41w=;
	b=ex50P/Gmqh2pckCth8ToyuY24aBsrmReM8dURCLY0stRj/KprTBVfpaZ2SZWFaeFjy
	EvRYXIZgqJygaV8qSYg/gFgFGJElnoZDiQ60P0Zivtn+EWkxvED7v8QeBiT+0LvXVnML
	iafUOBA0L9+GhOqYAYwU2p4oUyZ5PY1yVN8Gp/qSNiUZraWZHbBDgauOWOIbxbD8mU/4
	bt/iUv8XzH62NutLkZ7XmSj1859Feye6rIPEcTqgqNksD3vcMRi470pDlmJhVqpX0uey
	8AlOBAroQloDug5eO+eMWObhuVGXLv/aUeI7vFqRz/q0jTbD4Sf568Zd7iHVY2nmRju/
	l6IQ==
X-Gm-Message-State: AA+aEWanKE0bDXHK4X4TYxaIMbIrG114f4OlybTjzQ+g7kHFYTif7vwI
	y5tVetBUDiq67mBovcC4j5l9dsx4ncU4SI/uhX4=
X-Google-Smtp-Source: AFSGD/Wxd7sI5TlLQ2J60x91uq3znzMsNsWzttniPXjS6m55TpS6aXAeuxveh4PcCuONcTZrN7CIIb34C8WBLOKrOVE=
X-Received: by 2002:adf:f691:: with SMTP id v17mr13069815wrp.114.1544538645033;
	Tue, 11 Dec 2018 06:30:45 -0800 (PST)
MIME-Version: 1.0
References: <20181204142023.15982-1-marcandre.lureau@redhat.com>
	<20181204142023.15982-9-marcandre.lureau@redhat.com>
	<20181211142310.GB20015@habkost.net>
In-Reply-To: <20181211142310.GB20015@habkost.net>
From: =?UTF-8?B?TWFyYy1BbmRyw6kgTHVyZWF1?= <marcandre.lureau@gmail.com>
Date: Tue, 11 Dec 2018 18:30:32 +0400
Message-ID: <CAJ+F1CKF7_MEtZNY2FEot9dG-RZQwGeZZ7+3+q1QgD98koF2SA@mail.gmail.com>
To: Eduardo Habkost <ehabkost@redhat.com>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 2a00:1450:4864:20::444
Subject: Re: [Qemu-devel] [PATCH for-3.2 v5 08/19] hw: apply machine compat
 properties without touching globals
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Peter Maydell <peter.maydell@linaro.org>,
	"Michael S. Tsirkin" <mst@redhat.com>,
	David Hildenbrand <david@redhat.com>,
	Cornelia Huck <cohuck@redhat.com>, QEMU <qemu-devel@nongnu.org>,
	Christian Borntraeger <borntraeger@de.ibm.com>,
	Qemu-s390x list <qemu-s390x@nongnu.org>,
	"open list:ARM" <qemu-arm@nongnu.org>,
	"open list:sPAPR pseries" <qemu-ppc@nongnu.org>,
	Paolo Bonzini <pbonzini@redhat.com>, Igor Mammedov <imammedo@redhat.com>,
	David Gibson <david@gibson.dropbear.id.au>,
	Richard Henderson <rth@twiddle.net>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Hi

On Tue, Dec 11, 2018 at 6:24 PM Eduardo Habkost <ehabkost@redhat.com> wrote=
:
>
> I have specific questions about the approach we are using to
> eliminate the macros.
>
> My main goal when asking this to be moved to a separate patch is
> to not make this discussion block the register_global_properties() &
> device_post_init() changes (which look good to me).
>
>
> On Tue, Dec 04, 2018 at 06:20:12PM +0400, Marc-Andr=C3=A9 Lureau wrote:
> [...]
> > -#define VIRT_COMPAT_3_0 \
> > +static GlobalProperty virt_compat_3_0[] =3D {
> >      HW_COMPAT_3_0
> > +};
>
> What about moving the array inside virt_machine_3_0_options()?

Sure

>
> >
> >  static void virt_3_0_instance_init(Object *obj)
> >  {
> > @@ -1883,12 +1884,14 @@ static void virt_3_0_instance_init(Object *obj)
> >  static void virt_machine_3_0_options(MachineClass *mc)
> >  {
> >      virt_machine_3_1_options(mc);
> > -    SET_MACHINE_COMPAT(mc, VIRT_COMPAT_3_0);
> > +    compat_props_add(mc->compat_props,
> > +                     virt_compat_3_0, G_N_ELEMENTS(virt_compat_3_0));
> >  }
> >  DEFINE_VIRT_MACHINE(3, 0)
>
> This is nice, because it's basically the same amount of
> boilerplate code, but I would find a NULL-terminated array much
> easier to use than having to use G_N_ELEMENTS().

But easier to get wrong too. I prefer the explicit N arguments. (it
also gives some flexibility, since you can point to inner pointer +
size, although we don't care at this point)

>
> This would be nice in cases like virt, because we wouldn't even
> need to declare a separate array.  We could do something like:
>
>     compat_props_add(mc->compat_props, hw_compat_3_0);
>
> and that's all.  No need for HW_COMPAT_* macros, no need for
> extra arrays to be declared.
>
>
> [...]
> > diff --git a/hw/i386/pc_piix.c b/hw/i386/pc_piix.c
> > index 7092d6d13f..575566e466 100644
> > --- a/hw/i386/pc_piix.c
> > +++ b/hw/i386/pc_piix.c
> > @@ -438,74 +438,112 @@ static void pc_i440fx_3_1_machine_options(Machin=
eClass *m)
> >  DEFINE_I440FX_MACHINE(v3_1, "pc-i440fx-3.1", NULL,
> >                        pc_i440fx_3_1_machine_options);
> >
> > +static GlobalProperty pc_compat_3_0[] =3D {
> > +    PC_COMPAT_3_0
> > +};
> > +
> >  static void pc_i440fx_3_0_machine_options(MachineClass *m)
> >  {
> >      pc_i440fx_3_1_machine_options(m);
> >      m->is_default =3D 0;
> >      m->alias =3D NULL;
> > -    SET_MACHINE_COMPAT(m, PC_COMPAT_3_0);
> > +
> > +    compat_props_add(m->compat_props,
> > +                     pc_compat_3_0, G_N_ELEMENTS(pc_compat_3_0));
> >  }
> >
> >  DEFINE_I440FX_MACHINE(v3_0, "pc-i440fx-3.0", NULL,
> >                        pc_i440fx_3_0_machine_options);
>
> Now, this is requiring _more_ boilerplate code than before.  I'd
> like us to find a way to eliminate the macro without increasing
> the amount of boilerplate code.

I am open to ideas

>
>
> [...]
> > diff --git a/hw/ppc/spapr.c b/hw/ppc/spapr.c
> > index 7afd1a175b..d801ba71eb 100644
> > --- a/hw/ppc/spapr.c
> > +++ b/hw/ppc/spapr.c
> > @@ -3973,8 +3973,9 @@ DEFINE_SPAPR_MACHINE(3_1, "3.1", true);
> >  /*
> >   * pseries-3.0
> >   */
> > -#define SPAPR_COMPAT_3_0                                              =
\
> > +static GlobalProperty spapr_compat_3_0[] =3D {
> >      HW_COMPAT_3_0
> > +};
> >
> >  static void spapr_machine_3_0_instance_options(MachineState *machine)
> >  {
> > @@ -3986,7 +3987,8 @@ static void spapr_machine_3_0_class_options(Machi=
neClass *mc)
> >      sPAPRMachineClass *smc =3D SPAPR_MACHINE_CLASS(mc);
> >
> >      spapr_machine_3_1_class_options(mc);
> > -    SET_MACHINE_COMPAT(mc, SPAPR_COMPAT_3_0);
> > +    compat_props_add(mc->compat_props,
> > +                     spapr_compat_3_0, G_N_ELEMENTS(spapr_compat_3_0))=
;
> >
> >      smc->legacy_irq_allocation =3D true;
> >      smc->irq =3D &spapr_irq_xics_legacy;
> > @@ -3997,18 +3999,19 @@ DEFINE_SPAPR_MACHINE(3_0, "3.0", false);
> >  /*
> >   * pseries-2.12
> >   */
> > -#define SPAPR_COMPAT_2_12                                             =
 \
> > -    HW_COMPAT_2_12                                                    =
 \
> > -    {                                                                 =
 \
> > -        .driver =3D TYPE_POWERPC_CPU,                                 =
   \
> > -        .property =3D "pre-3.0-migration",                            =
   \
> > -        .value    =3D "on",                                           =
   \
> > -    },                                                                =
 \
> > -    {                                                                 =
 \
> > -        .driver =3D TYPE_SPAPR_CPU_CORE,                              =
   \
> > -        .property =3D "pre-3.0-migration",                            =
   \
> > -        .value    =3D "on",                                           =
   \
> > +static GlobalProperty spapr_compat_2_12[] =3D {
> > +    HW_COMPAT_2_12
> > +    {
> > +        .driver =3D TYPE_POWERPC_CPU,
> > +        .property =3D "pre-3.0-migration",
> > +        .value    =3D "on",
> > +    },
> > +    {
> > +        .driver =3D TYPE_SPAPR_CPU_CORE,
> > +        .property =3D "pre-3.0-migration",
> > +        .value    =3D "on",
> >      },
> > +};
> >
> >  static void spapr_machine_2_12_instance_options(MachineState *machine)
> >  {
> > @@ -4020,7 +4023,8 @@ static void spapr_machine_2_12_class_options(Mach=
ineClass *mc)
> >      sPAPRMachineClass *smc =3D SPAPR_MACHINE_CLASS(mc);
> >
> >      spapr_machine_3_0_class_options(mc);
> > -    SET_MACHINE_COMPAT(mc, SPAPR_COMPAT_2_12);
> > +    compat_props_add(mc->compat_props,
> > +                     spapr_compat_2_12, G_N_ELEMENTS(spapr_compat_2_12=
));
>
> It would be nice to be able to write this as:
>
>     static GlobalProperty spapr_compat_2_12[] =3D {
>         {
>             .driver =3D TYPE_POWERPC_CPU,
>             .property =3D "pre-3.0-migration",
>             .value    =3D "on",
>         },
>         {
>             .driver =3D TYPE_SPAPR_CPU_CORE,
>             .property =3D "pre-3.0-migration",
>             .value    =3D "on",
>         },
>         { /* end of list */ },
>     };
>
>     compat_props_add(mc->compat_props, hw_compat_3_0);
>     compat_props_add(mc->compat_props, spapr_compat_2_12);
>
> This way we won't need the HW_COMPAT_* macros anymore.

That could be done on top, I imagine. I can give it a try.

>
> Other than that, it's also basically the same amount of
> boilerplate as before, so that's good.
>
>
> >
> >      /* We depend on kvm_enabled() to choose a default value for the
> >       * hpt-max-page-size capability. Of course we can't do it here
> [...]
> > diff --git a/hw/s390x/s390-virtio-ccw.c b/hw/s390x/s390-virtio-ccw.c
> > index a0615a8b35..275cbe5da4 100644
> > --- a/hw/s390x/s390-virtio-ccw.c
> > +++ b/hw/s390x/s390-virtio-ccw.c
> > @@ -651,96 +651,106 @@ bool css_migration_enabled(void)
> >      }                                                                 =
        \
> >      type_init(ccw_machine_register_##suffix)
> >
> > -#define CCW_COMPAT_3_0 \
> > -        HW_COMPAT_3_0
> > -
> > -#define CCW_COMPAT_2_12 \
> > -        HW_COMPAT_2_12
> > -
> > -#define CCW_COMPAT_2_11 \
> > -        HW_COMPAT_2_11 \
> > -        {\
> > -            .driver   =3D TYPE_SCLP_EVENT_FACILITY,\
> > -            .property =3D "allow_all_mask_sizes",\
> > -            .value    =3D "off",\
> > -        },
> [...]
> > +static GlobalProperty ccw_compat_3_0[] =3D {
> > +    HW_COMPAT_3_0
> > +};
> > +
> > +static GlobalProperty ccw_compat_2_12[] =3D {
> > +    HW_COMPAT_2_12
> > +};
> > +
> > +static GlobalProperty ccw_compat_2_11[] =3D {
> > +    HW_COMPAT_2_11
> > +    {
> > +        .driver   =3D TYPE_SCLP_EVENT_FACILITY,
> > +        .property =3D "allow_all_mask_sizes",
> > +        .value    =3D "off",
> > +    },
> > +};
> [...]
> >
> >  static void ccw_machine_3_1_instance_options(MachineState *machine)
> >  {
> > @@ -762,7 +772,8 @@ static void ccw_machine_3_0_class_options(MachineCl=
ass *mc)
> >
> >      s390mc->hpage_1m_allowed =3D false;
> >      ccw_machine_3_1_class_options(mc);
> > -    SET_MACHINE_COMPAT(mc, CCW_COMPAT_3_0);
> > +    compat_props_add(mc->compat_props,
> > +                     ccw_compat_3_0, G_N_ELEMENTS(ccw_compat_3_0));
>
> Same comments from spapr apply here: getting rid of the
> HW_COMPAT_* macros would be nice, but this version is good enough
> because it has the same amount of boilerplate code.
>
>

thanks

> >  }
> >  DEFINE_CCW_MACHINE(3_0, "3.0", false);
> [...]
>
> --
> Eduardo
>


--=20
Marc-Andr=C3=A9 Lureau

