Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  14 Dec 2018 08:38:12 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 2DDE458079D;
	Thu, 13 Dec 2018 07:07:45 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by fmsmga002-1.fm.intel.com with ESMTP; 13 Dec 2018 07:07:44 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AHdYQqBIT6Vy0toeDFtmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgUL/7zrarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZUMhfVzJPDJ6/?=
 =?us-ascii?q?YYsBAOUOIftXoIvzqFsVtRuzBxKhBP/zxjJSmnP6wbc33/onHArb3AIgBdUOsH?=
 =?us-ascii?q?HModvoKqgdS+a1x7TSwzrZcvNW3Sr25Y/Tch8/u/6MW6l9cdLWyUkoDQPFilWR?=
 =?us-ascii?q?pZb/PzOI0OQAqm6W5PduW+Kojm4osQBxoj63y8cikInGmJwaxU3a+iViw4Y1Od?=
 =?us-ascii?q?q4SFZhbd6jCptQuCeXPJZ1TMM6W2xkpjo2x7kctZKmciUG1o4rywPcZvCbaYSF?=
 =?us-ascii?q?4xDuWP6PLTp5mn5pZLeyiwq3/ES91uHwS8e53VNXoiZYl9TDrG0C2hzT58WCUf?=
 =?us-ascii?q?Rx41qu1i2K2g/J9+5EL147mK/VJpE6xrMwmJweulnZECDsgkX5lqqWe10k+ue2?=
 =?us-ascii?q?7+TnZa3rpoGTN4BqkAHyKKculdKlAeQ+LAcOW3KX+eOm1L3s5UH5QbNKgeMqkq?=
 =?us-ascii?q?TBrpzWOcAWqrSkDwJbzIov8QuzAjS63NgCnHQKLkpJeBedgIjoP1HOLur4DfC6?=
 =?us-ascii?q?g1m0lDdrxvbGPqDuA5nULXjMjq3hfbBj5E5Y0QYzyt5e55RKBbEbO//zREDxu8?=
 =?us-ascii?q?LCDhMjMAy73fznCNNj2YMaQ26PBbWZMKzKvV+S+u0vO/WMZJMSuDvlL/gl5v3u?=
 =?us-ascii?q?gmEjlV4SYKmkxp8XaHG+HvR7LESVe3vsgtEdEWgUugoyVvDliFqHUTRLfXa9Q7?=
 =?us-ascii?q?o85i0nCIKhFYrDRpqigL2d3CihGZ1afGBGCk2WHnfueIWJQPMMaCOUIs98nT0I?=
 =?us-ascii?q?T7mhS4k91R6wsA/20aZoLu3R+icAr5LsyMB15/HPlRE17TF0DcOd3H+XQ2F3mW?=
 =?us-ascii?q?MIQTk23KdkrEx5y1eD17V4gvNCGdxS4fNJThk1NZrGw+NmDNDyXxrLfs2VR1a+?=
 =?us-ascii?q?XtWmHTYxQ8orzN8VY0Z9HNaiggrZ3yWwAb8YjLiLBJ0y8qLB0Hn9Pcd9y3Da1K?=
 =?us-ascii?q?Y/i1kqWNdANWqjhqRn7QjcG5bJk1mFl6atbakc3zTC9GGZwWqKvUFXSghwUare?=
 =?us-ascii?q?UHAbZ0vWq8n550zYQ7+vD7QnLhVOycqYJqRWbd3piE1MRO3/N9TGf2Kxh2CwCA?=
 =?us-ascii?q?6VybyWcorlZX8R3CXHB0gCiAAc43CGOQ86BieipmLeCCdjFVbuY0Pq7Ol/p2m3?=
 =?us-ascii?q?Tk4yzwGWcUJh06C59QIShfyZU/kTxK4LuD89qzVoG1awx8/ZBMCepwV/ZqlcYc?=
 =?us-ascii?q?ky4FFc1W3HsQxwJZigL6Fkhl4DfAV7pULu1xNrCopelcgmtm8lzA13KaiAylNO?=
 =?us-ascii?q?ayuY3YzsOr3QMmTy4BGva6vR2lHC0NaX+r0D6Ogip1XkpgGpEksi83No09RO13?=
 =?us-ascii?q?uc55PKDBcdUJ7rU0Y38QR6qK/eYiUn+4zU0nhsO7GusjDew9IpGPclyhG4cthF?=
 =?us-ascii?q?NKOLCgDzHNMaBsS0M+MqhkWmYQgCPOBR8640Idird/+H2K6tIeZhkyiqjWVB4I?=
 =?us-ascii?q?BhzE2M8zBwRfLP35YA2/uYxBeIVy/gjFe9tcD6gYBFZSwIEmWj0yTlBY5Rabd0?=
 =?us-ascii?q?fYYEEmquJ8y3xtNjh5/iQXJY9VijB08Y18+tYxadc1v93QhI30QNvXOngTe4zy?=
 =?us-ascii?q?BzkzwxtKqf3TDBzP74dBUaPW5HXm9igkn2IYi1ltwVQFKnbww0mxS7/0b6wK5b?=
 =?us-ascii?q?qb97L2nSR0dIYif3I3tjUqu2qrqNfcpP5Ik0viVQVeS2eUqaRaLloxsGzyPjGH?=
 =?us-ascii?q?NTxTA6dz2wupT1hQd6iH+bLHtoqHrZeMdwxQrQ5dDGRP5R2CYGSzd8iTXNGle8?=
 =?us-ascii?q?ONyp982Ol5jfquC+S36hVppLfCnp14yArii75W5tARGlhPC8gN7nEQs70S/9yd?=
 =?us-ascii?q?ZqUz7FrBL9YontyqS7PvhrfkhuBF/g9cV6HptynZc3hJEVwXIanIma/WIbkWfv?=
 =?us-ascii?q?NtVWwaL/Y2AKRTIRwd7V4Q7l1VZnLnKIwYL5S3qcztFgZ9m8fmMZxCY949pWB6?=
 =?us-ascii?q?eT6bxOhTF1rUagrQLNffh9mS8Qyfg0534bme0JuBctwT+bArAdBkRYOS3slxKV?=
 =?us-ascii?q?79GxtqlXZWCvcaSu20p6h9yuELaCogREUnbjZpgiBTNw7tl4MF/U1X3z64Lkd8?=
 =?us-ascii?q?PKYdMdqBKUiAvAgPZPKJ0qiPUKnyVnNHn5vX0kze47kBNv0Yu7vIiBN2Vi4qa5?=
 =?us-ascii?q?DgREOT3yYsMZ4ivtgrpGnsaKw4CvGY1sGikMXJvtV/6pESgdtfL6NwaVCz08q2?=
 =?us-ascii?q?yWGb7eHQ+Z9UdnoGjDE5GtN3GLOnYZyc9uSwWaJExamAoURik1noYlFgC2w8zs?=
 =?us-ascii?q?aFx26SoW5l78txtA0OZoNwTkX2fbpQeobCo0SZeFIBpX6AFC+1naMciE4u1vGC?=
 =?us-ascii?q?FY+4WrrBaRJWyDewRIEWYJV1SGB1/5O7mh+8LA//KEBuakLPvOfLaOqfFYV/iS?=
 =?us-ascii?q?3pKiyY9m/zeKNsWSMXhuFfw72kxfXX9nH8TVgSkASysSlyjVdc6UuA+8+jFrrs?=
 =?us-ascii?q?C46PnqWAXv5ZaWC7tPK9pv/Qq6gbyEN+6WiyZ0MjJY1pIKxX/Vx7kTxl8Siydy?=
 =?us-ascii?q?dzazFbQMrzLCTKXVmqVPFR4UdztzNNdU76I7xgRNOdDUitL21r57j/45EVRFVU?=
 =?us-ascii?q?bmmsGme8MKOXy9NEjcCUaPNbSGIyDLws7tbaO9T71QkPtbtxmqtTmHFE/jOyyJ?=
 =?us-ascii?q?lyP1WBC3LeFMkCabMQREt4GgaRltE3bsTdL8Zh2/Md96ljk2wbwyhnPXOm8QKz?=
 =?us-ascii?q?l8c0VRrrKO6SNUmOlwG2tE7nB9N+mLhz6Z7/XEKpYRqfZrHiV0l+dA7Hsm0bda?=
 =?us-ascii?q?8CFES+JzmCbJqt5uolemkvSAyzZ9URpOrCpLi5yPvUl4JarZ8ZxAU27e/B0R9W?=
 =?us-ascii?q?WQFwgKp9x9B9zvoa9QzN3PlKP1KDha8tPU/dETB87bKM+cNHohMBzpGCPbDQcf?=
 =?us-ascii?q?TD6rM33fiFJZkP2I6nKVqZ06+dDQn88sQ7BSUhQJG/AbQhBnFdMLJr9+Wzo+jL?=
 =?us-ascii?q?qSl8kM+Ga/qx/KAs5du8aUeOiVBKDUJT+fxYFNeh9Alaj1JII7Lor8wUhzLENn?=
 =?us-ascii?q?mtKZSALrQdlRr3g5PUcPq0JX/S07FzVr1g=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAABRdRJch0O0hNFjGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBgTCBOYECJ4wVjiAUl0AUgWIPAQEYBwwBgUu?=
 =?us-ascii?q?FeiI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmIBAgMBAiQTBgEBNwEFC?=
 =?us-ascii?q?QEBChgJJQMMBSABBQEiEwUWgwYBggABBJtFPIodgWwzgnYBAQWHKggSiw6BHBe?=
 =?us-ascii?q?Bf4ERgxKBQYMFHwWFcokdGoF9hBV+UYRqiw8JgiiEZYpBIwoCVIFJh0OHXpkiB?=
 =?us-ascii?q?gIJBw8hgSVtgSEzGggwgycJghIYiGmBBoRXIjKBAgMBASETjBQBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ABAABRdRJch0O0hNFjGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBgTCBOYECJ4wVjiAUl0AUgWIPAQEYBwwBgUuFeiI0CQ0BAwEBA?=
 =?us-ascii?q?QEBAQIBEwEBAQgNCQgpIwyCNiQBgmIBAgMBAiQTBgEBNwEFCQEBChgJJQMMBSA?=
 =?us-ascii?q?BBQEiEwUWgwYBggABBJtFPIodgWwzgnYBAQWHKggSiw6BHBeBf4ERgxKBQYMFH?=
 =?us-ascii?q?wWFcokdGoF9hBV+UYRqiw8JgiiEZYpBIwoCVIFJh0OHXpkiBgIJBw8hgSVtgSE?=
 =?us-ascii?q?zGggwgycJghIYiGmBBoRXIjKBAgMBASETjBQBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,349,1539673200"; 
   d="scan'208";a="43924154"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 13 Dec 2018 07:07:42 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729200AbeLMPHk (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 13 Dec 2018 10:07:40 -0500
Received: from mail-yb1-f195.google.com ([209.85.219.195]:45297 "EHLO
        mail-yb1-f195.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727822AbeLMPHj (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 13 Dec 2018 10:07:39 -0500
Received: by mail-yb1-f195.google.com with SMTP id r11so901297ybp.12
        for <linux-kernel@vger.kernel.org>; Thu, 13 Dec 2018 07:07:38 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=poorly.run; s=google;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=SM57eTi17ZbBz501UB6FxCz2N+F7k/h3+LBNpkRqm2U=;
        b=QZ3p7vsc3gOJ2kGwGorQ9XPsAOzW6VZrEqCO4gvG4gxv4FHt2eX8qtJFodVY3kBr0B
         jK5ADggAMR4DiinzYFuM8jFGrOEsNMP5d0wNEPDnb4NsXzhn/xfKQcKLCZpAjeR4hmas
         9JfLWMcYaXPZVwuM3ftp1BQsoUAAYeR7pF8vjo2UvIvX7RF2ti8rc5mwtELxRsGhzAVN
         dy8UchxRkLGvXmn6WZzp9uLIHrLzesWABi+yEKEF6IXMmblni2/O6Ssx7puape0G7JlJ
         U+hU898qT3/DZ0D9wY1YDArIpz9Hms50LddctDLi4hvdC/nvD+NNs7OR3rJSkyb/WNKH
         qCzw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:message-id:references
         :mime-version:content-disposition:in-reply-to:user-agent;
        bh=SM57eTi17ZbBz501UB6FxCz2N+F7k/h3+LBNpkRqm2U=;
        b=F2nELEOf7J8diEP+KuOHz8mZF3/RjU5hGRZ0LH8UhHmOR55AzLkyde52k4LCH8VFhx
         p9uh+KpbCXFvEmtSSpTr0rw9/fbZhpsRvzVGNEnlk72fOWTjTpqYRxQraf/+Frfru21b
         gPOwwoF5tLr3LW+rikOtS2Z+Uj5ErzeFR/B+U8WB7Hc2kKz8mfRC9tXdeaC1qJVjyCIu
         yDNOOoxH6cvgHSopeNPT8tqZHBn3skfryHnRv0Ixo6ncXjjTN0uFX+19kMccuhgGkaAk
         NKrS+A+YJ0TeQNje9ByHq6gyXm1SbKPicIMgsnoHoINGcemBgMU0IJ1dg4r3Q8J/e+19
         g2+Q==
X-Gm-Message-State: AA+aEWbZYIhltsNITVvfPvGj87qq8IYXCN3r3X6d6/tSRWRinwTKKgkJ
        lQjCJlu5vDbQhVo5W3LAYVmzNw==
X-Google-Smtp-Source: AFSGD/VRTULlafrlKNKn4LNBkZLrl9w6Lqnhyv9sT5QWC0wP7niqSTQCIhy6hLrgsRLt+uWmHKspEw==
X-Received: by 2002:a25:9106:: with SMTP id v6mr5401534ybl.386.1544713657640;
        Thu, 13 Dec 2018 07:07:37 -0800 (PST)
Received: from localhost ([2620:0:1013:11:ad55:b1db:adfe:3b9f])
        by smtp.gmail.com with ESMTPSA id b129sm677289ywc.106.2018.12.13.07.07.36
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Thu, 13 Dec 2018 07:07:36 -0800 (PST)
Date: Thu, 13 Dec 2018 10:07:36 -0500
From: Sean Paul <sean@poorly.run>
To: Jagan Teki <jagan@amarulasolutions.com>
Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>,
        Maxime Ripard <maxime.ripard@bootlin.com>,
        Sean Paul <sean@poorly.run>, David Airlie <airlied@linux.ie>,
        Rob Herring <robh+dt@kernel.org>, Chen-Yu Tsai <wens@csie.org>,
        Icenowy Zheng <icenowy@aosc.io>,
        Jernej Skrabec <jernej.skrabec@siol.net>,
        Vasily Khoruzhick <anarsoul@gmail.com>,
        Thierry Reding <thierry.reding@gmail.com>,
        Mark Rutland <mark.rutland@arm.com>,
        dri-devel@lists.freedesktop.org, devicetree@vger.kernel.org,
        linux-kernel@vger.kernel.org, linux-arm-kernel@lists.infradead.org,
        Michael Trimarchi <michael@amarulasolutions.com>,
        TL Lim <tllim@pine64.org>, linux-sunxi@googlegroups.com,
        linux-amarula@amarulasolutions.com
Subject: Re: [PATCH v2 11/12] drm/panel: Add Feiyang FY07024DI26A30-D
 MIPI-DSI LCD panel
Message-ID: <20181213150736.GL154160@art_vandelay>
References: <20181116163916.29621-1-jagan@amarulasolutions.com>
 <20181116163916.29621-12-jagan@amarulasolutions.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181116163916.29621-12-jagan@amarulasolutions.com>
User-Agent: Mutt/1.10.1 (2018-07-13)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Fri, Nov 16, 2018 at 10:09:15PM +0530, Jagan Teki wrote:
> Feiyang FY07024DI26A30-D is 1024x600, 4-lane MIPI-DSI LCD panel.
> 
> Add panel driver for it.
> 
> Signed-off-by: Jagan Teki <jagan@amarulasolutions.com>
> ---
>  MAINTAINERS                                   |   6 +
>  drivers/gpu/drm/panel/Kconfig                 |   9 +
>  drivers/gpu/drm/panel/Makefile                |   1 +
>  .../drm/panel/panel-feiyang-fy07024di26a30d.c | 286 ++++++++++++++++++
>  4 files changed, 302 insertions(+)
>  create mode 100644 drivers/gpu/drm/panel/panel-feiyang-fy07024di26a30d.c
> 
> diff --git a/MAINTAINERS b/MAINTAINERS
> index 3dac08d0b3cb..40c8bfc974f4 100644
> --- a/MAINTAINERS
> +++ b/MAINTAINERS
> @@ -4620,6 +4620,12 @@ T:	git git://anongit.freedesktop.org/drm/drm-misc
>  S:	Maintained
>  F:	drivers/gpu/drm/tve200/
>  
> +DRM DRIVER FOR FEIYANG FY07024DI26A30-D MIPI-DSI LCD PANELS
> +M:	Jagan Teki <jagan@amarulasolutions.com>
> +S:	Maintained
> +F:	drivers/gpu/drm/panel/panel-feiyang-fy07024di26a30d.c
> +F:	Documentation/devicetree/bindings/display/panel/feiyang,fy07024di26a30d.txt
> +
>  DRM DRIVER FOR ILITEK ILI9225 PANELS
>  M:	David Lechner <david@lechnology.com>
>  S:	Maintained
> diff --git a/drivers/gpu/drm/panel/Kconfig b/drivers/gpu/drm/panel/Kconfig
> index d0d4e60f5153..bc70896fe43c 100644
> --- a/drivers/gpu/drm/panel/Kconfig
> +++ b/drivers/gpu/drm/panel/Kconfig
> @@ -47,6 +47,15 @@ config DRM_PANEL_SIMPLE
>  	  that it can be automatically turned off when the panel goes into a
>  	  low power state.
>  
> +config DRM_PANEL_FEIYANG_FY07024DI26A30D
> +	tristate "Feiyang FY07024DI26A30-D MIPI-DSI LCD panel"
> +	depends on OF
> +	depends on DRM_MIPI_DSI
> +	depends on BACKLIGHT_CLASS_DEVICE
> +	help
> +	  Say Y if you want to enable support for panels based on the
> +	  Feiyang FY07024DI26A30-D MIPI-DSI interface.
> +
>  config DRM_PANEL_ILITEK_IL9322
>  	tristate "Ilitek ILI9322 320x240 QVGA panels"
>  	depends on OF && SPI
> diff --git a/drivers/gpu/drm/panel/Makefile b/drivers/gpu/drm/panel/Makefile
> index 88011f06edb8..e23c017639c7 100644
> --- a/drivers/gpu/drm/panel/Makefile
> +++ b/drivers/gpu/drm/panel/Makefile
> @@ -3,6 +3,7 @@ obj-$(CONFIG_DRM_PANEL_ARM_VERSATILE) += panel-arm-versatile.o
>  obj-$(CONFIG_DRM_PANEL_BANANAPI_S070WV20_ICN6211) += panel-bananapi-s070wv20-icn6211.o
>  obj-$(CONFIG_DRM_PANEL_LVDS) += panel-lvds.o
>  obj-$(CONFIG_DRM_PANEL_SIMPLE) += panel-simple.o
> +obj-$(CONFIG_DRM_PANEL_FEIYANG_FY07024DI26A30D) += panel-feiyang-fy07024di26a30d.o
>  obj-$(CONFIG_DRM_PANEL_ILITEK_IL9322) += panel-ilitek-ili9322.o
>  obj-$(CONFIG_DRM_PANEL_ILITEK_ILI9881C) += panel-ilitek-ili9881c.o
>  obj-$(CONFIG_DRM_PANEL_INNOLUX_P079ZCA) += panel-innolux-p079zca.o
> diff --git a/drivers/gpu/drm/panel/panel-feiyang-fy07024di26a30d.c b/drivers/gpu/drm/panel/panel-feiyang-fy07024di26a30d.c
> new file mode 100644
> index 000000000000..a4b46bd8fdbe
> --- /dev/null
> +++ b/drivers/gpu/drm/panel/panel-feiyang-fy07024di26a30d.c
> @@ -0,0 +1,286 @@
> +// SPDX-License-Identifier: GPL-2.0+
> +/*
> + * Copyright (C) 2018 Amarula Solutions
> + * Author: Jagan Teki <jagan@amarulasolutions.com>
> + */
> +
> +#include <linux/backlight.h>
> +#include <linux/delay.h>
> +#include <linux/module.h>
> +#include <linux/of_device.h>
> +
> +#include <linux/gpio/consumer.h>
> +#include <linux/regulator/consumer.h>
> +
> +#include <drm/drmP.h>
> +#include <drm/drm_mipi_dsi.h>
> +#include <drm/drm_panel.h>
> +
> +struct feiyang {
> +	struct drm_panel	panel;
> +	struct mipi_dsi_device	*dsi;
> +
> +	struct backlight_device	*backlight;
> +	struct regulator	*dvdd;
> +	struct regulator	*avdd;
> +	struct gpio_desc	*reset;
> +};
> +
> +static inline struct feiyang *panel_to_feiyang(struct drm_panel *panel)
> +{
> +	return container_of(panel, struct feiyang, panel);
> +}
> +
> +struct feiyang_init_cmd {
> +	size_t len;
> +	const char *data;
> +};
> +
> +#define FY07024DI26A30D(...) { \
> +	.len = sizeof((char[]){__VA_ARGS__}), \
> +	.data = (char[]){__VA_ARGS__} }
> +
> +static const struct feiyang_init_cmd feiyang_init_cmds[] = {
> +	FY07024DI26A30D(0x80, 0x58),
> +	FY07024DI26A30D(0x81, 0x47),
> +	FY07024DI26A30D(0x82, 0xD4),
> +	FY07024DI26A30D(0x83, 0x88),
> +	FY07024DI26A30D(0x84, 0xA9),
> +	FY07024DI26A30D(0x85, 0xC3),
> +	FY07024DI26A30D(0x86, 0x82),
> +};

These init cmds don't have to be so complicated. You've only got len == 2, so
just hardcode it in and avoid the macro:

#define FEIYANG_INIT_CMD_LEN    2

struct feiyang_init_cmd {
        u8 data[FEIYANG_INIT_CMD];
};

static const struct feiyang_init_cmd feiyang_init_cmds[] = {
        { .data = { 0x80, 0x58 } },
        ...
};

> +
> +static int feiyang_prepare(struct drm_panel *panel)
> +{
> +	struct feiyang *ctx = panel_to_feiyang(panel);
> +	struct mipi_dsi_device *dsi = ctx->dsi;
> +	unsigned int i;
> +	int ret;
> +
> +	ret = regulator_enable(ctx->dvdd);
> +	if (ret)
> +		return ret;
> +
> +	msleep(100);

nit: You should do your best to correlate the sleeps with the timing parameters 
from the datasheet with a comment.

ie:
        /* T1: > 100ms */
        msleep(100);

> +
> +	ret = regulator_enable(ctx->avdd);
> +	if (ret)
> +		return ret;
> +
> +	msleep(20);
> +
> +	gpiod_set_value(ctx->reset, 1);
> +	msleep(50);
> +
> +	gpiod_set_value(ctx->reset, 0);
> +	msleep(20);
> +
> +	gpiod_set_value(ctx->reset, 1);
> +	msleep(200);
> +
> +	for (i = 0; i < ARRAY_SIZE(feiyang_init_cmds); i++) {
> +		const struct feiyang_init_cmd *cmd =
> +						&feiyang_init_cmds[i];
> +
> +		ret = mipi_dsi_dcs_write_buffer(dsi, cmd->data, cmd->len);

                ret = mipi_dsi_dcs_write_buffer(dsi, cmd->data,
                                                FEIYANG_INIT_CMD_LEN);

> +		if (ret < 0)
> +			return ret;
> +	}
> +
> +	return 0;
> +}
> +
> +static int feiyang_enable(struct drm_panel *panel)
> +{
> +	struct feiyang *ctx = panel_to_feiyang(panel);
> +
> +	msleep(120);
> +
> +	mipi_dsi_dcs_set_display_on(ctx->dsi);
> +	backlight_enable(ctx->backlight);
> +
> +	return 0;
> +}
> +
> +static int feiyang_disable(struct drm_panel *panel)
> +{
> +	struct feiyang *ctx = panel_to_feiyang(panel);
> +
> +	backlight_disable(ctx->backlight);
> +	return mipi_dsi_dcs_set_display_on(ctx->dsi);

set_display_on? You probably want set_display_off here :)

> +}
> +
> +static int feiyang_unprepare(struct drm_panel *panel)
> +{
> +	struct feiyang *ctx = panel_to_feiyang(panel);
> +	int ret;
> +
> +	ret = mipi_dsi_dcs_set_display_off(ctx->dsi);
> +	if (ret < 0)
> +		DRM_DEV_ERROR(panel->dev, "failed to set display off: %d\n",
> +			      ret);
> +
> +	ret = mipi_dsi_dcs_enter_sleep_mode(ctx->dsi);
> +	if (ret < 0)
> +		DRM_DEV_ERROR(panel->dev, "failed to enter sleep mode: %d\n",
> +			      ret);
> +
> +	msleep(100);
> +
> +	regulator_disable(ctx->avdd);
> +
> +	regulator_disable(ctx->dvdd);
> +
> +	gpiod_set_value(ctx->reset, 0);
> +
> +	gpiod_set_value(ctx->reset, 1);
> +
> +	gpiod_set_value(ctx->reset, 0);

Presumably this reset line toggle isn't needed since the rails are already
disabled?

> +
> +	return 0;
> +}
> +
> +static const struct drm_display_mode feiyang_default_mode = {
> +	.clock = 55000,
> +	.vrefresh = 60,

This doesn't add up correctly. The pixel clock should be equal to:

        (htotal * vtotal * vrefresh) / 1000

For this reason, we usually don't specify the refresh rate since it can be
misleading. Your actual refresh rate with the pixel clock you specified is
actually going to be 56.2Hz instead of the 60 you want.

If you can only generate a 55MHz pixel clock, consider reducing your blanking
periods so the calculation above matches.

> +
> +	.hdisplay = 1024,
> +	.hsync_start = 1024 + 396,
> +	.hsync_end = 1024 + 396 + 20,
> +	.htotal = 1024 + 396 + 20 + 100,
> +
> +	.vdisplay = 600,
> +	.vsync_start = 600 + 12,
> +	.vsync_end = 600 + 12 + 2,
> +	.vtotal = 600 + 12 + 2 + 21,
> +};
> +
> +static int feiyang_get_modes(struct drm_panel *panel)
> +{
> +	struct drm_connector *connector = panel->connector;
> +	struct feiyang *ctx = panel_to_feiyang(panel);
> +	struct drm_display_mode *mode;
> +
> +	mode = drm_mode_duplicate(panel->drm, &feiyang_default_mode);
> +	if (!mode) {
> +		DRM_DEV_ERROR(&ctx->dsi->dev, "failed to add mode %ux%ux@%u\n",
> +			      feiyang_default_mode.hdisplay,
> +			      feiyang_default_mode.vdisplay,
> +			      feiyang_default_mode.vrefresh);
> +		return -ENOMEM;
> +	}
> +
> +	drm_mode_set_name(mode);
> +
> +	mode->type = DRM_MODE_TYPE_DRIVER | DRM_MODE_TYPE_PREFERRED;

Just set these above.

> +	drm_mode_probed_add(connector, mode);
> +
> +	return 1;
> +}
> +
> +static const struct drm_panel_funcs feiyang_funcs = {
> +	.disable = feiyang_disable,
> +	.unprepare = feiyang_unprepare,
> +	.prepare = feiyang_prepare,
> +	.enable = feiyang_enable,
> +	.get_modes = feiyang_get_modes,
> +};
> +
> +static int feiyang_dsi_probe(struct mipi_dsi_device *dsi)
> +{
> +	struct device_node *np;
> +	struct feiyang *ctx;
> +	int ret;
> +
> +	ctx = devm_kzalloc(&dsi->dev, sizeof(*ctx), GFP_KERNEL);
> +	if (!ctx)
> +		return -ENOMEM;
> +	mipi_dsi_set_drvdata(dsi, ctx);
> +	ctx->dsi = dsi;
> +
> +	drm_panel_init(&ctx->panel);
> +	ctx->panel.dev = &dsi->dev;
> +	ctx->panel.funcs = &feiyang_funcs;
> +
> +	ctx->dvdd = devm_regulator_get(&dsi->dev, "dvdd");
> +	if (IS_ERR(ctx->dvdd)) {
> +		DRM_DEV_ERROR(&dsi->dev, "Couldn't get dvdd regulator\n");
> +		return PTR_ERR(ctx->dvdd);
> +	}
> +
> +	ctx->avdd = devm_regulator_get(&dsi->dev, "avdd");
> +	if (IS_ERR(ctx->avdd)) {
> +		DRM_DEV_ERROR(&dsi->dev, "Couldn't get avdd regulator\n");
> +		return PTR_ERR(ctx->avdd);
> +	}
> +
> +	ctx->reset = devm_gpiod_get(&dsi->dev, "reset", GPIOD_OUT_LOW);
> +	if (IS_ERR(ctx->reset)) {
> +		DRM_DEV_ERROR(&dsi->dev, "Couldn't get our reset GPIO\n");
> +		return PTR_ERR(ctx->reset);
> +	}
> +
> +	np = of_parse_phandle(dsi->dev.of_node, "backlight", 0);
> +	if (np) {
> +		ctx->backlight = of_find_backlight_by_node(np);
> +		of_node_put(np);
> +
> +		if (!ctx->backlight)
> +			return -EPROBE_DEFER;
> +	}
> +
> +	ret = drm_panel_add(&ctx->panel);
> +	if (ret < 0)
> +		goto put_backlight;
> +
> +	dsi->mode_flags = MIPI_DSI_MODE_VIDEO_BURST;
> +	dsi->format = MIPI_DSI_FMT_RGB888;
> +	dsi->lanes = 4;
> +
> +	ret = mipi_dsi_attach(dsi);
> +	if (ret < 0)
> +		goto panel_remove;
> +
> +	return ret;
> +
> +panel_remove:
> +	drm_panel_remove(&ctx->panel);
> +put_backlight:
> +	if (ctx->backlight)
> +		put_device(&ctx->backlight->dev);
> +
> +	return ret;
> +}
> +
> +static int feiyang_dsi_remove(struct mipi_dsi_device *dsi)
> +{
> +	struct feiyang *ctx = mipi_dsi_get_drvdata(dsi);
> +
> +	mipi_dsi_detach(dsi);
> +	drm_panel_remove(&ctx->panel);
> +
> +	if (ctx->backlight)
> +		put_device(&ctx->backlight->dev);
> +
> +	return 0;
> +}
> +
> +static const struct of_device_id feiyang_of_match[] = {
> +	{ .compatible = "feiyang,fy07024di26a30d", },
> +	{ }
> +};
> +MODULE_DEVICE_TABLE(of, feiyang_of_match);
> +
> +static struct mipi_dsi_driver feiyang_driver = {
> +	.probe = feiyang_dsi_probe,
> +	.remove = feiyang_dsi_remove,
> +	.driver = {
> +		.name = "feiyang-fy07024di26a30d",
> +		.of_match_table = feiyang_of_match,
> +	},
> +};
> +module_mipi_dsi_driver(feiyang_driver);
> +
> +MODULE_AUTHOR("Jagan Teki <jagan@amarulasolutions.com>");
> +MODULE_DESCRIPTION("Feiyang FY07024DI26A30-D MIPI-DSI LCD panel");
> +MODULE_LICENSE("GPL");
> -- 
> 2.18.0.321.gffc6fa0e3
> 

-- 
Sean Paul, Software Engineer, Google / Chromium OS
