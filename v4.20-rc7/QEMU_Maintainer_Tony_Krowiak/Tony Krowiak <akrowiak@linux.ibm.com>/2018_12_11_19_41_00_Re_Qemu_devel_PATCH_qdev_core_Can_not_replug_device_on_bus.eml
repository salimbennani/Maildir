Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 12 Dec 2018 08:55:29 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 673CF580380
	for <like.xu@linux.intel.com>; Tue, 11 Dec 2018 11:41:34 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga003-1.jf.intel.com with ESMTP; 11 Dec 2018 11:41:34 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AJq2PCxDKf+MH0S4FO5xFUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSPX8osbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRthfVyJBDI2y?=
 =?us-ascii?q?YYQAAOgOMvpXoYf+ulUOtRmzCwujCe/yxDJEmmH53bYh3uQ9EwzLxhAsE84AvX?=
 =?us-ascii?q?nWqtj+KaccUfqyzKnN1TjNcfRW2TH96YPVdx4hu/aMXLxxccXLykkkCgTIgU+T?=
 =?us-ascii?q?qYz/ODOU2OUNvHKY7+d7UeKvimgnqxx+ozS1x8cjkYzJipgJxVDD8CV02YA4Ls?=
 =?us-ascii?q?C7Rk5jedOoDodcuiKAO4drX88vQHtktDg0x7AGo5K3YSoHxIwjyhLFavGLb5KE?=
 =?us-ascii?q?7xDjWeqLPzt1inJodbSijBio60eg0PfzVsys3VZKsCVFlt7Mu2gJ1xzS8ciHVu?=
 =?us-ascii?q?B98l2u2TaJygDf8OZEIVo7labDKp4hxKA/loYLvEjdAiP7m1/6gLKLekgn4OSk?=
 =?us-ascii?q?9erqb7X8qpOBNYJ4kgT+Pb4vmsy7D+Q4KA8OX22D9OSlyrLj+FD5TKxXgfIojK?=
 =?us-ascii?q?nWrpTaKd0Aqa6+Hg9V1Jos5AikDzuh1NQYnHoHI0xfdBOIkojkI1XOIPH+Dfei?=
 =?us-ascii?q?jFWgijZrx/baPrL/BpXBNGTMkLDkfbtm7U5czwwzzd9Z55JJEL0BJ+jzWkDpuN?=
 =?us-ascii?q?zCEhA5KxC0w/rgCNhl0oMeWGGPDbGDPKLdrF+F/eYvI+iKZI8ItzfxMfkl5/jy?=
 =?us-ascii?q?jXAnnV8RZ7Wm3ZwSaCPwI/J9Pk/MYWbwmsxTViAOvxEiV6rsj1uNVyMVYGy9GK?=
 =?us-ascii?q?c15zU+AYThCp/fR4erm/uY0SKmW5FbeG1CWW2KCmriIoCNWvMQb3CLL8p81zAJ?=
 =?us-ascii?q?S7WlDpUszAyjrxPSzb1hIezJvCoCusX4ydJ36ubPwAw07iF+FM+H0muAHF1zy0?=
 =?us-ascii?q?IHQCV++al6pEFxzUnLhal9ivldGNBUz+lEXgczKdjXyOksWP7oXQeUQtCPWR6F?=
 =?us-ascii?q?WNK5ADgyBoY4wMUJfEd0GP2mjxbez2yrCbpTnLuOUs9nupnA1mT8cp4ug03N07?=
 =?us-ascii?q?Ms2hx/GpNC?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AvAABrERBcmBHrdtBkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgTCCYoN7iBlfizKBYC2XUhSBXxIBARgUhy4iNAkNAQMBAQEBAQE?=
 =?us-ascii?q?CARMBAQEBAQgLCwYbDi+CNgUCAxoBBoJcAQEBAwECDxEEEQ4KKQMDAQIGAQEKD?=
 =?us-ascii?q?goCAiIEAgIDAVMGCgMGAgEBAR2Cf4ICAQICmyKJWAEBAW58M4oxgQuLMBeBf4E?=
 =?us-ascii?q?RJ4I9LoRKH4McglcCjz9GN4UoixcJkUsGGIFciBomgSaFfoMClgoCBAYFAhMBg?=
 =?us-ascii?q?UaCDjMaCBsVO4JsgicXEo4pVIEHiBZWgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AvAABrERBcmBHrdtBkHAEBAQQBAQcEAQGBUQcBAQsBgTC?=
 =?us-ascii?q?CYoN7iBlfizKBYC2XUhSBXxIBARgUhy4iNAkNAQMBAQEBAQECARMBAQEBAQgLC?=
 =?us-ascii?q?wYbDi+CNgUCAxoBBoJcAQEBAwECDxEEEQ4KKQMDAQIGAQEKDgoCAiIEAgIDAVM?=
 =?us-ascii?q?GCgMGAgEBAR2Cf4ICAQICmyKJWAEBAW58M4oxgQuLMBeBf4ERJ4I9LoRKH4Mcg?=
 =?us-ascii?q?lcCjz9GN4UoixcJkUsGGIFciBomgSaFfoMClgoCBAYFAhMBgUaCDjMaCBsVO4J?=
 =?us-ascii?q?sgicXEo4pVIEHiBZWgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,343,1539673200"; 
   d="scan'208";a="43645983"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 11 Dec 2018 11:41:33 -0800
Received: from localhost ([::1]:41175 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gWnuP-00036U-0R
	for like.xu@linux.intel.com; Tue, 11 Dec 2018 14:41:33 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:48532)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <akrowiak@linux.ibm.com>) id 1gWnu7-00036P-JB
	for qemu-devel@nongnu.org; Tue, 11 Dec 2018 14:41:16 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <akrowiak@linux.ibm.com>) id 1gWnu2-0006Xd-KC
	for qemu-devel@nongnu.org; Tue, 11 Dec 2018 14:41:15 -0500
Received: from mx0a-001b2d01.pphosted.com ([148.163.156.1]:35416)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <akrowiak@linux.ibm.com>)
	id 1gWnu2-0006Ve-8O
	for qemu-devel@nongnu.org; Tue, 11 Dec 2018 14:41:10 -0500
Received: from pps.filterd (m0098410.ppops.net [127.0.0.1])
	by mx0a-001b2d01.pphosted.com (8.16.0.22/8.16.0.22) with SMTP id
	wBBJYTPc008935
	for <qemu-devel@nongnu.org>; Tue, 11 Dec 2018 14:41:08 -0500
Received: from e11.ny.us.ibm.com (e11.ny.us.ibm.com [129.33.205.201])
	by mx0a-001b2d01.pphosted.com with ESMTP id 2pagmp06ma-1
	(version=TLSv1.2 cipher=AES256-GCM-SHA384 bits=256 verify=NOT)
	for <qemu-devel@nongnu.org>; Tue, 11 Dec 2018 14:41:07 -0500
Received: from localhost
	by e11.ny.us.ibm.com with IBM ESMTP SMTP Gateway: Authorized Use Only!
	Violators will be prosecuted
	for <qemu-devel@nongnu.org> from <akrowiak@linux.ibm.com>;
	Tue, 11 Dec 2018 19:41:06 -0000
Received: from b01cxnp22035.gho.pok.ibm.com (9.57.198.25)
	by e11.ny.us.ibm.com (146.89.104.198) with IBM ESMTP SMTP Gateway:
	Authorized Use Only! Violators will be prosecuted; 
	(version=TLSv1/SSLv3 cipher=AES256-GCM-SHA384 bits=256/256)
	Tue, 11 Dec 2018 19:41:02 -0000
Received: from b01ledav001.gho.pok.ibm.com (b01ledav001.gho.pok.ibm.com
	[9.57.199.106])
	by b01cxnp22035.gho.pok.ibm.com (8.14.9/8.14.9/NCO v10.0) with ESMTP id
	wBBJf1ei14549180
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256
	verify=FAIL); Tue, 11 Dec 2018 19:41:01 GMT
Received: from b01ledav001.gho.pok.ibm.com (unknown [127.0.0.1])
	by IMSVA (Postfix) with ESMTP id 71F0C2805C;
	Tue, 11 Dec 2018 19:41:01 +0000 (GMT)
Received: from b01ledav001.gho.pok.ibm.com (unknown [127.0.0.1])
	by IMSVA (Postfix) with ESMTP id 3CBF728058;
	Tue, 11 Dec 2018 19:41:01 +0000 (GMT)
Received: from [9.60.75.235] (unknown [9.60.75.235])
	by b01ledav001.gho.pok.ibm.com (Postfix) with ESMTP;
	Tue, 11 Dec 2018 19:41:01 +0000 (GMT)
To: Igor Mammedov <imammedo@redhat.com>
References: <1544469254-11629-1-git-send-email-akrowiak@linux.ibm.com>
	<20181211162303.2e581899@redhat.com>
From: Tony Krowiak <akrowiak@linux.ibm.com>
Date: Tue, 11 Dec 2018 14:41:00 -0500
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
	Thunderbird/60.2.1
MIME-Version: 1.0
In-Reply-To: <20181211162303.2e581899@redhat.com>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Language: en-US
Content-Transfer-Encoding: 7bit
X-TM-AS-GCONF: 00
x-cbid: 18121119-2213-0000-0000-00000329525F
X-IBM-SpamModules-Scores: 
X-IBM-SpamModules-Versions: BY=3.00010214; HX=3.00000242; KW=3.00000007;
	PH=3.00000004; SC=3.00000270; SDB=6.01130341; UDB=6.00587349;
	IPR=6.00910475; 
	MB=3.00024656; MTD=3.00000008; XFM=3.00000015; UTC=2018-12-11 19:41:04
X-IBM-AV-DETECTION: SAVI=unused REMOTE=unused XFE=unused
x-cbparentid: 18121119-2214-0000-0000-00005C9114FD
Message-Id: <ee5f36b2-e0a0-cdee-ad9a-dbeb36f1583c@linux.ibm.com>
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10434:, ,
	definitions=2018-12-11_06:, , signatures=0
X-Proofpoint-Spam-Details: rule=outbound_notspam policy=outbound score=0
	priorityscore=1501
	malwarescore=0 suspectscore=2 phishscore=0 bulkscore=0 spamscore=0
	clxscore=1015 lowpriorityscore=0 mlxscore=0 impostorscore=0
	mlxlogscore=999 adultscore=0 classifier=spam adjust=0 reason=mlx
	scancount=1 engine=8.0.1-1810050000 definitions=main-1812110174
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 3.x [generic] [fuzzy]
X-Received-From: 148.163.156.1
Subject: Re: [Qemu-devel] [PATCH] qdev/core: Can not replug device on bus
 that allows one device
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: thuth@redhat.com, armbru@redhat.com, f4bug@amsat.org, qemu-devel@nongnu.org,
	pasic@linux.ibm.com, borntraeger@de.ibm.com, pbonzini@redhat.com
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On 12/11/18 10:23 AM, Igor Mammedov wrote:
> On Mon, 10 Dec 2018 14:14:14 -0500
> Tony Krowiak <akrowiak@linux.ibm.com> wrote:
> 
>> If the maximum number of devices allowed on a bus is 1 and a device
>> which is plugged into the bus is subsequently unplugged, attempting to replug
>> the device fails with error "Bus 'xxx' does not support hotplugging".
>> The "error" is detected in the qbus_is_full(BusState *bus) function
>> (qdev_monitor.c) because bus->max_index >= bus_class->max_dev. The
>> root of the problem is that the bus->max_index is not decremented when a device
>> is unplugged from the bus. This patch fixes that problem.
>>
>> Signed-off-by: Tony Krowiak <akrowiak@linux.ibm.com>
>> ---
>>   hw/core/qdev.c | 2 ++
>>   1 file changed, 2 insertions(+)
>>
>> diff --git a/hw/core/qdev.c b/hw/core/qdev.c
>> index 6b3cc55b27c2..b35b0bf27925 100644
>> --- a/hw/core/qdev.c
>> +++ b/hw/core/qdev.c
>> @@ -59,6 +59,8 @@ static void bus_remove_child(BusState *bus, DeviceState *child)
>>               snprintf(name, sizeof(name), "child[%d]", kid->index);
>>               QTAILQ_REMOVE(&bus->children, kid, sibling);
>>   
>> +            bus->max_index--;
> that might cause problem when bus is allowed to has more than 1 device
> and unplugged device is not the last one.
> In that case bus_add_child() might create a child with duplicate name.

I see what you are saying. The max_index is assigned to the child device
index in the bus_add_child() function. The child device index is used to
generate a unique name for the child device. The generated name is then
used to link the child as a property to the bus. When the child is
removed from the bus, the name is regenerated from the child device
index and the named property is . It would therefore appear that the
real purpose of the max_index is to generate indexes for children of
the bus thus ensuring each child has a unique index. In other words,
the max_index value is only tangentially connected to indexing the list
of children.

This results in a disconnect between the usage of the max_index value
when adding and removing a child from the bus, and the check in the
qbus_is_full() function which compares the max_index to the maximum
number of devices allowed on the bus. If a child has been removed from
the bus, the max_index value does not indicate whether the bus is
full, it only specifies the index to be assigned to the next child to be
added to the bus.

To resolve this problem, I propose the following:

Add the following field to struct BusState (include/hw/qdev_core.h):

struct BusState {
     Object obj;
     DeviceState *parent;
     char *name;
     HotplugHandler *hotplug_handler;
     int max_index;
     bool realized;
+    int num_children;
     QTAILQ_HEAD(ChildrenHead, BusChild) children;
     QLIST_ENTRY(BusState) sibling;
};

Add the following lines of code to the add/remove child functions in
hw/core/qdev.c:

static void bus_add_child(BusState *bus, DeviceState *child)
{
     char name[32];
     BusChild *kid = g_malloc0(sizeof(*kid));

     kid->index = bus->max_index++;
     kid->child = child;
     object_ref(OBJECT(kid->child));

     QTAILQ_INSERT_HEAD(&bus->children, kid, sibling);

     /* This transfers ownership of kid->child to the property.  */
     snprintf(name, sizeof(name), "child[%d]", kid->index);
     object_property_add_link(OBJECT(bus), name,
                              object_get_typename(OBJECT(child)),
                              (Object **)&kid->child,
                              NULL, /* read-only property */
                              0, /* return ownership on prop deletion */
                              NULL);

+    bus->num_children++;
}

static void bus_remove_child(BusState *bus, DeviceState *child)
{
     BusChild *kid;

     QTAILQ_FOREACH(kid, &bus->children, sibling) {
         if (kid->child == child) {
             char name[32];

             snprintf(name, sizeof(name), "child[%d]", kid->index);
             QTAILQ_REMOVE(&bus->children, kid, sibling);

             /* This gives back ownership of kid->child back to us.  */
             object_property_del(OBJECT(bus), name, NULL);
             object_unref(OBJECT(kid->child));
             g_free(kid);

+           bus->num_children--;

             return;
         }
     }
}

Change the line of code in the qbus_is_full() function in
qdev_monitor.c:


static inline bool qbus_is_full(BusState *bus)
{
     BusClass *bus_class = BUS_GET_CLASS(bus);
-    return bus_class->max_dev &&
-           bus->max_index >= bus_class->max_dev;
+    return bus_class->max_dev &&
+           bus->num_children >= bus_class->max_dev;
}



> 
>> +
>>               /* This gives back ownership of kid->child back to us.  */
>>               object_property_del(OBJECT(bus), name, NULL);
>>               object_unref(OBJECT(kid->child));
> 


