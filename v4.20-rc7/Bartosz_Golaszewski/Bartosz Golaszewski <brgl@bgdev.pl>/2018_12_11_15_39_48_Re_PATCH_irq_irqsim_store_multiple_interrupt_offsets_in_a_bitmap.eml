Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 12 Dec 2018 08:48:22 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id EB67A580380;
	Tue, 11 Dec 2018 07:40:05 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga007-1.jf.intel.com with ESMTP; 11 Dec 2018 07:40:05 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ARQENoxco8PZVDbQFZPFnlsMFlGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc6+bRKN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRODYOy?=
 =?us-ascii?q?bYQBD+QPM+VFoYfju1QAogC+BRGuCe701j9In2X70bEm3+g9EwzL2hErEdIUsH?=
 =?us-ascii?q?TTqdX4LLofXvqvzKnUyjXDdPJX0ir85ojPdhAuu+qMXLNufsvf0kkvFALFhUiX?=
 =?us-ascii?q?pIP+JTOV2eANvnOA4OpvSO2glXAnpxtpojir38ohjJTCiIwSylDB7yp5wYA1KM?=
 =?us-ascii?q?W7SEFle96kFoVftyWAO4txWMMiTGdlszs5xL0eoZO3YjQGxZA9yxLCZfGLbZKE?=
 =?us-ascii?q?7g/gWeqNOzt1hXBodKqhixqu9UWs0O7xW8mu3FpXrydIk8PAum0J2hHd7MWMV+?=
 =?us-ascii?q?Fz8V272TmV0gDe8uFELl4wlarcM5Mh3LEwmYQJsUjZHS/5hl/2jKmIeUUg4OSo?=
 =?us-ascii?q?7P7nYrr+qp+dMY97lB3+P7wwlsCjBek0KBUCUmaF9eimybHu/lH1TK9Lg/A0iq?=
 =?us-ascii?q?XZtYrVJcUfpq63GQ9V1YMj5g67Dzen1tQYgHYGIEtGeB2ZlYjpPU/BIPThAfe4?=
 =?us-ascii?q?jVWslilkx+rdM73/DZXCMGLDnK3ifblj8U5czhQ8zdRF65JTELEBL+r/WlXtu9?=
 =?us-ascii?q?zAEh85Lwu0zv7jCNV81YMRR3iDA6CEMK7JtV+I5+QvI/SDZYMPuTb9LeQl6ODq?=
 =?us-ascii?q?jXMjhVAdeqyp14MNaH+kBvRmP1mZYX30j9cBC2gKvxY+Q/btiFGYUT5Temy9X6?=
 =?us-ascii?q?Qz5jwgDIKmDIHDRp2igbCb3Se7GIFWaX5CClyWDXjocICEUe8WaC2OOs9hjiAE?=
 =?us-ascii?q?Vb+5Ro8j0hGhqhX2y7lgLurS/C0Ysonu1Nx05+3ViBEz+iZ4D8Wb02GRUW50mn?=
 =?us-ascii?q?kESCMx3KB6uUZ90EuM0bBkg/xEEtxe/+lGUhw6NZ7bzOx2EcryVRjDftqSTFam?=
 =?us-ascii?q?Q9OmASw+T94rwt8OZVp9FMumjhzZwyWqBLoVnaSRBJMo6qLcw2TxJ8FlxnbFzq?=
 =?us-ascii?q?YhiUMqQs9ONWK8gK5/+BPeB4rIk0Wfiqarer4Q3C/L9Gef02WOuFtUXxJ3UaXA?=
 =?us-ascii?q?RXoffFfZrczl5kPeSL+jEakoPRFfycGcMKdKasfmjVNdRPj9PtTSZGaxm2S1BR?=
 =?us-ascii?q?aM3b6MaIvqe2MA3CTSEkQEkgYT/WqYOgg6HCuuv2XeDDl2H1L1f0zs6fV+qG+8?=
 =?us-ascii?q?TkIs0g6FdVNh2KSv9h4Vn/OcTegT0awCuCo6rzV0HVC938/ZCtaapgpherlcbs?=
 =?us-ascii?q?054FtdyW3ZsAl9NIS6L69+nl4ebxh3v0T22hVrC4VAlM8qrG8qzAtyM66YzElN?=
 =?us-ascii?q?dzSC3ZD0O73XLGby8Qura67X3FHezdmX9r0O6PQ+t1XsogWpGlA+/HVg1tlfy2?=
 =?us-ascii?q?Gc6YnSDAoOTZLxVV46+AJ+p77EbSgy+YPV2Wd3PqmprzDNwdQpBOgiyha+ZNpf?=
 =?us-ascii?q?NKKEFAnvE8wVHcSuKeoqm0S3YRIAJuxd6Kk0P8a+ffucxKGrJPpgnC6hjWlf4I?=
 =?us-ascii?q?F9z1iA+DZmRu/J35YK2feY3gScWjf4jVehtN33mI9eaTETGGq/1TbrBIpLaqJu?=
 =?us-ascii?q?eoYLDH+kI9erydVmm57tR3lY+Ua5B1MHxMCmYwCSYEH63QFK00QYv2anmSqhwz?=
 =?us-ascii?q?NoiT4pqreQ0zLUw+TlchoKIWpLRGhkjVfxLom4ldEaXE60bwc3kBup/1r1x69e?=
 =?us-ascii?q?pK5nNWncXV9IfzTqL2FlSqaxtruCb9RP6Z8yqiVXTeK8bEueSr78pRsaziziE3?=
 =?us-ascii?q?FfxDA9azGlpJH5kwZmh2KaKXZ5tGDZdt1oxRfD+NzcQuZc3jgcSyliijnXBV+8?=
 =?us-ascii?q?M8Oy/dqOlJfDseG+V2S/WZ1VaiTryYKAtC2m5WxlGxG/nvazmsH5Hgg+yyP0y9?=
 =?us-ascii?q?5qVSDQphbmfobrz7i6Mf5gfkRwBF7z8c16Fpt8kosxgpEdwnwahpST/Xoanmb/?=
 =?us-ascii?q?K9Rb2aTibHUTQT4H2cLa4A/g2Ed7NHKG25r5VmmBwstmf9S6YXkZ2iMn48BKFa?=
 =?us-ascii?q?eb9rpEnSRur1q8rALRZ+V9nzgHxfsv7n4an/8GuA43wiqBBbASGFFSPTbwmBSQ?=
 =?us-ascii?q?89C+sKJXaX6qcbix10pxh8qtDb+crQFHRHb2ZI0iEjRu4cVlP1LBy3nz6oDieN?=
 =?us-ascii?q?nNYtMfrByUkxHcj+dLLJI9jOYFhS1iOWjlp30q1/Y7jQBy3ZG9pIWHN2Jt/Kej?=
 =?us-ascii?q?Dh9ZLDL1Yd4T+ir2jaZfhcuW24GvHpN8GjQERpfoTPSoEC4MuvTjLQqBDDo8qn?=
 =?us-ascii?q?KDE7rFAQCf8Ftmr27IE52zLH6YPn4ZzdF/RBWHIExfnRsZXDE7np4/CwCry9bt?=
 =?us-ascii?q?cEZ/5jAN+FH4rgFAxf5vNxn6Sm3fvhunai8oSJiDKxpb9gNC6F3QMcOA9eJ/BT?=
 =?us-ascii?q?1Y8oeirAyQKWybegJIAnsSWkGfA1DjP7+u5cTP8uSCB+q+KefObquKqeBES/iI?=
 =?us-ascii?q?wpev2JN8/zmQLsWPImViD/oj10tDWnB5Bt3ZmygVRCwRjS7NdMmbpBGz+iBsqs?=
 =?us-ascii?q?C/8fLrWB/g5IeVCrtSN8lv9A6ygauZK+GQgyN5Iy5C1pwQ3X/I1KQf3FkKhiFu?=
 =?us-ascii?q?aTatELcAtS3MTK7Kma9XFRkbayxtO8tS8qI8xRJAOcraitPzy755geQ5C1ZDVV?=
 =?us-ascii?q?z9hM6pYdYGLH26NFPCHEyLLqiJJSXXw8HrZqOxUadfjPhPuB2qpzmaE1XvPjCC?=
 =?us-ascii?q?lzTyUxCvMOdMjDyUPRBEuYG9dAptBnbnTN78dhK7N9p3hyUswbIonnPKKXIcMT?=
 =?us-ascii?q?9kfkNRr72Q6DlUjellF2Nd7npqM++Elj2d7+nZLJYWrPRqDj51l+Jc/HQ11b9V?=
 =?us-ascii?q?4DtYS/xynSvYtsRurE2+kumT1jpnVwJDqzZRi4KNuEViOKPZ+YFBWHbE5h0N62?=
 =?us-ascii?q?qQBg8Op9tkDN3vpq9RxsLOlKL1NDdN7dbU8dEACMjTLcLUeEYmZD/gAjWcPhoD?=
 =?us-ascii?q?Qj+mLymLgkVHm7eA53uar5UggpH2ndwFTboNB3IvEfZPIE1/ANsZMt9YWTctiq?=
 =?us-ascii?q?yWk9UL5DLqpgPeQO1QsZzKSLSKBaO8e36ikbBYak5QkvvDJoMJO9i+ghQ6Zw?=
 =?us-ascii?q?=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AqAABe2Q9ch0O0hNFkHgEGBwaBUggLA?=
 =?us-ascii?q?YJpgQIng3uUKYINFIkNjjGBJANMLAsIAYRAgm4iNQgNAQMBAQEBAQECARMBAQE?=
 =?us-ascii?q?IDQkIKSMMgjYkAYJiAQIDAQIgBBkBATcBBQkBAQoLDQICJgICAx8SAQUBHAYTB?=
 =?us-ascii?q?RaDBgGBdA0FCpl8PIodcHwNJoJ2AQEFgTABhXUDBRJ5izAXPoFBhCOEWQImgwS?=
 =?us-ascii?q?CV6B9CYJfhCqKSBiRQCyNaosOMBOBEwGCDH4HbAaCAQEzghsMF4NKhRSFQD4zA?=
 =?us-ascii?q?YEEAQGIFQ4XgicBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AqAABe2Q9ch0O0hNFkHgEGBwaBUggLAYJpgQIng3uUKYI?=
 =?us-ascii?q?NFIkNjjGBJANMLAsIAYRAgm4iNQgNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkA?=
 =?us-ascii?q?YJiAQIDAQIgBBkBATcBBQkBAQoLDQICJgICAx8SAQUBHAYTBRaDBgGBdA0FCpl?=
 =?us-ascii?q?8PIodcHwNJoJ2AQEFgTABhXUDBRJ5izAXPoFBhCOEWQImgwSCV6B9CYJfhCqKS?=
 =?us-ascii?q?BiRQCyNaosOMBOBEwGCDH4HbAaCAQEzghsMF4NKhRSFQD4zAYEEAQGIFQ4Xgic?=
 =?us-ascii?q?BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,342,1539673200"; 
   d="scan'208";a="57001297"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 11 Dec 2018 07:40:04 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727234AbeLKPkA (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 11 Dec 2018 10:40:00 -0500
Received: from mail-it1-f193.google.com ([209.85.166.193]:52864 "EHLO
        mail-it1-f193.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726499AbeLKPkA (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 11 Dec 2018 10:40:00 -0500
Received: by mail-it1-f193.google.com with SMTP id g76so4171407itg.2
        for <linux-kernel@vger.kernel.org>; Tue, 11 Dec 2018 07:39:59 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=bgdev-pl.20150623.gappssmtp.com; s=20150623;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc:content-transfer-encoding;
        bh=oxlD4PY/Dgy4iEMTeNMqvzVW/27wyIOk69OATQ03aKw=;
        b=h8xgu8CqiWdzwhyLEzoZ7eEYZtvWJmhGHHjyXeO2f/D8kOEFsDuel32cALJniEA2u2
         uyb6RFhd98Ep+AFzc3+DqriK+wld74EGymsoY4TEnGusKhspx/DKFgPoW2oKPBNs4rN6
         PoipQaBS/MeE+c7ViOr9hLSQc/FZ7sXV88+BbY6rarKVaEIa5fC3ohAiPOIRwqD/mQWx
         MlaGB0NRHOE1mCZdW/OnaOGX0BoRGLUlVnjfNsjIMSb46el1WyojZrU+bava8JIHitMe
         bjv4tRGoAXYVf9cdNwiKVFJ8tigMLQT1j5CltK7VXJSNUzGCAx3kCaB1j0CUSOC9rbn7
         cUfw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc:content-transfer-encoding;
        bh=oxlD4PY/Dgy4iEMTeNMqvzVW/27wyIOk69OATQ03aKw=;
        b=eGsfIJeI6LTWBxz+CW+9Nn8awumyhiKr7sQPjXDoQVscDRY5fZRZdiT9I9kOlePumw
         nB1ovxXpjsi/ZexTrHLiYTDWtChFE4HEgCtrvAZ5WviPCF+LbGNBOIlx6x38ca7dB10I
         5ZZs1Xvi7tp+PPITd/ZywRj8xemd3Upo5zF9zkLhaKcplSn5UwCmaBCyazdKyOEDHZ0o
         nU3RhevS0xrr2y0n+hUBRQJ8jegQUr/szsgjoZQ5mk4OuAxuRtU5FazLWhKpYXQVLK3T
         kCGj6P/iG1ZxlgQCFJTOdl7OJ7Jo7uveKZOzrcMxNGjTWepnvinBPU7WkjPQ2UYVBU73
         GcFw==
X-Gm-Message-State: AA+aEWa3/P8Q4aEfummFjsuEpKP1iDv+QqGlWdzyfSLMzQNCZFUvkZzj
        o6qpxog9zFPlzKdt2LwnR2B2vYVbLyOdzj9SgTHhUw==
X-Google-Smtp-Source: AFSGD/VRN8Mr4VH+rwPw6BzXt9+b62cx1NC/ze3VdaXRZXg7+bk5dYa+M67lKLEcOsFyktgfmUaDLj/iTMKoFR1iHVU=
X-Received: by 2002:a02:3d42:: with SMTP id n63mr16594296jan.136.1544542799116;
 Tue, 11 Dec 2018 07:39:59 -0800 (PST)
MIME-Version: 1.0
References: <20181109172132.30939-1-brgl@bgdev.pl> <CAMRc=MeY_CbdQDF7UOai5MW3OLF1u+a04AAyq5bsux8_Fv5DVQ@mail.gmail.com>
 <204b38d9-7658-f21d-3153-e1d9db749550@arm.com>
In-Reply-To: <204b38d9-7658-f21d-3153-e1d9db749550@arm.com>
From: Bartosz Golaszewski <brgl@bgdev.pl>
Date: Tue, 11 Dec 2018 16:39:48 +0100
Message-ID: <CAMRc=Me9Y99ORtu8ekJE+U0--f2-kArqosQx5Gc5is-S6DQGkQ@mail.gmail.com>
Subject: Re: [PATCH] irq/irq_sim: store multiple interrupt offsets in a bitmap
To: Marc Zyngier <marc.zyngier@arm.com>
Cc: Thomas Gleixner <tglx@linutronix.de>,
        =?UTF-8?Q?Uwe_Kleine=2DK=C3=B6nig?= 
        <u.kleine-koenig@pengutronix.de>,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

wt., 11 gru 2018 o 15:42 Marc Zyngier <marc.zyngier@arm.com> napisa=C5=82(a=
):
>
> On 11/12/2018 14:02, Bartosz Golaszewski wrote:
> > pt., 9 lis 2018 o 18:21 Bartosz Golaszewski <brgl@bgdev.pl> napisa=C5=
=82(a):
> >>
> >> Two threads can try to fire the irq_sim with different offsets and wil=
l
> >> end up fighting for the irq_work asignment. Thomas Gleixner suggested =
a
> >> solution based on a bitfield where we set a bit for every offset
> >> associated with an interrupt that should be fired and then iterate ove=
r
> >> all set bits in the interrupt handler.
> >>
> >> This is a slightly modified solution using a bitmap so that we don't
> >> impose a limit on the number of interrupts one can allocate with
> >> irq_sim.
> >>
> >> Suggested-by: Thomas Gleixner <tglx@linutronix.de>
> >> Signed-off-by: Bartosz Golaszewski <brgl@bgdev.pl>
> >> ---
> >>  include/linux/irq_sim.h |  2 +-
> >>  kernel/irq/irq_sim.c    | 23 +++++++++++++++++++++--
> >>  2 files changed, 22 insertions(+), 3 deletions(-)
> >>
> >> diff --git a/include/linux/irq_sim.h b/include/linux/irq_sim.h
> >> index 630a57e55db6..4500d453a63e 100644
> >> --- a/include/linux/irq_sim.h
> >> +++ b/include/linux/irq_sim.h
> >> @@ -16,7 +16,7 @@
> >>
> >>  struct irq_sim_work_ctx {
> >>         struct irq_work         work;
> >> -       int                     irq;
> >> +       unsigned long           *pending;
> >>  };
> >>
> >>  struct irq_sim_irq_ctx {
> >> diff --git a/kernel/irq/irq_sim.c b/kernel/irq/irq_sim.c
> >> index dd20d0d528d4..98a20e1594ce 100644
> >> --- a/kernel/irq/irq_sim.c
> >> +++ b/kernel/irq/irq_sim.c
> >> @@ -34,9 +34,20 @@ static struct irq_chip irq_sim_irqchip =3D {
> >>  static void irq_sim_handle_irq(struct irq_work *work)
> >>  {
> >>         struct irq_sim_work_ctx *work_ctx;
> >> +       unsigned int offset =3D 0;
> >> +       struct irq_sim *sim;
> >> +       int irqnum;
> >>
> >>         work_ctx =3D container_of(work, struct irq_sim_work_ctx, work)=
;
> >> -       handle_simple_irq(irq_to_desc(work_ctx->irq));
> >> +       sim =3D container_of(work_ctx, struct irq_sim, work_ctx);
> >> +
> >> +       while (!bitmap_empty(work_ctx->pending, sim->irq_count)) {
> >> +               offset =3D find_next_bit(work_ctx->pending,
> >> +                                      sim->irq_count, offset);
> >> +               clear_bit(offset, work_ctx->pending);
> >> +               irqnum =3D irq_sim_irqnum(sim, offset);
> >> +               handle_simple_irq(irq_to_desc(irqnum));
> >> +       }
> >>  }
> >>
> >>  /**
> >> @@ -63,6 +74,13 @@ int irq_sim_init(struct irq_sim *sim, unsigned int =
num_irqs)
> >>                 return sim->irq_base;
> >>         }
> >>
> >> +       sim->work_ctx.pending =3D bitmap_zalloc(num_irqs, GFP_KERNEL);
> >> +       if (!sim->work_ctx.pending) {
> >> +               kfree(sim->irqs);
> >> +               irq_free_descs(sim->irq_base, num_irqs);
> >> +               return -ENOMEM;
> >> +       }
> >> +
> >>         for (i =3D 0; i < num_irqs; i++) {
> >>                 sim->irqs[i].irqnum =3D sim->irq_base + i;
> >>                 sim->irqs[i].enabled =3D false;
> >> @@ -89,6 +107,7 @@ EXPORT_SYMBOL_GPL(irq_sim_init);
> >>  void irq_sim_fini(struct irq_sim *sim)
> >>  {
> >>         irq_work_sync(&sim->work_ctx.work);
> >> +       bitmap_free(sim->work_ctx.pending);
> >>         irq_free_descs(sim->irq_base, sim->irq_count);
> >>         kfree(sim->irqs);
> >>  }
> >> @@ -143,7 +162,7 @@ EXPORT_SYMBOL_GPL(devm_irq_sim_init);
> >>  void irq_sim_fire(struct irq_sim *sim, unsigned int offset)
> >>  {
> >>         if (sim->irqs[offset].enabled) {
> >> -               sim->work_ctx.irq =3D irq_sim_irqnum(sim, offset);
> >> +               set_bit(offset, sim->work_ctx.pending);
> >>                 irq_work_queue(&sim->work_ctx.work);
> >>         }
> >>  }
> >> --
> >> 2.19.1
> >>
> >
> > Ping and Cc'ing Marc Zyngier. Any chance of getting this in for 4.21?
>
> Bizarrely, I can't find any trace of this patch in my Inbox. I've now
> cherry-picked from https://lore.kernel.org/patchwork/patch/1009297/ .
>

Your e-mail doesn't pop up with get_maintainer on this patch. That's
why you didn't get it initially.

Bart
