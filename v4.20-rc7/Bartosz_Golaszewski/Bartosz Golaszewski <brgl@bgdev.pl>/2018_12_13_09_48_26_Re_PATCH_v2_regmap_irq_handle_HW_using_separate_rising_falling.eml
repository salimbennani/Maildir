Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 21:22:00 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id CE248580380;
	Thu, 13 Dec 2018 01:51:44 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga006-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 13 Dec 2018 01:51:43 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AXIRnWxbSZ3jr2A1BSWoQjaj/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpci/Zh7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyNOAo2+?=
 =?us-ascii?q?YIUPAeQPPvtWoZfhqFUBthu+HQuhCfjzyj9RnHL6wbE23/gjHAzAwQcuH8gOsH?=
 =?us-ascii?q?PRrNjtKaodS/q1zLXPzTXYbvJdxDbz6I/Mch87uvGNXKx/cMTKyUksFgPOk1Kd?=
 =?us-ascii?q?ppf/PzOa0uQAqHOU7+V9Wu2xlW4rsRlxojy2y8oql4LHhZoVx0ja+SllxIs5P8?=
 =?us-ascii?q?C0RUBlbdK+DZddtD2WO5F3T84gW21kpjo2x7kctZO4fCUG0okryh/eZvCdcoWF?=
 =?us-ascii?q?4hTuX/uLLzhinnJqYre/ig6y8Ue+zu38UdG50EhFriVbiNnArHMN2ALJ6siBVP?=
 =?us-ascii?q?R9+l2t2TGV1wDc8u1EIEY0mrTHK5M53LI8ip4evV7eEiL4hkn6lrKae0Y49uSy?=
 =?us-ascii?q?6unqYK3qppqGOI91jgH+PL4umsu6AekgNggOXm6b+fmz1bH6/k32Xq9Kjvsona?=
 =?us-ascii?q?ndqZzaIsoapqinDA9PyYsj9Rm/ACm80NgCnnkIMkhFeBSZgIjtIV3OJ+r4Dfin?=
 =?us-ascii?q?j1S2jDhr3+zGPqHmApjVKnjDkbThcqhn509T1Qo+1tRf55NSCrEcL/P/QE7xtN?=
 =?us-ascii?q?rEDhAnNwy42froCNJ41okGQ2KAHreZML/OsV+P/u8vI/ODZI4JuDnnLPgp/f7u?=
 =?us-ascii?q?jWIjll8bcqmkxp8XaHG+HvR7LESVe3vsgtEdEWgUugoyVvDliFqHUTRLfXa9Q7?=
 =?us-ascii?q?o85i0nCIKhFYrDRIetj6Kb0Ce4GZ1WYGZGCleXHHfsdoWEXeoMaS2ILs9glDwE?=
 =?us-ascii?q?SaauS4s72R6ysw/6zqJtLvDI9S0AqZLjyN916vXJmhEp9Tx0CMed33uXT25unG?=
 =?us-ascii?q?MFXDs23KF5oUxgxVaPy6l4g/pEFdNN4/NFSBs1NZnZz+ZiEdD9RhrBfsuVSFah?=
 =?us-ascii?q?WtimAis+TtQrz98KYkZyAdOijh/Y0iquAr8VkaGLBZMu/qLd2XjxO9hyy3Lc2K?=
 =?us-ascii?q?Y9iFkmR9NFNXe6ia5n6wjTG4nJnl2EmKmwa6QTwjTB9GeZwmqIp0FXTghwXaLB?=
 =?us-ascii?q?XXAcY0vWqc/05kfDT7+oFLQmPRFNyc+EKqtWdNLpiU9KS+vkONTbe2ixgXu/BQ?=
 =?us-ascii?q?6UxrOQa4rnY3gS0z/DCEcaiQwT/WyJNQ4lBii/pWLTFzhuFVPpY0Px/uhysnK7?=
 =?us-ascii?q?Tkkozw6Ua01tzaa6+hkQhfaEUfMcwqoEuDs9qzVzBFu9w9PWC9+Hpwp9fKVdYc?=
 =?us-ascii?q?kx4Etd2WLerQx9Op2gL6ZthlMFdwR3vkXu1wh4C4lakMgqqm8qwxR2Ka6CzFxB?=
 =?us-ascii?q?cDaY14jqOrLLMmny4Ayva6nO117E1NaZ5KgO5+o4qln5pw6pC1ct/G9h09lW1H?=
 =?us-ascii?q?uc+I7HDA4TUZL3T0Y2+AJ2p7DcYikh+YzU0WdgPrWzsj/Hw9gpHvcqyg68f9dD?=
 =?us-ascii?q?N6OJDA/zE9AAC8eyMuArmlipYQgCPOBd76M0O8Kmd/2b2K+kJupgnTSmjXhZ74?=
 =?us-ascii?q?B5yE6D6y18SuvQ1ZYf3/6YxheHVyv7jFq5qMD3mJxLaisIHmWizijoHohRabNo?=
 =?us-ascii?q?fYYKEGuhP9e4xtFjiJHzQX5Y81ijCkgC2M+ofxqSclP80RdR1UQRvXyohy+4wy?=
 =?us-ascii?q?ZonDEuq6qVxDbOzPj6dBobJm5LQ3FvjFftIYSuj9EWRlOobxUvlBa+4Ub6xq5b?=
 =?us-ascii?q?pLlwLmXJQEdIeTT2IH9mUqeqqrWCZMtP4osysSpLSOS8fUyaSrnlrhsYySzjBW?=
 =?us-ascii?q?hexDM8dz2woZX2hR96iGGcLHZ1snXZf9p9xRPe5NzaWP5Q0SAKRCh+iTnLGFe8?=
 =?us-ascii?q?O8Ol8smTl5fGquq+TX6uVoVPcSn3yoONrCu66ndtARGlnfCzm9vnHBM+0S/60d?=
 =?us-ascii?q?lqSCrJoAz9Yonty6S1L+ZnclN0C1/77spwApt+nZcohJEMxXgagY2Y/Xkdnmfy?=
 =?us-ascii?q?K9lb2b/+Y2ALRT4E2NPV5Anl2Et+LnOG3Y75V3Odwtd/aNm+eG8ZxiU978VSAq?=
 =?us-ascii?q?eO8LNEhTd1oka/rQ/JZPh9nzQdxuE05H8Une4JoxYtwTuHAr8JA0ZYJyPsmg+M?=
 =?us-ascii?q?79C/qqVXeWmufaKx1Ep4gdCuErWCrhtAV3b+f5coBTVw4dlnMFLQzH3z7ZnpeM?=
 =?us-ascii?q?XXbdIWrBGVkg3Pj+5IKJIqjfoKhDFqOWb8vX0j1u46ggZi3ZC8vIibNWpt+Li1?=
 =?us-ascii?q?DQJfNj3wf8kT4C3ijb5CnsaK2ICiBo5uFS8MXJvsUPKkCjYSten8OgaKET08rG?=
 =?us-ascii?q?qbGLXFEQ+e7kdms2zAE5SxO36LI3kZyM1oRAOBK0xHnAAUQDI6k4Y7Fg+wwczu?=
 =?us-ascii?q?blx56ioN5lLiqRtM1+FoNwT5UmjFvwelcTM0SJmZLBpL4QBO/UbVMcqC7u1tGy?=
 =?us-ascii?q?FU5IGurAuIKmaDfQRHEXkJWlCYB1DkJrSv5d7A8/WBBuqjNfTOZ6+CqfdZV/eO?=
 =?us-ascii?q?ypKiyY9m/zeKNsWSMXhuFfw72kxfXX9nH8TVgSkASysSlyjVdc6UuA+8+jFrrs?=
 =?us-ascii?q?C46PnrWBzg5YqMC7tRMNVj4RO2gb2EN+6fmil5MytY1ogXyH/Mybgf2kMSii50?=
 =?us-ascii?q?ezmsF7QAqTDCTKbKlqBLCB4bbjt5NNFU4KIkwglNJcnbh8vv2b5llfE1EUlKVF?=
 =?us-ascii?q?z7lsGtZMwHOGW9NFLBBEaWO7WKPzzLw8frYayiTb1clvlbtxq1uTyDCU/sIiyD?=
 =?us-ascii?q?lyX1VxCoKexMkCCbPBlEtI6haBpiFWjjQ8zgahCgNN93jDs2waA7h3/QNG4cNy?=
 =?us-ascii?q?R8fF1JrrGK8SxYhfB/EXRb7nV5NemEhzqZ7+7AJ5cWq/RrBCF0l+Nc4HsiyrpV?=
 =?us-ascii?q?7DtLRPp6mCbJqt5uolemkvSAyzZ9URpOrCpLi5yPvUl4JarZ8ZxACj74+0co5H?=
 =?us-ascii?q?+TQz4QoMRjQonloadXzNnCvKH+MjFP95TT58RKVObOL8fSGnM7LR3yCnb7Cw8M?=
 =?us-ascii?q?ViymKnrchgQJmuud8lWfoZQ3tN70nMxdGfdgSFUpG6ZCWQxeF9sYLcIyB2t8nA?=
 =?us-ascii?q?=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AdAAD6KhJch0O0hNFNFh4BBgcGgVEJC?=
 =?us-ascii?q?wGDayeDfJY4FIkNjjOBJANMLBMBhECDAyI0CQ0BAwEBAQEBAQIBEwEBAQgNCQg?=
 =?us-ascii?q?pIwyCNiQBgmEBAQEBAgEBAiAEGQEBNwEEAQkBAQoLAwcFAg8XAgIDHxIBBQEcB?=
 =?us-ascii?q?hMFA4MZgXQFCAWbCjyKHXB8M4J2AQEFhzAIEnmLMRc+gUGBEYMShDsDQ4MEgle?=
 =?us-ascii?q?JNwYEhgiBT495CYJhjngYgVyPboozjwcwE4ESgg5+B2wGgjWCGwwXEoM4ilQ+M?=
 =?us-ascii?q?wGBBAEBihOCPgEB?=
X-IPAS-Result: =?us-ascii?q?A0AdAAD6KhJch0O0hNFNFh4BBgcGgVEJCwGDayeDfJY4FIk?=
 =?us-ascii?q?NjjOBJANMLBMBhECDAyI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmEBA?=
 =?us-ascii?q?QEBAgEBAiAEGQEBNwEEAQkBAQoLAwcFAg8XAgIDHxIBBQEcBhMFA4MZgXQFCAW?=
 =?us-ascii?q?bCjyKHXB8M4J2AQEFhzAIEnmLMRc+gUGBEYMShDsDQ4MEgleJNwYEhgiBT495C?=
 =?us-ascii?q?YJhjngYgVyPboozjwcwE4ESgg5+B2wGgjWCGwwXEoM4ilQ+MwGBBAEBihOCPgE?=
 =?us-ascii?q?B?=
X-IronPort-AV: E=Sophos;i="5.56,348,1539673200"; 
   d="scan'208";a="55014540"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 13 Dec 2018 01:51:42 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728138AbeLMJsj (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 13 Dec 2018 04:48:39 -0500
Received: from mail-io1-f65.google.com ([209.85.166.65]:39916 "EHLO
        mail-io1-f65.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727867AbeLMJsi (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 13 Dec 2018 04:48:38 -0500
Received: by mail-io1-f65.google.com with SMTP id k7so1090024iob.6
        for <linux-kernel@vger.kernel.org>; Thu, 13 Dec 2018 01:48:37 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=bgdev-pl.20150623.gappssmtp.com; s=20150623;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc:content-transfer-encoding;
        bh=JnzthssgCHCyfK4Tvc+YTxwLve2ENC9DKMVrmVFkkUs=;
        b=S1aL6XSnLAEEq5tgGi+0Z/TjocDAIoK1QWrFbT8riEH5DN9F6zBZnWtdJMzhPu/5Fc
         aRQg+w+D6YRhiVmMdADgwoqPtTduqhjtrkGfjLrhq+fnOE242KMKV7dwRhE7LXq3AqgZ
         lSiuQR3qN4Yr99Too7Jr3Jdr6hUli0yOW/CPA9bxvpLj+Y4Tfx8imy4A79bzGdH5W2U+
         DT9YogT09N40z/2YX6SICj0jxnMXGy8X7XUaYtk8dqhz+DuW8QOtAXJCtaBglLGqqBO6
         LAH8X7B7ojMl5O6lzuO3WQ3NVdqPfrg+F76SDB5hGsPm+woS2DxfkUlcILtmh5otpI+j
         dOcA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc:content-transfer-encoding;
        bh=JnzthssgCHCyfK4Tvc+YTxwLve2ENC9DKMVrmVFkkUs=;
        b=XRRLY38aTf+PLqCPPeHAOySo+kKdpmqGsBEA9BR1sczV6gjhQ08krXVy2sbJYV51qN
         x1FGO2J2250ZYuAMR0JumroX34m503f+xQg+LoxtU0+Nmk5C6R/oG1QzJ0MjUcb+o9G/
         X8H9fdNnAcEq00LduTIgo9h/yoekDhXdzlhLLsehW4xyGep/kXya+jkurdRQXgQ6ujT4
         bWYOKjoaAHM+a9Y55C17oI+ILQ6bROZX0Bg43eqIaXTuLA0ikmamPoN/NosqSNNcoVhb
         U3PG1zbARKjczkGKowbUj3/a9fjBVvD3ZjYemMRc/VT3Ah8fpjM5SBXb8xg6UstHcFMZ
         f9ZQ==
X-Gm-Message-State: AA+aEWb6FjcoASNos2flnD7T9C/4IXCZ2qUpGlHl3N0QaVy8Sa+Jd97/
        vOBEfl/4887Rxbu4rlBUQvrqTU89f3ZPaTIskfIWjA==
X-Google-Smtp-Source: AFSGD/VqX131FiAO8gwmgKTGw/XoePJFck5bK4hOp4vP43oQa0SRKlHay9q3ILHwulwNuIbRs6A3oP2rYIFVmWis6HI=
X-Received: by 2002:a5e:aa06:: with SMTP id s6mr1864050ioe.187.1544694517480;
 Thu, 13 Dec 2018 01:48:37 -0800 (PST)
MIME-Version: 1.0
References: <20181207130452.1910-1-brgl@bgdev.pl>
In-Reply-To: <20181207130452.1910-1-brgl@bgdev.pl>
From: Bartosz Golaszewski <brgl@bgdev.pl>
Date: Thu, 13 Dec 2018 10:48:26 +0100
Message-ID: <CAMRc=MeSr80=k10foLpQZwos2zRnGtD42mQA2bcKXXL_WEWLRA@mail.gmail.com>
Subject: Re: [PATCH v2] regmap: irq: handle HW using separate rising/falling
 edge interrupts
To: Mark Brown <broonie@kernel.org>
Cc: Linux Kernel Mailing List <linux-kernel@vger.kernel.org>,
        "Rafael J . Wysocki" <rafael@kernel.org>,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        Bartosz Golaszewski <bgolaszewski@baylibre.com>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

pt., 7 gru 2018 o 14:04 Bartosz Golaszewski <brgl@bgdev.pl> napisa=C5=82(a)=
:
>
> From: Bartosz Golaszewski <bgolaszewski@baylibre.com>
>
> Some interrupt controllers use separate bits for controlling rising
> and falling edge interrupts in the mask register i.e. they have one
> interrupt for rising edge and one for falling.
>
> We already handle the case where we have a single interrupt in the
> mask register and a separate type configuration register.
>
> Add a new switch to regmap_irq_chip which tells the framework to use
> the mask_base address for configuring the edge of the interrupts that
> define type_falling/rising_mask values.
>
> For such interrupts we never update the type_base bits. For interrupts
> that don't define type masks or their regmap irq chip doesn't set the
> type_in_mask to true everything stays the same.
>
> Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
> ---
> This is a second try at supporting HW which uses separate interrupts
> for rising/falling edge events.
>
> This time we're adding an explicit flag for such chips.
>
> Below is an example of the regmap irq chip configuration that makes
> use of this new feature:
>
> static const struct regmap_irq foobar_irqs[] =3D {
>         /*
>          * Make two interrupts into a single virtual irq with
>          * configurable edge.
>          */
>         [FOOBAR_INT_EDGE] =3D {
>                 .reg_offset             =3D FOOBAR_INT_GLBL_OFFSET,
>                 /* mask is two bits here but regmap handles it nicely */
>                 .mask                   =3D FOOBAR_INT_GPIO_MSK,
>                 .type_falling_mask      =3D FOOBAR_INT_GPIO_F_MSK,
>                 .type_rising_mask       =3D FOOBAR_INT_GPIO_R_MSK,
>         },
>         /* Regular interrupt, nothing changes. */
>         [FOOBAR_INT_NOEDGE] =3D {
>                 .reg_offset             =3D FOOBAR_INT_GLBL_OFFSET,
>                 .mask                   =3D FOOBAR_INT_FOO_MSK,
>         },
>
> static struct regmap_irq_chip foobar_irq_chip =3D {
>         .name                   =3D "foobar-irq",
>         .irqs                   =3D foobar_irqs,
>         .num_irqs               =3D ARRAY_SIZE(foobar_irqs),
>         .num_regs               =3D 2,
>         .status_base            =3D FOOBAR_REG_INT_GLBL,
>         .mask_base              =3D FOOBAR_REG_INTM_GLBL,
>         .type_in_mask           =3D true,
>         /* NOTE: we're not defining type_base here. */
> };
>

Hi Mark,

would you be willing to pick this one up for v4.21 or do you have some
objections? If it would go in in the next merge window then it would
make it easier to merge my driver afterwards since I could already
make use of it.

Bart

>  drivers/base/regmap/regmap-irq.c | 64 ++++++++++++++++++++++----------
>  include/linux/regmap.h           |  4 ++
>  2 files changed, 48 insertions(+), 20 deletions(-)
>
> diff --git a/drivers/base/regmap/regmap-irq.c b/drivers/base/regmap/regma=
p-irq.c
> index 429ca8ed7e51..603b1554f81c 100644
> --- a/drivers/base/regmap/regmap-irq.c
> +++ b/drivers/base/regmap/regmap-irq.c
> @@ -157,20 +157,23 @@ static void regmap_irq_sync_unlock(struct irq_data =
*data)
>                 }
>         }
>
> -       for (i =3D 0; i < d->chip->num_type_reg; i++) {
> -               if (!d->type_buf_def[i])
> -                       continue;
> -               reg =3D d->chip->type_base +
> -                       (i * map->reg_stride * d->type_reg_stride);
> -               if (d->chip->type_invert)
> -                       ret =3D regmap_irq_update_bits(d, reg,
> -                               d->type_buf_def[i], ~d->type_buf[i]);
> -               else
> -                       ret =3D regmap_irq_update_bits(d, reg,
> -                               d->type_buf_def[i], d->type_buf[i]);
> -               if (ret !=3D 0)
> -                       dev_err(d->map->dev, "Failed to sync type in %x\n=
",
> -                               reg);
> +       /* Don't update the type bits if we're using mask bits for irq ty=
pe. */
> +       if (!d->chip->type_in_mask) {
> +               for (i =3D 0; i < d->chip->num_type_reg; i++) {
> +                       if (!d->type_buf_def[i])
> +                               continue;
> +                       reg =3D d->chip->type_base +
> +                               (i * map->reg_stride * d->type_reg_stride=
);
> +                       if (d->chip->type_invert)
> +                               ret =3D regmap_irq_update_bits(d, reg,
> +                                       d->type_buf_def[i], ~d->type_buf[=
i]);
> +                       else
> +                               ret =3D regmap_irq_update_bits(d, reg,
> +                                       d->type_buf_def[i], d->type_buf[i=
]);
> +                       if (ret !=3D 0)
> +                               dev_err(d->map->dev, "Failed to sync type=
 in %x\n",
> +                                       reg);
> +               }
>         }
>
>         if (d->chip->runtime_pm)
> @@ -194,8 +197,27 @@ static void regmap_irq_enable(struct irq_data *data)
>         struct regmap_irq_chip_data *d =3D irq_data_get_irq_chip_data(dat=
a);
>         struct regmap *map =3D d->map;
>         const struct regmap_irq *irq_data =3D irq_to_regmap_irq(d, data->=
hwirq);
> +       unsigned int mask, type;
> +
> +       type =3D irq_data->type_falling_mask | irq_data->type_rising_mask=
;
> +
> +       /*
> +        * The type_in_mask flag means that the underlying hardware uses
> +        * separate mask bits for rising and falling edge interrupts, but
> +        * we want to make them into a single virtual interrupt with
> +        * configurable edge.
> +        *
> +        * If the interrupt we're enabling defines the falling or rising
> +        * masks then instead of using the regular mask bits for this
> +        * interrupt, use the value previously written to the type buffer
> +        * at the corresponding offset in regmap_irq_set_type().
> +        */
> +       if (d->chip->type_in_mask && type)
> +               mask =3D d->type_buf[irq_data->reg_offset / map->reg_stri=
de];
> +       else
> +               mask =3D irq_data->mask;
>
> -       d->mask_buf[irq_data->reg_offset / map->reg_stride] &=3D ~irq_dat=
a->mask;
> +       d->mask_buf[irq_data->reg_offset / map->reg_stride] &=3D ~mask;
>  }
>
>  static void regmap_irq_disable(struct irq_data *data)
> @@ -430,6 +452,7 @@ int regmap_add_irq_chip(struct regmap *map, int irq, =
int irq_flags,
>         struct regmap_irq_chip_data *d;
>         int i;
>         int ret =3D -ENOMEM;
> +       int num_type_reg;
>         u32 reg;
>         u32 unmask_offset;
>
> @@ -479,13 +502,14 @@ int regmap_add_irq_chip(struct regmap *map, int irq=
, int irq_flags,
>                         goto err_alloc;
>         }
>
> -       if (chip->num_type_reg) {
> -               d->type_buf_def =3D kcalloc(chip->num_type_reg,
> -                                       sizeof(unsigned int), GFP_KERNEL)=
;
> +       num_type_reg =3D chip->type_in_mask ? chip->num_regs : chip->num_=
type_reg;
> +       if (num_type_reg) {
> +               d->type_buf_def =3D kcalloc(num_type_reg,
> +                                         sizeof(unsigned int), GFP_KERNE=
L);
>                 if (!d->type_buf_def)
>                         goto err_alloc;
>
> -               d->type_buf =3D kcalloc(chip->num_type_reg, sizeof(unsign=
ed int),
> +               d->type_buf =3D kcalloc(num_type_reg, sizeof(unsigned int=
),
>                                       GFP_KERNEL);
>                 if (!d->type_buf)
>                         goto err_alloc;
> @@ -600,7 +624,7 @@ int regmap_add_irq_chip(struct regmap *map, int irq, =
int irq_flags,
>                 }
>         }
>
> -       if (chip->num_type_reg) {
> +       if (chip->num_type_reg && !chip->type_in_mask) {
>                 for (i =3D 0; i < chip->num_irqs; i++) {
>                         reg =3D chip->irqs[i].type_reg_offset / map->reg_=
stride;
>                         d->type_buf_def[reg] |=3D chip->irqs[i].type_risi=
ng_mask |
> diff --git a/include/linux/regmap.h b/include/linux/regmap.h
> index a367d59c301d..b7aa50cfb306 100644
> --- a/include/linux/regmap.h
> +++ b/include/linux/regmap.h
> @@ -1131,6 +1131,9 @@ struct regmap_irq {
>   * @ack_invert:  Inverted ack register: cleared bits for ack.
>   * @wake_invert: Inverted wake register: cleared bits are wake enabled.
>   * @type_invert: Invert the type flags.
> + * @type_in_mask: Use the mask registers for controlling irq type. For
> + *                interrupts defining type_rising/falling_mask use mask_=
base
> + *                for edge configuration and never update bits in type_b=
ase.
>   * @runtime_pm:  Hold a runtime PM lock on the device when accessing it.
>   *
>   * @num_regs:    Number of registers in each control bank.
> @@ -1169,6 +1172,7 @@ struct regmap_irq_chip {
>         bool wake_invert:1;
>         bool runtime_pm:1;
>         bool type_invert:1;
> +       bool type_in_mask:1;
>
>         int num_regs;
>
> --
> 2.19.1
>
