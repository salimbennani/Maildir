Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  14 Dec 2018 08:41:39 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 4983058061F;
	Thu, 13 Dec 2018 12:16:00 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga002-1.jf.intel.com with ESMTP; 13 Dec 2018 12:16:00 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3As/gobRMslJmwuVWVK/Ml6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KPn8o8bcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRshfWSxfDI2h?=
 =?us-ascii?q?bIUPAeUOMvpFoIfypVQBowC+BRGuCe701j9FhWX70bEm3+k7EwzL2hErEdIUsH?=
 =?us-ascii?q?TTqdX4LKkdUO6rw6LVyDvDa+1Z2Tb76IfWaxwvpPeUXbRxccre1EIiEB7Fgk+T?=
 =?us-ascii?q?qYzhITyV1+INvHaC4+pjUuKglWgnqwB+ojW03scjlI/Jho0IylDY7yV5x4A1Jd?=
 =?us-ascii?q?y3SUJhfNGrDoJduieHPIV4RcMiRntnuCc8yrAeoZ60Yi4KyJs6xx7DcfyHdI6I?=
 =?us-ascii?q?4hPsVeqLPDh3mnRoc6+8iRaq6UWs1PHwW82u3FpXoCdJjMPAum0O2hDP8MSKS/?=
 =?us-ascii?q?lw8l+/1TqTywzf9+RJLEE2mKXHLpMsw7w9moYWvEjeAiP6hED7gLKLeUgh/+Wn?=
 =?us-ascii?q?9/jrb7P7rZGGLYB0kBvxMqE2l8y/H+s4Ng8OUnCF+eSzyrLj51f1QLZUgf0slK?=
 =?us-ascii?q?nWrpTaKd4cpq6jDA9Zyocj6xChADe6yNkUg2ULIVZfdB6agYXlJUvCLO37APuj?=
 =?us-ascii?q?mVihkTVmy+jDPrL7A5XNKnbDkK3mfbZ480NczAszzdZC55NbE70BI+z8WlX3tN?=
 =?us-ascii?q?PGCh81Kgu0wujhCNpjzIMTQnyPAqCHP6PIq1OI5fwgI/OKZIALvDbxMf8l5+Th?=
 =?us-ascii?q?jXMhg18SYbGp3YcLaHC/BvlmJ0SZYXnyjdsbHmYKoxEzTOjriF2ETD5SaGy+X6?=
 =?us-ascii?q?M65jEnFo2mCZ3PSZyqgLyExC27BIFZZnhaClCQFnflb4WEVO0NaCKOOMBhlSYI?=
 =?us-ascii?q?Vbi8S4A70xGuuxT3y75mLurS5y0Zuojv1Nlz5+3Pix4y8SZ4ANia02GIV2t0hH?=
 =?us-ascii?q?8HRycq3KBjpkxw0lWD0a9mjPBCFtxT4PVJUgE9NZPHy+x6CtbyWh/Of9uTSVam?=
 =?us-ascii?q?RMmmDi81Tt4r39AOZEN9Ec24jh/fxyqqH6MVl7uTCZMu6aLc33/xJ8Vnx3bczq?=
 =?us-ascii?q?YhjUIrQs9ONW2gm65++BLfB4/Pk0WFiamqcb4Q0zLK9GeG1WCOpl1XUBZsUaXZ?=
 =?us-ascii?q?WnASfkjWos7/5k/YS7+uCK4oMg1OycOZLqtKa9vpjUhJRfv5OdTeZX6xlHm0BR?=
 =?us-ascii?q?qS2ryMa4/qcX0H3CrBEEgEjxwT/XGeOAcjHCihvXzRACZuFV31ZUPs6vdxqHW8?=
 =?us-ascii?q?Qk8wzAGKaklh2qGx+h4Ug/ycVvwS0qgFuCcntzV7AlK908jKBNqHogprZL9cbs?=
 =?us-ascii?q?8l4FdbyWLZsBRwMYG6IKB8mFESaQR3sFno1xVsFIpAl9MnrHcrzAp0NKKZ30lN?=
 =?us-ascii?q?dzKe3ZDsJLLXLnP+8wyoa67TwlveysqZ+r8T6PQkrFXupB2pFksn83Vgz9lV03?=
 =?us-ascii?q?ud6o/WDAYIVpLxSEI39xl8p7HVeSQ944LU1XtxMai7qDPC2tQpBPc7xRakZdtQ?=
 =?us-ascii?q?LKSEFArqGc0AG8euMPAqm0Subh8cJu9S8LA7Psy4ePqGwqKkJ/tgky+8gmRB44?=
 =?us-ascii?q?B91VyM+jF4Su7J2ZYF3v6Z0hGGVzf6kFeurMT3lZpYajEVG2q10TLkC5JJZq1u?=
 =?us-ascii?q?YYYLDn+jIs2qxtlkm5HhQX9Z9F65CFMA18+kYh6Sb1373Q1N2kUbu32nmS2kzz?=
 =?us-ascii?q?NqlzEltLaQ3CvLw+76bhoIJnZLRHV+jVfrOYW0ldEaU1SyYAgziRSl4lz2x65F?=
 =?us-ascii?q?q6RlLmnfWFtHcDLyL25/TKSwrL2CY8hU5ZMssCVXVvm8YF+ARr78pRsazz3sH2?=
 =?us-ascii?q?9EyD8ncDGqv43znwZmh2KFMHZzsH3ZdNlwxBfe/tDdReRd3iEbRCl+kjTXAlm8?=
 =?us-ascii?q?P9+0/dSbjZvDs+a+V36/WZ1XayXk0YSAtC6j721wHRK/h+yzmsHgEQUi0y/0zc?=
 =?us-ascii?q?NqVSbLrBb7eIXrzL61MeFkfklpAl/z9cx6F5p6kosxgpEQxHcbio+U/XoBjWf8?=
 =?us-ascii?q?L9Fb1bjiY3oKQD4B28TV7xT92E1/MnKJwJr0V3WHzctmfdW6YGIW2iQm4sBOCa?=
 =?us-ascii?q?eU6qFEnCRvrlq5qwLRfeZynjMHxfQy734ahvkDuBAxwSWFHrASAU5YMDTvlxuS?=
 =?us-ascii?q?7tCytqVXZHu1fri220pzhtShDLCEogFBV3f1YJYiHSls7sphNFLAymH86obheN?=
 =?us-ascii?q?PId9IcqgWUkwvcj+hSMJ8xk/sKhSl9Nm7ns3wq1fU7jQBw0pGgp4eINX9t/K2i?=
 =?us-ascii?q?Dx5cNz31Yd4T+z73gaZfmMaWw56gHpF7FjoXW5voSOqiECgOuvT/KwaODDo8p2?=
 =?us-ascii?q?+HGbrYGA+T8kZnoGjJE5C2LHGXP3gZwM5mRBmcIkxfnQ8VUC87np4/CgCl2sjh?=
 =?us-ascii?q?fF1l6TAW417ysgFMxf5wNxnjTmffox+lZSwuR5iYKBpW8xtO50PIMcGF6uJzHi?=
 =?us-ascii?q?dY/oCurQCXK2ybYRhIAn8NWkCeG1/jObyu78Ha8+eEHuq+M+fOYbKWpOxcTfiI?=
 =?us-ascii?q?wIyg0pB88zaQLMmPPWRiD/4m2kpFR395AN/UmzEOSywRiiLMYNSXpBa6+i1rsM?=
 =?us-ascii?q?+/9O7nVx7o5YuKE7FSK8lg+wiqgaefMO6dnCZ4KTFF1pMV2H/H0r4f0EQJiyFp?=
 =?us-ascii?q?cTmtHq8NtSrMTKLWh69WAAQXayJ1NMtU8a082hNBNtLcitPwzrR4lOI6C09ZVV?=
 =?us-ascii?q?z9ncGkfcwKLH+8NFPEB0aLNa6KJT7Rw8HwbqOzV6dQjPhPtxCrvTabEknjPimM?=
 =?us-ascii?q?ljXzVhCvN/1Mgz+fPBBEpI69dRNtA3D5TN36ch27LMN3jTouzLIum3PFLnQcPi?=
 =?us-ascii?q?Z8ck9Xqr2Q7DhVgvF+G2xH83pkIvOImyef7+nENJkWteFnDThzl+Jf+H460ada?=
 =?us-ascii?q?7DlYRPxpnyvftsJuo1CjkuWV1jVrSgZBqjZVi4KNpkhiPaTZ9p9dWXfL5h4N7G?=
 =?us-ascii?q?OQCwgUqNthENHgp6dQyt3XnqLpNDhC687U/dcbB8XMKMOIKnwhMR/oGD7SFAQE?=
 =?us-ascii?q?TD6rOnvZh0xSi/yS8nyVrp4nqpnjgpYOS7lbVEArGfMeEEhqANsCIJIkFg8jxI?=
 =?us-ascii?q?KbjcMS/2v2lhTdRcNV9sTbVvOfG+/+biyUgbhCaDMHxLr5KcIYMYitiGJ4bVwv?=
 =?us-ascii?q?oZvHU2nUUNFLr2hC8Ak1rw0Z7T59SmAy3U+gaQSg5n4cPea5mBErlhF5Z+U9sj?=
 =?us-ascii?q?vhtQRkbmHWrTc9xRFi0e7uhiqcJXuodP+9?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0B3AQAPvRJch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBZQKBL4E5gQIng3yUK4INFJdUgV8UGAcMAYdFIjgSAQMBAQEBAQECARMBAQE?=
 =?us-ascii?q?IDQkIKSMMQgEOAYFkJAGCYQEBAQECAQECIAQLAUYFAQkBAQgCGAICBQwVAgIDD?=
 =?us-ascii?q?C0bBhMFFoMGAYF4CAEDAYx+m1B8M4owgQuFT4JZgwmCFoERghR+hDwdZ4JFglc?=
 =?us-ascii?q?ClgCLDwcCgRaQOCOBXIgbK4coLJkdgV2Bd3GDOwmCHheDfYohPzKBBQEBgyiGX?=
 =?us-ascii?q?II+AQE?=
X-IPAS-Result: =?us-ascii?q?A0B3AQAPvRJch0O0hNFjHAEBAQQBAQcEAQGBZQKBL4E5gQI?=
 =?us-ascii?q?ng3yUK4INFJdUgV8UGAcMAYdFIjgSAQMBAQEBAQECARMBAQEIDQkIKSMMQgEOA?=
 =?us-ascii?q?YFkJAGCYQEBAQECAQECIAQLAUYFAQkBAQgCGAICBQwVAgIDDC0bBhMFFoMGAYF?=
 =?us-ascii?q?4CAEDAYx+m1B8M4owgQuFT4JZgwmCFoERghR+hDwdZ4JFglcClgCLDwcCgRaQO?=
 =?us-ascii?q?COBXIgbK4coLJkdgV2Bd3GDOwmCHheDfYohPzKBBQEBgyiGXII+AQE?=
X-IronPort-AV: E=Sophos;i="5.56,349,1539673200"; 
   d="scan'208";a="57389006"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 13 Dec 2018 12:14:58 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726900AbeLMUOw (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 13 Dec 2018 15:14:52 -0500
Received: from metis.ext.pengutronix.de ([85.220.165.71]:50383 "EHLO
        metis.ext.pengutronix.de" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726510AbeLMUOw (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 13 Dec 2018 15:14:52 -0500
Received: from ptx.hi.pengutronix.de ([2001:67c:670:100:1d::c0])
        by metis.ext.pengutronix.de with esmtps (TLS1.2:ECDHE_RSA_AES_256_GCM_SHA384:256)
        (Exim 4.89)
        (envelope-from <ukl@pengutronix.de>)
        id 1gXXNg-0000ic-L7; Thu, 13 Dec 2018 21:14:48 +0100
Received: from ukl by ptx.hi.pengutronix.de with local (Exim 4.89)
        (envelope-from <ukl@pengutronix.de>)
        id 1gXXNf-0000R5-TJ; Thu, 13 Dec 2018 21:14:47 +0100
Date: Thu, 13 Dec 2018 21:14:47 +0100
From: Uwe =?iso-8859-1?Q?Kleine-K=F6nig?= 
        <u.kleine-koenig@pengutronix.de>
To: Thierry Reding <thierry.reding@gmail.com>
Cc: Michal =?utf-8?B?Vm9rw6HEjQ==?= <michal.vokac@ysoft.com>,
        linux-pwm@vger.kernel.org, linux-kernel@vger.kernel.org,
        kernel@pengutronix.de
Subject: Re: [PATCH 3/3] pwm: imx: Implement get_state() function for
 hardware readout
Message-ID: <20181213201447.v2ivule5q6knxqyp@pengutronix.de>
References: <1538403588-68850-1-git-send-email-michal.vokac@ysoft.com>
 <1538403588-68850-3-git-send-email-michal.vokac@ysoft.com>
 <20181212105432.GD17654@ulmo>
 <20181213085213.7k5ihn7bdrtess3g@pengutronix.de>
 <20181213170000.GA14581@ulmo>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
Content-Transfer-Encoding: 8bit
In-Reply-To: <20181213170000.GA14581@ulmo>
User-Agent: NeoMutt/20170113 (1.7.2)
X-SA-Exim-Connect-IP: 2001:67c:670:100:1d::c0
X-SA-Exim-Mail-From: ukl@pengutronix.de
X-SA-Exim-Scanned: No (on metis.ext.pengutronix.de); SAEximRunCond expanded to false
X-PTX-Original-Recipient: linux-kernel@vger.kernel.org
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hello Thierry,

On Thu, Dec 13, 2018 at 06:00:00PM +0100, Thierry Reding wrote:
> On Thu, Dec 13, 2018 at 09:52:13AM +0100, Uwe Kleine-König wrote:
> > On Wed, Dec 12, 2018 at 11:54:32AM +0100, Thierry Reding wrote:
> > > On Mon, Oct 01, 2018 at 04:19:48PM +0200, Michal Vokáč wrote:
> > > > Implement the get_state() function and set the initial state to reflect
> > > > real state of the hardware. This allows to keep the PWM running if it was
> > > > enabled in bootloader. It is very similar to the GPIO behavior. GPIO pin
> > > > set as output in bootloader keep the same setting in Linux unless it is
> > > > reconfigured.
> > > > 
> > > > If we find the PWM block enabled we need to prepare and enable its source
> > > > clock otherwise the clock will be disabled late in the boot as unused.
> > > > That will leave the PWM in enabled state but with disabled clock. That has
> > > > a side effect that the PWM output is left at its current level at which
> > > > the clock was disabled. It is totally non-deterministic and it may be LOW
> > > > or HIGH.
> > > > 
> > > > Signed-off-by: Michal Vokáč <michal.vokac@ysoft.com>
> > > > ---
> > > >  drivers/pwm/pwm-imx.c | 53 +++++++++++++++++++++++++++++++++++++++++++++++++++
> > > >  1 file changed, 53 insertions(+)
> > > 
> > > Applied, thanks.
> > 
> > Did you miss my feedback for this patch or did you choose to ignore it?
> 
> Don't have anything in my inbox, but I see that it's there on patchwork,
> so I suspect it was eaten by the spam filter.

:-|

> Let me copy-paste here and go through it.
> 
> > > @@ -93,6 +96,55 @@ struct imx_chip {
> > >
> > >  #define to_imx_chip(chip) container_of(chip, struct imx_chip, chip)
> > >
> > > +static void imx_pwm_get_state(struct pwm_chip *chip,
> > > +  struct pwm_device *pwm, struct pwm_state *state)
> > 
> > broken alignment.
> 
> I can fix that up, no need to resend for that.

fine.

> > > +{
> > > + struct imx_chip *imx = to_imx_chip(chip);
> > > + u32 period, prescaler, pwm_clk, ret, val;
> > > + u64 tmp;
> > > +
> > > + val = readl(imx->mmio_base + MX3_PWMCR);
> > > +
> > > + if (val & MX3_PWMCR_EN) {
> > > +  state->enabled = true;
> > > +  ret = clk_prepare_enable(imx->clk_per);
> > > +  if (ret)
> > > +   return;
> > > + } else {
> > > +  state->enabled = false;
> > > + }
> > > +
> > > + switch (FIELD_GET(MX3_PWMCR_POUTC, val)) {
> > > + case MX3_PWMCR_POUTC_NORMAL:
> > > +  state->polarity = PWM_POLARITY_NORMAL;
> > > +  break;
> > > + case MX3_PWMCR_POUTC_INVERTED:
> > > +  state->polarity = PWM_POLARITY_INVERSED;
> > > +  break;
> > > + default:
> > > +  dev_warn(chip->dev, "can't set polarity, output disconnected");
> > 
> > Should we return an error here?
> 
> We can't return an error here because the function has a void return
> type. I'm not sure what it means if the POUTC is neither "normal" nor
> "inverted", but perhaps a good idea would be to default to either of
> those two in that case, or perhaps forcibly disable the PWM so that
> we get known-good values in the registers?

The manual says "PWM output is disconnected". So I think the right thing
to do is to consider the pwm as disabled. (But checking how the output
actually behaves would be great.) (Maybe this setting is even the
solution to our "Make the output high-Z on disable" discussion?)

> I'm tempted not to treat this as a blocker because it's not actually
> a bug or anything. Prior to this patch we also ignore whatever this
> field was set to.

Prior to this patch this field was never read as this is only needed in
.get_state. And in .apply the value is correctly written.

> > > + }
> > > +
> > > + prescaler = MX3_PWMCR_PRESCALER_GET(val);
> > > + pwm_clk = clk_get_rate(imx->clk_per);
> > > + pwm_clk = DIV_ROUND_CLOSEST_ULL(pwm_clk, prescaler);
> > > + val = readl(imx->mmio_base + MX3_PWMPR);
> > 
> > It would be more cautionous to not rely on the reserved bits to read as
> > zero. So I suggest to mask the value with 0xffff.
> 
> If that's what the documentation says I think it's okay to rely on it.
> But I can add the mask if we want to play it extra safe.

The PERIOD field only covers bits 0 to 15 and the upper 16 bits of this
register are reserved. The registers are documented to read as 0, still
I'd prefer to mask them out for maximal correctness.

> > > + period = val >= MX3_PWMPR_MAX ? MX3_PWMPR_MAX : val;
> > > +
> > > + /* PWMOUT (Hz) = PWMCLK / (PWMPR + 2) */
> > > + tmp = NSEC_PER_SEC * (u64)(period + 2);
> > > + state->period = DIV_ROUND_CLOSEST_ULL(tmp, pwm_clk);
> > 
> > Would it make sense to introduce a policy about how to round in this
> > case? (Similarily for .apply?) This is of course out of scope for this
> > patch.
> 
> I'm not sure what you means by policy. The above already does round to
> closest. Is that not an appropriate policy?

I mean to document the expectation of the pwm framework how the driver
is supposed to configure the hardware when it should program the PWM
with say duty_cycle=100ns/period=300ns and but the hardware can only
implement both duty_cycle and period in steps of 3ns. So the (IMHO) good
candidates are:

	duty_cycle = 99ns / period = 297ns
	duty_cycle = 99ns / period = 300ns
	duty_cycle = 102ns / period = 300ns
	duty_cycle = 102ns / period = 306ns

As it's not obvious which is the best here (or is it?) and taking into
account that the PWM user might care, it would be right to specify
something like:

  The driver is supposed to configure the biggest duty_cycle that
  is not greater than the requested duty_cycle. Similarily it should
  pick the biggest possible period that is not greater than the
  requested period.

To actually allow the user to find the setting that he or she prefers
something like the clk framework provides with clk_round_rate() would be
needed of course.

And for .get_state I'd specify something similar that ensures that in
the sequence

	myops->get_state(chip, pwm, state);
	myops->apply(chip, pwm, state);

the latter is a noop.

Best regards
Uwe

-- 
Pengutronix e.K.                           | Uwe Kleine-König            |
Industrial Linux Solutions                 | http://www.pengutronix.de/  |
