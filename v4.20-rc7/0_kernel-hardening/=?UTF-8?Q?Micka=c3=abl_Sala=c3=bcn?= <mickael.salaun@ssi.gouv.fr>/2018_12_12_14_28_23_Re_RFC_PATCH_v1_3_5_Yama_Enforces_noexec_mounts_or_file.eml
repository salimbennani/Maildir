Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 08:51:31 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id B5ECC58079D;
	Wed, 12 Dec 2018 06:39:38 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga006-1.jf.intel.com with ESMTP; 12 Dec 2018 06:39:38 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Af5ptzxA9VGbPNsZXR1M3UyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7+ps2wAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95MWSJfDIOy?=
 =?us-ascii?q?b4gBAeQPMulXrYbyu1QArQCmBQSuH+7v1jxFi2Xq0aEm3eksEwfL1xEgEdIUt3?=
 =?us-ascii?q?TUqc34OqATUe+pz6nH1ynEb/dO1jng8ofIdgouue2KXbltdsfRzEgvGB/GjlqK?=
 =?us-ascii?q?t4PlOymZ1v8XvGif9eVgSOSvhnU8qwFqozij3Mgsio7UhoIL0FzE+z95zZ8zKN?=
 =?us-ascii?q?alRkB7ZtukH4FRtyGcL4Z3QtktQ2Rytyogzb0GoYC0fC4MxZ86xBDfc+SKf5aU?=
 =?us-ascii?q?7h/nTuqdPDl1iGx/dL6ihBu+7VKsx+z+W8Ws01tHrzBJn9jMu3wXyhDe6daLRu?=
 =?us-ascii?q?F580u93zuEyhrd5fteIU8ukKrWM54hzaA0lpoUqUnDACD2l1vsjKOMdUUr5PKo?=
 =?us-ascii?q?6+L5bbXivJOcMJV0ig7mPqQvnMywH/g4PxAQU2SH/emwzqDv8EPnTLlQk/E7kb?=
 =?us-ascii?q?XVvIrbKMkZvqK5BhVa0ocn6xaxFTem19EYkGEDLFJEfhKHkofoN0jNIP/mF/e/?=
 =?us-ascii?q?hUqjkDNyy/DBMLzhBIvCLmLYnbf/crZy9VRcxBAwzd9B/ZJUDK8OIPbpVk/2rt?=
 =?us-ascii?q?zYAQc1MxaozOb/FNV9yoQeVHqLAq+YM6Pdr0WE5+0yI+SXYI8VuTD9K+Uq5vL0?=
 =?us-ascii?q?jH85n0Mdcret3ZcNdH+4GfFmKV2DYXXwmtcBDXsKvg0mQezqklKCUCJTaGy1X6?=
 =?us-ascii?q?4m5jE7FZipDYHMRo22hLyB3SG7HoBZZ2xcC1CMF2voeJuAW/sWdC2SJcphmCQe?=
 =?us-ascii?q?Vbe9U48hyQ2utAjixrplKerb5DcUtZHk1Nhz4e3Tkgo/9Th1D8SbzmGMQHt4nm?=
 =?us-ascii?q?IORz8qwq9/pVZxxUuE0ah9m/ZYD8Bc5+tVUgcmMp7R1/Z1C8vyWgLGfdeFUkym?=
 =?us-ascii?q?Tc+kATwqStIxwtkOY1tyGtm4jxDD2TaqDKERl7CRGJM09afc1WDrJ8lh03bGyL?=
 =?us-ascii?q?Uhj14+T8tML2KmgLRz9wzSB4HTlUWZmL2ndaAd3C7L6WeCwnCCvEBeUA5sT6rF?=
 =?us-ascii?q?WWoTaVfRrdT8/knCVaOhCaw7Mgtdzs6PMrZFZcf3jVpYXvvjOM7RY2Sqm2iuAx?=
 =?us-ascii?q?aEwbeMbInve2UZxyjdDEkEkwYO/XeJLwQ+ByGho37AAzxqD17gf0Ts8exmonOh?=
 =?us-ascii?q?UkA01x2Kb1Fm17et5xEan+KcRO0J0rIEoighrS50E0i739/ND9qApgxhfLhTYN?=
 =?us-ascii?q?8n4VdH037ZuBJ5PpC6M69igVseeRxtv0zyzxV3FplAkc8yoXM2zQpyLKWY0E9B?=
 =?us-ascii?q?dzKYx5zwJqfbKm7o/BCraq7W3F7e3c2S+qcO7vQ4tlrisBuoFkok73Vozd1V32?=
 =?us-ascii?q?GA6ZXNCQoYSYjxXVov9xhmu7HaZTEw6JnQ1XJyPqi7rD/D18gyC+s41xmvZdFf?=
 =?us-ascii?q?MKCDFA/sCMAaA8muKOo3m1mmdB4EPeZS9LIqMMOibfeJxKmrPON4ljK8kWtH+J?=
 =?us-ascii?q?x90l6L9ydkSu/IwowJzO2C0gqGVzfzllGhss/slIBAZDESGHe/yCf+CI5QYK1y?=
 =?us-ascii?q?YZgECWO0L8KrwdV+gobnW2RE+167G1MGxMipdAKIb1z8wQJfz14XrmGgmSeiyT?=
 =?us-ascii?q?x7jSsprquG0CPS2evicAcINXBRRGlli1fhOoy0j9EcXEi1YAkljhql5UDmx6dF?=
 =?us-ascii?q?oKRzNXXcQUBNfyLuNWFtTrOwtqaeY85I8J4psSRXXP68YFyAUb79vh0a3jjnH2?=
 =?us-ascii?q?tfwjA7aj6rto/4nxx8lGKSMnJzoGDFdsF3wBfV/MbcSuJJ3joaWCl4jiHaBlqm?=
 =?us-ascii?q?MNmz/tWUlJDDvvqlV227VZ1TcijrzYWeuyu9/mBqBRy/n/aumtzoCwQ60Cn718?=
 =?us-ascii?q?V0WiXMthrzfo7r16GiO+J9YkZoHEP869Z9Goxmkoo/npYQ1WIYhpWU+3oKimPz?=
 =?us-ascii?q?MdRd2aLjY3sBXz8Lw9jJ4Af73E1vNG6Gx4X8Vn+F2Mtue8G6Yn8K2iI6981KC7?=
 =?us-ascii?q?2b7L1ekSt1v1q3twTRYfdmkzcZyPsu7mMagu4TtAosyCWdHq4dHU1CMSPwkBSI?=
 =?us-ascii?q?6si0rL9La2a3bbiwyE1+kMikDLGDoQFTQmz1e5k8Ei9r8sVwLkjM32bt5YH+d9?=
 =?us-ascii?q?nddtYTthySkxfdgOlZMpMxlvwWhSV5PWLxp2Eqy+k+jRZ2x5G1oJCHK3lx/KK+?=
 =?us-ascii?q?GhNYKjr1Z8YJ9jDsl6lemNuW35u0HpVgATgLWJroTfS1EDMdr/jnNgCOECEipX?=
 =?us-ascii?q?efA7bQAQif6EJ+pXLVD5+rL22XJGUezdh6XxaSPktfgAQJXDkgmp45CxunxMjg?=
 =?us-ascii?q?cEd/+zAQ6UT0qhpKyuJ0KRb/Vn3TqxuvajcxUJKfNgZZ7hle50fJNsyT9uBzED?=
 =?us-ascii?q?td/pK/twyBMHCbax5LDWEUWUyEGlbjMaO15dTb9+iYB+y+L+bBYLmUqOxeUeuI?=
 =?us-ascii?q?yoyr0od84zmMMcCPNGF4D/InwkpDQWx5G8PBljQPTCwXijvNb9OBqxe64CF3tc?=
 =?us-ascii?q?e/8PLkWA/04YuPCr1SMchg+hysgKeDMfKQizh9KTpCypwMwnrIwqAF3FEOkyFu?=
 =?us-ascii?q?ayWtEbMYuC7NUq3Qm6xXDx0aay9pN8tI9aU83gZTNs7Bl9P1zaV1jvo0C1dDSF?=
 =?us-ascii?q?zgldulZc0MI2GhKlzHAFyHO6iBJT3O28v3e7+zSaVMjOVIsB29oSyUE1L4MTSZ?=
 =?us-ascii?q?iTboVwqjMeVNjCyAOBxeuYe9cgtiCGT5TdLmbAG7P8FzjTEs3bI0gXbKP3YGMT?=
 =?us-ascii?q?dga0NNsqGQ7SRAj/VjGmxB62BpIvWelymF7+nXNJAWvOBvAiR1keJa/Xs7x6FU?=
 =?us-ascii?q?7CFCWPx6hi/SosRyrFGhl+mF0iBnXwZWqjZXmIKLul1vOKXD+ZlGXHbE/RQN4n?=
 =?us-ascii?q?2RChQKvdRlDNLvtrtUytjOkqLzNThD/8jV/csaG8jbNsaHPGA9PhruHT6HRDcC?=
 =?us-ascii?q?GGqvNGfClwleneuU+3m9sJc3sN7vlYAIR7sdU0Y6QKA0EENgSfkDK5R+3TcTqr?=
 =?us-ascii?q?efhVoOrS67rRLSTche+IvOUvuPB930Mzffgr5ZeV0G2+WrfswoKoTn1hk6ORFB?=
 =?us-ascii?q?l4PQFh+VBIgVrw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AzAAAoHBFch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUgYBAQsBg2sng3uIeIsyAYFgQZc/FIFfLBMBgUuCdYJ+IjUIDQEDAQEBAQE?=
 =?us-ascii?q?BAgETAQEBCA0JCCkjDII2JAGCYgMDAQIgBAsBDQEBMAcBBQkBAQoaAiYCAgNEE?=
 =?us-ascii?q?AYNAQUCAQEBgxyCAgQBpQRwfDOCdgEBBYJDg2KBBQiBC4oVgRyCFoE4gmuEOws?=
 =?us-ascii?q?7gwSCNSKJO4F3lVwHAoEQkEEeiWmHXSyaWwGCC3SDOIIbDBcShHaJFj4BMoEFA?=
 =?us-ascii?q?QGKPoI+AQE?=
X-IPAS-Result: =?us-ascii?q?A0AzAAAoHBFch0O0hNFjHAEBAQQBAQcEAQGBUgYBAQsBg2s?=
 =?us-ascii?q?ng3uIeIsyAYFgQZc/FIFfLBMBgUuCdYJ+IjUIDQEDAQEBAQEBAgETAQEBCA0JC?=
 =?us-ascii?q?CkjDII2JAGCYgMDAQIgBAsBDQEBMAcBBQkBAQoaAiYCAgNEEAYNAQUCAQEBgxy?=
 =?us-ascii?q?CAgQBpQRwfDOCdgEBBYJDg2KBBQiBC4oVgRyCFoE4gmuEOws7gwSCNSKJO4F3l?=
 =?us-ascii?q?VwHAoEQkEEeiWmHXSyaWwGCC3SDOIIbDBcShHaJFj4BMoEFAQGKPoI+AQE?=
X-IronPort-AV: E=Sophos;i="5.56,344,1539673200"; 
   d="scan'208";a="43758767"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 12 Dec 2018 06:38:36 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726879AbeLLOff (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 12 Dec 2018 09:35:35 -0500
Received: from smtp-out.ssi.gouv.fr ([86.65.182.90]:63385 "EHLO
        smtp-out.ssi.gouv.fr" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726232AbeLLOfe (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 12 Dec 2018 09:35:34 -0500
X-Greylist: delayed 434 seconds by postgrey-1.27 at vger.kernel.org; Wed, 12 Dec 2018 09:35:33 EST
Received: from smtp-out.ssi.gouv.fr (localhost [127.0.0.1])
        by smtp-out.ssi.gouv.fr (Postfix) with ESMTP id A4D92D0006C;
        Wed, 12 Dec 2018 15:28:25 +0100 (CET)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=ssi.gouv.fr;
        s=20160407; t=1544624905;
        bh=RURSNJxH3uXwyQWATCTsAZKmp59Lkaus4CuUmJ0TlvE=;
        h=Subject:To:CC:References:From:Date:In-Reply-To:From:Subject;
        b=TJQyItkJ40LvGdtGynmQhqS0iZOUMxq7wKc2iW3rOl/SnArM1DjIQhViE8hEc05R6
         +NhQg/FC6q3qypYP2rvu/iTNS0YQUEw4cbnObozOuMYCnNLAf8kKnjdZMpVEUSDCP7
         gmOoyxPn5wxmXwCesK+MNY74QJknnGfPMU8tpxBlrHE886J31wsHeMDFjnFGiDdZDc
         wTSZHd4/yhlKzHXnFXGdy/8PPkerTzmDRNpwYFbZd6Gv/7x4ktvkhxJaqgAS5egMWI
         c5gtPTJcS2u5UiaHVptbcoo5z7QXhBfJJkRYXViF1+n+Hta1/bLiHwwbolC8LKLjyY
         wCrqVt2Lh4MlA==
Subject: Re: [RFC PATCH v1 3/5] Yama: Enforces noexec mounts or file
 executability through O_MAYEXEC
To: <linux-kernel@vger.kernel.org>
CC: =?UTF-8?Q?Micka=c3=abl_Sala=c3=bcn?= <mic@digikod.net>,
        Al Viro <viro@zeniv.linux.org.uk>,
        James Morris <jmorris@namei.org>,
        Jonathan Corbet <corbet@lwn.net>,
        Kees Cook <keescook@chromium.org>,
        Matthew Garrett <mjg59@google.com>,
        Michael Kerrisk <mtk.manpages@gmail.com>,
        Mimi Zohar <zohar@linux.ibm.com>,
        =?UTF-8?Q?Philippe_Tr=c3=a9buchet?= 
        <philippe.trebuchet@ssi.gouv.fr>, Shuah Khan <shuah@kernel.org>,
        Thibaut Sautereau <thibaut.sautereau@ssi.gouv.fr>,
        Vincent Strubel <vincent.strubel@ssi.gouv.fr>,
        Yves-Alexis Perez <yves-alexis.perez@ssi.gouv.fr>,
        <kernel-hardening@lists.openwall.com>, <linux-api@vger.kernel.org>,
        <linux-security-module@vger.kernel.org>,
        <linux-fsdevel@vger.kernel.org>
References: <20181212081712.32347-1-mic@digikod.net>
 <20181212081712.32347-4-mic@digikod.net>
From: =?UTF-8?Q?Micka=c3=abl_Sala=c3=bcn?= <mickael.salaun@ssi.gouv.fr>
Message-ID: <13fe4508-f0c0-66c7-8aab-8b3ccef5caa2@ssi.gouv.fr>
Date: Wed, 12 Dec 2018 15:28:23 +0100
User-Agent: Mozilla/5.0 (X11; Linux i686; rv:52.0) Gecko/20100101
 Thunderbird/52.6.0
MIME-Version: 1.0
In-Reply-To: <20181212081712.32347-4-mic@digikod.net>
Content-Type: text/plain; charset="utf-8"
Content-Language: en-US
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org



Le 12/12/2018 à 09:17, Mickaël Salaün a écrit :
> Enable to either propagate the mount options from the underlying VFS
> mount to prevent execution, or to propagate the file execute permission.
> This may allow a script interpreter to check execution permissions
> before reading commands from a file.
> 
> The main goal is to be able to protect the kernel by restricting
> arbitrary syscalls that an attacker could perform with a crafted binary
> or certain script languages.  It also improves multilevel isolation
> by reducing the ability of an attacker to use side channels with
> specific code.  These restrictions can natively be enforced for ELF
> binaries (with the noexec mount option) but require this kernel
> extension to properly handle scripts (e.g., Python, Perl).
> 
> Add a new sysctl kernel.yama.open_mayexec_enforce to control this
> behavior.  A following patch adds documentation.
> 
> Signed-off-by: Mickaël Salaün <mic@digikod.net>
> Reviewed-by: Philippe Trébuchet <philippe.trebuchet@ssi.gouv.fr>
> Reviewed-by: Thibaut Sautereau <thibaut.sautereau@ssi.gouv.fr>
> Cc: Kees Cook <keescook@chromium.org>
> Cc: Mickaël Salaün <mickael.salaun@ssi.gouv.fr>
> ---
>  security/yama/Kconfig    |  3 +-
>  security/yama/yama_lsm.c | 82 +++++++++++++++++++++++++++++++++++++++-
>  2 files changed, 83 insertions(+), 2 deletions(-)
> 
> diff --git a/security/yama/Kconfig b/security/yama/Kconfig
> index 96b27405558a..9457619fabd5 100644
> --- a/security/yama/Kconfig
> +++ b/security/yama/Kconfig
> @@ -5,7 +5,8 @@ config SECURITY_YAMA
>  	help
>  	  This selects Yama, which extends DAC support with additional
>  	  system-wide security settings beyond regular Linux discretionary
> -	  access controls. Currently available is ptrace scope restriction.
> +	  access controls. Currently available are ptrace scope restriction and
> +	  enforcement of the O_MAYEXEC open flag.
>  	  Like capabilities, this security module stacks with other LSMs.
>  	  Further information can be found in
>  	  Documentation/admin-guide/LSM/Yama.rst.
> diff --git a/security/yama/yama_lsm.c b/security/yama/yama_lsm.c
> index ffda91a4a1aa..120664e94ee5 100644
> --- a/security/yama/yama_lsm.c
> +++ b/security/yama/yama_lsm.c
> @@ -1,10 +1,12 @@
>  /*
>   * Yama Linux Security Module
>   *
> - * Author: Kees Cook <keescook@chromium.org>
> + * Authors: Kees Cook <keescook@chromium.org>
> + *          Mickaël Salaün <mickael.salaun@ssi.gouv.fr>
>   *
>   * Copyright (C) 2010 Canonical, Ltd.
>   * Copyright (C) 2011 The Chromium OS Authors.
> + * Copyright (C) 2018 ANSSI
>   *
>   * This program is free software; you can redistribute it and/or modify
>   * it under the terms of the GNU General Public License version 2, as
> @@ -28,7 +30,14 @@
>  #define YAMA_SCOPE_CAPABILITY	2
>  #define YAMA_SCOPE_NO_ATTACH	3
>  
> +#define YAMA_OMAYEXEC_ENFORCE_NONE	0
> +#define YAMA_OMAYEXEC_ENFORCE_MOUNT	(1 << 0)
> +#define YAMA_OMAYEXEC_ENFORCE_FILE	(1 << 1)
> +#define _YAMA_OMAYEXEC_LAST		YAMA_OMAYEXEC_ENFORCE_FILE
> +#define _YAMA_OMAYEXEC_MASK		((_YAMA_OMAYEXEC_LAST << 1) - 1)
> +
>  static int ptrace_scope = YAMA_SCOPE_RELATIONAL;
> +static int open_mayexec_enforce = YAMA_OMAYEXEC_ENFORCE_NONE;
>  
>  /* describe a ptrace relationship for potential exception */
>  struct ptrace_relation {
> @@ -423,7 +432,40 @@ int yama_ptrace_traceme(struct task_struct *parent)
>  	return rc;
>  }
>  
> +/**
> + * yama_inode_permission - check O_MAYEXEC permission before accessing an inode
> + * @inode: inode structure to check
> + * @mask: permission mask
> + *
> + * Return 0 if access is permitted, -EACCES otherwise.
> + */
> +int yama_inode_permission(struct inode *inode, int mask)
> +{
> +	if (!(mask & MAY_OPENEXEC))
> +		return 0;
> +	/*
> +	 * Match regular files and directories to make it easier to
> +	 * modify script interpreters.
> +	 */
> +	if (!S_ISREG(inode->i_mode) && !S_ISDIR(inode->i_mode))
> +		return 0;

I forgot to mention that these checks do not handle fifos. This is
relevant in a threat model targeting persistent attacks (and with
additional protections/restrictions).

> +
> +	if ((open_mayexec_enforce & YAMA_OMAYEXEC_ENFORCE_MOUNT) &&
> +			!(mask & MAY_EXECMOUNT))
> +		return -EACCES;
> +
> +	/*
> +	 * May prefer acl_permission_check() instead of generic_permission(),
> +	 * to not be bypassable with CAP_DAC_READ_SEARCH.
> +	 */
> +	if (open_mayexec_enforce & YAMA_OMAYEXEC_ENFORCE_FILE)
> +		return generic_permission(inode, MAY_EXEC);
> +
> +	return 0;
> +}
> +
>  static struct security_hook_list yama_hooks[] __lsm_ro_after_init = {
> +	LSM_HOOK_INIT(inode_permission, yama_inode_permission),
>  	LSM_HOOK_INIT(ptrace_access_check, yama_ptrace_access_check),
>  	LSM_HOOK_INIT(ptrace_traceme, yama_ptrace_traceme),
>  	LSM_HOOK_INIT(task_prctl, yama_task_prctl),
> @@ -447,6 +489,37 @@ static int yama_dointvec_minmax(struct ctl_table *table, int write,
>  	return proc_dointvec_minmax(&table_copy, write, buffer, lenp, ppos);
>  }
>  
> +static int yama_dointvec_bitmask_macadmin(struct ctl_table *table, int write,
> +					  void __user *buffer, size_t *lenp,
> +					  loff_t *ppos)
> +{
> +	int error;
> +
> +	if (write) {
> +		struct ctl_table table_copy;
> +		int tmp_mayexec_enforce;
> +
> +		if (!capable(CAP_MAC_ADMIN))
> +			return -EPERM;
> +		tmp_mayexec_enforce = *((int *)table->data);
> +		table_copy = *table;
> +		/* do not erase open_mayexec_enforce */
> +		table_copy.data = &tmp_mayexec_enforce;
> +		error = proc_dointvec(&table_copy, write, buffer, lenp, ppos);
> +		if (error)
> +			return error;
> +		if ((tmp_mayexec_enforce | _YAMA_OMAYEXEC_MASK) !=
> +				_YAMA_OMAYEXEC_MASK)
> +			return -EINVAL;
> +		*((int *)table->data) = tmp_mayexec_enforce;
> +	} else {
> +		error = proc_dointvec(table, write, buffer, lenp, ppos);
> +		if (error)
> +			return error;
> +	}
> +	return 0;
> +}
> +
>  static int zero;
>  static int max_scope = YAMA_SCOPE_NO_ATTACH;
>  
> @@ -466,6 +539,13 @@ static struct ctl_table yama_sysctl_table[] = {
>  		.extra1         = &zero,
>  		.extra2         = &max_scope,
>  	},
> +	{
> +		.procname       = "open_mayexec_enforce",
> +		.data           = &open_mayexec_enforce,
> +		.maxlen         = sizeof(int),
> +		.mode           = 0644,
> +		.proc_handler   = yama_dointvec_bitmask_macadmin,
> +	},
>  	{ }
>  };
>  static void __init yama_init_sysctl(void)
> 
