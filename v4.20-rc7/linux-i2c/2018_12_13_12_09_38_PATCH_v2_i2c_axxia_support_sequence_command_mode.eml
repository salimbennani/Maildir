Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 21:23:28 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 1C73E58061F;
	Thu, 13 Dec 2018 04:13:17 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by fmsmga002-1.fm.intel.com with ESMTP; 13 Dec 2018 04:13:16 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AFthAJxZ9n1GnrT4bUwsfa/3/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpcq7bR7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyxPDJ2h?=
 =?us-ascii?q?YYsTAeQPPuhYoIv8p1QSohWxChKsBPvtxzJTmn/2xLc33/g9HQ3awQAtGc8Fvn?=
 =?us-ascii?q?TOrNXyMacfSe65wbXVwjrZavNWwjT96InQfhs8pP+MR7NxcMrKyUguCwPFiVuQ?=
 =?us-ascii?q?opHhMz2N0eQNsGmb4PB9Xu62lmUpsQd/riOvycc2jYnGmoYVxUrK9Cl8zoo+ON?=
 =?us-ascii?q?q1SE1hYd+lEJpQrCCbN5dxQsMsWW1nojs1xacDuZ6gfygKyY8qxxjYa/yEcoiH?=
 =?us-ascii?q?+AjvW/qWITd9nX9ofq+0iRWq8UW41OHwSs253ExXoidLjNXArG0B2h/P5sSdS/?=
 =?us-ascii?q?Zw/F+t1SuB2gzO8O1IP144mKnBJ5Mv3LI8jIcfvEDeEiPulkX5kqybelkh9+Wt?=
 =?us-ascii?q?5enrfrfrq5GZOo96lw3xLL4hl8mjDugmLAQCQ22W9OWy1LDi80D0RqhBgOcsna?=
 =?us-ascii?q?nDqp/aINwWpq6nDA9R1YYu8wi/Dzi439QCh3UHL0xKeAiBj4f3P1HCOvf4De2w?=
 =?us-ascii?q?g1i0kTdrwe7JPqH5D5nTMnTOlK3tcatz5kJC0gY/0NNS645OBrwAIv//Qkrxu8?=
 =?us-ascii?q?bZDh89PQy02eHnCNBl24MaWGKPBLKZMazLvV+L+O0vOe+Ma5ERuDrkLPgk6fju?=
 =?us-ascii?q?gmEjmVIGY6mp0oUYaGqiEvRlPUqZe3zsjckFEWsQuQo+VuPqhEWYUTFPf3ayQ7?=
 =?us-ascii?q?485jYjBYKiDIfDRZ6ijKaO3SemBZBWYmFGClaREXbnbYmEWvEMaD6MLc9liDAL?=
 =?us-ascii?q?Sb+hS4o53xG0qAD606ZnLvbT+iAAtZLsztl15/HJmhE17zB0D9md3HuLT2F7hW?=
 =?us-ascii?q?4IQz423KZioU1y0FuD0K54g+BGGtxX/f9GTgA6NZvExexgF9/yQh7BfsuOSFu+?=
 =?us-ascii?q?QNWmBi8+Qsgyw98JZUZ9HdKigwvH3yqrBb8VirOKCIY18qLaw3j+OcJ9x2za26?=
 =?us-ascii?q?kmilksWtFPOnG+hq5j6wjTAJbEnF+Cl6aqcqQc3zTB9H2ZwmqMp0xYVA9wUaPY?=
 =?us-ascii?q?XXEQfEfWrNL55l/cQL+qE7goLgxBycuaIKtQdtLplUlGROvkONnGYGK+gWGwCQ?=
 =?us-ascii?q?yMxrONdoXqfWod0T7ZCEgFlQAT4HmHORI/Bienv2LREjhuGUjzbEPr9Ol0sGm7?=
 =?us-ascii?q?QVMszwGWc01h0KK49QMPivyCVfwfxLIEtz0nqzVvAlm92dXaC96DpwpkeKVRet?=
 =?us-ascii?q?c94FZB1WLEuA1xJJ2gL6Z+hlEAdwR7pV/h1xJyCo9Yi8glsGsqzBZuKaKfyF5O?=
 =?us-ascii?q?aimX3Y7uNbHNKmn95hava7XI1VHYy9uW/qYP6PIlq1Tspg2pF0wi82l53NlRyX?=
 =?us-ascii?q?eT+pLKDA8KW5LrTkk37wR6p63dYiQl+4PU1HhsMa6osj/C29MlHvclxgynf9dF?=
 =?us-ascii?q?NKOEFQnyE8IBCsiqKewqnUWpbx0eMOBT8q40I92pd/+c1KG3O+ZgmSqsjX5b74?=
 =?us-ascii?q?BlzkKM6y18R/bS0JYB3f6Z0RWIVjfmgFi6r8D4hJpLZTcRHmq41yjpH4pRZqx0?=
 =?us-ascii?q?fYYWBmaiOcy3xtNih5HzX35U7kKsB1QD2MWxYxqdc0T93RFM1UQQuXGmmTa4wy?=
 =?us-ascii?q?ZonD0zr6uf3DbBw+LtdBccPm5LRW9ijUrjIISujtAaWlSoYBYtlBe/+Un6wK1b?=
 =?us-ascii?q?rrxlL2bPWUdIYzT2L2Z6X6uqt7qNf9RA6Ik1viVQSui8Z06VSqT8oxcDzyzsBW?=
 =?us-ascii?q?9eyy0leDGwvZX5mQd3iGacLHZ1sXrYdtt8xRbZ5NzAW/FR2iAKSzV/iTnSHlK8?=
 =?us-ascii?q?JcWm/c2Il5ffteCzT2KgVpxJfSjr14+Arza75WtxDB27nvCznMDnEAcg3S/60d?=
 =?us-ascii?q?lqSTvHrBLmbob30KS6NPptflN0C1/k98p6BoZ+n5MyhJ4Kw3gahZaV/X0dnWfo?=
 =?us-ascii?q?K9pb2qH+bHsLRTEVxd7Y+wzl2ExlLnKUyIP1THSdws19Z9akZmMawD4y78dPCK?=
 =?us-ascii?q?2M9rxLgTN1okakrQLWefV8ni0Syfw05H4YguEJvhEgziGcArAUAElZMjbglxWO?=
 =?us-ascii?q?79CisqpXYHyjfqS31Ep7hdqhFq2NohlAWHblfZcvBSxw4d9+MF7W0H3z95vreN?=
 =?us-ascii?q?/fbd8Ish2UkhHAj/VaKZ4rl/oKgzZnNnz5vXE/1+E7ihlu14mgvIebM2Vt4L65?=
 =?us-ascii?q?AhlAOz3wZsMT+SvigbxQn8mIxICvAotuGi8QU5T2V/KoHykftfDmNwaIDT09pW?=
 =?us-ascii?q?2XGbvZHQ+D9khmq2jDHIysN3GSPHMZ18ltRAGBJExDhwAZRCk6npk8Fgywxc3u?=
 =?us-ascii?q?akF55i0K5l7jqxtB0eZoNxj5UmfCqwakcDY0SJ6DLBVI6gFO/VvaMcub7uhrBS?=
 =?us-ascii?q?FX4oWhrBCRKmycfwlHFnsGWkuAB1D+JLWu4cTA/vOcBuq/KfvOfLqPpfZfV/eO?=
 =?us-ascii?q?2ZKgzI9m8yyQOcWIO3loF+c71VZbXXBlB8TZnC0CSy4NmCLIccGbvw2w+jFtos?=
 =?us-ascii?q?C87fTrWx/v5Y2VBLtJKthv/xG2gaGeN++fnip5KDBY1o8Syn/M0rQQwFkSiyR2?=
 =?us-ascii?q?fTm3DbsArTLNTL7XmqJPDx8bbD5zNNJV760m2AlBI9XbitTz1r53lfM1D1ZFVV?=
 =?us-ascii?q?r8msCmf8AKIme9NE/ZC0aPLriJOTrLw8Tva6OmVbJQlPlUtwG3uTuDE0/sIDWD?=
 =?us-ascii?q?lzrqVxCuK+1MjzubPBtRuI6jaBZtFHPjQcniah26Nt93kDI3zac1hnPMKW4TLz?=
 =?us-ascii?q?x8f1lRob2X6CNSmu9/FHBZ7np5MemEnD6U4PPFKpkNq/tkHCR1m/he4HQ70LZV?=
 =?us-ascii?q?6CBERPpomCrdtNJuolemkvWRxTpjShZBtjFLhIeTt0V4JarZ7oVAWWrD/B8V8W?=
 =?us-ascii?q?WQChEKq8F5BdH1p69QysbAlKToJTdG8tLU+9YcBsfOJMKGNnohLQTmGDrOAAQZ?=
 =?us-ascii?q?Sj6rMHnVh1ZBn/GK6n2Vsp86p4DsmZUUTL9bUV01FvUCBUVkHNwNOpF3Xjw/nL?=
 =?us-ascii?q?6fjc4I42e+rRbLSMVbuJDHSuydAfH1JDmFirlEYkhA/bStEoMXOJfy3gRZY191?=
 =?us-ascii?q?1NDVAEP4QdBA5yF7YwYxuwNB/S4tYHc03hevQw+k5WQQFLr8vQQkmxBsfeMjvH?=
 =?us-ascii?q?fK5FQ2LxKP7BMU13Yrnt7hiC/QOnalL72iTJpEFy368UE9O5bgQAddawqxnEUi?=
 =?us-ascii?q?PzDBEeECx4B8fHxm3VeP8aBEHuRRGOgdOEcd?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A9AACPTBJch0O0hNFjHgEGBwaBVAYLA?=
 =?us-ascii?q?YEwUIFcBAsnCoc5A5AXgmuYZAVNEAEYEwGBS4V5IjcGDQEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BCA0JCCkjDII2JAGCYgMDAQIkGQEBNwEFCQEBAQEWEyUDDCMlAgQKBAUFFoMGg?=
 =?us-ascii?q?WkDFQECApwCAooHgWwzgnYBAQWFCxiCCQiMPIIWgRGKfkqCJos0hFuRAgcCAop?=
 =?us-ascii?q?KhwIjgVyIRocomSICBAIEBQINAQEFgVyBeHCDPIIbCQMXg0qKU0ExgQUBASGLC?=
 =?us-ascii?q?AGBHgEB?=
X-IPAS-Result: =?us-ascii?q?A0A9AACPTBJch0O0hNFjHgEGBwaBVAYLAYEwUIFcBAsnCoc?=
 =?us-ascii?q?5A5AXgmuYZAVNEAEYEwGBS4V5IjcGDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2J?=
 =?us-ascii?q?AGCYgMDAQIkGQEBNwEFCQEBAQEWEyUDDCMlAgQKBAUFFoMGgWkDFQECApwCAoo?=
 =?us-ascii?q?HgWwzgnYBAQWFCxiCCQiMPIIWgRGKfkqCJos0hFuRAgcCAopKhwIjgVyIRocom?=
 =?us-ascii?q?SICBAIEBQINAQEFgVyBeHCDPIIbCQMXg0qKU0ExgQUBASGLCAGBHgEB?=
X-IronPort-AV: E=Sophos;i="5.56,349,1539673200"; 
   d="scan'208";a="57317521"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 13 Dec 2018 04:12:55 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729102AbeLMMJv (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 13 Dec 2018 07:09:51 -0500
Received: from mail-eopbgr60130.outbound.protection.outlook.com ([40.107.6.130]:8992
        "EHLO EUR04-DB3-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1729088AbeLMMJs (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 13 Dec 2018 07:09:48 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=nokia.onmicrosoft.com;
 s=selector1-nokia-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=cgvQ9Wf0CFqiBszG3NIR0ORzd1Qp2hk/cYM0s9AxuEk=;
 b=qXmHUKxGWei+UOpH2ylvnMux60rEIyfjaD5Y/HWUw6J4DWmVZLfTiiySIHceWqihY155Yd7bV8KqmI7QrfjtRu+3/PEk67tL43zrJ44Mmbo44MqmQpYg8Arnf1ry3eZJr7teNbZ/tPqZMNgS764G0hna4lIeBgxwnoGh2hLrRNM=
Received: from HE1PR07MB3434.eurprd07.prod.outlook.com (10.170.247.141) by
 HE1PR07MB4314.eurprd07.prod.outlook.com (20.176.167.11) with Microsoft SMTP
 Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1425.9; Thu, 13 Dec 2018 12:09:38 +0000
Received: from HE1PR07MB3434.eurprd07.prod.outlook.com
 ([fe80::3073:f1ea:c220:6f63]) by HE1PR07MB3434.eurprd07.prod.outlook.com
 ([fe80::3073:f1ea:c220:6f63%2]) with mapi id 15.20.1446.006; Thu, 13 Dec 2018
 12:09:38 +0000
From: "Adamski, Krzysztof (Nokia - PL/Wroclaw)" 
        <krzysztof.adamski@nokia.com>
To: Wolfram Sang <wsa@the-dreams.de>
CC: "linux-i2c@vger.kernel.org" <linux-i2c@vger.kernel.org>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        Linus Walleij <linus.walleij@linaro.org>,
        Guenter Roeck <linux@roeck-us.net>,
        Tobias Jordan <Tobias.Jordan@elektrobit.com>,
        Peter Rosin <peda@axentia.se>,
        "Sverdlin, Alexander (Nokia - DE/Ulm)" <alexander.sverdlin@nokia.com>
Subject: [PATCH v2] i2c: axxia: support sequence command mode
Thread-Topic: [PATCH v2] i2c: axxia: support sequence command mode
Thread-Index: AQHUkty4Wm0dhdK350uQLPiB4SOUtg==
Date: Thu, 13 Dec 2018 12:09:38 +0000
Message-ID: <20181213120926.GA10479@localhost.localdomain>
References: <20181211200435.abk3jdsmltz7c26w@ninjato>
In-Reply-To: <20181211200435.abk3jdsmltz7c26w@ninjato>
Accept-Language: pl-PL, en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-clientproxiedby: HE1PR05CA0300.eurprd05.prod.outlook.com
 (2603:10a6:7:93::31) To HE1PR07MB3434.eurprd07.prod.outlook.com
 (2603:10a6:7:2c::13)
authentication-results: spf=none (sender IP is )
 smtp.mailfrom=krzysztof.adamski@nokia.com; 
x-ms-exchange-messagesentrepresentingtype: 1
x-originating-ip: [131.228.32.191]
x-ms-publictraffictype: Email
x-microsoft-exchange-diagnostics: 1;HE1PR07MB4314;6:9pe2h8MRhFkUQF2CJ86OR5VKinBnifZYF0JsgSLakiNm3UBAc8klRcVKu1GypotZZiVpyEvc/OjwiI2Ol2G+iR7ChqHYzQXGvZMnScYwabEb6htSMWHmDXnRsiCNA4+Au0gKx53XJL6+wu6rv6LWZbmAVEeIFqhBqoL5DgnXROdWKdrlTqjOGRUA6cbi8H6WxfaxCv/W2LB4pp0MYs84CwTBsLjBwAsKmkJxVdD+xHNkfSVP0tFbGCO6N7uyj30/I5TDCuMcOLPRvfZ7Ntccg7DmlSCmM8Il/0zlqkej8zG1E/EcrzR1sSbeuzBx3hMK+fKRp99GaBp/ZF+6Q8EjiiWXMk7RzqyxwhZrNeSdMHJkdHk/16E1YKfIBCJOSGlnfA2t99Sv8Awq4ztqrCFZrWk9U1wikHnX+y9o0tBYQ9l7ZDHWpZfuHILQWYuXHrasj0A9gbkt7n88QHCg7hKtYA==;5:GnvW4/gupsoUMT8P5kt3U+EAtHdxx46yrBWuo7n+BUy7wmpoA200HF8qFnSEOxwszP0w5LgQgmaju1SJHNcXxPzWUpuT1gDZ1RiqPHHBGaKydn2kmDGs+OZCRnMS40qELQSTebSvFl9AhtDbTp6kqmSPfTyyu0nUWjjAUTBGZRs=;7:qWxpvBrPzWzlNOFhxIq42Ml8YlpOdoFSBgB9qUkotn7jNxdUvGSCx0dZaqTuwcJHEx9uxYqTJwSnPOO+bHbPfzji+pPw45S+qm4YodU3+EhB2Ys1md5JxZ45mryRFe1Cuz7O/UQo1ArubpzT++4tzQ==
x-ms-office365-filtering-correlation-id: c1de3ca9-16ef-431f-2b62-08d660f3daaf
x-ms-office365-filtering-ht: Tenant
x-microsoft-antispam: BCL:0;PCL:0;RULEID:(2390098)(7020095)(4652040)(8989299)(5600074)(711020)(4618075)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(2017052603328)(7193020);SRVR:HE1PR07MB4314;
x-ms-traffictypediagnostic: HE1PR07MB4314:
x-microsoft-antispam-prvs: <HE1PR07MB431439BD23DC386E447B0A98EFA00@HE1PR07MB4314.eurprd07.prod.outlook.com>
x-ms-exchange-senderadcheck: 1
x-exchange-antispam-report-cfa-test: BCL:0;PCL:0;RULEID:(8211001083)(3230021)(999002)(11241501185)(806100)(6040522)(2401047)(8121501046)(5005006)(3002001)(3231475)(944501520)(52105112)(10201501046)(93006095)(93001095)(6055026)(148016)(149066)(150057)(6041310)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123558120)(20161123564045)(20161123562045)(20161123560045)(201708071742011)(7699051)(76991095);SRVR:HE1PR07MB4314;BCL:0;PCL:0;RULEID:;SRVR:HE1PR07MB4314;
x-forefront-prvs: 088552DE73
x-forefront-antispam-report: SFV:NSPM;SFS:(10019020)(376002)(346002)(396003)(366004)(136003)(39860400002)(199004)(189003)(33656002)(14454004)(6512007)(551934003)(5660300001)(53936002)(33896004)(11346002)(81166006)(76176011)(7736002)(305945005)(9686003)(99286004)(446003)(2906002)(52116002)(106356001)(81156014)(8676002)(6436002)(14444005)(8936002)(105586002)(256004)(316002)(71190400001)(6486002)(68736007)(54906003)(1076002)(575784001)(4326008)(71200400001)(66066001)(6506007)(6116002)(3846002)(61506002)(478600001)(386003)(6916009)(26005)(86362001)(97736004)(476003)(102836004)(186003)(25786009)(486006)(107886003);DIR:OUT;SFP:1102;SCL:1;SRVR:HE1PR07MB4314;H:HE1PR07MB3434.eurprd07.prod.outlook.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;A:1;MX:1;
x-microsoft-antispam-message-info: qKX86rYplxf9ZolEn6DgJXZXBgYhzT1HZ/AxFGs5GGM24nbkUgtHUh5fjnGeO6Vkvymtz7512gsPNBbmKWsyrIhjchRz2x27pScPgVlkNd+JXQUpBZxisIbCxJeUQvTsydH2Gu4rdlN6Z9NA8pEPY9CI1tXmcCHyhOcF3ogJMLY8zCRo2zwJluLFnfZ2iwv97LKrEbJwMdbrCFAYilsV7mX5N0kD5Kr/cHU4cRVBdOspSvMYT2s/nq5rbsFNG1KcHuOHAWoeSYkzQQgsmsGhatc61XWzdmOrV+TW5pH0BKhjcCUXcpCMvmk9/ytl1aIi
spamdiagnosticoutput: 1:99
spamdiagnosticmetadata: NSPM
Content-Type: text/plain; charset="iso-8859-1"
Content-ID: <820069974CB8F348B78F6929DDEA2E52@eurprd07.prod.outlook.com>
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
X-OriginatorOrg: nokia.com
X-MS-Exchange-CrossTenant-Network-Message-Id: c1de3ca9-16ef-431f-2b62-08d660f3daaf
X-MS-Exchange-CrossTenant-originalarrivaltime: 13 Dec 2018 12:09:38.4236
 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: 5d471751-9675-428d-917b-70f44f9630b0
X-MS-Exchange-Transport-CrossTenantHeadersStamped: HE1PR07MB4314
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

In order to comply with SMBus specification, the Axxia I=B2C module will
abort the multi message transfer if the delay between finishing sending
one message and starting another is longer than 25ms. Unfortunately it
isn't that hard to trigger this situation on a busy system. In order to
fix this problem, we should make sure hardware does whole transaction
without waiting for software to fill some data.

Fortunately, in addition to Manual mode that is currently used by the
driver to perform I=B2C transfers, the module supports also so called
Sequence mode. In this mode, the module automatically performs
predefined sequence of operations - it sends a slave address, transmits
specified number of bytes from the FIFO, changes transfer direction,
resends the slave address and then reads specified number of bytes to
FIFO. While very inflexible, this does fit a most common case of multi
message transfer - the one where you first write a register number you
want to read and then read it.

To use this mode effectively, a number of conditions must be met to
ensure the transaction does fit the predefined sequence. In case this is
not the case, a fallback to manual mode is used.

The initialization of this mode is very similar to Manual mode. The most
notable difference is different bit in the Master Interrupt Status
designating finishing of transaction. Also some of the errors, like TSS,
cannot happen in this mode.

While it is possible to support transactions requesting a read of any
size (RFL interrupt will be generated when FIFO size is not enough) the
TFL interrupt is not available in this mode, thus the write part of the
transaction cannot exceed FIFO_SIZE (8).

Note that in case of a NAK during transaction, the NA/ND status bits
will be set before STOP command is generated, triggering an interrupt
while the controller is still busy. Current solution for this problem is
to actively wait for this command to stop before leaving xfer callback.

Signed-off-by: Krzysztof Adamski <krzysztof.adamski@nokia.com>
---

Sorry for those problems I still don't know why my checkpatch did not
complain about it (have to verify that) and I did add smatch to my
arsenal now.

Changes in v2:
- added timeout to axxia_i2c_handle_seq_nak()
- changed udelay to usleep_range in axxia_i2c_handle_seq_nak()

 drivers/i2c/busses/i2c-axxia.c | 108 ++++++++++++++++++++++++++++++---
 1 file changed, 101 insertions(+), 7 deletions(-)

diff --git a/drivers/i2c/busses/i2c-axxia.c b/drivers/i2c/busses/i2c-axxia.=
c
index 35258321e81b..03f1ce75a32e 100644
--- a/drivers/i2c/busses/i2c-axxia.c
+++ b/drivers/i2c/busses/i2c-axxia.c
@@ -12,6 +12,7 @@
  */
 #include <linux/clk.h>
 #include <linux/clkdev.h>
+#include <linux/delay.h>
 #include <linux/err.h>
 #include <linux/i2c.h>
 #include <linux/init.h>
@@ -25,6 +26,7 @@
 #define I2C_XFER_TIMEOUT    (msecs_to_jiffies(250))
 #define I2C_STOP_TIMEOUT    (msecs_to_jiffies(100))
 #define FIFO_SIZE           8
+#define SEQ_LEN             2
=20
 #define GLOBAL_CONTROL		0x00
 #define   GLOBAL_MST_EN         BIT(0)
@@ -51,6 +53,7 @@
 #define   CMD_BUSY		(1<<3)
 #define   CMD_MANUAL		(0x00 | CMD_BUSY)
 #define   CMD_AUTO		(0x01 | CMD_BUSY)
+#define   CMD_SEQUENCE		(0x02 | CMD_BUSY)
 #define MST_RX_XFER		0x2c
 #define MST_TX_XFER		0x30
 #define MST_ADDR_1		0x34
@@ -87,7 +90,9 @@
  * axxia_i2c_dev - I2C device context
  * @base: pointer to register struct
  * @msg: pointer to current message
- * @msg_xfrd: number of bytes transferred in msg
+ * @msg_r: pointer to current read message (sequence transfer)
+ * @msg_xfrd: number of bytes transferred in tx_fifo
+ * @msg_xfrd_r: number of bytes transferred in rx_fifo
  * @msg_err: error code for completed message
  * @msg_complete: xfer completion object
  * @dev: device reference
@@ -98,7 +103,9 @@
 struct axxia_i2c_dev {
 	void __iomem *base;
 	struct i2c_msg *msg;
+	struct i2c_msg *msg_r;
 	size_t msg_xfrd;
+	size_t msg_xfrd_r;
 	int msg_err;
 	struct completion msg_complete;
 	struct device *dev;
@@ -227,14 +234,14 @@ static int i2c_m_recv_len(const struct i2c_msg *msg)
  */
 static int axxia_i2c_empty_rx_fifo(struct axxia_i2c_dev *idev)
 {
-	struct i2c_msg *msg =3D idev->msg;
+	struct i2c_msg *msg =3D idev->msg_r;
 	size_t rx_fifo_avail =3D readl(idev->base + MST_RX_FIFO);
-	int bytes_to_transfer =3D min(rx_fifo_avail, msg->len - idev->msg_xfrd);
+	int bytes_to_transfer =3D min(rx_fifo_avail, msg->len - idev->msg_xfrd_r)=
;
=20
 	while (bytes_to_transfer-- > 0) {
 		int c =3D readl(idev->base + MST_DATA);
=20
-		if (idev->msg_xfrd =3D=3D 0 && i2c_m_recv_len(msg)) {
+		if (idev->msg_xfrd_r =3D=3D 0 && i2c_m_recv_len(msg)) {
 			/*
 			 * Check length byte for SMBus block read
 			 */
@@ -247,7 +254,7 @@ static int axxia_i2c_empty_rx_fifo(struct axxia_i2c_dev=
 *idev)
 			msg->len =3D 1 + c;
 			writel(msg->len, idev->base + MST_RX_XFER);
 		}
-		msg->buf[idev->msg_xfrd++] =3D c;
+		msg->buf[idev->msg_xfrd_r++] =3D c;
 	}
=20
 	return 0;
@@ -287,7 +294,7 @@ static irqreturn_t axxia_i2c_isr(int irq, void *_dev)
 	}
=20
 	/* RX FIFO needs service? */
-	if (i2c_m_rd(idev->msg) && (status & MST_STATUS_RFL))
+	if (i2c_m_rd(idev->msg_r) && (status & MST_STATUS_RFL))
 		axxia_i2c_empty_rx_fifo(idev);
=20
 	/* TX FIFO needs service? */
@@ -320,9 +327,12 @@ static irqreturn_t axxia_i2c_isr(int irq, void *_dev)
 	} else if (status & MST_STATUS_SNS) {
 		/* Transfer done */
 		i2c_int_disable(idev, ~MST_STATUS_TSS);
-		if (i2c_m_rd(idev->msg) && idev->msg_xfrd < idev->msg->len)
+		if (i2c_m_rd(idev->msg_r) && idev->msg_xfrd_r < idev->msg_r->len)
 			axxia_i2c_empty_rx_fifo(idev);
 		complete(&idev->msg_complete);
+	} else if (status & MST_STATUS_SS) {
+		/* Auto/Sequence transfer done */
+		complete(&idev->msg_complete);
 	} else if (status & MST_STATUS_TSS) {
 		/* Transfer timeout */
 		idev->msg_err =3D -ETIMEDOUT;
@@ -363,6 +373,70 @@ static void axxia_i2c_set_addr(struct axxia_i2c_dev *i=
dev, struct i2c_msg *msg)
 	writel(addr_2, idev->base + MST_ADDR_2);
 }
=20
+/* The NAK interrupt will be sent _before_ issuing STOP command
+ * so the controller might still be busy processing it. No
+ * interrupt will be sent at the end so we have to poll for it
+ */
+static int axxia_i2c_handle_seq_nak(struct axxia_i2c_dev *idev)
+{
+	unsigned long timeout =3D jiffies + I2C_XFER_TIMEOUT;
+
+	do {
+		if ((readl(idev->base + MST_COMMAND) & CMD_BUSY) =3D=3D 0)
+			return 0;
+		usleep_range(1, 100);
+	} while (time_before(jiffies, timeout));
+
+	return -ETIMEDOUT;
+}
+
+static int axxia_i2c_xfer_seq(struct axxia_i2c_dev *idev, struct i2c_msg m=
sgs[])
+{
+	u32 int_mask =3D MST_STATUS_ERR | MST_STATUS_SS | MST_STATUS_RFL;
+	u32 rlen =3D i2c_m_recv_len(&msgs[1]) ? I2C_SMBUS_BLOCK_MAX : msgs[1].len=
;
+	unsigned long time_left;
+
+	axxia_i2c_set_addr(idev, &msgs[0]);
+
+	writel(msgs[0].len, idev->base + MST_TX_XFER);
+	writel(rlen, idev->base + MST_RX_XFER);
+
+	idev->msg =3D &msgs[0];
+	idev->msg_r =3D &msgs[1];
+	idev->msg_xfrd =3D 0;
+	idev->msg_xfrd_r =3D 0;
+	axxia_i2c_fill_tx_fifo(idev);
+
+	writel(CMD_SEQUENCE, idev->base + MST_COMMAND);
+
+	reinit_completion(&idev->msg_complete);
+	i2c_int_enable(idev, int_mask);
+
+	time_left =3D wait_for_completion_timeout(&idev->msg_complete,
+						I2C_XFER_TIMEOUT);
+
+	i2c_int_disable(idev, int_mask);
+
+	axxia_i2c_empty_rx_fifo(idev);
+
+	if (idev->msg_err =3D=3D -ENXIO) {
+		if (axxia_i2c_handle_seq_nak(idev))
+			axxia_i2c_init(idev);
+	} else if (readl(idev->base + MST_COMMAND) & CMD_BUSY)
+		dev_warn(idev->dev, "busy after xfer\n");
+
+	if (time_left =3D=3D 0) {
+		idev->msg_err =3D -ETIMEDOUT;
+		i2c_recover_bus(&idev->adapter);
+		axxia_i2c_init(idev);
+	}
+
+	if (unlikely(idev->msg_err) && idev->msg_err !=3D -ENXIO)
+		axxia_i2c_init(idev);
+
+	return idev->msg_err;
+}
+
 static int axxia_i2c_xfer_msg(struct axxia_i2c_dev *idev, struct i2c_msg *=
msg)
 {
 	u32 int_mask =3D MST_STATUS_ERR | MST_STATUS_SNS;
@@ -371,7 +445,9 @@ static int axxia_i2c_xfer_msg(struct axxia_i2c_dev *ide=
v, struct i2c_msg *msg)
 	unsigned int wt_value;
=20
 	idev->msg =3D msg;
+	idev->msg_r =3D msg;
 	idev->msg_xfrd =3D 0;
+	idev->msg_xfrd_r =3D 0;
 	reinit_completion(&idev->msg_complete);
=20
 	axxia_i2c_set_addr(idev, msg);
@@ -452,6 +528,18 @@ static int axxia_i2c_stop(struct axxia_i2c_dev *idev)
 	return 0;
 }
=20
+/* This function checks if the msgs[] array contains messages compatible w=
ith
+ * Sequence mode of operation. This mode assumes there will be exactly one
+ * write of non-zero length followed by exactly one read of non-zero lengt=
h,
+ * both targeted at the same client device.
+ */
+static bool axxia_i2c_sequence_ok(struct i2c_msg msgs[], int num)
+{
+	return num =3D=3D SEQ_LEN && !i2c_m_rd(&msgs[0]) && i2c_m_rd(&msgs[1]) &&
+	       msgs[0].len > 0 && msgs[0].len <=3D FIFO_SIZE &&
+	       msgs[1].len > 0 && msgs[0].addr =3D=3D msgs[1].addr;
+}
+
 static int
 axxia_i2c_xfer(struct i2c_adapter *adap, struct i2c_msg msgs[], int num)
 {
@@ -460,6 +548,12 @@ axxia_i2c_xfer(struct i2c_adapter *adap, struct i2c_ms=
g msgs[], int num)
 	int ret =3D 0;
=20
 	idev->msg_err =3D 0;
+
+	if (axxia_i2c_sequence_ok(msgs, num)) {
+		ret =3D axxia_i2c_xfer_seq(idev, msgs);
+		return ret ? : SEQ_LEN;
+	}
+
 	i2c_int_enable(idev, MST_STATUS_TSS);
=20
 	for (i =3D 0; ret =3D=3D 0 && i < num; ++i)
--=20
2.17.2

