Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 11 Dec 2018 19:54:37 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 8E768580380;
	Tue, 11 Dec 2018 03:56:10 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga001-1.jf.intel.com with ESMTP; 11 Dec 2018 03:56:10 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AvxyHjR8P7uVFIP9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1+0SIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsLxULA0XzCi76ZwSB/0li?=
 =?us-ascii?q?gIKiMy/GXYh8Bsia5Wpg+qqR5izI7OeIybNOdwcK3ec90dR2VBUMleWSNfDIOn?=
 =?us-ascii?q?d4sCDfEMMfpbooTnu1cDtweyCRWqCejyyjFInHj23agi3uk9FQHG3RAvEMwTu3?=
 =?us-ascii?q?rUstr1Lr0SXvq0zajJzDXIcvRb1i356IjJbh8uv+uAXbxufsrL00kgDQLEj1SR?=
 =?us-ascii?q?qYH+MDOV0/4Cs2mf7+Z6Se2vjGsnphh3rzOyxckskpHEipwJxl3A7yl13Yg4Kc?=
 =?us-ascii?q?OiREJmYtOoDIFcuiCYOoduXM8uXmVltDwnxrEYt5O3ZjYGxZY9yxLCb/GKfI6F?=
 =?us-ascii?q?6Q/5WumLOzd3nndldaq/hxms9UigzfXxVte70FlUtCpJiNrMuW4X1xzV9MeHTu?=
 =?us-ascii?q?Fx/kC72TaAzwzT6+dELl4olafDNZIt3ro9moAOvUnNACP6glj6gayKekk+++Wl?=
 =?us-ascii?q?6fzrYrD8qZ+dM490hBv+MqMrmsGnBeQ4Mw4OX3WU+Oil173s41f5QLNUgf0yi6?=
 =?us-ascii?q?XZt57bJcIFqa6jGAJVzIkj5AilDzu809QXg2MHLFRbdxKDlYTpPEvOIP/gAfel?=
 =?us-ascii?q?n1usiCtrx+zBPrD5BpXNL3vDn6n7cbdy9k5R0w4zzdFZ55JJBbANOvPzWknttN?=
 =?us-ascii?q?PGCh81KRC7w+HiCN9lzIMRRXqPArOFMKPVqVKI5vggI+iQZIAPvzbxMfgl5+P0?=
 =?us-ascii?q?gn8/ll8QZq2p3ZoRaHClEfVqOUSZYXzwgtgfFWcGpBYxTOvviFeaSz5ce26yX7?=
 =?us-ascii?q?4g5jE8EI+mD4DDSZ63jLyC2ye7GJtWZmddB1CIEHfocZiEWvgWZCKTJM9hjiIL?=
 =?us-ascii?q?Vby7R4A90hGusRfwy6B7IerM5i0YqZXj2cBv6O3IlREy8j90A96H026XTWF5hW?=
 =?us-ascii?q?cIRz4w3KBirk1x0FaD0a5kg/NGEdxf/e9GUgA/NZTE1ex1F8jyWh7dfteOUFum?=
 =?us-ascii?q?Qc+pATcrQtI1wt8BeUB9G9q5gxDH3iqqBaIVlrORCJw19KLcw2b+J8Jnx3na06?=
 =?us-ascii?q?khikEsQtFTOm2+mq5/6w/TCpbUnEqDiaala74Q3C7X+2eF1mqBokdYXAl0UaXG?=
 =?us-ascii?q?WHAfYlDbrdD45kPEUr+vBq4rMgpHyc6eNKRKbsflgklBRPfmIN7eeX6+m3+sBR?=
 =?us-ascii?q?aUwbOBdJfldH8D3CrDEkQEkxoc/XCdNQcgACesuGbeDD1oFVLybELg6+h+qHWn?=
 =?us-ascii?q?TkAqywGGdVFu172w+hQNn/yTV+sT3q4YuCcmszh0AFe939fRC9qcpwpgfL9QYc?=
 =?us-ascii?q?8n7FdAz2LZsw19PpqvL615gl4ecgJ3v17h1hltC4VAl9Qqo20uzAZoNa2Y11ZB?=
 =?us-ascii?q?fSuC3Z/sIr3XNnXy/Be3ZqHM3lHRztmX9bkP6fgisFrjoRymGVAk83Vk1NlVzW?=
 =?us-ascii?q?CR5pHLDAoUTJLwXVw79xl8p7HGfCY945nY2mFrMamxqjXCwc4mBPM5yha8eNdS?=
 =?us-ascii?q?KKOFFBLoH8IGHcSvKewqlEKvbhILJ+1S8K80P8W7d/qJwqKrPeBgnC64gmRD+o?=
 =?us-ascii?q?xyzkWM9y9kQO7Sw5kF2+2Y3heAVzrkllehs9z4lppeZT4PGWqz0y7kC5BLZq1z?=
 =?us-ascii?q?ZIoEFX2hI8mqydpgnZ7tXHhY+UWnB1MH3s+pZBWTY0b83Q1WyUQYv3inlTGkwD?=
 =?us-ascii?q?xzljEjtrCf0zDWw+T+aBoHPXZGRWljjVv2IYm4lcsaXFWubwUykBul5ED6x7VU?=
 =?us-ascii?q?pahlLmnTR1tIcDbyL214TqSwsb+CadZV6Jw0qSVXTPi8YVeCR77/uRQaySDjH2?=
 =?us-ascii?q?hZxDwhbDGloJb5nx97iGKbMnlzqmHUecVxxRfZ+dzdSuRd3jsARClklzbXAkKw?=
 =?us-ascii?q?MMWu/dWRj53DqPyxV3q9Vp1Pdinm1YOBuzG85WFwAx2/nvazl8bjEQg71y/7yt?=
 =?us-ascii?q?ZrWT/JrBb6fonkyaC6Pfh7cUlvAV/289B6FZ1mkossmJEQ3mAXhpaP8noGi2vz?=
 =?us-ascii?q?Mchb1rj4bHoCXjMLx9/V4A742ExsNH6JxoT5VmmDzctlfdW1fmQW2icl5cBQFK?=
 =?us-ascii?q?iU9KBEnTdyolegqALRYPt9kS0Hxfog9nEamP0JtxQ3ziqGHL8SB0ZYMDfolxSJ?=
 =?us-ascii?q?6dC+sapWaHyucbi2yEpxg9ShAKuerQFbXXbzYo0iEjNo7sVjLFLM12X+6p3jeN?=
 =?us-ascii?q?nVd94StwebkxHdj+hOM5Ixl+EHhS5mOWL7oH0kxPQ3jR1o3ZGmooeHL39h876+?=
 =?us-ascii?q?Ah5dLjf1fd8c+inxjaZCmcabx5ugEY9mGjUPQZvkV/aoEC8JuPTjNgaOFiA8q3?=
 =?us-ascii?q?iBFbreGw+f9Flpr3bVH5+3MHGXIWETzc9+SxmFOExfnAcUUS04npEjEwCl2tfh?=
 =?us-ascii?q?fF1l5jwL5V74txhMyv9uNxblSWfSvwOoajYySJiCIxta9ABC50HJMcOA6uJ/BT?=
 =?us-ascii?q?1X/pqkrAaVMGyUexxIDX0VWkyDH13iPr6u5cTZ8+iFHOW+KeHCYa6JqexYWPeF?=
 =?us-ascii?q?3pav0opg/zaROcSDJHhiD/sn2kVdWXB1AdjWmzIKSyYPjSLCc9abpAug+i1wts?=
 =?us-ascii?q?2/8OrkWAPs5YuMCrteK9Zv+wqxgaeMKeGQnjt5KS1D25MIxH/IzqUf3VEIhyFv?=
 =?us-ascii?q?cTmtDaoPtSrXQK3Mna9XCgYRazlvO8tQ86I8wg5NNNbBhdPozbF4lOA6CldfWV?=
 =?us-ascii?q?zlm8GkfsgKI2C7NFPaC0eHLrWGJTvXw87pZaOwU6FfjOJRtxeoozaUD1fjPiif?=
 =?us-ascii?q?lznuTx2vLeBMjCSBMBNCoo2ybhZtBnblTN/9bh27Mdl3jSA5wLEuh3PKM3IcPi?=
 =?us-ascii?q?Z4c09XsrKQ6iZYiO1lG2Nd9nplMfWEmyGB4ujYMJkWt/5rAiVyl+1C4XU6y6Fa?=
 =?us-ascii?q?7CdLRPFunCvSr9huo0ypk+WVyzpnVgZOpShPhI6RoUpiPqDZpdF8XiPZ+hYM9n?=
 =?us-ascii?q?mdB1EQqtBkEtzivbxLmIuH1KT0YAtFttLZ9McRHYDTLoqGNmI8LVu6NiTTCV4s?=
 =?us-ascii?q?ST+gOCnxilZHmeOA9zXBp5w7oZWqlpcUULZJRl0dGfYTC0AjF9sHdsQkFgg4mK?=
 =?us-ascii?q?KW2ZZbrUG1qwPcEZkCsw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AZAABMpA9ch0O0hNFkHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGCaYECJ4gYg3xfizGCIZc+FIFiDwEBGAMQAYd5IjQJDQEDAQEBAQEBAgE?=
 =?us-ascii?q?TAQEBCA0JCCkjDII2DIJ7AwMBAi8BDQEbHQEDAgkBAQUQOwMeAhEBBQEcGQWDH?=
 =?us-ascii?q?AGBaAEDFAEFDplIPIwfBQEXgncFhD4KGScNXYE3AgYSh2qDI4EcgVc/gRGFaYF?=
 =?us-ascii?q?kLoMwgkMCiTeGCHyQEi4HAoIiBIRjhxmDJAsYgVxNhz2HWiyJfIR8iWgCBAIEB?=
 =?us-ascii?q?QIFDyGBJYIOTSOBAYI7CYISCxiDSoNThw8xMoECAwEBIROHb4I+AQE?=
X-IPAS-Result: =?us-ascii?q?A0AZAABMpA9ch0O0hNFkHQEBBQEHBQGBUQgBCwGCaYECJ4g?=
 =?us-ascii?q?Yg3xfizGCIZc+FIFiDwEBGAMQAYd5IjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjD?=
 =?us-ascii?q?II2DIJ7AwMBAi8BDQEbHQEDAgkBAQUQOwMeAhEBBQEcGQWDHAGBaAEDFAEFDpl?=
 =?us-ascii?q?IPIwfBQEXgncFhD4KGScNXYE3AgYSh2qDI4EcgVc/gRGFaYFkLoMwgkMCiTeGC?=
 =?us-ascii?q?HyQEi4HAoIiBIRjhxmDJAsYgVxNhz2HWiyJfIR8iWgCBAIEBQIFDyGBJYIOTSO?=
 =?us-ascii?q?BAYI7CYISCxiDSoNThw8xMoECAwEBIROHb4I+AQE?=
X-IronPort-AV: E=Sophos;i="5.56,342,1539673200"; 
   d="scan'208";a="56968788"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 11 Dec 2018 03:55:58 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726484AbeLKLzy (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 11 Dec 2018 06:55:54 -0500
Received: from mail-pf1-f175.google.com ([209.85.210.175]:43611 "EHLO
        mail-pf1-f175.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726130AbeLKLzw (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 11 Dec 2018 06:55:52 -0500
Received: by mail-pf1-f175.google.com with SMTP id w73so7005852pfk.10;
        Tue, 11 Dec 2018 03:55:52 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding;
        bh=i3bXWUq5CeAhUMNM7C0c+x4MGX+cdRwyO0jh9GC4XT0=;
        b=FTdOJEcg8+i4zPT81d+FvZLxyNOeVOeRv7l6341jGbZBMMJaSIUzaoAiEbFSS1rKs1
         zP3qWvOV/HVmC0MLgEMEbTiVq/Zh5u6AwiA/qdmQSdSB3jva/OleqMGpeE9N4DmwNXil
         avDq9x9ENeKC7vtCF+/nckgtgHEGnQClypu9jxOGPlHAlZgmWEHwny3LQPaiXZultT3B
         xW8sgqjpvVMpTHAd12WSKPOv859HIKsjD/FRcrPssxJnCItzWsl0hHDkqFvM643E8SZG
         n9Bf+21hGZhUc8AfyHhUrMt5ifwTE68m5icPqDB7VjPR1t0wUNkgD+hxz+L/u4fqoU53
         5/YQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=i3bXWUq5CeAhUMNM7C0c+x4MGX+cdRwyO0jh9GC4XT0=;
        b=CCZ5I/Z7rmIqStHNJ/dWHQWQXjtYkVksM+4ev8MSc+/Z5zEUwpoCvc1KjpUN1tyvgn
         YpTzxxyLNc/H+K224aN+QZnxvbJX21XRnfgc4q2BNcyrQFd0YBw4OYAm/+aIrnN27NIG
         sNzw0ok7QpOSuzGxzlJpaYuwg29fH6c1gg6RvzCSFiTRUbaI7/LQ1jQ1IWaW/B4LGXdv
         irASDnpe/RWi+p8KryyPbzfVroAqiMU6BEP2+By0kQe3fV4I25AKfyQ3chLeUX3qjSR8
         VC+Owf5jGgIObsS6XakmwjgNDdehx7AF/4krHPiWdlh784WTd38tP3woSE3yfSUIkVE3
         bFyA==
X-Gm-Message-State: AA+aEWag5GhR1LFiHFiiIQuS0sTIWDJPr9q/MoGfpxZujECuQWO66XFJ
        mfK3HWG8/MSEge7GUmE5SXY=
X-Google-Smtp-Source: AFSGD/WNJHaO/Wmg7k7N14g0fp8w+vlZe4BbNuJjkkxH+gjiXpdHEBfETkxk9QS1v03KKLIVpi18pQ==
X-Received: by 2002:a63:ce50:: with SMTP id r16mr14221312pgi.217.1544529351783;
        Tue, 11 Dec 2018 03:55:51 -0800 (PST)
Received: from localhost (219x123x27x194.ap219.ftth.ucom.ne.jp. [219.123.27.194])
        by smtp.gmail.com with ESMTPSA id o84sm24104383pfi.172.2018.12.11.03.55.50
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Tue, 11 Dec 2018 03:55:51 -0800 (PST)
From: Alice Ferrazzi <alice.ferrazzi@gmail.com>
Cc: ast@kernel.org, daniel@iogearbox.net, shuah@kernel.org,
        netdev@vger.kernel.org, linux-kernel@vger.kernel.org,
        Alice Ferrazzi <alice.ferrazzi@gmail.com>
Subject: [PATCH 4/7] selftest/bpf: test_offload PEP8 format style fix
Date: Tue, 11 Dec 2018 20:56:04 +0900
Message-Id: <20181211115607.13774-5-alice.ferrazzi@gmail.com>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <20181211115607.13774-1-alice.ferrazzi@gmail.com>
References: <20181211115607.13774-1-alice.ferrazzi@gmail.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
To: unlisted-recipients:; (no To-header on input)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Signed-off-by: Alice Ferrazzi <alice.ferrazzi@gmail.com>
---
 tools/testing/selftests/bpf/test_offload.py | 68 ++++++++++++++++-----
 1 file changed, 54 insertions(+), 14 deletions(-)

diff --git a/tools/testing/selftests/bpf/test_offload.py b/tools/testing/selftests/bpf/test_offload.py
index d59642e70f56..f80c4f13991d 100755
--- a/tools/testing/selftests/bpf/test_offload.py
+++ b/tools/testing/selftests/bpf/test_offload.py
@@ -29,25 +29,30 @@ log_level = 1
 skip_extack = False
 bpf_test_dir = os.path.dirname(os.path.realpath(__file__))
 pp = pprint.PrettyPrinter()
-devs = [] # devices we created for clean up
-files = [] # files to be removed
-netns = [] # net namespaces to be removed
+devs = []  # devices we created for clean up
+files = []  # files to be removed
+netns = []  # net namespaces to be removed
+
 
 def log_get_sec(level=0):
     return "*" * (log_level + level)
 
+
 def log_level_inc(add=1):
     global log_level
     log_level += add
 
+
 def log_level_dec(sub=1):
     global log_level
     log_level -= sub
 
+
 def log_level_set(level):
     global log_level
     log_level = level
 
+
 def log(header, data, level=None):
     """
     Output to an optional log.
@@ -67,6 +72,7 @@ def log(header, data, level=None):
         logfile.write("\n")
     logfile.write(data)
 
+
 def skip(cond, msg):
     if not cond:
         return
@@ -74,6 +80,7 @@ def skip(cond, msg):
     log("SKIP: " + msg, "", level=1)
     os.sys.exit(0)
 
+
 def fail(cond, msg):
     if not cond:
         return
@@ -81,11 +88,13 @@ def fail(cond, msg):
     log("FAIL: " + msg, "", level=1)
     os.sys.exit(1)
 
+
 def start_test(msg):
     log(msg, "", level=1)
     log_level_inc()
     print(msg)
 
+
 def cmd(cmd, shell=True, include_stderr=False, background=False, fail=True):
     """
     Run a command in subprocess and return tuple of (retval, stdout);
@@ -101,6 +110,7 @@ def cmd(cmd, shell=True, include_stderr=False, background=False, fail=True):
 
     return cmd_result(proc, include_stderr=include_stderr, fail=fail)
 
+
 def cmd_result(proc, include_stderr=False, fail=False):
     stdout, stderr = proc.communicate()
     stdout = stdout.decode("utf-8")
@@ -128,11 +138,13 @@ def cmd_result(proc, include_stderr=False, fail=False):
     else:
         return proc.returncode, stdout
 
+
 def rm(f):
     cmd("rm -f %s" % (f))
     if f in files:
         files.remove(f)
 
+
 def tool(name, args, flags, JSON=True, ns="", fail=True, include_stderr=False):
     params = ""
     if JSON:
@@ -158,10 +170,12 @@ def tool(name, args, flags, JSON=True, ns="", fail=True, include_stderr=False):
     else:
         return ret, out
 
+
 def bpftool(args, JSON=True, ns="", fail=True, include_stderr=False):
-    return tool("bpftool", args, {"json":"-p"}, JSON=JSON, ns=ns,
+    return tool("bpftool", args, {"json": "-p"}, JSON=JSON, ns=ns,
                 fail=fail, include_stderr=include_stderr)
 
+
 def bpftool_prog_list(expected=None, ns=""):
     _, progs = bpftool("prog show", JSON=True, ns=ns, fail=True)
     # Remove the base progs
@@ -174,6 +188,7 @@ def bpftool_prog_list(expected=None, ns=""):
                  (len(progs), expected))
     return progs
 
+
 def bpftool_map_list(expected=None, ns=""):
     _, maps = bpftool("map show", JSON=True, ns=ns, fail=True)
     # Remove the base maps
@@ -186,6 +201,7 @@ def bpftool_map_list(expected=None, ns=""):
                  (len(maps), expected))
     return maps
 
+
 def bpftool_prog_list_wait(expected=0, n_retry=20):
     for i in range(n_retry):
         nprogs = len(bpftool_prog_list())
@@ -194,6 +210,7 @@ def bpftool_prog_list_wait(expected=0, n_retry=20):
         time.sleep(0.05)
     raise Exception("Time out waiting for program counts to stabilize want %d, have %d" % (expected, nprogs))
 
+
 def bpftool_map_list_wait(expected=0, n_retry=20):
     for i in range(n_retry):
         nmaps = len(bpftool_map_list())
@@ -202,6 +219,7 @@ def bpftool_map_list_wait(expected=0, n_retry=20):
         time.sleep(0.05)
     raise Exception("Time out waiting for map counts to stabilize want %d, have %d" % (expected, nmaps))
 
+
 def bpftool_prog_load(sample, file_name, maps=[], prog_type="xdp", dev=None,
                       fail=True, include_stderr=False):
     args = "prog load %s %s" % (os.path.join(bpf_test_dir, sample), file_name)
@@ -217,28 +235,35 @@ def bpftool_prog_load(sample, file_name, maps=[], prog_type="xdp", dev=None,
         files.append(file_name)
     return res
 
+
 def ip(args, force=False, JSON=True, ns="", fail=True, include_stderr=False):
     if force:
         args = "-force " + args
-    return tool("ip", args, {"json":"-j"}, JSON=JSON, ns=ns,
+    return tool("ip", args, {"json": "-j"}, JSON=JSON, ns=ns,
                 fail=fail, include_stderr=include_stderr)
 
+
 def tc(args, JSON=True, ns="", fail=True, include_stderr=False):
-    return tool("tc", args, {"json":"-p"}, JSON=JSON, ns=ns,
+    return tool("tc", args, {"json": "-p"}, JSON=JSON, ns=ns,
                 fail=fail, include_stderr=include_stderr)
 
+
 def ethtool(dev, opt, args, fail=True):
     return cmd("ethtool %s %s %s" % (opt, dev["ifname"], args), fail=fail)
 
-def bpf_obj(name, sec=".text", path=bpf_test_dir,):
+
+def bpf_obj(name, sec=".text", path=bpf_test_dir, ):
     return "obj %s sec %s" % (os.path.join(path, name), sec)
 
+
 def bpf_pinned(name):
     return "pinned %s" % (name)
 
+
 def bpf_bytecode(bytecode):
     return "bytecode \"%s\"" % (bytecode)
 
+
 def mknetns(n_retry=10):
     for i in range(n_retry):
         name = ''.join([random.choice(string.ascii_letters) for i in range(8)])
@@ -248,12 +273,14 @@ def mknetns(n_retry=10):
             return name
     return None
 
+
 def int2str(fmt, val):
     ret = []
     for b in struct.pack(fmt, val):
         ret.append(int(b))
     return " ".join(map(lambda x: str(x), ret))
 
+
 def str2int(strtab):
     inttab = []
     for i in strtab:
@@ -268,6 +295,7 @@ def str2int(strtab):
                         (len(strtab)))
     return struct.unpack(fmt, ba)[0]
 
+
 class DebugfsDir:
     """
     Class for accessing DebugFS directories as a dictionary.
@@ -318,6 +346,7 @@ class DebugfsDir:
 
         return dfs
 
+
 class NetdevSim:
     """
     Class for netdevsim netdevice and its attributes.
@@ -340,9 +369,9 @@ class NetdevSim:
 
     def _netdevsim_create(self):
         link = "" if self.link is None else "link " + self.link.dev['ifname']
-        _, old  = ip("link show")
+        _, old = ip("link show")
         ip("link add sim%d {link} type netdevsim".format(link=link))
-        _, new  = ip("link show")
+        _, new = ip("link show")
 
         for dev in new:
             f = filter(lambda x: x["ifname"] == dev["ifname"], old)
@@ -384,7 +413,8 @@ class NetdevSim:
             if nbound == bound and nprogs == total:
                 return
             time.sleep(0.05)
-        raise Exception("Time out waiting for program counts to stabilize want %d/%d, have %d bound, %d loaded" % (bound, total, nbound, nprogs))
+        raise Exception("Time out waiting for program counts to stabilize want %d/%d, have %d bound, %d loaded" % (
+            bound, total, nbound, nprogs))
 
     def set_ns(self, ns):
         name = "1" if ns == "" else ns
@@ -473,7 +503,7 @@ class NetdevSim:
         if chain is not None:
             spec += " chain %d" % (chain)
 
-        return tc("filter {op} dev {dev} {qdisc} {spec} {cls} {params}"\
+        return tc("filter {op} dev {dev} {qdisc} {spec} {cls} {params}"
                   .format(op=op, dev=self['ifname'], qdisc=qdisc, spec=spec,
                           cls=cls, params=params),
                   fail=fail, include_stderr=include_stderr)
@@ -502,6 +532,7 @@ class NetdevSim:
         args = "hw-tc-offload %s" % ("on" if enable else "off")
         return ethtool(self, "-K", args, fail=fail)
 
+
 ################################################################################
 def clean_up():
     global files, netns, devs
@@ -515,6 +546,7 @@ def clean_up():
     files = []
     netns = []
 
+
 def pin_prog(file_name, idx=0):
     progs = bpftool_prog_list(expected=(idx + 1))
     prog = progs[idx]
@@ -523,6 +555,7 @@ def pin_prog(file_name, idx=0):
 
     return file_name, bpf_pinned(file_name)
 
+
 def pin_map(file_name, idx=0, expected=1):
     maps = bpftool_map_list(expected=expected)
     m = maps[idx]
@@ -531,6 +564,7 @@ def pin_map(file_name, idx=0, expected=1):
 
     return file_name, bpf_pinned(file_name)
 
+
 def check_dev_info_removed(prog_file=None, map_file=None):
     bpftool_prog_list(expected=0)
     ret, err = bpftool("prog show pin %s" % (prog_file), fail=False)
@@ -546,6 +580,7 @@ def check_dev_info_removed(prog_file=None, map_file=None):
          "Showing map with removed device expected ENODEV, error is %s" %
          (err["error"]))
 
+
 def check_dev_info(other_ns, ns, prog_file=None, map_file=None, removed=False):
     progs = bpftool_prog_list(expected=1, ns=ns)
     prog = progs[0]
@@ -568,6 +603,7 @@ def check_dev_info(other_ns, ns, prog_file=None, map_file=None, removed=False):
         fail("dev" not in m.keys(), "Device parameters not reported")
         fail(dev != m["dev"], "Map's device different than program's")
 
+
 def check_extack(output, reference, args):
     if skip_extack:
         return
@@ -575,13 +611,16 @@ def check_extack(output, reference, args):
     comp = len(lines) >= 2 and lines[1] == 'Error: ' + reference
     fail(not comp, "Missing or incorrect netlink extack message")
 
+
 def check_extack_nsim(output, reference, args):
     check_extack(output, "netdevsim: " + reference, args)
 
+
 def check_no_extack(res, needle):
     fail((res[1] + res[2]).count(needle) or (res[1] + res[2]).count("Warning:"),
          "Found '%s' in command output, leaky extack?" % (needle))
 
+
 def check_verifier_log(output, reference):
     lines = output.split("\n")
     for l in reversed(lines):
@@ -589,6 +628,7 @@ def check_verifier_log(output, reference):
             return
     fail(True, "Missing or incorrect message from netdevsim in verifier log")
 
+
 def test_spurios_extack(sim, obj, skip_hw, needle):
     res = sim.cls_bpf_add_filter(obj, prio=1, handle=1, skip_hw=skip_hw,
                                  include_stderr=True)
@@ -1056,7 +1096,7 @@ try:
     sim = NetdevSim()
     map_obj = bpf_obj("sample_map_ret0.o")
     start_test("Test loading program with maps...")
-    sim.set_xdp(map_obj, "offload", JSON=False) # map fixup msg breaks JSON
+    sim.set_xdp(map_obj, "offload", JSON=False)  # map fixup msg breaks JSON
 
     start_test("Test bpftool bound info reporting (own ns)...")
     check_dev_info(False, "")
@@ -1087,7 +1127,7 @@ try:
     sim = NetdevSim()
 
     start_test("Test map update (no flags)...")
-    sim.set_xdp(map_obj, "offload", JSON=False) # map fixup msg breaks JSON
+    sim.set_xdp(map_obj, "offload", JSON=False)  # map fixup msg breaks JSON
     maps = bpftool_map_list(expected=2)
     array = maps[0] if maps[0]["type"] == "array" else maps[1]
     htab = maps[0] if maps[0]["type"] == "hash" else maps[1]
@@ -1168,7 +1208,7 @@ try:
     sim.remove()
 
     sim = NetdevSim()
-    sim.set_xdp(map_obj, "offload", JSON=False) # map fixup msg breaks JSON
+    sim.set_xdp(map_obj, "offload", JSON=False)  # map fixup msg breaks JSON
     sim.remove()
     bpftool_map_list_wait(expected=0)
 
-- 
2.19.2

