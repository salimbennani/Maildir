Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 08:49:34 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 3C33558079D;
	Wed, 12 Dec 2018 04:27:33 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 12 Dec 2018 04:27:32 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AJmcubxKfK1IckJcjpNmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgULvv4rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZUclRWS5ODIOy?=
 =?us-ascii?q?YYUMEuQPI/pXr5Llp1YMtha+GRWgCfnzxjNUmnP736s32PkhHwHc2wwgGsoDvn?=
 =?us-ascii?q?XKo9rrLqcSTf2+w6fIzDXfc/NZxy396IjPch8/v/GDQ7RwetfWxEkgCQzKkE+Q?=
 =?us-ascii?q?qZD+MjOR1+QNtXWb7uV5WeKqimMqqAJxriKoxsc2hYnEn4QYwU3H+yVh2Is5O8?=
 =?us-ascii?q?G0RUphbdK5HpZcqTuWO5Z1T88+WW1luSQ3xqUYtZKneCUG0pcqyh7FZ/CZboSF?=
 =?us-ascii?q?4AjvWeeTLDp+mXlrYqiwhwyo/kil0uD8Vte70FJNriddjNnMuW4C1wbJ5siEVP?=
 =?us-ascii?q?R95EGh1iiL1wzJ7eFEO080mbLaK54n3LEwioIevVrfEiLygkn6kaGbels+9uS1?=
 =?us-ascii?q?6Onrfq/qq56eOoNsjwHxKKUumsixAeQiNQgOWnCW+eC91L3l4E34T6xGjv4ona?=
 =?us-ascii?q?nDtpDVO8Abqre+Aw5b1IYs9Qy/Aiy40NQXg3YHNkhJeBGZgIjzPVHBPvT4Ae24?=
 =?us-ascii?q?g1S2nzdn3+rGMaH5ApXRMnjDl6/sfbJ8605f1gU/199e549PB7EFIfLzXFLxtd?=
 =?us-ascii?q?PCAh84NQy03/joCNFn2owCXmKPB7eTMLnOvl+Q+uIvP+6MaZcVuDnnKvgl++Th?=
 =?us-ascii?q?jXgjlV8dYKmmx50XaH+jE/RiIkWZZ2fsg9gbHWcLuAo+UPLliFmYXTFPYHayWr?=
 =?us-ascii?q?o25isnB4K+EYfDWoetjaSD3Ce8AJJafGNGCleKEXfucIWJQPMMaCOUIs98nT0I?=
 =?us-ascii?q?T7mhS4k91R6wsA/20aZoLu3R+icAr5LsyMB15/HPlRE17TF7Fd+d02GKT2F3hG?=
 =?us-ascii?q?8IXSU53KJkrEx5y1eD17V4gvNCGdxS4fNJThk1NZrGw+NmDNDyXxrLfs2VR1a+?=
 =?us-ascii?q?XtWmHTYxQ8oyw9AUZUZxAdGijhHZ0CqsDL8YjLiLBJ0y8qLB0Hn9Pcd9y3Da1K?=
 =?us-ascii?q?Y/i1kqWNdANWqjhqRn7QjcG5bJk1mFl6atbakTwTTC9HmdwmaUvEFXSghwUb7b?=
 =?us-ascii?q?UnAZYUfWqdf55kbGT7K1DbQnMw1BydONK6dQa93pi0lGS+nnONjEf22xnGKwDw?=
 =?us-ascii?q?6SxryQdIrqZ3kd3CLFBUcZiQ8T42iJORI+Bii7pWLeFyJhFVT0bkPo8Ol+rm67?=
 =?us-ascii?q?T0AuwwGLaU1hy6S6+hoPifOATPMT26oOuD09pDVsAFa9w9XWBsKcpwpgeaVcZs?=
 =?us-ascii?q?894FdH1G7DqwxxJJugL7pmhl4fdQR3sFjj1xF2CoVGjMgro2kmzAt0KaKEzlxB?=
 =?us-ascii?q?cymU0oz3Or3SMmPy5gyga7bK2lHC19ab4r0A6PAmpFTsog6oFlAu/G5609ZIyX?=
 =?us-ascii?q?Sc4JbKDA0MUZ/qVkY39h56p6zVYyUn5oPU02FsPrewsjPYx90pA+4lwA66f9hD?=
 =?us-ascii?q?KKOECBPyE8oCCsmuNewmgUSmYggFPeBS7qE0OcymeuCC2K6qOuZggT2ngX5G4I?=
 =?us-ascii?q?B7zkKD6S58RvTU0JYCxvGSxhGHWCvkjFe9rsD3nphJZSsTHmWj0yfkHpNeZqpo?=
 =?us-ascii?q?cYYNF2iuOcy3ysxiiJH3X35X6UCsB0kB2M+vYheSa1393QtN1UUYu3CnmC24zy?=
 =?us-ascii?q?BqnDEttKaQwCvOw+H6fhodJmFLXHVijUvrIYWsj9EaXVKkbggzmBu++Eb6wbNW?=
 =?us-ascii?q?pKB+L2nVXEdJcDL6L2BkUqusqLWCZ9RD548vsSVSSO68e0yVSqbhoxsG1CPuB2?=
 =?us-ascii?q?leyyohdzGpuZX5mAZ2iHmHI3Zwr3rZeMdwygnZ5NHHQf5R3zwGRDR3iDXNB1i8?=
 =?us-ascii?q?OcWp8suQl5vZru++UGehXIVJcSb31YOAqDe75WpyDBy/hf+zncfrEQo70S/9zN?=
 =?us-ascii?q?RqUSTIrBDhYojkzai6MORnflV2C1/48cZ1BoZ+ko4ojpEKxXcanomV/WYAkWrr?=
 =?us-ascii?q?MtVUw6P+YGANRT4W2dHV5gfl1VZnLnKIwYL5S3qcztFgZ9m8fmMZxCY949pWB6?=
 =?us-ascii?q?eT6bxOhTF1rUagrQLNffh9mS8Qyf4v6H4Zme4FogQswTuGArAOA0ZYJzfjmAqS?=
 =?us-ascii?q?79Cxt6hXYGevcb6t1Etxh9yhDbeCoh1CV3b9YJstAShw7sBnOlLWzHLz8p3keM?=
 =?us-ascii?q?XXbd8Lqh2UlBLAg/JUKZ0rkPoKmDFnOXn8vXA+z+47jBpu3Yy1vYSdKmVt+r65?=
 =?us-ascii?q?DQBcNjHve8wT/TTth75EnsmKx4CvAolhGjITUZTzV/2oFzYSten9OwaKDT0xsX?=
 =?us-ascii?q?ObGbvZHQ+C50ZqtXPPE5a3N36JIHkV18ltRB6YJEZHmgAbQC06noIlFgCt3MHh?=
 =?us-ascii?q?cl125jUP6V7jsBdM1vhkNxriUmfcuQeobC07SIOEIRpS7wFC4VrVMMOE4uJyGS?=
 =?us-ascii?q?FY4oOurAiXJmOHYARICHkDWlaYCFD7Irmu+d7A/vCYB+q5MvvOeKiOpvZYV/uS?=
 =?us-ascii?q?3pKv1Y1m/zmXO8WLP3liCeA720VZUXB4HcTZhysASygNmy3RaM6boQ+2+jdroc?=
 =?us-ascii?q?Cn7PTrRAXv6JOPC7RMMNVv+BO2gaaZO+6TniZ5LjlY2Y0WxX/V07gSx1oSiyBo?=
 =?us-ascii?q?dzmwHrUMry/NTKTMmqBJCx4XcT98NMxN76gkxAlCJdbbis/p1r5/lvM6EUpFWk?=
 =?us-ascii?q?f7ms63Zc0GOWW9NFLcCUaPNbSGIyDLws7tbaO9T71QkPtbtxmqtTmHFE/jOyyJ?=
 =?us-ascii?q?lyP1WBC3LeFMkCabMQRCuIG8dxZhE3TsQMj6ZR27LtB3iyY7wbk1hnPMKG4dPi?=
 =?us-ascii?q?Jwc0JLrr2M8yxYhu9zFHBG7npgNeOEgTqW7/HEKpYKtvtmGiR1mPhc4HQ/yrtV?=
 =?us-ascii?q?6jlLRf11mCTIqN5urEqrku2OyjphTRpPpSxHhIONvUV+J6rZ8oNMVmrD/BIIvi?=
 =?us-ascii?q?2sDEFAi95kFsf+854WgvzCiqP1Yn8W997K1cIYG8zVLt+Xdn07Pky6NiTTCV4q?=
 =?us-ascii?q?QDOxKSnillBBneuS8XCLo55y/pfhlYASYrtaUkElU/ZEWkcjG8YNdsQkFgg4mK?=
 =?us-ascii?q?KW2ZZbrUG1qwPcEYAD5sjK?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAABa/RBch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBg2sng3uIGYwSgg0Ulz+BcywTAYc7IjQJDQEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BCA0JCCkvgjYkAYJiAQIDAQIgVgYJAQEKCwcGAgImAgIDHwYMAQUBDg4GEwWDH?=
 =?us-ascii?q?IICBZoUPIsNgS+KMBJ5izEXgX+EI4gFglcCiTmBd5VcCAGCJ4gjgm2EIBhgfIU?=
 =?us-ascii?q?ailCZMDCBJYIOfQhsBoI1gicXjh4+M4EFAQGMfAEB?=
X-IPAS-Result: =?us-ascii?q?A0ANAABa/RBch0O0hNFjHAEBAQQBAQcEAQGBUQcBAQsBg2s?=
 =?us-ascii?q?ng3uIGYwSgg0Ulz+BcywTAYc7IjQJDQEDAQEBAQEBAgETAQEBCA0JCCkvgjYkA?=
 =?us-ascii?q?YJiAQIDAQIgVgYJAQEKCwcGAgImAgIDHwYMAQUBDg4GEwWDHIICBZoUPIsNgS+?=
 =?us-ascii?q?KMBJ5izEXgX+EI4gFglcCiTmBd5VcCAGCJ4gjgm2EIBhgfIUailCZMDCBJYIOf?=
 =?us-ascii?q?QhsBoI1gicXjh4+M4EFAQGMfAEB?=
X-IronPort-AV: E=Sophos;i="5.56,344,1539673200"; 
   d="scan'208";a="54863286"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 12 Dec 2018 04:27:31 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727427AbeLLM13 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 12 Dec 2018 07:27:29 -0500
Received: from mail-vs1-f67.google.com ([209.85.217.67]:45119 "EHLO
        mail-vs1-f67.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727155AbeLLM12 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 12 Dec 2018 07:27:28 -0500
Received: by mail-vs1-f67.google.com with SMTP id v10so10910905vsv.12
        for <linux-kernel@vger.kernel.org>; Wed, 12 Dec 2018 04:27:27 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=sWMRqYcaILSkuJ2kVL6qUP8DOmjaPgyPitMKpu824mg=;
        b=FT8azuI0at1VT6lxIRoqGjYKLmSUpD/UapEISOxYleOldxQM2hLEDWzqQpL66A/kTs
         9vhl5dDxvzQlHPUXMY5ZMeqdR1RXiOOdGLLjo7bWaj5AgWJCj02WxiQHLUx3yUVjM7YD
         WJ2Uw7VCzQn8cgBsSV3Qzq1TzxtadNFGXzKOuVvGcv4QpmkHdQSqUUqOVuNia6QxgE8t
         crKAX/l0satt4p9gnR9+rBlGEkgJSHK2FrLKvZPM6VLfVxuWbtgq6aF616CiaRWtssHD
         cYrKIsGzHwN8FEkSOCxTdBaoLqNDb5fYnZ5qh0B2fCC9GKtHB64ihDY4Pi+3vfamdUbF
         4p4w==
X-Gm-Message-State: AA+aEWYXZQ6WgvI29+4CKd9nJyS3ykrNShtw9pED792Ak4U60w7IAuTM
        ewpk45E2xQxFj1SVn3LlR18FKG5NMhYxZfmlHPI=
X-Google-Smtp-Source: AFSGD/WTj9lrbie4HWwrHeolt+hFpF0xN+iTKA0kiR+Tf11NE6lfvXOuEQ7WNy+NXsM8l90HQoBRksQ5NaRs+fA4R6E=
X-Received: by 2002:a67:b60d:: with SMTP id d13mr9443240vsm.152.1544617647336;
 Wed, 12 Dec 2018 04:27:27 -0800 (PST)
MIME-Version: 1.0
References: <20181210042352.GA6092@altlinux.org> <20181210043010.GM6131@altlinux.org>
 <CAMuHMdVYq_2P=gb_zbSGFkPWASTds6uSPTyyhyNAgp2Qm5+feQ@mail.gmail.com>
 <20181210124059.GA11942@altlinux.org> <CAMuHMdW8ejp4gm2Xh-8inSQngQ5zRQ9bfsg1SG+BAD8RFV8xcA@mail.gmail.com>
 <20181210133025.GG11942@altlinux.org> <20181212085516.GA13288@altlinux.org>
 <CAMuHMdXwX57AZuVPdcEt_HZw1LT7tFpczJsqjW6C0VgHkhJ7dw@mail.gmail.com>
 <20181212092712.GD13288@altlinux.org> <CAMuHMdVvw3_3rm3v8J8u6ic6Wy3o70mOP1qaWQ=Ltf1XU=nnVQ@mail.gmail.com>
 <20181212120417.GC15561@altlinux.org>
In-Reply-To: <20181212120417.GC15561@altlinux.org>
From: Geert Uytterhoeven <geert@linux-m68k.org>
Date: Wed, 12 Dec 2018 13:27:14 +0100
Message-ID: <CAMuHMdXqJeH0C8FHy=G=ycArdkvjYPy48+3LmACnyS9RuqV30g@mail.gmail.com>
Subject: Re: [PATCH v5 13/25] m68k: add asm/syscall.h
To: "Dmitry V. Levin" <ldv@altlinux.org>
Cc: Oleg Nesterov <oleg@redhat.com>, Andy Lutomirski <luto@kernel.org>,
        lineprinter@altlinux.org, Eugene Syromiatnikov <esyr@redhat.com>,
        linux-m68k <linux-m68k@lists.linux-m68k.org>,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi Dmitry,

On Wed, Dec 12, 2018 at 1:04 PM Dmitry V. Levin <ldv@altlinux.org> wrote:
> On Wed, Dec 12, 2018 at 10:43:33AM +0100, Geert Uytterhoeven wrote:
> > On Wed, Dec 12, 2018 at 10:27 AM Dmitry V. Levin <ldv@altlinux.org> wrote:
> > > On Wed, Dec 12, 2018 at 10:01:29AM +0100, Geert Uytterhoeven wrote:
> > > > On Wed, Dec 12, 2018 at 9:55 AM Dmitry V. Levin <ldv@altlinux.org> wrote:
> > > > > On Mon, Dec 10, 2018 at 04:30:25PM +0300, Dmitry V. Levin wrote:
> > > > > > On Mon, Dec 10, 2018 at 02:06:28PM +0100, Geert Uytterhoeven wrote:
> > > > > > > On Mon, Dec 10, 2018 at 1:41 PM Dmitry V. Levin <ldv@altlinux.org> wrote:
> > > > > > > > On Mon, Dec 10, 2018 at 09:45:42AM +0100, Geert Uytterhoeven wrote:
> > > > > > > > > On Mon, Dec 10, 2018 at 5:30 AM Dmitry V. Levin <ldv@altlinux.org> wrote:
> > > > > > > > > > syscall_get_* functions are required to be implemented on all
> > > > > > > > > > architectures in order to extend the generic ptrace API with
> > > > > > > > > > PTRACE_GET_SYSCALL_INFO request.
> > > > > > > > > >
> > > > > > > > > > This introduces asm/syscall.h on m68k implementing all 5 syscall_get_*
> > > > > > > > > > functions as documented in asm-generic/syscall.h: syscall_get_nr,
> > > > > > > > > > syscall_get_arguments, syscall_get_error, syscall_get_return_value,
> > > > > > > > > > and syscall_get_arch.
> > > > > > > > > >
> > > > > > > > > > Cc: Geert Uytterhoeven <geert@linux-m68k.org>
> > > > > > > > > > Cc: Oleg Nesterov <oleg@redhat.com>
> > > > > > > > > > Cc: Andy Lutomirski <luto@kernel.org>
> > > > > > > > > > Cc: Elvira Khabirova <lineprinter@altlinux.org>
> > > > > > > > > > Cc: Eugene Syromyatnikov <esyr@redhat.com>
> > > > > > > > > > Cc: linux-m68k@lists.linux-m68k.org
> > > > > > > > > > Signed-off-by: Dmitry V. Levin <ldv@altlinux.org>
> > > > > > > > > > ---
> > > > > > > > > >
> > > > > > > > > > Notes:
> > > > > > > > > >     v5: added syscall_get_nr, syscall_get_arguments, syscall_get_error,
> > > > > > > > > >         and syscall_get_return_value
> > > > > > > > > >     v1: added syscall_get_arch
> > > > > > > > >
> > > > > > > > > > --- /dev/null
> > > > > > > > > > +++ b/arch/m68k/include/asm/syscall.h
> > > > > > > > > > @@ -0,0 +1,39 @@
> > > > > > > > >
> > > > > > > > > > +static inline void
> > > > > > > > > > +syscall_get_arguments(struct task_struct *task, struct pt_regs *regs,
> > > > > > > > > > +                     unsigned int i, unsigned int n, unsigned long *args)
> > > > > > > > > > +{
> > > > > > > > > > +       BUG_ON(i + n > 6);
> > > > > > > > >
> > > > > > > > > Does this have to crash the kernel?
> > > > > > > >
> > > > > > > > This is what most of other architectures do, but we could choose
> > > > > > > > a softer approach, e.g. use WARN_ON_ONCE instead.
> > > > > > > >
> > > > > > > > > Perhaps you can return an error code instead?
> > > > > > > >
> > > > > > > > That would be problematic given the signature of this function
> > > > > > > > and the nature of the potential bug which would most likely be a usage error.
> > > > > > >
> > > > > > > Of course to handle that, the function's signature need to be changed.
> > > > > > > Changing it has the advantage that the error handling can be done at the
> > > > > > > caller, in common code, instead of duplicating it for all
> > > > > > > architectures, possibly
> > > > > > > leading to different semantics.
> > > > > >
> > > > > > Given that *all* current users of syscall_get_arguments specify i == 0
> > > > > > (and there is an architecture that has BUG_ON(i)),
> > > > > > it should be really a usage error to get into situation where i + n > 6,
> > > > > > I wish a BUILD_BUG_ON could be used here instead.
> > > > > >
> > > > > > I don't think it worths pushing the change of API just to convert
> > > > > > a "cannot happen" assertion into an error that would have to be dealt with
> > > > > > on the caller side.
> > > > >
> > > > > I suggest the following BUG_ON replacement for syscall_get_arguments:
> > > > >
> > > > > #define SYSCALL_MAX_ARGS 6
> > > > >
> > > > > static inline void
> > > > > syscall_get_arguments(struct task_struct *task, struct pt_regs *regs,
> > > > >                       unsigned int i, unsigned int n, unsigned long *args)
> > > > > {
> > > > >         /*
> > > > >          * Ideally there should have been
> > > > >          * BUILD_BUG_ON(i + n > SYSCALL_MAX_ARGS);
> > > > >          * instead of these checks.
> > > > >          */
> > > > >         if (unlikely(i > SYSCALL_MAX_ARGS)) {
> > > > >                 WARN_ONCE(1, "i > SYSCALL_MAX_ARGS");
> > > > >                 return;
> > > >
> > > > Does this have security implications, as args is an output parameter?
> > > > I.e. if you don't fill the array, the caller will use whatever is on the stack.
> > > > Can this ever be passed to userspace, leaking data?
> > >
> > > In the current kernel code n is always less or equal to 6,
> > > but in theory future changes can potentially break the assertion
> > > and this could lead to leaking data to userspace.
> >
> > OK.
> >
> > > Do you think we should rather be defensive and add some memsets, e.g.
> > >
> > >         if (unlikely(i > SYSCALL_MAX_ARGS)) {
> > >                 WARN_ONCE(1, "i > SYSCALL_MAX_ARGS");
> > >                 memset(args, 0, n * sizeof(args[0]));
> > >                 return;
> > >         }
> > >         if (unlikely(n > SYSCALL_MAX_ARGS - i)) {
> > >                 unsigned int extra = n - (SYSCALL_MAX_ARGS - i);
> > >
> > >                 WARN_ONCE(1, "i + n > SYSCALL_MAX_ARGS");
> > >                 n = SYSCALL_MAX_ARGS - i;
> > >                 memset(&args[n], 0, extra * sizeof(args[0]));
> > >         }
> > > ?
> >
> > Yes please.
> >
> > But please handle all of that in the generic code, so it doesn't have to be
> > replicated across all architectures.
> >
> > E.g. make syscall_get_arguments() a wrapper in generic code, calling
> > __syscall_get_arguments() in architecture-specific code.
> >
> > And make the latter return int, so it can indicate other failures.
>
> Other failures?  What syscall_get_arguments is expected to do
> if __syscall_get_arguments returned, say, -1?

Fail. Just like in case of other generic ill conditions it can detect itself.

Gr{oetje,eeting}s,

                        Geert

-- 
Geert Uytterhoeven -- There's lots of Linux beyond ia32 -- geert@linux-m68k.org

In personal conversations with technical people, I call myself a hacker. But
when I'm talking to journalists I just say "programmer" or something like that.
                                -- Linus Torvalds
