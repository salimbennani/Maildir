Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  14 Dec 2018 20:25:09 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from FMSMGA003.fm.intel.com (fmsmga003.fm.intel.com [10.253.24.29])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id EF0EF58079D;
	Thu, 13 Dec 2018 23:24:07 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by FMSMGA003-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 13 Dec 2018 23:24:07 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A/zSlthPnLfEGaObbOA0l6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KPn/p8bcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRsleVyJDDY28?=
 =?us-ascii?q?YYUBDPcPM/hEoIfyvFsOtRmzCBKwBOP20DJEmmP60bE43uknDArI3BYgH9ULsH?=
 =?us-ascii?q?nMrNr6LqESUfirw6nOwjXIcvVY2Tbg44XPcRAuv+uMXbRufsrVzUkuGRvFg06f?=
 =?us-ascii?q?qYzgJTyV1+ANv3KH4OpnUOKikmgqoBx/rDiow8cjkIjJhoQNx1DB7yp5wYI1Kc?=
 =?us-ascii?q?SiR05hfdGkEJpQtz+EOIdsXswiRGRotD41yr0ApJ63Zi8KyI4oxxPZdveJcJCI?=
 =?us-ascii?q?7wr9WOqNJTp0nm9pdbyhixqo7EStyfHwWtO13VtItiZJjMXAu3QX2xHQ6sWLUO?=
 =?us-ascii?q?Vx8lq91TqV1g3e6+dJKl0um6XBMZ4u2Lswm4ITsUvdGi/2n137jLGZdko64Oik?=
 =?us-ascii?q?8efnbav8pp+aKYB0jhvyMqM0msywGeg4Mw4OUHaH+emkyrHv4Un0TK9XgvA4jK?=
 =?us-ascii?q?XVqo3WKMcHqqKjAgJY0J4v6xOlADen1NQYk2MHLFVAeB+fi4jpOlfOIO33DPum?=
 =?us-ascii?q?gFSjji1rx/bYMb3lG5nNKXbCkLH/crZn8ENc1gUzws5F555OCbEOPujzWknvu9?=
 =?us-ascii?q?zcFBM5NBa0w+n/BNVnyoweQX6PArOeMK7KtV+I5+EvLPeWaI4apTbwMPwl5//o?=
 =?us-ascii?q?jX8kll4RZ6ip3Z0LaH+mGvRqOVmWYX3pgt0ZC2cFohI+TPD2iF2FSTNTZ2y9X6?=
 =?us-ascii?q?Mg5j4hD4KqF4fDRp23j7yH0ye2BZlWZmFAClCRHnbkbYSEW/EQaC2MJs9tiCAL?=
 =?us-ascii?q?Vb+kS4U5zxGhqBf6y6Z7LurT4iAYt5Xj28Zv6+3QkhEy8zp0D8OG3mGJTmF0mH?=
 =?us-ascii?q?4IRjAs0KB+p0x91kmM0axij/NEEtxT4utDUh0mOp7E0+x6F9fyVxrbcdeSSFam?=
 =?us-ascii?q?RdamDSsrTt0rwd8DeEJ9G9SkjhDe0CumGb4Vl7qXBJMq9qLQxWT+J8F4y3zezq?=
 =?us-ascii?q?kuk0EmQtdTNW2hnqN/9BLcB4jTn0Wdlqalb6Ic3CHW+WeHzGqOulxYUQFqXaXE?=
 =?us-ascii?q?W3AfelXZrdDj6kzeSL+uDKwtMhFdxs6aNqtKdtrpgE1bS/j5JtTRfXi9m2eqCh?=
 =?us-ascii?q?aO3bODcozqd2IZ3CXeDUgElxse/XKHNQg4GyegrHjSDD1oFVLzfUzs9fNyp2+8?=
 =?us-ascii?q?Tk8x1wuKdVFu16Kp+h4JgvyRU+4c0agauCg/sTl0HEyy39TNC9WeoQpsZ6FcYd?=
 =?us-ascii?q?I74Fda2mPVrQ19Ppq8L698gl4SaRh4v0Tr1x9vEIVPjdAqrG82zAp1Ma+YzFJB?=
 =?us-ascii?q?dzaf3ZDsOr3WKnP+/Ay1Z67RwFHe1NeW+qEA6Pkjr1XjvQepFlct8nl90tlV1W?=
 =?us-ascii?q?ec6YvODAYITZ3xVUM3/QBgp77Geik9+5/U1Xp0PKautj/Nxd0oC/Ulyxq6ZNhf?=
 =?us-ascii?q?Lb6LGxX0E80ZAMiuNvcnm1yobhICIeBT+7Q4P8Kgd/uaxqGrOPxsky6hjWRC+I?=
 =?us-ascii?q?p9yF6D9zJgSu7U2JYI2/GZ3hadWzjgllugs8D3lppCZTEdBWe/zSnkBIhMZqx9?=
 =?us-ascii?q?Z4oLCGGuI9GpydV6nZLiR3lY9Fu7DVMcxMCpYQaSb0D63QBIz0QXoGColjGizz?=
 =?us-ascii?q?NplDEltKyf0zLUw+TjbRYIJnRERG1/gljyO4i0iNYaUVOsbwgokhul+En7y7Ja?=
 =?us-ascii?q?pKR5M2ncX0NIczLqIGFlV6u6rqCCbNJX6JM0rSVXV/yxYFCbSrLnoxoWyTjjH3?=
 =?us-ascii?q?ZYxD0gczGqu5P5nwF1iW6HLXZzqmbZdt90xRvF+NPcQvtR1CIcRCZkkTnXGkS8?=
 =?us-ascii?q?P96x8NWWjZjDqOO+V2GmVpFJaink14CAtCi65W1sHxK/meu+mtnmEQg8zC/62M?=
 =?us-ascii?q?NmVSTOrBbgfIbr0762Pv5gfkltHFX88dZ1Gplikossg5EdwXgbiY+S/XYdk2fz?=
 =?us-ascii?q?MNNb1Ln6bHoMQz4L3tHU7BLk2E1lMnKG2Yb5Wm+BzctmYtmwenkW1T4l78BWFK?=
 =?us-ascii?q?eU66RJnShvrVq5tw7RYeV9kS0byfsh83Mah+AJuAwwziSSGLwSHE9YPTDymBSM?=
 =?us-ascii?q?9dyxsKJXZGO3e7iqyEV+hcyhDK2FogxEXXb5e5QiEjVq4sRxLl3My2Hz5Z/+eN?=
 =?us-ascii?q?bLc90TrBKUngzEj+hULpIxi/ULiTBmOWL7oX0q1eo7gQZy0pG9uYiNM39t876h?=
 =?us-ascii?q?Ah5EKj31YNse+i3qjaZbhMqX3pqgHpN8GjUQR5voTOmlEDYTtfThKgaPHycwqn?=
 =?us-ascii?q?adGbrDAwCf7F1qoG7IE5CuL3uXPmUWzc1+RBmBI0xSmBsbUy89np49CwCm3sjh?=
 =?us-ascii?q?cFpi6zAV5174rAZMy+1yOxn+VGffuBmnajMuRJeDKxpW6xlI513JPsyG8uJzAy?=
 =?us-ascii?q?ZY84WjrAOXL2yUeR9IAXsVWkCeBFDjI7qu5cTG8+eCHeqzNP/OYbSIqexDWPaE?=
 =?us-ascii?q?35Ov0o16/zmSMsWDJGVtD/o+2kBbR3B2B9zZmykTSywQjy/Mb8mbpAql+i1qtM?=
 =?us-ascii?q?+/9u7nWBno5YuJBLtfKtFv+xGwgaeeOO+cnid5KTBE1pwSwX/E0qQQ3FkXiyt2?=
 =?us-ascii?q?bTmiDawAtTLRTKLXgqJXDwAUayJwNMtL7qIwxApNOdTcitP6yLF4lOM1C0xeWF?=
 =?us-ascii?q?zlm8GpY9EKIm6nOFPGAkaLKKqJJTnRz87rZqO8TKVajP9IuB2opTabD0jjMyyZ?=
 =?us-ascii?q?mDn0TB+vK/9DjSGBMBxauYGwaRJtCWnlTNL7ZRy3Kt53jTsqwbIqgnPGL3ITMT?=
 =?us-ascii?q?95c0lVtL2f8TtYguljG2xG9ndlMeiEmyOD4+bEMJoZrftrDTpyl+9B5HQ6yr1V?=
 =?us-ascii?q?7DxLRfBvmSvSqMJurE+ikuWV1jVnVx9OoC5RhI2XpUViJbnZ9p5YVHfE5h0N62?=
 =?us-ascii?q?CQCxUMp9R9C9zvu7pfyt7AlK/oLDdC8tTU/dYTBsTOKcKHNmYhPgTtGDLOEAQF?=
 =?us-ascii?q?SjurZinjgBl5s9S2vimRr54nut3vlYAIR7tzSlM4DLUZB15jEdhEJ414CHdskq?=
 =?us-ascii?q?CexJoL+3+WshbcXoNZs4rBW/bUBu/gfmW3l75BMiQBx6v1K4tbEoyzj09vcF93?=
 =?us-ascii?q?mIDVA2LfWNlMpmtqaQpi8xYFy2R3UmBmgxGtUQiq+nJGUKfsxhM=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AiAAC2WRNch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgmmBAieDPT+De4QejBFSBoE1FIkOjjOBcywLCAGEQIMFIjQJDQE?=
 =?us-ascii?q?DAQEBAQEBAgETAQEBCA0JCCkjDII2JAGCYQEBAQEDAQIJFwQZARsdAQMCCQEBB?=
 =?us-ascii?q?QMCCwoDAgImAgIDHgEBBQwBBQEcBgESBQODGQGBZwEDCA0FCop+kAc8iw18FgU?=
 =?us-ascii?q?BF4J3BYExAQMCDEKCPAoZJw1dgTcCAQUSeYszF3iBB4N1LoJXRwECAoE+AQEeg?=
 =?us-ascii?q?wSCVwKQRpAeLwkNhwCDP4JtcIMwGIFdiEaHKIkwhHaBEYoKMIElgg5wgQGCO4I?=
 =?us-ascii?q?bDBeDSoUUhUwyMwEBgQMBAYoYBAsXgicBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AiAAC2WRNch0O0hNFjHAEBAQQBAQcEAQGBUQcBAQsBgmm?=
 =?us-ascii?q?BAieDPT+De4QejBFSBoE1FIkOjjOBcywLCAGEQIMFIjQJDQEDAQEBAQEBAgETA?=
 =?us-ascii?q?QEBCA0JCCkjDII2JAGCYQEBAQEDAQIJFwQZARsdAQMCCQEBBQMCCwoDAgImAgI?=
 =?us-ascii?q?DHgEBBQwBBQEcBgESBQODGQGBZwEDCA0FCop+kAc8iw18FgUBF4J3BYExAQMCD?=
 =?us-ascii?q?EKCPAoZJw1dgTcCAQUSeYszF3iBB4N1LoJXRwECAoE+AQEegwSCVwKQRpAeLwk?=
 =?us-ascii?q?NhwCDP4JtcIMwGIFdiEaHKIkwhHaBEYoKMIElgg5wgQGCO4IbDBeDSoUUhUwyM?=
 =?us-ascii?q?wEBgQMBAYoYBAsXgicBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,352,1539673200"; 
   d="scan'208";a="66808337"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 13 Dec 2018 23:24:06 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727229AbeLNHYD (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 14 Dec 2018 02:24:03 -0500
Received: from mail-ot1-f66.google.com ([209.85.210.66]:39185 "EHLO
        mail-ot1-f66.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726437AbeLNHYC (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 14 Dec 2018 02:24:02 -0500
Received: by mail-ot1-f66.google.com with SMTP id n8so4515414otl.6;
        Thu, 13 Dec 2018 23:24:01 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc:content-transfer-encoding;
        bh=1IjR+hljDHa0CWj5h3p77xH8cWm9v6joLzico1hRFmM=;
        b=EdB1k+SGm+tarv9YCo3kEyY175rXtCnpSamLxcFTu8BClMEpOD9saXsAUHxHrDHvQe
         s0I44pxEsBTnlYvHuaEp0H8sqmqNc9mWCklxf9Xr3q8Y/IiRxXnxs+6oQ8w/YZh4q5vK
         GX4FRzekitR42iV6Z4kZ7LppXmo+ytwygCJDVX3NkZjcTeUyb+C+UFLTwUFlJHu5l0rU
         P3jIxiJW+aoIM59rpRZX2PKmr3Z6nr7/hHZPqQGN77mQoa3AJHzC8LUtaW2Ne5cvpqqZ
         6iyXNUmvQWCVDMc1KDy5ag8aWJhkEaQGp0xB/joJejtGG1PpvfmKnK/XqakI+rprVbwb
         IdKg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc:content-transfer-encoding;
        bh=1IjR+hljDHa0CWj5h3p77xH8cWm9v6joLzico1hRFmM=;
        b=gmyMewmCpnCzSH9Mosfpge0PXn3N6rNxfo+xxRI3vIapgHzau65XOTQPrEDRk5SiCS
         ciQnZBudQXOIF6lz2GTRxXBscq9vIDlJ4f7G3BpYt3YIlwOQXuQw8MB+s6GkEIKoN5+c
         rfYxiX2uQZ2i8Dld6zq9xwG9aS64YjrHXX5xmyJJ3SGuxOCYrLrol/Np8ek195J6t4W2
         m8gUD9xzR4I/zjkt3oykiUMI/pcIElNsA5kbxZQdtrQJ9cLvC0vc8X+mMcKOOMHJkLoK
         XZT7AKbTqWrZz17oiaVrA0X1XRjQzURrei4JMJo4S9ld0qhVDFtg5QvqGJu2VksZA9I9
         Au9Q==
X-Gm-Message-State: AA+aEWbHD4N0m2s9HARiJeuj5nIWreawuz+mORvwW8ENYQlO5aS7g/wA
        BBFbkGwlPa8N3RMVNmlWOZhQTGBOIrRC8d+5xRmviA==
X-Google-Smtp-Source: AFSGD/Vm5HXVYJT+Gei58uaSVw4u856gcJt1T+RPOcXFR6ib9fn9m6Vnc2BaaaYuF45UF6wTkgyArq/+Wk7qS/KWbvU=
X-Received: by 2002:a9d:19e8:: with SMTP id k95mr1253168otk.209.1544772241288;
 Thu, 13 Dec 2018 23:24:01 -0800 (PST)
MIME-Version: 1.0
References: <1544083089-13000-1-git-send-email-wanpengli@tencent.com>
In-Reply-To: <1544083089-13000-1-git-send-email-wanpengli@tencent.com>
From: Wanpeng Li <kernellwp@gmail.com>
Date: Fri, 14 Dec 2018 15:24:01 +0800
Message-ID: <CANRm+CxRDyQvnGSGWubbYymjvwiU5DjRwhUHsCsWdWPfY7nDnw@mail.gmail.com>
Subject: Re: [PATCH] KVM: MMU: Introduce single thread to zap collapsible sptes
To: LKML <linux-kernel@vger.kernel.org>, kvm <kvm@vger.kernel.org>
Cc: Paolo Bonzini <pbonzini@redhat.com>,
        Radim Krcmar <rkrcmar@redhat.com>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

ping,
On Thu, 6 Dec 2018 at 15:58, Wanpeng Li <kernellwp@gmail.com> wrote:
>
> From: Wanpeng Li <wanpengli@tencent.com>
>
> Last year guys from huawei reported that the call of memory_global_dirty_=
log_start/stop()
> takes 13s for 4T memory and cause guest freeze too long which increases t=
he unacceptable
> migration downtime. [1] [2]
>
> Guangrong pointed out:
>
> | collapsible_sptes zaps 4k mappings to make memory-read happy, it is not
> | required by the semanteme of KVM_SET_USER_MEMORY_REGION and it is not
> | urgent for vCPU's running, it could be done in a separate thread and us=
e
> | lock-break technology.
>
> [1] https://lists.gnu.org/archive/html/qemu-devel/2017-04/msg05249.html
> [2] https://www.mail-archive.com/qemu-devel@nongnu.org/msg449994.html
>
> Several TB memory guest is common now after NVDIMM is deployed in cloud e=
nvironment.
> This patch utilizes worker thread to zap collapsible sptes in order to la=
zy collapse
> small sptes into large sptes during roll-back after live migration fails.
>
> Cc: Paolo Bonzini <pbonzini@redhat.com>
> Cc: Radim Kr=C4=8Dm=C3=A1=C5=99 <rkrcmar@redhat.com>
> Signed-off-by: Wanpeng Li <wanpengli@tencent.com>
> ---
>  arch/x86/include/asm/kvm_host.h |  3 +++
>  arch/x86/kvm/mmu.c              | 37 ++++++++++++++++++++++++++++++++---=
--
>  arch/x86/kvm/x86.c              |  4 ++++
>  3 files changed, 39 insertions(+), 5 deletions(-)
>
> diff --git a/arch/x86/include/asm/kvm_host.h b/arch/x86/include/asm/kvm_h=
ost.h
> index fbda5a9..dde32f9 100644
> --- a/arch/x86/include/asm/kvm_host.h
> +++ b/arch/x86/include/asm/kvm_host.h
> @@ -892,6 +892,8 @@ struct kvm_arch {
>         u64 master_cycle_now;
>         struct delayed_work kvmclock_update_work;
>         struct delayed_work kvmclock_sync_work;
> +       struct delayed_work kvm_mmu_zap_collapsible_sptes_work;
> +       bool zap_in_progress;
>
>         struct kvm_xen_hvm_config xen_hvm_config;
>
> @@ -1247,6 +1249,7 @@ void kvm_mmu_zap_all(struct kvm *kvm);
>  void kvm_mmu_invalidate_mmio_sptes(struct kvm *kvm, struct kvm_memslots =
*slots);
>  unsigned int kvm_mmu_calculate_mmu_pages(struct kvm *kvm);
>  void kvm_mmu_change_mmu_pages(struct kvm *kvm, unsigned int kvm_nr_mmu_p=
ages);
> +void zap_collapsible_sptes_fn(struct work_struct *work);
>
>  int load_pdptrs(struct kvm_vcpu *vcpu, struct kvm_mmu *mmu, unsigned lon=
g cr3);
>  bool pdptrs_changed(struct kvm_vcpu *vcpu);
> diff --git a/arch/x86/kvm/mmu.c b/arch/x86/kvm/mmu.c
> index 7c03c0f..fe87dd3 100644
> --- a/arch/x86/kvm/mmu.c
> +++ b/arch/x86/kvm/mmu.c
> @@ -5679,14 +5679,41 @@ static bool kvm_mmu_zap_collapsible_spte(struct k=
vm *kvm,
>         return need_tlb_flush;
>  }
>
> +void zap_collapsible_sptes_fn(struct work_struct *work)
> +{
> +       struct kvm_memory_slot *memslot;
> +       struct kvm_memslots *slots;
> +       struct delayed_work *dwork =3D to_delayed_work(work);
> +       struct kvm_arch *ka =3D container_of(dwork, struct kvm_arch,
> +                                          kvm_mmu_zap_collapsible_sptes_=
work);
> +       struct kvm *kvm =3D container_of(ka, struct kvm, arch);
> +       int i;
> +
> +       mutex_lock(&kvm->slots_lock);
> +       for (i =3D 0; i < KVM_ADDRESS_SPACE_NUM; i++) {
> +               spin_lock(&kvm->mmu_lock);
> +               slots =3D __kvm_memslots(kvm, i);
> +               kvm_for_each_memslot(memslot, slots) {
> +                       slot_handle_leaf(kvm, (struct kvm_memory_slot *)m=
emslot,
> +                               kvm_mmu_zap_collapsible_spte, true);
> +                       if (need_resched() || spin_needbreak(&kvm->mmu_lo=
ck))
> +                               cond_resched_lock(&kvm->mmu_lock);
> +               }
> +               spin_unlock(&kvm->mmu_lock);
> +       }
> +       kvm->arch.zap_in_progress =3D false;
> +       mutex_unlock(&kvm->slots_lock);
> +}
> +
> +#define KVM_MMU_ZAP_DELAYED (60 * HZ)
>  void kvm_mmu_zap_collapsible_sptes(struct kvm *kvm,
>                                    const struct kvm_memory_slot *memslot)
>  {
> -       /* FIXME: const-ify all uses of struct kvm_memory_slot.  */
> -       spin_lock(&kvm->mmu_lock);
> -       slot_handle_leaf(kvm, (struct kvm_memory_slot *)memslot,
> -                        kvm_mmu_zap_collapsible_spte, true);
> -       spin_unlock(&kvm->mmu_lock);
> +       if (!kvm->arch.zap_in_progress) {
> +               kvm->arch.zap_in_progress =3D true;
> +               schedule_delayed_work(&kvm->arch.kvm_mmu_zap_collapsible_=
sptes_work,
> +                       KVM_MMU_ZAP_DELAYED);
> +       }
>  }
>
>  void kvm_mmu_slot_leaf_clear_dirty(struct kvm *kvm,
> diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c
> index d029377..c2af289 100644
> --- a/arch/x86/kvm/x86.c
> +++ b/arch/x86/kvm/x86.c
> @@ -9019,6 +9019,9 @@ int kvm_arch_init_vm(struct kvm *kvm, unsigned long=
 type)
>
>         INIT_DELAYED_WORK(&kvm->arch.kvmclock_update_work, kvmclock_updat=
e_fn);
>         INIT_DELAYED_WORK(&kvm->arch.kvmclock_sync_work, kvmclock_sync_fn=
);
> +       INIT_DELAYED_WORK(&kvm->arch.kvm_mmu_zap_collapsible_sptes_work,
> +                       zap_collapsible_sptes_fn);
> +       kvm->arch.zap_in_progress =3D false;
>
>         kvm_hv_init_vm(kvm);
>         kvm_page_track_init(kvm);
> @@ -9064,6 +9067,7 @@ void kvm_arch_sync_events(struct kvm *kvm)
>  {
>         cancel_delayed_work_sync(&kvm->arch.kvmclock_sync_work);
>         cancel_delayed_work_sync(&kvm->arch.kvmclock_update_work);
> +       cancel_delayed_work_sync(&kvm->arch.kvm_mmu_zap_collapsible_sptes=
_work);
>         kvm_free_pit(kvm);
>  }
>
> --
> 2.7.4
>
