Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  14 Dec 2018 20:25:56 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id A41B858079D;
	Fri, 14 Dec 2018 01:11:50 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga004-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 14 Dec 2018 01:11:50 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AivCioxzkL8KAoLLXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e4VIvad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7S60/Vza/4KdxUBLmiD?=
 =?us-ascii?q?kJOSM3/m/QiMNwgqFVoAm5pxF92IPYfJ2ZOeBicq7HYd8WWWxMVdtRWSxbBYO8?=
 =?us-ascii?q?apMCAvYHPeZason2ukUApgajCwmxGezvyiVHhnzs0q0gzu8sFhvJ3AoiH9ITq3?=
 =?us-ascii?q?nUqNT1NKEPUeG61qXI0zPDYO1K2Tvn6YjHaRUhreuQUrJ3dMrc0E8iHB7GgFWI?=
 =?us-ascii?q?sYHpIS+Z2+AXv2SG4edsS/ijh3Mkpg1tuDSix8UhhpHNi44P11zI6yp0zJw7KN?=
 =?us-ascii?q?GlUkJ3f8CoHZ1NvC+ALYR2WNktQ2RwtSY61LIGvZm7cTAUyJQo2RHfceaLc4uW?=
 =?us-ascii?q?7RL5UuaePzN4iGhieLKliBa+6UmgyuviWcmoyFtGsDZJn93WunwQ2RHf9NKLRu?=
 =?us-ascii?q?Z+80u9wzqC1gLe5vlBIU8ulKrbL5AhwqQ3lpoWqUnDGi72mEPrjK6Zb0kk+fan?=
 =?us-ascii?q?6/7hYrr4op+QLoh0iw/4MqswgMyyGvo4MgcQUGiB4+i816Ps/Vf/QLpUiv06iK?=
 =?us-ascii?q?7ZsIrVJcgDvK62HxdV0po/6xa4Fzqm1NUYnXoZI15fdxOHkpPkO1XPIPD+EPe+?=
 =?us-ascii?q?jE6gkDZtx/DaILLhBo/BIWTEkLfkZbx98VJTyBIvzdBD4JJZErEBL+jyWk/trt?=
 =?us-ascii?q?PYCQU1Mwypw+n9DtV92ZgTWWaOAq+fLaPTvkWE5uMpI+mQeoAVvCzxJOQi5/7r?=
 =?us-ascii?q?lXU5g0MSfbG13ZsLb3C1BvZmI0KHbnb2gdcBFmEKvgw5TOHxjF2CUDhTZ2u9Xq?=
 =?us-ascii?q?4m5zE7Dp6mApnHRoy3nLOB2yK7FIVMZm9aElCMDWvod4KcVvgWcyKSIshhkj8e?=
 =?us-ascii?q?Wbi7UYAh1wqjtAv7y7phM+rV9TcUtZPl1Nhp+eLTkQs++iBzD8SYy2uNVX17nn?=
 =?us-ascii?q?sURz8q26ByuU99xU2F0aRih/xYFMZc5/VGUgohMZ7czup6C839Ww7bf9eJTkqm?=
 =?us-ascii?q?TcuiAT0rUt0xxNoOaV5nG9q+lhDDwzaqA7gNmrOWHpM07LzT02LxJ8lnzXbGz7?=
 =?us-ascii?q?cuj18hTstLNm2mg6p/+hPXB47IlUWZiqmreb4d3C7L6GeM026OsFtEXw53VKXP?=
 =?us-ascii?q?RWofaVfOrdTl+kPCSKejBqk9PQtf18GOMKtKZcfvjVVdWvjjPs/TY2awm2e2GB?=
 =?us-ascii?q?aJyamAbIvse2UBwirdDFIInBwU/XaDLQI+HDuuo3rCDDxyElLie1/s8eh7qHO8?=
 =?us-ascii?q?Uk80zwGLY1d917av/R4Vn/icS/IV3rILoyohrzR0HFCg39PZEdaApgxhfLlCbt?=
 =?us-ascii?q?M5+ltIyWXZtwllNJy6M69inkIecxhwv072zRp3DptPkMc0o3Iq1gZ9Mr+Y305b?=
 =?us-ascii?q?eDOe3pDwPaPXJ3L2/BCuba7Wx17f3MyX+qcJ9PQ3tVHjsBu1GUol9nVty8NV3G?=
 =?us-ascii?q?eE5pXWEAoSVor8U0Yq9xRgu77WeCg854PO2n1qPqm5qTvC29MvBOs4xResZdZf?=
 =?us-ascii?q?MKWYFADsF80WHdShKOsvm1KxdBILIPhS9LIoP8Ohb/aGwq+rM/p6kzK8kGtH55?=
 =?us-ascii?q?px0kSS+CpmS+7ExooKzOuc3gSaSTj8llChssbslIBAZDESGHe/yCf+CI5QYK1y?=
 =?us-ascii?q?YZgECWO0L8KrwdV+gobnW2RE+167G1MGxMipdAKSblz8xwFR1V4boWe6mSu+1D?=
 =?us-ascii?q?F0lzAprqyC3C3B2ejidRwHOnJVS2lml1vjPY+0j9UCVkiycwcpjAel5Vr9x6VD?=
 =?us-ascii?q?pqRwNXPTQURLfyjxNW1iSbG/trmBY85O7pMnryNXXf+4YVCbTL79vhQb3zniH2?=
 =?us-ascii?q?tY2DA0aTWqto/lkBx9jWKXNGxzo2bBecFs2Rff48TRRP5L0ToBXiV4izjXBl6n?=
 =?us-ascii?q?Mtmt/NWUkYrDs++kW2KgUJ1TbTfkzYeauCSn4m1qBAW1n+qvld3/DQg6zSj72s?=
 =?us-ascii?q?FpVSrSrRbweInr17mgPuJhcUllH1v868t8GoFjnYo8npAQ2X4GhpqL+XoLi3v8?=
 =?us-ascii?q?MdJe2ajmdnoCWSYLw8LJ4AjiwEBjK3OJx4HjWXmHzMpuecK6Yn8I1SIn9M9FFr?=
 =?us-ascii?q?2U7LNfkCtxo1q4qx/RYPdnkjccz/su9GAVg+UTtAUxySWdB6gYHVNEMiz0ixSI?=
 =?us-ascii?q?89e+ob1LZGaodLi8zkt/ksqnDLGfuQFcQ3f5d4wmHS9x6MV/LV3N3Gfy6oHiZN?=
 =?us-ascii?q?nfc9YTugeInBfHiuhfMIgxmeYShSp7JWL9umUoxPUhghxp2ZG6oZKLK2Fw/K+i?=
 =?us-ascii?q?Bh5YNzv1Z94c+z33jKZemNqW0J6rHpl7BjoLW57oR+qyED0OrfTnKxqOEDokp3?=
 =?us-ascii?q?eZA7XfGBGQ6Fx8o3LTCZyrNGyXJHoEzdVkXhadP1dSgAQVXDU8g544GRqmxM3n?=
 =?us-ascii?q?cEdl+D8R4kT0pQdLyuJtLxP/SHvQpB+0ajcoT5iSNBpX7gZf50fMLMyR9ORzEz?=
 =?us-ascii?q?tD/p2mqgyNJXeWZwBJDWEPR0yFCErvPrio5dnc7eeYAvCyIOfJYbWLseZeTeuH?=
 =?us-ascii?q?xYqz0ot6+DaBLsWPMWdjD/042UpDXGp1G8fDmzUIRCwYiTjNb9OApBqn/i13r8?=
 =?us-ascii?q?a/8OnkWQ715IuPDadSPstr+xysnaiDMOuQjj5jKTlEzpMM2WPIyL8H0VEIliFh?=
 =?us-ascii?q?bCOtHqoAtCLXSKLQm7RaDxoaayN1KctJ4Lgw3ghLOc7HlNz10qR0geIyC1dATV?=
 =?us-ascii?q?bhgN2mZdQWI2GhM1PKHFqLNLWDJTHR3877e7+zSb1Og+VSrBCwvTebE0n+PjWM?=
 =?us-ascii?q?jTXpVhavMf1SgyGfJhBRpIa9chN1A2j5UN3mcgG7MMNwjTAuwbw7nHXKNWsdMT?=
 =?us-ascii?q?h6a0xMr72Q4jlegvVwAGFB6ntlLe+ZmyeW9eXYK5AWsed1DSRwje5V/HM6y74G?=
 =?us-ascii?q?pB1DEfltlQPfqtpjuVSvlK+OxnxuTV4GrjdNmZLOvkh4P6jd3odPVGyC/x8X62?=
 =?us-ascii?q?iUTRMQqIhLENrq7olWyMWHqOrINTtC+tHd54NIDs7WNeqDMXw8IVz3HjPISgoP?=
 =?us-ascii?q?SHigMmSJ1B8Vq+2b6nDA9stykZPrgpdbErI=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AeAADschNch0O0hNFjHgEGBwaBUQkLA?=
 =?us-ascii?q?YFaghEnjHSLMoIhl0GBcxIBARgTAYdHIjQJDQEDAQEBAQEBAgETAQEBCA0JCCk?=
 =?us-ascii?q?vgjYigmUCAQMBAg8VUgYJAQE+EgNUBwoIBR2CNEuCAQMBAZtriVoBAQGBajOKM?=
 =?us-ascii?q?Id9hEERBoF/g26LEQKJPocLkE8JkU8LGIFdiEiHKIkzj34CBAYFAhMBgUaCDk0?=
 =?us-ascii?q?jFYMngicXjiVqAYEEAQGKCQSCSQEB?=
X-IPAS-Result: =?us-ascii?q?A0AeAADschNch0O0hNFjHgEGBwaBUQkLAYFaghEnjHSLMoI?=
 =?us-ascii?q?hl0GBcxIBARgTAYdHIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkvgjYigmUCAQMBA?=
 =?us-ascii?q?g8VUgYJAQE+EgNUBwoIBR2CNEuCAQMBAZtriVoBAQGBajOKMId9hEERBoF/g26?=
 =?us-ascii?q?LEQKJPocLkE8JkU8LGIFdiEiHKIkzj34CBAYFAhMBgUaCDk0jFYMngicXjiVqA?=
 =?us-ascii?q?YEEAQGKCQSCSQEB?=
X-IronPort-AV: E=Sophos;i="5.56,352,1539673200"; 
   d="scan'208";a="55891104"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 14 Dec 2018 01:11:48 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729477AbeLNJLp (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 14 Dec 2018 04:11:45 -0500
Received: from mx0a-001b2d01.pphosted.com ([148.163.156.1]:58898 "EHLO
        mx0a-001b2d01.pphosted.com" rhost-flags-OK-OK-OK-OK)
        by vger.kernel.org with ESMTP id S1727698AbeLNJLn (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 14 Dec 2018 04:11:43 -0500
Received: from pps.filterd (m0098404.ppops.net [127.0.0.1])
        by mx0a-001b2d01.pphosted.com (8.16.0.22/8.16.0.22) with SMTP id wBE99ASv134972
        for <linux-kernel@vger.kernel.org>; Fri, 14 Dec 2018 04:11:42 -0500
Received: from e06smtp01.uk.ibm.com (e06smtp01.uk.ibm.com [195.75.94.97])
        by mx0a-001b2d01.pphosted.com with ESMTP id 2pc5ma1j22-1
        (version=TLSv1.2 cipher=AES256-GCM-SHA384 bits=256 verify=NOT)
        for <linux-kernel@vger.kernel.org>; Fri, 14 Dec 2018 04:11:41 -0500
Received: from localhost
        by e06smtp01.uk.ibm.com with IBM ESMTP SMTP Gateway: Authorized Use Only! Violators will be prosecuted
        for <linux-kernel@vger.kernel.org> from <anju@linux.vnet.ibm.com>;
        Fri, 14 Dec 2018 09:11:39 -0000
Received: from b06cxnps3075.portsmouth.uk.ibm.com (9.149.109.195)
        by e06smtp01.uk.ibm.com (192.168.101.131) with IBM ESMTP SMTP Gateway: Authorized Use Only! Violators will be prosecuted;
        (version=TLSv1/SSLv3 cipher=AES256-GCM-SHA384 bits=256/256)
        Fri, 14 Dec 2018 09:11:36 -0000
Received: from d06av22.portsmouth.uk.ibm.com (d06av22.portsmouth.uk.ibm.com [9.149.105.58])
        by b06cxnps3075.portsmouth.uk.ibm.com (8.14.9/8.14.9/NCO v10.0) with ESMTP id wBE9BZM937617772
        (version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256 verify=FAIL);
        Fri, 14 Dec 2018 09:11:35 GMT
Received: from d06av22.portsmouth.uk.ibm.com (unknown [127.0.0.1])
        by IMSVA (Postfix) with ESMTP id 8E66D4C058;
        Fri, 14 Dec 2018 09:11:35 +0000 (GMT)
Received: from d06av22.portsmouth.uk.ibm.com (unknown [127.0.0.1])
        by IMSVA (Postfix) with ESMTP id 8A2314C04A;
        Fri, 14 Dec 2018 09:11:34 +0000 (GMT)
Received: from localhost.in.ibm.com (unknown [9.124.31.22])
        by d06av22.portsmouth.uk.ibm.com (Postfix) with ESMTP;
        Fri, 14 Dec 2018 09:11:34 +0000 (GMT)
From: Anju T Sudhakar <anju@linux.vnet.ibm.com>
To: mpe@ellerman.id.au, linux-kernel@vger.kernel.org
Cc: linuxppc-dev@lists.ozlabs.org, maddy@linux.vnet.ibm.com,
        anju@linux.vnet.ibm.com
Subject: [PATCH v2 5/5] powerpc/perf: Trace imc PMU functions
Date: Fri, 14 Dec 2018 14:41:22 +0530
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20181214091122.20992-1-anju@linux.vnet.ibm.com>
References: <20181214091122.20992-1-anju@linux.vnet.ibm.com>
X-TM-AS-GCONF: 00
x-cbid: 18121409-4275-0000-0000-000002F0623D
X-IBM-AV-DETECTION: SAVI=unused REMOTE=unused XFE=unused
x-cbparentid: 18121409-4276-0000-0000-000037FD9192
Message-Id: <20181214091122.20992-6-anju@linux.vnet.ibm.com>
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10434:,, definitions=2018-12-14_04:,,
 signatures=0
X-Proofpoint-Spam-Details: rule=outbound_notspam policy=outbound score=0 priorityscore=1501
 malwarescore=0 suspectscore=0 phishscore=0 bulkscore=0 spamscore=0
 clxscore=1015 lowpriorityscore=0 mlxscore=0 impostorscore=0
 mlxlogscore=999 adultscore=0 classifier=spam adjust=0 reason=mlx
 scancount=1 engine=8.0.1-1810050000 definitions=main-1812140085
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Add PMU functions to support trace-imc.

Signed-off-by: Anju T Sudhakar <anju@linux.vnet.ibm.com>
---
 arch/powerpc/perf/imc-pmu.c | 175 ++++++++++++++++++++++++++++++++++++
 1 file changed, 175 insertions(+)

diff --git a/arch/powerpc/perf/imc-pmu.c b/arch/powerpc/perf/imc-pmu.c
index 1f09265c8fb0..32ff0e449fca 100644
--- a/arch/powerpc/perf/imc-pmu.c
+++ b/arch/powerpc/perf/imc-pmu.c
@@ -1120,6 +1120,173 @@ static int trace_imc_cpu_init(void)
 			  ppc_trace_imc_cpu_offline);
 }
 
+static u64 get_trace_imc_event_base_addr(void)
+{
+	return (u64)per_cpu(trace_imc_mem, smp_processor_id());
+}
+
+/*
+ * Function to parse trace-imc data obtained
+ * and to prepare the perf sample.
+ */
+static int trace_imc_prepare_sample(struct trace_imc_data *mem,
+				    struct perf_sample_data *data,
+				    u64 *prev_tb,
+				    struct perf_event_header *header,
+				    struct perf_event *event)
+{
+	/* Sanity checks for a valid record */
+	if (be64_to_cpu(READ_ONCE(mem->tb1)) > *prev_tb)
+		*prev_tb = be64_to_cpu(READ_ONCE(mem->tb1));
+	else
+		return -EINVAL;
+
+	if ((be64_to_cpu(READ_ONCE(mem->tb1)) & IMC_TRACE_RECORD_TB1_MASK) !=
+			 be64_to_cpu(READ_ONCE(mem->tb2)))
+		return -EINVAL;
+
+	/* Prepare perf sample */
+	data->ip =  be64_to_cpu(READ_ONCE(mem->ip));
+	data->period = event->hw.last_period;
+
+	header->type = PERF_RECORD_SAMPLE;
+	header->size = sizeof(*header) + event->header_size;
+	header->misc = 0;
+
+	if (is_kernel_addr(data->ip))
+		header->misc |= PERF_RECORD_MISC_KERNEL;
+	else
+		header->misc |= PERF_RECORD_MISC_USER;
+
+	perf_event_header__init_id(header, data, event);
+
+	return 0;
+}
+
+static void dump_trace_imc_data(struct perf_event *event)
+{
+	struct trace_imc_data *mem;
+	int i, ret;
+	u64 prev_tb = 0;
+
+	mem = (struct trace_imc_data *)get_trace_imc_event_base_addr();
+	for (i = 0; i < (trace_imc_mem_size / sizeof(struct trace_imc_data));
+		i++, mem++) {
+		struct perf_sample_data data;
+		struct perf_event_header header;
+
+		ret = trace_imc_prepare_sample(mem, &data, &prev_tb, &header, event);
+		if (ret) /* Exit, if not a valid record */
+			break;
+		else {
+			/* If this is a valid record, create the sample */
+			struct perf_output_handle handle;
+
+			if (perf_output_begin(&handle, event, header.size))
+				return;
+
+			perf_output_sample(&handle, &header, &data, event);
+			perf_output_end(&handle);
+		}
+	}
+}
+
+static int trace_imc_event_add(struct perf_event *event, int flags)
+{
+	/* Enable the sched_task to start the engine */
+       perf_sched_cb_inc(event->ctx->pmu);
+       return 0;
+}
+
+static void trace_imc_event_read(struct perf_event *event)
+{
+	dump_trace_imc_data(event);
+}
+
+static void trace_imc_event_stop(struct perf_event *event, int flags)
+{
+	trace_imc_event_read(event);
+}
+
+static void trace_imc_event_start(struct perf_event *event, int flags)
+{
+	return;
+}
+
+static void trace_imc_event_del(struct perf_event *event, int flags)
+{
+	perf_sched_cb_dec(event->ctx->pmu);
+}
+
+void trace_imc_pmu_sched_task(struct perf_event_context *ctx,
+				bool sched_in)
+{
+	int core_id = smp_processor_id() / threads_per_core;
+	struct imc_pmu_ref *ref;
+	u64 local_mem, ldbar_value;
+
+	/* Set trace-imc bit in ldbar and load ldbar with per-thread memory address */
+	local_mem = get_trace_imc_event_base_addr();
+	ldbar_value = ((u64)local_mem & THREAD_IMC_LDBAR_MASK) | TRACE_IMC_ENABLE;
+
+	ref = &core_imc_refc[core_id];
+	if (!ref)
+		return;
+
+	if (sched_in) {
+		mtspr(SPRN_LDBAR, ldbar_value);
+		mutex_lock(&ref->lock);
+		if (ref->refc == 0) {
+			if (opal_imc_counters_start(OPAL_IMC_COUNTERS_TRACE,
+					get_hard_smp_processor_id(smp_processor_id()))) {
+				mutex_unlock(&ref->lock);
+				pr_err("trace-imc: Unable to start the counters for core %d\n", core_id);
+				mtspr(SPRN_LDBAR, 0);
+				return;
+			}
+		}
+		++ref->refc;
+		mutex_unlock(&ref->lock);
+	} else {
+		mtspr(SPRN_LDBAR, 0);
+		mutex_lock(&ref->lock);
+		ref->refc--;
+		if (ref->refc == 0) {
+			if (opal_imc_counters_stop(OPAL_IMC_COUNTERS_TRACE,
+					get_hard_smp_processor_id(smp_processor_id()))) {
+				mutex_unlock(&ref->lock);
+				pr_err("trace-imc: Unable to stop the counters for core %d\n", core_id);
+				return;
+			}
+		} else if (ref->refc < 0) {
+			ref->refc = 0;
+		}
+		mutex_unlock(&ref->lock);
+	}
+	return;
+}
+
+static int trace_imc_event_init(struct perf_event *event)
+{
+	struct task_struct *target;
+
+	if (event->attr.type != event->pmu->type)
+		return -ENOENT;
+
+	if (!capable(CAP_SYS_ADMIN))
+		return -EACCES;
+
+	/* Return if this is a couting event */
+	if (event->attr.sample_period == 0)
+		return -ENOENT;
+
+	event->hw.idx = -1;
+	target = event->hw.target;
+
+	event->pmu->task_ctx_nr = perf_hw_context;
+	return 0;
+}
+
 /* update_pmu_ops : Populate the appropriate operations for "pmu" */
 static int update_pmu_ops(struct imc_pmu *pmu)
 {
@@ -1149,6 +1316,14 @@ static int update_pmu_ops(struct imc_pmu *pmu)
 		pmu->pmu.cancel_txn = thread_imc_pmu_cancel_txn;
 		pmu->pmu.commit_txn = thread_imc_pmu_commit_txn;
 		break;
+	case IMC_DOMAIN_TRACE:
+		pmu->pmu.event_init = trace_imc_event_init;
+		pmu->pmu.add = trace_imc_event_add;
+		pmu->pmu.del = trace_imc_event_del;
+		pmu->pmu.start = trace_imc_event_start;
+		pmu->pmu.stop = trace_imc_event_stop;
+		pmu->pmu.read = trace_imc_event_read;
+		pmu->pmu.sched_task = trace_imc_pmu_sched_task;
 	default:
 		break;
 	}
-- 
2.17.1

