Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 11 Dec 2018 08:42:53 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 9E124580380;
	Mon, 10 Dec 2018 11:59:38 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 10 Dec 2018 11:59:37 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Afc6lXB/annK4Iv9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1OsWIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CRWRPQNtfVzBPDI2/?=
 =?us-ascii?q?YYsADeQOPedEoIfyqFQOtgO+CAu3CePz0z9FnGP60bEg3ug/FwzNwQwuH8gJsH?=
 =?us-ascii?q?TRtNj7Or0dUf6rw6LVzTrMde9W2Sz66IjObxsspuyDUqhuccXPy0kuGRnKjkmL?=
 =?us-ascii?q?qYziOTOYzeoNvHOB4+V8UuKvjncqpgdsqTahwccsj5PGhoMTyl3c9Ch0z5w5Jc?=
 =?us-ascii?q?ajR0N9fNWqE4NQujmEO4dqRs4uWXxktSgkxrEcpJK2fzQGxI4myhPdc/CLbYmF?=
 =?us-ascii?q?7gz/WOuUPDt0mG9qdbejiBqu9UWs1ujxWtS33VpWqydIl8TAu3UT2xDN68WLV+?=
 =?us-ascii?q?Nx/km/1juMywze7+RJLEQpmabGNpEsx6A/mYcOvUvZGyL7mlv5gaCWe0gh++Wl?=
 =?us-ascii?q?5Orqb7rgq5SBLYF7kBv+Pb4rmsGnAeQ3LAwOX2+D9OSi273s41f5TK9JjvIoiK?=
 =?us-ascii?q?nZto7VJcABqq6+GQ9V3Z4v6xe5Dzi4zNQVhWcLIE5BdR6dkoTkNU/CLOrlAfq8?=
 =?us-ascii?q?n1igijZmyvLeMr3kGJrNL3zDkLn7fbZ67k5R0A4zzdFZ55JJBbANOfHzVVHrtN?=
 =?us-ascii?q?zeEBA5NxW4w+HpCdV7yIweQ3mCArGWMKzMq1+E/OEvLPeWZI8Tpjn9L+Ip5/n0?=
 =?us-ascii?q?jX82gVMdZ7Wm3YMLaHCkGfRrO0GZYXvvgtgfC2sLsRc+QffuiF2DVz5TenmzU7?=
 =?us-ascii?q?g95jE9FIKpE4PDSpqxj7yG2SexBodWaXxeClCQDXfocJ2JW/cWZyKTPs9uiDsE?=
 =?us-ascii?q?WaKhS488zx6usgD6xqFjLurV/C0YqJ3i2MJ05+3ViRE96zh0A96B3GGKSmF+hn?=
 =?us-ascii?q?kISCMu3KBjvUx9zU+O0ap/g/NGD9BT5PRJUgE8NZ7b1OF6D9HyWgTcftaGUlqm?=
 =?us-ascii?q?Q9OmAS0vQdI12dMBf0F9G9C6hBDZwyWqG6MVl6CMBJEs6K3cxHjxJ8F+y3rczq?=
 =?us-ascii?q?kulVsmT9BLNW2ngK5/6gfSC5TIk0Wfi6ala6Ac0DTR+2eEyGqEpFtYXxJoUaXZ?=
 =?us-ascii?q?QXAfYVPbrdfj6UPEVbOuDbUnPRFHyc6NMaZKbtzpjVNbRPbsItjeYmSxm3uuCh?=
 =?us-ascii?q?aM3L+DcI3qe2AF1iXHFEcEixwT/WqBNQUmGyiuuXzeAyJ0GVLveUzs9/J+p229?=
 =?us-ascii?q?TkMzywGKbEhh176u9x4RhPycTe4T370etCcgrTV0AEiy39bMB9WcoApheb1WYc?=
 =?us-ascii?q?kh71dfyWLZqwt9M4S9IK94mF4RbR57v0P02BVxEYVPj84qoWguzApzL6KYzVxA?=
 =?us-ascii?q?eymZ3ZD2Jr3YNG3y8AqzZK7R31HUyMyW9bsX6PQkt1XjuxmkFlYj83Vi1NlVz3?=
 =?us-ascii?q?uc55XQAAoOS57xVVw39xx7p7HcbSkw/IfU1XxqMampvT7OwdMpBO05yhm+e9dT?=
 =?us-ascii?q?Kr+LFAj3E8cCHcihNPQqm0S1bhIDJO1d7qo0MN2pdvSY2K+nJv1vnC+7gmtd5o?=
 =?us-ascii?q?B90UWM9zRnR+7M3pYFxeyY3wSdWzf9ilehrt74mYReaT4OGWq/zDDuBJRNaa1q?=
 =?us-ascii?q?YYYLFWCuLtW3x9VjnZLiR2RU9V+jB1wc3s+pdgGfb1j83Q1WyEQWrmarmSq+zz?=
 =?us-ascii?q?xojT4pqrCT0zDJw+TnbBAHIHJERHF+jVfwJoi5l8oaXEm0YAczjhuq+EH6y7Jd?=
 =?us-ascii?q?pKthNWnTQF5EcDTsIGFmT6S/qKCCY8lJ6J4ztSVXUeK8YU2VS7Lnohsa1T/jEH?=
 =?us-ascii?q?VaxDwhaz6qvZD5lQRgiG2BNHZzsGbZecZoyBbf5dzQX/5Q0iAdRClljznaHVy8?=
 =?us-ascii?q?P9iv/dWJmJbPqOG+V2S9VpJNdSnn15+PtCy+5WdyGx2wg+izmsH7EQg9ySL71c?=
 =?us-ascii?q?NlVT/LrBb/ZYnnzb+6PvhkfklrBV/87dR1Godln4s0hZEQ32Uah5qP8XoGl2fz?=
 =?us-ascii?q?LctU2abkYHURQj4Lxsbf4BL51017MnKJ24X5W22dw8R7YNm2eGEW2iM7781RDK?=
 =?us-ascii?q?eU7bpEnTZ6o1airALRZ+R9kSkZyfc09HEahOQJshI3ziqBGrASAVVYPSv0mhSL?=
 =?us-ascii?q?9d++rb9bZGaycbeq0kp+ksusDLWDogFaRXb4dY0uHS527sVjLl3M1Gf/5Z3jeN?=
 =?us-ascii?q?nVddgTrAGbkw/cj+hJL5I8jv8KhStkOW3np3EkxfA0jQdy3Z6kpoiIMHti/Li2?=
 =?us-ascii?q?AhNDMj31ZsUT+izijKpEn8aW2ZyvEYtlGjkRQJToSveoGioItfv7LwaODCE8qn?=
 =?us-ascii?q?CDFLrDGg+f7V1qrnPVHJCtKnGXP2IZzdR5SRmZJUxfhh0UXTogkp44EACq2NLu?=
 =?us-ascii?q?cENj6j8N4V74rwNGyvh0OBnnTmffuACoZy8vR5eFKxpW6hxC613RMcyD9e9zGy?=
 =?us-ascii?q?BY/pu8rA2CMGCbZgJIDX0XVUyAHVzsIr6u5dzY+eiCGuW+N+fOYamJqeFGVfeH?=
 =?us-ascii?q?35ev3ZV9/zqWKsWDJHpiD+A42kpeW3B2Ad/Zli4LSywWkSLNcsGaqA29+i1xss?=
 =?us-ascii?q?Cw7vDrVBjz6ouIDrtYKc9v9AyugaefK+6Qgz50KDZf1pMR3H/I1aIQ3FgIhyF1?=
 =?us-ascii?q?cDmtF7sAuDXJTKLRnK9XEhEaZzlyNMtO86IzwA1NNdTHhdPy075yluQ1BEtdVV?=
 =?us-ascii?q?z9hsGpYtQHI2GjO1PGB0aLN7WGKSfIw8HtZqO8RqNfjP9Jtx2rojubF07jPjKe?=
 =?us-ascii?q?lzjmTRyvMOdMjD2FMxxaoo2ybhFtCW37RtL8dhK7KMN3jSExwbAsnHzKKHUTMS?=
 =?us-ascii?q?JifEJNtLGQ6SJYj+57G2xA6HplMOaFlzyY7+neNpYZr/9rDj5omOJd5XQw06FV?=
 =?us-ascii?q?4z1cRPxphCvSqcZjo02nkumK0DZoTABCpSpLhI2Vu0VvIqHZ9phGWXbZ8xMB92?=
 =?us-ascii?q?SQCxIWp9R7Dt3jobxfyt/KlKjrMjdN78rU/dcAB8jTMM+GMGAuMRzsGD7VCgsK?=
 =?us-ascii?q?VT+qNWHFiExbn/Gf7XmVrpk8qpjxl5sCUL5bVFopFvwEDkRpBsANIJByXmBsrb?=
 =?us-ascii?q?nOrMMS73eksFHhWY0Ovp3dXP+IHd3gLzCViqMCbgMBx7q+Kp4ccITmjQgqSER8?=
 =?us-ascii?q?lYXGU3HQVNBMrmU1bBIyqURB61BxSWo830+jYQSotjtbLuK5kBA7jENdZe027z?=
 =?us-ascii?q?r2/x9jPUbHqiU9lg8yndz+mj2LbBbqIaytW4xKTSHzsh51etn/QgBofUi5h118?=
 =?us-ascii?q?KDDsWb1clf1jeHpthQuavoFAU7YISaxCfQ9VzuuGf+kv+UpTpz/hxkJd4+bBT5?=
 =?us-ascii?q?x4m115X4Srqids0hxuJOE8ObfXIuIdwlFOi6CRtzOz0eYZzgVYLEEIpjDBMBUU?=
 =?us-ascii?q?sVAFY+F1bxGj+fZhvEnbw2NO?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ArAAAsxQ5ch0O0hNFkHQEBBQEHBQGBU?=
 =?us-ascii?q?wYBCwGBMIIsBAsnh0EDhS6LMYIhlz2BJANMEgEBGBMBh20iNgcNAQMBAQEBAQE?=
 =?us-ascii?q?CARMBAQEIDQkIKSMMgjYkAYJiAgEDAQIPKAYBASUSAQUJAQEBAT4QAy8lAgQBD?=
 =?us-ascii?q?QUFHYJ/gWoDFQEEm0UCLolYAQEBgh2CdgEBBYUBGIIJCIpfgUIXgX+BETOCMYs?=
 =?us-ascii?q?KiTeXQAmCJY9CkT2JIo9nAgICAgQFAg0BAQWBTQeCADMaI4M8ghsJGoNKilNyg?=
 =?us-ascii?q?QUBASGLdwEB?=
X-IPAS-Result: =?us-ascii?q?A0ArAAAsxQ5ch0O0hNFkHQEBBQEHBQGBUwYBCwGBMIIsBAs?=
 =?us-ascii?q?nh0EDhS6LMYIhlz2BJANMEgEBGBMBh20iNgcNAQMBAQEBAQECARMBAQEIDQkIK?=
 =?us-ascii?q?SMMgjYkAYJiAgEDAQIPKAYBASUSAQUJAQEBAT4QAy8lAgQBDQUFHYJ/gWoDFQE?=
 =?us-ascii?q?Em0UCLolYAQEBgh2CdgEBBYUBGIIJCIpfgUIXgX+BETOCMYsKiTeXQAmCJY9Ck?=
 =?us-ascii?q?T2JIo9nAgICAgQFAg0BAQWBTQeCADMaI4M8ghsJGoNKilNygQUBASGLdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,339,1539673200"; 
   d="scan'208";a="141536517"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 10 Dec 2018 11:59:36 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728612AbeLJT7c (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 10 Dec 2018 14:59:32 -0500
Received: from mx0a-00082601.pphosted.com ([67.231.145.42]:54974 "EHLO
        mx0a-00082601.pphosted.com" rhost-flags-OK-OK-OK-OK)
        by vger.kernel.org with ESMTP id S1726699AbeLJT7b (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 10 Dec 2018 14:59:31 -0500
Received: from pps.filterd (m0109333.ppops.net [127.0.0.1])
        by mx0a-00082601.pphosted.com (8.16.0.27/8.16.0.27) with SMTP id wBAJucNG028457;
        Mon, 10 Dec 2018 11:59:18 -0800
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=fb.com; h=from : to : cc : subject
 : date : message-id : references : in-reply-to : content-type : content-id
 : content-transfer-encoding : mime-version; s=facebook;
 bh=bc3ifg7fHAsHQlm5psCliNfUneGx1fLZ/+hMVOYcWoE=;
 b=c7bpzW5oQTxKikmMBM7HIY7VtD0qmqUfdx7WkKp4UfZ61IunR4Ug8xnyhTig7Db/pkRc
 LPozDJ1ZJ0r8pk+O77Sf7tjyOiPGUHNAp5oWrINq0oeCqZM/Xwtvn6bYF/19jednR4D0
 mvsUDZR5DBTrYa9otjPeq5zNTsE5g9fOnXE= 
Received: from mail.thefacebook.com ([199.201.64.23])
        by mx0a-00082601.pphosted.com with ESMTP id 2p9w0v8ff8-17
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-SHA384 bits=256 verify=NOT);
        Mon, 10 Dec 2018 11:59:18 -0800
Received: from prn-mbx04.TheFacebook.com (2620:10d:c081:6::18) by
 prn-hub03.TheFacebook.com (2620:10d:c081:35::127) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384) id
 15.1.1531.3; Mon, 10 Dec 2018 11:58:58 -0800
Received: from prn-hub05.TheFacebook.com (2620:10d:c081:35::129) by
 prn-mbx04.TheFacebook.com (2620:10d:c081:6::18) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384) id
 15.1.1531.3; Mon, 10 Dec 2018 11:58:57 -0800
Received: from NAM04-CO1-obe.outbound.protection.outlook.com (192.168.54.28)
 by o365-in.thefacebook.com (192.168.16.29) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384) id 15.1.1531.3
 via Frontend Transport; Mon, 10 Dec 2018 11:58:57 -0800
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=fb.onmicrosoft.com;
 s=selector1-fb-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=bc3ifg7fHAsHQlm5psCliNfUneGx1fLZ/+hMVOYcWoE=;
 b=iaQ+qZ2AaRxkOmEBCmH/oJKSbJ3yCSGVK2rHBGl8Yt6hmHllUv8ycKZryD/Fm8XrVJ8UELDT7divec2sI+8OwP8roQk9O2E+ueJ95VJ+w438v+AwJ1H25Qg28NAk08w3gCXNvXSmhG3ekkOV2qI+PwxycAcoMlSmkFdHnnRALHg=
Received: from MWHPR15MB1134.namprd15.prod.outlook.com (10.175.2.12) by
 MWHPR15MB1166.namprd15.prod.outlook.com (10.175.2.20) with Microsoft SMTP
 Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1404.17; Mon, 10 Dec 2018 19:58:56 +0000
Received: from MWHPR15MB1134.namprd15.prod.outlook.com
 ([fe80::911d:ed1a:7e45:6434]) by MWHPR15MB1134.namprd15.prod.outlook.com
 ([fe80::911d:ed1a:7e45:6434%4]) with mapi id 15.20.1404.026; Mon, 10 Dec 2018
 19:58:56 +0000
From: Dave Watson <davejwatson@fb.com>
To: Herbert Xu <herbert@gondor.apana.org.au>,
        Junaid Shahid <junaids@google.com>,
        Steffen Klassert <steffen.klassert@secunet.com>,
        "linux-crypto@vger.kernel.org" <linux-crypto@vger.kernel.org>
CC: Doron Roberts-Kedes <doronrk@fb.com>,
        Sabrina Dubroca <sd@queasysnail.net>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        Stephan Mueller <smueller@chronox.de>
Subject: [PATCH 08/12] x86/crypto: aesni: Fill in new context data structures
Thread-Topic: [PATCH 08/12] x86/crypto: aesni: Fill in new context data
 structures
Thread-Index: AQHUkMLI5S/Pd+eCmU+qRiAtcEi5sQ==
Date: Mon, 10 Dec 2018 19:58:56 +0000
Message-ID: <8104eaf3639f9c70ced8d4867e572d6a1182afd2.1544471415.git.davejwatson@fb.com>
References: <cover.1544471415.git.davejwatson@fb.com>
In-Reply-To: <cover.1544471415.git.davejwatson@fb.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
user-agent: NeoMutt/20180716
x-clientproxiedby: MWHPR04CA0067.namprd04.prod.outlook.com
 (2603:10b6:300:6c::29) To MWHPR15MB1134.namprd15.prod.outlook.com
 (2603:10b6:320:22::12)
x-ms-exchange-messagesentrepresentingtype: 1
x-originating-ip: [2620:10d:c090:180::1:2261]
x-ms-publictraffictype: Email
x-microsoft-exchange-diagnostics: 1;MWHPR15MB1166;20:56vEdhJWcI+98ILr+hVykI4ua+bSYasNCc+50uk4NNtdACBLbFleVLujw4nh7ik+FPCloKJRvIytOrroIvv4wMmpZfg7feSD3e9cMaRmZOGtCkErbD801eZqmfYR9VDBITiGvUWiHxO5LVp3C95aHmtfcRCJGfMgB6Xnwj0g3ew=
x-ms-office365-filtering-correlation-id: 20faa47e-b474-4319-3602-08d65ed9eaa3
x-microsoft-antispam: BCL:0;PCL:0;RULEID:(2390098)(7020095)(4652040)(8989299)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(5600074)(711020)(2017052603328)(7153060)(7193020);SRVR:MWHPR15MB1166;
x-ms-traffictypediagnostic: MWHPR15MB1166:
x-microsoft-antispam-prvs: <MWHPR15MB11661802C42F5EF6ACFB72D2DDA50@MWHPR15MB1166.namprd15.prod.outlook.com>
x-ms-exchange-senderadcheck: 1
x-exchange-antispam-report-cfa-test: BCL:0;PCL:0;RULEID:(8211001083)(3230017)(999002)(11241501185)(6040522)(2401047)(5005006)(8121501046)(3231472)(944501520)(52105112)(3002001)(93006095)(93001095)(10201501046)(148016)(149066)(150057)(6041310)(20161123564045)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123562045)(20161123558120)(20161123560045)(201708071742011)(7699051)(76991095);SRVR:MWHPR15MB1166;BCL:0;PCL:0;RULEID:;SRVR:MWHPR15MB1166;
x-forefront-prvs: 08828D20BC
x-forefront-antispam-report: SFV:NSPM;SFS:(10019020)(136003)(39860400002)(346002)(366004)(376002)(396003)(199004)(189003)(7736002)(256004)(8936002)(486006)(386003)(76176011)(316002)(54906003)(58126008)(110136005)(99286004)(4326008)(2616005)(446003)(11346002)(52116002)(102836004)(305945005)(6506007)(46003)(476003)(186003)(5660300001)(36756003)(71190400001)(71200400001)(106356001)(105586002)(97736004)(118296001)(2501003)(53936002)(8676002)(68736007)(81166006)(81156014)(478600001)(14454004)(2906002)(25786009)(86362001)(6486002)(6512007)(6116002)(6436002);DIR:OUT;SFP:1102;SCL:1;SRVR:MWHPR15MB1166;H:MWHPR15MB1134.namprd15.prod.outlook.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;A:1;MX:1;
x-microsoft-antispam-message-info: 8ust5hkPGFpsSWDWtWzxKROG1/M8DjuRBmT4Yc2r7mZmBYuGTW/n8kde/HWUOzYQcV7eLsJA/qHcZzsrIR0Qib/ZU2/O3K3WKbstgM2P5A2xfVYLNbhVvqFftO7oT1Ps1iwIFZIA+d1nq0/iPE1EbR6+hbYWeHUXBfQCX28bvXmKUQFvzfcHhAyhftTyDqDK+MJn8eSG7tue2UWHTXDIgiLZ/Pfp2X6fVlB0IyZDCy1mHeh101EJ32LqzklFSXzwPL7GFfI99UsR+63rC8O/XI3RlkfzvwlU+RNL2vOWGAFOQHy4xK8elm1iZvlrQ0GZ
spamdiagnosticoutput: 1:99
spamdiagnosticmetadata: NSPM
Content-Type: text/plain; charset="us-ascii"
Content-ID: <3D83259952139E418754B441A59A0A77@namprd15.prod.outlook.com>
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
X-MS-Exchange-CrossTenant-Network-Message-Id: 20faa47e-b474-4319-3602-08d65ed9eaa3
X-MS-Exchange-CrossTenant-originalarrivaltime: 10 Dec 2018 19:58:56.1146
 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: 8ae927fe-1255-47a7-a2af-5f3a069daaa2
X-MS-Exchange-Transport-CrossTenantHeadersStamped: MWHPR15MB1166
X-OriginatorOrg: fb.com
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10434:,, definitions=2018-12-10_07:,,
 signatures=0
X-Proofpoint-Spam-Reason: safe
X-FB-Internal: Safe
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Fill in aadhash, aadlen, pblocklen, curcount with appropriate values.
pblocklen, aadhash, and pblockenckey are also updated at the end
of each scatter/gather operation, to be carried over to the next
operation.

Signed-off-by: Dave Watson <davejwatson@fb.com>
---
 arch/x86/crypto/aesni-intel_avx-x86_64.S | 51 +++++++++++++++++-------
 1 file changed, 37 insertions(+), 14 deletions(-)

diff --git a/arch/x86/crypto/aesni-intel_avx-x86_64.S b/arch/x86/crypto/aes=
ni-intel_avx-x86_64.S
index e347ba61db65..0a9cdcfdd987 100644
--- a/arch/x86/crypto/aesni-intel_avx-x86_64.S
+++ b/arch/x86/crypto/aesni-intel_avx-x86_64.S
@@ -297,7 +297,9 @@ VARIABLE_OFFSET =3D 16*8
 # clobbering all xmm registers
 # clobbering r10, r11, r12, r13, r14, r15
 .macro  GCM_ENC_DEC INITIAL_BLOCKS GHASH_8_ENCRYPT_8_PARALLEL GHASH_LAST_8=
 GHASH_MUL ENC_DEC REP
+        vmovdqu AadHash(arg2), %xmm8
         vmovdqu  HashKey(arg2), %xmm13      # xmm13 =3D HashKey
+        add arg5, InLen(arg2)
=20
         mov     arg5, %r13                  # save the number of bytes of =
plaintext/ciphertext
         and     $-16, %r13                  # r13 =3D r13 - (r13 mod 16)
@@ -410,6 +412,9 @@ _eight_cipher_left\@:
=20
=20
 _zero_cipher_left\@:
+        vmovdqu %xmm14, AadHash(arg2)
+        vmovdqu %xmm9, CurCount(arg2)
+
         cmp     $16, arg5
         jl      _only_less_than_16\@
=20
@@ -420,10 +425,14 @@ _zero_cipher_left\@:
=20
         # handle the last <16 Byte block seperately
=20
+        mov %r13, PBlockLen(arg2)
=20
         vpaddd   ONE(%rip), %xmm9, %xmm9             # INCR CNT to get Yn
+        vmovdqu %xmm9, CurCount(arg2)
         vpshufb SHUF_MASK(%rip), %xmm9, %xmm9
+
         ENCRYPT_SINGLE_BLOCK    \REP, %xmm9                # E(K, Yn)
+        vmovdqu %xmm9, PBlockEncKey(arg2)
=20
         sub     $16, %r11
         add     %r13, %r11
@@ -451,6 +460,7 @@ _only_less_than_16\@:
         vpshufb SHUF_MASK(%rip), %xmm9, %xmm9
         ENCRYPT_SINGLE_BLOCK    \REP, %xmm9                # E(K, Yn)
=20
+        vmovdqu %xmm9, PBlockEncKey(arg2)
=20
         lea     SHIFT_MASK+16(%rip), %r12
         sub     %r13, %r12                           # adjust the shuffle =
mask pointer to be
@@ -480,6 +490,7 @@ _final_ghash_mul\@:
         vpxor   %xmm2, %xmm14, %xmm14
 	#GHASH computation for the last <16 Byte block
         \GHASH_MUL       %xmm14, %xmm13, %xmm0, %xmm10, %xmm11, %xmm5, %xm=
m6
+        vmovdqu %xmm14, AadHash(arg2)
         sub     %r13, %r11
         add     $16, %r11
         .else
@@ -491,6 +502,7 @@ _final_ghash_mul\@:
         vpxor   %xmm9, %xmm14, %xmm14
 	#GHASH computation for the last <16 Byte block
         \GHASH_MUL       %xmm14, %xmm13, %xmm0, %xmm10, %xmm11, %xmm5, %xm=
m6
+        vmovdqu %xmm14, AadHash(arg2)
         sub     %r13, %r11
         add     $16, %r11
         vpshufb SHUF_MASK(%rip), %xmm9, %xmm9        # shuffle xmm9 back t=
o output as ciphertext
@@ -526,12 +538,16 @@ _multiple_of_16_bytes\@:
 # Output: Authorization Tag (AUTH_TAG)
 # Clobbers rax, r10-r12, and xmm0, xmm1, xmm5-xmm15
 .macro GCM_COMPLETE GHASH_MUL REP
-        mov     arg8, %r12                           # r12 =3D aadLen (num=
ber of bytes)
+        vmovdqu AadHash(arg2), %xmm14
+        vmovdqu HashKey(arg2), %xmm13
+
+        mov AadLen(arg2), %r12                          # r12 =3D aadLen (=
number of bytes)
         shl     $3, %r12                             # convert into number=
 of bits
         vmovd   %r12d, %xmm15                        # len(A) in xmm15
=20
-        shl     $3, arg5                             # len(C) in bits  (*1=
28)
-        vmovq   arg5, %xmm1
+        mov InLen(arg2), %r12
+        shl     $3, %r12                        # len(C) in bits  (*128)
+        vmovq   %r12, %xmm1
         vpslldq $8, %xmm15, %xmm15                   # xmm15 =3D len(A)|| =
0x0000000000000000
         vpxor   %xmm1, %xmm15, %xmm15                # xmm15 =3D len(A)||l=
en(C)
=20
@@ -539,8 +555,7 @@ _multiple_of_16_bytes\@:
         \GHASH_MUL       %xmm14, %xmm13, %xmm0, %xmm10, %xmm11, %xmm5, %xm=
m6    # final GHASH computation
         vpshufb SHUF_MASK(%rip), %xmm14, %xmm14      # perform a 16Byte sw=
ap
=20
-        mov     arg6, %rax                           # rax =3D *Y0
-        vmovdqu (%rax), %xmm9                        # xmm9 =3D Y0
+        vmovdqu OrigIV(arg2), %xmm9
=20
         ENCRYPT_SINGLE_BLOCK    \REP, %xmm9                # E(K, Y0)
=20
@@ -662,6 +677,20 @@ _get_AAD_done\@:
 .endm
=20
 .macro INIT GHASH_MUL PRECOMPUTE
+        mov arg6, %r11
+        mov %r11, AadLen(arg2) # ctx_data.aad_length =3D aad_length
+        xor %r11d, %r11d
+        mov %r11, InLen(arg2) # ctx_data.in_length =3D 0
+
+        mov %r11, PBlockLen(arg2) # ctx_data.partial_block_length =3D 0
+        mov %r11, PBlockEncKey(arg2) # ctx_data.partial_block_enc_key =3D =
0
+        mov arg4, %rax
+        movdqu (%rax), %xmm0
+        movdqu %xmm0, OrigIV(arg2) # ctx_data.orig_IV =3D iv
+
+        vpshufb SHUF_MASK(%rip), %xmm0, %xmm0
+        movdqu %xmm0, CurCount(arg2) # ctx_data.current_counter =3D iv
+
         vmovdqu  (arg3), %xmm6              # xmm6 =3D HashKey
=20
         vpshufb  SHUF_MASK(%rip), %xmm6, %xmm6
@@ -809,10 +838,7 @@ _get_AAD_done\@:
 	xor     %r11d, %r11d
=20
 	# start AES for num_initial_blocks blocks
-	mov     arg6, %rax                     # rax =3D *Y0
-	vmovdqu (%rax), \CTR                   # CTR =3D Y0
-	vpshufb SHUF_MASK(%rip), \CTR, \CTR
-
+	vmovdqu CurCount(arg2), \CTR
=20
 	i =3D (9-\num_initial_blocks)
 	setreg
@@ -1748,16 +1774,13 @@ ENDPROC(aesni_gcm_dec_avx_gen2)
 .macro INITIAL_BLOCKS_AVX2 REP num_initial_blocks T1 T2 T3 T4 T5 CTR XMM1 =
XMM2 XMM3 XMM4 XMM5 XMM6 XMM7 XMM8 T6 T_key ENC_DEC VER
 	i =3D (8-\num_initial_blocks)
 	setreg
-        vmovdqu AadHash(arg2), reg_i
+	vmovdqu AadHash(arg2), reg_i
=20
 	# initialize the data pointer offset as zero
 	xor     %r11d, %r11d
=20
 	# start AES for num_initial_blocks blocks
-	mov     arg6, %rax                     # rax =3D *Y0
-	vmovdqu (%rax), \CTR                   # CTR =3D Y0
-	vpshufb SHUF_MASK(%rip), \CTR, \CTR
-
+	vmovdqu CurCount(arg2), \CTR
=20
 	i =3D (9-\num_initial_blocks)
 	setreg
--=20
2.17.1

