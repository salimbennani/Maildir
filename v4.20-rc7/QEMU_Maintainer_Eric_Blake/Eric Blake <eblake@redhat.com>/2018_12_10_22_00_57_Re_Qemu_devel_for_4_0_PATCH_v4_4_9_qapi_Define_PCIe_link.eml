Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 11 Dec 2018 08:44:25 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga007.fm.intel.com (fmsmga007.fm.intel.com [10.253.24.52])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 0EE47580380
	for <like.xu@linux.intel.com>; Mon, 10 Dec 2018 14:01:28 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga007-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 10 Dec 2018 14:01:27 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AcQQzkRUhlHRJOjl7EXdu3U4bAXTV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZRSCv6dThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGp2y?=
 =?us-ascii?q?b4UPAeoGPuhWoYfyqFQMohSiCgeiGfvvxz1KiHL5wKE33fgtHh/d3AE7A9IDsm?=
 =?us-ascii?q?7ZoMnpOKocU+24yrTDwzXZb/NR3Dfw8IfGcgogof6QQLl9bM7RxlMsFwzbk16d?=
 =?us-ascii?q?rpLqMCiR1usXsGiU8fFtVfixhGE6qwF+uCSvyt0whYnOg4IY01bJ/jh3zoYyIN?=
 =?us-ascii?q?23Uk97Ydi8HZtUtiGVLJV2QsI4Q2F0oio6zacGuZGjcCgT1psnwgPfZ+aAc4iS?=
 =?us-ascii?q?7RLuUvuaLzRghH99Zr6zmxW//VK9xuHhVcS4ykhGoyRFn9XWq3wA1QTf5tabRv?=
 =?us-ascii?q?Z55EutxDiC2x7J5u1ZIk05m7DXJ4Aiz7M2i5Edq17MHjXsl0XzlKKWdlsr+uyv?=
 =?us-ascii?q?6+n/ZrXmp4ScN5Nvig3kPaQunNG/Df4/MggUUGiX4eW81Lv98k3lWLhGkOE6n6?=
 =?us-ascii?q?rDvJzHOMgWpbS1DxFb34sj8RqzEjWr3MwdnXYdLVJFfByHj5LuO1HLOP34FOmw?=
 =?us-ascii?q?g1GxkDty2v/JIKPhDYvJLnTai7jheqt960hAxwUt1tBT4JZUCrACIP3tQEPwu8?=
 =?us-ascii?q?HYAwc9Mwy1xebnFdp82pkfWWKJHq+WLqfSvUWU6eIoJumBf4kVuDH7K/gq4f7u?=
 =?us-ascii?q?kGU1mVgHfammxZcXcmy3Hux6I0WFZnrhmtMBEWYJvgUgVuDrh0CCXCVXZ3azWa?=
 =?us-ascii?q?I8+z46BJinDYfFWoCinriB0D2nEZ1RY2AVQm2KCmriIoWYR+8XOmXVJs56jidC?=
 =?us-ascii?q?U7+nRIk8kxa0u0j/wrtjK+PSvSoAqZPk0sMy/uDWiFQ++CJ5C5eg1XqQRTRxl2?=
 =?us-ascii?q?IMWzhkxa16vAlxx0mO1e1ijuVFGMdPz/VOVAg8KNjb1eMtEM34WA/KYoKUTk27?=
 =?us-ascii?q?SM6tGzA7Q4ENxIonZ0ttU+qjihTC1i+xBLldw7WPCYxy7aPY23n4It16zV7c2a?=
 =?us-ascii?q?UhhkVgScxKYynun6N66k3fCpDEl22fkKClc7la2zTCp0mZym/bkVtZW0ZaVazG?=
 =?us-ascii?q?UDhLa0HSpNf0zlnPQ7+nFfIsNQ4Xmp3KEbdDdtC81QYOf/zkItmLJjvpw2o=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ALAABy4Q5cmBHrdtBhAxoBAQEBAQIBA?=
 =?us-ascii?q?QEBBwIBAQEBgVQCAQEBAQsBgTCBOYEWE4N6iHiNES2ZRBQYAxGBS4YiIjcGDQE?=
 =?us-ascii?q?DAQEBAQEBAgETAQEBAQEICwsGGw4jDII2BQIDGgEGglwBAgMBAiAEEQ4KKQMDA?=
 =?us-ascii?q?QIGAQEKGAICIgQCAgMBUwYBDAYCAQEBgxwBggEBBKYyfDOFQIRrgQuLFheBQD+?=
 =?us-ascii?q?BESeCa4VIgj2CVwKJFYYoRjeFOosBCYcIikEGGIIphz0Qh0eJIpAOgVyBeDMaC?=
 =?us-ascii?q?BsVgycJgh4XEohMhV4iMYEHHIoJgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ALAABy4Q5cmBHrdtBhAxoBAQEBAQIBAQEBBwIBAQEBgVQ?=
 =?us-ascii?q?CAQEBAQsBgTCBOYEWE4N6iHiNES2ZRBQYAxGBS4YiIjcGDQEDAQEBAQEBAgETA?=
 =?us-ascii?q?QEBAQEICwsGGw4jDII2BQIDGgEGglwBAgMBAiAEEQ4KKQMDAQIGAQEKGAICIgQ?=
 =?us-ascii?q?CAgMBUwYBDAYCAQEBgxwBggEBBKYyfDOFQIRrgQuLFheBQD+BESeCa4VIgj2CV?=
 =?us-ascii?q?wKJFYYoRjeFOosBCYcIikEGGIIphz0Qh0eJIpAOgVyBeDMaCBsVgycJgh4XEoh?=
 =?us-ascii?q?MhV4iMYEHHIoJgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,339,1539673200"; 
   d="scan'208";a="54610595"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 10 Dec 2018 14:01:27 -0800
Received: from localhost ([::1]:34925 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gWTcE-00056W-Cs
	for like.xu@linux.intel.com; Mon, 10 Dec 2018 17:01:26 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:54881)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <eblake@redhat.com>) id 1gWTbz-00055m-JD
	for qemu-devel@nongnu.org; Mon, 10 Dec 2018 17:01:12 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <eblake@redhat.com>) id 1gWTbs-0000Bh-Ao
	for qemu-devel@nongnu.org; Mon, 10 Dec 2018 17:01:09 -0500
Received: from mx1.redhat.com ([209.132.183.28]:34608)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <eblake@redhat.com>) id 1gWTbr-00008N-Pr
	for qemu-devel@nongnu.org; Mon, 10 Dec 2018 17:01:04 -0500
Received: from smtp.corp.redhat.com (int-mx04.intmail.prod.int.phx2.redhat.com
	[10.5.11.14])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id D7D4D3082135;
	Mon, 10 Dec 2018 22:01:02 +0000 (UTC)
Received: from [10.10.126.241] (ovpn-126-241.rdu2.redhat.com [10.10.126.241])
	by smtp.corp.redhat.com (Postfix) with ESMTP id 749005D962;
	Mon, 10 Dec 2018 22:00:58 +0000 (UTC)
To: Alex Williamson <alex.williamson@redhat.com>, qemu-devel@nongnu.org
References: <154419994154.27028.14774494243513273923.stgit@gimli.home>
	<154420088248.27028.3919592169648338038.stgit@gimli.home>
From: Eric Blake <eblake@redhat.com>
Organization: Red Hat, Inc.
Message-ID: <16f2e753-4e80-0acc-d35a-75c6eb5a8f54@redhat.com>
Date: Mon, 10 Dec 2018 16:00:57 -0600
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
	Thunderbird/60.3.1
MIME-Version: 1.0
In-Reply-To: <154420088248.27028.3919592169648338038.stgit@gimli.home>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Language: en-US
Content-Transfer-Encoding: 7bit
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.14
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.42]);
	Mon, 10 Dec 2018 22:01:03 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [for-4.0 PATCH v4 4/9] qapi: Define PCIe link
 speed and width properties
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Geoffrey McRae <geoff@hostfission.com>,
	Markus Armbruster <armbru@redhat.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On 12/7/18 10:41 AM, Alex Williamson wrote:
> Create properties to be able to define speeds and widths for PCIe
> links.  The only tricky bit here is that our get and set callbacks
> translate from the fixed QAPI automagic enums to those we define
> in PCI code to represent the actual register segment value.
> 
> Cc: Eric Blake <eblake@redhat.com>
> Tested-by: Geoffrey McRae <geoff@hostfission.com>
> Reviewed-by: Markus Armbruster <armbru@redhat.com>
> Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
> ---
>   hw/core/qdev-properties.c    |  178 ++++++++++++++++++++++++++++++++++++++++++
>   include/hw/qdev-properties.h |    8 ++
>   qapi/common.json             |   42 ++++++++++
>   3 files changed, 228 insertions(+)
> 
> diff --git a/hw/core/qdev-properties.c b/hw/core/qdev-properties.c
> index 35072dec1ecf..f5ca5b821a79 100644
> --- a/hw/core/qdev-properties.c
> +++ b/hw/core/qdev-properties.c
> @@ -1327,3 +1327,181 @@ const PropertyInfo qdev_prop_off_auto_pcibar = {
>       .set = set_enum,
>       .set_default_value = set_default_value_enum,
>   };
> +
> +/* --- PCIELinkSpeed 2_5/5/8/16 -- */
> +
> +static void get_prop_pcielinkspeed(Object *obj, Visitor *v, const char *name,
> +                                   void *opaque, Error **errp)
> +{
> +    DeviceState *dev = DEVICE(obj);
> +    Property *prop = opaque;
> +    PCIExpLinkSpeed *p = qdev_get_prop_ptr(dev, prop);
> +    PCIELinkSpeed speed;

C does not guarantee what width 'speed' has,...

> +
> +    switch (*p) {
> +    case QEMU_PCI_EXP_LNK_2_5GT:
> +        speed = PCIE_LINK_SPEED_2_5;
> +        break;
> +    case QEMU_PCI_EXP_LNK_5GT:
> +        speed = PCIE_LINK_SPEED_5;
> +        break;
> +    case QEMU_PCI_EXP_LNK_8GT:
> +        speed = PCIE_LINK_SPEED_8;
> +        break;
> +    case QEMU_PCI_EXP_LNK_16GT:
> +        speed = PCIE_LINK_SPEED_16;
> +        break;
> +    default:
> +        /* Unreachable */
> +        abort();
> +    }
> +
> +    visit_type_enum(v, prop->name, (int *)&speed, prop->info->enum_table, errp);

...making this cast to (int*) not be very kosher. I _think_ we're okay 
here, but I'd be a LOT happier if you just used 'int speed' to avoid the 
cast.

> +}
> +
> +static void set_prop_pcielinkspeed(Object *obj, Visitor *v, const char *name,
> +                                   void *opaque, Error **errp)
> +{
> +    DeviceState *dev = DEVICE(obj);
> +    Property *prop = opaque;
> +    PCIExpLinkSpeed *p = qdev_get_prop_ptr(dev, prop);
> +    PCIELinkSpeed speed;
> +    Error *local_err = NULL;
> +
> +    if (dev->realized) {
> +        qdev_prop_set_after_realize(dev, name, errp);
> +        return;
> +    }
> +
> +    visit_type_enum(v, prop->name, (int *)&speed,

And again.

> +                    prop->info->enum_table, &local_err);
> +    if (local_err) {
> +        error_propagate(errp, local_err);
> +        return;
> +    }
> +
> +    switch (speed) {
> +    case PCIE_LINK_SPEED_2_5:
> +        *p = QEMU_PCI_EXP_LNK_2_5GT;
> +        break;
> +    case PCIE_LINK_SPEED_5:
> +        *p = QEMU_PCI_EXP_LNK_5GT;
> +        break;
> +    case PCIE_LINK_SPEED_8:
> +        *p = QEMU_PCI_EXP_LNK_8GT;
> +        break;
> +    case PCIE_LINK_SPEED_16:
> +        *p = QEMU_PCI_EXP_LNK_16GT;
> +        break;
> +    default:
> +        /* Unreachable */
> +        abort();
> +    }
> +}
> +

> +static void get_prop_pcielinkwidth(Object *obj, Visitor *v, const char *name,
> +                                   void *opaque, Error **errp)
> +{
> +    DeviceState *dev = DEVICE(obj);
> +    Property *prop = opaque;
> +    PCIExpLinkWidth *p = qdev_get_prop_ptr(dev, prop);
> +    PCIELinkWidth width;
> +
> +    switch (*p) {

> +    visit_type_enum(v, prop->name, (int *)&width, prop->info->enum_table, errp);
> +}
> +
> +static void set_prop_pcielinkwidth(Object *obj, Visitor *v, const char *name,
> +                                   void *opaque, Error **errp)
> +{
> +    DeviceState *dev = DEVICE(obj);
> +    Property *prop = opaque;
> +    PCIExpLinkWidth *p = qdev_get_prop_ptr(dev, prop);
> +    PCIELinkWidth width;
> +    Error *local_err = NULL;
> +
> +    if (dev->realized) {
> +        qdev_prop_set_after_realize(dev, name, errp);
> +        return;
> +    }
> +
> +    visit_type_enum(v, prop->name, (int *)&width,

And two more spots.

> +++ b/qapi/common.json
> @@ -127,6 +127,48 @@
>   { 'enum': 'OffAutoPCIBAR',
>     'data': [ 'off', 'auto', 'bar0', 'bar1', 'bar2', 'bar3', 'bar4', 'bar5' ] }
>   
> +##
> +# @PCIELinkSpeed:
> +#
> +# An enumeration of PCIe link speeds in units of GT/s
> +#
> +# @2_5: 2.5GT/s
> +#
> +# @5: 5.0GT/s
> +#
> +# @8: 8.0GT/s
> +#
> +# @16: 16.0GT/s
> +#
> +# Since: 4.0
> +##
> +{ 'enum': 'PCIELinkSpeed',
> +  'data': [ '2_5', '5', '8', '16' ] }

QAPI enums are special-cased to allow starting with digits, thanks to 
QKeyCode.  I don't know if we are trying to avoid adding yet more of 
those, but the fact that you didn't have to whitelist them means that we 
are at least not forcibly limiting the use of leading digits in new enums.

-- 
Eric Blake, Principal Software Engineer
Red Hat, Inc.           +1-919-301-3266
Virtualization:  qemu.org | libvirt.org

