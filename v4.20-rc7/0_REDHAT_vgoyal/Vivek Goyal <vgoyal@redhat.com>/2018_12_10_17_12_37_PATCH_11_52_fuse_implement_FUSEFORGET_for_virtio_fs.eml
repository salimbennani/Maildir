Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 11 Dec 2018 08:40:38 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id BF6A05807A2;
	Mon, 10 Dec 2018 09:21:02 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by fmsmga005-1.fm.intel.com with ESMTP; 10 Dec 2018 09:21:01 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AlmaOvhRO+OrPYhMBPWvni2ePmNpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64YBCDt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KptVRTmij?=
 =?us-ascii?q?oINyQh/W/XlMJ+kaxVrhGjqBxx2I7UeIOYOeFicq/BZ94WWXZNUtpNWyFHH4iy?=
 =?us-ascii?q?b5EPD+0EPetAoIb9pkUOogW9BQKxBe3vzT9JiWXy3aYn1OkhDw7G3AsgHt0UtH?=
 =?us-ascii?q?TZt8/1O7kPXuC11qbI0S/PYO9R2Tf48YXFdA0qr/KUXb9ob8bd1U0iGxnYglie?=
 =?us-ascii?q?t4DpJS6Z2+cRv2SB7udtV/qjh3A7pwx1uDSj28khhpfTio4IyV3J+z91zJg2KN?=
 =?us-ascii?q?C+VUV1e8SrEIFKuCGfL4Z2Qt0tQ2VvuCsi1L0GtoC0fDIQxJQk2RHfcfqHfJaM?=
 =?us-ascii?q?4h75U+aROzh4iGpkeLK5mRmy7VCtxvPgWsSwylpGsyRInsfWunwQ1BHf9tKLR/?=
 =?us-ascii?q?p/80u53DaAzQHT6uVKIUAukqrbLoYswroxlpoVrETCETb6mEbog6+McEUr5Oyo?=
 =?us-ascii?q?5/3gYrTooJ+TKZV0hxrgMqQhhMO/G/40MgsQUGiB/+Szyrnj8Vf+QLVQgf06ir?=
 =?us-ascii?q?PZv4zCJcQHuq65BBdY0oIi6xa8ETiqytsZnWQcIVJBeRKHiZXpOl7ULPD5C/e/?=
 =?us-ascii?q?n0qjkDNxy//aOb3hB43HLmLfn7f5YbZ990lcxRIzzd9F5pJUFqsOIPXpVk/xqd?=
 =?us-ascii?q?zXFBk5MwOvzubjCdV90J4eWG2VDq+YNqPSrUGH5uY1L+aQY48VvS73K+I56P72?=
 =?us-ascii?q?kX85hVgdcLGr3ZsQdn+0BPdmI0KfYXrqhdcMCmMKvgs4TOz3h1yOSz9TZ3CuX6?=
 =?us-ascii?q?0i4jE3Ep6pDYDGRoq1mryOwD+7HoFKZmBBEl2DC2zod4WDW/cPci6SONVukj4f?=
 =?us-ascii?q?WLilSo8h0wyutQDgx7pmKOrU5jMXtZb52Ndp4O3TkAk49SZoAMSFz2GNU2Z0k3?=
 =?us-ascii?q?sLRzAs2qBzu0h9ylaZ3qh+jPxVDthT5/JPUgcnOp/Q1e16C9buWg3feteFUkqp?=
 =?us-ascii?q?QtKjATspVNI+38cOY1phG9Wllh3MwjClA6ELmLCRBJw76KTc32PvKMZ7zHrG0K?=
 =?us-ascii?q?ohj1wiQsZUMW2mh6h/9xXcBoLTkkWZkbqqeroY3CLX6GiDym+OtllCUAFsSaXF?=
 =?us-ascii?q?QWwfZkzOoNvk/EzCUaGhBa4nMgRbz86CMbVFatvygFVCRffjPsneYm2rl2exAx?=
 =?us-ascii?q?aI2q2DbI7wd2oB2yXdDVAOkxoP8naeKQg+GiChrnrCDDxvEFLvZF/s8el+qX+h?=
 =?us-ascii?q?Uk841QaKb1dl17q0/B4ViueRS/cS3rICpScgpC94HFe739LKFdWAoxBtc7lbYd?=
 =?us-ascii?q?M4+F1Hz37WtxRhPpy8KKBvnkQRcwBpsELhyRp2Cp9MntM3rHw31gVyL6GY0FRf?=
 =?us-ascii?q?dz6D2ZDwO7vXKnT9/Ry1aq7W3E3e38iS+qsV9Ps4rFDjthmzFkU+63Vnz8VV03?=
 =?us-ascii?q?yE65TKEQoeS47+Xlw29hh6vb7aZCY96pjQ1X1tN6m0rzDD18goBOsj1havYdNf?=
 =?us-ascii?q?PLmYGw/1Fs0QH9KuJ/Aym1i1chIEO/hf9LQ1P8y6bfSGwrOkPOF6kDKgk2tH+o?=
 =?us-ascii?q?F93luQ+CVmTu7HwogKw+uf3guBTDr8iFahssbqmYFLfz0SH2y/yTT6C45VfKF9?=
 =?us-ascii?q?YYELCWK2Kc2t2tp+n4LtW2Jf9FO7B1IG2dWleBqIY1zmwA1Q018aoXimmSu+0j?=
 =?us-ascii?q?x1nCslrquZ3CzS3evicAALNXJMRGlnlV3sO5S7j8gGXEi0aAgkjBml6lzgx6hY?=
 =?us-ascii?q?p6R/KHPfQVxScCj1LGFiU62wuaSEY8NU7JMosCNXUPmzYFyAS779pQca3D3nH2?=
 =?us-ascii?q?dE2D87cDSqsI3jnxNmkGKdMGpzrH3BdMBw3xjf48bQRfxQ3joAXyR4jTjXBl6h?=
 =?us-ascii?q?P9im59mUlpHDsvygWGKlTJFcbS7rzYaYviuh+WJqGQG/n+y0mtD/Egg1yy7728?=
 =?us-ascii?q?NqVSXVthn8ZIbr2r++MeJmeEloGVD959B7GoF4jos/mpUQ1WIGiZWS+HoNiX3z?=
 =?us-ascii?q?PslD2aLicHoNQiYGw9vU4AjmwkJvNHyIyJziVnWB3MRhfcK1bX0M2iIy9M1KDK?=
 =?us-ascii?q?aU7LpZnSp6uFa4rATRYeRjkTcZ0/ch9Hkag+QRsgo30iqdGqwSHVVfPSH0ixSI?=
 =?us-ascii?q?6NW+oL9WZWm1d7iwyVF+ncugDLyZpgFcWXD5eootHCNq78V/Nk7M32P36o3+ZN?=
 =?us-ascii?q?bQatcTvAWOkxjcl+hVNI4xlv0SiCV8I239unkly/MhgRxqwJG3p4yHK2Rr/KKk?=
 =?us-ascii?q?DR9ULDz1Z8UP+j7ziaZShNqZ34eqHp95ADUEQIPoTe60EDIVrfnnNRyBEDgipX?=
 =?us-ascii?q?eAA7bfARWT6ER7r3LMDpCrMWuYJGICwNVmRRmdIlFfgQ8OUDU7mJ45Ch6lxMj7?=
 =?us-ascii?q?fEhl4TAR40byqgFQxeJwKxn/TmDfqR+oazczVZifNQdW4RtE50vPKsye6eRzHy?=
 =?us-ascii?q?5D852lrQyNLHGbZgtSAWEIXEyEG07sPr206dbc9OiYA/K0L+HSbrWWtexeS/CI?=
 =?us-ascii?q?yIqv0oR4/jaMNcaPPnh4A/04wEpDWn95FNrDmzUSUCwajCbNb8+dpBeh9Sx7tM?=
 =?us-ascii?q?G/8PL3WA3x4YuDEaddMdJq+xqum6eMK/aQhDplKTZfzp4D32LIx6MF3FEMiyBi?=
 =?us-ascii?q?bT2tEbUbuC7JTaLQnLJXDhEBZyNyMstI87wz3g1XNcHHjdP106ZyjuQpBFddSV?=
 =?us-ascii?q?zhhsapaNQWI2G8MVPLHlqEOK6aKj3L3c73Z7ixSblRjOVSqh2xtiyXE07lPjSf?=
 =?us-ascii?q?iTbpUwqjPv1LjCGeJBZeop2ycg5xCWj/S9Lrch26P8VxjT0zwL00gGvFNG8cMT?=
 =?us-ascii?q?dmdUNNoaad7SdZgvV5BmxA4WBpLeiCmyaF8ebYLowavudsAiRxxKpm5yE+yr1I?=
 =?us-ascii?q?/GRKX/B4hibWhsBhrkvgkeSVzDdjFh1UpXIDgIONoFUnOqjD8JREcWjL8QhL7m?=
 =?us-ascii?q?iKDRkO4dx/BZmnuL5V4sbAmbi1KzpY9d/Qu8wGCJv6MsWCZUQgLxfqUBHTHQIB?=
 =?us-ascii?q?BWq1OmbOjkh1ivye9nSJ6JM9r86/y9I1VrZHWQltRbshAUN/EYlaLQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BNAAC2nw5ch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBVAQBAQsBg2snjHKLMIINFJkwFBgTAYdtIjcGDQEDAQEBAQEBAgETAQEBCA0?=
 =?us-ascii?q?JCCkvgjYigmUDAwECJFIGCQEBHzEDKSsHEgWDHIICBacHM4ogjCEXgUA/gRGNb?=
 =?us-ascii?q?gKJFRoGhgh9UY9qCZFECxiJZodXLIh2kA6BXIF4MxoIGxWDJ4InF447IQEBMYE?=
 =?us-ascii?q?FAQEci3wBAQ?=
X-IPAS-Result: =?us-ascii?q?A0BNAAC2nw5ch0O0hNFkHAEBAQQBAQcEAQGBVAQBAQsBg2s?=
 =?us-ascii?q?njHKLMIINFJkwFBgTAYdtIjcGDQEDAQEBAQEBAgETAQEBCA0JCCkvgjYigmUDA?=
 =?us-ascii?q?wECJFIGCQEBHzEDKSsHEgWDHIICBacHM4ogjCEXgUA/gRGNbgKJFRoGhgh9UY9?=
 =?us-ascii?q?qCZFECxiJZodXLIh2kA6BXIF4MxoIGxWDJ4InF447IQEBMYEFAQEci3wBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,339,1539673200"; 
   d="scan'208";a="43456018"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 10 Dec 2018 09:21:00 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729167AbeLJRT6 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 10 Dec 2018 12:19:58 -0500
Received: from mx1.redhat.com ([209.132.183.28]:36966 "EHLO mx1.redhat.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1728361AbeLJRNe (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 10 Dec 2018 12:13:34 -0500
Received: from smtp.corp.redhat.com (int-mx01.intmail.prod.int.phx2.redhat.com [10.5.11.11])
        (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
        (No client certificate requested)
        by mx1.redhat.com (Postfix) with ESMTPS id 268763154861;
        Mon, 10 Dec 2018 17:13:34 +0000 (UTC)
Received: from horse.redhat.com (unknown [10.18.25.234])
        by smtp.corp.redhat.com (Postfix) with ESMTP id E178F600D7;
        Mon, 10 Dec 2018 17:13:33 +0000 (UTC)
Received: by horse.redhat.com (Postfix, from userid 10451)
        id 2FEB8223C0D; Mon, 10 Dec 2018 12:13:30 -0500 (EST)
From: Vivek Goyal <vgoyal@redhat.com>
To: linux-fsdevel@vger.kernel.org, linux-kernel@vger.kernel.org,
        kvm@vger.kernel.org
Cc: vgoyal@redhat.com, miklos@szeredi.hu, stefanha@redhat.com,
        dgilbert@redhat.com, sweil@redhat.com, swhiteho@redhat.com
Subject: [PATCH 11/52] fuse: implement FUSE_FORGET for virtio-fs
Date: Mon, 10 Dec 2018 12:12:37 -0500
Message-Id: <20181210171318.16998-12-vgoyal@redhat.com>
In-Reply-To: <20181210171318.16998-1-vgoyal@redhat.com>
References: <20181210171318.16998-1-vgoyal@redhat.com>
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.11
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16 (mx1.redhat.com [10.5.110.41]); Mon, 10 Dec 2018 17:13:34 +0000 (UTC)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From: Stefan Hajnoczi <stefanha@redhat.com>

Sent single FUSE_FORGET requests on the hiprio queue.  In the future it
may be possible to do FUSE_BATCH_FORGET but that is tricky since
virtio-fs gets called synchronously when forgets are queued.

Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
---
 fs/fuse/virtio_fs.c | 93 ++++++++++++++++++++++++++++++++++++++++++++++++++---
 1 file changed, 89 insertions(+), 4 deletions(-)

diff --git a/fs/fuse/virtio_fs.c b/fs/fuse/virtio_fs.c
index fa99a31ee930..225eb729656f 100644
--- a/fs/fuse/virtio_fs.c
+++ b/fs/fuse/virtio_fs.c
@@ -140,10 +140,26 @@ static void virtio_fs_notifications_done_work(struct work_struct *work)
 	return;
 }
 
-static void virtio_fs_hiprio_done(struct virtqueue *vq)
+/* Work function for hiprio completion */
+static void virtio_fs_hiprio_done_work(struct work_struct *work)
 {
-	/* TODO */
-	dev_dbg(&vq->vdev->dev, "%s\n", __func__);
+	struct virtio_fs_vq *fsvq = container_of(work, struct virtio_fs_vq,
+						 done_work);
+	struct fuse_pqueue *fpq = &fsvq->fud->pq;
+	struct virtqueue *vq = fsvq->vq;
+
+	/* Free completed FUSE_FORGET requests */
+	spin_lock(&fpq->lock);
+	do {
+		unsigned len;
+		void *req;
+
+		virtqueue_disable_cb(vq);
+
+		while ((req = virtqueue_get_buf(vq, &len)) != NULL)
+			kfree(req);
+	} while (!virtqueue_enable_cb(vq) && likely(!virtqueue_is_broken(vq)));
+	spin_unlock(&fpq->lock);
 }
 
 /* Allocate and copy args into req->argbuf */
@@ -302,6 +318,7 @@ static int virtio_fs_setup_vqs(struct virtio_device *vdev,
 	callbacks[1] = virtio_fs_vq_done;
 	snprintf(fs->vqs[1].name, sizeof(fs->vqs[1].name), "hiprio");
 	names[1] = fs->vqs[1].name;
+	INIT_WORK(&fs->vqs[1].done_work, virtio_fs_hiprio_done_work);
 
 	/* Initialize the requests virtqueues */
 	for (i = 2; i < fs->nvqs; i++) {
@@ -424,11 +441,79 @@ static struct virtio_driver virtio_fs_driver = {
 #endif
 };
 
+struct virtio_fs_forget {
+	struct fuse_in_header ih;
+	struct fuse_forget_in arg;
+};
+
 static void virtio_fs_wake_forget_and_unlock(struct fuse_iqueue *fiq)
 __releases(fiq->waitq.lock)
 {
-	/* TODO */
+	struct fuse_forget_link *link;
+	struct virtio_fs_forget *forget;
+	struct fuse_pqueue *fpq;
+	struct scatterlist sg;
+	struct scatterlist *sgs[] = {&sg};
+	struct virtio_fs *fs;
+	struct virtqueue *vq;
+	bool notify;
+	u64 unique;
+	int ret;
+
+	BUG_ON(!fiq->forget_list_head.next);
+	link = fiq->forget_list_head.next;
+	BUG_ON(link->next);
+	fiq->forget_list_head.next = NULL;
+	fiq->forget_list_tail = &fiq->forget_list_head;
+
+	unique = fuse_get_unique(fiq);
+
+	fs = fiq->priv;
+
 	spin_unlock(&fiq->waitq.lock);
+
+	/* Allocate a buffer for the request */
+	forget = kmalloc(sizeof(*forget), GFP_ATOMIC);
+	if (!forget) {
+		pr_err("virtio-fs: dropped FORGET: kmalloc failed\n");
+		goto out; /* TODO avoid dropping it? */
+	}
+
+	forget->ih = (struct fuse_in_header){
+		.opcode = FUSE_FORGET,
+		.nodeid = link->forget_one.nodeid,
+		.unique = unique,
+		.len = sizeof(*forget),
+	};
+	forget->arg = (struct fuse_forget_in){
+		.nlookup = link->forget_one.nlookup,
+	};
+
+	sg_init_one(&sg, forget, sizeof(*forget));
+
+	/* Enqueue the request */
+	vq = fs->vqs[1].vq;
+	dev_dbg(&vq->vdev->dev, "%s\n", __func__);
+	fpq = vq_to_fpq(vq);
+	spin_lock(&fpq->lock);
+
+	ret = virtqueue_add_sgs(vq, sgs, 1, 0, forget, GFP_ATOMIC);
+	if (ret < 0) {
+		pr_err("virtio-fs: dropped FORGET: queue full\n");
+		/* TODO handle full virtqueue */
+		spin_unlock(&fpq->lock);
+		goto out;
+	}
+
+	notify = virtqueue_kick_prepare(vq);
+
+	spin_unlock(&fpq->lock);
+
+	if (notify)
+		virtqueue_notify(vq);
+
+out:
+	kfree(link);
 }
 
 static void virtio_fs_wake_interrupt_and_unlock(struct fuse_iqueue *fiq)
-- 
2.13.6

