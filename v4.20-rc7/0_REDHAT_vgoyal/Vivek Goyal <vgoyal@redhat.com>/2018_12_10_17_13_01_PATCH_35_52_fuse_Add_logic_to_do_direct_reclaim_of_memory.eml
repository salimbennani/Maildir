Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 11 Dec 2018 08:40:29 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id CC5B6580380;
	Mon, 10 Dec 2018 09:17:42 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga006-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 10 Dec 2018 09:17:42 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AeVz2Jh/aUctTBv9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1+4SIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDwULs6Wymt771zRRHoli?=
 =?us-ascii?q?kJKjA3/mLVhcx+l6JbuBCsqgdjz4LIeoyZKOZycr/Bcd4cWGFPXtxRVytEAo6k?=
 =?us-ascii?q?YIQPDvQBMvhbr4LgplUOqhu/ChOoBOjyzTJImHD23ao60us7FQHLxxYgEMwTv3?=
 =?us-ascii?q?TUttr1KL0eXvyyzKnN1DjOae5d1zTl6IXQbBwtvfWBUahtfcff10UjDR7Jg1aM?=
 =?us-ascii?q?pYD/Pj6Y1PwBv3aH4+dkT+6jlmAqpx9rrjSyxcohhJPFipwWx13C6C532pw6Jc?=
 =?us-ascii?q?eiR05+edOkEIVftyWdN4ZuXMMiTH9nuDwgxr0Fp5G7Zi4Kx4ojxxLFbPyHaYeI?=
 =?us-ascii?q?7griVOaXPzh4mGpodKyjixu260Ss1+PxWteu3FpXrSdJjsPAu3EP2hDL78iIUP?=
 =?us-ascii?q?p9/kOv2TaV0ADT7/lJIUQ1lardNp4gzac8lpkNvkTZGC/5hkH2gLaRdkQq/Oin?=
 =?us-ascii?q?9f7nb674pp+TKYB0kBvyMqcwlcylB+Q3LAwOU3Kc+eSm273v5Vf5T6lSjv0qjq?=
 =?us-ascii?q?nZt4jXJcAapq66HQBZyIki6wukAjei0dQYm2QHLV1fdBKGiYjpJ0/BIPTiAfij?=
 =?us-ascii?q?hFSslS9hx+raMb35HpXNMn/Dna/hfbln6k5c1BA8zddF65JUF7EOOvTzWkDqud?=
 =?us-ascii?q?zcDx85NRG0wun9BNV80IMeRXyAAquDPKzOtl+I4/olI/OQa48NpDb9N/8l6ubs?=
 =?us-ascii?q?jX8+h1ARZ6qp3ZwRaHC+GfRrOEGZYXvqgtccHmYGpAs+TOr2iFKcVT5ffWq9X6?=
 =?us-ascii?q?U55jsjEoKpEZ/DRpyxgLyGxCq0BIZWZmBBClCPC3vobZ+LW/UXZSKWI89hlCEE?=
 =?us-ascii?q?VLe7R48g0xGuqBH1y759IuXI/S0YsIrp1MJp6O3LiREy6Tt0Atye026XSWF4hG?=
 =?us-ascii?q?cIRz4s06B5rkxw0VOD0al+g/xFGt1f/fJJUgEmNZHCy+x2Ecz9WgXEft2RUlap?=
 =?us-ascii?q?Xs2mAS0tTtI229IBflxyG8u8gRzZ3yqlGbkVl6eVC5wy9a7c23vxJ8N5y3vd0K?=
 =?us-ascii?q?khjl8mQtZANGG8h65/8RTTCJDNk0mDi6mqcqEc1jbX9Gif1WqOoF1YUAloXKrY?=
 =?us-ascii?q?R38feFXZoc755kzYSb+uEqooMg1axM6GK6tKbMDpjFpcSPfiPtTef3y+m2OqCR?=
 =?us-ascii?q?mUwbOMaZLge38B0yXFFEgEjwcT8G6aNQg/AyehpH7eDDxuFF71f0Pg6+5+qGm/?=
 =?us-ascii?q?Tk81yQGKYFZs1760+h4TmPydROkf3rMCuCc9tTp0GEyx0M7RC9qFvwBhZrlTYc?=
 =?us-ascii?q?sh4Fdb0mLUrxZyPpi+IKFtmFEfcx57sFjz1xpqEIpAl8sqrHQ0zAdpLaKY0VVB?=
 =?us-ascii?q?dy6X3JzqO73XLHXy8w6ra6LMxl7e19OW8L8V6Psks1XjoB2pFk06/nRnztlZyW?=
 =?us-ascii?q?eT6o/LDQoSS53xVEk3+gN+p7HbZCk9+ozV2WdtMamyrj/NxdYpCPE5xRanetdV?=
 =?us-ascii?q?KLmEGxPqE80GG8iuL/Qnm0Kobh0YJu9S7rM7P8S8e/uAxqGrJudgkCu6gmtd5I?=
 =?us-ascii?q?Byz1yD9zB7Su7OxJsFx/CY3g2aVzbzlluhs8b3mZxaajEWBGaw1S/kBItJbK1o?=
 =?us-ascii?q?YYkLEXuuI9Gwxthmh5/tWmRU9V65C1Mdxc+pfwGfb1j83Q1WyEQWrmarmSq+zz?=
 =?us-ascii?q?xojT4pqrCT0zDJw+TnbBAHIHJERHF+jVfwJoi5l9IaU1Kybwgqlxul4lz2x7NB?=
 =?us-ascii?q?q6R8LGnTQEFIcDbwL2x5Vquwt7yCY9NA6Z8ysCVXVvi8bk6eSrLnvxQa1CbjFX?=
 =?us-ascii?q?NExD8nbzGqpon5nxtihWOdNnlzq2DVecNxxRfZ/9HcQf9R3jwbRCh3kzXXB168?=
 =?us-ascii?q?P8W38tWQjZvMrue+V2e5XJ1JbSbr1Z+AtDe85WByAh2whfGzlsfnEQgnyyD70d?=
 =?us-ascii?q?ZqWD7MrBb9ZInryqu7PfhmfkluGF/z9c56FptinYs3gZEawWIaiYmN/XobjWfz?=
 =?us-ascii?q?Ns1W2af/bHoOXzEH2dDU7xb+2E1/MH2J3Zn2WWuHwstufNS6ZmIW2iQg78FFEq?=
 =?us-ascii?q?uU7bpEnTdrrVq8tw7eff99njIFw/s09HEam/0JuBYqziiFHrASGkxYMTbtlhuS?=
 =?us-ascii?q?6dC+sb5XZH2ucbWr0Ep+nNahDKyNow1GWXb5fIsiEjF07sllLF3M13jz4Jn+eN?=
 =?us-ascii?q?bMddITqgGUkxDYgudOMp0xkf4KhTd9NWL5oH0o0Oo7jR1o3ZGns4mLMWRt/KSl?=
 =?us-ascii?q?AhFGMj35fd8c+jbojaxGhMaZw5ivHol9GjUMRJboT+inEDcMuvT8LQqODCcwqn?=
 =?us-ascii?q?SGGbrcAA+f7l1pr2nUHpCvNnGXImQZzNp4SBmcIkxfnB4bXDEgkpElEQCqwdTr?=
 =?us-ascii?q?cF1l6TAJ+l74thxMx/poNhn4T2ffvRqoZS0ySJSFNxpW6QdC50jOPMya7+JzGT?=
 =?us-ascii?q?xY/5K7oAyMLGybexpHDWUTVkOYAFDjO6Gk5cPc/OiAGuq+M/zObK2OqeNAVveI?=
 =?us-ascii?q?xpGv0op88zaPLMWPOXZiAOMh2kpeRnB0AMDZmzQJSywKmCPBdc+bpBGg+iJpqs?=
 =?us-ascii?q?Cz6ujkWAXq5YGXEbtdLc1v+wyqgaeEL+Ofnjt5Ji1C1pwSxX7E0rwf3F8JhiFq?=
 =?us-ascii?q?djmtF6kAtCHXQKLRnK9XEwAUaydpOMRU6KI82xFHOdTHhdPtyr54kvk1Bk9ZVV?=
 =?us-ascii?q?zgn8Glf9AFL3uhO1PHGkmLMq+LJTnKw8HxfKO9RqdcjORStx2spzmbF1XvMSiE?=
 =?us-ascii?q?lznsTxqvK/1DjDmHPBxCv4GwahZsBnLlTNLjax27Nsd4jDw2wbIugHPKOnURMT?=
 =?us-ascii?q?x9c0NLs72R4jlUgvR5G2xd8HVlKfOIlDqe7+nded4qtq5vAyJph6dU+3g31bZR?=
 =?us-ascii?q?xD9LSeYzmybIqNNq5Va8na3HzjthTQoLqTtRgo+PlVttNL+f9ZRaX3vAuhUX4i?=
 =?us-ascii?q?HYCAoPj8VqB8epuK1KzNXL0qXpJ2Rs6dXRqPUdGcXXYO2AIXMleU73FznFBQ8t?=
 =?us-ascii?q?VzOnNWjDwUdalafBpTWuspEmp820y9I1QbhBWQltGw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BNAABIng5ch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBVAQBAQsBg2snjHKLMIIhmTAUGBMBh20iNwYNAQMBAQEBAQECARMBAQEIDQk?=
 =?us-ascii?q?IKS+CNiKCZQMDAQIkUgYJAQFQAykrBxIFgxyCAgWnBTOKIIwhF4FAP4ERgmSLC?=
 =?us-ascii?q?gKJL4cLUY9qCYpDhwELGIFciAo2hyGJIoxdgzGBXIF4MxoIGxU7gmyCJxeOOyE?=
 =?us-ascii?q?BATGBBQEBHIt8AQE?=
X-IPAS-Result: =?us-ascii?q?A0BNAABIng5ch0O0hNFkHAEBAQQBAQcEAQGBVAQBAQsBg2s?=
 =?us-ascii?q?njHKLMIIhmTAUGBMBh20iNwYNAQMBAQEBAQECARMBAQEIDQkIKS+CNiKCZQMDA?=
 =?us-ascii?q?QIkUgYJAQFQAykrBxIFgxyCAgWnBTOKIIwhF4FAP4ERgmSLCgKJL4cLUY9qCYp?=
 =?us-ascii?q?DhwELGIFciAo2hyGJIoxdgzGBXIF4MxoIGxU7gmyCJxeOOyEBATGBBQEBHIt8A?=
 =?us-ascii?q?QE?=
X-IronPort-AV: E=Sophos;i="5.56,339,1539673200"; 
   d="scan'208";a="66138361"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 10 Dec 2018 09:17:41 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728963AbeLJRRd (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 10 Dec 2018 12:17:33 -0500
Received: from mx1.redhat.com ([209.132.183.28]:58430 "EHLO mx1.redhat.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1728383AbeLJRNf (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 10 Dec 2018 12:13:35 -0500
Received: from smtp.corp.redhat.com (int-mx01.intmail.prod.int.phx2.redhat.com [10.5.11.11])
        (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
        (No client certificate requested)
        by mx1.redhat.com (Postfix) with ESMTPS id 4EC0730044D9;
        Mon, 10 Dec 2018 17:13:35 +0000 (UTC)
Received: from horse.redhat.com (unknown [10.18.25.234])
        by smtp.corp.redhat.com (Postfix) with ESMTP id 0C3F26015E;
        Mon, 10 Dec 2018 17:13:35 +0000 (UTC)
Received: by horse.redhat.com (Postfix, from userid 10451)
        id 8FFCE22426F; Mon, 10 Dec 2018 12:13:30 -0500 (EST)
From: Vivek Goyal <vgoyal@redhat.com>
To: linux-fsdevel@vger.kernel.org, linux-kernel@vger.kernel.org,
        kvm@vger.kernel.org
Cc: vgoyal@redhat.com, miklos@szeredi.hu, stefanha@redhat.com,
        dgilbert@redhat.com, sweil@redhat.com, swhiteho@redhat.com
Subject: [PATCH 35/52] fuse: Add logic to do direct reclaim of memory
Date: Mon, 10 Dec 2018 12:13:01 -0500
Message-Id: <20181210171318.16998-36-vgoyal@redhat.com>
In-Reply-To: <20181210171318.16998-1-vgoyal@redhat.com>
References: <20181210171318.16998-1-vgoyal@redhat.com>
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.11
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16 (mx1.redhat.com [10.5.110.45]); Mon, 10 Dec 2018 17:13:35 +0000 (UTC)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This can be done only from same inode. Also it can be done only for
read/write case and not for fault case. Reason, as of now reclaim requires
holding inode_lock, fuse_inode->i_mmap_sem and fuse_inode->dmap_tree
locks in that order and only read/write path will allow that (and not
fault path).

Signed-off-by: Vivek Goyal <vgoyal@redhat.com>
---
 fs/fuse/file.c | 121 +++++++++++++++++++++++++++++++++++++++++++++++++--------
 1 file changed, 105 insertions(+), 16 deletions(-)

diff --git a/fs/fuse/file.c b/fs/fuse/file.c
index 17becdff3014..13db83d105ff 100644
--- a/fs/fuse/file.c
+++ b/fs/fuse/file.c
@@ -30,6 +30,8 @@ INTERVAL_TREE_DEFINE(struct fuse_dax_mapping,
 
 static long __fuse_file_fallocate(struct file *file, int mode,
 					loff_t offset, loff_t length);
+static struct fuse_dax_mapping *alloc_dax_mapping_reclaim(struct fuse_conn *fc,
+					struct inode *inode);
 
 static int fuse_send_open(struct fuse_conn *fc, u64 nodeid, struct file *file,
 			  int opcode, struct fuse_open_out *outargp)
@@ -1727,7 +1729,12 @@ static int fuse_iomap_begin(struct inode *inode, loff_t pos, loff_t length,
 		if (pos >= i_size_read(inode))
 			goto iomap_hole;
 
-		alloc_dmap = alloc_dax_mapping(fc);
+		/* Can't do reclaim in fault path yet due to lock ordering */
+		if (flags & IOMAP_FAULT)
+			alloc_dmap = alloc_dax_mapping(fc);
+		else
+			alloc_dmap = alloc_dax_mapping_reclaim(fc, inode);
+
 		if (!alloc_dmap)
 			return -EBUSY;
 
@@ -3705,24 +3712,14 @@ void fuse_init_file_inode(struct inode *inode)
 	}
 }
 
-int fuse_dax_free_one_mapping_locked(struct fuse_conn *fc, struct inode *inode,
-				u64 dmap_start)
+int fuse_dax_reclaim_dmap_locked(struct fuse_conn *fc, struct inode *inode,
+				struct fuse_dax_mapping *dmap)
 {
 	int ret;
 	struct fuse_inode *fi = get_fuse_inode(inode);
-	struct fuse_dax_mapping *dmap;
-
-	WARN_ON(!inode_is_locked(inode));
-
-	/* Find fuse dax mapping at file offset inode. */
-	dmap = fuse_dax_interval_tree_iter_first(&fi->dmap_tree, dmap_start,
-							dmap_start);
-
-	/* Range already got cleaned up by somebody else */
-	if (!dmap)
-		return 0;
 
-	ret = filemap_fdatawrite_range(inode->i_mapping, dmap->start, dmap->end);
+	ret = filemap_fdatawrite_range(inode->i_mapping, dmap->start,
+					dmap->end);
 	if (ret) {
 		printk("filemap_fdatawrite_range() failed. err=%d start=0x%llx,"
 			" end=0x%llx\n", ret, dmap->start, dmap->end);
@@ -3743,6 +3740,99 @@ int fuse_dax_free_one_mapping_locked(struct fuse_conn *fc, struct inode *inode,
 	/* Remove dax mapping from inode interval tree now */
 	fuse_dax_interval_tree_remove(dmap, &fi->dmap_tree);
 	fi->nr_dmaps--;
+	return 0;
+}
+
+/* First first mapping in the tree and free it. */
+struct fuse_dax_mapping *fuse_dax_reclaim_first_mapping_locked(
+				struct fuse_conn *fc, struct inode *inode)
+{
+	struct fuse_inode *fi = get_fuse_inode(inode);
+	struct fuse_dax_mapping *dmap;
+	int ret;
+
+	/* Find fuse dax mapping at file offset inode. */
+	dmap = fuse_dax_interval_tree_iter_first(&fi->dmap_tree, 0, -1);
+	if (!dmap)
+		return NULL;
+
+	ret = fuse_dax_reclaim_dmap_locked(fc, inode, dmap);
+	if (ret < 0)
+		return ERR_PTR(ret);
+
+	/* Clean up dmap. Do not add back to free list */
+	spin_lock(&fc->lock);
+	list_del_init(&dmap->busy_list);
+	WARN_ON(fc->nr_busy_ranges == 0);
+	fc->nr_busy_ranges--;
+	dmap->inode = NULL;
+	dmap->start = dmap->end = 0;
+	spin_unlock(&fc->lock);
+
+	pr_debug("fuse: reclaimed memory range window_offset=0x%llx,"
+				" length=0x%llx\n", dmap->window_offset,
+				dmap->length);
+	return dmap;
+}
+
+/*
+ * First first mapping in the tree and free it and return it. Do not add
+ * it back to free pool.
+ *
+ * This is called with inode lock held.
+ */
+struct fuse_dax_mapping *fuse_dax_reclaim_first_mapping(struct fuse_conn *fc,
+					struct inode *inode)
+{
+	struct fuse_inode *fi = get_fuse_inode(inode);
+	struct fuse_dax_mapping *dmap;
+
+	down_write(&fi->i_mmap_sem);
+	down_write(&fi->i_dmap_sem);
+	dmap = fuse_dax_reclaim_first_mapping_locked(fc, inode);
+	up_write(&fi->i_dmap_sem);
+	up_write(&fi->i_mmap_sem);
+	return dmap;
+}
+
+static struct fuse_dax_mapping *alloc_dax_mapping_reclaim(struct fuse_conn *fc,
+					struct inode *inode)
+{
+	struct fuse_dax_mapping *dmap;
+	struct fuse_inode *fi = get_fuse_inode(inode);
+
+	dmap = alloc_dax_mapping(fc);
+	if (dmap)
+		return dmap;
+
+	/* There are no mappings which can be reclaimed */
+	if (!fi->nr_dmaps)
+		return NULL;
+
+	/* Try reclaim a fuse dax memory range */
+	return fuse_dax_reclaim_first_mapping(fc, inode);
+}
+
+int fuse_dax_free_one_mapping_locked(struct fuse_conn *fc, struct inode *inode,
+				u64 dmap_start)
+{
+	int ret;
+	struct fuse_inode *fi = get_fuse_inode(inode);
+	struct fuse_dax_mapping *dmap;
+
+	WARN_ON(!inode_is_locked(inode));
+
+	/* Find fuse dax mapping at file offset inode. */
+	dmap = fuse_dax_interval_tree_iter_first(&fi->dmap_tree, dmap_start,
+							dmap_start);
+
+	/* Range already got cleaned up by somebody else */
+	if (!dmap)
+		return 0;
+
+	ret = fuse_dax_reclaim_dmap_locked(fc, inode, dmap);
+	if (ret < 0)
+		return ret;
 
 	/* Cleanup dmap entry and add back to free list */
 	spin_lock(&fc->lock);
@@ -3757,7 +3847,6 @@ int fuse_dax_free_one_mapping_locked(struct fuse_conn *fc, struct inode *inode,
 	pr_debug("fuse: freed memory range window_offset=0x%llx,"
 				" length=0x%llx\n", dmap->window_offset,
 				dmap->length);
-
 	return ret;
 }
 
-- 
2.13.6

