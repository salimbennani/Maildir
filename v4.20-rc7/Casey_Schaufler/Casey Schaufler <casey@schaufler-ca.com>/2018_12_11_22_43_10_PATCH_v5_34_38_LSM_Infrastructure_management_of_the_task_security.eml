Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 12 Dec 2018 08:57:38 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 9181D580380;
	Tue, 11 Dec 2018 14:47:17 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 11 Dec 2018 14:47:17 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A29leJRWL0yKwQ597h1DO/3kW94DV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhGDvqdThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxkTx3nhz?=
 =?us-ascii?q?0HNz4+92Hbk9V8gb5VrR+guhBz2pLYbJyIP/Z6YK/RYdYWSGxcVchTSiNBGJux?=
 =?us-ascii?q?YYsRAeQcM+hWrI7zqFkArRulHQmhBvjixiNUinLswaE3yfgtHR3A0Qc9H9wOqn?=
 =?us-ascii?q?PUrNDtOaoMS++117fHzDXeZP1LxTj96JLHcg0vofGIQ71wa9faxE4zGAzflVWf?=
 =?us-ascii?q?t4zkMiiO1usRs2iU9fdgVeyri2E5sQF9uySgyd02hobVgYIVz0nJ+CNky4g2Pd?=
 =?us-ascii?q?21UFB3bcKgHZdKqi2XOZV6Ttk/T2xrpCo20LwLtJyjcCULypkr3QPTZv2DfoSS?=
 =?us-ascii?q?4x/uVPydLSlmiH9qfr+0mgy8/lK6yuLmU8m5yFZKoTRBktnLrn0NyRPT5dadSv?=
 =?us-ascii?q?dn/UeuxyyP1wbN5eFAO0w0krDbK5E5zr4xkJocr1jDEzfolEnqiKKabFgo9+a2?=
 =?us-ascii?q?5+j9f7nrpYOQO5V1hwz8Kqgun9awAeU8MggARWib/uG82aXn/U34RrVKk/I3nr?=
 =?us-ascii?q?DasJ/EP8QboLC2AwtM3oYk5Re/CSmp0M4DkHkZI1JKZgiHg5LqO17QOvD4C+mw?=
 =?us-ascii?q?g1C2nDds3fDGMaXtAo/RIXjbjLfhYbF95lZYyAoyztBQ+YhYC74cIP/oXk/xtd?=
 =?us-ascii?q?rYDgI2MgCuwubnDsl92Z0aWW6VHqCZN6bSu0eS5u0zO+mMeJMVuDHlJvgl/fHu?=
 =?us-ascii?q?jGM5lkUafaWz3ZsXdWq3HvJpI0iCZXrsg9EBEXoFvwYkTezqjkGCXiBXZ3qoQ6?=
 =?us-ascii?q?084TQ7Apq8DYjfXoCtnKCB3CCjE51UYWBJFEqAEXTvd4WCXfcMbzmfIstgkjwC?=
 =?us-ascii?q?SLigRJUt1RCotA/m1bVnKvDY9TEftZLmzNJ1/fHclQku9TxoCMSQy3uCT3p0nm?=
 =?us-ascii?q?MPRD86xrp/rlZ/ylqY1ah4gvpYFcFc5v9TUwc6M4LcwPJ+C9zoRg3BedKJQk68?=
 =?us-ascii?q?Qtq6GTExUs4xw9gWbkZ+AdqiiArP3y6rA7APkbyLC4c58qbd33j3OsZ8xGzK1K?=
 =?us-ascii?q?gnj1k6XMRPMXeqibJ49wjWH4TJiVmWl762daQA2y7A7HqMwnCQvE5GSgJwUb/K?=
 =?us-ascii?q?XXYEZkTIq9T14UfCT7yrCbQjKQZBzc+CKq1Xatzml1lGRfHjOMjAbGK1gWu/GR?=
 =?us-ascii?q?GIxraUZorwZ2odxDndCFQDkw0L4HmJLxY+CTm7r2LeFjNuE0nvbF3q8eRlrHO7?=
 =?us-ascii?q?T0k0zxyFbkF71rq1/AIViuKYS/8Jwr0EvyIhoS1uHFmhx9LWF8aApw15caVAYN?=
 =?us-ascii?q?M95VBH1X7Ztw19JJCgM7puhlkEcwRzvkPu0Rp3B55EkcgrqnMq0QVzJbiZ0FNH?=
 =?us-ascii?q?azOXw5TwNqfLJWn1+RClc7TW1U3G0NaK5qcP7+w1pE/nvA63GUst7XVm38NO3H?=
 =?us-ascii?q?uB+5rFFgwSUZH2UkYp7BV6o7DaYi8g54Lbz3FsMK+0siPc1NItHucq1hGgf9JH?=
 =?us-ascii?q?OqOeCADyC9EaB9SpKOEym1mpcwgIM/xI+K81P8Opbf2G2KGwMeZknTKmi3lH4Y?=
 =?us-ascii?q?9n3kKN8Sp8VvDH35Ifz/6E2QuHUi/2jE29vcDvhYBEeTYSE3KlySjlGIFefLdy?=
 =?us-ascii?q?cpsMCWu0Jc242M9+h5/0V3FE7lGjA04J19GzeRqVaVzwxglQ1UURoXy6liq01T?=
 =?us-ascii?q?10kzc1rqWB2CzC2fjtdB0COmRTXmltkU/sIZSoj9AdREWpbwkpmAGl5Erg3Khb?=
 =?us-ascii?q?uaJ/InLXQUdJeSj2Mm5jXrGxtrqEf85A9pcovT9LX+S7ZFCQUqT9rAcC0yP/A2?=
 =?us-ascii?q?tewyg2dzOwtZXjnBx6i2WdIGxorHXDesFwxhbf5NrCSv5XxTcGQCh4iT/KBlmz?=
 =?us-ascii?q?JdWp/NOUl4vdveC6TW6uSppTcSzzx4OaqCS7/XFqAQG4n/2rmtzoCw863TX519?=
 =?us-ascii?q?lrUyXFtxL8Yojt16SnPuNrZEhoBFng68VkHoFyiJc/hJYV2XICnJWa4WIHkXvv?=
 =?us-ascii?q?MdVcwa/+b2ACRT8Rz97V/QjqwktjLn2SyoL9V3WdxNZhZtagbmMX3CI9895FCK?=
 =?us-ascii?q?OO4LNYmit1p0KyrRjNbvhlgjcd1fwu5WYfg+EIuwoi1D+RA74MEklDISzjiQ6I?=
 =?us-ascii?q?4Mugo6VNa2aiaryw1Et4ndC8A7COuABcWHDlepg8GS989NlwMFXJ0Hfr8IHrZM?=
 =?us-ascii?q?HQbc4Pth2TixrAk+9VKJcrmvsLnyVnP3/9vWY+y+46lhFu2ZC6vI6aK2Ri5q65?=
 =?us-ascii?q?AxhYNiHraMMX4D3ikaFensOO1YC1ApphAikLXIfvTf+wCz0dr/PnNwKTEDEmrn?=
 =?us-ascii?q?ebBKHSHQue6EdgsnLOHIqnN3CRJHkF09piQAORK1BYgAARRD86hII2Fhi2xMz9?=
 =?us-ascii?q?d0d0/jIR6UT9qhRS0eJkLQX/Xn3cpAe1aTc0VZ6fIwBN7gxZ40fVMMqe7v98Hi?=
 =?us-ascii?q?1C/52hqhCNJXKfZwhSEW4JXUmEDUj5Pray/dnA7/SYBu2mIvrOZrWOtPVeV+qS?=
 =?us-ascii?q?ypKpyIdm5DGMNsOAPnR5C/0720xDXW12GsjDmjUPTTAXmDzJb8KBuBi8/Sh3pN?=
 =?us-ascii?q?il8Pv3QALv+ZePC7xKPNVv5R+2gKSDN+2RhCpjKjZYzJQMxXDWx7gFwV4SkDpj?=
 =?us-ascii?q?dz2sEbQGqC7MQ7jcmq5RDx4HdSxzMNFE4L473glIIcTbkM/61qZkjv4pDFdITU?=
 =?us-ascii?q?bumtyyaswQPW68NEnLBEKKNLmdIT3Lwsf3Yb6zSLFKjeVUsQGwtiifE0P5IjuD?=
 =?us-ascii?q?kDzpXQi1Me5QlCGbIABeuIalfxZxCGjjScjqZQGhPNBrjT0537s0i2jONW4dNz?=
 =?us-ascii?q?h8bkxMoqeR7SNenvVwBWhB4mB5IumDniaT9/PYJYoOsft3HiR0kPpX4XQgxLtT?=
 =?us-ascii?q?6SFERfp1lzPTr95uuV6mlOaPxyFjUBpPrDZLmY2KsV9jOaXf6plPR3LE8AgR4m?=
 =?us-ascii?q?WXDhRZ7+diX9/qvLpKy8Pnkqv2JTYE9MjbuYMYBs7JOIecPXE8Kxv1CXvRCwcY?=
 =?us-ascii?q?STODK27SnQpeneuU+3nTqYI17tDomZwTWvpYWUYzG/cyFEtoBpoBLY1xUzdilq?=
 =?us-ascii?q?SUyIYT6H6/qgTBbNtVs4qBVf+IB/jrbjGDgupqfRwNlJjxNokCfrbw20V/ZF13?=
 =?us-ascii?q?hsyeEEPLUMFluSZhZxI6pEhXtXN3CGY03hS2OUuW/HYPGKvszVYNgQxkbLF3rD?=
 =?us-ascii?q?o=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AZAADlPRBch0O0hNFlHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGDayeMFF+LM4IhaIFllHGBcywTAYcuIjQJDQEDAQEBAQEBAgETAQEBCA0?=
 =?us-ascii?q?JCCkjDII2DIJ7AwMBAiQZAQE3AQUJAQFQA0ISBxIFgxyBagMVBZpyih2BbDOCd?=
 =?us-ascii?q?gEBBYEAhAgDgh4IF4dlgyOBHBeBf4ERgl0HggKJCIkZGgqHAVGPbgmCJoQjin0?=
 =?us-ascii?q?jYIk0hyyJI5FWgg5NIxU7gmyCGwwXg0qKdB8ygQQBAQE7iikBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AZAADlPRBch0O0hNFlHQEBBQEHBQGBUQgBCwGDayeMFF+?=
 =?us-ascii?q?LM4IhaIFllHGBcywTAYcuIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2DIJ7A?=
 =?us-ascii?q?wMBAiQZAQE3AQUJAQFQA0ISBxIFgxyBagMVBZpyih2BbDOCdgEBBYEAhAgDgh4?=
 =?us-ascii?q?IF4dlgyOBHBeBf4ERgl0HggKJCIkZGgqHAVGPbgmCJoQjin0jYIk0hyyJI5FWg?=
 =?us-ascii?q?g5NIxU7gmyCGwwXg0qKdB8ygQQBAQE7iikBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,343,1539673200"; 
   d="scan'208";a="66384393"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 11 Dec 2018 14:47:15 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726724AbeLKWoK (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 11 Dec 2018 17:44:10 -0500
Received: from sonic311-28.consmr.mail.ne1.yahoo.com ([66.163.188.209]:43336
        "EHLO sonic311-28.consmr.mail.ne1.yahoo.com" rhost-flags-OK-OK-OK-OK)
        by vger.kernel.org with ESMTP id S1726694AbeLKWoI (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 11 Dec 2018 17:44:08 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=yahoo.com; s=s2048; t=1544568246; bh=rtgbAY8v8bf2tMWocN4/v1BHGqtzr15pWf8snPHIIn8=; h=From:To:Cc:Subject:Date:In-Reply-To:References:From:Subject; b=MTSSMZQiJGfO2lz3OCDx3mwrFNR7BZFxhpvp6he8a2kehNR4TfXnSpYlv/i0IPXDYhA6A6lD6u1e0lRak6VV+WfKi8g4IWdw+Kemt4CKhE1Cm/T46QClFGDPIlJ56IFYN1VLXTsthzhGh7Y6DQvL2aEj0aOf/n0zJ/zUW3BtwN/DSFlL2O7+wnGGQNjyjcJYtGsiehyjPdoa9QEPk9+Nt/RETB1UNkEeZ57z3j1yS8G1ZrudTHbEV8nHh2OuA3jjgBkBlJ3IaXiS9TlM8xNFASsEJojkSMmA8EAw+1kjMyXpuVqVQhXAf77QrYCEjNkusJtjec58aWutY20/FZuahQ==
X-YMail-OSG: ODv9pKMVM1k5bhJQ17ZasrABywSFB0XI0VLo3BkVWEgONXM1uTRUaQOcwoYL1ys
 WYGcMXnme3BwY41bs7wJUl1gNL3QzRZqR9WhX0sMsUSFwrSnXqOJWq2sWfzvaKHYf2j93xNOpIJJ
 0aVPPtq1fxDRII_KMAHNELdah52lWV2kWJgx.fwH2i.DT0aNaOi1YbG2xEGZOBgKzxJ..EwAXnFw
 qciDWbFR.w6uvp3uKv.Q6QM5p6lsk6h0yj7NLJbObqpmU4AW2WPZzqQDBcBrcHP0T_HGwzivPZh7
 _jnIDELvU70v5R8S1sPfzRLKnUlXjHe2p6XOoGfIwVTsE6UDuHjSGpCOZnLLzAbcybzi_N3fYYzJ
 y.WWloMNNkruxfMCAHuTtQsnj5cCN3XbYGkIwd8VhOjpZXXJdnLwZytDXIteroVEBoahRelyhbaV
 M6d4l4XYQ2wJiL0TSSFtnfAoDDRDxfjTugnwmUM46nJ23c9VplZZQz4DleuSwMQyHEd7b6FOv_WL
 UKSa812SJE50ualiS_YlZmf3_Y93NKWS95J2dXwMjWAIYRUPQNqS7pOs8ijDl_hyBbFy0e0vTddW
 7N_N0Lzx9c10d.P71wbuLl_HCYJhnjgU0mQz_Wite8y95uLktqepGOGi48YZUDN57l9klyCgP0WD
 CpmOHWlRvh6mKRXQ7USwWyITUHUwA4TMViya2.Esepi07cPnidmdVap0os_wtUj5rjdGUYMhHU2N
 y3qyy7F12xOpLwW5TOlIAhCEBxBk4IxVAwz9fvahAm7Jt5oEH0hlgsMHkvE4beB395A.KWtQNM0B
 cTGty3ipS.Qe2w3ZUW35Uuv7WtIS_bqRNfMLYAWU7JwZ.0EDvfWMlheM62fQ6hdUYkI2F3ohW30V
 fdxf.QTWuQsQF6VGwLzj_BBiajmMiJ7nawDwVWlqNfVjaeopr_Y9c3cjx5VXI8tCmoMHaF1hs4AU
 gRpsloZWwlgCZlpfWy9fn00U6OQpia1nrUjUxo8LIhsgRmfwiTxJi0.dQEk1QldET165f6jL4FcD
 IY9DwaOxwGMlTySXvN1uKjR9iaGSiiZVxIpSwO1tUgXBfcZlw3IT_kazF_bx2_PJ8SIcadSzAGLh
 3YHS86.OcyGpWXqRVRQmfcmib6X.MmKElvLj6rNxIpR0-
Received: from sonic.gate.mail.ne1.yahoo.com by sonic311.consmr.mail.ne1.yahoo.com with HTTP; Tue, 11 Dec 2018 22:44:06 +0000
Received: from c-67-169-65-224.hsd1.ca.comcast.net (EHLO localhost.localdomain) ([67.169.65.224])
          by smtp411.mail.ne1.yahoo.com (Oath Hermes SMTP Server) with ESMTPA ID 6f4a30c5671782919fad3da3c826f035;
          Tue, 11 Dec 2018 22:44:02 +0000 (UTC)
From: Casey Schaufler <casey@schaufler-ca.com>
To: jmorris@namei.org, linux-security-module@vger.kernel.org,
        linux-kernel@vger.kernel.org, selinux@vger.kernel.org
Cc: john.johansen@canonical.com, keescook@chromium.org,
        penguin-kernel@i-love.sakura.ne.jp, paul@paul-moore.com,
        linux-fsdevel@vger.kernel.org, sds@tycho.nsa.gov,
        adobriyan@gmail.com, mic@digikod.net, s.mesoraca16@gmail.com,
        casey@schaufler-ca.com
Subject: [PATCH v5 34/38] LSM: Infrastructure management of the task security
Date: Tue, 11 Dec 2018 14:43:10 -0800
Message-Id: <20181211224314.22412-35-casey@schaufler-ca.com>
X-Mailer: git-send-email 2.17.0
In-Reply-To: <20181211224314.22412-1-casey@schaufler-ca.com>
References: <20181211224314.22412-1-casey@schaufler-ca.com>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Move management of the task_struct->security blob out
of the individual security modules and into the security
infrastructure. Instead of allocating the blobs from within
the modules the modules tell the infrastructure how much
space is required, and the space is allocated there.
The only user of this blob is AppArmor. The AppArmor use
is abstracted to avoid future conflict.

Signed-off-by: Casey Schaufler <casey@schaufler-ca.com>
Reviewed-by: Kees Cook <keescook@chromium.org>
[kees: adjusted for ordered init series]
Signed-off-by: Kees Cook <keescook@chromium.org>
---
 include/linux/lsm_hooks.h        |  2 ++
 security/apparmor/include/task.h | 18 +++-----------
 security/apparmor/lsm.c          | 15 +++--------
 security/security.c              | 54 +++++++++++++++++++++++++++++++++++++++-
 4 files changed, 62 insertions(+), 27 deletions(-)

diff --git a/include/linux/lsm_hooks.h b/include/linux/lsm_hooks.h
index 65440005ec92..243c7c6e181d 100644
--- a/include/linux/lsm_hooks.h
+++ b/include/linux/lsm_hooks.h
@@ -2031,6 +2031,7 @@ struct lsm_blob_sizes {
 	int	lbs_cred;
 	int	lbs_file;
 	int	lbs_inode;
+	int	lbs_task;
 };
 
 /*
@@ -2106,6 +2107,7 @@ extern int lsm_inode_alloc(struct inode *inode);
 
 #ifdef CONFIG_SECURITY
 void __init lsm_early_cred(struct cred *cred);
+void __init lsm_early_task(struct task_struct *task);
 #endif
 
 #endif /* ! __LINUX_LSM_HOOKS_H */
diff --git a/security/apparmor/include/task.h b/security/apparmor/include/task.h
index 55edaa1d83f8..039c1e60887a 100644
--- a/security/apparmor/include/task.h
+++ b/security/apparmor/include/task.h
@@ -14,7 +14,10 @@
 #ifndef __AA_TASK_H
 #define __AA_TASK_H
 
-#define task_ctx(X) ((X)->security)
+static inline struct aa_task_ctx *task_ctx(struct task_struct *task)
+{
+	return task->security;
+}
 
 /*
  * struct aa_task_ctx - information for current task label change
@@ -36,17 +39,6 @@ int aa_set_current_hat(struct aa_label *label, u64 token);
 int aa_restore_previous_label(u64 cookie);
 struct aa_label *aa_get_task_label(struct task_struct *task);
 
-/**
- * aa_alloc_task_ctx - allocate a new task_ctx
- * @flags: gfp flags for allocation
- *
- * Returns: allocated buffer or NULL on failure
- */
-static inline struct aa_task_ctx *aa_alloc_task_ctx(gfp_t flags)
-{
-	return kzalloc(sizeof(struct aa_task_ctx), flags);
-}
-
 /**
  * aa_free_task_ctx - free a task_ctx
  * @ctx: task_ctx to free (MAYBE NULL)
@@ -57,8 +49,6 @@ static inline void aa_free_task_ctx(struct aa_task_ctx *ctx)
 		aa_put_label(ctx->nnp);
 		aa_put_label(ctx->previous);
 		aa_put_label(ctx->onexec);
-
-		kzfree(ctx);
 	}
 }
 
diff --git a/security/apparmor/lsm.c b/security/apparmor/lsm.c
index 3ae8c902d740..83dc23f33a29 100644
--- a/security/apparmor/lsm.c
+++ b/security/apparmor/lsm.c
@@ -93,19 +93,14 @@ static void apparmor_task_free(struct task_struct *task)
 {
 
 	aa_free_task_ctx(task_ctx(task));
-	task_ctx(task) = NULL;
 }
 
 static int apparmor_task_alloc(struct task_struct *task,
 			       unsigned long clone_flags)
 {
-	struct aa_task_ctx *new = aa_alloc_task_ctx(GFP_KERNEL);
-
-	if (!new)
-		return -ENOMEM;
+	struct aa_task_ctx *new = task_ctx(task);
 
 	aa_dup_task_ctx(new, task_ctx(current));
-	task_ctx(task) = new;
 
 	return 0;
 }
@@ -1156,6 +1151,7 @@ static int apparmor_inet_conn_request(struct sock *sk, struct sk_buff *skb,
 struct lsm_blob_sizes apparmor_blob_sizes __lsm_ro_after_init = {
 	.lbs_cred = sizeof(struct aa_task_ctx *),
 	.lbs_file = sizeof(struct aa_file_ctx),
+	.lbs_task = sizeof(struct aa_task_ctx),
 };
 
 static struct security_hook_list apparmor_hooks[] __lsm_ro_after_init = {
@@ -1486,15 +1482,10 @@ static int param_set_mode(const char *val, const struct kernel_param *kp)
 static int __init set_init_ctx(void)
 {
 	struct cred *cred = (struct cred *)current->real_cred;
-	struct aa_task_ctx *ctx;
-
-	ctx = aa_alloc_task_ctx(GFP_KERNEL);
-	if (!ctx)
-		return -ENOMEM;
 
 	lsm_early_cred(cred);
+	lsm_early_task(current);
 	set_cred_label(cred, aa_get_label(ns_unconfined(root_ns)));
-	task_ctx(current) = ctx;
 
 	return 0;
 }
diff --git a/security/security.c b/security/security.c
index 0cc48072eb3b..d3d3963d7914 100644
--- a/security/security.c
+++ b/security/security.c
@@ -169,6 +169,7 @@ static void __init lsm_set_blob_sizes(struct lsm_blob_sizes *needed)
 	if (needed->lbs_inode && blob_sizes.lbs_inode == 0)
 		blob_sizes.lbs_inode = sizeof(struct rcu_head);
 	lsm_set_blob_size(&needed->lbs_inode, &blob_sizes.lbs_inode);
+	lsm_set_blob_size(&needed->lbs_task, &blob_sizes.lbs_task);
 }
 
 /* Prepare LSM for initialization. */
@@ -292,6 +293,7 @@ static void __init ordered_lsm_init(void)
 	init_debug("cred blob size     = %d\n", blob_sizes.lbs_cred);
 	init_debug("file blob size     = %d\n", blob_sizes.lbs_file);
 	init_debug("inode blob size    = %d\n", blob_sizes.lbs_inode);
+	init_debug("task blob size     = %d\n", blob_sizes.lbs_task);
 
 	/*
 	 * Create any kmem_caches needed for blobs
@@ -515,6 +517,46 @@ int lsm_inode_alloc(struct inode *inode)
 	return 0;
 }
 
+/**
+ * lsm_task_alloc - allocate a composite task blob
+ * @task: the task that needs a blob
+ *
+ * Allocate the task blob for all the modules
+ *
+ * Returns 0, or -ENOMEM if memory can't be allocated.
+ */
+int lsm_task_alloc(struct task_struct *task)
+{
+	if (blob_sizes.lbs_task == 0) {
+		task->security = NULL;
+		return 0;
+	}
+
+	task->security = kzalloc(blob_sizes.lbs_task, GFP_KERNEL);
+	if (task->security == NULL)
+		return -ENOMEM;
+	return 0;
+}
+
+/**
+ * lsm_early_task - during initialization allocate a composite task blob
+ * @task: the task that needs a blob
+ *
+ * Allocate the task blob for all the modules if it's not already there
+ */
+void __init lsm_early_task(struct task_struct *task)
+{
+	int rc;
+
+	if (task == NULL)
+		panic("%s: task cred.\n", __func__);
+	if (task->security != NULL)
+		return;
+	rc = lsm_task_alloc(task);
+	if (rc)
+		panic("%s: Early task alloc failed.\n", __func__);
+}
+
 /*
  * Hook list operation macros.
  *
@@ -1346,12 +1388,22 @@ int security_file_open(struct file *file)
 
 int security_task_alloc(struct task_struct *task, unsigned long clone_flags)
 {
-	return call_int_hook(task_alloc, 0, task, clone_flags);
+	int rc = lsm_task_alloc(task);
+
+	if (rc)
+		return rc;
+	rc = call_int_hook(task_alloc, 0, task, clone_flags);
+	if (unlikely(rc))
+		security_task_free(task);
+	return rc;
 }
 
 void security_task_free(struct task_struct *task)
 {
 	call_void_hook(task_free, task);
+
+	kfree(task->security);
+	task->security = NULL;
 }
 
 int security_cred_alloc_blank(struct cred *cred, gfp_t gfp)
-- 
2.14.5

