Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  14 Dec 2018 20:26:17 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 632305803DC;
	Fri, 14 Dec 2018 01:38:56 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 14 Dec 2018 01:38:55 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ALKzZ1hF2KY0XRWdpVhvc7J1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75os2ybnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJWSJPAp2y?=
 =?us-ascii?q?YZYMAeoPMulXs5TyqFkAohulHQmhBvjiyiNUinLswaE2z/4sHR/A0Qc9H9wOqn?=
 =?us-ascii?q?PUrNDtOakcS++1yqjIwivHb/hL1jjy9pTIcgw/rvGWQLl9dtfexlMpFwPEkFqQ?=
 =?us-ascii?q?rZfoPz2b1uUDt2ib6/BsWv6vi2M+rQx6vzahxsApiobTh4IVzEjJ9St3wIc7Id?=
 =?us-ascii?q?24TFR3bsKkEJZWqiqUNJN2T9s8T210vCs20KAKtJClcCQQ1ZgqxALTZ+aGfoWK?=
 =?us-ascii?q?+h7vSvyeLStmiH9gZb6yhhW//E2gx+D9UsS7zlNHojZAn9TCq3wByx3e582aRf?=
 =?us-ascii?q?Z88Eqs2zOC2B3R5+1aL005kLTUJp0hz7MwkJcYrF7NETXsmErsia+bbkUk9fas?=
 =?us-ascii?q?6+TgerjmuJCcOJFuig3kMaQhhNa/AeImPQgKRWSb/v681LL78U34RrVFkOE2n7?=
 =?us-ascii?q?HHvJzGIckXvLO1DgFL3oo59hqyDCuq3M4ZkHQFNF5FfQiIj4ntO1HAOvD4CvK/?=
 =?us-ascii?q?jkyokDdqwfDGI7LgDozOLnfdirfhe6hy60pFxAo0w9Ff4YxbCqsaLfLtVU/+qs?=
 =?us-ascii?q?bYAgU6MwOq2ebnDsty1ocEVWKIGK+ZP7vesUWU6eI3P+mMeIgVtS75K/gk5P7h?=
 =?us-ascii?q?k2U1mFAAfaSy2ZsXaXa4HulpIkmDYHrshMsBHnkOvgYkUOPqj1iCWyZJZ3muR6?=
 =?us-ascii?q?I8+i07CIW+AIfDXI+tgaCB0z28HpFMZmBGF0qDEXHnd4ifX/cMaSSSItJukzAe?=
 =?us-ascii?q?VLihTZMh2g+qtAPg17VnKe/U8DUCtZ3/zNh1+/HTlRYq+Dx2CMSSzXuBT2Jznm?=
 =?us-ascii?q?MOQT8227tyoUh8yleFzKh5jOZUFd1V5/NVTAg6MYTQwPB9C9D3QgjBZMuGSE66?=
 =?us-ascii?q?QtW6BjE8Vsg+w8QOY0Z6GNWulArD0DCoA7IOk7yLBZo08r/T3nTrJsZ9zWrG27?=
 =?us-ascii?q?clj1U8XsRPMmimjLZl9wfPH47Jj1mZl6GyeKQfxiHN8n2PzW6PvE5CVg5wXr7I?=
 =?us-ascii?q?XXQeZkvQsNT46VnOT76oCbQ7LARBzdSOJbdNat3slV9GXuvsOMzCY2KtnGe9HQ?=
 =?us-ascii?q?uHyamSbIX0YWkd3D/SCE4fkw8N+3aKMgw+BiSko2LaFzFuEVPvY0Xx8ehxsn+7?=
 =?us-ascii?q?T0k0zx2UYE1lzba65hkVhfmEQfMJwr0EoDshqylzHFulwt3ZEcSAqBR7cKVce9?=
 =?us-ascii?q?w95kxH2nzftwFmOpygLqZihkMRcghtvkPu0Ql3BZtEkcQwsHwqyw9yI7qC0Fxd?=
 =?us-ascii?q?bzOYwYzwOrrPJ2nu/RCvbqnW2k3e0NeW4KsP9O40q1L5vAGtF0oi9Xpn3sJR03?=
 =?us-ascii?q?ud4JXKEQUTXYjwUkYx6xh1ubXabjMh6IPT0H1mKbO0vSPa29I1GOslzQ6tcM1b?=
 =?us-ascii?q?MKyaGw79Dc0bC9K1J+w3hlemdBQEPONV9K4qJM6mc/qG2Ki2POdvhj6mjGJH4J?=
 =?us-ascii?q?xj3UKI7SZzVunI35MdyfGCwgSHTyv8jEumss3vmYFEeCseEXalxSnlBI5efKty?=
 =?us-ascii?q?fYkQBGeqIs23wMh+hpH3V35Z8l6jG00J2MuzdRWOaFz92BVa1V4Lrny/hSu40z?=
 =?us-ascii?q?t0nikzrqqewCPB2f7iewcAOmJRQmltk03sIYmtg98GRkeoaxUmmwW/5Ub9wahW?=
 =?us-ascii?q?v6B/L2jVQUdVcCn6NWBiUq2strWcZ85D8o8nsSJSUO6ke1CVVqb9owcG0yPkB2?=
 =?us-ascii?q?ZfxDE7eyuqu5njhBx6lWSdIW13rHrYf8Fw2Bje6MbdRf5XwjoJWi14hSPLCVi7?=
 =?us-ascii?q?Otmj5c+UmIvbsuCiS2KhUYVecSvxwoOatyu75mpqDQekn/+pmd3nEgk60Snl2N?=
 =?us-ascii?q?lsTijIqBf8Yo/216W1K+5nf09oBEPi5Mp+AI1xjowwhJQI03gAmpqV5WYHkXv0?=
 =?us-ascii?q?MdhD2aPxdn0NSSQJw97U5gjow0ljLnOPx4LkWXSR2MphZ9+mYmwI3iIx9dxFCK?=
 =?us-ascii?q?CR7LZchyt6vkK4rR7NYfh6hjodyuEh6H8Aj+EJpQoi1COdAr8JEElcPCzskQmI?=
 =?us-ascii?q?7t+koKVWYmavbaa/1E5kkd+9C7GCpxlWWGzldZc6AS9w8sJ/PUrJ0H3y6YHrYs?=
 =?us-ascii?q?PcbNwNuR2PjxfPkfJVJ4kvmfoQiipqImb9vXwjy+4mgh1ix5C6vI6bK2pz+KK1?=
 =?us-ascii?q?GAJXNjrwZ8kL4DHikb5entqK34CoBphhBjILXJ7yQfOpCj0Ss+nnNx2VED09sX?=
 =?us-ascii?q?qbHbvfHQmC6EZptX7PEparN22JK3kd19ltWB6dJElHigAOQDo6hoI5FhytxMH5?=
 =?us-ascii?q?a0h2/DcR5lrlqhdWzuJoKgLyUmPepAeudzc1R4KTLBtQ7gFe+UjVNdaS4f50Hy?=
 =?us-ascii?q?Fd5pehthCCKnSHZwRUCmEEQk6ECErmPraw/tnM6fSYCvC9L/vTYrWOtOpeWO2T?=
 =?us-ascii?q?xZ+01otm/jCMNtiAP3V4Dv073FZDUm59G8jDhzoPTCkXnTrXb8GHvBe85jF3rs?=
 =?us-ascii?q?en/fXrXwLv+JKPC6ZIPtVp4Ry2mqCDN+ifhCtiLTZY15UMxWLHybQF3V4SjT1u?=
 =?us-ascii?q?eCepEbgaqSHNS6fQkLdNDxEHcyNzKNdI76Uk0wlNJ8Hbi9D11r15jvIvCFdFT1?=
 =?us-ascii?q?vhms63aswQPmG9L0jKBEKKNLSAOD3KzNv7YaK6Sb1MkupUswe8tiqcE0/mJj6D?=
 =?us-ascii?q?jSXmVwizMeFQiyGWJAZRuJymfRZ3F2fiTMjqahm6MNJsiT02wLs0hm7FNGIGMD?=
 =?us-ascii?q?h8dV9NoaOU7S9Cnvp/HGlB5GJ/LeaYgyaZ8/XYKpEOvPt3AyR0kvhW72ggx7RJ?=
 =?us-ascii?q?7CFLWvp1lTDWrt5vpVGmj+aOxiBmUBpItjZEmoaLsV9+NqXe85lKQWzE8w4V7W?=
 =?us-ascii?q?WMFxQKoMNoC931tKBWz9jPlaTzJy9D8tLU58QcAcfUJdmDMHogNxrpBTHVABEE?=
 =?us-ascii?q?TT6tKWHQmUhdnOuO+X2Sq5hp4qTrzb4fV7NWHGQ8C/dSXkB0AdAPCI16UjMtjf?=
 =?us-ascii?q?iQi8tetlSkqxyEaMxcv53DHsyfHeniMn7NgbBCZhYM6b32MoAXcIb7jR8xImJm?=
 =?us-ascii?q?lZjHThKDFetGpTdsO0pt+B1A?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AiAAC7eRNch0O0hNFjGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBZQKBL4E5gQInmCaCDRSOL4kmgV8SAQEYAxABgUuFfCI4EgE?=
 =?us-ascii?q?DAQEBAQEBAgETAQEBCA0JCCkjDEIBEAGBYiQBgmIBAgMBAiQTBgEBNwEFCQEBC?=
 =?us-ascii?q?hgJJQMMBSABBQEiEwWDHAGCAAEEmlg8ih+BbDOCdgEBBYZEZwgSixCBHBeBf4E?=
 =?us-ascii?q?RgXCBIoQ7LoVziUSBdIQnhiqLBwoJgRaBEoRlg0CHAgsYYH1Nh0WHXiyKDI55B?=
 =?us-ascii?q?gIJBw8hgTyBdzMaCDCDJwmCEgwXEoMQinw/MoEFAQGFVoQ1DRcHgiABAQ?=
X-IPAS-Result: =?us-ascii?q?A0AiAAC7eRNch0O0hNFjGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BZQKBL4E5gQInmCaCDRSOL4kmgV8SAQEYAxABgUuFfCI4EgEDAQEBAQEBAgETA?=
 =?us-ascii?q?QEBCA0JCCkjDEIBEAGBYiQBgmIBAgMBAiQTBgEBNwEFCQEBChgJJQMMBSABBQE?=
 =?us-ascii?q?iEwWDHAGCAAEEmlg8ih+BbDOCdgEBBYZEZwgSixCBHBeBf4ERgXCBIoQ7LoVzi?=
 =?us-ascii?q?USBdIQnhiqLBwoJgRaBEoRlg0CHAgsYYH1Nh0WHXiyKDI55BgIJBw8hgTyBdzM?=
 =?us-ascii?q?aCDCDJwmCEgwXEoMQinw/MoEFAQGFVoQ1DRcHgiABAQ?=
X-IronPort-AV: E=Sophos;i="5.56,352,1539673200"; 
   d="scan'208";a="55173604"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 14 Dec 2018 01:38:54 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729271AbeLNJiv (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 14 Dec 2018 04:38:51 -0500
Received: from mail-ed1-f65.google.com ([209.85.208.65]:44821 "EHLO
        mail-ed1-f65.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726344AbeLNJiv (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 14 Dec 2018 04:38:51 -0500
Received: by mail-ed1-f65.google.com with SMTP id y56so4390250edd.11
        for <linux-kernel@vger.kernel.org>; Fri, 14 Dec 2018 01:38:49 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=ffwll.ch; s=google;
        h=sender:date:from:to:cc:subject:message-id:mail-followup-to
         :references:mime-version:content-disposition:in-reply-to:user-agent;
        bh=CRfi0KWLcGHZVVPGgayqxxr619k61nslHuAZq41+GDQ=;
        b=gJgAPxLFYKVJZvvuxWEJ+DfINtIKi8Py5za/iUIdKrEUnw+Vp1NHnj7tMAz9MOTwq2
         Phw0vJ53OuRhH3lkrufSy7K6oqOvi7iiIfVCQfrER0Om6NDh2Cxdjy3fYvrboQYQZ6CL
         1TqigX6cK7O4jtbOAkvryiHO6wvmTRTYx9QcA=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:sender:date:from:to:cc:subject:message-id
         :mail-followup-to:references:mime-version:content-disposition
         :in-reply-to:user-agent;
        bh=CRfi0KWLcGHZVVPGgayqxxr619k61nslHuAZq41+GDQ=;
        b=qqKRIbctAtbjMOCHTFDUhF7NodhOrlF8de5DpDVk1OdItp+9e3mMi6KVqdOZnIyxQo
         +AmcBiRVFwrLkViv3ypjgY8dP6jSLA5oS4383Q8NenFOuA6QY+OrA5pIVcBU6LJoV4ov
         K3YMhbg1PT3uke3y5pMhVRcHYVT0Q5T21CMlvrriXGbkAsgD3RcTbA0wCW+dwzLl7UAk
         PEeg0GuxQpyLhCpaNdbTUyIYosQqvrmzENP+h4E2b3ZCEadAlXWnElLLSS95cCyKp6El
         r99r5Comv1hmGzVVRxImVW7AyAltleT+DWh3e+jK+86NNPLXKqX2A74S37Hf1ys4O5dZ
         0PAw==
X-Gm-Message-State: AA+aEWZXw2nmwS43YDaFZtWi/iYM7WHOJY3MAgatoDV7L/vCs7AZUvHh
        631SEDlgk0hfMt9H8Cp7spKRhg==
X-Google-Smtp-Source: AFSGD/UH13i3Gsjs1kuKUsd1bG1prmsvTv9UFGrqpv3sf6rQQn4JRgba9TzemXalqVLkrrf3mhI1pg==
X-Received: by 2002:aa7:c248:: with SMTP id y8mr2341739edo.205.1544780329128;
        Fri, 14 Dec 2018 01:38:49 -0800 (PST)
Received: from phenom.ffwll.local ([2a02:168:569e:0:3106:d637:d723:e855])
        by smtp.gmail.com with ESMTPSA id n3-v6sm720259ejd.35.2018.12.14.01.38.47
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Fri, 14 Dec 2018 01:38:48 -0800 (PST)
Date: Fri, 14 Dec 2018 10:38:46 +0100
From: Daniel Vetter <daniel@ffwll.ch>
To: Lyude Paul <lyude@redhat.com>
Cc: dri-devel@lists.freedesktop.org, nouveau@lists.freedesktop.org,
        intel-gfx@lists.freedesktop.org, amd-gfx@lists.freedesktop.org,
        Daniel Vetter <daniel@ffwll.ch>,
        Dave Airlie <airlied@gmail.com>,
        Harry Wentland <harry.wentland@amd.com>,
        Jerry Zuo <Jerry.Zuo@amd.com>,
        Maarten Lankhorst <maarten.lankhorst@linux.intel.com>,
        Maxime Ripard <maxime.ripard@bootlin.com>,
        Sean Paul <sean@poorly.run>, David Airlie <airlied@linux.ie>,
        linux-kernel@vger.kernel.org
Subject: Re: [WIP PATCH 05/15] drm/dp_mst: Fix payload deallocation on
 hotplugs using malloc refs
Message-ID: <20181214093845.GP21184@phenom.ffwll.local>
Mail-Followup-To: Lyude Paul <lyude@redhat.com>,
        dri-devel@lists.freedesktop.org, nouveau@lists.freedesktop.org,
        intel-gfx@lists.freedesktop.org, amd-gfx@lists.freedesktop.org,
        Dave Airlie <airlied@gmail.com>,
        Harry Wentland <harry.wentland@amd.com>,
        Jerry Zuo <Jerry.Zuo@amd.com>,
        Maarten Lankhorst <maarten.lankhorst@linux.intel.com>,
        Maxime Ripard <maxime.ripard@bootlin.com>,
        Sean Paul <sean@poorly.run>, David Airlie <airlied@linux.ie>,
        linux-kernel@vger.kernel.org
References: <20181214012604.13746-1-lyude@redhat.com>
 <20181214012604.13746-6-lyude@redhat.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181214012604.13746-6-lyude@redhat.com>
X-Operating-System: Linux phenom 4.18.0-2-amd64 
User-Agent: Mutt/1.10.1 (2018-07-13)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Thu, Dec 13, 2018 at 08:25:34PM -0500, Lyude Paul wrote:
> Up until now, freeing payloads on remote MST hubs that just had ports
> removed has almost never worked because we've been relying on port
> validation in order to stop us from accessing ports that have already
> been freed from memory, but ports which need their payloads released due
> to being removed will never be a valid part of the topology after
> they've been removed.
> 
> Since we've introduced malloc refs, we can replace all of the validation
> logic in payload helpers which are used for deallocation with some
> well-placed malloc krefs. This ensures that regardless of whether or not
> the ports are still valid and in the topology, any port which has an
> allocated payload will remain allocated in memory until it's payloads
> have been removed - finally allowing us to actually release said
> payloads correctly.
> 
> Signed-off-by: Lyude Paul <lyude@redhat.com>

I think with this we can also remove the int return value (that everyone
ignored except for some debug output) from drm_dp_update_payload_part1/2.
Follow-up cleanup patch ofc.

This looks good.

Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
> ---
>  drivers/gpu/drm/drm_dp_mst_topology.c | 54 +++++++++++++++------------
>  1 file changed, 30 insertions(+), 24 deletions(-)
> 
> diff --git a/drivers/gpu/drm/drm_dp_mst_topology.c b/drivers/gpu/drm/drm_dp_mst_topology.c
> index ae9d019af9f2..93f08bfd2ab3 100644
> --- a/drivers/gpu/drm/drm_dp_mst_topology.c
> +++ b/drivers/gpu/drm/drm_dp_mst_topology.c
> @@ -1989,10 +1989,6 @@ static int drm_dp_payload_send_msg(struct drm_dp_mst_topology_mgr *mgr,
>  	u8 sinks[DRM_DP_MAX_SDP_STREAMS];
>  	int i;
>  
> -	port = drm_dp_mst_topology_get_port_validated(mgr, port);
> -	if (!port)
> -		return -EINVAL;
> -
>  	port_num = port->port_num;
>  	mstb = drm_dp_mst_topology_get_mstb_validated(mgr, port->parent);
>  	if (!mstb) {
> @@ -2000,10 +1996,8 @@ static int drm_dp_payload_send_msg(struct drm_dp_mst_topology_mgr *mgr,
>  							       port->parent,
>  							       &port_num);
>  
> -		if (!mstb) {
> -			drm_dp_mst_topology_put_port(port);
> +		if (!mstb)
>  			return -EINVAL;
> -		}
>  	}
>  
>  	txmsg = kzalloc(sizeof(*txmsg), GFP_KERNEL);
> @@ -2032,7 +2026,6 @@ static int drm_dp_payload_send_msg(struct drm_dp_mst_topology_mgr *mgr,
>  	kfree(txmsg);
>  fail_put:
>  	drm_dp_mst_topology_put_mstb(mstb);
> -	drm_dp_mst_topology_put_port(port);
>  	return ret;
>  }
>  
> @@ -2137,15 +2130,16 @@ static int drm_dp_destroy_payload_step2(struct drm_dp_mst_topology_mgr *mgr,
>   */
>  int drm_dp_update_payload_part1(struct drm_dp_mst_topology_mgr *mgr)
>  {
> -	int i, j;
> -	int cur_slots = 1;
>  	struct drm_dp_payload req_payload;
>  	struct drm_dp_mst_port *port;
> +	int i, j;
> +	int cur_slots = 1;
>  
>  	mutex_lock(&mgr->payload_lock);
>  	for (i = 0; i < mgr->max_payloads; i++) {
>  		struct drm_dp_vcpi *vcpi = mgr->proposed_vcpis[i];
>  		struct drm_dp_payload *payload = &mgr->payloads[i];
> +		bool put_port = false;
>  
>  		/* solve the current payloads - compare to the hw ones
>  		   - update the hw view */
> @@ -2153,12 +2147,20 @@ int drm_dp_update_payload_part1(struct drm_dp_mst_topology_mgr *mgr)
>  		if (vcpi) {
>  			port = container_of(vcpi, struct drm_dp_mst_port,
>  					    vcpi);
> -			port = drm_dp_mst_topology_get_port_validated(mgr,
> -								      port);
> -			if (!port) {
> -				mutex_unlock(&mgr->payload_lock);
> -				return -EINVAL;
> +
> +			/* Validated ports don't matter if we're releasing
> +			 * VCPI
> +			 */
> +			if (vcpi->num_slots) {
> +				port = drm_dp_mst_topology_get_port_validated(
> +				    mgr, port);
> +				if (!port) {
> +					mutex_unlock(&mgr->payload_lock);
> +					return -EINVAL;
> +				}
> +				put_port = true;
>  			}
> +
>  			req_payload.num_slots = vcpi->num_slots;
>  			req_payload.vcpi = vcpi->vcpi;
>  		} else {
> @@ -2190,7 +2192,7 @@ int drm_dp_update_payload_part1(struct drm_dp_mst_topology_mgr *mgr)
>  		}
>  		cur_slots += req_payload.num_slots;
>  
> -		if (port)
> +		if (put_port)
>  			drm_dp_mst_topology_put_port(port);
>  	}
>  
> @@ -3005,6 +3007,8 @@ bool drm_dp_mst_allocate_vcpi(struct drm_dp_mst_topology_mgr *mgr,
>  	DRM_DEBUG_KMS("initing vcpi for pbn=%d slots=%d\n",
>  		      pbn, port->vcpi.num_slots);
>  
> +	/* Keep port allocated until it's payload has been removed */
> +	drm_dp_mst_get_port_malloc(port);
>  	drm_dp_mst_topology_put_port(port);
>  	return true;
>  out:
> @@ -3034,11 +3038,12 @@ EXPORT_SYMBOL(drm_dp_mst_get_vcpi_slots);
>   */
>  void drm_dp_mst_reset_vcpi_slots(struct drm_dp_mst_topology_mgr *mgr, struct drm_dp_mst_port *port)
>  {
> -	port = drm_dp_mst_topology_get_port_validated(mgr, port);
> -	if (!port)
> -		return;
> +	/*
> +	 * A port with VCPI will remain allocated until it's VCPI is
> +	 * released, no verified ref needed
> +	 */
> +
>  	port->vcpi.num_slots = 0;
> -	drm_dp_mst_topology_put_port(port);
>  }
>  EXPORT_SYMBOL(drm_dp_mst_reset_vcpi_slots);
>  
> @@ -3050,16 +3055,17 @@ EXPORT_SYMBOL(drm_dp_mst_reset_vcpi_slots);
>  void drm_dp_mst_deallocate_vcpi(struct drm_dp_mst_topology_mgr *mgr,
>  				struct drm_dp_mst_port *port)
>  {
> -	port = drm_dp_mst_topology_get_port_validated(mgr, port);
> -	if (!port)
> -		return;
> +	/*
> +	 * A port with VCPI will remain allocated until it's VCPI is
> +	 * released, no verified ref needed
> +	 */
>  
>  	drm_dp_mst_put_payload_id(mgr, port->vcpi.vcpi);
>  	port->vcpi.num_slots = 0;
>  	port->vcpi.pbn = 0;
>  	port->vcpi.aligned_pbn = 0;
>  	port->vcpi.vcpi = 0;
> -	drm_dp_mst_topology_put_port(port);
> +	drm_dp_mst_put_port_malloc(port);
>  }
>  EXPORT_SYMBOL(drm_dp_mst_deallocate_vcpi);
>  
> -- 
> 2.19.2
> 

-- 
Daniel Vetter
Software Engineer, Intel Corporation
http://blog.ffwll.ch
