Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:21:14 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id B17AD580213;
	Fri, 30 Nov 2018 09:56:52 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 30 Nov 2018 09:56:52 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AY3YT+BWo2tdHonMA7xPr6NAKHOTV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhGOvadThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGoOy?=
 =?us-ascii?q?YZUSAeQPPuhXrYf9qFQBoxSiHgmsHOHixyRUhn/vx6A2z/gtHR3E0QEmAtkAsG?=
 =?us-ascii?q?7UrNLwNKoKVe660rPIzTPdYPNUxDz/6IvIcgo7rv6XQ71/bdfaxE4tFwzblFWQ?=
 =?us-ascii?q?r5LqPzGP2uQWsGib9fBvWvmxhGE7sAxxrT2vyd0tionNnI4a1lfE9SBgzYszON?=
 =?us-ascii?q?a2Rkl7Ydu+H5tRsSGXL5Z2Qtg8TGFyoyY60qcJtoKlcyQQyJQnwBDeZ+SDc4iJ?=
 =?us-ascii?q?+R3jTvieLil8hH17ZL2znQqy8Va4xu34V8m01ktKryVZktnSrHwN0AbT6seBR/?=
 =?us-ascii?q?Bg/UmhwS6C2x7P5uxAO0w4iKTWJ4A7zrItlZcfrV7PEy70lUnuj6Kbcl8o9va1?=
 =?us-ascii?q?5+j5eLnqu52ROoxuhg3gL6gih8qyCvkiPAcURWiU4+G82aXj/ULnRLVKieU7kr?=
 =?us-ascii?q?fWsJ/EP8QXvK25DBFP0oYl9Rm/Cy2q0NMCnXkINF5FeRSHgJb1O1zWPvz0EfOy?=
 =?us-ascii?q?j06xnDpl2fzKJKDtD5bRInTZkbrsf65x60tGxwoyydBf6YhUCrYEIP/rXk/xtd?=
 =?us-ascii?q?rYDgI2MgCtwOboFs991oUAVmKLG6OZN63TsVmW6eI1OOSMeoAVtyjnK/Q/5P7h?=
 =?us-ascii?q?k2U5mVkDcqmtx5cXb2q4Hvt+L0WDfXXsmssBEXsNvgcmSOzqiV6CXiBJa3e9Qq?=
 =?us-ascii?q?Ix/TU7CIOgDYfeSYGhmr2B3CGnHpJIYmBKEEyDEXDtd4+cQfcDdDqSItN9kjwD?=
 =?us-ascii?q?TbWhS5Uu1RCytADgzLprNOrU+jACupLl29h4/OnTlRA09TxpAMWRyWCNT2donm?=
 =?us-ascii?q?wWQz86xrxwoUt4yl2by6h3n+RYFcBP5/NOSgo6N5ncwPJgB9DxXQLBeNGJSFG9?=
 =?us-ascii?q?T9WiADExSM8xwtAUb0Z8HdWikg7M3y6wD7AJkLyLAYQ+8rjA0HjpO8Z913HG2b?=
 =?us-ascii?q?E7gFk9QstPMm6mirRl9wfJBY7EiEGZl6esdaQB0y/B7maDzWySvE5GVA58S7nK?=
 =?us-ascii?q?XXcaZkHOt9T2+lvCT6OyCbQgKgZBytSNKq1QZt3tjFVJXvHjONvFbmK1mmewAw?=
 =?us-ascii?q?uIx7yWYIrrfWUdwDvSCEwenw8P+naGMBA0Bj29rGLGEDxuCVXvblvx/uZktnO0?=
 =?us-ascii?q?UFU4zwGQYE1nzLq65BgVifuYS/MQ27IEvDwsqzF1HFa7wtLXBMCMpwtnfKVAf9?=
 =?us-ascii?q?w95E1L2n7etwx4JpagNbxthkYCcwRruEPjzwh4BZ9ekcc0tn8qzBB9KaSD0Fxf?=
 =?us-ascii?q?cTOVxpTwOrzRKmnv8xGjca/W2lfC0NmI/qcD8ug3q1LmvAuxDEot721n08VJ03?=
 =?us-ascii?q?ub/pjKEAsSUZf2UkYr9xh7p6vWYjUn64PTz31sNai0sjnN298yAOslyxCgf8pQ?=
 =?us-ascii?q?Ma+eFQ/yFdEaCNaqKOAwh1epaRcENvhI9KEoJ8Oma+eG2KmzMel6mDKpk2tG75?=
 =?us-ascii?q?59006W7CV8V/PH0IwDw/Gb2QuHSSzxjFOgssDxhIBFaiseHmu5ySj4GoFRYrd+?=
 =?us-ascii?q?cpoMCWerO8e33Mlxh4bxW35E816uH1MH2NKzdRWOdVD83A1Q2l4RoXyogia4yz?=
 =?us-ascii?q?10kzc0rquQxiDOwuLidAYZNW5PXmVtkVDsIY2shdAAQEeodxQplAei5Uvi3ahb?=
 =?us-ascii?q?pbhwIHPJQUhVeCj6NWdiXbWqtrqDesJA9IknsSFKX+uie1CaTbj9rgAe0yPiGW?=
 =?us-ascii?q?te2T86eyurupX/gxx1lmadIGxvo3refMF63Q3f68DERf5NwjoGQzF1iDnWBlSm?=
 =?us-ascii?q?P9il586Ul4rFsu2lU2KhV5tTcTTkzI+atSu743FqDgO7n/yphtLnFg062zfh19?=
 =?us-ascii?q?Z2TSXIsAr8Yo7z2qS4K+1nZEpoBFz768ZgAYFxiIgwhJIR2XgcmJqV+2EKkWPy?=
 =?us-ascii?q?MdVdxKL/Y2ABRT8Nw97J/gfl3FdvIW6Ox4L8Tn+d2NduZ8GmYmMK3SIw98BLB7?=
 =?us-ascii?q?2T7LBenyt1o1y4oBnVYfh8mDcd1PQv5GQbg+EPpAoi0CGdDqoOEklfOCzmjw6I?=
 =?us-ascii?q?4MymrKVLeGavdqC91ElkktCgFr2CohxcV2z/epctBiJw6sR/MFTR0Hz88I3ked?=
 =?us-ascii?q?/Qbc4NuR2QiRvPk+9VKJcpnPoQmSVnIX79vWEiy+MjiBxu3JK6s5KdJ2Rj4q25?=
 =?us-ascii?q?GQJYOSPvZ8wI5D7tl6lek92S34CuGJVhBzoKUIHpTfKuDDIdq/DnOxySHz07r3?=
 =?us-ascii?q?eRAaDfEhOH6Ed6s3LPFIimN22QJHkc19ljRQOSJEpCgAAPRzU6n4U0FgSrxMzn?=
 =?us-ascii?q?bUd46Sod5l/+qhtQ1O1oMwPzXXvYpAetcj00UoSQLAJK7gFe4EfYKdeR4fh0Hy?=
 =?us-ascii?q?Fc452ttgiNKnGAagRMDGEJXFGEBl/5Mrmv49nA7/aXBu6kI/TSZrWOrPRUV+2U?=
 =?us-ascii?q?ypK3zotm4zGMO92NPnZ4Cv00xFFDUWplG8jDmDUPVi8Xlz/Lb8GBvxex4Sl3rs?=
 =?us-ascii?q?G58PT2VwPj/4qPC71OMdpx/xC6m7uMN+mVhCxhMzZXyosMxWPUyLgYxFMTiyZu?=
 =?us-ascii?q?dyS0EbQdryHNSrjcmrRQDx4dZCN+L89I76M63glQNs/XkNL11rhkjvErD1dJT0?=
 =?us-ascii?q?DumsasZcYSOWGyKEvHBFqXNLSBPTDLw9/4YaK/Sb1TjeVYrR6wuSycE0/sIDuD?=
 =?us-ascii?q?jSTpVwu0POFIjSGbOgFeuY6nfhZsD2jjUMzpahmhPNBrij02xKU+hmnWOm4ELT?=
 =?us-ascii?q?h8b0RNo6WK4iNFmfp/AXJO73p/IemAmiaU9O3YKpcQsft2DSV4jeNa4HImy7RL?=
 =?us-ascii?q?6CFIXuB6mCzXrtR2uVGpjvGPyiZ7UBpJsjtLmIOLvUB4NarF7JVPRXbE8wwL7W?=
 =?us-ascii?q?iLDxQKpt1lCsDguqxKy9jPkr7zJylG897O4cQcAM3UItqdMHU9KRrpBCLUDAwd?=
 =?us-ascii?q?QD+rL27fgUldkPCU9nKNr5k6qoLjmJwBSrJAUFw1F/UaCllqHdAYIZd3WC8knq?=
 =?us-ascii?q?CfjMIS+XW+qxzRF41mucXDV/SPEbD0NTCJjJFLYBwHxb73N4MOLpa90EtnLhF/?=
 =?us-ascii?q?lZTLHkeWR9FVqzdtRgUzp1lJ8X44RWo2iGz/bQb4wnIJE/O21vw1kAJ0bO9loD?=
 =?us-ascii?q?Xh+VE6JBzRpzE5mkQ6sdrgiDGVNjX2KfHjDsltFyPouh1pYdvASAFvYFj3xBQ8?=
 =?us-ascii?q?OQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A/AAAneQFch0O0hNFkHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwEBgmiBAieDeYgYX4srgg0UgzGGQgmNOIFzEgEBGA8EAYRAgzYiNAkNAQM?=
 =?us-ascii?q?BAQEBAQECARMBAQEIDQkIKSMMQgEBBAsBgWIkAYJhAQEBAQIBAQIgBBkBGx0BA?=
 =?us-ascii?q?wIJAQEFBRgCAgUhAgIDDAETEQEFARwHF4McAYFoAQMNCAQBCpsHPIsNfBYFARe?=
 =?us-ascii?q?CdwWBMQGDCgoZJw1dMYEGAgYSeYlzgRyCFoQjgx4BA4FfgwSCVwKJVZZgBwKGf?=
 =?us-ascii?q?4MvhyEKAoFPTYcxNocQiHuEZIpXBgIJBw8hgSWCDXBQgmwJghIMF4NKhRSCXYJ?=
 =?us-ascii?q?jPzIBgQMBAQGBSIUahmcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0A/AAAneQFch0O0hNFkHQEBBQEHBQGBUQgBCwEBgmiBAie?=
 =?us-ascii?q?DeYgYX4srgg0UgzGGQgmNOIFzEgEBGA8EAYRAgzYiNAkNAQMBAQEBAQECARMBA?=
 =?us-ascii?q?QEIDQkIKSMMQgEBBAsBgWIkAYJhAQEBAQIBAQIgBBkBGx0BAwIJAQEFBRgCAgU?=
 =?us-ascii?q?hAgIDDAETEQEFARwHF4McAYFoAQMNCAQBCpsHPIsNfBYFAReCdwWBMQGDCgoZJ?=
 =?us-ascii?q?w1dMYEGAgYSeYlzgRyCFoQjgx4BA4FfgwSCVwKJVZZgBwKGf4MvhyEKAoFPTYc?=
 =?us-ascii?q?xNocQiHuEZIpXBgIJBw8hgSWCDXBQgmwJghIMF4NKhRSCXYJjPzIBgQMBAQGBS?=
 =?us-ascii?q?IUahmcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,299,1539673200"; 
   d="scan'208";a="53353502"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 30 Nov 2018 09:56:50 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726736AbeLAFGv (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sat, 1 Dec 2018 00:06:51 -0500
Received: from mail-wr1-f68.google.com ([209.85.221.68]:45832 "EHLO
        mail-wr1-f68.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725749AbeLAFGv (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sat, 1 Dec 2018 00:06:51 -0500
Received: by mail-wr1-f68.google.com with SMTP id v6so6092160wrr.12;
        Fri, 30 Nov 2018 09:56:45 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding;
        bh=nJwlbZ5/IVbG7qJZyxGIp6mcgd52AsxLmPe3hosBGK8=;
        b=GhVCMlUuTVQvnwqHK2dl2lgPFzulkLtGYY/7IRdEvh7LDzunHNe8w9JzG+Z7Vfl4nu
         qS7Ae3q3KgMKsAP2nKyMnREuilIq7q4A25mCMr9+XMVp7LyJwSyzMq8MDQifDsqLEcjB
         fc6+yjOLoK+xN6m4Ou2VKVsboE7vz6g20srjeH5RHd6BByyZrUvgEmzQP6/i1k+SvvYv
         Vjv/rJwdC9ovtc5b4nl3VKcjaNEodwJQFiU4k5q+r/FXifudbrTgkhZ69QONAwGUN2kW
         +vGySR5uduoWzgaH4ZpBMQAMd6QCBbf5yVN1jbxSBbeTgg0LBC1eHcuwzOogrNW6VwXs
         dsZw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=nJwlbZ5/IVbG7qJZyxGIp6mcgd52AsxLmPe3hosBGK8=;
        b=GAFQFMveP69ahvNeo1go45IZICdv0nruYS6gl1gt1IqWHbw2bfySv5lm7MJJVliZYJ
         xyxdaNj6YaQN9eaNYyl5doapsZg+dEPbPWa/y20qg7Dhpp+Yh/cBdBuQyiI5/Y0MshdY
         ON3/BEZiiCAOVivrZAOmvNt/Y6QrvVtKHA5Qe7RqdS8jHl8F5NZHuUXECUWuNx2fFDts
         mQzDxzdg0b64LvRYsKf4iy6UZIG14UQDhoI15TFKxTD6Xjvll8orr63kbk4BSLEkzlgj
         9fYYisZu/IHhoMrX4+WHmQaSUUvU2shse2R3I4VhHo46sCjC/Px+dkbG9eCelsZqmQlf
         Fplg==
X-Gm-Message-State: AA+aEWaMX1BVujVdRjcMbeK+tKba5oepuM0r6yeRX9QCC/SIM9c51AVI
        o8IIDfgqUoikjDZlpy4RO/Q=
X-Google-Smtp-Source: AFSGD/Xga8woUe0LMkNNov4HI35xPEH+122K6osDQvasw8KOhuOMZdSRm/FG+/hBIrf2gsh1xKMCzA==
X-Received: by 2002:adf:dfd1:: with SMTP id q17mr6053904wrn.27.1543600604979;
        Fri, 30 Nov 2018 09:56:44 -0800 (PST)
Received: from jernej-laptop.localnet (89-212-178-211.dynamic.t-2.net. [89.212.178.211])
        by smtp.gmail.com with ESMTPSA id s66sm5890057wmf.34.2018.11.30.09.56.42
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Fri, 30 Nov 2018 09:56:43 -0800 (PST)
From: Jernej =?utf-8?B?xaBrcmFiZWM=?= <jernej.skrabec@gmail.com>
To: linux-sunxi@googlegroups.com, maxime.ripard@bootlin.com
Cc: hans.verkuil@cisco.com, acourbot@chromium.org,
        sakari.ailus@linux.intel.com,
        Laurent Pinchart <laurent.pinchart@ideasonboard.com>,
        tfiga@chromium.org, posciak@chromium.org,
        Paul Kocialkowski <paul.kocialkowski@bootlin.com>,
        Chen-Yu Tsai <wens@csie.org>, linux-kernel@vger.kernel.org,
        linux-arm-kernel@lists.infradead.org, linux-media@vger.kernel.org,
        nicolas.dufresne@collabora.com, jenskuske@gmail.com,
        Thomas Petazzoni <thomas.petazzoni@bootlin.com>
Subject: Re: [linux-sunxi] [PATCH v2 2/2] media: cedrus: Add H264 decoding support
Date: Fri, 30 Nov 2018 18:56:41 +0100
Message-ID: <2869850.yJDP4l804T@jernej-laptop>
In-Reply-To: <20181130073047.auafqe3rzdqfs32d@flea>
References: <20181115145650.9827-1-maxime.ripard@bootlin.com> <6005903.5qHflpuMbl@jernej-laptop> <20181130073047.auafqe3rzdqfs32d@flea>
MIME-Version: 1.0
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Dne petek, 30. november 2018 ob 08:30:47 CET je Maxime Ripard napisal(a):
> On Tue, Nov 27, 2018 at 05:30:00PM +0100, Jernej =C5=A0krabec wrote:
> > > > > +static void _cedrus_write_ref_list(struct cedrus_ctx *ctx,
> > > > > +				   struct cedrus_run *run,
> > > > > +				   const u8 *ref_list, u8 num_ref,
> > > > > +				   enum cedrus_h264_sram_off sram)
> > > > > +{
> > > > > +	const struct v4l2_ctrl_h264_decode_param *decode =3D
> > > > > run->h264.decode_param; +	struct vb2_queue *cap_q =3D
> > > > > &ctx->fh.m2m_ctx->cap_q_ctx.q;
> > > > > +	struct cedrus_dev *dev =3D ctx->dev;
> > > > > +	u32 sram_array[CEDRUS_MAX_REF_IDX / sizeof(u32)];
> > > > > +	unsigned int size, i;
> > > > > +
> > > > > +	memset(sram_array, 0, sizeof(sram_array));
> > > > > +
> > > > > +	for (i =3D 0; i < num_ref; i +=3D 4) {
> > > > > +		unsigned int j;
> > > > > +
> > > > > +		for (j =3D 0; j < 4; j++) {
> > > >=20
> > > > I don't think you have to complicate with two loops here.
> > > > cedrus_h264_write_sram() takes void* and it aligns to 4 anyway. So =
as
> > > > long
> > > > input buffer is multiple of 4 (u8[CEDRUS_MAX_REF_IDX] qualifies for
> > > > that),
> > > > you can use single for loop with "u8 sram_array[CEDRUS_MAX_REF_IDX]=
".
> > > > This should make code much more readable.
> > >=20
> > > This wasn't really about the alignment, but in order to get the
> > > offsets in the u32 and the array more easily.
> > >=20
> > > Breaking out the loop will make that computation less easy on the eye,
> > > so I guess it's very subjective.
> >=20
> > For some strange reason, code below fixes decoding issue from one of my
> > test
> > samples. This is what I actually meant with 1 loop approach:
> Do you have that test sample somewhere accessible?

yes, it's here:
http://jernej.libreelec.tv/videos/h264/Star%20Wars%20Episode%20VII%20-%20Th=
e%20Force%20Awakens%20-%20Teaser%20Trailer%202.mp4

It needs also prediction weight tables (your early patch for that should wo=
rk=20
ok) and scaling list (code I sent you in one of the previous comments shoul=
d=20
work).

=46or me, if this sample worked without issue, every other non-interlaced s=
ample=20
worked too.

>=20
> > static void _cedrus_write_ref_list(struct cedrus_ctx *ctx,
> >=20
> > 				   struct cedrus_run *run,
> > 				   const u8 *ref_list, u8 num_ref,
> > 				   enum cedrus_h264_sram_off sram)
> >=20
> > {
> >=20
> > 	const struct v4l2_ctrl_h264_decode_param *decode =3D
> > 	run->h264.decode_param;
> > 	struct vb2_queue *cap_q =3D &ctx->fh.m2m_ctx->cap_q_ctx.q;
> > 	struct cedrus_dev *dev =3D ctx->dev;
> > 	u8 sram_array[CEDRUS_MAX_REF_IDX];
> > 	unsigned int i;
> > =09
> > 	memset(sram_array, 0, sizeof(sram_array));
> > 	num_ref =3D min(num_ref, (u8)CEDRUS_MAX_REF_IDX);
> > =09
> > 	for (i =3D 0; i < num_ref; i++) {
> > =09
> > 		const struct v4l2_h264_dpb_entry *dpb;
> > 		const struct cedrus_buffer *cedrus_buf;
> > 		const struct vb2_v4l2_buffer *ref_buf;
> > 		unsigned int position;
> > 		int buf_idx;
> > 		u8 dpb_idx;
> > 	=09
> > 		dpb_idx =3D ref_list[i];
> > 		dpb =3D &decode->dpb[dpb_idx];
> > 	=09
> > 		if (!(dpb->flags & V4L2_H264_DPB_ENTRY_FLAG_ACTIVE))
> > 	=09
> > 			continue;
> > 	=09
> > 		buf_idx =3D vb2_find_tag(cap_q, dpb->tag, 0);
> > 		if (buf_idx < 0)
> > 	=09
> > 			continue;
> > 	=09
> > 		ref_buf =3D to_vb2_v4l2_buffer(ctx->dst_bufs[buf_idx]);
> > 		cedrus_buf =3D vb2_v4l2_to_cedrus_buffer(ref_buf);
> > 		position =3D cedrus_buf->codec.h264.position;
> > 	=09
> > 		sram_array[i] |=3D position << 1;
> > 		if (ref_buf->field =3D=3D V4L2_FIELD_BOTTOM)
> > 	=09
> > 			sram_array[i] |=3D BIT(0);
> > =09
> > 	}
> > =09
> > 	cedrus_h264_write_sram(dev, sram, &sram_array, num_ref);
> >=20
> > }
> >=20
> > IMO this code is easier to read.
>=20
> INdeed, thanks!
>=20
> > > > > +			const struct v4l2_h264_dpb_entry *dpb;
> > > > > +			const struct cedrus_buffer *cedrus_buf;
> > > > > +			const struct vb2_v4l2_buffer *ref_buf;
> > > > > +			unsigned int position;
> > > > > +			int buf_idx;
> > > > > +			u8 ref_idx =3D i + j;
> > > > > +			u8 dpb_idx;
> > > > > +
> > > > > +			if (ref_idx >=3D num_ref)
> > > > > +				break;
> > > > > +
> > > > > +			dpb_idx =3D ref_list[ref_idx];
> > > > > +			dpb =3D &decode->dpb[dpb_idx];
> > > > > +
> > > > > +			if (!(dpb->flags & V4L2_H264_DPB_ENTRY_FLAG_ACTIVE))
> > > > > +				continue;
> > > > > +
> > > > > +			buf_idx =3D vb2_find_tag(cap_q, dpb->tag, 0);
> > > > > +			if (buf_idx < 0)
> > > > > +				continue;
> > > > > +
> > > > > +			ref_buf =3D to_vb2_v4l2_buffer(ctx->dst_bufs[buf_idx]);
> > > > > +			cedrus_buf =3D vb2_v4l2_to_cedrus_buffer(ref_buf);
> > > > > +			position =3D cedrus_buf->codec.h264.position;
> > > > > +
> > > > > +			sram_array[i] |=3D position << (j * 8 + 1);
> > > > > +			if (ref_buf->field =3D=3D V4L2_FIELD_BOTTOM)
> > > >=20
> > > > You newer set above flag to buffer so this will be always false.
> > >=20
> > > As far as I know, the field is supposed to be set by the userspace.
> >=20
> > How? I thought that only flags at queueing buffers can be set and there=
 is
> > no bottom/top flag.
>=20
> https://linuxtv.org/downloads/v4l-dvb-apis/uapi/v4l/buffer.html#c.v4l2_bu=
ffe
> r
>=20
> "Indicates the field order of the image in the buffer, see
> v4l2_field. This field is not used when the buffer contains VBI
> data. Drivers must set it when type refers to a capture stream,
> applications when it refers to an output stream."
>=20
> My understanding is that the application should set it, since we'll
> use the output stream's buffer here. But I might very well be wrong
> about it :/

I'll take a look, thanks.

Best regards,
Jernej



