Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 28 Nov 2018 08:47:23 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id EB0B95803C2;
	Tue, 27 Nov 2018 08:56:58 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga007-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 27 Nov 2018 08:56:58 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A3sqdQxX4vWOjZAsd3s+HArUHQOPV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZxGEtadThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGoOy?=
 =?us-ascii?q?YZUSAeQPPuhWqIvyp1UBohWxHgmsHOHixyRUinL1x6A2z/4sHR3a0AEmAtkAsG?=
 =?us-ascii?q?7UrNLwNKoKTe21yrTHzS/dYPJWxDzz7Y/IchYmofGSR71wdc3RyVcyHA7ClFqQ?=
 =?us-ascii?q?r5HqPymL2eUNsGib6fRgVea0hm4orAFxpTevxsMyhYXTmo0VzVXE+Dx/zY0oJt?=
 =?us-ascii?q?O4UFZ2bcC4HJZUrS2WKoV7Tt04T211uys21qcKtJ+5cSQS1pgo3QLTZ+CCfoWK?=
 =?us-ascii?q?5h/sSvqdLDJliH9lfb+zmgq+/E2ux+HhVcS4zFNHoyVYntnCtX0A0hLe5tSaRv?=
 =?us-ascii?q?dh+0qh1ziP2gHO5uxCPEs6j7DUK4Q7zb41jpcTsVrMHivxmEjukq+WeVsr+vKy?=
 =?us-ascii?q?5+TkfLrmvJmcOJFwig3kNaQugMO/Dfw5MggIQWeb5fyx2KP/8UD9WrlGk/M7nr?=
 =?us-ascii?q?fDvJzHJskXurS1Dg5X34o77hawFTam0NAWnXkdK1JFfQqKj4zoO1HIPfD5Au6z?=
 =?us-ascii?q?g1eynzdxwfDJILnhDozKLnnNlrfuY6x95lVCyAo8099f/YhYCrIfL/LpXE/+qt?=
 =?us-ascii?q?jYAgU+MwyuzObrEM992Z8GWWKTHq+ZN7vfsVuJ5uIsPeaAfoAUuCvmJvgh5v7u?=
 =?us-ascii?q?i2I5mFAHcamo25sXdG63HvB8L0qFZnrsh88LEX0WsQomUOzqlFqCXCZTZ3moXq?=
 =?us-ascii?q?I8+is0CIW8AYfDW4CimrqB3CigE51SZ2BGDE2MEHjye4WFXfcMdDydIst7njMY?=
 =?us-ascii?q?UrihTpcr1Quyuw/i17pnMu3U9zUatZLkytd5/e7TlRY09TxyCMSQyGWNT2Bynm?=
 =?us-ascii?q?MVSD46xqF/oUphylid1ah0meBXFdtW5/lRSAc1KYbcz/BmC9D1Qg/OZMyJSFah?=
 =?us-ascii?q?QtWlGz0xVMg+w90VbkZ5GtWiiA3D3iWwD78UkbyLGII78qbG03ftIMZ9zm7M1L?=
 =?us-ascii?q?M9gFk+XstPKWqmi7Z89wfJAY7FiUGZl6eweqQa0y7A72ODzWuIvEFFXw98S6TF?=
 =?us-ascii?q?XXYDZkTIqdT1/F/NT7irCb4/KAtO1daCKrdWat3ulVhJWe3sOMrAbG6rm2e/Hx?=
 =?us-ascii?q?CIxqiSY4rsfGkd2CbdCE0Akw0I+XaGNA4+Bjquom7EDTxuE07vbF3o8eVktHy7?=
 =?us-ascii?q?SUo0xRmQb0J9z7q15gIVhfuERvwOxL0Epjkupy90HFmn2dLWEMSPpwx6caVYYN?=
 =?us-ascii?q?M95kpH1G3Duwx8OJygM75thloEfwtruEPu0g19Cp9cnsgysHMq0A1yJLqE0FNA?=
 =?us-ascii?q?cjOY2ozwOr3XK2Xo4BCjcanW2kva0NaX/KcP5+81q1HivAGvC0oj/G9r09hT03?=
 =?us-ascii?q?uA+JrKCBAeXo72UkYy7xJ6va3VYjEh54PI0n1hKbO7sjvc1NMmGuQkygyscMxC?=
 =?us-ascii?q?MKyZDgDyFc4aB8+wKOExn1ipbxQEPP1d9aIuPsOmceeG17CvPOp6gD2mimFH6p?=
 =?us-ascii?q?hn0k2Q7yp8VvLI35EdzvCYwwuLTSvzgE2gs8D3g49EYz4SE3G7ySjlAo5Re6Jz?=
 =?us-ascii?q?cZwKCWeoP8242NF+i4TxVH5f8V6pH0kG19OxeRqOc1z92hVd1V4WoXO7gyS41S?=
 =?us-ascii?q?F7kzYzoqqZwiPO2eXieAMbNWFRQGltkEnjIZKzj9AcR0WoawkplB245Uf13aRb?=
 =?us-ascii?q?paJ/L3XNTkdMZST5M2ZiUq6ovLqYf8FP8I8osTlQUOmkYVGaS6TxohsA3yP4Am?=
 =?us-ascii?q?tewis2dzWrupX/ghx7h3iRLHd1rHrFZ85wwQ3T68DbRf5UxjAGXjV3iSHLBlig?=
 =?us-ascii?q?ONmk5deUmI3ZsuC9VGKhUYdfcTLxwoODtyu75GtqDgO5n/2ont3nEA460TL01t?=
 =?us-ascii?q?VwVCXIqgr8bZfv16igLe1neUxoDkfm68VmAoF+jpcwhJYI1HkanJqV+mALkWXy?=
 =?us-ascii?q?MdVdwq/+aHsNRTgWw9/a+gTl2UtjLm6XyIL9THmS3sxhZ9yiaGMMxi0999xKCL?=
 =?us-ascii?q?uT7LFcnit6uFu4oRjRYfhghDgdz/Qu5WUeg+EIvgot0yqcDqoTHUleISzjiRCI?=
 =?us-ascii?q?48qio6VQYWalaaKw21ZmndC9ELGCpRlRWHP4epchByB89Mt+P0zX0H3v9I7kYs?=
 =?us-ascii?q?LfYswJth2biBrAi+lVKJQslvsFnyZnOGT9vWE7xO4/lxBhwZa6vI2fIWV34K25?=
 =?us-ascii?q?GgJYNiHyZ84L5jHtiqNektyX3o+1GJVhBy4LXIDpTf+zFDIStPLnNxuBETEmq3?=
 =?us-ascii?q?ebH6bfEhGb6Et8s33PFJWrPWmNJHYF1dViWAWdJEtHjQ8PRjo6mZo5Fh2wyMzl?=
 =?us-ascii?q?bUd0/TQR5l/+qhtRxeNkLRj/UmHDpAi2bjc4UoSQLB1T7gta/UfaLdSe7v5vHy?=
 =?us-ascii?q?Ff5pChrhaCKmmFaARTF20JRlaIB1P+Prmt+NnA9fKXBvGlIvvKYLWOr/FeVviS?=
 =?us-ascii?q?yZKu1Itm4yiDNsGVMnZ+CP0731JJXWplFMTBhzUPVysXmjrNbs6cuRe84zB3od?=
 =?us-ascii?q?q58PjxQwLv4o2PC7RJPNVr+hC2h7qDNuGKiCZ4LzZYyo0DxXvSxLcD214Sjjlk?=
 =?us-ascii?q?dyOxHrQYqS7NUKXQl7dXDxEFaiNzN8hI76Mm0glOI87bjdz12aBijv4oEFdITl?=
 =?us-ascii?q?jhmsCvZcwXLGCxLlLHBECXNLuYIT3H2d34YaS5SbdIluVbqwWwuSqHE0/kJjmM?=
 =?us-ascii?q?jSTpWAu1Me5SjCCXJhheuICmfxZpCGjjSs/maxKhPN92iz023aM7hnfQOWEANj?=
 =?us-ascii?q?h8dltHrqeM4iNAnvV/B2tB42J5LemFniaV9fXXJowKvvtrHCt0kflX4HA7y7tT?=
 =?us-ascii?q?8SFFS+Z5mCrUrt5yvV6mlvODxSZgUBpLsjxLnp6EvV1+OaXF8ZlNQXbF8wgL7W?=
 =?us-ascii?q?WVChQKocNqC9zvu69KzNjPm7n+KDND89LS4MsdCNLYKMOBMHo9LxXpHCTYAxcC?=
 =?us-ascii?q?TT6uZinjgBl0lv2I+2zdlIkzoJnqmZxGHrZBRVU/F/UbDGx7HcYePZBlTDRimr?=
 =?us-ascii?q?me2opAzH6zvBDXSMhA9qjASvuKDPPsL37Ngr1FaxYS6bz/KosXO8vw3Ek0LhFW?=
 =?us-ascii?q?mYXWAVuYY8FQoSp/Jls4vlRQ839gZmI03E3hZ0Wm53pFUbaflwI/jgp4KcEk7j?=
 =?us-ascii?q?bq6kx/clHDuCI0kU93nNz/gDaYaxb4NqL2VoZTXW68iEk1NtvXTg9+agv6yVNl?=
 =?us-ascii?q?MDOCS79YhLxmXWlxjUnXvp4ZXbZ3TbdFewMX3fHfQ/wt3EhRsG3zzktv4erDFI?=
 =?us-ascii?q?sknwwvJ9rkhnRMwQ98JPsyP7DXIuIdx1tIg4qKvym1xqU/xxIYK08R8WSUPikS?=
 =?us-ascii?q?txpMfpwvPSngxPFw7QWEl3MXfWEWVLwwv+5u/0UxE+2aymTr1LsVbgiXNuecZ4?=
 =?us-ascii?q?+UoGHdkciJT0krnhcOm0Re9KVy18YuaVG8WEcow7+cUR8OMJyGYSRcdcEaxmnV?=
 =?us-ascii?q?cieDq62ZxJtvNMOvB+bnTOKUnK8OhwSvGwN/W8wg59oMVrylyl3ZK4+zILcbxF?=
 =?us-ascii?q?Mo7R73JVOtBe5MPhmMlWFD6+ilwNdd3IRGJjwAH2h5eXG+/LqRrA4nm/qOQck7?=
 =?us-ascii?q?Zl8eX40NLHVwX9e1zWoR9VlaDTL/7apfgCKD4jPxvCHZCnO0O9dpZfqYaAlpIM?=
 =?us-ascii?q?Gz+C4k8q+wz1XQ98Oab0D8OtMqn9jL7+oA78KCCvVbSpF+vl3alo0eQGalBSqH?=
 =?us-ascii?q?KdeoI9DUYpY2YNr/Bz7uSlWijzY8UN38Ot2gBqePhg7sSMBft4zNmHgMOMKnCn?=
 =?us-ascii?q?kjCgtsqvsD469iaAtLN5U2bAT0nwA/MbGvZQLGgtboRHyif38eZuNZwa2QaqZY?=
 =?us-ascii?q?yiMqaKfuwWEmQrkz1e+7+wgBScdOxlv9xOyiY40WeGC1UkddZhnCoC0n3SA1Ne?=
 =?us-ascii?q?cow+M7hgjIrEURNjeVXOhobnFU+dA6GV6WZ35xDzx8D3CGgIWLwRSr1rBX3yJH?=
 =?us-ascii?q?g9Nd16URv2LzsZzfSDatXrG7p5LItSYpcdkhpet2K4O1ZoOlvY/T1gfDQYbZqB?=
 =?us-ascii?q?HNBC2hC/dFk8JMCCZZRuRYl2Y4P8APpYtG7ww2TMhoY/RqCaoh7oqjcT18CjQO?=
 =?us-ascii?q?hXsDT5uc9DgDhPqsnaXcmwvWcZ4ndhcDtcMGytgUSCdwJy8TuoesUILZk2KLUG?=
 =?us-ascii?q?8WOBxV5gNJoEoEl4ltbqXp54HgUpBB0XhVruhyXy+NEYNnsxP/S2eLkR37Re+n?=
 =?us-ascii?q?nuiBww1f1rTv38MdVRo5DlJSg65Sl001OPR+MaxVvYPQtDKMXUf7p372juqgKk?=
 =?us-ascii?q?NYxcDdexv/FoWB/W79VDAMvGYMTJVUxVnBGpkI1Ql0cqAmoBNLOo/iMkL/4SE0?=
 =?us-ascii?q?goFsN7qmXMuogVE/ojJOQyasDsoECOt7sVbbcCNqbortq5j/PZhWBGhK986zsV?=
 =?us-ascii?q?BcxWxrPzS02NJ/LMdK/DcIWyYH9TybsMG/Wc5Fx8teAJgLLdNy/Xz6HfUXa9Cq?=
 =?us-ascii?q?v3Qqt+m3mTfi8DcmvQL/nW3rFg=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AUAAAydv1bh0O0hNFkHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGBMII7J4wRjAiBaDmXLIEkA0oUAQEYEwGIeiI0CQ0BAwEBAQEBAQIBEwE?=
 =?us-ascii?q?BAQgNCQgpIwyCNiQBgmIDAwECJAsBDQEBHhkBBQkBARg4AzEBBQEcBgESBYMcg?=
 =?us-ascii?q?gIBBJl3PIodgWwzgnYBAQWBBAEBhh4IEodQgw+BHBeBf4ERM4V9Aoc8iQUkgW6?=
 =?us-ascii?q?UdwmCIIMSi34YiVKHOSyXZAIEAgQFAgUPIYElbIEhTSODPIIbDBeDSoocATc/M?=
 =?us-ascii?q?oEFAQGNDwEB?=
X-IPAS-Result: =?us-ascii?q?A0AUAAAydv1bh0O0hNFkHQEBBQEHBQGBUQgBCwGBMII7J4w?=
 =?us-ascii?q?RjAiBaDmXLIEkA0oUAQEYEwGIeiI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCN?=
 =?us-ascii?q?iQBgmIDAwECJAsBDQEBHhkBBQkBARg4AzEBBQEcBgESBYMcggIBBJl3PIodgWw?=
 =?us-ascii?q?zgnYBAQWBBAEBhh4IEodQgw+BHBeBf4ERM4V9Aoc8iQUkgW6UdwmCIIMSi34Yi?=
 =?us-ascii?q?VKHOSyXZAIEAgQFAgUPIYElbIEhTSODPIIbDBeDSoocATc/MoEFAQGNDwEB?=
X-IronPort-AV: E=Sophos;i="5.56,287,1539673200"; 
   d="scan'208";a="52844506"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 27 Nov 2018 08:56:56 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1731796AbeK1Dy4 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 27 Nov 2018 22:54:56 -0500
Received: from mail-wm1-f65.google.com ([209.85.128.65]:50687 "EHLO
        mail-wm1-f65.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1731784AbeK1Dyz (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 27 Nov 2018 22:54:55 -0500
Received: by mail-wm1-f65.google.com with SMTP id 125so22650972wmh.0
        for <linux-kernel@vger.kernel.org>; Tue, 27 Nov 2018 08:56:22 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding;
        bh=gUtzPQYfY+TlBxAchiIeeRXD6wCQXCysNds7bqypcX0=;
        b=IMJYfJiI/vB4T61XMcgVTV8zpG/cNUZ9nUDQYlZotMywFSqsb9p6E5fGevB3WlOUPN
         WYEvLbC1mSpKJzaGwPyy4OY2YppWyioLYLVvVb2CTW36kbdDIZZULSxTmqVX0yCtLGZr
         h7ait1GfvypAFS10mVxKoj2RlvQLCgzvXNgOOzQ/gI4BzcJfQWOT8XhNOy4hcBvljuF3
         m6lSda+HiC/s2RX543RqEk/6NhgRyhKa+80UGh0EpNFOe+b4oZiJW+HH4RvKtKxC/GCq
         4CxUQoyDF4r1KcfNAGQtcjiexUSciNdRwhomD+90qhKiRoDRT0rbnTmTSXi3u6aQ4z7T
         QA2w==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=gUtzPQYfY+TlBxAchiIeeRXD6wCQXCysNds7bqypcX0=;
        b=kpU7GYeKKP08kfbL0vjPZK6Y8mQVIaLsnMNFePGSxUdmWXCNV2sNhtsHoaolI6AeJu
         +nFPwGH8mOM+P+ZUvOona8TXatiqudDVGXJaVN6M4hcxhQMqwwB/P/W/LvPdwOqVdw57
         FUPX3HNXG19HiCaaPsbapDDlGr3UdwmZfLfOMYC4vWd+vjPiJfXFvweqoQ2w0kvf10OQ
         0tFe67VKX6kLhUAnkLosS+r1bsNmZLf0JpGuTpEvDG9C3PEsm8XnpRb6UjGihJtAdNFP
         VLpXbW1oG7jKAnrbnw3Uas5gVwC1JjHrPxwQ9x5rFm/o6XeaZQwzoXuNP38S9xzED50U
         /teQ==
X-Gm-Message-State: AGRZ1gL5WEDJ1Bps1Ufbdi+aDGRJw16/vazgW54NWeZV5XRBkooBDtxR
        xXo5+aAPmQtar1AH+PisZE+eHw==
X-Google-Smtp-Source: AJdET5cRyGAnPAul2HIkjRAXyOS/E0C99g3NbwpaMk33p87uBm2YavwrII5dayxtmukuFuwV97cF/w==
X-Received: by 2002:a1c:b607:: with SMTP id g7mr29334808wmf.97.1543337781882;
        Tue, 27 Nov 2018 08:56:21 -0800 (PST)
Received: from andreyknvl0.muc.corp.google.com ([2a00:79e0:15:10:3180:41f8:3010:ff61])
        by smtp.gmail.com with ESMTPSA id k73sm6383099wmd.36.2018.11.27.08.56.20
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Tue, 27 Nov 2018 08:56:21 -0800 (PST)
From: Andrey Konovalov <andreyknvl@google.com>
To: Andrey Ryabinin <aryabinin@virtuozzo.com>,
        Alexander Potapenko <glider@google.com>,
        Dmitry Vyukov <dvyukov@google.com>,
        Catalin Marinas <catalin.marinas@arm.com>,
        Will Deacon <will.deacon@arm.com>,
        Christoph Lameter <cl@linux.com>,
        Andrew Morton <akpm@linux-foundation.org>,
        Mark Rutland <mark.rutland@arm.com>,
        Nick Desaulniers <ndesaulniers@google.com>,
        Marc Zyngier <marc.zyngier@arm.com>,
        Dave Martin <dave.martin@arm.com>,
        Ard Biesheuvel <ard.biesheuvel@linaro.org>,
        "Eric W . Biederman" <ebiederm@xmission.com>,
        Ingo Molnar <mingo@kernel.org>,
        Paul Lawrence <paullawrence@google.com>,
        Geert Uytterhoeven <geert@linux-m68k.org>,
        Arnd Bergmann <arnd@arndb.de>,
        "Kirill A . Shutemov" <kirill.shutemov@linux.intel.com>,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        Kate Stewart <kstewart@linuxfoundation.org>,
        Mike Rapoport <rppt@linux.vnet.ibm.com>,
        kasan-dev@googlegroups.com, linux-doc@vger.kernel.org,
        linux-kernel@vger.kernel.org, linux-arm-kernel@lists.infradead.org,
        linux-sparse@vger.kernel.org, linux-mm@kvack.org,
        linux-kbuild@vger.kernel.org
Cc: Kostya Serebryany <kcc@google.com>,
        Evgeniy Stepanov <eugenis@google.com>,
        Lee Smith <Lee.Smith@arm.com>,
        Ramana Radhakrishnan <Ramana.Radhakrishnan@arm.com>,
        Jacob Bramley <Jacob.Bramley@arm.com>,
        Ruben Ayrapetyan <Ruben.Ayrapetyan@arm.com>,
        Jann Horn <jannh@google.com>,
        Mark Brand <markbrand@google.com>,
        Chintan Pandya <cpandya@codeaurora.org>,
        Vishwath Mohan <vishwath@google.com>,
        Andrey Konovalov <andreyknvl@google.com>
Subject: [PATCH v12 18/25] mm: move obj_to_index to include/linux/slab_def.h
Date: Tue, 27 Nov 2018 17:55:36 +0100
Message-Id: <b68796c554fba66d5285274ea6356e642e18a9e5.1543337629.git.andreyknvl@google.com>
X-Mailer: git-send-email 2.20.0.rc0.387.gc7a69e6b6c-goog
In-Reply-To: <cover.1543337629.git.andreyknvl@google.com>
References: <cover.1543337629.git.andreyknvl@google.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

While with SLUB we can actually preassign tags for caches with contructors
and store them in pointers in the freelist, SLAB doesn't allow that since
the freelist is stored as an array of indexes, so there are no pointers to
store the tags.

Instead we compute the tag twice, once when a slab is created before
calling the constructor and then again each time when an object is
allocated with kmalloc. Tag is computed simply by taking the lowest byte of
the index that corresponds to the object. However in kasan_kmalloc we only
have access to the objects pointer, so we need a way to find out which
index this object corresponds to.

This patch moves obj_to_index from slab.c to include/linux/slab_def.h to
be reused by KASAN.

Acked-by: Christoph Lameter <cl@linux.com>
Reviewed-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
Reviewed-by: Dmitry Vyukov <dvyukov@google.com>
Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
---
 include/linux/slab_def.h | 13 +++++++++++++
 mm/slab.c                | 13 -------------
 2 files changed, 13 insertions(+), 13 deletions(-)

diff --git a/include/linux/slab_def.h b/include/linux/slab_def.h
index 3485c58cfd1c..9a5eafb7145b 100644
--- a/include/linux/slab_def.h
+++ b/include/linux/slab_def.h
@@ -104,4 +104,17 @@ static inline void *nearest_obj(struct kmem_cache *cache, struct page *page,
 		return object;
 }
 
+/*
+ * We want to avoid an expensive divide : (offset / cache->size)
+ *   Using the fact that size is a constant for a particular cache,
+ *   we can replace (offset / cache->size) by
+ *   reciprocal_divide(offset, cache->reciprocal_buffer_size)
+ */
+static inline unsigned int obj_to_index(const struct kmem_cache *cache,
+					const struct page *page, void *obj)
+{
+	u32 offset = (obj - page->s_mem);
+	return reciprocal_divide(offset, cache->reciprocal_buffer_size);
+}
+
 #endif	/* _LINUX_SLAB_DEF_H */
diff --git a/mm/slab.c b/mm/slab.c
index 27859fb39889..d2f827316dfc 100644
--- a/mm/slab.c
+++ b/mm/slab.c
@@ -406,19 +406,6 @@ static inline void *index_to_obj(struct kmem_cache *cache, struct page *page,
 	return page->s_mem + cache->size * idx;
 }
 
-/*
- * We want to avoid an expensive divide : (offset / cache->size)
- *   Using the fact that size is a constant for a particular cache,
- *   we can replace (offset / cache->size) by
- *   reciprocal_divide(offset, cache->reciprocal_buffer_size)
- */
-static inline unsigned int obj_to_index(const struct kmem_cache *cache,
-					const struct page *page, void *obj)
-{
-	u32 offset = (obj - page->s_mem);
-	return reciprocal_divide(offset, cache->reciprocal_buffer_size);
-}
-
 #define BOOT_CPUCACHE_ENTRIES	1
 /* internal cache of cache description objs */
 static struct kmem_cache kmem_cache_boot = {
-- 
2.20.0.rc0.387.gc7a69e6b6c-goog

