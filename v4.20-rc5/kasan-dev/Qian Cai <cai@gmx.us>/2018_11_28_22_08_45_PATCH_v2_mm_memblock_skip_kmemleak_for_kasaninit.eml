Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 29 Nov 2018 08:41:33 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 170A45803ED;
	Wed, 28 Nov 2018 14:12:50 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga003-1.jf.intel.com with ESMTP; 28 Nov 2018 14:12:49 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AAnfBChH5YbSyiqNRzDmw3p1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75pMm9bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjmk8qxlSgLniD?=
 =?us-ascii?q?0fOjA57m/Zl8J+gqFcrhK6vxxywZXZbJ2JOPdkYq/QZ88WSXZHU81MVyJBGIS8?=
 =?us-ascii?q?b44XAuQaPOZXtY/9rEYQoBSkBAmnGeTixSNSiX/3xqA63OEhEA7c0Aw9BNIDqX?=
 =?us-ascii?q?LZp8j2OqcKSe250rXEwDHZY/9L1zrx9pLEfg0irP2QR759cMjcxVEuGg7ElFmc?=
 =?us-ascii?q?tI/oMjGP2ugTvWWW4fBsWfyzh2MmrQx6vyKhyd02iobTg4IY0lDE+jt9wIYyPd?=
 =?us-ascii?q?C4VkF7bsC+EJdKtCGVKZF2QsU8TGFsoio6zacGuZGjcCgLzpQo2QLfZuSZf4SU?=
 =?us-ascii?q?5h/vTvudLDlmiH5/Zb6yhAq+/VKhx+D+TsW01UxFritBktnCrHAN0BnT59CDSv?=
 =?us-ascii?q?t8+EehxDmO2xnQ6u5aO0A0k7TUK5o4zr43mJsTt1rMHjXtlUXog6+ZaF8k9vKr?=
 =?us-ascii?q?6+v5eLXmoIGTN4tuhgH5KKQuldSzAf4kPQgWQ2ib5eO82aXn/U34Q7VFkOc6k6?=
 =?us-ascii?q?bEsJ3BIcQbp6i5AxJa04o56ha/CSum38ocnXUdMF1FfxeHhZDzO17SOPD4Eeu/?=
 =?us-ascii?q?g1O0nTdr3f/GP6HhDY/KLnTZkLfhYKxy60hTyAcoydBf5pRUCqwOIf7pW0/xss?=
 =?us-ascii?q?DYAQE9MwCu3+nnD9B93JsEWW2TGq+ZLL/SsViQ6+ItJOmDepUZuDX6K/gj4f7u?=
 =?us-ascii?q?imQ0mVscfamvwJsWZ2q0HvVgI0WFf3Xshs0NHnsNvgo7VObqkkGNUSZPZ3auWK?=
 =?us-ascii?q?Ix/is0CJmmDYfERYChmqaB0z25HpBNYmBGC1aMEWrndomeWvcMbj6SLdFlkjAe?=
 =?us-ascii?q?SbehTIoh3wm0tADm07pnMvbU+ioAuJLgztd14ffflRUz9TNuCcSd3HqAT2V1nm?=
 =?us-ascii?q?MOWj8307pzoU17ylefz6d4h+ZUGsBU5/NMSg06L4LTz/RmC9DuXQLMZsqGR0y4?=
 =?us-ascii?q?Qtq4Gz0xTsg+w9kVY0ljHdWuiRTD3ymvA78RjLGLAJ008qTB33n+Pcp9ynDG1L?=
 =?us-ascii?q?U/gFkiWMdAKWqmhqtn/QjJG4HJi1mZl7qtdakEwSHC7nmDwnSUsEFYSgFwV77F?=
 =?us-ascii?q?Um4ZZkbNqdT550XCT6KhCLg9MwtBz9KCJbVOatHzkVpGQ/LjMszEY22tg2ewGQ?=
 =?us-ascii?q?qIxrSUYYr2emUd2SLdCFQEkwET53qGKRIyBiC7o2LaDTxuE13vbljo8el/rnO7?=
 =?us-ascii?q?U0A1wxuLb01ny7q65BoVieaARPMU27IOoD0hpClsHFahw9LWDMKNqBBlfKpCbt?=
 =?us-ascii?q?Iy/ldG2XjCuAxgI5OvNaZihl0ZcwRppE7u0xR3CoNdkckltn8qzQxyKb6G31NF?=
 =?us-ascii?q?bT+XwZfwOrjPIGno4B+vc7LW2k3Z0NuO+qYP9e40pEn5sACoFkot6XNn09ZO3n?=
 =?us-ascii?q?uY55XKChcSUJ3rXkY28Rh6u6/VYi0n64zI0n1sNLG+siXe1NIxGOsl1hGgcs9F?=
 =?us-ascii?q?MKOFCAD9CdcaCNWpKOAwnVimcAgEPOFL+KEoJcymc+aJ17CxPOZnmjKrlmBH4I?=
 =?us-ascii?q?F70kKR+CtwUO/I35AZw/6G2guLTSvzjFCkssrvg4BLeSkSHnajySjjHINQZqxy?=
 =?us-ascii?q?cZwLCGu0OM2329N+ioXpW35Z8l6jGlwH1NWoeRqUc1zywwlQ2V4LrnygnCuy1y?=
 =?us-ascii?q?Z0nC0xrqqDwCzOxPzvdBgdNW5RR2lijlDsLZKvj98AX0iobAkplB276kb83KVb?=
 =?us-ascii?q?oKV/L2/OQUZHZST2LmdiUreuubqGecJA9JQosSBPWuSmfV+aUqL9owcd0y77H2?=
 =?us-ascii?q?pR3jc7eyuoupX4mRx3k2adLHd1rHrEdsB83xbf5NrARfFP2joKXjV3iT7SBlKk?=
 =?us-ascii?q?Jdmm4c2Ul4vfsuC5T2+hVYdccSjxwYOAqSu0/2tqARKkkvC3m93nFxU60CDh29?=
 =?us-ascii?q?lrUyXIsAjzYo3x26umNuJne1FiBEXg5MpiBoF+jowwiYkV2XgbhZWa52ALkGnt?=
 =?us-ascii?q?PtVAxaLxcmANSiUVzN7P7wjow0ljLnOPx4LkWXSR2MphZ9+mYmwI3iIx9dxFCK?=
 =?us-ascii?q?CR7LZchyt6vkK4rR7NYfh6hjod1fwu6HsAj+AIogUtyDidAqsJHUlZJiHskxWI?=
 =?us-ascii?q?79ajrKRYfmqvcL6w1FZgktClFr2NvgZcWHPhcJc4ASBw9tl/ME7L0HDr8Y7rYt?=
 =?us-ascii?q?7QbdYOthGOlxfAkvNYKJYwlvoMmCpmNnjxvXwjy+4nkxNu2Yu2s5SAK2Vo5Ki5?=
 =?us-ascii?q?GAJXNiXpZ8MP/THglaRekdyT34+xBZVtACkLUIHrTfK1EzISqPLnOByVEDAnrn?=
 =?us-ascii?q?ebGLzfHRKQ6Ut8rnLPFYyrOG+TJHUD0dpiQxydLlRFgA8IRDU6goI5Fgeyyc3h?=
 =?us-ascii?q?d0d5+ykR5kPipRtK0O5oLB7/UmHQpAqzbjc0SZ6fLAdZ7w1Y5kfVN9Ce4fx3Hy?=
 =?us-ascii?q?1C4pKhqwmNIHSBZwtUFWEJRlCEB1f7M7mu+9bA8uuYBum/L/fUYrWOs+teV/iW?=
 =?us-ascii?q?ypK1z4tm5C2BNsGOPnlkEv061VBPXXF/G8TFhToPTzYbmD7Kb86evB284DF4rt?=
 =?us-ascii?q?ij8PT3XwLi/ZGAC6ZJPtV15R+3gb2PN+qRhCtiLTZY15UMxWLHybQF3V4SjT1u?=
 =?us-ascii?q?eCepEbgaqSHNS6fQkLdNDxEHcyNzKNdI76Uk0wlROM7bj8n52aJigvEpC1dKS1?=
 =?us-ascii?q?rhl9qtZcwLJWG9KVzGCFyKNLSAOT3E3cX3bbmgRr1XieVerwewtiqDE0//IjSD?=
 =?us-ascii?q?kCHkVhC1PuFKiSGbPRpet5m8cxZtE2fjSt3mZwa/MN92iz023LI1imnLNW4aLT?=
 =?us-ascii?q?hzbUdNoqeM4iNfh/UsU1BGu3NmNeysnyef8vmdJJELt/diHiVzkaRd+ntp5aFS?=
 =?us-ascii?q?6XR9RfVz0ADbr5Y6qFinuuaK2nx6S0wd+X5wmIuXsBA6au3i/Z5aVCOc8Q=3D?=
 =?us-ascii?q?=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0CQBwBTEv9bh0O0hNFkHAEBAR8EAQEFA?=
 =?us-ascii?q?QGBTAKDaieYGYIhiQ2QFCwTAYduIjcGDQEDAQEBAQEBAgETAQEBCA0JCCkvgjY?=
 =?us-ascii?q?igmwCJFIGCQI+EgNtBYMcgWkBAxUEAZwLjAkzhzYBgnOHa4QrF4F/hnqIBQKJB?=
 =?us-ascii?q?RqGfFCPMAmBKZAKFpEVLJl4gXczGggtA4MngicXjjsiMoEFAQGNYwEB?=
X-IPAS-Result: =?us-ascii?q?A0CQBwBTEv9bh0O0hNFkHAEBAR8EAQEFAQGBTAKDaieYGYI?=
 =?us-ascii?q?hiQ2QFCwTAYduIjcGDQEDAQEBAQEBAgETAQEBCA0JCCkvgjYigmwCJFIGCQI+E?=
 =?us-ascii?q?gNtBYMcgWkBAxUEAZwLjAkzhzYBgnOHa4QrF4F/hnqIBQKJBRqGfFCPMAmBKZA?=
 =?us-ascii?q?KFpEVLJl4gXczGggtA4MngicXjjsiMoEFAQGNYwEB?=
X-IronPort-AV: E=Sophos;i="5.56,292,1539673200"; 
   d="scan'208";a="55277537"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 28 Nov 2018 14:12:48 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726565AbeK2JMv (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 29 Nov 2018 04:12:51 -0500
Received: from mout.gmx.net ([212.227.17.22]:41733 "EHLO mout.gmx.net"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726369AbeK2JMv (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 29 Nov 2018 04:12:51 -0500
Received: from qcai.nay.com ([66.187.233.206]) by mail.gmx.com (mrgmx102
 [212.227.17.174]) with ESMTPSA (Nemesis) id 0MBq8p-1gHRSI0LzD-00Aozw; Wed, 28
 Nov 2018 23:09:29 +0100
From: Qian Cai <cai@gmx.us>
To: akpm@linux-foundation.org
Cc: catalin.marinas@arm.com, mhocko@suse.com, rppt@linux.vnet.ibm.com,
        aryabinin@virtuozzo.com, glider@google.com, dvyukov@google.com,
        kasan-dev@googlegroups.com, linux-mm@kvack.org,
        linux-kernel@vger.kernel.org, Qian Cai <cai@gmx.us>
Subject: [PATCH v2] mm/memblock: skip kmemleak for kasan_init()
Date: Wed, 28 Nov 2018 17:08:45 -0500
Message-Id: <1543442925-17794-1-git-send-email-cai@gmx.us>
X-Mailer: git-send-email 1.8.3.1
X-Provags-ID: V03:K1:clWatyOIPYUoktIn5wbNxbPsSilrzP7alGHChtGvQZbnccgKyCy
 HeuyOViFF3xpbZQNAuvtdxQS0LlHLXJktREluFhvA7tNW7XiA6OvDIkvWwjfIzc/k9rQDGC
 wDWOE3FdHKuO7BrFv2kjD06RyWUjlVLZoHhAaT2jz5hgBWUxyQ8Ozb4mGCZ1Di4td+xZlEU
 g1Ygod/phd/rEJ31Qlk6A==
X-Spam-Flag: NO
X-UI-Out-Filterresults: notjunk:1;V03:K0:W90VGldoDLM=:xtBpiRBdZ2RarN6fxC1wKB
 ydWxt6BZtdaOXG7gv6Ep1dVcbjuU+O+kajy0RbCkcb1lDKZpyxtop2iLveaPQv1CH7joCEAA9
 cVM0Xxw+j+imcTqWPWoOxBEmYSWc80YpwVoWDEhl7oULX2ng7WuWN5BECMnLDrVhAPfBLpv7I
 q6OBnByVgvAv35ERHFPUWplSC4Wb8kkizFC+v21qevhSYa0sYASG3ersEUEhxf+SsSekUE/yQ
 CCom/7DyBsiL0UuXanU9contfEHhIcl5poBnNWlEycVwVeIjiBPDhvsAiR9cAPDETEl9QUQwo
 By0poyuXVsE3OfQ6/NDM210pF98rYstqWCFIl/kBOiWCuo29bOx0Rurbqwn/I7IqCNIGGESFT
 VDq6yy2PyNNfzSR1iMjMk3sHn4KcAcIQNbtQG1cbpgjnJMSrg7Dc+6lK8g8OOSl2W+PXgT9sT
 oPO+z0zxAeBKTRgyT4KtGj4q8KMn3b1CThtpQBmEHhvxm4WGXQj1+KEQfUtII3+ODo7Yf1NAU
 LW9UWHo2NcvpHz8+1ztgSbCq3L3qWQuJqDT+65X5m5yT6vVpEvPaLxqqWzZt18y7bKViQg6zO
 yi2fyqULpHFVrqgNrtHdlHJJ+8xppCq8QPobBlMfU70+oaL5wA/LQjS08DjPJdx/yYgU8J/CL
 tajiEInnkm5pTzo/eMrbpGYXQLsmp4J/OeemgkG6rQ+6GuzZZmTuTrnm0twpwmPNSCf2mKPjG
 mF5XVB/beil7dNjIaFCBa7ThYHCw4DurtZt6L09vrQXWn1+QFYsGZvcONBMP/SNbRaRoR9Nte
 66IGsTxSukQ0Jg7nuim14KKYALF9zjer83QXcUgOQFsup7ETYRquN0/wx+8c6h29B6Szbql6X
 VZN3s+T08uiYpCdH+NReYBjkgQKH5MMx0SElI7HeQ=
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Kmemleak does not play well with KASAN (tested on both HPE Apollo 70 and
Huawei TaiShan 2280 aarch64 servers).

After calling start_kernel()->setup_arch()->kasan_init(), kmemleak early
log buffer went from something like 280 to 260000 which caused kmemleak
disabled and crash dump memory reservation failed. The multitude of
kmemleak_alloc() calls is from nested loops while KASAN is setting up
full memory mappings, so let early kmemleak allocations skip those
memblock_alloc_internal() calls came from kasan_init() given that those
early KASAN memory mappings should not reference to other memory.
Hence, no kmemleak false positives.

kasan_init
  kasan_map_populate [1]
    kasan_pgd_populate [2]
      kasan_pud_populate [3]
        kasan_pmd_populate [4]
          kasan_pte_populate [5]
            kasan_alloc_zeroed_page
              memblock_alloc_try_nid
                memblock_alloc_internal
                  kmemleak_alloc

[1] for_each_memblock(memory, reg)
[2] while (pgdp++, addr = next, addr != end)
[3] while (pudp++, addr = next, addr != end && pud_none(READ_ONCE(*pudp)))
[4] while (pmdp++, addr = next, addr != end && pmd_none(READ_ONCE(*pmdp)))
[5] while (ptep++, addr = next, addr != end && pte_none(READ_ONCE(*ptep)))

Signed-off-by: Qian Cai <cai@gmx.us>
---

Changes since v1:
* only skip memblock_alloc_internal() calls came from kasan_int().

 arch/arm64/mm/kasan_init.c |  2 +-
 include/linux/memblock.h   |  1 +
 mm/memblock.c              | 19 +++++++++++--------
 3 files changed, 13 insertions(+), 9 deletions(-)

diff --git a/arch/arm64/mm/kasan_init.c b/arch/arm64/mm/kasan_init.c
index 63527e5..fcb2ca3 100644
--- a/arch/arm64/mm/kasan_init.c
+++ b/arch/arm64/mm/kasan_init.c
@@ -39,7 +39,7 @@ static phys_addr_t __init kasan_alloc_zeroed_page(int node)
 {
 	void *p = memblock_alloc_try_nid(PAGE_SIZE, PAGE_SIZE,
 					      __pa(MAX_DMA_ADDRESS),
-					      MEMBLOCK_ALLOC_ACCESSIBLE, node);
+					      MEMBLOCK_ALLOC_KASAN, node);
 	return __pa(p);
 }
 
diff --git a/include/linux/memblock.h b/include/linux/memblock.h
index aee299a..3ef3086 100644
--- a/include/linux/memblock.h
+++ b/include/linux/memblock.h
@@ -320,6 +320,7 @@ static inline int memblock_get_region_node(const struct memblock_region *r)
 /* Flags for memblock allocation APIs */
 #define MEMBLOCK_ALLOC_ANYWHERE	(~(phys_addr_t)0)
 #define MEMBLOCK_ALLOC_ACCESSIBLE	0
+#define MEMBLOCK_ALLOC_KASAN		1
 
 /* We are using top down, so it is safe to use 0 here */
 #define MEMBLOCK_LOW_LIMIT 0
diff --git a/mm/memblock.c b/mm/memblock.c
index 9a2d5ae..abb9f7f 100644
--- a/mm/memblock.c
+++ b/mm/memblock.c
@@ -262,7 +262,8 @@ phys_addr_t __init_memblock memblock_find_in_range_node(phys_addr_t size,
 	phys_addr_t kernel_end, ret;
 
 	/* pump up @end */
-	if (end == MEMBLOCK_ALLOC_ACCESSIBLE)
+	if (end == MEMBLOCK_ALLOC_ACCESSIBLE ||
+	    end == MEMBLOCK_ALLOC_KASAN)
 		end = memblock.current_limit;
 
 	/* avoid allocating the first page */
@@ -1412,13 +1413,15 @@ static void * __init memblock_alloc_internal(
 done:
 	ptr = phys_to_virt(alloc);
 
-	/*
-	 * The min_count is set to 0 so that bootmem allocated blocks
-	 * are never reported as leaks. This is because many of these blocks
-	 * are only referred via the physical address which is not
-	 * looked up by kmemleak.
-	 */
-	kmemleak_alloc(ptr, size, 0, 0);
+	/* Skip kmemleak for kasan_init() due to high volume. */
+	if (max_addr != MEMBLOCK_ALLOC_KASAN)
+		/*
+		 * The min_count is set to 0 so that bootmem allocated
+		 * blocks are never reported as leaks. This is because many
+		 * of these blocks are only referred via the physical
+		 * address which is not looked up by kmemleak.
+		 */
+		kmemleak_alloc(ptr, size, 0, 0);
 
 	return ptr;
 }
-- 
1.8.3.1

