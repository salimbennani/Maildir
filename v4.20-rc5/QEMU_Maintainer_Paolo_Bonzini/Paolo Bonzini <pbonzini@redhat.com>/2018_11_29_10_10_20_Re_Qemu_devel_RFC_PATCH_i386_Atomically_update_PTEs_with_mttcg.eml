Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 29 Nov 2018 18:19:22 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id B1F555802E4
	for <like.xu@linux.intel.com>; Thu, 29 Nov 2018 02:10:52 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by fmsmga002-1.fm.intel.com with ESMTP; 29 Nov 2018 02:10:52 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A9iR03hb1OLp4SBNhAmXtFD3/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpsy7Zh7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTzJPAo28?=
 =?us-ascii?q?YYUMAeQOM+lXoIvhqFUBsBW+HQuhCuHgxzNViHL6wbM10/86HAHa3gEtBc4CvG?=
 =?us-ascii?q?jaodj3MqoZTOC7zLPPzTXGd/5Ywy3y6I/MchAmvPqBQLVwcczQyEkuEQPFj0ib?=
 =?us-ascii?q?pIv9PzyO0eQNtWma7+tmVeKukGMnsR9+rSWvxsg2lonFnJ4aylfB9Shgxos+ON?=
 =?us-ascii?q?62SFZjbNK6DJddtDuWO5ZrTs4hWW1kpig3x70ctZKmfiUG0IorywLbZvCdboSF?=
 =?us-ascii?q?7AzvWPyMLTp7in9pYqyzihW0/EO90OPzTNO030xPriddktnDqHQN1xvL58iDS/?=
 =?us-ascii?q?t95Vuh2S2V2wDc7OFEPFo4la3BK54u2rIwl5wTvlrfHiLuhkn6kKybel859uS1?=
 =?us-ascii?q?6OnreKvqq5GcOoNulw3zMLwimsmlDuQ5NggOUXKb+eO51LD75E32XrBKjuAvnq?=
 =?us-ascii?q?bErp/aO9oUpqqgDwBO1YYj9hC/ACu439QDmnUHKFNFeBGZgITzNFDOPej1DfO+?=
 =?us-ascii?q?g1SqjTdqyOrKPrznApXRMHfDlK3tcqp6605Z0wczy9df55RbCrEHPfL/QEjxtM?=
 =?us-ascii?q?bXDhMhKQy73/7nCMlh1oMZQW+PBq6ZMKDMvlOS6eMvPvKBZIsUuDb7Nvgk6OTi?=
 =?us-ascii?q?jX4/mV8BY6ap2YEbZ2y/HvRjcA2kZ2HxiIIBDXsSpVh5C+jrk0GZFzhUYXm0Qu?=
 =?us-ascii?q?Q7/D58DYunCYLKQMeqmKCA2yGgWYRbY30DBl2SHHO7SoOfRv1ZbSuTJtNmwCUJ?=
 =?us-ascii?q?UKXkR4I/2BXrrgLj1rd8MsLS/SsXs4+l08J6sPbOnxM//iAhEsKGzmuWRHt1lG?=
 =?us-ascii?q?5bezhj9q15o0V4y1HL8aVimfFeDtdT4vJFTk9uP5Paz8R5Bsr0VwaHdc2AU1an?=
 =?us-ascii?q?RNrgBis+GJZ52tILfgNxFsuvijjF2CylBaJTkKaEV7Iu9aeJ53H2I8E14XHAxq?=
 =?us-ascii?q?gnjhFyWsFIM3+ngK9X7QXfB4fV1U6ekvD5JuwnwCfR+TLbniK1t0ZCXVs1CP2d?=
 =?us-ascii?q?UA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A+AAAiuv9bhxHrdtBlGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBZYExgmKDeYh3iymBYC2ZOBEYFIdyIjgSAQMBAQEBAQECARMBAQE?=
 =?us-ascii?q?KCwkIGw4vgjYFAgMaAQaCWwEBAQECAQECIAQfCiwCAQECBgEBCg4KAgIiBAICA?=
 =?us-ascii?q?wFTBgEMBgIBAQGDHIF6CAEEpjl8M4otgQuLCxeBQD+BOII2NYgFglcCj2qQOQm?=
 =?us-ascii?q?RLAYYgVqFEIJuECaHDoh4gQOOUYFdgXYzGggbFYMngicXjh5AMYEHHIslgXcBA?=
 =?us-ascii?q?Q?=
X-IPAS-Result: =?us-ascii?q?A0A+AAAiuv9bhxHrdtBlGgEBAQEBAgEBAQEHAgEBAQGBZYE?=
 =?us-ascii?q?xgmKDeYh3iymBYC2ZOBEYFIdyIjgSAQMBAQEBAQECARMBAQEKCwkIGw4vgjYFA?=
 =?us-ascii?q?gMaAQaCWwEBAQECAQECIAQfCiwCAQECBgEBCg4KAgIiBAICAwFTBgEMBgIBAQG?=
 =?us-ascii?q?DHIF6CAEEpjl8M4otgQuLCxeBQD+BOII2NYgFglcCj2qQOQmRLAYYgVqFEIJuE?=
 =?us-ascii?q?CaHDoh4gQOOUYFdgXYzGggbFYMngicXjh5AMYEHHIslgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,294,1539673200"; 
   d="scan'208";a="55341248"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 29 Nov 2018 02:10:51 -0800
Received: from localhost ([::1]:53181 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gSJHW-0002tG-Fo
	for like.xu@linux.intel.com; Thu, 29 Nov 2018 05:10:50 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:45691)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <pbonzini@redhat.com>) id 1gSJHC-0002qL-1R
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 05:10:31 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <pbonzini@redhat.com>) id 1gSJH7-00011I-9c
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 05:10:30 -0500
Received: from mx1.redhat.com ([209.132.183.28]:40834)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <pbonzini@redhat.com>) id 1gSJH6-0000yo-UV
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 05:10:25 -0500
Received: from smtp.corp.redhat.com (int-mx03.intmail.prod.int.phx2.redhat.com
	[10.5.11.13])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 9664B80F93;
	Thu, 29 Nov 2018 10:10:23 +0000 (UTC)
Received: from [10.36.112.25] (ovpn-112-25.ams2.redhat.com [10.36.112.25])
	by smtp.corp.redhat.com (Postfix) with ESMTPS id 57C216E3E3;
	Thu, 29 Nov 2018 10:10:22 +0000 (UTC)
To: Benjamin Herrenschmidt <benh@kernel.crashing.org>, qemu-devel@nongnu.org
References: <f4349b9ee95cbd9d5b16e9033fdf0d7c9e99aebf.camel@kernel.crashing.org>
	<2856b2ac-b14c-e72d-be96-93f9b39bc982@redhat.com>
	<d276b15312d32f3368c847a4f8155e351de6f17e.camel@kernel.crashing.org>
From: Paolo Bonzini <pbonzini@redhat.com>
Openpgp: preference=signencrypt
Autocrypt: addr=pbonzini@redhat.com; prefer-encrypt=mutual; keydata=
	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
Message-ID: <877f45c6-8ad7-6f26-b76f-80be112526ce@redhat.com>
Date: Thu, 29 Nov 2018 11:10:20 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
	Thunderbird/60.3.1
MIME-Version: 1.0
In-Reply-To: <d276b15312d32f3368c847a4f8155e351de6f17e.camel@kernel.crashing.org>
Content-Type: text/plain; charset=utf-8
Content-Language: en-US
Content-Transfer-Encoding: 7bit
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.13
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.27]);
	Thu, 29 Nov 2018 10:10:23 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [RFC/PATCH] i386: Atomically update PTEs with mttcg
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On 29/11/18 11:04, Benjamin Herrenschmidt wrote:
> On Thu, 2018-11-29 at 10:26 +0100, Paolo Bonzini wrote:
>> On 29/11/18 00:15, Benjamin Herrenschmidt wrote:
>>> Afaik, this isn't well documented (at least it wasn't when I last looked)
>>> but OSes such as Linux rely on this behaviour:
>>>
>>> The HW updates to the page tables need to be done atomically with the
>>> checking of the present bit (and other permissions).
>>>
>>> This is what allows Linux to do simple xchg of PTEs with 0 and assume
>>> the value read has "final" stable dirty and accessed bits (the TLB
>>> invalidation is deferred).
>>>
>>> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
>>> ---
>>>
>>> This is lightly tested at this point, mostly to gather comments on the
>>> approach.
>>
>> Looks good, but please kill the notdirty stuff first.  It's not needed
>> and it's a clear bug.  When migrating, it can lead to PTEs being
>> migrated without accessed and dirty bits.
> 
> I thought that too but looking closely with rth, it seems it's still
> setting *those* dirty bits, it just avoids the collision test with the
> translator.

Ah, you're right.  I guess it's a minor performance optimization from
avoiding some pointer chasing in page_find (radix tree walk).

Paolo

> For powerpc I need a cmpxchgq variant too, I'll probably split the
> patch adding those mem ops from the rest as well.
> 
> Annoyingly, fixing riscv will need some tests on target_ulong size.
> 
> Cheers,
> Ben.
> 
>> Paolo
>>
>>> I noticed that RiscV is attempting to do something similar but with endian
>>> bugs, at least from my reading of the code.
>>>
>>>  include/exec/memory_ldst.inc.h |   3 +
>>>  memory_ldst.inc.c              |  38 ++++++++++++
>>>  target/i386/excp_helper.c      | 104 +++++++++++++++++++++++++--------
>>>  3 files changed, 121 insertions(+), 24 deletions(-)
>>>
>>> diff --git a/include/exec/memory_ldst.inc.h b/include/exec/memory_ldst.inc.h
>>> index 272c20f02e..b7a41a0ad4 100644
>>> --- a/include/exec/memory_ldst.inc.h
>>> +++ b/include/exec/memory_ldst.inc.h
>>> @@ -28,6 +28,9 @@ extern uint64_t glue(address_space_ldq, SUFFIX)(ARG1_DECL,
>>>      hwaddr addr, MemTxAttrs attrs, MemTxResult *result);
>>>  extern void glue(address_space_stl_notdirty, SUFFIX)(ARG1_DECL,
>>>      hwaddr addr, uint32_t val, MemTxAttrs attrs, MemTxResult *result);
>>> +extern uint32_t glue(address_space_cmpxchgl_notdirty, SUFFIX)(ARG1_DECL,
>>> +    hwaddr addr, uint32_t old, uint32_t new, MemTxAttrs attrs,
>>> +    MemTxResult *result);
>>>  extern void glue(address_space_stw, SUFFIX)(ARG1_DECL,
>>>      hwaddr addr, uint32_t val, MemTxAttrs attrs, MemTxResult *result);
>>>  extern void glue(address_space_stl, SUFFIX)(ARG1_DECL,
>>> diff --git a/memory_ldst.inc.c b/memory_ldst.inc.c
>>> index acf865b900..63af8f7dd2 100644
>>> --- a/memory_ldst.inc.c
>>> +++ b/memory_ldst.inc.c
>>> @@ -320,6 +320,44 @@ void glue(address_space_stl_notdirty, SUFFIX)(ARG1_DECL,
>>>      RCU_READ_UNLOCK();
>>>  }
>>>  
>>> +/* This is meant to be used for atomic PTE updates under MT-TCG */
>>> +uint32_t glue(address_space_cmpxchgl_notdirty, SUFFIX)(ARG1_DECL,
>>> +    hwaddr addr, uint32_t old, uint32_t new, MemTxAttrs attrs, MemTxResult *result)
>>> +{
>>> +    uint8_t *ptr;
>>> +    MemoryRegion *mr;
>>> +    hwaddr l = 4;
>>> +    hwaddr addr1;
>>> +    MemTxResult r;
>>> +    uint8_t dirty_log_mask;
>>> +
>>> +    /* Must test result */
>>> +    assert(result);
>>> +
>>> +    RCU_READ_LOCK();
>>> +    mr = TRANSLATE(addr, &addr1, &l, true, attrs);
>>> +    if (l < 4 || !memory_access_is_direct(mr, true)) {
>>> +        r = MEMTX_ERROR;
>>> +    } else {
>>> +        uint32_t orig = old;
>>> +
>>> +        ptr = qemu_map_ram_ptr(mr->ram_block, addr1);
>>> +        old = atomic_cmpxchg(ptr, orig, new);
>>> +
>>> +        if (old == orig) {
>>> +            dirty_log_mask = memory_region_get_dirty_log_mask(mr);
>>> +            dirty_log_mask &= ~(1 << DIRTY_MEMORY_CODE);
>>> +            cpu_physical_memory_set_dirty_range(memory_region_get_ram_addr(mr) + addr,
>>> +                                                4, dirty_log_mask);
>>> +        }
>>> +        r = MEMTX_OK;
>>> +    }
>>> +    *result = r;
>>> +    RCU_READ_UNLOCK();
>>> +
>>> +    return old;
>>> +}
>>> +
>>>  /* warning: addr must be aligned */
>>>  static inline void glue(address_space_stl_internal, SUFFIX)(ARG1_DECL,
>>>      hwaddr addr, uint32_t val, MemTxAttrs attrs,
>>> diff --git a/target/i386/excp_helper.c b/target/i386/excp_helper.c
>>> index 49231f6b69..5ccb9d6d6a 100644
>>> --- a/target/i386/excp_helper.c
>>> +++ b/target/i386/excp_helper.c
>>> @@ -157,11 +157,45 @@ int x86_cpu_handle_mmu_fault(CPUState *cs, vaddr addr, int size,
>>>  
>>>  #else
>>>  
>>> +static inline uint64_t update_entry(CPUState *cs, target_ulong addr,
>>> +                                    uint64_t orig_entry, uint32_t bits)
>>> +{
>>> +    uint64_t new_entry = orig_entry | bits;
>>> +
>>> +    /* Write the updated bottom 32-bits */
>>> +    if (qemu_tcg_mttcg_enabled()) {
>>> +        uint32_t old_le = cpu_to_le32(orig_entry);
>>> +        uint32_t new_le = cpu_to_le32(new_entry);
>>> +        MemTxResult result;
>>> +        uint32_t old_ret;
>>> +
>>> +        old_ret = address_space_cmpxchgl_notdirty(cs->as, addr,
>>> +                                                  old_le, new_le,
>>> +                                                  MEMTXATTRS_UNSPECIFIED,
>>> +                                                  &result);
>>> +        if (result == MEMTX_OK) {
>>> +            if (old_ret != old_le) {
>>> +                new_entry = 0;
>>> +            }
>>> +            return new_entry;
>>> +        }
>>> +
>>> +        /* Do we need to support this case where PTEs aren't in RAM ?
>>> +         *
>>> +         * For now fallback to non-atomic case
>>> +         */
>>> +    }
>>> +
>>> +    x86_stl_phys_notdirty(cs, addr, new_entry);
>>> +
>>> +    return new_entry;
>>> +}
>>> +
>>>  static hwaddr get_hphys(CPUState *cs, hwaddr gphys, MMUAccessType access_type,
>>>                          int *prot)
>>>  {
>>>      CPUX86State *env = &X86_CPU(cs)->env;
>>> -    uint64_t rsvd_mask = PG_HI_RSVD_MASK;
>>> +    uint64_t rsvd_mask;
>>>      uint64_t ptep, pte;
>>>      uint64_t exit_info_1 = 0;
>>>      target_ulong pde_addr, pte_addr;
>>> @@ -172,6 +206,8 @@ static hwaddr get_hphys(CPUState *cs, hwaddr gphys, MMUAccessType access_type,
>>>          return gphys;
>>>      }
>>>  
>>> + restart:
>>> +    rsvd_mask = PG_HI_RSVD_MASK;
>>>      if (!(env->nested_pg_mode & SVM_NPT_NXE)) {
>>>          rsvd_mask |= PG_NX_MASK;
>>>      }
>>> @@ -198,8 +234,10 @@ static hwaddr get_hphys(CPUState *cs, hwaddr gphys, MMUAccessType access_type,
>>>                  goto do_fault_rsvd;
>>>              }
>>>              if (!(pml4e & PG_ACCESSED_MASK)) {
>>> -                pml4e |= PG_ACCESSED_MASK;
>>> -                x86_stl_phys_notdirty(cs, pml4e_addr, pml4e);
>>> +                pml4e = update_entry(cs, pml4e_addr, pml4e, PG_ACCESSED_MASK);
>>> +                if (!pml4e) {
>>> +                    goto restart;
>>> +                }
>>>              }
>>>              ptep &= pml4e ^ PG_NX_MASK;
>>>              pdpe_addr = (pml4e & PG_ADDRESS_MASK) +
>>> @@ -213,8 +251,10 @@ static hwaddr get_hphys(CPUState *cs, hwaddr gphys, MMUAccessType access_type,
>>>              }
>>>              ptep &= pdpe ^ PG_NX_MASK;
>>>              if (!(pdpe & PG_ACCESSED_MASK)) {
>>> -                pdpe |= PG_ACCESSED_MASK;
>>> -                x86_stl_phys_notdirty(cs, pdpe_addr, pdpe);
>>> +                pdpe = update_entry(cs, pdpe_addr, pdpe, PG_ACCESSED_MASK);
>>> +                if (!pdpe) {
>>> +                    goto restart;
>>> +                }
>>>              }
>>>              if (pdpe & PG_PSE_MASK) {
>>>                  /* 1 GB page */
>>> @@ -256,8 +296,10 @@ static hwaddr get_hphys(CPUState *cs, hwaddr gphys, MMUAccessType access_type,
>>>          }
>>>          /* 4 KB page */
>>>          if (!(pde & PG_ACCESSED_MASK)) {
>>> -            pde |= PG_ACCESSED_MASK;
>>> -            x86_stl_phys_notdirty(cs, pde_addr, pde);
>>> +            pde = update_entry(cs, pde_addr, pde, PG_ACCESSED_MASK);
>>> +            if (!pde) {
>>> +                goto restart;
>>> +            }
>>>          }
>>>          pte_addr = (pde & PG_ADDRESS_MASK) + (((gphys >> 12) & 0x1ff) << 3);
>>>          pte = x86_ldq_phys(cs, pte_addr);
>>> @@ -295,8 +337,10 @@ static hwaddr get_hphys(CPUState *cs, hwaddr gphys, MMUAccessType access_type,
>>>          }
>>>  
>>>          if (!(pde & PG_ACCESSED_MASK)) {
>>> -            pde |= PG_ACCESSED_MASK;
>>> -            x86_stl_phys_notdirty(cs, pde_addr, pde);
>>> +            pde = update_entry(cs, pde_addr, pde, PG_ACCESSED_MASK);
>>> +            if (!pde) {
>>> +                goto restart;
>>> +            }
>>>          }
>>>  
>>>          /* page directory entry */
>>> @@ -376,7 +420,7 @@ int x86_cpu_handle_mmu_fault(CPUState *cs, vaddr addr, int size,
>>>      int error_code = 0;
>>>      int is_dirty, prot, page_size, is_write, is_user;
>>>      hwaddr paddr;
>>> -    uint64_t rsvd_mask = PG_HI_RSVD_MASK;
>>> +    uint64_t rsvd_mask;
>>>      uint32_t page_offset;
>>>      target_ulong vaddr;
>>>  
>>> @@ -401,6 +445,8 @@ int x86_cpu_handle_mmu_fault(CPUState *cs, vaddr addr, int size,
>>>          goto do_mapping;
>>>      }
>>>  
>>> + restart:
>>> +    rsvd_mask = PG_HI_RSVD_MASK;
>>>      if (!(env->efer & MSR_EFER_NXE)) {
>>>          rsvd_mask |= PG_NX_MASK;
>>>      }
>>> @@ -436,8 +482,10 @@ int x86_cpu_handle_mmu_fault(CPUState *cs, vaddr addr, int size,
>>>                      goto do_fault_rsvd;
>>>                  }
>>>                  if (!(pml5e & PG_ACCESSED_MASK)) {
>>> -                    pml5e |= PG_ACCESSED_MASK;
>>> -                    x86_stl_phys_notdirty(cs, pml5e_addr, pml5e);
>>> +                    pml5e = update_entry(cs, pml5e_addr, pml5e, PG_ACCESSED_MASK);
>>> +                    if (!pml5e) {
>>> +                        goto restart;
>>> +                    }
>>>                  }
>>>                  ptep = pml5e ^ PG_NX_MASK;
>>>              } else {
>>> @@ -456,8 +504,10 @@ int x86_cpu_handle_mmu_fault(CPUState *cs, vaddr addr, int size,
>>>                  goto do_fault_rsvd;
>>>              }
>>>              if (!(pml4e & PG_ACCESSED_MASK)) {
>>> -                pml4e |= PG_ACCESSED_MASK;
>>> -                x86_stl_phys_notdirty(cs, pml4e_addr, pml4e);
>>> +                pml4e = update_entry(cs, pml4e_addr, pml4e, PG_ACCESSED_MASK);
>>> +                if (!pml4e) {
>>> +                    goto restart;
>>> +                }
>>>              }
>>>              ptep &= pml4e ^ PG_NX_MASK;
>>>              pdpe_addr = ((pml4e & PG_ADDRESS_MASK) + (((addr >> 30) & 0x1ff) << 3)) &
>>> @@ -472,8 +522,10 @@ int x86_cpu_handle_mmu_fault(CPUState *cs, vaddr addr, int size,
>>>              }
>>>              ptep &= pdpe ^ PG_NX_MASK;
>>>              if (!(pdpe & PG_ACCESSED_MASK)) {
>>> -                pdpe |= PG_ACCESSED_MASK;
>>> -                x86_stl_phys_notdirty(cs, pdpe_addr, pdpe);
>>> +                pdpe = update_entry(cs, pdpe_addr, pdpe, PG_ACCESSED_MASK);
>>> +                if (!pdpe) {
>>> +                    goto restart;
>>> +                }
>>>              }
>>>              if (pdpe & PG_PSE_MASK) {
>>>                  /* 1 GB page */
>>> @@ -520,8 +572,10 @@ int x86_cpu_handle_mmu_fault(CPUState *cs, vaddr addr, int size,
>>>          }
>>>          /* 4 KB page */
>>>          if (!(pde & PG_ACCESSED_MASK)) {
>>> -            pde |= PG_ACCESSED_MASK;
>>> -            x86_stl_phys_notdirty(cs, pde_addr, pde);
>>> +            pde = update_entry(cs, pde_addr, pde, PG_ACCESSED_MASK);
>>> +            if (!pde) {
>>> +                goto restart;
>>> +            }
>>>          }
>>>          pte_addr = ((pde & PG_ADDRESS_MASK) + (((addr >> 12) & 0x1ff) << 3)) &
>>>              a20_mask;
>>> @@ -563,8 +617,10 @@ int x86_cpu_handle_mmu_fault(CPUState *cs, vaddr addr, int size,
>>>          }
>>>  
>>>          if (!(pde & PG_ACCESSED_MASK)) {
>>> -            pde |= PG_ACCESSED_MASK;
>>> -            x86_stl_phys_notdirty(cs, pde_addr, pde);
>>> +            pde = update_entry(cs, pde_addr, pde, PG_ACCESSED_MASK);
>>> +            if (!pde) {
>>> +                goto restart;
>>> +            }
>>>          }
>>>  
>>>          /* page directory entry */
>>> @@ -634,11 +690,11 @@ do_check_protect_pse36:
>>>      /* yes, it can! */
>>>      is_dirty = is_write && !(pte & PG_DIRTY_MASK);
>>>      if (!(pte & PG_ACCESSED_MASK) || is_dirty) {
>>> -        pte |= PG_ACCESSED_MASK;
>>> -        if (is_dirty) {
>>> -            pte |= PG_DIRTY_MASK;
>>> +        pte = update_entry(cs, pte_addr, pte,
>>> +                           PG_ACCESSED_MASK | (is_dirty ? PG_DIRTY_MASK : 0));
>>> +        if (!pte) {
>>> +            goto restart;
>>>          }
>>> -        x86_stl_phys_notdirty(cs, pte_addr, pte);
>>>      }
>>>  
>>>      if (!(pte & PG_DIRTY_MASK)) {
>>>
>>>
> 


