Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:23:03 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 373F6580460;
	Fri, 30 Nov 2018 12:56:50 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 30 Nov 2018 12:56:49 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AIX0FrRBmR5uyL1qbMqhzUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7+pcmwAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95RWSJfH42y?=
 =?us-ascii?q?YYgBAe0DMuZWtIn9v1kDoACiCQWwHu7j1iVFimPq0aA8zu8vERvG3AslH98WrH?=
 =?us-ascii?q?TUrMv6NLwMUe+ryqnFzzvOYuhZ2Tf48ofIcxQhreuQUrJ3dMrcz1QkGQDdjliI?=
 =?us-ascii?q?t4DpIzeY2v4Qv2WV8eZsT/+jhm07pw1rozWixN8ghpTNi48W0FzJ9Tt1zJwoKd?=
 =?us-ascii?q?C7SEN3e8CoHIVSuiycKoB4WNktQ3tytyY/0rAGuYC0fCwNyJk/2R7fZOKIc5KS?=
 =?us-ascii?q?7hLgSumROzF4i2xheL6lgBay60egxvX9VsmyzllKsjJInsfQun0JzRDf98aKRu?=
 =?us-ascii?q?Vn8ku82juDyxrf5+BGLEwskKrUMZ8hwro+lpoJtkTDGzf7mEH3jK+Qa0Ul9fGk?=
 =?us-ascii?q?6+f5bbX8oJ+TKYt0hhj5MqUgnMywH/44PxMQX2iU5+u8zqfv/U7nT7VQiP05jK?=
 =?us-ascii?q?3ZvIrdJcQBqa61GxVV3Zo76xajEzem18wVnX0GLFJGZh2LlYfoO0zVLfD8DPe/?=
 =?us-ascii?q?hUmskThxy/DHOL3hHovCLnzZnLj9erZ97lZWyBAvwtBH+5JUFrYBLerzWkDrtd?=
 =?us-ascii?q?zYEgU2Mwuuz+bnFdVyzIUeWW2UD6+dMaPSt0KI5+01L+mNYo8VpCjyK/w/6/Hy?=
 =?us-ascii?q?in85nEcXfbO10psPdHC4AvNmLl2bYXrrnNgNC2QKvg04TOzsj12PSjpTZ3e0X6?=
 =?us-ascii?q?Ih6TA3EoOmDYHfRo+zhLyNxju0HppTZmpeEFCDDW/od5mYW/cLcC+dONRhkjwD?=
 =?us-ascii?q?VbiiUYMhzwuhtA3hxrpjL+rU/DAYtJ352Nh04e3TiQ899ThuA8uB1GGNSnl+nn?=
 =?us-ascii?q?kUSD8uwKB/vUt9x0+A0adihfxUD9hT5/JTXQc8Op7R1Oh6C9H0WgLccdaFUlem?=
 =?us-ascii?q?QtO6AT4vStI92cMBY0F4G9+6lBDMwzKqA6MJl7yMHJE777jT32bvKMpny3bJzq?=
 =?us-ascii?q?8hj0I4TctJMmGmgq1/9w3XB4PSl0WZlqCqdbkT3SLX9WeDy3aOs19cUAJqTarF?=
 =?us-ascii?q?WnUfbFPMrdvl/kPCU6OuCbM/PwRc08GCNLVFZsfpjVpcQvfjI8rRY2Sqlme0BB?=
 =?us-ascii?q?aIwK6MbYXwd2Uc2iXdFFYLkwQJ8XmaMgg+Az+ro3jCAzx2CVLvf0Ts/PFiqHO6?=
 =?us-ascii?q?S080yB2Kb01h1rav5h4Zn/ucS+kX3rIFvichpC55HFK839LQFtqBqBBtfKRaYd?=
 =?us-ascii?q?Mh/lhH0XjVuBB6PpylN6pinEIRcxxrv0Py0BV6Ep9Pkcw0o3Il0gVzKbiU30hc?=
 =?us-ascii?q?dzyFx5/wPL7XKm7s/B20b67W21fe0MuZ+6sV6fQ4rUnjsx+tFkY473pn1NxV2W?=
 =?us-ascii?q?OG5prWFAoSTY7xUkEv+hl6urHWeDUy65nV1H1sK6a0tDDC1sktBOskzBagYthe?=
 =?us-ascii?q?PLmFFA/0D80VGcyuJPY2lFiuaxIOJPpS+7IsP8O6a/uG37amPPxhnD26l2tH+p?=
 =?us-ascii?q?1y0kWW+yp6VOHIxZcFz+iE0QSdUzfzkUmustrwmYBCfjwSGmu/yS75BI9efKFy?=
 =?us-ascii?q?fIALCXuwLM2z3Nlxm5ntW3tA/l65G1wGwNOpeQaVb1Hl3QxQ1F4boHy9lSuj0j?=
 =?us-ascii?q?x0lSokrq6e3CzI3uTjewALOm9NRGl+k1jsJZK4gMwdXEitdwIpjgeq5V7mx6hH?=
 =?us-ascii?q?o6RyN2vTTl1Sfyj1LGFiVbG8tqGYbM5M65MosCNXX/q6YV2BTr79oh0a0z7sHm?=
 =?us-ascii?q?dExTA7cS2qtYv9nxBglG2dK3NzpmLDec5s3Rff+MDcRflJ0zsGXiZ4jiPbBlq9?=
 =?us-ascii?q?P9mv5tiUk5bDsuajV2OuTJFTcC/rzZ+euyu//2FlHRq/n/WrkN39DQc6yTP718?=
 =?us-ascii?q?VtVSjQrxbzeIjr2766MeJ6ZEZoAlD85tF+GoF/lIswmZ4R1WIbhpWT4XoIj2Pz?=
 =?us-ascii?q?Pc9H1qL5aXoHXSQLzMLN4Aj5xE1jKWqEx4f4VnWe2MRtfde7bX0N2iIh8c9KEr?=
 =?us-ascii?q?yb46JenSt6uVe4qQPRYf5gnjYS0/cu6Xgag/0Xtwop1CmSHrcSHUxANyz2ixuI?=
 =?us-ascii?q?98y+rLlQZGu3bbiw009+kcqgDb6YpAFcRW35eowjHSJr6sV/MVTM0GD8643+ed?=
 =?us-ascii?q?nQa84TuQOQkxvak+dVL5cxnOIQhSV7IWL9oWEly+kjgBN1x566u4yHK3h38KK9?=
 =?us-ascii?q?Hx5VLTn1Z8IV+jHwgqdShMeW34azHpp/HjUHRofnTfWtEDgKr/ToKx6OECEgqn?=
 =?us-ascii?q?ecAbffHxWQ6EJ4oHLUCZyrK2ubJHoEzdVhWRmdIlZQgBsPUTU+n545EB2qxcP7?=
 =?us-ascii?q?fEd44DAR+kD3qh9Wxu10MBn/V3/VpB20ZTcsVJifMB1W4xlC5kfSLMye9/9zED?=
 =?us-ascii?q?te/pG7twyNLWqbZwtTAGENW0yEAU3jP7a06dnB9eiYGvSxL//UbbqSruxeUu+C?=
 =?us-ascii?q?xYiz3Yt+4zaMKsKPM2FiD/Il20pDXnN5G8XDlzUMUSwXkC3NYNCBpBeh4S16tc?=
 =?us-ascii?q?S/8PXtWALy6oqDEbpSMdNz+x+ohaePLfKfhCF8KTxAzJMD2WfIyKQD3F4Vkyxh?=
 =?us-ascii?q?bSStHq8atSHTTKPcgKtXDx8AZiN3NctI6b883wZXNc7ajNP1yqB3jvovB1hZUl?=
 =?us-ascii?q?zhn9mjZdYWLGGlKFPHGEGLOayaJT3KxsH7e7+zRadMg+VUqRKwvy2WE0viPjSF?=
 =?us-ascii?q?ijnoWAqjMeBKjCGHIhNevJuxfQpqCWjmVNjmcAG0MMdrjT0qxr05nnPLOnQaMT?=
 =?us-ascii?q?h5ckNNqKWf7CJYgvplHWxB4WFoLe2Fmyaf8unZJYwasfptAiRoie1a5G42xKdS?=
 =?us-ascii?q?7CFBF7RJn37urtNVvVygzbKnxT1gXx5Drz9KgMSAukAmcZ7Z/4ZGEVnZ+1pZ9m?=
 =?us-ascii?q?WZFBIFutxNCdD1va1UjN/Vm/S3YBRP/smc1swbBICAK8+KK3EmNhnBEz7OCw4E?=
 =?us-ascii?q?UDvtMnvQ0QgVqvaYvl2YtII7rJekzIAJQL9zV1EvEP4eTEN/E4pGaL5tWD9su7?=
 =?us-ascii?q?OBg8sB43z2+BDLQslyt4rBWvjUDfi5exiDirwRexsF2q31K9tIHoL+0k1mLFJ9?=
 =?us-ascii?q?mdeZU3HMVMxA93UyJjQ/p19ApT0nFjU+?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AeAAC4owFch0O0hNFjHQEBBQEHBQGBU?=
 =?us-ascii?q?gcBCwGDayeaKBSIaiRujTiBcxIBARgTAYd2IjUIDQEDAQEBAQEBAgETAQEBCA0?=
 =?us-ascii?q?JCCkjDII2JAGCYgMDAQIkGQEbHQEDAgkBAQUaMQMgEQEFARwGARIFgxyBaQEDF?=
 =?us-ascii?q?QWbSzyMCRYFAReCdwWBAYM8ChknDV0TgSQCBhKHWoFqgSiBHIIWgRGFaYgFAoE?=
 =?us-ascii?q?qAQGHd4cDUI8+AQYCAYFThG2KbCOJWYdGiHuPOwIEAgQFAgUPIYEnAoIJcIEBb?=
 =?us-ascii?q?YFOghsMF4NKinEiMoEEAQEBO40FAQE?=
X-IPAS-Result: =?us-ascii?q?A0AeAAC4owFch0O0hNFjHQEBBQEHBQGBUgcBCwGDayeaKBS?=
 =?us-ascii?q?IaiRujTiBcxIBARgTAYd2IjUIDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2JAGCY?=
 =?us-ascii?q?gMDAQIkGQEbHQEDAgkBAQUaMQMgEQEFARwGARIFgxyBaQEDFQWbSzyMCRYFARe?=
 =?us-ascii?q?CdwWBAYM8ChknDV0TgSQCBhKHWoFqgSiBHIIWgRGFaYgFAoEqAQGHd4cDUI8+A?=
 =?us-ascii?q?QYCAYFThG2KbCOJWYdGiHuPOwIEAgQFAgUPIYEnAoIJcIEBbYFOghsMF4NKinE?=
 =?us-ascii?q?iMoEEAQEBO40FAQE?=
X-IronPort-AV: E=Sophos;i="5.56,299,1539673200"; 
   d="scan'208";a="54073847"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 30 Nov 2018 12:56:37 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726773AbeLAIHF (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sat, 1 Dec 2018 03:07:05 -0500
Received: from mail-io1-f67.google.com ([209.85.166.67]:38247 "EHLO
        mail-io1-f67.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726744AbeLAIHE (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sat, 1 Dec 2018 03:07:04 -0500
Received: by mail-io1-f67.google.com with SMTP id l14so5649291ioj.5
        for <linux-kernel@vger.kernel.org>; Fri, 30 Nov 2018 12:56:31 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=from:to:cc:subject:date:message-id:in-reply-to:references;
        bh=wJHwQgWDMEBP/NNgbjssB3B91GE0fJoGSOGi0poC1z0=;
        b=daaU4UDp/0IK2RAsu/D1B/AmF44RUjoeCdt35uCijib20Tr0GjH6ACB5k4slXbm2WU
         YV7xfPdw9SfzrtsXZ4v2vWFzYFiQWZ92tvjMrReKak94LW76pJvqTnKmSD3BcrDGEdLn
         DuEmvs0oEe203eLATGmQYAREvC2sC1OMEcDoeGO5X6fLyC1vBLVqb+NvfbHGMEo/P9na
         7XvmxCPueJh/StzWtDojVLga//fBXpmJ3yzSNZpy9M3UiTE0WFhbvquemwt9EQjdLeGl
         F8l9t9Nnqay2wntojm8HUkhQ6HyAECGNB5lNHUBra23hxYXtXgXri6GL7Pszs8VLKRxE
         Ernw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references;
        bh=wJHwQgWDMEBP/NNgbjssB3B91GE0fJoGSOGi0poC1z0=;
        b=Kr+jWeD/Oer5JUqxwrLbpFeb0nWUvPu6taEYA00LgyYoe+ls+2E9H7/eXhpn6hfZzg
         rVh2lIPkcJRMyhG4iP2K+K99uFl8+DspJrN4ZJbiMTNrKC1EumKrY0onNsfpjAbWZh2A
         Qm2XGVZfaP2gS8j94ETjkUXKe/p7nGAXC9j4mfegVtfck7u2S6UYNKb7Gvpwi26JGp6h
         xrGglxOL9TpsAmVkPNQYgaLF9WY+5h3R7/Am/i1H2BQvs92g+uj9FWrhXB159CGXOCUS
         Pl4ccq0vVHuAB5+lBn0m1hjK2L0DjSDrVgCuUFc3sMYPKZpHd+JM1HqibtucyJNP0xQC
         N+zg==
X-Gm-Message-State: AA+aEWY/FzLtP9sPXs+DOwyVzDDVheZc5rYJ0NhQ0lsYmWUjngpIFbGy
        wRKeO5GfbxXikoASJfqdT70=
X-Google-Smtp-Source: AFSGD/VoIgOskWLOSTZLiWc2hklabRsnluxB+UfGl82oAuiP/cN1/i01H1wVcsJiOYPb9dM0LXkC4A==
X-Received: by 2002:a6b:ec07:: with SMTP id c7mr5920815ioh.33.1543611390979;
        Fri, 30 Nov 2018 12:56:30 -0800 (PST)
Received: from localhost.localdomain ([198.52.185.227])
        by smtp.gmail.com with ESMTPSA id p198sm126967itb.30.2018.11.30.12.56.30
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Fri, 30 Nov 2018 12:56:30 -0800 (PST)
From: thesven73@gmail.com
X-Google-Original-From: TheSven73@googlemail.com
To: TheSven73@googlemail.com, Shawn Guo <shawnguo@kernel.org>,
        Kees Cook <keescook@chromium.org>,
        Rob Herring <robh@kernel.org>, Arnd Bergmann <arnd@arndb.de>
Cc: linux-kernel@vger.kernel.org
Subject: [PATCH v2 2/2] bus: imx-weim: guard against timing configuration conflicts
Date: Fri, 30 Nov 2018 15:56:24 -0500
Message-Id: <20181130205624.16227-3-TheSven73@googlemail.com>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20181130205624.16227-1-TheSven73@googlemail.com>
References: <20181130205624.16227-1-TheSven73@googlemail.com>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From: Sven Van Asbroeck <TheSven73@googlemail.com>

When adding weim child devices, there is a risk that the developer will
(by mistake) specify more than one timing setting for the same chip select.

The driver cannot support such a configuration.

In case of conflict, this patch will print a warning to the log,
and will ignore the child node in question.

In this example, node acme@1 will be ignored, as it tries to modify
timing settings for CS0:

&weim {
	acme@0,0 {
		compatible = "acme,whatever";
		reg = <0 0 0x100>;
		fsl,weim-cs-timing = <something>;
	};
	acme@0,500 {
		compatible = "acme,whatnot";
		reg = <0 0x500 0x100>;
		fsl,weim-cs-timing = <something else>;
	};
};

However in this example, the driver will be happy:

&weim {
        acme@0,0 {
                compatible = "acme,whatever";
                reg = <0 0 0x100>;
                fsl,weim-cs-timing = <something>;
        };
        acme@0,500 {
                compatible = "acme,whatnot";
                reg = <0 0x500 0x100>;
                fsl,weim-cs-timing = <something>;
        };
};

Signed-off-by: Sven Van Asbroeck <TheSven73@googlemail.com>
---
 drivers/bus/imx-weim.c | 33 ++++++++++++++++++++++++++++++---
 1 file changed, 30 insertions(+), 3 deletions(-)

diff --git a/drivers/bus/imx-weim.c b/drivers/bus/imx-weim.c
index 24f22285395d..114e503ec785 100644
--- a/drivers/bus/imx-weim.c
+++ b/drivers/bus/imx-weim.c
@@ -46,8 +46,18 @@ static const struct imx_weim_devtype imx51_weim_devtype = {
 };
 
 #define MAX_CS_REGS_COUNT	6
+#define MAX_CS_REGS		6
 #define OF_REG_SIZE		3
 
+struct cs_timing {
+	bool is_applied;
+	u32 regs[MAX_CS_REGS_COUNT];
+};
+
+struct cs_timing_state {
+	struct cs_timing cs[MAX_CS_REGS];
+};
+
 static const struct of_device_id weim_id_table[] = {
 	/* i.MX1/21 */
 	{ .compatible = "fsl,imx1-weim", .data = &imx1_weim_devtype, },
@@ -112,11 +122,14 @@ static int __init imx_weim_gpr_setup(struct platform_device *pdev)
 }
 
 /* Parse and set the timing for this device. */
-static int __init weim_timing_setup(struct device_node *np, void __iomem *base,
-				    const struct imx_weim_devtype *devtype)
+static int __init weim_timing_setup(struct device *dev,
+				    struct device_node *np, void __iomem *base,
+				    const struct imx_weim_devtype *devtype,
+				    struct cs_timing_state *ts)
 {
 	u32 cs_idx, value[MAX_CS_REGS_COUNT];
 	int i, ret, reg_idx, num_regs;
+	struct cs_timing *cst;
 
 	if (WARN_ON(devtype->cs_regs_count > MAX_CS_REGS_COUNT))
 		return -EINVAL;
@@ -145,10 +158,23 @@ static int __init weim_timing_setup(struct device_node *np, void __iomem *base,
 		if (cs_idx >= devtype->cs_count)
 			return -EINVAL;
 
+		/* prevent re-configuring a CS that's already been configured */
+		cst = &ts->cs[cs_idx];
+		if (cst->is_applied && memcmp(value, cst->regs,
+					devtype->cs_regs_count*sizeof(u32))) {
+			dev_err(dev, "fsl,weim-cs-timing conflict on %pOF", np);
+			return -EINVAL;
+		}
+
 		/* set the timing for WEIM */
 		for (i = 0; i < devtype->cs_regs_count; i++)
 			writel(value[i],
 				base + cs_idx * devtype->cs_stride + i * 4);
+		if (!cst->is_applied) {
+			cst->is_applied = true;
+			memcpy(cst->regs, value,
+				devtype->cs_regs_count*sizeof(u32));
+		}
 	}
 
 	return 0;
@@ -165,6 +191,7 @@ static int __init weim_parse_dt(struct platform_device *pdev,
 	const struct imx_weim_devtype *devtype = of_id->data;
 	struct device_node *child;
 	int ret, have_child = 0;
+	struct cs_timing_state ts = {};
 
 	if (devtype == &imx50_weim_devtype) {
 		ret = imx_weim_gpr_setup(pdev);
@@ -179,7 +206,7 @@ static int __init weim_parse_dt(struct platform_device *pdev,
 	}
 
 	for_each_available_child_of_node(pdev->dev.of_node, child) {
-		ret = weim_timing_setup(child, base, devtype);
+		ret = weim_timing_setup(&pdev->dev, child, base, devtype, &ts);
 		if (ret)
 			dev_warn(&pdev->dev, "%pOF set timing failed.\n",
 				child);
-- 
2.17.1

