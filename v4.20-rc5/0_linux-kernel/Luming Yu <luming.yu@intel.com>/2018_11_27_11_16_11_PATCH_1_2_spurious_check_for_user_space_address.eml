Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 27 Nov 2018 19:20:17 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 4CB585803C2;
	Tue, 27 Nov 2018 03:17:27 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by fmsmga002-1.fm.intel.com with ESMTP; 27 Nov 2018 03:17:26 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AiZoBbxagbfDoxysRpfYz84f/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpc+zZh7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v6bpgRh31hy?=
 =?us-ascii?q?cdLzM38H/ZhNF+gqxYpxyhvAR/zozPbY2JKPZzZL/RcMkGSWZdWMtaSixPApm7?=
 =?us-ascii?q?b4sKF+cPO/tYr4z8p1sIohu1GAujBP7ywTJPgn/2wKg60+UnEQHJxgAhH88OvW?=
 =?us-ascii?q?/VrNXzKKcdT+S1wLPUwjXEavNbwDHw45XLfBA5ufyAQ658fM7LxUUyGQ7JkE+c?=
 =?us-ascii?q?pZHmMj+JzOgAsmqW4/J9We+hhGMrsRx9rzagy8s2l4XEiIMYxkrZ+Sll3Io4I8?=
 =?us-ascii?q?CzRlRhbt6+CpRQsjmXN4toTcMmRGFloDg6yrIYtp6hZiQKy4ooxwTZa/OZd4iE?=
 =?us-ascii?q?+BXjVPyeITtghXJlfqywhwqq/ES+1uHxUtO43EtEoyZbiNXAq3MA2wDJ5sWGSP?=
 =?us-ascii?q?Zx5kKh1iyO1wDX5OFEO0c0la/DJp4lw74wkIcTsEvaEi/1hkr2lqmWeVsg+uSx?=
 =?us-ascii?q?7OTmbLPmqYGGN4JvlAH+PbohmtalDeQ7LAcORW6b9vq41LH5+k35WrpKguUskq?=
 =?us-ascii?q?bFqJDaOdgbpqmhDg9R04Yj6AiwAy2p0dQFhnQHKFNFeBSaj4nmIV3OIfb4Deuh?=
 =?us-ascii?q?jFSoijtk2/fGPrj5CJXXMnfDiKvhfap660NEyAo819Ff545OBbEGOv7zWlLxu8?=
 =?us-ascii?q?beDh82KAG0x+fnCNNg1oIRQ26PA6mZML/Mvl+M/O4gP+6MZIoNsjbnN/cl/+Lu?=
 =?us-ascii?q?jWM+mVIFf6mp2oUYZGq7HvRhJUWZZ33sj8wFEWcLuAo+UePrhEeDUT5Ve3a9Qa?=
 =?us-ascii?q?Y86isnB4KhCIfJXpqtj6CZ3CenAp1WYXhLBUqXEXfocIWEWO0AaDiILc9jiTEE?=
 =?us-ascii?q?UbmhS4k81RChrgP6yrxnLvbK9S0cr57syN915+jLnxEo6TN0F9id032KT2xsnW?=
 =?us-ascii?q?MHXTk20Lp7oUx80FiD16d4judcFdxS4fNJTwg7OYTdz+x8F9D9RAbBcs2VR1ah?=
 =?us-ascii?q?R9WsGSsxQc4pw98Sf0Z9HM2vgQ3Z0Cq0HbAZjbyLC4Yy8qLHwXfxIcFxy3LF1K?=
 =?us-ascii?q?kki1krWc9PNWyghq5i+AnfHY/Jk0OFl6m0caQQxjLC9GCGzWCWpkFXTBZwUbnZ?=
 =?us-ascii?q?XXAYfkbZsM725l3cQLO0CbQoKA1BydWcJatMcdDpiVRGRPH+ONXReW6xmmGwBQ?=
 =?us-ascii?q?qWybOIdoblZ2Id3CDFAkgejw8T5WqGNRQ5Biq5v2LeDTluFVXzY0Ps8ehysm+7?=
 =?us-ascii?q?QlUzzwGQa01h1ry1+hEOiPyYSvMT2K8EuSg7pzV1Gla9w8zZC96aqwV9e6VcZM?=
 =?us-ascii?q?s34E1b2mLBqwx9IpugIrh4iV4abQt2sF3h1hVtBopbjMglsWklzAxxKaKfzlNM?=
 =?us-ascii?q?bDeY3ZH2Or3KJWj+5hGva6jK2l7A1Naa4LsA6PM9q1/7pgGmClIi82l709lSy3?=
 =?us-ascii?q?ad5ojKABAOXp7rU0c39wJ1p7fVYiQm44PU1HtsMbS7szPY2tIpAvclxQikf9tF?=
 =?us-ascii?q?LKyEEwryGdUAB8eyMOwqh0SpbhUcMeBI9a47I9mpd+Gb166sJupgmiypjX5G4I?=
 =?us-ascii?q?xkzk2D7S58RfPW0JYfxPGY2BCKVzP9jFenr8D2lppIZTAUHmqj1yfkAJRdabF1?=
 =?us-ascii?q?fYYOEW2uOdG4xs1ih57xXH5V7F6iB1Ic1M6pYxaSdEH93QtL2EQToHynnza4zj?=
 =?us-ascii?q?NunzEoqKqfwDLBw+D4eBUbPW5LQXFojU3wLoisk9AaQE+oYhArlBS//0b6xKtb?=
 =?us-ascii?q?pKNlI2nIW0hIfCv2L2BkUqSusLqPeMpP6JIusSVKX+Wwe1GaSrjhoxQE1yPvBX?=
 =?us-ascii?q?dRxDc+dzuyoJX2gwR6iH6BLHZ0tHfYedt/xRDF6NzeRP5R2CELRC15iTnRG1i9?=
 =?us-ascii?q?MMOl/dSSl5ffrO++U3itWYFUcSnu1YmArje05XV2AR2jmPC+gt7nHhI70SPh19?=
 =?us-ascii?q?lqSD/HrBDzYoTw06S6MORnflRnBVPm6sp6HJ1+nZU0hJ0KxXcagZCV92IdkWjv?=
 =?us-ascii?q?KdVbxb7+bH0VSD4Owt7V4xLq1FdtL32X3IL5SmuSwtF6aNakeGMW1Tkw78RLCK?=
 =?us-ascii?q?eS8bxFkjF5olu+rQLNf/d9mi0Rxucp6H4fm+sJohYizj2BArAOGklVJTDslxON?=
 =?us-ascii?q?79ykraRYfmCvcaWr1EplnNCsF7WCogBaWHbkdZYuBy5w7sNjMF3S1H3/8J3reN?=
 =?us-ascii?q?7VbdgLrB2bjw/Aj/RJKJI2jvcFnjBoOWX5vX040eI7iQFu0Iq+vIiGLWVt4a24?=
 =?us-ascii?q?DgRZNj3ze8Mc5DXtgbxCkcaR2oClBo9hFSkTXJv0UfKoFyoftfb9OAaLDjI8sW?=
 =?us-ascii?q?2XGabFEQ+c9UdmrG/PE5axOHGMP3QZydRiRB+AJE1QmgwUXTM6noInGQCu3sDu?=
 =?us-ascii?q?bEB55jUJ7F7ithRM0v5oNwX4UmrHpAaobSo0SIGCLBVM6AFO/VzVMcuY7uJ8BC?=
 =?us-ascii?q?xY+pyhrAqQKm2UfQhIDGcJWlCaCFDnJLWh+d7A8+2ADOqkM/TOeamOqfBZV/qQ?=
 =?us-ascii?q?xZKgzIpm/zWPNsWOJHViDOc72k1MXX9nAcTZhi4PRjcTlyLMac6buRi99jd2rs?=
 =?us-ascii?q?C57PTkRgbv6ZGTBLtVNNVl4wq2jrubN+6MmCZ5Li5V2YkRxXDT0rgQwl4Thztq?=
 =?us-ascii?q?dzmsCrkAsS/NTKTNmq5YFRIbaiVzNNdW4KI4xAVCJcnbitbt3L5ikvE1E0tFVU?=
 =?us-ascii?q?DmmsyxecwKImS9OEnbC0qRKLuGJSPEw8fsbKO4SL1QivhUthKqtTaaFU/jIiqM?=
 =?us-ascii?q?lz3zWx+zNuFMiTmRPAZCt4GlbhZtFW/jQcrmaxKhNt93iDw2wbssiXLLNW4TKz?=
 =?us-ascii?q?58c0xWo72U7CNYhOh/GmNb4npkK+mEhziW7+3CJpkKtvtrB3c8q+UP5HU81qsQ?=
 =?us-ascii?q?7yxeQvFxsDXdo8QooFy8lOSLjD19X0lgsDFO0aaWuERkNu3o69EUXWvB/RQCq3?=
 =?us-ascii?q?SNIxUMu9ZhTNbovvYDmZD0iKvvJWIaoJrv9swGCp2MJQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0APAAA6Jv1bh0O0hNFkHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGDWRInjBFfjUiXLIFzFBgTAYFLhyciNAkNAQMBAQEBAQECARMBAQEIDQk?=
 =?us-ascii?q?IKS+CNiKCbAIkWAkCUANOHwWDHIICBaYyM4VAhG+HYoQrgVc/g26LEQKJHQYBA?=
 =?us-ascii?q?4c+jycHAg2CE48FCxiBWYgvhwOYN4FGgg1wgzyCJxeOHz0BATGBBQEBjWoBAQ?=
X-IPAS-Result: =?us-ascii?q?A0APAAA6Jv1bh0O0hNFkHQEBBQEHBQGBUQgBCwGDWRInjBF?=
 =?us-ascii?q?fjUiXLIFzFBgTAYFLhyciNAkNAQMBAQEBAQECARMBAQEIDQkIKS+CNiKCbAIkW?=
 =?us-ascii?q?AkCUANOHwWDHIICBaYyM4VAhG+HYoQrgVc/g26LEQKJHQYBA4c+jycHAg2CE48?=
 =?us-ascii?q?FCxiBWYgvhwOYN4FGgg1wgzyCJxeOHz0BATGBBQEBjWoBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,286,1539673200"; 
   d="scan'208";a="54991369"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 27 Nov 2018 03:16:24 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729545AbeK0WNt (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 27 Nov 2018 17:13:49 -0500
Received: from mga07.intel.com ([134.134.136.100]:5178 "EHLO mga07.intel.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726621AbeK0WNt (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 27 Nov 2018 17:13:49 -0500
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from fmsmga001.fm.intel.com ([10.253.24.23])
  by orsmga105.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 27 Nov 2018 03:16:14 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,286,1539673200"; 
   d="scan'208";a="114082877"
Received: from powerlab.fi.intel.com (HELO powerlab.backendnet) ([10.237.71.25])
  by fmsmga001.fm.intel.com with ESMTP; 27 Nov 2018 03:16:13 -0800
From: Luming Yu <luming.yu@intel.com>
To: linux-kernel@vger.kernel.org
Subject: [PATCH 1/2] spurious check for user space address
Date: Tue, 27 Nov 2018 13:16:11 +0200
Message-Id: <20181127111612.74578-1-luming.yu@intel.com>
X-Mailer: git-send-email 2.14.4
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

we saw a suspected spurious fault that failed VMA
access check but passed spurious check for a user
space address access of (rw,execut). The patch is
trying to catch the case which might have indicated
a stale TLB (software bug found) and a harmful
spruious fault.

Signed-off-by: Luming Yu <luming.yu@intel.com>
Signed-off-by: Yongkai Wu <yongkaiwu@tencent.com>
---
 arch/x86/mm/fault.c | 95 ++++++++++++++++++++++++++++++-----------------------
 1 file changed, 54 insertions(+), 41 deletions(-)

diff --git a/arch/x86/mm/fault.c b/arch/x86/mm/fault.c
index 71d4b9d4d43f..5e2a49010d87 100644
--- a/arch/x86/mm/fault.c
+++ b/arch/x86/mm/fault.c
@@ -1004,29 +1004,7 @@ static int spurious_kernel_fault_check(unsigned long error_code, pte_t *pte)
 	return 1;
 }
 
-/*
- * Handle a spurious fault caused by a stale TLB entry.
- *
- * This allows us to lazily refresh the TLB when increasing the
- * permissions of a kernel page (RO -> RW or NX -> X).  Doing it
- * eagerly is very expensive since that implies doing a full
- * cross-processor TLB flush, even if no stale TLB entries exist
- * on other processors.
- *
- * Spurious faults may only occur if the TLB contains an entry with
- * fewer permission than the page table entry.  Non-present (P = 0)
- * and reserved bit (R = 1) faults are never spurious.
- *
- * There are no security implications to leaving a stale TLB when
- * increasing the permissions on a page.
- *
- * Returns non-zero if a spurious fault was handled, zero otherwise.
- *
- * See Intel Developer's Manual Vol 3 Section 4.10.4.3, bullet 3
- * (Optional Invalidation).
- */
-static noinline int
-spurious_kernel_fault(unsigned long error_code, unsigned long address)
+static int spurious_page_table_check(unsigned long error_code, unsigned long address)
 {
 	pgd_t *pgd;
 	p4d_t *p4d;
@@ -1035,19 +1013,6 @@ spurious_kernel_fault(unsigned long error_code, unsigned long address)
 	pte_t *pte;
 	int ret;
 
-	/*
-	 * Only writes to RO or instruction fetches from NX may cause
-	 * spurious faults.
-	 *
-	 * These could be from user or supervisor accesses but the TLB
-	 * is only lazily flushed after a kernel mapping protection
-	 * change, so user accesses are not expected to cause spurious
-	 * faults.
-	 */
-	if (error_code != (X86_PF_WRITE | X86_PF_PROT) &&
-	    error_code != (X86_PF_INSTR | X86_PF_PROT))
-		return 0;
-
 	pgd = init_mm.pgd + pgd_index(address);
 	if (!pgd_present(*pgd))
 		return 0;
@@ -1090,12 +1055,52 @@ spurious_kernel_fault(unsigned long error_code, unsigned long address)
 
 	return ret;
 }
+
+/*
+ * Handle a spurious fault caused by a stale TLB entry.
+ *
+ * This allows us to lazily refresh the TLB when increasing the
+ * permissions of a kernel page (RO -> RW or NX -> X).  Doing it
+ * eagerly is very expensive since that implies doing a full
+ * cross-processor TLB flush, even if no stale TLB entries exist
+ * on other processors.
+ *
+ * Spurious faults may only occur if the TLB contains an entry with
+ * fewer permission than the page table entry.  Non-present (P = 0)
+ * and reserved bit (R = 1) faults are never spurious.
+ *
+ * There are no security implications to leaving a stale TLB when
+ * increasing the permissions on a page.
+ *
+ * Returns non-zero if a spurious fault was handled, zero otherwise.
+ *
+ * See Intel Developer's Manual Vol 3 Section 4.10.4.3, bullet 3
+ * (Optional Invalidation).
+ */
+static noinline int
+spurious_kernel_fault(unsigned long error_code, unsigned long address)
+{
+	/*
+	 * Only writes to RO or instruction fetches from NX may cause
+	 * spurious faults.
+	 *
+	 * These could be from user or supervisor accesses but the TLB
+	 * is only lazily flushed after a kernel mapping protection
+	 * change, so user accesses are not expected to cause spurious
+	 * faults.
+	 */
+	if (error_code != (X86_PF_WRITE | X86_PF_PROT) &&
+	    error_code != (X86_PF_INSTR | X86_PF_PROT))
+		return 0;
+
+	return spurious_page_table_check(error_code, address);
+}
 NOKPROBE_SYMBOL(spurious_kernel_fault);
 
 int show_unhandled_signals = 1;
 
 static inline int
-access_error(unsigned long error_code, struct vm_area_struct *vma)
+access_error(unsigned long error_code, unsigned long address, struct vm_area_struct *vma)
 {
 	/* This is only called for the current mm, so: */
 	bool foreign = false;
@@ -1120,19 +1125,27 @@ access_error(unsigned long error_code, struct vm_area_struct *vma)
 	if (error_code & X86_PF_WRITE) {
 		/* write, present and write, not present: */
 		if (unlikely(!(vma->vm_flags & VM_WRITE)))
-			return 1;
+			goto maybe_spurious;
 		return 0;
 	}
 
 	/* read, present: */
 	if (unlikely(error_code & X86_PF_PROT))
-		return 1;
+		goto maybe_spurious;
 
 	/* read, not present: */
 	if (unlikely(!(vma->vm_flags & (VM_READ | VM_EXEC | VM_WRITE))))
-		return 1;
+		goto maybe_spurious;
 
 	return 0;
+
+maybe_spurious:
+	if (spurious_page_table_check(error_code, address)) {
+		WARN_ONCE(1, "spurious fault? Failed VMA check, passed page table check!\n");
+		return 0;
+	}
+
+	return 1;
 }
 
 static int fault_in_kernel_space(unsigned long address)
@@ -1402,7 +1415,7 @@ void do_user_addr_fault(struct pt_regs *regs,
 	 * we can handle it..
 	 */
 good_area:
-	if (unlikely(access_error(sw_error_code, vma))) {
+	if (unlikely(access_error(sw_error_code, address, vma))) {
 		bad_area_access_error(regs, sw_error_code, address, vma);
 		return;
 	}
-- 
2.14.4

