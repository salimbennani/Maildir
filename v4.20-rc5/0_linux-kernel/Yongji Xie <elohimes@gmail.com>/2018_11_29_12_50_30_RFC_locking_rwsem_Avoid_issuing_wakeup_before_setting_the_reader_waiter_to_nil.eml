Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 08:41:25 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id F37835802E4;
	Thu, 29 Nov 2018 04:53:53 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga001-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 04:53:53 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AdQGaNB+cuhEMBP9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1+gXIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDwULs6Wymt771zRRHoli?=
 =?us-ascii?q?kJKjA3/mLQhMxrlKJWogmsqwBjz4POfI2YLuZycr/bcNgHRWRBRMFRVylZD4y+?=
 =?us-ascii?q?aIsPCeUBPeRZr4LgplQOrAWxDhSrCezxzj9IgX/23aw/0+s/CgHLxwMgH9cUv3?=
 =?us-ascii?q?TVqNX5LrsdUeewzKTRyzjIcvBY2S/l5YTWbhwspeuAUa9+fMbP00UjCgDIgkmK?=
 =?us-ascii?q?pYHkPT6ZzvkBv3SG4+Z6Ue+ihXQrpxxzrzSy3Msgl4rEi4ATx1vZ7yt22pw1Ks?=
 =?us-ascii?q?e9SENjYd6rDp9QtyaCOotoTcMtXXtotDw5yrIYo567ejYFyJA9yx7YcfyHfJCE?=
 =?us-ascii?q?4hPlVOmPPTd1nGxpdK67ihqo7EStxPPwWtOp3FtJsiZJiNjBu3IV2xzW8MeHS/?=
 =?us-ascii?q?99/km72TaI0gDe8uVEIUEylarGJJ8t270wmYQJsUTFACD2nFz6jKiYd0Ui5Oeo?=
 =?us-ascii?q?8f/qYqvpppCCLY94kAL+Pbo0msy5H+s4NhICX2+B+eSzzLHj51H2QK1Wjv0qla?=
 =?us-ascii?q?nUqJTaJcUYpqGnGQNU3Zsj5g27Dzen1tQYgHYGIEhEeBKBk4jmJVXOLOrkAve4?=
 =?us-ascii?q?hlSmiC1ryOzePr39HpXNKWDOkLf7crZ8905T0g0zwcpf55JJEL4BJv3zV1T1tN?=
 =?us-ascii?q?zZCB85LgO1z/zmCNV7yoMRR2aPDrWFP6PVtF+C/vgvLPWUZI8JpDb9LOAo5/zp?=
 =?us-ascii?q?jXAng1Mdfq6p3Z0RaHC/BflmJ0SZYXzxgtYOC2sKvww+TPD0h12GSzJce3GyX6?=
 =?us-ascii?q?ck7DEhFI2mFZvDRpyqgLGZxii7BZ1WZmdFClyWC3fnbYeEVuwIaCKTJM9hjzMF?=
 =?us-ascii?q?WaKgS48nyRGhqgv6x6B7IerT/y0SrYjj28Rt5+3PiREy8iR5D8eH3GGLVW10mm?=
 =?us-ascii?q?IISCUw3KBwukF9zlaD0a5lg/1XD9BT5vVJUhskOp7Y1eB1F9fyWgfZdNeTVFmm?=
 =?us-ascii?q?WsmmAS02Tt8p3tABeVh9FMu4ghDDxSWqBaQVmKKNBJAz9qLc3H3xJ8JmxnbC1a?=
 =?us-ascii?q?khiUQmQ8RVOW2ngK5/6xbcB4rTn0qFkKaqcLwW3DTR+2eb0WqOoEZYXRZtXqrf?=
 =?us-ascii?q?Q3AQeFHardTj6UPEVL+hF7InPxBFyc6DLKtKd9LogU9HRPflJNTRfWaxl32sCh?=
 =?us-ascii?q?aPw7OGdJDqdHkF3CXBFEgElBge/WqHNQg7ASehv2LeDTx0GVLzeU/s9vN+qHe6?=
 =?us-ascii?q?Tk8ywAGHdElh17uz+h4Iiv2QUfIT3rQYuCg/rzV4Bkqy39XTC9CYvQpuYL1cYc?=
 =?us-ascii?q?8h4FdAzW/WrQh9MYKvLq98hl8SaR94v17z2BptDIVAks8qrG0xwQp2KKKY1k5B?=
 =?us-ascii?q?djyC0ZDxPL3XNnf9/BS1Z6HK3VHe1c6c+r0T5/Qgt1XjoAapG1Ii8nV6ydVaz2?=
 =?us-ascii?q?GQ55TKDAUIV5LxXV069xx7p7Hcfyk86JnY1XxqMamorDDC38glC/ciyhalZ91f?=
 =?us-ascii?q?Kr+LFBfuE80GAMijMPYqm1m1YR0eJuBd6ak0M9mgd/SYwq6rPf9sky68gmRD/Y?=
 =?us-ascii?q?9yzFiM9y16SuPT25YFwveY3haIVjvmjVehtNz3lp5AZT0IAmW/zi3kDpZLZqJu?=
 =?us-ascii?q?ZYYLFXuuI8qvy9R+hp7hQX5Z+ES4B1Mb3s+kYh6Sb1373Q1N2kUbu32nmS2kzz?=
 =?us-ascii?q?NqlzEltLaQ3CvLw+76bhoIJnZLRHV+jVfrOYW0jcoVXFKrbwgqkxup/136yLJY?=
 =?us-ascii?q?pKR8LmnTR1lHfy7tImFmU6uwsKeCYsFV5JMptyVXTPqzYVSARrHhpBsa1jvpH3?=
 =?us-ascii?q?FCyzAjazGqppL5kgR6iW2HK3Z/tnjZecB2xRrE4NzcRPhR3icJRSViiDnXAES8?=
 =?us-ascii?q?MMet/dmOi5jDteW+XXq7VpJPaSnr0Z+AtCyj6G1pGxK/nuq/mt36EQcg1y/72M?=
 =?us-ascii?q?JnVSHJrBb6f4nq2L62MeNhfkl0GlD879B2FZ15kos1nJsQw2QVho2J/Xoblmf+?=
 =?us-ascii?q?KdBb2aP9bHUXXzIKzcDa4BP52EJ9NHKG3Jz2Vm+SwsZ6Y9m6Y2UW2j8y7sxQCa?=
 =?us-ascii?q?eU6qBEkjVxolaisQ3RZv19lC8HyfQy8H4an/0JuA01wyWBBbASGFNUPC32mBSO?=
 =?us-ascii?q?8tC+t75XZGe0fLi01Up+m82hDb6YrgFdXnb5ZoktHStq4spjN1LM1WX56pv4d9?=
 =?us-ascii?q?nIcdITqhqUng/bgOdPL5IxkucKiTBjOWLgpnAlz+87jRpz3ZC1poSHKmNt/L6n?=
 =?us-ascii?q?DR5cLDH6e8QT+jT1h6ZEgsmWx5yvHolmGjgTXpvnV/eoHywJtfj9KwaCCj48qm?=
 =?us-ascii?q?qYGbrCGw+Q8lxmomnLE5CqMXGXOXYYwc9jRBmbOExQngQUUC8mkZ4+EwCg3Nbh?=
 =?us-ascii?q?f1th5jAN+l74rQNBy+JvNxniS2ffuR2najEuRJiEKxpW6A5C6lzRMcyf6OJzAi?=
 =?us-ascii?q?5Z8oegrAyLNmyUeQBIAXsVVUyDAlDpJqOu6sXY8+iEGuq+KOPDYbWQpuxfVPeI?=
 =?us-ascii?q?xpOv3pFl/zaWMcWPMWdtD+cm2kpYRn15H8XZmzMSSy0YjS7NbsibpAui9S1ztM?=
 =?us-ascii?q?yw7PPrWAf374uVF7RSKclv+wyxgaqbLeGQmT12KSxG2ZIM33PIzLkf0UUWiyFv?=
 =?us-ascii?q?cTmtDLsBuTTMTKLWhq9YERobZzlvO8tP6qI2xhNNNtLDitPpyr54ieY4C0tEVV?=
 =?us-ascii?q?zkgM2medYGLH29NFzZAkaGL7CGJTzNw8HqbqKwU7xQjONItxKuvTaXCVPsPjOG?=
 =?us-ascii?q?lzPxTRCgLflMjD2HPBxZoIy8cgxiCW7mTNLnbB20KN52jT0szr0yiXPHLmocMT?=
 =?us-ascii?q?l6c0NQobyc9yJYgvNjG2Nf6nppN/WLmyGc77qQFpFDqfZ3Dz5mv+Nc7m4zx7Zc?=
 =?us-ascii?q?4GdDXvMx0C7TqNFpi0urnumG1nxsVx8K4ilKgIbNsUhrMqLf3pBaXDDP+xdew3?=
 =?us-ascii?q?+XDkE7oN1qCNyni6FdgozCkKXzKTJP6Prb+MIdA47fL8fRYylpCgbgBDOBVFhN?=
 =?us-ascii?q?djWsL2yK30E=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AWAACF4P9bh0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBg2snjBGMCFABAQaBSYkKA26NM4FzEgEBGBMBh3MiNAkNAQMBAQE?=
 =?us-ascii?q?BAQECARMBAQEIDQkIKSMMgjYigmwCJBkBGx0BAwIJAgUaMQMgEQEFASMSBQ+DD?=
 =?us-ascii?q?YFpAQMIDAEFmkA8jAkWBQEXgncFhD4KGScNXYE3AgYSh1mDD4EcF3iBB4ERgmS?=
 =?us-ascii?q?LCgKJB4cWkAYJkTICFolYh0MBiHiPLQIRBQ8hgSWCDTMaCBsVO4JsghsMFxKDO?=
 =?us-ascii?q?IpgMzKBAgMBASETjQQBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AWAACF4P9bh0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBg2s?=
 =?us-ascii?q?njBGMCFABAQaBSYkKA26NM4FzEgEBGBMBh3MiNAkNAQMBAQEBAQECARMBAQEID?=
 =?us-ascii?q?QkIKSMMgjYigmwCJBkBGx0BAwIJAgUaMQMgEQEFASMSBQ+DDYFpAQMIDAEFmkA?=
 =?us-ascii?q?8jAkWBQEXgncFhD4KGScNXYE3AgYSh1mDD4EcF3iBB4ERgmSLCgKJB4cWkAYJk?=
 =?us-ascii?q?TICFolYh0MBiHiPLQIRBQ8hgSWCDTMaCBsVO4JsghsMFxKDOIpgMzKBAgMBASE?=
 =?us-ascii?q?TjQQBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,294,1539673200"; 
   d="scan'208";a="54218941"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 04:53:52 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728279AbeK2Xzu (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 29 Nov 2018 18:55:50 -0500
Received: from mail-pf1-f196.google.com ([209.85.210.196]:35564 "EHLO
        mail-pf1-f196.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727402AbeK2Xzt (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 29 Nov 2018 18:55:49 -0500
Received: by mail-pf1-f196.google.com with SMTP id z9so977645pfi.2
        for <linux-kernel@vger.kernel.org>; Thu, 29 Nov 2018 04:50:34 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=from:to:cc:subject:date:message-id;
        bh=ND9ZMiFSs7gvb+oNn4AdICkUx/3oAt1Y/vutGLYwcH4=;
        b=GiHZmoCeUOvh+Ct/FMVj+KG2u4GTk6Mn6spQbmiuO6aQpiTZkM5n+M+/MKzgLSHpyw
         NauwfrpiS9V3tFLnZIFOPY+GkBratWag8FChqpsdPEE/hBl6ZKTDOTp/n2W0YsKo9p5t
         vAfC6rIbn/Gw1Yywll8P32WPGqdC+wSD/CyjJbSoIEKY7Inj4CgtPp5QVqYxxkh3slJR
         PwKwa8cKMGFD1zJxuQXGu2/+2D4KbVULJvIkaGZcx5ffoTMhZYEAjW3aHEDTR0vJZrAJ
         MA267UuQgWy5Waq4Bzl7wgDQhnHt3+JG1d/RmoG8tx19CwHCZF1YjUSvV+iecQOOyk46
         V7zg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id;
        bh=ND9ZMiFSs7gvb+oNn4AdICkUx/3oAt1Y/vutGLYwcH4=;
        b=a0Rs5/PhqZVdNqWUQHWV1cfcWgjTpf72u0uTR1nQPX/g1J5p9yUnJCQLQwnQiTy1Z3
         /p62k6j8nqPrxLEkWZ2SHC9UNzKV79Lny4kLw/DEeaB2TuXNVNAx8CTFL19SqfCaPdU/
         vhLk7cl+qX+yX9H8JbrNZsZd1Mc8T7wt3SVIZdI+uVs07tRSTQaqtZA5GD1KyayDdcO7
         XG18W5RXGN6dIJO6wcDBrCtgqe9xzwnjlHfEwTS81eno9jlre/HfW4fKen3AQt/UUdj4
         rhpr9P1un5YkaJAf08O23ArDorTcLrkOz0lKItrklN2lowCJ0Ji+stZCU/vQUc+wSzsz
         CsxQ==
X-Gm-Message-State: AA+aEWaGEhwOJaYeN0OlTFkQQB9KpHszxlC2fXj2yi54AuJ5waAEUeoq
        a4jIjYgr05YsZurnYSxx6SQ=
X-Google-Smtp-Source: AFSGD/UHkUP+zw7ZHo4Nr1L3aq/IfE03IP3vAkb0BOkF1JzTiju9rNtXSYM2bee2Kyfv2Mo67Eaarg==
X-Received: by 2002:a63:d818:: with SMTP id b24mr1116272pgh.174.1543495833760;
        Thu, 29 Nov 2018 04:50:33 -0800 (PST)
Received: from localhost ([101.93.171.187])
        by smtp.gmail.com with ESMTPSA id n186sm5287399pfn.137.2018.11.29.04.50.32
        (version=TLS1_2 cipher=AES128-SHA bits=128/128);
        Thu, 29 Nov 2018 04:50:33 -0800 (PST)
From: Yongji Xie <elohimes@gmail.com>
X-Google-Original-From: Yongji Xie <xieyongji@baidu.com>
To: peterz@infradead.org, mingo@redhat.com, will.deacon@arm.com
Cc: linux-kernel@vger.kernel.org, xieyongji@baidu.com,
        zhangyu31@baidu.com, liuqi16@baidu.com, yuanlinsi01@baidu.com,
        nixun@baidu.com, lilin24@baidu.com
Subject: [RFC] locking/rwsem: Avoid issuing wakeup before setting the reader waiter to nil
Date: Thu, 29 Nov 2018 20:50:30 +0800
Message-Id: <1543495830-2644-1-git-send-email-xieyongji@baidu.com>
X-Mailer: git-send-email 1.7.9.5
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From: Xie Yongji <xieyongji@baidu.com>

Our system encountered a problem recently, the khungtaskd detected
some process hang on mmap_sem. But the odd thing was that one task which
is not on mmap_sem.wait_list still sleeps in rwsem_down_read_failed().
Through code inspection, we found a potential bug can lead to this.

Imaging this:

Thread 1                                  Thread 2
                                          down_write();
rwsem_down_read_failed()
 raw_spin_lock_irq(&sem->wait_lock);
 list_add_tail(&waiter.list, &wait_list);
 raw_spin_unlock_irq(&sem->wait_lock);
                                          __up_write();
                                           rwsem_wake();
                                            __rwsem_mark_wake();
                                             wake_q_add();
                                             list_del(&waiter->list);
                                             waiter->task = NULL;
 while (true) {
  set_current_state(TASK_UNINTERRUPTIBLE);
  if (!waiter.task) // true
      break;
 }
 __set_current_state(TASK_RUNNING);

Now Thread 1 is queued in Thread 2's wake_q without sleeping. Then
Thread 1 call rwsem_down_read_failed() again because Thread 3
hold the lock, if Thread 3 tries to queue Thread 1 before Thread 2
do wakeup, it will fail and miss wakeup:

Thread 1                                  Thread 2      Thread 3
                                                        down_write();
rwsem_down_read_failed()
 raw_spin_lock_irq(&sem->wait_lock);
 list_add_tail(&waiter.list, &wait_list);
 raw_spin_unlock_irq(&sem->wait_lock);
                                                        __rwsem_mark_wake();
                                                         wake_q_add();
                                          wake_up_q();
                                                         waiter->task = NULL;
 while (true) {
  set_current_state(TASK_UNINTERRUPTIBLE);
  if (!waiter.task) // false
      break;
  schedule();
 }
                                                        wake_up_q(&wake_q);

In another word, that means we might issue the wakeup before setting the reader
waiter to nil. If so, the wakeup may do nothing when it was called before reader
set task state to TASK_UNINTERRUPTIBLE. Then we would have no chance to wake up
the reader any more, and cause other writers such as "ps" command stuck on it.

This patch is not verified because we still have no way to reproduce the problem.
But I'd like to ask for some comments from community firstly.

Signed-off-by: Xie Yongji <xieyongji@baidu.com>
Signed-off-by: Zhang Yu <zhangyu31@baidu.com>
---
 kernel/locking/rwsem-xadd.c | 11 +++++++++--
 1 file changed, 9 insertions(+), 2 deletions(-)

diff --git a/kernel/locking/rwsem-xadd.c b/kernel/locking/rwsem-xadd.c
index 09b1800..50d9af6 100644
--- a/kernel/locking/rwsem-xadd.c
+++ b/kernel/locking/rwsem-xadd.c
@@ -198,15 +198,22 @@ static void __rwsem_mark_wake(struct rw_semaphore *sem,
 		woken++;
 		tsk = waiter->task;
 
-		wake_q_add(wake_q, tsk);
+		get_task_struct(tsk);
 		list_del(&waiter->list);
 		/*
-		 * Ensure that the last operation is setting the reader
+		 * Ensure calling get_task_struct() before setting the reader
 		 * waiter to nil such that rwsem_down_read_failed() cannot
 		 * race with do_exit() by always holding a reference count
 		 * to the task to wakeup.
 		 */
 		smp_store_release(&waiter->task, NULL);
+		/*
+		 * Ensure issuing the wakeup (either by us or someone else)
+		 * after setting the reader waiter to nil.
+		 */
+		wake_q_add(wake_q, tsk);
+		/* wake_q_add() already take the task ref */
+		put_task_struct(tsk);
 	}
 
 	adjustment = woken * RWSEM_ACTIVE_READ_BIAS - adjustment;
-- 
2.2.3

