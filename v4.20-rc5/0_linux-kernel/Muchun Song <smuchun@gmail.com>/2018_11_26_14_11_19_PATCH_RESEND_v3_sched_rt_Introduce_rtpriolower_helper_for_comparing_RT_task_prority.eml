Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 26 Nov 2018 22:39:21 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 3725558046A;
	Mon, 26 Nov 2018 06:11:40 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by fmsmga001-1.fm.intel.com with ESMTP; 26 Nov 2018 06:11:39 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AQdibpRY/mUUpNTI2yylWKYn/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpc+zbB7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v6bpgRh31hy?=
 =?us-ascii?q?cdLzM38H/ZhNF+gqxYpxyhvAR/zozPbY2JKPZzZL/RcMkGSWZdWMtaSixPApm7?=
 =?us-ascii?q?b4sKF+cPOvtYoJX9p1sTqxu1GBSiBOTpyj9Hm3T72rY60+E8EQ7a3AwgAtQOvW?=
 =?us-ascii?q?/brNXwLqgSUOS1wLPUwjXEavNbwDHw45XLfBA5ufyAQ658fM7LxUUyGQ7JkE+c?=
 =?us-ascii?q?pZHmMj+JzOgAsmqW4/J9We6zlmIrsQJ8rzq1yssyhYTEgpgZx1TL+Ch/3Y07P8?=
 =?us-ascii?q?e3SFRhbt6hCJZQtz+VN49xQs46XWFotzg1yqcctZ64YicK0pInyADba/CddIiI?=
 =?us-ascii?q?+B3jWP6QITd+mn1lZKqyiwiu/UWk0OHwS8e53EhQoiZYkdTAqmoB2h3R58SfT/?=
 =?us-ascii?q?ty5Eah2TKB1wDJ7eFEJFg5la7aK54n374xmYMfsUfdES/snkX5kquWelwj+umm?=
 =?us-ascii?q?7eTofK/mq4SCN497lA7+KL4ims+hDuQiNAgBQWyb9f671L358k31WK9KgeEukq?=
 =?us-ascii?q?nFrJDaItwWpqq4Aw9WzIkv8Rm+Dyq93dQcnHkHKk9FeR2dg4joPVHOPO73DfOl?=
 =?us-ascii?q?j1uwlzdrwujMPqf9DZXVMnjDjLDhcK5960FGyQoz0cpQ55VOBrEBPfL8QEnxtN?=
 =?us-ascii?q?PDAx89Mgy0xfvnCdpn2oMfX2KPHrGWMKfIvVCU4eIvJvGGZJUJtzblN/gl+/nu?=
 =?us-ascii?q?gGc7mV8aY6alx5gXaHe+HvRgJEWUen7sgtYHEWcXsQsyVu3qiFueUTFNY3a+Rb?=
 =?us-ascii?q?4z5jY+CIi+F4fMWpitgKCd3Ce8BpBZfHtGClCLEXfrbYmEQe0DaCCJL89lkzwE?=
 =?us-ascii?q?U6WhSoA72RGvsg/616RoLu7O9iIEspLj0cB/5/fPmhEq6Tx0E8Od3nmOT25umG?=
 =?us-ascii?q?MEXTs23KFlrkx7xVeOyqx4g/1eFdxO6PJFSAY6NZjAz+NkD9D+QB7OftCMSFy+?=
 =?us-ascii?q?WNWpHSkxTs4tw98Je0tyBs+tjg7d0CawA78ajbqLBIcq/aLa2HTxI8V9y3PC1K?=
 =?us-ascii?q?Q6i1kmQ81PNXCph6Jl9gjTAZLJnFudl6qwaasc2yvN/n+ZzWWSpEFYTBJwUaLd?=
 =?us-ascii?q?UH8CfETWs8r26lnCT7C0D7QnKRVOyciZJ6tOa93pi0hGRfj5NNTfZWKxh3m/BR?=
 =?us-ascii?q?KSyryQa4rqfn0X3D/BB0gcjwAT4XGGOBAiBiegpmLeCyBuFVLvYk/27elysnS7?=
 =?us-ascii?q?TlUwzwGLaU1h2KG4+hoUhfyaVvMS0agIuCYnqzVoAlm928jaBMaHpwpkZK9ce8?=
 =?us-ascii?q?8y4E9b1WLFsAxwJoavL6R8iV8RbQt2v1ni2A5qCopdi8cqqnAqzA1sKa+D1FNB?=
 =?us-ascii?q?djWY3Y3/O7HNK2ny+gyvZLDS2l3EzNmW/aIP4uwiq1r/pAGpClYi83J/3thVzn?=
 =?us-ascii?q?uQ/InFABATUJLxSEk38Rd6qqreYik84YPUyHJtPbO1sj/Ex9ImGu8lxgy8cNdY?=
 =?us-ascii?q?NaOODBXyHNECB8iyNOwqnECkbggFPO9O7qE0Jd6pd/yc1K6tIulghjOmgX1b74?=
 =?us-ascii?q?9n1kKD6jRzSvTP35YD2PyY2gqHVzHhjFauqMz3mIZEZS0MEWq70yTrGIlRZqhq?=
 =?us-ascii?q?d4YRFWiuO9G3xsl5h5P1W39Y9USvBlMc1M+yZBqSaUfw3QlR1UQRvHymljG0zz?=
 =?us-ascii?q?1ykzE1sKWf2DbCzPjldBoCImRLXnVtjU/wIYioiNAXREqoYBIzlBum5kb6wLJX?=
 =?us-ascii?q?pL9lIGnQQkdIfi72IH9kUqarsrqCYshP6I4nsClNUeS8Z0yaRaD5oxcAzyzjGG?=
 =?us-ascii?q?5ezighdz62opX5gwB6iGWFIXdztnXZftt8xRXe5NzaXvNR2jsGRC9liTjYHFS8?=
 =?us-ascii?q?Pt+p/cmKmJfHqOyxS2WhVphLeynx0YyArDe75XFtARCnnPC8gNznHRI60S/mzd?=
 =?us-ascii?q?ZqUyrIoQ34Yonq0aS6LO1mclNpBF/698p1BIV+npEsi5EX3HgQno+V8mYfkWfv?=
 =?us-ascii?q?LdVb3rrzbH8MRT4I2dHZ+gbk11N4LnKV2Y35TG6SzdV7Z9m1eW4W3iM978ZXCK?=
 =?us-ascii?q?ab9rBEnC11okamogLVe/RygjAdyf424n4An+4JoBYtzjmaAr0KAUlYOinsmw6J?=
 =?us-ascii?q?7t+kqqVXeX2vcaOx1EdlmdChDbeCohxTWXrje5ciGzNw4dt7MF7WzHLz7YTkcs?=
 =?us-ascii?q?HKbd0Prh2UjwvAj+9NJZ0qjPUKgi5nOX/nsX0h1u42lhhu3ZC8vIiaJGRh5qO5?=
 =?us-ascii?q?AhhENjLrY8Mf4C3ijaFbnsyOxYCgAo1hGikXXJvvVf+oEigdtfH5OAaVCjE8tm?=
 =?us-ascii?q?2XGbnCHQ+c9UdmqWjAE4uwOnGTJXkZy8hiRRaHKExehgAUQCs1npojGg+2w8zh?=
 =?us-ascii?q?dV9z5ioN6V7gthtM1uVoOgH/U2fYuQeocyo0R4KZLBZM9QFC4EHVMcOF4+J3Hi?=
 =?us-ascii?q?FY+IChrQOXJmyaYQRIEX8GWkieC1//Obmu4MHK8/KECeqmM/vOfbKOpPReV/iW?=
 =?us-ascii?q?xJKv0Yhm/zeWOsWMJHliCPI71VRZXXBkAMTUgDEPSy0RlyLQYM+Xvha8+itrrs?=
 =?us-ascii?q?+h9PTnQh7g5YyKC7FKK9Vg5wi2gbufN+6XnCt2MytY2YgWxXDWyLkTxloSiyB1?=
 =?us-ascii?q?ejmpELQAszPNTa3Klq9WCR4bdz18NM9S460g2QlNPNbRisnp2b5gkv41F1BFWE?=
 =?us-ascii?q?T9msGoYMwGOX2yOEnbC0aLKruGIybGw8X2YaO6VL1Rg/9Ytxy2uTaHDUDjOi6P?=
 =?us-ascii?q?mCXuVxCqKetMlj2UPARCuIGhdRZgEWjiQ8jgah2+Md93iyU5wLw0hnzQM24cPi?=
 =?us-ascii?q?Nxc0dMrr2W8CNZje9zG21H7np5M+aEnzyV4PXfKpYT4rNXBXFxluRV51w5xqFT?=
 =?us-ascii?q?4SUCQ+Z63GPKo8JjuUOOk++B0DNrXRNC7DFRi9Glp0JnbIDE/ZldXz7/+xQCpT?=
 =?us-ascii?q?GLDgkBp8ZjItLqsqFUjNPIkfSge39579vI8J5EVIDvI8WdPS95PA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AeAAAq/vtbh0O0hNFiHgEGBwaBUQkLA?=
 =?us-ascii?q?YFaghEnmBGCIYkJjh+BcxIBARgTAYhjIjQJDQEDAQEBAQEBAgETAQEBCA0JCCk?=
 =?us-ascii?q?jDII2IoJsAiQZARsdAQMCCQIFEDsDHgIRAQUBIxIFgxyBaQEDFAEFmWE8jAkWB?=
 =?us-ascii?q?QEXgncFgkSBaQoZJw1agTcCBhKHTIMPgRwXgX+DboMLiAMCiSOGbI9FLgmOBIM?=
 =?us-ascii?q?gCxiBWYd4NocBLIlBhGCJPAIEAgQFAgUPIYElgg0zGggbFWyCO4IbDBcSbQEHg?=
 =?us-ascii?q?kOKXzMygQQBAQGMCgEB?=
X-IPAS-Result: =?us-ascii?q?A0AeAAAq/vtbh0O0hNFiHgEGBwaBUQkLAYFaghEnmBGCIYk?=
 =?us-ascii?q?Jjh+BcxIBARgTAYhjIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2IoJsAiQZA?=
 =?us-ascii?q?RsdAQMCCQIFEDsDHgIRAQUBIxIFgxyBaQEDFAEFmWE8jAkWBQEXgncFgkSBaQo?=
 =?us-ascii?q?ZJw1agTcCBhKHTIMPgRwXgX+DboMLiAMCiSOGbI9FLgmOBIMgCxiBWYd4NocBL?=
 =?us-ascii?q?IlBhGCJPAIEAgQFAgUPIYElgg0zGggbFWyCO4IbDBcSbQEHgkOKXzMygQQBAQG?=
 =?us-ascii?q?MCgEB?=
X-IronPort-AV: E=Sophos;i="5.56,282,1539673200"; 
   d="scan'208";a="41544240"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 26 Nov 2018 06:11:37 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726783AbeK0BFr (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 26 Nov 2018 20:05:47 -0500
Received: from mail-pl1-f196.google.com ([209.85.214.196]:34868 "EHLO
        mail-pl1-f196.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726202AbeK0BFr (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 26 Nov 2018 20:05:47 -0500
Received: by mail-pl1-f196.google.com with SMTP id p8so3649144plo.2
        for <linux-kernel@vger.kernel.org>; Mon, 26 Nov 2018 06:11:32 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=from:to:cc:subject:date:message-id;
        bh=s2/owihrhX8Ds9+oNUcEcQtQy7kzAHAObaBtfpKwRWo=;
        b=TbHl0l5vGDcqTkX5LdYQ7dEJWN/SFEkiGWSalEcT5Ue6rvMfOKWeWgMWFT+mvKLddh
         hS0drdj8e6OGbNlz8xIX/o1P0zZfQ9ofiAXo2f9+cjwgYuQYPFULCM+Dq058r3FbiRAs
         WLsVgV6IabExoJ9L0ZUS3M7+g2U+FQWUI+4MwySgudkxwbtuMI60f0AEJT4nerwFnEtq
         plOiqgr1RoAjdy7qGt4udShCWbMfKNGwgWfMiGUbLF9YXYigLg8F5Ylssbn1CYrigP63
         59re+1cwn8OZKePa8f/khaTZmg2DlYQ/B7lifrlHGvmwwFtab0qr1IUifBTIjI+53keq
         R7Gw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id;
        bh=s2/owihrhX8Ds9+oNUcEcQtQy7kzAHAObaBtfpKwRWo=;
        b=LypKQ2w2h9mvHZJoGZiCVPW+kkU0hI8LtNXrWQeWeFF+QHN8ECqaxAVcnafhsGmM5f
         B5VvLjk8nwJi1EvT2HLjG2E9c2juMVy02FgJDq5IPLt5uB3y/6ADswd1asNEJEr9zli6
         jI+43TmuRAPi5I7HAcqCkcEq2pK+ECJJ/YcnL8yj2rteYcqf1zH0EuwPjNGunzyZC3NY
         qpLh7Zb32IzwVIDOQD9I3N2YhE5Rg3/zAbizyLeiI35V01B5GOp9B8o1PCok+AlmHb7y
         4WUgBal6jlZq0EnleKsCAdYMSFI8aBvhzZbBlPokR5uJpmlboKoTVOdLDxGLrqreRALS
         0mMQ==
X-Gm-Message-State: AA+aEWYYj/x9MHKQBpW9ldmXuT8d0N6VGLt4oBcfOwv9qv3L4zMIAG0D
        U/xWu0viIzSdOgslVhrIq5k=
X-Google-Smtp-Source: AFSGD/VSe0eRZX6fPwDbdRt3nahHkPVkRrZUaMtvvFtiPBYxhHppjkiI9ZgsaA0iTEDE78yaFNixjw==
X-Received: by 2002:a17:902:a40f:: with SMTP id p15mr28423740plq.286.1543241491712;
        Mon, 26 Nov 2018 06:11:31 -0800 (PST)
Received: from ubuntu.localdomain ([101.87.249.94])
        by smtp.gmail.com with ESMTPSA id q5sm536971pfi.165.2018.11.26.06.11.29
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Mon, 26 Nov 2018 06:11:30 -0800 (PST)
From: Muchun Song <smuchun@gmail.com>
To: mingo@kernel.org, peterz@infradead.org
Cc: linux-kernel@vger.kernel.org
Subject: [PATCH RESEND v3] sched/rt: Introduce rt_prio_lower() helper for comparing RT task prority
Date: Mon, 26 Nov 2018 22:11:19 +0800
Message-Id: <20181126141119.5354-1-smuchun@gmail.com>
X-Mailer: git-send-email 2.17.1
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

We use a value to represent the priority of the RT task. But a smaller
value corresponds to a higher priority. If there are two RT task A and B,
their priorities are prio_a and prio_b, respectively. If prio_a is larger
than prio_b, which means that the priority of RT task A is lower than RT
task B. It may seem a bit strange.

In rt.c, there are many if condition of priority comparison. We need to
think carefully about which priority is higher because of this opposite
logic when read those code. So we introduce rt_prio_lower() helper for
comparing RT task prority, which can make code more readable.

Signed-off-by: Muchun Song <smuchun@gmail.com>
---
 kernel/sched/rt.c | 57 +++++++++++++++++++++++++++++------------------
 1 file changed, 35 insertions(+), 22 deletions(-)

diff --git a/kernel/sched/rt.c b/kernel/sched/rt.c
index 9aa3287ce301..f28157c8212b 100644
--- a/kernel/sched/rt.c
+++ b/kernel/sched/rt.c
@@ -101,6 +101,15 @@ void init_rt_rq(struct rt_rq *rt_rq)
 	raw_spin_lock_init(&rt_rq->rt_runtime_lock);
 }
 
+/**
+ * rt_prio_lower(a, b) returns true if the priority a is
+ * lower than the priority b, otherwise return false.
+ */
+static inline bool rt_prio_lower(int a, int b)
+{
+	return a > b;
+}
+
 #ifdef CONFIG_RT_GROUP_SCHED
 static void destroy_rt_bandwidth(struct rt_bandwidth *rt_b)
 {
@@ -262,7 +271,7 @@ static void pull_rt_task(struct rq *this_rq);
 static inline bool need_pull_rt_task(struct rq *rq, struct task_struct *prev)
 {
 	/* Try to pull RT tasks here if we lower this rq's prio */
-	return rq->rt.highest_prio.curr > prev->prio;
+	return rt_prio_lower(rq->rt.highest_prio.curr, prev->prio);
 }
 
 static inline int rt_overloaded(struct rq *rq)
@@ -377,7 +386,7 @@ static void enqueue_pushable_task(struct rq *rq, struct task_struct *p)
 	plist_add(&p->pushable_tasks, &rq->rt.pushable_tasks);
 
 	/* Update the highest prio pushable task */
-	if (p->prio < rq->rt.highest_prio.next)
+	if (rt_prio_lower(rq->rt.highest_prio.next, p->prio))
 		rq->rt.highest_prio.next = p->prio;
 }
 
@@ -498,7 +507,7 @@ static void sched_rt_rq_enqueue(struct rt_rq *rt_rq)
 		else if (!on_rt_rq(rt_se))
 			enqueue_rt_entity(rt_se, 0);
 
-		if (rt_rq->highest_prio.curr < curr->prio)
+		if (rt_prio_lower(curr->prio, rt_rq->highest_prio.curr))
 			resched_curr(rq);
 	}
 }
@@ -1044,7 +1053,7 @@ inc_rt_prio_smp(struct rt_rq *rt_rq, int prio, int prev_prio)
 	if (&rq->rt != rt_rq)
 		return;
 #endif
-	if (rq->online && prio < prev_prio)
+	if (rq->online && rt_prio_lower(prev_prio, prio))
 		cpupri_set(&rq->rd->cpupri, rq->cpu, prio);
 }
 
@@ -1079,7 +1088,7 @@ inc_rt_prio(struct rt_rq *rt_rq, int prio)
 {
 	int prev_prio = rt_rq->highest_prio.curr;
 
-	if (prio < prev_prio)
+	if (rt_prio_lower(prev_prio, prio))
 		rt_rq->highest_prio.curr = prio;
 
 	inc_rt_prio_smp(rt_rq, prio, prev_prio);
@@ -1092,7 +1101,7 @@ dec_rt_prio(struct rt_rq *rt_rq, int prio)
 
 	if (rt_rq->rt_nr_running) {
 
-		WARN_ON(prio < prev_prio);
+		WARN_ON(rt_prio_lower(prev_prio, prio));
 
 		/*
 		 * This may have been our highest task, and therefore
@@ -1424,7 +1433,7 @@ select_task_rq_rt(struct task_struct *p, int cpu, int sd_flag, int flags)
 	 */
 	if (curr && unlikely(rt_task(curr)) &&
 	    (curr->nr_cpus_allowed < 2 ||
-	     curr->prio <= p->prio)) {
+	     !rt_prio_lower(curr->prio, p->prio))) {
 		int target = find_lowest_rq(p);
 
 		/*
@@ -1432,7 +1441,8 @@ select_task_rq_rt(struct task_struct *p, int cpu, int sd_flag, int flags)
 		 * not running a lower priority task.
 		 */
 		if (target != -1 &&
-		    p->prio < cpu_rq(target)->rt.highest_prio.curr)
+		    rt_prio_lower(cpu_rq(target)->rt.highest_prio.curr,
+				  p->prio))
 			cpu = target;
 	}
 	rcu_read_unlock();
@@ -1475,7 +1485,7 @@ static void check_preempt_equal_prio(struct rq *rq, struct task_struct *p)
  */
 static void check_preempt_curr_rt(struct rq *rq, struct task_struct *p, int flags)
 {
-	if (p->prio < rq->curr->prio) {
+	if (rt_prio_lower(rq->curr->prio, p->prio)) {
 		resched_curr(rq);
 		return;
 	}
@@ -1732,7 +1742,8 @@ static struct rq *find_lock_lowest_rq(struct task_struct *task, struct rq *rq)
 
 		lowest_rq = cpu_rq(cpu);
 
-		if (lowest_rq->rt.highest_prio.curr <= task->prio) {
+		if (!rt_prio_lower(lowest_rq->rt.highest_prio.curr,
+				   task->prio)) {
 			/*
 			 * Target rq has tasks of equal or higher priority,
 			 * retrying does not release any lock and is unlikely
@@ -1763,7 +1774,7 @@ static struct rq *find_lock_lowest_rq(struct task_struct *task, struct rq *rq)
 		}
 
 		/* If this rq is still suitable use it. */
-		if (lowest_rq->rt.highest_prio.curr > task->prio)
+		if (rt_prio_lower(lowest_rq->rt.highest_prio.curr, task->prio))
 			break;
 
 		/* try again */
@@ -1823,7 +1834,7 @@ static int push_rt_task(struct rq *rq)
 	 * higher priority than current. If that's the case
 	 * just reschedule current.
 	 */
-	if (unlikely(next_task->prio < rq->curr->prio)) {
+	if (unlikely(rt_prio_lower(rq->curr->prio, next_task->prio))) {
 		resched_curr(rq);
 		return 0;
 	}
@@ -2100,8 +2111,8 @@ static void pull_rt_task(struct rq *this_rq)
 		 * logically higher, the src_rq will push this task away.
 		 * And if its going logically lower, we do not care
 		 */
-		if (src_rq->rt.highest_prio.next >=
-		    this_rq->rt.highest_prio.curr)
+		if (!rt_prio_lower(this_rq->rt.highest_prio.curr,
+				src_rq->rt.highest_prio.next))
 			continue;
 
 		/*
@@ -2121,7 +2132,8 @@ static void pull_rt_task(struct rq *this_rq)
 		 * Do we have an RT task that preempts
 		 * the to-be-scheduled task?
 		 */
-		if (p && (p->prio < this_rq->rt.highest_prio.curr)) {
+		if (p && rt_prio_lower(this_rq->rt.highest_prio.curr,
+				       p->prio)) {
 			WARN_ON(p == src_rq->curr);
 			WARN_ON(!task_on_rq_queued(p));
 
@@ -2133,7 +2145,7 @@ static void pull_rt_task(struct rq *this_rq)
 			 * p if it is lower in priority than the
 			 * current task on the run queue
 			 */
-			if (p->prio < src_rq->curr->prio)
+			if (rt_prio_lower(src_rq->curr->prio, p->prio))
 				goto skip;
 
 			resched = true;
@@ -2167,7 +2179,7 @@ static void task_woken_rt(struct rq *rq, struct task_struct *p)
 	    p->nr_cpus_allowed > 1 &&
 	    (dl_task(rq->curr) || rt_task(rq->curr)) &&
 	    (rq->curr->nr_cpus_allowed < 2 ||
-	     rq->curr->prio <= p->prio))
+	     !rt_prio_lower(rq->curr->prio, p->prio)))
 		push_rt_tasks(rq);
 }
 
@@ -2242,7 +2254,8 @@ static void switched_to_rt(struct rq *rq, struct task_struct *p)
 		if (p->nr_cpus_allowed > 1 && rq->rt.overloaded)
 			rt_queue_push_tasks(rq);
 #endif /* CONFIG_SMP */
-		if (p->prio < rq->curr->prio && cpu_online(cpu_of(rq)))
+		if (rt_prio_lower(rq->curr->prio, p->prio) &&
+		    cpu_online(cpu_of(rq)))
 			resched_curr(rq);
 	}
 }
@@ -2263,18 +2276,18 @@ prio_changed_rt(struct rq *rq, struct task_struct *p, int oldprio)
 		 * If our priority decreases while running, we
 		 * may need to pull tasks to this runqueue.
 		 */
-		if (oldprio < p->prio)
+		if (rt_prio_lower(p->prio, oldprio))
 			rt_queue_pull_task(rq);
 
 		/*
 		 * If there's a higher priority task waiting to run
 		 * then reschedule.
 		 */
-		if (p->prio > rq->rt.highest_prio.curr)
+		if (rt_prio_lower(p->prio, rq->rt.highest_prio.curr))
 			resched_curr(rq);
 #else
 		/* For UP simply resched on drop of prio */
-		if (oldprio < p->prio)
+		if (rt_prio_lower(p->prio, oldprio))
 			resched_curr(rq);
 #endif /* CONFIG_SMP */
 	} else {
@@ -2283,7 +2296,7 @@ prio_changed_rt(struct rq *rq, struct task_struct *p, int oldprio)
 		 * greater than the current running task
 		 * then reschedule.
 		 */
-		if (p->prio < rq->curr->prio)
+		if (rt_prio_lower(rq->curr->prio, p->prio))
 			resched_curr(rq);
 	}
 }
-- 
2.17.1

