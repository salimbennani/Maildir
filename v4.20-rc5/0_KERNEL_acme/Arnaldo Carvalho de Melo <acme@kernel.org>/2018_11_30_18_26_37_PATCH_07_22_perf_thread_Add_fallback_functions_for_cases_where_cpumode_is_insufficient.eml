Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:21:36 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 920F7580213;
	Fri, 30 Nov 2018 10:27:33 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 30 Nov 2018 10:27:33 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AE018AhcWRlQCa/qjNrymhv/IlGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc6/ZRSN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRBDI2i?=
 =?us-ascii?q?coUBAekPM+FaoInzqFQAogC+BRGuCe701jNFhWX70bEg3ug9DQ3L2hErEdIUsH?=
 =?us-ascii?q?TTqdX4LLsfUfqzzKbSyTXMcvRW0irj5YfSaBAhv+uDXbZwccrW1EIgCh3KhUiX?=
 =?us-ascii?q?p4P7OzOV0fkGvm+B4OV8UOKglXUqqwJvrTi1wMcjlI3JipgSylDe+iV02YA4Ls?=
 =?us-ascii?q?C2Rk58ZN6rCppQtyeCOot1XMwiWWdotzg+yrEcvp67ZicKxZI6zBDcc/yKa5aE?=
 =?us-ascii?q?7g7nWeqLPDt1imxpdKiiixux7USs0OzxW8us3FpXrCdIlsPAu3QP2hDJ5cWLV+?=
 =?us-ascii?q?Fx8lqi1DuO0Q3Y9/tKLloulaXBLp4s2r4wmYQXsUTEBiL2hkr2g7GMdkk++ein?=
 =?us-ascii?q?9f7nYrP4qZ+YLYN0jRv+Mqs2lsy+B+Q3LBQOUnCF9eig0LDv51D1TbtUgvEsj6?=
 =?us-ascii?q?XUs4zWKd4aq6O7GwNV15ws6xe7DzeoytQYmnwHIUpBeBKGiYjpJl7PLOn7Dfih?=
 =?us-ascii?q?mVSslilkx/TfMr3mDJTNKGbMkK36cLZj5E5T1hAzwcpc551KELEBJuz8WkvruN?=
 =?us-ascii?q?zfFB85PBS4w/z7B9VlyoMeRWWPD7edMKPTsl+H+PgjIuaRZIIOvDb9Kv4l5+Ph?=
 =?us-ascii?q?jHMjmF8de7Wp0oUTaHyiAvtmJECZa2L2gtgdCWcKohY+TOvyhV2CSzFTZmqyUL?=
 =?us-ascii?q?g75j0hCIKmEJ3MRoaigLGa2Ce7H5tWZn1JC1yWEHfocZmEVOkIaC6IPsBhlTkE?=
 =?us-ascii?q?X6C7S4A9zRGuqBP6y71/I+rW/S0Xq4jv1Nty5+3VkxEy8id5D8Cc02GLUmF1kX?=
 =?us-ascii?q?kERz4w3KBjv0N9zk2P3rR/g/xdDdZT/e9GUh8mNZ7AyOx3E8r9WhnBfteOS1aq?=
 =?us-ascii?q?WM+mDiszTt8qx98OYkB9G8itjxzZ3iqqBaMVmKKPBJAu7q3c2H3xLd5ny3nazK?=
 =?us-ascii?q?khk0UmQsxXOG2lnKF/8RLfB4rIk0qDkaaqer8R3CrM9GeF0GqPs1tUUA92UaXZ?=
 =?us-ascii?q?Q38fYlHaosj+5kPHV7WuE6goMhNdyc6eLatHcsDmgk9YRPj9ItjeY3i+m2GrBR?=
 =?us-ascii?q?mWwLOAa47qe2YY3CXZE0UElwET/XCbNQkxHCuhomTeDCBwGlLreU/j7e5+qHaj?=
 =?us-ascii?q?RE8u0w6Kd1Fh16ay+hMNmPOTUe0T0awetCchsTp0Gk290MzQC9ebowphfaNcYc?=
 =?us-ascii?q?4y4Vtd1GLZsRB9MYKkL6x4mlEedAF3tVv01xprEoVAjdQqrHQywQpuKKKY1VRB?=
 =?us-ascii?q?dy+Y3ZHwILHXNnP+/Be1a67S21He1tmW97wL6PQ5rVXjoQ6oGlAj83Vhz9lazX?=
 =?us-ascii?q?+c6o/WAwoVVJL7Slw3+ARip7HGfik94JvZ2mdoMaaqvT7NxdIoCPE+xRa9YthQ?=
 =?us-ascii?q?KqWEFAz1E80EHMWuLO0qm160bhMLJuxS9ag0P9+4ePuCwqKkIOFgnDe+h2Rd/I?=
 =?us-ascii?q?99yl6M9zZ7SuPQ35cF3uuU0RedWzb9jFeuqMb3mY9faDEWH2q/zzXkBYFLaq1z?=
 =?us-ascii?q?e4YLFXmhI8mtytpigJ7tXmZS9ES/CFMexM+pZR2SYkTn3Q1RyUsYu2anlja/zz?=
 =?us-ascii?q?BulTEmsLCf3C3Xz+v+bhUHPnNES3d4jVfrJ4i5lNQaXEmubwg0mxqp/0f6x65H?=
 =?us-ascii?q?pKthK2nfW1tHfy/zL2t6SKu/qqKCY9JT6JMvqShWUOW8bUqaS7LnuBsaziXjEn?=
 =?us-ascii?q?BaxDA6cTGqp5r4kwZ7iGKbMHZ8sn7ZddtsyhfY4dzWXeRR0SYeRClklTnXAUCx?=
 =?us-ascii?q?P9uz8tWOlJfDsee+W3i6VpJJcinrzoKAtC2l6m1sGhC/m/Gzmtv6EQk1yyP71t?=
 =?us-ascii?q?9qVTnWoxb4eIXky6O6Med/dElyGFD889Z6Gp15koYohJAfw38aio+X/XoGl2f+?=
 =?us-ascii?q?KtFb2aP4bHoQSj8H2d/V4A752EJ9KnKF3Z72VnKYwsF5fdm1fnsW2j4h78BNEK?=
 =?us-ascii?q?qU76ZLnSpvrlq4sALee/59njgGxPsq6X4ahfwJuQU3wiWcBLASAVdXPSj2mxuU?=
 =?us-ascii?q?6NC+qb1dZHyzfrioyEp+gdehAamHogFdW3b2YI0uHCFu4cVkLFLDzmfz5Zr6d9?=
 =?us-ascii?q?nKYtIerRmUkxbGj+hIJ5M9jPsKhSx7OW3juX0p0fI0jRtr3ZuipoiIN31t/L6l?=
 =?us-ascii?q?Ah5fLjD1e8QT+jT3gadfhMmW2Z2vHo56GjUKR5boSfOoEDQPtfXoLQqOETs8qm?=
 =?us-ascii?q?uFFrrbBwOQ9EBmr3fXGZCxK36XPGUZzcllRBSFP0NQmgcUXDEnnpIjEgCq2dfs?=
 =?us-ascii?q?cEN45jAX+175pQFAyuNuNxnjTGjfoB2kZSszSJiaNBBW9B1N51/JMcyC6eJ+By?=
 =?us-ascii?q?NY8YekrAOTMWyXfRhIAXsKWkyZBFDjI7+u6sPb8+WDAuq+Lv3OYaiBqOBEVveI?=
 =?us-ascii?q?w46v3ZVi/zqWKsqPOXxiBeUh2kVfRXB5B9jZmzIXRi0XkCLNctebpAqm9S1xtM?=
 =?us-ascii?q?y/6/PrWATg5YaUD7tSMNNv+w25gKuZNu6Qgjp5Jihc1p8W2XDIz70f1kYIiy5y?=
 =?us-ascii?q?bzmtDagAtSnVQaLQhKBXDh0bayByNMdS7KI8xA5NOcHFhdPvy754leU4C1NEVV?=
 =?us-ascii?q?znh8GoatYGI2C7NFPbGkmLMK6KKiHMw8Hyeam8U6FfjP1Itx2svjaWC1XsPimY?=
 =?us-ascii?q?mDnzSR+uMftAjCWaPBFFvIG9cxBtCXXsTd78ax27NsN3giMywbEumnzKMmscOy?=
 =?us-ascii?q?Bmc0xRtr2Q8T9YgvJnFmxd73plKPOIlDqD4+bEKpYZr/1rDz9wl+Jb5nQ61rRU?=
 =?us-ascii?q?4DtFRPxzhCvdsNpur0u6nemIzzptSABOpSpThIKXoUViPr3U95laVnbC+RIN7G?=
 =?us-ascii?q?OQBAwLpttlENLvva9Qx8PLlKLyLjdC7t3V8dEdB8jSNMKILn4hPQD1Fz7TCQtW?=
 =?us-ascii?q?BQKsYEDZiEsVtfaW8HSP5sw/q57jn7INR6VdWVhzEekVXBdLBtsHdb5tWDognb?=
 =?us-ascii?q?nTp8cS+3O6rB6ZSMgSm53DUbrGCP7qJR6agKNCah9Oxqn3e9dAfrbn0lBvPwEp?=
 =?us-ascii?q?1L/BHFDdCJUU+nVs?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAAB7gAFch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgVqBD4ECFBOMEY4XFGiWTIFzFBgNBgGHdiI0CQ0BAwEBAQEBAQI?=
 =?us-ascii?q?BEwEBAQgNCQgpIwyCNiQBgmIDAwECJAsBDQEBNwEFCQEBGAcfEgNUBgwHBYJRS?=
 =?us-ascii?q?wGBdA0CAwqla4FsM4J2AQEFgTABhXUIh2yDEoEcF4F/gRGCXQeLColXgUeVGQm?=
 =?us-ascii?q?Gf4otCxiCKI53imuCdIp+gUaCDU0wCIMnCQqCCAwXEohMhVkmMgEBAYECAQGNQ?=
 =?us-ascii?q?AEB?=
X-IPAS-Result: =?us-ascii?q?A0ANAAB7gAFch0O0hNFjHAEBAQQBAQcEAQGBUQcBAQsBgVq?=
 =?us-ascii?q?BD4ECFBOMEY4XFGiWTIFzFBgNBgGHdiI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpI?=
 =?us-ascii?q?wyCNiQBgmIDAwECJAsBDQEBNwEFCQEBGAcfEgNUBgwHBYJRSwGBdA0CAwqla4F?=
 =?us-ascii?q?sM4J2AQEFgTABhXUIh2yDEoEcF4F/gRGCXQeLColXgUeVGQmGf4otCxiCKI53i?=
 =?us-ascii?q?muCdIp+gUaCDU0wCIMnCQqCCAwXEohMhVkmMgEBAYECAQGNQAEB?=
X-IronPort-AV: E=Sophos;i="5.56,299,1539673200"; 
   d="scan'208";a="54051771"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 30 Nov 2018 10:27:31 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726989AbeLAFhi (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sat, 1 Dec 2018 00:37:38 -0500
Received: from mail.kernel.org ([198.145.29.99]:55198 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1725817AbeLAFhh (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Sat, 1 Dec 2018 00:37:37 -0500
Received: from quaco.ghostprotocols.net (unknown [179.97.41.186])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 4B16E2145D;
        Fri, 30 Nov 2018 18:27:24 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1543602447;
        bh=muPsFlAKYdYPXhHCk/10yISZATJ5C+i3fHlhTF45GU0=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=BqG6CiaBYyIquLBsaC3pa84/GdG+sI+YdysKKbMUNU8X9wbD78DkmYUN9pilwEzx2
         nhyK28O3I/Gx9ajqgSeavTn7/DwGkh8dlGXOvzYFgzFP5yUHsLepiShoFujW8lTYzC
         5zsRwSwQlGmLBZ/A07+udESiaXOyycYwpX/U4uBk=
From: Arnaldo Carvalho de Melo <acme@kernel.org>
To: Ingo Molnar <mingo@kernel.org>
Cc: Clark Williams <williams@redhat.com>, linux-kernel@vger.kernel.org,
        linux-perf-users@vger.kernel.org,
        Adrian Hunter <adrian.hunter@intel.com>,
        Andi Kleen <ak@linux.intel.com>,
        "David S . Miller" <davem@davemloft.net>,
        Jiri Olsa <jolsa@redhat.com>, Leo Yan <leo.yan@linaro.org>,
        Mathieu Poirier <mathieu.poirier@linaro.org>,
        stable@vger.kernel.org, Arnaldo Carvalho de Melo <acme@redhat.com>
Subject: [PATCH 07/22] perf thread: Add fallback functions for cases where cpumode is insufficient
Date: Fri, 30 Nov 2018 15:26:37 -0300
Message-Id: <20181130182652.23620-8-acme@kernel.org>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <20181130182652.23620-1-acme@kernel.org>
References: <20181130182652.23620-1-acme@kernel.org>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From: Adrian Hunter <adrian.hunter@intel.com>

For branch stacks or branch samples, the sample cpumode might not be
correct because it applies only to the sample 'ip' and not necessary to
'addr' or branch stack addresses. Add fallback functions that can be
used to deal with those cases

Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
Cc: Andi Kleen <ak@linux.intel.com>
Cc: David S. Miller <davem@davemloft.net>
Cc: Jiri Olsa <jolsa@redhat.com>
Cc: Leo Yan <leo.yan@linaro.org>
Cc: Mathieu Poirier <mathieu.poirier@linaro.org>
Cc: stable@vger.kernel.org
Link: http://lkml.kernel.org/r/20181106210712.12098-2-adrian.hunter@intel.com
Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
---
 tools/perf/util/event.c   | 27 +++++++++++++++++++++++++++
 tools/perf/util/machine.c | 27 +++++++++++++++++++++++++++
 tools/perf/util/machine.h |  2 ++
 tools/perf/util/thread.h  |  4 ++++
 4 files changed, 60 insertions(+)

diff --git a/tools/perf/util/event.c b/tools/perf/util/event.c
index e9c108a6b1c3..9431b20c1337 100644
--- a/tools/perf/util/event.c
+++ b/tools/perf/util/event.c
@@ -1577,6 +1577,24 @@ struct map *thread__find_map(struct thread *thread, u8 cpumode, u64 addr,
 	return al->map;
 }
 
+/*
+ * For branch stacks or branch samples, the sample cpumode might not be correct
+ * because it applies only to the sample 'ip' and not necessary to 'addr' or
+ * branch stack addresses. If possible, use a fallback to deal with those cases.
+ */
+struct map *thread__find_map_fb(struct thread *thread, u8 cpumode, u64 addr,
+				struct addr_location *al)
+{
+	struct map *map = thread__find_map(thread, cpumode, addr, al);
+	struct machine *machine = thread->mg->machine;
+	u8 addr_cpumode = machine__addr_cpumode(machine, cpumode, addr);
+
+	if (map || addr_cpumode == cpumode)
+		return map;
+
+	return thread__find_map(thread, addr_cpumode, addr, al);
+}
+
 struct symbol *thread__find_symbol(struct thread *thread, u8 cpumode,
 				   u64 addr, struct addr_location *al)
 {
@@ -1586,6 +1604,15 @@ struct symbol *thread__find_symbol(struct thread *thread, u8 cpumode,
 	return al->sym;
 }
 
+struct symbol *thread__find_symbol_fb(struct thread *thread, u8 cpumode,
+				      u64 addr, struct addr_location *al)
+{
+	al->sym = NULL;
+	if (thread__find_map_fb(thread, cpumode, addr, al))
+		al->sym = map__find_symbol(al->map, al->addr);
+	return al->sym;
+}
+
 /*
  * Callers need to drop the reference to al->thread, obtained in
  * machine__findnew_thread()
diff --git a/tools/perf/util/machine.c b/tools/perf/util/machine.c
index 8f36ce813bc5..9397e3f2444d 100644
--- a/tools/perf/util/machine.c
+++ b/tools/perf/util/machine.c
@@ -2592,6 +2592,33 @@ int machine__get_kernel_start(struct machine *machine)
 	return err;
 }
 
+u8 machine__addr_cpumode(struct machine *machine, u8 cpumode, u64 addr)
+{
+	u8 addr_cpumode = cpumode;
+	bool kernel_ip;
+
+	if (!machine->single_address_space)
+		goto out;
+
+	kernel_ip = machine__kernel_ip(machine, addr);
+	switch (cpumode) {
+	case PERF_RECORD_MISC_KERNEL:
+	case PERF_RECORD_MISC_USER:
+		addr_cpumode = kernel_ip ? PERF_RECORD_MISC_KERNEL :
+					   PERF_RECORD_MISC_USER;
+		break;
+	case PERF_RECORD_MISC_GUEST_KERNEL:
+	case PERF_RECORD_MISC_GUEST_USER:
+		addr_cpumode = kernel_ip ? PERF_RECORD_MISC_GUEST_KERNEL :
+					   PERF_RECORD_MISC_GUEST_USER;
+		break;
+	default:
+		break;
+	}
+out:
+	return addr_cpumode;
+}
+
 struct dso *machine__findnew_dso(struct machine *machine, const char *filename)
 {
 	return dsos__findnew(&machine->dsos, filename);
diff --git a/tools/perf/util/machine.h b/tools/perf/util/machine.h
index ca897a73014c..ebde3ea70225 100644
--- a/tools/perf/util/machine.h
+++ b/tools/perf/util/machine.h
@@ -100,6 +100,8 @@ static inline bool machine__kernel_ip(struct machine *machine, u64 ip)
 	return ip >= kernel_start;
 }
 
+u8 machine__addr_cpumode(struct machine *machine, u8 cpumode, u64 addr);
+
 struct thread *machine__find_thread(struct machine *machine, pid_t pid,
 				    pid_t tid);
 struct comm *machine__thread_exec_comm(struct machine *machine,
diff --git a/tools/perf/util/thread.h b/tools/perf/util/thread.h
index 30e2b4c165fe..5920c3bb8ffe 100644
--- a/tools/perf/util/thread.h
+++ b/tools/perf/util/thread.h
@@ -96,9 +96,13 @@ struct thread *thread__main_thread(struct machine *machine, struct thread *threa
 
 struct map *thread__find_map(struct thread *thread, u8 cpumode, u64 addr,
 			     struct addr_location *al);
+struct map *thread__find_map_fb(struct thread *thread, u8 cpumode, u64 addr,
+				struct addr_location *al);
 
 struct symbol *thread__find_symbol(struct thread *thread, u8 cpumode,
 				   u64 addr, struct addr_location *al);
+struct symbol *thread__find_symbol_fb(struct thread *thread, u8 cpumode,
+				      u64 addr, struct addr_location *al);
 
 void thread__find_cpumode_addr_location(struct thread *thread, u64 addr,
 					struct addr_location *al);
-- 
2.19.1

