Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:21:13 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 3ACDF580224
	for <like.xu@linux.intel.com>; Fri, 30 Nov 2018 09:51:42 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 30 Nov 2018 09:51:42 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3APGWruBNtGuasCeSDvpIl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0I/76rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0yRD+s7bpkSAXwhS?=
 =?us-ascii?q?cJOTE38H/Zhc5+gqxYrx2uuxNxzZPMYIyXNvRzcb7RcN0GSWVfRcZcTDBBApqm?=
 =?us-ascii?q?YocTE+YMJ+RVoo/grFUOtxu+AgysCfvzxz9MmHD30rAx3vk/HgHA2gwnBcwBu2?=
 =?us-ascii?q?nTodrvMKcdT++0wLPTwjrdafNW3yny55bTfxAloPGMW6h/cdDWyUU1EAPFlFqQ?=
 =?us-ascii?q?pJXjMjiI1eoNq3CW4/R8We+skWIrthx9rzu1yssyhITEhpgZxk3G+Clhw4s5OM?=
 =?us-ascii?q?e0RFNlbdOnCpdcqiKXOotsTs4sTGxlvjsxxKcctp6hZicKzYwqxx7BZPyDdIiF?=
 =?us-ascii?q?+hbjVOeKITdkn3JpYr2/hxCv8US6ze38TMa03E5LripDjNbMqmgA2wLP5sWEUP?=
 =?us-ascii?q?dx41qt1DWV2wzN5OxJIVo4mbfZJpI5x74/jJsTsUDNHi/sn0X2ibebdlw69eit?=
 =?us-ascii?q?9uTre6jpqYGCN4BqjgHyK78hmsuiAeQ+LgcBQXOb9eO41L3i/k32Xq9Gj/Irkq?=
 =?us-ascii?q?TBtJDaJMIbprO2AgNP04Yj7Qq/ACmi0NgCgXYHK1dFdQmBj4juPVHOL/b4Deql?=
 =?us-ascii?q?j1SrijdryOjKPqf9DZXVMnjDjLDhcK55605dywo808pT5p1JCrwaJPLzW0nxtM?=
 =?us-ascii?q?HXDxMjMgy0xfrnB8t51o8ERW2PBaqZY+vvt0SV7LcvP/WUf91S/zL8MOQ+ofjp?=
 =?us-ascii?q?i3A/hBkaZ6bu2JIWbHWxGLNhO1mYZnz3xc4MFHpPsgcgQei5tVuZTDQGYn+zW7?=
 =?us-ascii?q?47tCg2DZ/jAYrdS4TomrGYwSqgArVQYWZJDE3KFm3nIJ6ZUfUBYz7HP8l6jzYf?=
 =?us-ascii?q?XqKgQYJy6Rb7rQL/1v9rI/TZ/gUespTs0sUz4Pfcxj8o8jkhJsCQwymnQmdyH2?=
 =?us-ascii?q?5AEzYy0bA5q0F7zFqO+ax5hfVCEppU/fwfAVRyDoLV0+EvU4O6YQnGZNrcEFs?=
 =?us-ascii?q?=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BjAAAAeAFchxHrdtBkHgEGBwaBUggLA?=
 =?us-ascii?q?QGBL4Jig3mId4srgg18kVOEeYFzEgEBGBSEQIM2IjUIDQEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BCgsJCBsOIwxCARABgWIFAgMYCYJcAQICAQECIAQZAQEECikBAgIBAQIGAQEKG?=
 =?us-ascii?q?gIFHQQCAgMBCwEkAQUBARsZBYMcgXoIAQMBmwA8ih1wfDOCdgEBBYJDg16BBQg?=
 =?us-ascii?q?SEGmJc4EcghaBEYFwbTWFAYMEgleJCySXCAcCkTcYiVmHRiyYCgYCCQcPIYEnA?=
 =?us-ascii?q?YIKM0qDL4IbDBcSiEyFP3KBB4ZihHCBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0BjAAAAeAFchxHrdtBkHgEGBwaBUggLAQGBL4Jig3mId4s?=
 =?us-ascii?q?rgg18kVOEeYFzEgEBGBSEQIM2IjUIDQEDAQEBAQEBAgETAQEBCgsJCBsOIwxCA?=
 =?us-ascii?q?RABgWIFAgMYCYJcAQICAQECIAQZAQEECikBAgIBAQIGAQEKGgIFHQQCAgMBCwE?=
 =?us-ascii?q?kAQUBARsZBYMcgXoIAQMBmwA8ih1wfDOCdgEBBYJDg16BBQgSEGmJc4EcghaBE?=
 =?us-ascii?q?YFwbTWFAYMEgleJCySXCAcCkTcYiVmHRiyYCgYCCQcPIYEnAYIKM0qDL4IbDBc?=
 =?us-ascii?q?SiEyFP3KBB4ZihHCBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,299,1539673200"; 
   d="scan'208";a="54429249"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 30 Nov 2018 09:50:41 -0800
Received: from localhost ([::1]:34023 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gSmw4-0000H7-EG
	for like.xu@linux.intel.com; Fri, 30 Nov 2018 12:50:40 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:41614)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <alex.bennee@linaro.org>) id 1gSmvg-0000Gl-CP
	for qemu-devel@nongnu.org; Fri, 30 Nov 2018 12:50:17 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <alex.bennee@linaro.org>) id 1gSmvc-0006Qn-C7
	for qemu-devel@nongnu.org; Fri, 30 Nov 2018 12:50:16 -0500
Received: from mail-wr1-x443.google.com ([2a00:1450:4864:20::443]:46705)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <alex.bennee@linaro.org>)
	id 1gSmvb-0006Pn-Pj
	for qemu-devel@nongnu.org; Fri, 30 Nov 2018 12:50:12 -0500
Received: by mail-wr1-x443.google.com with SMTP id l9so6086577wrt.13
	for <qemu-devel@nongnu.org>; Fri, 30 Nov 2018 09:50:11 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linaro.org; s=google;
	h=references:user-agent:from:to:cc:subject:in-reply-to:date
	:message-id:mime-version:content-transfer-encoding;
	bh=tpYKgSn+V+ZdWhDr6YDTwHBU2Z4wBE8+ln7K/v9vzCg=;
	b=ITjbzwOZWrKw/XwdYuRfRaxOdH5FdvYcLBUsxSHZJaL8xL4DdHFvUnMx2z/gVv4jIX
	Y07A5frDu09arujUbbpSgjMouMCudSimE16YdD4N1N1V7RsyQhOzAB//gOdlJlr3Kqs6
	VkwwxkTQ57M+blPsa1PCtutkwoJVx44UDvHiQ=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:references:user-agent:from:to:cc:subject
	:in-reply-to:date:message-id:mime-version:content-transfer-encoding;
	bh=tpYKgSn+V+ZdWhDr6YDTwHBU2Z4wBE8+ln7K/v9vzCg=;
	b=q504FVMJNoT1dWEC1cGO7bUXHgvLnvfhYW/anrRw/WsXYKcKzXQbsa4xMYSx7ijylb
	69PNzRNGe8GnaGoBZxUHOIZ/024IRZNuQiuIcuPZGJwyLQWwsrrhd70sj8cVjqdUPaHk
	zCzScgJg7qSD2/lNh8RqfLehuK1AtspiGNmTW0MLvDRMUq5FmoOBuZCTnYkMOIbmd3HM
	31yR47fNRGhObGnK37YG8muD0hpq1wEi5EgIwu5TSC4Cs2w1owwk/kdmPVz6aIn6pZuT
	Bq0n+zwggDafZqaRtXxu2TlT3AlQZ59CYTra/lF/9aMqF26wp+6Gk9rMjE+W3aAwDxLx
	IMwQ==
X-Gm-Message-State: AA+aEWZsF20DGgkRtLyYn1ybULLOQ3cjekHHaqVetm5s3PMSba5wdoYy
	P3QuEmJZoWHFY6AX+ywrtwq05MTMokk=
X-Google-Smtp-Source: AFSGD/UOGFvR3EzmtSlB0havxKMghoTyOzJsPMrCwl95qA7MZgsGTnY7SdBnZMfAtLWxoJS3+dEFSg==
X-Received: by 2002:adf:f2c6:: with SMTP id d6mr5503803wrp.37.1543600210229;
	Fri, 30 Nov 2018 09:50:10 -0800 (PST)
Received: from zen.linaro.local ([81.128.185.34])
	by smtp.gmail.com with ESMTPSA id t5sm6607392wmd.15.2018.11.30.09.50.09
	(version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
	Fri, 30 Nov 2018 09:50:09 -0800 (PST)
Received: from zen (localhost [127.0.0.1])
	by zen.linaro.local (Postfix) with ESMTPS id ED5453E0190;
	Fri, 30 Nov 2018 17:50:08 +0000 (GMT)
References: <20181123144558.5048-1-richard.henderson@linaro.org>
	<20181123144558.5048-12-richard.henderson@linaro.org>
User-agent: mu4e 1.1.0; emacs 26.1.90
From: Alex =?utf-8?Q?Benn=C3=A9e?= <alex.bennee@linaro.org>
To: qemu-devel@nongnu.org
In-reply-to: <20181123144558.5048-12-richard.henderson@linaro.org>
Date: Fri, 30 Nov 2018 17:50:08 +0000
Message-ID: <87pnum3167.fsf@linaro.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 2a00:1450:4864:20::443
Subject: Re: [Qemu-devel] [PATCH for-4.0 v2 11/37] tcg/aarch64: Parameterize
 the temps for tcg_out_tlb_read
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Alistair.Francis@wdc.com
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>


Richard Henderson <richard.henderson@linaro.org> writes:

> When moving the qemu_ld/st arguments to the right place for
> a function call, we'll need to move the temps out of the way.
>
> Signed-off-by: Richard Henderson <richard.henderson@linaro.org>

Reviewed-by: Alex Benn=C3=A9e <alex.bennee@linaro.org>

> ---
>  tcg/aarch64/tcg-target.inc.c | 74 +++++++++++++++++++-----------------
>  1 file changed, 40 insertions(+), 34 deletions(-)
>
> diff --git a/tcg/aarch64/tcg-target.inc.c b/tcg/aarch64/tcg-target.inc.c
> index 148de0b7f2..c0ba9a6d50 100644
> --- a/tcg/aarch64/tcg-target.inc.c
> +++ b/tcg/aarch64/tcg-target.inc.c
> @@ -1467,13 +1467,15 @@ static void add_qemu_ldst_label(TCGContext *s, bo=
ol is_ld, TCGMemOpIdx oi,
>      label->label_ptr[0] =3D label_ptr;
>  }
>
> -/* Load and compare a TLB entry, emitting the conditional jump to the
> -   slow path for the failure case, which will be patched later when fina=
lizing
> -   the slow path. Generated code returns the host addend in X1,
> -   clobbers X0,X2,X3,TMP. */
> -static void tcg_out_tlb_read(TCGContext *s, TCGReg addr_reg, TCGMemOp op=
c,
> -                             tcg_insn_unit **label_ptr, int mem_index,
> -                             bool is_read)
> +/*
> + * Load and compare a TLB entry, emitting the conditional jump to the
> + * slow path on failure.  Returns the register for the host addend.
> + * Clobbers t0, t1, t2, t3.
> + */
> +static TCGReg tcg_out_tlb_read(TCGContext *s, TCGReg addr_reg, TCGMemOp =
opc,
> +                               tcg_insn_unit **label_ptr, int mem_index,
> +                               bool is_read, TCGReg t0, TCGReg t1,
> +                               TCGReg t2, TCGReg t3)
>  {
>      int tlb_offset =3D is_read ?
>          offsetof(CPUArchState, tlb_table[mem_index][0].addr_read)
> @@ -1491,55 +1493,56 @@ static void tcg_out_tlb_read(TCGContext *s, TCGRe=
g addr_reg, TCGMemOp opc,
>      if (a_bits >=3D s_bits) {
>          x3 =3D addr_reg;
>      } else {
> +        x3 =3D t3;
>          tcg_out_insn(s, 3401, ADDI, TARGET_LONG_BITS =3D=3D 64,
> -                     TCG_REG_X3, addr_reg, s_mask - a_mask);
> -        x3 =3D TCG_REG_X3;
> +                     x3, addr_reg, s_mask - a_mask);
>      }
>      tlb_mask =3D (uint64_t)TARGET_PAGE_MASK | a_mask;
>
> -    /* Extract the TLB index from the address into X0.
> -       X0<CPU_TLB_BITS:0> =3D
> +    /* Extract the TLB index from the address into T0.
> +       T0<CPU_TLB_BITS:0> =3D
>         addr_reg<TARGET_PAGE_BITS+CPU_TLB_BITS:TARGET_PAGE_BITS> */
> -    tcg_out_ubfm(s, TARGET_LONG_BITS =3D=3D 64, TCG_REG_X0, addr_reg,
> +    tcg_out_ubfm(s, TARGET_LONG_BITS =3D=3D 64, t0, addr_reg,
>                   TARGET_PAGE_BITS, TARGET_PAGE_BITS + CPU_TLB_BITS);
>
> -    /* Store the page mask part of the address into X3.  */
> +    /* Store the page mask part of the address into T3.  */
>      tcg_out_logicali(s, I3404_ANDI, TARGET_LONG_BITS =3D=3D 64,
> -                     TCG_REG_X3, x3, tlb_mask);
> +                     t3, x3, tlb_mask);
>
> -    /* Add any "high bits" from the tlb offset to the env address into X=
2,
> +    /* Add any "high bits" from the tlb offset to the env address into T=
2,
>         to take advantage of the LSL12 form of the ADDI instruction.
> -       X2 =3D env + (tlb_offset & 0xfff000) */
> +       T2 =3D env + (tlb_offset & 0xfff000) */
>      if (tlb_offset & 0xfff000) {
> -        tcg_out_insn(s, 3401, ADDI, TCG_TYPE_I64, TCG_REG_X2, base,
> +        tcg_out_insn(s, 3401, ADDI, TCG_TYPE_I64, t2, base,
>                       tlb_offset & 0xfff000);
> -        base =3D TCG_REG_X2;
> +        base =3D t2;
>      }
>
> -    /* Merge the tlb index contribution into X2.
> -       X2 =3D X2 + (X0 << CPU_TLB_ENTRY_BITS) */
> -    tcg_out_insn(s, 3502S, ADD_LSL, TCG_TYPE_I64, TCG_REG_X2, base,
> -                 TCG_REG_X0, CPU_TLB_ENTRY_BITS);
> +    /* Merge the tlb index contribution into T2.
> +       T2 =3D T2 + (T0 << CPU_TLB_ENTRY_BITS) */
> +    tcg_out_insn(s, 3502S, ADD_LSL, TCG_TYPE_I64,
> +                 t2, base, t0, CPU_TLB_ENTRY_BITS);
>
> -    /* Merge "low bits" from tlb offset, load the tlb comparator into X0.
> -       X0 =3D load [X2 + (tlb_offset & 0x000fff)] */
> +    /* Merge "low bits" from tlb offset, load the tlb comparator into T0.
> +       T0 =3D load [T2 + (tlb_offset & 0x000fff)] */
>      tcg_out_ldst(s, TARGET_LONG_BITS =3D=3D 32 ? I3312_LDRW : I3312_LDRX,
> -                 TCG_REG_X0, TCG_REG_X2, tlb_offset & 0xfff,
> -                 TARGET_LONG_BITS =3D=3D 32 ? 2 : 3);
> +                 t0, t2, tlb_offset & 0xfff, TARGET_LONG_BITS =3D=3D 32 =
? 2 : 3);
>
>      /* Load the tlb addend. Do that early to avoid stalling.
> -       X1 =3D load [X2 + (tlb_offset & 0xfff) + offsetof(addend)] */
> -    tcg_out_ldst(s, I3312_LDRX, TCG_REG_X1, TCG_REG_X2,
> +       T1 =3D load [T2 + (tlb_offset & 0xfff) + offsetof(addend)] */
> +    tcg_out_ldst(s, I3312_LDRX, t1, t2,
>                   (tlb_offset & 0xfff) + (offsetof(CPUTLBEntry, addend)) -
>                   (is_read ? offsetof(CPUTLBEntry, addr_read)
>                    : offsetof(CPUTLBEntry, addr_write)), 3);
>
>      /* Perform the address comparison. */
> -    tcg_out_cmp(s, (TARGET_LONG_BITS =3D=3D 64), TCG_REG_X0, TCG_REG_X3,=
 0);
> +    tcg_out_cmp(s, (TARGET_LONG_BITS =3D=3D 64), t0, t3, 0);
>
>      /* If not equal, we jump to the slow path. */
>      *label_ptr =3D s->code_ptr;
>      tcg_out_goto_cond_noaddr(s, TCG_COND_NE);
> +
> +    return t1;
>  }
>
>  #endif /* CONFIG_SOFTMMU */
> @@ -1644,10 +1647,12 @@ static void tcg_out_qemu_ld(TCGContext *s, TCGReg=
 data_reg, TCGReg addr_reg,
>  #ifdef CONFIG_SOFTMMU
>      unsigned mem_index =3D get_mmuidx(oi);
>      tcg_insn_unit *label_ptr;
> +    TCGReg base;
>
> -    tcg_out_tlb_read(s, addr_reg, memop, &label_ptr, mem_index, 1);
> +    base =3D tcg_out_tlb_read(s, addr_reg, memop, &label_ptr, mem_index,=
 1,
> +                            TCG_REG_X0, TCG_REG_X1, TCG_REG_X2, TCG_REG_=
X3);
>      tcg_out_qemu_ld_direct(s, memop, ext, data_reg,
> -                           TCG_REG_X1, otype, addr_reg);
> +                           base, otype, addr_reg);
>      add_qemu_ldst_label(s, true, oi, ext, data_reg, addr_reg,
>                          s->code_ptr, label_ptr);
>  #else /* !CONFIG_SOFTMMU */
> @@ -1669,10 +1674,11 @@ static void tcg_out_qemu_st(TCGContext *s, TCGReg=
 data_reg, TCGReg addr_reg,
>  #ifdef CONFIG_SOFTMMU
>      unsigned mem_index =3D get_mmuidx(oi);
>      tcg_insn_unit *label_ptr;
> +    TCGReg base;
>
> -    tcg_out_tlb_read(s, addr_reg, memop, &label_ptr, mem_index, 0);
> -    tcg_out_qemu_st_direct(s, memop, data_reg,
> -                           TCG_REG_X1, otype, addr_reg);
> +    base =3D tcg_out_tlb_read(s, addr_reg, memop, &label_ptr, mem_index,=
 0,
> +                            TCG_REG_X0, TCG_REG_X1, TCG_REG_X2, TCG_REG_=
X3);
> +    tcg_out_qemu_st_direct(s, memop, data_reg, base, otype, addr_reg);
>      add_qemu_ldst_label(s, false, oi, (memop & MO_SIZE)=3D=3D MO_64,
>                          data_reg, addr_reg, s->code_ptr, label_ptr);
>  #else /* !CONFIG_SOFTMMU */


--
Alex Benn=C3=A9e

