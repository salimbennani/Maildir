Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 08:45:49 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 75098580213
	for <like.xu@linux.intel.com>; Thu, 29 Nov 2018 07:00:55 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 07:00:55 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3Ad0jr2hbWtJbbc80+wSmjzAD/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZrsmzbnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjmk8qxlSgLniD?=
 =?us-ascii?q?0fOj43/m7ZitJ+g6BVrhyiqBNw34HabpyNNPd8fK3Qcs4WSGRdUslPTCxMGZ+8?=
 =?us-ascii?q?b5IVAuYdIepVtYvwql0TphW+HwmsA+bvxydUi3/yw6I73PkqHBzY0wwmGdIJqm?=
 =?us-ascii?q?rbp8jyOagIVeC60qbJwS/YYPxI3zf97pbHfQ46rPGIXLJwd9DeyVMoFw/fiVWQ?=
 =?us-ascii?q?s4PlMiqT2+8QvWab6O9gWviui24hswxxrTmvxtssionUnY0Z0EzL9SJ8wIszON?=
 =?us-ascii?q?a2S1Z7bMa6HJdMtCyWLZZ6Tt4hTm1ypio3xL0LtYSmcCUI0JgqxAPTZ+aaf4SW?=
 =?us-ascii?q?4R/vTvudLDR4iX5/dr+yiBC/+lW6xOLmTMm7ylNKozJFktbSsnAN0ATe6syGSv?=
 =?us-ascii?q?tm4kehwiyD1w/V6uFZO0w0krDbK5E5zr4xkJocr1jDEzfolEnqj6KabFgo9vWr?=
 =?us-ascii?q?5uj9fLnrqJ+RO5Vphgz8Kqgun9awAeU8MggARWib/uG82aX6/ULnRbVKk+Q6nb?=
 =?us-ascii?q?THv5DEO8sbore1DBRS0oY+7RawEymp0M8fkXkDLVJFewyIg5LmOlHTOP34Cfa/?=
 =?us-ascii?q?g1KxkDZk3fzGP7vhAonTIXjHirvuYbF960tHxQo1ytBf4Z1UCrccIP7pXU/xrt?=
 =?us-ascii?q?PYAgcjMwOo2+bnFMl91oQGVGKLA6+ZM73dvUWH5+IyOOSMYI4VuDDgK/kq/fLu?=
 =?us-ascii?q?jHk5mUMDcqmtx5cYdHe4HvE1a3ifemfm19cdDX8R7E15SO3xlEbEVzlVaHCvGa?=
 =?us-ascii?q?Um6XY+AYOiCI7FAYe1nL2G2jz8B5BTeyVKB06BFSTVcZ6ZUaIJYSOWPsgzizEB?=
 =?us-ascii?q?SP2tRpEs0VS0uRbnxqF7BuzT/CIeqNTkztci/PDZlxw56WlpCd+A2XqGVWB+kz?=
 =?us-ascii?q?A0QGov0aVi5EBw1FqH+a5/hfNeCJpU/fwafB09MMv1y+FqQ/r/XARAc5/dQVKr?=
 =?us-ascii?q?UpOsDDc3Q98Zx94Ialx6XdK4gUaQjGKRH7YJmunTV9QP+aXG0i2pKg=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0D3AwA5/v9bhxHrdtBkHQEBBQEHBQGBZ?=
 =?us-ascii?q?QKBL4E5gSmDeYh3iymCDXyNQIp3FgEBGAMRhECDNCI4EgEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BCgsJCBsOIwxCARABgWIFAgMYCYJcAQICAQECIAQZAQEECikBAgIBAQIGAQEKG?=
 =?us-ascii?q?gIFHQQCAgMBCwEkAQUBARsZBYMcAYF5CAEDAZpHPIodcHwzgnYBAQWCQ4NfgQU?=
 =?us-ascii?q?IEhBpiW+BHIIWgRABgXBtNYMeAoFhgwSCV4ktjB+KWQcChn6KNBiBWk2HMTaHD?=
 =?us-ascii?q?iyXewYCCQcPIYE8gXYzSoMvCYISDBeDSoUUhT9ygQeHB4Q8gXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0D3AwA5/v9bhxHrdtBkHQEBBQEHBQGBZQKBL4E5gSmDeYh?=
 =?us-ascii?q?3iymCDXyNQIp3FgEBGAMRhECDNCI4EgEDAQEBAQEBAgETAQEBCgsJCBsOIwxCA?=
 =?us-ascii?q?RABgWIFAgMYCYJcAQICAQECIAQZAQEECikBAgIBAQIGAQEKGgIFHQQCAgMBCwE?=
 =?us-ascii?q?kAQUBARsZBYMcAYF5CAEDAZpHPIodcHwzgnYBAQWCQ4NfgQUIEhBpiW+BHIIWg?=
 =?us-ascii?q?RABgXBtNYMeAoFhgwSCV4ktjB+KWQcChn6KNBiBWk2HMTaHDiyXewYCCQcPIYE?=
 =?us-ascii?q?8gXYzSoMvCYISDBeDSoUUhT9ygQeHB4Q8gXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,295,1539673200"; 
   d="scan'208";a="54852721"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 29 Nov 2018 07:00:53 -0800
Received: from localhost ([::1]:54639 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gSNoD-0002do-5o
	for like.xu@linux.intel.com; Thu, 29 Nov 2018 10:00:53 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:34667)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <alex.bennee@linaro.org>) id 1gSNm4-00012M-A4
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 09:58:45 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <alex.bennee@linaro.org>) id 1gSNbU-0001m4-Va
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 09:47:48 -0500
Received: from mail-wm1-x343.google.com ([2a00:1450:4864:20::343]:37121)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <alex.bennee@linaro.org>)
	id 1gSNbU-0001lZ-Jc
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 09:47:44 -0500
Received: by mail-wm1-x343.google.com with SMTP id g67so2504478wmd.2
	for <qemu-devel@nongnu.org>; Thu, 29 Nov 2018 06:47:44 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linaro.org; s=google;
	h=references:user-agent:from:to:cc:subject:in-reply-to:date
	:message-id:mime-version:content-transfer-encoding;
	bh=qIgLVXHop8h9JNgZt0V8WCIXF1f4S6KZYk2w/OnqGcY=;
	b=VPZrx7bB5O8zsRf9bZlehAwrNTCwsIX+13ra68GR3LwJxCmRiQDqbV+FfAsD5an4mj
	/oXaIX2ndKYjg50uonPwAsIIzKKdpAUfowriRP0cejN2HY1Y7/4ekKf5UTmsxQfTtPbz
	0Q4iOazm3Q0BFyw/llYR0hkPD76A9q0GOxcKY=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:references:user-agent:from:to:cc:subject
	:in-reply-to:date:message-id:mime-version:content-transfer-encoding;
	bh=qIgLVXHop8h9JNgZt0V8WCIXF1f4S6KZYk2w/OnqGcY=;
	b=qjN1w2P2Y8ZRnWuihrIEquSDi15Yti/O47V8PiahNe6HExgk0RAqEk84ZN7XQ7Lhss
	izmtCjWfZlNd8IdlvpmGBQODHcGLRHMn9k0p8WBqY6UqLLQpoFniLVoXaQczqoK8ZH1A
	Z9f/BV4ziPF9aV01c0hl4W1OaxgtC49kyWXzL+8rvRA4RNhFOWyMYb8Gz8l4VDScyu2i
	2DCYtxaRV8TS7QFdqG9H6QMEq2jpIoWVLKCMwq+40IGvpPVjkOYXCxJ36Xsy2BhmtzSA
	8227/rqeZzqHbQsZ/1Ax1b/4syK6PhdeKTReSK4f2Sdu9v+rSfOT63zkVt4oh3IN/Kzd
	A4+A==
X-Gm-Message-State: AA+aEWaDEaE2zKiWrT4dbgP6UYVgcfsJK+aazHeazYCrbsm7jCSPTs5X
	ZKS6GEcPxEsLuF4vgJoVE2yZWZGRvNE=
X-Google-Smtp-Source: AFSGD/UHFt7rRSAcCDvD+OQyGs3Vg06W67wTv4fAaapUZHbeWqgLDpBnFskl1ah6HeJWvIuL240//A==
X-Received: by 2002:a1c:9d97:: with SMTP id g145mr1672835wme.152.1543502862991;
	Thu, 29 Nov 2018 06:47:42 -0800 (PST)
Received: from zen.linaro.local ([81.128.185.34])
	by smtp.gmail.com with ESMTPSA id
	m126sm3671570wmb.30.2018.11.29.06.47.42
	(version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
	Thu, 29 Nov 2018 06:47:42 -0800 (PST)
Received: from zen (localhost [127.0.0.1])
	by zen.linaro.local (Postfix) with ESMTPS id B0FE33E0116;
	Thu, 29 Nov 2018 14:47:41 +0000 (GMT)
References: <20181123144558.5048-1-richard.henderson@linaro.org>
	<20181123144558.5048-4-richard.henderson@linaro.org>
User-agent: mu4e 1.1.0; emacs 26.1.90
From: Alex =?utf-8?Q?Benn=C3=A9e?= <alex.bennee@linaro.org>
To: qemu-devel@nongnu.org
In-reply-to: <20181123144558.5048-4-richard.henderson@linaro.org>
Date: Thu, 29 Nov 2018 14:47:41 +0000
Message-ID: <87zhts2b5e.fsf@linaro.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 2a00:1450:4864:20::343
Subject: Re: [Qemu-devel] [PATCH for-4.0 v2 03/37] tcg: Return success from
 patch_reloc
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Alistair.Francis@wdc.com
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>


Richard Henderson <richard.henderson@linaro.org> writes:

> This moves the assert for success from inside patch_reloc
> to outside patch_reloc.  This touches all tcg backends.

s/outside/above/?

We also seem to be dropping a bunch of reloc_atomic functions (which are
no longer used?). Perhaps that should be a separate patch to make the
series cleaner?

>
> Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
> ---
>  tcg/aarch64/tcg-target.inc.c | 44 ++++++++++++++-------------------
>  tcg/arm/tcg-target.inc.c     | 26 +++++++++-----------
>  tcg/i386/tcg-target.inc.c    | 17 +++++++------
>  tcg/mips/tcg-target.inc.c    | 29 +++++++++-------------
>  tcg/ppc/tcg-target.inc.c     | 47 ++++++++++++++++++++++--------------
>  tcg/s390/tcg-target.inc.c    | 37 +++++++++++++++++++---------
>  tcg/sparc/tcg-target.inc.c   | 13 ++++++----
>  tcg/tcg-pool.inc.c           |  5 +++-
>  tcg/tcg.c                    |  8 +++---
>  tcg/tci/tcg-target.inc.c     |  3 ++-
>  10 files changed, 125 insertions(+), 104 deletions(-)
>
> diff --git a/tcg/aarch64/tcg-target.inc.c b/tcg/aarch64/tcg-target.inc.c
> index 083592a4d7..30091f6a69 100644
> --- a/tcg/aarch64/tcg-target.inc.c
> +++ b/tcg/aarch64/tcg-target.inc.c
> @@ -78,48 +78,40 @@ static const int tcg_target_call_oarg_regs[1] =3D {
>  #define TCG_REG_GUEST_BASE TCG_REG_X28
>  #endif
>
> -static inline void reloc_pc26(tcg_insn_unit *code_ptr, tcg_insn_unit *ta=
rget)
> +static inline bool reloc_pc26(tcg_insn_unit *code_ptr, tcg_insn_unit *ta=
rget)
>  {
>      ptrdiff_t offset =3D target - code_ptr;
> -    tcg_debug_assert(offset =3D=3D sextract64(offset, 0, 26));
> -    /* read instruction, mask away previous PC_REL26 parameter contents,
> -       set the proper offset, then write back the instruction. */
> -    *code_ptr =3D deposit32(*code_ptr, 0, 26, offset);
> +    if (offset =3D=3D sextract64(offset, 0, 26)) {
> +        /* read instruction, mask away previous PC_REL26 parameter conte=
nts,
> +           set the proper offset, then write back the instruction. */
> +        *code_ptr =3D deposit32(*code_ptr, 0, 26, offset);
> +        return true;
> +    }
> +    return false;
>  }
>
> -static inline void reloc_pc26_atomic(tcg_insn_unit *code_ptr,
> -                                     tcg_insn_unit *target)
> +static inline bool reloc_pc19(tcg_insn_unit *code_ptr, tcg_insn_unit *ta=
rget)
>  {
>      ptrdiff_t offset =3D target - code_ptr;
> -    tcg_insn_unit insn;
> -    tcg_debug_assert(offset =3D=3D sextract64(offset, 0, 26));
> -    /* read instruction, mask away previous PC_REL26 parameter contents,
> -       set the proper offset, then write back the instruction. */
> -    insn =3D atomic_read(code_ptr);
> -    atomic_set(code_ptr, deposit32(insn, 0, 26, offset));
> +    if (offset =3D=3D sextract64(offset, 0, 19)) {
> +        *code_ptr =3D deposit32(*code_ptr, 5, 19, offset);
> +        return true;
> +    }
> +    return false;
>  }
>
> -static inline void reloc_pc19(tcg_insn_unit *code_ptr, tcg_insn_unit *ta=
rget)
> -{
> -    ptrdiff_t offset =3D target - code_ptr;
> -    tcg_debug_assert(offset =3D=3D sextract64(offset, 0, 19));
> -    *code_ptr =3D deposit32(*code_ptr, 5, 19, offset);
> -}
> -
> -static inline void patch_reloc(tcg_insn_unit *code_ptr, int type,
> +static inline bool patch_reloc(tcg_insn_unit *code_ptr, int type,
>                                 intptr_t value, intptr_t addend)
>  {
>      tcg_debug_assert(addend =3D=3D 0);
>      switch (type) {
>      case R_AARCH64_JUMP26:
>      case R_AARCH64_CALL26:
> -        reloc_pc26(code_ptr, (tcg_insn_unit *)value);
> -        break;
> +        return reloc_pc26(code_ptr, (tcg_insn_unit *)value);
>      case R_AARCH64_CONDBR19:
> -        reloc_pc19(code_ptr, (tcg_insn_unit *)value);
> -        break;
> +        return reloc_pc19(code_ptr, (tcg_insn_unit *)value);
>      default:
> -        tcg_abort();
> +        g_assert_not_reached();
>      }
>  }
>
> diff --git a/tcg/arm/tcg-target.inc.c b/tcg/arm/tcg-target.inc.c
> index e1fbf465cb..80d174ef44 100644
> --- a/tcg/arm/tcg-target.inc.c
> +++ b/tcg/arm/tcg-target.inc.c
> @@ -187,27 +187,23 @@ static const uint8_t tcg_cond_to_arm_cond[] =3D {
>      [TCG_COND_GTU] =3D COND_HI,
>  };
>
> -static inline void reloc_pc24(tcg_insn_unit *code_ptr, tcg_insn_unit *ta=
rget)
> +static inline bool reloc_pc24(tcg_insn_unit *code_ptr, tcg_insn_unit *ta=
rget)
>  {
>      ptrdiff_t offset =3D (tcg_ptr_byte_diff(target, code_ptr) - 8) >> 2;
> -    *code_ptr =3D (*code_ptr & ~0xffffff) | (offset & 0xffffff);
> +    if (offset =3D=3D sextract32(offset, 0, 24)) {
> +        *code_ptr =3D (*code_ptr & ~0xffffff) | (offset & 0xffffff);
> +        return true;
> +    }
> +    return false;
>  }
>
> -static inline void reloc_pc24_atomic(tcg_insn_unit *code_ptr, tcg_insn_u=
nit *target)
> -{
> -    ptrdiff_t offset =3D (tcg_ptr_byte_diff(target, code_ptr) - 8) >> 2;
> -    tcg_insn_unit insn =3D atomic_read(code_ptr);
> -    tcg_debug_assert(offset =3D=3D sextract32(offset, 0, 24));
> -    atomic_set(code_ptr, deposit32(insn, 0, 24, offset));
> -}
> -
> -static void patch_reloc(tcg_insn_unit *code_ptr, int type,
> +static bool patch_reloc(tcg_insn_unit *code_ptr, int type,
>                          intptr_t value, intptr_t addend)
>  {
>      tcg_debug_assert(addend =3D=3D 0);
>
>      if (type =3D=3D R_ARM_PC24) {
> -        reloc_pc24(code_ptr, (tcg_insn_unit *)value);
> +        return reloc_pc24(code_ptr, (tcg_insn_unit *)value);
>      } else if (type =3D=3D R_ARM_PC13) {
>          intptr_t diff =3D value - (uintptr_t)(code_ptr + 2);
>          tcg_insn_unit insn =3D *code_ptr;
> @@ -218,10 +214,9 @@ static void patch_reloc(tcg_insn_unit *code_ptr, int=
 type,
>              if (!u) {
>                  diff =3D -diff;
>              }
> -        } else {
> +        } else if (diff >=3D 0x1000 && diff < 0x100000) {
>              int rd =3D extract32(insn, 12, 4);
>              int rt =3D rd =3D=3D TCG_REG_PC ? TCG_REG_TMP : rd;
> -            assert(diff >=3D 0x1000 && diff < 0x100000);
>              /* add rt, pc, #high */
>              *code_ptr++ =3D ((insn & 0xf0000000) | (1 << 25) | ARITH_ADD
>                             | (TCG_REG_PC << 16) | (rt << 12)
> @@ -230,10 +225,13 @@ static void patch_reloc(tcg_insn_unit *code_ptr, in=
t type,
>              insn =3D deposit32(insn, 12, 4, rt);
>              diff &=3D 0xfff;
>              u =3D 1;
> +        } else {
> +            return false;
>          }
>          insn =3D deposit32(insn, 23, 1, u);
>          insn =3D deposit32(insn, 0, 12, diff);
>          *code_ptr =3D insn;
> +        return true;
>      } else {
>          g_assert_not_reached();
>      }
> diff --git a/tcg/i386/tcg-target.inc.c b/tcg/i386/tcg-target.inc.c
> index 436195894b..4f66a0c5ae 100644
> --- a/tcg/i386/tcg-target.inc.c
> +++ b/tcg/i386/tcg-target.inc.c
> @@ -167,29 +167,32 @@ static bool have_lzcnt;
>
>  static tcg_insn_unit *tb_ret_addr;
>
> -static void patch_reloc(tcg_insn_unit *code_ptr, int type,
> +static bool patch_reloc(tcg_insn_unit *code_ptr, int type,
>                          intptr_t value, intptr_t addend)
>  {
>      value +=3D addend;
> -    switch(type) {
> +
> +    switch (type) {
>      case R_386_PC32:
>          value -=3D (uintptr_t)code_ptr;
>          if (value !=3D (int32_t)value) {
> -            tcg_abort();
> +            return false;
>          }
>          /* FALLTHRU */
>      case R_386_32:
>          tcg_patch32(code_ptr, value);
> -        break;
> +        return true;
> +
>      case R_386_PC8:
>          value -=3D (uintptr_t)code_ptr;
>          if (value !=3D (int8_t)value) {
> -            tcg_abort();
> +            return false;
>          }
>          tcg_patch8(code_ptr, value);
> -        break;
> +        return true;
> +
>      default:
> -        tcg_abort();
> +        g_assert_not_reached();
>      }
>  }
>
> diff --git a/tcg/mips/tcg-target.inc.c b/tcg/mips/tcg-target.inc.c
> index cff525373b..e59c66b607 100644
> --- a/tcg/mips/tcg-target.inc.c
> +++ b/tcg/mips/tcg-target.inc.c
> @@ -144,36 +144,29 @@ static tcg_insn_unit *bswap32_addr;
>  static tcg_insn_unit *bswap32u_addr;
>  static tcg_insn_unit *bswap64_addr;
>
> -static inline uint32_t reloc_pc16_val(tcg_insn_unit *pc, tcg_insn_unit *=
target)
> +static bool reloc_pc16_cond(tcg_insn_unit *pc, tcg_insn_unit *target)

What is the cond here anyway? Given we pass through bellow with a
function with the same signature it makes me wonder if there shouldn't
just be one reloc_pc16 function.

>  {
>      /* Let the compiler perform the right-shift as part of the arithmeti=
c.  */
>      ptrdiff_t disp =3D target - (pc + 1);
> -    tcg_debug_assert(disp =3D=3D (int16_t)disp);
> -    return disp & 0xffff;
> +    if (disp =3D=3D (int16_t)disp) {
> +        *pc =3D deposit32(*pc, 0, 16, disp);
> +        return true;
> +    } else {
> +        return false;
> +    }
>  }
>
> -static inline void reloc_pc16(tcg_insn_unit *pc, tcg_insn_unit *target)
> +static bool reloc_pc16(tcg_insn_unit *pc, tcg_insn_unit *target)
>  {
> -    *pc =3D deposit32(*pc, 0, 16, reloc_pc16_val(pc, target));
> +    tcg_debug_assert(reloc_pc16_cond(pc, target));

Having side effects in tcg_debug_assert seems like bad style, besides
should we not be passing the result up to the caller?

In fact I think this breaks the shippable build anyway:

In file included from /root/src/github.com/stsquad/qemu/tcg/tcg.c:320:0:
/root/src/github.com/stsquad/qemu/tcg/mips/tcg-target.inc.c: In function 'r=
eloc_pc16':
/root/src/github.com/stsquad/qemu/tcg/mips/tcg-target.inc.c:162:1: error: c=
ontrol reaches end of non-void function [-Werror=3Dreturn-type]
 }

>  }
>
> -static inline uint32_t reloc_26_val(tcg_insn_unit *pc, tcg_insn_unit *ta=
rget)
> -{
> -    tcg_debug_assert((((uintptr_t)pc ^ (uintptr_t)target) & 0xf0000000) =
=3D=3D 0);
> -    return ((uintptr_t)target >> 2) & 0x3ffffff;
> -}
> -
> -static inline void reloc_26(tcg_insn_unit *pc, tcg_insn_unit *target)
> -{
> -    *pc =3D deposit32(*pc, 0, 26, reloc_26_val(pc, target));
> -}
> -
> -static void patch_reloc(tcg_insn_unit *code_ptr, int type,
> +static bool patch_reloc(tcg_insn_unit *code_ptr, int type,
>                          intptr_t value, intptr_t addend)
>  {
>      tcg_debug_assert(type =3D=3D R_MIPS_PC16);
>      tcg_debug_assert(addend =3D=3D 0);
> -    reloc_pc16(code_ptr, (tcg_insn_unit *)value);
> +    return reloc_pc16_cond(code_ptr, (tcg_insn_unit *)value);

See above.

>  }
>
>  #define TCG_CT_CONST_ZERO 0x100
> diff --git a/tcg/ppc/tcg-target.inc.c b/tcg/ppc/tcg-target.inc.c
> index c2f729ee8f..656a9ff603 100644
> --- a/tcg/ppc/tcg-target.inc.c
> +++ b/tcg/ppc/tcg-target.inc.c
> @@ -186,16 +186,14 @@ static inline bool in_range_b(tcg_target_long targe=
t)
>      return target =3D=3D sextract64(target, 0, 26);
>  }
>
> -static uint32_t reloc_pc24_val(tcg_insn_unit *pc, tcg_insn_unit *target)
> +static bool reloc_pc24_cond(tcg_insn_unit *pc, tcg_insn_unit *target)
>  {
>      ptrdiff_t disp =3D tcg_ptr_byte_diff(target, pc);
> -    tcg_debug_assert(in_range_b(disp));
> -    return disp & 0x3fffffc;
> -}
> -
> -static void reloc_pc24(tcg_insn_unit *pc, tcg_insn_unit *target)
> -{
> -    *pc =3D (*pc & ~0x3fffffc) | reloc_pc24_val(pc, target);
> +    if (in_range_b(disp)) {
> +        *pc =3D (*pc & ~0x3fffffc) | (disp & 0x3fffffc);
> +        return true;
> +    }
> +    return false;
>  }
>
>  static uint16_t reloc_pc14_val(tcg_insn_unit *pc, tcg_insn_unit *target)
> @@ -205,10 +203,22 @@ static uint16_t reloc_pc14_val(tcg_insn_unit *pc, t=
cg_insn_unit *target)
>      return disp & 0xfffc;
>  }
>
> +static bool reloc_pc14_cond(tcg_insn_unit *pc, tcg_insn_unit *target)
> +{
> +    ptrdiff_t disp =3D tcg_ptr_byte_diff(target, pc);
> +    if (disp =3D=3D (int16_t) disp) {
> +        *pc =3D (*pc & ~0xfffc) | (disp & 0xfffc);
> +        return true;
> +    }
> +    return false;
> +}
> +
> +#ifdef CONFIG_SOFTMMU
>  static void reloc_pc14(tcg_insn_unit *pc, tcg_insn_unit *target)
>  {
> -    *pc =3D (*pc & ~0xfffc) | reloc_pc14_val(pc, target);
> +    tcg_debug_assert(reloc_pc14_cond(pc, target));

Again side effects in assert.

>  }
> +#endif
>
>  static inline void tcg_out_b_noaddr(TCGContext *s, int insn)
>  {
> @@ -525,7 +535,7 @@ static const uint32_t tcg_to_isel[] =3D {
>      [TCG_COND_GTU] =3D ISEL | BC_(7, CR_GT),
>  };
>
> -static void patch_reloc(tcg_insn_unit *code_ptr, int type,
> +static bool patch_reloc(tcg_insn_unit *code_ptr, int type,
>                          intptr_t value, intptr_t addend)
>  {
>      tcg_insn_unit *target;
> @@ -536,11 +546,9 @@ static void patch_reloc(tcg_insn_unit *code_ptr, int=
 type,
>
>      switch (type) {
>      case R_PPC_REL14:
> -        reloc_pc14(code_ptr, target);
> -        break;
> +        return reloc_pc14_cond(code_ptr, target);
>      case R_PPC_REL24:
> -        reloc_pc24(code_ptr, target);
> -        break;
> +        return reloc_pc24_cond(code_ptr, target);
>      case R_PPC_ADDR16:
>          /* We are abusing this relocation type.  This points to a pair
>             of insns, addis + load.  If the displacement is small, we
> @@ -552,11 +560,14 @@ static void patch_reloc(tcg_insn_unit *code_ptr, in=
t type,
>          } else {
>              int16_t lo =3D value;
>              int hi =3D value - lo;
> -            assert(hi + lo =3D=3D value);
> -            code_ptr[0] =3D deposit32(code_ptr[0], 0, 16, hi >> 16);
> -            code_ptr[1] =3D deposit32(code_ptr[1], 0, 16, lo);
> +            if (hi + lo =3D=3D value) {
> +                code_ptr[0] =3D deposit32(code_ptr[0], 0, 16, hi >> 16);
> +                code_ptr[1] =3D deposit32(code_ptr[1], 0, 16, lo);
> +            } else {
> +                return false;
> +            }
>          }
> -        break;
> +        return true;
>      default:
>          g_assert_not_reached();
>      }
> diff --git a/tcg/s390/tcg-target.inc.c b/tcg/s390/tcg-target.inc.c
> index 17c435ade5..a8d72dd630 100644
> --- a/tcg/s390/tcg-target.inc.c
> +++ b/tcg/s390/tcg-target.inc.c
> @@ -366,7 +366,7 @@ static void * const qemu_st_helpers[16] =3D {
>  static tcg_insn_unit *tb_ret_addr;
>  uint64_t s390_facilities;
>
> -static void patch_reloc(tcg_insn_unit *code_ptr, int type,
> +static bool patch_reloc(tcg_insn_unit *code_ptr, int type,
>                          intptr_t value, intptr_t addend)
>  {
>      intptr_t pcrel2;
> @@ -377,22 +377,35 @@ static void patch_reloc(tcg_insn_unit *code_ptr, in=
t type,
>
>      switch (type) {
>      case R_390_PC16DBL:
> -        assert(pcrel2 =3D=3D (int16_t)pcrel2);
> -        tcg_patch16(code_ptr, pcrel2);
> +        if (pcrel2 =3D=3D (int16_t)pcrel2) {
> +            tcg_patch16(code_ptr, pcrel2);
> +            return true;
> +        }
>          break;
>      case R_390_PC32DBL:
> -        assert(pcrel2 =3D=3D (int32_t)pcrel2);
> -        tcg_patch32(code_ptr, pcrel2);
> +        if (pcrel2 =3D=3D (int32_t)pcrel2) {
> +            tcg_patch32(code_ptr, pcrel2);
> +            return true;
> +        }
>          break;
>      case R_390_20:
> -        assert(value =3D=3D sextract64(value, 0, 20));
> -        old =3D *(uint32_t *)code_ptr & 0xf00000ff;
> -        old |=3D ((value & 0xfff) << 16) | ((value & 0xff000) >> 4);
> -        tcg_patch32(code_ptr, old);
> +        if (value =3D=3D sextract64(value, 0, 20)) {
> +            old =3D *(uint32_t *)code_ptr & 0xf00000ff;
> +            old |=3D ((value & 0xfff) << 16) | ((value & 0xff000) >> 4);
> +            tcg_patch32(code_ptr, old);
> +            return true;
> +        }
>          break;
>      default:
>          g_assert_not_reached();
>      }
> +    return false;
> +}
> +
> +static void patch_reloc_force(tcg_insn_unit *code_ptr, int type,
> +                              intptr_t value, intptr_t addend)
> +{
> +    tcg_debug_assert(patch_reloc(code_ptr, type, value, addend));

Side effect in assert.

Also as patch_reloc_force is only called for softmmu it needs a guard to
stop the compiler complaining for a linux-user build:


In file included from /root/src/github.com/stsquad/qemu/tcg/tcg.c:320:0:
/root/src/github.com/stsquad/qemu/tcg/s390/tcg-target.inc.c:405:13: error: =
'patch_reloc_force' defined but not used [-Werror=3Dunused-function]
 static void patch_reloc_force(tcg_insn_unit *code_ptr, int type,
             ^~~~~~~~~~~~~~~~~

>  }
>
>  /* parse target specific constraints */
> @@ -1618,7 +1631,8 @@ static void tcg_out_qemu_ld_slow_path(TCGContext *s=
, TCGLabelQemuLdst *lb)
>      TCGMemOpIdx oi =3D lb->oi;
>      TCGMemOp opc =3D get_memop(oi);
>
> -    patch_reloc(lb->label_ptr[0], R_390_PC16DBL, (intptr_t)s->code_ptr, =
2);
> +    patch_reloc_force(lb->label_ptr[0], R_390_PC16DBL,
> +                      (intptr_t)s->code_ptr, 2);
>
>      tcg_out_mov(s, TCG_TYPE_PTR, TCG_REG_R2, TCG_AREG0);
>      if (TARGET_LONG_BITS =3D=3D 64) {
> @@ -1639,7 +1653,8 @@ static void tcg_out_qemu_st_slow_path(TCGContext *s=
, TCGLabelQemuLdst *lb)
>      TCGMemOpIdx oi =3D lb->oi;
>      TCGMemOp opc =3D get_memop(oi);
>
> -    patch_reloc(lb->label_ptr[0], R_390_PC16DBL, (intptr_t)s->code_ptr, =
2);
> +    patch_reloc_force(lb->label_ptr[0], R_390_PC16DBL,
> +                      (intptr_t)s->code_ptr, 2);
>
>      tcg_out_mov(s, TCG_TYPE_PTR, TCG_REG_R2, TCG_AREG0);
>      if (TARGET_LONG_BITS =3D=3D 64) {
> diff --git a/tcg/sparc/tcg-target.inc.c b/tcg/sparc/tcg-target.inc.c
> index 04bdc3df5e..111f3312d3 100644
> --- a/tcg/sparc/tcg-target.inc.c
> +++ b/tcg/sparc/tcg-target.inc.c
> @@ -291,32 +291,34 @@ static inline int check_fit_i32(int32_t val, unsign=
ed int bits)
>  # define check_fit_ptr  check_fit_i32
>  #endif
>
> -static void patch_reloc(tcg_insn_unit *code_ptr, int type,
> +static bool patch_reloc(tcg_insn_unit *code_ptr, int type,
>                          intptr_t value, intptr_t addend)
>  {
>      uint32_t insn =3D *code_ptr;
>      intptr_t pcrel;
> +    bool ret;
>
>      value +=3D addend;
>      pcrel =3D tcg_ptr_byte_diff((tcg_insn_unit *)value, code_ptr);
>
>      switch (type) {
>      case R_SPARC_WDISP16:
> -        assert(check_fit_ptr(pcrel >> 2, 16));
> +        ret =3D check_fit_ptr(pcrel >> 2, 16);
>          insn &=3D ~INSN_OFF16(-1);
>          insn |=3D INSN_OFF16(pcrel);
>          break;
>      case R_SPARC_WDISP19:
> -        assert(check_fit_ptr(pcrel >> 2, 19));
> +        ret =3D check_fit_ptr(pcrel >> 2, 19);
>          insn &=3D ~INSN_OFF19(-1);
>          insn |=3D INSN_OFF19(pcrel);
>          break;
>      case R_SPARC_13:
>          /* Note that we're abusing this reloc type for our own needs.  */
> +        ret =3D true;
>          if (!check_fit_ptr(value, 13)) {
>              int adj =3D (value > 0 ? 0xff8 : -0x1000);
>              value -=3D adj;
> -            assert(check_fit_ptr(value, 13));
> +            ret =3D check_fit_ptr(value, 13);
>              *code_ptr++ =3D (ARITH_ADD | INSN_RD(TCG_REG_T2)
>                             | INSN_RS1(TCG_REG_TB) | INSN_IMM13(adj));
>              insn ^=3D INSN_RS1(TCG_REG_TB) ^ INSN_RS1(TCG_REG_T2);
> @@ -328,12 +330,13 @@ static void patch_reloc(tcg_insn_unit *code_ptr, in=
t type,
>          /* Note that we're abusing this reloc type for our own needs.  */
>          code_ptr[0] =3D deposit32(code_ptr[0], 0, 22, value >> 10);
>          code_ptr[1] =3D deposit32(code_ptr[1], 0, 10, value);
> -        return;
> +        return value =3D=3D (intptr_t)(uint32_t)value;
>      default:
>          g_assert_not_reached();
>      }
>
>      *code_ptr =3D insn;
> +    return ret;
>  }
>
>  /* parse target specific constraints */
> diff --git a/tcg/tcg-pool.inc.c b/tcg/tcg-pool.inc.c
> index 7af5513ff3..ab8f6df8b0 100644
> --- a/tcg/tcg-pool.inc.c
> +++ b/tcg/tcg-pool.inc.c
> @@ -140,6 +140,8 @@ static bool tcg_out_pool_finalize(TCGContext *s)
>
>      for (; p !=3D NULL; p =3D p->next) {
>          size_t size =3D sizeof(tcg_target_ulong) * p->nlong;
> +        bool ok;
> +
>          if (!l || l->nlong !=3D p->nlong || memcmp(l->data, p->data, siz=
e)) {
>              if (unlikely(a > s->code_gen_highwater)) {
>                  return false;
> @@ -148,7 +150,8 @@ static bool tcg_out_pool_finalize(TCGContext *s)
>              a +=3D size;
>              l =3D p;
>          }
> -        patch_reloc(p->label, p->rtype, (intptr_t)a - size, p->addend);
> +        ok =3D patch_reloc(p->label, p->rtype, (intptr_t)a - size, p->ad=
dend);
> +        tcg_debug_assert(ok);
>      }
>
>      s->code_ptr =3D a;
> diff --git a/tcg/tcg.c b/tcg/tcg.c
> index e85133ef05..54f1272187 100644
> --- a/tcg/tcg.c
> +++ b/tcg/tcg.c
> @@ -66,7 +66,7 @@
>  static void tcg_target_init(TCGContext *s);
>  static const TCGTargetOpDef *tcg_target_op_def(TCGOpcode);
>  static void tcg_target_qemu_prologue(TCGContext *s);
> -static void patch_reloc(tcg_insn_unit *code_ptr, int type,
> +static bool patch_reloc(tcg_insn_unit *code_ptr, int type,
>                          intptr_t value, intptr_t addend);
>
>  /* The CIE and FDE header definitions will be common to all hosts.  */
> @@ -268,7 +268,8 @@ static void tcg_out_reloc(TCGContext *s, tcg_insn_uni=
t *code_ptr, int type,
>          /* FIXME: This may break relocations on RISC targets that
>             modify instruction fields in place.  The caller may not have
>             written the initial value.  */
> -        patch_reloc(code_ptr, type, l->u.value, addend);
> +        bool ok =3D patch_reloc(code_ptr, type, l->u.value, addend);
> +        tcg_debug_assert(ok);
>      } else {
>          /* add a new relocation entry */
>          r =3D tcg_malloc(sizeof(TCGRelocation));
> @@ -288,7 +289,8 @@ static void tcg_out_label(TCGContext *s, TCGLabel *l,=
 tcg_insn_unit *ptr)
>      tcg_debug_assert(!l->has_value);
>
>      for (r =3D l->u.first_reloc; r !=3D NULL; r =3D r->next) {
> -        patch_reloc(r->ptr, r->type, value, r->addend);
> +        bool ok =3D patch_reloc(r->ptr, r->type, value, r->addend);
> +        tcg_debug_assert(ok);
>      }
>
>      l->has_value =3D 1;
> diff --git a/tcg/tci/tcg-target.inc.c b/tcg/tci/tcg-target.inc.c
> index 62ed097254..0015a98485 100644
> --- a/tcg/tci/tcg-target.inc.c
> +++ b/tcg/tci/tcg-target.inc.c
> @@ -369,7 +369,7 @@ static const char *const tcg_target_reg_names[TCG_TAR=
GET_NB_REGS] =3D {
>  };
>  #endif
>
> -static void patch_reloc(tcg_insn_unit *code_ptr, int type,
> +static bool patch_reloc(tcg_insn_unit *code_ptr, int type,
>                          intptr_t value, intptr_t addend)
>  {
>      /* tcg_out_reloc always uses the same type, addend. */
> @@ -381,6 +381,7 @@ static void patch_reloc(tcg_insn_unit *code_ptr, int =
type,
>      } else {
>          tcg_patch64(code_ptr, value);
>      }
> +    return true;
>  }
>
>  /* Parse target specific constraints. */


--
Alex Benn=C3=A9e

