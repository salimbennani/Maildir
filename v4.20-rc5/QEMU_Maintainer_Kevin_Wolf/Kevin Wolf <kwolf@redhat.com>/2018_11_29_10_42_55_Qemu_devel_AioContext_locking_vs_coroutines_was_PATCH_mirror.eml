Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 29 Nov 2018 19:48:47 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id C8F0F5802E4
	for <like.xu@linux.intel.com>; Thu, 29 Nov 2018 02:43:29 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 02:43:29 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AOgTM9BK/+E0aGyT2/NmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgfLfvxwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJPUMhRSSJPAY28?=
 =?us-ascii?q?YIQTAOUcP+lXoZTzp0MMoBW8CgSgGe3ixiNWiX/txqA6z/gtHBva0AA8Bd8Crn?=
 =?us-ascii?q?LZp8j1OqcIVuC1ybHFwzDdYPNI2Df97pXDfRAmofGIU7J7bM3cyUohFgPCilWQ?=
 =?us-ascii?q?p5foPymL2esQs2iU9fZgWfizhG4grgF8uz6izdovhInRno8Z1EzI+CZjzIooON?=
 =?us-ascii?q?G1S1R3bcCqHZZQrS2WKol7Tts8T210vCs20KAKtJClcCQQ1ZgqxBDSZ+aZf4WL?=
 =?us-ascii?q?5B/oSfyfLi1ihH1/fbKynxay/lakyu37TsS01FdKrjFZktnXrHwN2BrT6tWdRv?=
 =?us-ascii?q?t65Eeh1i6D1wHV6u5aPUA5jbTXJ4Iiz7Iqi5YfrEfOEjXolEj4jKKabFgo9+qw?=
 =?us-ascii?q?5+TieLrmp5ucN4FuigH5N6QjgtW/Dvo9MggTRmSU5Pqz1KP98k39WblFlfo2kr?=
 =?us-ascii?q?TfsJ/GO8sbvam1AwtU0oYg9RmzFTin0MkAkHkDLVJFfg+HjofzN1HPJvD4Eemw?=
 =?us-ascii?q?g1C2nDh3wPDGO6bsApPKLnjFn7fhe6t951RbyAopwtBT/4hUBa0ZIPLvRk/xs8?=
 =?us-ascii?q?TVDhs4Mwy33enrEtp81p4FVGKLA6+ZNr7SsFCS6uIuJemMeJEauDLnJ/c54P7u?=
 =?us-ascii?q?iCxxpFkGYKP83YcLcGvqWbNiIl6FejzqhdEOF3pMuRAxC+njiVmHWDgUYG6uXq?=
 =?us-ascii?q?U6/XYiBYe7SIvOWI2p04GHxzqxS5hfZ2RaDQKVHHL1MomJRfoILTifO9JsiSAs?=
 =?us-ascii?q?U7+nRIk8kxa0u1jh1rBlI+HIrzAero/pz9Nv5ufexi01oAJwBsic1mCXB1p5m2?=
 =?us-ascii?q?4OWyQxwuVYrk1w1EyA0Lkw1+JDGNle4e9SVRkSK5/G0/F9GcL1HAnGe4HaZkyh?=
 =?us-ascii?q?R4CFDC8wSJoOxNsAKxJ+BNKmgDjZ0iaqCqNTnLuOUs9nupnA1mT8cp4ug03N07?=
 =?us-ascii?q?Ms2hx/GpNC?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AUAABmwv9bhxHrdtBlHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgTAlgj2MEV+LKYINl0KBdhEYFIdyIjQJDQEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BCgsJCBsOL4I2BQIDGgEGglwBAgIBAQIkEwwKKQMCAQECBgEBHg0dCAMBCwVJE?=
 =?us-ascii?q?wWDHIF6CAEEpzczii2MFheBQD+DbohrgiYCiQeXHAmRJwsYiViHRJhMgUaCDTM?=
 =?us-ascii?q?aCBsVgyeCJAMXjh5AMYEHHIslgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AUAABmwv9bhxHrdtBlHAEBAQQBAQcEAQGBUQcBAQsBgTA?=
 =?us-ascii?q?lgj2MEV+LKYINl0KBdhEYFIdyIjQJDQEDAQEBAQEBAgETAQEBCgsJCBsOL4I2B?=
 =?us-ascii?q?QIDGgEGglwBAgIBAQIkEwwKKQMCAQECBgEBHg0dCAMBCwVJEwWDHIF6CAEEpzc?=
 =?us-ascii?q?zii2MFheBQD+DbohrgiYCiQeXHAmRJwsYiViHRJhMgUaCDTMaCBsVgyeCJAMXj?=
 =?us-ascii?q?h5AMYEHHIslgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,294,1539673200"; 
   d="scan'208";a="42797357"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 29 Nov 2018 02:43:28 -0800
Received: from localhost ([::1]:53363 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gSJn6-0000rm-38
	for like.xu@linux.intel.com; Thu, 29 Nov 2018 05:43:28 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:57126)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <kwolf@redhat.com>) id 1gSJmo-0000n8-Bd
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 05:43:11 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <kwolf@redhat.com>) id 1gSJmm-0005a5-T1
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 05:43:10 -0500
Received: from mx1.redhat.com ([209.132.183.28]:39802)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <kwolf@redhat.com>)
	id 1gSJmh-0005XQ-AS; Thu, 29 Nov 2018 05:43:03 -0500
Received: from smtp.corp.redhat.com (int-mx05.intmail.prod.int.phx2.redhat.com
	[10.5.11.15])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 0425A89ADD;
	Thu, 29 Nov 2018 10:43:02 +0000 (UTC)
Received: from linux.fritz.box (ovpn-117-117.ams2.redhat.com [10.36.117.117])
	by smtp.corp.redhat.com (Postfix) with ESMTPS id 8CBE85EDE4;
	Thu, 29 Nov 2018 10:42:56 +0000 (UTC)
Date: Thu, 29 Nov 2018 11:42:55 +0100
From: Kevin Wolf <kwolf@redhat.com>
To: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Message-ID: <20181129104255.GC4797@linux.fritz.box>
References: <20181128201317.146504-1-vsementsov@virtuozzo.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181128201317.146504-1-vsementsov@virtuozzo.com>
User-Agent: Mutt/1.10.1 (2018-07-13)
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.15
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.26]);
	Thu, 29 Nov 2018 10:43:02 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: [Qemu-devel] AioContext locking vs. coroutines (was: [PATCH] mirror
 dead-lock)
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: qemu-block@nongnu.org, jcody@redhat.com, qemu-devel@nongnu.org,
	mreitz@redhat.com, dplotnikov@virtuozzo.com, pbonzini@redhat.com,
	den@openvz.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Am 28.11.2018 um 21:13 hat Vladimir Sementsov-Ogievskiy geschrieben:
> Hi all!
> 
> We've faced the following mirror bug:
> 
> Just run mirror on qcow2 image more than 1G, and qemu is in dead lock.
> 
> Note: I've decided to send this as a patch with reproducer, to make it
> easier to reproduce). No needs to commit this before mirror fix, but
> after, commit message may be a bit shortened, may be even up to just
> "iotests: add simple mirror test".
> 
> Note2: if drop 'kvm' option from the test it still reproduces, but if
> use iotests.VM() - does not (may be, because of qtest?). If add
> iothread, it doesn't reproduce too. Also, it doesn't reproduce with raw
> instead of qcow2 and doesn't reproduce for small images.
> 
> So, here is the dead-lock:
> 
>  (gdb) info thr
>    Id   Target Id         Frame
>    3    Thread 0x7fd7fd4ea700 (LWP 145412) "qemu-system-x86" syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38
>    2    Thread 0x7fd7fc205700 (LWP 145416) "qemu-system-x86" __lll_lock_wait () at ../nptl/sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:135
>  * 1    Thread 0x7fd8102cfcc0 (LWP 145411) "qemu-system-x86" __lll_lock_wait () at ../nptl/sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:135
>  (gdb) bt
>  #0  0x00007fd80e8864cd in __lll_lock_wait () at ../nptl/sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:135
>  #1  0x00007fd80e881dcb in _L_lock_812 () at /lib64/libpthread.so.0
>  #2  0x00007fd80e881c98 in __GI___pthread_mutex_lock (mutex=0x561032dce420 <qemu_global_mutex>) at ../nptl/pthread_mutex_lock.c:79
>  #3  0x0000561032654c3b in qemu_mutex_lock_impl (mutex=0x561032dce420 <qemu_global_mutex>, file=0x5610327d8654 "util/main-loop.c", line=236) at util/qemu-thread-posix.c:66
>  #4  0x00005610320cb327 in qemu_mutex_lock_iothread_impl (file=0x5610327d8654 "util/main-loop.c", line=236) at /work/src/qemu/up-mirror-dead-lock/cpus.c:1849
>  #5  0x000056103265038f in os_host_main_loop_wait (timeout=480116000) at util/main-loop.c:236
>  #6  0x0000561032650450 in main_loop_wait (nonblocking=0) at util/main-loop.c:497
>  #7  0x00005610322575c9 in main_loop () at vl.c:1892
>  #8  0x000056103225f3c7 in main (argc=13, argv=0x7ffcc8bb15a8, envp=0x7ffcc8bb1618) at vl.c:4648
>  (gdb) p qemu_global_mutex
>  $1 = {lock = {__data = {__lock = 2, __count = 0, __owner = 145416, __nusers = 1, __kind = 0, __spins = 0, __elision = 0, __list = {__prev = 0x0, __next = 0x0}},
>      __size = "\002\000\000\000\000\000\000\000\b8\002\000\001", '\000' <repeats 26 times>, __align = 2}, file = 0x56103267bcb0 "/work/src/qemu/up-mirror-dead-lock/exec.c", line = 3197, initialized = true}
> 
>  So, we see, that thr1 is main loop, and now it wants BQL, which is
>  owned by thr2.
> 
>  (gdb) thr 2
>  [Switching to thread 2 (Thread 0x7fd7fc205700 (LWP 145416))]
>  #0  __lll_lock_wait () at ../nptl/sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:135
>  135     2:      movl    %edx, %eax
>  (gdb) bt
>  #0  0x00007fd80e8864cd in __lll_lock_wait () at ../nptl/sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:135
>  #1  0x00007fd80e881de6 in _L_lock_870 () at /lib64/libpthread.so.0
>  #2  0x00007fd80e881cdf in __GI___pthread_mutex_lock (mutex=0x561034d25dc0) at ../nptl/pthread_mutex_lock.c:114
>  #3  0x0000561032654c3b in qemu_mutex_lock_impl (mutex=0x561034d25dc0, file=0x5610327d81d1 "util/async.c", line=511) at util/qemu-thread-posix.c:66
>  #4  0x000056103264d840 in aio_context_acquire (ctx=0x561034d25d60) at util/async.c:511
>  #5  0x0000561032254554 in dma_blk_cb (opaque=0x7fd7f41463b0, ret=0) at dma-helpers.c:169
>  #6  0x000056103225479d in dma_blk_io (ctx=0x561034d25d60, sg=0x561035a80210, offset=0, align=512, io_func=0x5610322547a3 <dma_blk_read_io_func>, io_func_opaque=0x561034d40870, cb=0x561032340b35 <ide_dma_cb>, opaque=0x561035a7fee8, dir=DMA_DIRECTION_FROM_DEVICE) at dma-helpers.c:227
>  #7  0x0000561032254855 in dma_blk_read (blk=0x561034d40870, sg=0x561035a80210, offset=0, align=512, cb=0x561032340b35 <ide_dma_cb>, opaque=0x561035a7fee8) at dma-helpers.c:245
>  #8  0x0000561032340e6e in ide_dma_cb (opaque=0x561035a7fee8, ret=0) at hw/ide/core.c:910
>  #9  0x000056103234a912 in bmdma_cmd_writeb (bm=0x561035a81030, val=9) at hw/ide/pci.c:240
>  #10 0x000056103234b5bd in bmdma_write (opaque=0x561035a81030, addr=0, val=9, size=1) at hw/ide/piix.c:76
>  #11 0x00005610320e5763 in memory_region_write_accessor (mr=0x561035a81180, addr=0, value=0x7fd7fc204678, size=1, shift=0, mask=255, attrs=...) at /work/src/qemu/up-mirror-dead-lock/memory.c:504
>  #12 0x00005610320e596d in access_with_adjusted_size (addr=0, value=0x7fd7fc204678, size=1, access_size_min=1, access_size_max=4, access_fn=
>      0x5610320e5683 <memory_region_write_accessor>, mr=0x561035a81180, attrs=...) at /work/src/qemu/up-mirror-dead-lock/memory.c:570
>  #13 0x00005610320e86ce in memory_region_dispatch_write (mr=0x561035a81180, addr=0, data=9, size=1, attrs=...) at /work/src/qemu/up-mirror-dead-lock/memory.c:1452
>  #14 0x0000561032083770 in flatview_write_continue (fv=0x7fd7f4108090, addr=49216, attrs=..., buf=0x7fd810309000 "\t\371\061", len=1, addr1=0, l=1, mr=0x561035a81180)
>      at /work/src/qemu/up-mirror-dead-lock/exec.c:3233
>  #15 0x00005610320838cf in flatview_write (fv=0x7fd7f4108090, addr=49216, attrs=..., buf=0x7fd810309000 "\t\371\061", len=1) at /work/src/qemu/up-mirror-dead-lock/exec.c:3272
>  #16 0x0000561032083bef in address_space_write (as=0x561032dcdc40 <address_space_io>, addr=49216, attrs=..., buf=0x7fd810309000 "\t\371\061", len=1) at /work/src/qemu/up-mirror-dead-lock/exec.c:3362
>  #17 0x0000561032083c40 in address_space_rw (as=0x561032dcdc40 <address_space_io>, addr=49216, attrs=..., buf=0x7fd810309000 "\t\371\061", len=1, is_write=true) at /work/src/qemu/up-mirror-dead-lock/exec.c:3373
>  #18 0x0000561032104766 in kvm_handle_io (port=49216, attrs=..., data=0x7fd810309000, direction=1, size=1, count=1) at /work/src/qemu/up-mirror-dead-lock/accel/kvm/kvm-all.c:1775
>  #19 0x0000561032104f0e in kvm_cpu_exec (cpu=0x561034d60240) at /work/src/qemu/up-mirror-dead-lock/accel/kvm/kvm-all.c:2021
>  #20 0x00005610320ca396 in qemu_kvm_cpu_thread_fn (arg=0x561034d60240) at /work/src/qemu/up-mirror-dead-lock/cpus.c:1281
>  #21 0x00005610326557ab in qemu_thread_start (args=0x561034d81a70) at util/qemu-thread-posix.c:498
>  #22 0x00007fd80e87fdd5 in start_thread (arg=0x7fd7fc205700) at pthread_create.c:308
>  #23 0x00007fd804c97b3d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:113
>  (gdb) fr 2
>  #2  0x00007fd80e881cdf in __GI___pthread_mutex_lock (mutex=0x561034d25dc0) at ../nptl/pthread_mutex_lock.c:114
>  114           LLL_MUTEX_LOCK (mutex);
>  (gdb) p *mutex
>  $2 = {__data = {__lock = 2, __count = 16, __owner = 145411, __nusers = 1, __kind = 1, __spins = 0, __elision = 0, __list = {__prev = 0x0, __next = 0x0}},
>    __size = "\002\000\000\000\020\000\000\000\003\070\002\000\001\000\000\000\001", '\000' <repeats 22 times>, __align = 68719476738}
> 
>  And thr2 wants aio context mutex, which is owned by thr1. Classic
>  dead-lock.
> 
>  But who took aio context? Suppose that it is mirror and check:
> 
>  (gdb) p blk_next(0)->root->bs->job
>  $3 = (BlockJob *) 0x5610358e2520
>  (gdb) p (MirrorBlockJob *)$3
>  $4 = (MirrorBlockJob *) 0x5610358e2520
>  [...]
>  (gdb) p $4->target->root->bs->tracked_requests.lh_first->co
>  $7 = (Coroutine *) 0x561035dd0860
>  [...]
>  (gdb) qemu coroutine 0x561035dd0860
>  #0  0x0000561032670ab2 in qemu_coroutine_switch (from_=0x561035dd0860, to_=0x7fd8102cfb80, action=COROUTINE_YIELD) at util/coroutine-ucontext.c:218
>  #1  0x000056103266f0fc in qemu_coroutine_yield () at util/qemu-coroutine.c:194
>  #2  0x000056103266fb76 in qemu_co_mutex_lock_slowpath (ctx=0x561034d25d60, mutex=0x561035c5a4b0) at util/qemu-coroutine-lock.c:235
>  #3  0x000056103266fc82 in qemu_co_mutex_lock (mutex=0x561035c5a4b0) at util/qemu-coroutine-lock.c:273
>  #4  0x0000561032544f4e in qcow2_co_pwritev (bs=0x561035b86890, offset=531628032, bytes=1048576, qiov=0x561034fd08a8, flags=0) at block/qcow2.c:2063
>  #5  0x000056103258e5df in bdrv_driver_pwritev (bs=0x561035b86890, offset=531628032, bytes=1048576, qiov=0x561034fd08a8, flags=0) at block/io.c:1092
>  #6  0x000056103259004b in bdrv_aligned_pwritev (child=0x561035b178c0, req=0x7fd7a23eae30, offset=531628032, bytes=1048576, align=1, qiov=0x561034fd08a8, flags=0) at block/io.c:1719
>  #7  0x0000561032590cb2 in bdrv_co_pwritev (child=0x561035b178c0, offset=531628032, bytes=1048576, qiov=0x561034fd08a8, flags=0) at block/io.c:1961
>  #8  0x0000561032578478 in blk_co_pwritev (blk=0x561035dd0400, offset=531628032, bytes=1048576, qiov=0x561034fd08a8, flags=0) at block/block-backend.c:1203
>  #9  0x00005610325866a0 in mirror_read_complete (op=0x561034fd08a0, ret=0) at block/mirror.c:232
>  #10 0x0000561032586e1a in mirror_co_read (opaque=0x561034fd08a0) at block/mirror.c:370
>  #11 0x000056103267081d in coroutine_trampoline (i0=903678048, i1=22032) at util/coroutine-ucontext.c:116
>  #12 0x00007fd804be0fc0 in __start_context () at /lib64/libc.so.6
>  #13 0x00007fd7fafff600 in  ()
>  #14 0x0000000000000000 in  ()
> 
>  Ok, look at mirror_read_complete:
>  static void coroutine_fn mirror_read_complete(MirrorOp *op, int ret)
>  {
>      MirrorBlockJob *s = op->s;
> 
>      aio_context_acquire(blk_get_aio_context(s->common.blk));
>      if (ret < 0) {
>          BlockErrorAction action;
> 
>          bdrv_set_dirty_bitmap(s->dirty_bitmap, op->offset, op->bytes);
>          action = mirror_error_action(s, true, -ret);
>          if (action == BLOCK_ERROR_ACTION_REPORT && s->ret >= 0) {
>              s->ret = ret;
>          }
> 
>          mirror_iteration_done(op, ret);
>      } else {
>          ret = blk_co_pwritev(s->target, op->offset,
>                               op->qiov.size, &op->qiov, 0);
>          mirror_write_complete(op, ret);
>      }
>      aio_context_release(blk_get_aio_context(s->common.blk));
>  }
> 
>  Line 232 if blk_co_pwritev. So, we acquired aio context and go to
>  write, which may yield, which makes the dead-lock possible.
> 
>  And bisect points to
>  commit 2e1990b26e5aa1ba1a730aa6281df123bb7a71b6 (refs/bisect/bad)
>  Author: Max Reitz <mreitz@redhat.com>
>  Date:   Wed Jun 13 20:18:11 2018 +0200
> 
>      block/mirror: Convert to coroutines
> 
>  So, yes, 3.0 has the bug.
> 
>  Interesting thing is that pair of aio_context_acquire / release exists
>  even before that patch, and it was added in 2.9:
>  commit b9e413dd3756f71abe4e8cafe1d7a459ce74ccf4
>  Author: Paolo Bonzini <pbonzini@redhat.com>
>  Date:   Mon Feb 13 14:52:32 2017 +0100
> 
>      block: explicitly acquire aiocontext in aio callbacks that need it
> 
>  In 2.9 mirror_read_complete was a callback for blk_aio_preadv. But
>  honestly, I don't understand why it needed to acquire the context: it
>  is inserted to this context as a BH, why it need to additionally
>  acquire the context?

BHs don't automatically take the AioContext lock of the AioContext from
which they are run.

>  Anyway, after 2e1990b26e5 mirror_read/write_complete are not
>  callbacks, so, even if b9e413dd3 was OK, it doesn't relate to this
>  place now.

I guess in this specific instance we can just remove the locking from
mirror_read/write_complete becasue it's only locking an AioContext whose
lock we already hold anyway because we're in a Coroutine owned by the
AioContext, so yielding will release the lock and avoid the deadlock.

But more generally, does this mean that it is never correct to have an
explicit aio_context_acquire/release() pair in coroutine context, at
least for all practical cases where you call things that could yield?
And if you're inside a coroutine and want to access something in a
different AioContext, you need to drop out of the coroutine first?

If so, should aio_context_acquire() then assert that it's not called
from coroutine context?

Paolo, will this restriction of coroutines be solved for good when you
get your patches merged that remove the AioContext lock?

Kevin

