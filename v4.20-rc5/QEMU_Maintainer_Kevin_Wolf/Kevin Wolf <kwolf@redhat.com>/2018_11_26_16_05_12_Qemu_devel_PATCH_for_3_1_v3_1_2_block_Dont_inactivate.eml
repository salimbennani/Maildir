Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 27 Nov 2018 08:37:47 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 2665F5803C2
	for <like.xu@linux.intel.com>; Mon, 26 Nov 2018 08:09:46 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 26 Nov 2018 08:09:45 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AZdvOThR5GehDv5Rprr+Qvw2Zi9psv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa6ybRyN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4qF2QxHqlS?=
 =?us-ascii?q?gHLSY0/mHJhMJ+j6xUohyhqBNwzYDJeIGYNvhwc6zAcd4UWWZOQN1RWjddDoOl?=
 =?us-ascii?q?dYYDE/YNMfpEo4T7ulAArQG+BQ6pBO73zzFHmGH23aw80+88EQ7G2wggH9wTu3?=
 =?us-ascii?q?nTr9X0OqASUeS7zKTT1zXMce5Z2Tfn54jUaBwuvfaMXbdpfMfX1EIhFBvFg02O?=
 =?us-ascii?q?pYD5PD6ZzPkBv3WY4uZ6S+6ihW4qpxtsrjWt3ssglJXFi4YPxlzZ+yh13pw5Kc?=
 =?us-ascii?q?C7RUN1e9KoDphduieHPIVsWMwiWXtnuCMix70Gp5G7eC8KxYwjxx7ecPyHb5OI?=
 =?us-ascii?q?7gjsVOaXPDd0nnVleKiwhxqq8EigzPPzVtWs3VpUsiZIkcPAum0Q2xHQ8MSLVP?=
 =?us-ascii?q?Vw80e71TqS1Q3f8uRELlo1larfJZ4h2Lkwlp8LvETaACD2nVj2gLaLeUo65Oin?=
 =?us-ascii?q?9eDnbqz9qZ+bKo90jB3xPbo1msC4BeQ4MwsOUHaB9eWzyb3u5Un5QLRMjv0rna?=
 =?us-ascii?q?jVqpHaJcIHpqGnBw9ZyJos6xG6Dzq91tQYmn8HLF1DeBKalYTpPEvOIP/gAfel?=
 =?us-ascii?q?n1usiCtrx+zBPrD5BpXNL3vDn6n7cbdy9k5R0w4zzdFZ55JJBbANOvPzWknttN?=
 =?us-ascii?q?PGCh81KRC7w+HiCIY164UFRGjaArOFKLiA9hiM5/kzOK+KY4kaviu7LOIqoPvn?=
 =?us-ascii?q?jHs8kFlaerG13JwRczehE/F7ZkmUf3fo0eoHCnoA6w83Tej2jw+bXDtOInq/Qa?=
 =?us-ascii?q?84oys2EZ+rFpvrQIerj7qcmiChEcpNe2pEB1uQRGrubJiOQPwWaSifcfNmxyUJ?=
 =?us-ascii?q?UKXkQYsm3hKGsgj8xLx6aO3O9X42r5Xmgft4+ezV3S418TI8W8eC1GWDZ3t5km?=
 =?us-ascii?q?MBW3k926Up8h818UuKzaUt268QLtdU/f4cCgo=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AsAAB3GvxbhxHrdtBkHgEGBwaBUQkLA?=
 =?us-ascii?q?YEwgmKMcIsjmUmBcxQYFIhjIjQJDQEDAQEBAQEBAgETAQEBCgsJCBsOL4I2BQI?=
 =?us-ascii?q?DGAmCXAMDAQIkHwopAwMBAgYBAUgIAwFTGQWDHIICAQSmdDOFQIRejAkXgUA/g?=
 =?us-ascii?q?RGBF4xUAokZCoc7jyQJhj2DbIZ7CxiBWYd4hzeJbY5DgUaCDTMaCBsVgyeCJxc?=
 =?us-ascii?q?SjgtAMYEHHIlogXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AsAAB3GvxbhxHrdtBkHgEGBwaBUQkLAYEwgmKMcIsjmUm?=
 =?us-ascii?q?BcxQYFIhjIjQJDQEDAQEBAQEBAgETAQEBCgsJCBsOL4I2BQIDGAmCXAMDAQIkH?=
 =?us-ascii?q?wopAwMBAgYBAUgIAwFTGQWDHIICAQSmdDOFQIRejAkXgUA/gRGBF4xUAokZCoc?=
 =?us-ascii?q?7jyQJhj2DbIZ7CxiBWYd4hzeJbY5DgUaCDTMaCBsVgyeCJxcSjgtAMYEHHIlog?=
 =?us-ascii?q?XcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,282,1539673200"; 
   d="scan'208";a="63987916"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mga01b.intel.com with ESMTP/TLS/AES256-SHA; 26 Nov 2018 08:09:45 -0800
Received: from localhost ([::1]:37415 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gRJSC-00085q-Gv
	for like.xu@linux.intel.com; Mon, 26 Nov 2018 11:09:44 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:58168)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <kwolf@redhat.com>) id 1gRJON-0005RW-Nc
	for qemu-devel@nongnu.org; Mon, 26 Nov 2018 11:05:49 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <kwolf@redhat.com>) id 1gRJOK-0004Ot-JW
	for qemu-devel@nongnu.org; Mon, 26 Nov 2018 11:05:47 -0500
Received: from mx1.redhat.com ([209.132.183.28]:57156)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <kwolf@redhat.com>)
	id 1gRJO7-0004EC-9h; Mon, 26 Nov 2018 11:05:31 -0500
Received: from smtp.corp.redhat.com (int-mx07.intmail.prod.int.phx2.redhat.com
	[10.5.11.22])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 8971F3084299;
	Mon, 26 Nov 2018 16:05:25 +0000 (UTC)
Received: from localhost.localdomain.com (ovpn-116-140.ams2.redhat.com
	[10.36.116.140])
	by smtp.corp.redhat.com (Postfix) with ESMTP id 1263E1055007;
	Mon, 26 Nov 2018 16:05:19 +0000 (UTC)
From: Kevin Wolf <kwolf@redhat.com>
To: qemu-block@nongnu.org
Date: Mon, 26 Nov 2018 17:05:12 +0100
Message-Id: <20181126160513.26369-2-kwolf@redhat.com>
In-Reply-To: <20181126160513.26369-1-kwolf@redhat.com>
References: <20181126160513.26369-1-kwolf@redhat.com>
MIME-Version: 1.0
X-Scanned-By: MIMEDefang 2.84 on 10.5.11.22
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.40]);
	Mon, 26 Nov 2018 16:05:25 +0000 (UTC)
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: [Qemu-devel] [PATCH for-3.1 v3 1/2] block: Don't inactivate
 children before parents
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: kwolf@redhat.com, qemu-devel@nongnu.org, mreitz@redhat.com
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

bdrv_child_cb_inactivate() asserts that parents are already inactive
when children get inactivated. This precondition is necessary because
parents could still issue requests in their inactivation code.

When block nodes are created individually with -blockdev, all of them
are monitor owned and will be returned by bdrv_next() in an undefined
order (in practice, in the order of their creation, which is usually
children before parents), which obviously fails the assertion:

qemu: block.c:899: bdrv_child_cb_inactivate: Assertion `bs->open_flags & =
BDRV_O_INACTIVE' failed.

This patch fixes the ordering by skipping nodes with still active
parents in bdrv_inactivate_recurse() because we know that they will be
covered by recursion when the last active parent becomes inactive.

With the correct parents-before-children ordering, we also got rid of
the reason why commit aad0b7a0bfb introduced two passes, so we can go
back to a single-pass recursion. This is necessary so we can rely on the
BDRV_O_INACTIVE flag to skip nodes with active parents (the flag used
to be set only in pass 2, so we would always skip non-root nodes in
pass 1 because all parents would still be considered active; setting the
flag in pass 1 would mean, that we never skip anything in pass 2 because
all parents are already considered inactive).

Because of the change to single pass, this patch is best reviewed with
whitespace changes ignored.

Signed-off-by: Kevin Wolf <kwolf@redhat.com>
---
 block.c | 84 ++++++++++++++++++++++++++++++++++++---------------------
 1 file changed, 53 insertions(+), 31 deletions(-)

diff --git a/block.c b/block.c
index 5ba3435f8f..811239ca23 100644
--- a/block.c
+++ b/block.c
@@ -4612,45 +4612,68 @@ void bdrv_invalidate_cache_all(Error **errp)
     }
 }
=20
-static int bdrv_inactivate_recurse(BlockDriverState *bs,
-                                   bool setting_flag)
+static bool bdrv_has_bds_parent(BlockDriverState *bs, bool only_active)
+{
+    BdrvChild *parent;
+
+    QLIST_FOREACH(parent, &bs->parents, next_parent) {
+        if (parent->role->parent_is_bds) {
+            BlockDriverState *parent_bs =3D parent->opaque;
+            if (!only_active || !(parent_bs->open_flags & BDRV_O_INACTIV=
E)) {
+                return true;
+            }
+        }
+    }
+
+    return false;
+}
+
+static int bdrv_inactivate_recurse(BlockDriverState *bs)
 {
     BdrvChild *child, *parent;
+    uint64_t perm, shared_perm;
     int ret;
=20
     if (!bs->drv) {
         return -ENOMEDIUM;
     }
=20
-    if (!setting_flag && bs->drv->bdrv_inactivate) {
+    /* Make sure that we don't inactivate a child before its parent.
+     * It will be covered by recursion from the yet active parent. */
+    if (bdrv_has_bds_parent(bs, true)) {
+        return 0;
+    }
+
+    assert(!(bs->open_flags & BDRV_O_INACTIVE));
+
+    /* Inactivate this node */
+    if (bs->drv->bdrv_inactivate) {
         ret =3D bs->drv->bdrv_inactivate(bs);
         if (ret < 0) {
             return ret;
         }
     }
=20
-    if (setting_flag && !(bs->open_flags & BDRV_O_INACTIVE)) {
-        uint64_t perm, shared_perm;
-
-        QLIST_FOREACH(parent, &bs->parents, next_parent) {
-            if (parent->role->inactivate) {
-                ret =3D parent->role->inactivate(parent);
-                if (ret < 0) {
-                    return ret;
-                }
+    QLIST_FOREACH(parent, &bs->parents, next_parent) {
+        if (parent->role->inactivate) {
+            ret =3D parent->role->inactivate(parent);
+            if (ret < 0) {
+                return ret;
             }
         }
+    }
=20
-        bs->open_flags |=3D BDRV_O_INACTIVE;
+    bs->open_flags |=3D BDRV_O_INACTIVE;
+
+    /* Update permissions, they may differ for inactive nodes */
+    bdrv_get_cumulative_perm(bs, &perm, &shared_perm);
+    bdrv_check_perm(bs, NULL, perm, shared_perm, NULL, &error_abort);
+    bdrv_set_perm(bs, perm, shared_perm);
=20
-        /* Update permissions, they may differ for inactive nodes */
-        bdrv_get_cumulative_perm(bs, &perm, &shared_perm);
-        bdrv_check_perm(bs, NULL, perm, shared_perm, NULL, &error_abort)=
;
-        bdrv_set_perm(bs, perm, shared_perm);
-    }
=20
+    /* Recursively inactivate children */
     QLIST_FOREACH(child, &bs->children, next) {
-        ret =3D bdrv_inactivate_recurse(child->bs, setting_flag);
+        ret =3D bdrv_inactivate_recurse(child->bs);
         if (ret < 0) {
             return ret;
         }
@@ -4664,7 +4687,6 @@ int bdrv_inactivate_all(void)
     BlockDriverState *bs =3D NULL;
     BdrvNextIterator it;
     int ret =3D 0;
-    int pass;
     GSList *aio_ctxs =3D NULL, *ctx;
=20
     for (bs =3D bdrv_first(&it); bs; bs =3D bdrv_next(&it)) {
@@ -4676,17 +4698,17 @@ int bdrv_inactivate_all(void)
         }
     }
=20
-    /* We do two passes of inactivation. The first pass calls to drivers=
'
-     * .bdrv_inactivate callbacks recursively so all cache is flushed to=
 disk;
-     * the second pass sets the BDRV_O_INACTIVE flag so that no further =
write
-     * is allowed. */
-    for (pass =3D 0; pass < 2; pass++) {
-        for (bs =3D bdrv_first(&it); bs; bs =3D bdrv_next(&it)) {
-            ret =3D bdrv_inactivate_recurse(bs, pass);
-            if (ret < 0) {
-                bdrv_next_cleanup(&it);
-                goto out;
-            }
+    for (bs =3D bdrv_first(&it); bs; bs =3D bdrv_next(&it)) {
+        /* Nodes with BDS parents are covered by recursion from the last
+         * parent that gets inactivated. Don't inactivate them a second
+         * time if that has already happened. */
+        if (bdrv_has_bds_parent(bs, false)) {
+            continue;
+        }
+        ret =3D bdrv_inactivate_recurse(bs);
+        if (ret < 0) {
+            bdrv_next_cleanup(&it);
+            goto out;
         }
     }
=20
--=20
2.19.1


