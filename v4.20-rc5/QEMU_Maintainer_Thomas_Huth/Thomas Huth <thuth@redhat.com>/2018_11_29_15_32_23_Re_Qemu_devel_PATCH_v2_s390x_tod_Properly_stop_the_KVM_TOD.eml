Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 08:47:15 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id A88C95802E4
	for <like.xu@linux.intel.com>; Thu, 29 Nov 2018 07:38:19 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 07:38:19 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3Azz7KIB/KuDFX4f9uRHKM819IXTAuvvDOBiVQ1KB2?=
 =?us-ascii?q?2+wcTK2v8tzYMVDF4r011RmVBdWds6oMotGVmpioYXYH75eFvSJKW713fDhBt/?=
 =?us-ascii?q?8rmRc9CtWOE0zxIa2iRSU7GMNfSA0tpCnjYgBaF8nkelLdvGC54yIMFRXjLwp1?=
 =?us-ascii?q?Ifn+FpLPg8it2O2+557ebx9UiDahfLh/MAi4oQLNu8cMnIBsMLwxyhzHontJf+?=
 =?us-ascii?q?RZ22ZlLk+Nkhj/+8m94odt/zxftPw9+cFAV776f7kjQrxDEDsmKWE169b1uhTF?=
 =?us-ascii?q?UACC+2ETUmQSkhpPHgjF8BT3VYr/vyfmquZw3jSRMNboRr4oRzut86ZrSAfpiC?=
 =?us-ascii?q?gZMT457HrXgdF0gK5CvR6tuwBzz4vSbYqINvRxY7ndcMsES2pPXshRUC9PDI2y?=
 =?us-ascii?q?YIQADeUOIelWoZTlp1YMrxWzChSgCe3zxjBWnX/7xrE60/07HA3awAAtEdADvX?=
 =?us-ascii?q?LJp9v1LqcSVuW1wbHWwzXDaPNW3C3y6JPVeR4jvPGMQbJwetfWxEkzFwPFk0mQ?=
 =?us-ascii?q?qYz+MjOPyOsCrmib4PB8Ve61l2EnrARxryGpy8wxiYfJnpoYxk7Y+Sh62oo5OM?=
 =?us-ascii?q?C0RU1hbdK6HpZdtzuWO5Z0T886XW1kpCI3xqcbtZO1YiQG0okryh3RZvCdbYSF?=
 =?us-ascii?q?4RTuX/uLLzhinnJqYre/ig6y8Ue+zu38UdG50FJLripejtnMrWoB1xPV6siaUP?=
 =?us-ascii?q?d9+V2h2TmX2wDS7OFLP1w0mLLFJ5I9wbM8jIcfvVnAEyPshkn7gq+bel859uWq?=
 =?us-ascii?q?8+jnZ6/ppp6YN496kAH+NaEul9SmAesmNwgOQnGX9vmi273940L5RKxGgeYxkq?=
 =?us-ascii?q?nEtpDVOdoUprW+Dw9R04Yj6AiwAy2p0dQFhXQHKFNFeBSaj4nmIV3OIfb4Deuh?=
 =?us-ascii?q?jFSoijtk2/fGPrj6D5XLKXjDlrjhfbBg60JGzwoz199f64pOCr4dOPLzRlPxtN?=
 =?us-ascii?q?vAAx89Mgy0wPjoBM9y14MDQm+PBq6ZMKXPsV6H/O4vIu+MZJMLtzb5MfQq+/nu?=
 =?us-ascii?q?jXpq0WIbZrSjiJsLdGijTLMhJ0SCfWGqhNAHHmEX+A0kQ6vvgVyGVDdVIHGqQ6?=
 =?us-ascii?q?M74Cp8EY+jEMLPS56ghO+82jymFMhTb2FCFlfeCHrtasCIVukBbGeIL9Z8nycY?=
 =?us-ascii?q?fb6mTYAnyFeprgCt0KdtLOff5ngFs4n+3sN+/ezZmEIO8mlYBtqc3ymtTmV4k2?=
 =?us-ascii?q?UCXTYw0OgrrUVjy1ury6V0g/VEU9dU4qUNGh43MIOZw+FkBtTaXAXHcdGUDlG8?=
 =?us-ascii?q?TYaIGzY0G+4xxNoHeA5dBsmixkTf3ze2A5cPmrCLDYBy+aXZiSuib/1hwmrLgf?=
 =?us-ascii?q?Fyx2ItRdFCYCj/3vZy?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ACAAD5BgBchxHrdtBkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGBMIJPE4N5iBhfiymBYC2XRBSBXxQYFIRAgzQiNAk?=
 =?us-ascii?q?NAQMBAQEBAQECARMBAQEKCwkIGw4vgjYFAgMaAQaCXAECAwECIAQfCikDAwECB?=
 =?us-ascii?q?gEBChAIAgIiBAICAwFTBgEMBgIBAQGDHIICAQSmM3wziiqBC4sLF4FAP4ERJ4J?=
 =?us-ascii?q?rhD0sGIMEglcCiQchhX6QfQmRLAYYiViHRIh4j1aBRoINMxoIGxWDJ4InFxKOD?=
 =?us-ascii?q?EAxgQccilEqLIF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0ACAAD5BgBchxHrdtBkGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGBMIJPE4N5iBhfiymBYC2XRBSBXxQYFIRAgzQiNAkNAQMBAQEBAQECA?=
 =?us-ascii?q?RMBAQEKCwkIGw4vgjYFAgMaAQaCXAECAwECIAQfCikDAwECBgEBChAIAgIiBAI?=
 =?us-ascii?q?CAwFTBgEMBgIBAQGDHIICAQSmM3wziiqBC4sLF4FAP4ERJ4JrhD0sGIMEglcCi?=
 =?us-ascii?q?QchhX6QfQmRLAYYiViHRIh4j1aBRoINMxoIGxWDJ4InFxKODEAxgQccilEqLIF?=
 =?us-ascii?q?3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,295,1539673200"; 
   d="scan'208";a="64572653"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mga01b.intel.com with ESMTP/TLS/AES256-SHA; 29 Nov 2018 07:38:18 -0800
Received: from localhost ([::1]:54877 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gSOOP-0000kV-Uz
	for like.xu@linux.intel.com; Thu, 29 Nov 2018 10:38:17 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:46365)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <thuth@redhat.com>) id 1gSOJI-0006Bg-CT
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 10:33:03 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <thuth@redhat.com>) id 1gSOJ6-0005pu-E2
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 10:32:54 -0500
Received: from mx1.redhat.com ([209.132.183.28]:36898)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <thuth@redhat.com>)
	id 1gSOJ6-0005nj-0W; Thu, 29 Nov 2018 10:32:48 -0500
Received: from smtp.corp.redhat.com (int-mx05.intmail.prod.int.phx2.redhat.com
	[10.5.11.15])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 2D7187F771;
	Thu, 29 Nov 2018 15:32:47 +0000 (UTC)
Received: from thuth.remote.csb (ovpn-116-149.ams2.redhat.com [10.36.116.149])
	by smtp.corp.redhat.com (Postfix) with ESMTP id B03CE5D790;
	Thu, 29 Nov 2018 15:32:24 +0000 (UTC)
To: David Hildenbrand <david@redhat.com>, qemu-devel@nongnu.org
References: <20181128095939.5684-1-david@redhat.com>
From: Thomas Huth <thuth@redhat.com>
Openpgp: preference=signencrypt
Autocrypt: addr=thuth@redhat.com; keydata=
	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
Organization: Red Hat
Message-ID: <e036b52f-abe7-4b13-1c5f-d084a8b7a491@redhat.com>
Date: Thu, 29 Nov 2018 16:32:23 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101
	Thunderbird/52.9.1
MIME-Version: 1.0
In-Reply-To: <20181128095939.5684-1-david@redhat.com>
Content-Type: text/plain; charset=utf-8
Content-Language: en-US
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.15
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.27]);
	Thu, 29 Nov 2018 15:32:47 +0000 (UTC)
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH v2] s390x/tod: Properly stop the KVM TOD
 while the guest is not running
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Christian Borntraeger <borntraeger@de.ibm.com>, qemu-s390x@nongnu.org,
	Cornelia Huck <cohuck@redhat.com>, Janosch Frank <frankja@linux.ibm.com>,
	Richard Henderson <rth@twiddle.net>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On 2018-11-28 10:59, David Hildenbrand wrote:
> Just like on other architectures, we should stop the clock while the gu=
est
> is not running. This is already properly done for TCG. Right now, doing=
 an
> offline migration (stop, migrate, cont) can easily trigger stalls in th=
e
> guest.
>=20
> Even doing a
>     (hmp) stop
>     ... wait 2 minutes ...
>     (hmp) cont
> will already trigger stalls.
>=20
> So whenever the guest stops, backup the KVM TOD. When continuing to run
> the guest, restore the KVM TOD.
>=20
> One special case is starting a simple VM: Reading the TOD from KVM to
> stop it right away until the guest is actually started means that the
> time of any simple VM will already differ to the host time. We can
> simply leave the TOD running and the guest won't be able to recognize
> it.
>=20
> For migration, we actually want to keep the TOD stopped until really
> starting the guest. To be able to catch most errors, we should however
> try to set the TOD in addition to simply storing it. So we can still
> catch basic migration problems.
>=20
> If anything goes wrong while backing up/restoring the TOD, we have to
> ignore it (but print a warning). This is then basically a fallback to
> old behavior (TOD remains running).
>=20
> I tested this very basically with an initrd:
>     1. Start a simple VM. Observed that the TOD is kept running. Old
>        behavior.
>     2. Ordinary live migration. Observed that the TOD is temporarily
>        stopped on the destination when setting the new value and
>        correctly started when finally starting the guest.
>     3. Offline live migration. (stop, migrate, cont). Observed that the
>        TOD will be stopped on the source with the "stop" command. On th=
e
>        destination, the TOD is temporarily stopped when setting the new
>        value and correctly started when finally starting the guest via
>        "cont".
>     4. Simple stop/cont correctly stops/starts the TOD. (multiple stops
>        or conts in a row have no effect, so works as expected)
>=20
> In the future, we might want to send the guest a special kind of time s=
ync
> interrupt under some conditions, so it can synchronize its tod to the
> host tod. This is interesting for migration scenarios but also when we
> get time sync interrupts ourselves. This however will most probably hav=
e
> to be handled in KVM (e.g. when the tods differ too much) and is not
> desired e.g. when debugging the guest. (single stepping should not
> result in permanent time syncs). I consider something like that an add-=
on
> on top of this basic "don't break the guest" handling.
>=20
> Signed-off-by: David Hildenbrand <david@redhat.com>
> ---
>=20
> v1 -> v2:
> - Add time sync idea suggested by Christian to description
> - Drop one unnecessary "return"
> - Register in realize() and not in instance_init()
>=20
>=20
>  hw/s390x/tod-kvm.c     | 91 +++++++++++++++++++++++++++++++++++++++++-
>  hw/s390x/tod.c         |  5 +++
>  include/hw/s390x/tod.h |  8 +++-
>  3 files changed, 101 insertions(+), 3 deletions(-)
>=20
> diff --git a/hw/s390x/tod-kvm.c b/hw/s390x/tod-kvm.c
> index df564ab89c..87717d0be1 100644
> --- a/hw/s390x/tod-kvm.c
> +++ b/hw/s390x/tod-kvm.c
> @@ -10,10 +10,11 @@
> =20
>  #include "qemu/osdep.h"
>  #include "qapi/error.h"
> +#include "sysemu/sysemu.h"
>  #include "hw/s390x/tod.h"
>  #include "kvm_s390x.h"
> =20
> -static void kvm_s390_tod_get(const S390TODState *td, S390TOD *tod, Err=
or **errp)
> +static void kvm_s390_get_tod_raw(S390TOD *tod, Error **errp)
>  {
>      int r;
> =20
> @@ -27,7 +28,17 @@ static void kvm_s390_tod_get(const S390TODState *td,=
 S390TOD *tod, Error **errp)
>      }
>  }
> =20
> -static void kvm_s390_tod_set(S390TODState *td, const S390TOD *tod, Err=
or **errp)
> +static void kvm_s390_tod_get(const S390TODState *td, S390TOD *tod, Err=
or **errp)
> +{
> +    if (td->stopped) {
> +        *tod =3D td->base;
> +        return;
> +    }
> +
> +    kvm_s390_get_tod_raw(tod, errp);
> +}
> +
> +static void kvm_s390_set_tod_raw(const S390TOD *tod, Error **errp)
>  {
>      int r;
> =20
> @@ -41,18 +52,94 @@ static void kvm_s390_tod_set(S390TODState *td, cons=
t S390TOD *tod, Error **errp)
>      }
>  }
> =20
> +static void kvm_s390_tod_set(S390TODState *td, const S390TOD *tod, Err=
or **errp)
> +{
> +    Error *local_err =3D NULL;
> +
> +    /*
> +     * Somebody (e.g. migration) set the TOD. We'll store it into KVM =
to
> +     * properly detect errors now but take a look at the runstate to d=
ecide
> +     * whether really to keep the tod running. E.g. during migration, =
this
> +     * is the point where we want to stop the initially running TOD to=
 fire
> +     * it back up when actually starting the migrated guest.
> +     */
> +    kvm_s390_set_tod_raw(tod, &local_err);
> +    if (local_err) {
> +        error_propagate(errp, local_err);
> +        return;
> +    }
> +
> +    if (runstate_is_running()) {
> +        td->stopped =3D false;
> +    } else {
> +        td->stopped =3D true;
> +        td->base =3D *tod;
> +    }
> +}
> +
> +static void kvm_s390_tod_vm_state_change(void *opaque, int running,
> +                                         RunState state)
> +{
> +    S390TODState *td =3D opaque;
> +    Error *local_err =3D NULL;
> +
> +    if (running && td->stopped) {
> +        /* Set the old TOD when running the VM - start the TOD clock. =
*/
> +        kvm_s390_set_tod_raw(&td->base, &local_err);
> +        if (local_err) {
> +            warn_report_err(local_err);
> +        }
> +        /* Treat errors like the TOD was running all the time. */
> +        td->stopped =3D false;
> +    } else if (!running && !td->stopped) {
> +        /* Store the TOD when stopping the VM - stop the TOD clock. */
> +        kvm_s390_get_tod_raw(&td->base, &local_err);
> +        if (local_err) {
> +            /* Keep the TOD running in case we could not back it up. *=
/
> +            warn_report_err(local_err);
> +        } else {
> +            td->stopped =3D true;
> +        }
> +    }
> +}
> +
> +static void kvm_s390_tod_realize(S390TODState *td, Error **errp)
> +{
> +    /*
> +     * We need to know when the VM gets started/stopped to start/stop =
the TOD.
> +     * As we can never have more than one TOD instance (and that will =
never be
> +     * removed), registering here and never unregistering is good enou=
gh.
> +     */
> +    qemu_add_vm_change_state_handler(kvm_s390_tod_vm_state_change, td)=
;
> +}
> +
>  static void kvm_s390_tod_class_init(ObjectClass *oc, void *data)
>  {
>      S390TODClass *tdc =3D S390_TOD_CLASS(oc);
> =20
> +    tdc->realize =3D kvm_s390_tod_realize;
>      tdc->get =3D kvm_s390_tod_get;
>      tdc->set =3D kvm_s390_tod_set;
>  }
> =20
> +static void kvm_s390_tod_init(Object *obj)
> +{
> +    S390TODState *td =3D S390_TOD(obj);
> +
> +    /*
> +     * The TOD is initially running (value stored in KVM). Avoid needl=
ess
> +     * loading/storing of the TOD when starting a simple VM, so let it
> +     * run although the (never started) VM is stopped. For migration, =
we
> +     * will properly set the TOD later.
> +     */
> +    td->stopped =3D false;
> +}
> +
>  static TypeInfo kvm_s390_tod_info =3D {
>      .name =3D TYPE_KVM_S390_TOD,
>      .parent =3D TYPE_S390_TOD,
>      .instance_size =3D sizeof(S390TODState),
> +    .instance_init =3D kvm_s390_tod_init,
>      .class_init =3D kvm_s390_tod_class_init,
>      .class_size =3D sizeof(S390TODClass),
>  };
> diff --git a/hw/s390x/tod.c b/hw/s390x/tod.c
> index 1c63f411e6..82ea6554ba 100644
> --- a/hw/s390x/tod.c
> +++ b/hw/s390x/tod.c
> @@ -97,9 +97,14 @@ static SaveVMHandlers savevm_tod =3D {
>  static void s390_tod_realize(DeviceState *dev, Error **errp)
>  {
>      S390TODState *td =3D S390_TOD(dev);
> +    S390TODClass *tdc =3D S390_TOD_GET_CLASS(td);
> =20
>      /* Legacy migration interface */
>      register_savevm_live(NULL, "todclock", 0, 1, &savevm_tod, td);
> +
> +    if (tdc->realize) {
> +        tdc->realize(td, errp);
> +    }
>  }

I think the more usual way to deal with this, is to use
device_class_set_parent_realize() in the child's class init function,
and then to call ->parent_realize() from the child's realize function.

I guess it doesn't really matter in the end which way we do it here, but
it would be nice to be consistent with the other devices, so I'd prefer
to use device_class_set_parent_realize() for this here, too.

Apart from that, the patch looks fine to me.

 Thomas

