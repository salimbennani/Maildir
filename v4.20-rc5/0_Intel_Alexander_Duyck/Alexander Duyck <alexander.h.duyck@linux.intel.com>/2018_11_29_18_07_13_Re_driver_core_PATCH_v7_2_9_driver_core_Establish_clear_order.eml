Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 08:49:36 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id CA75E580213;
	Thu, 29 Nov 2018 10:11:19 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by fmsmga005-1.fm.intel.com with ESMTP; 29 Nov 2018 10:11:18 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AYLg2wh1MwuhNsmEFsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segTLvTxwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJCUMhMVyJPHI2y?=
 =?us-ascii?q?YIkBD+UdOuhXoIbzp0AWrRa8HgSsGOHixyVUinLswaE30eIsGhzG0gw6GNIOtW?=
 =?us-ascii?q?zZocnxNKgMXuG61q/IwijdYPNMxDzz5pXIcxA9rvGPQLl9dtDeyU0xGALKlFqQ?=
 =?us-ascii?q?r5HqMC2P1ugXs2iX9fdvVf+vimE7qAF8uTyvxsYqionUiYMZ0FHE9SNlwIkrId?=
 =?us-ascii?q?20UlJ0YdmhEJZJsSyRKoV4QsQnQ25yuSY6zKULuZq4fCgPzJQr3Rnfa+aIc4WO?=
 =?us-ascii?q?/xntV/6RLC9miH55fL+znQu+/Ea+xuHmS8W500pGojBEn9TOrnwByhLe58edRv?=
 =?us-ascii?q?dg8Eqs1iyD2x3d5+xFO0w4iLbXJ4Inz7UtjJQcq17DETXzmEjujK+ZaEEk+u+w?=
 =?us-ascii?q?5uT5bbXpuIWcO5V3ig7gKKQunNKwAeAiPggJRWib9vyw1Lzl/ULnXLVHluM6nr?=
 =?us-ascii?q?XdvZzAOMgWqLC1DxVI3osg9xqzFTar3dYAkXkCNl1FeRaHj4bzO1HJJfD1FfO/?=
 =?us-ascii?q?g1WqkDd2yPHKJ77hDYvXLnjFjrjhea9x60lSyQo1099f/YlZCq8OIP3tQE/9rt?=
 =?us-ascii?q?/YAQEjMwyy3ennDM9x1oQEWWKAGqOZKr/dsUeU5uIzJOmBfIsVuDf+K/c7/fLv?=
 =?us-ascii?q?gmI5lEQZfamo25sXdX+5Eu5nI0WffXrjnNMBHX0WsQo5SezgkEeCXiJLZ3auQ6?=
 =?us-ascii?q?I84Sk2CIK8AofCWoCimruB0D27Hp1LfG9GDF+MHGzsd4WFXfcMdS2TLtVgkjwC?=
 =?us-ascii?q?SbiuVYsh2Quyuw/9zrptNvDU9TEAtZL/yNh14PXelRM19TNqFcid0GaNT2dynm?=
 =?us-ascii?q?MPXDI22KF/oUpgylaMy6R4gvpYFcBN6PNNSAs1KZncz+liAdDoRg3BZsuJSEqh?=
 =?us-ascii?q?Qti+Gz4xVdIxw9gNY0pnAdWtlBLD0jGuA78UkbyLGZM1/rjd33j3O8Zy1XLG2L?=
 =?us-ascii?q?M9gFkhR8tFLXemibJn9wjPG47JlF2Ul6WweqQaxiLN8GaDwnCIvEFXSwNwVaTF?=
 =?us-ascii?q?XXYCZkrZt9j550XCT6OwBrQjKAdO1cmCKq5SYN3zkVpGXOvjOMjZY2+phmi/Hw?=
 =?us-ascii?q?iIya2WYIrqYWod2j7dB1YCkwwU+XaGNg0+BiO6rmLaDTxuE0/vYkz2/el/rnO7?=
 =?us-ascii?q?UlE7zwWQY0J90Lq1/wYfheaARPMLwrIEpCAhpi1pE1mnwdLZFcCMpwp7c6Vaet?=
 =?us-ascii?q?My/lFH2Hndtwx8OJygMq9jikQfcwRxo0PhyRF3Bp9cnsgtqXMg1BByJr6A0FNd?=
 =?us-ascii?q?azOY2oj9OqHWKmn3+xCvd67W21HE3NaK4KsP7+44q1HivAGvGUov6HFn09hT03?=
 =?us-ascii?q?uB6ZTGFgsSUZTtUkkp8xh2va3VYi4454nMz31jLbG0siPe29IuHOYq0BKgcMlQ?=
 =?us-ascii?q?MayaFA7+CdYVB9WzJ+MwnVipbRUEPP5J+a4wPsOmceaG2aGxMOZhmjKmkXpI4I?=
 =?us-ascii?q?Rn3k2Q8Cp8T/bC34wZzPGAwguHSzD8gU+hs8Dqg4xLeSseH2u/ySf+Ao5RabZ/?=
 =?us-ascii?q?fYIKCWeoPs22yc9yh5/rW35E6lGjA0kK19OueRqXd1b9xxFf1VwLoXy7niu11y?=
 =?us-ascii?q?Z0kzA1oaWFxizB3uPieAABOmFVXmlijE7gLpSugNAeQUencRIplByj5Uvhw6hb?=
 =?us-ascii?q?paJ/L3TcQEtSfij2KX1iXbW0traYf8FP75Youz1NUOugeVCaVqL9oxwC3iLjHm?=
 =?us-ascii?q?tS3jA6eyuxupXkmRx3k2adLHd1rHrEdsB83xbf5NrARfFP2joKXjV3iT7SBlKk?=
 =?us-ascii?q?Jdmm4c2Ul4vfsuC5T2+hVIdccTPozYODsyu3/3ZqDge8n/Cwm93nFxY10Sng2t?=
 =?us-ascii?q?luVCXIqgv8Y4bx26S7N+JnYldnBFvm58VmHYF+l5M6hIsM1ngCmpWV4X0HnH/z?=
 =?us-ascii?q?MNpB3qLydngNRT8Nw9PO5Ajl2UtjLm+Gxo7jV3WdxNdhaMe+Ym8Mxi096MVKAr?=
 =?us-ascii?q?+O7LNYhSt1vka4rQXJbPh+hDgdyOEi6H4Hg+4TvgotwT6QArQTHUleICztmA6E?=
 =?us-ascii?q?79G4rKVLemmvdaK821Z5ndCkFLuCuB1TWG7lepc+Gi999sB/MFPP0HLp8I3lds?=
 =?us-ascii?q?ffbckPthKKiRfPlPZaKIg+lvcRgSpnOGT9vWAqyuIhjBxu2426s5aDK2l34K25?=
 =?us-ascii?q?BRtYPCXvZ8wP4jHtkbpensGO0oCzGZVhHy8HXZryQvKuDTISru/nNweVHT04q3?=
 =?us-ascii?q?ebH6ffHACF5EdnqXLPD46kN3WNKHYFytViQQGXJFZDjwAMQDU6gpk5Gxixy8P7?=
 =?us-ascii?q?d0d54i0R6kT8qhtR0e9oMxj/UmHCpAancDs0SZ6fLAZI4QFG/UvaLcue7udrFS?=
 =?us-ascii?q?FC4pKhtBCNKnCcZwlQD2EGQEmECE74PrW0+dnM6euYBve9L/vTZ7WBs/deWuyM?=
 =?us-ascii?q?xZKu1Itm4jmNOt+OPnlkE/00xE5DUWplFMTenjUFUzYXmD7Vb86HuBe8/TV6r8?=
 =?us-ascii?q?C48PT2QQLv+JGAC71IPdV0/BC2h6iDOvWUhCZ4LzZYy5wNyWXJyLgZwF4dlSVu?=
 =?us-ascii?q?eyOxHrQHsC7HVLjQlbNPDx4HdyNzM9NF76Ii0QlMOs7bidL12qR7jv4vDFdFWk?=
 =?us-ascii?q?Lumtu0ZcwROGy9MFLHBECWNLWJPzHLwsf3Yb+iRr1UlulbqxqwuTODGU/5IjuD?=
 =?us-ascii?q?jyXpVwyoMexUli6bIQdRuJujfRdtE2TjSNPmZwa/MN92iz023LI1imnLNW4aLT?=
 =?us-ascii?q?hzbUdNoqeM4iNfh/V1A3ZB4WZ9LemYhyaZ6PHVKooXsftuGCh7i/hW72g6y7RL?=
 =?us-ascii?q?6iFJX/h1mCrUrt5zrFCqiOiPyjx7UBVQrjZHnp6EvUJnOa/B7JlPRW7E/A4R7W?=
 =?us-ascii?q?WXExkLp8FqCtvqu6BRzNjAjKPyKDdY/NLS8ssRHMzUKMOBMHo8PhvlAj/UDA0Z?=
 =?us-ascii?q?TTG1MWHTnVBSkPaX9i7dkp9vhpHq0KUPTrtaXVkuXqcWA0IjHpodIZNzXzohip?=
 =?us-ascii?q?aaitIF4Ty1qxyHF+tAuZWSf/afEfzpJDuDxZVZdhALiefxKYkDP4v31lYkah92?=
 =?us-ascii?q?gZXBGGLUXNZQsmtgaBM5pANG930oHT574F7sdg74uCxbLvWzhBNjz1ImOek=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAADIKgBch0O0hNFkGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBgVqBD4ECJ4N5iBiMCCmBZBSXMIFzFBgHDAG?=
 =?us-ascii?q?EQIM0IjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2JAGCYQEBAQECAQECIARSB?=
 =?us-ascii?q?QEJAQEKEgYCAh8HAgIDRg4GEwWCUUsBgXkIBQqnJ3wzhC0BhXsFgQuLC3qBHIQ?=
 =?us-ascii?q?jgwUZAYIOgliCVwKLGYRRNJAFBwKCIYRdgy2HBxiBWo9ChESFN4NdinaBRoINM?=
 =?us-ascii?q?xojgzwfgggXEohMhT4iHgEBMQEBgQMBAYptBIJJAQE?=
X-IPAS-Result: =?us-ascii?q?A0ABAADIKgBch0O0hNFkGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBgVqBD4ECJ4N5iBiMCCmBZBSXMIFzFBgHDAGEQIM0IjQJDQEDA?=
 =?us-ascii?q?QEBAQEBAgETAQEBCA0JCCkjDII2JAGCYQEBAQECAQECIARSBQEJAQEKEgYCAh8?=
 =?us-ascii?q?HAgIDRg4GEwWCUUsBgXkIBQqnJ3wzhC0BhXsFgQuLC3qBHIQjgwUZAYIOgliCV?=
 =?us-ascii?q?wKLGYRRNJAFBwKCIYRdgy2HBxiBWo9ChESFN4NdinaBRoINMxojgzwfgggXEoh?=
 =?us-ascii?q?MhT4iHgEBMQEBgQMBAYptBIJJAQE?=
X-IronPort-AV: E=Sophos;i="5.56,295,1539673200"; 
   d="scan'208";a="55418562"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 10:10:17 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727125AbeK3FN2 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 30 Nov 2018 00:13:28 -0500
Received: from mga07.intel.com ([134.134.136.100]:11722 "EHLO mga07.intel.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726385AbeK3FN1 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 30 Nov 2018 00:13:27 -0500
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from orsmga008.jf.intel.com ([10.7.209.65])
  by orsmga105.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 10:07:14 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,295,1539673200"; 
   d="scan'208";a="96856242"
Received: from ahduyck-desk1.jf.intel.com ([10.7.198.76])
  by orsmga008.jf.intel.com with ESMTP; 29 Nov 2018 10:07:13 -0800
Message-ID: <a5b33ae899fc4131abf0f26af33a6c6b7f462431.camel@linux.intel.com>
Subject: Re: [driver-core PATCH v7 2/9] driver core: Establish clear order
 of operations for deferred probe and remove
From: Alexander Duyck <alexander.h.duyck@linux.intel.com>
To: Dan Williams <dan.j.williams@intel.com>
Cc: Linux Kernel Mailing List <linux-kernel@vger.kernel.org>,
        Greg KH <gregkh@linuxfoundation.org>,
        "Luis R. Rodriguez" <mcgrof@kernel.org>,
        linux-nvdimm <linux-nvdimm@lists.01.org>,
        Tejun Heo <tj@kernel.org>,
        Andrew Morton <akpm@linux-foundation.org>,
        Linux-pm mailing list <linux-pm@vger.kernel.org>,
        jiangshanlai@gmail.com, "Rafael J. Wysocki" <rafael@kernel.org>,
        "Brown, Len" <len.brown@intel.com>, Pavel Machek <pavel@ucw.cz>,
        zwisler@kernel.org, Dave Jiang <dave.jiang@intel.com>,
        bvanassche@acm.org
Date: Thu, 29 Nov 2018 10:07:13 -0800
In-Reply-To: <CAPcyv4gMswOJ3VTaY6P7f=iG_jNBKZyynn22CLrEBB13Fq-8vQ@mail.gmail.com>
References: <154345118835.18040.17186161872550839244.stgit@ahduyck-desk1.amr.corp.intel.com>
         <154345153672.18040.3771035148218843351.stgit@ahduyck-desk1.amr.corp.intel.com>
         <CAPcyv4gMswOJ3VTaY6P7f=iG_jNBKZyynn22CLrEBB13Fq-8vQ@mail.gmail.com>
Content-Type: text/plain; charset="UTF-8"
X-Mailer: Evolution 3.28.5 (3.28.5-1.fc28) 
Mime-Version: 1.0
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Wed, 2018-11-28 at 17:57 -0800, Dan Williams wrote:
> On Wed, Nov 28, 2018 at 4:32 PM Alexander Duyck
> <alexander.h.duyck@linux.intel.com> wrote:
> > 
> > Add an additional bit flag to the device struct named async_probe. This
> > additional flag allows us to guarantee ordering between probe and remove
> > operations.
> > 
> > This allows us to guarantee that if we execute a remove operation on a
> 
> You missed the review comment on the usage of "us". I've long been an
> abuser of this as well saying "we" and "us" to casually refer to
> whatever part of the kernel I'm currently modifying. The problem is
> that it is ambiguous and assumes the reader happens translates the
> "us" / "we" to the same specific subject you had in mind. It leaves
> room for confusion that can be eliminated by explicitly referencing
> the expected agent, subject, object in mind.
> 
> I long blew off suggestions to correct usages like this, but it
> finally sunk in for me after reading Thomas' rewrite of a "we" and
> "this" laden changelog, and why he and other tip-maintainers want to
> push back on the usage in the tip tree, see the "Changelog" section of
> the guidance in "[patch 2/2] Documentation/process: Add tip tree
> handbook": https://lkml.org/lkml/2018/11/7/932.
> 
> Patch review is quicker without the speed bumps of translating
> occurrences of the "we" and "us"

It wasn't my intention to blow it off. I have gone through and updated
it in my repo and I can see how it can be confusing as in one spot  I
wasn't sure if the "we"/"us" was the probe or the remove routine.

> > given interface it will not attempt to update the driver member
> > asynchronously following the earlier operation. Previously this guarantee
> > was not present and could result in us attempting to remove a driver from
> > an interface only to have it attempt to attach the driver later when we
> > finally complete the deferred asynchronous probe call.
> > 
> > Reviewed-by: Bart Van Assche <bvanassche@acm.org>
> > Signed-off-by: Alexander Duyck <alexander.h.duyck@linux.intel.com>
> > ---
> >  drivers/base/dd.c      |   16 ++++++++++++++++
> >  include/linux/device.h |    3 +++
> >  2 files changed, 19 insertions(+)
> > 
> > diff --git a/drivers/base/dd.c b/drivers/base/dd.c
> > index 88713f182086..ef3f70a7cb5a 100644
> > --- a/drivers/base/dd.c
> > +++ b/drivers/base/dd.c
> > @@ -774,6 +774,10 @@ static void __device_attach_async_helper(void *_dev, async_cookie_t cookie)
> > 
> >         device_lock(dev);
> > 
> > +       /* nothing to do if async_probe has been cleared */
> > +       if (!dev->async_probe)
> > +               goto out_unlock;
> > +
> >         if (dev->parent)
> >                 pm_runtime_get_sync(dev->parent);
> > 
> > @@ -785,6 +789,9 @@ static void __device_attach_async_helper(void *_dev, async_cookie_t cookie)
> >         if (dev->parent)
> >                 pm_runtime_put(dev->parent);
> > 
> > +       /* We made our attempt at an async_probe, clear the flag */
> > +       dev->async_probe = false;
> > +out_unlock:
> >         device_unlock(dev);
> > 
> >         put_device(dev);
> > @@ -829,6 +836,7 @@ static int __device_attach(struct device *dev, bool allow_async)
> >                          */
> >                         dev_dbg(dev, "scheduling asynchronous probe\n");
> >                         get_device(dev);
> > +                       dev->async_probe = true;
> >                         async_schedule(__device_attach_async_helper, dev);
> >                 } else {
> >                         pm_request_idle(dev);
> > @@ -929,6 +937,14 @@ static void __device_release_driver(struct device *dev, struct device *parent)
> >  {
> >         struct device_driver *drv;
> > 
> > +       /*
> > +        * In the event that we are asked to release the driver on an
> > +        * interface that is still waiting on a probe we can just terminate
> > +        * the probe by setting async_probe to false. When the async call
> > +        * is finally completed it will see this state and just exit.
> > +        */
> > +       dev->async_probe = false;
> > +
> >         drv = dev->driver;
> >         if (drv) {
> >                 while (device_links_busy(dev)) {
> > diff --git a/include/linux/device.h b/include/linux/device.h
> > index 1b25c7a43f4c..4d2eb2c74149 100644
> > --- a/include/linux/device.h
> > +++ b/include/linux/device.h
> > @@ -957,6 +957,8 @@ struct dev_links_info {
> >   *              device.
> >   * @dma_coherent: this particular device is dma coherent, even if the
> >   *             architecture supports non-coherent devices.
> > + * @async_probe: This device has an asynchronous probe event pending. Should
> > + *              only be updated while holding device lock.
> >   *
> >   * At the lowest level, every device in a Linux system is represented by an
> >   * instance of struct device. The device structure contains the information
> > @@ -1051,6 +1053,7 @@ struct device {
> >      defined(CONFIG_ARCH_HAS_SYNC_DMA_FOR_CPU_ALL)
> >         bool                    dma_coherent:1;
> >  #endif
> > +       bool                    async_probe:1;
> 
> I think this flag is misnamed, the wrong polarity and should be set in
> the device removal path, not the driver detach path. The wider problem
> is the removal of a device while actions initiated by its arrival may
> still be in flight, or have yet to start. It's not just the probe path
> in the driver-core that might be interested in this state, but also
> bus implementations that kick off their own async operations.

Okay, so increase the scope so that the information is usable outside
of driver core.

> I think the flag should be named "cancel" and set it in the
> device_del() path. Otherwise this is encoding code flow state in the
> struct rather than device-state that the code needs to comprehend.

Instead of "cancel" what would you think of "dead"? In my mind once we
call device_del we are essentially working with a dead device object so
that might make more sense in terms of a state rather than "cancel"
which doesn't really tell us what should be canceled.

Looking over the code I could probably set it before we start calling
the notifiers for BUS_NOTIFY_DEL_DEVICE. The only thing I am not sure
about is if we would need to add any sort of synchronization primitives
around it.

