Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:27:02 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from mta-temp.ostc.intel.com (mta-temp.ostc.intel.com [10.54.63.100])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 4B7665808C7
	for <like.xu@linux.intel.com>; Sat,  1 Dec 2018 18:20:54 -0800 (PST)
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by mta-temp.ostc.intel.com (Postfix) with ESMTPS id 0F2C161CBB
	for <like.xu@linux.intel.com>; Sat,  1 Dec 2018 02:59:51 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by fmsmga005-1.fm.intel.com with ESMTP; 01 Dec 2018 02:58:50 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AsHwnoBRUytiDX9uCp+sK0aB+5Npsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa67ZB2Ft8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94VQndPXttKVyxZHIyz?=
 =?us-ascii?q?c5cPAeQGPeZdtYb9pl0Opga6CQSjAO7jzzlFjWL006InyeQsCQ/I0gw+EdwNvn?=
 =?us-ascii?q?Tbo8n6O7oQXu+7w6fG0C3DYvFU1zry9YTFfAwtru+XXb9rbcrR0FMiGx/ZgliK?=
 =?us-ascii?q?q4HoOS6e2OQXs2ic6uptTeyjhXImqw5tojig3N0shZTUjY0V0FzK8j91y5sxK9?=
 =?us-ascii?q?2/Tk50f8WkHJVNvCydLYt2QMQiQ2d2tyYh0bAGo4C0czUKyJs92x7TceCIc4+N?=
 =?us-ascii?q?4h/6UuuaPDl2hHVgeL2lhhay91CtyvfiWcap0FZFtDZFnsPQuXAK0hzf8saGSv?=
 =?us-ascii?q?xn/ki8wTaPzR7c6vpfIUwuiaXbLJshz7gtnZQQqUTOBjH6lFn1gaOMa0ko5+ul?=
 =?us-ascii?q?5/75brjoppKQLZJ4hwPmPqgwhsCyBf40PhUAUmSF4+iwyb7u8EPjTLlUjfA7lL?=
 =?us-ascii?q?TSvorAKsQBvKG5BhdY0oY95Ba7CDeryNAYnXgcLFJZYxKLlYfpO1fTIPziCve/?=
 =?us-ascii?q?mVusnC9qx/DAILLhHo3AImbfnLriZ7px9lNQxQkpwdxB6Z9ZCqsNLO/xV0Ppsd?=
 =?us-ascii?q?zXFB45Mwi6w+b9D9V905sTWXuRDa+cLaPeqEKH6fwxI+aSYI8ZoS3yK/845/7o?=
 =?us-ascii?q?kXA2h0Qdca6t3ZsWa3C3AO5qIkqEYXf0htcBEGEKvhcxTeDwiV2CVyJTaGi2X6?=
 =?us-ascii?q?4m+j47D4emAJzFRoCqhryB0yG7HoBMamBBEFCMHm/kd5+YVPcUdCKSPshhnyQA?=
 =?us-ascii?q?VbigSI8uywuitQDny7d8KurU+ysYtY/s1dRv5u3Tkw0y+iJwD8iHz26NSGR0zS?=
 =?us-ascii?q?s1QSQr1vV/vVBl0QXElqx5mOBDU9pU4fxPT0E9L5GbyuV7D9X7XEXGZsuIT1C9?=
 =?us-ascii?q?BcyrBCx0Qt8vzttdXkBmBt/3ixnC2zatUaYYkqHOCJEq/6aZxXXoOstm117A06?=
 =?us-ascii?q?8uiURgRdFAYna7jKxy/BSGGojSjk+CnLyrf6lP4CmY2X2CxiKkuEhbXUYkXK/B?=
 =?us-ascii?q?VHMSTlHbodTw+gXJSLr4Wpo9NQ4Ug/SDIatDcNGhshNjAr/BP9LTeCj5z32yAh?=
 =?us-ascii?q?CF3ZuWYYbqcnlb1yLYXhtX2zsP9GqLYFBtThyqpHjTWXkzTF8=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAACnaAJchxHrdtBjFgQBAQEBAQIBA?=
 =?us-ascii?q?QEBBwIBAQEBgVQCAQEBAQsBgTCBOYEWE4N5iHeLLIINmT4RGAsJhECDNiI3Bg0?=
 =?us-ascii?q?BAwEBAQEBAQIBEwEBAQoLCQgbDiMMgjYFAgMaB4JcAQIDAQIgBB8KKQMDAQIGA?=
 =?us-ascii?q?QEKDgoCAgUdBAICAwELBUkTBYMcAYIBAQQKpV98M4VAhGuBC4sREQaBQD+BEYM?=
 =?us-ascii?q?SghCCWxaDBIJXAokHHoYIgUyEZIphBwIChn6KMQsYgVtNhzM2hxONaIJaiCmBX?=
 =?us-ascii?q?IF3cBU7gmwJgh4Xg0qKU0ExgQcciyGBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0ANAACnaAJchxHrdtBjFgQBAQEBAQIBAQEBBwIBAQEBgVQ?=
 =?us-ascii?q?CAQEBAQsBgTCBOYEWE4N5iHeLLIINmT4RGAsJhECDNiI3Bg0BAwEBAQEBAQIBE?=
 =?us-ascii?q?wEBAQoLCQgbDiMMgjYFAgMaB4JcAQIDAQIgBB8KKQMDAQIGAQEKDgoCAgUdBAI?=
 =?us-ascii?q?CAwELBUkTBYMcAYIBAQQKpV98M4VAhGuBC4sREQaBQD+BEYMSghCCWxaDBIJXA?=
 =?us-ascii?q?okHHoYIgUyEZIphBwIChn6KMQsYgVtNhzM2hxONaIJaiCmBXIF3cBU7gmwJgh4?=
 =?us-ascii?q?Xg0qKU0ExgQcciyGBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,302,1539673200"; 
   d="scan'208";a="42348256"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 01 Dec 2018 02:58:49 -0800
Received: from localhost ([::1]:40778 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gT2z3-0007eh-3o
	for like.xu@linux.intel.com; Sat, 01 Dec 2018 05:58:49 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:34278)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <rjones@redhat.com>) id 1gT2yr-0007bU-GX
	for qemu-devel@nongnu.org; Sat, 01 Dec 2018 05:58:39 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <rjones@redhat.com>) id 1gT2yp-0005EB-PX
	for qemu-devel@nongnu.org; Sat, 01 Dec 2018 05:58:37 -0500
Received: from mx1.redhat.com ([209.132.183.28]:48660)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <rjones@redhat.com>)
	id 1gT2yk-0005CI-JB; Sat, 01 Dec 2018 05:58:30 -0500
Received: from smtp.corp.redhat.com (int-mx08.intmail.prod.int.phx2.redhat.com
	[10.5.11.23])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id B1BD4C05D3F3;
	Sat,  1 Dec 2018 10:58:29 +0000 (UTC)
Received: from localhost (ovpn-116-21.ams2.redhat.com [10.36.116.21])
	by smtp.corp.redhat.com (Postfix) with ESMTP id 909BA19C7D;
	Sat,  1 Dec 2018 10:58:25 +0000 (UTC)
Date: Sat, 1 Dec 2018 10:58:24 +0000
From: "Richard W.M. Jones" <rjones@redhat.com>
To: Eric Blake <eblake@redhat.com>
Message-ID: <20181201105824.GK27120@redhat.com>
References: <20181130220344.3350618-1-eblake@redhat.com>
	<20181130220344.3350618-14-eblake@redhat.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
In-Reply-To: <20181130220344.3350618-14-eblake@redhat.com>
User-Agent: Mutt/1.5.21 (2010-09-15)
X-Scanned-By: MIMEDefang 2.84 on 10.5.11.23
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.32]);
	Sat, 01 Dec 2018 10:58:29 +0000 (UTC)
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH 13/14] qemu-nbd: Add --list option
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: nsoffer@redhat.com, vsementsov@virtuozzo.com, jsnow@redhat.com,
	qemu-devel@nongnu.org, qemu-block@nongnu.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Fri, Nov 30, 2018 at 04:03:42PM -0600, Eric Blake wrote:
> We want to be able to detect whether a given qemu NBD server is
> exposing the right export(s) and dirty bitmaps, at least for
> regression testing.  We could use 'nbd-client -l' from the upstream
> NBD project to list exports, but it's annoying to rely on
> out-of-tree binaries; furthermore, nbd-client doesn't necessarily
> know about all of the qemu NBD extensions.  Thus, we plan on adding
> a new mode to qemu-nbd that merely sniffs all possible information
> from the server during handshake phase, then disconnects and dumps
> the information.
>=20
> This patch actually implements --list/-L, while reusing other
> options such as --tls-creds for now designating how to connect
> as the client (rather than their non-list usage of how to operate
> as the server).
>=20
> I debated about adding this functionality to something akin to
> 'qemu-img info' - but that tool does not readily lend itself
> to connecting to an arbitrary NBD server without also tying to
> a specific export (I may, however, still add ImageInfoSpecificNBD
> for reporting the bitmaps available when connecting to a single
> export).  And, while it may feel a bit odd that normally
> qemu-nbd is a server but 'qemu-nbd -L' is a client, we are not
> really making the qemu-nbd binary that much larger, because
> 'qemu-nbd -c' has to operate as both server and client
> simultaneously across two threads when feeding the kernel module
> for /dev/nbdN access.
>=20
> Sample output:
> $ qemu-nbd -L
> exports available: 1
>  export: ''
>   size:  65536
>   flags: 0x4ed ( flush fua trim zeroes df cache )
>   min block: 512
>   opt block: 4096
>   max block: 33554432
>   available meta contexts: 1
>    base:allocation
>=20
> Signed-off-by: Eric Blake <eblake@redhat.com>
> ---
>  qemu-nbd.c | 153 ++++++++++++++++++++++++++++++++++++++++++++++++-----
>  1 file changed, 141 insertions(+), 12 deletions(-)
>=20
> diff --git a/qemu-nbd.c b/qemu-nbd.c
> index c57053a0795..e19a841b869 100644
> --- a/qemu-nbd.c
> +++ b/qemu-nbd.c
> @@ -76,6 +76,7 @@ static void usage(const char *name)
>  {
>      (printf) (
>  "Usage: %s [OPTIONS] FILE\n"
> +"  or:  %s -L [OPTIONS]\n"
>  "QEMU Disk Network Block Device Server\n"
>  "\n"
>  "  -h, --help                display this help and exit\n"
> @@ -97,6 +98,7 @@ static void usage(const char *name)
>  "  -P, --partition=3DNUM       only expose partition NUM\n"
>  "\n"
>  "General purpose options:\n"
> +"  -L, --list                list NBD exports visible to client\n"
>  "  --object type,id=3DID,...   define an object such as 'secret' for p=
roviding\n"
>  "                            passwords and/or encryption keys\n"
>  "  --tls-creds=3DID            use id of an earlier --object to provid=
e TLS\n"
> @@ -130,7 +132,7 @@ static void usage(const char *name)
>  "      --image-opts          treat FILE as a full set of image options=
\n"
>  "\n"
>  QEMU_HELP_BOTTOM "\n"
> -    , name, NBD_DEFAULT_PORT, "DEVICE");
> +    , name, name, NBD_DEFAULT_PORT, "DEVICE");
>  }
>=20
>  static void version(const char *name)
> @@ -242,6 +244,92 @@ static void termsig_handler(int signum)
>  }
>=20
>=20
> +static int qemu_nbd_client_list(SocketAddress *saddr, QCryptoTLSCreds =
*tls,
> +                                const char *hostname)
> +{
> +    int ret =3D EXIT_FAILURE;
> +    int rc;
> +    Error *err =3D NULL;
> +    QIOChannelSocket *sioc;
> +    NBDExportInfo *list;
> +    int i, j;
> +
> +    sioc =3D qio_channel_socket_new();
> +    if (qio_channel_socket_connect_sync(sioc, saddr, &err) < 0) {
> +        error_report_err(err);
> +        goto out;
> +    }
> +    rc =3D nbd_receive_export_list(QIO_CHANNEL(sioc), tls, hostname, &=
list,
> +                                 &err);
> +    if (rc < 0) {
> +        if (err) {
> +            error_report_err(err);
> +        }
> +        goto out_socket;
> +    }
> +    printf("exports available: %d\n", rc);
> +    for (i =3D 0; i < rc; i++) {
> +        printf(" export: '%s'\n", list[i].name);
> +        if (list[i].description && *list[i].description) {
> +            printf("  description: %s\n", list[i].description);
> +        }
> +        if (list[i].flags & NBD_FLAG_HAS_FLAGS) {
> +            printf("  size:  %" PRIu64 "\n", list[i].size);
> +            printf("  flags: 0x%x (", list[i].flags);
> +            if (list[i].flags & NBD_FLAG_READ_ONLY) {
> +                printf(" readonly");
> +            }

This adds an extra space in the output unconditionally, if that's
a problem, ie. the output looks like:

  flags: 0x61 ( trim zeroes )

instead of:

  flags: 0x61 (trim zeroes)

if that's a problem.

I might have used a loop with a static array of flag names, like:

  const char *nbd_flag_name[] =3D {
    ...
    .5 =3D "trim",
    .6 =3D "zeroes",
  };

although it's a bit awkward given the current definitions in
include/block/nbd.h.

Anyway not a big issue.

> +            if (list[i].flags & NBD_FLAG_SEND_FLUSH) {
> +                printf(" flush");
> +            }
> +            if (list[i].flags & NBD_FLAG_SEND_FUA) {
> +                printf(" fua");
> +            }
> +            if (list[i].flags & NBD_FLAG_ROTATIONAL) {
> +                printf(" rotational");
> +            }
> +            if (list[i].flags & NBD_FLAG_SEND_TRIM) {
> +                printf(" trim");
> +            }
> +            if (list[i].flags & NBD_FLAG_SEND_WRITE_ZEROES) {
> +                printf(" zeroes");
> +            }
> +            if (list[i].flags & NBD_FLAG_SEND_DF) {
> +                printf(" df");
> +            }
> +            if (list[i].flags & NBD_FLAG_CAN_MULTI_CONN) {
> +                printf(" multi");
> +            }
> +            if (list[i].flags & NBD_FLAG_SEND_RESIZE) {
> +                printf(" resize");
> +            }
> +            if (list[i].flags & NBD_FLAG_SEND_CACHE) {
> +                printf(" cache");
> +            }
> +            printf(" )\n");
> +        }
> +        if (list[i].min_block) {
> +            printf("  min block: %u\n", list[i].min_block);
> +            printf("  opt block: %u\n", list[i].opt_block);
> +            printf("  max block: %u\n", list[i].max_block);
> +        }
> +        if (list[i].n_contexts) {
> +            printf("  available meta contexts: %d\n", list[i].n_contex=
ts);
> +            for (j =3D 0; j < list[i].n_contexts; j++) {
> +                printf("   %s\n", list[i].contexts[j]);
> +            }
> +        }
> +    }
> +    nbd_free_export_list(list, rc);
> +
> +    ret =3D EXIT_SUCCESS;
> + out_socket:
> +    object_unref(OBJECT(sioc));
> + out:
> +    return ret;
> +}
> +
> +
>  #if HAVE_NBD_DEVICE
>  static void *show_parts(void *arg)
>  {
> @@ -424,7 +512,8 @@ static QemuOptsList qemu_object_opts =3D {
>=20
>=20
>=20
> -static QCryptoTLSCreds *nbd_get_tls_creds(const char *id, Error **errp=
)
> +static QCryptoTLSCreds *nbd_get_tls_creds(const char *id, bool list,
> +                                          Error **errp)
>  {
>      Object *obj;
>      QCryptoTLSCreds *creds;
> @@ -444,10 +533,18 @@ static QCryptoTLSCreds *nbd_get_tls_creds(const c=
har *id, Error **errp)
>          return NULL;
>      }
>=20
> -    if (creds->endpoint !=3D QCRYPTO_TLS_CREDS_ENDPOINT_SERVER) {
> -        error_setg(errp,
> -                   "Expecting TLS credentials with a server endpoint")=
;
> -        return NULL;
> +    if (list) {
> +        if (creds->endpoint !=3D QCRYPTO_TLS_CREDS_ENDPOINT_CLIENT) {
> +            error_setg(errp,
> +                       "Expecting TLS credentials with a client endpoi=
nt");
> +            return NULL;
> +        }
> +    } else {
> +        if (creds->endpoint !=3D QCRYPTO_TLS_CREDS_ENDPOINT_SERVER) {
> +            error_setg(errp,
> +                       "Expecting TLS credentials with a server endpoi=
nt");
> +            return NULL;
> +        }
>      }
>      object_ref(obj);
>      return creds;
> @@ -470,7 +567,8 @@ static void setup_address_and_port(const char **add=
ress, const char **port)
>  static const char *socket_activation_validate_opts(const char *device,
>                                                     const char *sockpat=
h,
>                                                     const char *address=
,
> -                                                   const char *port)
> +                                                   const char *port,
> +                                                   bool list)
>  {
>      if (device !=3D NULL) {
>          return "NBD device can't be set when using socket activation";
> @@ -488,6 +586,10 @@ static const char *socket_activation_validate_opts=
(const char *device,
>          return "TCP port number can't be set when using socket activat=
ion";
>      }
>=20
> +    if (list) {
> +        return "List mode is incompatible with socket activation";
> +    }
> +
>      return NULL;
>  }
>=20
> @@ -511,7 +613,7 @@ int main(int argc, char **argv)
>      off_t fd_size;
>      QemuOpts *sn_opts =3D NULL;
>      const char *sn_id_or_name =3D NULL;
> -    const char *sopt =3D "hVb:o:p:rsnP:c:dvk:e:f:tl:x:T:D:";
> +    const char *sopt =3D "hVb:o:p:rsnP:c:dvk:e:f:tl:x:T:D:L";
>      struct option lopt[] =3D {
>          { "help", no_argument, NULL, 'h' },
>          { "version", no_argument, NULL, 'V' },
> @@ -523,6 +625,7 @@ int main(int argc, char **argv)
>          { "partition", required_argument, NULL, 'P' },
>          { "connect", required_argument, NULL, 'c' },
>          { "disconnect", no_argument, NULL, 'd' },
> +        { "list", no_argument, NULL, 'L' },
>          { "snapshot", no_argument, NULL, 's' },
>          { "load-snapshot", required_argument, NULL, 'l' },
>          { "nocache", no_argument, NULL, 'n' },
> @@ -558,13 +661,14 @@ int main(int argc, char **argv)
>      Error *local_err =3D NULL;
>      BlockdevDetectZeroesOptions detect_zeroes =3D BLOCKDEV_DETECT_ZERO=
ES_OPTIONS_OFF;
>      QDict *options =3D NULL;
> -    const char *export_name =3D ""; /* Default export name */
> +    const char *export_name =3D NULL;
>      const char *export_description =3D NULL;
>      const char *tlscredsid =3D NULL;
>      bool imageOpts =3D false;
>      bool writethrough =3D true;
>      char *trace_file =3D NULL;
>      bool fork_process =3D false;
> +    bool list =3D false;
>      int old_stderr =3D -1;
>      unsigned socket_activation;
>=20
> @@ -764,13 +868,32 @@ int main(int argc, char **argv)
>          case QEMU_NBD_OPT_FORK:
>              fork_process =3D true;
>              break;
> +        case 'L':
> +            list =3D true;
> +            break;
>          }
>      }
>=20
> -    if ((argc - optind) !=3D 1) {
> +    if (list) {
> +        if (argc !=3D optind) {
> +            error_report("List mode is incompatible with a file name")=
;
> +            exit(EXIT_FAILURE);
> +        }
> +        if (export_name || export_description || dev_offset || partiti=
on ||
> +            device || disconnect || fmt || sn_id_or_name) {
> +            error_report("List mode is incompatible with per-device se=
ttings");
> +            exit(EXIT_FAILURE);
> +        }
> +        if (fork_process) {
> +            error_report("List mode is incompatible with forking");
> +            exit(EXIT_FAILURE);
> +        }
> +    } else if ((argc - optind) !=3D 1) {
>          error_report("Invalid number of arguments");
>          error_printf("Try `%s --help' for more information.\n", argv[0=
]);
>          exit(EXIT_FAILURE);
> +    } else if (!export_name) {
> +        export_name =3D "";
>      }
>=20
>      qemu_opts_foreach(&qemu_object_opts,
> @@ -789,7 +912,8 @@ int main(int argc, char **argv)
>      } else {
>          /* Using socket activation - check user didn't use -p etc. */
>          const char *err_msg =3D socket_activation_validate_opts(device=
, sockpath,
> -                                                              bindto, =
port);
> +                                                              bindto, =
port,
> +                                                              list);
>          if (err_msg !=3D NULL) {
>              error_report("%s", err_msg);
>              exit(EXIT_FAILURE);
> @@ -812,7 +936,7 @@ int main(int argc, char **argv)
>              error_report("TLS is not supported with a host device");
>              exit(EXIT_FAILURE);
>          }
> -        tlscreds =3D nbd_get_tls_creds(tlscredsid, &local_err);
> +        tlscreds =3D nbd_get_tls_creds(tlscredsid, list, &local_err);
>          if (local_err) {
>              error_report("Failed to get TLS creds %s",
>                           error_get_pretty(local_err));
> @@ -820,6 +944,11 @@ int main(int argc, char **argv)
>          }
>      }
>=20
> +    if (list) {
> +        saddr =3D nbd_build_socket_address(sockpath, bindto, port);
> +        return qemu_nbd_client_list(saddr, tlscreds, bindto);
> +    }
> +
>      if (disconnect) {
>  #if HAVE_NBD_DEVICE
>          int nbdfd =3D open(argv[optind], O_RDWR);

The code is a bit awkward since we've now effectively added a new mode
to qemu-nbd.

I can foresee in future that someone will add some code before the
=E2=80=98if (list) / if (disconnect)=E2=80=99 statements which will apply=
 only to
"server mode", and they won't necessarily know that they have to add a
mode check to that code, resulting in the list option doing something
weird that might not show up as broken in unit tests.

Still, I don't have any idea how to make it better, for all the
reasons you outlined in your commit message.  I'll leave it to others
who know qemu code in greater detail to comment.

Rich.

--=20
Richard Jones, Virtualization Group, Red Hat http://people.redhat.com/~rj=
ones
Read my programming and virtualization blog: http://rwmj.wordpress.com
virt-top is 'top' for virtual machines.  Tiny program with many
powerful monitoring features, net stats, disk stats, logging, etc.
http://people.redhat.com/~rjones/virt-top

