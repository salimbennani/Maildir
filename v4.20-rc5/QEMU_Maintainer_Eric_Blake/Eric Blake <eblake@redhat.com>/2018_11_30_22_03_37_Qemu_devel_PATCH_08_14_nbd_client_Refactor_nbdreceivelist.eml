Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:23:46 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 07AD6580479
	for <like.xu@linux.intel.com>; Fri, 30 Nov 2018 14:08:45 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by orsmga003-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 30 Nov 2018 14:08:44 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A4FMruhcmt83L0XuIrCACIqlElGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxcSzYx7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v6bpgRh31hy?=
 =?us-ascii?q?cdLzM38H/ZhMJzgq1ZrhKvugR/zozWboyaKfZzcL/Rcs0BRWdaQspdSzZMDp+g?=
 =?us-ascii?q?Y4cTE+YMO/tToYnnp1sJqBuzHQaiBPnuyjBUm3T7wKk63P4iEQ7YwQctGMwBv2?=
 =?us-ascii?q?/QrNrvN6cdT/u4zLPWwjreb/NZwyv95JLUfRAmpPGBRLR9etfSx0k3Dw7JkEmc?=
 =?us-ascii?q?pI//Mz+Iy+gAsHKX4/RuWO+vkWIrtgN8riCxysswjoTFnJ8Zx17a+Slj3Yo4Jt?=
 =?us-ascii?q?O1RFRlbdOnFpZbqjuUOJFsQsw4RmFloCY6xaMCuZ68ZCUKzJUnxwXDa/ycaYSI?=
 =?us-ascii?q?7RTjVPuLLTd/nnJld6qzhxe08Ue+1u3xTte43EpJoyZfj9XAq3MA2wbN5sWJSv?=
 =?us-ascii?q?Zx5Fqt1DSX2wDW8O5EIEQ0laTBK54mx749joMTvlrGHi/rgUn5kbGZdls69eis?=
 =?us-ascii?q?8ujoebLmpoKaN4BolA7+KaMimsi+AeQ7LAcCRWea+fmk2b3n/E35RqhKj/Isnq?=
 =?us-ascii?q?nYtpDaOdoUpqqjDwBJ1YYj7g2yDzGh0NQeknkHKk9FdAiAj4jzNFHCOOr4Auun?=
 =?us-ascii?q?g1SwjDdrwOjLPrngApXOMHfPirjgfatm5k5YyQozy81f5p1OBrEAJvLzRlH+tN?=
 =?us-ascii?q?jCAhAlNAy0xrWvNdNmy4lLWX6TGrTLd+TWsESU/aQpJO+DYpJTvyzybP0s5vrr?=
 =?us-ascii?q?hHl+nkcBfK6vxtwOZXWlW/hrPUidMkfqmcoLRGIDvw4iS77zhVifFDJeeXu2Gr?=
 =?us-ascii?q?gx/yw2E56OC4DFSYawxrub03CgA5dUa2taX02KCmribI6eWv0BOx6Vd9ZslyFB?=
 =?us-ascii?q?WbW/RosJ0xaouwnnjb19Ibn64Cod4L/51dM9zenalhx6oTF+C82e3kmXQm10l3?=
 =?us-ascii?q?9OTDgzivMs6Xdhw0uOhPAry8dTEsZesqtE?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A4AAD+swFchxHrdtBjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUwUBAQsBgTCCYoxwoAiEeYFzFBgUh3YiNgcNAQMBAQEBAQECARMBAQEKCwk?=
 =?us-ascii?q?IGw4vgjYFAgMYCYJcAwMBAkMKKQMDAQIGAQFICAMBQhEZBYMcggIBBKg4g0GBf?=
 =?us-ascii?q?4RsiDGDaReBQD+BEYd9hXECiSMKhX18UI8/CZEsCxiBW4d+NocQLIEMgjiUbYF?=
 =?us-ascii?q?NA4IDMxoIGxWDJ4InF448IjGBBxyLLYF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0A4AAD+swFchxHrdtBjHAEBAQQBAQcEAQGBUwUBAQsBgTC?=
 =?us-ascii?q?CYoxwoAiEeYFzFBgUh3YiNgcNAQMBAQEBAQECARMBAQEKCwkIGw4vgjYFAgMYC?=
 =?us-ascii?q?YJcAwMBAkMKKQMDAQIGAQFICAMBQhEZBYMcggIBBKg4g0GBf4RsiDGDaReBQD+?=
 =?us-ascii?q?BEYd9hXECiSMKhX18UI8/CZEsCxiBW4d+NocQLIEMgjiUbYFNA4IDMxoIGxWDJ?=
 =?us-ascii?q?4InF448IjGBBxyLLYF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,300,1539673200"; 
   d="scan'208";a="55083847"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 30 Nov 2018 14:08:44 -0800
Received: from localhost ([::1]:34835 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gSqxn-0000oZ-9h
	for like.xu@linux.intel.com; Fri, 30 Nov 2018 17:08:43 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:55995)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <eblake@redhat.com>) id 1gSqtI-0004P0-To
	for qemu-devel@nongnu.org; Fri, 30 Nov 2018 17:04:10 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <eblake@redhat.com>) id 1gSqtH-0004Ff-7a
	for qemu-devel@nongnu.org; Fri, 30 Nov 2018 17:04:04 -0500
Received: from mx1.redhat.com ([209.132.183.28]:52186)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <eblake@redhat.com>)
	id 1gSqtE-0003px-7x; Fri, 30 Nov 2018 17:04:00 -0500
Received: from smtp.corp.redhat.com (int-mx07.intmail.prod.int.phx2.redhat.com
	[10.5.11.22])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 8FE2B3DE0D;
	Fri, 30 Nov 2018 22:03:59 +0000 (UTC)
Received: from red.redhat.com (ovpn-117-105.phx2.redhat.com [10.3.117.105])
	by smtp.corp.redhat.com (Postfix) with ESMTP id F2DF81057072;
	Fri, 30 Nov 2018 22:03:58 +0000 (UTC)
From: Eric Blake <eblake@redhat.com>
To: qemu-devel@nongnu.org
Date: Fri, 30 Nov 2018 16:03:37 -0600
Message-Id: <20181130220344.3350618-9-eblake@redhat.com>
In-Reply-To: <20181130220344.3350618-1-eblake@redhat.com>
References: <20181130220344.3350618-1-eblake@redhat.com>
X-Scanned-By: MIMEDefang 2.84 on 10.5.11.22
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.29]);
	Fri, 30 Nov 2018 22:03:59 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: [Qemu-devel] [PATCH 08/14] nbd/client: Refactor nbd_receive_list()
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: nsoffer@redhat.com, vsementsov@virtuozzo.com, jsnow@redhat.com,
	rjones@redhat.com, qemu-block@nongnu.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Add some parameters to make this function reusable in upcoming
export listing, where we will want to capture the name and
description rather than compare against a user-supplied name.
No change in semantics to the existing caller.

Signed-off-by: Eric Blake <eblake@redhat.com>
---
 nbd/client.c | 66 +++++++++++++++++++++++++++++++++++++---------------
 1 file changed, 47 insertions(+), 19 deletions(-)

diff --git a/nbd/client.c b/nbd/client.c
index 1dc8f83e19a..27785c55d0a 100644
--- a/nbd/client.c
+++ b/nbd/client.c
@@ -232,18 +232,21 @@ static int nbd_handle_reply_err(QIOChannel *ioc, NBDOptionReply *reply,
     return result;
 }

-/* Process another portion of the NBD_OPT_LIST reply.  Set *@match if
- * the current reply matches @want or if the server does not support
- * NBD_OPT_LIST, otherwise leave @match alone.  Return 0 if iteration
- * is complete, positive if more replies are expected, or negative
- * with @errp set if an unrecoverable error occurred. */
+/* Process another portion of the NBD_OPT_LIST reply.  If @want, then
+ * set *@match if the current reply matches @want or if the server
+ * does not support NBD_OPT_LIST, otherwise leave @match alone.
+ * Otherwise, @nameout and @description are malloc'd to contain
+ * NUL-terminated copies of the reply.  Return 0 if iteration is
+ * complete, positive if more replies are expected, or negative with
+ * @errp set if an unrecoverable error occurred. */
 static int nbd_receive_list(QIOChannel *ioc, const char *want, bool *match,
-                            Error **errp)
+                            char **nameout, char **description, Error **errp)
 {
     NBDOptionReply reply;
     uint32_t len;
     uint32_t namelen;
-    char name[NBD_MAX_NAME_SIZE + 1];
+    char array[NBD_MAX_NAME_SIZE + 1];
+    char *name = array;
     int error;

     if (nbd_receive_option_reply(ioc, NBD_OPT_LIST, &reply, errp) < 0) {
@@ -253,7 +256,12 @@ static int nbd_receive_list(QIOChannel *ioc, const char *want, bool *match,
     if (error <= 0) {
         /* The server did not support NBD_OPT_LIST, so set *match on
          * the assumption that any name will be accepted.  */
-        *match = true;
+        if (want) {
+            *match = true;
+        } else if (!error) {
+            error_setg(errp, "Server does not support export lists");
+            error = -1;
+        }
         return error;
     }
     len = reply.length;
@@ -290,30 +298,49 @@ static int nbd_receive_list(QIOChannel *ioc, const char *want, bool *match,
         nbd_send_opt_abort(ioc);
         return -1;
     }
-    if (namelen != strlen(want)) {
-        if (nbd_drop(ioc, len, errp) < 0) {
-            error_prepend(errp,
-                          "failed to skip export name with wrong length: ");
-            nbd_send_opt_abort(ioc);
-            return -1;
+    if (want) {
+        if (namelen != strlen(want)) {
+            if (nbd_drop(ioc, len, errp) < 0) {
+                error_prepend(errp,
+                              "failed to skip export name with wrong length: ");
+                nbd_send_opt_abort(ioc);
+                return -1;
+            }
+            return 1;
         }
-        return 1;
+        assert(namelen < sizeof(array));
+    } else {
+        assert(nameout);
+        *nameout = name = g_new(char, namelen + 1);
     }

-    assert(namelen < sizeof(name));
     if (nbd_read(ioc, name, namelen, errp) < 0) {
         error_prepend(errp, "failed to read export name: ");
         nbd_send_opt_abort(ioc);
+        if (!want) {
+            free(name);
+        }
         return -1;
     }
     name[namelen] = '\0';
     len -= namelen;
-    if (nbd_drop(ioc, len, errp) < 0) {
+    if (!want) {
+        assert(description);
+        *description = g_new(char, len + 1);
+        if (nbd_read(ioc, *description, len, errp) < 0) {
+            error_prepend(errp, "failed to read export description: ");
+            nbd_send_opt_abort(ioc);
+            free(name);
+            free(*description);
+            return -1;
+        }
+        (*description)[len] = '\0';
+    } else if (nbd_drop(ioc, len, errp) < 0) {
         error_prepend(errp, "failed to read export description: ");
         nbd_send_opt_abort(ioc);
         return -1;
     }
-    if (!strcmp(name, want)) {
+    if (want && !strcmp(name, want)) {
         *match = true;
     }
     return 1;
@@ -498,7 +525,8 @@ static int nbd_receive_query_exports(QIOChannel *ioc,
     }

     while (1) {
-        int ret = nbd_receive_list(ioc, wantname, &foundExport, errp);
+        int ret = nbd_receive_list(ioc, wantname, &foundExport,
+                                   NULL, NULL, errp);

         if (ret < 0) {
             /* Server gave unexpected reply */
-- 
2.17.2


