Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 29 Nov 2018 18:19:16 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id DB21E5802E4
	for <like.xu@linux.intel.com>; Thu, 29 Nov 2018 02:07:36 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga006-1.jf.intel.com with ESMTP; 29 Nov 2018 02:07:36 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AKkFdLxLtvHXG7NSXu9mcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgeLf7xwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QLYpUjqg8qhrUgflhi?=
 =?us-ascii?q?cZOTA382/Zjc5/jKxGrhK5pRFxwYHZbJybOfZiYKzdZsgXSXZdUstLSyBMGJ+w?=
 =?us-ascii?q?Y5cJAuEcPehYtY79p14WoBW+GwasBf7kxDlJhnTr2qA63eAhEQDd0Qw7AtIOq2?=
 =?us-ascii?q?rboM/pO6cVVOC41a/FxijAYfNOwTrx9pTEfxM7rf2RQL59ctDdxVchGg7FlFmc?=
 =?us-ascii?q?tI7oMyua2+kNqWSX8vRsWfy1h2I6qwx8oyKjytksh4TGgI8e10rK+j9jwIkvIN?=
 =?us-ascii?q?21UE57bsCgEJtXryyaM4p2Qtg+Q2Fzoio6xbsGuYOhcCgN0pQnyAbTa/2Bc4eW?=
 =?us-ascii?q?/hLuTPidLSt7iX5/Zb6zmhW//VK+xuDyVsS4yktGoyhdntnJrH8N1hjT6sadSv?=
 =?us-ascii?q?t6+0eswS+P2B7W6uFZOEw7iLTUK4A/zb40j5YcqkPDHjLwmErqkqCWbUIo+uyp?=
 =?us-ascii?q?6+TkfLrqvJCdN5JshwH6M6QunNG/AOsiPggPWWib5fqz1Ln58ULlR7VKi+Y7kq?=
 =?us-ascii?q?/esJDcKsQboLO5DxVS0oY55BazFy2m38gAnXkbMFJFfwqKj4zoO1HNPv/0F/i+?=
 =?us-ascii?q?g0m3nTdvxvDGOKDhA5rXInjClrfhYahy60pGxAUvytBf4sEcN7caPfimWlPtrM?=
 =?us-ascii?q?eKSVg9Mheo2KDhD9Ny0J5YXniARaqQMafXuFnP4fozIu6Kf8gMtTPgbvQo+fPq?=
 =?us-ascii?q?3kI/gkIXKKyg3J8LbyKhE/F7ZkmUf3fox80MCHoHpRYWSuvsh1ufFzlJaCGpQq?=
 =?us-ascii?q?g+6zonXZ+gFprJXYu3gbaMjxu8S4RbY30DBl2SHHPAcYKCVPERLiWILZxPiDsB?=
 =?us-ascii?q?AJasSscF1Fn6ugv746F6NeeS8Sod48GwnONp7vHewElhvQd/CN6QhjmA?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A0AgAiuv9bhxHrdtBlHgEfBgeBTAKBL?=
 =?us-ascii?q?4JijHCLKZlPgXMUGBSHciI0CQ0BAwEBAQEBAQIBEwEBAQoLCQgbDi+CNgUCAxg?=
 =?us-ascii?q?JglwDAwECJB8KLAMBAgYBAUgIAwFTGQWDHIICAQMBpzUzg32BQ4Rth2uEKxeBQ?=
 =?us-ascii?q?D+BEY1uAokhhnxRjzUJDYYyimgLGIlYh0SYTIFGgg1wFYMngicXEo4YZYEEAzu?=
 =?us-ascii?q?LBoF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0A0AgAiuv9bhxHrdtBlHgEfBgeBTAKBL4JijHCLKZlPgXM?=
 =?us-ascii?q?UGBSHciI0CQ0BAwEBAQEBAQIBEwEBAQoLCQgbDi+CNgUCAxgJglwDAwECJB8KL?=
 =?us-ascii?q?AMBAgYBAUgIAwFTGQWDHIICAQMBpzUzg32BQ4Rth2uEKxeBQD+BEY1uAokhhnx?=
 =?us-ascii?q?RjzUJDYYyimgLGIlYh0SYTIFGgg1wFYMngicXEo4YZYEEAzuLBoF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,294,1539673200"; 
   d="scan'208";a="55340908"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 29 Nov 2018 02:07:30 -0800
Received: from localhost ([::1]:53161 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gSJEH-0007DR-Md
	for like.xu@linux.intel.com; Thu, 29 Nov 2018 05:07:29 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:43669)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <fli@suse.com>) id 1gSJBA-0005Co-98
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 05:04:22 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <fli@suse.com>) id 1gSJB4-0004JB-Hp
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 05:04:16 -0500
Received: from smtp.nue.novell.com ([195.135.221.5]:45507)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <fli@suse.com>) id 1gSJB4-0004In-7g
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 05:04:10 -0500
Received: from localhost.localdomain ([45.122.156.254])
	by smtp.nue.novell.com with ESMTP (NOT encrypted);
	Thu, 29 Nov 2018 11:04:07 +0100
From: Fei Li <fli@suse.com>
To: qemu-devel@nongnu.org
Date: Thu, 29 Nov 2018 18:03:38 +0800
Message-Id: <20181129100340.13823-4-fli@suse.com>
X-Mailer: git-send-email 2.13.7
In-Reply-To: <20181129100340.13823-1-fli@suse.com>
References: <20181129100340.13823-1-fli@suse.com>
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 3.x [fuzzy]
X-Received-From: 195.135.221.5
Subject: [Qemu-devel] [PATCH RFC v2 3/5] migration: fix the multifd code
 when receiving less channels
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

In our current code, when multifd is used during migration, if there
is an error before the destination receives all new channels, the
source keeps running, however the destination does not exit but keeps
waiting until the source is killed deliberately.

Fix this by dumping the specific error and let users decide whether
to quit from the destination side when failing to receive packet via
some channel.

Signed-off-by: Fei Li <fli@suse.com>
Reviewed-by: Peter Xu <peterx@redhat.com>
---
 migration/channel.c   | 11 ++++++-----
 migration/migration.c |  9 +++++++--
 migration/migration.h |  2 +-
 migration/ram.c       |  7 ++++++-
 migration/ram.h       |  2 +-
 5 files changed, 21 insertions(+), 10 deletions(-)

diff --git a/migration/channel.c b/migration/channel.c
index 33e0e9b82f..20e4c8e2dc 100644
--- a/migration/channel.c
+++ b/migration/channel.c
@@ -30,6 +30,7 @@
 void migration_channel_process_incoming(QIOChannel *ioc)
 {
     MigrationState *s = migrate_get_current();
+    Error *local_err = NULL;
 
     trace_migration_set_incoming_channel(
         ioc, object_get_typename(OBJECT(ioc)));
@@ -38,13 +39,13 @@ void migration_channel_process_incoming(QIOChannel *ioc)
         *s->parameters.tls_creds &&
         !object_dynamic_cast(OBJECT(ioc),
                              TYPE_QIO_CHANNEL_TLS)) {
-        Error *local_err = NULL;
         migration_tls_channel_process_incoming(s, ioc, &local_err);
-        if (local_err) {
-            error_report_err(local_err);
-        }
     } else {
-        migration_ioc_process_incoming(ioc);
+        migration_ioc_process_incoming(ioc, &local_err);
+    }
+
+    if (local_err) {
+        error_report_err(local_err);
     }
 }
 
diff --git a/migration/migration.c b/migration/migration.c
index 49ffb9997a..72106bddf0 100644
--- a/migration/migration.c
+++ b/migration/migration.c
@@ -541,7 +541,7 @@ void migration_fd_process_incoming(QEMUFile *f)
     migration_incoming_process();
 }
 
-void migration_ioc_process_incoming(QIOChannel *ioc)
+void migration_ioc_process_incoming(QIOChannel *ioc, Error **errp)
 {
     MigrationIncomingState *mis = migration_incoming_get_current();
     bool start_migration;
@@ -563,9 +563,14 @@ void migration_ioc_process_incoming(QIOChannel *ioc)
          */
         start_migration = !migrate_use_multifd();
     } else {
+        Error *local_err = NULL;
         /* Multiple connections */
         assert(migrate_use_multifd());
-        start_migration = multifd_recv_new_channel(ioc);
+        start_migration = multifd_recv_new_channel(ioc, &local_err);
+        if (local_err) {
+            error_propagate(errp, local_err);
+            return;
+        }
     }
 
     if (start_migration) {
diff --git a/migration/migration.h b/migration/migration.h
index e413d4d8b6..02b7304610 100644
--- a/migration/migration.h
+++ b/migration/migration.h
@@ -229,7 +229,7 @@ struct MigrationState
 void migrate_set_state(int *state, int old_state, int new_state);
 
 void migration_fd_process_incoming(QEMUFile *f);
-void migration_ioc_process_incoming(QIOChannel *ioc);
+void migration_ioc_process_incoming(QIOChannel *ioc, Error **errp);
 void migration_incoming_process(void);
 
 bool  migration_has_all_channels(void);
diff --git a/migration/ram.c b/migration/ram.c
index 7e7deec4d8..e13b9349d0 100644
--- a/migration/ram.c
+++ b/migration/ram.c
@@ -1323,7 +1323,7 @@ bool multifd_recv_all_channels_created(void)
 }
 
 /* Return true if multifd is ready for the migration, otherwise false */
-bool multifd_recv_new_channel(QIOChannel *ioc)
+bool multifd_recv_new_channel(QIOChannel *ioc, Error **errp)
 {
     MultiFDRecvParams *p;
     Error *local_err = NULL;
@@ -1331,6 +1331,10 @@ bool multifd_recv_new_channel(QIOChannel *ioc)
 
     id = multifd_recv_initial_packet(ioc, &local_err);
     if (id < 0) {
+        error_propagate_prepend(errp, local_err,
+                                "failed to receive packet"
+                                " via multifd channel %d: ",
+                                multifd_recv_state->count);
         multifd_recv_terminate_threads(local_err);
         return false;
     }
@@ -1340,6 +1344,7 @@ bool multifd_recv_new_channel(QIOChannel *ioc)
         error_setg(&local_err, "multifd: received id '%d' already setup'",
                    id);
         multifd_recv_terminate_threads(local_err);
+        error_propagate(errp, local_err);
         return false;
     }
     p->c = ioc;
diff --git a/migration/ram.h b/migration/ram.h
index 83ff1bc11a..046d3074be 100644
--- a/migration/ram.h
+++ b/migration/ram.h
@@ -47,7 +47,7 @@ int multifd_save_cleanup(Error **errp);
 int multifd_load_setup(void);
 int multifd_load_cleanup(Error **errp);
 bool multifd_recv_all_channels_created(void);
-bool multifd_recv_new_channel(QIOChannel *ioc);
+bool multifd_recv_new_channel(QIOChannel *ioc, Error **errp);
 
 uint64_t ram_pagesize_summary(void);
 int ram_save_queue_pages(const char *rbname, ram_addr_t start, ram_addr_t len);
-- 
2.13.7


