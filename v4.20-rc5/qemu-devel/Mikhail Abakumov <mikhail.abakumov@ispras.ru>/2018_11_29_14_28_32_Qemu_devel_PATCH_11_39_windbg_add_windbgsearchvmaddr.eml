Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 08:45:43 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 5F65F5802E4
	for <like.xu@linux.intel.com>; Thu, 29 Nov 2018 06:52:17 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga001-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 06:52:17 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AwTk71BZVyt+z0DnI2oJGqk3/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZrsm6bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjmk8qxlSgLniD?=
 =?us-ascii?q?0fOjA57m/ZhM9+g6BVoB2vqBNw34HabpyNNPd8fK3Qcs4WSGRdUslPTCxMGZ+8?=
 =?us-ascii?q?YokVAuYdIepVtYvwql0TphW+HwmsA+bvxydPiH/33q060/4uEQDC3Ac9A98Bq2?=
 =?us-ascii?q?7brNboNKcXVuC10rTDwDLGb/NX2jf96JLHchElof2WR71/atDeyUoyFwPAiVWQ?=
 =?us-ascii?q?t5foPzKO1uQVqWiU9fFgWfi1i246sgx8pCWkyMQ0ioTRmI4Z1lPJ+T9kzIooJt?=
 =?us-ascii?q?C0UlB3bNCkHZdKqi2XNZN6T8AiTm1ypSo3xaMKtYSmcCQXypkr3QDTZ+KGfoWO?=
 =?us-ascii?q?/xntTvyeIS1ii3JgYL+/hwi98UynyuDkUsm00U1KrjZektXWuXAN0QHT5tKASv?=
 =?us-ascii?q?tn8UetwTeP1wbN5eFYOU04i7bXJp07zrIti5Yesl7PEjH4lUj2lqOaa0cp9vCt?=
 =?us-ascii?q?6+v9Y7XmopGcN5VzigH7Kqkug9KwAeElMgQXQmeU5/q826Pn/UHgW7pKieA2kq?=
 =?us-ascii?q?/Fv5/EPsQXoaq5Aw5W0ok98Rq+ACqm3cwcnXkGKlJFZR2Gg5LoO1HIPPD3E/O/?=
 =?us-ascii?q?j06wnzdswvDLJbvhApLLLnjMlrfhYKxx60lGyAo81dxf/Y5bCqkdIPLvXU/8rN?=
 =?us-ascii?q?jYDh46MwOq2ermB8h925gaWWKOBK+ZLazTvUWJ5uIpP+mDeosVtCzhJPgi4v69?=
 =?us-ascii?q?xUI/gkIXKKm1wYMMOjf/GvV9P17fZ33qjdEcV2AQsU07Re3ujVSEFjlLe3e1Wb?=
 =?us-ascii?q?l7/zw+FceqAJnOQtOQhqec1nK+F5xSemcUE12JDDLkepuJX7IWZTuPL9R9ujoD?=
 =?us-ascii?q?U7enVskmzx75rxLwybdsMr/J/DYFv4noztl/6r7vkkQr+DlpSsiQzWyJZ2dzmG?=
 =?us-ascii?q?wOWnkxxq8sj1Z6zwKm0Kt4iv1cXfVZ7vBUVwAkfcrZzu96AtH2HAvLd9SUTVG4?=
 =?us-ascii?q?atS9GSs4VZQr3oldMA5GB9y+g0WbjGKRCLgPmunTCQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0CNAADl+/9bhxHrdtBkHgEGBwaBUggLA?=
 =?us-ascii?q?YEwgmKDeYh3iymBaJJxhHiBcxQYFIITgigDgzYiNQgNAQMBAQEBAQECARMBAQE?=
 =?us-ascii?q?KCwkIGw4vgjYFAgMYCYJcAwMBAiAjCikDAwECBgEBJAIiBAICAwFDEBkFgxyCA?=
 =?us-ascii?q?gEDAaYLgS+KLYELiwuBVz+BRIpkglcCj2oxkAgHAoIdBIQhiwiKQIZcLJgigUg?=
 =?us-ascii?q?BggpNMoEBCFaBToInF44gb4EHi0OBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0CNAADl+/9bhxHrdtBkHgEGBwaBUggLAYEwgmKDeYh3iym?=
 =?us-ascii?q?BaJJxhHiBcxQYFIITgigDgzYiNQgNAQMBAQEBAQECARMBAQEKCwkIGw4vgjYFA?=
 =?us-ascii?q?gMYCYJcAwMBAiAjCikDAwECBgEBJAIiBAICAwFDEBkFgxyCAgEDAaYLgS+KLYE?=
 =?us-ascii?q?LiwuBVz+BRIpkglcCj2oxkAgHAoIdBIQhiwiKQIZcLJgigUgBggpNMoEBCFaBT?=
 =?us-ascii?q?oInF44gb4EHi0OBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,295,1539673200"; 
   d="scan'208";a="53153374"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 29 Nov 2018 06:52:16 -0800
Received: from localhost ([::1]:54578 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gSNfr-0001vl-Jt
	for like.xu@linux.intel.com; Thu, 29 Nov 2018 09:52:15 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:52768)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <mikhail.abakumov@ispras.ru>) id 1gSNIy-0004aV-RE
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 09:28:37 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <mikhail.abakumov@ispras.ru>) id 1gSNIx-0005qI-UR
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 09:28:36 -0500
Received: from mail.ispras.ru ([83.149.199.45]:39382)
	by eggs.gnu.org with esmtp (Exim 4.71)
	(envelope-from <mikhail.abakumov@ispras.ru>) id 1gSNIx-0005p9-GL
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 09:28:35 -0500
Received: from Misha-PC.lan02.inno (unknown [85.142.117.226])
	by mail.ispras.ru (Postfix) with ESMTPSA id B9CA75400DC;
	Thu, 29 Nov 2018 17:28:34 +0300 (MSK)
From: Mikhail Abakumov <mikhail.abakumov@ispras.ru>
To: qemu-devel@nongnu.org
Date: Thu, 29 Nov 2018 17:28:32 +0300
Message-ID: <154350171209.8036.6955133809742280150.stgit@Misha-PC.lan02.inno>
In-Reply-To: <154350164526.8036.12623669071583857903.stgit@Misha-PC.lan02.inno>
References: <154350164526.8036.12623669071583857903.stgit@Misha-PC.lan02.inno>
User-Agent: StGit/0.17.1-dirty
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 3.x [fuzzy]
X-Received-From: 83.149.199.45
Subject: [Qemu-devel] [PATCH 11/39] windbg: add windbg_search_vmaddr
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: sw@weilnetz.de, lprosek@redhat.com, dovgaluk@ispras.ru,
	rkagan@virtuozzo.com, pbonzini@redhat.com, den@openvz.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Add function to search in virtual memory.
Implemented Boyer-Moore search algorithm.

Signed-off-by: Mikhail Abakumov <mikhail.abakumov@ispras.ru>
Signed-off-by: Pavel Dovgalyuk <dovgaluk@ispras.ru>
---
 include/exec/windbgstub-utils.h |    4 +
 windbgstub-utils.c              |  117 +++++++++++++++++++++++++++++++++++++++
 2 files changed, 121 insertions(+)

diff --git a/include/exec/windbgstub-utils.h b/include/exec/windbgstub-utils.h
index e076227b39..2760684cfb 100644
--- a/include/exec/windbgstub-utils.h
+++ b/include/exec/windbgstub-utils.h
@@ -59,4 +59,8 @@ const char *kd_pkt_type_name(int id);
 bool windbg_on_load(void);
 void windbg_on_reset(void);
 
+InitedAddr windbg_search_vmaddr(CPUState *cs, target_ulong start,
+                                target_ulong finish, const uint8_t *pattern,
+                                int pLen);
+
 #endif /* WINDBGSTUB_UTILS_H */
diff --git a/windbgstub-utils.c b/windbgstub-utils.c
index 968e5cb2dd..dce82987bb 100644
--- a/windbgstub-utils.c
+++ b/windbgstub-utils.c
@@ -80,6 +80,123 @@ static const char *kd_packet_type_names[] = {
     "PACKET_TYPE_MAX",
 };
 
+static void prep_bmbc(const uint8_t *pattern, int pLen, int bmBc[])
+{
+    int i;
+
+    for (i = 0; i < 256; ++i) {
+        bmBc[i] = pLen;
+    }
+    for (i = 0; i < pLen - 1; ++i) {
+        bmBc[pattern[i]] = pLen - i - 1;
+    }
+}
+
+static void prep_suffixes(const uint8_t *pattern, int pLen, int *suff)
+{
+    int f, g, i;
+
+    suff[pLen - 1] = pLen;
+    f = 0;
+    g = pLen - 1;
+    for (i = pLen - 2; i >= 0; --i) {
+        if (i > g && suff[i + pLen - 1 - f] < i - g) {
+            suff[i] = suff[i + pLen - 1 - f];
+        } else {
+            if (i < g) {
+                g = i;
+            }
+            f = i;
+            while (g >= 0 && pattern[g] == pattern[g + pLen - 1 - f]) {
+                --g;
+            }
+            suff[i] = f - g;
+        }
+    }
+}
+
+static void prep_bmgs(const uint8_t *pattern, int pLen, int bmGs[])
+{
+    int i, j, suff[pLen];
+
+    prep_suffixes(pattern, pLen, suff);
+
+    for (i = 0; i < pLen; ++i) {
+        bmGs[i] = pLen;
+    }
+
+    j = 0;
+    for (i = pLen - 1; i >= 0; --i) {
+        if (suff[i] == i + 1) {
+            for (; j < pLen - 1 - i; ++j) {
+                if (bmGs[j] == pLen) {
+                    bmGs[j] = pLen - 1 - i;
+                }
+            }
+        }
+    }
+
+    for (i = 0; i <= pLen - 2; ++i) {
+        bmGs[pLen - 1 - suff[i]] = pLen - 1 - i;
+    }
+}
+
+static int search_boyermoore(const uint8_t *data, int dLen,
+                             const uint8_t *pattern, int pLen, int bmGs[],
+                             int bmBc[])
+{
+    int i;
+    int j = 0;
+    while (j <= dLen - pLen) {
+        i = pLen - 1;
+        while (i >= 0 && pattern[i] == data[i + j]) {
+            --i;
+        }
+        if (i < 0) {
+            return j;
+        } else {
+            j += MAX(bmGs[i], bmBc[data[i + j]] - pLen + 1 + i);
+        }
+    }
+    return -1;
+}
+
+InitedAddr windbg_search_vmaddr(CPUState *cs, target_ulong start,
+                                target_ulong finish, const uint8_t *pattern,
+                                int pLen)
+{
+    InitedAddr ret;
+    int bmGs[pLen], bmBc[256];
+    int find;
+    target_ulong offset = start;
+    target_ulong step = MIN(MAX(finish - start, 0x10000), pLen * 2);
+
+    if (finish <= start || pLen > finish - start) {
+        return ret;
+    }
+
+    uint8_t *buf = g_new(uint8_t, step);
+
+    prep_bmgs(pattern, pLen, bmGs);
+    prep_bmbc(pattern, pLen, bmBc);
+
+    while (offset < finish) {
+        step = MIN(step, finish - offset);
+        if (cpu_memory_rw_debug(cs, offset, buf, step, 0) == 0) {
+            find = search_boyermoore(buf, step, pattern, pLen, bmGs, bmBc);
+            if (find >= 0) {
+                ret.addr = offset + find;
+                ret.is_init = true;
+                break;
+            }
+        }
+        offset += step - pLen;
+    }
+
+    g_free(buf);
+    return ret;
+}
+
 const char *kd_api_name(int id)
 {
     return (id >= DbgKdMinimumManipulate && id < DbgKdMaximumManipulate)


