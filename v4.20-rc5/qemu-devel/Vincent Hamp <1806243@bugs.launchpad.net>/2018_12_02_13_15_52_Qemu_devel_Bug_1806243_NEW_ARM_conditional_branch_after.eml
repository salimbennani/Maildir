Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 03 Dec 2018 08:40:52 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 0942158014B
	for <like.xu@linux.intel.com>; Sun,  2 Dec 2018 05:26:06 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by fmsmga002-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 02 Dec 2018 05:26:05 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AnZPN9RD88WP941dfnexQUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP37pc+wAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VDK/5KlpVRDokj?=
 =?us-ascii?q?8KODEl/2/YhMJ+jLxVrhG5pxJiwYPaYo6YOOdwc6/BZ9MVW3FBU91NVyxYGI6w?=
 =?us-ascii?q?c5cDA/YDMOtesoLzp0EOrRy7BQS0C+zvyzlIiWPo0q08z+QqDAPI0xYlH9IWrX?=
 =?us-ascii?q?/Zq8j5OaQOXe200qXFwjvOYuhN1jfg54jIaQotofWWUrJtd8re1UkvFxvfgVqN?=
 =?us-ascii?q?s4DlOS2a1vgUvmWd8uFuW+Wvi2s9pAFwpDii3sMshZPUhoIT1l/E9T15z5woKt?=
 =?us-ascii?q?GiTk50f8KkHZ1NvC+ZL4t7Wt0uT31rtSog17EKpJ22cDIUxJkpxxPTceGLfoqQ?=
 =?us-ascii?q?7h/nSeqdOyp0iXFhdb6lgxu+7VKsx+P+W8SyzV1EtDBKksPWuXAIzxHT6taISv?=
 =?us-ascii?q?96/kq53TaP1hvT6v1fIUwumqrbLYMhzqQ3lpoJvkTPBi72mEPog6+Kbkgo5PSk?=
 =?us-ascii?q?5uf9brn7u5ORNJV4hh/wP6kugMCzHOY1PhALX2eB+OS80LPj/Vf+QLVPlvA2i7?=
 =?us-ascii?q?fWsJXHJcgCu6G2HRFV3Zgn6xqmFDim18kYnX8bI11bYxKLiIzpO1DNIP/mF/u+?=
 =?us-ascii?q?jEmsnS9vx/DHOL3hH5rMImLCkLfnYbZy9UpcxBAvwtBY4pJZEbcBIPX1Wk/+st?=
 =?us-ascii?q?zYEwU1Mwuuw+boENl9zJ8RWXqTAq+FN6PfqVuI5uMsI+aSfoMUtyv9JuMh5/7v?=
 =?us-ascii?q?i385hFAccbOo3ZsRdHC3APBmL1+Fbnrrh9dSWVoMpRc0Gez2lEWZA3kUY3epQ7?=
 =?us-ascii?q?l64DY9B4S7S4DZSceoib2F2S69WZpOemFBDEvLCHrtasCIVukBbHGvJNR8mGkB?=
 =?us-ascii?q?XLmlV4hzzByrqUr2xqRqKq/O9zQFuIn//N5y4eLViFc17zMjFNmX0WyGUzRpmH?=
 =?us-ascii?q?gVTSQ9xqF1rB9BzQKa3K1lxvBVC9FXz/VOVAg8KNjb1eMpMd3qXhP9eYKjVVnu?=
 =?us-ascii?q?G4X+X2ttFZplmo9WPRwhQP2okx/YmS6jHrkel6SCCNoy/76KjFbrIMMo9XfA36?=
 =?us-ascii?q?QnkxEGS85XfTn/1vYhrVSIL4TUnF7fk6+3c68cxCfBsmGO0Tzd7wljTAdsXPCd?=
 =?us-ascii?q?DjgkbUzMoIGh6w=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BaBQAD3QNchxHrdtBjHgEGBwaBZT9yK?=
 =?us-ascii?q?oEPgSmDeYh3iygBUAEHgRCJRIRhizsUGA0HhDsDgzgiOBIBAwEBAQEBAQIBEwE?=
 =?us-ascii?q?BAQoLCQgbDiMMgjYFAgMYCYJfBAIgIwoKIgMBAgYCJAIiBAICAwFDJQmDHAGBd?=
 =?us-ascii?q?A0BAwEKGaIYgS+ELQGBA4RmBYELixGBD4EHgREzgjGBb4ZEglcCgSoBAQGIDJc?=
 =?us-ascii?q?GAQYCAYY/QYpUEIs/hVeNaYsEgV2BdjMaLiSBPzqBFBKCFQwLEm0BCYcahXpyA?=
 =?us-ascii?q?Q54iy6BdwEB?=
X-IPAS-Result: =?us-ascii?q?A0BaBQAD3QNchxHrdtBjHgEGBwaBZT9yKoEPgSmDeYh3iyg?=
 =?us-ascii?q?BUAEHgRCJRIRhizsUGA0HhDsDgzgiOBIBAwEBAQEBAQIBEwEBAQoLCQgbDiMMg?=
 =?us-ascii?q?jYFAgMYCYJfBAIgIwoKIgMBAgYCJAIiBAICAwFDJQmDHAGBdA0BAwEKGaIYgS+?=
 =?us-ascii?q?ELQGBA4RmBYELixGBD4EHgREzgjGBb4ZEglcCgSoBAQGIDJcGAQYCAYY/QYpUE?=
 =?us-ascii?q?Is/hVeNaYsEgV2BdjMaLiSBPzqBFBKCFQwLEm0BCYcahXpyAQ54iy6BdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,306,1539673200"; 
   d="scan'208";a="54188866"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 02 Dec 2018 05:26:05 -0800
Received: from localhost ([::1]:44601 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gTRl4-0001Qt-GE
	for like.xu@linux.intel.com; Sun, 02 Dec 2018 08:26:02 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:38654)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <bounces@canonical.com>) id 1gTRks-0001Qb-1a
	for qemu-devel@nongnu.org; Sun, 02 Dec 2018 08:25:51 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <bounces@canonical.com>) id 1gTRko-0006LW-TV
	for qemu-devel@nongnu.org; Sun, 02 Dec 2018 08:25:50 -0500
Received: from indium.canonical.com ([91.189.90.7]:60584)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <bounces@canonical.com>)
	id 1gTRko-0006Kp-Nn
	for qemu-devel@nongnu.org; Sun, 02 Dec 2018 08:25:46 -0500
Received: from loganberry.canonical.com ([91.189.90.37])
	by indium.canonical.com with esmtp (Exim 4.86_2 #2 (Debian))
	id 1gTRkl-0000p1-NJ
	for <qemu-devel@nongnu.org>; Sun, 02 Dec 2018 13:25:43 +0000
Received: from loganberry.canonical.com (localhost [127.0.0.1])
	by loganberry.canonical.com (Postfix) with ESMTP id 204E82E80D3
	for <qemu-devel@nongnu.org>; Sun,  2 Dec 2018 13:25:43 +0000 (UTC)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Date: Sun, 02 Dec 2018 13:15:52 -0000
From: Vincent Hamp <1806243@bugs.launchpad.net>
To: qemu-devel@nongnu.org
X-Launchpad-Notification-Type: bug
X-Launchpad-Bug: product=qemu; status=New; importance=Undecided; assignee=None;
X-Launchpad-Bug-Tags: arm cortexm
X-Launchpad-Bug-Information-Type: Public
X-Launchpad-Bug-Private: no
X-Launchpad-Bug-Security-Vulnerability: no
X-Launchpad-Bug-Commenters: higaski
X-Launchpad-Bug-Reporter: Vincent Hamp (higaski)
X-Launchpad-Bug-Modifier: Vincent Hamp (higaski)
Message-Id: <154375655274.15827.14642274888173069615.malonedeb@gac.canonical.com>
X-Launchpad-Message-Rationale: Subscriber (QEMU) @qemu-devel-ml
X-Launchpad-Message-For: qemu-devel-ml
Precedence: bulk
X-Generated-By: Launchpad (canonical.com); Revision="18826";
	Instance="launchpad-lazr.conf"
X-Launchpad-Hash: f800b079092ad39a029bd8d9455d073031a1538e
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 91.189.90.7
Subject: [Qemu-devel] [Bug 1806243] [NEW] ARM conditional branch after
 if-then instruction not working
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Reply-To: Bug 1806243 <1806243@bugs.launchpad.net>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Public bug reported:

Hello

There seems to be an issue with QEMU when debugging if-then condition
blocks from the thumb2 instruction set. The following snippet runs fine
during normal execution, but keeps hanging at the conditional branch
when debugging. The jump at the branch should only be executed as long
as $r0 is lower than $r1. Problem is that once both are equal, the
execution is not continued past the branch and the program counter never
gets popped.

2000407a:   push    {lr}
2000407c:   movs    r0, r6
2000407e:   ldmia   r7!, {r1, r6}
20004080:   push    {r0, r1}
20004082:   str.w   r6, [r7, #-4]!
20004086:   ldr     r6, [sp, #0]
20004088:   pop     {r0, r1}
2000408a:   adds    r0, #1
2000408c:   cmp     r0, r1
2000408e:   itt     lt
20004090:   pushlt  {r0, r1}
20004092:   blt.w   0x20004082      ; unpredictable <IT:lt>  // <-- GDB han=
gs here
20004096:   pop     {pc}

I have tried to reproduce the problem with inline assembly but for some
reason the following example just worked:

void f() {
  static uint8_t stack[256]{};
  stack[255] =3D 4;

  asm volatile("\n\t"
               "push    {lr}"
               "\n\t"

               // pre-conditions
               "movs    r7, %[stack]"
               "\n\t"
               "movs    r6, #1"
               "\n\t"

               "movs    r0, r6"
               "\n\t"
               "ldmia   r7!, {r1, r6}"
               "\n\t"
               "push    {r0, r1}"
               "\n\t"
               "1:"
               "\n\t"
               "str.w   r6, [r7, #-4]!"
               "\n\t"
               "ldr     r6, [sp, #0]"
               "\n\t"
               "pop     {r0, r1}"
               "\n\t"
               "adds    r0, #1"
               "\n\t"
               "cmp     r0, r1"
               "\n\t"
               "itt     lt"
               "\n\t"
               "pushlt  {r0, r1}"
               "\n\t"

               // Original instruction
               //"blt.w   0x20004082"  //   ; unpredictable <IT:lt>

               // Trying to fake it
               "blt.w   1b"
               "\n\t"

               "pop     {pc}"
               "\n\t"
               :
               : [stack] "r"(&stack[255]));
}

The only real major difference I see to the other code snipped is that
the inline assembly is running from flash memory where as the original
code runs in ram? Maybe that's a clue somehow?

Quickly reading through already reported ARM bugs I think this might be rel=
ated:
https://bugs.launchpad.net/qemu/+bug/1364501
At least the symptoms sound identical.


The versions I'm running are:
QEMU 3.0.0
arm-none-eabi-gdb 8.2

I've also captured some trace output for single stepping from the pushlt
to the blt.w instruction with the trace arguments unimp, guest_errors,
op, int, exec.

** Affects: qemu
     Importance: Undecided
         Status: New


** Tags: arm cortexm

** Attachment added: "QEMU trace output"
   https://bugs.launchpad.net/bugs/1806243/+attachment/5218134/+files/qemu_=
trace_output.txt

-- =

You received this bug notification because you are a member of qemu-
devel-ml, which is subscribed to QEMU.
https://bugs.launchpad.net/bugs/1806243

Title:
  ARM conditional branch after if-then instruction not working

Status in QEMU:
  New

Bug description:
  Hello

  There seems to be an issue with QEMU when debugging if-then condition
  blocks from the thumb2 instruction set. The following snippet runs
  fine during normal execution, but keeps hanging at the conditional
  branch when debugging. The jump at the branch should only be executed
  as long as $r0 is lower than $r1. Problem is that once both are equal,
  the execution is not continued past the branch and the program counter
  never gets popped.

  2000407a:   push    {lr}
  2000407c:   movs    r0, r6
  2000407e:   ldmia   r7!, {r1, r6}
  20004080:   push    {r0, r1}
  20004082:   str.w   r6, [r7, #-4]!
  20004086:   ldr     r6, [sp, #0]
  20004088:   pop     {r0, r1}
  2000408a:   adds    r0, #1
  2000408c:   cmp     r0, r1
  2000408e:   itt     lt
  20004090:   pushlt  {r0, r1}
  20004092:   blt.w   0x20004082      ; unpredictable <IT:lt>  // <-- GDB h=
angs here
  20004096:   pop     {pc}

  I have tried to reproduce the problem with inline assembly but for
  some reason the following example just worked:

  void f() {
    static uint8_t stack[256]{};
    stack[255] =3D 4;

    asm volatile("\n\t"
                 "push    {lr}"
                 "\n\t"

                 // pre-conditions
                 "movs    r7, %[stack]"
                 "\n\t"
                 "movs    r6, #1"
                 "\n\t"

                 "movs    r0, r6"
                 "\n\t"
                 "ldmia   r7!, {r1, r6}"
                 "\n\t"
                 "push    {r0, r1}"
                 "\n\t"
                 "1:"
                 "\n\t"
                 "str.w   r6, [r7, #-4]!"
                 "\n\t"
                 "ldr     r6, [sp, #0]"
                 "\n\t"
                 "pop     {r0, r1}"
                 "\n\t"
                 "adds    r0, #1"
                 "\n\t"
                 "cmp     r0, r1"
                 "\n\t"
                 "itt     lt"
                 "\n\t"
                 "pushlt  {r0, r1}"
                 "\n\t"

                 // Original instruction
                 //"blt.w   0x20004082"  //   ; unpredictable <IT:lt>

                 // Trying to fake it
                 "blt.w   1b"
                 "\n\t"

                 "pop     {pc}"
                 "\n\t"
                 :
                 : [stack] "r"(&stack[255]));
  }

  The only real major difference I see to the other code snipped is that
  the inline assembly is running from flash memory where as the original
  code runs in ram? Maybe that's a clue somehow?

  Quickly reading through already reported ARM bugs I think this might be r=
elated:
  https://bugs.launchpad.net/qemu/+bug/1364501
  At least the symptoms sound identical.

  =

  The versions I'm running are:
  QEMU 3.0.0
  arm-none-eabi-gdb 8.2

  I've also captured some trace output for single stepping from the
  pushlt to the blt.w instruction with the trace arguments unimp,
  guest_errors, op, int, exec.

To manage notifications about this bug go to:
https://bugs.launchpad.net/qemu/+bug/1806243/+subscriptions

