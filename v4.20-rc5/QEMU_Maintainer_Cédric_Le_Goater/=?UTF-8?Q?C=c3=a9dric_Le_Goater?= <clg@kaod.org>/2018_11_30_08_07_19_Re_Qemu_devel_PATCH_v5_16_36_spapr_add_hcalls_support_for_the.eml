Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 16:09:39 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id D97F8580460
	for <like.xu@linux.intel.com>; Fri, 30 Nov 2018 00:08:12 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga003-1.jf.intel.com with ESMTP; 30 Nov 2018 00:08:12 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3Ak0Xkuh10ArZOfqMwsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?sesWK/zxwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJfUMZfVyJPAY2y?=
 =?us-ascii?q?YIUAAOUDIelWoJTzp0MMoBW8CgSgGe3ixiNWiX/txqA6z/0hHBva0AA8Ed8DsH?=
 =?us-ascii?q?LZp8j1OqcIVuC1ybHFwCvZaPxLwzf96ZTHfQgnr/6SRb1+cM3RxlMzFwzblFWb?=
 =?us-ascii?q?tIvoMC+R1uQCqGWb7PBvVeWyhGI9rAFxuDevy94qh4LUiIwVzVXE+j94wIYzPd?=
 =?us-ascii?q?C3Vkh7bsOlEJRKsSGVKZB2Qtg4T2FuvyY3zKANt52jfCUS1pgr2x3SZ+aaf4SV?=
 =?us-ascii?q?4R/vTvidLDl4iX5/Zb6yhQ6+/Ey8xuHmVcS51ExGojdBn9TNrHwBygHf5tSBR/?=
 =?us-ascii?q?Bg5EmuwyyP2BrW6uxcIUA7i67bK5k5z740l5oTqljDHjTslEX5iq+Wa18o+u+y?=
 =?us-ascii?q?6+Toernmp5mcOJFoigzmLKgihs+yDf4lPgQTXGWX4/qw2bPj8EHjXblHjOU6kq?=
 =?us-ascii?q?zDv5DbIcQbqLS5AwhQ0os78hawETKm0MkBkXYaMl1FZgyIj4zwN17VJ/D4EPG/?=
 =?us-ascii?q?jEiynzdwwPzGOrzhApbTIXTZn7bhYK5w60pdyAo10NBe6IhYCrAHIPLvREDxsM?=
 =?us-ascii?q?bUAQM+Mwyx2OvnDtJ91oURWWKJH6+VKqTSsUWH5u43OemDeJcVuCrhK/gi//Pu?=
 =?us-ascii?q?iX45mVwDcqWz0poXdWu1HvBnI0WffHrtjc0NEWYMvgoiUuPqjEeOXiJUZ3a3DO?=
 =?us-ascii?q?oB4ComAtemEZvbXdLqx7iAxzugWJtRYG9AFxaLC3ivcoyFX/IFbmWVOtNglTof?=
 =?us-ascii?q?EqGsTpJk2RywuQup9rx8M+CB/yQZsY7khsF44vCWmRws+DgxFcmEzmyWU0lymW?=
 =?us-ascii?q?UHQSJw27pw9ldgwFWO2rQtnvpDCNZI7OlIWAppCZmJ4+VkCty6dQPLZdCPAAKq?=
 =?us-ascii?q?S8unDRk+T9gqxNlIb1x6A9+vhwqF3ibsCqJDxJKRA5lh2SPQxXn6EOJw/FnB3b?=
 =?us-ascii?q?UslRFySc9AHW6vgaI58BLcUd2a236FnrqnIPxPlBXG832OmC/X5BlV?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AIAACN7wBchxHrdtBiGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUQYBAQELAQGBLyqBWl6EW4c2X4spgWAIJXyWShSBWBsYFIRAgzQiNAk?=
 =?us-ascii?q?NAQMBAQEBAQECARMBAQEKCwkIGw4vQgEOAYFkBQIDGgEGglsBAQEBAgEBAkMKK?=
 =?us-ascii?q?QMCAQECBgEBChIGHAcDCAMBOQwOBg0GAgEBAYJRS4F6CAEDAagvhUCDYoENjBc?=
 =?us-ascii?q?RBoF/gREnDIIqNYQ7Cx8FF4VbAo83kG8JiAWJKwYYgVqPQphXgUaCDU0wCIMng?=
 =?us-ascii?q?icXEm0BAwSNF3GBBAOHE4QwR4F3AQE?=
X-IPAS-Result: =?us-ascii?q?A0AIAACN7wBchxHrdtBiGwEBAQEDAQEBBwMBAQGBUQYBAQE?=
 =?us-ascii?q?LAQGBLyqBWl6EW4c2X4spgWAIJXyWShSBWBsYFIRAgzQiNAkNAQMBAQEBAQECA?=
 =?us-ascii?q?RMBAQEKCwkIGw4vQgEOAYFkBQIDGgEGglsBAQEBAgEBAkMKKQMCAQECBgEBChI?=
 =?us-ascii?q?GHAcDCAMBOQwOBg0GAgEBAYJRS4F6CAEDAagvhUCDYoENjBcRBoF/gREnDIIqN?=
 =?us-ascii?q?YQ7Cx8FF4VbAo83kG8JiAWJKwYYgVqPQphXgUaCDU0wCIMngicXEm0BAwSNF3G?=
 =?us-ascii?q?BBAOHE4QwR4F3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,297,1539673200"; 
   d="scan'208";a="42212301"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 30 Nov 2018 00:08:01 -0800
Received: from localhost ([::1]:58575 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gSdqC-0000Il-NG
	for like.xu@linux.intel.com; Fri, 30 Nov 2018 03:08:00 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:38472)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <clg@kaod.org>) id 1gSdpw-0000EA-TY
	for qemu-devel@nongnu.org; Fri, 30 Nov 2018 03:07:46 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <clg@kaod.org>) id 1gSdpr-0000Pz-QP
	for qemu-devel@nongnu.org; Fri, 30 Nov 2018 03:07:44 -0500
Received: from 15.mo1.mail-out.ovh.net ([188.165.38.232]:36955)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <clg@kaod.org>) id 1gSdpl-0000LM-6j
	for qemu-devel@nongnu.org; Fri, 30 Nov 2018 03:07:35 -0500
Received: from player718.ha.ovh.net (unknown [10.109.146.143])
	by mo1.mail-out.ovh.net (Postfix) with ESMTP id 0CEC3144BA6
	for <qemu-devel@nongnu.org>; Fri, 30 Nov 2018 09:07:25 +0100 (CET)
Received: from kaod.org (lfbn-1-10605-110.w90-89.abo.wanadoo.fr
	[90.89.196.110]) (Authenticated sender: postmaster@kaod.org)
	by player718.ha.ovh.net (Postfix) with ESMTPSA id 578A84BCA84;
	Fri, 30 Nov 2018 08:07:21 +0000 (UTC)
To: David Gibson <david@gibson.dropbear.id.au>
References: <20181116105729.23240-1-clg@kaod.org>
	<20181116105729.23240-17-clg@kaod.org>
	<20181128042547.GZ2251@umbus.fritz.box>
	<a57f6b4b-414e-efe7-475d-e6cbb87f61a8@kaod.org>
	<20181129012355.GP2251@umbus.fritz.box>
	<898d49bd-e430-fd07-e1ee-10d5822e3757@kaod.org>
	<20181130012315.GH30479@umbus.fritz.box>
From: =?UTF-8?Q?C=c3=a9dric_Le_Goater?= <clg@kaod.org>
Message-ID: <35df014a-1876-1fa2-291c-880d15222a58@kaod.org>
Date: Fri, 30 Nov 2018 09:07:19 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
	Thunderbird/60.3.0
MIME-Version: 1.0
In-Reply-To: <20181130012315.GH30479@umbus.fritz.box>
Content-Type: text/plain; charset=windows-1252
Content-Language: en-US
X-Ovh-Tracer-Id: 17274963746867219313
X-VR-SPAMSTATE: OK
X-VR-SPAMSCORE: -100
X-VR-SPAMCAUSE: gggruggvucftvghtrhhoucdtuddrgedtkedruddvgedguddvvdcutefuodetggdotefrodftvfcurfhrohhfihhlvgemucfqggfjpdevjffgvefmvefgnecuuegrihhlohhuthemucehtddtnecusecvtfgvtghiphhivghnthhsucdlqddutddtmd
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 188.165.38.232
Subject: Re: [Qemu-devel] [PATCH v5 16/36] spapr: add hcalls support for the
 XIVE exploitation interrupt mode
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: qemu-ppc@nongnu.org, qemu-devel@nongnu.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On 11/30/18 2:23 AM, David Gibson wrote:
> On Thu, Nov 29, 2018 at 05:04:50PM +0100, C=E9dric Le Goater wrote:
>> On 11/29/18 2:23 AM, David Gibson wrote:
>>> On Wed, Nov 28, 2018 at 11:21:37PM +0100, C=E9dric Le Goater wrote:
>>>> On 11/28/18 5:25 AM, David Gibson wrote:
>>>>> On Fri, Nov 16, 2018 at 11:57:09AM +0100, C=E9dric Le Goater wrote:
>>>>>> The different XIVE virtualization structures (sources and event qu=
eues)
>>>>>> are configured with a set of Hypervisor calls :
>>>>>>
>>>>>>  - H_INT_GET_SOURCE_INFO
>>>>>>
>>>>>>    used to obtain the address of the MMIO page of the Event State
>>>>>>    Buffer (ESB) entry associated with the source.
>>>>>>
>>>>>>  - H_INT_SET_SOURCE_CONFIG
>>>>>>
>>>>>>    assigns a source to a "target".
>>>>>>
>>>>>>  - H_INT_GET_SOURCE_CONFIG
>>>>>>
>>>>>>    determines which "target" and "priority" is assigned to a sourc=
e
>>>>>>
>>>>>>  - H_INT_GET_QUEUE_INFO
>>>>>>
>>>>>>    returns the address of the notification management page associa=
ted
>>>>>>    with the specified "target" and "priority".
>>>>>>
>>>>>>  - H_INT_SET_QUEUE_CONFIG
>>>>>>
>>>>>>    sets or resets the event queue for a given "target" and "priori=
ty".
>>>>>>    It is also used to set the notification configuration associate=
d
>>>>>>    with the queue, only unconditional notification is supported fo=
r
>>>>>>    the moment. Reset is performed with a queue size of 0 and queue=
ing
>>>>>>    is disabled in that case.
>>>>>>
>>>>>>  - H_INT_GET_QUEUE_CONFIG
>>>>>>
>>>>>>    returns the queue settings for a given "target" and "priority".
>>>>>>
>>>>>>  - H_INT_RESET
>>>>>>
>>>>>>    resets all of the guest's internal interrupt structures to thei=
r
>>>>>>    initial state, losing all configuration set via the hcalls
>>>>>>    H_INT_SET_SOURCE_CONFIG and H_INT_SET_QUEUE_CONFIG.
>>>>>>
>>>>>>  - H_INT_SYNC
>>>>>>
>>>>>>    issue a synchronisation on a source to make sure all notificati=
ons
>>>>>>    have reached their queue.
>>>>>>
>>>>>> Calls that still need to be addressed :
>>>>>>
>>>>>>    H_INT_SET_OS_REPORTING_LINE
>>>>>>    H_INT_GET_OS_REPORTING_LINE
>>>>>>
>>>>>> See the code for more documentation on each hcall.
>>>>>>
>>>>>> Signed-off-by: C=E9dric Le Goater <clg@kaod.org>
>>>>>> ---
>>>>>>  include/hw/ppc/spapr.h      |  15 +-
>>>>>>  include/hw/ppc/spapr_xive.h |   6 +
>>>>>>  hw/intc/spapr_xive_hcall.c  | 892 +++++++++++++++++++++++++++++++=
+++++
>>>>>>  hw/ppc/spapr_irq.c          |   2 +
>>>>>>  hw/intc/Makefile.objs       |   2 +-
>>>>>>  5 files changed, 915 insertions(+), 2 deletions(-)
>>>>>>  create mode 100644 hw/intc/spapr_xive_hcall.c
>>>>>>
>>>>>> diff --git a/include/hw/ppc/spapr.h b/include/hw/ppc/spapr.h
>>>>>> index 1fbc2663e06c..8415faea7b82 100644
>>>>>> --- a/include/hw/ppc/spapr.h
>>>>>> +++ b/include/hw/ppc/spapr.h
>>>>>> @@ -452,7 +452,20 @@ struct sPAPRMachineState {
>>>>>>  #define H_INVALIDATE_PID        0x378
>>>>>>  #define H_REGISTER_PROC_TBL     0x37C
>>>>>>  #define H_SIGNAL_SYS_RESET      0x380
>>>>>> -#define MAX_HCALL_OPCODE        H_SIGNAL_SYS_RESET
>>>>>> +
>>>>>> +#define H_INT_GET_SOURCE_INFO   0x3A8
>>>>>> +#define H_INT_SET_SOURCE_CONFIG 0x3AC
>>>>>> +#define H_INT_GET_SOURCE_CONFIG 0x3B0
>>>>>> +#define H_INT_GET_QUEUE_INFO    0x3B4
>>>>>> +#define H_INT_SET_QUEUE_CONFIG  0x3B8
>>>>>> +#define H_INT_GET_QUEUE_CONFIG  0x3BC
>>>>>> +#define H_INT_SET_OS_REPORTING_LINE 0x3C0
>>>>>> +#define H_INT_GET_OS_REPORTING_LINE 0x3C4
>>>>>> +#define H_INT_ESB               0x3C8
>>>>>> +#define H_INT_SYNC              0x3CC
>>>>>> +#define H_INT_RESET             0x3D0
>>>>>> +
>>>>>> +#define MAX_HCALL_OPCODE        H_INT_RESET
>>>>>> =20
>>>>>>  /* The hcalls above are standardized in PAPR and implemented by p=
Hyp
>>>>>>   * as well.
>>>>>> diff --git a/include/hw/ppc/spapr_xive.h b/include/hw/ppc/spapr_xi=
ve.h
>>>>>> index 3f65b8f485fd..418511f3dc10 100644
>>>>>> --- a/include/hw/ppc/spapr_xive.h
>>>>>> +++ b/include/hw/ppc/spapr_xive.h
>>>>>> @@ -60,4 +60,10 @@ int spapr_xive_target_to_end(sPAPRXive *xive, u=
int32_t target, uint8_t prio,
>>>>>>  int spapr_xive_cpu_to_end(sPAPRXive *xive, PowerPCCPU *cpu, uint8=
_t prio,
>>>>>>                            uint8_t *out_end_blk, uint32_t *out_end=
_idx);
>>>>>> =20
>>>>>> +bool spapr_xive_priority_is_valid(uint8_t priority);
>>>>>
>>>>> AFAICT this could be a local function.
>>>>
>>>> the KVM model uses it also, when collecting state from the KVM devic=
e=20
>>>> to build the QEMU ENDT.
>>>>
>>>>>> +
>>>>>> +typedef struct sPAPRMachineState sPAPRMachineState;
>>>>>> +
>>>>>> +void spapr_xive_hcall_init(sPAPRMachineState *spapr);
>>>>>> +
>>>>>>  #endif /* PPC_SPAPR_XIVE_H */
>>>>>> diff --git a/hw/intc/spapr_xive_hcall.c b/hw/intc/spapr_xive_hcall=
.c
>>>>>> new file mode 100644
>>>>>> index 000000000000..52e4e23995f5
>>>>>> --- /dev/null
>>>>>> +++ b/hw/intc/spapr_xive_hcall.c
>>>>>> @@ -0,0 +1,892 @@
>>>>>> +/*
>>>>>> + * QEMU PowerPC sPAPR XIVE interrupt controller model
>>>>>> + *
>>>>>> + * Copyright (c) 2017-2018, IBM Corporation.
>>>>>> + *
>>>>>> + * This code is licensed under the GPL version 2 or later. See th=
e
>>>>>> + * COPYING file in the top-level directory.
>>>>>> + */
>>>>>> +
>>>>>> +#include "qemu/osdep.h"
>>>>>> +#include "qemu/log.h"
>>>>>> +#include "qapi/error.h"
>>>>>> +#include "cpu.h"
>>>>>> +#include "hw/ppc/fdt.h"
>>>>>> +#include "hw/ppc/spapr.h"
>>>>>> +#include "hw/ppc/spapr_xive.h"
>>>>>> +#include "hw/ppc/xive_regs.h"
>>>>>> +#include "monitor/monitor.h"
>>>>>
>>>>> Fwiw, I don't think it's particularly necessary to split the hcall
>>>>> handling out into a separate .c file.
>>>>
>>>> ok. let's move it to spapr_xive then ? It might help in reducing the=
=20
>>>> exported funtions.=20
>>>
>>> Yes, I think so.
>>>
>>>>>> +/*
>>>>>> + * OPAL uses the priority 7 EQ to automatically escalate interrup=
ts
>>>>>> + * for all other queues (DD2.X POWER9). So only priorities [0..6]=
 are
>>>>>> + * available for the guest.
>>>>>
>>>>> Referencing OPAL behaviour doesn't really make sense in the context=
 of
>>>>> PAPR. =20
>>>>
>>>> It's an OPAL constraint which pHyp doesn't have. So its a QEMU/KVM=20
>>>> constraint also.
>>>
>>> Right, I realized that a few patches on.  Maybe rephrase this to
>>>
>>>    Linux hosts under OPAL reserve priority 7 for their own escalation
>>>    interrupts.  So we only allow the guest to use priorities [0..6].
>>
>> OK.
>>
>>> The point here is that we're emphasizing that this is a design
>>> decision to make the host implementation easier, rather than a
>>> fundamental constraint.
>>>
>>>>> What I think you're getting at is that the PAPR spec only
>>>>> allows a PAPR guest to use priorities 0..6 (or at least it will if =
the
>>>>> XIVE updated spec ever gets published). =20
>>>>
>>>> It's not in the spec. the XIVE sPAPR spec should be frozen soon btw.=
=20
>>>> =20
>>>>> The fact that this allows the
>>>>> host use 7 for escalations is a design rationale=20
>>>>> but not really relevant to the guest device itself.=20
>>>>
>>>> The guest should be aware of which priorities are reserved for
>>>> the hypervisor though.
>>>>
>>>>>> + */
>>>>>> +bool spapr_xive_priority_is_valid(uint8_t priority)
>>>>>> +{
>>>>>> +    switch (priority) {
>>>>>> +    case 0 ... 6:
>>>>>> +        return true;
>>>>>> +    case 7: /* OPAL escalation queue */
>>>>>> +    default:
>>>>>> +        return false;
>>>>>> +    }
>>>>>> +}
>>>>>> +
>>>>>> +/*
>>>>>> + * The H_INT_GET_SOURCE_INFO hcall() is used to obtain the logica=
l
>>>>>> + * real address of the MMIO page through which the Event State Bu=
ffer
>>>>>> + * entry associated with the value of the "lisn" parameter is man=
aged.
>>>>>> + *
>>>>>> + * Parameters:
>>>>>> + * Input
>>>>>> + * - "flags"
>>>>>> + *       Bits 0-63 reserved
>>>>>> + * - "lisn" is per "interrupts", "interrupt-map", or
>>>>>> + *       "ibm,xive-lisn-ranges" properties, or as returned by the
>>>>>> + *       ibm,query-interrupt-source-number RTAS call, or as retur=
ned
>>>>>> + *       by the H_ALLOCATE_VAS_WINDOW hcall
>>>>>
>>>>> I've not heard of H_ALLOCATE_VAS_WINDOW.  Is that something we inte=
nd
>>>>> to implement in kvm/qemu, or is it only of interest for PowerVM?
>>>>
>>>> The hcall is part of the PAPR NX Interfaces and it returns interrupt
>>>> numbers. I don't know if any work has been done on the topic. =20
>>>
>>> What's a "PAPR NX"?
>>
>> A way for the PAPR guests to access the POWER coprocessors doing=20
>> compression and encryption. I really don't know much about this.
>=20
> Ah, ok.
>=20
> [snip]
>>>> I think not, but the specs are not very clear on that topic. I will
>>>> ask for clarification and use a -1 for now. We can not do loads on
>>>> the trigger page so it can not be used by the H_INT_ESB hcall.
>>>>
>>>>>
>>>>>> +    args[3] =3D TARGET_PAGE_SIZE;
>>>>>
>>>>> That seems wrong. =20
>>>>
>>>> This is utterly wrong. it should be a power of 2 number ... I got
>>>> it right under KVM though. I guess that ioremap() under Linux rounds=
=20
>>>> up the size to the page size in use, so, that's why it didn't blow
>>>> up under TCG.
>>>>
>>>>> TARGET_PAGE_SIZE is generally 4kiB, but won't these usually
>>>>> actually be 64kiB?
>>>>
>>>> yes. So what should I use to get a PAGE_SHIFT instead ?=20
>>>
>>> Erm, that gets a bit tricky, since qemu in a sense doesn't know the
>>> guest's page size.
>>>
>>> But.. don't you actually want the esb_shift here, not PAGE_SHIFT - it
>>> could matter for the 2 page * 64kiB variant, yes?
>>
>> Yes. we just want the page_shift of the ESB page, whether it's one or
>> two pages. The other registers inform the guest if there are one or=20
>> two ESB page in use.=20
>=20
> Ok, still sounds like you should base it on esb_shift, just adjust for
> the two page case.

yes.


>>>>>> +    }
>>>>>> +
>>>>>> +    switch (qsize) {
>>>>>> +    case 12:
>>>>>> +    case 16:
>>>>>> +    case 21:
>>>>>> +    case 24:
>>>>>> +        end.w3 =3D ((uint64_t)qpage) & 0xffffffff;
>>>>>
>>>>> It just occurred to me that I haven't been looking for this across =
any
>>>>> of these reviews.  Don't you need byteswaps when accessing these
>>>>> in-memory structures?
>>>>
>>>> yes this is done when some event data is enqueued in the EQ.
>>>
>>> I'm not talking about the data in the EQ itself, but the fields in th=
e
>>> END (and the NVT).
>>
>> XIVE is all BE.
>=20
> Yes... the qemu host might not be, which is why you need byteswaps.

ok. I understand.

> I realized eventually you have the swaps in your pnv get/set
> accessors. =20

Yes. because skiboot is BE, like the XIVE structures. =20

> I don't like that at all for a couple of reasons:
>=20
> 1) Although the END structure is made up of word-sized fields because
> that's convenient, the END really is made of a bunch of subfields of
> different sizes.  Knowing that it wouldn't be unreasonable for people
> to expect they can look into the XIVE by byte offsets;=20

These structures should be accessed with GETFIELD and SETFIELD macros
using the XIVE definitions in the xive_regs.h header file. I would want=20
to keep that common with skiboot  for sure.

Are you suggesting we should define each field of the XIVE structures=20
with C attributes ? That would be very unfortunate.=20
=20
> that will break
> if you're working with a copy that has already been byte-swapped on
> word-sized units.

I am not sure I understand the last sentence.=20

the code working with a copy would necessarily know that the structure=20
has been byteswapped and use correct offsets for the expected endianess.=20
no ? why would it break ? =20

> 2) At different points in the code you're storing both BE and
> native-endian data in the same struct.=20

on sPAPR, it's all native (which is a violation I agree). TIMA is BE.

> That's both confusing to
> someone reading the code (if they see that struct they don't know if
> it's byteswapped already) and also means you can't use sparse
> annotations to make sure you have it right.

XIVE structures are architected to be BE. That's immutable.

It's a not problem for skiboot which is BE. The PnvXIVE model for the=20
QEMU PowerNV machine reads these VSTs (Virtual Structure Tables) from=20
the guest RAM and byteswaps the structure before using it. I think
that's fine. Isn't it ?=20

It becomes a problem with the sPAPR model which is using the XIVE structu=
res=20
in native endianess and not BE anymore. But the guest OS never manipulate=
s=20
these structures, so under the hood, I think we are free to use them in=20
native and keep the common definitions.

Except that the event data entries in the OS EQs are BE. So the only plac=
e=20
where we convert is when an event data is enqueued.=20

What would you put in place if you think this is a too strong violation=20
of the architecture ? I am afraid of something too complex to manipulate
to be honest. May be we can drop the map/unmap access methods only keep=20
the very basic ones. =20

C.

