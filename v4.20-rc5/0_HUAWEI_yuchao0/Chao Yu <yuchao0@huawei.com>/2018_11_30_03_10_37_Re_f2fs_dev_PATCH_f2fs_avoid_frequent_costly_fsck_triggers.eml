Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 14:13:13 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 5579B580460;
	Thu, 29 Nov 2018 19:10:55 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 19:10:54 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AwBrlBBB8Pf9AXHmhWHpfUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7+o8SwAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95MWSJfDIOy?=
 =?us-ascii?q?b4gBAeQPMulXrYbyu1QArRqlBQm0Bu7i0SNIi33s0KEmz+gsHwPL0Qo9FNwOqn?=
 =?us-ascii?q?TUq9D1Ob8MXOC11qbIyijIYPFL2Tzg74XJcg0hru2MXb1qdsrd1VIiFwPYjlqK?=
 =?us-ascii?q?p43qITKV2v4RvGic6uptTOSigHMppQF2pzig3MYsio/Ri4IOzVDE6D95z5orKt?=
 =?us-ascii?q?22T057e9GkH4VKuyGcKYR2XsUvSHxrtiYi0rAKp4K3cSwQxJg6yRPTdeaLf5WL?=
 =?us-ascii?q?7x7/TuqcIDV1iGp4dL6jnRq+7Eatx+LmWsWqzlpGtDdJn93Mu3wV2BHe6tKLRu?=
 =?us-ascii?q?Vy80qlwzqDyR3f5v9eLU06i6bWLYMqzKQqmZoJq0vDGzf7mEXog6+ScUUp4vao?=
 =?us-ascii?q?6+v5bbX8vJOcNJF7ihv4MqswnsyzG+M4MhIBX2SD+OS80qPs/VHhTblUkvE7lr?=
 =?us-ascii?q?PVvI3UKMgFvKK1HgxY3po55xu+DTqqyNEYkmMGLFJBdhKHlY/pO1TWLfD8DPe/?=
 =?us-ascii?q?hUmskThyy/DFILLhGJPNIWbHkLv4erZ85UhcxxQpzd1E+ZJUBa8OIOjpVk/yqt?=
 =?us-ascii?q?PYFBk5PBKww+r9D9V9zIweVXqVAqCFKKPSrUOI5uU3LumIZY8VuyjyJ+Iq5v7z?=
 =?us-ascii?q?lnI5nV4dfa+03ZoYcny4H/JmI1mHbnromNsODWAKvg8mRuzwlFKCSSJTZ2q1X6?=
 =?us-ascii?q?8k5jE0EoOmDZvZSYCqmrCB3Dq7EYdQZmBJEV2MFXbod4OZW/YDci6SI8lhkiAa?=
 =?us-ascii?q?WrilUYMuyRautAriwbp9MuXU4jEYtY7k1NVt5e3Tkg89+SZ3D8Sa1WGNSWZ0k3?=
 =?us-ascii?q?gMRz832qB/vEN8xk2C0ah+n/xXC9hT6+lVXQc9MJ7W1/Z6BMzqWgLdYteJT06r?=
 =?us-ascii?q?Tc+9ATExSdIxwMUCY1xnFNWglR3D2yuqA7kIl72EHpA086Tc32TvKMZ50XrJyK?=
 =?us-ascii?q?4hj1w+SMtVKWKmnrJ/9xTUB4PRkEWWjaCqeb4Y3C7M7miDy2WOsVpcUA5xV6XF?=
 =?us-ascii?q?QH8ealHXrdT/+kPNUbuuBa47PQtGzM6IMrFKZcHxjVVaWPfjP8zTbH+rlGeuGx?=
 =?us-ascii?q?mE3LOMY5Dse2UGwirdDk8IkwQQ/XaDMQgzHSOho2PYDDxzGlPjeULs8e9iqHyl?=
 =?us-ascii?q?Sk841R2Fb0pk17Ct4B4ameScS+8P3rIDoCouti97HEij0N7MC9qPvQxhfL5Cbt?=
 =?us-ascii?q?M7+1pH0WPZtwpgPp2vNaxih1gecxhpsEPqzRl4FoJAkc0ypnMw0AVyMb6Y0E9G?=
 =?us-ascii?q?dz6AwZDwO7jXKm7u/BCva6/awE3e3MyR+qcV7PQ4qlPjvA6yG0om8nVn1cRV0n?=
 =?us-ascii?q?SG6pXLCgoSTYz+UkIt+xdmoLHaZzE355nI2n10Lam0rjjC1sozC+sh1BmhcMlQ?=
 =?us-ascii?q?MaOeGADpDs0VGtKhKOopm1iucBIJJ+RS9K8yP8O7ePqKwq+rPOB8nD24iWRL+p?=
 =?us-ascii?q?xy0kWJ9yBkUO7Hw44Fw+2E3guATzr9jEqhvtrrloxeZDASHnCwyS7rBINKYq1y?=
 =?us-ascii?q?fIALCXqhIsGtx9V+gYLtVGBc9FK5G1wG38qpcwKIb1PhxQ1QyVgXoXu/lCuizj?=
 =?us-ascii?q?x7jysmrrCC0yzJ2ejicgQIOnRKRGV7kVjjO4y0gM0EU0iyaAgpkgCo5UL7x6hd?=
 =?us-ascii?q?uaR+IHPfQUZOfyjqMW5iVrG8uaaFY85K8JkoqzlYUPygYVCGTb7wuxsb0yL5E2?=
 =?us-ascii?q?pe3jw7bCyqupPikhx+iWKdKmtzrXXDdcFxwxff+MLTRfpL0jUaQyl4jCHdBkKg?=
 =?us-ascii?q?MNmx4dWUi5DDv/i8V227TJ1TcirrzYSauCug/2JqAh6/n/G1mtL5Fwg3yiv719?=
 =?us-ascii?q?hsVSXVoxfweIjr16KmMe15eklkHkPz681/GotmiIs/mIkQ2WQGhpWS5XcGkX38?=
 =?us-ascii?q?MdJB1aL8bXoNQyUGw9rU4AjjxU1iIWiFx4P/VnWB3MRhY8O2bX8R2iI498pKEr?=
 =?us-ascii?q?ub7KRYnStppVq1tQHRbuJ8njsHyfsu9WQVg+cGuAc2yiWdA7YSHVRXPCD2lhSI?=
 =?us-ascii?q?6cy+o7tTZGq1bbew009+l8i7DL6eugFcRGr5epA6EC9178V/M0jD3Gf96476Y9?=
 =?us-ascii?q?nQccwctgePnBjelehVJ4k8lv4LhSphJGL8smcpy+89jRxyw566uJKLJHlq/KK8?=
 =?us-ascii?q?GhRYLCH6Z9sP+jHxiqZThtqW34eqHpl7GzQERp3oTe+zEDIJtPTqLAKOEDw6qn?=
 =?us-ascii?q?eGFrvTBw6f6EF6r33RF5CnLW2YJH4czd96XhmSOFRfgBwIXDU9hpM2DRqlxMvl?=
 =?us-ascii?q?cEdk/DwR4kP4pwBIyuJpMRn/T2jeqB2pajcyVJiQMh5W4hte6EfSNMyU9vhzED?=
 =?us-ascii?q?1A/p29sAyNLXSWZwZSAmEMREOEHErvPqW06dnD7uiYBfe+L/3UbrWVsuFeU/aI?=
 =?us-ascii?q?xZSy0opp5TqMN8OPPmV8AP0/wEZMQXd5G8HBkTUVVyMXjz7Nb9KcpBqk+ix3qd?=
 =?us-ascii?q?2/8O32WA3144uDEaBSMdJp+xC5mqqDM++QhCBkKTdXzJ8MxHnIyKQB014WkS1h?=
 =?us-ascii?q?az6tEbEYvy7XUK3QgrNXDwIcay5rNMtH8aM83gpOOc7akN/11aR4jvk6C1hbT1?=
 =?us-ascii?q?zhh9qpaNcOI2G8MlPHGUmKOK6HJT3N38H4f6e8RadMg+VTsh26oSybHFP7PjSf?=
 =?us-ascii?q?iznpUAiiPvtRjC6AJhxRpoG8fgxpCWjiV9/mbhy7MNlqjTw527E0h3XKNXICPj?=
 =?us-ascii?q?h4aU9CsrqQ7SZAiPVlB2NB9mZlLfWDmyuB8+nYK5MWveF3DShui+1a4Go1y71O?=
 =?us-ascii?q?4SFARfx1njbSr9F0r1GnlOmP1iRoUB5UpjlXg4KLuF1oOb/F+ZlYRXbE4BUN4H?=
 =?us-ascii?q?2QChsQodtlD9zvu6ZIxdnOlKL8MjFC893P8MsYBsjULt+HMXU7PRroHj7UEBUK?=
 =?us-ascii?q?TTqxOW7DgExdlaLaynrAlZg3rJekqZ0IRfcPT1w4EPwLDUJqRfQCPZ5oUzJimr?=
 =?us-ascii?q?me2opAx3OzoxTMR415v5WPAvCbDPriNTWxjrReYRYMh7TiItJAGJf83hlJalB9?=
 =?us-ascii?q?1LXXUx7BQNtNqyo5Rg8pqVpA8T51SWhliBGtUR+k/HJGTa38pRUxkAYrJL11rD?=
 =?us-ascii?q?o=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A4AACEqQBch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUwUBAQsBgVqBDwN/FBMKg2+UIIFgLRSXMIFzLAsIAYd0IjYHDQEDAQEBAQE?=
 =?us-ascii?q?BAgETAQEBCA0JCCkjDII2JAGCYQEBAQECAQEBASAERwsFAQkBAQoRAwECAQICJ?=
 =?us-ascii?q?gICAyQBHwgIBgEMAQUCAQEBgxwBgXkIBQqoO3wzhUCEbAWBC4sLghaBOIJrgx4?=
 =?us-ascii?q?BBIEnHAeDGIJXAoEqAYdchmMzhS2KWQYDDYZxgy2Ca4QWBhiBWogOhzSIeIEDg?=
 =?us-ascii?q?12EEYgyB4F/cFCBHoFOgicXfwEJhxqGBzIBATGBBAEBAQ6KXgElgQiBHwEB?=
X-IPAS-Result: =?us-ascii?q?A0A4AACEqQBch0O0hNFkHAEBAQQBAQcEAQGBUwUBAQsBgVq?=
 =?us-ascii?q?BDwN/FBMKg2+UIIFgLRSXMIFzLAsIAYd0IjYHDQEDAQEBAQEBAgETAQEBCA0JC?=
 =?us-ascii?q?CkjDII2JAGCYQEBAQECAQEBASAERwsFAQkBAQoRAwECAQICJgICAyQBHwgIBgE?=
 =?us-ascii?q?MAQUCAQEBgxwBgXkIBQqoO3wzhUCEbAWBC4sLghaBOIJrgx4BBIEnHAeDGIJXA?=
 =?us-ascii?q?oEqAYdchmMzhS2KWQYDDYZxgy2Ca4QWBhiBWogOhzSIeIEDg12EEYgyB4F/cFC?=
 =?us-ascii?q?BHoFOgicXfwEJhxqGBzIBATGBBAEBAQ6KXgElgQiBHwEB?=
X-IronPort-AV: E=Sophos;i="5.56,297,1539673200"; 
   d="scan'208";a="54965439"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 19:10:53 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727262AbeK3OSg (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 30 Nov 2018 09:18:36 -0500
Received: from szxga06-in.huawei.com ([45.249.212.32]:38416 "EHLO huawei.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726386AbeK3OSg (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 30 Nov 2018 09:18:36 -0500
Received: from DGGEMS402-HUB.china.huawei.com (unknown [172.30.72.58])
        by Forcepoint Email with ESMTP id 3F7C9AD00A3A5;
        Fri, 30 Nov 2018 11:10:47 +0800 (CST)
Received: from [127.0.0.1] (10.134.22.195) by DGGEMS402-HUB.china.huawei.com
 (10.3.19.202) with Microsoft SMTP Server id 14.3.408.0; Fri, 30 Nov 2018
 11:10:39 +0800
Subject: Re: [f2fs-dev] [PATCH] f2fs: avoid frequent costly fsck triggers
To: Sheng Yong <shengyong1@huawei.com>,
        Jaegeuk Kim <jaegeuk@kernel.org>
CC: <linux-kernel@vger.kernel.org>,
        <linux-f2fs-devel@lists.sourceforge.net>
References: <20181128073125.39102-1-jaegeuk@kernel.org>
 <724de929-6ee1-3ad7-cfa7-6e80d4e7a3da@huawei.com>
 <20181128081035.GA41969@jaegeuk-macbookpro.roam.corp.google.com>
 <4f43735a-d01f-f194-18ce-4fbbe10ad8d4@huawei.com>
 <20181128174805.GB41969@jaegeuk-macbookpro.roam.corp.google.com>
 <234cabcd-a1c1-9fb6-13aa-94fe681731dc@huawei.com>
From: Chao Yu <yuchao0@huawei.com>
Message-ID: <afaee7a9-162a-b157-f0bc-de366cbb7b53@huawei.com>
Date: Fri, 30 Nov 2018 11:10:37 +0800
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:52.0) Gecko/20100101
 Thunderbird/52.9.1
MIME-Version: 1.0
In-Reply-To: <234cabcd-a1c1-9fb6-13aa-94fe681731dc@huawei.com>
Content-Type: text/plain; charset="utf-8"
Content-Language: en-US
Content-Transfer-Encoding: 7bit
X-Originating-IP: [10.134.22.195]
X-CFilter-Loop: Reflected
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 2018/11/30 10:35, Sheng Yong wrote:
> Hi, Jaegeuk and Chao,
> 
> On 2018/11/29 1:48, Jaegeuk Kim wrote:
>> On 11/28, Chao Yu wrote:
>>> On 2018/11/28 16:10, Jaegeuk Kim wrote:
>>>> On 11/28, Chao Yu wrote:
>>>>> Hi Jaeguek,
>>>>>
>>>>> On 2018/11/28 15:31, Jaegeuk Kim wrote:
>>>>>> If we want to re-enable nat_bits, we rely on fsck which requires full scan
>>>>>> of directory tree. Let's do that by regular fsck or unclean shutdown.
>>>>>
>>>>> Reviewed-by: Chao Yu <yuchao0@huawei.com>
>>>>>
>>>>> BTW, I have patch made some month ago...
>>>>>
>>>>> In order to detect nat_bits disabling, could we introduce one more flag for
>>>>> fsck?
>>>>
>>>> Do we have a way to enable nat_bits very quickly in fsck?
>>>
>>> For image with SBI_NATBIT_NEED_REPAIR flag, can we just check metadata and
>>> rebuild nat_bits based on verified nat blocks/journals?
>>
>> I'm leaning to rely on full scan to enable nat_bits again. We may add a mount
>> count or timer to trigger fsck regularly?
> 
> I'm afraid regular full fsck would give us bad experience of booting time.
> FYI, 256GB storage, which is filled with small files, costs almost 10 min
> to do a full fsck. And it seems larger capacity storages are on the way.

Agreed.

> So, is it worth doing that only to enable nat_bits (plus checking f2fs
> consistent not that necessarily)?

In android environment, I think it may be too expensive for adding nat_bits
by triggering full scan by fsck during boot time.

If we can update all nat bitmap in free time after mount, maybe we can
rebuild nat_bits based on full nat bitmap during umount, which can be
cheaper than rebuiding in userspace.

Thanks,

> 
> Thanks
>>
>>>
>>> Thanks,
>>>
>>>>
>>>>>
>>>>> >From 86e8bdb2faeec904944bb6621073f4f7de51cc2d Mon Sep 17 00:00:00 2001
>>>>> From: Chao Yu <yuchao0@huawei.com>
>>>>> Date: Sun, 9 Sep 2018 05:40:20 +0800
>>>>> Subject: [PATCH] f2fs: set specified flag after invalidating nat_bits
>>>>>
>>>>> Signed-off-by: Chao Yu <yuchao0@huawei.com>
>>>>> ---
>>>>>   fs/f2fs/checkpoint.c    | 12 +++++++++++-
>>>>>   fs/f2fs/f2fs.h          |  3 ++-
>>>>>   fs/f2fs/node.c          |  3 +++
>>>>>   include/linux/f2fs_fs.h |  1 +
>>>>>   4 files changed, 17 insertions(+), 2 deletions(-)
>>>>>
>>>>> diff --git a/fs/f2fs/checkpoint.c b/fs/f2fs/checkpoint.c
>>>>> index 7e17bb3dfcb1..f7fb14e0f5f9 100644
>>>>> --- a/fs/f2fs/checkpoint.c
>>>>> +++ b/fs/f2fs/checkpoint.c
>>>>> @@ -1226,13 +1226,16 @@ static void update_ckpt_flags(struct f2fs_sb_info
>>>>> *sbi, struct cp_control *cpc)
>>>>>   	unsigned long orphan_num = sbi->im[ORPHAN_INO].ino_num;
>>>>>   	struct f2fs_checkpoint *ckpt = F2FS_CKPT(sbi);
>>>>>   	unsigned long flags;
>>>>> +	bool disable_natbits = false;
>>>>>
>>>>>   	spin_lock_irqsave(&sbi->cp_lock, flags);
>>>>>
>>>>>   	if ((cpc->reason & CP_UMOUNT) &&
>>>>>   			le32_to_cpu(ckpt->cp_pack_total_block_count) >
>>>>> -			sbi->blocks_per_seg - NM_I(sbi)->nat_bits_blocks)
>>>>> +			sbi->blocks_per_seg - NM_I(sbi)->nat_bits_blocks) {
>>>>>   		disable_nat_bits(sbi, false);
>>>>> +		disable_natbits = true;
>>>>> +	}
>>>>>
>>>>>   	if (cpc->reason & CP_TRIMMED)
>>>>>   		__set_ckpt_flags(ckpt, CP_TRIMMED_FLAG);
>>>>> @@ -1270,11 +1273,18 @@ static void update_ckpt_flags(struct f2fs_sb_info
>>>>> *sbi, struct cp_control *cpc)
>>>>>   	if (is_sbi_flag_set(sbi, SBI_QUOTA_NEED_REPAIR))
>>>>>   		__set_ckpt_flags(ckpt, CP_QUOTA_NEED_FSCK_FLAG);
>>>>>
>>>>> +	if (is_sbi_flag_set(sbi, SBI_NATBIT_NEED_REPAIR))
>>>>> +		__set_ckpt_flags(ckpt, CP_NATBIT_NEED_FSCK_FLAG);
>>>>> +
>>>>>   	/* set this flag to activate crc|cp_ver for recovery */
>>>>>   	__set_ckpt_flags(ckpt, CP_CRC_RECOVERY_FLAG);
>>>>>   	__clear_ckpt_flags(ckpt, CP_NOCRC_RECOVERY_FLAG);
>>>>>
>>>>>   	spin_unlock_irqrestore(&sbi->cp_lock, flags);
>>>>> +
>>>>> +	if (disable_natbits)
>>>>> +		f2fs_msg(sbi->sb, KERN_NOTICE,
>>>>> +			"No enough space in CP area, disable nat_bits.");
>>>>>   }
>>>>>
>>>>>   static void commit_checkpoint(struct f2fs_sb_info *sbi,
>>>>> diff --git a/fs/f2fs/f2fs.h b/fs/f2fs/f2fs.h
>>>>> index f0cedbe0c536..b55341c269b2 100644
>>>>> --- a/fs/f2fs/f2fs.h
>>>>> +++ b/fs/f2fs/f2fs.h
>>>>> @@ -1107,6 +1107,7 @@ enum {
>>>>>   	SBI_QUOTA_NEED_FLUSH,			/* need to flush quota info in CP */
>>>>>   	SBI_QUOTA_SKIP_FLUSH,			/* skip flushing quota in current CP */
>>>>>   	SBI_QUOTA_NEED_REPAIR,			/* quota file may be corrupted */
>>>>> +	SBI_NATBIT_NEED_REPAIR,			/* nat full/empty bitmaps need repair */
>>>>>   };
>>>>>
>>>>>   enum {
>>>>> @@ -1628,7 +1629,7 @@ static inline void disable_nat_bits(struct
>>>>> f2fs_sb_info *sbi, bool lock)
>>>>>   {
>>>>>   	unsigned long flags;
>>>>>
>>>>> -	set_sbi_flag(sbi, SBI_NEED_FSCK);
>>>>> +	set_sbi_flag(sbi, SBI_NATBIT_NEED_REPAIR);
>>>>>
>>>>>   	if (lock)
>>>>>   		spin_lock_irqsave(&sbi->cp_lock, flags);
>>>>> diff --git a/fs/f2fs/node.c b/fs/f2fs/node.c
>>>>> index e57add1e8966..0c6f8312a087 100644
>>>>> --- a/fs/f2fs/node.c
>>>>> +++ b/fs/f2fs/node.c
>>>>> @@ -2902,6 +2902,9 @@ static int __get_nat_bitmaps(struct f2fs_sb_info *sbi)
>>>>>
>>>>>   	cp_ver |= (cur_cp_crc(ckpt) << 32);
>>>>>   	if (cpu_to_le64(cp_ver) != *(__le64 *)nm_i->nat_bits) {
>>>>> +		f2fs_msg(sbi->sb, KERN_NOTICE,
>>>>> +			"Disable nat_bits due to incorrect cp_ver (%llu, %llu)",
>>>>> +			cp_ver, le64_to_cpu(*(__le64 *)nm_i->nat_bits));
>>>>>   		disable_nat_bits(sbi, true);
>>>>>   		return 0;
>>>>>   	}
>>>>> diff --git a/include/linux/f2fs_fs.h b/include/linux/f2fs_fs.h
>>>>> index 7196653833fa..1f3ae1504573 100644
>>>>> --- a/include/linux/f2fs_fs.h
>>>>> +++ b/include/linux/f2fs_fs.h
>>>>> @@ -117,6 +117,7 @@ struct f2fs_super_block {
>>>>>   /*
>>>>>    * For checkpoint
>>>>>    */
>>>>> +#define CP_NATBIT_NEED_FSCK_FLAG	0X00002000
>>>>>   #define CP_DISABLED_FLAG		0x00001000
>>>>>   #define CP_QUOTA_NEED_FSCK_FLAG		0x00000800
>>>>>   #define CP_LARGE_NAT_BITMAP_FLAG	0x00000400
>>>>> -- 
>>>>> 2.18.0.rc1
>>>>>
>>>>>
>>>>>
>>>>>>
>>>>>> Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
>>>>>> ---
>>>>>>   fs/f2fs/f2fs.h | 6 +++++-
>>>>>>   1 file changed, 5 insertions(+), 1 deletion(-)
>>>>>>
>>>>>> diff --git a/fs/f2fs/f2fs.h b/fs/f2fs/f2fs.h
>>>>>> index c28a9d1cb278..aa500239baf2 100644
>>>>>> --- a/fs/f2fs/f2fs.h
>>>>>> +++ b/fs/f2fs/f2fs.h
>>>>>> @@ -1621,7 +1621,11 @@ static inline void disable_nat_bits(struct f2fs_sb_info *sbi, bool lock)
>>>>>>   {
>>>>>>   	unsigned long flags;
>>>>>>   
>>>>>> -	set_sbi_flag(sbi, SBI_NEED_FSCK);
>>>>>> +	/*
>>>>>> +	 * In order to re-enable nat_bits we need to call fsck.f2fs by
>>>>>> +	 * set_sbi_flag(sbi, SBI_NEED_FSCK). But it may give huge cost,
>>>>>> +	 * so let's rely on regular fsck or unclean shutdown.
>>>>>> +	 */
>>>>>>   
>>>>>>   	if (lock)
>>>>>>   		spin_lock_irqsave(&sbi->cp_lock, flags);
>>>>>>
>>>>
>>>> .
>>>>
>>
>>
>> _______________________________________________
>> Linux-f2fs-devel mailing list
>> Linux-f2fs-devel@lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/linux-f2fs-devel
>>
>> .
>>
> 
> 
> .
> 

