Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 29 Nov 2018 08:39:45 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 18E7C5802E4;
	Wed, 28 Nov 2018 10:18:38 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 28 Nov 2018 10:18:37 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AWFd4CBf5lEbMw0FiKXUKU5uslGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc6+ZheN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4qF2QxHqlS?=
 =?us-ascii?q?gHLSY0/m/XhMJukaxVoxyhqBNjzIHJYo6aOuF+frvfcN4BWWpNQtxcWzBdDo6m?=
 =?us-ascii?q?cYcCCfcKM+ZCr4n6olsDtQWzChOwBOz1zj9Ih3n21rA93es7CwHG3QogEMgVsH?=
 =?us-ascii?q?/Jq9j6KL0dUfyvw6nMzDXDaela2TLn54jScxAhp+uDXalrfMXL00kvEhnJgUmX?=
 =?us-ascii?q?qYzgJj6Y0PkGvWuD7+d4S+6jl2oqpxtsrjWh2MsgkJTFi4EJxlze9Ch0wp45Kc?=
 =?us-ascii?q?OlREN5e9KoDZRduz2AO4drXs8uXntktSQmxrAApJW1ZjIFyI49yB7ac/GHc5aH?=
 =?us-ascii?q?4hbkVOuJPzd4i2xqeKilixax70eg0Ov8Wdew0FpQqSpFiNbMumgM1xzV9MeHVu?=
 =?us-ascii?q?Nw8lm91TuLzQzf9+9JLV4umabGKJMt3qQ8m5sRvEjbGy/5gkT2jKuYdkU+/eio?=
 =?us-ascii?q?7vzqYrHnpp+aKo91hRjyMqcwlcylB+Q3LAwOU3Gc+eWy0r3s41f5Ta5Ujv05jK?=
 =?us-ascii?q?bZqorWJccFqa6jBQ9azIIj5wy4Dze839QUhWMHI05deBKbk4jpPEnDIPT5Dfe8?=
 =?us-ascii?q?nVugijhqx+3dM73lA5XNKGXDkbj7cbZ87U5c1BQ8zdRF651IDbEBJer5WlXtu9?=
 =?us-ascii?q?zAEh85Lwu0zv7nCNpn14MeRXiAAqiDPKPSrF+H/OQvI+aXaY8RuTb9LeUl5vH0?=
 =?us-ascii?q?gX84n18dYbem3Z8NZH+kGfRmJl2TYWDwjdcZDWcKog0+QfToiF2FTzFffXWyX6?=
 =?us-ascii?q?U65jE9D4KrFoPDRoGrgLyc0ya3BJxWZmZaCl+SFXfkbZmLW/AJaCiKOM9ujiQE?=
 =?us-ascii?q?VaS9S48mzRyhrhT6y7pgLurX4CEYr4js1Npu6u3XlBEy8yF0DsuH32GMSWF0gn?=
 =?us-ascii?q?0HRzss0K9jpkx9z0+J0bJkjPxACdxT+/RJXx85NZHGyex2EdTyWgPbcdePR1ar?=
 =?us-ascii?q?WdGmATA3TtIszN4CeUd9G9O+jh/d2yqmGaMal7uOBJYs6KLTw2DxJ9phy3bBzK?=
 =?us-ascii?q?QukkMpQtVROmG8hq5w7Q7TB5XXnEWfkKqqcacc3CvJ9GqYyWqOvUdYUBN/UKnf?=
 =?us-ascii?q?XHAfYFfWosr95k/YU7CuDrEnOBNbycGeMqtKdsHpjVJeSfj+ItvefXy+l32wBR?=
 =?us-ascii?q?mSwLOMd5Tle2MG0SXZCUgElR0T/HmcOQg/ACehv3zRDDh0GV3zZEPs9PF0qGmn?=
 =?us-ascii?q?QU8s0wGKc0ph2qKp+h4UgPycTO8T3rIEuSs7tzV4BlG938jSC9qBoQphc75RYd?=
 =?us-ascii?q?c84FdByGLYuBZxPp2mL6B+mFEedx57sF/p1xVyEo9Ai9QlrGs2zApuLqKVyElO?=
 =?us-ascii?q?dzeG0pH/JLLWKnP+8wuya6HLwF7e1tWW+qAR6Pkjr1XjvQepFlct8nl90tlV1W?=
 =?us-ascii?q?ec6YvODAYITZ3xVUM3/QBgp77Geik9+5/U1Xp0PKi0rz/Owc4mCPEkyxagZdhf?=
 =?us-ascii?q?NqyEGRT2E80bAciuNeMrl0KobhICIOBd6qo0M9m6ePuB3a6hJPxgky6+jWRb/I?=
 =?us-ascii?q?B91VqB9zB9SuHUxZkF2eyX3gydWzf6klihqMH3lZlYaj4IGmqw1DbrBJRWZq10?=
 =?us-ascii?q?ZosLDWauI8uqxtRxnZLtWnhY9EK9CFMCwsOmZR2Sb1nl1w1KyUsXuWCnmTe/zz?=
 =?us-ascii?q?FskzApr7CT3SzUz+T5aRoHPHVGRG1jjVfqPIi1gMoWXEmubwg1ihSl4Vz2yLRc?=
 =?us-ascii?q?pKR6N2PTW1tHfzDqL2F+Vau9rriCbNRV6JMrsiVXV/6wYUuARb7+oBsa0iXjEH?=
 =?us-ascii?q?VYxD0gczGqu5P5nwF1iW6HLXZzqmbZdt90xRvF+NPcQvtR1CIcRCZkkTnXGkS8?=
 =?us-ascii?q?P96x8NSUjZjDtfqyV2CgVp1VaiTryYKAtC2m5WxlGxG/nvazmsH5Hgg+yyP0y9?=
 =?us-ascii?q?5qVSDQphbmfobrz7i6Mf5gfkRwB1/z8ct6Fpt+kostnp4Q33cai46R/XoGl2fz?=
 =?us-ascii?q?LNpa1bj/bHoLWT4E3drV7BL5101kK3KD35j5WWmFwst9e9m6ZXsb2ic878BJEq?=
 =?us-ascii?q?iY9rJFkjVuolqksw3Re+NykSkHyfsh83Mah+AJuAwwziSSGLwSHE9YPTDymBSM?=
 =?us-ascii?q?9dyxsKJXZGO3e7iqyEV+hcyhDK2FogxERHb5fZIiETVx78plNlLMzWbz6prleN?=
 =?us-ascii?q?TLadITtxuUkwrPjuRPKZIxkOYKijRjOW7noXIlzOs7hwR03Z6mpIiHN3lt/KWh?=
 =?us-ascii?q?DxFDLDL1YMcT+iz3gaZag8abxISvHpRnGjUWU5rkV/OoEDQOtfv5MwaCCiEzqn?=
 =?us-ascii?q?CeGbDHBw+Q9F9mr27TE5CsL3yXJmMWzdB8SxmGPkBfnBoYXDYnnp46CwCqwtbu?=
 =?us-ascii?q?cFxi6zAV5174rAZMy+1yOxn+VGffuBmnajMuRJeDKxpW6xlI513JPsyG8uJzAy?=
 =?us-ascii?q?ZY84WhrQyKN2ybfhlIAnsPWkCeHFDjOb+u5dbb/uicB+q+KebOYLqUpexfUfeI?=
 =?us-ascii?q?2Yyg0o988zmQMcWPO2FoD+cn1UpbQXB5B8PZli0PSyMJliLNbM2bpBam9i10tM?=
 =?us-ascii?q?C/9/vrVxz15YuSELtfKtFv+xGwgaeeOO+cnid5KTBE1pwSwX/E0qQQ3FkXiyt2?=
 =?us-ascii?q?bTmiDawAtTLRTKLXgqJYFQMbZDhpNMRW76MwxA1NOc/Ah9Px1754iOM1ClhfWV?=
 =?us-ascii?q?zgnMGpedIFI2WnOFzbA0aLMayMJSfXzMHvfaO8VbpQgf1Itx2xvDaXCVPsMi6f?=
 =?us-ascii?q?mDnpSR+vN/pBjCWaPBxYpYG8fQxhCWnlTNL6dBK7NMV7giExwb0xnnnKL3ITMS?=
 =?us-ascii?q?Bgc0NRqb2d9SNZje95G2xE73plK/GLmieZ7+bCLJYWvuBmAiB1l+Jc/XQ7xKFZ?=
 =?us-ascii?q?7CBCRPxphiTSqsRirE2hkumKmXJbV093qz9NzKmCvA02MqzY3pZFSTDZ50Rew3?=
 =?us-ascii?q?+XDkEhrsdsDtzp84VZ0NnJnbm7fDxL79vQ/M1aAsHOKcSOK1IoKx+vEznRWlhW?=
 =?us-ascii?q?BQW3PH3S0hQO2MqZ8WeY+8A3?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ACAADL2v5bh0O0hNFjGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUgMBAQEBAQsBg2snjHCLKYINFJcugW4xEwGHbiI1CA0BAwE?=
 =?us-ascii?q?BAQEBAQIBEwEBAQgNCQgpL4I2IoJkAQEBAQIBAQIkEz8FAQkBAQoYCSUDDAVJE?=
 =?us-ascii?q?wWDHIFqAw0IBAGnejOKMYwWgVc/g241gleIBQKJH4dMjzAHAoIcBI8GI5EVLJl?=
 =?us-ascii?q?kAYIKMxojgzyCJxeOHT8BATGBBQEBjTMBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ACAADL2v5bh0O0hNFjGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUgMBAQEBAQsBg2snjHCLKYINFJcugW4xEwGHbiI1CA0BAwEBAQEBAQIBEwEBA?=
 =?us-ascii?q?QgNCQgpL4I2IoJkAQEBAQIBAQIkEz8FAQkBAQoYCSUDDAVJEwWDHIFqAw0IBAG?=
 =?us-ascii?q?nejOKMYwWgVc/g241gleIBQKJH4dMjzAHAoIcBI8GI5EVLJlkAYIKMxojgzyCJ?=
 =?us-ascii?q?xeOHT8BATGBBQEBjTMBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,291,1539673200"; 
   d="scan'208";a="64406635"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 28 Nov 2018 10:18:36 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729159AbeK2FUv (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 29 Nov 2018 00:20:51 -0500
Received: from usa-sjc-mx-foss1.foss.arm.com ([217.140.101.70]:48134 "EHLO
        foss.arm.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726283AbeK2FUv (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 29 Nov 2018 00:20:51 -0500
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.72.51.249])
        by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id 0EC5A80D;
        Wed, 28 Nov 2018 10:18:20 -0800 (PST)
Received: from arrakis.emea.arm.com (arrakis.cambridge.arm.com [10.1.196.113])
        by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPSA id 3FE7F3F59C;
        Wed, 28 Nov 2018 10:18:18 -0800 (PST)
Date: Wed, 28 Nov 2018 18:18:15 +0000
From: Catalin Marinas <catalin.marinas@arm.com>
To: Qian Cai <cai@gmx.us>
Cc: akpm@linux-foundation.org, mhocko@suse.com,
        rppt@linux.vnet.ibm.com, aryabinin@virtuozzo.com,
        glider@google.com, dvyukov@google.com, kasan-dev@googlegroups.com,
        linux-mm@kvack.org, linux-kernel@vger.kernel.org
Subject: Re: [PATCH] mm/memblock: skip kmemleak for kasan_init()
Message-ID: <20181128181815.GN3563@arrakis.emea.arm.com>
References: <1543426833-24378-1-git-send-email-cai@gmx.us>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <1543426833-24378-1-git-send-email-cai@gmx.us>
User-Agent: Mutt/1.10.1 (2018-07-13)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Wed, Nov 28, 2018 at 12:40:33PM -0500, Qian Cai wrote:
> Kmemleak does not play well with KASAN (tested on both HPE Apollo 70 and
> Huawei TaiShan 2280 aarch64 servers).
> 
> After calling start_kernel()->setup_arch()->kasan_init(), kmemleak early
> log buffer went from something like 280 to 260000 which caused kmemleak
> disabled and crash dump memory reservation failed. The multitude of
> kmemleak_alloc() calls is from,
> 
> for_each_memblock(memory, reg) x \
> while (pgdp++, addr = next, addr != end) x \
> while (pudp++, addr = next, addr != end && pud_none(READ_ONCE(*pudp))) \
> while (pmdp++, addr = next, addr != end && pmd_none(READ_ONCE(*pmdp))) \
> while (ptep++, addr = next, addr != end && pte_none(READ_ONCE(*ptep)))
> 
> Signed-off-by: Qian Cai <cai@gmx.us>

Sorry, I didn't get the chance to investigate this further. Hopefully
early next week.

> diff --git a/mm/memblock.c b/mm/memblock.c
> index 9a2d5ae..fd78e39 100644
> --- a/mm/memblock.c
> +++ b/mm/memblock.c
> @@ -1412,6 +1412,8 @@ static void * __init memblock_alloc_internal(
>  done:
>  	ptr = phys_to_virt(alloc);
>  
> +/* Skip kmemleak for kasan_init() due to high volume. */
> +#ifndef CONFIG_KASAN
>  	/*
>  	 * The min_count is set to 0 so that bootmem allocated blocks
>  	 * are never reported as leaks. This is because many of these blocks
> @@ -1419,6 +1421,7 @@ static void * __init memblock_alloc_internal(
>  	 * looked up by kmemleak.
>  	 */
>  	kmemleak_alloc(ptr, size, 0, 0);
> +#endif

This may render kmemleak unusable since it is not aware of the memblock
allocations and it would trigger lots of false positives.

-- 
Catalin
