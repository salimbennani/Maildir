Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 27 Nov 2018 08:38:25 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 4EB7C580322;
	Mon, 26 Nov 2018 09:01:30 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga007-1.jf.intel.com with ESMTP; 26 Nov 2018 09:01:30 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AxvpvlBDNVpLCTG/TxtHXUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7+ps6wAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95MWSJfDIOy?=
 =?us-ascii?q?b4wPAekPM+lWoIbypUcBoxSlBQm0Bu7i0SNIi3zs0KEmz+gsHwPL0Qo9FNwOqn?=
 =?us-ascii?q?TUq9D1Ob8SXu+ryqnIwi/Mb/VZ2Tzg6IfHaBYhof6RVr93f8ve108vGxnKjlqK?=
 =?us-ascii?q?r4zlMCmZ1+oXvGid4OptTuWvi3Q9pA5tpjig2N0ghZXOhoIQ013J8zhyzoUtJd?=
 =?us-ascii?q?CgVkJ3fdqpHIFNuyyUKYd6WN4uTmJ0tCogy7ALu4a3cDUFxZg63RLTdvOKfomS?=
 =?us-ascii?q?7h7+SeqcIC10iG97dL+5mh2861KvyvfmWcmxyFtKrjRKkt3Ltn0VyRzT5daISu?=
 =?us-ascii?q?Fn8keixzmPzQbT5f9AIUwukqrbMZEhzqYxlpoVr0vDAjf7lFvqgKKSbEko5+al?=
 =?us-ascii?q?5/r9brn7pZKQK5V4hwD8P6g2n8ywG+U4MgwAX2iB/uS80aXu/Un4QLVMk/03nb?=
 =?us-ascii?q?DVsJPEKsQBoK62HQtV3p8k6xexCTepzs4YkGIZLFJKZh2HlZLlO1LQL/DiC/ew?=
 =?us-ascii?q?nVCsnC1sx/DcMb3tGo/NIWTbkLf9YbZ97FZRyA4yzdBc+Z1YEL4AIO/oV0/1td?=
 =?us-ascii?q?zYCAI5MgOuz+bmDtV9yp0RWWaVDqCFN6PStEeC5vgzLOmUeI8VpDH9JuAl5/H0?=
 =?us-ascii?q?jH85hUUSfa6z0ZsXdXC3BPJmI0qCbHrog9cBF3oKvwUkQOzrjl2CTSBcZ3KoU6?=
 =?us-ascii?q?0g4TE7DZqsDZ3fSYC1nLyBwCC7E4VUZmBBFF+AC3Tod4KCW/cKbyKfOcthkj0C?=
 =?us-ascii?q?Vbi8RI4tzxCutAnmy7V5KurY4DEXtZXm1NJt/e3ciQky9SBoD8Say2yCVXp0nm?=
 =?us-ascii?q?MPRz81xqx/u1ZyylWY3Kh8gvxYE8FT5vxTXgc7M57c0/J1C9ToVg3dedeJTU6s?=
 =?us-ascii?q?Qs+6DjEpUtIx39gObl5+G9q4iBDPxS6qA74PmLyNC5w56abc33n3J8ZgxHfKzq?=
 =?us-ascii?q?ghj186QsRRMW2qnLJw9w/WB4TRiUWWi76qdbgA3C7K7GqM0HCBvF9GXwJqUaXK?=
 =?us-ascii?q?R3YfZlDIotT/4U/CS7yuCbEjMgZazc6CK61KasDmjFlcRffjPsjebHy1m2uqGR?=
 =?us-ascii?q?mIwbaMZpLwe2oBxCXdFFQEkwcL8HmbLwc+GDmur3jeDDN0E1LveF3j8e9lpXO/?=
 =?us-ascii?q?T080yRyKbkJ727q0/B4VmeKTS/cJ0r0Yvychri1+HEyh0NLOF9qAuw1hcb1AYd?=
 =?us-ascii?q?M85VdH0n7Ztwx9P5C6M6BunFkecx5zv0Pv0RV3BZ5NkcwrrHMs0QpzJriU0FJH?=
 =?us-ascii?q?dzOEw5/wPqfbJXX1/BCqc6TWwE3R0M6K+qcT7/Q1s0/svAW3GUst7Xpm08NZ3G?=
 =?us-ascii?q?CB5prXFgUSV5HxUkEp9xVho7HaYy89557b1HF2MKm0tCPC1MwtBOc/1hmgeNJf?=
 =?us-ascii?q?OrueFADuC80aG9SuKOsyllmpcxIIJvxd+LQ1PsOmbfSG3qGrMf1knDKni2RH/Y?=
 =?us-ascii?q?983liN9yp6Vu7HwZIFz+uE0QuAUjf2lE2hvdzvmYBYeTESGXKyyTLlBIFNfKJy?=
 =?us-ascii?q?Z5sECWC0L82x2Np+nZ/tV2dE+1G5A1MJxdGmeQCVb1z7xgBQ0UUXoXq6mSq31T?=
 =?us-ascii?q?B0kjcprraB0yzK2ejtaB0HOmtTTml4kVjsOZS0j8wdXEWwbwkplQGp5Ebgy6hA?=
 =?us-ascii?q?uaR/KXLeQUNJfyjwMmFjXbG8truEY85T9pwotT9bX/i7YVCfUrT9uQcV0zv/H2?=
 =?us-ascii?q?tCwzA2bzOqtY/jnxx5i2KdK2x/rGHDdsFzxhff5drcSuBX3jcdQCl4iD/XBkWz?=
 =?us-ascii?q?PtWz/NWUkYvDvf66V267SpJTdizrx5uatCSn/W1qHQG/n/erl9znCwc61jX319?=
 =?us-ascii?q?trVSXOtxv8Zojr16KnMeNoZEVoBVn869ZkFYF6iIc/mJYQ2X0CjJWP4XUHiXvz?=
 =?us-ascii?q?Mclc2a/mb3oCXz8Lz8TV4Aj4wkJjKH2Jypn9VnWcxMtheta7bnkX2iI788BFFq?=
 =?us-ascii?q?OU4KZYkityp1qytRjRbuRlnjcB1fsu72YXg+QIuAou1CqRGL4TEldDPSzwiRuI?=
 =?us-ascii?q?9cuxo7tNZGagarWw0Et+nda8DLCNuA1cWXD5eos8Ei909MlwLFXM0Hjr4IH+ZN?=
 =?us-ascii?q?bQdc4TtgGTkxrYk+hVL5cxmuALhCV9P2L9oGYly/U6jRF12ZG6vY6HK3hi/a6j?=
 =?us-ascii?q?Ax5YMCH1aN0X+j33kalemcOW1Zi1Hpp9AjULQIfoTfWwHT0Jr/vnMAKOECAmpn?=
 =?us-ascii?q?efBLrSBguf6EZgr3LSHJGnLXCXJH8Fzdp8QBmRPlBQgAcRXD8ihJ42ChiqxND9?=
 =?us-ascii?q?cEd+/j0R5ET3qh5SxeJzLRX/Tn3TpAS1ajc3VZifKgBZ7hpZ6kfRMMye6P9zHi?=
 =?us-ascii?q?5C8p2gqgyNNnKUZwBSAW4VXUyEAkjpPqOy6tnY7+iYGu2+IuPOYLWJtOxeTuqI?=
 =?us-ascii?q?yoip0od85DaMMcOPPnZ5Av0/20pDW215GsvDlzUOTSwXizzCb8qBqBig/S13q9?=
 =?us-ascii?q?i18O73VwL3+YuPF7xSPM1v+x+ogKeDNO2QhCdjJTZbzJMMwnDIx6YF3F4PkCFj?=
 =?us-ascii?q?bD2tEbUGtS7QQ6PcgK5XDxgHayxtMMtE9b4z3g5IOcTDkNP6yqZ4juIpC1dCTV?=
 =?us-ascii?q?HugNypatcQI26jNFLLHkKLNLWdKD3PwsH3Z768SLJKgOVVsR2wpSiUE0v5Mjuf?=
 =?us-ascii?q?kDnpUgilMftQgyGDIBxepIa9fw5xCWjiSdLqcAG0PMVrgj0237I0gGjHNWodMT?=
 =?us-ascii?q?h6bkNMoaec7SJegvVjBWNB6mBpIvWDmyac9+PYMIoZseN3AiRokOJX+HQ7xKFT?=
 =?us-ascii?q?7CFBRfx1njPdr99uo168lOmPxSFqUB5PqjZNmYKKsl9uOaTf9plcR3nE+AgB4n?=
 =?us-ascii?q?mXCxQP9JNZDYjQtqEY+9HJm+qnMjZJ89vO8Y0DCsnFIcSIGHUkOBvtXjXTCV1B?=
 =?us-ascii?q?BSyrMmfQz05cmfedvimHrp88pZrtkZwBYr9GXUM4F7URDUEzT/IYJ5IiYT4inr?=
 =?us-ascii?q?edg4Y37Hyx5E3OScMcsZnBWbSNCPPgADGDhLJAal0DxrauftdbDZHyx0E3Mgoy?=
 =?us-ascii?q?p4/NAUeFGIkV+iA=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AEAAB0Jvxbh0O0hNFkGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBg2sng3mIGF+LIymBNwglFIpRh2CEdxSBXxI?=
 =?us-ascii?q?BARgTAYMshTciNAkNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkAYJhAQEBAQIBA?=
 =?us-ascii?q?QIaBgQLAQUIAQE3AQUJAQEIAg4KAgImAgIDVAYBDAYCAQEBgxyBeggEAYpSmmB?=
 =?us-ascii?q?wfDOCdgEBBYJDhFcIgQuKfnqBHIE4DIJfhGaDHIJXiRuBeIR/ToRGil4HAoMQj?=
 =?us-ascii?q?hkGGIFZiAgmgRyFZSyRI4Y6AgQCBAUCEwGBRoINMxoEH1CCbIIbCQMXg0qILYJ?=
 =?us-ascii?q?GUQGBBAEBi3sBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AEAAB0Jvxbh0O0hNFkGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBg2sng3mIGF+LIymBNwglFIpRh2CEdxSBXxIBARgTAYMshTciN?=
 =?us-ascii?q?AkNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkAYJhAQEBAQIBAQIaBgQLAQUIAQE?=
 =?us-ascii?q?3AQUJAQEIAg4KAgImAgIDVAYBDAYCAQEBgxyBeggEAYpSmmBwfDOCdgEBBYJDh?=
 =?us-ascii?q?FcIgQuKfnqBHIE4DIJfhGaDHIJXiRuBeIR/ToRGil4HAoMQjhkGGIFZiAgmgRy?=
 =?us-ascii?q?FZSyRI4Y6AgQCBAUCEwGBRoINMxoEH1CCbIIbCQMXg0qILYJGUQGBBAEBi3sBA?=
 =?us-ascii?q?Q?=
X-IronPort-AV: E=Sophos;i="5.56,283,1539673200"; 
   d="scan'208";a="54853950"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 26 Nov 2018 09:01:28 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726708AbeK0DxF (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 26 Nov 2018 22:53:05 -0500
Received: from userp2120.oracle.com ([156.151.31.85]:53030 "EHLO
        userp2120.oracle.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726224AbeK0DxE (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 26 Nov 2018 22:53:04 -0500
Received: from pps.filterd (userp2120.oracle.com [127.0.0.1])
        by userp2120.oracle.com (8.16.0.22/8.16.0.22) with SMTP id wAQGrkf9133617;
        Mon, 26 Nov 2018 16:58:00 GMT
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=oracle.com; h=subject : to : cc :
 references : from : message-id : date : mime-version : in-reply-to :
 content-type : content-transfer-encoding; s=corp-2018-07-02;
 bh=YmIfZUKsusEwPzQJ+x9Ah6VYs08Xx4LmFf/R4kPx+qo=;
 b=gny2btUd2YCyLv4Q6FA4Xd6HKSpEtvm5eAbNEKrLsqh766/2Zb3QLT3YFzasmQ8D0n5d
 O31LDVV+cwbWfKkVxsX98LVwG6ub8Gw5354q30AEBLknhN3hYXCGB+TicTfWktWwxtbQ
 x+cbY4VK5WbHApCUrAHbhrS5a3Eskwfh2UpZvVhjLOFerNI+0ch0R+qpnV1i1tTJ/ibw
 RNeYYfNSdiQEiWWFEfVb4Dvlnc1YPLObGLD6jB80ageDqearBSGJHzyqyxnsxE7lcCV6
 aUmRKqZ7m28VbbMQ4aLOsEifuZc86pSdIoEI+hxOmkskz/alU1HYftuuroYtBsPxkNAK pg== 
Received: from aserv0022.oracle.com (aserv0022.oracle.com [141.146.126.234])
        by userp2120.oracle.com with ESMTP id 2nxy9qy02c-1
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=OK);
        Mon, 26 Nov 2018 16:58:00 +0000
Received: from aserv0122.oracle.com (aserv0122.oracle.com [141.146.126.236])
        by aserv0022.oracle.com (8.14.4/8.14.4) with ESMTP id wAQGvxDM015330
        (version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256 verify=OK);
        Mon, 26 Nov 2018 16:57:59 GMT
Received: from abhmp0006.oracle.com (abhmp0006.oracle.com [141.146.116.12])
        by aserv0122.oracle.com (8.14.4/8.14.4) with ESMTP id wAQGvwKJ017120;
        Mon, 26 Nov 2018 16:57:59 GMT
Received: from [10.159.138.192] (/10.159.138.192)
        by default (Oracle Beehive Gateway v4.0)
        with ESMTP ; Mon, 26 Nov 2018 08:57:57 -0800
Subject: Re: [PATCH] mm: use this_cpu_cmpxchg_double in put_cpu_partial
To: Wei Yang <richard.weiyang@gmail.com>,
        zhong jiang <zhongjiang@huawei.com>
Cc: Christopher Lameter <cl@linux.com>, penberg@kernel.org,
        David Rientjes <rientjes@google.com>, iamjoonsoo.kim@lge.com,
        Andrew Morton <akpm@linux-foundation.org>,
        Linux-MM <linux-mm@kvack.org>,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>
References: <20181117013335.32220-1-wen.gang.wang@oracle.com>
 <5BF36EE9.9090808@huawei.com>
 <CADZGycb=kxdqSdbdXNWwmgyWp2CtC3-UFmy1-PqtdgS2BrmyjA@mail.gmail.com>
From: Wengang Wang <wen.gang.wang@oracle.com>
Organization: Oracle Corporation
Message-ID: <476b5d35-1894-680c-2bd9-b399a3f4d9ed@oracle.com>
Date: Mon, 26 Nov 2018 08:57:54 -0800
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101
 Thunderbird/52.9.1
MIME-Version: 1.0
In-Reply-To: <CADZGycb=kxdqSdbdXNWwmgyWp2CtC3-UFmy1-PqtdgS2BrmyjA@mail.gmail.com>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 8bit
Content-Language: en-US
X-Proofpoint-Virus-Version: vendor=nai engine=5900 definitions=9089 signatures=668685
X-Proofpoint-Spam-Details: rule=notspam policy=default score=0 suspectscore=2 malwarescore=0
 phishscore=0 bulkscore=0 spamscore=0 mlxscore=0 mlxlogscore=999
 adultscore=0 classifier=spam adjust=0 reason=mlx scancount=1
 engine=8.0.1-1810050000 definitions=main-1811260150
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org



On 2018/11/25 17:59, Wei Yang wrote:
> On Tue, Nov 20, 2018 at 10:58 AM zhong jiang <zhongjiang@huawei.com> wrote:
>> On 2018/11/17 9:33, Wengang Wang wrote:
>>> The this_cpu_cmpxchg makes the do-while loop pass as long as the
>>> s->cpu_slab->partial as the same value. It doesn't care what happened to
>>> that slab. Interrupt is not disabled, and new alloc/free can happen in the
>>> interrupt handlers. Theoretically, after we have a reference to the it,
>>> stored in _oldpage_, the first slab on the partial list on this CPU can be
>>> moved to kmem_cache_node and then moved to different kmem_cache_cpu and
>>> then somehow can be added back as head to partial list of current
>>> kmem_cache_cpu, though that is a very rare case. If that rare case really
>>> happened, the reading of oldpage->pobjects may get a 0xdead0000
>>> unexpectedly, stored in _pobjects_, if the reading happens just after
>>> another CPU removed the slab from kmem_cache_node, setting lru.prev to
>>> LIST_POISON2 (0xdead000000000200). The wrong _pobjects_(negative) then
>>> prevents slabs from being moved to kmem_cache_node and being finally freed.
>>>
>>> We see in a vmcore, there are 375210 slabs kept in the partial list of one
>>> kmem_cache_cpu, but only 305 in-use objects in the same list for
>>> kmalloc-2048 cache. We see negative values for page.pobjects, the last page
>>> with negative _pobjects_ has the value of 0xdead0004, the next page looks
>>> good (_pobjects is 1).
>>>
>>> For the fix, I wanted to call this_cpu_cmpxchg_double with
>>> oldpage->pobjects, but failed due to size difference between
>>> oldpage->pobjects and cpu_slab->partial. So I changed to call
>>> this_cpu_cmpxchg_double with _tid_. I don't really want no alloc/free
>>> happen in between, but just want to make sure the first slab did expereince
>>> a remove and re-add. This patch is more to call for ideas.
>> Have you hit the really issue or just review the code ?
>>
>> I did hit the issue and fixed in the upstream patch unpredictably by the following patch.
>> e5d9998f3e09 ("slub: make ->cpu_partial unsigned int")
>>
> Zhong,
>
> I took a look into your upstream patch, while I am confused how your patch
> fix this issue?
>
> In put_cpu_partial(), the cmpxchg compare cpu_slab->partial (a page struct)
> instead of the cpu_partial (an unsigned integer). I didn't get the
> point of this fix.

I think the patch can't prevent pobjects from being set as 0xdead0000 
(the primary 4 bytes of LIST_POISON2).
But if pobjects is treated as unsigned integer,

2266                         pobjects = oldpage->pobjects;
2267                         pages = oldpage->pages;
2268                         if (drain && pobjects > s->cpu_partial) {
2269                                 unsigned long flags;

line 2268 will be true in put_cpu_partial(), thus code goes to 
unfreeze_partials(). This way the slabs in the cpu partial list can be 
moved to kmem_cache_nod and then freed. So it fixes (or say workarounds) 
the problem I see here (huge number of empty slabs stay in cpu partial 
list).

thanks
wengang

>> Thanks,
>> zhong jiang
>>> Signed-off-by: Wengang Wang <wen.gang.wang@oracle.com>
>>> ---
>>>   mm/slub.c | 20 +++++++++++++++++---
>>>   1 file changed, 17 insertions(+), 3 deletions(-)
>>>
>>> diff --git a/mm/slub.c b/mm/slub.c
>>> index e3629cd..26539e6 100644
>>> --- a/mm/slub.c
>>> +++ b/mm/slub.c
>>> @@ -2248,6 +2248,7 @@ static void put_cpu_partial(struct kmem_cache *s, struct page *page, int drain)
>>>   {
>>>   #ifdef CONFIG_SLUB_CPU_PARTIAL
>>>        struct page *oldpage;
>>> +     unsigned long tid;
>>>        int pages;
>>>        int pobjects;
>>>
>>> @@ -2255,8 +2256,12 @@ static void put_cpu_partial(struct kmem_cache *s, struct page *page, int drain)
>>>        do {
>>>                pages = 0;
>>>                pobjects = 0;
>>> -             oldpage = this_cpu_read(s->cpu_slab->partial);
>>>
>>> +             tid = this_cpu_read(s->cpu_slab->tid);
>>> +             /* read tid before reading oldpage */
>>> +             barrier();
>>> +
>>> +             oldpage = this_cpu_read(s->cpu_slab->partial);
>>>                if (oldpage) {
>>>                        pobjects = oldpage->pobjects;
>>>                        pages = oldpage->pages;
>>> @@ -2283,8 +2288,17 @@ static void put_cpu_partial(struct kmem_cache *s, struct page *page, int drain)
>>>                page->pobjects = pobjects;
>>>                page->next = oldpage;
>>>
>>> -     } while (this_cpu_cmpxchg(s->cpu_slab->partial, oldpage, page)
>>> -                                                             != oldpage);
>>> +             /* we dont' change tid, but want to make sure it didn't change
>>> +              * in between. We don't really hope alloc/free not happen on
>>> +              * this CPU, but don't want the first slab be removed from and
>>> +              * then re-added as head to this partial list. If that case
>>> +              * happened, pobjects may read 0xdead0000 when this slab is just
>>> +              * removed from kmem_cache_node by other CPU setting lru.prev
>>> +              * to LIST_POISON2.
>>> +              */
>>> +     } while (this_cpu_cmpxchg_double(s->cpu_slab->partial, s->cpu_slab->tid,
>>> +                                      oldpage, tid, page, tid) == 0);
>>> +
>>>        if (unlikely(!s->cpu_partial)) {
>>>                unsigned long flags;
>>>
>>

