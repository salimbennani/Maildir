Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:22:47 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 9B558580224;
	Fri, 30 Nov 2018 12:28:15 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 30 Nov 2018 12:28:15 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AKqX38hSECglBDQcnafE0ErP/1Npsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64YByPt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZDI2y?=
 =?us-ascii?q?b5UBAfcCM+ZWoIbyu0YBohmwCgm3HOPiyCRFhmPq0aAgz+gtDRvL0BImEtkTsH?=
 =?us-ascii?q?rUttL1NKIKXO6x1qbH0zrDYO1L2Tf+9YPGdxEhofSRVr93c8re01cgFwzbgVWN?=
 =?us-ascii?q?qozoJDCV2foXs2id8eVgUfiji2k9qwF+uzWiwNonhIfOhoIQ0F/E9CN5zZ4uJd?=
 =?us-ascii?q?2/VU57e8KrH4VetyGdLYt2Td0tT3tuuCkk1r0Lv4OwcisSyJk/2RLTd/iKf5KV?=
 =?us-ascii?q?7h/tSuqdOyp0iXF5dL6lhhu/81CsxvDgWsS7ylpGsyRInsfWunwQzRDe6dSLR/?=
 =?us-ascii?q?1g9Um7wzmPzRrc6uRcLEA0i6XbL5khz6Yulpocr0vDBDX6mEbog6+McEUr5Oyo?=
 =?us-ascii?q?5/7gYrX8qZ+QL450igfgPaQygsGzH/g0PwwUU2SG9+mwyqfv8VD6TblWlPE7k6?=
 =?us-ascii?q?vUvIjfJcsBp665BwFV0pwk6xa6Fzqm1NUYnX8aLFNKYR6HjJbmO0vIIP/mCfez?=
 =?us-ascii?q?mlOskTltx//YJL3sGYvNLnfdn7f7Z7p96FBTyBA1zd9B45JYELYBIOj8WkPprt?=
 =?us-ascii?q?zXEgc5MxCow+bgENh90oIeWWGRDaODP6LSrESF5uYuI+mKeY8UtyzxK/kj5/7y?=
 =?us-ascii?q?k3A5nUURcrWu3ZsScHq4BOhpI12FYXrwhdcMCWcKsRA/TOz2klKCViRfZ3avX6?=
 =?us-ascii?q?0m4DE7B5mrDYPCRoCrnbyA0z23HpxQZmBaFF+MFW3keJmDW/cJcCiSONNukiQY?=
 =?us-ascii?q?Vbi9TI8szROutAjkxLZ9LerU/SsYtZTk1NVu4+3TlBcy9SF7DsiH0mGNSX10kX?=
 =?us-ascii?q?0MRzMswK9/pkl9wE+Z0adkm/xYCcBT5/RRXwggLp7cz+t6C9PoVgLbZNiJSk2r?=
 =?us-ascii?q?QtGnATE3U9IwzMUCY0d7G9W+kB/D2zCmDKMSl7yOHJY06L7T32DtJ8ZhzHbLzK?=
 =?us-ascii?q?ohgEMgQsdVMW2mh7Rw9w7cB4PSl0WZlqCqdbkT3SLX9WeDy3aOs19cUAJqTarF?=
 =?us-ascii?q?WnUfbFPMrdvl/kPCU6OuCbM/PwRc08GCNLVFZsfpjVpcQvfjI8rRY2S2l2e0Bh?=
 =?us-ascii?q?aIw7eMYZHue2Uc2iXdFUcFnxoS/XaAKQgxGCOhr3jCAzxpEFLle1ns/vVmqHOn?=
 =?us-ascii?q?Uk80yBmHYFB72Lqr5BEZn/ycROkV3rIfpighrS55HFK839LQFtqBqBBtfKRaYd?=
 =?us-ascii?q?Mh/lhH0XjVuBB6PpylN6pinEIRcxxrv0Py0BV6EplAkckvrHMt0ApyKaKZ3Eld?=
 =?us-ascii?q?dz+C2pDwILnXKmj0/BCgcKPW3lDe0NCL+qYA8vg4qlPjvB23GUom6Xloz95V03?=
 =?us-ascii?q?6E7JXQEAUSSY7xUlow9xVivb7aZjcy5ozK2nxsK6W7qSLC1M8zC+sjyRageMlf?=
 =?us-ascii?q?PbiAFA/zFc0aGsevJPYrm1ivchILIuRS+LQoMMOhcvuMwLSrM/p4nDK6kWRH55?=
 =?us-ascii?q?hw00KR9yZmVuHExZcEw/GC0QuBWDfxl1OhssHxmYBZajAeBGu/yS74BIFPYq1+?=
 =?us-ascii?q?Z5oECWCrI8ev3NVxm4btW2JE9F6kH14Gws6pdgaIYFznwAJQ0l4boXq5liuizj?=
 =?us-ascii?q?x4ii0mobCb3CPT3evibh0HOmhQSWlmjFfsJ5W0jt8AUEipaQgpiAWq5ULgy6dH?=
 =?us-ascii?q?o6R/KnHZQV1UcCjuM2FiTqywu6KCYs5O8p8psT9bUP+hYVCcUbP9pxoa0yX+H2?=
 =?us-ascii?q?pR3jw7djequonnkBx+km6SMHFzrH/Bc8Fq2Rjf/MDcReJW3jceRil3kyPXBlu/?=
 =?us-ascii?q?P9mu59mUjI3MsuO9V2KgUJ1cby/rwJiEtCu6421qHBK+k+qymt3hDQg1zyv728?=
 =?us-ascii?q?N2WiXPqRb2epPr2LiiMeJ7YkloA0fx6spgFYF5iIcwhpAQ2X4Bi5WR/HoHl3rz?=
 =?us-ascii?q?MNpB1aL/anoNWSAEw9rP7Af5301jK2qDx5jlWXWF3sthe966b3sV2i0n7sBGEq?=
 =?us-ascii?q?eU7KFekitzrVq1tgbRYfl7njcAxvoi8n8ag+cVuAUzyiWRGKwdHU5dPSb0jRSH?=
 =?us-ascii?q?88i+rLlLZGaoabWw0Ut+ndO7A72YrABTRm35eos8Ei9q9cpwLkjM0HLo54Hged?=
 =?us-ascii?q?nQa88TtxKOnxfBiehVNIw+lv4QiSV7PmL9uGUvy/Qnghx2wZG6oI+HJn1x/KK+?=
 =?us-ascii?q?Bx5ULDz0aNkV+jHwlqZehceW0purHpVgHDULQZTpQeipEDIUqfToKQKOHCcgpX?=
 =?us-ascii?q?ecHLrVBRWf51t+r3LTD5CrMGmaK2IDwtVlQBmdOVZTgAQJXDghmp45FwaqxNHu?=
 =?us-ascii?q?cUtj5zAR4EL4pQVIyu5yKxb/VWLfrh+yajgoUJifMAZW7gZa6kfXK8Oe6/x8Hz?=
 =?us-ascii?q?pC8p29tgCNKXGbZwdVDWEPQEOEHEvuPr2v5dnG7uiZCfCyL/rIYbWSt+NeU+2E?=
 =?us-ascii?q?yo6o0otj5zyMLNmAPmF+D/0n3UpORXB4G8PEmzUWViwYjSTNY9SApBe7/C13od?=
 =?us-ascii?q?uy8PDqWALp+IuOBKFeMdRp+xCqn6iDM/Scizp+KTZdzpkM32PHyKAD3F4OjCFj?=
 =?us-ascii?q?bzmtHqoBtS7OT6LQm7VbDx0BayN0O8tH8bg83hRWOcPAjtP117h4juM6CltfVF?=
 =?us-ascii?q?zhnN2patIOI22nKFzHA0OLPqycJTLX28H3fb+8SbpIgepOqh2/oiybHFHjPziZ?=
 =?us-ascii?q?kznpVguiMeVNjCGdIRxft5uxchdrCWj/Ut3mbge3P8NwjT0z2bc0nG/FNXYAMT?=
 =?us-ascii?q?hgdENAtqGQ7SJdgvllB2NN9GZqLemalCaf9OTYLpcWsf12AiV7je5a4XI6y6dL?=
 =?us-ascii?q?4yFAXvB6hCzSrtt2qVG8juaP0iZnUAZJqjtThIOEp0NiOaDY9plGQXnF/RIN4n?=
 =?us-ascii?q?+WCxQFvNZlDtzvu6ZNytnAjq7zKTFC887K8ssYHcTbNMWHMH9yeSbuTRXUBQxN?=
 =?us-ascii?q?fCPjYXDCjExUl6m69mCcsZU77JPrncxdZKVcUQkXH/4VB1lmVP8DJd8jXDopnr?=
 =?us-ascii?q?OGj+YL6GC4oR2XQ99V6MOUHsmOCOnifW7KxYJPYAEFlPahddwe?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAAA0nAFch0O0hNFjGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGBWoEPgQInjBGOFxSXNIFzFBgLCAGHdiI0CQ0BAwE?=
 =?us-ascii?q?BAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmEBAQEBAgEBAQEkEwYBASwLAQUJAQEKE?=
 =?us-ascii?q?QMBAgEJJQMMBRMBJw4TBYMcAYF5CAUKpg2BbDOCdgEBBYcoAwWKfoEcF4FAP4Q?=
 =?us-ascii?q?jgx4BBIEnHAeDSYImiQuHHZAPCYIihF2DL4JshBIjgVuPRIl+g2GKfoFGgg0zG?=
 =?us-ascii?q?ggoCDuCbIIbDBd/AQmHGjuFYB8ygQIDAQEhE4o/ASWCJwEB?=
X-IPAS-Result: =?us-ascii?q?A0ABAAA0nAFch0O0hNFjGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGBWoEPgQInjBGOFxSXNIFzFBgLCAGHdiI0CQ0BAwEBAQEBAQIBEwEBA?=
 =?us-ascii?q?QgNCQgpIwyCNiQBgmEBAQEBAgEBAQEkEwYBASwLAQUJAQEKEQMBAgEJJQMMBRM?=
 =?us-ascii?q?BJw4TBYMcAYF5CAUKpg2BbDOCdgEBBYcoAwWKfoEcF4FAP4Qjgx4BBIEnHAeDS?=
 =?us-ascii?q?YImiQuHHZAPCYIihF2DL4JshBIjgVuPRIl+g2GKfoFGgg0zGggoCDuCbIIbDBd?=
 =?us-ascii?q?/AQmHGjuFYB8ygQIDAQEhE4o/ASWCJwEB?=
X-IronPort-AV: E=Sophos;i="5.56,299,1539673200"; 
   d="scan'208";a="54453718"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 30 Nov 2018 12:28:13 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726992AbeLAHih (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sat, 1 Dec 2018 02:38:37 -0500
Received: from mail.kernel.org ([198.145.29.99]:53646 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726889AbeLAHih (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Sat, 1 Dec 2018 02:38:37 -0500
Received: from localhost (unknown [104.132.1.80])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 661AA20868;
        Fri, 30 Nov 2018 20:28:08 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1543609688;
        bh=MJvqbUjASp/0j00m7EYlzJUsQT73KgXQDK/SqRq0l78=;
        h=Date:From:To:Cc:Subject:References:In-Reply-To:From;
        b=l+La15s3JhrZTkDa1/q6sA+KVfDFi7yfEyk38kZ5wU+MIrGxUnTKw6MYkl6kakBRD
         v6HFS1SmlUfvSQJ2F0yQu6iEW7G1mECx7Pfxtk5UomcCPba172YVRKb/fFI35ZuZ0V
         meynT8Zx5j4UncdXPN02sq0yczRQdOJd3p+YCz4k=
Date: Fri, 30 Nov 2018 12:28:07 -0800
From: Jaegeuk Kim <jaegeuk@kernel.org>
To: Chao Yu <yuchao0@huawei.com>
Cc: Sheng Yong <shengyong1@huawei.com>, linux-kernel@vger.kernel.org,
        linux-f2fs-devel@lists.sourceforge.net
Subject: Re: [f2fs-dev] [PATCH] f2fs: avoid frequent costly fsck triggers
Message-ID: <20181130202807.GA71781@jaegeuk-macbookpro.roam.corp.google.com>
References: <20181128073125.39102-1-jaegeuk@kernel.org>
 <724de929-6ee1-3ad7-cfa7-6e80d4e7a3da@huawei.com>
 <20181128081035.GA41969@jaegeuk-macbookpro.roam.corp.google.com>
 <4f43735a-d01f-f194-18ce-4fbbe10ad8d4@huawei.com>
 <20181128174805.GB41969@jaegeuk-macbookpro.roam.corp.google.com>
 <234cabcd-a1c1-9fb6-13aa-94fe681731dc@huawei.com>
 <afaee7a9-162a-b157-f0bc-de366cbb7b53@huawei.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <afaee7a9-162a-b157-f0bc-de366cbb7b53@huawei.com>
User-Agent: Mutt/1.8.2 (2017-04-18)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 11/30, Chao Yu wrote:
> On 2018/11/30 10:35, Sheng Yong wrote:
> > Hi, Jaegeuk and Chao,
> > 
> > On 2018/11/29 1:48, Jaegeuk Kim wrote:
> >> On 11/28, Chao Yu wrote:
> >>> On 2018/11/28 16:10, Jaegeuk Kim wrote:
> >>>> On 11/28, Chao Yu wrote:
> >>>>> Hi Jaeguek,
> >>>>>
> >>>>> On 2018/11/28 15:31, Jaegeuk Kim wrote:
> >>>>>> If we want to re-enable nat_bits, we rely on fsck which requires full scan
> >>>>>> of directory tree. Let's do that by regular fsck or unclean shutdown.
> >>>>>
> >>>>> Reviewed-by: Chao Yu <yuchao0@huawei.com>
> >>>>>
> >>>>> BTW, I have patch made some month ago...
> >>>>>
> >>>>> In order to detect nat_bits disabling, could we introduce one more flag for
> >>>>> fsck?
> >>>>
> >>>> Do we have a way to enable nat_bits very quickly in fsck?
> >>>
> >>> For image with SBI_NATBIT_NEED_REPAIR flag, can we just check metadata and
> >>> rebuild nat_bits based on verified nat blocks/journals?
> >>
> >> I'm leaning to rely on full scan to enable nat_bits again. We may add a mount
> >> count or timer to trigger fsck regularly?
> > 
> > I'm afraid regular full fsck would give us bad experience of booting time.
> > FYI, 256GB storage, which is filled with small files, costs almost 10 min
> > to do a full fsck. And it seems larger capacity storages are on the way.
> 
> Agreed.

Agreed. So, that's why I wrote this patch.

> 
> > So, is it worth doing that only to enable nat_bits (plus checking f2fs
> > consistent not that necessarily)?
> 
> In android environment, I think it may be too expensive for adding nat_bits
> by triggering full scan by fsck during boot time.

That's why I'd like to enable this only when we need full scan.

> 
> If we can update all nat bitmap in free time after mount, maybe we can
> rebuild nat_bits based on full nat bitmap during umount, which can be
> cheaper than rebuiding in userspace.

Yeah, rebuiling nat_bits in run time would be better, but can be applied
in future. But, since Android reboot procedure uses a timeout, if we exceed
it, we'll get unclean unmount which triggers another fsck, which doesn't
make sense at all.

> 
> Thanks,
> 
> > 
> > Thanks
> >>
> >>>
> >>> Thanks,
> >>>
> >>>>
> >>>>>
> >>>>> >From 86e8bdb2faeec904944bb6621073f4f7de51cc2d Mon Sep 17 00:00:00 2001
> >>>>> From: Chao Yu <yuchao0@huawei.com>
> >>>>> Date: Sun, 9 Sep 2018 05:40:20 +0800
> >>>>> Subject: [PATCH] f2fs: set specified flag after invalidating nat_bits
> >>>>>
> >>>>> Signed-off-by: Chao Yu <yuchao0@huawei.com>
> >>>>> ---
> >>>>>   fs/f2fs/checkpoint.c    | 12 +++++++++++-
> >>>>>   fs/f2fs/f2fs.h          |  3 ++-
> >>>>>   fs/f2fs/node.c          |  3 +++
> >>>>>   include/linux/f2fs_fs.h |  1 +
> >>>>>   4 files changed, 17 insertions(+), 2 deletions(-)
> >>>>>
> >>>>> diff --git a/fs/f2fs/checkpoint.c b/fs/f2fs/checkpoint.c
> >>>>> index 7e17bb3dfcb1..f7fb14e0f5f9 100644
> >>>>> --- a/fs/f2fs/checkpoint.c
> >>>>> +++ b/fs/f2fs/checkpoint.c
> >>>>> @@ -1226,13 +1226,16 @@ static void update_ckpt_flags(struct f2fs_sb_info
> >>>>> *sbi, struct cp_control *cpc)
> >>>>>   	unsigned long orphan_num = sbi->im[ORPHAN_INO].ino_num;
> >>>>>   	struct f2fs_checkpoint *ckpt = F2FS_CKPT(sbi);
> >>>>>   	unsigned long flags;
> >>>>> +	bool disable_natbits = false;
> >>>>>
> >>>>>   	spin_lock_irqsave(&sbi->cp_lock, flags);
> >>>>>
> >>>>>   	if ((cpc->reason & CP_UMOUNT) &&
> >>>>>   			le32_to_cpu(ckpt->cp_pack_total_block_count) >
> >>>>> -			sbi->blocks_per_seg - NM_I(sbi)->nat_bits_blocks)
> >>>>> +			sbi->blocks_per_seg - NM_I(sbi)->nat_bits_blocks) {
> >>>>>   		disable_nat_bits(sbi, false);
> >>>>> +		disable_natbits = true;
> >>>>> +	}
> >>>>>
> >>>>>   	if (cpc->reason & CP_TRIMMED)
> >>>>>   		__set_ckpt_flags(ckpt, CP_TRIMMED_FLAG);
> >>>>> @@ -1270,11 +1273,18 @@ static void update_ckpt_flags(struct f2fs_sb_info
> >>>>> *sbi, struct cp_control *cpc)
> >>>>>   	if (is_sbi_flag_set(sbi, SBI_QUOTA_NEED_REPAIR))
> >>>>>   		__set_ckpt_flags(ckpt, CP_QUOTA_NEED_FSCK_FLAG);
> >>>>>
> >>>>> +	if (is_sbi_flag_set(sbi, SBI_NATBIT_NEED_REPAIR))
> >>>>> +		__set_ckpt_flags(ckpt, CP_NATBIT_NEED_FSCK_FLAG);
> >>>>> +
> >>>>>   	/* set this flag to activate crc|cp_ver for recovery */
> >>>>>   	__set_ckpt_flags(ckpt, CP_CRC_RECOVERY_FLAG);
> >>>>>   	__clear_ckpt_flags(ckpt, CP_NOCRC_RECOVERY_FLAG);
> >>>>>
> >>>>>   	spin_unlock_irqrestore(&sbi->cp_lock, flags);
> >>>>> +
> >>>>> +	if (disable_natbits)
> >>>>> +		f2fs_msg(sbi->sb, KERN_NOTICE,
> >>>>> +			"No enough space in CP area, disable nat_bits.");
> >>>>>   }
> >>>>>
> >>>>>   static void commit_checkpoint(struct f2fs_sb_info *sbi,
> >>>>> diff --git a/fs/f2fs/f2fs.h b/fs/f2fs/f2fs.h
> >>>>> index f0cedbe0c536..b55341c269b2 100644
> >>>>> --- a/fs/f2fs/f2fs.h
> >>>>> +++ b/fs/f2fs/f2fs.h
> >>>>> @@ -1107,6 +1107,7 @@ enum {
> >>>>>   	SBI_QUOTA_NEED_FLUSH,			/* need to flush quota info in CP */
> >>>>>   	SBI_QUOTA_SKIP_FLUSH,			/* skip flushing quota in current CP */
> >>>>>   	SBI_QUOTA_NEED_REPAIR,			/* quota file may be corrupted */
> >>>>> +	SBI_NATBIT_NEED_REPAIR,			/* nat full/empty bitmaps need repair */
> >>>>>   };
> >>>>>
> >>>>>   enum {
> >>>>> @@ -1628,7 +1629,7 @@ static inline void disable_nat_bits(struct
> >>>>> f2fs_sb_info *sbi, bool lock)
> >>>>>   {
> >>>>>   	unsigned long flags;
> >>>>>
> >>>>> -	set_sbi_flag(sbi, SBI_NEED_FSCK);
> >>>>> +	set_sbi_flag(sbi, SBI_NATBIT_NEED_REPAIR);
> >>>>>
> >>>>>   	if (lock)
> >>>>>   		spin_lock_irqsave(&sbi->cp_lock, flags);
> >>>>> diff --git a/fs/f2fs/node.c b/fs/f2fs/node.c
> >>>>> index e57add1e8966..0c6f8312a087 100644
> >>>>> --- a/fs/f2fs/node.c
> >>>>> +++ b/fs/f2fs/node.c
> >>>>> @@ -2902,6 +2902,9 @@ static int __get_nat_bitmaps(struct f2fs_sb_info *sbi)
> >>>>>
> >>>>>   	cp_ver |= (cur_cp_crc(ckpt) << 32);
> >>>>>   	if (cpu_to_le64(cp_ver) != *(__le64 *)nm_i->nat_bits) {
> >>>>> +		f2fs_msg(sbi->sb, KERN_NOTICE,
> >>>>> +			"Disable nat_bits due to incorrect cp_ver (%llu, %llu)",
> >>>>> +			cp_ver, le64_to_cpu(*(__le64 *)nm_i->nat_bits));
> >>>>>   		disable_nat_bits(sbi, true);
> >>>>>   		return 0;
> >>>>>   	}
> >>>>> diff --git a/include/linux/f2fs_fs.h b/include/linux/f2fs_fs.h
> >>>>> index 7196653833fa..1f3ae1504573 100644
> >>>>> --- a/include/linux/f2fs_fs.h
> >>>>> +++ b/include/linux/f2fs_fs.h
> >>>>> @@ -117,6 +117,7 @@ struct f2fs_super_block {
> >>>>>   /*
> >>>>>    * For checkpoint
> >>>>>    */
> >>>>> +#define CP_NATBIT_NEED_FSCK_FLAG	0X00002000
> >>>>>   #define CP_DISABLED_FLAG		0x00001000
> >>>>>   #define CP_QUOTA_NEED_FSCK_FLAG		0x00000800
> >>>>>   #define CP_LARGE_NAT_BITMAP_FLAG	0x00000400
> >>>>> -- 
> >>>>> 2.18.0.rc1
> >>>>>
> >>>>>
> >>>>>
> >>>>>>
> >>>>>> Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
> >>>>>> ---
> >>>>>>   fs/f2fs/f2fs.h | 6 +++++-
> >>>>>>   1 file changed, 5 insertions(+), 1 deletion(-)
> >>>>>>
> >>>>>> diff --git a/fs/f2fs/f2fs.h b/fs/f2fs/f2fs.h
> >>>>>> index c28a9d1cb278..aa500239baf2 100644
> >>>>>> --- a/fs/f2fs/f2fs.h
> >>>>>> +++ b/fs/f2fs/f2fs.h
> >>>>>> @@ -1621,7 +1621,11 @@ static inline void disable_nat_bits(struct f2fs_sb_info *sbi, bool lock)
> >>>>>>   {
> >>>>>>   	unsigned long flags;
> >>>>>>   
> >>>>>> -	set_sbi_flag(sbi, SBI_NEED_FSCK);
> >>>>>> +	/*
> >>>>>> +	 * In order to re-enable nat_bits we need to call fsck.f2fs by
> >>>>>> +	 * set_sbi_flag(sbi, SBI_NEED_FSCK). But it may give huge cost,
> >>>>>> +	 * so let's rely on regular fsck or unclean shutdown.
> >>>>>> +	 */
> >>>>>>   
> >>>>>>   	if (lock)
> >>>>>>   		spin_lock_irqsave(&sbi->cp_lock, flags);
> >>>>>>
> >>>>
> >>>> .
> >>>>
> >>
> >>
> >> _______________________________________________
> >> Linux-f2fs-devel mailing list
> >> Linux-f2fs-devel@lists.sourceforge.net
> >> https://lists.sourceforge.net/lists/listinfo/linux-f2fs-devel
> >>
> >> .
> >>
> > 
> > 
> > .
> > 
