Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 29 Nov 2018 08:39:19 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 2C8005803ED;
	Wed, 28 Nov 2018 09:48:13 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 28 Nov 2018 09:48:12 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AlkqaIRdq8VodrtbPiqZ9Fcl7lGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc6+YBSN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRPDI28?=
 =?us-ascii?q?cYUBEukPPehXoIbhulQBrxWxBRK0BO7t0TJImmP60Lcm3+g9CwzKwgotFM8Ovn?=
 =?us-ascii?q?TOq9X1Mb8fX+Svw6bWwjXMce5W2TTg44bNcxAhpOyHULVyccXL10YvGB3KjkiT?=
 =?us-ascii?q?qYH+PDOayP4Ns26F4OpkT+6vjHQnqw5orzWp28wiiZHJi5oLxlzY8Sh12ps5KN?=
 =?us-ascii?q?OmREJhfNKpE4dcuzubOoZ0Ws8uXn1ktSkgxrEbt5O3YjIGxIk9yxPcd/CKdZWD?=
 =?us-ascii?q?7Aj5W+aLOzh4gWpoeLKhiBa29kit0vP8Vsaq31ZQtCZFkcfDtmoL1xPN7siLUP?=
 =?us-ascii?q?x9/l2u2TqX1gDT7P9LIVwsmKbFN5IsxqQ8mocdvEjdBCP6hUb7gLOMekgl+OWk?=
 =?us-ascii?q?8+Hnba/npp+YOY90kAb+MqE2l8y7AOQ4NBUOXmeC9eS/yrLj50v5T6tOjvEvla?=
 =?us-ascii?q?nYvpbaKtoBpqOiHQ9V3Zgs6wylAzelztsYh38HI0xBeB6diIjpIV7OLOjiDfij?=
 =?us-ascii?q?m1SsjCtrx/feM73lA5XNLWbMnK3ufLZg8ENczAszzdZC55NbEL0BIfTzWlPvu9?=
 =?us-ascii?q?zcFBM2Lwu0w+P/AtVnyoweQX6PArOeMK7KsV+H/OMvI/WWa48Sojr9K+Ul6OTo?=
 =?us-ascii?q?jX82glIdeaip3Z0KaHG3BPhmIkOZYWbyjdcFC2sFog0+TOnygl2YTTFTf2qyX7?=
 =?us-ascii?q?475jwjCoKmCpnMSpqugLyG2ie7GJpWa3tCClCNF3foaoqFV+0NaCKUPs9ujDgE?=
 =?us-ascii?q?WaK9RI8m0BGkrBX6xKZ/LurI5i0Ysoru28Ju5+3TkhEy9iZ4D96H3GGPVGx0mm?=
 =?us-ascii?q?IIRzkr3KFwu0B9y1GD0bRmjPxcD9Bc+/RJUgIiP57G0+N6E8zyWh7GftqRS1ap?=
 =?us-ascii?q?WNOmDSs1TtIw2dAOZUl9Fs6mjhDC2SqqHrAUm6aKBJwy7qLTwXzxK9xhxHbB0a?=
 =?us-ascii?q?krl0MmTddXNW26mq5/8BDeCJPTnEWHiammb6Qc0zTL9GeY02WOukZUUApzUaXA?=
 =?us-ascii?q?WXASfU/WrdX/5kPfQL6iE7UnMg1dycGcLqtGcMHmjVJDRP37ItTRf3qxm3usBR?=
 =?us-ascii?q?aP3r6DcZDle3sD0ynHCEgLiQYT/W2YOgg4HSqhp2PeDDpzFVPgeU/s8O9+qG+l?=
 =?us-ascii?q?QU8w1Q2Fc0ph17+t8B4PmfOcU+8T3q4DuCo5tzV0HVO939XKC9qApwttZrlcbc?=
 =?us-ascii?q?k64Fdd0WLZtgp9PpO7IqBmh14edRl3vkz02xV2DIVAjdYlrHcwwAVuLqKY1UtL?=
 =?us-ascii?q?dymE0pDoJr3XNm7y8Qi1ZK7SxF7f38iZ+6cV5PsjtlXsoRumFkwh83VgzdlYyH?=
 =?us-ascii?q?+c5pTMDAoPXpP9SEc39x5mp77EZikx/Z/b1XppMaOsqD/Nx8opBPc5yhanZ9pe?=
 =?us-ascii?q?ML6EGBXuHMEABsmuKPYlm16mbh8fOOBS9ag0P96pdvec2a6rOvpgkyyijWhd/I?=
 =?us-ascii?q?991UeM/TJmSuHUx5YF3+2Y3gyfWjfmjVeurtr4mZpZajEVBGa/zzbrBJRQZqFr?=
 =?us-ascii?q?YYkEE2OuLNCpydVkgJ7tXWVV9FqiB1MAxc+odgCeb1373Q1My0sXpWarlje/zz?=
 =?us-ascii?q?xxizsptLaQ3DTSw+T+cxoKIm5KRGh4gVbsO4S0lM0aXE6zYggtlRul41v6xqdB?=
 =?us-ascii?q?qKR+KWnTXVlHfyzsI25+Vauws6KIY9RT55MwrSVXTOO8bEiYSrHnuRsa0CDjH2?=
 =?us-ascii?q?xEyDAgbT6quZb5nx18iG2DKnZ+t37ZecB2xRfC693QX/9R3jwaRCZmjTnbHESz?=
 =?us-ascii?q?P96s/d+MjZfMrvi+V369Vp1UaSTqzZmPtCyh6W1oAB2/meu+mtnmEQg8zC/62M?=
 =?us-ascii?q?NmVSTOrBbgfIbr0762Pv5gfkltHFX88dZ1Gplikossg5EdwXsaiY+U/XYdkWfz?=
 =?us-ascii?q?LM9U2aTxbHcWQT4LwtjV4BXq2UF5L3KJwZ75WWuZwsd7e9a6ZWYW0Don789WEK?=
 =?us-ascii?q?eU8KBEnSxtr1q9rALRYuJyki0TyPQw834an/8GuBA2wSqDGLASElJVPSjtlxSO?=
 =?us-ascii?q?8tC/o79bZGepcbisykV+mcqtA62FogFZQHz5YIstHTds7sVjN1LByGHz6obheN?=
 =?us-ascii?q?XKbNMcrBuUkwrbj+hOKZI8jf4KhSthOWLgsnwp0e87jRpy3Z6kuIiLMXli/KW8?=
 =?us-ascii?q?AhRALD36e9sT+i3xjaZZhsuZxJqgHpJlGjUWRpfoSe+oHSkWtfTmMQaODTI9pm?=
 =?us-ascii?q?2aGbrZAQ+Q9kNmo2jTHJCsMnGdPGMZwsl6RBmBOExfhxgZXDcgkZ48CA+q39bt?=
 =?us-ascii?q?cFtj6jAS+174qQZMyuRyOBnkSWrfoAaoajEpSJmQNhZW7wdC51vLPsya9O58Ay?=
 =?us-ascii?q?ZY/pi5pgyXNmObfxhIDX0OWkGcB1HjOaSu5cDd8+eCAOqyNeDOYbKIqexRTPqI?=
 =?us-ascii?q?wZOv0o17/zeDLMmPP39iD+El1UpHR3x2B8PZmzAXQSwNiy3Nd9KbpAu7+iBvrs?=
 =?us-ascii?q?Cw7vXrWAHs5YuOEbdSMs9v+xe5gaidLe6QmT15JC1c1pMNw3/I1bce0EQTiyFo?=
 =?us-ascii?q?azmiD7AAuTTRQ6LXn69dFwQbZD9rNMtU86I82RFANtTGitzuzL53kP40B01BVV?=
 =?us-ascii?q?zggcypYc0KI2egNFLIHkqLNbKGJSHVzMHze6+zVbpQjOBMvR2qpTmbC1PjPiiE?=
 =?us-ascii?q?lzTxSxCvMORMgDuHMxBEpI69cghiCW74QdLiax27NsJ3jDIszb01gHPKKXATMT?=
 =?us-ascii?q?xmf0xRqb2Q6DtSgu9jFGxZ8nplMe6Elj6Z7ubCLJYWtPprAiJsmONb4HQ10b1V?=
 =?us-ascii?q?7C5fSfxxmSvSqMNuol68numOzDpnTARBqjJRiI2XukViPPaRyp4VcnbN+1o88C?=
 =?us-ascii?q?3EGgkBp9JiUvXvpqlPx9mJn6X2fmRs6dXRqOkVCsfZNcHPE3skeU7rETPbARYG?=
 =?us-ascii?q?ZT2mL2fSgwpaiv7EpS7dlYQztpW5wMlGcbRcTlFgU6pCUkk=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAADt0/5bh0O0hNFjGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGBWoIRJ4wRjAiCDRSXLoFzFBgTAYduIjQJDQEDAQE?=
 =?us-ascii?q?BAQEBAgETAQEBCA0JCCkjDII2JAGCYQEBAQECAQECJBMGAQE3AQUJAQEKEQMBA?=
 =?us-ascii?q?gEJJQMMBTsOEwWDHIF6CAWlfoFsM4J2AQEFhy0IinqBHBeBQD+EI4RKHINQgia?=
 =?us-ascii?q?JB4cWkAAJgiCICoZ8I5EVmEiBRoINMxoIKAiDJ4IbDBd/AQmHVYVgHzKBAgMBA?=
 =?us-ascii?q?SETijIBJYInAQE?=
X-IPAS-Result: =?us-ascii?q?A0ABAADt0/5bh0O0hNFjGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGBWoIRJ4wRjAiCDRSXLoFzFBgTAYduIjQJDQEDAQEBAQEBAgETAQEBC?=
 =?us-ascii?q?A0JCCkjDII2JAGCYQEBAQECAQECJBMGAQE3AQUJAQEKEQMBAgEJJQMMBTsOEwW?=
 =?us-ascii?q?DHIF6CAWlfoFsM4J2AQEFhy0IinqBHBeBQD+EI4RKHINQgiaJB4cWkAAJgiCIC?=
 =?us-ascii?q?oZ8I5EVmEiBRoINMxoIKAiDJ4IbDBd/AQmHVYVgHzKBAgMBASETijIBJYInAQE?=
X-IronPort-AV: E=Sophos;i="5.56,291,1539673200"; 
   d="scan'208";a="53020314"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 28 Nov 2018 09:48:11 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729088AbeK2Eud (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 28 Nov 2018 23:50:33 -0500
Received: from mail.kernel.org ([198.145.29.99]:58122 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1727867AbeK2Eud (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 28 Nov 2018 23:50:33 -0500
Received: from localhost (unknown [104.132.1.80])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 58CBF20832;
        Wed, 28 Nov 2018 17:48:06 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1543427286;
        bh=NoSySHPzQAJPUonyrY/rPZwF+awZHbsJm0quZ1z2Y/k=;
        h=Date:From:To:Cc:Subject:References:In-Reply-To:From;
        b=YqQMTv4JrucscYlTP3extVFCZNUk14o8Rb6uj4/el5Cn2JfzFFD7wNkG4J2r9HfdY
         AWHCQKB+DzLQ1VT2QCboG7Ar4zi0JiyD9dU2+lcQuPDXwrFZlkxBti3xBC9QMjz11S
         TqTPDuB7HoF5FXRbrDEqYGgMHjG/fgj6xFF1Yh0I=
Date: Wed, 28 Nov 2018 09:48:05 -0800
From: Jaegeuk Kim <jaegeuk@kernel.org>
To: Chao Yu <yuchao0@huawei.com>
Cc: linux-kernel@vger.kernel.org,
        linux-f2fs-devel@lists.sourceforge.net
Subject: Re: [f2fs-dev] [PATCH] f2fs: avoid frequent costly fsck triggers
Message-ID: <20181128174805.GB41969@jaegeuk-macbookpro.roam.corp.google.com>
References: <20181128073125.39102-1-jaegeuk@kernel.org>
 <724de929-6ee1-3ad7-cfa7-6e80d4e7a3da@huawei.com>
 <20181128081035.GA41969@jaegeuk-macbookpro.roam.corp.google.com>
 <4f43735a-d01f-f194-18ce-4fbbe10ad8d4@huawei.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <4f43735a-d01f-f194-18ce-4fbbe10ad8d4@huawei.com>
User-Agent: Mutt/1.8.2 (2017-04-18)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 11/28, Chao Yu wrote:
> On 2018/11/28 16:10, Jaegeuk Kim wrote:
> > On 11/28, Chao Yu wrote:
> >> Hi Jaeguek,
> >>
> >> On 2018/11/28 15:31, Jaegeuk Kim wrote:
> >>> If we want to re-enable nat_bits, we rely on fsck which requires full scan
> >>> of directory tree. Let's do that by regular fsck or unclean shutdown.
> >>
> >> Reviewed-by: Chao Yu <yuchao0@huawei.com>
> >>
> >> BTW, I have patch made some month ago...
> >>
> >> In order to detect nat_bits disabling, could we introduce one more flag for
> >> fsck?
> > 
> > Do we have a way to enable nat_bits very quickly in fsck?
> 
> For image with SBI_NATBIT_NEED_REPAIR flag, can we just check metadata and
> rebuild nat_bits based on verified nat blocks/journals?

I'm leaning to rely on full scan to enable nat_bits again. We may add a mount
count or timer to trigger fsck regularly?

> 
> Thanks,
> 
> > 
> >>
> >> >From 86e8bdb2faeec904944bb6621073f4f7de51cc2d Mon Sep 17 00:00:00 2001
> >> From: Chao Yu <yuchao0@huawei.com>
> >> Date: Sun, 9 Sep 2018 05:40:20 +0800
> >> Subject: [PATCH] f2fs: set specified flag after invalidating nat_bits
> >>
> >> Signed-off-by: Chao Yu <yuchao0@huawei.com>
> >> ---
> >>  fs/f2fs/checkpoint.c    | 12 +++++++++++-
> >>  fs/f2fs/f2fs.h          |  3 ++-
> >>  fs/f2fs/node.c          |  3 +++
> >>  include/linux/f2fs_fs.h |  1 +
> >>  4 files changed, 17 insertions(+), 2 deletions(-)
> >>
> >> diff --git a/fs/f2fs/checkpoint.c b/fs/f2fs/checkpoint.c
> >> index 7e17bb3dfcb1..f7fb14e0f5f9 100644
> >> --- a/fs/f2fs/checkpoint.c
> >> +++ b/fs/f2fs/checkpoint.c
> >> @@ -1226,13 +1226,16 @@ static void update_ckpt_flags(struct f2fs_sb_info
> >> *sbi, struct cp_control *cpc)
> >>  	unsigned long orphan_num = sbi->im[ORPHAN_INO].ino_num;
> >>  	struct f2fs_checkpoint *ckpt = F2FS_CKPT(sbi);
> >>  	unsigned long flags;
> >> +	bool disable_natbits = false;
> >>
> >>  	spin_lock_irqsave(&sbi->cp_lock, flags);
> >>
> >>  	if ((cpc->reason & CP_UMOUNT) &&
> >>  			le32_to_cpu(ckpt->cp_pack_total_block_count) >
> >> -			sbi->blocks_per_seg - NM_I(sbi)->nat_bits_blocks)
> >> +			sbi->blocks_per_seg - NM_I(sbi)->nat_bits_blocks) {
> >>  		disable_nat_bits(sbi, false);
> >> +		disable_natbits = true;
> >> +	}
> >>
> >>  	if (cpc->reason & CP_TRIMMED)
> >>  		__set_ckpt_flags(ckpt, CP_TRIMMED_FLAG);
> >> @@ -1270,11 +1273,18 @@ static void update_ckpt_flags(struct f2fs_sb_info
> >> *sbi, struct cp_control *cpc)
> >>  	if (is_sbi_flag_set(sbi, SBI_QUOTA_NEED_REPAIR))
> >>  		__set_ckpt_flags(ckpt, CP_QUOTA_NEED_FSCK_FLAG);
> >>
> >> +	if (is_sbi_flag_set(sbi, SBI_NATBIT_NEED_REPAIR))
> >> +		__set_ckpt_flags(ckpt, CP_NATBIT_NEED_FSCK_FLAG);
> >> +
> >>  	/* set this flag to activate crc|cp_ver for recovery */
> >>  	__set_ckpt_flags(ckpt, CP_CRC_RECOVERY_FLAG);
> >>  	__clear_ckpt_flags(ckpt, CP_NOCRC_RECOVERY_FLAG);
> >>
> >>  	spin_unlock_irqrestore(&sbi->cp_lock, flags);
> >> +
> >> +	if (disable_natbits)
> >> +		f2fs_msg(sbi->sb, KERN_NOTICE,
> >> +			"No enough space in CP area, disable nat_bits.");
> >>  }
> >>
> >>  static void commit_checkpoint(struct f2fs_sb_info *sbi,
> >> diff --git a/fs/f2fs/f2fs.h b/fs/f2fs/f2fs.h
> >> index f0cedbe0c536..b55341c269b2 100644
> >> --- a/fs/f2fs/f2fs.h
> >> +++ b/fs/f2fs/f2fs.h
> >> @@ -1107,6 +1107,7 @@ enum {
> >>  	SBI_QUOTA_NEED_FLUSH,			/* need to flush quota info in CP */
> >>  	SBI_QUOTA_SKIP_FLUSH,			/* skip flushing quota in current CP */
> >>  	SBI_QUOTA_NEED_REPAIR,			/* quota file may be corrupted */
> >> +	SBI_NATBIT_NEED_REPAIR,			/* nat full/empty bitmaps need repair */
> >>  };
> >>
> >>  enum {
> >> @@ -1628,7 +1629,7 @@ static inline void disable_nat_bits(struct
> >> f2fs_sb_info *sbi, bool lock)
> >>  {
> >>  	unsigned long flags;
> >>
> >> -	set_sbi_flag(sbi, SBI_NEED_FSCK);
> >> +	set_sbi_flag(sbi, SBI_NATBIT_NEED_REPAIR);
> >>
> >>  	if (lock)
> >>  		spin_lock_irqsave(&sbi->cp_lock, flags);
> >> diff --git a/fs/f2fs/node.c b/fs/f2fs/node.c
> >> index e57add1e8966..0c6f8312a087 100644
> >> --- a/fs/f2fs/node.c
> >> +++ b/fs/f2fs/node.c
> >> @@ -2902,6 +2902,9 @@ static int __get_nat_bitmaps(struct f2fs_sb_info *sbi)
> >>
> >>  	cp_ver |= (cur_cp_crc(ckpt) << 32);
> >>  	if (cpu_to_le64(cp_ver) != *(__le64 *)nm_i->nat_bits) {
> >> +		f2fs_msg(sbi->sb, KERN_NOTICE,
> >> +			"Disable nat_bits due to incorrect cp_ver (%llu, %llu)",
> >> +			cp_ver, le64_to_cpu(*(__le64 *)nm_i->nat_bits));
> >>  		disable_nat_bits(sbi, true);
> >>  		return 0;
> >>  	}
> >> diff --git a/include/linux/f2fs_fs.h b/include/linux/f2fs_fs.h
> >> index 7196653833fa..1f3ae1504573 100644
> >> --- a/include/linux/f2fs_fs.h
> >> +++ b/include/linux/f2fs_fs.h
> >> @@ -117,6 +117,7 @@ struct f2fs_super_block {
> >>  /*
> >>   * For checkpoint
> >>   */
> >> +#define CP_NATBIT_NEED_FSCK_FLAG	0X00002000
> >>  #define CP_DISABLED_FLAG		0x00001000
> >>  #define CP_QUOTA_NEED_FSCK_FLAG		0x00000800
> >>  #define CP_LARGE_NAT_BITMAP_FLAG	0x00000400
> >> -- 
> >> 2.18.0.rc1
> >>
> >>
> >>
> >>>
> >>> Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
> >>> ---
> >>>  fs/f2fs/f2fs.h | 6 +++++-
> >>>  1 file changed, 5 insertions(+), 1 deletion(-)
> >>>
> >>> diff --git a/fs/f2fs/f2fs.h b/fs/f2fs/f2fs.h
> >>> index c28a9d1cb278..aa500239baf2 100644
> >>> --- a/fs/f2fs/f2fs.h
> >>> +++ b/fs/f2fs/f2fs.h
> >>> @@ -1621,7 +1621,11 @@ static inline void disable_nat_bits(struct f2fs_sb_info *sbi, bool lock)
> >>>  {
> >>>  	unsigned long flags;
> >>>  
> >>> -	set_sbi_flag(sbi, SBI_NEED_FSCK);
> >>> +	/*
> >>> +	 * In order to re-enable nat_bits we need to call fsck.f2fs by
> >>> +	 * set_sbi_flag(sbi, SBI_NEED_FSCK). But it may give huge cost,
> >>> +	 * so let's rely on regular fsck or unclean shutdown.
> >>> +	 */
> >>>  
> >>>  	if (lock)
> >>>  		spin_lock_irqsave(&sbi->cp_lock, flags);
> >>>
> > 
> > .
> > 
