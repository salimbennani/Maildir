Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 14:13:50 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id CD6DC580213;
	Thu, 29 Nov 2018 22:03:36 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga003-1.jf.intel.com with ESMTP; 29 Nov 2018 22:03:36 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ABuaU2RUv2RWptRh4iib7FD+XH4vV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhCAtKdThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmTgLjhi?=
 =?us-ascii?q?UaOD4j6GzZitJ+gr9VrhyioBJwwYDUYJqNNPd8Za7RYc8WSHBdUstLSyBNHoWx?=
 =?us-ascii?q?ZJYPAeobOuZYqpHwqV8PrRu4GAKjBvngyjhVjXLx3aw1yeMhHRvE3AwhGdIDq3?=
 =?us-ascii?q?DUrNTzNKcPXuG51qjIzTPfb/xI3Tfx8pTHchckofyVW797bMnfyVE3Gg/bklmd?=
 =?us-ascii?q?rZbpMy6b2+gTqWSX8ultWf61h2MmqQx9uiWjy8MyhoXTho8YykrI+CVnzIovON?=
 =?us-ascii?q?G1Rk92bNi5G5VKrS6aLZF5QsY6TmFopik6zroGtIalfCgF1psn3QTTa/+ZfIiS?=
 =?us-ascii?q?5BLsSuKRLS1/hHJ/d7Kznxey8U6+xe3gTsS4zkpGoy5fntXRuH0ByQbf5tWER/?=
 =?us-ascii?q?dh5Eus2DSC2xjW6u5eIEA0kaTbK4Qmwr41jpcTtUXDHinrmET5laOWdVsr+vKu?=
 =?us-ascii?q?6+v5ZrXqv5icNoFyig7gKKQjgdK/AesmPQgURWSb+vqz1Kfl/ULnRLVGlPo2kr?=
 =?us-ascii?q?PWsJzCP8QUura5AxNJ0oYk8xu/Czam0NcGknUdI1NFZQmKj4zoO1HIPfD5Au2z?=
 =?us-ascii?q?g1WqkDd32f/GOqftDYnKLnjGiL3hZ6py61ZAyAovytBS/5JUBasAIPLvQEDxs8?=
 =?us-ascii?q?bUDh8kMwOuxebnB85w1ocfWWKJH6+YP7nesV6O5uIzPeaMYJUZtyr6K/gg//Tu?=
 =?us-ascii?q?l2M2mUcBfam12psacHK4HvN4LEmDYnrshdEBEWENvgclSOzqiVuCUSNcZnqoXq?=
 =?us-ascii?q?I84C07B5yiDYvZWo+th7mB1j+hHpJKfmBGFkyMEXDweoqeQPcMaCWSIsx7njwe?=
 =?us-ascii?q?T7ehSZQs1RWvtA/81rpmIfDY+iwetZL/ytd14/ffmg019TxxF86dyX2CT3lonm?=
 =?us-ascii?q?MUQD87xKN/rlZ7yluZ1ah4guZXFdpc5/5SVgc6NJjcz/F1CtzoWwLBeMuJR0ii?=
 =?us-ascii?q?Qtm8HT4xSdcxyccUY0lhA9WikgzD3y2yDrAIjbOLGoI7/rjc33frIcZ90GjJ1K?=
 =?us-ascii?q?8mg1kiQctPMGmmi7V79wjSAY7JjkqYm7yrdaQawC7C6mODwXCSs0FfVQ56Sb/F?=
 =?us-ascii?q?UmwHZkvKsdT54VvPQKK0BrQ5LARN086CJbFMat3yk1pGQuzuONDfY2K3hmexCg?=
 =?us-ascii?q?yExrKKbIr2ZWod2D/RB1QDkwAW5XyGLxQxBj+9o2LCCzxjDU7vY0Lp8el5tHO7?=
 =?us-ascii?q?Tk81wxuWb0F70Lq14BoVhf2aS/Mcxb8EvCYhqzNpHFeyxd7WCtyApxZ/c6VYe9?=
 =?us-ascii?q?8y/FBH1WfBvQxnIpOgN7xihkIZcwlvpUzu0wt4C4penskqtn8l1xdyJr+C31NH?=
 =?us-ascii?q?dDOY2o7wN6bTKmnz+hCvdqHX1kvf0NaQ5qcA9vA4p0//swGuE0oo629n3MVN03?=
 =?us-ascii?q?uA+pXKCxIfUJLsUkot6xd2vbDbYikn6IPS2n1hKq20sj7E29I0C+op0Begf9FD?=
 =?us-ascii?q?MKyaEA/+CdEVB8+rKOYygVimcgoEPPxO9K4zJ86mbfqG17KxM+Z6gT2min5L4I?=
 =?us-ascii?q?Zj3UKW9ipwU/LH0IwBw/6FwASHTTD8jFG6v8DzmIBEYywSH2WlxSjlAo5RerN9?=
 =?us-ascii?q?fYIRBWiyJM23w810h4TxVH5A6F6jG1QG1depeBqTdVD83Rdc1V8KoXyhgia4yz?=
 =?us-ascii?q?10kzc0rquQxiDOwuLidAYZNW5PXmVtkVDsIY2shdAAQEeodxQplAei5UvixahU?=
 =?us-ascii?q?vr5/L2rQQUdPZST2NHttUqiztrqDZc5A9pUovD5TUOS9Z1CaV7H8rwEb0yPlA2?=
 =?us-ascii?q?tR2jQ7eyu2tZX+mhxwkHidI2prrHrFZcFwwg/S5dzGSv5WxDYGRih4iT/MC1i4?=
 =?us-ascii?q?Ptmp+8iUlpjZvuC/UWKhSoNccS3xwYycsyu74HVgAQejkPCrht3nDQ863Df419?=
 =?us-ascii?q?ZwVCXEthb8YpTx2KS8PuJqZU1oBF7668pnFYByiIowhJcM2XcEgpWZ52YIkWD2?=
 =?us-ascii?q?Md9Dw6LxcGINRSIXw97S+AXl3UxjLnGTyI7jWHSS3NBhZ8WkbWMMwS0y8dpKCK?=
 =?us-ascii?q?iP4bxAnCt1pEe4rA3Lbfh8mDcd1eUh6HoAj+4Vvwotyz2XAqoOEklAISzsixOI?=
 =?us-ascii?q?4siirKVQYWaja7mx21B4ndC8F7GCuQBcVW39epcjGy9w88p+PEjN0H319oHrZt?=
 =?us-ascii?q?3QYcgPuR2TlhfKl/JVJ44plvoWmSpnPnrwsmY/xO48iRxuwIu2vIyaK2h2+KK5?=
 =?us-ascii?q?AxhYNiD6Zs8J+zHti7pekdiS34y1ApphHTALVoPyTf20CDISqejnNwGWHT0+sH?=
 =?us-ascii?q?ibHKTQHRSF5Ed6tX7PEI2rN3KKJHkf19piXwKQJEhegAASQTU7kYQ1FgGsxMz9?=
 =?us-ascii?q?bkh54iod6UL/qhtJ0uhoLQXwUn/DpAe0bTc5UJieLB1L7gFb+kfaK8qe4vhoHy?=
 =?us-ascii?q?Ff+J2hoxeAKmiaZwROEGEIVVaIB1HlPrmy+9bA9/KUCfa5L/vLeb+Os/BRV++U?=
 =?us-ascii?q?xZKz1Ytr5zaMOduOPnlhDP0721BPXXNjG8TelDUAVTYXlz/Wb8OAoBe8+yt3rt?=
 =?us-ascii?q?2w8fjxWQLv45ePBKVWMdl15x+2hqKDPfaKhCllMTZYyo8MxXjQxbcFwV4dkDtu?=
 =?us-ascii?q?eCetELgasS7NTbndmqtWDx4ddiNyO9FE76M63glRJ8Hbjsn52aJ/jv4wE11FT0?=
 =?us-ascii?q?Dumtm1ZcwWJGGwLE/HBEeONLicOTLH2d34YaOiRr1Wl+hUsxywuTCGE07sJDiD?=
 =?us-ascii?q?lj/pVwyxPuFIli2UIBteuISleBZ3FWfjVM7magG8MNJvjTw527s0hnbLNW4aKT?=
 =?us-ascii?q?d9ckNNoaeW7SNXmfh/H21B7nx4LeiLgSqZ7u/YKooIvvtvGCh7i+Va4HFpg4dS?=
 =?us-ascii?q?uShPQfFdmybIqNNq5Va8na3HyD1jSxNmqTtRgo+P+0J4NuGR7pRcVGzW1BML43?=
 =?us-ascii?q?+ZBxkDq51iENKr86VRzNfIvLj+JDdL75Tf+s5YT8HQJdKONnYsK1zyGD/PDAgE?=
 =?us-ascii?q?SxavNGfClwpclu2f8jueqZ1phILrnc8sS7kTZVUyXqcLA0MjHt0ECJN2WC4017?=
 =?us-ascii?q?+dkMMMo3G5qU+CF41hopnbW6fKUr3UIzGDgOwcag=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AHAACj0QBch0O0hNFjGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQEugSMGAQEBCwGBWoIRJ4wRjAiCIWiWShSBXxQYEwGHdCI0CQ0BAwEBAQE?=
 =?us-ascii?q?BAQIBEwEBAQgNCQgpL4I2IoJlAwMBAiRSBgkBAVADVAcSBYJRS4ICBagzM4owh?=
 =?us-ascii?q?2yEK4IWgRGCXQeBVINDhXMCkB2PNFUHApE2AhZekD6BXocbj16BRoINTSODPII?=
 =?us-ascii?q?nF44qMgEBMQGBBAEBjgEBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AHAACj0QBch0O0hNFjGwEBAQEDAQEBBwMBAQEugSMGAQE?=
 =?us-ascii?q?BCwGBWoIRJ4wRjAiCIWiWShSBXxQYEwGHdCI0CQ0BAwEBAQEBAQIBEwEBAQgNC?=
 =?us-ascii?q?QgpL4I2IoJlAwMBAiRSBgkBAVADVAcSBYJRS4ICBagzM4owh2yEK4IWgRGCXQe?=
 =?us-ascii?q?BVINDhXMCkB2PNFUHApE2AhZekD6BXocbj16BRoINTSODPIInF44qMgEBMQGBB?=
 =?us-ascii?q?AEBjgEBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,297,1539673200"; 
   d="scan'208";a="55507578"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 22:03:35 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726878AbeK3RLl (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 30 Nov 2018 12:11:41 -0500
Received: from mga12.intel.com ([192.55.52.136]:37819 "EHLO mga12.intel.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726355AbeK3RLl (ORCPT <rfc822;Linux-kernel@vger.kernel.org>);
        Fri, 30 Nov 2018 12:11:41 -0500
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from orsmga001.jf.intel.com ([10.7.209.18])
  by fmsmga106.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 22:03:30 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,297,1539673200"; 
   d="scan'208";a="114083874"
Received: from skl.sh.intel.com ([10.239.161.125])
  by orsmga001.jf.intel.com with ESMTP; 29 Nov 2018 22:03:27 -0800
From: Jin Yao <yao.jin@linux.intel.com>
To: acme@kernel.org, jolsa@kernel.org, peterz@infradead.org,
        mingo@redhat.com, alexander.shishkin@linux.intel.com
Cc: Linux-kernel@vger.kernel.org, ak@linux.intel.com,
        kan.liang@intel.com, yao.jin@intel.com,
        Jin Yao <yao.jin@linux.intel.com>
Subject: [PATCH v5 3/4] perf report: Display average IPC and IPC coverage per symbol
Date: Fri, 30 Nov 2018 21:54:56 +0800
Message-Id: <1543586097-27632-4-git-send-email-yao.jin@linux.intel.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1543586097-27632-1-git-send-email-yao.jin@linux.intel.com>
References: <1543586097-27632-1-git-send-email-yao.jin@linux.intel.com>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Support displaying the average IPC and IPC coverage per symbol
in perf report TUI and stdio modes.

For example,

$ perf record -b ...
$ perf report -s symbol

Overhead  Symbol                           IPC   [IPC Coverage]
  39.60%  [.] __random                     2.30  [ 54.8%]
  18.02%  [.] main                         0.43  [ 54.3%]
  14.21%  [.] compute_flag                 2.29  [100.0%]
  14.16%  [.] rand                         0.36  [100.0%]
   7.06%  [.] __random_r                   2.57  [ 70.5%]
   6.85%  [.] rand@plt                     0.00  [  0.0%]

Jiri Olsa <jolsa@redhat.com> provides the patch to support the
stdio mode. I merge Jiri's code in this patch.

$ perf report -s symbol --stdio

  # Overhead  Symbol                       IPC   [IPC Coverage]
  # ........  ...........................  ....................
  #
    39.60%  [.] __random                   2.30  [ 54.8%]
    18.02%  [.] main                       0.43  [ 54.3%]
    14.21%  [.] compute_flag               2.29  [100.0%]
    14.16%  [.] rand                       0.36  [100.0%]
     7.06%  [.] __random_r                 2.57  [ 70.5%]
     6.85%  [.] rand@plt                   0.00  [  0.0%]
     0.02%  [k] run_timer_softirq          1.60  [ 57.2%]

The columns "IPC" and "[IPC Coverage]" are automatically enabled
when the sort-key "symbol" is specified. If the perf.data doesn't
contain timed LBR information, columns are filled with "-".

For example,

  # Overhead  Symbol                       IPC   [IPC Coverage]
  # ........  ...........................  ....................
  #
      46.57%  [.] main                     -      -
      17.60%  [.] rand                     -      -
      15.84%  [.] __random_r               -      -
      11.90%  [.] __random                 -      -
       6.50%  [.] compute_flag             -      -
       1.59%  [.] rand@plt                 -      -
       0.00%  [.] _dl_relocate_object      -      -
       0.00%  [k] tlb_flush_mmu            -      -
       0.00%  [k] perf_event_mmap          -      -
       0.00%  [k] native_sched_clock       -      -
       0.00%  [k] intel_pmu_handle_irq_v4  -      -
       0.00%  [k] native_write_msr         -      -

 v3:
 ---
 Removed the sortkey 'ipc' from command-line. The columns "IPC"
 and "[IPC Coverage]" are automatically enabled when "symbol"
 is specified.

 v2:
 ---
 Merge in Jiri's patch to support stdio mode

Signed-off-by: Jin Yao <yao.jin@linux.intel.com>
Reviewed-by: Jiri Olsa <jolsa@kernel.org>
---
 tools/perf/builtin-report.c | 26 ++++++++++++++++---
 tools/perf/util/hist.h      |  1 +
 tools/perf/util/sort.c      | 61 +++++++++++++++++++++++++++++++++++++++++++++
 tools/perf/util/sort.h      |  2 ++
 4 files changed, 87 insertions(+), 3 deletions(-)

diff --git a/tools/perf/builtin-report.c b/tools/perf/builtin-report.c
index 257c9c1..4958095 100644
--- a/tools/perf/builtin-report.c
+++ b/tools/perf/builtin-report.c
@@ -85,6 +85,7 @@ struct report {
 	int			socket_filter;
 	DECLARE_BITMAP(cpu_bitmap, MAX_NR_CPUS);
 	struct branch_type_stat	brtype_stat;
+	bool			symbol_ipc;
 };
 
 static int report__config(const char *var, const char *value, void *cb)
@@ -129,7 +130,7 @@ static int hist_iter__report_callback(struct hist_entry_iter *iter,
 	struct mem_info *mi;
 	struct branch_info *bi;
 
-	if (!ui__has_annotation())
+	if (!ui__has_annotation() && !rep->symbol_ipc)
 		return 0;
 
 	hist__account_cycles(sample->branch_stack, al, sample,
@@ -174,7 +175,7 @@ static int hist_iter__branch_callback(struct hist_entry_iter *iter,
 	struct perf_evsel *evsel = iter->evsel;
 	int err;
 
-	if (!ui__has_annotation())
+	if (!ui__has_annotation() && !rep->symbol_ipc)
 		return 0;
 
 	hist__account_cycles(sample->branch_stack, al, sample,
@@ -1133,6 +1134,7 @@ int cmd_report(int argc, const char **argv)
 		.mode  = PERF_DATA_MODE_READ,
 	};
 	int ret = hists__init();
+	char sort_tmp[128];
 
 	if (ret < 0)
 		return ret;
@@ -1284,6 +1286,24 @@ int cmd_report(int argc, const char **argv)
 	else
 		use_browser = 0;
 
+	if (sort_order && strstr(sort_order, "ipc")) {
+		parse_options_usage(report_usage, options, "s", 1);
+		goto error;
+	}
+
+	if (sort_order && strstr(sort_order, "symbol")) {
+		if (sort__mode == SORT_MODE__BRANCH) {
+			snprintf(sort_tmp, sizeof(sort_tmp), "%s,%s",
+				 sort_order, "ipc_lbr");
+			report.symbol_ipc = true;
+		} else {
+			snprintf(sort_tmp, sizeof(sort_tmp), "%s,%s",
+				 sort_order, "ipc_null");
+		}
+
+		sort_order = sort_tmp;
+	}
+
 	if (setup_sorting(session->evlist) < 0) {
 		if (sort_order)
 			parse_options_usage(report_usage, options, "s", 1);
@@ -1311,7 +1331,7 @@ int cmd_report(int argc, const char **argv)
 	 * so don't allocate extra space that won't be used in the stdio
 	 * implementation.
 	 */
-	if (ui__has_annotation()) {
+	if (ui__has_annotation() || report.symbol_ipc) {
 		ret = symbol__annotation_init();
 		if (ret < 0)
 			goto error;
diff --git a/tools/perf/util/hist.h b/tools/perf/util/hist.h
index 3badd7f..664b5ed 100644
--- a/tools/perf/util/hist.h
+++ b/tools/perf/util/hist.h
@@ -62,6 +62,7 @@ enum hist_column {
 	HISTC_TRACE,
 	HISTC_SYM_SIZE,
 	HISTC_DSO_SIZE,
+	HISTC_SYMBOL_IPC,
 	HISTC_NR_COLS, /* Last entry */
 };
 
diff --git a/tools/perf/util/sort.c b/tools/perf/util/sort.c
index f96c005..0477935 100644
--- a/tools/perf/util/sort.c
+++ b/tools/perf/util/sort.c
@@ -13,6 +13,7 @@
 #include "strlist.h"
 #include <traceevent/event-parse.h>
 #include "mem-events.h"
+#include "annotate.h"
 #include <linux/kernel.h>
 
 regex_t		parent_regex;
@@ -422,6 +423,64 @@ struct sort_entry sort_srcline_to = {
 	.se_width_idx	= HISTC_SRCLINE_TO,
 };
 
+static int hist_entry__sym_ipc_snprintf(struct hist_entry *he, char *bf,
+					size_t size, unsigned int width)
+{
+
+	struct symbol *sym = he->ms.sym;
+	struct map *map = he->ms.map;
+	struct perf_evsel *evsel = hists_to_evsel(he->hists);
+	struct annotation *notes;
+	double ipc = 0.0, coverage = 0.0;
+	char tmp[64];
+
+	if (!sym)
+		return repsep_snprintf(bf, size, "%-*s", width, "-");
+
+	if (!sym->annotate2 && symbol__annotate2(sym, map, evsel,
+		&annotation__default_options, NULL) < 0) {
+		return 0;
+	}
+
+	notes = symbol__annotation(sym);
+
+	if (notes->hit_cycles)
+		ipc = notes->hit_insn / ((double)notes->hit_cycles);
+
+	if (notes->total_insn) {
+		coverage = notes->cover_insn * 100.0 /
+			((double)notes->total_insn);
+	}
+
+	snprintf(tmp, sizeof(tmp), "%-5.2f [%5.1f%%]", ipc, coverage);
+	return repsep_snprintf(bf, size, "%-*s", width, tmp);
+}
+
+struct sort_entry sort_sym_ipc = {
+	.se_header	= "IPC   [IPC Coverage]",
+	.se_cmp		= sort__sym_cmp,
+	.se_snprintf	= hist_entry__sym_ipc_snprintf,
+	.se_width_idx	= HISTC_SYMBOL_IPC,
+};
+
+static int hist_entry__sym_ipc_null_snprintf(struct hist_entry *he
+					     __maybe_unused,
+					     char *bf, size_t size,
+					     unsigned int width)
+{
+	char tmp[64];
+
+	snprintf(tmp, sizeof(tmp), "%-5s %2s", "-", "-");
+	return repsep_snprintf(bf, size, "%-*s", width, tmp);
+}
+
+struct sort_entry sort_sym_ipc_null = {
+	.se_header	= "IPC   [IPC Coverage]",
+	.se_cmp		= sort__sym_cmp,
+	.se_snprintf	= hist_entry__sym_ipc_null_snprintf,
+	.se_width_idx	= HISTC_SYMBOL_IPC,
+};
+
 /* --sort srcfile */
 
 static char no_srcfile[1];
@@ -1574,6 +1633,7 @@ static struct sort_dimension common_sort_dimensions[] = {
 	DIM(SORT_SYM_SIZE, "symbol_size", sort_sym_size),
 	DIM(SORT_DSO_SIZE, "dso_size", sort_dso_size),
 	DIM(SORT_CGROUP_ID, "cgroup_id", sort_cgroup_id),
+	DIM(SORT_SYM_IPC_NULL, "ipc_null", sort_sym_ipc_null),
 };
 
 #undef DIM
@@ -1591,6 +1651,7 @@ static struct sort_dimension bstack_sort_dimensions[] = {
 	DIM(SORT_CYCLES, "cycles", sort_cycles),
 	DIM(SORT_SRCLINE_FROM, "srcline_from", sort_srcline_from),
 	DIM(SORT_SRCLINE_TO, "srcline_to", sort_srcline_to),
+	DIM(SORT_SYM_IPC, "ipc_lbr", sort_sym_ipc),
 };
 
 #undef DIM
diff --git a/tools/perf/util/sort.h b/tools/perf/util/sort.h
index a97cf8e..130fe37 100644
--- a/tools/perf/util/sort.h
+++ b/tools/perf/util/sort.h
@@ -229,6 +229,7 @@ enum sort_type {
 	SORT_SYM_SIZE,
 	SORT_DSO_SIZE,
 	SORT_CGROUP_ID,
+	SORT_SYM_IPC_NULL,
 
 	/* branch stack specific sort keys */
 	__SORT_BRANCH_STACK,
@@ -242,6 +243,7 @@ enum sort_type {
 	SORT_CYCLES,
 	SORT_SRCLINE_FROM,
 	SORT_SRCLINE_TO,
+	SORT_SYM_IPC,
 
 	/* memory mode specific sort keys */
 	__SORT_MEMORY_MODE,
-- 
2.7.4

