Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 08:52:02 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id AAC6D580213
	for <like.xu@linux.intel.com>; Thu, 29 Nov 2018 14:55:57 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga007-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 14:55:57 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AoEiXhBGXJzUGY1CLDKcAo51GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ76p8i9bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJVCJPAp2y?=
 =?us-ascii?q?YYUNAOoPIelXoYbyqVQToxumBwSiBuzixiJGi3Pqw6I6yP8sER3E0QE6A94CrG?=
 =?us-ascii?q?7ZodfzOawPUe611q7IzTDbYv5Lxzj97orIfQokofGNW7J7bMjfxlc1FwPfkFqQ?=
 =?us-ascii?q?r5flMC+V1uQIsmiU8vZgXv+ohmE8tQ5xpDivy9wviobXnIIVzE7L9SFjzIkpP9?=
 =?us-ascii?q?23UlV7Yd6lEJtWuCGWLYx2QtktQ2xxvisx174IuYajcSQU1JgqxATTZ+Gaf4WL?=
 =?us-ascii?q?+B7vSuicLDdiiH54er+znxe//Ea6xuHiSMW500xGojdfntTMtH0A0QHY5NKdRf?=
 =?us-ascii?q?tn5Eih3C6C1wDN5eFAJkA5ja7bK586wr4sjZofq0vDHinrmEnsi6+WbEok9vCp?=
 =?us-ascii?q?6+ThfLrmuoeRO5Fohgz9KKgih9GzDOciPgQQUWWW+f6w2KDh8EHhRbVFlPw2kq?=
 =?us-ascii?q?3XsJDAIsQbo7a0AxZL3YYm9hazFiqp38oGnXYZKFJJYQmIj4/0O1HIPP/3E+y/?=
 =?us-ascii?q?j1OokDdqxPDJIKftA5rQLnXblLfhfLB961NTyQYpzNBf4Y5UBa8FIP7pRkDxs9?=
 =?us-ascii?q?nYAwQ/MwyzxebnB9N91p4EVWKIGK+ZP7vesUWU6eI3P+mMeIgVtS75K/gk5P7h?=
 =?us-ascii?q?k2U1mFAAfaSy2ZsXaXa4HulpIkmDYHrshMsBHnkOvgYkUOPqj1iCAnZuYW2vVf?=
 =?us-ascii?q?c8+i0jE9DhSoPCXZy2xrqG2ii9A9tRfG8BD1mNFXLhccKDQ+sNbySJZdZslyFB?=
 =?us-ascii?q?WbW/Roty6Be1qQWvzrNmKvbTqDQVsI+m2NVr6umWjxwr6DFvE+yb1GeCSXwymX?=
 =?us-ascii?q?kHECQr1qJyqlAo11GYzKJjiOZZH9EA2/QcaAYxNZfGw6RaBtb+VxjaedHBHEyn?=
 =?us-ascii?q?SdWvGz13Tt83z9IUeEF7M9GjiBnZ2GytGbBD0/SSCZkpt67RwXX1D8B6zXnAye?=
 =?us-ascii?q?8mlVZ1bNFIMDiMi6h9/g3SAcbpnl+DmqCxfqQZ3SLRvDOJwGyOlEJVSgh9VePO?=
 =?us-ascii?q?R3kEZkrQopL+/EyUHOzmMqguLgYUkZ3KEaBNcNC8yAweHPo=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0C0AACZbQBchxHrdtBlGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBZYExhluId4sqgg2JHpAZFBgUh3QiOBIBAwEBAQEBAQIBEwEBAQoLCQg?=
 =?us-ascii?q?bDi+CNgUCAxoBBoJbAQEBAQIBAQIgBB8KKQMCAQECBgEBChgCAiIEAgIDAVMGA?=
 =?us-ascii?q?ReDHIF1BQgBBKk4fDOFQYRugQuLCxeBQD+DJX6IBYJXAolZhhGQLwoJkTIYgVq?=
 =?us-ascii?q?PQoh4gQOOU4FdgXZ9CIMokG4tgTiLSIF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0C0AACZbQBchxHrdtBlGwEBAQEDAQEBBwMBAQGBZYExhlu?=
 =?us-ascii?q?Id4sqgg2JHpAZFBgUh3QiOBIBAwEBAQEBAQIBEwEBAQoLCQgbDi+CNgUCAxoBB?=
 =?us-ascii?q?oJbAQEBAQIBAQIgBB8KKQMCAQECBgEBChgCAiIEAgIDAVMGAReDHIF1BQgBBKk?=
 =?us-ascii?q?4fDOFQYRugQuLCxeBQD+DJX6IBYJXAolZhhGQLwoJkTIYgVqPQoh4gQOOU4Fdg?=
 =?us-ascii?q?XZ9CIMokG4tgTiLSIF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,296,1539673200"; 
   d="scan'208";a="53241651"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 29 Nov 2018 14:55:56 -0800
Received: from localhost ([::1]:56980 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gSVDw-0003RO-3F
	for like.xu@linux.intel.com; Thu, 29 Nov 2018 17:55:56 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:53700)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <benh@kernel.crashing.org>) id 1gSVCy-0002qC-Fh
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 17:54:57 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <benh@kernel.crashing.org>) id 1gSVCu-0001EN-0s
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 17:54:56 -0500
Received: from gate.crashing.org ([63.228.1.57]:39102)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <benh@kernel.crashing.org>)
	id 1gSVCs-0001DX-SA
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 17:54:51 -0500
Received: from localhost (localhost.localdomain [127.0.0.1])
	by gate.crashing.org (8.14.1/8.14.1) with ESMTP id wATMsZ4i024527;
	Thu, 29 Nov 2018 16:54:36 -0600
Message-ID: <408ef3b1c0bab7d26cffeb366a5ee87bb8448fa4.camel@kernel.crashing.org>
From: Benjamin Herrenschmidt <benh@kernel.crashing.org>
To: Richard Henderson <richard.henderson@linaro.org>, qemu-devel@nongnu.org
Date: Fri, 30 Nov 2018 09:54:34 +1100
In-Reply-To: <a9dd602b-9eb1-f57a-ef21-31f08fc18729@linaro.org>
References: <f4349b9ee95cbd9d5b16e9033fdf0d7c9e99aebf.camel@kernel.crashing.org>
	<a9dd602b-9eb1-f57a-ef21-31f08fc18729@linaro.org>
Content-Type: text/plain; charset="UTF-8"
User-Agent: Evolution 3.30.2 (3.30.2-2.fc29) 
Mime-Version: 1.0
Content-Transfer-Encoding: 7bit
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.6.x [fuzzy]
X-Received-From: 63.228.1.57
Subject: Re: [Qemu-devel] [RFC/PATCH] i386: Atomically update PTEs with mttcg
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Paolo Bonzini <pbonzini@redhat.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Thu, 2018-11-29 at 11:04 -0800, Richard Henderson wrote:
> On 11/28/18 3:15 PM, Benjamin Herrenschmidt wrote:
> > +static inline uint64_t update_entry(CPUState *cs, target_ulong addr,
> > +                                    uint64_t orig_entry, uint32_t bits)
> > +{
> > +    uint64_t new_entry = orig_entry | bits;
> > +
> > +    /* Write the updated bottom 32-bits */
> > +    if (qemu_tcg_mttcg_enabled()) {
> > +        uint32_t old_le = cpu_to_le32(orig_entry);
> > +        uint32_t new_le = cpu_to_le32(new_entry);
> > +        MemTxResult result;
> > +        uint32_t old_ret;
> > +
> > +        old_ret = address_space_cmpxchgl_notdirty(cs->as, addr,
> > +                                                  old_le, new_le,
> > +                                                  MEMTXATTRS_UNSPECIFIED,
> > +                                                  &result);
> > +        if (result == MEMTX_OK) {
> > +            if (old_ret != old_le) {
> > +                new_entry = 0;
> > +            }
> > +            return new_entry;
> > +        }
> > +
> > +        /* Do we need to support this case where PTEs aren't in RAM ?
> > +         *
> > +         * For now fallback to non-atomic case
> > +         */
> > +    }
> > +
> > +    x86_stl_phys_notdirty(cs, addr, new_entry);
> > +
> > +    return new_entry;
> > +}
> 
> While I know the existing code just updates the low 32-bits, I'd rather update
> the whole entry, and make use of the old value returned from the cmpxchg.

Not all PTEs on x86 ae 64-bits, the old 32-bit format still exists, so
we'd have to create two helpers. Not a big deal mind you. I'm already
creating a second address_space_cmpxchgq_notdirty for use by powerpc

> static bool update_entry(CPUState *cs, target_ulong addr,
>                          uint64_t *entry, uint32_t bits)
> {
>     uint64_t old_entry = *entry;
>     uint64_t new_entry = old_entry | bits;
> 
>     if (qemu_tcg_mttcg_enabled()) {
>         uint64_t cmp_le = cpu_to_le64(old_entry);
>         uint64_t new_le = cpu_to_le64(new_entry);
>         uint64_t old_le;
>         MemTxResult result;
> 
>         old_le = address_space_cmpxchgl_notdirty(cs->as, addr,
>                                                  cmp_le, new_le,
>                                                  MEMTXATTRS_UNSPECIFIED,
>                                                  &result);
>         if (result == MEMTX_OK) {
>             if (old_le == cmp_le) {
>                 return true;
>             } else {
>                 *entry = le_to_cpu64(old_le);
>                 return false;
>             }
>         }
>     }
>     x86_stq_phys_notdirty(cs, addr, new_entry);
>     return true;
> }


> ....
> 
>     pdpe_addr = (pml4e & PG_ADDRESS_MASK) +
>                 (((gphys >> 30) & 0x1ff) << 3);
>     pdpe = x86_ldq_phys(cs, pdpe_addr);
>     do {
>         if (!(pdpe & PG_PRESENT_MASK)) {
>             goto do_fault;
>         }
>         if (pdpe & rsvd_mask) {
>             goto do_fault_rsvd;
>         }
>         if (pdpe & PG_ACCESSED_MASK) {
>             break;
>         }
>     } while (!update_entry(cs, pdpe_addr, &pdpe, PG_ACCESSED_MASK));
>     ptep &= pdpe ^ PG_NX_MASK;
> 
> ....

Hrm.. I see. So not re-do the full walk. Not sure it's really worth it
though, how often do we expect to hit the failing case ?

> 
> Although I think it would be really great if we could figure out something that
> allows us to promote this whole load/cmpxchg loop into a primitive that avoids
> multiple translations of the address.
> 
> No, I don't know what that primitive would look like.  :-)

You mean translating once for the load and for the udpate ? Do you
expect that translation to have such a significant cost considering
that all it needs should be in L1 at that point ?

There are subtle differences in what happens between the load and the
update, and we hope for the update to be fairly rare (even though it's
done by HW it's costly even on actual chips).

So best way I could think of would be to use a macro, so we can open-
code the statements that test/manipulate the value.

Not sure I'll get to it today though, I'm off early this afternoon for
the week-end.

Cheers,
Ben.
> 
> r~


