Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 27 Nov 2018 08:41:06 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 8CD76580322;
	Mon, 26 Nov 2018 12:48:37 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga001-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 26 Nov 2018 12:48:37 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ABghIyBavEDMJBIAvEl0KoEv/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpcm6Yx7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyJPDIOi?=
 =?us-ascii?q?YYUSDOQBM+lXoJXgqFQMoxS+HhGsCeH0xz9UmnP7x7E23/g7HAzE2gErAtIAsG?=
 =?us-ascii?q?7TrNXwLKocT+e1zKzSwjXYbvJdxDnz6JXTchEgofCMW6lwccnQyUIyEA7Fkkif?=
 =?us-ascii?q?qZH+PzKU1uUNtXOb4vFvVeKqkWEnqgVxriKzyccrj4nEn4QYwU3K+yV+xYY6P9?=
 =?us-ascii?q?y4SEhjbN6nDpRQrSeaOJVyQs84RGFooik6x7sbspC4ZCgH0IorywLbZvCdboSF?=
 =?us-ascii?q?7AzvWPyMLTp7mH5pYrOyihSq/UWjzuDwTMu53EpQoiZbjNXBt2oB2h7P5sWBV/?=
 =?us-ascii?q?Bz5F2u2SyV2ADW8uxEIV47la7cK5M53L4wmYQcsV7ZEi/1hkr2lqmWeVsg+uSy?=
 =?us-ascii?q?7OTneLrmqoedN49ylA7+LrwjltKjDek8KAQCQmaW9fqm2LH+/kD1XK9Gg/w0n6?=
 =?us-ascii?q?XBtZDVP8Ubpqq3Aw9P1YYj7g6yDzOn0NQegHkGI0tJeBGZgIjzPVHBPvT4Ae64?=
 =?us-ascii?q?g1Wiljdk2erGM6b/ApXCMHfDiq3tfbVj5E5Gzgo809Rf64hTCrEbL/L/QlXxu8?=
 =?us-ascii?q?DADh8lLwy0xP7qCNF81oMdR22DGKCYML7JvF+M5+IvJfSMZYAPtDb8Lfgl++Dh?=
 =?us-ascii?q?jXsjlVABeqmp2IMdaGqkEfR+P0WZfX3sj88BEWgQvwo+UPbliFqYXT5Tena9Ra?=
 =?us-ascii?q?Q85j4gBYKiDIfDQJ2tgbOb0Ce6GJ1Wen5JClSWHXj0cIWEXu8GaDiOLc95jjwE?=
 =?us-ascii?q?Sb+hRpcj1RGpqgD20blnLu3S+i0espLuz9x15+zVlREv+j14FcWd02eRT25qmm?=
 =?us-ascii?q?MEXSM53Kd6oUZl0FeMzbB4g+BEFdxU//5GSBw6NZ7bz+x5EdzyQBjOftWSRVai?=
 =?us-ascii?q?Q9WmBywxT90rz98PZUZ9B8utjhTZ0yW2BL8VkqSBBIYo/aLEw3jxO8F9xm7F1K?=
 =?us-ascii?q?Y7iVkqWM9PNWy8ia55+AjeHIrJk0Sfl6a3eqUQxi/N9GGfzWWQuEFUShJ/UaLA?=
 =?us-ascii?q?XXoHfEvZscz55l/eT7+pEbkoLxFOydCcJadQat3ml1NGROz9N9TYZG6xn2SwBR?=
 =?us-ascii?q?OMxr6XaIrqemMd3DjSCUQekgAT+2qGOhY6Biu7v23eCzluH0r1Y0zw6el+tG+7?=
 =?us-ascii?q?Tkgswg6XdUJhyaS69gQVhfOGTfMTxawLuCE6pjVwHVa92c/WCtWaqwpgeqVcfc?=
 =?us-ascii?q?0y4FNd2W3FsAx9O4SqL7p+iV4GbwR3o0Tu2g1rCoVBlMgqq28qzApyKK6CzFNN?=
 =?us-ascii?q?bTSY3Yr0Or3WLGny8wuia6rX2lHYzdaX9b0D6PU+q1X/og6pElAu/Glg09lQy3?=
 =?us-ascii?q?Gc/InFDBIOUZLtVUY67wJ1p7XEbSgy+YzV1WdgPrKpsjDfwd0pAuglyhG+f9pE?=
 =?us-ascii?q?NKOEFQnyE9AVBsS0KewqnUSpYQwAPOxI6KE0OMamfeOc2KG3JOZggC6mjWNf7Y?=
 =?us-ascii?q?F9z0KA7TZzRvTJ3pYF2f6Y2ASHWiz4jFegtMD3hI9FaSsTHmq51SjrGopRardu?=
 =?us-ascii?q?coYMDGekO9e3yclmh57xR35Y80auB0kH2MC1YxWSdUHy3QpK2UQRv3Ongyq4wy?=
 =?us-ascii?q?VonD4zqqqQwTLBw/7ldBoBIWNLQGhijVHxIYm7ldwaXU6obxQ3mxuh/0r1269b?=
 =?us-ascii?q?pKFnJWnJXUhIZzT2L31lUqaotruCYtRD6ZMyvSVMTeS8Z0uXSrr8oxscziPiEH?=
 =?us-ascii?q?FSxDE9dzG2pJr5mwZ2h36aLHZ2tHDZY91/xQ/D5NzAQv5cxjgGSzNiiTnUBVi8?=
 =?us-ascii?q?OMOl/c6OmJfAseC+VmShWYNVcSTwyYOAtS275XBlABGlnvCznMHnHhY+0SPhy9?=
 =?us-ascii?q?ZqUiDIpg7mYob3z6S6Lf5nfk5wCV788cV6HZtykokxhJEWwnUagpSV/XwakWb8?=
 =?us-ascii?q?K9lb2KT+bGYTSj4P2dLa/A/l2Eh7JHKT2435TmmdwtdmZ9SiYWMZwCM949pKCK?=
 =?us-ascii?q?eJ9rNEmyR1r0G8rQLQZ/h9gzgcxeEv6H4cn+EGpg4twj+BDbAVGElSJTbsmAiQ?=
 =?us-ascii?q?79CisKVXY36icb2x1Ep9h9+tFr+DrR9HWHblZJgiBzR/4dtlMFLDy3Dz7oDkeN?=
 =?us-ascii?q?/NbdMcrBGUkhHAj/RLJ5I1jPYFmS1nOWflt30/1+E7lQBu3Y29vIWfN2Vt+6e5?=
 =?us-ascii?q?DgRZNzLvYcMT5yrtjb1fnsuN24CvH5NhGigEXZfyTPKoFi4SuurjNwqUDDI8rX?=
 =?us-ascii?q?KbE6LFHQCD8Edms27PE5ezOn6MPnYZytFiRASHKExbnQAZRzE6np8/FgC3y83t?=
 =?us-ascii?q?akZ55jYN5lHmrhtA0P5nNx76Um3Hvgendi80SISDLBpR9gxC5V3aMcmA4eJoBS?=
 =?us-ascii?q?1Y4oetrA+QKmyYegRIC3sGWlefClDnP7mu48TA8ueCCuq/KfvOfauBqehEW/iU?=
 =?us-ascii?q?wpKv15Ns/yyQOcWXInliE/o711JDXHB+BsTZgigPRDYRly7XdM6boxG8+iJso8?=
 =?us-ascii?q?C78fTrXh/v5ISVB7tTN9Vv5w65gaOZO+GMgyZ5LC5S1okQyn/Q1LgfwFkShjlu?=
 =?us-ascii?q?dzazELQAti3NTKPKlq9UFR4bbCxzO9VS76IhxQlAIsrbitLz1r5lgf85EVZFVV?=
 =?us-ascii?q?r9ms63YcwGOX2yNFTCBEyTLrSJOSXLw93rYaO7UbBflvhUuAaquTmFE07vJDCD?=
 =?us-ascii?q?lzjyWhCrMOFMijybPRNEtIG8dBZtFXbsTNb8ZhKnN993iCU8wacoiXPSKW4cLT?=
 =?us-ascii?q?98fltRrr2R6CNUmOlwF3Zd4XplM+aEnT2U7+3ZKpYQrPtqDT54l+Nc4HQm1bRV?=
 =?us-ascii?q?6DtIS+BymCvXttRuuU2pkvGTyjp7VxpDsjZKi5iNvUVnOKXZ8IFPWHfE/B0X62?=
 =?us-ascii?q?WQBA8Hp99kCt3ppqBRxcLDlKP1KDde7d3U+dEQCNTTKMKCYzIdNk/JGTvdChAF?=
 =?us-ascii?q?UHaJNWiX00xclfiU7X2IrJgz88m9xsZWYrBeXV0xUPgdDxI2MsYFJcJLWTYtiq?=
 =?us-ascii?q?zToNMT92u4txrQDJFGso3cROOUGt3gLT+Yif9PYB5ekuCwFpgaKoCugx8qUVJ9?=
 =?us-ascii?q?homfXhOIBd0=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ALAADGWvxbh0O0hNFkGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUgMBAQEBAQsBAYJogQIUE4N5iHeLJIINFGaIIIRqiTgUgV8?=
 =?us-ascii?q?SAQEYDQYBiGMiNQgNAQMBAQEBAQECARMBAQEIDQkIKSMMQgEBAQMJAoFjJAGCY?=
 =?us-ascii?q?gECAwECIAQZARsdAQMCCQEBBQUYAgIFIQICAwwFDQIRAQUBIhMFgxwBgWgBAwg?=
 =?us-ascii?q?NBAEKmmg8iw18FgUBF4J3BYQ+ChknDVqBNwIBBRJ5iWKBHBeBQD+BEAGCXTWCV?=
 =?us-ascii?q?iwZBIEjHAEBAgWDGzGCJgKJGYYAgUWEWIoeLgmGfIcIgyAjCoFPhQuCbTaHAY1?=
 =?us-ascii?q?DgQqJPAYCCQcPIYEmAYILTSMVgycSggkJGoNKhRSFPz8yAQGBAAMBASETgSE2h?=
 =?us-ascii?q?3GCPgEB?=
X-IPAS-Result: =?us-ascii?q?A0ALAADGWvxbh0O0hNFkGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUgMBAQEBAQsBAYJogQIUE4N5iHeLJIINFGaIIIRqiTgUgV8SAQEYDQYBiGMiN?=
 =?us-ascii?q?QgNAQMBAQEBAQECARMBAQEIDQkIKSMMQgEBAQMJAoFjJAGCYgECAwECIAQZARs?=
 =?us-ascii?q?dAQMCCQEBBQUYAgIFIQICAwwFDQIRAQUBIhMFgxwBgWgBAwgNBAEKmmg8iw18F?=
 =?us-ascii?q?gUBF4J3BYQ+ChknDVqBNwIBBRJ5iWKBHBeBQD+BEAGCXTWCViwZBIEjHAEBAgW?=
 =?us-ascii?q?DGzGCJgKJGYYAgUWEWIoeLgmGfIcIgyAjCoFPhQuCbTaHAY1DgQqJPAYCCQcPI?=
 =?us-ascii?q?YEmAYILTSMVgycSggkJGoNKhRSFPz8yAQGBAAMBASETgSE2h3GCPgEB?=
X-IronPort-AV: E=Sophos;i="5.56,283,1539673200"; 
   d="scan'208";a="53782747"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 26 Nov 2018 12:48:35 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727262AbeK0Hnw (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 27 Nov 2018 02:43:52 -0500
Received: from mail-lj1-f193.google.com ([209.85.208.193]:44600 "EHLO
        mail-lj1-f193.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727056AbeK0Hnw (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 27 Nov 2018 02:43:52 -0500
Received: by mail-lj1-f193.google.com with SMTP id k19-v6so17942539lji.11;
        Mon, 26 Nov 2018 12:48:29 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=8CiYmec0OEdzxGLglzGhuj+8DP4rqQkpu08YMwbNeAM=;
        b=j2fKPwk9mnKDiG6GKCRIS8Yis3QdmHp1vPQFngozurafYREKwfsOjO34wtununEB8R
         s4X5i0hIOSFQi/dBpaHuE37sXuIF4n/qx6ZZRr8BYjnCeZxiHoxU1xNS2GjUEmCSXOkP
         QFMvHuhvVGOr8MnkzRybL1qSZmc9dOYmM6AZ4G/1sgzPoqCjHzt4UenbYD8Ot4ki+3/K
         5FRI1b6Ito+GUmOIevNQyb5Vv+y36RTMFVxZI4WU17A0dSW4dmFh1Wv/YPcRD6VyGp4Y
         elnw6jsZAnwQkd1brSPdR0X6d3ia/3+wFJ6OH5bTXkN8Y7bv6gaS9ITYRTfo8DplKkHe
         BeOQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:message-id:references
         :mime-version:content-disposition:in-reply-to:user-agent;
        bh=8CiYmec0OEdzxGLglzGhuj+8DP4rqQkpu08YMwbNeAM=;
        b=bEFrEiu6Ll5fuK9aGcfOjZzlyt93XVxg/KMvRiflTwen1YU5v5SaFd2YXh03puCG9f
         3JVWPh2yTA5xdPGbgadpGbPD8K6bSCTj/ZY3Gv2IQUazEuIhNdvBCMzwzvC2fITM2Efh
         8ugD1wTSpQJHlix6NZTxdnJfOK4AVonRsn20o+Xj0cYz2CNlZKVjeyqOxmB5shQcLZdN
         ldQE4Ucb2/qhI6zY+rVr0xwhYLmbVo+bckrvYZXKDviVPPS/QK02VvP/sXHlALuSShjn
         iSW7mmOhpjSNIp36cye3Iic26qSXJH2ddSDTyNsJRP8by88EluNphsZN2FTZ4uCnlfL5
         WN5A==
X-Gm-Message-State: AA+aEWZjAVwxBR0gB1UJnU+2wg3GZ0t5Ob/8k5yDBEyDDeGMPwdMDidc
        CzaFCipppsTa213uOYpm3HA=
X-Google-Smtp-Source: AFSGD/WT2QH0irouVTko+96E6m8ovhQ0uyGKFQ0KkcgzZaMecNnF9Xl0yabi1cXhhoBdrwqv7ZKYcw==
X-Received: by 2002:a2e:5854:: with SMTP id x20-v6mr2491351ljd.31.1543265308304;
        Mon, 26 Nov 2018 12:48:28 -0800 (PST)
Received: from localhost (89-70-226-70.dynamic.chello.pl. [89.70.226.70])
        by smtp.gmail.com with ESMTPSA id 1-v6sm213600lju.61.2018.11.26.12.48.27
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Mon, 26 Nov 2018 12:48:27 -0800 (PST)
Date: Mon, 26 Nov 2018 21:48:07 +0100
From: Tomasz Duszynski <tduszyns@gmail.com>
To: Himanshu Jha <himanshujha199640@gmail.com>
Cc: Tomasz Duszynski <tduszyns@gmail.com>, linux-iio@vger.kernel.org,
        linux-kernel@vger.kernel.org, devicetree@vger.kernel.org
Subject: Re: [PATCH 2/3] iio: chemical: add support for Sensirion SPS30 sensor
Message-ID: <20181126204803.GA19277@arch>
References: <20181124221415.10081-1-tduszyns@gmail.com>
 <20181124221415.10081-3-tduszyns@gmail.com>
 <20181125104434.GA19309@himanshu-Vostro-3559>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
In-Reply-To: <20181125104434.GA19309@himanshu-Vostro-3559>
User-Agent: Mutt/1.10.1 (2018-07-13)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Sun, Nov 25, 2018 at 04:14:34PM +0530, Himanshu Jha wrote:
> On Sat, Nov 24, 2018 at 11:14:14PM +0100, Tomasz Duszynski wrote:
> > Add support for Sensirion SPS30 particulate matter sensor.
> >
> > Signed-off-by: Tomasz Duszynski <tduszyns@gmail.com>
> > ---
> >  drivers/iio/chemical/Kconfig  |  11 ++
> >  drivers/iio/chemical/Makefile |   1 +
> >  drivers/iio/chemical/sps30.c  | 359 ++++++++++++++++++++++++++++++++++
> >  3 files changed, 371 insertions(+)
> >  create mode 100644 drivers/iio/chemical/sps30.c
>
> []
>
> > +#define pr_fmt(fmt) "sps30: " fmt
>
> I don't see its usage ?
>

Hint: checkout how dev_err() is defined.

> > +#include <linux/crc8.h>
> > +#include <linux/delay.h>
> > +#include <linux/i2c.h>
> > +#include <linux/iio/buffer.h>
> > +#include <linux/iio/iio.h>
> > +#include <linux/iio/sysfs.h>
> > +#include <linux/iio/trigger_consumer.h>
> > +#include <linux/iio/triggered_buffer.h>
> > +#include <linux/module.h>
> > +
> > +#define SPS30_CRC8_POLYNOMIAL 0x31
> > +
> > +/* SPS30 commands */
> > +#define SPS30_START_MEAS 0x0010
> > +#define SPS30_STOP_MEAS 0x0104
> > +#define SPS30_RESET 0xd304
> > +#define SPS30_READ_DATA_READY_FLAG 0x0202
> > +#define SPS30_READ_DATA 0x0300
> > +#define SPS30_READ_SERIAL 0xD033
>
> Could you please put a tab and align these macros.
>
>   #define SPS30_START_MEAS		0x0010
>   #define SPS30_STOP_MEAS		0x0104
>

In my opinion this sort of alignment does not pay off in the long run.
Adding a new definition, a slightly longer one perhaps, can easily break
formatting.

So I would stay with current one.

>
> > +static int sps30_write_then_read(struct sps30_state *state, u8 *buf,
> > +				 int buf_size, u8 *data, int data_size)
> > +{
> > +	/* every two received data bytes are checksummed */
> > +	u8 tmp[data_size + data_size / 2];
>
> No VLAs!
>
> https://lore.kernel.org/lkml/CA+55aFzCG-zNmZwX4A2FQpadafLfEzK6CC=qPXydAacU1RqZWA@mail.gmail.com/
>

Looks like -Wvla is some fairly recent addition to KBUILD_CFLAGS.

> > +	int ret, i;
> > +
> > +	/*
> > +	 * Sensor does not support repeated start so instead of
> > +	 * sending two i2c messages in a row we just send one by one.
> > +	 */
> > +	ret = i2c_master_send(state->client, buf, buf_size);
> > +	if (ret != buf_size)
> > +		return ret < 0 ? ret : -EIO;
> > +
> > +	if (!data)
> > +		return 0;
> > +
> > +	ret = i2c_master_recv(state->client, tmp, sizeof(tmp));
> > +	if (ret != sizeof(tmp))
> > +		return ret < 0 ? ret : -EIO;
> > +
> > +	for (i = 0; i < sizeof(tmp); i += 3) {
> > +		u8 crc = crc8(sps30_crc8_table, &tmp[i], 2, CRC8_INIT_VALUE);
> > +
> > +		if (crc != tmp[i + 2]) {
> > +			dev_err(&state->client->dev,
> > +				"data integrity check failed\n");
> > +			return -EIO;
> > +		}
> > +
> > +		*data++ = tmp[i];
> > +		*data++ = tmp[i + 1];
> > +	}
> > +
> > +	return 0;
> > +}
> > +
> > +static int sps30_do_cmd(struct sps30_state *state, u16 cmd, u8 *data, int size)
> > +{
> > +	/* depending on the command up to 3 bytes may be needed for argument */
> > +	u8 buf[sizeof(cmd) + 3] = { cmd >> 8, cmd };
>
> This is fine, since sizeof returns constant integer expression.
>
> > +	switch (cmd) {
> > +	case SPS30_START_MEAS:
> > +		buf[2] = 0x03;
> > +		buf[3] = 0x00;
> > +		buf[4] = 0xac; /* precomputed crc */
> > +		return sps30_write_then_read(state, buf, 5, NULL, 0);
> > +	case SPS30_STOP_MEAS:
> > +	case SPS30_RESET:
> > +		return sps30_write_then_read(state, buf, 2, NULL, 0);
> > +	case SPS30_READ_DATA_READY_FLAG:
> > +	case SPS30_READ_DATA:
> > +	case SPS30_READ_SERIAL:
> > +		return sps30_write_then_read(state, buf, 2, data, size);
> > +	default:
> > +		return -EINVAL;
> > +	};
> > +}
>
>
> > +static int sps30_read_raw(struct iio_dev *indio_dev,
> > +			  struct iio_chan_spec const *chan,
> > +			  int *val, int *val2, long mask)
> > +{
> > +	struct sps30_state *state = iio_priv(indio_dev);
> > +	int ret;
> > +
> > +	switch (mask) {
> > +	case IIO_CHAN_INFO_PROCESSED:
> > +		switch (chan->type) {
> > +		case IIO_MASSCONCENTRATION:
> > +			mutex_lock(&state->lock);
> > +			switch (chan->channel2) {
> > +			case IIO_MOD_PM2p5:
>
> I think lock should be placed here
>
> > +				ret = sps30_do_meas(state, val, val2);
>
> ... and unlock here.
>
> > +				break;
> > +			case IIO_MOD_PM10:
> > +				ret = sps30_do_meas(state, val2, val);
> > +				break;
> > +			default:
> > +				break;
> > +			}
> > +			mutex_unlock(&state->lock);
> > +			if (ret)
> > +				return ret;
> > +
> > +			return IIO_VAL_INT;
> > +		default:
> > +			return -EINVAL;
> > +		}
> > +		break;
> > +	default:
> > +		return -EINVAL;
> > +	}
> > +}
>
> []
>
> > +static int sps30_probe(struct i2c_client *client)
> > +{
> > +	struct iio_dev *indio_dev;
> > +	struct sps30_state *state;
> > +	u8 buf[32] = { };
>
> This is not valid in ISO-C but only in C++.
>
> Instead,
>
> 	u8 buf[32] = {0};
>
> > +	int ret;
> > +
> > +	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C))
> > +		return -EOPNOTSUPP;
> > +
> > +	indio_dev = devm_iio_device_alloc(&client->dev, sizeof(*state));
> > +	if (!indio_dev)
> > +		return -ENOMEM;
> > +
> > +	state = iio_priv(indio_dev);
> > +	i2c_set_clientdata(client, indio_dev);
> > +	state->client = client;
> > +	indio_dev->dev.parent = &client->dev;
> > +	indio_dev->info = &sps30_info;
> > +	indio_dev->name = client->name;
> > +	indio_dev->channels = sps30_channels;
> > +	indio_dev->num_channels = ARRAY_SIZE(sps30_channels);
> > +	indio_dev->modes = INDIO_DIRECT_MODE;
> > +	indio_dev->available_scan_masks = sps30_scan_masks;
> > +
> > +	mutex_init(&state->lock);
> > +	crc8_populate_msb(sps30_crc8_table, SPS30_CRC8_POLYNOMIAL);
> > +
> > +	/*
> > +	 * Power-on-reset causes sensor to produce some glitch on i2c bus
> > +	 * and some controllers end up in error state. Recover simply
> > +	 * by placing something on the bus.
> > +	 */
> > +	ret = sps30_do_cmd(state, SPS30_RESET, NULL, 0);
> > +	if (ret) {
> > +		dev_err(&client->dev, "failed to reset device\n");
> > +		return ret;
> > +	}
> > +	usleep_range(2500000, 3500000);
>
> Isn't that range too high ?
> msleep_interruptible ?
>

Might be.

> > +	sps30_do_cmd(state, SPS30_STOP_MEAS, NULL, 0);
> > +
> > +	ret = sps30_do_cmd(state, SPS30_READ_SERIAL, buf, sizeof(buf));
> > +	if (ret) {
> > +		dev_err(&client->dev, "failed to read serial number\n");
> > +		return ret;
> > +	}
> > +	dev_info(&client->dev, "serial number: %s\n", buf);
> > +
> > +	ret = sps30_do_cmd(state, SPS30_START_MEAS, NULL, 0);
> > +	if (ret) {
> > +		dev_err(&client->dev, "failed to start measurement\n");
> > +		return ret;
> > +	}
> > +
> > +	ret = devm_iio_triggered_buffer_setup(&client->dev, indio_dev, NULL,
> > +					      sps30_trigger_handler, NULL);
> > +	if (ret)
> > +		return ret;
> > +
> > +	return devm_iio_device_register(&client->dev, indio_dev);
> > +}
> > +
> > +static int sps30_remove(struct i2c_client *client)
>
> Perfect candidate for `devm_add_action_or_reset()` ?
>
> > +{
> > +	struct iio_dev *indio_dev = i2c_get_clientdata(client);
> > +	struct sps30_state *state = iio_priv(indio_dev);
> > +
> > +	sps30_do_cmd(state, SPS30_STOP_MEAS, NULL, 0);
> > +
> > +	return 0;
> > +}
>
>
> --
> Himanshu Jha
> Undergraduate Student
> Department of Electronics & Communication
> Guru Tegh Bahadur Institute of Technology
