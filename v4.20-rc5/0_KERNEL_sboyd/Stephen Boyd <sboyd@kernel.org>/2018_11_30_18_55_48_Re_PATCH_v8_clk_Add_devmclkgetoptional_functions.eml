Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:21:56 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id C7320580213;
	Fri, 30 Nov 2018 10:55:56 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by fmsmga002-1.fm.intel.com with ESMTP; 30 Nov 2018 10:55:55 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AjysHahJJ2apk+K47XtmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgUL/z7rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZQsleWCNPDJ28?=
 =?us-ascii?q?YYQNAeoPPuhXoZTzqVsVtRuzBxKhBP/2yjJSmnP6wbc33uYnHArb3AIgBdUOsH?=
 =?us-ascii?q?HModvoKKcdT/i1zKnWwjXFcvhbxDD96YjVfRs8pvyMRql/cc3RyEYyDA7FjUuf?=
 =?us-ascii?q?qZbjPzyL0uQBqW+b7/BvVe+2jWMstgJ/oiC3y8syloXEgpgZxk3K+Cln2oo5ON?=
 =?us-ascii?q?61RFJhbdOlEpZcrzyWO5d5T884Xm1ltjg2xqcatZKhfiUHx5IqzAPFZfOdaYiH?=
 =?us-ascii?q?+BfjWf6RIThmgHJlf6qyhwi98Ue+0O3wTMq030hQripDjNbMsmoB1xvJ6siIUv?=
 =?us-ascii?q?d9/0Gh1iiT1w3L9O1IPUQ5mbDGJ5Mv3LI8jIcfvEffEiPsmUj7jreadkA+9eip?=
 =?us-ascii?q?7+TnbK/mppiZN4JsjgH+M6IumtGwAOghMQgBQXKb+eKi273n5EH5R7tLjvsona?=
 =?us-ascii?q?nDq53aO8sbqbCjAwNP0YYs9Qy/DzG439Qch3UHK0hFeB2fg4jzJ17OOOz4Deu4?=
 =?us-ascii?q?g1m0lDdrxvPGMaP7DpTCM3jOi7Phfbd7605Bxws/19Ff55RICr4fJPL/QFP+tN?=
 =?us-ascii?q?vdDhUhKQy73/7nCMlh1oMZQW+PArWWMKLOsVCS4eIjOemMZJIPtzb7JPgo/Pru?=
 =?us-ascii?q?jX4/mV8Acqilx5oXaHakHvt4J0WVe2bjgtAEEW0SpAoxUPTqiEGeUT5Uf3uyXa?=
 =?us-ascii?q?U86S8hBIKlCofDQIatgLua0Se/H51WYH1GC1+WHXfpcYWER+kDaCaILsB9lTwE?=
 =?us-ascii?q?UKCrS5U92hG2qA/6171nI/LO9S0DtZLj09t16/fJlR4o9zx5FMCd02CLT2FpkW?=
 =?us-ascii?q?IEXT423KZjoUNjzlePy7R3g/tdFdZL/fNGTh86NYLAz+x9E93yWRjOftGTRFai?=
 =?us-ascii?q?Q9WpGzcxTt0qzt8KYkZ9Hciijx/Z0yqrBb8Vi6KEBJgu/q3A2HjxIt53y2za26?=
 =?us-ascii?q?k5k1kmXsxPOHW7iaFl6QjcGZTFk0WDmKasbqQTwijN+GCHzWqNuUFYVBV9UaHE?=
 =?us-ascii?q?XXAZe0vXos715kLET7+yF7snNhFNxtKFKqtPctfpl0lJRO//ONTCZGK8g3q/Cg?=
 =?us-ascii?q?yWxrySdobqe38S3CPGCEcalQAe5nKGNQk4Bie8rGPSFj1uFVTzY0zy9elysm+0?=
 =?us-ascii?q?TkgxzwuSdU1uy6K1+gIJhfybU/4TwrMEuCImqzVoHFa838jaC8aaqwpmZqVcZd?=
 =?us-ascii?q?I94FFI1W/Cswx9P5qgL71th1IEcgR3uV/u2AtzColajccqq3YqxhJoKa2EyFNB?=
 =?us-ascii?q?ay+Y3ZfoN7LNLmn94h+uZLDW213Ey9mW57oA5+4+q1XguwGpCFEv83Fm09lTzn?=
 =?us-ascii?q?ud6Y/GDAsUUZLtTEk38wJ2qK3dYik4/4nUz2FjMbGosj/e3NIkHOskygu6c9hD?=
 =?us-ascii?q?Kq+FFQ/yHNccB8ihM+Eqn1mpbhQZPOFd7qI0PsWmd+eY166vJupvgDWmjWFf6o?=
 =?us-ascii?q?Bnzk2M7zZ8SvLP35sd2fGY3xeIWC3mjFi8tcD7g4ZEai8IHmq+0CTrGJReZqlv?=
 =?us-ascii?q?cokVE2euJMu3y856h57sXX5Y6VGiC0kH2M+vZRqdcVj90RdM2kQQpHytgTG4wC?=
 =?us-ascii?q?BskzE1sqqf2zTDwuTjdBYdOm9HXnJijUrqIYWvi9AaXU6obxUmlRe/5Eb6wbRb?=
 =?us-ascii?q?q7p7L2XJXUhIeC32JXl4UqSsrrqCf9JP6JQwvCVVSuu8e1OaSr36oxcAyCPsBW?=
 =?us-ascii?q?hexDM6dzGspJr5mQd3iGacLHZ1sXrYdtt8xRbZ5NzAW/FR2iAKSzV/iTnSHlK8?=
 =?us-ascii?q?JcWm/c2Il5ffteCzT2KgWYdUcSXxz4OAtS276HZuAR2+mfCzh9LmHRI70S/9y9?=
 =?us-ascii?q?llSyHIoAzgbYns0qSwKfhncVVwBF/g98p6HZlzkogqi5ERw3QahoiV8mABkWf8?=
 =?us-ascii?q?Kthb3aP+bHwQRT8E2dLV4Q7l2FF9IXKN3Y72SnKdws55bdmgfmwWwj4979xNCK?=
 =?us-ascii?q?qM6bxEnCh1rUCioQPff/d9hSsdxuU06HEBne4JogUtwz6ZArATG0lYICPtmw6J?=
 =?us-ascii?q?79C4sKVYemKvfaKs20p5mNCrFKuCrR1EWHblZpciGjd97tl4MFLJynHy65vreN?=
 =?us-ascii?q?/NbdIIrR2UkgzNj+xUKJI3i/oLijBrOWP7vX051eE7iQZi0o29vIiCM29t5r62?=
 =?us-ascii?q?AgZENj3pYMMe4irigrxZnsaSwoCjBJFhGigQUZvsTPKoFi8StPv9OwaPFj08tm?=
 =?us-ascii?q?mUGb7FEQCD70dmqmrFE4q3OHGPOHkZ0dJiSQGfJENFhQAbQi46koQlFgywx8zh?=
 =?us-ascii?q?bUR55i0X5lHisRtB0eZoNxj5UmfCqwakcDY0SJ6DLBVI6gFO/VvaMcub7uhrBS?=
 =?us-ascii?q?FX4oWhrBCRKmycfwlJDWYJWlGdB1D+JLau48PM8/OfBuq4IPvDerGOqe1YV/eV?=
 =?us-ascii?q?ypOjyIpm/zCQNsqROnluFeE02k1GXXphAcTWhy0PSzALlyLKd8ObpAmz+ix0rs?=
 =?us-ascii?q?C88fTnQgHv5ZGIC7tdL9pv4Q22gbyYOu6UhSZ5LytY15wWyX/JzrgfwEAdiyV0?=
 =?us-ascii?q?ezaxFrQAsDbHTLjMla9PEx4bdyRzOdNS4KIhxQZNI9DUi9Pv2r58j/44EFNFVV?=
 =?us-ascii?q?3nmsG0as0GOWC9NFXbBEmVMLSKPyHEw8byYamkU71fkP1UtwGsuTacC0LjIjWD?=
 =?us-ascii?q?lzzzWx+zK+1DkCGbMwJYuIymdhZtCG7jTM/paxGhMd93iyE2zqMwhn/QKWEcNj?=
 =?us-ascii?q?18eVtXrrKM9SNYnul/G2tZ43tlN+aEnSOZ7+jeKpkOsPprAj57l+RV4Hkhz7tV?=
 =?us-ascii?q?7SdEROF6mSfIr95upU2mnfeLyjZ9TBVOrTNL18q3uhBaOaTdvrRMRnHe4BIcpT?=
 =?us-ascii?q?GICxUO4dZpFdr1p6BB4sLCkq/oISwE+NXRq49UPdXPM8+DNDICMBzmUHucJTEg?=
 =?us-ascii?q?BRqqM3zPzxhZkfeP5lWctJ0+q57xiNwJULAdSV9jRd0ADUEwJ8APOJd6WHsOlq?=
 =?us-ascii?q?+XxJoT732voDHSSd9cs5SBUeidV6a8YA2FhKVJMkNbiYjzKp4eY8iigxRv?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAABahgFch0O0hNFjGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBgzQ3J4N5iBiNciUUaJFThHmCBysBhDsDAoM?=
 =?us-ascii?q?2IjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2JAGCYgECAwECIAQZAQE3AQUJA?=
 =?us-ascii?q?QEKGAICJgICA0QQBgEXgxyCAgWleXB8M4J2AQEFhyYIgQuLDxeBQD+BETOCKjW?=
 =?us-ascii?q?FAYMEgleLHoUKkA8JkTcYkR8siE+PYoFGgg0zGggoCHgFBlaBToIbiQGFYB8yg?=
 =?us-ascii?q?QIDAQEhE40MAQE?=
X-IPAS-Result: =?us-ascii?q?A0ABAABahgFch0O0hNFjGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBgzQ3J4N5iBiNciUUaJFThHmCBysBhDsDAoM2IjQJDQEDAQEBA?=
 =?us-ascii?q?QEBAgETAQEBCA0JCCkjDII2JAGCYgECAwECIAQZAQE3AQUJAQEKGAICJgICA0Q?=
 =?us-ascii?q?QBgEXgxyCAgWleXB8M4J2AQEFhyYIgQuLDxeBQD+BETOCKjWFAYMEgleLHoUKk?=
 =?us-ascii?q?A8JkTcYkR8siE+PYoFGgg0zGggoCHgFBlaBToIbiQGFYB8ygQIDAQEhE40MAQE?=
X-IronPort-AV: E=Sophos;i="5.56,299,1539673200"; 
   d="scan'208";a="55592694"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 30 Nov 2018 10:55:53 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726850AbeLAGGD (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sat, 1 Dec 2018 01:06:03 -0500
Received: from mail.kernel.org ([198.145.29.99]:46746 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1725842AbeLAGGD (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Sat, 1 Dec 2018 01:06:03 -0500
Received: from localhost (unknown [104.132.0.74])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 51ABA20834;
        Fri, 30 Nov 2018 18:55:49 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1543604149;
        bh=Yn3Kj8SjepGfVKMZ9qAYh+MpJuICHMTg+kf4tPrygn0=;
        h=To:From:In-Reply-To:Cc:References:Subject:Date:From;
        b=tXUP6lLzV2XfLkWPdc1GUCk8AHHsFkyadFUNgvBla2I/YUDWPkuJxLT2jxXgdIbhb
         IHyP4xRLjFVqw5AoihNXw1sBAUH7PRMjnVHT5tCNPpqdOw+H6eXKD098bS5IeSGK3D
         KI+pB+R0onnWJQLoe4Mp5xGAJqPiGko/CoZLaxMo=
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: quoted-printable
To: Phil Edworthy <phil.edworthy@renesas.com>,
        Russell King - ARM Linux <linux@armlinux.org.uk>
From: Stephen Boyd <sboyd@kernel.org>
In-Reply-To: <20181130110446.GE30658@n2100.armlinux.org.uk>
Cc: Michael Turquette <mturquette@baylibre.com>,
        Andy Shevchenko <andriy.shevchenko@linux.intel.com>,
        Geert Uytterhoeven <geert@linux-m68k.org>,
        =?utf-8?q?Uwe_Kleine-K=C3=B6nig?= <u.kleine-koenig@pengutronix.de>,
        "linux-clk@vger.kernel.org" <linux-clk@vger.kernel.org>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        "linux-arm-kernel@lists.infradead.org" 
        <linux-arm-kernel@lists.infradead.org>
References: <20181120141445.21378-1-phil.edworthy@renesas.com>
 <154356894146.88331.4169293505438588293@swboyd.mtv.corp.google.com>
 <TY1PR01MB1769161656941346A08F9F8AF5D30@TY1PR01MB1769.jpnprd01.prod.outlook.com>
 <20181130110446.GE30658@n2100.armlinux.org.uk>
Message-ID: <154360414857.88331.16753630865153792604@swboyd.mtv.corp.google.com>
User-Agent: alot/0.7
Subject: Re: [PATCH v8] clk: Add (devm_)clk_get_optional() functions
Date: Fri, 30 Nov 2018 10:55:48 -0800
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Quoting Russell King - ARM Linux (2018-11-30 03:04:46)
> On Fri, Nov 30, 2018 at 10:25:37AM +0000, Phil Edworthy wrote:
> > On 30 November 2018 09:09 Stephen Boyd wrote:
> > > Quoting Phil Edworthy (2018-11-20 06:14:45)
> > > > This adds clk_get_optional() and devm_clk_get_optional() functions =
to
> > > > get optional clocks.
> > > > They behave the same as (devm_)clk_get except where there is no clo=
ck
> > > > producer. In this case, instead of returning -ENOENT, the function
> > > > returns NULL. This makes error checking simpler and allows
> > > > clk_prepare_enable, etc to be called on the returned reference with=
out
> > > > additional checks.
> > > =

> > > Ok. I guess that works by virtue of how -ENOENT is returned by various
> > > functions that are called deeper in the clk_get() path? I'm cautiously
> > > optimistic. So cautious, we should probably add a comment to these op=
tional
> > > functions that indicate they rely on the functions they call to retur=
n -ENOENT
> > > under the various conditions that make a clk optional.
> > Yes, it does indeed rely on how clk_get() is implemented.
> > Specifically, that if __of_clk_get_by_name() returns -EINVAL, the error=
 is
> > superseded by clk_get_sys() returning -ENOENT.
> > As you say, a comment may help here.
> =

> Each time the question of the optional clk_get() stuff comes up, we go
> around the same discussions time and time again.  So far, each time
> has ended up flopping.
> =

> Yes, clk_get() can only ever return -ENOENT if it falls back to the
> non-DT methods, because it assumes that the clk tables are complete
> (it can do nothing else.)
> =

> I don't think it needs a comment because it's obvious from the code
> and also from the implementation point of view.

Ok. I would still suggest a comment on of_clk_get_by_name() that
indicates what types of return values happen in there. Otherwise it's
obvious from the code after reading 3 or 4 functions deep
(__of_clk_get_by_name -> __of_clk_get -> of_parse_phandle_with_args and
__of_clk_get_from_provider) that this is what happens.

> =

> > > > +static inline struct clk *clk_get_optional(struct device *dev, con=
st
> > > > +char *id)
> > > =

> > > Any kernel doc for this function?
> > I took my cue from the surrounding functions, let me know if I have to =
add it.
> =

> I don't see you need to - this is an internal function by way of the
> "static inline" you have before it.  It's not an API function.

It's static inline in a header file. That is an API function as far as I
can tell.

