Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:21:02 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id C183E580224;
	Fri, 30 Nov 2018 09:19:03 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by fmsmga001-1.fm.intel.com with ESMTP; 30 Nov 2018 09:19:02 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AyxHODBNs35QXP0y4PCAl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KPj4pcbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Xymp4aV2Rx/ykC?=
 =?us-ascii?q?oJNyA3/nzZhMJzi6xUohyhpwdnw4PWe4yZKOZyc7nBcd4AWWZNQsBcXDFBDIOm?=
 =?us-ascii?q?aIsPCvIMM/tFr4j8ulsOrhq+DhSpCujy0DFIgWL23ak90+Q6Dw7NwQstH8kTsH?=
 =?us-ascii?q?XVsdX1N6YSXfqtzKnP0DXDa/RW2Szj54XTaB8hu/SMUahsfsrWzEkiDgXIhUiT?=
 =?us-ascii?q?p4z9Jz6ZyPgBvmyB4+Z9W++jlXQrpxxyrzSz3Mshi4vEipoLxlzZ9yh12ps5KN?=
 =?us-ascii?q?KkREJhfNKoDIZcuzuYOodqRM4pXntmtzwgyrIcvJ62ZCgKx4ojxx7Yc/GHbYeI?=
 =?us-ascii?q?7Qz5VOqLIjd3mmhleLShiBa260Sgzff8Vsas3FZLqCpKjMXMu2gT2xDP7sWLUO?=
 =?us-ascii?q?Zx80m/1TqVygze6f1ILVo1mKfZM5Ihx6Q/lpsXsUTNBC/2n0D2gbeSdkUl/Oio?=
 =?us-ascii?q?9uvmbqzlppCCLY90jB/xMqA3lsy4D+U4NBYBX3KA9OSi273s41f5TK9JjvIoiK?=
 =?us-ascii?q?nZto7VJcABqq6+GQ9V3Z4v6wyjADe+zNQYgX4HIUpBeBKGjIjmJUvCIf/lDfqk?=
 =?us-ascii?q?h1SskTFrx+3JP7H7A5XNKGTDn6nlfbpn90Fczw8zx8hF551IErEBPO7zWkjpud?=
 =?us-ascii?q?zYFBA5MhC0zPzgCNln1oMeRHiAAqmWMK7JtV+I5+QvI/SDZYMPuTb9LeQl6ODq?=
 =?us-ascii?q?jXMjhVAdeqyp14MNaH+kBvRmP1mZYX30j9cDFmcFoBAyTO/tiF2EVz5TYG2/X6?=
 =?us-ascii?q?Y95jE9FYKnAp3PRoGrgLydwii7GodaaXxBClCJCX3obZmLW+8QaCKOJc9siiYL?=
 =?us-ascii?q?VaOhS48m1hGirhX6xKBlLufP/i0YtJTj1MV65uHJlBEy8yB0ANqZ022XU250mW?=
 =?us-ascii?q?YITScs3K9juUx91kuD0a9gjvxbD9NT4elFUgM7NZHGyex6BMv/WgbAftePVVan?=
 =?us-ascii?q?Tc+qATA3TtIt3dAOZ1xxFMmljhDGxyCqGaMal6SXBJwo9aLRx2X+KNxjy3nYzq?=
 =?us-ascii?q?Uhj0MpQs1UNWK4gK5z8AzTB43Mk0WdjKuqcaUc3CjQ9GaM12aOvUdYUBJuXqXB?=
 =?us-ascii?q?R3wQekzWrdHh7EPYU7CuEagnMhdGycOaN6RFcMPpgktcSPfjItveZXmxlHm2BR?=
 =?us-ascii?q?uTwrOMbYzqe3gS3SnHCUgElRwT8miCNQQkGiihpGfeBiR0FV3ze0Ps7fV+qHSj?=
 =?us-ascii?q?Q08ozgGKakph16a1+h8Vn/CcV+kf3rUeuCclqjV0Glm90snSC9qBoQphYapdbc?=
 =?us-ascii?q?k84FdByWLWqQh9Moa8IKBlg14Uax53sF/21xVrFoVAltAno2kuzAVsJqOXzlNA?=
 =?us-ascii?q?eymD0pDtJ7LYMG/y/BOoa67IwVze1NeW+qES6PU3sVnjvQepFlY8/HVjydVaz3?=
 =?us-ascii?q?yc5pDSBgoITZ3xSlo39wR9p7zCYig9+pnY2mF2Pai1sj/NwdQpBOQ+xxakftdf?=
 =?us-ascii?q?Nr6EFQDoH80bAciuNPIlm1yzYh0YO+BS8bY+P9m6ePuexK6rIOFgkSq8jWRG/I?=
 =?us-ascii?q?9yyFiM+Dd7SuLS2ZYK3euY3gqeWzjgllihtt34lp5eZTEVGGqy0izkBI9XZq1v?=
 =?us-ascii?q?cocHE2auI8urxtpgg57hQWJX9FmmB1kews+mZQKSb0Dh3Q1XzUkWoX2nlTG4zj?=
 =?us-ascii?q?BuiDEps6yf0TfKw+TjchoHJ2FKSHNjjVfqPYi7kdQaUFK0YAgukRuv/Vz6yLRD?=
 =?us-ascii?q?pKRjM2nTRl9FfyrsIGF4Uauwtb2Cb9RU6JwysiVXU+W8YVaERb77uBYa1yLjH2?=
 =?us-ascii?q?1DxDE0bT2qu5P5nwBkh2KZNnp8sH3ZecRozxfF+NPcXeJR3iYBRCRgiTjYHF+8?=
 =?us-ascii?q?M8Or/dWVkZfOqeS+V2OnVp1Ofijn14KAtC2n5WJ0BR2zhey8mtriEQIiyy/0y8?=
 =?us-ascii?q?FqVTnUrBb7eoTr1L61MeN9ckloGV/z8cx6Go5ln4s0hZEQ32Uah5qP8XoGl2fz?=
 =?us-ascii?q?LctU2abkYHURQj4Lxsbf4BL51017MnKJ24X5W22YwstgZNm1eHka2ywj4MBRFK?=
 =?us-ascii?q?eb8qZEkjBrrVqiogLcevx9njYbyfsz538WmeAJuAwxziqDBrAeB1VXPSvplx6Q?=
 =?us-ascii?q?9dCxsL1XZHqzcbi3zEd+gdehDLSYrgBdQnn5fIoiHTRr7sV+K1/M1Hzz6of5eN?=
 =?us-ascii?q?jfd94TtxuUkwvegOhRMp4+iv0KhS9/M2LnoXIl0/I7jQBp3Zyip4eIMWJt/Kak?=
 =?us-ascii?q?AhJCMj31etge+jXsjaZYg8aX0JqjHpRnGjUXQpToSeikHy4VtfTiLwyOCiEzqm?=
 =?us-ascii?q?+HGbrDGg+S8EVmoGjKE5+1LHGbPmUZwc9hRBmAJ0xfnQYUUy8hnpMiEgCqxcrh?=
 =?us-ascii?q?cFp25zwL5174rAdMxfxsNxXlTmjfowKoYC8uSJeDNBpW8h1C50DNPM2e6eJzAj?=
 =?us-ascii?q?hY/oC7owyLMGCbfANIDWcGWkGfA1DjP7+u5cTP8uSCB+q+KefObquKqeBES/iI?=
 =?us-ascii?q?wpev2JN8/zmQLsWPImViD/oj10pDQ395GsfZmzYOSyANlCLNdcmbpBii9S1ts8?=
 =?us-ascii?q?C/6+/mWAbu5YuJFrtTPs9j+xGwgaefKeGQgDx1Jipf1pMJ3XXI0qQQ3EYOiyFy?=
 =?us-ascii?q?cDmgCa4PtTPWQ6LKhKBWDwQXaydyNMZT66I83w9NOdPUi9/v1754iOI1BElBVV?=
 =?us-ascii?q?D7hs6pYskKKXmnNFzbHEaLKKiGJTrTzsHrYKO8TKdcg/lOuxKsuTaUDUnjMy+H?=
 =?us-ascii?q?lznoURCvLO5NgDuaPBxYpIGybBJtBXL/Q9Lhbx2xKMV3giEuwb0omnPKMnYRMD?=
 =?us-ascii?q?hmfENLq72Q7CVYje1+GmxB9HVlK+aElj2d7+nZLJYWrPRqDj51l+Jc/HQ11b9V?=
 =?us-ascii?q?4DtYS/xynSuB5uJp9lWnlPSfjzN9VV9NpyxNiYajuUR5Jb6f959OQ3/I8RsBq2?=
 =?us-ascii?q?KKBEckvdxgX+byqb1Ty5Ds3Jr0NTNF6N+cqdABFdXXKYSfN2clNgHkMDfOCU0O?=
 =?us-ascii?q?Sjv9ZjKXvFBUjPzHri7dlZM9sJW5wJc=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AeAAAucAFch0O0hNFjHgEGBwaBUQkLA?=
 =?us-ascii?q?YNrJ5gbgiGXNIFzLBMBh3YiNAkNAQMBAQEBAQECARMBAQEIDQkIKS+CNiKCZQM?=
 =?us-ascii?q?DAQIkUgYJAQFQA1QZBRaDBoICBAGnNzOKLIdshC6BVz+BEY1uAokplwwHApE5F?=
 =?us-ascii?q?pEfmiOCDU0jUIJsgicXjh0/AQExgQUBAY1JAQE?=
X-IPAS-Result: =?us-ascii?q?A0AeAAAucAFch0O0hNFjHgEGBwaBUQkLAYNrJ5gbgiGXNIF?=
 =?us-ascii?q?zLBMBh3YiNAkNAQMBAQEBAQECARMBAQEIDQkIKS+CNiKCZQMDAQIkUgYJAQFQA?=
 =?us-ascii?q?1QZBRaDBoICBAGnNzOKLIdshC6BVz+BEY1uAokplwwHApE5FpEfmiOCDU0jUIJ?=
 =?us-ascii?q?sgicXjh0/AQExgQUBAY1JAQE?=
X-IronPort-AV: E=Sophos;i="5.56,299,1539673200"; 
   d="scan'208";a="55575113"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 30 Nov 2018 09:19:00 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727671AbeLAE2e (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 30 Nov 2018 23:28:34 -0500
Received: from usa-sjc-mx-foss1.foss.arm.com ([217.140.101.70]:60984 "EHLO
        foss.arm.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1727588AbeLAE2d (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 30 Nov 2018 23:28:33 -0500
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.72.51.249])
        by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id 4763C1682;
        Fri, 30 Nov 2018 09:18:34 -0800 (PST)
Received: from en101.cambridge.arm.com (en101.cambridge.arm.com [10.1.196.93])
        by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPA id C11C63F5A0;
        Fri, 30 Nov 2018 09:18:32 -0800 (PST)
From: Suzuki K Poulose <suzuki.poulose@arm.com>
To: linux-arm-kernel@lists.infradead.org
Cc: linux-kernel@vger.kernel.org, will.deacon@arm.com,
        catalin.marinas@arm.com, dave.martin@arm.com, mark.rutland@arm.com,
        vladimir.murzin@arm.com, Suzuki K Poulose <suzuki.poulose@arm.com>
Subject: [PATCH v2 4/7] arm64: capabilities: Speed up capability lookup
Date: Fri, 30 Nov 2018 17:18:03 +0000
Message-Id: <1543598286-2663-5-git-send-email-suzuki.poulose@arm.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1543598286-2663-1-git-send-email-suzuki.poulose@arm.com>
References: <1543598286-2663-1-git-send-email-suzuki.poulose@arm.com>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

We maintain two separate tables of capabilities, errata and features,
which decide the system capabilities. We iterate over each of these
tables for various operations (e.g, detection, verification etc.).
We do not have a way to map a system "capability" to its entry,
(i.e, cap -> struct arm64_cpu_capabilities) which is needed for
this_cpu_has_cap(). So we iterate over the table one by one to
find the entry and then do the operation. Also, this prevents
us from optimizing the way we "enable" the capabilities on the
CPUs, where we now issue a stop_machine() for each available
capability.

One solution is to merge the two tables into a single table,
sorted by the capability. But this is has the following
disadvantages:
  - We loose the "classification" of an errata vs. feature
  - It is quite easy to make a mistake when adding an entry,
    unless we sort the table at runtime.

So we maintain a list of pointers to the capability entry, sorted
by the "cap number" in a separate array, initialized at boot time.
The only restriction is that we can have one "entry" per capability.
While at it, remove the duplicate declaration of arm64_errata table.

Reviewed-by: Vladimiri Murzin <vladimir.murzin@arm.com>
Tested-by: Vladimiri Murzin <vladimir.murzin@arm.com>
Signed-off-by: Suzuki K Poulose <suzuki.poulose@arm.com>
---
 arch/arm64/kernel/cpufeature.c | 32 ++++++++++++++++++++++++++++++--
 1 file changed, 30 insertions(+), 2 deletions(-)

diff --git a/arch/arm64/kernel/cpufeature.c b/arch/arm64/kernel/cpufeature.c
index aec5ecb..6a2563b 100644
--- a/arch/arm64/kernel/cpufeature.c
+++ b/arch/arm64/kernel/cpufeature.c
@@ -52,6 +52,7 @@ unsigned int compat_elf_hwcap2 __read_mostly;
 
 DECLARE_BITMAP(cpu_hwcaps, ARM64_NCAPS);
 EXPORT_SYMBOL(cpu_hwcaps);
+static struct arm64_cpu_capabilities const __ro_after_init *cpu_hwcaps_ptrs[ARM64_NCAPS];
 
 /*
  * Flag to indicate if we have computed the system wide
@@ -518,6 +519,29 @@ static void __init init_cpu_ftr_reg(u32 sys_reg, u64 new)
 }
 
 extern const struct arm64_cpu_capabilities arm64_errata[];
+static const struct arm64_cpu_capabilities arm64_features[];
+
+static void __init
+init_cpu_hwcaps_indirect_list_from_array(const struct arm64_cpu_capabilities *caps)
+{
+	for (; caps->matches; caps++) {
+		if (WARN(caps->capability > ARM64_NCAPS,
+			"Invalid capability %d\n", caps->capability))
+			continue;
+		if (WARN(cpu_hwcaps_ptrs[caps->capability],
+			"Duplicate entry for capability %d\n",
+			caps->capability))
+			continue;
+		cpu_hwcaps_ptrs[caps->capability] = caps;
+	}
+}
+
+static void __init init_cpu_hwcaps_indirect_list(void)
+{
+	init_cpu_hwcaps_indirect_list_from_array(arm64_features);
+	init_cpu_hwcaps_indirect_list_from_array(arm64_errata);
+}
+
 static void __init setup_boot_cpu_capabilities(void);
 
 void __init init_cpu_features(struct cpuinfo_arm64 *info)
@@ -564,6 +588,12 @@ void __init init_cpu_features(struct cpuinfo_arm64 *info)
 	}
 
 	/*
+	 * Initialize the indirect array of CPU hwcaps capabilities pointers
+	 * before we handle the boot CPU below.
+	 */
+	init_cpu_hwcaps_indirect_list();
+
+	/*
 	 * Detect and enable early CPU capabilities based on the boot CPU,
 	 * after we have initialised the CPU feature infrastructure.
 	 */
@@ -1750,8 +1780,6 @@ static void __init mark_const_caps_ready(void)
 	static_branch_enable(&arm64_const_caps_ready);
 }
 
-extern const struct arm64_cpu_capabilities arm64_errata[];
-
 bool this_cpu_has_cap(unsigned int cap)
 {
 	return (__this_cpu_has_cap(arm64_features, cap) ||
-- 
2.7.4

