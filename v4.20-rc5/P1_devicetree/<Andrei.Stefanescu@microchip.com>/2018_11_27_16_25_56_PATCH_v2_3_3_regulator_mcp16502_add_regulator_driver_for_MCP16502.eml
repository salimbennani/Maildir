Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 28 Nov 2018 08:46:56 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id E4D5758041B;
	Tue, 27 Nov 2018 08:26:07 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 27 Nov 2018 08:26:07 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AoSMUsBAANZllQDcv/MD1UyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP79pc+wAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VDK/5KlpVRDokj?=
 =?us-ascii?q?8KOT4n/m/Klsx+gqFVoByjqBx+34Hab46aNOFmfq7fZt4aWXNBU9xNWyBdHo+w?=
 =?us-ascii?q?co0CBPcBM+ZCqIn9okMDoByiCAmqGezv0CFHhn7s0aMnz+QuDw/G0xYmH90Qq3?=
 =?us-ascii?q?TbsMj1ObwXUeC00KbI1zLDYO9W2Tf88IjEaAwuofaJXb9pd8fa1EohFxvdg1mO?=
 =?us-ascii?q?tYDoOymZ2vkDvmSF9eZsSOGih3I9pwxwoDWj3sMhh4bTio4IyF3J9z91zYgrKd?=
 =?us-ascii?q?GiVUJ2YdGpHINety6ENIZ6XsYvTmRrtSs6xLAGt5u2cDYJxZs62xHSbv2KfJSJ?=
 =?us-ascii?q?7x/iUeuePTl4i2l4dL+5mh2861KvyvfmWcmxyFtKrjRKkt3Ltn0VyRzT5daISu?=
 =?us-ascii?q?Fn8keixzmPzQbT5f9AIUwukqrbMZEhzqYxlpoVr0vDAjf7lFvqgKKSbEko5+al?=
 =?us-ascii?q?5/r9brn7pZKQK5V4hwD8P6g2n8ywG+U4MgwAX2iB/uS80aXu/Un4QLVMk/03nb?=
 =?us-ascii?q?DVsJPEKsQBoK62HQtV3p8k6xexCTepzs4YkGIZLFJKZh2HlZLlO1LQL/DiC/ew?=
 =?us-ascii?q?nVCsnC1sx/DcMb3tGo/NIWTbkLf9YbZ97FZRyA4yzdBc+Z1YEL4AIO/oV0/1td?=
 =?us-ascii?q?zYCAI5MgOuz+bmDtV9yp0RWWaVDqCFN6PStEeC5vgzLOmUeI8VpDH9JuAl5/H0?=
 =?us-ascii?q?jH85hUUSfa6z0ZsXdXC3BPJmI0qCbHrog9cBF3oKvwUkQOzrjl2CTSBcZ3KoU6?=
 =?us-ascii?q?0g4TE7DZqsDZ3fSYC1nLyBwCC7E4VUZmBBFF+AC3Tod4KCW/cKbyKfOcthkj0C?=
 =?us-ascii?q?Vbi8RI4tzxCutAnmy7V5KurY4DEXtZXm1NJt/e3ciQky9SBoD8Say2yCVXp0nm?=
 =?us-ascii?q?MPRz81xqx/u1ZyylWY3Kh8gvxYE8FT5vxTXgc7M57c0/J1C9ToVg3dedeJTU6s?=
 =?us-ascii?q?Qs+6DjEpUtIx39gObl5+G9q4iBDPxS6qA74PmLyNC5w56abc33n3J8ZgxHfKzq?=
 =?us-ascii?q?ghj186QsRRMW2qnLJw9w/WB4TRiUWWi76qdbgA3C7K7GqM0HCBvF9GXwJqUaXK?=
 =?us-ascii?q?R3YfZlDIotT/4U/CS7yuCbEjMgZazc6CK61KasDmjFlcRffjPsjebHy1m2uqGR?=
 =?us-ascii?q?mIwbaMZpLwe2oBxCXdFFQEkwcL8HmbLwc+GDmur3jeDDN0E1LveF3j8e9lpXO/?=
 =?us-ascii?q?T080yRyKbkJ727q0/B4VmeKTS/cJ0r0Yvychri1+HEyh0NLOF9qAuw1hcb1AYd?=
 =?us-ascii?q?M85VdH0n7Ztwx9P5C6M6BunFkecx5zv0Pv0RV3BZ5NkcwrrHMs0QpzJriU0FJH?=
 =?us-ascii?q?dzOEw5/wPqfbJXX1/BCqc6TWwE3R0M6K+qcT7/Q1s0/svAW3GUst7Xpm08NZ3G?=
 =?us-ascii?q?CB5prXFgUSV5HxUkEp9xVho7HaYy89557b1HF2MKm0tCPC1MwtBOc/1hmgeNJf?=
 =?us-ascii?q?OrueFADuC80aG9SuKOsyllmpcxIIJvxd+LQ1PsOmbfSG3qGrMf1knDKni2RH/Y?=
 =?us-ascii?q?983liN9yp6Vu7HwZIFz+uE0QuAUjf2lE2hvdzvmYBYeTESGXKyyTLlBIFNfKJy?=
 =?us-ascii?q?Z5sECWC0L82x2Np+nZ/tV2dE+1G5A1MJxdGmeQCVb1z7xgBQ0UUXoXq6mSq31T?=
 =?us-ascii?q?B0kjcprraB0yzK2ejtaB0HOmtTTml4kVjsOZS0j8wdXEWwbwkplQGp5Ebgy6hA?=
 =?us-ascii?q?uaR/KXLeQUNJfyjwMmFjXbG8truEY85T9pwotT9bX/i7YVCfUrT9uQcV0zv/H2?=
 =?us-ascii?q?tCwzA2bzOqtY/jnxx5i2KdK2x/rGHDdsFzxhff5drcSuBX3jcdQCl4iD/XBkWz?=
 =?us-ascii?q?PtWz/NWUkYvDvf66V267SpJTdizrx5uatCSn/W1qHQG/n/erl9znCwc61jX319?=
 =?us-ascii?q?trVSXOtxv8Zojr16KnMeNoZEVoBVn869ZkFYF6iIc/mJYQ2X0CjJWP4XUHiXvz?=
 =?us-ascii?q?Mclc2a/mb3oCXz8Lz8TV4Aj4wkJjKH2Jypn9VnWcxMtheta7bnkX2iI788BFFq?=
 =?us-ascii?q?OU4KZYkityp1qytRjRbuRlnjcB1fsu72YXg+QIuAou1CqRGL4TEldDPSzwiRuI?=
 =?us-ascii?q?9cuxo7tNZGagarWw0Et+nda8DLCNuA1cWXD5eos8Ei909MlwLFXM0Hjr4IH+ZN?=
 =?us-ascii?q?bQdc4TtgGTkxrYk+hVL5cxmuALhCV9P2L9oGYly/U6jRF12ZG6vY6HK3hi/a6j?=
 =?us-ascii?q?Ax5YMCH1aN0X+j33kalemcOW1Zi1Hpp9AjULQIfoTfWwHT0Jr/vnMAKOECAmpn?=
 =?us-ascii?q?efBLrSBguf6EZgr3LSHJGnLXCXJH8Fzdp8QBmRPlBQgAcRXD8ihJ42ChiqxND9?=
 =?us-ascii?q?cEd+/j0R5ET3qh5SxeJzLRX/Tn3TpAS1ajc3VZifKgBZ7hpZ6kfRMMye6P9zHi?=
 =?us-ascii?q?5C8p2gqgyNNnKUZwBSAW4VXUyEAkjpPqOy6tnY7+iYGu2+IuPOYLWJtOxeTuqI?=
 =?us-ascii?q?yoip0od85DaMMcOPPnZ5Av0/20pDW215GsvDlzUOTSwXizzCb8qBqBig/S13q9?=
 =?us-ascii?q?i18O73VwL3+YuPF7xSPM1v+x+ogKeDNO2QhCdjJTZbzJMMwnDIx6YF3F4PkCFj?=
 =?us-ascii?q?bD2tEbUGtS7QQ6PcgK5XDxgHayxtMMtE9b4z3g5IOcTDkNP6yqZ4juIpC1dCTV?=
 =?us-ascii?q?HugNypatcQI26jNFLLHkKLNLWdKD3PwsH3Z768SLJKgOVVsR2wpSiUE0v5Mjuf?=
 =?us-ascii?q?kDnpUgilMftQgyGDIBxepIa9fw5xCWjiSdLqcAG0PMVrgj0237I0gGjHNWodMT?=
 =?us-ascii?q?h6bkNMoaec7SJegvVjBWNB6mBpIvWDmyac9+PYMIoZseN3AiRokOJX+HQ7xKFT?=
 =?us-ascii?q?7CFBRfx1njPdr99uo168lOmPxSFqUB5PqjZNmYKKsl9uOaTf9plcR3nE+AgB4n?=
 =?us-ascii?q?mXCxQP9JNZDYi7v69R0NTQk6X/ADhH+tPQu8AbAp6QYJadN3Ahchb1MD3ZFg0I?=
 =?us-ascii?q?SXisL26JwwQJlfiI9TuPs4Q+o57gsJMUT/lQU1ljUrtOBV5oE98CCJN2WC40n7?=
 =?us-ascii?q?mGisIB+Xu5ql/WXsoM+tiTcPOZBvHmM3C3gKNeajMNwLjiKo8TN5W90EtnPB0y?=
 =?us-ascii?q?yK/QGlHMXNlL5AdgdBQ9pm1I8XNkSWYz2lqjYQSotjtbQdWwlwM6ixY4S+k/8j?=
 =?us-ascii?q?rly1I2LUDNrysxiA86ntCz0h6LdzukeI62UZtbCmzPq0U/O5X2WA1oRQizllZj?=
 =?us-ascii?q?PzfFX/RaiL42JjMjsxPVpZYaQa0UdqZDehJFnfw=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ARAAA3b/1bh0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgTBQgVkDBAsnCoc2A4ROX4pfSoIhaJZEFIEQA0gXARgTAYh6IjQ?=
 =?us-ascii?q?JDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2IoJlAgEDAQIPFRkBATcBBQkBAQEBT?=
 =?us-ascii?q?gMvJQIEAQ0FBR2Cf4FqAxUBAwGZRAJgAooHgWwzgnYBAQWBBQGDfRiCCQiMDYI?=
 =?us-ascii?q?WgRGCXYF2gnoKAR8RhWaJH4YDQoEDjycHAoophwkWkQuYEAIEAgQFAg0BAQWBR?=
 =?us-ascii?q?oINcIM8ghsMDAuDSoocATZygQUBASGKIQ8XA4EFAYEeAQE?=
X-IPAS-Result: =?us-ascii?q?A0ARAAA3b/1bh0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBgTB?=
 =?us-ascii?q?QgVkDBAsnCoc2A4ROX4pfSoIhaJZEFIEQA0gXARgTAYh6IjQJDQEDAQEBAQEBA?=
 =?us-ascii?q?gETAQEBCA0JCCkjDII2IoJlAgEDAQIPFRkBATcBBQkBAQEBTgMvJQIEAQ0FBR2?=
 =?us-ascii?q?Cf4FqAxUBAwGZRAJgAooHgWwzgnYBAQWBBQGDfRiCCQiMDYIWgRGCXYF2gnoKA?=
 =?us-ascii?q?R8RhWaJH4YDQoEDjycHAoophwkWkQuYEAIEAgQFAg0BAQWBRoINcIM8ghsMDAu?=
 =?us-ascii?q?DSoocATZygQUBASGKIQ8XA4EFAYEeAQE?=
X-IronPort-AV: E=Sophos;i="5.56,287,1539673200"; 
   d="scan'208";a="52839965"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 27 Nov 2018 08:26:07 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1731005AbeK1DY0 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 27 Nov 2018 22:24:26 -0500
Received: from esa5.microchip.iphmx.com ([216.71.150.166]:59842 "EHLO
        esa5.microchip.iphmx.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726390AbeK1DYZ (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 27 Nov 2018 22:24:25 -0500
X-IronPort-AV: E=Sophos;i="5.56,287,1539673200"; 
   d="scan'208";a="21584166"
Received: from smtpout.microchip.com (HELO email.microchip.com) ([198.175.253.82])
  by esa5.microchip.iphmx.com with ESMTP/TLS/DHE-RSA-AES256-SHA; 27 Nov 2018 09:25:59 -0700
Received: from NAM01-BN3-obe.outbound.protection.outlook.com (10.10.215.89) by
 email.microchip.com (10.10.76.49) with Microsoft SMTP Server (TLS) id
 14.3.352.0; Tue, 27 Nov 2018 09:25:58 -0700
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=microchiptechnology.onmicrosoft.com;
 s=selector1-microchiptechnology-onmicrosoft-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=RE5DQXRKfu1S/hDr9fhh3Xr/vzgGUV7aG9da38z5Cxc=;
 b=H3UP5uCCwiWEK+pGOkB7wrLOKyEi0LsBbyCFmltwRMwa/Y2iaBN2oNCcyPnuPXpxUgDLWywrXBqoG5rP/5fzMIupOK7+Ah2pImZLceRgq2fjN1TMuRNI6GXk5nA6vXumu+abMo7AkdyV12r8qlj/rtDkdUfsFVyhSC/GaOVmZug=
Received: from BN6PR1101MB2243.namprd11.prod.outlook.com (10.174.113.19) by
 BN6PR1101MB2163.namprd11.prod.outlook.com (10.174.112.144) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1361.19; Tue, 27 Nov 2018 16:25:56 +0000
Received: from BN6PR1101MB2243.namprd11.prod.outlook.com
 ([fe80::853f:28dc:6c66:cfb1]) by BN6PR1101MB2243.namprd11.prod.outlook.com
 ([fe80::853f:28dc:6c66:cfb1%5]) with mapi id 15.20.1361.019; Tue, 27 Nov 2018
 16:25:56 +0000
From: <Andrei.Stefanescu@microchip.com>
To: <lgirdwood@gmail.com>, <robh+dt@kernel.org>,
        <mark.rutland@arm.com>, <gregkh@linuxfoundation.org>,
        <Nicolas.Ferre@microchip.com>, <Cristian.Birsan@microchip.com>,
        <Claudiu.Beznea@microchip.com>
CC: <linux-arm-kernel@lists.infradead.org>,
        <linux-kernel@vger.kernel.org>, <devicetree@vger.kernel.org>,
        <Andrei.Stefanescu@microchip.com>
Subject: [PATCH v2 3/3] regulator: mcp16502: add regulator driver for MCP16502
Thread-Topic: [PATCH v2 3/3] regulator: mcp16502: add regulator driver for
 MCP16502
Thread-Index: AQHUhm3f3pEmUcx4W0ytglrjVftBIw==
Date: Tue, 27 Nov 2018 16:25:56 +0000
Message-ID: <1543335937-12689-4-git-send-email-andrei.stefanescu@microchip.com>
References: <1543335937-12689-1-git-send-email-andrei.stefanescu@microchip.com>
In-Reply-To: <1543335937-12689-1-git-send-email-andrei.stefanescu@microchip.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-clientproxiedby: VI1PR0101CA0080.eurprd01.prod.exchangelabs.com
 (2603:10a6:800:1f::48) To BN6PR1101MB2243.namprd11.prod.outlook.com
 (2603:10b6:405:52::19)
authentication-results: spf=none (sender IP is )
 smtp.mailfrom=Andrei.Stefanescu@microchip.com; 
x-ms-exchange-messagesentrepresentingtype: 1
x-originating-ip: [94.177.32.154]
x-ms-publictraffictype: Email
x-microsoft-exchange-diagnostics: 1;BN6PR1101MB2163;6:wtUXNvGIZ8AI/O/vVAbr/wtv78yKKLcjBj0QhbxwGE60rMlZ2Q8m64dQ34aYGtgGjbY4jaLIh5iBoYaCU2hGepy54Qe0Zobv9oP9VvTXU3xOyQzfrkI1crX29iwiSAhbSK08qUrTrTmYjCx5TqNGMF0BqYfaahlLBzd+9v2DkMrUFHfejtET7Jd1tcPb07t2cM9dNETgG+IV3jjinWyUMN/09OXa2+A/eXGnfllCqAVzZ2LIkD680/C++n5+lbSRVNAEB+GINuBbOgr8ql0nGLzyxtUdzPl9R2RRhtWkh1ztYjL857MHa1EwmUj3Hv3RyeWOHDriPozr6N5JfZTkvnBPyP+lzH2xQrLRnHRaqEFF0Tfp+CUWG0yPWH4iDHCz6us5UUV+RLsgdTmdXVyBoqH1XSJeBC3lCPnpIfZqQEefcczSyz21tny1lzBdZNRWhEaGM5PfvALCCvCD+fbNjA==;5:4Gjmlm0nXykXHjjCSr5OKunGwiWTJkdKXlAgKIF+Hz83z7H0BqMdYpDmFGL99PebgjYpX5ztW4O1y0rkvFmTq65FRQBnIHAqzb2oLbBgloLfJsO2ZfORSqSRmjh+/BDFje00nyAEtg+k6J4VHcd8jcYEoi6LzTrfI8U6E3KDD+U=;7:Y85CCf4xVKNVpxxYQhiYJpGJLs3ijnkclqNt7oLHrJi4qEgF6JJrb/IYO//fQ5e3SwduJUnArjHFON28ds2rSEbMz4ES359efFA6ZzgUY7FjtOMw2lyxyis+X0NZVCMkijXjOA4tfabM55EEIsZqIg==
x-ms-office365-filtering-correlation-id: ff82d2df-5bab-4343-f129-08d6548501ba
x-microsoft-antispam: BCL:0;PCL:0;RULEID:(2390098)(7020095)(4652040)(8989299)(5600074)(711020)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(2017052603328)(7153060)(7193020);SRVR:BN6PR1101MB2163;
x-ms-traffictypediagnostic: BN6PR1101MB2163:
x-microsoft-antispam-prvs: <BN6PR1101MB2163C416B670C0BCA92C52B3EDD00@BN6PR1101MB2163.namprd11.prod.outlook.com>
x-ms-exchange-senderadcheck: 1
x-exchange-antispam-report-cfa-test: BCL:0;PCL:0;RULEID:(6040522)(2401047)(5005006)(8121501046)(93006095)(93001095)(10201501046)(3002001)(3231443)(944501410)(52105112)(148016)(149066)(150057)(6041310)(20161123560045)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123564045)(20161123558120)(20161123562045)(201708071742011)(7699051)(76991095);SRVR:BN6PR1101MB2163;BCL:0;PCL:0;RULEID:;SRVR:BN6PR1101MB2163;
x-forefront-prvs: 086943A159
x-forefront-antispam-report: SFV:NSPM;SFS:(10009020)(346002)(376002)(366004)(396003)(39860400002)(136003)(189003)(199004)(45074003)(106356001)(105586002)(72206003)(3846002)(6436002)(6116002)(81166006)(478600001)(8676002)(76176011)(6512007)(6506007)(8936002)(186003)(53936002)(102836004)(81156014)(107886003)(26005)(7736002)(316002)(6486002)(86362001)(25786009)(575784001)(4326008)(36756003)(39060400002)(5660300001)(2616005)(11346002)(446003)(476003)(2906002)(97736004)(6636002)(14444005)(71200400001)(256004)(71190400001)(14454004)(99286004)(52116002)(305945005)(110136005)(54906003)(66066001)(386003)(53946003)(2501003)(68736007)(4744004)(486006);DIR:OUT;SFP:1101;SCL:1;SRVR:BN6PR1101MB2163;H:BN6PR1101MB2243.namprd11.prod.outlook.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;MX:1;A:1;
x-microsoft-antispam-message-info: tNu5Sla6NLcCTUiMENzFaLZ2Tx950sCHDFil6OOZoGNyj3o7AKuVUGylRuQYLq0D0Qt5Jkz4BsY0JeXjfjSDMSOMt0Faf6ohtAljMpzGwlYNYlJbcSQS1/enmokxxuTXf6+Ccb0vlGvXNJLciTak4+URYYnsGX6PSW2xrRXEcbEsItP98A3RZdfo98OGvdrmKlqqzuLH0E0qUKyAv06JgbrYc138pV7uMLeWXE97rLOKjnc+RMSpP51CDQD617fvIaBf/+TteyMUIG//6gdJU9rCg8qc6ShBSGM4hELGyHPOUXBhs7/b4sNz7LUY11dhpMYjZAin1R7W/a2JFKc0kALiD5MBZSsu6ikztVxhPlA=
spamdiagnosticoutput: 1:99
spamdiagnosticmetadata: NSPM
Content-Type: text/plain; charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
X-MS-Exchange-CrossTenant-Network-Message-Id: ff82d2df-5bab-4343-f129-08d6548501ba
X-MS-Exchange-CrossTenant-originalarrivaltime: 27 Nov 2018 16:25:56.0129
 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: 3f4057f3-b418-4d4e-ba84-d55b4e897d88
X-MS-Exchange-Transport-CrossTenantHeadersStamped: BN6PR1101MB2163
X-OriginatorOrg: microchip.com
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This patch adds a regulator driver for the MCP16502 PMIC.
This drivers supports basic operations through the
regulator interface such as:
- setting/reading voltage
- setting/reading operating mode
- reading current status
- transitioning to/from suspend-to-ram and standby
  power states

Signed-off-by: Andrei Stefanescu <andrei.stefanescu@microchip.com>
---
 drivers/regulator/Kconfig    |   9 +
 drivers/regulator/Makefile   |   1 +
 drivers/regulator/mcp16502.c | 542 +++++++++++++++++++++++++++++++++++++++=
++++
 3 files changed, 552 insertions(+)
 create mode 100644 drivers/regulator/mcp16502.c

diff --git a/drivers/regulator/Kconfig b/drivers/regulator/Kconfig
index 926cee0..719d9d6 100644
--- a/drivers/regulator/Kconfig
+++ b/drivers/regulator/Kconfig
@@ -567,6 +567,15 @@ config REGULATOR_MC13892
 	  Say y here to support the regulators found on the Freescale MC13892
 	  PMIC.
=20
+config REGULATOR_MCP16502
+	tristate "Microchip MCP16502 PMIC"
+	depends on I2C && OF
+	help
+	  Say y here to support the MCP16502 PMIC. This driver supports
+	  basic operations (get/set voltage, get/set operating mode)
+	  through the regulator interface. In addition it enables
+	  suspend-to-ram/standby transition.
+
 config REGULATOR_MT6311
 	tristate "MediaTek MT6311 PMIC"
 	depends on I2C
diff --git a/drivers/regulator/Makefile b/drivers/regulator/Makefile
index 72488ef..b12e1c9 100644
--- a/drivers/regulator/Makefile
+++ b/drivers/regulator/Makefile
@@ -74,6 +74,7 @@ obj-$(CONFIG_REGULATOR_MAX77802) +=3D max77802-regulator.=
o
 obj-$(CONFIG_REGULATOR_MC13783) +=3D mc13783-regulator.o
 obj-$(CONFIG_REGULATOR_MC13892) +=3D mc13892-regulator.o
 obj-$(CONFIG_REGULATOR_MC13XXX_CORE) +=3D  mc13xxx-regulator-core.o
+obj-$(CONFIG_REGULATOR_MCP16502) +=3D mcp16502.o
 obj-$(CONFIG_REGULATOR_MT6311) +=3D mt6311-regulator.o
 obj-$(CONFIG_REGULATOR_MT6323)	+=3D mt6323-regulator.o
 obj-$(CONFIG_REGULATOR_MT6380)	+=3D mt6380-regulator.o
diff --git a/drivers/regulator/mcp16502.c b/drivers/regulator/mcp16502.c
new file mode 100644
index 0000000..b623fb0
--- /dev/null
+++ b/drivers/regulator/mcp16502.c
@@ -0,0 +1,542 @@
+/* SPDX-License-Identifier: GPL-2.0
+ *
+ * MCP16502 PMIC driver
+ *
+ * Copyright (C) 2018 Microchip Technology Inc. and its subsidiaries
+ *
+ * Author: Andrei Stefanescu <andrei.stefanescu@microchip.com>
+ *
+ * Inspired from tps65086-regulator.c
+ */
+
+#include <linux/gpio.h>
+#include <linux/i2c.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/regmap.h>
+#include <linux/regulator/driver.h>
+#include <linux/suspend.h>
+
+#define VDD_LOW_SEL 0x0D
+#define VDD_HIGH_SEL 0x3F
+
+#define MCP16502_FLT BIT(7)
+#define MCP16502_ENS BIT(0)
+
+/*
+ *
+ * The PMIC has four sets of registers corresponding to four power modes:
+ * Performance, Active, Low-power, Hibernate.
+ *
+ * Registers:
+ * Each regulator has a register for each power mode. To access a register
+ * for a specific regulator and mode BASE_* and OFFSET_* need to be added.
+ *
+ * Operating modes:
+ * In order for the PMIC to transition to operating modes it has to be
+ * controlled via GPIO lines called LPM and HPM.
+ *
+ * The registers are fully configurable such that you can put all regulato=
rs in
+ * a low-power state while the PMIC is in Active mode. They are supposed t=
o be
+ * configured at startup and then simply transition to/from a global low-p=
ower
+ * state by setting the GPIO lpm pin high/low.
+ *
+ * This driver keeps the PMIC in Active mode, Low-power state is set for t=
he
+ * regulators by enabling/disabling operating mode (FPWM or Auto PFM).
+ *
+ * The PMIC's Low-power and Hibernate modes are used during standby/suspen=
d.
+ * To enter standby/suspend the PMIC will go to Low-power mode. From there=
, it
+ * will transition to Hibernate when the PWRHLD line is set to low by the =
MPU.
+ */
+
+/*
+ * This function is useful for iterating over all regulators and accessing=
 their
+ * registers in a generic way or accessing a regulator device by its id.
+ */
+#define MCP16502_BASE(i) (((i) + 1) << 4)
+#define MCP16502_STAT_BASE(i) ((i) + 5)
+
+#define MCP16502_OFFSET_MODE_A 0
+#define MCP16502_OFFSET_MODE_LPM 1
+#define MCP16502_OFFSET_MODE_HIB 2
+
+#define MCP16502_OPMODE_ACTIVE REGULATOR_MODE_NORMAL
+#define MCP16502_OPMODE_LPM REGULATOR_MODE_IDLE
+#define MCP16502_OPMODE_HIB REGULATOR_MODE_STANDBY
+
+#define MCP16502_MODE_AUTO_PFM 0
+#define MCP16502_MODE_FPWM BIT(6)
+
+#define MCP16502_VSEL 0x3F
+#define MCP16502_EN BIT(7)
+#define MCP16502_MODE BIT(6)
+
+#define MCP16502_MIN_REG 0x0
+#define MCP16502_MAX_REG 0x65
+
+static unsigned int mcp16502_of_map_mode(unsigned int mode)
+{
+	if (mode =3D=3D REGULATOR_MODE_NORMAL || mode =3D=3D REGULATOR_MODE_IDLE)
+		return mode;
+
+	return REGULATOR_MODE_INVALID;
+}
+
+#define MCP16502_REGULATOR(_name, _id, _ranges, _ops)			\
+	[_id] =3D {							\
+		.name			=3D _name,			\
+		.regulators_node	=3D of_match_ptr("regulators"),	\
+		.id			=3D _id,				\
+		.ops			=3D &(_ops),			\
+		.type			=3D REGULATOR_VOLTAGE,		\
+		.owner			=3D THIS_MODULE,			\
+		.linear_ranges		=3D _ranges,			\
+		.n_linear_ranges	=3D ARRAY_SIZE(_ranges),		\
+		.of_match		=3D of_match_ptr(_name),		\
+		.of_map_mode		=3D mcp16502_of_map_mode,		\
+		.vsel_reg		=3D (((_id) + 1) << 4),		\
+		.vsel_mask		=3D MCP16502_VSEL,		\
+		.enable_reg		=3D (((_id) + 1) << 4),		\
+		.enable_mask		=3D MCP16502_EN,			\
+	}
+
+enum {
+	BUCK1 =3D 0,
+	BUCK2,
+	BUCK3,
+	BUCK4,
+	LDO1,
+	LDO2,
+	NUM_REGULATORS
+};
+
+/*
+ * struct mcp16502 - PMIC representation
+ * @rdev: the regulators belonging to this chip
+ * @rmap: regmap to be used for I2C communication
+ * @lpm: LPM GPIO descriptor
+ */
+struct mcp16502 {
+	struct regulator_dev *rdev[NUM_REGULATORS];
+	struct regmap *rmap;
+	struct gpio_desc *lpm;
+};
+
+/*
+ * mcp16502_gpio_set_mode() - set the GPIO corresponding value
+ *
+ * Used to prepare transitioning into hibernate or resuming from it.
+ */
+static void mcp16502_gpio_set_mode(struct mcp16502 *mcp, int mode)
+{
+	switch (mode) {
+	case MCP16502_OPMODE_ACTIVE:
+		gpiod_set_value(mcp->lpm, 0);
+		break;
+	case MCP16502_OPMODE_LPM:
+	case MCP16502_OPMODE_HIB:
+		gpiod_set_value(mcp->lpm, 1);
+		break;
+	default:
+		pr_err("%s: %d invalid\n", __func__, mode);
+	}
+}
+
+/*
+ * mcp16502_get_reg() - get the PMIC's configuration register for opmode
+ *
+ * @rdev: the regulator whose register we are searching
+ * @opmode: the PMIC's operating mode ACTIVE, Low-power, Hibernate
+ */
+static int mcp16502_get_reg(struct regulator_dev *rdev, int opmode)
+{
+	int reg =3D MCP16502_BASE(rdev_get_id(rdev));
+
+	switch (opmode) {
+	case MCP16502_OPMODE_ACTIVE:
+		return reg + MCP16502_OFFSET_MODE_A;
+	case MCP16502_OPMODE_LPM:
+		return reg + MCP16502_OFFSET_MODE_LPM;
+	case MCP16502_OPMODE_HIB:
+		return reg + MCP16502_OFFSET_MODE_HIB;
+	default:
+		return -EINVAL;
+	}
+}
+
+/*
+ * mcp16502_get_mode() - return the current operating mode of a regulator
+ *
+ * Note: all functions that are not part of entering/exiting standby/suspe=
nd
+ *	 use the Active mode registers.
+ *
+ * Note: this is different from the PMIC's operatig mode, it is the
+ *	 MODE bit from the regulator's register.
+ */
+static unsigned int mcp16502_get_mode(struct regulator_dev *rdev)
+{
+	unsigned int val;
+	int ret, reg;
+	struct mcp16502 *mcp =3D rdev_get_drvdata(rdev);
+
+	reg =3D mcp16502_get_reg(rdev, MCP16502_OPMODE_ACTIVE);
+	if (reg < 0)
+		return reg;
+
+	ret =3D regmap_read(mcp->rmap, reg, &val);
+	if (ret)
+		return ret;
+
+	switch (val & MCP16502_MODE) {
+	case MCP16502_MODE_FPWM:
+		return REGULATOR_MODE_NORMAL;
+	case MCP16502_MODE_AUTO_PFM:
+		return REGULATOR_MODE_IDLE;
+	default:
+		return REGULATOR_MODE_INVALID;
+	}
+}
+
+/*
+ * _mcp16502_set_mode() - helper for set_mode and set_suspend_mode
+ *
+ * @rdev: the regulator for which we are setting the mode
+ * @mode: the regulator's mode (the one from MODE bit)
+ * @opmode: the PMIC's operating mode: Active/Low-power/Hibernate
+ */
+static int _mcp16502_set_mode(struct regulator_dev *rdev, unsigned int mod=
e,
+			      unsigned int op_mode)
+{
+	int val;
+	int reg;
+	struct mcp16502 *mcp =3D rdev_get_drvdata(rdev);
+
+	reg =3D mcp16502_get_reg(rdev, op_mode);
+	if (reg < 0)
+		return reg;
+
+	switch (mode) {
+	case REGULATOR_MODE_NORMAL:
+		val =3D MCP16502_MODE_FPWM;
+		break;
+	case REGULATOR_MODE_IDLE:
+		val =3D MCP16502_MODE_AUTO_PFM;
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	reg =3D regmap_update_bits(mcp->rmap, reg, MCP16502_MODE, val);
+	return reg;
+}
+
+/*
+ * mcp16502_set_mode() - regulator_ops set_mode
+ */
+static int mcp16502_set_mode(struct regulator_dev *rdev, unsigned int mode=
)
+{
+	return _mcp16502_set_mode(rdev, mode, MCP16502_OPMODE_ACTIVE);
+}
+
+/*
+ * mcp16502_get_status() - regulator_ops get_status
+ */
+static int mcp16502_get_status(struct regulator_dev *rdev)
+{
+	int ret;
+	unsigned int val;
+	struct mcp16502 *mcp =3D rdev_get_drvdata(rdev);
+
+	ret =3D regmap_read(mcp->rmap, MCP16502_STAT_BASE(rdev_get_id(rdev)),
+			  &val);
+	if (ret)
+		return ret;
+
+	if (val & MCP16502_FLT)
+		return REGULATOR_STATUS_ERROR;
+	else if (val & MCP16502_ENS)
+		return REGULATOR_STATUS_ON;
+	else if (!(val & MCP16502_ENS))
+		return REGULATOR_STATUS_OFF;
+
+	return REGULATOR_STATUS_UNDEFINED;
+}
+
+/*
+ * mcp16502_suspend_get_target_reg() - get the reg of the target suspend P=
MIC
+ *				       mode
+ */
+static int mcp16502_suspend_get_target_reg(struct regulator_dev *rdev)
+{
+	switch (pm_suspend_target_state) {
+	case PM_SUSPEND_STANDBY:
+		return mcp16502_get_reg(rdev, MCP16502_OPMODE_LPM);
+	case PM_SUSPEND_ON:
+	case PM_SUSPEND_MEM:
+		return mcp16502_get_reg(rdev, MCP16502_OPMODE_HIB);
+	default:
+		dev_err(&rdev->dev, "invalid suspend target: %d\n",
+			pm_suspend_target_state);
+		return -EINVAL;
+	}
+}
+
+/*
+ * mcp16502_set_suspend_voltage() - regulator_ops set_suspend_voltage
+ */
+static int mcp16502_set_suspend_voltage(struct regulator_dev *rdev, int uV=
)
+{
+	struct mcp16502 *mcp =3D rdev_get_drvdata(rdev);
+	int sel =3D regulator_map_voltage_linear_range(rdev, uV, uV);
+	int reg =3D mcp16502_suspend_get_target_reg(rdev);
+
+	if (sel < 0)
+		return sel;
+
+	if (reg < 0)
+		return reg;
+
+	return regmap_update_bits(mcp->rmap, reg, MCP16502_VSEL, sel);
+}
+
+/*
+ * mcp16502_set_suspend_mode() - regulator_ops set_suspend_mode
+ */
+static int mcp16502_set_suspend_mode(struct regulator_dev *rdev,
+				     unsigned int mode)
+{
+	switch (pm_suspend_target_state) {
+	case PM_SUSPEND_STANDBY:
+		return _mcp16502_set_mode(rdev, mode, MCP16502_OPMODE_LPM);
+	case PM_SUSPEND_ON:
+	case PM_SUSPEND_MEM:
+		return _mcp16502_set_mode(rdev, mode, MCP16502_OPMODE_HIB);
+	default:
+		dev_err(&rdev->dev, "invalid suspend target: %d\n",
+			pm_suspend_target_state);
+		return -EINVAL;
+	}
+}
+
+/*
+ * mcp16502_set_suspend_enable() - regulator_ops set_suspend_enable
+ */
+static int mcp16502_set_suspend_enable(struct regulator_dev *rdev)
+{
+	struct mcp16502 *mcp =3D rdev_get_drvdata(rdev);
+	int reg =3D mcp16502_suspend_get_target_reg(rdev);
+
+	if (reg < 0)
+		return reg;
+
+	return regmap_update_bits(mcp->rmap, reg, MCP16502_EN, MCP16502_EN);
+}
+
+/*
+ * mcp16502_set_suspend_disable() - regulator_ops set_suspend_disable
+ */
+static int mcp16502_set_suspend_disable(struct regulator_dev *rdev)
+{
+	struct mcp16502 *mcp =3D rdev_get_drvdata(rdev);
+	int reg =3D mcp16502_suspend_get_target_reg(rdev);
+
+	if (reg < 0)
+		return reg;
+
+	return regmap_update_bits(mcp->rmap, reg, MCP16502_EN, 0);
+}
+
+static const struct regulator_ops mcp16502_buck_ops =3D {
+	.list_voltage			=3D regulator_list_voltage_linear_range,
+	.map_voltage			=3D regulator_map_voltage_linear_range,
+	.get_voltage_sel		=3D regulator_get_voltage_sel_regmap,
+	.set_voltage_sel		=3D regulator_set_voltage_sel_regmap,
+	.enable				=3D regulator_enable_regmap,
+	.disable			=3D regulator_disable_regmap,
+	.is_enabled			=3D regulator_is_enabled_regmap,
+	.get_status			=3D mcp16502_get_status,
+
+	.set_mode			=3D mcp16502_set_mode,
+	.get_mode			=3D mcp16502_get_mode,
+
+	.set_suspend_voltage		=3D mcp16502_set_suspend_voltage,
+	.set_suspend_mode		=3D mcp16502_set_suspend_mode,
+	.set_suspend_enable		=3D mcp16502_set_suspend_enable,
+	.set_suspend_disable		=3D mcp16502_set_suspend_disable,
+};
+
+/*
+ * LDOs cannot change operating modes.
+ */
+static const struct regulator_ops mcp16502_ldo_ops =3D {
+	.list_voltage			=3D regulator_list_voltage_linear_range,
+	.map_voltage			=3D regulator_map_voltage_linear_range,
+	.get_voltage_sel		=3D regulator_get_voltage_sel_regmap,
+	.set_voltage_sel		=3D regulator_set_voltage_sel_regmap,
+	.enable				=3D regulator_enable_regmap,
+	.disable			=3D regulator_disable_regmap,
+	.is_enabled			=3D regulator_is_enabled_regmap,
+	.get_status			=3D mcp16502_get_status,
+
+	.set_suspend_voltage		=3D mcp16502_set_suspend_voltage,
+	.set_suspend_enable		=3D mcp16502_set_suspend_enable,
+	.set_suspend_disable		=3D mcp16502_set_suspend_disable,
+};
+
+static const struct of_device_id mcp16502_ids[] =3D {
+	{ .compatible =3D "microchip,mcp16502", },
+	{}
+};
+MODULE_DEVICE_TABLE(of, mcp16502_ids);
+
+static const struct regulator_linear_range b1l12_ranges[] =3D {
+	REGULATOR_LINEAR_RANGE(1200000, VDD_LOW_SEL, VDD_HIGH_SEL, 50000),
+};
+
+static const struct regulator_linear_range b234_ranges[] =3D {
+	REGULATOR_LINEAR_RANGE(600000, VDD_LOW_SEL, VDD_HIGH_SEL, 25000),
+};
+
+static const struct regulator_desc mcp16502_desc[] =3D {
+	/* MCP16502_REGULATOR(_name, _id, ranges, regulator_ops) */
+	MCP16502_REGULATOR("VDD_IO", BUCK1, b1l12_ranges, mcp16502_buck_ops),
+	MCP16502_REGULATOR("VDD_DDR", BUCK2, b234_ranges, mcp16502_buck_ops),
+	MCP16502_REGULATOR("VDD_CORE", BUCK3, b234_ranges, mcp16502_buck_ops),
+	MCP16502_REGULATOR("VDD_OTHER", BUCK4, b234_ranges, mcp16502_buck_ops),
+	MCP16502_REGULATOR("LDO1", LDO1, b1l12_ranges, mcp16502_ldo_ops),
+	MCP16502_REGULATOR("LDO2", LDO2, b1l12_ranges, mcp16502_ldo_ops)
+};
+
+static const struct regmap_range mcp16502_ranges[] =3D {
+	regmap_reg_range(MCP16502_MIN_REG, MCP16502_MAX_REG)
+};
+
+static const struct regmap_access_table mcp16502_yes_reg_table =3D {
+	.yes_ranges =3D mcp16502_ranges,
+	.n_yes_ranges =3D ARRAY_SIZE(mcp16502_ranges),
+};
+
+static const struct regmap_config mcp16502_regmap_config =3D {
+	.reg_bits	=3D 8,
+	.val_bits	=3D 8,
+	.max_register	=3D MCP16502_MAX_REG,
+	.cache_type	=3D REGCACHE_NONE,
+	.rd_table	=3D &mcp16502_yes_reg_table,
+	.wr_table	=3D &mcp16502_yes_reg_table,
+};
+
+/*
+ * set_up_regulators() - initialize all regulators
+ */
+static int setup_regulators(struct mcp16502 *mcp, struct device *dev,
+			    struct regulator_config config)
+{
+	int i;
+
+	for (i =3D 0; i < NUM_REGULATORS; i++) {
+		mcp->rdev[i] =3D devm_regulator_register(dev,
+						       &mcp16502_desc[i],
+						       &config);
+		if (IS_ERR(mcp->rdev[i])) {
+			dev_err(dev,
+				"failed to register %s regulator %ld\n",
+				mcp16502_desc[i].name, PTR_ERR(mcp->rdev[i]));
+			return PTR_ERR(mcp->rdev[i]);
+		}
+	}
+
+	return 0;
+}
+
+static int mcp16502_probe(struct i2c_client *client,
+			  const struct i2c_device_id *id)
+{
+	struct regulator_config config =3D { };
+	struct device *dev;
+	struct mcp16502 *mcp;
+	int ret =3D 0;
+
+	dev =3D &client->dev;
+	config.dev =3D dev;
+
+	mcp =3D devm_kzalloc(dev, sizeof(*mcp), GFP_KERNEL);
+	if (!mcp)
+		return -ENOMEM;
+
+	mcp->rmap =3D devm_regmap_init_i2c(client, &mcp16502_regmap_config);
+	if (IS_ERR(mcp->rmap)) {
+		ret =3D PTR_ERR(mcp->rmap);
+		dev_err(dev, "regmap init failed: %d\n", ret);
+		return ret;
+	}
+
+	i2c_set_clientdata(client, mcp);
+	config.regmap =3D mcp->rmap;
+	config.driver_data =3D mcp;
+
+	mcp->lpm =3D devm_gpiod_get(dev, "lpm", GPIOD_OUT_LOW);
+	if (IS_ERR(mcp->lpm)) {
+		dev_err(dev, "failed to get lpm pin: %ld\n", PTR_ERR(mcp->lpm));
+		return PTR_ERR(mcp->lpm);
+	}
+
+	ret =3D setup_regulators(mcp, dev, config);
+	if (ret !=3D 0)
+		return ret;
+
+	mcp16502_gpio_set_mode(mcp, MCP16502_OPMODE_ACTIVE);
+
+	return 0;
+}
+
+#ifdef CONFIG_PM_SLEEP
+static int mcp16502_suspend(struct device *dev)
+{
+	struct i2c_client *client =3D to_i2c_client(dev);
+	struct mcp16502 *mcp =3D i2c_get_clientdata(client);
+
+	mcp16502_gpio_set_mode(mcp, MCP16502_OPMODE_LPM);
+
+	return 0;
+}
+
+static int mcp16502_resume(struct device *dev)
+{
+	struct i2c_client *client =3D to_i2c_client(dev);
+	struct mcp16502 *mcp =3D i2c_get_clientdata(client);
+
+	mcp16502_gpio_set_mode(mcp, MCP16502_OPMODE_ACTIVE);
+
+	return 0;
+}
+#endif
+
+static const struct dev_pm_ops mcp16502_pm_ops =3D {
+	SET_SYSTEM_SLEEP_PM_OPS(mcp16502_suspend, mcp16502_resume)
+};
+
+static const struct i2c_device_id mcp16502_i2c_id[] =3D {
+	{ "mcp16502", 0 },
+	{ }
+};
+MODULE_DEVICE_TABLE(i2c, mcp16502_i2c_id);
+
+static struct i2c_driver mcp16502_drv =3D {
+	.probe		=3D mcp16502_probe,
+	.driver		=3D {
+		.name	=3D "mcp16502-regulator",
+		.owner		=3D THIS_MODULE,
+		.of_match_table	=3D of_match_ptr(mcp16502_ids),
+		.pm =3D &mcp16502_pm_ops,
+	},
+	.id_table	=3D mcp16502_i2c_id,
+};
+
+module_i2c_driver(mcp16502_drv);
+
+MODULE_VERSION("1.0");
+MODULE_LICENSE("GPL v2");
+MODULE_DESCRIPTION("MCP16502 PMIC driver");
+MODULE_AUTHOR("Andrei Stefanescu andrei.stefanescu@microchip.com");
--=20
2.7.4

