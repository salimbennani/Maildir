Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 29 Nov 2018 08:40:23 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id B6AFD580322;
	Wed, 28 Nov 2018 11:37:58 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by fmsmga006-1.fm.intel.com with ESMTP; 28 Nov 2018 11:37:58 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ATh82HBP/neFxZB8i7t8l6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KPjyp8bcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Xymp4aV2Rx/ykC?=
 =?us-ascii?q?oJOTw2/mLYhcx+i6xVvRKvqQJjzI7PeIGYNuFzfr/Bcd4AWWZMRNpdWi5HD4ih?=
 =?us-ascii?q?b4UPFe0BPeNAooTgvVsBsx2+ChS2C+Pp1zRGhH723aI10+QgFwHGxxErEtUVv3?=
 =?us-ascii?q?TOstr1MrodXvqzzKnIzDXDYPxW2Tb76IjTaR0hrvaMXbV/ccrV10YjDR/KjlKV?=
 =?us-ascii?q?qYH8OT6ey+cDs3CD4uZ+Se6ij3Qrpxx/rzSx3Msgl4rEip4Pxl3F9yh12Jg5Kc?=
 =?us-ascii?q?G8RUJhYtOpEIFcuz+HO4dqWM8uXX1ktDs8x7Ybo5C0ZjIKx44ixxPHa/yIbYyI?=
 =?us-ascii?q?4hX7WeaPLjd3mmhldKi8hxms60igzPPzVs2u3FZNtCpFncHAtnEL1xPN9siKUu?=
 =?us-ascii?q?Vx8lul1DqVygze5P9ILVopmafYN5It2L89m5gLvUTGBCD2mUH2jKGMdkUj/+il?=
 =?us-ascii?q?8+DnYrTgpp+BOI54kwL+Pbo0msy5H+s4NhECX2+V+OS6yrLj51b0QKtFjvIoiK?=
 =?us-ascii?q?nVqpPaKtoBpq6/HQBV1pwv6xGlDzepyNgYh2UILEpZeBKbiIjkI1XOIPH7Dfih?=
 =?us-ascii?q?mVitnypryuvCPr3gBJXNM3fCnK3gfbZ7905T1g4zwcpD6JJTD7ELOOjzVVPptN?=
 =?us-ascii?q?zEEh85NBS5w+b9B9V8yoMRQ2WPDrWZMKPPq1CI4O0vLvKIZI8Uvjb9Nvck6+Tv?=
 =?us-ascii?q?jX8/hV8SY62p0YELZ3C/G/RsO1+Zbmb0gtcdDWcKuRIzTO7tiFKcSzJTZHGyX6?=
 =?us-ascii?q?Q65jE8E4+mCYbDRoawgL2Oxiu7H5tWZnxYBVCIC3vna4KEW/IUYiKIPsBhiiAE?=
 =?us-ascii?q?VaSmS4I5zx6urw/6y71kLubO4C0Xr5Dj2cNx5+3SkxEy6DN1A96c02GLU2F7gG?=
 =?us-ascii?q?cISyUq06B4pEx30k2D3rRgg/xECdxT4OtEUgQgOp7a1eB6D9HyVRjHfteGU1um?=
 =?us-ascii?q?RtSmATcsTtM+2dMOYkB9G8m8gRDHxSalH7gVl7mTDpwu7q3cx2TxJ9p6y3veya?=
 =?us-ascii?q?YulUcmTdVVOW2mnKF/8RPTCJDPk0mek6aqdqEc3CrW+WeHzGqOulxYUQFqXaXE?=
 =?us-ascii?q?W3AfelXZrdDj6kzeSL+uDKwtMhFdxs6aNqtKdtrpgE1bS/j5JtTRfXi9m2eqCh?=
 =?us-ascii?q?aO3bODcozqdn4Z3CXcDkgEjg8S8WyHNQg4GieuvWbeACZyGlLoZkPm6fN+p2+j?=
 =?us-ascii?q?Tk8o0wGKaFVs16a0+h4QgvycV/MT37IetCc9sTl0G0y939bXC9qGqApsZ6FcYd?=
 =?us-ascii?q?I74Fda2mPVrQ19Ppq8L698gl4SaRh4v0Tr1x9vEIVPjdAqrG82zAp1Ma+XyldB?=
 =?us-ascii?q?eC2X3J/uOrzbMHL9/A2yZKHM3FHe09GW+rkU5fQ8qlXjuhypF0U4/3Vm1dlVz2?=
 =?us-ascii?q?WT5pHQAAUOVpLxV1499wJmqLHCfik9+4TU2GVsMKmpqDPNx8glBeolyhm6eddf?=
 =?us-ascii?q?P7iJFAvzE80cGsivJ/Ymm1mvbhIYIu9S8LQ4MN+hd/uDwKSrJvpvnCq6jWRb54?=
 =?us-ascii?q?BwyliM9ytgReHSxZYK3vaY0hGBVzjillehs9n7lpxeajEWA2Ww1zLkBIlXZqBp?=
 =?us-ascii?q?eYYLCGGuI9C4x9lkhp7tXWJY+0CnB18cxMCpfh+SZUTn3QJMzUQXvWCnmSygwj?=
 =?us-ascii?q?10kjEltKqe0DbVw+T/choKIWpLRGhkjVfxLom4ldEaXE60bwc3kBup/1r1x69e?=
 =?us-ascii?q?pK5nNWncXV9IfzTqL2FlSqawtKCNY9RM6JMrtiVbSv+8bkqZSr7+ohsa1T3sH2?=
 =?us-ascii?q?1FyTA/djGqvIj5nhNghGKcKnZzsGTWecVqyRjD49zcQOZb3iAaSylglTnXGl+8?=
 =?us-ascii?q?MsGp/NqOkJfPqOK+V2OnVpBIdSnrzIWAtDa05GFwAB2/meyzlcPjEQQgzSD70N?=
 =?us-ascii?q?xqXz3SrBngeonry7i6MeV/c0lrHlD86tB2GoFjkoQqgpEQ1mMXhpGU/XoBjGfy?=
 =?us-ascii?q?Ps9X2aP4bHoRWzELx8TZ7xTi2E1mNniJ3Z72Vm2Bwst9YNm3emYW2iM+789QEq?=
 =?us-ascii?q?uV4qJLnTBpolWmtwLeeuZyni0SyfY17H4agucJuBcizymHA7ASG1VYMjLolxiS?=
 =?us-ascii?q?89++q6BXbn61cbeszEp+gcyhDLaarwFAX3b5f40uHC5q4cV5LVLMy2bz6oD/dd?=
 =?us-ascii?q?nUbNITsACUkhjag+hULpIxiuQFhS59NW3hun0lzvYxjQZy0pGioIiHN2Jt8bqi?=
 =?us-ascii?q?DRFCMT31Y94T9ivpjaZDhcuW24GvHpN8GjQERpfoTPSoEC4MuvTjLQqBDDo8qn?=
 =?us-ascii?q?KDE7rFAQCf8Ftmr27IE52zNXGYPnwZwst5RBWHOExTmgMUXCg5np4kEACl3tfh?=
 =?us-ascii?q?fVx95jAQ4F74txRNxvhpNxn5TmfQugOoZi0oR5iYKRpc9htC6FvNMcyC8uJzGD?=
 =?us-ascii?q?lV/52mrAyQM2ybeh5HDWcTVkyfAFDjOLau6MLE8+iZAOq+MvTPba+PqexYS/eH?=
 =?us-ascii?q?25av3pF68DaLM8WFJmNiAOEj2kpfQXB5HNzUmzURRCwWlCLNbM+bqA2/+i1tqc?=
 =?us-ascii?q?C//+rkWBjy5YuUELZSNdRv+xargaaMLeKQhSB5KSpG2ZMI33PH1L8f3FsKgSF0?=
 =?us-ascii?q?azatCagAtTLKTK/IgKBXEgUUazltO8pI9a482ghNNNXfitP00L54k/E0B01EVV?=
 =?us-ascii?q?znhsGme8gKL3uhO1PAAUaBLK6GKiHTw8HrfaO8TqVdjPlVtx21ozqUD1XvMSiD?=
 =?us-ascii?q?lzb3URCiKuVMjCCdPBxDt4CxaBdtCW7/TN34bh23KsN4jTozwbcsnHPFKXYcMS?=
 =?us-ascii?q?Rgc0NKtrCR7TlXgvN6G2xA6HpqNeiFmyaD4OneJZYbqv9rAiVyl+JH73U20bpV?=
 =?us-ascii?q?7CdYRPNrnCvetMJho1ajkrrH9j0yXwBDpTVLrIaKu1hyN6LE8JVJRXfD+lQK92?=
 =?us-ascii?q?rUQxcHqsBuDdrsk69XzdfLmeT4LzIGu9ff8tEbCeDXJdiBPX5nNgDmXHbPDBYM?=
 =?us-ascii?q?TRaoOHvZikgbl+udpVOPqZ1vgILhnpYHTPd7VVM6F/UBQhBvBtEELJ5xXjIrnr?=
 =?us-ascii?q?+dl+YH4n2xqBSXT8Jf6MOUHsmOCOnifW7KxYJPYAEFlOv1?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AeAABT7f5bh0O0hNFjHgEGBwaBUQkLA?=
 =?us-ascii?q?YNrJ4N5lCCCIZcugSQDTCwTAYQ8AoMwIjQJDQEDAQEBAQEBAgETAQEBCA0JCCk?=
 =?us-ascii?q?jDII2IoJlAwMBAiAEGQEBNwEFCQEBJAImAgIDMQEFARwHEgWDHIICBZthPIodc?=
 =?us-ascii?q?HwzgnYBAQWCRIRlCBJ5hmCEKxeBQD+BEYRdCYFKAoRlglePJneQAAmCIIMSi3Q?=
 =?us-ascii?q?LGIFaiDSHB4h2j0MwgSVsgSEzGiODPIIbCQMXg0qKdB4zgQUBAYsYK4IgAQE?=
X-IPAS-Result: =?us-ascii?q?A0AeAABT7f5bh0O0hNFjHgEGBwaBUQkLAYNrJ4N5lCCCIZc?=
 =?us-ascii?q?ugSQDTCwTAYQ8AoMwIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2IoJlAwMBA?=
 =?us-ascii?q?iAEGQEBNwEFCQEBJAImAgIDMQEFARwHEgWDHIICBZthPIodcHwzgnYBAQWCRIR?=
 =?us-ascii?q?lCBJ5hmCEKxeBQD+BEYRdCYFKAoRlglePJneQAAmCIIMSi3QLGIFaiDSHB4h2j?=
 =?us-ascii?q?0MwgSVsgSEzGiODPIIbCQMXg0qKdB4zgQUBAYsYK4IgAQE?=
X-IronPort-AV: E=Sophos;i="5.56,291,1539673200"; 
   d="scan'208";a="41963102"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 28 Nov 2018 11:37:56 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729286AbeK2Gkh (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 29 Nov 2018 01:40:37 -0500
Received: from mail-pf1-f201.google.com ([209.85.210.201]:50598 "EHLO
        mail-pf1-f201.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1729228AbeK2Gkd (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 29 Nov 2018 01:40:33 -0500
Received: by mail-pf1-f201.google.com with SMTP id e89so17557796pfb.17
        for <linux-kernel@vger.kernel.org>; Wed, 28 Nov 2018 11:37:49 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=date:in-reply-to:message-id:mime-version:references:subject:from:to
         :cc;
        bh=vDLmNdG9bXgmUW08xwYOcqoYHxR/pZYPLkV8WNN1gqw=;
        b=PjdiosbSDH4l8fDAty+OaVfBEGiLzLyqurbuROgpZjcU1iDuHRCjsUZ2R9BcNkzLz7
         3Eo+n42zuSsz+kiJArXYity0V+4BTShYkXrJfgVcNDcN2LNmiKwgMkvwf0WOC/Xf/Bez
         9pcQKPZ24vxLFC/ebyOkd78cGUxa2YFy+83aWR4eYCmbD/k0X5xvkLqrCXs9nM3NH7du
         MK8jA0Ly4bo7KnxAJnO76GSbWVO1hXzyBygZqYZmEXCil8bGZ4AEQcfzG8w1U72OXCsh
         vJcZHB2zHrFZcQlmlNHqSBA46CNX3216bQ7uCJH+rU6nMbCDf31prIcCVf/h0EOqQd2C
         f2Dw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:in-reply-to:message-id:mime-version
         :references:subject:from:to:cc;
        bh=vDLmNdG9bXgmUW08xwYOcqoYHxR/pZYPLkV8WNN1gqw=;
        b=j3xNW4/C4ia76fEJxHKczK5NVS930VRF0ZpxM2uY3M64d1kID0aAcKa/BE8c1OUA9O
         Q7d/FWfC3TteaZQow43bYdy90ETuOzCFVI9ZF4RD345KkIiqR03fpSkxU0rse/1xiz35
         IWJ7eYncFwKFvH2Uuc3woPo2i16DO+K92fqdL1WelGXU7nQJ6nqwmsvYIBXUAE7mhrKi
         uHnsvLcsK5SBOLMrMefwiUvxYqS40H/zkFE8HasTlrEAJpEF7gPlaKGI2nb7f/IJ5gYJ
         a1kRHJqtx6+L6EUTPnoX118TrumOdEo60ZgwfUfLZBlW6cGTtoeQC4BJi1Y9n3of8YP3
         33Hw==
X-Gm-Message-State: AA+aEWbJ3vi1vNeiLUa5FtuNSC78yuEC3XpbNA1tNqGbd8J5eXTUL3P5
        1dxKbllLkreY9bX+uYPBXn+MyWIl/m5cNqeDqos/hg==
X-Google-Smtp-Source: AFSGD/XsDzpc6x23T3Vn7bM0xhEXuAiS2QPqDH047cpZlMjIgpn4AjfIeyAsxo+e+DJWI7Ez53ZeQFkE9E5PkbdDIW2tMA==
X-Received: by 2002:a62:640e:: with SMTP id y14-v6mr3072802pfb.45.1543433868758;
 Wed, 28 Nov 2018 11:37:48 -0800 (PST)
Date: Wed, 28 Nov 2018 11:36:19 -0800
In-Reply-To: <20181128193636.254378-1-brendanhiggins@google.com>
Message-Id: <20181128193636.254378-3-brendanhiggins@google.com>
Mime-Version: 1.0
References: <20181128193636.254378-1-brendanhiggins@google.com>
X-Mailer: git-send-email 2.20.0.rc0.387.gc7a69e6b6c-goog
Subject: [RFC v3 02/19] kunit: test: add test resource management API
From: Brendan Higgins <brendanhiggins@google.com>
To: gregkh@linuxfoundation.org, keescook@google.com, mcgrof@kernel.org,
        shuah@kernel.org
Cc: joel@jms.id.au, mpe@ellerman.id.au, joe@perches.com, brakmo@fb.com,
        rostedt@goodmis.org, Tim.Bird@sony.com, khilman@baylibre.com,
        julia.lawall@lip6.fr, linux-kselftest@vger.kernel.org,
        kunit-dev@googlegroups.com, linux-kernel@vger.kernel.org,
        jdike@addtoit.com, richard@nod.at, linux-um@lists.infradead.org,
        daniel@ffwll.ch, dri-devel@lists.freedesktop.org, robh@kernel.org,
        dan.j.williams@intel.com, linux-nvdimm@lists.01.org,
        kieran.bingham@ideasonboard.com, frowand.list@gmail.com,
        knut.omang@oracle.com, Brendan Higgins <brendanhiggins@google.com>
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Create a common API for test managed resources like memory and test
objects. A lot of times a test will want to set up infrastructure to be
used in test cases; this could be anything from just wanting to allocate
some memory to setting up a driver stack; this defines facilities for
creating "test resources" which are managed by the test infrastructure
and are automatically cleaned up at the conclusion of the test.

Signed-off-by: Brendan Higgins <brendanhiggins@google.com>
---
 include/kunit/test.h | 109 +++++++++++++++++++++++++++++++++++++++++++
 kunit/test.c         |  95 +++++++++++++++++++++++++++++++++++++
 2 files changed, 204 insertions(+)

diff --git a/include/kunit/test.h b/include/kunit/test.h
index ffe66bb355d63..583840e24ffda 100644
--- a/include/kunit/test.h
+++ b/include/kunit/test.h
@@ -12,6 +12,69 @@
 #include <linux/types.h>
 #include <linux/slab.h>
 
+struct kunit_resource;
+
+typedef int (*kunit_resource_init_t)(struct kunit_resource *, void *);
+typedef void (*kunit_resource_free_t)(struct kunit_resource *);
+
+/**
+ * struct kunit_resource - represents a *test managed resource*
+ * @allocation: for the user to store arbitrary data.
+ * @free: a user supplied function to free the resource. Populated by
+ * kunit_alloc_resource().
+ *
+ * Represents a *test managed resource*, a resource which will automatically be
+ * cleaned up at the end of a test case.
+ *
+ * Example:
+ *
+ * .. code-block:: c
+ *
+ *	struct kunit_kmalloc_params {
+ *		size_t size;
+ *		gfp_t gfp;
+ *	};
+ *
+ *	static int kunit_kmalloc_init(struct kunit_resource *res, void *context)
+ *	{
+ *		struct kunit_kmalloc_params *params = context;
+ *		res->allocation = kmalloc(params->size, params->gfp);
+ *
+ *		if (!res->allocation)
+ *			return -ENOMEM;
+ *
+ *		return 0;
+ *	}
+ *
+ *	static void kunit_kmalloc_free(struct kunit_resource *res)
+ *	{
+ *		kfree(res->allocation);
+ *	}
+ *
+ *	void *kunit_kmalloc(struct kunit *test, size_t size, gfp_t gfp)
+ *	{
+ *		struct kunit_kmalloc_params params;
+ *		struct kunit_resource *res;
+ *
+ *		params.size = size;
+ *		params.gfp = gfp;
+ *
+ *		res = kunit_alloc_resource(test, kunit_kmalloc_init,
+ *			kunit_kmalloc_free, &params);
+ *		if (res)
+ *			return res->allocation;
+ *		else
+ *			return NULL;
+ *	}
+ */
+struct kunit_resource {
+	void *allocation;
+	kunit_resource_free_t free;
+
+	/* private: internal use only. */
+	struct list_head node;
+};
+
 struct kunit;
 
 /**
@@ -104,6 +167,7 @@ struct kunit {
 	const char *name; /* Read only after initialization! */
 	spinlock_t lock; /* Gaurds all mutable test state. */
 	bool success; /* Protected by lock. */
+	struct list_head resources; /* Protected by lock. */
 	void (*vprintk)(const struct kunit *test,
 			const char *level,
 			struct va_format *vaf);
@@ -127,6 +191,51 @@ int kunit_run_tests(struct kunit_module *module);
 		} \
 		late_initcall(module_kunit_init##module)
 
+/**
+ * kunit_alloc_resource() - Allocates a *test managed resource*.
+ * @test: The test context object.
+ * @init: a user supplied function to initialize the resource.
+ * @free: a user supplied function to free the resource.
+ * @context: for the user to pass in arbitrary data.
+ *
+ * Allocates a *test managed resource*, a resource which will automatically be
+ * cleaned up at the end of a test case. See &struct kunit_resource for an
+ * example.
+ */
+struct kunit_resource *kunit_alloc_resource(struct kunit *test,
+					    kunit_resource_init_t init,
+					    kunit_resource_free_t free,
+					    void *context);
+
+void kunit_free_resource(struct kunit *test, struct kunit_resource *res);
+
+/**
+ * kunit_kmalloc() - Like kmalloc() except the allocation is *test managed*.
+ * @test: The test context object.
+ * @size: The size in bytes of the desired memory.
+ * @gfp: flags passed to underlying kmalloc().
+ *
+ * Just like `kmalloc(...)`, except the allocation is managed by the test case
+ * and is automatically cleaned up after the test case concludes. See &struct
+ * kunit_resource for more information.
+ */
+void *kunit_kmalloc(struct kunit *test, size_t size, gfp_t gfp);
+
+/**
+ * kunit_kzalloc() - Just like kunit_kmalloc(), but zeroes the allocation.
+ * @test: The test context object.
+ * @size: The size in bytes of the desired memory.
+ * @gfp: flags passed to underlying kmalloc().
+ *
+ * See kzalloc() and kunit_kmalloc() for more information.
+ */
+static inline void *kunit_kzalloc(struct kunit *test, size_t size, gfp_t gfp)
+{
+	return kunit_kmalloc(test, size, gfp | __GFP_ZERO);
+}
+
+void kunit_cleanup(struct kunit *test);
+
 void __printf(3, 4) kunit_printk(const char *level,
 				 const struct kunit *test,
 				 const char *fmt, ...);
diff --git a/kunit/test.c b/kunit/test.c
index 26d3d6d260e6c..fb1a786e4c94f 100644
--- a/kunit/test.c
+++ b/kunit/test.c
@@ -66,6 +66,7 @@ static void kunit_vprintk(const struct kunit *test,
 int kunit_init_test(struct kunit *test, const char *name)
 {
 	spin_lock_init(&test->lock);
+	INIT_LIST_HEAD(&test->resources);
 	test->name = name;
 	test->vprintk = kunit_vprintk;
 
@@ -93,6 +94,11 @@ static void kunit_run_case_internal(struct kunit *test,
 	test_case->run_case(test);
 }
 
+static void kunit_case_internal_cleanup(struct kunit *test)
+{
+	kunit_cleanup(test);
+}
+
 /*
  * Performs post validations and cleanup after a test case was run.
  * XXX: Should ONLY BE CALLED AFTER kunit_run_case_internal!
@@ -103,6 +109,8 @@ static void kunit_run_case_cleanup(struct kunit *test,
 {
 	if (module->exit)
 		module->exit(test);
+
+	kunit_case_internal_cleanup(test);
 }
 
 /*
@@ -150,6 +158,93 @@ int kunit_run_tests(struct kunit_module *module)
 	return 0;
 }
 
+struct kunit_resource *kunit_alloc_resource(struct kunit *test,
+					    kunit_resource_init_t init,
+					    kunit_resource_free_t free,
+					    void *context)
+{
+	struct kunit_resource *res;
+	unsigned long flags;
+	int ret;
+
+	res = kzalloc(sizeof(*res), GFP_KERNEL);
+	if (!res)
+		return NULL;
+
+	ret = init(res, context);
+	if (ret)
+		return NULL;
+
+	res->free = free;
+	spin_lock_irqsave(&test->lock, flags);
+	list_add_tail(&res->node, &test->resources);
+	spin_unlock_irqrestore(&test->lock, flags);
+
+	return res;
+}
+
+void kunit_free_resource(struct kunit *test, struct kunit_resource *res)
+{
+	res->free(res);
+	list_del(&res->node);
+	kfree(res);
+}
+
+struct kunit_kmalloc_params {
+	size_t size;
+	gfp_t gfp;
+};
+
+static int kunit_kmalloc_init(struct kunit_resource *res, void *context)
+{
+	struct kunit_kmalloc_params *params = context;
+
+	res->allocation = kmalloc(params->size, params->gfp);
+	if (!res->allocation)
+		return -ENOMEM;
+
+	return 0;
+}
+
+static void kunit_kmalloc_free(struct kunit_resource *res)
+{
+	kfree(res->allocation);
+}
+
+void *kunit_kmalloc(struct kunit *test, size_t size, gfp_t gfp)
+{
+	struct kunit_kmalloc_params params;
+	struct kunit_resource *res;
+
+	params.size = size;
+	params.gfp = gfp;
+
+	res = kunit_alloc_resource(test,
+				   kunit_kmalloc_init,
+				   kunit_kmalloc_free,
+				   &params);
+
+	if (res)
+		return res->allocation;
+	else
+		return NULL;
+}
+
+void kunit_cleanup(struct kunit *test)
+{
+	struct kunit_resource *resource, *resource_safe;
+	unsigned long flags;
+
+	spin_lock_irqsave(&test->lock, flags);
+	list_for_each_entry_safe(resource,
+				 resource_safe,
+				 &test->resources,
+				 node) {
+		kunit_free_resource(test, resource);
+	}
+	spin_unlock_irqrestore(&test->lock, flags);
+}
+
 void kunit_printk(const char *level,
 		  const struct kunit *test,
 		  const char *fmt, ...)
-- 
2.20.0.rc0.387.gc7a69e6b6c-goog

