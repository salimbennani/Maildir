Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 08:49:57 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 47E735802E4
	for <like.xu@linux.intel.com>; Thu, 29 Nov 2018 10:49:40 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 10:49:40 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AkefVHRD45qx22YRFqRTKUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSPXyrsbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRshfWSxfDI2/?=
 =?us-ascii?q?YYsAAPYOMvtaoIbzulUOtRmzCwujCe/yxDJEmmH53bYh3uQ9DQ3LxhAsE84UvX?=
 =?us-ascii?q?jKqtj+KaccUfqyzKnN1TjOc/VW2Sv96IjPdBAgoeyHU6h/f8TN1UQhCw3LhUiX?=
 =?us-ascii?q?pIP/OTOVyuQNs2+d7+tgT+6vk3AoqxtrrTi128ghkZXGhoMJylDe9CV4z5w5Ks?=
 =?us-ascii?q?G/SE5+eNOpFoZbuSKCN4ZuXM8uX2JltDwnxrEbupO3ZjYGxZonyhLFdvCKcZCE?=
 =?us-ascii?q?7g/iWeqPOzt0mmxpdK+lixqv8UWty/fwW8m03VtMsyFLiMPDtmoX2BzW8sWHSu?=
 =?us-ascii?q?Vy/kOm2TuX0wDT6/pEIVwvlabBJJ4hxKMwmoAUsUTZES/6gET2jKmIeUU44uWk?=
 =?us-ascii?q?9fjrb7b8qpOBKoN5iRvyProgl8G/G+g0LwoDU3Ce+eum1b3j+UP5QK9Njv0ziq?=
 =?us-ascii?q?TZqY7VJcEGpqKgHgBazJgj5Ai7Dzu/y9sYmmQHLFRZdx2ZlIjlPFXOIPH7Dfih?=
 =?us-ascii?q?mVitnypryujCPr3gBJXNM3fCnK3gfbZ7905T1g4zwcpD6JJTD7EMO/TzWkj3tN?=
 =?us-ascii?q?zXCB85Lha4w+H9CNVyzo8eQ36AAreFMKPOtl+F/uYvI+iPZIALojr8JOUl6uXq?=
 =?us-ascii?q?jX84n18dYKao0YEWaHC+AvRpPUGZbWDwjdcGFGdZ9jc4V/Hg3V2eTSZINTH1W6?=
 =?us-ascii?q?Mn+ip9DoWgAoHeAIe3j/uE1Sa/G5RQIWdeFlGLF2yvboiBRrIAZTyfJpxclCcZ?=
 =?us-ascii?q?X+2kQo4lyRb8rQL/1v9rI/TZ/mgCuIv+2cNpz+vUkx406HpzFcvKyHyHTWx/gj?=
 =?us-ascii?q?YVQSQr1rt0u013xwS/1v1AiuFcXfBO/elAVBtyYYbV0ug8B83oQAvHYv+CSUq8?=
 =?us-ascii?q?Q8XgCjY0GIEf2dgLNm97B9WliAGL5weQKoU53+iCAoA09aTNmWD8Pc9nx17N1b?=
 =?us-ascii?q?U7jklgScxKYz71zpVj/hTeUtaa236SkLynIOFFhHbA?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AIAADwMwBchxHrdtBkGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBVAEBAQEBAQsBgTCCT40DiymCDXyWXIFfFBgUh3QiNwYNAQM?=
 =?us-ascii?q?BAQEBAQECARMBAQEKCwkIGw4vgjYFAgMaAQaCWwEBAQECAQECJBMMCikDAgEBA?=
 =?us-ascii?q?gYBAQoYCRUICAMBCwULPhiDHIF6CAEEqGQzii6MFoFXP4ERgl01hEaGFgKPJoY?=
 =?us-ascii?q?kilkHAhyCBY8GCxiRHJhOgVyBd3CDPYImF44dQYE4i0iBdAMBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AIAADwMwBchxHrdtBkGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BVAEBAQEBAQsBgTCCT40DiymCDXyWXIFfFBgUh3QiNwYNAQMBAQEBAQECARMBA?=
 =?us-ascii?q?QEKCwkIGw4vgjYFAgMaAQaCWwEBAQECAQECJBMMCikDAgEBAgYBAQoYCRUICAM?=
 =?us-ascii?q?BCwULPhiDHIF6CAEEqGQzii6MFoFXP4ERgl01hEaGFgKPJoYkilkHAhyCBY8GC?=
 =?us-ascii?q?xiRHJhOgVyBd3CDPYImF44dQYE4i0iBdAMBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,295,1539673200"; 
   d="scan'208";a="64622268"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mga01b.intel.com with ESMTP/TLS/AES256-SHA; 29 Nov 2018 10:49:39 -0800
Received: from localhost ([::1]:55760 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gSRNa-0006Oz-Cv
	for like.xu@linux.intel.com; Thu, 29 Nov 2018 13:49:38 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:45678)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <prvs=86438351b=anthony.perard@citrix.com>)
	id 1gSRNK-0006Nb-Cy
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 13:49:23 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <prvs=86438351b=anthony.perard@citrix.com>)
	id 1gSRNJ-0000SM-EQ
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 13:49:22 -0500
Received: from smtp03.citrix.com ([162.221.156.55]:58825)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71)
	(envelope-from <prvs=86438351b=anthony.perard@citrix.com>)
	id 1gSRNF-0000OE-9Q; Thu, 29 Nov 2018 13:49:17 -0500
X-IronPort-AV: E=Sophos;i="5.56,295,1539648000"; d="scan'208";a="71892891"
Date: Thu, 29 Nov 2018 18:48:41 +0000
From: Anthony PERARD <anthony.perard@citrix.com>
To: Paul Durrant <paul.durrant@citrix.com>
Message-ID: <20181129184841.GJ14786@perard.uk.xensource.com>
References: <20181121151211.15997-1-paul.durrant@citrix.com>
	<20181121151211.15997-5-paul.durrant@citrix.com>
MIME-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Content-Disposition: inline
In-Reply-To: <20181121151211.15997-5-paul.durrant@citrix.com>
User-Agent: Mutt/1.11.0 (2018-11-25)
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 162.221.156.55
Subject: Re: [Qemu-devel] [PATCH 04/18] xen: create xenstore areas for
 XenDevice-s
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Kevin Wolf <kwolf@redhat.com>, Stefano Stabellini <sstabellini@kernel.org>,
	qemu-block@nongnu.org, qemu-devel@nongnu.org,
	Max Reitz <mreitz@redhat.com>, xen-devel@lists.xenproject.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Wed, Nov 21, 2018 at 03:11:57PM +0000, Paul Durrant wrote:
> This patch adds a new source module, xen-bus-helper.c, which builds on
> basic libxenstore primitives to provide functions to create (setting
> permissions appropriately) and destroy xenstore areas, and functions to
> 'printf' and 'scanf' nodes therein. The main xen-bus code then uses
> these primitives [1] to initialize and destroy the frontend and backend
> areas for a XenDevice during realize and unrealize respectively.
> 
> The 'xen-qdisk' implementation is extended with a 'get_name' method that
> returns the VBD number. This number is reqired to 'name' the xenstore

                                         ^ required

> diff --git a/hw/xen/xen-bus-helper.c b/hw/xen/xen-bus-helper.c
> new file mode 100644
> index 0000000000..d9ee2ed6a0
> --- /dev/null
> +++ b/hw/xen/xen-bus-helper.c
[...]
> +void xs_node_destroy(struct xs_handle *xsh, const char *node)
> +{
> +    xs_rm(xsh, XBT_NULL, node);

We should check for error, and grab errno.

> +}
> +
> +void xs_node_vprintf(struct xs_handle *xsh, const char *node,
> +                     const char *key, const char *fmt, va_list ap)
> +{
> +    char *path, *value;
> +
> +    path = (strlen(node) != 0) ? g_strdup_printf("%s/%s", node, key) :
> +        g_strdup(key);

A comment would be helpful to findout how to use that function,
especialy the fact that with node="", we write to $key instead of
$node/$key.

> +    value = g_strdup_vprintf(fmt, ap);

Looks like g_vasprintf() would be better, since it returns the lenght as
well.

> +
> +    xs_write(xsh, XBT_NULL, path, value, strlen(value));

You should check for failures, and grab errno.

> +    g_free(value);
> +    g_free(path);
> +}
> +
> +int xs_node_vscanf(struct xs_handle *xsh, const char *node, const char *key,
> +                   const char *fmt, va_list ap)
> +{
> +    char *path, *value;
> +    int rc;
> +
> +    path = (strlen(node) != 0) ? g_strdup_printf("%s/%s", node, key) :
> +        g_strdup(key);
> +
> +    value = xs_read(xsh, XBT_NULL, path, NULL);

The xenstore.h isn't clear about failure of this function, it is
supposed to return a malloced value. Do we actually need to check if value
is NULL?

> +
> +    rc = value ? vsscanf(value, fmt, ap) : EOF;
> +
> +    free(value);
> +    g_free(path);
> +
> +    return rc;
> +}
> +
> diff --git a/hw/xen/xen-bus.c b/hw/xen/xen-bus.c
> index dede2d914a..663aa8e117 100644
> --- a/hw/xen/xen-bus.c
> +++ b/hw/xen/xen-bus.c
[...]

> +static void xen_device_backend_destroy(XenDevice *xendev)
> +{
> +    XenBus *xenbus = XEN_BUS(qdev_get_parent_bus(DEVICE(xendev)));
> +
> +    if (!xendev->backend_path) {
> +        return;
> +    }
> +
> +    g_assert(xenbus->xsh);
> +
> +    xs_node_destroy(xenbus->xsh, xendev->backend_path);
> +    g_free(xendev->backend_path);

It would be nice to also set backend_path to NULL.

> diff --git a/include/hw/xen/xen-bus-helper.h b/include/hw/xen/xen-bus-helper.h
> new file mode 100644
> index 0000000000..53570650db
> --- /dev/null
> +++ b/include/hw/xen/xen-bus-helper.h
> @@ -0,0 +1,26 @@
> +/*
> + * Copyright (c) Citrix Systems Inc.
> + * All rights reserved.
> + */
> +
> +#ifndef HW_XEN_BUS_HELPER_H
> +#define HW_XEN_BUS_HELPER_H

That should probably include xen_common.h, to have `enum xenbus_state`,
`struct xs_handle`, ..

> +const char *xs_strstate(enum xenbus_state state);
> +
> +void xs_node_create(struct xs_handle *xsh, const char *node,
> +                    struct xs_permissions perms[],
> +                    unsigned int nr_perms, Error **errp);
> +void xs_node_destroy(struct xs_handle *xsh, const char *node);
> +
> +void xs_node_vprintf(struct xs_handle *xsh, const char *node,
> +                     const char *key, const char *fmt, va_list ap);
> +void xs_node_printf(struct xs_handle *xsh, const char *node, const char *key,
> +                    const char *fmt, ...);

This prototype needs GCC_FMT_ATTR(), that's the printf format
__attribute__.

> +
> +int xs_node_vscanf(struct xs_handle *xsh, const char *node, const char *key,
> +                   const char *fmt, va_list ap);
> +int xs_node_scanf(struct xs_handle *xsh, const char *node, const char *key,
> +                  const char *fmt, ...);

Maybe here as well.


-- 
Anthony PERARD

