Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 28 Nov 2018 12:09:43 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from FMSMGA003.fm.intel.com (fmsmga003.fm.intel.com [10.253.24.29])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 278F0580322;
	Tue, 27 Nov 2018 17:26:45 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by FMSMGA003-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 27 Nov 2018 17:26:44 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AYrG66BzHZX7WmGTXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e4SKfad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWRPUMZPWSJcAY28?=
 =?us-ascii?q?YYQAAPYcMulaoYb9vEMOoBmlCAmwGO/i0CNEimPs0KEk1ekqDAHI3BYnH9ILqH?=
 =?us-ascii?q?naq9T1NKEdUeuoyqfH0zTDZO5R1Df46YjIdB8hreuIXb1ucMrc0lMvGB3YgVWQ?=
 =?us-ascii?q?s4PlIymZ2fgKs2ie9udtU/+khW0/qwxpvDSj2sMhhpPUio8b1FzI7zh1zYUpKd?=
 =?us-ascii?q?GiSUN2Y8aoHIVMuyyeLYd6X80vT39ytConybALt4S3cDYJxZkh2hXRceaIc5KS?=
 =?us-ascii?q?7RLmTOuRISl3hHZieL+nmRay/lavyvfmWsm3zllKtCxFncfItnwX0BzT8MeHRu?=
 =?us-ascii?q?N8/kenxzmPyxje5v9YLU0wj6bXNpAszqAqmpYOsknPAjX6lUT0gaOOc0Ur4Omo?=
 =?us-ascii?q?6+DpYrX8oZ+cMpd5igX/MqQoh8y+Dv00MgsQUGiB/+Szyrnj8VT+QLREiP05jL?=
 =?us-ascii?q?PZvYvEJcQUuKG5GRVZ0oU95BalCTepztAYkWMALFJfdxKLl5LpNE3WIPDkEfe/?=
 =?us-ascii?q?hEyhkDNqx/DFILLtGJrMLmXYnbflfLZ97VNcyQUpwdBe4ZJUFq8OIPbpVkDts9?=
 =?us-ascii?q?zYCwczMxaozOb/FNV9yoQeVHqPAqCDMaPSrUWH5uU1L+mMeY8aojD9K/c+6v7q?=
 =?us-ascii?q?jH85n0IdfKaz0ZsWbnC4AuppI0GDbXXwhdcBFH8AvhAiQ+zylF2CTTlTam6wX6?=
 =?us-ascii?q?I7+D43EoGmDYDFRoCrh7yMxyO7HpxQZmBbBVGAC3bod4OYW/gSbCKeONNukjsB?=
 =?us-ascii?q?VbK5UY8uyQmutBPmy7pgNufb4DYYtZLk1Nh2/eHTjws99T5vAsSZ0mGNSXx0n2?=
 =?us-ascii?q?wSSz832qB/vVJyylOZ3adkhPxYEMRZ5+lVXQciKZ7c0+t6BsjxWg3beNeFUlKm?=
 =?us-ascii?q?QtS8DjE3QdI82NsOY0d7G9W/gRHPxSuqA7kJl7OVAJw46L7T33/0J8xl0XbJyL?=
 =?us-ascii?q?Ehj0U6QstILWCpm7Rw9xbNCILTk0WWjaCqdb8C0y7L82uDyWmOvERcUANrVaXF?=
 =?us-ascii?q?XHYfZlbZrNjj50PCSaOuBqojMgdb1cGCLa5KYMXzjVpaXPfjJMjeY2WplmitHx?=
 =?us-ascii?q?mI2K2DYJDqe2oH2iXdE1YLkwYI8HaCNAg+ADqhom3EADxvE1Lvf13j8e1kpHyn?=
 =?us-ascii?q?SU80yhmAb1d92Lqt5h4VmfucRusP3rIFvSchrCl0HFa93t7MF9qMvQ1hfL9YYd?=
 =?us-ascii?q?M85ldH2nnUtwh8PpymMqBjiUQScwVxv0PyyRp3Dp9MntQtrHMv1AByM76X0Etd?=
 =?us-ascii?q?dzOE2pD9IqfYKm3s8xGgdaHX2kvS382L+qgS8vs4rVbjvAa3Fkc593Vn0t9V02?=
 =?us-ascii?q?aT55nQDQoSV47xXVgz9xRgu77aZSw97ZvO1XJwKam0riPC29UxCeol1xasZctQ?=
 =?us-ascii?q?PLmFFQ/yCcIaAceuJfcum1ioaBIEIe9T+LQ1P8Oga/uJxqqrMPx8kzKhiGRN+J?=
 =?us-ascii?q?p93V6U9ypgVu7I2I4Iw+uZ3gSbTTj8lkqussftlYBCez4SBGu/xTH4C4FLYq19?=
 =?us-ascii?q?YJgECX2pI82x3dh+g5/tW3hF9F+sHV8G2cmpeQaMYFz5xwFfyUMXoXm/kyui0z?=
 =?us-ascii?q?N0iy0prraY3CHWw+XidQALO25RSGl5kFfsJ5O5j9QbXEiucggomwGp5Uf8x6hH?=
 =?us-ascii?q?uqt/K3PfTltPfyjzN2tiSLe/tqKeY85T75MlqSdXX/6mYVCZSb79pAEW0zj5EG?=
 =?us-ascii?q?tdxzA7djeqtYv/nxFhjGKdLXBzrGfWeM1qxBff4sDcSuBV3jYcWCZ4jjzXDECm?=
 =?us-ascii?q?P9a15dWUi4vDsuemWmOhTJJTdjPnzYGBtCu9/mBqBRy/n/aumtzoCwQ60Cn718?=
 =?us-ascii?q?V0WiXMthrzfo7r16GiO+J9YkZoHEP869Z9GoxmkYs/npAQ1WIahpWI53UHl2jz?=
 =?us-ascii?q?PM5f2aL/anoNWDEKz8TU4AjjxE1sMHaJy5jlWXWax8trf8O6bX8O2iIh88BKD7?=
 =?us-ascii?q?+Z7LlFnSt2uFW0twzQbuZmnjcB1/Qu8mUVjP8TuAoi1SidBrESHU9FPS3jjRiI?=
 =?us-ascii?q?7ta+rLlJa2ara7S/yE1+ndW5BrGYvg5cQGr5eoslHSJo8sV/N1fM3Gfy647+ft?=
 =?us-ascii?q?nQcMkTtgaVkxrbi+hVKZQxlucFhCZ9OGL9u2ElxPA/jRB0wZ66u42HIX13/K2l?=
 =?us-ascii?q?Gh5YKiH1Z8QL9z72l6lemcKW3521EpVlBzUGR5/oTfOuEDIPuvXrLQeOEDsgqn?=
 =?us-ascii?q?iFHbrTBxOQ6EBjr3jXCZCkK2mXJGUFzdVlXBSdJlZQgAUKUzUhhJI5ChqmxM/8?=
 =?us-ascii?q?cEd6+zAR4ET3qgBXx+JsNhn/VHrfpQiyZjc1TpifMARZ7gVY60jJNsye6/p5Hz?=
 =?us-ascii?q?tE8Z25sAyNNmubahxIDGEOR0yEHk3jMaOo5dXa6OiYAey+L/TVbLWKqOxeUeqI?=
 =?us-ascii?q?xJ213otn+TaMKtuAPn14A/In3UpDWGhzG97FlDUXVywXiyXNYtabpBii+y13rc?=
 =?us-ascii?q?O/8PXxVALs/4uPDLRSPst1+xCrmqeOLOqQhCd/KTZF2ZIA337IyL4D3FEMjyFi?=
 =?us-ascii?q?bSWiEbMFtSTVVqLfhrdXDwIHayN0LMZH9b880RJXOcHFitL5zLp4jv8uBldBVF?=
 =?us-ascii?q?zhnNypZMMQL2G8MlPHGFiENLCcKTLXxMH3ZLu2SadMg+VMqx2wpTGbHlf/PjSC?=
 =?us-ascii?q?kjnlTQygPftQgyGbIhNevpqwchJsCWjlUdLnZQe3MN5xjT0q37I0gmnGOnIbMT?=
 =?us-ascii?q?h5a0lNtKGf7TtEgvVjHGxM9npkIvOCmyac7unYLI4ZsPprAitukeJa7283y79U?=
 =?us-ascii?q?7CFCWfx0lzHert9oo1G6jOaPziBrXwZJqjZO18q3uhBPJ6zfvrZaVHvCtEYA82?=
 =?us-ascii?q?qKBhkMj9BlENrqur1VjN/Vm/SgBi1F9ofx/M0TT+zZKYrTNXsnPlztFT/8FgYJ?=
 =?us-ascii?q?TTe3c2rYghoOw7mp6nSJo81i+dDXk50UR+oeDQRtGw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ACAACg7f1bh0O0hNFkGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUwIBAQEBAQsBg2snjHCNNhSXLIFzFBgTAYdaIjYHDQEDAQE?=
 =?us-ascii?q?BAQEBAgETAQEBCA0JCCkvgjYkAYJiAQIDAQIkEz8GCQEBCg4KCSUDDAVJCgkFg?=
 =?us-ascii?q?xyCAgWnTzOKRIwNgVc/g3UuiDaCJgKJJ4Zvj3YHAoIcBI8GCxiJUoc5mDiBTQa?=
 =?us-ascii?q?CADMaI4M8gicXjioyAQExgQUBARyMOwEB?=
X-IPAS-Result: =?us-ascii?q?A0ACAACg7f1bh0O0hNFkGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUwIBAQEBAQsBg2snjHCNNhSXLIFzFBgTAYdaIjYHDQEDAQEBAQEBAgETAQEBC?=
 =?us-ascii?q?A0JCCkvgjYkAYJiAQIDAQIkEz8GCQEBCg4KCSUDDAVJCgkFgxyCAgWnTzOKRIw?=
 =?us-ascii?q?NgVc/g3UuiDaCJgKJJ4Zvj3YHAoIcBI8GCxiJUoc5mDiBTQaCADMaI4M8gicXj?=
 =?us-ascii?q?ioyAQExgQUBARyMOwEB?=
X-IronPort-AV: E=Sophos;i="5.56,288,1539673200"; 
   d="scan'208";a="64283485"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 27 Nov 2018 17:26:43 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727176AbeK1M00 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 28 Nov 2018 07:26:26 -0500
Received: from mx1.redhat.com ([209.132.183.28]:47080 "EHLO mx1.redhat.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726567AbeK1M00 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 28 Nov 2018 07:26:26 -0500
Received: from smtp.corp.redhat.com (int-mx06.intmail.prod.int.phx2.redhat.com [10.5.11.16])
        (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
        (No client certificate requested)
        by mx1.redhat.com (Postfix) with ESMTPS id 0831858E39;
        Wed, 28 Nov 2018 01:26:39 +0000 (UTC)
Received: from ming.t460p (ovpn-8-25.pek2.redhat.com [10.72.8.25])
        by smtp.corp.redhat.com (Postfix) with ESMTPS id 560AF5C1B2;
        Wed, 28 Nov 2018 01:26:31 +0000 (UTC)
Date: Wed, 28 Nov 2018 09:26:26 +0800
From: Ming Lei <ming.lei@redhat.com>
To: Evan Green <evgreen@chromium.org>
Cc: Jens Axboe <axboe@kernel.dk>,
        Gwendal Grignou <gwendal@chromium.org>,
        Alexis Savery <asavery@chromium.org>,
        linux-block@vger.kernel.org, linux-kernel@vger.kernel.org
Subject: Re: [PATCH 2/2] loop: Better discard support for block devices
Message-ID: <20181128012624.GB11128@ming.t460p>
References: <20181030230624.61834-1-evgreen@chromium.org>
 <20181030230624.61834-3-evgreen@chromium.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181030230624.61834-3-evgreen@chromium.org>
User-Agent: Mutt/1.9.1 (2017-09-22)
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.16
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16 (mx1.redhat.com [10.5.110.39]); Wed, 28 Nov 2018 01:26:39 +0000 (UTC)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Tue, Oct 30, 2018 at 04:06:24PM -0700, Evan Green wrote:
> If the backing device for a loop device is a block device,
> then mirror the discard properties of the underlying block
> device into the loop device. While in there, differentiate
> between REQ_OP_DISCARD and REQ_OP_WRITE_ZEROES, which are
> different for block devices, but which the loop device had
> just been lumping together.
> 
> Signed-off-by: Evan Green <evgreen@chromium.org>
> ---
> 
>  drivers/block/loop.c | 61 +++++++++++++++++++++++++++++++++++-----------------
>  1 file changed, 41 insertions(+), 20 deletions(-)
> 
> diff --git a/drivers/block/loop.c b/drivers/block/loop.c
> index 28990fc94841a..176e65101c4ef 100644
> --- a/drivers/block/loop.c
> +++ b/drivers/block/loop.c
> @@ -417,19 +417,14 @@ static int lo_read_transfer(struct loop_device *lo, struct request *rq,
>  	return ret;
>  }
>  
> -static int lo_discard(struct loop_device *lo, struct request *rq, loff_t pos)
> +static int lo_discard(struct loop_device *lo, struct request *rq,
> +		int mode, loff_t pos)
>  {
> -	/*
> -	 * We use punch hole to reclaim the free space used by the
> -	 * image a.k.a. discard. However we do not support discard if
> -	 * encryption is enabled, because it may give an attacker
> -	 * useful information.
> -	 */
>  	struct file *file = lo->lo_backing_file;
> -	int mode = FALLOC_FL_PUNCH_HOLE | FALLOC_FL_KEEP_SIZE;
> +	struct request_queue *q = lo->lo_queue;
>  	int ret;
>  
> -	if ((!file->f_op->fallocate) || lo->lo_encrypt_key_size) {
> +	if (!blk_queue_discard(q)) {
>  		ret = -EOPNOTSUPP;
>  		goto out;
>  	}
> @@ -603,8 +598,13 @@ static int do_req_filebacked(struct loop_device *lo, struct request *rq)
>  	case REQ_OP_FLUSH:
>  		return lo_req_flush(lo, rq);
>  	case REQ_OP_DISCARD:
> +		return lo_discard(lo, rq,
> +			FALLOC_FL_PUNCH_HOLE | FALLOC_FL_KEEP_SIZE, pos);
> +
>  	case REQ_OP_WRITE_ZEROES:
> -		return lo_discard(lo, rq, pos);
> +		return lo_discard(lo, rq,
> +			FALLOC_FL_ZERO_RANGE | FALLOC_FL_KEEP_SIZE, pos);
> +
>  	case REQ_OP_WRITE:
>  		if (lo->transfer)
>  			return lo_write_transfer(lo, rq, pos);
> @@ -859,6 +859,25 @@ static void loop_config_discard(struct loop_device *lo)
>  	struct file *file = lo->lo_backing_file;
>  	struct inode *inode = file->f_mapping->host;
>  	struct request_queue *q = lo->lo_queue;
> +	struct request_queue *backingq;
> +
> +	/*
> +	 * If the backing device is a block device, mirror its discard
> +	 * capabilities.
> +	 */
> +	if (S_ISBLK(inode->i_mode)) {
> +		backingq = bdev_get_queue(inode->i_bdev);
> +		blk_queue_max_discard_sectors(q,
> +			backingq->limits.max_discard_sectors);
> +
> +		blk_queue_max_write_zeroes_sectors(q,
> +			backingq->limits.max_write_zeroes_sectors);
> +
> +		q->limits.discard_granularity =
> +			backingq->limits.discard_granularity;
> +
> +		q->limits.discard_alignment =
> +			backingq->limits.discard_alignment;

I think it isn't necessary to mirror backing queue's discard/write_zeros
capabilities, given either fs of the underlying queue can deal with well.

>  
>  	/*
>  	 * We use punch hole to reclaim the free space used by the
> @@ -866,22 +885,24 @@ static void loop_config_discard(struct loop_device *lo)
>  	 * encryption is enabled, because it may give an attacker
>  	 * useful information.
>  	 */
> -	if ((!file->f_op->fallocate) ||
> -	    lo->lo_encrypt_key_size) {
> +	} else if ((!file->f_op->fallocate) || lo->lo_encrypt_key_size) {
>  		q->limits.discard_granularity = 0;
>  		q->limits.discard_alignment = 0;
>  		blk_queue_max_discard_sectors(q, 0);
>  		blk_queue_max_write_zeroes_sectors(q, 0);
> -		blk_queue_flag_clear(QUEUE_FLAG_DISCARD, q);
> -		return;
> -	}
>  
> -	q->limits.discard_granularity = inode->i_sb->s_blocksize;
> -	q->limits.discard_alignment = 0;
> +	} else {
> +		q->limits.discard_granularity = inode->i_sb->s_blocksize;
> +		q->limits.discard_alignment = 0;
> +
> +		blk_queue_max_discard_sectors(q, UINT_MAX >> 9);
> +		blk_queue_max_write_zeroes_sectors(q, UINT_MAX >> 9);
> +	}
>  
> -	blk_queue_max_discard_sectors(q, UINT_MAX >> 9);
> -	blk_queue_max_write_zeroes_sectors(q, UINT_MAX >> 9);
> -	blk_queue_flag_set(QUEUE_FLAG_DISCARD, q);
> +	if (q->limits.max_discard_sectors || q->limits.max_write_zeroes_sectors)
> +		blk_queue_flag_set(QUEUE_FLAG_DISCARD, q);
> +	else
> +		blk_queue_flag_clear(QUEUE_FLAG_DISCARD, q);
>  }

Looks it should work just by mirroring backing queue's discard
capability to loop queue in case that the loop is backed by
block device, doesn't it? Meantime the unified discard limits &
write_zeros limits can be kept.

thanks,
Ming
