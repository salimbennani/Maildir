Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:17:47 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 2A1A5580224;
	Fri, 30 Nov 2018 05:03:46 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga003-1.jf.intel.com with ESMTP; 30 Nov 2018 05:03:46 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AFeyfZhLlxeJdY2L7atmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgUL//9rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZUclRWS5ODIOy?=
 =?us-ascii?q?YYUMEuQPI/pXr5Llp1YMtha+GRWgCfnzxjNUmnP736s32PkhHwHc2wwgGsoDvW?=
 =?us-ascii?q?jOrNroKawfTOG1w7fTzTXDcfxWxCn955bMchs8pvyDR6hwftfLxUY0FgPKkE6Q?=
 =?us-ascii?q?qYz7MDOIyOQCrWyb4vFkVeKujW4osRtxoj+1yscrkInJiZsYx1bZ/it3x4Y1IM?=
 =?us-ascii?q?e3SE99YdO8DJRQtzuVOJd2Qsw4XW1kpD82yrsYtp68eigG0YgoxxnFa/OZaYSI?=
 =?us-ascii?q?+QnsWeCMKjl7nHJoYKyziwq2/ES61+HxWNe43ExXoidGjtXArHEA2h7L5sSZVv?=
 =?us-ascii?q?dw+l2t1DWP2gzJ9+1JIEE5mbDGJ5MlzbM9kIcYv17ZES/sgkr2ibebdkU69eis?=
 =?us-ascii?q?7OTqeqvmppCCOI9ukA3+Mbohmta5AesmNggCRW+b+f6z1LH7/E35RqtFjuEun6?=
 =?us-ascii?q?XHrJzXId4XqrO3DgNLyIov9hWyAyu83NkZn3QLNFdFdwiGj4jtNVHOOvf4DfKn?=
 =?us-ascii?q?jlSokTdrwe3GP7L4DpXOMHfDirHhcqh560JFzwoyw9Zf6IxOCrwaPvLzVVH+tM?=
 =?us-ascii?q?bCAh86LQO02eDnB8t51o8EXmKPGKCZPLvIsVCU/uIvP/WMZIgNtTb5Kvgl5ODh?=
 =?us-ascii?q?gWU2mF8AZqSp2ZoXaHalHvVpOUmZYHzsgssfHmcOpAYxUOvqiFiaWz5Je3myR7?=
 =?us-ascii?q?485i08CI++DYfMXIGtgKCb0ye8BJFWZn1GBUqKEXfnbIiEX/YMaCSPIs5uiDAE?=
 =?us-ascii?q?VL6hS5M/2hGqrgP1171nLu/M8C0CqZ3jzMR15/HUlRwq9zx0CNqS33uOT2FzmG?=
 =?us-ascii?q?MIQTg20bt7oUx8zFeDzKd5j+ZZFdxV+/NGTAM6OYTAwOx9DtD4QhjBccuRSFa6?=
 =?us-ascii?q?XtWmBik8Qcgqw98OZEZ9GM+ujgrZ0CqoGLIVk72LBJop8qPTxXTxJsB9y2rY26?=
 =?us-ascii?q?kllVUpXsxPNWi+jK5l6wfTH5LJk1mel6uydqQTxijN+H2HzWqPpk5YVgFwXL7B?=
 =?us-ascii?q?XXAeYEvWsNv46lnDT7+oFbQoLA9BxdSeJatNb93jlU9GS+v7ONTCf2KxnH+9Cg?=
 =?us-ascii?q?uSybOScoXmYWUd0z/bCEgfjQ8T+3GKNQw9Biekp2LTFzhuFVPpY0Px/uhysnK7?=
 =?us-ascii?q?Tkkozw6Ua01tzaa6+hkQhfaEUfMcwqoEuDs9qzVzBFuywsjZC8SeqAZ7fKVTe9?=
 =?us-ascii?q?U94ExZ2mLfrAF9Op2gL6Z/hl8RaQh3vkXu1wlpBYVEi8QlsHQqzA9qI6KCzFxB?=
 =?us-ascii?q?by+Y3Yz3OrDPNmny/RWva6nK2lHe0Nea4LsP5O4/q1X5uAGpF0wi83p83tlR0n?=
 =?us-ascii?q?uc4IjKDQUIXZLwVEY36wZ1p7XAbiYh4IPU0GVmMbOovT/ax9IpGOwlxw66cNdb?=
 =?us-ascii?q?LqyFGxH9Es0AC8e1NewlhkKmbhQHPOBV6q45JMemd/qA2K62M+dshjOmjWJb4I?=
 =?us-ascii?q?9j1kKA7TZzSunN35wd2fGXwhOHVyvgjFemqs32mZ1EaSsOEWalyCnkBJReZqt9?=
 =?us-ascii?q?fYsQDWeuIsu3xshxhpL3Wn5Y8kKjCE0C2MOzZRWSaFn91xVK1UsLuXynhTe4zz?=
 =?us-ascii?q?tsnjEzr6qQwDbBw/7/exoAIGJLQndtjU3tIYStk98VRkyoYBU3mxu/4kb6wbNW?=
 =?us-ascii?q?pKB+L2nVXEdJcDL6L2BkUqusqLWCZ9RD548vsSVSSO68e0yVSqbhoxsG1CPuB2?=
 =?us-ascii?q?tfxDEhezCqoJn5hAF6iGSGIXZ3rXrZf9xwxBjF6NzdQ/5RwiQJRC1ihTbLAVi8?=
 =?us-ascii?q?OsGj/c+ImJfbruC+S2WhW4VRcSbx14OAtyi75WpwDR2khf+zmd7nEQk80SDl0d?=
 =?us-ascii?q?lnTiHIrBf6Yon22KW2K+Nnfk90BFDi78p2AJ1xkow1hJsIw3gVmo2V/WYbkWf0?=
 =?us-ascii?q?Kdha2bjxbH0XST4Jwt7V5hPo2EliLnKP2oL4WW+RwspnZ9mmfGwW3jgx4NxNCK?=
 =?us-ascii?q?eR9LZEhzd6okKkrQLNZvhwhjQdxuEv6HIAg+EJpRAiziOSAr0JGUlYPCrslwmH?=
 =?us-ascii?q?7tykraVXYnqvfqa01EZkgd+hC7SCqBlGWHnlYpciATNw7sJnPVLJ0X3z6ZvrdM?=
 =?us-ascii?q?PebN0NrR2UjwnPj/JOJ50vjPoKijFqOWb8vX0j1u46ggZi3ZC8vIibNWpt+Li1?=
 =?us-ascii?q?DQJfNj3wf8kT4C3ijb5CnsaK2ICiBolhGjIOXJfyTPOnCjQSten8NwaVET0xsX?=
 =?us-ascii?q?ObGbvZHQ+C50ZqtXPPE5a3N36JIHkV18ltRB6YJEZHmgAbQC06noIlFgCt3MHu?=
 =?us-ascii?q?a1125jcV5l7lsBdMzv9oOgL7Umfeogeodzg1RIKeLBpQ8gFN+UPVPdaC4eJ0Gi?=
 =?us-ascii?q?FS5oehoxCVKmyHewRICnkEWk6eCFDmILau/sPM8/SCCuq9MvvOYqiOqepEWPeT?=
 =?us-ascii?q?3p+v1opm/zCRNsSAJHViDvs72lZdUnB9AcjWhzIPSykPnSLXc8GbvAu8+jFwrs?=
 =?us-ascii?q?2n8PXrXx/v5ZKSC7RIN9Vj4Qu2gaCFN+6fnyt5LTdY1pURxX7H0rQf3VgSiz1w?=
 =?us-ascii?q?eDmpC7gPqSnNTKfIkK9NExEbcz9zNNdP768k3glCJ8/bitD21r55lPI1CE1FVV?=
 =?us-ascii?q?vums63f8wKPnq9OUjDBEaKMrSGODLKz9v2YaO6Vb1fkuFUuwestjacFk/pJi6D?=
 =?us-ascii?q?mCXxVxCzLeFMizmWMwZDuI6maBZiF2jiQMjiah26K9J3iTw2wbsphnLFL2IcMD?=
 =?us-ascii?q?58c19Tob2U9y9XnvJ/G2lZ5Hp/MeaEgzqZ7/XfKpsOrftrAyF0m/hG73gg17RV?=
 =?us-ascii?q?7D9LRPpulSvWr95upUymk+aVxjpmVhpOtihEhIaRsUp+PqXZ84FKWWzY8xIV8W?=
 =?us-ascii?q?WQFxMKqsNlC9L1vaBQz9nPlKTrJzZD89Lb580cB8fPJcKDMXohNwfpGTHOAAsE?=
 =?us-ascii?q?Sz6rKX/Qh0hHnP6O8X2Vq8tylp+5tYAPQfdxVVM6G+kBQhBoFt0NL5ptRRsnnK?=
 =?us-ascii?q?SdgcpO4mCx+kr/XsJf67ndWrq4APj0KDuEk7RAL08B27++J4UeLY32xlJvbnF+?=
 =?us-ascii?q?nYLDAU2WWspC9H4yJjQoqVlApSAtBlY43FjoP0b0uCce?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AeAAAqNAFch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUwUBAQsBgmmBAieDeZQggg0UlzQUgRADTykDEAGHdiI2Bw0BAwEBAQEBAQI?=
 =?us-ascii?q?BEwEBAQgNCQgpIwyCNiQBgmEBAQEBAwECIAQZAQE3AQUJAQEKCwMHAwICJgICA?=
 =?us-ascii?q?x8SAQUBHAYTBYMcAYIBBZsWPIodcHwzgnYBAQWHKAgSeYlOgSQegVc/gRGDEoR?=
 =?us-ascii?q?Ggz+CV4sdlRYHAoIeBI8VGJEfgnmNaYUHgmIwgSwKW4EhfXQGgjUJgXcbCQMXE?=
 =?us-ascii?q?ogPPYVAPjOBBQEBjhsBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AeAAAqNAFch0O0hNFjHAEBAQQBAQcEAQGBUwUBAQsBgmm?=
 =?us-ascii?q?BAieDeZQggg0UlzQUgRADTykDEAGHdiI2Bw0BAwEBAQEBAQIBEwEBAQgNCQgpI?=
 =?us-ascii?q?wyCNiQBgmEBAQEBAwECIAQZAQE3AQUJAQEKCwMHAwICJgICAx8SAQUBHAYTBYM?=
 =?us-ascii?q?cAYIBBZsWPIodcHwzgnYBAQWHKAgSeYlOgSQegVc/gRGDEoRGgz+CV4sdlRYHA?=
 =?us-ascii?q?oIeBI8VGJEfgnmNaYUHgmIwgSwKW4EhfXQGgjUJgXcbCQMXEogPPYVAPjOBBQE?=
 =?us-ascii?q?BjhsBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,298,1539673200"; 
   d="scan'208";a="55542623"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 30 Nov 2018 05:03:44 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726650AbeLAAMz (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 30 Nov 2018 19:12:55 -0500
Received: from mail-it1-f194.google.com ([209.85.166.194]:38157 "EHLO
        mail-it1-f194.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726292AbeLAAMy (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 30 Nov 2018 19:12:54 -0500
Received: by mail-it1-f194.google.com with SMTP id h65so9040044ith.3
        for <linux-kernel@vger.kernel.org>; Fri, 30 Nov 2018 05:03:39 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=+H5KKnemiLpDOzthv19FcNeOn8/d0M5wkfy87RjxDWA=;
        b=CziAfmuMUjTE00EE0VFrOy2xBwxeYcKzxmwnQpBMQHu5Izm3Q0Kg6kctYxuNgghWBw
         41iQ37FryC4kqg/zFmrfZPhmmH6Ge0NLFNsxoUdHdJbUtQjGqtQ7NvwLx3Y9yIkIc6W4
         ET6DbHpum86BxBmavpq4C9oAP4lPXlt+TwRgI=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=+H5KKnemiLpDOzthv19FcNeOn8/d0M5wkfy87RjxDWA=;
        b=ppcgGnUacZAHn89qayBCs3ktu04jlajHpQxoI+LyRBKVGeHSbEBbliuK0ibhIDHX6X
         dJEpO16VpayzMRL4DSjVTVsoVZhPyZeDmZHwpGeTfvg9m1NbFNUqfRYILgvbFHMjJx2T
         zTv/rQME3559ME8FhlZmM4qs2KMhafIogEt2jvJCDmFaAN0leHIEl/cOTjEtr5o1acln
         Kq8FUnP6hC1yhi8ZCEFHF4wYRct++uePwrRXyZonpBC0ZUaJLt+TVURO0x1fEQeyaMjW
         dYVDnXUjnQ/oH6rzB/bR16TlKat6dJfO933dNtZh3MQMD0WKVHqU31qSnKO4vECKrXTE
         mEvA==
X-Gm-Message-State: AA+aEWaRP5haQrf6QBSPOUkbJv5wrt5WN2/g8k3W7QmRE9mZ65IruL+Q
        eAmyl6Uu5I81IreGPI6XvvIFAloguHPnFBzpsiSQQ7t8
X-Google-Smtp-Source: AFSGD/WsE402u9v0o4r00Nh6cArm3G4mlfUncl2u10FbmUmp6TyYyXGJAPsJ1ODrUaADPDcZdI0q8PDozVSc06uZk1c=
X-Received: by 2002:a24:edc4:: with SMTP id r187mr5541854ith.158.1543583019142;
 Fri, 30 Nov 2018 05:03:39 -0800 (PST)
MIME-Version: 1.0
References: <20181129063422.24307-1-ebiggers@kernel.org> <20181129063422.24307-4-ebiggers@kernel.org>
In-Reply-To: <20181129063422.24307-4-ebiggers@kernel.org>
From: Ard Biesheuvel <ard.biesheuvel@linaro.org>
Date: Fri, 30 Nov 2018 14:03:26 +0100
Message-ID: <CAKv+Gu-QLTXPJ0zKurFUhfQx-hDMvC1YJi3QduA5dtw-8CoVqg@mail.gmail.com>
Subject: Re: [PATCH 3/4] crypto: arm64/chacha20 - refactor to allow varying
 number of rounds
To: Eric Biggers <ebiggers@kernel.org>
Cc: "open list:HARDWARE RANDOM NUMBER GENERATOR CORE" 
        <linux-crypto@vger.kernel.org>,
        Paul Crowley <paulcrowley@google.com>,
        "Jason A. Donenfeld" <Jason@zx2c4.com>,
        linux-arm-kernel <linux-arm-kernel@lists.infradead.org>,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Thu, 29 Nov 2018 at 07:35, Eric Biggers <ebiggers@kernel.org> wrote:
>
> From: Eric Biggers <ebiggers@google.com>
>
> In preparation for adding XChaCha12 support, rename/refactor the ARM64
> NEON implementation of ChaCha20 to support different numbers of rounds.
>
> Signed-off-by: Eric Biggers <ebiggers@google.com>

Reviewed-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>

> ---
>  arch/arm64/crypto/Makefile                    |  4 +-
>  ...hacha20-neon-core.S => chacha-neon-core.S} | 45 ++++++++-------
>  ...hacha20-neon-glue.c => chacha-neon-glue.c} | 57 ++++++++++---------
>  3 files changed, 57 insertions(+), 49 deletions(-)
>  rename arch/arm64/crypto/{chacha20-neon-core.S => chacha-neon-core.S} (94%)
>  rename arch/arm64/crypto/{chacha20-neon-glue.c => chacha-neon-glue.c} (71%)
>
> diff --git a/arch/arm64/crypto/Makefile b/arch/arm64/crypto/Makefile
> index 125dbb10a93ed..a4ffd9fe32650 100644
> --- a/arch/arm64/crypto/Makefile
> +++ b/arch/arm64/crypto/Makefile
> @@ -50,8 +50,8 @@ sha256-arm64-y := sha256-glue.o sha256-core.o
>  obj-$(CONFIG_CRYPTO_SHA512_ARM64) += sha512-arm64.o
>  sha512-arm64-y := sha512-glue.o sha512-core.o
>
> -obj-$(CONFIG_CRYPTO_CHACHA20_NEON) += chacha20-neon.o
> -chacha20-neon-y := chacha20-neon-core.o chacha20-neon-glue.o
> +obj-$(CONFIG_CRYPTO_CHACHA20_NEON) += chacha-neon.o
> +chacha-neon-y := chacha-neon-core.o chacha-neon-glue.o
>
>  obj-$(CONFIG_CRYPTO_NHPOLY1305_NEON) += nhpoly1305-neon.o
>  nhpoly1305-neon-y := nh-neon-core.o nhpoly1305-neon-glue.o
> diff --git a/arch/arm64/crypto/chacha20-neon-core.S b/arch/arm64/crypto/chacha-neon-core.S
> similarity index 94%
> rename from arch/arm64/crypto/chacha20-neon-core.S
> rename to arch/arm64/crypto/chacha-neon-core.S
> index 378850505c0ae..75b4e06cee79f 100644
> --- a/arch/arm64/crypto/chacha20-neon-core.S
> +++ b/arch/arm64/crypto/chacha-neon-core.S
> @@ -1,5 +1,5 @@
>  /*
> - * ChaCha20 256-bit cipher algorithm, RFC7539, arm64 NEON functions
> + * ChaCha/XChaCha NEON helper functions
>   *
>   * Copyright (C) 2016 Linaro, Ltd. <ard.biesheuvel@linaro.org>
>   *
> @@ -24,17 +24,18 @@
>         .align          6
>
>  /*
> - * chacha20_permute - permute one block
> + * chacha_permute - permute one block
>   *
>   * Permute one 64-byte block where the state matrix is stored in the four NEON
>   * registers v0-v3.  It performs matrix operations on four words in parallel,
>   * but requires shuffling to rearrange the words after each round.
>   *
> - * Clobbers: x3, x10, v4, v12
> + * The round count is given in w3.
> + *
> + * Clobbers: w3, x10, v4, v12
>   */
> -chacha20_permute:
> +chacha_permute:
>
> -       mov             x3, #10
>         adr             x10, ROT8
>         ld1             {v12.4s}, [x10]
>
> @@ -97,16 +98,17 @@ chacha20_permute:
>         // x3 = shuffle32(x3, MASK(0, 3, 2, 1))
>         ext             v3.16b, v3.16b, v3.16b, #4
>
> -       subs            x3, x3, #1
> +       subs            w3, w3, #2
>         b.ne            .Ldoubleround
>
>         ret
> -ENDPROC(chacha20_permute)
> +ENDPROC(chacha_permute)
>
> -ENTRY(chacha20_block_xor_neon)
> +ENTRY(chacha_block_xor_neon)
>         // x0: Input state matrix, s
>         // x1: 1 data block output, o
>         // x2: 1 data block input, i
> +       // w3: nrounds
>
>         mov             x9, lr
>
> @@ -114,7 +116,7 @@ ENTRY(chacha20_block_xor_neon)
>         ld1             {v0.4s-v3.4s}, [x0]
>         ld1             {v8.4s-v11.4s}, [x0]
>
> -       bl              chacha20_permute
> +       bl              chacha_permute
>
>         ld1             {v4.16b-v7.16b}, [x2]
>
> @@ -137,39 +139,42 @@ ENTRY(chacha20_block_xor_neon)
>         st1             {v0.16b-v3.16b}, [x1]
>
>         ret             x9
> -ENDPROC(chacha20_block_xor_neon)
> +ENDPROC(chacha_block_xor_neon)
>
> -ENTRY(hchacha20_block_neon)
> +ENTRY(hchacha_block_neon)
>         // x0: Input state matrix, s
>         // x1: output (8 32-bit words)
> +       // w2: nrounds
>         mov             x9, lr
>
>         ld1             {v0.4s-v3.4s}, [x0]
>
> -       bl              chacha20_permute
> +       mov             w3, w2
> +       bl              chacha_permute
>
>         st1             {v0.16b}, [x1], #16
>         st1             {v3.16b}, [x1]
>
>         ret             x9
> -ENDPROC(hchacha20_block_neon)
> +ENDPROC(hchacha_block_neon)
>
>         .align          6
> -ENTRY(chacha20_4block_xor_neon)
> +ENTRY(chacha_4block_xor_neon)
>         // x0: Input state matrix, s
>         // x1: 4 data blocks output, o
>         // x2: 4 data blocks input, i
> +       // w3: nrounds
>
>         //
> -       // This function encrypts four consecutive ChaCha20 blocks by loading
> +       // This function encrypts four consecutive ChaCha blocks by loading
>         // the state matrix in NEON registers four times. The algorithm performs
>         // each operation on the corresponding word of each state matrix, hence
>         // requires no word shuffling. For final XORing step we transpose the
>         // matrix by interleaving 32- and then 64-bit words, which allows us to
>         // do XOR in NEON registers.
>         //
> -       adr             x3, CTRINC              // ... and ROT8
> -       ld1             {v30.4s-v31.4s}, [x3]
> +       adr             x9, CTRINC              // ... and ROT8
> +       ld1             {v30.4s-v31.4s}, [x9]
>
>         // x0..15[0-3] = s0..3[0..3]
>         mov             x4, x0
> @@ -181,8 +186,6 @@ ENTRY(chacha20_4block_xor_neon)
>         // x12 += counter values 0-3
>         add             v12.4s, v12.4s, v30.4s
>
> -       mov             x3, #10
> -
>  .Ldoubleround4:
>         // x0 += x4, x12 = rotl32(x12 ^ x0, 16)
>         // x1 += x5, x13 = rotl32(x13 ^ x1, 16)
> @@ -356,7 +359,7 @@ ENTRY(chacha20_4block_xor_neon)
>         sri             v7.4s, v18.4s, #25
>         sri             v4.4s, v19.4s, #25
>
> -       subs            x3, x3, #1
> +       subs            w3, w3, #2
>         b.ne            .Ldoubleround4
>
>         ld4r            {v16.4s-v19.4s}, [x0], #16
> @@ -470,7 +473,7 @@ ENTRY(chacha20_4block_xor_neon)
>         st1             {v28.16b-v31.16b}, [x1]
>
>         ret
> -ENDPROC(chacha20_4block_xor_neon)
> +ENDPROC(chacha_4block_xor_neon)
>
>  CTRINC:        .word           0, 1, 2, 3
>  ROT8:  .word           0x02010003, 0x06050407, 0x0a09080b, 0x0e0d0c0f
> diff --git a/arch/arm64/crypto/chacha20-neon-glue.c b/arch/arm64/crypto/chacha-neon-glue.c
> similarity index 71%
> rename from arch/arm64/crypto/chacha20-neon-glue.c
> rename to arch/arm64/crypto/chacha-neon-glue.c
> index a5b9cbc0c4de4..4d992029b9121 100644
> --- a/arch/arm64/crypto/chacha20-neon-glue.c
> +++ b/arch/arm64/crypto/chacha-neon-glue.c
> @@ -1,5 +1,6 @@
>  /*
> - * ChaCha20 256-bit cipher algorithm, RFC7539, arm64 NEON functions
> + * ARM NEON accelerated ChaCha and XChaCha stream ciphers,
> + * including ChaCha20 (RFC7539)
>   *
>   * Copyright (C) 2016 - 2017 Linaro, Ltd. <ard.biesheuvel@linaro.org>
>   *
> @@ -28,18 +29,20 @@
>  #include <asm/neon.h>
>  #include <asm/simd.h>
>
> -asmlinkage void chacha20_block_xor_neon(u32 *state, u8 *dst, const u8 *src);
> -asmlinkage void chacha20_4block_xor_neon(u32 *state, u8 *dst, const u8 *src);
> -asmlinkage void hchacha20_block_neon(const u32 *state, u32 *out);
> +asmlinkage void chacha_block_xor_neon(u32 *state, u8 *dst, const u8 *src,
> +                                     int nrounds);
> +asmlinkage void chacha_4block_xor_neon(u32 *state, u8 *dst, const u8 *src,
> +                                      int nrounds);
> +asmlinkage void hchacha_block_neon(const u32 *state, u32 *out, int nrounds);
>
> -static void chacha20_doneon(u32 *state, u8 *dst, const u8 *src,
> -                           unsigned int bytes)
> +static void chacha_doneon(u32 *state, u8 *dst, const u8 *src,
> +                         unsigned int bytes, int nrounds)
>  {
>         u8 buf[CHACHA_BLOCK_SIZE];
>
>         while (bytes >= CHACHA_BLOCK_SIZE * 4) {
>                 kernel_neon_begin();
> -               chacha20_4block_xor_neon(state, dst, src);
> +               chacha_4block_xor_neon(state, dst, src, nrounds);
>                 kernel_neon_end();
>                 bytes -= CHACHA_BLOCK_SIZE * 4;
>                 src += CHACHA_BLOCK_SIZE * 4;
> @@ -52,7 +55,7 @@ static void chacha20_doneon(u32 *state, u8 *dst, const u8 *src,
>
>         kernel_neon_begin();
>         while (bytes >= CHACHA_BLOCK_SIZE) {
> -               chacha20_block_xor_neon(state, dst, src);
> +               chacha_block_xor_neon(state, dst, src, nrounds);
>                 bytes -= CHACHA_BLOCK_SIZE;
>                 src += CHACHA_BLOCK_SIZE;
>                 dst += CHACHA_BLOCK_SIZE;
> @@ -60,14 +63,14 @@ static void chacha20_doneon(u32 *state, u8 *dst, const u8 *src,
>         }
>         if (bytes) {
>                 memcpy(buf, src, bytes);
> -               chacha20_block_xor_neon(state, buf, buf);
> +               chacha_block_xor_neon(state, buf, buf, nrounds);
>                 memcpy(dst, buf, bytes);
>         }
>         kernel_neon_end();
>  }
>
> -static int chacha20_neon_stream_xor(struct skcipher_request *req,
> -                                   struct chacha_ctx *ctx, u8 *iv)
> +static int chacha_neon_stream_xor(struct skcipher_request *req,
> +                                 struct chacha_ctx *ctx, u8 *iv)
>  {
>         struct skcipher_walk walk;
>         u32 state[16];
> @@ -83,15 +86,15 @@ static int chacha20_neon_stream_xor(struct skcipher_request *req,
>                 if (nbytes < walk.total)
>                         nbytes = round_down(nbytes, walk.stride);
>
> -               chacha20_doneon(state, walk.dst.virt.addr, walk.src.virt.addr,
> -                               nbytes);
> +               chacha_doneon(state, walk.dst.virt.addr, walk.src.virt.addr,
> +                             nbytes, ctx->nrounds);
>                 err = skcipher_walk_done(&walk, walk.nbytes - nbytes);
>         }
>
>         return err;
>  }
>
> -static int chacha20_neon(struct skcipher_request *req)
> +static int chacha_neon(struct skcipher_request *req)
>  {
>         struct crypto_skcipher *tfm = crypto_skcipher_reqtfm(req);
>         struct chacha_ctx *ctx = crypto_skcipher_ctx(tfm);
> @@ -99,10 +102,10 @@ static int chacha20_neon(struct skcipher_request *req)
>         if (req->cryptlen <= CHACHA_BLOCK_SIZE || !may_use_simd())
>                 return crypto_chacha_crypt(req);
>
> -       return chacha20_neon_stream_xor(req, ctx, req->iv);
> +       return chacha_neon_stream_xor(req, ctx, req->iv);
>  }
>
> -static int xchacha20_neon(struct skcipher_request *req)
> +static int xchacha_neon(struct skcipher_request *req)
>  {
>         struct crypto_skcipher *tfm = crypto_skcipher_reqtfm(req);
>         struct chacha_ctx *ctx = crypto_skcipher_ctx(tfm);
> @@ -116,12 +119,13 @@ static int xchacha20_neon(struct skcipher_request *req)
>         crypto_chacha_init(state, ctx, req->iv);
>
>         kernel_neon_begin();
> -       hchacha20_block_neon(state, subctx.key);
> +       hchacha_block_neon(state, subctx.key, ctx->nrounds);
>         kernel_neon_end();
> +       subctx.nrounds = ctx->nrounds;
>
>         memcpy(&real_iv[0], req->iv + 24, 8);
>         memcpy(&real_iv[8], req->iv + 16, 8);
> -       return chacha20_neon_stream_xor(req, &subctx, real_iv);
> +       return chacha_neon_stream_xor(req, &subctx, real_iv);
>  }
>
>  static struct skcipher_alg algs[] = {
> @@ -139,8 +143,8 @@ static struct skcipher_alg algs[] = {
>                 .chunksize              = CHACHA_BLOCK_SIZE,
>                 .walksize               = 4 * CHACHA_BLOCK_SIZE,
>                 .setkey                 = crypto_chacha20_setkey,
> -               .encrypt                = chacha20_neon,
> -               .decrypt                = chacha20_neon,
> +               .encrypt                = chacha_neon,
> +               .decrypt                = chacha_neon,
>         }, {
>                 .base.cra_name          = "xchacha20",
>                 .base.cra_driver_name   = "xchacha20-neon",
> @@ -155,12 +159,12 @@ static struct skcipher_alg algs[] = {
>                 .chunksize              = CHACHA_BLOCK_SIZE,
>                 .walksize               = 4 * CHACHA_BLOCK_SIZE,
>                 .setkey                 = crypto_chacha20_setkey,
> -               .encrypt                = xchacha20_neon,
> -               .decrypt                = xchacha20_neon,
> +               .encrypt                = xchacha_neon,
> +               .decrypt                = xchacha_neon,
>         }
>  };
>
> -static int __init chacha20_simd_mod_init(void)
> +static int __init chacha_simd_mod_init(void)
>  {
>         if (!(elf_hwcap & HWCAP_ASIMD))
>                 return -ENODEV;
> @@ -168,14 +172,15 @@ static int __init chacha20_simd_mod_init(void)
>         return crypto_register_skciphers(algs, ARRAY_SIZE(algs));
>  }
>
> -static void __exit chacha20_simd_mod_fini(void)
> +static void __exit chacha_simd_mod_fini(void)
>  {
>         crypto_unregister_skciphers(algs, ARRAY_SIZE(algs));
>  }
>
> -module_init(chacha20_simd_mod_init);
> -module_exit(chacha20_simd_mod_fini);
> +module_init(chacha_simd_mod_init);
> +module_exit(chacha_simd_mod_fini);
>
> +MODULE_DESCRIPTION("ChaCha and XChaCha stream ciphers (NEON accelerated)");
>  MODULE_AUTHOR("Ard Biesheuvel <ard.biesheuvel@linaro.org>");
>  MODULE_LICENSE("GPL v2");
>  MODULE_ALIAS_CRYPTO("chacha20");
> --
> 2.19.2
>
