Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 08:48:50 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga008.fm.intel.com (fmsmga008.fm.intel.com [10.253.24.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id E12B15802E4;
	Thu, 29 Nov 2018 09:14:06 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga008-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 09:14:06 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ANoIpdxXWQVb3S9HdI9GZiFK+NYzV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhGPuqdThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGoOy?=
 =?us-ascii?q?YZUSAeQPPuhWqIvyp1UBohWxHgmsHOHixyRUinL1x6A2z/4sHR3a0AEmAtkAsG?=
 =?us-ascii?q?7UrNLwNKoKTe211rTHxijeYvNXxzj984jIfQ48ofGSQ71wddfaxE41GAPfk1qc?=
 =?us-ascii?q?s5fqPzKL2eQWs2iU8fdgVfyxhG4jsAxxpjmvxsE2hYnTgYIZ0FfE9T92wIssI9?=
 =?us-ascii?q?CzVU11Yca8HZdOqy2XM5F6Tt4sTm12oio2174LtYKhcCULypkr3wDTZOabf4SV?=
 =?us-ascii?q?5x/sSP2eLSpli39gZb6zmgi+/E2hx+3ySsW4zFNHriRZntTOqnwA0gHc5taIR/?=
 =?us-ascii?q?dh+0qs1yuD2x7N5exBJU00m67WJponz7UtjJQcq17DETXzmEjujK+ZaEEk+u+w?=
 =?us-ascii?q?5uT5bbXpuIWcO5V3ig7gKKQunNKwAeAiPggJRWib9vyw1Lzl/ULnXLVHluM6nr?=
 =?us-ascii?q?XdvZzAOMgWqLC1DxVI3osg9xqzFTar3dYAkXkCNl1FeRaHj4bzO1HJJfD1FfO/?=
 =?us-ascii?q?g1WqkDd2yPHKJ77hDYvXLnjFjrjhea9x60lSyQo1099f/YlZCq8OIP3tQE/9rt?=
 =?us-ascii?q?/YAQEjMwyy3ennDM9x1oQEWWKAGqOZKr/dsUeU5uIzJOmBfIsVuDf+K/c7/fLv?=
 =?us-ascii?q?gmI5lEQZfamo25sXdX+5Eu5nI0WffXrjnNMBHX0WsQo5SezgkEeCXiJLZ3auQ6?=
 =?us-ascii?q?I84Sk2CIK8AofCWoCimruB0D27Hp1LfG9GDF+MHGzsd4WFXfcMdS2TLtVgkjwC?=
 =?us-ascii?q?SbiuVYsh2Quyuw/9zrptNvDU9TEAtZL/yNh14PXelRM19TNqFcid0GaNT2dynm?=
 =?us-ascii?q?MPXDI22KF/oUpgylaMy6R4gvpYFcBN6PNNSAs1KZncz+liAdDoRg3BZsuJSEqh?=
 =?us-ascii?q?Qti+Gz4xVdIxw9gNY0pnAdWtlBLD0jGuA78UkbyLGZM1/rjd33j3O8Zy1XLG2L?=
 =?us-ascii?q?M9gFkhR8tFLXemibJn9wjPG47JlF2Ul6WweqQaxiLN8GaDwnCIvEFXSwNwVaTF?=
 =?us-ascii?q?XXYCZkrZt9j550XCT6OwBrQjKAdO1cmCKq5SYN3zkVpGXOvjOMjZY2+phmi/Hw?=
 =?us-ascii?q?iIya2WYIrqYWod2j7dB1YCkwwU+XaGNg0+BiO6rmLaDTxuE0/vYkz2/el/rnO7?=
 =?us-ascii?q?UlE7zwWQY0J90Lq1/wYfheaARPMLwrIEpCAhpi1pE1mnwdLZFcCMpwp7c6Vaet?=
 =?us-ascii?q?My/lFH2Hndtwx8OJygMq9jikQfcwRxo0PhyRF3Bp9cnsgtqXMg1BByJr6A0FNd?=
 =?us-ascii?q?azOY2oj9OqHWKmn3+xCvd67W21HE3NaK4KsP7+44q1HivAGvGUov6HFn09hT03?=
 =?us-ascii?q?uB6ZTGFgsSUZTtUkkp8xh2va3VYi4454nMz31jLbG0siPe29IuHOYq0BKgcMlQ?=
 =?us-ascii?q?MayaFA7+CdYVB9WzJ+MwnVipbRUEPP5J+a4wPsOmceaG2aGxMOZhmjKmkXpI4I?=
 =?us-ascii?q?Rn3k2Q8Cp8T/bC34wZzPGAwguHSzD8gU+hs8Dqg4xLeSseH2u/ySf+Ao5RabZ/?=
 =?us-ascii?q?fYIKCWeoPs22yc9yh5/rW35E6lGjA0kK19OueRqXd1b9xxFf1VwLoXy7niu11y?=
 =?us-ascii?q?Z0kzA1oaWFxizB3uPieAABOmFVXmlijE7gLpSugNAeQUencRIplByj5Uvhw6hb?=
 =?us-ascii?q?paJ/L3TcQEtSfij2KX1iXbW0traYf8FP75Youz1NUOugeVCaVqL9oxwC3iLjHm?=
 =?us-ascii?q?tS3jA6eyuxupXkmRx3k2adLHd1rHrEdsB83xbf5NrARfFP2joKXjV3iT7SBlKk?=
 =?us-ascii?q?Jdmm4c2Ul4vfsuC5T2+hVIdccTPozYODsyu3/3ZqDge8n/Cwm93nFxY10Sng2t?=
 =?us-ascii?q?luVCXIqgv8Y4bx26S7N+JnYldnBFvm58VmHYF+l5M6hIsM1ngCmpWV4X0HnH/z?=
 =?us-ascii?q?MNpB3qLydngNRT8Nw9PO5Ajl2UtjLm+Gxo7jV3WdxNdhaMe+Ym8Mxi096MVKAr?=
 =?us-ascii?q?+O7LNYhSt1vka4rQXJbPh+hDgdyOEi6H4Hg+4TvgotwT6QArQTHUleICztmA6E?=
 =?us-ascii?q?79G4rKVLemmvdaK821Z5ndCkFLuCuB1TWG7lepc+Gi999sB/MFPP0HLp8I3lds?=
 =?us-ascii?q?ffbckPthKKiRfPlPZaKIg+lvcRgSpnOGT9vWAqyuIhjBxu2426s5aDK2l34K25?=
 =?us-ascii?q?BRtYPCXvZ8wP4jHtkbpensGO0oCzGZVhHy8HXZryQvKuDTISru/nNweVHT04q3?=
 =?us-ascii?q?ebH6ffHACF5EdnqXLPD46kN3WNKHYFytViQQGXJFZDjwAMQDU6gpk5Gxixy8P7?=
 =?us-ascii?q?d0d54i0R6kT8qhtR0e9oMxj/UmHCpAancDs0SZ6fLAZI4QFG/UvaLcue7udrFS?=
 =?us-ascii?q?FC4pKhtBCNKnCcZwlQD2EGQEmECE74PrW0+dnM6euYBve9L/vTZ7WBs/deWuyM?=
 =?us-ascii?q?xZKu1Itm4jmNOt+OPnlkE/00xE5DUWplFMTenjUFUzYXmD7Vb86HuBe8/TV6r8?=
 =?us-ascii?q?C48PT2QQLv+JGAC71IPdV0/BC2h6iDOvWUhCZ4LzZYy5wNyWXJyLgZwF4dlSVu?=
 =?us-ascii?q?eyOxHrQHsC7HVLjQlbNPDx4HdyNzM9NF76Ii0QlMOs7bidL12qR7jv4vDFdFWk?=
 =?us-ascii?q?Lumtu0ZcwROGy9MFLHBECWNLWJPzHLwsf3Yb+iRr1UlulbqxqwuTODGU/5IjuD?=
 =?us-ascii?q?jyXpVwyoMexUli6bIQdRuJujfRdtE2TjSNPmZwa/MN92iz023LI1imnLNW4aLT?=
 =?us-ascii?q?hzbUdNoqeM4iNfh/V1A3ZB4WZ9LemYhyaZ6PHVKooXsftuGCh7i/hW72g6y7RL?=
 =?us-ascii?q?6iFJX/h1mCrUrt5zrFCqiOiPyjx7UBVQrjZHnp6EvUJnOa/B7JlPRW7E/A4R7W?=
 =?us-ascii?q?WXExkLp8FqCtvqu6BRzNjAjKPyKDdY/NLS8ssRHMzUKMOBMHo8PhvlAj/UDA0Z?=
 =?us-ascii?q?TTG1MWHTnVBSkPaX9i7dkp9vrpnqhYpLR7FafEI6G+lcCUl/GtEGZpBtUXdssL?=
 =?us-ascii?q?iUi4Yt4n64pQOZEMBbuJ/AfvGfG/PiLHCel7YSI1M0wbT9JJ9bGYn22lxkZ0My?=
 =?us-ascii?q?yJjFH1r4WdFLvzF7aQk1sANB/S4tYHc03hfMcA/lyn4eDv65gwA7jkMqaP4hsj?=
 =?us-ascii?q?3t7kw3K0fUqS8YlEg3kM/ixzeLf2iif++LQYhKBn+s5AAKOZThTlMwNFXqkA?=
 =?us-ascii?q?=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAAADHgBch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgTCCOyeMEYwIgg0UaJZIgXMSAQEYEwGHdCI0CQ0BAwEBAQEBAQI?=
 =?us-ascii?q?BEwEBAQgNCQgpIwyCNiQBgmIDAwECJAsBDQEBNwEFCQEBHzEDMQEFAQIaBgESB?=
 =?us-ascii?q?YMcggIBBJsBPIodgWwzgnYBAQWHKAgSh1mDD4EcgVc/gRGCXQeLCokqgXGVCgc?=
 =?us-ascii?q?Cgh0EjwYLGIlYh0SIeI8vAgQCBAUCBQ8hgSWCDX2DL4IbDBcSiEyFQD8yAYEDA?=
 =?us-ascii?q?QEBII0aAQE?=
X-IPAS-Result: =?us-ascii?q?A0ANAAADHgBch0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBgTC?=
 =?us-ascii?q?COyeMEYwIgg0UaJZIgXMSAQEYEwGHdCI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpI?=
 =?us-ascii?q?wyCNiQBgmIDAwECJAsBDQEBNwEFCQEBHzEDMQEFAQIaBgESBYMcggIBBJsBPIo?=
 =?us-ascii?q?dgWwzgnYBAQWHKAgSh1mDD4EcgVc/gRGCXQeLCokqgXGVCgcCgh0EjwYLGIlYh?=
 =?us-ascii?q?0SIeI8vAgQCBAUCBQ8hgSWCDX2DL4IbDBcSiEyFQD8yAYEDAQEBII0aAQE?=
X-IronPort-AV: E=Sophos;i="5.56,295,1539673200"; 
   d="scan'208";a="53185606"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 09:14:05 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730527AbeK3ETB (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 29 Nov 2018 23:19:01 -0500
Received: from mail-wr1-f65.google.com ([209.85.221.65]:35048 "EHLO
        mail-wr1-f65.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1728554AbeK3ETB (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 29 Nov 2018 23:19:01 -0500
Received: by mail-wr1-f65.google.com with SMTP id 96so2696142wrb.2
        for <linux-kernel@vger.kernel.org>; Thu, 29 Nov 2018 09:12:55 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding;
        bh=9iTHNAMi/B7M59UNr1H/N7bE0xz4z3gfTlAxn3XU6zk=;
        b=IggHAJei/HY1eekMT9MKvSsKn2ZhjsFwMEfCojcv0lIodqCRBUHbdO8IqfqEPCge5c
         XqAVKSQE6Jc7+/UASrkQRlFwrIyPAziUKerwEFvHVV/ff5prnWM9DOFcWDDch0Xu7hlb
         PvTEJ6tDpRrmrFGOtTXlBs3p87E9yD9WX8CGw=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=9iTHNAMi/B7M59UNr1H/N7bE0xz4z3gfTlAxn3XU6zk=;
        b=IFPPzr+WoiYPpuel8giaExXcONCLYWWAi48CdhVsbNmj+n5pHCvK4+cNSQVnTt31Cp
         Ycv2MBpdLe0zArQeSMhCwfRbOSG1lAbxCAeEaLR7pFn55LyxLBgmoKLo+9EG0a4D+CxC
         Xp1VQNNF44gHSDTBmquwv/86ze6/H7jESvakZTB9UgJ6MJXjedqx2ZxgY0GBQQeQzlo6
         nITG5QlFSarNcIlEgl+MRv3eVD/Qo9u92cQn1y4kHEWnwbR4rtzObbOEkZLpWeF5yS37
         B55Kd3ty2QoUxWcmbkTfFgn706Kx5K8E/ESJIDZOQq5HZd64RzZHIq+eegpB3BeJ57m9
         EWUQ==
X-Gm-Message-State: AA+aEWYa4mbP2GVZod5P5r4YNBo9w3txoM/vNfKIxg3jOSnWUaSQLjyr
        Jaf5/YWqzrOer5fCDvKvBp2jSg==
X-Google-Smtp-Source: AFSGD/UtLDkMHc5HoaZecxiqbpX5WWCFPebCteGp3tJbQc8pykCjasUtQfc+3ZX4DGY1KSKu21e1Mw==
X-Received: by 2002:adf:9ec8:: with SMTP id b8mr2256654wrf.164.1543511574762;
        Thu, 29 Nov 2018 09:12:54 -0800 (PST)
Received: from harold.home ([2a01:cb1d:112:6f00:f070:d240:312e:9f99])
        by smtp.gmail.com with ESMTPSA id y185sm1593882wmg.34.2018.11.29.09.12.53
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Thu, 29 Nov 2018 09:12:53 -0800 (PST)
From: Ard Biesheuvel <ard.biesheuvel@linaro.org>
To: linux-efi@vger.kernel.org, Ingo Molnar <mingo@kernel.org>,
        Thomas Gleixner <tglx@linutronix.de>
Cc: Ard Biesheuvel <ard.biesheuvel@linaro.org>,
        linux-kernel@vger.kernel.org, Andy Lutomirski <luto@kernel.org>,
        Arend van Spriel <arend.vanspriel@broadcom.com>,
        Bhupesh Sharma <bhsharma@redhat.com>,
        Borislav Petkov <bp@alien8.de>,
        Dave Hansen <dave.hansen@intel.com>,
        Eric Snowberg <eric.snowberg@oracle.com>,
        Hans de Goede <hdegoede@redhat.com>,
        Joe Perches <joe@perches.com>,
        Jon Hunter <jonathanh@nvidia.com>,
        Julien Thierry <julien.thierry@arm.com>,
        Marc Zyngier <marc.zyngier@arm.com>,
        Nathan Chancellor <natechancellor@gmail.com>,
        Peter Zijlstra <peterz@infradead.org>,
        Sai Praneeth Prakhya <sai.praneeth.prakhya@intel.com>,
        Sedat Dilek <sedat.dilek@gmail.com>,
        YiFei Zhu <zhuyifei1999@gmail.com>
Subject: [PATCH 04/11] x86/mm/pageattr: Introduce helper function to unmap EFI boot services
Date: Thu, 29 Nov 2018 18:12:23 +0100
Message-Id: <20181129171230.18699-5-ard.biesheuvel@linaro.org>
X-Mailer: git-send-email 2.19.1
In-Reply-To: <20181129171230.18699-1-ard.biesheuvel@linaro.org>
References: <20181129171230.18699-1-ard.biesheuvel@linaro.org>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From: Sai Praneeth Prakhya <sai.praneeth.prakhya@intel.com>

Ideally, after kernel assumes control of the platform, firmware
shouldn't access EFI boot services code/data regions. But, it's noticed
that this is not so true in many x86 platforms. Hence, during boot,
kernel reserves EFI boot services code/data regions [1] and maps [2]
them to efi_pgd so that call to set_virtual_address_map() doesn't fail.
After returning from set_virtual_address_map(), kernel frees the
reserved regions [3] but they still remain mapped. Hence, introduce
kernel_unmap_pages_in_pgd() which will later be used to unmap EFI boot
services code/data regions.

While at it modify kernel_map_pages_in_pgd() by
1. Adding __init modifier because it's always used *only* during boot.
2. Add a warning if it's used after SMP is initialized because it uses
   __flush_tlb_all() which flushes mappings only on current CPU.

Unmapping EFI boot services code/data regions will result in clearing
PAGE_PRESENT bit and it shouldn't bother L1TF cases because it's already
handled by protnone_mask() at arch/x86/include/asm/pgtable-invert.h.

[1] efi_reserve_boot_services()
[2] efi_map_region() -> __map_region() -> kernel_map_pages_in_pgd()
[3] efi_free_boot_services()

Signed-off-by: Sai Praneeth Prakhya <sai.praneeth.prakhya@intel.com>
Cc: Borislav Petkov <bp@alien8.de>
Cc: Ingo Molnar <mingo@kernel.org>
Cc: Andy Lutomirski <luto@kernel.org>
Cc: Dave Hansen <dave.hansen@intel.com>
Cc: Bhupesh Sharma <bhsharma@redhat.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
---
 arch/x86/include/asm/pgtable_types.h |  8 ++++--
 arch/x86/mm/pageattr.c               | 40 ++++++++++++++++++++++++++--
 2 files changed, 44 insertions(+), 4 deletions(-)

diff --git a/arch/x86/include/asm/pgtable_types.h b/arch/x86/include/asm/pgtable_types.h
index 106b7d0e2dae..d6ff0bbdb394 100644
--- a/arch/x86/include/asm/pgtable_types.h
+++ b/arch/x86/include/asm/pgtable_types.h
@@ -564,8 +564,12 @@ extern pte_t *lookup_address_in_pgd(pgd_t *pgd, unsigned long address,
 				    unsigned int *level);
 extern pmd_t *lookup_pmd_address(unsigned long address);
 extern phys_addr_t slow_virt_to_phys(void *__address);
-extern int kernel_map_pages_in_pgd(pgd_t *pgd, u64 pfn, unsigned long address,
-				   unsigned numpages, unsigned long page_flags);
+extern int __init kernel_map_pages_in_pgd(pgd_t *pgd, u64 pfn,
+					  unsigned long address,
+					  unsigned numpages,
+					  unsigned long page_flags);
+extern int __init kernel_unmap_pages_in_pgd(pgd_t *pgd, unsigned long address,
+					    unsigned long numpages);
 #endif	/* !__ASSEMBLY__ */
 
 #endif /* _ASM_X86_PGTABLE_DEFS_H */
diff --git a/arch/x86/mm/pageattr.c b/arch/x86/mm/pageattr.c
index db7a10082238..bac35001d896 100644
--- a/arch/x86/mm/pageattr.c
+++ b/arch/x86/mm/pageattr.c
@@ -2338,8 +2338,8 @@ bool kernel_page_present(struct page *page)
 
 #endif /* CONFIG_DEBUG_PAGEALLOC */
 
-int kernel_map_pages_in_pgd(pgd_t *pgd, u64 pfn, unsigned long address,
-			    unsigned numpages, unsigned long page_flags)
+int __init kernel_map_pages_in_pgd(pgd_t *pgd, u64 pfn, unsigned long address,
+				   unsigned numpages, unsigned long page_flags)
 {
 	int retval = -EINVAL;
 
@@ -2353,6 +2353,8 @@ int kernel_map_pages_in_pgd(pgd_t *pgd, u64 pfn, unsigned long address,
 		.flags = 0,
 	};
 
+	WARN_ONCE(num_online_cpus() > 1, "Don't call after initializing SMP");
+
 	if (!(__supported_pte_mask & _PAGE_NX))
 		goto out;
 
@@ -2374,6 +2376,40 @@ int kernel_map_pages_in_pgd(pgd_t *pgd, u64 pfn, unsigned long address,
 	return retval;
 }
 
+/*
+ * __flush_tlb_all() flushes mappings only on current CPU and hence this
+ * function shouldn't be used in an SMP environment. Presently, it's used only
+ * during boot (way before smp_init()) by EFI subsystem and hence is ok.
+ */
+int __init kernel_unmap_pages_in_pgd(pgd_t *pgd, unsigned long address,
+				     unsigned long numpages)
+{
+	int retval;
+
+	/*
+	 * The typical sequence for unmapping is to find a pte through
+	 * lookup_address_in_pgd() (ideally, it should never return NULL because
+	 * the address is already mapped) and change it's protections. As pfn is
+	 * the *target* of a mapping, it's not useful while unmapping.
+	 */
+	struct cpa_data cpa = {
+		.vaddr		= &address,
+		.pfn		= 0,
+		.pgd		= pgd,
+		.numpages	= numpages,
+		.mask_set	= __pgprot(0),
+		.mask_clr	= __pgprot(_PAGE_PRESENT | _PAGE_RW),
+		.flags		= 0,
+	};
+
+	WARN_ONCE(num_online_cpus() > 1, "Don't call after initializing SMP");
+
+	retval = __change_page_attr_set_clr(&cpa, 0);
+	__flush_tlb_all();
+
+	return retval;
+}
+
 /*
  * The testcases use internal knowledge of the implementation that shouldn't
  * be exposed to the rest of the kernel. Include these directly here.
-- 
2.19.1

