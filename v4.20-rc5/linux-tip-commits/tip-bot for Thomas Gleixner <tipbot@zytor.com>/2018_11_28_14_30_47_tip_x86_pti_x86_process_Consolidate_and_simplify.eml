Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 29 Nov 2018 08:37:05 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 850125803ED;
	Wed, 28 Nov 2018 06:31:40 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by orsmga007-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 28 Nov 2018 06:31:39 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ARCJs8Ba45XZhFRxH1b29tdP/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpMy4ZR7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v6bpgRh31hy?=
 =?us-ascii?q?cdLzM3/mHZhM9qjK1ZrhKvuQFxzYnbb4+aKPVxY7jdfcsYSGdaQsZcVDZMDp+m?=
 =?us-ascii?q?YocTDecMO/tToYnnp1sJqBuzHRWsBOL3yjNRnXD22rE62PkvEQHBxgwrAswAsH?=
 =?us-ascii?q?TTrNXwLqgSSv2+wqjMzTrdbvNX1jH955bSchs8pvyMQbNwcdLKxkkoCwPIlVSR?=
 =?us-ascii?q?qIz5PzOSzOQBqXSU7+1lVe+2jWMstg9/oj+qxsg2i4nJgJoYylPa+iVjxoY6O9?=
 =?us-ascii?q?m4RFR8Yd6+H5tdsTyROYhuQs46XW1kpCI3xqcbtZO1YiQG0okryh3DZ/CdcoWF?=
 =?us-ascii?q?4ArvWPuVLDp7nn5pZbyyihSo/US+1uHwSNO43EtEoydElNTHq2oD2AbJ6sedT/?=
 =?us-ascii?q?tw5keh1iiL1wDU8uxEP080mrTBK5I7wb4/iIATsULdES/ygkn2i7WWdko89uip?=
 =?us-ascii?q?7eTofKnmq4eCO4NojgzyKLkil8KhDegiLwQDXHSX9f692bDh5UH5Ra9Fjvwykq?=
 =?us-ascii?q?nXqpDaIsEbq7a9Aw9U1IYj9hm+Ay6l0NsGh3kHKkxKeBaeg4juNVDOJu73De2k?=
 =?us-ascii?q?jlSynzdk2erGMqfiAprTNHjDlqnufbJn505b0gozwshT54hIBbEZPPLzRkjxuc?=
 =?us-ascii?q?TcDh84MAy73fzrCdpg1o4FXWKPA6mZML7dsFOS5+IvJfWMa5ERuDrnN/cl4Pvu?=
 =?us-ascii?q?h2cjmVABZampwYcXaHegE/RmOUqZYGbsjc0GEWsQvgo+UfbliFuNUTNIY3ayXq?=
 =?us-ascii?q?Q85iw0CY68DIfDQJytj6KF3CuhApJWYWVGAEiWEXj0b4WER+sMaCWKL89jlTwL?=
 =?us-ascii?q?S6KtS4wm1RGosg/6zKFqLu7V+i0eqJLi28J55+zVlREu6zN0C96R3H2KT2Fxhm?=
 =?us-ascii?q?kIXSM53LhjoUxhzVeOybJ3g+dYFdxU5PNFSB06OoTez+FhD9DyWwTBfsqGSVq8?=
 =?us-ascii?q?Q9WmBy0xQcw1w9MUf0l9HNCihAjZ3yW2G78Vi6CLBJss/6LfxXfxIdxxy3LH1K?=
 =?us-ascii?q?Y7iVkmTdBCNWmnhq556gjSCJTFk0Sfl6a2a6sc2DTB+3uEzWqLpEtYShJ/Ub3Z?=
 =?us-ascii?q?XXADYUvbtcn26VncT7CwE7gnMhFOyciZKqRUbN3lilFGRPTmONTaeG+xn2awBR?=
 =?us-ascii?q?CVxrKDdobqemMd3DnDB0gAiQwc4XGGNQ0mDCe7v23eFCBuFU7oY0707OZxsm27?=
 =?us-ascii?q?QVEuwwGKdUJh0aG19QAThfGHT/MT37QEuDouqjluHVa92c7WBMSEpwZ7YKpcZt?=
 =?us-ascii?q?Y96k9d1W3Frwx9IoCgL6d6i14CcgR3ukTu1wl3CoRAi8QqsGkmzA1oKaKc0VNB?=
 =?us-ascii?q?cTyY0Iv0Or3WLGny4R+uZ7TX2lHYzNaZ5KMP5O4kpFXkuQGjDlAi/Gl/09lJz3?=
 =?us-ascii?q?uc4Y3HAxAWUZ3vXUc46Rh7q6vBbSkg+ozbz3tsMaqzsj/cwN8pAOolyhC9f9ZQ?=
 =?us-ascii?q?Kq+EFQnyE9EECMiqMuAlh1+pbhccNuBI6KE0J9+md+eB2KOzPOdggSiqgnhd7I?=
 =?us-ascii?q?F80kKD7Sx8SuHT0pYBwvGY2BaHVjjmgFegtMD3hZ5LZTUIEmWjzijkAZZbZrdu?=
 =?us-ascii?q?coYTFWeuP8q3y81kh57sR3FX7kSjCE4B2MOzfxqdcUb93QxJ2UsLu3OnnTa3wC?=
 =?us-ascii?q?JukzEuqKqSxyjOw+XkdBoaNW9HXmhijVHwIYeqi9AWRlSnbw8slBG9/0b127Bb?=
 =?us-ascii?q?pLhjL2nUWUpJfyn2I3tiU6eqrbqCfshP5YgssSVWVuS8fF+bRqT8oxsczyPsAW?=
 =?us-ascii?q?9eyConeDGtv5XzhwZ6h36FLHZvsHrZftl9xRXF69zGRv5R3T0GSDNjiTbNBVi8?=
 =?us-ascii?q?PNip/dOKmJfFqe2+U2OhVptOcSjk14+AtS275XF0Dh27hfy8htrnEQ0i2y/hy9?=
 =?us-ascii?q?ZqTTnIrAr7YoTz16W1K+VnclNqBF/97cp3AYV+koo2hJEN1nkWnJSV/XwbkWjt?=
 =?us-ascii?q?NdVXw77xbH0IRTQT2d7a/BDl2FF/LnKO34/5VW+Swsp7a9m6f2MZwCQ9789RBa?=
 =?us-ascii?q?eQ7bxEmzZ1o1WioQLQZ/h9gikSyf805HEGhOEJvRInzj+BDbAKAUlYISvsmgyN?=
 =?us-ascii?q?79C/r6VYfnyjcLau20plgdCuEquCrRpCV3bjdZcvBitw7sR5MFLR33z/8IDkeN?=
 =?us-ascii?q?/Mbd0Nsh2YiQvPj+9QKJgpjPoFmTJnOX7hvX0i0+M7kRtu3ZSgsImGMWpt+r+5?=
 =?us-ascii?q?AgVDNj30fM4T/jDtjaBDnseZxYyvH5NhGikVU5vsV/6nDDUStfH/PQaUDDI8sm?=
 =?us-ascii?q?ubGabYHQKH80hptXXPE5S2N32NIHkZ0M5vRB2cJExZnQAVUy82np8/FgC22sPh?=
 =?us-ascii?q?dF116SwW5l79shFM0P5nNwHjUmfDowelcjU0R4KaLBVI9QFO/VvVPdad7uJuHC?=
 =?us-ascii?q?FY45uhoxaWKmGAYwRIDGcJWlGLBlz5P7mu48XA/PacBuakM/TOZrCOo/REV/iU?=
 =?us-ascii?q?3ZKvzpdm/zGUO8SPOXliEuQ72ldZUnB/AcjZgDIPSyoYly/Wa86bpRG8+jB4r8?=
 =?us-ascii?q?yl8fTrXh7v6pWLC7dILdpv/BW2i7+ZN+GMnCZ5NSpY1pQUyH/I1rcf3V0SiyJv?=
 =?us-ascii?q?dzW3ErQArynNTK3Ola9NEh4bcDh+NM9J76I6wwlMNtTXitLz1r5kkPE1D01JWk?=
 =?us-ascii?q?DmmsGsfcYKOX2yNEvbBEaXM7SLPSfEw9zsbqOmV7JRjP9YtxmxuTuAF0/jPzKD?=
 =?us-ascii?q?lyTmVhy1MOFMij2bMwJauI2nbhltDm3jRsr8ahKnKN93kSE2wbosi3PWNG4cNC?=
 =?us-ascii?q?JwfF9XorKM7SNXnPN/FndF7npkK+mEhimY4/PZKpYQrftkHCB0m/hG73Q9zrtf?=
 =?us-ascii?q?9DtES+BtmCvOst5upEmrk+mVxTphVRpOqzBLi5qKvEViI6rZ8JZAVG3A/BIM62?=
 =?us-ascii?q?WQFhsLq8FkCt3pp6Bf1NzPmLjvJzdF9tKHtfcbUszVLt+XdWYgKV/iHzvRDRce?=
 =?us-ascii?q?ZSCkOHuZhEFHlvyWsHqPocsAp4DoiaYJH7ZYfFg0EO4KTEVjANEGZpxwW3dsk7?=
 =?us-ascii?q?2cl88O7FKlsQLcAs5I+tjbUeiMCPHjMx6djL9Zd14Gxq7+IY0PN4r9nUt4ZR0y?=
 =?us-ascii?q?hInWFlDCddFLrDdoYgI9rANK6nc6Bm4+1lnubQSuyHQTD/mxnwMzzAxkbqBl6D?=
 =?us-ascii?q?jo838zJ1zXuDE3lkgh39noxXideSDwIOG7G5pKBjX9rVQZM5XnTgIzZgq32QR4?=
 =?us-ascii?q?NTKCTPRaj7ZmXWRqjhLM/5pJBfNYC6ZDZVtYwfCReuVt0llGrCij7VFI6PGDCp?=
 =?us-ascii?q?Z4kgYuN5m2oDYI3wVlY9s8I/2LdfZhwV1Zh6bItSitkqg13RMZD0UA6mWffGgP?=
 =?us-ascii?q?okNMfrs+ICut9OthwRaPlztKZC4HUP9u6v1w+0w+O8yEziT9w7BEN0a9PvCeKK?=
 =?us-ascii?q?XfvHLP0YaDS0g9xwUTnElM4LZy3N0LckyIWkRpx7yUU1wAL8jLLylRbsxP5D7S?=
 =?us-ascii?q?ezqDtaPGxpcxd4y0DOvhS+CDnLwZjkKtAEAiGIFIptgBGZylywfcIMHrJbUG2D?=
 =?us-ascii?q?0k4QitL1KASLxJYBujgiYbpNv5x5hymcFUPTABR2Y7NCyz4rfcpScrhuaOWJE9?=
 =?us-ascii?q?ZXJeFocbM20eUciziSlf+X9HSiS0lqoVwRaPqT/1oD/dChH9acZuYLGfYhYoQN?=
 =?us-ascii?q?O9/B0l/qS2gEKR+ZLbYyn/NNJtvffM5PkcqpLBDOlbHpdntEKJh4hAAnatTybB?=
 =?us-ascii?q?FsT9G5j3boA3JfPwB3eqVFGlw2YpTt/7O8qFPLmUhhuuToFR5trIlAs/PNOwQ2?=
 =?us-ascii?q?lNUyx7oPsOsfpx?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AuAABDpv5bh0O0hNFkHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwEBgmiBAieDeYgYX4spAYIhgwOFeYVegXOGYSCBUxIBARgLCAGHbiI0CQ0?=
 =?us-ascii?q?BAwEBAQEBAQIBEwEBAQgNCQgpIwxCARABgWIigmUDAwECCBgEBAEGAUYGCQEBJ?=
 =?us-ascii?q?AImAgIDHg4BDgEYGQUDgxkBgWkBAQEVBQqmNnwzDRGEDwGBA4I8BAoZDYIXBRN?=
 =?us-ascii?q?4iwsXgX+BEYVphS6CVwKJJYZ2jzoYLgmGfYcIg0SLPAoBET+EfiyNKIELiUICB?=
 =?us-ascii?q?AIEBQIUWmyCDU0jFYFvDgsBDAQGgQgTghQXiF6FYB4BMgEBCHsBAYRUiF8BAQ?=
X-IPAS-Result: =?us-ascii?q?A0AuAABDpv5bh0O0hNFkHQEBBQEHBQGBUQgBCwEBgmiBAie?=
 =?us-ascii?q?DeYgYX4spAYIhgwOFeYVegXOGYSCBUxIBARgLCAGHbiI0CQ0BAwEBAQEBAQIBE?=
 =?us-ascii?q?wEBAQgNCQgpIwxCARABgWIigmUDAwECCBgEBAEGAUYGCQEBJAImAgIDHg4BDgE?=
 =?us-ascii?q?YGQUDgxkBgWkBAQEVBQqmNnwzDRGEDwGBA4I8BAoZDYIXBRN4iwsXgX+BEYVph?=
 =?us-ascii?q?S6CVwKJJYZ2jzoYLgmGfYcIg0SLPAoBET+EfiyNKIELiUICBAIEBQIUWmyCDU0?=
 =?us-ascii?q?jFYFvDgsBDAQGgQgTghQXiF6FYB4BMgEBCHsBAYRUiF8BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,290,1539673200"; 
   d="scan'208";a="54670812"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 28 Nov 2018 06:31:37 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728644AbeK2BdX (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 28 Nov 2018 20:33:23 -0500
Received: from terminus.zytor.com ([198.137.202.136]:56649 "EHLO
        terminus.zytor.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727726AbeK2BdX (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 28 Nov 2018 20:33:23 -0500
Received: from terminus.zytor.com (localhost [127.0.0.1])
        by terminus.zytor.com (8.15.2/8.15.2) with ESMTPS id wASEUmps2323591
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=NO);
        Wed, 28 Nov 2018 06:30:48 -0800
Received: (from tipbot@localhost)
        by terminus.zytor.com (8.15.2/8.15.2/Submit) id wASEUlhQ2323587;
        Wed, 28 Nov 2018 06:30:47 -0800
Date: Wed, 28 Nov 2018 06:30:47 -0800
X-Authentication-Warning: terminus.zytor.com: tipbot set sender to tipbot@zytor.com using -f
From: tip-bot for Thomas Gleixner <tipbot@zytor.com>
Message-ID: <tip-ff16701a29cba3aafa0bd1656d766813b2d0a811@git.kernel.org>
Cc: thomas.lendacky@amd.com, asit.k.mallick@intel.com,
        dwmw@amazon.co.uk, jcm@redhat.com, dave.hansen@intel.com,
        mingo@kernel.org, hpa@zytor.com, gregkh@linuxfoundation.org,
        casey.schaufler@intel.com, jpoimboe@redhat.com,
        aarcange@redhat.com, arjan@linux.intel.com, luto@kernel.org,
        longman9394@gmail.com, torvalds@linux-foundation.org,
        peterz@infradead.org, ak@linux.intel.com, jkosina@suse.cz,
        tim.c.chen@linux.intel.com, linux-kernel@vger.kernel.org,
        keescook@chromium.org, tglx@linutronix.de,
        david.c.stewart@intel.com
Reply-To: ak@linux.intel.com, jkosina@suse.cz,
          torvalds@linux-foundation.org, peterz@infradead.org,
          keescook@chromium.org, tglx@linutronix.de,
          david.c.stewart@intel.com, tim.c.chen@linux.intel.com,
          linux-kernel@vger.kernel.org, longman9394@gmail.com,
          luto@kernel.org, jpoimboe@redhat.com, gregkh@linuxfoundation.org,
          casey.schaufler@intel.com, arjan@linux.intel.com,
          aarcange@redhat.com, thomas.lendacky@amd.com, hpa@zytor.com,
          asit.k.mallick@intel.com, dwmw@amazon.co.uk,
          dave.hansen@intel.com, jcm@redhat.com, mingo@kernel.org
In-Reply-To: <20181125185005.280855518@linutronix.de>
References: <20181125185005.280855518@linutronix.de>
To: linux-tip-commits@vger.kernel.org
Subject: [tip:x86/pti] x86/process: Consolidate and simplify
 switch_to_xtra() code
Git-Commit-ID: ff16701a29cba3aafa0bd1656d766813b2d0a811
X-Mailer: tip-git-log-daemon
Robot-ID: <tip-bot.git.kernel.org>
Robot-Unsubscribe: Contact <mailto:hpa@kernel.org> to get blacklisted from
 these emails
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Content-Type: text/plain; charset=UTF-8
Content-Disposition: inline
X-Spam-Status: No, score=1.5 required=5.0 tests=ALL_TRUSTED,BAYES_00,
        DATE_IN_FUTURE_24_48,FREEMAIL_FORGED_REPLYTO,
        FREEMAIL_REPLYTO_END_DIGIT autolearn=no autolearn_force=no
        version=3.4.2
X-Spam-Level: *
X-Spam-Checker-Version: SpamAssassin 3.4.2 (2018-09-13) on terminus.zytor.com
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Commit-ID:  ff16701a29cba3aafa0bd1656d766813b2d0a811
Gitweb:     https://git.kernel.org/tip/ff16701a29cba3aafa0bd1656d766813b2d0a811
Author:     Thomas Gleixner <tglx@linutronix.de>
AuthorDate: Sun, 25 Nov 2018 19:33:47 +0100
Committer:  Thomas Gleixner <tglx@linutronix.de>
CommitDate: Wed, 28 Nov 2018 11:57:11 +0100

x86/process: Consolidate and simplify switch_to_xtra() code

Move the conditional invocation of __switch_to_xtra() into an inline
function so the logic can be shared between 32 and 64 bit.

Remove the handthrough of the TSS pointer and retrieve the pointer directly
in the bitmap handling function. Use this_cpu_ptr() instead of the
per_cpu() indirection.

This is a preparatory change so integration of conditional indirect branch
speculation optimization happens only in one place.

Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
Reviewed-by: Ingo Molnar <mingo@kernel.org>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Andy Lutomirski <luto@kernel.org>
Cc: Linus Torvalds <torvalds@linux-foundation.org>
Cc: Jiri Kosina <jkosina@suse.cz>
Cc: Tom Lendacky <thomas.lendacky@amd.com>
Cc: Josh Poimboeuf <jpoimboe@redhat.com>
Cc: Andrea Arcangeli <aarcange@redhat.com>
Cc: David Woodhouse <dwmw@amazon.co.uk>
Cc: Tim Chen <tim.c.chen@linux.intel.com>
Cc: Andi Kleen <ak@linux.intel.com>
Cc: Dave Hansen <dave.hansen@intel.com>
Cc: Casey Schaufler <casey.schaufler@intel.com>
Cc: Asit Mallick <asit.k.mallick@intel.com>
Cc: Arjan van de Ven <arjan@linux.intel.com>
Cc: Jon Masters <jcm@redhat.com>
Cc: Waiman Long <longman9394@gmail.com>
Cc: Greg KH <gregkh@linuxfoundation.org>
Cc: Dave Stewart <david.c.stewart@intel.com>
Cc: Kees Cook <keescook@chromium.org>
Cc: stable@vger.kernel.org
Link: https://lkml.kernel.org/r/20181125185005.280855518@linutronix.de

---
 arch/x86/include/asm/switch_to.h |  3 ---
 arch/x86/kernel/process.c        | 12 +++++++-----
 arch/x86/kernel/process.h        | 24 ++++++++++++++++++++++++
 arch/x86/kernel/process_32.c     | 10 +++-------
 arch/x86/kernel/process_64.c     | 10 +++-------
 5 files changed, 37 insertions(+), 22 deletions(-)

diff --git a/arch/x86/include/asm/switch_to.h b/arch/x86/include/asm/switch_to.h
index 36bd243843d6..7cf1a270d891 100644
--- a/arch/x86/include/asm/switch_to.h
+++ b/arch/x86/include/asm/switch_to.h
@@ -11,9 +11,6 @@ struct task_struct *__switch_to_asm(struct task_struct *prev,
 
 __visible struct task_struct *__switch_to(struct task_struct *prev,
 					  struct task_struct *next);
-struct tss_struct;
-void __switch_to_xtra(struct task_struct *prev_p, struct task_struct *next_p,
-		      struct tss_struct *tss);
 
 /* This runs runs on the previous thread's stack. */
 static inline void prepare_switch_to(struct task_struct *next)
diff --git a/arch/x86/kernel/process.c b/arch/x86/kernel/process.c
index 574b144d2b53..cdf8e6694f71 100644
--- a/arch/x86/kernel/process.c
+++ b/arch/x86/kernel/process.c
@@ -40,6 +40,8 @@
 #include <asm/prctl.h>
 #include <asm/spec-ctrl.h>
 
+#include "process.h"
+
 /*
  * per-CPU TSS segments. Threads are completely 'soft' on Linux,
  * no more per-task TSS's. The TSS size is kept cacheline-aligned
@@ -252,11 +254,12 @@ void arch_setup_new_exec(void)
 		enable_cpuid();
 }
 
-static inline void switch_to_bitmap(struct tss_struct *tss,
-				    struct thread_struct *prev,
+static inline void switch_to_bitmap(struct thread_struct *prev,
 				    struct thread_struct *next,
 				    unsigned long tifp, unsigned long tifn)
 {
+	struct tss_struct *tss = this_cpu_ptr(&cpu_tss_rw);
+
 	if (tifn & _TIF_IO_BITMAP) {
 		/*
 		 * Copy the relevant range of the IO bitmap.
@@ -448,8 +451,7 @@ void speculation_ctrl_update(unsigned long tif)
 	preempt_enable();
 }
 
-void __switch_to_xtra(struct task_struct *prev_p, struct task_struct *next_p,
-		      struct tss_struct *tss)
+void __switch_to_xtra(struct task_struct *prev_p, struct task_struct *next_p)
 {
 	struct thread_struct *prev, *next;
 	unsigned long tifp, tifn;
@@ -459,7 +461,7 @@ void __switch_to_xtra(struct task_struct *prev_p, struct task_struct *next_p,
 
 	tifn = READ_ONCE(task_thread_info(next_p)->flags);
 	tifp = READ_ONCE(task_thread_info(prev_p)->flags);
-	switch_to_bitmap(tss, prev, next, tifp, tifn);
+	switch_to_bitmap(prev, next, tifp, tifn);
 
 	propagate_user_return_notify(prev_p, next_p);
 
diff --git a/arch/x86/kernel/process.h b/arch/x86/kernel/process.h
new file mode 100644
index 000000000000..020fbfac3a27
--- /dev/null
+++ b/arch/x86/kernel/process.h
@@ -0,0 +1,24 @@
+// SPDX-License-Identifier: GPL-2.0
+//
+// Code shared between 32 and 64 bit
+
+void __switch_to_xtra(struct task_struct *prev_p, struct task_struct *next_p);
+
+/*
+ * This needs to be inline to optimize for the common case where no extra
+ * work needs to be done.
+ */
+static inline void switch_to_extra(struct task_struct *prev,
+				   struct task_struct *next)
+{
+	unsigned long next_tif = task_thread_info(next)->flags;
+	unsigned long prev_tif = task_thread_info(prev)->flags;
+
+	/*
+	 * __switch_to_xtra() handles debug registers, i/o bitmaps,
+	 * speculation mitigations etc.
+	 */
+	if (unlikely(next_tif & _TIF_WORK_CTXSW_NEXT ||
+		     prev_tif & _TIF_WORK_CTXSW_PREV))
+		__switch_to_xtra(prev, next);
+}
diff --git a/arch/x86/kernel/process_32.c b/arch/x86/kernel/process_32.c
index 5046a3c9dec2..d3e593eb189f 100644
--- a/arch/x86/kernel/process_32.c
+++ b/arch/x86/kernel/process_32.c
@@ -59,6 +59,8 @@
 #include <asm/intel_rdt_sched.h>
 #include <asm/proto.h>
 
+#include "process.h"
+
 void __show_regs(struct pt_regs *regs, enum show_regs_mode mode)
 {
 	unsigned long cr0 = 0L, cr2 = 0L, cr3 = 0L, cr4 = 0L;
@@ -232,7 +234,6 @@ __switch_to(struct task_struct *prev_p, struct task_struct *next_p)
 	struct fpu *prev_fpu = &prev->fpu;
 	struct fpu *next_fpu = &next->fpu;
 	int cpu = smp_processor_id();
-	struct tss_struct *tss = &per_cpu(cpu_tss_rw, cpu);
 
 	/* never put a printk in __switch_to... printk() calls wake_up*() indirectly */
 
@@ -264,12 +265,7 @@ __switch_to(struct task_struct *prev_p, struct task_struct *next_p)
 	if (get_kernel_rpl() && unlikely(prev->iopl != next->iopl))
 		set_iopl_mask(next->iopl);
 
-	/*
-	 * Now maybe handle debug registers and/or IO bitmaps
-	 */
-	if (unlikely(task_thread_info(prev_p)->flags & _TIF_WORK_CTXSW_PREV ||
-		     task_thread_info(next_p)->flags & _TIF_WORK_CTXSW_NEXT))
-		__switch_to_xtra(prev_p, next_p, tss);
+	switch_to_extra(prev_p, next_p);
 
 	/*
 	 * Leave lazy mode, flushing any hypercalls made here.
diff --git a/arch/x86/kernel/process_64.c b/arch/x86/kernel/process_64.c
index 0e0b4288a4b2..bbfbf017065c 100644
--- a/arch/x86/kernel/process_64.c
+++ b/arch/x86/kernel/process_64.c
@@ -60,6 +60,8 @@
 #include <asm/unistd_32_ia32.h>
 #endif
 
+#include "process.h"
+
 /* Prints also some state that isn't saved in the pt_regs */
 void __show_regs(struct pt_regs *regs, enum show_regs_mode mode)
 {
@@ -553,7 +555,6 @@ __switch_to(struct task_struct *prev_p, struct task_struct *next_p)
 	struct fpu *prev_fpu = &prev->fpu;
 	struct fpu *next_fpu = &next->fpu;
 	int cpu = smp_processor_id();
-	struct tss_struct *tss = &per_cpu(cpu_tss_rw, cpu);
 
 	WARN_ON_ONCE(IS_ENABLED(CONFIG_DEBUG_ENTRY) &&
 		     this_cpu_read(irq_count) != -1);
@@ -617,12 +618,7 @@ __switch_to(struct task_struct *prev_p, struct task_struct *next_p)
 	/* Reload sp0. */
 	update_task_stack(next_p);
 
-	/*
-	 * Now maybe reload the debug registers and handle I/O bitmaps
-	 */
-	if (unlikely(task_thread_info(next_p)->flags & _TIF_WORK_CTXSW_NEXT ||
-		     task_thread_info(prev_p)->flags & _TIF_WORK_CTXSW_PREV))
-		__switch_to_xtra(prev_p, next_p, tss);
+	switch_to_extra(prev_p, next_p);
 
 #ifdef CONFIG_XEN_PV
 	/*
