Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 03 Dec 2018 08:40:58 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 1793158014B
	for <like.xu@linux.intel.com>; Sun,  2 Dec 2018 06:56:16 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 02 Dec 2018 06:56:15 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AswdsLRKyallXX5dVpNmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgXKv75rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0yRD+s7bpkSAXwhS?=
 =?us-ascii?q?gIKzE3/2/ZhMxugqJVoxyhvwFxzozWboyaKfZzcL/RfckESmpaRctRSzVBD5mg?=
 =?us-ascii?q?Y4cTE+YMP+BVpJT9qVsUqhu+ABGhCvnxxT9UmHD2x7Ax3eM7HgDGwQMvAdYOsH?=
 =?us-ascii?q?DJp9jyLKcdT/y1w7fSzTnZavNZwzf855XWfRAlpfGBRrZwccvXyUY1DQPFiU+c?=
 =?us-ascii?q?qYv/PzOaz+kAtXWQ4eRnVeKqkWEnqgdxryCrxsg2l4nJgJ4aylDc9Spj3Yk5P9?=
 =?us-ascii?q?u4R1BnYdOiDZBetDmaOpNoTs8+QGxkojs2xqAFtJKhYiQHxpQqywTCZ/GFa4SF?=
 =?us-ascii?q?5g/vWPyMLTp7gH9pYrayiwqo/UWuyODxUNS/3kxQoSpfiNbMs2gA1xzN5ciDTf?=
 =?us-ascii?q?tw5kOh2TeU1wDP8eFIO080lazGK5I7xb4wjJUTvVzCHi/whkr2kLebels49uWr?=
 =?us-ascii?q?8ejrf6jqq5yGO4NqhAzzMr4iltG9DOggNwgBRWmb+eCy1L35+k35Ra1HjuQona?=
 =?us-ascii?q?ncrZDWPNkUqbCnAwBL1oYv8g2wDzC70NQegXYIMklFdBWDj4joOFHBPur0DPii?=
 =?us-ascii?q?g1m0lDdrxvbGPqDuA5nXL3jDlqvhcqh560JG1AUzytVf6olSCrEGJvLzVUnxtM?=
 =?us-ascii?q?HCAh8+KQy0zP7rCM9h2YMGRWKPHqiZPbvWsV+J5eIgPfOAZYAIuDvmL/gl5vju?=
 =?us-ascii?q?jWI2mFMHfKmp24cXZ268Hvh8P0qZZn/s0Z88F3wXtF8+UPDykw/FFjpSfGqpGa?=
 =?us-ascii?q?Q74D49FcShF4iEQ4mshLmI2mC8BoFXYWZdTUmBFGqte4iaVvNfVSSJP8U0lzUF?=
 =?us-ascii?q?UaSmGZYs0AzruALkxr4iNOfN5yADqbrl09564fCVkgs9oidpBcaQ2H3YUmdvg2?=
 =?us-ascii?q?kTTCU31q0snUso01qGzO10juJVEfRV4PVGVBp8MoTTnNZ3E9TjZgWUVMqGAA/2?=
 =?us-ascii?q?Gov8XWp5Gothm4FUPx1VEcitlVbH1jesCL8NnrDNApEopPHyxX/0cv5w13vcnI?=
 =?us-ascii?q?wonlUrRs8HYXWrmqNlsQ3aFoLEl0Gxk6esfL4bminX+zHQniK1oEhEXVsoAu3+?=
 =?us-ascii?q?VncFax6OoA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BdAwD58QNchxHrdtBjg0iBOYUiiHeLK?=
 =?us-ascii?q?AGBaI4liWiBUxQYCwmEOwODOCI4EgEDAQEBAQEBAgETAQEBCgsJCBsOIwyCNgU?=
 =?us-ascii?q?CAxgJglwDAwECICMKLAMBAgYBASQCIgQCAgMBQxAVCYMcAYIBAQMBCqIUgS+EL?=
 =?us-ascii?q?QGBA4RnBYELixGBVz+BETOEIIZEglcCiSaHVI9GBwKCHwSEXYpUEIs/hVeNaYs?=
 =?us-ascii?q?EgV2BdjMaMCKBYRiBFRGCFQwLEogRhXqBAXiLLoF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0BdAwD58QNchxHrdtBjg0iBOYUiiHeLKAGBaI4liWiBUxQ?=
 =?us-ascii?q?YCwmEOwODOCI4EgEDAQEBAQEBAgETAQEBCgsJCBsOIwyCNgUCAxgJglwDAwECI?=
 =?us-ascii?q?CMKLAMBAgYBASQCIgQCAgMBQxAVCYMcAYIBAQMBCqIUgS+ELQGBA4RnBYELixG?=
 =?us-ascii?q?BVz+BETOEIIZEglcCiSaHVI9GBwKCHwSEXYpUEIs/hVeNaYsEgV2BdjMaMCKBY?=
 =?us-ascii?q?RiBFRGCFQwLEogRhXqBAXiLLoF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,306,1539673200"; 
   d="scan'208";a="55194304"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 02 Dec 2018 06:56:15 -0800
Received: from localhost ([::1]:44825 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gTTA1-0007y3-LL
	for like.xu@linux.intel.com; Sun, 02 Dec 2018 09:55:53 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:56106)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <bounces@canonical.com>) id 1gTT9o-0007wI-O1
	for qemu-devel@nongnu.org; Sun, 02 Dec 2018 09:55:41 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <bounces@canonical.com>) id 1gTT9i-0006PM-Gy
	for qemu-devel@nongnu.org; Sun, 02 Dec 2018 09:55:40 -0500
Received: from indium.canonical.com ([91.189.90.7]:40600)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <bounces@canonical.com>)
	id 1gTT9i-0006P0-Aj
	for qemu-devel@nongnu.org; Sun, 02 Dec 2018 09:55:34 -0500
Received: from loganberry.canonical.com ([91.189.90.37])
	by indium.canonical.com with esmtp (Exim 4.86_2 #2 (Debian))
	id 1gTT9h-00076W-2j
	for <qemu-devel@nongnu.org>; Sun, 02 Dec 2018 14:55:33 +0000
Received: from loganberry.canonical.com (localhost [127.0.0.1])
	by loganberry.canonical.com (Postfix) with ESMTP id 11C642E80C7
	for <qemu-devel@nongnu.org>; Sun,  2 Dec 2018 14:55:33 +0000 (UTC)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Date: Sun, 02 Dec 2018 14:50:15 -0000
From: Peter Maydell <peter.maydell@linaro.org>
To: qemu-devel@nongnu.org
X-Launchpad-Notification-Type: bug
X-Launchpad-Bug: product=qemu; status=New; importance=Undecided; assignee=None;
X-Launchpad-Bug-Tags: arm cortexm
X-Launchpad-Bug-Information-Type: Public
X-Launchpad-Bug-Private: no
X-Launchpad-Bug-Security-Vulnerability: no
X-Launchpad-Bug-Commenters: higaski pmaydell
X-Launchpad-Bug-Reporter: Vincent Hamp (higaski)
X-Launchpad-Bug-Modifier: Peter Maydell (pmaydell)
References: <154375655274.15827.14642274888173069615.malonedeb@gac.canonical.com>
Message-Id: <154376221570.10384.1481401012973013541.malone@chaenomeles.canonical.com>
X-Launchpad-Message-Rationale: Subscriber (QEMU) @qemu-devel-ml
X-Launchpad-Message-For: qemu-devel-ml
Precedence: bulk
X-Generated-By: Launchpad (canonical.com); Revision="18826";
	Instance="launchpad-lazr.conf"
X-Launchpad-Hash: 20fba2de92033202c462bac9045c987d4b33e923
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 91.189.90.7
Subject: [Qemu-devel] [Bug 1806243] Re: ARM conditional branch after if-then
 instruction not working
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Reply-To: Bug 1806243 <1806243@bugs.launchpad.net>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

The disassembler is giving you a hint here:

2000408e: itt lt
20004090: pushlt {r0, r1}
20004092: blt.w 0x20004082 ; unpredictable <IT:lt> // <-- GDB hangs here

Your code has a "blt" instruction inside an IT block in a way that is
archictecturally UNPREDICTABLE, and the CPU is allowed to not behave in
the way you might expect it to.

Your attempt to reproduce the problem is likely generating different
instructions (specifically probably a different encoding of the branch
instruction).

On the other hand having QEMU behave differently in singlestep mode and
just hang (rather than, say, making the insn UNDEF or treating it as a
condition-failed or a condition-passed) is not ideal.

Do you have a sample binary and QEMU command line that reproduces this?

-- =

You received this bug notification because you are a member of qemu-
devel-ml, which is subscribed to QEMU.
https://bugs.launchpad.net/bugs/1806243

Title:
  ARM conditional branch after if-then instruction not working

Status in QEMU:
  New

Bug description:
  Hello

  There seems to be an issue with QEMU when debugging if-then condition
  blocks from the thumb2 instruction set. The following snippet runs
  fine during normal execution, but keeps hanging at the conditional
  branch when debugging. The jump at the branch should only be executed
  as long as $r0 is lower than $r1. Problem is that once both are equal,
  the execution is not continued past the branch and the program counter
  never gets popped.

  2000407a:   push    {lr}
  2000407c:   movs    r0, r6
  2000407e:   ldmia   r7!, {r1, r6}
  20004080:   push    {r0, r1}
  20004082:   str.w   r6, [r7, #-4]!
  20004086:   ldr     r6, [sp, #0]
  20004088:   pop     {r0, r1}
  2000408a:   adds    r0, #1
  2000408c:   cmp     r0, r1
  2000408e:   itt     lt
  20004090:   pushlt  {r0, r1}
  20004092:   blt.w   0x20004082      ; unpredictable <IT:lt>  // <-- GDB h=
angs here
  20004096:   pop     {pc}

  I have tried to reproduce the problem with inline assembly but for
  some reason the following example just worked:

  void f() {
    static uint8_t stack[256]{};
    stack[255] =3D 4;

    asm volatile("\n\t"
                 "push    {lr}"
                 "\n\t"

                 // pre-conditions
                 "movs    r7, %[stack]"
                 "\n\t"
                 "movs    r6, #1"
                 "\n\t"

                 "movs    r0, r6"
                 "\n\t"
                 "ldmia   r7!, {r1, r6}"
                 "\n\t"
                 "push    {r0, r1}"
                 "\n\t"
                 "1:"
                 "\n\t"
                 "str.w   r6, [r7, #-4]!"
                 "\n\t"
                 "ldr     r6, [sp, #0]"
                 "\n\t"
                 "pop     {r0, r1}"
                 "\n\t"
                 "adds    r0, #1"
                 "\n\t"
                 "cmp     r0, r1"
                 "\n\t"
                 "itt     lt"
                 "\n\t"
                 "pushlt  {r0, r1}"
                 "\n\t"

                 // Original instruction
                 //"blt.w   0x20004082"  //   ; unpredictable <IT:lt>

                 // Trying to fake it
                 "blt.w   1b"
                 "\n\t"

                 "pop     {pc}"
                 "\n\t"
                 :
                 : [stack] "r"(&stack[255]));
  }

  The only real major difference I see to the other code snipped is that
  the inline assembly is running from flash memory where as the original
  code runs in ram? Maybe that's a clue somehow?

  Quickly reading through already reported ARM bugs I think this might be r=
elated:
  https://bugs.launchpad.net/qemu/+bug/1364501
  At least the symptoms sound identical.

  =

  The versions I'm running are:
  QEMU 3.0.0
  arm-none-eabi-gdb 8.2

  I've also captured some trace output for single stepping from the
  pushlt to the blt.w instruction with the trace arguments unimp,
  guest_errors, op, int, exec.

To manage notifications about this bug go to:
https://bugs.launchpad.net/qemu/+bug/1806243/+subscriptions

