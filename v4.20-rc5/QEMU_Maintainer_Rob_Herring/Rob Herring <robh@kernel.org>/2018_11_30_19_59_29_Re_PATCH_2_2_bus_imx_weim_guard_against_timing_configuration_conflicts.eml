Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:22:34 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 91D43580224;
	Fri, 30 Nov 2018 11:59:49 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 30 Nov 2018 11:59:48 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A1zN8+RM7Qs361rqRnEAl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KPj/pcbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRsleVyJDDY28?=
 =?us-ascii?q?YYUBDPcPM/hEoInmv1sDrwCzBRWwCO711jNEmmP60K883u88EQ/GxgsgH9cWvX?=
 =?us-ascii?q?rIq9X6L7oZX+Krw6nS1zXDbvVW2Tjg44XPaBAhpuqDXbJrfMrS10YvDQXFgUuU?=
 =?us-ascii?q?qYD/ODOVzOsNvnGd4uF9Vuyvk3Yqpx9trjWr3Msgl4fEipwPxlzZ9ih13Jw5KN?=
 =?us-ascii?q?y6RUJjf9KoDJ9duzuZOoZ2WM8uXmBltDogxrEbu5O2fy4Hw4k9yRHFcfyIaY2I?=
 =?us-ascii?q?7wrjVOmPJTd4g2poeKywhxms60is0O78Wdeu0FZMsCVFlsPAtncX1xzc8sSHS/?=
 =?us-ascii?q?198Vm92TuXyQzf9uVJLVopmafVNZIt2KM8m5kPvUjZHyL7ml36jKqMeUUl/uio?=
 =?us-ascii?q?5f7nYrLjppKEM490iwf+Mrkhm8CmAuQ3LBIOX26F9uS4zbHj+kP4QLNUgf0sia?=
 =?us-ascii?q?TZrp/aKtoBpqKjAA9azJwj6xChADeiytgYmmMHLF1ddBKdk4fpI03OIOz/Dfqn?=
 =?us-ascii?q?h1SskTRryO7cMrzuH5XANXzDkLbnfbZg5E9Q0gszzdZD551KDrENOu78Wkj0tN?=
 =?us-ascii?q?bAFB82LxS0w/r7CNV6zo4eWXiAAq6FMKzItl+E/OIvI/SWa48TtzbwMPwl5//o?=
 =?us-ascii?q?jX8kll4RZ6ip3Z0LaH+mGvRqOVmWYX3pgt0ZC2cFohI+TPD2iF2FSTNTZXGyUL?=
 =?us-ascii?q?wm6jE4D4KmC4HDRoe2jbyF3Se7GIBWZ29cBlCNF3foa5uLW/MWZC2OJc9hlyQO?=
 =?us-ascii?q?VaK9RI85yRGuqAj6xqJ9IerP+i0YspHj2MJv5+LJlxE/7jh0D8Wb02GQQGB4hG?=
 =?us-ascii?q?IIRzkq3K9hpUxx0EuM0a99g/ZAD9xc++tJUhsmNZ7b1+F6CMr9WgTbcteNSVap?=
 =?us-ascii?q?WNOmAT4qQ9I1wt8OZVt9Gtq4ghDC2SqqH6Eal7iRCJMo9aLc2mD7J9xhxHbeyK?=
 =?us-ascii?q?khk14mT9NSOmK8mK5w6RLfB47TnEWfjKala6Ic0CnJ9GeAyGqOuFpVUApxUaXD?=
 =?us-ascii?q?QHAeaVHardX/5kPeUbCuDa4rPRdGyc6HMqFKcMHmjU1aRPf/P9TTe3++lH2uBR?=
 =?us-ascii?q?mW3L+MbJDle2MG3CrDDkgJiAQT/XeANQgjCSatuWPeDDpyFV3xZ0Pg6/VxqHS+?=
 =?us-ascii?q?TkUs1QGFc1Vh16ap+h4SnfGcV/IT3rcDuCc9qzV1HEyx387MB9qHvQpheKRcYd?=
 =?us-ascii?q?Uy4Fpc0WLZtgp9PoGvLqx4h14edRh3sF3q1xltFopAls0qpmswzAVuMaKYzE9B?=
 =?us-ascii?q?dzSA0J/qPr3YNGbz8w6vaqLMwV7ezcuZ9b0J6PQ7rFXjohqkFk4j83VhztlU3G?=
 =?us-ascii?q?GQ5pTMDAoOT53xVlw7+AR9p7HfeiM9/Z/b1WVwMamotT/Pw9IoBPY/xhm8Zdte?=
 =?us-ascii?q?MaOEGxX0E80VHMWuLO0qm160bhMLJuxS9ag0P9+4ePuCwqKkIOFgnDe+h2Rd/I?=
 =?us-ascii?q?99yl6M9zZ7SuPQxZYFwu2X0RGdVzjhi1etqMb3lp5eZTETB2aw1TLrBIpMaaJs?=
 =?us-ascii?q?Z4YLDmGuLtazxtV/gZ7tRnFZ+ESiB1MAxM+mZx6SY0bh0g1X0EQduWanljegzz?=
 =?us-ascii?q?xojzEpqbKS3SzPw+j4dBsLIHVLRHRkjVr3JYi0jtYaXFWnbgQzlRul41r6yLZf?=
 =?us-ascii?q?pKhlM2bTRkJIdTDsL25+SquwqqaCY8lX5ZMqqypXSue8YVOdSrLnuBsVySDjH2?=
 =?us-ascii?q?hfxDA9aT6qvI70nxh7iGKbMXZyo2DVecB2xRfD+tPcQeRd0SYBRCl9kTPXHESz?=
 =?us-ascii?q?P8G1/dWIkJfOquC/WHimVpFJcynrzIWAuTC/5W1rBx2/gv+ylsfmEQg8zS/0yd?=
 =?us-ascii?q?1qWT/Uoxb7Z4nhz766Pv5/fkl0GF/87NJ3GoJknYsxnp0Q2WUaiY+T/XoIimrz?=
 =?us-ascii?q?NdRb2aTjbHsCXzILwtjV4BT7101nNH6G24X5VnCFyMt7e9a6en8W2j46781SDa?=
 =?us-ascii?q?eU7b9EkjFvrlu2sw3ReuR9kSkHyfQ19nEame4JtREpziWcBLASAEZZMTbtlxSO?=
 =?us-ascii?q?89CxsqFXaHyzfri30Up0hcqhA62aogFARHb5fY8vHTN37sV6Kl7N0Wf86of5eN?=
 =?us-ascii?q?nLdtITtwaZkxPBj+hTNZIwmeAGhSthOWLho3Ilz/Q3ggBp3ZG/pIKHMXli/Lql?=
 =?us-ascii?q?Ah5EMT34f9gc9SvqjaZag8aaxYSvHoh6FzUPXZvoS++oET0IufTmMQaODCMzqn?=
 =?us-ascii?q?OBFbXDGg+f7V9sr2jTHJCzK3GXOH4ZwM1gRBaHIUxQnhsUUC8mnpIjFQCq2c/h?=
 =?us-ascii?q?cFp/5j8L/V71sR9MyuNuNxniXWbTvgaoajEoSJeBKBpa9B1N50DQMcaG9OJ8Az?=
 =?us-ascii?q?lY/oG9rAyKMmGaZwNIDXwQWkyZHV/jOKOi5cLH8+ieCeqzNP/OYbSIqexDWPaE?=
 =?us-ascii?q?35Ov0o16/zmSMsWDJGVtD/o+2kBbR3B2B9zZmykTSywQjy/Nb9CUpBa/+i10r8?=
 =?us-ascii?q?Cz6vfrWBjo5YuAFbRSK8hv+wutjKeHNu6Qgjt5KDlC2pMNw3/I1KYQ3FoIhy5y?=
 =?us-ascii?q?cDmtFKwKtTTRQ6LIhq9XExkbZjtpO8tV9K08xBdCOM7BhtPx1751lfo1C1ZDVV?=
 =?us-ascii?q?z8lcClf80KI2ehNFzZAEaHLqiJJTrOw8vve6OzVaVQjPlItx23oTubD07jPjGZ?=
 =?us-ascii?q?mzb1TRygLeFMgz+dPBFFvIG9cxBtCXXsTd78ax27NsN3giMywbEumnzKMmscOy?=
 =?us-ascii?q?Bmc0xRtr2Q8T9YgvJnFm1B9HVlK+yEmyef7+bAK5cWseFkAiJ7l+9B5HQ6yr1V?=
 =?us-ascii?q?7DxLRfBvmSvSqMJurE+ikuWV1jVnVx9O+X53g9ewo0hkcZvQ8NFpQnze+x8G7i?=
 =?us-ascii?q?3EFxQHvMVoDIK0k69Vw9nL0qn0LWER3cjT+J4mAMKcCM+dKnsnPlK9AjneDCMG?=
 =?us-ascii?q?QCStOGWZgFZSxqLBvkaJp4Q3/8C/0KEFTaVWARlsTqsX?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ArAABmlQFch0O0hNFjHQEBBQEHBQGBU?=
 =?us-ascii?q?wYBCwGDayeDeZYvFIh9jjeBcxQYEwGHdiI2Bw0BAwEBAQEBAQIBEwEBAQgNCQg?=
 =?us-ascii?q?pIwyCNiQBgmEBAQEBAgEBAiAEGQEBNwEEAQkBAQoLCgMCAiYCAgMeARIBBQEcB?=
 =?us-ascii?q?hMFgxyBagMNCAWbPzyKHXB8M4J2AQEFhQcNghQIgQuJc4EcF4FAP4ERgxKCV4U?=
 =?us-ascii?q?ugleJJYcDUI8RLgmCIotogy0YkR+OaolkDyGBLAKCBE0wCGwGgjWCGwwXiF6FX?=
 =?us-ascii?q?iEygQUBAY1AAQE?=
X-IPAS-Result: =?us-ascii?q?A0ArAABmlQFch0O0hNFjHQEBBQEHBQGBUwYBCwGDayeDeZY?=
 =?us-ascii?q?vFIh9jjeBcxQYEwGHdiI2Bw0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmEBA?=
 =?us-ascii?q?QEBAgEBAiAEGQEBNwEEAQkBAQoLCgMCAiYCAgMeARIBBQEcBhMFgxyBagMNCAW?=
 =?us-ascii?q?bPzyKHXB8M4J2AQEFhQcNghQIgQuJc4EcF4FAP4ERgxKCV4UugleJJYcDUI8RL?=
 =?us-ascii?q?gmCIotogy0YkR+OaolkDyGBLAKCBE0wCGwGgjWCGwwXiF6FXiEygQUBAY1AAQE?=
X-IronPort-AV: E=Sophos;i="5.56,299,1539673200"; 
   d="scan'208";a="140306139"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 30 Nov 2018 11:59:47 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726624AbeLAHKG (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sat, 1 Dec 2018 02:10:06 -0500
Received: from mail.kernel.org ([198.145.29.99]:43960 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1725749AbeLAHKG (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Sat, 1 Dec 2018 02:10:06 -0500
Received: from mail-qt1-f178.google.com (mail-qt1-f178.google.com [209.85.160.178])
        (using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id B7ADD2082F
        for <linux-kernel@vger.kernel.org>; Fri, 30 Nov 2018 19:59:41 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1543607981;
        bh=mtupHFf2LFA1JWPiIbPkldnsJEog70DgFKNAScssUAM=;
        h=References:In-Reply-To:From:Date:Subject:To:Cc:From;
        b=Zh8DW7cYmn8Mu1dK02leBM6GBWMFhGTU6zrVM31rhXbc7xJ0SYDbrlc9ZHqk+JeW8
         G5kGFCB2LRYEIf1M+fF4EVJgvdxZNEBW7ht2nqG8VEY9AxJRV1/mnZXX10hSN08D5i
         OF71dHeArUMFjn1YvdIt9VNPxNudHuyv23mdWikw=
Received: by mail-qt1-f178.google.com with SMTP id r14so7306847qtp.1
        for <linux-kernel@vger.kernel.org>; Fri, 30 Nov 2018 11:59:41 -0800 (PST)
X-Gm-Message-State: AA+aEWaccEpF/xklHjek41rTT7YfjZwdhKdFrGdUKZSpz5rOBxNHLz2q
        7XRgBYQO6HSV/BMFLjDDFLJX41r97nyBy1hjhg==
X-Google-Smtp-Source: AFSGD/XO/pyxkdBRuSlz42CERxt5B94alUuw0SegW+cwzlyyvhU1YMvw1ofKGKdjt35SiIpcybWKqhu1RlY1TZ18l5Q=
X-Received: by 2002:a0c:c389:: with SMTP id o9mr6906861qvi.90.1543607980981;
 Fri, 30 Nov 2018 11:59:40 -0800 (PST)
MIME-Version: 1.0
References: <20181130170754.346-1-TheSven73@googlemail.com> <20181130170754.346-3-TheSven73@googlemail.com>
In-Reply-To: <20181130170754.346-3-TheSven73@googlemail.com>
From: Rob Herring <robh@kernel.org>
Date: Fri, 30 Nov 2018 13:59:29 -0600
X-Gmail-Original-Message-ID: <CAL_JsqJjqUZRhGsnW4C+-DRLb-XWzYRj+S0R_siGyDBq-LNY8w@mail.gmail.com>
Message-ID: <CAL_JsqJjqUZRhGsnW4C+-DRLb-XWzYRj+S0R_siGyDBq-LNY8w@mail.gmail.com>
Subject: Re: [PATCH 2/2] bus: imx-weim: guard against timing configuration conflicts
To: Sven Van Asbroeck <thesven73@gmail.com>
Cc: TheSven73@googlemail.com, Shawn Guo <shawnguo@kernel.org>,
        Kees Cook <keescook@chromium.org>,
        Arnd Bergmann <arnd@arndb.de>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Fri, Nov 30, 2018 at 11:08 AM <thesven73@gmail.com> wrote:
>
> From: Sven Van Asbroeck <TheSven73@googlemail.com>
>
> When adding weim child devices, there is a risk that the developer will
> (by mistake) specify more than one timing setting for the same chip select.
>
> The driver cannot support such a configuration.
>
> In case of conflict, this patch will print a warning to the log,
> and will ignore the child node in question.
>
> In this example, node acme@1 will be ignored, as it tries to modify
> timing settings for CS0:
>
> &weim {
>         acme@0 {

This should be '@0,0'

>                 compatible = "acme,whatever";
>                 reg = <0 0 0x100>;
>                 fsl,weim-cs-timing = <something>;
>         };
>         acme@1 {

And '@0,500'

>                 compatible = "acme,whatnot";
>                 reg = <0 0x500 0x100>;
>                 fsl,weim-cs-timing = <something else>;
>         };
> };
>
> However in this example, the driver will be happy:
>
> &weim {
>         acme@0 {
>                 compatible = "acme,whatever";
>                 reg = <0 0 0x100>;
>                 fsl,weim-cs-timing = <something>;
>         };
>         acme@1 {
>                 compatible = "acme,whatnot";
>                 reg = <0 0x500 0x100>;
>                 fsl,weim-cs-timing = <something>;
>         };
> };
>
> Signed-off-by: Sven Van Asbroeck <TheSven73@googlemail.com>
> ---
>  drivers/bus/imx-weim.c | 33 ++++++++++++++++++++++++++++++---
>  1 file changed, 30 insertions(+), 3 deletions(-)
>
> diff --git a/drivers/bus/imx-weim.c b/drivers/bus/imx-weim.c
> index 24f22285395d..114e503ec785 100644
> --- a/drivers/bus/imx-weim.c
> +++ b/drivers/bus/imx-weim.c
> @@ -46,8 +46,18 @@ static const struct imx_weim_devtype imx51_weim_devtype = {
>  };
>
>  #define MAX_CS_REGS_COUNT      6
> +#define MAX_CS_REGS            6
>  #define OF_REG_SIZE            3
>
> +struct cs_timing {
> +       bool is_applied;
> +       u32 regs[MAX_CS_REGS_COUNT];
> +};
> +
> +struct cs_timing_state {
> +       struct cs_timing cs[MAX_CS_REGS];
> +};
> +
>  static const struct of_device_id weim_id_table[] = {
>         /* i.MX1/21 */
>         { .compatible = "fsl,imx1-weim", .data = &imx1_weim_devtype, },
> @@ -112,11 +122,14 @@ static int __init imx_weim_gpr_setup(struct platform_device *pdev)
>  }
>
>  /* Parse and set the timing for this device. */
> -static int __init weim_timing_setup(struct device_node *np, void __iomem *base,
> -                                   const struct imx_weim_devtype *devtype)
> +static int __init weim_timing_setup(struct device *dev,
> +                                   struct device_node *np, void __iomem *base,
> +                                   const struct imx_weim_devtype *devtype,
> +                                   struct cs_timing_state *ts)
>  {
>         u32 cs_idx, value[MAX_CS_REGS_COUNT];
>         int i, ret, reg_idx, num_regs;
> +       struct cs_timing *cst;
>
>         if (WARN_ON(devtype->cs_regs_count > MAX_CS_REGS_COUNT))
>                 return -EINVAL;
> @@ -145,10 +158,23 @@ static int __init weim_timing_setup(struct device_node *np, void __iomem *base,
>                 if (cs_idx >= devtype->cs_count)
>                         return -EINVAL;
>
> +               /* prevent re-configuring a CS that's already been configured */
> +               cst = &ts->cs[cs_idx];
> +               if (cst->is_applied && memcmp(value, cst->regs,
> +                                       devtype->cs_regs_count*sizeof(u32))) {
> +                       dev_err(dev, "fsl,weim-cs-timing conflict on %pOF", np);
> +                       return -EINVAL;
> +               }
> +
>                 /* set the timing for WEIM */
>                 for (i = 0; i < devtype->cs_regs_count; i++)
>                         writel(value[i],
>                                 base + cs_idx * devtype->cs_stride + i * 4);
> +               if (!cst->is_applied) {
> +                       cst->is_applied = true;
> +                       memcpy(cst->regs, value,
> +                               devtype->cs_regs_count*sizeof(u32));
> +               }
>         }
>
>         return 0;
> @@ -165,6 +191,7 @@ static int __init weim_parse_dt(struct platform_device *pdev,
>         const struct imx_weim_devtype *devtype = of_id->data;
>         struct device_node *child;
>         int ret, have_child = 0;
> +       struct cs_timing_state ts = {};
>
>         if (devtype == &imx50_weim_devtype) {
>                 ret = imx_weim_gpr_setup(pdev);
> @@ -179,7 +206,7 @@ static int __init weim_parse_dt(struct platform_device *pdev,
>         }
>
>         for_each_available_child_of_node(pdev->dev.of_node, child) {
> -               ret = weim_timing_setup(child, base, devtype);
> +               ret = weim_timing_setup(&pdev->dev, child, base, devtype, &ts);
>                 if (ret)
>                         dev_warn(&pdev->dev, "%pOF set timing failed.\n",
>                                 child);
> --
> 2.17.1
>
