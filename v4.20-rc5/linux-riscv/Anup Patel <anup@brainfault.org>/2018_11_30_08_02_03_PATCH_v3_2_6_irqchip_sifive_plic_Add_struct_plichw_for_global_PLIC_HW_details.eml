Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 16:09:29 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga007.fm.intel.com (fmsmga007.fm.intel.com [10.253.24.52])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 99278580460;
	Fri, 30 Nov 2018 00:02:31 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by fmsmga007-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 30 Nov 2018 00:02:31 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AnhCB/RKPAjM/Z6aSXNmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgULP/4rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZXshfSTFPDI2/?=
 =?us-ascii?q?YYUIDeUBM/1Yr5H/qlYVsReyGROhCP/1xzNUmnP727Ax3eQ7EQHB2QwtB84DsH?=
 =?us-ascii?q?LJrNXtKawcS/q6zLXWwjXHcvhb3i3y6I7VchA5uvyDRqhwftDQyUkpGQPKlEiQ?=
 =?us-ascii?q?qYj5Pz+P0eQNqWeb4vNmWOmyiGAnsxl8riazysookIXFm4wYxk7e+Slkw4s5Oc?=
 =?us-ascii?q?e0RU95bNK8H5ZdszuWO5VqTs4gWW1luDg2xqcYtZKnfyUHzoksyQTFZPydaYeI?=
 =?us-ascii?q?5wruVOaPLjd8g3JoYKy/hxms/ki60OH8Vde70ExMriVbltnArHcN1wbc6sSfS/?=
 =?us-ascii?q?t9+Fmu2SqX2gzN9u1JJVo4mbfVJpI/2LI8i5kevVjZEiL3mkj6lKqWeV8l+uis?=
 =?us-ascii?q?5eTneLLmppqEOo9wiwH+NLkum8OmDeQ7LAcORW6b9vq41LH6+k34TrNKgeMskq?=
 =?us-ascii?q?TCrpDaKtoUprSjDw9WzIkj8RC/ACmi0NgCmnkHNl1FdAqdj4f1I1HOPOz4DfCn?=
 =?us-ascii?q?jlSokTdrxO7JMqfuA5XQNXXDlLbhfbBg609T0gYzzNZf545KBbEFOv78RkjxtN?=
 =?us-ascii?q?nABB8jLwO02/rnCMl61o4GWWKAGK6ZML/Ivl+P/O4vI/SMa5UTuDbyMPUl4//u?=
 =?us-ascii?q?jXkkmV4SZ6Wp3J0XaGymEfRiOUmWfX3sgtIZG2cQogU+VPDqiEGFUTNLZXayWL?=
 =?us-ascii?q?wz6is4CIKhC4fDQIetjaeF3Ce6GJ1We29HBkqNEXfua4WLRfMMZDiOLc9mlzwO?=
 =?us-ascii?q?TaKhRJM51RGyqA/6zKJqIfDP+i0YspLj18J55/fJmhEw7jF0C8Wd02eQT2B7hG?=
 =?us-ascii?q?8IRjk23Lxhrkx50FuMza94g/lAH9xJ+/xJShs6NYLbz+FiCND9QATBcs2NSFan?=
 =?us-ascii?q?WNqmBz4xQ8k1w98PZUZ9BtqjggrC3yqsH78aibiLCIYo/aLb2nj7P9x9xGre1K?=
 =?us-ascii?q?k9k1kmRdNCOnC8ia5h6QffHY7JnF+fl6axa6sc2inB9GOAzWqLuEFVSwpwUaTD?=
 =?us-ascii?q?XXACaUrat9X55kXeT7CwDbQrKBdOycmHKqFScN3mkU1GROv/ONTZe2++hn2/BQ?=
 =?us-ascii?q?iWyb+WbIrlYWMd3D7DB0gCiA0T+XeGNQ4jBiauuW7eDTpuFU7xbEPo6+VxtHS7?=
 =?us-ascii?q?TkosxQGQc0Jhz6a1+gIShfGEV/MT37cEuCA9qzV0HFexxc7WB8CHpwp7eKVcYN?=
 =?us-ascii?q?U94Fhc2GLdtgx9OIGgLq94il4fdQR3o13h1xFtBopclsgqqWsgzBBuJqKAzFNB?=
 =?us-ascii?q?azSY0IjqNb3TNGbz8w6gaq7M1l7FzdaZ570A6PI7q1XkogGkDU4i83Rh09lI3H?=
 =?us-ascii?q?qQ/JTKDAwOUZ3vVkY77QR1p7bfYiMl/YPbyWVsMbWosj/Fw98oBPYlxgy8cNtF?=
 =?us-ascii?q?MaKEFBX9E8sVB8W1LOwqml6pbg8LPexI9a40Od+meOWC2KKxIOlgmzemh3xd4I?=
 =?us-ascii?q?9hykKM6zZ8SunQ0pYfwvGXwhGIVy3hg1emqMz3n55LZSsTHmam1SfrHopRabBs?=
 =?us-ascii?q?coYRDmeuJda6xtF/h57rRn5Z+0SvB1IA2M+1ZxWSa0bx0hFX1UQSuXangze3zy?=
 =?us-ascii?q?RokzE1qaqSxCzPw+X4eBsHIGJLX3RijVH3LIiwjtAaWlWobgczmBuk40b627ZU?=
 =?us-ascii?q?pKBlI2bPRkdIejD8L3t+XauoqrqCf8lP5YsqsSpNSuS8YlOaSrnnrxsBySzjHG?=
 =?us-ascii?q?hexDE9dz60vJX0hBh6iGObLHZuo3vVY8BwxRHD5NPCQf5dxCYJRC59iTPPHFiz?=
 =?us-ascii?q?I8Gp/cmIl5fEqu2/V3iuVppJfSnpzIOAsjC25WlrAR25gvCylcfrEQk80S/nyd?=
 =?us-ascii?q?ZqUT/Eowr7Yonuz666K/5oflF0BF/g7Mp3AoJ+nZExhJ0K2Xgam4+a/XwIkWro?=
 =?us-ascii?q?NdVb2KT+bGcCRDIRwt7V5hTl11NnLn6T2435UXCdyNN7Z9amemMWxj4978dSBa?=
 =?us-ascii?q?eR7bxEnjF6rkC2rA3Pevh9gikSyeE153EEmeEJtxEgziGcArAUAElZMjbglxWO?=
 =?us-ascii?q?79CisqpXYHyjfqS31Ep7hdqhFq2NohlAWHblfZcvBTNw7sJ6MF7W0Xz88IfkeM?=
 =?us-ascii?q?TLbdIItx2ZiBPAj+lTKJIsmfsGnytnOWThvXI7z+43lwBh3Za/vIKfMWVi4Lq5?=
 =?us-ascii?q?AgJENj3yf84c4SvijaFansaLxYyvGohhFy4PXJvpS/KoDT0Tue7mNwaIDD0ztH?=
 =?us-ascii?q?ObFaDDEg+Y7Udst2jPHIyzN3GLOHkZys1vRBuHK0xang8URy82noIjGgCp2czh?=
 =?us-ascii?q?c1p55jYL6V7jsRZMzuNoNx/iUmbQvguoazE0SISBIxpS9A1N+0DVMcmG5OJpAy?=
 =?us-ascii?q?5Y5oGhrBCKKmGDZwVICnwJWlWZB1/5OLmi/8LA8++eBuqxNPbOZbSOqepDV/aH?=
 =?us-ascii?q?356v041m/yqSOcWLJHVtE/o72k9bV3BjB8vZgykPSzAQly/Vb86Uuha8+i50rs?=
 =?us-ascii?q?C+6vjrWxjv5YyAC7RMK9Vv5gu2jLyHN+6RgiZ5NDlZ2okNxX/O1LgQwloShzty?=
 =?us-ascii?q?eDmqFLQKrTTNQ77Imq9LEx4bbDt+O9FV760nxAlCJ87ahsnx1r55lfM1D1ZFVV?=
 =?us-ascii?q?r8msCmf8AKIme9NE/ZC0aPLriJOTrLw8Tva6OmVbJQlPlUtwG3uTuDD0/jPzGD?=
 =?us-ascii?q?myP1WBy1Le5MjD+UPBpFtYG5cxZtD3XjTd38Zh26Nt93kSM5wbkuinzWMm4cNC?=
 =?us-ascii?q?B2c1lRob2I8SNYnvJ/FnRB73V/K+mEnieZ7+/AJZcXsftkGCJ0l+1B7XQ+yrtV?=
 =?us-ascii?q?6jxERfNvlCvTqN5uv0+pku2VxjV7VxpOr2UDuIXehUxmPKjDvrVJU3zJ+A5FuX?=
 =?us-ascii?q?2ZDxEHvfN+C9Pupa0Wwd/Kwua7ATNI/sjItewBT5zdL9+vPXcqKlzjFSTXAQ8I?=
 =?us-ascii?q?XHimOXyJwwRxmfeT+3ndipUooZHqn9JaRrZdVVExUPcXGE9sGtsqJJZxVykj17?=
 =?us-ascii?q?mBg5hMrUa+qxzYX411up3GRvSfG727NDmdnZFAZh0V3an/K4UDcIH2jQgqSFBh?=
 =?us-ascii?q?m4KCME3XRd1X6nljZxQzpm1J+XtzQmQ+3kXjLAWg/ClXXdu9hBV+uBp4buUg7n?=
 =?us-ascii?q?+45l4tLRzYtS0/kUQrsdz/hHaadzunf4mqWoQDIizprwAJO4/2R04hZAuvhWRu?=
 =?us-ascii?q?Lj7FQbxYkr98M2dxh1mP6tN0BfdAQPgcM1crzvaNaqBtiAwEpw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ASAADx7QBch0O0hNFiDhABBgcGgVEJC?=
 =?us-ascii?q?wGDayeYGYIhlzKBJANMEgEBGBMBh3QiNAkNAQMBAQEBAQECARMBAQEIDQkIKSM?=
 =?us-ascii?q?MgjYkAYJiAwMBAiQZAQE3AQUJAQFQAzEBBQEcBgEKCAWDHIIBAQWbNDyKHYFsM?=
 =?us-ascii?q?4J2AQEFgQUBhiQIEodagw+BHBeBQD+BEY1uiRsShnKQCQmCIo8JI1+IeYdELIh?=
 =?us-ascii?q?NjzcCBAIEBQIFDyGBJYINMxoIKAiDJ4IbDBcSgziKGAQBPjgyAYEEAQGLNCmCJ?=
 =?us-ascii?q?AEB?=
X-IPAS-Result: =?us-ascii?q?A0ASAADx7QBch0O0hNFiDhABBgcGgVEJCwGDayeYGYIhlzK?=
 =?us-ascii?q?BJANMEgEBGBMBh3QiNAkNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkAYJiAwMBA?=
 =?us-ascii?q?iQZAQE3AQUJAQFQAzEBBQEcBgEKCAWDHIIBAQWbNDyKHYFsM4J2AQEFgQUBhiQ?=
 =?us-ascii?q?IEodagw+BHBeBQD+BEY1uiRsShnKQCQmCIo8JI1+IeYdELIhNjzcCBAIEBQIFD?=
 =?us-ascii?q?yGBJYINMxoIKAiDJ4IbDBcSgziKGAQBPjgyAYEEAQGLNCmCJAEB?=
X-IronPort-AV: E=Sophos;i="5.56,297,1539673200"; 
   d="scan'208";a="53985349"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 30 Nov 2018 00:02:29 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727159AbeK3TKx (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 30 Nov 2018 14:10:53 -0500
Received: from mail-pg1-f194.google.com ([209.85.215.194]:45338 "EHLO
        mail-pg1-f194.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726971AbeK3TKx (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 30 Nov 2018 14:10:53 -0500
Received: by mail-pg1-f194.google.com with SMTP id y4so2140400pgc.12
        for <linux-kernel@vger.kernel.org>; Fri, 30 Nov 2018 00:02:26 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=brainfault-org.20150623.gappssmtp.com; s=20150623;
        h=from:to:cc:subject:date:message-id:in-reply-to:references;
        bh=kkVGy4h7Z995lrFmqX6qHIt4h7IAkxhYZu3D8v9Oubs=;
        b=JKT1gLgUoLVHpe9nJxzu6L/bLqyFy9HwvwF4/VMPXxC+Cq8HGxblegWVPmLLauuWmW
         0kZ3dr5XBp6AgrKZujchCgccSWQOFKdIjDTk5P/jvBtxCPEQbDzKH77TQeYRClI/4vnM
         Zwd0mpi4Z/APgXDB/nuM7Czu4jAEXJDqsD8jxC8aEunGP5MNvlgK5oFv8QXBlxbVdsm2
         /9bYqt/FhuQ+WfiK8tTyn2yTasNGTqZwOAGbU3DCaSJ3j68hfo9KeJoftRFzig7OcGFA
         hZvlXw8moFu25WAQO+qAtYFrGW9AQnbwxg9V6m8spXgGd7R3D01ZxZuoYCss0mG2O5Fr
         EFKg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references;
        bh=kkVGy4h7Z995lrFmqX6qHIt4h7IAkxhYZu3D8v9Oubs=;
        b=pPfhoj/t7d7M3FTAkKJ1nrCcrZY0mHKDljf4RRkjJ9Akjan4p+omWTvlMBc9AIVzrG
         7Jizp5PZz0nbMCjwaZjPP0kZBvzd6Bi65k5tz6ZBNazidRt1AVcmUv3ZF9/84xk75N4x
         GpAJxQ/QfNCbuts1BTMFR/H6F+8yJSu7XkYxPK384T4ePNU6R4W5VOjsbo4jihAhkmCn
         nWdFwswWLyFY32iL0oew3VE0oEDZLXJEWB6QecZdrVdKf36cMDVBiHfpnmL9daXMreT6
         NyK8kH9YxDKt0SRMhmVPoUIH4GiliWUwlPvttP43IhiVJrXUxP1qGSNNtZHk0oRIQP/N
         CbEA==
X-Gm-Message-State: AA+aEWbRx6HE1H83ZMIjqykOozxWcgkbxKHeyR7cFlkHm6OzmxrpPCwT
        mUL1wBNTVVZ3fjktvH06/JK4CA==
X-Google-Smtp-Source: AFSGD/UELnKSp4FfeQDOOOJa1A3b/H97XMHjOREzupDHSRM3KVvzwy/kAlWP5yoNIRCwEOA40Iw7OA==
X-Received: by 2002:a63:5664:: with SMTP id g36mr3957567pgm.313.1543564945683;
        Fri, 30 Nov 2018 00:02:25 -0800 (PST)
Received: from anup-ubuntu64.qualcomm.com ([49.207.52.208])
        by smtp.googlemail.com with ESMTPSA id q187sm19218333pfq.128.2018.11.30.00.02.21
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Fri, 30 Nov 2018 00:02:24 -0800 (PST)
From: Anup Patel <anup@brainfault.org>
To: Palmer Dabbelt <palmer@sifive.com>,
        Albert Ou <aou@eecs.berkeley.edu>,
        Daniel Lezcano <daniel.lezcano@linaro.org>,
        Thomas Gleixner <tglx@linutronix.de>,
        Jason Cooper <jason@lakedaemon.net>,
        Marc Zyngier <marc.zyngier@arm.com>
Cc: Atish Patra <atish.patra@wdc.com>,
        Christoph Hellwig <hch@infradead.org>,
        linux-riscv@lists.infradead.org, linux-kernel@vger.kernel.org,
        Anup Patel <anup@brainfault.org>
Subject: [PATCH v3 2/6] irqchip: sifive-plic: Add struct plic_hw for global PLIC HW details
Date: Fri, 30 Nov 2018 13:32:03 +0530
Message-Id: <20181130080207.20505-3-anup@brainfault.org>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20181130080207.20505-1-anup@brainfault.org>
References: <20181130080207.20505-1-anup@brainfault.org>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This patch adds Add struct plic_hw to represent global PLIC HW details.

Currently, these details are only used in plic_init() but in-future
these will be useful in implementing PM suspend and resume callbacks.

Further, these global details are good debug info about HW so let's
not throw them away after use in plic_init().

Signed-off-by: Anup Patel <anup@brainfault.org>
---
 drivers/irqchip/irq-sifive-plic.c | 59 +++++++++++++++++--------------
 1 file changed, 33 insertions(+), 26 deletions(-)

diff --git a/drivers/irqchip/irq-sifive-plic.c b/drivers/irqchip/irq-sifive-plic.c
index c23a293a2aae..48bee877e0f1 100644
--- a/drivers/irqchip/irq-sifive-plic.c
+++ b/drivers/irqchip/irq-sifive-plic.c
@@ -55,8 +55,6 @@
 #define     CONTEXT_THRESHOLD		0x00
 #define     CONTEXT_CLAIM		0x04
 
-static void __iomem *plic_regs;
-
 struct plic_handler {
 	bool			present;
 	void __iomem		*hart_base;
@@ -67,8 +65,19 @@ struct plic_handler {
 	raw_spinlock_t		enable_lock;
 	void __iomem		*enable_base;
 };
+
 static DEFINE_PER_CPU(struct plic_handler, plic_handlers);
 
+struct plic_hw {
+	u32			nr_irqs;
+	u32			nr_handlers;
+	u32			nr_mapped;
+	void __iomem		*regs;
+	struct irq_domain	*irqdomain;
+};
+
+static struct plic_hw plic;
+
 static inline void plic_toggle(struct plic_handler *handler,
 				int hwirq, int enable)
 {
@@ -87,7 +96,7 @@ static inline void plic_irq_toggle(struct irq_data *d, int enable)
 {
 	int cpu;
 
-	writel(enable, plic_regs + PRIORITY_BASE + d->hwirq * PRIORITY_PER_ID);
+	writel(enable, plic.regs + PRIORITY_BASE + d->hwirq * PRIORITY_PER_ID);
 	for_each_cpu(cpu, irq_data_get_affinity_mask(d)) {
 		struct plic_handler *handler = per_cpu_ptr(&plic_handlers, cpu);
 
@@ -130,8 +139,6 @@ static const struct irq_domain_ops plic_irqdomain_ops = {
 	.xlate		= irq_domain_xlate_onecell,
 };
 
-static struct irq_domain *plic_irqdomain;
-
 /*
  * Handling an interrupt is a two-step process: first you claim the interrupt
  * by reading the claim register, then you complete the interrupt by writing
@@ -148,7 +155,7 @@ static void plic_handle_irq(struct pt_regs *regs)
 
 	csr_clear(sie, SIE_SEIE);
 	while ((hwirq = readl(claim))) {
-		int irq = irq_find_mapping(plic_irqdomain, hwirq);
+		int irq = irq_find_mapping(plic.irqdomain, hwirq);
 
 		if (unlikely(irq <= 0))
 			pr_warn_ratelimited("can't find mapping for hwirq %lu\n",
@@ -177,36 +184,35 @@ static int plic_find_hart_id(struct device_node *node)
 static int __init plic_init(struct device_node *node,
 		struct device_node *parent)
 {
-	int error = 0, nr_handlers, nr_mapped = 0, i;
-	u32 nr_irqs;
+	int error = 0, i;
 
-	if (plic_regs) {
+	if (plic.regs) {
 		pr_warn("PLIC already present.\n");
 		return -ENXIO;
 	}
 
-	plic_regs = of_iomap(node, 0);
-	if (WARN_ON(!plic_regs))
+	plic.regs = of_iomap(node, 0);
+	if (WARN_ON(!plic.regs))
 		return -EIO;
 
 	error = -EINVAL;
-	of_property_read_u32(node, "riscv,ndev", &nr_irqs);
-	if (WARN_ON(!nr_irqs))
+	of_property_read_u32(node, "riscv,ndev", &plic.nr_irqs);
+	if (WARN_ON(!plic.nr_irqs))
 		goto out_iounmap;
 
-	nr_handlers = of_irq_count(node);
-	if (WARN_ON(!nr_handlers))
+	plic.nr_handlers = of_irq_count(node);
+	if (WARN_ON(!plic.nr_handlers))
 		goto out_iounmap;
-	if (WARN_ON(nr_handlers < num_possible_cpus()))
+	if (WARN_ON(plic.nr_handlers < num_possible_cpus()))
 		goto out_iounmap;
 
 	error = -ENOMEM;
-	plic_irqdomain = irq_domain_add_linear(node, nr_irqs + 1,
-			&plic_irqdomain_ops, NULL);
-	if (WARN_ON(!plic_irqdomain))
+	plic.irqdomain = irq_domain_add_linear(node, plic.nr_irqs + 1,
+						&plic_irqdomain_ops, NULL);
+	if (WARN_ON(!plic.irqdomain))
 		goto out_iounmap;
 
-	for (i = 0; i < nr_handlers; i++) {
+	for (i = 0; i < plic.nr_handlers; i++) {
 		struct of_phandle_args parent;
 		struct plic_handler *handler;
 		irq_hw_number_t hwirq;
@@ -231,25 +237,26 @@ static int __init plic_init(struct device_node *node,
 		handler = per_cpu_ptr(&plic_handlers, cpu);
 		handler->present = true;
 		handler->hart_base =
-			plic_regs + CONTEXT_BASE + i * CONTEXT_PER_HART;
+			plic.regs + CONTEXT_BASE + i * CONTEXT_PER_HART;
 		raw_spin_lock_init(&handler->enable_lock);
 		handler->enable_base =
-			plic_regs + ENABLE_BASE + i * ENABLE_PER_HART;
+			plic.regs + ENABLE_BASE + i * ENABLE_PER_HART;
 
 		/* priority must be > threshold to trigger an interrupt */
 		writel(0, handler->hart_base + CONTEXT_THRESHOLD);
-		for (hwirq = 1; hwirq <= nr_irqs; hwirq++)
+		for (hwirq = 1; hwirq <= plic.nr_irqs; hwirq++)
 			plic_toggle(handler, hwirq, 0);
-		nr_mapped++;
+
+		plic.nr_mapped++;
 	}
 
 	pr_info("mapped %d interrupts to %d (out of %d) handlers.\n",
-		nr_irqs, nr_mapped, nr_handlers);
+		plic.nr_irqs, plic.nr_mapped, plic.nr_handlers);
 	set_handle_irq(plic_handle_irq);
 	return 0;
 
 out_iounmap:
-	iounmap(plic_regs);
+	iounmap(plic.regs);
 	return error;
 }
 
-- 
2.17.1

