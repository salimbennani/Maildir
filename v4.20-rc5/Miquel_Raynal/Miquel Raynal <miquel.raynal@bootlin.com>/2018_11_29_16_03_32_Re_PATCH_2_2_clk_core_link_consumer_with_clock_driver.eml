Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 08:47:33 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga007.fm.intel.com (fmsmga007.fm.intel.com [10.253.24.52])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id E3B555802E4;
	Thu, 29 Nov 2018 08:06:41 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga007-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 08:06:41 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AI+kLRx+AK589sf9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1+IUIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CS2RPXthfWTFCDIy+?=
 =?us-ascii?q?YYsPCO0PMulEoIfyvFsOtRmzCBKwBO3txDJEmmX70bE43uknDArI3BYgH9ULsH?=
 =?us-ascii?q?nMq9v1Nb4SUf2rw6nM0D7Nc+lZ2Df76IfSdhAqvPaBXbdxccrI1EkgCQfFgk+K?=
 =?us-ascii?q?qYP/PzKV0P4Cs2yA4uV7UuKvjHInqwVwojip3Msjlo7JhocMx13C6C53w541KM?=
 =?us-ascii?q?WmREJnZdOoCoZcui+EO4dsX88vQH1ktDw7x7AEoZK2eDQGxI4kyhPccfCLbouF?=
 =?us-ascii?q?7gj+WOuRIjp1gm9udqiliBao60egz/XxVsmq31ZOqSpIisfMtn8T2BzJ8MSHSe?=
 =?us-ascii?q?Vy/l2n2TmR0wDf8OZEIVo7labDKp4hxKA/loYLvEjdAiP7nF/6gLKYe0k64OSk?=
 =?us-ascii?q?9ufqbqn8qpKdNYJ4kgT+Pb4vmsy7D+Q4KA8OX22D9OS41b3j+1D5QbpTgv01jK?=
 =?us-ascii?q?bZqpbaKtofpqKgBA9U3IAj5AilDzq9ztQYkmcILEhfdBKEkYfpIVfOL+78Dful?=
 =?us-ascii?q?hFSsijhry+jcPrL9GpXNMmTDkLD5cLZ56k5cyxQ8wcpQ5pJJEbwBJPPzWknstN?=
 =?us-ascii?q?3XFBM5Mgq0w/r5B9V5zI8RRWWPAqqBOqPIrVCI/v4vI/WLZIINuDbyMfkl5+L0?=
 =?us-ascii?q?gn8+g1MdfbSp0oERaHC3BflmJ0SZYXzxgtYOC2sKvww+TPD0h12GSzJce3GyX6?=
 =?us-ascii?q?ck7DEhFI2mFZvDRpyqgLGZ3ie7GYNZanpFClCLF3focYKEVuwIaCKTJM9hjzMF?=
 =?us-ascii?q?WaKgS48nyRGhqgv6x6B7IerT/y0SrYjj28Rt5+3PiREy8iR5AN6G02GNSGF0nX?=
 =?us-ascii?q?kERyUs06B9ukF9zlaD0a5lg/1XD9BT5vVJUhskOp7Y1eB1F9fyWgfZdNeTVFmm?=
 =?us-ascii?q?WsmmAS02Tt8pwN8BeUB9F8+mjhDCxSWqBbAVmqePBJw19KLcwnfwK9x8y3bAyK?=
 =?us-ascii?q?kukV0mTtFTOm2hg6517xLTCJLRk0WFi6aqcrwR0zPX+2ed02WCpkFYXxR2UaXe?=
 =?us-ascii?q?Q38fYEzardD65kPHS7+jErAnMgpHyc6fJapGcNzpjVNaRPj9PNTSeX6+m2C1BR?=
 =?us-ascii?q?yQ3LODcJLqe3kB3CXaEEULjhoc/WiYOgQkBieuuWTeDCdwGlLpeE7s9eh+qHWm?=
 =?us-ascii?q?Tk471Q2Kbkth16ar9R4Rn/CTV/QT3rccsic7tzp0BEq9387RC9eYuwphfaBcYd?=
 =?us-ascii?q?Qh4FdH1WPVrRB9MoanL6B4gl4ecgJ3v0z12hVzC4VAl9UqrXwwwApzL6KYzE1O?=
 =?us-ascii?q?dzeC0Z/sPb3XL3H4/AqzZK7OxlHezNGW978V5/Q8tVrisx+mF0o4/3p8ztlazm?=
 =?us-ascii?q?GT5pPJDAoVT5L8SUI39xl8p7HHbSgx/YLU1XtwMaaqtj/Owc4mBOwgyhy4ZddQ?=
 =?us-ascii?q?LLuEFBPuE80dH8WvKPEql0K1YR4ePeFS9LQ7P8Wpd/ad3K6rPeBgnC+pjGhd4Y?=
 =?us-ascii?q?B91F6M+DR4SuLSw5kFxPSY1BOdVzjglFehrtz3mYdcaDEIH2qw1TLrBJRMaa11?=
 =?us-ascii?q?Z4oLD3mhI9e2xtlnm5HiQXpY+0O9CFMc38+pfwGfb1j83Q1WyEQWrmarmSq+zz?=
 =?us-ascii?q?xojT4pqrCT0zDJw+TnbBAHIHJERHF+jVfwJoi5l9AbXEmyYwkpjhel/lv6x65A?=
 =?us-ascii?q?qaR7LmnTR1pIfifsI2FjVKuwqqSNY8pV5Jw0tiVXVfy2YUqGRb7lvxsazyTjEn?=
 =?us-ascii?q?NcxD8hbTGquZb5nxtghGKGNnlzr3nZecB2xRjB4tzRXvpR3jsARCllhjjbHFm8?=
 =?us-ascii?q?P9+1/dqKk5fPqPyxV2WkVpdLaynk0ZuAtDen5W1tGRC+n+q8mtr9HQg40C/70c?=
 =?us-ascii?q?JnVSHJrBb6f4nq2L62MeNhfkl0GlD879B2FZ15kos1nJsQw2QVho2J/Xoblmf+?=
 =?us-ascii?q?KdZb1rj/bHYXRT4L3sTa4A7q2EB4KnKJxoT5VmiSw8d7Ztm6ZH8W1Tw578xQFK?=
 =?us-ascii?q?iU67lElzNvolWktQLRfeR9njAFxPsr6X4agPsGtBAjzyqDGbASAVdXPTb3mBuW?=
 =?us-ascii?q?9dC+o75aZGKucbi2yUp/ksqtDLCEogFARnn5fo0uEjN37sV6KFjMymH86pn4eN?=
 =?us-ascii?q?nMatIergGUkxDFj+RPKZM+jPwKhTd8OWLmvH0o0Oo7jR1o3ZGns4mLMWRt/KSl?=
 =?us-ascii?q?AhFGMj35fd8c+jbojaxGhMaZw5ivHol9GjUMRJbnVuinEDUWtfT6LQqOFCA8p2?=
 =?us-ascii?q?yfGbreGw+f9Uhno2jOE5CtK3GYOn0Zwc9+SxmaIUxVmBoUUykinp4lCgCqw9Ts?=
 =?us-ascii?q?cEVj6TAU+FH4sQFAyv5yOxn8T2ffpxqoajEuR5iENxdW6gBC50HIMc2R9O5zHi?=
 =?us-ascii?q?dY/oG/owyJMGCUewNIDWQRUEyeG1/jJqWu5cXH8+WABuu+KObOYayTqeNEUfeE?=
 =?us-ascii?q?34mv0oxg/zaDLciPOnhiD/sm2ktMR3x5GsLZmykRRCwTjS7Cc8mbpBKk8C1tss?=
 =?us-ascii?q?+/6OjrWB7o5YaXC7tdL9Rv+xO1gaeCLeKQhzx5KTFX1pwS33/I1aMf0UUWiyFv?=
 =?us-ascii?q?cTmtDLsBuTTMTKLWhq9YERobZzlvO8tP6qI2xhNNNtLDitPpyr54ieY4BE1YVV?=
 =?us-ascii?q?P6gMGme8wLL3u5NFPGH0uLMLWGJTvWw8D4e6+8SLtQjPlKuB20ozqUD0jjPjGb?=
 =?us-ascii?q?nTnzSx+vKf1MjD2cPBFGpIG9cxNtBXL/Q978dhK7MMF4jTstzL0wh3PKM3McMD?=
 =?us-ascii?q?dmf0NMqL2Q8T1XgvFlF2Nd6XplKPGOmzyF4OnANpYWrfxrDzx0lu1A5nQ6zrpV?=
 =?us-ascii?q?7CdcS/10mCvdtNhuo169n+mLyzpnVgdOqzlRiIKKu0ViJbvW9p1aVXnY+xIN6D?=
 =?us-ascii?q?bYNxNfgtJ1C9ji85pR0tHVmOqnLT5S8tfZu9EdH8HOJOqNN309NRvvXjXTCV1W?=
 =?us-ascii?q?YySsMDT6hlVAnfXazHSEqJE+4szpmYMTR7sdTlUkEPoeIk5iG8AGIZExVTQhx+?=
 =?us-ascii?q?3IxPUU7Gaz+UGCDP5RuYrKA7fLWa3i?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AJAACZDQBch0O0hNFkGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUgUBAQELAQGDahQTg3mId4spgg0UlzCBcywTAYd0IjUIDQEDAQEBAQE?=
 =?us-ascii?q?BAgETAQEBCA0JCCkvQgEOAYFkJAGCYQEBAQECAQECIAQMRgUBCQEBChgCAgUhA?=
 =?us-ascii?q?gIDDB0rBhMFFoMGgXoIBAGmLXwziiqBC4sLgVc/gRGDEogFglcCiSeBcpQ1VQc?=
 =?us-ascii?q?Cgh0EiAqGfCMKkRKaFgKCCTMaI4M8gicXjh4/MoEFAQEhgS+JHSmCJAEB?=
X-IPAS-Result: =?us-ascii?q?A0AJAACZDQBch0O0hNFkGwEBAQEDAQEBBwMBAQGBUgUBAQE?=
 =?us-ascii?q?LAQGDahQTg3mId4spgg0UlzCBcywTAYd0IjUIDQEDAQEBAQEBAgETAQEBCA0JC?=
 =?us-ascii?q?CkvQgEOAYFkJAGCYQEBAQECAQECIAQMRgUBCQEBChgCAgUhAgIDDB0rBhMFFoM?=
 =?us-ascii?q?GgXoIBAGmLXwziiqBC4sLgVc/gRGDEogFglcCiSeBcpQ1VQcCgh0EiAqGfCMKk?=
 =?us-ascii?q?RKaFgKCCTMaI4M8gicXjh4/MoEFAQEhgS+JHSmCJAEB?=
X-IronPort-AV: E=Sophos;i="5.56,295,1539673200"; 
   d="scan'208";a="53170098"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 08:06:37 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729090AbeK3DJZ convert rfc822-to-8bit (ORCPT
        <rfc822;like.xu@linux.intel.com> + 23 others);
        Thu, 29 Nov 2018 22:09:25 -0500
Received: from mail.bootlin.com ([62.4.15.54]:50350 "EHLO mail.bootlin.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1728583AbeK3DJZ (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 29 Nov 2018 22:09:25 -0500
Received: by mail.bootlin.com (Postfix, from userid 110)
        id 14D1E207BC; Thu, 29 Nov 2018 17:03:33 +0100 (CET)
X-Spam-Checker-Version: SpamAssassin 3.4.2 (2018-09-13) on mail.bootlin.com
X-Spam-Level: 
X-Spam-Status: No, score=-1.0 required=5.0 tests=ALL_TRUSTED,SHORTCIRCUIT
        shortcircuit=ham autolearn=disabled version=3.4.2
Received: from xps13 (aaubervilliers-681-1-63-158.w90-88.abo.wanadoo.fr [90.88.18.158])
        by mail.bootlin.com (Postfix) with ESMTPSA id B3E46206FF;
        Thu, 29 Nov 2018 17:03:32 +0100 (CET)
Date: Thu, 29 Nov 2018 17:03:32 +0100
From: Miquel Raynal <miquel.raynal@bootlin.com>
To: Maxime Ripard <maxime.ripard@bootlin.com>
Cc: Michael Turquette <mturquette@baylibre.com>,
        Stephen Boyd <sboyd@kernel.org>,
        Russell King <linux@armlinux.org.uk>,
        Antoine Tenart <antoine.tenart@bootlin.com>,
        Gregory Clement <gregory.clement@bootlin.com>,
        linux-kernel@vger.kernel.org,
        Maxime Chevallier <maxime.chevallier@bootlin.com>,
        Nadav Haklai <nadavh@marvell.com>,
        Thomas Petazzoni <thomas.petazzoni@bootlin.com>,
        linux-clk@vger.kernel.org, linux-arm-kernel@lists.infradead.org
Subject: Re: [PATCH 2/2] clk: core: link consumer with clock driver
Message-ID: <20181129170332.76971464@xps13>
In-Reply-To: <20181127123858.3v344nonsuyqskrt@flea>
References: <20181122212212.16039-1-miquel.raynal@bootlin.com>
 <20181122212212.16039-3-miquel.raynal@bootlin.com>
 <20181127123858.3v344nonsuyqskrt@flea>
Organization: Bootlin
X-Mailer: Claws Mail 3.17.1 (GTK+ 2.24.32; x86_64-pc-linux-gnu)
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8BIT
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi Maxime,

Maxime Ripard <maxime.ripard@bootlin.com> wrote on Tue, 27 Nov 2018
13:38:58 +0100:

> Hi Miquel,
> 
> On Thu, Nov 22, 2018 at 10:22:12PM +0100, Miquel Raynal wrote:
> > One major concern when, for instance, suspending/resuming a platform
> > is to never access registers before the underlying clock has been
> > resumed, otherwise most of the time the kernel will just crash. One
> > solution is to use syscore operations when registering clock drivers
> > suspend/resume callbacks. One problem of using syscore_ops is that the
> > suspend/resume scheduling will depend on the order of the
> > registrations, which brings (unacceptable) randomness in the process.
> > 
> > A feature called device links has been introduced to handle such
> > situation. It creates dependencies between consumers and providers,
> > enforcing e.g. the suspend/resume order when needed. Such feature is
> > already in use for regulators.
> > 
> > Add device links support in the clock subsystem by creating/deleting
> > the links at get/put time.
> > 
> > Example of a boot (ESPRESSObin, A3700 SoC) with devices linked to clocks:
> > ahci-mvebu d00e0000.sata: Linked as a consumer to d0013000.nb-periph-clk
> > mvneta d0030000.ethernet: Linked as a consumer to d0018000.sb-periph-clk
> > xhci-hcd d0058000.usb: Linked as a consumer to d0018000.sb-periph-clk
> > xenon-sdhci d00d0000.sdhci: Linked as a consumer to d0013000.nb-periph-clk
> > xenon-sdhci d00d0000.sdhci: Dropping the link to d0013000.nb-periph-clk
> > advk-pcie d0070000.pcie: Linked as a consumer to d0018000.sb-periph-clk
> > xenon-sdhci d00d0000.sdhci: Linked as a consumer to d0013000.nb-periph-clk
> > xenon-sdhci d00d0000.sdhci: Linked as a consumer to regulator.1
> > cpu cpu0: Linked as a consumer to d0013000.nb-periph-clk
> > cpu cpu0: Dropping the link to d0013000.nb-periph-clk
> > cpu cpu0: Linked as a consumer to d0013000.nb-periph-clk
> > 
> > Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
> > ---
> >  drivers/clk/clk.c            | 20 ++++++++++++++++++++
> >  drivers/clk/clkdev.c         | 13 ++++++++++---
> >  include/linux/clk-provider.h |  2 ++
> >  3 files changed, 32 insertions(+), 3 deletions(-)
> > 
> > diff --git a/drivers/clk/clk.c b/drivers/clk/clk.c
> > index b799347c5fd6..33a0f2b0533a 100644
> > --- a/drivers/clk/clk.c
> > +++ b/drivers/clk/clk.c
> > @@ -90,6 +90,7 @@ struct clk {
> >  	unsigned long max_rate;
> >  	unsigned int exclusive_count;
> >  	struct hlist_node clks_node;
> > +	struct device_link *link;
> >  };
> >  
> >  /***           runtime pm          ***/
> > @@ -262,6 +263,25 @@ struct clk_hw *__clk_get_hw(struct clk *clk)
> >  }
> >  EXPORT_SYMBOL_GPL(__clk_get_hw);
> >  
> > +void __clk_device_link(struct device *consumer, struct clk *clk)
> > +{
> > +	if (!consumer || !clk || !clk->core)
> > +		return;
> > +
> > +	clk->link = device_link_add(consumer, clk->core->dev,
> > +				    DL_FLAG_STATELESS);
> > +}
> > +EXPORT_SYMBOL_GPL(__clk_device_link);
> > +
> > +void __clk_device_unlink(struct clk *clk)
> > +{
> > +	if (!clk || !clk->link)
> > +		return;
> > +
> > +	device_link_del(clk->link);
> > +}
> > +EXPORT_SYMBOL_GPL(__clk_device_unlink);
> > +
> >  unsigned int clk_hw_get_num_parents(const struct clk_hw *hw)
> >  {
> >  	return hw->core->num_parents;
> > diff --git a/drivers/clk/clkdev.c b/drivers/clk/clkdev.c
> > index 9ab3db8b3988..fccfd4c01457 100644
> > --- a/drivers/clk/clkdev.c
> > +++ b/drivers/clk/clkdev.c
> > @@ -194,20 +194,27 @@ EXPORT_SYMBOL(clk_get_sys);
> >  struct clk *clk_get(struct device *dev, const char *con_id)
> >  {
> >  	const char *dev_id = dev ? dev_name(dev) : NULL;
> > -	struct clk *clk;
> > +	struct clk *clk = NULL;
> >  
> >  	if (dev && dev->of_node) {
> >  		clk = __of_clk_get_by_name(dev->of_node, dev_id, con_id);
> > -		if (!IS_ERR(clk) || PTR_ERR(clk) == -EPROBE_DEFER)
> > +		if (PTR_ERR(clk) == -EPROBE_DEFER)
> >  			return clk;
> >  	}
> >  
> > -	return clk_get_sys(dev_id, con_id);
> > +	if (IS_ERR_OR_NULL(clk))
> > +		clk = clk_get_sys(dev_id, con_id);
> > +
> > +	if (!IS_ERR(clk))
> > +		__clk_device_link(dev, clk);
> > +
> > +	return clk;  
> 
> I think this doesn't address all the cases. In your case, where you
> have one consumer that is not a clock, and one provider that is a
> clock, it works just fine.
> 
> However, if you have clocks providers chained, for example with one
> oscillator, a clock controller, and a device, the link will be created
> between the device and the controller, but there will be no link
> between the controller and the oscillator.

Indeed, there is not clock_get() in this case so you are right, a link
is missing if we want to track dependencies between clocks.

> 
> Adding a link in __clk_init_parent looks like it would address that
> case.

I will add one, thanks for the pointer.

> 
> Maxime
> 

I think device links must be managed in the following situations:
* A device gets a clock -> add a link between the device and the clock,
  save it in 'struct clk'.
* A device puts a clock -> remove the above link.
* A clock gets registered -> link the core clock with the parent core
  clock.
* A clock gets reparentized -> remove the above link and if there is a
  new parent, link the core clock to the parent core clock.
* A clock gets deregistered -> remove the link with the parent core
  clock if any and remove the link with each child clock if any (this
  will be done automatically because each child will get reparentized
  first).

I assume that a clock getting deregistered is not an input source for
any device anymore and thus there is already no more link to destroy on
this regard.


Thanks,
Miquèl
