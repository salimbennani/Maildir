Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 08:41:02 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 0FCB35802E4;
	Thu, 29 Nov 2018 04:14:00 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga001-1.jf.intel.com with ESMTP; 29 Nov 2018 04:13:59 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3APEa90h0uBmm+bzO6smDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segTI//xwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJcUMhRSSJBDICy?=
 =?us-ascii?q?YYUBAOUOP+lXs4bzp0AWrRa8HgSsGODixyVUinPq06A30eIsGhzG0gw6GNIOtW?=
 =?us-ascii?q?zZocv1NKcIUOC117XIzTLbb/NWxzj29Y7GfB89r/+VX717bM3cxlUvFwPfj1WQ?=
 =?us-ascii?q?spDlPzSN1uQNrWeX9e5gWvy1i24gqwB8uSSgyt43ioXTiIIV0EnJ+CNky4g7It?=
 =?us-ascii?q?24TVR0Yd+iEJZIuSyWKZF6Qtg5TGxupS00yaUGtIalcCQWzJkr3QPTZvKZf4SS?=
 =?us-ascii?q?/x7uV/qdLS15iX9nYL6ygxi//VK9xuD+TMW4zlhHoytfntTCqnwA0QHY5NKdRf?=
 =?us-ascii?q?tn5Eih3C6C1wDN5eFAJkA5jbTbK5E/zb4qjJYTslrMHjXwmEroiK+abEIk+vKn?=
 =?us-ascii?q?6+j/Y7XmoIGTN5Nshw3gLqgjntazDfk2PwQQRWSX5Oex2KH58UD4QrhGlvg2nb?=
 =?us-ascii?q?PYsJDeK8QbvKm5AwpN34Yn6ha/CSqm0dsBkXkEMl1FYhSHgJbtO13XJ/D5A/G/?=
 =?us-ascii?q?jEq2kDpw2fDGMaPuAo/XInjAjrjhZ7B95FBYyAYpytBf/Z1UBqkbIP3vQk/xqM?=
 =?us-ascii?q?DYDhghPgywwubnC8ty2pkRWGKSGaKZNKLSsVmV5uMgOeWMZYkVuCrjJPgh/fLh?=
 =?us-ascii?q?kXg5mVoFd6mzwZQXcGy4HuhhI0iBYXrjmNYBEXsQsQo5VuDqiECCXiRVZ3a9RK?=
 =?us-ascii?q?884jA7CIS7DYbMXIytgbqB3DulEZ1SfGxJFleMEXLwfYWeR/gMcD6SItNmkjEc?=
 =?us-ascii?q?V7ihTJEu2QuttA/9zbpnKO3U9zYctZLi0th1+uLSmQsz9TxyE8SSzWWNQ3tokW?=
 =?us-ascii?q?MPQj88xLp/rlBlylefzah4hORVGsZI5/NJVQc6NoTQz/ZgBNDwQQ/BetaJSFC7?=
 =?us-ascii?q?QtSpGz0xT9Qxw8MQbEZ5AdmtkhfD3y+yCb8Pi7OLHIA08r7b33XpJMZy0XDG2L?=
 =?us-ascii?q?Mlj1knWMRPM2Kmi7V79wjSAY7JjkqYm7yrdaQawC7C6mODwXCSs0FfVQ56Sb/F?=
 =?us-ascii?q?UmwHZkvKsdT54VvPQKK0BrQ5LARN086CJbFMat3yk1pGQvDvONDdY2K0n2e9Hh?=
 =?us-ascii?q?KIxrKKbIr3dGQRxiTdCE4Ykw8N+XaKLxQxBiCko2jGFjxhCUrvY1/w8el5sH60?=
 =?us-ascii?q?U1U7zx+UYEF717q64BgVheeCRPMVxb8EvCYhqzNpHFeyxd7WCtyApxZ/c6VYe9?=
 =?us-ascii?q?8y/FBH1WfBvQxnIpOgN7xihkIZcwlvo0Pu1hB3CoJckcgqrHIm1hZyJbif0FNb?=
 =?us-ascii?q?czOY3JbwOrLMJ2n2/RCvbbPW217E3NaX/KcP9Oo3q1H5sA61EUoi9m1t08NJ3H?=
 =?us-ascii?q?uE+pXKEA0SXIrrXUYz6Rd7qK/VYykn64zPyH1jLLO7sjnB29IuGuso0RKgf9ZZ?=
 =?us-ascii?q?MKOZGw7+CcwaB86yKOM0n1ildA4LPOdX9KQsJcOpa+OG2LK3POZnhD+njXlH7J?=
 =?us-ascii?q?ph3U6W9it8SvTH35AKw/yD2guHVjH8jEqus8ztmIBEYy0SEXS7yST+GIFRYahy?=
 =?us-ascii?q?d54RCWiyO8232sl+h5n1Vn5C9V6sG0kJ2NW0dhqVdVD92xNf1V4WoXC+hSS31T?=
 =?us-ascii?q?h0nCw3oaqF2yzOxf/vdB4GOm5NWWljgk3gIYmyj9AGQkeoaxIlmwei5Ub/36Jb?=
 =?us-ascii?q?vrhwL3HPQUdUeCj7N2FjUqqquruCecJP844osSNMXeS4YFCaTKP9ohQA3yPiGW?=
 =?us-ascii?q?te2C40dzWwtprlmBx6jXqXLGxvo3rBZcFw2RDf6cTeRfFLxDoGRyp4iT7NClin?=
 =?us-ascii?q?Jdap/taUl5bFsu+gUWKsTZlTcSjtzYOduyq3/2xqARujn/+tnt3rCxQ10Sj+19?=
 =?us-ascii?q?NyTyXHsA78YpX316S9Ke9mflNnBFjm58p4G4F+lJA9hJUR2Xgcm5WU8mALkWb1?=
 =?us-ascii?q?MdVHx63+aGABSiIMw97Q+ALlwlFsLmqVx4LlUXWQ2shhaMO7Ym8M2iI98tpFCK?=
 =?us-ascii?q?Gb7LFfmSt1o1y4rR/eYPRnnzcdz+cu52Aeg+0TpAUtySCdCKgIHUZEJSzsiwiI?=
 =?us-ascii?q?79emoaVSZWavcqK/2FBwnN+/F7GCvh9TWGzidZg8By9w4d5yMFbN0H3194Hld8?=
 =?us-ascii?q?PcbdMVth2IjRjAi/JZJ442lvoPnSBnI37yvWU5y+4nihxjxY26vI+CK2l3/aO2?=
 =?us-ascii?q?GBhYNiDuZ8MI+zHglqJenseQ34CyEZRtADQLXJ30Tf22FDIer+joNwGLEDcksH?=
 =?us-ascii?q?eUBaLfHROD6Edht3/ACIqkN3aTJHkE19liQASdKVdbgAAVWjU6g5E4GhqrxMzn?=
 =?us-ascii?q?bEd2+DQR6kTkpRtLz+JiLwP/XXvHpAe0djc0T4CSLBhM4QFH+UjVKtaS7v5pEy?=
 =?us-ascii?q?Fb452hrxGNKmqBaARTFmwJXk2EB1b+Prih/9XA8u6YBvagIPvKe7mBteteV/KQ?=
 =?us-ascii?q?z5K1zoRm5yqMNtmIPnR6D/w73VdDXWlkG8vDnTUDUTcXlyXLb86Uvxq8/ix3rs?=
 =?us-ascii?q?ai8PXkQg7v5I2PC6dMPtVr4Ry5naCDN+uIjiZjNTlYzo8MxWPPyLUH3F4dlSBu?=
 =?us-ascii?q?dzquEbQBryLNT7jQmqhYDxEFcSNzKdBI4rk43glMP87bl9z02qR5jv4zF1dKS1?=
 =?us-ascii?q?jhltu1aswNJmG3LEnHC1qTNLSaOT3LxNn6brmhSbJLluVbqR2xtSyfE0/iJTmD?=
 =?us-ascii?q?kzjpVxayMeBDli2bPRpeuJ2jfRZpE2TsUNXmahijOt9tkTI22aE0hm/NNWMELT?=
 =?us-ascii?q?h8ckZNoqeM4i9Cnvp/G3JO7nx+IOmAmiaZ6fTYK5kMvftqBCR0i/xV4HAgx7RJ?=
 =?us-ascii?q?6yFEQeR/mDHOod52v1Gmju6PxyJnURVUrDZLgYOLvUN6NqTY9plPQ3DE/B0W4G?=
 =?us-ascii?q?WUChQKocZlC9L1t6BRzNjPiLz8KDNY/93I+sscApucFMXSGncnMxPsGTicLAYf?=
 =?us-ascii?q?VzOtLmrfgk1RjLnG/HCTrrA5p4LqlZ5IQaVST1w0EPxcDV5qSphKGJ5qWnsBmL?=
 =?us-ascii?q?WYgdQS7GH2+AHYWcFHpbjcX/eYCLPoMjnPyfFhZhAIyL78ZakXMoDh3kVkIg1/?=
 =?us-ascii?q?hIniFk7UUMpIqysnbwNyqVgbo1ZkSWhm8EL/axix52cTGLaQsyQRu0MqauQ39S?=
 =?us-ascii?q?zw5E83KxzOqTE3gWE63M6jjyrHI225F7u5QYwDU3m8jEM2KJ6uBl8tNQA=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A6AAAT1/9bh0O0hNFlHQEBBQEHBQGBU?=
 =?us-ascii?q?wYBCwGDayeDeYh3iymBYC0Uly4UgWIpEwGBS4YoIjYHDQEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BCA0JCCkvgjYkAYJiAQICAQECIA8BBUEFAQkBAQoODAImAgIDHDgGAQwGAgEBA?=
 =?us-ascii?q?YMcgXoIBAGmH4Evii2BC4sLgVc/gREngmuEaYMcglcCiSiWewcCHHCBFYgKhwE?=
 =?us-ascii?q?ekRyIeIhwiAonAYIFdIM4giYBF44ePgEBMQGBBAEBjTgBAQ?=
X-IPAS-Result: =?us-ascii?q?A0A6AAAT1/9bh0O0hNFlHQEBBQEHBQGBUwYBCwGDayeDeYh?=
 =?us-ascii?q?3iymBYC0Uly4UgWIpEwGBS4YoIjYHDQEDAQEBAQEBAgETAQEBCA0JCCkvgjYkA?=
 =?us-ascii?q?YJiAQICAQECIA8BBUEFAQkBAQoODAImAgIDHDgGAQwGAgEBAYMcgXoIBAGmH4E?=
 =?us-ascii?q?vii2BC4sLgVc/gREngmuEaYMcglcCiSiWewcCHHCBFYgKhwEekRyIeIhwiAonA?=
 =?us-ascii?q?YIFdIM4giYBF44ePgEBMQGBBAEBjTgBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,294,1539673200"; 
   d="scan'208";a="42056117"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 04:13:58 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728208AbeK2XTE (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 29 Nov 2018 18:19:04 -0500
Received: from pegase1.c-s.fr ([93.17.236.30]:33496 "EHLO pegase1.c-s.fr"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726949AbeK2XTE (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 29 Nov 2018 18:19:04 -0500
Received: from localhost (mailhub1-int [192.168.12.234])
        by localhost (Postfix) with ESMTP id 435Gdq5N2bz9vGxw;
        Thu, 29 Nov 2018 13:13:51 +0100 (CET)
X-Virus-Scanned: Debian amavisd-new at c-s.fr
Received: from pegase1.c-s.fr ([192.168.12.234])
        by localhost (pegase1.c-s.fr [192.168.12.234]) (amavisd-new, port 10024)
        with ESMTP id giIkI2mDZBGc; Thu, 29 Nov 2018 13:13:51 +0100 (CET)
Received: from messagerie.si.c-s.fr (messagerie.si.c-s.fr [192.168.25.192])
        by pegase1.c-s.fr (Postfix) with ESMTP id 435Gdq4XRSz9vGxv;
        Thu, 29 Nov 2018 13:13:51 +0100 (CET)
Received: from localhost (localhost [127.0.0.1])
        by messagerie.si.c-s.fr (Postfix) with ESMTP id 599638B89B;
        Thu, 29 Nov 2018 13:13:52 +0100 (CET)
X-Virus-Scanned: amavisd-new at c-s.fr
Received: from messagerie.si.c-s.fr ([127.0.0.1])
        by localhost (messagerie.si.c-s.fr [127.0.0.1]) (amavisd-new, port 10023)
        with ESMTP id uf5I-XjPAPlH; Thu, 29 Nov 2018 13:13:52 +0100 (CET)
Received: from PO15451 (unknown [192.168.232.3])
        by messagerie.si.c-s.fr (Postfix) with ESMTP id 6BFD38B899;
        Thu, 29 Nov 2018 13:13:51 +0100 (CET)
Subject: Re: [PATCH v3] powerpc/mm: add exec protection on powerpc 603
From: Christophe LEROY <christophe.leroy@c-s.fr>
To: Benjamin Herrenschmidt <benh@kernel.crashing.org>,
        Paul Mackerras <paulus@samba.org>,
        Michael Ellerman <mpe@ellerman.id.au>
Cc: linuxppc-dev@lists.ozlabs.org, linux-kernel@vger.kernel.org,
        "Aneesh Kumar K.V" <aneesh.kumar@linux.ibm.com>
References: <62fcfb8435c2f801d820eff469fd01e68c1b107d.1543425412.git.christophe.leroy@c-s.fr>
Message-ID: <83dcb200-94f3-f211-685a-28f53d468bfe@c-s.fr>
Date: Thu, 29 Nov 2018 13:13:51 +0100
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:60.0) Gecko/20100101
 Thunderbird/60.3.1
MIME-Version: 1.0
In-Reply-To: <62fcfb8435c2f801d820eff469fd01e68c1b107d.1543425412.git.christophe.leroy@c-s.fr>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Language: fr
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org



Le 28/11/2018 à 18:21, Christophe Leroy a écrit :
> The 603 doesn't have a HASH table, TLB misses are handled by
> software. It is then possible to generate page fault when
> _PAGE_EXEC is not set like in nohash/32.
> 
> There is one "reserved" PTE bit available, this patch uses
> it for _PAGE_EXEC.
> 
> In order to support it, set_pte_filter() and
> set_access_flags_filter() are made common, and the handling
> is made dependent on MMU_FTR_HPTE_TABLE
> 
> Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>

Reviewed-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>

> ---
>   v3: Included the _PAGE_EXEC flag in the existing test in TLB handler, no additional insns.
> 
>   v2: Amended commit log and removed #ifdef in pagetable dump
> 
>   arch/powerpc/include/asm/book3s/32/hash.h      |  1 +
>   arch/powerpc/include/asm/book3s/32/pgtable.h   | 18 +++++++++---------
>   arch/powerpc/include/asm/cputable.h            |  8 ++++----
>   arch/powerpc/kernel/head_32.S                  |  2 +-
>   arch/powerpc/mm/dump_linuxpagetables-generic.c |  2 --
>   arch/powerpc/mm/pgtable.c                      | 20 +++++++++++---------
>   6 files changed, 26 insertions(+), 25 deletions(-)
> 
> diff --git a/arch/powerpc/include/asm/book3s/32/hash.h b/arch/powerpc/include/asm/book3s/32/hash.h
> index f2892c7ab73e..2a0a467d2985 100644
> --- a/arch/powerpc/include/asm/book3s/32/hash.h
> +++ b/arch/powerpc/include/asm/book3s/32/hash.h
> @@ -26,6 +26,7 @@
>   #define _PAGE_WRITETHRU	0x040	/* W: cache write-through */
>   #define _PAGE_DIRTY	0x080	/* C: page changed */
>   #define _PAGE_ACCESSED	0x100	/* R: page referenced */
> +#define _PAGE_EXEC	0x200	/* software: exec allowed */
>   #define _PAGE_RW	0x400	/* software: user write access allowed */
>   #define _PAGE_SPECIAL	0x800	/* software: Special page */
>   
> diff --git a/arch/powerpc/include/asm/book3s/32/pgtable.h b/arch/powerpc/include/asm/book3s/32/pgtable.h
> index b849b45429d5..6accf3e686af 100644
> --- a/arch/powerpc/include/asm/book3s/32/pgtable.h
> +++ b/arch/powerpc/include/asm/book3s/32/pgtable.h
> @@ -10,9 +10,9 @@
>   /* And here we include common definitions */
>   
>   #define _PAGE_KERNEL_RO		0
> -#define _PAGE_KERNEL_ROX	0
> +#define _PAGE_KERNEL_ROX	(_PAGE_EXEC)
>   #define _PAGE_KERNEL_RW		(_PAGE_DIRTY | _PAGE_RW)
> -#define _PAGE_KERNEL_RWX	(_PAGE_DIRTY | _PAGE_RW)
> +#define _PAGE_KERNEL_RWX	(_PAGE_DIRTY | _PAGE_RW | _PAGE_EXEC)
>   
>   #define _PAGE_HPTEFLAGS _PAGE_HASHPTE
>   
> @@ -66,11 +66,11 @@ static inline bool pte_user(pte_t pte)
>    */
>   #define PAGE_NONE	__pgprot(_PAGE_BASE)
>   #define PAGE_SHARED	__pgprot(_PAGE_BASE | _PAGE_USER | _PAGE_RW)
> -#define PAGE_SHARED_X	__pgprot(_PAGE_BASE | _PAGE_USER | _PAGE_RW)
> +#define PAGE_SHARED_X	__pgprot(_PAGE_BASE | _PAGE_USER | _PAGE_RW | _PAGE_EXEC)
>   #define PAGE_COPY	__pgprot(_PAGE_BASE | _PAGE_USER)
> -#define PAGE_COPY_X	__pgprot(_PAGE_BASE | _PAGE_USER)
> +#define PAGE_COPY_X	__pgprot(_PAGE_BASE | _PAGE_USER | _PAGE_EXEC)
>   #define PAGE_READONLY	__pgprot(_PAGE_BASE | _PAGE_USER)
> -#define PAGE_READONLY_X	__pgprot(_PAGE_BASE | _PAGE_USER)
> +#define PAGE_READONLY_X	__pgprot(_PAGE_BASE | _PAGE_USER | _PAGE_EXEC)
>   
>   /* Permission masks used for kernel mappings */
>   #define PAGE_KERNEL	__pgprot(_PAGE_BASE | _PAGE_KERNEL_RW)
> @@ -318,7 +318,7 @@ static inline void __ptep_set_access_flags(struct vm_area_struct *vma,
>   					   int psize)
>   {
>   	unsigned long set = pte_val(entry) &
> -		(_PAGE_DIRTY | _PAGE_ACCESSED | _PAGE_RW);
> +		(_PAGE_DIRTY | _PAGE_ACCESSED | _PAGE_RW | _PAGE_EXEC);
>   
>   	pte_update(ptep, 0, set);
>   
> @@ -384,7 +384,7 @@ static inline int pte_dirty(pte_t pte)		{ return !!(pte_val(pte) & _PAGE_DIRTY);
>   static inline int pte_young(pte_t pte)		{ return !!(pte_val(pte) & _PAGE_ACCESSED); }
>   static inline int pte_special(pte_t pte)	{ return !!(pte_val(pte) & _PAGE_SPECIAL); }
>   static inline int pte_none(pte_t pte)		{ return (pte_val(pte) & ~_PTE_NONE_MASK) == 0; }
> -static inline bool pte_exec(pte_t pte)		{ return true; }
> +static inline bool pte_exec(pte_t pte)		{ return pte_val(pte) & _PAGE_EXEC; }
>   
>   static inline int pte_present(pte_t pte)
>   {
> @@ -451,7 +451,7 @@ static inline pte_t pte_wrprotect(pte_t pte)
>   
>   static inline pte_t pte_exprotect(pte_t pte)
>   {
> -	return pte;
> +	return __pte(pte_val(pte) & ~_PAGE_EXEC);
>   }
>   
>   static inline pte_t pte_mkclean(pte_t pte)
> @@ -466,7 +466,7 @@ static inline pte_t pte_mkold(pte_t pte)
>   
>   static inline pte_t pte_mkexec(pte_t pte)
>   {
> -	return pte;
> +	return __pte(pte_val(pte) | _PAGE_EXEC);
>   }
>   
>   static inline pte_t pte_mkpte(pte_t pte)
> diff --git a/arch/powerpc/include/asm/cputable.h b/arch/powerpc/include/asm/cputable.h
> index 29f49a35d6ee..a0395ccbbe9e 100644
> --- a/arch/powerpc/include/asm/cputable.h
> +++ b/arch/powerpc/include/asm/cputable.h
> @@ -296,7 +296,7 @@ static inline void cpu_feature_keys_init(void) { }
>   #define CPU_FTRS_PPC601	(CPU_FTR_COMMON | CPU_FTR_601 | \
>   	CPU_FTR_COHERENT_ICACHE | CPU_FTR_UNIFIED_ID_CACHE | CPU_FTR_USE_RTC)
>   #define CPU_FTRS_603	(CPU_FTR_COMMON | CPU_FTR_MAYBE_CAN_DOZE | \
> -	    CPU_FTR_MAYBE_CAN_NAP | CPU_FTR_PPC_LE)
> +	    CPU_FTR_MAYBE_CAN_NAP | CPU_FTR_PPC_LE | CPU_FTR_NOEXECUTE)
>   #define CPU_FTRS_604	(CPU_FTR_COMMON | CPU_FTR_PPC_LE)
>   #define CPU_FTRS_740_NOTAU	(CPU_FTR_COMMON | \
>   	    CPU_FTR_MAYBE_CAN_DOZE | CPU_FTR_L2CR | \
> @@ -367,15 +367,15 @@ static inline void cpu_feature_keys_init(void) { }
>   	    CPU_FTR_MAYBE_CAN_NAP | CPU_FTR_L2CR | CPU_FTR_ALTIVEC_COMP | \
>   	    CPU_FTR_SPEC7450 | CPU_FTR_NAP_DISABLE_L2_PR | \
>   	    CPU_FTR_PPC_LE | CPU_FTR_NEED_PAIRED_STWCX)
> -#define CPU_FTRS_82XX	(CPU_FTR_COMMON | CPU_FTR_MAYBE_CAN_DOZE)
> +#define CPU_FTRS_82XX	(CPU_FTR_COMMON | CPU_FTR_MAYBE_CAN_DOZE | CPU_FTR_NOEXECUTE)
>   #define CPU_FTRS_G2_LE	(CPU_FTR_COMMON | CPU_FTR_MAYBE_CAN_DOZE | \
>   	    CPU_FTR_MAYBE_CAN_NAP)
>   #define CPU_FTRS_E300	(CPU_FTR_MAYBE_CAN_DOZE | \
>   	    CPU_FTR_MAYBE_CAN_NAP | \
> -	    CPU_FTR_COMMON)
> +	    CPU_FTR_COMMON  | CPU_FTR_NOEXECUTE)
>   #define CPU_FTRS_E300C2	(CPU_FTR_MAYBE_CAN_DOZE | \
>   	    CPU_FTR_MAYBE_CAN_NAP | \
> -	    CPU_FTR_COMMON | CPU_FTR_FPU_UNAVAILABLE)
> +	    CPU_FTR_COMMON | CPU_FTR_FPU_UNAVAILABLE  | CPU_FTR_NOEXECUTE)
>   #define CPU_FTRS_CLASSIC32	(CPU_FTR_COMMON)
>   #define CPU_FTRS_8XX	(CPU_FTR_NOEXECUTE)
>   #define CPU_FTRS_40X	(CPU_FTR_NODSISRALIGN | CPU_FTR_NOEXECUTE)
> diff --git a/arch/powerpc/kernel/head_32.S b/arch/powerpc/kernel/head_32.S
> index 118c3b216e60..479017f6a992 100644
> --- a/arch/powerpc/kernel/head_32.S
> +++ b/arch/powerpc/kernel/head_32.S
> @@ -499,7 +499,7 @@ InstructionTLBMiss:
>   	lis	r1,PAGE_OFFSET@h		/* check if kernel address */
>   	cmplw	0,r1,r3
>   	mfspr	r2,SPRN_SPRG_THREAD
> -	li	r1,_PAGE_USER|_PAGE_PRESENT /* low addresses tested as user */
> +	li	r1,_PAGE_USER|_PAGE_PRESENT|_PAGE_EXEC /* low addresses tested as user */
>   	lwz	r2,PGDIR(r2)
>   	bge-	112f
>   	mfspr	r2,SPRN_SRR1		/* and MSR_PR bit from SRR1 */
> diff --git a/arch/powerpc/mm/dump_linuxpagetables-generic.c b/arch/powerpc/mm/dump_linuxpagetables-generic.c
> index 1e3829ec1348..3fe98a0974c6 100644
> --- a/arch/powerpc/mm/dump_linuxpagetables-generic.c
> +++ b/arch/powerpc/mm/dump_linuxpagetables-generic.c
> @@ -21,13 +21,11 @@ static const struct flag_info flag_array[] = {
>   		.set	= "rw",
>   		.clear	= "r ",
>   	}, {
> -#ifndef CONFIG_PPC_BOOK3S_32
>   		.mask	= _PAGE_EXEC,
>   		.val	= _PAGE_EXEC,
>   		.set	= " X ",
>   		.clear	= "   ",
>   	}, {
> -#endif
>   		.mask	= _PAGE_PRESENT,
>   		.val	= _PAGE_PRESENT,
>   		.set	= "present",
> diff --git a/arch/powerpc/mm/pgtable.c b/arch/powerpc/mm/pgtable.c
> index 1e33dccbd176..d3d61d29b4f1 100644
> --- a/arch/powerpc/mm/pgtable.c
> +++ b/arch/powerpc/mm/pgtable.c
> @@ -74,7 +74,7 @@ static struct page *maybe_pte_to_page(pte_t pte)
>    * support falls into the same category.
>    */
>   
> -static pte_t set_pte_filter(pte_t pte)
> +static pte_t set_pte_filter_hash(pte_t pte)
>   {
>   	if (radix_enabled())
>   		return pte;
> @@ -93,14 +93,12 @@ static pte_t set_pte_filter(pte_t pte)
>   	return pte;
>   }
>   
> -static pte_t set_access_flags_filter(pte_t pte, struct vm_area_struct *vma,
> -				     int dirty)
> -{
> -	return pte;
> -}
> -
>   #else /* CONFIG_PPC_BOOK3S */
>   
> +static pte_t set_pte_filter_hash(pte_t pte) { return pte; }
> +
> +#endif /* CONFIG_PPC_BOOK3S */
> +
>   /* Embedded type MMU with HW exec support. This is a bit more complicated
>    * as we don't have two bits to spare for _PAGE_EXEC and _PAGE_HWEXEC so
>    * instead we "filter out" the exec permission for non clean pages.
> @@ -109,6 +107,9 @@ static pte_t set_pte_filter(pte_t pte)
>   {
>   	struct page *pg;
>   
> +	if (mmu_has_feature(MMU_FTR_HPTE_TABLE))
> +		return set_pte_filter_hash(pte);
> +
>   	/* No exec permission in the first place, move on */
>   	if (!pte_exec(pte) || !pte_looks_normal(pte))
>   		return pte;
> @@ -138,6 +139,9 @@ static pte_t set_access_flags_filter(pte_t pte, struct vm_area_struct *vma,
>   {
>   	struct page *pg;
>   
> +	if (mmu_has_feature(MMU_FTR_HPTE_TABLE))
> +		return pte;
> +
>   	/* So here, we only care about exec faults, as we use them
>   	 * to recover lost _PAGE_EXEC and perform I$/D$ coherency
>   	 * if necessary. Also if _PAGE_EXEC is already set, same deal,
> @@ -172,8 +176,6 @@ static pte_t set_access_flags_filter(pte_t pte, struct vm_area_struct *vma,
>   	return pte_mkexec(pte);
>   }
>   
> -#endif /* CONFIG_PPC_BOOK3S */
> -
>   /*
>    * set_pte stores a linux PTE into the linux page table.
>    */
> 
