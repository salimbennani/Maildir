Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 08:47:31 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id CED1D580213
	for <like.xu@linux.intel.com>; Thu, 29 Nov 2018 08:00:40 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 08:00:40 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AOIJVnBZTaY7XIIoIhkmzk37/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZrsWybnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJSSJBDIOy?=
 =?us-ascii?q?b4wMAeQPM+lXoIvyqEcBoxWjHQmhBuHhxzBVinL4waE1zf8hHBra3AEiBd8CrG?=
 =?us-ascii?q?jYodv3OaoUTOu7zLPIzTLGb/5O1zny8pbIchE8rvqRX7xwcM7RxlQxGAPDlVqQ?=
 =?us-ascii?q?s5bqPzWI2e8QtGWU8vBvVfyui2E6sAxxuCagydosiobTmoIZ0EzL9SJ8wIssI9?=
 =?us-ascii?q?CzVU11Yca8HZdOqy2XNJF6Tt4/T2xroio21LMLtJ6hcCQXypkr3wDTZ+CDfoSS?=
 =?us-ascii?q?/x7uWvidLS1liH9mdr+znQi+/Eumx+bhTMe7ykxKoTBAktTUtnACyRjT6s+fR/?=
 =?us-ascii?q?t5/0ehwiqP1xvJ5uFLJ0A0iLDXK5k7wr4/jpYTsELDETHqmEjukqOaakYp9vK1?=
 =?us-ascii?q?5+j6YbjqvIGQOoF0hw3kL6gjmNSzAeEiPQgPW2ib9/681Lrm/UDhWbVFkPg2kr?=
 =?us-ascii?q?TAvJ/HO8sbuLC2AwtM3ok47Ba/EjGm38gGknkcK15FfBOHj4v3NF3UL/H4EO+y?=
 =?us-ascii?q?g1CtkDdt2vDHMaftApTLLnjfjrjheaxx5FJbyAo21t1f4ZVUCrcOIPL1R0/9rt?=
 =?us-ascii?q?vYDgU2MwCs2eboFM191p8CWWKIGqKZNKLSsVyW6e41LOiMeZQYuDL8K/gj+v7v?=
 =?us-ascii?q?gmU1mV4bfam1w5QXbGq0EehhI0WcMjLRhMwcGzIKohYmV76tz1mDSiJIIXC1Wa?=
 =?us-ascii?q?06+3c8Eo3hCI7CQoWkhvuGxDu6GZtNIXlLD03JHXr2eoHXZvEXdSjHJ8ZgliAD?=
 =?us-ascii?q?B6GsTpJk2RywuQu/0bd+M+fP5gUespTs0sUz4Pfcwgov/z55BNjIzmeWUmtvlX?=
 =?us-ascii?q?kJTTJl4KcqnUx6z16YmYhln/wQQcBT+u9Jeh03OZ7V06pxDNWkHkrYc9KUDVqr?=
 =?us-ascii?q?XNiiKTc2SN033pkJeUkuNc+li0Xv1jSrD/c1lriHCZo+6Kva0zClK89jynruzq?=
 =?us-ascii?q?Qtj1A6BMBIMDv11eZE6wHPCtuRwA2inKGwePFZhXaV+Q=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AGAADwCwBchxHrdtBkGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUQYBAQELAYEwgk8Tg3mIGF+LKYFgLZdEFIFiERgUh3QiNAkNAQMBAQE?=
 =?us-ascii?q?BAQECARMBAQEKCwkIGw4vgjYFAgMaAQaCWwEBAQECAQECIAQfCikDAwECBgEBC?=
 =?us-ascii?q?g4CCAICIgQCAgMBUwYBDAYCAQEBgxyBeggBBKYzfDOKKoELiwsXgX+BESeCa4Q?=
 =?us-ascii?q?9LIMcglcCiQchhX5EhWCKWQmCIY8LBhhfiHkQhzSIeI9WgUaCDXAVgyeCJxcSj?=
 =?us-ascii?q?gxAMYEHHIpRKiyBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0AGAADwCwBchxHrdtBkGwEBAQEDAQEBBwMBAQGBUQYBAQE?=
 =?us-ascii?q?LAYEwgk8Tg3mIGF+LKYFgLZdEFIFiERgUh3QiNAkNAQMBAQEBAQECARMBAQEKC?=
 =?us-ascii?q?wkIGw4vgjYFAgMaAQaCWwEBAQECAQECIAQfCikDAwECBgEBCg4CCAICIgQCAgM?=
 =?us-ascii?q?BUwYBDAYCAQEBgxyBeggBBKYzfDOKKoELiwsXgX+BESeCa4Q9LIMcglcCiQchh?=
 =?us-ascii?q?X5EhWCKWQmCIY8LBhhfiHkQhzSIeI9WgUaCDXAVgyeCJxcSjgxAMYEHHIpRKiy?=
 =?us-ascii?q?BdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,295,1539673200"; 
   d="scan'208";a="54247207"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 29 Nov 2018 08:00:39 -0800
Received: from localhost ([::1]:54987 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gSOk3-0006ZE-6L
	for like.xu@linux.intel.com; Thu, 29 Nov 2018 11:00:39 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:53933)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <david@redhat.com>) id 1gSOjj-0006Wj-Or
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 11:00:26 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <david@redhat.com>) id 1gSOjb-0006HR-HU
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 11:00:19 -0500
Received: from mx1.redhat.com ([209.132.183.28]:51012)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <david@redhat.com>)
	id 1gSOjb-0006Fb-8T; Thu, 29 Nov 2018 11:00:11 -0500
Received: from smtp.corp.redhat.com (int-mx01.intmail.prod.int.phx2.redhat.com
	[10.5.11.11])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 60F9DC05090A;
	Thu, 29 Nov 2018 16:00:09 +0000 (UTC)
Received: from [10.36.118.89] (unknown [10.36.118.89])
	by smtp.corp.redhat.com (Postfix) with ESMTP id 7D7B85C7B3;
	Thu, 29 Nov 2018 16:00:07 +0000 (UTC)
To: Thomas Huth <thuth@redhat.com>, qemu-devel@nongnu.org
References: <20181128095939.5684-1-david@redhat.com>
	<e036b52f-abe7-4b13-1c5f-d084a8b7a491@redhat.com>
From: David Hildenbrand <david@redhat.com>
Openpgp: preference=signencrypt
Autocrypt: addr=david@redhat.com; prefer-encrypt=mutual; keydata=
	xsFNBFXLn5EBEAC+zYvAFJxCBY9Tr1xZgcESmxVNI/0ffzE/ZQOiHJl6mGkmA1R7/uUpiCjJ
	dBrn+lhhOYjjNefFQou6478faXE6o2AhmebqT4KiQoUQFV4R7y1KMEKoSyy8hQaK1umALTdL
	QZLQMzNE74ap+GDK0wnacPQFpcG1AE9RMq3aeErY5tujekBS32jfC/7AnH7I0v1v1TbbK3Gp
	XNeiN4QroO+5qaSr0ID2sz5jtBLRb15RMre27E1ImpaIv2Jw8NJgW0k/D1RyKCwaTsgRdwuK
	Kx/Y91XuSBdz0uOyU/S8kM1+ag0wvsGlpBVxRR/xw/E8M7TEwuCZQArqqTCmkG6HGcXFT0V9
	PXFNNgV5jXMQRwU0O/ztJIQqsE5LsUomE//bLwzj9IVsaQpKDqW6TAPjcdBDPLHvriq7kGjt
	WhVhdl0qEYB8lkBEU7V2Yb+SYhmhpDrti9Fq1EsmhiHSkxJcGREoMK/63r9WLZYI3+4W2rAc
	UucZa4OT27U5ZISjNg3Ev0rxU5UH2/pT4wJCfxwocmqaRr6UYmrtZmND89X0KigoFD/XSeVv
	jwBRNjPAubK9/k5NoRrYqztM9W6sJqrH8+UWZ1Idd/DdmogJh0gNC0+N42Za9yBRURfIdKSb
	B3JfpUqcWwE7vUaYrHG1nw54pLUoPG6sAA7Mehl3nd4pZUALHwARAQABzSREYXZpZCBIaWxk
	ZW5icmFuZCA8ZGF2aWRAcmVkaGF0LmNvbT7CwX4EEwECACgFAljj9eoCGwMFCQlmAYAGCwkI
	BwMCBhUIAgkKCwQWAgMBAh4BAheAAAoJEE3eEPcA/4Na5IIP/3T/FIQMxIfNzZshIq687qgG
	8UbspuE/YSUDdv7r5szYTK6KPTlqN8NAcSfheywbuYD9A4ZeSBWD3/NAVUdrCaRP2IvFyELj
	xoMvfJccbq45BxzgEspg/bVahNbyuBpLBVjVWwRtFCUEXkyazksSv8pdTMAs9IucChvFmmq3
	jJ2vlaz9lYt/lxN246fIVceckPMiUveimngvXZw21VOAhfQ+/sofXF8JCFv2mFcBDoa7eYob
	s0FLpmqFaeNRHAlzMWgSsP80qx5nWWEvRLdKWi533N2vC/EyunN3HcBwVrXH4hxRBMco3jvM
	m8VKLKao9wKj82qSivUnkPIwsAGNPdFoPbgghCQiBjBe6A75Z2xHFrzo7t1jg7nQfIyNC7ez
	MZBJ59sqA9EDMEJPlLNIeJmqslXPjmMFnE7Mby/+335WJYDulsRybN+W5rLT5aMvhC6x6POK
	z55fMNKrMASCzBJum2Fwjf/VnuGRYkhKCqqZ8gJ3OvmR50tInDV2jZ1DQgc3i550T5JDpToh
	dPBxZocIhzg+MBSRDXcJmHOx/7nQm3iQ6iLuwmXsRC6f5FbFefk9EjuTKcLMvBsEx+2DEx0E
	UnmJ4hVg7u1PQ+2Oy+Lh/opK/BDiqlQ8Pz2jiXv5xkECvr/3Sv59hlOCZMOaiLTTjtOIU7Tq
	7ut6OL64oAq+zsFNBFXLn5EBEADn1959INH2cwYJv0tsxf5MUCghCj/CA/lc/LMthqQ773ga
	uB9mN+F1rE9cyyXb6jyOGn+GUjMbnq1o121Vm0+neKHUCBtHyseBfDXHA6m4B3mUTWo13nid
	0e4AM71r0DS8+KYh6zvweLX/LL5kQS9GQeT+QNroXcC1NzWbitts6TZ+IrPOwT1hfB4WNC+X
	2n4AzDqp3+ILiVST2DT4VBc11Gz6jijpC/KI5Al8ZDhRwG47LUiuQmt3yqrmN63V9wzaPhC+
	xbwIsNZlLUvuRnmBPkTJwwrFRZvwu5GPHNndBjVpAfaSTOfppyKBTccu2AXJXWAE1Xjh6GOC
	8mlFjZwLxWFqdPHR1n2aPVgoiTLk34LR/bXO+e0GpzFXT7enwyvFFFyAS0Nk1q/7EChPcbRb
	hJqEBpRNZemxmg55zC3GLvgLKd5A09MOM2BrMea+l0FUR+PuTenh2YmnmLRTro6eZ/qYwWkC
	u8FFIw4pT0OUDMyLgi+GI1aMpVogTZJ70FgV0pUAlpmrzk/bLbRkF3TwgucpyPtcpmQtTkWS
	gDS50QG9DR/1As3LLLcNkwJBZzBG6PWbvcOyrwMQUF1nl4SSPV0LLH63+BrrHasfJzxKXzqg
	rW28CTAE2x8qi7e/6M/+XXhrsMYG+uaViM7n2je3qKe7ofum3s4vq7oFCPsOgwARAQABwsFl
	BBgBAgAPBQJVy5+RAhsMBQkJZgGAAAoJEE3eEPcA/4NagOsP/jPoIBb/iXVbM+fmSHOjEshl
	KMwEl/m5iLj3iHnHPVLBUWrXPdS7iQijJA/VLxjnFknhaS60hkUNWexDMxVVP/6lbOrs4bDZ
	NEWDMktAeqJaFtxackPszlcpRVkAs6Msn9tu8hlvB517pyUgvuD7ZS9gGOMmYwFQDyytpepo
	YApVV00P0u3AaE0Cj/o71STqGJKZxcVhPaZ+LR+UCBZOyKfEyq+ZN311VpOJZ1IvTExf+S/5
	lqnciDtbO3I4Wq0ArLX1gs1q1XlXLaVaA3yVqeC8E7kOchDNinD3hJS4OX0e1gdsx/e6COvy
	qNg5aL5n0Kl4fcVqM0LdIhsubVs4eiNCa5XMSYpXmVi3HAuFyg9dN+x8thSwI836FoMASwOl
	C7tHsTjnSGufB+D7F7ZBT61BffNBBIm1KdMxcxqLUVXpBQHHlGkbwI+3Ye+nE6HmZH7IwLwV
	W+Ajl7oYF+jeKaH4DZFtgLYGLtZ1LDwKPjX7VAsa4Yx7S5+EBAaZGxK510MjIx6SGrZWBrrV
	TEvdV00F2MnQoeXKzD7O4WFbL55hhyGgfWTHwZ457iN9SgYi1JLPqWkZB0JRXIEtjd4JEQcx
	+8Umfre0Xt4713VxMygW0PnQt5aSQdMD58jHFxTk092mU+yIHj5LeYgvwSgZN4airXk5yRXl
	SE+xAvmumFBY
Organization: Red Hat GmbH
Message-ID: <2c47fc65-ae2d-13cd-9b94-6392e59a77f5@redhat.com>
Date: Thu, 29 Nov 2018 17:00:06 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
	Thunderbird/60.3.0
MIME-Version: 1.0
In-Reply-To: <e036b52f-abe7-4b13-1c5f-d084a8b7a491@redhat.com>
Content-Type: text/plain; charset=utf-8
Content-Language: en-US
Content-Transfer-Encoding: 7bit
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.11
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.31]);
	Thu, 29 Nov 2018 16:00:09 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH v2] s390x/tod: Properly stop the KVM TOD
 while the guest is not running
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Christian Borntraeger <borntraeger@de.ibm.com>, qemu-s390x@nongnu.org,
	Cornelia Huck <cohuck@redhat.com>, Janosch Frank <frankja@linux.ibm.com>,
	Richard Henderson <rth@twiddle.net>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On 29.11.18 16:32, Thomas Huth wrote:
> On 2018-11-28 10:59, David Hildenbrand wrote:
>> Just like on other architectures, we should stop the clock while the guest
>> is not running. This is already properly done for TCG. Right now, doing an
>> offline migration (stop, migrate, cont) can easily trigger stalls in the
>> guest.
>>
>> Even doing a
>>     (hmp) stop
>>     ... wait 2 minutes ...
>>     (hmp) cont
>> will already trigger stalls.
>>
>> So whenever the guest stops, backup the KVM TOD. When continuing to run
>> the guest, restore the KVM TOD.
>>
>> One special case is starting a simple VM: Reading the TOD from KVM to
>> stop it right away until the guest is actually started means that the
>> time of any simple VM will already differ to the host time. We can
>> simply leave the TOD running and the guest won't be able to recognize
>> it.
>>
>> For migration, we actually want to keep the TOD stopped until really
>> starting the guest. To be able to catch most errors, we should however
>> try to set the TOD in addition to simply storing it. So we can still
>> catch basic migration problems.
>>
>> If anything goes wrong while backing up/restoring the TOD, we have to
>> ignore it (but print a warning). This is then basically a fallback to
>> old behavior (TOD remains running).
>>
>> I tested this very basically with an initrd:
>>     1. Start a simple VM. Observed that the TOD is kept running. Old
>>        behavior.
>>     2. Ordinary live migration. Observed that the TOD is temporarily
>>        stopped on the destination when setting the new value and
>>        correctly started when finally starting the guest.
>>     3. Offline live migration. (stop, migrate, cont). Observed that the
>>        TOD will be stopped on the source with the "stop" command. On the
>>        destination, the TOD is temporarily stopped when setting the new
>>        value and correctly started when finally starting the guest via
>>        "cont".
>>     4. Simple stop/cont correctly stops/starts the TOD. (multiple stops
>>        or conts in a row have no effect, so works as expected)
>>
>> In the future, we might want to send the guest a special kind of time sync
>> interrupt under some conditions, so it can synchronize its tod to the
>> host tod. This is interesting for migration scenarios but also when we
>> get time sync interrupts ourselves. This however will most probably have
>> to be handled in KVM (e.g. when the tods differ too much) and is not
>> desired e.g. when debugging the guest. (single stepping should not
>> result in permanent time syncs). I consider something like that an add-on
>> on top of this basic "don't break the guest" handling.
>>
>> Signed-off-by: David Hildenbrand <david@redhat.com>
>> ---
>>
>> v1 -> v2:
>> - Add time sync idea suggested by Christian to description
>> - Drop one unnecessary "return"
>> - Register in realize() and not in instance_init()
>>
>>
>>  hw/s390x/tod-kvm.c     | 91 +++++++++++++++++++++++++++++++++++++++++-
>>  hw/s390x/tod.c         |  5 +++
>>  include/hw/s390x/tod.h |  8 +++-
>>  3 files changed, 101 insertions(+), 3 deletions(-)
>>
>> diff --git a/hw/s390x/tod-kvm.c b/hw/s390x/tod-kvm.c
>> index df564ab89c..87717d0be1 100644
>> --- a/hw/s390x/tod-kvm.c
>> +++ b/hw/s390x/tod-kvm.c
>> @@ -10,10 +10,11 @@
>>  
>>  #include "qemu/osdep.h"
>>  #include "qapi/error.h"
>> +#include "sysemu/sysemu.h"
>>  #include "hw/s390x/tod.h"
>>  #include "kvm_s390x.h"
>>  
>> -static void kvm_s390_tod_get(const S390TODState *td, S390TOD *tod, Error **errp)
>> +static void kvm_s390_get_tod_raw(S390TOD *tod, Error **errp)
>>  {
>>      int r;
>>  
>> @@ -27,7 +28,17 @@ static void kvm_s390_tod_get(const S390TODState *td, S390TOD *tod, Error **errp)
>>      }
>>  }
>>  
>> -static void kvm_s390_tod_set(S390TODState *td, const S390TOD *tod, Error **errp)
>> +static void kvm_s390_tod_get(const S390TODState *td, S390TOD *tod, Error **errp)
>> +{
>> +    if (td->stopped) {
>> +        *tod = td->base;
>> +        return;
>> +    }
>> +
>> +    kvm_s390_get_tod_raw(tod, errp);
>> +}
>> +
>> +static void kvm_s390_set_tod_raw(const S390TOD *tod, Error **errp)
>>  {
>>      int r;
>>  
>> @@ -41,18 +52,94 @@ static void kvm_s390_tod_set(S390TODState *td, const S390TOD *tod, Error **errp)
>>      }
>>  }
>>  
>> +static void kvm_s390_tod_set(S390TODState *td, const S390TOD *tod, Error **errp)
>> +{
>> +    Error *local_err = NULL;
>> +
>> +    /*
>> +     * Somebody (e.g. migration) set the TOD. We'll store it into KVM to
>> +     * properly detect errors now but take a look at the runstate to decide
>> +     * whether really to keep the tod running. E.g. during migration, this
>> +     * is the point where we want to stop the initially running TOD to fire
>> +     * it back up when actually starting the migrated guest.
>> +     */
>> +    kvm_s390_set_tod_raw(tod, &local_err);
>> +    if (local_err) {
>> +        error_propagate(errp, local_err);
>> +        return;
>> +    }
>> +
>> +    if (runstate_is_running()) {
>> +        td->stopped = false;
>> +    } else {
>> +        td->stopped = true;
>> +        td->base = *tod;
>> +    }
>> +}
>> +
>> +static void kvm_s390_tod_vm_state_change(void *opaque, int running,
>> +                                         RunState state)
>> +{
>> +    S390TODState *td = opaque;
>> +    Error *local_err = NULL;
>> +
>> +    if (running && td->stopped) {
>> +        /* Set the old TOD when running the VM - start the TOD clock. */
>> +        kvm_s390_set_tod_raw(&td->base, &local_err);
>> +        if (local_err) {
>> +            warn_report_err(local_err);
>> +        }
>> +        /* Treat errors like the TOD was running all the time. */
>> +        td->stopped = false;
>> +    } else if (!running && !td->stopped) {
>> +        /* Store the TOD when stopping the VM - stop the TOD clock. */
>> +        kvm_s390_get_tod_raw(&td->base, &local_err);
>> +        if (local_err) {
>> +            /* Keep the TOD running in case we could not back it up. */
>> +            warn_report_err(local_err);
>> +        } else {
>> +            td->stopped = true;
>> +        }
>> +    }
>> +}
>> +
>> +static void kvm_s390_tod_realize(S390TODState *td, Error **errp)
>> +{
>> +    /*
>> +     * We need to know when the VM gets started/stopped to start/stop the TOD.
>> +     * As we can never have more than one TOD instance (and that will never be
>> +     * removed), registering here and never unregistering is good enough.
>> +     */
>> +    qemu_add_vm_change_state_handler(kvm_s390_tod_vm_state_change, td);
>> +}
>> +
>>  static void kvm_s390_tod_class_init(ObjectClass *oc, void *data)
>>  {
>>      S390TODClass *tdc = S390_TOD_CLASS(oc);
>>  
>> +    tdc->realize = kvm_s390_tod_realize;
>>      tdc->get = kvm_s390_tod_get;
>>      tdc->set = kvm_s390_tod_set;
>>  }
>>  
>> +static void kvm_s390_tod_init(Object *obj)
>> +{
>> +    S390TODState *td = S390_TOD(obj);
>> +
>> +    /*
>> +     * The TOD is initially running (value stored in KVM). Avoid needless
>> +     * loading/storing of the TOD when starting a simple VM, so let it
>> +     * run although the (never started) VM is stopped. For migration, we
>> +     * will properly set the TOD later.
>> +     */
>> +    td->stopped = false;
>> +}
>> +
>>  static TypeInfo kvm_s390_tod_info = {
>>      .name = TYPE_KVM_S390_TOD,
>>      .parent = TYPE_S390_TOD,
>>      .instance_size = sizeof(S390TODState),
>> +    .instance_init = kvm_s390_tod_init,
>>      .class_init = kvm_s390_tod_class_init,
>>      .class_size = sizeof(S390TODClass),
>>  };
>> diff --git a/hw/s390x/tod.c b/hw/s390x/tod.c
>> index 1c63f411e6..82ea6554ba 100644
>> --- a/hw/s390x/tod.c
>> +++ b/hw/s390x/tod.c
>> @@ -97,9 +97,14 @@ static SaveVMHandlers savevm_tod = {
>>  static void s390_tod_realize(DeviceState *dev, Error **errp)
>>  {
>>      S390TODState *td = S390_TOD(dev);
>> +    S390TODClass *tdc = S390_TOD_GET_CLASS(td);
>>  
>>      /* Legacy migration interface */
>>      register_savevm_live(NULL, "todclock", 0, 1, &savevm_tod, td);
>> +
>> +    if (tdc->realize) {
>> +        tdc->realize(td, errp);
>> +    }
>>  }
> 
> I think the more usual way to deal with this, is to use
> device_class_set_parent_realize() in the child's class init function,
> and then to call ->parent_realize() from the child's realize function.
> 
> I guess it doesn't really matter in the end which way we do it here, but
> it would be nice to be consistent with the other devices, so I'd prefer
> to use device_class_set_parent_realize() for this here, too.
> 
> Apart from that, the patch looks fine to me.

Alright, I will resend tomorrow with your suggested change.

Thanks!

> 
>  Thomas
> 


-- 

Thanks,

David / dhildenb

