Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 28 Nov 2018 21:42:24 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id C2CC55803ED
	for <like.xu@linux.intel.com>; Wed, 28 Nov 2018 03:35:59 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by fmsmga001-1.fm.intel.com with ESMTP; 28 Nov 2018 03:35:59 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AOdBIXBE0bKiH398BeH/Rq51GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ7yos6wAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VDK/5KlpVRDokj?=
 =?us-ascii?q?8KOT4n/m/ZicJ/jqxbrx2uqRJi247ZYoObOfVjcq7TYd8VW3FBU91NWyxYGI6w?=
 =?us-ascii?q?c5cDA/YdMetesoLzp0EOrRy7BQS0AO3v1yVHhnnr1qMhzuQhEAfG3BA+ENIKqn?=
 =?us-ascii?q?vfsdL4NL4PUeC0yqnI0SvMb/dM1jrm8ojHbA0uofGWUrJsa8be1U4vFwbcg1iW?=
 =?us-ascii?q?tIfrMTSV1uEXvGia6eptTeOvi2g5pAFtuDSvxsAsipLVho8T11vK9j15zZ4rKd?=
 =?us-ascii?q?GkS0N3e8OoHIZTui2AKYd7TMMvT3t1tCs40rEKp4K3cSwQxJg6yRPTdeaLf5WL?=
 =?us-ascii?q?7x/tTuqdPzR1iXR4c7ylnRmy61KvyujkW8m0zllKqi1Fn8HItnAMzBzT9tOHRu?=
 =?us-ascii?q?Fy/kenxDaDzQfT6vtLIUwslKrbLYAuwqIom5YNrUjOHTX6lFjrgKKVbEko5Oal?=
 =?us-ascii?q?5uT9brn7pJKQL4p0hRv/MqQqlMy/G+M4Mg0WUmiC5+u80aDj8VTkT7pUkP05jK?=
 =?us-ascii?q?3ZvInBKsQcu665BRNa3Zg46xq4Czem0dcYkmcdIFNKZRKKl4zpO1DIIPDlAvaz?=
 =?us-ascii?q?mVWskDF3x//YOr3tGInCLn/GkLr6e7Z97EhcyAU1zdBC/Z5UDasBIP3rVk/rqN?=
 =?us-ascii?q?PYFgM5MxCzw+v/DNV914AeVnyVDq6WLaPfqluI5uMpI+mRa44Zojf9K/455/Hw?=
 =?us-ascii?q?iX81g0MSfa6s3chfVXajA/4zI1mFeWG+xZAFEHwWpUw4S+rljkDEViRcIHO7Xq?=
 =?us-ascii?q?Y57zd8D5q6DIDFXce0jbmcmSu2AJBSNV1AEU2GRHLhdoGYXKUVZSePZ8NsjDEA?=
 =?us-ascii?q?EKKsUpIszg2Gsgj8xLx6aO3O9XoDqJjh2dNpsvDVjgw47jduDs6QgF2KGnh5m3?=
 =?us-ascii?q?5NSzIo0aRXp0t7xVGel69ijK92D9tWstFUWwFyDIPdyfB3D9m6Dhvcf9GVRVKv?=
 =?us-ascii?q?as+rDTE4UpQ6xNpYMBU1IMmrkh2Wh3niOLQSjbHeXJE=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A5AACYfP5bhxHrdtBkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUwUBAQsBgTCCYoxwiyqZT4FzFBgUh2oiNgcNAQMBAQEBAQECARMBAQEKCwk?=
 =?us-ascii?q?IGw4vgjYFAgMYCYJcAwMBAiQfCikDAwECBgEBSAgDAVMZBYMcggIBBKckM4VAh?=
 =?us-ascii?q?QeMFReBf4ERh1yGEgKVSopRCYY+imgLGIlYhz2VFYMzgUwBggZNIxU7gmyCJxe?=
 =?us-ascii?q?OHkAxgQccihBWgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0A5AACYfP5bhxHrdtBkHAEBAQQBAQcEAQGBUwUBAQsBgTC?=
 =?us-ascii?q?CYoxwiyqZT4FzFBgUh2oiNgcNAQMBAQEBAQECARMBAQEKCwkIGw4vgjYFAgMYC?=
 =?us-ascii?q?YJcAwMBAiQfCikDAwECBgEBSAgDAVMZBYMcggIBBKckM4VAhQeMFReBf4ERh1y?=
 =?us-ascii?q?GEgKVSopRCYY+imgLGIlYhz2VFYMzgUwBggZNIxU7gmyCJxeOHkAxgQccihBWg?=
 =?us-ascii?q?XcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,290,1539673200"; 
   d="scan'208";a="41879194"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 28 Nov 2018 03:35:58 -0800
Received: from localhost ([::1]:47249 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gRy8L-0003hQ-Tb
	for like.xu@linux.intel.com; Wed, 28 Nov 2018 06:35:57 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:47007)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <quintela@redhat.com>) id 1gRy6u-0002uy-QM
	for qemu-devel@nongnu.org; Wed, 28 Nov 2018 06:34:32 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <quintela@redhat.com>) id 1gRy6q-0002k3-LI
	for qemu-devel@nongnu.org; Wed, 28 Nov 2018 06:34:28 -0500
Received: from mx1.redhat.com ([209.132.183.28]:55438)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <quintela@redhat.com>) id 1gRy6q-0002jZ-Dx
	for qemu-devel@nongnu.org; Wed, 28 Nov 2018 06:34:24 -0500
Received: from smtp.corp.redhat.com (int-mx04.intmail.prod.int.phx2.redhat.com
	[10.5.11.14])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id DCAA5308212A
	for <qemu-devel@nongnu.org>; Wed, 28 Nov 2018 11:34:23 +0000 (UTC)
Received: from localhost.localdomain (unknown [10.36.118.114])
	by smtp.corp.redhat.com (Postfix) with ESMTP id D546C612AD;
	Wed, 28 Nov 2018 11:34:17 +0000 (UTC)
From: Juan Quintela <quintela@redhat.com>
To: qemu-devel@nongnu.org
Date: Wed, 28 Nov 2018 12:33:34 +0100
Message-Id: <20181128113337.7238-3-quintela@redhat.com>
In-Reply-To: <20181128113337.7238-1-quintela@redhat.com>
References: <20181128113337.7238-1-quintela@redhat.com>
MIME-Version: 1.0
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.14
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.42]);
	Wed, 28 Nov 2018 11:34:23 +0000 (UTC)
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: [Qemu-devel] [PATCH v10 2/5] migration: Create socket-address
 parameter
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: lvivier@redhat.com, dgilbert@redhat.com, peterx@redhat.com
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

It will be used to store the uri parameters. We want this only for
tcp, so we don't set it for other uris.  We need it to know what port
is migration running.

Signed-off-by: Juan Quintela <quintela@redhat.com>

--

This used to be uri parameter, but it has so many troubles to
reproduce that it don't just make sense.

This used to be a port parameter.  I was asked to move to
SocketAddress, done.
I also merged the setting of the migration tcp port in this one
because now I need to free the address, and this makes it easier.
This used to be x-socket-address with a single direction, now it is a
list of addresses.
Move SocketAddress_to_str here.  I used to try to generalize the one
in chardev/char-socket.c, but it is not worth it.

Signed-off-by: Juan Quintela <quintela@redhat.com>
---
 hmp.c                 | 31 +++++++++++++++++++++++++++++++
 migration/migration.c | 24 ++++++++++++++++++++++++
 migration/migration.h |  4 ++++
 migration/socket.c    | 11 +++++++++++
 qapi/migration.json   |  6 +++++-
 qapi/sockets.json     | 13 +++++++++++++
 6 files changed, 88 insertions(+), 1 deletion(-)

diff --git a/hmp.c b/hmp.c
index 7828f93a39..2fd12a4a81 100644
--- a/hmp.c
+++ b/hmp.c
@@ -166,6 +166,26 @@ void hmp_info_mice(Monitor *mon, const QDict *qdict)
     qapi_free_MouseInfoList(mice_list);
 }
=20
+static char *SocketAddress_to_str(SocketAddress *addr)
+{
+    switch (addr->type) {
+    case SOCKET_ADDRESS_TYPE_INET:
+        return g_strdup_printf("tcp:%s:%s",
+                               addr->u.inet.host,
+                               addr->u.inet.port);
+        break;
+    case SOCKET_ADDRESS_TYPE_UNIX:
+        return g_strdup_printf("unix:%s",
+                               addr->u.q_unix.path);
+        break;
+    case SOCKET_ADDRESS_TYPE_FD:
+        return g_strdup_printf("fd:%s", addr->u.fd.str);
+        break;
+    default:
+        abort();
+    }
+}
+
 void hmp_info_migrate(Monitor *mon, const QDict *qdict)
 {
     MigrationInfo *info;
@@ -304,6 +324,17 @@ void hmp_info_migrate(Monitor *mon, const QDict *qdi=
ct)
         g_free(str);
         visit_free(v);
     }
+    if (info->has_socket_address) {
+        SocketAddressList *addr;
+
+        monitor_printf(mon, "socket address: [\n");
+
+        for (addr =3D info->socket_address; addr; addr =3D addr->next) {
+            char *s =3D SocketAddress_to_str(addr->value);
+            monitor_printf(mon, "\t%s\n", s);
+        }
+        monitor_printf(mon, "]\n");
+    }
     qapi_free_MigrationInfo(info);
     qapi_free_MigrationCapabilityStatusList(caps);
 }
diff --git a/migration/migration.c b/migration/migration.c
index 49ffb9997a..22954dcabc 100644
--- a/migration/migration.c
+++ b/migration/migration.c
@@ -31,6 +31,8 @@
 #include "migration/vmstate.h"
 #include "block/block.h"
 #include "qapi/error.h"
+#include "qapi/clone-visitor.h"
+#include "qapi/qapi-visit-sockets.h"
 #include "qapi/qapi-commands-migration.h"
 #include "qapi/qapi-events-migration.h"
 #include "qapi/qmp/qerror.h"
@@ -197,6 +199,11 @@ void migration_incoming_state_destroy(void)
     }
=20
     qemu_event_reset(&mis->main_thread_load_event);
+
+    if (mis->socket_address) {
+        qapi_free_SocketAddressList(mis->socket_address);
+        mis->socket_address =3D NULL;
+    }
 }
=20
 static void migrate_generate_event(int new_state)
@@ -312,6 +319,17 @@ void migration_incoming_enable_colo(void)
     migration_colo_enabled =3D true;
 }
=20
+void migrate_add_address(SocketAddress *address)
+{
+    MigrationIncomingState *mis =3D migration_incoming_get_current();
+    SocketAddressList *addrs;
+
+    addrs =3D g_new0(SocketAddressList, 1);
+    addrs->next =3D mis->socket_address;
+    mis->socket_address =3D addrs;
+    addrs->value =3D QAPI_CLONE(SocketAddress, address);
+}
+
 void qemu_start_incoming_migration(const char *uri, Error **errp)
 {
     const char *p;
@@ -960,6 +978,12 @@ static void fill_destination_migration_info(Migratio=
nInfo *info)
 {
     MigrationIncomingState *mis =3D migration_incoming_get_current();
=20
+    if (mis->socket_address) {
+        info->has_socket_address =3D true;
+        info->socket_address =3D
+            QAPI_CLONE(SocketAddressList, mis->socket_address);
+    }
+
     switch (mis->state) {
     case MIGRATION_STATUS_NONE:
         return;
diff --git a/migration/migration.h b/migration/migration.h
index e413d4d8b6..324970433c 100644
--- a/migration/migration.h
+++ b/migration/migration.h
@@ -80,6 +80,9 @@ struct MigrationIncomingState {
     bool postcopy_recover_triggered;
     QemuSemaphore postcopy_pause_sem_dst;
     QemuSemaphore postcopy_pause_sem_fault;
+
+    /* List of listening socket addresses  */
+    SocketAddressList *socket_address;
 };
=20
 MigrationIncomingState *migration_incoming_get_current(void);
@@ -292,6 +295,7 @@ void migrate_send_rp_resume_ack(MigrationIncomingStat=
e *mis, uint32_t value);
=20
 void dirty_bitmap_mig_before_vm_start(void);
 void init_dirty_bitmap_incoming_migration(void);
+void migrate_add_address(SocketAddress *address);
=20
 #define qemu_ram_foreach_block \
   #warning "Use qemu_ram_foreach_block_migratable in migration code"
diff --git a/migration/socket.c b/migration/socket.c
index f4c8174400..239527fb1f 100644
--- a/migration/socket.c
+++ b/migration/socket.c
@@ -15,6 +15,7 @@
  */
=20
 #include "qemu/osdep.h"
+#include "qemu/cutils.h"
=20
 #include "qemu-common.h"
 #include "qemu/error-report.h"
@@ -177,6 +178,7 @@ static void socket_start_incoming_migration(SocketAdd=
ress *saddr,
                                             Error **errp)
 {
     QIONetListener *listener =3D qio_net_listener_new();
+    size_t i;
=20
     qio_net_listener_set_name(listener, "migration-socket-listener");
=20
@@ -189,6 +191,15 @@ static void socket_start_incoming_migration(SocketAd=
dress *saddr,
                                           socket_accept_incoming_migrati=
on,
                                           NULL, NULL,
                                           g_main_context_get_thread_defa=
ult());
+
+    for (i =3D 0; i < listener->nsioc; i++)  {
+        SocketAddress *address =3D
+            qio_channel_socket_get_local_address(listener->sioc[i], errp=
);
+        if (!address) {
+            return;
+        }
+        migrate_add_address(address);
+    }
 }
=20
 void tcp_start_incoming_migration(const char *host_port, Error **errp)
diff --git a/qapi/migration.json b/qapi/migration.json
index 38d4c41d88..631949796d 100644
--- a/qapi/migration.json
+++ b/qapi/migration.json
@@ -6,6 +6,7 @@
 ##
=20
 { 'include': 'common.json' }
+{ 'include': 'sockets.json' }
=20
 ##
 # @MigrationStats:
@@ -196,6 +197,8 @@
 # @compression: migration compression statistics, only returned if compr=
ession
 #           feature is on and status is 'active' or 'completed' (Since 3=
.1)
 #
+# @socket-address: Only used for tcp, to know what the real port is (Sin=
ce 3.1)
+#
 # Since: 0.14.0
 ##
 { 'struct': 'MigrationInfo',
@@ -210,7 +213,8 @@
            '*error-desc': 'str',
            '*postcopy-blocktime' : 'uint32',
            '*postcopy-vcpu-blocktime': ['uint32'],
-           '*compression': 'CompressionStats'} }
+           '*compression': 'CompressionStats',
+           '*socket-address': ['SocketAddress'] } }
=20
 ##
 # @query-migrate:
diff --git a/qapi/sockets.json b/qapi/sockets.json
index fc81d8d5e8..d7f77984af 100644
--- a/qapi/sockets.json
+++ b/qapi/sockets.json
@@ -152,3 +152,16 @@
             'unix': 'UnixSocketAddress',
             'vsock': 'VsockSocketAddress',
             'fd': 'String' } }
+
+##
+# @DummyStruct:
+#
+# Both block-core and migration needs SocketAddressList
+# I am open to comments about how to share it
+#
+# @dummy-list: A dummy list
+#
+# Since: 3.1
+##
+{ 'struct': 'DummyStruct',
+  'data': { 'dummy-list': ['SocketAddress'] } }
--=20
2.19.1


