Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 27 Nov 2018 08:40:33 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id EC6DA5802E4
	for <like.xu@linux.intel.com>; Mon, 26 Nov 2018 12:02:28 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga001-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 26 Nov 2018 12:02:28 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AZ3/0gxyT7dEPNsbXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?2usQIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDwULs6Wymt771zRRHoli?=
 =?us-ascii?q?kJOT03/2PZisN/g6xVvQqhqh59zYPbfY2YOuZycb3Gfd4BWWZBR9xcWzBdDo+g?=
 =?us-ascii?q?c4cCCfcKM+ZCr4n6olsDtR+wBRS2C+Pp1zRGnWL23aw80+Q9Dw7G2BYvFM8JvX?=
 =?us-ascii?q?TNsdX1NaESUfyrw6nM1zrOdOlW1ing54jIaB8hveuAUq53ccrU0EQiER7OgFaI?=
 =?us-ascii?q?qYH9IT+ZyucAv3KG4+Z9Vu+jkXArpg9xrzS128shiJHFipwJxl3A7yl13Yg4Kc?=
 =?us-ascii?q?OiREJmYtOpHoFcuz+ZOoZwX8gsWXtnuDwgxb0DoZO7fDYFyJAgxxPHb/yHcpOI?=
 =?us-ascii?q?4g74VOqLLjd4gm9ldKi4hxao/kis0uz8Vs+q31ZWtidJjMXAu3MX2xDO98SKSe?=
 =?us-ascii?q?Fx8lmv1DuPzQzf9+NJLVgxlaXBKp4hxrAwloAUsUTGBiL2gVv5jKqLdkk95+en?=
 =?us-ascii?q?9frnbavippOFLIB0jRz+MqIylcOhGuQ0NQwOX2mY+euizrHi8lD5Ta1Ojv03lK?=
 =?us-ascii?q?nZrZ/bKd4apq6/Hw9azIIj5wyjADeh1dQVhn8HLFVDeBKIiYjpJkvCIPfiDfew?=
 =?us-ascii?q?m1isiitkx+jaPr39BZXANnzDkLbifblj8UJdxxczwMtb55JVDLEBPf3yVlXwtN?=
 =?us-ascii?q?zeEh82LQi0z/z7B9V604NNEV+JGbKTZaPOrUeTtKVoJ+iXeJRTvjH7JP44ofn0?=
 =?us-ascii?q?gjg8kF4ZeKCvmpwPdHG/GO8hOkicfD/gj8kMFTQ3uBEjRrnvgVyGTTkBfnu3Qu?=
 =?us-ascii?q?cw6y82DMe8AJ7eS5uxqLqG2ii9A9tRfG8REU2GE3rja9CZXewRYjmZOM5rn284?=
 =?us-ascii?q?Uu24Roo8kB2jqgL+47xgKOXS52sfr52w+sJy4rjxiBg0vQVpDsKB3mWEBzVtg2?=
 =?us-ascii?q?IOWzIy1YhlrEB9w0vF2q991a8LXedP7u9EB19pfaXXyPZ3Xoj/?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AYAACVUPxbhxHrdtBkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgTCCYowRX4skmUmBdhEYFIhjIjQJDQEDAQEBAQEBAgETAQEBCgs?=
 =?us-ascii?q?JCBsOL4I2BQIDGAmCXAMDAQIkHwopAwMBAgYBAUgIAwFTGQWDHIICAQSnOTOFQ?=
 =?us-ascii?q?IRoikeBQheBf458AokjhXUBkGkJhj2KZwsYiVGHN5gwgUaCDU0jFYMngicXjh1?=
 =?us-ascii?q?AMYEHHIongXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AYAACVUPxbhxHrdtBkHAEBAQQBAQcEAQGBUQcBAQsBgTC?=
 =?us-ascii?q?CYowRX4skmUmBdhEYFIhjIjQJDQEDAQEBAQEBAgETAQEBCgsJCBsOL4I2BQIDG?=
 =?us-ascii?q?AmCXAMDAQIkHwopAwMBAgYBAUgIAwFTGQWDHIICAQSnOTOFQIRoikeBQheBf45?=
 =?us-ascii?q?8AokjhXUBkGkJhj2KZwsYiVGHN5gwgUaCDU0jFYMngicXjh1AMYEHHIongXcBA?=
 =?us-ascii?q?Q?=
X-IronPort-AV: E=Sophos;i="5.56,283,1539673200"; 
   d="scan'208";a="52704076"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 26 Nov 2018 12:02:27 -0800
Received: from localhost ([::1]:38530 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gRN5P-0006gG-D2
	for like.xu@linux.intel.com; Mon, 26 Nov 2018 15:02:27 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:52411)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <quintela@redhat.com>) id 1gRN4l-0006eS-K7
	for qemu-devel@nongnu.org; Mon, 26 Nov 2018 15:01:49 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <quintela@redhat.com>) id 1gRN4k-00084E-5B
	for qemu-devel@nongnu.org; Mon, 26 Nov 2018 15:01:47 -0500
Received: from mx1.redhat.com ([209.132.183.28]:39736)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <quintela@redhat.com>) id 1gRN4j-000845-Sc
	for qemu-devel@nongnu.org; Mon, 26 Nov 2018 15:01:46 -0500
Received: from smtp.corp.redhat.com (int-mx08.intmail.prod.int.phx2.redhat.com
	[10.5.11.23])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 09742FDEF
	for <qemu-devel@nongnu.org>; Mon, 26 Nov 2018 20:01:45 +0000 (UTC)
Received: from localhost.localdomain (unknown [10.36.118.114])
	by smtp.corp.redhat.com (Postfix) with ESMTP id 9CB4219C65;
	Mon, 26 Nov 2018 20:01:43 +0000 (UTC)
From: Juan Quintela <quintela@redhat.com>
To: qemu-devel@nongnu.org
Date: Mon, 26 Nov 2018 20:59:56 +0100
Message-Id: <20181126200009.862-4-quintela@redhat.com>
In-Reply-To: <20181126200009.862-1-quintela@redhat.com>
References: <20181126200009.862-1-quintela@redhat.com>
MIME-Version: 1.0
X-Scanned-By: MIMEDefang 2.84 on 10.5.11.23
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.25]);
	Mon, 26 Nov 2018 20:01:45 +0000 (UTC)
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: [Qemu-devel] [PATCH v2 03/16] virtio: split virtio input bits from
 virtio-pci
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: lvivier@redhat.com, dgilbert@redhat.com, peterx@redhat.com
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Signed-off-by: Juan Quintela <quintela@redhat.com>
---
 hw/virtio/Makefile.objs      |   1 +
 hw/virtio/virtio-input-pci.c | 154 +++++++++++++++++++++++++++++++++++
 hw/virtio/virtio-pci.c       | 113 -------------------------
 hw/virtio/virtio-pci.h       |  22 -----
 4 files changed, 155 insertions(+), 135 deletions(-)
 create mode 100644 hw/virtio/virtio-input-pci.c

diff --git a/hw/virtio/Makefile.objs b/hw/virtio/Makefile.objs
index 685ae1d866..6819ed4e14 100644
--- a/hw/virtio/Makefile.objs
+++ b/hw/virtio/Makefile.objs
@@ -12,6 +12,7 @@ obj-$(call land,$(CONFIG_VIRTIO_CRYPTO),$(CONFIG_VIRTIO=
_PCI)) +=3D virtio-crypto-p
 obj-$(CONFIG_LINUX) +=3D vhost.o vhost-backend.o vhost-user.o
 obj-$(CONFIG_VHOST_VSOCK) +=3D vhost-vsock.o vhost-vsock-pci.o
 obj-$(CONFIG_VIRTIO_INPUT_HOST) +=3D virtio-input-host-pci.o
+obj-$(CONFIG_VIRTIO_INPUT) +=3D virtio-input-pci.o
 endif
=20
 common-obj-$(call lnot,$(call land,$(CONFIG_VIRTIO),$(CONFIG_LINUX))) +=3D=
 vhost-stub.o
diff --git a/hw/virtio/virtio-input-pci.c b/hw/virtio/virtio-input-pci.c
new file mode 100644
index 0000000000..12fc46043e
--- /dev/null
+++ b/hw/virtio/virtio-input-pci.c
@@ -0,0 +1,154 @@
+/*
+ * Virtio input PCI Bindings
+ *
+ * This work is licensed under the terms of the GNU GPL, version 2 or
+ * (at your option) any later version.  See the COPYING file in the
+ * top-level directory.
+ */
+
+#include "qemu/osdep.h"
+
+#include "virtio-pci.h"
+#include "hw/virtio/virtio-input.h"
+
+typedef struct VirtIOInputPCI VirtIOInputPCI;
+typedef struct VirtIOInputHIDPCI VirtIOInputHIDPCI;
+
+/*
+ * virtio-input-pci: This extends VirtioPCIProxy.
+ */
+#define VIRTIO_INPUT_PCI(obj) \
+        OBJECT_CHECK(VirtIOInputPCI, (obj), TYPE_VIRTIO_INPUT_PCI)
+
+struct VirtIOInputPCI {
+    VirtIOPCIProxy parent_obj;
+    VirtIOInput vdev;
+};
+
+#define TYPE_VIRTIO_INPUT_HID_PCI "virtio-input-hid-pci"
+#define TYPE_VIRTIO_KEYBOARD_PCI  "virtio-keyboard-pci"
+#define TYPE_VIRTIO_MOUSE_PCI     "virtio-mouse-pci"
+#define TYPE_VIRTIO_TABLET_PCI    "virtio-tablet-pci"
+#define VIRTIO_INPUT_HID_PCI(obj) \
+        OBJECT_CHECK(VirtIOInputHIDPCI, (obj), TYPE_VIRTIO_INPUT_HID_PCI=
)
+
+struct VirtIOInputHIDPCI {
+    VirtIOPCIProxy parent_obj;
+    VirtIOInputHID vdev;
+};
+
+static Property virtio_input_pci_properties[] =3D {
+    DEFINE_PROP_UINT32("vectors", VirtIOPCIProxy, nvectors, 2),
+    DEFINE_PROP_END_OF_LIST(),
+};
+
+static void virtio_input_pci_realize(VirtIOPCIProxy *vpci_dev, Error **e=
rrp)
+{
+    VirtIOInputPCI *vinput =3D VIRTIO_INPUT_PCI(vpci_dev);
+    DeviceState *vdev =3D DEVICE(&vinput->vdev);
+
+    qdev_set_parent_bus(vdev, BUS(&vpci_dev->bus));
+    virtio_pci_force_virtio_1(vpci_dev);
+    object_property_set_bool(OBJECT(vdev), true, "realized", errp);
+}
+
+static void virtio_input_pci_class_init(ObjectClass *klass, void *data)
+{
+    DeviceClass *dc =3D DEVICE_CLASS(klass);
+    VirtioPCIClass *k =3D VIRTIO_PCI_CLASS(klass);
+    PCIDeviceClass *pcidev_k =3D PCI_DEVICE_CLASS(klass);
+
+    dc->props =3D virtio_input_pci_properties;
+    k->realize =3D virtio_input_pci_realize;
+    set_bit(DEVICE_CATEGORY_INPUT, dc->categories);
+
+    pcidev_k->class_id =3D PCI_CLASS_INPUT_OTHER;
+}
+
+static void virtio_input_hid_kbd_pci_class_init(ObjectClass *klass, void=
 *data)
+{
+    PCIDeviceClass *pcidev_k =3D PCI_DEVICE_CLASS(klass);
+
+    pcidev_k->class_id =3D PCI_CLASS_INPUT_KEYBOARD;
+}
+
+static void virtio_input_hid_mouse_pci_class_init(ObjectClass *klass,
+                                                  void *data)
+{
+    PCIDeviceClass *pcidev_k =3D PCI_DEVICE_CLASS(klass);
+
+    pcidev_k->class_id =3D PCI_CLASS_INPUT_MOUSE;
+}
+
+static void virtio_keyboard_initfn(Object *obj)
+{
+    VirtIOInputHIDPCI *dev =3D VIRTIO_INPUT_HID_PCI(obj);
+
+    virtio_instance_init_common(obj, &dev->vdev, sizeof(dev->vdev),
+                                TYPE_VIRTIO_KEYBOARD);
+}
+
+static void virtio_mouse_initfn(Object *obj)
+{
+    VirtIOInputHIDPCI *dev =3D VIRTIO_INPUT_HID_PCI(obj);
+
+    virtio_instance_init_common(obj, &dev->vdev, sizeof(dev->vdev),
+                                TYPE_VIRTIO_MOUSE);
+}
+
+static void virtio_tablet_initfn(Object *obj)
+{
+    VirtIOInputHIDPCI *dev =3D VIRTIO_INPUT_HID_PCI(obj);
+
+    virtio_instance_init_common(obj, &dev->vdev, sizeof(dev->vdev),
+                                TYPE_VIRTIO_TABLET);
+}
+
+static const TypeInfo virtio_input_pci_info =3D {
+    .name          =3D TYPE_VIRTIO_INPUT_PCI,
+    .parent        =3D TYPE_VIRTIO_PCI,
+    .instance_size =3D sizeof(VirtIOInputPCI),
+    .class_init    =3D virtio_input_pci_class_init,
+    .abstract      =3D true,
+};
+
+static const TypeInfo virtio_input_hid_pci_info =3D {
+    .name          =3D TYPE_VIRTIO_INPUT_HID_PCI,
+    .parent        =3D TYPE_VIRTIO_INPUT_PCI,
+    .instance_size =3D sizeof(VirtIOInputHIDPCI),
+    .abstract      =3D true,
+};
+
+static const TypeInfo virtio_keyboard_pci_info =3D {
+    .name          =3D TYPE_VIRTIO_KEYBOARD_PCI,
+    .parent        =3D TYPE_VIRTIO_INPUT_HID_PCI,
+    .class_init    =3D virtio_input_hid_kbd_pci_class_init,
+    .instance_size =3D sizeof(VirtIOInputHIDPCI),
+    .instance_init =3D virtio_keyboard_initfn,
+};
+
+static const TypeInfo virtio_mouse_pci_info =3D {
+    .name          =3D TYPE_VIRTIO_MOUSE_PCI,
+    .parent        =3D TYPE_VIRTIO_INPUT_HID_PCI,
+    .class_init    =3D virtio_input_hid_mouse_pci_class_init,
+    .instance_size =3D sizeof(VirtIOInputHIDPCI),
+    .instance_init =3D virtio_mouse_initfn,
+};
+
+static const TypeInfo virtio_tablet_pci_info =3D {
+    .name          =3D TYPE_VIRTIO_TABLET_PCI,
+    .parent        =3D TYPE_VIRTIO_INPUT_HID_PCI,
+    .instance_size =3D sizeof(VirtIOInputHIDPCI),
+    .instance_init =3D virtio_tablet_initfn,
+};
+
+static void virtio_pci_input_register(void)
+{
+    type_register_static(&virtio_input_pci_info);
+    type_register_static(&virtio_input_hid_pci_info);
+    type_register_static(&virtio_keyboard_pci_info);
+    type_register_static(&virtio_mouse_pci_info);
+    type_register_static(&virtio_tablet_pci_info);
+}
+
+type_init(virtio_pci_input_register)
diff --git a/hw/virtio/virtio-pci.c b/hw/virtio/virtio-pci.c
index 97e40da9e8..bb1d2db032 100644
--- a/hw/virtio/virtio-pci.c
+++ b/hw/virtio/virtio-pci.c
@@ -24,7 +24,6 @@
 #include "hw/virtio/virtio-serial.h"
 #include "hw/virtio/virtio-scsi.h"
 #include "hw/virtio/virtio-balloon.h"
-#include "hw/virtio/virtio-input.h"
 #include "hw/pci/pci.h"
 #include "qapi/error.h"
 #include "qemu/error-report.h"
@@ -2473,113 +2472,6 @@ static const TypeInfo virtio_rng_pci_info =3D {
     .class_init    =3D virtio_rng_pci_class_init,
 };
=20
-/* virtio-input-pci */
-
-static Property virtio_input_pci_properties[] =3D {
-    DEFINE_PROP_UINT32("vectors", VirtIOPCIProxy, nvectors, 2),
-    DEFINE_PROP_END_OF_LIST(),
-};
-
-static void virtio_input_pci_realize(VirtIOPCIProxy *vpci_dev, Error **e=
rrp)
-{
-    VirtIOInputPCI *vinput =3D VIRTIO_INPUT_PCI(vpci_dev);
-    DeviceState *vdev =3D DEVICE(&vinput->vdev);
-
-    qdev_set_parent_bus(vdev, BUS(&vpci_dev->bus));
-    virtio_pci_force_virtio_1(vpci_dev);
-    object_property_set_bool(OBJECT(vdev), true, "realized", errp);
-}
-
-static void virtio_input_pci_class_init(ObjectClass *klass, void *data)
-{
-    DeviceClass *dc =3D DEVICE_CLASS(klass);
-    VirtioPCIClass *k =3D VIRTIO_PCI_CLASS(klass);
-    PCIDeviceClass *pcidev_k =3D PCI_DEVICE_CLASS(klass);
-
-    dc->props =3D virtio_input_pci_properties;
-    k->realize =3D virtio_input_pci_realize;
-    set_bit(DEVICE_CATEGORY_INPUT, dc->categories);
-
-    pcidev_k->class_id =3D PCI_CLASS_INPUT_OTHER;
-}
-
-static void virtio_input_hid_kbd_pci_class_init(ObjectClass *klass, void=
 *data)
-{
-    PCIDeviceClass *pcidev_k =3D PCI_DEVICE_CLASS(klass);
-
-    pcidev_k->class_id =3D PCI_CLASS_INPUT_KEYBOARD;
-}
-
-static void virtio_input_hid_mouse_pci_class_init(ObjectClass *klass,
-                                                  void *data)
-{
-    PCIDeviceClass *pcidev_k =3D PCI_DEVICE_CLASS(klass);
-
-    pcidev_k->class_id =3D PCI_CLASS_INPUT_MOUSE;
-}
-
-static void virtio_keyboard_initfn(Object *obj)
-{
-    VirtIOInputHIDPCI *dev =3D VIRTIO_INPUT_HID_PCI(obj);
-
-    virtio_instance_init_common(obj, &dev->vdev, sizeof(dev->vdev),
-                                TYPE_VIRTIO_KEYBOARD);
-}
-
-static void virtio_mouse_initfn(Object *obj)
-{
-    VirtIOInputHIDPCI *dev =3D VIRTIO_INPUT_HID_PCI(obj);
-
-    virtio_instance_init_common(obj, &dev->vdev, sizeof(dev->vdev),
-                                TYPE_VIRTIO_MOUSE);
-}
-
-static void virtio_tablet_initfn(Object *obj)
-{
-    VirtIOInputHIDPCI *dev =3D VIRTIO_INPUT_HID_PCI(obj);
-
-    virtio_instance_init_common(obj, &dev->vdev, sizeof(dev->vdev),
-                                TYPE_VIRTIO_TABLET);
-}
-
-static const TypeInfo virtio_input_pci_info =3D {
-    .name          =3D TYPE_VIRTIO_INPUT_PCI,
-    .parent        =3D TYPE_VIRTIO_PCI,
-    .instance_size =3D sizeof(VirtIOInputPCI),
-    .class_init    =3D virtio_input_pci_class_init,
-    .abstract      =3D true,
-};
-
-static const TypeInfo virtio_input_hid_pci_info =3D {
-    .name          =3D TYPE_VIRTIO_INPUT_HID_PCI,
-    .parent        =3D TYPE_VIRTIO_INPUT_PCI,
-    .instance_size =3D sizeof(VirtIOInputHIDPCI),
-    .abstract      =3D true,
-};
-
-static const TypeInfo virtio_keyboard_pci_info =3D {
-    .name          =3D TYPE_VIRTIO_KEYBOARD_PCI,
-    .parent        =3D TYPE_VIRTIO_INPUT_HID_PCI,
-    .class_init    =3D virtio_input_hid_kbd_pci_class_init,
-    .instance_size =3D sizeof(VirtIOInputHIDPCI),
-    .instance_init =3D virtio_keyboard_initfn,
-};
-
-static const TypeInfo virtio_mouse_pci_info =3D {
-    .name          =3D TYPE_VIRTIO_MOUSE_PCI,
-    .parent        =3D TYPE_VIRTIO_INPUT_HID_PCI,
-    .class_init    =3D virtio_input_hid_mouse_pci_class_init,
-    .instance_size =3D sizeof(VirtIOInputHIDPCI),
-    .instance_init =3D virtio_mouse_initfn,
-};
-
-static const TypeInfo virtio_tablet_pci_info =3D {
-    .name          =3D TYPE_VIRTIO_TABLET_PCI,
-    .parent        =3D TYPE_VIRTIO_INPUT_HID_PCI,
-    .instance_size =3D sizeof(VirtIOInputHIDPCI),
-    .instance_init =3D virtio_tablet_initfn,
-};
-
 /* virtio-pci-bus */
=20
 static void virtio_pci_bus_new(VirtioBusState *bus, size_t bus_size,
@@ -2628,11 +2520,6 @@ static const TypeInfo virtio_pci_bus_info =3D {
 static void virtio_pci_register_types(void)
 {
     type_register_static(&virtio_rng_pci_info);
-    type_register_static(&virtio_input_pci_info);
-    type_register_static(&virtio_input_hid_pci_info);
-    type_register_static(&virtio_keyboard_pci_info);
-    type_register_static(&virtio_mouse_pci_info);
-    type_register_static(&virtio_tablet_pci_info);
     type_register_static(&virtio_pci_bus_info);
     type_register_static(&virtio_pci_info);
 #ifdef CONFIG_VIRTFS
diff --git a/hw/virtio/virtio-pci.h b/hw/virtio/virtio-pci.h
index cf4cbecfab..32d5f0fbff 100644
--- a/hw/virtio/virtio-pci.h
+++ b/hw/virtio/virtio-pci.h
@@ -23,7 +23,6 @@
 #include "hw/virtio/virtio-scsi.h"
 #include "hw/virtio/virtio-balloon.h"
 #include "hw/virtio/virtio-bus.h"
-#include "hw/virtio/virtio-input.h"
 #include "hw/virtio/virtio-gpu.h"
 #include "hw/virtio/virtio-crypto.h"
 #include "hw/virtio/vhost-user-scsi.h"
@@ -48,8 +47,6 @@ typedef struct VHostSCSIPCI VHostSCSIPCI;
 typedef struct VHostUserSCSIPCI VHostUserSCSIPCI;
 typedef struct VHostUserBlkPCI VHostUserBlkPCI;
 typedef struct VirtIORngPCI VirtIORngPCI;
-typedef struct VirtIOInputPCI VirtIOInputPCI;
-typedef struct VirtIOInputHIDPCI VirtIOInputHIDPCI;
 typedef struct VirtIOGPUPCI VirtIOGPUPCI;
 typedef struct VirtIOCryptoPCI VirtIOCryptoPCI;
=20
@@ -338,25 +335,6 @@ struct VirtIORngPCI {
  * virtio-input-pci: This extends VirtioPCIProxy.
  */
 #define TYPE_VIRTIO_INPUT_PCI "virtio-input-pci"
-#define VIRTIO_INPUT_PCI(obj) \
-        OBJECT_CHECK(VirtIOInputPCI, (obj), TYPE_VIRTIO_INPUT_PCI)
-
-struct VirtIOInputPCI {
-    VirtIOPCIProxy parent_obj;
-    VirtIOInput vdev;
-};
-
-#define TYPE_VIRTIO_INPUT_HID_PCI "virtio-input-hid-pci"
-#define TYPE_VIRTIO_KEYBOARD_PCI  "virtio-keyboard-pci"
-#define TYPE_VIRTIO_MOUSE_PCI     "virtio-mouse-pci"
-#define TYPE_VIRTIO_TABLET_PCI    "virtio-tablet-pci"
-#define VIRTIO_INPUT_HID_PCI(obj) \
-        OBJECT_CHECK(VirtIOInputHIDPCI, (obj), TYPE_VIRTIO_INPUT_HID_PCI=
)
-
-struct VirtIOInputHIDPCI {
-    VirtIOPCIProxy parent_obj;
-    VirtIOInputHID vdev;
-};
=20
 /*
  * virtio-gpu-pci: This extends VirtioPCIProxy.
--=20
2.19.1


