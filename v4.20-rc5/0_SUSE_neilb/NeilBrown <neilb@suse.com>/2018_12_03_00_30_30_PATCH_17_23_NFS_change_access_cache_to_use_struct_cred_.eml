Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 03 Dec 2018 08:42:37 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id EACC758014B;
	Sun,  2 Dec 2018 16:33:56 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 02 Dec 2018 16:33:55 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AOgbhVBJY/OHWdnGJBdmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgULPz8rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZXshfSSJPDJ6/?=
 =?us-ascii?q?YYQNAeoOM+lXoJXyqVsVtRuzBxKhBP/txzJSmnP6wbc33uYnHArb3AIgBdUOsH?=
 =?us-ascii?q?HModvtKqgSUOS1wbTSzTXEYfJW3yr25Y/Och8/oPGMWal/fNHKyUkyDAPKkE+c?=
 =?us-ascii?q?ppDiPzOQz+kAtXWQ4el4Ve+3lWIrtwV8riKyysoilIXFnJ8Zx1PY+SljwYs4J8?=
 =?us-ascii?q?W0RFN/bNOkCpdcqi+XOotsTs88XW1kpDw2xqMGtJO0eiUB1Y4pyATFa/OddoiF?=
 =?us-ascii?q?+hLjW/iVITd/nH9lZr2/iAio8US6ye3zSNO00FBUoSpBiNXMsWoN1xPL5siGTP?=
 =?us-ascii?q?ty4Fuh1C6R2wzP7uxIO104mKTFJ5I737I9lYYfvV7CEyL0gEn2ibWZdkQg+uim?=
 =?us-ascii?q?8eTnZbDmq4eYN491jAH+L6svltW8AesmKAgOWXaU+eCl2L3k80z5RqtFjuctn6?=
 =?us-ascii?q?nHv5DVO94bqrS6AwBLyIYj7QiwDzO83NQfh3kHI0pJeAibgIjxJ1HOPPf4AO+7?=
 =?us-ascii?q?g1Stkzdk2erKP7L8ApjWKnjDkbHhfaty6kJGyQozy8xf6IxQCr0bPP3zXUrxvs?=
 =?us-ascii?q?TCDhAlKwy03/rnCNJl24MeQ22PA7OZP7nVsVOS5uIvPvODZIkauDvmL/gl5vju?=
 =?us-ascii?q?jWI2mFMHfKmp24cXZ268Hvh8P0qZZn/siM8bEWgWpgo+UPDqiFqaXD5RYHa9Qb?=
 =?us-ascii?q?gw5jI8CIKgC4fDQZuggLiA3Ce9A51XaXpKClGKEXf0aYqEX+0AZz6VIs9kijYE?=
 =?us-ascii?q?T6SuS5c91RGysw/306BoLvHU+i0ftpLvzsJ16PfRlRwp8Tx0DsKd03yCTm1un2?=
 =?us-ascii?q?MIQSM20757oUBn1liD1q14ieRCFdNP//NJThs6NZnEwux5Ed/yXBjNftOISFm8?=
 =?us-ascii?q?RNWmDio8TtYww98IfkZ8FM+ujhHF3yq2HbAVk6aHC4Az8qLZx3LxPdpyy27a1K?=
 =?us-ascii?q?k9iFkrWtZAOne4hqFh7QTTB5TGk0OCl6m0c6QQ2yrN9GSGzWqKp0xYVA9wUaPY?=
 =?us-ascii?q?XXEQfEfWrNL55l/cQL+qE7goLgxBycuaIKtQdtLplUlGROvkONnGfm2+gXmwCg?=
 =?us-ascii?q?iSyrOMdoXqfX4d0zvbCEUflwAT/HCGNRUxByu7omLeCiBuGkzrY0/27eZ+r3a7?=
 =?us-ascii?q?RFcuzw6Wd01hy6a1+hkNiPyASvMT27UEuDshqzR0Blq9w8jaC92apwplfaVcZ9?=
 =?us-ascii?q?w97UxD1WLYsQx9I5OhI7pjhl4YbwR4oUfu2w9rBYVHlMggtGkqwxZqKaKEzFNB?=
 =?us-ascii?q?cCuV0or0OrLJJWj94hCuZ7TN1VHDzdmZ4KEP6Pc/q1X9pwypEksi83N609hayX?=
 =?us-ascii?q?ec55PKDBYMXpL1SEo46x96p7TCaCkn+4zUzWFsMbWzsjLa29MpGfEpxQq6c9Ze?=
 =?us-ascii?q?MKOLDgnyE8IBCsiqKewqnUWpbx0eMOBT8q40I92pd/+c1KG3O+ZgmSqsjX5b74?=
 =?us-ascii?q?BlzkKM6y18R/bS35YE3/6XxBGHWCr7jFu7tMD4h5pEZTALEmWj0yfkAJNeabNo?=
 =?us-ascii?q?fYYMD2ejOMm3xtR4h57wVH9U7l+jB1Ua2MC3fRqedUDy3QpV1U4Pu3yohTO4zy?=
 =?us-ascii?q?BokzEutqee3C3Oz/7idRYdIW5LWW9igEzoIYi1idAaQUepYxIolBuj+Ub12axb?=
 =?us-ascii?q?qL5jIGnUREdCZzL2IH16UqusqrqCZNZC6JEyviVNU+S8YleaRqTmoxQA0CPjHG?=
 =?us-ascii?q?pexDYleDGsoZj5mx16iGSALHd8tnbZeMdwxQvB69zYX/Jewj0GRCxggznNGle8?=
 =?us-ascii?q?J8Wp/cmTl5rbsuGxTWWhWodRcSnqy4ONry+75WxsAR2ikPG/gNznEQ4m0SDl09?=
 =?us-ascii?q?lmTznHrBH5YoPzzaS1LfpnflV0BF/788d6GZtxkooqiJEQxHgVnJOV/XUcnGf3?=
 =?us-ascii?q?MNVb37/+bXUXST4Kxd7V/Bbq2El5In2VwIL5U22XwtF9aNmifmMWxiU94thPCK?=
 =?us-ascii?q?eV77xLhzF5o1SmogLKffhygC0dxuAw534AjOEEow4tziSbArAPEkhUJy3slxKU?=
 =?us-ascii?q?79+gqKVbfnqgcb+11EBmh9CuEKmCoh1AWHb+YpoiAShw7sBlPFPNynLz7JzkeM?=
 =?us-ascii?q?LLbdISrRCUlxbAj+5IKJM+jPYKhCxnOX7jsn0h0eI0kRtu3ZSitoidN2pt5L65?=
 =?us-ascii?q?AgJfNjDtfMwc4DbtjaJDnsqM24CvA45sGjEKXJvuUPKpHygetfXhNwaSDjI8rm?=
 =?us-ascii?q?2XFqbYHQ+a8E1mtW7AE4i3N3GLI3kU1ddiSwOYJENBmwAYRik6koQ6FgC3x8zh?=
 =?us-ascii?q?bUF56SoK5lPjrhtMy+RoNwTwU2vFpQeobCs0R4abLBZM8g5C4ELVO9SE7u1vBy?=
 =?us-ascii?q?FY4oGhrAuVJ22bYARIEHgJWlGeCFDlJLWu/t7A8+6XBuelK/vOYLOOqfFRVvuS?=
 =?us-ascii?q?xJKv1Jdm8CiINsmVInZiCPg70FJZXX9lA8TZhykPSysPmiLNccGbpRS8+i52rs?=
 =?us-ascii?q?yl8/TrQgXv5YSRBLtILNVv4Au7gaOCN+6WmSZ4JixU1pIKxX/U1rcf2EQehD1p?=
 =?us-ascii?q?dzmoCb4ArzLCTLrMmq9LCB4Wczl8NNZT4KImwAZMOdTXitf01rNjiv41ClFFVU?=
 =?us-ascii?q?Hum82zZMwKJX29O03DBEqRKLuGIjjLydntYaygUb1QkPlUtxqotDaHEk/jOy6P?=
 =?us-ascii?q?mCXzWx+zMeFDkiebMQdauIG8dBZtFGfiQMjnah29LN94kzk2zacoiXPNMG4WKS?=
 =?us-ascii?q?J8fF9Vrr2M8SNYhe1yGmxb4XpjKOmEmiCZ4PHZK5YWq/RrBCt0mvle4HQ7zbtV?=
 =?us-ascii?q?8S5FSOZ0mCvUst5hvVWmnvOTxTpgVRod4gpM0cip+w1II7jS+9FuWHvA8AlHpT?=
 =?us-ascii?q?GaBRUHo9d+ItPutqRc0dXU0qXpJ2EGu/nU4MAfT+zZNs+deC4qMQfiG3jQARUI?=
 =?us-ascii?q?VxasL2jUg0Ebm/aXoDndjJU0pNDIkYsSTbkTAF4xH+IGDUJNH9EYJppzGDQ+nu?=
 =?us-ascii?q?jfxPIS4nyy5DzAR8FXtI3cSrrGHe/oLjrfiKhHYxYC3KjkBYQaM4j2wVd6Y1J3?=
 =?us-ascii?q?2o/NHhyUFflLpCQpVQQ0vUBE83VkBjk63UTsLBim4GIWHP25hDYwhxd3efxr/z?=
 =?us-ascii?q?DptQQZPF3P8Q09kU0bg9L6h3jFdjPwKK2YRpxNBmz/sE1nYcCzeBp8cQDnxR8s?=
 =?us-ascii?q?DzzDXb8EyuI4LW0=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A8AAD9eARch0O0hNFkHQEBBQEHBQGBU?=
 =?us-ascii?q?wYBCwGDayeDeZQhgWg5gzGKRRGJLYF2KRMBhDsDgzgiNgcNAQMBAQEBAQECARM?=
 =?us-ascii?q?BAQEKCwkIKS+CNiQBgmIDAwECIARSBgkBASQCGA4CAgNEEAYBEgWDHIF1DQQBo?=
 =?us-ascii?q?iV8M4QCAYYbgQuLEReBP0CBEAEzh0qDGoJXAokMGgqGRIEGj0YJgwuOSQqJXId?=
 =?us-ascii?q?AiQSRNg2BeXAVgyeCJxeNZgFKLDKBBQEBjRUBAQ?=
X-IPAS-Result: =?us-ascii?q?A0A8AAD9eARch0O0hNFkHQEBBQEHBQGBUwYBCwGDayeDeZQ?=
 =?us-ascii?q?hgWg5gzGKRRGJLYF2KRMBhDsDgzgiNgcNAQMBAQEBAQECARMBAQEKCwkIKS+CN?=
 =?us-ascii?q?iQBgmIDAwECIARSBgkBASQCGA4CAgNEEAYBEgWDHIF1DQQBoiV8M4QCAYYbgQu?=
 =?us-ascii?q?LEReBP0CBEAEzh0qDGoJXAokMGgqGRIEGj0YJgwuOSQqJXIdAiQSRNg2BeXAVg?=
 =?us-ascii?q?yeCJxeNZgFKLDKBBQEBjRUBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,308,1539673200"; 
   d="scan'208";a="54605761"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 02 Dec 2018 16:33:53 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726111AbeLCAdx (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sun, 2 Dec 2018 19:33:53 -0500
Received: from mx2.suse.de ([195.135.220.15]:41364 "EHLO mx1.suse.de"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1725785AbeLCAdx (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Sun, 2 Dec 2018 19:33:53 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay1.suse.de (unknown [195.135.220.254])
        by mx1.suse.de (Postfix) with ESMTP id B4531AC9C;
        Mon,  3 Dec 2018 00:33:45 +0000 (UTC)
From: NeilBrown <neilb@suse.com>
To: "J. Bruce Fields" <bfields@fieldses.org>,
        Chuck Lever <chuck.lever@oracle.com>,
        Jeff Layton <jlayton@kernel.org>,
        Trond Myklebust <trond.myklebust@hammerspace.com>,
        Anna Schumaker <anna.schumaker@netapp.com>
Date: Mon, 03 Dec 2018 11:30:30 +1100
Subject: [PATCH 17/23] NFS: change access cache to use 'struct cred'.
Cc: Linux NFS Mailing List <linux-nfs@vger.kernel.org>,
        linux-kernel@vger.kernel.org
Message-ID: <154379703081.28598.13989277908387689067.stgit@noble>
In-Reply-To: <154379689752.28598.6750646657534626618.stgit@noble>
References: <154379689752.28598.6750646657534626618.stgit@noble>
User-Agent: StGit/0.17.1-dirty
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Rather than keying the access cache with 'struct rpc_cred',
use 'struct cred'.  Then use cred_fscmp() to compare
credentials rather than comparing the raw pointer.

A benefit of this approach is that in the common case we avoid the
rpc_lookup_cred_nonblock() call which can be slow when the cred cache is large.
This also keeps many fewer items pinned in the rpc cred cache, so the
cred cache is less likely to get large.

Signed-off-by: NeilBrown <neilb@suse.com>
---
 fs/nfs/dir.c           |   44 +++++++++++++++++++-------------------------
 fs/nfs/nfs3proc.c      |    9 ++++++++-
 fs/nfs/nfs4proc.c      |   16 ++++++++++++----
 include/linux/nfs_fs.h |    4 ++--
 4 files changed, 41 insertions(+), 32 deletions(-)

diff --git a/fs/nfs/dir.c b/fs/nfs/dir.c
index 71b2e390becf..4dc61b6f74e8 100644
--- a/fs/nfs/dir.c
+++ b/fs/nfs/dir.c
@@ -2139,7 +2139,7 @@ MODULE_PARM_DESC(nfs_access_max_cachesize, "NFS access maximum total cache lengt
 
 static void nfs_access_free_entry(struct nfs_access_entry *entry)
 {
-	put_rpccred(entry->cred);
+	put_cred(entry->cred);
 	kfree_rcu(entry, rcu_head);
 	smp_mb__before_atomic();
 	atomic_long_dec(&nfs_access_nr_entries);
@@ -2265,17 +2265,18 @@ void nfs_access_zap_cache(struct inode *inode)
 }
 EXPORT_SYMBOL_GPL(nfs_access_zap_cache);
 
-static struct nfs_access_entry *nfs_access_search_rbtree(struct inode *inode, struct rpc_cred *cred)
+static struct nfs_access_entry *nfs_access_search_rbtree(struct inode *inode, const struct cred *cred)
 {
 	struct rb_node *n = NFS_I(inode)->access_cache.rb_node;
-	struct nfs_access_entry *entry;
 
 	while (n != NULL) {
-		entry = rb_entry(n, struct nfs_access_entry, rb_node);
+		struct nfs_access_entry *entry =
+			rb_entry(n, struct nfs_access_entry, rb_node);
+		int cmp = cred_fscmp(cred, entry->cred);
 
-		if (cred < entry->cred)
+		if (cmp < 0)
 			n = n->rb_left;
-		else if (cred > entry->cred)
+		else if (cmp > 0)
 			n = n->rb_right;
 		else
 			return entry;
@@ -2283,7 +2284,7 @@ static struct nfs_access_entry *nfs_access_search_rbtree(struct inode *inode, st
 	return NULL;
 }
 
-static int nfs_access_get_cached(struct inode *inode, struct rpc_cred *cred, struct nfs_access_entry *res, bool may_block)
+static int nfs_access_get_cached(struct inode *inode, const struct cred *cred, struct nfs_access_entry *res, bool may_block)
 {
 	struct nfs_inode *nfsi = NFS_I(inode);
 	struct nfs_access_entry *cache;
@@ -2326,7 +2327,7 @@ static int nfs_access_get_cached(struct inode *inode, struct rpc_cred *cred, str
 	return -ENOENT;
 }
 
-static int nfs_access_get_cached_rcu(struct inode *inode, struct rpc_cred *cred, struct nfs_access_entry *res)
+static int nfs_access_get_cached_rcu(struct inode *inode, const struct cred *cred, struct nfs_access_entry *res)
 {
 	/* Only check the most recently returned cache entry,
 	 * but do it without locking.
@@ -2363,15 +2364,17 @@ static void nfs_access_add_rbtree(struct inode *inode, struct nfs_access_entry *
 	struct rb_node **p = &root_node->rb_node;
 	struct rb_node *parent = NULL;
 	struct nfs_access_entry *entry;
+	int cmp;
 
 	spin_lock(&inode->i_lock);
 	while (*p != NULL) {
 		parent = *p;
 		entry = rb_entry(parent, struct nfs_access_entry, rb_node);
+		cmp = cred_fscmp(set->cred, entry->cred);
 
-		if (set->cred < entry->cred)
+		if (cmp < 0)
 			p = &parent->rb_left;
-		else if (set->cred > entry->cred)
+		else if (cmp > 0)
 			p = &parent->rb_right;
 		else
 			goto found;
@@ -2395,7 +2398,7 @@ void nfs_access_add_cache(struct inode *inode, struct nfs_access_entry *set)
 	if (cache == NULL)
 		return;
 	RB_CLEAR_NODE(&cache->rb_node);
-	cache->cred = get_rpccred(set->cred);
+	cache->cred = get_cred(set->cred);
 	cache->mask = set->mask;
 
 	/* The above field assignments must be visible
@@ -2459,7 +2462,7 @@ void nfs_access_set_mask(struct nfs_access_entry *entry, u32 access_result)
 }
 EXPORT_SYMBOL_GPL(nfs_access_set_mask);
 
-static int nfs_do_access(struct inode *inode, struct rpc_cred *cred, int mask)
+static int nfs_do_access(struct inode *inode, const struct cred *cred, int mask)
 {
 	struct nfs_access_entry cache;
 	bool may_block = (mask & MAY_NOT_BLOCK) == 0;
@@ -2523,7 +2526,7 @@ static int nfs_open_permission_mask(int openflags)
 	return mask;
 }
 
-int nfs_may_open(struct inode *inode, struct rpc_cred *cred, int openflags)
+int nfs_may_open(struct inode *inode, const struct cred *cred, int openflags)
 {
 	return nfs_do_access(inode, cred, nfs_open_permission_mask(openflags));
 }
@@ -2548,7 +2551,7 @@ static int nfs_execute_ok(struct inode *inode, int mask)
 
 int nfs_permission(struct inode *inode, int mask)
 {
-	struct rpc_cred *cred;
+	const struct cred *cred = current_cred();
 	int res = 0;
 
 	nfs_inc_stats(inode, NFSIOS_VFSACCESS);
@@ -2582,20 +2585,11 @@ int nfs_permission(struct inode *inode, int mask)
 
 	/* Always try fast lookups first */
 	rcu_read_lock();
-	cred = rpc_lookup_cred_nonblock();
-	if (!IS_ERR(cred))
-		res = nfs_do_access(inode, cred, mask|MAY_NOT_BLOCK);
-	else
-		res = PTR_ERR(cred);
+	res = nfs_do_access(inode, cred, mask|MAY_NOT_BLOCK);
 	rcu_read_unlock();
 	if (res == -ECHILD && !(mask & MAY_NOT_BLOCK)) {
 		/* Fast lookup failed, try the slow way */
-		cred = rpc_lookup_cred();
-		if (!IS_ERR(cred)) {
-			res = nfs_do_access(inode, cred, mask);
-			put_rpccred(cred);
-		} else
-			res = PTR_ERR(cred);
+		res = nfs_do_access(inode, cred, mask);
 	}
 out:
 	if (!res && (mask & MAY_EXEC))
diff --git a/fs/nfs/nfs3proc.c b/fs/nfs/nfs3proc.c
index 71bc16225b98..f7174f3a9575 100644
--- a/fs/nfs/nfs3proc.c
+++ b/fs/nfs/nfs3proc.c
@@ -195,15 +195,20 @@ static int nfs3_proc_access(struct inode *inode, struct nfs_access_entry *entry)
 		.access		= entry->mask,
 	};
 	struct nfs3_accessres	res;
+	struct auth_cred acred = {
+		.cred		= entry->cred,
+	};
 	struct rpc_message msg = {
 		.rpc_proc	= &nfs3_procedures[NFS3PROC_ACCESS],
 		.rpc_argp	= &arg,
 		.rpc_resp	= &res,
-		.rpc_cred	= entry->cred,
+		.rpc_cred	= rpc_lookup_generic_cred(&acred, 0, GFP_NOFS),
 	};
 	int status = -ENOMEM;
 
 	dprintk("NFS call  access\n");
+	if (!msg.rpc_cred)
+		goto out;
 	res.fattr = nfs_alloc_fattr();
 	if (res.fattr == NULL)
 		goto out;
@@ -214,6 +219,8 @@ static int nfs3_proc_access(struct inode *inode, struct nfs_access_entry *entry)
 		nfs_access_set_mask(entry, res.access);
 	nfs_free_fattr(res.fattr);
 out:
+	if (msg.rpc_cred)
+		put_rpccred(msg.rpc_cred);
 	dprintk("NFS reply access: %d\n", status);
 	return status;
 }
diff --git a/fs/nfs/nfs4proc.c b/fs/nfs/nfs4proc.c
index cafa155a053e..bf97331c02d3 100644
--- a/fs/nfs/nfs4proc.c
+++ b/fs/nfs/nfs4proc.c
@@ -1772,7 +1772,7 @@ static struct nfs4_state *nfs4_try_open_cached(struct nfs4_opendata *opendata)
 		rcu_read_unlock();
 		nfs_release_seqid(opendata->o_arg.seqid);
 		if (!opendata->is_recover) {
-			ret = nfs_may_open(state->inode, state->owner->so_cred, open_mode);
+			ret = nfs_may_open(state->inode, state->owner->so_cred->cr_cred, open_mode);
 			if (ret != 0)
 				goto out;
 		}
@@ -2511,7 +2511,7 @@ static int nfs4_opendata_access(struct rpc_cred *cred,
 	} else if ((fmode & FMODE_READ) && !opendata->file_created)
 		mask = NFS4_ACCESS_READ;
 
-	cache.cred = cred;
+	cache.cred = cred->cr_cred;
 	nfs_access_set_mask(&cache, opendata->o_res.access_result);
 	nfs_access_add_cache(state->inode, &cache);
 
@@ -4188,18 +4188,25 @@ static int _nfs4_proc_access(struct inode *inode, struct nfs_access_entry *entry
 	struct nfs4_accessres res = {
 		.server = server,
 	};
+	struct auth_cred acred = {
+		.cred = entry->cred,
+	};
 	struct rpc_message msg = {
 		.rpc_proc = &nfs4_procedures[NFSPROC4_CLNT_ACCESS],
 		.rpc_argp = &args,
 		.rpc_resp = &res,
-		.rpc_cred = entry->cred,
+		.rpc_cred = rpc_lookup_generic_cred(&acred, 0, GFP_NOFS),
 	};
 	int status = 0;
 
+	if (!msg.rpc_cred)
+		return -ENOMEM;
 	if (!nfs4_have_delegation(inode, FMODE_READ)) {
 		res.fattr = nfs_alloc_fattr();
-		if (res.fattr == NULL)
+		if (res.fattr == NULL) {
+			put_rpccred(msg.rpc_cred);
 			return -ENOMEM;
+		}
 		args.bitmask = server->cache_consistency_bitmask;
 	}
 
@@ -4210,6 +4217,7 @@ static int _nfs4_proc_access(struct inode *inode, struct nfs_access_entry *entry
 			nfs_refresh_inode(inode, res.fattr);
 	}
 	nfs_free_fattr(res.fattr);
+	put_rpccred(msg.rpc_cred);
 	return status;
 }
 
diff --git a/include/linux/nfs_fs.h b/include/linux/nfs_fs.h
index ecf22c0034d5..7d2064bd421f 100644
--- a/include/linux/nfs_fs.h
+++ b/include/linux/nfs_fs.h
@@ -51,7 +51,7 @@
 struct nfs_access_entry {
 	struct rb_node		rb_node;
 	struct list_head	lru;
-	struct rpc_cred *	cred;
+	const struct cred *	cred;
 	__u32			mask;
 	struct rcu_head		rcu_head;
 };
@@ -491,7 +491,7 @@ extern const struct dentry_operations nfs_dentry_operations;
 extern void nfs_force_lookup_revalidate(struct inode *dir);
 extern int nfs_instantiate(struct dentry *dentry, struct nfs_fh *fh,
 			struct nfs_fattr *fattr, struct nfs4_label *label);
-extern int nfs_may_open(struct inode *inode, struct rpc_cred *cred, int openflags);
+extern int nfs_may_open(struct inode *inode, const struct cred *cred, int openflags);
 extern void nfs_access_zap_cache(struct inode *inode);
 
 /*


