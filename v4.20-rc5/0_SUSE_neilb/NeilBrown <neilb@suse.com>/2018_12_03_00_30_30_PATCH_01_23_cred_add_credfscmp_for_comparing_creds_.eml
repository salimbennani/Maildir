Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 03 Dec 2018 08:42:40 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 74FF458014B;
	Sun,  2 Dec 2018 16:35:08 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by fmsmga002-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 02 Dec 2018 16:35:07 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AqNiHgREZ0kn6KXCOU+0MLZ1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75ocy9bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJVyJPHI2y?=
 =?us-ascii?q?YZYMAeUDM+ZXoYbyqEcBoxulHQmhBvjiyiNKi3LswaE2z/4sHAPA0Qc9H9wOqn?=
 =?us-ascii?q?PUrNDtOakKT++1za3IwCjZb/NR1zb97pXDfxcnof6SXLJwddHexFI0FwPYlVWf?=
 =?us-ascii?q?t5bpMC+S1uQIqmWW6fdrW+G3i2M/tQ19vjyiyt0xhoTHmI4Z0E3I+CZlzIovJN?=
 =?us-ascii?q?C1SlZ3bcOgHZZQrS2WKoV7T8M4T212pio21qcKtYC7cSUFzpks2gTRZOadc4eS?=
 =?us-ascii?q?5xLuTOaRLil8hHJiYL+/mRmy/la6yuHmVcm7zkxKrixbndnIrHwN0AbT6sefRv?=
 =?us-ascii?q?t8+EeuxyqP2hjN5u1YJU04j7fXJpA/zrIqi5YesljPEjX3lUj0lKOWc18r+ums?=
 =?us-ascii?q?6+TpeLXmoZqcOpdwigH/NKQuh8O+Df07MgcQRWib//qz1Ln68U3+TrRKiOM5kr?=
 =?us-ascii?q?PCvZDEKsQUuLS5DxVW0ok98Ra/CSmp0NACkXkANlJFdwqLj5L1NFHWPPD4EfC/?=
 =?us-ascii?q?jkyokDdqxPDJIKftA5rQLnXYlLfhfLB961NTyQYpzNBf4Y5UBa8FIP7pRkDxs9?=
 =?us-ascii?q?nYBAcjMwOo2+bnFMl91oQGVGKPGKCZMb/SvkWP5u41I+mMeZUauDDyK/U+4/7u?=
 =?us-ascii?q?jHk5mUISfKWz3JsXbmy4EepiI0mDfXXshdIBG38QvgUiVOzqlEGCUTlLanawWK?=
 =?us-ascii?q?Iz+Cs3CIGhDYfFQICth6eM3CO6Hp1Qe2BHBUqAEXbud4WYRfgMbDieLdNmkjwB?=
 =?us-ascii?q?TbKhUZMu1QmytA/mzLpqNvDb+jYYtZLk19h5/ffTmgsw9TFvC8Sd0meNT3x7n2?=
 =?us-ascii?q?8SRj822rx/rlJ5yluZzad4hPlYH8RJ5/xVSgc6KYLcz+tiBtDxQA3BeM2FSFKn?=
 =?us-ascii?q?Qtq8BzExQck8w9sPY0Z7BtWjgQrP3yusA78JibOLAIY4/b7b33j0P8x90WrJ1L?=
 =?us-ascii?q?E9j1k6RctCLXCpibRh9wfNHYLJk1+Wl6CxdasC2i7B82ODzWmLvEFcSwNwVaTF?=
 =?us-ascii?q?XXYCZkrZt9j550XCT6OwBrQjKAdO1cmCKq5SYN3zkVpGXOvjOMjZY2+phmi/Hw?=
 =?us-ascii?q?iIya2WYIrqYWod2j7dB1YCkw0I+XaGNA4+Bjquom7EDTxuE07vbF3o8eVktHy7?=
 =?us-ascii?q?SUo0xRmQb0J9z7q15gIVhfuERvMP37IEvSAhqyl0HFe9xd7WF8CMpw17fKVYYN?=
 =?us-ascii?q?M95lhH2Hndtwx8OJygMq9jikQfcwRxo0PhyRF3Bp9cnsgtqXMg1BByJr6A0FNd?=
 =?us-ascii?q?azOY2oj9NafTKmbs8xGgda7X1kvF39aL56gA8vI4q1bkvAG3DUci93Rn099I03?=
 =?us-ascii?q?qT/JnKDQwSUY7vXUYz7RR1u7baYiwl7YPOyXJsKbW0siPF298xBOol1wyscMtF?=
 =?us-ascii?q?PKKFFA/9CcsaB8e1JewumlipaA8EPe9I+K41OcOma+WJ2KqxMOl8mzKmiHxN4J?=
 =?us-ascii?q?ph3UKU6yp8VunI0o4fw/GZwgSITS38g0qmssztn4BLeysSHmumxSf4HoFRYrB9?=
 =?us-ascii?q?cpgRCWepJc263dF+h5/rW35F+1+vHVIG2Mm1eRWMa1zxxxFf1UMSoXa/gyu30y?=
 =?us-ascii?q?R0ky01rqqYxCHPw+XieAAHO2JRX2likFHsLJOwj9AbWkiocgcomAGk5Ub826hU?=
 =?us-ascii?q?uqB/I3PPTkdPeij8N3tiXbeotrqef85P74slsSdNX+SmYlCaSbn9rwEB0yz5HG?=
 =?us-ascii?q?texzE7dze0tZX/hBF6jGOdLHBurHvWY81wxBHf5MDCSv5VxDYJWC54iTzPDFim?=
 =?us-ascii?q?I9ap5cmUl4vEsu2mV2OuTJpTfTPpzYOBsiu2/mlqARy5n/CuldzrCwk60Snn19?=
 =?us-ascii?q?Z0USXEtgrzYo7u166iK+JoYlFoBEPg68p9Aox+kZE/hJAK1Xgam5Wa53wHkWjo?=
 =?us-ascii?q?PNVf2KL+amcNRDERz97U5gjlxFNsLnaTy43lUXWdx9NrZ8OmbWMOxiI988dKBb?=
 =?us-ascii?q?+R7LxFnit6uEC0rAzPbvhmgjcS1+Eu52UEjOETtwog1SGdArEUHUlFMi3gjRWI?=
 =?us-ascii?q?79airKpJYGaja6S/1E17ndq5FrGNvhlcWGrlepclBSJw8sJ/MFfW3Hzy8I7kfs?=
 =?us-ascii?q?TQbckIth2ViBrAi+lVKJQslvsFnyZnOGT9vWE7xO4/lxBhwZa6vI2fIWV34K25?=
 =?us-ascii?q?GgJYNiHyZ84L4T7il6FensKL34y1GpVhBy4GXJ/pTfKuDTITuu7rNweIED0gtH?=
 =?us-ascii?q?ibHaDTEhOY6Edjt3jPCYykN2mLJHkFytVvXBudK1ZagA8KRzU2hII5GhqpxMz8?=
 =?us-ascii?q?c0d5+zYR6UTjqhZXzuJoNh//UnrQpQuyazc0ToSfIwRS7g1Y+0jVNsme5PppHy?=
 =?us-ascii?q?5E5p2hsBCNKmuDagVICmEJR1WEB035Mbmo/9XA6O+YBuyxL/bVZbWOqOpeV+qH?=
 =?us-ascii?q?xJ6104tm+SqMOduLPnV4E/I73U9DV2hjG8vFgzUPVzAXlyXVYs6buhi8+y53rs?=
 =?us-ascii?q?O+8PjxWwLv/4yPC7RMPtV15hC2mryON+qRhCZ/NDZZ2YkAxX7OyLgDwlESjzti?=
 =?us-ascii?q?eCWqEbQFrSTNVr7fmrdLDx4HbCN+LNFH778n0QlXJ8Haisn51rp5jvMuD1dFVF?=
 =?us-ascii?q?rhmtymZMAQImG9Mk/HC1iPNLicOTLLxMT3a7umSbJMlOVUqwGwuTGDHk//PzSD?=
 =?us-ascii?q?kiPlWAy1Pe5QjCGUIhpetZq5chZsD2jjUd3nZge6MN9xkT0537k0imnWOm4bND?=
 =?us-ascii?q?h2a1lNoaGI7SNEnvV/HHRM73p/IumCniaZ7u/YJY4XsPtrGCt0ke1a7W8+y7tU?=
 =?us-ascii?q?6iFEWfN0lDHTrt5ov1GpjO2PxiB7XxpJrzYYzL6M6A9Af+3z7IRLVD7q/R8J4X?=
 =?us-ascii?q?7aQ0AAqdpoDtH0k65Rx9zDj6/objBY/ISQteAcGsPXYOaKLnc7eU7iGCPfD00B?=
 =?us-ascii?q?QCCmL0nYnUVWlPzU/XqQ+NxyiJXiltIqQ65HU1p9QvEeA1V5G9oqI5ptWD4g17?=
 =?us-ascii?q?mBg5hMrUakqx/dDOBLvZTKXO+JHb27NCyei7UCYgoLxb7yMJ8PHo3y3klvcEJi?=
 =?us-ascii?q?lY/HXUHXWIYJ6gRnaAZ8m05N7X13TWApkxbsbAWkpmQYFeOxlx07kCN4bPgk7C?=
 =?us-ascii?q?+q6FAycAnkviw1xW88mNHPmzeOdnalKqqxWYt+EDfvug46NZatEFU9VhG7gUEx?=
 =?us-ascii?q?bGSMfLlWlbY1MDkz0AI=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AaAABveQRch0O0hNFkHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGDayeDeYgYjAmBaDmDMYpFEYktgXEuEwGEOwODOCI0CQ0BAwEBAQEBAQI?=
 =?us-ascii?q?BEwEBAQoLCQgpL4I2JAGCYgMDAQIgBFIGCQEBJAIYDgICA0QQBgESBYMcgXUNB?=
 =?us-ascii?q?AGiJXwzhAIBhhuBC4sRF4E/QIERM4pkglcCj3SQTAmDC45JColch0AsiFiRL4I?=
 =?us-ascii?q?NcBWDJ4InF41mAUosMoEFAQGNFQEB?=
X-IPAS-Result: =?us-ascii?q?A0AaAABveQRch0O0hNFkHQEBBQEHBQGBUQgBCwGDayeDeYg?=
 =?us-ascii?q?YjAmBaDmDMYpFEYktgXEuEwGEOwODOCI0CQ0BAwEBAQEBAQIBEwEBAQoLCQgpL?=
 =?us-ascii?q?4I2JAGCYgMDAQIgBFIGCQEBJAIYDgICA0QQBgESBYMcgXUNBAGiJXwzhAIBhhu?=
 =?us-ascii?q?BC4sRF4E/QIERM4pkglcCj3SQTAmDC45JColch0AsiFiRL4INcBWDJ4InF41mA?=
 =?us-ascii?q?UosMoEFAQGNFQEB?=
X-IronPort-AV: E=Sophos;i="5.56,308,1539673200"; 
   d="scan'208";a="43212663"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 02 Dec 2018 16:35:05 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1725901AbeLCAcI (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sun, 2 Dec 2018 19:32:08 -0500
Received: from mx2.suse.de ([195.135.220.15]:40780 "EHLO mx1.suse.de"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1725785AbeLCAcI (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Sun, 2 Dec 2018 19:32:08 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay1.suse.de (unknown [195.135.220.254])
        by mx1.suse.de (Postfix) with ESMTP id 648BBAD90;
        Mon,  3 Dec 2018 00:32:02 +0000 (UTC)
From: NeilBrown <neilb@suse.com>
To: "J. Bruce Fields" <bfields@fieldses.org>,
        Chuck Lever <chuck.lever@oracle.com>,
        Jeff Layton <jlayton@kernel.org>,
        Trond Myklebust <trond.myklebust@hammerspace.com>,
        Anna Schumaker <anna.schumaker@netapp.com>
Date: Mon, 03 Dec 2018 11:30:30 +1100
Subject: [PATCH 01/23] cred: add cred_fscmp() for comparing creds.
Cc: Linux NFS Mailing List <linux-nfs@vger.kernel.org>,
        linux-kernel@vger.kernel.org
Message-ID: <154379703003.28598.12775774846678611265.stgit@noble>
In-Reply-To: <154379689752.28598.6750646657534626618.stgit@noble>
References: <154379689752.28598.6750646657534626618.stgit@noble>
User-Agent: StGit/0.17.1-dirty
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

NFS needs to compare to credentials, to see if they can
be treated the same w.r.t. filesystem access.  Sometimes
an ordering is needed when credentials are used as a key
to an rbtree.
NFS currently has its own private credential management from
before 'struct cred' existed.  To move it over to more consistent
use of 'struct cred' we need a comparison function.
This patch adds that function.

Signed-off-by: NeilBrown <neilb@suse.com>
---
 include/linux/cred.h |    1 +
 kernel/cred.c        |   55 ++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 56 insertions(+)

diff --git a/include/linux/cred.h b/include/linux/cred.h
index 7eed6101c791..f1085767e1b3 100644
--- a/include/linux/cred.h
+++ b/include/linux/cred.h
@@ -169,6 +169,7 @@ extern int change_create_files_as(struct cred *, struct inode *);
 extern int set_security_override(struct cred *, u32);
 extern int set_security_override_from_ctx(struct cred *, const char *);
 extern int set_create_files_as(struct cred *, struct inode *);
+extern int cred_fscmp(const struct cred *, const struct cred *);
 extern void __init cred_init(void);
 
 /*
diff --git a/kernel/cred.c b/kernel/cred.c
index ecf03657e71c..0b3ac72bd717 100644
--- a/kernel/cred.c
+++ b/kernel/cred.c
@@ -19,6 +19,7 @@
 #include <linux/security.h>
 #include <linux/binfmts.h>
 #include <linux/cn_proc.h>
+#include <linux/uidgid.h>
 
 #if 0
 #define kdebug(FMT, ...)						\
@@ -564,6 +565,60 @@ void revert_creds(const struct cred *old)
 }
 EXPORT_SYMBOL(revert_creds);
 
+/**
+ * cred_fscmp - Compare two credentials with respect to filesystem access.
+ * @a: The first credential
+ * @b: The second credential
+ *
+ * cred_cmp() will return zero if both credentials have the same
+ * fsuid, fsgid, and supplementary groups.  That is, if they will both
+ * provide the same access to files based on mode/uid/gid.
+ * If the credentials are different, then either -1 or 1 will
+ * be returned depending on whether @a comes before or after @b
+ * respectively in an arbitrary, but stable, ordering of credentials.
+ *
+ * Return: -1, 0, or 1 depending on comparison
+ */
+int cred_fscmp(const struct cred *a, const struct cred *b)
+{
+	struct group_info *ga, *gb;
+	int g;
+
+	if (a == b)
+		return 0;
+	if (uid_lt(a->fsuid, b->fsuid))
+		return -1;
+	if (uid_gt(a->fsuid, b->fsuid))
+		return 1;
+
+	if (gid_lt(a->fsgid, b->fsgid))
+		return -1;
+	if (gid_gt(a->fsgid, b->fsgid))
+		return 1;
+
+	ga = a->group_info;
+	gb = b->group_info;
+	if (ga == gb)
+		return 0;
+	if (ga == NULL)
+		return -1;
+	if (gb == NULL)
+		return 1;
+	if (ga->ngroups < gb->ngroups)
+		return -1;
+	if (ga->ngroups > gb->ngroups)
+		return 1;
+
+	for (g = 0; g < ga->ngroups; g++) {
+		if (gid_lt(ga->gid[g], gb->gid[g]))
+			return -1;
+		if (gid_gt(ga->gid[g], gb->gid[g]))
+			return 1;
+	}
+	return 0;
+}
+EXPORT_SYMBOL(cred_fscmp);
+
 /*
  * initialise the credentials stuff
  */


