Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 08:52:11 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 3221B580213;
	Thu, 29 Nov 2018 15:06:40 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 15:06:40 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A55ZF6xwc2Xvb4ObXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e4VKPad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWpPUNhfWSJcAY2z?=
 =?us-ascii?q?bYUPAOQOMulEoIf9vEMOoBmlCAmwBu7i0CNEimPs0KA41ekqDAHI3BYnH9ILqH?=
 =?us-ascii?q?natMv6NKYWUe2o1qnIyjvCb/VL0jr67ojHbBEhofWXUr9rasrR1FIvGB3fglqM?=
 =?us-ascii?q?rozlOiqY2+IQuGaY9+ptTfyjh3Ijpg1rvzSiyNkghpPUio8W1lzI7yR0zYQtKd?=
 =?us-ascii?q?GlTEN2YcSoHIZeuiyaLYd6XN0uT31ytCokyrALtpi2dzUQxps93R7QcfmHfpCI?=
 =?us-ascii?q?4h39UOaRJi91hGxqeL2hnRa+60ugxfPmVsmyzllKqjBJkt7WtnACzxDT686HRe?=
 =?us-ascii?q?Vh/kq5xzqDywTe5vtZLU06i6bXMYMtz70smpYJsEnOHDf6mEDsg6+XckUk9PKo?=
 =?us-ascii?q?6+PiYrj+op+cNol0ihzxM6g3mcywH/44Mg4QUGif4Oi807Pi/UvnT7VQlfA2jK?=
 =?us-ascii?q?bZv47AJcgBpa62HRVV0oA95Ba7FTum184YnXYfIFJfZB2Hl5TpO03JIP3gCfe/?=
 =?us-ascii?q?glesnylxy/HJI73sGZHNLnnFkLf8crdx8U9cyAwvzd9B45JYEK0OIPX2WkXprt?=
 =?us-ascii?q?zXEgc5MxCow+bgENh91pkRWWOTAqCDN6Peq1+I5v81LOmKa48YozL9K/kj5/7z?=
 =?us-ascii?q?gn41g14dfa+13ZQJbHC0BOhpI0KcYXD0mNcODX8KvhYiTOztkFCCUzlTaGioU6?=
 =?us-ascii?q?I/4TE7DoSmDYDYS4CpgbyB2jq7H5JMamBHDFCMDWnnd4GeV/gQbyKSJ9drkiYY?=
 =?us-ascii?q?Wri5V48hyRauuRfgxLp8LurU/S4YuYj51Ndv5e3ejhUy9T1yD8SA3GCBVWB0nm?=
 =?us-ascii?q?UURzAo2KBzu1ByylCG0aJgmfxXCcRT5+9VUgc9LZPczPZ1C9boVgLFf9eGUlCm?=
 =?us-ascii?q?Qtq9DDE1T9IxxcIOYklnF9WjiBDDwzSlA7sPm7OXA5w097rW32LtKMZl13bGyK?=
 =?us-ascii?q?4hgkE7TcRVK22pmLRz9wjJCI7PiEWWiaCqeaMY3C7O8WeDyXGDvEVZUA52TKXE?=
 =?us-ascii?q?UmoTZkrQrdTl+EzCS6WiBqggMgtE0cSCMLdFasX1jVVaQ/fuIMnRbHivm2iuHx?=
 =?us-ascii?q?qIxqmDbIzxe2oD2iXQE0wEkwEV/XabOgkyHCaho2TCDDNwEVLjeV/j8e57qHmj?=
 =?us-ascii?q?VE870xmKb1F917qy4hMVmf2cS/YU3rIYuCcgqy94HEqn09LREdqAowthfKNTYd?=
 =?us-ascii?q?4m5FdH1GTZtxFyP5C6LqBigEIefBpzv0/0yxp3DYBAm9AwrHw21ApyNb6Y0FRZ?=
 =?us-ascii?q?ejyC2ZD/JLLWJXfy/Ry1cKHWx0zR38yQ+qcM7/Q4tU7uvAWoFkok7nVm3MNZ03?=
 =?us-ascii?q?qa5pXWEgUSVYj9XVow9xh/v7vaeDUy55vI1X1wNqm5qj/D288zCOQ50Bqhftdf?=
 =?us-ascii?q?P7mCFA/9CMAaA8muKOo3m1mmdB4EPeZS9LIqMMOibfeJxKmrPON4ljK8kWtH+J?=
 =?us-ascii?q?x90l6L9ydkUO7I3ooKzOuC3gSaUDfwllGhvd7tmYBFfD0dAnCwySz5C4FPfK1y?=
 =?us-ascii?q?eoALBHyqI822wNV+mpHsV2RZ9F6lG1MJxsupdQCOYFz62A1azV4XrmC/mSuk0z?=
 =?us-ascii?q?x0lCkkr6qe3CDUw+XubgEHOnNNRGR5iVfsII60j80VXUSybggpkgel6lj+x6RB?=
 =?us-ascii?q?uKt/KGzTS19SfyfqN2FiTrewtr2abs5N8pwoqyZXUOe7YVyAUb7yuRga0yDiH2?=
 =?us-ascii?q?tY2j87cSqnupH4nxx8lWKcI2x/rHvfecFs2xjf4MbQSuJW3joDXCN4kyXYBkCg?=
 =?us-ascii?q?P9m1+tWZj5fCvfq5V267VJ1TcC/rwJiEtCu6421qHBK+k+qymt3hDQg1zyv728?=
 =?us-ascii?q?N2WiXPqRb2epPr2LiiMeJ7YkloA0fx68lgFYF/iIcwhIwQ1mIchpWa5ncHlWbz?=
 =?us-ascii?q?MdNG2aPxdnYNRDgLw8LL7wjhwkFsMnWJx4fhXHWH3sRhf8W6Yn8R2i8l6sBKCa?=
 =?us-ascii?q?SU46ZekSp7vFW4th7RbuZnnjgG1/Qu8nEajvoNuAosyCWdH78TEVNZPSzqixSH?=
 =?us-ascii?q?8dS+oL9La2aodLi6zFB+ksy5DLGevgFcX270eoslHS919Ml+MUjD0Hvu6oH/Y9?=
 =?us-ascii?q?nQbMkethmVkxfGkuhUJ4g9lvsMhSp7J239uWcpxPI8jRxrxZu6ppSIK31x/KKl?=
 =?us-ascii?q?BR5VLib6aNkU+jHpkKZShMKW3520E5VlGzULWoboTP2yHDITs/TnKxiBEDkmpn?=
 =?us-ascii?q?iHHrrfGBeV6F16oHLXD5CrK3aXKWEbzdp4QRmSOldfjBoIXDkgnZ45CwOqxNHn?=
 =?us-ascii?q?cEhj/TAc/Vr4qhpKyuJ1OBjzSGbfpAG0ajgqTJiTNgZZ7gZH503NK8yR8vpzHz?=
 =?us-ascii?q?1E/p2mtAGMKmubZxlRDWEUQEOEAUrvPqKp5dnG/OiVHe6+L/rIYbWTpu1STfaI?=
 =?us-ascii?q?xZSz0oR4+zaALNmAPn5nD/cjwEpMQWh5G9jFmzUIUyEXlzzCb8+YpBe/+y17tM?=
 =?us-ascii?q?O/8O7sWALg+4SPEaZSMc509hCygKeDMfOQhSljJTZZ0JMM2WHHyLwF0FEOjCFu?=
 =?us-ascii?q?ciGnEa4cui7VUKLQhqhXAgYBZCNuL8RI9bwz3wlXNc7fi9P4zbp4jv8zC1dYWl?=
 =?us-ascii?q?3tgMCpZcoWI26jMFPLHlqENLODJTfT2cH4fbu8SaFMjOVTrxCwpTebE0r5Mjuf?=
 =?us-ascii?q?jTXmSxCvPv9KjCyAOBxeuYe9cgtiCGT5TdLmbAG7P8FzjTEs3bI0gXbKP3YGMT?=
 =?us-ascii?q?dga0NNsqGQ7SRAj/R/AWNB6H9lLeiCmymB7ujYKowZsf1kAilvk+Ja4XI6y6Za?=
 =?us-ascii?q?7S1eRfx1njfSocBqo128juaPzT9nA1JyrWNpiYyF9WFrKLne8NEUW3LN7Q4K60?=
 =?us-ascii?q?2TBg4Mqt8jDcfg7fN+0N/KwYT+KTNo6dXL+4NIAcXVLMivK2c6PFziHzuCX1hN?=
 =?us-ascii?q?diKiKWyK3x8Vq/qV7HDA68Fi8pU=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BXAAD6bwBch0O0hNFlHgEGBwaBUggLA?=
 =?us-ascii?q?YNrJ4N5lCGBaDmDMYpDiTyBcC8TAYQ7A4M2IjUIDQEDAQEBAQEBAgETAQEBCA0?=
 =?us-ascii?q?JCCkvgjYkAYJiAwMBAiAEUgYJAQEYDAIYDgICA0QQBhMFgxyBdQ0EAak+fDOKL?=
 =?us-ascii?q?4ELiwsXgT9AgUSKZII1IgKPapA5CYMJjkEKiVmHOSyZaQGCC3AVgyeQbywygQU?=
 =?us-ascii?q?BAY0/AQE?=
X-IPAS-Result: =?us-ascii?q?A0BXAAD6bwBch0O0hNFlHgEGBwaBUggLAYNrJ4N5lCGBaDm?=
 =?us-ascii?q?DMYpDiTyBcC8TAYQ7A4M2IjUIDQEDAQEBAQEBAgETAQEBCA0JCCkvgjYkAYJiA?=
 =?us-ascii?q?wMBAiAEUgYJAQEYDAIYDgICA0QQBhMFgxyBdQ0EAak+fDOKL4ELiwsXgT9AgUS?=
 =?us-ascii?q?KZII1IgKPapA5CYMJjkEKiVmHOSyZaQGCC3AVgyeQbywygQUBAY0/AQE?=
X-IronPort-AV: E=Sophos;i="5.56,296,1539673200"; 
   d="scan'208";a="53243328"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 15:06:39 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727288AbeK3KNa (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 30 Nov 2018 05:13:30 -0500
Received: from mx2.suse.de ([195.135.220.15]:36914 "EHLO mx1.suse.de"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726393AbeK3KN3 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 30 Nov 2018 05:13:29 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay1.suse.de (unknown [195.135.220.254])
        by mx1.suse.de (Postfix) with ESMTP id 0980EAD1A;
        Thu, 29 Nov 2018 23:06:21 +0000 (UTC)
From: NeilBrown <neilb@suse.com>
To: Jeff Layton <jlayton@kernel.org>
Date: Fri, 30 Nov 2018 10:04:08 +1100
Subject: [PATCH 05/12] ocfs2: properly initial file_lock used for unlock.
Cc: "J. Bruce Fields" <bfields@fieldses.org>,
        Martin Wilck <mwilck@suse.de>, linux-fsdevel@vger.kernel.org,
        Frank Filz <ffilzlnx@mindspring.com>,
        linux-kernel@vger.kernel.org
Message-ID: <154353264841.32133.11628489131872441919.stgit@noble>
In-Reply-To: <154353251599.32133.1085882002675619240.stgit@noble>
References: <154353251599.32133.1085882002675619240.stgit@noble>
User-Agent: StGit/0.17.1-dirty
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Rather than assuming all-zeros is sufficient, use the available API to
initialize the file_lock structure use for unlock.  VFS-level changes
will soon make it important that the list_heads in file_lock are
always properly initialized.

Signed-off-by: NeilBrown <neilb@suse.com>
Reviewed-by: J. Bruce Fields <bfields@redhat.com>
---
 fs/ocfs2/locks.c |   10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

diff --git a/fs/ocfs2/locks.c b/fs/ocfs2/locks.c
index d56f0079b858..b11acd34001a 100644
--- a/fs/ocfs2/locks.c
+++ b/fs/ocfs2/locks.c
@@ -52,6 +52,7 @@ static int ocfs2_do_flock(struct file *file, struct inode *inode,
 	if (lockres->l_flags & OCFS2_LOCK_ATTACHED &&
 	    lockres->l_level > LKM_NLMODE) {
 		int old_level = 0;
+		struct file_lock request;
 
 		if (lockres->l_level == LKM_EXMODE)
 			old_level = 1;
@@ -66,11 +67,10 @@ static int ocfs2_do_flock(struct file *file, struct inode *inode,
 		 * level.
 		 */
 
-		locks_lock_file_wait(file,
-				&(struct file_lock) {
-					.fl_type = F_UNLCK,
-					.fl_flags = FL_FLOCK
-				});
+		locks_init_lock(&request);
+		request.fl_type = F_UNLCK;
+		request.fl_flags = FL_FLOCK;
+		locks_lock_file_wait(file, &request);
 
 		ocfs2_file_unlock(file);
 	}


