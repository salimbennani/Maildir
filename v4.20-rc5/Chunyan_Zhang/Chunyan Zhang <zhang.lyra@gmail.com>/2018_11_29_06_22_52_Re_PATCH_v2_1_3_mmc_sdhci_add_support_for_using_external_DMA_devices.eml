Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 29 Nov 2018 18:17:24 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 488B85803ED;
	Wed, 28 Nov 2018 22:26:49 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 28 Nov 2018 22:26:48 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ASAZVoRDhX8mFEuJCJhe9UyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7/oc+wAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95eWCxPAIyy?=
 =?us-ascii?q?b4UBAekcM+hGs4b9vEMOoBmlCAmwGO/i0CNEimPq0aA41ekqDAHI3BYnH9ILqH?=
 =?us-ascii?q?nZstX1NLoUUeG11qbIyyjIYPBW2Tjn7ojIfQ0qrPaNXLJwa8XRz0YvGxnBjlSQ?=
 =?us-ascii?q?s4zqJSiY1usIs2eB7upgUfijhHIgqwF0uzWiwNonhIrRho8N1FzI6SF0zJwoKd?=
 =?us-ascii?q?C2VkJ3e8OoHZhMuy2ANoZ7QNsuT390tCs+0LELup62cDIUxJg7xBPTceGLfoyH?=
 =?us-ascii?q?7x/lSe2fOy13hGh/d7K6nxuy8Vavyun7VsSszlZKoTRKksPWunAOyRPT8M6HRe?=
 =?us-ascii?q?V5/ku73jaPzQ/T5vlFIUAyi6XbN4YszqAsmpcXq0jPAyH7lFvsgKOLdUgo5vKk?=
 =?us-ascii?q?5uXlb7n+o5+TLY50igXwMqQ0ncy/BPw1MgwPX2id5OS926Tv/U7nT7VQiP05jK?=
 =?us-ascii?q?3ZvIndJcUVoK62HRVV35096xawETimys4UnXoZI1JffhKIkYzpN0vJIPDiAvez?=
 =?us-ascii?q?m06snytzx/DaIr3hBY3ALnzCkLfiY7lx8UFdyBcowNBb5pJUDKwBIf3pVk/wst?=
 =?us-ascii?q?zYEgE2Mwiuz+n7D9V905sUWXiTDa+BLKPSrViI6/ovI+aWZY8VpCzyK/8/6/7u?=
 =?us-ascii?q?kH82g1kdfaay0JsTaXC4GOlmIkqDbXrthNcBDXkFvg4kQOP2j12CVCZZZ2yuUK?=
 =?us-ascii?q?Ik+jE7FIWmAJ/BRoCqnrONxiS7HppQZmBADVCBCnPod4SCW/cRZyOeOM5hkjoY?=
 =?us-ascii?q?Vbe/T48tzw2htAj/y7B/NOrb5jUYtY7/1Nhy/+Dcjwoy9TxzD8SeyW2NVXt7nm?=
 =?us-ascii?q?ETSj8y3aB/p1F9y1iZ3ah5hfxYCcJc5/dTXggmMp7cyvRwC8ruVQLZYteJVFGm?=
 =?us-ascii?q?T82lAT4rSNI92dsOY0dnFNWkgRDOxC6qA74Tl7yWC5046KPc337tJ8ljz3bKzr?=
 =?us-ascii?q?Uuj14jQsFXL22pmrZ/9xTPB47Oi0iWiryldboC0yLX9GeM12yOvFpGXw52VqnF?=
 =?us-ascii?q?WXMfZk7Srdni4kPCTrmuCakoMwdbyM6CLLdKZcPtjVlcWPjjP9HeaXqrm2isHR?=
 =?us-ascii?q?aI2q+MbI3ydmoAxirdFlYLnxoT/XmcMwg+HTmuo2TFATxqFFLvZV7s8OZkpHO6?=
 =?us-ascii?q?SE800x+Fb0l727Wp/R4VgOSWS+kP0bIcpCchtzJ0EU6h39LXDtqAoBZhfKVcYN?=
 =?us-ascii?q?8n/FdLz2XZtxZ5PpyhKaBiiUUTcwB2v0PoyhV2BZ9MkcksrHM20gVyLbiU309G?=
 =?us-ascii?q?dzOdxZrwIKHYKnHu/BCzbK7bwkvR0NKI9aYA9vs5q0/vsxq0FkU/6Xpn1dpV03?=
 =?us-ascii?q?yC5pjRCAoSUJTxUls49hRgprHaZDU96J3Q1XF2Laa0tTrC0cozBOQ50hagY8tf?=
 =?us-ascii?q?MKScGQ7yDs0WHdShJPYrmlipdB0EOu9S+bUwP8OncfuGxaGqMPxhnDKgkWRI/o?=
 =?us-ascii?q?R93liQ+Cp7T+7Cx4wFzO2A3gubSzf8i0+sstr2mY9Yfz4SBHewyS/+CI5XeKJy?=
 =?us-ascii?q?Z4cLBX6yLMKtwtVxmoDiW2Rf9F6lHF4G3M6peRyPb13yxwFQ1EIXoWC5liu81T?=
 =?us-ascii?q?B7jzYprq+H1izU3+vibAYHOnJMRGR6jVbsIJK4jtAAUEizcggpkgCo5UL7x6hd?=
 =?us-ascii?q?uaR+IHPfQUZOfyjqMW5iVrG8uaaFY85K8JkoqzlYUPygYVCGTb7wuxka3Dn5H2?=
 =?us-ascii?q?tdxzA7cCumuo7jkBx5i2KdLXBzo2TfecxrwRff5drcReNe3zYcRSl4jyXXCUa4?=
 =?us-ascii?q?P9Wz4dqUkJLDuPikV229Tp1TbTXrzYSYuSq7/2JqBgezn/Kymt3hCgU61S7719?=
 =?us-ascii?q?93VSTHthr8Y4/r17ikPuJjZEVnGFj8689iEIFkjoQwnI0Q2WQdhpiN/noIi2bz?=
 =?us-ascii?q?Pc9b2aLjdnUNQzELzsXR4Ajk3k1jM32Iy5j4VnWb3stued26bnkK1SI66sBAEL?=
 =?us-ascii?q?2U46BcnStpvlq4qhrcYf18njce0/Qi8nAbjP8SuAox0CqdGKsdEldCPSzjjBmI?=
 =?us-ascii?q?69G+rKNKZGega7Sw1Ux+ncy/A7GGuA1TRHH5epI6Fy9q8sp/KE7M0GH06oz8ZN?=
 =?us-ascii?q?nQatcTugeVkhjaiehVNYkxluELhSd8PWL9vHsly/M0jBB03JG6upSHJHtp/K6j?=
 =?us-ascii?q?HhFYMTj1bdsJ+j7xlaZegtqW34e3E5p6ADoLW5/oTe+yHDIWqPTqLAKOEDw6qn?=
 =?us-ascii?q?eGFrvTBw6f6EF6r33RF5CnLW2YJH4czd96XhmSOFRfgBwIXDU9hpM5FBqlxMn/?=
 =?us-ascii?q?f0di/DwR+kT0qhhRyuJrKhn/VH3QpByzZzcwSZifKgdW7w5Y60fUN8ye8vx8Hy?=
 =?us-ascii?q?VC8pK9qwyNL3SRZx5UAmERRkyEG1fjM6Gu5NnH7uiYH/e+IOHIYbmUsuxeUPGI?=
 =?us-ascii?q?xZ2034ti/jaMMNiPP3Z4A/063EpDQW52G8DDlzoTTCwXkjrHb9SHqxek5i13ss?=
 =?us-ascii?q?e//ezrWA3x5IuPCLhSMdR19xC1m6eDMOGQizhjKTZFzZMB3nvIyLkZ3F4PhCBi?=
 =?us-ascii?q?bTitEbIctSHTSKLcgLNYDxkeaylrLstH87o83hVROc7ckt76zKN4geUvC1hbVV?=
 =?us-ascii?q?3tgMWpZc0RLmG5NVPHAluLNbucKT3KxcH3fb2zSblKgOpIsB2wvC6RE1X/MTSb?=
 =?us-ascii?q?iznpSxevPPlQjCGaORxSop2yfgxxBmjjUt3mbAa2MNt2jT0w3L01iWnGNW8aMT?=
 =?us-ascii?q?hgbUxNqqec4j9fgvV6A2ZB9GZqLfGYmyaF6OnVMpYXvuFtAiRxluJa5mw1yrpV?=
 =?us-ascii?q?7C5eQvx1lzDfrtpvo1Ggj+mOxSBrUBtIqjZXmo2LuV9uNrne9plFCj74+0ck4X?=
 =?us-ascii?q?+RAhJCh8ZjFtD18/RZxsLOnaS1KCpE79/O1coaG8XQbsmANSxyHwDuHWv/DBYD?=
 =?us-ascii?q?XDetfVPfjkpS2KWA9nSTod4+u4LlsJULQ75fElcyE6VJWQxeANUeLcIvDXsfmr?=
 =?us-ascii?q?mBgZtNvCLmoQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AUAABhhv9bh0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBg2sng3mDe4QdjAiCDRSJe40zFIFiKRMBh3EiNAkNAQMBAQEBAQE?=
 =?us-ascii?q?CARMBAQEIDQkIKSMMgjYkAYJiAQIDAQIgBBkBGx0BAwIJAQEFBQsNAgImAgIDH?=
 =?us-ascii?q?wERAQUBHAYKCQUDgxmBaQEDFQWaRzyLDXwWBQEXgncFhD4KGScNXYE3AgYSeYs?=
 =?us-ascii?q?LghaBEYMShEoggxuCVwKJH4F4hQRRhGCKUwcCkTIYXnyINIcMmDswgSWCDTMaI?=
 =?us-ascii?q?4EBgjuCGwwXg0qKYDIzgQUBAYplgk0BAQ?=
X-IPAS-Result: =?us-ascii?q?A0AUAABhhv9bh0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBg2s?=
 =?us-ascii?q?ng3mDe4QdjAiCDRSJe40zFIFiKRMBh3EiNAkNAQMBAQEBAQECARMBAQEIDQkIK?=
 =?us-ascii?q?SMMgjYkAYJiAQIDAQIgBBkBGx0BAwIJAQEFBQsNAgImAgIDHwERAQUBHAYKCQU?=
 =?us-ascii?q?DgxmBaQEDFQWaRzyLDXwWBQEXgncFhD4KGScNXYE3AgYSeYsLghaBEYMShEogg?=
 =?us-ascii?q?xuCVwKJH4F4hQRRhGCKUwcCkTIYXnyINIcMmDswgSWCDTMaI4EBgjuCGwwXg0q?=
 =?us-ascii?q?KYDIzgQUBAYplgk0BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,293,1539673200"; 
   d="scan'208";a="54800705"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 28 Nov 2018 22:26:36 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727864AbeK2R1r (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 29 Nov 2018 12:27:47 -0500
Received: from mail-lj1-f194.google.com ([209.85.208.194]:43724 "EHLO
        mail-lj1-f194.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727806AbeK2R1q (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 29 Nov 2018 12:27:46 -0500
Received: by mail-lj1-f194.google.com with SMTP id 83-v6so652082ljf.10;
        Wed, 28 Nov 2018 22:23:29 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=rs54zgE9SpByj5wztzQb1btYsTLumAwkFU77ybXO9qk=;
        b=oET2Ch7P8To+2y0NGjVr9LRR1aP70SRBr38UmUiLBvC402J5FSoutihvsMmJ4yHNVS
         5HTqDWWFbIh1q3fUFOaEVqKZ49yxcOknvA9f+EbifEUmLEzu3X2lkNPPjvJwAVEGnO2R
         +hk0+PZ/zJQ0MhYU5gI11IeyYOHTGQxStUbvYo2wcy+towLSH2EPa2Zy8PvnIigZ6FvD
         QT4Zi8DpQFt8nU04W24Ek+4/QQspN098Kyy/GvZuOC3VllkqSwqHs/BOuy5EMSrt3UBJ
         fB5YP9/BHG86nXWyCqMeqA889cxzJU0DhCVi/jQRtjqJmx1hOTI1p9GEFjF6h7woQZuu
         fszA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=rs54zgE9SpByj5wztzQb1btYsTLumAwkFU77ybXO9qk=;
        b=Sn1XH9UcbkuluXdbcY+6fLEpDrwAAIgCBMYcMhO8UNwfWIf57hWRTvV5ZAqFk16u+v
         A82BimrtpnOa81MS1nH6qYneaFaQ8SUIq/LDmYWIIKZ5IWRiZ11HyNt9dATwLhRx5fU/
         jrqJYYPtFFw7zgbhPxIB5EQG/wCQ5Mc6RIfOPNn4rq8Xq9OZwq0+LMyNc7+zJfbn905y
         ME8eUMCH+ESTR4Pemf2OT+TkA1bihPqyR4QEzKbkh+i8Fz+nXKRtFOiicCdEApi/YX4G
         r8u39AFdxhu0qHM71nMDEEKhYFICY0Dp7DykmvuKa8UBhk4ffnL/egJyHGEPhzoyOH46
         AWTA==
X-Gm-Message-State: AA+aEWa04ocWeCjy6FHXuN2v1WP3/EOjW6L1AANnsTTXpTWh0Of0jxVG
        7fRMSzN82dk6hEGgyH4+STikUif9JvXWOmUx5R4=
X-Google-Smtp-Source: AFSGD/WiP40Jzp1tZJ1Mh/2y8yD+ro4YhO0qww3dfLBNUkqG52Ve0dYQpUmzUqbSjAX+PZEimGiO3ccENjejIpUyCBY=
X-Received: by 2002:a2e:5356:: with SMTP id t22-v6mr184285ljd.26.1543472608768;
 Wed, 28 Nov 2018 22:23:28 -0800 (PST)
MIME-Version: 1.0
References: <1542007566-9449-1-git-send-email-zhang.chunyan@linaro.org>
 <1542007566-9449-2-git-send-email-zhang.chunyan@linaro.org> <84836600-c705-9ac3-297e-bb67a611daca@intel.com>
In-Reply-To: <84836600-c705-9ac3-297e-bb67a611daca@intel.com>
From: Chunyan Zhang <zhang.lyra@gmail.com>
Date: Thu, 29 Nov 2018 14:22:52 +0800
Message-ID: <CAAfSe-us5aKOv9F6KHwvJR_cMAF8KFo6W1Gs_B3zBiNOuD10Qg@mail.gmail.com>
Subject: Re: [PATCH v2 1/3] mmc: sdhci: add support for using external DMA devices
To: Adrian Hunter <adrian.hunter@intel.com>
Cc: Chunyan Zhang <zhang.chunyan@linaro.org>,
        Ulf Hansson <ulf.hansson@linaro.org>,
        linux-mmc@vger.kernel.org,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>,
        Arnd Bergmann <arnd@arndb.de>, Mark Brown <broonie@kernel.org>,
        kishon@ti.com, nsekhar@ti.com
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Tue, 20 Nov 2018 at 21:41, Adrian Hunter <adrian.hunter@intel.com> wrote:
>
> On 12/11/18 9:26 AM, Chunyan Zhang wrote:
> > Some standard SD host controllers can support both external dma
> > controllers as well as ADMA/SDMA in which the SD host controller
> > acts as DMA master. TI's omap controller is the case as an example.
> >
> > Currently the generic SDHCI code supports ADMA/SDMA integrated in
> > the host controller but does not have any support for external DMA
> > controllers implemented using dmaengine, meaning that custom code is
> > needed for any systems that use an external DMA controller with SDHCI.
>
> I still think you probably need to reset the DMA if there are transfer
> errors - perhaps you could comment on that.  Also there are some comments below.

With regard to "transfer error", do you mean if
sdhci_external_dma_setup() failed?

Thanks,
Chunyan


>
> >
> > Signed-off-by: Chunyan Zhang <zhang.chunyan@linaro.org>
> > ---
> >  drivers/mmc/host/Kconfig |  13 ++++
> >  drivers/mmc/host/sdhci.c | 181 ++++++++++++++++++++++++++++++++++++++++++++++-
> >  drivers/mmc/host/sdhci.h |   8 +++
> >  3 files changed, 201 insertions(+), 1 deletion(-)
> >
> > diff --git a/drivers/mmc/host/Kconfig b/drivers/mmc/host/Kconfig
> > index 1b58739..7bf3eff 100644
> > --- a/drivers/mmc/host/Kconfig
> > +++ b/drivers/mmc/host/Kconfig
> > @@ -977,3 +977,16 @@ config MMC_SDHCI_OMAP
> >         If you have a controller with this interface, say Y or M here.
> >
> >         If unsure, say N.
> > +
> > +config MMC_SDHCI_EXTERNAL_DMA
> > +        bool "Support external DMA in standard SD host controller"
>
> It would be simpler if the drivers that needed it just selected it e.g.
>
> config MMC_SDHCI_OMAP
>         tristate "TI SDHCI Controller Support"
>         depends on MMC_SDHCI_PLTFM && OF
>         select MMC_SDHCI_EXTERNAL_DMA if DMA_ENGINE
>
> > +     depends on MMC_SDHCI
> > +     depends on DMA_ENGINE
> > +     help
> > +       This is an option for using external DMA device via dmaengine
> > +       framework.
> > +
> > +       If you have a controller which support using external DMA device
> > +       for data transfer, can say Y.
> > +
> > +       If unsure, say N.
> > diff --git a/drivers/mmc/host/sdhci.c b/drivers/mmc/host/sdhci.c
> > index 99bdae5..853cc98 100644
> > --- a/drivers/mmc/host/sdhci.c
> > +++ b/drivers/mmc/host/sdhci.c
> > @@ -14,6 +14,7 @@
> >   */
> >
> >  #include <linux/delay.h>
> > +#include <linux/dmaengine.h>
> >  #include <linux/ktime.h>
> >  #include <linux/highmem.h>
> >  #include <linux/io.h>
> > @@ -1309,6 +1310,158 @@ static void sdhci_del_timer(struct sdhci_host *host, struct mmc_request *mrq)
> >               del_timer(&host->timer);
> >  }
> >
> > +#if IS_ENABLED(CONFIG_MMC_SDHCI_EXTERNAL_DMA)
> > +static int sdhci_external_dma_init(struct sdhci_host *host)
> > +{
> > +     int ret = 0;
> > +     struct mmc_host *mmc = host->mmc;
> > +
> > +     host->tx_chan = dma_request_chan(mmc->parent, "tx");
> > +     if (IS_ERR(host->tx_chan)) {
> > +             ret = PTR_ERR(host->tx_chan);
> > +             if (ret != -EPROBE_DEFER)
> > +                     pr_warn("Failed to request TX DMA channel.\n");
> > +             host->tx_chan = NULL;
> > +             return ret;
> > +     }
> > +
> > +     host->rx_chan = dma_request_chan(mmc->parent, "rx");
> > +     if (IS_ERR(host->rx_chan)) {
> > +             if (host->tx_chan) {
> > +                     dma_release_channel(host->tx_chan);
> > +                     host->tx_chan = NULL;
> > +             }
> > +
> > +             ret = PTR_ERR(host->rx_chan);
> > +             if (ret != -EPROBE_DEFER)
> > +                     pr_warn("Failed to request RX DMA channel.\n");
> > +             host->rx_chan = NULL;
> > +     }
> > +
> > +     return ret;
> > +}
> > +
> > +static inline struct dma_chan *
> > +sdhci_external_dma_channel(struct sdhci_host *host, struct mmc_data *data)
> > +{
> > +     return data->flags & MMC_DATA_WRITE ? host->tx_chan : host->rx_chan;
> > +}
> > +
> > +static int sdhci_external_dma_setup(struct sdhci_host *host,
> > +                                 struct mmc_command *cmd)
> > +{
> > +     int ret = 0, i;
> > +     struct dma_async_tx_descriptor *desc;
> > +     struct mmc_data *data = cmd->data;
>
> cmd->data might be NULL?  Have you tested this?
>
> > +     struct dma_chan *chan;
> > +     struct dma_slave_config cfg;
> > +     dma_cookie_t cookie;
> > +
> > +     if (!host->mapbase)
> > +             return -EINVAL;
> > +
> > +     cfg.src_addr = host->mapbase + SDHCI_BUFFER;
> > +     cfg.dst_addr = host->mapbase + SDHCI_BUFFER;
> > +     cfg.src_addr_width = DMA_SLAVE_BUSWIDTH_4_BYTES;
> > +     cfg.dst_addr_width = DMA_SLAVE_BUSWIDTH_4_BYTES;
> > +     cfg.src_maxburst = data->blksz / 4;
> > +     cfg.dst_maxburst = data->blksz / 4;
> > +
> > +     /* Sanity check: all the SG entries must be aligned by block size. */
> > +     for (i = 0; i < data->sg_len; i++) {
> > +             if ((data->sg + i)->length % data->blksz)
> > +                     return -EINVAL;
> > +     }
> > +
> > +     chan = sdhci_external_dma_channel(host, data);
> > +
> > +     ret = dmaengine_slave_config(chan, &cfg);
> > +     if (ret)
> > +             return ret;
> > +
> > +     desc = dmaengine_prep_slave_sg(chan, data->sg, data->sg_len,
> > +                                    mmc_get_dma_dir(data),
> > +                                    DMA_PREP_INTERRUPT | DMA_CTRL_ACK);
> > +     if (!desc)
> > +             return -EINVAL;
> > +
> > +     desc->callback = NULL;
> > +     desc->callback_param = NULL;
> > +
> > +     cookie = dmaengine_submit(desc);
> > +     if (cookie < 0)
> > +             ret = cookie;
> > +
> > +     return ret;
> > +}
> > +
> > +static void sdhci_external_dma_release(struct sdhci_host *host)
> > +{
> > +     if (host->tx_chan) {
> > +             dma_release_channel(host->tx_chan);
> > +             host->tx_chan = NULL;
> > +     }
> > +
> > +     if (host->rx_chan) {
> > +             dma_release_channel(host->rx_chan);
> > +             host->rx_chan = NULL;
> > +     }
> > +
> > +     sdhci_switch_external_dma(host, false);
> > +}
> > +
> > +static void sdhci_external_dma_prepare_data(struct sdhci_host *host,
> > +                                         struct mmc_command *cmd)
> > +{
> > +     if (sdhci_external_dma_setup(host, cmd)) {
> > +             sdhci_external_dma_release(host);
> > +             pr_err("%s: Failed to setup external DMA, switch to the DMA/PIO which standard SDHCI provides.\n",
> > +                    mmc_hostname(host->mmc));
> > +     } else {
> > +             /* Prepare for using external dma */
> > +             host->flags |= SDHCI_REQ_USE_DMA;
> > +     }
> > +
> > +     sdhci_prepare_data(host, cmd);
> > +}
> > +
> > +static void sdhci_external_dma_pre_transfer(struct sdhci_host *host,
> > +                                         struct mmc_command *cmd)
> > +{
> > +     struct dma_chan *chan = sdhci_external_dma_channel(host, cmd->data);
>
> cmd->data might be NULL?  Have you tested this?
>
> > +
> > +     if (cmd->opcode != MMC_SET_BLOCK_COUNT) {
>
> I would have thought:
>
>         if (cmd->data)
>
> > +             sdhci_set_timeout(host, cmd);
> > +             dma_async_issue_pending(chan);
> > +     }
> > +}
> > +#else
> > +static int sdhci_external_dma_init(struct sdhci_host *host)
> > +{
> > +     return 0;
>
> That should return an error, perhaps -EOPNOTSUPP.
>
> > +}
> > +
> > +static void sdhci_external_dma_release(struct sdhci_host *host)
> > +{}
> > +
> > +static void sdhci_external_dma_prepare_data(struct sdhci_host *host,
> > +                                         struct mmc_command *cmd)
> > +{
> > +     /* If SDHCI_EXTDMA not supported, PIO will be used */
>
> SDHCI_EXTDMA is now MMC_SDHCI_EXTERNAL_DMA
>
> > +     sdhci_prepare_data(host, cmd);
> > +}
> > +
> > +static void sdhci_external_dma_pre_transfer(struct sdhci_host *host,
> > +                                         struct mmc_command *cmd)
> > +{}
> > +#endif
> > +
> > +void sdhci_switch_external_dma(struct sdhci_host *host, bool en)
> > +{
> > +     host->use_external_dma = en;
> > +}
> > +EXPORT_SYMBOL_GPL(sdhci_switch_external_dma);
> > +
> >  void sdhci_send_command(struct sdhci_host *host, struct mmc_command *cmd)
> >  {
> >       int flags;
> > @@ -1355,7 +1508,10 @@ void sdhci_send_command(struct sdhci_host *host, struct mmc_command *cmd)
> >               host->data_cmd = cmd;
> >       }
> >
> > -     sdhci_prepare_data(host, cmd);
> > +     if (host->use_external_dma)
> > +             sdhci_external_dma_prepare_data(host, cmd);
> > +     else
> > +             sdhci_prepare_data(host, cmd);
> >
> >       sdhci_writel(host, cmd->arg, SDHCI_ARGUMENT);
> >
> > @@ -1397,6 +1553,9 @@ void sdhci_send_command(struct sdhci_host *host, struct mmc_command *cmd)
> >               timeout += 10 * HZ;
> >       sdhci_mod_timer(host, cmd->mrq, timeout);
> >
> > +     if (host->use_external_dma)
> > +             sdhci_external_dma_pre_transfer(host, cmd);
> > +
> >       sdhci_writew(host, SDHCI_MAKE_CMD(cmd->opcode, flags), SDHCI_COMMAND);
> >  }
> >  EXPORT_SYMBOL_GPL(sdhci_send_command);
> > @@ -4133,6 +4292,19 @@ int sdhci_setup_host(struct sdhci_host *host)
> >                       return ret;
> >       }
> >
> > +     if (host->use_external_dma) {
> > +             ret = sdhci_external_dma_init(host);
> > +             if (ret == -EPROBE_DEFER)
> > +                     goto unreg;
> > +
> > +             /*
> > +              * Fall back to use the DMA/PIO integrated in standard SDHCI
> > +              * instead of external DMA devices.
> > +              */
> > +             if (ret)
> > +                     sdhci_switch_external_dma(host, false);
> > +     }
> > +
> >       return 0;
> >
> >  unreg:
> > @@ -4161,6 +4333,10 @@ void sdhci_cleanup_host(struct sdhci_host *host)
> >               dma_free_coherent(mmc_dev(mmc), host->align_buffer_sz +
> >                                 host->adma_table_sz, host->align_buffer,
> >                                 host->align_addr);
> > +
> > +     if (host->use_external_dma)
> > +             sdhci_external_dma_release(host);
> > +
> >       host->adma_table = NULL;
> >       host->align_buffer = NULL;
> >  }
> > @@ -4295,6 +4471,9 @@ void sdhci_remove_host(struct sdhci_host *host, int dead)
> >                                 host->adma_table_sz, host->align_buffer,
> >                                 host->align_addr);
> >
> > +     if (host->use_external_dma)
> > +             sdhci_external_dma_release(host);
> > +
> >       host->adma_table = NULL;
> >       host->align_buffer = NULL;
> >  }
> > diff --git a/drivers/mmc/host/sdhci.h b/drivers/mmc/host/sdhci.h
> > index b001cf4..8e50a97 100644
> > --- a/drivers/mmc/host/sdhci.h
> > +++ b/drivers/mmc/host/sdhci.h
> > @@ -475,6 +475,7 @@ struct sdhci_host {
> >
> >       int irq;                /* Device IRQ */
> >       void __iomem *ioaddr;   /* Mapped address */
> > +     phys_addr_t mapbase;    /* physical address base */
> >       char *bounce_buffer;    /* For packing SDMA reads/writes */
> >       dma_addr_t bounce_addr;
> >       unsigned int bounce_buffer_size;
> > @@ -524,6 +525,7 @@ struct sdhci_host {
> >       bool pending_reset;     /* Cmd/data reset is pending */
> >       bool irq_wake_enabled;  /* IRQ wakeup is enabled */
> >       bool v4_mode;           /* Host Version 4 Enable */
> > +     bool use_external_dma;
> >
> >       struct mmc_request *mrqs_done[SDHCI_MAX_MRQS];  /* Requests done */
> >       struct mmc_command *cmd;        /* Current command */
> > @@ -552,6 +554,11 @@ struct sdhci_host {
> >       struct timer_list timer;        /* Timer for timeouts */
> >       struct timer_list data_timer;   /* Timer for data timeouts */
> >
> > +#if IS_ENABLED(CONFIG_MMC_SDHCI_EXTERNAL_DMA)
> > +     struct dma_chan *rx_chan;
> > +     struct dma_chan *tx_chan;
> > +#endif
> > +
> >       u32 caps;               /* CAPABILITY_0 */
> >       u32 caps1;              /* CAPABILITY_1 */
> >       bool read_caps;         /* Capability flags have been read */
> > @@ -785,5 +792,6 @@ void sdhci_start_tuning(struct sdhci_host *host);
> >  void sdhci_end_tuning(struct sdhci_host *host);
> >  void sdhci_reset_tuning(struct sdhci_host *host);
> >  void sdhci_send_tuning(struct sdhci_host *host, u32 opcode);
> > +void sdhci_switch_external_dma(struct sdhci_host *host, bool en);
> >
> >  #endif /* __SDHCI_HW_H */
> >
>
