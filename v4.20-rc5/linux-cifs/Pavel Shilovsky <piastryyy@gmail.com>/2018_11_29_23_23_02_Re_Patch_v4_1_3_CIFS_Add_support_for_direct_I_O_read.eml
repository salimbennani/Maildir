Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 08:52:32 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id D4ECE580213;
	Thu, 29 Nov 2018 15:23:31 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga003-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 15:23:30 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A/9O4XReVfFXVDnwolKkKB4GDlGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc6+YRON2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRODYOy?=
 =?us-ascii?q?bYQBD+QPM+VFoYfju1QAogC+BRGuCe701j9In2X70bEm3+g9EwzL2hErEdIUsH?=
 =?us-ascii?q?TTqdX4LL0cXvqrzKbWyTXIcu5Y2Tf86IjMdRAhv+qMXbFwcMHMzkQvDwLFgU+L?=
 =?us-ascii?q?qYz5JTOU1uQMsmiA4upvUOKgkW8nqwVrrjezwccsj5DEi4QIwV7H7SV02Jg5Kc?=
 =?us-ascii?q?G8RUJhfNKpHoVcuzuHO4Z1Xs8uWWBltSQixrEYpZK2eDIGxZcnyhLFdvCKcoqF?=
 =?us-ascii?q?7gjiWeuTJzpzmWhrd6ilhxmo9Eit0u38Wdew0FZNtidFjNbMuW4X1xDJ6ciIVO?=
 =?us-ascii?q?F9/kG/1jaLzQzT7ftEIU8smaraLZ4u3KIwm4INvUjfGiL6glj6gaGIekk+5+Sl?=
 =?us-ascii?q?6Pjrbq/nq5KeL4N0jxvxMqUqmsyxG+Q4NQ0OUnCf+eS90r3j4EL4TKxJjvIoiK?=
 =?us-ascii?q?nZto7VJcACqq6+DQ5V1Jgs6wykAje439QXg2MHIEhGeB2ZlYjpPU/BIPTiAfe4?=
 =?us-ascii?q?mVSsny9nx+raMb35HpXNMn/Dna/lfbZ86E5T1hA/zN9C559PDrEBIfTzWlL+td?=
 =?us-ascii?q?DCDx85NRC0zPjjCNlnyoweXmePCLeDMKzOqV+I+v4vI+6UaY8Vojn9KuQl6OTp?=
 =?us-ascii?q?jXMjmV8dYLOm3Z0YaH2jGvRmIkOZYWfjg9sbEGcKuBY+Q/LuiFGYTTFTYHOyVb?=
 =?us-ascii?q?om5j4nEIKmEZvDRoe1jbyD2ye0AIdaZmNBClCKF3focJ6JW/MNaCKUP89gnSYI?=
 =?us-ascii?q?VbmnS489yx6usBX2xKZgLurR4icYr47s1MBp5+3PkhE/7SZ7D9+d02GKTGF4hH?=
 =?us-ascii?q?kISCU03K1kpUx9y1GD0bV3gvBCFNxT4e9JXRk+NZLG0+N6DNXyUBrbftiVUFam?=
 =?us-ascii?q?XsmmATYpQ9Iy2dAOZVxxG9Gjjh/Z2SqqDKQYl7iKBJwy76Ld0GL9J8d7y3bayq?=
 =?us-ascii?q?Yhi0MqTddINW2jnqR/7RTcB5bVk0WFkKanbbkT0zTT9Gid12aOvFtXUAhrUarb?=
 =?us-ascii?q?W3ATYU/Wrdf85kPGVLKuDbUnMg1cyc+NMKdKa9vpjUlYS/fnItjRf2Wxm2KoDx?=
 =?us-ascii?q?aS2ryMdJbqe3ka3CjFFUcLiR4T8micOQg+HCihpXneAyJoFV/0Z0Ps8O9+qG60?=
 =?us-ascii?q?T0MuzgGKaVFh2KSx+hIPmfOcTPYT1KoeuCg9szV0AEq939XOBtqcpgpheaJcYc?=
 =?us-ascii?q?894FZHz27ZqxZxPpu6L6Bmh14edQt3sljq1xV2DIVAjMcroGkrzAp0NaKXzldB?=
 =?us-ascii?q?eymE0pD3P73dMnPy8wy3a67KxlHe186b9b0L6PsmpFTsogGoGlA5/HV6ztZayX?=
 =?us-ascii?q?2c5pbNDAoMSp/xVkc39x5np7DVeCU95oXU1WFyPqmwqDPNx9UpBO49wBa6Y9hf?=
 =?us-ascii?q?KL+EFBP1E8ACB8muNfYmlESzYhMFPOBd7qg0P8y9evuC2a6rOvtgnT28gWRG5o?=
 =?us-ascii?q?B9zlyD9y5mRuHU2JYFxumS3hGbWDfkkFehrsf3lJheZTETAmWw0zLkC5NWZqFo?=
 =?us-ascii?q?e4YEF32uI8yuytpinZHtX2NX+0C5B1MB3s+kYh6Sb1373Q1N2kUbu32nmS2kzz?=
 =?us-ascii?q?NqlzEltLaQ3CvLw+76bhoIJnZLRHV+jVfrOYW1j9EaUFKobgQzjxul+ED6yrNf?=
 =?us-ascii?q?pKR+KWnTXEhJczL3L2FkTqu/qL6Cb9RT55MvtCVdSP68bkyCSr7hvxsa1DvuH2?=
 =?us-ascii?q?lEyzAhdDGquZL5kwZhiG2HL3Zzr3vZecduyhfZ/9HcQf9R3jwbRCh3kzXXB168?=
 =?us-ascii?q?P8W38tWQjZvMrue+V2e5XJ1JbSbr1Z+AtDe85WByARywhfezlsflEQg71y/2zN?=
 =?us-ascii?q?1qVSTOrBbhbYjnzaW6MeR7fkZ2AF/w8dZ1GoZ7koEonpEfxWAahomJ/XoAiWrz?=
 =?us-ascii?q?Ms9U2aPkYHoNWD4E2djV4Af+1U1nL3KJwZ/5V3qHzstgYdm6fn0Z2iYn489WD6?=
 =?us-ascii?q?eU6aROnTFprVqgsQLRff99ky8Yyfsv634VmfsFuQQzwSWGHrAdA1NYMjfymBSS?=
 =?us-ascii?q?4NCzt6FXZGepcbit20tyh9GhDLeeog5CXHb1YIstHSh17s9nKlLDzGXz6p34eN?=
 =?us-ascii?q?nXdd8TqhqUkxLag+lUMp0xkOcKhTF8OWL8pnAlz+87jRpz3ZC1poSHKmNt/L6n?=
 =?us-ascii?q?DR5cLDH6e8QT+jT1h6ZEgsmWx5yvHolmGjgTR5TnV/WoEDYPtfj9MwaODSYxqn?=
 =?us-ascii?q?OaGbrZAA+e511qr3PJE5C3KX6XIGMVwsllRBmYPEZfmhwbXC0mnp4lEQCn3M7h?=
 =?us-ascii?q?f1185j8P/V70sAdMxvhrNxniUWffuQGoZS0vSJWEKBpW7wdC51raMMCE7+JzGT?=
 =?us-ascii?q?1Y8YOlrACXNmObYAFIB3kTWkOYH1DjIqWu5d7Y/umYAeq+MuLOYaiUpuxYTfuI?=
 =?us-ascii?q?3pWv0o1p/zuXMsWPP39iD+A020ZZXHB5HdjZlCsLSyANiy3NaMubrg+m+iJrts?=
 =?us-ascii?q?C/7OjrWAX36IuPFbRSMNZv+xO3gauZNO6QniF5KTlG2ZMW2H/I06MS3FoTiyFo?=
 =?us-ascii?q?ajmsHq4MtS/LTKLMhKBXCwQXZD90NMtN96g8xBVCOdbHitPp0b51luQ6C0peWl?=
 =?us-ascii?q?z7hM6oZdYGI2W8NF7cAEaLNbKGJSDEws3tYKO8T6FQg/tQtxGqpTmbFErjNCyZ?=
 =?us-ascii?q?lzb1TxCvLf1MjCaDMRxCuYG9dwxhBnT5QN36ah20Ltl3gCYywb01gHPKKGEdPS?=
 =?us-ascii?q?J9c0NLsr2f8ydYju9jFGxG63pvNfOElDqB7+nENpYWtuNmAyRumOJc5XQ6yr1V?=
 =?us-ascii?q?4zlFRfx1giTSqNFurkqikumOzDpnTRVPpixKhIKNoUVtJ6HZ+oNcVnbD+RJepV?=
 =?us-ascii?q?mXXjANodQtLtyn76RXzNfLlYr2KTxY9MnT89daDM/RfpGpKn0kZCLgBjPQRDAF?=
 =?us-ascii?q?TDqsK3rclgQJiPCb7WGPv4krgpfpkZsKDLRcUQpmRbshFk15EYlac99MVTQ+nO?=
 =?us-ascii?q?ve1ZZQ6A=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AgAADCcwBch0O0hNFlHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGCXYEOJ4N5g3uEHYwJUAEBBoE1FIkKcY01gW8wEwGEQIM0IjQJDQEDAQE?=
 =?us-ascii?q?BAQEBAgETAQEBCA0JCCkjDII2JAGCYQEBAQEDAQIgBBkBGx0BAwIJAQEFAwILC?=
 =?us-ascii?q?gIDAiYCAgMfAREBBQEUCAYKCQWDHIFpAQMIDQWNWJAHPIsNfBYFAReCdwWEQAo?=
 =?us-ascii?q?ZJw1dgTcCBhJ5iwsXeIEHgRGDEoRrFoMEglcCkB6QBQmRMhiBWoUQgySHDpUeg?=
 =?us-ascii?q?yEwgSWCDU0jUDGCO4IbCQMXg0qKdB4zgQUBAYpyB4JGAQE?=
X-IPAS-Result: =?us-ascii?q?A0AgAADCcwBch0O0hNFlHQEBBQEHBQGBUQgBCwGCXYEOJ4N?=
 =?us-ascii?q?5g3uEHYwJUAEBBoE1FIkKcY01gW8wEwGEQIM0IjQJDQEDAQEBAQEBAgETAQEBC?=
 =?us-ascii?q?A0JCCkjDII2JAGCYQEBAQEDAQIgBBkBGx0BAwIJAQEFAwILCgIDAiYCAgMfARE?=
 =?us-ascii?q?BBQEUCAYKCQWDHIFpAQMIDQWNWJAHPIsNfBYFAReCdwWEQAoZJw1dgTcCBhJ5i?=
 =?us-ascii?q?wsXeIEHgRGDEoRrFoMEglcCkB6QBQmRMhiBWoUQgySHDpUegyEwgSWCDU0jUDG?=
 =?us-ascii?q?CO4IbCQMXg0qKdB4zgQUBAYpyB4JGAQE?=
X-IronPort-AV: E=Sophos;i="5.56,296,1539673200"; 
   d="scan'208";a="53943546"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 15:23:29 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727050AbeK3Kab (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 30 Nov 2018 05:30:31 -0500
Received: from mail-lf1-f67.google.com ([209.85.167.67]:37351 "EHLO
        mail-lf1-f67.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726406AbeK3Kaa (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 30 Nov 2018 05:30:30 -0500
Received: by mail-lf1-f67.google.com with SMTP id p17so2779701lfh.4;
        Thu, 29 Nov 2018 15:23:15 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc:content-transfer-encoding;
        bh=EqQgLeXY7bD4a1Ph8h2/7Ky5kcPloe14nVVqqklUljc=;
        b=Ad5g8LZntjE7CkOGMlLZ5E+eHYrPSlCo686lsP6wJsdzWL4OpvOdYEHeVBsfnFULyW
         Bd2RsC3CbOz26IGTslL09ByZkl6Zaxowr0wY+DeH4Tne3iNkURJiqpkioA4wsXfj1+Bl
         tdkyJi/1I+icFCl4917NGG0leXB+S9MQx77Daj6qg5nxXpTw7BCi+waI3fZBUe+Qa6aM
         KGhE0LPYVqpl8/v/uxkTkoL/TZm4vHl593icMS0mmCQ1Oc3vazEGlmd3Lu9mbVVfM34C
         7nIqQRl07JFPqPGcURSTpJQbfrGeEOT9DMA2IEO4ZE7uKAgD0o1Qo5SmMFQYQrTtpvAq
         xJ7A==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc:content-transfer-encoding;
        bh=EqQgLeXY7bD4a1Ph8h2/7Ky5kcPloe14nVVqqklUljc=;
        b=hRWCKvXoraF0MzrFR58kx2efeF7HLOYboAyHAwIbEN4OQv3uXonTE0FRdSZSs6mG1J
         tqgCTC8kiFMzmzwo7dRA7KPErgru9ZxFgUnrKno2Dpnr8plegXrCMm2vF4EArrifOuC9
         37x7R93wje7u/bAn1V9EzHmRnmXeAU8ybQsA7zZN9AKJWRa41qQ6HBAPFyPccHljXZzP
         pG0ceypyuWD2bdeB0YhKYAvMnu2i8eMWFAIulJAxfGJ2CA3Z1dAVq4nB2FTY/7atpI2M
         qcuWd6cOJ2bQ7x6C23N5RF28Pu9b4CymPlJP6SHPtgCzKBCce7FGpX1LMuHtWmPqydp0
         Fquw==
X-Gm-Message-State: AA+aEWbLPbnw1aWAtDNN726Oc883l6ek9HmzXcsALWDg8579AzJijOcs
        cIGWrqcBdLO44O2nZDlIxk15n9mFwX56OyKmxICM9kQ=
X-Google-Smtp-Source: AFSGD/XDq6C3D7CZATdCX1NpGfwwbZ1hgFDmpwWF744QiCtrBu/ErJlBJm5+gEHO9k1zzG0aKgnqjA00gPq0au+75Uw=
X-Received: by 2002:a19:1cd3:: with SMTP id c202mr2306431lfc.33.1543533794738;
 Thu, 29 Nov 2018 15:23:14 -0800 (PST)
MIME-Version: 1.0
References: <20181031221311.2596-1-longli@linuxonhyperv.com>
 <CAKywueSjVA=hwM7QCQqY_g_XNKonGWK9c+q4oHmdm0dWAdZCzg@mail.gmail.com>
 <DM5PR21MB0185227A3633878FF63ABB2BCED10@DM5PR21MB0185.namprd21.prod.outlook.com>
 <CAKywueSHGj7xr709+Xfmtox_RkZtCVgyKDXP3T_gX3N10cQrrQ@mail.gmail.com> <DM5PR21MB0185F99808269901F609DB8DCED20@DM5PR21MB0185.namprd21.prod.outlook.com>
In-Reply-To: <DM5PR21MB0185F99808269901F609DB8DCED20@DM5PR21MB0185.namprd21.prod.outlook.com>
From: Pavel Shilovsky <piastryyy@gmail.com>
Date: Thu, 29 Nov 2018 15:23:02 -0800
Message-ID: <CAKywueQWR2k7gNte8ev8UAWv_s-it1jY1sgOLeZP3eQ5pX-qHw@mail.gmail.com>
Subject: Re: [Patch v4 1/3] CIFS: Add support for direct I/O read
To: Long Li <longli@microsoft.com>
Cc: Steve French <sfrench@samba.org>,
        linux-cifs <linux-cifs@vger.kernel.org>,
        samba-technical <samba-technical@lists.samba.org>,
        Kernel Mailing List <linux-kernel@vger.kernel.org>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

=D1=87=D1=82, 29 =D0=BD=D0=BE=D1=8F=D0=B1. 2018 =D0=B3. =D0=B2 14:48, Long =
Li <longli@microsoft.com>:
>
> > Subject: Re: [Patch v4 1/3] CIFS: Add support for direct I/O read
> >
> > =D1=81=D1=80, 28 =D0=BD=D0=BE=D1=8F=D0=B1. 2018 =D0=B3. =D0=B2 15:43, L=
ong Li <longli@microsoft.com>:
> > >
> > > > Subject: Re: [Patch v4 1/3] CIFS: Add support for direct I/O read
> > > >
> > > > Hi Long,
> > > >
> > > > Please find my comments below.
> > > >
> > > >
> > > > =D1=81=D1=80, 31 =D0=BE=D0=BA=D1=82. 2018 =D0=B3. =D0=B2 15:14, Lon=
g Li <longli@linuxonhyperv.com>:
> > > > >
> > > > > From: Long Li <longli@microsoft.com>
> > > > >
> > > > > With direct I/O read, we transfer the data directly from transpor=
t
> > > > > layer to the user data buffer.
> > > > >
> > > > > Change in v3: add support for kernel AIO
> > > > >
> > > > > Change in v4:
> > > > > Refactor common read code to __cifs_readv for direct and non-dire=
ct
> > I/O.
> > > > > Retry on direct I/O failure.
> > > > >
> > > > > Signed-off-by: Long Li <longli@microsoft.com>
> > > > > ---
> > > > >  fs/cifs/cifsfs.h   |   1 +
> > > > >  fs/cifs/cifsglob.h |   5 ++
> > > > >  fs/cifs/file.c     | 219
> > +++++++++++++++++++++++++++++++++++++++++++--
> > > > --------
> > > > >  3 files changed, 186 insertions(+), 39 deletions(-)
> > > > >
> > > > > diff --git a/fs/cifs/cifsfs.h b/fs/cifs/cifsfs.h index
> > > > > 5f02318..7fba9aa 100644
> > > > > --- a/fs/cifs/cifsfs.h
> > > > > +++ b/fs/cifs/cifsfs.h
> > > > > @@ -102,6 +102,7 @@ extern int cifs_open(struct inode *inode,
> > > > > struct file *file);  extern int cifs_close(struct inode *inode,
> > > > > struct file *file);  extern int cifs_closedir(struct inode *inode=
,
> > > > > struct file *file);  extern ssize_t cifs_user_readv(struct kiocb
> > > > > *iocb, struct iov_iter *to);
> > > > > +extern ssize_t cifs_direct_readv(struct kiocb *iocb, struct
> > > > > +iov_iter *to);
> > > > >  extern ssize_t cifs_strict_readv(struct kiocb *iocb, struct
> > > > > iov_iter *to);  extern ssize_t cifs_user_writev(struct kiocb
> > > > > *iocb, struct iov_iter *from);  extern ssize_t
> > > > > cifs_strict_writev(struct kiocb *iocb, struct iov_iter *from);
> > > > > diff --git a/fs/cifs/cifsglob.h b/fs/cifs/cifsglob.h index
> > > > > 7f62c98..52248dd 100644
> > > > > --- a/fs/cifs/cifsglob.h
> > > > > +++ b/fs/cifs/cifsglob.h
> > > > > @@ -1146,6 +1146,11 @@ struct cifs_aio_ctx {
> > > > >         unsigned int            len;
> > > > >         unsigned int            total_len;
> > > > >         bool                    should_dirty;
> > > > > +       /*
> > > > > +        * Indicates if this aio_ctx is for direct_io,
> > > > > +        * If yes, iter is a copy of the user passed iov_iter
> > > > > +        */
> > > > > +       bool                    direct_io;
> > > > >  };
> > > > >
> > > > >  struct cifs_readdata;
> > > > > diff --git a/fs/cifs/file.c b/fs/cifs/file.c index
> > > > > 87eece6..daab878
> > > > > 100644
> > > > > --- a/fs/cifs/file.c
> > > > > +++ b/fs/cifs/file.c
> > > > > @@ -2965,7 +2965,6 @@ cifs_uncached_readdata_release(struct kref
> > > > *refcount)
> > > > >         kref_put(&rdata->ctx->refcount, cifs_aio_ctx_release);
> > > > >         for (i =3D 0; i < rdata->nr_pages; i++) {
> > > > >                 put_page(rdata->pages[i]);
> > > > > -               rdata->pages[i] =3D NULL;
> > > > >         }
> > > > >         cifs_readdata_release(refcount);  } @@ -3092,6 +3091,63 @=
@
> > > > > cifs_uncached_copy_into_pages(struct TCP_Server_Info *server,
> > > > >         return uncached_fill_pages(server, rdata, iter,
> > > > > iter->count); }
> > > > >
> > > > > +static int cifs_resend_rdata(struct cifs_readdata *rdata,
> > > > > +                     struct list_head *rdata_list,
> > > > > +                     struct cifs_aio_ctx *ctx) {
> > > > > +       int wait_retry =3D 0;
> > > > > +       unsigned int rsize, credits;
> > > > > +       int rc;
> > > > > +       struct TCP_Server_Info *server =3D
> > > > > +tlink_tcon(rdata->cfile->tlink)->ses->server;
> > > > > +
> > > > > +       /*
> > > > > +        * Try to resend this rdata, waiting for credits up to 3 =
seconds.
> > > > > +        * Note: we are attempting to resend the whole rdata not =
in
> > segments
> > > > > +        */
> > > > > +       do {
> > > > > +               rc =3D server->ops->wait_mtu_credits(server, rdat=
a->bytes,
> > > > > +                                               &rsize, &credits)=
;
> > > > > +
> > > > > +               if (rc)
> > > > > +                       break;
> > > > > +
> > > > > +               if (rsize < rdata->bytes) {
> > > > > +                       add_credits_and_wake_if(server, credits, =
0);
> > > > > +                       msleep(1000);
> > > > > +                       wait_retry++;
> > > > > +               }
> > > > > +       } while (rsize < rdata->bytes && wait_retry < 3);
> > > > > +
> > > > > +       /*
> > > > > +        * If we can't find enough credits to send this rdata
> > > > > +        * release the rdata and return failure, this will pass
> > > > > +        * whatever I/O amount we have finished to VFS.
> > > > > +        */
> > > > > +       if (rsize < rdata->bytes) {
> > > > > +               rc =3D -EBUSY;
> > > >
> > > > We don't have enough credits and return EBUSY here...
> > > >
> > > > > +               goto out;
> > > > > +       }
> > > > > +
> > > > > +       rc =3D -EAGAIN;
> > > > > +       while (rc =3D=3D -EAGAIN)
> > > > > +               if (!rdata->cfile->invalidHandle ||
> > > > > +                   !(rc =3D cifs_reopen_file(rdata->cfile, true)=
))
> > > > > +                       rc =3D server->ops->async_readv(rdata);
> > > > > +
> > > > > +       if (!rc) {
> > > > > +               /* Add to aio pending list */
> > > > > +               list_add_tail(&rdata->list, rdata_list);
> > > > > +               return 0;
> > > > > +       }
> > > > > +
> > > > > +       add_credits_and_wake_if(server, rdata->credits, 0);
> > > > > +out:
> > > > > +       kref_put(&rdata->refcount,
> > > > > +               cifs_uncached_readdata_release);
> > > > > +
> > > > > +       return rc;
> > > > > +}
> > > > > +
> > > > >  static int
> > > > >  cifs_send_async_read(loff_t offset, size_t len, struct cifsFileI=
nfo
> > *open_file,
> > > > >                      struct cifs_sb_info *cifs_sb, struct
> > > > > list_head *rdata_list, @@ -3103,6 +3159,9 @@
> > > > > cifs_send_async_read(loff_t offset,
> > > > size_t len, struct cifsFileInfo *open_file,
> > > > >         int rc;
> > > > >         pid_t pid;
> > > > >         struct TCP_Server_Info *server;
> > > > > +       struct page **pagevec;
> > > > > +       size_t start;
> > > > > +       struct iov_iter direct_iov =3D ctx->iter;
> > > > >
> > > > >         server =3D tlink_tcon(open_file->tlink)->ses->server;
> > > > >
> > > > > @@ -3111,6 +3170,9 @@ cifs_send_async_read(loff_t offset, size_t
> > > > > len,
> > > > struct cifsFileInfo *open_file,
> > > > >         else
> > > > >                 pid =3D current->tgid;
> > > > >
> > > > > +       if (ctx->direct_io)
> > > > > +               iov_iter_advance(&direct_iov, offset - ctx->pos);
> > > > > +
> > > > >         do {
> > > > >                 rc =3D server->ops->wait_mtu_credits(server, cifs=
_sb->rsize,
> > > > >                                                    &rsize,
> > > > > &credits); @@ -3118,20 +3180,56 @@ cifs_send_async_read(loff_t
> > > > > offset, size_t len,
> > > > struct cifsFileInfo *open_file,
> > > > >                         break;
> > > > >
> > > > >                 cur_len =3D min_t(const size_t, len, rsize);
> > > > > -               npages =3D DIV_ROUND_UP(cur_len, PAGE_SIZE);
> > > > >
> > > > > -               /* allocate a readdata struct */
> > > > > -               rdata =3D cifs_readdata_alloc(npages,
> > > > > +               if (ctx->direct_io) {
> > > > > +
> > > > > +                       cur_len =3D iov_iter_get_pages_alloc(
> > > > > +                                       &direct_iov, &pagevec,
> > > > > +                                       cur_len, &start);
> > > > > +                       if (cur_len < 0) {
> > > > > +                               cifs_dbg(VFS,
> > > > > +                                       "couldn't get user pages =
(cur_len=3D%zd)"
> > > > > +                                       " iter type %d"
> > > > > +                                       " iov_offset %zd count %z=
d\n",
> > > > > +                                       cur_len, direct_iov.type,=
 direct_iov.iov_offset,
> > > > > +                                       direct_iov.count);
> > > > > +                               dump_stack();
> > > > > +                               break;
> > > > > +                       }
> > > > > +                       iov_iter_advance(&direct_iov, cur_len);
> > > > > +
> > > > > +                       rdata =3D cifs_readdata_direct_alloc(
> > > > > +                                       pagevec, cifs_uncached_re=
adv_complete);
> > > > > +                       if (!rdata) {
> > > > > +                               add_credits_and_wake_if(server, c=
redits, 0);
> > > > > +                               rc =3D -ENOMEM;
> > > > > +                               break;
> > > > > +                       }
> > > > > +
> > > > > +                       npages =3D (cur_len + start + PAGE_SIZE-1=
) / PAGE_SIZE;
> > > > > +                       rdata->page_offset =3D start;
> > > > > +                       rdata->tailsz =3D npages > 1 ?
> > > > > +                               cur_len-(PAGE_SIZE-start)-(npages=
-2)*PAGE_SIZE :
> > > > > +                               cur_len;
> > > > > +
> > > > > +               } else {
> > > > > +
> > > > > +                       npages =3D DIV_ROUND_UP(cur_len, PAGE_SIZ=
E);
> > > > > +                       /* allocate a readdata struct */
> > > > > +                       rdata =3D cifs_readdata_alloc(npages,
> > > > >                                             cifs_uncached_readv_c=
omplete);
> > > > > -               if (!rdata) {
> > > > > -                       add_credits_and_wake_if(server, credits, =
0);
> > > > > -                       rc =3D -ENOMEM;
> > > > > -                       break;
> > > > > -               }
> > > > > +                       if (!rdata) {
> > > > > +                               add_credits_and_wake_if(server, c=
redits, 0);
> > > > > +                               rc =3D -ENOMEM;
> > > > > +                               break;
> > > > > +                       }
> > > > >
> > > > > -               rc =3D cifs_read_allocate_pages(rdata, npages);
> > > > > -               if (rc)
> > > > > -                       goto error;
> > > > > +                       rc =3D cifs_read_allocate_pages(rdata, np=
ages);
> > > > > +                       if (rc)
> > > > > +                               goto error;
> > > > > +
> > > > > +                       rdata->tailsz =3D PAGE_SIZE;
> > > > > +               }
> > > > >
> > > > >                 rdata->cfile =3D cifsFileInfo_get(open_file);
> > > > >                 rdata->nr_pages =3D npages; @@ -3139,7 +3237,6 @@
> > > > > cifs_send_async_read(loff_t offset, size_t len, struct cifsFileIn=
fo
> > *open_file,
> > > > >                 rdata->bytes =3D cur_len;
> > > > >                 rdata->pid =3D pid;
> > > > >                 rdata->pagesz =3D PAGE_SIZE;
> > > > > -               rdata->tailsz =3D PAGE_SIZE;
> > > > >                 rdata->read_into_pages =3D cifs_uncached_read_int=
o_pages;
> > > > >                 rdata->copy_into_pages =3D cifs_uncached_copy_int=
o_pages;
> > > > >                 rdata->credits =3D credits; @@ -3153,9 +3250,11 @=
@
> > > > > cifs_send_async_read(loff_t offset, size_t len, struct cifsFileIn=
fo
> > *open_file,
> > > > >                 if (rc) {
> > > > >                         add_credits_and_wake_if(server, rdata->cr=
edits, 0);
> > > > >                         kref_put(&rdata->refcount,
> > > > > -                                cifs_uncached_readdata_release);
> > > > > -                       if (rc =3D=3D -EAGAIN)
> > > > > +                               cifs_uncached_readdata_release);
> > > > > +                       if (rc =3D=3D -EAGAIN) {
> > > > > +                               iov_iter_revert(&direct_iov,
> > > > > + cur_len);
> > > > >                                 continue;
> > > > > +                       }
> > > > >                         break;
> > > > >                 }
> > > > >
> > > > > @@ -3211,45 +3310,62 @@ collect_uncached_read_data(struct
> > > > cifs_aio_ctx *ctx)
> > > > >                                  * reading.
> > > > >                                  */
> > > > >                                 if (got_bytes && got_bytes < rdat=
a->bytes) {
> > > > > -                                       rc =3D cifs_readdata_to_i=
ov(rdata, to);
> > > > > +                                       rc =3D 0;
> > > > > +                                       if (!ctx->direct_io)
> > > > > +                                               rc =3D
> > > > > + cifs_readdata_to_iov(rdata, to);
> > > > >                                         if (rc) {
> > > > >                                                 kref_put(&rdata->=
refcount,
> > > > > -                                               cifs_uncached_rea=
ddata_release);
> > > > > +
> > > > > + cifs_uncached_readdata_release);
> > > > >                                                 continue;
> > > > >                                         }
> > > > >                                 }
> > > > >
> > > > > -                               rc =3D cifs_send_async_read(
> > > > > +                               if (ctx->direct_io) {
> > > > > +                                       /*
> > > > > +                                        * Re-use rdata as this i=
s a
> > > > > +                                        * direct I/O
> > > > > +                                        */
> > > > > +                                       rc =3D cifs_resend_rdata(
> > > > > +                                               rdata,
> > > > > +                                               &tmp_list, ctx);
> > > >
> > > > ...so we set rc to -EBUSY...
> > > >
> > > >
> > > > > +                               } else {
> > > > > +                                       rc =3D cifs_send_async_re=
ad(
> > > > >                                                 rdata->offset + g=
ot_bytes,
> > > > >                                                 rdata->bytes - go=
t_bytes,
> > > > >                                                 rdata->cfile, cif=
s_sb,
> > > > >                                                 &tmp_list, ctx);
> > > > >
> > > > > +                                       kref_put(&rdata->refcount=
,
> > > > > +                                               cifs_uncached_rea=
ddata_release);
> > > > > +                               }
> > > > > +
> > > > >                                 list_splice(&tmp_list,
> > > > > &ctx->list);
> > > > >
> > > > > -                               kref_put(&rdata->refcount,
> > > > > -                                        cifs_uncached_readdata_r=
elease);
> > > > >                                 goto again;
> > > > >                         } else if (rdata->result)
> > > > >                                 rc =3D rdata->result;
> > > > > -                       else
> > > > > +                       else if (!ctx->direct_io)
> > > > >                                 rc =3D cifs_readdata_to_iov(rdata=
,
> > > > > to);
> > > > >
> > > > >                         /* if there was a short read -- discard a=
nything left */
> > > > >                         if (rdata->got_bytes && rdata->got_bytes =
< rdata->bytes)
> > > > >                                 rc =3D -ENODATA;
> > > > > +
> > > > > +                       ctx->total_len +=3D rdata->got_bytes;
> > > > >                 }
> > > > >                 list_del_init(&rdata->list);
> > > > >                 kref_put(&rdata->refcount, cifs_uncached_readdata=
_release);
> > > > >         }
> > > > >
> > > > > -       for (i =3D 0; i < ctx->npages; i++) {
> > > > > -               if (ctx->should_dirty)
> > > > > -                       set_page_dirty(ctx->bv[i].bv_page);
> > > > > -               put_page(ctx->bv[i].bv_page);
> > > > > -       }
> > > > > +       if (!ctx->direct_io) {
> > > > > +               for (i =3D 0; i < ctx->npages; i++) {
> > > > > +                       if (ctx->should_dirty)
> > > > > +                               set_page_dirty(ctx->bv[i].bv_page=
);
> > > > > +                       put_page(ctx->bv[i].bv_page);
> > > > > +               }
> > > > >
> > > > > -       ctx->total_len =3D ctx->len - iov_iter_count(to);
> > > > > +               ctx->total_len =3D ctx->len - iov_iter_count(to);
> > > > > +       }
> > > > >
> > > > >         cifs_stats_bytes_read(tcon, ctx->total_len);
> > > > >
> > > > > @@ -3267,18 +3383,27 @@ collect_uncached_read_data(struct
> > > > cifs_aio_ctx *ctx)
> > > > >                 complete(&ctx->done);
> > > >
> > > > and then ctx->rc is set to -EBUSY too.
> > > >
> > > > >  }
> > > > >
> > > > > -ssize_t cifs_user_readv(struct kiocb *iocb, struct iov_iter *to)
> > > > > +ssize_t __cifs_readv(struct kiocb *iocb, struct iov_iter *to,
> > > > > +bool
> > > > > +direct)
> > > > >  {
> > > > > -       struct file *file =3D iocb->ki_filp;
> > > > > -       ssize_t rc;
> > > > >         size_t len;
> > > > > -       ssize_t total_read =3D 0;
> > > > > -       loff_t offset =3D iocb->ki_pos;
> > > > > +       struct file *file =3D iocb->ki_filp;
> > > > >         struct cifs_sb_info *cifs_sb;
> > > > > -       struct cifs_tcon *tcon;
> > > > >         struct cifsFileInfo *cfile;
> > > > > +       struct cifs_tcon *tcon;
> > > > > +       ssize_t rc, total_read =3D 0;
> > > > > +       loff_t offset =3D iocb->ki_pos;
> > > > >         struct cifs_aio_ctx *ctx;
> > > > >
> > > > > +       /*
> > > > > +        * iov_iter_get_pages_alloc() doesn't work with ITER_KVEC=
,
> > > > > +        * fall back to data copy read path
> > > > > +        * this could be improved by getting pages directly in IT=
ER_KVEC
> > > > > +        */
> > > > > +       if (direct && to->type & ITER_KVEC) {
> > > > > +               cifs_dbg(FYI, "use non-direct cifs_user_readv for=
 kvec I/O\n");
> > > > > +               direct =3D false;
> > > > > +       }
> > > > > +
> > > > >         len =3D iov_iter_count(to);
> > > > >         if (!len)
> > > > >                 return 0;
> > > > > @@ -3305,14 +3430,20 @@ ssize_t cifs_user_readv(struct kiocb
> > > > > *iocb,
> > > > struct iov_iter *to)
> > > > >         if (to->type =3D=3D ITER_IOVEC)
> > > > >                 ctx->should_dirty =3D true;
> > > > >
> > > > > -       rc =3D setup_aio_ctx_iter(ctx, to, READ);
> > > > > -       if (rc) {
> > > > > -               kref_put(&ctx->refcount, cifs_aio_ctx_release);
> > > > > -               return rc;
> > > > > +       if (direct) {
> > > > > +               ctx->pos =3D offset;
> > > > > +               ctx->direct_io =3D true;
> > > > > +               ctx->iter =3D *to;
> > > > > +               ctx->len =3D len;
> > > > > +       } else {
> > > > > +               rc =3D setup_aio_ctx_iter(ctx, to, READ);
> > > > > +               if (rc) {
> > > > > +                       kref_put(&ctx->refcount, cifs_aio_ctx_rel=
ease);
> > > > > +                       return rc;
> > > > > +               }
> > > > > +               len =3D ctx->len;
> > > > >         }
> > > > >
> > > > > -       len =3D ctx->len;
> > > > > -
> > > > >         /* grab a lock here due to read response handlers can acc=
ess ctx */
> > > > >         mutex_lock(&ctx->aio_mutex);
> > > > >
> > > > > @@ -3354,6 +3485,16 @@ ssize_t cifs_user_readv(struct kiocb *iocb=
,
> > > > struct iov_iter *to)
> > > > >         return rc;
> > > >
> > > > In case of a blocking read we will return -EBUSY to the caller but
> > > > read man page doesn't say anything about a possibility to return
> > > > this error code. Is it being mapped somehow by VFS or is there
> > > > another consideration? The same question applies to the write patch=
 as
> > well.
> > >
> > > Thanks Pavel,  Yes this is a bug.
> > >
> > > In practice, the retry logic will rarely get hit. If getting hit, nor=
mally the
> > server will give us far more credits for resending this whole packet.
> > >
> > > How about just retrying forever (instead of trying 3 times) on this r=
esend
> > packet? This will change the code to the same behavior before direct I/=
O
> > patches.
> > >
> > > e.g.:
> > >
> > >         /*
> > >          * Try to resend this wdata, waiting for credits before sendi=
ng
> > >          * Note: we are attempting to resend the whole wdata not in
> > segments
> > >          */
> > >         do {
> > >                 rc =3D server->ops->wait_mtu_credits(
> > >                         server, wdata->bytes, &wsize, &credits);
> > >
> > >                 if (rc)
> > >                         break;
> > >
> > >                 if (wsize < wdata->bytes) {
> > >                         add_credits_and_wake_if(server, credits, 0);
> > >                         msleep(1000);
> > >                 }
> > >         } while (wsize < wdata->bytes);
> > >
> >
> > We can do that but it won't be the same behavior because we were using =
a
> > partial send:
>
> Yes it's a little different.
>
> I don't see any ill effects of doing this, other than we may wait for a l=
ittle longer on a full credit to send the whole packet. In practice the ser=
ver always offers a full credit on the first call to wait_mtu_credits(), I =
am yet to see the while loop actually get looped.
>
> The resend path is rarely getting hit in stress tests on TCP, I estimate =
maybe less than 0.001% on my test setup, the while loop for waiting credits=
 is ever harder to hit that I never see one.
>
> On RDMA, the resend path is never used.

Ok. Another way to fix this is to break the request into several
smaller ones consuming 1 credit per request - see
cifs_writev_requeue() function that does the same thing for writes.

--
Best regards,
Pavel Shilovsky
