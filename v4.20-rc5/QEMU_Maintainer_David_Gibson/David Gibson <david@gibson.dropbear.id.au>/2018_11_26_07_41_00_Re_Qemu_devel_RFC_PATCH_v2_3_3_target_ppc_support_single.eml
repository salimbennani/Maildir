Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 27 Nov 2018 08:42:07 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 821695802E4
	for <like.xu@linux.intel.com>; Mon, 26 Nov 2018 14:42:18 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 26 Nov 2018 14:42:17 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3At419zxFNxP/1B56yboNoZJ1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ76p8q+bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJWSJPAp2y?=
 =?us-ascii?q?YYgBD+UOIelXsovyqFUToxumBwSiBuzixiJGi3Pqw6I6yP8sEQ7a0AE6Bd8CrG?=
 =?us-ascii?q?7ZoMvzOawPUe611q7IzTDbYv1Ywzj99onIfQ08qv+NXLJ/atHRyU4pFwjYiVif?=
 =?us-ascii?q?tJbqPy2U1usQqGWb4OtgWvm0i24grQF9uCWgxt0rionRnY0a1ErL9T9jzIY0ON?=
 =?us-ascii?q?K0UlR0YcO9HZZWqiqUOYx2QsY4TGFpviY30roGuJ+/fCcQ05sn3ATTa/udc4iH?=
 =?us-ascii?q?+h7sSfyRITBghH1+Zr2wnQyy/VKhyuLhUMS/zVVErjJdn9XSqnwA1Abf5tWaRv?=
 =?us-ascii?q?Z+5EutxziC2gDJ5u1ZI004jbTXJpE9zrItk5cev0DOEjPqlEjzkqObc1go9+2t?=
 =?us-ascii?q?5uj5ZLjtu4WSOJVuig7kN6Qjgsy/Dvo8MggJR2Wb/eW81Kb//U3iWrlKgfs2kr?=
 =?us-ascii?q?TDvJDdP8Qbqba1Aw5T0ok99xayFymq3MgbkHUdMV5JZRGKg5L3N1zAIP30F+qz?=
 =?us-ascii?q?jla0nDdu3f/GP7nhApvXLnjElbfsZa995FBZyAou1NxQ+oxbCq8fL/L3Q0P+r9?=
 =?us-ascii?q?vYDgI/MwOo3ennE9Jx1ocfWWKMHKCVKqzTsUKQ6+IrIumMYpIVuTnnJ/gk4f7u?=
 =?us-ascii?q?kWE2mVsHcaa12psXbWu1HvJhI0WfbnrshMoBHX0NvgokQ+zmkEeCXiJLZ3auQ6?=
 =?us-ascii?q?I84Sk2CIanDYfAWI+hmrOA3DqgE51SZ2BGDE2MEHjye4WFXfcMdDydIst7njMY?=
 =?us-ascii?q?UrihTtxp6Be1qQWvy6Z7NvGGvWoctIn/z55z4Ovckwx08iZ7SMGU0mWIRmczmX?=
 =?us-ascii?q?sURjgwx+dmrElgj1uOz6V80MFeDsFZsvZAUwMmMszFwulnTtz/RA/FO82EUUur?=
 =?us-ascii?q?WcmOBzY3QdQshdgUbBFmBt+ggxvfijesGKIfjLeRBZY5oZ7bilb4Lcd0zXGO7q?=
 =?us-ascii?q?46hkJuFsVGL2q9j7VX8wnVGp6Pkk+c0a2tcPJP8jTK8TKvxHSPsAl3UQRrVqON?=
 =?us-ascii?q?CXwWeErahdv47FjFSfmiE7M/OAZI04iDJu1Dd4u63h19WP7/NYGGMCqKkGCqCE?=
 =?us-ascii?q?PNn+vUYQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAADzdfxbhxHrdtBjFgMBAQEBAQEBA?=
 =?us-ascii?q?QEBAQEHAQEBAQEBgVEEAQEBAQELAYEwgTmBKYwRX4skgg16lkKBcwINBRgHDYh?=
 =?us-ascii?q?jIjQJDQEDAQEBAQEBAgETAQEBCgsJCBsOIwyCNgUCAxoBBoJcAQIDAQIkGQEBB?=
 =?us-ascii?q?AopAQIDAQIGAQEKDgoJHQgDAQsFGDETBQSDGAGCAQEEpVKBbDOCdgEBBYceBwi?=
 =?us-ascii?q?CbYgAgRwXgX+BEYJdNYRHG4V3iQEggXKUcQmCIIRciigLGF+BR45ikA+IIYFGg?=
 =?us-ascii?q?g0zGggXGYMnCYISDBcSgXKGWoVSLTGBBAOJbVaBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0ABAADzdfxbhxHrdtBjFgMBAQEBAQEBAQEBAQEHAQEBAQE?=
 =?us-ascii?q?BgVEEAQEBAQELAYEwgTmBKYwRX4skgg16lkKBcwINBRgHDYhjIjQJDQEDAQEBA?=
 =?us-ascii?q?QEBAgETAQEBCgsJCBsOIwyCNgUCAxoBBoJcAQIDAQIkGQEBBAopAQIDAQIGAQE?=
 =?us-ascii?q?KDgoJHQgDAQsFGDETBQSDGAGCAQEEpVKBbDOCdgEBBYceBwiCbYgAgRwXgX+BE?=
 =?us-ascii?q?YJdNYRHG4V3iQEggXKUcQmCIIRciigLGF+BR45ikA+IIYFGgg0zGggXGYMnCYI?=
 =?us-ascii?q?SDBcSgXKGWoVSLTGBBAOJbVaBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,284,1539673200"; 
   d="asc'?scan'208";a="64068041"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mga01b.intel.com with ESMTP/TLS/AES256-SHA; 26 Nov 2018 14:42:17 -0800
Received: from localhost ([::1]:39135 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gRPa4-00067Z-ND
	for like.xu@linux.intel.com; Mon, 26 Nov 2018 17:42:16 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:37925)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <dgibson@ozlabs.org>) id 1gRPYb-0005Le-Tz
	for qemu-devel@nongnu.org; Mon, 26 Nov 2018 17:40:46 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <dgibson@ozlabs.org>) id 1gRPWw-0004yr-CU
	for qemu-devel@nongnu.org; Mon, 26 Nov 2018 17:39:03 -0500
Received: from ozlabs.org ([2401:3900:2:1::2]:41119)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <dgibson@ozlabs.org>) id 1gRPWu-0004yF-DA
	for qemu-devel@nongnu.org; Mon, 26 Nov 2018 17:39:02 -0500
Received: by ozlabs.org (Postfix, from userid 1007)
	id 433hfN50t5z9s3l; Tue, 27 Nov 2018 09:38:52 +1100 (AEDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
	d=gibson.dropbear.id.au; s=201602; t=1543271932;
	bh=sLwsGYozH91ewLPmAZrZGmNdkYlQLbvvuaBcUb4gXUQ=;
	h=Date:From:To:Cc:Subject:References:In-Reply-To:From;
	b=e+NrkwT8s2NWuW7rDyivumR5m/8iZB/qoHIGk4rEZ/ANSMvFaHAxlQ/LeSJj2cDUE
	L01FQGWQaH66NgL4xJE2VC03ISME/8tZv7s9AmTZ9+JZCsjTalnilQSuLovzafbYXw
	0Pyvbtg4qhaRHRabBrljcObbA9b9I4BEqqB4FcGk=
Date: Mon, 26 Nov 2018 18:41:00 +1100
From: David Gibson <david@gibson.dropbear.id.au>
To: Fabiano Rosas <farosas@linux.ibm.com>
Message-ID: <20181126074100.GJ2251@umbus.fritz.box>
References: <20181121181347.24035-1-farosas@linux.ibm.com>
	<20181121181347.24035-4-farosas@linux.ibm.com>
MIME-Version: 1.0
Content-Type: multipart/signed; micalg=pgp-sha256;
	protocol="application/pgp-signature"; boundary="cN519qCC4CN1mUcX"
Content-Disposition: inline
In-Reply-To: <20181121181347.24035-4-farosas@linux.ibm.com>
User-Agent: Mutt/1.10.1 (2018-07-13)
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 2401:3900:2:1::2
Subject: Re: [Qemu-devel] [RFC PATCH v2 3/3] target/ppc: support single
 stepping with KVM HV
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Peter Maydell <peter.maydell@linaro.org>, Cornelia Huck <cohuck@redhat.com>,
	Eduardo Habkost <ehabkost@redhat.com>,
	Peter Crosthwaite <crosthwaite.peter@gmail.com>,
	James Hogan <jhogan@kernel.org>, Marcelo Tosatti <mtosatti@redhat.com>,
	David Hildenbrand <david@redhat.com>, qemu-devel@nongnu.org,
	Christian Borntraeger <borntraeger@de.ibm.com>,
	Aleksandar Markovic <amarkovic@wavecomp.com>,
	Paolo Bonzini <pbonzini@redhat.com>, philmd@redhat.com,
	Aurelien Jarno <aurelien@aurel32.net>, Richard Henderson <rth@twiddle.net>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>


--cN519qCC4CN1mUcX
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable

On Wed, Nov 21, 2018 at 04:13:47PM -0200, Fabiano Rosas wrote:
> The hardware singlestep mechanism in POWER works via a Trace Interrupt
> (0xd00) that happens after any instruction executes, whenever MSR_SE =3D
> 1 (PowerISA Section 6.5.15 - Trace Interrupt).
>=20
> However, with kvm_hv, the Trace Interrupt happens inside the guest and
> KVM has no visibility of it. Therefore, when the gdbstub uses the
> KVM_SET_GUEST_DEBUG ioctl to enable singlestep, KVM simply ignores it.
>=20
> This patch takes advantage of the Trace Interrupt to perform the step
> inside the guest, but uses a breakpoint at the Trace Interrupt handler
> to return control to KVM. The exit is treated by KVM as a regular
> breakpoint and it returns to the host (and QEMU eventually).
>=20
> Before signalling GDB, QEMU sets the Next Instruction Pointer to the
> instruction following the one being stepped, effectively skipping the
> interrupt handler execution and hiding the trace interrupt breakpoint
> from GDB.
>=20
> This approach works with both of GDB's 'scheduler-locking' options
> (off, step).
>=20
> Signed-off-by: Fabiano Rosas <farosas@linux.ibm.com>
> ---
>  target/ppc/kvm.c | 61 +++++++++++++++++++++++++++++++++++++++++++++++-
>  1 file changed, 60 insertions(+), 1 deletion(-)
>=20
> diff --git a/target/ppc/kvm.c b/target/ppc/kvm.c
> index 9d0b4f1f3f..93c20099e6 100644
> --- a/target/ppc/kvm.c
> +++ b/target/ppc/kvm.c
> @@ -94,6 +94,7 @@ static int cap_ppc_safe_indirect_branch;
>  static int cap_ppc_nested_kvm_hv;
> =20
>  static uint32_t debug_inst_opcode;
> +static target_ulong trace_handler_addr;
> =20
>  /* XXX We have a race condition where we actually have a level triggered
>   *     interrupt, but the infrastructure can't expose that yet, so the g=
uest
> @@ -509,6 +510,9 @@ int kvm_arch_init_vcpu(CPUState *cs)
>      kvm_get_one_reg(cs, KVM_REG_PPC_DEBUG_INST, &debug_inst_opcode);
>      kvmppc_hw_debug_points_init(cenv);
> =20
> +    trace_handler_addr =3D (cenv->excp_vectors[POWERPC_EXCP_TRACE] |
> +                          AIL_C000_0000_0000_4000_OFFSET);

Effectively caching this as a global variable is pretty horrible.  A
function to make the above calculation when you need it would be
better.

Also, won't the calculation above be wrong if the guest is using the
low AIL value?

> +
>      return ret;
>  }
> =20
> @@ -1553,6 +1557,24 @@ void kvm_arch_remove_all_hw_breakpoints(void)
> =20
>  void kvm_arch_set_singlestep(CPUState *cs, int enabled)
>  {
> +    PowerPCCPU *cpu =3D POWERPC_CPU(cs);
> +    CPUPPCState *env =3D &cpu->env;
> +
> +    if (kvmppc_is_pr(kvm_state)) {

Explicitly testing for KVM PR is generally wrong (except as a
fallback).  Instead you should add a capability flag to KVM which you
use to test the feature's presence in qemu.  That capability can then
be set in HV, but not PR.

> +            return;
> +    }
> +
> +    if (enabled) {
> +        /* MSR_SE =3D 1 will cause a Trace Interrupt in the guest after
> +         * the next instruction executes. */
> +        env->msr |=3D (1ULL << MSR_SE);
> +
> +        /* We set a breakpoint at the interrupt handler address so
> +         * that the singlestep will be seen by KVM (this is treated by
> +         * KVM like an ordinary breakpoint) and control is returned to
> +         * QEMU. */
> +        kvm_insert_breakpoint(cs, trace_handler_addr, 4, GDB_BREAKPOINT_=
SW);
> +    }
>  }
> =20
>  void kvm_arch_update_guest_debug(CPUState *cs, struct kvm_guest_debug *d=
bg)
> @@ -1594,6 +1616,43 @@ void kvm_arch_update_guest_debug(CPUState *cs, str=
uct kvm_guest_debug *dbg)
>      }
>  }
> =20
> +static int kvm_handle_singlestep(CPUState *cs,
> +                                 struct kvm_debug_exit_arch *arch_info)
> +{
> +    PowerPCCPU *cpu =3D POWERPC_CPU(cs);
> +    CPUPPCState *env =3D &cpu->env;
> +    target_ulong msr =3D env->msr;
> +    uint32_t insn;
> +    int ret =3D 1;

You never set this to anything other than 1...

> +    int reg;
> +
> +    if (kvmppc_is_pr(kvm_state)) {
> +        return ret;
> +    }
> +
> +    if (arch_info->address =3D=3D trace_handler_addr) {
> +        cpu_synchronize_state(cs);
> +        kvm_remove_breakpoint(cs, trace_handler_addr, 4, GDB_BREAKPOINT_=
SW);
> +
> +        cpu_memory_rw_debug(cs, env->spr[SPR_SRR0] - 4, (uint8_t *)&insn,
> +                            sizeof(insn), 0);
> +
> +        /* If the last instruction was a mfmsr, make sure that the
> +         * MSR_SE bit is not set to avoid the guest kernel knowing
> +         * that it is being single-stepped */
> +        if (extract32(insn, 26, 6) =3D=3D 31 && extract32(insn, 1, 10) =
=3D=3D 83) {
> +            reg =3D extract32(insn, 21, 5);
> +            env->gpr[reg] &=3D ~(1ULL << MSR_SE);
> +        }

Hm.  What happens if both qemu and the guest itself attempt to single
step at the same time?  How do you distinguish between the cases?

> +
> +        env->nip =3D env->spr[SPR_SRR0];
> +        env->msr =3D msr &=3D ~(1ULL << MSR_SE);

You clear SE after tracing one instruction; is that intentional?

> +        cpu_synchronize_state(cs);

You're effectively aborting the entry to the single step exception
vector; don't you need to set MSR to SRR1, not to the current MSR
value which will have been modified for the singlestep exception entry?

You only need the first call to sync_state.  It sets a flag causing
the state to be written back before returning to the guest.

> +    }
> +
> +    return ret;
> +}
> +
>  static int kvm_handle_debug(PowerPCCPU *cpu, struct kvm_run *run)
>  {
>      CPUState *cs =3D CPU(cpu);
> @@ -1604,7 +1663,7 @@ static int kvm_handle_debug(PowerPCCPU *cpu, struct=
 kvm_run *run)
>      int flag =3D 0;
> =20
>      if (cs->singlestep_enabled) {
> -        handle =3D 1;
> +        handle =3D kvm_handle_singlestep(cs, arch_info);
>      } else if (arch_info->status) {
>          if (nb_hw_breakpoint + nb_hw_watchpoint > 0) {
>              if (arch_info->status & KVMPPC_DEBUG_BREAKPOINT) {

--=20
David Gibson			| I'll have my music baroque, and my code
david AT gibson.dropbear.id.au	| minimalist, thank you.  NOT _the_ _other_
				| _way_ _around_!
http://www.ozlabs.org/~dgibson

--cN519qCC4CN1mUcX
Content-Type: application/pgp-signature; name="signature.asc"

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEdfRlhq5hpmzETofcbDjKyiDZs5IFAlv7o4oACgkQbDjKyiDZ
s5LXyg/+K8y1Tn41/FMf1oZFSKQHgKyRZ9tphV8v3NLw8xbX5k2SE7287O81UcCA
2srYSvTdVWTYcBTy48lJ/XbrhasLJa9yx0ZEHqGBmywQKLEONHbIlKA0khDcAYcJ
xdq4nEY7IVO6k3owJfj9/G9ar7NsddL8gwAqpwaFUHmHut6kpahG/rSzbMZrX2Ki
pSSos8/DEP7saIODaxEp617ZIR0ksyXacJV1RGULbPxhLPGXljxX42GjFFoXXy2O
i+a9E46Jz3dT4t/anE0G8WUsQsW8TElzayQV+nbewd+JA59BdkaNqo6EBKBLfG1e
33MRLChmd4UwW6c8vZpjwo9QUe3JNSKn6fm5UBY/SDjyT6qmeXN3jefyHmqsl0Dj
9//8Zjc1Gl+pBoHQQh8bdPTmoCGninqWq6EllM7jmRyxOyJblQ7IGuEbFe27SpHh
IBAtCs0Sdoo41a75+gv5tp1pOq3HG9YEIz4HG5rCqsra9CsuWIDLI2vksymITcIA
CqCB3BXqPuZDHyjOYZGBjpL1FHUXz9Cw07cT0PwMfecPofRLdjQg34PTlY29G1AD
4/PMopZgqBbv3hcg/sDHvB+2kiDfXQ1p/N3SZnyKrLvNpXHnFQSIJbvS+JpgMj39
hUQD8hB8DO4by5de5H8GqkL+KqMqy/ZWRs3I9JdcEMKO2r46xpU=
=Z4ou
-----END PGP SIGNATURE-----

--cN519qCC4CN1mUcX--

