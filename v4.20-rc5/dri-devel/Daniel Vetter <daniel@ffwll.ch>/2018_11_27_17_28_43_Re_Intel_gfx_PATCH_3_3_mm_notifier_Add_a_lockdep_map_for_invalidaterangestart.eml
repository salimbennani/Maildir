Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 28 Nov 2018 08:47:50 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga007.fm.intel.com (fmsmga007.fm.intel.com [10.253.24.52])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 6ADBB5803C2;
	Tue, 27 Nov 2018 09:29:21 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by fmsmga007-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 27 Nov 2018 09:29:21 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AJcVzRRPDQDW3vcltHDEl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KPjzo8bcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRsleVyJDDY28?=
 =?us-ascii?q?YYUBDPcPM/hEoIfyvFsOtRmzCBKwBOP20DJEmmP60bE43uknDArI3BYgH9ULsH?=
 =?us-ascii?q?nMotv6LqESUeGrw6nM0D7MYO1Z2Svh6IfWaBAqvPaBUq9qfsrXyEkgCQfFg06e?=
 =?us-ascii?q?qYzrMTKV0uANv3KH4OpgTO+ijXMspQ92ojiq3Mgsi4/Ji5obylDK+yR5xII1Kc?=
 =?us-ascii?q?ekR057Z9OvDZhetzmCOodoXs8vR3tktDs0x7EYo5K3YSsHxIg9yxPeafGLa5aE?=
 =?us-ascii?q?7g7nWeqLIjp1hGhpdK++ihuz60Ss1+nxW8iy3V1XtCRKiMPMuWoI1xHL6siIVP?=
 =?us-ascii?q?99/kC51DaR2ADc9PtELVo3laXFMZ4hxKA/lp4JvUTEBC/2l136jK6Qdko65uil?=
 =?us-ascii?q?8/rrbqniq5OGKoN5hB/yPr4zlsG8Heg0KAkDUmqD9eS5zrLj/En5QLtQjv0xl6?=
 =?us-ascii?q?nUqJTaJcUdpq6kDA5Zy4Uj5AilDzegztsYmWALLFVLeRKBkYfpIUrDIO73Dfih?=
 =?us-ascii?q?mVSgijRryO7cPr3nHJrNKmLPkLD7fbZy80Jc0hY8zchD55JIDbEMOPbzWk7ytN?=
 =?us-ascii?q?PGFBM4PBG0zv3jCNV80IMeRG2ODrWYMKPUrV+H+OYvL/OQa48SvTb3M+Il6OL2?=
 =?us-ascii?q?jX8lhV8derGk3ZsNZ3C5AvRpOUKZbWDsgtccC2gKuAU+QffuiF2DVz5TenmzU7?=
 =?us-ascii?q?g95jE9FIKpE4PDSpqxj7yG2SexBodWaXxeClCQDXfocJ2JW/ULaC2MOMNhkTsE?=
 =?us-ascii?q?Vb6nS48mzhyusA76y7x6Luvb4CEYtJTj1MRr6O3Xjx096Tt0D8GF2WGXU250hn?=
 =?us-ascii?q?8IRyMx3K1nu0N90VeD0a97g/BCD9xc/fFJXxw+NZ7dyex6Ft/zVhjAftePVFap?=
 =?us-ascii?q?XNGmDSstQdI2xt8Ee1x9FMm6jhDfwyqqBKcYl7+RC5wy6K7c23nxKNx7y3bJz6?=
 =?us-ascii?q?Qhi1gmQs1SNWypnKJ/9g7TB5LXnEWdjaqlaaMc3CvV/meZ0WWOpF1YUBJ3Uajd?=
 =?us-ascii?q?QH8QfFXWosrj6kPCVbCuD68nPRVHycKFLqtKadjpjVFdSffnOdTeZX+xmmiqCR?=
 =?us-ascii?q?aJwLOMcJTle2EH0CrBD0gElhgZ/WyaOggmGiehv2XeASRzGl31fUPj7/NyqHOh?=
 =?us-ascii?q?QU8y1AGFcUth2qGx+h4Ug/ycVvwS0qgFuCcntzV7AlK908jKBNqHogprZL9cbs?=
 =?us-ascii?q?8l4FdbyWLZsBRwPoChL6BngV4ebwR3vkP02xVrEIlAltIqrHcrzAp0JqKVy1dB?=
 =?us-ascii?q?dzKe3ZDtNbzbMGjy/Baza6HI3lHSysqZ+qAK6P4gsVXsoBmpFlY+83Vgy9RayX?=
 =?us-ascii?q?+c6YvFDQUMUZP9SF049wVnqL7AZCk95ITU1WN3PKmwsz/C3c8pBeQ/xhaheddf?=
 =?us-ascii?q?LL2LFAvoH8IGAMiuLfQgm0K1YRIcIOBS6Kk0MtumdvubwqKkIPxsnTOmjWtd5o?=
 =?us-ascii?q?B93VmB9y59Su7OwpYEzOuU3gqBVzfgklihttr7lpxDZTEXBmC/0zTrBJZNZq1u?=
 =?us-ascii?q?eoYGEX2uI8yrydpknZ7iRnlY+ESlB1wYws+peAOeYEDn0g1UyEsYv2anmSy+zz?=
 =?us-ascii?q?FvlzEpr6yf3DHBwuj4dRoHPHJLS3dmjVv2PYe0iNUaVlCybwc1jBul+Vr6x69D?=
 =?us-ascii?q?qaV/LmnfW0dJczLtL2F/VKu9rb6CY89J6JM1viRbSuW8YVaGSrHjpxsWyT/sH2?=
 =?us-ascii?q?xbxDojbTGlpo35nwBmiGKaNHtzrmDWedtzxRfc49zQX+VR0SAFRCl7iDnXAEaz?=
 =?us-ascii?q?P9+y8NWQlpfDtP2+Vm27Wp1Sdynr0Z2PtC+h6WJ2Bh2/mui5msf7HggizS/7y9?=
 =?us-ascii?q?5qWD3IrRnmZYnnzaa6MeNhfkRzAF/86sx6Gpxxk4cqhZEQ32QaiYuR/XYdjWjz?=
 =?us-ascii?q?NtBb07rkbHURXT4L38LV4A/91U1gNH2Jxpj1VnWAwsR7Ydm6bXgb2iY878BMFa?=
 =?us-ascii?q?eV46ZInSpzolqksw3RZeJxkSsayfsr8HQamf0GuBIxziWBBbAfBUxYPS3vlxuS?=
 =?us-ascii?q?9dy/ortYZH2zcbeuzkpxhs6uDKuNogxHXHb5e5EiHTJ/78llMVLM1mHz5Z/geN?=
 =?us-ascii?q?XKcd0TsRiUmQ/aj+dJMJIxiuYKhS1/NGLhun0lzvQ3jB100pG8oYiHMH5t/KOi?=
 =?us-ascii?q?Dx5cNz31Yd4T+z73gaZfmMaWw56gHpF7FjoXW5voSOqiECgOuvT/KwaODDo8p2?=
 =?us-ascii?q?+AFrXFGg+f7Fpmo2jLE5C2LHyXIHgZzdN/RBiSPkBfgQYUXCkkkZ49DAyl2Mvh?=
 =?us-ascii?q?cEJh7DAL+lH4sgdMyv5vNxTnUGfQvgKoZSkvSJSFMBpa9AJC51rWMcyD6OJ8BT?=
 =?us-ascii?q?pY84alrAyMLGybegtJAXsIWkyCG1DsIL2u6cPc/OifA+q0N+HObqmWqexCS/eI?=
 =?us-ascii?q?woqi04th/zaRL8WPI2NtD/sh1kpYWnB5HcvZli4LSywWkSLNcsGaqA29+i1xss?=
 =?us-ascii?q?Cw7vDrVBjz6ouIDrtYKc9v9AyugaefK+6Qgz50KTZG2ZMNxn/Iy7kf0EQRiyF0?=
 =?us-ascii?q?cDmtHqoPtTTQTKLLgaJXCx8bayVuNMpH9a483w9NOdLFhdPxzLJ3kvk1C1JdX1?=
 =?us-ascii?q?z7hs6pfdAKI326NF7fHkmLKa+JJSfVzMD3e6+8TbxQgf5Qtx2xvzabDkDiMi6C?=
 =?us-ascii?q?lznvSxCgL+VMgDuHMxxZvYG3agxtBnT7TNL6dh27N8d6jSE3wb0xnH/FKXQQPi?=
 =?us-ascii?q?R8c0xTqL2d9idYgvR5G2xc4XtpN+iEmyCF7+bGLpYaq+dkAiNxl+hC+nQ116NV?=
 =?us-ascii?q?7D1YRPxygCbTrsRho1ejkumOzDpoSBtPqjZRi4KNskVvIqHZ9phGWXbZ8xMB92?=
 =?us-ascii?q?SQCxIWp9R7Dt3jobxfyt/KlPG7FDAX2NLO/NBUOMnQM8WBeC4qMQDoAxbfDBEE?=
 =?us-ascii?q?Vnu0NGXEgEobm/bU637D/bYgrZ25tJMIS7JfHGI4Cu8XEAwxENUEIZpzdj0qjr?=
 =?us-ascii?q?qfysUIsynt5CLNTdlX68iUHsmZBu/ifXPA1eFJ?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BaAABufv1bh0O0hNFkHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwEBgmiBAieDOj+IGIwJgg0UkjWEd4EkA0wsAxABgUuCdYNoIjQJDQEDAQE?=
 =?us-ascii?q?BAQEBAgETAQEBCA0JCCkjDEIWAYFdJAGCYQEBAQECAQECCRcEGQEBNwEFCQEBC?=
 =?us-ascii?q?AILDQICJgICAx8SAQUBHAYTBYMcAYF5CAWJf5AHPIodcHwzgnYBAQWGP2cIEnm?=
 =?us-ascii?q?LAheBf4QjhQGDBIJXixeEG5AWPAoJgRGBD4RcijQYX3pNh2KHAyyXfDCBJWyBI?=
 =?us-ascii?q?TMaCDBsBoI1CYISDBcSgxCKfD4zAYEEAQGJeoMVAQE?=
X-IPAS-Result: =?us-ascii?q?A0BaAABufv1bh0O0hNFkHQEBBQEHBQGBUQgBCwEBgmiBAie?=
 =?us-ascii?q?DOj+IGIwJgg0UkjWEd4EkA0wsAxABgUuCdYNoIjQJDQEDAQEBAQEBAgETAQEBC?=
 =?us-ascii?q?A0JCCkjDEIWAYFdJAGCYQEBAQECAQECCRcEGQEBNwEFCQEBCAILDQICJgICAx8?=
 =?us-ascii?q?SAQUBHAYTBYMcAYF5CAWJf5AHPIodcHwzgnYBAQWGP2cIEnmLAheBf4QjhQGDB?=
 =?us-ascii?q?IJXixeEG5AWPAoJgRGBD4RcijQYX3pNh2KHAyyXfDCBJWyBITMaCDBsBoI1CYI?=
 =?us-ascii?q?SDBcSgxCKfD4zAYEEAQGJeoMVAQE?=
X-IronPort-AV: E=Sophos;i="5.56,287,1539673200"; 
   d="scan'208";a="53534701"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 27 Nov 2018 09:28:59 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1731658AbeK1E1c (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 27 Nov 2018 23:27:32 -0500
Received: from mail-it1-f196.google.com ([209.85.166.196]:37757 "EHLO
        mail-it1-f196.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1731510AbeK1E1c (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 27 Nov 2018 23:27:32 -0500
Received: by mail-it1-f196.google.com with SMTP id b5so35240774iti.2
        for <linux-kernel@vger.kernel.org>; Tue, 27 Nov 2018 09:28:55 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=ffwll.ch; s=google;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc:content-transfer-encoding;
        bh=R54rcm9i1O3/vapsG6b7Bk69Dxa8PcW9ozp5iuX3CeU=;
        b=KlfhoZWMVerQd5UONN5UQZQZ6MiJ0nmxIOl8FI/eKEgHNSEyR6pljjpr92ey//qKd1
         1ZRhGkJERzVjerFEI+2AZpBCd7fwZQunhjch73OGTEF0PLCaC1iN3KJlgycZS5AnokBd
         yufTuAX1LLUiwfw72DqjYMZtIuD+8GhgUZaFk=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc:content-transfer-encoding;
        bh=R54rcm9i1O3/vapsG6b7Bk69Dxa8PcW9ozp5iuX3CeU=;
        b=Sv/LwMCTqceHUhg424QiC01QakzOUS7TtH3zEHSFR8St63X7NSVu9/8Fkraz9mfjlX
         g6BIQcK3ZaoOtqxq4s+G04A4eJH95cra7oPUFVy4obruMBh9uUuX0smoad100qTzBlkt
         j0u3gBxD8dDVSaCP1pCfw5T0sWhVW8M3b5UzCIY+Au+oLHVDihmwQc4gqIWjsjLsrRDA
         9RjlIe1ZK2GRdP8zsWJy48Kc59ZNI+K3KLcaDnWZDv7ok+eLrhFvmNBFFDZRepJWiXK4
         cUEilZqUsg4raX458LiaYupHd0/tV5bbFlMj3ZtZSqpd4v9xvGjAJtEuTUPnk869BsWy
         l4RQ==
X-Gm-Message-State: AA+aEWbFTb8PFyKlRxYnLuiNWQ5wQQS6CWkBvR7B6197sRuGNZfLYe7N
        9EFfbzPFpU23nKGrbm+NcL5sfvGZseHCeQ7sR+PYMG/Y
X-Google-Smtp-Source: AFSGD/W/UebMRCBg1ILW3Lj/Wn5uCtQTQ5/gS3tCWyTtf4SGbySIXlm2NT8dIwj1x1SH+FswBikBS0GoRELX/LPrRis=
X-Received: by 2002:a05:660c:344:: with SMTP id b4mr7146805itl.51.1543339735054;
 Tue, 27 Nov 2018 09:28:55 -0800 (PST)
MIME-Version: 1.0
References: <20181122165106.18238-1-daniel.vetter@ffwll.ch>
 <20181122165106.18238-4-daniel.vetter@ffwll.ch> <20181127074918.GT4266@phenom.ffwll.local>
 <154333737908.11623.17864230889834398136@skylake-alporthouse-com>
In-Reply-To: <154333737908.11623.17864230889834398136@skylake-alporthouse-com>
From: Daniel Vetter <daniel@ffwll.ch>
Date: Tue, 27 Nov 2018 18:28:43 +0100
Message-ID: <CAKMK7uGSP7wWHSRFsCv90qCyHiSBS+o9CK1BPUXbGj6Crcy_Cg@mail.gmail.com>
Subject: Re: [Intel-gfx] [PATCH 3/3] mm, notifier: Add a lockdep map for invalidate_range_start
To: Chris Wilson <chris@chris-wilson.co.uk>
Cc: Linux Kernel Mailing List <linux-kernel@vger.kernel.org>,
        Michal Hocko <mhocko@suse.com>,
        Greg KH <gregkh@linuxfoundation.org>,
        intel-gfx <intel-gfx@lists.freedesktop.org>,
        dri-devel <dri-devel@lists.freedesktop.org>,
        Linux MM <linux-mm@kvack.org>,
        Jerome Glisse <jglisse@redhat.com>,
        Mike Rapoport <rppt@linux.vnet.ibm.com>,
        David Rientjes <rientjes@google.com>,
        Daniel Vetter <daniel.vetter@intel.com>,
        Andrew Morton <akpm@linux-foundation.org>,
        =?UTF-8?Q?Christian_K=C3=B6nig?= <christian.koenig@amd.com>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Tue, Nov 27, 2018 at 5:50 PM Chris Wilson <chris@chris-wilson.co.uk> wro=
te:
>
> Quoting Daniel Vetter (2018-11-27 07:49:18)
> > On Thu, Nov 22, 2018 at 05:51:06PM +0100, Daniel Vetter wrote:
> > > This is a similar idea to the fs_reclaim fake lockdep lock. It's
> > > fairly easy to provoke a specific notifier to be run on a specific
> > > range: Just prep it, and then munmap() it.
> > >
> > > A bit harder, but still doable, is to provoke the mmu notifiers for
> > > all the various callchains that might lead to them. But both at the
> > > same time is really hard to reliable hit, especially when you want to
> > > exercise paths like direct reclaim or compaction, where it's not
> > > easy to control what exactly will be unmapped.
> > >
> > > By introducing a lockdep map to tie them all together we allow lockde=
p
> > > to see a lot more dependencies, without having to actually hit them
> > > in a single challchain while testing.
> > >
> > > Aside: Since I typed this to test i915 mmu notifiers I've only rolled
> > > this out for the invaliate_range_start callback. If there's
> > > interest, we should probably roll this out to all of them. But my
> > > undestanding of core mm is seriously lacking, and I'm not clear on
> > > whether we need a lockdep map for each callback, or whether some can
> > > be shared.
> > >
> > > Cc: Andrew Morton <akpm@linux-foundation.org>
> > > Cc: David Rientjes <rientjes@google.com>
> > > Cc: "J=C3=A9r=C3=B4me Glisse" <jglisse@redhat.com>
> > > Cc: Michal Hocko <mhocko@suse.com>
> > > Cc: "Christian K=C3=B6nig" <christian.koenig@amd.com>
> > > Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
> > > Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
> > > Cc: Mike Rapoport <rppt@linux.vnet.ibm.com>
> > > Cc: linux-mm@kvack.org
> > > Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>
> >
> > Any comments on this one here? This is really the main ingredient for
> > catching deadlocks in mmu notifier callbacks. The other two patches are
> > more the icing on the cake.
> >
> > Thanks, Daniel
> >
> > > ---
> > >  include/linux/mmu_notifier.h | 7 +++++++
> > >  mm/mmu_notifier.c            | 7 +++++++
> > >  2 files changed, 14 insertions(+)
> > >
> > > diff --git a/include/linux/mmu_notifier.h b/include/linux/mmu_notifie=
r.h
> > > index 9893a6432adf..a39ba218dbbe 100644
> > > --- a/include/linux/mmu_notifier.h
> > > +++ b/include/linux/mmu_notifier.h
> > > @@ -12,6 +12,10 @@ struct mmu_notifier_ops;
> > >
> > >  #ifdef CONFIG_MMU_NOTIFIER
> > >
> > > +#ifdef CONFIG_LOCKDEP
> > > +extern struct lockdep_map __mmu_notifier_invalidate_range_start_map;
> > > +#endif
> > > +
> > >  /*
> > >   * The mmu notifier_mm structure is allocated and installed in
> > >   * mm->mmu_notifier_mm inside the mm_take_all_locks() protected
> > > @@ -267,8 +271,11 @@ static inline void mmu_notifier_change_pte(struc=
t mm_struct *mm,
> > >  static inline void mmu_notifier_invalidate_range_start(struct mm_str=
uct *mm,
> > >                                 unsigned long start, unsigned long en=
d)
> > >  {
> > > +     mutex_acquire(&__mmu_notifier_invalidate_range_start_map, 0, 0,
> > > +                   _RET_IP_);
>
> Would not lock_acquire_shared() be more appropriate, i.e. treat this as
> a rwsem_acquire_read()?

read lock critical sections can't create any dependencies against any
other read lock critical section of the same lock. Switching this to a
read lock would just render the annotation pointless (if you don't
include at least some write lock critical section somewhere, but I
have no idea where you'd do that). A read lock that you only ever take
for reading essentially doesn't do anything at all.

So not clear on why you're suggesting this?

It's the exact same idea like fs_reclaim of intserting a fake lock to
tie all possible callchains to a given functions together with all
possible callchains from that function. Of course this is only valid
if all NxM combinations could happen in theory. For fs_reclaim that's
true because direct reclaim can pick anything it wants to
shrink/evict. For mmu notifier that's true as long as we assume any
mmu notifier can be in use by any process, which only depends upon
sufficiently contrived/evil userspace.

I guess I could use lock_map_acquire/release() wrappers for this like
fs_reclaim, would be a bit more clear.
-Daniel
--=20
Daniel Vetter
Software Engineer, Intel Corporation
+41 (0) 79 365 57 48 - http://blog.ffwll.ch
