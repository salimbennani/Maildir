Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:26:59 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from mta-temp.ostc.intel.com (mta-temp.ostc.intel.com [10.54.63.100])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id C2148580782;
	Sat,  1 Dec 2018 18:20:53 -0800 (PST)
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by mta-temp.ostc.intel.com (Postfix) with ESMTPS id 0E86C61B31;
	Sat,  1 Dec 2018 01:58:40 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 01 Dec 2018 01:58:25 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Ak7ZHtRxYAZ4bFUbXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e8XKPad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWlPUNtRWSJfDI2z?=
 =?us-ascii?q?bYUPAPYPMulXoIf9vEMOoBmlCAmwB+7i0CNEimPs0KA41ekqDAHI3BYnH9ILqH?=
 =?us-ascii?q?nats/6NLoWUeuoyafIyinMb/JM1jf564jIdR4goeqPXbJxbMHczlEvGBnYjlWU?=
 =?us-ascii?q?s4DlPDSV2fgMs2eB6+pgVuWvimA8qwFyozii3dwjio7OhoIJzlDE9CN5zJwpKt?=
 =?us-ascii?q?2/TU52eNipG4ZTuSGCL4Z6XN8uTmVytConxLAKp4S3cDUJxZg73RLSav6Kf5CK?=
 =?us-ascii?q?7x/hTuqdPCl0iXF/dL6imxq/81KsxvPiWsWo1ltBszBLncPWtn8X0hze8siHRe?=
 =?us-ascii?q?V5/kemwTuPyQ/T5f9eIUwulqrUNYQhwrgumZoXq0jDGTX2mErugK+XcEUr5PSo?=
 =?us-ascii?q?5vz5brn6opKQLZJ4hw/gPqg0h8CyAvg0PhIPUmWZ4ei80afs/Uz9QLVElP02la?=
 =?us-ascii?q?zZvYjeJcQaoK65HgBU3p8g6xmhFTem1soXnX0eIFJCdhOHiZbmO0vVLfDmAvew?=
 =?us-ascii?q?nU6snC1ox//YJL3hBIvCLnzZnLfmZ7Z95FZQyBAvwtBH+5JUFrYBLer3Wk/wt9?=
 =?us-ascii?q?zXEAU1MgOpw+v8DNV914UeWX+AA6ODMaPSt0OI6fwrI+WWeIAVvzP9IeA/5/Hy?=
 =?us-ascii?q?lX85hUMdfa6x0JsXcn+4H+hmLF+eYXb2gtcBDH0FvgwxTOHxjF2CUDhTZ2u9Xq?=
 =?us-ascii?q?4m5zE7Dp6mApnHRoy3nLOB2yK7FIVMZm9aElCMDWvod4KcVvcObyKdPNVtkj8D?=
 =?us-ascii?q?VbinTY8h0gqjtAv7y7phM+rV9TcUtZPl1Nhp+eLTkQs++iBzD8SYy2uNVX17nn?=
 =?us-ascii?q?sURz8q26ByuVZyykyD0ah/gPxUD8ZT6OlLUgohMZ7czup6C839Ww7bf9eJTkqm?=
 =?us-ascii?q?TcuiAT0rUt0xxNoOaV5nG9q+lhDDwzaqA7gNmryIHpM09LjQ33zwJ8lnzXbG27?=
 =?us-ascii?q?Isj10nQstJKG2nibRz9wnVB47VjUqZk7ymergb3C7I7G2D13aBvFlEUA5sVqXI?=
 =?us-ascii?q?RW0QaVHIrdvn/E/CT6WhCbI8MgRfz86OLa9Kat7sjVVCX/rjPNXeY2Ssm2a/Hx?=
 =?us-ascii?q?qIx7WMbJb0dGUZxinSFE8EkwUL93acKQc+Hjuho37ZDDF2CF3geV3s/vdkpHO7?=
 =?us-ascii?q?VEA0yRqKYFNn17eu/h4VhPqcS+4c374euSchrSl0E0i5397MF9WAoA9hdr1GYd?=
 =?us-ascii?q?wh+FdHyX7ZtwtlM5y8LqBig1kecxh3v0LuzRl3Fp9Mkc8wrHMuzQpyL62Y3UhF?=
 =?us-ascii?q?dzOZ25DwJ7LWJnPz/BCpd67ZxFXe3MyK9acI7fQys0/jsx2xFko+73Vn1MFY3G?=
 =?us-ascii?q?GY5prUAwsdT5LwXlws+Bhnur7VeC8954DT1X1yKqS0tj7C29Q0BOoq0BqgftFf?=
 =?us-ascii?q?ML+aGw/2CcEVG8+uKOkykVizch0EJPxS9LIzP86+d/qGxbSnM/p6kDOnjWRI+o?=
 =?us-ascii?q?Z90k2X+ip4S+7I2YsFwv6C0guGUTf8kEmussTtlY9YYjESG3K1yTL4C45Jeq1y?=
 =?us-ascii?q?YYELBH+0I8222tpxnYTtVGNf9FK5AVMJxtWpeRuLY1PhxwJQ0VkYrmK9mSu/yT?=
 =?us-ascii?q?x5iDUprquZ3CzTzOXubhsHOmhXRGZ8iVfgO5S7j9cfXEKwdQgmiAOl5Vrmx6hc?=
 =?us-ascii?q?vKl+L2jTTV1IfiTsNGFiT62wu6GGY85O7pMorCpWXP69YVCcVr7yvR8a3zn/EG?=
 =?us-ascii?q?tZwTAxbyuqtYnhnxxmlGKdK25+rHjDdsFqxhff59vcSeRK3jUcRyl4ijjXBl6i?=
 =?us-ascii?q?MNmv5tiUk5bDsuajV2OuTJFTcC/rzZ+euyu//2FlHRq/n/WrkN39DQc6yTP718?=
 =?us-ascii?q?VtVSjQrBfzeI7r2764MeJmeEllH1v868t8GoFjnYo8npAQ2X4GhpqL+XoLi3v8?=
 =?us-ascii?q?MdJe2ajmdnoCWSYLw8LJ4AjiwEBjLWiGx4PjWnWd38tufd+6YmwN1yI57sBKDr?=
 =?us-ascii?q?qU7bNekSt0pFq4sRzeYfxnkjgBzvsu7WYQg/sVtwo10iWdHrcSEFFdPSztlBSH?=
 =?us-ascii?q?9cqyratJa2a0bbi/ylB+ksu/A7GYrQFRQ3L5epYkHS9t4cRzKlPM0Hvv6o76fN?=
 =?us-ascii?q?ncd84cthqRkx3YlehaNIoxluYWhSpgIW/9oXoly+shgR1vx566upWHK352/KK4?=
 =?us-ascii?q?GRNYMjz1Z8UO+jDil6pen8CW35yxEZVlADkEQJzoTfewGjIIqfvnLxqOECE7qn?=
 =?us-ascii?q?qDArXQBwif6EN7r37VF5CrKmqaJH0YzdVkWRmcK1ZTgAESXDUmgJE5Ehqmy9Dm?=
 =?us-ascii?q?cEd8/joR/EL3qgNQyuJ0MBnySmXfqx2tajgqU5iTNgZW4htB50fIMsye8+RzED?=
 =?us-ascii?q?tD/pC6qAyNK2qbZxlHDG0TW0yEAUzjMaeq5dXa7+eYAe++JePUYbqSsexeS+uI?=
 =?us-ascii?q?xZW334pm+DaMK9yPPmR4AP09wEZDRnd5G8LWmzgUTywXliTNb9OUpRum+y13qN?=
 =?us-ascii?q?y//+rvWA71+YSPDL5SO811+x+qmaeDK/KQhCFhJDZYyJwMxHzIyLse3FIIiCFu?=
 =?us-ascii?q?bT6tEbseui7XUaLQgbRaDxoaayN1KctJ4Lgw3ghLOc7HlNz10qR0geIyC1dATV?=
 =?us-ascii?q?bhgN2mZdQWI2GhM1PKHFyENKmdKj3R3c72YbmwSblRjOhPsx2wuDCbE1LsPziZ?=
 =?us-ascii?q?ljnpUQyvPv9IjC2BIBNev4S9eA53CWf/VNLmdgG7MNhvgD0qwL00g2nGOnIGPT?=
 =?us-ascii?q?dgc0NCsLuQ4DhcgvV+HWxB83VkIfOFmyaf8+nXNJIWveF3DSRzkuJQ+G46xKdN?=
 =?us-ascii?q?7CFYWPx1nzPfr950rFGgl+mPyzxnXwJPqzZLno2Lu0piNL7d9plBX3bE4R0M4X?=
 =?us-ascii?q?+RCxQMu9tqFNnvt7pMxdjIkaKgYAtFpvjT58oHT+LOJdCGNH4mN1K9EjnODRBD?=
 =?us-ascii?q?RySmJ2Dbg0tbuPuV8WGRr558oZ/pzskgULheAWQ8C/dSKUNuHdUGI5BoRTAl2e?=
 =?us-ascii?q?qDhdMMo3m5pxjYQMZdoYvEV9qYBvLzLDefy7JDYk1bkvvDMY0PO9ijiARZYV5g?=
 =?us-ascii?q?kdGPQhKIUA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAADtWgJch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBg2sUE4N5iBiMC4INFJc0gXMsEwGHdiI0CQ0BAwEBAQEBAQIBEwE?=
 =?us-ascii?q?BAQoLCQgpL4I2JAGCYgECAwECIAQLAS0ZBgkBAQoYAgImAgIDKRAbBhMFgxyCA?=
 =?us-ascii?q?gQBpWZ8M4VBhGsiaYsRgVc/gRGDEoRKG4MgglcCiVWHJI9FBwKCHwSID4cigVu?=
 =?us-ascii?q?INocTmjGCDXCDPIInF44ePzKBAgMBAQMBHRMLAYongk0BAQ?=
X-IPAS-Result: =?us-ascii?q?A0ANAADtWgJch0O0hNFjHAEBAQQBAQcEAQGBUQcBAQsBg2s?=
 =?us-ascii?q?UE4N5iBiMC4INFJc0gXMsEwGHdiI0CQ0BAwEBAQEBAQIBEwEBAQoLCQgpL4I2J?=
 =?us-ascii?q?AGCYgECAwECIAQLAS0ZBgkBAQoYAgImAgIDKRAbBhMFgxyCAgQBpWZ8M4VBhGs?=
 =?us-ascii?q?iaYsRgVc/gRGDEoRKG4MgglcCiVWHJI9FBwKCHwSID4cigVuINocTmjGCDXCDP?=
 =?us-ascii?q?IInF44ePzKBAgMBAQMBHRMLAYongk0BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,302,1539673200"; 
   d="scan'208";a="54119227"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 01 Dec 2018 01:58:23 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726713AbeLAVK2 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sat, 1 Dec 2018 16:10:28 -0500
Received: from mail.bootlin.com ([62.4.15.54]:49191 "EHLO mail.bootlin.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726342AbeLAVK2 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Sat, 1 Dec 2018 16:10:28 -0500
Received: by mail.bootlin.com (Postfix, from userid 110)
        id 4657120CF7; Sat,  1 Dec 2018 10:58:18 +0100 (CET)
X-Spam-Checker-Version: SpamAssassin 3.4.2 (2018-09-13) on mail.bootlin.com
X-Spam-Level: 
X-Spam-Status: No, score=-1.0 required=5.0 tests=ALL_TRUSTED,SHORTCIRCUIT,
        URIBL_BLOCKED shortcircuit=ham autolearn=disabled version=3.4.2
Received: from collins (unknown [77.128.107.220])
        by mail.bootlin.com (Postfix) with ESMTPSA id 0759020742;
        Sat,  1 Dec 2018 10:58:08 +0100 (CET)
Message-ID: <d001c17e817d8413d58316dcfd48ff4dcdb49e2a.camel@bootlin.com>
Subject: Re: [PATCH v2] drm/vc4: Add a debugfs entry to disable/enable the
 load tracker
From: Paul Kocialkowski <paul.kocialkowski@bootlin.com>
To: Boris Brezillon <boris.brezillon@bootlin.com>
Cc: dri-devel@lists.freedesktop.org, linux-kernel@vger.kernel.org,
        Eric Anholt <eric@anholt.net>, David Airlie <airlied@linux.ie>,
        Maxime Ripard <maxime.ripard@bootlin.com>,
        Thomas Petazzoni <thomas.petazzoni@bootlin.com>
Date: Sat, 01 Dec 2018 10:59:43 +0100
In-Reply-To: <20181130195744.7502e9fe@bbrezillon>
References: <20181130161104.16352-1-paul.kocialkowski@bootlin.com>
         <20181130195744.7502e9fe@bbrezillon>
Content-Type: text/plain; charset="UTF-8"
User-Agent: Evolution 3.30.2 
Mime-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi Boris,

Le vendredi 30 novembre 2018 à 19:57 +0100, Boris Brezillon a écrit :
> On Fri, 30 Nov 2018 17:11:04 +0100
> Paul Kocialkowski <paul.kocialkowski@bootlin.com> wrote:
> 
> > In order to test whether the load tracker is working as expected, we
> > need the ability to compare the commit result with the underrun
> > indication. With the load tracker always enabled, commits that are
> > expected to trigger an underrun are always rejected, so userspace
> > cannot get the actual underrun indication from the hardware.
> > 
> > Add a debugfs entry to disable/enable the load tracker, so that a DRM
> > commit expected to trigger an underrun can go through with the load
> > tracker disabled. The underrun indication is then available to
> > userspace and can be checked against the commit result with the load
> > tracker enabled.
> > 
> > Signed-off-by: Paul Kocialkowski <paul.kocialkowski@bootlin.com>
> > ---
> > 
> > Changes since v1:
> > * Moved all the debugfs-related functions and structure to vc4_debugfs.c.
> > 
> >  drivers/gpu/drm/vc4/vc4_debugfs.c | 58 +++++++++++++++++++++++++++++++
> >  drivers/gpu/drm/vc4/vc4_drv.c     |  2 ++
> >  drivers/gpu/drm/vc4/vc4_drv.h     |  2 ++
> >  drivers/gpu/drm/vc4/vc4_kms.c     |  6 +++-
> >  4 files changed, 67 insertions(+), 1 deletion(-)
> > 
> > diff --git a/drivers/gpu/drm/vc4/vc4_debugfs.c b/drivers/gpu/drm/vc4/vc4_debugfs.c
> > index 7a0003de71ab..8f4d7fadb226 100644
> > --- a/drivers/gpu/drm/vc4/vc4_debugfs.c
> > +++ b/drivers/gpu/drm/vc4/vc4_debugfs.c
> > @@ -32,9 +32,67 @@ static const struct drm_info_list vc4_debugfs_list[] = {
> >  
> >  #define VC4_DEBUGFS_ENTRIES ARRAY_SIZE(vc4_debugfs_list)
> >  
> > +static int vc4_debugfs_load_tracker_get(struct seq_file *m, void *data)
> > +{
> > +	struct drm_device *dev = m->private;
> > +	struct vc4_dev *vc4 = to_vc4_dev(dev);
> > +
> > +	if (vc4->load_tracker_enabled)
> > +		seq_printf(m, "enabled\n");
> > +	else
> > +		seq_printf(m, "disabled\n");
> > +
> > +	return 0;
> > +}
> > +
> > +static ssize_t vc4_debugfs_load_tracker_set(struct file *file,
> > +					    const char __user *ubuf,
> > +					    size_t len, loff_t *offp)
> > +{
> > +	struct seq_file *m = file->private_data;
> > +	struct drm_device *dev = m->private;
> > +	struct vc4_dev *vc4 = to_vc4_dev(dev);
> > +	char buf[32] = {};
> > +
> > +	if (len >= sizeof(buf))
> > +		return -EINVAL;
> > +
> > +	if (copy_from_user(buf, ubuf, len))
> > +		return -EFAULT;
> > +
> > +	if (!strncasecmp(buf, "enable", 6))
> > +		vc4->load_tracker_enabled = true;
> > +	else if (!strncasecmp(buf, "disable", 7))
> > +		vc4->load_tracker_enabled = false;
> > +	else
> > +		return -EINVAL;
> > +
> > +	return len;
> > +}
> > +
> > +static int vc4_debugfs_load_tracker_open(struct inode *inode, struct file *file)
> > +{
> > +	return single_open(file, vc4_debugfs_load_tracker_get, inode->i_private);
> > +}
> > +
> > +static const struct file_operations vc4_debugfs_load_tracker_fops = {
> > +	.owner = THIS_MODULE,
> > +	.open = vc4_debugfs_load_tracker_open,
> > +	.read = seq_read,
> > +	.write = vc4_debugfs_load_tracker_set,
> > +};
> > +
> >  int
> >  vc4_debugfs_init(struct drm_minor *minor)
> >  {
> > +	struct dentry *dentry;
> > +
> > +	dentry = debugfs_create_file("load_tracker", S_IRUGO | S_IWUSR,
> > +				     minor->debugfs_root, minor->dev,
> > +				     &vc4_debugfs_load_tracker_fops);
> > +	if (!dentry)
> > +		return -ENOMEM;
> 
> Hm, maybe you could use debugfs_create_bool() instead of
> re-implementing it. The values won't be enabled/disabled though
> (IIRC, it's Y or N).

Oh, I didn't know about that! It definitely makes more sense yes.

Thanks,

Paul

> > +
> >  	return drm_debugfs_create_files(vc4_debugfs_list, VC4_DEBUGFS_ENTRIES,
> >  					minor->debugfs_root, minor);
> >  }
> > diff --git a/drivers/gpu/drm/vc4/vc4_drv.c b/drivers/gpu/drm/vc4/vc4_drv.c
> > index 7195a0bcceb3..12ac971d24d6 100644
> > --- a/drivers/gpu/drm/vc4/vc4_drv.c
> > +++ b/drivers/gpu/drm/vc4/vc4_drv.c
> > @@ -290,6 +290,8 @@ static int vc4_drm_bind(struct device *dev)
> >  
> >  	drm_fbdev_generic_setup(drm, 32);
> >  
> > +	vc4->load_tracker_enabled = true;
> > +
> >  	return 0;
> >  
> >  unbind_all:
> > diff --git a/drivers/gpu/drm/vc4/vc4_drv.h b/drivers/gpu/drm/vc4/vc4_drv.h
> > index 11369da944b6..8d0f2f16a9e8 100644
> > --- a/drivers/gpu/drm/vc4/vc4_drv.h
> > +++ b/drivers/gpu/drm/vc4/vc4_drv.h
> > @@ -188,6 +188,8 @@ struct vc4_dev {
> >  
> >  	int power_refcount;
> >  
> > +	bool load_tracker_enabled;
> > +
> >  	/* Mutex controlling the power refcount. */
> >  	struct mutex power_lock;
> >  
> > diff --git a/drivers/gpu/drm/vc4/vc4_kms.c b/drivers/gpu/drm/vc4/vc4_kms.c
> > index b905a19c1470..4b2509b1b8ed 100644
> > --- a/drivers/gpu/drm/vc4/vc4_kms.c
> > +++ b/drivers/gpu/drm/vc4/vc4_kms.c
> > @@ -473,6 +473,7 @@ static const struct drm_private_state_funcs vc4_load_tracker_state_funcs = {
> >  static int
> >  vc4_atomic_check(struct drm_device *dev, struct drm_atomic_state *state)
> >  {
> > +	struct vc4_dev *vc4 = to_vc4_dev(dev);
> >  	int ret;
> >  
> >  	ret = vc4_ctm_atomic_check(dev, state);
> > @@ -483,7 +484,10 @@ vc4_atomic_check(struct drm_device *dev, struct drm_atomic_state *state)
> >  	if (ret)
> >  		return ret;
> >  
> > -	return vc4_load_tracker_atomic_check(state);
> > +	if (vc4->load_tracker_enabled)
> > +		return vc4_load_tracker_atomic_check(state);
> > +
> > +	return 0;
> >  }
> >  
> >  static const struct drm_mode_config_funcs vc4_mode_funcs = {

