Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 29 Nov 2018 18:15:59 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id D4A69580460;
	Wed, 28 Nov 2018 21:12:21 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga002-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 28 Nov 2018 21:12:20 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AjuGLDBJlQIg19Bm2vdmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgUL/34rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZUMhfVzJPDJ6/?=
 =?us-ascii?q?YYQNAeoPOulXoJXyqVsVtRuzBxKhBP/txzJSmnP437E23/onHArb3AIgBdUOsH?=
 =?us-ascii?q?HModjpMqcdTPq1w7fGzD7eaP1W3i396JTPchAnvPqBWqh/ccnJyUkqDA7FilSQ?=
 =?us-ascii?q?qYr4PzKaz+gNvW+b7/dmVe2ykWEntwBxoj+pxss2jYnJnI0Vx0nC+C5kzog1It?=
 =?us-ascii?q?i4R1R6Yd6iCJZQsSCaOJdoTcM4WW1koT82xqQbtpGlYigHzoksyR3Ha/GfbYSE?=
 =?us-ascii?q?/hbuWPyMLTp2mn5pYq+zihWu/US6y+DxVNG43EhFoyZfk9TArG0B2h7P5sSdV/?=
 =?us-ascii?q?dw/0Gs0iuV2Q/J8OFLO0U0mLLbK5E/xr4wkYIesVrMHiDogkX6lqyWeVs++uiu?=
 =?us-ascii?q?9evnZq/qppiGN497kg3+M6IuldKjAekgLAQCQ2yW9f6h2LDt40H1WqhGg/4qnq?=
 =?us-ascii?q?XDsZ3XJ9wXpqujDA9U1oYj5Qy/DzCj0NkAmXkHLVRFeA+IjoTwOFHBPur4DfGh?=
 =?us-ascii?q?jFSoiTtrwP7HPrv/DZXXNXXDjrjhcqhn60JGywo808pf55RKBbEFOv7zXVXxtN?=
 =?us-ascii?q?PAAh8jLwO02/rnCMl61o4GXWKPA6yZP73IvV6H++IiOO2MZI4TuDbgJPkp/f/u?=
 =?us-ascii?q?jXklmVADeamlx4cYaHe9Hv5+OUWWfWLsgssdEWcNpgc+TPbliFyeUTFJYHa+Ra?=
 =?us-ascii?q?I85iwhB4KgAofOXYStgL2H3CemEZxafGFGClaQEXj2c4WIQesDaCWXIsV5iDwL?=
 =?us-ascii?q?SaChS5M91RGprAL6yb1nIfTO9i0bspLj0t515+rImBE29Dx0Cdmd0m6XQ2F1mG?=
 =?us-ascii?q?MIWyE53KRlrUNhzVeD1LByg+ZEGtxL+/NJTgA6OIbGwOxhC9DyXQHBcs2TSFm8?=
 =?us-ascii?q?QNWrGjUxTtM3w98TbEdxAdSijhbf3yW0B78ZjaCEBJsx8qjExXj+O959y2ra1K?=
 =?us-ascii?q?kml1QmQdFANWu8iq579gjcHYjJk0qCmqaudKQc2jPN9WiZwWqPukFYTBB/UaHf?=
 =?us-ascii?q?UX8DYUvWqMzz5lneQL+2FbQnLgxBxNafJaRQdN3mk09KRPf5N9TYeGK+hWGwCR?=
 =?us-ascii?q?GMxrOPaYrqf34Q3CHcCEgCjgAS8myKNQk4Bie9vW3eCCZiGk7oY0Pp6eN+sm+0?=
 =?us-ascii?q?TlcozwGWaE1sz6e69QQLhfOCUf8T3qgLuCE6qzpqGlawxNbWC9uGpwp8c6RQe9?=
 =?us-ascii?q?I94FFb1W3HswxxJICvL6dnhlQGaQR4o1vu1wlrCoVHicUqsHIqzA91KaKE0FNA?=
 =?us-ascii?q?dymU3YzqNr3QMGny+BGva6jZ2lzF1NaW+6EP6Ok3qln5vQGpEFYi/Gtj09VPz3?=
 =?us-ascii?q?Sc4ZDKBhIIUZ3tSkY36wR6p7bCbyYn44Pby3JtPre0szPYwN0pGfYqxQymf9dc?=
 =?us-ascii?q?N6OEChT/E8kbB8ioNewrlEKlbhMCPOBO6qE0O9mqeOeB2K6uJOxghi6pjXxb4I?=
 =?us-ascii?q?Bh1UKB7yp9SvPS05kZ2f2Z3wuHWC36jFeuqc33nYFEZTcPHmuw0yTkBYhRZrFs?=
 =?us-ascii?q?coYPE2uhP8q3xtBmjZ73R3FY7EKjB08B2MKxYxqSbkDy0hdK1UsKpnyrgy24wC?=
 =?us-ascii?q?JukzEot6aQwDbBw+D/exUZIG5LQ29igEzoIYi1idAaQUepYxIolBuj+Ub12axb?=
 =?us-ascii?q?qL5jIGnUREdCZzL2IH16UqusqrqCZNZC6ZMpsSlNUOWwe0uaSqP7oxYB1yPjHm?=
 =?us-ascii?q?1exC00dj2wu5X5mQB6h3yZLHppsHXZfsRwzw/F5NPAXf5RwiYGRC5ghDnVHFe8?=
 =?us-ascii?q?Jdqp/daTl5vZqeCxTWGhVp5ScSnt04yAsjC25WlrAR25gvCylcfrEQk80S/nyd?=
 =?us-ascii?q?ZqUT/Eowr7Yonuz666K/5oflF0BF/g7Mp3AoF/nZE3hJ0K23gah5OV8GEDkWfy?=
 =?us-ascii?q?N9VbxK3/YGAMRT4N397a/gzl1Fd/IXKOwoLzTm+dzdd5Z9mmfmMW3Tow78NQB6?=
 =?us-ascii?q?eV9rBEnTZ1rUC+rQLeevV9mjYdyf0z6H8Vme0JuQwtzjmDDbAWB0VXISvslxGQ?=
 =?us-ascii?q?5dCksKpXfHqvcaS31EdmmNChDbKCrRtGVHf3ZJgiBjNw4dtlMF3XznLz8I7kdc?=
 =?us-ascii?q?LUbdISsB2UjhjBg/JUKJI3ivoFmy5nNXjhsn0izu4xlQZu0o2ivIibN2Vt+7q0?=
 =?us-ascii?q?AgJfNj3wfc8S+yvijaBDnsaNxICvH45sGjEKXJvuUPKpHygetfXhNwaSDjI8rm?=
 =?us-ascii?q?2XFqbYHQ+a8E1mtW7AE4i3N3GLI3kU1c5tSwOaJExbnQAYRjE6noMiGwCuxczh?=
 =?us-ascii?q?dlp55z8L6l75rBtM1vxnNx3lXmjDoweoby8+SIKDIxpO8gFC+0DVPNSc7u1pGi?=
 =?us-ascii?q?FX4IahoBaRKmCBZARIEGIJWlGCB1/5Jbmj/t3A8+meBuqjIPrCe7SOqepCV/iW?=
 =?us-ascii?q?wZKjyJdp/zGJNs+XJHltE+U72lZfXXB+A8nYmzIPSzEOlyLQdcGbog2w+jZwrs?=
 =?us-ascii?q?C5//TmQwbv5YqJC7tPPtRj4RG2gaGfN+GOgCZ1MypX1pQJxXXQ0rgQwEYSiz1y?=
 =?us-ascii?q?dzmqCbkAtTDCTKPTmq9UDh4XcSBzNNFP76IzwAZNI9Pbisju2758j/41DUpFVF?=
 =?us-ascii?q?P7lsGoY8wKP3+yNFfdCEmXM7SGICXBw9vrbqOkVb1QkOJUugWqtjaGCEDjJCqM?=
 =?us-ascii?q?ljnzWxCrMOFBlyWbPB1YuIGgfRdhE2njTNT6ahKlNN97lyE5wboxhnnSL24TLS?=
 =?us-ascii?q?B8c19Rrr2X9S5YnvR/G2lb4nV5N+WLhyaZ4PfeKpsNtftrAyJ0l/9V4XggyrtV?=
 =?us-ascii?q?6j1ES+JxmCfIstFupFSmmPGVyjV7SBpOtipLhIWTsERiI6rZ8JxAWXfC/B0V7G?=
 =?us-ascii?q?SQCw4Fp91qCtD0v6BQy97PlL/8KTtY8tLU+9ccCNbQKM6dLHUhNh/pS3boC14p?=
 =?us-ascii?q?RDiqOGWXuEVZk/yIvimZp547p5zzkbIFS6RQUxo+EfZMWWp/G9lXCZF7RD472Z?=
 =?us-ascii?q?ucltIP4zLqpRrJQe1ev5baRrecBujpJD+FjL5CIRwSzuWrfswoKoTn1hk6ORFB?=
 =?us-ascii?q?l4PQFh+VBIgVrw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAACPdP9bh0O0hNFkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGDayeMEV+LKVIGgTUUiQqOJBSBXywTAYduIjQJDQE?=
 =?us-ascii?q?DAQEBAQEBAgETAQEBCA0JCCkvgjYkAYJiAQICAQECNz8FAQkBAQoSNANGDgYTB?=
 =?us-ascii?q?YMcgXUFCAWnR4N9hjCMFhd4gQeBEYMShEYnhW8Cj2g0kAMJhj+KaCOJVodEmhC?=
 =?us-ascii?q?CDTMaCCgIgyeCJxeOPh8ygQQBAQE7iioBJQSCIwEB?=
X-IPAS-Result: =?us-ascii?q?A0ABAACPdP9bh0O0hNFkGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGDayeMEV+LKVIGgTUUiQqOJBSBXywTAYduIjQJDQEDAQEBAQEBAgETA?=
 =?us-ascii?q?QEBCA0JCCkvgjYkAYJiAQICAQECNz8FAQkBAQoSNANGDgYTBYMcgXUFCAWnR4N?=
 =?us-ascii?q?9hjCMFhd4gQeBEYMShEYnhW8Cj2g0kAMJhj+KaCOJVodEmhCCDTMaCCgIgyeCJ?=
 =?us-ascii?q?xeOPh8ygQQBAQE7iioBJQSCIwEB?=
X-IronPort-AV: E=Sophos;i="5.56,293,1539673200"; 
   d="scan'208";a="54178343"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 28 Nov 2018 21:12:18 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727672AbeK2QQS (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 29 Nov 2018 11:16:18 -0500
Received: from mail.linuxfoundation.org ([140.211.169.12]:56438 "EHLO
        mail.linuxfoundation.org" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727402AbeK2QQS (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 29 Nov 2018 11:16:18 -0500
Received: from localhost.localdomain (c-24-6-170-16.hsd1.ca.comcast.net [24.6.170.16])
        by mail.linuxfoundation.org (Postfix) with ESMTPSA id 40EE6868;
        Thu, 29 Nov 2018 05:12:13 +0000 (UTC)
Date: Wed, 28 Nov 2018 21:12:12 -0800
From: Andrew Morton <akpm@linux-foundation.org>
To: Daniel Walker <danielwa@cisco.com>
Cc: Daniel Walker <dwalker@fifo99.com>, xe-linux-external@cisco.com,
        Maksym Kokhan <maksym.kokhan@globallogic.com>,
        linux-kernel@vger.kernel.org
Subject: Re: [PATCH 1/3] add generic builtin command line
Message-Id: <20181128211212.060295fb9055e403d0060e7a@linux-foundation.org>
In-Reply-To: <20181109173433.1271-1-danielwa@cisco.com>
References: <20181109173433.1271-1-danielwa@cisco.com>
X-Mailer: Sylpheed 3.5.1 (GTK+ 2.24.31; x86_64-pc-linux-gnu)
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Fri,  9 Nov 2018 09:34:31 -0800 Daniel Walker <danielwa@cisco.com> wrote:

> This code allows architectures to use a generic builtin command line.
> The state of the builtin command line options across architecture is
> diverse. On x86 and mips they have pretty much the same code and the
> code prepends the builtin command line onto the boot loader provided
> one. On powerpc there is only a builtin override and nothing else.
> 
> The code in this commit unifies the mips and x86 code into a generic
> header file under the CONFIG_GENERIC_CMDLINE option. When this
> option is enabled the architecture can call the cmdline_add_builtin()
> to add the builtin command line.

I'm not sure what's happened to this and I haven't seen the other two
patches but...

> [maksym.kokhan@globallogic.com: fix cmdline_add_builtin() macro]
> Cc: Daniel Walker <dwalker@fifo99.com>
> Cc: Daniel Walker <danielwa@cisco.com>
> Cc: xe-linux-external@cisco.com
> Signed-off-by: Daniel Walker <danielwa@cisco.com>
> Signed-off-by: Maksym Kokhan <maksym.kokhan@globallogic.com>

Two SOB's is nice, but some reviews and acks would be nicer.

> --- /dev/null
> +++ b/include/linux/cmdline.h
> @@ -0,0 +1,79 @@
> +/* SPDX-License-Identifier: GPL-2.0 */
> +#ifndef _LINUX_CMDLINE_H
> +#define _LINUX_CMDLINE_H
> +
> +/*
> + *
> + * Copyright (C) 2015. Cisco Systems, Inc.
> + *
> + * Generic Append/Prepend cmdline support.
> + */
> +
> +#if defined(CONFIG_GENERIC_CMDLINE) && defined(CONFIG_CMDLINE_BOOL)
> +
> +#ifndef CONFIG_CMDLINE_OVERRIDE
> +/*
> + * This function will append or prepend a builtin command line to the command
> + * line provided by the bootloader. Kconfig options can be used to alter
> + * the behavior of this builtin command line.
> + * @dest: The destination of the final appended/prepended string
> + * @src: The starting string or NULL if there isn't one.
> + * @tmp: temporary space used for prepending
> + * @length: the maximum length of the strings above.
> + */
> +static inline void
> +_cmdline_add_builtin(char *dest, char *src, char *tmp, unsigned long length)
> +{
> +	if (src != dest && src != NULL) {
> +		strlcpy(dest, " ", length);
> +		strlcat(dest, src, length);
> +	}
> +
> +	strlcat(dest, " ", length);
> +
> +	if (sizeof(CONFIG_CMDLINE_APPEND) > 1)
> +		strlcat(dest, CONFIG_CMDLINE_APPEND, length);
> +
> +	/*
> +	 * You need to convert you old style CONFIG_CMDLINE to use

"your"

> +	 * the prepend, or append defines. Some architectures use one

"one and"

> +	 * some use the other. You need to figure out which ones is

"one"

> +	 * right for your situation. I would recommend prepending
> +	 * because it's the safest (i.e. CONFIG_CMDLINE_PREPEND).
> +	 */
> +	BUILD_BUG_ON(sizeof(CONFIG_CMDLINE) != 1);
> +
> +	if (sizeof(CONFIG_CMDLINE_PREPEND) > 1) {
> +		strlcpy(tmp, CONFIG_CMDLINE_PREPEND, length);
> +		strlcat(tmp, " ", length);
> +		strlcat(tmp, dest, length);
> +		strlcpy(dest, tmp, length);
> +	}
> +}

And... holy cow.  Does this monster really need to be inlined?

> +#define cmdline_add_builtin(dest, src, length)				    \
> +{									    \
> +	if (sizeof(CONFIG_CMDLINE_PREPEND) > 1) {			    \
> +		static char cmdline_tmp_space[length] __initdata;	    \
> +		_cmdline_add_builtin(dest, src, cmdline_tmp_space, length); \
> +	} else {							    \
> +		_cmdline_add_builtin(dest, src, NULL, length);		    \
> +	}								    \
> +}

And this will generate __initdata storage at each invocation site.  Can
it be redone in real, non-inlined C?

> +#else
> +#define cmdline_add_builtin(dest, src, length)				   \
> +{									   \
> +	strlcpy(dest, CONFIG_CMDLINE_PREPEND " " CONFIG_CMDLINE_APPEND,    \
> +		length);						   \
> +}
> +#endif /* !CONFIG_CMDLINE_OVERRIDE */
> +
> +#else
> +#define cmdline_add_builtin(dest, src, length) { \
> +	if (src != NULL)						   \
> +		strlcpy(dest, src, length);				   \
> +}
> +#endif /* CONFIG_GENERIC_CMDLINE */
> +
> +
> +#endif /* _LINUX_CMDLINE_H */

