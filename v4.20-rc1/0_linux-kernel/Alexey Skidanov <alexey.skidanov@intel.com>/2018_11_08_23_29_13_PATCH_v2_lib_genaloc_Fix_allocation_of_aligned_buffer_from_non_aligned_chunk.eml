Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 09 Nov 2018 00:35:35 -0000
Received: from icoremail.net (unknown [209.85.210.181])
	by mail-app2 (Coremail) with SMTP id by_KCgD3_48+VuRbLfdgAQ--.61191S3;
	Thu, 08 Nov 2018 23:29:03 +0800 (CST)
Received: from mail-pf1-f181.google.com (unknown [209.85.210.181])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwCnjEg7VuRbwGMdAA--.3434S3;
	Thu, 08 Nov 2018 23:28:59 +0800 (CST)
Received: by mail-pf1-f181.google.com with SMTP id p17-v6so9072228pfj.12
        for <xuliker@zju.edu.cn>; Thu, 08 Nov 2018 07:28:59 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-original-authentication-results:x-gm-message-state:delivered-to
         :from:to:cc:subject:date:message-id:sender:precedence:list-id;
        bh=T7rWNChgq+n0iS6XFr8UEv2Gecobq1y3TyJg+DCxgoA=;
        b=lmfHlRyYBmoRWetgOyHntfyxGF1lVqJMf1s+mJT0kzII4i2e6x28JYzCil4d4vTLWM
         IYc4yBIwF7wZopIExHxpJ5MZJ4nskqTEh2c4doMC1T3/9O5TQ7nJoi7w7GukZBh9+kXy
         FCRxEZuEagbbtFHhhzWwAJc/GiGvOtwGAY92+nzSKGqITnyXfzoPhdOUtzqcjG+Po7Mm
         nUHhAAwBUK4uKRrXAEZ5heMspPB8h+LsAP08uNkX72NmR7nf8j9I+61VEgMdHJtyhVvl
         2hykDNpyBab0Bhnc4VBcdRBpyWZ/4uXpWXuwoiEQ16YNWP/9nX1ye1lH0MamsbJWOoDb
         op/g==
X-Original-Authentication-Results: mx.google.com;       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;       dmarc=fail (p=NONE sp=NONE dis=NONE) header.from=intel.com
X-Gm-Message-State: AGRZ1gJjoZLJGvcb4vmViqctcJ8Ur1G5D3VtgceIraOF7sYiT6WyvZpM
	MOgCU43gKv/6CYXGxCz3+bH1OMpm65ReYoCzr5T/63GyU0po86y3gg==
X-Received: by 2002:a63:fd53:: with SMTP id m19mr4190612pgj.340.1541690939236;
        Thu, 08 Nov 2018 07:28:59 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp328605pjt;
        Thu, 8 Nov 2018 07:28:58 -0800 (PST)
X-Google-Smtp-Source: AJdET5ftWei6AkZUAJZ2OEhOdJOVehfRCOYDpbk9r+GZC2/B9eDDo6hMDQ2FRVlbgQcHptSAfhBP
X-Received: by 2002:a17:902:9043:: with SMTP id w3-v6mr4829785plz.32.1541690938189;
        Thu, 08 Nov 2018 07:28:58 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1541690938; cv=none;
        d=google.com; s=arc-20160816;
        b=TQzaFssAPSVrfk9CaO1JObMV4hmU05MSWMmF9ve+Jfd0fDq0ivOeEqaoTJyMSax0mZ
         JWJBnea5VJbWnZ2Ub+/1Q6yStTDR2q36O2k4uMVYGaJgurS2XuyvO18li1KlfJVLZO9h
         /tr5CfnCD5RFnIymeFXOpghk0ikS0GYf1HhOFxEdpLDQt7EPu57rXWq2RQ/JbCjM1/J3
         7tEicpOq3bZBpOZMzvUNe42Fq0JIvpckOfSopxSA6duSLZdYLfuVKYxRWPognPnf5ogg
         emIUITRI2CXquSEA/uPbqvN3E2d7qLlqdkKM1NRw6G/hT+SX+Wf0fmgUkTD6SswYybe1
         jLJA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:message-id:date:subject:cc:to:from;
        bh=T7rWNChgq+n0iS6XFr8UEv2Gecobq1y3TyJg+DCxgoA=;
        b=gxo7rDgLOngnc1OmEZlIGZbuOV5e4RnmCU37df3a+mx09+40yEAsLPcHONbxGxc4zp
         UXrXnu1N4o3u4NxLW/KBggWtCASNynqcIw3zdywNGNSWUX7pLb/pmxGhYormrCSfNqMv
         Tr1uPjzFCZiDNTuuvQaao0D50vYs57Wx9thPjrriDRwU/LQ/5UvIozjgfFXa5iAiGbd4
         W46ju51ZTduxU7lBDP4f9Xn+XSVh5f1JOKhBwYLi6oflvyH6R16y7u4pAulpBwZcDY2c
         HD8m9FdNjA0nymzJ+IXitTLSUB+VN4Xn3jzrh9cHdg+eQY9gjbG4lj+O860eXsF+K9Os
         XWjA==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;
       dmarc=fail (p=NONE sp=NONE dis=NONE) header.from=intel.com
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id f10si3939125pgl.528.2018.11.08.07.28.42;
        Thu, 08 Nov 2018 07:28:58 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726980AbeKIBEO (ORCPT <rfc822;ankurbansal210989@gmail.com>
        + 99 others); Thu, 8 Nov 2018 20:04:14 -0500
Received: from mga11.intel.com ([192.55.52.93]:53048 "EHLO mga11.intel.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726469AbeKIBEO (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 8 Nov 2018 20:04:14 -0500
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from fmsmga001.fm.intel.com ([10.253.24.23])
  by fmsmga102.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 08 Nov 2018 07:28:13 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.54,480,1534834800"; 
   d="scan'208";a="106409715"
Received: from kohsamui.iil.intel.com ([10.236.193.12])
  by fmsmga001.fm.intel.com with ESMTP; 08 Nov 2018 07:28:11 -0800
From: Alexey Skidanov <alexey.skidanov@intel.com>
To: sbates@raithlin.com, logang@deltatee.com, danielmentz@google.com,
        akpm@linux-foundation.org, mathieu.desnoyers@efficios.com
Cc: linux-kernel@vger.kernel.org, labbott@redhat.com,
        Alexey Skidanov <alexey.skidanov@intel.com>
Subject: [PATCH v2] lib/genaloc: Fix allocation of aligned buffer from non-aligned chunk
Date: Thu,  8 Nov 2018 17:29:13 +0200
Message-Id: <1541690953-4623-1-git-send-email-alexey.skidanov@intel.com>
X-Mailer: git-send-email 2.7.4
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwCnjEg7VuRbwGMdAA--.3434S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoWxKFW3WFy5Zr1ruFy5Kr4xtFb_yoW7tw15pF
	y8Kw1UtrWYq3y29FyUAa45Xr45Gw15Wa17tFW7K34rX3W3JF1rZ34a93sxZr4UCrykWFya
	ya9xtFsI9F4DJaDanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUPYb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Ar0_tr1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1l84ACjcxK6I8E
	87Iv67AKxVW0oVCq3wA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_GcCE3s1le2I262IYc4CY6c
	8Ij28IcVAaY2xG8wAqx4xG64xvF2IEw4CE5I8CrVC2j2WlYx0E2Ix0cI8IcVAFwI0_Jr0_
	Jr4lYx0Ex4A2jsIE14v26r4j6F4UMcvjeVCFs4IE7xkEbVWUJVW8JwACjcxG0xvY0x0EwI
	xGrwCjxxvEa2IrMxkF7I0Ew4C26cxK6c8Ij28IcwCY1Ik26cxK6xAEc7vF6xCjj44lc2xS
	Y4AK6IIF6ryrMxkI7II2jI8vz4vEwIxGrwCYIxAIcVC0I7IYx2IY67AKxVW8JVW5JwCYIx
	AIcVC0I7IYx2IY6xkF7I0E14v26r4j6F4UMxvI42IY6I8E87Iv67AKxVW0oVCq3wCYIxAI
	cVC2z280aVCY1x0267AKxVW0oVCq3wCF04k20xvY0x0EwIxGrwCF04k20xvEw4C26cxK6c
	8Ij28IcwCF72vE77IF4wCFx2IqxVCFs4IE7xkEbVWUJVW8JwC20s026c02F40E14v26r1j
	6r18MI8I3I0E7480Y4vE14v26r106r1rMI8E67AF67kF1VAFwI0_Jw0_GFylIxkGc2Ij64
	vIr41lIxAIcVCF04k26cxKx2IYs7xG6r4j6FyUYxBIdaVFxhVjvjDU0xZFpf9x07bpc_fU
	UUUU=

gen_pool_alloc_algo() uses different allocation functions implementing
different allocation algorithms. With gen_pool_first_fit_align() allocation
function, the returned address should be aligned on the requested boundary.

If chunk start address isn't aligned on the requested boundary, the
returned address isn't aligned too. The only way to get properly aligned
address is to initialize the pool with chunks aligned on the requested
boundary. If want to have an ability to allocate buffers aligned on
different boundaries (for example, 4K, 1MB, ...), the chunk start address
should be aligned on the max possible alignment.

This happens because gen_pool_first_fit_align() looks for properly aligned
memory block without taking into account the chunk start address alignment.

To fix this, we provide chunk start address to gen_pool_first_fit_align()
and change its implementation such that it starts looking for properly
aligned block with appropriate offset (exactly as it done in CMA).

Link: https://lkml.kernel.org/lkml/a170cf65-6884-3592-1de9-4c235888cc8a@intel.com
Signed-off-by: Alexey Skidanov <alexey.skidanov@intel.com>
---
Changes:
	v2: 
		Correct typos
		Add more details to changelog

 include/linux/genalloc.h | 13 +++++++------
 lib/genalloc.c           | 20 ++++++++++++--------
 2 files changed, 19 insertions(+), 14 deletions(-)

diff --git a/include/linux/genalloc.h b/include/linux/genalloc.h
index 872f930..dd0a452 100644
--- a/include/linux/genalloc.h
+++ b/include/linux/genalloc.h
@@ -51,7 +51,8 @@ typedef unsigned long (*genpool_algo_t)(unsigned long *map,
 			unsigned long size,
 			unsigned long start,
 			unsigned int nr,
-			void *data, struct gen_pool *pool);
+			void *data, struct gen_pool *pool,
+			unsigned long start_addr);
 
 /*
  *  General purpose special memory pool descriptor.
@@ -131,24 +132,24 @@ extern void gen_pool_set_algo(struct gen_pool *pool, genpool_algo_t algo,
 
 extern unsigned long gen_pool_first_fit(unsigned long *map, unsigned long size,
 		unsigned long start, unsigned int nr, void *data,
-		struct gen_pool *pool);
+		struct gen_pool *pool, unsigned long start_addr);
 
 extern unsigned long gen_pool_fixed_alloc(unsigned long *map,
 		unsigned long size, unsigned long start, unsigned int nr,
-		void *data, struct gen_pool *pool);
+		void *data, struct gen_pool *pool, unsigned long start_addr);
 
 extern unsigned long gen_pool_first_fit_align(unsigned long *map,
 		unsigned long size, unsigned long start, unsigned int nr,
-		void *data, struct gen_pool *pool);
+		void *data, struct gen_pool *pool, unsigned long start_addr);
 
 
 extern unsigned long gen_pool_first_fit_order_align(unsigned long *map,
 		unsigned long size, unsigned long start, unsigned int nr,
-		void *data, struct gen_pool *pool);
+		void *data, struct gen_pool *pool, unsigned long start_addr);
 
 extern unsigned long gen_pool_best_fit(unsigned long *map, unsigned long size,
 		unsigned long start, unsigned int nr, void *data,
-		struct gen_pool *pool);
+		struct gen_pool *pool, unsigned long start_addr);
 
 
 extern struct gen_pool *devm_gen_pool_create(struct device *dev,
diff --git a/lib/genalloc.c b/lib/genalloc.c
index ca06adc..5deb25c 100644
--- a/lib/genalloc.c
+++ b/lib/genalloc.c
@@ -311,7 +311,7 @@ unsigned long gen_pool_alloc_algo(struct gen_pool *pool, size_t size,
 		end_bit = chunk_size(chunk) >> order;
 retry:
 		start_bit = algo(chunk->bits, end_bit, start_bit,
-				 nbits, data, pool);
+				 nbits, data, pool, chunk->start_addr);
 		if (start_bit >= end_bit)
 			continue;
 		remain = bitmap_set_ll(chunk->bits, start_bit, nbits);
@@ -525,7 +525,7 @@ EXPORT_SYMBOL(gen_pool_set_algo);
  */
 unsigned long gen_pool_first_fit(unsigned long *map, unsigned long size,
 		unsigned long start, unsigned int nr, void *data,
-		struct gen_pool *pool)
+		struct gen_pool *pool, unsigned long start_addr)
 {
 	return bitmap_find_next_zero_area(map, size, start, nr, 0);
 }
@@ -543,16 +543,19 @@ EXPORT_SYMBOL(gen_pool_first_fit);
  */
 unsigned long gen_pool_first_fit_align(unsigned long *map, unsigned long size,
 		unsigned long start, unsigned int nr, void *data,
-		struct gen_pool *pool)
+		struct gen_pool *pool, unsigned long start_addr)
 {
 	struct genpool_data_align *alignment;
-	unsigned long align_mask;
+	unsigned long align_mask, align_off;
 	int order;
 
 	alignment = data;
 	order = pool->min_alloc_order;
 	align_mask = ((alignment->align + (1UL << order) - 1) >> order) - 1;
-	return bitmap_find_next_zero_area(map, size, start, nr, align_mask);
+	align_off = (start_addr & (alignment->align - 1)) >> order;
+
+	return bitmap_find_next_zero_area_off(map, size, start, nr,
+					      align_mask, align_off);
 }
 EXPORT_SYMBOL(gen_pool_first_fit_align);
 
@@ -567,7 +570,7 @@ EXPORT_SYMBOL(gen_pool_first_fit_align);
  */
 unsigned long gen_pool_fixed_alloc(unsigned long *map, unsigned long size,
 		unsigned long start, unsigned int nr, void *data,
-		struct gen_pool *pool)
+		struct gen_pool *pool, unsigned long start_addr)
 {
 	struct genpool_data_fixed *fixed_data;
 	int order;
@@ -601,7 +604,8 @@ EXPORT_SYMBOL(gen_pool_fixed_alloc);
  */
 unsigned long gen_pool_first_fit_order_align(unsigned long *map,
 		unsigned long size, unsigned long start,
-		unsigned int nr, void *data, struct gen_pool *pool)
+		unsigned int nr, void *data, struct gen_pool *pool,
+		unsigned long start_addr)
 {
 	unsigned long align_mask = roundup_pow_of_two(nr) - 1;
 
@@ -624,7 +628,7 @@ EXPORT_SYMBOL(gen_pool_first_fit_order_align);
  */
 unsigned long gen_pool_best_fit(unsigned long *map, unsigned long size,
 		unsigned long start, unsigned int nr, void *data,
-		struct gen_pool *pool)
+		struct gen_pool *pool, unsigned long start_addr)
 {
 	unsigned long start_bit = size;
 	unsigned long len = size + 1;
-- 
2.7.4
