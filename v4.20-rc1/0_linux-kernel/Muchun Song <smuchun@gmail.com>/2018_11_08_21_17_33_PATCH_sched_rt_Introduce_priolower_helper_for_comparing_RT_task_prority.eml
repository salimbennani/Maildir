Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 09 Nov 2018 00:34:35 -0000
Received: from icoremail.net (unknown [209.85.214.181])
	by mail-app2 (Coremail) with SMTP id by_KCgDnX_upN+RbF0RgAQ--.29222S3;
	Thu, 08 Nov 2018 21:18:36 +0800 (CST)
Received: from mail-pl1-f181.google.com (unknown [209.85.214.181])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwCXfkqkN+RbWNkcAA--.8748S3;
	Thu, 08 Nov 2018 21:18:28 +0800 (CST)
Received: by mail-pl1-f181.google.com with SMTP id p4-v6so7148274plo.5
        for <xuliker@zju.edu.cn>; Thu, 08 Nov 2018 05:18:28 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:from:to:cc:subject
         :date:message-id:sender:precedence:list-id;
        bh=8V/ZJ14scYMXRzfZf0OkqJcMiULqs7POoBh75VwKK1c=;
        b=RDSiuvEyv2X0KuOYFb1B7jkrwRmtKmhb/hZvOOKshfGNY8U+w5KGOBD+eRNfUOQCT1
         S5EbcO3HPz5OqPT5rRlDP+dKkJvIP5BjXvVEVCMGCaYdJk0XzYaUg0441CR49xHfCp+K
         sWdzjhi45qTS2gxez+O/LbW1g7hLtfAaq/hdB2MDzWTfrHNmOeB7RSgBdtGDtZVuq9Nv
         A/szHtV2Hc7X81Qz+vZB6UxGGbQKV3ukJUoFLm1MhIM5QByd3H4z8UQba4bgk0S+z5Mh
         Q2gX1VoJKduLbUeoUAhXs1HMpXPFMzC8ZjU3BfP5VJDeC50MLjfgyCZ2y0wEQP7WqCPC
         RRrA==
X-Gm-Message-State: AGRZ1gKSsmWwVB2Ce6TNoxO7+7TBVUn0C5Ixf1K/hVk98Ab4ObOaTVi7
	Aycq03cEsOmbTOi8AAtXLqjrCwEepMz19w3f1CJl6RN5P5zWLgsRTA==
X-Received: by 2002:a17:902:a9:: with SMTP id a38-v6mr4554514pla.7.1541683108303;
        Thu, 08 Nov 2018 05:18:28 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp174580pjt;
        Thu, 8 Nov 2018 05:18:27 -0800 (PST)
X-Google-Smtp-Source: AJdET5eeob1lxm3ImcsF9cJbFazmJWhFjNZlExdyCvPVlV6gWAsB3UAhdWVmr2niZCkVYRw5OEht
X-Received: by 2002:a63:1f1c:: with SMTP id f28mr3769549pgf.193.1541683107348;
        Thu, 08 Nov 2018 05:18:27 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1541683107; cv=none;
        d=google.com; s=arc-20160816;
        b=oMg0XvppgpmIn41b8qF4qfzWeOFYz6LBi73pvqB4WM5wNVaYILJvC5tUszU4JNsAqI
         CSSAovsSCFjDfOX854Fccrdu2tKEdkQhZ80a0nLu3bYBO/+v7+TTbbA75t/vwT3RfeQz
         uFE1tFub0q14pYc/hNxHEekXBpCAbWgfeDH9r3ATcrga0WPfoh0kJwuAy0ECcyyukTnl
         TySdkmqTNkUF0R9qz3MveaRy+5hTw/ONaw1QbaDWWxUu8QtDIvIPuWl71oivfBsZuy98
         wJCG6TjoeYz7ZnyPYwHIF6hHmZtO3VRx8DjDKRQnW4+yfMcXZ+5ZR/PjCNe7ZDxukhOu
         w3qg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:message-id:date:subject:cc:to:from
         :dkim-signature;
        bh=8V/ZJ14scYMXRzfZf0OkqJcMiULqs7POoBh75VwKK1c=;
        b=CG4QfvcoAYa5j+aAOt9kuY7yRS9kP74QRvf234QNDm1napBC5Oooy2N8sgmCm9IsrD
         klLtAAfS+1I5n9qvy8m5vTRHTXz8ELYUt/lkcooe0dLZbi4fn0cdE0fzPj+lkjlAdsim
         gBIYHd9eh/a+59BwO4gddstmX4SjMNaypcMvS4lqBGEcIGdb+vF+0CZ3PhjgQraMcuYy
         E+5MBb3axhSkT9xiBM9pOyzNbWEGfAs3chu85rfpCmWPJ+aYt1NJpZl0911l6VmHJWLI
         5JbZvOdBCpAKnONY3taZAmK0KCNM0q9jM5wPN+RT/3JJ+cs3h1xHyxE8qN6mwYpIktEx
         3GMQ==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@gmail.com header.s=20161025 header.b=bNIiq1g+;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;
       dmarc=pass (p=NONE sp=QUARANTINE dis=NONE) header.from=gmail.com
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id x124-v6si4415666pfb.154.2018.11.08.05.18.11;
        Thu, 08 Nov 2018 05:18:27 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726932AbeKHWx0 (ORCPT <rfc822;ankurbansal210989@gmail.com>
        + 99 others); Thu, 8 Nov 2018 17:53:26 -0500
Received: from mail-pf1-f194.google.com ([209.85.210.194]:45426 "EHLO
        mail-pf1-f194.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726583AbeKHWxZ (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 8 Nov 2018 17:53:25 -0500
Received: by mail-pf1-f194.google.com with SMTP id p17-v6so8919451pfj.12
        for <linux-kernel@vger.kernel.org>; Thu, 08 Nov 2018 05:17:58 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=from:to:cc:subject:date:message-id;
        bh=8V/ZJ14scYMXRzfZf0OkqJcMiULqs7POoBh75VwKK1c=;
        b=bNIiq1g+/d1AkPZFmBplx0vFD7AX5ax8xQReLJaNIP5A/y48h7fXPB8laAFhU1hdZS
         d8mUQraG7zduHFKyFi176V+Bqbbn0b8X+B1OAejmYqKlyryu6fI+vbXmCblku+/GVDE7
         +dsJTONTfLDA2VMr6CNSvQSvK4aXGdlN8g42IhAxvSQfw1YNoAp6g8B0JAivmDeyHfNe
         fES+WuYHN4UsowIMuRxMouJCvv/vW4wi70wfpvF8eYWmCgdtlStK5QNpKdR4azV0p0ZI
         hLh4eCBfHwQ5U+xvCxReU0wnAsS7dZEjX/3c2CuGvkx5VUA6bAXMYz5Se5EAG0fpbhK9
         jkBw==
X-Received: by 2002:a62:8208:: with SMTP id w8-v6mr4493399pfd.150.1541683077475;
        Thu, 08 Nov 2018 05:17:57 -0800 (PST)
Received: from localhost.localdomain ([104.238.150.158])
        by smtp.gmail.com with ESMTPSA id d24-v6sm7902778pfe.40.2018.11.08.05.17.54
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Thu, 08 Nov 2018 05:17:57 -0800 (PST)
From: Muchun Song <smuchun@gmail.com>
To: mingo@kernel.org, peterz@infradead.org
Cc: rostedt@goodmis.org, linux-kernel@vger.kernel.org
Subject: [PATCH] sched/rt: Introduce prio_lower() helper for comparing RT task prority
Date: Thu,  8 Nov 2018 21:17:33 +0800
Message-Id: <20181108131733.45720-1-smuchun@gmail.com>
X-Mailer: git-send-email 2.17.1
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwCXfkqkN+RbWNkcAA--.8748S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoW3AF48Cw4kWr1rJw18tw4kCrg_yoW3Gw15pa
	1Duw45tF10qa42qF1xXrW7Z34rKwn2qFWUtrn3G3yrKrn8twn3KFyvyr42qF9xJryY9FW3
	tF40yrW5Cr1DWF7anT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUU9Yb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Ar0_tr1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1l84ACjcxK6I8E
	87Iv67AKxVW0oVCq3wA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_GcCE3s1le2I262IYc4CY6c
	8Ij28IcVAaY2xG8wAqx4xG64xvF2IEw4CE5I8CrVC2j2WlYx0E2Ix0cI8IcVAFwI0_Jr0_
	Jr4lYx0Ex4A2jsIE14v26r4j6F4UMcvjeVCFs4IE7xkEbVWUJVW8JwACjcxG0xvY0x0EwI
	xGrwCjxxvEa2IrMxkF7I0Ew4C26cxK6c8Ij28IcwCY0x0Ix7I2Y4AK64vIr41lcIIF0xvE
	2Ix0cI8IcVAFwI0_Gr0_Xr1lcIIF0xvE2Ix0cI8IcVCY1x0267AKxVW8JVWxJwCYIxAIcV
	C2z280aVAFwI0_GcCE3s1lcIIF0xvEx4A2jsIEc7CjxVAFwI0_GcCE3s1l42xK82IYc2Ij
	64vIr41l42xK82IY64kExVAvwVAq07x20xyl4x8a6x804xWl4I8I3I0E4IkC6x0Yz7v_Jr
	0_Gr1lx2IqxVAqx4xG67AKxVWUJVWUGwC20s026x8GjcxK67AKxVWUGVWUWwC2zVAF1VAY
	17CE14v26r126r1DMIIYrxkI7VAKI48JMIIF0xvE42xK8VAvwI8IcIk0rVW8JVW3JbIYCT
	nIWIevJa73UjIFyTuYvjxUBSfODUUUU

We use a value to represent the priority of the RT task. But a smaller
value corresponds to a higher priority. If there are two RT task A and B,
their priorities are prio_a and prio_b, respectively. If prio_a is larger
than prio_b, which means that the priority of RT task A is lower than RT
task B. It may seem a bit strange.

In rt.c, there are many if condition of priority comparison. We need to
think carefully about which priority is higher because of this opposite
logic when read those code. So we introduce prio_lower() helper for
comparing RT task prority, which can make code more readable.

Signed-off-by: Muchun Song <smuchun@gmail.com>
---
 kernel/sched/rt.c | 54 ++++++++++++++++++++++++++++-------------------
 1 file changed, 32 insertions(+), 22 deletions(-)

diff --git a/kernel/sched/rt.c b/kernel/sched/rt.c
index 9aa3287ce301..4808684607b9 100644
--- a/kernel/sched/rt.c
+++ b/kernel/sched/rt.c
@@ -101,6 +101,15 @@ void init_rt_rq(struct rt_rq *rt_rq)
 	raw_spin_lock_init(&rt_rq->rt_runtime_lock);
 }
 
+/**
+ * prio_lower(a, b) returns true if the priority a is
+ * lower than the priority b, otherwise return false.
+ */
+static inline bool prio_lower(int a, int b)
+{
+	return a > b;
+}
+
 #ifdef CONFIG_RT_GROUP_SCHED
 static void destroy_rt_bandwidth(struct rt_bandwidth *rt_b)
 {
@@ -262,7 +271,7 @@ static void pull_rt_task(struct rq *this_rq);
 static inline bool need_pull_rt_task(struct rq *rq, struct task_struct *prev)
 {
 	/* Try to pull RT tasks here if we lower this rq's prio */
-	return rq->rt.highest_prio.curr > prev->prio;
+	return prio_lower(rq->rt.highest_prio.curr, prev->prio);
 }
 
 static inline int rt_overloaded(struct rq *rq)
@@ -377,7 +386,7 @@ static void enqueue_pushable_task(struct rq *rq, struct task_struct *p)
 	plist_add(&p->pushable_tasks, &rq->rt.pushable_tasks);
 
 	/* Update the highest prio pushable task */
-	if (p->prio < rq->rt.highest_prio.next)
+	if (prio_lower(rq->rt.highest_prio.next, p->prio))
 		rq->rt.highest_prio.next = p->prio;
 }
 
@@ -498,7 +507,7 @@ static void sched_rt_rq_enqueue(struct rt_rq *rt_rq)
 		else if (!on_rt_rq(rt_se))
 			enqueue_rt_entity(rt_se, 0);
 
-		if (rt_rq->highest_prio.curr < curr->prio)
+		if (prio_lower(curr->prio, rt_rq->highest_prio.curr))
 			resched_curr(rq);
 	}
 }
@@ -1044,7 +1053,7 @@ inc_rt_prio_smp(struct rt_rq *rt_rq, int prio, int prev_prio)
 	if (&rq->rt != rt_rq)
 		return;
 #endif
-	if (rq->online && prio < prev_prio)
+	if (rq->online && prio_lower(prev_prio, prio))
 		cpupri_set(&rq->rd->cpupri, rq->cpu, prio);
 }
 
@@ -1079,7 +1088,7 @@ inc_rt_prio(struct rt_rq *rt_rq, int prio)
 {
 	int prev_prio = rt_rq->highest_prio.curr;
 
-	if (prio < prev_prio)
+	if (prio_lower(prev_prio, prio))
 		rt_rq->highest_prio.curr = prio;
 
 	inc_rt_prio_smp(rt_rq, prio, prev_prio);
@@ -1092,7 +1101,7 @@ dec_rt_prio(struct rt_rq *rt_rq, int prio)
 
 	if (rt_rq->rt_nr_running) {
 
-		WARN_ON(prio < prev_prio);
+		WARN_ON(prio_lower(prev_prio, prio));
 
 		/*
 		 * This may have been our highest task, and therefore
@@ -1424,7 +1433,7 @@ select_task_rq_rt(struct task_struct *p, int cpu, int sd_flag, int flags)
 	 */
 	if (curr && unlikely(rt_task(curr)) &&
 	    (curr->nr_cpus_allowed < 2 ||
-	     curr->prio <= p->prio)) {
+	     !prio_lower(curr->prio, p->prio))) {
 		int target = find_lowest_rq(p);
 
 		/*
@@ -1432,7 +1441,7 @@ select_task_rq_rt(struct task_struct *p, int cpu, int sd_flag, int flags)
 		 * not running a lower priority task.
 		 */
 		if (target != -1 &&
-		    p->prio < cpu_rq(target)->rt.highest_prio.curr)
+		    prio_lower(cpu_rq(target)->rt.highest_prio.curr, p->prio))
 			cpu = target;
 	}
 	rcu_read_unlock();
@@ -1475,7 +1484,7 @@ static void check_preempt_equal_prio(struct rq *rq, struct task_struct *p)
  */
 static void check_preempt_curr_rt(struct rq *rq, struct task_struct *p, int flags)
 {
-	if (p->prio < rq->curr->prio) {
+	if (prio_lower(rq->curr->prio, p->prio)) {
 		resched_curr(rq);
 		return;
 	}
@@ -1732,7 +1741,7 @@ static struct rq *find_lock_lowest_rq(struct task_struct *task, struct rq *rq)
 
 		lowest_rq = cpu_rq(cpu);
 
-		if (lowest_rq->rt.highest_prio.curr <= task->prio) {
+		if (!prio_lower(lowest_rq->rt.highest_prio.curr, task->prio)) {
 			/*
 			 * Target rq has tasks of equal or higher priority,
 			 * retrying does not release any lock and is unlikely
@@ -1763,7 +1772,7 @@ static struct rq *find_lock_lowest_rq(struct task_struct *task, struct rq *rq)
 		}
 
 		/* If this rq is still suitable use it. */
-		if (lowest_rq->rt.highest_prio.curr > task->prio)
+		if (prio_lower(lowest_rq->rt.highest_prio.curr, task->prio))
 			break;
 
 		/* try again */
@@ -1823,7 +1832,7 @@ static int push_rt_task(struct rq *rq)
 	 * higher priority than current. If that's the case
 	 * just reschedule current.
 	 */
-	if (unlikely(next_task->prio < rq->curr->prio)) {
+	if (unlikely(prio_lower(rq->curr->prio, next_task->prio))) {
 		resched_curr(rq);
 		return 0;
 	}
@@ -2100,8 +2109,8 @@ static void pull_rt_task(struct rq *this_rq)
 		 * logically higher, the src_rq will push this task away.
 		 * And if its going logically lower, we do not care
 		 */
-		if (src_rq->rt.highest_prio.next >=
-		    this_rq->rt.highest_prio.curr)
+		if (!prio_lower(this_rq->rt.highest_prio.curr,
+				src_rq->rt.highest_prio.next))
 			continue;
 
 		/*
@@ -2121,7 +2130,7 @@ static void pull_rt_task(struct rq *this_rq)
 		 * Do we have an RT task that preempts
 		 * the to-be-scheduled task?
 		 */
-		if (p && (p->prio < this_rq->rt.highest_prio.curr)) {
+		if (p && prio_lower(this_rq->rt.highest_prio.curr, p->prio)) {
 			WARN_ON(p == src_rq->curr);
 			WARN_ON(!task_on_rq_queued(p));
 
@@ -2133,7 +2142,7 @@ static void pull_rt_task(struct rq *this_rq)
 			 * p if it is lower in priority than the
 			 * current task on the run queue
 			 */
-			if (p->prio < src_rq->curr->prio)
+			if (prio_lower(src_rq->curr->prio, p->prio))
 				goto skip;
 
 			resched = true;
@@ -2167,7 +2176,7 @@ static void task_woken_rt(struct rq *rq, struct task_struct *p)
 	    p->nr_cpus_allowed > 1 &&
 	    (dl_task(rq->curr) || rt_task(rq->curr)) &&
 	    (rq->curr->nr_cpus_allowed < 2 ||
-	     rq->curr->prio <= p->prio))
+	     !prio_lower(rq->curr->prio, p->prio)))
 		push_rt_tasks(rq);
 }
 
@@ -2242,7 +2251,8 @@ static void switched_to_rt(struct rq *rq, struct task_struct *p)
 		if (p->nr_cpus_allowed > 1 && rq->rt.overloaded)
 			rt_queue_push_tasks(rq);
 #endif /* CONFIG_SMP */
-		if (p->prio < rq->curr->prio && cpu_online(cpu_of(rq)))
+		if (prio_lower(rq->curr->prio, p->prio) &&
+		    cpu_online(cpu_of(rq)))
 			resched_curr(rq);
 	}
 }
@@ -2263,18 +2273,18 @@ prio_changed_rt(struct rq *rq, struct task_struct *p, int oldprio)
 		 * If our priority decreases while running, we
 		 * may need to pull tasks to this runqueue.
 		 */
-		if (oldprio < p->prio)
+		if (prio_lower(p->prio, oldprio))
 			rt_queue_pull_task(rq);
 
 		/*
 		 * If there's a higher priority task waiting to run
 		 * then reschedule.
 		 */
-		if (p->prio > rq->rt.highest_prio.curr)
+		if (prio_lower(p->prio, rq->rt.highest_prio.curr))
 			resched_curr(rq);
 #else
 		/* For UP simply resched on drop of prio */
-		if (oldprio < p->prio)
+		if (prio_lower(p->prio, oldprio))
 			resched_curr(rq);
 #endif /* CONFIG_SMP */
 	} else {
@@ -2283,7 +2293,7 @@ prio_changed_rt(struct rq *rq, struct task_struct *p, int oldprio)
 		 * greater than the current running task
 		 * then reschedule.
 		 */
-		if (p->prio < rq->curr->prio)
+		if (prio_lower(rq->curr->prio, p->prio))
 			resched_curr(rq);
 	}
 }
-- 
2.17.1
