Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 09 Nov 2018 00:38:04 -0000
Received: from icoremail.net (unknown [209.85.210.170])
	by mail-app2 (Coremail) with SMTP id by_KCgDHH95toeRbDo1iAQ--.29559S3;
	Fri, 09 Nov 2018 04:49:49 +0800 (CST)
Received: from mail-pf1-f170.google.com (unknown [209.85.210.170])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwDXrztqoeRbRaMeAA--.7351S3;
	Fri, 09 Nov 2018 04:49:47 +0800 (CST)
Received: by mail-pf1-f170.google.com with SMTP id e22-v6so9833923pfn.8
        for <xuliker@zju.edu.cn>; Thu, 08 Nov 2018 12:49:47 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:date:from:to:cc
         :subject:message-id:references:mime-version:content-disposition
         :in-reply-to:user-agent:sender:precedence:list-id;
        bh=tQdrhWVuUgfVOc66oJo72n/UTGMQIqcrCEIaN2wTDnw=;
        b=H3j82eAnL9PUqVqKbpF5GMeHYKr7O71v+sDnVNB3xb9BFeEGTqCsz35QhV1xWmOBk4
         N1tOdG55eI5QynkOHP1b7cd/r5lH5ADaKFs97+0mFFJ2CMsV8JNOxLSkAhVhghGJo+iQ
         o8WrgwXlPoIOs0bDsYZ7a+TMPTSSdxvcVfJCLW6fHQpJk1Laelr8uvgYEfuJ/icAvOVO
         2BcxVp9zqLyVwa0pqSRgHnFsRvylkPvLPCDJA40Jto29H4L6kSDESautZbBCPJKMQja9
         hC8m2OZde+ZLOvhWuKSgL1WMxb1J+8AaPI4GkGf4aM/AcZaHByetIh8uVLCo7z9eInGh
         VhjQ==
X-Gm-Message-State: AGRZ1gIAn8w3zg/G75rM9AesRZoAT+SK8/fVu0OyED5/4hFuL4lLDLnC
	OTbolylD+mfdHzo2p3WZfK/+TDCgbyDWEgI6g5JuMrjcaaNB+fF1Bw==
X-Received: by 2002:a63:2c0e:: with SMTP id s14mr5173540pgs.132.1541710186618;
        Thu, 08 Nov 2018 12:49:46 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp711995pjt;
        Thu, 8 Nov 2018 12:49:45 -0800 (PST)
X-Google-Smtp-Source: AJdET5cYINxr8lC0Qd9n0CwmIYIA/npalAoJL6xmrtf0GLEEOQrP+rrTsb6P+C6oK8QWGxGZ8qiR
X-Received: by 2002:a62:6fc7:: with SMTP id k190-v6mr6103979pfc.97.1541710185316;
        Thu, 08 Nov 2018 12:49:45 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1541710185; cv=none;
        d=google.com; s=arc-20160816;
        b=qahM5v8ABpDXE7vAlLBOyJ82YoqetCc8DqON3WBc0zt4O97rRDXqxgqahrqAcc0RrM
         n+Z4AmBn0QKY9rEd3zJXiYL2IpDmjzpVvDhcQePM643n8x0LeCfbH5R2+ZAMLhnMzLQx
         7aHVmTdE2RhN7tG/y6GNNih2m6E3KBBAGluqySq930PS4aUYBF+m8uaA+KwgHCWX0Ydi
         vlarB8cbiNosvxFepRqlReSFObsMrhCZIjc9Gd9/3PubbUDfAdZD3J+03nVXtDb55rMd
         X+vStupcjejRHHdH5TTC36z8W7ciRE32zOaghmtZ1PCvT012OeqK1A6jycBHv6I0PuYl
         6llg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:user-agent:in-reply-to
         :content-disposition:mime-version:references:message-id:subject:cc
         :to:from:date:dkim-signature;
        bh=tQdrhWVuUgfVOc66oJo72n/UTGMQIqcrCEIaN2wTDnw=;
        b=zJgn3n8j68StRH+EaxVIY7vxn9g9++A+ZwstXephBI19gJXkm6jqbYIwJgIuZHNQFm
         HjoJR8zgV6l4CAvS0h5TK4IeXAcHOY4TVObf5K0kWXf589Sru52nzu/mCL9eh21GiABH
         zg0h+Vr9heSgogMcopVicp9/RURv3YwyoNq7GJwoJNwF0pKb4I5HNTlSRWv11Zgk+8wy
         DgcRjK7plxnm8zg9WqqFesXxjLHq68kIngfYfFtqG0gebakxAhSwWec7DUapM4wRI5Jq
         NhwASajcgJCS1QdOvkxKCe2T2Sf2EqElCjzNAYbVJVC4Y05bKGLj2ztLH/pg+iK8ADRG
         BiUA==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@linaro.org header.s=google header.b=Rw6lo1lo;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;
       dmarc=pass (p=NONE sp=NONE dis=NONE) header.from=linaro.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id a34-v6si5641301pld.249.2018.11.08.12.49.30;
        Thu, 08 Nov 2018 12:49:45 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727604AbeKIGZo (ORCPT <rfc822;tu.k.phung@gmail.com>
        + 99 others); Fri, 9 Nov 2018 01:25:44 -0500
Received: from mail-pg1-f196.google.com ([209.85.215.196]:37199 "EHLO
        mail-pg1-f196.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726182AbeKIGZo (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 9 Nov 2018 01:25:44 -0500
Received: by mail-pg1-f196.google.com with SMTP id 80so1410653pge.4
        for <linux-kernel@vger.kernel.org>; Thu, 08 Nov 2018 12:48:31 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=tQdrhWVuUgfVOc66oJo72n/UTGMQIqcrCEIaN2wTDnw=;
        b=Rw6lo1loIvJB1Jf28DJUkINncxT0ASbUznIUXE1X1A6ECtwDQ9PI67Q7Je8OHYQPQp
         uJBPq7hVtMdea65uhfbsmzrW2ga5+q9xACYouc8MQ6vzXTvruY+k/1P2+hC1EU2rmtxD
         RMXJ6o/Lv+I/RM67BFgUAh06asEKuRrOUArVs=
X-Received: by 2002:a63:396:: with SMTP id 144mr5105644pgd.68.1541710111045;
        Thu, 08 Nov 2018 12:48:31 -0800 (PST)
Received: from xps15 (S0106002369de4dac.cg.shawcable.net. [68.147.8.254])
        by smtp.gmail.com with ESMTPSA id g3-v6sm4482649pgr.40.2018.11.08.12.48.29
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Thu, 08 Nov 2018 12:48:30 -0800 (PST)
Date: Thu, 8 Nov 2018 13:48:27 -0700
From: Mathieu Poirier <mathieu.poirier@linaro.org>
To: Robert Walker <robert.walker@arm.com>
Cc: Peter Zijlstra <peterz@infradead.org>,
        Ingo Molnar <mingo@redhat.com>,
        Arnaldo Carvalho de Melo <acme@kernel.org>,
        Alexander Shishkin <alexander.shishkin@linux.intel.com>,
        Jiri Olsa <jolsa@redhat.com>,
        Namhyung Kim <namhyung@kernel.org>,
        linux-kernel@vger.kernel.org, linux-arm-kernel@lists.infradead.org,
        CoreSight@lists.linaro.org
Subject: Re: [PATCH v4] perf: Support for Arm A32/T32 instruction sets in
 CoreSight trace
Message-ID: <20181108204827.GA19009@xps15>
References: <1541588652-17380-1-git-send-email-robert.walker@arm.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <1541588652-17380-1-git-send-email-robert.walker@arm.com>
User-Agent: Mutt/1.5.24 (2015-08-30)
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwDXrztqoeRbRaMeAA--.7351S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoW3WrWkZw4xWw1kCry8tr15XFb_yoWfKrWxpF
	43Cay3Ja12ya1S9r1kJr4q9FyaqF4fWF1xW34jqw1ay39IqFnxKFy8tr1F9FyxCFyj93yx
	XF4Dtr47ZF1UArUanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUP2b7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Ar0_tr1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1l84ACjcxK6I8E
	87Iv67AKxVWxJr0_GcWl84ACjcxK6I8E87Iv6xkF7I0E14v26F4UJVW0owAS0I0E0xvYzx
	vE52x082IY62kv0487Mc02F40EFcxC0VAKzVAqx4xG6I80ewAv7VC0I7IYx2IY67AKxVWU
	GVWUXwAv7VC2z280aVAFwI0_Jr0_Gr1lOx8S6xCaFVCjc4AY6r1j6r4UM4x0Y48IcVAKI4
	8JMx02cVCv0xWlc7CjxVAKzI0EY4vE52x082I5MxkFs20EY4vE44CYbxCE4x80FwCY02Av
	z4vEIxC_AwCY0x0Ix7I2Y4AK64vIr41lcIIF0xvE2Ix0cI8IcVAFwI0_Xr0_Ar1lcIIF0x
	vE2Ix0cI8IcVCY1x0267AKxVW8JVWxJwCYIxAIcVC2z280aVAFwI0_Gr1j6F4UJwCYIxAI
	cVC2z280aVCY1x0267AKxVW8Jr0_Cr1UMxAIw28IcxkI7VAKI48JMxAIw28IcVAKzI0EY4
	vE52x082I5MxCjnVCjjxCrMxC20s026xCaFVCjc4AY6r1j6r4UMI8I3I0E5I8CrVAFwI0_
	Jr0_Jr4lx2IqxVCjr7xvwVAFwI0_JrI_JrWlx4CE17CEb7AF67AKxVWUtVW8ZwCIc40Y0x
	0EwIxGrwCI42IY6xAIw20EY4v20xvaj40_Gr0_ZrUvcSsGvfC2KfnxnUUI43ZEXa7IUOPc
	TtUUUUU==

Hi Robert,

On Wed, Nov 07, 2018 at 11:04:12AM +0000, Robert Walker wrote:
> This patch adds support for generating instruction samples from trace of
> AArch32 programs using the A32 and T32 instruction sets.
> 
> T32 has variable 2 or 4 byte instruction size, so the conversion between
> addresses and instruction counts requires extra information from the trace
> decoder, requiring version 0.10.0 of OpenCSD.  A check for the OpenCSD
> library version has been added to the feature check for OpenCSD.
> 
> Signed-off-by: Robert Walker <robert.walker@arm.com>
> ---
>  tools/build/feature/test-libopencsd.c           |  8 +++
>  tools/perf/util/cs-etm-decoder/cs-etm-decoder.c | 29 ++++++++++
>  tools/perf/util/cs-etm-decoder/cs-etm-decoder.h | 10 ++++
>  tools/perf/util/cs-etm.c                        | 71 +++++++++++--------------
>  4 files changed, 78 insertions(+), 40 deletions(-)
> 
> diff --git a/tools/build/feature/test-libopencsd.c b/tools/build/feature/test-libopencsd.c
> index 5ff1246..d68eb4f 100644
> --- a/tools/build/feature/test-libopencsd.c
> +++ b/tools/build/feature/test-libopencsd.c
> @@ -1,6 +1,14 @@
>  // SPDX-License-Identifier: GPL-2.0
>  #include <opencsd/c_api/opencsd_c_api.h>
>  
> +/*
> + * Check OpenCSD library version is sufficient to provide required features
> + */
> +#define OCSD_MIN_VER ((0 << 16) | (10 << 8) | (0))
> +#if !defined(OCSD_VER_NUM) || (OCSD_VER_NUM < OCSD_MIN_VER)
> +#error "OpenCSD >= 0.10.0 is required"
> +#endif
> +
>  int main(void)
>  {
>  	(void)ocsd_get_version();
> diff --git a/tools/perf/util/cs-etm-decoder/cs-etm-decoder.c b/tools/perf/util/cs-etm-decoder/cs-etm-decoder.c
> index 938def6..5efb616 100644
> --- a/tools/perf/util/cs-etm-decoder/cs-etm-decoder.c
> +++ b/tools/perf/util/cs-etm-decoder/cs-etm-decoder.c
> @@ -263,9 +263,12 @@ static void cs_etm_decoder__clear_buffer(struct cs_etm_decoder *decoder)
>  	decoder->tail = 0;
>  	decoder->packet_count = 0;
>  	for (i = 0; i < MAX_BUFFER; i++) {
> +		decoder->packet_buffer[i].isa = CS_ETM_ISA_UNKNOWN;
>  		decoder->packet_buffer[i].start_addr = CS_ETM_INVAL_ADDR;
>  		decoder->packet_buffer[i].end_addr = CS_ETM_INVAL_ADDR;
> +		decoder->packet_buffer[i].instr_count = 0;
>  		decoder->packet_buffer[i].last_instr_taken_branch = false;
> +		decoder->packet_buffer[i].last_instr_size = 0;
>  		decoder->packet_buffer[i].exc = false;
>  		decoder->packet_buffer[i].exc_ret = false;
>  		decoder->packet_buffer[i].cpu = INT_MIN;
> @@ -294,11 +297,15 @@ cs_etm_decoder__buffer_packet(struct cs_etm_decoder *decoder,
>  	decoder->packet_count++;
>  
>  	decoder->packet_buffer[et].sample_type = sample_type;
> +	decoder->packet_buffer[et].isa = CS_ETM_ISA_UNKNOWN;
>  	decoder->packet_buffer[et].exc = false;
>  	decoder->packet_buffer[et].exc_ret = false;
>  	decoder->packet_buffer[et].cpu = *((int *)inode->priv);
>  	decoder->packet_buffer[et].start_addr = CS_ETM_INVAL_ADDR;
>  	decoder->packet_buffer[et].end_addr = CS_ETM_INVAL_ADDR;
> +	decoder->packet_buffer[et].instr_count = 0;
> +	decoder->packet_buffer[et].last_instr_taken_branch = false;
> +	decoder->packet_buffer[et].last_instr_size = 0;
>  
>  	if (decoder->packet_count == MAX_BUFFER - 1)
>  		return OCSD_RESP_WAIT;
> @@ -321,8 +328,28 @@ cs_etm_decoder__buffer_range(struct cs_etm_decoder *decoder,
>  
>  	packet = &decoder->packet_buffer[decoder->tail];
>  
> +	switch (elem->isa) {
> +	case ocsd_isa_aarch64:
> +		packet->isa = CS_ETM_ISA_A64;
> +		break;
> +	case ocsd_isa_arm:
> +		packet->isa = CS_ETM_ISA_A32;
> +		break;
> +	case ocsd_isa_thumb2:
> +		packet->isa = CS_ETM_ISA_T32;
> +		break;
> +	case ocsd_isa_tee:
> +	case ocsd_isa_jazelle:
> +	case ocsd_isa_custom:
> +	case ocsd_isa_unknown:
> +	default:
> +		packet->isa = CS_ETM_ISA_UNKNOWN;
> +	}
> +
>  	packet->start_addr = elem->st_addr;
>  	packet->end_addr = elem->en_addr;
> +	packet->instr_count = elem->num_instr_range;
> +
>  	switch (elem->last_i_type) {
>  	case OCSD_INSTR_BR:
>  	case OCSD_INSTR_BR_INDIRECT:
> @@ -336,6 +363,8 @@ cs_etm_decoder__buffer_range(struct cs_etm_decoder *decoder,
>  		break;
>  	}
>  
> +	packet->last_instr_size = elem->last_instr_sz;
> +
>  	return ret;
>  }
>  
> diff --git a/tools/perf/util/cs-etm-decoder/cs-etm-decoder.h b/tools/perf/util/cs-etm-decoder/cs-etm-decoder.h
> index 612b575..9351bd1 100644
> --- a/tools/perf/util/cs-etm-decoder/cs-etm-decoder.h
> +++ b/tools/perf/util/cs-etm-decoder/cs-etm-decoder.h
> @@ -28,11 +28,21 @@ enum cs_etm_sample_type {
>  	CS_ETM_TRACE_ON = 1 << 1,
>  };
>  
> +enum cs_etm_isa {
> +	CS_ETM_ISA_UNKNOWN,
> +	CS_ETM_ISA_A64,
> +	CS_ETM_ISA_A32,
> +	CS_ETM_ISA_T32,
> +};
> +
>  struct cs_etm_packet {
>  	enum cs_etm_sample_type sample_type;
> +	enum cs_etm_isa isa;
>  	u64 start_addr;
>  	u64 end_addr;
> +	u32 instr_count;
>  	u8 last_instr_taken_branch;
> +	u8 last_instr_size;
>  	u8 exc;
>  	u8 exc_ret;
>  	int cpu;
> diff --git a/tools/perf/util/cs-etm.c b/tools/perf/util/cs-etm.c
> index 73430b7..cad133c 100644
> --- a/tools/perf/util/cs-etm.c
> +++ b/tools/perf/util/cs-etm.c
> @@ -31,14 +31,6 @@
>  
>  #define MAX_TIMESTAMP (~0ULL)
>  
> -/*
> - * A64 instructions are always 4 bytes
> - *
> - * Only A64 is supported, so can use this constant for converting between
> - * addresses and instruction counts, calculting offsets etc
> - */
> -#define A64_INSTR_SIZE 4
> -
>  struct cs_etm_auxtrace {
>  	struct auxtrace auxtrace;
>  	struct auxtrace_queues queues;
> @@ -510,21 +502,16 @@ static inline void cs_etm__reset_last_branch_rb(struct cs_etm_queue *etmq)
>  	etmq->last_branch_rb->nr = 0;
>  }
>  
> -static inline u64 cs_etm__last_executed_instr(struct cs_etm_packet *packet)
> -{
> -	/* Returns 0 for the CS_ETM_TRACE_ON packet */
> -	if (packet->sample_type == CS_ETM_TRACE_ON)
> -		return 0;
> +static inline int cs_etm__t32_instr_size(struct cs_etm_queue *etmq,
> +					 u64 addr) {
> +	u8 instrBytes[2];
>  
> -	/*
> -	 * The packet records the execution range with an exclusive end address
> -	 *
> -	 * A64 instructions are constant size, so the last executed
> -	 * instruction is A64_INSTR_SIZE before the end address
> -	 * Will need to do instruction level decode for T32 instructions as
> -	 * they can be variable size (not yet supported).
> +	cs_etm__mem_access(etmq, addr, ARRAY_SIZE(instrBytes), instrBytes);
> +	/* T32 instruction size is indicated by bits[15:11] of the first
> +	 * 16-bit word of the instruction: 0b11101, 0b11110 and 0b11111
> +	 * denote a 32-bit instruction.
>  	 */

Event if checkpatch doesn't complain the opening of a multi-line comment should
sit on a line by itself, like below: 


	/*
         * T32 instruction size is indicated by bits[15:11] of the first
	 * 16-bit word of the instruction: 0b11101, 0b11110 and 0b11111
         * denote a 32-bit instruction.
         */

Please address and resend.

Thanks,
Mathieu

> -	return packet->end_addr - A64_INSTR_SIZE;
> +	return ((instrBytes[1] & 0xF8) >= 0xE8) ? 4 : 2;
>  }
>  
>  static inline u64 cs_etm__first_executed_instr(struct cs_etm_packet *packet)
> @@ -536,27 +523,32 @@ static inline u64 cs_etm__first_executed_instr(struct cs_etm_packet *packet)
>  	return packet->start_addr;
>  }
>  
> -static inline u64 cs_etm__instr_count(const struct cs_etm_packet *packet)
> +static inline
> +u64 cs_etm__last_executed_instr(const struct cs_etm_packet *packet)
>  {
> -	/*
> -	 * Only A64 instructions are currently supported, so can get
> -	 * instruction count by dividing.
> -	 * Will need to do instruction level decode for T32 instructions as
> -	 * they can be variable size (not yet supported).
> -	 */
> -	return (packet->end_addr - packet->start_addr) / A64_INSTR_SIZE;
> +	/* Returns 0 for the CS_ETM_TRACE_ON packet */
> +	if (packet->sample_type == CS_ETM_TRACE_ON)
> +		return 0;
> +
> +	return packet->end_addr - packet->last_instr_size;
>  }
>  
> -static inline u64 cs_etm__instr_addr(const struct cs_etm_packet *packet,
> +static inline u64 cs_etm__instr_addr(struct cs_etm_queue *etmq,
> +				     const struct cs_etm_packet *packet,
>  				     u64 offset)
>  {
> -	/*
> -	 * Only A64 instructions are currently supported, so can get
> -	 * instruction address by muliplying.
> -	 * Will need to do instruction level decode for T32 instructions as
> -	 * they can be variable size (not yet supported).
> -	 */
> -	return packet->start_addr + offset * A64_INSTR_SIZE;
> +	if (packet->isa == CS_ETM_ISA_T32) {
> +		u64 addr = packet->start_addr;
> +
> +		while (offset > 0) {
> +			addr += cs_etm__t32_instr_size(etmq, addr);
> +			offset--;
> +		}
> +		return addr;
> +	}
> +
> +	/* Assume a 4 byte instruction size (A32/A64) */
> +	return packet->start_addr + offset * 4;
>  }
>  
>  static void cs_etm__update_last_branch_rb(struct cs_etm_queue *etmq)
> @@ -888,9 +880,8 @@ static int cs_etm__sample(struct cs_etm_queue *etmq)
>  	struct cs_etm_auxtrace *etm = etmq->etm;
>  	struct cs_etm_packet *tmp;
>  	int ret;
> -	u64 instrs_executed;
> +	u64 instrs_executed = etmq->packet->instr_count;
>  
> -	instrs_executed = cs_etm__instr_count(etmq->packet);
>  	etmq->period_instructions += instrs_executed;
>  
>  	/*
> @@ -920,7 +911,7 @@ static int cs_etm__sample(struct cs_etm_queue *etmq)
>  		 * executed, but PC has not advanced to next instruction)
>  		 */
>  		u64 offset = (instrs_executed - instrs_over - 1);
> -		u64 addr = cs_etm__instr_addr(etmq->packet, offset);
> +		u64 addr = cs_etm__instr_addr(etmq, etmq->packet, offset);
>  
>  		ret = cs_etm__synth_instruction_sample(
>  			etmq, addr, etm->instructions_sample_period);
> -- 
> 2.7.4
> 
