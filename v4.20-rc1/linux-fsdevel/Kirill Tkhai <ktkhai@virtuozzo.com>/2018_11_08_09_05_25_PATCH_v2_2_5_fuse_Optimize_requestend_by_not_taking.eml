Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (61.164.42.155:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 08 Nov 2018 10:28:59 -0000
Received: from icoremail.net (unknown [209.85.215.171])
	by mail-app2 (Coremail) with SMTP id by_KCgDHH8J6_ONbIdFeAQ--.28762S3;
	Thu, 08 Nov 2018 17:06:03 +0800 (CST)
Received: from mail-pg1-f171.google.com (unknown [209.85.215.171])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwCXbjp3_ONbwO8bAA--.5065S3;
	Thu, 08 Nov 2018 17:05:59 +0800 (CST)
Received: by mail-pg1-f171.google.com with SMTP id 70so3014250pgh.8
        for <xuliker@zju.edu.cn>; Thu, 08 Nov 2018 01:05:59 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-original-authentication-results:x-gm-message-state:delivered-to
         :subject:from:to:date:message-id:in-reply-to:references:user-agent
         :mime-version:content-transfer-encoding:sender:precedence:list-id;
        bh=XjVst1lGAyucH4eohtVSk4ItI5Lw4ovoNBNOPllBuyk=;
        b=j52kasqVJQbXTlAKLtnmsBmL0JhCntl8YZmcwa5KRPycjvgoJSahNNN6qZiH2vcY35
         7QCvKjBXmSQ9cyDhKP3azTmHF9zWmvsW84Y2JXWY81DBdFJMxlCFZQxaO01hAWp0pD9m
         ZpUX1nNieQKBd8J6EFKtGZkC6X4/BBEzBL1KNYB2o6fC0ud+BkwKzC3o5VCRfmf2LqAO
         6MzkcwwvSLudLwMaOtMtmna/Iife7ID5zElDlXKR8F7F8mNxtMMHQvaLFG3o8mxt7fRD
         nM5YbvOCIJ7qYjv2hz61e7IFlppPxdmZu4XAzcrqvLsc9RGcqE6p+/dE6auIUwEaembS
         OBmQ==
X-Original-Authentication-Results: mx.google.com;       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;       dmarc=fail (p=NONE sp=NONE dis=NONE) header.from=virtuozzo.com
X-Gm-Message-State: AGRZ1gI0mT81sDQlsZXqg/OLIg3ssSV5XoRgr9CvXXqvoTwxIlKjX7FU
	ZYt9kG2NGV2x+lp4zLQ5ID5EaMZN37eLolEl9c34MQz+FciHFEAwzw==
X-Received: by 2002:a63:9402:: with SMTP id m2mr3010894pge.93.1541667959429;
        Thu, 08 Nov 2018 01:05:59 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp269463pjt;
        Thu, 8 Nov 2018 01:05:58 -0800 (PST)
X-Google-Smtp-Source: AJdET5cqu6QoEfQ6+h1/Bz/cZDxHd5XL9TWH4nxwWXMpf3kKiADaLFGhcgYocE4DODd39I4Aco0I
X-Received: by 2002:a63:6dc8:: with SMTP id i191mr3034576pgc.215.1541667958622;
        Thu, 08 Nov 2018 01:05:58 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1541667958; cv=none;
        d=google.com; s=arc-20160816;
        b=SttVw161zwQQX763sByRu+7q7gpkkjD1uW6M43eBrouRFuFdci7rYYmB8q6kdozABf
         /KjMB9NUOhLLhDaPXxg3yl0hys8uxCo5ijsIep1HpP0JOgOX6ePf/83Bae7o5wO3Jxtg
         cU/QVdP9XtClGN1Jmzn8sIYqEu4tZiVjMBwQ8yK/saQbUaD3trrUh3EXq3rnH433RgDR
         aq0n+ryltMMQSbnOd2xHvbxr8twAxKHIvovNzdyg9P/CTLejFwuBaQDHH+I80+waNgCj
         pOrUMtPhUV3augYTz1If2visSpCCqGgBtAX4ZxKuMum5a8FgYusduoswO8BLEph+pM76
         339w==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:content-transfer-encoding:mime-version
         :user-agent:references:in-reply-to:message-id:date:to:from:subject;
        bh=XjVst1lGAyucH4eohtVSk4ItI5Lw4ovoNBNOPllBuyk=;
        b=AK9DQ6CH8hOGHna8zfWQC/9MDjGaFUh8sIzvU3tyvuPmXuZXTWNk7ZXWYWoCgVWmkm
         VPJ85DgFRu2kBnnDf2OLb27rU/K4XOt4VuQ+hcYKC+xATnyiYj1cj7R7ZboZQWy+nqO4
         05TMZ1D2Tl8XmMFKL9vQdbBG6OIHPGwMcMLWBK0YH0F2LhKfVLKqY7pF1nBcesTRfvPx
         QBx1Y8IiNIDqmH+0UrCxGoEzn7sYpFC8Zzhhrgwa3Qvbf6FcpIKtUpuWskHMPQ0j7Do8
         u8JgtsIwlqEs27FpIgrPw6wpmw43xrHdQ1/+WHJV0U3AUTT1RJoNcBRprb+hTOxAR0tv
         n9GQ==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;
       dmarc=fail (p=NONE sp=NONE dis=NONE) header.from=virtuozzo.com
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id e4-v6si3770486pls.214.2018.11.08.01.05.43;
        Thu, 08 Nov 2018 01:05:58 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727064AbeKHSj7 (ORCPT <rfc822;lumpython@gmail.com> + 99 others);
        Thu, 8 Nov 2018 13:39:59 -0500
Received: from relay.sw.ru ([185.231.240.75]:36776 "EHLO relay.sw.ru"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1727027AbeKHSj6 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 8 Nov 2018 13:39:58 -0500
Received: from [172.16.25.169] (helo=localhost.localdomain)
        by relay.sw.ru with esmtp (Exim 4.90_1)
        (envelope-from <ktkhai@virtuozzo.com>)
        id 1gKgFi-00062U-4w; Thu, 08 Nov 2018 12:05:26 +0300
Subject: [PATCH v2 2/5] fuse: Optimize request_end() by not taking
 fiq->waitq.lock
From: Kirill Tkhai <ktkhai@virtuozzo.com>
To: miklos@szeredi.hu, ktkhai@virtuozzo.com,
        linux-fsdevel@vger.kernel.org, linux-kernel@vger.kernel.org
Date: Thu, 08 Nov 2018 12:05:25 +0300
Message-ID: <154166792544.10655.2541613506844325108.stgit@localhost.localdomain>
In-Reply-To: <154166765576.10655.15178401490817622677.stgit@localhost.localdomain>
References: <154166765576.10655.15178401490817622677.stgit@localhost.localdomain>
User-Agent: StGit/0.18
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwCXbjp3_ONbwO8bAA--.5065S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoWxXr4fWr4kAF4DZr1UAFyxKrg_yoW5Kw13pr
	W3Ga45KFs3Xr47XrW3ta4Uuw4Svw18CwnxGryxCa45Cr43XrZagrnYkFy5XrnayrWfXrsx
	Z3y0y393ury5Xr7anT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUP0b7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Xr0_Ar1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1l84ACjcxK6I8E
	87Iv67AKxVW0oVCq3wA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_GcCE3s1le2I262IYc4CY6c
	8Ij28IcVAaY2xG8wAqx4xG64xvF2IEw4CE5I8CrVC2j2WlYx0E2Ix0cI8IcVAFwI0_Jr0_
	Jr4lYx0Ex4A2jsIE14v26r4j6F4UMcvjeVCFs4IE7xkEbVWUJVW8JwACjcxG0xvEwIxGrw
	CjxxvEa2IrMxkF7I0Ew4C26cxK6c8Ij28IcwCY1Ik26cxK6xAEc7vF6xCjj44lc2xSY4AK
	6IIF6r4fMxkI7II2jI8vz4vEwIxGrwCYIxAIcVC0I7IYx2IY67AKxVWUCVW8JwCYIxAIcV
	C0I7IYx2IY6xkF7I0E14v26r1j6r4UMxvI42IY6I8E87Iv67AKxVWxJr0_GcWlcIIF0xvE
	x4A2jsIEc7CjxVAFwI0_Cr1j6rxdMxAIw28IcxkI7VAKI48JMxAIw28IcVAKzI0EY4vE52
	x082I5MxCjnVCjjxCrMxC20s026xCaFVCjc4AY6r1j6r4UMI8I3I0E5I8CrVAFwI0_Jr0_
	Jr4lx2IqxVCjr7xvwVAFwI0_JrI_JrWlx4CE17CEb7AF67AKxVWUAVWUtwCIc40Y0x0EwI
	xGrwCI42IY6xAIw20EY4v20xvaj40_JFI_GrUvcSsGvfC2KfnxnUUI43ZEXa7IUOLo2UUU
	UUU==

We take global fiq->waitq.lock every time, when we are
in this function, but interrupted requests are just small
subset of all requests. This patch optimizes request_end()
and makes it to take the lock when it's really needed.

queue_interrupt() needs small change for that. After req
is linked to interrupt list, we do smp_mb() and check
for FR_FINISHED again. In case of FR_FINISHED bit has
appeared, we remove req and leave the function:

CPU 0                                                CPU 1
queue_interrupt()                                    request_end()

  spin_lock(&fiq->waitq.lock)


  list_add_tail(&req->intr_entry, &fiq->interrupts)    test_and_set_bit(FR_FINISHED, &req->flags)
  smp_mb()                                             <memory barrier implied test_and_set_bit()>
  if (test_bit(FR_FINISHED, &req->flags))              if (!list_empty(&req->intr_entry))

    list_del_init(&req->intr_entry)                      spin_lock(&fiq->waitq.lock)
                                                         list_del_init(&req->intr_entry)

Check the change is visible in perf report:

1)Firstly mount fusexmp_fh:
  $fuse/example/.libs/fusexmp_fh mnt

2)Run test doing
    futimes(fd, tv1);
    futimes(fd, tv2);
  in many threads endlessly.

3)perf record -g (all the system load)

Without the patch in request_end() we spend 62.58% of do_write() time:
(= 12.58 / 20.10 * 100%)

   55,22% entry_SYSCALL_64
     20,10% do_writev
      ...
          18,08% fuse_dev_do_write
           12,58% request_end
            10,08% __wake_up_common_lock
            1,97% queued_spin_lock_slowpath
           1,31% fuse_copy_args
           1,04% fuse_copy_one
           0,85% queued_spin_lock_slowpath

With the patch, the perf report becomes better, and only 58.16%
of do_write() time we spend in request_end():

   54,15% entry_SYSCALL_64
     18,24% do_writev
      ...
          16,25% fuse_dev_do_write
           10,61% request_end
            10,25% __wake_up_common_lock
           1,34% fuse_copy_args
           1,06% fuse_copy_one
           0,88% queued_spin_lock_slowpath

v2: Remove unlocked test of FR_FINISHED from queue_interrupt()

Signed-off-by: Kirill Tkhai <ktkhai@virtuozzo.com>
---
 fs/fuse/dev.c |   28 ++++++++++++++++++++--------
 1 file changed, 20 insertions(+), 8 deletions(-)

diff --git a/fs/fuse/dev.c b/fs/fuse/dev.c
index 1ecec7fcb841..7374a23b1bc8 100644
--- a/fs/fuse/dev.c
+++ b/fs/fuse/dev.c
@@ -427,10 +427,16 @@ static void request_end(struct fuse_conn *fc, struct fuse_req *req)
 
 	if (test_and_set_bit(FR_FINISHED, &req->flags))
 		goto put_request;
-
-	spin_lock(&fiq->waitq.lock);
-	list_del_init(&req->intr_entry);
-	spin_unlock(&fiq->waitq.lock);
+	/*
+	 * test_and_set_bit() implies smp_mb() between bit
+	 * changing and below intr_entry check. Pairs with
+	 * smp_mb() from queue_interrupt().
+	 */
+	if (!list_empty(&req->intr_entry)) {
+		spin_lock(&fiq->waitq.lock);
+		list_del_init(&req->intr_entry);
+		spin_unlock(&fiq->waitq.lock);
+	}
 	WARN_ON(test_bit(FR_PENDING, &req->flags));
 	WARN_ON(test_bit(FR_SENT, &req->flags));
 	if (test_bit(FR_BACKGROUND, &req->flags)) {
@@ -469,12 +475,18 @@ static void request_end(struct fuse_conn *fc, struct fuse_req *req)
 static void queue_interrupt(struct fuse_iqueue *fiq, struct fuse_req *req)
 {
 	spin_lock(&fiq->waitq.lock);
-	if (test_bit(FR_FINISHED, &req->flags)) {
-		spin_unlock(&fiq->waitq.lock);
-		return;
-	}
 	if (list_empty(&req->intr_entry)) {
 		list_add_tail(&req->intr_entry, &fiq->interrupts);
+		/*
+		 * Pairs with smp_mb() implied by test_and_set_bit()
+		 * from request_end().
+		 */
+		smp_mb();
+		if (test_bit(FR_FINISHED, &req->flags)) {
+			list_del_init(&req->intr_entry);
+			spin_unlock(&fiq->waitq.lock);
+			return;
+		}
 		wake_up_locked(&fiq->waitq);
 		kill_fasync(&fiq->fasync, SIGIO, POLL_IN);
 	}
