Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 08 Nov 2018 00:34:57 -0000
Received: from icoremail.net (unknown [209.85.214.177])
	by mail-app2 (Coremail) with SMTP id by_KCgDnX_tcZONbjBxbAQ--.27544S3;
	Thu, 08 Nov 2018 06:17:01 +0800 (CST)
Received: from mail-pl1-f177.google.com (unknown [209.85.214.177])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwCHb0taZONbTokZAA--.2344S3;
	Thu, 08 Nov 2018 06:16:59 +0800 (CST)
Received: by mail-pl1-f177.google.com with SMTP id f12-v6so7315830plo.1
        for <xuliker@zju.edu.cn>; Wed, 07 Nov 2018 14:16:59 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-original-authentication-results:x-gm-message-state:delivered-to
         :from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding:sender:precedence:list-id;
        bh=M9A9qVtrL86/9SSSuQXkYX53z6FBdCrSO1VFV+4b3q8=;
        b=NY8OU4C2J98cHwyGEiKlw0KCoriNHKO06dGwii0TvW8VdL8KyPlqYRpafGg7Anfl6Q
         slS6Khi7D+gY1xminaykSihyRXPNZOZRmxARaTv1L/apwAfkJEcb64tL5iyc+39oUviL
         dkyAsXXvDOHmj9QdPA88ejdIV0HvcDnHiYXvG8PoD+6ex4I3jjNl2DHsHhm+ILWSvEOB
         OF7Fyy9tw7e70G6HGqSsDV8/ZX2sVBuaoOfgDO8dSORc3DeCSYrFMi5yMA9ZyeA5DRRC
         F6jq77hvpzzPYXj3Dp7J//Facybqqh5p/K/z/rr31/X6QLV3SDOfs4k7nIPKZSvRe40c
         Brrw==
X-Original-Authentication-Results: mx.google.com;       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
X-Gm-Message-State: AGRZ1gJu7iMKRKgKtGR4L6wM0Bs7/dOphgYCTdWa1KllZIj5flGvFLTW
	5KUkVg4w8SdexZAG34IFGkEPnVlpj2dm/vmwTiGuelhuYilq+T8N8w==
X-Received: by 2002:a17:902:b598:: with SMTP id a24-v6mr2084844pls.231.1541629018665;
        Wed, 07 Nov 2018 14:16:58 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp68534pjt;
        Wed, 7 Nov 2018 14:16:57 -0800 (PST)
X-Google-Smtp-Source: AJdET5evpYIFcbvqLB3ri1qiZSvy4JEhmq26nAaEPNkaRlxhFj48lVEVHicBh8CeSabyNWKaHbHu
X-Received: by 2002:a62:1dd5:: with SMTP id d204-v6mr2034271pfd.157.1541629017562;
        Wed, 07 Nov 2018 14:16:57 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1541629017; cv=none;
        d=google.com; s=arc-20160816;
        b=AOjSP/4olYBhjnFls1dH7EUkpC2oDqbGGBFYilLNgsp6QV5mNQsqF1neKhqoY0dSG5
         B1OLo3mht5ITBdGd4QNEOwJP4CVouulHiJEXxe2TSvHzagfw88nr3y4Qn5ovmxWjPJUf
         JPknfE5lvLrVeCZir+omf9cJkKvbCL+NR6/JZ/NkWlcp2ZVscdhJtpkdNKkaJaTOw6xr
         xAVklq6b6BjQ7d1QHn0GbJDtLYe0F8ahz6ddctynDSVGGub74ldOMRDgBfh3ofD4leTj
         trb9SjWllu38/yk/olgDsHLDozwRh09gHr+44kUf4Atp71jqvYwRix8OF6SY1FARo+R7
         tPZQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:content-transfer-encoding:mime-version
         :references:in-reply-to:message-id:date:subject:cc:to:from;
        bh=M9A9qVtrL86/9SSSuQXkYX53z6FBdCrSO1VFV+4b3q8=;
        b=QleSO5Tp/XdXvUujOxk/hUwRYem2PJTydNR2R4YFz5DCrA9q9X7X3fniAJYx14az5X
         LW6uwGD3ahkFtmrkoqbZ1wMf5jyd4ovjDkOP47ds/PzqsXEFlF/iUB2V0gQLjI3TpyIQ
         d8ULKeucsiVMyyPdM5gJCoBVwqf9JJNDcu4iLyYpX6B49HvdydAcVvsHfmLfQ27A5e2z
         4fCLjIFoagsa311lUOiMAq+AdlCG/+gG63kGbsqae8kczef4T+2HdP/9a//B2OlQqwJv
         II8P1WcmZ2t+aQV/PVSw15F1ThEkEKI3O8lx8mfEq6jFEAEwnmqEKCGRRRVPR5kmjU3P
         ys4g==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id n63-v6si2056018pfk.158.2018.11.07.14.16.42;
        Wed, 07 Nov 2018 14:16:57 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727965AbeKHHsw (ORCPT <rfc822;wanghaifine@gmail.com>
        + 99 others); Thu, 8 Nov 2018 02:48:52 -0500
Received: from lilium.sigma-star.at ([109.75.188.150]:38058 "EHLO
        lilium.sigma-star.at" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727164AbeKHHsv (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 8 Nov 2018 02:48:51 -0500
Received: from localhost (localhost [127.0.0.1])
        by lilium.sigma-star.at (Postfix) with ESMTP id D72C618013774;
        Wed,  7 Nov 2018 23:16:26 +0100 (CET)
From: Richard Weinberger <richard@nod.at>
To: linux-mtd@lists.infradead.org
Cc: linux-kernel@vger.kernel.org, thomas.roeder@harman.com,
        juergen.lachmann@harman.com, Richard Weinberger <richard@nod.at>
Subject: [PATCH 2/2] ubi: Expose the bitrot interface
Date: Wed,  7 Nov 2018 23:16:19 +0100
Message-Id: <20181107221619.32498-2-richard@nod.at>
X-Mailer: git-send-email 2.19.1
In-Reply-To: <20181107221619.32498-1-richard@nod.at>
References: <20181107221619.32498-1-richard@nod.at>
MIME-Version: 1.0
Content-Transfer-Encoding: quoted-printable
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwCHb0taZONbTokZAA--.2344S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoW3JrWUKryxKF4DWryDKw4DArb_yoWxGw4Dpr
	WYyFWayr4UJrZruwsrJ3W8XF45Kw40qay3G3yfGwn7ta1kXr9a9ryFkFy2yr1kJFnrAa12
	gFn8Aa48CF1jvw7anT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUPIb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Ar0_tr1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1l84ACjcxK6I8E
	87Iv67AKxVW0oVCq3wA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_GcCE3s1le2I262IYc4CY6c
	8Ij28IcVAaY2xG8wAqx4xG64xvF2IEw4CE5I8CrVC2j2WlYx0E2Ix0cI8IcVAFwI0_Jr0_
	Jr4lYx0Ex4A2jsIE14v26r4j6F4UMcvjeVCFs4IE7xkEbVWUJVW8JwACjcxG0xvY0x0EwI
	xGrwCjxxvEa2IrMxkF7I0Ew4C26cxK6c8Ij28IcwCY1Ik26cxK6xAEc7vF6xCjj44lc2xS
	Y4AK6IIF6Fylc2IjII80xcxEwVAKI48JMxvI42IY6xIIjxv20xvE14v26ryj6F1UMxvI42
	IY6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1lcIIF0xvEx4A2jsIE14v26r4UJVWxJr1lcIIF
	0xvEx4A2jsIEc7CjxVAFwI0_Gr1j6F4UJwCF04k20xvY0x0EwIxGrwCF04k20xvEw4C26c
	xK6c8Ij28IcwCF72vE77IF4wCFx2IqxVCFs4IE7xkEbVWUJVW8JwC20s026c02F40E14v2
	6r1j6r18MI8I3I0E7480Y4vE14v26r106r1rMI8E67AF67kF1VAFwI0_JF0_Jw1lIxkGc2
	Ij64vIr41lIxAIcVCF04k26cxKx2IYs7xG6r1j6r1xYxBIdaVFxhVjvjDU0xZFpf9x07bl
	-BiUUUUU=

Using UBI_IOCRPEB and UBI_IOCSPEB userspace can force
reading and scrubbing of PEBs.

In case of bitflips UBI will automatically take action
and move data to a different PEB.
This interface allows a daemon to foster your NAND.

Signed-off-by: Richard Weinberger <richard@nod.at>
---
 drivers/mtd/ubi/cdev.c      |  30 ++++++++
 drivers/mtd/ubi/ubi.h       |   1 +
 drivers/mtd/ubi/wl.c        | 144 ++++++++++++++++++++++++++++++++++++
 include/uapi/mtd/ubi-user.h |   5 ++
 4 files changed, 180 insertions(+)

diff --git a/drivers/mtd/ubi/cdev.c b/drivers/mtd/ubi/cdev.c
index 22547d7a84ea..947a8adbc799 100644
--- a/drivers/mtd/ubi/cdev.c
+++ b/drivers/mtd/ubi/cdev.c
@@ -974,6 +974,36 @@ static long ubi_cdev_ioctl(struct file *file, unsign=
ed int cmd,
 		break;
 	}
=20
+	/* Check a specific PEB for bitflips and scrub it if needed */
+	case UBI_IOCRPEB:
+	{
+		int pnum;
+
+		err =3D get_user(pnum, (__user int32_t *)argp);
+		if (err) {
+			err =3D -EFAULT;
+			break;
+		}
+
+		err =3D ubi_bitflip_check(ubi, pnum, 0);
+		break;
+	}
+
+	/* Force scrubbing for a specific PEB */
+	case UBI_IOCSPEB:
+	{
+		int pnum;
+
+		err =3D get_user(pnum, (__user int32_t *)argp);
+		if (err) {
+			err =3D -EFAULT;
+			break;
+		}
+
+		err =3D ubi_bitflip_check(ubi, pnum, 1);
+		break;
+	}
+
 	default:
 		err =3D -ENOTTY;
 		break;
diff --git a/drivers/mtd/ubi/ubi.h b/drivers/mtd/ubi/ubi.h
index d47b9e436e67..a1b9e764d489 100644
--- a/drivers/mtd/ubi/ubi.h
+++ b/drivers/mtd/ubi/ubi.h
@@ -929,6 +929,7 @@ int ubi_wl_put_fm_peb(struct ubi_device *ubi, struct =
ubi_wl_entry *used_e,
 int ubi_is_erase_work(struct ubi_work *wrk);
 void ubi_refill_pools(struct ubi_device *ubi);
 int ubi_ensure_anchor_pebs(struct ubi_device *ubi);
+int ubi_bitflip_check(struct ubi_device *ubi, int pnum, int force_scrub)=
;
=20
 /* io.c */
 int ubi_io_read(const struct ubi_device *ubi, void *buf, int pnum, int o=
ffset,
diff --git a/drivers/mtd/ubi/wl.c b/drivers/mtd/ubi/wl.c
index ca1b31385eb5..5540599a60c6 100644
--- a/drivers/mtd/ubi/wl.c
+++ b/drivers/mtd/ubi/wl.c
@@ -1440,6 +1440,150 @@ int ubi_wl_flush(struct ubi_device *ubi, int vol_=
id, int lnum)
 	return err;
 }
=20
+static bool scrub_possible(struct ubi_device *ubi, struct ubi_wl_entry *=
e)
+{
+	if (in_wl_tree(e, &ubi->scrub))
+		return false;
+	else if (in_wl_tree(e, &ubi->erroneous))
+		return false;
+	else if (ubi->move_from =3D=3D e)
+		return false;
+	else if (ubi->move_to =3D=3D e)
+		return false;
+
+	return true;
+}
+
+/**
+ * ubi_bitflip_check - Check an eraseblock for bitflips and scrub it if =
needed.
+ * @ubi: UBI device description object
+ * @pnum: the physical eraseblock to schedule
+ * @force_scrub: force scrubbing if non-zero, schedule erase otherwise
+ *
+ * This function reads the given eraseblock and checks if bitflips occur=
ed.
+ * In case of bitflips, the eraseblock is scheduled for scrubbing.
+ * If scrubbing is forced with @force_scrub, the eraseblock is not read,
+ * but scheduled for scrubbing right away.
+ *
+ * Returns:
+ * %EINVAL, PEB is out of range
+ * %ENOENT, PEB is no longer used by UBI
+ * %EBUSY, PEB cannot be checked now or a check is currently running on =
it
+ * %EAGAIN, bit flips happened but scrubbing is currently not possible
+ * %EUCLEAN, bit flips happened and PEB is scheduled for scrubbing
+ * %0, no bit flips detected
+ */
+int ubi_bitflip_check(struct ubi_device *ubi, int pnum, int force_scrub)
+{
+	int err;
+	struct ubi_wl_entry *e;
+
+	if (pnum < 0 || pnum >=3D ubi->peb_count) {
+		err =3D -EINVAL;
+		goto out;
+	}
+
+	/*
+	 * Pause all parallel work, otherwise it can happen that the
+	 * erase worker frees a wl entry under us.
+	 */
+	down_write(&ubi->work_sem);
+
+	/*
+	 * Make sure that the wl entry does not change state while
+	 * inspecting it.
+	 */
+	spin_lock(&ubi->wl_lock);
+	e =3D ubi->lookuptbl[pnum];
+	if (!e) {
+		spin_unlock(&ubi->wl_lock);
+		err =3D -ENOENT;
+		goto out_resume;
+	}
+
+	/*
+	 * Does it make sense to check this PEB?
+	 */
+	if (!scrub_possible(ubi, e)) {
+		spin_unlock(&ubi->wl_lock);
+		err =3D -EBUSY;
+		goto out_resume;
+	}
+	spin_unlock(&ubi->wl_lock);
+
+	if (!force_scrub) {
+		mutex_lock(&ubi->buf_mutex);
+		err =3D ubi_io_read(ubi, ubi->peb_buf, pnum, 0, ubi->peb_size);
+		mutex_unlock(&ubi->buf_mutex);
+	}
+
+	if (err =3D=3D UBI_IO_BITFLIPS || force_scrub) {
+		/*
+		 * Okay, bit flip happened, let's figure out what we can do.
+		 */
+		spin_lock(&ubi->wl_lock);
+
+		/*
+		 * Recheck. We released wl_lock, UBI might have killed the
+		 * wl entry under us.
+		 */
+		e =3D ubi->lookuptbl[pnum];
+		if (!e) {
+			spin_unlock(&ubi->wl_lock);
+			err =3D -ENOENT;
+			goto out_resume;
+		}
+
+		/*
+		 * Need to re-check state
+		 */
+		if (!scrub_possible(ubi, e)) {
+			spin_unlock(&ubi->wl_lock);
+			err =3D -EBUSY;
+			goto out_resume;
+		}
+
+		if (in_pq(ubi, e)) {
+			prot_queue_del(ubi, e->pnum);
+			wl_tree_add(e, &ubi->scrub);
+			spin_unlock(&ubi->wl_lock);
+
+			err =3D ensure_wear_leveling(ubi, 1);
+		} else if (in_wl_tree(e, &ubi->used)) {
+			rb_erase(&e->u.rb, &ubi->used);
+			wl_tree_add(e, &ubi->scrub);
+			spin_unlock(&ubi->wl_lock);
+
+			err =3D ensure_wear_leveling(ubi, 1);
+		} else if (in_wl_tree(e, &ubi->free)) {
+			rb_erase(&e->u.rb, &ubi->free);
+			ubi->free_count--;
+			spin_unlock(&ubi->wl_lock);
+
+			/*
+			 * This PEB is empty we can schedule it for
+			 * erasure right away. No wear leveling needed.
+			 */
+			err =3D schedule_erase(ubi, e, UBI_UNKNOWN, UBI_UNKNOWN,
+					     force_scrub ? 0 : 1, true);
+		} else {
+			spin_unlock(&ubi->wl_lock);
+			err =3D -EAGAIN;
+		}
+
+		if (!err && !force_scrub)
+			err =3D -EUCLEAN;
+	} else {
+		err =3D 0;
+	}
+
+out_resume:
+	up_write(&ubi->work_sem);
+out:
+
+	return err;
+}
+
 /**
  * tree_destroy - destroy an RB-tree.
  * @ubi: UBI device description object
diff --git a/include/uapi/mtd/ubi-user.h b/include/uapi/mtd/ubi-user.h
index aad3b6201fc0..b69e9ba6742b 100644
--- a/include/uapi/mtd/ubi-user.h
+++ b/include/uapi/mtd/ubi-user.h
@@ -171,6 +171,11 @@
 /* Re-name volumes */
 #define UBI_IOCRNVOL _IOW(UBI_IOC_MAGIC, 3, struct ubi_rnvol_req)
=20
+/* Read the specified PEB and scrub it if there are bitflips */
+#define UBI_IOCRPEB _IOW(UBI_IOC_MAGIC, 4, __s32)
+/* Force scrubbing on the specified PEB */
+#define UBI_IOCSPEB _IOW(UBI_IOC_MAGIC, 5, __s32)
+
 /* ioctl commands of the UBI control character device */
=20
 #define UBI_CTRL_IOC_MAGIC 'o'
--=20
2.19.1
