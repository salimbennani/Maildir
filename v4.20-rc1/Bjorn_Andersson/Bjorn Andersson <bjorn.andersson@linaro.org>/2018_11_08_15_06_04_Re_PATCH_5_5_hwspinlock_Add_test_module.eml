Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (61.164.42.155:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 08 Nov 2018 10:28:17 -0000
Received: from icoremail.net (unknown [209.85.215.181])
	by mail-app2 (Coremail) with SMTP id by_KCgD3_2Oh3+NbWCBeAQ--.27842S3;
	Thu, 08 Nov 2018 15:02:58 +0800 (CST)
Received: from mail-pg1-f181.google.com (unknown [209.85.215.181])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwAnBECf3+NbgnIbAA--.1117S3;
	Thu, 08 Nov 2018 15:02:55 +0800 (CST)
Received: by mail-pg1-f181.google.com with SMTP id r9-v6so8455507pgv.6
        for <xuliker@zju.edu.cn>; Wed, 07 Nov 2018 23:02:55 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:date:from:to:cc
         :subject:message-id:references:mime-version:content-disposition
         :in-reply-to:user-agent:sender:precedence:list-id;
        bh=0Sw4jBo2InR/ffQDIIO0JFa1jdmuvrxCT1nHHdEseh4=;
        b=DTk/SQmQor8DoOPAXFpbKDBfDw3iTwxewfXWvDYXOAAZbpv/JuHs6qNDrDE+n5gObE
         BTpsaFPKsIx4ZYGAqnrujytY2EkynpBh8MZ9CJYDmOJGbAIi0OBDsPz4aX8Zmmh0UXBq
         Vt0c86q8epUhXqBYUzbvIrsDfrR+HdBPAe+yglcqlsgtFAACHODTLJJunMKKlaWrLzhI
         6cBEWqbOMncgOlE4ZRxImWJRQFQsvJxhCeyGZ6W9sEtP7ZYxihXevsdWc0nKZp0bPcwm
         XA9BwdWqLYLUu9pfZQzVzNYcdSZ2LLbyw+aJ1aYkGy6Hlei0LhRgomsvUpwVD0gDukev
         HeCQ==
X-Gm-Message-State: AGRZ1gJzqELodfW05OunOEJFYjG/aF9nZjmu3JM8oFgyKHEsp4/cpNsh
	9Iiy2eM/S7s/vQ5wwDZrC7fTVsLR5vaMzrHmg0nzdKSXVONT88uMnA==
X-Received: by 2002:aa7:8498:: with SMTP id u24-v6mr3436352pfn.220.1541660574750;
        Wed, 07 Nov 2018 23:02:54 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp170862pjt;
        Wed, 7 Nov 2018 23:02:53 -0800 (PST)
X-Google-Smtp-Source: AJdET5dWYMLAWZ4RCxL/XPc9ex9hiXXgiiGX9wZrPRPy6AE3rsg74Xd9wt/79rwATnMUiawn/Vld
X-Received: by 2002:a65:520a:: with SMTP id o10mr3001984pgp.276.1541660573817;
        Wed, 07 Nov 2018 23:02:53 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1541660573; cv=none;
        d=google.com; s=arc-20160816;
        b=N2OhAz8zT1+m1uCwzbhEic6sMV4Kt+099tO6RN4z/xia8POr+3n6LNXsHI/RygDZv7
         UarycWKAOoTtpE6vGK+vyFpRnvNzb819+nIWE21LhrdZw9G2dHNgSH6wNt/Pt7tH8bS2
         9VlfyNa1wtmO96gnYbpzNmzNAKbReYqb0dJB9A2pat42w1xfmV7bRuYHRrUXxrhipRUJ
         fq0FUZ1TtynKTU9pke3fnhzdsZ45SOknxfMZwGCeuoCFQSGTAZRCdG/euy+sdN+OHHE6
         YRSQmxc/JwPOZyOsgPl888tH8XsdlonXMAfEUzVJPsi+OZ+ht67OxQEDZOApCIF44ZeO
         fqeQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:user-agent:in-reply-to
         :content-disposition:mime-version:references:message-id:subject:cc
         :to:from:date:dkim-signature;
        bh=0Sw4jBo2InR/ffQDIIO0JFa1jdmuvrxCT1nHHdEseh4=;
        b=VqjG00CPgk2yBtQNh9j4y1nJENPQVLdMErFXhL7sKRMbdoursdfSfm6YfF1tPDjXzl
         94exBs8PGgc0sOu0PvLTdJUgnjz/T3hlJXYxx8rDfstjsUNKPjlaX6Yo4UEaU8d0ubaC
         qYcBaHJ4EKr8bYMpTjY0fWLwCKjSpTDhX4CK6EWOqo0qAv0yfiiVovxkhEKOt9UsZD5k
         QsErZ9IPW6Lp9OoZTYf4JFXD+D8P5FXr7QmZaE1NhBc3pChAESczrgO4bAEaejhU2Y2j
         G2oFBxuMnvgC3GCbXtYuVmcPha+tEO83AaFZbu6XRp3UHc3k5sxc7Hj8Q3ToKrhPvRSb
         WTWw==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@linaro.org header.s=google header.b=QtCf053f;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;
       dmarc=pass (p=NONE sp=NONE dis=NONE) header.from=linaro.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id l6-v6si3544960pfi.179.2018.11.07.23.02.37;
        Wed, 07 Nov 2018 23:02:53 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726541AbeKHQgZ (ORCPT <rfc822;lumpython@gmail.com> + 99 others);
        Thu, 8 Nov 2018 11:36:25 -0500
Received: from mail-pl1-f195.google.com ([209.85.214.195]:43961 "EHLO
        mail-pl1-f195.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726133AbeKHQgZ (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 8 Nov 2018 11:36:25 -0500
Received: by mail-pl1-f195.google.com with SMTP id g59-v6so9089394plb.10
        for <linux-kernel@vger.kernel.org>; Wed, 07 Nov 2018 23:02:21 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=0Sw4jBo2InR/ffQDIIO0JFa1jdmuvrxCT1nHHdEseh4=;
        b=QtCf053f/ab58V360ZYhfhKO0BjCLFQQB8w6ACdcbibBSwGUdrc9ZUAg7LjRZREXtf
         U5200u5jGRZBZL/1dvw4dqmHaApkxnJkkU3/ifCG33cdNcxsBi5tZ7fHEgKbtQQ00Mo6
         eQ/KPr0r6QOZkpW6+Guor6/axenST3+2advIU=
X-Received: by 2002:a17:902:1681:: with SMTP id h1-v6mr3491788plh.88.1541660540376;
        Wed, 07 Nov 2018 23:02:20 -0800 (PST)
Received: from builder (104-188-17-28.lightspeed.sndgca.sbcglobal.net. [104.188.17.28])
        by smtp.gmail.com with ESMTPSA id v84-v6sm3273522pfd.182.2018.11.07.23.02.19
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Wed, 07 Nov 2018 23:02:19 -0800 (PST)
Date: Wed, 7 Nov 2018 23:06:04 -0800
From: Bjorn Andersson <bjorn.andersson@linaro.org>
To: Benjamin Gaignard <benjamin.gaignard@linaro.org>
Cc: ohad@wizery.com, robh+dt@kernel.org, mark.rutland@arm.com,
        alexandre.torgue@st.com, linux-remoteproc@vger.kernel.org,
        devicetree@vger.kernel.org, linux-arm-kernel@lists.infradead.org,
        linux-kernel@vger.kernel.org,
        linux-stm32@st-md-mailman.stormreply.com,
        Benjamin Gaignard <benjamin.gaignard@st.com>
Subject: Re: [PATCH 5/5] hwspinlock: Add test module
Message-ID: <20181108070604.GE12063@builder>
References: <20181031093032.20386-1-benjamin.gaignard@st.com>
 <20181031093032.20386-6-benjamin.gaignard@st.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181031093032.20386-6-benjamin.gaignard@st.com>
User-Agent: Mutt/1.10.0 (2018-05-17)
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwAnBECf3+NbgnIbAA--.1117S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoW3XrW5Zr1fCF4UAF17tFW3trb_yoW7KFyxpr
	WUWF9IkF48X3WxXw42q3Z2vrs0yws7K345urW3JF1UAr98X3sIq3WkJry5Zr4IyFs7Xr9r
	KF4DWas8CryqyFDanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUPYb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Ar0_tr1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1l84ACjcxK6I8E
	87Iv67AKxVW0oVCq3wA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_GcCE3s1le2I262IYc4CY6c
	8Ij28IcVAaY2xG8wAqx4xG64xvF2IEw4CE5I8CrVC2j2WlYx0E2Ix0cI8IcVAFwI0_Jr0_
	Jr4lYx0Ex4A2jsIE14v26r4j6F4UMcvjeVCFs4IE7xkEbVWUJVW8JwACjcxG0xvEwIxGrw
	CjxxvEa2IrMxkF7I0Ew4C26cxK6c8Ij28IcwCY1Ik26cxK6xAEc7vF6xCjj44lc2xSY4AK
	6IIF6r4xMxkI7II2jI8vz4vEwIxGrwCYIxAIcVC0I7IYx2IY67AKxVWUCVW8JwCYIxAIcV
	C0I7IYx2IY6xkF7I0E14v26r1j6r4UMxvI42IY6I8E87Iv67AKxVWxJr0_GcWlcIIF0xvE
	x4A2jsIEc7CjxVAFwI0_Cr1j6rxdMxAIw28IcxkI7VAKI48JMxAIw28IcVAKzI0EY4vE52
	x082I5MxCjnVCjjxCrMxC20s026xCaFVCjc4AY6r1j6r4UMI8I3I0E5I8CrVAFwI0_Jr0_
	Jr4lx2IqxVCjr7xvwVAFwI0_JrI_JrWlx4CE17CEb7AF67AKxVWUtVW8ZwCIc40Y0x0EwI
	xGrwCI42IY6xAIw20EY4v20xvaj40_Zr0_Wr1UYxBIdaVFxhVjvjDU0xZFpf9x07bPpBhU
	UUUU=

On Wed 31 Oct 02:30 PDT 2018, Benjamin Gaignard wrote:

> Create a test module to perform simple unitary tests on hwspinlock.
> It doesn't cover all the possibles cases but at least allow to test
> that very basic features are working.
> 

I like the idea of making these things testable, but I would like to
hear from others how useful this module would be to them before merging
it.

> Signed-off-by: Benjamin Gaignard <benjamin.gaignard@st.com>
> ---
>  drivers/hwspinlock/Kconfig           |   9 +++
>  drivers/hwspinlock/Makefile          |   1 +
>  drivers/hwspinlock/hwspinlock_test.c | 132 +++++++++++++++++++++++++++++++++++
>  3 files changed, 142 insertions(+)
>  create mode 100644 drivers/hwspinlock/hwspinlock_test.c
> 
> diff --git a/drivers/hwspinlock/Kconfig b/drivers/hwspinlock/Kconfig
> index e1a20b460590..f340ebb4d1f7 100644
> --- a/drivers/hwspinlock/Kconfig
> +++ b/drivers/hwspinlock/Kconfig
> @@ -68,3 +68,12 @@ config HWSPINLOCK_STM32
>  	  Say y here to support the STM32 Hardware Spinlock device.
>  
>  	  If unsure, say N.
> +
> +config HWSPINLOCK_TEST
> +	tristate "hwspinlock test module"
> +	depends on HWSPINLOCK && m
> +	default n
> +	help
> +	  Select M here if you want to build hwspinlock test module
> +
> +	  If unsure, say N.
> diff --git a/drivers/hwspinlock/Makefile b/drivers/hwspinlock/Makefile
> index c0a9505b4dcf..e6b3d0212fe0 100644
> --- a/drivers/hwspinlock/Makefile
> +++ b/drivers/hwspinlock/Makefile
> @@ -10,3 +10,4 @@ obj-$(CONFIG_HWSPINLOCK_SIRF)		+= sirf_hwspinlock.o
>  obj-$(CONFIG_HWSPINLOCK_SPRD)		+= sprd_hwspinlock.o
>  obj-$(CONFIG_HSEM_U8500)		+= u8500_hsem.o
>  obj-$(CONFIG_HWSPINLOCK_STM32)		+= stm32_hwspinlock.o
> +obj-$(CONFIG_HWSPINLOCK_TEST) 		+= hwspinlock_test.o
> diff --git a/drivers/hwspinlock/hwspinlock_test.c b/drivers/hwspinlock/hwspinlock_test.c
> new file mode 100644
> index 000000000000..75819337e45a
> --- /dev/null
> +++ b/drivers/hwspinlock/hwspinlock_test.c
> @@ -0,0 +1,132 @@
> +// SPDX-License-Identifier: GPL-2.0
> +/*
> + * Copyright (C) STMicroelectronics SA 2018
> + * Author: Benjamin Gaignard <benjamin.gaignard@st.com> for STMicroelectronics.
> + * License terms:  GNU General Public License (GPL), version 2
> + */
> +
> +#include <linux/hwspinlock.h>
> +#include <linux/kernel.h>
> +#include <linux/module.h>
> +
> +#define TIMEOUT	50 /* ms */
> +
> +static void hwspin_lock_test_twice_request_specific(void)
> +{
> +	struct hwspinlock *lock0 = hwspin_lock_request_specific(0);
> +	struct hwspinlock *lock1 = hwspin_lock_request_specific(1);

In a platform with more than one hwspinlock this will test the
implementation that was first probed and it will assume that there's no
issues with messing with the first two locks from this provider.

> +
> +	int ret;
> +
> +	if (!lock0 || !lock1) {
> +		pr_warn("Can't request twice hwspin_lock\n");
> +		return;
> +	}
> +
> +	ret = hwspin_trylock(lock0);
> +	if (ret)
> +		pr_warn("Can't trylock requested hwspin_lock 0 (%d)\n", ret);
> +
> +	ret = hwspin_trylock(lock1);
> +	if (ret)
> +		pr_warn("Can't trylock requested hwspin_lock 1 (%d)\n", ret);
> +
> +	hwspin_unlock(lock0);
> +	hwspin_unlock(lock1);

As described in the kerneldoc for these it's a bug to attempt to unlock
a unlocked lock. I believe this should be interpreted as it being
invalid to unlock unless hwspin_trylock() returned successfully.

> +
> +	ret = hwspin_lock_free(lock0);
> +	if (ret)
> +		pr_warn("Can't free requested hwspin_lock 0\n");
> +
> +	ret = hwspin_lock_free(lock1);
> +	if (ret)
> +		pr_warn("Can't free requested hwspin_lock 0\n");
> +}
> +
> +static void hwspin_lock_test_trylock(void)
> +{
> +	struct hwspinlock *lock = hwspin_lock_request();
> +	int ret;
> +
> +	if (!lock) {
> +		pr_warn("Can't request hwspin_lock\n");
> +		return;
> +	}
> +
> +	ret = hwspin_trylock(lock);
> +	if (ret)
> +		pr_warn("Can't trylock requested hwspin_lock (%d)\n", ret);
> +
> +	/* Try to lock a second time, this should failed */
> +	ret = hwspin_trylock(lock);
> +	if (ret != -EBUSY)
> +		pr_warn("Getting twice the same lock ! (%d)\n", ret);

This shouldn't be a warning, as this is a test failure.

> +
> +	hwspin_unlock(lock);
> +	ret = hwspin_lock_free(lock);
> +	if (ret)
> +		pr_warn("Can't free requested hwspin_lock 0\n");
> +}
> +
> +static void hwspin_lock_test_request_specific(void)
> +{
> +	/*
> +	 * Let's assume that any hwspin_lock driver would at least have one
> +	 * lock at index 0
> +	 */
> +	struct hwspinlock *lock = hwspin_lock_request_specific(0);
> +	int ret;
> +
> +	if (!lock) {
> +		pr_warn("Can't request hwspin_lock 0\n");
> +		return;
> +	}
> +
> +	ret = hwspin_lock_timeout(lock, TIMEOUT);
> +	if (ret)
> +		pr_warn("Can't lock requested hwspin_lock 0 (%d)\n", ret);
> +
> +	hwspin_unlock(lock);
> +	ret = hwspin_lock_free(lock);
> +	if (ret)
> +		pr_warn("Can't free requested hwspin_lock 0\n");
> +}
> +
> +static void hwspin_lock_test_request(void)

I would suggest that your test cases test one thing each; so request and
request_specific should test just that.

> +{
> +	struct hwspinlock *lock = hwspin_lock_request();
> +	int ret;
> +
> +	if (!lock) {
> +		pr_warn("Can't request hwspin_lock\n");
> +		return;
> +	}
> +
> +	ret = hwspin_lock_timeout(lock, TIMEOUT);
> +	if (ret)
> +		pr_warn("Can't lock requested hwspin_lock (%d)\n", ret);

Testing lock-timeout seems useful, but you probably want to elaborate it
to ensure that it both can lock a lock but that it times out properly
when trying to grab a taken lock.

> +
> +	hwspin_unlock(lock);
> +	ret = hwspin_lock_free(lock);
> +	if (ret)
> +		pr_warn("Can't free requested hwspin_lock\n");
> +}
> +
> +/*
> + * Test hwspinlock user API when module is loaded
> + */
> +static int __init hwspin_lock_test_init(void)
> +{
> +	pr_warn("Loading hwspinlock test module\n");
> +	hwspin_lock_test_request();
> +	hwspin_lock_test_request_specific();
> +	hwspin_lock_test_trylock();
> +	hwspin_lock_test_twice_request_specific();
> +
> +	return 0;
> +}
> +

Regards,
Bjorn
