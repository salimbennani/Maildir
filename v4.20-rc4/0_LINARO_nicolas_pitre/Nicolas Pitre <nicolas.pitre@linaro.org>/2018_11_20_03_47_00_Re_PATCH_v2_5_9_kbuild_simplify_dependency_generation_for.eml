Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 20 Nov 2018 07:59:01 -0000
Received: from icoremail.net (unknown [209.85.210.169])
	by mail-app4 (Coremail) with SMTP id cS_KCgD3_zPXg_NbpJvcAQ--.35450S3;
	Tue, 20 Nov 2018 11:47:35 +0800 (CST)
Received: from mail-pf1-f169.google.com (unknown [209.85.210.169])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwB3XUnVg_NbWcxbAA--.109S3;
	Tue, 20 Nov 2018 11:47:33 +0800 (CST)
Received: by mail-pf1-f169.google.com with SMTP id 64so296977pfr.9
        for <xuliker@zju.edu.cn>; Mon, 19 Nov 2018 19:47:33 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:date:from:to:cc
         :subject:in-reply-to:message-id:references:user-agent:mime-version
         :sender:precedence:list-id;
        bh=Vffzc8/Krv4oxHxEle6OPcQMi0BSshGPW06vksyMUnY=;
        b=rmm61QDg2t12oaTt3+OZ/76l+R6TPVrVnoOpvXo2azvc9H7IrDfkT2zczOLc1PdNqR
         WDbhA4i+VxXed+B5zCF+2RxfSql7+l6XfGzPNYTx/3/OIzntxYvLkiuQyafuxgooERm5
         Ayq4jasJOgXTIdiVwgcKT0lzhd8FywDpVAlLZn7laKMwV6V0Ra5bBQrldsmxMzvcTD3k
         mKYP1KgmyHaoX9y4hVP76e25iW0W9LeWnzy8rAusuPDD9UckT5hcs19HEV3X5jW5f0mc
         HVVK6+8VvZRtq5lneZAGrXShP/iJy07SERR8yDkF/rneJXJdiRH2tc5uq3Xtt4u98dWW
         sMbA==
X-Gm-Message-State: AA+aEWbgAvJwNxdCEMqLrZ5bnU/p7i2rrWRNXQPnHXY0IDdlauEDC8t3
	eRAMek/c4wJ43kMbrDGTKhAWlqaOJ7wQuQmuiJVU25xl8sn2bus=
X-Received: by 2002:a63:2c0e:: with SMTP id s14mr430502pgs.132.1542685652794;
        Mon, 19 Nov 2018 19:47:32 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:d106:0:0:0:0 with SMTP id l6-v6csp100557pju;
        Mon, 19 Nov 2018 19:47:31 -0800 (PST)
X-Google-Smtp-Source: AFSGD/WmgnTPW90GfH9OPthLH9Q0S2asQK9eLbQ1wG+xsW7JJW5T3j2QtxZjppY63xJNj2IcKikm
X-Received: by 2002:a17:902:b611:: with SMTP id b17-v6mr477274pls.31.1542685651478;
        Mon, 19 Nov 2018 19:47:31 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542685651; cv=none;
        d=google.com; s=arc-20160816;
        b=ucXJrr2u7Dys6vdTQbuSr/oMvc15EoiE385wtGBuW8n0RmZB44OoKCByK0z5F5bAQg
         JNNGM7EebV4hub2XnYs3hRIpHJO4YYO0elMZ5NHu9LjnLj7ZmTf6L4bBnRgBMFAnauLc
         P58jkpOhRPrXZXSOsCDlTOVjBzp56A6TwmO/E7jDMIIGWH27m5RbMyG8b2ySaqgQDseD
         hfjszuL8IGPLhrDdvU9U4AyV2sNFUV3Wnlcdmpr3KM81Hoz22p5cA8SDwQ4SELneS4PM
         CAMrzI6BUvdH6t4GlW6vNi+EfR7/oHgeckfh/EFHSJggl+Dq1V0v9reMDSx7gcDOJQl9
         6bDA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:mime-version:user-agent:references
         :message-id:in-reply-to:subject:cc:to:from:date:dkim-signature;
        bh=Vffzc8/Krv4oxHxEle6OPcQMi0BSshGPW06vksyMUnY=;
        b=EGyBy32v75j9RygSwFPjC0IDnniZk/9IJGwjn18GlNXcGj+OmM4vWuhPm/G9g89gjL
         A8gcW8+uB6Oe7erN97L1k9lqyxrK7JYAT7xypMCxEeA+FIQmfi297TIX9JUzQlyAvm07
         gXDw3s9+jMVHSnwd5zURO7NEVdS8CHfOLFTeCsUYr5CVXIG7YUud+0R2ZdoIYlGngOjM
         5gRcj+CD17cTjdjCvUxcwY/yCy0WAb8qjHQw0Z6KxDeFzoV8FLoK/7CYk3tm/Rye6Cx2
         CtxeSZvvWjQZb+Sz3EaRtouaU2jIPuu1EMji/fuOeIu9Ps+82fRJWhGcksZ4o+5pMvNt
         OqHw==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@linaro.org header.s=google header.b=ik0VpDYg;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;
       dmarc=pass (p=NONE sp=NONE dis=NONE) header.from=linaro.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id r6si24457990pli.248.2018.11.19.19.47.14;
        Mon, 19 Nov 2018 19:47:31 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730600AbeKTOOG (ORCPT <rfc822;pengtsinv@gmail.com> + 99 others);
        Tue, 20 Nov 2018 09:14:06 -0500
Received: from mail-qk1-f194.google.com ([209.85.222.194]:42476 "EHLO
        mail-qk1-f194.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1730224AbeKTOOG (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 20 Nov 2018 09:14:06 -0500
Received: by mail-qk1-f194.google.com with SMTP id m5so776066qka.9
        for <linux-kernel@vger.kernel.org>; Mon, 19 Nov 2018 19:47:05 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=date:from:to:cc:subject:in-reply-to:message-id:references
         :user-agent:mime-version;
        bh=Vffzc8/Krv4oxHxEle6OPcQMi0BSshGPW06vksyMUnY=;
        b=ik0VpDYgvNLIY2tAf5zgRfCIp+OP9mTC7WIdCX9SrDwSJAt/wFlXdIGNINFQIRmC2r
         6nK+VkjlMpbngJcvk2WYPgEZcFMVSWEVlBwDFE16I0JHNQ/5xJ2BFHHv1SKkortbvKgE
         XSwMVcppVcSiXGdFn06WjuWtrRVzSVdkcMMm0=
X-Received: by 2002:ac8:7616:: with SMTP id t22mr335563qtq.375.1542685625250;
        Mon, 19 Nov 2018 19:47:05 -0800 (PST)
Received: from xanadu.home (modemcable228.104-82-70.mc.videotron.ca. [70.82.104.228])
        by smtp.gmail.com with ESMTPSA id o128sm11651876qkc.7.2018.11.19.19.47.01
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Mon, 19 Nov 2018 19:47:04 -0800 (PST)
Date: Mon, 19 Nov 2018 22:47:00 -0500 (EST)
From: Nicolas Pitre <nicolas.pitre@linaro.org>
To: Masahiro Yamada <yamada.masahiro@socionext.com>
cc: linux-kbuild@vger.kernel.org, Sam Ravnborg <sam@ravnborg.org>,
        Rasmus Villemoes <linux@rasmusvillemoes.dk>,
        linux-arch@vger.kernel.org, Arnd Bergmann <arnd@arndb.de>,
        Michael Ellerman <mpe@ellerman.id.au>,
        linux-kernel@vger.kernel.org,
        Michal Marek <michal.lkml@markovi.net>,
        Will Deacon <will.deacon@arm.com>,
        Ard Biesheuvel <ard.biesheuvel@linaro.org>,
        Andrew Morton <akpm@linux-foundation.org>
Subject: Re: [PATCH v2 5/9] kbuild: simplify dependency generation for
 CONFIG_TRIM_UNUSED_KSYMS
In-Reply-To: <1542675930-21114-6-git-send-email-yamada.masahiro@socionext.com>
Message-ID: <nycvar.YSQ.7.76.1811192245001.20453@knanqh.ubzr>
References: <1542675930-21114-1-git-send-email-yamada.masahiro@socionext.com> <1542675930-21114-6-git-send-email-yamada.masahiro@socionext.com>
User-Agent: Alpine 2.21 (LFD 202 2017-01-01)
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwB3XUnVg_NbWcxbAA--.109S3
Authentication-Results: mail-app4; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoW3Xw4Uuw17Xry5AFW8Kr15urg_yoWfuF17pa
	n0kFW3GF97JryUXw1xCr42gFy5Jw1vgrWI9FWrWFy8A3srtFs7KrZayr1rK34v9FWjyr4j
	qr9I9a98Gr4kJFJanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUPFb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Xr0_Ar1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1l84ACjcxK6I8E
	87Iv67AKxVW0oVCq3wA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_GcCE3s1le2I262IYc4CY6c
	8Ij28IcVAaY2xG8wAqx4xG64xvF2IEw4CE5I8CrVC2j2WlYx0E2Ix0cI8IcVAFwI0_Jr0_
	Jr4lYx0Ex4A2jsIE14v26F4j6r4UJwAm72CE4IkC6x0Yz7v_Jr0_Gr1lF7xvr2IY64vIr4
	1l7I0Y6sxI4wCY1x0264kExVAvwVAq07x20xylc7Ca8VAvwVCFzxkY4VCF77xAMxkIecxE
	wVCI4VW8GwCY0x0Ix7I2Y4AK64vIr41lcIIF0xvE2Ix0cI8IcVAFwI0_Jr0_JF4lcIIF0x
	vE2Ix0cI8IcVCY1x0267AKxVWUJVW8JwCYIxAIcVC2z280aVAFwI0_GcCE3s1lcIIF0xvE
	x4A2jsIEc7CjxVAFwI0_GcCE3s1l42xK82IYc2Ij64vIr41l42xK82IY64kExVAvwVAq07
	x20xyl4x8a6x804xWl4I8I3I0E4IkC6x0Yz7v_Jr0_Gr1lx2IqxVAqx4xG67AKxVWUJVWU
	GwC20s026x8GjcxK67AKxVWUGVWUWwC2zVAF1VAY17CE14v26r1q6r43MIIYrxkI7VAKI4
	8JMIIF0xvE42xK8VAvwI8IcIk0rVWrJr0_WFyUJbIYCTnIWIevJa73UjIFyTuYvjxUQK0m
	UUUUU

On Tue, 20 Nov 2018, Masahiro Yamada wrote:

> My main motivation of this commit is to clean up scripts/Kbuild.include
> and scripts/Makefile.build.
> 
> Currently, CONFIG_TRIM_UNUSED_KSYMS works with a tricky gimmick;
> possibly exported symbols are detected by letting $(CPP) replace
> EXPORT_SYMBOL* with a special string '=== __KSYM_*===', which is
> post-processed by sed, and passed to fixdep. The extra preprocessing
> is costly, and hacking cmd_and_fixdep is ugly.
> 
> I came up with a new way to find exported symbols; insert a dummy
> symbol __ksym_marker_* to each potentially exported symbol. Those
> dummy symbols are picked up by $(NM), post-processed by sed, then
> appended to .*.cmd files. I collected the post-process part to a
> new shell script scripts/gen_ksymdeps.sh for readability. The dummy
> symbols are put into the .discard.* section so that the linker
> script rips them off the final vmlinux or modules.
> 
> A nice side-effect is building with CONFIG_TRIM_UNUSED_KSYMS will
> be much faster.
> 
> Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>

Nice work.

Reviewed-by: Nicolas Pitre <nico@linaro.org>

> ---
> 
> Changes in v2:
>   - Let gen_ksymdeps.sh add dependencies to .*.cmd file directly
>   - Fix typos
> 
>  include/asm-generic/export.h | 13 ++++++++-----
>  include/linux/export.h       | 18 +++++++++---------
>  scripts/Kbuild.include       | 28 ----------------------------
>  scripts/Makefile.build       |  7 +++++++
>  scripts/basic/fixdep.c       | 31 ++++---------------------------
>  scripts/gen_ksymdeps.sh      | 25 +++++++++++++++++++++++++
>  6 files changed, 53 insertions(+), 69 deletions(-)
>  create mode 100755 scripts/gen_ksymdeps.sh
> 
> diff --git a/include/asm-generic/export.h b/include/asm-generic/export.h
> index 4d73e6e..294d6ae 100644
> --- a/include/asm-generic/export.h
> +++ b/include/asm-generic/export.h
> @@ -59,16 +59,19 @@ __kcrctab_\name:
>  .endm
>  #undef __put
>  
> -#if defined(__KSYM_DEPS__)
> -
> -#define __EXPORT_SYMBOL(sym, val, sec)	=== __KSYM_##sym ===
> -
> -#elif defined(CONFIG_TRIM_UNUSED_KSYMS)
> +#if defined(CONFIG_TRIM_UNUSED_KSYMS)
>  
>  #include <linux/kconfig.h>
>  #include <generated/autoksyms.h>
>  
> +.macro __ksym_marker sym
> +	.section ".discard.ksym","a"
> +__ksym_marker_\sym:
> +	 .previous
> +.endm
> +
>  #define __EXPORT_SYMBOL(sym, val, sec)				\
> +	__ksym_marker sym;					\
>  	__cond_export_sym(sym, val, sec, __is_defined(__KSYM_##sym))
>  #define __cond_export_sym(sym, val, sec, conf)			\
>  	___cond_export_sym(sym, val, sec, conf)
> diff --git a/include/linux/export.h b/include/linux/export.h
> index ce764a5..fd8711e 100644
> --- a/include/linux/export.h
> +++ b/include/linux/export.h
> @@ -92,22 +92,22 @@ struct kernel_symbol {
>   */
>  #define __EXPORT_SYMBOL(sym, sec)
>  
> -#elif defined(__KSYM_DEPS__)
> +#elif defined(CONFIG_TRIM_UNUSED_KSYMS)
> +
> +#include <generated/autoksyms.h>
>  
>  /*
>   * For fine grained build dependencies, we want to tell the build system
>   * about each possible exported symbol even if they're not actually exported.
> - * We use a string pattern that is unlikely to be valid code that the build
> - * system filters out from the preprocessor output (see ksym_dep_filter
> - * in scripts/Kbuild.include).
> + * We use a symbol pattern __ksym_marker_<symbol> that the build system filters
> + * from the $(NM) output (see scripts/gen_ksymdeps.sh). These symbols are
> + * discarded in the final link stage.
>   */
> -#define __EXPORT_SYMBOL(sym, sec)	=== __KSYM_##sym ===
> -
> -#elif defined(CONFIG_TRIM_UNUSED_KSYMS)
> -
> -#include <generated/autoksyms.h>
> +#define __ksym_marker(sym)	\
> +	static int __ksym_marker_##sym[0] __section(".discard.ksym") __used
>  
>  #define __EXPORT_SYMBOL(sym, sec)				\
> +	__ksym_marker(sym);					\
>  	__cond_export_sym(sym, sec, __is_defined(__KSYM_##sym))
>  #define __cond_export_sym(sym, sec, conf)			\
>  	___cond_export_sym(sym, sec, conf)
> diff --git a/scripts/Kbuild.include b/scripts/Kbuild.include
> index 6cf6a8b..4b943f4 100644
> --- a/scripts/Kbuild.include
> +++ b/scripts/Kbuild.include
> @@ -260,39 +260,11 @@ if_changed_dep = $(if $(strip $(any-prereq) $(arg-check) ),                  \
>  	@set -e;                                                             \
>  	$(cmd_and_fixdep), @:)
>  
> -ifndef CONFIG_TRIM_UNUSED_KSYMS
> -
>  cmd_and_fixdep =                                                             \
>  	$(echo-cmd) $(cmd_$(1));                                             \
>  	scripts/basic/fixdep $(depfile) $@ '$(make-cmd)' > $(dot-target).cmd;\
>  	rm -f $(depfile);
>  
> -else
> -
> -# Filter out exported kernel symbol names from the preprocessor output.
> -# See also __KSYM_DEPS__ in include/linux/export.h.
> -# We disable the depfile generation here, so as not to overwrite the existing
> -# depfile while fixdep is parsing it.
> -flags_nodeps = $(filter-out -Wp$(comma)-M%, $($(1)))
> -ksym_dep_filter =                                                            \
> -	case "$(1)" in                                                       \
> -	  cc_*_c|cpp_i_c)                                                    \
> -	    $(CPP) $(call flags_nodeps,c_flags) -D__KSYM_DEPS__ $< ;;        \
> -	  as_*_S|cpp_s_S)                                                    \
> -	    $(CPP) $(call flags_nodeps,a_flags) -D__KSYM_DEPS__ $< ;;        \
> -	  boot*|build*|cpp_its_S|*cpp_lds_S|dtc|host*|vdso*) : ;;            \
> -	  *) echo "Don't know how to preprocess $(1)" >&2; false ;;          \
> -	esac | tr ";" "\n" | sed -n 's/^.*=== __KSYM_\(.*\) ===.*$$/_\1/p'
> -
> -cmd_and_fixdep =                                                             \
> -	$(echo-cmd) $(cmd_$(1));                                             \
> -	$(ksym_dep_filter) |                                                 \
> -		scripts/basic/fixdep -e $(depfile) $@ '$(make-cmd)'          \
> -			> $(dot-target).cmd;	                             \
> -	rm -f $(depfile);
> -
> -endif
> -
>  # Usage: $(call if_changed_rule,foo)
>  # Will check if $(cmd_foo) or any of the prerequisites changed,
>  # and if so will execute $(rule_foo).
> diff --git a/scripts/Makefile.build b/scripts/Makefile.build
> index 4f94579..c23ee45 100644
> --- a/scripts/Makefile.build
> +++ b/scripts/Makefile.build
> @@ -254,9 +254,15 @@ objtool_dep = $(objtool_obj)					\
>  	      $(wildcard include/config/orc/unwinder.h		\
>  			 include/config/stack/validation.h)
>  
> +ifdef CONFIG_TRIM_UNUSED_KSYMS
> +cmd_gen_ksymdeps = \
> +	$(CONFIG_SHELL) $(srctree)/scripts/gen_ksymdeps.sh $@ >> $(dot-target).cmd;
> +endif
> +
>  define rule_cc_o_c
>  	$(call echo-cmd,checksrc) $(cmd_checksrc)			  \
>  	$(call cmd_and_fixdep,cc_o_c)					  \
> +	$(cmd_gen_ksymdeps)						  \
>  	$(cmd_checkdoc)							  \
>  	$(call echo-cmd,objtool) $(cmd_objtool)				  \
>  	$(cmd_modversions_c)						  \
> @@ -265,6 +271,7 @@ endef
>  
>  define rule_as_o_S
>  	$(call cmd_and_fixdep,as_o_S)					  \
> +	$(cmd_gen_ksymdeps)						  \
>  	$(call echo-cmd,objtool) $(cmd_objtool)				  \
>  	$(cmd_modversions_S)
>  endef
> diff --git a/scripts/basic/fixdep.c b/scripts/basic/fixdep.c
> index 850966f3..facbd60 100644
> --- a/scripts/basic/fixdep.c
> +++ b/scripts/basic/fixdep.c
> @@ -105,8 +105,7 @@
>  
>  static void usage(void)
>  {
> -	fprintf(stderr, "Usage: fixdep [-e] <depfile> <target> <cmdline>\n");
> -	fprintf(stderr, " -e  insert extra dependencies given on stdin\n");
> +	fprintf(stderr, "Usage: fixdep <depfile> <target> <cmdline>\n");
>  	exit(1);
>  }
>  
> @@ -131,21 +130,6 @@ static void print_dep(const char *m, int slen, const char *dir)
>  	printf(".h) \\\n");
>  }
>  
> -static void do_extra_deps(void)
> -{
> -	char buf[80];
> -
> -	while (fgets(buf, sizeof(buf), stdin)) {
> -		int len = strlen(buf);
> -
> -		if (len < 2 || buf[len - 1] != '\n') {
> -			fprintf(stderr, "fixdep: bad data on stdin\n");
> -			exit(1);
> -		}
> -		print_dep(buf, len - 1, "include/ksym");
> -	}
> -}
> -
>  struct item {
>  	struct item	*next;
>  	unsigned int	len;
> @@ -293,7 +277,7 @@ static int is_ignored_file(const char *s, int len)
>   * assignments are parsed not only by make, but also by the rather simple
>   * parser in scripts/mod/sumversion.c.
>   */
> -static void parse_dep_file(char *m, const char *target, int insert_extra_deps)
> +static void parse_dep_file(char *m, const char *target)
>  {
>  	char *p;
>  	int is_last, is_target;
> @@ -369,9 +353,6 @@ static void parse_dep_file(char *m, const char *target, int insert_extra_deps)
>  		exit(1);
>  	}
>  
> -	if (insert_extra_deps)
> -		do_extra_deps();
> -
>  	printf("\n%s: $(deps_%s)\n\n", target, target);
>  	printf("$(deps_%s):\n", target);
>  }
> @@ -379,13 +360,9 @@ static void parse_dep_file(char *m, const char *target, int insert_extra_deps)
>  int main(int argc, char *argv[])
>  {
>  	const char *depfile, *target, *cmdline;
> -	int insert_extra_deps = 0;
>  	void *buf;
>  
> -	if (argc == 5 && !strcmp(argv[1], "-e")) {
> -		insert_extra_deps = 1;
> -		argv++;
> -	} else if (argc != 4)
> +	if (argc != 4)
>  		usage();
>  
>  	depfile = argv[1];
> @@ -395,7 +372,7 @@ int main(int argc, char *argv[])
>  	printf("cmd_%s := %s\n\n", target, cmdline);
>  
>  	buf = read_file(depfile);
> -	parse_dep_file(buf, target, insert_extra_deps);
> +	parse_dep_file(buf, target);
>  	free(buf);
>  
>  	return 0;
> diff --git a/scripts/gen_ksymdeps.sh b/scripts/gen_ksymdeps.sh
> new file mode 100755
> index 0000000..1324986
> --- /dev/null
> +++ b/scripts/gen_ksymdeps.sh
> @@ -0,0 +1,25 @@
> +#!/bin/sh
> +# SPDX-License-Identifier: GPL-2.0
> +
> +set -e
> +
> +# List of exported symbols
> +ksyms=$($NM $1 | sed -n 's/.*__ksym_marker_\(.*\)/\1/p' | tr A-Z a-z)
> +
> +if [ -z "$ksyms" ]; then
> +	exit 0
> +fi
> +
> +echo
> +echo "ksymdeps_$1 := \\"
> +
> +for s in $ksyms
> +do
> +	echo $s | sed -e 's:^_*:    $(wildcard include/ksym/:' \
> +			-e 's:__*:/:g' -e 's/$/.h) \\/'
> +done
> +
> +echo
> +echo "$1: \$(ksymdeps_$1)"
> +echo
> +echo "\$(ksymdeps_$1):"
> -- 
> 2.7.4
> 
> 
