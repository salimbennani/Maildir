Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 22 Nov 2018 15:26:52 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 35F7F580474
	for <like.xu@linux.intel.com>; Wed, 21 Nov 2018 23:26:33 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 21 Nov 2018 23:26:32 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AANmy5BMHb6hm8A8p2xEl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0I/rzrarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZQMhRWSxPDICy?=
 =?us-ascii?q?YYQBAOUOP/pXoYbgqVsWrxawBwahCP7hxzNUmHD2xrY30/g4EQzcwAAsA9wDvX?=
 =?us-ascii?q?TSod7oNKkSS+e1zKzQwDjddfRZxC396InUfR85p/+DQ6p/f8vWyUY1CwPKkE+Q?=
 =?us-ascii?q?opHiMjyJ0uQNvHOW7+l6WuKolmErsQZxoiKgxso1jITCm4Ebykjc+Cln3Io4Js?=
 =?us-ascii?q?e0RFNmbdOnCpdcqS+XOotsTs8/QWxkoCI3xqEctZO4eCUG0okryhreZvCdboSE?=
 =?us-ascii?q?/w7vWeCMKjlinn1lYqiwhxOq/Eig1OL8Us603U5OripEidnMqmsN2wbc6siBV/?=
 =?us-ascii?q?tx5ECh2SyA1wzL6+FEJ147lbbDJpI/3rI9lYAfvVneEiL1gkn6kqGbe0U+9uS1?=
 =?us-ascii?q?6enrerDmqYWdN49whAH+KKMumsmnDOQhLAcOWnWb9f2h27L94032XrFKguQtna?=
 =?us-ascii?q?nerZDaI9gUqbCiAwNS1oYj6hW/ACm83NUXgHkKNFZFeBOBj4j0NFDCOvH4DfGj?=
 =?us-ascii?q?g1uylDdn3ezJPrrkApjWKHjDl7Hhfbl7605B0gYzyspf551MBrEbPP3zQlPxtM?=
 =?us-ascii?q?DfDhIhNwy0wuXnB8tn2oIRRGKCGauZMKLUsV+V6eMjOeiMZIkJuDnjL/gp/eLh?=
 =?us-ascii?q?jXg8mQxVQK+ywJFCaGykBu80ZAKdYGHwmZEHFmEFuBd4S/blz1iLUDpWbnD1WL?=
 =?us-ascii?q?og5zY9E8W/AILeA4ygnrGFjxq9BYBcM2VPC1SQFiXxeoCZHvsBdi+WZ9VsiyEJ?=
 =?us-ascii?q?TqSJTYgn2hez8gjgxO18M+DW9yYE4I/lz8V//ObJlBs/pgBzWuiUzWCBB051lH?=
 =?us-ascii?q?gPQXdi0KlhoEBVxVaJyq9+xfBCEsRZ6vpTFAY2c5fBmb9UEdf3DylAcs2IQ2GC?=
 =?us-ascii?q?T+KJBjgtQ8h5l9QKbG5+EtKuyBfZ0Hz5UPcui7WXCclsoern1H/rKpM4ki6e2Q?=
 =?us-ascii?q?=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAADWWfZbhxHrdtBiHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBAYEvJQWCOIwQX4sigWglepZAFIFzGBSEQIQMIjQJDQEDAQEBAQE?=
 =?us-ascii?q?BAgETAQEBCgsJCCkvQgEQAYFiBQIDGgEGglsBAQEBAgEBAiQfCikDAgEBAgYBA?=
 =?us-ascii?q?QoSBhwKCAMBOQwOBg0GAgEBAYJRS4F6CAEDAap9M4VAg1mBDYwJEQaBf4ERJwy?=
 =?us-ascii?q?CKjWEQyMBF4VbAokRDoV5ARCGDYpMCYophwAGGIFZiC6ED4JymDCBRoINTTAIg?=
 =?us-ascii?q?yeCJxcSjgtxgQQDhH+GJoF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0ANAADWWfZbhxHrdtBiHAEBAQQBAQcEAQGBUQcBAQsBAYE?=
 =?us-ascii?q?vJQWCOIwQX4sigWglepZAFIFzGBSEQIQMIjQJDQEDAQEBAQEBAgETAQEBCgsJC?=
 =?us-ascii?q?CkvQgEQAYFiBQIDGgEGglsBAQEBAgEBAiQfCikDAgEBAgYBAQoSBhwKCAMBOQw?=
 =?us-ascii?q?OBg0GAgEBAYJRS4F6CAEDAap9M4VAg1mBDYwJEQaBf4ERJwyCKjWEQyMBF4VbA?=
 =?us-ascii?q?okRDoV5ARCGDYpMCYophwAGGIFZiC6ED4JymDCBRoINTTAIgyeCJxcSjgtxgQQ?=
 =?us-ascii?q?DhH+GJoF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,264,1539673200"; 
   d="scan'208";a="139180493"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 21 Nov 2018 23:26:31 -0800
Received: from localhost ([::1]:44430 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gPjNf-00073V-47
	for like.xu@linux.intel.com; Thu, 22 Nov 2018 02:26:31 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:54788)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <clg@kaod.org>) id 1gPjMg-0006eN-It
	for qemu-devel@nongnu.org; Thu, 22 Nov 2018 02:25:34 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <clg@kaod.org>) id 1gPjMa-0007Fu-Sx
	for qemu-devel@nongnu.org; Thu, 22 Nov 2018 02:25:30 -0500
Received: from 11.mo6.mail-out.ovh.net ([188.165.38.119]:42001)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <clg@kaod.org>) id 1gPjMX-00072X-2d
	for qemu-devel@nongnu.org; Thu, 22 Nov 2018 02:25:22 -0500
Received: from player157.ha.ovh.net (unknown [10.109.159.69])
	by mo6.mail-out.ovh.net (Postfix) with ESMTP id 1B2E119AB85
	for <qemu-devel@nongnu.org>; Thu, 22 Nov 2018 08:25:12 +0100 (CET)
Received: from kaod.org (lfbn-1-10605-110.w90-89.abo.wanadoo.fr
	[90.89.196.110]) (Authenticated sender: postmaster@kaod.org)
	by player157.ha.ovh.net (Postfix) with ESMTPSA id 842EC51219;
	Thu, 22 Nov 2018 07:25:07 +0000 (UTC)
To: David Gibson <david@gibson.dropbear.id.au>
References: <20181116105729.23240-1-clg@kaod.org>
	<20181116105729.23240-2-clg@kaod.org>
	<20181122030516.GB10448@umbus.fritz.box>
From: =?UTF-8?Q?C=c3=a9dric_Le_Goater?= <clg@kaod.org>
Message-ID: <658dc2ad-e862-4777-9ed5-1ba82a074aa6@kaod.org>
Date: Thu, 22 Nov 2018 08:25:06 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
	Thunderbird/60.3.0
MIME-Version: 1.0
In-Reply-To: <20181122030516.GB10448@umbus.fritz.box>
Content-Type: text/plain; charset=windows-1252
Content-Language: en-US
X-Ovh-Tracer-Id: 6473924468150274929
X-VR-SPAMSTATE: OK
X-VR-SPAMSCORE: -100
X-VR-SPAMCAUSE: gggruggvucftvghtrhhoucdtuddrgedtkedruddtkedguddtkecutefuodetggdotefrodftvfcurfhrohhfihhlvgemucfqggfjpdevjffgvefmvefgnecuuegrihhlohhuthemucehtddtnecusecvtfgvtghiphhivghnthhsucdlqddutddtmd
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 188.165.38.119
Subject: Re: [Qemu-devel] [PATCH v5 01/36] ppc/xive: introduce a XIVE
 interrupt source model
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: qemu-ppc@nongnu.org, qemu-devel@nongnu.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On 11/22/18 4:05 AM, David Gibson wrote:
> On Fri, Nov 16, 2018 at 11:56:54AM +0100, C=E9dric Le Goater wrote:
>> The first sub-engine of the overall XIVE architecture is the Interrupt
>> Virtualization Source Engine (IVSE). An IVSE can be integrated into
>> another logic, like in a PCI PHB or in the main interrupt controller
>> to manage IPIs.
>>
>> Each IVSE instance is associated with an Event State Buffer (ESB) that
>> contains a two bit state entry for each possible event source. When an
>> event is signaled to the IVSE, by MMIO or some other means, the
>> associated interrupt state bits are fetched from the ESB and
>> modified. Depending on the resulting ESB state, the event is forwarded
>> to the IVRE sub-engine of the controller doing the routing.
>>
>> Each supported ESB entry is associated with either a single or a
>> even/odd pair of pages which provides commands to manage the source:
>> to EOI, to turn off the source for instance.
>>
>> On a sPAPR machine, the O/S will obtain the page address of the ESB
>> entry associated with a source and its characteristic using the
>> H_INT_GET_SOURCE_INFO hcall. On PowerNV, a similar OPAL call is used.
>>
>> The xive_source_notify() routine is in charge forwarding the source
>> event notification to the routing engine. It will be filled later on.
>>
>> Signed-off-by: C=E9dric Le Goater <clg@kaod.org>
>=20
> Ok, this is looking basically pretty good.  Few details to query
> below.
>=20
>=20
>> ---
>>  default-configs/ppc64-softmmu.mak |   1 +
>>  include/hw/ppc/xive.h             | 130 ++++++++++
>>  hw/intc/xive.c                    | 379 +++++++++++++++++++++++++++++=
+
>>  hw/intc/Makefile.objs             |   1 +
>>  4 files changed, 511 insertions(+)
>>  create mode 100644 include/hw/ppc/xive.h
>>  create mode 100644 hw/intc/xive.c
>>
>> diff --git a/default-configs/ppc64-softmmu.mak b/default-configs/ppc64=
-softmmu.mak
>> index aec2855750d6..2d1e7c5c4668 100644
>> --- a/default-configs/ppc64-softmmu.mak
>> +++ b/default-configs/ppc64-softmmu.mak
>> @@ -16,6 +16,7 @@ CONFIG_VIRTIO_VGA=3Dy
>>  CONFIG_XICS=3D$(CONFIG_PSERIES)
>>  CONFIG_XICS_SPAPR=3D$(CONFIG_PSERIES)
>>  CONFIG_XICS_KVM=3D$(call land,$(CONFIG_PSERIES),$(CONFIG_KVM))
>> +CONFIG_XIVE=3D$(CONFIG_PSERIES)
>>  CONFIG_MEM_DEVICE=3Dy
>>  CONFIG_DIMM=3Dy
>>  CONFIG_SPAPR_RNG=3Dy
>> diff --git a/include/hw/ppc/xive.h b/include/hw/ppc/xive.h
>> new file mode 100644
>> index 000000000000..5fec4b08705d
>> --- /dev/null
>> +++ b/include/hw/ppc/xive.h
>> @@ -0,0 +1,130 @@
>> +/*
>> + * QEMU PowerPC XIVE interrupt controller model
>> + *
>> + * Copyright (c) 2017-2018, IBM Corporation.
>> + *
>> + * This code is licensed under the GPL version 2 or later. See the
>> + * COPYING file in the top-level directory.
>=20
> A cheat sheet in the top of this header with the old and new XIVE
> terms would quite nice to have.

Yes. It's a good place. I will put the XIVE acronyms here :
    =20
     EA		Event Assignment
     EISN	Effective Interrupt Source Number
     END	Event Notification Descriptor
     ESB	Event State Buffer
     EQ		Event Queue
     LISN	Logical Interrupt Source Number
     NVT	Notification Virtual Target
     TIMA	Thread Interrupt Management Area
     ...


>> + */
>> +
>> +#ifndef PPC_XIVE_H
>> +#define PPC_XIVE_H
>> +
>> +#include "hw/sysbus.h"
>=20
> So, I'm a bit dubious about making the XiveSource a SysBus device -
> I'm concerned it won't play well with tying it into the other devices
> like PHB that "own" it in real hardware.

It does but I can take a look at changing it to a DeviceState. The=20
reset handlers might be a concern.

> I think we'd be better off making it a direct descendent of
> TYPE_DEVICE which constructs the MMIO region, but doesn't map it.

At a moment, I started working on a XiveESB object doing what I think=20
you are suggesting and I removed it. I am reluctant adding more=20
complexity now, the patchset is just growing and growing ...=20

But I agree there are fundamentals to get right for KVM. Let's talk=20
about it after you have looked at the overall patchset, at least up=20
to KVM initial support.

> Then we can havea SysBusDevice (and/or other) wrapper which
> instantiates the XiveSource core and maps it into somewhere
> accessible.

The XIVE controller model does the mapping of the source currently.
In the case of sPAPR, the controller model controls the TIMA and=20
for PowerNV, there are quite few others MMIO regions to handle.

>=20
>> +
>> +/*
>> + * XIVE Interrupt Source
>> + */
>> +
>> +#define TYPE_XIVE_SOURCE "xive-source"
>> +#define XIVE_SOURCE(obj) OBJECT_CHECK(XiveSource, (obj), TYPE_XIVE_SO=
URCE)
>> +
>> +/*
>> + * XIVE Interrupt Source characteristics, which define how the ESB ar=
e
>> + * controlled.
>> + */
>> +#define XIVE_SRC_H_INT_ESB     0x1 /* ESB managed with hcall H_INT_ES=
B */
>> +#define XIVE_SRC_STORE_EOI     0x2 /* Store EOI supported */
>> +
>> +typedef struct XiveSource {
>> +    SysBusDevice parent;
>> +
>> +    /* IRQs */
>> +    uint32_t        nr_irqs;
>> +    qemu_irq        *qirqs;
>> +
>> +    /* PQ bits */
>> +    uint8_t         *status;
>> +
>> +    /* ESB memory region */
>> +    uint64_t        esb_flags;
>> +    uint32_t        esb_shift;
>> +    MemoryRegion    esb_mmio;
>> +} XiveSource;
>> +
>> +/*
>> + * ESB MMIO setting. Can be one page, for both source triggering and
>> + * source management, or two different pages. See below for magic
>> + * values.
>> + */
>> +#define XIVE_ESB_4K          12 /* PSI HB only */
>> +#define XIVE_ESB_4K_2PAGE    13
>> +#define XIVE_ESB_64K         16
>> +#define XIVE_ESB_64K_2PAGE   17
>> +
>> +static inline bool xive_source_esb_has_2page(XiveSource *xsrc)
>> +{
>> +    return xsrc->esb_shift =3D=3D XIVE_ESB_64K_2PAGE ||
>> +        xsrc->esb_shift =3D=3D XIVE_ESB_4K_2PAGE;
>> +}
>> +
>> +/* The trigger page is always the first/even page */
>> +static inline hwaddr xive_source_esb_page(XiveSource *xsrc, uint32_t =
srcno)
>=20
> This function doesn't appear to be used anywhere except..

It's used in patch 16 adding the hcalls also.

>> +{
>> +    assert(srcno < xsrc->nr_irqs);
>> +    return (1ull << xsrc->esb_shift) * srcno;
>> +}
>> +
>> +/* In a two pages ESB MMIO setting, the odd page is for management */
>> +static inline hwaddr xive_source_esb_mgmt(XiveSource *xsrc, int srcno=
)
>=20
>=20
> ..here, and this function doesn't appear to be used anywhere.

It's used in patch 16 adding the hcalls and patch 23 for KVM.

This is basic ESB support which I thought belong to the patch on sources.
=20
>=20
>> +{
>> +    hwaddr addr =3D xive_source_esb_page(xsrc, srcno);
>> +
>> +    if (xive_source_esb_has_2page(xsrc)) {
>> +        addr +=3D (1 << (xsrc->esb_shift - 1));
>> +    }
>> +
>> +    return addr;
>> +}
>> +
>> +/*
>> + * Each interrupt source has a 2-bit state machine which can be
>> + * controlled by MMIO. P indicates that an interrupt is pending (has
>> + * been sent to a queue and is waiting for an EOI). Q indicates that
>> + * the interrupt has been triggered while pending.
>> + *
>> + * This acts as a coalescing mechanism in order to guarantee that a
>> + * given interrupt only occurs at most once in a queue.
>> + *
>> + * When doing an EOI, the Q bit will indicate if the interrupt
>> + * needs to be re-triggered.
>> + */
>> +#define XIVE_ESB_VAL_P        0x2
>> +#define XIVE_ESB_VAL_Q        0x1
>> +
>> +#define XIVE_ESB_RESET        0x0
>> +#define XIVE_ESB_PENDING      XIVE_ESB_VAL_P
>> +#define XIVE_ESB_QUEUED       (XIVE_ESB_VAL_P | XIVE_ESB_VAL_Q)
>> +#define XIVE_ESB_OFF          XIVE_ESB_VAL_Q
>> +
>> +/*
>> + * "magic" Event State Buffer (ESB) MMIO offsets.
>> + *
>> + * The following offsets into the ESB MMIO allow to read or manipulat=
e
>> + * the PQ bits. They must be used with an 8-byte load instruction.
>> + * They all return the previous state of the interrupt (atomically).
>> + *
>> + * Additionally, some ESB pages support doing an EOI via a store and
>> + * some ESBs support doing a trigger via a separate trigger page.
>> + */
>> +#define XIVE_ESB_STORE_EOI      0x400 /* Store */
>> +#define XIVE_ESB_LOAD_EOI       0x000 /* Load */
>> +#define XIVE_ESB_GET            0x800 /* Load */
>> +#define XIVE_ESB_SET_PQ_00      0xc00 /* Load */
>> +#define XIVE_ESB_SET_PQ_01      0xd00 /* Load */
>> +#define XIVE_ESB_SET_PQ_10      0xe00 /* Load */
>> +#define XIVE_ESB_SET_PQ_11      0xf00 /* Load */
>> +
>> +uint8_t xive_source_esb_get(XiveSource *xsrc, uint32_t srcno);
>> +uint8_t xive_source_esb_set(XiveSource *xsrc, uint32_t srcno, uint8_t=
 pq);
>> +
>> +void xive_source_pic_print_info(XiveSource *xsrc, uint32_t offset,
>> +                                Monitor *mon);
>> +
>> +static inline qemu_irq xive_source_qirq(XiveSource *xsrc, uint32_t sr=
cno)
>> +{
>> +    assert(srcno < xsrc->nr_irqs);
>> +    return xsrc->qirqs[srcno];
>> +}
>> +
>> +#endif /* PPC_XIVE_H */
>> diff --git a/hw/intc/xive.c b/hw/intc/xive.c
>> new file mode 100644
>> index 000000000000..f7621f84828c
>> --- /dev/null
>> +++ b/hw/intc/xive.c
>> @@ -0,0 +1,379 @@
>> +/*
>> + * QEMU PowerPC XIVE interrupt controller model
>> + *
>> + * Copyright (c) 2017-2018, IBM Corporation.
>> + *
>> + * This code is licensed under the GPL version 2 or later. See the
>> + * COPYING file in the top-level directory.
>> + */
>> +
>> +#include "qemu/osdep.h"
>> +#include "qemu/log.h"
>> +#include "qapi/error.h"
>> +#include "target/ppc/cpu.h"
>> +#include "sysemu/cpus.h"
>> +#include "sysemu/dma.h"
>> +#include "monitor/monitor.h"
>> +#include "hw/ppc/xive.h"
>> +
>> +/*
>> + * XIVE ESB helpers
>> + */
>> +
>> +static uint8_t xive_esb_set(uint8_t *pq, uint8_t value)
>> +{
>> +    uint8_t old_pq =3D *pq & 0x3;
>> +
>> +    *pq &=3D ~0x3;
>> +    *pq |=3D value & 0x3;
>> +
>> +    return old_pq;
>> +}
>> +
>> +static bool xive_esb_trigger(uint8_t *pq)
>> +{
>> +    uint8_t old_pq =3D *pq & 0x3;
>> +
>> +    switch (old_pq) {
>> +    case XIVE_ESB_RESET:
>> +        xive_esb_set(pq, XIVE_ESB_PENDING);
>> +        return true;
>> +    case XIVE_ESB_PENDING:
>> +    case XIVE_ESB_QUEUED:
>> +        xive_esb_set(pq, XIVE_ESB_QUEUED);
>> +        return false;
>> +    case XIVE_ESB_OFF:
>> +        xive_esb_set(pq, XIVE_ESB_OFF);
>> +        return false;
>> +    default:
>> +         g_assert_not_reached();
>> +    }
>> +}
>> +
>> +static bool xive_esb_eoi(uint8_t *pq)
>> +{
>> +    uint8_t old_pq =3D *pq & 0x3;
>> +
>> +    switch (old_pq) {
>> +    case XIVE_ESB_RESET:
>> +    case XIVE_ESB_PENDING:
>> +        xive_esb_set(pq, XIVE_ESB_RESET);
>> +        return false;
>> +    case XIVE_ESB_QUEUED:
>> +        xive_esb_set(pq, XIVE_ESB_PENDING);
>> +        return true;
>> +    case XIVE_ESB_OFF:
>> +        xive_esb_set(pq, XIVE_ESB_OFF);
>> +        return false;
>> +    default:
>> +         g_assert_not_reached();
>> +    }
>> +}
>> +
>> +/*
>> + * XIVE Interrupt Source (or IVSE)
>> + */
>> +
>> +uint8_t xive_source_esb_get(XiveSource *xsrc, uint32_t srcno)
>> +{
>> +    assert(srcno < xsrc->nr_irqs);
>> +
>> +    return xsrc->status[srcno] & 0x3;
>> +}
>> +
>> +uint8_t xive_source_esb_set(XiveSource *xsrc, uint32_t srcno, uint8_t=
 pq)
>> +{
>> +    assert(srcno < xsrc->nr_irqs);
>> +
>> +    return xive_esb_set(&xsrc->status[srcno], pq);
>> +}
>> +
>> +/*
>> + * Returns whether the event notification should be forwarded.
>> + */
>> +static bool xive_source_esb_trigger(XiveSource *xsrc, uint32_t srcno)
>> +{
>> +    assert(srcno < xsrc->nr_irqs);
>> +
>> +    return xive_esb_trigger(&xsrc->status[srcno]);
>> +}
>> +
>> +/*
>> + * Returns whether the event notification should be forwarded.
>> + */
>> +static bool xive_source_esb_eoi(XiveSource *xsrc, uint32_t srcno)
>> +{
>> +    assert(srcno < xsrc->nr_irqs);
>> +
>> +    return xive_esb_eoi(&xsrc->status[srcno]);
>> +}
>> +
>> +/*
>> + * Forward the source event notification to the Router
>> + */
>> +static void xive_source_notify(XiveSource *xsrc, int srcno)
>> +{
>> +
>> +}
>> +
>> +/*
>> + * In a two pages ESB MMIO setting, even page is the trigger page, od=
d
>> + * page is for management
>> + */
>> +static inline bool addr_is_even(hwaddr addr, uint32_t shift)
>> +{
>> +    return !((addr >> shift) & 1);
>> +}
>> +
>> +static inline bool xive_source_is_trigger_page(XiveSource *xsrc, hwad=
dr addr)
>> +{
>> +    return xive_source_esb_has_2page(xsrc) &&
>> +        addr_is_even(addr, xsrc->esb_shift - 1);
>> +}
>> +
>> +/*
>> + * ESB MMIO loads
>> + *                      Trigger page    Management/EOI page
>> + * 2 pages setting      even            odd
>> + *
>> + * 0x000 .. 0x3FF       -1              EOI and return 0|1
>> + * 0x400 .. 0x7FF       -1              EOI and return 0|1
>> + * 0x800 .. 0xBFF       -1              return PQ
>> + * 0xC00 .. 0xCFF       -1              return PQ and atomically PQ=3D=
0
>> + * 0xD00 .. 0xDFF       -1              return PQ and atomically PQ=3D=
0
>> + * 0xE00 .. 0xDFF       -1              return PQ and atomically PQ=3D=
1
>> + * 0xF00 .. 0xDFF       -1              return PQ and atomically PQ=3D=
1
>> + */
>=20
> I can't quite make sense of this table.  What do the -1s represent,

the value returned by the load.

> and how does it relate to the non-2page case?

one page ESB support trigger and management on the same page. So for load=
s,
the odd page behavior applies. =20

>> +static uint64_t xive_source_esb_read(void *opaque, hwaddr addr, unsig=
ned size)
>> +{
>> +    XiveSource *xsrc =3D XIVE_SOURCE(opaque);
>> +    uint32_t offset =3D addr & 0xFFF;
>> +    uint32_t srcno =3D addr >> xsrc->esb_shift;
>> +    uint64_t ret =3D -1;
>> +
>> +    /* In a two pages ESB MMIO setting, trigger page should not be re=
ad */
>> +    if (xive_source_is_trigger_page(xsrc, addr)) {
>> +        qemu_log_mask(LOG_GUEST_ERROR,
>> +                      "XIVE: invalid load on IRQ %d trigger page at "
>> +                      "0x%"HWADDR_PRIx"\n", srcno, addr);
>> +        return -1;
>> +    }
>> +
>> +    switch (offset) {
>> +    case XIVE_ESB_LOAD_EOI ... XIVE_ESB_LOAD_EOI + 0x7FF:
>> +        ret =3D xive_source_esb_eoi(xsrc, srcno);
>> +
>> +        /* Forward the source event notification for routing */
>> +        if (ret) {
>> +            xive_source_notify(xsrc, srcno);
>> +        }
>> +        break;
>> +
>> +    case XIVE_ESB_GET ... XIVE_ESB_GET + 0x3FF:
>> +        ret =3D xive_source_esb_get(xsrc, srcno);
>> +        break;
>> +
>> +    case XIVE_ESB_SET_PQ_00 ... XIVE_ESB_SET_PQ_00 + 0x0FF:
>> +    case XIVE_ESB_SET_PQ_01 ... XIVE_ESB_SET_PQ_01 + 0x0FF:
>> +    case XIVE_ESB_SET_PQ_10 ... XIVE_ESB_SET_PQ_10 + 0x0FF:
>> +    case XIVE_ESB_SET_PQ_11 ... XIVE_ESB_SET_PQ_11 + 0x0FF:
>> +        ret =3D xive_source_esb_set(xsrc, srcno, (offset >> 8) & 0x3)=
;
>> +        break;
>> +    default:
>> +        qemu_log_mask(LOG_GUEST_ERROR, "XIVE: invalid ESB load addr %=
x\n",
>> +                      offset);
>> +    }
>> +
>> +    return ret;
>> +}
>> +
>> +/*
>> + * ESB MMIO stores
>> + *                      Trigger page    Management/EOI page
>> + * 2 pages setting      even            odd
>=20
> As with the previous table, I don't quite understand what the headings
> above mean.

one page ESB support trigger and management on the same page. So for stor=
es,
the odd page behavior applies.

The headings can be improved. I will think of something.

>> + * 0x000 .. 0x3FF       Trigger         Trigger
>> + * 0x400 .. 0x7FF       Trigger         EOI
>> + * 0x800 .. 0xBFF       Trigger         undefined
>> + * 0xC00 .. 0xCFF       Trigger         PQ=3D00
>> + * 0xD00 .. 0xDFF       Trigger         PQ=3D01
>> + * 0xE00 .. 0xDFF       Trigger         PQ=3D10
>> + * 0xF00 .. 0xDFF       Trigger         PQ=3D11
>> + */
>> +static void xive_source_esb_write(void *opaque, hwaddr addr,
>> +                                  uint64_t value, unsigned size)
>> +{
>> +    XiveSource *xsrc =3D XIVE_SOURCE(opaque);
>> +    uint32_t offset =3D addr & 0xFFF;
>> +    uint32_t srcno =3D addr >> xsrc->esb_shift;
>> +    bool notify =3D false;
>> +
>> +    /* In a two pages ESB MMIO setting, trigger page only triggers */
>> +    if (xive_source_is_trigger_page(xsrc, addr)) {
>> +        notify =3D xive_source_esb_trigger(xsrc, srcno);
>> +        goto out;
>> +    }
>> +
>> +    switch (offset) {
>> +    case 0 ... 0x3FF:
>> +        notify =3D xive_source_esb_trigger(xsrc, srcno);
>> +        break;
>> +
>> +    case XIVE_ESB_STORE_EOI ... XIVE_ESB_STORE_EOI + 0x3FF:
>> +        if (!(xsrc->esb_flags & XIVE_SRC_STORE_EOI)) {
>> +            qemu_log_mask(LOG_GUEST_ERROR,
>> +                          "XIVE: invalid Store EOI for IRQ %d\n", src=
no);
>> +            return;
>> +        }
>> +
>> +        notify =3D xive_source_esb_eoi(xsrc, srcno);
>> +        break;
>> +
>> +    case XIVE_ESB_SET_PQ_00 ... XIVE_ESB_SET_PQ_00 + 0x0FF:
>> +    case XIVE_ESB_SET_PQ_01 ... XIVE_ESB_SET_PQ_01 + 0x0FF:
>> +    case XIVE_ESB_SET_PQ_10 ... XIVE_ESB_SET_PQ_10 + 0x0FF:
>> +    case XIVE_ESB_SET_PQ_11 ... XIVE_ESB_SET_PQ_11 + 0x0FF:
>> +        xive_source_esb_set(xsrc, srcno, (offset >> 8) & 0x3);
>> +        break;
>> +
>> +    default:
>> +        qemu_log_mask(LOG_GUEST_ERROR, "XIVE: invalid ESB write addr =
%x\n",
>> +                      offset);
>> +        return;
>> +    }
>> +
>> +out:
>> +    /* Forward the source event notification for routing */
>> +    if (notify) {
>> +        xive_source_notify(xsrc, srcno);
>> +    }
>> +}
>> +
>> +static const MemoryRegionOps xive_source_esb_ops =3D {
>> +    .read =3D xive_source_esb_read,
>> +    .write =3D xive_source_esb_write,
>> +    .endianness =3D DEVICE_BIG_ENDIAN,
>> +    .valid =3D {
>> +        .min_access_size =3D 8,
>> +        .max_access_size =3D 8,
>> +    },
>> +    .impl =3D {
>> +        .min_access_size =3D 8,
>> +        .max_access_size =3D 8,
>> +    },
>> +};
>> +
>> +static void xive_source_set_irq(void *opaque, int srcno, int val)
>> +{
>> +    XiveSource *xsrc =3D XIVE_SOURCE(opaque);
>> +    bool notify =3D false;
>> +
>> +    if (val) {
>> +        notify =3D xive_source_esb_trigger(xsrc, srcno);
>> +    }
>> +
>> +    /* Forward the source event notification for routing */
>> +    if (notify) {
>> +        xive_source_notify(xsrc, srcno);
>> +    }
>> +}
>> +
>> +void xive_source_pic_print_info(XiveSource *xsrc, uint32_t offset, Mo=
nitor *mon)
>> +{
>> +    int i;
>> +
>> +    for (i =3D 0; i < xsrc->nr_irqs; i++) {
>> +        uint8_t pq =3D xive_source_esb_get(xsrc, i);
>> +
>> +        if (pq =3D=3D XIVE_ESB_OFF) {
>> +            continue;
>> +        }
>> +
>> +        monitor_printf(mon, "  %08x %c%c\n", i + offset,
>> +                       pq & XIVE_ESB_VAL_P ? 'P' : '-',
>> +                       pq & XIVE_ESB_VAL_Q ? 'Q' : '-');
>> +    }
>> +}
>> +
>> +static void xive_source_reset(DeviceState *dev)
>> +{
>> +    XiveSource *xsrc =3D XIVE_SOURCE(dev);
>> +
>> +    /* PQs are initialized to 0b01 which corresponds to "ints off" */
>> +    memset(xsrc->status, 0x1, xsrc->nr_irqs);
>=20
> You've already got XIVE_ESB_OFF defined to make this a little clearer.

Sure.

Thanks,

C.=20


>=20
>> +}
>> +
>> +static void xive_source_realize(DeviceState *dev, Error **errp)
>> +{
>> +    XiveSource *xsrc =3D XIVE_SOURCE(dev);
>> +
>> +    if (!xsrc->nr_irqs) {
>> +        error_setg(errp, "Number of interrupt needs to be greater tha=
n 0");
>> +        return;
>> +    }
>> +
>> +    if (xsrc->esb_shift !=3D XIVE_ESB_4K &&
>> +        xsrc->esb_shift !=3D XIVE_ESB_4K_2PAGE &&
>> +        xsrc->esb_shift !=3D XIVE_ESB_64K &&
>> +        xsrc->esb_shift !=3D XIVE_ESB_64K_2PAGE) {
>> +        error_setg(errp, "Invalid ESB shift setting");
>> +        return;
>> +    }
>> +
>> +    xsrc->qirqs =3D qemu_allocate_irqs(xive_source_set_irq, xsrc,
>> +                                     xsrc->nr_irqs);
>> +
>> +    xsrc->status =3D g_malloc0(xsrc->nr_irqs);
>> +
>> +    memory_region_init_io(&xsrc->esb_mmio, OBJECT(xsrc),
>> +                          &xive_source_esb_ops, xsrc, "xive.esb",
>> +                          (1ull << xsrc->esb_shift) * xsrc->nr_irqs);
>> +    sysbus_init_mmio(SYS_BUS_DEVICE(dev), &xsrc->esb_mmio);
>> +}
>> +
>> +static const VMStateDescription vmstate_xive_source =3D {
>> +    .name =3D TYPE_XIVE_SOURCE,
>> +    .version_id =3D 1,
>> +    .minimum_version_id =3D 1,
>> +    .fields =3D (VMStateField[]) {
>> +        VMSTATE_UINT32_EQUAL(nr_irqs, XiveSource, NULL),
>> +        VMSTATE_VBUFFER_UINT32(status, XiveSource, 1, NULL, nr_irqs),
>> +        VMSTATE_END_OF_LIST()
>> +    },
>> +};
>> +
>> +/*
>> + * The default XIVE interrupt source setting for the ESB MMIOs is two
>> + * 64k pages without Store EOI, to be in sync with KVM.
>> + */
>> +static Property xive_source_properties[] =3D {
>> +    DEFINE_PROP_UINT64("flags", XiveSource, esb_flags, 0),
>> +    DEFINE_PROP_UINT32("nr-irqs", XiveSource, nr_irqs, 0),
>> +    DEFINE_PROP_UINT32("shift", XiveSource, esb_shift, XIVE_ESB_64K_2=
PAGE),
>> +    DEFINE_PROP_END_OF_LIST(),
>> +};
>> +
>> +static void xive_source_class_init(ObjectClass *klass, void *data)
>> +{
>> +    DeviceClass *dc =3D DEVICE_CLASS(klass);
>> +
>> +    dc->desc    =3D "XIVE Interrupt Source";
>> +    dc->props   =3D xive_source_properties;
>> +    dc->realize =3D xive_source_realize;
>> +    dc->reset   =3D xive_source_reset;
>> +    dc->vmsd    =3D &vmstate_xive_source;
>> +}
>> +
>> +static const TypeInfo xive_source_info =3D {
>> +    .name          =3D TYPE_XIVE_SOURCE,
>> +    .parent        =3D TYPE_SYS_BUS_DEVICE,
>> +    .instance_size =3D sizeof(XiveSource),
>> +    .class_init    =3D xive_source_class_init,
>> +};
>> +
>> +static void xive_register_types(void)
>> +{
>> +    type_register_static(&xive_source_info);
>> +}
>> +
>> +type_init(xive_register_types)
>> diff --git a/hw/intc/Makefile.objs b/hw/intc/Makefile.objs
>> index 0e9963f5eecc..72a46ed91c31 100644
>> --- a/hw/intc/Makefile.objs
>> +++ b/hw/intc/Makefile.objs
>> @@ -37,6 +37,7 @@ obj-$(CONFIG_SH4) +=3D sh_intc.o
>>  obj-$(CONFIG_XICS) +=3D xics.o
>>  obj-$(CONFIG_XICS_SPAPR) +=3D xics_spapr.o
>>  obj-$(CONFIG_XICS_KVM) +=3D xics_kvm.o
>> +obj-$(CONFIG_XIVE) +=3D xive.o
>>  obj-$(CONFIG_POWERNV) +=3D xics_pnv.o
>>  obj-$(CONFIG_ALLWINNER_A10_PIC) +=3D allwinner-a10-pic.o
>>  obj-$(CONFIG_S390_FLIC) +=3D s390_flic.o
>=20


