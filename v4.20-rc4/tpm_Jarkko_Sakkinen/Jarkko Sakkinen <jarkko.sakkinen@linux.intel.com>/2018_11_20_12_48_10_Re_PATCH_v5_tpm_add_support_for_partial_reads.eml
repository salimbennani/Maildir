Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 21 Nov 2018 00:39:23 -0000
Received: from icoremail.net (unknown [209.85.214.176])
	by mail-app4 (Coremail) with SMTP id cS_KCgCXz3QrC_RbYfHfAQ--.33799S3;
	Tue, 20 Nov 2018 21:25:01 +0800 (CST)
Received: from mail-pl1-f176.google.com (unknown [209.85.214.176])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwAnoEzyCfRbXE9eAA--.2979S3;
	Tue, 20 Nov 2018 21:19:47 +0800 (CST)
Received: by mail-pl1-f176.google.com with SMTP id t13so982769ply.13
        for <xuliker@zju.edu.cn>; Tue, 20 Nov 2018 05:19:47 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-original-authentication-results:x-gm-message-state:delivered-to
         :date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:organization:user-agent:sender
         :precedence:list-id;
        bh=In1T8pL+pFH1dKmSbPklBvvz/Yany2YJhyikNVCvdDA=;
        b=ZOXsIKVwYgjs8ttQVdcPSATpKDIsO5lQHkUrFkiF5Iz7aaMeITNJcgavIyhXvISfYf
         heLlhMsECmSJOHLdU8xpZLp0ae/clFhTuU40zJDrDEKK+9UAuXolckwNh1h69XsJ5mDy
         Sxc/Urv/uGkymXWSNMM8UBwjy9g7PfYW5Lv4UlaIbcQl1RQULMp4WEMO5VwGHf2VP/Az
         xiw2+kZtLSKf9sz6cD0LW3wOTU2WXdv1bEPDgycmMZbLvHrYvdYqE7xZ4gELg10RyRU0
         hoO861xShX35W7D0lecdElNOlHB2d6Lp6bINNsyZA62wsxNYl3LUvbs+AjkL0HLPsmqf
         4KVg==
X-Original-Authentication-Results: mx.google.com;       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;       dmarc=fail (p=NONE sp=NONE dis=NONE) header.from=intel.com
X-Gm-Message-State: AA+aEWY583QPuxHEblvwNUcJwdaTxI38W4GaJvC3P6lDJIfgH9zBCyrZ
	9M59TeKjWepfoXDDP1FgeQPot4KxCzj6uDu+QnHy9nO4XKLpFMA=
X-Received: by 2002:a17:902:560f:: with SMTP id h15-v6mr2267135pli.160.1542719986690;
        Tue, 20 Nov 2018 05:19:46 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:d106:0:0:0:0 with SMTP id l6-v6csp590706pju;
        Tue, 20 Nov 2018 05:19:45 -0800 (PST)
X-Google-Smtp-Source: AFSGD/Vpxwf7zzi7fhm1X9FH+DOXEZ3omUaiyerD/VwvMTvW2a4p1CLuFLq2R4TAoiogRhN1Td2Q
X-Received: by 2002:a17:902:7882:: with SMTP id q2mr2228379pll.305.1542719985365;
        Tue, 20 Nov 2018 05:19:45 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542719985; cv=none;
        d=google.com; s=arc-20160816;
        b=FudOnuTzMibHB1A8opced6WrXc7nzkPbwyNnSWKwx3bddzobcHicBDMTTPVgUGcScg
         4MYA0+xRUVrA9915xlxjLq2YhzFsv59dkzzt7XXTQFPza9+UiCeOyML+rTSPb7gd68xT
         C2tuZn7/8/tF789HWxmTiF6SUGWESfdIVoL+LHrH4VbyduSuJUZOmsmL99mCd2HAIQuf
         bMIHka1xGkHoTqC8C4KNwnUZixhMfXMGHtS4om+2IZWjDCayp5iVIQ3gRn3hnjGVtbVs
         yh0OB24jdKryyyl3R+IlvBUt+lcoCASeZ5it4O8Xooxo3vtz4BoC1H1E0kCOtmO9YsYg
         uVWg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:user-agent:organization:in-reply-to
         :content-disposition:mime-version:references:message-id:subject:cc
         :to:from:date;
        bh=In1T8pL+pFH1dKmSbPklBvvz/Yany2YJhyikNVCvdDA=;
        b=ncW7vC9wbSlkTcH277l013yGOHvfn9M/hmAPjlsf/hZN5on4ZoqgFd+jfgWAAhzGxa
         ATO0lscvcoXtIgQKLtHvvQPWnOyJzUcCi1je5DvOC8ixtU+kRMFOupz/pzr/nl48qY+4
         3re6E1+NthpWVlkvG5kdauKIxmn+xoQUV2Tr1JVfkWgmieinH+4KgP6wRTBiH5vbVz63
         lbCmhyTxJourgogN6tjZHFOLuVODdmP6MrdXOEiSYMVfNmSkasoiMSiSyQpuBeyUb2X6
         LQVqQhQ7+HaBhUZYURhNWkJLSTy6hZCe1ha0fj2nqWAyywx/Ki1CGs8y/jbbijc4appj
         bGbA==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;
       dmarc=fail (p=NONE sp=NONE dis=NONE) header.from=intel.com
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id f10si17579441pgo.356.2018.11.20.05.19.30;
        Tue, 20 Nov 2018 05:19:45 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727629AbeKTXRM (ORCPT <rfc822;yv9200@gmail.com> + 99 others);
        Tue, 20 Nov 2018 18:17:12 -0500
Received: from mga03.intel.com ([134.134.136.65]:10455 "EHLO mga03.intel.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1727286AbeKTXRM (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 20 Nov 2018 18:17:12 -0500
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Received: from fmsmga008.fm.intel.com ([10.253.24.58])
  by orsmga103.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 20 Nov 2018 04:48:12 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,257,1539673200"; 
   d="scan'208";a="87850513"
Received: from jsakkine-mobl1.tm.intel.com (HELO localhost) ([10.237.50.177])
  by fmsmga008.fm.intel.com with ESMTP; 20 Nov 2018 04:48:10 -0800
Date: Tue, 20 Nov 2018 14:48:10 +0200
From: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
To: Tadeusz Struk <tadeusz.struk@intel.com>
Cc: jgg@ziepe.ca, linux-integrity@vger.kernel.org,
        linux-security-module@vger.kernel.org, linux-kernel@vger.kernel.org
Subject: Re: [PATCH v5] tpm: add support for partial reads
Message-ID: <20181120124810.GB8813@linux.intel.com>
References: <154265371562.23494.10113870855345906523.stgit@tstruk-mobl1.jf.intel.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <154265371562.23494.10113870855345906523.stgit@tstruk-mobl1.jf.intel.com>
Organization: Intel Finland Oy - BIC 0357606-4 - Westendinkatu 7, 02160 Espoo
User-Agent: Mutt/1.10.1 (2018-07-13)
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwAnoEzyCfRbXE9eAA--.2979S3
Authentication-Results: mail-app4; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoW3Gr45Zr18GFy8uw43Wr1rWFg_yoW3WFyrpa
	yYy393JrZ8Jr429Fn7JrsIqF1fW3ZYgFyjqF9rGa43Gr9rX3Z0gF1rKFyjqFy7XrZ7GrZa
	9a9YgryUWr1qvw7anT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUU9Kb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Ar0_tr1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Cr0_Gr1UM28EF7xvwVC2
	z280aVAFwI0_GcCE3s1l84ACjcxK6I8E87Iv6xkF7I0E14v26rxl6s0DM2AIxVAIcxkEcV
	Aq07x20xvEncxIr21l5I8CrVACY4xI64kE6c02F40Ex7xfMcIj6xIIjxv20xvE14v26r1Y
	6r17McIj6I8E87Iv67AKxVWxJVW8Jr1lOx8S6xCaFVCjc4AY6r1j6r4UM4x0Y48IcVAKI4
	8JMx02cVCv0xWlc7CjxVAKzI0EY4vE52x082I5MxkIecxEwVCI4VW5GwCY0x0Ix7I2Y4AK
	64vIr41lcIIF0xvE2Ix0cI8IcVAFwI0_Xr0_Ar1lcIIF0xvE2Ix0cI8IcVCY1x0267AKxV
	W8JVWxJwCYIxAIcVC2z280aVAFwI0_GcCE3s1lcIIF0xvEx4A2jsIEc7CjxVAFwI0_GcCE
	3s1l42xK82IYc2Ij64vIr41l42xK82IY64kExVAvwVAq07x20xyl4x8a6x804xWl4I8I3I
	0E4IkC6x0Yz7v_Jr0_Gr1lx2IqxVAqx4xG67AKxVWUJVWUGwC20s026x8GjcxK67AKxVWU
	GVWUWwC2zVAF1VAY17CE14v26r126r1DMIIYrxkI7VAKI48JMIIF0xvE42xK8VAvwI8IcI
	k0rVWUJVWUCbIYCTnIWIevJa73UjIFyTuYvjxUPfcfUUUUU

On Mon, Nov 19, 2018 at 10:55:15AM -0800, Tadeusz Struk wrote:
> Currently to read a response from the TPM device an application needs
> provide big enough buffer for the whole response and read it in one go.
> The application doesn't know how big the response it beforehand so it
> always needs to maintain a 4K buffer and read the max (4K).
> In case if the user of the TSS library doesn't provide big enough
> buffer the TCTI spec says that the library should set the required
> size and return TSS2_TCTI_RC_INSUFFICIENT_BUFFER error code so that the
> application could allocate a bigger buffer and call receive again.
> To make it possible in the TSS library, this requires being able to do
> partial reads from the driver.
> The library would read the 10 bytes header first to get the actual size
> of the response from the header, and then read the rest of the response.
> 
> This patch adds support for partial reads, i.e. the user can read the
> response in one or multiple reads, until the whole response is consumed.
> The user can also read only part of the response and ignore
> the rest by issuing a new write to send a new command.
> 
> Signed-off-by: Tadeusz Struk <tadeusz.struk@intel.com>
> ---
> The usecase is implemented in this TSS commit:
> https://github.com/tpm2-software/tpm2-tss/commit/ce982f67a67dc08e24683d30b05800648d8a264c

Can you implement test for this to

https://github.com/jsakkine-intel/tpm2-scripts

?

Would make it easy to test and also to test in future kernel releases
that doesn't break.

> 
> Changes in v5:
>  - Merge the two patches back into one.
>  - Change variable 'partial_data' to a new flag 'response_read'.
>  - Update the logic around partial_data to reflect the new flag.
>  - Add a new variable response_length that keeps track of how much
>    of the response is left.
> 
> Changes in v4:
>  - Use unsigned type for response_pending as it will never be negative.
>  - Rebased on top of name change data_pending to transmit_result patch.
> 
> Changes in v3:
>  - Remove link to usecase implemented in TSS out of the commit message.
>  - Update the conddition in tpm_common_poll() to take into account
>    the partial_data also.
> 
> Changes in v2:
>  - Allow writes after only partial response is consumed to maintain
>    backwords compatibility.
> ---
>  drivers/char/tpm/tpm-dev-common.c |   51 +++++++++++++++++++++++++------------
>  drivers/char/tpm/tpm-dev.h        |    7 +++--
>  2 files changed, 39 insertions(+), 19 deletions(-)
> 
> diff --git a/drivers/char/tpm/tpm-dev-common.c b/drivers/char/tpm/tpm-dev-common.c
> index 99b5133a9d05..344739223451 100644
> --- a/drivers/char/tpm/tpm-dev-common.c
> +++ b/drivers/char/tpm/tpm-dev-common.c
> @@ -40,7 +40,7 @@ static void tpm_async_work(struct work_struct *work)
>  
>  	tpm_put_ops(priv->chip);
>  	if (ret > 0) {
> -		priv->data_pending = ret;
> +		priv->response_length = ret;
>  		mod_timer(&priv->user_read_timer, jiffies + (120 * HZ));
>  	}
>  	mutex_unlock(&priv->buffer_mutex);
> @@ -63,7 +63,8 @@ static void tpm_timeout_work(struct work_struct *work)
>  					      timeout_work);
>  
>  	mutex_lock(&priv->buffer_mutex);
> -	priv->data_pending = 0;
> +	priv->response_read = true;
> +	priv->response_length = 0;
>  	memset(priv->data_buffer, 0, sizeof(priv->data_buffer));
>  	mutex_unlock(&priv->buffer_mutex);
>  	wake_up_interruptible(&priv->async_wait);
> @@ -74,6 +75,7 @@ void tpm_common_open(struct file *file, struct tpm_chip *chip,
>  {
>  	priv->chip = chip;
>  	priv->space = space;
> +	priv->response_read = true;
>  
>  	mutex_init(&priv->buffer_mutex);
>  	timer_setup(&priv->user_read_timer, user_reader_timeout, 0);
> @@ -90,22 +92,35 @@ ssize_t tpm_common_read(struct file *file, char __user *buf,
>  	ssize_t ret_size = 0;
>  	int rc;
>  
> -	del_singleshot_timer_sync(&priv->user_read_timer);
> -	flush_work(&priv->timeout_work);
>  	mutex_lock(&priv->buffer_mutex);
>  
> -	if (priv->data_pending) {
> -		ret_size = min_t(ssize_t, size, priv->data_pending);
> -		if (ret_size > 0) {
> -			rc = copy_to_user(buf, priv->data_buffer, ret_size);
> -			memset(priv->data_buffer, 0, priv->data_pending);
> -			if (rc)
> -				ret_size = -EFAULT;
> +	if (priv->response_length) {
> +		priv->response_read = true;
> +
> +		ret_size = min_t(ssize_t, size, priv->response_length);
> +		if (!ret_size) {
> +			priv->response_length = 0;
> +			goto out;
>  		}
>  
> -		priv->data_pending = 0;
> +		rc = copy_to_user(buf, priv->data_buffer + *off, ret_size);
> +		if (rc) {
> +			memset(priv->data_buffer, 0, TPM_BUFSIZE);
> +			priv->response_length = 0;
> +			ret_size = -EFAULT;
> +		} else {
> +			memset(priv->data_buffer + *off, 0, ret_size);
> +			priv->response_length -= ret_size;
> +			*off += ret_size;
> +		}
>  	}
>  
> +out:
> +	if (!priv->response_length) {
> +		*off = 0;
> +		del_singleshot_timer_sync(&priv->user_read_timer);
> +		flush_work(&priv->timeout_work);
> +	}
>  	mutex_unlock(&priv->buffer_mutex);
>  	return ret_size;
>  }
> @@ -125,7 +140,7 @@ ssize_t tpm_common_write(struct file *file, const char __user *buf,
>  	 * tpm_read or a user_read_timer timeout. This also prevents split
>  	 * buffered writes from blocking here.
>  	 */
> -	if (priv->data_pending != 0 || priv->command_enqueued) {
> +	if (!priv->response_read || priv->command_enqueued) {
>  		ret = -EBUSY;
>  		goto out;
>  	}
> @@ -150,6 +165,10 @@ ssize_t tpm_common_write(struct file *file, const char __user *buf,
>  		goto out;
>  	}
>  
> +	priv->response_length = 0;
> +	priv->response_read = false;
> +	*off = 0;
> +
>  	/*
>  	 * If in nonblocking mode schedule an async job to send
>  	 * the command return the size.
> @@ -168,7 +187,7 @@ ssize_t tpm_common_write(struct file *file, const char __user *buf,
>  	tpm_put_ops(priv->chip);
>  
>  	if (ret > 0) {
> -		priv->data_pending = ret;
> +		priv->response_length = ret;
>  		mod_timer(&priv->user_read_timer, jiffies + (120 * HZ));
>  		ret = size;
>  	}
> @@ -184,7 +203,7 @@ __poll_t tpm_common_poll(struct file *file, poll_table *wait)
>  
>  	poll_wait(file, &priv->async_wait, wait);
>  
> -	if (priv->data_pending)
> +	if (!priv->response_read || priv->response_length)
>  		mask = EPOLLIN | EPOLLRDNORM;
>  	else
>  		mask = EPOLLOUT | EPOLLWRNORM;
> @@ -201,7 +220,7 @@ void tpm_common_release(struct file *file, struct file_priv *priv)
>  	del_singleshot_timer_sync(&priv->user_read_timer);
>  	flush_work(&priv->timeout_work);
>  	file->private_data = NULL;
> -	priv->data_pending = 0;
> +	priv->response_length = 0;
>  }
>  
>  int __init tpm_dev_common_init(void)
> diff --git a/drivers/char/tpm/tpm-dev.h b/drivers/char/tpm/tpm-dev.h
> index a126b575cb8c..a744d9bec7b6 100644
> --- a/drivers/char/tpm/tpm-dev.h
> +++ b/drivers/char/tpm/tpm-dev.h
> @@ -9,14 +9,15 @@ struct file_priv {
>  	struct tpm_chip *chip;
>  	struct tpm_space *space;
>  
> -	/* Holds the amount of data passed or an error code from async op */
> -	ssize_t data_pending;
>  	struct mutex buffer_mutex;
> -
>  	struct timer_list user_read_timer;      /* user needs to claim result */
>  	struct work_struct timeout_work;
>  	struct work_struct async_work;
>  	wait_queue_head_t async_wait;
> +	/* Holds the resul of the last successful call to tpm_transmit() */

This comment is cruft.

> +	size_t response_length;

data_pending would be now perfectly fine name now that we concluded
that the original length is not needed to be stored. Better than this
as once you decrease it the variable name and contents mismatch.

> +	/* Becomes true when the response (or part of it) is consumed */
> +	bool response_read;

/* Tell whether response been consumed (read at least once). */

>  	bool command_enqueued;
>  
>  	u8 data_buffer[TPM_BUFSIZE];
>

Otherwise, starts to look pretty much acceptable.

/Jarkko
