Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 22 Nov 2018 00:33:57 -0000
Received: from icoremail.net (unknown [209.85.214.177])
	by mail-app2 (Coremail) with SMTP id by_KCgDHH8IPcvVbPNzIAQ--.58400S3;
	Wed, 21 Nov 2018 22:56:16 +0800 (CST)
Received: from mail-pl1-f177.google.com (unknown [209.85.214.177])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwD320cNcvVbePxjAA--.1760S3;
	Wed, 21 Nov 2018 22:56:13 +0800 (CST)
Received: by mail-pl1-f177.google.com with SMTP id a14so5865848plm.12
        for <xuliker@zju.edu.cn>; Wed, 21 Nov 2018 06:56:13 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-original-authentication-results:x-gm-message-state:delivered-to
         :date:from:to:cc:subject:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding:sender:precedence:list-id;
        bh=ALXjnfLaBCMOTWTAm2SESpSX94VirD3o5aFg+US0M3w=;
        b=PBsl0Tg7u1WCSTc/D3EuqOf2BcQDhcmrQMcqylEovwF2QvCyu14pTkCCL3aaOgI+BU
         NQB3hPZ/BN5AQm/rvkKV0o6fey08LLC6k8s2lJy2unVzTSxZgUEQ4tD7WfVxKGiGBfQT
         +hskXQVu+m9N9dbUWNzSS0iZdAbzGJa4yib97f3GqBVtJZrZomyBz6FKcbWaJx0iUQwn
         C26gemkS81CaVAJ4yzz++x8ylVHY2JRb/WW5fNhk0gFuVLVOKtQwKUo8AKC7+J8iLJ88
         PWi+SHd4fEjJHLaW4EYIS3ZDfgKc/+rpPe+3uxjU63Z0+iqXScS2ck6JATAhRQnnOkbc
         YsBQ==
X-Original-Authentication-Results: mx.google.com;       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
X-Gm-Message-State: AGRZ1gIh+NL7yGhrcSmesvk5FNpKwFWKSH0v3ifYJkQF+t1vame5NUZ6
	DDY+3UOnNqQXXECTKtcb90OJBlv52BtDH36nmXQlNr6YgWoTzpI=
X-Received: by 2002:a62:5e83:: with SMTP id s125-v6mr7064935pfb.232.1542812173542;
        Wed, 21 Nov 2018 06:56:13 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:d106:0:0:0:0 with SMTP id l6-v6csp2055679pju;
        Wed, 21 Nov 2018 06:56:12 -0800 (PST)
X-Google-Smtp-Source: AJdET5c6ctCbLfHdpCbyqmCalccjh8lbo/VED2BVi1GB6AqGnuDf/XngLyZrRGq98qRwEaCUpx1d
X-Received: by 2002:a62:4d82:: with SMTP id a124-v6mr7165666pfb.113.1542812172335;
        Wed, 21 Nov 2018 06:56:12 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542812172; cv=none;
        d=google.com; s=arc-20160816;
        b=l6H+4U7jlOrBcZmiE/QRexxsncYB/in/Dvo3zbtBDQRORZRTq8cUjEcvaoJ/6Zolv/
         vRB61P2pfioBfVulpUXssu4cpA5rbtjlmq+NvMnedsdPKZv7/ekcV9lk79Jia8pvEEfR
         GVgMsfwRnc2ufWdaFD0xS0pmGkx/+Y0e/hu9F1zTnqAnbrtm+9lVs+iNRwJiFGoaD9VY
         8su3TAAXD7J/J9ukFwsANOpkU891+EpaW2N4tl24TuxXZU3UQsDAeMeQ3YeObvET0sLZ
         /Y7Tyya0DSr9gChr7NJ0ceIAbx0xvRm5npF/6/qFKilhZzWhUh442eVmLEnQIQZ8ypVC
         Ui/Q==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:content-transfer-encoding:mime-version
         :references:in-reply-to:message-id:subject:cc:to:from:date;
        bh=ALXjnfLaBCMOTWTAm2SESpSX94VirD3o5aFg+US0M3w=;
        b=jx1BNoc8pS3dV5dArkMWsSQQdSnKsAe4C6P8WNVCo+6oWFROERGG+ly2fN88hj3kgK
         vZgjY2oJD9EPKNj5PrGYlNcPsmsh6osZ9o9HsQ93hjcCQdvGF9g304nIhQhinedYbqgU
         x5EzLdABgb5rOiHrdRIfHiyE5ZT23ZQ/gyqjn7WPB8HrMP3pWA9XHYeESXe7McXfbmYO
         ub2YfWIxphTzu+ZqA6qNnjVE9JwcS8il+yYDL85fu4VP342L0DYWxURwovwNe3Y6d/qh
         jlhP9M3HWIrO/+/ZhZcRgmRjvim6x/taDxxonJGS7h5oWkszisFkwM0T4vTaTuXCs/8c
         ZSZA==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id y3-v6si46278135pfe.42.2018.11.21.06.55.50;
        Wed, 21 Nov 2018 06:56:12 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1731114AbeKVB2c (ORCPT <rfc822;nullbytes00@gmail.com>
        + 99 others); Wed, 21 Nov 2018 20:28:32 -0500
Received: from mail.bootlin.com ([62.4.15.54]:51531 "EHLO mail.bootlin.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1728298AbeKVB2b (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 21 Nov 2018 20:28:31 -0500
Received: by mail.bootlin.com (Postfix, from userid 110)
        id 02C16207A8; Wed, 21 Nov 2018 15:53:46 +0100 (CET)
X-Spam-Checker-Version: SpamAssassin 3.4.2 (2018-09-13) on mail.bootlin.com
X-Spam-Level: 
X-Spam-Status: No, score=-1.0 required=5.0 tests=ALL_TRUSTED,SHORTCIRCUIT,
        URIBL_BLOCKED shortcircuit=ham autolearn=disabled version=3.4.2
Received: from bbrezillon (aaubervilliers-681-1-13-146.w90-88.abo.wanadoo.fr [90.88.134.146])
        by mail.bootlin.com (Postfix) with ESMTPSA id 9642320731;
        Wed, 21 Nov 2018 15:53:35 +0100 (CET)
Date: Wed, 21 Nov 2018 15:53:35 +0100
From: Boris Brezillon <boris.brezillon@bootlin.com>
To: Janusz Krzysztofik <jmkrzyszt@gmail.com>
Cc: Miquel Raynal <miquel.raynal@bootlin.com>,
        Tony Lindgren <tony@atomide.com>,
        Aaro Koskinen <aaro.koskinen@iki.fi>,
        Richard Weinberger <richard@nod.at>,
        David Woodhouse <dwmw2@infradead.org>,
        Brian Norris <computersforpeace@gmail.com>,
        Marek Vasut <marek.vasut@gmail.com>,
        Linus Walleij <linus.walleij@linaro.org>,
        linux-mtd@lists.infradead.org, linux-omap@vger.kernel.org,
        linux-arm-kernel@lists.infradead.org, linux-kernel@vger.kernel.org
Subject: Re: [PATCH v4 3/4] mtd: rawnand: ams-delta: Use GPIO API for data
 I/O
Message-ID: <20181121155335.7375f827@bbrezillon>
In-Reply-To: <20181121110806.32076-4-jmkrzyszt@gmail.com>
References: <20180813223448.21316-1-jmkrzyszt@gmail.com>
        <20181121110806.32076-1-jmkrzyszt@gmail.com>
        <20181121110806.32076-4-jmkrzyszt@gmail.com>
X-Mailer: Claws Mail 3.16.0 (GTK+ 2.24.32; x86_64-pc-linux-gnu)
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwD320cNcvVbePxjAA--.1760S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoWxtryDWF15uF43Ar1xtF4ktFb_yoWfXr47pF
	W5AF4akFWUZ3W8Gr1qqa9xZ3Z8JwnrKw17urWxKa9ayr12vr4kJF1rKr10vF1Syryv9a15
	KFyrXFWxCw4vvrJanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUP2b7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Ar0_tr1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Cr0_Gr1UM28EF7xvwVC2
	z280aVAFwI0_GcCE3s1l84ACjcxK6I8E87Iv6xkF7I0E14v26rxl6s0DM2AIxVAIcxkEcV
	Aq07x20xvEncxIr21l5I8CrVACY4xI64kE6c02F40Ex7xfMcIj6xIIjxv20xvE14v26r1Y
	6r17McIj6I8E87Iv67AKxVWxJVW8Jr1lOx8S6xCaFVCjc4AY6r1j6r4UM4x0Y48IcxkI7V
	AKI48JMx02cVCv0xWlc7CjxVAKzI0EY4vE52x082I5MxkFs20EY4vE44CYbxCE4x80FwCY
	02Avz4vEIxC_Xrylc2IjII80xcxEwVAKI48JMxvI42IY6xIIjxv20xvE14v26ryj6F1UMx
	vI42IY6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1lcIIF0xvEx4A2jsIE14v26rxl6s0DMxvI
	42IY6I8E87Iv6xkF7I0E14v26rxl6s0DMxAIw28IcxkI7VAKI48JMxAIw28IcVAKzI0EY4
	vE52x082I5MxCjnVCjjxCrMxC20s026xCaFVCjc4AY6r1j6r4UMI8I3I0E5I8CrVAFwI0_
	Jr0_Jr4lx2IqxVCjr7xvwVAFwI0_JrI_JrWlx4CE17CEb7AF67AKxVWUtVW8ZwCIc40Y0x
	0EwIxGrwCI42IY6xAIw20EY4v20xvaj40_Jr0_JF7vcSsGvfC2KfnxnUUI43ZEXa7IUOxx
	htUUUUU==

On Wed, 21 Nov 2018 12:08:05 +0100
Janusz Krzysztofik <jmkrzyszt@gmail.com> wrote:

> Don't readw()/writew() data directly from/to GPIO port which is under
> control of gpio-omap driver, use GPIO consumer API instead.
> 
> The driver should now work with any 8-bit bidirectional GPIO port, not
> only OMAP.
> 
> Signed-off-by: Janusz Krzysztofik <jmkrzyszt@gmail.com>
> Reviewed-by: Linus Walleij <linus.walleij@linaro.org>

Reviewed-by: Boris Brezillon <boris.brezillon@bootlin.com>

And thanks a lot for keeping up with that. I like the new ams-delta
driver, and I wonder if we couldn't extend it to replace the gpio-nand
driver.

> ---
>  drivers/mtd/nand/raw/ams-delta.c | 109 +++++++++++++++++--------------
>  1 file changed, 61 insertions(+), 48 deletions(-)
> 
> diff --git a/drivers/mtd/nand/raw/ams-delta.c b/drivers/mtd/nand/raw/ams-delta.c
> index bb50dda05654..8312182088c1 100644
> --- a/drivers/mtd/nand/raw/ams-delta.c
> +++ b/drivers/mtd/nand/raw/ams-delta.c
> @@ -18,11 +18,10 @@
>  #include <linux/module.h>
>  #include <linux/delay.h>
>  #include <linux/gpio/consumer.h>
> -#include <linux/io.h>
>  #include <linux/mtd/mtd.h>
>  #include <linux/mtd/rawnand.h>
>  #include <linux/mtd/partitions.h>
> -#include <linux/platform_data/gpio-omap.h>
> +#include <linux/platform_device.h>
>  #include <linux/sizes.h>
>  
>  /*
> @@ -38,7 +37,7 @@ struct ams_delta_nand {
>  	struct gpio_desc	*gpiod_nwe;
>  	struct gpio_desc	*gpiod_ale;
>  	struct gpio_desc	*gpiod_cle;
> -	void __iomem		*io_base;
> +	struct gpio_descs	*data_gpiods;
>  	bool			data_in;
>  };
>  
> @@ -67,42 +66,78 @@ static const struct mtd_partition partition_info[] = {
>  	  .size		=  3 * SZ_256K },
>  };
>  
> -static void ams_delta_io_write(struct ams_delta_nand *priv, u8 byte)
> +static void ams_delta_write_commit(struct ams_delta_nand *priv)
>  {
> -	writew(byte, priv->io_base + OMAP_MPUIO_OUTPUT);
>  	gpiod_set_value(priv->gpiod_nwe, 0);
>  	ndelay(40);
>  	gpiod_set_value(priv->gpiod_nwe, 1);
>  }
>  
> +static void ams_delta_io_write(struct ams_delta_nand *priv, u8 byte)
> +{
> +	struct gpio_descs *data_gpiods = priv->data_gpiods;
> +	DECLARE_BITMAP(values, BITS_PER_TYPE(byte)) = { byte, };
> +
> +	gpiod_set_raw_array_value(data_gpiods->ndescs, data_gpiods->desc,
> +				  data_gpiods->info, values);
> +
> +	ams_delta_write_commit(priv);
> +}
> +
> +static void ams_delta_dir_output(struct ams_delta_nand *priv, u8 byte)
> +{
> +	struct gpio_descs *data_gpiods = priv->data_gpiods;
> +	DECLARE_BITMAP(values, BITS_PER_TYPE(byte)) = { byte, };
> +	int i;
> +
> +	for (i = 0; i < data_gpiods->ndescs; i++)
> +		gpiod_direction_output_raw(data_gpiods->desc[i],
> +					   test_bit(i, values));
> +
> +	ams_delta_write_commit(priv);
> +
> +	priv->data_in = false;
> +}
> +
>  static u8 ams_delta_io_read(struct ams_delta_nand *priv)
>  {
>  	u8 res;
> +	struct gpio_descs *data_gpiods = priv->data_gpiods;
> +	DECLARE_BITMAP(values, BITS_PER_TYPE(res)) = { 0, };
>  
>  	gpiod_set_value(priv->gpiod_nre, 0);
>  	ndelay(40);
> -	res = readw(priv->io_base + OMAP_MPUIO_INPUT_LATCH);
> +
> +	gpiod_get_raw_array_value(data_gpiods->ndescs, data_gpiods->desc,
> +				  data_gpiods->info, values);
> +
>  	gpiod_set_value(priv->gpiod_nre, 1);
>  
> +	res = values[0];
>  	return res;
>  }
>  
> -static void ams_delta_dir_input(struct ams_delta_nand *priv, bool in)
> +static void ams_delta_dir_input(struct ams_delta_nand *priv)
>  {
> -	writew(in ? ~0 : 0, priv->io_base + OMAP_MPUIO_IO_CNTL);
> -	priv->data_in = in;
> +	struct gpio_descs *data_gpiods = priv->data_gpiods;
> +	int i;
> +
> +	for (i = 0; i < data_gpiods->ndescs; i++)
> +		gpiod_direction_input(data_gpiods->desc[i]);
> +
> +	priv->data_in = true;
>  }
>  
>  static void ams_delta_write_buf(struct ams_delta_nand *priv, const u8 *buf,
>  				int len)
>  {
> -	int i;
> +	int i = 0;
>  
> -	if (priv->data_in)
> -		ams_delta_dir_input(priv, false);
> +	if (len > 0 && priv->data_in)
> +		ams_delta_dir_output(priv, buf[i++]);
>  
> -	for (i = 0; i < len; i++)
> -		ams_delta_io_write(priv, buf[i]);
> +	while (i < len)
> +		ams_delta_io_write(priv, buf[i++]);
>  }
>  
>  static void ams_delta_read_buf(struct ams_delta_nand *priv, u8 *buf, int len)
> @@ -110,7 +145,7 @@ static void ams_delta_read_buf(struct ams_delta_nand *priv, u8 *buf, int len)
>  	int i;
>  
>  	if (!priv->data_in)
> -		ams_delta_dir_input(priv, true);
> +		ams_delta_dir_input(priv);
>  
>  	for (i = 0; i < len; i++)
>  		buf[i] = ams_delta_io_read(priv);
> @@ -188,14 +223,9 @@ static int ams_delta_init(struct platform_device *pdev)
>  	struct ams_delta_nand *priv;
>  	struct nand_chip *this;
>  	struct mtd_info *mtd;
> -	struct resource *res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
> -	void __iomem *io_base;
>  	struct gpio_descs *data_gpiods;
>  	int err = 0;
>  
> -	if (!res)
> -		return -ENXIO;
> -
>  	/* Allocate memory for MTD device structure and private data */
>  	priv = devm_kzalloc(&pdev->dev, sizeof(struct ams_delta_nand),
>  			    GFP_KERNEL);
> @@ -207,25 +237,13 @@ static int ams_delta_init(struct platform_device *pdev)
>  	mtd = nand_to_mtd(this);
>  	mtd->dev.parent = &pdev->dev;
>  
> -	/*
> -	 * Don't try to request the memory region from here,
> -	 * it should have been already requested from the
> -	 * gpio-omap driver and requesting it again would fail.
> -	 */
> -	io_base = ioremap(res->start, resource_size(res));
> -	if (!io_base) {
> -		dev_err(&pdev->dev, "ioremap failed\n");
> -		return -EIO;
> -	}
> -
> -	priv->io_base = io_base;
>  	nand_set_controller_data(this, priv);
>  
>  	priv->gpiod_rdy = devm_gpiod_get_optional(&pdev->dev, "rdy", GPIOD_IN);
>  	if (IS_ERR(priv->gpiod_rdy)) {
>  		err = PTR_ERR(priv->gpiod_rdy);
>  		dev_warn(&pdev->dev, "RDY GPIO request failed (%d)\n", err);
> -		goto err_unmap;
> +		return err;
>  	}
>  
>  	this->ecc.mode = NAND_ECC_SOFT;
> @@ -238,42 +256,42 @@ static int ams_delta_init(struct platform_device *pdev)
>  	if (IS_ERR(priv->gpiod_nwp)) {
>  		err = PTR_ERR(priv->gpiod_nwp);
>  		dev_err(&pdev->dev, "NWP GPIO request failed (%d)\n", err);
> -		goto err_unmap;
> +		return err;
>  	}
>  
>  	priv->gpiod_nce = devm_gpiod_get(&pdev->dev, "nce", GPIOD_OUT_HIGH);
>  	if (IS_ERR(priv->gpiod_nce)) {
>  		err = PTR_ERR(priv->gpiod_nce);
>  		dev_err(&pdev->dev, "NCE GPIO request failed (%d)\n", err);
> -		goto err_unmap;
> +		return err;
>  	}
>  
>  	priv->gpiod_nre = devm_gpiod_get(&pdev->dev, "nre", GPIOD_OUT_HIGH);
>  	if (IS_ERR(priv->gpiod_nre)) {
>  		err = PTR_ERR(priv->gpiod_nre);
>  		dev_err(&pdev->dev, "NRE GPIO request failed (%d)\n", err);
> -		goto err_unmap;
> +		return err;
>  	}
>  
>  	priv->gpiod_nwe = devm_gpiod_get(&pdev->dev, "nwe", GPIOD_OUT_HIGH);
>  	if (IS_ERR(priv->gpiod_nwe)) {
>  		err = PTR_ERR(priv->gpiod_nwe);
>  		dev_err(&pdev->dev, "NWE GPIO request failed (%d)\n", err);
> -		goto err_unmap;
> +		return err;
>  	}
>  
>  	priv->gpiod_ale = devm_gpiod_get(&pdev->dev, "ale", GPIOD_OUT_LOW);
>  	if (IS_ERR(priv->gpiod_ale)) {
>  		err = PTR_ERR(priv->gpiod_ale);
>  		dev_err(&pdev->dev, "ALE GPIO request failed (%d)\n", err);
> -		goto err_unmap;
> +		return err;
>  	}
>  
>  	priv->gpiod_cle = devm_gpiod_get(&pdev->dev, "cle", GPIOD_OUT_LOW);
>  	if (IS_ERR(priv->gpiod_cle)) {
>  		err = PTR_ERR(priv->gpiod_cle);
>  		dev_err(&pdev->dev, "CLE GPIO request failed (%d)\n", err);
> -		goto err_unmap;
> +		return err;
>  	}
>  
>  	/* Request array of data pins, initialize them as input */
> @@ -281,8 +299,9 @@ static int ams_delta_init(struct platform_device *pdev)
>  	if (IS_ERR(data_gpiods)) {
>  		err = PTR_ERR(data_gpiods);
>  		dev_err(&pdev->dev, "data GPIO request failed: %d\n", err);
> -		goto err_unmap;
> +		return err;
>  	}
> +	priv->data_gpiods = data_gpiods;
>  	priv->data_in = true;
>  
>  	/* Initialize the NAND controller object embedded in ams_delta_nand. */
> @@ -293,7 +312,7 @@ static int ams_delta_init(struct platform_device *pdev)
>  	/* Scan to find existence of the device */
>  	err = nand_scan(this, 1);
>  	if (err)
> -		goto err_unmap;
> +		return err;
>  
>  	/* Register the partitions */
>  	err = mtd_device_register(mtd, partition_info,
> @@ -306,9 +325,6 @@ static int ams_delta_init(struct platform_device *pdev)
>  err_nand_cleanup:
>  	nand_cleanup(this);
>  
> -err_unmap:
> -	iounmap(io_base);
> -
>  	return err;
>  }
>  
> @@ -319,13 +335,10 @@ static int ams_delta_cleanup(struct platform_device *pdev)
>  {
>  	struct ams_delta_nand *priv = platform_get_drvdata(pdev);
>  	struct mtd_info *mtd = nand_to_mtd(&priv->nand_chip);
> -	void __iomem *io_base = priv->io_base;
>  
> -	/* Release resources, unregister device */
> +	/* Unregister device */
>  	nand_release(mtd_to_nand(mtd));
>  
> -	iounmap(io_base);
> -
>  	return 0;
>  }
>  
