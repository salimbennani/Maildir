Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 20 Nov 2018 00:34:46 -0000
Received: from icoremail.net (unknown [209.85.215.175])
	by mail-app4 (Coremail) with SMTP id cS_KCgCn3zArB_NbmNjZAQ--.31495S3;
	Tue, 20 Nov 2018 02:55:39 +0800 (CST)
Received: from mail-pg1-f175.google.com (unknown [209.85.215.175])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwAXkEwoB_Nbw8hZAA--.3346S3;
	Tue, 20 Nov 2018 02:55:37 +0800 (CST)
Received: by mail-pg1-f175.google.com with SMTP id z10so14225660pgp.7
        for <xuliker@zju.edu.cn>; Mon, 19 Nov 2018 10:55:37 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-original-authentication-results:x-gm-message-state:delivered-to
         :subject:from:to:cc:date:message-id:user-agent:mime-version
         :content-transfer-encoding:sender:precedence:list-id;
        bh=44+ykJ5UOeFNtroAvPAU8Crc457sUc//pfw29X6UWGI=;
        b=bv/y73cA+Q19iHyaveDPkv+CPzapwMuttF9iRyO56wlV8gK/FkkK6zzfHCY1Kt2mwM
         6yhSZzbELAFx1PVUu5evlaUy3J9AptNJlQgXO9WH/dT3XUZsVsKbemXjZ5/G4AT0mq6p
         2KkW27X5/sWnC2TcRIuhat/pyelNXEtZkmxVPI5TC6DMwT3FqAhv1OJbaaDmoSKthO9F
         FhDv1JfmCLqFHkk7TVA6RwB+Mwzb2CZscvHvXOLVuRjy6wG06MKj8bZ2UuHvGRzDD7Ll
         10B5jwx2KqGOPE5nP/niW1NlawSIbUQIB4g2RS+H1XNAqvJsl/LNz90yyG5uRQRfPsUg
         MlPg==
X-Original-Authentication-Results: mx.google.com;       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;       dmarc=fail (p=NONE sp=NONE dis=NONE) header.from=intel.com
X-Gm-Message-State: AGRZ1gKQ//1agEZ3o2X3ZfWskUfj2txItumj+MQuNuE4tJiai+Gt+uqs
	GXZGqxRFTAbArWfBsSYgYBU4++B9EdSlmvAGn6z1Yl989yz0LXE=
X-Received: by 2002:aa7:8497:: with SMTP id u23mr19744179pfn.220.1542653736735;
        Mon, 19 Nov 2018 10:55:36 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:d106:0:0:0:0 with SMTP id l6-v6csp3047284pju;
        Mon, 19 Nov 2018 10:55:35 -0800 (PST)
X-Google-Smtp-Source: AFSGD/XudQypf6i8iywv+5pB7ERCMiAlABEEeVIFdrftStt+y1/jnnRLcv3Yv8slR4cVlW3Iotgx
X-Received: by 2002:a17:902:8b88:: with SMTP id ay8mr13297120plb.55.1542653735860;
        Mon, 19 Nov 2018 10:55:35 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542653735; cv=none;
        d=google.com; s=arc-20160816;
        b=I7OaIZCroHbljnUGTb+LKjWJvHzmsbuyA+8WBSoetitoLP1rX+4VzyzpeZ1aZyXV6R
         dtwmZ8xr69VTIVtnxVFUC7fhZqn+PaK579KaoTsOi/1U0sl08S+kTPhjzTyUsrgSAO92
         nQo73e79n8aphvLCn8RFtr7KG68nIn4oFlvsbjd4fmEc0KzdQ1etavbFqwcLyd1In7uQ
         SiM0a2EbqHjgGiZgvNQLTG9Ga0qtQPCu0uTvF41z4144u/j0gnp0t3VhWnnXub3VEhEp
         n7+WDujS7f2QDgj+ZGyG3F1Fn9XTRIR45/XwUmDISXNFzevar7F2RKjAAjJl5o19bDY1
         X3rw==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:content-transfer-encoding:mime-version
         :user-agent:message-id:date:cc:to:from:subject;
        bh=44+ykJ5UOeFNtroAvPAU8Crc457sUc//pfw29X6UWGI=;
        b=CllrbwuY1vpMmzlrjbMZdecu2D6N7fJSfZRGRAz35DWXh4ZNDPuuD5KU/H/3pwCL+4
         012ltDGPeg6WxablhMXiF3c2PkILxs304EGKGzWndnooCfPDKbHVpyl5OUDeXpmZI7DQ
         YtP2/DtR5lB4m8tQeWodjrRGMusP8C9zhCzi16uMmB+vFnfR21yE0GfsbTfooDaFjOll
         /aCLW4N40FrRccBJwTgwjyQHgOwuIMwnecnbHjB0ZryauF9uypS57cASaNDklQlPVtFj
         EgmKoOo9uLztgsKxd07c5pm8iHd7V43H5yKXmsWQFx68/odslIx2AElHOlWTZVvDWtIH
         aK2w==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;
       dmarc=fail (p=NONE sp=NONE dis=NONE) header.from=intel.com
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id q8-v6si18780614pll.142.2018.11.19.10.55.21;
        Mon, 19 Nov 2018 10:55:35 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726343AbeKTFUJ (ORCPT <rfc822;nullbytes00@gmail.com>
        + 99 others); Tue, 20 Nov 2018 00:20:09 -0500
Received: from mga06.intel.com ([134.134.136.31]:32253 "EHLO mga06.intel.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1725770AbeKTFUJ (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 20 Nov 2018 00:20:09 -0500
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from orsmga001.jf.intel.com ([10.7.209.18])
  by orsmga104.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 19 Nov 2018 10:55:15 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,253,1539673200"; 
   d="scan'208";a="109585298"
Received: from tstruk-mobl1.jf.intel.com ([10.7.196.53])
  by orsmga001.jf.intel.com with ESMTP; 19 Nov 2018 10:55:15 -0800
Subject: [PATCH v5] tpm: add support for partial reads
From: Tadeusz Struk <tadeusz.struk@intel.com>
To: jarkko.sakkinen@linux.intel.com
Cc: jgg@ziepe.ca, linux-integrity@vger.kernel.org,
        linux-security-module@vger.kernel.org,
        linux-kernel@vger.kernel.org, tadeusz.struk@intel.com
Date: Mon, 19 Nov 2018 10:55:15 -0800
Message-ID: <154265371562.23494.10113870855345906523.stgit@tstruk-mobl1.jf.intel.com>
User-Agent: StGit/unknown-version
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwAXkEwoB_Nbw8hZAA--.3346S3
Authentication-Results: mail-app4; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoW3Xr4DAr47uFWUKryDCw1Dtrb_yoWxZFWDpa
	yYk3s3Jrs8Jr42krn7JFsIvF1fW3Z5WFyjqFy8Ga47Ar9rZ3Z0gF1FkF1jqFy7ZrZ7JrZa
	9ayrWryUGr1UZw7anT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUPjb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Xr0_Ar1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1l84ACjcxK6I8E
	87Iv67AKxVW0oVCq3wA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_GcCE3s1le2I262IYc4CY6c
	8Ij28IcVAaY2xG8wAqx4xG64xvF2IEw4CE5I8CrVC2j2WlYx0E2Ix0cI8IcVAFwI0_JrI_
	JrylYx0Ex4A2jsIE14v26r4j6F4UMcvjeVCFs4IE7xkEbVWUJVW8JwACjcxG0xvEwIxGrw
	CjxxvEa2IrMxkF7I0Ew4C26cxK6c8Ij28IcwCY1Ik26cxK6xAEc7vF6xCjj44lc2xSY4AK
	6IIF6rylc2IjII80xcxEwVAKI48JMxvI42IY6xIIjxv20xvE14v26r1I6r4UMxvI42IY6x
	IIjxv20xvEc7CjxVAFwI0_Jr0_Gr1lcIIF0xvEx4A2jsIE14v26F4UJVW0owCYIxAIcVC2
	z280aVCY1x0267AKxVWxJr0_GcWl42xK82IYc2Ij64vIr41l42xK82IY64kExVAvwVAq07
	x20xyl4x8a6x804xWl4I8I3I0E4IkC6x0Yz7v_Jr0_Gr1lx2IqxVAqx4xG67AKxVWUJVWU
	GwC20s026x8GjcxK67AKxVWUGVWUWwC2zVAF1VAY17CE14v26r126r1DMIIYrxkI7VAKI4
	8JMIIF0xvE42xK8VAvwI8IcIk0rVW8JVW3JbIYCTnIWIevJa73UjIFyTuYvjxUQ4SrUUUU
	U

Currently to read a response from the TPM device an application needs
provide big enough buffer for the whole response and read it in one go.
The application doesn't know how big the response it beforehand so it
always needs to maintain a 4K buffer and read the max (4K).
In case if the user of the TSS library doesn't provide big enough
buffer the TCTI spec says that the library should set the required
size and return TSS2_TCTI_RC_INSUFFICIENT_BUFFER error code so that the
application could allocate a bigger buffer and call receive again.
To make it possible in the TSS library, this requires being able to do
partial reads from the driver.
The library would read the 10 bytes header first to get the actual size
of the response from the header, and then read the rest of the response.

This patch adds support for partial reads, i.e. the user can read the
response in one or multiple reads, until the whole response is consumed.
The user can also read only part of the response and ignore
the rest by issuing a new write to send a new command.

Signed-off-by: Tadeusz Struk <tadeusz.struk@intel.com>
---
The usecase is implemented in this TSS commit:
https://github.com/tpm2-software/tpm2-tss/commit/ce982f67a67dc08e24683d30b05800648d8a264c

Changes in v5:
 - Merge the two patches back into one.
 - Change variable 'partial_data' to a new flag 'response_read'.
 - Update the logic around partial_data to reflect the new flag.
 - Add a new variable response_length that keeps track of how much
   of the response is left.

Changes in v4:
 - Use unsigned type for response_pending as it will never be negative.
 - Rebased on top of name change data_pending to transmit_result patch.

Changes in v3:
 - Remove link to usecase implemented in TSS out of the commit message.
 - Update the conddition in tpm_common_poll() to take into account
   the partial_data also.

Changes in v2:
 - Allow writes after only partial response is consumed to maintain
   backwords compatibility.
---
 drivers/char/tpm/tpm-dev-common.c |   51 +++++++++++++++++++++++++------------
 drivers/char/tpm/tpm-dev.h        |    7 +++--
 2 files changed, 39 insertions(+), 19 deletions(-)

diff --git a/drivers/char/tpm/tpm-dev-common.c b/drivers/char/tpm/tpm-dev-common.c
index 99b5133a9d05..344739223451 100644
--- a/drivers/char/tpm/tpm-dev-common.c
+++ b/drivers/char/tpm/tpm-dev-common.c
@@ -40,7 +40,7 @@ static void tpm_async_work(struct work_struct *work)
 
 	tpm_put_ops(priv->chip);
 	if (ret > 0) {
-		priv->data_pending = ret;
+		priv->response_length = ret;
 		mod_timer(&priv->user_read_timer, jiffies + (120 * HZ));
 	}
 	mutex_unlock(&priv->buffer_mutex);
@@ -63,7 +63,8 @@ static void tpm_timeout_work(struct work_struct *work)
 					      timeout_work);
 
 	mutex_lock(&priv->buffer_mutex);
-	priv->data_pending = 0;
+	priv->response_read = true;
+	priv->response_length = 0;
 	memset(priv->data_buffer, 0, sizeof(priv->data_buffer));
 	mutex_unlock(&priv->buffer_mutex);
 	wake_up_interruptible(&priv->async_wait);
@@ -74,6 +75,7 @@ void tpm_common_open(struct file *file, struct tpm_chip *chip,
 {
 	priv->chip = chip;
 	priv->space = space;
+	priv->response_read = true;
 
 	mutex_init(&priv->buffer_mutex);
 	timer_setup(&priv->user_read_timer, user_reader_timeout, 0);
@@ -90,22 +92,35 @@ ssize_t tpm_common_read(struct file *file, char __user *buf,
 	ssize_t ret_size = 0;
 	int rc;
 
-	del_singleshot_timer_sync(&priv->user_read_timer);
-	flush_work(&priv->timeout_work);
 	mutex_lock(&priv->buffer_mutex);
 
-	if (priv->data_pending) {
-		ret_size = min_t(ssize_t, size, priv->data_pending);
-		if (ret_size > 0) {
-			rc = copy_to_user(buf, priv->data_buffer, ret_size);
-			memset(priv->data_buffer, 0, priv->data_pending);
-			if (rc)
-				ret_size = -EFAULT;
+	if (priv->response_length) {
+		priv->response_read = true;
+
+		ret_size = min_t(ssize_t, size, priv->response_length);
+		if (!ret_size) {
+			priv->response_length = 0;
+			goto out;
 		}
 
-		priv->data_pending = 0;
+		rc = copy_to_user(buf, priv->data_buffer + *off, ret_size);
+		if (rc) {
+			memset(priv->data_buffer, 0, TPM_BUFSIZE);
+			priv->response_length = 0;
+			ret_size = -EFAULT;
+		} else {
+			memset(priv->data_buffer + *off, 0, ret_size);
+			priv->response_length -= ret_size;
+			*off += ret_size;
+		}
 	}
 
+out:
+	if (!priv->response_length) {
+		*off = 0;
+		del_singleshot_timer_sync(&priv->user_read_timer);
+		flush_work(&priv->timeout_work);
+	}
 	mutex_unlock(&priv->buffer_mutex);
 	return ret_size;
 }
@@ -125,7 +140,7 @@ ssize_t tpm_common_write(struct file *file, const char __user *buf,
 	 * tpm_read or a user_read_timer timeout. This also prevents split
 	 * buffered writes from blocking here.
 	 */
-	if (priv->data_pending != 0 || priv->command_enqueued) {
+	if (!priv->response_read || priv->command_enqueued) {
 		ret = -EBUSY;
 		goto out;
 	}
@@ -150,6 +165,10 @@ ssize_t tpm_common_write(struct file *file, const char __user *buf,
 		goto out;
 	}
 
+	priv->response_length = 0;
+	priv->response_read = false;
+	*off = 0;
+
 	/*
 	 * If in nonblocking mode schedule an async job to send
 	 * the command return the size.
@@ -168,7 +187,7 @@ ssize_t tpm_common_write(struct file *file, const char __user *buf,
 	tpm_put_ops(priv->chip);
 
 	if (ret > 0) {
-		priv->data_pending = ret;
+		priv->response_length = ret;
 		mod_timer(&priv->user_read_timer, jiffies + (120 * HZ));
 		ret = size;
 	}
@@ -184,7 +203,7 @@ __poll_t tpm_common_poll(struct file *file, poll_table *wait)
 
 	poll_wait(file, &priv->async_wait, wait);
 
-	if (priv->data_pending)
+	if (!priv->response_read || priv->response_length)
 		mask = EPOLLIN | EPOLLRDNORM;
 	else
 		mask = EPOLLOUT | EPOLLWRNORM;
@@ -201,7 +220,7 @@ void tpm_common_release(struct file *file, struct file_priv *priv)
 	del_singleshot_timer_sync(&priv->user_read_timer);
 	flush_work(&priv->timeout_work);
 	file->private_data = NULL;
-	priv->data_pending = 0;
+	priv->response_length = 0;
 }
 
 int __init tpm_dev_common_init(void)
diff --git a/drivers/char/tpm/tpm-dev.h b/drivers/char/tpm/tpm-dev.h
index a126b575cb8c..a744d9bec7b6 100644
--- a/drivers/char/tpm/tpm-dev.h
+++ b/drivers/char/tpm/tpm-dev.h
@@ -9,14 +9,15 @@ struct file_priv {
 	struct tpm_chip *chip;
 	struct tpm_space *space;
 
-	/* Holds the amount of data passed or an error code from async op */
-	ssize_t data_pending;
 	struct mutex buffer_mutex;
-
 	struct timer_list user_read_timer;      /* user needs to claim result */
 	struct work_struct timeout_work;
 	struct work_struct async_work;
 	wait_queue_head_t async_wait;
+	/* Holds the resul of the last successful call to tpm_transmit() */
+	size_t response_length;
+	/* Becomes true when the response (or part of it) is consumed */
+	bool response_read;
 	bool command_enqueued;
 
 	u8 data_buffer[TPM_BUFSIZE];
