Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (61.164.42.155:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 11 Nov 2018 15:04:19 -0000
Received: from icoremail.net (unknown [209.85.210.178])
	by mail-app2 (Coremail) with SMTP id by_KCgCn39zafedbzw1yAQ--.34438S3;
	Sun, 11 Nov 2018 08:54:51 +0800 (CST)
Received: from mail-pf1-f178.google.com (unknown [209.85.210.178])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwB38EzYfedbBXQpAA--.14006S3;
	Sun, 11 Nov 2018 08:54:48 +0800 (CST)
Received: by mail-pf1-f178.google.com with SMTP id b81-v6so2098360pfe.11
        for <xuliker@zju.edu.cn>; Sat, 10 Nov 2018 16:54:48 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-original-authentication-results:x-gm-message-state:delivered-to
         :message-id:subject:from:to:cc:date:in-reply-to:references
         :user-agent:mime-version:content-transfer-encoding:sender:precedence
         :list-id;
        bh=J4BS2MUNcLLVYXSixzR+kz1UFw4uWJKgK+mGseK9//E=;
        b=Sb4MlEOepj/kBfCcXulLNg95cA8SUL0OOYj8sH4B1ZjzgfUUnWrxEvlzpyJ1//f6Xj
         P2Q9dQK2KHS3+iiUf/Id+xDED1IZ0+2CuVDK/3tZdMuZc4grk4+dPz0wsBPDWFutunSk
         eA+EOvWmInn8I7YhJbOTOExC8YvxyFY5/u4b9z/IEFWMRc3CYbl0D7hDW8JdDYapxNo+
         N/P8Wtit5/Gy4Lz0eiCWSE3NLpDEMEm6JtIp1MQEpY/shxLoNKs/hR/UhDW7ne/XpE0o
         iH0fKXsBAXm4BPn7GmJNcN4tDjptBLUobwek59xo+J8ClOLyOenkVJZDVDXNe9nbhGrW
         vCVg==
X-Original-Authentication-Results: mx.google.com;       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
X-Gm-Message-State: AGRZ1gLy8G3IifGtwNZTOxrKZr+uxze1CtdXmG8/EfKtLR1G/hUxOpKX
	6bEngnQarYHJEDivHJmSFVbndqzxZapX50tXqKN2ikWTIo9Gx7I=
X-Received: by 2002:a62:d084:: with SMTP id p126-v6mr15387762pfg.147.1541897688181;
        Sat, 10 Nov 2018 16:54:48 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp1620661pjt;
        Sat, 10 Nov 2018 16:54:47 -0800 (PST)
X-Google-Smtp-Source: AJdET5fSQTT4cy5kDnsHHMQ7sg7BaX97pvvW0TmWczjhlT8p0bIhkSxzFDW44ttPa1JCB797j+fK
X-Received: by 2002:a17:902:4083:: with SMTP id c3-v6mr14675591pld.181.1541897687143;
        Sat, 10 Nov 2018 16:54:47 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1541897687; cv=none;
        d=google.com; s=arc-20160816;
        b=P/oSlhi2QWDppkLay2EhesWdEHmtjtxVtUfUXl7Dho6JsM/iu/seD6blk4pbCVpEqg
         kOM/95xT6gIh5yHTUmhE+0UKXEd/XYEnlX9aP0qGB6p2y4owr6mr3KJOOmX9TZ6ogkT8
         sRxyWmmbc2JI0cnrq4zWuLEpFzLf840cdceSYLRcpvf1ZlEMUGl168UZhfbYMkXuqaLl
         8doYywmBvPY5QHpNuBWckw+2jLiXh5zzA8Ma2+uWySoDoHU+F54GXl47TX3z9L6mAND+
         Q7v/jDI9wKslejlhEkc9uN0u4J+hFr4Xf5GyGS70D+yFPDwoauX8XM7eYWoGNziK8JCr
         Cq4w==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:content-transfer-encoding:mime-version
         :user-agent:references:in-reply-to:date:cc:to:from:subject
         :message-id;
        bh=J4BS2MUNcLLVYXSixzR+kz1UFw4uWJKgK+mGseK9//E=;
        b=rMlcfCkv60/rhi2b7peSo7dW5e//CzP6Nr0cbF/YCFkeBN/JfoQ+9gYeVbC277ewZe
         Gh06quzW8FU134zGdBR6OFQwIoMzbQgEGPG/SFPSIjQU4zU7qneUkA2EupUruLqOlg3t
         XLGFdwitVZr8O+FD65JW112st2jEHHsZqGEiD6KRSoTDQGkHiMdwNcakOIZ3mB0j0M+o
         rP9CxVfcexYEbnSMjUiujeVeVJf38fQ4m2FK0e98Tuw2cQ7kT/8TBRzI3QHrB8CBv6tT
         69ZaJtrYFwQEWfqIR5TNH49HVnBVPGW4P16tKPpf2CCvEnY/Cp/jM5fDgEYg8w4NGtW8
         aXzg==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id k5si11325591pgr.69.2018.11.10.16.54.32;
        Sat, 10 Nov 2018 16:54:47 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727260AbeKKKlT (ORCPT <rfc822;tu.k.phung@gmail.com>
        + 99 others); Sun, 11 Nov 2018 05:41:19 -0500
Received: from smtprelay0149.hostedemail.com ([216.40.44.149]:56714 "EHLO
        smtprelay.hostedemail.com" rhost-flags-OK-OK-OK-FAIL)
        by vger.kernel.org with ESMTP id S1727037AbeKKKlS (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sun, 11 Nov 2018 05:41:18 -0500
Received: from filter.hostedemail.com (clb03-v110.bra.tucows.net [216.40.38.60])
        by smtprelay08.hostedemail.com (Postfix) with ESMTP id 3D9DF182CED34;
        Sun, 11 Nov 2018 00:54:25 +0000 (UTC)
X-Session-Marker: 6A6F6540706572636865732E636F6D
X-Spam-Summary: 10,1,0,,d41d8cd98f00b204,joe@perches.com,:::::::,RULES_HIT:2:41:69:355:379:599:800:960:966:973:982:988:989:1260:1277:1311:1313:1314:1345:1359:1437:1515:1516:1518:1535:1593:1594:1605:1730:1747:1777:1792:2196:2199:2393:2553:2559:2562:2693:2828:2895:2903:2910:3138:3139:3140:3141:3142:3622:3865:3866:3867:3868:3870:3871:3872:3873:3874:4049:4118:4250:4321:4384:4385:4395:5007:6119:7514:7903:7974:10007:10226:10394:10848:11026:11232:11658:11914:12043:12291:12296:12438:12555:12683:12740:12760:12895:12986:13439:14096:14097:14110:14659:21080:21220:21433:21451:21627:21789:21796:30012:30036:30045:30054:30070:30090:30091,0,RBL:47.151.153.53:@perches.com:.lbl8.mailshell.net-62.8.0.100 64.201.201.201,CacheIP:none,Bayesian:0.5,0.5,0.5,Netcheck:none,DomainCache:0,MSF:not bulk,SPF:fn,MSBL:0,DNSBL:neutral,Custom_rules:0:1:0,LFtime:28,LUA_SUMMARY:none
X-HE-Tag: apple02_60aa6b4ffe923
X-Filterd-Recvd-Size: 7699
Received: from XPS-9350.home (unknown [47.151.153.53])
        (Authenticated sender: joe@perches.com)
        by omf07.hostedemail.com (Postfix) with ESMTPA;
        Sun, 11 Nov 2018 00:54:24 +0000 (UTC)
Message-ID: <eed85a91c5181b1c3cfd54e3fd9d128f686ada89.camel@perches.com>
Subject: Re: [PATCH] Fix coding style issue in xfs_acl.c and xfs_aops.c
From: Joe Perches <joe@perches.com>
To: hmsjwzb <weizhefix@gmail.com>, darrick.wong@oracle.com
Cc: linux-xfs@vger.kernel.org, linux-kernel@vger.kernel.org
Date: Sat, 10 Nov 2018 16:54:22 -0800
In-Reply-To: <20181111003603.7598-1-weizhefix@gmail.com>
References: <20181111003603.7598-1-weizhefix@gmail.com>
Content-Type: text/plain; charset="ISO-8859-1"
User-Agent: Evolution 3.30.1-1build1 
Mime-Version: 1.0
Content-Transfer-Encoding: 7bit
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwB38EzYfedbBXQpAA--.14006S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoW3Gry7Kw1DKw13ZFWfAr43KFg_yoWxWF4rpr
	Z3Kw13GF4DJ34IvrZrXw1jvw1rK34rCr45KF93ZwnFva98Jrn2kryvya10qa97G3yfGrWY
	vr4UuFyDG3y5ZFJanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUPFb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Gr0_Xr1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1l84ACjcxK6I8E
	87Iv67AKxVW0oVCq3wA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_GcCE3s1le2I262IYc4CY6c
	8Ij28IcVAaY2xG8wAqx4xG64xvF2IEw4CE5I8CrVC2j2WlYx0E2Ix0cI8IcVAFwI0_Jr0_
	Jr4lYx0Ex4A2jsIE14v26r1j6r4UMcvjeVCFs4IE7xkEbVWUJVW8JwACjcxG0xvEwIxGrw
	CjxxvEa2IrMxkF7I0Ew4C26cxK6c8Ij28IcwCY1Ik26cxK6xAEc7vF6xCjj44lc2xSY4AK
	6IIF6w1lc2IjII80xcxEwVAKI48JMxvI42IY6xIIjxv20xvE14v26r1j6r1xMxvI42IY6x
	IIjxv20xvEc7CjxVAFwI0_Jr0_Gr1lcIIF0xvEx4A2jsIE14v26r4UJVWxJr1lcIIF0xvE
	x4A2jsIEc7CjxVAFwI0_Gr1j6F4UJwCF04k20xvY0x0EwIxGrwCF04k20xvEw4C26cxK6c
	8Ij28IcwCF72vE77IF4wCFx2IqxVCFs4IE7xkEbVWUJVW8JwC20s026c02F40E14v26r1j
	6r18MI8I3I0E7480Y4vE14v26r106r1rMI8E67AF67kF1VAFwI0_JF0_Jw1lIxkGc2Ij64
	vIr41lIxAIcVCF04k26cxKx2IYs7xG6Fyj6rWUJbIYCTnIWIevJa73UjIFyTuYvjxUQtC7
	UUUUU

On Sun, 2018-11-11 at 08:36 +0800, hmsjwzb wrote:
> Possible unwrapped commit description (prefer a maximum 75 chars per line)

This commit message makes no sense.

Do say what you do to the code in the commit description.


> Signed-off-by: hmsjwzb <weizhefix@gmail.com>
> ---
>  fs/xfs/xfs_acl.c  |  4 +--
>  fs/xfs/xfs_aops.c | 73 ++++++++++++++++++++++++-----------------------
>  2 files changed, 39 insertions(+), 38 deletions(-)
> 
> diff --git a/fs/xfs/xfs_acl.c b/fs/xfs/xfs_acl.c
> index 8039e35147dd..5c779c161727 100644
> --- a/fs/xfs/xfs_acl.c
> +++ b/fs/xfs/xfs_acl.c
> @@ -19,8 +19,8 @@
>  
>  /*
>   * Locking scheme:
> - *  - all ACL updates are protected by inode->i_mutex, which is taken before
> - *    calling into this file.
> + *  - all ACL updates are protected by inode->i_mutex,
> + *    which is taken before calling into this file.
>   */
>  
>  STATIC struct posix_acl *
> diff --git a/fs/xfs/xfs_aops.c b/fs/xfs/xfs_aops.c
> index 338b9d9984e0..1a6cb88ffdb7 100644
> --- a/fs/xfs/xfs_aops.c
> +++ b/fs/xfs/xfs_aops.c
> @@ -81,8 +81,8 @@ xfs_finish_page_writeback(
>  
>  /*
>   * We're now finished for good with this ioend structure.  Update the page
> - * state, release holds on bios, and finally free up memory.  Do not use the
> - * ioend after this.
> + * state, release holds on bios, and finally free up memory.
> + * Do not use the ioend after this.
>   */
>  STATIC void
>  xfs_destroy_ioend(
> @@ -464,18 +464,18 @@ xfs_map_blocks(
>  }
>  
>  /*
> - * Submit the bio for an ioend. We are passed an ioend with a bio attached to
> - * it, and we submit that bio. The ioend may be used for multiple bio
> - * submissions, so we only want to allocate an append transaction for the ioend
> - * once. In the case of multiple bio submission, each bio will take an IO
> - * reference to the ioend to ensure that the ioend completion is only done once
> - * all bios have been submitted and the ioend is really done.
> + * Submit the bio for an ioend. We are passed an ioend with a bio attached
> + * to it, and we submit that bio. The ioend may be used for multiple bio
> + * submissions, so we only want to allocate an append transaction for the
> + * ioend once. In the case of multiple bio submission, each bio will take
> + * an IO reference to the ioend to ensure that the ioend completion is only
> + * done once all bios have been submitted and the ioend is really done.
>   *
> - * If @fail is non-zero, it means that we have a situation where some part of
> - * the submission process has failed after we have marked paged for writeback
> - * and unlocked them. In this situation, we need to fail the bio and ioend
> - * rather than submit it to IO. This typically only happens on a filesystem
> - * shutdown.
> + * If @fail is non-zero, it means that we have a situation where some part
> + * of the submission process has failed after we have marked paged for
> + * writeback and unlocked them. In this situation, we need to fail the bio
> + * and ioend rather than submit it to IO. This typically only happens
> + * on a filesystem shutdown.
>   */
>  STATIC int
>  xfs_submit_ioend(
> @@ -583,8 +583,8 @@ xfs_chain_bio(
>  }
>  
>  /*
> - * Test to see if we have an existing ioend structure that we could append to
> - * first, otherwise finish off the current ioend and start another.
> + * Test to see if we have an existing ioend structure that we could append
> + * to first, otherwise finish off the current ioend and start another.
>   */
>  STATIC void
>  xfs_add_to_ioend(
> @@ -637,15 +637,16 @@ xfs_vm_invalidatepage(
>  }
>  
>  /*
> - * If the page has delalloc blocks on it, we need to punch them out before we
> - * invalidate the page.  If we don't, we leave a stale delalloc mapping on the
> - * inode that can trip up a later direct I/O read operation on the same region.
> + * If the page has delalloc blocks on it, we need to punch them out before
> + * we invalidate the page.  If we don't, we leave a stale delalloc mapping
> + * on the inode that can trip up a later direct I/O read operation on
> + * the same region.
>   *
> - * We prevent this by truncating away the delalloc regions on the page.  Because
> - * they are delalloc, we can do this without needing a transaction. Indeed - if
> - * we get ENOSPC errors, we have to be able to do this truncation without a
> - * transaction as there is no space left for block reservation (typically why we
> - * see a ENOSPC in writeback).
> + * We prevent this by truncating away the delalloc regions on the page.
> + * Because they are delalloc, we can do this without needing a transaction.
> + * Indeed - if we get ENOSPC errors, we have to be able to do this
> + * truncation without a transaction as there is no space left for block
> + * reservation (typically why we see a ENOSPC in writeback).
>   */
>  STATIC void
>  xfs_aops_discard_page(
> @@ -674,20 +675,20 @@ xfs_aops_discard_page(
>  }
>  
>  /*
> - * We implement an immediate ioend submission policy here to avoid needing to
> - * chain multiple ioends and hence nest mempool allocations which can violate
> - * forward progress guarantees we need to provide. The current ioend we are
> - * adding blocks to is cached on the writepage context, and if the new block
> - * does not append to the cached ioend it will create a new ioend and cache that
> - * instead.
> + * We implement an immediate ioend submission policy here to avoid needing
> + * to chain multiple ioends and hence nest mempool allocations which can
> + * violate forward progress guarantees we need to provide. The current
> + * ioend we are adding blocks to is cached on the writepage context,
> + * and if the new block does not append to the cached ioend it will create
> + * a new ioend and cache that instead.
>   *
> - * If a new ioend is created and cached, the old ioend is returned and queued
> - * locally for submission once the entire page is processed or an error has been
> - * detected.  While ioends are submitted immediately after they are completed,
> - * batching optimisations are provided by higher level block plugging.
> - *
> - * At the end of a writeback pass, there will be a cached ioend remaining on the
> - * writepage context that the caller will need to submit.
> + * If a new ioend is created and cached, the old ioend is returned and
> + * queued locally for submission once the entire page is processed or an
> + * error has been detected.  While ioends are submitted immediately
> + * after they are completed, batching optimisations are provided by higher
> + * level block plugging.
> + * At the end of a writeback pass, there will be a cached ioend remaining
> + * on the writepage context that the caller will need to submit.
>   */
>  static int
>  xfs_writepage_map(
