Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (61.164.42.155:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 10 Nov 2018 00:55:32 -0000
Received: from icoremail.net (unknown [209.85.214.174])
	by mail-app2 (Coremail) with SMTP id by_KCgD3_5vJyeVba3RpAQ--.31659S3;
	Sat, 10 Nov 2018 01:54:29 +0800 (CST)
Received: from mail-pl1-f174.google.com (unknown [209.85.214.174])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwCnjUnGyeVbmpYjAA--.1480S3;
	Sat, 10 Nov 2018 01:54:15 +0800 (CST)
Received: by mail-pl1-f174.google.com with SMTP id w22-v6so1271895plk.0
        for <xuliker@zju.edu.cn>; Fri, 09 Nov 2018 09:54:15 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:mime-version
         :in-reply-to:references:from:date:message-id:subject:to:cc:sender
         :precedence:list-id;
        bh=E95R29DOT5MM3H1746Z4C+nswoj3mJlY/BGH9VkG6+E=;
        b=FFrT1TuvyggJY2Ccc5uAgHUQSEQwVolofU4VvFweI0wtmsz5IML57PdGk5RNAj42QK
         3XyxTfCfjdAR6q4qFdoQ3StWW/U8Ts4wzfQol7buA8y8Kg380IekRmVbu0oKDSahB9ib
         ZyBOkBniG/6rrwijh5nzxtLok0d90QamVIOKpNwKnewcy6Qpea2ZtMmCp0CRMscXJ07x
         rUJpgk0V2PSEfCUtQlK0nV9FEoyaJJK3jtBiJpBcAxhLw6Mt0/oacsUAKjbsisAvxKWw
         BN2t+W9tSJPMUAgQA5JzAxbaoMBcGGG8WqLVLkVPFXt8aJFv/3bv+R1V3z+V0n8Nn4dE
         4Qww==
X-Gm-Message-State: AGRZ1gKLjfIg8TKr+a/oyNT1mUWEWOkUCdczYyboqJYR7ir30+vBv8ho
	u2DwLMq9vvwWCM4oYUwmNGIEgY2VYvA8tx4kPSIRGkchXrXCgC2TPg==
X-Received: by 2002:a17:902:bd4a:: with SMTP id b10-v6mr9633115plx.171.1541786054686;
        Fri, 09 Nov 2018 09:54:14 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp192172pjt;
        Fri, 9 Nov 2018 09:54:13 -0800 (PST)
X-Google-Smtp-Source: AJdET5fTaikua3U8uOLHcZl7EsIjvk5XFMdSmyvqFUcSBl8RJFYNO9hRwFSHN9yyt1Ae9dK+GiR+
X-Received: by 2002:a17:902:d24:: with SMTP id 33-v6mr9913711plu.319.1541786053952;
        Fri, 09 Nov 2018 09:54:13 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1541786053; cv=none;
        d=google.com; s=arc-20160816;
        b=SwfzQO5YczP3nYyVy8UjjGVM8UH4yHO4hp82UQsyR9q2lLCiiXkPt9l2BS/F85fyJc
         8v8r6UqwHmwi2tJhQ0zgbidYMI6MmGdVBkOe5BGF9Cc1C1vJKqJNobHHze8kEJgYIW8e
         L5gSpRXSRQohHUVOqhPIy4DzH1bUHgG4P7jJon6OYqJiDXnX+e1Z4FSYUkv5MSY4RD5+
         6VOJcWh4eI+UNCbAKqRN0fOoz/F5wnSvXHIEy5EYk93w5GFixv1KWV6XDPRcsEzcjNxe
         Sg9j3nmhBuPqQifm+dQ0v2mbUbD6mqFGAa7eGxZXYu0hmwW0F8HWHDXIw2CR2sajLe4F
         +Jiw==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:cc:to:subject:message-id:date:from
         :references:in-reply-to:mime-version:dkim-signature;
        bh=E95R29DOT5MM3H1746Z4C+nswoj3mJlY/BGH9VkG6+E=;
        b=N1rzBlA4n4xBuPbtYNHlbL2oeFgbbOuGlDUAXABKjSXkUB6R+dNPIRHnM3PsDHeKjo
         bJBtKMDqLIljmgUYDuY4qh6Icc4j/5kxT5eAuC41w9wjgPk2ESDw6YD3MnxeUV3y1VV9
         XFIWNbcXxECoEbga2mnZg2OOWAlirkJNYzNdHP3zr7FF4JaXg8v91couyqRuGdCT91S/
         SaTi57APKTSvWw51r8MjcF815Iuk6m74BPHF/GG5xs0oDghPDPDHNvNMyL8yf3sWw0U/
         FXJAZaItZjJ0NxrYV7gYaNTEUWxZHPjAOmLs/HdaYcIo5Pxh/x0R1b7CkCVyMxB9SCMi
         IovA==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@linaro.org header.s=google header.b=FBoZN8mv;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;
       dmarc=pass (p=NONE sp=NONE dis=NONE) header.from=linaro.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id u189-v6si8923338pfu.263.2018.11.09.09.53.58;
        Fri, 09 Nov 2018 09:54:13 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728589AbeKJDeJ (ORCPT <rfc822;tu.k.phung@gmail.com>
        + 99 others); Fri, 9 Nov 2018 22:34:09 -0500
Received: from mail-it1-f194.google.com ([209.85.166.194]:35630 "EHLO
        mail-it1-f194.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1728108AbeKJDeJ (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 9 Nov 2018 22:34:09 -0500
Received: by mail-it1-f194.google.com with SMTP id v11so4542007itj.0
        for <linux-kernel@vger.kernel.org>; Fri, 09 Nov 2018 09:52:30 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc;
        bh=E95R29DOT5MM3H1746Z4C+nswoj3mJlY/BGH9VkG6+E=;
        b=FBoZN8mvfeR23+MowdwI4g93WdTL/aJ/GQOU4WYoxc7wnDBViJVaTNoCahGP7+9BWI
         fN9fcSbCZkFaOCFvw/aD69a3DcgAA1cTOid5ILrewdpPYappF/cP8vb+YarJ1vheAHJC
         IihgcsEXJCrXkqjp+N/pK7AqMG3c/etorDPIA=
X-Received: by 2002:a24:8347:: with SMTP id d68-v6mr3295999ite.158.1541785950378;
 Fri, 09 Nov 2018 09:52:30 -0800 (PST)
MIME-Version: 1.0
Received: by 2002:a6b:4f16:0:0:0:0:0 with HTTP; Fri, 9 Nov 2018 09:52:29 -0800 (PST)
In-Reply-To: <20181109174608.eahqh4fkyl3k2gvs@treble>
References: <cover.1541711457.git.jpoimboe@redhat.com> <3cf04e113d71c9f8e4be95fb84a510f085aa4afa.1541711457.git.jpoimboe@redhat.com>
 <CAKv+Gu9bMkFEx_GxH3uLm0gveQurp7ELDi6C5NvpugufPFMbRA@mail.gmail.com>
 <20181109151028.faifw66enzye32gg@treble> <CAKv+Gu_J1b30+pMNRF0icEpyew4TM_VP3ShG=4HkLnk=fRL9zg@mail.gmail.com>
 <CAKv+Gu-DOW2WT=h8C0x5igbCDAc2bp3mTRM6U_wTJST+RnVicg@mail.gmail.com>
 <20181109173106.kbghzsdsu7oachl6@treble> <CAKv+Gu-9XYOwAPJ5m6F4Cn9Uo6dvbtEG9p0knX+_XcjHp2QKGA@mail.gmail.com>
 <20181109174608.eahqh4fkyl3k2gvs@treble>
From: Ard Biesheuvel <ard.biesheuvel@linaro.org>
Date: Fri, 9 Nov 2018 18:52:29 +0100
Message-ID: <CAKv+Gu8b1KbRtJPrbXk3+K=1uRV6OcvB+zEMYk-UK3sFxKzsgQ@mail.gmail.com>
Subject: Re: [RFC PATCH 1/3] static_call: Add static call infrastructure
To: Josh Poimboeuf <jpoimboe@redhat.com>
Cc: Linux Kernel Mailing List <linux-kernel@vger.kernel.org>,
        "the arch/x86 maintainers" <x86@kernel.org>,
        Andy Lutomirski <luto@kernel.org>,
        Steven Rostedt <rostedt@goodmis.org>,
        Peter Zijlstra <peterz@infradead.org>,
        Ingo Molnar <mingo@kernel.org>,
        Thomas Gleixner <tglx@linutronix.de>,
        Linus Torvalds <torvalds@linux-foundation.org>,
        Masami Hiramatsu <mhiramat@kernel.org>,
        Jason Baron <jbaron@akamai.com>, Jiri Kosina <jkosina@suse.cz>,
        David Laight <David.Laight@aculab.com>,
        Borislav Petkov <bp@alien8.de>
Content-Type: text/plain; charset="UTF-8"
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwCnjUnGyeVbmpYjAA--.1480S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoWxZr1rJFW5XFWktw1UXrWxCrg_yoWrJF4xpr
	W8GF1YyF4DJrykAF92vw1jgF9Ivw47JrZ8Wr15Kw1Fk3Z0qr9rtr4UGrWYkFy5C3y8Wr4j
	vr4UZFy7CFnxA37anT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUPGb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_tr0E3s1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr1j6F4UJwA2z4x0Y4vE
	x4A2jsIE14v26F4UJVW0owA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_Cr1j6rxdM2AIxVAIcx
	kEcVAq07x20xvEncxIr21l5I8CrVACY4xI64kE6c02F40Ex7xfMcIj6xIIjxv20xvE14v2
	6r1j6r18McIj6I8E87Iv67AKxVWUJVW8JwAm72CE4IkC6x0Yz7v_Jr0_Gr1l7I0Y6sxI4w
	CY1x0264kExVAvwVAq07x20xylc7Ca8VAvwVCFzxkY4VCF77xAMxkIecxEwVCI4VW8MxkI
	7II2jI8vz4vEwIxGrwCYIxAIcVC0I7IYx2IY67AKxVWUCVW8JwCYIxAIcVC0I7IYx2IY6x
	kF7I0E14v26r1j6r4UMxvI42IY6I8E87Iv67AKxVW8Jr0_Cr1UMxvI42IY6I8E87Iv6xkF
	7I0E14v26r4UJVWxJr1l42xK82IYc2Ij64vIr41l42xK82IY64kExVAvwVAq07x20xyl4x
	8a6x804xWl4I8I3I0E4IkC6x0Yz7v_Jr0_Gr1l4IxYO2xFxVAFwI0_JF0_Jw1lx2IqxVAq
	x4xG67AKxVWUJVWUGwC20s026x8GjcxK67AKxVWUGVWUWwC2zVAF1VAY17CE14v26r1q6r
	43MIIYrxkI7VAKI48JMIIF0xvE42xK8VAvwI8IcIk0rVW8JVW3JbIYCTnIWIevJa73UjIF
	yTuYvjxUQ4lkDUUUU

On 9 November 2018 at 18:46, Josh Poimboeuf <jpoimboe@redhat.com> wrote:
> On Fri, Nov 09, 2018 at 06:33:03PM +0100, Ard Biesheuvel wrote:
>> On 9 November 2018 at 18:31, Josh Poimboeuf <jpoimboe@redhat.com> wrote:
>> > On Fri, Nov 09, 2018 at 06:25:24PM +0100, Ard Biesheuvel wrote:
>> >> On 9 November 2018 at 16:14, Ard Biesheuvel <ard.biesheuvel@linaro.org> wrote:
>> >> > On 9 November 2018 at 16:10, Josh Poimboeuf <jpoimboe@redhat.com> wrote:
>> >> >> On Fri, Nov 09, 2018 at 02:39:17PM +0100, Ard Biesheuvel wrote:
>> >> >>> > +       for (site = start; site < stop; site++) {
>> >> >>> > +               struct static_call_key *key = static_call_key(site);
>> >> >>> > +               unsigned long addr = static_call_addr(site);
>> >> >>> > +
>> >> >>> > +               if (list_empty(&key->site_mods)) {
>> >> >>> > +                       struct static_call_mod *mod;
>> >> >>> > +
>> >> >>> > +                       mod = kzalloc(sizeof(*mod), GFP_KERNEL);
>> >> >>> > +                       if (!mod) {
>> >> >>> > +                               WARN(1, "Failed to allocate memory for static calls");
>> >> >>> > +                               return;
>> >> >>> > +                       }
>> >> >>> > +
>> >> >>> > +                       mod->sites = site;
>> >> >>> > +                       list_add_tail(&mod->list, &key->site_mods);
>> >> >>> > +
>> >> >>> > +                       /*
>> >> >>> > +                        * The trampoline should no longer be used.  Poison it
>> >> >>> > +                        * it with a BUG() to catch any stray callers.
>> >> >>> > +                        */
>> >> >>> > +                       arch_static_call_poison_tramp(addr);
>> >> >>>
>> >> >>> This patches the wrong thing: the trampoline is at key->func not addr.
>> >> >>
>> >> >> If you look at the x86 implementation, it actually does poison the
>> >> >> trampoline.
>> >> >>
>> >> >> The address of the trampoline isn't actually known here.  key->func
>> >> >> isn't the trampoline address; it's the destination func address.
>> >> >>
>> >> >> So instead I passed the address of the call instruction.  The arch code
>> >> >> then reads the instruction to find the callee (the trampoline).
>> >> >>
>> >> >> The code is a bit confusing.  To make it more obvious, maybe we should
>> >> >> add another arch function to read the call destination.  Then this code
>> >> >> can pass that into arch_static_call_poison_tramp().
>> >> >>
>> >> >
>> >> > Ah right, so I am basically missing a dereference in my
>> >> > arch_static_call_poison_tramp() code if this breaks.
>> >> >
>> >>
>> >> Could we call it 'defuse' rather than 'poision'? On arm64, we will
>> >> need to keep it around to bounce function calls that are out of range,
>> >> and replace it with a PLT sequence.
>> >
>> > Ok, but doesn't that defeat the purpose of the inline approach?
>> >
>>
>> It does. But this only occurs when a module is loaded far away, and
>> this will only happen if you have 2 GB range KASLR enabled, or your
>> 128 MB module region gets exhausted for some reason, so the majority
>> of calls should use a single relative branch.
>
> Makes sense.  Do you also account for the possibility that the original
> call emitted by GCC was far away and thus used the PLT?
>

That doesn't really happen. vmlinux is never over 128 MB, and the
modules are only partially linked, so the linker never gets to the
stage where it needs to emit veneers.

It's a bit fiddly since inline and out-of-line both use
arch_static_call_transform(), but what I need to do is basically:

- for out-of-line, the trampoline needs to be patched into a
movn/movk/movk/br sequence if the target is too far
- for inline, the trampoline itself needs to be patched from
adrp/ldr/br (which does a load and a indirect branch) to
movn/movk/movk/br (which uses immediates), and the call sites need to
be patched into calls to the veneer if the target is out of range.

So arch_static_call_transform() needs to know where the trampoline is
for this use case, so could we perhaps add a 'void *orig' in the key
struct that keeps track of the original value of 'addr' ?
