Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (61.164.42.155:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 10 Nov 2018 00:54:08 -0000
Received: from icoremail.net (unknown [209.85.215.181])
	by mail-app2 (Coremail) with SMTP id by_KCgDHH9JIq+VblcpoAQ--.32096S3;
	Fri, 09 Nov 2018 23:44:09 +0800 (CST)
Received: from mail-pg1-f181.google.com (unknown [209.85.215.181])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwD32UVCq+Vb1jIjAA--.76S3;
	Fri, 09 Nov 2018 23:44:02 +0800 (CST)
Received: by mail-pg1-f181.google.com with SMTP id w3-v6so989740pgs.11
        for <xuliker@zju.edu.cn>; Fri, 09 Nov 2018 07:44:02 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:from:to:cc:subject
         :date:message-id:mime-version:content-transfer-encoding
         :spamdiagnosticoutput:spamdiagnosticmetadata:sender:precedence
         :list-id;
        bh=oGvH/990usgUj7+n5Cic4YosuMhzfAnRca0NUVgDV/M=;
        b=On1hDRjIA5NF4zGDWkQBHExD2J49sil/2+mhMB7ZGHwxYKdyAL3b2RVBsRbu3t/zVk
         NUC4tdyoQZ4Yz3tkzGSlUAP14Qz0ldbzP9BKVTnl2sqN5RIsQSuCpTxKG8YQkSDWO1Zl
         eWCt0By/VdJtxqq9/1iUA3USQUuwoL/5keGEvx/wLzWokq2k8YZR4apG8lN7y2tjy6JH
         OhmZAFGU4QH5UA5+/lDyj3QNUKt+dYYuKa4WJ8z6aBfFqWRqDaJ7gUFliG/xtZdCyEHr
         rrAHGdJy8DH1LOXigdlAqIfDFo/ptHiiIz5hzLFQ/op1xfI07RwEHSNOb9YFRYG0WvHv
         Z3uQ==
X-Gm-Message-State: AGRZ1gL9eVyl+mREykG+C1YcU/EbsmP4mQaA1xI93qh28nEYqco7F3iW
	kwcKipUJIaJo2gFL9qeHDUB0Jq8XX3Qv2y0ksTw+Xq3kvaegv1qqXg==
X-Received: by 2002:a62:c184:: with SMTP id i126-v6mr9571099pfg.53.1541778242260;
        Fri, 09 Nov 2018 07:44:02 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp45659pjt;
        Fri, 9 Nov 2018 07:44:00 -0800 (PST)
X-Google-Smtp-Source: AJdET5e5RFlHs8ius6rVt+IE5HSIomKL/fgRtKLkHxvzxtAg9xkij+gWT0UmbfNSOZ8rPjVzZDcq
X-Received: by 2002:a63:d513:: with SMTP id c19mr7856292pgg.287.1541778240569;
        Fri, 09 Nov 2018 07:44:00 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1541778240; cv=none;
        d=google.com; s=arc-20160816;
        b=kWZnsMYE3RnQyMHLZsqfeKAtCP98iCD+s6E+GFQGhbHZqpYEIuHlJ8c+GKzj84bhww
         5r/Qli1AB8Yssy0ZViAW91WFBufwIF38+uG+37J0I7B8P75Z/IWrVXT3Uvn2VUzsF+V6
         8ye6oC1cDMOHG3JBLxDe2JZ8fDeXflMgYHcO+lbt6d0/wzpAxcve/JEBLTAX1X0h0R1Q
         ffc/LXOcAfiooqE16yIX2p/XobxuZhUR+UrwrdYXPv/DQ6BMNtmYT+WyST26nr4yHnkw
         Xn8R8A5lTikVeKz/VZ7go+BlyedCAeG7L5kmuHjz1zrMLr1OSIQq45IIxGsZhtEPrYDj
         qjRg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:spamdiagnosticmetadata
         :spamdiagnosticoutput:content-transfer-encoding:mime-version
         :message-id:date:subject:cc:to:from:dkim-signature;
        bh=oGvH/990usgUj7+n5Cic4YosuMhzfAnRca0NUVgDV/M=;
        b=i9LS6lf0d26hCt00MGbfVYafXiU+kuEJoDn/CM3vJn83OlTWg5HS/kAyf3zoUQs1Wq
         /DHBjwDby0aygdHD/vVgBqa20cx+iejwpVdrJ3wviDGJZJsC5l8EC+JZMpqY2KoA2hST
         2xiNQ8VVKFfP2MKx6yBPpHhBDCiX4BBPf9yt7NXUVmnDyqLUs+bVkxEeWCzE9OkcXyyz
         wAE56QfihzPDeDNKx+KT2saL8UoP0jXcXG8pug5Us/amSoFjvVIP770ZiUPRN71CukcU
         ngZKIy4cDU9WHw+KwdMtfJpBZE47gBELs+5H0MnPUSfcfWhBffDZFQNaz2lqbVz4sxvk
         P+WQ==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@analog.onmicrosoft.com header.s=selector1-analog-com header.b=vDTH0iT0;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id s2si6647613pgj.60.2018.11.09.07.43.17;
        Fri, 09 Nov 2018 07:44:00 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728265AbeKJBX0 (ORCPT <rfc822;tu.k.phung@gmail.com>
        + 99 others); Fri, 9 Nov 2018 20:23:26 -0500
Received: from mail-eopbgr730052.outbound.protection.outlook.com ([40.107.73.52]:44992
        "EHLO NAM05-DM3-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1727802AbeKJBX0 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 9 Nov 2018 20:23:26 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=analog.onmicrosoft.com; s=selector1-analog-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=oGvH/990usgUj7+n5Cic4YosuMhzfAnRca0NUVgDV/M=;
 b=vDTH0iT0jnfj9EJBL5kqHSHHK7HIJoV/FsGrFaHhhzvEUoboDrEsB7rkEa2y+ylE1S15g8yWXYCYG+D1bNtMG/5XvrFoqONuTSBJA9Hw9L8R13ZiOWMmOHP4QZC7IbcbOzECeQKfuVxVjW6NWJwFOZncQk1Axh7H1Lu1KQiyx7M=
Received: from DM6PR03CA0026.namprd03.prod.outlook.com (2603:10b6:5:40::39) by
 DM5PR03MB3130.namprd03.prod.outlook.com (2603:10b6:4:3c::27) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1294.30; Fri, 9 Nov 2018 15:42:12 +0000
Received: from BY2FFO11FD022.protection.gbl (2a01:111:f400:7c0c::153) by
 DM6PR03CA0026.outlook.office365.com (2603:10b6:5:40::39) with Microsoft SMTP
 Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384) id
 15.20.1294.26 via Frontend Transport; Fri, 9 Nov 2018 15:42:11 +0000
Received-SPF: Pass (protection.outlook.com: domain of analog.com designates
 137.71.25.57 as permitted sender) receiver=protection.outlook.com;
 client-ip=137.71.25.57; helo=nwd2mta4.analog.com;
Received: from nwd2mta4.analog.com (137.71.25.57) by
 BY2FFO11FD022.mail.protection.outlook.com (10.1.15.211) with Microsoft SMTP
 Server (version=TLS1_0, cipher=TLS_RSA_WITH_AES_256_CBC_SHA) id 15.20.1339.12
 via Frontend Transport; Fri, 9 Nov 2018 15:42:11 +0000
Received: from NWD2HUBCAS7.ad.analog.com (nwd2hubcas7.ad.analog.com [10.64.69.107])
        by nwd2mta4.analog.com (8.13.8/8.13.8) with ESMTP id wA9FgA7h018043
        (version=TLSv1/SSLv3 cipher=AES256-SHA bits=256 verify=OK);
        Fri, 9 Nov 2018 07:42:10 -0800
Received: from linux.ad.analog.com (10.32.224.122) by
 NWD2HUBCAS7.ad.analog.com (10.64.69.107) with Microsoft SMTP Server id
 14.3.301.0; Fri, 9 Nov 2018 10:42:09 -0500
From: Stefan Popa <stefan.popa@analog.com>
To: <jic23@kernel.org>
CC: <Michael.Hennerich@analog.com>, <knaack.h@gmx.de>,
        <lars@metafoo.de>, <pmeerw@pmeerw.net>,
        <gregkh@linuxfoundation.org>, <linux-kernel@vger.kernel.org>,
        <linux-iio@vger.kernel.org>, <stefan.popa@analog.com>
Subject: [PATCH v4 3/4] iio: adc: Add ad7124 support
Date: Fri, 9 Nov 2018 17:41:46 +0200
Message-ID: <1541778106-7740-1-git-send-email-stefan.popa@analog.com>
X-Mailer: git-send-email 2.7.4
MIME-Version: 1.0
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: 8bit
X-ADIRoutedOnPrem: True
X-EOPAttributedMessage: 0
X-MS-Office365-Filtering-HT: Tenant
X-Forefront-Antispam-Report: CIP:137.71.25.57;IPV:NLI;CTRY:US;EFV:NLI;SFV:NSPM;SFS:(10009020)(346002)(376002)(136003)(396003)(39860400002)(2980300002)(438002)(199004)(37524003)(189003)(478600001)(5820100001)(126002)(50466002)(106002)(14444005)(8936002)(36756003)(5660300001)(107886003)(7636002)(6306002)(336012)(486006)(7696005)(476003)(4326008)(305945005)(2616005)(966005)(54906003)(2870700001)(23676004)(72206003)(426003)(6666004)(356004)(2906002)(44832011)(26005)(246002)(8676002)(106466001)(316002)(1720100001)(6916009)(186003)(4744004)(77096007)(575784001)(47776003)(2351001)(50226002);DIR:OUT;SFP:1101;SCL:1;SRVR:DM5PR03MB3130;H:nwd2mta4.analog.com;FPR:;SPF:Pass;LANG:en;PTR:nwd2mail11.analog.com;A:1;MX:1;
X-Microsoft-Exchange-Diagnostics: 1;BY2FFO11FD022;1:ZwCzI+54pnejXs84srzikuCZnoPveGN2csg0xo1iRPf3m6Yrfi+LluSqjfIu13Ym1bGrJZsLXj6L0RFJM1KuLXPoGHEyXSHjAGBPVpFNkp9m1ouD1SsXixJ90kx2pJ6Z
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 9ba865fa-88a0-4b34-2b4c-08d64659ea3f
X-Microsoft-Antispam: BCL:0;PCL:0;RULEID:(7020095)(4652040)(8989299)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(5600074)(711020)(4608076)(2017052603328)(7153060);SRVR:DM5PR03MB3130;
X-Microsoft-Exchange-Diagnostics: 1;DM5PR03MB3130;3:5sCDhiVuB2rMUPUg2kEwdETcQmxSyFnmj4nusmTRisVzI3wdGgPNy+8QIGI11hiITR0zw9jqI9zY6IARzWV0bWHbkFCSrUU6j0cFdLkngTs/uBwugsZ9BL0lQ4gG/Ss3JGaEAjjK0vqqOPna+Pd+brs24N4IC9vQcQBU3hqXFFiSndFlMHYxzi8neKAWKfQDG3CWw8wQe7K5MZNJdp4TjlxRZxONbANy0QEWGH2HWPsA/lDGB+2nqNlYVyB/1GJJ1Rybo0iXTrHwhdV4HoAQReGzdnQ2UZO3sJWTbGG09woUXkJZS/3ihdciZUJpWUZfRslhACYCdSh/JNZd4ylygAi7vU9FfuQxUY5m/BXCiL0=;25:tA8wUe0cRv9/ikIAPqATwJ9gT9bQ7yBCkiJACrQvMoRHlkFNgP9EAy7bjoY1wq1pa34FtLZp1YapXQI+exh0lEYu0kKcPfPcpdqOekT9btIzYxDp8CeGtAauqM4lg1TNr0fWExwKkrT2qf5m5npxnlKYTLX1t2IP3ZVKeGKisS92qbC5XE02hCpVnCdUPg9nRAFMFItDCzU5ACUDeeyRWBjx2eL/gOk61z0EQK0X2qiXzIdko0Db1lbL3HiIZN9PWX0nVmDFY8/CqNrujWopXFz4306DKP0H9X3SqYJHo/ov1lYajqh3kOuqCLfoP+RdYQ2kidpaKXK2tG6pMNl5Nw==
X-MS-TrafficTypeDiagnostic: DM5PR03MB3130:
X-Microsoft-Exchange-Diagnostics: 1;DM5PR03MB3130;31:oIGmpZVzEXtGINCTEhBBTQHhwvUwnMFqUSvTNc6zfOY40baN+O47UdGjtyLQNedU0K1swHkSZC8aSOfoQQ4DHYfEfzT5Oopm/JcEs/PjerhF30adWBVa+zRzxRqu1shkdMWbUl0q+/qzYFWNzD4hgWVygb8PenaeT85Xv10dhaFmVDfU8oLjIIoHt/Xog2NeEqQzWWCRuwd/kEWg7tb0VHC1qF5g76KdY+xdav/DHVA=;20:3zCcXtABRg6XpZvihwdSVoSw3W/Pnej4R+37rgQipdo4KkkxhBkKtbjDffQ3qOOOVvFZajbPLs84SbBOTm77D36zdbbYX+q8lOIZ7t6UxSVLcF4P/zS5uWTtknWEdT/n0Qf8QD/NeKrDiWGelAbf4jeo00DqEBjxPGHjo/s/u3/8BPFV1+wssCEM5C+N7nhADfTaIrZGU5vPQ69qka0sgswP/e0opPBpzCpg5IyVUhPO9ZqFGZKBqwbQyNmfVvWUeas631WImNVvthuWPwvVn5kCglTM/vY35MKHK3AMPx+Rs5zO+2t8Wn11TH5f6+NmzyCJCfTDksG2TEDC93HrPX4Pto2wJivn1SX5nnJTLs98ufCAs71uxhWATnOqPXFGTGZBey49WQol+ph/+puuhhciTREnZKzHMDH+3ZfiWJsjGhaMcTLQEaWmmrsqy6u4thqE8qP5ndVWJmZKMAaV/Qv/EWOSgxM7lU5jPkmviy9MCHBqPKcLIuhUBqXGupyQ
X-Microsoft-Antispam-PRVS: <DM5PR03MB3130EB9DBD9542352148EFC49DC60@DM5PR03MB3130.namprd03.prod.outlook.com>
X-Exchange-Antispam-Report-Test: UriScan:(270121546159015)(232431446821674)(9452136761055)(170811661138872)(95692535739014);
X-MS-Exchange-SenderADCheck: 1
X-Exchange-Antispam-Report-CFA-Test: BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(5005006)(8121501046)(93006095)(93004095)(10201501046)(3002001)(3231382)(944501410)(4982022)(52105095)(6055026)(148016)(149066)(150057)(6041310)(20161123558120)(20161123564045)(20161123560045)(20161123562045)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(201708071742011)(7699051)(76991095);SRVR:DM5PR03MB3130;BCL:0;PCL:0;RULEID:;SRVR:DM5PR03MB3130;
X-Microsoft-Exchange-Diagnostics: 1;DM5PR03MB3130;4:iVomRNslg+gel1VLmnJmwfVuznlbiZgMQZI1X+elg0xPaFSPuGp6s5yZ6N0CZM2OCtjggkv4XtGkSH+mJYi3vB2K29bYfOJR2ZYSg6TnKpWENRP51vQ6tPyvq5MFKQrwaMTl4M+dwxVcRQYjk5cP5muCVFgQwqiBSNg6mre0AIbydgx8hoB6nZ6dTdCvWXibI0JeqshBCTm5z1X0ihjfHLAZM1MHe8retIAqzfpZae34JKuIO0s3VoqfskhPLsfu5oqxm5ex/jF1wmHzO1oniRXT7ubBrIAtpOEKw0DuwtXj2bm8HRRS2ghtmILphFBJ7JzMVqLsHllTFw74Qy+GvDutSHjtfJQMok6waXt04kqP1OSfRwJNYoIfsR6/mj7t9w5XNPVmTz+uelybvM7MY/oYq5tSU4TotuPtj1kofNE86+l7OfCjRKomydn11SSE0NNLG9nDxmaVhBY/5n38uQ==
X-Forefront-PRVS: 08512C5403
X-Microsoft-Exchange-Diagnostics: =?utf-8?B?MTtETTVQUjAzTUIzMTMwOzIzOm1NZTNqaFd3QkhNUGFrdlhZdkNIQ1NxcG1o?=
 =?utf-8?B?Z0MrTnVuUUlUaGI4YzRrSjdOWjRzdXdJaHF2M0EvS2w4S3d5T3FGNytRQi9a?=
 =?utf-8?B?RHBTM29lZEp2Ym1GYWs5Qk1CM0ZjUUxHM3FaTytWL0ZWb1RydTZ0NlBkVE9Q?=
 =?utf-8?B?c1lYRE1ZY3Bac2xwYy8yajdxU0h5KzU0Qkx2ZytRd2pyd3VEano5VmhhV3pJ?=
 =?utf-8?B?Ni9Fc1o2NENWR0VvMklaWk1kVmNxOWdFYXN1V05FTzZqdm5wMWR0MWxwYjlF?=
 =?utf-8?B?YzJDdFlIYksrY1hTMmw2Sjh6aUUrMnNseHRleitjOHNTM2hFK1BLWVl5bXF5?=
 =?utf-8?B?Mkc1V2p1a1c1NDk2MldKYVlNRHZ6Y0J3dGxpbDBBVjBEVDRKK1g4VmdiWlNL?=
 =?utf-8?B?YzdXNzgzYm5YRVZkVUlGcjBTR1dDT3RXRGhtV29rc2hIZ3pPb2hPUEo0UFI4?=
 =?utf-8?B?eU1icVZLSk5hanVnc2R1ajZOaUpFZ3ZYOEJzcUNNeDNoaDYvTldCeU5MVGww?=
 =?utf-8?B?cTIrZFY1dm43NDltd2V0WFhTTGtzMTFWUGh3K1Z3RStuOHExOXh0eDZhVnF5?=
 =?utf-8?B?dGtaMnVEUnRzQ0doRGo2cGl5R3cwTmw0WmdmVFYzUlhVT29RUCt6dC9MQUFl?=
 =?utf-8?B?MEJyWndYelB1M25CQ1NKcE5sZStLOFUrVnlnR2Z0aEtrVnJVYTNBZnJFd2o3?=
 =?utf-8?B?WmpDc1NuTllNbTNKVzNjNlRRQWJRT0ZMdnBYWS8vdTJzOS9TRWVDbnBJRkJy?=
 =?utf-8?B?VEdzRXdiWFdmVUZIc1RkSytnUklYOTBlZytBbWlXRTdBWmJFU1gzSFVTbnRK?=
 =?utf-8?B?d3dZT21Ia0pwVmc1KzJTcUJVbU11bDNaamRmc2VyTm5BcFNZQUVIYWt0aXEr?=
 =?utf-8?B?UU13WFVVVGZWYWV4MVJERWltOVF2UmRZUFRpOUpTZDREUC9FWHdubktTS2J6?=
 =?utf-8?B?bERGYldEanIxLzRqa0s4WEZ3NWJhYytyT3UyL1p4ZXdTakgySjJlVlcrcjAy?=
 =?utf-8?B?WnczcWVFaEJSb2NHdElBZDNyN2NWK202eWVFYkdmR0ovR2pMRGZ4VWgvSXhV?=
 =?utf-8?B?ZnAvbTEydGRqQUljMm1QUU9sNkRjZmlwUmEwck56UnBERFhpUGN4ck94MGZC?=
 =?utf-8?B?WjZkTmhoZ2RJb0xiOGxvbTUxUzdUMUxaWkZxazUzQnA0ci90dHVsS3NOSDFs?=
 =?utf-8?B?TUxFZlFhRXJwbURHUjNnaElOVHZmSDVoWXJmSGpkbFJYRkhqbm4vYnE1S1do?=
 =?utf-8?B?d0J5M29VMHQvMFltUzhKTnNQSVl6elZWSmRBUkVlSlBMNGZXamU3ZFBGY1cy?=
 =?utf-8?B?eHhtODBHU09kaXVqQkhVMW95aURrbkpVWFRQU1lMNlBYSVZWZi9LVEpQMlVi?=
 =?utf-8?B?M01YdG9rcEVHZUEzZVRDS3hFZWdDMnhXSEp4SytBYmN1MUFuWHNHRU1rU0ZS?=
 =?utf-8?B?YkYzWm9LQ1NJMUJRRlArNzFpTFlPdTFTekRxVVU2RFhIVE8vTmRBcFZJZzJL?=
 =?utf-8?B?MVVxMndNSVlnZk9oWi9UY1pRY09rckZ6YmRnbDNhTmdQWlN0UjRiYXpMTTRS?=
 =?utf-8?B?VUNNd2hHd0Zhb0VCQUVMa3pENWpXZmc9PQ==?=
X-Microsoft-Antispam-Message-Info: 4NBC/+7Dr9e1qymYDjKSv61HchPVPf3VZ8mR7yGKDFAveiz5NsI6BXhYnrmRsedHRjgfe3Nz6n0vW5DrJG1LvZy8S5iA7As6JyXuqEACLE5hOV42OxvNXtKmdU2iEkiSAGc5yWYJo3fxXyrE/0htiXf04uAeyRSBu9irTZgNv1i+2+iVwOq041ae5SK0PVrYPPtDK3X1Kok17aDLJVd/SLemjWX7EmGhhYZw/sP9TBnHLCyp0TVesndZl7TJ0TA3eM8ZEslo8ALpjC/Zr4+Smu2jWK9SE+bn1fIAbq1HTRFpJd2MGP/bej2PAnlJkkFkUK6aKIIF5CSWiVWGodqJMCWCnzyCuRwb8QOG0lzb198=
X-Microsoft-Exchange-Diagnostics: 1;DM5PR03MB3130;6:vXzwQBXie+wzmO6uMxXNn163ACFXGIx0cxyt64R6msOecOtOceKAiWheQv13YlUBPv1cwIkTCCkEACvhzK0H5edowNJJdzJrY9qYdAem01I22gmk9ESvQriWum2GjLSsHjoeKU0JpKoZtrY6ydWtZ37m8laKhqGI+54a/HSOHAex9CjvH2HKzXRDvk4EMxkfoX894rxiex8MF8+dliNe7L1uFsDyfi9jv+58/7y2CSjMMYMUycgmgYm+QPxeR4Tw1IYWDA6cgENlzy+7c9ItQivUNLXL3z+ESyfj0MO/LEx6KJ63e4TBizbqzZJwxWztIB0DN657OwS52PcsWxlF2K6ToHzpJpY6Aa0KXedOZhnecwfOgpU2Nh1iFSKc7mcrT0hca0pkfP/MdTBPPpdXAlvu52+BsyjXnKnrLcmHTUWGLIdxXz3i2pOO6zT1j8np7kSHXqhoTu5GRcrXz3Hazg==;5:XMP/WSPXVJNCzJ8W5TzV4G5oKKKHCBEPu1mGTVl9yzHoaWFhT2AxcOhfhyMMN9lXeTpG56h4Lpb+hBXb31gSYrfLkOOcC/iOQtB6S2r1GU9HpLmSoIaEM0g/+fp6tUZ8qo7YPlE+LeKzulYWeCjAhbPKwGblGvB86xkYnrj99uo=;7:NpEXZtJuB64qR4TgChXPNwFg88RjGowFoIQ29WUuFWQJXOswWjuXMYsW2iEcOevUKcGIFfdRamwzI3rUlMeoP6lg9BGQfOKRB3Y2n20oYU4pe7rMUFmguifXYTkDeLLxzqGm7KVa9XK/1MpyZXP89Q==
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-OriginatorOrg: analog.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 09 Nov 2018 15:42:11.2576
 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 9ba865fa-88a0-4b34-2b4c-08d64659ea3f
X-MS-Exchange-CrossTenant-Id: eaa689b4-8f87-40e0-9c6f-7228de4d754a
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: TenantId=eaa689b4-8f87-40e0-9c6f-7228de4d754a;Ip=[137.71.25.57];Helo=[nwd2mta4.analog.com]
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM5PR03MB3130
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwD32UVCq+Vb1jIjAA--.76S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvAXoWfZFyUtFy3XrW7try3Aw4DCFg_yoW8uw47Jo
	Z3uw1rWr1rAr17WF4xGryUtrsrZr1DZwn8uw1FvwsrZa4DAF1DtF97Kw4DX3y7XF1S9F18
	J3WkXr4xJFWxZryfn29KB7ZKAUJUUUUU529EdanIXcx71UUUUj7v73VFW2AGmfu7jjvjm3
	AaLaJ3UjIYCTnIWjp_UUUO07k0a2IF6w4kM7kC6x804xWl14x267AKxVWUJVW8JwAFIxvE
	14AKwVWUJVWUGwA2ocxC64kIII0Yj41l84x0c7CEw4AK67xGY2AK021l84ACjcxK6xIIjx
	v20xvE14v26F1j6w1UM28EF7xvwVC0I7IYx2IY6xkF7I0E14v26F4j6r4UJwA2z4x0Y4vE
	x4A2jsIE14v26rxl6s0DM28EF7xvwVC2z280aVCY1x0267AKxVW0oVCq3wAS0I0E0xvYzx
	vE52x082IY62kv0487Mc02F40EFcxC0VAKzVAqx4xG6I80ewAv7VC0I7IYx2IY67AKxVWU
	JVWUGwAv7VC2z280aVAFwI0_Cr0_Gr1UMcvjeVCFs4IE7xkEbVWUJVW8JwACjcxG0xvY0x
	0EwIxGrwCjxxvEa2IrMxkF7I0Ew4C26cxK6c8Ij28IcwCY1Ik26cxK6xAEc7vF6xCjj44l
	c2xSY4AK6IIF6ryrMxkI7II2jI8vz4vEwIxGrwCYIxAIcVC0I7IYx2IY67AKxVW8JVW5Jw
	CYIxAIcVC0I7IYx2IY6xkF7I0E14v26r4j6F4UMxvI42IY6I8E87Iv67AKxVW0oVCq3wCY
	IxAIcVC2z280aVCY1x0267AKxVW0oVCq3wCF04k20xvY0x0EwIxGrwCF04k20xvEw4C26c
	xK6c8Ij28IcwCF72vE77IF4wCFx2IqxVCFs4IE7xkEbVWUJVW8JwC20s026c02F40E14v2
	6r1j6r18MI8I3I0E7480Y4vE14v26r106r1rMI8E67AF67kF1VAFwI0_Jw0_GFylIxkGc2
	Ij64vIr41lIxAIcVCF04k26cxKx2IYs7xG6Fyj6rWUJbIYCTnIWIevJa73UjIFyTuYvjxU
	QSdyUUUUU

The ad7124-4 and ad7124-8 are a family of 4 and 8 channel sigma-delta ADCs
with 24-bit precision and reference.

Three power modes are available which in turn affect the output data rate:
 * Full power: 9.38 SPS to 19,200 SPS
 * Mid power: 2.34 SPS to 4800 SPS
 * Low power: 1.17 SPS to 2400 SPS

The ad7124-4 can be configured to have four differential inputs, while
ad7124-8 can have 8. Moreover, ad7124 also supports per channel
configuration. Each configuration consists of gain, reference source,
output data rate and bipolar/unipolar configuration.

Datasheets:
Link: http://www.analog.com/media/en/technical-documentation/data-sheets/AD7124-4.pdf
Link: http://www.analog.com/media/en/technical-documentation/data-sheets/ad7124-8.pdf

Signed-off-by: Stefan Popa <stefan.popa@analog.com>
---
Changes in v2:
	- Nothing changed.
Changes in v3:
	- Removed channel, address, scan_index and shift fields from
	  ad7124_channel_template.
	- Added a sanity check for val2 in ad7124_write_raw().
	- Used the "reg" property to get the channel address and "adi,diff-channels"
	  for the differential pins. The "adi,channel-number" property was removed.
	- When calling regulator_get_optional, the probe is given up in case of error,
	  but continues in case of -ENODEV.
	- clk_disable_unprepare() is called before ad_sd_cleanup_buffer_and_trigger
	  in ad7124_remove().
Changes in v4:
	- Added the .shift and .endianness fields as part of the ad7124_channel_template.
	- Made the gain configurable from the user space.
	- Removed the odr_hz and gain properties from the DT.
	- Used the bipolar and diff-channels properties defined in the new adc.txt doc.
	- Misc style fixes.

 MAINTAINERS              |   7 +
 drivers/iio/adc/Kconfig  |  11 +
 drivers/iio/adc/Makefile |   1 +
 drivers/iio/adc/ad7124.c | 676 +++++++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 695 insertions(+)
 create mode 100644 drivers/iio/adc/ad7124.c

diff --git a/MAINTAINERS b/MAINTAINERS
index f642044..3a1bfcb 100644
--- a/MAINTAINERS
+++ b/MAINTAINERS
@@ -839,6 +839,13 @@ S:	Supported
 F:	drivers/iio/dac/ad5758.c
 F:	Documentation/devicetree/bindings/iio/dac/ad5758.txt
 
+ANALOG DEVICES INC AD7124 DRIVER
+M:	Stefan Popa <stefan.popa@analog.com>
+L:	linux-iio@vger.kernel.org
+W:	http://ez.analog.com/community/linux-device-drivers
+S:	Supported
+F:	drivers/iio/adc/ad7124.c
+
 ANALOG DEVICES INC AD9389B DRIVER
 M:	Hans Verkuil <hans.verkuil@cisco.com>
 L:	linux-media@vger.kernel.org
diff --git a/drivers/iio/adc/Kconfig b/drivers/iio/adc/Kconfig
index a52fea8..148a10f 100644
--- a/drivers/iio/adc/Kconfig
+++ b/drivers/iio/adc/Kconfig
@@ -10,6 +10,17 @@ config AD_SIGMA_DELTA
 	select IIO_BUFFER
 	select IIO_TRIGGERED_BUFFER
 
+config AD7124
+	tristate "Analog Devices AD7124 and similar sigma-delta ADCs driver"
+	depends on SPI_MASTER
+	select AD_SIGMA_DELTA
+	help
+	  Say yes here to build support for Analog Devices AD7124-4 and AD7124-8
+	  SPI analog to digital converters (ADC).
+
+	  To compile this driver as a module, choose M here: the module will be
+	  called ad7124.
+
 config AD7266
 	tristate "Analog Devices AD7265/AD7266 ADC driver"
 	depends on SPI_MASTER
diff --git a/drivers/iio/adc/Makefile b/drivers/iio/adc/Makefile
index a6e6a0b..76168b2 100644
--- a/drivers/iio/adc/Makefile
+++ b/drivers/iio/adc/Makefile
@@ -5,6 +5,7 @@
 
 # When adding new entries keep the list in alphabetical order
 obj-$(CONFIG_AD_SIGMA_DELTA) += ad_sigma_delta.o
+obj-$(CONFIG_AD7124) += ad7124.o
 obj-$(CONFIG_AD7266) += ad7266.o
 obj-$(CONFIG_AD7291) += ad7291.o
 obj-$(CONFIG_AD7298) += ad7298.o
diff --git a/drivers/iio/adc/ad7124.c b/drivers/iio/adc/ad7124.c
new file mode 100644
index 0000000..64d2aa7
--- /dev/null
+++ b/drivers/iio/adc/ad7124.c
@@ -0,0 +1,676 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * AD7124 SPI ADC driver
+ *
+ * Copyright 2018 Analog Devices Inc.
+ */
+#include <linux/bitfield.h>
+#include <linux/clk.h>
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/err.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/regulator/consumer.h>
+#include <linux/spi/spi.h>
+
+#include <linux/iio/iio.h>
+#include <linux/iio/adc/ad_sigma_delta.h>
+#include <linux/iio/sysfs.h>
+
+/* AD7124 registers */
+#define AD7124_COMMS			0x00
+#define AD7124_STATUS			0x00
+#define AD7124_ADC_CONTROL		0x01
+#define AD7124_DATA			0x02
+#define AD7124_IO_CONTROL_1		0x03
+#define AD7124_IO_CONTROL_2		0x04
+#define AD7124_ID			0x05
+#define AD7124_ERROR			0x06
+#define AD7124_ERROR_EN		0x07
+#define AD7124_MCLK_COUNT		0x08
+#define AD7124_CHANNEL(x)		(0x09 + (x))
+#define AD7124_CONFIG(x)		(0x19 + (x))
+#define AD7124_FILTER(x)		(0x21 + (x))
+#define AD7124_OFFSET(x)		(0x29 + (x))
+#define AD7124_GAIN(x)			(0x31 + (x))
+
+/* AD7124_STATUS */
+#define AD7124_STATUS_POR_FLAG_MSK	BIT(4)
+
+/* AD7124_ADC_CONTROL */
+#define AD7124_ADC_CTRL_PWR_MSK	GENMASK(7, 6)
+#define AD7124_ADC_CTRL_PWR(x)		FIELD_PREP(AD7124_ADC_CTRL_PWR_MSK, x)
+#define AD7124_ADC_CTRL_MODE_MSK	GENMASK(5, 2)
+#define AD7124_ADC_CTRL_MODE(x)	FIELD_PREP(AD7124_ADC_CTRL_MODE_MSK, x)
+
+/* AD7124_CHANNEL_X */
+#define AD7124_CHANNEL_EN_MSK		BIT(15)
+#define AD7124_CHANNEL_EN(x)		FIELD_PREP(AD7124_CHANNEL_EN_MSK, x)
+#define AD7124_CHANNEL_SETUP_MSK	GENMASK(14, 12)
+#define AD7124_CHANNEL_SETUP(x)	FIELD_PREP(AD7124_CHANNEL_SETUP_MSK, x)
+#define AD7124_CHANNEL_AINP_MSK	GENMASK(9, 5)
+#define AD7124_CHANNEL_AINP(x)		FIELD_PREP(AD7124_CHANNEL_AINP_MSK, x)
+#define AD7124_CHANNEL_AINM_MSK	GENMASK(4, 0)
+#define AD7124_CHANNEL_AINM(x)		FIELD_PREP(AD7124_CHANNEL_AINM_MSK, x)
+
+/* AD7124_CONFIG_X */
+#define AD7124_CONFIG_BIPOLAR_MSK	BIT(11)
+#define AD7124_CONFIG_BIPOLAR(x)	FIELD_PREP(AD7124_CONFIG_BIPOLAR_MSK, x)
+#define AD7124_CONFIG_REF_SEL_MSK	GENMASK(4, 3)
+#define AD7124_CONFIG_REF_SEL(x)	FIELD_PREP(AD7124_CONFIG_REF_SEL_MSK, x)
+#define AD7124_CONFIG_PGA_MSK		GENMASK(2, 0)
+#define AD7124_CONFIG_PGA(x)		FIELD_PREP(AD7124_CONFIG_PGA_MSK, x)
+
+/* AD7124_FILTER_X */
+#define AD7124_FILTER_FS_MSK		GENMASK(10, 0)
+#define AD7124_FILTER_FS(x)		FIELD_PREP(AD7124_FILTER_FS_MSK, x)
+
+enum ad7124_ids {
+	ID_AD7124_4,
+	ID_AD7124_8,
+};
+
+enum ad7124_ref_sel {
+	AD7124_REFIN1,
+	AD7124_REFIN2,
+	AD7124_INT_REF,
+	AD7124_AVDD_REF,
+};
+
+enum ad7124_power_mode {
+	AD7124_LOW_POWER,
+	AD7124_MID_POWER,
+	AD7124_FULL_POWER,
+};
+
+static const unsigned int ad7124_gain[8] = {
+	1, 2, 4, 8, 16, 32, 64, 128
+};
+
+static const int ad7124_master_clk_freq_hz[3] = {
+	[AD7124_LOW_POWER] = 76800,
+	[AD7124_MID_POWER] = 153600,
+	[AD7124_FULL_POWER] = 614400,
+};
+
+static const char * const ad7124_ref_names[] = {
+	[AD7124_REFIN1] = "refin1",
+	[AD7124_REFIN2] = "refin2",
+	[AD7124_INT_REF] = "int",
+	[AD7124_AVDD_REF] = "avdd",
+};
+
+struct ad7124_chip_info {
+	unsigned int num_inputs;
+};
+
+struct ad7124_channel_config {
+	enum ad7124_ref_sel refsel;
+	bool bipolar;
+	unsigned int ain;
+	unsigned int vref_mv;
+	unsigned int pga_bits;
+	unsigned int odr;
+};
+
+struct ad7124_state {
+	const struct ad7124_chip_info *chip_info;
+	struct ad_sigma_delta sd;
+	struct ad7124_channel_config channel_config[4];
+	struct regulator *vref[4];
+	struct clk *mclk;
+	unsigned int adc_control;
+	unsigned int num_channels;
+};
+
+static const struct iio_chan_spec ad7124_channel_template = {
+	.type = IIO_VOLTAGE,
+	.indexed = 1,
+	.differential = 1,
+	.info_mask_separate = BIT(IIO_CHAN_INFO_RAW) |
+		BIT(IIO_CHAN_INFO_SCALE) |
+		BIT(IIO_CHAN_INFO_OFFSET) |
+		BIT(IIO_CHAN_INFO_SAMP_FREQ) |
+		BIT(IIO_CHAN_INFO_HARDWAREGAIN),
+	.scan_type = {
+		.sign = 'u',
+		.realbits = 24,
+		.storagebits = 32,
+		.shift = 8,
+		.endianness = IIO_BE,
+	},
+};
+
+static struct ad7124_chip_info ad7124_chip_info_tbl[] = {
+	[ID_AD7124_4] = {
+		.num_inputs = 8,
+	},
+	[ID_AD7124_8] = {
+		.num_inputs = 16,
+	},
+};
+
+static int ad7124_find_closest_match(const int *array,
+				     unsigned int size, int val)
+{
+	int i;
+
+	for (i = 0; i < size; i++) {
+		if (val <= array[i])
+			return i;
+	}
+
+	return size - 1;
+}
+
+static int ad7124_spi_write_mask(struct ad7124_state *st,
+				 unsigned int addr,
+				 unsigned long mask,
+				 unsigned int val,
+				 unsigned int bytes)
+{
+	unsigned int readval;
+	int ret;
+
+	ret = ad_sd_read_reg(&st->sd, addr, bytes, &readval);
+	if (ret < 0)
+		return ret;
+
+	readval &= ~mask;
+	readval |= val;
+
+	return ad_sd_write_reg(&st->sd, addr, bytes, readval);
+}
+
+static int ad7124_set_mode(struct ad_sigma_delta *sd,
+			   enum ad_sigma_delta_mode mode)
+{
+	struct ad7124_state *st = container_of(sd, struct ad7124_state, sd);
+
+	st->adc_control &= ~AD7124_ADC_CTRL_MODE_MSK;
+	st->adc_control |= AD7124_ADC_CTRL_MODE(mode);
+
+	return ad_sd_write_reg(&st->sd, AD7124_ADC_CONTROL, 2, st->adc_control);
+}
+
+static int ad7124_set_channel(struct ad_sigma_delta *sd, unsigned int channel)
+{
+	struct ad7124_state *st = container_of(sd, struct ad7124_state, sd);
+	unsigned int val;
+
+	val = st->channel_config[channel].ain | AD7124_CHANNEL_EN(1) |
+	      AD7124_CHANNEL_SETUP(channel);
+
+	return ad_sd_write_reg(&st->sd, AD7124_CHANNEL(channel), 2, val);
+}
+
+static const struct ad_sigma_delta_info ad7124_sigma_delta_info = {
+	.set_channel = ad7124_set_channel,
+	.set_mode = ad7124_set_mode,
+	.has_registers = true,
+	.addr_shift = 0,
+	.read_mask = BIT(6),
+	.data_reg = AD7124_DATA,
+};
+
+static int ad7124_set_channel_odr(struct ad7124_state *st,
+				  unsigned int channel,
+				  unsigned int odr)
+{
+	unsigned int fclk, odr_sel_bits;
+	int ret;
+
+	fclk = clk_get_rate(st->mclk);
+	/*
+	 * FS[10:0] = fCLK / (fADC x 32) where:
+	 * fADC is the output data rate
+	 * fCLK is the master clock frequency
+	 * FS[10:0] are the bits in the filter register
+	 * FS[10:0] can have a value from 1 to 2047
+	 */
+	odr_sel_bits = DIV_ROUND_CLOSEST(fclk, odr * 32);
+	if (odr_sel_bits < 1)
+		odr_sel_bits = 1;
+	else if (odr_sel_bits > 2047)
+		odr_sel_bits = 2047;
+
+	ret = ad7124_spi_write_mask(st, AD7124_FILTER(channel),
+				    AD7124_FILTER_FS_MSK,
+				    AD7124_FILTER_FS(odr_sel_bits), 3);
+	if (ret < 0)
+		return ret;
+	/* fADC = fCLK / (FS[10:0] x 32) */
+	st->channel_config[channel].odr =
+		DIV_ROUND_CLOSEST(fclk, odr_sel_bits * 32);
+
+	return 0;
+}
+
+static int ad7124_set_channel_gain(struct ad7124_state *st,
+				   unsigned int channel,
+				   unsigned int gain)
+{
+	unsigned int res;
+	int ret;
+
+	res = ad7124_find_closest_match(ad7124_gain,
+					ARRAY_SIZE(ad7124_gain), gain);
+	ret = ad7124_spi_write_mask(st, AD7124_CONFIG(channel),
+				    AD7124_CONFIG_PGA_MSK,
+				    AD7124_CONFIG_PGA(res), 2);
+	if (ret < 0)
+		return ret;
+
+	st->channel_config[channel].pga_bits = res;
+
+	return 0;
+}
+
+static int ad7124_read_raw(struct iio_dev *indio_dev,
+			   struct iio_chan_spec const *chan,
+			   int *val, int *val2, long info)
+{
+	struct ad7124_state *st = iio_priv(indio_dev);
+	int idx, ret;
+
+	switch (info) {
+	case IIO_CHAN_INFO_RAW:
+		ret = ad_sigma_delta_single_conversion(indio_dev, chan, val);
+		if (ret < 0)
+			return ret;
+
+		/* After the conversion is performed, disable the channel */
+		ret = ad_sd_write_reg(&st->sd,
+				      AD7124_CHANNEL(chan->address), 2,
+				      st->channel_config[chan->address].ain |
+				      AD7124_CHANNEL_EN(0));
+		if (ret < 0)
+			return ret;
+
+		return IIO_VAL_INT;
+	case IIO_CHAN_INFO_SCALE:
+		idx = st->channel_config[chan->address].pga_bits;
+		*val = st->channel_config[chan->address].vref_mv /
+			ad7124_gain[idx];
+		if (st->channel_config[chan->address].bipolar)
+			*val2 = chan->scan_type.realbits - 1;
+		else
+			*val2 = chan->scan_type.realbits;
+
+		return IIO_VAL_FRACTIONAL_LOG2;
+	case IIO_CHAN_INFO_OFFSET:
+		if (st->channel_config[chan->address].bipolar) {
+			/* Code = 2^(n − 1) × ((Ain × Gain / Vref) + 1) */
+			idx = st->channel_config[chan->address].pga_bits;
+			*val = -(st->channel_config[chan->address].vref_mv /
+				 ad7124_gain[idx]);
+		} else {
+			*val = 0;
+		}
+
+		return IIO_VAL_INT;
+	case IIO_CHAN_INFO_SAMP_FREQ:
+		*val = st->channel_config[chan->address].odr;
+
+		return IIO_VAL_INT;
+	case IIO_CHAN_INFO_HARDWAREGAIN:
+		idx = st->channel_config[chan->address].pga_bits;
+		*val = ad7124_gain[idx];
+
+		return IIO_VAL_INT;
+	default:
+		return -EINVAL;
+	}
+}
+
+static int ad7124_write_raw(struct iio_dev *indio_dev,
+			    struct iio_chan_spec const *chan,
+			    int val, int val2, long info)
+{
+	struct ad7124_state *st = iio_priv(indio_dev);
+
+	if (val2 != 0)
+		return -EINVAL;
+
+	switch (info) {
+	case IIO_CHAN_INFO_SAMP_FREQ:
+		return ad7124_set_channel_odr(st, chan->address, val);
+	case IIO_CHAN_INFO_HARDWAREGAIN:
+		return ad7124_set_channel_gain(st, chan->address, val);
+	default:
+		return -EINVAL;
+	}
+}
+
+static IIO_CONST_ATTR(in_voltage_gain_available, "1 2 4 8 16 32 64 128");
+
+static struct attribute *ad7124_attributes[] = {
+	&iio_const_attr_in_voltage_gain_available.dev_attr.attr,
+	NULL,
+};
+
+static const struct attribute_group ad7124_attrs_group = {
+	.attrs = ad7124_attributes,
+};
+
+static const struct iio_info ad7124_info = {
+	.read_raw = ad7124_read_raw,
+	.write_raw = ad7124_write_raw,
+	.validate_trigger = ad_sd_validate_trigger,
+	.attrs = &ad7124_attrs_group,
+};
+
+static int ad7124_soft_reset(struct ad7124_state *st)
+{
+	unsigned int readval, timeout;
+	int ret;
+
+	ret = ad_sd_reset(&st->sd, 64);
+	if (ret < 0)
+		return ret;
+
+	timeout = 100;
+	do {
+		ret = ad_sd_read_reg(&st->sd, AD7124_STATUS, 1, &readval);
+		if (ret < 0)
+			return ret;
+
+		if (!(readval & AD7124_STATUS_POR_FLAG_MSK))
+			return 0;
+
+		/* The AD7124 requires typically 2ms to power up and settle */
+		usleep_range(100, 2000);
+	} while (--timeout);
+
+	dev_err(&st->sd.spi->dev, "Soft reset failed\n");
+
+	return -EIO;
+}
+
+static int ad7124_init_channel_vref(struct ad7124_state *st,
+				    unsigned int channel_number)
+{
+	unsigned int refsel = st->channel_config[channel_number].refsel;
+
+	switch (refsel) {
+	case AD7124_REFIN1:
+	case AD7124_REFIN2:
+	case AD7124_AVDD_REF:
+		if (IS_ERR(st->vref[refsel])) {
+			dev_err(&st->sd.spi->dev,
+				"Error, trying to use external voltage reference without a %s regulator.\n",
+				ad7124_ref_names[refsel]);
+				return PTR_ERR(st->vref[refsel]);
+		}
+		st->channel_config[channel_number].vref_mv =
+			regulator_get_voltage(st->vref[refsel]);
+		/* Conversion from uV to mV */
+		st->channel_config[channel_number].vref_mv /= 1000;
+		break;
+	case AD7124_INT_REF:
+		st->channel_config[channel_number].vref_mv = 2500;
+		break;
+	default:
+		dev_err(&st->sd.spi->dev, "Invalid reference %d\n", refsel);
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static int ad7124_of_parse_channel_config(struct iio_dev *indio_dev,
+					  struct device_node *np)
+{
+	struct ad7124_state *st = iio_priv(indio_dev);
+	struct device_node *child;
+	struct iio_chan_spec *chan;
+	unsigned int ain[2], channel = 0, tmp;
+	int ret;
+
+	st->num_channels = of_get_available_child_count(np);
+	if (!st->num_channels) {
+		dev_err(indio_dev->dev.parent, "no channel children\n");
+		return -ENODEV;
+	}
+
+	chan = devm_kcalloc(indio_dev->dev.parent, st->num_channels,
+			    sizeof(*chan), GFP_KERNEL);
+	if (!chan)
+		return -ENOMEM;
+
+	indio_dev->channels = chan;
+	indio_dev->num_channels = st->num_channels;
+
+	for_each_available_child_of_node(np, child) {
+		ret = of_property_read_u32(child, "reg", &channel);
+		if (ret)
+			goto err;
+
+		ret = of_property_read_u32_array(child, "diff-channels",
+						 ain, 2);
+		if (ret)
+			goto err;
+
+		if (ain[0] >= st->chip_info->num_inputs ||
+		    ain[1] >= st->chip_info->num_inputs) {
+			dev_err(indio_dev->dev.parent,
+				"Input pin number out of range.\n");
+			ret = -EINVAL;
+			goto err;
+		}
+		st->channel_config[channel].ain = AD7124_CHANNEL_AINP(ain[0]) |
+						  AD7124_CHANNEL_AINM(ain[1]);
+		st->channel_config[channel].bipolar =
+			of_property_read_bool(child, "bipolar");
+
+		ret = of_property_read_u32(child, "adi,reference-select", &tmp);
+		if (ret)
+			st->channel_config[channel].refsel = AD7124_INT_REF;
+		else
+			st->channel_config[channel].refsel = tmp;
+
+		*chan = ad7124_channel_template;
+		chan->address = channel;
+		chan->scan_index = channel;
+		chan->channel = ain[0];
+		chan->channel2 = ain[1];
+
+		chan++;
+	}
+
+	return 0;
+err:
+	of_node_put(child);
+
+	return ret;
+}
+
+static int ad7124_setup(struct ad7124_state *st)
+{
+	unsigned int val, fclk, power_mode;
+	int i, ret;
+
+	fclk = clk_get_rate(st->mclk);
+	if (!fclk)
+		return -EINVAL;
+
+	/* The power mode changes the master clock frequency */
+	power_mode = ad7124_find_closest_match(ad7124_master_clk_freq_hz,
+					ARRAY_SIZE(ad7124_master_clk_freq_hz),
+					fclk);
+	if (fclk != ad7124_master_clk_freq_hz[power_mode]) {
+		ret = clk_set_rate(st->mclk, fclk);
+		if (ret)
+			return ret;
+	}
+
+	/* Set the power mode */
+	st->adc_control &= ~AD7124_ADC_CTRL_PWR_MSK;
+	st->adc_control |= AD7124_ADC_CTRL_PWR(power_mode);
+	ret = ad_sd_write_reg(&st->sd, AD7124_ADC_CONTROL, 2, st->adc_control);
+	if (ret < 0)
+		return ret;
+
+	for (i = 0; i < st->num_channels; i++) {
+		val = st->channel_config[i].ain | AD7124_CHANNEL_SETUP(i);
+		ret = ad_sd_write_reg(&st->sd, AD7124_CHANNEL(i), 2, val);
+		if (ret < 0)
+			return ret;
+
+		ret = ad7124_init_channel_vref(st, i);
+		if (ret < 0)
+			return ret;
+
+		val = AD7124_CONFIG_BIPOLAR(st->channel_config[i].bipolar) |
+		      AD7124_CONFIG_REF_SEL(st->channel_config[i].refsel);
+		ret = ad_sd_write_reg(&st->sd, AD7124_CONFIG(i), 2, val);
+		if (ret < 0)
+			return ret;
+		/*
+		 * 9.38 SPS is the minimum output data rate supported
+		 * regardless of the selected power mode. Round it up to 10 and
+		 * set all the enabled channels to this default value.
+		 */
+		ret = ad7124_set_channel_odr(st, i, 10);
+		if (ret < 0)
+			return ret;
+	}
+
+	return ret;
+}
+
+static int ad7124_probe(struct spi_device *spi)
+{
+	const struct spi_device_id *id;
+	struct ad7124_state *st;
+	struct iio_dev *indio_dev;
+	int i, ret;
+
+	indio_dev = devm_iio_device_alloc(&spi->dev, sizeof(*st));
+	if (!indio_dev)
+		return -ENOMEM;
+
+	st = iio_priv(indio_dev);
+
+	id = spi_get_device_id(spi);
+	st->chip_info = &ad7124_chip_info_tbl[id->driver_data];
+
+	ad_sd_init(&st->sd, indio_dev, spi, &ad7124_sigma_delta_info);
+
+	spi_set_drvdata(spi, indio_dev);
+
+	indio_dev->dev.parent = &spi->dev;
+	indio_dev->name = spi_get_device_id(spi)->name;
+	indio_dev->modes = INDIO_DIRECT_MODE;
+	indio_dev->info = &ad7124_info;
+
+	ret = ad7124_of_parse_channel_config(indio_dev, spi->dev.of_node);
+	if (ret < 0)
+		return ret;
+
+	for (i = 0; i < ARRAY_SIZE(st->vref); i++) {
+		if (i == AD7124_INT_REF)
+			continue;
+
+		st->vref[i] = devm_regulator_get_optional(&spi->dev,
+						ad7124_ref_names[i]);
+		if (PTR_ERR(st->vref[i]) == -ENODEV)
+			continue;
+		else if (IS_ERR(st->vref[i]))
+			return PTR_ERR(st->vref[i]);
+
+		ret = regulator_enable(st->vref[i]);
+		if (ret)
+			return ret;
+	}
+
+	st->mclk = devm_clk_get(&spi->dev, "mclk");
+	if (IS_ERR(st->mclk)) {
+		ret = PTR_ERR(st->mclk);
+		goto error_regulator_disable;
+	}
+
+	ret = clk_prepare_enable(st->mclk);
+	if (ret < 0)
+		goto error_regulator_disable;
+
+	ret = ad7124_soft_reset(st);
+	if (ret < 0)
+		goto error_clk_disable_unprepare;
+
+	ret = ad7124_setup(st);
+	if (ret < 0)
+		goto error_clk_disable_unprepare;
+
+	ret = ad_sd_setup_buffer_and_trigger(indio_dev);
+	if (ret < 0)
+		goto error_clk_disable_unprepare;
+
+	ret = iio_device_register(indio_dev);
+	if (ret < 0) {
+		dev_err(&spi->dev, "Failed to register iio device\n");
+		goto error_remove_trigger;
+	}
+
+	return 0;
+
+error_remove_trigger:
+	ad_sd_cleanup_buffer_and_trigger(indio_dev);
+error_clk_disable_unprepare:
+	clk_disable_unprepare(st->mclk);
+error_regulator_disable:
+	for (i = ARRAY_SIZE(st->vref) - 1; i >= 0; i--) {
+		if (!IS_ERR_OR_NULL(st->vref[i]))
+			regulator_disable(st->vref[i]);
+	}
+
+	return ret;
+}
+
+static int ad7124_remove(struct spi_device *spi)
+{
+	struct iio_dev *indio_dev = spi_get_drvdata(spi);
+	struct ad7124_state *st = iio_priv(indio_dev);
+	int i;
+
+	iio_device_unregister(indio_dev);
+	ad_sd_cleanup_buffer_and_trigger(indio_dev);
+	clk_disable_unprepare(st->mclk);
+
+	for (i = ARRAY_SIZE(st->vref) - 1; i >= 0; i--) {
+		if (!IS_ERR_OR_NULL(st->vref[i]))
+			regulator_disable(st->vref[i]);
+	}
+
+	return 0;
+}
+
+static const struct spi_device_id ad7124_id_table[] = {
+	{ "ad7124-4", ID_AD7124_4 },
+	{ "ad7124-8", ID_AD7124_8 },
+	{}
+};
+MODULE_DEVICE_TABLE(spi, ad7124_id_table);
+
+static const struct of_device_id ad7124_of_match[] = {
+	{ .compatible = "adi,ad7124-4" },
+	{ .compatible = "adi,ad7124-8" },
+	{ },
+};
+MODULE_DEVICE_TABLE(of, ad7124_of_match);
+
+static struct spi_driver ad71124_driver = {
+	.driver = {
+		.name = "ad7124",
+		.of_match_table = ad7124_of_match,
+	},
+	.probe = ad7124_probe,
+	.remove	= ad7124_remove,
+	.id_table = ad7124_id_table,
+};
+module_spi_driver(ad71124_driver);
+
+MODULE_AUTHOR("Stefan Popa <stefan.popa@analog.com>");
+MODULE_DESCRIPTION("Analog Devices AD7124 SPI driver");
+MODULE_LICENSE("GPL");
-- 
2.7.4
