Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (61.164.42.155:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 10 Nov 2018 00:53:09 -0000
Received: from icoremail.net (unknown [209.85.214.173])
	by mail-app2 (Coremail) with SMTP id by_KCgDnX+89juVbViVoAQ--.32145S3;
	Fri, 09 Nov 2018 21:40:14 +0800 (CST)
Received: from mail-pl1-f173.google.com (unknown [209.85.214.173])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwCXd0M4juVbYs0iAA--.743S3;
	Fri, 09 Nov 2018 21:40:09 +0800 (CST)
Received: by mail-pl1-f173.google.com with SMTP id w22-v6so978985plk.0
        for <xuliker@zju.edu.cn>; Fri, 09 Nov 2018 05:40:09 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:mime-version
         :in-reply-to:references:from:date:message-id:subject:to:cc:sender
         :precedence:list-id;
        bh=41kNbker7pjMlSrMXESCPMU6qoot3isUmOITc7YdAuc=;
        b=XqnC8dGOTc7bflH31fL43AR9SBBr2w3Pbqtya04zZRcxthlsmcBdHklKeBhWs49sdO
         aBUnTv8NgB/p8Jge99kGgmRqrmNRFDA9xVagdLFcVONhSqbmMZjG8mIFsZZFL3tZyTBH
         a/iiq8p3oFKcF5Jins0Q3XkoSMLqiwsf3J9T55N1NgQIsaU75rPidio6sH+s4M1YVdW5
         5cqpGDqN1/MVTokZW7qZJcTcWdCMB1zaHmpHsfTQp0VeXNp4ryQCzFDE2SrJaNCkNK+t
         DkSqj3jG6xwvYuFQ7HE8txHlj3rr2ZtfM3qu4MSeYWSHIJq6aJF00hqCC8F56om8cNzH
         OLSg==
X-Gm-Message-State: AGRZ1gJh2WixNpLkSQNI4Hs9I196W9ydpINP6/YMN9F1VXRu8YyxusJ9
	4IPPoMajeGCb2OQz0Fth719IW1d0W6KQCO1MLelDQC4cEsN+BqPr0A==
X-Received: by 2002:a17:902:6b4b:: with SMTP id g11-v6mr8989190plt.213.1541770808683;
        Fri, 09 Nov 2018 05:40:08 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp212571pjt;
        Fri, 9 Nov 2018 05:40:07 -0800 (PST)
X-Google-Smtp-Source: AJdET5fOOMJrp3pwtvhe9C2BB51owYvBGsq+FU9pEXZq6AP7e20r301a7LqZShHrAorv5PQIBCoJ
X-Received: by 2002:a63:790e:: with SMTP id u14mr7421482pgc.452.1541770807720;
        Fri, 09 Nov 2018 05:40:07 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1541770807; cv=none;
        d=google.com; s=arc-20160816;
        b=EctNlgZaEPZQnHjIVRUdn3pTKhDT+NHh5Jqxe6RSBR2aoQyP2gSI3qHPyLZpzTLt8z
         3kbhJHdD5CyFk/htTbJqiwEiUKc1R/t7S8/2LKPQGrA/DcuAlwILQx2IFcCIjS7TMjFa
         jOTkD8gFlJA16vbcSgu7zpfS4ESzPPiy8Rvf5sLzoFsWX2zB6OBo9KUgs1xmk5TJj8eN
         VCwQfxc6jy8sNy1mszutC2ek6FYzABXb5hku5GHRr1vp6Ra0xpECOysuAt9KV5mNkU5b
         0dcpatyk4mtfoQg8Y8aYR/P3iNLQGIVOJlI+6qJUROJFvFPREUIiR8pRn1ZsI8CUFkge
         PQWQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:cc:to:subject:message-id:date:from
         :references:in-reply-to:mime-version:dkim-signature;
        bh=41kNbker7pjMlSrMXESCPMU6qoot3isUmOITc7YdAuc=;
        b=B4b2LU6l82uTrT8+uNiufB5LCq90miJuZakMMhnZ+0/GM4JyBEnP0FIBgLw5oHKxOy
         jJBcUAV2wKRHaiI2/RU4uTvkQWEEPur2/5K56wbHkKAWKPmAuoZso1ejA8hFlRaaB8WH
         4LExzf4KPCSpYifsG7sKnQ8ZDZny8KsuM7sBc5eFZR9Dro6FOAOO1EjmiI2Gdef7mUEp
         9nxOl+yZGb79M64hJrlfVgfEhtfA6rB5gRjazwWQSJjGE1MKemXofB86hyxd8aVhZwoP
         rCTdpza7cd3+DTpnMiTsaWc6h/Zg1IEyFi6vmIrF5sY4ArN5k6+Yy5/KJnL5NMaNLB1H
         WDEg==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@linaro.org header.s=google header.b=UoPOHMeA;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;
       dmarc=pass (p=NONE sp=NONE dis=NONE) header.from=linaro.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id i33-v6si7368859pld.433.2018.11.09.05.39.43;
        Fri, 09 Nov 2018 05:40:07 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728000AbeKIXT7 (ORCPT <rfc822;tu.k.phung@gmail.com>
        + 99 others); Fri, 9 Nov 2018 18:19:59 -0500
Received: from mail-it1-f195.google.com ([209.85.166.195]:39599 "EHLO
        mail-it1-f195.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727784AbeKIXT6 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 9 Nov 2018 18:19:58 -0500
Received: by mail-it1-f195.google.com with SMTP id m15so3210344itl.4
        for <linux-kernel@vger.kernel.org>; Fri, 09 Nov 2018 05:39:18 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc;
        bh=41kNbker7pjMlSrMXESCPMU6qoot3isUmOITc7YdAuc=;
        b=UoPOHMeA60tmrLPtRQrqJKmsdP4J+jX9orOhFyzJRoTxXxU+CWPtZ5kqK95Gnkmjp9
         n4rzVhKX1bgWNX1CrhQm75CW/OpVpnLPCoB/QwRwOFhf6ytuW/ks7SdWh8s91URW5u0w
         +E0+Jzj3tOifeiH6fUlhakmmkBwqW2k/pufSY=
X-Received: by 2002:a24:7d8d:: with SMTP id b135-v6mr1903970itc.121.1541770757881;
 Fri, 09 Nov 2018 05:39:17 -0800 (PST)
MIME-Version: 1.0
Received: by 2002:a6b:4f16:0:0:0:0:0 with HTTP; Fri, 9 Nov 2018 05:39:17 -0800 (PST)
In-Reply-To: <3cf04e113d71c9f8e4be95fb84a510f085aa4afa.1541711457.git.jpoimboe@redhat.com>
References: <cover.1541711457.git.jpoimboe@redhat.com> <3cf04e113d71c9f8e4be95fb84a510f085aa4afa.1541711457.git.jpoimboe@redhat.com>
From: Ard Biesheuvel <ard.biesheuvel@linaro.org>
Date: Fri, 9 Nov 2018 14:39:17 +0100
Message-ID: <CAKv+Gu9bMkFEx_GxH3uLm0gveQurp7ELDi6C5NvpugufPFMbRA@mail.gmail.com>
Subject: Re: [RFC PATCH 1/3] static_call: Add static call infrastructure
To: Josh Poimboeuf <jpoimboe@redhat.com>
Cc: Linux Kernel Mailing List <linux-kernel@vger.kernel.org>,
        "the arch/x86 maintainers" <x86@kernel.org>,
        Andy Lutomirski <luto@kernel.org>,
        Steven Rostedt <rostedt@goodmis.org>,
        Peter Zijlstra <peterz@infradead.org>,
        Ingo Molnar <mingo@kernel.org>,
        Thomas Gleixner <tglx@linutronix.de>,
        Linus Torvalds <torvalds@linux-foundation.org>,
        Masami Hiramatsu <mhiramat@kernel.org>,
        Jason Baron <jbaron@akamai.com>, Jiri Kosina <jkosina@suse.cz>,
        David Laight <David.Laight@aculab.com>,
        Borislav Petkov <bp@alien8.de>
Content-Type: text/plain; charset="UTF-8"
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwCXd0M4juVbYs0iAA--.743S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoWxWF47Zw18urWxAF1UZw48Xrb_yoWrWrWfpF
	yDJr1fJF45XF1xAay3Ar18ur9Ik34xArW7ur93Gw4fCF9xtry7XF4UK34YyFy5urZ5KF4j
	qF4q9Fs0kr45ArUanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUBFb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Ar0_tr1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1l84ACjcxK6I8E
	87Iv67AKxVW0oVCq3wA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_GcCE3s1le2I262IYc4CY6c
	8Ij28IcVAaY2xG8wAqx4xG64xvF2IEw4CE5I8CrVC2j2WlYx0E2Ix0cI8IcVAFwI0_Jr0_
	Jr4lYx0Ex4A2jsIE14v26r4j6F4UMcvjeVCFs4IE7xkEbVWUJVW8JwCjxxvEa2IrMxkF7I
	0Ew4C26cxK6c8Ij28IcwCY1Ik26cxK6xAEc7vF6xCjj44lc2xSY4AK6IIF6ry8MxkI7II2
	jI8vz4vEwIxGrwCYIxAIcVC0I7IYx2IY67AKxVWUCVW8JwCYIxAIcVC0I7IYx2IY6xkF7I
	0E14v26r1j6r4UMxvI42IY6I8E87Iv67AKxVW0oVCq3wCYIxAIcVC2z280aVCY1x0267AK
	xVW0oVCq3wCF04k20xvY0x0EwIxGrwCF04k20xvEw4C26cxK6c8Ij28IcwCF72vE77IF4w
	CFx2IqxVCFs4IE7xkEbVWUJVW8JwC20s026c02F40E14v26r1j6r18MI8I3I0E7480Y4vE
	14v26r106r1rMI8E67AF67kF1VAFwI0_Jw0_GFylIxkGc2Ij64vIr41lIxAIcVCF04k26c
	xKx2IYs7xG6r1I6r4UYxBIdaVFxhVjvjDU0xZFpf9x07bljjkUUUUU=

On 8 November 2018 at 22:15, Josh Poimboeuf <jpoimboe@redhat.com> wrote:
> Add a static call infrastructure.  Static calls use code patching to
> hard-code function pointers into direct branch instructions.  They give
> the flexibility of function pointers, but with improved performance.
> This is especially important for cases where retpolines would otherwise
> be used, as retpolines can significantly impact performance.
>
> This code is heavily inspired by the jump label code (aka "static
> jumps"), as some of the concepts are very similar.
>
> There are three implementations, depending on arch support:
>
> 1) optimized: patched call sites (CONFIG_HAVE_STATIC_CALL_OPTIMIZED)
> 2) unoptimized: patched trampolines (CONFIG_HAVE_STATIC_CALL_UNOPTIMIZED)
> 3) basic function pointers
>
> For more details, see the comments in include/linux/static_call.h.
>
> Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
> ---
>  arch/Kconfig                      |   6 +
>  include/asm-generic/vmlinux.lds.h |  11 ++
>  include/linux/module.h            |  10 +
>  include/linux/static_call.h       | 186 +++++++++++++++++++
>  include/linux/static_call_types.h |  19 ++
>  kernel/Makefile                   |   1 +
>  kernel/module.c                   |   5 +
>  kernel/static_call.c              | 297 ++++++++++++++++++++++++++++++
>  8 files changed, 535 insertions(+)
>  create mode 100644 include/linux/static_call.h
>  create mode 100644 include/linux/static_call_types.h
>  create mode 100644 kernel/static_call.c
>
> diff --git a/kernel/static_call.c b/kernel/static_call.c
> new file mode 100644
> index 000000000000..599ebc6fc4f1
> --- /dev/null
> +++ b/kernel/static_call.c
...
> +static void __init static_call_init(void)
> +{
> +       struct static_call_site *start = __start_static_call_sites;
> +       struct static_call_site *stop  = __stop_static_call_sites;
> +       struct static_call_site *site;
> +
> +       if (start == stop) {
> +               pr_warn("WARNING: empty static call table\n");
> +               return;
> +       }
> +
> +       cpus_read_lock();
> +       static_call_lock();
> +
> +       static_call_sort_entries(start, stop);
> +
> +       for (site = start; site < stop; site++) {
> +               struct static_call_key *key = static_call_key(site);
> +               unsigned long addr = static_call_addr(site);
> +
> +               if (list_empty(&key->site_mods)) {
> +                       struct static_call_mod *mod;
> +
> +                       mod = kzalloc(sizeof(*mod), GFP_KERNEL);
> +                       if (!mod) {
> +                               WARN(1, "Failed to allocate memory for static calls");
> +                               return;
> +                       }
> +
> +                       mod->sites = site;
> +                       list_add_tail(&mod->list, &key->site_mods);
> +
> +                       /*
> +                        * The trampoline should no longer be used.  Poison it
> +                        * it with a BUG() to catch any stray callers.
> +                        */
> +                       arch_static_call_poison_tramp(addr);

This patches the wrong thing: the trampoline is at key->func not addr.

However, patching it here means we poison it before all users are
patched. I added this on top

diff --git a/kernel/static_call.c b/kernel/static_call.c
index 599ebc6fc4f1..d9562329bec6 100644
--- a/kernel/static_call.c
+++ b/kernel/static_call.c
@@ -248,6 +248,7 @@ static void __init static_call_init(void)
        struct static_call_site *start = __start_static_call_sites;
        struct static_call_site *stop  = __stop_static_call_sites;
        struct static_call_site *site;
+       struct static_call_key *prev_key = NULL;

        if (start == stop) {
                pr_warn("WARNING: empty static call table\n");
@@ -279,7 +280,9 @@ static void __init static_call_init(void)
                         * The trampoline should no longer be used.  Poison it
                         * it with a BUG() to catch any stray callers.
                         */
-                       arch_static_call_poison_tramp(addr);
+                       if (prev_key)
+
arch_static_call_poison_tramp((unsigned long)prev_key->func);
+                       prev_key = key;
                }

                arch_static_call_transform(addr, key->func);


> +               }
> +
> +               arch_static_call_transform(addr, key->func);
> +       }
> +
> +       static_call_initialized = true;
> +
> +       static_call_unlock();
> +       cpus_read_unlock();
> +
> +#ifdef CONFIG_MODULES
> +       register_module_notifier(&static_call_module_nb);
> +#endif
> +}
> +early_initcall(static_call_init);
> --
> 2.17.2
>
