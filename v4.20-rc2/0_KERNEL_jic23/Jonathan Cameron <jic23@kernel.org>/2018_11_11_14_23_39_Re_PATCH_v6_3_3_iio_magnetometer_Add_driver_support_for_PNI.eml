Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (61.164.42.155:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 11 Nov 2018 15:05:44 -0000
Received: from icoremail.net (unknown [209.85.215.174])
	by mail-app2 (Coremail) with SMTP id by_KCgDHH+aUO+hbswh2AQ--.35379S3;
	Sun, 11 Nov 2018 22:24:21 +0800 (CST)
Received: from mail-pg1-f174.google.com (unknown [209.85.215.174])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwA3FUGRO+hb98QsAA--.29020S3;
	Sun, 11 Nov 2018 22:24:17 +0800 (CST)
Received: by mail-pg1-f174.google.com with SMTP id 32-v6so2876797pgu.2
        for <xuliker@zju.edu.cn>; Sun, 11 Nov 2018 06:24:17 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:date:from:to:cc
         :subject:message-id:in-reply-to:references:mime-version
         :content-transfer-encoding:sender:precedence:list-id;
        bh=dQghPUEWWPUpeTOEkNFS7uPVb7kjUCyYHOm7ZFA+tns=;
        b=Mzq2Zqi3Nq6tycs1mcvcdguEwTCerkdD8Zvr+ePo2krIyVZEOwXXRY/lwm2hHlzhYx
         8tYp6MEMoLfJWG6rfIrp5sy16ARPzORPwecnTvKtYhpTQQHHyAolGia/XRrtFWFF7MT/
         k0oi0g6X53I80HQRHXgkjyVAtZgbqCTBtdO96mzzpld27gcjG/GnUeYyBFwpm/uN/ud1
         hYaVTXSOmeoDpO/l8q4E8Uk3ShHWEoEnC39rd+egnP+pe1aymZn15ktBmTHfkKrS0CK9
         Z8xKyPuCorx5fccZ4J931yvvmjT8moVZ7/milXhBk/Z5weJ9CC9e8riSxEVUo+KuKm0n
         /jkw==
X-Gm-Message-State: AGRZ1gLssm/r8SgkuaJomBPFlBxu9eyu7nPv0b7vOsrULBShG035I1hV
	ZbE53cFQU9f0O2caxok4D9vNd2loHhhyFeoVDi7ccsWrJyG1iWE=
X-Received: by 2002:a63:460a:: with SMTP id t10-v6mr14309113pga.197.1541946256890;
        Sun, 11 Nov 2018 06:24:16 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp2153450pjt;
        Sun, 11 Nov 2018 06:24:15 -0800 (PST)
X-Google-Smtp-Source: AJdET5czEz+4p/FkJCEAuVPoDD18/fkKOEwyJh92SvKfrkPcHMAo+egjymkSAXW0eGILGXxErFYq
X-Received: by 2002:a63:da45:: with SMTP id l5mr14270886pgj.111.1541946255266;
        Sun, 11 Nov 2018 06:24:15 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1541946255; cv=none;
        d=google.com; s=arc-20160816;
        b=GNSuX5PzhbY+abCGhDhqlidnOqbr1/Qi0Pcn7TY5PqrflQqeWFzHUv238qpWM3HyO5
         q7FGjyWHX/JlAAqDpMoH20ugynk2+oZ1J0K0CFJfhEueaxvT1DlPzejdReDDx2LIsaOs
         d1dKLab5gKVyundKJxkMR8JpRu/DDEGW8zH43TmC2jypRXN8KtYVZOctfrjrHLHD0cRL
         W2FrnUlhk7cj2ASYH4MUbeNd144Qp6hFMxEnGBoj0sZClf47OewWSEVCG3iKTneCNMUB
         nA6YSEZhuraLlEi1RWngQ6N6LT5dvPME27cwg9UiQcLbWAQ6FpBwQvjEMfETF35nIY5z
         6fiA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:content-transfer-encoding:mime-version
         :references:in-reply-to:message-id:subject:cc:to:from:date
         :dkim-signature;
        bh=dQghPUEWWPUpeTOEkNFS7uPVb7kjUCyYHOm7ZFA+tns=;
        b=NTHdi6wxZHGisUrxJW+rJ0Wh+MZ/2PSab5M4gfjtLK3B6D8E5OGtZ3jPehmdSOGLtR
         vQQ4C8neqfcMpAyEOpgGl8AEO17S3YN+OAC47jGOXFey5vFLu8dxOGKRZXN4+kZnBWP9
         1L2wI930gRhaz5QPm5efC00kE1Er1x2eX/zLhbyJCSAp0tv4hWcKhcskCQbp6s9nJRpC
         nlj/bUUqKfI47PElpnXv8TW43HgmGpO51/6Ng1nr0ZB37XQLL5kJlWPr9oFda80Gj+vN
         ZLi257zLFM9WeyPvWkcT9+E0GnD2IBvJNOWexJLrDIjZMwrYjDs7MhXE7PN6jFuia+lu
         VJZQ==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@kernel.org header.s=default header.b=gDhjoXDu;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;
       dmarc=pass (p=NONE sp=NONE dis=NONE) header.from=kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id f2-v6si14356184plr.333.2018.11.11.06.24.00;
        Sun, 11 Nov 2018 06:24:15 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728427AbeKLAMa (ORCPT <rfc822;berg.ding@gmail.com> + 99 others);
        Sun, 11 Nov 2018 19:12:30 -0500
Received: from mail.kernel.org ([198.145.29.99]:33830 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1728095AbeKLAMa (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Sun, 11 Nov 2018 19:12:30 -0500
Received: from archlinux (cpc91196-cmbg18-2-0-cust659.5-4.cable.virginm.net [81.96.234.148])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 05CD0208A3;
        Sun, 11 Nov 2018 14:23:42 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1541946225;
        bh=4vG3pH+wzWTiBpEiXWtMNk37IOEFNkoW9cf14m3kKy8=;
        h=Date:From:To:Cc:Subject:In-Reply-To:References:From;
        b=gDhjoXDu4d5YUwaCwdzLsU6i0kP8slhCsOIljwPKgomPaGGuNw0me8Mv/E57RDDMc
         pp93t7XqbS7beZP4S/s0ZLwaGXRlLukGIcDCXWIC07jDpNiML/DLUD1JsLXL7KIat6
         skDLrahpzUQb/t9/rEJCY/fbGq0pCpp2L0YxbPKg=
Date: Sun, 11 Nov 2018 14:23:39 +0000
From: Jonathan Cameron <jic23@kernel.org>
To: Song Qiang <songqiang1304521@gmail.com>
Cc: knaack.h@gmx.de, lars@metafoo.de, pmeerw@pmeerw.net,
        robh+dt@kernel.org, mark.rutland@arm.com, preid@electromag.com.au,
        himanshujha199640@gmail.com, linux-iio@vger.kernel.org,
        linux-kernel@vger.kernel.org, devicetree@vger.kernel.org
Subject: Re: [PATCH v6 3/3] iio: magnetometer: Add driver support for PNI
 RM3100
Message-ID: <20181111142339.59c1c713@archlinux>
In-Reply-To: <20181108092749.12167-4-songqiang1304521@gmail.com>
References: <20181108092749.12167-1-songqiang1304521@gmail.com>
        <20181108092749.12167-4-songqiang1304521@gmail.com>
X-Mailer: Claws Mail 3.17.1 (GTK+ 2.24.32; x86_64-pc-linux-gnu)
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwA3FUGRO+hb98QsAA--.29020S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvAXoWfZF4UXr17CF47tw15Kw1fCrg_yoW5Xry8Wo
	W3tw1fCa1fAry7AFy8GFy7XFW7WrWDArnxCFZxCrZ8ta4kt3WrCa17Gws8C34S9FWftr12
	q34DKrZavF4ftw1rn29KB7ZKAUJUUUUU529EdanIXcx71UUUUU7v73VFW2AGmfu7jjvjm3
	AaLaJ3UjIYCTnIWjp_UUUO37k0a2IF6w1UM7kC6x804xWl14x267AKxVWUJVW8JwAFIxvE
	14AKwVWUJVWUGwA2ocxC64kIII0Yj41l84x0c7CEw4AK67xGY2AK021l84ACjcxK6xIIjx
	v20xvE14v26F1j6w1UM28EF7xvwVC0I7IYx2IY6xkF7I0E14v26r4j6F4UM28EF7xvwVC2
	z280aVAFwI0_GcCE3s1l84ACjcxK6I8E87Iv6xkF7I0E14v26rxl6s0DM2vYz4IE04k24V
	AvwVAKI4IrM2AIxVAIcxkEcVAq07x20xvEncxIr21l5I8CrVACY4xI64kE6c02F40Ex7xf
	McIj6xIIjxv20xvE14v26r1j6r18McIj6I8E87Iv67AKxVW8JVWxJwAm72CE4IkC6x0Yz7
	v_Jr0_Gr1lF7xvr2IYc2Ij64vIr41l7I0Y6sxI4wCY1x0264kExVAvwVAq07x20xylc7Ca
	8VAvwVCFzxkY4VCF77xAMxkIecxEwVCI4VW5XwCY0x0Ix7I2Y4AK64vIr41lcIIF0xvE2I
	x0cI8IcVAFwI0_JFI_Gr1lcIIF0xvE2Ix0cI8IcVCY1x0267AKxVWUJVW8JwCYIxAIcVC2
	z280aVAFwI0_Gr1j6F4UJwCYIxAIcVC2z280aVCY1x0267AKxVW8Jr0_Cr1UMxAIw28Icx
	kI7VAKI48JMxAIw28IcVAKzI0EY4vE52x082I5MxCjnVCjjxCrMxC20s026xCaFVCjc4AY
	6r1j6r4UMI8I3I0E5I8CrVAFwI0_Jr0_Jr4lx2IqxVCjr7xvwVAFwI0_JrI_JrWlx4CE17
	CEb7AF67AKxVWUtVW8ZwCIc40Y0x0EwIxGrwCI42IY6xAIw20EY4v20xvaj40_Gr0_ZrUv
	cSsGvfC2KfnxnUUI43ZEXa7IU53Ef5UUUUU==

On Thu,  8 Nov 2018 17:27:49 +0800
Song Qiang <songqiang1304521@gmail.com> wrote:

> PNI RM3100 is a high resolution, large signal immunity magnetometer,
> composed of 3 single sensors and a processing chip with a MagI2C
> interface.
>=20
> Following functions are available:
>  - Single-shot measurement from
>    /sys/bus/iio/devices/iio:deviceX/in_magn_{axis}_raw
>  - Triggerd buffer measurement.
>  - DRDY pin for data ready trigger.
>  - Both i2c and spi interface are supported.
>  - Both interrupt and polling measurement is supported, depends on if
>    the 'interrupts' in DT is declared.
>=20
> Signed-off-by: Song Qiang <songqiang1304521@gmail.com>
The goto copy2 bit just makes the code less readable.  Better to duplicate
the code.

A few other really trivial things I fixed up whilst applying.
+ some warnings about memcpy which are correct.

drivers/iio/magnetometer/rm3100-core.c:496:3: warning: =E2=80=98memcpy=E2=
=80=99 accessing 3 bytes at offsets 1272 and 1271 overlaps 2 bytes at offse=
t 1272 [-Wrestrict]
   memcpy(data->buffer + 4, data->buffer + 3, 3);
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
I switched them for memmove which I am fairly sure is safe in this
case as we don't care about retaining previous values at the source
locations.

Applied to the togreg branch of iio.git and pushed out as testing for
the autobuilders to play with it.

Thanks for your persistence on this one - we got there in the end ;)

Jonathan
> ---
>  MAINTAINERS                            |   7 +
>  drivers/iio/magnetometer/Kconfig       |  29 ++
>  drivers/iio/magnetometer/Makefile      |   4 +
>  drivers/iio/magnetometer/rm3100-core.c | 616 +++++++++++++++++++++++++
>  drivers/iio/magnetometer/rm3100-i2c.c  |  54 +++
>  drivers/iio/magnetometer/rm3100-spi.c  |  64 +++
>  drivers/iio/magnetometer/rm3100.h      |  17 +
>  7 files changed, 791 insertions(+)
>  create mode 100644 drivers/iio/magnetometer/rm3100-core.c
>  create mode 100644 drivers/iio/magnetometer/rm3100-i2c.c
>  create mode 100644 drivers/iio/magnetometer/rm3100-spi.c
>  create mode 100644 drivers/iio/magnetometer/rm3100.h
>=20
> diff --git a/MAINTAINERS b/MAINTAINERS
> index 1c0f771b859e..ca7a31736256 100644
> --- a/MAINTAINERS
> +++ b/MAINTAINERS
> @@ -11824,6 +11824,13 @@ M:	"Rafael J. Wysocki" <rafael.j.wysocki@intel.c=
om>
>  S:	Maintained
>  F:	drivers/pnp/
> =20
> +PNI RM3100 IIO DRIVER
> +M:	Song Qiang <songqiang1304521@gmail.com>
> +L:	linux-iio@vger.kernel.org
> +S:	Maintained
> +F:	drivers/iio/magnetometer/rm3100*
> +F:	Documentation/devicetree/bindings/iio/magnetometer/pni,rm3100.txt
> +
>  POSIX CLOCKS and TIMERS
>  M:	Thomas Gleixner <tglx@linutronix.de>
>  L:	linux-kernel@vger.kernel.org
> diff --git a/drivers/iio/magnetometer/Kconfig b/drivers/iio/magnetometer/=
Kconfig
> index ed9d776d01af..8a63cbbca4b7 100644
> --- a/drivers/iio/magnetometer/Kconfig
> +++ b/drivers/iio/magnetometer/Kconfig
> @@ -175,4 +175,33 @@ config SENSORS_HMC5843_SPI
>  	  - hmc5843_core (core functions)
>  	  - hmc5843_spi (support for HMC5983)
> =20
> +config SENSORS_RM3100
> +	tristate
> +	select IIO_BUFFER
> +	select IIO_TRIGGERED_BUFFER
> +
> +config SENSORS_RM3100_I2C
> +	tristate "PNI RM3100 3-Axis Magnetometer (I2C)"
> +	depends on I2C
> +	select SENSORS_RM3100
> +	select REGMAP_I2C
> +	help
> +	  Say Y here to add support for the PNI RM3100 3-Axis Magnetometer.
> +
> +	  This driver can also be compiled as a module.
> +	  To compile this driver as a module, choose M here: the module
> +	  will be called rm3100-i2c.
> +
> +config SENSORS_RM3100_SPI
> +	tristate "PNI RM3100 3-Axis Magnetometer (SPI)"
> +	depends on SPI_MASTER
> +	select SENSORS_RM3100
> +	select REGMAP_SPI
> +	help
> +	  Say Y here to add support for the PNI RM3100 3-Axis Magnetometer.
> +
> +	  This driver can also be compiled as a module.
> +	  To compile this driver as a module, choose M here: the module
> +	  will be called rm3100-spi.
> +
>  endmenu
> diff --git a/drivers/iio/magnetometer/Makefile b/drivers/iio/magnetometer=
/Makefile
> index 664b2f866472..ba1bc34b82fa 100644
> --- a/drivers/iio/magnetometer/Makefile
> +++ b/drivers/iio/magnetometer/Makefile
> @@ -24,3 +24,7 @@ obj-$(CONFIG_IIO_ST_MAGN_SPI_3AXIS) +=3D st_magn_spi.o
>  obj-$(CONFIG_SENSORS_HMC5843)		+=3D hmc5843_core.o
>  obj-$(CONFIG_SENSORS_HMC5843_I2C)	+=3D hmc5843_i2c.o
>  obj-$(CONFIG_SENSORS_HMC5843_SPI)	+=3D hmc5843_spi.o
> +
> +obj-$(CONFIG_SENSORS_RM3100)		+=3D rm3100-core.o
> +obj-$(CONFIG_SENSORS_RM3100_I2C)	+=3D rm3100-i2c.o
> +obj-$(CONFIG_SENSORS_RM3100_SPI)	+=3D rm3100-spi.o
> diff --git a/drivers/iio/magnetometer/rm3100-core.c b/drivers/iio/magneto=
meter/rm3100-core.c
> new file mode 100644
> index 000000000000..e64290cf6406
> --- /dev/null
> +++ b/drivers/iio/magnetometer/rm3100-core.c
> @@ -0,0 +1,616 @@
> +// SPDX-License-Identifier: GPL-2.0
> +/*
> + * PNI RM3100 3-axis geomagnetic sensor driver core.
> + *
> + * Copyright (C) 2018 Song Qiang <songqiang1304521@gmail.com>
> + *
> + * User Manual available at
> + * <https://www.pnicorp.com/download/rm3100-user-manual/>
> + *
> + * TODO: event generation, pm.
> + */
> +
> +#include <linux/delay.h>
> +#include <linux/interrupt.h>
> +#include <linux/module.h>
> +#include <linux/slab.h>
> +
> +#include <linux/iio/buffer.h>
> +#include <linux/iio/iio.h>
> +#include <linux/iio/kfifo_buf.h>
No need to include kfifo_buf unless you are using it
directly.

> +#include <linux/iio/sysfs.h>
> +#include <linux/iio/trigger.h>
> +#include <linux/iio/triggered_buffer.h>
> +#include <linux/iio/trigger_consumer.h>
> +
> +#include "rm3100.h"
> +
> +/* Cycle Count Registers. */
> +#define RM3100_REG_CC_X			0x05
> +#define RM3100_REG_CC_Y			0x07
> +#define RM3100_REG_CC_Z			0x09
> +
> +/* Poll Measurement Mode register. */
> +#define RM3100_REG_POLL			0x00
> +#define		RM3100_POLL_X		BIT(4)
> +#define		RM3100_POLL_Y		BIT(5)
> +#define		RM3100_POLL_Z		BIT(6)
> +
> +/* Continuous Measurement Mode register. */
> +#define RM3100_REG_CMM			0x01
> +#define		RM3100_CMM_START	BIT(0)
> +#define		RM3100_CMM_X		BIT(4)
> +#define		RM3100_CMM_Y		BIT(5)
> +#define		RM3100_CMM_Z		BIT(6)
> +
> +/* TiMe Rate Configuration register. */
> +#define RM3100_REG_TMRC			0x0B
> +#define RM3100_TMRC_OFFSET		0x92
> +
> +/* Result Status register. */
> +#define RM3100_REG_STATUS		0x34
> +#define		RM3100_STATUS_DRDY	BIT(7)
> +
> +/* Measurement result registers. */
> +#define RM3100_REG_MX2			0x24
> +#define RM3100_REG_MY2			0x27
> +#define RM3100_REG_MZ2			0x2a
> +
> +#define RM3100_W_REG_START		RM3100_REG_POLL
> +#define RM3100_W_REG_END		RM3100_REG_TMRC
> +#define RM3100_R_REG_START		RM3100_REG_POLL
> +#define RM3100_R_REG_END		RM3100_REG_STATUS
> +#define RM3100_V_REG_START		RM3100_REG_POLL
> +#define RM3100_V_REG_END		RM3100_REG_STATUS
> +
> +/*
> + * This is computed by hand, is the sum of channel storage bits and padd=
ing
> + * bits, which is 4+4+4+12=3D24 in here.
> + */
> +#define RM3100_SCAN_BYTES		24
> +
> +#define RM3100_CMM_AXIS_SHIFT		4
> +
> +struct rm3100_data {
> +	struct regmap *regmap;
> +	struct completion measuring_done;
> +	bool use_interrupt;
> +	int conversion_time;
> +	int scale;
> +	u8 buffer[RM3100_SCAN_BYTES];
> +	struct iio_trigger *drdy_trig;
> +
> +	/*
> +	 * This lock is for protecting the consistency of series of i2c
> +	 * operations, that is, to make sure a measurement process will
> +	 * not be interrupted by a set frequency operation, which should
> +	 * be taken where a series of i2c operation starts, released where
> +	 * the operation ends.
> +	 */
> +	struct mutex lock;
> +};
> +
> +static const struct regmap_range rm3100_readable_ranges[] =3D {
> +	regmap_reg_range(RM3100_R_REG_START, RM3100_R_REG_END),
> +};
> +
> +const struct regmap_access_table rm3100_readable_table =3D {
> +	.yes_ranges =3D rm3100_readable_ranges,
> +	.n_yes_ranges =3D ARRAY_SIZE(rm3100_readable_ranges),
> +};
> +EXPORT_SYMBOL_GPL(rm3100_readable_table);
> +
> +static const struct regmap_range rm3100_writable_ranges[] =3D {
> +	regmap_reg_range(RM3100_W_REG_START, RM3100_W_REG_END),
> +};
> +
> +const struct regmap_access_table rm3100_writable_table =3D {
> +	.yes_ranges =3D rm3100_writable_ranges,
> +	.n_yes_ranges =3D ARRAY_SIZE(rm3100_writable_ranges),
> +};
> +EXPORT_SYMBOL_GPL(rm3100_writable_table);
> +
> +static const struct regmap_range rm3100_volatile_ranges[] =3D {
> +	regmap_reg_range(RM3100_V_REG_START, RM3100_V_REG_END),
> +};
> +
> +const struct regmap_access_table rm3100_volatile_table =3D {
> +	.yes_ranges =3D rm3100_volatile_ranges,
> +	.n_yes_ranges =3D ARRAY_SIZE(rm3100_volatile_ranges),
> +};
> +EXPORT_SYMBOL_GPL(rm3100_volatile_table);
> +
> +static irqreturn_t rm3100_thread_fn(int irq, void *d)
> +{
> +	struct iio_dev *indio_dev =3D d;
> +	struct rm3100_data *data =3D iio_priv(indio_dev);
> +
> +	/*
> +	 * Write operation to any register or read operation
> +	 * to first byte of results will clear the interrupt.
> +	 */
> +	regmap_write(data->regmap, RM3100_REG_POLL, 0);
> +
> +	return IRQ_HANDLED;
> +}
> +
> +static irqreturn_t rm3100_irq_handler(int irq, void *d)
> +{
> +	struct iio_dev *indio_dev =3D d;
> +	struct rm3100_data *data =3D iio_priv(indio_dev);
> +
> +	switch (indio_dev->currentmode) {
> +	case INDIO_DIRECT_MODE:
> +		complete(&data->measuring_done);
> +		break;
> +	case INDIO_BUFFER_TRIGGERED:
> +		iio_trigger_poll(data->drdy_trig);
> +		break;
> +	default:
> +		dev_err(indio_dev->dev.parent,
> +			"device mode out of control, current mode: %d",
> +			indio_dev->currentmode);
> +	}
> +
> +	return IRQ_WAKE_THREAD;
> +}
> +
> +static int rm3100_wait_measurement(struct rm3100_data *data)
> +{
> +	struct regmap *regmap =3D data->regmap;
> +	unsigned int val;
> +	int tries =3D 20;
> +	int ret;
> +
> +	/*
> +	 * A read cycle of 400kbits i2c bus is about 20us, plus the time
> +	 * used for scheduling, a read cycle of fast mode of this device
> +	 * can reach 1.7ms, it may be possible for data to arrive just
> +	 * after we check the RM3100_REG_STATUS. In this case, irq_handler is
> +	 * called before measuring_done is reinitialized, it will wait
> +	 * forever for data that has already been ready.
> +	 * Reinitialize measuring_done before looking up makes sure we
> +	 * will always capture interrupt no matter when it happens.
> +	 */
> +	if (data->use_interrupt)
> +		reinit_completion(&data->measuring_done);
> +
> +	ret =3D regmap_read(regmap, RM3100_REG_STATUS, &val);
> +	if (ret < 0)
> +		return ret;
> +
> +	if ((val & RM3100_STATUS_DRDY) !=3D RM3100_STATUS_DRDY) {
> +		if (data->use_interrupt) {
> +			ret =3D wait_for_completion_timeout(&data->measuring_done,
> +				msecs_to_jiffies(data->conversion_time));
> +			if (!ret)
> +				return -ETIMEDOUT;
> +		} else {
> +			do {
> +				usleep_range(1000, 5000);
> +
> +				ret =3D regmap_read(regmap, RM3100_REG_STATUS,
> +						  &val);
> +				if (ret < 0)
> +					return ret;
> +
> +				if (val & RM3100_STATUS_DRDY)
> +					break;
> +			} while (--tries);
> +			if (!tries)
> +				return -ETIMEDOUT;
> +		}
> +	}
> +	return 0;
> +}
> +
> +static int rm3100_read_mag(struct rm3100_data *data, int idx, int *val)
> +{
> +	struct regmap *regmap =3D data->regmap;
> +	u8 buffer[3];
> +	int ret;
> +
> +	mutex_lock(&data->lock);
> +	ret =3D regmap_write(regmap, RM3100_REG_POLL, BIT(4 + idx));
> +	if (ret < 0)
> +		goto unlock_return;
> +
> +	ret =3D rm3100_wait_measurement(data);
> +	if (ret < 0)
> +		goto unlock_return;
> +
> +	ret =3D regmap_bulk_read(regmap, RM3100_REG_MX2 + 3 * idx, buffer, 3);
> +	if (ret < 0)
> +		goto unlock_return;
> +	mutex_unlock(&data->lock);
> +
> +	*val =3D sign_extend32((buffer[0] << 16) | (buffer[1] << 8) | buffer[2],
> +			     23);
> +
> +	return IIO_VAL_INT;
> +
> +unlock_return:
> +	mutex_unlock(&data->lock);
> +	return ret;
> +}
> +
> +#define RM3100_CHANNEL(axis, idx)					\
> +	{								\
> +		.type =3D IIO_MAGN,					\
> +		.modified =3D 1,						\
> +		.channel2 =3D IIO_MOD_##axis,				\
> +		.info_mask_separate =3D BIT(IIO_CHAN_INFO_RAW),		\
> +		.info_mask_shared_by_type =3D BIT(IIO_CHAN_INFO_SCALE) |	\
> +			BIT(IIO_CHAN_INFO_SAMP_FREQ),			\
> +		.scan_index =3D idx,					\
> +		.scan_type =3D {						\
> +			.sign =3D 's',					\
> +			.realbits =3D 24,					\
> +			.storagebits =3D 32,				\
> +			.shift =3D 8,					\
> +			.endianness =3D IIO_BE,				\
> +		},							\
> +	}
> +
> +static const struct iio_chan_spec rm3100_channels[] =3D {
> +	RM3100_CHANNEL(X, 0),
> +	RM3100_CHANNEL(Y, 1),
> +	RM3100_CHANNEL(Z, 2),
> +	IIO_CHAN_SOFT_TIMESTAMP(3),
> +};
> +
> +static IIO_CONST_ATTR_SAMP_FREQ_AVAIL(
> +	"600 300 150 75 37 18 9 4.5 2.3 1.2 0.6 0.3 0.015 0.075"
> +);
> +
> +static struct attribute *rm3100_attributes[] =3D {
> +	&iio_const_attr_sampling_frequency_available.dev_attr.attr,
> +	NULL,
> +};
> +
> +static const struct attribute_group rm3100_attribute_group =3D {
> +	.attrs =3D rm3100_attributes,
> +};
> +
> +#define RM3100_SAMP_NUM			14
> +
> +/*
> + * Frequency : rm3100_samp_rates[][0].rm3100_samp_rates[][1]Hz.
> + * Time between reading: rm3100_sam_rates[][2]ms.
> + * The first one is actually 1.7ms.
> + */
> +static const int rm3100_samp_rates[RM3100_SAMP_NUM][3] =3D {
> +	{600, 0, 2}, {300, 0, 3}, {150, 0, 7}, {75, 0, 13}, {37, 0, 27},
> +	{18, 0, 55}, {9, 0, 110}, {4, 500000, 220}, {2, 300000, 440},
> +	{1, 200000, 800}, {0, 600000, 1600}, {0, 300000, 3300},
> +	{0, 15000, 6700},  {0, 75000, 13000}
> +};
> +
> +static int rm3100_get_samp_freq(struct rm3100_data *data, int *val, int =
*val2)
> +{
> +	unsigned int tmp;
> +	int ret;
> +
> +	mutex_lock(&data->lock);
> +	ret =3D regmap_read(data->regmap, RM3100_REG_TMRC, &tmp);
> +	mutex_unlock(&data->lock);
> +	if (ret < 0)
> +		return ret;
> +	*val =3D rm3100_samp_rates[tmp - RM3100_TMRC_OFFSET][0];
> +	*val2 =3D rm3100_samp_rates[tmp - RM3100_TMRC_OFFSET][1];
> +
> +	return IIO_VAL_INT_PLUS_MICRO;
> +}
> +
> +static int rm3100_set_cycle_count(struct rm3100_data *data, int val)
> +{
> +	int ret;
> +	u8 i;
> +
> +	for (i =3D 0; i < 3; i++) {
> +		ret =3D regmap_write(data->regmap, RM3100_REG_CC_X + 2 * i, val);
> +		if (ret < 0)
> +			return ret;
> +	}
> +
> +	/*
> +	 * The scale of this sensor depends on the cycle count value, these
> +	 * three values are corresponding to the cycle count value 50, 100,
> +	 * 200. scale =3D output / gain * 10^4.
> +	 */
> +	switch (val) {
> +	case 50:
> +		data->scale =3D 500;
> +		break;
> +	case 100:
> +		data->scale =3D 263;
> +		break;
> +	/*
> +	 * case 200:
> +	 * This function will never be called by users' code, so here we
> +	 * assume that it will never get a wrong parameter.
> +	 */
> +	default:
> +		data->scale =3D 133;
> +	}
> +
> +	return 0;
> +}
> +
> +static int rm3100_set_samp_freq(struct iio_dev *indio_dev, int val, int =
val2)
> +{
> +	struct rm3100_data *data =3D iio_priv(indio_dev);
> +	struct regmap *regmap =3D data->regmap;
> +	unsigned int cycle_count;
> +	int ret;
> +	int i;
> +
> +	mutex_lock(&data->lock);
> +	/* All cycle count registers use the same value. */
> +	ret =3D regmap_read(regmap, RM3100_REG_CC_X, &cycle_count);
> +	if (ret < 0)
> +		goto unlock_return;
> +
> +	for (i =3D 0; i < RM3100_SAMP_NUM; i++) {
> +		if (val =3D=3D rm3100_samp_rates[i][0] &&
> +		    val2 =3D=3D rm3100_samp_rates[i][1])
> +			break;
> +	}
> +	if (i =3D=3D RM3100_SAMP_NUM) {
> +		ret =3D -EINVAL;
> +		goto unlock_return;
> +	}
> +
> +	ret =3D regmap_write(regmap, RM3100_REG_TMRC, i + RM3100_TMRC_OFFSET);
> +	if (ret < 0)
> +		goto unlock_return;
> +
> +	/* Checking if cycle count registers need changing. */
> +	if (val =3D=3D 600 && cycle_count =3D=3D 200) {
> +		ret =3D rm3100_set_cycle_count(data, 100);
> +		if (ret < 0)
> +			goto unlock_return;
> +	} else if (val !=3D 600 && cycle_count =3D=3D 100) {
> +		ret =3D rm3100_set_cycle_count(data, 200);
> +		if (ret < 0)
> +			goto unlock_return;
> +	}
> +
> +	if (indio_dev->currentmode =3D=3D INDIO_BUFFER_TRIGGERED) {
> +		/* Writing TMRC registers requires CMM reset. */
> +		ret =3D regmap_write(regmap, RM3100_REG_CMM, 0);
> +		if (ret < 0)
> +			goto unlock_return;
> +		ret =3D regmap_write(data->regmap, RM3100_REG_CMM,
> +			(*indio_dev->active_scan_mask & 0x7) <<
> +			RM3100_CMM_AXIS_SHIFT | RM3100_CMM_START);
> +		if (ret < 0)
> +			goto unlock_return;
> +	}
> +	mutex_unlock(&data->lock);
> +
> +	data->conversion_time =3D rm3100_samp_rates[i][2] * 2;
> +	return 0;
> +
> +unlock_return:
> +	mutex_unlock(&data->lock);
> +	return ret;
> +}
> +
> +static int rm3100_read_raw(struct iio_dev *indio_dev,
> +			   const struct iio_chan_spec *chan,
> +			   int *val, int *val2, long mask)
> +{
> +	struct rm3100_data *data =3D iio_priv(indio_dev);
> +	int ret;
> +
> +	switch (mask) {
> +	case IIO_CHAN_INFO_RAW:
> +		ret =3D iio_device_claim_direct_mode(indio_dev);
> +		if (ret < 0)
> +			return ret;
> +
> +		ret =3D rm3100_read_mag(data, chan->scan_index, val);
> +		iio_device_release_direct_mode(indio_dev);
> +
> +		return ret;
> +	case IIO_CHAN_INFO_SCALE:
> +		*val =3D 0;
> +		*val2 =3D data->scale;
> +
> +		return IIO_VAL_INT_PLUS_MICRO;
> +	case IIO_CHAN_INFO_SAMP_FREQ:
> +		return rm3100_get_samp_freq(data, val, val2);
> +	default:
> +		return -EINVAL;
> +	}
> +}
> +
> +static int rm3100_write_raw(struct iio_dev *indio_dev,
> +			    struct iio_chan_spec const *chan,
> +			    int val, int val2, long mask)
> +{
> +	switch (mask) {
> +	case IIO_CHAN_INFO_SAMP_FREQ:
> +		return rm3100_set_samp_freq(indio_dev, val, val2);
> +	default:
> +		return -EINVAL;
> +	}
> +}
> +
> +static const struct iio_info rm3100_info =3D {
> +	.attrs =3D &rm3100_attribute_group,
> +	.read_raw =3D rm3100_read_raw,
> +	.write_raw =3D rm3100_write_raw,
> +};
> +
> +static int rm3100_buffer_preenable(struct iio_dev *indio_dev)
> +{
> +	struct rm3100_data *data =3D iio_priv(indio_dev);
> +
> +	/* Starting channels enabled. */
> +	return regmap_write(data->regmap, RM3100_REG_CMM,
> +		(*indio_dev->active_scan_mask & 0x7) << RM3100_CMM_AXIS_SHIFT |
> +		RM3100_CMM_START);
> +}
> +
> +static int rm3100_buffer_postdisable(struct iio_dev *indio_dev)
> +{
> +	struct rm3100_data *data =3D iio_priv(indio_dev);
> +
> +	return regmap_write(data->regmap, RM3100_REG_CMM, 0);
> +}
> +
> +static const struct iio_buffer_setup_ops rm3100_buffer_ops =3D {
> +	.preenable =3D rm3100_buffer_preenable,
> +	.postenable =3D iio_triggered_buffer_postenable,
> +	.predisable =3D iio_triggered_buffer_predisable,
> +	.postdisable =3D rm3100_buffer_postdisable,
> +};
> +
> +static irqreturn_t rm3100_trigger_handler(int irq, void *p)
> +{
> +	struct iio_poll_func *pf =3D p;
> +	struct iio_dev *indio_dev =3D pf->indio_dev;
> +	unsigned long scan_mask =3D *indio_dev->active_scan_mask;
> +	unsigned int mask_len =3D indio_dev->masklength;
> +	struct rm3100_data *data =3D iio_priv(indio_dev);
> +	struct regmap *regmap =3D data->regmap;
> +	int ret, i, bit;
> +
> +	mutex_lock(&data->lock);
> +	switch (scan_mask) {
> +	case BIT(0) | BIT(1) | BIT(2):
> +		ret =3D regmap_bulk_read(regmap, RM3100_REG_MX2, data->buffer, 9);
> +		mutex_unlock(&data->lock);
> +		if (ret < 0)
> +			goto done;
> +		/* Convert XXXYYYZZZxxx to XXXxYYYxZZZx. x for paddings. */
> +		for (i =3D 2; i > 0; i--)
> +			memcpy(data->buffer + i * 4, data->buffer + i * 3, 3);
> +	break;
Odd indenting of breaks. I'll clear that up.

> +	case BIT(0) | BIT(1):
> +		ret =3D regmap_bulk_read(regmap, RM3100_REG_MX2, data->buffer, 6);
> +		mutex_unlock(&data->lock);
> +		if (ret < 0)
> +			goto done;
> +		goto copy_2;
> +	case BIT(1) | BIT(2):
> +		ret =3D regmap_bulk_read(regmap, RM3100_REG_MY2, data->buffer, 6);
> +		mutex_unlock(&data->lock);
> +		if (ret < 0)
> +			goto done;
> +copy_2:		memcpy(data->buffer + 4, data->buffer + 3, 3);
This isn't a good idea. Saves one line of code and a tiny bit of duplicatio=
n but
makes it much harder to read. =20
> +	break;
> +	case BIT(0) | BIT(2):
> +		ret =3D regmap_bulk_read(regmap, RM3100_REG_MX2, data->buffer, 9);
> +		mutex_unlock(&data->lock);
> +		if (ret < 0)
> +			goto done;
> +		memcpy(data->buffer + 4, data->buffer + 6, 3);
> +	break;
> +	default:
> +		for_each_set_bit(bit, &scan_mask, mask_len) {
> +			ret =3D regmap_bulk_read(regmap, RM3100_REG_MX2 + 3 * bit,
> +					       data->buffer, 3);
> +			if (ret < 0) {
> +				mutex_unlock(&data->lock);
> +				goto done;
> +			}
> +		}
> +		mutex_unlock(&data->lock);
> +	}
> +	/*
> +	 * Always using the same buffer so that we wouldn't need to set the
> +	 * paddings to 0 in case of leaking any data.
> +	 */
> +	iio_push_to_buffers_with_timestamp(indio_dev, data->buffer,
> +					   pf->timestamp);
> +done:
> +	iio_trigger_notify_done(indio_dev->trig);
> +
> +	return IRQ_HANDLED;
> +}
> +
> +int rm3100_common_probe(struct device *dev, struct regmap *regmap, int i=
rq)
> +{
> +	struct iio_dev *indio_dev;
> +	struct rm3100_data *data;
> +	unsigned int tmp;
> +	int ret;
> +
> +	indio_dev =3D devm_iio_device_alloc(dev, sizeof(*data));
> +	if (!indio_dev)
> +		return -ENOMEM;
> +
> +	data =3D iio_priv(indio_dev);
> +	data->regmap =3D regmap;
> +
> +	mutex_init(&data->lock);
> +
> +	indio_dev->dev.parent =3D dev;
> +	indio_dev->name =3D "rm3100";
> +	indio_dev->info =3D &rm3100_info;
> +	indio_dev->channels =3D rm3100_channels;
> +	indio_dev->num_channels =3D ARRAY_SIZE(rm3100_channels);
> +	indio_dev->modes =3D INDIO_DIRECT_MODE | INDIO_BUFFER_TRIGGERED;
> +	indio_dev->currentmode =3D INDIO_DIRECT_MODE;
> +
> +	if (!irq)
> +		data->use_interrupt =3D false;
> +	else {
> +		data->use_interrupt =3D true;
> +
> +		init_completion(&data->measuring_done);
> +		ret =3D devm_request_threaded_irq(dev,
> +						irq,
> +						rm3100_irq_handler,
> +						rm3100_thread_fn,
> +						IRQF_TRIGGER_HIGH |
> +						IRQF_ONESHOT,
> +						indio_dev->name,
> +						indio_dev);
> +		if (ret < 0) {
> +			dev_err(dev, "request irq line failed.\n");
> +			return ret;
> +		}
> +
> +		data->drdy_trig =3D devm_iio_trigger_alloc(dev, "%s-drdy%d",
> +							 indio_dev->name,
> +							 indio_dev->id);
> +		if (!data->drdy_trig)
> +			return -ENOMEM;
> +
> +		data->drdy_trig->dev.parent =3D dev;
> +		ret =3D devm_iio_trigger_register(dev, data->drdy_trig);
> +		if (ret < 0)
> +			return ret;
> +	}
> +
> +	ret =3D devm_iio_triggered_buffer_setup(dev, indio_dev,
> +					      &iio_pollfunc_store_time,
> +					      rm3100_trigger_handler,
> +					      &rm3100_buffer_ops);
> +	if (ret < 0)
> +		return ret;
> +
> +	ret =3D regmap_read(regmap, RM3100_REG_TMRC, &tmp);
> +	if (ret < 0)
> +		return ret;
> +	/* Initializing max wait time, which is double conversion time. */
> +	data->conversion_time =3D rm3100_samp_rates[tmp - RM3100_TMRC_OFFSET][2]
> +				* 2;
> +
> +	/* Cycle count values may not be what we want. */
> +	if ((tmp - RM3100_TMRC_OFFSET) =3D=3D 0)
> +		rm3100_set_cycle_count(data, 100);
> +	else
> +		rm3100_set_cycle_count(data, 200);
> +
> +	return devm_iio_device_register(dev, indio_dev);
> +}
> +EXPORT_SYMBOL_GPL(rm3100_common_probe);
> +
> +MODULE_AUTHOR("Song Qiang <songqiang1304521@gmail.com>");
> +MODULE_DESCRIPTION("PNI RM3100 3-axis magnetometer i2c driver");
> +MODULE_LICENSE("GPL v2");
> diff --git a/drivers/iio/magnetometer/rm3100-i2c.c b/drivers/iio/magnetom=
eter/rm3100-i2c.c
> new file mode 100644
> index 000000000000..1ac622c6d6c9
> --- /dev/null
> +++ b/drivers/iio/magnetometer/rm3100-i2c.c
> @@ -0,0 +1,54 @@
> +// SPDX-License-Identifier: GPL-2.0
> +/*
> + * Support for PNI RM3100 3-axis geomagnetic sensor on a i2c bus.
> + *
> + * Copyright (C) 2018 Song Qiang <songqiang1304521@gmail.com>
> + *
> + * i2c slave address: 0x20 + SA1 << 1 + SA0.
> + */
> +
> +#include <linux/i2c.h>
> +#include <linux/module.h>
> +
> +#include "rm3100.h"
> +
> +static const struct regmap_config rm3100_regmap_config =3D {
> +	.reg_bits =3D 8,
> +	.val_bits =3D 8,
> +
> +	.rd_table =3D &rm3100_readable_table,
> +	.wr_table =3D &rm3100_writable_table,
> +	.volatile_table =3D &rm3100_volatile_table,
> +
> +	.cache_type =3D REGCACHE_RBTREE,
> +};
> +
> +static int rm3100_probe(struct i2c_client *client)
> +{
> +	struct regmap *regmap;
> +
> +	regmap =3D devm_regmap_init_i2c(client, &rm3100_regmap_config);
> +	if (IS_ERR(regmap))
> +		return PTR_ERR(regmap);
> +
> +	return rm3100_common_probe(&client->dev, regmap, client->irq);
> +}
> +
> +static const struct of_device_id rm3100_dt_match[] =3D {
> +	{ .compatible =3D "pni,rm3100", },
> +	{ }
> +};
> +MODULE_DEVICE_TABLE(of, rm3100_dt_match);
> +
> +static struct i2c_driver rm3100_driver =3D {
> +	.driver =3D {
> +		.name =3D "rm3100-i2c",
> +		.of_match_table =3D rm3100_dt_match,
> +	},
> +	.probe_new =3D rm3100_probe,
> +};
> +module_i2c_driver(rm3100_driver);
> +
> +MODULE_AUTHOR("Song Qiang <songqiang1304521@gmail.com>");
> +MODULE_DESCRIPTION("PNI RM3100 3-axis magnetometer i2c driver");
> +MODULE_LICENSE("GPL v2");
> diff --git a/drivers/iio/magnetometer/rm3100-spi.c b/drivers/iio/magnetom=
eter/rm3100-spi.c
> new file mode 100644
> index 000000000000..65d5eb9e4f5e
> --- /dev/null
> +++ b/drivers/iio/magnetometer/rm3100-spi.c
> @@ -0,0 +1,64 @@
> +// SPDX-License-Identifier: GPL-2.0
> +/*
> + * Support for PNI RM3100 3-axis geomagnetic sensor on a spi bus.
> + *
> + * Copyright (C) 2018 Song Qiang <songqiang1304521@gmail.com>
> + */
> +
> +#include <linux/module.h>
> +#include <linux/spi/spi.h>
> +
> +#include "rm3100.h"
> +
> +static const struct regmap_config rm3100_regmap_config =3D {
> +	.reg_bits =3D 8,
> +	.val_bits =3D 8,
> +
> +	.rd_table =3D &rm3100_readable_table,
> +	.wr_table =3D &rm3100_writable_table,
> +	.volatile_table =3D &rm3100_volatile_table,
> +
> +	.read_flag_mask =3D 0x80,
> +
> +	.cache_type =3D REGCACHE_RBTREE,
> +};
> +
> +static int rm3100_probe(struct spi_device *spi)
> +{
> +	struct regmap *regmap;
> +	int ret;
> +
> +	/* Actually this device supports both mode 0 and mode 3. */
> +	spi->mode =3D SPI_MODE_0;
> +	/* Data rates cannot exceed 1Mbits. */
> +	spi->max_speed_hz =3D 1000000;
> +	spi->bits_per_word =3D 8;
> +	ret =3D spi_setup(spi);
> +	if (ret)
> +		return ret;
> +
> +	regmap =3D devm_regmap_init_spi(spi, &rm3100_regmap_config);
> +	if (IS_ERR(regmap))
> +		return PTR_ERR(regmap);
> +
> +	return rm3100_common_probe(&spi->dev, regmap, spi->irq);
> +}
> +
> +static const struct of_device_id rm3100_dt_match[] =3D {
> +	{ .compatible =3D "pni,rm3100", },
> +	{ }
> +};
> +MODULE_DEVICE_TABLE(of, rm3100_dt_match);
> +
> +static struct spi_driver rm3100_driver =3D {
> +	.driver =3D {
> +		.name =3D "rm3100-spi",
> +		.of_match_table =3D rm3100_dt_match,
> +	},
> +	.probe =3D rm3100_probe,
> +};
> +module_spi_driver(rm3100_driver);
> +
> +MODULE_AUTHOR("Song Qiang <songqiang1304521@gmail.com>");
> +MODULE_DESCRIPTION("PNI RM3100 3-axis magnetometer spi driver");
> +MODULE_LICENSE("GPL v2");
> diff --git a/drivers/iio/magnetometer/rm3100.h b/drivers/iio/magnetometer=
/rm3100.h
> new file mode 100644
> index 000000000000..c3508218bc77
> --- /dev/null
> +++ b/drivers/iio/magnetometer/rm3100.h
> @@ -0,0 +1,17 @@
> +/* SPDX-License-Identifier: GPL-2.0 */
> +/*
> + * Copyright (C) 2018 Song Qiang <songqiang1304521@gmail.com>
> + */
> +
> +#ifndef RM3100_CORE_H
> +#define RM3100_CORE_H
> +
> +#include <linux/regmap.h>
> +
> +extern const struct regmap_access_table rm3100_readable_table;
> +extern const struct regmap_access_table rm3100_writable_table;
> +extern const struct regmap_access_table rm3100_volatile_table;
> +
> +int rm3100_common_probe(struct device *dev, struct regmap *regmap, int i=
rq);
> +
> +#endif /* RM3100_CORE_H */
