Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (61.164.42.155:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 11 Nov 2018 15:02:18 -0000
Received: from icoremail.net (unknown [209.85.210.181])
	by mail-app2 (Coremail) with SMTP id by_KCgDHH+Y4deZbnvlsAQ--.32963S3;
	Sat, 10 Nov 2018 14:05:45 +0800 (CST)
Received: from mail-pf1-f181.google.com (unknown [209.85.210.181])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwB38Ew2deZb_b4lAA--.6983S3;
	Sat, 10 Nov 2018 14:05:42 +0800 (CST)
Received: by mail-pf1-f181.google.com with SMTP id v9-v6so1900757pff.2
        for <xuliker@zju.edu.cn>; Fri, 09 Nov 2018 22:05:42 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:mime-version:subject
         :from:in-reply-to:date:cc:content-transfer-encoding:message-id
         :references:to:sender:precedence:list-id;
        bh=jhydyAkItM00m3iwEmasfyn1udoqUuMaTVd3mNsu0As=;
        b=B5WGCsglalqBXYf0iNcyjeCD3TSPTc7Up5HsqYSTH+Zd0YXootBhRkp7/Kow9Xan+/
         XU/YYIhfrGPI17k8wvVG9Ss/WLmSvL3I4FQJ35I4obRbUgngtuTOUtOash9TH/t0l7qR
         s2dPE0Npx7+AA9B1rYNb2gJ9/2lBqgYCLojq7pE1EFnkc9gOTKzMubO/S65SXGNasNz+
         0aGtSje/YSPykQLyAIz7qop0sqXX2SYCbeICbuUF5UkVVx3jddDc00x1Kw7/87EI9Gku
         fbatVPN8FI+SJdnrnCMyLfodtX76be4i4aUfGv1mNCiTwgZr0XsLM/N13eYqAhCIXXWT
         VVXw==
X-Gm-Message-State: AGRZ1gKPPkGKqJwLKx7wBxKpHBTp3CxjvTC4AsPtXh3HFTnBNe0fbWK8
	fPqXyjFz1ZOa7qirykdii3sHt8LGkJsaJRHgOJZfTB9fnbJuDsg=
X-Received: by 2002:a62:42dc:: with SMTP id h89-v6mr12257157pfd.0.1541829941663;
        Fri, 09 Nov 2018 22:05:41 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp778040pjt;
        Fri, 9 Nov 2018 22:05:40 -0800 (PST)
X-Google-Smtp-Source: AJdET5eNBEeX+/mkbgs6GSQIQjw4rXQRbQU52J1qNa7EBs5+YhoLf7+AZLKGIW6IQK5T5A44TXaR
X-Received: by 2002:a17:902:15c5:: with SMTP id a5-v6mr11679529plh.136.1541829940619;
        Fri, 09 Nov 2018 22:05:40 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1541829940; cv=none;
        d=google.com; s=arc-20160816;
        b=iDrHPeHjaox424o/cuZOU0482D53/aF03MFhvHWT0CztgVhYb0LAdlsyYexDoH29zI
         NOmANFEyapvmFVtOy8z+2yu8eaWrvyz2JrIjipN/zldx+gE3kAtI9G7oiPnHQwYlVxeI
         h6AchCAOy5SeI6dSNdCQ8EVlTt0tFbJQST6jYzeVCIV2GU4m8i5yvylvXMywzsGxgsxY
         cjh6AYILG4DE2ZpizMBLoCzKKVR71z0bYukCa5Cz4fhkg+XArVciNwnJlMr1FZNeA2gC
         1avmjfm2bxnUEzGfvrTuubsPMjHGdnBN6AN7KDKz+ai3UPtuaW8Io4ADrkEuKGIM+maG
         3KmQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:to:references:message-id
         :content-transfer-encoding:cc:date:in-reply-to:from:subject
         :mime-version:dkim-signature;
        bh=jhydyAkItM00m3iwEmasfyn1udoqUuMaTVd3mNsu0As=;
        b=Nh27MjSBgoK/LD2u3X4wHkPWLqThVrL+YhqGImhfnA2ifu2pH9zOkC7VfruIE+NkeZ
         e0CaGn8eOuH4uinnXQYcygqel6gkGH59KKVxS1KwQmXLofEc7n8vIv9DvND44R2aVWvv
         lmGuFTqkmCZTuGLYFkA2WOdYo5aWaBKIqNY7vD9DzN5LEhVH/Zp+s/ZkbrzhX+np9cbO
         XWtj6BDgnb71t+ADqlhT9QpgOiqHCPbnQFUsQob6i5wvNbBAHe6nBxsiYfFdB5o4YQUx
         lCAigNFho3c30UE7ADYYijhK1hmRUeeYFWwdolb6jcLoiUH5VW4/W7go+cXAgF5eM8PB
         AZZg==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@amacapital-net.20150623.gappssmtp.com header.s=20150623 header.b=Ye8p4bQt;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id h36si8855577pgm.200.2018.11.09.22.05.24;
        Fri, 09 Nov 2018 22:05:40 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728812AbeKJPtH (ORCPT <rfc822;tomnomnom1@gmail.com>
        + 99 others); Sat, 10 Nov 2018 10:49:07 -0500
Received: from mail-pg1-f193.google.com ([209.85.215.193]:43649 "EHLO
        mail-pg1-f193.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1728662AbeKJPtH (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sat, 10 Nov 2018 10:49:07 -0500
Received: by mail-pg1-f193.google.com with SMTP id n10-v6so1759885pgv.10
        for <linux-kernel@vger.kernel.org>; Fri, 09 Nov 2018 22:05:18 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=amacapital-net.20150623.gappssmtp.com; s=20150623;
        h=mime-version:subject:from:in-reply-to:date:cc
         :content-transfer-encoding:message-id:references:to;
        bh=jhydyAkItM00m3iwEmasfyn1udoqUuMaTVd3mNsu0As=;
        b=Ye8p4bQtchXoE0SctE8r9mZyvf4OV7GoVIVIpm1UyUnl/cd9s8wWgqpm5XKbNOC6Yh
         9xvbC7uAYzM58cwBJAbicVveYX0AZkvoEpk2fLNKApo+oIp6CupCbHLceIkXyc95QX8F
         uwG1vhh5FfJBA5fZHXeiTuklCs2hc+lXD8xMcDfcpKHXOEK2u1tZhLKtYF4eVNHo8hHM
         4Gk/vMWCHH2SH6MPl5003flSYRbRUqiFd8LFue+5/fNdiWG1lacFJuP9M8z++1/QWjrd
         cJZC58VBZOG3Ryv8Ftu2n9lZaOLlBNJrxDLBbHjbCHCR1Kc/fEcgerI0h8d3/Y+GbNka
         3O9A==
X-Received: by 2002:a62:571b:: with SMTP id l27-v6mr11986179pfb.209.1541829918021;
        Fri, 09 Nov 2018 22:05:18 -0800 (PST)
Received: from ?IPv6:2600:1010:b066:994c:3d32:b841:428e:7929? ([2600:1010:b066:994c:3d32:b841:428e:7929])
        by smtp.gmail.com with ESMTPSA id f22-v6sm10252442pff.29.2018.11.09.22.05.15
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Fri, 09 Nov 2018 22:05:16 -0800 (PST)
Content-Type: text/plain;
        charset=utf-8
Mime-Version: 1.0 (1.0)
Subject: Re: [PATCH v3 resend 1/2] mm: Add an F_SEAL_FUTURE_WRITE seal to memfd
From: Andy Lutomirski <luto@amacapital.net>
X-Mailer: iPhone Mail (16A404)
In-Reply-To: <20181110032005.GA22238@google.com>
Date: Fri, 9 Nov 2018 22:05:14 -0800
Cc: Jann Horn <jannh@google.com>,
        kernel list <linux-kernel@vger.kernel.org>, jreck@google.com,
        John Stultz <john.stultz@linaro.org>,
        Todd Kjos <tkjos@google.com>,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        Christoph Hellwig <hch@infradead.org>,
        Al Viro <viro@zeniv.linux.org.uk>,
        Andrew Morton <akpm@linux-foundation.org>,
        Daniel Colascione <dancol@google.com>,
        Bruce Fields <bfields@fieldses.org>, jlayton@kernel.org,
        Khalid Aziz <khalid.aziz@oracle.com>, Lei.Yang@windriver.com,
        linux-fsdevel@vger.kernel.org, linux-kselftest@vger.kernel.org,
        Linux-MM <linux-mm@kvack.org>, marcandre.lureau@redhat.com,
        Mike Kravetz <mike.kravetz@oracle.com>, minchan@kernel.org,
        shuah@kernel.org, valdis.kletnieks@vt.edu,
        Hugh Dickins <hughd@google.com>,
        Linux API <linux-api@vger.kernel.org>
Content-Transfer-Encoding: quoted-printable
Message-Id: <69CE06CC-E47C-4992-848A-66EB23EE6C74@amacapital.net>
References: <20181108041537.39694-1-joel@joelfernandes.org> <CAG48ez1h=v-JYnDw81HaYJzOfrNhwYksxmc2r=cJvdQVgYM+NA@mail.gmail.com> <CAG48ez0kQ4d566bXTFOYANDgii-stL-Qj-oyaBzvfxdV=PU-7g@mail.gmail.com> <20181110032005.GA22238@google.com>
To: Joel Fernandes <joel@joelfernandes.org>
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwB38Ew2deZb_b4lAA--.6983S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoWxtry8AF4rAF17KFWfZrWDArb_yoWxCFWkpr
	W5Ga1Ykr4UJrW8C3s2v3WFya4SqrW8tr12gry3W34UZwnIqr1IgF4YgFW5uF95ArWxWw4j
	vr1jkr93uF90y3DanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUPvb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_tr0E3s1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr1j6F4UJwA2z4x0Y4vE
	x4A2jsIE14v26rxl6s0DM28EF7xvwVC2z280aVCY1x0267AKxVW0oVCq3wAS0I0E0xvYzx
	vE52x082IY62kv0487Mc02F40EFcxC0VAKzVAqx4xG6I80ewAv7VC0I7IYx2IY67AKxVWU
	JVWUGwAv7VC2z280aVAFwI0_Gr0_Cr1lOx8S6xCaFVCjc4AY6r1j6r4UM4x0Y48IcxkI7V
	AKI48JMx02cVCv0xWlc7CjxVAKzI0EY4vE52x082I5MxkFs20EY4vE44CYbxCE4x80FwCY
	02Avz4vEIxC_GF1lc2IjII80xcxEwVAKI48JMxvI42IY6xIIjxv20xvE14v26r1j6r1xMx
	vI42IY6xIIjxv20xvEc7CjxVAFwI0_Jr0_Gr1lcIIF0xvEx4A2jsIE14v26F4UJVW0owCY
	IxAIcVC2z280aVCY1x0267AKxVWxJr0_GcWl42xK82IYc2Ij64vIr41l42xK82IY64kExV
	AvwVAq07x20xyl4x8a6x804xWl4I8I3I0E4IkC6x0Yz7v_Jr0_Gr1lx2IqxVAqx4xG67AK
	xVWUJVWUGwC20s026x8GjcxK67AKxVWUGVWUWwC2zVAF1VAY17CE14v26r4a6rW5MIIYrx
	kI7VAKI48JMIIF0xvE42xK8VAvwI8IcIk0rVWrJr0_WFyUJbIYCTnIWIevJa73UjIFyTuY
	vjxUQtr4UUUUU



> On Nov 9, 2018, at 7:20 PM, Joel Fernandes <joel@joelfernandes.org> wrote:=

>=20
>> On Fri, Nov 09, 2018 at 10:19:03PM +0100, Jann Horn wrote:
>>> On Fri, Nov 9, 2018 at 10:06 PM Jann Horn <jannh@google.com> wrote:
>>> On Fri, Nov 9, 2018 at 9:46 PM Joel Fernandes (Google)
>>> <joel@joelfernandes.org> wrote:
>>>> Android uses ashmem for sharing memory regions. We are looking forward
>>>> to migrating all usecases of ashmem to memfd so that we can possibly
>>>> remove the ashmem driver in the future from staging while also
>>>> benefiting from using memfd and contributing to it. Note staging driver=
s
>>>> are also not ABI and generally can be removed at anytime.
>>>>=20
>>>> One of the main usecases Android has is the ability to create a region
>>>> and mmap it as writeable, then add protection against making any
>>>> "future" writes while keeping the existing already mmap'ed
>>>> writeable-region active.  This allows us to implement a usecase where
>>>> receivers of the shared memory buffer can get a read-only view, while
>>>> the sender continues to write to the buffer.
>>>> See CursorWindow documentation in Android for more details:
>>>> https://developer.android.com/reference/android/database/CursorWindow
>>>>=20
>>>> This usecase cannot be implemented with the existing F_SEAL_WRITE seal.=

>>>> To support the usecase, this patch adds a new F_SEAL_FUTURE_WRITE seal
>>>> which prevents any future mmap and write syscalls from succeeding while=

>>>> keeping the existing mmap active.
>>>=20
>>> Please CC linux-api@ on patches like this. If you had done that, I
>>> might have criticized your v1 patch instead of your v3 patch...
>>>=20
>>>> The following program shows the seal
>>>> working in action:
>>> [...]
>>>> Cc: jreck@google.com
>>>> Cc: john.stultz@linaro.org
>>>> Cc: tkjos@google.com
>>>> Cc: gregkh@linuxfoundation.org
>>>> Cc: hch@infradead.org
>>>> Reviewed-by: John Stultz <john.stultz@linaro.org>
>>>> Signed-off-by: Joel Fernandes (Google) <joel@joelfernandes.org>
>>>> ---
>>> [...]
>>>> diff --git a/mm/memfd.c b/mm/memfd.c
>>>> index 2bb5e257080e..5ba9804e9515 100644
>>>> --- a/mm/memfd.c
>>>> +++ b/mm/memfd.c
>>> [...]
>>>> @@ -219,6 +220,25 @@ static int memfd_add_seals(struct file *file, unsi=
gned int seals)
>>>>                }
>>>>        }
>>>>=20
>>>> +       if ((seals & F_SEAL_FUTURE_WRITE) &&
>>>> +           !(*file_seals & F_SEAL_FUTURE_WRITE)) {
>>>> +               /*
>>>> +                * The FUTURE_WRITE seal also prevents growing and shri=
nking
>>>> +                * so we need them to be already set, or requested now.=

>>>> +                */
>>>> +               int test_seals =3D (seals | *file_seals) &
>>>> +                                (F_SEAL_GROW | F_SEAL_SHRINK);
>>>> +
>>>> +               if (test_seals !=3D (F_SEAL_GROW | F_SEAL_SHRINK)) {
>>>> +                       error =3D -EINVAL;
>>>> +                       goto unlock;
>>>> +               }
>>>> +
>>>> +               spin_lock(&file->f_lock);
>>>> +               file->f_mode &=3D ~(FMODE_WRITE | FMODE_PWRITE);
>>>> +               spin_unlock(&file->f_lock);
>>>> +       }
>>>=20
>>> So you're fiddling around with the file, but not the inode? How are
>>> you preventing code like the following from re-opening the file as
>>> writable?
>>>=20
>>> $ cat memfd.c
>>> #define _GNU_SOURCE
>>> #include <unistd.h>
>>> #include <sys/syscall.h>
>>> #include <printf.h>
>>> #include <fcntl.h>
>>> #include <err.h>
>>> #include <stdio.h>
>>>=20
>>> int main(void) {
>>>  int fd =3D syscall(__NR_memfd_create, "testfd", 0);
>>>  if (fd =3D=3D -1) err(1, "memfd");
>>>  char path[100];
>>>  sprintf(path, "/proc/self/fd/%d", fd);
>>>  int fd2 =3D open(path, O_RDWR);
>>>  if (fd2 =3D=3D -1) err(1, "reopen");
>>>  printf("reopen successful: %d\n", fd2);
>>> }
>>> $ gcc -o memfd memfd.c
>>> $ ./memfd
>>> reopen successful: 4
>>> $
>>>=20
>>> That aside: I wonder whether a better API would be something that
>>> allows you to create a new readonly file descriptor, instead of
>>> fiddling with the writability of an existing fd.
>>=20
>> My favorite approach would be to forbid open() on memfds, hope that
>> nobody notices the tiny API break, and then add an ioctl for "reopen
>> this memfd with reduced permissions" - but that's just my personal
>> opinion.
>=20
> I did something along these lines and it fixes the issue, but I forbid ope=
n
> of memfd only when the F_SEAL_FUTURE_WRITE seal is in place. So then its n=
ot
> an ABI break because this is a brand new seal. That seems the least intrus=
ive
> solution and it works. Do you mind testing it and I'll add your and Tested=
-by
> to the new fix? The patch is based on top of this series.
>=20
> ---8<-----------
> From: "Joel Fernandes (Google)" <joel@joelfernandes.org>
> Subject: [PATCH] mm/memfd: Fix possible promotion to writeable of sealed m=
emfd
>=20
> Jann Horn found that reopening an F_SEAL_FUTURE_WRITE sealed memfd
> through /proc/self/fd/N symlink as writeable succeeds. The simplest fix
> without causing ABI breakages and ugly VFS hacks is to simply deny all
> opens on F_SEAL_FUTURE_WRITE sealed fds.
>=20
> Reported-by: Jann Horn <jannh@google.com>
> Signed-off-by: Joel Fernandes (Google) <joel@joelfernandes.org>
> ---
> mm/shmem.c | 18 ++++++++++++++++++
> 1 file changed, 18 insertions(+)
>=20
> diff --git a/mm/shmem.c b/mm/shmem.c
> index 446942677cd4..5b378c486b8f 100644
> --- a/mm/shmem.c
> +++ b/mm/shmem.c
> @@ -3611,7 +3611,25 @@ static const struct address_space_operations shmem_=
aops =3D {
>    .error_remove_page =3D generic_error_remove_page,
> };
>=20
> +/* Could arrive here for memfds opened through /proc/ */
> +int shmem_open(struct inode *inode, struct file *file)
> +{
> +    struct shmem_inode_info *info =3D SHMEM_I(inode);
> +
> +    /*
> +     * memfds for which future writes have been prevented
> +     * should not be reopened, say, through /proc/pid/fd/N
> +     * symlinks otherwise it can cause a sealed memfd to be
> +     * promoted to writable.
> +     */
> +    if (info->seals & F_SEAL_FUTURE_WRITE)
> +        return -EACCES;
> +
> +    return 0;
> +}

The result of this series is very warty. We have a concept of seals, and the=
y all work similarly, except the new future write seal. That one:

- causes a probably-observable effect in the file mode in F_GETFL.

- causes reopen to fail.

- does *not* affect other struct files that may already exist on the same in=
ode.

- mysteriously malfunctions if you try to set it again on another struct fil=
e that already exists

- probably is insecure when used on hugetlbfs.

I see two reasonable solutions:

1. Don=E2=80=99t fiddle with the struct file at all. Instead make the inode f=
lag work by itself.

2. Don=E2=80=99t call it a =E2=80=9Cseal=E2=80=9D.  Instead fix the /proc ho=
le and add an API to drop write access on an existing struct file.

I personally prefer #2.

> +
> static const struct file_operations shmem_file_operations =3D {
> +    .open        =3D shmem_open,
>    .mmap        =3D shmem_mmap,
>    .get_unmapped_area =3D shmem_get_unmapped_area,
> #ifdef CONFIG_TMPFS
> --=20
> 2.19.1.930.g4563a0d9d0-goog
>=20
