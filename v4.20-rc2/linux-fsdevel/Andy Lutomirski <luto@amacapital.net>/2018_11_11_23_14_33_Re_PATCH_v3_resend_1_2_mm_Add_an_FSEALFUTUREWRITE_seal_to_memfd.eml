Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 12 Nov 2018 00:39:48 -0000
Received: from icoremail.net (unknown [209.85.215.179])
	by mail-app2 (Coremail) with SMTP id by_KCgC3f9GqSOhbclx2AQ--.35586S3;
	Sun, 11 Nov 2018 23:20:11 +0800 (CST)
Received: from mail-pg1-f179.google.com (unknown [209.85.215.179])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwAX_klzR+hbRu4sAA--.3266S3;
	Sun, 11 Nov 2018 23:14:59 +0800 (CST)
Received: by mail-pg1-f179.google.com with SMTP id w7so2880774pgp.13
        for <xuliker@zju.edu.cn>; Sun, 11 Nov 2018 07:14:59 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:mime-version:subject
         :from:in-reply-to:date:cc:content-transfer-encoding:message-id
         :references:to:sender:precedence:list-id;
        bh=6QZsoPKFqAmrSyeny5H7QaB5ybJooYmpdsGKdez/6pk=;
        b=X8BxVhxBMMSaKdsfwIX+Rm8vYGYxoO5slTSYAbNVZB7vyzXW5e1NvvHTgWkypT2JmE
         yzSODHmS5bjpKbp37XNEHdNAJUKnXJKOVv8OBmtV9sVGhGFbzCMDSuz1gMTRfCnJxmxv
         EAwigFUipyhHBzms3upcySGhWaq/lOREPEoDopw1y0y5IrynD4InbYhYI2Mt66jHh2jK
         xuojF4fods/oEDnfsqRuzq/OfMQVkCLUFkz6ywbXOkwhsX5mgbnqjshH1zIUHng0bbYX
         G8+osvo+9SgkB5GLBpfzKFfAt+KXCsAHMziv9WnVpqiU59DsjiT6xzaq7XVOZRdQH8yf
         dWOA==
X-Gm-Message-State: AGRZ1gJIsJK7LgxJGLggaYZ/RbxxM2OaRLjS9ut2vGT0XwX1ntMIdtpW
	TW83B3/+4rv8VYgRLyQmqeEXcf8NABgsZfUO2BbmawRHoWXCvuY=
X-Received: by 2002:a63:9402:: with SMTP id m2mr13738544pge.93.1541949299185;
        Sun, 11 Nov 2018 07:14:59 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp2196612pjt;
        Sun, 11 Nov 2018 07:14:58 -0800 (PST)
X-Google-Smtp-Source: AJdET5fWAXO3FRDCBpMGlr1yROEkoji15RBjOwGwtwPaEuFp/okLJYdszCdPsEP6UheWDQiD6vbJ
X-Received: by 2002:a62:31c2:: with SMTP id x185-v6mr16696705pfx.39.1541949298123;
        Sun, 11 Nov 2018 07:14:58 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1541949298; cv=none;
        d=google.com; s=arc-20160816;
        b=DR0v8HHiauwlPLxAoJmyLwcqMmktLuG9A7UL3C+EkOOe5/ifQYbS0hh0+QkFAIo+EK
         u1MZ7DK7wTSk13FXl+dIWqmmzIbtvVFAMN2qCmlzv0wtmwlQcrXTN/kuuOmkmy+1pJDZ
         RFR/rNTnf/r/TO0j9z1giJGP9iqGQUdi1qmBmQrHWBeQPJPt7A/i7IjC8nf7Fc/CmQcV
         iVsYd4mUr4j6RN+PYpt0gN27SkTVhm/+bH2L27+oj0LZxJt42CADikEeyisIBFFjv4l0
         7z5/3q6dkQby7eq+UR0Bq1CEFK6QgshfmDoXu2Qw4/WQxnwjL10Z7/ImVHroRhUaa5h1
         e27A==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:to:references:message-id
         :content-transfer-encoding:cc:date:in-reply-to:from:subject
         :mime-version:dkim-signature;
        bh=6QZsoPKFqAmrSyeny5H7QaB5ybJooYmpdsGKdez/6pk=;
        b=NQH4CqT77WlpucFB0htYbIKZylyaNvKJQYmDfAgGZrQ3RrzaQUgj5zeM+ThSnOhtyD
         e49M6Uo1yNzQQZJZAhbT1QU2fI8xF7jcza4n4SL3npfSvn3GOtWRDbkLJbWAPvqOaT3O
         8UDXIIvxMMcbVihYJOHUsF+i0f2C0RacXtlxmJtSi1N1X+Q4m93HXHra3LVo5HIz8PFF
         IufKcsOh8O485JDpUWYPXgtm0V+WvOB1sWPGtqbrGtpuSq5PFgJCuHWPmfTN7A1e+Jrr
         y761fq9znWd9CUpwgwS0u/gw1I9qLWghPGnXNoN5WyTby5ZJv174ZoziOgm3PpMU0JB+
         H2UQ==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@amacapital-net.20150623.gappssmtp.com header.s=20150623 header.b=NfwRY4vi;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id g69-v6si14280074plb.400.2018.11.11.07.14.42;
        Sun, 11 Nov 2018 07:14:58 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728641AbeKLBD0 (ORCPT <rfc822;berg.ding@gmail.com> + 99 others);
        Sun, 11 Nov 2018 20:03:26 -0500
Received: from mail-pl1-f196.google.com ([209.85.214.196]:44955 "EHLO
        mail-pl1-f196.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1728542AbeKLBDZ (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sun, 11 Nov 2018 20:03:25 -0500
Received: by mail-pl1-f196.google.com with SMTP id s5-v6so3075634plq.11
        for <linux-kernel@vger.kernel.org>; Sun, 11 Nov 2018 07:14:37 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=amacapital-net.20150623.gappssmtp.com; s=20150623;
        h=mime-version:subject:from:in-reply-to:date:cc
         :content-transfer-encoding:message-id:references:to;
        bh=6QZsoPKFqAmrSyeny5H7QaB5ybJooYmpdsGKdez/6pk=;
        b=NfwRY4vikZ47ErGaxw8/+kOTdAPZ+PY8XFBbpXjHTJVj+knpVwGkUZYQlrYfVmTd2g
         xF+50mh7y7ltyeg1KW1Cm+GMMDbhOSoCqg54w9qaxM+h+znQr3616uZWZ9+BVnThocdx
         VjfVh8aku1dYfEc9trIF5atYKsBJ+HXCoQLyG1wb9LsPxOdGx6iAz4T/6e1XLbCaRWvu
         Qk/S9Tj6LZz/ZUFRV2oRWPetctxjVQ4hOzO1+gMk6xCT6irxr3PFMtC6F1SuQmMMHaCy
         abaLIVD+Yug0WY8wpGJTC47l8LQOruFypOW2FrpTqnBJ3vLXAdQkpN/jrOH8108i+CGC
         3ylw==
X-Received: by 2002:a17:902:784c:: with SMTP id e12-v6mr16464147pln.185.1541949276367;
        Sun, 11 Nov 2018 07:14:36 -0800 (PST)
Received: from ?IPv6:2600:1010:b064:bb40:4943:9d87:c587:e641? ([2600:1010:b064:bb40:4943:9d87:c587:e641])
        by smtp.gmail.com with ESMTPSA id g8-v6sm14362521pfh.57.2018.11.11.07.14.35
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Sun, 11 Nov 2018 07:14:35 -0800 (PST)
Content-Type: text/plain;
        charset=utf-8
Mime-Version: 1.0 (1.0)
Subject: Re: [PATCH v3 resend 1/2] mm: Add an F_SEAL_FUTURE_WRITE seal to memfd
From: Andy Lutomirski <luto@amacapital.net>
X-Mailer: iPhone Mail (16A404)
In-Reply-To: <CAKOZuethQ3eaV4uoEXiffVMc_S0hyk1FGPB3iQHHnv4NadW1UQ@mail.gmail.com>
Date: Sun, 11 Nov 2018 07:14:33 -0800
Cc: Joel Fernandes <joel@joelfernandes.org>,
        Jann Horn <jannh@google.com>,
        kernel list <linux-kernel@vger.kernel.org>,
        John Reck <jreck@google.com>,
        John Stultz <john.stultz@linaro.org>,
        Todd Kjos <tkjos@google.com>,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        Christoph Hellwig <hch@infradead.org>,
        Al Viro <viro@zeniv.linux.org.uk>,
        Andrew Morton <akpm@linux-foundation.org>,
        Bruce Fields <bfields@fieldses.org>,
        Jeff Layton <jlayton@kernel.org>,
        Khalid Aziz <khalid.aziz@oracle.com>, Lei.Yang@windriver.com,
        linux-fsdevel@vger.kernel.org, linux-kselftest@vger.kernel.org,
        Linux-MM <linux-mm@kvack.org>, marcandre.lureau@redhat.com,
        Mike Kravetz <mike.kravetz@oracle.com>,
        Minchan Kim <minchan@kernel.org>,
        Shuah Khan <shuah@kernel.org>,
        Valdis Kletnieks <valdis.kletnieks@vt.edu>,
        Hugh Dickins <hughd@google.com>,
        Linux API <linux-api@vger.kernel.org>
Content-Transfer-Encoding: quoted-printable
Message-Id: <91E8E1AA-859A-457A-8978-3EA39CBBF075@amacapital.net>
References: <CAG48ez0kQ4d566bXTFOYANDgii-stL-Qj-oyaBzvfxdV=PU-7g@mail.gmail.com> <20181110032005.GA22238@google.com> <69CE06CC-E47C-4992-848A-66EB23EE6C74@amacapital.net> <20181110182405.GB242356@google.com> <CAKOZuesQXRtthJTEr86LByH3gPpAdT-PQM0d1jqr131=zZNRKw@mail.gmail.com> <CAKOZueum8MtNvJ5P=W7_pRw62TdQdCgyjCwwbG1wezNboC1cxQ@mail.gmail.com> <20181110220933.GB96924@google.com> <907D942E-E321-4BD7-BED7-ACD1D96A3643@amacapital.net> <20181111023808.GA174670@google.com> <543A5181-3A16-438E-B372-97BEC48A74F8@amacapital.net> <20181111080945.GA78191@google.com> <CAKOZuethQ3eaV4uoEXiffVMc_S0hyk1FGPB3iQHHnv4NadW1UQ@mail.gmail.com>
To: Daniel Colascione <dancol@google.com>
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwAX_klzR+hbRu4sAA--.3266S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoWxtw43ur1xZryDtF4xJw43Wrg_yoWxKFyxpr
	y3J3WYkr4kJF95Ar10y3WUXFWjyr48Jr47XrnxGryUZws0vw1Sgr4Utr409rykArZ7Jw4j
	vrWjyry7CF1jyaDanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUPSb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Xr0_Ar1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1l84ACjcxK6I8E
	87Iv67AKxVW0oVCq3wA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_GcCE3s1le2I262IYc4CY6c
	8Ij28IcVAaY2xG8wAqx4xG64xvF2IEw4CE5I8CrVC2j2WlYx0E2Ix0cI8IcVAFwI0_JrI_
	JrylYx0Ex4A2jsIE14v26r4j6F4UMcvjeVCFs4IE7xkEbVWUJVW8JwACjcxG0xvY0x0EwI
	xGrwCjxxvEa2IrMxkF7I0Ew4C26cxK6c8Ij28IcwCY1Ik26cxK6xAEc7vF6xCjj44lc2xS
	Y4AK6IIF6ryrMxkI7II2jI8vz4vEwIxGrwCYIxAIcVC0I7IYx2IY67AKxVWUJVWUCwCYIx
	AIcVC0I7IYx2IY6xkF7I0E14v26r1j6r4UMxvI42IY6I8E87Iv67AKxVW8Jr0_Cr1UMxvI
	42IY6I8E87Iv6xkF7I0E14v26r4UJVWxJr1l42xK82IYc2Ij64vIr41l42xK82IY64kExV
	AvwVAq07x20xyl4x8a6x804xWl4I8I3I0E4IkC6x0Yz7v_Jr0_Gr1lx2IqxVAqx4xG67AK
	xVWUJVWUGwC20s026x8GjcxK67AKxVWUGVWUWwC2zVAF1VAY17CE14v26r4a6rW5MIIYrx
	kI7VAKI48JMIIF0xvE42xK8VAvwI8IcIk0rVW3JVWrJrUvcSsGvfC2KfnxnUUI43ZEXa7I
	UOWSoJUUUUU==




> On Nov 11, 2018, at 12:30 AM, Daniel Colascione <dancol@google.com> wrote:=

>=20
>> On Sun, Nov 11, 2018 at 12:09 AM, Joel Fernandes <joel@joelfernandes.org>=
 wrote:
>> On Sat, Nov 10, 2018 at 07:40:10PM -0800, Andy Lutomirski wrote:
>> [...]
>>>>>>>>>> I see two reasonable solutions:
>>>>>>>>>>=20
>>>>>>>>>> 1. Don=E2=80=99t fiddle with the struct file at all. Instead make=
 the inode flag
>>>>>>>>>> work by itself.
>>>>>>>>>=20
>>>>>>>>> Currently, the various VFS paths check only the struct file's f_mo=
de to deny
>>>>>>>>> writes of already opened files. This would mean more checking in a=
ll those
>>>>>>>>> paths (and modification of all those paths).
>>>>>>>>>=20
>>>>>>>>> Anyway going with that idea, we could
>>>>>>>>> 1. call deny_write_access(file) from the memfd's seal path which d=
ecrements
>>>>>>>>> the inode::i_writecount.
>>>>>>>>> 2. call get_write_access(inode) in the various VFS paths in additi=
on to
>>>>>>>>> checking for FMODE_*WRITE and deny the write (incase i_writecount i=
s negative)
>>>>>>>>>=20
>>>>>>>>> That will prevent both reopens, and writes from succeeding. Howeve=
r I worry a
>>>>>>>>> bit about 2 not being too familiar with VFS internals, about what t=
he
>>>>>>>>> consequences of doing that may be.
>>>>>>>>=20
>>>>>>>> IMHO, modifying both the inode and the struct file separately is fi=
ne,
>>>>>>>> since they mean different things. In regular filesystems, it's fine=
 to
>>>>>>>> have a read-write open file description for a file whose inode gran=
ts
>>>>>>>> write permission to nobody. Speaking of which: is fchmod enough to
>>>>>>>> prevent this attack?
>>>>>>>=20
>>>>>>> Well, yes and no. fchmod does prevent reopening the file RW, but
>>>>>>> anyone with permissions (owner, CAP_FOWNER) can just fchmod it back.=
 A
>>>>>>> seal is supposed to be irrevocable, so fchmod-as-inode-seal probably=

>>>>>>> isn't sufficient by itself. While it might be good enough for Androi=
d
>>>>>>> (in the sense that it'll prevent RW-reopens from other security
>>>>>>> contexts to which we send an open memfd file), it's still conceptual=
ly
>>>>>>> ugly, IMHO. Let's go with the original approach of just tweaking the=

>>>>>>> inode so that open-for-write is permanently blocked.
>>>>>>=20
>>>>>> Agreed with the idea of modifying both file and inode flags. I was th=
inking
>>>>>> modifying i_mode may do the trick but as you pointed it probably coul=
d be
>>>>>> reverted by chmod or some other attribute setting calls.
>>>>>>=20
>>>>>> OTOH, I don't think deny_write_access(file) can be reverted from any
>>>>>> user-facing path so we could do that from the seal to prevent the fut=
ure
>>>>>> opens in write mode. I'll double check and test that out tomorrow.
>>>>>>=20
>>>>>>=20
>>>>>=20
>>>>> This seems considerably more complicated and more fragile than needed.=
 Just
>>>>> add a new F_SEAL_WRITE_FUTURE.  Grep for F_SEAL_WRITE and make the _FU=
TURE
>>>>> variant work exactly like it with two exceptions:
>>>>>=20
>>>>> - shmem_mmap and maybe its hugetlbfs equivalent should check for it an=
d act
>>>>> accordingly.
>>>>=20
>>>> There's more to it than that, we also need to block future writes throu=
gh
>>>> write syscall, so we have to hook into the write path too once the seal=
 is
>>>> set, not just the mmap. That means we have to add code in mm/shmem.c to=
 do
>>>> that in all those handlers, to check for the seal (and hope we didn't m=
iss a
>>>> file_operations handler). Is that what you are proposing?
>>>=20
>>> The existing code already does this. That=E2=80=99s why I suggested grep=
ping :)
>>>=20
>>>>=20
>>>> Also, it means we have to keep CONFIG_TMPFS enabled so that the
>>>> shmem_file_operations write handlers like write_iter are hooked up. Cur=
rently
>>>> memfd works even with !CONFIG_TMPFS.
>>>=20
>>> If so, that sounds like it may already be a bug.
>=20
> Why shouldn't memfd work independently of CONFIG_TMPFS? In particular,
> write(2) on tmpfs FDs shouldn't work differently. If it does, that's a
> kernel implementation detail leaking out into userspace.
>=20
>>>>> - add_seals won=E2=80=99t need the wait_for_pins and mapping_deny_writ=
e logic.
>>>>>=20
>>>>> That really should be all that=E2=80=99s needed.
>>>>=20
>>>> It seems a fair idea what you're saying. But I don't see how its less
>>>> complex.. IMO its far more simple to have VFS do the denial of the oper=
ations
>>>> based on the flags of its datastructures.. and if it works (which I wil=
l test
>>>> to be sure it will), then we should be good.
>>>=20
>>> I agree it=E2=80=99s complicated, but the code is already written.  You s=
hould just
>>> need to adjust some masks.
>>>=20
>>=20
>> Its actually not that bad and a great idea, I did something like the
>> following and it works pretty well. I would say its cleaner than the old
>> approach for sure (and I also added a /proc/pid/fd/N reopen test to the
>> selftest and made sure that issue goes away).
>>=20
>> Side note: One subtelty I discovered from the existing selftests is once t=
he
>> F_SEAL_WRITE are active, an mmap of PROT_READ and MAP_SHARED region is
>> expected to fail. This is also evident from this code in mmap_region:
>>                if (vm_flags & VM_SHARED) {
>>                        error =3D mapping_map_writable(file->f_mapping);
>>                        if (error)
>>                                goto allow_write_and_free_vma;
>>                }
>>=20
>=20
> This behavior seems like a bug. Why should MAP_SHARED writes be denied
> here? There's no semantic incompatibility between shared mappings and
> the seal. And I think this change would represent an ABI break using
> memfd seals for ashmem, since ashmem currently allows MAP_SHARED
> mappings after changing prot_mask.

Hmm. I=E2=80=99m guessing the intent is that the mmap count should track wri=
table mappings in addition to mappings that could be made writable using mpr=
otect.  I think you could address this for SEAL_FUTURE in two ways:

1. In shmem_mmap, mask off VM_MAYWRITE if SEAL_FUTURE is set, or

2. Add a new vm operation that allows a vma to reject an mprotect attempt, l=
ike security_file_mprotect but per vma.  Then give it reasonable semantics f=
or shmem.

(1) probably gives the semantics you want for SEAL_FUTURE: old maps can be m=
protected, but new maps can=E2=80=99t.

>=20
>> ---8<-----------------------
>>=20
>> From: "Joel Fernandes (Google)" <joel@joelfernandes.org>
>> Subject: [PATCH] mm/memfd: implement future write seal using shmem ops
>>=20
>> Signed-off-by: Joel Fernandes (Google) <joel@joelfernandes.org>
>> ---
>> fs/hugetlbfs/inode.c |  2 +-
>> mm/memfd.c           | 19 -------------------
>> mm/shmem.c           | 13 ++++++++++---
>> 3 files changed, 11 insertions(+), 23 deletions(-)
>>=20
>> diff --git a/fs/hugetlbfs/inode.c b/fs/hugetlbfs/inode.c
>> index 32920a10100e..1978581abfdf 100644
>> --- a/fs/hugetlbfs/inode.c
>> +++ b/fs/hugetlbfs/inode.c
>> @@ -530,7 +530,7 @@ static long hugetlbfs_punch_hole(struct inode *inode,=
 loff_t offset, loff_t len)
>>                inode_lock(inode);
>>=20
>>                /* protected by i_mutex */
>> -               if (info->seals & F_SEAL_WRITE) {
>> +               if (info->seals & (F_SEAL_WRITE | F_SEAL_FUTURE_WRITE)) {=

>>                        inode_unlock(inode);
>>                        return -EPERM;
>>                }
>=20
> Maybe we can always set F_SEAL_FUTURE_WRITE when F_SEAL_WRITE so we
> can just test one bit except where the F_SEAL_WRITE behavior differs
> from F_SEAL_FUTURE_WRITE.

This could plausibly confuse existing users that read the seal mask.=
