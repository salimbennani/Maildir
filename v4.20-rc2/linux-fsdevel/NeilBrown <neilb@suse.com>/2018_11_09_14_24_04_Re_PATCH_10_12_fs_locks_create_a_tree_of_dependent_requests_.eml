Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (61.164.42.155:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 10 Nov 2018 00:50:02 -0000
Received: from icoremail.net (unknown [209.85.215.169])
	by mail-app2 (Coremail) with SMTP id by_KCgCn33wnKOVbZJllAQ--.31079S3;
	Fri, 09 Nov 2018 14:24:40 +0800 (CST)
Received: from mail-pg1-f169.google.com (unknown [209.85.215.169])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwCHaUUkKOVbevIgAA--.12492S3;
	Fri, 09 Nov 2018 14:24:36 +0800 (CST)
Received: by mail-pg1-f169.google.com with SMTP id y4so410533pgc.12
        for <xuliker@zju.edu.cn>; Thu, 08 Nov 2018 22:24:36 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-original-authentication-results:x-gm-message-state:delivered-to
         :from:to:date:cc:subject:in-reply-to:references:message-id
         :mime-version:sender:precedence:list-id;
        bh=y8Hq+Fh7xKdXsU+gvxmcRhTmW6LjwlQvCIgobMiYzU4=;
        b=h9pjyeKeojBFYamNNzP7WBijyOPj9N0I+/KMtkhxY4NomKqacAC2/hMw427B9/xiy2
         KGFTeTXVyLelgCaoVcyQVlxNUGZjMpxZ7mMrIOHlCZZ3m9YKjOd2UVoGbNiZoQPYMG4J
         GHPZ3y6PGCg0AUaCPanq3XzpVEG+HpUA4Q/YY/JpcVUWD8qAtnJFwipCglp9/RXdFsRb
         u+1su2qvcebkT37wKboHUU4pUUHHwSoXooef7Mj9ORukCoz5KHrN6OeuHWd6CBhQ/nYX
         Pg6f73fvRSzrnRp2BkgoeUXlE9/73cpziJC7iCmwCMOGDplc0+o5WWfePIeHp0LHqv3s
         K+iQ==
X-Original-Authentication-Results: mx.google.com;       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
X-Gm-Message-State: AGRZ1gJEby1URjWklfCtf2mzfLvzOcQLldxBlkVyZ3BwDIb8XCZmoibZ
	WwrrsdhvumcomQ1zjpQlZRasVShMfckx5opKfKKinH8YxyDuTAbLQQ==
X-Received: by 2002:a63:3c44:: with SMTP id i4mr6356119pgn.286.1541744676434;
        Thu, 08 Nov 2018 22:24:36 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp1151762pjt;
        Thu, 8 Nov 2018 22:24:35 -0800 (PST)
X-Google-Smtp-Source: AJdET5dOsPF4odHkomJqmk7B2QUiIn2ieDAgCnx96J66B8KvlxSCTi7qOT84Yofz9UHCug/wDpWt
X-Received: by 2002:a62:1416:: with SMTP id 22-v6mr7841473pfu.114.1541744675310;
        Thu, 08 Nov 2018 22:24:35 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1541744675; cv=none;
        d=google.com; s=arc-20160816;
        b=scr1Fltj+jq8FnAvCYWcwOIG6WyRcRSMDqpg8yhXT9214aP2ppMDWXfcbJdOYxhI0b
         9q68/VALIx9mf87a03Ai2nMy9FXVBkyt/GpWLCsKHsTwFMgO9vDBX80FQZqpD1vUw1Op
         398N8WyE68z5k7/a0qAN1081Mg/P6cwj64wYQe4MgkXYXUlbkmN3LfQOL3vyALbU/C8O
         kLBm5ww5eucW9by5tAgm5bkgXBTzpfpA9CCaOxu/zE/v+f+kW+H6/QEKp4t7tIJGU8OJ
         n/KcDo01/j2x+DEWkAzD3JXhXOH4Pmfv6ZMXXFsMwJ32BLBXoTyXNvimyZJzNivLMJ/b
         O/Qg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:mime-version:message-id:references
         :in-reply-to:subject:cc:date:to:from;
        bh=y8Hq+Fh7xKdXsU+gvxmcRhTmW6LjwlQvCIgobMiYzU4=;
        b=1G8b9iAI/tEimzSowqAFdXl9X2DlAmFsAGf5qeot+Or1OAXvHk/M9U3laLOM+F4xGy
         OBGNFHiNxbeX/w2ruXCfNDBvDMgW1CuHwh9CBGtrIuVg9l3tDAyviVfWSXhqLibdQeOS
         xq6nXTg/bNpwpWxymm12u7jjanNNxjolZwgLQ0K/aEdwNtWHvaOBK8yfyKozJKJjAxJX
         Sq55oy2Suqcy/x+3m8iXk+/EWfwGoPuVhxPqZD3B3H9Jbzm02i7ZrmCd3wD97byt1CUN
         qXgK2Rr7JPZ0IuVRFHLvG9ylk339KZl3YqKv4JVOS+xDQ4yDmihZ3o/mOSy7tp6KvHlj
         t/rQ==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id f8-v6si7267896pln.368.2018.11.08.22.24.19;
        Thu, 08 Nov 2018 22:24:35 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727752AbeKIQDT (ORCPT <rfc822;changseok.bae@gmail.com>
        + 99 others); Fri, 9 Nov 2018 11:03:19 -0500
Received: from mx2.suse.de ([195.135.220.15]:55824 "EHLO mx1.suse.de"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1727549AbeKIQDT (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 9 Nov 2018 11:03:19 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (unknown [195.135.220.254])
        by mx1.suse.de (Postfix) with ESMTP id 53D67AF3E;
        Fri,  9 Nov 2018 06:24:13 +0000 (UTC)
From: NeilBrown <neilb@suse.com>
To: "J. Bruce Fields" <bfields@fieldses.org>
Date: Fri, 09 Nov 2018 17:24:04 +1100
Cc: Jeff Layton <jlayton@kernel.org>,
        Alexander Viro <viro@zeniv.linux.org.uk>,
        Martin Wilck <mwilck@suse.de>, linux-fsdevel@vger.kernel.org,
        Frank Filz <ffilzlnx@mindspring.com>,
        linux-kernel@vger.kernel.org
Subject: Re: [PATCH 10/12] fs/locks: create a tree of dependent requests.
In-Reply-To: <20181109030913.GA8831@fieldses.org>
References: <154138128401.31651.1381177427603557514.stgit@noble> <154138144796.31651.14201944346371750178.stgit@noble> <20181108213030.GF6090@fieldses.org> <87k1lnw0ec.fsf@notabene.neil.brown.name> <20181109030913.GA8831@fieldses.org>
Message-ID: <87bm6ywyyj.fsf@notabene.neil.brown.name>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="=-=-=";
        micalg=pgp-sha256; protocol="application/pgp-signature"
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwCHaUUkKOVbevIgAA--.12492S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoWxAFyftryDKrWxWrWfGr48JFb_yoWrJFW3pr
	WfXFZ0kF4kWF18ua1vg3W8G3Wrt3yxJr47Jr1rKrWxCFZ8Ar1xXr43Zr4YgFy7Crnavr1Y
	qFW5J3yDuw4DZFJanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUQGb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Ar0_tr1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Cr0_Gr1UM28EF7xvwVC2
	z280aVAFwI0_GcCE3s1l84ACjcxK6I8E87Iv6xkF7I0E14v26rxl6s0DM2vj62AExVA0xI
	801c8C04v26x02cVCv0xWle2I262IYc4CY6c8Ij28IcVAaY2xG8wASzI0EjI02j7AqF2xK
	xwAqx4xG64xvF2IEw4CE5I8CrVC2j2WlYx0E2Ix0cI8IcVAFwI0_JrI_JrylYx0Ex4A2js
	IE14v26r4j6F4UMcvjeVCFs4IE7xkEbVWUJVW8JwACjcxG0xvEwIxGrwCjxxvEa2IrMxkF
	7I0Ew4C26cxK6c8Ij28IcwCY1Ik26cxK6xAEc7vF6xCjj44lc2xSY4AK6IIF6r47MxkI7I
	I2jI8vz4vEwIxGrwCYIxAIcVC0I7IYx2IY67AKxVWUCVW8JwCYIxAIcVC0I7IYx2IY6xkF
	7I0E14v26r1j6r4UMxvI42IY6I8E87Iv67AKxVW0oVCq3wCYIxAIcVC2z280aVCY1x0267
	AKxVW0oVCq3wCF04k20xvY0x0EwIxGrwCF04k20xvEw4C26cxK6c8Ij28IcwCF72vE77IF
	4wCFx2IqxVCFs4IE7xkEbVWUJVW8JwC20s026c02F40E14v26r1j6r18MI8I3I0E7480Y4
	vE14v26r106r1rMI8E67AF67kF1VAFwI0_Jw0_GFylIxkGc2Ij64vIr41lIxAIcVCF04k2
	6cxKx2IYs7xG6rWUJVWrZr1UYxBIdaVFxhVjvjDU0xZFpf9x07bShL5UUUUU=

--=-=-=
Content-Type: text/plain
Content-Transfer-Encoding: quoted-printable

On Thu, Nov 08 2018, J. Bruce Fields wrote:

> On Fri, Nov 09, 2018 at 11:38:19AM +1100, NeilBrown wrote:
>> On Thu, Nov 08 2018, J. Bruce Fields wrote:
>>=20
>> > On Mon, Nov 05, 2018 at 12:30:48PM +1100, NeilBrown wrote:
>> >> When we find an existing lock which conflicts with a request,
>> >> and the request wants to wait, we currently add the request
>> >> to a list.  When the lock is removed, the whole list is woken.
>> >> This can cause the thundering-herd problem.
>> >> To reduce the problem, we make use of the (new) fact that
>> >> a pending request can itself have a list of blocked requests.
>> >> When we find a conflict, we look through the existing blocked request=
s.
>> >> If any one of them blocks the new request, the new request is attached
>> >> below that request, otherwise it is added to the list of blocked
>> >> requests, which are now known to be mutually non-conflicting.
>> >>=20
>> >> This way, when the lock is released, only a set of non-conflicting
>> >> locks will be woken, the rest can stay asleep.
>> >> If the lock request cannot be granted and the request needs to be
>> >> requeued, all the other requests it blocks will then be woken
>> >
>> > So, to make sure I understand: the tree of blocking locks only ever has
>> > three levels (the active lock, the locks blocking on it, and their
>> > children?)
>>=20
>> Not correct.
>> Blocks is only vertical, never horizontal.  Siblings never block each
>> other.
>> So one process hold a lock on a byte, and 27 other process want a lock
>> on that byte, then there will be 28 levels in a narrow tree - it is
>> effectively a queue.
>> Branching (via siblings) only happens when a child conflict with only
>> part of the lock held by the parent.
>> So if one process locks 32K, then two other processes request locks on
>> the 2 16K halves, then 4 processes request locks on the 8K quarters, and
>> so-on, then you could end up with 32767 processes in a binary tree, with
>> half of them all waiting on different individual bytes.
>
> Maybe I should actually read the code carefully instead of just skimming
> the changelog and jumping to conclusions.
>
> I think this is correct, but I wish we had an actual written-out
> argument that it's correct, because intuition isn't a great guide for
> posix file locks.
>
> Maybe:
>
> Waiting and applied locks are all kept in trees whose properties are:
>
> 	- the root of a tree may be an applied or unapplied lock.
> 	- every other node in the tree is an unapplied lock that
> 	  conflicts with every ancestor of that node.
>
> Every such tree begins life as an unapplied singleton which obviously
> satisfies the above properties.
>
> The only ways we modify trees preserve these properties:
>
> 	1. We may add a new child, but only after first verifying that it
> 	   conflicts with all of its ancestors.
> 	2. We may remove the root of a tree, creating a new singleton
> 	   tree from the root and N new trees rooted in the immediate
> 	   children.
> 	3. If the root of a tree is not currently an applied lock, we may
> 	   apply it (if possible).
> 	4. We may upgrade the root of the tree (either extend its range,
> 	   or upgrade its entire range from read to write).
>
> When an applied lock is modified in a way that reduces or downgrades any
> part of its range, we remove all its children (2 above).
>
> For each of those child trees: if the root of the tree applies, we do so
> (3).  If it doesn't, it must conflict with some applied lock.  We remove
> all of its children (2), and add it is a new leaf to the tree rooted in
> the applied lock (1).  We then repeat the process recursively with those
> children.
>

Thanks pretty thorough - and even looks correct.
I'll re-reading some time when it isn't late, and maybe make it into a
comment in the code.
I agree, this sort of documentation can be quite helpful.

Thanks,
NeilBrown

--=-=-=
Content-Type: application/pgp-signature; name="signature.asc"

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEG8Yp69OQ2HB7X0l6Oeye3VZigbkFAlvlKAUACgkQOeye3VZi
gbnnRg/8DK+Zv73yAzgSJvPbwxgXatREw2sbd8OQ10lTp4fEISzSUXb8fNs/AwiJ
j/ZKu7XV3gLmep7IA1GIR2piBPwuLeDvHsxVkIc3tQdtaGMTcqtTbRdYcsfvVT1u
77lV4AOnI2wXey1b03gFmEu2ZMCMe+Kk69nvTY6vnkRiCq+VZUbpKFHkHB1vf9DN
gpYnZnd2nR6FVYfh5SkjxhuzecZJWwnkA7GCO7oHShaeAu9bZXBwKivQNhJadQse
0Y6oNexj4gS5t4zvu3ZGEnait7QeeSOocq8Me6QiItqt0k0EBCiXfhnoVlthjxv9
29Q3IkPQQ7JfZKkn8FVgdvzG3j031BQbhvZ5HoSKLwkFptpAe9xYxbUhJwjvNBJy
HYHGGPdFy5oqbjcTTqt31YQUa+7xaYN4ObMkRt/6InjUpMIc1FjlcKuprdW7J9Tx
AfAYAmAt+jQys9RX81fktLzgX7Fv26sGT1h7NaPwhHfHKprDr05eYk2XU+T1OfQC
U3Qu3HAQ+ziKtk96dnsZufITY3pDIZBPS7IPfUCGHpgqGyVjik4Kem2V8twrgvcQ
E//XruPKNvf37eP9pIdjKv1f2uSg7vV1husdfmReGJOtlTlM/BgnfgAIuooMYAhY
DIzYGFL9gtQdOQc8Bv2cmueKcrq77RXLuDfKaP8zM/Zz20jXIQ0=
=0W5C
-----END PGP SIGNATURE-----
--=-=-=--
