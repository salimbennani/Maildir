Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 09 Nov 2018 01:07:18 -0000
Received: from icoremail.net (unknown [209.85.215.181])
	by mail-app2 (Coremail) with SMTP id by_KCgDXv94e1+Rb8ZljAQ--.30388S3;
	Fri, 09 Nov 2018 08:38:55 +0800 (CST)
Received: from mail-pg1-f181.google.com (unknown [209.85.215.181])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwB38Ewc1+RbUGYfAA--.7207S3;
	Fri, 09 Nov 2018 08:38:52 +0800 (CST)
Received: by mail-pg1-f181.google.com with SMTP id w7so62097pgp.13
        for <xuliker@zju.edu.cn>; Thu, 08 Nov 2018 16:38:52 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-original-authentication-results:x-gm-message-state:delivered-to
         :from:to:date:cc:subject:in-reply-to:references:message-id
         :mime-version:sender:precedence:list-id;
        bh=vywAhYAEk46WvxNpqhnubF+u0rW2BU/YTLlBci/gv8E=;
        b=jdCCVduzYuhnkU7ZwwXQDWPUtXj/FiaE7D7x9aH6gXugvuhX+p/kyXGQrBTGhVijP6
         KvTl2/1v7nEOmdwpoV3EmXVSTJACf24KBBGAzqu14TaJMz+AnusSKB37Q2a4t4qXpzUn
         Zb/Or6ag10KV5gi13kUmV5oKXHlsbcakFJcwkrktHPqhjL+RGjM4fT4284a8SVuj2waU
         0mAJDdGJWoiPzmMFlUqLzt9ShLfX/I3229Yh1Lv/6FTxBPeydOmj1hiBdTOIxdSlvP9P
         VJzvi1yY0xBGSB2L/Ne2u7XW9ipTMLjFLHZ13NfoJTTnFCn3g+AU04H7T5wBpsep0B+S
         W/CA==
X-Original-Authentication-Results: mx.google.com;       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
X-Gm-Message-State: AGRZ1gLWiOsPIVcn+xdPMqRrS3S1Uxil4ViMXOdHNqj3E3YYK8nlj4IQ
	wG0BU6VTBkfOzYGKtip4Q8ZwbPeFcBtsDwvcuzhfdcZYNzLl2Z0LYg==
X-Received: by 2002:a63:cd17:: with SMTP id i23mr5591038pgg.13.1541723932416;
        Thu, 08 Nov 2018 16:38:52 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp909050pjt;
        Thu, 8 Nov 2018 16:38:51 -0800 (PST)
X-Google-Smtp-Source: AJdET5dxm+cVgPLIz+aP90B406x4LX5bB+r6oYCsbwBqnPBt/iQ55bXXTWBEH27ZoA/ezYfFAp4W
X-Received: by 2002:a62:704a:: with SMTP id l71-v6mr6756078pfc.68.1541723931657;
        Thu, 08 Nov 2018 16:38:51 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1541723931; cv=none;
        d=google.com; s=arc-20160816;
        b=i/Qi0a2sfDjYS7lcvnK2fKmHFRE+DYXnd6rn3TUeQHuMWQJrkSE/cnkJoc8SS2LpDn
         jd034VvaUGPdLYYbURVGezC/uFQkJ+LdB8ytVpKgtRm/zttXcyVi8GciF5CXtH3EMRjw
         r8HpRbBLa+doqv08FitTUefoRKEG6dD/YUzm0WcqmK954rQU8SfGbspR4PD9VAg8b04z
         0SCuAjwAowBCz2Wko75StKeoUWpni6uZ9H35wOFgjvZWsoFk4nKIeDQSk7cGR3RqukEl
         764i8EEI7MDVaWGO691Uasv+dgfu61LktDO/4mzT899/pW414sPw3Iio3KjsOfZrxkQE
         P28Q==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:mime-version:message-id:references
         :in-reply-to:subject:cc:date:to:from;
        bh=vywAhYAEk46WvxNpqhnubF+u0rW2BU/YTLlBci/gv8E=;
        b=Pslj+cgjz1KZEEYbham7VFn2FS/G3mUYNda6alFbFZGQisqP7yySuAyZEU21/dopup
         xWPGx+myTIfV2BpC4/JHVLaVBxQAxLE3sRVi+lRELmrbPWSpr9h/1JnyHXpzEI//pZbn
         YXVFGBEWnAS0Ettk+ob+DwC7+eDs6OAu3Hgot3pxwlNpU4ywVgW9t/gUoUJooJvdwIxm
         D9SCQpC2YssvlX8tRjhsItza8iJRDlDQRHWNmvcjj3yX9xlUElqwTE8mhl095rNPqIDA
         d+lSagwMfDV4X+LzZAd4XSnH5jQEcCoDaEWZWXHtwEwMGV70AmwfpwL6upM18OSM+IhX
         BitA==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id p9-v6si5913211pfe.76.2018.11.08.16.38.36;
        Thu, 08 Nov 2018 16:38:51 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727426AbeKIKQh (ORCPT <rfc822;tu.k.phung@gmail.com>
        + 99 others); Fri, 9 Nov 2018 05:16:37 -0500
Received: from mx2.suse.de ([195.135.220.15]:52986 "EHLO mx1.suse.de"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726599AbeKIKQg (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 9 Nov 2018 05:16:36 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (unknown [195.135.220.254])
        by mx1.suse.de (Postfix) with ESMTP id 2FA87AC15;
        Fri,  9 Nov 2018 00:38:27 +0000 (UTC)
From: NeilBrown <neilb@suse.com>
To: "J. Bruce Fields" <bfields@fieldses.org>
Date: Fri, 09 Nov 2018 11:38:19 +1100
Cc: Jeff Layton <jlayton@kernel.org>,
        Alexander Viro <viro@zeniv.linux.org.uk>,
        Martin Wilck <mwilck@suse.de>, linux-fsdevel@vger.kernel.org,
        Frank Filz <ffilzlnx@mindspring.com>,
        linux-kernel@vger.kernel.org
Subject: Re: [PATCH 10/12] fs/locks: create a tree of dependent requests.
In-Reply-To: <20181108213030.GF6090@fieldses.org>
References: <154138128401.31651.1381177427603557514.stgit@noble> <154138144796.31651.14201944346371750178.stgit@noble> <20181108213030.GF6090@fieldses.org>
Message-ID: <87k1lnw0ec.fsf@notabene.neil.brown.name>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="=-=-=";
        micalg=pgp-sha256; protocol="application/pgp-signature"
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwB38Ewc1+RbUGYfAA--.7207S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoWxZw1xtF4UtFy8uFy3tryfCrg_yoW7Gr4kpF
	WqgFWYkFWFgryxW3Z7tFy8uF1S9wsxKr47Cr1rJ3y7Ar98Xr97WF1kJr4YgF12yr4fWFs8
	WF45t3srur1qvFJanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUQmb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Ar0_tr1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1l84ACjcxK6I8E
	87Iv67AKxVW0oVCq3wA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_GcCE3s1lnx0Ee4C267I2x7
	xF54xIwI0E7I0Y6sxI4wAS0I0E0xvYzxvE52x082IY62kv0487M2AExVA0xI801c8C04v7
	Mc02F40EFcxC0VAKzVAqx4xG6I80ewAv7VC0I7IYx2IY67AKxVWUJVWUGwAv7VC2z280aV
	AFwI0_Gr0_Cr1lOx8S6xCaFVCjc4AY6r1j6r4UM4x0Y48IcVAKI48JMx02cVCv0xWlc7Cj
	xVAKzI0EY4vE52x082I5MxkFs20EY4vE44CYbxCE4x80FwCY02Avz4vEIxC_twCY0x0Ix7
	I2Y4AK64vIr41lcIIF0xvE2Ix0cI8IcVAFwI0_Jr0_JF4lcIIF0xvE2Ix0cI8IcVCY1x02
	67AKxVWUJVW8JwCYIxAIcVC2z280aVAFwI0_GcCE3s1lcIIF0xvEx4A2jsIEc7CjxVAFwI
	0_GcCE3s1l42xK82IYc2Ij64vIr41l42xK82IY64kExVAvwVAq07x20xyl4x8a6x804xWl
	4I8I3I0E4IkC6x0Yz7v_Jr0_Gr1lx2IqxVAqx4xG67AKxVWUJVWUGwC20s026x8GjcxK67
	AKxVWUGVWUWwC2zVAF1VAY17CE14v26r1q6r43MIIYrxkI7VAKI48JMIIF0xvE42xK8VAv
	wI8IcIk0rVWrJr0_WFyUJbIYCTnIWIevJa73UjIFyTuYvjxUPd-PUUUUU

--=-=-=
Content-Type: text/plain
Content-Transfer-Encoding: quoted-printable

On Thu, Nov 08 2018, J. Bruce Fields wrote:

> On Mon, Nov 05, 2018 at 12:30:48PM +1100, NeilBrown wrote:
>> When we find an existing lock which conflicts with a request,
>> and the request wants to wait, we currently add the request
>> to a list.  When the lock is removed, the whole list is woken.
>> This can cause the thundering-herd problem.
>> To reduce the problem, we make use of the (new) fact that
>> a pending request can itself have a list of blocked requests.
>> When we find a conflict, we look through the existing blocked requests.
>> If any one of them blocks the new request, the new request is attached
>> below that request, otherwise it is added to the list of blocked
>> requests, which are now known to be mutually non-conflicting.
>>=20
>> This way, when the lock is released, only a set of non-conflicting
>> locks will be woken, the rest can stay asleep.
>> If the lock request cannot be granted and the request needs to be
>> requeued, all the other requests it blocks will then be woken
>
> So, to make sure I understand: the tree of blocking locks only ever has
> three levels (the active lock, the locks blocking on it, and their
> children?)

Not correct.
Blocks is only vertical, never horizontal.  Siblings never block each
other.
So one process hold a lock on a byte, and 27 other process want a lock
on that byte, then there will be 28 levels in a narrow tree - it is
effectively a queue.
Branching (via siblings) only happens when a child conflict with only
part of the lock held by the parent.
So if one process locks 32K, then two other processes request locks on
the 2 16K halves, then 4 processes request locks on the 8K quarters, and
so-on, then you could end up with 32767 processes in a binary tree, with
half of them all waiting on different individual bytes.

NeilBrown

>
> --b.
>
>>=20
>> Reported-and-tested-by: Martin Wilck <mwilck@suse.de>
>> Signed-off-by: NeilBrown <neilb@suse.com>
>> ---
>>  fs/locks.c |   29 +++++++++++++++++++++++------
>>  1 file changed, 23 insertions(+), 6 deletions(-)
>>=20
>> diff --git a/fs/locks.c b/fs/locks.c
>> index 802d5853acd5..1b0eac6b2918 100644
>> --- a/fs/locks.c
>> +++ b/fs/locks.c
>> @@ -715,11 +715,25 @@ static void locks_delete_block(struct file_lock *w=
aiter)
>>   * fl_blocked list itself is protected by the blocked_lock_lock, but by=
 ensuring
>>   * that the flc_lock is also held on insertions we can avoid taking the
>>   * blocked_lock_lock in some cases when we see that the fl_blocked list=
 is empty.
>> + *
>> + * Rather than just adding to the list, we check for conflicts with any=
 existing
>> + * waiters, and add beneath any waiter that blocks the new waiter.
>> + * Thus wakeups don't happen until needed.
>>   */
>>  static void __locks_insert_block(struct file_lock *blocker,
>> -					struct file_lock *waiter)
>> +				 struct file_lock *waiter,
>> +				 bool conflict(struct file_lock *,
>> +					       struct file_lock *))
>>  {
>> +	struct file_lock *fl;
>>  	BUG_ON(!list_empty(&waiter->fl_block));
>> +
>> +new_blocker:
>> +	list_for_each_entry(fl, &blocker->fl_blocked, fl_block)
>> +		if (conflict(fl, waiter)) {
>> +			blocker =3D  fl;
>> +			goto new_blocker;
>> +		}
>>  	waiter->fl_blocker =3D blocker;
>>  	list_add_tail(&waiter->fl_block, &blocker->fl_blocked);
>>  	if (IS_POSIX(blocker) && !IS_OFDLCK(blocker))
>> @@ -734,10 +748,12 @@ static void __locks_insert_block(struct file_lock =
*blocker,
>>=20=20
>>  /* Must be called with flc_lock held. */
>>  static void locks_insert_block(struct file_lock *blocker,
>> -					struct file_lock *waiter)
>> +			       struct file_lock *waiter,
>> +			       bool conflict(struct file_lock *,
>> +					     struct file_lock *))
>>  {
>>  	spin_lock(&blocked_lock_lock);
>> -	__locks_insert_block(blocker, waiter);
>> +	__locks_insert_block(blocker, waiter, conflict);
>>  	spin_unlock(&blocked_lock_lock);
>>  }
>>=20=20
>> @@ -996,7 +1012,7 @@ static int flock_lock_inode(struct inode *inode, st=
ruct file_lock *request)
>>  		if (!(request->fl_flags & FL_SLEEP))
>>  			goto out;
>>  		error =3D FILE_LOCK_DEFERRED;
>> -		locks_insert_block(fl, request);
>> +		locks_insert_block(fl, request, flock_locks_conflict);
>>  		goto out;
>>  	}
>>  	if (request->fl_flags & FL_ACCESS)
>> @@ -1071,7 +1087,8 @@ static int posix_lock_inode(struct inode *inode, s=
truct file_lock *request,
>>  			spin_lock(&blocked_lock_lock);
>>  			if (likely(!posix_locks_deadlock(request, fl))) {
>>  				error =3D FILE_LOCK_DEFERRED;
>> -				__locks_insert_block(fl, request);
>> +				__locks_insert_block(fl, request,
>> +						     posix_locks_conflict);
>>  			}
>>  			spin_unlock(&blocked_lock_lock);
>>  			goto out;
>> @@ -1542,7 +1559,7 @@ int __break_lease(struct inode *inode, unsigned in=
t mode, unsigned int type)
>>  		break_time -=3D jiffies;
>>  	if (break_time =3D=3D 0)
>>  		break_time++;
>> -	locks_insert_block(fl, new_fl);
>> +	locks_insert_block(fl, new_fl, leases_conflict);
>>  	trace_break_lease_block(inode, new_fl);
>>  	spin_unlock(&ctx->flc_lock);
>>  	percpu_up_read_preempt_enable(&file_rwsem);
>>=20

--=-=-=
Content-Type: application/pgp-signature; name="signature.asc"

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEG8Yp69OQ2HB7X0l6Oeye3VZigbkFAlvk1vwACgkQOeye3VZi
gbn9gg/+I8gooPeWGWlXRUBkus3I0KbACY5ylbCT112HN+p+fjJGZtk9aoOLoaO0
GdRiDGYl6OXGCy9nIxJJR9XvKj5jLUqRFkBQByDCksvf+jNyZvgNTiQ2MiIMXFRY
nvTWqJzuMasUlE0d8u0LFv7Jn/Vmxcat4jbAZQA1Lf+LrkRjmCp/CAC/RSpQ4Zn3
82nk4yqgRKOrNYoHglAhK6TD9IXXFUbjbTpSzE2d+K0QH+6XCFa0VQaKXQN2/pCT
n/Iwsktc0eHh5jyus0NrKec2kzaJP6W+T/l4FBgWNQ3heF/z/NbIgTtRO9Rup6Yn
9sMVVUIeNFGv1Bz/bNGdeoYjQoH6SHn9HDhF+Ld2S3vfctYFfaPxeRwDNeb7pxG2
S2TsUOjr0QeRTJkG5DZJJKE1/SZyhpabUkvaN2J3feu5+0n5yagrjdlYZIDuOmWK
uC27+eNJiY8USDfPnc1I3IW5zS2KKtqua0ObEzDUDwRWWwl3OkcCnKclqLqluKMG
4MgAqIZQGEPThmv5IBvzH16osoJPZBdvuEAV3O50BdShTGtow5RwJ16FXSMDHz9K
rIMn6WD7MSZ4WbwAqgg2mEfpTkuuwkVnhSm+dfUJ5Yg9xFFE80Nn8VxG8toJU0wO
8mz75dpjZaHnziHAJ2vXc+QuIh/f76bLGFdI6jBaEkCfue8l56g=
=ByDd
-----END PGP SIGNATURE-----
--=-=-=--
