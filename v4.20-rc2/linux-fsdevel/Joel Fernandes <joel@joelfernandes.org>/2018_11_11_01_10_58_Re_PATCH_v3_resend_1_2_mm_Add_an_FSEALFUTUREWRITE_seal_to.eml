Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (61.164.42.155:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 11 Nov 2018 15:03:30 -0000
Received: from icoremail.net (unknown [209.85.214.181])
	by mail-app2 (Coremail) with SMTP id by_KCgCHv+R1Eudb3hpwAQ--.33954S3;
	Sun, 11 Nov 2018 01:16:39 +0800 (CST)
Received: from mail-pl1-f181.google.com (unknown [209.85.214.181])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwBHLEg_EedbYv0nAA--.14330S3;
	Sun, 11 Nov 2018 01:11:27 +0800 (CST)
Received: by mail-pl1-f181.google.com with SMTP id n4-v6so2348997plp.2
        for <xuliker@zju.edu.cn>; Sat, 10 Nov 2018 09:11:27 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:date:from:to:cc
         :subject:message-id:references:mime-version:content-disposition
         :in-reply-to:user-agent:sender:precedence:list-id;
        bh=RAOSk752rvaDPZ/vfFvRhPrKNX9UBnZooEKSicvOERM=;
        b=ojGqcKn2fmkt7LaZjGOrwryilFCe5ZC9KpNKX3Kdgq4hCW2YjoJshMrTflMSbqAYDL
         aQLYWlbEI4WIxNUYkJB8Mxw+crd3ROfFLmDTBKvgP+ame6xkcFuXKPZX93O17dXNIhAy
         qNB6dEwuKSzUDjmS4lRnNvoRFvhW/c0XrCDcUt3hwy6VjhJ6VZgxVWv1Na2GDpY6yjCU
         UWvLZItumE5FR86wQ5rpWLo+tbxuCaIA/Ufyywdkuw9pTZ9wXo7yzSA9bDMiOGGLUe2e
         3pe3lRdhnPdKr3yOrQ7UpDIMw1bVUuyEMRhRfijVwX0WBR6i8514PfiLr1EMCAPg1trE
         +Skg==
X-Gm-Message-State: AGRZ1gIKeMoSI+zjV09hBL8Kkf33EwtR8UULr7MeCzZ8dXCBxdVAa6S3
	5siRVP8LnKfxNsKlRsHsytC6aADePQuxR0S1MsQVa769aQJ6dCE=
X-Received: by 2002:a17:902:8e81:: with SMTP id bg1-v6mr13418449plb.192.1541869887267;
        Sat, 10 Nov 2018 09:11:27 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp1298223pjt;
        Sat, 10 Nov 2018 09:11:26 -0800 (PST)
X-Google-Smtp-Source: AJdET5f+ucbCyn/bFl7FHrB+59nxq9qhnAMac8hc3vZ8HsojNn8XeyPYuC/3vClrWvhAZz3ndUlv
X-Received: by 2002:a63:990a:: with SMTP id d10mr11670479pge.279.1541869886289;
        Sat, 10 Nov 2018 09:11:26 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1541869886; cv=none;
        d=google.com; s=arc-20160816;
        b=rbiMbOHYeQ+g1Zpy9Ykzl4SXy+CN90N2JpsyI6rhPno2/hrKsU1006y6bORe3ZaSA2
         pgNgWTzt6rLVEqTni4/i1TRsC6hLnfq29S+3j5DTa2VT525QJNGhJAn1qg52j7VElZB/
         zJrTNuU7edfF0mbOjw9skB3WgRXkougVeCzmOTvoSMf9GbVa4HNyNVHgwTwUoFqrbwTS
         onJ/Up8uCX6lowIIuIX+Vzo7NLdliLaA/trOqjvdKSaParbqxgFqrGu6myhnCbEU6yub
         2wNAmGrAs+uWGTjLLJReSvN2mJeD8Z5FSPWa3jHNVx4U85zDKtoDXaV2dz5mPwbvdfbl
         bIWw==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:user-agent:in-reply-to
         :content-disposition:mime-version:references:message-id:subject:cc
         :to:from:date:dkim-signature;
        bh=RAOSk752rvaDPZ/vfFvRhPrKNX9UBnZooEKSicvOERM=;
        b=y8Bgae9TUcl1q0BFB5bzcUqXITHJm3+/QJT/cMS17wHqPsPtKrLfC3uwSy/FOWaHxi
         Zu2Xm8wkX72y5u7LUReMY/wRYLp887YkyhKx6pNGdy1zImpOf5Y91HfqMUJM5HtM7CGD
         6Gt9nZvHRyIob5vCEjKHe2uFruhg34WKQeVWztybpOygV9OhwFke3kjdlOa/TdJhCUuC
         6K7mMTI9iEctGz1uJOI0p889mkTLC/oyjOPjriSLJF1Oq+rhQoNu/dgEgZLwNm0VhPhJ
         kGap/DFHhkYYyYtopR2FxjLLXI0QW+W/2W762fIR8wMxxA1ciik0bACBBDEsXf82RZ92
         Vbmw==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@joelfernandes.org header.s=google header.b=IcOr60Lc;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id 14-v6si12356461pfw.217.2018.11.10.09.11.11;
        Sat, 10 Nov 2018 09:11:26 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726710AbeKKC4o (ORCPT <rfc822;tu.k.phung@gmail.com>
        + 99 others); Sat, 10 Nov 2018 21:56:44 -0500
Received: from mail-pf1-f196.google.com ([209.85.210.196]:44268 "EHLO
        mail-pf1-f196.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726323AbeKKC4o (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sat, 10 Nov 2018 21:56:44 -0500
Received: by mail-pf1-f196.google.com with SMTP id b81-v6so1835905pfe.11
        for <linux-kernel@vger.kernel.org>; Sat, 10 Nov 2018 09:11:01 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=joelfernandes.org; s=google;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=RAOSk752rvaDPZ/vfFvRhPrKNX9UBnZooEKSicvOERM=;
        b=IcOr60LcicOWMcAp4EEaUfjsJ60DRVfrKdBRc5IK+p+UpWfV+hFZhdjTTxx1Z0wRou
         5LtGsKA/Xh8ZbCucMU/56zhXQdmad+9yKgb5VZlDTb2G0er8927/G8Fat9bAa9ctLSFL
         jZFtM/FYYO6mu+bmO2J3nN2REH9V3g96xRc5A=
X-Received: by 2002:a63:c0f:: with SMTP id b15mr11711275pgl.314.1541869860763;
        Sat, 10 Nov 2018 09:11:00 -0800 (PST)
Received: from localhost ([2620:0:1000:1601:3aef:314f:b9ea:889f])
        by smtp.gmail.com with ESMTPSA id 34sm10635910pgp.90.2018.11.10.09.10.59
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Sat, 10 Nov 2018 09:10:59 -0800 (PST)
Date: Sat, 10 Nov 2018 09:10:58 -0800
From: Joel Fernandes <joel@joelfernandes.org>
To: Daniel Colascione <dancol@google.com>
Cc: Jann Horn <jannh@google.com>,
        kernel list <linux-kernel@vger.kernel.org>,
        "jreck@google.com" <jreck@google.com>,
        John Stultz <john.stultz@linaro.org>,
        Todd Kjos <tkjos@google.com>,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        Christoph Hellwig <hch@infradead.org>,
        Al Viro <viro@zeniv.linux.org.uk>,
        Andrew Morton <akpm@linux-foundation.org>,
        Bruce Fields <bfields@fieldses.org>,
        "jlayton@kernel.org" <jlayton@kernel.org>,
        Khalid Aziz <khalid.aziz@oracle.com>,
        "Lei.Yang@windriver.com" <Lei.Yang@windriver.com>,
        "linux-fsdevel@vger.kernel.org" <linux-fsdevel@vger.kernel.org>,
        "linux-kselftest@vger.kernel.org" <linux-kselftest@vger.kernel.org>,
        Linux-MM <linux-mm@kvack.org>,
        "marcandre.lureau@redhat.com" <marcandre.lureau@redhat.com>,
        Mike Kravetz <mike.kravetz@oracle.com>,
        "minchan@kernel.org" <minchan@kernel.org>,
        "shuah@kernel.org" <shuah@kernel.org>,
        "valdis.kletnieks@vt.edu" <valdis.kletnieks@vt.edu>,
        Hugh Dickins <hughd@google.com>,
        Linux API <linux-api@vger.kernel.org>
Subject: Re: [PATCH v3 resend 1/2] mm: Add an F_SEAL_FUTURE_WRITE seal to
 memfd
Message-ID: <20181110171058.GA242356@google.com>
References: <20181108041537.39694-1-joel@joelfernandes.org>
 <CAG48ez1h=v-JYnDw81HaYJzOfrNhwYksxmc2r=cJvdQVgYM+NA@mail.gmail.com>
 <CAG48ez0kQ4d566bXTFOYANDgii-stL-Qj-oyaBzvfxdV=PU-7g@mail.gmail.com>
 <20181110032005.GA22238@google.com>
 <CAKOZuethC7+YrRyyGciUCfhSSa9cCcAFJ8g_qEw9uh3TBbyOcg@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <CAKOZuethC7+YrRyyGciUCfhSSa9cCcAFJ8g_qEw9uh3TBbyOcg@mail.gmail.com>
User-Agent: Mutt/1.10.1 (2018-07-13)
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwBHLEg_EedbYv0nAA--.14330S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoW3ArykGr4DXr47XFWDCr4fuFg_yoW7XryxpF
	Z5Ga1YkF4UJrW8A3sF93WrtF1ft3yxJr17Xr98Wr1UZwnIqF1SgF4jgF4UuF93ur4xXw4j
	vw4jkr93uFy5taDanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUBmb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Xr0_Ar1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1l84ACjcxK6I8E
	87Iv67AKxVW8Jr0_Cr1UM28EF7xvwVC2z280aVCY1x0267AKxVW8Jr0_Cr1UM2AIxVAIcx
	kEcVAq07x20xvEncxIr21l5I8CrVACY4xI64kE6c02F40Ex7xfMcIj6xIIjxv20xvE14v2
	6r1j6r18McIj6I8E87Iv67AKxVWUJVW8JwAm72CE4IkC6x0Yz7v_Jr0_Gr1lF7xvr2IY64
	vIr41l7I0Y6sxI4wCY1x0264kExVAvwVAq07x20xylc7Ca8VAvwVCFzxkY4VCF77xAMxkI
	7II2jI8vz4vEwIxGrwCYIxAIcVC0I7IYx2IY67AKxVWUJVWUCwCYIxAIcVC0I7IYx2IY6x
	kF7I0E14v26r1j6r4UMxvI42IY6I8E87Iv67AKxVW8JVWxJwCYIxAIcVC2z280aVCY1x02
	67AKxVW8JVW8Jr1l42xK82IYc2Ij64vIr41l42xK82IY64kExVAvwVAq07x20xyl4x8a6x
	804xWl4I8I3I0E4IkC6x0Yz7v_Jr0_Gr1lx2IqxVAqx4xG67AKxVWUJVWUGwC20s026x8G
	jcxK67AKxVWUGVWUWwC2zVAF1VAY17CE14v26r4a6rW5MIIYrxkI7VAKI48JMIIF0xvE42
	xK8VAvwI8IcIk0rVWrJr0_WFyUJbIYCTnIWIevJa73UjIFyTuYvjxUPjNtDUUUU

On Sat, Nov 10, 2018 at 04:26:46AM -0800, Daniel Colascione wrote:
> On Friday, November 9, 2018, Joel Fernandes <joel@joelfernandes.org> wrote:
> 
> > On Fri, Nov 09, 2018 at 10:19:03PM +0100, Jann Horn wrote:
> > > On Fri, Nov 9, 2018 at 10:06 PM Jann Horn <jannh@google.com> wrote:
> > > > On Fri, Nov 9, 2018 at 9:46 PM Joel Fernandes (Google)
> > > > <joel@joelfernandes.org> wrote:
> > > > > Android uses ashmem for sharing memory regions. We are looking
> > forward
> > > > > to migrating all usecases of ashmem to memfd so that we can possibly
> > > > > remove the ashmem driver in the future from staging while also
> > > > > benefiting from using memfd and contributing to it. Note staging
> > drivers
> > > > > are also not ABI and generally can be removed at anytime.
> > > > >
> > > > > One of the main usecases Android has is the ability to create a
> > region
> > > > > and mmap it as writeable, then add protection against making any
> > > > > "future" writes while keeping the existing already mmap'ed
> > > > > writeable-region active.  This allows us to implement a usecase where
> > > > > receivers of the shared memory buffer can get a read-only view, while
> > > > > the sender continues to write to the buffer.
> > > > > See CursorWindow documentation in Android for more details:
> > > > > https://developer.android.com/reference/android/database/
> > CursorWindow
> > > > >
> > > > > This usecase cannot be implemented with the existing F_SEAL_WRITE
> > seal.
> > > > > To support the usecase, this patch adds a new F_SEAL_FUTURE_WRITE
> > seal
> > > > > which prevents any future mmap and write syscalls from succeeding
> > while
> > > > > keeping the existing mmap active.
> > > >
> > > > Please CC linux-api@ on patches like this. If you had done that, I
> > > > might have criticized your v1 patch instead of your v3 patch...
> > > >
> > > > > The following program shows the seal
> > > > > working in action:
> > > > [...]
> > > > > Cc: jreck@google.com
> > > > > Cc: john.stultz@linaro.org
> > > > > Cc: tkjos@google.com
> > > > > Cc: gregkh@linuxfoundation.org
> > > > > Cc: hch@infradead.org
> > > > > Reviewed-by: John Stultz <john.stultz@linaro.org>
> > > > > Signed-off-by: Joel Fernandes (Google) <joel@joelfernandes.org>
> > > > > ---
> > > > [...]
> > > > > diff --git a/mm/memfd.c b/mm/memfd.c
> > > > > index 2bb5e257080e..5ba9804e9515 100644
> > > > > --- a/mm/memfd.c
> > > > > +++ b/mm/memfd.c
> > > > [...]
> > > > > @@ -219,6 +220,25 @@ static int memfd_add_seals(struct file *file,
> > unsigned int seals)
> > > > >                 }
> > > > >         }
> > > > >
> > > > > +       if ((seals & F_SEAL_FUTURE_WRITE) &&
> > > > > +           !(*file_seals & F_SEAL_FUTURE_WRITE)) {
> > > > > +               /*
> > > > > +                * The FUTURE_WRITE seal also prevents growing and
> > shrinking
> > > > > +                * so we need them to be already set, or requested
> > now.
> > > > > +                */
> > > > > +               int test_seals = (seals | *file_seals) &
> > > > > +                                (F_SEAL_GROW | F_SEAL_SHRINK);
> > > > > +
> > > > > +               if (test_seals != (F_SEAL_GROW | F_SEAL_SHRINK)) {
> > > > > +                       error = -EINVAL;
> > > > > +                       goto unlock;
> > > > > +               }
> > > > > +
> > > > > +               spin_lock(&file->f_lock);
> > > > > +               file->f_mode &= ~(FMODE_WRITE | FMODE_PWRITE);
> > > > > +               spin_unlock(&file->f_lock);
> > > > > +       }
> > > >
> > > > So you're fiddling around with the file, but not the inode? How are
> > > > you preventing code like the following from re-opening the file as
> > > > writable?
> > > >
> > > > $ cat memfd.c
> > > > #define _GNU_SOURCE
> > > > #include <unistd.h>
> > > > #include <sys/syscall.h>
> > > > #include <printf.h>
> > > > #include <fcntl.h>
> > > > #include <err.h>
> > > > #include <stdio.h>
> > > >
> > > > int main(void) {
> > > >   int fd = syscall(__NR_memfd_create, "testfd", 0);
> > > >   if (fd == -1) err(1, "memfd");
> > > >   char path[100];
> > > >   sprintf(path, "/proc/self/fd/%d", fd);
> > > >   int fd2 = open(path, O_RDWR);
> > > >   if (fd2 == -1) err(1, "reopen");
> > > >   printf("reopen successful: %d\n", fd2);
> > > > }
> > > > $ gcc -o memfd memfd.c
> > > > $ ./memfd
> > > > reopen successful: 4
> > > > $
> > > >
> > > > That aside: I wonder whether a better API would be something that
> > > > allows you to create a new readonly file descriptor, instead of
> > > > fiddling with the writability of an existing fd.
> > >
> > > My favorite approach would be to forbid open() on memfds, hope that
> > > nobody notices the tiny API break, and then add an ioctl for "reopen
> > > this memfd with reduced permissions" - but that's just my personal
> > > opinion.
> >
> > I did something along these lines and it fixes the issue, but I forbid open
> > of memfd only when the F_SEAL_FUTURE_WRITE seal is in place. So then its
> > not
> > an ABI break because this is a brand new seal. That seems the least
> > intrusive
> > solution and it works. Do you mind testing it and I'll add your and
> > Tested-by
> > to the new fix? The patch is based on top of this series.
> >
> 
> Please don't forbid reopens entirely. You're taking a feature that works
> generally (reopens) and breaking it in one specific case (memfd write
> sealed files). The open modes are available in .open in the struct file:
> you can deny *only* opens for write instead of denying reopens generally.

Yes, as we discussed over chat already, I will implement it that way.

Also lets continue to discuss Andy's concerns he raised on the other thread.

thanks,

 - Joel
