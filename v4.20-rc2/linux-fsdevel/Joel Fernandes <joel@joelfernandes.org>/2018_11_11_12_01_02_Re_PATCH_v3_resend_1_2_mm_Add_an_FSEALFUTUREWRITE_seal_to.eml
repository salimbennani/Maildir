Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (61.164.42.155:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 11 Nov 2018 15:04:33 -0000
Received: from icoremail.net (unknown [209.85.210.179])
	by mail-app2 (Coremail) with SMTP id by_KCgD3_wu+qedbmd5yAQ--.34803S3;
	Sun, 11 Nov 2018 12:02:07 +0800 (CST)
Received: from mail-pf1-f179.google.com (unknown [209.85.210.179])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwBHwEy6qedb5fUpAA--.27986S3;
	Sun, 11 Nov 2018 12:02:02 +0800 (CST)
Received: by mail-pf1-f179.google.com with SMTP id x2-v6so2693527pfm.7
        for <xuliker@zju.edu.cn>; Sat, 10 Nov 2018 20:02:02 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:date:from:to:cc
         :subject:message-id:references:mime-version:content-disposition
         :content-transfer-encoding:in-reply-to:user-agent:sender:precedence
         :list-id;
        bh=jCouWty5W5m/JfKkWvCdpihv/UNy/RA/BTWK1SBBAzw=;
        b=JqKGOLe9VMvWve+lFuAL2HIpCfsIz8oRY3JFFvGVhokK0T1gY9gPfrH6UTcEDbaviV
         ALz0tO8BuwWwlMIcu8oV6xhKj5LFZiTwqQ8WRg9KUIuXP7pycwniX1iM9oClGMtiL+Zs
         MWxJgk/QDJ+kPk4dFdllKmM+Cen74TZuIX6fWPbVRYvuHGcI4gIMFFtP5kjPjfp7xkMA
         C2xazkL1slP3p5Wy+vpt2ml3MRXlosuC7DYGKTmrQ6KRs3k0+W98Z6M/nVtC0wzRQcZM
         KfsrkV5rR7d7UCfZeHIhjMo9AlAEqHxqZUwSMxcAURiE4cLVceBUPqFHcFmaghdI6K0G
         i1jg==
X-Gm-Message-State: AGRZ1gJVlwI9CpQr8rH9JJTbXjnalDn0ouvb+Ux/c+BVQs6Al0azz9AF
	hQX0gjFA75B+QuBZWtS7/JK0f0UJPuN3uH4uiMjiKrPennEhWFQ=
X-Received: by 2002:a63:9402:: with SMTP id m2mr12521848pge.93.1541908921965;
        Sat, 10 Nov 2018 20:02:01 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp1735828pjt;
        Sat, 10 Nov 2018 20:02:00 -0800 (PST)
X-Google-Smtp-Source: AJdET5fPYXIuhaxP4fSGm5rGgZuUMpFLxvTh2eNvblXUJorXlCQ6piqqQqFmmdkS1RK2P7muwxKF
X-Received: by 2002:a62:2ec3:: with SMTP id u186-v6mr15216590pfu.189.1541908920566;
        Sat, 10 Nov 2018 20:02:00 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1541908920; cv=none;
        d=google.com; s=arc-20160816;
        b=v5CFDqpwZXJbMVYgEgeTm79kOfvXJOWtKxqcZ+UOrosyNzA5TD65AAnPlRr4oEhwAk
         vp2U4cMLrB9iDdxhZuYqUNSgMuDCZN310rw8FMfC38mELSY0H+suWjyFuDNguYJ9+lLw
         +c6w5Zs+oKtF6pLnCXTCXzsBdnDkdq/R86IHX5HT9bq8JrOEkixfzEyS8tTXfe0mc9yl
         /i4iITz0+NnRZthc/sepMPUKtXqdEgY20GsSCAJzjHX8w+O5mT2NEzLtQha17v9hXnH/
         u+PNdOHUOYuYR1pUkww6UIIIxImZDuo7n2FKguqqNWCVjqN/lu1Ni4O4wQ0EUez9yA3C
         iMHg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:user-agent:in-reply-to
         :content-transfer-encoding:content-disposition:mime-version
         :references:message-id:subject:cc:to:from:date:dkim-signature;
        bh=jCouWty5W5m/JfKkWvCdpihv/UNy/RA/BTWK1SBBAzw=;
        b=nbOwnyYHiSd4uPa0EJIM0ZM5pwRki6XOdv4vC8IpN249/eJJ4x7d4cfCY4qntFOzoW
         1d5Zthj2dusXhzQod2nUw5CVvYS4qK4IWnyq9CJ+fiCMm1HPlax+nLCLMo3z12tI28VW
         sSccwdck7Ql9zzflL0PGSwmbPkmMhVRS9D8JACIXBCWB0+y5XMsVQXmBcEY52Hs2SJBO
         QvjHU7yXuCrKM+DY+5ll8YMeVDIcEoDBfUHx9R3Y6TX7g3WL+pt0z3Zxz60Qvb6UaV7f
         LFmfJ3oZhOg/Vhsz/KPf3uiFurloK5lvAHh1GWGC2yF89Qd4nrqTy9ZAbTSDO5HHdXXI
         R8Ew==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@joelfernandes.org header.s=google header.b=jihEKxGd;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id j2-v6si14058313pfg.10.2018.11.10.20.01.13;
        Sat, 10 Nov 2018 20:02:00 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727395AbeKKNs1 (ORCPT <rfc822;berg.ding@gmail.com> + 99 others);
        Sun, 11 Nov 2018 08:48:27 -0500
Received: from mail-pg1-f196.google.com ([209.85.215.196]:33504 "EHLO
        mail-pg1-f196.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727288AbeKKNs1 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sun, 11 Nov 2018 08:48:27 -0500
Received: by mail-pg1-f196.google.com with SMTP id q5-v6so2550784pgv.0
        for <linux-kernel@vger.kernel.org>; Sat, 10 Nov 2018 20:01:06 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=joelfernandes.org; s=google;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:content-transfer-encoding:in-reply-to
         :user-agent;
        bh=jCouWty5W5m/JfKkWvCdpihv/UNy/RA/BTWK1SBBAzw=;
        b=jihEKxGdc8C/C5syDKlDOcVvP8HvgK6WKlf3RTTr2emAZcbAa5rYpSw8Heax7zOL8T
         4/K+aU+MqL7HkdCVIfwh/LeVHAUUmkNFzMofWFZ7trTIPmYfWmd/Ksz5MdLwt/C3VptH
         upDkeNJtQGcz7CC7iEFN8vF4sf1jvYAyTKg/g=
X-Received: by 2002:a63:a35c:: with SMTP id v28mr12942825pgn.205.1541908865941;
        Sat, 10 Nov 2018 20:01:05 -0800 (PST)
Received: from localhost ([2620:0:1000:1601:3aef:314f:b9ea:889f])
        by smtp.gmail.com with ESMTPSA id r12sm6041744pgv.83.2018.11.10.20.01.03
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Sat, 10 Nov 2018 20:01:04 -0800 (PST)
Date: Sat, 10 Nov 2018 20:01:02 -0800
From: Joel Fernandes <joel@joelfernandes.org>
To: Andy Lutomirski <luto@amacapital.net>
Cc: Daniel Colascione <dancol@google.com>,
        Jann Horn <jannh@google.com>,
        kernel list <linux-kernel@vger.kernel.org>,
        John Reck <jreck@google.com>,
        John Stultz <john.stultz@linaro.org>,
        Todd Kjos <tkjos@google.com>,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        Christoph Hellwig <hch@infradead.org>,
        Al Viro <viro@zeniv.linux.org.uk>,
        Andrew Morton <akpm@linux-foundation.org>,
        Bruce Fields <bfields@fieldses.org>,
        Jeff Layton <jlayton@kernel.org>,
        Khalid Aziz <khalid.aziz@oracle.com>, Lei.Yang@windriver.com,
        linux-fsdevel@vger.kernel.org, linux-kselftest@vger.kernel.org,
        Linux-MM <linux-mm@kvack.org>, marcandre.lureau@redhat.com,
        Mike Kravetz <mike.kravetz@oracle.com>,
        Minchan Kim <minchan@kernel.org>,
        Shuah Khan <shuah@kernel.org>,
        Valdis Kletnieks <valdis.kletnieks@vt.edu>,
        Hugh Dickins <hughd@google.com>,
        Linux API <linux-api@vger.kernel.org>
Subject: Re: [PATCH v3 resend 1/2] mm: Add an F_SEAL_FUTURE_WRITE seal to
 memfd
Message-ID: <20181111040102.GA204245@google.com>
References: <CAG48ez0kQ4d566bXTFOYANDgii-stL-Qj-oyaBzvfxdV=PU-7g@mail.gmail.com>
 <20181110032005.GA22238@google.com>
 <69CE06CC-E47C-4992-848A-66EB23EE6C74@amacapital.net>
 <20181110182405.GB242356@google.com>
 <CAKOZuesQXRtthJTEr86LByH3gPpAdT-PQM0d1jqr131=zZNRKw@mail.gmail.com>
 <CAKOZueum8MtNvJ5P=W7_pRw62TdQdCgyjCwwbG1wezNboC1cxQ@mail.gmail.com>
 <20181110220933.GB96924@google.com>
 <907D942E-E321-4BD7-BED7-ACD1D96A3643@amacapital.net>
 <20181111023808.GA174670@google.com>
 <543A5181-3A16-438E-B372-97BEC48A74F8@amacapital.net>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
Content-Transfer-Encoding: 8bit
In-Reply-To: <543A5181-3A16-438E-B372-97BEC48A74F8@amacapital.net>
User-Agent: Mutt/1.10.1 (2018-07-13)
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwBHwEy6qedb5fUpAA--.27986S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoW3WF43WrW7tw45tF4ftrWUArb_yoWxZFykpr
	W5G3WYkr4kJFyUArn2yF1UJF4rtrW8Jr47Xrn8WryUZrn0vr1Sgr4rJr4UuryxZr4xGw4j
	vrWUtryxZF1UAaDanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUU9ab7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Xr0_Ar1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1l84ACjcxK6I8E
	87Iv67AKxVW0oVCq3wA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_GcCE3s1le2I262IYc4CY6c
	8Ij28IcVAaY2xG8wAqx4xG64xvF2IEw4CE5I8CrVC2j2WlYx0E2Ix0cI8IcVAFwI0_Jr0_
	Jr4lYx0Ex4A2jsIE14v26r1j6r4UMcvjeVCFs4IE7xkEbVWUJVW8JwACjcxG0xvEwIxGrw
	CjxxvEa2IrMxkF7I0Ew4C26cxK6c8Ij28IcwCY0x0Ix7I2Y4AK64vIr41lcIIF0xvE2Ix0
	cI8IcVAFwI0_Jr0_JF4lcIIF0xvE2Ix0cI8IcVCY1x0267AKxVWUJVW8JwCYIxAIcVC2z2
	80aVAFwI0_Gr1j6F4UJwCYIxAIcVC2z280aVCY1x0267AKxVW8Jr0_Cr1UMxAIw28IcxkI
	7VAKI48JMxAIw28IcVAKzI0EY4vE52x082I5MxCjnVCjjxCrMxC20s026xCaFVCjc4AY6r
	1j6r4UMI8I3I0E5I8CrVAFwI0_Jr0_Jr4lx2IqxVCjr7xvwVAFwI0_JrI_JrWlx4CE17CE
	b7AF67AKxVW8ZVWrXwCIc40Y0x0EwIxGrwCI42IY6xAIw20EY4v20xvaj40_Wr1j6rW3Jr
	UvcSsGvfC2KfnxnUUI43ZEXa7IUYd8n5UUUUU==

On Sat, Nov 10, 2018 at 07:40:10PM -0800, Andy Lutomirski wrote:
> 
> 
> > On Nov 10, 2018, at 6:38 PM, Joel Fernandes <joel@joelfernandes.org> wrote:
> > 
> >> On Sat, Nov 10, 2018 at 02:18:23PM -0800, Andy Lutomirski wrote:
> >> 
> >>>> On Nov 10, 2018, at 2:09 PM, Joel Fernandes <joel@joelfernandes.org> wrote:
> >>>> 
> >>>>> On Sat, Nov 10, 2018 at 11:11:27AM -0800, Daniel Colascione wrote:
> >>>>>> On Sat, Nov 10, 2018 at 10:45 AM, Daniel Colascione <dancol@google.com> wrote:
> >>>>>> On Sat, Nov 10, 2018 at 10:24 AM, Joel Fernandes <joel@joelfernandes.org> wrote:
> >>>>>> Thanks Andy for your thoughts, my comments below:
> >>>> [snip]
> >>>>>> I don't see it as warty, different seals will work differently. It works
> >>>>>> quite well for our usecase, and since Linux is all about solving real
> >>>>>> problems in the real work, it would be useful to have it.
> >>>>>> 
> >>>>>>> - causes a probably-observable effect in the file mode in F_GETFL.
> >>>>>> 
> >>>>>> Wouldn't that be the right thing to observe anyway?
> >>>>>> 
> >>>>>>> - causes reopen to fail.
> >>>>>> 
> >>>>>> So this concern isn't true anymore if we make reopen fail only for WRITE
> >>>>>> opens as Daniel suggested. I will make this change so that the security fix
> >>>>>> is a clean one.
> >>>>>> 
> >>>>>>> - does *not* affect other struct files that may already exist on the same inode.
> >>>>>> 
> >>>>>> TBH if you really want to block all writes to the file, then you want
> >>>>>> F_SEAL_WRITE, not this seal. The usecase we have is the fd is sent over IPC
> >>>>>> to another process and we want to prevent any new writes in the receiver
> >>>>>> side. There is no way this other receiving process can have an existing fd
> >>>>>> unless it was already sent one without the seal applied.  The proposed seal
> >>>>>> could be renamed to F_SEAL_FD_WRITE if that is preferred.
> >>>>>> 
> >>>>>>> - mysteriously malfunctions if you try to set it again on another struct
> >>>>>>> file that already exists
> >>>>>>> 
> >>>>>> 
> >>>>>> I didn't follow this, could you explain more?
> >>>>>> 
> >>>>>>> - probably is insecure when used on hugetlbfs.
> >>>>>> 
> >>>>>> The usecase is not expected to prevent all writes, indeed the usecase
> >>>>>> requires existing mmaps to continue to be able to write into the memory map.
> >>>>>> So would you call that a security issue too? The use of the seal wants to
> >>>>>> allow existing mmap regions to be continue to be written into (I mentioned
> >>>>>> more details in the cover letter).
> >>>>>> 
> >>>>>>> I see two reasonable solutions:
> >>>>>>> 
> >>>>>>> 1. Don’t fiddle with the struct file at all. Instead make the inode flag
> >>>>>>> work by itself.
> >>>>>> 
> >>>>>> Currently, the various VFS paths check only the struct file's f_mode to deny
> >>>>>> writes of already opened files. This would mean more checking in all those
> >>>>>> paths (and modification of all those paths).
> >>>>>> 
> >>>>>> Anyway going with that idea, we could
> >>>>>> 1. call deny_write_access(file) from the memfd's seal path which decrements
> >>>>>> the inode::i_writecount.
> >>>>>> 2. call get_write_access(inode) in the various VFS paths in addition to
> >>>>>> checking for FMODE_*WRITE and deny the write (incase i_writecount is negative)
> >>>>>> 
> >>>>>> That will prevent both reopens, and writes from succeeding. However I worry a
> >>>>>> bit about 2 not being too familiar with VFS internals, about what the
> >>>>>> consequences of doing that may be.
> >>>>> 
> >>>>> IMHO, modifying both the inode and the struct file separately is fine,
> >>>>> since they mean different things. In regular filesystems, it's fine to
> >>>>> have a read-write open file description for a file whose inode grants
> >>>>> write permission to nobody. Speaking of which: is fchmod enough to
> >>>>> prevent this attack?
> >>>> 
> >>>> Well, yes and no. fchmod does prevent reopening the file RW, but
> >>>> anyone with permissions (owner, CAP_FOWNER) can just fchmod it back. A
> >>>> seal is supposed to be irrevocable, so fchmod-as-inode-seal probably
> >>>> isn't sufficient by itself. While it might be good enough for Android
> >>>> (in the sense that it'll prevent RW-reopens from other security
> >>>> contexts to which we send an open memfd file), it's still conceptually
> >>>> ugly, IMHO. Let's go with the original approach of just tweaking the
> >>>> inode so that open-for-write is permanently blocked.
> >>> 
> >>> Agreed with the idea of modifying both file and inode flags. I was thinking
> >>> modifying i_mode may do the trick but as you pointed it probably could be
> >>> reverted by chmod or some other attribute setting calls.
> >>> 
> >>> OTOH, I don't think deny_write_access(file) can be reverted from any
> >>> user-facing path so we could do that from the seal to prevent the future
> >>> opens in write mode. I'll double check and test that out tomorrow.
> >>> 
> >>> 
> >> 
> >> This seems considerably more complicated and more fragile than needed. Just
> >> add a new F_SEAL_WRITE_FUTURE.  Grep for F_SEAL_WRITE and make the _FUTURE
> >> variant work exactly like it with two exceptions:
> >> 
> >> - shmem_mmap and maybe its hugetlbfs equivalent should check for it and act
> >> accordingly.
> > 
> > There's more to it than that, we also need to block future writes through
> > write syscall, so we have to hook into the write path too once the seal is
> > set, not just the mmap. That means we have to add code in mm/shmem.c to do
> > that in all those handlers, to check for the seal (and hope we didn't miss a
> > file_operations handler). Is that what you are proposing?
> 
> The existing code already does this. That’s why I suggested grepping :)

Ahh sorry I see your point now. Ok let me try this approach. Thank you!
Probably we can make this work this way and it is sufficient.

> > 
> > Also, it means we have to keep CONFIG_TMPFS enabled so that the
> > shmem_file_operations write handlers like write_iter are hooked up. Currently
> > memfd works even with !CONFIG_TMPFS.
> 
> If so, that sounds like it may already be a bug.

Actually, its not a bug. If CONFIG_TMPFS is disabled, then IIRC write syscall
will be prevented anyway and then the mmap is the only way. I'll double check
that once I work on this idea.

> > 
> >> - add_seals won’t need the wait_for_pins and mapping_deny_write logic.
> >> 
> >> That really should be all that’s needed.
> > 
> > It seems a fair idea what you're saying. But I don't see how its less
> > complex.. IMO its far more simple to have VFS do the denial of the operations
> > based on the flags of its datastructures.. and if it works (which I will test
> > to be sure it will), then we should be good.
> 
> I agree it’s complicated, but the code is already written.  You should just
> need to adjust some masks.
> 

Right.

> > 
> > Btw by any chance, are you also coming by LPC conference next week?
> > 
> 
> No.  I’d like to, but I can’t make the trip this year.

Ok, no worries.

thanks,

- Joel
