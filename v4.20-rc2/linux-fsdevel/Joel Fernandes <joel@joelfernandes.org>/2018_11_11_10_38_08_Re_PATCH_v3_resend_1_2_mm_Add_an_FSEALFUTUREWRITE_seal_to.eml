Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (61.164.42.155:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 11 Nov 2018 15:04:29 -0000
Received: from icoremail.net (unknown [209.85.210.170])
	by mail-app2 (Coremail) with SMTP id by_KCgD3__tLludb2IVyAQ--.34998S3;
	Sun, 11 Nov 2018 10:39:07 +0800 (CST)
Received: from mail-pf1-f170.google.com (unknown [209.85.210.170])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwDXrztHludbQ8ApAA--.13438S3;
	Sun, 11 Nov 2018 10:39:04 +0800 (CST)
Received: by mail-pf1-f170.google.com with SMTP id b81-v6so2154863pfe.11
        for <xuliker@zju.edu.cn>; Sat, 10 Nov 2018 18:39:04 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:date:from:to:cc
         :subject:message-id:references:mime-version:content-disposition
         :content-transfer-encoding:in-reply-to:user-agent:sender:precedence
         :list-id;
        bh=TZaZWBIUTjVinJfb4hDxRhUezIBaF3z6M2UzY3FVcdI=;
        b=nPi9pAdZi3PcbkHqMQfrpmLFw3VNqGfT0CZehxIk2fA30l6oR05hTtRG8nsER1FvrL
         fElxKfaBIwuJJOlP3K8QW4Rd/ELBFw/Zz9uCFCDpByHlp7BTB98K9PFOqkZOZI0406Hs
         8uwjnVuarA5/eQm2wlav+XOJp9OIX0tU4YEtXq9LwWjJBPuZHoQAl8wQW/3AEgrrDF4/
         qbaEVjghj5nLWe/crRBueyHp3+/UOyuEE+24MY4QBhuc85jQviNWCC0NNSAn7eyynUNz
         jubHg+PqUh2mzEt9IbC1VtF1oX1JFWLzLp/x/+qJTMdlZMja0KSLKkoRSoBRONN6WqRN
         xABg==
X-Gm-Message-State: AGRZ1gLDhNVsF/aZGU8+Yx5DYOJxHgb5S0bS3Y5d2wJvkydkTcRr52TZ
	pPtVJWBY96UfJW63Vfw+ZcH9sWCIuRod2Fm5GGCoBaj9B00CBJ0=
X-Received: by 2002:a62:5e83:: with SMTP id s125-v6mr14824136pfb.232.1541903943213;
        Sat, 10 Nov 2018 18:39:03 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp1686218pjt;
        Sat, 10 Nov 2018 18:39:01 -0800 (PST)
X-Google-Smtp-Source: AJdET5cA2AvP0LBAG/66lJqO0wTNYwmQtrgJ6BW3EG4srJHng2eZXD86vKMapLbHWolfHSMOK5eU
X-Received: by 2002:a17:902:2bc5:: with SMTP id l63-v6mr14880130plb.241.1541903941944;
        Sat, 10 Nov 2018 18:39:01 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1541903941; cv=none;
        d=google.com; s=arc-20160816;
        b=c3J+yJJImQ8X+5Gc+ggztuHpjfOEievJjqltFr/gmU5TjAVB1Aen7T388C5SW+QhTs
         +SP40WHoEzhSUp/HOxJDVraTXUrFOpbjetxptW3b20OXmdlbZ3S416iPdGNE9Ey84Zx3
         wi/YKaZrfESYv02tsvxfZxxrdOXKYbj4dYQewSz8Hy2UsSusQoVqdewfirJSR0z755//
         /iE4EeX4q62jbTYvUH9NXk7mJJMCkXmcj9ahg3+Upuw6zKqWebzdo37I+Wh/vZq6mooO
         GRoNFH70sR4VQowQWIqi8nzpsbmN1KDc5RC5QoUw5dRO0WJZyh9GPpwqGqn4dr1jwBqO
         IhvA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:user-agent:in-reply-to
         :content-transfer-encoding:content-disposition:mime-version
         :references:message-id:subject:cc:to:from:date:dkim-signature;
        bh=TZaZWBIUTjVinJfb4hDxRhUezIBaF3z6M2UzY3FVcdI=;
        b=UQ2Ag7dpi6sjLkBbHmWPtCCwmv0hlXBXR6s6fI1iC4MyM5jGSB8YcsUCJr///jU+Md
         XnQNRRlj8WHTQ72R2c0kPMIiavzdWk/ktSeQ2nl/E3gxUgsNL9jTu2MFxrvBWdDNrFuD
         8sesS+75v6snhJsHlUfRKQCyVkTOc8N5sMuzloq7DDLNmlhwS9RpF8ewBGi4gcUKdZGK
         BVumobB8t6zZxLV/WMWsNw2HsrVHe42Por5en6p5CzxSftnUH2jyk0er7YCvrOvUHZnN
         I0P255esm0KDclstKB/aAsp+XGxcJI1lEhs89l6MQLCgHS9Ulws+awSgLCCm2XRxWNZu
         fcjA==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@joelfernandes.org header.s=google header.b=T2mcTrKi;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id p12si1956426pgj.56.2018.11.10.18.38.46;
        Sat, 10 Nov 2018 18:39:01 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727405AbeKKMZT (ORCPT <rfc822;tu.k.phung@gmail.com>
        + 99 others); Sun, 11 Nov 2018 07:25:19 -0500
Received: from mail-pf1-f196.google.com ([209.85.210.196]:45886 "EHLO
        mail-pf1-f196.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727371AbeKKMZS (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sun, 11 Nov 2018 07:25:18 -0500
Received: by mail-pf1-f196.google.com with SMTP id p17-v6so2637242pfj.12
        for <linux-kernel@vger.kernel.org>; Sat, 10 Nov 2018 18:38:10 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=joelfernandes.org; s=google;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:content-transfer-encoding:in-reply-to
         :user-agent;
        bh=TZaZWBIUTjVinJfb4hDxRhUezIBaF3z6M2UzY3FVcdI=;
        b=T2mcTrKissSD5Z1qWZEzCdOZ7+VnEqZZ6oCNDtmYWMFgACJM0X99pWEPEWc4MdShPn
         z3HUs423N04OufowvF2MeYnIkt/Y1O34D95+MaxgCHXiwj69PhxLL7iBxUeqTM8NHrER
         1nEQsVMh1Kh2BERcBBQczgXAsLG6t+YJPFB/o=
X-Received: by 2002:a62:5343:: with SMTP id h64-v6mr14929897pfb.226.1541903890076;
        Sat, 10 Nov 2018 18:38:10 -0800 (PST)
Received: from localhost ([2620:0:1000:1601:3aef:314f:b9ea:889f])
        by smtp.gmail.com with ESMTPSA id 124-v6sm26341356pfb.132.2018.11.10.18.38.08
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Sat, 10 Nov 2018 18:38:09 -0800 (PST)
Date: Sat, 10 Nov 2018 18:38:08 -0800
From: Joel Fernandes <joel@joelfernandes.org>
To: Andy Lutomirski <luto@amacapital.net>
Cc: Daniel Colascione <dancol@google.com>,
        Jann Horn <jannh@google.com>,
        kernel list <linux-kernel@vger.kernel.org>,
        John Reck <jreck@google.com>,
        John Stultz <john.stultz@linaro.org>,
        Todd Kjos <tkjos@google.com>,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        Christoph Hellwig <hch@infradead.org>,
        Al Viro <viro@zeniv.linux.org.uk>,
        Andrew Morton <akpm@linux-foundation.org>,
        Bruce Fields <bfields@fieldses.org>,
        Jeff Layton <jlayton@kernel.org>,
        Khalid Aziz <khalid.aziz@oracle.com>, Lei.Yang@windriver.com,
        linux-fsdevel@vger.kernel.org, linux-kselftest@vger.kernel.org,
        Linux-MM <linux-mm@kvack.org>, marcandre.lureau@redhat.com,
        Mike Kravetz <mike.kravetz@oracle.com>,
        Minchan Kim <minchan@kernel.org>,
        Shuah Khan <shuah@kernel.org>,
        Valdis Kletnieks <valdis.kletnieks@vt.edu>,
        Hugh Dickins <hughd@google.com>,
        Linux API <linux-api@vger.kernel.org>
Subject: Re: [PATCH v3 resend 1/2] mm: Add an F_SEAL_FUTURE_WRITE seal to
 memfd
Message-ID: <20181111023808.GA174670@google.com>
References: <20181108041537.39694-1-joel@joelfernandes.org>
 <CAG48ez1h=v-JYnDw81HaYJzOfrNhwYksxmc2r=cJvdQVgYM+NA@mail.gmail.com>
 <CAG48ez0kQ4d566bXTFOYANDgii-stL-Qj-oyaBzvfxdV=PU-7g@mail.gmail.com>
 <20181110032005.GA22238@google.com>
 <69CE06CC-E47C-4992-848A-66EB23EE6C74@amacapital.net>
 <20181110182405.GB242356@google.com>
 <CAKOZuesQXRtthJTEr86LByH3gPpAdT-PQM0d1jqr131=zZNRKw@mail.gmail.com>
 <CAKOZueum8MtNvJ5P=W7_pRw62TdQdCgyjCwwbG1wezNboC1cxQ@mail.gmail.com>
 <20181110220933.GB96924@google.com>
 <907D942E-E321-4BD7-BED7-ACD1D96A3643@amacapital.net>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
Content-Transfer-Encoding: 8bit
In-Reply-To: <907D942E-E321-4BD7-BED7-ACD1D96A3643@amacapital.net>
User-Agent: Mutt/1.10.1 (2018-07-13)
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwDXrztHludbQ8ApAA--.13438S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoWxKrWxXw4DGw18ZF17XF17Awb_yoW7uw1rpF
	W5Ga1Ykr4kJFWUAr92yF18XFWFyrW8Jr43Wrn0gryUZwn0vr1SgF4rJr4j9FyxZrs7Gw4j
	vrWjyryxZFyjvaDanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUPab7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Gr0_Xr1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1l84ACjcxK6I8E
	87Iv67AKxVW0oVCq3wA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_GcCE3s1le2I262IYc4CY6c
	8Ij28IcVAaY2xG8wAqx4xG64xvF2IEw4CE5I8CrVC2j2WlYx0E2Ix0cI8IcVAFwI0_Jr0_
	Jr4lYx0Ex4A2jsIE14v26r4j6F4UMcvjeVCFs4IE7xkEbVWUJVW8JwACjcxG0xvEwIxGrw
	CjxxvEa2IrMxkF7I0Ew4C26cxK6c8Ij28IcwCY1Ik26cxK6xAEc7vF6xCjj44lc2xSY4AK
	6IIF6r4UMxkI7II2jI8vz4vEwIxGrwCYIxAIcVC0I7IYx2IY67AKxVWUJVWUCwCYIxAIcV
	C0I7IYx2IY6xkF7I0E14v26r1j6r4UMxvI42IY6I8E87Iv67AKxVW8Jr0_Cr1UMxvI42IY
	6I8E87Iv6xkF7I0E14v26r4UJVWxJr1l42xK82IYc2Ij64vIr41l42xK82IY64kExVAvwV
	Aq07x20xyl4x8a6x804xWl4I8I3I0E4IkC6x0Yz7v_Jr0_Gr1lx2IqxVAqx4xG67AKxVWU
	JVWUGwC20s026x8GjcxK67AKxVWUGVWUWwC2zVAF1VAY17CE14v26r4a6rW5MIIYrxkI7V
	AKI48JMIIF0xvE42xK8VAvwI8IcIk0rVWrJr0_WFyUJbIYCTnIWIevJa73UjIFyTuYvjxU
	HiZcUUUUU

On Sat, Nov 10, 2018 at 02:18:23PM -0800, Andy Lutomirski wrote:
> 
> > On Nov 10, 2018, at 2:09 PM, Joel Fernandes <joel@joelfernandes.org> wrote:
> > 
> >> On Sat, Nov 10, 2018 at 11:11:27AM -0800, Daniel Colascione wrote:
> >>> On Sat, Nov 10, 2018 at 10:45 AM, Daniel Colascione <dancol@google.com> wrote:
> >>>> On Sat, Nov 10, 2018 at 10:24 AM, Joel Fernandes <joel@joelfernandes.org> wrote:
> >>>> Thanks Andy for your thoughts, my comments below:
> >> [snip]
> >>>> I don't see it as warty, different seals will work differently. It works
> >>>> quite well for our usecase, and since Linux is all about solving real
> >>>> problems in the real work, it would be useful to have it.
> >>>> 
> >>>>> - causes a probably-observable effect in the file mode in F_GETFL.
> >>>> 
> >>>> Wouldn't that be the right thing to observe anyway?
> >>>> 
> >>>>> - causes reopen to fail.
> >>>> 
> >>>> So this concern isn't true anymore if we make reopen fail only for WRITE
> >>>> opens as Daniel suggested. I will make this change so that the security fix
> >>>> is a clean one.
> >>>> 
> >>>>> - does *not* affect other struct files that may already exist on the same inode.
> >>>> 
> >>>> TBH if you really want to block all writes to the file, then you want
> >>>> F_SEAL_WRITE, not this seal. The usecase we have is the fd is sent over IPC
> >>>> to another process and we want to prevent any new writes in the receiver
> >>>> side. There is no way this other receiving process can have an existing fd
> >>>> unless it was already sent one without the seal applied.  The proposed seal
> >>>> could be renamed to F_SEAL_FD_WRITE if that is preferred.
> >>>> 
> >>>>> - mysteriously malfunctions if you try to set it again on another struct
> >>>>> file that already exists
> >>>>> 
> >>>> 
> >>>> I didn't follow this, could you explain more?
> >>>> 
> >>>>> - probably is insecure when used on hugetlbfs.
> >>>> 
> >>>> The usecase is not expected to prevent all writes, indeed the usecase
> >>>> requires existing mmaps to continue to be able to write into the memory map.
> >>>> So would you call that a security issue too? The use of the seal wants to
> >>>> allow existing mmap regions to be continue to be written into (I mentioned
> >>>> more details in the cover letter).
> >>>> 
> >>>>> I see two reasonable solutions:
> >>>>> 
> >>>>> 1. Don’t fiddle with the struct file at all. Instead make the inode flag
> >>>>> work by itself.
> >>>> 
> >>>> Currently, the various VFS paths check only the struct file's f_mode to deny
> >>>> writes of already opened files. This would mean more checking in all those
> >>>> paths (and modification of all those paths).
> >>>> 
> >>>> Anyway going with that idea, we could
> >>>> 1. call deny_write_access(file) from the memfd's seal path which decrements
> >>>> the inode::i_writecount.
> >>>> 2. call get_write_access(inode) in the various VFS paths in addition to
> >>>> checking for FMODE_*WRITE and deny the write (incase i_writecount is negative)
> >>>> 
> >>>> That will prevent both reopens, and writes from succeeding. However I worry a
> >>>> bit about 2 not being too familiar with VFS internals, about what the
> >>>> consequences of doing that may be.
> >>> 
> >>> IMHO, modifying both the inode and the struct file separately is fine,
> >>> since they mean different things. In regular filesystems, it's fine to
> >>> have a read-write open file description for a file whose inode grants
> >>> write permission to nobody. Speaking of which: is fchmod enough to
> >>> prevent this attack?
> >> 
> >> Well, yes and no. fchmod does prevent reopening the file RW, but
> >> anyone with permissions (owner, CAP_FOWNER) can just fchmod it back. A
> >> seal is supposed to be irrevocable, so fchmod-as-inode-seal probably
> >> isn't sufficient by itself. While it might be good enough for Android
> >> (in the sense that it'll prevent RW-reopens from other security
> >> contexts to which we send an open memfd file), it's still conceptually
> >> ugly, IMHO. Let's go with the original approach of just tweaking the
> >> inode so that open-for-write is permanently blocked.
> > 
> > Agreed with the idea of modifying both file and inode flags. I was thinking
> > modifying i_mode may do the trick but as you pointed it probably could be
> > reverted by chmod or some other attribute setting calls.
> > 
> > OTOH, I don't think deny_write_access(file) can be reverted from any
> > user-facing path so we could do that from the seal to prevent the future
> > opens in write mode. I'll double check and test that out tomorrow.
> > 
> > 
> 
> This seems considerably more complicated and more fragile than needed. Just
> add a new F_SEAL_WRITE_FUTURE.  Grep for F_SEAL_WRITE and make the _FUTURE
> variant work exactly like it with two exceptions:
> 
> - shmem_mmap and maybe its hugetlbfs equivalent should check for it and act
> accordingly.

There's more to it than that, we also need to block future writes through
write syscall, so we have to hook into the write path too once the seal is
set, not just the mmap. That means we have to add code in mm/shmem.c to do
that in all those handlers, to check for the seal (and hope we didn't miss a
file_operations handler). Is that what you are proposing?

Also, it means we have to keep CONFIG_TMPFS enabled so that the
shmem_file_operations write handlers like write_iter are hooked up. Currently
memfd works even with !CONFIG_TMPFS.

> - add_seals won’t need the wait_for_pins and mapping_deny_write logic.
> 
> That really should be all that’s needed.

It seems a fair idea what you're saying. But I don't see how its less
complex.. IMO its far more simple to have VFS do the denial of the operations
based on the flags of its datastructures.. and if it works (which I will test
to be sure it will), then we should be good.

Btw by any chance, are you also coming by LPC conference next week?

thanks!

 - Joel
