Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (61.164.42.155:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 11 Nov 2018 15:04:39 -0000
Received: from icoremail.net (unknown [209.85.214.181])
	by mail-app2 (Coremail) with SMTP id by_KCgCn3_jzt+dbFyFzAQ--.35039S3;
	Sun, 11 Nov 2018 13:02:44 +0800 (CST)
Received: from mail-pl1-f181.google.com (unknown [209.85.214.181])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwAXAEzyt+dbaB4qAA--.84S3;
	Sun, 11 Nov 2018 13:02:42 +0800 (CST)
Received: by mail-pl1-f181.google.com with SMTP id g59-v6so2723197plb.10
        for <xuliker@zju.edu.cn>; Sat, 10 Nov 2018 21:02:42 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:from:to:cc:subject
         :date:message-id:in-reply-to:references:sender:precedence:list-id;
        bh=r42JAcC4xD23EwVm77cfqI4lnpyXT4DHtW2OTOkNuyQ=;
        b=gYGh+UuYtgxjOqoVw5Pt5Bn01pIgWswMfKlFWck883ntlp6n47oqoqqnVePWwvNH2i
         m9kCEHNJUZJA8J7eEo9y9j9cazEaP3ick6bDP/t4bVi4qEMqxkW1NhKK8bAc1S3vtasO
         +BPWWXL/TPpSjQLzQ1RnlOuAi2dfAPMoFLsXduIkf5XN+uWRr+vuy4QWOrBx7NmqZAMK
         UrJZusNH847GtYv0dvi3GhubX97QsUkF0HGll4Eeiu+JGDlht/Xa88e/X1Acepl5Adb9
         Zh73wvrdOm3fnTa/1DyCZZB/KIOpIHUTyfojajEY3BV/YWSitoAv57R9p6F4Vg3OUpHH
         QQ2g==
X-Gm-Message-State: AGRZ1gIYv1vYnSHF6RCYp6FjGd+wLmKJm4TLTvNBTVqL4VBC3+Su7jMk
	K1Gv9gFx1gtWOTmtpTXmW4FAPK500ejiCLD77Q3Zbn0jp9XYynU=
X-Received: by 2002:a17:902:50e3:: with SMTP id c32-v6mr14997939plj.39.1541912561826;
        Sat, 10 Nov 2018 21:02:41 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp1769239pjt;
        Sat, 10 Nov 2018 21:02:41 -0800 (PST)
X-Google-Smtp-Source: AJdET5drgG57V5Vaw1HVlq2lwLN+5hG5YB5Aqhjnr00g63KZG+Ska0jYUnCkMIo4VjCLwEHznbLO
X-Received: by 2002:a63:8742:: with SMTP id i63mr13067222pge.298.1541912560978;
        Sat, 10 Nov 2018 21:02:40 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1541912560; cv=none;
        d=google.com; s=arc-20160816;
        b=b9QcrLN/dvXirnrV1y+QzNm/osGAACdktWmD6K8wssUwZ98rC8XdAJZOVJ0NFvUN+I
         BYeSpwocOn244lR2vX86fdqruPW4cA9Jv1s1jxOkQw3CZuc/0JuxmOgiW+qlhJCK+RTG
         576k4CL4Y7+L9R/RcdBmHs9ulKeYtD6mBacrZy4ZZ4AoxQsysv35I6OQPeAk9OGyUwDp
         O1H+ZTgKAAAW/onEE3Yd7jKaReVU/4H0MCJFsOyQKnDXMtNPso8Pvk2qbvy9jHScQZcS
         Cw8egpEIoNKo0NNxczfcKPaSCbg8snciVfKS+A94HH0uofbJibQ4ZU5plDjv0F2KcUoK
         neMQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:references:in-reply-to:message-id:date
         :subject:cc:to:from:dkim-signature;
        bh=r42JAcC4xD23EwVm77cfqI4lnpyXT4DHtW2OTOkNuyQ=;
        b=Qfs8QT6dMdmBnjV2oWl5kM6SeeGE7AFZFl0CPdqCz8ub795byKjO6MonCIOfkJ04i+
         bdcxpGLG0CEWxUnVwVj5aoGNOwpANL9jg7VR8UkcTHuhqgdf3M9l5ydGzFQ/1ek4WVWK
         +YUrjqLX5m04daMDZwkx/rflVctnIl867wXOIinvuxEVVgr3jBp2eXbQXR5B0WBwJMeR
         7iy0r3JHfZUQ7uaI51bbEqaAFhrx6Q76peMrPiT5eizoTn3zj+fvpeso29v88q+gLkAr
         ESxvWzQpK6jQSUHMMdJxUPYpVqs6dRhzMfG9BRIiv5DdV/sDPqxvgBUm92dGg6LPxgg9
         1ebw==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@linaro.org header.s=google header.b=Q3mp1ml1;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;
       dmarc=pass (p=NONE sp=NONE dis=NONE) header.from=linaro.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id f8-v6si14747739pln.368.2018.11.10.21.02.25;
        Sat, 10 Nov 2018 21:02:40 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727604AbeKKOrz (ORCPT <rfc822;berg.ding@gmail.com> + 99 others);
        Sun, 11 Nov 2018 09:47:55 -0500
Received: from mail-wr1-f67.google.com ([209.85.221.67]:34333 "EHLO
        mail-wr1-f67.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727184AbeKKOrz (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sun, 11 Nov 2018 09:47:55 -0500
Received: by mail-wr1-f67.google.com with SMTP id j26-v6so5850046wre.1
        for <linux-kernel@vger.kernel.org>; Sat, 10 Nov 2018 21:00:26 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=from:to:cc:subject:date:message-id:in-reply-to:references;
        bh=r42JAcC4xD23EwVm77cfqI4lnpyXT4DHtW2OTOkNuyQ=;
        b=Q3mp1ml16u22ZjAMIb4zMwp256Th9H6BpIP4qB3YeOb/Mfi2BNQ176XUbKAr8Il5K/
         S+kS0uAZM8212ozC+aBjVVRdM2OdWXq5wzXFGXzCYPNknA6E/16eT+Gv/TVqYt/iz/hl
         muYb2k/CcP6Tad/U+AHQsBszd0NXTvL3ona8A=
X-Received: by 2002:adf:f24d:: with SMTP id b13-v6mr12334822wrp.142.1541912425654;
        Sat, 10 Nov 2018 21:00:25 -0800 (PST)
Received: from localhost.localdomain ([209.250.228.18])
        by smtp.gmail.com with ESMTPSA id t187-v6sm4463802wmt.45.2018.11.10.21.00.21
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-SHA bits=128/128);
        Sat, 10 Nov 2018 21:00:24 -0800 (PST)
From: Leo Yan <leo.yan@linaro.org>
To: Arnaldo Carvalho de Melo <acme@kernel.org>,
        Mathieu Poirier <mathieu.poirier@linaro.org>,
        Alexander Shishkin <alexander.shishkin@linux.intel.com>,
        Jiri Olsa <jolsa@redhat.com>,
        Namhyung Kim <namhyung@kernel.org>,
        linux-arm-kernel@lists.infradead.org, linux-kernel@vger.kernel.org,
        Mike Leach <mike.leach@linaro.org>,
        Robert Walker <robert.walker@arm.com>,
        Al Grant <Al.Grant@arm.com>,
        Coresight ML <coresight@lists.linaro.org>
Cc: Leo Yan <leo.yan@linaro.org>
Subject: [PATCH v1 4/5] perf cs-etm: Generate branch sample for exception packet
Date: Sun, 11 Nov 2018 12:59:42 +0800
Message-Id: <1541912383-19915-5-git-send-email-leo.yan@linaro.org>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1541912383-19915-1-git-send-email-leo.yan@linaro.org>
References: <1541912383-19915-1-git-send-email-leo.yan@linaro.org>
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwAXAEzyt+dbaB4qAA--.84S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoW3Ww4rGr45CFW3GFyDKw4rXwb_yoWxAFW7pF
	s0krW3Ja1jyF1Fvwn5Jr4v9ryaqrZ5XFyxW342qw15t39xJr12gF18t3Z8CFyxCFyjq3y5
	AF4DZ3WxWr4UCFDanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUB2b7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Xr0_Ar1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1l84ACjcxK6I8E
	87Iv67AKxVW0oVCq3wA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_GcCE3s1le2I262IYc4CY6c
	8Ij28IcVAaY2xG8wAqx4xG64xvF2IEw4CE5I8CrVC2j2WlYx0E2Ix0cI8IcVAFwI0_JrI_
	JrylYx0Ex4A2jsIE14v26r4j6F4UMcvjeVCFs4IE7xkEbVWUJVW8JwACjcxG0xvY0x0EwI
	xGrwCjxxvEa2IrMxkF7I0Ew4C26cxK6c8Ij28IcwCY02Avz4vEIxC_GrWlc2IjII80xcxE
	wVAKI48JMxvI42IY6xIIjxv20xvE14v26r1j6r1xMxvI42IY6xIIjxv20xvEc7CjxVAFwI
	0_Jr0_Gr1lcIIF0xvEx4A2jsIE14v26r4UJVWxJr1lcIIF0xvEx4A2jsIEc7CjxVAFwI0_
	Gr1j6F4UJwCF04k20xvY0x0EwIxGrwCF04k20xvEw4C26cxK6c8Ij28IcwCF72vE77IF4w
	CFx2IqxVCFs4IE7xkEbVWUJVW8JwC20s026c02F40E14v26r1j6r18MI8I3I0E7480Y4vE
	14v26r106r1rMI8E67AF67kF1VAFwI0_Jw0_GFylIxkGc2Ij64vIr41lIxAIcVCF04k26c
	xKx2IYs7xG6Fyj6rWUJbIYCTnIWIevJa73UjIFyTuYvjxUmIzuDUUUU

The exception packet appears as one element with 'elem_type' ==
OCSD_GEN_TRC_ELEM_EXCEPTION or OCSD_GEN_TRC_ELEM_EXCEPTION_RET,
which present for exception entry and exit respectively.  The decoder
set packet fields 'packet->exc' and 'packet->exc_ret' to indicate the
exception packets; but exception packets don't have dedicated sample
type and shares the same sample type CS_ETM_RANGE with normal
instruction packets.

As result, the exception packets are taken as normal instruction packets
and this introduces confusion to mix different packet types.
Furthermore, these instruction range packets will be processed for
branch sample only when 'packet->last_instr_taken_branch' is true,
otherwise they will be omitted, this can introduce mess for exception
and exception returning due we don't have complete address range info
for context switching.

To process exception packets properly, this patch introduce two new
sample type: CS_ETM_EXCEPTION and CS_ETM_EXCEPTION_RET; for these two
kind packets, they will be handled by cs_etm__exception().  The func
cs_etm__exception() forces to set previous CS_ETM_RANGE packet flag
'prev_packet->last_instr_taken_branch' to true, this matches well with
the program flow when the exception is trapped from user space to kernel
space, no matter if the most recent flow has branch taken or not; this
is also safe for returning to user space after exception handling.

After exception packets have their own sample type, the packet fields
'packet->exc' and 'packet->exc_ret' aren't needed anymore, so remove
them.

Signed-off-by: Leo Yan <leo.yan@linaro.org>
---
 tools/perf/util/cs-etm-decoder/cs-etm-decoder.c | 26 +++++++++++++++++------
 tools/perf/util/cs-etm-decoder/cs-etm-decoder.h |  4 ++--
 tools/perf/util/cs-etm.c                        | 28 +++++++++++++++++++++++++
 3 files changed, 50 insertions(+), 8 deletions(-)

diff --git a/tools/perf/util/cs-etm-decoder/cs-etm-decoder.c b/tools/perf/util/cs-etm-decoder/cs-etm-decoder.c
index 9d52727..b8cb7a3e 100644
--- a/tools/perf/util/cs-etm-decoder/cs-etm-decoder.c
+++ b/tools/perf/util/cs-etm-decoder/cs-etm-decoder.c
@@ -269,8 +269,6 @@ static void cs_etm_decoder__clear_buffer(struct cs_etm_decoder *decoder)
 		decoder->packet_buffer[i].instr_count = 0;
 		decoder->packet_buffer[i].last_instr_taken_branch = false;
 		decoder->packet_buffer[i].last_instr_size = 0;
-		decoder->packet_buffer[i].exc = false;
-		decoder->packet_buffer[i].exc_ret = false;
 		decoder->packet_buffer[i].cpu = INT_MIN;
 	}
 }
@@ -298,8 +296,6 @@ cs_etm_decoder__buffer_packet(struct cs_etm_decoder *decoder,
 
 	decoder->packet_buffer[et].sample_type = sample_type;
 	decoder->packet_buffer[et].isa = CS_ETM_ISA_UNKNOWN;
-	decoder->packet_buffer[et].exc = false;
-	decoder->packet_buffer[et].exc_ret = false;
 	decoder->packet_buffer[et].cpu = *((int *)inode->priv);
 	decoder->packet_buffer[et].start_addr = CS_ETM_INVAL_ADDR;
 	decoder->packet_buffer[et].end_addr = CS_ETM_INVAL_ADDR;
@@ -384,6 +380,22 @@ cs_etm_decoder__buffer_trace_on(struct cs_etm_decoder *decoder,
 					     CS_ETM_TRACE_ON);
 }
 
+static ocsd_datapath_resp_t
+cs_etm_decoder__buffer_exception(struct cs_etm_decoder *decoder,
+				 const uint8_t trace_chan_id)
+{
+	return cs_etm_decoder__buffer_packet(decoder, trace_chan_id,
+					     CS_ETM_EXCEPTION);
+}
+
+static ocsd_datapath_resp_t
+cs_etm_decoder__buffer_exception_ret(struct cs_etm_decoder *decoder,
+				     const uint8_t trace_chan_id)
+{
+	return cs_etm_decoder__buffer_packet(decoder, trace_chan_id,
+					     CS_ETM_EXCEPTION_RET);
+}
+
 static ocsd_datapath_resp_t cs_etm_decoder__gen_trace_elem_printer(
 				const void *context,
 				const ocsd_trc_index_t indx __maybe_unused,
@@ -411,10 +423,12 @@ static ocsd_datapath_resp_t cs_etm_decoder__gen_trace_elem_printer(
 						    trace_chan_id);
 		break;
 	case OCSD_GEN_TRC_ELEM_EXCEPTION:
-		decoder->packet_buffer[decoder->tail].exc = true;
+		resp = cs_etm_decoder__buffer_exception(decoder,
+							trace_chan_id);
 		break;
 	case OCSD_GEN_TRC_ELEM_EXCEPTION_RET:
-		decoder->packet_buffer[decoder->tail].exc_ret = true;
+		resp = cs_etm_decoder__buffer_exception_ret(decoder,
+							    trace_chan_id);
 		break;
 	case OCSD_GEN_TRC_ELEM_PE_CONTEXT:
 	case OCSD_GEN_TRC_ELEM_EO_TRACE:
diff --git a/tools/perf/util/cs-etm-decoder/cs-etm-decoder.h b/tools/perf/util/cs-etm-decoder/cs-etm-decoder.h
index a38c97c..0d1c18d 100644
--- a/tools/perf/util/cs-etm-decoder/cs-etm-decoder.h
+++ b/tools/perf/util/cs-etm-decoder/cs-etm-decoder.h
@@ -27,6 +27,8 @@ enum cs_etm_sample_type {
 	CS_ETM_RANGE		= 1 << 0,
 	CS_ETM_TRACE_ON		= 1 << 1,
 	CS_ETM_TRACE_OFF	= 1 << 2,
+	CS_ETM_EXCEPTION	= 1 << 3,
+	CS_ETM_EXCEPTION_RET	= 1 << 4,
 };
 
 enum cs_etm_isa {
@@ -44,8 +46,6 @@ struct cs_etm_packet {
 	u32 instr_count;
 	u8 last_instr_taken_branch;
 	u8 last_instr_size;
-	u8 exc;
-	u8 exc_ret;
 	int cpu;
 };
 
diff --git a/tools/perf/util/cs-etm.c b/tools/perf/util/cs-etm.c
index 2a0cef9..455f132 100644
--- a/tools/perf/util/cs-etm.c
+++ b/tools/perf/util/cs-etm.c
@@ -961,6 +961,25 @@ static int cs_etm__sample(struct cs_etm_queue *etmq)
 	return 0;
 }
 
+static int cs_etm__exception(struct cs_etm_queue *etmq)
+{
+	/*
+	 * When the exception packet is inserted, whether the last instruction
+	 * in previous range packet is taken branch or not, we need to force
+	 * to set 'prev_packet->last_instr_taken_branch' to true.  This ensures
+	 * to generate branch sample for the instruction range before the
+	 * exception is trapped to kernel or before the exception returning.
+	 *
+	 * The exception packet includes the dummy address values, so don't
+	 * swap PACKET with PREV_PACKET.  This keeps PREV_PACKET to be useful
+	 * for generating instruction and branch samples.
+	 */
+	if (etmq->prev_packet->sample_type == CS_ETM_RANGE)
+		etmq->prev_packet->last_instr_taken_branch = true;
+
+	return 0;
+}
+
 static int cs_etm__flush(struct cs_etm_queue *etmq, bool new_packet)
 {
 	int err = 0;
@@ -1090,6 +1109,15 @@ static int cs_etm__run_decoder(struct cs_etm_queue *etmq)
 					 */
 					cs_etm__sample(etmq);
 					break;
+				case CS_ETM_EXCEPTION:
+				case CS_ETM_EXCEPTION_RET:
+					/*
+					 * If the exception packet is coming,
+					 * make sure the previous instruction
+					 * range packet to be handled properly.
+					 */
+					cs_etm__exception(etmq);
+					break;
 				case CS_ETM_TRACE_ON:
 				case CS_ETM_TRACE_OFF:
 					/*
-- 
2.7.4
