Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 12 Nov 2018 00:44:17 -0000
Received: from icoremail.net (unknown [209.85.215.173])
	by mail-app2 (Coremail) with SMTP id by_KCgDHH8JQuehbk6R4AQ--.36379S3;
	Mon, 12 Nov 2018 07:20:48 +0800 (CST)
Received: from mail-pg1-f173.google.com (unknown [209.85.215.173])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwCnfztMuehbU6guAA--.11695S3;
	Mon, 12 Nov 2018 07:20:44 +0800 (CST)
Received: by mail-pg1-f173.google.com with SMTP id r9-v6so3178095pgv.6
        for <xuliker@zju.edu.cn>; Sun, 11 Nov 2018 15:20:44 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:from:to:cc:subject
         :date:message-id:in-reply-to:references:user-agent:mime-version
         :content-transfer-encoding:sender:precedence:list-id;
        bh=RRJmZiYInf6rGSsm094hrOkjDftukDFLSk/u6kYhS2k=;
        b=MQIJceUqFmBj62o0yDJOvBBxKSnBtaXG4Aa5OQkT+rz4G8Fo7dIiFZ+JJgYtyDBlHe
         U41Ug2VojNAbG7KLziDVTfLuXpO2lhtV4sz9aYyhqlnhx7YM94cY8J1FPZSqVAqQ77lj
         /fEPgpX/CT4W+V4vRR/6nXbPPHEBnLpo2Eo3aZ2DgssEO0isAV5Qbu9MDxiY5RV5XwOY
         YdANXNkPx6I4AQSW7cprLUk9vS+uDvVV15/e2GhEPpZl07NbBnJaNuek+6vKlLNXhRdY
         XIpkiyBaDWvFPhv+xwdc+Kqbpc3/mgFTbGadUkWCMf3/i/TgZ/w9WhAafYjdSavY602/
         VDNg==
X-Gm-Message-State: AGRZ1gKvAmtl+4sSOq/lmUw/DLvC3anOpZQUy/IxEecV4UhLYVASj/OH
	ffgtRQJ6//OYS4IFqFbxDkV4pZjLxV2qY5jr7Im5hcRDuVs9JJo=
X-Received: by 2002:a63:fd53:: with SMTP id m19mr15657807pgj.340.1541978444248;
        Sun, 11 Nov 2018 15:20:44 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp2556624pjt;
        Sun, 11 Nov 2018 15:20:43 -0800 (PST)
X-Google-Smtp-Source: AJdET5eZqsxViZn871hPBsZtL71PwMvZbnfUTqwPmKqHjiX2aPE8ntIPX6CgB3yetMJIFTJ6r5Nq
X-Received: by 2002:a17:902:c7:: with SMTP id a65-v6mr18080317pla.296.1541978443347;
        Sun, 11 Nov 2018 15:20:43 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1541978443; cv=none;
        d=google.com; s=arc-20160816;
        b=PD2vlXXsuVHqfYjvDgySmslsh/1vxZOky6MnLuJgKQrwDC4a7yZlql5BsKwUduRT2T
         PxKZBDPXahl9VCA92waIpdlFP7eJ/bUEY9UordpMOS6E4/q34SA/DF5esyQvv5JLwL2g
         h7n7hf2G8VNV/BGVx3eSD5npTFtgCpgPyLT31zqHz/02oUjHTFl79avv7bc6lKn6Dz7q
         lENdhZB/M0JZuhp4EDx3sOwRz/QjN2V+4Q/SdDcMaPnl5LmpadIcx4qBA0JwyyUCmDfA
         sNqnA8VZ0ualYs/GOvhxo1/p3+O/2uLJzXTevXTmPn784Eir7M2uaGTyhA5cjm5tMNj0
         IlMQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:content-transfer-encoding:mime-version
         :user-agent:references:in-reply-to:message-id:date:subject:cc:to
         :from:dkim-signature;
        bh=RRJmZiYInf6rGSsm094hrOkjDftukDFLSk/u6kYhS2k=;
        b=M8pqA7nbRJPVPh5Gzwy9jaCKs3yt1whSmKqq89r4DtHtd5q9tCVD79ahN4eCrLNyue
         AoA73loosDWclWVarT9tjUw6HG1KzLw6YOBj/jDk0zxsXYfCFrWsaeQIt2pNUNBCcM4o
         c/E3R9XSVXUxbnrH0+kHPYhZMBIyZdG+p9j0SKzawpRtAO+V8Ren6aA/HstG4x5oT5Nc
         81AslHiLh2YW6hYb1ol+DtsLNiE2l3jQ0dtxgq9H8jujT40/GI/S6Bie3ZHEtGSN7XFA
         CdnMzlm3t70ARCAHkgEOqTWYhIfCpj0PNLXa5vLUoj6llqP62mmPWgfGFbJBgunz0edq
         i2WA==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@kernel.org header.s=default header.b=xYSVoozu;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id 69-v6si16908579pft.177.2018.11.11.15.20.26;
        Sun, 11 Nov 2018 15:20:43 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2389528AbeKLIVU (ORCPT <rfc822;berg.ding@gmail.com> + 99 others);
        Mon, 12 Nov 2018 03:21:20 -0500
Received: from mail.kernel.org ([198.145.29.99]:47942 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S2389513AbeKLIVT (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 12 Nov 2018 03:21:19 -0500
Received: from localhost (unknown [206.108.79.134])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 5FC1222353;
        Sun, 11 Nov 2018 22:31:22 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1541975482;
        bh=4Kd6h17hphUdYhZc18/Bkq4iT1qRqXtk+WmiTyRN7Oc=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=xYSVoozu9ViRZhF9zOwnH8147wpy+l63Wqkcf0vxNq/o0uk/tsquxW4Lc5rD9XDNm
         m848Cl/1131ee5GED0wZKWQPRIyO8l+JV0umb/yJOWnqU/dnwYWeUL12VKAb1aztuB
         3Bxbqd34tPBLUEln4d1mFIAX8bJW2ZSlhHMtRcV0=
From: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
To: linux-kernel@vger.kernel.org
Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        stable@vger.kernel.org, Jan Kara <jack@suse.cz>
Subject: [PATCH 4.18 271/350] fsnotify: Fix busy inodes during unmount
Date: Sun, 11 Nov 2018 14:22:15 -0800
Message-Id: <20181111221719.354949124@linuxfoundation.org>
X-Mailer: git-send-email 2.19.1
In-Reply-To: <20181111221707.043394111@linuxfoundation.org>
References: <20181111221707.043394111@linuxfoundation.org>
User-Agent: quilt/0.65
X-stable: review
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwCnfztMuehbU6guAA--.11695S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoW3AF4fJw1fZr13Cr4UtryfCrg_yoW7CFWUp3
	y3t3yfKw4rJry3Ca1kZa18Xr4FyFykJw4UJr1av342yF1xC3sFqFs7Jw1FvFyUGrZ5ZFWj
	qr43KrWS9a17GaDanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUPIb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_tr0E3s1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr1j6F4UJwA2z4x0Y4vE
	x4A2jsIE14v26rxl6s0DM28EF7xvwVC2z280aVCY1x0267AKxVW0oVCq3wAS0I0E0xvYzx
	vE52x082IY62kv0487Mc02F40EFcxC0VAKzVAqx4xG6I80ewAv7VC0I7IYx2IY67AKxVWU
	XVWUAwAv7VC2z280aVAFwI0_Gr0_Cr1lOx8S6xCaFVCjc4AY6r1j6r4UM4x0Y48IcxkI7V
	AKI48JMx02cVCv0xWlc7CjxVAKzI0EY4vE52x082I5MxkFs20EY4vE44CYbxCE4x80FwCY
	02Avz4vEIxC_uwCY0x0Ix7I2Y4AK64vIr41lcIIF0xvE2Ix0cI8IcVAFwI0_tr0E3s1lcI
	IF0xvE2Ix0cI8IcVCY1x0267AKxVW8Jr0_Cr1UMxvI42IY6I8E87Iv67AKxVW0oVCq3wCY
	IxAIcVC2z280aVCY1x0267AKxVW0oVCq3wCF04k20xvY0x0EwIxGrwCF04k20xvEw4C26c
	xK6c8Ij28IcwCF72vE77IF4wCFx2IqxVCFs4IE7xkEbVWUJVW8JwC20s026c02F40E14v2
	6r1j6r18MI8I3I0E7480Y4vE14v26r106r1rMI8E67AF67kF1VAFwI0_JF0_Jw1lIxkGc2
	Ij64vIr41lIxAIcVCF04k26cxKx2IYs7xG6r1j6r1xYxBIdaVFxhVjvjDU0xZFpf9x07bL
	byZUUUUU=

4.18-stable review patch.  If anyone has any objections, please let me know.

------------------

From: Jan Kara <jack@suse.cz>

commit 721fb6fbfd2132164c2e8777cc837f9b2c1794dc upstream.

Detaching of mark connector from fsnotify_put_mark() can race with
unmounting of the filesystem like:

  CPU1				CPU2
fsnotify_put_mark()
  spin_lock(&conn->lock);
  ...
  inode = fsnotify_detach_connector_from_object(conn)
  spin_unlock(&conn->lock);
				generic_shutdown_super()
				  fsnotify_unmount_inodes()
				    sees connector detached for inode
				      -> nothing to do
				  evict_inode()
				    barfs on pending inode reference
  iput(inode);

Resulting in "Busy inodes after unmount" message and possible kernel
oops. Make fsnotify_unmount_inodes() properly wait for outstanding inode
references from detached connectors.

Note that the accounting of outstanding inode references in the
superblock can cause some cacheline contention on the counter. OTOH it
happens only during deletion of the last notification mark from an inode
(or during unlinking of watched inode) and that is not too bad. I have
measured time to create & delete inotify watch 100000 times from 64
processes in parallel (each process having its own inotify group and its
own file on a shared superblock) on a 64 CPU machine. Average and
standard deviation of 15 runs look like:

	Avg		Stddev
Vanilla	9.817400	0.276165
Fixed	9.710467	0.228294

So there's no statistically significant difference.

Fixes: 6b3f05d24d35 ("fsnotify: Detach mark from object list when last reference is dropped")
CC: stable@vger.kernel.org
Signed-off-by: Jan Kara <jack@suse.cz>
Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

---
 fs/notify/fsnotify.c |    3 +++
 fs/notify/mark.c     |   39 +++++++++++++++++++++++++++++++--------
 include/linux/fs.h   |    3 +++
 3 files changed, 37 insertions(+), 8 deletions(-)

--- a/fs/notify/fsnotify.c
+++ b/fs/notify/fsnotify.c
@@ -96,6 +96,9 @@ void fsnotify_unmount_inodes(struct supe
 
 	if (iput_inode)
 		iput(iput_inode);
+	/* Wait for outstanding inode references from connectors */
+	wait_var_event(&sb->s_fsnotify_inode_refs,
+		       !atomic_long_read(&sb->s_fsnotify_inode_refs));
 }
 
 /*
--- a/fs/notify/mark.c
+++ b/fs/notify/mark.c
@@ -161,15 +161,18 @@ static void fsnotify_connector_destroy_w
 	}
 }
 
-static struct inode *fsnotify_detach_connector_from_object(
-					struct fsnotify_mark_connector *conn)
+static void *fsnotify_detach_connector_from_object(
+					struct fsnotify_mark_connector *conn,
+					unsigned int *type)
 {
 	struct inode *inode = NULL;
 
+	*type = conn->type;
 	if (conn->type == FSNOTIFY_OBJ_TYPE_INODE) {
 		inode = conn->inode;
 		rcu_assign_pointer(inode->i_fsnotify_marks, NULL);
 		inode->i_fsnotify_mask = 0;
+		atomic_long_inc(&inode->i_sb->s_fsnotify_inode_refs);
 		conn->inode = NULL;
 		conn->type = FSNOTIFY_OBJ_TYPE_DETACHED;
 	} else if (conn->type == FSNOTIFY_OBJ_TYPE_VFSMOUNT) {
@@ -193,10 +196,29 @@ static void fsnotify_final_mark_destroy(
 	fsnotify_put_group(group);
 }
 
+/* Drop object reference originally held by a connector */
+static void fsnotify_drop_object(unsigned int type, void *objp)
+{
+	struct inode *inode;
+	struct super_block *sb;
+
+	if (!objp)
+		return;
+	/* Currently only inode references are passed to be dropped */
+	if (WARN_ON_ONCE(type != FSNOTIFY_OBJ_TYPE_INODE))
+		return;
+	inode = objp;
+	sb = inode->i_sb;
+	iput(inode);
+	if (atomic_long_dec_and_test(&sb->s_fsnotify_inode_refs))
+		wake_up_var(&sb->s_fsnotify_inode_refs);
+}
+
 void fsnotify_put_mark(struct fsnotify_mark *mark)
 {
 	struct fsnotify_mark_connector *conn;
-	struct inode *inode = NULL;
+	void *objp = NULL;
+	unsigned int type = FSNOTIFY_OBJ_TYPE_DETACHED;
 	bool free_conn = false;
 
 	/* Catch marks that were actually never attached to object */
@@ -216,7 +238,7 @@ void fsnotify_put_mark(struct fsnotify_m
 	conn = mark->connector;
 	hlist_del_init_rcu(&mark->obj_list);
 	if (hlist_empty(&conn->list)) {
-		inode = fsnotify_detach_connector_from_object(conn);
+		objp = fsnotify_detach_connector_from_object(conn, &type);
 		free_conn = true;
 	} else {
 		__fsnotify_recalc_mask(conn);
@@ -224,7 +246,7 @@ void fsnotify_put_mark(struct fsnotify_m
 	mark->connector = NULL;
 	spin_unlock(&conn->lock);
 
-	iput(inode);
+	fsnotify_drop_object(type, objp);
 
 	if (free_conn) {
 		spin_lock(&destroy_lock);
@@ -702,7 +724,8 @@ void fsnotify_destroy_marks(struct fsnot
 {
 	struct fsnotify_mark_connector *conn;
 	struct fsnotify_mark *mark, *old_mark = NULL;
-	struct inode *inode;
+	void *objp;
+	unsigned int type;
 
 	conn = fsnotify_grab_connector(connp);
 	if (!conn)
@@ -728,11 +751,11 @@ void fsnotify_destroy_marks(struct fsnot
 	 * mark references get dropped. It would lead to strange results such
 	 * as delaying inode deletion or blocking unmount.
 	 */
-	inode = fsnotify_detach_connector_from_object(conn);
+	objp = fsnotify_detach_connector_from_object(conn, &type);
 	spin_unlock(&conn->lock);
 	if (old_mark)
 		fsnotify_put_mark(old_mark);
-	iput(inode);
+	fsnotify_drop_object(type, objp);
 }
 
 /*
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@ -1416,6 +1416,9 @@ struct super_block {
 	/* Number of inodes with nlink == 0 but still referenced */
 	atomic_long_t s_remove_count;
 
+	/* Pending fsnotify inode refs */
+	atomic_long_t s_fsnotify_inode_refs;
+
 	/* Being remounted read-only */
 	int s_readonly_remount;
 

