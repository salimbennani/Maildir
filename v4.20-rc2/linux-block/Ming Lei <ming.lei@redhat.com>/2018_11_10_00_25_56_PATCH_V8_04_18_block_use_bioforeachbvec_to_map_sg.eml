Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (61.164.42.155:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 10 Nov 2018 00:54:30 -0000
Received: from icoremail.net (unknown [209.85.215.176])
	by mail-app2 (Coremail) with SMTP id by_KCgDHH96DteVbmANpAQ--.31716S3;
	Sat, 10 Nov 2018 00:27:51 +0800 (CST)
Received: from mail-pg1-f176.google.com (unknown [209.85.215.176])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwBXNkKCteVbQVEjAA--.4773S3;
	Sat, 10 Nov 2018 00:27:47 +0800 (CST)
Received: by mail-pg1-f176.google.com with SMTP id 70so1047796pgh.8
        for <xuliker@zju.edu.cn>; Fri, 09 Nov 2018 08:27:47 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-original-authentication-results:x-gm-message-state:delivered-to
         :from:to:cc:subject:date:message-id:in-reply-to:references:sender
         :precedence:list-id;
        bh=JnooYSOi+petECpZEkaXYdo2t9s7xFSbcP7nWWOwWaI=;
        b=sp5lOyfJGT/nhw/yO5qr6OZwIq+ZWwDkbqOMByq72+rjWW3oc3nPeG5pUAkQ2J3cIm
         bUvskvGTJSj3dvbHXjuTOPdimlGkbg4YSAB8Ha5w2IVYfzBbBzfFFqDrgdaAI1vCx5He
         v6SpyuL5BOO577DuQYx2MQQXqjsjxKp3SVcEDe7+IXVzB760y+PJeWFNpl6Nda9NTq4N
         sxijWqNnnivO/alH8ovP/EgXs29G0NE3WUePztYYjickRZ/Rw/tiEq34vh2clWsTKY8l
         2I6pc5TDQtyfoZ/PmscFTOxTaS27WxtVIZlER7kIadzBJv3RsZusahMksOlpMKiUwdLG
         RY5A==
X-Original-Authentication-Results: mx.google.com;       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;       dmarc=fail (p=NONE sp=NONE dis=NONE) header.from=redhat.com
X-Gm-Message-State: AGRZ1gKDmI1UmPNlU8Lo2mqlZduNYh2l5dq03TRx2NczHKwXh+agla0+
	AE4KellMjY/KAQM9JurEZK25D8C4X7fxz9QZi7aAqmCbBmznwnl9Nw==
X-Received: by 2002:a63:1d10:: with SMTP id d16-v6mr7807225pgd.228.1541780866742;
        Fri, 09 Nov 2018 08:27:46 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp98147pjt;
        Fri, 9 Nov 2018 08:27:46 -0800 (PST)
X-Google-Smtp-Source: AJdET5f9xH7waC3YGbRtZ1jIOncrKGin48nX2p840/mbLEEwzVLSrHpR7EwqMI1qas0B3ELdZ16f
X-Received: by 2002:a62:3647:: with SMTP id d68-v6mr9805274pfa.66.1541780866022;
        Fri, 09 Nov 2018 08:27:46 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1541780865; cv=none;
        d=google.com; s=arc-20160816;
        b=J6t73HAUuwip3hp4PAuzTtBX85+TiC8Db2o0NQVkQE/nJOYVIcXziQKP+ny0JCxQok
         rzuyCkw18EjJA2gMVcMbLppoPsxFRJu0L4fxPx4J5VS7dcXSXtKgYwF9D6cXrOjBeUJI
         rn/9J79xuNGx6TDGVAurlUDbe0zFA5+e/TqlyxuzxLyRg48V5rWVdHc+uRBr0dVAIy/Y
         YFSy31OHcZR/9tTrKkWk5qXonydHUzWiOtuzYlEf1SG5keroUnWo6jTnf7ABG4QKSUjM
         rhG8/DaPsfUk8epa3Z7pcxA4ts9KuIm824yFDHJdkUCjiOz8nTDFVo/f4B5YhmD+wvXb
         q6Rw==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:references:in-reply-to:message-id:date
         :subject:cc:to:from;
        bh=JnooYSOi+petECpZEkaXYdo2t9s7xFSbcP7nWWOwWaI=;
        b=qr84c/j/qASt+YlFJWFnuERhAxFs/LZ+CSEMLE5nRNKPG1+hc0JxUcdCqemeMzmPZW
         I8GmyV1p3RPuYuK01X2EaevMBhhuFQxlvUbYggAc+0y97YGdTbtTdfiH5mGapKPZ2baP
         XMQayOQLhe0wEarh5tmlyyMIao3AXAeJUpkm85rBIDIMX2ZcnGh6f5C6FwcTFXGHFp+c
         ipZXrp3m23BWns8k5byfNvlSMglW4y8CqPmMRNr9C0M+DzwHzA42T7frm8AGvCRWWehe
         JnxV6JIwQFhS4iMHyWSXMjXsOUkp2gs4FwNKX0QRTmHHxszU9EY4aW5LB6lUNDd2b8Uc
         a8Gw==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;
       dmarc=fail (p=NONE sp=NONE dis=NONE) header.from=redhat.com
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id p82-v6si8690106pfi.12.2018.11.09.08.27.24;
        Fri, 09 Nov 2018 08:27:45 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728600AbeKJCIL (ORCPT <rfc822;tu.k.phung@gmail.com>
        + 99 others); Fri, 9 Nov 2018 21:08:11 -0500
Received: from mx1.redhat.com ([209.132.183.28]:55486 "EHLO mx1.redhat.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1727828AbeKJCIK (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 9 Nov 2018 21:08:10 -0500
Received: from smtp.corp.redhat.com (int-mx05.intmail.prod.int.phx2.redhat.com [10.5.11.15])
        (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
        (No client certificate requested)
        by mx1.redhat.com (Postfix) with ESMTPS id 3851F811D8;
        Fri,  9 Nov 2018 16:26:54 +0000 (UTC)
Received: from localhost (ovpn-8-16.pek2.redhat.com [10.72.8.16])
        by smtp.corp.redhat.com (Postfix) with ESMTP id 3B35F5D762;
        Fri,  9 Nov 2018 16:26:49 +0000 (UTC)
From: Ming Lei <ming.lei@redhat.com>
To: Jens Axboe <axboe@kernel.dk>
Cc: linux-block@vger.kernel.org, linux-kernel@vger.kernel.org,
        Ming Lei <ming.lei@redhat.com>, Christoph Hellwig <hch@lst.de>
Subject: [PATCH V8 04/18] block: use bio_for_each_bvec() to map sg
Date: Sat, 10 Nov 2018 00:25:56 +0800
Message-Id: <20181109162610.18981-5-ming.lei@redhat.com>
In-Reply-To: <20181109162610.18981-1-ming.lei@redhat.com>
References: <20181109162610.18981-1-ming.lei@redhat.com>
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.15
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16 (mx1.redhat.com [10.5.110.27]); Fri, 09 Nov 2018 16:26:54 +0000 (UTC)
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwBXNkKCteVbQVEjAA--.4773S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoWxArW3trWktFWxZF15XrWfAFb_yoW5CFyfpF
	43Gw1akr4IgF4aqay3JFnFkF9Ika1xArW7JFZrtr9Y9r13GrWIvF40yryFvr93urs3Crsx
	JrsxKw4Uur4DJFUanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUUjbIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUP2b7Iv0xC_Cr1lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_tr0E3s1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Cr0_Gr1UM28EF7xvwVC2
	z280aVAFwI0_Gr1j6F4UJwA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_Gr1j6F4UJwAS0I0E0x
	vYzxvE52x082IY62kv0487Mc02F40EFcxC0VAKzVAqx4xG6I80ewAv7VC0I7IYx2IY67AK
	xVWUGVWUXwAv7VC2z280aVAFwI0_Jr0_Gr1lOx8S6xCaFVCjc4AY6r1j6r4UM4x0Y48IcV
	AKI48JMx02cVCv0xWlc7CjxVAKzI0EY4vE52x082I5MxkFs20EY4vE44CYbxCE4x80FwCY
	02Avz4vEIxC_JwCY0x0Ix7I2Y4AK64vIr41lcIIF0xvE2Ix0cI8IcVAFwI0_Xr0_Ar1lcI
	IF0xvE2Ix0cI8IcVCY1x0267AKxVW8JVWxJwCYIxAIcVC2z280aVAFwI0_Gr0_Cr1lcIIF
	0xvEx4A2jsIEc7CjxVAFwI0_Gr0_Gr1UMxAIw28IcxkI7VAKI48JMxAIw28IcVAKzI0EY4
	vE52x082I5MxCjnVCjjxCrMxC20s026xCaFVCjc4AY6r1j6r4UMI8I3I0E5I8CrVAFwI0_
	Jr0_Jr4lx2IqxVCjr7xvwVAFwI0_JrI_JrWlx4CE17CEb7AF67AKxVWUAVWUtwCIc40Y0x
	0EwIxGrwCI42IY6xAIw20EY4v20xvaj40_Jr0_JF7vcSsGvfC2KfnxnUUI43ZEXa7IU52d
	gJUUUUU==

It is more efficient to use bio_for_each_bvec() to map sg, meantime
we have to consider splitting multipage bvec as done in blk_bio_segment_split().

Cc: Christoph Hellwig <hch@lst.de>
Signed-off-by: Ming Lei <ming.lei@redhat.com>
---
 block/blk-merge.c | 72 +++++++++++++++++++++++++++++++++++++++----------------
 1 file changed, 52 insertions(+), 20 deletions(-)

diff --git a/block/blk-merge.c b/block/blk-merge.c
index 6f7deb94a23f..cb9f49bcfd36 100644
--- a/block/blk-merge.c
+++ b/block/blk-merge.c
@@ -473,6 +473,56 @@ static int blk_phys_contig_segment(struct request_queue *q, struct bio *bio,
 	return biovec_phys_mergeable(q, &end_bv, &nxt_bv);
 }
 
+static struct scatterlist *blk_next_sg(struct scatterlist **sg,
+		struct scatterlist *sglist)
+{
+	if (!*sg)
+		return sglist;
+	else {
+		/*
+		 * If the driver previously mapped a shorter
+		 * list, we could see a termination bit
+		 * prematurely unless it fully inits the sg
+		 * table on each mapping. We KNOW that there
+		 * must be more entries here or the driver
+		 * would be buggy, so force clear the
+		 * termination bit to avoid doing a full
+		 * sg_init_table() in drivers for each command.
+		 */
+		sg_unmark_end(*sg);
+		return sg_next(*sg);
+	}
+}
+
+static unsigned blk_bvec_map_sg(struct request_queue *q,
+		struct bio_vec *bvec, struct scatterlist *sglist,
+		struct scatterlist **sg)
+{
+	unsigned nbytes = bvec->bv_len;
+	unsigned nsegs = 0, total = 0;
+
+	while (nbytes > 0) {
+		unsigned seg_size;
+		struct page *pg;
+		unsigned offset, idx;
+
+		*sg = blk_next_sg(sg, sglist);
+
+		seg_size = min(nbytes, queue_max_segment_size(q));
+		offset = (total + bvec->bv_offset) % PAGE_SIZE;
+		idx = (total + bvec->bv_offset) / PAGE_SIZE;
+		pg = nth_page(bvec->bv_page, idx);
+
+		sg_set_page(*sg, pg, seg_size, offset);
+
+		total += seg_size;
+		nbytes -= seg_size;
+		nsegs++;
+	}
+
+	return nsegs;
+}
+
 static inline void
 __blk_segment_map_sg(struct request_queue *q, struct bio_vec *bvec,
 		     struct scatterlist *sglist, struct bio_vec *bvprv,
@@ -490,25 +540,7 @@ __blk_segment_map_sg(struct request_queue *q, struct bio_vec *bvec,
 		(*sg)->length += nbytes;
 	} else {
 new_segment:
-		if (!*sg)
-			*sg = sglist;
-		else {
-			/*
-			 * If the driver previously mapped a shorter
-			 * list, we could see a termination bit
-			 * prematurely unless it fully inits the sg
-			 * table on each mapping. We KNOW that there
-			 * must be more entries here or the driver
-			 * would be buggy, so force clear the
-			 * termination bit to avoid doing a full
-			 * sg_init_table() in drivers for each command.
-			 */
-			sg_unmark_end(*sg);
-			*sg = sg_next(*sg);
-		}
-
-		sg_set_page(*sg, bvec->bv_page, nbytes, bvec->bv_offset);
-		(*nsegs)++;
+		(*nsegs) += blk_bvec_map_sg(q, bvec, sglist, sg);
 	}
 	*bvprv = *bvec;
 }
@@ -530,7 +562,7 @@ static int __blk_bios_map_sg(struct request_queue *q, struct bio *bio,
 	int cluster = blk_queue_cluster(q), nsegs = 0;
 
 	for_each_bio(bio)
-		bio_for_each_segment(bvec, bio, iter)
+		bio_for_each_bvec(bvec, bio, iter)
 			__blk_segment_map_sg(q, &bvec, sglist, &bvprv, sg,
 					     &nsegs, &cluster);
 
-- 
2.9.5
