Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (61.164.42.155:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 10 Nov 2018 00:52:18 -0000
Received: from icoremail.net (unknown [209.85.210.171])
	by mail-app2 (Coremail) with SMTP id by_KCgDnX_vRbeVbqllnAQ--.31659S3;
	Fri, 09 Nov 2018 19:21:53 +0800 (CST)
Received: from mail-pf1-f171.google.com (unknown [209.85.210.171])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwCnfTnQbeVbpk0iAA--.13392S3;
	Fri, 09 Nov 2018 19:21:52 +0800 (CST)
Received: by mail-pf1-f171.google.com with SMTP id v9-v6so814651pff.2
        for <xuliker@zju.edu.cn>; Fri, 09 Nov 2018 03:21:52 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-original-authentication-results:x-gm-message-state:delivered-to
         :date:from:to:cc:subject:in-reply-to:message-id:references
         :user-agent:mime-version:sender:precedence:list-id;
        bh=2/fXwFha5qFU+dbbmUUkaPt6Q/cCKGi25Zb1VkguzHw=;
        b=ecTlFbnMKK7TW0USpbz6nycnwlFs+GhVpsRKvtlHx2fPJi9uwDfqH2SL7GzFv6Fr40
         yyZvKhw5ezLrvVajhe18Z71dZ2wYC+WYKTV4sBYofky/Jt5Bn+i3GLSTRdEMIhoLuTUa
         wX52K5cLZgpFBLIgeY4X+n+St3gcLnMbnPciNRpm/buk2EZrcJdhN/Fd5u+2/9uiGb0i
         a3wJxEa6o7tFDc82zBdUzmOwItfMRvqvf4UMF4UFB1Bcm28GmcokFVxgvJSUxYIh2j32
         eBIBI94W6Aix5IHKusy/bLt8Bm9uC3rO81HXZ4v2WjBQkRxzlRJKP4edz0SEs/+B6k+/
         Zokg==
X-Original-Authentication-Results: mx.google.com;       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
X-Gm-Message-State: AGRZ1gJYurM7DAvdw1ihOfO9694A0AbpL3Imx9+hw1iiMlwknFXLtQ88
	c2YcqZ+InSqVf6MPYXuFl0b+ibcEodgLYDYWSSddHeQCX+Zi1VLN6A==
X-Received: by 2002:a63:3c44:: with SMTP id i4mr7028907pgn.286.1541762511591;
        Fri, 09 Nov 2018 03:21:51 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp76941pjt;
        Fri, 9 Nov 2018 03:21:50 -0800 (PST)
X-Google-Smtp-Source: AJdET5c4xeUtby6OTsixIBhubx7tYVrRfHVhUNdJjORd0uLI/pWgqmDPtiAzf7VjuClKjBqsG8p+
X-Received: by 2002:a65:4ccb:: with SMTP id n11mr3312938pgt.257.1541762510621;
        Fri, 09 Nov 2018 03:21:50 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1541762510; cv=none;
        d=google.com; s=arc-20160816;
        b=o4n/2ZaXvU0nZKjk91QUawary7pN1oOUSGOn12ianE1AdwcYIbMQbH3hs2QzyrsFHK
         WdnzeNo3UDPXccM/NWoA9UiG/4MZTxAeBEweqDNpkMw3lSomhnSCkEBIZShR3yzFCfCE
         bAFOZBVg6yecrq8qB6ihDd7Id7jMfMk3dV4u1tz7uU53FUUQ4OK405+pS34cAayCkiJe
         G46GeKGjWHjylnBJl/feJu1k2xkJQYnyI+NDUe/JJ1KUlEr0BOZtnl/BfAT5l8lfyvDP
         sW0nhypARI4Gfkzz+n1Kg91TZo26L+ACzIB78xMbD6fJ8N2LEoeIl2TgnIwuLOtoGQB0
         uKpA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:mime-version:user-agent:references
         :message-id:in-reply-to:subject:cc:to:from:date;
        bh=2/fXwFha5qFU+dbbmUUkaPt6Q/cCKGi25Zb1VkguzHw=;
        b=VdlDEz+cXTLtxMpTl5x2AK45P/7pa6VYwOznLV9VyZFWf3hhNFwy1Y3hSPcka1gPCR
         q9/0uvI4PQg9Hwvjijr8A67fCa1Y44ttuNfPWTVl344kl/GQS0yH4ndscRzZ+K/Zx5SL
         79Tik2Edi9Bwdw+F20BCzMlpKnwvmQGUgQV4kDftPux2djVmFPb47guSCRhYFXsSCANa
         vA3zVLw5F2BbBzTlsnVVo3SAwqFWaGRMZV+Cypc5jqZZR4oL4YrdT4Z4WtcF0MizcPaR
         WGxggtlFt3l7ETTRyCpiU52X9HZlywJw8QqIQPDKsARaZIVlqD0uaWeIponIPKPa2jn6
         TU1g==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id k6si6983564pgr.500.2018.11.09.03.21.35;
        Fri, 09 Nov 2018 03:21:50 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727878AbeKIVBl (ORCPT <rfc822;changseok.bae@gmail.com>
        + 99 others); Fri, 9 Nov 2018 16:01:41 -0500
Received: from Galois.linutronix.de ([146.0.238.70]:46562 "EHLO
        Galois.linutronix.de" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727532AbeKIVBl (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 9 Nov 2018 16:01:41 -0500
Received: from hsi-kbw-5-158-153-52.hsi19.kabel-badenwuerttemberg.de ([5.158.153.52] helo=nanos.tec.linutronix.de)
        by Galois.linutronix.de with esmtpsa (TLS1.2:DHE_RSA_AES_256_CBC_SHA256:256)
        (Exim 4.80)
        (envelope-from <tglx@linutronix.de>)
        id 1gL4qb-00025s-3E; Fri, 09 Nov 2018 12:21:09 +0100
Date: Fri, 9 Nov 2018 12:21:08 +0100 (CET)
From: Thomas Gleixner <tglx@linutronix.de>
To: Aubrey Li <aubrey.li@intel.com>
cc: mingo@redhat.com, peterz@infradead.org, hpa@zytor.com,
        ak@linux.intel.com, tim.c.chen@linux.intel.com,
        arjan@linux.intel.com, linux-kernel@vger.kernel.org,
        Aubrey Li <aubrey.li@linux.intel.com>
Subject: Re: [RFC PATCH v2 1/2] x86/fpu: detect AVX task
In-Reply-To: <1541610982-33478-1-git-send-email-aubrey.li@intel.com>
Message-ID: <alpine.DEB.2.21.1811091121340.1519@nanos.tec.linutronix.de>
References: <1541610982-33478-1-git-send-email-aubrey.li@intel.com>
User-Agent: Alpine 2.21 (DEB 202 2017-01-01)
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwCnfTnQbeVbpk0iAA--.13392S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoWxWrWDCFyDCr4rJry5Aw4ktFb_yoWrZrykpF
	Wktrn3Ar1qkay3uws7Aw48urn5Crs5Wa1Ut3s3J34UAFn0grnYkryrKFyYva18KrWDAa4j
	va15twnrWFWqkFJanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUP0b7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Ar0_tr1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Cr0_Gr1UM28EF7xvwVC2
	z280aVAFwI0_GcCE3s1l84ACjcxK6I8E87Iv6xkF7I0E14v26rxl6s0DM2AIxVAIcxkEcV
	Aq07x20xvEncxIr21l5I8CrVACY4xI64kE6c02F40Ex7xfMcIj6xIIjxv20xvE14v26r10
	6r15McIj6I8E87Iv67AKxVW8JVWxJwAm72CE4IkC6x0Yz7v_Jr0_Gr1lF7xvr2IY64vIr4
	1l7I0Y6sxI4wCY1x0264kExVAvwVAq07x20xylc7Ca8VAvwVCFzxkY4VCF77xAMxkIecxE
	wVCI4VW8KwCY0x0Ix7I2Y4AK64vIr41lcIIF0xvE2Ix0cI8IcVAFwI0_Xr0_Ar1lcIIF0x
	vE2Ix0cI8IcVCY1x0267AKxVW8JVWxJwCYIxAIcVC2z280aVAFwI0_GcCE3s1lcIIF0xvE
	x4A2jsIEc7CjxVAFwI0_GcCE3s1l42xK82IYc2Ij64vIr41l42xK82IY64kExVAvwVAq07
	x20xyl4x8a6x804xWl4I8I3I0E4IkC6x0Yz7v_Jr0_Gr1lx2IqxVAqx4xG67AKxVWUJVWU
	GwC20s026x8GjcxK67AKxVWUGVWUWwC2zVAF1VAY17CE14v26r1q6r43MIIYrxkI7VAKI4
	8JMIIF0xvE42xK8VAvwI8IcIk0rVW3JVWrJrUvcSsGvfC2KfnxnUUI43ZEXa7IUOQeOJUU
	UUU==

Aubrey,

On Thu, 8 Nov 2018, Aubrey Li wrote:

> Subject: .... x86/fpu: detect AVX task

What is an AVX task? I know what you mean, but for the casual reader this
is not very informative. So something like:

  x86/fpu: Track AVX usage of tasks

would be more informative and precise. The mechanism you add is tracking
the state and not just detecting in.

> XSAVES and its variants use init optimization to reduce the amount of
> data that they save to memory during context switch. Init optimization
> uses the state component bitmap to denote if a component is in its init
> configuration. We use this information to detect if a task contains AVX
> instructions.

Please avoid 'We use..'. Changelogs should be factual and precise and not
be written as first-person narrative.

Aside of that, you very well explained how XSAVES optimization works, but
that's only a small part of the picture. The changelog should also contain
a justification why this is necessary in the first place along with more
missing bits and pieces. And please use paragraphs to structure the
changelog instead of having one big lump.

Something like this:

  User space tools which do automated task placement need information about
  AVX usage of tasks, because of <reasons>....

  The extended control register (XCR) allows access to the XINUSE
  state-component bitmap, which allows software to discover the state of
  the init optimization used by XSAVEOPT and XSAVES. Set bits in the bitmap
  denote the usage of AVX, SIMD, FPU and other components. The XSAVE
  variants store only the state of used components to speed up the
  operation.

  The XGETBV instruction, if supported, allows software to read the
  state-component bitmap and use this information to detect the usage of
  the tracked components.

  Add accessor functions and per task state tracking to context switch.

  The tracking turns on the usage flag immediately, but requires 3
  consecutive context switches with no usage to clear it. This decay is
  required because of <reasons>....

You surely had all this information in your head when writing the code and
the changelog, so you could have spared me to dig all this out of the SDM.

> +/*
> + * This function is called during context switch to update AVX component state
> + */
> +static inline void update_avx_state(struct avx_state *avx)
> +{
> +	/*
> +	 * Check if XGETBV with ECX = 1 supported. XGETBV with ECX = 1
> +	 * returns the logical-AND of XCR0 and XINUSE. XINUSE is a bitmap
> +	 * by which the processor tracks the status of various components.
> +	 */
> +	if (!use_xgetbv1()) {
> +		avx->state = 0;

avx->state should be initialized to 0 when the task starts, so why
does it need to be cleared when XGETBV is not supported?

Also this is the only usage site of use_xgetbv1(). So please open code it
here and avoid the extra inline which does not provide any extra value in
this case.

> +		return;
> +	}
> +	/*
> +	 * XINUSE is dynamic to track component state because VZEROUPPER
> +	 * happens on every function end and reset the bitmap to the
> +	 * initial configuration.
> +	 *
> +	 * State decay is introduced to solve the race condition between
> +	 * context switch and a function end. State is aggressively set
> +	 * once it's detected but need to be cleared by decay 3 context
> +	 * switches

I have no idea what _the_ race condition between context switch and a
function end is about. Probably most readers wont have.

> +	 */
> +	if (xgetbv(XINUSE_STATE_BITMAP_INDEX) & XFEATURE_MASK_Hi16_ZMM) {

In the changelog and also in the code you say AVX (avx->state), but this
actually looks only for Hi16_ZMM state, which are the upper 16 AVX512
registers.

So again, this wants to be documented in the changelog along with an
explanation WHY this check is restricted to Hi16_ZMM state. And please
rename the variable accordingly. This is confusing at best.

> +		avx->state = 1;
> +		avx->decay_count = AVX_STATE_DECAY_COUNT;
> +	} else {
> +		if (avx->decay_count)
> +			avx->decay_count--;
> +		else
> +			avx->state = 0;
> +	}

Is there a reason why you need two variables for this?

	if (xgetbv(XINUSE_STATE_BITMAP_INDEX) & XFEATURE_MASK_Hi16_ZMM)
		tsk->hi16zmm_usage = HI16ZMM_DECAY_COUNT;
	else if (tsk->hi16zmm_usage)
		tsk->hi16zmm_usage--;

and the function which exposes it later to user space can just check
whether tsk->hi16zmm_usage is 0 or not.

This is context switch and we really want to avoid every pointless
instruction we can.

Thanks,

	tglx
