Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 29 Nov 2018 18:18:54 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 041775802E4;
	Thu, 29 Nov 2018 01:33:17 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 01:33:07 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A+nfkKB28ljlhobArsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segQKf/xwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJBUMhPSiJBHo2y?=
 =?us-ascii?q?YYgBD+UDPOZXs4bzqFQVrRumBwShH//vyiZSi3PqwaE2z/ktHAfb1wIgBdIOt3?=
 =?us-ascii?q?HUoc3pOagJT++1yLTDwjrdYPNNwzj29Y/FfQo6rv6SWbJ8a9TRxlc0FwzflViQ?=
 =?us-ascii?q?r4PkPyuP2usRtGib6vNtWOSygGAprAFxpyKgxsYqioTRgIIUxUjE+T9lz4YyIN?=
 =?us-ascii?q?21TlNwb928EJZIqS2WK497Ttk/T2xmpio20KAKtJ2ncCQQyZkqxQbTZviHfoSS?=
 =?us-ascii?q?4B/uVfydLSp4iX9kYr6yhxi//VCuyuLiVcS4zFNHoy9ZndTDt30CzBne58yaRv?=
 =?us-ascii?q?Z94kis3DSC2BrP5uxKJE04iLTXJpA8zbM2i5Edq17MHjXsl0XzlKKWdlsr+uyv?=
 =?us-ascii?q?6+n/fLXmqYGTN5VuhgH9LKsugMq/Dvo8MgQUWGib4+u82KXi/U3/XrpKkuU7nr?=
 =?us-ascii?q?fFvJ3eP8gXu6C0DxFP3oo+6BuzEy2q3dUakHUfKVJKYhOHj4znO1HUJ/D4CO+y?=
 =?us-ascii?q?g1CtkDdt2vDHMaTtApbTIXjZlrfuY7J951dbyAs9y9BQ+YhUB6ofIPL8REDxrs?=
 =?us-ascii?q?bUDhwnPAyuxeboFtF92pkZWWKVDa+VKLnSvkOQ5uIzP+mMY5cYuDL8K/gm+fHi?=
 =?us-ascii?q?l3A4mUIGcKmt3JsXbm24H/t8L0WYZ3rsnskOEWMQsgUiS+zqjUWIUSRPaHaqQ6?=
 =?us-ascii?q?I8+jY7BZqmDYjZR4CtnKaO3CChEp1We2BJEFaMEXjzeoWAWvcMbj+SI8B7njwF?=
 =?us-ascii?q?U7ihV5Eu1RW0uADmzLpnK/Le+jcEupL7yNh1++rTmAkw9TxzEcuRyWKNT2Zynm?=
 =?us-ascii?q?MOQD87x6R/oU17ylee3ql0mf1YFdpP5/xXVgc2L4LTz+t/C9rqQALOYs+JSEq6?=
 =?us-ascii?q?QtWhGTw+VMkxw98JY0Z+AdmilArM3yixDr8RlryLAoE0863G03jwIcZ912jJ1K?=
 =?us-ascii?q?07g1Y6RctPMHWshrRj+AjLG47Jj0KZmr6pdasG2i7B7mODzWuUs0FeXw59SqHF?=
 =?us-ascii?q?XXEZZkvLotX1/ELCT7myCbs5NgtN09KNKqxPatfxl1VJWO/jOMjCY2K2g2q/GA?=
 =?us-ascii?q?yHxq2SY4bwe2USxiPdCFManAAV+nqGMQs+BiKlo2/FCDxuFFTvY17j8OVkqXO7?=
 =?us-ascii?q?SFM0wB+Ob0F7y7W1/RsVj+SGS/wPxrIEpDshqzJsEVmgxd3WFcSPqxBhfKpGZ9?=
 =?us-ascii?q?M9+0lI1WTCugx5P5ygKb1ih1EEfwR2uUPuywt4CoFancc2q3MqyRJ4KbiE31NZ?=
 =?us-ascii?q?azOYwZfwN6XLKmnz+RCvbLLW2lHe0dqM5qcD8vM4q0/nvAGoEEoi/G5q091U03?=
 =?us-ascii?q?ua+5XLAxAeUZP3UkYr6Rd6o6vWbTU654PRzXdsK7W7sife29I1A+so0gyvf9NB?=
 =?us-ascii?q?P6KLCgDzE9cWCNOzKOM3gVepaBEEPOdM9KMvO8Omdv2G2LOkPep6nTKmi3hH75?=
 =?us-ascii?q?550k6W6yV8TevI1Y4fw/6ExguHSyv8jFC5v8H3hIBIfy0dEnC+yCjkHoFRYKJy?=
 =?us-ascii?q?cJ0PCWevJc2329p/i4TsW35e6F6sGVcG1NW1dhqValz3xRdQ2lgPoXy7hSu4yC?=
 =?us-ascii?q?R5kysorqWDxiPO2fntdB0dNm5NWmZil1bsLZGogN8AWEinchYmlAGi5Ub83KVb?=
 =?us-ascii?q?oKV/L2/OQUZHZST2LmdiUreuubqGecJA9JQosSBPWuSmfV+aUqL9owcd0y77H2?=
 =?us-ascii?q?pexSo3djGwtpXighx6jnmQLHJyrHrfZMFxyg3T5N3aRf5NwDUGQDN0hiXQBli5?=
 =?us-ascii?q?J9Op58mbl4/fsuCiUGKsTp9TfjPxzYODtyu74ndmAQalkPCwmd3nEA463jH919?=
 =?us-ascii?q?RxUSXIrRD8YpTk1qigMOJneFVoC0H468ZgBo5+lY4wjokK2XcGnpWV4WYHkWDr?=
 =?us-ascii?q?PNRbw63+a2ABRTwKw97T+wXl3ExjLnSUx4P2THmdw81hZ8WkbWMSwC4y88dKCK?=
 =?us-ascii?q?KM5rxegSR1uka4rR7WYfVlnTcS0/ou5GQag+EUogUtyCqdD6sWHUlZOyzsihuJ?=
 =?us-ascii?q?48q/rKVReGagb7yw2FBiktCmCbGIuhtcV2rhepc+AS9w6d1yMFfN0H3w8I7oYt?=
 =?us-ascii?q?fRYswIth2IjRjAlfNaJ4wrlvoFnidnPWP9vXs4y+80lxBu3Je6vJSZJGVp5q62?=
 =?us-ascii?q?HhlYNjjtbcMJ5j7tlbpentqR3423ApVhHTALUIHpTP2yFjISqO/nNx2PEDAnrn?=
 =?us-ascii?q?ebGLzfHRKQ6Ut8rnLPFYyrOG+TJHUD0dpiQxydLlRFgA8IRDU6goI5FgeyycP6?=
 =?us-ascii?q?akh54TQR5kPiphtI1+JlLB3/UmbZpAe1ZTY4UpmfLBxK7g5c40fZK9CR7uV2Hy?=
 =?us-ascii?q?tA5J2usBSNKnCHZwRPFWwJWFaLB1X9Mbm1/9XA7/KUBumjL/vNfLWOr/ZRV+yT?=
 =?us-ascii?q?yJKr04tm+SuMN8qVMnljCf07xlRMXXRjF8vFnDUPTjQdlzjRYM6DuBe85ip3o9?=
 =?us-ascii?q?i/8fTsRQLv/JaPBKFUMdl14BC2hqGDN+GLiSZ9KDZY0I4MxHDSxLge2l4Slz9h?=
 =?us-ascii?q?dz23Hbscsi7NSbramrVLAB4DdyNzKMxI4ro83gZTOM7bidD11r9igv42EVdFUl?=
 =?us-ascii?q?Phld+zZcwXOGGwL1fHBEeNNLSbKjzH2cD3YaWgSbJOiOVYrQG/uTGeE0X7JDSM?=
 =?us-ascii?q?iyHpVwyzMeFLlCyUJgFet5qnchlzCWnvVtbmahygPd9zjD02x6A0h3zQOW4dNz?=
 =?us-ascii?q?h8b11CrrmK4SxEhfV/HnRL7mB5IumchyaZ8+7YJ44KsftqByR4jf5V7G4mxLtV?=
 =?us-ascii?q?8i5EQud4mC/Trt5ovlGnnfODyjthUBpStDlLgJiHslllOaXc7pNAQ2rL/AoR7W?=
 =?us-ascii?q?WMDBQHv9tkBcfpu6BVy9jPkrr8KTZC893O+8scCNPZKMaGMHonLBroFyTYDAoD?=
 =?us-ascii?q?TT63K27fg1ZRn+2V9n2Q/dAGrc3XkYEFSrYTdFUoG+lSXkdoBtoPJL9vUzUrjK?=
 =?us-ascii?q?KBi8gJ9TyyoU+VDOFHtZncHsmOCP7vYGKdy6JYbhAI6av1K4sOKpf83U1yLFV3?=
 =?us-ascii?q?ysCCMkvLXd1LrWVNSSkb6BFE8WN+Q2s8nU7ibAyF5m8LU/Wzm0hywjBibPwt+T?=
 =?us-ascii?q?GkyVAmKhKevyE3gUUZmtj/hz2VNjnrI/Hjc5tRDn/dvUU1eq32WA89OQS4kEgi?=
 =?us-ascii?q?KjrfTppXn6Mmfmdu3lyP8aBTEOJRGPUXKCQbwuuaMrBxiQxR?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AUAAC5sf9bh0O0hNFlHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGBMFBpcwQLJwqHNgOETos+SoINFJcuFIFfEwEYCwgBh3EiNAkNAQMBAQE?=
 =?us-ascii?q?BAQECARMBAQEIDQkIKSMMgjYkAYJiAwECAQIkGQEBNwEFCQEBAQEWBzEDLyUCB?=
 =?us-ascii?q?AENBQWDHAGCAQECAQEKmzECigeBbDOCdgEBBYFEQIUkCIwWgVc/gRGGMAEDgSQ?=
 =?us-ascii?q?EhhKLG4QNQ5A6BwKCHQSEXYo2FoInjnWIeI8tAgQCBAUCDQEBBYFGgg0zGiODP?=
 =?us-ascii?q?AmCEgwXg0qEUYYCcgGBBAEBIYpKgS4BgR4BAQ?=
X-IPAS-Result: =?us-ascii?q?A0AUAAC5sf9bh0O0hNFlHQEBBQEHBQGBUQgBCwGBMFBpcwQ?=
 =?us-ascii?q?LJwqHNgOETos+SoINFJcuFIFfEwEYCwgBh3EiNAkNAQMBAQEBAQECARMBAQEID?=
 =?us-ascii?q?QkIKSMMgjYkAYJiAwECAQIkGQEBNwEFCQEBAQEWBzEDLyUCBAENBQWDHAGCAQE?=
 =?us-ascii?q?CAQEKmzECigeBbDOCdgEBBYFEQIUkCIwWgVc/gRGGMAEDgSQEhhKLG4QNQ5A6B?=
 =?us-ascii?q?wKCHQSEXYo2FoInjnWIeI8tAgQCBAUCDQEBBYFGgg0zGiODPAmCEgwXg0qEUYY?=
 =?us-ascii?q?CcgGBBAEBIYpKgS4BgR4BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,294,1539673200"; 
   d="scan'208";a="54200538"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 01:33:05 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727666AbeK2Uea (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 29 Nov 2018 15:34:30 -0500
Received: from mail-eopbgr60050.outbound.protection.outlook.com ([40.107.6.50]:2224
        "EHLO EUR04-DB3-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1727347AbeK2Ue3 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 29 Nov 2018 15:34:29 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=nxp.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=r1HTIs0HIkQmyS5azJTEGlvOkh6BvPA/Kfw/MovTUmQ=;
 b=sVYmOeooJHmBivb3IobuBrUzDzYGad7DuO0Hi6RDK1kEE/LMMMxnWeThQK7HhftPxO68GfqDPIcGkHvTJquUq3vOsRUlkS8mcaOuvrObgpc9AdqxTPigUqtJ8FN1RRiJe2ySXb7t1xcI2n4UCSQUZsrDklC5sRfwuCyABvF7Fl0=
Received: from AM6PR0402MB3654.eurprd04.prod.outlook.com (52.133.28.145) by
 AM6PR0402MB3560.eurprd04.prod.outlook.com (52.133.19.161) with Microsoft SMTP
 Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1361.19; Thu, 29 Nov 2018 09:29:01 +0000
Received: from AM6PR0402MB3654.eurprd04.prod.outlook.com
 ([fe80::c46b:915c:7a03:123d]) by AM6PR0402MB3654.eurprd04.prod.outlook.com
 ([fe80::c46b:915c:7a03:123d%3]) with mapi id 15.20.1339.032; Thu, 29 Nov 2018
 09:29:01 +0000
From: Abel Vesa <abel.vesa@nxp.com>
To: Sascha Hauer <kernel@pengutronix.de>,
        Lucas Stach <l.stach@pengutronix.de>,
        Aisheng DONG <aisheng.dong@nxp.com>,
        Stephen Boyd <sboyd@kernel.org>
CC: Michael Turquette <mturquette@baylibre.com>,
        Rob Herring <robh@kernel.org>,
        Mark Rutland <mark.rutland@arm.com>,
        Shawn Guo <shawnguo@kernel.org>,
        Fabio Estevam <fabio.estevam@nxp.com>,
        dl-linux-imx <linux-imx@nxp.com>,
        "linux-clk@vger.kernel.org" <linux-clk@vger.kernel.org>,
        "devicetree@vger.kernel.org" <devicetree@vger.kernel.org>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        "linux-arm-kernel@lists.infradead.org" 
        <linux-arm-kernel@lists.infradead.org>,
        Abel Vesa <abelvesa@linux.com>, Abel Vesa <abel.vesa@nxp.com>
Subject: [PATCH v14 3/5] clk: imx: Add SCCG PLL type
Thread-Topic: [PATCH v14 3/5] clk: imx: Add SCCG PLL type
Thread-Index: AQHUh8Xno+5g76TEFUuUlHzqB+nHVw==
Date: Thu, 29 Nov 2018 09:28:35 +0000
Message-ID: <1543483640-4585-4-git-send-email-abel.vesa@nxp.com>
References: <1543483640-4585-1-git-send-email-abel.vesa@nxp.com>
In-Reply-To: <1543483640-4585-1-git-send-email-abel.vesa@nxp.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-clientproxiedby: AM6PR06CA0032.eurprd06.prod.outlook.com
 (2603:10a6:20b:14::45) To AM6PR0402MB3654.eurprd04.prod.outlook.com
 (2603:10a6:209:19::17)
x-originating-ip: [95.76.156.53]
authentication-results: spf=none (sender IP is )
 smtp.mailfrom=abel.vesa@nxp.com; 
x-ms-exchange-messagesentrepresentingtype: 1
x-ms-publictraffictype: Email
x-microsoft-exchange-diagnostics: 1;AM6PR0402MB3560;6:YATKs1sXH1UxPiGEzdsDfbiEdBwFMzCQid+JLrMsj2gYPUK/AiPxoKWxfq4E+9b+sXiMqYJ9tXQ6jHkJZYjOY/Hpjdz3ur0rpiWSec+bheZNXVm8WArZOPs1zGS2mBfDAwC/O/x79FMjwbbJwAfElf7D422Ha93ZdLTFcWM3/OkoKQ7nOjUwXbw8MmUIV4UBnVYoKsL89GjBIfOpbf+SN4Hme18WfpcAxezVxdSRA3pf6AW/zd7g/03wF7re521/CunvJjsvNFhL88464FYqrQ0lp48uSshuafIEg+lrfUrbh+pAzswlEYeo3ycG5IBAk7+eF50VWEyUqjkG1o+14JHqBqIVMFc4rDeEeWfESj77NQJDNQvoSospMdC3tSanJzPk2ifihaKVRD7FsKzwJ3qaWZYBp4HKvH578NTQx6/QDFJYwhO03/4m66ScDKJ8jtCbBj8Knv+/gNtp+o9IYQ==;5:Vt2S//Pm4YdQjWZZET3boRKK4OtrIS+WfGBSuSEjo3JgsMlctwM+N74CFzvo28qKrxMxgdzKRd+w/FEZX8js8ZDfbRhF6z4XGYFqCW7B4wN+lpvUmC1IsnivTgA4CD5eG+CwopeaJi25ji8pA1XJUZk4jAFOgt8cxeiCvpHPgrc=;7:0CYdfOjtRq3LBQ5WGsqcl2YHpnu2WLGakSEdfQBCwrcWvnc2iPLFDoQbBKa/pZpvaJ/Qouv0GCJO9H+9vyj5HoMZZYb6Elj3GYA8mnQnldtxJ9zlUl61iqtOG2Ai3N1ADN3SNdJvN0ZZUtl5ges9hw==
x-ms-office365-filtering-correlation-id: 82c99beb-cd7b-4776-7541-08d655dd0964
x-ms-office365-filtering-ht: Tenant
x-microsoft-antispam: BCL:0;PCL:0;RULEID:(2390098)(7020095)(4652040)(8989299)(5600074)(711020)(4618075)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(2017052603328)(7153060)(7193020);SRVR:AM6PR0402MB3560;
x-ms-traffictypediagnostic: AM6PR0402MB3560:
x-microsoft-antispam-prvs: <AM6PR0402MB35605B9F73DCAFC9CCF177CAF6D20@AM6PR0402MB3560.eurprd04.prod.outlook.com>
x-ms-exchange-senderadcheck: 1
x-exchange-antispam-report-cfa-test: BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(8121501046)(5005006)(10201501046)(93006095)(93001095)(3002001)(3231453)(999002)(944501410)(52105112)(6055026)(148016)(149066)(150057)(6041310)(20161123564045)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123558120)(20161123562045)(20161123560045)(201708071742011)(7699051)(76991095);SRVR:AM6PR0402MB3560;BCL:0;PCL:0;RULEID:;SRVR:AM6PR0402MB3560;
x-forefront-prvs: 0871917CDA
x-forefront-antispam-report: SFV:NSPM;SFS:(10009020)(136003)(366004)(396003)(39860400002)(376002)(346002)(199004)(189003)(4326008)(105586002)(6486002)(26005)(478600001)(966005)(97736004)(106356001)(217873002)(3846002)(14454004)(44832011)(2906002)(2616005)(5660300001)(71200400001)(7416002)(446003)(71190400001)(316002)(11346002)(66066001)(486006)(6506007)(81156014)(305945005)(7736002)(6436002)(25786009)(36756003)(81166006)(14444005)(6116002)(8936002)(110136005)(256004)(8676002)(476003)(6666004)(102836004)(54906003)(6512007)(6306002)(76176011)(68736007)(99286004)(52116002)(186003)(386003)(86362001)(53936002);DIR:OUT;SFP:1101;SCL:1;SRVR:AM6PR0402MB3560;H:AM6PR0402MB3654.eurprd04.prod.outlook.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;A:1;MX:1;
x-microsoft-antispam-message-info: 5cJSOsPXl9CXrC9cFl+sTpC0ppvCBwAvmRb8pkQYdChJmFbtYmhEqyoAx3OvJ+3cwvjklS6nL2mr4TPX1Pog7eV4hgyzR5hEEZ4A3W4FhOy3QfJaRBuHm8h9n81scQUqqYKeeQB9cgx6+aEUWK0EESBTBEiBhhlrbPFxKrvdAB4fOUPEqK92I2xolasuF5iwzw+8f0JVpPtkftBgF6uhPP137T0zX77Ixu/7HuKTZxYNrSsCd2VeBm2y7HHkwQWKqRpQcfoOoFyCIFPcgIG66cTxhD97lK4cv3EhlAFFTDN6riu77qKo5dguiCGHwWWTuBTAuYJCw/7hYKnr+SlJlfMgpfIzSq4wAG63ESCRcYc=
spamdiagnosticoutput: 1:99
spamdiagnosticmetadata: NSPM
Content-Type: text/plain; charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
X-OriginatorOrg: nxp.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 82c99beb-cd7b-4776-7541-08d655dd0964
X-MS-Exchange-CrossTenant-originalarrivaltime: 29 Nov 2018 09:28:35.6028
 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: 686ea1d3-bc2b-4c6f-a92c-d99c5c301635
X-MS-Exchange-Transport-CrossTenantHeadersStamped: AM6PR0402MB3560
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From: Lucas Stach <l.stach@pengutronix.de>

The SCCG is a new PLL type introduced on i.MX8.

The description of this SCCG clock can be found here:

https://www.nxp.com/docs/en/reference-manual/IMX8MDQLQRM.pdf#page=3D834

Signed-off-by: Lucas Stach <l.stach@pengutronix.de>
Signed-off-by: Abel Vesa <abel.vesa@nxp.com>
Reviewed-by: Sascha Hauer <s.hauer@pengutronix.de>
---
 drivers/clk/imx/Makefile       |   3 +-
 drivers/clk/imx/clk-sccg-pll.c | 256 +++++++++++++++++++++++++++++++++++++=
++++
 drivers/clk/imx/clk.h          |   9 ++
 3 files changed, 267 insertions(+), 1 deletion(-)
 create mode 100644 drivers/clk/imx/clk-sccg-pll.c

diff --git a/drivers/clk/imx/Makefile b/drivers/clk/imx/Makefile
index 4893c1f..b87513c 100644
--- a/drivers/clk/imx/Makefile
+++ b/drivers/clk/imx/Makefile
@@ -12,7 +12,8 @@ obj-y +=3D \
 	clk-pllv1.o \
 	clk-pllv2.o \
 	clk-pllv3.o \
-	clk-pfd.o
+	clk-pfd.o \
+	clk-sccg-pll.o
=20
 obj-$(CONFIG_SOC_IMX1)   +=3D clk-imx1.o
 obj-$(CONFIG_SOC_IMX21)  +=3D clk-imx21.o
diff --git a/drivers/clk/imx/clk-sccg-pll.c b/drivers/clk/imx/clk-sccg-pll.=
c
new file mode 100644
index 0000000..ee7752b
--- /dev/null
+++ b/drivers/clk/imx/clk-sccg-pll.c
@@ -0,0 +1,256 @@
+// SPDX-License-Identifier: (GPL-2.0 OR MIT)
+/*
+ * Copyright 2018 NXP.
+ *
+ * This driver supports the SCCG plls found in the imx8m SOCs
+ *
+ * Documentation for this SCCG pll can be found at:
+ *   https://www.nxp.com/docs/en/reference-manual/IMX8MDQLQRM.pdf#page=3D8=
34
+ */
+
+#include <linux/clk-provider.h>
+#include <linux/err.h>
+#include <linux/iopoll.h>
+#include <linux/slab.h>
+#include <linux/bitfield.h>
+
+#include "clk.h"
+
+/* PLL CFGs */
+#define PLL_CFG0		0x0
+#define PLL_CFG1		0x4
+#define PLL_CFG2		0x8
+
+#define PLL_DIVF1_MASK		GENMASK(18, 13)
+#define PLL_DIVF2_MASK		GENMASK(12, 7)
+#define PLL_DIVR1_MASK		GENMASK(27, 25)
+#define PLL_DIVR2_MASK		GENMASK(24, 19)
+#define PLL_REF_MASK		GENMASK(2, 0)
+
+#define PLL_LOCK_MASK		BIT(31)
+#define PLL_PD_MASK		BIT(7)
+
+#define OSC_25M			25000000
+#define OSC_27M			27000000
+
+#define PLL_SCCG_LOCK_TIMEOUT	70
+
+struct clk_sccg_pll {
+	struct clk_hw	hw;
+	void __iomem	*base;
+};
+
+#define to_clk_sccg_pll(_hw) container_of(_hw, struct clk_sccg_pll, hw)
+
+static int clk_pll_wait_lock(struct clk_sccg_pll *pll)
+{
+	u32 val;
+
+	return readl_poll_timeout(pll->base, val, val & PLL_LOCK_MASK, 0,
+					PLL_SCCG_LOCK_TIMEOUT);
+}
+
+static int clk_pll1_is_prepared(struct clk_hw *hw)
+{
+	struct clk_sccg_pll *pll =3D to_clk_sccg_pll(hw);
+	u32 val;
+
+	val =3D readl_relaxed(pll->base + PLL_CFG0);
+	return (val & PLL_PD_MASK) ? 0 : 1;
+}
+
+static unsigned long clk_pll1_recalc_rate(struct clk_hw *hw,
+					 unsigned long parent_rate)
+{
+	struct clk_sccg_pll *pll =3D to_clk_sccg_pll(hw);
+	u32 val, divf;
+
+	val =3D readl_relaxed(pll->base + PLL_CFG2);
+	divf =3D FIELD_GET(PLL_DIVF1_MASK, val);
+
+	return parent_rate * 2 * (divf + 1);
+}
+
+static long clk_pll1_round_rate(struct clk_hw *hw, unsigned long rate,
+			       unsigned long *prate)
+{
+	unsigned long parent_rate =3D *prate;
+	u32 div;
+
+	if (!parent_rate)
+		return 0;
+
+	div =3D rate / (parent_rate * 2);
+
+	return parent_rate * div * 2;
+}
+
+static int clk_pll1_set_rate(struct clk_hw *hw, unsigned long rate,
+			    unsigned long parent_rate)
+{
+	struct clk_sccg_pll *pll =3D to_clk_sccg_pll(hw);
+	u32 val;
+	u32 divf;
+
+	if (!parent_rate)
+		return -EINVAL;
+
+	divf =3D rate / (parent_rate * 2);
+
+	val =3D readl_relaxed(pll->base + PLL_CFG2);
+	val &=3D ~PLL_DIVF1_MASK;
+	val |=3D FIELD_PREP(PLL_DIVF1_MASK, divf - 1);
+	writel_relaxed(val, pll->base + PLL_CFG2);
+
+	return clk_pll_wait_lock(pll);
+}
+
+static int clk_pll1_prepare(struct clk_hw *hw)
+{
+	struct clk_sccg_pll *pll =3D to_clk_sccg_pll(hw);
+	u32 val;
+
+	val =3D readl_relaxed(pll->base + PLL_CFG0);
+	val &=3D ~PLL_PD_MASK;
+	writel_relaxed(val, pll->base + PLL_CFG0);
+
+	return clk_pll_wait_lock(pll);
+}
+
+static void clk_pll1_unprepare(struct clk_hw *hw)
+{
+	struct clk_sccg_pll *pll =3D to_clk_sccg_pll(hw);
+	u32 val;
+
+	val =3D readl_relaxed(pll->base + PLL_CFG0);
+	val |=3D PLL_PD_MASK;
+	writel_relaxed(val, pll->base + PLL_CFG0);
+
+}
+
+static unsigned long clk_pll2_recalc_rate(struct clk_hw *hw,
+					 unsigned long parent_rate)
+{
+	struct clk_sccg_pll *pll =3D to_clk_sccg_pll(hw);
+	u32 val, ref, divr1, divf1, divr2, divf2;
+	u64 temp64;
+
+	val =3D readl_relaxed(pll->base + PLL_CFG0);
+	switch (FIELD_GET(PLL_REF_MASK, val)) {
+	case 0:
+		ref =3D OSC_25M;
+		break;
+	case 1:
+		ref =3D OSC_27M;
+		break;
+	default:
+		ref =3D OSC_25M;
+		break;
+	}
+
+	val =3D readl_relaxed(pll->base + PLL_CFG2);
+	divr1 =3D FIELD_GET(PLL_DIVR1_MASK, val);
+	divr2 =3D FIELD_GET(PLL_DIVR2_MASK, val);
+	divf1 =3D FIELD_GET(PLL_DIVF1_MASK, val);
+	divf2 =3D FIELD_GET(PLL_DIVF2_MASK, val);
+
+	temp64 =3D ref * 2;
+	temp64 *=3D (divf1 + 1) * (divf2 + 1);
+
+	do_div(temp64, (divr1 + 1) * (divr2 + 1));
+
+	return temp64;
+}
+
+static long clk_pll2_round_rate(struct clk_hw *hw, unsigned long rate,
+			       unsigned long *prate)
+{
+	u32 div;
+	unsigned long parent_rate =3D *prate;
+
+	if (!parent_rate)
+		return 0;
+
+	div =3D rate / parent_rate;
+
+	return parent_rate * div;
+}
+
+static int clk_pll2_set_rate(struct clk_hw *hw, unsigned long rate,
+			    unsigned long parent_rate)
+{
+	u32 val;
+	u32 divf;
+	struct clk_sccg_pll *pll =3D to_clk_sccg_pll(hw);
+
+	if (!parent_rate)
+		return -EINVAL;
+
+	divf =3D rate / parent_rate;
+
+	val =3D readl_relaxed(pll->base + PLL_CFG2);
+	val &=3D ~PLL_DIVF2_MASK;
+	val |=3D FIELD_PREP(PLL_DIVF2_MASK, divf - 1);
+	writel_relaxed(val, pll->base + PLL_CFG2);
+
+	return clk_pll_wait_lock(pll);
+}
+
+static const struct clk_ops clk_sccg_pll1_ops =3D {
+	.is_prepared	=3D clk_pll1_is_prepared,
+	.recalc_rate	=3D clk_pll1_recalc_rate,
+	.round_rate	=3D clk_pll1_round_rate,
+	.set_rate	=3D clk_pll1_set_rate,
+};
+
+static const struct clk_ops clk_sccg_pll2_ops =3D {
+	.prepare	=3D clk_pll1_prepare,
+	.unprepare	=3D clk_pll1_unprepare,
+	.recalc_rate	=3D clk_pll2_recalc_rate,
+	.round_rate	=3D clk_pll2_round_rate,
+	.set_rate	=3D clk_pll2_set_rate,
+};
+
+struct clk *imx_clk_sccg_pll(const char *name,
+				const char *parent_name,
+				void __iomem *base,
+				enum imx_sccg_pll_type pll_type)
+{
+	struct clk_sccg_pll *pll;
+	struct clk_init_data init;
+	struct clk_hw *hw;
+	int ret;
+
+	switch (pll_type) {
+	case SCCG_PLL1:
+		init.ops =3D &clk_sccg_pll1_ops;
+		break;
+	case SCCG_PLL2:
+		init.ops =3D &clk_sccg_pll2_ops;
+		break;
+	default:
+		return ERR_PTR(-EINVAL);
+	}
+
+	pll =3D kzalloc(sizeof(*pll), GFP_KERNEL);
+	if (!pll)
+		return ERR_PTR(-ENOMEM);
+
+	init.name =3D name;
+	init.flags =3D 0;
+	init.parent_names =3D &parent_name;
+	init.num_parents =3D 1;
+
+	pll->base =3D base;
+	pll->hw.init =3D &init;
+
+	hw =3D &pll->hw;
+
+	ret =3D clk_hw_register(NULL, hw);
+	if (ret) {
+		kfree(pll);
+		return ERR_PTR(ret);
+	}
+
+	return hw->clk;
+}
diff --git a/drivers/clk/imx/clk.h b/drivers/clk/imx/clk.h
index 44a1f14..864cd8a 100644
--- a/drivers/clk/imx/clk.h
+++ b/drivers/clk/imx/clk.h
@@ -21,6 +21,11 @@ enum imx_pllv1_type {
 	IMX_PLLV1_IMX35,
 };
=20
+enum imx_sccg_pll_type {
+	SCCG_PLL1,
+	SCCG_PLL2,
+};
+
 struct clk *imx_clk_pllv1(enum imx_pllv1_type type, const char *name,
 		const char *parent, void __iomem *base);
=20
@@ -30,6 +35,10 @@ struct clk *imx_clk_pllv2(const char *name, const char *=
parent,
 struct clk *imx_clk_frac_pll(const char *name, const char *parent_name,
 			     void __iomem *base);
=20
+struct clk *imx_clk_sccg_pll(const char *name, const char *parent_name,
+			     void __iomem *base,
+			     enum imx_sccg_pll_type pll_type);
+
 enum imx_pllv3_type {
 	IMX_PLLV3_GENERIC,
 	IMX_PLLV3_SYS,
--=20
2.7.4

