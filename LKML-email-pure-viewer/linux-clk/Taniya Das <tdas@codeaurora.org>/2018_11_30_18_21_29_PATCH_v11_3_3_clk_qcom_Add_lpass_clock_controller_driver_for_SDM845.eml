Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:21:30 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id EAB5D580213;
	Fri, 30 Nov 2018 10:22:06 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 30 Nov 2018 10:22:06 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A3fBKBRyj9Svpv0jXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e4eLvad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWpPUNhMWSJPAY2y?=
 =?us-ascii?q?aIkAD+QaPeZArYTwvEcCoQekCAWwHu7j1iNEi3nr1qM6yeQhFgTG0RQ+Ed0Utn?=
 =?us-ascii?q?TUrdX0O70PWu671qbI1ijIYvRK2Tjg8ofIaQssru2LXb1tb8Xe01QvFxnCjlWK?=
 =?us-ascii?q?s4PpJTSV1v4Cs2WC6edrSOGhi3Y/pg1vvjSiwt0ghpTHi44L0FzI6CZ0zJovKd?=
 =?us-ascii?q?C5SkN3ecOoHIdeui2AKYd6XMcvT3t1tCs+0LEKpJq2cS4Xw5o93RHfceaIc42Q?=
 =?us-ascii?q?7xLjSumRJTB4iWp7eLKwmRmy61Ksyu7iWcmu1lZFsC5FnsPLtnAX2Bzf8smHSv?=
 =?us-ascii?q?1j8Ue9wTuDyRzf5+VeLUwpm6fXNYQtzqMzm5YPq0jOHy37lF3zjKCMd0Uk/uao?=
 =?us-ascii?q?6/7gYrXjvpKcM450igfjMqUhg8C/Avo3MhIIX2eF/eSwzbrj/EP/QLpUlP07ib?=
 =?us-ascii?q?fZsJ/EKsQBvKK5ABFa0pwl6xmhCzeqytMYnWMILF5dYhKIk5DpO03SIPD/Ffq/?=
 =?us-ascii?q?h1WskDR1yPzcMbzhH47ALnzCkLfnYLZ85FRQyAs1zdBD+Z1UDqsNL+70Wk/0rN?=
 =?us-ascii?q?bYFAM2MxSow+b7D9VwzoMeVniOAq+FKqzStkWE5uIyI+aWYo8Vty3wK/wk5/7o?=
 =?us-ascii?q?kH84lkURfaiv3ZsLdn+4Gu5qLFmeYXrpmt0BC3sFvhIiTOz2j12PSTxTZ3GsUK?=
 =?us-ascii?q?4m5TE7D4SmDYHERo22hLyB3SG7HoBZZ2xcC1CMF2voeJuAW/sWdC2SJcphmCQe?=
 =?us-ascii?q?Vbe9U48hyQ2utAjixrV9NerU+ioYtZH52Nhv/eLTlwo/9Th1D8SbzmGMQHt4nm?=
 =?us-ascii?q?IORz8qwq9/pVZxxUuE0ah9m/ZYD8Bc5+tVUgcmMp7R1+96BMr0Wg7beteJSUyp?=
 =?us-ascii?q?QtOpATwqStIxwtkOY1tyGtm4jxDD2TaqDKERl7CRGJM09afc1WDrJ8lh03bGyL?=
 =?us-ascii?q?Uhj14+T8RSL2KmmLBw+xLTB4HTlUWZjLildaIb0C7J92eDyG6OsVpcUA5xV6XF?=
 =?us-ascii?q?QH8ealHXrdT/+kPNUbuuBa47PQtGzM6IMrFKZcHxjVVaWPfjP8zTbH+rlGeuGx?=
 =?us-ascii?q?mE3LOMY5Dse2UGwirdDlMJkwQS/XaAKAg/CT2to2PYDDxyC13vZ1ng/vV5qHO+?=
 =?us-ascii?q?VkU01R2Fb1V917qp/R4YneCcS/IW3rIDpCchqzV1EEyh397MDNqAvQ5hfKRaYd?=
 =?us-ascii?q?My+1pH0WPZtwpgPp2vNaxih1gecxhpsEPqzRl4FoJAkc0ypnMw0AVyMb6Y0E9G?=
 =?us-ascii?q?dz6Ax5/wPqPYK2bs8xGvcaLZwUze38uM9acJ6/Q4rEvjsRqtFkoj9XVnztZU32?=
 =?us-ascii?q?Gd5pXMEAodT5bxXlwr+Bh9orHQejM96J/M1X1wLam0tSfP2tI0BOc/1hmsZdZe?=
 =?us-ascii?q?MKOeGw/0HM0XHMyuKO0sm1i0YRMIJuFS9KgoP8y4c/uKwrKkPOFlnDi+l2RI/J?=
 =?us-ascii?q?h90l6Q9yp7UuPIxZcFzO2C0QudSjj8i02tssbploBeZDEeB3awxjLgBIFMeKJy?=
 =?us-ascii?q?Z4ELCWG1Ls2zx9V+gYPtWnFC+F6iAVMGxNGmeR6IY1Ph2g1Q0FwdoWa7liug0z?=
 =?us-ascii?q?x0jzYpo7Kf3SzP2ejjdAALOnVWRGlkllrsJYm0j9YHXEmndQQplR2l5VrkyKhf?=
 =?us-ascii?q?vqhwM27TQUJQdSjsM25iSrewtqaFY8NX6pMnqz9XUOe/YVCdULL9uAEV0yDgH2?=
 =?us-ascii?q?tfwjA0aTeqt479nxx7jmKdMXlyoGDYecF22RfQ+tjcSeRN0ToBQSlykSPXCUSk?=
 =?us-ascii?q?P9m14dWUkI/Os+CkWGKmTJFTcyjrzYWbuSu/5G1qBwC/nv+plt3mFwg6zTH019?=
 =?us-ascii?q?1wWSrUqxb8Z5Hh176mPuJ/YkloGFj85tJ5Go5kk4s8npEQ2WUAiZWT8noKimPz?=
 =?us-ascii?q?MdRd2aLjY3sBXz8Lw9jJ4Af73E1vNG6Gx4X8Vn+F2Mtue8G6Yn8K2iI6981KDa?=
 =?us-ascii?q?aU7L9ekidvrFu3sxnRYeRjkTcH0vQh9mQag+4StQopzyWdBK0SHEZCMSztkRSI?=
 =?us-ascii?q?886xrKFNaGmzdriw0VJ0ncq9A7GavgFcRHH5d48+HS9368VzKlPN32f16oH5Y9?=
 =?us-ascii?q?nQdtMTuwaQkxfBiehVNZ0wmuALhSphJWLyo3klx/Qnghxp2JGwpJKHJHl1/KKl?=
 =?us-ascii?q?Hh5YMSX4aNgJ9THqiaZeg9ya34SyHph6HjULXZ3oTe+nET4ItPTnMRqOHyM4qn?=
 =?us-ascii?q?uBBbXfGgqf4l98r33TC5CrK22XJH4BwNVgXhadIVJQgBsOUDUmhJI5FR2qxM/8?=
 =?us-ascii?q?cEd//D8R/UX1qh9NyuJuKhn+XX3TpAauajcoVpefKABa4R1F50fQKcae9P58Hz?=
 =?us-ascii?q?lE/p29qwyAMmyaZwNVDWEQR0yLHVbjMqO15dnH9eiYCfGzL//PYbWItOxfWO2E?=
 =?us-ascii?q?xZOp0ot64TmMMt+DMWVlD/0+wkBDR2x2G9zFmzUTTCwajyLNYNCapBe/+S13r9?=
 =?us-ascii?q?qz8PfxWALo6ouAFaFSMch0+x2thaeDNuiQhDt2KDpC15MMw2PIx6Yb3FIIly5u?=
 =?us-ascii?q?cDytG6watSHRVKLQhrNXDxkDZixpKctH9Lg80RdNOMLBjtP116V1jvo0C1dDSF?=
 =?us-ascii?q?zgldulZc0MI2GhKlzHAFyHO6iBJT3O28v3e7+zSaVMjOVIsB29oSqbE07mPjiZ?=
 =?us-ascii?q?izblTQygMeFSgyGdJxFevIC9chBwCWnsVt7maxu7MMNpgj0y27E7mnTKNWsEOz?=
 =?us-ascii?q?hmb0xNtqGQ7T9fgvhnG21O9HxlLeyFmyaf9+bZK5YWvuFtAiR7jO9a5HU6y71I?=
 =?us-ascii?q?7CBLXvB1mS3SrsJwrFGiiOWA1j1nUB8d4gpM0bmXsF1iNKOR3J5RVT6Q5xgK/G?=
 =?us-ascii?q?m4CBkQodZhTNr1tPYUgv3On6L6JTMKz8/O5NYRG9TZYJaCLGc7KAfkBCLZJAEM?=
 =?us-ascii?q?XDqqP3vSwUdalafB2GeSq80Go57tiZNGZrZAHAgpGvoBIk9iENELPY1wRDpilq?=
 =?us-ascii?q?SU2p1brUGipQXcEZ0J9qvMUeifVLC2cG6U?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AWAADRfgFch0O0hNFjHgEGBwaBUQkLA?=
 =?us-ascii?q?YIAaYECJ4xwjUyXNBSBYhEYBwwBh3YiNAkNAQMBAQEBAQECARMBAQEIDQkIKSM?=
 =?us-ascii?q?MgjYkAYJiAwMBAiQZAQE3AQUJAQEYOAMpKwYBCggFgxwBggABBaVpgWwzgnYBA?=
 =?us-ascii?q?QWHJgiHbIMSgRwXgUA/gRGCZIFvgwUfBYVyjyx7j0pGCYZ/ijoWiVmHRoh7j2K?=
 =?us-ascii?q?BRoINMxoIKAiDJwmCEgwMC4YzgiuFRzgygQUBAY1AAQE?=
X-IPAS-Result: =?us-ascii?q?A0AWAADRfgFch0O0hNFjHgEGBwaBUQkLAYIAaYECJ4xwjUy?=
 =?us-ascii?q?XNBSBYhEYBwwBh3YiNAkNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkAYJiAwMBA?=
 =?us-ascii?q?iQZAQE3AQUJAQEYOAMpKwYBCggFgxwBggABBaVpgWwzgnYBAQWHJgiHbIMSgRw?=
 =?us-ascii?q?XgUA/gRGCZIFvgwUfBYVyjyx7j0pGCYZ/ijoWiVmHRoh7j2KBRoINMxoIKAiDJ?=
 =?us-ascii?q?wmCEgwMC4YzgiuFRzgygQUBAY1AAQE?=
X-IronPort-AV: E=Sophos;i="5.56,299,1539673200"; 
   d="scan'208";a="64787984"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 30 Nov 2018 10:22:04 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726809AbeLAFcJ (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sat, 1 Dec 2018 00:32:09 -0500
Received: from smtp.codeaurora.org ([198.145.29.96]:41178 "EHLO
        smtp.codeaurora.org" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725817AbeLAFcJ (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sat, 1 Dec 2018 00:32:09 -0500
Received: by smtp.codeaurora.org (Postfix, from userid 1000)
        id E6162612F1; Fri, 30 Nov 2018 18:21:59 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=codeaurora.org;
        s=default; t=1543602120;
        bh=C5ujJiDBQhBiztzoYoznXorOEKuwW5UUFaTfl6Po2UY=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=cPyWtFtKYqHrInF4Pyr7nVS2edFtAj85Ul2prnaIHMihBHBnGt7c+X2fszB3qfXL1
         Af531JUOLFgBaGVRNoBf/E3u8AHeKLOg5LsFXmDWZhLPM0EaKi3fCDUWtjG1853S+z
         YSxRH5FFRnU/RHsEK55xo16QEHjhK74vCzEvNVRs=
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
        pdx-caf-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-2.7 required=2.0 tests=ALL_TRUSTED,BAYES_00,
        DKIM_INVALID,DKIM_SIGNED autolearn=no autolearn_force=no version=3.4.0
Received: from tdas-linux.qualcomm.com (blr-c-bdr-fw-01_globalnat_allzones-outside.qualcomm.com [103.229.19.19])
        (using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
        (No client certificate requested)
        (Authenticated sender: tdas@smtp.codeaurora.org)
        by smtp.codeaurora.org (Postfix) with ESMTPSA id 2167761314;
        Fri, 30 Nov 2018 18:21:53 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=codeaurora.org;
        s=default; t=1543602118;
        bh=C5ujJiDBQhBiztzoYoznXorOEKuwW5UUFaTfl6Po2UY=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=Wsn/Q06tyIjmC+Kd1ll3IqssLbTCwKAj0DLaSfCTzL3wZ03H3bbOXD+wmc8knPSj4
         J2U63eaVyLZVVqQ7MobDA/yqBIlA2UUOMr2EnhTxknwgzPIQNccR08UXfT78NqJclH
         yiA3/KLnbKrdAdtgNIowuWgZMkZJIo0GJ4h4NbkU=
DMARC-Filter: OpenDMARC Filter v1.3.2 smtp.codeaurora.org 2167761314
Authentication-Results: pdx-caf-mail.web.codeaurora.org; dmarc=none (p=none dis=none) header.from=codeaurora.org
Authentication-Results: pdx-caf-mail.web.codeaurora.org; spf=none smtp.mailfrom=tdas@codeaurora.org
From: Taniya Das <tdas@codeaurora.org>
To: Stephen Boyd <sboyd@kernel.org>,
        Michael Turquette <mturquette@baylibre.com>
Cc: Andy Gross <andy.gross@linaro.org>,
        David Brown <david.brown@linaro.org>,
        Rajendra Nayak <rnayak@codeaurora.org>,
        linux-arm-msm@vger.kernel.org, linux-soc@vger.kernel.org,
        linux-clk@vger.kernel.org, linux-kernel@vger.kernel.org,
        devicetree@vger.kernel.org, robh@kernel.org,
        Taniya Das <tdas@codeaurora.org>
Subject: [PATCH v11 3/3] clk: qcom: Add lpass clock controller driver for SDM845
Date: Fri, 30 Nov 2018 23:51:29 +0530
Message-Id: <1543602089-21086-4-git-send-email-tdas@codeaurora.org>
X-Mailer: git-send-email 1.9.1
In-Reply-To: <1543602089-21086-1-git-send-email-tdas@codeaurora.org>
References: <1543602089-21086-1-git-send-email-tdas@codeaurora.org>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Add support for the lpass clock controller found on SDM845 based devices.
This would allow lpass peripheral loader drivers to control the clocks to
bring the subsystem out of reset.
LPASS clocks present on the global clock controller would be registered
with the clock framework based on the protected-clock flag. Also do not
gate these clocks if they are left unused, as the lpass clocks require
the global clock controller lpass clocks to be enabled before they are
accessed. Mark the GCC lpass clocks as CRITICAL, for the LPASS clock
access.

Signed-off-by: Taniya Das <tdas@codeaurora.org>
---
 drivers/clk/qcom/Kconfig          |   9 ++
 drivers/clk/qcom/Makefile         |   1 +
 drivers/clk/qcom/gcc-sdm845.c     |  32 +++++++
 drivers/clk/qcom/lpasscc-sdm845.c | 179 ++++++++++++++++++++++++++++++++++++++
 4 files changed, 221 insertions(+)
 create mode 100644 drivers/clk/qcom/lpasscc-sdm845.c

diff --git a/drivers/clk/qcom/Kconfig b/drivers/clk/qcom/Kconfig
index 6f3e466..d87a22e 100644
--- a/drivers/clk/qcom/Kconfig
+++ b/drivers/clk/qcom/Kconfig
@@ -302,6 +302,15 @@ config SDM_DISPCC_845
 	  Say Y if you want to support display devices and functionality such as
 	  splash screen.

+config SDM_LPASSCC_845
+	tristate "SDM845 Low Power Audio Subsystem (LPAAS) Clock Controller"
+	depends on COMMON_CLK_QCOM
+	select SDM_GCC_845
+	help
+	  Support for the LPASS clock controller on SDM845 devices.
+	  Say Y if you want to use the LPASS branch clocks of the LPASS clock
+	  controller to reset the LPASS subsystem.
+
 config SPMI_PMIC_CLKDIV
 	tristate "SPMI PMIC clkdiv Support"
 	depends on (COMMON_CLK_QCOM && SPMI) || COMPILE_TEST
diff --git a/drivers/clk/qcom/Makefile b/drivers/clk/qcom/Makefile
index 6ed2827..ee8d069 100644
--- a/drivers/clk/qcom/Makefile
+++ b/drivers/clk/qcom/Makefile
@@ -47,6 +47,7 @@ obj-$(CONFIG_SDM_DISPCC_845) += dispcc-sdm845.o
 obj-$(CONFIG_SDM_GCC_660) += gcc-sdm660.o
 obj-$(CONFIG_SDM_GCC_845) += gcc-sdm845.o
 obj-$(CONFIG_SDM_GPUCC_845) += gpucc-sdm845.o
+obj-$(CONFIG_SDM_LPASSCC_845) += lpasscc-sdm845.o
 obj-$(CONFIG_SDM_VIDEOCC_845) += videocc-sdm845.o
 obj-$(CONFIG_SPMI_PMIC_CLKDIV) += clk-spmi-pmic-div.o
 obj-$(CONFIG_KPSS_XCC) += kpss-xcc.o
diff --git a/drivers/clk/qcom/gcc-sdm845.c b/drivers/clk/qcom/gcc-sdm845.c
index f133b7f..db90f9b 100644
--- a/drivers/clk/qcom/gcc-sdm845.c
+++ b/drivers/clk/qcom/gcc-sdm845.c
@@ -3153,6 +3153,34 @@ enum {
 	},
 };

+static struct clk_branch gcc_lpass_q6_axi_clk = {
+	.halt_reg = 0x47000,
+	.halt_check = BRANCH_HALT,
+	.clkr = {
+		.enable_reg = 0x47000,
+		.enable_mask = BIT(0),
+		.hw.init = &(struct clk_init_data){
+			.name = "gcc_lpass_q6_axi_clk",
+			.flags = CLK_IS_CRITICAL,
+			.ops = &clk_branch2_ops,
+		},
+	},
+};
+
+static struct clk_branch gcc_lpass_sway_clk = {
+	.halt_reg = 0x47008,
+	.halt_check = BRANCH_HALT,
+	.clkr = {
+		.enable_reg = 0x47008,
+		.enable_mask = BIT(0),
+		.hw.init = &(struct clk_init_data){
+			.name = "gcc_lpass_sway_clk",
+			.flags = CLK_IS_CRITICAL,
+			.ops = &clk_branch2_ops,
+		},
+	},
+};
+
 static struct gdsc pcie_0_gdsc = {
 	.gdscr = 0x6b004,
 	.pd = {
@@ -3453,6 +3481,10 @@ enum {
 	[GCC_QSPI_CORE_CLK_SRC] = &gcc_qspi_core_clk_src.clkr,
 	[GCC_QSPI_CORE_CLK] = &gcc_qspi_core_clk.clkr,
 	[GCC_QSPI_CNOC_PERIPH_AHB_CLK] = &gcc_qspi_cnoc_periph_ahb_clk.clkr,
+#ifdef CONFIG_SDM_LPASSCC_845
+	[GCC_LPASS_Q6_AXI_CLK] = &gcc_lpass_q6_axi_clk.clkr,
+	[GCC_LPASS_SWAY_CLK] = &gcc_lpass_sway_clk.clkr,
+#endif
 };

 static const struct qcom_reset_map gcc_sdm845_resets[] = {
diff --git a/drivers/clk/qcom/lpasscc-sdm845.c b/drivers/clk/qcom/lpasscc-sdm845.c
new file mode 100644
index 0000000..e246b99
--- /dev/null
+++ b/drivers/clk/qcom/lpasscc-sdm845.c
@@ -0,0 +1,179 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (c) 2018, The Linux Foundation. All rights reserved.
+ */
+
+#include <linux/platform_device.h>
+#include <linux/module.h>
+#include <linux/of_address.h>
+#include <linux/regmap.h>
+
+#include <dt-bindings/clock/qcom,lpass-sdm845.h>
+
+#include "clk-regmap.h"
+#include "clk-branch.h"
+#include "common.h"
+
+static struct clk_branch lpass_q6ss_ahbm_aon_clk = {
+	.halt_reg = 0x12000,
+	.halt_check = BRANCH_VOTED,
+	.clkr = {
+		.enable_reg = 0x12000,
+		.enable_mask = BIT(0),
+		.hw.init = &(struct clk_init_data){
+			.name = "lpass_q6ss_ahbm_aon_clk",
+			.ops = &clk_branch2_ops,
+		},
+	},
+};
+
+static struct clk_branch lpass_q6ss_ahbs_aon_clk = {
+	.halt_reg = 0x1f000,
+	.halt_check = BRANCH_VOTED,
+	.clkr = {
+		.enable_reg = 0x1f000,
+		.enable_mask = BIT(0),
+		.hw.init = &(struct clk_init_data){
+			.name = "lpass_q6ss_ahbs_aon_clk",
+			.ops = &clk_branch2_ops,
+		},
+	},
+};
+
+static struct clk_branch lpass_qdsp6ss_core_clk = {
+	.halt_reg = 0x20,
+	/* CLK_OFF would not toggle until LPASS is out of reset */
+	.halt_check = BRANCH_HALT_SKIP,
+	.clkr = {
+		.enable_reg = 0x20,
+		.enable_mask = BIT(0),
+		.hw.init = &(struct clk_init_data){
+			.name = "lpass_qdsp6ss_core_clk",
+			.ops = &clk_branch2_ops,
+		},
+	},
+};
+
+static struct clk_branch lpass_qdsp6ss_xo_clk = {
+	.halt_reg = 0x38,
+	/* CLK_OFF would not toggle until LPASS is out of reset */
+	.halt_check = BRANCH_HALT_SKIP,
+	.clkr = {
+		.enable_reg = 0x38,
+		.enable_mask = BIT(0),
+		.hw.init = &(struct clk_init_data){
+			.name = "lpass_qdsp6ss_xo_clk",
+			.ops = &clk_branch2_ops,
+		},
+	},
+};
+
+static struct clk_branch lpass_qdsp6ss_sleep_clk = {
+	.halt_reg = 0x3c,
+	/* CLK_OFF would not toggle until LPASS is out of reset */
+	.halt_check = BRANCH_HALT_SKIP,
+	.clkr = {
+		.enable_reg = 0x3c,
+		.enable_mask = BIT(0),
+		.hw.init = &(struct clk_init_data){
+			.name = "lpass_qdsp6ss_sleep_clk",
+			.ops = &clk_branch2_ops,
+		},
+	},
+};
+
+static struct regmap_config lpass_regmap_config = {
+	.reg_bits	= 32,
+	.reg_stride	= 4,
+	.val_bits	= 32,
+	.fast_io	= true,
+};
+
+static struct clk_regmap *lpass_cc_sdm845_clocks[] = {
+	[LPASS_Q6SS_AHBM_AON_CLK] = &lpass_q6ss_ahbm_aon_clk.clkr,
+	[LPASS_Q6SS_AHBS_AON_CLK] = &lpass_q6ss_ahbs_aon_clk.clkr,
+};
+
+static const struct qcom_cc_desc lpass_cc_sdm845_desc = {
+	.config = &lpass_regmap_config,
+	.clks = lpass_cc_sdm845_clocks,
+	.num_clks = ARRAY_SIZE(lpass_cc_sdm845_clocks),
+};
+
+static struct clk_regmap *lpass_qdsp6ss_sdm845_clocks[] = {
+	[LPASS_QDSP6SS_XO_CLK] = &lpass_qdsp6ss_xo_clk.clkr,
+	[LPASS_QDSP6SS_SLEEP_CLK] = &lpass_qdsp6ss_sleep_clk.clkr,
+	[LPASS_QDSP6SS_CORE_CLK] = &lpass_qdsp6ss_core_clk.clkr,
+};
+
+static const struct qcom_cc_desc lpass_qdsp6ss_sdm845_desc = {
+	.config = &lpass_regmap_config,
+	.clks = lpass_qdsp6ss_sdm845_clocks,
+	.num_clks = ARRAY_SIZE(lpass_qdsp6ss_sdm845_clocks),
+};
+
+static int lpass_clocks_sdm845_probe(struct platform_device *pdev, int index,
+				     const struct qcom_cc_desc *desc)
+{
+	struct regmap *regmap;
+	struct resource *res;
+	void __iomem *base;
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, index);
+	base = devm_ioremap_resource(&pdev->dev, res);
+	if (IS_ERR(base))
+		return PTR_ERR(base);
+
+	regmap = devm_regmap_init_mmio(&pdev->dev, base, desc->config);
+	if (IS_ERR(regmap))
+		return PTR_ERR(regmap);
+
+	return qcom_cc_really_probe(pdev, desc, regmap);
+}
+
+static int lpass_cc_sdm845_probe(struct platform_device *pdev)
+{
+	const struct qcom_cc_desc *desc;
+	int ret;
+
+	lpass_regmap_config.name = "cc";
+	desc = &lpass_cc_sdm845_desc;
+
+	ret = lpass_clocks_sdm845_probe(pdev, 0, desc);
+	if (ret)
+		return ret;
+
+	lpass_regmap_config.name = "qdsp6ss";
+	desc = &lpass_qdsp6ss_sdm845_desc;
+
+	return lpass_clocks_sdm845_probe(pdev, 1, desc);
+}
+
+static const struct of_device_id lpass_cc_sdm845_match_table[] = {
+	{ .compatible = "qcom,sdm845-lpasscc" },
+	{ }
+};
+MODULE_DEVICE_TABLE(of, lpass_cc_sdm845_match_table);
+
+static struct platform_driver lpass_cc_sdm845_driver = {
+	.probe		= lpass_cc_sdm845_probe,
+	.driver		= {
+		.name	= "sdm845-lpasscc",
+		.of_match_table = lpass_cc_sdm845_match_table,
+	},
+};
+
+static int __init lpass_cc_sdm845_init(void)
+{
+	return platform_driver_register(&lpass_cc_sdm845_driver);
+}
+subsys_initcall(lpass_cc_sdm845_init);
+
+static void __exit lpass_cc_sdm845_exit(void)
+{
+	platform_driver_unregister(&lpass_cc_sdm845_driver);
+}
+module_exit(lpass_cc_sdm845_exit);
+
+MODULE_DESCRIPTION("QTI LPASS_CC SDM845 Driver");
+MODULE_LICENSE("GPL v2");
--
Qualcomm INDIA, on behalf of Qualcomm Innovation Center, Inc.is a member
of the Code Aurora Forum, hosted by the  Linux Foundation.

