Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 04 Dec 2018 20:37:23 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 28880580375;
	Tue,  4 Dec 2018 03:24:40 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 04 Dec 2018 03:24:40 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AJtiLjhM2GlLtVMF5Yx0l6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KPjzoMbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRsZfWTJcDI2y?=
 =?us-ascii?q?bIUBCOgOPehWoIbyu1QAogC+BRGuCe701j9FhXH70bEg3uk7EwzL2hErEdIUsH?=
 =?us-ascii?q?TTqdX4LKYcUfqrw6nH0D7NaulW2TDn54jIaxwvo+uDXahsccrU00YvER7Og1Kf?=
 =?us-ascii?q?qYz/ITyV2ecNs2iA4upkVOKvjXMnqg5/ojio28csjJTGiZgJylDF8iV5xpw5Jd?=
 =?us-ascii?q?qiSE50eNOpFoZbuSKCN4ZuXM8uX2VltDwnxrAIp5K3ZjUGxZc7yxLFavGKcZCE?=
 =?us-ascii?q?7xHtWeqLIjp1hWhpdbG7ihqo7ESs1u/xW8+p21hQtCVFiMPDtnUV2hzT9MeHTv?=
 =?us-ascii?q?x981+/2TaAyQ/T8PtIIUMqmqrBLZ4u3LowmoAUsUTZES/6gET2jKmIeUU44uWk?=
 =?us-ascii?q?9fjrb7H8qpOBOYJ4lBvyPrktl8CjG+g1MwoDU3Ce+eum1b3j+UP5QK9Njv0ziq?=
 =?us-ascii?q?TZtJHaJcIGpq+2GgNV0Zgs6wy5Dzi41NQUhH4HLVxDeB2ZlYjkIE/OIP/mAvel?=
 =?us-ascii?q?mViskylkx+rAPrL/BpXBNH/DkK3ufbpl8U5T1BIzzcxD55JTErwBJPPzWkzvu9?=
 =?us-ascii?q?DCAR45Lhe5w+LmCNV7y4MfVniDAq6fMKPOr1CI4vgjLPWLZI8QoDz9MeQq5+by?=
 =?us-ascii?q?jX8lnl8QZamp0oEWaHCkBPtmJF+VYXrxgtgbF2cKsREzTOjriF2ETD5SaGy+X6?=
 =?us-ascii?q?M65jEnFo2mCZ3PSZyqgLyExC27BIFZZnhaClCQFnflb4eEW/ASZy6IIc9hlToE?=
 =?us-ascii?q?Vb6mS4I60RGutQn6y6doL+bO+y0Ys47j28Zx5+HJiR4y8jl0BdyH026RV2F0gn?=
 =?us-ascii?q?8IRzgu0a9lukx9ylCD0atij/xCD9NT5ehEUgM7NZ7a0ux7BMr+WgPHfteVVlmm?=
 =?us-ascii?q?Rs+qDi02TtI029UOeVpyG82+jhDf2CqnG7wVmKaNBJAu9qLc3mL+J8Byy3vd0K?=
 =?us-ascii?q?khjl8mQtZANGG8h65/8RTTCJDNk0mDi6mqcqEc1jbX9Gif1WqOoF1YUAloXKrY?=
 =?us-ascii?q?R38feFXZoc755kzYSb+uEqooMg1Gxc6GKatKb9npgE5CRPfiPtTefm2wl32xBR?=
 =?us-ascii?q?aO2rODco7qd38B0yXaDUgOixoT8mqeNQgiGiehpHrTAyF0GlLxfUzg6+l+p2m9?=
 =?us-ascii?q?Tk8v0Q6KaVZs1760+h4TmPydROkf3rMCuCc9tTp0GEyx0M7RC9qFvwBhZrlTYc?=
 =?us-ascii?q?sh4Fdb0mLUrxB9Pp2lL6Blml4ecwR2s1ny1xltDYVAi8wqrHIszAp9Mq+Y1FJB?=
 =?us-ascii?q?dzWF3ZH/ILHXK2/y/AyxZK7SwF3RzNGW+qIX4vQit1rjpB2pFlYl83h/ydZV12?=
 =?us-ascii?q?WT55rUAwsSS57+SVs3+AVgqLHcYSk94J3U2GZoMam1tD/Cxt0oCPEkyhamY9dQ?=
 =?us-ascii?q?LqeEGBXuHM0dAsikMPYqlESxbhIYIOBS87Y5PsO7d/ecxKGnJudhnDK8gmRB74?=
 =?us-ascii?q?BwyUaM9yt6Su7V0JcJ2fCY3g2bVzjiiFetqNz4mYdBZTsKBGqw1TDkBJJNZq11?=
 =?us-ascii?q?ZYsLE2auLNGtydVkmpHtXGRU9Fi9CFMc2c+lYAadYEb53QJNy0sXu3unmS2jwj?=
 =?us-ascii?q?xwkjEpqLef3SPUz+TjchoHJnBERG14gVjwJoi0isgQXFK0YAgxiBul+UH6yrBb?=
 =?us-ascii?q?paR+NWXSQV1EfzPrL2FkSaawsruCY8hS6JInqylXUeK8YUyERb75uRcVzyTjH2?=
 =?us-ascii?q?5GzjAhaz6qoon5nwB9iG+FLnZ8tmDZecJzxRfY/tDcXuRe3jkFRCl5jznYGF68?=
 =?us-ascii?q?MsKt/dWVkZfDr++/W3igVp1VbSnk04eAuDGn6m1tBB21h+qzlcH/EQgmzS/70M?=
 =?us-ascii?q?FnVCXSoxb7eIXr1aW6MeR8c0lsBV/87dd6G45knosxgpEQxWYVhpGP8XUblmfz?=
 =?us-ascii?q?NM1R2bjiY3oVWT4L39nV7RDm2EJ5L3KF3YL5VmiHzctnaNm3eWcW2iM778BXB6?=
 =?us-ascii?q?aY9r1EnS1polWmqQLde+RynjAYyfE28n4Vn/kJuBYxziWaGr0SGEhYPS/2mBiS?=
 =?us-ascii?q?4dGxsr5XZHqxfriqz0Vxg8qhDL6ZrwFYWXb5fIoiHCBq4sV+NlLMzGP86oX+dN?=
 =?us-ascii?q?bMatITswWekw3cgOhNNJIxiv0KiDJ7OWL6uH0p0e86ggZo3ZGnp4iHMGRt8bm9?=
 =?us-ascii?q?Ah5ZMD31eswS9ivsjaZYgsaZwYSvEo99FTUMWZviVeioHy4KtfT7KwaOFyUxpW?=
 =?us-ascii?q?yBFrrYGQ+f9V1qr3bSE52wM3GXJX8ZzchtRRWHJUxfhhwUUys+npIjCg+qw8nh?=
 =?us-ascii?q?el9j5j8N/l74tgdMyuVwOhn9SGjfoRmnaiwuRJiDNhZW7RxC50TIMcyY9O1zBD?=
 =?us-ascii?q?pV/pmgrAyLN2yaaB5EDWAPWkyYGV/jOqOi6sXH8+idHuC+NefBYa2SqexCUPeF?=
 =?us-ascii?q?3ZKu0ox7/zaVK8WAJH9iA+cg2kpEW3B5FN/UmzEOSywRiiLMYNSXpBa6+i1rsM?=
 =?us-ascii?q?+/9O7nVx7o5YuKE7FSK8lg+wiqgaefMO6dnCZ5JihZ1pMPxn/IyaIT3F0IiyFp?=
 =?us-ascii?q?eDmiD64AtTPWTK/Lnq9XDhgbaz58NcdS7qI82BVNNtDfit/vyrF4ifs1AU9fVV?=
 =?us-ascii?q?P9gsGpedAKI2alOVzdGUaEL66GKiPLws3tZaO8SKZdjOFVtx22pDaaHFXvPjWF?=
 =?us-ascii?q?lzn1SR+vNftAgz2cPBxboIu9aApiCXD/TNL6bR22KMN3jTwzwbEumnzGL3ITMT?=
 =?us-ascii?q?hifENLtbCQ6SJYgvNiG21O9HZlLO+EmzqH4OncMJoZrfxrAiFsneJA/Hs606dV?=
 =?us-ascii?q?7D1DRPFtmCrdtNhuo1SnkumJ0jVmURpOpSxNhIKEpkhiPaTZ9p9dWXfL5h4N7G?=
 =?us-ascii?q?OQCwgUqNthENHgp6dQyt2c3J70fTND9c/EuMgRHc7ZLOqZP3c7dxnkAjjZCE0C?=
 =?us-ascii?q?VzH4G3vYghlyivydvl6PqZE677jlgoYLQ7kTAFMvG/wZCmxhHdofMJlwQzUomK?=
 =?us-ascii?q?Kai8hO4mCx+kqCDP5Gt4zKA6rBSc7kLyyU2PwdP0MF?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AoAACnYwZch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUwUBAQsBAYNqJ4N5iHiLL4IhiH2JP4R5gXMUGBMBiBEiNgcNAQMBAQEBAQE?=
 =?us-ascii?q?CARMBAQEKCwkIKSMMQgEQAYFiJAGCYgMDAQIgBAsBDQEBNwEFCQEBJAIFIQICA?=
 =?us-ascii?q?wwSNhkFgxyBagMVBAGjJXB8DCeCdgEBBYUODYIUCIELhmSDE4EcF4F/gRGFaYU?=
 =?us-ascii?q?ugleJM4FvlHkuCY4TgyMjgVuFEYo6LI5MiX2BTQKCBDMaCCgIgyeCGwwXEohMh?=
 =?us-ascii?q?UA/MoECAwEBIROFPIUiAQE?=
X-IPAS-Result: =?us-ascii?q?A0AoAACnYwZch0O0hNFjHAEBAQQBAQcEAQGBUwUBAQsBAYN?=
 =?us-ascii?q?qJ4N5iHiLL4IhiH2JP4R5gXMUGBMBiBEiNgcNAQMBAQEBAQECARMBAQEKCwkIK?=
 =?us-ascii?q?SMMQgEQAYFiJAGCYgMDAQIgBAsBDQEBNwEFCQEBJAIFIQICAwwSNhkFgxyBagM?=
 =?us-ascii?q?VBAGjJXB8DCeCdgEBBYUODYIUCIELhmSDE4EcF4F/gRGFaYUugleJM4FvlHkuC?=
 =?us-ascii?q?Y4TgyMjgVuFEYo6LI5MiX2BTQKCBDMaCCgIgyeCGwwXEohMhUA/MoECAwEBIRO?=
 =?us-ascii?q?FPIUiAQE?=
X-IronPort-AV: E=Sophos;i="5.56,313,1539673200"; 
   d="scan'208";a="53735843"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 04 Dec 2018 03:24:38 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726288AbeLDLB2 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 4 Dec 2018 06:01:28 -0500
Received: from mail.kernel.org ([198.145.29.99]:46914 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726749AbeLDLB0 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 4 Dec 2018 06:01:26 -0500
Received: from localhost (5356596B.cm-6-7b.dynamic.ziggo.nl [83.86.89.107])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 2D1CD214DB;
        Tue,  4 Dec 2018 11:01:25 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1543921285;
        bh=La+zjfgQNhJVu72zUzQWQBTF14Wof2GaLd+eVTNWoLU=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=R/QtY6atCBa4IX+yvT6OkyZlPOWWC3k4kW38AZmRymdewDYtOzc6kc25KiFDBnU6Q
         i+VKcQQMap+C4GLu9df9cCOu74U2sGJdALAmMu2EdKK8kAbxLHLnkUw1dchsDTjBDc
         83Q53XJvvK5oUVugQnv8c18bnorb6Touk/tS8tZ0=
From: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
To: linux-kernel@vger.kernel.org
Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        stable@vger.kernel.org, Ilya Dryomov <idryomov@gmail.com>,
        Sage Weil <sage@redhat.com>,
        Ben Hutchings <ben.hutchings@codethink.co.uk>,
        Sasha Levin <sashal@kernel.org>
Subject: [PATCH 4.14 013/146] libceph: store ceph_auth_handshake pointer in ceph_connection
Date: Tue,  4 Dec 2018 11:48:19 +0100
Message-Id: <20181204103727.334279597@linuxfoundation.org>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <20181204103726.750894136@linuxfoundation.org>
References: <20181204103726.750894136@linuxfoundation.org>
User-Agent: quilt/0.65
X-stable: review
X-Patchwork-Hint: ignore
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

4.14-stable review patch.  If anyone has any objections, please let me know.

------------------

commit 262614c4294d33b1f19e0d18c0091d9c329b544a upstream.

We already copy authorizer_reply_buf and authorizer_reply_buf_len into
ceph_connection.  Factoring out __prepare_write_connect() requires two
more: authorizer_buf and authorizer_buf_len.  Store the pointer to the
handshake in con->auth rather than piling on.

Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
Reviewed-by: Sage Weil <sage@redhat.com>
Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
Signed-off-by: Sasha Levin <sashal@kernel.org>
---
 include/linux/ceph/messenger.h |  3 +-
 net/ceph/messenger.c           | 54 ++++++++++++++++------------------
 2 files changed, 27 insertions(+), 30 deletions(-)

diff --git a/include/linux/ceph/messenger.h b/include/linux/ceph/messenger.h
index ead9d85f1c11..9056077c023f 100644
--- a/include/linux/ceph/messenger.h
+++ b/include/linux/ceph/messenger.h
@@ -203,9 +203,8 @@ struct ceph_connection {
 				 attempt for this connection, client */
 	u32 peer_global_seq;  /* peer's global seq for this connection */
 
+	struct ceph_auth_handshake *auth;
 	int auth_retry;       /* true if we need a newer authorizer */
-	void *auth_reply_buf;   /* where to put the authorizer reply */
-	int auth_reply_buf_len;
 
 	struct mutex mutex;
 
diff --git a/net/ceph/messenger.c b/net/ceph/messenger.c
index 5281da82371a..3a82e6d2864b 100644
--- a/net/ceph/messenger.c
+++ b/net/ceph/messenger.c
@@ -1411,24 +1411,26 @@ static void prepare_write_keepalive(struct ceph_connection *con)
  * Connection negotiation.
  */
 
-static struct ceph_auth_handshake *get_connect_authorizer(struct ceph_connection *con,
-						int *auth_proto)
+static int get_connect_authorizer(struct ceph_connection *con)
 {
 	struct ceph_auth_handshake *auth;
+	int auth_proto;
 
 	if (!con->ops->get_authorizer) {
+		con->auth = NULL;
 		con->out_connect.authorizer_protocol = CEPH_AUTH_UNKNOWN;
 		con->out_connect.authorizer_len = 0;
-		return NULL;
+		return 0;
 	}
 
-	auth = con->ops->get_authorizer(con, auth_proto, con->auth_retry);
+	auth = con->ops->get_authorizer(con, &auth_proto, con->auth_retry);
 	if (IS_ERR(auth))
-		return auth;
+		return PTR_ERR(auth);
 
-	con->auth_reply_buf = auth->authorizer_reply_buf;
-	con->auth_reply_buf_len = auth->authorizer_reply_buf_len;
-	return auth;
+	con->auth = auth;
+	con->out_connect.authorizer_protocol = cpu_to_le32(auth_proto);
+	con->out_connect.authorizer_len = cpu_to_le32(auth->authorizer_buf_len);
+	return 0;
 }
 
 /*
@@ -1448,8 +1450,7 @@ static int prepare_write_connect(struct ceph_connection *con)
 {
 	unsigned int global_seq = get_global_seq(con->msgr, 0);
 	int proto;
-	int auth_proto;
-	struct ceph_auth_handshake *auth;
+	int ret;
 
 	switch (con->peer_name.type) {
 	case CEPH_ENTITY_TYPE_MON:
@@ -1476,20 +1477,15 @@ static int prepare_write_connect(struct ceph_connection *con)
 	con->out_connect.protocol_version = cpu_to_le32(proto);
 	con->out_connect.flags = 0;
 
-	auth_proto = CEPH_AUTH_UNKNOWN;
-	auth = get_connect_authorizer(con, &auth_proto);
-	if (IS_ERR(auth))
-		return PTR_ERR(auth);
-
-	con->out_connect.authorizer_protocol = cpu_to_le32(auth_proto);
-	con->out_connect.authorizer_len = auth ?
-		cpu_to_le32(auth->authorizer_buf_len) : 0;
+	ret = get_connect_authorizer(con);
+	if (ret)
+		return ret;
 
 	con_out_kvec_add(con, sizeof (con->out_connect),
 					&con->out_connect);
-	if (auth && auth->authorizer_buf_len)
-		con_out_kvec_add(con, auth->authorizer_buf_len,
-					auth->authorizer_buf);
+	if (con->auth)
+		con_out_kvec_add(con, con->auth->authorizer_buf_len,
+				 con->auth->authorizer_buf);
 
 	con->out_more = 0;
 	con_flag_set(con, CON_FLAG_WRITE_PENDING);
@@ -1753,11 +1749,14 @@ static int read_partial_connect(struct ceph_connection *con)
 	if (ret <= 0)
 		goto out;
 
-	size = le32_to_cpu(con->in_reply.authorizer_len);
-	end += size;
-	ret = read_partial(con, end, size, con->auth_reply_buf);
-	if (ret <= 0)
-		goto out;
+	if (con->auth) {
+		size = le32_to_cpu(con->in_reply.authorizer_len);
+		end += size;
+		ret = read_partial(con, end, size,
+				   con->auth->authorizer_reply_buf);
+		if (ret <= 0)
+			goto out;
+	}
 
 	dout("read_partial_connect %p tag %d, con_seq = %u, g_seq = %u\n",
 	     con, (int)con->in_reply.tag,
@@ -1765,7 +1764,6 @@ static int read_partial_connect(struct ceph_connection *con)
 	     le32_to_cpu(con->in_reply.global_seq));
 out:
 	return ret;
-
 }
 
 /*
@@ -2048,7 +2046,7 @@ static int process_connect(struct ceph_connection *con)
 
 	dout("process_connect on %p tag %d\n", con, (int)con->in_tag);
 
-	if (con->auth_reply_buf) {
+	if (con->auth) {
 		/*
 		 * Any connection that defines ->get_authorizer()
 		 * should also define ->verify_authorizer_reply().
-- 
2.17.1



