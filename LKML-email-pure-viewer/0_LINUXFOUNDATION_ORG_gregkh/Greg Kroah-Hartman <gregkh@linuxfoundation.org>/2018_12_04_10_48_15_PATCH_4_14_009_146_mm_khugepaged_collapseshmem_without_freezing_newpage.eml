Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 04 Dec 2018 20:35:49 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id E60EF5804C1;
	Tue,  4 Dec 2018 03:02:34 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 04 Dec 2018 03:02:34 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A3HGCYx+INJH10P9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1ugTIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CRWRPQNtfWSJCDI27?=
 =?us-ascii?q?bYQPAeQOMulEoIfyvFsOtRmzCBKwBO7sxDJEmmX70Lc43uknDArI3BYgH9ULsH?=
 =?us-ascii?q?nMrdv1LrkdUe+ox6fN1zXDaOlZ2Tfk5IbKaB8hu+2MXbdqfsrX1EIiEAzFjk+O?=
 =?us-ascii?q?pozqPDOV1v8As2ya7+pmSOKuhGAnqwZsojip28gjkJXJhoMSylDC7yl5x5w1Jd?=
 =?us-ascii?q?KhRUN9fNWqHpxQtySAOIt3RMMvW2Jotzggyr0Ap5G7eDIGyJM9xx7QbfGMbouG?=
 =?us-ascii?q?4gr7WeqPPTt1gGhpdK+xihqs60Ss1+7xWtWu3FtLrCdJitrBu34X2xHQ68WLUP?=
 =?us-ascii?q?hw80O71TqSywze6OdJKl0um6XBMZ4u2Lswm4ITsUvdGi/2n137jLGZdko64Oik?=
 =?us-ascii?q?8efnbav8pp+aKYB0jhvyMqM0msywGeg4Mw4OUHaH+emkyrHv4Un0TK9XgvA4jK?=
 =?us-ascii?q?XVqo3WKMcHqqKjAgJY0J4v6xOlADen1NQYk2MHLFVAeB+fi4jpOlfOIO33DPum?=
 =?us-ascii?q?gFSjji1rx/bYMb3lG5nNKXbCkLH/crZn8ENc1gUzws5F555OCbEOPujzWknvu9?=
 =?us-ascii?q?zcFBM5NBa0w+n/BNVnyoweQX6PArOeMK7KtV+I5+EvLPeWaI4apTbwMPwl5//o?=
 =?us-ascii?q?jX8kll4RZ6ip3Z0LaH+mGvRqOVmWYX3pgt0ZC2cFohI+TPD2iF2FSTNTZ2y9X6?=
 =?us-ascii?q?Mg5j4hD4KqF4fDRp23j7yH0ye2BZlWZmFAClCRHnbkbYSEW/EQaC2MJs9tiCAL?=
 =?us-ascii?q?Vb+kS4U5zxGhqBf6y6Z7LurT4iAYt5Xj28Zv6+3QkhEy8zp0D8OG3mGJTmF0mH?=
 =?us-ascii?q?4IRjAs0KB+p0x91kmM0axij/NEEtxT4utDUh0mOp7E0+x6F9fyVxrbcdeSSFam?=
 =?us-ascii?q?RdamDSsrTt0rwd8DeEJ9G9SkjhDe0CumGb4Vl7qXBJMq9qLQxWT+J8F4y3zezq?=
 =?us-ascii?q?kuk0EmQtdTNW2hnqN/9BLcB4jTn0Wdlqalb6Ic3CHW+WeHzGqOulxYUQFqXaXE?=
 =?us-ascii?q?W3AfelXZrdDj6kzeSL+uDKwtMhFdxs6aNqtKdtrpgE1bS/j5JtTRfXi9m2eqCh?=
 =?us-ascii?q?aO3bODcozqd2IZ3CXeDUgElxse/XKHNQg4GyegrHjSDD1oFVLzfUzs9fNyp2+8?=
 =?us-ascii?q?Tk8x1wuKdVFu16Kp+h4JgvyRU+4c0agauCg/sTl0HEyy39TNC9WeoQpsZ6FcYd?=
 =?us-ascii?q?I74Fda2mPVrQ19Ppq8L698gl4SaRh4v0Tr1x9vEIVPjdAqrG82zAp1Ma+YzFJB?=
 =?us-ascii?q?dzaf3ZDsOr3WKnP+/Ay1Z67RwFHe1NeW+qEA6Pkjr1XjvQepFlct8nl90tlV1W?=
 =?us-ascii?q?ec6YvODAYITZ3xVUM3/QBgp77Geik9+5/U1Xp0PKautj/Nxd0oC/Ulyxq6ZNhf?=
 =?us-ascii?q?Lb6LGxX0E80ZAMiuNvcnm1yobhICIeBT+7Q4P8Kgd/uaxqGrOPxsky6hjWRC+I?=
 =?us-ascii?q?p9yF6D9zJgSu7U2JYI2/GZ3hadWzjgllugs8D3lppCZTEdBWe/zSnkBIhMZqx9?=
 =?us-ascii?q?Z4oLCGGuI9GpydV6nZLiR3lY9Fu7DVMcxMCpYQaSb0D63QBIz0QXoGColjGizz?=
 =?us-ascii?q?NplDEltKyf0zLUw+TjbRYIJnRERG1/gljyO4i0iNYaUVOsbwgokhul+En7y7Ja?=
 =?us-ascii?q?pKR5M2ncX0NIczLqIGFlV6u6rqCCbNJX6JM0rSVXV/yxYFCbSrLnoxoWyTjjH3?=
 =?us-ascii?q?ZYxD0gczGqu5P5nwF1iW6HLXZzqmbZdt90xRvF+NPcQvtR1CIcRCZkkTnXGkS8?=
 =?us-ascii?q?P96x8NWWjZjDqOO+V2GmVpFJaink14CAtCi65W1sHxK/meu+mtnmEQg8zC/62M?=
 =?us-ascii?q?NmVSTOrBbgfIbr0762Pv5gfkltHFX88dZ1Gplikossg5EdwXgbiY+S/XYdk2fz?=
 =?us-ascii?q?MNNb1Ln6bHoMQz4L3tHU7BLk2E1lMnKG2Yb5Wm+BzctmYtmwenkW1T4l78BWFK?=
 =?us-ascii?q?eU66RJnShvrVq5tw7RYeV9kS0byfsh83Mah+AJuAwwziSSGLwSHE9YPTDymBSM?=
 =?us-ascii?q?9dyxsKJXZGO3e7iqyEV+hcyhDK2FogxEXXb5e5QiEjVq4sRxLl3My2Hz5Z/+eN?=
 =?us-ascii?q?bLc90TrBKUngzEj+hULpIxi/ULiTBmOWL7oX0q1eo7gQZy0pG9uYiNM39t876h?=
 =?us-ascii?q?Ah5EKj31YNse+i3qjaZbhMqX3pqgHpN8GjUQR5voTOmlEDYTtfThKgaPHycwqn?=
 =?us-ascii?q?adGbrDAwCf7F1qoG7IE5CuL3uXPmUWzc1+RBmBI0xSmBsbUy89np49CwCm3sjh?=
 =?us-ascii?q?cFpi6zAV5174rAZMy+1yOxn+VGffuBmnajMuRJeDKxpW6xlI513JPsyG8uJzAy?=
 =?us-ascii?q?ZY84WjrAOXL2yUeR9IAXsVWkCeBFDjI7qu5cTG8+eCHeqzNP/OYbSIqexDWPaE?=
 =?us-ascii?q?35Ov0o16/zmSMsWDJGVtD/o+2kBbR3B2B9zZmykTSywQjy/Mb8mbpAql+i1qtM?=
 =?us-ascii?q?+/9u7nWBno5YuJBLtfKtFv+xGwgaeeOO+cnid5KTBE1pwSwX/E0qQQ3FkXiyt2?=
 =?us-ascii?q?bTmiDawAtTLRTKLXgqJXDwAUayJwNMtL7qIwxApNOdTcitP6yLF4lOM1C0xeWF?=
 =?us-ascii?q?zlm8GpY9EKIm6nOFPGAkaLKKqJJTnRz87rZqO8TKVajP9IuB2opTabD0jjMyyZ?=
 =?us-ascii?q?mDn0TB+vK/9DjSGBMBxauYGwaRJtCWnlTNL7ZRy3Kt53jTsqwbIqgnPGL3ITMT?=
 =?us-ascii?q?95c0lVtL2f8TtYguljG2xG9ndlMeiEmyOD4+bEMJoZrftrDTpyl+9B5HQ6yr1V?=
 =?us-ascii?q?7DxLRfBvmSvSqMJurE+ikuWV1jVnVx9OoC5RhI2XpUViJbnZ9p5YVHfE5h0N62?=
 =?us-ascii?q?CQCxUMp9R9C9zvu7pfyt7AlK/oLDdC8tTU/dYTBsTOKcKHNmYhPgTtGDLOEAQF?=
 =?us-ascii?q?SjurZinjgBlZkfeP5jiWo4I8p5zEhpUDUPlYWUYzG/dcDV5qT/IYJ5IicSkpnv?=
 =?us-ascii?q?a4lskB5T+epQPNQcxc9sTITP+dAvXHLDefkKlKYAYOzbrkLIMVcIrh1BoxORFB?=
 =?us-ascii?q?gI3WFh+IDph2qSp7Y1px+R0V/Q=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AoAACDXQZch0O0hNFbCBwBAQEEAQEHB?=
 =?us-ascii?q?AEBgVMFAQELAQGCaIECJ4N5iHiLL4IhjiqJC4EkA0wUGA0GAYgRIjYHDQEDAQE?=
 =?us-ascii?q?BAQEBAgETAQEBCgsJCCkjDEIBEAGBYiQBgmIDAwECIAQLAQ0BATcBBQkBASQCB?=
 =?us-ascii?q?SECAgMMSBkFgxwBggEEAQqjGHB8DCeCdgEBBYcvCIELhmSDE4EcF4F/gRGHboM?=
 =?us-ascii?q?pgleJIQgKLAaBPYVejwNGCYcDijMjgVtNhESDJYcVLIpJgneLCYFNDleBITMaC?=
 =?us-ascii?q?CgIgycJCoIIDBeIXoVAPzIBAQEBfgMBASEThTyFIgEB?=
X-IPAS-Result: =?us-ascii?q?A0AoAACDXQZch0O0hNFbCBwBAQEEAQEHBAEBgVMFAQELAQG?=
 =?us-ascii?q?CaIECJ4N5iHiLL4IhjiqJC4EkA0wUGA0GAYgRIjYHDQEDAQEBAQEBAgETAQEBC?=
 =?us-ascii?q?gsJCCkjDEIBEAGBYiQBgmIDAwECIAQLAQ0BATcBBQkBASQCBSECAgMMSBkFgxw?=
 =?us-ascii?q?BggEEAQqjGHB8DCeCdgEBBYcvCIELhmSDE4EcF4F/gRGHboMpgleJIQgKLAaBP?=
 =?us-ascii?q?YVejwNGCYcDijMjgVtNhESDJYcVLIpJgneLCYFNDleBITMaCCgIgycJCoIIDBe?=
 =?us-ascii?q?IXoVAPzIBAQEBfgMBASEThTyFIgEB?=
X-IronPort-AV: E=Sophos;i="5.56,313,1539673200"; 
   d="scan'208";a="65204195"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 04 Dec 2018 03:02:33 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727267AbeLDLCP (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 4 Dec 2018 06:02:15 -0500
Received: from mail.kernel.org ([198.145.29.99]:48078 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1727592AbeLDLCM (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 4 Dec 2018 06:02:12 -0500
Received: from localhost (5356596B.cm-6-7b.dynamic.ziggo.nl [83.86.89.107])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 7D3072146D;
        Tue,  4 Dec 2018 11:02:11 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1543921332;
        bh=DK6w8pYfV3aONvmII6h2iNDmw6l6Evq53yHFJCvDqRY=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=dVJwsvPBEQe6YOThnkKX2NPWkBAYovbEatXUNABoAFPJIlO7UB75pZUCdenJqEV6c
         JdPLO+iAwG1iUsn3XMJFYYl2zGSpMRCD8H3S+tn9Ohn9RPdjjXKof4iAH6vmuvc4KH
         nHJFDVSHmto9yDDYQ25L/D/q613A0aljHbqlBwA4=
From: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
To: linux-kernel@vger.kernel.org
Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        stable@vger.kernel.org, Hugh Dickins <hughd@google.com>,
        "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>,
        Jerome Glisse <jglisse@redhat.com>,
        Konstantin Khlebnikov <khlebnikov@yandex-team.ru>,
        Matthew Wilcox <willy@infradead.org>,
        Andrew Morton <akpm@linux-foundation.org>,
        Linus Torvalds <torvalds@linux-foundation.org>,
        Sasha Levin <sashal@kernel.org>
Subject: [PATCH 4.14 009/146] mm/khugepaged: collapse_shmem() without freezing new_page
Date: Tue,  4 Dec 2018 11:48:15 +0100
Message-Id: <20181204103727.161359379@linuxfoundation.org>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <20181204103726.750894136@linuxfoundation.org>
References: <20181204103726.750894136@linuxfoundation.org>
User-Agent: quilt/0.65
X-stable: review
X-Patchwork-Hint: ignore
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

4.14-stable review patch.  If anyone has any objections, please let me know.

------------------

commit 87c460a0bded56195b5eb497d44709777ef7b415 upstream.

khugepaged's collapse_shmem() does almost all of its work, to assemble
the huge new_page from 512 scattered old pages, with the new_page's
refcount frozen to 0 (and refcounts of all old pages so far also frozen
to 0).  Including shmem_getpage() to read in any which were out on swap,
memory reclaim if necessary to allocate their intermediate pages, and
copying over all the data from old to new.

Imagine the frozen refcount as a spinlock held, but without any lock
debugging to highlight the abuse: it's not good, and under serious load
heads into lockups - speculative getters of the page are not expecting
to spin while khugepaged is rescheduled.

One can get a little further under load by hacking around elsewhere; but
fortunately, freezing the new_page turns out to have been entirely
unnecessary, with no hacks needed elsewhere.

The huge new_page lock is already held throughout, and guards all its
subpages as they are brought one by one into the page cache tree; and
anything reading the data in that page, without the lock, before it has
been marked PageUptodate, would already be in the wrong.  So simply
eliminate the freezing of the new_page.

Each of the old pages remains frozen with refcount 0 after it has been
replaced by a new_page subpage in the page cache tree, until they are
all unfrozen on success or failure: just as before.  They could be
unfrozen sooner, but cause no problem once no longer visible to
find_get_entry(), filemap_map_pages() and other speculative lookups.

Link: http://lkml.kernel.org/r/alpine.LSU.2.11.1811261527570.2275@eggly.anvils
Fixes: f3f0e1d2150b2 ("khugepaged: add support of collapse for tmpfs/shmem pages")
Signed-off-by: Hugh Dickins <hughd@google.com>
Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
Cc: Jerome Glisse <jglisse@redhat.com>
Cc: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
Cc: Matthew Wilcox <willy@infradead.org>
Cc: <stable@vger.kernel.org>	[4.8+]
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Sasha Levin <sashal@kernel.org>
---
 mm/khugepaged.c | 19 +++++++------------
 1 file changed, 7 insertions(+), 12 deletions(-)

diff --git a/mm/khugepaged.c b/mm/khugepaged.c
index 0eac4344477a..45bf0e5775f7 100644
--- a/mm/khugepaged.c
+++ b/mm/khugepaged.c
@@ -1288,7 +1288,7 @@ static void retract_page_tables(struct address_space *mapping, pgoff_t pgoff)
  * collapse_shmem - collapse small tmpfs/shmem pages into huge one.
  *
  * Basic scheme is simple, details are more complex:
- *  - allocate and freeze a new huge page;
+ *  - allocate and lock a new huge page;
  *  - scan over radix tree replacing old pages the new one
  *    + swap in pages if necessary;
  *    + fill in gaps;
@@ -1296,11 +1296,11 @@ static void retract_page_tables(struct address_space *mapping, pgoff_t pgoff)
  *  - if replacing succeed:
  *    + copy data over;
  *    + free old pages;
- *    + unfreeze huge page;
+ *    + unlock huge page;
  *  - if replacing failed;
  *    + put all pages back and unfreeze them;
  *    + restore gaps in the radix-tree;
- *    + free huge page;
+ *    + unlock and free huge page;
  */
 static void collapse_shmem(struct mm_struct *mm,
 		struct address_space *mapping, pgoff_t start,
@@ -1337,13 +1337,11 @@ static void collapse_shmem(struct mm_struct *mm,
 	__SetPageSwapBacked(new_page);
 	new_page->index = start;
 	new_page->mapping = mapping;
-	BUG_ON(!page_ref_freeze(new_page, 1));
 
 	/*
-	 * At this point the new_page is 'frozen' (page_count() is zero), locked
-	 * and not up-to-date. It's safe to insert it into radix tree, because
-	 * nobody would be able to map it or use it in other way until we
-	 * unfreeze it.
+	 * At this point the new_page is locked and not up-to-date.
+	 * It's safe to insert it into the page cache, because nobody would
+	 * be able to map it or use it in another way until we unlock it.
 	 */
 
 	index = start;
@@ -1521,9 +1519,8 @@ static void collapse_shmem(struct mm_struct *mm,
 			index++;
 		}
 
-		/* Everything is ready, let's unfreeze the new_page */
 		SetPageUptodate(new_page);
-		page_ref_unfreeze(new_page, HPAGE_PMD_NR);
+		page_ref_add(new_page, HPAGE_PMD_NR - 1);
 		set_page_dirty(new_page);
 		mem_cgroup_commit_charge(new_page, memcg, false, true);
 		lru_cache_add_anon(new_page);
@@ -1571,8 +1568,6 @@ static void collapse_shmem(struct mm_struct *mm,
 		VM_BUG_ON(nr_none);
 		spin_unlock_irq(&mapping->tree_lock);
 
-		/* Unfreeze new_page, caller would take care about freeing it */
-		page_ref_unfreeze(new_page, 1);
 		mem_cgroup_cancel_charge(new_page, memcg, true);
 		new_page->mapping = NULL;
 	}
-- 
2.17.1



