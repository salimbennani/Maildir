Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 12 Dec 2018 08:48:54 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 4C7DE58079D;
	Tue, 11 Dec 2018 07:47:06 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga002-1.jf.intel.com with ESMTP; 11 Dec 2018 07:47:06 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AMitglBLqU8CsL0U1t9mcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgUL/7+rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZXshfSTFPDI2/?=
 =?us-ascii?q?YYUIDeUBM+hXoIbhqFUBthu+HQuhCfjzyjJLiHL6wbc33v4jHAzAwQcuH8gOsH?=
 =?us-ascii?q?PRrNjtNakSS/66zKbVxjvGdfNW3i3y6IjRfh4ju/6MR65wcc/LxkkpCgjIiVqQ?=
 =?us-ascii?q?qZb7MDOa1eQNs3OW7+5hVeKplm4mpA9xoj+yxscql4bGnJ4VylHD9SV/2oo1Is?=
 =?us-ascii?q?e4SEFibNOiDZBeuSaaN45sTcMjRWFloCU6xaMcuZ69YicKzI4rxxnFa/yIdYWD?=
 =?us-ascii?q?/xHtVP6JLDtmmH5ofKiziwu8/ES+0OHwS8q53EpQoidEkNTArnMA2hLJ5sWES/?=
 =?us-ascii?q?Zx5ESs1DKV2wzO9u1JI0Y5nrfBJZE72L4/jJ8TvFzDHiDonEX2i7ebdlsr+ue2?=
 =?us-ascii?q?8eTreLbmqYGGN49ylA7+Nr4imsulAeQ3KgQOXm6b9vqg1LD740H1XLFHgucrnq?=
 =?us-ascii?q?TXrpzWP9kXq62lDwNP04su6Q6zDzK839QZmXkHIkhFeBWCj4XxP1HOIfb4Deqw?=
 =?us-ascii?q?gli1kzdk2erGPrv/DZXJN3TDl7ngfbBj5E5G0wcz099f6IxOCr0bI/L8RFXxtN?=
 =?us-ascii?q?rGAR89KQC0xPznCNpl2oMERW2PGrOZML/VsVKQ4uIvIuqMa5EPtDfyNvgo/Pru?=
 =?us-ascii?q?jX4/mV8Acqilx5oXaHakHvt4J0WVe2bjgtAEEW0SpAoxUPTqiEGeUT5Uf3uyX7?=
 =?us-ascii?q?gz5jAnCI28CofPXICtgKGb0ye9EZ1bfWRGClGKEXf1eISIQfYMaCSOIsB/ljwI?=
 =?us-ascii?q?T6SuS4gk1Ru2rg/116JnLvbI+i0frZ/j1t916PPJmREx8jx0CcKd02aWQmFwn2?=
 =?us-ascii?q?MIQSI23a9lrUx8zFeDzbZ3g/hCGdNP4PNJVx8wNYTAwOxiF9DyRgXBc8+TR1a9?=
 =?us-ascii?q?QtWmBjIxQsgrw9AUYUZwANGijhHF3yq3DL4Zjb2LBJoo8q3C23j9Pdpyy3HD1K?=
 =?us-ascii?q?M5lVkpXtNPNXG6hq547wXTBJTGk0ODm6audKQTxijN9GiYwGqKvUFYVhNwUKrf?=
 =?us-ascii?q?UXAeYEvWscr25kfYQ7CyDrQnNxNLydSeJatSdt3pkVJGSe/+N9vEfWK+hX28BR?=
 =?us-ascii?q?aSybOKd4rlZWMd0CLZCEgHlgAT+W2LNQw/BienvmLfAyZiFVPpY0Pw7+Z+rGm3?=
 =?us-ascii?q?QVMzzwGPd0dhzaa6+gYJhfyATPMexq8Ltz0/qzpqBlq938jZC9ybpwV/eqVRet?=
 =?us-ascii?q?c94FZB1WLEuA1xJJ2gL6Z+hlEAdwR7pV/h1xJyCo9Yi8glsGsqzBZuKaKfyF5B?=
 =?us-ascii?q?azKY3ZX3Or3LKmnz/Aqja7LM1lHZytaW/qYP6PI3q1j4uAGpF0wi82ho0tVP0n?=
 =?us-ascii?q?uc4InKAxQWUZ7rTkk38B16ranAYiYh/4PUyWFsMa6svzDY39ImGuQkxQigfttF?=
 =?us-ascii?q?K6yECRL9HNccB8itL+wqhUOkbhYFPOBU6a41MNmqd/qA2K63IulgmCiqgnhA4I?=
 =?us-ascii?q?B4ykiM7TZzSvbU35YZxPGVxguGVyrmgFi9qMz2mIBEaisUHmqw0iXkAI9RZqtv?=
 =?us-ascii?q?fYcEE2uuIsu3xslgiJ7pQXJX6FmjB1Ye0s+zZRWSd0D93RFX1UkPu3ynmDe3wC?=
 =?us-ascii?q?Zukz40qaqTxirOzPr4dBoGI2JEWHNtjVPxLoeqldAaW06oYhMtlBuk40b62qda?=
 =?us-ascii?q?qL5+L2nVXUdHYSz2I3t+Xau3s7qIe9RP548wsSVLTOS8ZkiXS778oxcA0yLvBX?=
 =?us-ascii?q?BexC09dzyxvpX5nhp6iH+SLXpprXrZf91wygnb5NDGWfFR2T8GTjFiiTbLHli8?=
 =?us-ascii?q?I8Wp/dKMmpfBqO++TWGhVp5UcSXx1oOPrii75W5rAR25gf+znMbqEQw70S/9yt?=
 =?us-ascii?q?lrWj/ErBf6Yon3yau6NfhrcVVvBF/588B6AJ1xkpMshJEM3ngXnpWU8mAAkWvp?=
 =?us-ascii?q?M9Vb2KT+YWEJRT4Kxd7V/Qfk1FdiLnKP24L2SHGdztF9aNm9Z2Mcwjg94NxSCK?=
 =?us-ascii?q?eI8LxEmjN4olmiogLQe/R9niodxuEo6H4VmOwJvAstziOAArEdB0VYPCrslwiW?=
 =?us-ascii?q?4NC6tqlYeGGvcb2o3kpkgd+hFK2Coh1bWHvhf5ciHCxw4d9lPFPCznLz8Z3kd8?=
 =?us-ascii?q?fKbd0IqBKUiRjAgvNRKJIwkPoKmCVmNXj8vX0j1+40kxhu0Yums4iALmVn5Li5?=
 =?us-ascii?q?DQJANj3pe8MT/SngjbpZnsaTxYyuH49uGjMWXJvzVvKoESkftfDmNwaIDT09pW?=
 =?us-ascii?q?2XGbvZHQ+D9khmq2jDHIysN3GSPHMZ18ltRAGBJExDhwAZRC41kYQ+FgCu2czt?=
 =?us-ascii?q?akN55i0K6178qxtMzP9oNhblXmfeogeodik7SJyFIBVK6QFC4l/fMdaC4eJrAy?=
 =?us-ascii?q?FY4pqhoRSPKmOBYgRHE3oJVlaYB1z5Pbmu+NrA8/WeBuWkNPvDerGOqe1YV/eV?=
 =?us-ascii?q?ypOjyIpm/zCQNsqROnluFeE02k1GXXphAcTWhy0PSzALlyLKd8OapBC8+jBurs?=
 =?us-ascii?q?Ci6vvrXhjj5ZCIC7tUPtVi4BS2gaaFN+6Niyd1MzdY1pUQxXDWzLgTxkIdiyZr?=
 =?us-ascii?q?dzO1C7QPqTbNTL7Mmq9QFxMbaz18NMpL76I/3wlBI83bisny1r53kPE1EUpFVU?=
 =?us-ascii?q?f6l8GtZMwKJXy9NVzdCEaKMrSGOSPEw8XtbaygTr1Qif1etwestjaDD0/jIjOD?=
 =?us-ascii?q?miHzWBCyKu5Mlj+UPRxEtIG5cxZgEmzjTNPgah2mP957lzw2wbsohnzUMW4QKy?=
 =?us-ascii?q?Rzc0RIrreI9yNXnu1/G3Bd7npiNeSEhyeZ7+zCJpkKq/dkHiR0mPxc4Hkhz7tV?=
 =?us-ascii?q?7SdEROF6mSfIr95upU2mnfeLyjZ9TBVOrTNLjpqRvUp+IaXZ6oVAWXHc8RMN92?=
 =?us-ascii?q?qQDREKp9pjCtL3uqFQysLAlKT8KDpZ99LU/M0cB9XbKc6dMXohNwbpFyDQDAcf?=
 =?us-ascii?q?UTGrMmTf1ARhl6SW93uIvt05p4LqlZ4mVLBWTho2G+kcB0AjG8YNc7ltWTZxvq?=
 =?us-ascii?q?SWg4Yr/323rFzxTd9Gu5nBHqadG/jgKzaxibhCegsGxq7+IY0PN4r9nUt4ZQ8p?=
 =?us-ascii?q?z8zxB0PMUIUV8WVaZQgurRAIqSAmQw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAAB42w9ch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgmmBAieDe4gZX4sxgg0Uji6JEIEkA0oWGA0GAYcuIjQJDQEDAQE?=
 =?us-ascii?q?BAQEBAgETAQEBCA0JCCkjDII2JAGCYgMDAQIgBAsBDQEBNwEFCQEBHwUCBSECA?=
 =?us-ascii?q?gMMSBkFgxwBggEEAQqkaHB8DCeCdgEBBYEwAYV1CIELhnGDI4EcF4F/iXGCN4J?=
 =?us-ascii?q?XiT2BcJUKRgmHCYM8hwEjgVxNhEqKTSyKaYMBix2BRm2BITMaCCgIgycJCoIID?=
 =?us-ascii?q?BcSiEyFQD8yAQEBfwMBASETii0BAQ?=
X-IPAS-Result: =?us-ascii?q?A0ANAAB42w9ch0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBgmm?=
 =?us-ascii?q?BAieDe4gZX4sxgg0Uji6JEIEkA0oWGA0GAYcuIjQJDQEDAQEBAQEBAgETAQEBC?=
 =?us-ascii?q?A0JCCkjDII2JAGCYgMDAQIgBAsBDQEBNwEFCQEBHwUCBSECAgMMSBkFgxwBggE?=
 =?us-ascii?q?EAQqkaHB8DCeCdgEBBYEwAYV1CIELhnGDI4EcF4F/iXGCN4JXiT2BcJUKRgmHC?=
 =?us-ascii?q?YM8hwEjgVxNhEqKTSyKaYMBix2BRm2BITMaCCgIgycJCoIIDBcSiEyFQD8yAQE?=
 =?us-ascii?q?BfwMBASETii0BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,342,1539673200"; 
   d="scan'208";a="43603489"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 11 Dec 2018 07:47:04 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728244AbeLKPqB (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 11 Dec 2018 10:46:01 -0500
Received: from mail.kernel.org ([198.145.29.99]:34312 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1728224AbeLKPp4 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 11 Dec 2018 10:45:56 -0500
Received: from localhost (5356596B.cm-6-7b.dynamic.ziggo.nl [83.86.89.107])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 8866C21104;
        Tue, 11 Dec 2018 15:45:55 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1544543156;
        bh=14GOvzjcQlAF0wBBWwK0HtL0LQ4dwYbkAD5xhKvu4VE=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=tqZU+ATdDGle1p67H3i8oyl1vYDrpdEk+Mh/COGIxL25wRHrzGpkISavtoU7FIzRq
         0cHIOCmIKTMMxWZMUbUSKQlJCIE+Esk5BIh9+THD1SbJ5hLvWWuIsriIgDu50zXf98
         2kqKWea3sFa/pIRyAgsYqN1QTuBTGK8g/MgLZfoQ=
From: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
To: linux-kernel@vger.kernel.org
Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        stable@vger.kernel.org,
        Andrea Parri <andrea.parri@amarulasolutions.com>,
        Oleg Nesterov <oleg@redhat.com>,
        Alexander Shishkin <alexander.shishkin@linux.intel.com>,
        Andrew Morton <akpm@linux-foundation.org>,
        Arnaldo Carvalho de Melo <acme@redhat.com>,
        Jiri Olsa <jolsa@redhat.com>,
        Linus Torvalds <torvalds@linux-foundation.org>,
        Namhyung Kim <namhyung@kernel.org>,
        "Paul E. McKenney" <paulmck@linux.vnet.ibm.com>,
        Peter Zijlstra <peterz@infradead.org>,
        Stephane Eranian <eranian@google.com>,
        Thomas Gleixner <tglx@linutronix.de>,
        Vince Weaver <vincent.weaver@maine.edu>, stable@kernel.org,
        Ingo Molnar <mingo@kernel.org>
Subject: [PATCH 4.4 33/91] uprobes: Fix handle_swbp() vs. unregister() + register() race once more
Date: Tue, 11 Dec 2018 16:40:52 +0100
Message-Id: <20181211151608.463823962@linuxfoundation.org>
X-Mailer: git-send-email 2.20.0
In-Reply-To: <20181211151606.026852373@linuxfoundation.org>
References: <20181211151606.026852373@linuxfoundation.org>
User-Agent: quilt/0.65
X-stable: review
X-Patchwork-Hint: ignore
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

4.4-stable review patch.  If anyone has any objections, please let me know.

------------------

From: Andrea Parri <andrea.parri@amarulasolutions.com>

commit 09d3f015d1e1b4fee7e9bbdcf54201d239393391 upstream.

Commit:

  142b18ddc8143 ("uprobes: Fix handle_swbp() vs unregister() + register() race")

added the UPROBE_COPY_INSN flag, and corresponding smp_wmb() and smp_rmb()
memory barriers, to ensure that handle_swbp() uses fully-initialized
uprobes only.

However, the smp_rmb() is mis-placed: this barrier should be placed
after handle_swbp() has tested for the flag, thus guaranteeing that
(program-order) subsequent loads from the uprobe can see the initial
stores performed by prepare_uprobe().

Move the smp_rmb() accordingly.  Also amend the comments associated
to the two memory barriers to indicate their actual locations.

Signed-off-by: Andrea Parri <andrea.parri@amarulasolutions.com>
Acked-by: Oleg Nesterov <oleg@redhat.com>
Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
Cc: Jiri Olsa <jolsa@redhat.com>
Cc: Linus Torvalds <torvalds@linux-foundation.org>
Cc: Namhyung Kim <namhyung@kernel.org>
Cc: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Stephane Eranian <eranian@google.com>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Vince Weaver <vincent.weaver@maine.edu>
Cc: stable@kernel.org
Fixes: 142b18ddc8143 ("uprobes: Fix handle_swbp() vs unregister() + register() race")
Link: http://lkml.kernel.org/r/20181122161031.15179-1-andrea.parri@amarulasolutions.com
Signed-off-by: Ingo Molnar <mingo@kernel.org>
Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

---
 kernel/events/uprobes.c |   12 ++++++++++--
 1 file changed, 10 insertions(+), 2 deletions(-)

--- a/kernel/events/uprobes.c
+++ b/kernel/events/uprobes.c
@@ -606,7 +606,7 @@ static int prepare_uprobe(struct uprobe
 	BUG_ON((uprobe->offset & ~PAGE_MASK) +
 			UPROBE_SWBP_INSN_SIZE > PAGE_SIZE);
 
-	smp_wmb(); /* pairs with rmb() in find_active_uprobe() */
+	smp_wmb(); /* pairs with the smp_rmb() in handle_swbp() */
 	set_bit(UPROBE_COPY_INSN, &uprobe->flags);
 
  out:
@@ -1892,10 +1892,18 @@ static void handle_swbp(struct pt_regs *
 	 * After we hit the bp, _unregister + _register can install the
 	 * new and not-yet-analyzed uprobe at the same address, restart.
 	 */
-	smp_rmb(); /* pairs with wmb() in install_breakpoint() */
 	if (unlikely(!test_bit(UPROBE_COPY_INSN, &uprobe->flags)))
 		goto out;
 
+	/*
+	 * Pairs with the smp_wmb() in prepare_uprobe().
+	 *
+	 * Guarantees that if we see the UPROBE_COPY_INSN bit set, then
+	 * we must also see the stores to &uprobe->arch performed by the
+	 * prepare_uprobe() call.
+	 */
+	smp_rmb();
+
 	/* Tracing handlers use ->utask to communicate with fetch methods */
 	if (!get_utask())
 		goto out;


