Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 04 Dec 2018 20:37:13 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 0F5D2580375;
	Tue,  4 Dec 2018 03:21:47 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by fmsmga006-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 04 Dec 2018 03:21:46 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AZZEaxxahTD0hPbdXFCRc4sn/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpciyYx7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyxPDJ2h?=
 =?us-ascii?q?YYUBDOQPOuRXr4fzqFQBsRSwChKsBPvtxzJTmn/73qM33/g7HAzc3gEtGc8Fvn?=
 =?us-ascii?q?TOrNXyMacfSeG7zLPWwjXMcvhY3C396I/SfRAhuP2CX6h/cdDNyUkqDQzFiEib?=
 =?us-ascii?q?pIvqPzOPyOsNvGub7+p7WOKrim4nrRxxozehxscrl4nJgJ8axUrY9SV4x4Y1I8?=
 =?us-ascii?q?e0SElhYd6rCZZdsTyROYhuQs46XW1kpCI3xqcbtZO1YiQG0okryh3DZ/CdcoWF?=
 =?us-ascii?q?4ArvWeWfLDtih39oeaizihW2/ES61+HwSsu53VBXpSRfiNbMrGoC1xnL58iHVP?=
 =?us-ascii?q?R9+kCh1C6R1wDc9O5EO1o4lanFJJ47xL4/iJ4TvV7EHi/sl0X6lK6WdkM69ei0?=
 =?us-ascii?q?8+nrfKnqq5uGO4NphAzyLL4iltG8DOgkKAQDXmqW9fy51LL5/E35RLtKjucxkq?=
 =?us-ascii?q?ncqJ3aIcUbpqikAw5ay4oj6AiwDy2g0NsGmXkLNVVFeRyBj4f3IVHDO+74Dfih?=
 =?us-ascii?q?jFS2ijtrxO7JPqfnAprTKnjPirDhfaxy60JE0go80chf545ICrEGOP/zXk7xtN?=
 =?us-ascii?q?/GARMjPA203v3qCNF81oMYRGKODbWVMKLUsV+U+O0vJ/OAa5MSuDb4M/Il/eLh?=
 =?us-ascii?q?jWclmV8BeqmkxZsXZ2q5HvR6OUqZZmDggtccEWgQuAo+Q/fniFmDUT5VenazUL?=
 =?us-ascii?q?gw5jA9CIK6E4jDQpqhj6CG3Ce+BpdWfHxJCkiQEXf0cIWJQ/UMaCWMLcN7kTwE?=
 =?us-ascii?q?Ur6hS4km1Ry1sA/6yrxnLvfb+yECtJLj0sR16PPXlR0o6TN0CMGd2XmXT25ohm?=
 =?us-ascii?q?MIWyM23KdnrENn0VeD0a94g/9CGdxJ/fxJUBw3NZrdz+x8FtDzVRjNftaPSFa6?=
 =?us-ascii?q?XNqmBSs9Qc42w98Le0x9Acmtjgjf3yq2BL8Yj7+LC4Yy8q7G23jxJtxyy3DJ1K?=
 =?us-ascii?q?Q6i1kmQ81PNXCph6Jl9gjTAZLJnFudl6qwaasc2yvN/n+ZzWWSpEFYTBJwUaLd?=
 =?us-ascii?q?UH8CfETWs8r26lnCT7C0D7QnKRVOyciFJqtOad3piFFGSeznONTfZWKxhmixCQ?=
 =?us-ascii?q?yJxrOKcIrlZWEd0D/BB0gDlgAZ5WyGOhQmBie9v2LeCyRjGk/1bEPy7+ZysnO7?=
 =?us-ascii?q?QVUyzwGRcUJh0aG4+hoUhfyaVvMS0agIuCYnqzVoAlm928jaBMaHpwpkZK9ce8?=
 =?us-ascii?q?8y4E9b1WLFsAxwJoCgL6Fnhl4ZbwR3v0Pv2w9rColalsgqtncqzAt0KaKXy15B?=
 =?us-ascii?q?czKY3ZbtOrzYMGXy/Rava7LI1VHaytqZ5qAP6PEgoVX5oA6pDlYi82lg09RNyX?=
 =?us-ascii?q?Sc4ovFDQUMXpPxSEo47AV6qKzAbSk75IPU0mNsPLKwsj/D3dIpGeQkxgyhf9dZ?=
 =?us-ascii?q?LKOLCgvyH9cGCMipLewgg0KpYQ4cPOBO6K40ONurdvub2KKxIOlshjOnjWRd74?=
 =?us-ascii?q?B73UKB7C58Su/O35YYzPCUxAqHVzHgjFi/tsD7g5xLZTYXHmCn0yjrGJZRZrFu?=
 =?us-ascii?q?fYYMEWquOcy3yclkiJ73RnFY80SvB1UY18+zeBqedkDy0hdU1UsKv3Ongyy4zz?=
 =?us-ascii?q?pvnjEtr6qf2jHOwuv4eBoGPG5LWHdtjVP2LYeoiNAaWVCibxI1mxu9+Ub6269b?=
 =?us-ascii?q?qbx/LmnSW0tJfzL6L3p/Uqu2rbeCZ89P6JU1sSRYSui8YFaaSqLjrBseyS/sA2?=
 =?us-ascii?q?xexDUjfTGwppr5hwB6iH6aLHtrrnrWY9twxRTc5NzbX/JRxSAJRCp7iTnWAFiz?=
 =?us-ascii?q?Id+p8M6Ql5fCtOC+Sm2gWodScSnt0YOPqi+76Xd2Dh24mvC5gsfnHhQi0S/ny9?=
 =?us-ascii?q?lqUj3FrRbmbYnszai6M+Nnfk9zCV/46sp6HJx+k4QqiJER33gamoua/X4dnWjv?=
 =?us-ascii?q?NtVb3Lr0bGARSj4T397V/A/l1VVgLn2TxoL1THWdwtZ7aNm8bWMbwSY978FMCK?=
 =?us-ascii?q?eJ471Ihyp1olykrQ3PZfhxhCsSyfwr6HQCmeEGpBItzjmBArAVBURYOC3slxeS?=
 =?us-ascii?q?4NykoqRYen2vcaSu20pkht+uEquCog5HVXb9e5ciGzJw78plPFLN1n3z9p/reN?=
 =?us-ascii?q?3KYd0PsR2Ulg/Kj/JJJ5IpivoKmS1nNHrhvX0izu43lx1v0ou8vIiaMGVt56O5?=
 =?us-ascii?q?DwVcNj30YcMT5z7sgbxfnsaQw4CgAJFhFi8XU5vvSPKiCCgSuuj/NwaSDD08rW?=
 =?us-ascii?q?+WFqHFEg+Y7EdmsmjDE5S2N3yMIHkZzNNiRASSJUBFgQAUWik6kYA9Fgyw2MPh?=
 =?us-ascii?q?d0J57CgL5lHkshtM1v5oNx7nX2fdvgiobyk7SIOFIBpK9A1C5FrVMc+D7uJ1BS?=
 =?us-ascii?q?5Y5YasrAiMKmydegRJAnsFWk2CB1D/ILau4cPM/PSfBuq7N/HOe6mBqfRCV/eU?=
 =?us-ascii?q?wpKiyotn/zGRNsWWI3ltFfs71lBYXXB+HcTZlC4CSygWlyLLcs6aqw2w+ixxrs?=
 =?us-ascii?q?Cj7vvrXBjj6peIC7tXKd9v4Qy5gb+fN+6MgyZ0MTZY2Y0NxX/Ly7gf3UQeiyJ0?=
 =?us-ascii?q?dzmqHrQPqzTNTL/LmqJMCx4baiVzNNZH7q4m3wlNP9Lbhc3x1rJikvE1DFJFX0?=
 =?us-ascii?q?T7ms61fcwKP329NFTfCUmRKbSJPifLzN/3YK+mTb1Qjf5ZtxmxuTadDk/iMS6P?=
 =?us-ascii?q?lzjvVxCzL+5MiDuXMwBZuIG4ahxtE3TsTMr6ah2nN996lSE2wbwxhn/QKWEQKy?=
 =?us-ascii?q?Rzc0NTob2W9i5YhvR/G2pc7ntqN+WEmiCZ7/XGJZYSq/dkHiN0l+dC6nQg17RV?=
 =?us-ascii?q?9D1EROBymCbKrt9huVemkuyOyjphSBVPqzZLi5iNvUVtIqjZ8phAWXDZ/BMC92?=
 =?us-ascii?q?mQChIKp8d7Bd3roaxf1t/PlKegYAtFptbV+9YMQsvZMsSKNFI/PhfzXj3ZFg0I?=
 =?us-ascii?q?SXisL26MqVZalaS97HCa5rsgrZHs3boHUKNeXVp9QvwAB0tmHPQGIZFqTj0jjL?=
 =?us-ascii?q?iXhdIJ4nz4qwPeEpYJ9qvbX+6fVK28YA2SiqNJMl5Rmev1?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ARAAB5YgZch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBAYNqJ4N5iBlfiy+CIYh9iT+EeYFzFBgTAYgRIjQJDQEDAQEBAQE?=
 =?us-ascii?q?BAgETAQEBCgsJCCkjDEIBEAGBYiQBgmIDAwECIAQLAQ0BATcBBQkBASQCBSECA?=
 =?us-ascii?q?gMMEjYZBYMcgWoDFQQBox9wfAwngnYBAQWFDg2CFAiBC4ZkgxOBHBeBf4Z6hS6?=
 =?us-ascii?q?CV4kPJIFvlGEYLgmKNoNdgyMjgVuFEYo6LI5MiX2BRoINMxoIKAiDJ4IbNYhMh?=
 =?us-ascii?q?UA/MoECAwEBIROFPIUiAQE?=
X-IPAS-Result: =?us-ascii?q?A0ARAAB5YgZch0O0hNFjHAEBAQQBAQcEAQGBUQcBAQsBAYN?=
 =?us-ascii?q?qJ4N5iBlfiy+CIYh9iT+EeYFzFBgTAYgRIjQJDQEDAQEBAQEBAgETAQEBCgsJC?=
 =?us-ascii?q?CkjDEIBEAGBYiQBgmIDAwECIAQLAQ0BATcBBQkBASQCBSECAgMMEjYZBYMcgWo?=
 =?us-ascii?q?DFQQBox9wfAwngnYBAQWFDg2CFAiBC4ZkgxOBHBeBf4Z6hS6CV4kPJIFvlGEYL?=
 =?us-ascii?q?gmKNoNdgyMjgVuFEYo6LI5MiX2BRoINMxoIKAiDJ4IbNYhMhUA/MoECAwEBIRO?=
 =?us-ascii?q?FPIUiAQE?=
X-IronPort-AV: E=Sophos;i="5.56,313,1539673200"; 
   d="scan'208";a="55432732"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 04 Dec 2018 03:21:45 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727272AbeLDLC6 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 4 Dec 2018 06:02:58 -0500
Received: from mail.kernel.org ([198.145.29.99]:49128 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1727709AbeLDLCz (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 4 Dec 2018 06:02:55 -0500
Received: from localhost (5356596B.cm-6-7b.dynamic.ziggo.nl [83.86.89.107])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id D19142146D;
        Tue,  4 Dec 2018 11:02:53 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1543921374;
        bh=gZHJgQJw/Fz7T/8iXjhjZdm4DCrpmeZXSJR0gxlLBME=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=Mns7qrmmZgXGRKdSE1vaCLmCRxoGmQeWGv8nPjt9fKLjbcvN3eAtKo80FDobN/Iji
         U1ukYG8WxNSQmX9Zey3N0QsAd3MKqjoovOmR3prGvc6bHcW8l9vbhEMLHUVkSGhWUA
         LaMvXp7ZxUsUSO9XqJWSJpqACkSh7g+6D0ZKbsLA=
From: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
To: linux-kernel@vger.kernel.org
Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        stable@vger.kernel.org, Greg KH <greg@kroah.com>,
        Silvio Cesare <silvio.cesare@gmail.com>,
        Linus Torvalds <torvalds@linux-foundation.org>,
        Chao Yu <yuchao0@huawei.com>, Jaegeuk Kim <jaegeuk@kernel.org>,
        Ben Hutchings <ben.hutchings@codethink.co.uk>,
        Sasha Levin <sashal@kernel.org>
Subject: [PATCH 4.14 046/146] f2fs: enhance sanity_check_raw_super() to avoid potential overflow
Date: Tue,  4 Dec 2018 11:48:52 +0100
Message-Id: <20181204103728.711411606@linuxfoundation.org>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <20181204103726.750894136@linuxfoundation.org>
References: <20181204103726.750894136@linuxfoundation.org>
User-Agent: quilt/0.65
X-stable: review
X-Patchwork-Hint: ignore
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

4.14-stable review patch.  If anyone has any objections, please let me know.

------------------

commit 0cfe75c5b011994651a4ca6d74f20aa997bfc69a upstream.

In order to avoid the below overflow issue, we should have checked the
boundaries in superblock before reaching out to allocation. As Linus suggested,
the right place should be sanity_check_raw_super().

Dr Silvio Cesare of InfoSect reported:

There are integer overflows with using the cp_payload superblock field in the
f2fs filesystem potentially leading to memory corruption.

include/linux/f2fs_fs.h

struct f2fs_super_block {
...
        __le32 cp_payload;

fs/f2fs/f2fs.h

typedef u32 block_t;    /*
                         * should not change u32, since it is the on-disk block
                         * address format, __le32.
                         */
...

static inline block_t __cp_payload(struct f2fs_sb_info *sbi)
{
        return le32_to_cpu(F2FS_RAW_SUPER(sbi)->cp_payload);
}

fs/f2fs/checkpoint.c

        block_t start_blk, orphan_blocks, i, j;
...
        start_blk = __start_cp_addr(sbi) + 1 + __cp_payload(sbi);
        orphan_blocks = __start_sum_addr(sbi) - 1 - __cp_payload(sbi);

+++ integer overflows

...
        unsigned int cp_blks = 1 + __cp_payload(sbi);
...
        sbi->ckpt = kzalloc(cp_blks * blk_size, GFP_KERNEL);

+++ integer overflow leading to incorrect heap allocation.

        int cp_payload_blks = __cp_payload(sbi);
...
        ckpt->cp_pack_start_sum = cpu_to_le32(1 + cp_payload_blks +
                        orphan_blocks);

+++ sign bug and integer overflow

...
        for (i = 1; i < 1 + cp_payload_blks; i++)

+++ integer overflow

...

      sbi->max_orphans = (sbi->blocks_per_seg - F2FS_CP_PACKS -
                        NR_CURSEG_TYPE - __cp_payload(sbi)) *
                                F2FS_ORPHANS_PER_BLOCK;

+++ integer overflow

Reported-by: Greg KH <greg@kroah.com>
Reported-by: Silvio Cesare <silvio.cesare@gmail.com>
Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
Reviewed-by: Chao Yu <yuchao0@huawei.com>
Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
[bwh: Backported to 4.14: No hot file extension support]
Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
Signed-off-by: Sasha Levin <sashal@kernel.org>
---
 fs/f2fs/super.c | 71 ++++++++++++++++++++++++++++++++++++++++++++-----
 1 file changed, 64 insertions(+), 7 deletions(-)

diff --git a/fs/f2fs/super.c b/fs/f2fs/super.c
index 7cda685296b2..c3e1090e7c0a 100644
--- a/fs/f2fs/super.c
+++ b/fs/f2fs/super.c
@@ -1807,6 +1807,8 @@ static inline bool sanity_check_area_boundary(struct f2fs_sb_info *sbi,
 static int sanity_check_raw_super(struct f2fs_sb_info *sbi,
 				struct buffer_head *bh)
 {
+	block_t segment_count, segs_per_sec, secs_per_zone;
+	block_t total_sections, blocks_per_seg;
 	struct f2fs_super_block *raw_super = (struct f2fs_super_block *)
 					(bh->b_data + F2FS_SUPER_OFFSET);
 	struct super_block *sb = sbi->sb;
@@ -1863,6 +1865,68 @@ static int sanity_check_raw_super(struct f2fs_sb_info *sbi,
 		return 1;
 	}
 
+	segment_count = le32_to_cpu(raw_super->segment_count);
+	segs_per_sec = le32_to_cpu(raw_super->segs_per_sec);
+	secs_per_zone = le32_to_cpu(raw_super->secs_per_zone);
+	total_sections = le32_to_cpu(raw_super->section_count);
+
+	/* blocks_per_seg should be 512, given the above check */
+	blocks_per_seg = 1 << le32_to_cpu(raw_super->log_blocks_per_seg);
+
+	if (segment_count > F2FS_MAX_SEGMENT ||
+				segment_count < F2FS_MIN_SEGMENTS) {
+		f2fs_msg(sb, KERN_INFO,
+			"Invalid segment count (%u)",
+			segment_count);
+		return 1;
+	}
+
+	if (total_sections > segment_count ||
+			total_sections < F2FS_MIN_SEGMENTS ||
+			segs_per_sec > segment_count || !segs_per_sec) {
+		f2fs_msg(sb, KERN_INFO,
+			"Invalid segment/section count (%u, %u x %u)",
+			segment_count, total_sections, segs_per_sec);
+		return 1;
+	}
+
+	if ((segment_count / segs_per_sec) < total_sections) {
+		f2fs_msg(sb, KERN_INFO,
+			"Small segment_count (%u < %u * %u)",
+			segment_count, segs_per_sec, total_sections);
+		return 1;
+	}
+
+	if (segment_count > (le32_to_cpu(raw_super->block_count) >> 9)) {
+		f2fs_msg(sb, KERN_INFO,
+			"Wrong segment_count / block_count (%u > %u)",
+			segment_count, le32_to_cpu(raw_super->block_count));
+		return 1;
+	}
+
+	if (secs_per_zone > total_sections) {
+		f2fs_msg(sb, KERN_INFO,
+			"Wrong secs_per_zone (%u > %u)",
+			secs_per_zone, total_sections);
+		return 1;
+	}
+	if (le32_to_cpu(raw_super->extension_count) > F2FS_MAX_EXTENSION) {
+		f2fs_msg(sb, KERN_INFO,
+			"Corrupted extension count (%u > %u)",
+			le32_to_cpu(raw_super->extension_count),
+			F2FS_MAX_EXTENSION);
+		return 1;
+	}
+
+	if (le32_to_cpu(raw_super->cp_payload) >
+				(blocks_per_seg - F2FS_CP_PACKS)) {
+		f2fs_msg(sb, KERN_INFO,
+			"Insane cp_payload (%u > %u)",
+			le32_to_cpu(raw_super->cp_payload),
+			blocks_per_seg - F2FS_CP_PACKS);
+		return 1;
+	}
+
 	/* check reserved ino info */
 	if (le32_to_cpu(raw_super->node_ino) != 1 ||
 		le32_to_cpu(raw_super->meta_ino) != 2 ||
@@ -1875,13 +1939,6 @@ static int sanity_check_raw_super(struct f2fs_sb_info *sbi,
 		return 1;
 	}
 
-	if (le32_to_cpu(raw_super->segment_count) > F2FS_MAX_SEGMENT) {
-		f2fs_msg(sb, KERN_INFO,
-			"Invalid segment count (%u)",
-			le32_to_cpu(raw_super->segment_count));
-		return 1;
-	}
-
 	/* check CP/SIT/NAT/SSA/MAIN_AREA area boundary */
 	if (sanity_check_area_boundary(sbi, bh))
 		return 1;
-- 
2.17.1



