Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 08:45:01 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 97358580213;
	Thu, 29 Nov 2018 06:46:58 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga003-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 06:46:58 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AADFwNxW54Sx9Xb6DsJDXO86Fq7DV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhGPtadThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXSm1cUMZMTCxBGp2z?=
 =?us-ascii?q?YJcTD+QPOuZYqpPyp1oIrRCjAQWhC+fixjpOi3Tr36M1zv4hHBnG0gI+AtwAvn?=
 =?us-ascii?q?faotL3O6ccX++6w7XHwzrYb/NO2zrw85TIfxMvrP2QR799a8jcxE8yHA3FlFWQ?=
 =?us-ascii?q?ronlMiuU2OQXrWeb4PdrW+e1i24gsQ5xoiGjyMU2hYnTmoIVz0rL9SNky4syKt?=
 =?us-ascii?q?24UlB0YdGnEJtQrCyaM4p2QsU/Q2BntiY6zaAGuZimcycQ1JQnxhnfa/qdf4iP?=
 =?us-ascii?q?+BLjW/+cLDFlj3xrf7K/ggy98UmmyuDkVcm7zkxKrixbndnIrHwN0AbT6sefRv?=
 =?us-ascii?q?Rn5kehwS2P1xjU6uFYO0w7ia3bK5snz7UtlZQTqVzOEjHqlEjylqOaa0sp9vay?=
 =?us-ascii?q?5+j6YbjquoWQOo52hw3mMakjlNazDOc5PwQUXGWW/f6w2KD/8UD7RrhBk+c4nb?=
 =?us-ascii?q?PDsJ/AIMQWvq65DBFR0oYk8xu/ETim38oCnXUdL1JKZgiHj473NFHKOvz4Cu2/?=
 =?us-ascii?q?g1u0nDdqwfDJIKHhD43TInTflLrtZ6tx5kBCxAYp0NxS5I5YBqsALf/xQkPxsc?=
 =?us-ascii?q?bXDh49Mwy62ebnD9B925saWWKOBK+ZLazTvUaL5u0xOemMYpEauDLkJ/gi6f/u?=
 =?us-ascii?q?i2E2mUUGcKm30psYdmq4Eu5lI0qHe3rshMkOEWMQsgo5Vuzqh0WOUSRPaHaqQ6?=
 =?us-ascii?q?I8+jY7BZqiDYfCRYCinqaN3SimHpBNYmBGC1aMEWrndomeWvcMbj6SLdFlkjAe?=
 =?us-ascii?q?SbehTIoh3wm0tADm07pnMvbU+ioAuJLjztd15vHTmgs19TBuD8SdznuCT2d7nm?=
 =?us-ascii?q?4TQz823aZ/oVFyy1uZ0Kh4heBYGsJX5/9TTgg6MpvcxfRgC9/uQgLBYsuJSFG+?=
 =?us-ascii?q?T9WkBjE+UMg9w9wJY0Z7HdWiiQvO3y6rA78TiryKC4Y48qPa33jtOcl9z2zK27?=
 =?us-ascii?q?Umj1kjWsFPL3GphrZj9wjPAI7Ei1+Wl72qdaQb3y7B7n2DwnCMvExDVA5wUKPF?=
 =?us-ascii?q?XW0QZ0fMrNT54F/CQKGqCbg9LgRBzsuCILNQatL1lVVGWOvjONPGbmKygWiwAw?=
 =?us-ascii?q?yExreNbIXwfWUd0z7QCEwFkwAV4HaHOhIyBiano2LCEjNuEUjjbF/r8el7sHm7?=
 =?us-ascii?q?VFM7zxmWb0190Lq44gMaiuaCS/wNxL4EuD0uqzNvHFmj2dLaDN6ApwlkfKVYet?=
 =?us-ascii?q?495FZH1WTEtw1yJJCgLqZihkIAfARzpU/hyxJ3CoBYm8gwsHwq1BZyKb6f0F5Z?=
 =?us-ascii?q?ajyXx47wNaPNJmny5h+vbbXW1U/Y0NuN/qcP6fI4q0jsvQ2zF0oi9Wln3MdR03?=
 =?us-ascii?q?eG+prKCw8SW4rrUkkr7xh6u63aYi4l6oPI1H1sNK60siPC29MpHucl1gysf9BF?=
 =?us-ascii?q?MKOAFQ/yFcIaCtOqKOwrnVipcx0FMPpT9K4yI8Opaf+G1LS3M+ZnmTKslX5H75?=
 =?us-ascii?q?xl0kKQ6yp8TfbF0IwBw/6G0QqISTf9gE26vcDqhI9LfzcSHmm4ySj6H4NRYqxy?=
 =?us-ascii?q?fYAWCWahOcG3x9N+h4LzVH5c7lKsG1QG2MqxcxqIc1P9xRFQ1VgQoXG/mSq40i?=
 =?us-ascii?q?Z4nC0zoque3CzB2eLidBUcN25PRWlii0rsIIeug9AbWkiocxYmlB+/6UnmwKhb?=
 =?us-ascii?q?obx1L3PPTkdQYyj2M2ZiX7OqtrqDf8FA8okovjhQUOimZ1CVVKT9oxoD3yz/BW?=
 =?us-ascii?q?RewC00eC+wupX+mRx3k2adLHd1rHrEdsB83xbf5NrARfFP2joKXjV3iT7SBlKk?=
 =?us-ascii?q?Jdmm4c2Ul4vfsuC5T2+gVpxTfTPrzI+aryu7+GtqDAa7n/CynN3nDAc73TX619?=
 =?us-ascii?q?lsSSXHshL8bpP32KS9NOJtZlNoC0Pk68pmBoF+lZM9hJMK1ngAhZWV/n0HnX3o?=
 =?us-ascii?q?MdpB2qL+b3sNRTgVzN7T+wXl3ExjLnSUx4P2THmdw81hZ8WkbWMSwC4y88dKCK?=
 =?us-ascii?q?KM5rxegSR1uka4rR7WYfVlnjYS0/wu5GQYg+EIvgog1SGdArEUHUlFMi3gjRWI?=
 =?us-ascii?q?79airKpJYGaja6S/1E17ndq5FrGNvhlcWGrlepclBSJw7d9wMFPW3H3z94HrYt?=
 =?us-ascii?q?/Qbd0Iux2QkhfAifVVKZ0rmvoLgypnJXzyvXk/x+Enihxu2ImwvJKbJGV14KK5?=
 =?us-ascii?q?HhlYOyXwZ8MS+THil7xSn8iI0IC0ApVuBC8LU4D2QvKyHzIfrvDnNweIED0hpX?=
 =?us-ascii?q?aXA7vfHQmD6Eh4q3LDCYykN3aSJHMB19VtWAGdJFBDgAATRDg6gpk5FgWwyM3g?=
 =?us-ascii?q?akh54C0R5kXjqhtN0e9oMxj/UmHCpAancDs0SZ6fLAZI4QFG/UvaLcue7udrFS?=
 =?us-ascii?q?FC4pKhtBCNKnCcZwlQFm4GQEuEB1T+PrW04dnA7vOVBu6/L/vIfLWPpvZSV/aO?=
 =?us-ascii?q?xZKzzIRm+yyAOdmIPnlnF/c7wFZMXWhlG8TFnDUCUy4XmDjIb8GFvxew4DF3ot?=
 =?us-ascii?q?q88PT2WwLv+I2PBKFJMdh0/xC2gKGDN/OfhSpjKDZY0I8MymHMyLQFwFESjCRu?=
 =?us-ascii?q?fSG3EbscrS7NUL7QmqhPAh8bbCNzKdJI778m0QlLI8LbkdT11rh3jvMuD1dFVF?=
 =?us-ascii?q?rhmtymZMAQImG9Mk/HC1iPNLicOTLLxMT3a7umSbJMlOVUqwGwuTGDHk/jIDuD?=
 =?us-ascii?q?ljrpVxOuMe1WjyGbJhteuI6jfRZ3FGjjV8nrahm6MN9xkD03zqc4hnLMNW4ALz?=
 =?us-ascii?q?d8d1lBoaGX7SNdmv9/AXBO7mJ5LemYnCaU9/PXKosNvvtxHCt1l/hW4HA7y7ZO?=
 =?us-ascii?q?6CFERfp1mDbdr9J0olGmlPWPxSRjUBZUtjlLg4eLt114OarF7plARWrE/BUV4G?=
 =?us-ascii?q?WMChQKosFpBcH1t69MytjAiqTzJSxG89LV+8scGsfVJNiGMHonLRrmBjrUABEZ?=
 =?us-ascii?q?Qj6sMGHVn1Zdn+2K9n2Jspg6rYDhmZoURb9dUVw1F/UaBVxkHdwCOph3WDwknK?=
 =?us-ascii?q?WfjM4J43q+sRbQSN9bvpDBSvKdH/HvJCyFgrlDYhtbiY//eIASMJDrnk9vcF93?=
 =?us-ascii?q?mKzUFEfKG9NAuCtsakkzukoe3mJ5SzgcwU/qIiC353YTUN69hAIzgw02Nes3+T?=
 =?us-ascii?q?jv438zJ1zXtCU3jU89kMnkhjbXdyT+evTjFbpKAjb54hBieqjwRBx4OEjvxEE?=
 =?us-ascii?q?=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AQAABm+/9bh0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgmmBAieDeYgYX4spgg0UiHyFLIkIFIFdFhgNBgGHdCI0CQ0BAwE?=
 =?us-ascii?q?BAQEBAQIBEwEBAQgNCQgpIwyCNiSCYwMDAQIgBAsBDQEBNwEFCQEBHwUCBSECA?=
 =?us-ascii?q?gMMEiURGQWDHAGBaQMVBAEKpRVwfAwngnYBAQWBMAGDVg2CFAiBC4Zggw+BHBe?=
 =?us-ascii?q?Bf4Z6RwQYgRQBEgFsgjeCV4ktljIYLgmGfocIgyEjgVpNhEOKMiyKPIJwgQuJa?=
 =?us-ascii?q?4FGgRxxMxoIKAiDJwkKgggJGoNKhRSFQD8yAQEIeAMBASETikiCPgEB?=
X-IPAS-Result: =?us-ascii?q?A0AQAABm+/9bh0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBgmm?=
 =?us-ascii?q?BAieDeYgYX4spgg0UiHyFLIkIFIFdFhgNBgGHdCI0CQ0BAwEBAQEBAQIBEwEBA?=
 =?us-ascii?q?QgNCQgpIwyCNiSCYwMDAQIgBAsBDQEBNwEFCQEBHwUCBSECAgMMEiURGQWDHAG?=
 =?us-ascii?q?BaQMVBAEKpRVwfAwngnYBAQWBMAGDVg2CFAiBC4Zggw+BHBeBf4Z6RwQYgRQBE?=
 =?us-ascii?q?gFsgjeCV4ktljIYLgmGfocIgyEjgVpNhEOKMiyKPIJwgQuJa4FGgRxxMxoIKAi?=
 =?us-ascii?q?DJwkKgggJGoNKhRSFQD8yAQEIeAMBASETikiCPgEB?=
X-IronPort-AV: E=Sophos;i="5.56,295,1539673200"; 
   d="scan'208";a="54234052"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 06:46:36 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2388447AbeK3BfA (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 29 Nov 2018 20:35:00 -0500
Received: from mail.kernel.org ([198.145.29.99]:36556 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1731958AbeK3BfA (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 29 Nov 2018 20:35:00 -0500
Received: from localhost (5356596B.cm-6-7b.dynamic.ziggo.nl [83.86.89.107])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id ED9CA2147D;
        Thu, 29 Nov 2018 14:29:26 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1543501767;
        bh=9s+0HeLDh/G5RAjwKOcWj9nHkPT/541yKmF1nPhw6yk=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=Yr++Yz/wQCgGLSzAB4GLYqK+VOs3kwBcF4XZLzdL0CKehU8fdljyoiYrKD5lJHoiC
         x6vzYRNlwN2oyvune7BttyCqJTfUk237DEyQTS91/P3gXoH4+ZdKmq9QExrK1bIm8q
         TXqMkU3rDOtF2PdMdo7SbGFyWznjw8YCHPgzg+9k=
From: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
To: linux-kernel@vger.kernel.org
Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        stable@vger.kernel.org,
        Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>,
        syzbot <syzbot+71c6b5d68e91149fc8a4@syzkaller.appspotmail.com>,
        Andrew Morton <akpm@linux-foundation.org>,
        Tigran Aivazian <aivazian.tigran@gmail.com>,
        Matthew Wilcox <willy@infradead.org>,
        Linus Torvalds <torvalds@linux-foundation.org>
Subject: [PATCH 4.19 033/110] bfs: add sanity check at bfs_fill_super()
Date: Thu, 29 Nov 2018 15:12:04 +0100
Message-Id: <20181129135922.602882966@linuxfoundation.org>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <20181129135921.231283053@linuxfoundation.org>
References: <20181129135921.231283053@linuxfoundation.org>
User-Agent: quilt/0.65
X-stable: review
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

4.19-stable review patch.  If anyone has any objections, please let me know.

------------------

From: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>

commit 9f2df09a33aa2c76ce6385d382693f98d7f2f07e upstream.

syzbot is reporting too large memory allocation at bfs_fill_super() [1].
Since file system image is corrupted such that bfs_sb->s_start == 0,
bfs_fill_super() is trying to allocate 8MB of continuous memory. Fix
this by adding a sanity check on bfs_sb->s_start, __GFP_NOWARN and
printf().

[1] https://syzkaller.appspot.com/bug?id=16a87c236b951351374a84c8a32f40edbc034e96

Link: http://lkml.kernel.org/r/1525862104-3407-1-git-send-email-penguin-kernel@I-love.SAKURA.ne.jp
Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Reported-by: syzbot <syzbot+71c6b5d68e91149fc8a4@syzkaller.appspotmail.com>
Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
Cc: Tigran Aivazian <aivazian.tigran@gmail.com>
Cc: Matthew Wilcox <willy@infradead.org>
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

---
 fs/bfs/inode.c |    9 ++++++---
 1 file changed, 6 insertions(+), 3 deletions(-)

--- a/fs/bfs/inode.c
+++ b/fs/bfs/inode.c
@@ -350,7 +350,8 @@ static int bfs_fill_super(struct super_b
 
 	s->s_magic = BFS_MAGIC;
 
-	if (le32_to_cpu(bfs_sb->s_start) > le32_to_cpu(bfs_sb->s_end)) {
+	if (le32_to_cpu(bfs_sb->s_start) > le32_to_cpu(bfs_sb->s_end) ||
+	    le32_to_cpu(bfs_sb->s_start) < BFS_BSIZE) {
 		printf("Superblock is corrupted\n");
 		goto out1;
 	}
@@ -359,9 +360,11 @@ static int bfs_fill_super(struct super_b
 					sizeof(struct bfs_inode)
 					+ BFS_ROOT_INO - 1;
 	imap_len = (info->si_lasti / 8) + 1;
-	info->si_imap = kzalloc(imap_len, GFP_KERNEL);
-	if (!info->si_imap)
+	info->si_imap = kzalloc(imap_len, GFP_KERNEL | __GFP_NOWARN);
+	if (!info->si_imap) {
+		printf("Cannot allocate %u bytes\n", imap_len);
 		goto out1;
+	}
 	for (i = 0; i < BFS_ROOT_INO; i++)
 		set_bit(i, info->si_imap);
 


