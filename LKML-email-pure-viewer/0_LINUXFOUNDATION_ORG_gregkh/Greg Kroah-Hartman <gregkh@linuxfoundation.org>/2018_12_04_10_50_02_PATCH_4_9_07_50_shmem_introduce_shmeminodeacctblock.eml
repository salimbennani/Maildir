Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 04 Dec 2018 20:36:30 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 7B1B5580375;
	Tue,  4 Dec 2018 03:09:14 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by fmsmga006-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 04 Dec 2018 03:09:13 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AT47CMhayVpSaOVPnlclyrCv/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpcm4YR7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyxPDJ2h?=
 =?us-ascii?q?YYUBDOQPOuRXr4fzqFQBsRSwChKsBPvtxzJTmn/73qM33/g7HAzc3gEtGc8Fvn?=
 =?us-ascii?q?TOrNXyMacfSeG7zLPWwjXMcvhY3C396I/SfRAhuP2CX6h/cdDNyUkqDQzFiEib?=
 =?us-ascii?q?pIvqPzOPyOsNvGub7+p7WOKrim4nrRxxozehxscrl4nJgJ8axUrY9SV4x4Y1I8?=
 =?us-ascii?q?e0SElhYd6rCZZdsTyROYVxQsMnWW5ouSA6x6UFuZGlZigKzoooxxrFZ/yAaYiI?=
 =?us-ascii?q?7RTuX/uSLzdgnH9pZq6zihKo/US9xODwSNO43EtJoyZZiNXBt3IA2wTQ58WJUP?=
 =?us-ascii?q?dw/Uas1SyM2g3X8O1IPFw4mKjdJpU82LA/jIATvl7GHiLumEX5kquWdkI89+i2?=
 =?us-ascii?q?5OTofK/mqoWfN4BqkAH+NLohmsilDeQ/KAgOUHCX+eW61LL94U30WKtGguEyn6?=
 =?us-ascii?q?XDrZzXK9oXqrSkDwJWzoov8ReyAjW+3NQdh3YHLVZFeBydj4juPlHDOPT4Dfa5?=
 =?us-ascii?q?g1SxnzZn3vPGMaP7ApXLMHfDlK7tfbFz6k5a1gUz18tS54xbCr4fOvL/QEzxu8?=
 =?us-ascii?q?LCDh8/LQO0x/zrCNJn1oMRQW6PGLOWMLvOsV+U4eIiO+2MZI4WuDnjMfQk6OPu?=
 =?us-ascii?q?gGQ9mV8ce6mpwJQWZGq5HvRgP0WWf37sjs0dHmcNuwo0VPbqh0GaUT5Pe3ayWL?=
 =?us-ascii?q?ox5jEhB4KnEYfMXIetjKaB3CemBJJWYG9GB0uIEXfpcYWERvgNZDiTIs9njjwL?=
 =?us-ascii?q?S7yhR5U92hGpsQ/w06BnIfbM+i0EqZLj08B45+/UlR4s7zB0DMOd02eLT2FzhW?=
 =?us-ascii?q?4IQz423KZioU1y0FuD0K54g+BGGtxX/f9GTgA6NZvExexgF9/yQh7BfsuOSFu+?=
 =?us-ascii?q?WNqmGjExTtUyw9MUeUZyAdeigwvH3yqrBb8VirOKCIY18qLaw3j+OcJ9x2za26?=
 =?us-ascii?q?kmilksWtFPOnG+hq5j6wjTAJbEk0aDmKasb6gc2C/N+32FzWqBp0xYVA9wUaPY?=
 =?us-ascii?q?XXEQfEfWrNL55l/cQL+qE7goLgxBycuaIKtQdtLplUlGROvkONnGfm2+gXmwCg?=
 =?us-ascii?q?iSyrOMdoXqfX4d0zvbCEQDlwAT/nOGNQwlCyelomLeCiFuFF31b0Pt9+l+tG20?=
 =?us-ascii?q?Tksuww6WaE1h0qK/+gQJivyEV/MTwrUEtT88pDpuAlaywcjaC9qaqApnZ6VTf9?=
 =?us-ascii?q?U97UxD1WLYsQx9I5OhI7pjhl4YbwR4oUfu2w9rBYVHlMggtGkqwxZqKaKEzFNB?=
 =?us-ascii?q?cCuV3YzxOr3SLWny4BCvaq7M1lHCytqW/b0P6PA5q1XlswGkDU4i83Rh09lI3H?=
 =?us-ascii?q?qQ/JTKDAwOUZ3vVkY77QR1p7bfYiMl/YPbyWVsMbWosj/Fw98mHu8lxQivfthB?=
 =?us-ascii?q?MKKIDhT9E9AHCMe0LuwqmF+pbgwfMeBW9a40Od6mdvSc1K6qOuZggCypjWBd7I?=
 =?us-ascii?q?9h1UKM8jJ2SvTU0JYd3/GYwgyHWi/8jVe8qMz4hZpIZDASHmWlzyjkC5VcZqlz?=
 =?us-ascii?q?fYYNFGevLNe7xtR4h57xRXFY8ESvCE8B2M+sYRCSdUDy3RVM1UQLpnyqgTG4zz?=
 =?us-ascii?q?1onD4ztKqQwSvOz/7kdBUZIG5LRXBugkv2Loiwkt8VQlKobw8vlBa+4Ub6xq5b?=
 =?us-ascii?q?pLlwLmXJQEdIeTT2IH9mUqeqqrWCZMtP4osysSpLSOS8fUyaSrnlrhoa0iPvBW?=
 =?us-ascii?q?tfyCogdzG3vJX0hBh6iGObLHZuo3vVY8BwxRHD5NPCQf5dxCYJRC59iTPPHFiz?=
 =?us-ascii?q?I8Gp/cmIl5fEqu2+VXiuVodQcSnoyoOMrjC76ndpAR28nvCznMPoEQ4h3C//1t?=
 =?us-ascii?q?lqUzjIrRnmbonq0aS6Lfxofk1yCFDg7Mp6H5l0kpEsi5EIxXgampKV8GIHkGjp?=
 =?us-ascii?q?NtVXw6D+bHsLRTMQx97V4Q7l2FBsL36TxoL5UGmdzdVlZ9WgfmwW3Sc95dhQCK?=
 =?us-ascii?q?iI9LxEgTd1ol2goALSe/d9ny0Ryfsz6HEAheEJtxEgziGcArAUAElZMjbglxWO?=
 =?us-ascii?q?79CisqpXYHyjfqS31Ep7hdqhFq2NohlAWHblfZcvBSpw7sR8MF3WynHy5J/reM?=
 =?us-ascii?q?LMbd0NrB2biAnPj/JaKJ8qkvoKhCxnOX/yvHE/yu47iwBu0o++vISdN2pt+6e5?=
 =?us-ascii?q?CAZCNjLpf8MT5i3tjaFGk8aK2ICvG49tGzQRU5vuUPKoCykStfX8OgaKET08rG?=
 =?us-ascii?q?qbGLXFEQ+e7kdms2zAE5SxO36LI3kZyM1oRAOBK0xHnAAUQDI6k4YiGQ+ww8zh?=
 =?us-ascii?q?dFp56ioV5l7lsRZMzuNoNx/iUmbQvguoazE0SISBIxpS9A1N+0DVMcmG5OJpAy?=
 =?us-ascii?q?5Y5oGhrBCKKmGDZQRHF2QJVVKfB1z5Irmi/9rA8/WbBuqjKfvBe66OpPdaV/eJ?=
 =?us-ascii?q?w5Kvz4Rn8yyNNsWJInltEfk71lBfUnB+HsTTgy8PRDAPlyLRc86bow+x+y1wrs?=
 =?us-ascii?q?Ci6fTrRRjg5Y2VB7tJNtVv/R+2jLyHN+6RgiZ5NDlZ2okNxX/O1LgQwloShzty?=
 =?us-ascii?q?eDmqFLQKrTTNQ77Imq9LEx4bbDt+NMtW4KI93QlNOs/bhsn21r5iif41BElKVU?=
 =?us-ascii?q?b8msGyfsEKJ2C9NFXaBEeELriGJDvLw93pbqO4U7FfkOJUtxioszaBD0DjJiiD?=
 =?us-ascii?q?lyXuVx23K+5MkTqUPAZAt4C9aBptDWnjQcniah26Nt93kDI3zac1hnPMKW4TLz?=
 =?us-ascii?q?x8f1lRob2X6CNSmu9/FHBZ7np5MemEnD6U7/XZKpYTq/dkHj54mP5a4HskzbtY?=
 =?us-ascii?q?9yVERP1zmCvPod9iuVCmku+TyjV5VBpCsCpEhIWOvU96I6XW6oFAWWrY/BIK9W?=
 =?us-ascii?q?iRCw4Fp91gCt3uvaBf0tnOlKLpJzdE/NLZ5s8cB8nSKMKaP3stKxvpGDjIDAQb?=
 =?us-ascii?q?ST6nL33Qh0tYkKLaynrAqpk8t4ipm5cUTLJffEI6G+lcCUl/GtEGZpBtUWAKi7?=
 =?us-ascii?q?me2eES6HX2jwPWTcUfnpndSvebB727JyyUgrpETx8Jx67oI4MOMIHyx01lbB99?=
 =?us-ascii?q?houcSBmYZsxEviA0Nlx8m05K6nUrCzRrg08=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AoAACqXwZch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUwUBAQsBAYJogQIng3mIeIsvgiGOKoQShHkUgRADTBQYDQYBiBEiNgcNAQM?=
 =?us-ascii?q?BAQEBAQECARMBAQEKCwkIKSMMQgEQAYFiJAGCYgMDAQIgBAsBDQEBNwEFCQEBJ?=
 =?us-ascii?q?AIFIQICAww3ERkFgxwBggEEAQqjEXB8DCeCdgEBBYEwAYV+CIELhmSDE4EcF4F?=
 =?us-ascii?q?/iHEBEgGDI4JXiSkKgW+FXo8DRgmHA4ozI4FbTYREijosiVxtgneLCYFNBGEwc?=
 =?us-ascii?q?TMaCCgIgycJCoIIDBeIXoVAPzIBAQF/AwEBIROFPIJkgj4BAQ?=
X-IPAS-Result: =?us-ascii?q?A0AoAACqXwZch0O0hNFjHAEBAQQBAQcEAQGBUwUBAQsBAYJ?=
 =?us-ascii?q?ogQIng3mIeIsvgiGOKoQShHkUgRADTBQYDQYBiBEiNgcNAQMBAQEBAQECARMBA?=
 =?us-ascii?q?QEKCwkIKSMMQgEQAYFiJAGCYgMDAQIgBAsBDQEBNwEFCQEBJAIFIQICAww3ERk?=
 =?us-ascii?q?FgxwBggEEAQqjEXB8DCeCdgEBBYEwAYV+CIELhmSDE4EcF4F/iHEBEgGDI4JXi?=
 =?us-ascii?q?SkKgW+FXo8DRgmHA4ozI4FbTYREijosiVxtgneLCYFNBGEwcTMaCCgIgycJCoI?=
 =?us-ascii?q?IDBeIXoVAPzIBAQF/AwEBIROFPIJkgj4BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,313,1539673200"; 
   d="scan'208";a="65205391"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 04 Dec 2018 03:09:12 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728738AbeLDLJI (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 4 Dec 2018 06:09:08 -0500
Received: from mail.kernel.org ([198.145.29.99]:58752 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1728725AbeLDLJE (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 4 Dec 2018 06:09:04 -0500
Received: from localhost (5356596B.cm-6-7b.dynamic.ziggo.nl [83.86.89.107])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 48749214E0;
        Tue,  4 Dec 2018 11:09:03 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1543921743;
        bh=7zTJffmiEQ2EAuUnQvFCV9mTNxtH1DopvUUFTj291vs=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=XfiwWAxyB1fto1ePIZba+4GhaWxz2uap3iMqAz7Gz414vHj6nDY+Km/2m8W+zKve6
         dD0ZTbmWHw2jtIFqU4BtV3VM6JijEch7DZ2Dd7CV8k4zKIuwyEhqN2oAAM3m68T0z6
         oUwb0nG/bSOfsd6FGM/YNb773JmSFvSuq9bZXhDs=
From: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
To: linux-kernel@vger.kernel.org
Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        stable@vger.kernel.org, Mike Rapoport <rppt@linux.vnet.ibm.com>,
        "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>,
        Andrea Arcangeli <aarcange@redhat.com>,
        Hillf Danton <hillf.zj@alibaba-inc.com>,
        Hugh Dickins <hughd@google.com>,
        Pavel Emelyanov <xemul@virtuozzo.com>,
        Andrew Morton <akpm@linux-foundation.org>,
        Linus Torvalds <torvalds@linux-foundation.org>,
        Sasha Levin <sashal@kernel.org>
Subject: [PATCH 4.9 07/50] shmem: introduce shmem_inode_acct_block
Date: Tue,  4 Dec 2018 11:50:02 +0100
Message-Id: <20181204103714.874823429@linuxfoundation.org>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <20181204103714.485546262@linuxfoundation.org>
References: <20181204103714.485546262@linuxfoundation.org>
User-Agent: quilt/0.65
X-stable: review
X-Patchwork-Hint: ignore
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

4.9-stable review patch.  If anyone has any objections, please let me know.

------------------

commit 0f0796945614b7523987f7eea32407421af4b1ee upstream.

The shmem_acct_block and the update of used_blocks are following one
another in all the places they are used.  Combine these two into a
helper function.

Link: http://lkml.kernel.org/r/1497939652-16528-3-git-send-email-rppt@linux.vnet.ibm.com
Signed-off-by: Mike Rapoport <rppt@linux.vnet.ibm.com>
Cc: "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>
Cc: Andrea Arcangeli <aarcange@redhat.com>
Cc: Hillf Danton <hillf.zj@alibaba-inc.com>
Cc: Hugh Dickins <hughd@google.com>
Cc: Pavel Emelyanov <xemul@virtuozzo.com>
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Sasha Levin <sashal@kernel.org>
---
 mm/shmem.c | 82 ++++++++++++++++++++++++++++--------------------------
 1 file changed, 42 insertions(+), 40 deletions(-)

diff --git a/mm/shmem.c b/mm/shmem.c
index b26f11221ea8..e30ffaa065a4 100644
--- a/mm/shmem.c
+++ b/mm/shmem.c
@@ -181,6 +181,38 @@ static inline void shmem_unacct_blocks(unsigned long flags, long pages)
 		vm_unacct_memory(pages * VM_ACCT(PAGE_SIZE));
 }
 
+static inline bool shmem_inode_acct_block(struct inode *inode, long pages)
+{
+	struct shmem_inode_info *info = SHMEM_I(inode);
+	struct shmem_sb_info *sbinfo = SHMEM_SB(inode->i_sb);
+
+	if (shmem_acct_block(info->flags, pages))
+		return false;
+
+	if (sbinfo->max_blocks) {
+		if (percpu_counter_compare(&sbinfo->used_blocks,
+					   sbinfo->max_blocks - pages) > 0)
+			goto unacct;
+		percpu_counter_add(&sbinfo->used_blocks, pages);
+	}
+
+	return true;
+
+unacct:
+	shmem_unacct_blocks(info->flags, pages);
+	return false;
+}
+
+static inline void shmem_inode_unacct_blocks(struct inode *inode, long pages)
+{
+	struct shmem_inode_info *info = SHMEM_I(inode);
+	struct shmem_sb_info *sbinfo = SHMEM_SB(inode->i_sb);
+
+	if (sbinfo->max_blocks)
+		percpu_counter_sub(&sbinfo->used_blocks, pages);
+	shmem_unacct_blocks(info->flags, pages);
+}
+
 static const struct super_operations shmem_ops;
 static const struct address_space_operations shmem_aops;
 static const struct file_operations shmem_file_operations;
@@ -237,31 +269,20 @@ static void shmem_recalc_inode(struct inode *inode)
 
 	freed = info->alloced - info->swapped - inode->i_mapping->nrpages;
 	if (freed > 0) {
-		struct shmem_sb_info *sbinfo = SHMEM_SB(inode->i_sb);
-		if (sbinfo->max_blocks)
-			percpu_counter_add(&sbinfo->used_blocks, -freed);
 		info->alloced -= freed;
 		inode->i_blocks -= freed * BLOCKS_PER_PAGE;
-		shmem_unacct_blocks(info->flags, freed);
+		shmem_inode_unacct_blocks(inode, freed);
 	}
 }
 
 bool shmem_charge(struct inode *inode, long pages)
 {
 	struct shmem_inode_info *info = SHMEM_I(inode);
-	struct shmem_sb_info *sbinfo = SHMEM_SB(inode->i_sb);
 	unsigned long flags;
 
-	if (shmem_acct_block(info->flags, pages))
+	if (!shmem_inode_acct_block(inode, pages))
 		return false;
 
-	if (sbinfo->max_blocks) {
-		if (percpu_counter_compare(&sbinfo->used_blocks,
-					   sbinfo->max_blocks - pages) > 0)
-			goto unacct;
-		percpu_counter_add(&sbinfo->used_blocks, pages);
-	}
-
 	spin_lock_irqsave(&info->lock, flags);
 	info->alloced += pages;
 	inode->i_blocks += pages * BLOCKS_PER_PAGE;
@@ -270,16 +291,11 @@ bool shmem_charge(struct inode *inode, long pages)
 	inode->i_mapping->nrpages += pages;
 
 	return true;
-
-unacct:
-	shmem_unacct_blocks(info->flags, pages);
-	return false;
 }
 
 void shmem_uncharge(struct inode *inode, long pages)
 {
 	struct shmem_inode_info *info = SHMEM_I(inode);
-	struct shmem_sb_info *sbinfo = SHMEM_SB(inode->i_sb);
 	unsigned long flags;
 
 	spin_lock_irqsave(&info->lock, flags);
@@ -288,9 +304,7 @@ void shmem_uncharge(struct inode *inode, long pages)
 	shmem_recalc_inode(inode);
 	spin_unlock_irqrestore(&info->lock, flags);
 
-	if (sbinfo->max_blocks)
-		percpu_counter_sub(&sbinfo->used_blocks, pages);
-	shmem_unacct_blocks(info->flags, pages);
+	shmem_inode_unacct_blocks(inode, pages);
 }
 
 /*
@@ -1423,9 +1437,10 @@ static struct page *shmem_alloc_page(gfp_t gfp,
 }
 
 static struct page *shmem_alloc_and_acct_page(gfp_t gfp,
-		struct shmem_inode_info *info, struct shmem_sb_info *sbinfo,
+		struct inode *inode,
 		pgoff_t index, bool huge)
 {
+	struct shmem_inode_info *info = SHMEM_I(inode);
 	struct page *page;
 	int nr;
 	int err = -ENOSPC;
@@ -1434,14 +1449,8 @@ static struct page *shmem_alloc_and_acct_page(gfp_t gfp,
 		huge = false;
 	nr = huge ? HPAGE_PMD_NR : 1;
 
-	if (shmem_acct_block(info->flags, nr))
+	if (!shmem_inode_acct_block(inode, nr))
 		goto failed;
-	if (sbinfo->max_blocks) {
-		if (percpu_counter_compare(&sbinfo->used_blocks,
-					sbinfo->max_blocks - nr) > 0)
-			goto unacct;
-		percpu_counter_add(&sbinfo->used_blocks, nr);
-	}
 
 	if (huge)
 		page = shmem_alloc_hugepage(gfp, info, index);
@@ -1454,10 +1463,7 @@ static struct page *shmem_alloc_and_acct_page(gfp_t gfp,
 	}
 
 	err = -ENOMEM;
-	if (sbinfo->max_blocks)
-		percpu_counter_add(&sbinfo->used_blocks, -nr);
-unacct:
-	shmem_unacct_blocks(info->flags, nr);
+	shmem_inode_unacct_blocks(inode, nr);
 failed:
 	return ERR_PTR(err);
 }
@@ -1717,10 +1723,9 @@ static int shmem_getpage_gfp(struct inode *inode, pgoff_t index,
 		}
 
 alloc_huge:
-		page = shmem_alloc_and_acct_page(gfp, info, sbinfo,
-				index, true);
+		page = shmem_alloc_and_acct_page(gfp, inode, index, true);
 		if (IS_ERR(page)) {
-alloc_nohuge:		page = shmem_alloc_and_acct_page(gfp, info, sbinfo,
+alloc_nohuge:		page = shmem_alloc_and_acct_page(gfp, inode,
 					index, false);
 		}
 		if (IS_ERR(page)) {
@@ -1842,10 +1847,7 @@ alloc_nohuge:		page = shmem_alloc_and_acct_page(gfp, info, sbinfo,
 	 * Error recovery.
 	 */
 unacct:
-	if (sbinfo->max_blocks)
-		percpu_counter_sub(&sbinfo->used_blocks,
-				1 << compound_order(page));
-	shmem_unacct_blocks(info->flags, 1 << compound_order(page));
+	shmem_inode_unacct_blocks(inode, 1 << compound_order(page));
 
 	if (PageTransHuge(page)) {
 		unlock_page(page);
-- 
2.17.1



