Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 08:42:27 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id A11CF580213;
	Thu, 29 Nov 2018 06:14:38 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by fmsmga006-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 06:14:38 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Adix+mhUZXnsa5Xry3n+Y2ojulqbV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhCPuqdThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGoOy?=
 =?us-ascii?q?YZUSAeQPPuhWqIvyp1UAohSxGQaiC/jvyidKi3Ltwa030OosHR3c0QE6Hd8Dtm?=
 =?us-ascii?q?nfotXvNKcVVOC41KjGzS/dYPNZxDzz7ZLIchc7rvGMRL5+c9DeyVMzFwPAlFqQ?=
 =?us-ascii?q?r5HuMjSa1uQXrWeb4OlgVeK0hm4jqgFxpCWvx8giionOm4IVzE3L+j9lwIY0It?=
 =?us-ascii?q?24TlR3Ydm+EJtfriyXMZZ9TMA6Q2xwpio21rkLtYSmcCUE1pgr3QPTZv+bf4SS?=
 =?us-ascii?q?4x/uVv6dLDR2iX5/e7+yhgy+/Eukx+HmS8W4zFRHoyxYmdfWrH8NzQbc6s2fR/?=
 =?us-ascii?q?t94Eih3TGP2hjN6uFLP080j7DXK50/zb4qkJocr0DDEjXxmEXsg6+abkQk+u62?=
 =?us-ascii?q?5OT7erjquIOQOotuhg3jPKkihNazDfk7PwQSRWSW+Oax2KXm/ULjQbVKivM2kr?=
 =?us-ascii?q?PesJDfPckboq+5AwlI0ocs8hq/DCmp0M4enXYZKFJJYRWHjobvO17QOvD1Fum/?=
 =?us-ascii?q?g1uynzdx3fzGPaPuAo/LLnfdlLftZ7F961RTyAYr19BQ+4pUCq0dIPL0QkLxsN?=
 =?us-ascii?q?3YDhwnPACuzOfnFc5w1ocfWWKJH6+YP7nesV6O5uIzPeaMYJUZtyr6K/gg//Tu?=
 =?us-ascii?q?l2M2mUcBfam12psacHC4Ee5nI0WFe3Xshc0NEWcXvgUkSuzqh0aPUTpSZ3a0Qq?=
 =?us-ascii?q?I96Ss3CIOgDYffWI+thKaN0zu8Hp1TfmpGEEyDEW/0d4WYXPcBcCCSIsh/nTAe?=
 =?us-ascii?q?VrihTIkh1ReptALhz7pnL+zU+jAXtJ751dh14fHTmg829TBuE8ud1GSNRXlunm?=
 =?us-ascii?q?wUXz82wLx/oUtlx1iZyqh4g/tYFd9J6/NTSAg6N4XRz+h7C9D0RwLAcc2FSFeg?=
 =?us-ascii?q?QtW6Hz4xSsg9zMMJY0Z4A9+ilAzM3zK2A78JkLyGHJ80/bja33TrI8Z9ymzJ1K?=
 =?us-ascii?q?8uj1Q9RstPNGumhrNw9gTJBo7JlVmZmLiudagGwCHN82KDx3KUvE5ESA5wTbnF?=
 =?us-ascii?q?XXcHa0TLt9v5+F3NQ6WuCbs9NAtB0tCNKq1NZt3tjlVGQfPjNc/aY2KwnWewGB?=
 =?us-ascii?q?mJyqmNbIrsZ2USwiHdBFIYnAAU+HaMLRI+CTu5o2LCEDxuEkribF72/ulgtny3?=
 =?us-ascii?q?VE80wBuMb016ybW1/AUYhfidS/MVw7IFtz0tqzRyHFahwd3WD8CMqBZmfKVZed?=
 =?us-ascii?q?k9+ktI1XrFtwxhOZytN7xihl8bcwRwo0Pu1xV2Bp9ckcQwq3Mq1g5yKaOe0FNO?=
 =?us-ascii?q?bD6Y2ZHwOrvKKmj95hyvaqjW2k3A39aS4KsA9PM4q1D7tgGzCkUi62ln08VS03?=
 =?us-ascii?q?aE/JrKCBQdUJ3vXUc37RR1vKzabTQn6IPS1n1sNre0vyTG29IoAusl1xmhc81e?=
 =?us-ascii?q?MKOCCA/9DckaC9KyJ+wtnlijdggEM/xK9K4oI8OmcOOL2a62POp6gD2ql2VG4I?=
 =?us-ascii?q?Bn3UKK+CpxUerI35cDw/GF0QqLTTb8jFG9ss/pnYBIfy0dHm26ySL8Ho5eerVy?=
 =?us-ascii?q?fZoXCWepO8C33NR+iIL3VH5C6VGjAEkK2Mm3dhqIblzxxBFf2l4ToXO6hyS41T?=
 =?us-ascii?q?t0kzcyo6qb3SzOxfnidRUdNm5KQmlikUnjIYyug98GW0ioahAjlAG56kbi26hb?=
 =?us-ascii?q?uKN/InHTQEdJZST3L3tuUrCttrqEeMNP7JIosSNKUOWze1yaS7j9owcE3CPnBW?=
 =?us-ascii?q?dR2Dc7dzSysJXjgxN6kH6dLGp0rHfBe8F/3w3f5N/fRf5WxDYGXzN3iTrUBli9?=
 =?us-ascii?q?Odmm49OUmozHsuC/UWKhS5JSfTPqzYOGqCu0+2lqDQejkPC0n93tCRI63jPj19?=
 =?us-ascii?q?l2SSXIqw7xY4nx2KS9K+5nfEhoBFnn5sp+G4F+lJYwhZ4K1XgbgJWV4WQIkWPp?=
 =?us-ascii?q?PdpH3qL+aWIHRSQXzN7N/AjlxEpjI2qKx43jV3WR2MthZ8SgbWMQ1SIw9MRKCK?=
 =?us-ascii?q?aS7LxZkip5uFu4rQTNYfdjmjcR0+ch6Hkfg+sRogoi0j2dAqwOHUlfJSHskhWI?=
 =?us-ascii?q?79Oko6lNamegb6Ow1FZgktC7F76NvBtcWHnid5cmHC9w6Nh/MV3W3H3y7IHkZM?=
 =?us-ascii?q?ffbdYJuhKIlBfAivBfKIgtmfoSmSpnJWX9sGU5y+48iBxix5C7s5KBK2Vw56K5?=
 =?us-ascii?q?GR9YOybxZ8MS/DHtkKlfktyX34CpApVuBDELUIH0QvKvFTIYre7nOBqWED0gtn?=
 =?us-ascii?q?ebHqLSEhSF50dhq3LPDoqnN3WKJHQCydViRR+dJFFQgQwOXTU6mII5GR6uxMD7?=
 =?us-ascii?q?bEh54TUR7EbiqhRQ0uJoKwX/UmDHqQeqcDg0TYaQLAFM4gFe/UvVMtGe7uFuHy?=
 =?us-ascii?q?Fe5JKhtxeAKmiaZwROEGEIVVaIB1HlPrmy+9bA9/KUCfa5L/vLeb+Os/BRV++U?=
 =?us-ascii?q?xZKz1Ytr5zaNNsKSPnl7Ev00wExDUWpiG8TenTUPRDcalybMb86duRe99Td7rs?=
 =?us-ascii?q?G58PT3Rg3v4ZGDBKdVMdVq4xq2m7uMN/aMhCZlLjZVzpMMymHJyLgc314Sijti?=
 =?us-ascii?q?dzq3EbQHui7CUrjQmrJMDxMAbyNzNc1I778z3wVXOM7bjM/12aB8jvIvF1hFUl?=
 =?us-ascii?q?nhkNmzZcMWO2G9KE/HBEGTObucOD3E2Nv3br28SLFKiOVUtga9uTKaE0/lIzSC?=
 =?us-ascii?q?mCPlVxGpMeFQki6bOAZSt526chZoEWLjVs7pagWnMN9rij072aE0hnLPNWIGLT?=
 =?us-ascii?q?dwaV9Crr2O4iNemfh/H21B7nx4LeiLgSqZ7u/YKooIvvtvGCh7i+Va4HEiwbtP?=
 =?us-ascii?q?8C5EXOB1mDfVrtN2o1CpiO+Pyj9mUBpIsjlKhYKLsl9kOaXW7ZRAXXfE/BQQ7W?=
 =?us-ascii?q?SfERgKpt1lCsHxtKBU0NTAiKXzKDIRu+7TqM8dAdXEbcGKKnwsNTL3FzPOSggI?=
 =?us-ascii?q?VzimMSfYnUMOvuuV8yi6tJU14rv2n5MOD59STkAwH/VSXkt/EdMBIL9zXzU5gb?=
 =?us-ascii?q?CckcgE7Ga/qx+XQ99V6MOUHsmOCOnifW7KxYJPYAEFlPahddwe?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAACX8/9bh0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgVqCESeDeYgYX4spgiGIfI40gXMUGBMBh3QiNAkNAQMBAQEBAQE?=
 =?us-ascii?q?CARMBAQEIDQkIKSMMgjYkAYJiAwMBAiAECwENAQE3AQUJAQEkAgUhAgIDDBI2G?=
 =?us-ascii?q?QWDHIFqAxUEAaUbcHwMJ4J2AQEFhQcNghQIgQuGYIMPgRwXgX+BEYVphS6CV4k?=
 =?us-ascii?q?thXuQTy4JiiuDW4MhI4FahRCKMiyCTYtqiWuBRoINMxoIKAiDJ4IbDBd/AQKHX?=
 =?us-ascii?q?IVAPzKBAgMBASETjQYBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ANAACX8/9bh0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBgVq?=
 =?us-ascii?q?CESeDeYgYX4spgiGIfI40gXMUGBMBh3QiNAkNAQMBAQEBAQECARMBAQEIDQkIK?=
 =?us-ascii?q?SMMgjYkAYJiAwMBAiAECwENAQE3AQUJAQEkAgUhAgIDDBI2GQWDHIFqAxUEAaU?=
 =?us-ascii?q?bcHwMJ4J2AQEFhQcNghQIgQuGYIMPgRwXgX+BEYVphS6CV4kthXuQTy4JiiuDW?=
 =?us-ascii?q?4MhI4FahRCKMiyCTYtqiWuBRoINMxoIKAiDJ4IbDBd/AQKHXIVAPzKBAgMBASE?=
 =?us-ascii?q?TjQYBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,294,1539673200"; 
   d="scan'208";a="54845139"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 06:14:36 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729122AbeK3BTu (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 29 Nov 2018 20:19:50 -0500
Received: from mail.kernel.org ([198.145.29.99]:40500 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1728198AbeK3BTt (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 29 Nov 2018 20:19:49 -0500
Received: from localhost (5356596B.cm-6-7b.dynamic.ziggo.nl [83.86.89.107])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id E141521019;
        Thu, 29 Nov 2018 14:14:18 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1543500859;
        bh=PYEF3MqGwKIR17j7TLBVlL+On0iM+Xw9U8ZTRIDItaM=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=NcnD0Q8Q7ISTFiJk1lFx5gme4T06ce0A9SXKSken+qugOGT6sq/cwa7uLOJYmFHc4
         8cT39OFSZ0ygTjSEAwFUnxUBgRRk5EWENnm5Re9TeXbF91NnTGKEmj5eAID954GCTz
         iNp8qDHjAjlHOiHvE0Smi49TrQtMX1sAOk/7/3/Q=
From: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
To: linux-kernel@vger.kernel.org
Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        stable@vger.kernel.org, Pavel Rojtberg <rojtberg@gmail.com>,
        Dmitry Torokhov <dmitry.torokhov@gmail.com>,
        Sasha Levin <sashal@kernel.org>
Subject: [PATCH 3.18 27/83] Input: xpad - use ida() for finding the pad_nr
Date: Thu, 29 Nov 2018 15:11:45 +0100
Message-Id: <20181129140139.525654428@linuxfoundation.org>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <20181129140138.002176596@linuxfoundation.org>
References: <20181129140138.002176596@linuxfoundation.org>
User-Agent: quilt/0.65
X-stable: review
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

3.18-stable review patch.  If anyone has any objections, please let me know.

------------------

[ Upstream commit e3b651745a03810efffd7ebf2a9b5be65fb70ec3 ]

The pad_nr corresponds to the lit up LED on the controller. Therefore there
should be no gaps when enumerating. Currently a LED is only re-assigned
after a controller is re-connected 4 times.

This patch uses ida to track connected pads - this way we can re-assign
freed up pad number immediately.

Consider the following case:
1. pad A is connected and gets pad_nr = 0
2. pad B is connected and gets pad_nr = 1
3. pad A is disconnected
4. pad A is connected again

using ida_simple_get() controller A now correctly gets pad_nr = 0 again.

Signed-off-by: Pavel Rojtberg <rojtberg@gmail.com>
Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Signed-off-by: Sasha Levin <sashal@kernel.org>
---
 drivers/input/joystick/xpad.c | 32 ++++++++++++++++++++------------
 1 file changed, 20 insertions(+), 12 deletions(-)

diff --git a/drivers/input/joystick/xpad.c b/drivers/input/joystick/xpad.c
index 60ebd78a49a6..a395980bb816 100644
--- a/drivers/input/joystick/xpad.c
+++ b/drivers/input/joystick/xpad.c
@@ -244,7 +244,6 @@ static const signed short xpad_btn_triggers[] = {
 	-1
 };
 
-
 static const signed short xpad360_btn[] = {  /* buttons for x360 controller */
 	BTN_TL, BTN_TR,		/* Button LB/RB */
 	BTN_MODE,		/* The big X button */
@@ -347,7 +346,7 @@ struct usb_xpad {
 
 	int mapping;			/* map d-pad to buttons or to axes */
 	int xtype;			/* type of xbox device */
-	unsigned long pad_nr;		/* the order x360 pads were attached */
+	int pad_nr;			/* the order x360 pads were attached */
 };
 
 /*
@@ -883,6 +882,9 @@ static int xpad_init_ff(struct usb_xpad *xpad) { return 0; }
 
 #if defined(CONFIG_JOYSTICK_XPAD_LEDS)
 #include <linux/leds.h>
+#include <linux/idr.h>
+
+static DEFINE_IDA(xpad_pad_seq);
 
 struct xpad_led {
 	char name[16];
@@ -964,7 +966,6 @@ static void xpad_led_set(struct led_classdev *led_cdev,
 
 static int xpad_led_probe(struct usb_xpad *xpad)
 {
-	static atomic_t led_seq = ATOMIC_INIT(-1);
 	struct xpad_led *led;
 	struct led_classdev *led_cdev;
 	int error;
@@ -976,9 +977,13 @@ static int xpad_led_probe(struct usb_xpad *xpad)
 	if (!led)
 		return -ENOMEM;
 
-	xpad->pad_nr = atomic_inc_return(&led_seq);
+	xpad->pad_nr = ida_simple_get(&xpad_pad_seq, 0, 0, GFP_KERNEL);
+	if (xpad->pad_nr < 0) {
+		error = xpad->pad_nr;
+		goto err_free_mem;
+	}
 
-	snprintf(led->name, sizeof(led->name), "xpad%lu", xpad->pad_nr);
+	snprintf(led->name, sizeof(led->name), "xpad%d", xpad->pad_nr);
 	led->xpad = xpad;
 
 	led_cdev = &led->led_cdev;
@@ -986,16 +991,19 @@ static int xpad_led_probe(struct usb_xpad *xpad)
 	led_cdev->brightness_set = xpad_led_set;
 
 	error = led_classdev_register(&xpad->udev->dev, led_cdev);
-	if (error) {
-		kfree(led);
-		xpad->led = NULL;
-		return error;
-	}
+	if (error)
+		goto err_free_id;
 
 	/* Light up the segment corresponding to controller number */
 	xpad_identify_controller(xpad);
-
 	return 0;
+
+err_free_id:
+	ida_simple_remove(&xpad_pad_seq, xpad->pad_nr);
+err_free_mem:
+	kfree(led);
+	xpad->led = NULL;
+	return error;
 }
 
 static void xpad_led_disconnect(struct usb_xpad *xpad)
@@ -1004,6 +1012,7 @@ static void xpad_led_disconnect(struct usb_xpad *xpad)
 
 	if (xpad_led) {
 		led_classdev_unregister(&xpad_led->led_cdev);
+		ida_simple_remove(&xpad_pad_seq, xpad->pad_nr);
 		kfree(xpad_led);
 	}
 }
@@ -1013,7 +1022,6 @@ static void xpad_led_disconnect(struct usb_xpad *xpad) { }
 static void xpad_identify_controller(struct usb_xpad *xpad) { }
 #endif
 
-
 static int xpad_open(struct input_dev *dev)
 {
 	struct usb_xpad *xpad = input_get_drvdata(dev);
-- 
2.17.1



