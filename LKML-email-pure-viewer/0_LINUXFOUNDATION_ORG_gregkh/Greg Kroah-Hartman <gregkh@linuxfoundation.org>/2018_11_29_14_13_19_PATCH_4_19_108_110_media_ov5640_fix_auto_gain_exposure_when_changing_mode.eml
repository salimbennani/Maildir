Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 08:44:51 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 36CD7580213;
	Thu, 29 Nov 2018 06:46:40 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 06:46:40 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AueWcsxIQ8se/RwLDZ9mcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgULvT8rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZXshfSTFPDI2/?=
 =?us-ascii?q?YYUIDeUBM+hXoIbhqFUBthu+HQuhCfjzyjJLiHL6wbc33v4jHAzAwQcuH8gOsH?=
 =?us-ascii?q?PRrNjtNakSS/66zKbVxjvGdfNW3i3y6IjRfh4ju/6MR65wcc/LxkkpCgjIiVqQ?=
 =?us-ascii?q?qZb7MDOa1eQNs3OW7+5hVeKplm4mpA9xoj+yxscql4bGnJ4VylHD9SV/2oo1Is?=
 =?us-ascii?q?e4SEFibNOiDZBetDmaOpNoTs8+R2xkojs2x7MYtZKhYSQHy4grywTeZvGFa4SF?=
 =?us-ascii?q?4RzuWPySLDp5nn5oe7ayiwyv/US8yODxUNS/3kxQoSpfiNbMs2gA1xzN5ciDTf?=
 =?us-ascii?q?tw5lmh2TmR2ADJ8O1EIl47lbDdK5E/xr48jJ0TsV7MHiPumUX2irGZdlk89+S2?=
 =?us-ascii?q?9+jqZq/qqoKSOoNqkA3yL6cjltClDek5MAUCR22b9v691L3n8035WrJKjvgun6?=
 =?us-ascii?q?ndsZDaI9kbp6GgDw9WzIkj8RC/ACmi0NgBmnkGIlRFdwydj4XyJVHOL+73De2l?=
 =?us-ascii?q?j1Svjjhr3fbGMaPlApnXKXjDirjhca5n60FA0Aoz0cxf55VMB7EFIfLzWVH+uM?=
 =?us-ascii?q?bXDx8kKAG0x+fnCNNg1oIRQ26PA6mZML/Mvl+M/O4gP+6MZIoNsjbnN/cl/+Lu?=
 =?us-ascii?q?jWM+mVIFfammx5oXaGyiEfRhOUmZYWfsjc0HEWcFpQc+SO3qiFufUT9cfXqyXq?=
 =?us-ascii?q?Q85i0lB4KiF4vMWoetgLmZ1iehApJWfnxGCkyLEXrwdYWEXOkDZDiRIs9mlDwE?=
 =?us-ascii?q?U7+hRpQl1RGvsg/61rVmIvDV+i0eqZLsytx16/fPmhE18Dx+F96d3H2VT2Fogm?=
 =?us-ascii?q?MIQCc707pkoUx9zVeD0rJ0g+ZCGtxR/P5JVgY6NZjBz+11EdzyWwTBfsuXR1ai?=
 =?us-ascii?q?WNmpHTYxTtcpyd8Uf0l9A8mijgzE3yeyAL8ajbqLCIYw8qLdxXfxIcl9xm3C1K?=
 =?us-ascii?q?kgiVkmX8ROOXenhq556wjcGYrJn1+FmKatcKQWxDTN+3ubzWqSoEFYVxZ9Xrjf?=
 =?us-ascii?q?UnABeETat9T56VnET7+1F7snNAxNycqBKqtPbt3kllFGRPblONTDbGO9gWawBR?=
 =?us-ascii?q?CUxrySaIrmYXkS3CLYCEIciQAc4W6GNRQiBiemu2/RESZhFUzxbE/28elxsnW7?=
 =?us-ascii?q?TlQqwAGMdEBh07u1+hgIhf2TUf8T37QEuDs/pDVwBlqyw9XWC9+YrQp7YKpcec?=
 =?us-ascii?q?894EtA1W/Bqwx9P5mgL6d+hl4ecwV7pV/u2w9wCoValcgqrXUqzAVpJKKc0VNB?=
 =?us-ascii?q?cS6Y3J/qNr3WLGny4A6ga6rM1l7C19aW/78F6O4kpFX7oAGpCk0i/m193NlRzX?=
 =?us-ascii?q?Sd6YvFDQoIXZ3qT0Y46gJ1p7fZYik6+YPZznlsMaiysj/f1NMlHuolyhC8f9hB?=
 =?us-ascii?q?NKOIDhP9E8ofB8K2Muwlh0Cpbg4YPOBV7KM1P96me+Ga16KxPedgnCipjWJI4I?=
 =?us-ascii?q?1m1kKM9ix8SvPH3pofwvGY2BeHWCn4jFu7rs/3noVEbykIHmWj0SjkGJJRZqpq?=
 =?us-ascii?q?cIYRCGehP9e4xs9jiJ7qQXJY8kCsB0kH2MOwZRWddVj90hBO2kQNpnynnzC1zz?=
 =?us-ascii?q?h1kzEvs6qe0zbCw+XkdBobJGFLQHNugkvrIYixl9oaRlSnbxA1lBu54kb336ha?=
 =?us-ascii?q?pKVlI2jTW0tIZDX2L2d5X6u0t7qCZdNP6ZwyvSVWVuS8fU6VSrrnrxQG1CPjGn?=
 =?us-ascii?q?NUxConeDGyppX5gxt6hXqfLHlptnrZesJwxRDF6NzHX/FR3TkGRCh+iTbJAFix?=
 =?us-ascii?q?JN2p/dSSl5feveGyTWOhVptPcSb1yYOMrje05WpvARenhfC8hsXnERQm0S/8z9?=
 =?us-ascii?q?RrVT/HrBHmbonp1qS6N/lqfk1pBF/69sp7FZtykoo2hJEMx3cago+Z8mYAkWf2?=
 =?us-ascii?q?Kd9bw77xbGIRRT4XxN7Y+Avl11diLn6Tx4L5S2+Sws1uZ9ShZmMW2yQ9791FCa?=
 =?us-ascii?q?uO7bxEmzd1rUS8rQ7Lffd9mTIdw+M06HEGm+EJpBYtziKFD7AXHElYPjbjmw6G?=
 =?us-ascii?q?7t+gt6VXeHigcaKr20Vgh9ChA6qPogVdWHb/Z5cjEjV87sR5MFLQznLz7pvod8?=
 =?us-ascii?q?XXbdIWrheUiQvPj/BJKJItkfoHnTZnOWX4vXE/yu80lxpu3YyhvIicKmVg56a5?=
 =?us-ascii?q?Ah9eNj3oaMIf4DDtjaBCnsmI24CjBIluGjIOXJHwV/KnDCoStej7NwaJCDAzsW?=
 =?us-ascii?q?2UGb3bHQ+C8ktmq2/PHouvN3GWInkZ0NpjSAOcJExZnAAbQjE6koQlGQCtwczr?=
 =?us-ascii?q?aF156SwJ5l7kthtMzfplNxvlXWfaugiocS04SISFIBpV8wFC5FrVMcqE4eJoBC?=
 =?us-ascii?q?xY+pyhrAqQKm2UfQhIDGcJWlCaCFDnJLWh+d7A8+2ADOqkM/TOeamOqfBZV/qQ?=
 =?us-ascii?q?xZOv1ZZm/y+RNsqVOHluFeY72k1FXXB2AMnZnzQPSyoKlyPCdcKbpRG8+jFpoc?=
 =?us-ascii?q?C76vjkRAXv5Y6XAbtILdpv4wy2gbuEN+OIhCZ2NzdY1pAPxX/J0rQf30QSiyZh?=
 =?us-ascii?q?dzazC7QAqDXNQbnUmq9WCR4bdixyONFJ76I6wglCJ8rbhsnp2b5/i/4/E01FWk?=
 =?us-ascii?q?D5msG1ecwKJHmwO0naBEmQLrSJOz3Kz9vzYaO9UrBQiORUtxutuTeUCUPjPzKD?=
 =?us-ascii?q?lyX3WBCrK+1DkCabPBlGsoGnbhltEXTjTM7hahCjLN93jDg2zacoiX/QKWEcMS?=
 =?us-ascii?q?Zzc0VWo72U7CNYhOh/GmNb4npkK+mEhziW7+3CJpkKtvtrBzx+l/hG73Qi17tV?=
 =?us-ascii?q?8CZESeR1mSTIqN5uplCmku+XxTtmUBpBsDBLhI2QsEVmOKXZ8IRAWHne8BIM62?=
 =?us-ascii?q?WQFwoFp99/BtLzvKBQz4uHqKWmLDZE7sKR/sYGAcXQANyIPWBnMhfzHjPQSgwf?=
 =?us-ascii?q?Qm2FL2ba0mNHnf7a1WeSp5h/ipH2hJ8HTPcPW0Y4GfAaIkBkGsESLpBqWD8tjb?=
 =?us-ascii?q?+ciogP/3Xo/0qZf9lTop2SDqHaOv7oMjvMyOAcPxY=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAAB6+v9bh0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBg2sng3mIGF+LKYINFIh8jjSBcxQYEwGHdCI0CQ0BAwEBAQEBAQI?=
 =?us-ascii?q?BEwEBAQgNCQgpIwyCNiQBgmIDAwECIAQLAQ0BASoKAwEFCQEBHwUCBSECAgMME?=
 =?us-ascii?q?jYZBYMcgWoDFQQBpFkRM3B8DCeCdgEBBYUHDYIUCIELhmCDD4EcF4F/hnqFLoJ?=
 =?us-ascii?q?Xh16BT5ZKLgmOBoMhI4FahRCKMo5jiWuBRoINMxoIKAiDJ4IbiQGFQD8yAYEBA?=
 =?us-ascii?q?wEBIRONBgEB?=
X-IPAS-Result: =?us-ascii?q?A0ANAAB6+v9bh0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBg2s?=
 =?us-ascii?q?ng3mIGF+LKYINFIh8jjSBcxQYEwGHdCI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpI?=
 =?us-ascii?q?wyCNiQBgmIDAwECIAQLAQ0BASoKAwEFCQEBHwUCBSECAgMMEjYZBYMcgWoDFQQ?=
 =?us-ascii?q?BpFkRM3B8DCeCdgEBBYUHDYIUCIELhmCDD4EcF4F/hnqFLoJXh16BT5ZKLgmOB?=
 =?us-ascii?q?oMhI4FahRCKMo5jiWuBRoINMxoIKAiDJ4IbiQGFQD8yAYEBAwEBIRONBgEB?=
X-IronPort-AV: E=Sophos;i="5.56,295,1539673200"; 
   d="scan'208";a="53152474"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 06:46:38 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2389498AbeK3BiE (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 29 Nov 2018 20:38:04 -0500
Received: from mail.kernel.org ([198.145.29.99]:41408 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S2388832AbeK3BiD (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 29 Nov 2018 20:38:03 -0500
Received: from localhost (5356596B.cm-6-7b.dynamic.ziggo.nl [83.86.89.107])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 199522147C;
        Thu, 29 Nov 2018 14:32:29 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1543501950;
        bh=+Da9gyaksuOfYNhSx+varx3Oi19Qk/0Lw0DfuulWW80=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=e3eIWTafZDMaQ5qKM5HVn6ig8W0FA8KDyKANDSSVmfrmN8ND64Sn0VfQ7n6fM1+M/
         iUhTmOSLdIwAyQjzb2TiOqOXNqpd4HqlAkCI8go3BntNu6Bz0KwxZy8k3saO4h4r4A
         D/m+Dk7rxW7RxVXbjQK9dHnuIa1D+oD9REfqFGc4=
From: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
To: linux-kernel@vger.kernel.org
Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        stable@vger.kernel.org, Hugues Fruchet <hugues.fruchet@st.com>,
        Jacopo Mondi <jacopo@jmondi.org>,
        Sakari Ailus <sakari.ailus@linux.intel.com>,
        Mauro Carvalho Chehab <mchehab+samsung@kernel.org>,
        Adam Ford <aford173@gmail.com>
Subject: [PATCH 4.19 108/110] media: ov5640: fix auto gain & exposure when changing mode
Date: Thu, 29 Nov 2018 15:13:19 +0100
Message-Id: <20181129135925.638274233@linuxfoundation.org>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <20181129135921.231283053@linuxfoundation.org>
References: <20181129135921.231283053@linuxfoundation.org>
User-Agent: quilt/0.65
X-stable: review
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

4.19-stable review patch.  If anyone has any objections, please let me know.

------------------

From: Hugues Fruchet <hugues.fruchet@st.com>

commit 3cca8ef5f774cbd61c8db05d9aa401de9bb59c66 upstream.

Ensure that auto gain and auto exposure are well restored
when changing mode.

Signed-off-by: Hugues Fruchet <hugues.fruchet@st.com>
Reviewed-by: Jacopo Mondi <jacopo@jmondi.org>
Tested-by: Jacopo Mondi <jacopo@jmondi.org>
Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
Signed-off-by: Adam Ford <aford173@gmail.com>
Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

---
 drivers/media/i2c/ov5640.c |   96 +++++++++++++++++++++++++--------------------
 1 file changed, 54 insertions(+), 42 deletions(-)

--- a/drivers/media/i2c/ov5640.c
+++ b/drivers/media/i2c/ov5640.c
@@ -1022,6 +1022,18 @@ static int ov5640_get_gain(struct ov5640
 	return gain & 0x3ff;
 }
 
+static int ov5640_set_gain(struct ov5640_dev *sensor, int gain)
+{
+	return ov5640_write_reg16(sensor, OV5640_REG_AEC_PK_REAL_GAIN,
+				  (u16)gain & 0x3ff);
+}
+
+static int ov5640_set_autogain(struct ov5640_dev *sensor, bool on)
+{
+	return ov5640_mod_reg(sensor, OV5640_REG_AEC_PK_MANUAL,
+			      BIT(1), on ? 0 : BIT(1));
+}
+
 static int ov5640_set_stream_dvp(struct ov5640_dev *sensor, bool on)
 {
 	int ret;
@@ -1588,7 +1600,7 @@ static int ov5640_set_mode_exposure_calc
 	}
 
 	/* set capture gain */
-	ret = __v4l2_ctrl_s_ctrl(sensor->ctrls.gain, cap_gain16);
+	ret = ov5640_set_gain(sensor, cap_gain16);
 	if (ret)
 		return ret;
 
@@ -1601,7 +1613,7 @@ static int ov5640_set_mode_exposure_calc
 	}
 
 	/* set exposure */
-	return __v4l2_ctrl_s_ctrl(sensor->ctrls.exposure, cap_shutter);
+	return ov5640_set_exposure(sensor, cap_shutter);
 }
 
 /*
@@ -1609,26 +1621,13 @@ static int ov5640_set_mode_exposure_calc
  * change mode directly
  */
 static int ov5640_set_mode_direct(struct ov5640_dev *sensor,
-				  const struct ov5640_mode_info *mode,
-				  bool auto_exp)
+				  const struct ov5640_mode_info *mode)
 {
-	int ret;
-
 	if (!mode->reg_data)
 		return -EINVAL;
 
 	/* Write capture setting */
-	ret = ov5640_load_regs(sensor, mode);
-	if (ret < 0)
-		return ret;
-
-	/* turn auto gain/exposure back on for direct mode */
-	ret = __v4l2_ctrl_s_ctrl(sensor->ctrls.auto_gain, 1);
-	if (ret)
-		return ret;
-
-	return __v4l2_ctrl_s_ctrl(sensor->ctrls.auto_exp, auto_exp ?
-				  V4L2_EXPOSURE_AUTO : V4L2_EXPOSURE_MANUAL);
+	return ov5640_load_regs(sensor, mode);
 }
 
 static int ov5640_set_mode(struct ov5640_dev *sensor)
@@ -1636,6 +1635,7 @@ static int ov5640_set_mode(struct ov5640
 	const struct ov5640_mode_info *mode = sensor->current_mode;
 	const struct ov5640_mode_info *orig_mode = sensor->last_mode;
 	enum ov5640_downsize_mode dn_mode, orig_dn_mode;
+	bool auto_gain = sensor->ctrls.auto_gain->val == 1;
 	bool auto_exp =  sensor->ctrls.auto_exp->val == V4L2_EXPOSURE_AUTO;
 	int ret;
 
@@ -1643,19 +1643,23 @@ static int ov5640_set_mode(struct ov5640
 	orig_dn_mode = orig_mode->dn_mode;
 
 	/* auto gain and exposure must be turned off when changing modes */
-	ret = __v4l2_ctrl_s_ctrl(sensor->ctrls.auto_gain, 0);
-	if (ret)
-		return ret;
+	if (auto_gain) {
+		ret = ov5640_set_autogain(sensor, false);
+		if (ret)
+			return ret;
+	}
 
-	ret = ov5640_set_autoexposure(sensor, false);
-	if (ret)
-		return ret;
+	if (auto_exp) {
+		ret = ov5640_set_autoexposure(sensor, false);
+		if (ret)
+			goto restore_auto_gain;
+	}
 
 	if ((dn_mode == SUBSAMPLING && orig_dn_mode == SCALING) ||
 	    (dn_mode == SCALING && orig_dn_mode == SUBSAMPLING)) {
 		/*
 		 * change between subsampling and scaling
-		 * go through exposure calucation
+		 * go through exposure calculation
 		 */
 		ret = ov5640_set_mode_exposure_calc(sensor, mode);
 	} else {
@@ -1663,11 +1667,16 @@ static int ov5640_set_mode(struct ov5640
 		 * change inside subsampling or scaling
 		 * download firmware directly
 		 */
-		ret = ov5640_set_mode_direct(sensor, mode, auto_exp);
+		ret = ov5640_set_mode_direct(sensor, mode);
 	}
-
 	if (ret < 0)
-		return ret;
+		goto restore_auto_exp_gain;
+
+	/* restore auto gain and exposure */
+	if (auto_gain)
+		ov5640_set_autogain(sensor, true);
+	if (auto_exp)
+		ov5640_set_autoexposure(sensor, true);
 
 	ret = ov5640_set_binning(sensor, dn_mode != SCALING);
 	if (ret < 0)
@@ -1689,6 +1698,15 @@ static int ov5640_set_mode(struct ov5640
 	sensor->last_mode = mode;
 
 	return 0;
+
+restore_auto_exp_gain:
+	if (auto_exp)
+		ov5640_set_autoexposure(sensor, true);
+restore_auto_gain:
+	if (auto_gain)
+		ov5640_set_autogain(sensor, true);
+
+	return ret;
 }
 
 static int ov5640_set_framefmt(struct ov5640_dev *sensor,
@@ -2201,20 +2219,20 @@ static int ov5640_set_ctrl_white_balance
 	return ret;
 }
 
-static int ov5640_set_ctrl_exposure(struct ov5640_dev *sensor, int exp)
+static int ov5640_set_ctrl_exposure(struct ov5640_dev *sensor,
+				    enum v4l2_exposure_auto_type auto_exposure)
 {
 	struct ov5640_ctrls *ctrls = &sensor->ctrls;
-	bool auto_exposure = (exp == V4L2_EXPOSURE_AUTO);
+	bool auto_exp = (auto_exposure == V4L2_EXPOSURE_AUTO);
 	int ret = 0;
 
 	if (ctrls->auto_exp->is_new) {
-		ret = ov5640_mod_reg(sensor, OV5640_REG_AEC_PK_MANUAL,
-				     BIT(0), auto_exposure ? 0 : BIT(0));
+		ret = ov5640_set_autoexposure(sensor, auto_exp);
 		if (ret)
 			return ret;
 	}
 
-	if (!auto_exposure && ctrls->exposure->is_new) {
+	if (!auto_exp && ctrls->exposure->is_new) {
 		u16 max_exp;
 
 		ret = ov5640_read_reg16(sensor, OV5640_REG_AEC_PK_VTS,
@@ -2234,25 +2252,19 @@ static int ov5640_set_ctrl_exposure(stru
 	return ret;
 }
 
-static int ov5640_set_ctrl_gain(struct ov5640_dev *sensor, int auto_gain)
+static int ov5640_set_ctrl_gain(struct ov5640_dev *sensor, bool auto_gain)
 {
 	struct ov5640_ctrls *ctrls = &sensor->ctrls;
 	int ret = 0;
 
 	if (ctrls->auto_gain->is_new) {
-		ret = ov5640_mod_reg(sensor, OV5640_REG_AEC_PK_MANUAL,
-				     BIT(1),
-				     ctrls->auto_gain->val ? 0 : BIT(1));
+		ret = ov5640_set_autogain(sensor, auto_gain);
 		if (ret)
 			return ret;
 	}
 
-	if (!auto_gain && ctrls->gain->is_new) {
-		u16 gain = (u16)ctrls->gain->val;
-
-		ret = ov5640_write_reg16(sensor, OV5640_REG_AEC_PK_REAL_GAIN,
-					 gain & 0x3ff);
-	}
+	if (!auto_gain && ctrls->gain->is_new)
+		ret = ov5640_set_gain(sensor, ctrls->gain->val);
 
 	return ret;
 }


