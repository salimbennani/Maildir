Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 21:22:51 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id D83E158079C;
	Thu, 13 Dec 2018 03:20:15 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga001-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 13 Dec 2018 03:20:15 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AjTsychaYbbGahy76DB8/PDf/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpcizYB7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyJPDIOi?=
 =?us-ascii?q?YYUSDOQBM+lXoJXgqFQMoxS+HhGsCeH0xz9UmnP7x7E23/g7HA3Y2gErAtIAsG?=
 =?us-ascii?q?7TrNXwLKofTea1w7TSzTrddfxdxC3z55LSchA7oPGHQLV9ftDXyUYyDQPKkE+f?=
 =?us-ascii?q?pZb9PzyPzOQNqWmb4vF6WuKqkWEnsRxxojy1ycc3jYnJgp8VykzF9SV+xoY1Ps?=
 =?us-ascii?q?e0R1J8Yd6hCZZdsTyROYhuQs46XW1kpCI3xqcbtZO1YiQG0okryh3DZ/CdcoWF?=
 =?us-ascii?q?4ArvWPuNLTp8nn5oe66ziwyv/US81uHwTMq53VZMoyFYiNfDrGoN2AbW6sWfSv?=
 =?us-ascii?q?ty4EOh2TGX2gDN5eFLP1o0mbDYK5E/2L4wkIQcsUDZEi/xgkX2g7eadkQi+ue2?=
 =?us-ascii?q?9+TqeqvqqoOYOoNulw3zPLoiltaiDek7LgQCRWmW9Oak2L3m50L5QbFKjvMskq?=
 =?us-ascii?q?netZDXPcAbpq+/Aw9I3Ycv8hW/ACm80NQeg3YHKEtJeBWJjojvJV7OOuv1Demw?=
 =?us-ascii?q?g1uyijdn3fPGMaP7ApXLMHfDlK3tfbFn605T0AYz18xQ54pICrEdJ/L+QkvxtN?=
 =?us-ascii?q?3bDhAnKQC1zPvnBc551oMfX2KPH6CYPLnTsV+O+uIgPe2MaJUJtzb6Lvgv/+Tu?=
 =?us-ascii?q?gmMhmV8BYamp2oMaaHCiEfRnP0WWe33sjs0BEWcXpAU+SuPqhUaGUT5SYXayQq?=
 =?us-ascii?q?096is6CIKgEYfMWIStjKad0ye8G51cfnpGBUyUEXf0a4WEXO8BaCCVIsB/iDAE?=
 =?us-ascii?q?Vr+hS4kn1RGprwL6z7tnLuzJ+iwXr57j1d515/HNmhE27zB7E8Od02SVRWFugm?=
 =?us-ascii?q?wIXyM23Lx4oUFl0FiDyqh4g/tbFdBJ/fNGSAU6OIXYz+x7DdDyRw3Acs2ISFag?=
 =?us-ascii?q?XtWpHzUxQsgtzN8JZkZ3A8+igQzb3yq2H78VkKSGBJ8u/aLaxXTxI8d9xGzA1K?=
 =?us-ascii?q?kulFQmRspPNWu7hq9w7QTTBojJk1mHmKaub6gTwCnN9GKbx2qUoE5YSBJwUbnC?=
 =?us-ascii?q?XX0He0TZt8r56V3YQ7+uE7snNBBBxtCEKqdNbt3pjlBGRPP4NdTaYmKxnXqwBB?=
 =?us-ascii?q?mSyrONaorqZ3sS3CHHBEcYlAAT+G6MNRIiCSe5v2LeEDtuGErybEz27+lxtmm3?=
 =?us-ascii?q?Tk8uwAGMdE1uyby19wURhfydTfMTw70FtD0gqzVyAFaywdbWB8CcqApmeaVWec?=
 =?us-ascii?q?k970tf1WLFqwx9OYStL7xjhl4bdAR3o0Pu1hVtBoVci8Qqq2kqzA5zKaKe31NM?=
 =?us-ascii?q?bDeY3ZH2Or3KJWj+5hGva6jK2l7A1Naa4LsA6PM9q1/7pgGmClIi82l709lSy3?=
 =?us-ascii?q?aT/JHKAxQdUJ3vUkc77QN1p6zHbSYn4YPU1npsMbevvz/G2tIpAvYlyxm6c9de?=
 =?us-ascii?q?NqOECBH9E8kAC8eyL+wqnkCjbggYM+BK6K40I8SmeuOG2a62JupvgCiqjGVH4I?=
 =?us-ascii?q?9n1EKM+DFxSurJ35YD3vGZ0RGLVzb6jFe9rM/3nZpIai0VHmq60SLkHpJeZrVu?=
 =?us-ascii?q?fYYXDmejO9e3xtRiiJH3QX5X6VmjC0kA2MC3YxqSbkXx0hFK2kQTvHOohzG4zz?=
 =?us-ascii?q?tykzwyqqqf3SrOw/ntdRYdO25LQnVigknoIYSuk98aW02oZRAzlBS5/Ub627Rb?=
 =?us-ascii?q?pKNnImjTQEdEZSj3I3t5UqutsLqPeMpP6JIusSVKX+Wwe1GaSrjhoxQE1yPvBX?=
 =?us-ascii?q?dRxDc+dzuyoJX2gwR6iH6BLHZ0tHfZe9t/xQ3c5NzfQv5dxCEGSzN7iTnUB1i8?=
 =?us-ascii?q?Ocem/dOPmpfHs+C+UX+hV5JJfSnqy4OAqDW05WlwDRKjmPCzn8XtERIm3i/jy9?=
 =?us-ascii?q?lqSSLIoQ78Y4bx0KS2K+BnfkhuBFLn78p6G4d+kpY/hZ0K2HgagImV8mQDkWvp?=
 =?us-ascii?q?Ldpb3qf+ZmIXRTEX297V/BTl2Ep7I3KK3Y35V2+Rwst8Z9agZGMW1Tkw78RLCK?=
 =?us-ascii?q?eS8bxFkjF5olu+rQLNf/d9mi0Rxucp6H4fm+sJohYizj2BArAOGklVJSnslxWL?=
 =?us-ascii?q?79+ktqlWanigcaOs1EVgh9CuF6+NohtTWHvifpciHClw7thwMV7W0X3z7J3kd8?=
 =?us-ascii?q?fUbd4JqhKUlBLAhfBPKJ0tjvoKmTZnOWXlsH05zO47iAZi3JCgs4iBNmVt57m5?=
 =?us-ascii?q?Ah9DOz3xZsMT/CztjKlEksaX2YCvAotuGjERUJT0SvKoFSoYte77OAaWDD08tn?=
 =?us-ascii?q?CbFKLEEgCF70dmq2/PH4qvN3GKP3QZydRiRB+AJE1QmgwUXTM6noInGQCu3sDu?=
 =?us-ascii?q?bEB55jUJ7F7ithRM0v5oNwX4UmrHpgencDI0R4aELBZM8gFO/UTVMdGd7uJuGS?=
 =?us-ascii?q?FX5IahoReJKmyaYQRIEG4IVlaFB1DlIrmh+93A//KECeq5KvvEea+OpvBGV/eU?=
 =?us-ascii?q?2ZKv1ZNr/jaLNsWSJ3liEuc02kxZUXBiHMTZnToPRjcTlyLMac6buRi99jd2rs?=
 =?us-ascii?q?C57PTkRgbv6ZGTBLtVNNVl4wq2jrubN+6MmCZ5Li5V1pMSyn/Jy7gf318Shztt?=
 =?us-ascii?q?dzm3FrQAujDCTLjNmq9MFBMbbyJzNM1V76MzxAVNOMjbis/r2b58lPI6F1BFVV?=
 =?us-ascii?q?n5kMGzecMKO329NE/ABEuTLruGOCbEw9vpbqK8U7FQiORUuga0uTaaFU/jIzuC?=
 =?us-ascii?q?myPoVxCpLeFDkiWbMAZCt4G6dxZnEXLjQ87+ah2nLN93iiU7waE1hnPPL2ITLS?=
 =?us-ascii?q?JwfF9NrrKO6yNVmfF/G21H7np4IuiIgSeZ7+/EKpkItftnGDh7l+Vf4H4i0bta?=
 =?us-ascii?q?8DlEROBpmCvVttNvo0upku+KyjpmVhpBsjdKhIKRskVkNqXU7Z1AWXfC/BIQ4m?=
 =?us-ascii?q?ScERUKp915CtLxv6Bc0MTAlKX2KGQKz9WBx8wZDs6cEM+BIXMsL1K9AibZChoM?=
 =?us-ascii?q?QCCDLnzEigpRnafB2GeSq80TrJT2lZNGcrZBTl19QvocBl5oFZoaKY1tXxstlL?=
 =?us-ascii?q?eBkcoB/n26sQXQQ8NB+JvAU6TBUr3UND+FgOwcNFMzyrTiINFWb9Wj1g=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BNAAAYQBJch0O0hNFjGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBZQKDaieMdI1AFI16EYQ4hwIBASsBh0QiOBIBAwEBAQEBAQI?=
 =?us-ascii?q?BEwEBAQgNCQgpIwxCAQ4BgWQkAYJhAQEBAQIBAQIkEwYBATcBBQkBAQoOCgklA?=
 =?us-ascii?q?wwFIAEFAQEhGIMcgXkIBAGbKTyKHYFsM4J2AQEFhy4IEhCKfoEcgVc/gRGDEog?=
 =?us-ascii?q?2giaLNJVdBwKCJASIJIcCIwqJYodeLIQrlEsGAgkHDyGBPIF3MxojUIJsghsMF?=
 =?us-ascii?q?xKDOIpUPzKBAgMBASETCwGBCosHAQE?=
X-IPAS-Result: =?us-ascii?q?A0BNAAAYQBJch0O0hNFjGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BZQKDaieMdI1AFI16EYQ4hwIBASsBh0QiOBIBAwEBAQEBAQIBEwEBAQgNCQgpI?=
 =?us-ascii?q?wxCAQ4BgWQkAYJhAQEBAQIBAQIkEwYBATcBBQkBAQoOCgklAwwFIAEFAQEhGIM?=
 =?us-ascii?q?cgXkIBAGbKTyKHYFsM4J2AQEFhy4IEhCKfoEcgVc/gRGDEog2giaLNJVdBwKCJ?=
 =?us-ascii?q?ASIJIcCIwqJYodeLIQrlEsGAgkHDyGBPIF3MxojUIJsghsMFxKDOIpUPzKBAgM?=
 =?us-ascii?q?BASETCwGBCosHAQE?=
X-IronPort-AV: E=Sophos;i="5.56,348,1539673200"; 
   d="scan'208";a="66651734"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 13 Dec 2018 03:20:14 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728761AbeLMLUI (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 13 Dec 2018 06:20:08 -0500
Received: from mail-ed1-f66.google.com ([209.85.208.66]:34001 "EHLO
        mail-ed1-f66.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1728727AbeLMLUG (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 13 Dec 2018 06:20:06 -0500
Received: by mail-ed1-f66.google.com with SMTP id b3so1730394ede.1
        for <linux-kernel@vger.kernel.org>; Thu, 13 Dec 2018 03:20:04 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=amarulasolutions.com; s=google;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=mMX6OBgczGKgREVlBAc+Cx3Zl3lpeS31D8IJu4mm39U=;
        b=PI7JXbyj/Mdr1lOjpjaGpCm3a0TZZs/pIjCjh7AGSxCES7fMmBgnuvppfgN0GD6tvN
         vLHeVcVE+IvjzvRicD9eWYhSVumPX4DYC7NZNuKfzhWxGqjmVxDrFAPgzxhzr60AoffL
         1yeB0DN4tBkshBSrLo3IIcY+WTIFCkPH9euYY=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:message-id:references
         :mime-version:content-disposition:in-reply-to:user-agent;
        bh=mMX6OBgczGKgREVlBAc+Cx3Zl3lpeS31D8IJu4mm39U=;
        b=VvZQpshORO3bvL67A/E7NZ7u9s8zzA5ROSKx0gscHdf6d008h11hX/w05ZGs/sMNMJ
         RzzndAGve/bmpy/AyFIPCv4wgZdqzKDf83W3C0zuecVdZToBIwenHfleekn/qsRrHO4A
         mheKbb9WbR77Xa2k9cN5PS14DzhgZfYLg+K/MwDtvbA6P529A788+P85DpnoGJeRF8fo
         +h/Vabsnzv4TXB/ti+0NaNGe37xF5UUxkHEXZqBNS9ekjMa5UluU/H2T13LGAB/18V5E
         8L5WEuJ5fkoLr3Rjdb1mcTnY48bfMTH1qHKwu10C5lZg0/CPgZkfSoQ2nh+2F3rNYzDx
         Al8g==
X-Gm-Message-State: AA+aEWYcyAU6G9vFa2UJl1vAAjJ1A0jkQot85TpkrCbcfJ65SLzVkTPe
        apteiAhlv7SY6u21q3SC1f8vNQ==
X-Google-Smtp-Source: AFSGD/UE24/lWaJwkZwQ2F61/NDvNW/y+TFIZsv7wCFk+s3RNAU6odl7MNEkuO7Xcl60XPaoTV9a1A==
X-Received: by 2002:a05:6402:170d:: with SMTP id y13mr22536746edu.45.1544700003912;
        Thu, 13 Dec 2018 03:20:03 -0800 (PST)
Received: from andrea (85.100.broadband17.iol.cz. [109.80.100.85])
        by smtp.gmail.com with ESMTPSA id v20sm541221edm.29.2018.12.13.03.20.02
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Thu, 13 Dec 2018 03:20:03 -0800 (PST)
Date: Thu, 13 Dec 2018 12:19:57 +0100
From: Andrea Parri <andrea.parri@amarulasolutions.com>
To: Roman Penyaev <rpenyaev@suse.de>
Cc: Davidlohr Bueso <dbueso@suse.de>, Jason Baron <jbaron@akamai.com>,
        Al Viro <viro@zeniv.linux.org.uk>,
        "Paul E. McKenney" <paulmck@linux.vnet.ibm.com>,
        Linus Torvalds <torvalds@linux-foundation.org>,
        Andrew Morton <akpm@linux-foundation.org>,
        linux-fsdevel@vger.kernel.org, linux-kernel@vger.kernel.org
Subject: Re: [PATCH 3/3] epoll: use rwlock in order to reduce
 ep_poll_callback() contention
Message-ID: <20181213111957.GA8459@andrea>
References: <20181212110357.25656-1-rpenyaev@suse.de>
 <20181212110357.25656-4-rpenyaev@suse.de>
 <20181212171348.GA12786@andrea>
 <a30306ad68b4b7171fbb587f5f845ea5@suse.de>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <a30306ad68b4b7171fbb587f5f845ea5@suse.de>
User-Agent: Mutt/1.9.4 (2018-02-28)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Thu, Dec 13, 2018 at 11:13:58AM +0100, Roman Penyaev wrote:
> On 2018-12-12 18:13, Andrea Parri wrote:
> > On Wed, Dec 12, 2018 at 12:03:57PM +0100, Roman Penyaev wrote:
> 
> [...]
> 
> > > +static inline void list_add_tail_lockless(struct list_head *new,
> > > +					  struct list_head *head)
> > > +{
> > > +	struct list_head *prev;
> > > +
> > > +	new->next = head;
> > > +
> > > +	/*
> > > +	 * Initially ->next of a new element must be updated with the head
> > > +	 * (we are inserting to the tail) and only then pointers are
> > > atomically
> > > +	 * exchanged.  XCHG guarantees memory ordering, thus ->next should
> > > be
> > > +	 * updated before pointers are actually swapped.
> > > +	 */
> > > +
> > > +	prev = xchg(&head->prev, new);
> > > +
> > > +	/*
> > > +	 * It is safe to modify prev->next and new->prev, because a new
> > > element
> > > +	 * is added only to the tail and new->next is updated before XCHG.
> > > +	 */
> > 
> > IIUC, you're also relying on "some" ordering between the atomic load
> > of &head->prev above and the store to prev->next below: consider the
> > following snippet for two concurrent list_add_tail_lockless()'s:
> > 
> > {Initially: List := H -> A -> B}
> > 
> > CPU0					CPU1
> > 
> > list_add_tail_lockless(C, H):		list_add_tail_lockless(D, H):
> > 
> > C->next = H				D->next = H
> > prev = xchg(&H->prev, C) // =B		prev = xchg(&H->prev, D) // =C
> > B->next = C				C->next = D
> > C->prev = B				D->prev = C
> > 
> > Here, as annotated, CPU0's xchg() "wins" over CPU1's xchg() (i.e., the
> > latter reads the value of &H->prev that the former stored to that same
> > location).
> > 
> > As you noted above, the xchg() guarantees that CPU0's store to C->next
> > is "ordered before" CPU0's store to &H->prev.
> > 
> > But we also want CPU1's load from &H->prev to be ordered before CPU1's
> > store to C->next, which is also guaranteed by the xchg() (or, FWIW, by
> > the address dependency between these two memory accesses).
> > 
> > I do not see what could guarantee "C->next == D" in the end, otherwise.
> > 
> > What am I missing?
> 
> Hi Andrea,
> 
> xchg always acts as a full memory barrier, i.e. mfence in x86 terms.  So the
> following statement should be always true, otherwise nothing should work as
> the same code pattern is used in many generic places:
> 
>    CPU0               CPU1
> 
>  C->next = H
>  xchg(&ptr, C)
>                      C = xchg(&ptr, D)
>                      C->next = D
> 
> 
> This is the only guarantee we need, i.e. make it simplier:
> 
>    C->next = H
>    mfence            mfence
>                      C->next = D
> 
> the gurantee that two stores won't reorder.  Pattern is always the same: we
> prepare chunk of memory on CPU0 and do pointers xchg, CPU1 sees chunks of
> memory with all stores committed by CPU0 (regardless of CPU1 does loads
> or stores to this chunk).
> 
> I am repeating the same thing which you also noted, but I just want to be
> sure that I do not say nonsense.  So basically repeating to myself.
> 
> Ok, let's commit that.  Returning to your question: "I do not see what
> could guarantee "C->next == D" in the end"
> 
> At the end of what?  Lockless insert procedure (insert to tail) relies only
> on "head->prev".  This is the single "place" where we atomically exchange
> list elements and "somehow" chain them.  So insert needs only actual
> "head->prev", and xchg provides this guarantees to us.

When all the operations reported in the snippet have completed (i.e.,
executed and propagated to memory).

To rephrase my remark:

I am saying that we do need some ordering between the xchg() and the
program-order _subsequent stores, and implicitly suggesting to write
this down in the comment.  As I wrote, this ordering _is provided by
the xchg() itself or by the dependency; so, maybe, something like:

	/*
	 * [...]  XCHG guarantees memory ordering, thus new->next is
	 * updated before pointers are actually swapped and pointers
	 * are swapped before prev->next is updated.
	 */

Adding a snippet, say in the form you reported above, would not hurt
of course. ;-)

  Andrea


> 
> But there is also a user of the list, who needs to iterate over the list
> or to delete elements, etc, i.e. this user of the list needs list fully
> committed to the memory.  This user takes write_lock().  So answering your
> question (if I understood it correctly): at the end write_lock() guarantees
> that list won't be seen as corrupted and updates to the last element, i.e.
> "->next" or "->prev" pointers of the last element are committed and seen
> correctly.
> 
> --
> Roman
> 
> 
> 
> 
> 
