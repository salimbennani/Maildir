Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:39:32 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from FMSMGA003.fm.intel.com (fmsmga003.fm.intel.com [10.253.24.29])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id CAA975805F0
	for <like.xu@linux.intel.com>; Thu, 20 Dec 2018 09:37:33 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by FMSMGA003-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 20 Dec 2018 09:37:32 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AsOPSFRf06edmYU7cKKzU2RwklGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc26ZxWN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRBDI2i?=
 =?us-ascii?q?YYUBDO0PMuRWr4byqFUBsQawBRGuCe3txTJEm3H70bEk3OQ6CgzGwA8tEsgSvH?=
 =?us-ascii?q?nOsNn5KKEfWv21wqnSyjXDautb1y3n54jVdhAqvP+CXa9qccrL00YvER/FhUiX?=
 =?us-ascii?q?pIz9JTyVy+ANv3KG4Op9T+KvkXQoqwdtojW02sgsi5XJhpgUylHL7yl23IE1Jd?=
 =?us-ascii?q?ihRUN9fNWqE4NQujmEO4dqQc4uWXxktDs5x7Ecp5K2cigHxI46yxPdc/CLbomF?=
 =?us-ascii?q?7gz5WOqPPzt0mWhpdK+/ihuz60Styu3xW8+p21hQtCVFiMPDtnUV2hzT9MeHTv?=
 =?us-ascii?q?x981+l2TaOzADT9vpELVo7lardNp4t2LkwloAcsUjbHy/2nlv5jLOOe0k65uSl?=
 =?us-ascii?q?6P7rbqj7qpKfLYN4lA/zP6Q0lsCiA+k0Kg0OUHKa+eS42r3j50r5QLBSg/0vjK?=
 =?us-ascii?q?bZtY3aKd0GqaGnHQ9azIIj5w+kADehzdQYm2UII0xeeB6Ai4jpOlLOL+7iAfaw?=
 =?us-ascii?q?nlShiDNrx/HAPr38DZTBNHnDkLH9fblj705Q0hY8zdda559PDLEBJ/TzWkD3tN?=
 =?us-ascii?q?zFFBM5NBa0w+n/BNVnyoweQX6PArOeMK7KtV+I5+EvLPeWaI4apTbwMPwl5//o?=
 =?us-ascii?q?jX8kll4RZ6ip3Z0LaH+mGvRqOVmWYX3pgoRJLGERowBrTPD2kEbQFnlXZm2uRO?=
 =?us-ascii?q?Q64Tc0Dp/gCp3MAYWkgbiE1SH8GYVKZ2dAEReVHHL1MomJRfoIOx+UOdJrxzkN?=
 =?us-ascii?q?VLy9TN042BSz8QP31bdja/DZ4zAVro7L0t9z6OvO0xYo+mtvEs6f3mqRGnxyhX?=
 =?us-ascii?q?4CXDQs3apy8nB6nwOa3K1lxvBVC9FXz/VOVAg8KNjb1eMsT5imQw/EY5KDTFGt?=
 =?us-ascii?q?Qf2gBjc+SM93xMUBNQI1T8WviFXP0jSnB5cRlqeXH9ok/6TExX/zKs1hjXHc2/?=
 =?us-ascii?q?9yoUMhR553PHCizoJi7RLaAZKBx12QiqLsebkGxifL6E+IzHaUvVEeWwl1B/aW?=
 =?us-ascii?q?FUsDb1fb+IyqrnjJSKWjXPF+alNM?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AUAAAZ0htchxHrdtBlHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgTCCYowWX4scmWqBdhIYFIcuIjQJDQEDAQEBAQEBAgETAQEBCgs?=
 =?us-ascii?q?JCBsOL4I2BQIDGgEGglwDAwECJAsBEwopAwMBAgYBAUUDCAMBUwYBEgWDHYICA?=
 =?us-ascii?q?QSoTzOFQIRmh36EQYFXP4ERh22GBQKJS4F3ilyLHwcCgiUEjzAMGJFdiU2QQIF?=
 =?us-ascii?q?Ggg4zGiNQgmyCJxcSjgtBMYEHixRVgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AUAAAZ0htchxHrdtBlHAEBAQQBAQcEAQGBUQcBAQsBgTC?=
 =?us-ascii?q?CYowWX4scmWqBdhIYFIcuIjQJDQEDAQEBAQEBAgETAQEBCgsJCBsOL4I2BQIDG?=
 =?us-ascii?q?gEGglwDAwECJAsBEwopAwMBAgYBAUUDCAMBUwYBEgWDHYICAQSoTzOFQIRmh36?=
 =?us-ascii?q?EQYFXP4ERh22GBQKJS4F3ilyLHwcCgiUEjzAMGJFdiU2QQIFGgg4zGiNQgmyCJ?=
 =?us-ascii?q?xcSjgtBMYEHixRVgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,378,1539673200"; 
   d="scan'208";a="142964437"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 20 Dec 2018 09:37:32 -0800
Received: from localhost ([::1]:39062 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1ga2GK-00032y-10
	for like.xu@linux.intel.com; Thu, 20 Dec 2018 12:37:32 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:39504)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <prvs=88558fdb8=Paul.Durrant@citrix.com>)
	id 1ga287-0005Xt-16
	for qemu-devel@nongnu.org; Thu, 20 Dec 2018 12:29:08 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <prvs=88558fdb8=Paul.Durrant@citrix.com>)
	id 1ga285-00009b-IH
	for qemu-devel@nongnu.org; Thu, 20 Dec 2018 12:29:02 -0500
Received: from smtp03.citrix.com ([162.221.156.55]:22925)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <prvs=88558fdb8=Paul.Durrant@citrix.com>)
	id 1ga285-00007x-2O; Thu, 20 Dec 2018 12:29:01 -0500
X-IronPort-AV: E=Sophos;i="5.56,378,1539648000"; d="scan'208";a="73926829"
From: Paul Durrant <paul.durrant@citrix.com>
To: <qemu-devel@nongnu.org>, <qemu-block@nongnu.org>,
	<xen-devel@lists.xenproject.org>
Date: Thu, 20 Dec 2018 17:14:34 +0000
Message-ID: <20181220171439.11159-14-paul.durrant@citrix.com>
X-Mailer: git-send-email 2.20.1.2.gb21ebb6
In-Reply-To: <20181220171439.11159-1-paul.durrant@citrix.com>
References: <20181220171439.11159-1-paul.durrant@citrix.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Content-Type: text/plain
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 162.221.156.55
Subject: [Qemu-devel] [PATCH v7 13/18] xen: purge 'blk' and 'ioreq' from
 function names in dataplane/xen-block.c
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Kevin Wolf <kwolf@redhat.com>, Stefano Stabellini <sstabellini@kernel.org>,
	Max Reitz <mreitz@redhat.com>, Paul Durrant <paul.durrant@citrix.com>,
	Stefan Hajnoczi <stefanha@redhat.com>,
	Anthony Perard <anthony.perard@citrix.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

This is a purely cosmetic patch that purges remaining use of 'blk' and
'ioreq' in local function names, and then makes sure all functions are
prefixed with 'xen_block_'.

No functional change.

Signed-off-by: Paul Durrant <paul.durrant@citrix.com>
Acked-by: Anthony Perard <anthony.perard@citrix.com>
---
Cc: Stefano Stabellini <sstabellini@kernel.org>
Cc: Stefan Hajnoczi <stefanha@redhat.com>
Cc: Kevin Wolf <kwolf@redhat.com>
Cc: Max Reitz <mreitz@redhat.com>

v2:
 - Add 'xen_block_' prefix
---
 hw/block/dataplane/xen-block.c | 90 +++++++++++++++++-----------------
 1 file changed, 46 insertions(+), 44 deletions(-)

diff --git a/hw/block/dataplane/xen-block.c b/hw/block/dataplane/xen-block.c
index 6788bbf338..8e3965e171 100644
--- a/hw/block/dataplane/xen-block.c
+++ b/hw/block/dataplane/xen-block.c
@@ -67,7 +67,7 @@ struct XenBlockDataPlane {
     AioContext *ctx;
 };
 
-static void ioreq_reset(XenBlockRequest *request)
+static void reset_request(XenBlockRequest *request)
 {
     memset(&request->req, 0, sizeof(request->req));
     request->status = 0;
@@ -86,7 +86,7 @@ static void ioreq_reset(XenBlockRequest *request)
     qemu_iovec_reset(&request->v);
 }
 
-static XenBlockRequest *ioreq_start(XenBlockDataPlane *dataplane)
+static XenBlockRequest *xen_block_start_request(XenBlockDataPlane *dataplane)
 {
     XenBlockRequest *request = NULL;
 
@@ -111,7 +111,7 @@ out:
     return request;
 }
 
-static void ioreq_finish(XenBlockRequest *request)
+static void xen_block_finish_request(XenBlockRequest *request)
 {
     XenBlockDataPlane *dataplane = request->dataplane;
 
@@ -121,12 +121,12 @@ static void ioreq_finish(XenBlockRequest *request)
     dataplane->requests_finished++;
 }
 
-static void ioreq_release(XenBlockRequest *request, bool finish)
+static void xen_block_release_request(XenBlockRequest *request, bool finish)
 {
     XenBlockDataPlane *dataplane = request->dataplane;
 
     QLIST_REMOVE(request, list);
-    ioreq_reset(request);
+    reset_request(request);
     request->dataplane = dataplane;
     QLIST_INSERT_HEAD(&dataplane->freelist, request, list);
     if (finish) {
@@ -140,7 +140,7 @@ static void ioreq_release(XenBlockRequest *request, bool finish)
  * translate request into iovec + start offset
  * do sanity checks along the way
  */
-static int ioreq_parse(XenBlockRequest *request)
+static int xen_block_parse_request(XenBlockRequest *request)
 {
     XenBlockDataPlane *dataplane = request->dataplane;
     size_t len;
@@ -201,7 +201,7 @@ err:
     return -1;
 }
 
-static int ioreq_grant_copy(XenBlockRequest *request)
+static int xen_block_copy_request(XenBlockRequest *request)
 {
     XenBlockDataPlane *dataplane = request->dataplane;
     XenDevice *xendev = dataplane->xendev;
@@ -247,9 +247,9 @@ static int ioreq_grant_copy(XenBlockRequest *request)
     return 0;
 }
 
-static int ioreq_runio_qemu_aio(XenBlockRequest *request);
+static int xen_block_do_aio(XenBlockRequest *request);
 
-static void qemu_aio_complete(void *opaque, int ret)
+static void xen_block_complete_aio(void *opaque, int ret)
 {
     XenBlockRequest *request = opaque;
     XenBlockDataPlane *dataplane = request->dataplane;
@@ -266,7 +266,7 @@ static void qemu_aio_complete(void *opaque, int ret)
     request->aio_inflight--;
     if (request->presync) {
         request->presync = 0;
-        ioreq_runio_qemu_aio(request);
+        xen_block_do_aio(request);
         goto done;
     }
     if (request->aio_inflight > 0) {
@@ -277,7 +277,7 @@ static void qemu_aio_complete(void *opaque, int ret)
     case BLKIF_OP_READ:
         /* in case of failure request->aio_errors is increased */
         if (ret == 0) {
-            ioreq_grant_copy(request);
+            xen_block_copy_request(request);
         }
         qemu_vfree(request->buf);
         break;
@@ -293,7 +293,7 @@ static void qemu_aio_complete(void *opaque, int ret)
     }
 
     request->status = request->aio_errors ? BLKIF_RSP_ERROR : BLKIF_RSP_OKAY;
-    ioreq_finish(request);
+    xen_block_finish_request(request);
 
     switch (request->req.operation) {
     case BLKIF_OP_WRITE:
@@ -318,9 +318,9 @@ done:
     aio_context_release(dataplane->ctx);
 }
 
-static bool blk_split_discard(XenBlockRequest *request,
-                              blkif_sector_t sector_number,
-                              uint64_t nr_sectors)
+static bool xen_block_split_discard(XenBlockRequest *request,
+                                    blkif_sector_t sector_number,
+                                    uint64_t nr_sectors)
 {
     XenBlockDataPlane *dataplane = request->dataplane;
     int64_t byte_offset;
@@ -343,7 +343,7 @@ static bool blk_split_discard(XenBlockRequest *request,
         byte_chunk = byte_remaining > limit ? limit : byte_remaining;
         request->aio_inflight++;
         blk_aio_pdiscard(dataplane->blk, byte_offset, byte_chunk,
-                         qemu_aio_complete, request);
+                         xen_block_complete_aio, request);
         byte_remaining -= byte_chunk;
         byte_offset += byte_chunk;
     } while (byte_remaining > 0);
@@ -351,7 +351,7 @@ static bool blk_split_discard(XenBlockRequest *request,
     return true;
 }
 
-static int ioreq_runio_qemu_aio(XenBlockRequest *request)
+static int xen_block_do_aio(XenBlockRequest *request)
 {
     XenBlockDataPlane *dataplane = request->dataplane;
 
@@ -359,14 +359,15 @@ static int ioreq_runio_qemu_aio(XenBlockRequest *request)
     if (request->req.nr_segments &&
         (request->req.operation == BLKIF_OP_WRITE ||
          request->req.operation == BLKIF_OP_FLUSH_DISKCACHE) &&
-        ioreq_grant_copy(request)) {
+        xen_block_copy_request(request)) {
         qemu_vfree(request->buf);
         goto err;
     }
 
     request->aio_inflight++;
     if (request->presync) {
-        blk_aio_flush(request->dataplane->blk, qemu_aio_complete, request);
+        blk_aio_flush(request->dataplane->blk, xen_block_complete_aio,
+                      request);
         return 0;
     }
 
@@ -377,7 +378,7 @@ static int ioreq_runio_qemu_aio(XenBlockRequest *request)
                          request->v.size, BLOCK_ACCT_READ);
         request->aio_inflight++;
         blk_aio_preadv(dataplane->blk, request->start, &request->v, 0,
-                       qemu_aio_complete, request);
+                       xen_block_complete_aio, request);
         break;
     case BLKIF_OP_WRITE:
     case BLKIF_OP_FLUSH_DISKCACHE:
@@ -392,12 +393,13 @@ static int ioreq_runio_qemu_aio(XenBlockRequest *request)
                          BLOCK_ACCT_WRITE : BLOCK_ACCT_FLUSH);
         request->aio_inflight++;
         blk_aio_pwritev(dataplane->blk, request->start, &request->v, 0,
-                        qemu_aio_complete, request);
+                        xen_block_complete_aio, request);
         break;
     case BLKIF_OP_DISCARD:
     {
         struct blkif_request_discard *req = (void *)&request->req;
-        if (!blk_split_discard(request, req->sector_number, req->nr_sectors)) {
+        if (!xen_block_split_discard(request, req->sector_number,
+                                     req->nr_sectors)) {
             goto err;
         }
         break;
@@ -407,17 +409,17 @@ static int ioreq_runio_qemu_aio(XenBlockRequest *request)
         goto err;
     }
 
-    qemu_aio_complete(request, 0);
+    xen_block_complete_aio(request, 0);
 
     return 0;
 
 err:
-    ioreq_finish(request);
+    xen_block_finish_request(request);
     request->status = BLKIF_RSP_ERROR;
     return -1;
 }
 
-static int blk_send_response_one(XenBlockRequest *request)
+static int xen_block_send_response_one(XenBlockRequest *request)
 {
     XenBlockDataPlane *dataplane = request->dataplane;
     int send_notify = 0;
@@ -473,15 +475,15 @@ static int blk_send_response_one(XenBlockRequest *request)
 }
 
 /* walk finished list, send outstanding responses, free requests */
-static void blk_send_response_all(XenBlockDataPlane *dataplane)
+static void xen_block_send_response_all(XenBlockDataPlane *dataplane)
 {
     XenBlockRequest *request;
     int send_notify = 0;
 
     while (!QLIST_EMPTY(&dataplane->finished)) {
         request = QLIST_FIRST(&dataplane->finished);
-        send_notify += blk_send_response_one(request);
-        ioreq_release(request, true);
+        send_notify += xen_block_send_response_one(request);
+        xen_block_release_request(request, true);
     }
     if (send_notify) {
         Error *local_err = NULL;
@@ -495,8 +497,8 @@ static void blk_send_response_all(XenBlockDataPlane *dataplane)
     }
 }
 
-static int blk_get_request(XenBlockDataPlane *dataplane,
-                           XenBlockRequest *request, RING_IDX rc)
+static int xen_block_get_request(XenBlockDataPlane *dataplane,
+                                 XenBlockRequest *request, RING_IDX rc)
 {
     switch (dataplane->protocol) {
     case BLKIF_PROTOCOL_NATIVE: {
@@ -526,7 +528,7 @@ static int blk_get_request(XenBlockDataPlane *dataplane,
     return 0;
 }
 
-static void blk_handle_requests(XenBlockDataPlane *dataplane)
+static void xen_block_handle_requests(XenBlockDataPlane *dataplane)
 {
     RING_IDX rc, rp;
     XenBlockRequest *request;
@@ -537,23 +539,22 @@ static void blk_handle_requests(XenBlockDataPlane *dataplane)
     rp = dataplane->rings.common.sring->req_prod;
     xen_rmb(); /* Ensure we see queued requests up to 'rp'. */
 
-    blk_send_response_all(dataplane);
+    xen_block_send_response_all(dataplane);
     while (rc != rp) {
         /* pull request from ring */
         if (RING_REQUEST_CONS_OVERFLOW(&dataplane->rings.common, rc)) {
             break;
         }
-        request = ioreq_start(dataplane);
+        request = xen_block_start_request(dataplane);
         if (request == NULL) {
             dataplane->more_work++;
             break;
         }
-        blk_get_request(dataplane, request, rc);
+        xen_block_get_request(dataplane, request, rc);
         dataplane->rings.common.req_cons = ++rc;
 
         /* parse them */
-        if (ioreq_parse(request) != 0) {
-
+        if (xen_block_parse_request(request) != 0) {
             switch (request->req.operation) {
             case BLKIF_OP_READ:
                 block_acct_invalid(blk_get_stats(dataplane->blk),
@@ -570,7 +571,7 @@ static void blk_handle_requests(XenBlockDataPlane *dataplane)
                 break;
             };
 
-            if (blk_send_response_one(request)) {
+            if (xen_block_send_response_one(request)) {
                 Error *local_err = NULL;
 
                 xen_device_notify_event_channel(dataplane->xendev,
@@ -580,11 +581,11 @@ static void blk_handle_requests(XenBlockDataPlane *dataplane)
                     error_report_err(local_err);
                 }
             }
-            ioreq_release(request, false);
+            xen_block_release_request(request, false);
             continue;
         }
 
-        ioreq_runio_qemu_aio(request);
+        xen_block_do_aio(request);
     }
 
     if (dataplane->more_work &&
@@ -593,16 +594,16 @@ static void blk_handle_requests(XenBlockDataPlane *dataplane)
     }
 }
 
-static void blk_bh(void *opaque)
+static void xen_block_dataplane_bh(void *opaque)
 {
     XenBlockDataPlane *dataplane = opaque;
 
     aio_context_acquire(dataplane->ctx);
-    blk_handle_requests(dataplane);
+    xen_block_handle_requests(dataplane);
     aio_context_release(dataplane->ctx);
 }
 
-static void blk_event(void *opaque)
+static void xen_block_dataplane_event(void *opaque)
 {
     XenBlockDataPlane *dataplane = opaque;
 
@@ -631,7 +632,8 @@ XenBlockDataPlane *xen_block_dataplane_create(XenDevice *xendev,
     } else {
         dataplane->ctx = qemu_get_aio_context();
     }
-    dataplane->bh = aio_bh_new(dataplane->ctx, blk_bh, dataplane);
+    dataplane->bh = aio_bh_new(dataplane->ctx, xen_block_dataplane_bh,
+                               dataplane);
 
     return dataplane;
 }
@@ -789,7 +791,7 @@ void xen_block_dataplane_start(XenBlockDataPlane *dataplane,
 
     dataplane->event_channel =
         xen_device_bind_event_channel(xendev, event_channel,
-                                      blk_event, dataplane,
+                                      xen_block_dataplane_event, dataplane,
                                       &local_err);
     if (local_err) {
         error_propagate(errp, local_err);
-- 
2.20.1.2.gb21ebb6


