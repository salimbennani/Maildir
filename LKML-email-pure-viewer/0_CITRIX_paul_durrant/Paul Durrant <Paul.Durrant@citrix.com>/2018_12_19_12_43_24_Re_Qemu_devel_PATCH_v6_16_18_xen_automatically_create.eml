Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 21:34:40 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 499205805F0
	for <like.xu@linux.intel.com>; Wed, 19 Dec 2018 04:46:08 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 19 Dec 2018 04:46:07 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AGZoV/B2O0vj8VN6IsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?seMeLfad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWpPUNhNVyJPAY28?=
 =?us-ascii?q?YYkAAPYOM+lXsof9v1kDoxmxCAWxCu7j1iFHhmTt0K0myuQhEx3K0BA8E94Qtn?=
 =?us-ascii?q?nfsdX7NL0VUeCw1KTG1y/Mb+5S2Tzg5obIbwohoeuWUrJ2bcra1E4iGRnfgVWN?=
 =?us-ascii?q?rYzpJT2b1vkXs2iB9eVgU/6vhnU7pAFwvjiv3MYsi4bTio0JzVDE8Dx0zYAoLt?=
 =?us-ascii?q?O7UE52ecCoHIdTui2AKod6X8AvT3t2tCs0yrAKo4O3cSoSxJg6xBPSa+aLf5aI?=
 =?us-ascii?q?7x75VeucIS10iGxqdb+5mh2861KvyvfmWcmxyFtKrjRKkt3Ltn0V0xzT69OHSu?=
 =?us-ascii?q?dm/ku71jaP0R3T5vtDIUAumqrXM58hwrgumZoPqUnPADP6lUbsgKOLa0kp+fKk?=
 =?us-ascii?q?5/rpb7jmvJOQKo15hhn7Mqs0m8y/Beo4MhIJX2ie4em8zaPs/UjkQLlTk/I5jL?=
 =?us-ascii?q?fZv47eJcgCvaG5BBJV0oA/5BmhFDeq19AYnXgELF1bYh6GgJXpNknKIPD5C/e/?=
 =?us-ascii?q?nlutnC1qx/DAIr3uHJHNImLfn7fmeLZw8EhcyA01zdBQ4ZJUF6sNIPXpWk/+rN?=
 =?us-ascii?q?DYFAM2MxSow+b7D9VwzoceWWOMAqCHKq/TvkKI6/krI+mNYo8VpTn8J+Ik5/7o?=
 =?us-ascii?q?kX82h1sdcbO10psQbXDrVslgOFiTNHrwns8aQyBNugslUPesjlqEXjhOIXGoUO?=
 =?us-ascii?q?U57zA/DYugSoDbWoGqhqfGxSq+A9haa35LDgOxF2z1fdCBUvYIdCXAO8Jkj3kI?=
 =?us-ascii?q?WKasT8o72AizuRTm47xgKOXS52sfr520z8V/5eDYiUQv8ydpBd+WyWCHQjJImT?=
 =?us-ascii?q?YhQSM226Zu6XRw0F6Z3eAsivpEFdtV9rVRXx0zL5L0xO1mEdHiHAnGe4HaZkyh?=
 =?us-ascii?q?R4CeCCw1Bv4s2cUHZVo1T+2rkxSF8zewGbYTi5SABYAu87Ka1H/0cZUug03a3b?=
 =?us-ascii?q?Us2gF1CvBEMner0+smr1De?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AvAAAxPBpchxHrdtBkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBZYExgTmBFhOMdYsdgg2ZUBUYAxGEQAKCaSI4EgEDAQEBAQEBAgE?=
 =?us-ascii?q?TAQEBCgsJCBsOIwyCNgUCAxoBBoJbAQEBAQIBAQIkEwwKAyYDAwECAwMBAQEBC?=
 =?us-ascii?q?BEEAQEBHggBBwMBJB4JCAIEEwUDgxoBgXkIAQMBqEwzii+CLooRgVc/gRGDEoU?=
 =?us-ascii?q?BB4VYAos/hBmRXAcCgimEZ4YxhBkggV5NiAOHK5oCgV2BdzMaI4M8CYZFig1BM?=
 =?us-ascii?q?YEHi2mBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0AvAAAxPBpchxHrdtBkGgEBAQEBAgEBAQEHAgEBAQGBZYE?=
 =?us-ascii?q?xgTmBFhOMdYsdgg2ZUBUYAxGEQAKCaSI4EgEDAQEBAQEBAgETAQEBCgsJCBsOI?=
 =?us-ascii?q?wyCNgUCAxoBBoJbAQEBAQIBAQIkEwwKAyYDAwECAwMBAQEBCBEEAQEBHggBBwM?=
 =?us-ascii?q?BJB4JCAIEEwUDgxoBgXkIAQMBqEwzii+CLooRgVc/gRGDEoUBB4VYAos/hBmRX?=
 =?us-ascii?q?AcCgimEZ4YxhBkggV5NiAOHK5oCgV2BdzMaI4M8CYZFig1BMYEHi2mBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,372,1539673200"; 
   d="scan'208";a="56524046"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 19 Dec 2018 04:46:07 -0800
Received: from localhost ([::1]:59833 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gZbEk-0002mX-HC
	for like.xu@linux.intel.com; Wed, 19 Dec 2018 07:46:06 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:58951)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <prvs=88499b8e4=Paul.Durrant@citrix.com>)
	id 1gZbCX-0001VD-50
	for qemu-devel@nongnu.org; Wed, 19 Dec 2018 07:43:51 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <prvs=88499b8e4=Paul.Durrant@citrix.com>)
	id 1gZbCU-0007md-EZ
	for qemu-devel@nongnu.org; Wed, 19 Dec 2018 07:43:49 -0500
Received: from smtp.eu.citrix.com ([185.25.65.24]:16039)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <prvs=88499b8e4=Paul.Durrant@citrix.com>)
	id 1gZbCU-0007hR-1a; Wed, 19 Dec 2018 07:43:46 -0500
X-IronPort-AV: E=Sophos;i="5.56,372,1539648000"; d="scan'208";a="83552816"
From: Paul Durrant <Paul.Durrant@citrix.com>
To: Anthony Perard <anthony.perard@citrix.com>
Thread-Topic: [PATCH v6 16/18] xen: automatically create XenBlockDevice-s
Thread-Index: AQHUlhCgCMb4+vLHPEyCxSfyzn9JUKWF8tsAgAARJqA=
Date: Wed, 19 Dec 2018 12:43:24 +0000
Message-ID: <40bdef2962864ca8bc364249196bf9b3@AMSPEX02CL03.citrite.net>
References: <20181217133011.31433-1-paul.durrant@citrix.com>
	<20181217133011.31433-17-paul.durrant@citrix.com>
	<20181219123926.GA1288@perard.uk.xensource.com>
In-Reply-To: <20181219123926.GA1288@perard.uk.xensource.com>
Accept-Language: en-GB, en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-ms-exchange-transport-fromentityheader: Hosted
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 185.25.65.24
Subject: Re: [Qemu-devel] [PATCH v6 16/18] xen: automatically create
 XenBlockDevice-s
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Kevin Wolf <kwolf@redhat.com>, Stefano Stabellini <sstabellini@kernel.org>,
	"qemu-block@nongnu.org" <qemu-block@nongnu.org>,
	"qemu-devel@nongnu.org" <qemu-devel@nongnu.org>,
	Max Reitz <mreitz@redhat.com>,
	"xen-devel@lists.xenproject.org" <xen-devel@lists.xenproject.org>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

> -----Original Message-----
> From: Anthony PERARD [mailto:anthony.perard@citrix.com]
> Sent: 19 December 2018 12:39
> To: Paul Durrant <Paul.Durrant@citrix.com>
> Cc: qemu-devel@nongnu.org; qemu-block@nongnu.org; xen-
> devel@lists.xenproject.org; Kevin Wolf <kwolf@redhat.com>; Max Reitz
> <mreitz@redhat.com>; Stefano Stabellini <sstabellini@kernel.org>
> Subject: Re: [PATCH v6 16/18] xen: automatically create XenBlockDevice-s
>=20
> On Mon, Dec 17, 2018 at 01:30:09PM +0000, Paul Durrant wrote:
> > +static char *xen_block_blockdev_add(const char *id, QDict *qdict,
> > +                                    Error **errp)
> > +{
> > +    const char *driver =3D qdict_get_try_str(qdict, "driver");
> > +    BlockdevOptions *options =3D NULL;
> > +    Error *local_err =3D NULL;
> > +    char *str =3D NULL;
> > +    char *node_name;
> > +    Visitor *v;
> > +
> > +    if (!driver) {
> > +        error_setg(errp, "no 'driver' parameter");
> > +        return NULL;
> > +    }
> > +
> > +    node_name =3D g_strdup_printf("%s-%s", id, driver);
> > +    qdict_put_str(qdict, "node-name", node_name);
> > +
> > +    qdict_iter(qdict, add_item, &str);
> > +
> > +    trace_xen_block_blockdev_add(str);
> > +    g_free(str);
> > +
> > +    v =3D qobject_input_visitor_new_flat_confused(qdict, errp);
>=20
> Kevin seems to say that this could be done without the _flat_confused
> version. The flat_confused version seems to be useful just because
> the key "cache.direct" is used earlier, and because everything in qdict
> is a string.

It could be, but there's a good reason for wanting everything as a string, =
and that is so that I can do a qdict_iter to generate my trace message. Als=
o I really don't want to get too elaborate here... this is supposed to be m=
imicking what would normally come via a json blob, and that would start out=
 as strings.

  Paul

>=20
> I think instead, qobject_input_visitor_new could be used. You would just
> need to replace
>     qdict_put_str(qdict, "cache.direct", "on");
> by
>     QDict *cache =3D qdict_new();
>     qdict_put_str(cache, "direct", "on");
>     qdict_put_obj(qdict, "cache", QOBJECT(cache));
>=20
> And also the property "read-only" which seems to be a bool as well. I've
> check all property in the qdict, and I think that the only two that
> needs to be changes. And then, we can use:
>     v =3D qobject_input_visitor_new(qdict); which never fails.
>=20
> You'll just need "qapi/qobject-input-visitor.h" instead of "block/qdict.h=
"
>=20
> > +    if (!v) {
> > +        goto fail;
> > +    }
> > +
> > +    visit_type_BlockdevOptions(v, NULL, &options, &local_err);
> > +    visit_free(v);
> > +
> > +    if (local_err) {
> > +        error_propagate(errp, local_err);
> > +        goto fail;
> > +    }
> > +
> > +    qmp_blockdev_add(options, &local_err);
> > +
> > +    if (local_err) {
> > +        error_propagate(errp, local_err);
> > +        goto fail;
> > +    }
> > +
> > +    qapi_free_BlockdevOptions(options);
> > +
> > +    return node_name;
> > +
> > +fail:
> > +    if (options) {
> > +        qapi_free_BlockdevOptions(options);
> > +    }
> > +    g_free(node_name);
> > +
> > +    return NULL;
> > +}
> [...]
> > +static XenBlockDrive *xen_block_drive_create(const char *id,
> > +                                             const char *device_type,
> > +                                             QDict *opts, Error **errp=
)
> > +{
> > +    const char *params =3D qdict_get_try_str(opts, "params");
> > +    const char *mode =3D qdict_get_try_str(opts, "mode");
> > +    const char *direct_io_safe =3D qdict_get_try_str(opts, "direct-io-
> safe");
> > +    const char *discard_enable =3D qdict_get_try_str(opts, "discard-
> enable");
> > +    char *driver =3D NULL;
> > +    char *filename =3D NULL;
> > +    XenBlockDrive *drive =3D NULL;
> > +    Error *local_err =3D NULL;
> > +    QDict *qdict;
> > +
> > +    if (params) {
> > +        char **v =3D g_strsplit(params, ":", 2);
> > +
> > +        if (v[1] =3D=3D NULL) {
> > +            filename =3D g_strdup(v[0]);
> > +            driver =3D g_strdup("file");
> > +        } else {
> > +            if (strcmp(v[0], "aio") =3D=3D 0) {
> > +                driver =3D g_strdup("file");
> > +            } else if (strcmp(v[0], "vhd") =3D=3D 0) {
> > +                driver =3D g_strdup("vpc");
> > +            } else {
> > +                driver =3D g_strdup(v[0]);
> > +            }
> > +            filename =3D g_strdup(v[1]);
> > +        }
> > +
> > +        g_strfreev(v);
> > +    }
> > +
> > +    if (!filename) {
> > +        error_setg(errp, "no filename");
> > +        goto done;
> > +    }
> > +    assert(driver);
> > +
> > +    drive =3D g_new0(XenBlockDrive, 1);
> > +    drive->id =3D g_strdup(id);
> > +
> > +    qdict =3D qdict_new();
> > +
> > +    qdict_put_str(qdict, "driver", "file");
> > +    qdict_put_str(qdict, "filename", filename);
> > +
> > +    if (mode && *mode !=3D 'w') {
> > +        qdict_put_str(qdict, "read-only", "on");
> > +    }
> > +
> > +    if (direct_io_safe) {
> > +        unsigned long value;
> > +
> > +        if (!qemu_strtoul(direct_io_safe, NULL, 2, &value) && !!value)
> {
> > +            qdict_put_str(qdict, "cache.direct", "on");
> > +            qdict_put_str(qdict, "aio", "native");
> > +        }
> > +    }
> > +
> > +    if (discard_enable) {
> > +        unsigned long value;
> > +
> > +        if (!qemu_strtoul(discard_enable, NULL, 2, &value) && !!value)
> {
> > +            qdict_put_str(qdict, "discard", "unmap");
> > +        }
> > +    }
> > +
> > +    /*
> > +     * It is necessary to turn file locking off as an emulated device
> > +     * may have already opened the same image file.
> > +     */
> > +    qdict_put_str(qdict, "locking", "off");
> > +
> > +    xen_block_drive_layer_add(drive, qdict, &local_err);
> > +    qobject_unref(qdict);
> > +
> > +    if (local_err) {
> > +        error_propagate(errp, local_err);
> > +        goto done;
> > +    }
> > +
> > +    /* If the image is a raw file then we are done */
>=20
> I don't think that is true, as I have this warning in QEMU:
> qemu-system-i386: warning: Opening a block device as a file using the
> 'file' driver is deprecated
>=20
> We would need a "raw" driver.
>=20
> > +    if (!strcmp(driver, "file")) {
> > +        goto done;
> > +    }
> > +
> > +    qdict =3D qdict_new();
> > +
> > +    qdict_put_str(qdict, "driver", driver);
> > +
> > +    xen_block_drive_layer_add(drive, qdict, &local_err);
> > +    qobject_unref(qdict);
> > +
> > +done:
> > +    g_free(driver);
> > +    g_free(filename);
> > +
> > +    if (local_err) {
> > +        xen_block_drive_destroy(drive, NULL);
> > +        return NULL;
> > +    }
> > +
> > +    return drive;
> > +}
>=20
> --
> Anthony PERARD

