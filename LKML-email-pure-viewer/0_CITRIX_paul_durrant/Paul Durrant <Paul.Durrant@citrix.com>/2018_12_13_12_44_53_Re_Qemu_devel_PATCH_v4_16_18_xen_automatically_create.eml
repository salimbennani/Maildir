Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 21:24:29 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 4B0905807A3
	for <like.xu@linux.intel.com>; Thu, 13 Dec 2018 05:08:46 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga004-1.jf.intel.com with ESMTP; 13 Dec 2018 05:08:46 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AsJb/RBHugmwwvQMP7a1S4J1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ7yoMqwAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95RWSJfHoOy?=
 =?us-ascii?q?YYgBD+QDMulEoIfyqEYArQO8CAeuC+7j1zFFimPo0q0hyOkhDRjG3A48E94SrH?=
 =?us-ascii?q?jYstP4P7oSX+Cvy6nIyC3OYelM1jfg7IjDbx4voeyWXbJqa8XRz1UvHB7Cg1uK?=
 =?us-ascii?q?s4PlIjeV2v4DvWiG9epgT/igi2g7qwxqvjevx9ssipPIhoMa0FzL6SJ5wIMsKN?=
 =?us-ascii?q?C+VUV1YsakHYNOuy2GNIZ6WN4uT3xrtSog1LELt562cDIXxJkl3xLTdv+KfoiS?=
 =?us-ascii?q?7h79VOudOzZ1iXJ/dL6hiBu/91WrxPfmWcmuyllKqzJIktnSuXAJ0Bze8syHSv?=
 =?us-ascii?q?pm/ke9wjaDzQ/T6udZIUwukqrbMZEhzqYxlpoVr0vDAjf7lFvqgKKVbEko5/Wk?=
 =?us-ascii?q?5uf9brn4qJKRN5V4hhz8P6g2n8ywG+U4MgwAX2iB/uS80aXu/VTnT7VPk/06i7?=
 =?us-ascii?q?TWv47EJcsFoq61GhRa0oE+6xa5Ezipzs8YkX4DLFJEexKIkZLlOl7TIP3gCfe/?=
 =?us-ascii?q?glKskCpkxvzcP73hBInNIWbHkLv7Ybl97EtcxRE1zdBY4ZJUBbcBIO/pVk/2rt?=
 =?us-ascii?q?zYAQc1MxaozOb/FNV9yoQeVHqLAq+YM6Pdr0WE5+0yI+SXYI8VuTD9K+Uq5vL0?=
 =?us-ascii?q?jH85n0Mdcret3ZcNdH+4GfFmcA2kZ2HxiIIBDXsSpVh5C+jrk0GZFzhUYXm0Qu?=
 =?us-ascii?q?Q7/D58DYunCYLKQMeqmKCA2yGgWYRbY30DBl2SHHO7SoOfRv1ZbSuTJtNmwCUJ?=
 =?us-ascii?q?UKXkR4I/2BXrrgLj1rd8MsLS/SsXs4+l08J6sPbOnxM//iAhEsKGzmuWRHt1lG?=
 =?us-ascii?q?5bezhjk4Nyv017gmiE1aY3y6hbCttX6dtTXws6PIKaxOt/XYPcQAXEK++AVVLu?=
 =?us-ascii?q?bsi8Gzg3Uppl+9YTZwBRBs+4hxbf9yGrH6UUh/qAA5liofGU5GT4O8sokyWO76?=
 =?us-ascii?q?ImlVRzB5IXbWA=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0CKAQCDWRJcmBHrdtBjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBZYExJYI9jHSNQJdogVgbGBSEOwMCAoMCIjgSAQMBAQEBAQECARMBAQEBAQg?=
 =?us-ascii?q?LCwYbDi+CNgUCAxoBBoJbAQEBAQIBAQIkEwwKAyYDAgEBAgMDAQEBAQgOAwQBA?=
 =?us-ascii?q?R8IAQcDASQeCQgCBBMFA4MZgXkIAQMBp3EzijCCLooOgVc/gRGCFH6EaRgHMYU?=
 =?us-ascii?q?jAoktCIF9hBWBT495BwKCKIsRhBggkUqZSYFdgXczGiODPIInF44dQTGBB4pRg?=
 =?us-ascii?q?XcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0CKAQCDWRJcmBHrdtBjHAEBAQQBAQcEAQGBZYExJYI9jHS?=
 =?us-ascii?q?NQJdogVgbGBSEOwMCAoMCIjgSAQMBAQEBAQECARMBAQEBAQgLCwYbDi+CNgUCA?=
 =?us-ascii?q?xoBBoJbAQEBAQIBAQIkEwwKAyYDAgEBAgMDAQEBAQgOAwQBAR8IAQcDASQeCQg?=
 =?us-ascii?q?CBBMFA4MZgXkIAQMBp3EzijCCLooOgVc/gRGCFH6EaRgHMYUjAoktCIF9hBWBT?=
 =?us-ascii?q?495BwKCKIsRhBggkUqZSYFdgXczGiODPIInF44dQTGBB4pRgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,349,1539673200"; 
   d="scan'208";a="57323193"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 13 Dec 2018 05:08:45 -0800
Received: from localhost ([::1]:52316 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gXQjL-0002Bj-Of
	for like.xu@linux.intel.com; Thu, 13 Dec 2018 08:08:43 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:49795)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <prvs=878dab2db=Paul.Durrant@citrix.com>)
	id 1gXQMN-0007GF-Uf
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 07:45:03 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <prvs=878dab2db=Paul.Durrant@citrix.com>)
	id 1gXQMJ-0004cd-Hf
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 07:44:59 -0500
Received: from smtp.eu.citrix.com ([185.25.65.24]:51933)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <prvs=878dab2db=Paul.Durrant@citrix.com>)
	id 1gXQMJ-0004Rv-4M; Thu, 13 Dec 2018 07:44:55 -0500
X-IronPort-AV: E=Sophos;i="5.56,349,1539648000"; d="scan'208";a="83245942"
From: Paul Durrant <Paul.Durrant@citrix.com>
To: 'Kevin Wolf' <kwolf@redhat.com>
Thread-Topic: [PATCH v4 16/18] xen: automatically create XenBlockDevice-s
Thread-Index: AQHUkWpwzaYCB59VWEGqrcAL/Qi0HaV8gOEAgAAUkdA=
Date: Thu, 13 Dec 2018 12:44:53 +0000
Message-ID: <b323cd922b6d4a5798a2f3cfae2bd573@AMSPEX02CL03.citrite.net>
References: <1544543862-9997-1-git-send-email-paul.durrant@citrix.com>
	<1544543862-9997-17-git-send-email-paul.durrant@citrix.com>
	<20181213115152.GA5427@linux.fritz.box>
In-Reply-To: <20181213115152.GA5427@linux.fritz.box>
Accept-Language: en-GB, en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-ms-exchange-transport-fromentityheader: Hosted
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 185.25.65.24
Subject: Re: [Qemu-devel] [PATCH v4 16/18] xen: automatically create
 XenBlockDevice-s
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: "xen-devel@lists.xenproject.org" <xen-devel@lists.xenproject.org>, Stefano
	Stabellini <sstabellini@kernel.org>,
	"qemu-devel@nongnu.org" <qemu-devel@nongnu.org>,
	"qemu-block@nongnu.org" <qemu-block@nongnu.org>,
	Max Reitz <mreitz@redhat.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

> -----Original Message-----
> From: Kevin Wolf [mailto:kwolf@redhat.com]
> Sent: 13 December 2018 11:52
> To: Paul Durrant <Paul.Durrant@citrix.com>
> Cc: qemu-devel@nongnu.org; qemu-block@nongnu.org; xen-
> devel@lists.xenproject.org; Max Reitz <mreitz@redhat.com>; Stefano
> Stabellini <sstabellini@kernel.org>
> Subject: Re: [PATCH v4 16/18] xen: automatically create XenBlockDevice-s
>=20
> Am 11.12.2018 um 16:57 hat Paul Durrant geschrieben:
> > This patch adds a creator function for XenBlockDevice-s so that they ca=
n
> > be created automatically when the Xen toolstack instantiates a new
> > PV backend. When the XenBlockDevice is created this way it is also
> > necessary to create a drive which matches the configuration that the Xe=
n
> > toolstack has written into xenstore. This drive is marked 'auto_del' so
> > that it will be removed when the XenBlockDevice is destroyed. Also, for
> > compatibility with the legacy 'xen_disk' implementation, an iothread
> > is automatically created for the new XenBlockDevice. This will also be
> > removed when the XenBlockDevice is destroyed.
> >
> > Correspondingly the legacy backend scan for 'qdisk' is removed.
> >
> > After this patch is applied the legacy 'xen_disk' code is redundant. It
> > will be removed by a subsequent patch.
> >
> > Signed-off-by: Paul Durrant <paul.durrant@citrix.com>
> > Reviewed-by: Anthony Perard <anthony.perard@citrix.com>
>=20
> So I have two points for this patch.
>=20
> The first is that devices creating their own backends feels so wrong.

Indeed it does feel wrong, but this is the only way to deal with existing X=
en toolstacks. Once toolstacks have been ported to using QMP to instantiate=
 backends then this code can go away.

> I
> know that the old xen_disk did the same, and fixing it might neither be
> easy nor directly related to the qdevification, so requiring that from
> you would probably be unfair. But I still have to make the note, and
> hopefully we can get to it eventually (or maybe it is even easy enough
> that we can indeed address it in this series).
>=20

No, it's not easy but once this series is committed the work can be started=
.

> My problem here is that I don't really understand the Xen mechanisms.
> Could you give me a very high-level overview of how adding a disk works
> and which component communicates with which other component to get the
> information down to QEMU and eventually the newly added
> xen_block_device_create()?

Xen toolstacks instantiate PV backends by just writing values into xenstore=
. It is up to the entity implementing the backend to set 'watches' so that =
it gets notified when these values appear. Currently that entity may be QEM=
U, or it may be a kernel driver such as Linux xen-blkback.ko.

>=20
> Essentially, what I'm wondering is whether we have anything that could
> be treated more or less like another monitor besides QMP and HMP, which
> would internally work similar to HMP, i.e. map (almost) everything to
> QMP commands.

Yes, it would be possible to have a separate 'compatibility' daemon to watc=
h xenstore and then formulate the correct sequence of QMP commands to insta=
ntiate the backend, but that is more complicated and the right answer of co=
urse is to have the toolstack send the QMP commands in the first place.

> I see that there is this XenWatch infrastructure to get
> notified about changes (which would be treated like monitor commands),
> but I'm not sure if everything would be covered by this mechanism or
> whether some things must be fetched explicitly.
>=20
> Anyway, this is probably for later.
>=20
> > +static void xen_block_drive_create(const char *id, const char
> *device_type,
> > +                                   QDict *opts, Error **errp)
> > +{
> > +    const char *params =3D qdict_get_try_str(opts, "params");
> > +    const char *mode =3D qdict_get_try_str(opts, "mode");
> > +    const char *direct_io_safe =3D qdict_get_try_str(opts, "direct-io-
> safe");
> > +    const char *discard_enable =3D qdict_get_try_str(opts, "discard-
> enable");
> > +    char *format =3D NULL;
> > +    char *file =3D NULL;
> > +    char *drive_optstr =3D NULL;
> > +    QemuOpts *drive_opts;
> > +    Error *local_err =3D NULL;
> > +
> > +    if (params) {
> > +        char **v =3D g_strsplit(params, ":", 2);
> > +
> > +        if (v[1] =3D=3D NULL) {
> > +            file =3D g_strdup(v[0]);
> > +        } else {
> > +            if (strcmp(v[0], "aio") =3D=3D 0) {
> > +                format =3D g_strdup("raw");
> > +            } else if (strcmp(v[0], "vhd") =3D=3D 0) {
> > +                format =3D g_strdup("vpc");
> > +            } else {
> > +                format =3D g_strdup(v[0]);
> > +            }
> > +            file =3D g_strdup(v[1]);
> > +        }
> > +
> > +        g_strfreev(v);
> > +    }
> > +
> > +    if (!file) {
> > +        error_setg(errp, "no file parameter");
> > +        return;
> > +    }
> > +
> > +    drive_optstr =3D g_strdup_printf("id=3D%s", id);
> > +    drive_opts =3D drive_def(drive_optstr);
> > +    if (!drive_opts) {
> > +        error_setg(errp, "failed to create drive options");
> > +        goto done;
> > +    }
> > +
> > +    qemu_opt_set(drive_opts, "file", file, &local_err);
> > +    if (local_err) {
> > +        error_propagate_prepend(errp, local_err, "failed to set 'file'=
:
> ");
> > +        goto done;
> > +    }
> > +
> > +    qemu_opt_set(drive_opts, "media", device_type, &local_err);
> > +    if (local_err) {
> > +        error_propagate_prepend(errp, local_err,
> > +                                "failed to set 'media': ");
> > +        goto done;
> > +    }
> > +
> > +    if (format) {
> > +        qemu_opt_set(drive_opts, "format", format, &local_err);
> > +        if (local_err) {
> > +            error_propagate_prepend(errp, local_err,
> > +                                    "failed to set 'format': ");
> > +            goto done;
> > +        }
> > +    }
> > +
> > +    if (mode && *mode !=3D 'w') {
> > +        qemu_opt_set_bool(drive_opts, BDRV_OPT_READ_ONLY, true,
> &local_err);
> > +        if (local_err) {
> > +            error_propagate_prepend(errp, local_err, "failed to set
> '%s': ",
> > +                                    BDRV_OPT_READ_ONLY);
> > +            goto done;
> > +        }
> > +    }
> > +
> > +    /*
> > +     * It is necessary to turn file locking off as an emulated device
> > +     * my have already opened the same image file.
> > +     */
> > +    qemu_opt_set(drive_opts, "file.locking", "off", &local_err);
> > +    if (local_err) {
> > +        error_propagate_prepend(errp, local_err,
> > +                                "failed to set 'file.locking': ");
> > +        goto done;
> > +    }
> > +
> > +    qemu_opt_set_bool(drive_opts, BDRV_OPT_CACHE_WB, true, &local_err)=
;
> > +    if (local_err) {
> > +        error_propagate_prepend(errp, local_err, "failed to set '%s':
> ",
> > +                                BDRV_OPT_CACHE_WB);
> > +        goto done;
> > +    }
> > +
> > +    if (direct_io_safe) {
> > +        qemu_opt_set_bool(drive_opts, BDRV_OPT_CACHE_DIRECT, true,
> > +                          &local_err);
> > +        if (local_err) {
> > +            error_propagate_prepend(errp, local_err, "failed to set
> '%s': ",
> > +                                    BDRV_OPT_CACHE_DIRECT);
> > +            goto done;
> > +        }
> > +
> > +        qemu_opt_set(drive_opts, "aio", "native", &local_err);
> > +        if (local_err) {
> > +            error_propagate_prepend(errp, local_err,
> > +                                    "failed to set 'aio': ");
> > +            goto done;
> > +        }
> > +    }
> > +
> > +    if (discard_enable) {
> > +        unsigned long value;
> > +
> > +        if (!qemu_strtoul(discard_enable, NULL, 2, &value)) {
> > +            qemu_opt_set_bool(drive_opts, BDRV_OPT_DISCARD, !!value,
> > +                              &local_err);
> > +            if (local_err) {
> > +                error_propagate_prepend(errp, local_err,
> > +                                        "failed to set '%s': ",
> > +                                        BDRV_OPT_DISCARD);
> > +                goto done;
> > +            }
> > +        }
> > +    }
> > +
> > +    drive_new(drive_opts, IF_NONE, &local_err);
> > +    if (local_err) {
> > +        error_propagate_prepend(errp, local_err,
> > +                                "failed to create drive: ");
> > +        goto done;
> > +    }
>=20
> The other major point is that you're using the legacy drive_*()
> infrastructure, which should not only go away as soon as we can, but
> which is also full of magic and nasty surprises.
>=20
> I think the best way would be to create only a block node
> (BlockDriverState) here, and get an automatically created anonymous
> BlockBackend from the qdev drive property.
>=20
> There are two ways to achieve this: qmp_blockdev_add() would be optimal
> because that's a stable external interface. It would require you to
> specify a node-name (you already have the id parameter), and you'd use
> this node-name for the qdev drive property.
>=20
> qmp_blockdev_add() requires a BlockdevOptions object, which you can
> either construct manually in C or use a visitor to convert from an
> options QDict. Maybe in this case, converting from a QDict is better
> because otherwise you need special code for each block driver.
>=20

I was using the legacy interfaces because this code is, as I said above, su=
pposed to be a mechanism only required for compatibility with the way tools=
tacks currently operate (and so is essentially 'legacy') but using the top-=
level QMP entry point to construct the does sound do-able as long as the un=
derlying file locking can still be avoided with that mechanism. Since Block=
devOptions seems to be an auto-generated structure, figuring out how to fil=
l it in manually is somewhat tricky so the QDict approach is preferable but=
 I'll have to figure out how to use a visitor to do the translation.


> The other way would be calling bdrv_open() directly, which gives you a
> BlockDriverState, but it risks using legacy functionality that will be
> deprecated soon. Again, you'd take the node-name and pass it to the qdev
> drive option below.

Yes, xen_disk does things this way but then we end up with legacy block dev=
ice and still fall foul of the assertions buried in the code.

>=20
> > +
> > +done:
> > +    g_free(drive_optstr);
> > +    g_free(format);
> > +    g_free(file);
> > +}
> > +
> > +static void xen_block_device_create(BusState *bus, const char *name,
> > +                                    QDict *opts, Error **errp)
> > +{
> > +    unsigned long number;
> > +    const char *vdev, *device_type;
> > +    BlockBackend *blk =3D NULL;
> > +    IOThread *iothread =3D NULL;
> > +    DeviceState *dev =3D NULL;
> > +    Error *local_err =3D NULL;
> > +    const char *type;
> > +    XenBlockDevice *blockdev;
> > +
> > +    trace_xen_block_device_create(name);
> > +
> > +    if (qemu_strtoul(name, NULL, 10, &number)) {
> > +        error_setg(errp, "failed to parse name '%s'", name);
> > +        return;
> > +    }
> > +
> > +    vdev =3D qdict_get_try_str(opts, "dev");
> > +    if (!vdev) {
> > +        error_setg(errp, "no dev parameter");
> > +        return;
> > +    }
> > +
> > +    device_type =3D qdict_get_try_str(opts, "device-type");
> > +    if (!device_type) {
> > +        error_setg(errp, "no device-type parameter");
> > +        return;
> > +    }
> > +
> > +    if (!strcmp(device_type, "disk")) {
> > +        type =3D TYPE_XEN_DISK_DEVICE;
> > +    } else if (!strcmp(device_type, "cdrom")) {
> > +        type =3D TYPE_XEN_CDROM_DEVICE;
> > +    } else {
> > +        error_setg(errp, "invalid device-type parameter '%s'",
> device_type);
> > +        return;
> > +    }
> > +
> > +    xen_block_drive_create(vdev, device_type, opts, &local_err);
> > +    if (local_err) {
> > +        error_propagate(errp, local_err);
> > +        return;
> > +    }
> > +
> > +    blk =3D blk_by_name(vdev);
> > +    g_assert(blk);
> > +
> > +    iothread =3D iothread_create(vdev, &local_err);
> > +    if (local_err) {
> > +        error_propagate(errp, local_err);
> > +        goto unref;
> > +    }
> > +
> > +    dev =3D qdev_create(bus, type);
> > +    blockdev =3D XEN_BLOCK_DEVICE(dev);
> > +
> > +    qdev_prop_set_string(dev, "vdev", vdev);
> > +    if (blockdev->vdev.number !=3D number) {
> > +        error_setg(errp, "invalid dev parameter '%s'", vdev);
> > +        goto unref;
> > +    }
> > +
> > +    qdev_prop_set_drive(dev, "drive", blk, &local_err);
> > +    if (local_err) {
> > +        error_propagate_prepend(errp, local_err, "failed to set
> 'drive': ");
> > +        goto unref;
> > +    }
>=20
> So here you would need to use something like this:
>=20
> object_property_set_str(OBJECT(dev), vdev, "driver", &local_err);
>=20
> > +
> > +    blockdev->auto_iothread =3D iothread;
> > +
> > +    object_property_set_bool(OBJECT(dev), true, "realized",
> &local_err);
> > +    if (local_err) {
> > +        error_propagate_prepend(errp, local_err,
> > +                                "initialization of device %s failed: "=
,
> > +                                type);
> > +        goto unref;
> > +    }
> > +
> > +    blockdev_mark_auto_del(blk);
>=20
> You don't need this one any more then (if you look into the details,
> it's one of the more confusing parts of the drive_*() magic, so it's
> good to get rid of it). When you use the anonymous BlockBackend created
> by the qdev drive property (because you passed it a node-name rather
> than a BlockBackend name) means that the BlockBackend disappears
> together with the drive.
>=20

Ok.

> Note that explicitly created block nodes must also be unreferenced
> explicitly (bdrv_open() should be paired with bdrv_unref() and
> qmp_blockdev_add() with qmp_blockdev_del()). Maybe XenBackendInfo needs
> a .destroy callback so we can do destruction symmetrically to device
> creation?
>=20

Yes, I'd probably just add a callback function pointer into XenDevice which=
 only gets set for devices instantiated via this mechanism.

  Paul

> > +    return;
> > +
> > +unref:
> > +    if (dev) {
> > +        object_unparent(OBJECT(dev));
> > +    }
> > +
> > +    if (iothread) {
> > +        iothread_destroy(iothread);
> > +    }
> > +
> > +    if (blk) {
> > +        monitor_remove_blk(blk);
> > +        blk_unref(blk);
> > +    }
> > +}
>=20
> Kevin

