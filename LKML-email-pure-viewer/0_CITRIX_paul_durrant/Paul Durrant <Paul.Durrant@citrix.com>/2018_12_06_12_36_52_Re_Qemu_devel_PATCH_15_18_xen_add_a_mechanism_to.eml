Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:45:46 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 196CB580443
	for <like.xu@linux.intel.com>; Thu,  6 Dec 2018 04:39:53 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga007-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 04:39:52 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3Aabw2oBWy1sDEGqfZm1BSpfIQuJHV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYbRyAt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZAo2y?=
 =?us-ascii?q?cZcPAeQCM+ZWrYbyu1QAohSjCwm0Bu7hyDBFimL40KEmzeshChrL3BA5H9IMrH?=
 =?us-ascii?q?jYsMn5OLkUXOuozKfI1zLDb/ZO1Dnn8ofIbxQhquyCU7Jta8rR01MgFwXZjl6N?=
 =?us-ascii?q?roHrJSma1vkJs2SB4eRgSPivi3Q9pAF3vjii3dsjiojVhoIPy1DF+j91z5oyJd?=
 =?us-ascii?q?29UUN2Z8OvHphItyyCKYd6XsAvT3t1tConybAKo4C3cSYKxZg92hLSaeSLf5WL?=
 =?us-ascii?q?7x/jTuqdPzd1iGhkdb+/nRq+70etx+vhXceuyllKtDBKktzUu3ANyRPT7s+HR+?=
 =?us-ascii?q?N5/kegwjaPyxvT5vtLIUAyiKrXMZkhwqQ/lpYLsETDGDH5mFnugaOIakkp+fKk?=
 =?us-ascii?q?5/n6brjlvJOQKYF5hwHkPqgzmMGzGeE4PRIPX2if9+S8zrrj/UjhTbVTkPI2l7?=
 =?us-ascii?q?TZvInHKssFuK62HQtV3p845Ba4Ejem1sgXkmccLF5CfBKHjovpNE/ULPH3EPey?=
 =?us-ascii?q?m1CskDZtx/DbMbztGJTNLn7fkLj/ebZx8VJTyA02zd1E4ZJUDbcBIP31Wk/srt?=
 =?us-ascii?q?DYCQU5MwOsz+b9FNp9zp8eWX6IAqKBNKPSsFyI6fw1L+iDeY8YozL9K/kj5/7z?=
 =?us-ascii?q?gn41g14dfa+13ZQJbHC0BOhpI0KcYSmkv9EaDG1fvhYiVPe4zxqGUCVPfDC0WK?=
 =?us-ascii?q?Qz4Cx9D5ipSoLKR4SoibrG2z+nH5pQfSdfB1WRVHvlaYiACMoKcz+Yd8pokzgY?=
 =?us-ascii?q?Uuq4Roo8kB2jqgL+jqBqN/fZ4TEws5Xl295ooerJmkYp6DZ2As+BhnyLVHx+hW?=
 =?us-ascii?q?gSRjU7j5x49GV71leE17kwu/FCHMZfr6dAVBs6MpjNifR3EdnoVirKf8uTSUbg?=
 =?us-ascii?q?SdKjV2IfVNU0lucHfkI1N8i4lBnFw2L+O7YIk/qnGYYu+6TA93PwO9x82zDN06?=
 =?us-ascii?q?x33ApueddGKWDz3v03zAPUHYOc1hzBz6s=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ADAAA3FwlcmBHrdtBkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUgQBAQEBCwGBMIJPE4xyjTx8llKBcxQYFIRAAoMUIjUIDQEDAQE?=
 =?us-ascii?q?BAQEBAgETAQEBAQEICwsGGw4vgjYFAgMaAQaCWwEBAQECAQECJBMMCgMmAwIBA?=
 =?us-ascii?q?QIDAwEBAQEIEQQBAQEeCAEHAwEkHgkIAgQTBQODGYF6CAEDAaZMM4oqjB6BVz+?=
 =?us-ascii?q?BEYJdNYUBB4VUAokrhgyBTI8HVQcCgiSIF4JtM4NjIIF/jzaZC4FIAYIKMxojg?=
 =?us-ascii?q?zyCJxcSjgtBMYEHiHCBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0ADAAA3FwlcmBHrdtBkGgEBAQEBAgEBAQEHAgEBAQGBUgQ?=
 =?us-ascii?q?BAQEBCwGBMIJPE4xyjTx8llKBcxQYFIRAAoMUIjUIDQEDAQEBAQEBAgETAQEBA?=
 =?us-ascii?q?QEICwsGGw4vgjYFAgMaAQaCWwEBAQECAQECJBMMCgMmAwIBAQIDAwEBAQEIEQQ?=
 =?us-ascii?q?BAQEeCAEHAwEkHgkIAgQTBQODGYF6CAEDAaZMM4oqjB6BVz+BEYJdNYUBB4VUA?=
 =?us-ascii?q?okrhgyBTI8HVQcCgiSIF4JtM4NjIIF/jzaZC4FIAYIKMxojgzyCJxcSjgtBMYE?=
 =?us-ascii?q?HiHCBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,322,1539673200"; 
   d="scan'208";a="54797105"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 06 Dec 2018 04:39:52 -0800
Received: from localhost ([::1]:40528 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gUswZ-0003HE-Cl
	for like.xu@linux.intel.com; Thu, 06 Dec 2018 07:39:51 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:53493)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <prvs=8715dceb6=Paul.Durrant@citrix.com>)
	id 1gUstv-0000xs-5P
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 07:37:11 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <prvs=8715dceb6=Paul.Durrant@citrix.com>)
	id 1gUstr-0002Z0-0s
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 07:37:07 -0500
Received: from smtp.ctxuk.citrix.com ([185.25.65.24]:38240
	helo=SMTP.EU.CITRIX.COM)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <prvs=8715dceb6=Paul.Durrant@citrix.com>)
	id 1gUsti-0002VL-6p; Thu, 06 Dec 2018 07:36:54 -0500
X-IronPort-AV: E=Sophos;i="5.56,322,1539648000"; d="scan'208";a="82882509"
From: Paul Durrant <Paul.Durrant@citrix.com>
To: Anthony Perard <anthony.perard@citrix.com>
Thread-Topic: [PATCH 15/18] xen: add a mechanism to automatically create
	XenDevice-s...
Thread-Index: AQHUga7ennAETad1R0ywBPjk7rjOq6VuucAAgAMA8SA=
Date: Thu, 6 Dec 2018 12:36:52 +0000
Message-ID: <66fe7ee71e9642d3bbbda0f4f900c799@AMSPEX02CL03.citrite.net>
References: <20181121151211.15997-1-paul.durrant@citrix.com>
	<20181121151211.15997-16-paul.durrant@citrix.com>
	<20181204153510.GW14786@perard.uk.xensource.com>
In-Reply-To: <20181204153510.GW14786@perard.uk.xensource.com>
Accept-Language: en-GB, en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-ms-exchange-transport-fromentityheader: Hosted
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 185.25.65.24
Subject: Re: [Qemu-devel] [PATCH 15/18] xen: add a mechanism to
 automatically create XenDevice-s...
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: "xen-devel@lists.xenproject.org" <xen-devel@lists.xenproject.org>,
	Stefano Stabellini <sstabellini@kernel.org>,
	"qemu-devel@nongnu.org" <qemu-devel@nongnu.org>,
	"qemu-block@nongnu.org" <qemu-block@nongnu.org>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

> -----Original Message-----
> From: Anthony PERARD [mailto:anthony.perard@citrix.com]
> Sent: 04 December 2018 15:35
> To: Paul Durrant <Paul.Durrant@citrix.com>
> Cc: qemu-block@nongnu.org; qemu-devel@nongnu.org; xen-
> devel@lists.xenproject.org; Stefano Stabellini <sstabellini@kernel.org>
> Subject: Re: [PATCH 15/18] xen: add a mechanism to automatically create
> XenDevice-s...
>=20
> On Wed, Nov 21, 2018 at 03:12:08PM +0000, Paul Durrant wrote:
> > +    xen_backend_device_create(BUS(xenbus), type, name, opts,
> &local_err);
> > +    qobject_unref(opts);
> > +
> > +    if (local_err) {
> > +        const char *msg =3D error_get_pretty(local_err);
> > +
> > +        error_report("failed to create '%s' device '%s': %s", type,
> name,
> > +                     msg);
> > +        error_free(local_err);
>=20
> You can use error_reportf_err() instead of those three calls. I may have
> only suggest error_report_err in a previous patch, but error_reportf_err
> does the error_prepend as well.
>=20

Ah. I'll go back over the patches and use that where necessary.

> > +    }
> > +}
> > +
> > +static void xen_bus_type_enumerate(XenBus *xenbus, const char *type)
> > +{
> > +    char *domain_path =3D g_strdup_printf("backend/%s/%u", type,
> xen_domid);
> > +    char **backend;
> > +    unsigned int i, n;
> > +
> > +    trace_xen_bus_type_enumerate(type);
> > +
> > +    backend =3D xs_directory(xenbus->xsh, XBT_NULL, domain_path, &n);
> > +    if (!backend) {
>=20
> domain_path isn't free here, you probably want a `goto out` which would
> free everything.

Ok.

>=20
> > +        return;
> > +    }
> > +
> > @@ -193,6 +302,17 @@ static void xen_bus_realize(BusState *bus, Error
> **errp)
> >      notifier_list_init(&xenbus->watch_notifiers);
> >      qemu_set_fd_handler(xs_fileno(xenbus->xsh), xen_bus_watch, NULL,
> >                          xenbus);
> > +
> > +    module_call_init(MODULE_INIT_XEN_BACKEND);
> > +
> > +    xenbus->backend_watch =3D
> > +        xen_bus_add_watch(xenbus, "", /* domain root node */
> > +                          "backend", xen_bus_enumerate, xenbus,
> &local_err);
> > +    if (local_err) {
> > +        error_propagate(errp, local_err);
> > +        error_prepend(errp, "failed to set up enumeration watch: ");
>=20
> You should use error_propagate_prepend instead
> error_propagate;error_prepend. And it looks like there is the same
> mistake in other patches that I haven't notice.
>=20

Oh, I didn't know about that one either... I've only seen the separate call=
s used elsewhere.

> Also you probably want goto fail here.
>=20

Not sure about that. Whilst the bus scan won't happen, it doesn't mean devi=
ces can't be added via QMP.

>=20
> > +static void xen_device_backend_changed(void *opaque)
> > +{
> > +    XenDevice *xendev =3D opaque;
> > +    const char *type =3D object_get_typename(OBJECT(xendev));
> > +    enum xenbus_state state;
> > +    unsigned int online;
> > +
> > +    trace_xen_device_backend_changed(type, xendev->name);
> > +
> > +    if (xen_device_backend_scanf(xendev, "state", "%u", &state) !=3D 1=
) {
> > +        state =3D XenbusStateUnknown;
> > +    }
> > +
> > +    xen_device_backend_set_state(xendev, state);
>=20
> It's kind of weird to set the internal state base on the external one
> that something else may have modified. Shouldn't we check that it is
> fine for something else to modify the state and that it is a correct
> transition?

The only thing (apart from this code) that's going to have perms to write t=
he backend state is the toolstack... which is, of course, be definition tru=
sted.

>=20
> Also aren't we going in a loop by having QEMU set the state, then the
> watch fires again? (Not really a loop since the function _set_state
> check for changes.

No. It's de-bounced inside the set_state function.

>=20
> Also maybe we should watch for the state changes only when something
> else like libxl creates (ask for) the backend, and ignore changes when
> QEMU did it itself.

I don't think it's necessary to add that complexity.

>=20
> > +
> > +    if (xen_device_backend_scanf(xendev, "online", "%u", &online) !=3D=
 1)
> {
> > +        online =3D 0;
> > +    }
> > +
> > +    xen_device_backend_set_online(xendev, !!online);
> > +
> > +    /*
> > +     * If a backend is still 'online' then its state should be cycled
> > +     * back round to InitWait in order for a new frontend instance to
> > +     * connect. This may happen when, for example, a frontend driver i=
s
> > +     * re-installed or updated.
> > +     * If a backend id not 'online' then the device should be
> destroyed.
>=20
> s/id/is/

Ok.

>=20
> > +     */
> > +    if (xendev->backend_online &&
> > +        xendev->backend_state =3D=3D XenbusStateClosed) {
> > +        xen_device_backend_set_state(xendev, XenbusStateInitWait);
> > +    } else if (!xendev->backend_online &&
> > +               (xendev->backend_state =3D=3D XenbusStateClosed ||
> > +                xendev->backend_state =3D=3D XenbusStateInitialising |=
|
> > +                xendev->backend_state =3D=3D XenbusStateInitWait ||
> > +                xendev->backend_state =3D=3D XenbusStateUnknown)) {
> > +        object_unparent(OBJECT(xendev));
> > +    }
> > +}
> > +
> >  static void xen_device_backend_create(XenDevice *xendev, Error **errp)
> >  {
> >      XenBus *xenbus =3D XEN_BUS(qdev_get_parent_bus(DEVICE(xendev)));
> > @@ -289,12 +463,38 @@ static void xen_device_backend_create(XenDevice
> *xendev, Error **errp)
> >          error_propagate(errp, local_err);
> >          error_prepend(errp, "failed to create backend: ");
>=20
> It looks like there is a missing return here.
>=20
> >      }
> > +
> > +    xendev->backend_state_watch =3D
> > +        xen_bus_add_watch(xenbus, xendev->backend_path,
> > +                          "state", xen_device_backend_changed,
> > +                          xendev, &local_err);
> > +    if (local_err) {
> > +        error_propagate(errp, local_err);
> > +        error_prepend(errp, "failed to watch backend state: ");
>=20
> You should return here, as local_err mustn't be reused.
>=20
> > +    }
> > +
> > +    xendev->backend_online_watch =3D
> > +        xen_bus_add_watch(xenbus, xendev->backend_path,
> > +                          "online", xen_device_backend_changed,
> > +                          xendev, &local_err);
> > +    if (local_err) {
> > +        error_propagate(errp, local_err);
> > +        error_prepend(errp, "failed to watch backend online: ");
>=20
> You probably want a return here, in case there is more code added after.

Yes, there should be returns in all three cases above.

>=20
> > +    }
>=20
> Other instances of error_propagate;error_prepend to be replaced by
> error_propagate_prepend.

Yes, will do.

  Paul

>=20
> >  }
> >
>=20
> Thanks,
>=20
> --
> Anthony PERARD

