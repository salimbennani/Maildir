Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:53:54 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id BCCD6580375;
	Thu,  6 Dec 2018 13:30:29 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 13:30:29 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A9QnjbBCfPS4Q1cawLRUlUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7+ps6wAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95RWSJfH42y?=
 =?us-ascii?q?YYgBAe0DMuZWoIbzqEAOrQO8CAS3GO/iySVFimPs0KEmz+gsFxzN0gw6H9IJtX?=
 =?us-ascii?q?TZtMn4NL0UUe+vyKnH0DLDZO5I1Djn8ojIbAouofWMXbJ3bMHe1FcgHB7CgFqO?=
 =?us-ascii?q?rYzlOC6e2+MXvGeH6upvS/mii205pAFrpDig2MMshpPOhoIPxVDJ7CN0y5s7K9?=
 =?us-ascii?q?2/TU50e9+kEJ1IuiGZKYR2WMUiTH9suCogzb0Go5G7cS4Xw5ok3x7Sc+KLf5SM?=
 =?us-ascii?q?7x75SeqcLyl0iGh4dL+8mxq+60mtx+/kWsWp0ltHqjBJnsTPu30PzRDf98aKRu?=
 =?us-ascii?q?Fj8ku/1zuC0R3Y5PteLkAuj6XbLoYswr4umZoXtkTOBjH2mErog6+MbEkk+fan?=
 =?us-ascii?q?6/7hYrr4op+QLYh0ihvxMqg2m8y/B/o3MhQWUmSF5eix0Kfv8VD3TblUlPE6j6?=
 =?us-ascii?q?rUvIzAKckapKO1GwpV3Zwi6xa7ATemytMYnXwfIVJBeRKHiZXpOl7XLPD7E/i/?=
 =?us-ascii?q?mVKsnylvx/zfOb3gDJPNIWbZkLr6Y7Z95FBTyBApwdBc+Z1UELcBL+z3WkPrs9?=
 =?us-ascii?q?zYFBA5PxSuw+n7ENV9yp8eWWWXD6+dMaPSskGH6vggIumRf4IVvDf9K/445//h?=
 =?us-ascii?q?l3M5mFkdfbW30psTcny3AvNmI0CBa3r2ntgBCXsKvhY5TOHyiF2NSz9TZ2qoUK?=
 =?us-ascii?q?I7/D07CJ+mAp3FRoCim7GB2Ca7HptLZmFJEFyMEHHod5maVPcIci6dPshhkjkc?=
 =?us-ascii?q?X7i7V4AhzQ2utBP9y7d/LOrU/TMXuYjg1Nhy4e3TkxYy+CdwD8Sc1WGNUm51kn?=
 =?us-ascii?q?kJRz8wwKBwv0h9xk2f3qh/hvxSDcZT6O9RUgcmKZ7cyPR3BMrpWgLBedeJS0yq?=
 =?us-ascii?q?Qs+8DjEzVd8xx94OY0BgG9StlBzD3iyqA6MLmLyPHpA77qXc333pLcZn13nGzL?=
 =?us-ascii?q?Uhj0UhQsZXNm2pnKh/+xLXB47IiUqZkamqeL8Y3C7M8meD0GWPsFtZUA52TaXK?=
 =?us-ascii?q?Q3QfalHKotT+40PIV6WuBqg/Mgtd1c6CLbNHZcDzglVYWvjvItTebHi3m2erGx?=
 =?us-ascii?q?mIwLSAbI7pe2UY2CXQE0wEkwEV/XabOgkyHCaho2TCDDNwEVLjeV/j8e57qHmj?=
 =?us-ascii?q?VE870xmKb1F917qy4hMamOaTS+0N0b4euCcusTN0HE2j0NLQENeAowthfKNBYd?=
 =?us-ascii?q?Iy+ltH1GTZtxBjMZykNaxtmlkecwFvtUP0yxp3EplAkdQtrH4y0ApyKKeY0FRd?=
 =?us-ascii?q?dzOY3ZH8IKHXJnP1/BC1b67W21fe0NmN96cL6fQ4rUjjvQ6zGkoj9XVnz8da03?=
 =?us-ascii?q?+G6prWCwoSVIr7Ulwr+Bhiu7Hafi496pvO2n1oL6a1vSHN2tIzCOQ+1xavYs1Q?=
 =?us-ascii?q?MKWHFA/1Dc0XHMyuKO0sm1i0YRMIJuFS9KgoP8y4c/uKwrKkPOFlnDi+l2RI/J?=
 =?us-ascii?q?h90l6Q9yp7UuPJ34sFz+uE0QedVjb8jE2ussb4mY1fYTESH2y/yTXrBYJLZ61y?=
 =?us-ascii?q?e5oLBnmqI8Gt2tp+gJvtUWZC9FG/H1MGxNOpeR2KYlzn3A1fyV4YoWa6liu/1T?=
 =?us-ascii?q?B0lS8mrrCe3CDX3+vtbh4HNXNVS2l4ilfsJ5O5j9QbXEiucggomwGp5Uf8x6hH?=
 =?us-ascii?q?uqt/K3PfTltPfyjzN2tiSLe/tqKeY85T75MlqSVWUOWmbVGaULL9uAYa0yX4Em?=
 =?us-ascii?q?taxTA7cSyqu5rjkxx7jmKdMGh8rH7Ddc5swhff4cTWReRN0ToeWCl4lT7XC0C+?=
 =?us-ascii?q?P9az59WUlJTDsuekW2K6TJJTcirrzYKGtCSl421nGhm/n/G1mt36Hgk2yy7719?=
 =?us-ascii?q?92VSrWqBbweJXk16O/Meh/ZElnGEf869ZmGoF5ioYxhIsf2X8AipWX/HoHl3z+?=
 =?us-ascii?q?MdFa2aL4cXoMSiQHw9/T4Aj5xkJjKmiFyJ7+VnWY2sFhfcW1YnsK2iIh6MBHEK?=
 =?us-ascii?q?SU46ZFnSdvolq4sBjeYf5ynjoGzfsu6Xgag/wGuQY3zyWdBKwSEldcPSD2ixuI?=
 =?us-ascii?q?6NW+pr1NZGmzabiwyFZ+nde5AbGHowFcW2z2do0sHCBu9cV/LEzD0Gfo5Y76Yt?=
 =?us-ascii?q?nQYskethmVkxfGkuhUJ4g9lvsMhSp7J239uWcpxPI8jRxrxZu6ppSIK31x/KKl?=
 =?us-ascii?q?BR5VLiH1Z8QW+j33jKdRhMCW3520HpV6GzUGR5/oTfOuEDIPuvXrLQeOEDsgqn?=
 =?us-ascii?q?iFHbrTBxOQ6EBjr3jXCZCkK2mXJGUFzdVlXBSSP1ZQgAcQXDUnhJI5Eh2qydfl?=
 =?us-ascii?q?cEd44DAR+1H5pgFNyuJuKxnwTGPfqB20ZTczTZiVNABW4R1a50fJLcye6fp+Hy?=
 =?us-ascii?q?NC8Z2ksgONMXaXZxhSAWEKR0yEBE3jPr+06tnb6OWYAuu+L/3TYbSBs+BeVvGI?=
 =?us-ascii?q?xY6x3Yti5TqDKsKPPnx6Bf0hxkVDRWx5G9jemzgXSy0XkD/Nb9eGpBim/C17tN?=
 =?us-ascii?q?u/8PPtWALg/oaPD7pSMdNy+xG5m6uDNuiQhDpnJjZczJ8D2XjIyL0H1l4Ily5u?=
 =?us-ascii?q?byWtEagHtSPVTKLfhK5XDx0YayNyLsdI7Lg83g5COcHFkNP1y6V4g+UxC1dEU1?=
 =?us-ascii?q?zhh86oadYLI2G7KFPIGkKLOK6aKj3MxsH9ebm8RqFIjOVIqx2wvi6WHFX+PjuY?=
 =?us-ascii?q?jTnmSRCuPftIjCGaJxFevIC9chBwCWnsVt7maxu7MMNpgj0y27E7mnTKNWsEOz?=
 =?us-ascii?q?hmb0xNtqGQ7T9fgvhnB2xB739lIfOYlCqD8+bYKogZsf1wDyRwluJa5mk6yrRP?=
 =?us-ascii?q?4CFFQvx1hDXdrtp0r166lemPzyJtUABSpTZTmIKLoUJiNL3Z95ZaX3bE+RMN7W?=
 =?us-ascii?q?OIBBULp9tqENvvu69Lx9jLlaLzLipC8t3O8csdAcjUNNyIMH47PRX1Hz7UCVhN?=
 =?us-ascii?q?cTn+FGfQgAR4l/WU/2fd+p07rJfrsJkDULlWUBoyDPxMWWp/G9lXCY1xVzcolv?=
 =?us-ascii?q?awhdQW7H6+q1HdSY1/s5TAHqabCvDiADWUl79JY10P27yuftdbDZHyx0E3Mgoy?=
 =?us-ascii?q?p4/NAUeFGIkV+iA=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BAAACPlAlch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBVAQBAQsBgVUFgQ+BAhQTjHKLMIINFGiNRYsDERgLCAGHVyI3Bg0BAwEBAQE?=
 =?us-ascii?q?BAQIBEwEBAQgNCQgpIwyCNiQBgmIDAwECJAsBDQEBNwEFCQEBGAcfEgNUBgwHB?=
 =?us-ascii?q?YJRSwGBdA0CAwqlT4FsM4J2AQEFhyUIh3CDE4EcF4F/gRGCXYsRiS0KKIFHhV+?=
 =?us-ascii?q?PXAmHBIo3CxiCKY8Nin+Ce4sSgVyBd00wCIMnCYISDBeGIII+hVkmMgEBgQMBA?=
 =?us-ascii?q?Yo6AQE?=
X-IPAS-Result: =?us-ascii?q?A0BAAACPlAlch0O0hNFjHAEBAQQBAQcEAQGBVAQBAQsBgVU?=
 =?us-ascii?q?FgQ+BAhQTjHKLMIINFGiNRYsDERgLCAGHVyI3Bg0BAwEBAQEBAQIBEwEBAQgNC?=
 =?us-ascii?q?QgpIwyCNiQBgmIDAwECJAsBDQEBNwEFCQEBGAcfEgNUBgwHBYJRSwGBdA0CAwq?=
 =?us-ascii?q?lT4FsM4J2AQEFhyUIh3CDE4EcF4F/gRGCXYsRiS0KKIFHhV+PXAmHBIo3CxiCK?=
 =?us-ascii?q?Y8Nin+Ce4sSgVyBd00wCIMnCYISDBeGIII+hVkmMgEBgQMBAYo6AQE?=
X-IronPort-AV: E=Sophos;i="5.56,323,1539673200"; 
   d="scan'208";a="55876322"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 06 Dec 2018 13:30:21 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726645AbeLFV3z (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 6 Dec 2018 16:29:55 -0500
Received: from mail.kernel.org ([198.145.29.99]:48290 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726020AbeLFV3t (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 6 Dec 2018 16:29:49 -0500
Received: from quaco.ghostprotocols.net (179.187.13.223.dynamic.adsl.gvt.net.br [179.187.13.223])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 03B632146D;
        Thu,  6 Dec 2018 21:29:45 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1544131788;
        bh=KR6LWSzjTUL3R6+1lC/pn1xni7cPol8IofGdzXXRamY=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=1rPma1a+q/ry7URZGK5AIil5zgO7CoLBJfus5KG/rBxiJ7aGm5KowyYL4DR9wwInc
         /WBXwfzvumx9KPqqHFXwrysItzFLlNhlTfaESacbZQsrhD/7ZCoTBetP2+yO23Bo5M
         CXbRREjxtdjBTp5ATMi+dNyHi1HpRJouzExWlZKY=
From: Arnaldo Carvalho de Melo <acme@kernel.org>
To: Ingo Molnar <mingo@kernel.org>
Cc: Clark Williams <williams@redhat.com>, linux-kernel@vger.kernel.org,
        linux-perf-users@vger.kernel.org, Jiri Olsa <jolsa@kernel.org>,
        Alexander Shishkin <alexander.shishkin@linux.intel.com>,
        Peter Zijlstra <peterz@infradead.org>,
        Arnaldo Carvalho de Melo <acme@redhat.com>
Subject: [PATCH 50/75] perf top: Add processing thread
Date: Thu,  6 Dec 2018 18:25:37 -0300
Message-Id: <20181206212602.20474-51-acme@kernel.org>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <20181206212602.20474-1-acme@kernel.org>
References: <20181206212602.20474-1-acme@kernel.org>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From: Jiri Olsa <jolsa@kernel.org>

Add a new thread that takes care of the hist creating to alleviate the
main reader thread so it can keep perf mmaps served in time so that we
reduce the possibility of losing events.

The 'perf top' command now spawns 2 extra threads, the data processing
is the following:

  1) The main thread reads the data from mmaps and queues them to
     ordered events object;

  2) The processing threads takes the data from the ordered events
     object and create initial histogram;

  3) The GUI thread periodically sorts the initial histogram and
     presents it.

Passing the data between threads 1 and 2 is done by having 2 ordered
events queues. One is always being stored by thread 1 while the other is
flushed out in thread 2.

Passing the data between threads 2 and 3 stays the same as was initially
for threads 1 and 3.

Acked-by: David S. Miller <davem@davemloft.net>
Acked-by: Namhyung Kim <namhyung@kernel.org>
Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/n/tip-hhf4hllgkmle9wl1aly1jli0@git.kernel.org
Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
---
 tools/perf/builtin-top.c         | 202 +++++++++++++++++++++----------
 tools/perf/util/ordered-events.c |   4 +-
 tools/perf/util/ordered-events.h |   1 +
 tools/perf/util/top.h            |   6 +
 4 files changed, 151 insertions(+), 62 deletions(-)

diff --git a/tools/perf/builtin-top.c b/tools/perf/builtin-top.c
index 9fe835ba0697..75afeae7f04d 100644
--- a/tools/perf/builtin-top.c
+++ b/tools/perf/builtin-top.c
@@ -46,6 +46,7 @@
 #include "arch/common.h"
 
 #include "util/debug.h"
+#include "util/ordered-events.h"
 
 #include <assert.h>
 #include <elf.h>
@@ -830,78 +831,28 @@ static void perf_top__mmap_read_idx(struct perf_top *top, int idx)
 {
 	struct record_opts *opts = &top->record_opts;
 	struct perf_evlist *evlist = top->evlist;
-	struct perf_sample sample;
-	struct perf_evsel *evsel;
 	struct perf_mmap *md;
-	struct perf_session *session = top->session;
 	union perf_event *event;
-	struct machine *machine;
-	int ret;
 
 	md = opts->overwrite ? &evlist->overwrite_mmap[idx] : &evlist->mmap[idx];
 	if (perf_mmap__read_init(md) < 0)
 		return;
 
 	while ((event = perf_mmap__read_event(md)) != NULL) {
-		ret = perf_evlist__parse_sample(evlist, event, &sample);
-		if (ret) {
-			pr_err("Can't parse sample, err = %d\n", ret);
-			goto next_event;
-		}
-
-		evsel = perf_evlist__id2evsel(session->evlist, sample.id);
-		assert(evsel != NULL);
+		u64 timestamp = -1ULL;
+		int ret;
 
-		if (event->header.type == PERF_RECORD_SAMPLE)
-			++top->samples;
-
-		switch (sample.cpumode) {
-		case PERF_RECORD_MISC_USER:
-			++top->us_samples;
-			if (top->hide_user_symbols)
-				goto next_event;
-			machine = &session->machines.host;
-			break;
-		case PERF_RECORD_MISC_KERNEL:
-			++top->kernel_samples;
-			if (top->hide_kernel_symbols)
-				goto next_event;
-			machine = &session->machines.host;
+		ret = perf_evlist__parse_sample_timestamp(evlist, event, &timestamp);
+		if (ret && ret != -1)
 			break;
-		case PERF_RECORD_MISC_GUEST_KERNEL:
-			++top->guest_kernel_samples;
-			machine = perf_session__find_machine(session,
-							     sample.pid);
-			break;
-		case PERF_RECORD_MISC_GUEST_USER:
-			++top->guest_us_samples;
-			/*
-			 * TODO: we don't process guest user from host side
-			 * except simple counting.
-			 */
-			goto next_event;
-		default:
-			if (event->header.type == PERF_RECORD_SAMPLE)
-				goto next_event;
-			machine = &session->machines.host;
-			break;
-		}
 
+		pthread_mutex_lock(&top->qe.lock);
+		ret = ordered_events__queue(top->qe.in, event, timestamp, 0);
+		pthread_mutex_unlock(&top->qe.lock);
 
-		if (event->header.type == PERF_RECORD_SAMPLE) {
-			perf_event__process_sample(&top->tool, event, evsel,
-						   &sample, machine);
-		} else if (event->header.type == PERF_RECORD_LOST) {
-			perf_top__process_lost(top, event, evsel);
-		} else if (event->header.type == PERF_RECORD_LOST_SAMPLES) {
-			perf_top__process_lost_samples(top, event, evsel);
-		} else if (event->header.type < PERF_RECORD_MAX) {
-			hists__inc_nr_events(evsel__hists(evsel), event->header.type);
-			machine__process_event(machine, event, &sample);
-		} else
-			++session->evlist->stats.nr_unknown_events;
-next_event:
 		perf_mmap__consume(md);
+		if (ret)
+			break;
 	}
 
 	perf_mmap__read_done(md);
@@ -1084,6 +1035,125 @@ static int callchain_param__setup_sample_type(struct callchain_param *callchain)
 	return 0;
 }
 
+static struct ordered_events *rotate_queues(struct perf_top *top)
+{
+	struct ordered_events *in = top->qe.in;
+
+	if (top->qe.in == &top->qe.data[1])
+		top->qe.in = &top->qe.data[0];
+	else
+		top->qe.in = &top->qe.data[1];
+
+	return in;
+}
+
+static void *process_thread(void *arg)
+{
+	struct perf_top *top = arg;
+
+	while (!done) {
+		struct ordered_events *out, *in = top->qe.in;
+
+		if (!in->nr_events) {
+			usleep(100);
+			continue;
+		}
+
+		pthread_mutex_lock(&top->qe.lock);
+		out = rotate_queues(top);
+		pthread_mutex_unlock(&top->qe.lock);
+
+		if (ordered_events__flush(out, OE_FLUSH__TOP))
+			pr_err("failed to process events\n");
+	}
+
+	return NULL;
+}
+
+static int deliver_event(struct ordered_events *qe,
+			 struct ordered_event *qevent)
+{
+	struct perf_top *top = qe->data;
+	struct perf_evlist *evlist = top->evlist;
+	struct perf_session *session = top->session;
+	union perf_event *event = qevent->event;
+	struct perf_sample sample;
+	struct perf_evsel *evsel;
+	struct machine *machine;
+	int ret = -1;
+
+	ret = perf_evlist__parse_sample(evlist, event, &sample);
+	if (ret) {
+		pr_err("Can't parse sample, err = %d\n", ret);
+		goto next_event;
+	}
+
+	evsel = perf_evlist__id2evsel(session->evlist, sample.id);
+	assert(evsel != NULL);
+
+	if (event->header.type == PERF_RECORD_SAMPLE)
+		++top->samples;
+
+	switch (sample.cpumode) {
+	case PERF_RECORD_MISC_USER:
+		++top->us_samples;
+		if (top->hide_user_symbols)
+			goto next_event;
+		machine = &session->machines.host;
+		break;
+	case PERF_RECORD_MISC_KERNEL:
+		++top->kernel_samples;
+		if (top->hide_kernel_symbols)
+			goto next_event;
+		machine = &session->machines.host;
+		break;
+	case PERF_RECORD_MISC_GUEST_KERNEL:
+		++top->guest_kernel_samples;
+		machine = perf_session__find_machine(session,
+						     sample.pid);
+		break;
+	case PERF_RECORD_MISC_GUEST_USER:
+		++top->guest_us_samples;
+		/*
+		 * TODO: we don't process guest user from host side
+		 * except simple counting.
+		 */
+		goto next_event;
+	default:
+		if (event->header.type == PERF_RECORD_SAMPLE)
+			goto next_event;
+		machine = &session->machines.host;
+		break;
+	}
+
+	if (event->header.type == PERF_RECORD_SAMPLE) {
+		perf_event__process_sample(&top->tool, event, evsel,
+					   &sample, machine);
+	} else if (event->header.type == PERF_RECORD_LOST) {
+		perf_top__process_lost(top, event, evsel);
+	} else if (event->header.type == PERF_RECORD_LOST_SAMPLES) {
+		perf_top__process_lost_samples(top, event, evsel);
+	} else if (event->header.type < PERF_RECORD_MAX) {
+		hists__inc_nr_events(evsel__hists(evsel), event->header.type);
+		machine__process_event(machine, event, &sample);
+	} else
+		++session->evlist->stats.nr_unknown_events;
+
+	ret = 0;
+next_event:
+	return ret;
+}
+
+static void init_process_thread(struct perf_top *top)
+{
+	ordered_events__init(&top->qe.data[0], deliver_event, top);
+	ordered_events__init(&top->qe.data[1], deliver_event, top);
+	ordered_events__set_copy_on_queue(&top->qe.data[0], true);
+	ordered_events__set_copy_on_queue(&top->qe.data[1], true);
+	top->qe.in = &top->qe.data[0];
+	pthread_mutex_init(&top->qe.lock, NULL);
+}
+
 static int __cmd_top(struct perf_top *top)
 {
 	char msg[512];
@@ -1091,7 +1161,7 @@ static int __cmd_top(struct perf_top *top)
 	struct perf_evsel_config_term *err_term;
 	struct perf_evlist *evlist = top->evlist;
 	struct record_opts *opts = &top->record_opts;
-	pthread_t thread;
+	pthread_t thread, thread_process;
 	int ret;
 
 	top->session = perf_session__new(NULL, false, NULL);
@@ -1115,6 +1185,8 @@ static int __cmd_top(struct perf_top *top)
 	if (top->nr_threads_synthesize > 1)
 		perf_set_multithreaded();
 
+	init_process_thread(top);
+
 	machine__synthesize_threads(&top->session->machines.host, &opts->target,
 				    top->evlist->threads, false,
 				    top->nr_threads_synthesize);
@@ -1155,10 +1227,15 @@ static int __cmd_top(struct perf_top *top)
                 perf_evlist__enable(top->evlist);
 
 	ret = -1;
+	if (pthread_create(&thread_process, NULL, process_thread, top)) {
+		ui__error("Could not create process thread.\n");
+		goto out_delete;
+	}
+
 	if (pthread_create(&thread, NULL, (use_browser > 0 ? display_thread_tui :
 							    display_thread), top)) {
 		ui__error("Could not create display thread.\n");
-		goto out_delete;
+		goto out_join_thread;
 	}
 
 	if (top->realtime_prio) {
@@ -1193,6 +1270,8 @@ static int __cmd_top(struct perf_top *top)
 	ret = 0;
 out_join:
 	pthread_join(thread, NULL);
+out_join_thread:
+	pthread_join(thread_process, NULL);
 out_delete:
 	perf_session__delete(top->session);
 	top->session = NULL;
@@ -1284,6 +1363,7 @@ int cmd_top(int argc, const char **argv)
 			 * stays in overwrite mode. -acme
 			 * */
 			.overwrite	= 0,
+			.sample_time	= true,
 		},
 		.max_stack	     = sysctl__max_stack(),
 		.annotation_opts     = annotation__default_options,
diff --git a/tools/perf/util/ordered-events.c b/tools/perf/util/ordered-events.c
index d053aa0a7582..c5412db05683 100644
--- a/tools/perf/util/ordered-events.c
+++ b/tools/perf/util/ordered-events.c
@@ -279,8 +279,10 @@ int ordered_events__flush(struct ordered_events *oe, enum oe_flush how)
 
 	switch (how) {
 	case OE_FLUSH__FINAL:
-		oe->next_flush = ULLONG_MAX;
 		show_progress = true;
+		__fallthrough;
+	case OE_FLUSH__TOP:
+		oe->next_flush = ULLONG_MAX;
 		break;
 
 	case OE_FLUSH__HALF:
diff --git a/tools/perf/util/ordered-events.h b/tools/perf/util/ordered-events.h
index 507b4e4df79e..0c6e26aec0e3 100644
--- a/tools/perf/util/ordered-events.h
+++ b/tools/perf/util/ordered-events.h
@@ -18,6 +18,7 @@ enum oe_flush {
 	OE_FLUSH__FINAL,
 	OE_FLUSH__ROUND,
 	OE_FLUSH__HALF,
+	OE_FLUSH__TOP,
 };
 
 struct ordered_events;
diff --git a/tools/perf/util/top.h b/tools/perf/util/top.h
index 1fbcbd79720a..5f503293cfd8 100644
--- a/tools/perf/util/top.h
+++ b/tools/perf/util/top.h
@@ -40,6 +40,12 @@ struct perf_top {
 	const char	   *sym_filter;
 	float		   min_percent;
 	unsigned int	   nr_threads_synthesize;
+
+	struct {
+		struct ordered_events	*in;
+		struct ordered_events	 data[2];
+		pthread_mutex_t		 lock;
+	} qe;
 };
 
 #define CONSOLE_CLEAR "[H[2J"
-- 
2.19.2

