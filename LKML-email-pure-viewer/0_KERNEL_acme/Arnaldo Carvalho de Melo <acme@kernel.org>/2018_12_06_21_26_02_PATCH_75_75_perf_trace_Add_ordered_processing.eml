Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:54:04 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 9D838580375;
	Thu,  6 Dec 2018 13:32:38 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 13:32:38 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A+sQPyBOBw1fi022QF98l6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KPn4p8bcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRsZfWTJcDI2y?=
 =?us-ascii?q?bIUBCOgOPehXoIbhqFUOtgO+CAu3CePzyTJFnGP60Lcm3+kjFwzNwQwuH8gJsH?=
 =?us-ascii?q?TRtNj4KL0SUeavw6nM0DrDaO5d1Cnn54jSbBAuu/WMXbJ3ccHM1EYgCR7OgFKO?=
 =?us-ascii?q?pozhODOey+MAvHKH4OplS+2ikG0npB9rojip2MgsjpPFhoUPylDL7Ch0xps+K9?=
 =?us-ascii?q?O/SE5+e9GkEZ1QujmZN4RoWMMiRX9nuCIgxr0Bo567czAGyJM5yBLFdvOIaZSI?=
 =?us-ascii?q?7QjlWe2MIjl4nGpodKyjixu260Ss1+PxWteu3FpXrSdJjsPAu3EP2hDL98SKSP?=
 =?us-ascii?q?9w8l281TuM1Q3f8PxILE4umabFNZIszLg9nYcJv0vZBC/5gkD2gbeWdko6/uio?=
 =?us-ascii?q?7PzqYqvpppCCLY94kAL+Pbo0msy5H+s4NhICX2+B+eSzzLHj/Ev5T6tWjvAujK?=
 =?us-ascii?q?XVrJTXKd4GqqO3HQNZyJsv5hWjAzu80dkVn2ELLFdfdxKGi4jpNUvOIPf9Dfqn?=
 =?us-ascii?q?h1SskTFrx+3JP7H4AZXCMGLDkLH/crZ58kJczwQyzdZB6JJOEbwBPv3zVVHrtN?=
 =?us-ascii?q?DCDR82LRa0w+D5B9V5zI8eXniPAqCBPKPIrVCI/v4vI/WLZIINvDb9Kvsl6OD0?=
 =?us-ascii?q?gX42hF8QZq2p3ZoRaHClEfVqOUSZYXzwgtgfFWcGpBYxTOvviFeaSz5ce26yX7?=
 =?us-ascii?q?4g5jE8EI+mDZ3MRoGxgLOb2ye3BJ1WZn1cBVCKHnflbIGEW/YKaCKPLc5tiD0E?=
 =?us-ascii?q?Vb69S4A/0RGirhP1y71iLuDM4C0XqYrj1MRp5+3UjRwy9zt0ANqH32GOSGF0mG?=
 =?us-ascii?q?UIRzgt0aB7oEx9zEqD0Kdij/xZE9xT++1GUgMgOZHAyOx6Dsj4WhjdcdeRVFam?=
 =?us-ascii?q?XtKmDCkrQdIqw98OZEV9F8+4jh/Z3SqnGLsVl72NBJwp/aPQxXnxJ8Bhy3nY0K?=
 =?us-ascii?q?ktlUUpQsxKNWe+nK5w6xDTB5LVk0Wej6uqdr4T3CjX+GeHzGqBpkdYUAFrXKXB?=
 =?us-ascii?q?XHAfYFbWrNvj6kPDSb+uFaooMg9bxcGeLatKb8XjjU9aS/f7JNTef2Wxln+tCh?=
 =?us-ascii?q?mS2LODcpDme2UH0yXbE0gLjQYT8XGCNQg9Ayehp3nTDDhvFVLpfkPt/vNyqHK9?=
 =?us-ascii?q?Tk8o0Q6Ka1dt2Kay+h4QnfacUe8c3qoYuCc9rDV5BEuy0MjIC9WevQZhfL9TYd?=
 =?us-ascii?q?Um4FhZ02LUrAh9Pp2mL6B/iV8SaQV3v0Xy1xppDoVMi9QlrHQvzABqM6KXzEtB?=
 =?us-ascii?q?dy+E3ZD3IrDXNmjy/BWoa67K2lHf0Mya+rsV5PQ/sVXjuACpFkwt83h819lV0n?=
 =?us-ascii?q?2c5ojFDQYIUJLxVFo3+AZ+p73AfiY94IbU32V2Maaoqj/Cx84pBOw9xxm6e9dQ?=
 =?us-ascii?q?LqyFGxHyEsEAHMeuNfEllEKvbhIHO+BS6rU5P8end/uAxa6qM/xsnDOgjWRb/o?=
 =?us-ascii?q?991liA+DZ7Su7Nx5wF2e2X3hObVzfgi1esqsD2mZ1eaT4OBGa+yCjkC5RXZq19?=
 =?us-ascii?q?ZosLDWauI8uqxtRxnZLtWnhY9EK9CFMCwsOmZR2Sb1nl1w1KyUsXuWCnmTe/zz?=
 =?us-ascii?q?FsiTEpr7aQ0zbUw+v/cxoLIGhLS3d4jVftOIS7k8oVXEy1YAc3jhul4kD6yrNf?=
 =?us-ascii?q?pKR+KWnTXEhJczL3L2FkTqu/qL6Cb9RT55MvtCVdSP68bkyCSr7hvxsa1DvuHm?=
 =?us-ascii?q?tfxDwhdzCmoI75nwF8iG+GKHZzrXzZedx/xBvF5dzcQ+JR0SQCRCVilTbXAV28?=
 =?us-ascii?q?NcGz/dqIj5fDrvy+V2W5W51Raybr14CAtCi85WFwGh2whfOzmt7mEQg8zyD70c?=
 =?us-ascii?q?JnVSHJrBb6f4nq2L62MeNhfkl0GlD879B2FZ15kos1nJsQw2QVho2J/Xoblmf+?=
 =?us-ascii?q?KdVa1rj5bHYXRz4LwtjV7RPh2E1iKHKJ2o34Wm+cwstne9m1fGcW1jgh4MBNDa?=
 =?us-ascii?q?ee9KZEkjdtolqksQLRZuBwnjQHxvsv8nIag/wJtxArziWSGb0SGUhYPSrxlxWH?=
 =?us-ascii?q?9dy+raNXZHqxfri0zkZxgdehDLSaqAFGRHn5YosiHTN37shnNVLM0X7z5Zv+dN?=
 =?us-ascii?q?jec90TrQGUnAnaj+dONp0xjPUKiDFjOWL8u30l1uE6gQZv3ZG8oIiINWFt8Lil?=
 =?us-ascii?q?DR5fMz3/f9kT9S31jaZCgsaW2JiiHolmGjUORpfpTOinEDQPtfT8LAaOESYxqn?=
 =?us-ascii?q?OaGbrZAA+e511qr3PJE5C3KX6XIGMVwsllRBmYPEZfmhwbXC0mnp4lEQCn3Nfu?=
 =?us-ascii?q?f11+5jAV+170sB9Myv9zOhn7U2ffohqoazguRJieKhpW8h9N50PPPcOC6eJzGj?=
 =?us-ascii?q?lS/oe9owyVNmybewNIAHkLWkOeAlDsIKKu6cPc8+SCBeq+MvjOYaiIqeNETPeF?=
 =?us-ascii?q?3pav0opg/zaROcSDJHhiD/sn2kVdWXB1AdjWmzIKSyYPjSLCc9abpAug+i1wts?=
 =?us-ascii?q?2+8PPrWB/25YuSEbRSN89j+wuxgaeFOO6dnyJ5KTde1pMRyn7E0rkf3FgOiy5w?=
 =?us-ascii?q?czmhC6gPtSnITKjIgK9YEwYbaz9vNMtP96883hdCOc/YitP21750lP01C01CVV?=
 =?us-ascii?q?zuhM6pf9EKI3qmOVPDBUaLMqmGJDLRz8H2Z6O8VaNfjOFOuxKsvjabFlfpPi6f?=
 =?us-ascii?q?mDnxSxCvLeZMgTmBMxxDo469aAhiCGj5QNLiax22K9t3jTwwwb0piXLGL28cMT?=
 =?us-ascii?q?5gc0xTqr2c9z9XgvJ6G2ZZ9HpqMfGEmzqF7+nfMpsWrfprAiFum+1G+ng117tV?=
 =?us-ascii?q?4z9CRPFunCvSr9huo0ypk+WVyzpnVgZOpShPhI6RoUpiPqDZ/IFaWXnY5BIN8X?=
 =?us-ascii?q?mQCxMSqtplENLvvaVQytnJlK3rKTZC88jb/c0TB8XPLMKHMXwhMQfmGTLODQsF?=
 =?us-ascii?q?SyKrOn/bh0BHjP6S8XiV/dAGrc3NnpUJAppcUFo8DLtOD0VjE9sqI5ptWD4g17?=
 =?us-ascii?q?mBg5hby2C5qUz4XsNTupzAHtmbG+vmLDaexbVJLz4FxbSweY0YM4DT2EF4bFR+?=
 =?us-ascii?q?2oPQFByDDph2viR9Y1ps8w12+39kQzh2ghq9Zw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AYAABVlAlch0O0hNFjHgEGBwaBUQkLA?=
 =?us-ascii?q?YFagQ+BAhQTg3qIeIswgg0UiH6OPIFzFBgLCAGHVyI0CQ0BAwEBAQEBAQIBEwE?=
 =?us-ascii?q?BAQgNCQgpIwyCNiQBgmIDAwECIAQLAQ0BATcBBQkBARgHBQIYDgICAx42BgwHB?=
 =?us-ascii?q?YJRSwGBaQMIDQIDCqVRcHwzgnYBAQWBMAGDUw2CFAiBC4ZlgxOBHBeBf4ERhWm?=
 =?us-ascii?q?Bc4M7gleLJpUNLgmHBIcUgyMLGIIpjw2Kf4J7gQ6KBIFGgg1NMAiDJwkKggiJA?=
 =?us-ascii?q?YVZJjIBAYEDAQGHbYJNAQE?=
X-IPAS-Result: =?us-ascii?q?A0AYAABVlAlch0O0hNFjHgEGBwaBUQkLAYFagQ+BAhQTg3q?=
 =?us-ascii?q?IeIswgg0UiH6OPIFzFBgLCAGHVyI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCN?=
 =?us-ascii?q?iQBgmIDAwECIAQLAQ0BATcBBQkBARgHBQIYDgICAx42BgwHBYJRSwGBaQMIDQI?=
 =?us-ascii?q?DCqVRcHwzgnYBAQWBMAGDUw2CFAiBC4ZlgxOBHBeBf4ERhWmBc4M7gleLJpUNL?=
 =?us-ascii?q?gmHBIcUgyMLGIIpjw2Kf4J7gQ6KBIFGgg1NMAiDJwkKggiJAYVZJjIBAYEDAQG?=
 =?us-ascii?q?HbYJNAQE?=
X-IronPort-AV: E=Sophos;i="5.56,323,1539673200"; 
   d="scan'208";a="43923394"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 06 Dec 2018 13:32:37 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726598AbeLFVbt (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 6 Dec 2018 16:31:49 -0500
Received: from mail.kernel.org ([198.145.29.99]:49824 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726091AbeLFVb2 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 6 Dec 2018 16:31:28 -0500
Received: from quaco.ghostprotocols.net (179.187.13.223.dynamic.adsl.gvt.net.br [179.187.13.223])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id C008D208E7;
        Thu,  6 Dec 2018 21:31:22 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1544131887;
        bh=CLRbegxky/SkW/b6dC4fL21bhh2tYWjMPESWWnCefLM=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=tUrDFS7AmMP2UWUomauqeDTsuQTEntdAs6cr3zzYM5RIHDmstxU9GDqt4wtksASkO
         s54uGuVVOssvvhXg6QiORj1SH7nPOPWT3XRXI7Ko+ZwY2Uz3m9uRAtcCC5Kf1R+8w5
         R5GCEVzBxa6nm8tMR+IBvccwK7EmLrZIGMBrBwAs=
From: Arnaldo Carvalho de Melo <acme@kernel.org>
To: Ingo Molnar <mingo@kernel.org>
Cc: Clark Williams <williams@redhat.com>, linux-kernel@vger.kernel.org,
        linux-perf-users@vger.kernel.org, Jiri Olsa <jolsa@kernel.org>,
        Alexander Shishkin <alexander.shishkin@linux.intel.com>,
        Dmitry Levin <ldv@altlinux.org>,
        Eugene Syromiatnikov <esyr@redhat.com>,
        Frederic Weisbecker <fweisbec@gmail.com>,
        =?UTF-8?q?Luis=20Cl=C3=A1udio=20Gon=C3=A7alves?= 
        <lclaudio@uudg.org>, Namhyung Kim <namhyung@kernel.org>,
        Peter Zijlstra <peterz@infradead.org>,
        Steven Rostedt <rostedt@goodmis.org>,
        Thomas Gleixner <tglx@linutronix.de>,
        Arnaldo Carvalho de Melo <acme@redhat.com>
Subject: [PATCH 75/75] perf trace: Add ordered processing
Date: Thu,  6 Dec 2018 18:26:02 -0300
Message-Id: <20181206212602.20474-76-acme@kernel.org>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <20181206212602.20474-1-acme@kernel.org>
References: <20181206212602.20474-1-acme@kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From: Jiri Olsa <jolsa@kernel.org>

Sort events to provide the precise outcome of ordered events, just like
is done with 'perf report' and 'perf top'.

Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Cc: Dmitry Levin <ldv@altlinux.org>
Cc: Eugene Syromiatnikov <esyr@redhat.com>
Cc: Frederic Weisbecker <fweisbec@gmail.com>
Cc: Luis Cláudio Gonçalves <lclaudio@uudg.org>
Cc: Namhyung Kim <namhyung@kernel.org>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Steven Rostedt (VMware) <rostedt@goodmis.org>
Cc: Thomas Gleixner <tglx@linutronix.de>
Link: http://lkml.kernel.org/r/20181205160509.1168-9-jolsa@kernel.org
[ split from a larger patch, added trace__ prefixes to new 'struct trace' methods ]
Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
---
 tools/perf/builtin-trace.c | 52 +++++++++++++++++++++++++++++++++++++-
 1 file changed, 51 insertions(+), 1 deletion(-)

diff --git a/tools/perf/builtin-trace.c b/tools/perf/builtin-trace.c
index 3b6b1fecf2bb..366ec3c8f580 100644
--- a/tools/perf/builtin-trace.c
+++ b/tools/perf/builtin-trace.c
@@ -127,6 +127,10 @@ struct trace {
 	bool			force;
 	bool			vfs_getname;
 	int			trace_pgfaults;
+	struct {
+		struct ordered_events	data;
+		u64			last;
+	} oe;
 };
 
 struct tp_field {
@@ -2652,6 +2656,42 @@ static int trace__deliver_event(struct trace *trace, union perf_event *event)
 	return 0;
 }
 
+static int trace__flush_ordered_events(struct trace *trace)
+{
+	u64 first = ordered_events__first_time(&trace->oe.data);
+	u64 flush = trace->oe.last - NSEC_PER_SEC;
+
+	/* Is there some thing to flush.. */
+	if (first && first < flush)
+		return ordered_events__flush_time(&trace->oe.data, flush);
+
+	return 0;
+}
+
+static int trace__deliver_ordered_event(struct trace *trace, union perf_event *event)
+{
+	struct perf_evlist *evlist = trace->evlist;
+	int err;
+
+	err = perf_evlist__parse_sample_timestamp(evlist, event, &trace->oe.last);
+	if (err && err != -1)
+		return err;
+
+	err = ordered_events__queue(&trace->oe.data, event, trace->oe.last, 0);
+	if (err)
+		return err;
+
+	return trace__flush_ordered_events(trace);
+}
+
+static int ordered_events__deliver_event(struct ordered_events *oe,
+					 struct ordered_event *event)
+{
+	struct trace *trace = container_of(oe, struct trace, oe.data);
+
+	return trace__deliver_event(trace, event->event);
+}
+
 static int trace__run(struct trace *trace, int argc, const char **argv)
 {
 	struct perf_evlist *evlist = trace->evlist;
@@ -2819,7 +2859,9 @@ static int trace__run(struct trace *trace, int argc, const char **argv)
 		while ((event = perf_mmap__read_event(md)) != NULL) {
 			++trace->nr_events;
 
-			trace__deliver_event(trace, event);
+			err = trace__deliver_ordered_event(trace, event);
+			if (err)
+				goto out_disable;
 
 			perf_mmap__consume(md);
 
@@ -2842,6 +2884,9 @@ static int trace__run(struct trace *trace, int argc, const char **argv)
 				draining = true;
 
 			goto again;
+		} else {
+			if (trace__flush_ordered_events(trace))
+				goto out_disable;
 		}
 	} else {
 		goto again;
@@ -2852,6 +2897,8 @@ static int trace__run(struct trace *trace, int argc, const char **argv)
 
 	perf_evlist__disable(evlist);
 
+	ordered_events__flush(&trace->oe.data, OE_FLUSH__FINAL);
+
 	if (!err) {
 		if (trace->summary)
 			trace__fprintf_thread_summary(trace, trace->output);
@@ -3562,6 +3609,9 @@ int cmd_trace(int argc, const char **argv)
 		}
 	}
 
+	ordered_events__init(&trace.oe.data, ordered_events__deliver_event, &trace);
+	ordered_events__set_copy_on_queue(&trace.oe.data, true);
+
 	/*
 	 * If we are augmenting syscalls, then combine what we put in the
 	 * __augmented_syscalls__ BPF map with what is in the
-- 
2.19.2

