Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:24:27 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 01857580442;
	Fri, 30 Nov 2018 15:41:05 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga003-1.jf.intel.com with ESMTP; 30 Nov 2018 15:41:04 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AHHCEMBSJTZUfBlTcKb0b0+ChEtpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64YBOEt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZDI2y?=
 =?us-ascii?q?b5UBAfcCM+ZWoIbyu0YBohmwCgm3HOPiyCRFhmPq0aEmz+gtDRvL0BImEtkTsH?=
 =?us-ascii?q?rUttL1NKIKXO6z0anIzC7DZO5I1Df98ofIdwsuru+WXbJ0a8XRyE8vHB7Cg1WV?=
 =?us-ascii?q?tYPlMCmV1uMDs2WA7OpvS/ivi2g5pAF1uDSvwd0siobQi48T11vK9j15zZ4rKd?=
 =?us-ascii?q?GkTEN3e8OoHZVOuy2AKod7Qd8uT3tptSs40rELu5C2cDIIxZg63RLSZOCLf5KL?=
 =?us-ascii?q?7x/jUuuaPC12i2h/eL2lgha/6UigxfP4VsmzyFtKsCVFncfWtnwX1Bzc9NKHSv?=
 =?us-ascii?q?1j8UelwzqP0BrT6u5cLUA1k6rUNYIhz6YumpYPtUnPBDL6lUvogKOMa0kp+fSk?=
 =?us-ascii?q?5/7mb7jkvpOcMpV7igD6MqQggMy/BuE4PxAKX2ia/+S8ybLi8VT6QLpUlP02lL?=
 =?us-ascii?q?fWsJTDKcQcqK+5BRFa0pw45hahADepzs4YkWMELF1bYhKHiZbmO1XULPD/F/e/?=
 =?us-ascii?q?jEygkC13yPDeIr3hHpLNI2DHkLfgfrZy9VRQyQUuzd1E45JUC7cBIO/8W0Prtd?=
 =?us-ascii?q?zYCAM5PBKww+r9FNp90YYeU3qVAqCFKKPSrUOI5uU3LumMfoAVuSr9JOIi5/L0?=
 =?us-ascii?q?jX85hEUSfa+m3ZYMbHC4H/JmI1iWYHb2g9cBF3sKsRQ6TODwlFKCVjtTbW6oX6?=
 =?us-ascii?q?0g/jE7FJ6mDYDbS4Cvh7yOwj23Hp5RZmBADFCMFmzld4GFW/cKdSKTLdVtkj0C?=
 =?us-ascii?q?Vbi9VYAh0QuiuxP9y7piNuDU4DEXtYr/1Nhp4O3ejQs99Sd0D8Sa0GGBVXt0kX?=
 =?us-ascii?q?kKRzIt2KB/oEp9ykqM0KRigvxYE8BT6O1NUgsgKZHcyOl6AcjoWg3dZteJVEqm?=
 =?us-ascii?q?QtK+DDEyVN0xxcUCY0J8G9q4iBDD0DGnA7sUl7yNGZw1/bjQ33n3J8Zh1XnG0L?=
 =?us-ascii?q?MtgEUhQstKLWemnLJw9xDPB47VlEWUj7uler4C3CHT7muDzXCBvEdDUAFuV6XJ?=
 =?us-ascii?q?WnQfZkjTrdT9/U7CS76uCbI6MgpO08KCK61KasH3glVCXvvsJNPeY2epkWeqGR?=
 =?us-ascii?q?mI3q+MbJbte2gFwSrSElYEnB4J8XaGLwc+ADyhrHzYDDF1EVLvYkXs8fRxqX+h?=
 =?us-ascii?q?T080yR2KYFNl17av5hEVgvmcQesJ3r0YoCchtyl0HFGl0tLKCtqAog1hfLlcYd?=
 =?us-ascii?q?I9+ltHyXjVtwtnPpykLqBigFEefh9zv0Pv0RV3F4pBndIrrHMs0Ap9N6aY3Eld?=
 =?us-ascii?q?eDOf2JD6IqfXJXXq/BCzd67W3UnT38yS+qgR5/U3tVXisBuyGUo/7npoyd9V03?=
 =?us-ascii?q?ib5pXUFwcSVZPxUkAq9xl1vb3aYy8955/K2n1oK6W7rjjC29cxDus/1hmgZ8tf?=
 =?us-ascii?q?ML+DFALqE8waGtKiJ/Awl1mobhILJuZS9KEvMsOidvuG3rOrPel6kDKni2RH/J?=
 =?us-ascii?q?5y0kaW+yVgTe7I2o4Pw+uE0QufSzf8kFChv9jtmYBFeT4dBHC/xjXjBIJLYK19?=
 =?us-ascii?q?Y5wLCWa3L8Kr3Np+g4PiVGBC9F6kAVMLw8upeRuUb1zg0gxcz0UXoXq7mSSmyz?=
 =?us-ascii?q?x4iS0mrq2a3CbW2eTtaAIHOnJXRGlllVrtIYm0g8oaXUSydAgpiR2l6F3+x6ha?=
 =?us-ascii?q?oqR/MmbSTV1JfyjwM2FtTK+wuqCebM5I7ZMiqT9XX/ikYVCGVr79pAMX0yH5EG?=
 =?us-ascii?q?tExzA7dDaqto/inxNgi2KdL3dzrHzHdsF23hrf4N3cRfhM3jsJXiV4iD/XBkSi?=
 =?us-ascii?q?MNmt59mbi5DDsuWmXWK7SpJTaTXrzZ+HtCaj5WxlGxq/k+qxmt3mFwg3yiv719?=
 =?us-ascii?q?hsVSXVoxfweIjr16KmMe15eklkHkPz681/GotmiIs/mIkQ2WQGhpWS5XcHkn38?=
 =?us-ascii?q?MdRB1aL+cXoCXzgLw9HO7Qjh2U1jKG+Jxo3jWnWcxMthe8e1YmcM1i0h6MBKDb?=
 =?us-ascii?q?+e7KZYkittvlq4sQXRbOB4njccyvsh8mQWgu8Xtwo20iWSHKoSElJGMiz2mBSF?=
 =?us-ascii?q?9NS+rKRRZGayfrm8zkt+nda9DL6cpgFQQmr2epAnHSVo9MVwLErM0GHv6oHjYN?=
 =?us-ascii?q?TQcdUTthiOnxbBledVLo8xluERhSpmIm/9uXwly+gmjR1hx526vY6HK3lz86K9?=
 =?us-ascii?q?GBJXKjr1Z8YL8DH3kalehtqW35yoHph5AToERpzoTfa1ED4IsfTnKh2DEDk9qn?=
 =?us-ascii?q?edBLreEhWT6EZgr3LTDZ+rM2ubK2UezdVnXBOdPlBQgBgIXDUmmZ40DgKqy9bk?=
 =?us-ascii?q?cEhn/TAd/EL4pgFPyuJ1NBn/T2Hfqx2zajovTJifLRxW7hxN5kvPMMye6P5zED?=
 =?us-ascii?q?9c/pG7sAONLWmbbRxSDW4VQkyEG0zjPr626NjA9OiYG/O+L+bUbrWIs+BeTPCI?=
 =?us-ascii?q?xZSg0oZ9+zaMN8OPPmRtDvEh20pDW2x5FNrdmzkVVyMXkCfNZdaBpBig4i13st?=
 =?us-ascii?q?y/8PPzVQLv+4SPCrhSMdZu+xysgqeDLemQhClnJjZCy5MM3mTFyLwe3F4UliFv?=
 =?us-ascii?q?eCOhEbUGtS7RUq3QnrVbAAIcayN2LMFI9b4z3hFROc7HjdP4zqR3juMuBFdfS1?=
 =?us-ascii?q?PgmtulZcgLI2ymMFPHBUCLNKmJJDHRwsH3Z7+8RqNUjOlOqxKwvjObGVf5Pjuf?=
 =?us-ascii?q?jznpSwyvMeZUgSGHPRxevZuxfQp3BWf/TNLpdBu7PcRzjT03x700m3zLOXQdMT?=
 =?us-ascii?q?h6b0NCsLmQ4TlEjfV4HmxL9mBlIvWcmyaF8+nYLY4bsPtxDSRykuJa4XI6xKNU?=
 =?us-ascii?q?7SFEXvN1niTSo8Vqo1GnlOmP1zVmXABPqjZNmIKEo0FiNb/F+ZlHXHaXtC4KuE?=
 =?us-ascii?q?yUBgQDoddoEJXDprFbyZCbnab+OD5E/9/Ou8taC9XFI8GvNHsnLAqvGTjIAQ9D?=
 =?us-ascii?q?RjmuYzLxnUtYxdWP92bdhZgzr5Lhgp4HS7kTAFk+GekdBGxmEcYELZMxWSkrx+?=
 =?us-ascii?q?3IxPUU7Gaz+UGCDP5RuYrKA7fLWa3i?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAAAwyQFch0O0hNFjGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBgVqCESeMEV+LfgaBNRSJC44pgXMSAQEYEwG?=
 =?us-ascii?q?EQIM2IjQJDQEDAQEBAQEBAgETAQEBCA0JCCkvgjYkAYJiAQIDAQIkEz8GCQEBC?=
 =?us-ascii?q?hIGCRoLAwwFIAEFAQ4UEwWCUUuBdQ0FmxM8jAkziiwSjAgXeIEHhCOFLYMJgiY?=
 =?us-ascii?q?ChmqJPJAPCYougx+DXyOBW4d+GIcuhEWFOY44BgIJBw8hgSWCDX0IgyeCJxcSj?=
 =?us-ascii?q?iwfMgEBgQMBAY1cAQE?=
X-IPAS-Result: =?us-ascii?q?A0ABAAAwyQFch0O0hNFjGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBgVqCESeMEV+LfgaBNRSJC44pgXMSAQEYEwGEQIM2IjQJDQEDA?=
 =?us-ascii?q?QEBAQEBAgETAQEBCA0JCCkvgjYkAYJiAQIDAQIkEz8GCQEBChIGCRoLAwwFIAE?=
 =?us-ascii?q?FAQ4UEwWCUUuBdQ0FmxM8jAkziiwSjAgXeIEHhCOFLYMJgiYChmqJPJAPCYoug?=
 =?us-ascii?q?x+DXyOBW4d+GIcuhEWFOY44BgIJBw8hgSWCDX0IgyeCJxcSjiwfMgEBgQMBAY1?=
 =?us-ascii?q?cAQE?=
X-IronPort-AV: E=Sophos;i="5.56,300,1539673200"; 
   d="scan'208";a="55627351"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 30 Nov 2018 15:40:52 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726808AbeLAKvl (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sat, 1 Dec 2018 05:51:41 -0500
Received: from mail-pl1-f196.google.com ([209.85.214.196]:43599 "EHLO
        mail-pl1-f196.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726013AbeLAKvk (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sat, 1 Dec 2018 05:51:40 -0500
Received: by mail-pl1-f196.google.com with SMTP id gn14so3519754plb.10;
        Fri, 30 Nov 2018 15:40:42 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:message-id:references
         :mime-version:content-disposition:in-reply-to:user-agent;
        bh=xhtcqDUtZnEt1PTKMMrCEMSGSWbtqD1Y6fazSQf4ytU=;
        b=AH7CT/A8DuBnfwgpS5fxEGMR3mPAOFGcoUaln4fBFiJjwrc3v4WIbLa4pYKf/unze3
         s6GDCJ5f6V1fcjCvMs1V0PMesh9afcwtajhzwZcPKu7c9CElbtNylJMOFlc13lGNjKuQ
         JXAdjCSK73UwtAkq1Srvmxlz1FUOLcM32Ojm+aHFB2+sk2xhQC4JJPnHoLkgroIh2wn5
         FRKsHP4CrKBqhWUX6d4nJBBRjVlVkG5kdxT2ZrTx7HpJK6Qj7dCO7I7GVTUePXDrmgFR
         O5hbQAgJZbG8QeoSLWKiITeakvU8Kuk154ehQFunHNqt6G67Ll3UFufyNryXkql5oM4R
         ENdA==
X-Gm-Message-State: AA+aEWZl2efubAJ+OmcQY3NSpq0HRBDSJO+X6z4jtfaXssivH+a67r3b
        tXbwRYGj157d4EQC+w4oNqs=
X-Google-Smtp-Source: AFSGD/WXJGHaYjTdmo1R74nMmXE46zh11EQic/5vaSKpDuQPDxEqHjKRrwBk1YZFBxlysoXnzb48gQ==
X-Received: by 2002:a17:902:2bc5:: with SMTP id l63-v6mr7547004plb.241.1543621241665;
        Fri, 30 Nov 2018 15:40:41 -0800 (PST)
Received: from garbanzo.do-not-panic.com (c-73-71-40-85.hsd1.ca.comcast.net. [73.71.40.85])
        by smtp.gmail.com with ESMTPSA id c4sm18132190pfm.151.2018.11.30.15.40.38
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Fri, 30 Nov 2018 15:40:40 -0800 (PST)
Received: by garbanzo.do-not-panic.com (sSMTP sendmail emulation); Fri, 30 Nov 2018 15:40:38 -0800
Date: Fri, 30 Nov 2018 15:40:38 -0800
From: Luis Chamberlain <mcgrof@kernel.org>
To: Alexander Duyck <alexander.h.duyck@linux.intel.com>
Cc: linux-kernel@vger.kernel.org, gregkh@linuxfoundation.org,
        linux-nvdimm@lists.01.org, tj@kernel.org,
        akpm@linux-foundation.org, linux-pm@vger.kernel.org,
        jiangshanlai@gmail.com, rafael@kernel.org, len.brown@intel.com,
        pavel@ucw.cz, zwisler@kernel.org, dan.j.williams@intel.com,
        dave.jiang@intel.com, bvanassche@acm.org,
        dmitry.torokhov@gmail.com, brendanhiggins@google.com
Subject: Re: [driver-core PATCH v7 2/9] driver core: Establish clear order of
 operations for deferred probe and remove
Message-ID: <20181130234038.GF28501@garbanzo.do-not-panic.com>
References: <154345118835.18040.17186161872550839244.stgit@ahduyck-desk1.amr.corp.intel.com>
 <154345153672.18040.3771035148218843351.stgit@ahduyck-desk1.amr.corp.intel.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <154345153672.18040.3771035148218843351.stgit@ahduyck-desk1.amr.corp.intel.com>
User-Agent: Mutt/1.10.1 (2018-07-13)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Wed, Nov 28, 2018 at 04:32:16PM -0800, Alexander Duyck wrote:
> Add an additional bit flag to the device struct named async_probe. This
> additional flag allows us to guarantee ordering between probe and remove
> operations.
> 
> This allows us to guarantee that if we execute a remove operation on a
> given interface it will not attempt to update the driver member
> asynchronously following the earlier operation. Previously this guarantee
> was not present and could result in us attempting to remove a driver from
> an interface only to have it attempt to attach the driver later when we
> finally complete the deferred asynchronous probe call.
> 
> Reviewed-by: Bart Van Assche <bvanassche@acm.org>
> Signed-off-by: Alexander Duyck <alexander.h.duyck@linux.intel.com>

Reviewed-by: Luis Chamberlain <mcgrof@kernel.org>

This is the sort of corner case that is best if we had a test case for
it, as it is hard to reproduce and -- how do we know we won't regress
later? Not sure if it helps but we have lib/test_kmod.c and its
respective tools/testing/selftests/kmod/kmod.sh, a new enum kmod_test_case
might be in order for device emulation creeping up / disappearing
during a custom mock driver using async probe.

Yeah.. I know.. "yes this seems good but how about later"? While we're going
through the motions here and have your attention on this I think it
would be valuable for this now. This is the sort of code that won't
change often, but if modified *can* really break things badly.

  Luis

> ---
>  drivers/base/dd.c      |   16 ++++++++++++++++
>  include/linux/device.h |    3 +++
>  2 files changed, 19 insertions(+)
> 
> diff --git a/drivers/base/dd.c b/drivers/base/dd.c
> index 88713f182086..ef3f70a7cb5a 100644
> --- a/drivers/base/dd.c
> +++ b/drivers/base/dd.c
> @@ -774,6 +774,10 @@ static void __device_attach_async_helper(void *_dev, async_cookie_t cookie)
>  
>  	device_lock(dev);
>  
> +	/* nothing to do if async_probe has been cleared */
> +	if (!dev->async_probe)
> +		goto out_unlock;
> +
>  	if (dev->parent)
>  		pm_runtime_get_sync(dev->parent);
>  
> @@ -785,6 +789,9 @@ static void __device_attach_async_helper(void *_dev, async_cookie_t cookie)
>  	if (dev->parent)
>  		pm_runtime_put(dev->parent);
>  
> +	/* We made our attempt at an async_probe, clear the flag */
> +	dev->async_probe = false;
> +out_unlock:
>  	device_unlock(dev);
>  
>  	put_device(dev);
> @@ -829,6 +836,7 @@ static int __device_attach(struct device *dev, bool allow_async)
>  			 */
>  			dev_dbg(dev, "scheduling asynchronous probe\n");
>  			get_device(dev);
> +			dev->async_probe = true;
>  			async_schedule(__device_attach_async_helper, dev);
>  		} else {
>  			pm_request_idle(dev);
> @@ -929,6 +937,14 @@ static void __device_release_driver(struct device *dev, struct device *parent)
>  {
>  	struct device_driver *drv;
>  
> +	/*
> +	 * In the event that we are asked to release the driver on an
> +	 * interface that is still waiting on a probe we can just terminate
> +	 * the probe by setting async_probe to false. When the async call
> +	 * is finally completed it will see this state and just exit.
> +	 */
> +	dev->async_probe = false;
> +
>  	drv = dev->driver;
>  	if (drv) {
>  		while (device_links_busy(dev)) {
> diff --git a/include/linux/device.h b/include/linux/device.h
> index 1b25c7a43f4c..4d2eb2c74149 100644
> --- a/include/linux/device.h
> +++ b/include/linux/device.h
> @@ -957,6 +957,8 @@ struct dev_links_info {
>   *              device.
>   * @dma_coherent: this particular device is dma coherent, even if the
>   *		architecture supports non-coherent devices.
> + * @async_probe: This device has an asynchronous probe event pending. Should
> + *		 only be updated while holding device lock.
>   *
>   * At the lowest level, every device in a Linux system is represented by an
>   * instance of struct device. The device structure contains the information
> @@ -1051,6 +1053,7 @@ struct device {
>      defined(CONFIG_ARCH_HAS_SYNC_DMA_FOR_CPU_ALL)
>  	bool			dma_coherent:1;
>  #endif
> +	bool			async_probe:1;
>  };
>  
>  static inline struct device *kobj_to_dev(struct kobject *kobj)
> 
