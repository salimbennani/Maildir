Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 29 Nov 2018 08:39:43 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id E87805802E4;
	Wed, 28 Nov 2018 10:16:34 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga003-1.jf.intel.com with ESMTP; 28 Nov 2018 10:16:34 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ARtIAIRwjLSt+MLzXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e8QKPad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWRPUMZPWSJcAY28?=
 =?us-ascii?q?YYQAAPYcMulaqInyqUAOrQO8CAS3GOPj1iNEimPq0aAgzegsFxzN0gw6H9IJtX?=
 =?us-ascii?q?TZtMn4NKEPXuG10aLG0DXDYO1I2Tjh6IjHbBYhofKLXbltdsfe008vGB7fjlWR?=
 =?us-ascii?q?qY3pJSiV1uQTvGiF8+VgVfygi2gkqwF2uTWvwsYsio/UhoMa0FzE9CN5wJorKt?=
 =?us-ascii?q?28UkJ0fdmkEJ5JuiycKoB4TMQiQ2RytyY7zL0LoYW0fC8NyJQ7wx7favqHf5KU?=
 =?us-ascii?q?7RLkUeacJypzinF9eL+nmRq+7UytxvfhWsS6zlpGtDdJn9rQunwX1hHe6NCLRu?=
 =?us-ascii?q?Z580u/wzqC1wDe5vtELEwqj6bXNoMtz742m5EOq0rMBDX2l1/zjKKOdkUr5Oyo?=
 =?us-ascii?q?6+P/b7X4qZ+TKZV0hhv9MqswgMy/B/o3MgwUU2ic4+S826Xv/Uz/QLpUkv07ir?=
 =?us-ascii?q?fVvIzeKMgBu6K0DRFZ3pw+5xu8EzuqytUVkHsfIFJAYh2HjozpO1/UIPD/CPey?=
 =?us-ascii?q?m1CskDZtx/DbMbztG5bNIWbZkLfnY7l971dQyA09zNBZ+Z1UEKoMIOz8WkDvrt?=
 =?us-ascii?q?zUFBw5PBKuw+bhFtp90pkSWWWVAq+WKK/Sq0OH5vozI+mQY48YoDL9K/km5/Hw?=
 =?us-ascii?q?l3M4lkIdcLKt3ZsWbnC4A/tnL1+YYXrqntcOD2MKshAiQ+ztjV2ISSRTaGqqX6?=
 =?us-ascii?q?Ig+jE7D5qrDYfZSYCsnLyOxiC7EodWZmBbEF+MF3joep6AW/cNbiKSP8BgniYF?=
 =?us-ascii?q?VbinV48uyxWuuBXmxLpgK+re4jcYuo771Nhp++3Tkgk/9T5zD8uDyW2NTGZ0nm?=
 =?us-ascii?q?UORz8xx61/pU19ylGe0al3mfBYFNpT5+9XXQc+L5LT0+t6C9XqUALbYtiJUEqm?=
 =?us-ascii?q?QsmhATwpVN0x2N8OY0F+G9m4lBDMxSiqDqQRl7yKApw0763d02LwJ8Z713bJyq?=
 =?us-ascii?q?0hg0M6TctIMG2snrR/+BTLB47Vj0WZkL6ndacG0y7L7muDyWuOs1teUA5/SqjF?=
 =?us-ascii?q?WXEfZk3LrdX2/E/CTrmuCag5PQtF08KNNqxKatjxh1VcWPjjIMjeY362m2qoGB?=
 =?us-ascii?q?mH3K2MY5Twd2UdxirdDlMEnB4V/XqBMQg+BSKho2bFATxqFFLvZV7s8OZkpHO6?=
 =?us-ascii?q?SE800x+Fb0l727Wp/R4VgOSWS+kP0bIcpCchtzJ0EU6g0N3MFdqPuRBtfKVGbt?=
 =?us-ascii?q?M7+1dIy2TZuhd5PpyhKaBim1Effx52v0PoyxV4FIFAndI2o3MtyQp4MbiY309Z?=
 =?us-ascii?q?dzOEwZDwPaXaKnXz/BCqbK7WxlHe0daM9qcT8vg4rE/jvAWoFkok/HVqyN1V03?=
 =?us-ascii?q?qa5pXXAwseS5PxUkAr9xdko7HWeDUy54TR1Xd0K6m7rifC2841BOsi0huvZdNf?=
 =?us-ascii?q?P72LFQDsE8wWHdOhKPE3lFezaBIEP+dS9LAvMsOidvuG3rOrPel6kDKni2RH/J?=
 =?us-ascii?q?5y0kaW+yVgTe7I2o4Pw+uE0QufSzf8kFChv9j3mIBZfz0dAnCzyCnkBIFLYK1y?=
 =?us-ascii?q?cp0GCWOvI82x29V/iIThW39e9F6/GVwG3NWldgaVb1z4xQdQz1gYoWS7mSukyD?=
 =?us-ascii?q?x5iysprquD0yPU2eTtaR0HNnRNRGZ8l1fsIJG4gMwAU0iscgcmigGl5UH8x6VA?=
 =?us-ascii?q?oKR/Lm/TQVpHfiTsLmFiVLewuaSGY8JV9JwotiBXWvymYV+GUr79vwca0yT7Em?=
 =?us-ascii?q?pexTA3bTGrto/inxxnjmKQN3JzrHvfecFtyhbT/t3cRfhN3jUYQCl0kyXYBl+5?=
 =?us-ascii?q?P9Ox59Wbi4/DsvyiV2KmTpBTczPkzZmDtCu44m1mGwa/kOqwmt3kEAg61zH019?=
 =?us-ascii?q?9xWCXMrRb8ZJTr1qugPeJmeEloGEHz685gFo5ilYswgYka2WIGiZWN4XoHjWDz?=
 =?us-ascii?q?PM1b2K3ka3oBXzwLw9/T4AX+3E1jL3SJx5/2V3mHw8thYcW6bX0S2i4n889KD6?=
 =?us-ascii?q?KU5qRenSRpulq4sR7RYf9lkzce0/Qu6WQWg+EUuAU3yCWdDasfHU1ZPSzqihSJ?=
 =?us-ascii?q?4MqyrKRRZGazb7ew0FByksymDLGHugtcQmr2eo8+HS9s6cVyKFfM0Hzw6o7+Yt?=
 =?us-ascii?q?XRY8wctgaIkxjelehaM4w+luAFhSd8PWL9vHsly/M0jBB03JG6upSHJHtp/K6j?=
 =?us-ascii?q?HhFYMTj1bdsJ+j7xlaZegtqW34e3E5V9HTULWYHkTPOyHzIUqPTnLB2OEDwnp3?=
 =?us-ascii?q?efGLrfGxKf6Uh8o3LOFZCrK2+YJH0Dwdp+QxmdIVRVgBoIUzUigp45CgeqydT6?=
 =?us-ascii?q?f0hj4TAR4kP4pgFIyuJ1LBT/VmbfpAG1ajY7UpSfLRxW7h1c6EfRK8CR8uVzHy?=
 =?us-ascii?q?RA9J27sAONMnCbZxhPDWwRWEyLHVXjMae15dXa7+iUHOm+L+bNYbWTr+xRTeyI?=
 =?us-ascii?q?yImr0otn+TaMK8qOMmNjD/09xkpMQ3R5F97FlDUITiwdjzjNYNKDpBeg5i13qd?=
 =?us-ascii?q?iy8fTsWALy/IuPFqFdMdN19xCthqeDMeGQiT19KTZZ0JMM2HDJxKIe3F4UlyFh?=
 =?us-ascii?q?aT2tHa4cui7KSaLagrVXAAIDayNvKMtI6Lox3glTNs7aidP11b94guQ2C1dfUl?=
 =?us-ascii?q?zhld+mZdYXI2GmL17HAEeLNLKbJTzE2c33YKW8SaFOg+VQrRG/pTGbE0r7NDSZ?=
 =?us-ascii?q?izbpTwyvMf1LjCyDJhNepZqycgxzBmnjVt7mbhy7PcRzjT03x700m3zLOXQdMT?=
 =?us-ascii?q?h6b0NCsLmQ4TlEjfV4HmxL9mBlIvWcmyaF8+nYLY4bsedqAiRxje5V/G42xKdV?=
 =?us-ascii?q?7C5aQvx4gy/Srt9oo1G7neiD0DtnUBxSqjlVgIKHp1ltOaLc9pNYQ3bL4AoN7X?=
 =?us-ascii?q?mMCxQNv9ZkCsfgu6ZVytjOkqL8MDZD89LO8ssaCMjZM8aHMHsnMRr0Fz/YFgoF?=
 =?us-ascii?q?TTi3NW7Bg0xRiu2d9nqQrstylp+5sZ4DWrZdWEY4XtkXDkBiGt1KdJ5zUyMtl7?=
 =?us-ascii?q?KBgYgC6H66qx/QbM9duYzDV/TUCvLqfmW3l75BMjIOzaKwFoQeKIb71kphbREu?=
 =?us-ascii?q?lYLGAUvBG8tNrzNqbgIyo0Jl9Hl4U3112kT5Zwfr63gWQ63n1iUqgxdzNLx+vA?=
 =?us-ascii?q?zn5E06cx+T/HM9?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAAD/2v5bh0O0hNFjGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBgmlwEieMEV+LKYINFIh8jjIUgWIRGAMQAYd?=
 =?us-ascii?q?uIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2JAGCYQEBAQECAQECJBMmGQYJA?=
 =?us-ascii?q?QEKGAklAwwFDRshEwWDHAGBaQMNCAWnejOICA2CFwUii3SCFoERgmQugleBd4N?=
 =?us-ascii?q?ogiYCh1qBT4FuhA2GIYooLgcChn2HCIMhCxiBWoUQiiuJeYEBg2WJaYFGgRxxc?=
 =?us-ascii?q?IM8gicXEoM4ilU9AQExAYEEAQGKaCuCIAEB?=
X-IPAS-Result: =?us-ascii?q?A0ABAAD/2v5bh0O0hNFjGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBgmlwEieMEV+LKYINFIh8jjIUgWIRGAMQAYduIjQJDQEDAQEBA?=
 =?us-ascii?q?QEBAgETAQEBCA0JCCkjDII2JAGCYQEBAQECAQECJBMmGQYJAQEKGAklAwwFDRs?=
 =?us-ascii?q?hEwWDHAGBaQMNCAWnejOICA2CFwUii3SCFoERgmQugleBd4NogiYCh1qBT4Fuh?=
 =?us-ascii?q?A2GIYooLgcChn2HCIMhCxiBWoUQiiuJeYEBg2WJaYFGgRxxcIM8gicXEoM4ilU?=
 =?us-ascii?q?9AQExAYEEAQGKaCuCIAEB?=
X-IronPort-AV: E=Sophos;i="5.56,291,1539673200"; 
   d="scan'208";a="55241352"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 28 Nov 2018 10:16:33 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728855AbeK2FTA (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 29 Nov 2018 00:19:00 -0500
Received: from mga14.intel.com ([192.55.52.115]:43889 "EHLO mga14.intel.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1725266AbeK2FS7 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 29 Nov 2018 00:18:59 -0500
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from fmsmga008.fm.intel.com ([10.253.24.58])
  by fmsmga103.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 28 Nov 2018 10:16:28 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,291,1539673200"; 
   d="scan'208";a="95901999"
Received: from smile.fi.intel.com (HELO smile) ([10.237.72.86])
  by fmsmga008.fm.intel.com with ESMTP; 28 Nov 2018 10:16:23 -0800
Received: from andy by smile with local (Exim 4.91)
        (envelope-from <andriy.shevchenko@linux.intel.com>)
        id 1gS4Np-0005VC-QB; Wed, 28 Nov 2018 20:16:21 +0200
Date: Wed, 28 Nov 2018 20:16:21 +0200
From: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
To: Alexandre Belloni <alexandre.belloni@bootlin.com>
Cc: Rasmus Villemoes <rasmus.villemoes@prevas.dk>,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        linux-kernel@vger.kernel.org,
        Alessandro Zummo <a.zummo@towertech.it>,
        linux-rtc@vger.kernel.org, Arnd Bergmann <arnd@arndb.de>,
        Joe Perches <joe@perches.com>,
        Mark Salyzyn <salyzyn@android.com>,
        Geert Uytterhoeven <geert@linux-m68k.org>,
        Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>,
        Dmitry Torokhov <dmitry.torokhov@gmail.com>,
        Guan Xuetao <gxt@mprc.pku.edu.cn>,
        Ingo Molnar <mingo@kernel.org>,
        Jason Wessel <jason.wessel@windriver.com>,
        Jonathan Corbet <corbet@lwn.net>,
        Jonathan Hunter <jonathanh@nvidia.com>,
        Krzysztof Kozlowski <krzk@kernel.org>,
        "Rafael J. Wysocki" <rjw@rjwysocki.net>,
        Thierry Reding <thierry.reding@gmail.com>
Subject: Re: [PATCH v3 01/20] lib/vsprintf: Print time and date in human
 readable format via %pt
Message-ID: <20181128181621.GE10650@smile.fi.intel.com>
References: <20181113171729.19645-1-andriy.shevchenko@linux.intel.com>
 <20181113171729.19645-2-andriy.shevchenko@linux.intel.com>
 <20181120222756.GI8367@piout.net>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181120222756.GI8367@piout.net>
Organization: Intel Finland Oy - BIC 0357606-4 - Westendinkatu 7, 02160 Espoo
User-Agent: Mutt/1.10.1 (2018-07-13)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Tue, Nov 20, 2018 at 11:27:57PM +0100, Alexandre Belloni wrote:
> Hello,
> 
> (Please update my email address).

I will follow all recommendations.
New version coming soon...

Thanks for review!

> 
> On 13/11/2018 19:17:10+0200, Andy Shevchenko wrote:
> > There are users which print time and date represented by content of
> > struct rtc_time in human readable format.
> > 
> > Instead of open coding that each time introduce %ptR[dt][rv] specifier.
> > 
> > Note, users have to select PRINTK_PEXT_TIMEDATE option in a Kconfig.
> > 
> > Cc: Arnd Bergmann <arnd@arndb.de>
> > Cc: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
> > Cc: Dmitry Torokhov <dmitry.torokhov@gmail.com>
> > Cc: Geert Uytterhoeven <geert@linux-m68k.org>
> > Cc: Guan Xuetao <gxt@mprc.pku.edu.cn>
> > Cc: Ingo Molnar <mingo@kernel.org>
> > Cc: Jason Wessel <jason.wessel@windriver.com>
> > Cc: Jonathan Corbet <corbet@lwn.net>
> > Cc: Jonathan Hunter <jonathanh@nvidia.com>
> > Cc: Krzysztof Kozlowski <krzk@kernel.org>
> > Cc: "Rafael J. Wysocki" <rjw@rjwysocki.net>
> > Cc: Thierry Reding <thierry.reding@gmail.com>
> > Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
> > ---
> >  Documentation/core-api/printk-formats.rst |  20 ++++
> >  lib/test_printf.c                         |   6 +
> >  lib/vsprintf.c                            | 140 ++++++++++++++++++++++
> >  3 files changed, 166 insertions(+)
> > 
> > diff --git a/Documentation/core-api/printk-formats.rst b/Documentation/core-api/printk-formats.rst
> > index ff48b55040ef..8342a65eab0b 100644
> > --- a/Documentation/core-api/printk-formats.rst
> > +++ b/Documentation/core-api/printk-formats.rst
> > @@ -412,6 +412,26 @@ Examples::
> >  
> >  Passed by reference.
> >  
> > +Time and date (struct rtc_time)
> > +-------------------------------
> > +
> > +::
> > +
> > +	%ptR		YYYY-mm-dd HH:MM:SS
> > +	%ptRd		YYYY-mm-dd
> > +	%ptRt		HH:MM:SS
> > +	%ptR[dt][rv]
> > +
> > +For printing date and time as represented by struct rtc_time structure in
> > +human readable format.
> > +
> > +By default year will be incremented by 1900 and month by 1. Use %ptRr (raw)
> > +to suppress this behaviour. On the other hand when %ptRv is applied
> > +validation mechanism will be in use, i.e. numbers out of range will be
> > +replaced by ** or ****.
> > +
> > +Passed by reference.
> > +
> >  struct clk
> >  ----------
> >  
> > diff --git a/lib/test_printf.c b/lib/test_printf.c
> > index 53527ea822b5..97b7d14961d6 100644
> > --- a/lib/test_printf.c
> > +++ b/lib/test_printf.c
> > @@ -418,6 +418,11 @@ struct_va_format(void)
> >  {
> >  }
> >  
> > +static void __init
> > +struct_rtc_time(void)
> > +{
> > +}
> > +
> >  static void __init
> >  struct_clk(void)
> >  {
> > @@ -529,6 +534,7 @@ test_pointer(void)
> >  	uuid();
> >  	dentry();
> >  	struct_va_format();
> > +	struct_rtc_time();
> >  	struct_clk();
> >  	bitmap();
> >  	netdev_features();
> > diff --git a/lib/vsprintf.c b/lib/vsprintf.c
> > index 37a54a6dd594..8455cbda8d6c 100644
> > --- a/lib/vsprintf.c
> > +++ b/lib/vsprintf.c
> > @@ -30,6 +30,7 @@
> >  #include <linux/ioport.h>
> >  #include <linux/dcache.h>
> >  #include <linux/cred.h>
> > +#include <linux/rtc.h>
> >  #include <linux/uuid.h>
> >  #include <linux/of.h>
> >  #include <net/addrconf.h>
> > @@ -822,6 +823,20 @@ static const struct printf_spec default_dec_spec = {
> >  	.precision = -1,
> >  };
> >  
> > +static const struct printf_spec default_dec02_spec = {
> > +	.base = 10,
> > +	.field_width = 2,
> > +	.precision = -1,
> > +	.flags = ZEROPAD,
> > +};
> > +
> > +static const struct printf_spec default_dec04_spec = {
> > +	.base = 10,
> > +	.field_width = 4,
> > +	.precision = -1,
> > +	.flags = ZEROPAD,
> > +};
> > +
> >  static noinline_for_stack
> >  char *resource_string(char *buf, char *end, struct resource *res,
> >  		      struct printf_spec spec, const char *fmt)
> > @@ -1549,6 +1564,127 @@ char *address_val(char *buf, char *end, const void *addr, const char *fmt)
> >  	return special_hex_number(buf, end, num, size);
> >  }
> >  
> > +static noinline_for_stack
> > +char *date_str(char *buf, char *end, const struct rtc_time *tm, bool v, bool r)
> > +{
> > +	int year = tm->tm_year + (r ? 0 : 1900);
> > +	int mon = tm->tm_mon + (r ? 0 : 1);
> > +
> > +	if (unlikely(v && (unsigned int)tm->tm_year > 200))
> > +		buf = string(buf, end, "****", default_str_spec);
> 
> I think you should drop the validation option. This is only used in a
> deprecated ABI and is mostly wrong as many RTCs will still be valid
> after 2100.
> 
> > +	else
> > +		buf = number(buf, end, year, default_dec04_spec);
> > +
> > +	if (buf < end)
> > +		*buf = '-';
> > +	buf++;
> > +
> > +	if (unlikely(v && (unsigned int)tm->tm_mon > 11))
> > +		buf = string(buf, end, "**", default_str_spec);
> > +	else
> > +		buf = number(buf, end, mon, default_dec02_spec);
> > +
> > +	if (buf < end)
> > +		*buf = '-';
> > +	buf++;
> > +
> > +	if (unlikely(v && (unsigned int)tm->tm_mday > 31))
> > +		buf = string(buf, end, "**", default_str_spec);
> 
> Same here, this doesn't protect February, April, June, September and
> November. There is one RTC that think that 31st of November is valid.
> 
> > +	else
> > +		buf = number(buf, end, tm->tm_mday, default_dec02_spec);
> > +
> > +	return buf;
> > +}
> > +
> > +static noinline_for_stack
> > +char *time_str(char *buf, char *end, const struct rtc_time *tm, bool v, bool r)
> > +{
> > +	if (unlikely(v && (unsigned int)tm->tm_hour > 24))
> > +		buf = string(buf, end, "**", default_str_spec);
> > +	else
> > +		buf = number(buf, end, tm->tm_hour, default_dec02_spec);
> > +
> > +	if (buf < end)
> > +		*buf = ':';
> > +	buf++;
> > +
> > +	if (unlikely(v && (unsigned int)tm->tm_min > 59))
> > +		buf = string(buf, end, "**", default_str_spec);
> > +	else
> > +		buf = number(buf, end, tm->tm_min, default_dec02_spec);
> > +
> > +	if (buf < end)
> > +		*buf = ':';
> > +	buf++;
> > +
> > +	if (unlikely(v && (unsigned int)tm->tm_sec > 59))
> > +		buf = string(buf, end, "**", default_str_spec);
> 
> Some RTCs will consider 60 valid. So, really, instead of fixing all of
> those, I'd just get rid of the validation option.
> 
> > +	else
> > +		buf = number(buf, end, tm->tm_sec, default_dec02_spec);
> > +
> > +	return buf;
> > +}
> > +
> > +static noinline_for_stack
> > +char *rtc_str(char *buf, char *end, const struct rtc_time *tm, const char *fmt)
> > +{
> > +	bool have_t = true, have_d = true;
> > +	bool validate = false;
> > +	bool raw = false;
> > +	int count = 2;
> > +	bool found;
> > +
> > +	switch (fmt[count]) {
> > +	case 'd':
> > +		have_t = false;
> > +		count++;
> > +		break;
> > +	case 't':
> > +		have_d = false;
> > +		count++;
> > +		break;
> > +	}
> > +
> > +	found = true;
> > +	do {
> > +		switch (fmt[count++]) {
> > +		case 'r':
> > +			raw = true;
> > +			break;
> > +		case 'v':
> > +			validate = true;
> > +			break;
> > +		default:
> > +			found = false;
> > +			break;
> > +		}
> > +	} while (found);
> > +
> > +	if (have_d)
> > +		buf = date_str(buf, end, tm, validate, raw);
> > +	if (have_d && have_t) {
> > +		if (buf < end)
> > +			*buf = ' ';
> 
> I'd go for ISO 8601 and use a 'T' here.
> 
> > +		buf++;
> > +	}
> > +	if (have_t)
> > +		buf = time_str(buf, end, tm, validate, raw);
> > +
> > +	return buf;
> > +}
> > +
> > +static noinline_for_stack
> > +char *timeanddate(char *buf, char *end, void *ptr, struct printf_spec spec,
> > +		  const char *fmt)
> > +{
> > +	switch (fmt[1]) {
> > +	case 'R':
> > +		return rtc_str(buf, end, (const struct rtc_time *)ptr, fmt);
> > +	default:
> > +		return ptr_to_id(buf, end, ptr, spec);
> > +	}
> > +}
> > +
> >  static noinline_for_stack
> >  char *clock(char *buf, char *end, struct clk *clk, struct printf_spec spec,
> >  	    const char *fmt)
> > @@ -1828,6 +1964,8 @@ char *device_node_string(char *buf, char *end, struct device_node *dn,
> >   * - 'd[234]' For a dentry name (optionally 2-4 last components)
> >   * - 'D[234]' Same as 'd' but for a struct file
> >   * - 'g' For block_device name (gendisk + partition number)
> > + * - 't[R][dt][rv]' For time and date as represented:
> > + *      R    struct rtc_time
> >   * - 'C' For a clock, it prints the name (Common Clock Framework) or address
> >   *       (legacy clock framework) of the clock
> >   * - 'Cn' For a clock, it prints the name (Common Clock Framework) or address
> > @@ -1952,6 +2090,8 @@ char *pointer(const char *fmt, char *buf, char *end, void *ptr,
> >  		return address_val(buf, end, ptr, fmt);
> >  	case 'd':
> >  		return dentry_name(buf, end, ptr, spec, fmt);
> > +	case 't':
> > +		return timeanddate(buf, end, ptr, spec, fmt);
> >  	case 'C':
> >  		return clock(buf, end, ptr, spec, fmt);
> >  	case 'D':
> > -- 
> > 2.19.1
> > 
> 
> -- 
> Alexandre Belloni, Bootlin
> Embedded Linux and Kernel engineering
> https://bootlin.com

-- 
With Best Regards,
Andy Shevchenko


