Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 03 Dec 2018 20:24:21 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 3F7DE580224;
	Mon,  3 Dec 2018 01:57:02 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga003-1.jf.intel.com with ESMTP; 03 Dec 2018 01:57:02 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AoBbxjBZJBMiUA48JtgVQKFT/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpcizZR7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v6bpgRh31hy?=
 =?us-ascii?q?cdLzM38H/ZhNF+gqxYpxyupRJ/zIHIb4+aL/p+ZqHQcMgGRWdCRMtdSzZMDp++?=
 =?us-ascii?q?YoYJEuEPPfxYr474p1YWthW+GBejBOXzyj9JgH/9wLc03Po7EQHcwgMgA88FvX?=
 =?us-ascii?q?PNrNXoKqgSV/y1zKjOzTnZd/NZxy396JLWfRA9uvyDR6hwcc/LxUYzEAPFi0yd?=
 =?us-ascii?q?pIr4ND2WzuQAq3aX4/ZkWO61lmIqpR99riKyysovloXFnIMYx1Lc+Sln3Yo4J8?=
 =?us-ascii?q?e0RFN0bNK4Cpdcqj2WO5ZsTs4gX21lvjsxxKcctp6hZicKzYwqxx7BZPyDdIiF?=
 =?us-ascii?q?+gzjVOmPLjdinn5le6ywhwy08Ue+zu3wTM600ExFriZdk9nMsG4C1wDL58SZVv?=
 =?us-ascii?q?dw+l2t1SuB2gzN8O1IPEM5mbbBJ5MgwLM8jp8Tvl7CHi/ylkX2lqiWdkA89+is?=
 =?us-ascii?q?6uTnZKjmp5CFO493lA7+KKIuldK7AeghNQgPUW6b9vqm1LD44035T6tFjucsnq?=
 =?us-ascii?q?narp/aP8IbqbC9AwNP1YYj8Rm/Ay+80NsEhXkHME5FeBWfgojtOlHOI+73Ae2w?=
 =?us-ascii?q?glSxizprw/HGPrv8ApTCNHTDkbHhfapj5E5Y0gY80ddf55dMALEbPP3zQlPxtM?=
 =?us-ascii?q?DfDhIhMwy72efnCMln2YMZQ26PArKZP7nUsV+H/e8vJ+iMZIkIuDfyMfQl5vju?=
 =?us-ascii?q?jWMnll8ZZ6WmwZwXaHWgFPR8P0qZeWbsgssGEWoSvAo+S/LlhEeBUT5UYXayWa?=
 =?us-ascii?q?U86yo/CIKnC4fDW4+sjKaA3Ce9Ap1ZeGRGBkqQHnfvcoWOQ+0MZz6KIs99jjwE?=
 =?us-ascii?q?UqCsRJU61RGusw/6yKBrLvDO9S0arp/j0Nl15+vOlRA97zB0DsKd032TQGFwhG?=
 =?us-ascii?q?8HWzg23KVnq0xn1liDybR4g+BfFdFL5PNGSAE6OYTYz+x7Ed/yXA3Bc8yNSFan?=
 =?us-ascii?q?RNWmHD4wQsgww98If0ZyBdGiggrf0CqtBr8fj6aLC4As8qLAw3jxIN5wxGvc26?=
 =?us-ascii?q?k/kVYqWMtPOneghq5k6QfTAYnFk0Gal6avcaQRxyrN9GaFzWqTs0BUSg9wUaPZ?=
 =?us-ascii?q?XX8BYkvat8j25kTHT7W2E7QoLhNBydKeKqtNctDmkE9JROn9N9jEY2K+gWGwBQ?=
 =?us-ascii?q?2WybOKd4fqf2Qd3CPACEkLiQwT/HCGNRQgCSeluW7REDtuFVf3aUP27eZ+sG+7?=
 =?us-ascii?q?TlMzzwySc01h1r+1+hkJhfycS/IfxK4EtD0mqzVuGFa93tTWC9WbqgplfaVcZ8?=
 =?us-ascii?q?494Vhd2WLYsQx9IoKvL6R4ilECdAR3ulvk1w9rBYVYjcgqsHQqwRJoJqKczlxA?=
 =?us-ascii?q?eC2X3JDqNrLMN2n94Qqga6jV2lHZztab4aMP6PU+q1X+swClDEsi83N709ZL13?=
 =?us-ascii?q?uQ/InFDA0XUZjpSEY46wB6p63GYik6/47V1WBsPbOovTPY2tMpBPEqyhCvf9pE?=
 =?us-ascii?q?NKOEFQnyE9AVBsS0KewqnUSpYQwAPOxI6KE0OMamfeOc2KG3JOZggC6mjWNf7Y?=
 =?us-ascii?q?Bn00KD6zBzSvTV0JYC2f2Y2BWIVy39jFu4rs/4g4REaiwMEWqlzijkApVcZqlz?=
 =?us-ascii?q?fYYNFGevLNe7xtR4h57xRXFY8ESvCE8B2M+sYRCSdUDy3RVM1UQLpnyqgSu5zz?=
 =?us-ascii?q?1unzAptKafxzHOw+L5eRoDO25LQnRijFj2LYi1idAaQFanbwwzmBS54kb6wrBR?=
 =?us-ascii?q?pL5jIGnLXUdIYy/2InlgUqSqrLqCYM1P6JQyvSVMSuu8YlOaSr/7oxQE1SPuBG?=
 =?us-ascii?q?9exDE9dzG3tZT1hR16iGSBLHltqHrVY91/xRDa5NbEX/5ewiIGRDVkiTnQHlW9?=
 =?us-ascii?q?P8Om/dKOm5fBs+C+UXmsVplScSnt0IOBuzG35WxsAR2jgf+znsfrHhQ90S/+z9?=
 =?us-ascii?q?NqTznHrA7gYon30KS3KeFncVNpBFPm68p6B5txko0/hJwL3Xgah5OV/WcIkGvp?=
 =?us-ascii?q?MNVb377+Y2QJRTIR39HV5w3l0lV5Ln2V34L5Smmdwsx5atm/Y2MW2Tgy49pECa?=
 =?us-ascii?q?iK97xEgTV6okCjog3Pe/h9kSwQyf8v6H4cnuEItxAhziSbArAOA0ZYOTbgmAiP?=
 =?us-ascii?q?79C7tK9XfnqgcaCs1EpimtCsFK2CogZZWHrje5YtBylw7thkMFLX0X3+8YXkeN?=
 =?us-ascii?q?jWbdIOuRyYiRbAj+5JKJ0vkvoGnzZoOWX4vXc90e40kQRu3Y2mvIiAM2hi57i2?=
 =?us-ascii?q?AhlcNj3ofc8T/iztgL1ansaX2YCvA5pgFi8KXJvuUfKnDjYSue77OAaJFT02sm?=
 =?us-ascii?q?2bFqbHHQ+D9EdmqGrCE5KxOHGSOnYZ1s9uRAWHKExcnQAUXyg6npgjGQCx38Hh?=
 =?us-ascii?q?dEZ55jYM5l/3sBdMy+RoNwXhXWfbvgundjA0SJ2HJhpM8g5C/1vVMdCZ7u9rHy?=
 =?us-ascii?q?BY+YChrBWQKmOBYQREF3oJWkuCB1DsJbSu4djA8+6FBuuxNffOYLOOqfBAWPeM?=
 =?us-ascii?q?356gzoxm/zOUPMWVInZiF+E72lZEXX1hG8TWhTQPSy8UlyLMdcKbpw28+ip4rs?=
 =?us-ascii?q?+h6vTrRRnv6JCLC7tTN9Vv5h+3jb2CN+6WmCZ2NzJY2okQyn/PzbgVxEQShD12?=
 =?us-ascii?q?dzmxDbQAsjbAQ7jNmqBMFR4UdSNyONFM76I9xQRNPc/bitXo1r93lPI1ClFFVU?=
 =?us-ascii?q?D/lcGtf8AFP2a9NFbfDkaRKLuGPSHLw93wYa6kVb1QjeBUuwestjqBD0DjPiqM?=
 =?us-ascii?q?lz/yWhCrMOFMijybPRNEtIG8dBZtFXbsTNb8ZhKnN993iCU8wacoiXPSKW4cLT?=
 =?us-ascii?q?98fltNr7KK6yNYh/R/G2pZ4XtkLemLgSCZ7+bDJ5YSsPtrBDl0lu1A7HQ7zbtV?=
 =?us-ascii?q?8D9LRPhvlCTOqd5upgLuru7a0jd7XQBcgjdNipiCsUhrNePe7JYEEWzG4zoX73?=
 =?us-ascii?q?qBEBMBpNojDNDz/+hUy97ShOfwJS1E/tb848QRHY7XJdiBPX5nNgDmXHbQDQ0Y?=
 =?us-ascii?q?XXuzMEnBiEFH1vKf7HuYqt49sJe/toAJT+piSVEzCvIcQnxoBsYPPN8jRy4pl6?=
 =?us-ascii?q?KaiogQ6GCkoQX5Td9f+JvAU6TBUr3UND+FgOwcNFMzyrTiINFLOw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0CJAACx/ARch0O0hNFiHgEGBwaBVAYLA?=
 =?us-ascii?q?YNrJ4N5lkKZJywTAYgCIjcGDQEDAQEBAQEBAgETAQEBCgsJCCkvgjYigmUDAwE?=
 =?us-ascii?q?CIAQLAUYGCQEBCBwCJgICA1QHEgWDHIICBAGJIJtQfDOKHoELhmKEL4FXP4ERg?=
 =?us-ascii?q?mSFE4MgglcCiSaHVI5xVQcCgh8EiA+GfyOBW4g2hxWJBJFFgXczGiNQgmyQWz8?=
 =?us-ascii?q?BATGBBQEBimwBAQ?=
X-IPAS-Result: =?us-ascii?q?A0CJAACx/ARch0O0hNFiHgEGBwaBVAYLAYNrJ4N5lkKZJyw?=
 =?us-ascii?q?TAYgCIjcGDQEDAQEBAQEBAgETAQEBCgsJCCkvgjYigmUDAwECIAQLAUYGCQEBC?=
 =?us-ascii?q?BwCJgICA1QHEgWDHIICBAGJIJtQfDOKHoELhmKEL4FXP4ERgmSFE4MgglcCiSa?=
 =?us-ascii?q?HVI5xVQcCgh8EiA+GfyOBW4g2hxWJBJFFgXczGiNQgmyQWz8BATGBBQEBimwBA?=
 =?us-ascii?q?Q?=
X-IronPort-AV: E=Sophos;i="5.56,310,1539673200"; 
   d="scan'208";a="55811842"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 03 Dec 2018 01:57:00 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726188AbeLCJ5Q (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 3 Dec 2018 04:57:16 -0500
Received: from usa-sjc-mx-foss1.foss.arm.com ([217.140.101.70]:60884 "EHLO
        foss.arm.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1725947AbeLCJ5P (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 3 Dec 2018 04:57:15 -0500
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.72.51.249])
        by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id DBDE21682;
        Mon,  3 Dec 2018 01:56:55 -0800 (PST)
Received: from queper01-lin.cambridge.arm.com (queper01-lin.cambridge.arm.com [10.1.195.48])
        by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPSA id BF8673F59C;
        Mon,  3 Dec 2018 01:56:51 -0800 (PST)
From: Quentin Perret <quentin.perret@arm.com>
To: peterz@infradead.org, rjw@rjwysocki.net,
        linux-kernel@vger.kernel.org, linux-pm@vger.kernel.org
Cc: gregkh@linuxfoundation.org, mingo@redhat.com,
        dietmar.eggemann@arm.com, morten.rasmussen@arm.com,
        chris.redpath@arm.com, patrick.bellasi@arm.com,
        valentin.schneider@arm.com, vincent.guittot@linaro.org,
        thara.gopinath@linaro.org, viresh.kumar@linaro.org,
        tkjos@google.com, joel@joelfernandes.org, smuckle@google.com,
        adharmap@codeaurora.org, skannan@codeaurora.org,
        pkondeti@codeaurora.org, juri.lelli@redhat.com,
        edubezval@gmail.com, srinivas.pandruvada@linux.intel.com,
        currojerez@riseup.net, javi.merino@kernel.org,
        quentin.perret@arm.com
Subject: [PATCH v10 04/15] PM / EM: Expose the Energy Model in sysfs
Date: Mon,  3 Dec 2018 09:56:17 +0000
Message-Id: <20181203095628.11858-5-quentin.perret@arm.com>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <20181203095628.11858-1-quentin.perret@arm.com>
References: <20181203095628.11858-1-quentin.perret@arm.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Expose the Energy Model (read-only) of all performance domains in sysfs
for convenience. To do so, add a kobject to the CPU subsystem under the
umbrella of which a kobject for each performance domain is attached.

The resulting hierarchy is as follows for a platform with two
performance domains for example:

   /sys/devices/system/cpu/energy_model
   ├── pd0
   │   ├── cost
   │   ├── cpus
   │   ├── frequency
   │   └── power
   └── pd4
       ├── cost
       ├── cpus
       ├── frequency
       └── power

In this implementation, the kobject abstraction is only used as a
convenient way of exposing data to sysfs. However, it could also be
used in the future to allocate and release performance domains in a more
dynamic way using reference counting.

Cc: Peter Zijlstra <peterz@infradead.org>
Cc: "Rafael J. Wysocki" <rjw@rjwysocki.net>
Signed-off-by: Quentin Perret <quentin.perret@arm.com>
---
 include/linux/energy_model.h |  2 +
 kernel/power/energy_model.c  | 90 ++++++++++++++++++++++++++++++++++++
 2 files changed, 92 insertions(+)

diff --git a/include/linux/energy_model.h b/include/linux/energy_model.h
index aa027f7bcb3e..55deab2b38dc 100644
--- a/include/linux/energy_model.h
+++ b/include/linux/energy_model.h
@@ -27,6 +27,7 @@ struct em_cap_state {
  * em_perf_domain - Performance domain
  * @table:		List of capacity states, in ascending order
  * @nr_cap_states:	Number of capacity states
+ * @kobj:		Kobject used to expose the domain in sysfs
  * @cpus:		Cpumask covering the CPUs of the domain
  *
  * A "performance domain" represents a group of CPUs whose performance is
@@ -37,6 +38,7 @@ struct em_cap_state {
 struct em_perf_domain {
 	struct em_cap_state *table;
 	int nr_cap_states;
+	struct kobject kobj;
 	unsigned long cpus[0];
 };
 
diff --git a/kernel/power/energy_model.c b/kernel/power/energy_model.c
index d9dc2c38764a..5ec376d4f2f3 100644
--- a/kernel/power/energy_model.c
+++ b/kernel/power/energy_model.c
@@ -23,6 +23,82 @@ static DEFINE_PER_CPU(struct em_perf_domain *, em_data);
  */
 static DEFINE_MUTEX(em_pd_mutex);
 
+static struct kobject *em_kobject;
+
+/* Getters for the attributes of em_perf_domain objects */
+struct em_pd_attr {
+	struct attribute attr;
+	ssize_t (*show)(struct em_perf_domain *pd, char *buf);
+	ssize_t (*store)(struct em_perf_domain *pd, const char *buf, size_t s);
+};
+
+#define EM_ATTR_LEN 13
+#define show_table_attr(_attr) \
+static ssize_t show_##_attr(struct em_perf_domain *pd, char *buf) \
+{ \
+	ssize_t cnt = 0; \
+	int i; \
+	for (i = 0; i < pd->nr_cap_states; i++) { \
+		if (cnt >= (ssize_t) (PAGE_SIZE / sizeof(char) \
+				      - (EM_ATTR_LEN + 2))) \
+			goto out; \
+		cnt += scnprintf(&buf[cnt], EM_ATTR_LEN + 1, "%lu ", \
+				 pd->table[i]._attr); \
+	} \
+out: \
+	cnt += sprintf(&buf[cnt], "\n"); \
+	return cnt; \
+}
+
+show_table_attr(power);
+show_table_attr(frequency);
+show_table_attr(cost);
+
+static ssize_t show_cpus(struct em_perf_domain *pd, char *buf)
+{
+	return sprintf(buf, "%*pbl\n", cpumask_pr_args(to_cpumask(pd->cpus)));
+}
+
+#define pd_attr(_name) em_pd_##_name##_attr
+#define define_pd_attr(_name) static struct em_pd_attr pd_attr(_name) = \
+		__ATTR(_name, 0444, show_##_name, NULL)
+
+define_pd_attr(power);
+define_pd_attr(frequency);
+define_pd_attr(cost);
+define_pd_attr(cpus);
+
+static struct attribute *em_pd_default_attrs[] = {
+	&pd_attr(power).attr,
+	&pd_attr(frequency).attr,
+	&pd_attr(cost).attr,
+	&pd_attr(cpus).attr,
+	NULL
+};
+
+#define to_pd(k) container_of(k, struct em_perf_domain, kobj)
+#define to_pd_attr(a) container_of(a, struct em_pd_attr, attr)
+
+static ssize_t show(struct kobject *kobj, struct attribute *attr, char *buf)
+{
+	struct em_perf_domain *pd = to_pd(kobj);
+	struct em_pd_attr *pd_attr = to_pd_attr(attr);
+	ssize_t ret;
+
+	ret = pd_attr->show(pd, buf);
+
+	return ret;
+}
+
+static const struct sysfs_ops em_pd_sysfs_ops = {
+	.show	= show,
+};
+
+static struct kobj_type ktype_em_pd = {
+	.sysfs_ops	= &em_pd_sysfs_ops,
+	.default_attrs	= em_pd_default_attrs,
+};
+
 static struct em_perf_domain *em_create_pd(cpumask_t *span, int nr_states,
 						struct em_data_callback *cb)
 {
@@ -102,6 +178,11 @@ static struct em_perf_domain *em_create_pd(cpumask_t *span, int nr_states,
 	pd->nr_cap_states = nr_states;
 	cpumask_copy(to_cpumask(pd->cpus), span);
 
+	ret = kobject_init_and_add(&pd->kobj, &ktype_em_pd, em_kobject,
+				   "pd%u", cpu);
+	if (ret)
+		pr_err("pd%d: failed kobject_init_and_add(): %d\n", cpu, ret);
+
 	return pd;
 
 free_cs_table:
@@ -155,6 +236,15 @@ int em_register_perf_domain(cpumask_t *span, unsigned int nr_states,
 	 */
 	mutex_lock(&em_pd_mutex);
 
+	if (!em_kobject) {
+		em_kobject = kobject_create_and_add("energy_model",
+						&cpu_subsys.dev_root->kobj);
+		if (!em_kobject) {
+			ret = -ENODEV;
+			goto unlock;
+		}
+	}
+
 	for_each_cpu(cpu, span) {
 		/* Make sure we don't register again an existing domain. */
 		if (READ_ONCE(per_cpu(em_data, cpu))) {
-- 
2.19.2

