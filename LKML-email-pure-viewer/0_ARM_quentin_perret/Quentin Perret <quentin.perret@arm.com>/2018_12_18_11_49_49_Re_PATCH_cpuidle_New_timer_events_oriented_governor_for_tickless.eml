Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  18 Dec 2018 21:10:19 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 0AC645805F0;
	Tue, 18 Dec 2018 03:50:05 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga006-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 18 Dec 2018 03:50:04 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Ah97ndREiPq6SuFumK6LVUJ1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75o8u8bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJWSJPAp2y?=
 =?us-ascii?q?YZYMAeoPMulXs5TyqFkAohulHQmhBvjiyiNUinLswaE2z/4sHR/A0Qc9H9wOqn?=
 =?us-ascii?q?PUrNDtOakJTOC60q/IzSnCb/NQxDzz8pbHcgo7of6SQbJ7bM3cyVAyFwzbiFWQ?=
 =?us-ascii?q?tY3lPzWP2uQVrWeb9fBgWvyzi2M8sQ5xuD2vyt0whYnOg4IY01bJ/jh6zoYtPd?=
 =?us-ascii?q?C0VlJ3bNq+HJdNuSyWKZF6Tt4hTm10oio3y78LtYalcCQXypkr3QPTZvObf4SS?=
 =?us-ascii?q?/x7vSPudLS16iX55fr+0mgy8/lK6yuLmU8m5yFZKoTRBktnLrn0NyRPT5dadSv?=
 =?us-ascii?q?dn/UeuxyyP1wbN5eFAO0w0krDbK5E5zr4xkJocr1jDEzfolEnqiKKabFgo9+a2?=
 =?us-ascii?q?5+j9f7nrpYOQO5V1hwz8Kqgun9awAeU8MggARWib/uG82aXn/U34RrVKk/I3nr?=
 =?us-ascii?q?DasJ/EP8QboLC2AwtM3oYk5Re/CSmp0M4DkHkZI1JKZgiHg5LqO17QOvD4C+mw?=
 =?us-ascii?q?g1C2nDds3fDGMaXtAo/RIXjbjLfhYbF95lZYyAoyztBQ+YhYC74cIP/oXk/xtd?=
 =?us-ascii?q?rYDgI2MgCuwubnDsl92Z0aWW6VHqCZN6bSu0eS5u0zO+mMeJMVuDHlJvgl/fHu?=
 =?us-ascii?q?jGM5lkUafaWz3ZsXdWq3HvJpI0iCZXrsg9EBEXoFvwYkTezqjkGCXiBXZ3qoQ6?=
 =?us-ascii?q?084TQ7Apq8DYjfXoCtnKCB3CCjE51UYWBJFEqAEXTvd4WCXfcMbzmfIstgkjwC?=
 =?us-ascii?q?SLigRJUt1RCotA/m1bVnKvDY9TEftZLmzNJ1/fHclQku9TxoCMSQy3uCT3p0nm?=
 =?us-ascii?q?MPRD86xrp/rlZ/ylqY1ah4gvpYFcFc5v9TUwc6M4LcwPJ+C9zoRg3BedKJQk68?=
 =?us-ascii?q?Qtq6GTExUs4xw9gWbkZ+AdqiiArP3y6rA7APkbyLC4c58qbd33j3OsZ8xGzK1K?=
 =?us-ascii?q?gnj1k6XMRPMXeqibJ49wjWH4TJiVmWl762daQA2y7A7HqMwnCQvE5GSgJwUb/K?=
 =?us-ascii?q?XXYEZkTIq9T14UfCT7yrCbQjKQZBzc+CKq1Xatzml1lGRfHjOMjAbGK1gWu/GR?=
 =?us-ascii?q?GIxraUZorwZ2odxDndCFQDkw0L4HmJLxY+CTm7r2LeFjNuE0nvbF3q8eRlrHO7?=
 =?us-ascii?q?T0k0zxyFbkF71rq1/AIViuKYS/8Jwr0EvyIhoS1uHFmhx9LWF8aApw15caVAYN?=
 =?us-ascii?q?M95VBH1X7Ztw19JJCgM7puhlkEcwRzvkPu0Rp3B55EkcgrqnMq0QVzJbiZ0FNH?=
 =?us-ascii?q?azOXw5TwNqfLJWn1+RClc7TW1U3G0NaK5qcP7+w1pE/nvA63GUst7XVm38NO3H?=
 =?us-ascii?q?uB+5rFFgwSUZH2UkYp7BV6o7DaYi8g54Lbz3FsMK+0siPc1NItHucq1hGgf9JH?=
 =?us-ascii?q?OqOeCADyC9EaB9SpKOEym1mpcwgIM/xI+K81P8Opbf2G2KGwMeZknTKmi3lH4Y?=
 =?us-ascii?q?9n3kKN8Sp8VvDH35Ifz/6E2QuHUi/2jE29vcDvhYBEeTYSE3KlySjlGIFefLdy?=
 =?us-ascii?q?cpsMCWu0Jc242M9+h5/0V3FE7lGjA04J19GzeRqVaVzwxglQ1UURoXy6liq01T?=
 =?us-ascii?q?10kzc1rqWB2CzC2fjtdB0COmRTXmltkU/sIZSoj9AdREWpbwkpmAGl5Erg3Khb?=
 =?us-ascii?q?uaJ/InLXQUdJeSj2Mm5jXrGxtrqEf85A9pcovT9LX+S7ZFCQUqT9rAcC0yP/A2?=
 =?us-ascii?q?tewyg2dzOwtZXjnBx6i2WdIGxorHXDesFwxhbf5NrCSv5XxTcGQCh4iT/KBlmz?=
 =?us-ascii?q?JdWp/NOUl4vdveC6TW6uSppTcSzzx4OaqCS7/XFqAQG4n/2rmtzoCw863TX519?=
 =?us-ascii?q?lrUyXFtxL8Yojt16SnPuNrZEhoBFng68VkHoFyiJc/hJYV2XICnJWa4WIHkXvv?=
 =?us-ascii?q?MdVcwa/+b2ACRT8Rz97V/QjqwktjLn2SyoL9V3WdxNZhZtagbmMX3CI9895FCK?=
 =?us-ascii?q?OO4LNYmit1p0KyrRjNbvhlgjcd1fwu5WYfg+EIuwoi1D+RA74MEklDISzjiQ6I?=
 =?us-ascii?q?4Mugo6VNa2aiaryw1Et4ndC8A7COuABcWHDlepg8GS989NlwMFXJ0Hfr8IHrZM?=
 =?us-ascii?q?HQbc4Pth2TixrAk+9VKJcrmvsLnyVnP3/9vWY+y+46lhFu2ZC6vI6aK2Ri5q65?=
 =?us-ascii?q?AxhYNiHraMMX4D3ikaFensOO1YC1ApphAikLXIfvTf+wCz0dr/PnNwKTEDEmrn?=
 =?us-ascii?q?ebBKHSHQue6EdgsnLOHIqnN3CRJHkF09piQAORK1BYgAARRD86hII2Fhi2xMz9?=
 =?us-ascii?q?d0d0/jIR6UT9qhRS0eJkLQX/Xn3cpAe1aTc0VZ6fIwBN7gxZ40fVMMqe7v98Hi?=
 =?us-ascii?q?1C/52hqhCNJXKfZwhSEW4JXUmEDUj5Pray/dnA7/SYBu2mIvrOZrWOtPVeV+qS?=
 =?us-ascii?q?ypKpyIdm5DGMNsOAPnR5C/0720xDXW12GsjDmjUPTTAXmDzJb8KBuBi8/Sh3pN?=
 =?us-ascii?q?il8Pv3QALv+ZePC7xKPNVv5R+2gKSDN+2RhCpjKjZYzJQMxXDWx7gFwV4SkDpj?=
 =?us-ascii?q?dz2sEbQGqC7MQ7jcmq5RDx4HdSxzMNFE4L473glIIcTbkM/61qZkjv4pDFdITU?=
 =?us-ascii?q?bumtyyaswQPW68NEnLBEKKNLmdIT3Lwsf3Yb6zSLFKjeVUsQGwtiifE0P5IjuD?=
 =?us-ascii?q?kDzpXQi1Me5QlCGbIABeuIalfxZxCGjjScjqZQGhPNBrjT0537s0i2jONW4dNz?=
 =?us-ascii?q?h8bkxMoqeR7SNenvVwBWhB4mB5IumDniaT9/PYJYoOsft3HiR0kPpX4XQgxLtT?=
 =?us-ascii?q?6SFERfp1lzPTr95uuV6mlOaPxyFjUBpPrDZLmY2KsV9jOaXf6plPR3LE8AgR4m?=
 =?us-ascii?q?WXDhRZ7+diX5fVsq5Zx9yHtuS7FyZZ9NnX/IFUU9LWN+qdMmUwKh3iGz+SCgYZ?=
 =?us-ascii?q?G22FL2ba0nVAnfeO93vdlpUgsJXw0M4XV7JdSF0zUOsXEF5oAPQLOpIxVTQhx+?=
 =?us-ascii?q?3IxPUU7Gaz+UGCDP5RuYrKA7fLWa3i?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AEAACP3Rhch0O0hNFkGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUQYBAQELAYFaghGMPF+LGoINFGiWXoIzAYdfIjQJDQEDAQEBAQEBAgE?=
 =?us-ascii?q?TAQEBCgsJCCkvgjYkAYJiAwMBAiQTPwYJAQEKISUDDEgGGIJSS4IBBAGoSDOKO?=
 =?us-ascii?q?4w/gVc/gRGCXQcuimACiSIJghCVaQcCgiUEjyskDJFLinCQSYIOMxojgz2CJhd?=
 =?us-ascii?q?/AQmNFD8BAYE2AQGNcAMBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AEAACP3Rhch0O0hNFkGwEBAQEDAQEBBwMBAQGBUQYBAQE?=
 =?us-ascii?q?LAYFaghGMPF+LGoINFGiWXoIzAYdfIjQJDQEDAQEBAQEBAgETAQEBCgsJCCkvg?=
 =?us-ascii?q?jYkAYJiAwMBAiQTPwYJAQEKISUDDEgGGIJSS4IBBAGoSDOKO4w/gVc/gRGCXQc?=
 =?us-ascii?q?uimACiSIJghCVaQcCgiUEjyskDJFLinCQSYIOMxojgz2CJhd/AQmNFD8BAYE2A?=
 =?us-ascii?q?QGNcAMBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,367,1539673200"; 
   d="scan'208";a="56805893"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 18 Dec 2018 03:50:03 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726583AbeLRLuA (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 18 Dec 2018 06:50:00 -0500
Received: from usa-sjc-mx-foss1.foss.arm.com ([217.140.101.70]:44168 "EHLO
        foss.arm.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726364AbeLRLuA (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 18 Dec 2018 06:50:00 -0500
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.72.51.249])
        by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id 8F92E80D;
        Tue, 18 Dec 2018 03:49:59 -0800 (PST)
Received: from queper01-ThinkPad-T460s (queper01-ThinkPad-T460s.cambridge.arm.com [10.1.30.210])
        by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPSA id A2B2F3F5C0;
        Tue, 18 Dec 2018 03:49:56 -0800 (PST)
Date: Tue, 18 Dec 2018 11:49:49 +0000
From: Quentin Perret <quentin.perret@arm.com>
To: "Rafael J. Wysocki" <rjw@rjwysocki.net>
Cc: Linux PM <linux-pm@vger.kernel.org>,
        Giovanni Gherdovich <ggherdovich@suse.cz>,
        Doug Smythies <dsmythies@telus.net>,
        Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>,
        Peter Zijlstra <peterz@infradead.org>,
        LKML <linux-kernel@vger.kernel.org>,
        Frederic Weisbecker <frederic@kernel.org>,
        Mel Gorman <mgorman@suse.de>,
        Daniel Lezcano <daniel.lezcano@linaro.org>,
        "Chen, Hu" <hu1.chen@intel.com>, lorenzo.pieralisi@arm.com
Subject: Re: [PATCH] cpuidle: New timer events oriented governor for tickless
 systems
Message-ID: <20181218114949.c6npu357fj65l5iv@queper01-ThinkPad-T460s>
References: <128769314.7imKxugEn6@aspire.rjw.lan>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <128769314.7imKxugEn6@aspire.rjw.lan>
User-Agent: NeoMutt/20171215
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi Rafael,

I skimmed through the previous versions, but apologies if some of these
things have been discussed already :-)

On Tuesday 18 Dec 2018 at 12:09:05 (+0100), Rafael J. Wysocki wrote:
<...>
> + * - Find an idle state on the basis of the sleep length and state statistics
> + *   collected over time:
> + *
> + *   o Find the deepest idle state whose target residency is less than or euqal

s/euqal/equal


<...>
> +/**
> + * struct teo_idle_state - Idle state data used by the TEO cpuidle governor.
> + * @early_hits: "Early" CPU wakeups "matching" this state.
> + * @hits: "On time" CPU wakeups "matching" this state.
> + * @misses: CPU wakeups "missing" this state.
> + *
> + * A CPU wakeup is "matched" by a given idle state if the idle duration measured
> + * after the wakeup is between the target residency of that state and the target
> + * residnecy of the next one (or if this is the deepest available idle state, it

s/residnecy/residency

> + * "matches" a CPU wakeup when the measured idle duration is at least equal to
> + * its target residency).
> + *
> + * Also, from the TEO governor prespective, a CPU wakeup from idle is "early" if

s/prespective/perspective

> + * it occurs significantly earlier than the closest expected timer event (that
> + * is, early enough to match an idle state shallower than the one matching the
> + * time till the closest timer event).  Otherwise, the wakeup is "on time", or
> + * it is a "hit".
> + *
> + * A "miss" occurs when the given state doesn't match the wakeup, but it matches
> + * the time till the closest timer event used for idle state selection.
> + */


<...>
> +static void teo_update(struct cpuidle_driver *drv, struct cpuidle_device *dev)
> +{
> +	struct teo_cpu *cpu_data = per_cpu_ptr(&teo_cpus, dev->cpu);
> +	unsigned int sleep_length_us = ktime_to_us(cpu_data->sleep_length_ns);
> +	int i, idx_hit = -1, idx_timer = -1;
> +	unsigned int measured_us;
> +
> +	if (cpu_data->time_span_ns >= cpu_data->sleep_length_ns) {
> +		/*
> +		 * One of the safety nets has triggered or this was a timer
> +		 * wakeup (or equivalent).
> +		 */
> +		measured_us = sleep_length_us;
> +	} else {
> +		unsigned int lat = drv->states[cpu_data->last_state].exit_latency;
> +
> +		measured_us = ktime_to_us(cpu_data->time_span_ns);
> +		/*
> +		 * The delay between the wakeup and the first instruction
> +		 * executed by the CPU is not likely to be worst-case every
> +		 * time, so take 1/2 of the exit latency as a very rough
> +		 * approximation of the average of it.
> +		 */
> +		if (measured_us >= lat)
> +			measured_us -= lat / 2;
> +		else
> +			measured_us /= 2;

I'm not sure to understand this; why not removing lat/2 in all cases and
cap at 0 ?

> +	}


<...>
> +	/*
> +	 * Save idle duration values corresponding to non-timer wakeups for
> +	 * pattern detection.
> +	 *
> +	 * If the total time span between idle state selection and the "reflect"
> +	 * callback is greater than or equal to the sleep length determined at
> +	 * the idle state selection time, the wakeup is likely to be due to a
> +	 * timer event.

Should this paragraph go above the first 'if' of this function ? It
checks the same thing and it took me some time to understand what you
were doing while the explanation I needed was down here all along :-)

> +	 */
> +	if (cpu_data->time_span_ns >= cpu_data->sleep_length_ns)
> +		measured_us = UINT_MAX;
> +
> +	cpu_data->intervals[cpu_data->interval_idx++] = measured_us;
> +	if (cpu_data->interval_idx > INTERVALS)
> +		cpu_data->interval_idx = 0;
> +}


<...>
> +		/*
> +		 * Count and sum the most recent idle duration values less than
> +		 * the target residency of the state selected so far, find the
> +		 * max.
> +		 */
> +		for (i = 0; i < INTERVALS; i++) {
> +			unsigned int val = cpu_data->intervals[i];
> +
> +			if (val >= drv->states[idx].target_residency)
> +				continue;
> +
> +			count++;
> +			sum += val;
> +		}
> +
> +		/*
> +		 * Give up unless the majority of the most recent idle duration
> +		 * values are in the interesting range.
> +		 */
> +		if (count > INTERVALS / 2) {

I understand this probably works well enough in practice, but how 'robust'
is supposed to be this filtering here ? If you have, say, 2 tasks with
prime periods, then the hyper-period (which is when the pattern repeats)
can get high really quickly, and you'll never see the full extent of
that pattern with this mechanism.

Yes, it's hard to do much better without introducing tons of complexity
in here, but how did you define INTERVALS=8 and so ? Is this something
you'd like to make configurable at some point ? I guess this could
always be done later if need be.

> +			unsigned int avg_us = div64_u64(sum, count);
> +
> +			/*
> +			 * Avoid spending too much time in an idle state that
> +			 * would be too shallow.
> +			 */
> +			if (!(tick_nohz_tick_stopped() && avg_us < TICK_USEC)) {

IIUC, this is saying we shouldn't trust the predicted sleep time if it
is shorter than the tick and the tick is stopped. What is the use case
you have in mind for this ?

In other words, in which scenario do you expect to see a lot of high
frequency non-timer-related wake-ups and have the tick disabled ?

> +				idx = teo_find_shallower_state(drv, dev, idx, avg_us);
> +				duration_us = avg_us;
> +			}
> +		}
> +	}

Thanks,
Quentin
