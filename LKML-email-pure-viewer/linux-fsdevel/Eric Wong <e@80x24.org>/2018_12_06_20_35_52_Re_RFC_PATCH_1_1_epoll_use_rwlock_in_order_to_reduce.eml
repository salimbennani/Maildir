Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:53:12 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id EF4D85804F9;
	Thu,  6 Dec 2018 12:36:12 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 12:36:12 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A3xEzqhUAIr+nyknNQCcGYEgqyf7V8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhGEvKdThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGo2y?=
 =?us-ascii?q?YYsRAeQcPuhYoYbyqEcTohS8HgmsHOHixyRUhnPqx6A2z/gtHR3Y0AEmAtkAsG?=
 =?us-ascii?q?7UrNLwNKoKXu611qjIwineZPxW3jf97ofIeQ0mrP6SRr99ctbdyEYxGw7KlFmQ?=
 =?us-ascii?q?rpblPzyM2+kLrmOV4e1gVee1hG4mrQF8ujuvydk2ionPmI0VzkrI9SJjwIY6Pd?=
 =?us-ascii?q?G3U0l7YdGjEJtVtiGaL5B2TtklQ2FytyY20qUGuYOgcygOyZQo2wfTa/2Bc4eT?=
 =?us-ascii?q?5RLiW/ydITBihHJqYL6+hxay/lO8yuHmUMm7zkpKoyxYmdfPrnAAzwLf5tSDR/?=
 =?us-ascii?q?dn40us1yiD2xrO5uxHPUw4j6vWJpw5zrMxmZcfq0bOEjLslEnrjKKaaF8o9+mn?=
 =?us-ascii?q?5unhf77ovIWTN5VuhQH7KqkumtKwAeA/MgUWQWib9vqz1Kf58U36XrpKlPs2nb?=
 =?us-ascii?q?fdsJzAIsQbvKG5DxdU0oYl9Rm/Ey+r3MoEkXQDNl5JZRyKg5bzN13TI/30Ee2z?=
 =?us-ascii?q?jlWunTtzwvDJJLzhApHDLnjZl7fheK5w60pdyAo10NBe6ItYCrIfL/LpXE/+qt?=
 =?us-ascii?q?jYAgY+Mw26xeboFs9925gAWWKAHKCZKrnesVyW6eI1JemDeosVtCz6K/g/6P7i?=
 =?us-ascii?q?lWU5lkMFfam1wZsXb2i1HvBnI0Waf3XgmNgAEXoRswo6TezqjkCCUDFJa3azWa?=
 =?us-ascii?q?I8+i80CIa8AYjfQYCthaSL3D2nEZ1OemBGFleMHG/od4qeWvcMdDidIsh7njwE?=
 =?us-ascii?q?SLiuUYkh1R61uQ/+yrpnKPfU+yICuZLi0th1+/PclRUo+TNoCMSd1nmHT3tokW?=
 =?us-ascii?q?MQWz82wKd/rFR/yleEz6d0mf9YFdtV5/NPVQc3Lprcz+18C9DvVQPNZNaJSFC6?=
 =?us-ascii?q?Qtq4BTE9VM4+w9gLY0xlAdWtkgjD3za2A78Sj7GEHoc08qLb33jyPcp90WzJ1K?=
 =?us-ascii?q?s6glkiQ8tPM3Cmh6Fl+wjSAY7Jj1uWl6KweasA2y7N8X+JzXCSs0FATA5wTaLF?=
 =?us-ascii?q?UGgcZkTMq9T1/EfCT760BrQhPQtM0sqCKqpMat30glRKXvbjONLCY22vn2e8Hw?=
 =?us-ascii?q?qHxrSJbIDyYWUSwD3dCFQYkwAU5XuJKBIxBjm/rG7EDDxhD1TvY1jy/ul4r3+7?=
 =?us-ascii?q?Skw0zwSOb0B607q1+xgVheGTSv8J37IEvjshpCtwHFqnw93WDN+ArRJ7fKpAed?=
 =?us-ascii?q?M9/EtH1WXBugNgJJOgMb5tikQecwttuUPuzAt4CoNbnMgurXMqyhdyKK2C3FNA?=
 =?us-ascii?q?cTOYwY7/OrnNJmbu+xCvbrbc2kvC39aO5qcP9PM4pk3/vAGoE0oi9Gln09lV0n?=
 =?us-ascii?q?eG+pXGFg0SUYj1UkY28Rh6qKrXYi0854PSyH1tPrO4sj7E29I1GuQlzgyscMtY?=
 =?us-ascii?q?MKOBDAXyCdEVB9CyKOw2nFikdggLPORM+687Icynd+GK17W2POl9hj2mi2dH4I?=
 =?us-ascii?q?dj0k+X8yp8S+jI34sKwv2C3wuHUSv8g0mlsszthY9EYjQSFHKlySf4HI5RerFy?=
 =?us-ascii?q?fYETBGauPs273Mlxi4TsWn5Y7lGjAVwG1dSteRqTaVz9wAJR2V4WoXyhhSu30T?=
 =?us-ascii?q?h0nys1oaqY2SzE2/7iewYfOm5XWGliik/hIZK1j98GRkeodRUmlBy/6Ub82adb?=
 =?us-ascii?q?vqV/I3DPTkhSeyj5Mn9tUrG3trqEeMNP7JIosSNKUOWze1yaS7j9owcE3CPnBW?=
 =?us-ascii?q?dR2Dc7dzSysJXjgxN6kH6dLGp0rHfBecBwxA3T5dzGSf5KwzoGQjJ1iT3WBli6?=
 =?us-ascii?q?Itmo8s+Yl5bFsuCiSW2hUodffjXszYOFrCG7/3FlAQWjn/Cvnd3qCQo63jXh19?=
 =?us-ascii?q?lpViXIqwzwYpLx2KS5MuJnf09oC0H668dhHoF+k40whIwf2HQAh5WV+2YHnnn3?=
 =?us-ascii?q?MdlBxa3+a38NTyYRw9HJ+AjlxFFjLnWRyoP5THqdxdFtZ9u7YmMQwS8968FKCK?=
 =?us-ascii?q?GJ7L1Lhyd1o1y4rR7Pbvh5hDsS1fwu6HsCieETpAUt1jmdAqwVHURAPizjjRWI?=
 =?us-ascii?q?48q+rKVKfmmvd7ew2VF6ndCgCrGCvw5dVGz4epckAS9/8MF/PEjQ333074HuYM?=
 =?us-ascii?q?PQYs4Lth2IjxfAiPBYKJcwlvoJnyVrI2z8smM+y+4nkxNux4q1s5adK2Vi56+5?=
 =?us-ascii?q?Bh9YNjvoZ8Ic4D3tjKBentqI0ICrBJluBjILXJ7wR/KyDD0SrejnNxqJEDAktn?=
 =?us-ascii?q?ebHr/fERWe6Uh8qXLPDourN2qWJHQCydViRR+dJFFQgQwOXTU6mII5GR6uxMD7?=
 =?us-ascii?q?bEh54TUR7EbiqhRQ0uJoKwX/UmDHqQizcDg0T5yfLAdM4gFG+kfYKsie7uN1Hy?=
 =?us-ascii?q?FF8Zyttg2NKmqHZwtWCWEFQFCLB1fmPrO2/9nP7/CYBvaiL/vJebiOq/ZRV/KW?=
 =?us-ascii?q?ypK0yIdm4yyANsaSPnlhEv073FBMXWtiFsTdmjUPTTEXli3XY86aohe85jN4rs?=
 =?us-ascii?q?Sl/Pv3XwLv4JOFC6FOPtV35xC2naCDOvaQhSZ+NDZYz44MymXOyLQFx14SjCdu?=
 =?us-ascii?q?dza2HLQEtC7NSr/Qm6BNAx4abSNzKNVH76Ym0gZRPs7bj8v/1qRkgf4tF1dFSV?=
 =?us-ascii?q?vhl9mpZcMUImG9N1DHBEeROLSFPz3LxM73br2mSb1Nl+VZrBmwuTedE0/+MTWP?=
 =?us-ascii?q?jTjpVxazMe5SiCGXJgBRuIa4chx1E2jsUMrmagGnMN9wlTA526A0iWjQNWECMT?=
 =?us-ascii?q?lwaUdNrryL4CNcg/V/HXFB73V/IemFnSaZ8/fXKpIMvfR3BSR0kvpQ4G4mxLtN?=
 =?us-ascii?q?8CFEWPt1lTPOrt5vplGqiPWAxiB7XxpOtDlLgpmGvUFjOaXf65lBVmzI/BML7W?=
 =?us-ascii?q?WMFRsKo8FpBcHou6BV0tLPjr78KC9e89LI+ssRH8jVJ9iBMHokMBrpHibbDQoF?=
 =?us-ascii?q?TTGxM2HfiFdQkPWT9n2Ts5g7pYLgmJsISr9HSlM1EukWBVhiHNwHc99LWWYelr?=
 =?us-ascii?q?uSioYw6HyvpRTPDJFApp3BR/ufH930NS2Uy7VJMUgm27T9eKkJN4az5EtkZREu?=
 =?us-ascii?q?kayaQ1qKAZZKuCI3PVx8m1lE7HUrFj574EnicA74pSZLTfM=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AOAADVhwlch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgmmBAieEXIc3X4swgg0UjXkRhDeEeYFzLA0GAYdXIjQJDQEDAQE?=
 =?us-ascii?q?BAQEBAgETAQEBCA0JCCkjDII2JAGCYQEBAQECAQECNz8FAQkBAQoOCgklAwxIB?=
 =?us-ascii?q?hMFD4MNAYF5CAUKp3mELQGFdwWMH4IWgRGDEoMFGQQYgR8Mg1GCJgKgXwgBhwS?=
 =?us-ascii?q?DN4cAIwqRLCyEI4krjFiCDTMaMEOCbBIBDIIIFxKIETuFPz8BMoEFAQGHfII+A?=
 =?us-ascii?q?QE?=
X-IPAS-Result: =?us-ascii?q?A0AOAADVhwlch0O0hNFjHAEBAQQBAQcEAQGBUQcBAQsBgmm?=
 =?us-ascii?q?BAieEXIc3X4swgg0UjXkRhDeEeYFzLA0GAYdXIjQJDQEDAQEBAQEBAgETAQEBC?=
 =?us-ascii?q?A0JCCkjDII2JAGCYQEBAQECAQECNz8FAQkBAQoOCgklAwxIBhMFD4MNAYF5CAU?=
 =?us-ascii?q?Kp3mELQGFdwWMH4IWgRGDEoMFGQQYgR8Mg1GCJgKgXwgBhwSDN4cAIwqRLCyEI?=
 =?us-ascii?q?4krjFiCDTMaMEOCbBIBDIIIFxKIETuFPz8BMoEFAQGHfII+AQE?=
X-IronPort-AV: E=Sophos;i="5.56,323,1539673200"; 
   d="scan'208";a="54878328"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 06 Dec 2018 12:35:56 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726043AbeLFUfx (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 6 Dec 2018 15:35:53 -0500
Received: from dcvr.yhbt.net ([64.71.152.64]:49490 "EHLO dcvr.yhbt.net"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1725935AbeLFUfx (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 6 Dec 2018 15:35:53 -0500
Received: from localhost (dcvr.yhbt.net [127.0.0.1])
        by dcvr.yhbt.net (Postfix) with ESMTP id 82E7E211B3;
        Thu,  6 Dec 2018 20:35:52 +0000 (UTC)
Date: Thu, 6 Dec 2018 20:35:52 +0000
From: Eric Wong <e@80x24.org>
To: Roman Penyaev <rpenyaev@suse.de>
Cc: Alexander Viro <viro@zeniv.linux.org.uk>,
        "Paul E. McKenney" <paulmck@linux.vnet.ibm.com>,
        Linus Torvalds <torvalds@linux-foundation.org>,
        linux-fsdevel@vger.kernel.org, linux-kernel@vger.kernel.org,
        Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Subject: Re: [RFC PATCH 1/1] epoll: use rwlock in order to reduce
 ep_poll_callback() contention
Message-ID: <20181206203552.GA20162@dcvr>
References: <20181203110237.14787-1-rpenyaev@suse.de>
 <20181205234649.ssvmv4ulwevgdla4@dcvr>
 <39192b9caf1114c95cd23e786a9c3e60@suse.de>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <39192b9caf1114c95cd23e786a9c3e60@suse.de>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Roman Penyaev <rpenyaev@suse.de> wrote:
> On 2018-12-06 00:46, Eric Wong wrote:
> > Roman Penyaev <rpenyaev@suse.de> wrote:
> > > Hi all,
> > > 
> > > The goal of this patch is to reduce contention of ep_poll_callback()
> > > which
> > > can be called concurrently from different CPUs in case of high events
> > > rates and many fds per epoll.  Problem can be very well reproduced by
> > > generating events (write to pipe or eventfd) from many threads, while
> > > consumer thread does polling.  In other words this patch increases the
> > > bandwidth of events which can be delivered from sources to the
> > > poller by
> > > adding poll items in a lockless way to the list.
> > 
> > Hi Roman,
> > 
> > I also tried to solve this problem many years ago with help of
> > the well-tested-in-userspace wfcqueue from Mathieu's URCU.
> > 
> > I was also looking to solve contention with parallel epoll_wait
> > callers with this.  AFAIK, it worked well; but needed the
> > userspace tests from wfcqueue ported over to the kernel and more
> > review.
> > 
> > I didn't have enough computing power to show the real-world
> > benefits or funding to continue:
> > 
> > 	https://lore.kernel.org/lkml/?q=wfcqueue+d:..20130501
> 
> Hi Eric,
> 
> Nice work.  That was a huge change by itself and by dependency
> on wfcqueue.  I could not find any valuable discussion on this,
> what was the reaction of the community?

Hi Roman, AFAIK there wasn't much reaction.  Mathieu was VERY
helpful with wfcqueue but there wasn't much else.  Honestly, I'm
surprised wfcqueue hasn't made it into more places; I love it :)

(More recently, I started an effort to get glibc malloc to use wfcqueue:
https://public-inbox.org/libc-alpha/20180731084936.g4yw6wnvt677miti@dcvr/ )

> > It might not be too much trouble for you to brush up the wait-free
> > patches and test them against the rwlock implementation.
> 
> Ha :)  I may try to cherry-pick these patches, let's see how many
> conflicts I have to resolve, eventpoll.c has been changed a lot
> since that (6 years passed, right?)

AFAIK not, epoll remains a queue with a key-value mapping.
I'm not a regular/experienced kernel hacker and I had no trouble
understanding eventpoll.c years ago.

> But reading your work description I can assume that epoll_wait() calls
> should be faster, because they do not content with ep_poll_callback(),
> and I did not try to solve this, only contention between producers,
> which make my change tiny.

Yes, I recall that was it.  My real-world programs[1], even without
slow HDD access, didn't show it, though.

> I also found your https://yhbt.net/eponeshotmt.c , where you count
> number of bare epoll_wait() calls, which IMO is not correct, because
> we need to count how many events are delivered, but not how fast
> you've returned from epoll_wait().  But as I said no doubts that
> getting rid of contention between consumer and producers will show
> even better results.

"epoll_wait calls" == "events delivered" in my case since I (ab)use
epoll_wait with max_events=1 as a work-distribution mechanism
between threads.  Not a common use-case, I admit.

My design was terrible from a syscall overhead POV, but my
bottleneck for real-world use for cmogstored[1] was dozens of
rotational HDDs in JBOD configuration; so I favored elimination
of head-of-line blocking over throughput of epoll itself.

My motivation for hacking on epoll back then was only to look
better on synthetic benchmarks that didn't hit slow HDDs :)



[1] git clone https://bogomips.org/cmogstored.git/
    the Ragel-generated HTTP parser was also a bottleneck in
    synthetic benchmarks, as we
