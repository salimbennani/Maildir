Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 20 Nov 2018 00:28:18 -0000
Received: from icoremail.net (unknown [209.85.214.179])
	by mail-app2 (Coremail) with SMTP id by_KCgDnX_tpC_JbC4W0AQ--.53465S3;
	Mon, 19 Nov 2018 09:01:30 +0800 (CST)
Received: from mail-pl1-f179.google.com (unknown [209.85.214.179])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwB3XEgzCvJbXu5TAA--.1762S3;
	Mon, 19 Nov 2018 08:56:19 +0800 (CST)
Received: by mail-pl1-f179.google.com with SMTP id u6so2827737plm.8
        for <xuliker@zju.edu.cn>; Sun, 18 Nov 2018 16:56:19 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-original-authentication-results:x-gm-message-state:delivered-to
         :from:to:date:cc:subject:message-id:mime-version:sender:precedence
         :list-id;
        bh=+3V7l3+uO6dSKRiPuYyVrhtaSavn8MIcmvQvTPp1yNE=;
        b=tXBrhhDTccwyud9AbmNPlvx9sfGECF6rfszXsp+hVAPmG9OKuxsAYS796GAscp8ox5
         mSVqZATjnwE9cMz2+co6Y7tllCNCWlRuXkjr9ZwuPVgls0B6XrY6m8LF5kaaK/KxPByw
         o8v6CfibkyEuHk+/83K8d1wCSwbamONs7c8rshjRwIREsPFvzcPU0tCjmp3cLu6leOu/
         l6cqC9zpEzpoUYMw2L+6hF7PYC85fGCYKTk9QuWYpJQZ5rJKRfCz5lSbc7ToDVT49ok/
         eJsymGS90O354+2Kmiq60bEyfQ9efibZraC/AJyQukFKwbi7J8VjL3Kx/q1z+QtOlOf9
         8C8w==
X-Original-Authentication-Results: mx.google.com;       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
X-Gm-Message-State: AGRZ1gKZWdejIF1484sYNIfshJSrQYC40TRxntcpeh1rYyVOg7Lrvusg
	BHbvcObzG77ICUmPq71EKwQG2zSArmPenTPdvPnR9B5itofVfSQ=
X-Received: by 2002:a17:902:9698:: with SMTP id n24-v6mr20765625plp.9.1542588979439;
        Sun, 18 Nov 2018 16:56:19 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:d106:0:0:0:0 with SMTP id l6-v6csp2054521pju;
        Sun, 18 Nov 2018 16:56:18 -0800 (PST)
X-Google-Smtp-Source: AJdET5cgXbary2I+hiFVcaDP5vuGJH2bfWCr0J9edeP3oiFXZDDa6g/JCDBVoT/XmXLdkqoRROvH
X-Received: by 2002:a17:902:bd92:: with SMTP id q18mr20290300pls.167.1542588978054;
        Sun, 18 Nov 2018 16:56:18 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542588978; cv=none;
        d=google.com; s=arc-20160816;
        b=lgnA7BDfSTjn7U0WRQWy4hvKbC20Hg0RrMaFaK1Js2F2vehoz9ZnQGc4UpswCDSXyA
         2C4BFp0Hebx9uOievzk/1GuSPmVmc3gIpLT9bTJakjY9t/Kkw1qUNxB9z4itN2knRkaX
         qDCs51clInDbtWH4V+8hT39apt/BLuEA/MKNiWHIZKSy63rc3JRnJWC9nIuQaUI4dRI0
         CWmQj+JX3y3WrK/XlNh8YK9Ofwd8hLU+mWBywAG4hnz9Lc7RjWqbYZd5xlNz0joHQUVz
         p5OwpjnltGhXpwCT/nG1GQOI631ZtfHH2oMDuhTvHod7Dv7q2tAw2RCV4+jYykhxXkcc
         BGVQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:mime-version:message-id:subject:cc:date
         :to:from;
        bh=+3V7l3+uO6dSKRiPuYyVrhtaSavn8MIcmvQvTPp1yNE=;
        b=apMwj10Ch6Uh1FJXJQauFr9QGbb+FBdmhNUqCAvT0il9JzL2ME5sl00xg8S6MgMQBT
         50AJZcyQX531QrFTE3mj4bchbK3aEjY8PFEgoATZ6cYw6oAtLgPK8dyG0pbTJF7snyxG
         OE0gKObPdqBD+/Q3NU/AbtrS73sZf1VrsFpy181LNC7I0j8p9ATnIIQRgxAlCZq9oAfx
         90n5CCVkj3HjhlXwNQPBveS04GxKeYvlVWw3w9xiWD5E6XP0jZGz3N0ucX5eg9MxU/4u
         igNkFmKKgHW13GN2Sl70sfNDwe7DZzXpszcE2b4ZOUPNDBlo/EEIV/c63nZ2EYMWncw+
         PM9w==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id w2si36359046pgs.264.2018.11.18.16.56.03;
        Sun, 18 Nov 2018 16:56:18 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726975AbeKSLRv (ORCPT <rfc822;piyush.popli@gmail.com>
        + 99 others); Mon, 19 Nov 2018 06:17:51 -0500
Received: from mx2.suse.de ([195.135.220.15]:37204 "EHLO mx1.suse.de"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1725919AbeKSLRv (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 19 Nov 2018 06:17:51 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (unknown [195.135.220.254])
        by mx1.suse.de (Postfix) with ESMTP id 5FC84AC43;
        Mon, 19 Nov 2018 00:55:55 +0000 (UTC)
From: NeilBrown <neilb@suse.com>
To: Jonathan Corbet <corbet@lwn.net>,
        Alexander Viro <viro@zeniv.linux.org.uk>
Date: Mon, 19 Nov 2018 11:55:46 +1100
Cc: linux-doc@vger.kernel.org, linux-fsdevel@vger.kernel.org,
        LKML <linux-kernel@vger.kernel.org>
Subject: [PATCH] Documentation: update path-lookup.md for parallel lookups
Message-ID: <87k1l9dgx9.fsf@notabene.neil.brown.name>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="=-=-=";
        micalg=pgp-sha256; protocol="application/pgp-signature"
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwB3XEgzCvJbXu5TAA--.1762S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoWxuFWftrWrJryUJryUWr4Durg_yoWfuw43pF
	W3WFnrKr1kXrZ2krn3Zrs7Xa4S9w40qr43Jr1vgrZ0krs8Wr92qr1xtr4YqFyxCrs5AF1q
	qF409ry5Can8A3DanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUQlb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Xr0_Ar1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1l84ACjcxK6I8E
	87Iv67AKxVW0oVCq3wA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_GcCE3s1lnx0Ee4C267I2x7
	xF54xIwI0E7I0Y6sxI4wAS0I0E0xvYzxvE52x082IY62kv0487M2AExVA0xI801c8C04v7
	Mc02F40EFcxC0VAKzVAqx4xG6I80ewAv7VC0I7IYx2IY67AKxVWUJVWUGwAv7VC2z280aV
	AFwI0_Jr0_Gr1lOx8S6xCaFVCjc4AY6r1j6r4UM4x0Y48IcVAKI48JMx02cVCv0xWlc7Cj
	xVAKzI0EY4vE52x082I5MxkFs20EY4vE44CYbxCE4x80FwCY02Avz4vEIxC_KwCY0x0Ix7
	I2Y4AK64vIr41lcIIF0xvE2Ix0cI8IcVAFwI0_JFI_Gr1lcIIF0xvE2Ix0cI8IcVCY1x02
	67AKxVWUJVW8JwCYIxAIcVC2z280aVAFwI0_Gr1j6F4UJwCYIxAIcVC2z280aVCY1x0267
	AKxVW8Jr0_Cr1UMxAIw28IcxkI7VAKI48JMxAIw28IcVAKzI0EY4vE52x082I5MxCjnVCj
	jxCrMxC20s026xCaFVCjc4AY6r1j6r4UMI8I3I0E5I8CrVAFwI0_Jr0_Jr4lx2IqxVCjr7
	xvwVAFwI0_JrI_JrWlx4CE17CEb7AF67AKxVWUAVWUtwCIc40Y0x0EwIxGrwCI42IY6xAI
	w20EY4v20xvaj40_Gr0_ZrUvcSsGvfC2KfnxnUUI43ZEXa7IUOUcTPUUUUU==

--=-=-=
Content-Type: text/plain
Content-Transfer-Encoding: quoted-printable


Since this document was written, i_mutex has been replace with
i_rwsem, and shared locks are utilized to allow lookups in the one
directory to happen in parallel.

So replace i_mutex with i_rwsem, and explain how this is used for
parallel lookups.

Signed-off-by: NeilBrown <neilb@suse.com>
=2D--

Just FYI

$ git grep -w i_mutex | wc -l
262

it was 276 before this patch... so a small improvement.

NeilBrown


 Documentation/filesystems/path-lookup.md | 85 ++++++++++++++++++------
 1 file changed, 66 insertions(+), 19 deletions(-)

diff --git a/Documentation/filesystems/path-lookup.md b/Documentation/files=
ystems/path-lookup.md
index e2edd45c4bc0..06151b178f80 100644
=2D-- a/Documentation/filesystems/path-lookup.md
+++ b/Documentation/filesystems/path-lookup.md
@@ -12,6 +12,10 @@ This write-up is based on three articles published at lw=
n.net:
 - <https://lwn.net/Articles/650786/> A walk among the symlinks
=20
 Written by Neil Brown with help from Al Viro and Jon Corbet.
+It has subsequently been updated to reflect changes in the kernel
+including:
+
+- per-directory parallel name lookup.
=20
 Introduction
 ------------
@@ -231,37 +235,80 @@ renamed.  If `d_lookup` finds that a rename happened =
while it
 unsuccessfully scanned a chain in the hash table, it simply tries
 again.
=20
=2D### inode->i_mutex ###
+### inode->i_rwsem ###
=20
=2D`i_mutex` is a mutex that serializes all changes to a particular
+`i_rwsem` is a read/write semaphore that serializes all changes to a parti=
cular
 directory.  This ensures that, for example, an `unlink()` and a `rename()`
 cannot both happen at the same time.  It also keeps the directory
 stable while the filesystem is asked to look up a name that is not
=2Dcurrently in the dcache.
+currently in the dcache or, optionally, when the list of entries in a
+directory is being retrieved with `readdir()`.
=20
=2DThis has a complementary role to that of `d_lock`: `i_mutex` on a
+This has a complementary role to that of `d_lock`: `i_rwsem` on a
 directory protects all of the names in that directory, while `d_lock`
 on a name protects just one name in a directory.  Most changes to the
=2Ddcache hold `i_mutex` on the relevant directory inode and briefly take
+dcache hold `i_rwsem` on the relevant directory inode and briefly take
 `d_lock` on one or more the dentries while the change happens.  One
 exception is when idle dentries are removed from the dcache due to
=2Dmemory pressure.  This uses `d_lock`, but `i_mutex` plays no role.
+memory pressure.  This uses `d_lock`, but `i_rwsem` plays no role.
=20
=2DThe mutex affects pathname lookup in two distinct ways.  Firstly it
=2Dserializes lookup of a name in a directory.  `walk_component()` uses
+The semaphore affects pathname lookup in two distinct ways.  Firstly it
+prevents changes during lookup of a name in a directory.  `walk_component(=
)` uses
 `lookup_fast()` first which, in turn, checks to see if the name is in the =
cache,
 using only `d_lock` locking.  If the name isn't found, then `walk_componen=
t()`
=2Dfalls back to `lookup_slow()` which takes `i_mutex`, checks again that
+falls back to `lookup_slow()` which takes a shared lock on `i_rwsem`, chec=
ks again that
 the name isn't in the cache, and then calls in to the filesystem to get a
 definitive answer.  A new dentry will be added to the cache regardless of
 the result.
=20
 Secondly, when pathname lookup reaches the final component, it will
=2Dsometimes need to take `i_mutex` before performing the last lookup so
+sometimes need to take an exclusive lock on `i_rwsem` before performing th=
e last lookup so
 that the required exclusion can be achieved.  How path lookup chooses
=2Dto take, or not take, `i_mutex` is one of the
+to take, or not take, `i_rwsem` is one of the
 issues addressed in a subsequent section.
=20
+If two threads attempt to look up the same name at the same time - a
+name that is not yet in the dcache - the shared lock on `i_rwsem` will
+not prevent them both adding new dentries with the same name.  As this
+would result in confusion an extra level of interlocking is used,
+based around a secondary hash table (`in_lookup_hashtable`) and a
+per-dentry flag bit (`DCACHE_PAR_LOOKUP`).
+
+To add a new dentry to the cache while only holding a shared lock on
+`i_rwsem`, a thread must call `d_alloc_parallel()`.  This allocates a
+dentry, stores the required name and parent in it, checks if there
+is already a matching dentry in the primary or secondary hash
+tables, and if not, stores the newly allocated dentry in the secondary
+hash table, with `DCACHE_PAR_LOOKUP` set.
+
+If a matching dentry was found in the primary hash table then that is
+returned and the caller can know that it lost a race with some other
+thread adding the entry.  If no matching dentry is found in either
+cache, the newly allocated dentry is returned and the caller can
+detect this from the presence of `DCACHE_PAR_LOOKUP`.  In this case it
+knows that it has won any race and now is responsible for asking the
+filesystem to perform the lookup and find the matching inode.  When
+the lookup is complete, it must call `d_lookup_done()` which clears
+the flag and does some other house keeping, including removing the
+dentry from the secondary hash table - it will normally have been
+added to the primary hash table already.  Note that a `struct
+waitqueue_head` is passed to `d_alloc_parallel()`, and
+`d_lookup_done()` must be called while this `waitqueue_head` is still
+in scope.
+
+If a matching dentry is found in the secondary hash table,
+`d_alloc_parallel()` has a little more work to do. It first waits for
+`DCACHE_PAR_LOOKUP` to be cleared, using a wait_queue that was passed
+to the instance of `d_alloc_parallel()` that won the race and that
+will be woken by the call to `d_lookup_done()`.  It then checks to see
+if the dentry has now been added to the primary hash table.  If it
+has, the dentry is returned and the caller just sees that it lost any
+race.  If it hasn't been added to the primary hash table, the most
+likely explanation is that some other dentry was added instead using
+`d_splice_alias()`.  In any case, `d_alloc_parallel()` repeats all the
+look ups from the start and will normally return something from the
+primary hash table.
+
 ### mnt->mnt_count ###
=20
 `mnt_count` is a per-CPU reference counter on "`mount`" structures.
@@ -376,7 +423,7 @@ described.  If it finds a `LAST_NORM` component it firs=
t calls
 "`lookup_fast()`" which only looks in the dcache, but will ask the
 filesystem to revalidate the result if it is that sort of filesystem.
 If that doesn't get a good result, it calls "`lookup_slow()`" which
=2Dtakes the `i_mutex`, rechecks the cache, and then asks the filesystem
+takes `i_rwsem`, rechecks the cache, and then asks the filesystem
 to find a definitive answer.  Each of these will call
 `follow_managed()` (as described below) to handle any mount points.
=20
@@ -408,7 +455,7 @@ of housekeeping around `link_path_walk()` and returns t=
he parent
 directory and final component to the caller.  The caller will be either
 aiming to create a name (via `filename_create()`) or remove or rename
 a name (in which case `user_path_parent()` is used).  They will use
=2D`i_mutex` to exclude other changes while they validate and then
+`i_rwsem` to exclude other changes while they validate and then
 perform their operation.
=20
 `path_lookupat()` is nearly as simple - it is used when an existing
@@ -429,7 +476,7 @@ complexity needed to handle the different subtleties of=
 O_CREAT (with
 or without O_EXCL), final "`/`" characters, and trailing symbolic
 links.  We will revisit this in the final part of this series, which
 focuses on those symbolic links.  "`do_last()`" will sometimes, but
=2Dnot always, take `i_mutex`, depending on what it finds.
+not always, take `i_rwsem`, depending on what it finds.
=20
 Each of these, or the functions which call them, need to be alert to
 the possibility that the final component is not `LAST_NORM`.  If the
@@ -728,12 +775,12 @@ checking the `seq` number of the old exactly mirrors =
the process of
 getting a counted reference to the new dentry before dropping that for
 the old dentry which we saw in REF-walk.
=20
=2D### No `inode->i_mutex` or even `rename_lock` ###
+### No `inode->i_rwsem` or even `rename_lock` ###
=20
=2DA mutex is a fairly heavyweight lock that can only be taken when it is
+A semaphore is a fairly heavyweight lock that can only be taken when it is
 permissible to sleep.  As `rcu_read_lock()` forbids sleeping,
=2D`inode->i_mutex` plays no role in RCU-walk.  If some other thread does
=2Dtake `i_mutex` and modifies the directory in a way that RCU-walk needs
+`inode->i_rwsem` plays no role in RCU-walk.  If some other thread does
+take `i_rwsem` and modifies the directory in a way that RCU-walk needs
 to notice, the result will be either that RCU-walk fails to find the
 dentry that it is looking for, or it will find a dentry which
 `read_seqretry()` won't validate.  In either case it will drop down to
@@ -1134,7 +1181,7 @@ and `do_last()`, each of which use the same conventio=
n as
 to be followed.
=20
 Of these, `do_last()` is the most interesting as it is used for
=2Dopening a file.  Part of `do_last()` runs with `i_mutex` held and this
+opening a file.  Part of `do_last()` runs with `i_rwsem` held and this
 part is in a separate function: `lookup_open()`.
=20
 Explaining `do_last()` completely is beyond the scope of this article,
=2D-=20
2.19.0.216.g2d3b1c576c85


--=-=-=
Content-Type: application/pgp-signature; name="signature.asc"

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEG8Yp69OQ2HB7X0l6Oeye3VZigbkFAlvyChIACgkQOeye3VZi
gbmGfg//aYBm2AF+su3UhJ0yYZhxEtp0aNYRrBikuuTeMxmQQEgaGFfv5/DoTJn7
2iP1LVpikP77T+nzYq5eEdNnACtgIs3A3a28PUfQeOLMUgw3fTeOh+pkwBfL9Qpd
kH82iiCot2TKCxS1m9L3pTwT/SS4KvGWgujCIzRFfKwCaY9aUT1xsmUqKACXwWUn
5goYGlFHDJPE1p4eB+21XOwxLLMKzG9f2ad13YDo1IiKdhqg7cd3Yaqd2bD6OXk4
jTXR7hgLTB7eP2N1Vj5W99hKdVweqvUueF2ZHHO8ThJRU2H36qZTiBVO0hShAC8o
L2OwZN1dEKGb63R/Vs+xjpVknMQHbFb0rJDMFbtM/4amkX/EtMAiPnQWi05NvoYS
O0UR6w+2V9ttSqxj8fDSQbuWzTcTk7LCpdQtoxSM7lzc01Bal/2rPcd1PKiDd0jP
su3uAZGMdMUmnfGCJm0ullPKkKdagZa748dAvdCvG6JSvskdzj3aJSbOOhFXaNfd
v0msqM+r8vAIWeFkG/1EQIe2+QdN4oRmIjpWN6PwvgdcBjsnmJoEtGFMqvBdvmXu
6AnRqXofi5kltobLYHUX2mpbAf66tMikC+ijRoaUAzP0xCiyE2fR6y0VwCo1K361
DLt9D0mtCgynDHpGiYwgrnIh5dLMC7jjbO7HTbPUr98WM7NBZm4=
=KBLx
-----END PGP SIGNATURE-----
--=-=-=--
