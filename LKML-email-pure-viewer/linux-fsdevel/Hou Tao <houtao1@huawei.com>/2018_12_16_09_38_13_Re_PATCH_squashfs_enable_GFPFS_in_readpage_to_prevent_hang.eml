Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  17 Dec 2018 08:30:59 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 71C215807A0;
	Sun, 16 Dec 2018 01:38:21 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga003-1.jf.intel.com with ESMTP; 16 Dec 2018 01:38:21 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AzYTycBDZz9ZSV5W2bLAWUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7/pcmwAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VDK/5KlpVRDokj?=
 =?us-ascii?q?8KOSMn/mHZisJ+j6xVrxyuqBN934Hab4CVNOFmfq7fZt4aWWhMU9xNWyBdDI6x?=
 =?us-ascii?q?bY0CBPcBM+ZCqIn9okMDoxm5BQmxGejh1CVHhnjr1qA90+QhFhzG3BA6ENIJrX?=
 =?us-ascii?q?jZt9X1NLoIXuG70qbIzC/PYO9R2Tf48YXFdA0qr/KUXb9ob8bd1U0iGxnYglie?=
 =?us-ascii?q?t4DpJS6Z2+cRv2SB7udtV/qjh3M7pw1rvzSixMUhhpPHi44I0FzI6Cp0zJ46KN?=
 =?us-ascii?q?C4UkJ3f9GpHZ9Kuy2EKod6XNkuTm92tCs817YIo4S0fDIQx5Qi3xPfa+KIc4yP?=
 =?us-ascii?q?4h/7SuaRLil3hGh/dLK8mRmy606gxfP4VsWu11ZKtCVFnsHNtnALyRPT9tCKRu?=
 =?us-ascii?q?Vh8kqlwzqDyg7e5v9eLUwplqfXN4Qtz78ym5YLtETMBC72mEH4jK+McUUk//Cl?=
 =?us-ascii?q?6+DmYrXgu5+dOJZ4igLgPaQ0nMywH+A4PhEJX2mV/+Szyqfj8FbnQLVFkPI2iL?=
 =?us-ascii?q?PVsJPEKsQBoK62HQtV3pwk6xalADeqyM4YkmUfLFJZZBKHiJDkO1XPIPD7E/iz?=
 =?us-ascii?q?mVutkCpwyvDCP73hBIjNL3fZnLfge7Z991BTyA4pwd9D4JJUD6kLIOjvVU/pqN?=
 =?us-ascii?q?zYEhg5PhS0w+n9CdV9ypkRWWWVDq+ZLaPdq1mI5u00LumIZY8Vviv9Kvc/6/7v?=
 =?us-ascii?q?i385hUESfa2z0ZQLb3C4G+xsI1+Fbnr0ntcBDWAKsxI8TOztllKOSz1TZ3G0X6?=
 =?us-ascii?q?I64TE2E4amDYbFRoCwj72Nxia7HptKZm9YDlCAC2vnd4KBW/0UciKdPtdhkiAY?=
 =?us-ascii?q?VbimU4IuzwqutA/9y7pkNObU4DcXtZD42dhx5u3Tkwwy9DNuA8Sc1WGNU397nm?=
 =?us-ascii?q?cSSzAq26B/pFR3yk2f3qhgn/xYCdtT6utKUgggM57Q1eh6C9HoVQLHcdeEU1Km?=
 =?us-ascii?q?QtSgATEsQdM92d4OY0BhG9q8ihDPxTalA7gQl7aTHpw77rrc32TtJ8Z603vJyb?=
 =?us-ascii?q?Muj0c4TcdVNW2pnKh/9xPNCI7PlEmZk6WqdaEY3CPW8GeDzGyOvFxXUQJqUKXF?=
 =?us-ascii?q?W2wfaVXSrdjj+kzCSLquA6w9MgRd0c6CNrdKatrxgFpbXvjjJsrRb3ixm2iqAx?=
 =?us-ascii?q?aI3a2DbIzxdmUZ3SXdDlUEkg8J8XaHMwg+Gjmuo2bEADNyElLvZlvm8fNip3Oj?=
 =?us-ascii?q?Uk800waKYlV917q0/x4VguCcS/MT374epCctsTJ0HEy539LXDdqAqBFsfKFdYd?=
 =?us-ascii?q?M7/VdG2njVtw17Ppy8Ma9igkQSfBhwv0Przx93EJlPkdA2rHM2ywp/MbiX0Fdf?=
 =?us-ascii?q?eDKXw5/xOqfbJXLv/B+ycaHW3FLe0NGI+qoU7PQ4qlPjvBymF0Y48nVn1cVV3G?=
 =?us-ascii?q?WY5pnQEAUSVpfxWF4t9xdmv7HafjU954TM2HxsLKm4qCPN18goBesl0Bmgedhf?=
 =?us-ascii?q?PbiAFA/zFc0aGsevJPYrm1ivchILIuRS+LQoMMOhcvuMwLSrM/p4nDK6kWRH55?=
 =?us-ascii?q?hw0liN9yVgUOHIxYsKw/aC0guBSTj8llahvtnrlo9eYTEdA3SwyTLjBI5XfaBy?=
 =?us-ascii?q?eYcLCWGzI8y43Nl+hpjtW2JG+16nHV8JxMipeR+KZVznwQJQzVgXoWCgmSagzz?=
 =?us-ascii?q?10kislr6qF0CzV3uTicgEKOmpKRGlkkFftLpK4j9EcXEi0cQcpkAGp6lr9x6he?=
 =?us-ascii?q?vK5/NXXcQV9UfyjqKGFvSqmwuaCYY85M65Motj9bUP+mblCZSb79oh0a3D3lH2?=
 =?us-ascii?q?ZFwDA7djequoj2nhBgiWKdKmpzo2Tdec1q2Rjf49ncT+ZL3jUaXCl4lSXXBl+k?=
 =?us-ascii?q?Mtip59qUkI3PsuK/V2KnTZBTdSjrzYWdtCq0/2FqABu/n+ytld3jCwQ1zSj719?=
 =?us-ascii?q?xyXyXSsBn8epXr17i9Me9/fUlnHl7859B6GoFjiIQwgp4Q1GMehpWU+3oHjGjy?=
 =?us-ascii?q?Pc9a2aL4cHoCWzoLz8TJ7wji3U1pNmiJyJ7hVnWB3sthYMG3YmYX2iI+9c9GEq?=
 =?us-ascii?q?mV46JfnStpvFW4txnebuZnnjcS0vYu7H8ag+cUuAsi1CmdA7YSHVVGMizojRiH?=
 =?us-ascii?q?89e+rKBPbma1bbewzFZ+ncymDLyavgFcX3P5do0jHCBq6MV/LUnM0Gby6oz/fN?=
 =?us-ascii?q?nQbNQTtgCbkhvajuhVLo4xmeQOhSZ9JW39unglwfYhjRNyxZG6oJSHK2J18a2i?=
 =?us-ascii?q?GBFYMTn1Z94J9jHpkKZThcKW34GpHpV8FTQHRproTfS0ED0MsfTrLRqBEDo5qn?=
 =?us-ascii?q?2DA7rQARef6Ft6r3LIC52rNWuYJHwHwtV5XhWdOFZTgAMJXDU5g545EBqlxNf6?=
 =?us-ascii?q?fUd95zAR4EP4qxRWxuJpMRn/TnnQpAOyZjgoT5ifKQJc7hte6EfNLcye8uVzEj?=
 =?us-ascii?q?lY/52msQyNM3GbaB5ODW0TQUyEAFbjPra16NnE8uiYAPe+LvTUbbWPr+xeS+mH?=
 =?us-ascii?q?xZa13oR6+DaMM92FPmN+AP0jxkpDQXd5FtzZmzoRSiwXlCHNb8+BqBe/4C13qc?=
 =?us-ascii?q?+//+rxWALy/ouCEL9SMdRp+xCrjqaPLe+QhCBlKTlG0pMA32PHyL8a3FQKkSFh?=
 =?us-ascii?q?ayGtEagctS7KVK/fgLJXAAUBayxtNMpE9aY83ghWNM7fi9P10KN4j/EvB1dEU1?=
 =?us-ascii?q?zhht+mZcgQL26hM1PHAV6BNK6aKj3T38H3faS8RKVMjOVVsh28oyqUH1X/MTSD?=
 =?us-ascii?q?iTbpUQuiMeVNjCGdIRxft5uxchdrCWj/Ut3mbge3P8NwjT0z2bc0nG/FNXYAMT?=
 =?us-ascii?q?hgdENAtr2R4jlegvV6GmxB6GJqLOiEmymD6enYJY0bsf9qAiRyiuJb7242y7pT?=
 =?us-ascii?q?7CFYWvN1nDHeocJpo1GjwaGzzW9CWQZSqjtUzL2KuU5lKe2N6ZhEXWfs/RQD92?=
 =?us-ascii?q?ycBh0G4dx/BYu8lbpXz43vk7+7FD5Fu4bU+tYADs+NAMKaOWUsMFziHzuCX1hN?=
 =?us-ascii?q?diKiKWyK3x8Vq/qV7HDA9pU=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AUAAA1HBZch0O0hNFbCBsBAQEBAwEBA?=
 =?us-ascii?q?QcDAQEBgVEGAQEBCwGCbH8xg3KIGYt2gWAIJRSDMZQTgjIBh0ciNAkNAQMBAQE?=
 =?us-ascii?q?BAQECARMBAQEKCwkIKS+CNiKCZQECAwECIARSBgkBAQoOCgICJgICA0QQBg0BB?=
 =?us-ascii?q?wEBAYMdggEFpD58M4VAhF2BC4szghaBOAyCX4Rcgy2CVwKBKgGIE4ZWNpBPBgO?=
 =?us-ascii?q?CKI8sBhiBXYgnJocoLJJFiDlggS5NI4FugU+CT44YMgEBgTUBAQEOjE2BHAMBA?=
 =?us-ascii?q?Q?=
X-IPAS-Result: =?us-ascii?q?A0AUAAA1HBZch0O0hNFbCBsBAQEBAwEBAQcDAQEBgVEGAQE?=
 =?us-ascii?q?BCwGCbH8xg3KIGYt2gWAIJRSDMZQTgjIBh0ciNAkNAQMBAQEBAQECARMBAQEKC?=
 =?us-ascii?q?wkIKS+CNiKCZQECAwECIARSBgkBAQoOCgICJgICA0QQBg0BBwEBAYMdggEFpD5?=
 =?us-ascii?q?8M4VAhF2BC4szghaBOAyCX4Rcgy2CVwKBKgGIE4ZWNpBPBgOCKI8sBhiBXYgnJ?=
 =?us-ascii?q?ocoLJJFiDlggS5NI4FugU+CT44YMgEBgTUBAQEOjE2BHAMBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,360,1539673200"; 
   d="scan'208";a="57665859"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 16 Dec 2018 01:38:19 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730116AbeLPJiQ (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sun, 16 Dec 2018 04:38:16 -0500
Received: from szxga06-in.huawei.com ([45.249.212.32]:45484 "EHLO huawei.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1729354AbeLPJiQ (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Sun, 16 Dec 2018 04:38:16 -0500
Received: from DGGEMS403-HUB.china.huawei.com (unknown [172.30.72.58])
        by Forcepoint Email with ESMTP id 553B28BBB0216;
        Sun, 16 Dec 2018 17:38:13 +0800 (CST)
Received: from [127.0.0.1] (10.177.31.14) by DGGEMS403-HUB.china.huawei.com
 (10.3.19.203) with Microsoft SMTP Server id 14.3.408.0; Sun, 16 Dec 2018
 17:38:13 +0800
Subject: Re: [PATCH] squashfs: enable __GFP_FS in ->readpage to prevent hang
 in mem alloc
To: Matthew Wilcox <willy@infradead.org>
CC: <phillip@squashfs.org.uk>, <linux-fsdevel@vger.kernel.org>,
        <linux-kernel@vger.kernel.org>, <linux-mm@kvack.org>
References: <20181204020840.49576-1-houtao1@huawei.com>
 <20181215143824.GJ10600@bombadil.infradead.org>
From: Hou Tao <houtao1@huawei.com>
Message-ID: <69457a5a-79c9-4950-37ae-eff7fa4f949a@huawei.com>
Date: Sun, 16 Dec 2018 17:38:13 +0800
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:52.0) Gecko/20100101
 Thunderbird/52.8.0
MIME-Version: 1.0
In-Reply-To: <20181215143824.GJ10600@bombadil.infradead.org>
Content-Type: text/plain; charset="utf-8"
Content-Language: en-US
Content-Transfer-Encoding: 7bit
X-Originating-IP: [10.177.31.14]
X-CFilter-Loop: Reflected
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi,

On 2018/12/15 22:38, Matthew Wilcox wrote:
> On Tue, Dec 04, 2018 at 10:08:40AM +0800, Hou Tao wrote:
>> There is no need to disable __GFP_FS in ->readpage:
>> * It's a read-only fs, so there will be no dirty/writeback page and
>>   there will be no deadlock against the caller's locked page
>> * It just allocates one page, so compaction will not be invoked
>> * It doesn't take any inode lock, so the reclamation of inode will be fine
>>
>> And no __GFP_FS may lead to hang in __alloc_pages_slowpath() if a
>> squashfs page fault occurs in the context of a memory hogger, because
>> the hogger will not be killed due to the logic in __alloc_pages_may_oom().
> 
> I don't understand your argument here.  There's a comment in
> __alloc_pages_may_oom() saying that we _should_ treat GFP_NOFS
> specially, but we currently don't.
I am trying to say that if __GFP_FS is used in pagecache_get_page() when it tries
to allocate a new page for squashfs, that will be no possibility of dead-lock for
squashfs.

We do treat GFP_NOFS specially in out_of_memory():

    /*
     * The OOM killer does not compensate for IO-less reclaim.
     * pagefault_out_of_memory lost its gfp context so we have to
     * make sure exclude 0 mask - all other users should have at least
     * ___GFP_DIRECT_RECLAIM to get here.
     */
    if (oc->gfp_mask && !(oc->gfp_mask & __GFP_FS))
        return true;

So if GFP_FS is used, no task will be killed because we will return from
out_of_memory() prematurely. And that will lead to an infinite loop in
__alloc_pages_slowpath() as we have observed:

* a squashfs page fault occurred in the context of a memory hogger
* the page used for page fault allocated successfully
* in squashfs_readpage() squashfs will try to allocate other pages
  in the same 128KB block, and __GFP_NOFS is used (actually GFP_HIGHUSER_MOVABLE & ~__GFP_FS)
* in __alloc_pages_slowpath() we can not get any pages through reclamation
  (because most of memory is used by the current task) and we also can not kill
  the current task (due to __GFP_NOFS), and it will loop forever until it's killed.

> 
>         /*
>          * XXX: GFP_NOFS allocations should rather fail than rely on
>          * other request to make a forward progress.
>          * We are in an unfortunate situation where out_of_memory cannot
>          * do much for this context but let's try it to at least get
>          * access to memory reserved if the current task is killed (see
>          * out_of_memory). Once filesystems are ready to handle allocation
>          * failures more gracefully we should just bail out here.
>          */
> 
> What problem are you actually seeing?
> 
> .
> 

