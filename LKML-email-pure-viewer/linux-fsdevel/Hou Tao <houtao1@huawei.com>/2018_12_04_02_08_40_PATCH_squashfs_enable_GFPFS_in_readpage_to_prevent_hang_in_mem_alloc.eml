Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 04 Dec 2018 18:28:48 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 1E4E6580375;
	Mon,  3 Dec 2018 18:05:55 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by fmsmga006-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 03 Dec 2018 18:05:54 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AozrWuxe9AUX4WfHX/cTFCiV6lGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc6+ZRSN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4qF2QxHqlS?=
 =?us-ascii?q?gHLSY0/mHJhMJtgqxVoxWvqBNjzI7Ve4GVLPhzc7jBfd8GX2dNQtxcWzBdDo66?=
 =?us-ascii?q?coABD/ABPeFdr4TlpVUOqga+DhSyCuz1zT9Dm3j73a090+Q8DQHJxgsgE88VvX?=
 =?us-ascii?q?TUsdX6LqkTXv60zKXS0TrDaPZW1C775YPVcR4huemBUaxsfcfV00UjCg3IgkuK?=
 =?us-ascii?q?pYD4PD6Zyv4BvmmZ4uZ4SO6jl3QrpgVtrjS1xsohhJPFipwLxl3E7Sl0z4Y4Kc?=
 =?us-ascii?q?emREN0ZdOoCoVcuzyEO4dsX88vR31ktSAnwbMco5G7ZjIFyJE/yh7fdfOHd4+I?=
 =?us-ascii?q?7wr9VOaePzh4nmhpeLGhiBao90iv1On8WtOz0FZQoSpJitjMtnYT2BzP8sWLVO?=
 =?us-ascii?q?dx80O71TqS2Q3f9PtILV03mKbHMZIsw7w9moIWsUvZHy/2nEv2jLWRdkUh4uWo?=
 =?us-ascii?q?7+XnYrP7pp6TLoN0iR/xMr4omsOhBeQ0Kw8OXmad+euizr3u5lP5QLpUgf0siK?=
 =?us-ascii?q?XZs47VJd4dpqGnBw9ZyIEj6wywDzu+ytQXgWEHLE5ZeBKAl4XpP1DOIPPmAvul?=
 =?us-ascii?q?jFWsjSxmx/THPr3nH5XMIWLPkLbnfbZh9UFczBA/wsxY55JRErsBOu78WlfttN?=
 =?us-ascii?q?zECR80Kwy0zPzmCNVhzIweXniDAq+EMKzIt1+I6fkiI+2NZI8TpTb8JOIp5//o?=
 =?us-ascii?q?jX8lh1AdebOl0ocQaHC9Bv5mOVmWYWLwgtcdFmcHpgg+TOv0h1GYUj5TYHCyX6?=
 =?us-ascii?q?Q75jwgDIKmDIHDRp2igbCb3Se7GIFWaX5CClyWDXjocICEUe8WaC2OOs9hjiAE?=
 =?us-ascii?q?Vb+5RoA7zhGutAj6y7l9IurO4CIYt4nu1Nx05+3ViBEz+iZ4D8Wb02GRUW50mn?=
 =?us-ascii?q?kESCMx3KB6uUZ90EuM0bBkg/xEEtxe//BJXR08NZLGy+x6Csr9WgTOftqSTFam?=
 =?us-ascii?q?Q9OmASw+T94rwt8OZVp9FMumjhzZwyWqBLoVnaSRBJMo6qLcw2TxJ8Flxnnbzq?=
 =?us-ascii?q?YhkUcpTtFPNWK8gK5/7BbcB4jOn0WdlKaqcKAc0TXJ9GeCy2qOoU5ZXBRxUaXD?=
 =?us-ascii?q?QXAQeE/Woc7l6UPFSr+kEa4nPRdZyc6eNqtKbcXkgkhcS/f9JtvSeWKxlH22BR?=
 =?us-ascii?q?aT2LyMapHne2Ec3CXbFUgFnBof/XeANQgiGCihp3jSAyBpFVLqe0ns6/VxqGun?=
 =?us-ascii?q?Tk8oyAGHd1Fh17uw+h4SmfycS/MS0qgYuCs7rDV0BlK939PQC9qPvAdheKRcYd?=
 =?us-ascii?q?Ug4FZIz27Ztgp9PoC+IKBmnFIRbwN3v0b23RVtFopAidQqrG8tzAdqM62Y1E1O?=
 =?us-ascii?q?djyG0pHwILHYMXTy8w21ZK7Q2VHe18iW97wL6PQ5rVXjoQ6oGlAj83Vhz9lazX?=
 =?us-ascii?q?+c6o/WAwoVVJL7Slw3+ARip7HGfik94JvZ1H1xMaWurjDOwdMoBOs/xRamcNdS?=
 =?us-ascii?q?K6eEFA70E80HCMmiMu0qm161bh0aOOBe7rI7P8Sjd/Gewq6kIP5gnC66jWRA+I?=
 =?us-ascii?q?19yEOM+DZmRe7SwpkFxOuU3g2ZWDfmjVetq9z4lppAZT4PAGW/0y/kBIhKa612?=
 =?us-ascii?q?fIYLD3quIsKtytV/gZ7tR2BX9Fq5C1wa38+pfAKYb0bh0g1IyUQXvXunlDO4zj?=
 =?us-ascii?q?x1iT0orrCT3DfTw+TkbxcHPm9LRG9/jVbjO4S0jtYaXFS2YAgtjheq+UH6x61D?=
 =?us-ascii?q?rqRlM2bTWVtIfzTxL2x6UKu/rKCCY81M6JMvqylXS/6zYVOZSr78pRsVzSXjEn?=
 =?us-ascii?q?BaxDA6cTGqp5r4kwZ7iGKbMHZ8sn7ZddtsyhfY4dzWXeRR0SYeRClklTnXAUCx?=
 =?us-ascii?q?Ptmz8tWTjZvDsOG+V2S6W51XcCnry56AtSSh6W1rBx2/g+68mtn9HQcm1i/70s?=
 =?us-ascii?q?FgVT/Uoxbkfonry6O6PPpkfkZyBV/w8cp6GpxknYs2i5EdwnwahpST/Xoanmb/?=
 =?us-ascii?q?K9Rb2aTibHUTQT4H2cLa4A/g2Ed7NHKG25r5VmmBwstmf9S6Z2IW2iEn4MxQBq?=
 =?us-ascii?q?ab8qdEnTdrrVqitg3ef+J9njgGxPsq6X4ahfwJuQU3wiWcBLASAVdXPSj2mxuU?=
 =?us-ascii?q?6NC+qb1dZHyzfrioyEp+gdehAameogFbXXb1YJYjEjV27sViK1LMy3zz55rgeN?=
 =?us-ascii?q?nRa9ITqxKVnw3Bj+hTNJI+iP4KiTB7NmL6uH0v0/Q7ggB23ZGmoIiHLH1g87mj?=
 =?us-ascii?q?DR5fMj31etkf+jXwjatFmsaW3oavHohuGzkRXZvoS+6oHywWtfj9KwmOFzg8oG?=
 =?us-ascii?q?+BGbXDBQ+f9Ftmr3XXHpCpLX6XIWcWzc54SBmBPkBfgx0UXDYnnp4/DA+q39fs?=
 =?us-ascii?q?cEN45jAX+175pQFAyuNuNxnjTGjfoB2kZSszSJiaNBBW9B1N51/JMcyC6eJ+By?=
 =?us-ascii?q?FZ/pq8rAyUN2yUfQJIAXsSWkyDAVDjMaKj5d3B8+ieG+q/IOHCYbSIqexCSfiI?=
 =?us-ascii?q?wYij3Zdh/zaJLs+PJGVtD+Un2kpfWnB0A8TZlCsOSywUlCLNbtSXpBSm+i1woc?=
 =?us-ascii?q?Cw7u7rWB/05YaUD7tSMNNv+w25gKuZNu6Qgjp5Jihc1p8W2XDIz70f1kYIiy5y?=
 =?us-ascii?q?bzmtDagAtSnVQa3Kh69YFAQbZD1zNcdS66I83xJAOcraitPzy755geQ5C1ZDVV?=
 =?us-ascii?q?z9hM6pYdYGLH26NFPCHEyLLqiJJSXXw8HrZqOxUaFQjORRtxGqpTmXCVPsPjSd?=
 =?us-ascii?q?mDnvTB2vNeBMjCeGPB1Roo29cxBtCXT9Q9LicBG0LNh3jTguy70umnzKLXIcMS?=
 =?us-ascii?q?R7c05Vrryf9yVYgvB+G2xH9nVkLOmElDyf7+nXMZsWtfprAiJpl+NV+ng6yr1V?=
 =?us-ascii?q?7D1aS/xxgifdstluo1T12tWIn25/UBtKrjdTrJmSoEx5OavCsJ5aVjDZ/0Rew3?=
 =?us-ascii?q?+XDkEqoMYtNtTo8/RQzcXTnaWqADdf+s3Z/I0XAM2Ce5HPC2YoLRe8QG2cNwAC?=
 =?us-ascii?q?VzP+bWw=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AYAACC4AVch0O0hNFbCB0BAQUBBwUBg?=
 =?us-ascii?q?VEIAQsBg2snCowHjA+CIZc0gXMsEwGICSI0CQ0BAwEBAQEBAQIBEwEBAQoLCQg?=
 =?us-ascii?q?pL4I2IoJsAiRSBgkCUAM6IA4FBYMcggIFpiUzhUCEc4dthC+CFoERh26GAAKBK?=
 =?us-ascii?q?gGOfpAXBgOCI48OCxiBW4g2hxQBLJURhHaCDU0jgW6BToIkAxeOKjIBATGBBAE?=
 =?us-ascii?q?BAQ6JVIEfAQE?=
X-IPAS-Result: =?us-ascii?q?A0AYAACC4AVch0O0hNFbCB0BAQUBBwUBgVEIAQsBg2snCow?=
 =?us-ascii?q?HjA+CIZc0gXMsEwGICSI0CQ0BAwEBAQEBAQIBEwEBAQoLCQgpL4I2IoJsAiRSB?=
 =?us-ascii?q?gkCUAM6IA4FBYMcggIFpiUzhUCEc4dthC+CFoERh26GAAKBKgGOfpAXBgOCI48?=
 =?us-ascii?q?OCxiBW4g2hxQBLJURhHaCDU0jgW6BToIkAxeOKjIBATGBBAEBAQ6JVIEfAQE?=
X-IronPort-AV: E=Sophos;i="5.56,312,1539673200"; 
   d="scan'208";a="54379956"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 03 Dec 2018 18:05:53 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726031AbeLDCFv (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 3 Dec 2018 21:05:51 -0500
Received: from szxga04-in.huawei.com ([45.249.212.190]:16075 "EHLO huawei.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1725915AbeLDCFu (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 3 Dec 2018 21:05:50 -0500
Received: from DGGEMS410-HUB.china.huawei.com (unknown [172.30.72.59])
        by Forcepoint Email with ESMTP id 08819696980F0;
        Tue,  4 Dec 2018 10:05:38 +0800 (CST)
Received: from huawei.com (10.90.53.225) by DGGEMS410-HUB.china.huawei.com
 (10.3.19.210) with Microsoft SMTP Server id 14.3.408.0; Tue, 4 Dec 2018
 10:05:33 +0800
From: Hou Tao <houtao1@huawei.com>
To: <phillip@squashfs.org.uk>
CC: <linux-fsdevel@vger.kernel.org>, <linux-kernel@vger.kernel.org>,
        <linux-mm@kvack.org>
Subject: [PATCH] squashfs: enable __GFP_FS in ->readpage to prevent hang in mem alloc
Date: Tue, 4 Dec 2018 10:08:40 +0800
Message-ID: <20181204020840.49576-1-houtao1@huawei.com>
X-Mailer: git-send-email 2.16.2.dirty
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [10.90.53.225]
X-CFilter-Loop: Reflected
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

There is no need to disable __GFP_FS in ->readpage:
* It's a read-only fs, so there will be no dirty/writeback page and
  there will be no deadlock against the caller's locked page
* It just allocates one page, so compaction will not be invoked
* It doesn't take any inode lock, so the reclamation of inode will be fine

And no __GFP_FS may lead to hang in __alloc_pages_slowpath() if a
squashfs page fault occurs in the context of a memory hogger, because
the hogger will not be killed due to the logic in __alloc_pages_may_oom().

Signed-off-by: Hou Tao <houtao1@huawei.com>
---
 fs/squashfs/file.c          |  3 ++-
 fs/squashfs/file_direct.c   |  4 +++-
 fs/squashfs/squashfs_fs_f.h | 25 +++++++++++++++++++++++++
 3 files changed, 30 insertions(+), 2 deletions(-)
 create mode 100644 fs/squashfs/squashfs_fs_f.h

diff --git a/fs/squashfs/file.c b/fs/squashfs/file.c
index f1c1430ae721..8603dda4a719 100644
--- a/fs/squashfs/file.c
+++ b/fs/squashfs/file.c
@@ -51,6 +51,7 @@
 #include "squashfs_fs.h"
 #include "squashfs_fs_sb.h"
 #include "squashfs_fs_i.h"
+#include "squashfs_fs_f.h"
 #include "squashfs.h"
 
 /*
@@ -414,7 +415,7 @@ void squashfs_copy_cache(struct page *page, struct squashfs_cache_entry *buffer,
 		TRACE("bytes %d, i %d, available_bytes %d\n", bytes, i, avail);
 
 		push_page = (i == page->index) ? page :
-			grab_cache_page_nowait(page->mapping, i);
+			squashfs_grab_cache_page_nowait(page->mapping, i);
 
 		if (!push_page)
 			continue;
diff --git a/fs/squashfs/file_direct.c b/fs/squashfs/file_direct.c
index 80db1b86a27c..a0fdd6215348 100644
--- a/fs/squashfs/file_direct.c
+++ b/fs/squashfs/file_direct.c
@@ -17,6 +17,7 @@
 #include "squashfs_fs.h"
 #include "squashfs_fs_sb.h"
 #include "squashfs_fs_i.h"
+#include "squashfs_fs_f.h"
 #include "squashfs.h"
 #include "page_actor.h"
 
@@ -60,7 +61,8 @@ int squashfs_readpage_block(struct page *target_page, u64 block, int bsize,
 	/* Try to grab all the pages covered by the Squashfs block */
 	for (missing_pages = 0, i = 0, n = start_index; i < pages; i++, n++) {
 		page[i] = (n == target_page->index) ? target_page :
-			grab_cache_page_nowait(target_page->mapping, n);
+			squashfs_grab_cache_page_nowait(
+					target_page->mapping, n);
 
 		if (page[i] == NULL) {
 			missing_pages++;
diff --git a/fs/squashfs/squashfs_fs_f.h b/fs/squashfs/squashfs_fs_f.h
new file mode 100644
index 000000000000..fc5fb7aeb27d
--- /dev/null
+++ b/fs/squashfs/squashfs_fs_f.h
@@ -0,0 +1,25 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef SQUASHFS_FS_F
+#define SQUASHFS_FS_F
+
+/*
+ * No need to use FGP_NOFS here:
+ * 1. It's a read-only fs, so there will be no dirty/writeback page and
+ *    there will be no deadlock against the caller's locked page.
+ * 2. It just allocates one page, so compaction will not be invoked.
+ * 3. It doesn't take any inode lock, so the reclamation of inode
+ *    will be fine.
+ *
+ * And GFP_NOFS may lead to infinite loop in __alloc_pages_slowpath() if a
+ * squashfs page fault occurs in the context of a memory hogger, because
+ * the hogger will not be killed due to the logic in __alloc_pages_may_oom().
+ */
+static inline struct page *
+squashfs_grab_cache_page_nowait(struct address_space *mapping, pgoff_t index)
+{
+	return pagecache_get_page(mapping, index,
+			FGP_LOCK|FGP_CREAT|FGP_NOWAIT,
+			mapping_gfp_mask(mapping));
+}
+#endif
+
-- 
2.16.2.dirty

