Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  18 Dec 2018 08:45:05 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 774975805FC;
	Mon, 17 Dec 2018 06:41:17 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 17 Dec 2018 06:41:15 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A3rZz3xY4yn8rUtILAc2iBxr/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpcm6ZB7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyJPDIOi?=
 =?us-ascii?q?YYUSDOQBM+lXoJXgqFQMoxS+HhGsCeH0xz9UmnP6wbE23/g7HA3Y2gErAtIAsG?=
 =?us-ascii?q?7TrNXwLKocVvq6zLXUzTXDcfxX1yr254jJchAlvf6MWr1xetfWxEghFgPFilGQ?=
 =?us-ascii?q?qIz+MjOU0OQNvXKb4PB9Wu2xkWEotht9oj+1xscjk4TEgJ8exF7D9SV82ok1JN?=
 =?us-ascii?q?u4RVZ4YdG6CptQsT+VN49sTsMlWWFotyA3waAFt56jZCUG1ogryhrFZ/CafYWE?=
 =?us-ascii?q?/AjvWPuSLDtknn5oebCyiw6v/UWkyeDwTNS43VhIoyZfjNXAqm4B2wbO5sWJRP?=
 =?us-ascii?q?Zw+Fqq1yyV2ADJ8O5EJFg5larFJJ4lxb49joQTsUvdES/sgkn2j7GZdl8i+ue2?=
 =?us-ascii?q?7+TreLLmpoWTN4NsiwH+NLohmtCnDOgmLgQDW3KX9fmy2bH950H1XbZHguEsnq?=
 =?us-ascii?q?TYsp3WPcEbqbS4Aw9R3IYj8RG/DzK+3dQcnHkHKk9FeR2eg4jqJV7OOvb4Aum7?=
 =?us-ascii?q?g1i1lzdqyfbGMaP7ApjWMHjDn6nufaxn505f1gUz19Zf6IxQCr0bJ/LzQEDxuM?=
 =?us-ascii?q?TCDhAlKwy03/rnCNJl24MaWGKPAbGWPLndsF+V/e8vJ+iMZIkIuDfyMfQl5vju?=
 =?us-ascii?q?jWMnll8ZZ6WmwZwXaHWgFPR8P0qZeWbsgssGEWoSvgoxVu3qiEGYXj5UfXqyX7?=
 =?us-ascii?q?886Ss9CIKpForDQoGtgLqc3Ca0BJFWZ2ZGCkySHnfsbYmLR/AMaCeKKM97jjME?=
 =?us-ascii?q?TaShS5Mm1Ry2tg/6zKRoIvDX+i0fs5Lj0t916vbXlREz8zx0Esuc33uMT2Fygm?=
 =?us-ascii?q?MHWTs20Lpjrkx6z1eJybJ4jOBAFdxP+/NJVR83OoTHz+x6DNDyWRjNfs2TR1ak?=
 =?us-ascii?q?WdimBTAxTtQsw94BeUp9GtOijgzd0CquGbMai7uLBJks+KLGw3fxP9p9y2rB1K?=
 =?us-ascii?q?Q5jFkpWM1POXeihq5+7QfTAYHJnl6dl6arc6QcwSHM+H2CzWqIoEFXTgpwXb/Z?=
 =?us-ascii?q?UnAYY0vctc756V/aT7+yFbQnNRNMxtOYJatUdNLll1VGS+3lONTFfW2xnWC8BR?=
 =?us-ascii?q?KLxrOJaIrnYGEd3CTbCEgZnAEf53eGNQ4iBii/p2LSFiBhFVXqY0n06+lxtGu7?=
 =?us-ascii?q?TlMozwGNd0BuyqC6+gALivCGS/McxLQEuDw/pDVyB1u929PWC9ydpwtuZqlcYN?=
 =?us-ascii?q?U94EtZ2mLdrQByIpugL6V6jF4Ebwt3p1/u1wlwCohYjcgqrXYqzA1uKaKY0FJN?=
 =?us-ascii?q?bS+Y0Yr3Or3NLmny/Rava6HN11Ha0daW/LoP6fsip1XiugGpClQt83F939ZJ1H?=
 =?us-ascii?q?uc443ADBAOXpLpTkY36x96qqnAbSk5+YzV2mNjMKmuvjDZxtImGfEqyhCjf9dY?=
 =?us-ascii?q?LqOJDwvyE8wcB8izJ+0mgVmpbhQYPO9M8K44Jd+pd/yD2KSzJuZvgCqmjXhb4I?=
 =?us-ascii?q?B6yk+N9zd8RvTU0JofwvCY3hGIVzHzjFq6tsD3mIZEZSwdH2alyCjkApJRabN2?=
 =?us-ascii?q?fYoRFWiuJMi3zM1kh5HxQ35Y6EKjB1Qe1c+zeBqdc0by3RdN2kQQu3CnnzW3zy?=
 =?us-ascii?q?Z1kz0wsqWQxijOzPn8exodPW5LQnJvjVPtIYiyktAbU1KkbwkvlBu5+0n6w7JX?=
 =?us-ascii?q?q7h4L2nWWU1IZTT5L3l+UqussbqPe85O6JIyvSRXSui8ek2aSrjmrhse0iPjGX?=
 =?us-ascii?q?ZexT8hezGrvJX5gwJ1iGaHIHlvq3rZfNl6xQ3D69zEWf5Rwj0GSTF6iTbNHFi8?=
 =?us-ascii?q?PNqp/dKOm5fYqO++VGGhVpxVcSb1y4ONry+75WxsAR2ikPG/gNznEQ4m0SDl09?=
 =?us-ascii?q?lmTznHrBH5YoPzzaS1LfpnflV0BF/788d7GptxkowqiJES2HgagI6Y/X4GkWf1?=
 =?us-ascii?q?LNVa1rjybHsLRT4X3dHV5BLp11FkLnKM34j5TGmSwtN9Z9mmZWMbwiE94NpLCK?=
 =?us-ascii?q?uO7LxEgDF6oly3rQ/KZfh9nzEdyeYh6XIAguEJvhYtwTuZArwIAUZYOinsnQyS?=
 =?us-ascii?q?79+itKVXeHqvcb+o2Up7nNChD6uNrhtSWXnnYZciATF/7t9kP13Syn3z5ZrpeN?=
 =?us-ascii?q?3RbdIVqx2VnA3Mj+lTKJItiPUKgTBrNn76vX0g0+Q7lwBh3YmmvIibLGVg5L65?=
 =?us-ascii?q?AhldNjHvZsIc4DftjbtFnsaN3oCiBZFhGjQNXJv1QvOkCjMStfL7NwmQFD0wsG?=
 =?us-ascii?q?uUGb3aHQWH8kdps2rPE4y3N3GQPHQW1s9tRB6ZJExCmgwUWCg6k4U9FgCrwszh?=
 =?us-ascii?q?bUh46ioQ5l7+thtD1OZoOwPjXWfYoQeici00R4SHLBpK8gFC4F/YMc6E4eJ2AS?=
 =?us-ascii?q?5Y5YetrBCXJmyYegRIDnwJWkqeCFD4JbSu4djA8+6FBuuxNffOYLOOqfBAWPeM?=
 =?us-ascii?q?356gzoxm/zOUPMWVInZiF+E72lZEXX1hG8XZnCgPSzUKly3Xac6Xvgy8+ipxrs?=
 =?us-ascii?q?Cw6/nrXAPv5Y2SC7pdK9lv+ha2gbudOO6Unip2NTFY1pYUz3/S1LcfxEISiz1p?=
 =?us-ascii?q?dzS1EbQPqy/NTKHTmq9WFRIbaDlzNMxH760ixAlNJNXbh8jx1r55iP41FlhEWU?=
 =?us-ascii?q?bgmsGvecwFPWW9OEnbC0aMMbSMPSfLzN3vYaOgVb1Qi/1ZuAetuTmACU/sIDSC?=
 =?us-ascii?q?myPtVxCuKuxMiCCbPBpDuICyaBptCG7jTM74ZR2/KtN4kTo2wbgsjHPQKWEcKS?=
 =?us-ascii?q?R8c19KrrCI8SNYg/B/F3Zd4XZ/MeaEmziW7+/DJ5YSsPtrBDl0lu1A7HQ7zbtV?=
 =?us-ascii?q?8D9LRPhvlCTOqd5upkmskvOTxTp/TBpOtjFLiZqLvEp4P6XZ85hAWXDc8xMM7W?=
 =?us-ascii?q?WfERIKp9R+B93ruqBQzMXPla3pJDdD9dLU4dUTB8zOJM2bN3ohNEmhJDmBKQoO?=
 =?us-ascii?q?TTevfUHYjE9a2KWX9nqerZ8SqZX2npcKDLhBWwpmOOkdDxFAFcAeIJpoFgwllb?=
 =?us-ascii?q?WcnIZc+nu6qAj5RcNUpJnLW/ueR/L1J2DK3vF/exIUzOagfswoPYrh1hknMwEi?=
 =?us-ascii?q?kQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ADAADjtBdch0O0hNFcCBoBAQEBAQIBA?=
 =?us-ascii?q?QEBBwIBAQEBgVMDAQEBAQsBgmmBAieYC1IGgTUUiQ+ONYFwLwsIAYdWIjYHDQE?=
 =?us-ascii?q?DAQEBAQEBAgETAQEBCgsJCCkjDII2JAGCYgECAwECJBMGAQE3AQUJAQEKDgoJE?=
 =?us-ascii?q?xIDDAUoIRMFgx0BgXMNBQqnHoFsM4J2AQEFgTABhWkIjD4XeIEHhCOEXBGFc5B?=
 =?us-ascii?q?NkE4Jhw2KQiOBXU2IAIcoLIsDgwOMfwmBfjMaCCgIgycJCoIINYhMhWAeMwEBg?=
 =?us-ascii?q?QMBAYsjgkwBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ADAADjtBdch0O0hNFcCBoBAQEBAQIBAQEBBwIBAQEBgVM?=
 =?us-ascii?q?DAQEBAQsBgmmBAieYC1IGgTUUiQ+ONYFwLwsIAYdWIjYHDQEDAQEBAQEBAgETA?=
 =?us-ascii?q?QEBCgsJCCkjDII2JAGCYgECAwECJBMGAQE3AQUJAQEKDgoJExIDDAUoIRMFgx0?=
 =?us-ascii?q?BgXMNBQqnHoFsM4J2AQEFgTABhWkIjD4XeIEHhCOEXBGFc5BNkE4Jhw2KQiOBX?=
 =?us-ascii?q?U2IAIcoLIsDgwOMfwmBfjMaCCgIgycJCoIINYhMhWAeMwEBgQMBAYsjgkwBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,365,1539673200"; 
   d="scan'208";a="45281691"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 17 Dec 2018 06:41:14 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1732628AbeLQOlL (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 17 Dec 2018 09:41:11 -0500
Received: from bombadil.infradead.org ([198.137.202.133]:37580 "EHLO
        bombadil.infradead.org" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726887AbeLQOlK (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 17 Dec 2018 09:41:10 -0500
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
        d=infradead.org; s=bombadil.20170209; h=In-Reply-To:Content-Type:MIME-Version
        :References:Message-ID:Subject:Cc:To:From:Date:Sender:Reply-To:
        Content-Transfer-Encoding:Content-ID:Content-Description:Resent-Date:
        Resent-From:Resent-Sender:Resent-To:Resent-Cc:Resent-Message-ID:List-Id:
        List-Help:List-Unsubscribe:List-Subscribe:List-Post:List-Owner:List-Archive;
         bh=nZZ4uT7zaATupA8MtYGiN52I8EDHkuRogXWMUDrqNP8=; b=GCD1mTQf4iesza7o2dkc2JY2u
        /1sQKjL2HsK8PcKHTCneirvS5eCkh0QV4ljbr7hax77lC21b9q8HdtWO18LihRq8tskytX8ckursp
        72a3pyNBO3h3ZZAuEsGvf3xC6WkzCckcTftXWkLNrNAyLZUmXg50Q0MIXmRaI8fAeBMhYwvdo0AE4
        SoTCAREaPY/W/nqbCwJA7hAez49AscrYDIWnt2hqABJlAodZeOktDAfdkLPmY/3IUchX/jmOqWbbW
        IoiG7EZanbeojlGqGkgO1G6Ihx1sKD4o4WgtCsX2c74wu1pQkUXGhuxZ5tFOCA5KzuZAkb7oETFpx
        VlDhyEtig==;
Received: from willy by bombadil.infradead.org with local (Exim 4.90_1 #2 (Red Hat Linux))
        id 1gYu4r-0005Z5-Ud; Mon, 17 Dec 2018 14:41:01 +0000
Date: Mon, 17 Dec 2018 06:41:01 -0800
From: Matthew Wilcox <willy@infradead.org>
To: Michal Hocko <mhocko@kernel.org>
Cc: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>,
        Hou Tao <houtao1@huawei.com>, phillip@squashfs.org.uk,
        linux-fsdevel@vger.kernel.org, linux-kernel@vger.kernel.org,
        linux-mm@kvack.org
Subject: Re: [PATCH] squashfs: enable __GFP_FS in ->readpage to prevent hang
 in mem alloc
Message-ID: <20181217144101.GN10600@bombadil.infradead.org>
References: <20181204020840.49576-1-houtao1@huawei.com>
 <20181215143824.GJ10600@bombadil.infradead.org>
 <69457a5a-79c9-4950-37ae-eff7fa4f949a@huawei.com>
 <20181217035157.GK10600@bombadil.infradead.org>
 <20181217093337.GC30879@dhcp22.suse.cz>
 <00ff5d2d-a50f-4730-db8a-cea3d7a3eef7@I-love.SAKURA.ne.jp>
 <20181217122546.GL10600@bombadil.infradead.org>
 <20181217141044.GP30879@dhcp22.suse.cz>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181217141044.GP30879@dhcp22.suse.cz>
User-Agent: Mutt/1.9.2 (2017-12-15)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Mon, Dec 17, 2018 at 03:10:44PM +0100, Michal Hocko wrote:
> On Mon 17-12-18 04:25:46, Matthew Wilcox wrote:
> > It's worth noticing that squashfs _is_ in fact holding a page locked in
> > squashfs_copy_cache() when it calls grab_cache_page_nowait().  I'm not
> > sure if this will lead to trouble or not because I'm insufficiently
> > familiar with the reclaim path.
> 
> Hmm, this is more interesting then. If there is any memcg accounted
> allocation down that path _and_ the squashfs writeout can lock more
> pages and mark them writeback before they are really sent to the storage
> then we have a problem. See [1]
> 
> [1] http://lkml.kernel.org/r/20181213092221.27270-1-mhocko@kernel.org

Squashfs is read only, so it'll never have dirty pages and never do
writeout.

But ... maybe the GFP flags being used for grab_cache_page_nowait() are
wrong.  It does, after all, say "nowait".  Perhaps it shouldn't be trying
direct reclaim at all, but rather fail earlier.  Like this:

+++ b/mm/filemap.c
@@ -1550,6 +1550,8 @@ struct page *pagecache_get_page(struct address_space *mapping, pgoff_t offset,
                        gfp_mask |= __GFP_WRITE;
                if (fgp_flags & FGP_NOFS)
                        gfp_mask &= ~__GFP_FS;
+               if (fgp_flags & FGP_NOWAIT)
+                       gfp_mask &= ~__GFP_DIRECT_RECLAIM;
 
                page = __page_cache_alloc(gfp_mask);
                if (!page)

