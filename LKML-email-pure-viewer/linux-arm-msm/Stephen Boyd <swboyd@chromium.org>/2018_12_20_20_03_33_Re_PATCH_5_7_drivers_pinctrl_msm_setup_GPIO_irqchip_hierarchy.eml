Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:42:05 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from FMSMGA003.fm.intel.com (fmsmga003.fm.intel.com [10.253.24.29])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id B5EE458050C;
	Thu, 20 Dec 2018 12:06:46 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by FMSMGA003-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 20 Dec 2018 12:06:46 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AfDyNUR/ztIJdvf9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1usSIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CWWVOUclfWCJfDIOy?=
 =?us-ascii?q?b4UADekPM/tWoYnmv1sDrwCzBRW1BO711jNEmmX70K883u88EQ/GxgsgH9cWvX?=
 =?us-ascii?q?rJsNX6Kr8SUeCrw6nO0D7OcvRW2Dfg54PVdR0huv+NUql3ccvR1EYiDB/KjlWK?=
 =?us-ascii?q?qYziOjOV1/kNs22B4+pnT+KvhHcqpgdsqTahwccsj5PGhoMTyl3c6Sp5wJw1Jd?=
 =?us-ascii?q?q9SE56fN6kFYFctyaAN4t5RM4pXmJmuD4ix7EYpZK2eDIGxIkpyhLBcfCLbouF?=
 =?us-ascii?q?7g75WOuQIzp0nGxpdbOhixqu9EWs1+3xWdWx3VpUsiZJjNzBum0I2hzd8MeKSv?=
 =?us-ascii?q?Vw80Kj1DuN1g3e6uRJLEA3mKbFMJEsx709moQIvknHGCL9hV/4g7WMdko+/+il?=
 =?us-ascii?q?8+Tnbavipp+bL4J0lA7+Pbo0msClAuQ3LBIOX26F9uS4zrHj+lf5QLpSgv03lK?=
 =?us-ascii?q?nWrozaKNwFqqKlBwJZyJsv5hihAzu8zdgVnmULIEhEdR+Fl4TpPkvBIPH8Dfex?=
 =?us-ascii?q?mVSslzJryujCPr3gBJXNM3fCnK7ifblj8U5czhQ8zdRG65JTBLABJuz8WlXqud?=
 =?us-ascii?q?zGAR82LRa0z/zkCNpjzIMeX3yAAquDPKPVq1+I6fojI/OQa48NpDb9N/8l6ubq?=
 =?us-ascii?q?jX84ml8SY7Ol3JQKaH2jGvRmIkOZYWfjg9sbEGcKuBY+Q/LuiFGYTTFTYHOyVb?=
 =?us-ascii?q?om5j4nEIKmEZvDRoe1jbyBxii7H4FWaXpBClyWEXfoap+LW/EDaC+JJs9hkzoE?=
 =?us-ascii?q?VaWuSoM71BGushP6xKRjLubO5iIYspfj3sBv5+LPjREy6SB0D8OF3m6XVGF0nm?=
 =?us-ascii?q?QIRzws0KBlu0N9yEyO0ax5g/xeCNxS6OlFUgY8NZ7A0eN6D8r+VR7GfteMUFym?=
 =?us-ascii?q?WMmpASktTtItxN8De0V9FM+kjhzZ2yqqAqUal7qEBJEv9qLc3n7xJ9tyynrc1a?=
 =?us-ascii?q?khiUUmTdVLNWG8mqF/8A3TDZbTk0qFj6aqabgc3CnV+Wie12WOol9XXBRwUarf?=
 =?us-ascii?q?W3AffVXZrdL+6kPGTL+uDLAnPxBFyc6DLKtKd9LogU9HRPflJNTRfWaxl32sCh?=
 =?us-ascii?q?aPw7OGdJDqdHkF3CXBFEgElBge8mucOgggGCituWLeAyZoFVL0fUzs9/JzqHe6?=
 =?us-ascii?q?Tk8y0gGLYFdt17uz+h4Jm/OcT+kf0a4DuCcksz90Bkqy38rKC9qcoApsZLlcYd?=
 =?us-ascii?q?I44FdAyWLZtwx8Moa8L6x4gV4eaQB3v0Lo1xV4EYhAlckqrHU3zAt9M66Y0VVB?=
 =?us-ascii?q?dy+G0pD0ILHYNm7y/BW3Ya7Mxl7eyMqW+rsI6PkgsVrjuB+mF0U8/HRnydVayG?=
 =?us-ascii?q?ac6YjQAwoUUpLxVVg3+gN+p7HbZCk9+ozV2WdtMamyrj/NxdYpCPE5xRanetdV?=
 =?us-ascii?q?KLmEGxPqE80GG8iuL/Qnmli0bh4eIO9e7q81P8O8ePuA166mJ+JgnDOgjWRa74?=
 =?us-ascii?q?FxyEOM9yxgSuHW25YJ2e2X3gyCVz3klleurtj3mZxYZTEVBme/0ynkC5JLaa1o?=
 =?us-ascii?q?YIkLDn2iI8upydVkhp7hQmJX+0SnB1wbxsCpYx2Sb1rm0A1U1EQXp2GnmCSiwz?=
 =?us-ascii?q?x1lTEpsrSQ3CjUz+v+cxoHP3ZBRHN+glf0PYi0k9caUVCobggojhek5Vz2x7NG?=
 =?us-ascii?q?pKR5NGTTRUZIfy7rL2BtSKewt7yCY9JR55MsqylYTOO8YVWCQL7nvxQayz/jH3?=
 =?us-ascii?q?dZxD0jdTGloI/5nx95iGKaNnpzt2DWecJzxRfe4tzTW/hR0yECRCl5jznXG1e9?=
 =?us-ascii?q?M8Oo/dWSi5fMrOS+W3i9WZ1UdCnh1ZmAuzej5W12HR2/mOi+m939Hgg9yyP71d?=
 =?us-ascii?q?hqVSPToRb4Y4nr0bm6MO19cklpAl/899R1GoVknoQsg5EQ3GAQho+J8nofjWfz?=
 =?us-ascii?q?LdJb1Lr9bHUXRD4H2d7V4BX/101lIXKE3Ib5VnSbwst8aNi2eGIW2iQh789UDK?=
 =?us-ascii?q?eY9qBLnSxwolCgtwLefeB9nisByfsp8HMahuAJuAk3wSmHDLEdA1JYPTDymBSS?=
 =?us-ascii?q?9N+xsr9XZGm0fLi01Up+m82hDb6YrgFdXnb5ZoktHStq4spjN1LM1WX56pv4d9?=
 =?us-ascii?q?nIcdITqhqUng/cj+hSLZI9jPsLijBhOWLgpn0l0O87gAdq3ZG7uoiHNmps8Li4?=
 =?us-ascii?q?Ah5eKj36eccT9ivxgqZZm8acx5qvEYl5GjUXQJvoSuqlHykIuvTgMwaODScwqn?=
 =?us-ascii?q?OGGbfEGQ+f6UFmr2/AEpyxNnGXImUZwstmRBWHOENfhwUUVi0gnpElDgCq2NDh?=
 =?us-ascii?q?cEBh6zAT/FH4rwVDyvlyOxnjSGvfpxqoajQpSJiZNhVW9RpP50PUMcyY8+JyED?=
 =?us-ascii?q?tU/pynrAyRNGObYx5EAn0OWkyBH1rjJKWh5cHc8+iEAeqzN/vPYbKTqexHSveH?=
 =?us-ascii?q?35Sv3pF9/zaLMMWPMWJvD/k62kpFQHB4FN7VmzQJSywLiS3Na9SXqwu7+i1yts?=
 =?us-ascii?q?q/6ujkWBrz5YuTDLtfKdVv9A63gaeANO6QhTx1KTVC1pMLyn/H1qIf3EMJiyx1?=
 =?us-ascii?q?czmtELIAtTPCTa7Km69XCQIbZD13NMdS86082QxNM9bBitzpzr54kuI1C1BdWF?=
 =?us-ascii?q?P7h8GmftYKLH+9NV/dAEaLNa+LJTnKw8HxfKO9RqdcjORStx2spzmbF1XvMSiE?=
 =?us-ascii?q?lznsTxqvK/1DjDmHPBxCv4GwagptCWnmTN78dhK3KsN4jT0ozr0ynX7KMW8cMT?=
 =?us-ascii?q?5hc0JCtLGQ7CVYgulhFGxF9HZqMe6EmyOB5enCNpkWqedrAjhzl+9C4HU10b1V?=
 =?us-ascii?q?7CRFRPxzgCTTr95urEugkumA0TdnVBtOqjBWhIOEp0liOKPZ9oVeVnbA5h4C8W?=
 =?us-ascii?q?KQCxFZ7+diX/nuvakY68nCjuqnKTND9dv89swQCsHJMsWdOTwmKxW/XHbZEgQf?=
 =?us-ascii?q?QDOtHWrfnUtYkeyXsHqPodxyr5H2k9wcW7lUVVEvPvoADwJuG9lRDo1wW2Yfjb?=
 =?us-ascii?q?ODjMMOrVC5vRWZEN5FtJfWWtqZAe/oLTeEiP9DfRRekuCwFpgaKoCugx8qUVJ9?=
 =?us-ascii?q?homfXhOIBd0=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AKAADl9Btch0O0hNFlGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUwQBAQELAYEwgTmBAieDfZQUgWglFJdJFIFfEwEBGAMQAYQ7AwKCbiI?=
 =?us-ascii?q?2Bw0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmIBAgIBAQIgBBkBATcBBAEJA?=
 =?us-ascii?q?QEKDgwCJgICAzEBBQEMEAYBEgWDHQGBeQgBBJwWPIopcHwzgnYBAQWHIwgSeYs?=
 =?us-ascii?q?0F4F/gREzgl+ETgEKCAEfgwiCV4kphzSQYgmHEYpUGIFfTYRSgnqHZYlNkBkGA?=
 =?us-ascii?q?gkHDyGBLAyBCnEzGggoCHgFBlaBTgmCEgwXiF6FYB8ygQIDAQEhE4pfDxcDgiQ?=
 =?us-ascii?q?BAQ?=
X-IPAS-Result: =?us-ascii?q?A0AKAADl9Btch0O0hNFlGwEBAQEDAQEBBwMBAQGBUwQBAQE?=
 =?us-ascii?q?LAYEwgTmBAieDfZQUgWglFJdJFIFfEwEBGAMQAYQ7AwKCbiI2Bw0BAwEBAQEBA?=
 =?us-ascii?q?QIBEwEBAQgNCQgpIwyCNiQBgmIBAgIBAQIgBBkBATcBBAEJAQEKDgwCJgICAzE?=
 =?us-ascii?q?BBQEMEAYBEgWDHQGBeQgBBJwWPIopcHwzgnYBAQWHIwgSeYs0F4F/gREzgl+ET?=
 =?us-ascii?q?gEKCAEfgwiCV4kphzSQYgmHEYpUGIFfTYRSgnqHZYlNkBkGAgkHDyGBLAyBCnE?=
 =?us-ascii?q?zGggoCHgFBlaBTgmCEgwXiF6FYB8ygQIDAQEhE4pfDxcDgiQBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,378,1539673200"; 
   d="scan'208";a="67768768"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 20 Dec 2018 12:06:45 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2388561AbeLTUDg (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Thu, 20 Dec 2018 15:03:36 -0500
Received: from mail-pl1-f195.google.com ([209.85.214.195]:42994 "EHLO
        mail-pl1-f195.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1732280AbeLTUDg (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 20 Dec 2018 15:03:36 -0500
Received: by mail-pl1-f195.google.com with SMTP id y1so1353688plp.9
        for <linux-kernel@vger.kernel.org>; Thu, 20 Dec 2018 12:03:35 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=chromium.org; s=google;
        h=mime-version:content-transfer-encoding:user-agent:to:references:cc
         :from:in-reply-to:message-id:subject:date;
        bh=YpPiLta5HL4FYcYFm9sqCPNW0dwFYuPcTUdZm68XrOQ=;
        b=QuYZKWrLEm/T0W0gpuYHSLpiD69A1DpXX6YQRYmuPc+JTh0shr3D93lxZ8B3fhLz5Z
         mGp8n3s7zfDsgrUQJi8VnoepG1q8D+SB0fDooPUZ9swJGNgJK3qHjFqiFC79j7n4F80j
         Zk4P3O7j406y5Wt96xGCbDiXLKyHaVzVZV6/M=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:content-transfer-encoding
         :user-agent:to:references:cc:from:in-reply-to:message-id:subject
         :date;
        bh=YpPiLta5HL4FYcYFm9sqCPNW0dwFYuPcTUdZm68XrOQ=;
        b=hMtyui2q0XiHqkHu9UMkY1rLyHlka1Y3i7aN4lelhYg6CX50YYALZZwnN/A6r0AC+W
         lrhkjTkQW/tXhf6WwITHLLAV5XyIJvXCvaaTQA1yJVzgCUX1XVrRWetQ1r5XcV95ibDV
         WLS/uGtyk9D86ia7eALD1UWAayECWDdANC+JbK150y1VtIyecUzPhxeWHmhtdxNcNhbx
         CCNNR3F+iPuEBS41VFjooqdwXcL3tcaW2xKBbFCR+LZX4dbEnGDWXvHWeEbc1gpehOrg
         M61gWLAUlIKwACl1Cv56VHsUvmbrWjnv4IdNOz43F+2BE9z7RG2SRXx2BVEp68mmCji+
         amfw==
X-Gm-Message-State: AA+aEWbxbvFoLw1AwMjevKWsayTSu89+/xn+FMho7TmJtxNORF/EwEW+
        hRv7hxlPYxBJKG0Ev5YvPtbuZQ==
X-Google-Smtp-Source: AFSGD/VP3f1EVTdzaHe7/zyVp5SNMNDWMGaS7RROII5jpBVCkmOPLizp+fGT2uAQKbflQmPfCeqCJw==
X-Received: by 2002:a17:902:161:: with SMTP id 88mr26050560plb.306.1545336214854;
        Thu, 20 Dec 2018 12:03:34 -0800 (PST)
Received: from localhost ([2620:15c:202:1:fa53:7765:582b:82b9])
        by smtp.gmail.com with ESMTPSA id k14sm34561339pgs.52.2018.12.20.12.03.33
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Thu, 20 Dec 2018 12:03:34 -0800 (PST)
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: quoted-printable
User-Agent: alot/0.8
To: Lina Iyer <ilina@codeaurora.org>, evgreen@chromium.org,
        marc.zyngier@arm.com
References: <20181219221105.3004-1-ilina@codeaurora.org> <20181219221105.3004-6-ilina@codeaurora.org>
Cc: linux-kernel@vger.kernel.org, rplsssn@codeaurora.org,
        linux-arm-msm@vger.kernel.org, thierry.reding@gmail.com,
        bjorn.andersson@linaro.org, Lina Iyer <ilina@codeaurora.org>
From: Stephen Boyd <swboyd@chromium.org>
In-Reply-To: <20181219221105.3004-6-ilina@codeaurora.org>
Message-ID: <154533621302.79149.15228907259643696166@swboyd.mtv.corp.google.com>
Subject: Re: [PATCH 5/7] drivers: pinctrl: msm: setup GPIO irqchip hierarchy
Date: Thu, 20 Dec 2018 12:03:33 -0800
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Quoting Lina Iyer (2018-12-19 14:11:03)
> To allow GPIOs to wakeup the system from suspend or deep idle, the
> wakeup capable GPIOs are setup in hierarchy with interrupts from the
> wakeup-parent irqchip.
>=20
> In older SoC's, the TLMM will handover detection to the parent irqchip
> and in newer SoC's, the parent irqchip may also be active as well as the
> TLMM and therefore the GPIOs need to be masked at TLMM to avoid
> duplicate interrupts. To enable both these configurations to exist,
> allow the parent irqchip to dictate the TLMM irqchip's behavior when
> masking/unmasking the interrupt.
>=20
> Signed-off-by: Stephen Boyd <sboyd@kernel.org>

I don't think I gave a signed-off-by, so you need to ask to forge my
sign off here. Please change it to be:

 Signed-off-by: Stephen Boyd <swboyd@chromium.org>

and I'm not sure how much I wrote vs. you wrote anymore so perhaps also
add a

 Co-developed-by: Stephen Boyd <swboyd@chromium.org>

And finally, please just email my chromium.org email for this series
because I apparently messed up the address once and now it's all going
to the wrong inbox. Thanks!

> Signed-off-by: Lina Iyer <ilina@codeaurora.org>

Can you Cc Linus Walleij and Bjorn Andersson on the whole patch series
next time? Would be good to have their review on major pinctrl driver
changes.

> @@ -967,11 +994,86 @@ static bool msm_gpio_needs_valid_mask(struct msm_pi=
nctrl *pctrl)
>         return device_property_read_u16_array(pctrl->dev, "gpios", NULL, =
0) > 0;
>  }
> =20
> +static int msm_gpio_domain_translate(struct irq_domain *d,
> +                                    struct irq_fwspec *fwspec,
> +                                    unsigned long *hwirq, unsigned int *=
type)
> +{
> +       if (is_of_node(fwspec->fwnode)) {
> +               if (fwspec->param_count < 2)
> +                       return -EINVAL;
> +               *hwirq =3D fwspec->param[0];
> +               *type =3D fwspec->param[1] & IRQ_TYPE_SENSE_MASK;
> +               return 0;
> +       }
> +
> +       return -EINVAL;
> +}

Maybe this can be a generic function in gpiolib?

> +
> +static int msm_gpio_domain_alloc(struct irq_domain *domain, unsigned int=
 virq,
> +                                unsigned int nr_irqs, void *arg)
> +{
> +       int ret;
> +       irq_hw_number_t hwirq;
> +       struct gpio_chip *gc =3D domain->host_data;
> +       struct msm_pinctrl *pctrl =3D gpiochip_get_data(gc);
> +       struct irq_fwspec *fwspec =3D arg;
> +       struct qcom_irq_fwspec parent =3D { };
> +       unsigned int type;
> +
> +       ret =3D msm_gpio_domain_translate(domain, fwspec, &hwirq, &type);
> +       if (ret)
> +               return ret;
> +
> +       ret =3D irq_domain_set_hwirq_and_chip(domain, virq, hwirq,
> +                                           &pctrl->irq_chip, gc);
> +       if (ret < 0)
> +               return ret;
> +
> +       if (!domain->parent)
> +               return 0;
> +
> +       parent.fwspec.fwnode      =3D domain->parent->fwnode;
> +       parent.fwspec.param_count =3D 2;
> +       parent.fwspec.param[0]    =3D hwirq;
> +       parent.fwspec.param[1]    =3D type;
> +
> +       ret =3D irq_domain_alloc_irqs_parent(domain, virq, nr_irqs, &pare=
nt);
> +       if (ret)
> +               return ret;
> +
> +       if (parent.mask)
> +               set_bit(hwirq, pctrl->wakeup_masked_irqs);
> +
> +       return 0;
> +}
> +
> +/*
> + * TODO: Get rid of this and push it into gpiochip_to_irq()

Hmm.. yeah we need to do this still. I think we can have a generic two
cell function similar to irq_domain_xlate_twocell() that does the fwspec
creation and uses some of the things that we pass to
gpiochip_irqchip_add(), like the default level type. This existing
function is not good to have, so there's work to do to get rid of this.

I was also thinking that maybe we can make the alloc function above take
a struct gpio_irq_fwspec structure that tells the alloc function what
gpiochip the irq is for. That would mean that we need to change the
gpio_to_irq() function below to be generic and stuff the chip inside the
fwspec wrapper structure:

	struct gpio_irq_fwspec {
		struct irq_fwspec fwspec;
		struct gpio_chip *chip;
		unsigned int offset;
	};

but I seem to recall that was not working for some reason.

> + */
> +static int msm_gpio_to_irq(struct gpio_chip *chip, unsigned int offset)
> +{
> +       struct irq_fwspec fwspec;
> +
> +       fwspec.fwnode =3D of_node_to_fwnode(chip->of_node);
> +       fwspec.param[0] =3D offset;
> +       fwspec.param[1] =3D IRQ_TYPE_LEVEL_HIGH;
> +       fwspec.param_count =3D 2;
> +
> +       return irq_create_fwspec_mapping(&fwspec);
> +}
> +
> +static const struct irq_domain_ops msm_gpio_domain_ops =3D {
> +       .translate =3D msm_gpio_domain_translate,
> +       .alloc     =3D msm_gpio_domain_alloc,
> +       .free      =3D irq_domain_free_irqs_top,
> +};
> +
