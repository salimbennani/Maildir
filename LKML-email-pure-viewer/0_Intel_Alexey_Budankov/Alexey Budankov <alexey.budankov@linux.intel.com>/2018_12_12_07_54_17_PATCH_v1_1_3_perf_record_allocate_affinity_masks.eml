Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  12 Dec 2018 19:42:23 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 5C2CA58079D;
	Tue, 11 Dec 2018 23:54:27 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga001-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 11 Dec 2018 23:54:26 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A0j55PBKDjmK6rjCyytmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgUL/T5rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZQ8hfVzJPAo27?=
 =?us-ascii?q?b4UMAeQOM+lXoIvhqFUBthu+HQuhCfjzyjJKnHL6wbE23uojHAzAwQcuH8gOsH?=
 =?us-ascii?q?PRrNjtKKoSVf66zabWwjTDcvhbxCr955XSfRAnovGMWqxwetfWxEY1EwPKkFqR?=
 =?us-ascii?q?ppLlPj+PzesNrnWU4PBmVeKsjG4ntRp8ojyuxscql4nIiZgZylHC9SVl3ok1Ic?=
 =?us-ascii?q?e0R1J8Yd6hCZZdsTyROYhuQs46XW1kpCI3xqcbtZO1YiQG0okryh3DZ/CdcoWF?=
 =?us-ascii?q?4ArvWPufLDp3nn5pZbyyihmo/US9xODxV9O43EhWoidDj9LCrGoC1wbJ5ciCUv?=
 =?us-ascii?q?Z9/lmu2TKI1w3L9OFELl47lbDBJ54i3LEwjJwTvlrHHiPsn0X2lqCWel0l+uiu?=
 =?us-ascii?q?9evnfq3rqoGAO4JwkA3yL6ojltKlDeglMQUCQ3KX9OW+2bH7+E32WrRKjvk4kq?=
 =?us-ascii?q?nDt5DaINwWpqq4Aw9Tz4Yi5A+zDzS439QCm3kIMlZFdAuAj4nnPVHBPur4AOyh?=
 =?us-ascii?q?g1Sjjjhr3erKPr7/DZXXKHjMjrPhcax6605Gxwo/1cpf6I5MCrEdPPLzXVf8tN?=
 =?us-ascii?q?jZDh86LQO42enmCMhm24MaWGKPBLKZMazIvV+J4OIvP/eDZIsPtDnhLPgl4ubk?=
 =?us-ascii?q?jWUlll8FYampwZwXZWi4Hvt8IkWZfWDjgtAbHWcKowoxVurqiFKZXD5XZnayWb?=
 =?us-ascii?q?885z4hBIKnC4fDWp6igLib0CinGZ1WY3hMCkqQHnfwa4WER/AMZTqQIs9mjDMI?=
 =?us-ascii?q?T7uhS4gn1RGosw/30L5nLuvS+i0FupPvztl15+vPlR4s8Tx4FdiS02aIT2tshG?=
 =?us-ascii?q?MHWyc23LxjoUx60lqMy7N4g/xfFdxQ/f9JSB01NZzHwux+CtDyXB/Bf9iTRFan?=
 =?us-ascii?q?RNWmHS8+TtYrz9ASZEZ9Hs2ojgrf0CqyH78Vi7uLCYQ38q3G2Xj9PcJ9y3fc26?=
 =?us-ascii?q?kngFkrWc9PNWyghq5i+AnfHY/Jk0OFl6m0caQQxjLC9GCGzWCWpkFXTBZwUbnZ?=
 =?us-ascii?q?XXAYfkbZsM725l3cQLO0CbQoKA1BydWcJatMbdHpiVZGRPLnONnFZ2KxmmGwBQ?=
 =?us-ascii?q?uHx7+WbYrqfXkd0zvZCEQejw8T+nOGPxAkBii9u2LeECBuFVX3bkzx6+Z+tm20?=
 =?us-ascii?q?QlU0zw6QaU1hzKS6+hgOiPyYSvMT2K8EuSg7pzV1Gla9w8zZC96aqwV9e6VcZM?=
 =?us-ascii?q?s34E1b2mLBqwx9IpugIrh+hl4fdgR3uF/u1xV3C4lajcgmtnQqzBB2KaKZ1lNB?=
 =?us-ascii?q?eCiV3ZTxOr3RN2nz8wqja6/Q2lHCztmW/r0D5+g/q1XmpAupDFYt821709lJ1H?=
 =?us-ascii?q?uR/o/FDA4MXpP+TEk29wJ2qKrHYiYg/YzU035sMa6qsjLZ39IpBe0lyguvfttF?=
 =?us-ascii?q?MaOEEhPyHNMeB8S0NOMqnF2pZAoePO9O7K40I9+md/ye1a+rIeZshi6pgX5G4Y?=
 =?us-ascii?q?B9yE2M8SV8R/XM35YExfGYwwSGWy39jFenrsD4h4REaSsOEWq4zCjuHJRRabFq?=
 =?us-ascii?q?fYYXFWeuJNW6xs9/h5HxQXFY7kOsB1Qc1M+vZxWSdV390RRM2ksNpXyohDW3zy?=
 =?us-ascii?q?ZzkzEvtaef2C3Ow+L/dBsIIGJLRW9ijUvyLoiwldwVQE+obw0xnhu/+Un637Rb?=
 =?us-ascii?q?pLh4L2TLQUZIfjL6LmF4Xqurq7qCZdVC6JcpsSVRTeS9bkqWSr/7oxsGzSzjG3?=
 =?us-ascii?q?FSyyw8dzGvop/5hQB1iHqBLHZvq3rUYcNwyg3F5NzfRv5R2SAKRDJihjnUBVi8?=
 =?us-ascii?q?Pt+p8suSl5rYtuC+VmShVoBccCXxzIOAsje76nNuARGlg/+zndjnGxAg0SDnz9?=
 =?us-ascii?q?lqSTnIrBHkb4jrzau6NvhrfktpBF/68Md6HoB+ko0thJAfw3Qah5OV/WYZnmf3?=
 =?us-ascii?q?K9lUxaX+bH8VTz4R39HV+BTl2FFkLn+RxIL2THSdztFhZ9mneGwW3C094ttOCK?=
 =?us-ascii?q?eV6rxEgCR0rkC5rQLXffhygDMdxeEy534dhuEDoBAtwTmFArAOAUlYOjThlxGJ?=
 =?us-ascii?q?79C9tqpbfmiufqar1Epig9+hFqqNrR9GWHb2YZoiGS5w7sNiMFPDynHz64fkeM?=
 =?us-ascii?q?XOYtIXrBGbjxDAj+1NIpIrivUKnTZnOX76vXA91+47ihlu0Yu7vYedLWVt4bm5?=
 =?us-ascii?q?AgVZNjDuY8MT+zftjbtRn8qM3oCvGIlhFSsPXJfyUf2oFzcSv+z9NwmSCD08tm?=
 =?us-ascii?q?ubGb3HEACE8khmqHbPE42xO3GTOXkU1tFiRBibJExCjwEYRjQ6npglFg+0wMzt?=
 =?us-ascii?q?alt25jcU5lTgsBtD1vpoNwXjUmfYvAqoaC07SJ2BIxpN9A1C+13ZMc+D7uJwAi?=
 =?us-ascii?q?FY+IeurBeWJ2yfZgRIC3wJW0OeC1DiOLmu+cfP8+yCCuWiKPvOZK2EqfZCWPeQ?=
 =?us-ascii?q?2ZKvzoxm8i6MN8WII3liFuA71VBFXXxjAMTZnDMPSyMMmiLJbs6bogq8+yJtos?=
 =?us-ascii?q?C+9vTrRBzg5Y+VB7RONtVv/gi8gb2fOO6ImCZ5NTFY24sMxXDWybgf310SiyB0?=
 =?us-ascii?q?ezmuC7QAsiHNQ7zKmq9KFB4WcCdzNMpO76Ih0QhBI8/bitXp1rFmiv45EUtKVV?=
 =?us-ascii?q?vkmsuxf8wFP3m9NE/bBEaMLLmJPyDLzNrtYayiSbxcluFUtxyrtDafEk/jOCmD?=
 =?us-ascii?q?ljbzWxCuN+FMkD+UPBhEtI6hdRZtDHDpTMj6ZR2jLN93kTo2zKUohnPLMG4QKy?=
 =?us-ascii?q?Rzf1lRob2Q8yxYhO5yG2hA7npjMOmFlDyV7+jeKpYKr/RrBj54mP5d4HQ/07FV?=
 =?us-ascii?q?9j1LRORpmCvOqd5ju1GnnfOJyjpiURpOrC5EhYOLvUp4P6XZ+YJNWXLF/BIL8G?=
 =?us-ascii?q?WRBA4Gp9pjCt3zpa9QzsLDm770KDdHoJro+p41Hc7dLM6AeFEoKwTgHD7TRAcI?=
 =?us-ascii?q?BRumMWaX00VWlfy69XCPqJU+7J/2l8xKAp5dW1t9M/QeDE1/VIgHIZF4WRs+nL?=
 =?us-ascii?q?KbhdJO7n27+l2ZfMhGs4qPZPOQBe7zMj/R2aFJexYS05v5K4oJP4H20kAkbUN1?=
 =?us-ascii?q?ytfkAU3VCPlJrz1sf0cevUlE9nt5UCVn0kboeg68pnUOGfeynRkoog9/Z/k9sj?=
 =?us-ascii?q?bq/1ozYFHNoX1jwwEKhdz5jGXJI3bKJ6CqUNQTUnKsug=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAAATvhBch0O0hNFkGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBg2sng3uIGYtSAT+BYEFolleBcxQYEwGHOCI?=
 =?us-ascii?q?0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpL4I2JAGCYgMDAQIgBFIGCQEBJAImAgIDV?=
 =?us-ascii?q?AYBDAYCAQEBgxyCAgWlVHwzijCBC4sxNAGBIj+BESeCNog6glcCiWWBSYRcNJB?=
 =?us-ascii?q?JBwKCIgSPKQYYiXmHS4kmiSqGaYFGgg5NI4M8gicXjiA8AQExAYEEAQGNJwEB?=
X-IPAS-Result: =?us-ascii?q?A0ABAAATvhBch0O0hNFkGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBg2sng3uIGYtSAT+BYEFolleBcxQYEwGHOCI0CQ0BAwEBAQEBA?=
 =?us-ascii?q?QIBEwEBAQgNCQgpL4I2JAGCYgMDAQIgBFIGCQEBJAImAgIDVAYBDAYCAQEBgxy?=
 =?us-ascii?q?CAgWlVHwzijCBC4sxNAGBIj+BESeCNog6glcCiWWBSYRcNJBJBwKCIgSPKQYYi?=
 =?us-ascii?q?XmHS4kmiSqGaYFGgg5NI4M8gicXjiA8AQExAYEEAQGNJwEB?=
X-IronPort-AV: E=Sophos;i="5.56,343,1539673200"; 
   d="scan'208";a="141782427"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 11 Dec 2018 23:54:25 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726625AbeLLHyW (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 12 Dec 2018 02:54:22 -0500
Received: from mga02.intel.com ([134.134.136.20]:43443 "EHLO mga02.intel.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726242AbeLLHyW (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 12 Dec 2018 02:54:22 -0500
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from fmsmga007.fm.intel.com ([10.253.24.52])
  by orsmga101.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 11 Dec 2018 23:54:21 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,343,1539673200"; 
   d="scan'208";a="106790869"
Received: from linux.intel.com ([10.54.29.200])
  by fmsmga007.fm.intel.com with ESMTP; 11 Dec 2018 23:54:21 -0800
Received: from [10.125.251.226] (abudanko-mobl.ccr.corp.intel.com [10.125.251.226])
        by linux.intel.com (Postfix) with ESMTP id E27EE58079D;
        Tue, 11 Dec 2018 23:54:18 -0800 (PST)
Subject: [PATCH v1 1/3] perf record: allocate affinity masks
From: Alexey Budankov <alexey.budankov@linux.intel.com>
To: Arnaldo Carvalho de Melo <acme@kernel.org>,
        Ingo Molnar <mingo@redhat.com>,
        Peter Zijlstra <peterz@infradead.org>
Cc: Jiri Olsa <jolsa@redhat.com>, Namhyung Kim <namhyung@kernel.org>,
        Alexander Shishkin <alexander.shishkin@linux.intel.com>,
        Andi Kleen <ak@linux.intel.com>,
        linux-kernel <linux-kernel@vger.kernel.org>
References: <42c2dcb4-7e6f-fcdb-7c87-e55ccb9884b0@linux.intel.com>
Organization: Intel Corp.
Message-ID: <b00e18af-4e77-ddcc-c0d7-cde6e54c0f9b@linux.intel.com>
Date: Wed, 12 Dec 2018 10:54:17 +0300
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101
 Thunderbird/52.9.1
MIME-Version: 1.0
In-Reply-To: <42c2dcb4-7e6f-fcdb-7c87-e55ccb9884b0@linux.intel.com>
Content-Type: text/plain; charset=utf-8
Content-Language: en-US
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org


Allocate affinity option and masks for mmap data buffers and
record thread as well as initialize allocated objects.

Signed-off-by: Alexey Budankov <alexey.budankov@linux.intel.com>
---
 tools/perf/builtin-record.c | 11 ++++++++++-
 tools/perf/perf.h           |  5 +++++
 tools/perf/util/evlist.c    |  6 +++---
 tools/perf/util/evlist.h    |  2 +-
 tools/perf/util/mmap.c      |  2 ++
 tools/perf/util/mmap.h      |  3 ++-
 6 files changed, 23 insertions(+), 6 deletions(-)

diff --git a/tools/perf/builtin-record.c b/tools/perf/builtin-record.c
index 882285fb9f64..4979719e54ae 100644
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@ -81,6 +81,7 @@ struct record {
 	bool			timestamp_boundary;
 	struct switch_output	switch_output;
 	unsigned long long	samples;
+	cpu_set_t		affinity_mask;
 };
 
 static volatile int auxtrace_record__snapshot_started;
@@ -533,7 +534,8 @@ static int record__mmap_evlist(struct record *rec,
 
 	if (perf_evlist__mmap_ex(evlist, opts->mmap_pages,
 				 opts->auxtrace_mmap_pages,
-				 opts->auxtrace_snapshot_mode, opts->nr_cblocks) < 0) {
+				 opts->auxtrace_snapshot_mode,
+				 opts->nr_cblocks, opts->affinity) < 0) {
 		if (errno == EPERM) {
 			pr_err("Permission error mapping pages.\n"
 			       "Consider increasing "
@@ -1980,6 +1982,9 @@ int cmd_record(int argc, const char **argv)
 # undef REASON
 #endif
 
+	CPU_ZERO(&rec->affinity_mask);
+	rec->opts.affinity = PERF_AFFINITY_SYS;
+
 	rec->evlist = perf_evlist__new();
 	if (rec->evlist == NULL)
 		return -ENOMEM;
@@ -2143,6 +2148,10 @@ int cmd_record(int argc, const char **argv)
 	if (verbose > 0)
 		pr_info("nr_cblocks: %d\n", rec->opts.nr_cblocks);
 
+	pr_debug("affinity (UNSET:%d, NODE:%d, CPU:%d) = %d\n",
+		 PERF_AFFINITY_SYS, PERF_AFFINITY_NODE,
+		 PERF_AFFINITY_CPU, rec->opts.affinity);
+
 	err = __cmd_record(&record, argc, argv);
 out:
 	perf_evlist__delete(rec->evlist);
diff --git a/tools/perf/perf.h b/tools/perf/perf.h
index 388c6dd128b8..08e75815de2f 100644
--- a/tools/perf/perf.h
+++ b/tools/perf/perf.h
@@ -83,8 +83,13 @@ struct record_opts {
 	clockid_t    clockid;
 	u64          clockid_res_ns;
 	int	     nr_cblocks;
+	int	     affinity;
 };
 
+#define PERF_AFFINITY_SYS  0
+#define PERF_AFFINITY_NODE 1
+#define PERF_AFFINITY_CPU  2
+
 struct option;
 extern const char * const *record_usage;
 extern struct option *record_options;
diff --git a/tools/perf/util/evlist.c b/tools/perf/util/evlist.c
index e90575192209..60e825be944a 100644
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@ -1018,7 +1018,7 @@ int perf_evlist__parse_mmap_pages(const struct option *opt, const char *str,
  */
 int perf_evlist__mmap_ex(struct perf_evlist *evlist, unsigned int pages,
 			 unsigned int auxtrace_pages,
-			 bool auxtrace_overwrite, int nr_cblocks)
+			 bool auxtrace_overwrite, int nr_cblocks, int affinity)
 {
 	struct perf_evsel *evsel;
 	const struct cpu_map *cpus = evlist->cpus;
@@ -1028,7 +1028,7 @@ int perf_evlist__mmap_ex(struct perf_evlist *evlist, unsigned int pages,
 	 * Its value is decided by evsel's write_backward.
 	 * So &mp should not be passed through const pointer.
 	 */
-	struct mmap_params mp = { .nr_cblocks = nr_cblocks };
+	struct mmap_params mp = { .nr_cblocks = nr_cblocks, .affinity = affinity };
 
 	if (!evlist->mmap)
 		evlist->mmap = perf_evlist__alloc_mmap(evlist, false);
@@ -1060,7 +1060,7 @@ int perf_evlist__mmap_ex(struct perf_evlist *evlist, unsigned int pages,
 
 int perf_evlist__mmap(struct perf_evlist *evlist, unsigned int pages)
 {
-	return perf_evlist__mmap_ex(evlist, pages, 0, false, 0);
+	return perf_evlist__mmap_ex(evlist, pages, 0, false, 0, PERF_AFFINITY_SYS);
 }
 
 int perf_evlist__create_maps(struct perf_evlist *evlist, struct target *target)
diff --git a/tools/perf/util/evlist.h b/tools/perf/util/evlist.h
index 868294491194..72728d7f4432 100644
--- a/tools/perf/util/evlist.h
+++ b/tools/perf/util/evlist.h
@@ -162,7 +162,7 @@ unsigned long perf_event_mlock_kb_in_pages(void);
 
 int perf_evlist__mmap_ex(struct perf_evlist *evlist, unsigned int pages,
 			 unsigned int auxtrace_pages,
-			 bool auxtrace_overwrite, int nr_cblocks);
+			 bool auxtrace_overwrite, int nr_cblocks, int affinity);
 int perf_evlist__mmap(struct perf_evlist *evlist, unsigned int pages);
 void perf_evlist__munmap(struct perf_evlist *evlist);
 
diff --git a/tools/perf/util/mmap.c b/tools/perf/util/mmap.c
index 8fc39311a30d..e68ba754a8e2 100644
--- a/tools/perf/util/mmap.c
+++ b/tools/perf/util/mmap.c
@@ -343,6 +343,8 @@ int perf_mmap__mmap(struct perf_mmap *map, struct mmap_params *mp, int fd, int c
 	map->fd = fd;
 	map->cpu = cpu;
 
+	CPU_ZERO(&map->affinity_mask);
+
 	if (auxtrace_mmap__mmap(&map->auxtrace_mmap,
 				&mp->auxtrace_mp, map->base, fd))
 		return -1;
diff --git a/tools/perf/util/mmap.h b/tools/perf/util/mmap.h
index aeb6942fdb00..e566c19b242b 100644
--- a/tools/perf/util/mmap.h
+++ b/tools/perf/util/mmap.h
@@ -38,6 +38,7 @@ struct perf_mmap {
 		int		 nr_cblocks;
 	} aio;
 #endif
+	cpu_set_t	affinity_mask;
 };
 
 /*
@@ -69,7 +70,7 @@ enum bkw_mmap_state {
 };
 
 struct mmap_params {
-	int			    prot, mask, nr_cblocks;
+	int			    prot, mask, nr_cblocks, affinity;
 	struct auxtrace_mmap_params auxtrace_mp;
 };
