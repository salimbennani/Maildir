Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 21:33:26 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id E4B40580261;
	Wed, 19 Dec 2018 03:06:07 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 19 Dec 2018 03:06:07 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3APb4VGxSy/FkkyVth3D9c0x+I2dpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64YxGAt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZH42y?=
 =?us-ascii?q?cYUPAeoCM+hWoYbyqFkBogexCwm3HOPiyCRFhmP10KAgz+gtDQ/L0Q4mEtkTsH?=
 =?us-ascii?q?rUttL1NKIKXO671qbIyzTDYO1S2Tzg7obHbBEgru2WUrJ2dsra1E4iGB7fgVWW?=
 =?us-ascii?q?qIzqITeV2v4Js2eF7utvSfigi2ggqwxqpjivx8EshZPThoIS0FzE8j95wIksKN?=
 =?us-ascii?q?C+VUV1b9mkEJ5KuCGbMYt7Wt8iQm9puCYm1r0Jp4S7cDIWx5Qgwh7Tc/iHc4mO?=
 =?us-ascii?q?4h35TuaRJi10hHV/eLKwnxqy/1KvxfHiWcav11ZKqSlFnsPQuXAK0hze7NWMRP?=
 =?us-ascii?q?hl/kq5xzqDywTe5vtZLU06i6bXMYMtz70smpYJsEnOHDf6lUf0gaOMa0kp9Oml?=
 =?us-ascii?q?5/75brjnvJOQKot5hwP4P68zgMKwG/44PRILX2WD+eSzyrnj/UrhTbVUgf05jL?=
 =?us-ascii?q?PZvIrZJcsFvK65BRFa0oI55xa4FTem38wUnXgBLF1bZBKKl5blN03KLfziEPuy?=
 =?us-ascii?q?jUqgnC12y/3FIrHtGJTAI3rbnLfkZ7l96kpcyAQpzdBY4pJZErUBIPP1Wk/su9?=
 =?us-ascii?q?3UFxw5PBKuw+bhFtp90poSWWWBA6+fLqzSq0SF5vwgI+aSfo8ZojX9JOY/5/7o?=
 =?us-ascii?q?k3A5nUURfa6z3ZsYcHy4BOhpI12FYXrwhdcMCWMKvgs9TOP0klGDXiNTam22X6?=
 =?us-ascii?q?I94DE7FY2nAZ3CRoCrnLyOwiO7EodKaWBBD1CGCW3oeJmcW/cQdCKSJddskjwe?=
 =?us-ascii?q?WrigV48uzxauuBX6y7p6NOXU/CIYuInn1Nh04e3TiB4z+SZ1D8Sbz2GCUWV0kn?=
 =?us-ascii?q?kUSD8x2aB1uVZ9xUub0ahkn/xYEsRe5/FOUggkL5LczOt6C9b0WgLGZdqJTFem?=
 =?us-ascii?q?QtO7ATA+VN4xwtkOY1pjFNWmlBzMwy2qA7oNnbyRGJM06r7c32T2J8tl0XnGz6?=
 =?us-ascii?q?khj14lQsdVL22pnKx/+hPXB47IlUWZiqmreb4d3C7L6GeM026OsFtEXw53VKXP?=
 =?us-ascii?q?RWofaVfOrdTl+kPCSKejCbc9PQtH08KCLqpKZcfvjVVJX/rjPNXeY2Ssm2a/Hx?=
 =?us-ascii?q?qIx7WMbJb0dGUZxinSFE8EkwUL93acKQc+Hjuho37ZDDF2CF3geV3s/vdkpHO7?=
 =?us-ascii?q?VEA0yRqKYFNn17ay/h4VhvmcS/cI07IAuSchrSh0HVmn09LXDdqAuxRufKFGbd?=
 =?us-ascii?q?wh51dH0HrTtxZhMZy4M6BimlkefhxqsEz0yRV4FJ9Mkcgwo3Ms1wp9N6SY3UhF?=
 =?us-ascii?q?dzOZ25DwJ7LWJnPz/BCpd67ZxFXe3MyK9acI7fQys0/jsx2xFko+73Vn1MFY02?=
 =?us-ascii?q?ed5pXPCwoSTZLxU0Yt+xhmvb3aZTM954fV1X1qPqm5qTvC29MvBOs4xResZdZf?=
 =?us-ascii?q?MKWYFADsF80WHdShKOsvm1KxdBILIPhS9LIoP8Ohb/aJwqqrM/hvnT24jWVL+p?=
 =?us-ascii?q?ty0l+R+CVmTO7I3JEFw++D0wuDVjf8ikqhs8/tlYBFYzESAnSwySz+CIFNYa1y?=
 =?us-ascii?q?eJ4BCX2yLM2v2tV+m5ntVmZY9V6+HV8JxNWleBuSb1Pn2w1Q2l8aoXimmSu+0j?=
 =?us-ascii?q?x1nCslrquZ3CzS3evicAALNXJMRGlnlV3sO5S7j8gGXEi0aAgkjAGl5UfmyKdB?=
 =?us-ascii?q?vqRwMm7TTV1OfyfoNWFiU7K8uaaYbM5L9Zwnrz9XUOO6YV2BTr79oh0a0z7sHm?=
 =?us-ascii?q?dExTA7cS2qtYv9nxBglG2dK3NzpmLDec5s3Rff+MDcRflJ0zsGRSl0kznWCkKn?=
 =?us-ascii?q?P9m0+9WZjJPDsuG4V2K8WZxfayjrzYWctCSl4W1mGwGwn/e2mtf/Cwg1zTf718?=
 =?us-ascii?q?V2VSXPtBv8YJPk1765MeJkeUlkHkT85NB5GoF9k4swgo8f2X4Bi5WR/HoHl3rz?=
 =?us-ascii?q?MNpB1aL/anoNWSAEw9rP7Af5301jK2qDx5jlWXWF3sthe966b3sW2y0n6MBGEq?=
 =?us-ascii?q?WU7L1CnSZuplq4rATRYeVynzsHyPsu7mIajP8NuAY30iqdBbUSF1FCPSPwjxSI?=
 =?us-ascii?q?88y+rKJPaWasa7ew1VByndC8DL6YpAFcV230epMjHS9288V+P0jA0Hz16oH4Zt?=
 =?us-ascii?q?bQacgfuQGTkxfFl+JVMo4+luIWhSp7PmLwpXgly+84jRN0x527spaIK35x/K2n?=
 =?us-ascii?q?GB5XLSP6Z9kc+jz2iaZen8CW352gH5l7GzULWofoQuysED4IqfvnMAOOGiUmqn?=
 =?us-ascii?q?iHAbrfAROf6EB+onLTFJCrMmubJXgDwtVkWRmdP1dfgAEPUTU+n545EB2qxcP7?=
 =?us-ascii?q?fEd44DAR+kD3qh9Wxu10MBn/V3/VpB20ZTcsVJifMB1W4xlZ6EjPNsye6v9zEz?=
 =?us-ascii?q?tc/p28twGNLm2bZwJVDWAGQECEBlbjPqWw6tnE6eSXGu2+L/7Wa7WUteNeT+uI?=
 =?us-ascii?q?xY6o0oZ+/TaDLMCPMWd5D/EhxkpPR3N5G9namzUSTSwYjTnNYtWfpBe9/C13s8?=
 =?us-ascii?q?++/O7qWALp+YuAFb9SPc9z9BCxhKeJL/SQizphKTZEypMMwmfFybgY3F4PkiFu?=
 =?us-ascii?q?aiOiEbIauS7WS6LQnKBXAgUfayNyMstI8q090hNMOc7dltP6yLp4guQpBFdCUF?=
 =?us-ascii?q?zrgtupatASI2GhKFPHA16GNLSYKj3KwMH3YqK8RadTjOVOsB2wtiiUE1X+PjSY?=
 =?us-ascii?q?jDTpUxGvMedRjCCUJhBeuYe9cgpzBmjnVt7pdhq7MNpvhz0s3bI0nm/KNXIbMT?=
 =?us-ascii?q?VkaUxNs6af7TlGjfR/AWBB6ntlIPKAmyaY6enYN5kXveFqAiRyi+JV/nA6x6FJ?=
 =?us-ascii?q?4yFDQfx/gDHSocJ2o1G6jumPzSJqUAZPqjZOno6EoV9uNrnZ9pZeX3bJ5xYN7W?=
 =?us-ascii?q?SWCxQXqNppENzvu6ZMytfRkKL/MitN89XR/cEEHcjbNNqHMGY9MRruADPVDBEK?=
 =?us-ascii?q?TTiuNWHegUxSiPCT9n2PoZg8pZjhg54OSr5dVFwoGfIWEEVlHNoeIJhpWjMoi6?=
 =?us-ascii?q?KUjMkN5Sn2kB6EecFU9rDOUOmJBvOnfCudg/9Ebh0T2rT+BYASMITh3AplcFYs?=
 =?us-ascii?q?2MyAIUPeVN1J6g8pKEcLsV5K+3t/BCVnwUD6Qhmv/24IEvW3n1gwhxcoJawW6T?=
 =?us-ascii?q?vh7k9/Bl3OoCJ4xFIsldjomXaRdzr1JY+5R4QQAC3x4Qx5FpThTgBnakWKnEF+?=
 =?us-ascii?q?PTPFXLMZ259nb21tmgiagZpCA/dYTLZFSBYKwLecYPB+lRx5oz+kjXVa+e/MD5?=
 =?us-ascii?q?cqwA4ja53qtW9c3wtlYPY8P6mWL61MmBwYgqOIoz/tzuUZ3gATPQAO/XmUdSpO?=
 =?us-ascii?q?v1YHZZc8IC/90uVq6AGG0x9OamMFUf1i9v5j8EIwP6KEwjDr2rhEAkSwMeWFKO?=
 =?us-ascii?q?WeoWeWxp3AeU85yk5dzxoNxrNxy8p2NhPMD00=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAABQJRpch0O0hNFjGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUwMBAQEBCwGCaQN/J4N9gzyPLoErgWAIJRRokWSEfRSBXxMBARg?=
 =?us-ascii?q?HDAGBS4J1gmoiNgcNAQMBAQEBAQECARMBAQEKCwkIKSMMgjYkAYJiAQIDAQIgB?=
 =?us-ascii?q?AsBDQEBNwEFCQEBChgCAhEVAgIDMQEFARwGAQwGAgEBAQSDGQGCAQQBCptSPIo?=
 =?us-ascii?q?pcHwzgnYBAQWBBQGBPYRoCBJ5ihiBHIFXP4ERJwyCKjWDEwsCAoEaKRw/gkmCV?=
 =?us-ascii?q?4dxgTaCGpV1BwKCJQSEAmWKTAYYgiuHTBGHUSyJHIR5ixoCBAIEBQIFDyGBKwG?=
 =?us-ascii?q?CBzMaMEOCbAmCEgwXEoM4hRSFCAE3PzKBBQEBjWABAQ?=
X-IPAS-Result: =?us-ascii?q?A0ANAABQJRpch0O0hNFjGgEBAQEBAgEBAQEHAgEBAQGBUwM?=
 =?us-ascii?q?BAQEBCwGCaQN/J4N9gzyPLoErgWAIJRRokWSEfRSBXxMBARgHDAGBS4J1gmoiN?=
 =?us-ascii?q?gcNAQMBAQEBAQECARMBAQEKCwkIKSMMgjYkAYJiAQIDAQIgBAsBDQEBNwEFCQE?=
 =?us-ascii?q?BChgCAhEVAgIDMQEFARwGAQwGAgEBAQSDGQGCAQQBCptSPIopcHwzgnYBAQWBB?=
 =?us-ascii?q?QGBPYRoCBJ5ihiBHIFXP4ERJwyCKjWDEwsCAoEaKRw/gkmCV4dxgTaCGpV1BwK?=
 =?us-ascii?q?CJQSEAmWKTAYYgiuHTBGHUSyJHIR5ixoCBAIEBQIFDyGBKwGCBzMaMEOCbAmCE?=
 =?us-ascii?q?gwXEoM4hRSFCAE3PzKBBQEBjWABAQ?=
X-IronPort-AV: E=Sophos;i="5.56,372,1539673200"; 
   d="scan'208";a="67499481"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 19 Dec 2018 03:06:05 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729130AbeLSLGD (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 19 Dec 2018 06:06:03 -0500
Received: from mail-wm1-f66.google.com ([209.85.128.66]:52661 "EHLO
        mail-wm1-f66.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1728471AbeLSLGC (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 19 Dec 2018 06:06:02 -0500
Received: by mail-wm1-f66.google.com with SMTP id m1so5648934wml.2
        for <linux-kernel@vger.kernel.org>; Wed, 19 Dec 2018 03:06:00 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=subject:to:cc:references:from:message-id:date:user-agent
         :mime-version:in-reply-to:content-language:content-transfer-encoding;
        bh=IDEq0xEKE5sZIIIOJo6rYMCXG3pYYRQ6TJUoMidPF1U=;
        b=c8Qa3VlbAb0xyFOn7n+U272BTOTP1pPO/ipP6So6iUWUFM9mGrKq/ig3yQkOWFYrnc
         yqStMvDqb+tsyVFsGWLuqB4XHSMJDTPseTmkg+5pT6ietTSrCBJu1d8MxuiOEgS2wCTi
         FBJk+LPxOeLChIoJYezwk4mt2GFpTHtSru6bk=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:subject:to:cc:references:from:message-id:date
         :user-agent:mime-version:in-reply-to:content-language
         :content-transfer-encoding;
        bh=IDEq0xEKE5sZIIIOJo6rYMCXG3pYYRQ6TJUoMidPF1U=;
        b=sp+v2BdAYw1a0Bks5UDK+7rviY9ic/UzfDMz9s3tCS+otmpUCRHjN4a1Pvlo+qv5ZA
         /GPxJWhVnTojpItDOLQ7OEp2IX55OXZuRR/WWygvGxrUZMzfG5zu1SkEEfumssNXA/cp
         oJBQdPMQy0cA76ADTkc6BL7GYGKfDaXvcC7yMSZ3k1eI3YCw9SWyPuw+GHn9PoWapgLJ
         o9keswhyMtn+lBDIDgkebBIWV49Rxf92TqzN4DLwjrQLRax3AgDza6+F6BzvAimj8h4I
         prdCI7imsA/tq205HN1ubgmZkiugJzN6xvUzBGKxcS8wLbz3BP5Fyn3sUwPWmAlKxCVK
         Lx6g==
X-Gm-Message-State: AA+aEWab6Nu9tSxo2G9XyT8z6cj6D628JrlPLklsDONZznl6trYsaLFH
        VQxjsBnv2kzKaYVDQM6CfQ8nZg==
X-Google-Smtp-Source: AFSGD/WKRl4Dre+tuzBpXSTaAcZm1YHV1gsPAYPum/p7Mh/psATqg9L5xNmroWSb5VYWi5yVi49jKQ==
X-Received: by 2002:a1c:81ca:: with SMTP id c193mr7159274wmd.66.1545217559629;
        Wed, 19 Dec 2018 03:05:59 -0800 (PST)
Received: from [192.168.0.40] (197.26.136.77.rev.sfr.net. [77.136.26.197])
        by smtp.googlemail.com with ESMTPSA id l37sm9343331wre.69.2018.12.19.03.05.57
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Wed, 19 Dec 2018 03:05:58 -0800 (PST)
Subject: Re: [PATCH v10 06/27] of: base: Add of_get_cpu_state_node() to get
 idle states for a CPU node
To: Ulf Hansson <ulf.hansson@linaro.org>,
        "Rafael J . Wysocki" <rjw@rjwysocki.net>,
        Sudeep Holla <sudeep.holla@arm.com>,
        Lorenzo Pieralisi <Lorenzo.Pieralisi@arm.com>,
        Mark Rutland <mark.rutland@arm.com>, linux-pm@vger.kernel.org
Cc: "Raju P . L . S . S . S . N" <rplsssn@codeaurora.org>,
        Stephen Boyd <sboyd@kernel.org>,
        Tony Lindgren <tony@atomide.com>,
        Kevin Hilman <khilman@kernel.org>,
        Lina Iyer <ilina@codeaurora.org>,
        Viresh Kumar <viresh.kumar@linaro.org>,
        Vincent Guittot <vincent.guittot@linaro.org>,
        Geert Uytterhoeven <geert+renesas@glider.be>,
        linux-arm-kernel@lists.infradead.org,
        linux-arm-msm@vger.kernel.org, linux-kernel@vger.kernel.org,
        Rob Herring <robh+dt@kernel.org>, devicetree@vger.kernel.org
References: <20181129174700.16585-1-ulf.hansson@linaro.org>
 <20181129174700.16585-7-ulf.hansson@linaro.org>
From: Daniel Lezcano <daniel.lezcano@linaro.org>
Message-ID: <65605bbd-ceda-2266-615e-20b9d3491bed@linaro.org>
Date: Wed, 19 Dec 2018 12:05:56 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.2.1
MIME-Version: 1.0
In-Reply-To: <20181129174700.16585-7-ulf.hansson@linaro.org>
Content-Type: text/plain; charset=utf-8
Content-Language: en-US
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 29/11/2018 18:46, Ulf Hansson wrote:
> The CPU's idle state nodes are currently parsed at the common cpuidle DT
> library, but also when initializing back-end data for the arch specific CPU
> operations, as in the PSCI driver case.
> 
> To avoid open-coding, let's introduce of_get_cpu_state_node(), which takes
> the device node for the CPU and the index to the requested idle state node,
> as in-parameters. In case a corresponding idle state node is found, it
> returns the node with the refcount incremented for it, else it returns
> NULL.
> 
> Moreover, for ARM, there are two generic methods, to describe the CPU's
> idle states, either via the flattened description through the
> "cpu-idle-states" binding [1] or via the hierarchical layout, using the
> "power-domains" and the "domain-idle-states" bindings [2]. Hence, let's
> take both options into account.
> 
> [1]
> Documentation/devicetree/bindings/arm/idle-states.txt
> [2]
> Documentation/devicetree/bindings/arm/psci.txt
> 
> Cc: Rob Herring <robh+dt@kernel.org>
> Cc: devicetree@vger.kernel.org
> Cc: Lina Iyer <ilina@codeaurora.org>
> Suggested-by: Sudeep Holla <sudeep.holla@arm.com>
> Co-developed-by: Lina Iyer <lina.iyer@linaro.org>
> Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
> Reviewed-by: Rob Herring <robh@kernel.org>

Nitpicking some kerneldoc formatting below.

Other than that:

Reviewed-by: Daniel Lezcano <daniel.lezcano@linaro.org>

> ---
> 
> Changes in v10:
> 	- None.
> 
> ---
>  drivers/of/base.c  | 35 +++++++++++++++++++++++++++++++++++
>  include/linux/of.h |  8 ++++++++
>  2 files changed, 43 insertions(+)
> 
> diff --git a/drivers/of/base.c b/drivers/of/base.c
> index 09692c9b32a7..8f6974a22006 100644
> --- a/drivers/of/base.c
> +++ b/drivers/of/base.c
> @@ -429,6 +429,41 @@ int of_cpu_node_to_id(struct device_node *cpu_node)
>  }
>  EXPORT_SYMBOL(of_cpu_node_to_id);
>  
> +/**
> + * of_get_cpu_state_node - Get CPU's idle state node at the given index
> + *
> + * @cpu_node: The device node for the CPU
> + * @index: The index in the list of the idle states
> + *
> + * Two generic methods can be used to describe a CPU's idle states, either via
> + * a flattened description through the "cpu-idle-states" binding or via the
> + * hierarchical layout, using the "power-domains" and the "domain-idle-states"
> + * bindings. This function check for both and returns the idle state node for
> + * the requested index.
> + *
> + * In case and idle state node is found at index, the refcount incremented for

s/and/an/

s/index/@index/


> + * it, so call of_node_put() on it when done. Returns NULL if not found.

The Return description must be in a separate section.

> + */
> +struct device_node *of_get_cpu_state_node(struct device_node *cpu_node,
> +					  int index)
> +{
> +	struct of_phandle_args args;
> +	int err;
> +
> +	err = of_parse_phandle_with_args(cpu_node, "power-domains",
> +					"#power-domain-cells", 0, &args);
> +	if (!err) {
> +		struct device_node *state_node =
> +			of_parse_phandle(args.np, "domain-idle-states", index);
> +
> +		of_node_put(args.np);
> +		return state_node;
> +	}
> +
> +	return of_parse_phandle(cpu_node, "cpu-idle-states", index);
> +}
> +EXPORT_SYMBOL(of_get_cpu_state_node);
> +
>  /**
>   * __of_device_is_compatible() - Check if the node matches given constraints
>   * @device: pointer to node
> diff --git a/include/linux/of.h b/include/linux/of.h
> index a5aee3c438ad..f9f0c65c095c 100644
> --- a/include/linux/of.h
> +++ b/include/linux/of.h
> @@ -348,6 +348,8 @@ extern const void *of_get_property(const struct device_node *node,
>  				int *lenp);
>  extern struct device_node *of_get_cpu_node(int cpu, unsigned int *thread);
>  extern struct device_node *of_get_next_cpu_node(struct device_node *prev);
> +extern struct device_node *of_get_cpu_state_node(struct device_node *cpu_node,
> +						 int index);
>  
>  #define for_each_property_of_node(dn, pp) \
>  	for (pp = dn->properties; pp != NULL; pp = pp->next)
> @@ -762,6 +764,12 @@ static inline struct device_node *of_get_next_cpu_node(struct device_node *prev)
>  	return NULL;
>  }
>  
> +static inline struct device_node *of_get_cpu_state_node(struct device_node *cpu_node,
> +					int index)
> +{
> +	return NULL;
> +}
> +
>  static inline int of_n_addr_cells(struct device_node *np)
>  {
>  	return 0;
> 


-- 
 <http://www.linaro.org/> Linaro.org │ Open source software for ARM SoCs

Follow Linaro:  <http://www.facebook.com/pages/Linaro> Facebook |
<http://twitter.com/#!/linaroorg> Twitter |
<http://www.linaro.org/linaro-blog/> Blog

