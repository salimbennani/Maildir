Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 08:44:54 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 745F358055F;
	Tue, 18 Dec 2018 14:41:47 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 18 Dec 2018 14:41:46 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AE/hSfhdOc7VG0bIeEXAXaxVelGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc6+YBSN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRPDI28?=
 =?us-ascii?q?cYUBEukPPehXoIbhulQBrxWxBRK0BO7t0TJImmP60Lcm3+g9CwzKwgotFM8Ovn?=
 =?us-ascii?q?TOq9X1Mb8fX+Svw6bWwjXMce5W2TTg44bNcxAhpOyHULVyccXL10YvGB3KjkiT?=
 =?us-ascii?q?qYH+PDOayP4Ns26F4OpkT+6vjHQnqw5orzWp28wiiZHJi5oLxlzY8Sh12ps5KN?=
 =?us-ascii?q?OmREJhfNKpE4dcuzubOoZ0Ws8uXn1ktSkgxrEbt5O3YjIGxIg9yxPdafGKdZWD?=
 =?us-ascii?q?7Aj5W+aLOzh4gWpoeLKhiBa29kit0vP8Vsaq31ZQtCZFkcfDtmoL1xPN7siLUP?=
 =?us-ascii?q?x9/l2u2TqX1gDT7P9LIVwsmKbFN5IsxqQ8mocdvEjdBCP6hUb7gLOMekgl+OWk?=
 =?us-ascii?q?8+Hnba/npp+YOY90kAb+MqE2l8y7AOQ4NBUOXmeC9eS/yrLj50v5T6tOjvEvla?=
 =?us-ascii?q?nYvpbaKtoBpqOiHQ9V3Zgs6wylAzelztsYh38HI0xBeB6diIjpIV7OLOjiDfij?=
 =?us-ascii?q?m1SsjCtrx/feM73lA5XNLWbMnK3ufLZg8ENczAszzdZC55NbEL0BIfTzWlPvu9?=
 =?us-ascii?q?zcFBM2Lwu0w+P/AtVnyoweQX6PArOeMK7KsV+H/OMvI/WWa48Sojr9K+Ul6OTo?=
 =?us-ascii?q?jX82glIdeaip3Z0KaHG3BPhmIkOZYWbyjdcFC2sFog0+TOnygl2YTTFTf2qyX7?=
 =?us-ascii?q?475jwjCoKmCpnMSpqugLyG2ie7GJpWa3tCClCNF3foaoqFV+0NaCKUPs9ujDgE?=
 =?us-ascii?q?WaK9RI8m0BGkrBX6xKZ/LurI5i0Ysoru28Ju5+3TkhEy9iZ4D96H3GGPVGx0mm?=
 =?us-ascii?q?IIRzkr3KFwu0B9y1GD0bRmjPxcD9Bc+/RJUgIiP57G0+N6E8zyWh7GftqRS1ap?=
 =?us-ascii?q?WNOmDSs1TtIw2dAOZUl9Fs6mjhDC2SqqHrAUm6aKBJwy7qLTwXzxK9xhxHbB0a?=
 =?us-ascii?q?krl0MmTddXNW26mq5/8BDeCJPTnEWHiammb6Qc0zTL9GeY02WOukZUUApzUaXA?=
 =?us-ascii?q?WXASfU/WrdX/5kPfQL6iE7UnMg1dycGcLqtGcMHmjVJDRP37ItTRf3qxm3usBR?=
 =?us-ascii?q?aP3r6DcZDle3sD0ynHCEgLiQYT/W2YOgg4HSqhp2PeDDpzFVPgeU/s8O9+qG+l?=
 =?us-ascii?q?QU8w1Q2Fc0ph17+t8B4PmfOcU+8T3q4DuCo5tzV0HVO939XKC9qApwttZrlcbc?=
 =?us-ascii?q?k64Fdd0WLZtgp9PpO7IqBmh14edRl3vkz02xV2DIVAjdYlrHcwwAVuLqKY1UtL?=
 =?us-ascii?q?dymE0pDoJr3XNm7y8Qi1ZK7SxF7f38iZ+6cV5PsjtlXsoRumFkwh83VgzdlYyH?=
 =?us-ascii?q?+c5pTMDAoPXpP9SEc39x5mp77EZikx/Z/b1XppMaOsqD/Nx8opBPc5yhanZ9pe?=
 =?us-ascii?q?ML6EGBXuHMEABsmuKPYlm16mbh8fOOBS9ag0P96pdvec2a6rOvpgkyyijWhd/I?=
 =?us-ascii?q?991UeM/TJmSuHUx5YF3+2Y3gyfWjfmjVeurtr4mZpZajEVBGa/zzbrBJRQZqFr?=
 =?us-ascii?q?YYkEE2OuLNCpydVkgJ7tXWVV9FqiB1MAxc+odgCeb1373Q1My0sXpWarlje/zz?=
 =?us-ascii?q?xxizsptLaQ3DTSw+T+cxoKIm5KRGh4gVbsO4S0lM0aXE6zYggtlRul41v6xqdB?=
 =?us-ascii?q?qKR+KWnTXVlHfyzsI25+Vauws6KIY9RT55MwrSVXTOO8bEiYSrHnuRsa0CDjH2?=
 =?us-ascii?q?xEyDAgbT6quZb5nx18iG2DKnZ+t37ZecB2xRfC693QX/9R3jwaRCZmjTnbHESz?=
 =?us-ascii?q?P96s/d+MjZfMrvi+V369Vp1UaSTqzZmPtCyh6W1oAB2/meu+mtnmEQg8zC/62M?=
 =?us-ascii?q?NmVSTOrBbgfIbr0762Pv5gfkltHFX88dZ1Gplikossg5EdwXsaiY+U/XYdkWfz?=
 =?us-ascii?q?LM9U2aTxbHcWQT4LwtjV4BXq2UF5L3KJwZ75WWuZwsd7e9a6ZWYW0Don789WEK?=
 =?us-ascii?q?eU8KBEnSxtr1q9rALRYuJyki0TyPQw834an/8GuBA2wSqDGLASElJVPSjtlxSO?=
 =?us-ascii?q?8tC/o79bZGepcbisykV+mcqtA62FogFZQHz5YIstHTds7sVjN1LByGHz6obheN?=
 =?us-ascii?q?XKbNMcrBuUkwrbj+hOKZI8jf4KhSthOWLgsnwp0e87jRpy3Z6kuIiLMXli/KW8?=
 =?us-ascii?q?AhRALD36e9sT+i3xjaZZhsuZxJqgHpJlGjUWRpfoSe+oHSkWtfTmMQaODTI9pm?=
 =?us-ascii?q?2aGbrZAQ+Q9kNmo2jTHJCsMnGdPGMZwsl6RBmBOExfhxgZXDcgkZ48CA+q39bt?=
 =?us-ascii?q?cFtj6jAS+174qQZMyuRyOBnkSWrfoAaoajEpSJmQNhZW7wdC51vLPsya9O58Ay?=
 =?us-ascii?q?ZY/pi5pgyXNmObfxhIDX0OWkGcB1HjOaSu5cDd8+eCAOqyNeDOYbKIqexRTPqI?=
 =?us-ascii?q?wZOv0o17/zeDLMmPP39iD+El1UpHR3x2B8PZmzAXQSwNiy3Nd9KbpAu7+iBvrs?=
 =?us-ascii?q?Cw7vXrWAHs5YuOEbdSMs9v+xe5gaidLe6QmT15JC1c1pMNw3/I1bce0EQTiyFo?=
 =?us-ascii?q?azmiD7AAuTTRQ6LXn69dFwQbZD9rNMtU86I82RFANtTGitzuzL53kP40B01BVV?=
 =?us-ascii?q?zggcypYc0KI2egNFLIHkqLNbKGJSHVzMHze6+zVbpQjOBMvR2qpTmbC1PjPiiE?=
 =?us-ascii?q?lzTxSxCvMORMgDuHMxBEpI69cghiCW74QdLiax27NsJ3jDIszb01gHPKKXATMT?=
 =?us-ascii?q?xmf0xRqb2Q6DtSgu9jFGxZ8nplMe6Elj6Z7ubCLJYWtPprAiJsmONb4HQ10b1V?=
 =?us-ascii?q?7C5fSfxxmSvSqMNuol68numOzDpnTARBqjJRiI2XukViPPaRyp4Ve3vC51ok/W?=
 =?us-ascii?q?+XBlxerstvDdDHuK1KzNXL0q7wfmRs6dXRqOkVCsfZNcHPE3skeU7rETPbARYG?=
 =?us-ascii?q?ZT2mL2fSgwpaiv7EpS7dlYQztpW5wMlGcbRcTlFgU6pCUkk=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAABkdhlch0O0hNFjGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBg2sUE4wWi3uCIZdGgSQDShcYEwGHHSI0CQ0?=
 =?us-ascii?q?BAwEBAQEBAQIBEwEBAQoLCQgpIwyCNiQBgmIDAwECJBMGAQE3AQUJAQEKISUDD?=
 =?us-ascii?q?AVJCgkFgx2CAQWmJoFsM4J2AQEFhyoIiyOBHBeBQD+EI4g6giaJJBqHFFGPLFc?=
 =?us-ascii?q?JgimPKySRVyyZR4FGbYEhMxoIKAiDJ4IbiQGFYB8ygQIDAQEhE40sAQE?=
X-IPAS-Result: =?us-ascii?q?A0ABAABkdhlch0O0hNFjGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBg2sUE4wWi3uCIZdGgSQDShcYEwGHHSI0CQ0BAwEBAQEBAQIBE?=
 =?us-ascii?q?wEBAQoLCQgpIwyCNiQBgmIDAwECJBMGAQE3AQUJAQEKISUDDAVJCgkFgx2CAQW?=
 =?us-ascii?q?mJoFsM4J2AQEFhyoIiyOBHBeBQD+EI4g6giaJJBqHFFGPLFcJgimPKySRVyyZR?=
 =?us-ascii?q?4FGbYEhMxoIKAiDJ4IbiQGFYB8ygQIDAQEhE40sAQE?=
X-IronPort-AV: E=Sophos;i="5.56,370,1539673200"; 
   d="scan'208";a="56904793"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 18 Dec 2018 14:41:44 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727846AbeLRWlm (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 18 Dec 2018 17:41:42 -0500
Received: from mail.kernel.org ([198.145.29.99]:44176 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1727127AbeLRWlm (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 18 Dec 2018 17:41:42 -0500
Received: from localhost (unknown [104.132.0.77])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 7CE3221871;
        Tue, 18 Dec 2018 22:41:40 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1545172900;
        bh=VQd3bMjFda8yZ+sXA29AOY7cXCpHbKhgeS0/MDfqL+Y=;
        h=Date:From:To:Cc:Subject:References:In-Reply-To:From;
        b=pJ4x/w/qSe3bBjyKqgQLG4epdA73t3k1ltg7cCYfKuv9FKJuQ+V5abkh9DQlOoxzb
         YV71MwJArWAS+FMNLbiUyVyzVoRvjQ96uy4JxZCbdeYI3t9Pl5Wa1MQRpLnqxOa8FO
         JALjG+j9OLlNYf5zGmzz6FE0qfjJOoPZrD4V1WNc=
Date: Tue, 18 Dec 2018 14:41:39 -0800
From: Jaegeuk Kim <jaegeuk@kernel.org>
To: Jens Axboe <axboe@kernel.dk>
Cc: linux-kernel@vger.kernel.org, linux-block@vger.kernel.org
Subject: Re: [PATCH v3] loop: drop caches if offset or block_size are changed
Message-ID: <20181218224139.GB31062@jaegeuk-macbookpro.roam.corp.google.com>
References: <20181214203223.7063-1-jaegeuk@kernel.org>
 <20181217194236.GA50659@jaegeuk-macbookpro.roam.corp.google.com>
 <29369548-df14-a5a7-2bee-a40b3479df68@kernel.dk>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <29369548-df14-a5a7-2bee-a40b3479df68@kernel.dk>
User-Agent: Mutt/1.8.2 (2017-04-18)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

If we don't drop caches used in old offset or block_size, we can get old data
from new offset/block_size, which gives unexpected data to user.

For example, Martijn found a loopback bug in the below scenario.
1) LOOP_SET_FD loads first two pages on loop file
2) LOOP_SET_STATUS64 changes the offset on the loop file
3) mount is failed due to the cached pages having wrong superblock

Cc: Jens Axboe <axboe@kernel.dk>
Cc: linux-block@vger.kernel.org
Reported-by: Martijn Coenen <maco@google.com>
Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
---
v2 -> v3:
 - avoid to submit IOs on frozen mq

Jens, how about this?

Thanks,

 drivers/block/loop.c | 29 +++++++++++++++++++++++++++--
 1 file changed, 27 insertions(+), 2 deletions(-)

diff --git a/drivers/block/loop.c b/drivers/block/loop.c
index cb0cc8685076..6b03121d62aa 100644
--- a/drivers/block/loop.c
+++ b/drivers/block/loop.c
@@ -1126,6 +1126,12 @@ loop_set_status(struct loop_device *lo, const struct loop_info64 *info)
 	if ((unsigned int) info->lo_encrypt_key_size > LO_KEY_SIZE)
 		return -EINVAL;
 
+	if (lo->lo_offset != info->lo_offset ||
+	    lo->lo_sizelimit != info->lo_sizelimit) {
+		sync_blockdev(lo->lo_device);
+		kill_bdev(lo->lo_device);
+	}
+
 	/* I/O need to be drained during transfer transition */
 	blk_mq_freeze_queue(lo->lo_queue);
 
@@ -1154,6 +1160,11 @@ loop_set_status(struct loop_device *lo, const struct loop_info64 *info)
 
 	if (lo->lo_offset != info->lo_offset ||
 	    lo->lo_sizelimit != info->lo_sizelimit) {
+		/* kill_bdev should have truncated all the pages */
+		if (lo->lo_device->bd_inode->i_mapping->nrpages) {
+			err = -EAGAIN;
+			goto exit;
+		}
 		if (figure_loop_size(lo, info->lo_offset, info->lo_sizelimit)) {
 			err = -EFBIG;
 			goto exit;
@@ -1375,22 +1386,36 @@ static int loop_set_dio(struct loop_device *lo, unsigned long arg)
 
 static int loop_set_block_size(struct loop_device *lo, unsigned long arg)
 {
+	int err = 0;
+
 	if (lo->lo_state != Lo_bound)
 		return -ENXIO;
 
 	if (arg < 512 || arg > PAGE_SIZE || !is_power_of_2(arg))
 		return -EINVAL;
 
+	if (lo->lo_queue->limits.logical_block_size != arg) {
+		sync_blockdev(lo->lo_device);
+		kill_bdev(lo->lo_device);
+	}
+
 	blk_mq_freeze_queue(lo->lo_queue);
 
+	/* kill_bdev should have truncated all the pages */
+	if (lo->lo_queue->limits.logical_block_size != arg &&
+			lo->lo_device->bd_inode->i_mapping->nrpages) {
+		err = -EAGAIN;
+		goto out;
+	}
+
 	blk_queue_logical_block_size(lo->lo_queue, arg);
 	blk_queue_physical_block_size(lo->lo_queue, arg);
 	blk_queue_io_min(lo->lo_queue, arg);
 	loop_update_dio(lo);
-
+out:
 	blk_mq_unfreeze_queue(lo->lo_queue);
 
-	return 0;
+	return err;
 }
 
 static int lo_ioctl(struct block_device *bdev, fmode_t mode,
-- 
2.19.0.605.g01d371f741-goog

