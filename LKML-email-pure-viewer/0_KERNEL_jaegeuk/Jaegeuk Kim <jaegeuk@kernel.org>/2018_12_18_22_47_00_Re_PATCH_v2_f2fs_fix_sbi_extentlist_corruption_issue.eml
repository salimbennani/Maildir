Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 08:44:55 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 52EFC58055F;
	Tue, 18 Dec 2018 14:47:08 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga004-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 18 Dec 2018 14:47:07 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AlxrqOxSimO9+W56BRJrM299udtpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64YBCHt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZDI2y?=
 =?us-ascii?q?b5UBAfcCM+ZWoIbyu0YBohmwCgm3HOPiyCRFhmPq0aAgz+gtDRvL0BImEtkTsH?=
 =?us-ascii?q?rUttL1NKIKXO6x1qbH0zrDYO1L2Tf+9YPGdxEhofSRVr93c8re01cgFwzbgVWN?=
 =?us-ascii?q?qozoJDCV2foXs2id8eVgUfiji2k9qwF+uzWiwNonhIrRho8N1FzI6SF0zJwoKd?=
 =?us-ascii?q?C2VkJ3e8OoHZhMuy2ANoZ7QNsuT3x0tCs10LEKpJC2cDYQxJg73RLSaf6Kfo6V?=
 =?us-ascii?q?6Rz5TumROy13hHd9dbK/mRmy9U+gx/XiVsm7zllKtDBJktrSuXAX0Rzc9MyHRu?=
 =?us-ascii?q?F6/ke71jaDzwHT6udaLkAojafXNYItz7oqmpYOv0nPADX6lFj1gaOKbEkp++ql?=
 =?us-ascii?q?5/ziYrr8p5+cM4F0ihv5MqQrgsG/BeU4Mg4TX2mU4Oi816Ps/Vf/QLpUiv06i6?=
 =?us-ascii?q?7ZsZ7cJcsFvK60GBFV0ok95BalFTum08oXnWMBLF1bfBKLlY/pO0vBIPzgF/ew?=
 =?us-ascii?q?n0yskCt3x/DBJrDhBpTNLnvdn7v7crd99lVRyA4yzdBZ+pJVBasNIPP1Wk/tqt?=
 =?us-ascii?q?PYCgU1PBCzw+biEN99zJ8RWXqTAq+FN6PfqV+I6fguI+mQfoAVvyzxK/g45/H0?=
 =?us-ascii?q?i385lkQQfa2o3ZsRdXC5Ee5qI0SfYXrwnNgBFX0GsRY5TOzvkFeCSyJcZ26uX6?=
 =?us-ascii?q?Ig4TE2EICmDYDdSYy3g7yB2yG7HptRZm1dDlCMEHHod5iLWvsWaSKSJNNhnSIA?=
 =?us-ascii?q?VbS7V4Ah0hSuvhfgy7V7NurU5jEYtZX72ddv/O3TlRYy9T9uA8SHyW6NTXp5nm?=
 =?us-ascii?q?cJRz8wwaB+rlZxylaF0ahknfNYEcZf6O9OUgc/LZTc1fB1C8juWgLdedeEUFWm?=
 =?us-ascii?q?Tc+gAT0rStIxwsUBY0ByG9i5ihDD3iyqA6IalrCRBZw09L7c0Gb1J8pn13nG06?=
 =?us-ascii?q?whhUE8QsRTLW2mmrJ/9w/LCoHUiUqZibileb4c3CHX8meD1nSBvEdfXA50UqXF?=
 =?us-ascii?q?WHQfa1DSrdT44EPCUrCvBa4mMgtH1c6NNK9KZsf1glVBQffpIM7ebH6pm2esGR?=
 =?us-ascii?q?aIwauBY5fwdGUDwirREkgEnBoV/XadKwc+ADyso2bfDDxoCFLubFng8eh4qHOn?=
 =?us-ascii?q?UEA0yxuGYFFm17qw4hQVn+CTS+sP3rIYvycssyl0HFe439LRF9qApwpgcL9AYd?=
 =?us-ascii?q?8n51dHz2bZtw17PpyvNK1igl8ecwJqv0LhzRl3C4NAkdQ0o3Mu1gZ9NaWY0FZZ?=
 =?us-ascii?q?fTOCwZ/wIqHXKnX1/B23caHW3k/R0dmI9aYP8vg3sEjjsxyzGUok8HVn1MdV3m?=
 =?us-ascii?q?CY5pXLCgoSTJ3wXlw29xh8u7HVfC0965nI2n1rNKm+qiXC1M4xBOs51hageM9S?=
 =?us-ascii?q?MaOZFAPoD8IWHcmvKOwwlFivYRIJJ+RS9K8yP8O7ePqKwq+rPOB8nD24iWRL+p?=
 =?us-ascii?q?xy0kWJ9yBkUO7Hw44Fw+2E3guATzr8llahvdztloBeeD4SGXCzyS76C45LZ61+?=
 =?us-ascii?q?ZJoEBn2qI8Kq2Np+nZntW3hD+V6nBlMG3tKpeBWIY1z82w1QyVoYoXi9lSSkyD?=
 =?us-ascii?q?x0likjrrCD0yzW3+TiaB0HN3ZLRWljl1vtIZK4j8sHXEiudAUpkBql5UDnx6lU?=
 =?us-ascii?q?vqh/Lm/TQVtWcCjyNW1tTqywtr+aac5V9JwoqTlXUPi7YV2CSL7yuQEa0yDgH2?=
 =?us-ascii?q?tZ3jw7bCulupb6nxx7jmKSMnBzoWHdecFxwxff+dPdSeRQ3joAWCl3lz3XCkKg?=
 =?us-ascii?q?MNmu+NWej43DvfymV2K9Sp1TdjHmzIOauyu8/2FqAxy/n/aol93jEAg61zL71t?=
 =?us-ascii?q?ZwWSXJqhb8fpfk16CgPe17eUloAUf269BmFYFmjoswmJYQ1GAZhpqP/HoLi2fz?=
 =?us-ascii?q?MchB1qL4Y3oAXjoLw9/T4Aj410xvNHOJx4TlVnqDxsttfcW1YmQT2igl9cBFFL?=
 =?us-ascii?q?+U7KBYnStyule4qAPRYftnkTsHx/oh9mUag/0Xtwo31SqSHKoSHUZDMCzolhSI?=
 =?us-ascii?q?6c2+rapNaGaud7iwyFRxndS7AL6epQFcXW7zeo0+Ei9o8sV/LFXM3WXv6oHjfd?=
 =?us-ascii?q?ncd9MSuQeSkxfdlOhVM5Mxm+EOhSpmP2L9oHIkx/Q6jRxowZG1ooyHJ39x86K+?=
 =?us-ascii?q?Bx5SLif1aN8L+jHxkaZemd6b0Ju1EZVmHjULQYHkTfa1ED8JsfTnNgCOECAzq3?=
 =?us-ascii?q?uBGLrfGxOf51lir37VD5+rMHSXLmEDzdp+XBmdOFBfgAcMUTU4hJE5Ex6lxNf7?=
 =?us-ascii?q?fEdl/DwR5UP4qhhRyuJuLRb/SXzSpAOpajcyVZieIwBa7gBE50fJL8Oe6vh/ED?=
 =?us-ascii?q?1f/p2ktAaNMHCUZxxUDWEVXUyJH1DiPr6z5dnZ7uiXHOy+I+HVYbWJr+xeWOyF?=
 =?us-ascii?q?xZau0otg4jaNOd+DPnhkD/0nxEVDWWp1FNjemzUKUyYXjT7Cb9aHpBeg/S16ts?=
 =?us-ascii?q?C//+rqWALs5ouPCqFeMdZ1+xCxjqeMKfSQhDtiKTtD0pMMxHnIyKUQ3VIIiiFu?=
 =?us-ascii?q?cSWtHqoEtSLXUK3QnapXBQYBayxvLMtI87483g5VNMHBl9P6zaR4geA1CltfUV?=
 =?us-ascii?q?zhm9qkZcgLI2G7KVPGC1yHNLWAJT3X3c73ZbmwRqFXjOVRrxewoyqUE1f/PjSf?=
 =?us-ascii?q?kDnkTwyvMeBJjC2BIBNSop2ychZzBmjlV9/mbhy7MNlqjTw527E0h3XKNXICPj?=
 =?us-ascii?q?h4aU9CsrqQ7SZAiPVlB2NB9mZlLfWDmyuB7+jXMJAWsf5qAiRyj+1b4XQ6xKFT?=
 =?us-ascii?q?7CFLX/F1nCrSrthzo1CpiOWPyzxnUAZQpTZPno6EoUJiOaCKvqVHDF3E9RVF3H?=
 =?us-ascii?q?jYXwUXrNtsDYXHu71Z1dXO0qn0LWER3cjT+J4+DsXbJd+EeFkgNFK9GjfZAwYY?=
 =?us-ascii?q?ThaoOHvZikgbl+udoC7G5qMmo4ThzcJdAoRQU0Y4Q7ZDUhxo?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAAC+dxlch0O0hNFjGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBg2snjBaLe4INFJdGgXYSGBMBhx0iNAkNAQM?=
 =?us-ascii?q?BAQEBAQECARMBAQEKCwkIKSMMgjYkAYJhAQEBAQIBAQIkEwYBATcBBQkBAQoUB?=
 =?us-ascii?q?AklAwwFSRMFgx2BeQgFpiWBbDOCdgEBBYcqCIsjgRwXgUA/gRGDEoRaDINUgia?=
 =?us-ascii?q?JPgaHDlGPO0gJgimPKySBXYUfilssmUeBRoIOMxoIKAg7gmyCGwwXiF6FYB8yg?=
 =?us-ascii?q?QIDAQEhE4pfASWCJwEB?=
X-IPAS-Result: =?us-ascii?q?A0ABAAC+dxlch0O0hNFjGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBg2snjBaLe4INFJdGgXYSGBMBhx0iNAkNAQMBAQEBAQECARMBA?=
 =?us-ascii?q?QEKCwkIKSMMgjYkAYJhAQEBAQIBAQIkEwYBATcBBQkBAQoUBAklAwwFSRMFgx2?=
 =?us-ascii?q?BeQgFpiWBbDOCdgEBBYcqCIsjgRwXgUA/gRGDEoRaDINUgiaJPgaHDlGPO0gJg?=
 =?us-ascii?q?imPKySBXYUfilssmUeBRoIOMxoIKAg7gmyCGwwXiF6FYB8ygQIDAQEhE4pfASW?=
 =?us-ascii?q?CJwEB?=
X-IronPort-AV: E=Sophos;i="5.56,370,1539673200"; 
   d="scan'208";a="55714801"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 18 Dec 2018 14:47:05 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727752AbeLRWrD (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 18 Dec 2018 17:47:03 -0500
Received: from mail.kernel.org ([198.145.29.99]:48602 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726652AbeLRWrC (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 18 Dec 2018 17:47:02 -0500
Received: from localhost (unknown [104.132.0.77])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 30D7921871;
        Tue, 18 Dec 2018 22:47:01 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1545173221;
        bh=fFs5Wh+FrupWDvQtt57ru2Rtp9JEzNYJJgJBe6I9ARU=;
        h=Date:From:To:Cc:Subject:References:In-Reply-To:From;
        b=tA3v8ttT07wfmBv0IAupJrL8l2uGDDA4jRUELvs4fsKpl6zo+ZdASHE47hE+YDxKH
         oanZqVT3pBoTytKQLCazR5qA9OikH63QWDrFU/nrUKXC4UgqOlv99BmkSFuHEcNAC0
         xozHH9VVtWpTCGvAoO4Ud6FISoe6N+OJbpSG25bY=
Date: Tue, 18 Dec 2018 14:47:00 -0800
From: Jaegeuk Kim <jaegeuk@kernel.org>
To: Chao Yu <yuchao0@huawei.com>
Cc: Sahitya Tummala <stummala@codeaurora.org>,
        linux-f2fs-devel@lists.sourceforge.net,
        linux-kernel@vger.kernel.org
Subject: Re: [PATCH v2] f2fs: fix sbi->extent_list corruption issue
Message-ID: <20181218224700.GD31062@jaegeuk-macbookpro.roam.corp.google.com>
References: <20181127003050.GG55960@jaegeuk-macbookpro.roam.corp.google.com>
 <fc8c38f6-a039-7b63-d25c-966b0d4396d8@huawei.com>
 <20181129033239.GE9838@codeaurora.org>
 <20181130203339.GB71781@jaegeuk-macbookpro.roam.corp.google.com>
 <49285288-cf99-5f5a-0d1a-c2e0accd8d3d@huawei.com>
 <20181212031749.GF9838@codeaurora.org>
 <0167a499-8479-6be4-946d-4446bd02ff63@huawei.com>
 <20181214075602.GA15236@codeaurora.org>
 <20181214142537.GA75922@jaegeuk-macbookpro.roam.corp.google.com>
 <ad28be8b-361e-550f-50c4-1744e60ff9c5@huawei.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <ad28be8b-361e-550f-50c4-1744e60ff9c5@huawei.com>
User-Agent: Mutt/1.8.2 (2017-04-18)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 12/18, Chao Yu wrote:
> On 2018/12/14 22:25, Jaegeuk Kim wrote:
> > On 12/14, Sahitya Tummala wrote:
> >> On Wed, Dec 12, 2018 at 11:36:08AM +0800, Chao Yu wrote:
> >>> On 2018/12/12 11:17, Sahitya Tummala wrote:
> >>>> On Fri, Dec 07, 2018 at 05:47:31PM +0800, Chao Yu wrote:
> >>>>> On 2018/12/1 4:33, Jaegeuk Kim wrote:
> >>>>>> On 11/29, Sahitya Tummala wrote:
> >>>>>>>
> >>>>>>> On Tue, Nov 27, 2018 at 09:42:39AM +0800, Chao Yu wrote:
> >>>>>>>> On 2018/11/27 8:30, Jaegeuk Kim wrote:
> >>>>>>>>> On 11/26, Sahitya Tummala wrote:
> >>>>>>>>>> When there is a failure in f2fs_fill_super() after/during
> >>>>>>>>>> the recovery of fsync'd nodes, it frees the current sbi and
> >>>>>>>>>> retries again. This time the mount is successful, but the files
> >>>>>>>>>> that got recovered before retry, still holds the extent tree,
> >>>>>>>>>> whose extent nodes list is corrupted since sbi and sbi->extent_list
> >>>>>>>>>> is freed up. The list_del corruption issue is observed when the
> >>>>>>>>>> file system is getting unmounted and when those recoverd files extent
> >>>>>>>>>> node is being freed up in the below context.
> >>>>>>>>>>
> >>>>>>>>>> list_del corruption. prev->next should be fffffff1e1ef5480, but was (null)
> >>>>>>>>>> <...>
> >>>>>>>>>> kernel BUG at kernel/msm-4.14/lib/list_debug.c:53!
> >>>>>>>>>> task: fffffff1f46f2280 task.stack: ffffff8008068000
> >>>>>>>>>> lr : __list_del_entry_valid+0x94/0xb4
> >>>>>>>>>> pc : __list_del_entry_valid+0x94/0xb4
> >>>>>>>>>> <...>
> >>>>>>>>>> Call trace:
> >>>>>>>>>> __list_del_entry_valid+0x94/0xb4
> >>>>>>>>>> __release_extent_node+0xb0/0x114
> >>>>>>>>>> __free_extent_tree+0x58/0x7c
> >>>>>>>>>> f2fs_shrink_extent_tree+0xdc/0x3b0
> >>>>>>>>>> f2fs_leave_shrinker+0x28/0x7c
> >>>>>>>>>> f2fs_put_super+0xfc/0x1e0
> >>>>>>>>>> generic_shutdown_super+0x70/0xf4
> >>>>>>>>>> kill_block_super+0x2c/0x5c
> >>>>>>>>>> kill_f2fs_super+0x44/0x50
> >>>>>>>>>> deactivate_locked_super+0x60/0x8c
> >>>>>>>>>> deactivate_super+0x68/0x74
> >>>>>>>>>> cleanup_mnt+0x40/0x78
> >>>>>>>>>> __cleanup_mnt+0x1c/0x28
> >>>>>>>>>> task_work_run+0x48/0xd0
> >>>>>>>>>> do_notify_resume+0x678/0xe98
> >>>>>>>>>> work_pending+0x8/0x14
> >>>>>>>>>>
> >>>>>>>>>> Fix this by cleaning up inodes, extent tree and nodes of those
> >>>>>>>>>> recovered files before freeing up sbi and before next retry.
> >>>>>>>>>>
> >>>>>>>>>> Signed-off-by: Sahitya Tummala <stummala@codeaurora.org>
> >>>>>>>>>> ---
> >>>>>>>>>> v2:
> >>>>>>>>>> -call evict_inodes() and f2fs_shrink_extent_tree() to cleanup inodes
> >>>>>>>>>>
> >>>>>>>>>>  fs/f2fs/f2fs.h     |  1 +
> >>>>>>>>>>  fs/f2fs/shrinker.c |  2 +-
> >>>>>>>>>>  fs/f2fs/super.c    | 13 ++++++++++++-
> >>>>>>>>>>  3 files changed, 14 insertions(+), 2 deletions(-)
> >>>>>>>>>>
> >>>>>>>>>> diff --git a/fs/f2fs/f2fs.h b/fs/f2fs/f2fs.h
> >>>>>>>>>> index 1e03197..aaee63b 100644
> >>>>>>>>>> --- a/fs/f2fs/f2fs.h
> >>>>>>>>>> +++ b/fs/f2fs/f2fs.h
> >>>>>>>>>> @@ -3407,6 +3407,7 @@ struct rb_entry *f2fs_lookup_rb_tree_ret(struct rb_root_cached *root,
> >>>>>>>>>>  bool f2fs_check_rb_tree_consistence(struct f2fs_sb_info *sbi,
> >>>>>>>>>>  						struct rb_root_cached *root);
> >>>>>>>>>>  unsigned int f2fs_shrink_extent_tree(struct f2fs_sb_info *sbi, int nr_shrink);
> >>>>>>>>>> +unsigned long __count_extent_cache(struct f2fs_sb_info *sbi);
> >>>>>>>>>>  bool f2fs_init_extent_tree(struct inode *inode, struct f2fs_extent *i_ext);
> >>>>>>>>>>  void f2fs_drop_extent_tree(struct inode *inode);
> >>>>>>>>>>  unsigned int f2fs_destroy_extent_node(struct inode *inode);
> >>>>>>>>>> diff --git a/fs/f2fs/shrinker.c b/fs/f2fs/shrinker.c
> >>>>>>>>>> index 9e13db9..7e3c13b 100644
> >>>>>>>>>> --- a/fs/f2fs/shrinker.c
> >>>>>>>>>> +++ b/fs/f2fs/shrinker.c
> >>>>>>>>>> @@ -30,7 +30,7 @@ static unsigned long __count_free_nids(struct f2fs_sb_info *sbi)
> >>>>>>>>>>  	return count > 0 ? count : 0;
> >>>>>>>>>>  }
> >>>>>>>>>>  
> >>>>>>>>>> -static unsigned long __count_extent_cache(struct f2fs_sb_info *sbi)
> >>>>>>>>>> +unsigned long __count_extent_cache(struct f2fs_sb_info *sbi)
> >>>>>>>>>>  {
> >>>>>>>>>>  	return atomic_read(&sbi->total_zombie_tree) +
> >>>>>>>>>>  				atomic_read(&sbi->total_ext_node);
> >>>>>>>>>> diff --git a/fs/f2fs/super.c b/fs/f2fs/super.c
> >>>>>>>>>> index af58b2c..769e7b1 100644
> >>>>>>>>>> --- a/fs/f2fs/super.c
> >>>>>>>>>> +++ b/fs/f2fs/super.c
> >>>>>>>>>> @@ -3016,6 +3016,16 @@ static void f2fs_tuning_parameters(struct f2fs_sb_info *sbi)
> >>>>>>>>>>  	sbi->readdir_ra = 1;
> >>>>>>>>>>  }
> >>>>>>>>>>  
> >>>>>>>>>> +static void f2fs_cleanup_inodes(struct f2fs_sb_info *sbi)
> >>>>>>>>>> +{
> >>>>>>>>>> +	struct super_block *sb = sbi->sb;
> >>>>>>>>>> +
> >>>>>>>>>> +	sync_filesystem(sb);
> >>>>>>>>>
> >>>>>>>>> This writes another checkpoint, which would not be what this retrial intended.
> >>>>>>>>
> >>>>>>>> Actually, checkpoint will not be triggered due to SBI_POR_DOING flag check
> >>>>>>>> as below:
> >>>>>>>>
> >>>>>>>> int f2fs_sync_fs(struct super_block *sb, int sync)
> >>>>>>>> {
> >>>>>>>> ...
> >>>>>>>> 	if (unlikely(is_sbi_flag_set(sbi, SBI_POR_DOING)))
> >>>>>>>> 		return -EAGAIN;
> >>>>>>>> ...
> >>>>>>>> }
> >>>>>>>>
> >>>>>>>> And also all dirty data/node won't be persisted due to SBI_POR_DOING flag,
> >>>>>>>> IIUC.
> >>>>>>>>
> >>>>>>>
> >>>>>>> Thanks Chao for the clarification.
> >>>>>>>
> >>>>>>> Hi Jaegeuk,
> >>>>>>>
> >>>>>>> Do you still have any further concerns or comments on this patch?
> >>>>>>
> >>>>>> Could you try the below first?
> >>>>>>
> >>>>>> --  How about adding a condition in f2fs_may_extent_tree() when adding extents?
> >>>>>> -- Likewise, if (shrinker is not registered) return false;
> >>>>>>
> >>>>>> If we can fix what you described directly, I don't want to rely on such the
> >>>>>> assumptions saying we won't do checkpoint. This flow literally says syncing
> >>>>>> and evicting cached objects, which opposed to what we'd like to drop all caches
> >>>>>> and restart fill_super again.
> >>>>>>
> >>>>>> Let me consider this as a final resolution.
> >>>>>
> >>>>> Jaegeuk,
> >>>>>
> >>>>> Still I want to ask, what kind of scenario we have to add retry logic in
> >>>>> fill_super for? As in android scenario, it must be extreme rare case that
> >>>>> system runs out-of-memory in boot time...at least, I didn't get any kind of
> >>>>> report like that.
> >>>>>
> >>>> Hi Chao,
> >>>
> >>> Hi Sahitya,
> >>>
> >>> Thanks for letting me know that, I git-blamed the code, and found the
> >>> original intention is like what you described:
> >>>
> >>> commit ed2e621a95d704e6a4e904cc00524e8cbddda0c2
> >>> Author: Jaegeuk Kim <jaegeuk@kernel.org>
> >>> Date:   Fri Aug 8 15:37:41 2014 -0700
> >>>
> >>>     f2fs: give a chance to mount again when encountering errors
> >>>
> >>>     This patch gives another chance to try mount process when we encounter
> >>> an error.
> >>>     This makes an effect on the roll-forward recovery failures as well.
> >>>
> >>> But I doubt that if we failed in recovery, maybe there is corruption in
> >>> this image, would it be better to fail the mount, and let user fsck it and
> >>> retry the mount? otherwise, the corruption may be expanded...
> > 
> > The problem was there was no way to recover roll-forward area by fsck. IOWs,
> > mount was failing all the time. I don't think roll-forward itself can corrupt
> 
> I got your concern, IMO, if mount fails, it will be better to let user
> decide how to handle it.

Roll-forward is not based on user decision, but f2fs does internally. So, I'm
in doubt we have to ask users on any failed case here.
I don't catch why we need to revert this which has been landed for a long time.

> 
> If mount fails due to:
> 
> 1) recovery, user can run fsck and/or try disable_roll_forward or
> norecovery option in another mount;
> 2) -EINVAL caused by sanity, user can run fsck and retry mount.
> 3) -ENOMEM caused low memory in system, user can add more memory and retry
> mount.
> ...
> 
> Thanks,
> 
> > the image more. Please report, if you have any issue on this.>
> >>>
> >>
> >> Hi Jaegeuk,
> >>
> >> How do you think about this? If you think it is okay, then I will fix the
> >> sbi->extent_list corruption issue, by removing the retry logic. Otherwise,
> >> I will fix it in the extent handling as you have suggested earlier.
> > 
> > I'd like to keep retry logic, so could you please test what I suggested above?
> > 
> > Thanks,
> > 
> >>
> >> Thanks,
> >>
> >>> Thanks,
> >>>
> >>>>
> >>>> In my case, the first boot up has a failure in recovery as below -
> >>>>
> >>>> F2FS-fs (mmcblk0p75): find_fsync_dnodes: detect looped node chain, blkaddr:1979471, next:1979472
> >>>> F2FS-fs (mmcblk0p75): Cannot recover all fsync data errno=-22
> >>>>
> >>>> But in the second attempt, retry will be set to false and because of that
> >>>> recover_fsync_data() is skipped. This helped mount to be successful in
> >>>> the second attempt. 
> >>>>
> >>>> Thanks,
> >>>>
> >>>>> Thanks,
> >>>>>
> >>>>>>
> >>>>>> Thanks,
> >>>>>>
> >>>>>>>
> >>>>>>> Thanks,
> >>>>>>> Sahitya.
> >>>>>>>
> >>>>>>>> Thanks,
> >>>>>>>>
> >>>>>>>>> How about adding a condition in f2fs_may_extent_tree() when adding extents?
> >>>>>>>>> Likewise, if (shrinker is not registered) return false;
> >>>>>>>>>
> >>>>>>>>>
> >>>>>>>>>> +	shrink_dcache_sb(sb);
> >>>>>>>>>> +	evict_inodes(sb);
> >>>>>>>>>> +	f2fs_shrink_extent_tree(sbi, __count_extent_cache(sbi));
> >>>>>>>>>> +}
> >>>>>>>>>> +
> >>>>>>>>>>  static int f2fs_fill_super(struct super_block *sb, void *data, int silent)
> >>>>>>>>>>  {
> >>>>>>>>>>  	struct f2fs_sb_info *sbi;
> >>>>>>>>>> @@ -3402,6 +3412,8 @@ static int f2fs_fill_super(struct super_block *sb, void *data, int silent)
> >>>>>>>>>>  	 * falls into an infinite loop in f2fs_sync_meta_pages().
> >>>>>>>>>>  	 */
> >>>>>>>>>>  	truncate_inode_pages_final(META_MAPPING(sbi));
> >>>>>>>>>> +	/* cleanup recovery and quota inodes */
> >>>>>>>>>> +	f2fs_cleanup_inodes(sbi);
> >>>>>>>>>>  	f2fs_unregister_sysfs(sbi);
> >>>>>>>>>>  free_root_inode:
> >>>>>>>>>>  	dput(sb->s_root);
> >>>>>>>>>> @@ -3445,7 +3457,6 @@ static int f2fs_fill_super(struct super_block *sb, void *data, int silent)
> >>>>>>>>>>  	/* give only one another chance */
> >>>>>>>>>>  	if (retry) {
> >>>>>>>>>>  		retry = false;
> >>>>>>>>>> -		shrink_dcache_sb(sb);
> >>>>>>>>>>  		goto try_onemore;
> >>>>>>>>>>  	}
> >>>>>>>>>>  	return err;
> >>>>>>>>>> -- 
> >>>>>>>>>> Qualcomm India Private Limited, on behalf of Qualcomm Innovation Center, Inc.
> >>>>>>>>>> Qualcomm Innovation Center, Inc. is a member of Code Aurora Forum, a Linux Foundation Collaborative Project.
> >>>>>>>>>
> >>>>>>>>> .
> >>>>>>>>>
> >>>>>>>>
> >>>>>>>
> >>>>>>> -- 
> >>>>>>> --
> >>>>>>> Sent by a consultant of the Qualcomm Innovation Center, Inc.
> >>>>>>> The Qualcomm Innovation Center, Inc. is a member of the Code Aurora Forum.
> >>>>>>
> >>>>>> .
> >>>>>>
> >>>>>
> >>>>
> >>>
> >>
> >> -- 
> >> --
> >> Sent by a consultant of the Qualcomm Innovation Center, Inc.
> >> The Qualcomm Innovation Center, Inc. is a member of the Code Aurora Forum.
> > 
> > .
> > 
