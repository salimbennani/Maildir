Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  15 Dec 2018 13:05:36 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id A129558061F;
	Fri, 14 Dec 2018 06:25:45 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 14 Dec 2018 06:25:45 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AxIdYfRfAMAasIcTBWaK+TmPwlGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc6+YReN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRPDI28?=
 =?us-ascii?q?cYUBEukPPehXoIbhulQBrxWxBRK0BO7t0TJImmP60Lcm3+g9CwzKwgotFM8Ovn?=
 =?us-ascii?q?TOq9X1Mb8fX+Svw6bWwjXMce5W2TTg44bNcxAhpOyHULVyccXL10YvGB3KjkiT?=
 =?us-ascii?q?qYH+PDOayP4Ns26F4OpkT+6vjHQnqw5orzWp28wiiZHJi5oLxlzY8Sh12ps5KN?=
 =?us-ascii?q?OmREJhfNKpE4dcuzubOoZ0Ws8vR2JltDwkxrAItpO3ZigHxZQ9yxPbaPGKdZWD?=
 =?us-ascii?q?7Aj5W+aLOzh4gWpoeLKhiBa29kit0vP8Vsaq31ZQtCZFkcfDtmoL1xPN7siLUP?=
 =?us-ascii?q?x9/l2u2TqX1gDT7P9LIVwsmKbFN5IsxqQ8mocdvEjdBCP6hUb7gLOMekgl+OWk?=
 =?us-ascii?q?8+Hnba/npp+YOY90kAb+MqE2l8y7AOQ4NBUOXmeC9eS/yrLj50v5T6tOjvEvla?=
 =?us-ascii?q?nYvpbaKtoBpqOiHQ9V3Zgs6wylAzelztsYh38HI0xBeB6diIjpIV7OLOjiDfij?=
 =?us-ascii?q?m1SsjCtrx/feM73lA5XNLWbMnK3ufLZg8ENczAszzdZC55NbEL0BIfTzWlPvu9?=
 =?us-ascii?q?zcFBM2Lwu0w+P/AtVnyoweQX6PArOeMK7KsV+H/OMvI/WWa48Sojr9K+Ul6OTo?=
 =?us-ascii?q?jX82glIdeaip3Z0KaHG3BPhmIkOZYWbyjdcFC2sFog0+TOnygl2YTTFTf2qyX7?=
 =?us-ascii?q?475jwjCoKmCpnMSpqugLyG2ie7GJpWa3tCClCNF3foaoqFV+0NaCKUPs9ujDgE?=
 =?us-ascii?q?WaK9RI8m0BGkrBX6xKZ/LurI5i0Ysoru28Ju5+3TkhEy9iZ4D96H3GGPVGx0mm?=
 =?us-ascii?q?IIRzkr3KFwu0B9y1GD0bRmjPxcD9Bc+/RJUgIiP57G0+N6E8zyWh7GftqRS1ap?=
 =?us-ascii?q?WNOmDSs1TtIw2dAOZUl9Fs6mjhDC2SqqHrAUm6aKBJwy7qLTwXzxK9xhxHbB0a?=
 =?us-ascii?q?krl0MmTddXNW26mq5/8BDeCJPTnEWHiammb6Qc0zTL9GeY02WOukZUUApzUaXA?=
 =?us-ascii?q?WXASfU/WrdX/5kPfQL6iE7UnMg1dycGcLqtGcMHmjVJDRP37ItTRf3qxm3usBR?=
 =?us-ascii?q?aP3r6DcZDle3sD0ynHCEgLiQYT/W2YOgg4HSqhp2PeDDpzFVPgeU/s8O9+qG+l?=
 =?us-ascii?q?QU8w1Q2Fc0ph17+t8B4PmfOcU+8T3q4DuCo5tzV0HVO939XKC9qApwttZrlcbc?=
 =?us-ascii?q?k64Fdd0WLZtgp9PpO7IqBmh14edRl3vkz02xV2DIVAjdYlrHcwwAVuLqKY1UtL?=
 =?us-ascii?q?dymE0pDoJr3XNm7y8Qi1ZK7SxF7f38iZ+6cV5PsjtlXsoRumFkwh83VgzdlYyH?=
 =?us-ascii?q?+c5pTMDAoPXpP9SEc39x5mp77EZikx/Z/b1XppMaOsqD/Nx8opBPc5yhanZ9pe?=
 =?us-ascii?q?ML6EGBXuHMEABsmuKPYlm16mbh8fOOBS9ag0P96pdvec2a6rOvpgkyyijWhd/I?=
 =?us-ascii?q?991UeM/TJmSuHUx5YF3+2Y3gyfWjfmjVeurtr4mZpZajEVBGa/zzbrBJRQZqFr?=
 =?us-ascii?q?YYkEE2OuLNCpydVkgJ7tXWVV9FqiB1MAxc+odgCeb1373Q1My0sXpWarlje/zz?=
 =?us-ascii?q?xxizsptLaQ3DTSw+T+cxoKIm5KRGh4gVbsO4S0lM0aXE6zYggtlRul41v6xqdB?=
 =?us-ascii?q?qKR+KWnTXVlHfyzsI25+Vauws6KIY9RT55MwrSVXTOO8bEiYSrHnuRsa0CDjH2?=
 =?us-ascii?q?xEyDAgbT6quZb5nx18iG2DKnZ+t37ZecB2xRfC693QX/9R3jwaRCZmjTnbHESz?=
 =?us-ascii?q?P96s/d+MjZfMrvi+V369Vp1UaSTqzZmPtCyh6W1oAB2/meu+mtnmEQg8zC/62M?=
 =?us-ascii?q?NmVSTOrBbgfIbr0762Pv5gfkltHFX88dZ1Gplikossg5EdwXsaiY+U/XYdkWfz?=
 =?us-ascii?q?LM9U2aTxbHcWQT4LwtjV4BXq2UF5L3KJwZ75WWuZwsd7e9a6ZWYW0Don789WEK?=
 =?us-ascii?q?eU8KBEnSxtr1q9rALRYuJyki0TyPQw834an/8GuBA2wSqDGLASElJVPSjtlxSO?=
 =?us-ascii?q?8tC/o79bZGepcbisykV+mcqtA62FogFZQHz5YIstHTds7sVjN1LByGHz6obheN?=
 =?us-ascii?q?XKbNMcrBuUkwrbj+hOKZI8jf4KhSthOWLgsnwp0e87jRpy3Z6kuIiLMXli/KW8?=
 =?us-ascii?q?AhRALD36e9sT+i3xjaZZhsuZxJqgHpJlGjUWRpfoSe+oHSkWtfTmMQaODTI9pm?=
 =?us-ascii?q?2aGbrZAQ+Q9kNmo2jTHJCsMnGdPGMZwsl6RBmBOExfhxgZXDcgkZ48CA+q39bt?=
 =?us-ascii?q?cFtj6jAS+174qQZMyuRyOBnkSWrfoAaoajEpSJmQNhZW7wdC51vLPsya9O58Ay?=
 =?us-ascii?q?ZY/pi5pgyXNmObfxhIDX0OWkGcB1HjOaSu5cDd8+eCAOqyNeDOYbKIqexRTPqI?=
 =?us-ascii?q?wZOv0o17/zeDLMmPP39iD+El1UpHR3x2B8PZmzAXQSwNiy3Nd9KbpAu7+iBvrs?=
 =?us-ascii?q?Cw7vXrWAHs5YuOEbdSMs9v+xe5gaidLe6QmT15JC1c1pMNw3/I1bce0EQTiyFo?=
 =?us-ascii?q?azmiD7AAuTTRQ6LXn69dFwQbZD9rNMtU86I82RFANtTGitzuzL53kP40B01BVV?=
 =?us-ascii?q?zggcypYc0KI2egNFLIHkqLNbKGJSHVzMHze6+zVbpQjOBMvR2qpTmbC1PjPiiE?=
 =?us-ascii?q?lzTxSxCvMORMgDuHMxBEpI69cghiCW74QdLiax27NsJ3jDIszb01gHPKKXATMT?=
 =?us-ascii?q?xmf0xRqb2Q6DtSgu9jFGxZ8nplMe6Elj6Z7ubCLJYWtPprAiJsmONb4HQ10b1V?=
 =?us-ascii?q?7C5fSfxxmSvSqMNuol68numOzDpnTARBqjJRiI2XukViPPaRyp4VYn/E/Q4c5C?=
 =?us-ascii?q?2sFhEPrt9sQon0p71Vz9HLnYr4LztP+s/O+tEVQc/OJ5TUHmAmNE/LETPbARYG?=
 =?us-ascii?q?BR2qMCmLhUVQn/yP9VWWo4I8p5yqn4ABHOwIHGcpH+8XXxw2VOcJJ416C3Z9ye?=
 =?us-ascii?q?aW?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AFAACJvBNch0O0hNFkGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBVAEBAQEBAQsBg2snjHSNJRSZOREYEwGHRyI3Bg0BAwEBAQE?=
 =?us-ascii?q?BAQIBEwEBAQgNCQgpIwyCNiQBgmEBAQEBAgEBAiQTBgEBNwEEAQkBAQoOBgQJJ?=
 =?us-ascii?q?QMMBUkTBYMcgXkIBaR5gWwzgnYBAQWHKQiLIoEcF4FAP4ERgxKEWgyDUoImiTq?=
 =?us-ascii?q?HElGPNkcJgiiPJyOBXYUcilksmTWBXIF4MxoIKAg7gmyCGwwXiF6FYB8ygQIDA?=
 =?us-ascii?q?QEhE4o2ASWCJwEB?=
X-IPAS-Result: =?us-ascii?q?A0AFAACJvBNch0O0hNFkGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BVAEBAQEBAQsBg2snjHSNJRSZOREYEwGHRyI3Bg0BAwEBAQEBAQIBEwEBAQgNC?=
 =?us-ascii?q?QgpIwyCNiQBgmEBAQEBAgEBAiQTBgEBNwEEAQkBAQoOBgQJJQMMBUkTBYMcgXk?=
 =?us-ascii?q?IBaR5gWwzgnYBAQWHKQiLIoEcF4FAP4ERgxKEWgyDUoImiTqHElGPNkcJgiiPJ?=
 =?us-ascii?q?yOBXYUcilksmTWBXIF4MxoIKAg7gmyCGwwXiF6FYB8ygQIDAQEhE4o2ASWCJwE?=
 =?us-ascii?q?B?=
X-IronPort-AV: E=Sophos;i="5.56,353,1539673200"; 
   d="scan'208";a="142144504"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 14 Dec 2018 06:25:43 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730067AbeLNOZk (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 14 Dec 2018 09:25:40 -0500
Received: from mail.kernel.org ([198.145.29.99]:48280 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1729684AbeLNOZj (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 14 Dec 2018 09:25:39 -0500
Received: from localhost (c-98-234-55-98.hsd1.ca.comcast.net [98.234.55.98])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 98CC120656;
        Fri, 14 Dec 2018 14:25:37 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1544797537;
        bh=b6JKAPXSPljrj1wVoUtgDlxF1Jxy1DIiPRbzQRNs9uI=;
        h=Date:From:To:Cc:Subject:References:In-Reply-To:From;
        b=kKyTsofuZMOpNjN3i6M+XVcRXpzByVkS4aG7rA9gk4qfr2K0IPaDw4YJ1rpsjvfgy
         OEIjzP03CsFR1wLnyEq4SRzforU6YtWjV2ECE9UbiqIFpm2rUae/7zV4dSSP6jsQJC
         CPgEQynssVA39Dpl/DbH2HumFCtwRkvWYOFOntEY=
Date: Fri, 14 Dec 2018 06:25:37 -0800
From: Jaegeuk Kim <jaegeuk@kernel.org>
To: Sahitya Tummala <stummala@codeaurora.org>
Cc: Chao Yu <yuchao0@huawei.com>,
        linux-f2fs-devel@lists.sourceforge.net,
        linux-kernel@vger.kernel.org
Subject: Re: [PATCH v2] f2fs: fix sbi->extent_list corruption issue
Message-ID: <20181214142537.GA75922@jaegeuk-macbookpro.roam.corp.google.com>
References: <1543207640-31033-1-git-send-email-stummala@codeaurora.org>
 <20181127003050.GG55960@jaegeuk-macbookpro.roam.corp.google.com>
 <fc8c38f6-a039-7b63-d25c-966b0d4396d8@huawei.com>
 <20181129033239.GE9838@codeaurora.org>
 <20181130203339.GB71781@jaegeuk-macbookpro.roam.corp.google.com>
 <49285288-cf99-5f5a-0d1a-c2e0accd8d3d@huawei.com>
 <20181212031749.GF9838@codeaurora.org>
 <0167a499-8479-6be4-946d-4446bd02ff63@huawei.com>
 <20181214075602.GA15236@codeaurora.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181214075602.GA15236@codeaurora.org>
User-Agent: Mutt/1.8.2 (2017-04-18)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 12/14, Sahitya Tummala wrote:
> On Wed, Dec 12, 2018 at 11:36:08AM +0800, Chao Yu wrote:
> > On 2018/12/12 11:17, Sahitya Tummala wrote:
> > > On Fri, Dec 07, 2018 at 05:47:31PM +0800, Chao Yu wrote:
> > >> On 2018/12/1 4:33, Jaegeuk Kim wrote:
> > >>> On 11/29, Sahitya Tummala wrote:
> > >>>>
> > >>>> On Tue, Nov 27, 2018 at 09:42:39AM +0800, Chao Yu wrote:
> > >>>>> On 2018/11/27 8:30, Jaegeuk Kim wrote:
> > >>>>>> On 11/26, Sahitya Tummala wrote:
> > >>>>>>> When there is a failure in f2fs_fill_super() after/during
> > >>>>>>> the recovery of fsync'd nodes, it frees the current sbi and
> > >>>>>>> retries again. This time the mount is successful, but the files
> > >>>>>>> that got recovered before retry, still holds the extent tree,
> > >>>>>>> whose extent nodes list is corrupted since sbi and sbi->extent_list
> > >>>>>>> is freed up. The list_del corruption issue is observed when the
> > >>>>>>> file system is getting unmounted and when those recoverd files extent
> > >>>>>>> node is being freed up in the below context.
> > >>>>>>>
> > >>>>>>> list_del corruption. prev->next should be fffffff1e1ef5480, but was (null)
> > >>>>>>> <...>
> > >>>>>>> kernel BUG at kernel/msm-4.14/lib/list_debug.c:53!
> > >>>>>>> task: fffffff1f46f2280 task.stack: ffffff8008068000
> > >>>>>>> lr : __list_del_entry_valid+0x94/0xb4
> > >>>>>>> pc : __list_del_entry_valid+0x94/0xb4
> > >>>>>>> <...>
> > >>>>>>> Call trace:
> > >>>>>>> __list_del_entry_valid+0x94/0xb4
> > >>>>>>> __release_extent_node+0xb0/0x114
> > >>>>>>> __free_extent_tree+0x58/0x7c
> > >>>>>>> f2fs_shrink_extent_tree+0xdc/0x3b0
> > >>>>>>> f2fs_leave_shrinker+0x28/0x7c
> > >>>>>>> f2fs_put_super+0xfc/0x1e0
> > >>>>>>> generic_shutdown_super+0x70/0xf4
> > >>>>>>> kill_block_super+0x2c/0x5c
> > >>>>>>> kill_f2fs_super+0x44/0x50
> > >>>>>>> deactivate_locked_super+0x60/0x8c
> > >>>>>>> deactivate_super+0x68/0x74
> > >>>>>>> cleanup_mnt+0x40/0x78
> > >>>>>>> __cleanup_mnt+0x1c/0x28
> > >>>>>>> task_work_run+0x48/0xd0
> > >>>>>>> do_notify_resume+0x678/0xe98
> > >>>>>>> work_pending+0x8/0x14
> > >>>>>>>
> > >>>>>>> Fix this by cleaning up inodes, extent tree and nodes of those
> > >>>>>>> recovered files before freeing up sbi and before next retry.
> > >>>>>>>
> > >>>>>>> Signed-off-by: Sahitya Tummala <stummala@codeaurora.org>
> > >>>>>>> ---
> > >>>>>>> v2:
> > >>>>>>> -call evict_inodes() and f2fs_shrink_extent_tree() to cleanup inodes
> > >>>>>>>
> > >>>>>>>  fs/f2fs/f2fs.h     |  1 +
> > >>>>>>>  fs/f2fs/shrinker.c |  2 +-
> > >>>>>>>  fs/f2fs/super.c    | 13 ++++++++++++-
> > >>>>>>>  3 files changed, 14 insertions(+), 2 deletions(-)
> > >>>>>>>
> > >>>>>>> diff --git a/fs/f2fs/f2fs.h b/fs/f2fs/f2fs.h
> > >>>>>>> index 1e03197..aaee63b 100644
> > >>>>>>> --- a/fs/f2fs/f2fs.h
> > >>>>>>> +++ b/fs/f2fs/f2fs.h
> > >>>>>>> @@ -3407,6 +3407,7 @@ struct rb_entry *f2fs_lookup_rb_tree_ret(struct rb_root_cached *root,
> > >>>>>>>  bool f2fs_check_rb_tree_consistence(struct f2fs_sb_info *sbi,
> > >>>>>>>  						struct rb_root_cached *root);
> > >>>>>>>  unsigned int f2fs_shrink_extent_tree(struct f2fs_sb_info *sbi, int nr_shrink);
> > >>>>>>> +unsigned long __count_extent_cache(struct f2fs_sb_info *sbi);
> > >>>>>>>  bool f2fs_init_extent_tree(struct inode *inode, struct f2fs_extent *i_ext);
> > >>>>>>>  void f2fs_drop_extent_tree(struct inode *inode);
> > >>>>>>>  unsigned int f2fs_destroy_extent_node(struct inode *inode);
> > >>>>>>> diff --git a/fs/f2fs/shrinker.c b/fs/f2fs/shrinker.c
> > >>>>>>> index 9e13db9..7e3c13b 100644
> > >>>>>>> --- a/fs/f2fs/shrinker.c
> > >>>>>>> +++ b/fs/f2fs/shrinker.c
> > >>>>>>> @@ -30,7 +30,7 @@ static unsigned long __count_free_nids(struct f2fs_sb_info *sbi)
> > >>>>>>>  	return count > 0 ? count : 0;
> > >>>>>>>  }
> > >>>>>>>  
> > >>>>>>> -static unsigned long __count_extent_cache(struct f2fs_sb_info *sbi)
> > >>>>>>> +unsigned long __count_extent_cache(struct f2fs_sb_info *sbi)
> > >>>>>>>  {
> > >>>>>>>  	return atomic_read(&sbi->total_zombie_tree) +
> > >>>>>>>  				atomic_read(&sbi->total_ext_node);
> > >>>>>>> diff --git a/fs/f2fs/super.c b/fs/f2fs/super.c
> > >>>>>>> index af58b2c..769e7b1 100644
> > >>>>>>> --- a/fs/f2fs/super.c
> > >>>>>>> +++ b/fs/f2fs/super.c
> > >>>>>>> @@ -3016,6 +3016,16 @@ static void f2fs_tuning_parameters(struct f2fs_sb_info *sbi)
> > >>>>>>>  	sbi->readdir_ra = 1;
> > >>>>>>>  }
> > >>>>>>>  
> > >>>>>>> +static void f2fs_cleanup_inodes(struct f2fs_sb_info *sbi)
> > >>>>>>> +{
> > >>>>>>> +	struct super_block *sb = sbi->sb;
> > >>>>>>> +
> > >>>>>>> +	sync_filesystem(sb);
> > >>>>>>
> > >>>>>> This writes another checkpoint, which would not be what this retrial intended.
> > >>>>>
> > >>>>> Actually, checkpoint will not be triggered due to SBI_POR_DOING flag check
> > >>>>> as below:
> > >>>>>
> > >>>>> int f2fs_sync_fs(struct super_block *sb, int sync)
> > >>>>> {
> > >>>>> ...
> > >>>>> 	if (unlikely(is_sbi_flag_set(sbi, SBI_POR_DOING)))
> > >>>>> 		return -EAGAIN;
> > >>>>> ...
> > >>>>> }
> > >>>>>
> > >>>>> And also all dirty data/node won't be persisted due to SBI_POR_DOING flag,
> > >>>>> IIUC.
> > >>>>>
> > >>>>
> > >>>> Thanks Chao for the clarification.
> > >>>>
> > >>>> Hi Jaegeuk,
> > >>>>
> > >>>> Do you still have any further concerns or comments on this patch?
> > >>>
> > >>> Could you try the below first?
> > >>>
> > >>> --  How about adding a condition in f2fs_may_extent_tree() when adding extents?
> > >>> -- Likewise, if (shrinker is not registered) return false;
> > >>>
> > >>> If we can fix what you described directly, I don't want to rely on such the
> > >>> assumptions saying we won't do checkpoint. This flow literally says syncing
> > >>> and evicting cached objects, which opposed to what we'd like to drop all caches
> > >>> and restart fill_super again.
> > >>>
> > >>> Let me consider this as a final resolution.
> > >>
> > >> Jaegeuk,
> > >>
> > >> Still I want to ask, what kind of scenario we have to add retry logic in
> > >> fill_super for? As in android scenario, it must be extreme rare case that
> > >> system runs out-of-memory in boot time...at least, I didn't get any kind of
> > >> report like that.
> > >>
> > > Hi Chao,
> > 
> > Hi Sahitya,
> > 
> > Thanks for letting me know that, I git-blamed the code, and found the
> > original intention is like what you described:
> > 
> > commit ed2e621a95d704e6a4e904cc00524e8cbddda0c2
> > Author: Jaegeuk Kim <jaegeuk@kernel.org>
> > Date:   Fri Aug 8 15:37:41 2014 -0700
> > 
> >     f2fs: give a chance to mount again when encountering errors
> > 
> >     This patch gives another chance to try mount process when we encounter
> > an error.
> >     This makes an effect on the roll-forward recovery failures as well.
> > 
> > But I doubt that if we failed in recovery, maybe there is corruption in
> > this image, would it be better to fail the mount, and let user fsck it and
> > retry the mount? otherwise, the corruption may be expanded...

The problem was there was no way to recover roll-forward area by fsck. IOWs,
mount was failing all the time. I don't think roll-forward itself can corrupt
the image more. Please report, if you have any issue on this.

> > 
> 
> Hi Jaegeuk,
> 
> How do you think about this? If you think it is okay, then I will fix the
> sbi->extent_list corruption issue, by removing the retry logic. Otherwise,
> I will fix it in the extent handling as you have suggested earlier.

I'd like to keep retry logic, so could you please test what I suggested above?

Thanks,

> 
> Thanks,
> 
> > Thanks,
> > 
> > > 
> > > In my case, the first boot up has a failure in recovery as below -
> > > 
> > > F2FS-fs (mmcblk0p75): find_fsync_dnodes: detect looped node chain, blkaddr:1979471, next:1979472
> > > F2FS-fs (mmcblk0p75): Cannot recover all fsync data errno=-22
> > > 
> > > But in the second attempt, retry will be set to false and because of that
> > > recover_fsync_data() is skipped. This helped mount to be successful in
> > > the second attempt. 
> > > 
> > > Thanks,
> > > 
> > >> Thanks,
> > >>
> > >>>
> > >>> Thanks,
> > >>>
> > >>>>
> > >>>> Thanks,
> > >>>> Sahitya.
> > >>>>
> > >>>>> Thanks,
> > >>>>>
> > >>>>>> How about adding a condition in f2fs_may_extent_tree() when adding extents?
> > >>>>>> Likewise, if (shrinker is not registered) return false;
> > >>>>>>
> > >>>>>>
> > >>>>>>> +	shrink_dcache_sb(sb);
> > >>>>>>> +	evict_inodes(sb);
> > >>>>>>> +	f2fs_shrink_extent_tree(sbi, __count_extent_cache(sbi));
> > >>>>>>> +}
> > >>>>>>> +
> > >>>>>>>  static int f2fs_fill_super(struct super_block *sb, void *data, int silent)
> > >>>>>>>  {
> > >>>>>>>  	struct f2fs_sb_info *sbi;
> > >>>>>>> @@ -3402,6 +3412,8 @@ static int f2fs_fill_super(struct super_block *sb, void *data, int silent)
> > >>>>>>>  	 * falls into an infinite loop in f2fs_sync_meta_pages().
> > >>>>>>>  	 */
> > >>>>>>>  	truncate_inode_pages_final(META_MAPPING(sbi));
> > >>>>>>> +	/* cleanup recovery and quota inodes */
> > >>>>>>> +	f2fs_cleanup_inodes(sbi);
> > >>>>>>>  	f2fs_unregister_sysfs(sbi);
> > >>>>>>>  free_root_inode:
> > >>>>>>>  	dput(sb->s_root);
> > >>>>>>> @@ -3445,7 +3457,6 @@ static int f2fs_fill_super(struct super_block *sb, void *data, int silent)
> > >>>>>>>  	/* give only one another chance */
> > >>>>>>>  	if (retry) {
> > >>>>>>>  		retry = false;
> > >>>>>>> -		shrink_dcache_sb(sb);
> > >>>>>>>  		goto try_onemore;
> > >>>>>>>  	}
> > >>>>>>>  	return err;
> > >>>>>>> -- 
> > >>>>>>> Qualcomm India Private Limited, on behalf of Qualcomm Innovation Center, Inc.
> > >>>>>>> Qualcomm Innovation Center, Inc. is a member of Code Aurora Forum, a Linux Foundation Collaborative Project.
> > >>>>>>
> > >>>>>> .
> > >>>>>>
> > >>>>>
> > >>>>
> > >>>> -- 
> > >>>> --
> > >>>> Sent by a consultant of the Qualcomm Innovation Center, Inc.
> > >>>> The Qualcomm Innovation Center, Inc. is a member of the Code Aurora Forum.
> > >>>
> > >>> .
> > >>>
> > >>
> > > 
> > 
> 
> -- 
> --
> Sent by a consultant of the Qualcomm Innovation Center, Inc.
> The Qualcomm Innovation Center, Inc. is a member of the Code Aurora Forum.
