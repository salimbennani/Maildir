Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  14 Dec 2018 20:24:18 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 8431358079D;
	Thu, 13 Dec 2018 21:01:45 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 13 Dec 2018 21:01:45 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A5/oUoBz+opWUvh3XCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e4VLfad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7S60/Vza/4KdxUBLmiD?=
 =?us-ascii?q?kJOSM3/m/UjcJ/jqxbrx2uqRxk247ZYpqYOOZ9c67HYd8XX3ZNUtpXWidcAo28?=
 =?us-ascii?q?dYwPD+8ZMOhctYbyuVQOogWjBQmvGejhzz5Ihnrr1qA90eQuCx/J3AM+ENITs3?=
 =?us-ascii?q?TZt9b1O7kIUeCz0qbIyS/Pb/RM2Tfy8YXFdA0qr/KUXb9ob8bd1U0iGxnYglie?=
 =?us-ascii?q?t4DpJS6Z2+cRv2SB7udtV/qjh3M7pwx+uDSj28khhpfTio4J0FzJ9jh1zYAoLt?=
 =?us-ascii?q?OiUkF7e8SrEJ5IuiGaKYR2RsQiTnl2uCY11LIGo4S3fCsUx5Q9wR7QdfiHf5KP?=
 =?us-ascii?q?4hL5W+adOTZ4hHR7d7Kjnxu+71Ssx+nmWsWp3ltGsDBJnsTPu3wRzRDe68qKRu?=
 =?us-ascii?q?N4/ki72DaP0w7T6vtDIUAxjafbL58hwrgtlpscqEjDHTH5mF/wjKCIckUo4++o?=
 =?us-ascii?q?6urhYrr4vJ+RLJF0ig7gPaQ0gMC/Avo3MhIIX2eF/eSwzrrj/Vf2QLlSlP05jr?=
 =?us-ascii?q?HZsIzGJcQcvqO5Bw5V0oU95BqlADamzc8VnX0GLFJDZRKGgJLlO1DIIPDkE/i/?=
 =?us-ascii?q?h06gnytsx/DDJrfhGInCLmDfkLf9erZw805cxxAyzdBD/Z1UDasNIPLuWkDrst?=
 =?us-ascii?q?zYAQQ0Mwi1w+bhFdV82ZkSWWOJAq+FLqzStUWE6f4oI+mJfIUVoiryK+A55/7y?=
 =?us-ascii?q?in80gV0dfa630pcNa3C4GfJmI0OeYXf3htcBEGEKvhcxTeDwiV2CVyJTaGi2X6?=
 =?us-ascii?q?4m+j47D4emB5/ZRo+xmLyBwDu7HppOa29cEVCMEXDod4aeV/cWci2SINRskjgF?=
 =?us-ascii?q?VbinVo8g2guitA78y7p7MOXU/jcUuo7k1Nhw/+fTjw099SRoD8SB1GGAV2J0kX?=
 =?us-ascii?q?kORzMs2KB/oFZyylGM0aVjh/xYFNpT5+5GUwsgNJ7cyfB6BM72Wg7bYtiJT1Om?=
 =?us-ascii?q?SM28AT4tVtIx38MOY0FlFtq/lB/DwTSlD6UVl7ORApw06bzT3372K8Z5yHbG0a?=
 =?us-ascii?q?0hgkIiQstOM22mm6F++xLSB47Pj0WWiaKqeb4A0y7K8WeJ1XCOs11AUA5sTaXF?=
 =?us-ascii?q?WmgSaVbMotTn+EzOVb+uBq4hMgta18GCLLBHatnojVVAWffiN87SY2O3m2esGx?=
 =?us-ascii?q?mIwqmAY5bte2UYxC/dElQLkxgP/XaaMggzHjuho2PbDDxpCVLvY0Pt/fNiqH+h?=
 =?us-ascii?q?SU801QWKb0xn17q64RMVgf2cS/UO3rMLoishqjN0HEqj0NLSEdaPuw1hfKBEa9?=
 =?us-ascii?q?Mn/FhHzX7ZtxB6PpG4Na9igkARcgtpsELuzRl4EZhAntUwo3MszwpyLryY3UhF?=
 =?us-ascii?q?dzOZ25DwJ7LWJnPz/BCpd67ZxFXe3MyK9acI7fQys0/jsx2xFko+73Vn1MFY0n?=
 =?us-ascii?q?uB5pnQEAUeS5PwUkYt+Bh8qLHXeS0954LS1X1xPqi4qD7C29Q1BOQ7zhasZctQ?=
 =?us-ascii?q?MKSBFAXqCc0VG9CuKPA2m1iudh8EJuFS+7IuMMO8avSG37SnPOB+kzK8jGRL+Z?=
 =?us-ascii?q?xy3ViI9yVhVOHIxZEFw/eD0wuDVjf8ikqhs8/tlYBFYzESAnSwySz+CIFNYa1y?=
 =?us-ascii?q?eJ4BCX2yLM2v2tV+m5ntVmZY9V6iHV8H2NWleQGPb1z7xgBQ0UUXoXq6mSq31T?=
 =?us-ascii?q?B0kjcprraB0yzK2ejtaB0HOmtTTml4kVjsOZS0j8wdXEWwbQgmjgGl5UX5x6hc?=
 =?us-ascii?q?vqh/NHPcQURLfyj3KWFtTK2wu6GGY85O7pMorCpWXP69YVCcVr7yvR8a3zn/EG?=
 =?us-ascii?q?tZwTAxbyuqtYnhnxxmlGKdK25+rXrDdsF33xvf5t3cRfhK0zoCRSl4jyTXB1em?=
 =?us-ascii?q?M9mo+9WUi4nMsuSkW229UZ1TdDHhzZmcuyuj+W1qHRq/kuiwmtL9EAg2yy/718?=
 =?us-ascii?q?RwWiXOoxbxeY3r16W8MeJ6cUhkHl7868xmGo5glos8no0f2X8fhp+N53oIjX/z?=
 =?us-ascii?q?MclH2aL5dHcNQD8Lw93P7wT/1kxsMGmJx57nWXWH2cRuecO6YmwN1yI57sBKDr?=
 =?us-ascii?q?qU7bNekSt0pFq4sRzeYfxnkjgBzvsu7WYQg/sVtwo10iWdHrcSEFFEPSzrkhSE?=
 =?us-ascii?q?9dG/o79RZGayariwz0t+kMulDLGDpAFcRXn4do0jHS928sVwLlbM3Gfv5YHjfd?=
 =?us-ascii?q?nadcgTuQGMkxfck+hVL4o8meEQiipgPWL9oGcpy+omjRF12ZG6vY6HK3hi/a6j?=
 =?us-ascii?q?Ax5YMCH1aN0X+j33kalemcOW1Zi1Hpp9AjULQIfoTfWwHTIQr/vnMhiBECYmpn?=
 =?us-ascii?q?eHA7bfHhKf6ER7r3LJCZ+rLGqaJH0YzdVkWRmcK1ZTgAESXDUmgJE5Ehqmy9Dm?=
 =?us-ascii?q?cEd8/joR/EL3qgNQyuJ0MBnySmfepAC1ajctVZiQNhxW4htZ50fSN8ye4fl+Hy?=
 =?us-ascii?q?VZ/p2nsQyMJXaXZwVODWEVREOEA0rvMaWp5dnF6+KYHPaxL+PSYbWSruxTT/eI?=
 =?us-ascii?q?yoyu0otl/DaMN9+DPnp4D/081UpMQ2p5G9nCmzgUTywXliTNb9OUpRum+y13qN?=
 =?us-ascii?q?y//+rvWA71+YSPDL5SO811+x+qmaeDK/KQhCFhJDlCy5MD3mXIx6Yf3VIIjyFu?=
 =?us-ascii?q?diKgEbABtS7LUaLRlbVbDx8dayNvKsRI67gw0RVKOc7ektn1zKJ3juYpC1dZUl?=
 =?us-ascii?q?zsgt2pZc0PI22nKFzLHlqENLSYKj3N2Mz3ZaK8SbtNjORbrRGwuDCbE1P9MTSH?=
 =?us-ascii?q?jTXmSxevMeRUhiGBIBNeoJ29cgpqCWX7TNPpcBu7MNp2jT0w2bI1h3PKOnQaMT?=
 =?us-ascii?q?hzaE5NqryQ7SVFgvRwAWBB73xlLfWalCad9eXXNpEWsf44ShhzwuZb5mkqjrhY?=
 =?us-ascii?q?9idJQNRrlybI6N1juVerlq+I0DUjGB5PrCtbwYzRs14nNajH+51oXXff4AlL9m?=
 =?us-ascii?q?KNER8Hqdx/BdCpva1MmfbVk6emCj5P/N/J/oM/Bs2cfMCOPXUsLBnBGzPOCgYB?=
 =?us-ascii?q?CzmxOjeM1ARmjPiO+yjN/dABoZ/2lc9WRw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AnAACJOBNch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUwUBAQsBg2snmCaCIZdBgXMUGBMBh0UiNgcNAQMBAQEBAQECARMBAQEIDQk?=
 =?us-ascii?q?IKSMMgjYigmUDAwECJAsBDQEBNwEFCQEBUANUBxIFgxyCAQWmMYFsM4J2AQEFg?=
 =?us-ascii?q?kOEZwiHfYMlgRwXgUA/jn+JQ4cGkEwJgiiPJgsYkUssiQSQIIFNC4F8MxoIKAg?=
 =?us-ascii?q?7gmyCGwwXiF6FYB8ygQIDAQEhE4wxAQE?=
X-IPAS-Result: =?us-ascii?q?A0AnAACJOBNch0O0hNFjHAEBAQQBAQcEAQGBUwUBAQsBg2s?=
 =?us-ascii?q?nmCaCIZdBgXMUGBMBh0UiNgcNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYigmUDA?=
 =?us-ascii?q?wECJAsBDQEBNwEFCQEBUANUBxIFgxyCAQWmMYFsM4J2AQEFgkOEZwiHfYMlgRw?=
 =?us-ascii?q?XgUA/jn+JQ4cGkEwJgiiPJgsYkUssiQSQIIFNC4F8MxoIKAg7gmyCGwwXiF6FY?=
 =?us-ascii?q?B8ygQIDAQEhE4wxAQE?=
X-IronPort-AV: E=Sophos;i="5.56,351,1539673200"; 
   d="scan'208";a="44938303"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 13 Dec 2018 21:01:43 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727239AbeLNFBl (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 14 Dec 2018 00:01:41 -0500
Received: from mail.kernel.org ([198.145.29.99]:60868 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726533AbeLNFBb (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 14 Dec 2018 00:01:31 -0500
Received: from localhost (unknown [104.132.0.81])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id D13C220879;
        Fri, 14 Dec 2018 05:01:29 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1544763689;
        bh=FPJtRCJoHGrVN3Z9sjCA5NX8KkyHIk3PqkGg3hA8wKg=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=U//6/MJHAzJrxuGcoWPgz7SK0H8Z2jN+TEThPwo3ioX2GAU4kLRt03mxrjT9tX+Ej
         t2DorKMgLG1LpxkoflmtwjaxdUKhH/zayS0zABNS01nDDyvO/0KXw/xvb/kUFTiIGL
         BUVn/Q30vX4m0cd69vUtza9hJNduDn8OIHU/PUmk=
From: Jaegeuk Kim <jaegeuk@kernel.org>
To: linux-kernel@vger.kernel.org,
        linux-f2fs-devel@lists.sourceforge.net
Cc: Jaegeuk Kim <jaegeuk@kernel.org>
Subject: [PATCH 2/3] f2fs: correct wrong spelling, issing_*
Date: Thu, 13 Dec 2018 21:01:26 -0800
Message-Id: <20181214050127.45025-2-jaegeuk@kernel.org>
X-Mailer: git-send-email 2.19.0.605.g01d371f741-goog
In-Reply-To: <20181214050127.45025-1-jaegeuk@kernel.org>
References: <20181214050127.45025-1-jaegeuk@kernel.org>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Let's use "queued" instead of "issuing".

Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
---
 fs/f2fs/debug.c   |  4 ++--
 fs/f2fs/f2fs.h    | 10 +++++-----
 fs/f2fs/segment.c | 26 +++++++++++++-------------
 3 files changed, 20 insertions(+), 20 deletions(-)

diff --git a/fs/f2fs/debug.c b/fs/f2fs/debug.c
index 11d4448e8e09..ebcc121920ba 100644
--- a/fs/f2fs/debug.c
+++ b/fs/f2fs/debug.c
@@ -64,7 +64,7 @@ static void update_general_status(struct f2fs_sb_info *sbi)
 		si->nr_flushed =
 			atomic_read(&SM_I(sbi)->fcc_info->issued_flush);
 		si->nr_flushing =
-			atomic_read(&SM_I(sbi)->fcc_info->issing_flush);
+			atomic_read(&SM_I(sbi)->fcc_info->queued_flush);
 		si->flush_list_empty =
 			llist_empty(&SM_I(sbi)->fcc_info->issue_list);
 	}
@@ -72,7 +72,7 @@ static void update_general_status(struct f2fs_sb_info *sbi)
 		si->nr_discarded =
 			atomic_read(&SM_I(sbi)->dcc_info->issued_discard);
 		si->nr_discarding =
-			atomic_read(&SM_I(sbi)->dcc_info->issing_discard);
+			atomic_read(&SM_I(sbi)->dcc_info->queued_discard);
 		si->nr_discard_cmd =
 			atomic_read(&SM_I(sbi)->dcc_info->discard_cmd_cnt);
 		si->undiscard_blks = SM_I(sbi)->dcc_info->undiscard_blks;
diff --git a/fs/f2fs/f2fs.h b/fs/f2fs/f2fs.h
index 81bd9a2bf22b..b634043fe14c 100644
--- a/fs/f2fs/f2fs.h
+++ b/fs/f2fs/f2fs.h
@@ -285,7 +285,7 @@ struct discard_cmd {
 	struct block_device *bdev;	/* bdev */
 	unsigned short ref;		/* reference count */
 	unsigned char state;		/* state */
-	unsigned char issuing;		/* issuing discard */
+	unsigned char queued;		/* queued discard */
 	int error;			/* bio error */
 	spinlock_t lock;		/* for state/bio_ref updating */
 	unsigned short bio_ref;		/* bio reference count */
@@ -327,7 +327,7 @@ struct discard_cmd_control {
 	unsigned int undiscard_blks;		/* # of undiscard blocks */
 	unsigned int next_pos;			/* next discard position */
 	atomic_t issued_discard;		/* # of issued discard */
-	atomic_t issing_discard;		/* # of issing discard */
+	atomic_t queued_discard;		/* # of queued discard */
 	atomic_t discard_cmd_cnt;		/* # of cached cmd count */
 	struct rb_root_cached root;		/* root of discard rb-tree */
 	bool rbtree_check;			/* config for consistence check */
@@ -892,7 +892,7 @@ struct flush_cmd_control {
 	struct task_struct *f2fs_issue_flush;	/* flush thread */
 	wait_queue_head_t flush_wait_queue;	/* waiting queue for wake-up */
 	atomic_t issued_flush;			/* # of issued flushes */
-	atomic_t issing_flush;			/* # of issing flushes */
+	atomic_t queued_flush;			/* # of queued flushes */
 	struct llist_head issue_list;		/* list for command issue */
 	struct llist_node *dispatch_list;	/* list for command dispatch */
 };
@@ -2167,8 +2167,8 @@ static inline bool is_idle(struct f2fs_sb_info *sbi, int type)
 		get_pages(sbi, F2FS_WB_CP_DATA) ||
 		get_pages(sbi, F2FS_DIO_READ) ||
 		get_pages(sbi, F2FS_DIO_WRITE) ||
-		atomic_read(&SM_I(sbi)->dcc_info->issing_discard) ||
-		atomic_read(&SM_I(sbi)->fcc_info->issing_flush))
+		atomic_read(&SM_I(sbi)->dcc_info->queued_discard) ||
+		atomic_read(&SM_I(sbi)->fcc_info->queued_flush))
 		return false;
 	return f2fs_time_over(sbi, type);
 }
diff --git a/fs/f2fs/segment.c b/fs/f2fs/segment.c
index 98649d304a2f..49ea9009ab5a 100644
--- a/fs/f2fs/segment.c
+++ b/fs/f2fs/segment.c
@@ -620,16 +620,16 @@ int f2fs_issue_flush(struct f2fs_sb_info *sbi, nid_t ino)
 		return 0;
 
 	if (!test_opt(sbi, FLUSH_MERGE)) {
-		atomic_inc(&fcc->issing_flush);
+		atomic_inc(&fcc->queued_flush);
 		ret = submit_flush_wait(sbi, ino);
-		atomic_dec(&fcc->issing_flush);
+		atomic_dec(&fcc->queued_flush);
 		atomic_inc(&fcc->issued_flush);
 		return ret;
 	}
 
-	if (atomic_inc_return(&fcc->issing_flush) == 1 || sbi->s_ndevs > 1) {
+	if (atomic_inc_return(&fcc->queued_flush) == 1 || sbi->s_ndevs > 1) {
 		ret = submit_flush_wait(sbi, ino);
-		atomic_dec(&fcc->issing_flush);
+		atomic_dec(&fcc->queued_flush);
 
 		atomic_inc(&fcc->issued_flush);
 		return ret;
@@ -648,14 +648,14 @@ int f2fs_issue_flush(struct f2fs_sb_info *sbi, nid_t ino)
 
 	if (fcc->f2fs_issue_flush) {
 		wait_for_completion(&cmd.wait);
-		atomic_dec(&fcc->issing_flush);
+		atomic_dec(&fcc->queued_flush);
 	} else {
 		struct llist_node *list;
 
 		list = llist_del_all(&fcc->issue_list);
 		if (!list) {
 			wait_for_completion(&cmd.wait);
-			atomic_dec(&fcc->issing_flush);
+			atomic_dec(&fcc->queued_flush);
 		} else {
 			struct flush_cmd *tmp, *next;
 
@@ -664,7 +664,7 @@ int f2fs_issue_flush(struct f2fs_sb_info *sbi, nid_t ino)
 			llist_for_each_entry_safe(tmp, next, list, llnode) {
 				if (tmp == &cmd) {
 					cmd.ret = ret;
-					atomic_dec(&fcc->issing_flush);
+					atomic_dec(&fcc->queued_flush);
 					continue;
 				}
 				tmp->ret = ret;
@@ -693,7 +693,7 @@ int f2fs_create_flush_cmd_control(struct f2fs_sb_info *sbi)
 	if (!fcc)
 		return -ENOMEM;
 	atomic_set(&fcc->issued_flush, 0);
-	atomic_set(&fcc->issing_flush, 0);
+	atomic_set(&fcc->queued_flush, 0);
 	init_waitqueue_head(&fcc->flush_wait_queue);
 	init_llist_head(&fcc->issue_list);
 	SM_I(sbi)->fcc_info = fcc;
@@ -909,7 +909,7 @@ static struct discard_cmd *__create_discard_cmd(struct f2fs_sb_info *sbi,
 	dc->len = len;
 	dc->ref = 0;
 	dc->state = D_PREP;
-	dc->issuing = 0;
+	dc->queued = 0;
 	dc->error = 0;
 	init_completion(&dc->wait);
 	list_add_tail(&dc->list, pend_list);
@@ -942,7 +942,7 @@ static void __detach_discard_cmd(struct discard_cmd_control *dcc,
 							struct discard_cmd *dc)
 {
 	if (dc->state == D_DONE)
-		atomic_sub(dc->issuing, &dcc->issing_discard);
+		atomic_sub(dc->queued, &dcc->queued_discard);
 
 	list_del(&dc->list);
 	rb_erase_cached(&dc->rb_node, &dcc->root);
@@ -1145,8 +1145,8 @@ static int __submit_discard_cmd(struct f2fs_sb_info *sbi,
 		dc->bio_ref++;
 		spin_unlock_irqrestore(&dc->lock, flags);
 
-		atomic_inc(&dcc->issing_discard);
-		dc->issuing++;
+		atomic_inc(&dcc->queued_discard);
+		dc->queued++;
 		list_move_tail(&dc->list, wait_list);
 
 		/* sanity check on discard range */
@@ -1996,7 +1996,7 @@ static int create_discard_cmd_control(struct f2fs_sb_info *sbi)
 	INIT_LIST_HEAD(&dcc->fstrim_list);
 	mutex_init(&dcc->cmd_lock);
 	atomic_set(&dcc->issued_discard, 0);
-	atomic_set(&dcc->issing_discard, 0);
+	atomic_set(&dcc->queued_discard, 0);
 	atomic_set(&dcc->discard_cmd_cnt, 0);
 	dcc->nr_discards = 0;
 	dcc->max_discards = MAIN_SEGS(sbi) << sbi->log_blocks_per_seg;
-- 
2.19.0.605.g01d371f741-goog

