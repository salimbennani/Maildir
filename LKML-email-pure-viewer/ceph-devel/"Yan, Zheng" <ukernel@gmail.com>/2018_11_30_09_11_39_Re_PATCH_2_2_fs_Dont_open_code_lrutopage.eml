Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:15:07 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 8B73E580213;
	Fri, 30 Nov 2018 01:11:59 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga002-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 30 Nov 2018 01:11:59 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ALmmOuxav7IIGn0iDsacBw5r/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpci4bR7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyNOAo2+?=
 =?us-ascii?q?YIUPAeQPPvtWoZfhqFsVtRuzBxKhBP/zxjJSmnP6wbE23uYnHArb3AIgBdUOsH?=
 =?us-ascii?q?HModn7NqgdS+a1wLHVxjrAb/NZxzH96IfGfhs8pvyMQLFwftTLyUkpCQzFik6d?=
 =?us-ascii?q?qYPgPzyP1+QNt3KX4PZnVeKqkmMqrRx6rDu3xso0lIXFmoYYxkrZ+Sh33oo5P8?=
 =?us-ascii?q?C0RU1nbdK+EZZdtTmWO5VqTs4mWW1luyY3xqcYtZKlYiQG0okryhrRZvGBboOG?=
 =?us-ascii?q?+AjsVPyLLjd9nH9leKywhxK18UW41O38Wde70ExQoipGjNbMrHYN2ALX6sSdTf?=
 =?us-ascii?q?t95Eih1S6O1wDV9O5EPVg5mbTHJ5Ml2LI8i5QevVrZEiPrm0j6kLWae0Qm9+Sw?=
 =?us-ascii?q?7uToeLTmppuSN49ujQH+N7wjmsi+AeQ+LwgPUHGX+eei2735+032XrFKguQxkq?=
 =?us-ascii?q?jXtpDVO94bq7WnAw9azIkj8QyzDzS439QCm3kIMlZFdAiAj4jzNFHCOOr4Auun?=
 =?us-ascii?q?g1SwjDdrwOjLPrngApXOMHfPirjgfatm5k5YyQozy81f5p1OBrEAJvLzRlH+tN?=
 =?us-ascii?q?jCAhAlNAy0xv7tCM9h2YMGRWKPHqiZPbvSsVCS5+IvP/ODZIgPtDb9Nvgq/fju?=
 =?us-ascii?q?jXAilF8ZfKmp24YXaX+iEvRnJUWZfWTjgtMbHWgWuQo+SfTgiEeeXj5Le3ayQ6?=
 =?us-ascii?q?U86yk5CIKhE4jPXIOtgLuH3Ce9GZ1bfWRGClGKEXf1eISIQfYMaCSOIsB/ljwI?=
 =?us-ascii?q?T6SuS4gk1Ru2rg/116JnLvbI+i0frZ/szsN15+3UlREx7zB0Fd6S02OWQmFwn2?=
 =?us-ascii?q?MIQSI23a9lrUx8zFeDzbZ3g/hCGdNP4PNJVx8wNYTAwOxiF9DyRgXBc8+KSFm8?=
 =?us-ascii?q?RNWqGzUxTtMrzN8IbEZwANGijhHF3yq3DL4Zjb2LBJoo8q3C23j9Pdpyy3HD1K?=
 =?us-ascii?q?M5lVkpXtNPNXG6hq547wXcGpTGk1uHmKqwdaQTxijN9HydwmqIu01YVA1wUaDB?=
 =?us-ascii?q?XX0EYkvWrNL55l7NTrO0CLQnNBdBxtCGKqdQdtLpilBGTu/5ONvCe2Kxh3uwBR?=
 =?us-ascii?q?GQy7yRdoXqZXsS0D/dCEcelQAT5miJNQ4lCyelomLeCiFuFF31b0Pt9+l+tG20?=
 =?us-ascii?q?Tksuww6WaE1h0qK/+gQJivyEV/MTwrUEtT89qzV1GVa92M7WC9qApgZ7YKVQe9?=
 =?us-ascii?q?Q94E1D1WLYsQx9MYetL6Rjhl4YbgR2sFni1xRxCoVcj8cqqGkmwxZ1KaKdyFlB?=
 =?us-ascii?q?bS+X3YjsOr3LLWn/5Aqga6rI1VDRztmX+r0D5+8lq1r+pg6pEEki83J509RO13?=
 =?us-ascii?q?uc55PKDBcdUJ7rU0Y38QR6qK/eYiUn+4zU0nhsO7GusjDew9IpGPclyhG4ctZf?=
 =?us-ascii?q?LaOIDhP9H9cbBsiuMuMqnVepYwkAPOBT8q40Isyne+GH2K6tIOZvgjamgX5b74?=
 =?us-ascii?q?B610KG7zB8RfLQ35YZ3/GY2ROKVy39jFi9qM/3g51LZTYIEmq51yfkHo9RarRu?=
 =?us-ascii?q?cokRDWehPtO4xs95h57rQHNY8F+jB1Ub2M6mYxaSblr93RFO2kQTu3CohSy4zz?=
 =?us-ascii?q?lsmTEzsqWfxDDOw/jldBcfOm9LRXNujFf2LYivktAaWlOlbwwolBuj+Eb7yLJX?=
 =?us-ascii?q?pKV5L2nPX0hIezL6IH1lUqu1rrCCedJA6Is0sSVLV+SxeVKaRaTnoxsZ0CPjGH?=
 =?us-ascii?q?FSxCsheDGpuZX5nhp6h3ybLHtoqHrZeMdwxQrQ5dDGRP5R2CYGSzd8iTXNGle8?=
 =?us-ascii?q?ONyp982Ol5jfquC+S36hVppLfCjr14yAszG35W9rAR25hP2zntznEQ4n0S70zd?=
 =?us-ascii?q?VqVCPIrAribYnvzai1LeVnfkxwDl/m98V6Ap1+kpc3hJwI2ngVnJSV8WAHkWfu?=
 =?us-ascii?q?K9pb363+YWEJRT4Kxd7V/Qfk1FdiLnKP24L2SHGdztF9aNm9Z2Mcwjg94NxSCK?=
 =?us-ascii?q?eI8LxEmjN4ol+5rQLSe/dxhDkcxuU16H4Gne4JohEiwTuHArAdBkRYOS3slxKV?=
 =?us-ascii?q?79GxtqlXZWCvcaSu20p6h9yuELaCogREUnbjZpgiBTNw7tl4MF/UzH3z7YTkdM?=
 =?us-ascii?q?PRbN0JsB2UjgzAj/NUKJ8qkvoKhCxnOX/yvHE/yu47iwBu0o++vISdN2pt+6e5?=
 =?us-ascii?q?CAZCNjLpf8MT5i3tjaFGk8mNxY+vGZFhGigRUJvsUPKlCzYStfXhNwaTHzwwsH?=
 =?us-ascii?q?abGbzDHQCB7EdqtW7AE5euN3uPPnkW0c1iRAWBJExYmA0UXi81npsnGQCx3sDh?=
 =?us-ascii?q?bF115jMM5l77txtMzPhnNwLkX2fbpQeobCo0SZeFIBpX6AFC+1naMciE4u1vGC?=
 =?us-ascii?q?FY+4WrrBaRJWyDewRIEWYJV1SEBlDkI7mu/MTA/PKeBuakNPvOZrOOqeNFWveM?=
 =?us-ascii?q?xJKv1JZm/jmWOsWOOHliE+M02k5ZUX9lHMTZni0FSzYLmCLVc86buBC89zV3rs?=
 =?us-ascii?q?+h8fTrWwHv5YqVB7tRK9Vv/B+2jrmZN+6NnyZ0MjJY1pIKxX/Vx7kTxl8Siydy?=
 =?us-ascii?q?dzazFbQMrzLCTKXVmqVPFR4UdztzNNdU76I7xgRCI9Pbhcjv1rFmjv85EVNFVV?=
 =?us-ascii?q?36l8GtZMwKJXy9NVzdCEaKMrSGOSPEw8XtbaygTr1Qif1etwestjaDD0/jIjOD?=
 =?us-ascii?q?miH1VxCuNOFAlj2UMAZCt4G9bBltD3PuTNbnah29Ld92gic6wbwyhnPWK2EcNS?=
 =?us-ascii?q?JwfF9Krr2V9SlYmOlwG3Rd7np5KumJgyaY4PPeKpYTsPtrBDx7luNa4HsgzbtV?=
 =?us-ascii?q?4zpJRPh0mCvUs95vrEuqkuiJyjp7ThVOrixHi56MvUVnau3l8cxGU3He/QkK80?=
 =?us-ascii?q?2LFg8H4dBiD47BoadVn5L+naS3YAVC/tTbt4NIGsvZMsSKNFIuNBPoHHjfCw5T?=
 =?us-ascii?q?Hm3jDn3Wm0EIyKLazXaStJVv78G0wJc=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AlAAD4/QBch0O0hNFiHgEGBwaBUQkLA?=
 =?us-ascii?q?YJdgQ4ng3mDe5AmUAEBBoE1FIkLA26NOIFzLBMBh3QiNAkNAQMBAQEBAQECARM?=
 =?us-ascii?q?BAQEIDQkIKSMMgjYkAYJhAQEBAQIBAQIgBBkBGx0BAwEBCQEBBQULDQICJgICA?=
 =?us-ascii?q?x8BEQEFARwZBYMcgWkBAwgFCAWbFTyLDXwWBQEXgncFhEAKGScNXYE3AgYSeYs?=
 =?us-ascii?q?QF3iBB4QjiAWCVwKLG4UJkA0JApE1GJEfLJR+gyEwgSWCDXAVOzGCO4IbDBeDS?=
 =?us-ascii?q?opgMjOBBQEBjhsBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AlAAD4/QBch0O0hNFiHgEGBwaBUQkLAYJdgQ4ng3mDe5A?=
 =?us-ascii?q?mUAEBBoE1FIkLA26NOIFzLBMBh3QiNAkNAQMBAQEBAQECARMBAQEIDQkIKSMMg?=
 =?us-ascii?q?jYkAYJhAQEBAQIBAQIgBBkBGx0BAwEBCQEBBQULDQICJgICAx8BEQEFARwZBYM?=
 =?us-ascii?q?cgWkBAwgFCAWbFTyLDXwWBQEXgncFhEAKGScNXYE3AgYSeYsQF3iBB4QjiAWCV?=
 =?us-ascii?q?wKLG4UJkA0JApE1GJEfLJR+gyEwgSWCDXAVOzGCO4IbDBeDSopgMjOBBQEBjhs?=
 =?us-ascii?q?BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,298,1539673200"; 
   d="scan'208";a="53295913"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 30 Nov 2018 01:11:57 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726618AbeK3UUd (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 30 Nov 2018 15:20:33 -0500
Received: from mail-qk1-f193.google.com ([209.85.222.193]:44191 "EHLO
        mail-qk1-f193.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726465AbeK3UUc (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 30 Nov 2018 15:20:32 -0500
Received: by mail-qk1-f193.google.com with SMTP id n12so2733367qkh.11;
        Fri, 30 Nov 2018 01:11:52 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=xPgiQv76Tbaq5oCVyqFwL3566XE+B00LG3k/7dV9AcE=;
        b=oJ54QHBD9Fb+hY5WE/KT5Iq58+uCn5UJTPyrt515UH/P7qtAnJombyk707833+rnPY
         20/M5ZwHHzZGBfAtSVgXy1LSCjTaZkLIfLWcRJusQ+Bh9wGr+UMI6A6MLgTYaICkb17F
         QaGKIxYEPQRSDt8digwBzBVPNWmunOPXJbh0dfqt+RJZsfs/C4YbiAOFPb5DKb3XB2Ze
         qe6JEirblPlnsO17RROCPEJg6hkUbu726lvmObiakEtUqd2azKv85eRATTYRDFbNpFMb
         IS0rzpon0X+mydpT0yVc3I1sgWcIMCi+47NmAHT+T3pmX/vbEa8cV93bRq0p45wk6Nm7
         473Q==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=xPgiQv76Tbaq5oCVyqFwL3566XE+B00LG3k/7dV9AcE=;
        b=LsTNhQ+mTCgvqTG7Al/HoaMP0CD9Hkr5ya0UL2kT1eMaQT3l/o1io+vTsEWSSlpv8I
         4f6mXlHje/HGFFYVCTlJHObb5k2W7MXIVn+owcTx3xdwpaYadXUA+fuWV4smVV0jJkEO
         DwbtzQ08n2xr/Yf590eGfE2I7dcMSI8fsPLoT0dJ/o1n0hU7MdeQL8BkxymdVRBMJHOE
         eZIBEARG5wPbYIQ93EE1ggiZG8twa0GjhxofxfzZLdG8GixRkC9i0q1SmeOAinvkkLYT
         RMTNpalw+POfl8O6GWYqPGGWbKQQRDnjwfef3ObA7LH1sKPjOWgQ22ONxaP599tdLrOp
         HuRw==
X-Gm-Message-State: AA+aEWY8lyBas8TIvoaNmgc+M+JGMPGFqw/Uhg1ebjmuv7qHouzGedvO
        Ar0GtCUV8fl8MthN0IYI7ocGYtEKcgyuXUlUBFw=
X-Google-Smtp-Source: AFSGD/WnhoE6N7sxX9mqDyLE/7V8TTL3chu/zMlu2b7iABiCnX1kGBRLaT9bEvafnDxyCsvqVyo7a60Nt1P22I3/Lmw=
X-Received: by 2002:a37:b2c2:: with SMTP id b185mr4420885qkf.194.1543569112384;
 Fri, 30 Nov 2018 01:11:52 -0800 (PST)
MIME-Version: 1.0
References: <20181129075301.29087-1-nborisov@suse.com> <20181129075301.29087-2-nborisov@suse.com>
In-Reply-To: <20181129075301.29087-2-nborisov@suse.com>
From: "Yan, Zheng" <ukernel@gmail.com>
Date: Fri, 30 Nov 2018 17:11:39 +0800
Message-ID: <CAAM7YA==GN5epC5BZYVmcXuyZp-reVi+_MdhDrgcOjnVwME6zA@mail.gmail.com>
Subject: Re: [PATCH 2/2] fs: Don't open-code lru_to_page
To: nborisov@suse.com
Cc: Linux Kernel Mailing List <linux-kernel@vger.kernel.org>,
        David Howells <dhowells@redhat.com>, Chris Mason <clm@fb.com>,
        josef@toxicpanda.com, David Sterba <dsterba@suse.com>,
        Zheng Yan <zyan@redhat.com>, Sage Weil <sage@redhat.com>,
        Ilya Dryomov <idryomov@gmail.com>, sfrench@samba.org,
        "Theodore Ts'o" <tytso@mit.edu>, adilger.kernel@dilger.ca,
        mark@fasheh.com, jlbec@evilplan.org, hubcap@omnibond.com,
        martin@omnibond.com, Andrew Morton <akpm@linux-foundation.org>,
        rppt@linux.vnet.ibm.com, willy@infradead.org,
        rdunlap@infradead.org, yuehaibing@huawei.com, shakeelb@google.com,
        dan.j.williams@intel.com, mhocko@suse.com,
        linux-afs@lists.infradead.org,
        linux-btrfs <linux-btrfs@vger.kernel.org>,
        ceph-devel <ceph-devel@vger.kernel.org>,
        linux-cifs@vger.kernel.org, samba-technical@lists.samba.org,
        linux-ext4@vger.kernel.org, ocfs2-devel@oss.oracle.com,
        devel@lists.orangefs.org, linux-mm@kvack.org
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Thu, Nov 29, 2018 at 3:56 PM Nikolay Borisov <nborisov@suse.com> wrote:
>
> There are a bunch of filesystems which essentially open-code lru_to_page
> helper. Change them to using the helper. No functional changes.
>
> Signed-off-by: Nikolay Borisov <nborisov@suse.com>
> ---
>
> Since this is a mostly mechanical change I've actually batched all of them in
> a single patch.
>
>  fs/afs/file.c        | 5 +++--
>  fs/btrfs/extent_io.c | 2 +-
>  fs/ceph/addr.c       | 5 ++---
>  fs/cifs/file.c       | 3 ++-
>  fs/ext4/readpage.c   | 2 +-
>  fs/ocfs2/aops.c      | 3 ++-
>  fs/orangefs/inode.c  | 2 +-
>  mm/swap.c            | 2 +-
>  8 files changed, 13 insertions(+), 11 deletions(-)
>
> diff --git a/fs/afs/file.c b/fs/afs/file.c
> index d6bc3f5d784b..323ae9912203 100644
> --- a/fs/afs/file.c
> +++ b/fs/afs/file.c
> @@ -17,6 +17,7 @@
>  #include <linux/writeback.h>
>  #include <linux/gfp.h>
>  #include <linux/task_io_accounting_ops.h>
> +#include <linux/mm.h>
>  #include "internal.h"
>
>  static int afs_file_mmap(struct file *file, struct vm_area_struct *vma);
> @@ -441,7 +442,7 @@ static int afs_readpages_one(struct file *file, struct address_space *mapping,
>         /* Count the number of contiguous pages at the front of the list.  Note
>          * that the list goes prev-wards rather than next-wards.
>          */
> -       first = list_entry(pages->prev, struct page, lru);
> +       first = lru_to_page(pages);
>         index = first->index + 1;
>         n = 1;
>         for (p = first->lru.prev; p != pages; p = p->prev) {
> @@ -473,7 +474,7 @@ static int afs_readpages_one(struct file *file, struct address_space *mapping,
>          * page at the end of the file.
>          */
>         do {
> -               page = list_entry(pages->prev, struct page, lru);
> +               page = lru_to_page(pages);
>                 list_del(&page->lru);
>                 index = page->index;
>                 if (add_to_page_cache_lru(page, mapping, index,
> diff --git a/fs/btrfs/extent_io.c b/fs/btrfs/extent_io.c
> index 19f4b8fd654f..8332c5f4b1c3 100644
> --- a/fs/btrfs/extent_io.c
> +++ b/fs/btrfs/extent_io.c
> @@ -4104,7 +4104,7 @@ int extent_readpages(struct address_space *mapping, struct list_head *pages,
>         u64 prev_em_start = (u64)-1;
>
>         for (page_idx = 0; page_idx < nr_pages; page_idx++) {
> -               page = list_entry(pages->prev, struct page, lru);
> +               page = lru_to_page(pages);
>
>                 prefetchw(&page->flags);
>                 list_del(&page->lru);
> diff --git a/fs/ceph/addr.c b/fs/ceph/addr.c
> index 8eade7a993c1..5d0c05e288cc 100644
> --- a/fs/ceph/addr.c
> +++ b/fs/ceph/addr.c
> @@ -306,7 +306,7 @@ static int start_read(struct inode *inode, struct ceph_rw_context *rw_ctx,
>         struct ceph_osd_client *osdc =
>                 &ceph_inode_to_client(inode)->client->osdc;
>         struct ceph_inode_info *ci = ceph_inode(inode);
> -       struct page *page = list_entry(page_list->prev, struct page, lru);
> +       struct page *page = lru_to_page(page_list);
>         struct ceph_vino vino;
>         struct ceph_osd_request *req;
>         u64 off;
> @@ -333,8 +333,7 @@ static int start_read(struct inode *inode, struct ceph_rw_context *rw_ctx,
>                         if (got)
>                                 ceph_put_cap_refs(ci, got);
>                         while (!list_empty(page_list)) {
> -                               page = list_entry(page_list->prev,
> -                                                 struct page, lru);
> +                               page = lru_to_page(page_list);
>                                 list_del(&page->lru);
>                                 put_page(page);
>                         }

For the ceph patch

Acked-by:: "Yan, Zheng" <zyan@redhat.com

> diff --git a/fs/cifs/file.c b/fs/cifs/file.c
> index 74c33d5fafc8..b16a4d887d17 100644
> --- a/fs/cifs/file.c
> +++ b/fs/cifs/file.c
> @@ -33,6 +33,7 @@
>  #include <linux/mount.h>
>  #include <linux/slab.h>
>  #include <linux/swap.h>
> +#include <linux/mm.h>
>  #include <asm/div64.h>
>  #include "cifsfs.h"
>  #include "cifspdu.h"
> @@ -3975,7 +3976,7 @@ readpages_get_pages(struct address_space *mapping, struct list_head *page_list,
>
>         INIT_LIST_HEAD(tmplist);
>
> -       page = list_entry(page_list->prev, struct page, lru);
> +       page = lru_to_page(page_list);
>
>         /*
>          * Lock the page and put it in the cache. Since no one else
> diff --git a/fs/ext4/readpage.c b/fs/ext4/readpage.c
> index f461d75ac049..6aa282ee455a 100644
> --- a/fs/ext4/readpage.c
> +++ b/fs/ext4/readpage.c
> @@ -128,7 +128,7 @@ int ext4_mpage_readpages(struct address_space *mapping,
>
>                 prefetchw(&page->flags);
>                 if (pages) {
> -                       page = list_entry(pages->prev, struct page, lru);
> +                       page = lru_to_page(pages);
>                         list_del(&page->lru);
>                         if (add_to_page_cache_lru(page, mapping, page->index,
>                                   readahead_gfp_mask(mapping)))
> diff --git a/fs/ocfs2/aops.c b/fs/ocfs2/aops.c
> index eb1ce30412dc..832c1759a09a 100644
> --- a/fs/ocfs2/aops.c
> +++ b/fs/ocfs2/aops.c
> @@ -30,6 +30,7 @@
>  #include <linux/quotaops.h>
>  #include <linux/blkdev.h>
>  #include <linux/uio.h>
> +#include <linux/mm.h>
>
>  #include <cluster/masklog.h>
>
> @@ -397,7 +398,7 @@ static int ocfs2_readpages(struct file *filp, struct address_space *mapping,
>          * Check whether a remote node truncated this file - we just
>          * drop out in that case as it's not worth handling here.
>          */
> -       last = list_entry(pages->prev, struct page, lru);
> +       last = lru_to_page(pages);
>         start = (loff_t)last->index << PAGE_SHIFT;
>         if (start >= i_size_read(inode))
>                 goto out_unlock;
> diff --git a/fs/orangefs/inode.c b/fs/orangefs/inode.c
> index fe53381b26b1..f038235c64bd 100644
> --- a/fs/orangefs/inode.c
> +++ b/fs/orangefs/inode.c
> @@ -77,7 +77,7 @@ static int orangefs_readpages(struct file *file,
>         for (page_idx = 0; page_idx < nr_pages; page_idx++) {
>                 struct page *page;
>
> -               page = list_entry(pages->prev, struct page, lru);
> +               page = lru_to_page(pages);
>                 list_del(&page->lru);
>                 if (!add_to_page_cache(page,
>                                        mapping,
> diff --git a/mm/swap.c b/mm/swap.c
> index aa483719922e..20b9e9d99652 100644
> --- a/mm/swap.c
> +++ b/mm/swap.c
> @@ -126,7 +126,7 @@ void put_pages_list(struct list_head *pages)
>         while (!list_empty(pages)) {
>                 struct page *victim;
>
> -               victim = list_entry(pages->prev, struct page, lru);
> +               victim = lru_to_page(pages);
>                 list_del(&victim->lru);
>                 put_page(victim);
>         }
> --
> 2.17.1
>
