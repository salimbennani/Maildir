Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 12 Dec 2018 08:57:25 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 525C358079D;
	Tue, 11 Dec 2018 14:45:37 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga003-1.jf.intel.com with ESMTP; 11 Dec 2018 14:45:37 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AcVNKKBwjUQq8dOrXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e8SKfad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb5SrI7Vi6i76dsTx/kkT?=
 =?us-ascii?q?4LOiI3/WzWl8B8lb5XrA+8rBB73YLYfISZOfxjda3fYNwaX3JMUMZPWSJcDI2y?=
 =?us-ascii?q?bIwBAOgPPeZDt4nwpUADoQeiCQS2GO/i0CNEimPw0KYn0+ohCwbG3Ak4Et8Qqn?=
 =?us-ascii?q?vUt8v6NacPWu6o0KbIzS/Mb+5Y2Tf59ofIaA0qrPaQUr1qasre10kuGhjejlqM?=
 =?us-ascii?q?qYzqJS6V1uoJs2eF9epsTP6ghHQ9pw5tpTivw94hh4/UjYwW0lDJ7Tt1zJoxKN?=
 =?us-ascii?q?GiVUJ2b8CoHIFNuyyZK4d6WMIvTmNwtCs7yLAKo4O3cSkOxZg9xhPSa+aLf5aW?=
 =?us-ascii?q?7h/sUuuaPC12i2h/eL2lgha/6UigxfP4VsmzyFtKsCVFncfWtnwX1Bzc9NKHSv?=
 =?us-ascii?q?1j8UelwzqP0BrT6u5cLUA1k6rUNYIhz6YumpYPtUnPBDL6lUvogKOMa0kp+fSk?=
 =?us-ascii?q?5/7mb7jkvpOcMpV7igD6MqQggMy/BuE4PxAKX2ia/+S8ybLi8VT6QLpUlP02lL?=
 =?us-ascii?q?fWsJTDKcQcqK+5BRFa0pw45hahADepzs4YkWMELF1bYhKHiZbmO1XULPD/F/e/?=
 =?us-ascii?q?jEygkC13yPDeIr3hHpLNI2DHkLfgfrZy9VRQyQUuzd1E45JUC7cBIO/8W0Prtd?=
 =?us-ascii?q?zYCAM5PBKww+r9FNp90YYeU3qVAqCFKKPSrUOI5uU3LumMfoAVuSr9JOIi5/L0?=
 =?us-ascii?q?jX85hEUSfa+m3ZYMbHC4H/JmI1iWYHb2g9cBF3sKsRQ6TODwlFKCVjtTbW6oX6?=
 =?us-ascii?q?0g/jE7FJ6mDYDbS4Cvh7yOwj23Hp5RZmBADFCMFmzld4GFW/cKdSKTLdVtkj0C?=
 =?us-ascii?q?Vbi9VYAh0QuiuxP9y7piNuDU4DEXtYr/1Nhp4O3ejQs99Sd0D8Sa0GGBVXt0kX?=
 =?us-ascii?q?kKRzIt2KB/oEp9ykqM0KRigvxYE8BT6O1NUgsgKZHcyOl6AcjoWg3dZteJVEqm?=
 =?us-ascii?q?QtK+DDEyVN0xxcUCY0J8G9q4iBDD0DGnA7sUl7yNGZw1/bjQ33n3J8Zh1XnG0L?=
 =?us-ascii?q?MtgEUhQstKLWemnLJw9xDPB47VlEWUj7uler4C3CHT7muDzXCBvEdDUAFuV6XJ?=
 =?us-ascii?q?WnQfZkjTrdT9/U7CS76uCbI6MgpO08KCK61KasH3glVCXvvsJNPeY2epkWeqGR?=
 =?us-ascii?q?mI3q+MbJbte2gFwSrSElYEnB4J8XaGLwc+ADyhrHzYDDF1EVLvYkXs8fRxqX+h?=
 =?us-ascii?q?T080yR2KYFNl17av5hEVgvmcQesJ3r0YoCchtyl0HFGl0tLKCtqAog1hfLlcYd?=
 =?us-ascii?q?I9+ltHyXjVtwtnPpykLqBigFEefh9zv0Pv0RV3F4pBndIrrHMs0Ap9N6aY3Eld?=
 =?us-ascii?q?eDOf2JD6IqfXJXXq/BCzd67W3UnT38yS+qgR5/U3tVXisBuyGUo/7npoyd9V03?=
 =?us-ascii?q?ib5pXUFwcSVZPxUkAq9xl1vb3aYy8955/K2n1oK6W7rjjC29cxDus/1hmgZ8tf?=
 =?us-ascii?q?ML+DFALqE8waGtKiJ/Awl1mobhILJuZS9KEvMsOidvuG3rOrPel6kDKni2RH/J?=
 =?us-ascii?q?5y0kaW+yVgTe7I2o4Pw+uE0QufSzf8kFChv9jtmYBFeT4dBHC/xjXjBIJLYK19?=
 =?us-ascii?q?Y5wLCWa3L8Kr3Np+g4PiVGBC9F6kAVMLw8upeRuUb1zg0gxcz0UXoXq7mSSmyz?=
 =?us-ascii?q?x4iS0mrq2a3CbW2eTtaAIHOnJXRGlllVrtIYm0g8oaXUSydAgpiR2l6F3+x6ha?=
 =?us-ascii?q?oqR/MmbSTV1JfyjwM2FtTK+wuqCebM5I7ZMiqT9XX/ikYVCGVr79pAMX0yH5EG?=
 =?us-ascii?q?tExzA7dDaqto/inxNgi2KdL3dzrHzHdsF23hrf4N3cRfhM3jsJXiV4iD/XBkSi?=
 =?us-ascii?q?MNmt59mbi5DDsuWmXWK7SpJTaTXrzZ+HtCaj5WxlGxq/k+qxmt3mFwg3yiv719?=
 =?us-ascii?q?hsVSXVoxfweIjr16KmMe15eklkHkPz681/GotmiIs/mIkQ2WQGhpWS5XcHkn38?=
 =?us-ascii?q?MdRB1aL+cXoCXzgLw9HO7Qjh2U1jKG+Jxo3jWnWcxMthe8e1YmcM1i0h6MBKDb?=
 =?us-ascii?q?+e7KZYkittvlq4sQXRbOB4njccyvsh8mQWgu8Xtwo20iWSHKoSElJGMiz2mBSF?=
 =?us-ascii?q?9NS+rKRRZGayfrm8zkt+nda9DL6cpgFQQmr2epAnHSVo9MVwLErM0GHv6oHjYN?=
 =?us-ascii?q?TQcdUTthiOnxbBledVLo8xluERhSpmIm/9uXwly+gmjR1hx526vY6HK3lz86K9?=
 =?us-ascii?q?GBJXKjr1Z8YL8DH3kalehtqW35yoHph5AToERpzoTfa1ED4IsfTnKh2DEDk9qn?=
 =?us-ascii?q?edBLreEhWT6EZgr3LTDZ+rM2ubK2UezdVnXBOdPlBQgBgIXDUmmZ40DgKqy9bk?=
 =?us-ascii?q?cEhn/TAd/EL4pgFPyuJ1NBn/T2Hfqx2zajovTJifLRxW7hxN5kvPMMye6P5zED?=
 =?us-ascii?q?9c/pG7sAONLWmbbRxSDW4VQkyEG0zjPr626NjA9OiYG/O+L+bUbrWIs+BeTPCI?=
 =?us-ascii?q?xZSg0oZ9+zaMN8OPPmRtDvEh20pDW2x5FNrdmzkVVyMXkCfNZdaBpBig4i13st?=
 =?us-ascii?q?y/8PPzVQLv+4SPCrhSMdZu+xysgqeDLemQhClnJjZCy5MM3mTFyLwe3F4UliFv?=
 =?us-ascii?q?eCOhEbUGtS7RUq3QnrVbAAIcayN2LMFI9b4z3hFROc7HjdP4zqR3juMuBFdfS1?=
 =?us-ascii?q?PgmtulZcgLI2ymMFPHBUCLNKmJJDHRwsH3Z7+8RqNUjOlOqxKwvjObGVf5Pjuf?=
 =?us-ascii?q?jznpSwyvMeZUgSGHPRxevZuxfQp3BWf/TNLpdBu7PcRzjT03x700m3zLOXQdMT?=
 =?us-ascii?q?h6b0NCsLmQ4TlEjfV4HmxL9mBlIvWcmyaF8+nYLY4bsPtxDSRykuJa4XI6xKNU?=
 =?us-ascii?q?7SFEXvN1niTSo8Vqo1GnlOmP1zVmXABPqjZNmIKEo0FiNb/F+ZlHXHaXtC4KuG?=
 =?us-ascii?q?eVDA4QpsBNDNTqtqEWzcLA0Or3KTFf45fP8MABHcnIOYeCN3Y8NRfBBjHZFk0G?=
 =?us-ascii?q?QCStOGWZgFZS1LmW93uIvt05p4LqlZ4mVLBWTho2G+kcB0AjG8YNZN9sUzcll6?=
 =?us-ascii?q?OLpNAH6GD4rxTLQshe+JfdWaG8G/LqfR2QlrRVLyADwbrlI4AeLMWv0EV5Z0hS?=
 =?us-ascii?q?h4/KElfeWd1X5yZoKAQzpRMeozBFUmQv1he9OUuW63gJGKvuxhM=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AnAACCPRBch0O0hNFlHQEBBQEHBQGBU?=
 =?us-ascii?q?gcBCwGDayeMc4szgiFogWWUcYF2KRMBhy4iNQgNAQMBAQEBAQECARMBAQEIDQk?=
 =?us-ascii?q?IKSMMgjYMgnsDAwECJBkBATcBBQkBAVADQhIHEgWDHIFqAxUFmnKKHYFsM4J2A?=
 =?us-ascii?q?QEFgQCECAOCHggXh2WDI4EcF4F/gRGCXQeCAohmIokzCocBUY9uCYImhCOKfSN?=
 =?us-ascii?q?gfIg4hyyJI4EFi1qEeQOCCU0jFTuCbIIbDBeDSop0HzKBBAEBATuKKQEB?=
X-IPAS-Result: =?us-ascii?q?A0AnAACCPRBch0O0hNFlHQEBBQEHBQGBUgcBCwGDayeMc4s?=
 =?us-ascii?q?zgiFogWWUcYF2KRMBhy4iNQgNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYMgnsDA?=
 =?us-ascii?q?wECJBkBATcBBQkBAVADQhIHEgWDHIFqAxUFmnKKHYFsM4J2AQEFgQCECAOCHgg?=
 =?us-ascii?q?Xh2WDI4EcF4F/gRGCXQeCAohmIokzCocBUY9uCYImhCOKfSNgfIg4hyyJI4EFi?=
 =?us-ascii?q?1qEeQOCCU0jFTuCbIIbDBeDSop0HzKBBAEBATuKKQEB?=
X-IronPort-AV: E=Sophos;i="5.56,343,1539673200"; 
   d="scan'208";a="57074724"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 11 Dec 2018 14:45:35 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726815AbeLKWpQ (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 11 Dec 2018 17:45:16 -0500
Received: from sonic311-28.consmr.mail.ne1.yahoo.com ([66.163.188.209]:46877
        "EHLO sonic311-28.consmr.mail.ne1.yahoo.com" rhost-flags-OK-OK-OK-OK)
        by vger.kernel.org with ESMTP id S1726656AbeLKWoD (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 11 Dec 2018 17:44:03 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=yahoo.com; s=s2048; t=1544568241; bh=LLC+kO5vVrGkpb8+XiusWEcN5YP2bfPWb69cQmSh7Xk=; h=From:To:Cc:Subject:Date:In-Reply-To:References:From:Subject; b=meeH0ZEar7aeARk5FqNL7Bv39W19/+SxPw3xxNhbUkSSknyR7gpZL0i98K1MLXuk2SrB2Bht+bVdXCAhU4sRychuQf6KhimhKxGJ9vX9xejE27RomzBwaTmR8uCgJ4tE5o9OS46OLxOzH98yCgBPZ6J3ujsUFiTADOJkLa1Hrwj0TLWck6ilBLF8ZVshtH2TmqiJEBszkWz+qHLxbOHhG6gqhnxF8gFpKdtSZ5L0iZIL62Ma6ycCT/4iA4WbP2WiaRyan9XEzAm7GYKb9hwO7xiONwWnlm4a23OaZeHye+ltZVo/pl55chip64K7aJV1j4iSfFmJ5gggNLOeGMungQ==
X-YMail-OSG: ojkgujIVM1kmf0AOkoMbigeSSVg_WLO2MZy5gcP6TOxgALnncmK5Y80URoZROBm
 TtJk5_z6_qtLJqrX7C1FG7H7lw5n86jSV7IaXf_5n4mi5NmraCrbWYPjlUwL2CkIPzmY.bCfIwGz
 0Y2.js0fKW7xZS2c_n_UkpXrCBx62Abgad6I8dn4QCucIPvy7K8goqYKG_8pzGruUCVcNWpwZHCa
 wkSM7ZeIU3CuLEb.xh8u25b3Y4hBHG_QNOYmWJsUj_x84iioywqd04WAcvEg8vqPWXECo6p5YXeW
 1mhxJghXHXYw9YHYCscua31jDV7qg7IObLMGWgNns_SeWUAORIAx8Bv7tIDA_wTqquM_lh8eEbIq
 JY7w3bL_NYti9uGLQm0fVhj8d1CzwJRFDgXWy4Wof9iIsJSVNHrKF7v2cn35CwhOsCpWHPIlfO5T
 VuTrQ9Tl8.dnIgRSJE0W9pfHpwjfbjKWbZ9OJPTRDw3kTanwStJ78fku2Ir0OLklQnFt2ttRC1bL
 oKZCFpnn.JQ8iNXpeetQwfV3oGt6yTLkdBwmtdzaREAw5OF38PYDMeMltamKL6EN0TP4YKQS.MgS
 d9F3IhcF1Ljl.cN6oICmid.fxKfFW_IC8RbR_4x77gOhJdCyd0b8yW2hL6aZ9JgdhTOXxKKPXVoR
 vJ4DQJP8.pd3qdhwyD8x5WFFeq4SPModu_1kp2MC_2sdKjn1u58FUx.lyz6nrkfyxdigZefmNOTC
 N6i12tUF8Dsi41h9_hBcJrMq3Lz0Avi_LBVncssSlfkExedkMQvZuSKTZOS1xA6x4kSpr2HItiPh
 7m.ZdwwB2NfYdwZ9POJr9d7ToeOcbIWR9vjn.vy0yAq.8v3Re8.nr4KlRr9xxlEQbJTBcW_3HwsF
 4FZ.ok5kTbhp3eqFLpTN87IjEYrh1khzzv3UO_9vrN.bQ2_nSoM0AV7pEERCchb0KQwqzEMPQ1TP
 1UbQojJFttLUj63DBSKdoOWW99wJwWX.4HARhlbm3mH6oPsyMyP8tNWAWQhU9PCoVCkNAS6YMf_6
 nZUD5rZEC32nEGk0Jd6xpO_60z3QrcjXFqrwHY1xPAkpeEeKWf1ds1ZYsmDWeUn5G8f7yHq1p.R6
 ccybx5k1pGuak.jPqjywuWShXjMYQsHFQ280NPw--
Received: from sonic.gate.mail.ne1.yahoo.com by sonic311.consmr.mail.ne1.yahoo.com with HTTP; Tue, 11 Dec 2018 22:44:01 +0000
Received: from c-67-169-65-224.hsd1.ca.comcast.net (EHLO localhost.localdomain) ([67.169.65.224])
          by smtp411.mail.ne1.yahoo.com (Oath Hermes SMTP Server) with ESMTPA ID 6f4a30c5671782919fad3da3c826f035;
          Tue, 11 Dec 2018 22:43:59 +0000 (UTC)
From: Casey Schaufler <casey@schaufler-ca.com>
To: jmorris@namei.org, linux-security-module@vger.kernel.org,
        linux-kernel@vger.kernel.org, selinux@vger.kernel.org
Cc: john.johansen@canonical.com, keescook@chromium.org,
        penguin-kernel@i-love.sakura.ne.jp, paul@paul-moore.com,
        linux-fsdevel@vger.kernel.org, sds@tycho.nsa.gov,
        adobriyan@gmail.com, mic@digikod.net, s.mesoraca16@gmail.com,
        casey@schaufler-ca.com
Subject: [PATCH v5 30/38] LSM: Infrastructure management of the file security
Date: Tue, 11 Dec 2018 14:43:06 -0800
Message-Id: <20181211224314.22412-31-casey@schaufler-ca.com>
X-Mailer: git-send-email 2.17.0
In-Reply-To: <20181211224314.22412-1-casey@schaufler-ca.com>
References: <20181211224314.22412-1-casey@schaufler-ca.com>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Move management of the file->f_security blob out of the
individual security modules and into the infrastructure.
The modules no longer allocate or free the data, instead
they tell the infrastructure how much space they require.

Signed-off-by: Casey Schaufler <casey@schaufler-ca.com>
Reviewed-by: Kees Cook <keescook@chromium.org>
[kees: adjusted for ordered init series]
Signed-off-by: Kees Cook <keescook@chromium.org>
---
 include/linux/lsm_hooks.h         |  1 +
 security/apparmor/include/file.h  |  5 +++-
 security/apparmor/lsm.c           | 19 +++++++-------
 security/security.c               | 54 ++++++++++++++++++++++++++++++++++++---
 security/selinux/hooks.c          | 25 ++----------------
 security/selinux/include/objsec.h |  2 +-
 security/smack/smack.h            |  3 ++-
 security/smack/smack_lsm.c        | 14 +---------
 8 files changed, 72 insertions(+), 51 deletions(-)

diff --git a/include/linux/lsm_hooks.h b/include/linux/lsm_hooks.h
index c9458280214e..64499c2d44cd 100644
--- a/include/linux/lsm_hooks.h
+++ b/include/linux/lsm_hooks.h
@@ -2029,6 +2029,7 @@ struct security_hook_list {
  */
 struct lsm_blob_sizes {
 	int	lbs_cred;
+	int	lbs_file;
 };
 
 /*
diff --git a/security/apparmor/include/file.h b/security/apparmor/include/file.h
index 4c2c8ac8842f..8be09208cf7c 100644
--- a/security/apparmor/include/file.h
+++ b/security/apparmor/include/file.h
@@ -32,7 +32,10 @@ struct path;
 				 AA_MAY_CHMOD | AA_MAY_CHOWN | AA_MAY_LOCK | \
 				 AA_EXEC_MMAP | AA_MAY_LINK)
 
-#define file_ctx(X) ((struct aa_file_ctx *)(X)->f_security)
+static inline struct aa_file_ctx *file_ctx(struct file *file)
+{
+	return file->f_security + apparmor_blob_sizes.lbs_file;
+}
 
 /* struct aa_file_ctx - the AppArmor context the file was opened in
  * @lock: lock to update the ctx
diff --git a/security/apparmor/lsm.c b/security/apparmor/lsm.c
index 70669e676212..3ae8c902d740 100644
--- a/security/apparmor/lsm.c
+++ b/security/apparmor/lsm.c
@@ -433,21 +433,21 @@ static int apparmor_file_open(struct file *file)
 
 static int apparmor_file_alloc_security(struct file *file)
 {
-	int error = 0;
-
-	/* freed by apparmor_file_free_security */
+	struct aa_file_ctx *ctx = file_ctx(file);
 	struct aa_label *label = begin_current_label_crit_section();
-	file->f_security = aa_alloc_file_ctx(label, GFP_KERNEL);
-	if (!file_ctx(file))
-		error = -ENOMEM;
-	end_current_label_crit_section(label);
 
-	return error;
+	spin_lock_init(&ctx->lock);
+	rcu_assign_pointer(ctx->label, aa_get_label(label));
+	end_current_label_crit_section(label);
+	return 0;
 }
 
 static void apparmor_file_free_security(struct file *file)
 {
-	aa_free_file_ctx(file_ctx(file));
+	struct aa_file_ctx *ctx = file_ctx(file);
+
+	if (ctx)
+		aa_put_label(rcu_access_pointer(ctx->label));
 }
 
 static int common_file_perm(const char *op, struct file *file, u32 mask)
@@ -1155,6 +1155,7 @@ static int apparmor_inet_conn_request(struct sock *sk, struct sk_buff *skb,
  */
 struct lsm_blob_sizes apparmor_blob_sizes __lsm_ro_after_init = {
 	.lbs_cred = sizeof(struct aa_task_ctx *),
+	.lbs_file = sizeof(struct aa_file_ctx),
 };
 
 static struct security_hook_list apparmor_hooks[] __lsm_ro_after_init = {
diff --git a/security/security.c b/security/security.c
index c49d4a18c75f..499842ece0fb 100644
--- a/security/security.c
+++ b/security/security.c
@@ -40,6 +40,8 @@
 struct security_hook_heads security_hook_heads __lsm_ro_after_init;
 static ATOMIC_NOTIFIER_HEAD(lsm_notifier_chain);
 
+static struct kmem_cache *lsm_file_cache;
+
 char *lsm_names;
 static struct lsm_blob_sizes blob_sizes __lsm_ro_after_init;
 
@@ -158,6 +160,7 @@ static void __init lsm_set_blob_sizes(struct lsm_blob_sizes *needed)
 		return;
 
 	lsm_set_blob_size(&needed->lbs_cred, &blob_sizes.lbs_cred);
+	lsm_set_blob_size(&needed->lbs_file, &blob_sizes.lbs_file);
 }
 
 /* Prepare LSM for initialization. */
@@ -279,6 +282,15 @@ static void __init ordered_lsm_init(void)
 		prepare_lsm(*lsm);
 
 	init_debug("cred blob size     = %d\n", blob_sizes.lbs_cred);
+	init_debug("file blob size     = %d\n", blob_sizes.lbs_file);
+
+	/*
+	 * Create any kmem_caches needed for blobs
+	 */
+	if (blob_sizes.lbs_file)
+		lsm_file_cache = kmem_cache_create("lsm_file_cache",
+						   blob_sizes.lbs_file, 0,
+						   SLAB_PANIC, NULL);
 
 	for (lsm = ordered_lsms; *lsm; lsm++)
 		initialize_lsm(*lsm);
@@ -448,6 +460,27 @@ void __init lsm_early_cred(struct cred *cred)
 		panic("%s: Early cred alloc failed.\n", __func__);
 }
 
+/**
+ * lsm_file_alloc - allocate a composite file blob
+ * @file: the file that needs a blob
+ *
+ * Allocate the file blob for all the modules
+ *
+ * Returns 0, or -ENOMEM if memory can't be allocated.
+ */
+static int lsm_file_alloc(struct file *file)
+{
+	if (!lsm_file_cache) {
+		file->f_security = NULL;
+		return 0;
+	}
+
+	file->f_security = kmem_cache_zalloc(lsm_file_cache, GFP_KERNEL);
+	if (file->f_security == NULL)
+		return -ENOMEM;
+	return 0;
+}
+
 /*
  * Hook list operation macros.
  *
@@ -1131,12 +1164,27 @@ int security_file_permission(struct file *file, int mask)
 
 int security_file_alloc(struct file *file)
 {
-	return call_int_hook(file_alloc_security, 0, file);
+	int rc = lsm_file_alloc(file);
+
+	if (rc)
+		return rc;
+	rc = call_int_hook(file_alloc_security, 0, file);
+	if (unlikely(rc))
+		security_file_free(file);
+	return rc;
 }
 
 void security_file_free(struct file *file)
 {
+	void *blob;
+
 	call_void_hook(file_free_security, file);
+
+	blob = file->f_security;
+	if (blob) {
+		file->f_security = NULL;
+		kmem_cache_free(lsm_file_cache, blob);
+	}
 }
 
 int security_file_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
@@ -1254,7 +1302,7 @@ int security_cred_alloc_blank(struct cred *cred, gfp_t gfp)
 		return rc;
 
 	rc = call_int_hook(cred_alloc_blank, 0, cred, gfp);
-	if (rc)
+	if (unlikely(rc))
 		security_cred_free(cred);
 	return rc;
 }
@@ -1275,7 +1323,7 @@ int security_prepare_creds(struct cred *new, const struct cred *old, gfp_t gfp)
 		return rc;
 
 	rc = call_int_hook(cred_prepare, 0, new, old, gfp);
-	if (rc)
+	if (unlikely(rc))
 		security_cred_free(new);
 	return rc;
 }
diff --git a/security/selinux/hooks.c b/security/selinux/hooks.c
index ce1d37378eb5..9669a059ce0f 100644
--- a/security/selinux/hooks.c
+++ b/security/selinux/hooks.c
@@ -145,7 +145,6 @@ static int __init checkreqprot_setup(char *str)
 __setup("checkreqprot=", checkreqprot_setup);
 
 static struct kmem_cache *sel_inode_cache;
-static struct kmem_cache *file_security_cache;
 
 /**
  * selinux_secmark_enabled - Check to see if SECMARK is currently enabled
@@ -377,27 +376,15 @@ static void inode_free_security(struct inode *inode)
 
 static int file_alloc_security(struct file *file)
 {
-	struct file_security_struct *fsec;
+	struct file_security_struct *fsec = selinux_file(file);
 	u32 sid = current_sid();
 
-	fsec = kmem_cache_zalloc(file_security_cache, GFP_KERNEL);
-	if (!fsec)
-		return -ENOMEM;
-
 	fsec->sid = sid;
 	fsec->fown_sid = sid;
-	file->f_security = fsec;
 
 	return 0;
 }
 
-static void file_free_security(struct file *file)
-{
-	struct file_security_struct *fsec = selinux_file(file);
-	file->f_security = NULL;
-	kmem_cache_free(file_security_cache, fsec);
-}
-
 static int superblock_alloc_security(struct super_block *sb)
 {
 	struct superblock_security_struct *sbsec;
@@ -3559,11 +3546,6 @@ static int selinux_file_alloc_security(struct file *file)
 	return file_alloc_security(file);
 }
 
-static void selinux_file_free_security(struct file *file)
-{
-	file_free_security(file);
-}
-
 /*
  * Check whether a task has the ioctl permission and cmd
  * operation to an inode.
@@ -6857,6 +6839,7 @@ static void selinux_bpf_prog_free(struct bpf_prog_aux *aux)
 
 struct lsm_blob_sizes selinux_blob_sizes __lsm_ro_after_init = {
 	.lbs_cred = sizeof(struct task_security_struct),
+	.lbs_file = sizeof(struct file_security_struct),
 };
 
 static struct security_hook_list selinux_hooks[] __lsm_ro_after_init = {
@@ -6927,7 +6910,6 @@ static struct security_hook_list selinux_hooks[] __lsm_ro_after_init = {
 
 	LSM_HOOK_INIT(file_permission, selinux_file_permission),
 	LSM_HOOK_INIT(file_alloc_security, selinux_file_alloc_security),
-	LSM_HOOK_INIT(file_free_security, selinux_file_free_security),
 	LSM_HOOK_INIT(file_ioctl, selinux_file_ioctl),
 	LSM_HOOK_INIT(mmap_file, selinux_mmap_file),
 	LSM_HOOK_INIT(mmap_addr, selinux_mmap_addr),
@@ -7112,9 +7094,6 @@ static __init int selinux_init(void)
 	sel_inode_cache = kmem_cache_create("selinux_inode_security",
 					    sizeof(struct inode_security_struct),
 					    0, SLAB_PANIC, NULL);
-	file_security_cache = kmem_cache_create("selinux_file_security",
-					    sizeof(struct file_security_struct),
-					    0, SLAB_PANIC, NULL);
 	avc_init();
 
 	avtab_cache_init();
diff --git a/security/selinux/include/objsec.h b/security/selinux/include/objsec.h
index e0ac2992e059..96374dbf4ace 100644
--- a/security/selinux/include/objsec.h
+++ b/security/selinux/include/objsec.h
@@ -167,7 +167,7 @@ static inline struct task_security_struct *selinux_cred(const struct cred *cred)
 
 static inline struct file_security_struct *selinux_file(const struct file *file)
 {
-	return file->f_security;
+	return file->f_security + selinux_blob_sizes.lbs_file;
 }
 
 #endif /* _SELINUX_OBJSEC_H_ */
diff --git a/security/smack/smack.h b/security/smack/smack.h
index 50854969a391..2007d38d0e46 100644
--- a/security/smack/smack.h
+++ b/security/smack/smack.h
@@ -364,7 +364,8 @@ static inline struct task_smack *smack_cred(const struct cred *cred)
 
 static inline struct smack_known **smack_file(const struct file *file)
 {
-	return (struct smack_known **)&file->f_security;
+	return (struct smack_known **)(file->f_security +
+				       smack_blob_sizes.lbs_file);
 }
 
 /*
diff --git a/security/smack/smack_lsm.c b/security/smack/smack_lsm.c
index 3e11be8cce7e..c560cb8e155c 100644
--- a/security/smack/smack_lsm.c
+++ b/security/smack/smack_lsm.c
@@ -1579,18 +1579,6 @@ static int smack_file_alloc_security(struct file *file)
 	return 0;
 }
 
-/**
- * smack_file_free_security - clear a file security blob
- * @file: the object
- *
- * The security blob for a file is a pointer to the master
- * label list, so no memory is freed.
- */
-static void smack_file_free_security(struct file *file)
-{
-	file->f_security = NULL;
-}
-
 /**
  * smack_file_ioctl - Smack check on ioctls
  * @file: the object
@@ -4637,6 +4625,7 @@ static int smack_dentry_create_files_as(struct dentry *dentry, int mode,
 
 struct lsm_blob_sizes smack_blob_sizes __lsm_ro_after_init = {
 	.lbs_cred = sizeof(struct task_smack),
+	.lbs_file = sizeof(struct smack_known *),
 };
 
 static struct security_hook_list smack_hooks[] __lsm_ro_after_init = {
@@ -4674,7 +4663,6 @@ static struct security_hook_list smack_hooks[] __lsm_ro_after_init = {
 	LSM_HOOK_INIT(inode_getsecid, smack_inode_getsecid),
 
 	LSM_HOOK_INIT(file_alloc_security, smack_file_alloc_security),
-	LSM_HOOK_INIT(file_free_security, smack_file_free_security),
 	LSM_HOOK_INIT(file_ioctl, smack_file_ioctl),
 	LSM_HOOK_INIT(file_lock, smack_file_lock),
 	LSM_HOOK_INIT(file_fcntl, smack_file_fcntl),
-- 
2.14.5

