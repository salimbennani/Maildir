Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 23 Nov 2018 08:32:32 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 5238158037D;
	Thu, 22 Nov 2018 13:52:45 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by fmsmga002-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 22 Nov 2018 13:52:44 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AlRX4pRCFT3t/GGWHmDP2UyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP/4r8+wAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VDK/5KlpVRDokj?=
 =?us-ascii?q?8KOTA5/m/UkMx/jqxbrgy8qRJ4zIHab52aO+dlfqPFf94XXnZBU8VLWiBdGI6w?=
 =?us-ascii?q?c4kCAuwcNuhYtYn9oF4OoAOiBQmtHOPj0yRHhnjq3aYn3eQhFhvG1xE9Et0Uq3?=
 =?us-ascii?q?vUscj+OqAVUeC60qbI1yjIYvRK2Tf88IjHaRchoe2XULNxccvR1U4vFxnfglqM?=
 =?us-ascii?q?rozlOiqY2+IQuGaV6OpgUPigi28hqwxpoTig2N0sio/XiYIR0FzE8j95wIktKd?=
 =?us-ascii?q?KiTU50fMSoH4dXtyGfMYZ9X8AsQ3lwtSok1rELvYS3cDUExZg53RLTdv+Kf5SS?=
 =?us-ascii?q?7h/iVuudOSp0iXZmdb6lmhq//0qtxvfiWsWozlpGtDdJn9fNu30Lyhfd8NKISu?=
 =?us-ascii?q?Fn8UekwTuP1x7c6uVDIU0si6rbJIAuwqQqmpoQr0vDBCn2l1vyjKOMcUUk4Oeo?=
 =?us-ascii?q?5/zmYrXguJCcK5d5hh/iPqkqgMCzHOo1PhYUU2SG+umwyKfv8Ez7TblSi/05iK?=
 =?us-ascii?q?jZsJTUJcQBoa65BhdY0oIi6xa5Ejen380UnXoZI1JffhKIkYzpN0jJIPH2C/ew?=
 =?us-ascii?q?nU6snSx1x/DJILLhGI/BLnvdn7f7e7Zy9UpcxBA0zdBF6JJYEqsBL+7rWk/tqN?=
 =?us-ascii?q?zYCQc0Mwi1w+bkFtpxzIwfWX+UD6+dMaPSt0KI5+01L+mNYo8VpCjyK/w/6/Hy?=
 =?us-ascii?q?in85nEcXfbO10psPdHC4AvNmLl2ZYXX2g9cBDX0Fvg0kQOzqlV2NSzhTZ3mpUq?=
 =?us-ascii?q?I45zE7Dp+mDIjZSoCshryBwDm0HplMam9aDVCMFG/id5+YVPcUdCKSPshhnyQG?=
 =?us-ascii?q?VbimVYAtzxKutAj8y7phKerZ4SkYtZPl1Nho6OzfjxAy9TpoD8uD12GBVX17nm?=
 =?us-ascii?q?QNRzUuxqBwvVR9ykuf0ah/m/FXD8dT5/NOUgc5L5Lc1fZ1C9LpVwLFf9eJTkum?=
 =?us-ascii?q?Q9q8DTEwSNIx38EBY0JnF9q+iRDD2jKgA6UJmLyTGJw07qXc0mDyJ8lnzXbKzq?=
 =?us-ascii?q?0hj1g8TctJOm2rnap/9wnVB47UnESVjaeqdaIA3CHT8GeP13aBvEZdUARoS6XK?=
 =?us-ascii?q?QWgfZlfKrdT+/k7NUqWhCao5PQdbyc6NMK1Kasb3glVAQ/vjPNfeY2e1m2qrAR?=
 =?us-ascii?q?aIx7WMbJflemkH3SXdDlQEnB4X/XqcKQc+ASKhqXrEDDNyDVLvf1/s8e5mpXym?=
 =?us-ascii?q?VEA00R+FY1dh17Wv/B4VnuKTS/UI07IAuSchrSh0HVmn09LXDdqAuxRufKFGbd?=
 =?us-ascii?q?wh51dH0HrTtxZhMZy4M6Bimlkefhxrv0Pv0hV3DZlAkcgqrX8w0Ap+M6WY0ElF?=
 =?us-ascii?q?dzOZ25DwNabaKm3z/BCpdq7X1UvS0NeQ+qcT9vs4r0/vsx2uFkon639nycVa02?=
 =?us-ascii?q?OA5pXWCwofSYj+UkIp+Bl1ub7bYjMx6JjJ1XJxK6a0tDzC29U3BOY+zhagftFf?=
 =?us-ascii?q?ML6LFQPoEs0aAdSuJ/Ium1Szch0EO+VS/rYuP8y6b/uGxLKrPOF4kTOmkGRL+p?=
 =?us-ascii?q?xy3liN9ip8UOHI2ZkFzuqc3guGUTf8kVigvtr2mYBCeTEdAG6/xTL4C45WY614?=
 =?us-ascii?q?ZZwLBnu2I82r2tV+gIbgW2RZ9FG/HVwGwtKmeR2IY1z7wwJQz0UXrWW7liSiyz?=
 =?us-ascii?q?x7ji8mrrCY3CzI2OnicBsHOmhWRGhtl1vsII60j8wEU0isdQQmiByl5UPizahB?=
 =?us-ascii?q?uKt/N3XTQVtPfyXuL2BiU7G8t7qYb85U9ZMotz5aUOC9YVCcV778rAEW0yLlH2?=
 =?us-ascii?q?tC2j87cyumtYn+nxx/kGidNmp8rGLFecFswhfS/N7cSuRL3joFRyl4jiPbBkOm?=
 =?us-ascii?q?MNmq/tWUlpHDvf64V2+6Up1TcC/rzZ6PtSeh5G1qBwG/kO63mtH9DQc61ir73c?=
 =?us-ascii?q?FwVSrUtBb8fpXr16OiPONnZEZoA0Xw68h7GoF4iYYwgJAQ2X4HhpSa53YHkGHz?=
 =?us-ascii?q?MclF1qL6dnYCWTkLw9vN6gj/xEJjNm6Jx57+VniFwctufdi6bnkW2iIg9c9KDq?=
 =?us-ascii?q?iU4adAnSt0pFq4sA3QbeJ8njcb1fsh9noaj/sVtwoqyyWXGqoSElVAPSzwixSI?=
 =?us-ascii?q?6MizrKBWZGasa7e8zkR/ks66DLGevA5cQm32dYk4HS9/9ch/NFPM0Hvu6oDrYt?=
 =?us-ascii?q?XQbNQTtgGKnBfEleRaNJUxlv8Sjyp9JW39pWEly/I8jRF2wZG6u42HJ39s/a2j?=
 =?us-ascii?q?BB5YKyb1Z9gS+jz2iaZen8CW352gH5l7GzULWofoQuysED4IqfvnMAOOGiUmqn?=
 =?us-ascii?q?iHAbrfAROf6EB+on3UCZ+rMHWXJGQDwdVmWRmQP0hfgAESXDUnkZ81DAGqxMr9?=
 =?us-ascii?q?cEhn4jAd/EL3qhxJyuhwLRnwTn/fpBu0ajczUJWfLgBZ7gRc6EfOK8Ce8vh/Hy?=
 =?us-ascii?q?JF/p2isQyNLHaUZx9TAGENW0yEAU3jP7a06dnB9eiYGvSxL//UbbqSruxeUu+C?=
 =?us-ascii?q?xYiz3Yt+4zaMKsKPM2FiDv08x0pDRG15FN7fmzkVUCwXkCTNb8GAqRe4+y13qN?=
 =?us-ascii?q?2/8fvxVALu44uPF6VdMdF19x+qhqeDMvaahDxlJjZAypMM2XjIxaAf3FEMiiFu?=
 =?us-ascii?q?dDqtEbUauS7OVqLQnaBXAAABayNuL8tF9KY83ghLOc7GhdL5zL94jvgpC1hbUV?=
 =?us-ascii?q?ztgN2mZcsPI2ulLlPIGF6LNKiaJT3M28z4e768RqZKjOpKtxy8ozKbE074MzSH?=
 =?us-ascii?q?ljnpUQ2vMO5WgCGaOhxepJ+ychJ3BWf/S9LmbwWxMMVrgj0u3b00mnTKOHYAMT?=
 =?us-ascii?q?h9dkNBtKGf4TlEjfV/BWNB6GFoLe2Fmyaf8unZJYwasfptAiRoie1a5G42xKdS?=
 =?us-ascii?q?7CFBXPZ1gjfdrsZyo1G6lemC0jpmXwBIqjZOhYKLu11tOKTZ9pZaX3bE8wkA7W?=
 =?us-ascii?q?GRCxQMuttkBcfju6FWytjTiq3zLC1O/M7T/csZVIDoL5eDMXw8IV/1GSaRBwwA?=
 =?us-ascii?q?SD+3LknBiEFH1vKf7HuYqt49sJe/opcWTq5nUwk5CfYFUGxkGtIYKZt6Vz9ilq?=
 =?us-ascii?q?SUyIYQ7324vhjXRe1As5zHX+7UCvLqbH6cjL9LYDMLzKn+IIBVMZf0nwRocFh4?=
 =?us-ascii?q?kZ/KXVHRW99NiiRkYkk/p0AJuHZzSGIzxkujex6F4XkPGPrylRkzzkN0aO4wsj?=
 =?us-ascii?q?Lr7FotDlPPqG07l0x10dHkhy2BNTL2J4+uUoxMTSn5rU48NtX8WQkxJRe/nEpp?=
 =?us-ascii?q?KCvJAblRhqd6eEhqjhPRvd1EHvsYBbFDZg5WweycZN0p10hRrmOswkoDrfPCDJ?=
 =?us-ascii?q?F4mQcjd5ihh3RNywglZ9kwYeTQPKNh3ElMgbjItSitkqg6wAYYKAAW/WSRPiQB?=
 =?us-ascii?q?tWQJMKUrI2yj+ekooTCCnD5KYy4oWvwmq/lp52s0PujGxCXll/ZBMEe8O+GbB7?=
 =?us-ascii?q?iEoGWGmcPMCk8/0lMgk0hD4KRs1sEiYwyYWgRn3LqYEB8JOMyEMgFYaeJT8mTe?=
 =?us-ascii?q?eWCFtuCJiYp4I4inBMjpS+GUvaoZi07iGxwmW8wm584cWLyr30zCBc7iIPgOzh?=
 =?us-ascii?q?BprAfqPlSBCLJSeA+XnTIAvem7zZlqzc9cIC0QBSN2NiDzrrrWowYCieCCR8s/?=
 =?us-ascii?q?JHwdW89MM3MwV8qSgSNVv31cSjKw16ZR0QmL6S7hq2LCDhH1a9tpbf2dIBJqA5?=
 =?us-ascii?q?e9/jB7u6utlVPI+4/CD2X7M8lytNjS7+8Tu5eADbVTV7Y5+1nfhpteSmCxe3TC?=
 =?us-ascii?q?Hd68O977bIxoJd7sDXe/WFuyoyg4Q8f4IJCmKa3MyQ7ySIlXsKGf3TY+JcG6Cz?=
 =?us-ascii?q?cSEgtxoOdF47hzIUUIZIAxbALAsxs4caqyPEPQyNSnRU6kLSZTCfxe0aO3a6ET?=
 =?us-ascii?q?hyglaOm64HQnSZ4+wq+89ktJDJgQiB32zOyla4MYXSW3UnBUZQjKjSYwiWVkMu?=
 =?us-ascii?q?E83qE5zQ+M+UIcPiqRZappdXZbvs0uLVqXLTN9DW98D1udi5fTpw2hxbYf+wND?=
 =?us-ascii?q?kNtOl+5Iqn7zutnYej3oEKmgqZjVuiBjdtEjuLB3PqTgL9GAuZeYmSbQCNHZsR?=
 =?us-ascii?q?WAeCq7EedK39ZXPSRUSeVJnmdjPtYJ/cJF9FY2fsQzPbpCDO8rvL/uITB8JTUP?=
 =?us-ascii?q?1iJfW47ElCQfneq687vLmRCWNp8kdFQeuZtLj981UCNsZC4a4qi5WMGejHKeQ3?=
 =?us-ascii?q?YGLUEI8BhM5QEdkpd5eOH5yIPNQNlHzDsFjehzV37XF4Et/VznAm+RmxDSQf+8?=
 =?us-ascii?q?28mu0g9IhKbw08ERXwJXG1lBwPwQnUwtfuIkY5IMt5LH52fbPXjxu3jgnbOr?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0DWAQC9JPdbh0O0hNFiH4F4gmqBAieDe?=
 =?us-ascii?q?Yh3inEvAYIhkzWDcSCBBANPDwEBGAsIAYhSIjQJDQEDAQEBAQEBAgETAQEBCA0?=
 =?us-ascii?q?JCCkjDII2IoJlAwECAQIgBAUGAUYGCQEBJAImAgIDVBkFA4MZAUGBQAUKqDF8M?=
 =?us-ascii?q?x6EDwEDA0oDMIRmBRN4in4XgUA/hlllA4RkglcCh1WBf4Y8hSaKBkYJhnyKS4F?=
 =?us-ascii?q?ZiC6BNg2FPo1DikYCBAIEBQIUgUZsgSFNIxWBbwELAgsBAQkCgRITghQXg0qFF?=
 =?us-ascii?q?IVfHgEyAQEBBwlyAQGMVQEB?=
X-IPAS-Result: =?us-ascii?q?A0DWAQC9JPdbh0O0hNFiH4F4gmqBAieDeYh3inEvAYIhkzW?=
 =?us-ascii?q?DcSCBBANPDwEBGAsIAYhSIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2IoJlA?=
 =?us-ascii?q?wECAQIgBAUGAUYGCQEBJAImAgIDVBkFA4MZAUGBQAUKqDF8Mx6EDwEDA0oDMIR?=
 =?us-ascii?q?mBRN4in4XgUA/hlllA4RkglcCh1WBf4Y8hSaKBkYJhnyKS4FZiC6BNg2FPo1Di?=
 =?us-ascii?q?kYCBAIEBQIUgUZsgSFNIxWBbwELAgsBAQkCgRITghQXg0qFFIVfHgEyAQEBBwl?=
 =?us-ascii?q?yAQGMVQEB?=
X-IronPort-AV: E=Sophos;i="5.56,267,1539673200"; 
   d="scan'208";a="53996029"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 22 Nov 2018 13:52:43 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2438929AbeKWId5 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 23 Nov 2018 03:33:57 -0500
Received: from terminus.zytor.com ([198.137.202.136]:54859 "EHLO
        terminus.zytor.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1730054AbeKWId5 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 23 Nov 2018 03:33:57 -0500
Received: from terminus.zytor.com (localhost [127.0.0.1])
        by terminus.zytor.com (8.15.2/8.15.2) with ESMTPS id wAMLpefr3948138
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=NO);
        Thu, 22 Nov 2018 13:51:40 -0800
Received: (from tipbot@localhost)
        by terminus.zytor.com (8.15.2/8.15.2/Submit) id wAMLpejk3948134;
        Thu, 22 Nov 2018 13:51:40 -0800
Date: Thu, 22 Nov 2018 13:51:40 -0800
X-Authentication-Warning: terminus.zytor.com: tipbot set sender to tipbot@zytor.com using -f
From: tip-bot for Babu Moger <tipbot@zytor.com>
Message-ID: <tip-4d05bf71f157d756932e77cdee16dc99e235d636@git.kernel.org>
Cc: mchehab+samsung@kernel.org, luto@kernel.org,
        akpm@linux-foundation.org, puwen@hygon.cn, bp@suse.de,
        suravee.suthikulpanit@amd.com, rafael@kernel.org,
        sherry.hurwitz@amd.com, linux-kernel@vger.kernel.org,
        rian@alum.mit.edu, jannh@google.com, arnd@arndb.de,
        davem@davemloft.net, corbet@lwn.net, kstewart@linuxfoundation.org,
        vkuznets@redhat.com, jpoimboe@redhat.com,
        gregkh@linuxfoundation.org, kirill.shutemov@linux.intel.com,
        dima@arista.com, mingo@redhat.com, qianyue.zj@alibaba-inc.com,
        peterz@infradead.org, Babu.Moger@amd.com, xiaochen.shen@intel.com,
        Thomas.Lendacky@amd.com, jroedel@suse.de, tglx@linutronix.de,
        tony.luck@intel.com, pombredanne@nexb.com,
        chang.seok.bae@intel.com, hpa@zytor.com, reinette.chatre@intel.com,
        linux-doc@vger.kernel.org, fenghua.yu@intel.com,
        babu.moger@amd.com, dwmw2@infradead.org, pbonzini@redhat.com,
        mingo@kernel.org, brijesh.singh@amd.com
Reply-To: dwmw2@infradead.org, pbonzini@redhat.com, mingo@kernel.org,
          brijesh.singh@amd.com, fenghua.yu@intel.com, babu.moger@amd.com,
          linux-doc@vger.kernel.org, reinette.chatre@intel.com,
          tony.luck@intel.com, pombredanne@nexb.com, hpa@zytor.com,
          chang.seok.bae@intel.com, Thomas.Lendacky@amd.com,
          jroedel@suse.de, tglx@linutronix.de, xiaochen.shen@intel.com,
          peterz@infradead.org, Babu.Moger@amd.com,
          kirill.shutemov@linux.intel.com, dima@arista.com,
          mingo@redhat.com, qianyue.zj@alibaba-inc.com,
          kstewart@linuxfoundation.org, vkuznets@redhat.com,
          jpoimboe@redhat.com, gregkh@linuxfoundation.org, corbet@lwn.net,
          rian@alum.mit.edu, jannh@google.com, arnd@arndb.de,
          davem@davemloft.net, sherry.hurwitz@amd.com,
          linux-kernel@vger.kernel.org, mchehab+samsung@kernel.org,
          akpm@linux-foundation.org, luto@kernel.org, bp@suse.de,
          puwen@hygon.cn, rafael@kernel.org, suravee.suthikulpanit@amd.com
In-Reply-To: <20181121202811.4492-12-babu.moger@amd.com>
References: <20181121202811.4492-12-babu.moger@amd.com>
To: linux-tip-commits@vger.kernel.org
Subject: [tip:x86/cache] x86/resctrl: Introduce AMD QOS feature
Git-Commit-ID: 4d05bf71f157d756932e77cdee16dc99e235d636
X-Mailer: tip-git-log-daemon
Robot-ID: <tip-bot.git.kernel.org>
Robot-Unsubscribe: Contact <mailto:hpa@kernel.org> to get blacklisted from
 these emails
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Content-Type: text/plain; charset=UTF-8
Content-Disposition: inline
X-Spam-Status: No, score=-2.9 required=5.0 tests=ALL_TRUSTED,BAYES_00,
        T_DATE_IN_FUTURE_96_Q autolearn=ham autolearn_force=no version=3.4.2
X-Spam-Checker-Version: SpamAssassin 3.4.2 (2018-09-13) on terminus.zytor.com
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Commit-ID:  4d05bf71f157d756932e77cdee16dc99e235d636
Gitweb:     https://git.kernel.org/tip/4d05bf71f157d756932e77cdee16dc99e235d636
Author:     Babu Moger <Babu.Moger@amd.com>
AuthorDate: Wed, 21 Nov 2018 20:28:45 +0000
Committer:  Borislav Petkov <bp@suse.de>
CommitDate: Thu, 22 Nov 2018 20:16:20 +0100

x86/resctrl: Introduce AMD QOS feature

Enable QOS feature on AMD.

Following QoS sub-features are supported on AMD if the underlying
hardware supports it:

 - L3 Cache allocation enforcement
 - L3 Cache occupancy monitoring
 - L3 Code-Data Prioritization support
 - Memory Bandwidth Enforcement (Allocation)

The specification is available at:
https://developer.amd.com/wp-content/resources/56375.pdf

There are differences in the way some of the features are implemented.
Separate those functions and add those as vendor specific functions.

The major difference is in MBA feature:

 - AMD uses CPUID leaf 0x80000020 to initialize the MBA features.
 - AMD uses direct bandwidth value instead of delay based on bandwidth values.
 - MSR register base addresses are different for MBA.
 - AMD allows non-contiguous L3 cache bit masks.

Signed-off-by: Babu Moger <babu.moger@amd.com>
Signed-off-by: Borislav Petkov <bp@suse.de>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Andy Lutomirski <luto@kernel.org>
Cc: Arnd Bergmann <arnd@arndb.de>
Cc: Brijesh Singh <brijesh.singh@amd.com>
Cc: "Chang S. Bae" <chang.seok.bae@intel.com>
Cc: David Miller <davem@davemloft.net>
Cc: David Woodhouse <dwmw2@infradead.org>
Cc: Dmitry Safonov <dima@arista.com>
Cc: Fenghua Yu <fenghua.yu@intel.com>
Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Cc: "H. Peter Anvin" <hpa@zytor.com>
Cc: Ingo Molnar <mingo@redhat.com>
Cc: Jann Horn <jannh@google.com>
Cc: Joerg Roedel <jroedel@suse.de>
Cc: Jonathan Corbet <corbet@lwn.net>
Cc: Josh Poimboeuf <jpoimboe@redhat.com>
Cc: Kate Stewart <kstewart@linuxfoundation.org>
Cc: "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>
Cc: <linux-doc@vger.kernel.org>
Cc: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
Cc: Paolo Bonzini <pbonzini@redhat.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Philippe Ombredanne <pombredanne@nexb.com>
Cc: Pu Wen <puwen@hygon.cn>
Cc: <qianyue.zj@alibaba-inc.com>
Cc: "Rafael J. Wysocki" <rafael@kernel.org>
Cc: Reinette Chatre <reinette.chatre@intel.com>
Cc: Rian Hunter <rian@alum.mit.edu>
Cc: Sherry Hurwitz <sherry.hurwitz@amd.com>
Cc: Suravee Suthikulpanit <suravee.suthikulpanit@amd.com>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Thomas Lendacky <Thomas.Lendacky@amd.com>
Cc: Tony Luck <tony.luck@intel.com>
Cc: Vitaly Kuznetsov <vkuznets@redhat.com>
Cc: <xiaochen.shen@intel.com>
Link: https://lkml.kernel.org/r/20181121202811.4492-12-babu.moger@amd.com
---
 arch/x86/kernel/cpu/resctrl/core.c        | 69 ++++++++++++++++++++++++++++--
 arch/x86/kernel/cpu/resctrl/ctrlmondata.c | 71 +++++++++++++++++++++++++++++++
 arch/x86/kernel/cpu/resctrl/internal.h    |  5 +++
 3 files changed, 142 insertions(+), 3 deletions(-)

diff --git a/arch/x86/kernel/cpu/resctrl/core.c b/arch/x86/kernel/cpu/resctrl/core.c
index ba5a5b8c4681..2ec252be4ed9 100644
--- a/arch/x86/kernel/cpu/resctrl/core.c
+++ b/arch/x86/kernel/cpu/resctrl/core.c
@@ -61,6 +61,9 @@ mba_wrmsr_intel(struct rdt_domain *d, struct msr_param *m,
 		struct rdt_resource *r);
 static void
 cat_wrmsr(struct rdt_domain *d, struct msr_param *m, struct rdt_resource *r);
+static void
+mba_wrmsr_amd(struct rdt_domain *d, struct msr_param *m,
+	      struct rdt_resource *r);
 
 #define domain_init(id) LIST_HEAD_INIT(rdt_resources_all[id].domains)
 
@@ -255,7 +258,7 @@ static inline bool rdt_get_mb_table(struct rdt_resource *r)
 	return false;
 }
 
-static bool __get_mem_config(struct rdt_resource *r)
+static bool __get_mem_config_intel(struct rdt_resource *r)
 {
 	union cpuid_0x10_3_eax eax;
 	union cpuid_0x10_x_edx edx;
@@ -281,6 +284,30 @@ static bool __get_mem_config(struct rdt_resource *r)
 	return true;
 }
 
+static bool __rdt_get_mem_config_amd(struct rdt_resource *r)
+{
+	union cpuid_0x10_3_eax eax;
+	union cpuid_0x10_x_edx edx;
+	u32 ebx, ecx;
+
+	cpuid_count(0x80000020, 1, &eax.full, &ebx, &ecx, &edx.full);
+	r->num_closid = edx.split.cos_max + 1;
+	r->default_ctrl = MAX_MBA_BW_AMD;
+
+	/* AMD does not use delay */
+	r->membw.delay_linear = false;
+
+	r->membw.min_bw = 0;
+	r->membw.bw_gran = 1;
+	/* Max value is 2048, Data width should be 4 in decimal */
+	r->data_width = 4;
+
+	r->alloc_capable = true;
+	r->alloc_enabled = true;
+
+	return true;
+}
+
 static void rdt_get_cache_alloc_cfg(int idx, struct rdt_resource *r)
 {
 	union cpuid_0x10_1_eax eax;
@@ -340,6 +367,15 @@ static int get_cache_id(int cpu, int level)
 	return -1;
 }
 
+static void
+mba_wrmsr_amd(struct rdt_domain *d, struct msr_param *m, struct rdt_resource *r)
+{
+	unsigned int i;
+
+	for (i = m->low; i < m->high; i++)
+		wrmsrl(r->msr_base + i, d->ctrl_val[i]);
+}
+
 /*
  * Map the memory b/w percentage value to delay values
  * that can be written to QOS_MSRs.
@@ -793,8 +829,13 @@ static bool __init rdt_cpu_has(int flag)
 
 static __init bool get_mem_config(void)
 {
-	if (rdt_cpu_has(X86_FEATURE_MBA))
-		return __get_mem_config(&rdt_resources_all[RDT_RESOURCE_MBA]);
+	if (!rdt_cpu_has(X86_FEATURE_MBA))
+		return false;
+
+	if (boot_cpu_data.x86_vendor == X86_VENDOR_INTEL)
+		return __get_mem_config_intel(&rdt_resources_all[RDT_RESOURCE_MBA]);
+	else if (boot_cpu_data.x86_vendor == X86_VENDOR_AMD)
+		return __rdt_get_mem_config_amd(&rdt_resources_all[RDT_RESOURCE_MBA]);
 
 	return false;
 }
@@ -893,10 +934,32 @@ static __init void rdt_init_res_defs_intel(void)
 	}
 }
 
+static __init void rdt_init_res_defs_amd(void)
+{
+	struct rdt_resource *r;
+
+	for_each_rdt_resource(r) {
+		if (r->rid == RDT_RESOURCE_L3 ||
+		    r->rid == RDT_RESOURCE_L3DATA ||
+		    r->rid == RDT_RESOURCE_L3CODE ||
+		    r->rid == RDT_RESOURCE_L2 ||
+		    r->rid == RDT_RESOURCE_L2DATA ||
+		    r->rid == RDT_RESOURCE_L2CODE)
+			r->cbm_validate = cbm_validate_amd;
+		else if (r->rid == RDT_RESOURCE_MBA) {
+			r->msr_base = MSR_IA32_MBA_BW_BASE;
+			r->msr_update = mba_wrmsr_amd;
+			r->parse_ctrlval = parse_bw_amd;
+		}
+	}
+}
+
 static __init void rdt_init_res_defs(void)
 {
 	if (boot_cpu_data.x86_vendor == X86_VENDOR_INTEL)
 		rdt_init_res_defs_intel();
+	else if (boot_cpu_data.x86_vendor == X86_VENDOR_AMD)
+		rdt_init_res_defs_amd();
 }
 
 static enum cpuhp_state rdt_online;
diff --git a/arch/x86/kernel/cpu/resctrl/ctrlmondata.c b/arch/x86/kernel/cpu/resctrl/ctrlmondata.c
index bfd7bdf8a156..43ee3cee6494 100644
--- a/arch/x86/kernel/cpu/resctrl/ctrlmondata.c
+++ b/arch/x86/kernel/cpu/resctrl/ctrlmondata.c
@@ -28,6 +28,53 @@
 #include <linux/slab.h>
 #include "internal.h"
 
+/*
+ * Check whether MBA bandwidth percentage value is correct. The value is
+ * checked against the minimum and maximum bandwidth values specified by
+ * the hardware. The allocated bandwidth percentage is rounded to the next
+ * control step available on the hardware.
+ */
+static bool bw_validate_amd(char *buf, unsigned long *data,
+			    struct rdt_resource *r)
+{
+	unsigned long bw;
+	int ret;
+
+	ret = kstrtoul(buf, 10, &bw);
+	if (ret) {
+		rdt_last_cmd_printf("Non-decimal digit in MB value %s\n", buf);
+		return false;
+	}
+
+	if (bw < r->membw.min_bw || bw > r->default_ctrl) {
+		rdt_last_cmd_printf("MB value %ld out of range [%d,%d]\n", bw,
+				    r->membw.min_bw, r->default_ctrl);
+		return false;
+	}
+
+	*data = roundup(bw, (unsigned long)r->membw.bw_gran);
+	return true;
+}
+
+int parse_bw_amd(struct rdt_parse_data *data, struct rdt_resource *r,
+		 struct rdt_domain *d)
+{
+	unsigned long bw_val;
+
+	if (d->have_new_ctrl) {
+		rdt_last_cmd_printf("Duplicate domain %d\n", d->id);
+		return -EINVAL;
+	}
+
+	if (!bw_validate_amd(data->buf, &bw_val, r))
+		return -EINVAL;
+
+	d->new_ctrl = bw_val;
+	d->have_new_ctrl = true;
+
+	return 0;
+}
+
 /*
  * Check whether MBA bandwidth percentage value is correct. The value is
  * checked against the minimum and max bandwidth values specified by the
@@ -123,6 +170,30 @@ bool cbm_validate_intel(char *buf, u32 *data, struct rdt_resource *r)
 	return true;
 }
 
+/*
+ * Check whether a cache bit mask is valid. AMD allows non-contiguous
+ * bitmasks
+ */
+bool cbm_validate_amd(char *buf, u32 *data, struct rdt_resource *r)
+{
+	unsigned long val;
+	int ret;
+
+	ret = kstrtoul(buf, 16, &val);
+	if (ret) {
+		rdt_last_cmd_printf("Non-hex character in the mask %s\n", buf);
+		return false;
+	}
+
+	if (val > r->default_ctrl) {
+		rdt_last_cmd_puts("Mask out of range\n");
+		return false;
+	}
+
+	*data = val;
+	return true;
+}
+
 /*
  * Read one cache bit mask (hex). Check that it is valid for the current
  * resource type.
diff --git a/arch/x86/kernel/cpu/resctrl/internal.h b/arch/x86/kernel/cpu/resctrl/internal.h
index 599cad34a6a8..822b7db634ee 100644
--- a/arch/x86/kernel/cpu/resctrl/internal.h
+++ b/arch/x86/kernel/cpu/resctrl/internal.h
@@ -11,6 +11,7 @@
 #define MSR_IA32_L3_CBM_BASE		0xc90
 #define MSR_IA32_L2_CBM_BASE		0xd10
 #define MSR_IA32_MBA_THRTL_BASE		0xd50
+#define MSR_IA32_MBA_BW_BASE		0xc0000200
 
 #define MSR_IA32_QM_CTR			0x0c8e
 #define MSR_IA32_QM_EVTSEL		0x0c8d
@@ -34,6 +35,7 @@
 #define MAX_MBA_BW			100u
 #define MBA_IS_LINEAR			0x4
 #define MBA_MAX_MBPS			U32_MAX
+#define MAX_MBA_BW_AMD			0x800
 
 #define RMID_VAL_ERROR			BIT_ULL(63)
 #define RMID_VAL_UNAVAIL		BIT_ULL(62)
@@ -448,6 +450,8 @@ int parse_cbm(struct rdt_parse_data *data, struct rdt_resource *r,
 	      struct rdt_domain *d);
 int parse_bw_intel(struct rdt_parse_data *data, struct rdt_resource *r,
 		   struct rdt_domain *d);
+int parse_bw_amd(struct rdt_parse_data *data, struct rdt_resource *r,
+		 struct rdt_domain *d);
 
 extern struct mutex rdtgroup_mutex;
 
@@ -579,5 +583,6 @@ void cqm_handle_limbo(struct work_struct *work);
 bool has_busy_rmid(struct rdt_resource *r, struct rdt_domain *d);
 void __check_limbo(struct rdt_domain *d, bool force_free);
 bool cbm_validate_intel(char *buf, u32 *data, struct rdt_resource *r);
+bool cbm_validate_amd(char *buf, u32 *data, struct rdt_resource *r);
 
 #endif /* _ASM_X86_RESCTRL_INTERNAL_H */
