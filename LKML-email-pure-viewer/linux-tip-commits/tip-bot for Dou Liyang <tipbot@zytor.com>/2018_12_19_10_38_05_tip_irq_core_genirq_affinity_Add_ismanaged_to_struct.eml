Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 21:33:16 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id CE8A3580261;
	Wed, 19 Dec 2018 02:38:17 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 19 Dec 2018 02:38:16 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ATwC8WxKd4tT+6oPrJ9mcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgULPj9rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0yRD+s7bpkSAXwhS?=
 =?us-ascii?q?kJNzA383vXhc5+jKxFvRyvoBNwzYHIb46IL/p+ZqHQcMgGRWdCRMtdSzZMDp++?=
 =?us-ascii?q?YoYJEuEPPfxYr474p1YWsRu+BBGsCPr0xT9Pmn/9wKM60+M7EQrb0gIgGM8Ou2?=
 =?us-ascii?q?nSotX0NKYdS+a1zKbVxjjEc/NW2C/955PPchA9uvyNXLJxcdbWyUk1DQ/KklKQ?=
 =?us-ascii?q?qYn8Mj6Ty+8DvW+b7+96WuKujW4qswJxrSa1xscqlIbJgpgZylfe9SV2xos+ON?=
 =?us-ascii?q?62SFZjbNK6DJddszuWO5Z4T888WW1kpSU3xqEctZO6fiUG0IkryhrcZvCdboSF?=
 =?us-ascii?q?7BDuWPyPLTtkmn5pYq+zihiz/EWm1+byTNO70ExQoSpAitTMtm4C1xjU6sWfVP?=
 =?us-ascii?q?t98Vmu2SyV2wDQ9O5EO0Y0mrTfK5I7xb4wjJUTvVzCHi/whkr2kLebels49uWs?=
 =?us-ascii?q?8ejrf7vrqoGGO4NpiQzyLr4il829DOggNwgBRWmb+eCy1L35+k35Ra1Hjvk3kq?=
 =?us-ascii?q?nfrZDbKt0Xpq2nDA9P1IYs9RK/Ay6h0NUWm3kIMkhFdQmZj4jmJV7OOur0DfSh?=
 =?us-ascii?q?jFS2ljdk2fTGMqfmApXXIXjPiK3hcqpl605A1AozyshS55ZVCrECPv3/QEDwtM?=
 =?us-ascii?q?HDAx89Mgy0xfvnCdpn2oMfX2KPHrGWMKfIvVCU4eIvJvGGZJUJtzblN/gl+/nu?=
 =?us-ascii?q?gGc5mVAHfKmpwYEYaHeiEvRmPkWWe3zsgtgaHGcOvwo+SvHqiVKYXT5SYXayQ7?=
 =?us-ascii?q?wz5jUhBI26CofDQ5ingKad0yejAp1WemdGB0iOEXfvaYqIQfQMaCWUIs9nlTwJ?=
 =?us-ascii?q?TryhS44n1RGzuw720btnLuzI+iIGsZLvzsR65+rWlRsq7zx7E9yd032RT2Fzhm?=
 =?us-ascii?q?4HXSQ23KB4oUx+0FuDy7J3g/5DGNxX5vNJVBo6NJHGw+x7DdDyRhzOftOTRFm6?=
 =?us-ascii?q?RdWmBCk7TsgtzN8Wf0Z9B9KigwjA3yWwBb8ZjbiLBJ0u/aLa0Hj8PMJ9y3fA1K?=
 =?us-ascii?q?k8gFgqWMpPNWu6hqFh8wjfHZLGk0Kcl6yyb6QTwDbN9HufzWqJpExXTRR/Ubvb?=
 =?us-ascii?q?UnwFZkvZt9L55ljcQL+oDrgnNghBycuGKqZRbt3pjFNGROrsOdjEYmKxnXuwCg?=
 =?us-ascii?q?iMxr+WcIXqfGAd1j3HCEcYiwAT4WqGNQ8mCyi8uW3eEiJhGUjvY0z29+l+s220?=
 =?us-ascii?q?TkkvwgGObk1h0ae1+xEPifydTfMTwqwLuCM7pzpoG1a92srcC8CcqAp5YKVcfd?=
 =?us-ascii?q?Q97U9b1WLYsgx9OYCgL6Bih1IEbwR7pUTu1w9zCoVBl8gqo2gnzA5zKaKezVNA?=
 =?us-ascii?q?eCmU3ZH2Or3LNGby+AqjZLLR2lHbyNyW4LsA6Owkq1X/uwGkDlAt83F53NhazX?=
 =?us-ascii?q?Sd5o/GAxEPUZ3sSEk38Rt6p7bEYiQm44PU1HtsMbS7szPY2tIpAvclxQikf9tF?=
 =?us-ascii?q?LKyEEwryGdUAB8eyMOwqh0SpbhUcMeFS6a44Jd+pe+GH2a6rJulgmj2mgH9D4I?=
 =?us-ascii?q?B81EKM6iV9RvTJ35YD3/GXwA+HWy3gg1emt8D9gZpEai0KHmqj1SjkA5ZcZrdz?=
 =?us-ascii?q?fYkXE2iuOdC4xtJki57rRXFY7l+jC0oa18CzfRqdckLy3RdX1UQRunGnnSq4zz?=
 =?us-ascii?q?ppkzAmtKaf3SrOw/j8exoDIGJEWG5ijVL0K4iuk98aRFSobxQulBa95Uf6xrJX?=
 =?us-ascii?q?paRlI2nIXEdIeTP7L2VjUqu2q7qDbNRD6JIusSVLTuu8ZUqWRaL6oxsfyynjBX?=
 =?us-ascii?q?dRxCgndzG2vZX0hx56h3iHLHZwr3rZftt8xQzF69zfRv5R3zwGSzd+iTTMAli8?=
 =?us-ascii?q?Pt+p/ciblpvZs+C+UX6hWYNXcSXx0YyAsy6773VwARKjh/CzhsHnEQ8i3C77zd?=
 =?us-ascii?q?ZqUj/ErBT9YontzKm6NeNnfk91BF7z8cZ6G4d+kpcui5EUw3QVmpKV/X8fm2fp?=
 =?us-ascii?q?Ldpbwb7+bGYKRTMTwN7a+gnl1FdjLnKU3Y35UHqdz9BlZ9m7ZGMWxy0849pLCK?=
 =?us-ascii?q?eS8LxLgy91rkCkogLWZPh3hi0dxuc26H4Gn+EJvxIgziCcArARB0ZUJyLtmAqT?=
 =?us-ascii?q?79CisqpXfn2gfqaq1Epxht2hCLCCogdBWHf2YJsiHClw7tlhP1LIynH89obkeN?=
 =?us-ascii?q?zIZ9IJqhKUiwvAj/RSKJ8pivoKgi9nNXj8vHI/ze47kAdu3Yq7vIWcL2Vt/aS5?=
 =?us-ascii?q?AgNXNzHvZsMT/C3tgrhansqMw4+vGZBhEC0RXJT0VfKoDC4StfP/OgmVCjI8rX?=
 =?us-ascii?q?ObGafFEQ+b9UdrtHbPE5GtN3GKK3gV19RiRB+BJENBhAAYRik1npk8Fgqy3szu?=
 =?us-ascii?q?bF955iwN5l7/shZMyPhnNxzhXWfEvguodi04SJuCLBpV8wFC4V3aMdeF4+J3Hi?=
 =?us-ascii?q?FY+IChrQOXJmyaYQRIEX8GWkieC1//Obmu4MHK8/KECeqmM/vOfbKOpPReVveP?=
 =?us-ascii?q?2JKvy5Zm8CyKNsmVJXliCPs72kVYUHB9GsTZnSgPSiMNmyLMac6buAmz+iltos?=
 =?us-ascii?q?+j9/TrXRrl5ZGTBLtKLdVv5xe2jL+DN+GOhSZ5KjVY1pIWyX/L0rgf21EShD90?=
 =?us-ascii?q?dzmwCrQNrirNTKPWmq9KAB8XcSJzNM1U760i2glBI9LUitTw1rRglP46F09FVU?=
 =?us-ascii?q?D9msGufcEFOXy9O0jdBEmVNLWKPznLw8DsbKO4SL1QivhUthKqtTaaFU/jIiqM?=
 =?us-ascii?q?lz3zWx+zNuFMiTmRPAZCt4GlbhZtFW/jQcr6ah26Nd97lyE5zacoiXPKK2EcNy?=
 =?us-ascii?q?Nxc0dMrr2W8CNZje9zG21H7np5M+aEnzyV4PXfKpYTqfFrGDh7l/pG4HQmzLtY?=
 =?us-ascii?q?9CFFS+ZzmCvXr95upUmpk+iPyjV9VhpOpS1GhIaKvUVkJKXY+YNMWXfC/BIR82?=
 =?us-ascii?q?qQDw4GqMdiCt3q6OhszY3LlaTuOHJe8sqR9swZAsnIM+qZP3c7dxnkAjjZCE0C?=
 =?us-ascii?q?VzH4D2zHg11hl6SO+XmFhpw7rIXwgp0IS68dWFFxXvMCA2x3DcAFOtF8WTZg2a?=
 =?us-ascii?q?WGic8Uo2G3vBTXTe1QpJfOWvmVBLPkLzPdxbpNfBsZyKu+IYkIP4zT0VZlY1Vx?=
 =?us-ascii?q?m4GMEE3VGZhJoyt8fko3rV9L/XxWUGI+wQTmZxmr7XtVEuS72lYziw1xZswu+S?=
 =?us-ascii?q?3q7lNxIUDF4GM8l1Q1mMTshz+KWDH0Jaa0G4pRDnnarU80Z4/6W0N/ahH6k0t+?=
 =?us-ascii?q?fBvDWvp1jqppc28j3BPdoZFIBdZOXLFDelkbwvTBNKZg6khVtijynRwP3uDCE5?=
 =?us-ascii?q?Y3zAY=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ATAACIHhpch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgmmBAieDfYgZX4scAYIhgwOFfoVkg2aEfSCBBANMEwEBGAsIAYc?=
 =?us-ascii?q?qIjQJDQEDAQEBAQEBAgETAQEBCgsJCCkjDII2IoJlAwMBAggYBAQBBgFGBgkBA?=
 =?us-ascii?q?SQCJgICAx4OAQ4BGBkFA4MaAYFpAQEBFQUKpyR8Mw0RhA8BgQOCLgQKGQ2CGAU?=
 =?us-ascii?q?TeIs0F4FAP4ERhGaBA4UyglcCkFSQKDMJhw+HIYNJi2YLUYUULI4TgROKAwIEA?=
 =?us-ascii?q?gQFAhRabG2BIU0jFYFvDgsBDIESE4sJhWAeATIBAQh7AQGLFSuCIAEB?=
X-IPAS-Result: =?us-ascii?q?A0ATAACIHhpch0O0hNFjHAEBAQQBAQcEAQGBUQcBAQsBgmm?=
 =?us-ascii?q?BAieDfYgZX4scAYIhgwOFfoVkg2aEfSCBBANMEwEBGAsIAYcqIjQJDQEDAQEBA?=
 =?us-ascii?q?QEBAgETAQEBCgsJCCkjDII2IoJlAwMBAggYBAQBBgFGBgkBASQCJgICAx4OAQ4?=
 =?us-ascii?q?BGBkFA4MaAYFpAQEBFQUKpyR8Mw0RhA8BgQOCLgQKGQ2CGAUTeIs0F4FAP4ERh?=
 =?us-ascii?q?GaBA4UyglcCkFSQKDMJhw+HIYNJi2YLUYUULI4TgROKAwIEAgQFAhRabG2BIU0?=
 =?us-ascii?q?jFYFvDgsBDIESE4sJhWAeATIBAQh7AQGLFSuCIAEB?=
X-IronPort-AV: E=Sophos;i="5.56,372,1539673200"; 
   d="scan'208";a="45597942"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 19 Dec 2018 02:38:15 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729102AbeLSKiM (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 19 Dec 2018 05:38:12 -0500
Received: from terminus.zytor.com ([198.137.202.136]:41925 "EHLO
        terminus.zytor.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727419AbeLSKiL (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 19 Dec 2018 05:38:11 -0500
Received: from terminus.zytor.com (localhost [127.0.0.1])
        by terminus.zytor.com (8.15.2/8.15.2) with ESMTPS id wBJAc5B63192586
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=NO);
        Wed, 19 Dec 2018 02:38:05 -0800
Received: (from tipbot@localhost)
        by terminus.zytor.com (8.15.2/8.15.2/Submit) id wBJAc5gN3192583;
        Wed, 19 Dec 2018 02:38:05 -0800
Date: Wed, 19 Dec 2018 02:38:05 -0800
X-Authentication-Warning: terminus.zytor.com: tipbot set sender to tipbot@zytor.com using -f
From: tip-bot for Dou Liyang <tipbot@zytor.com>
Message-ID: <tip-c410abbbacb9b378365ba17a30df08b4b9eec64f@git.kernel.org>
Cc: sumit.saxena@broadcom.com, hpa@zytor.com, tglx@linutronix.de,
        douliyangs@gmail.com, mingo@kernel.org,
        linux-kernel@vger.kernel.org, kashyap.desai@broadcom.com
Reply-To: tglx@linutronix.de, hpa@zytor.com, sumit.saxena@broadcom.com,
          kashyap.desai@broadcom.com, linux-kernel@vger.kernel.org,
          mingo@kernel.org, douliyangs@gmail.com
In-Reply-To: <20181204155122.6327-3-douliyangs@gmail.com>
References: <20181204155122.6327-3-douliyangs@gmail.com>
To: linux-tip-commits@vger.kernel.org
Subject: [tip:irq/core] genirq/affinity: Add is_managed to struct
 irq_affinity_desc
Git-Commit-ID: c410abbbacb9b378365ba17a30df08b4b9eec64f
X-Mailer: tip-git-log-daemon
Robot-ID: <tip-bot.git.kernel.org>
Robot-Unsubscribe: Contact <mailto:hpa@kernel.org> to get blacklisted from
 these emails
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Content-Type: text/plain; charset=UTF-8
Content-Disposition: inline
X-Spam-Status: No, score=1.2 required=5.0 tests=ALL_TRUSTED,BAYES_00,
        DATE_IN_FUTURE_96_Q,FREEMAIL_FORGED_REPLYTO autolearn=no
        autolearn_force=no version=3.4.2
X-Spam-Level: *
X-Spam-Checker-Version: SpamAssassin 3.4.2 (2018-09-13) on terminus.zytor.com
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Commit-ID:  c410abbbacb9b378365ba17a30df08b4b9eec64f
Gitweb:     https://git.kernel.org/tip/c410abbbacb9b378365ba17a30df08b4b9eec64f
Author:     Dou Liyang <douliyangs@gmail.com>
AuthorDate: Tue, 4 Dec 2018 23:51:21 +0800
Committer:  Thomas Gleixner <tglx@linutronix.de>
CommitDate: Wed, 19 Dec 2018 11:32:08 +0100

genirq/affinity: Add is_managed to struct irq_affinity_desc

Devices which use managed interrupts usually have two classes of
interrupts:

  - Interrupts for multiple device queues
  - Interrupts for general device management

Currently both classes are treated the same way, i.e. as managed
interrupts. The general interrupts get the default affinity mask assigned
while the device queue interrupts are spread out over the possible CPUs.

Treating the general interrupts as managed is both a limitation and under
certain circumstances a bug. Assume the following situation:

 default_irq_affinity = 4..7

So if CPUs 4-7 are offlined, then the core code will shut down the device
management interrupts because the last CPU in their affinity mask went
offline.

It's also a limitation because it's desired to allow manual placement of
the general device interrupts for various reasons. If they are marked
managed then the interrupt affinity setting from both user and kernel space
is disabled. That limitation was reported by Kashyap and Sumit.

Expand struct irq_affinity_desc with a new bit 'is_managed' which is set
for truly managed interrupts (queue interrupts) and cleared for the general
device interrupts.

[ tglx: Simplify code and massage changelog ]

Reported-by: Kashyap Desai <kashyap.desai@broadcom.com>
Reported-by: Sumit Saxena <sumit.saxena@broadcom.com>
Signed-off-by: Dou Liyang <douliyangs@gmail.com>
Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
Cc: linux-pci@vger.kernel.org
Cc: shivasharan.srikanteshwara@broadcom.com
Cc: ming.lei@redhat.com
Cc: hch@lst.de
Cc: bhelgaas@google.com
Cc: douliyang1@huawei.com
Link: https://lkml.kernel.org/r/20181204155122.6327-3-douliyangs@gmail.com

---
 include/linux/interrupt.h |  1 +
 kernel/irq/affinity.c     |  4 ++++
 kernel/irq/irqdesc.c      | 13 ++++++++-----
 3 files changed, 13 insertions(+), 5 deletions(-)

diff --git a/include/linux/interrupt.h b/include/linux/interrupt.h
index c44b7844dc83..c672f34235e7 100644
--- a/include/linux/interrupt.h
+++ b/include/linux/interrupt.h
@@ -263,6 +263,7 @@ struct irq_affinity {
  */
 struct irq_affinity_desc {
 	struct cpumask	mask;
+	unsigned int	is_managed : 1;
 };
 
 #if defined(CONFIG_SMP)
diff --git a/kernel/irq/affinity.c b/kernel/irq/affinity.c
index c0fe591b0dc9..45b68b4ea48b 100644
--- a/kernel/irq/affinity.c
+++ b/kernel/irq/affinity.c
@@ -289,6 +289,10 @@ irq_create_affinity_masks(int nvecs, const struct irq_affinity *affd)
 	for (; curvec < nvecs; curvec++)
 		cpumask_copy(&masks[curvec].mask, irq_default_affinity);
 
+	/* Mark the managed interrupts */
+	for (i = affd->pre_vectors; i < nvecs - affd->post_vectors; i++)
+		masks[i].is_managed = 1;
+
 outnodemsk:
 	free_node_to_cpumask(node_to_cpumask);
 	return masks;
diff --git a/kernel/irq/irqdesc.c b/kernel/irq/irqdesc.c
index cb401d6c5040..ee062b7939d3 100644
--- a/kernel/irq/irqdesc.c
+++ b/kernel/irq/irqdesc.c
@@ -453,27 +453,30 @@ static int alloc_descs(unsigned int start, unsigned int cnt, int node,
 		       struct module *owner)
 {
 	struct irq_desc *desc;
-	unsigned int flags;
 	int i;
 
 	/* Validate affinity mask(s) */
 	if (affinity) {
-		for (i = 0; i < cnt; i++) {
+		for (i = 0; i < cnt; i++, i++) {
 			if (cpumask_empty(&affinity[i].mask))
 				return -EINVAL;
 		}
 	}
 
-	flags = affinity ? IRQD_AFFINITY_MANAGED | IRQD_MANAGED_SHUTDOWN : 0;
-
 	for (i = 0; i < cnt; i++) {
 		const struct cpumask *mask = NULL;
+		unsigned int flags = 0;
 
 		if (affinity) {
-			node = cpu_to_node(cpumask_first(affinity));
+			if (affinity->is_managed) {
+				flags = IRQD_AFFINITY_MANAGED |
+					IRQD_MANAGED_SHUTDOWN;
+			}
 			mask = &affinity->mask;
+			node = cpu_to_node(cpumask_first(mask));
 			affinity++;
 		}
+
 		desc = alloc_desc(start + i, node, flags, mask, owner);
 		if (!desc)
 			goto err;
