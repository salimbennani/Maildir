Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:40:06 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 6084D58050C;
	Thu, 20 Dec 2018 10:14:15 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 20 Dec 2018 10:14:15 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ASETH3BSmG7rtmNA/i6Eg3JpTp9psv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64YhyHt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KptVRTmij?=
 =?us-ascii?q?oINyQh/W/ZisJ+j7hbrxCvpxJh3oDaZ46aOvVicazAZtMaXWhMU91NVyFCGI6w?=
 =?us-ascii?q?c5ECA/YDMOtesoLzp0EOrRy7BQS0GOPvyydIimbt0q09z+QqDA/G3As6H9kTtn?=
 =?us-ascii?q?rbstL1P7oQXu+vyqnD0DLOb+9X2Tfl84fIdQwhrOqNXLNwbcrRzlMvGxnZgVWX?=
 =?us-ascii?q?rIzoJjWY3fkDvWic6upvT+Ovi2g/pgFyvDev3MEshZfNho4PzVDE7yp5zYAoLt?=
 =?us-ascii?q?O7UE52ecCoHIdUui2AKod7TN0uT3t1tCs51rEKo5+2cSoSxJg6wxPSaOaLf5WG?=
 =?us-ascii?q?7x/hTuqdPyt0iGx/dL6iiRu/8E6twfDmWMauylZFtC9Fn8HMtn8T0xzT7dCKSu?=
 =?us-ascii?q?Vy/ki/wzaDzQPT5f9eIUAyi6XbL4QtwrkqlpocqUjDHyn2l1vqjKKOaEko5uyl?=
 =?us-ascii?q?5/76brjouJOQLZJ4hwLiPqg0m8GyA/w0Mg0UUGia/eS82qfj/Ur8QLhSiv02k6?=
 =?us-ascii?q?/ZsI3VJMgCpa62HRVV0oA95Ba7Fjum19oZnX8ZI1JfYx+HkYfpNE/UIPziDvew?=
 =?us-ascii?q?nU6skDF1yPDCJLHhBY/NLnfbnLf7Ybl981JcyBY0zd1H45JUC7IBL+zpVk7+qd?=
 =?us-ascii?q?zVFRs5Mw2yw+b6B9RxzIIeWWSTAqCHNKPeq0OH5uUqI+OUfo8apC79K+Q55/7p?=
 =?us-ascii?q?lXI5mUUSfai13ZQNb3C0BPRmI1iDbnrqjdcMCmMKvgs4TOz3h1yOSz9TZ3CuX6?=
 =?us-ascii?q?0i4jE3Ep6pDYDGRoq1mryOwD+7HoFKZmBBEl2DC2zod4WDW/cPci6SONVukj4f?=
 =?us-ascii?q?WLilSo8h0wyutQDgx7pmKOrU5jMXtZb52Ndp4O3TkAk49SZoAMSFz2GNU2Z0k3?=
 =?us-ascii?q?sLRzAs2qBzu0h9ylaZ3qh+jPxVDthT5/JPUgcnOp/Q1e16C9buWg3feteFUkqp?=
 =?us-ascii?q?QtKjATspVNI+38cOY1phG9Wllh3MwjClA6ELmLCRBJw76KTc32PvKMZ7zHrG0K?=
 =?us-ascii?q?ohj1wiQsZUMW2mh6h/9xXcBoLTkkWZkbqqeroY3CLX6GiDym+OtllCUAFsSaXF?=
 =?us-ascii?q?QWwfZkzOoNvk/EzCUaGhBa4nMgRbz86CMbVFatvygFVCRffjPsneYm2rl2exAx?=
 =?us-ascii?q?aI2q2DbI7wd2oB2yXdDVAOkxoP8naeKQg+GiChrnrCDDxvEFLvZF/s8el+qX+h?=
 =?us-ascii?q?Uk841QaKb1dl17q0/B4ViueRS/cS3rICpScgpC94HFe739LKFdWAoxBtc7lbYd?=
 =?us-ascii?q?M4+F1Hz37WtxRhPpy8KKBvnkQRcwBpsELhyRp2Cp9MntM3rHw31gVyL6GY0FRf?=
 =?us-ascii?q?dz6D2ZDwO7vXKnT9/Ry1aq7W3E3e38iS+qsV9Ps4rFDjthmzFkU+63Vnz8VV03?=
 =?us-ascii?q?yE65TKEQoeS47+Xlw29hh6vb7aZCY96pjQ1X1tN6m0rzDD18goBOsj1havYdNf?=
 =?us-ascii?q?PLmYGw/1Fs0QH9KuJ/Aym1i1chIEO/hf9LQ1P8y6bfSGwrOkPOF6kDKgk2tH+o?=
 =?us-ascii?q?F93luQ+CVmTu7HwogKw+uf3guBTDr8iFahssbqmYFLfz0SH2y/yTT6C45VfKF9?=
 =?us-ascii?q?YYELCWK2Kc2t2tp+n4LtW2Jf9FO7B1IG2dWleBqIY1zmwA1Q018aoXimmSu+0j?=
 =?us-ascii?q?x1nCslrquZ3CzS3evicAALNXJMRGlnlV3sO5S7j8gGXEi0aAgkjBml6lzgx6hY?=
 =?us-ascii?q?p6R/KHPfQVxScCj1LGFiU62wuaSEY8NU7JMosCNXUPmzYFyAS779pQca3D3nH2?=
 =?us-ascii?q?dE2D87cDSqsI3jnxNmkGKdMGpzrH3BdMBw3xjf48bQRfxQ3joAXyR4jTjXBl6h?=
 =?us-ascii?q?P9im59mUlpHDsvygWGKlTJFcbS7rzYaYviuh+WJqGQG/n+y0mtD/Egg1yy7728?=
 =?us-ascii?q?NqVSXVthn8ZIbr2r++MeJmeEloGVD959B7GoF4jos/mpUQ1WIGiZWS+HoNiX3z?=
 =?us-ascii?q?PslD2aLicHoNQiYGw9vU4AjmwkJvNHyIyJziVnWB3MRhfcK1bX0M2iIy9M1KDK?=
 =?us-ascii?q?aU7LpZnSp6uFa4rATRYeRjkTcZ0/ch9Hkag+QRsgo30iqdGqwSHVVfPSH0ixSI?=
 =?us-ascii?q?6NW+oL9WZWm1d7iwyVF+ncugDLyZpgFcWXD5eootHCNq78V/Nk7M32P36o3+ZN?=
 =?us-ascii?q?bQatcTvAWOkxjcl+hVNI4xlv0SiCV8I239unkly/MhgRxqwJG3p4yHK2Rr/KKk?=
 =?us-ascii?q?DR9ULDz1Z8UP+j7ziaZShNqZ34eqHp95ADUEQIPoTe60EDIVrfnnNRyBEDgipX?=
 =?us-ascii?q?eAA7bfARWT6ER7r3LMDpCrMWuYJGICwNVmRRmdIlFfgQ8OUDU7mJ45Ch6lxMj7?=
 =?us-ascii?q?fEhl4TAR40byqgFQxeJwKxn/TmDfqR+oazczVZifNQdW4RtE50vPKsye6eRzHy?=
 =?us-ascii?q?5D852lrQyNLHGbZgtSAWEIXEyEG07sPr206dbc9OiYA/K0L+HSbrWWtexeS/CI?=
 =?us-ascii?q?yIqv0oR4/jaMNcaPPnh4A/04wEpDWn95FNrDmzUSUCwajCbNb8+dpBeh9Sx7tM?=
 =?us-ascii?q?G/8PL3WA3x4YuDEaddMdJq+xqum6eMK/aQhDplKTZfzp4D32LIx6MF3FEMiyBi?=
 =?us-ascii?q?bT2tEbUbuC7JTaLQnLJXDhEBZyNyMstI87wz3g1XNcHHjdP106ZyjuQpBFddSV?=
 =?us-ascii?q?zhhsapaNQWI2G8MVPLHlqEOK6aKj3L3c73Z7ixSblRjOVSqh2xtiyXE07lPjSf?=
 =?us-ascii?q?iTbpUwqjPv1LjCGeJBZeop2ycg5xCWj/S9Lrch26P8VxjT0zwL00gGvFNG8cMT?=
 =?us-ascii?q?dmdUNNoaad7SdZgvV5BmxA4WBpLeiCmyaF8ebYLowavudsAiRxxKpm5yE+yr1I?=
 =?us-ascii?q?/GRYReQwkyzXq99yuHm4neSVjDlqShxDrnBMno3Yh0h6PbTl8cxEWHDZ7FcO4H?=
 =?us-ascii?q?+WBhAiudRoEJvstrpWx9yJk7j8bH9L99/E9M0QCtKSM8KGK3oiMBzBHD/SERtD?=
 =?us-ascii?q?TDi3OGWZjEtY1LmX/2GVr5Un7IDrmYAPR6VzUF0zH+kdTEN/E5hKJZZxUTQMkr?=
 =?us-ascii?q?OBisMMo32ko12ZQMhd+IHOUNqWAPPmMjHfiqNLI1MUzrfoBYASMJDnwUtka0k8?=
 =?us-ascii?q?kImOU0zZWNBcvytuRgw5ukNA9D55VGJ3k0vubw6F+nIfFfeo2BUxj082Y+Mp7z?=
 =?us-ascii?q?7E+Vo7JlPW4iA3lQ15g9LvjCqNNiH4KKS9R6lfES+yvE80dtv7Ww9dfxyumlYi?=
 =?us-ascii?q?PzDBA/pUjrhtM2RmgQTckZ9OH/dGSutDehBD6+uQYqA00EwZoCK7jUFA/6PhBJ?=
 =?us-ascii?q?wqpQIsOcqwrmpK3B5Lfs8pIraWL61MmAsDzpmStzOlg7hiiDQVIFwApTuf?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AwAACC2xtch0O0hNFlHgEGBwaBUggLA?=
 =?us-ascii?q?YFagQ+BAieDfYh4ixsBgiGXSRQMgVMTAQEYDQYBhy4iNQgNAQMBAQEBAQECARM?=
 =?us-ascii?q?BAQEIDQkIKSMMgjYigmUDAwECIAQFBgFGBgkBASQCJgICAyUeERkFA4JPSwGCA?=
 =?us-ascii?q?QUKp1B8Mx6EDwGBA4R1E3iLNBeBQD+DdYR4BAESAYMnglcCiSdMhmiQYgmHEYY?=
 =?us-ascii?q?yhDqCLI8xi0GDB4seAgQCBAUCFIFHAYEbcU0jFYFvDgsBDIESCQqLCYVgHgEyA?=
 =?us-ascii?q?QEIewEBixMPF4InAQE?=
X-IPAS-Result: =?us-ascii?q?A0AwAACC2xtch0O0hNFlHgEGBwaBUggLAYFagQ+BAieDfYh?=
 =?us-ascii?q?4ixsBgiGXSRQMgVMTAQEYDQYBhy4iNQgNAQMBAQEBAQECARMBAQEIDQkIKSMMg?=
 =?us-ascii?q?jYigmUDAwECIAQFBgFGBgkBASQCJgICAyUeERkFA4JPSwGCAQUKp1B8Mx6EDwG?=
 =?us-ascii?q?BA4R1E3iLNBeBQD+DdYR4BAESAYMnglcCiSdMhmiQYgmHEYYyhDqCLI8xi0GDB?=
 =?us-ascii?q?4seAgQCBAUCFIFHAYEbcU0jFYFvDgsBDIESCQqLCYVgHgEyAQEIewEBixMPF4I?=
 =?us-ascii?q?nAQE?=
X-IronPort-AV: E=Sophos;i="5.56,378,1539673200"; 
   d="scan'208";a="57736857"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 20 Dec 2018 10:14:13 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1732900AbeLTSOH (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Thu, 20 Dec 2018 13:14:07 -0500
Received: from terminus.zytor.com ([198.137.202.136]:43247 "EHLO
        terminus.zytor.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1732677AbeLTSOH (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 20 Dec 2018 13:14:07 -0500
Received: from terminus.zytor.com (localhost [127.0.0.1])
        by terminus.zytor.com (8.15.2/8.15.2) with ESMTPS id wBKICsCp3682343
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=NO);
        Thu, 20 Dec 2018 10:12:54 -0800
Received: (from tipbot@localhost)
        by terminus.zytor.com (8.15.2/8.15.2/Submit) id wBKICs7L3682340;
        Thu, 20 Dec 2018 10:12:54 -0800
Date: Thu, 20 Dec 2018 10:12:54 -0800
X-Authentication-Warning: terminus.zytor.com: tipbot set sender to tipbot@zytor.com using -f
From: tip-bot for Leo Yan <tipbot@zytor.com>
Message-ID: <tip-24fff5eb2b937951af5dce6cdb7a1e679ac8e751@git.kernel.org>
Cc: mike.leach@linaro.org, hpa@zytor.com, robert.walker@arm.com,
        acme@redhat.com, namhyung@kernel.org, jolsa@redhat.com,
        tglx@linutronix.de, leo.yan@linaro.org, mingo@kernel.org,
        alexander.shishkin@linux.intel.com, mathieu.poirier@linaro.org,
        linux-kernel@vger.kernel.org
Reply-To: linux-kernel@vger.kernel.org, alexander.shishkin@linux.intel.com,
          mathieu.poirier@linaro.org, mingo@kernel.org, leo.yan@linaro.org,
          tglx@linutronix.de, namhyung@kernel.org, acme@redhat.com,
          jolsa@redhat.com, robert.walker@arm.com, hpa@zytor.com,
          mike.leach@linaro.org
In-Reply-To: <1544513908-16805-3-git-send-email-leo.yan@linaro.org>
References: <1544513908-16805-3-git-send-email-leo.yan@linaro.org>
To: linux-tip-commits@vger.kernel.org
Subject: [tip:perf/core] perf cs-etm: Avoid stale branch samples when flush
 packet
Git-Commit-ID: 24fff5eb2b937951af5dce6cdb7a1e679ac8e751
X-Mailer: tip-git-log-daemon
Robot-ID: <tip-bot.git.kernel.org>
Robot-Unsubscribe: Contact <mailto:hpa@kernel.org> to get blacklisted from
 these emails
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Content-Type: text/plain; charset=UTF-8
Content-Disposition: inline
X-Spam-Status: No, score=-2.9 required=5.0 tests=ALL_TRUSTED,BAYES_00
        autolearn=ham autolearn_force=no version=3.4.2
X-Spam-Checker-Version: SpamAssassin 3.4.2 (2018-09-13) on terminus.zytor.com
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Commit-ID:  24fff5eb2b937951af5dce6cdb7a1e679ac8e751
Gitweb:     https://git.kernel.org/tip/24fff5eb2b937951af5dce6cdb7a1e679ac8e751
Author:     Leo Yan <leo.yan@linaro.org>
AuthorDate: Tue, 11 Dec 2018 15:38:22 +0800
Committer:  Arnaldo Carvalho de Melo <acme@redhat.com>
CommitDate: Tue, 18 Dec 2018 12:23:59 -0300

perf cs-etm: Avoid stale branch samples when flush packet

At the end of trace buffer handling, function cs_etm__flush() is invoked
to flush any remaining branch stack entries.  As a side effect, it also
generates branch sample, because the 'etmq->packet' doesn't contains any
new coming packet but point to one stale packet after packets swapping,
so it wrongly makes synthesize branch samples with stale packet info.

We could review below detailed flow which causes issue:

  Packet1: start_addr=0xffff000008b1fbf0 end_addr=0xffff000008b1fbfc
  Packet2: start_addr=0xffff000008b1fb5c end_addr=0xffff000008b1fb6c

  step 1: cs_etm__sample():
	sample: ip=(0xffff000008b1fbfc-4) addr=0xffff000008b1fb5c

  step 2: flush packet in cs_etm__run_decoder():
	cs_etm__run_decoder()
	  `-> err = cs_etm__flush(etmq, false);
	sample: ip=(0xffff000008b1fb6c-4) addr=0xffff000008b1fbf0

Packet1 and packet2 are two continuous packets, when packet2 is the new
coming packet, cs_etm__sample() generates branch sample for these two
packets and use [packet1::end_addr - 4 => packet2::start_addr] as branch
jump flow, thus we can see the first generated branch sample in step 1.
At the end of cs_etm__sample() it swaps packets so 'etm->prev_packet'=
packet2 and 'etm->packet'=packet1, so far it's okay for branch sample.

If packet2 is the last one packet in trace buffer, even there have no
any new coming packet, cs_etm__run_decoder() invokes cs_etm__flush() to
flush branch stack entries as expected, but it also generates branch
samples by taking 'etm->packet' as a new coming packet, thus the branch
jump flow is as [packet2::end_addr - 4 =>  packet1::start_addr]; this
is the second sample which is generated in step 2.  So actually the
second sample is a stale sample and we should not generate it.

This patch introduces a new function cs_etm__end_block(), at the end of
trace block this function is invoked to only flush branch stack entries
and thus can avoid to generate branch sample for stale packet.

Signed-off-by: Leo Yan <leo.yan@linaro.org>
Reviewed-by: Mathieu Poirier <mathieu.poirier@linaro.org>
Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Cc: Jiri Olsa <jolsa@redhat.com>
Cc: Mike Leach <mike.leach@linaro.org>
Cc: Namhyung Kim <namhyung@kernel.org>
Cc: Robert Walker <robert.walker@arm.com>
Cc: coresight@lists.linaro.org
Cc: linux-arm-kernel@lists.infradead.org
Link: http://lkml.kernel.org/r/1544513908-16805-3-git-send-email-leo.yan@linaro.org
Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
---
 tools/perf/util/cs-etm.c | 35 ++++++++++++++++++++++++++++++++++-
 1 file changed, 34 insertions(+), 1 deletion(-)

diff --git a/tools/perf/util/cs-etm.c b/tools/perf/util/cs-etm.c
index 789707bc4e9e..ffc4fe5c0b7e 100644
--- a/tools/perf/util/cs-etm.c
+++ b/tools/perf/util/cs-etm.c
@@ -1055,6 +1055,39 @@ swap_packet:
 	return err;
 }
 
+static int cs_etm__end_block(struct cs_etm_queue *etmq)
+{
+	int err;
+
+	/*
+	 * It has no new packet coming and 'etmq->packet' contains the stale
+	 * packet which was set at the previous time with packets swapping;
+	 * so skip to generate branch sample to avoid stale packet.
+	 *
+	 * For this case only flush branch stack and generate a last branch
+	 * event for the branches left in the circular buffer at the end of
+	 * the trace.
+	 */
+	if (etmq->etm->synth_opts.last_branch &&
+	    etmq->prev_packet->sample_type == CS_ETM_RANGE) {
+		/*
+		 * Use the address of the end of the last reported execution
+		 * range.
+		 */
+		u64 addr = cs_etm__last_executed_instr(etmq->prev_packet);
+
+		err = cs_etm__synth_instruction_sample(
+			etmq, addr,
+			etmq->period_instructions);
+		if (err)
+			return err;
+
+		etmq->period_instructions = 0;
+	}
+
+	return 0;
+}
+
 static int cs_etm__run_decoder(struct cs_etm_queue *etmq)
 {
 	struct cs_etm_auxtrace *etm = etmq->etm;
@@ -1137,7 +1170,7 @@ static int cs_etm__run_decoder(struct cs_etm_queue *etmq)
 
 		if (err == 0)
 			/* Flush any remaining branch stack entries */
-			err = cs_etm__flush(etmq);
+			err = cs_etm__end_block(etmq);
 	}
 
 	return err;
