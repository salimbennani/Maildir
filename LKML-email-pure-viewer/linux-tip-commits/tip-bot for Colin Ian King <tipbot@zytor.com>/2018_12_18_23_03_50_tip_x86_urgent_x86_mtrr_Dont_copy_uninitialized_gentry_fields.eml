Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 08:45:02 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id BBE8858055F;
	Tue, 18 Dec 2018 15:04:02 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga002-1.jf.intel.com with ESMTP; 18 Dec 2018 15:04:02 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AHJx3EBRHvj/M+sSo9nqAX2Jz69psv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64YheHt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KptVRTmij?=
 =?us-ascii?q?oINyQh/W/ZisJ+j7hbrxCvpxJh3oDaZ46aOvVicazAZtMaXWhMU91NVyFCGI6w?=
 =?us-ascii?q?c5ECA/YDMOtesoLzp0EOrRy7BQS0GOPvyydIimbt0q09z+QqDA/G3As6H9kTrn?=
 =?us-ascii?q?nUq9H1NKYUUeuoz6fH1zPDZO5T1zf87ojIfQ0qrPaQXbJxacre0k4vFx/eg1SR?=
 =?us-ascii?q?qY3lIzSV1v4Xv2eH6OpgUPuihmg6oA9/pTivw90jiojPho8NyVDL6z95wIArKt?=
 =?us-ascii?q?28UkJ7ZsSkEJRWuiqHNIV2WtsvT390tCs+0LEKpJC2cDYQxJg6xBPTd+aLfomK?=
 =?us-ascii?q?7x77SeqcJTR1iGh4dL+xhRu+61asxvHiWsWuzVpHoCtIn9/RvX4XzRPT8NKISv?=
 =?us-ascii?q?5l80ehxzmP0wfT5/laIUA7i6XbMYQtwr0umZoJt0TMACv2lF/xjK+MeUUo4umo?=
 =?us-ascii?q?6+L5bbX6vpKQKZN4hwXkPqgzlMGzH/40PhUNUmSH4+ix1b/u8VX8QLpQj/02lq?=
 =?us-ascii?q?fZsIrdJcQevqO5Bw5V0oA+6xewFjum08oXnWMBLF1bfBKLlo/pOl/IIP/mF/ey?=
 =?us-ascii?q?mEqskDh1yPDcJLHhAYvCLmLFkLj/ebZx8UlcyBA8zdxH/ZJbFqkBIO7vWk/2rN?=
 =?us-ascii?q?HYCh45Mw+qzOr9B9R9y5gTWWaOAq+fLaPTvkWE5uMpI+mQeoAVvCzxJOQi5/7r?=
 =?us-ascii?q?lXU5g0MSfbG13ZsLb3C1BvRmLF+YYXrwmNgBFn0GvgojTOPwjl2CXiVeZ3KzX6?=
 =?us-ascii?q?I6+zE6B5iqDYbFRoCxnrOB2D23EYFRZmBDElqMC2vnd52YW/cQbyKfOs1hkjsa?=
 =?us-ascii?q?WrS7SI8h0heutAn9y7d8KurU+ysYtY/s1dRv5u3Tkw0y+iJwD8iHz26NSGR0lH?=
 =?us-ascii?q?sSRzAqxKB/vVB9ylCb3KdimPxYFdtT5/BTXgcgL5Hczfd3C9TzWgLHY9eIR0yq?=
 =?us-ascii?q?QtSgATEtUN0xx8UCbFp6G9WnlhrDxTalA6cJl7yXA5w56qHc0GL3J8pnz3bG1b?=
 =?us-ascii?q?Muj18pQsZUMW2mh6h/9xXcBoLTkkWZkbqqeroY3CLX6GiDym+OtllCUAFsSaXF?=
 =?us-ascii?q?QWwfZkzOoNvk/EzCUaGhBa4nMgRbz86CMbVFatvugVVCR/fjPdDebnm1m2exAx?=
 =?us-ascii?q?aI27yNYJDre2UbwCXSFkwEnxoP8naBMAg0Hj2hrH7GDDxyCVLvZFvh/vRkp3Ol?=
 =?us-ascii?q?UEA41QGKYFdn17qu5BEVg+eRS/cS3rICpScgpC94HFe739LKFdWAoxBtc7lbYd?=
 =?us-ascii?q?M4+F1Hz37WtxRhPpy8KKBvnkIecwVyv0PpyxV3CoVBndI2rH8wywpyM6aY0FJH?=
 =?us-ascii?q?dzOXxp3wPrzXKm/v/BGgcaLW21fe0MqI9acL8vg3t1LjvASxHEo473pny8VV02?=
 =?us-ascii?q?eb5pjSFgUSVYz+U0kp+Bl6vb3VeTQ96J7O2n1qMqm0tSHC1sktBOskzBagYthe?=
 =?us-ascii?q?PLmFFA/0D80VGcyuJPY2lFiuaxIOJPpS+7IsP8O6a/uG37amPeZ9nD68kWtL+o?=
 =?us-ascii?q?F80kKW+Cp6Re7FxJIFw/Ce3guaWDbwllahssbrmY9aYTEeBHawyS/hBIRJfK19?=
 =?us-ascii?q?YZ4LCXuyI82w3th+nZ/tVGJC+165GlwG39WleRyMYFzn3A1czFgYrmajmSSl0T?=
 =?us-ascii?q?N0iTYprqyE0SzKwuTicgcHO2FRSGlji1fsPZa7j9QAUEe0aAgpkQOv5VzmyKhD?=
 =?us-ascii?q?uKR/M27TTF9Ifij3NW1jUrG8tqGfY85J854otSRXUOKhYVGVULL9oh0a0z/9EG?=
 =?us-ascii?q?ta3jw0azaqupDhlRxglG2dNGpzrGbeecxoxxfQ/sbcRf1S3joBXiV4kiPYBlu/?=
 =?us-ascii?q?P9mo+9WbiZHDv/u6V2KgUJ1TbCbqwZmBtCu9+W1lHxm/k+qvld3gFAgwyTX72M?=
 =?us-ascii?q?VyVSXUsBb8ZZHm1qSgPuJgZEVoBl7868xhF4F6k4swgowQ2HcAipWU+3oHjXn8?=
 =?us-ascii?q?MdFB1a3ia3oNQCYBw8TJ7wj9xE1jMnWJypr6VnqHw8ttfdm6Yn4M1SI74MBHE6?=
 =?us-ascii?q?OU7L1CnStorVu0twPRYf5hnjgDzfsi8mIVg+YMuAA11CWSHqgSHVVEPSzrjxmI?=
 =?us-ascii?q?6tG+rKZNa2q1f7m/ylF+ncy/A7GYuQ5TRmz5epg5EC9078V/Nk/M0XLp5oHlft?=
 =?us-ascii?q?nQccwcthmOnxjciOhVLYo7luAWiip/JWL9oXolxvYnjRxp2JG2pomGJH9r/KKk?=
 =?us-ascii?q?GR5YLTz1atgX+jHsi6Zeg8mX05quHpVnBjUEQp/oQei0HzIVsPTtLxyOHyEkqn?=
 =?us-ascii?q?eHBbrfGheS51x8oHLIF5CrKmubJH0Ezdh5QBmdJUpfgB0bXTkgn545EByqy9Ll?=
 =?us-ascii?q?cEtj+j8R4Vv4oANWyu10Lxn/TnvfpACwZzc2UpefKQRZ7hpY60fJK8Ce7f9zHy?=
 =?us-ascii?q?JF/p2ntgONMXeWZwBJDWEPR0yFCErvPrio5dnc7eeYAvCyIOfJYbWLseZeTeuH?=
 =?us-ascii?q?xYqz0ot6+DaBLsWOPn5/D/0ix0pMR3Z5F97CmzUITSwXmDnAb8qapBe65y12od?=
 =?us-ascii?q?qz8PXtWALz+4SPD6FePslo+xCzma2DLfKfhD5lKTZE0ZMB3X/Ix6Ye3F4RiCFu?=
 =?us-ascii?q?diOhEbcatS7KQ6LfhLVXDwMAay5oMMtI7qQ83hRCOMLBi9P10KJ4geAxC1tfSV?=
 =?us-ascii?q?PhncSpb9QQI26hLFPHGFqLNLOeKDLR3sH4erm8RqNQjelOsx2wuC2WE0viPjSF?=
 =?us-ascii?q?ijnoWAqjMeBKjCGHIhNevJuxfQpqCWjmVNjmcAG0MMdrjT0qxr05nm/KNW8ZMT?=
 =?us-ascii?q?Rmb0xBtKGf7SNGjfV5AGFB6ntlLe+ZmyeW9eXYK5AWsed1DSRwje5V/HM6y75N?=
 =?us-ascii?q?5iFeWPN1gDfSrsJpo1y+kuiA0DxnUB9PqjZNnI2KvEViNr/f9plPQnvE+BMN7W?=
 =?us-ascii?q?ONCxUFvddlC9vvu7xOxdjLjq78NDBC89eHtfcbUszVLt+XdWYgKV/iHzvRDRce?=
 =?us-ascii?q?ZSCkOHuZhEFHlvyWsHqPocsAp4DoiaYJH7taUkElU/AXEEJoGPQcL5ptGDApi7?=
 =?us-ascii?q?iWiIgP/3X65BzQQspdlpPKTPSfBbPoMjndxaVVZxoDwqjQJo0VMYv60EVmLFJ9?=
 =?us-ascii?q?mcCCG1LZdcJcvip7KAQzpQEF+396T2t12EPjZSum6XkUE/+/lxpwgQx7Jawx+z?=
 =?us-ascii?q?P8y1M2IEfWviw2kVl3ldi2ryqWdWvtLb/1V4ZKQyTzrQAaNZf6RU5UZAv6vk1i?=
 =?us-ascii?q?O3+QW7NJhbx8XXJ6lAjG/5BIHKgPHuV/fBYMyKTPNL0T2lNGp3D/yA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0C8BQB2fBlch0O0hNFkHAMfBAeBTgIBg?=
 =?us-ascii?q?meBAieDfYh4ixsBgiGXRiCBThgBARgNBgGHHSI0CQ0BAwEBAQEBAQIBEwEBAQo?=
 =?us-ascii?q?LCQgpIwxCFgGBXSKCZQMDAQIgCQYBRgYJAQEkAiYCAgNUGQUDgxoBggAFCqcCg?=
 =?us-ascii?q?S8ehA8BgQOEeAUTeIs0EQaBf4lxgjuCVwKQUJBUCYcPimmRV447ixECBAIEBQI?=
 =?us-ascii?q?UgUaCDk0jFUKBLQ4LAQw1XROCFBcSiEyFYB4BMgEBAQcCeQEBh3eFaQEB?=
X-IPAS-Result: =?us-ascii?q?A0C8BQB2fBlch0O0hNFkHAMfBAeBTgIBgmeBAieDfYh4ixs?=
 =?us-ascii?q?BgiGXRiCBThgBARgNBgGHHSI0CQ0BAwEBAQEBAQIBEwEBAQoLCQgpIwxCFgGBX?=
 =?us-ascii?q?SKCZQMDAQIgCQYBRgYJAQEkAiYCAgNUGQUDgxoBggAFCqcCgS8ehA8BgQOEeAU?=
 =?us-ascii?q?TeIs0EQaBf4lxgjuCVwKQUJBUCYcPimmRV447ixECBAIEBQIUgUaCDk0jFUKBL?=
 =?us-ascii?q?Q4LAQw1XROCFBcSiEyFYB4BMgEBAQcCeQEBh3eFaQEB?=
X-IronPort-AV: E=Sophos;i="5.56,370,1539673200"; 
   d="scan'208";a="44582228"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 18 Dec 2018 15:04:01 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727884AbeLRXD6 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 18 Dec 2018 18:03:58 -0500
Received: from terminus.zytor.com ([198.137.202.136]:58373 "EHLO
        terminus.zytor.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726956AbeLRXD5 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 18 Dec 2018 18:03:57 -0500
Received: from terminus.zytor.com (localhost [127.0.0.1])
        by terminus.zytor.com (8.15.2/8.15.2) with ESMTPS id wBIN3pID3002209
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=NO);
        Tue, 18 Dec 2018 15:03:51 -0800
Received: (from tipbot@localhost)
        by terminus.zytor.com (8.15.2/8.15.2/Submit) id wBIN3oKT3002206;
        Tue, 18 Dec 2018 15:03:50 -0800
Date: Tue, 18 Dec 2018 15:03:50 -0800
X-Authentication-Warning: terminus.zytor.com: tipbot set sender to tipbot@zytor.com using -f
From: tip-bot for Colin Ian King <tipbot@zytor.com>
Message-ID: <tip-32043fa065b51e0b1433e48d118821c71b5cd65d@git.kernel.org>
Cc: tyhicks@canonical.com, linux-kernel@vger.kernel.org,
        mingo@kernel.org, tglx@linutronix.de, colin.king@canonical.com,
        hpa@zytor.com
Reply-To: linux-kernel@vger.kernel.org, mingo@kernel.org,
          tyhicks@canonical.com, hpa@zytor.com, colin.king@canonical.com,
          tglx@linutronix.de
In-Reply-To: <20181218172956.1440-1-colin.king@canonical.com>
References: <20181218172956.1440-1-colin.king@canonical.com>
To: linux-tip-commits@vger.kernel.org
Subject: [tip:x86/urgent] x86/mtrr: Don't copy uninitialized gentry fields
 back to userspace
Git-Commit-ID: 32043fa065b51e0b1433e48d118821c71b5cd65d
X-Mailer: tip-git-log-daemon
Robot-ID: <tip-bot.git.kernel.org>
Robot-Unsubscribe: Contact <mailto:hpa@kernel.org> to get blacklisted from
 these emails
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Content-Type: text/plain; charset=UTF-8
Content-Disposition: inline
X-Spam-Status: No, score=-2.9 required=5.0 tests=ALL_TRUSTED,BAYES_00,
        T_DATE_IN_FUTURE_96_Q autolearn=ham autolearn_force=no version=3.4.2
X-Spam-Checker-Version: SpamAssassin 3.4.2 (2018-09-13) on terminus.zytor.com
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Commit-ID:  32043fa065b51e0b1433e48d118821c71b5cd65d
Gitweb:     https://git.kernel.org/tip/32043fa065b51e0b1433e48d118821c71b5cd65d
Author:     Colin Ian King <colin.king@canonical.com>
AuthorDate: Tue, 18 Dec 2018 17:29:56 +0000
Committer:  Thomas Gleixner <tglx@linutronix.de>
CommitDate: Wed, 19 Dec 2018 00:00:16 +0100

x86/mtrr: Don't copy uninitialized gentry fields back to userspace

Currently the copy_to_user of data in the gentry struct is copying
uninitiaized data in field _pad from the stack to userspace.

Fix this by explicitly memset'ing gentry to zero, this also will zero any
compiler added padding fields that may be in struct (currently there are
none).

Detected by CoverityScan, CID#200783 ("Uninitialized scalar variable")

Fixes: b263b31e8ad6 ("x86, mtrr: Use explicit sizing and padding for the 64-bit ioctls")
Signed-off-by: Colin Ian King <colin.king@canonical.com>
Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
Reviewed-by: Tyler Hicks <tyhicks@canonical.com>
Cc: security@kernel.org
Link: https://lkml.kernel.org/r/20181218172956.1440-1-colin.king@canonical.com


---
 arch/x86/kernel/cpu/mtrr/if.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/arch/x86/kernel/cpu/mtrr/if.c b/arch/x86/kernel/cpu/mtrr/if.c
index 2e173d47b450..4d36dcc1cf87 100644
--- a/arch/x86/kernel/cpu/mtrr/if.c
+++ b/arch/x86/kernel/cpu/mtrr/if.c
@@ -165,6 +165,8 @@ mtrr_ioctl(struct file *file, unsigned int cmd, unsigned long __arg)
 	struct mtrr_gentry gentry;
 	void __user *arg = (void __user *) __arg;
 
+	memset(&gentry, 0, sizeof(gentry));
+
 	switch (cmd) {
 	case MTRRIOC_ADD_ENTRY:
 	case MTRRIOC_SET_ENTRY:
