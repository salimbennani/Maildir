Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 08:53:02 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 25D33580213;
	Thu, 29 Nov 2018 16:35:28 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga002-1.jf.intel.com with ESMTP; 29 Nov 2018 16:35:28 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AfTJrrRKSIYOoSSIp4NmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgULPv9rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZQ8hfSSJBDIO/?=
 =?us-ascii?q?YYUBAeUOMuRXoJXyqVsVtRuzBxKhBP/txzJSmnP6waM33uYnHArb3AIgBdUOsH?=
 =?us-ascii?q?HModjpKKcSUPu1zKnVxjvZdfxWxS3955LVeR0mu/6MQbNwcdHRyUU1DwPKlEmQ?=
 =?us-ascii?q?qZb/MD6O2OUCrnSU4/B8WuKojm4qsgd8qSWsyMc0koTFmJ4Zx1Te+Slkzos5O8?=
 =?us-ascii?q?e0RFN4bNK4CpddtiOXO5NrTs4mR2xkojg2x70GtJKhcyUHyI4rywPQZvGBboOG?=
 =?us-ascii?q?+AjsVPyLLjd9nH9leKywhxK18UW41O38Wde70ExQoipGjNbMrHYN2ALX6sSdTf?=
 =?us-ascii?q?t95Eih1S6O1wDV9O5EPVg5mbTHJ5Ml2LI8i5QevVrZEiPrm0j6kLWae0Qm9+Sw?=
 =?us-ascii?q?7uToeLTmppuSN49ujQH+N7wjmsi+AeQ+LwgPUHGX+eei2735+032XrFKguQxkq?=
 =?us-ascii?q?jXtpDVO94bq7WnAw9azIkj8QyzDzS439QCm3kIMlZFdAiAj4jzNFHCOOr4Auun?=
 =?us-ascii?q?g1SwjDdrwOjLPrngApXOMHfPirjgfatm5k5YyQozy81f5p1OBrEAJvLzRlH+tN?=
 =?us-ascii?q?jCAhAlNAy0xv7tCM9h2YMGRWKPHqiZPbvSsVCS5+IvP/ODZIgPtDb9Nvgq/fju?=
 =?us-ascii?q?jXAilF8ZfKmp24YXaX+iEvRnJUWZfWTjgtMbHWgWuQo+SfTgiEeeXj5Le3ayQ6?=
 =?us-ascii?q?U86yk5CIKhE4jPXIOtgLuH3Ce9GZ1bfWRGClGKEXf1eISIQfYMaCSOIsB/ljwI?=
 =?us-ascii?q?T6SuS4gk1Ru2rg/116JnLvbI+i0frZ/szsN15+3UlREx7zB0Fd6S02OWQmFwn2?=
 =?us-ascii?q?MIQSI23a9lrUx8zFeDzbZ3g/hCGdNP4PNJVx8wNYTAwOxiF9DyRgXBc8+KSFm8?=
 =?us-ascii?q?RNWqGzUxTtMrzN8IbEZwANGijhHF3yq3DL4Zjb2LBJoo8q3C23j9Pdpyy3HD1K?=
 =?us-ascii?q?M5lVkpXtNPNXG6hq547wXcGpTGk1uHmKqwdaQTxijN9HydwmqIu01YVA1wUaDB?=
 =?us-ascii?q?XX0EYkvWrNL55l7NTrO0CLQnNBdBxtCGKqdQdtLpilBGTu/5ONvCe2Kxh3uwBR?=
 =?us-ascii?q?GQy7yRdoXqZXsS0D/dCEcelQAT5miJNQ4lCyelomLeCiFuFF31b0Pt9+l+tG20?=
 =?us-ascii?q?Tksuww6WaE1h0qK/+gQJivyEV/MTwrUEtT89qzV1GVa92M7WC9qApgZ7YKVQe9?=
 =?us-ascii?q?Q94E1D1WLYsQx9MYetL6Rjhl4YbgR2sFni1xRxCoVcj8cqqGkmwxZ1KaKdyFlB?=
 =?us-ascii?q?bS+X3YjsOr3LLWn/5Aqga6rI1VDRztmX+r0D5+8lq1r+pg6pEEki83J509RO13?=
 =?us-ascii?q?uc55PKDBcdUJ7rU0Y38QR6qK/eYiUn+4zU0nhsO7GusjDew9IpGPclyhG4ctZf?=
 =?us-ascii?q?LaOIDhP9H9cbBsiuMuMqnVepYwkAPOBT8q40Isyne+GH2K6tIOZvgjamgX5b74?=
 =?us-ascii?q?B610KG7zB8RfLQ35YZ3/GY2ROKVy39jFi9qM/3g51LZTYIEmq51yfkHo9RarRu?=
 =?us-ascii?q?cokRDWehPtO4xs95h57rQHNY8F+jB1Ub2M6mYxaSblr93RFO2kQTu3CohSy4zz?=
 =?us-ascii?q?lsmTEzsqWfxDDOw/jldBcfOm9LRXNujFf2LYivktAaWlOlbwwolBuj+Eb7yLJX?=
 =?us-ascii?q?pKV5L2nPX0hIezL6IH1lUqu1rrCCedJA6Is0sSVLV+SxeVKaRaTnoxsZ0CPjGH?=
 =?us-ascii?q?FSxCsheDGpuZX5nhp6h3ybLHtoqHrZeMdwxQrQ5dDGRP5R2CYGSzd8iTXNGle8?=
 =?us-ascii?q?ONyp982Ol5jfquC+S36hVppLfCjr14yAszG35W9rAR25hP2zntznEQ4n0S70zd?=
 =?us-ascii?q?VqVCPIrAribYnvzai1LeVnfkxwDl/m98V6Ap1+kpc3hJwI2ngVnJSV8WAHkWfu?=
 =?us-ascii?q?K9pb363+YWEJRT4Kxd7V/Qfk1FdiLnKP24L2SHGdztF9aNm9Z2Mcwjg94NxSCK?=
 =?us-ascii?q?eI8LxEmjN4ol+5rQLSe/dxhDkcxuU16H4Gne4JohEiwTuHArAdBkRYOS3slxKV?=
 =?us-ascii?q?79GxtqlXZWCvcaSu20p6h9yuELaCogREUnbjZpgiBTNw7tl4MF/UzH3z7YTkdM?=
 =?us-ascii?q?PRbN0JsB2UjgzAj/NUKJ8qkvoKhCxnOX/yvHE/yu47iwBu0o++vISdN2pt+6e5?=
 =?us-ascii?q?CAZCNjLpf8MT5i3tjaFGk8mNxY+vGZFhGigRUJvsUPKlCzYStfXhNwaTHzwwsH?=
 =?us-ascii?q?abGbzDHQCB7EdqtW7AE5euN3uPPnkW0c1iRAWBJExYmA0UXi81npsnGQCx3sDh?=
 =?us-ascii?q?bF115jMM5l77txtMzPhnNwLkX2fbpQeobCo0SZeFIBpX6AFC+1naMciE4u1vGC?=
 =?us-ascii?q?FY+4WrrBaRJWyDewRIEWYJV1SEBlDkI7mu/MTA/PKeBuakNPvOZrOOqeNFWveM?=
 =?us-ascii?q?xJKv1JZm/jmWOsWOOHliE+M02k5ZUX9lHMTZni0FSzYLmCLVc86buBC89zV3rs?=
 =?us-ascii?q?+h8fTrWwHv5YqVB7tRK9Vv/B+2jrmZN+6NnyZ0MjJY1pIKxX/Vx7kTxl8Siydy?=
 =?us-ascii?q?dzazFbQMrzLCTKXVmqVPFR4UdztzNNdU76I7xgRCI9Pbhcjv1rFmjv85EVNFVV?=
 =?us-ascii?q?36l8GtZMwKJXy9NVzdCEaKMrSGOSPEw8XtbaygTr1Qif1etwestjaDD0/jIjOD?=
 =?us-ascii?q?miH1VxCuNOFAlj2UMAZCt4G9bBltD3PuTNbnah29Ld92gic6wbwyhnPWK2EcNS?=
 =?us-ascii?q?JwfF9Krr2V9SlYmOlwG3Rd7np5KumJgyaY4PPeKpYTsPtrBDx7luNa4HsgzbtV?=
 =?us-ascii?q?4zpJRPh0mCvUs95vrEuqkuiJyjp7ThVOrixHi56MvUVnau3l8cxpX2vctCoE8W?=
 =?us-ascii?q?iUQ0ADocZ9Itf1sqFWxNHSkL61Ly1NpZacxcIYAsXOYO6OOnAsNQahTCbdCA4I?=
 =?us-ascii?q?VxawNG/emUEbm/aXoDndh5wwp4Lw0L0TAutSU0EdG/4REQJvEcYBLZN6T3Upna?=
 =?us-ascii?q?PNyIYk7Hy/oR2ZYMhItZnBUbrGDfzpKTudy71JdRABx7TQKYUVP5f8nUt4ZQ8+?=
 =?us-ascii?q?1LjKHE/ZRphipiBgfgk5ug0Z7Hd6XkU32kT4dhmq5n4DU/K5yFp+qAJlZuJl3z?=
 =?us-ascii?q?Dr+1otbg7IrTA3lmE1kNbojTmcdTn3aqG9QdcSQw/9rUN5AIL9TAd4d0XmmEV+?=
 =?us-ascii?q?P3HWVrRejrZ6XWlxjUnXvp4ZStBGSqgRSQMR3vHfX/w0y10U/iy7xFRHo/PMFY?=
 =?us-ascii?q?FrvBQmetinqHcWiFErV8I8OaGFfPkB9VNXnK/b+3bwju0=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BBAABohQBch0O0hNFlDg4BAQEEAQEHB?=
 =?us-ascii?q?AEBgVQEAQELAYNZEieDeYh3iyqBYAglFJkjLBMBhECDNCI3Bg0BAwEBAQEBAQI?=
 =?us-ascii?q?BEwEBAQgNCQgpIwyCNiQBgmIBAQEDAQIPEQQRCAEBNwEFCQEBChgCAiYCAgNUB?=
 =?us-ascii?q?gEMBgIBAQEdgn+CAgWccD0CimlwfDOCdgEBBYEFAYE9hGcIgQuJb4EcgVc/gTg?=
 =?us-ascii?q?Mgl+FAYMEgleJLYY/NJAFBwKCHQSPCx6RHIh4kTKBdzMaI4M8ghsMFxKDOIoYB?=
 =?us-ascii?q?AFXHwExgQUBAY05AQE?=
X-IPAS-Result: =?us-ascii?q?A0BBAABohQBch0O0hNFlDg4BAQEEAQEHBAEBgVQEAQELAYN?=
 =?us-ascii?q?ZEieDeYh3iyqBYAglFJkjLBMBhECDNCI3Bg0BAwEBAQEBAQIBEwEBAQgNCQgpI?=
 =?us-ascii?q?wyCNiQBgmIBAQEDAQIPEQQRCAEBNwEFCQEBChgCAiYCAgNUBgEMBgIBAQEdgn+?=
 =?us-ascii?q?CAgWccD0CimlwfDOCdgEBBYEFAYE9hGcIgQuJb4EcgVc/gTgMgl+FAYMEgleJL?=
 =?us-ascii?q?YY/NJAFBwKCHQSPCx6RHIh4kTKBdzMaI4M8ghsMFxKDOIoYBAFXHwExgQUBAY0?=
 =?us-ascii?q?5AQE?=
X-IronPort-AV: E=Sophos;i="5.56,296,1539673200"; 
   d="scan'208";a="55480649"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 16:35:26 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727143AbeK3Lmq (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 30 Nov 2018 06:42:46 -0500
Received: from esa1.hgst.iphmx.com ([68.232.141.245]:29341 "EHLO
        esa1.hgst.iphmx.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726451AbeK3Lmq (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 30 Nov 2018 06:42:46 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple;
  d=wdc.com; i=@wdc.com; q=dns/txt; s=dkim.wdc.com;
  t=1543538122; x=1575074122;
  h=subject:to:cc:references:from:message-id:date:
   mime-version:in-reply-to:content-transfer-encoding;
  bh=dFl/zZLgSDqemqPv+7eT/OSLd89e2+sy3YtrTSVl/Ck=;
  b=j8HSCdb/3EJX/S4Eu+xDM/F0Rtuc/cSHAubMnIUCg+a28Ujx2+oXLrMu
   BcmtVQWKtLunIGUdPXPx3FkLfejCQ0mlAmGkYZh8mydY9OTWxln/yFRV0
   NBcb7wuLQ4dFt4gB/jCi9SvEBrHvttwyuLMHi95rCQVJQgJcNuS7dNP1x
   IGWlinR4mwjPdz4qOUpgS/dx82OL3CKz4wqpo7H4o4z6790UnUk82PhQU
   85V/MEiyi3sFnUe+YxG65KVoV+bbOJeFkXVq+19jvYSC+pr1M+dcYzGqK
   y46h56m2LSr3lexiPXC83jg/ikkDejqe2sVii7I8Rcq6O12kI5BbgxwHy
   g==;
X-IronPort-AV: E=Sophos;i="5.56,296,1539619200"; 
   d="scan'208";a="200043557"
Received: from uls-op-cesaip01.wdc.com (HELO uls-op-cesaep01.wdc.com) ([199.255.45.14])
  by ob1.hgst.iphmx.com with ESMTP; 30 Nov 2018 08:35:22 +0800
Received: from uls-op-cesaip01.wdc.com ([10.248.3.36])
  by uls-op-cesaep01.wdc.com with ESMTP; 29 Nov 2018 16:17:47 -0800
Received: from c02v91rdhtd5.sdcorp.global.sandisk.com (HELO [10.111.72.98]) ([10.111.72.98])
  by uls-op-cesaip01.wdc.com with ESMTP; 29 Nov 2018 16:35:22 -0800
Subject: Re: [PATCH v2 1/4] irqchip: sifive-plic: Pre-compute context hart
 base and enable base
To: Anup Patel <anup@brainfault.org>,
        Palmer Dabbelt <palmer@sifive.com>,
        Albert Ou <aou@eecs.berkeley.edu>,
        Daniel Lezcano <daniel.lezcano@linaro.org>,
        Thomas Gleixner <tglx@linutronix.de>,
        Jason Cooper <jason@lakedaemon.net>,
        Marc Zyngier <marc.zyngier@arm.com>
Cc: Christoph Hellwig <hch@infradead.org>,
        "linux-riscv@lists.infradead.org" <linux-riscv@lists.infradead.org>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>
References: <20181127100317.12809-1-anup@brainfault.org>
 <20181127100317.12809-2-anup@brainfault.org>
From: Atish Patra <atish.patra@wdc.com>
Message-ID: <b6ff2593-9113-9b95-ade5-09e7e9fa1be5@wdc.com>
Date: Thu, 29 Nov 2018 16:35:21 -0800
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:60.0)
 Gecko/20100101 Thunderbird/60.3.0
MIME-Version: 1.0
In-Reply-To: <20181127100317.12809-2-anup@brainfault.org>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Language: en-US
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 11/27/18 2:03 AM, Anup Patel wrote:
> This patch does following optimizations:
> 1. Pre-compute hart base for each context handler
> 2. Pre-compute enable base for each context handler
> 3. Have enable lock for each context handler instead
> of global plic_toggle_lock
> 
> Signed-off-by: Anup Patel <anup@brainfault.org>
> ---
>   drivers/irqchip/irq-sifive-plic.c | 41 +++++++++++++------------------
>   1 file changed, 17 insertions(+), 24 deletions(-)
> 
> diff --git a/drivers/irqchip/irq-sifive-plic.c b/drivers/irqchip/irq-sifive-plic.c
> index 357e9daf94ae..56fce648a901 100644
> --- a/drivers/irqchip/irq-sifive-plic.c
> +++ b/drivers/irqchip/irq-sifive-plic.c
> @@ -60,36 +60,24 @@ static void __iomem *plic_regs;
>   struct plic_handler {
>   	bool			present;
>   	int			ctxid;
> +	void __iomem		*hart_base;
> +	raw_spinlock_t		enable_lock;
> +	void __iomem		*enable_base;

It should be u32. Otherwise, plic_toggle calculates incorrect address 
and it does not boot on Unlheased.

>   };
>   static DEFINE_PER_CPU(struct plic_handler, plic_handlers);
>   
> -static inline void __iomem *plic_hart_offset(int ctxid)
> +static inline void plic_toggle(struct plic_handler *handler,
> +				int hwirq, int enable)
>   {
> -	return plic_regs + CONTEXT_BASE + ctxid * CONTEXT_PER_HART;
> -}
> -
> -static inline u32 __iomem *plic_enable_base(int ctxid)
> -{
> -	return plic_regs + ENABLE_BASE + ctxid * ENABLE_PER_HART;
> -}
> -
> -/*
> - * Protect mask operations on the registers given that we can't assume that
> - * atomic memory operations work on them.
> - */

Should we keep the comment for enable_lock ?

> -static DEFINE_RAW_SPINLOCK(plic_toggle_lock);
> -
> -static inline void plic_toggle(int ctxid, int hwirq, int enable)
> -{
> -	u32 __iomem *reg = plic_enable_base(ctxid) + (hwirq / 32);
> +	u32 __iomem *reg = handler->enable_base + (hwirq / 32);
>   	u32 hwirq_mask = 1 << (hwirq % 32);
>   
> -	raw_spin_lock(&plic_toggle_lock);
> +	raw_spin_lock(&handler->enable_lock);
>   	if (enable)
>   		writel(readl(reg) | hwirq_mask, reg);
>   	else
>   		writel(readl(reg) & ~hwirq_mask, reg);
> -	raw_spin_unlock(&plic_toggle_lock);
> +	raw_spin_unlock(&handler->enable_lock);
>   }
>   
>   static inline void plic_irq_toggle(struct irq_data *d, int enable)
> @@ -101,7 +89,7 @@ static inline void plic_irq_toggle(struct irq_data *d, int enable)
>   		struct plic_handler *handler = per_cpu_ptr(&plic_handlers, cpu);
>   
>   		if (handler->present)
> -			plic_toggle(handler->ctxid, d->hwirq, enable);
> +			plic_toggle(handler, d->hwirq, enable);
>   	}
>   }
>   
> @@ -150,7 +138,7 @@ static struct irq_domain *plic_irqdomain;
>   static void plic_handle_irq(struct pt_regs *regs)
>   {
>   	struct plic_handler *handler = this_cpu_ptr(&plic_handlers);
> -	void __iomem *claim = plic_hart_offset(handler->ctxid) + CONTEXT_CLAIM;
> +	void __iomem *claim = handler->hart_base + CONTEXT_CLAIM;
>   	irq_hw_number_t hwirq;
>   
>   	WARN_ON_ONCE(!handler->present);
> @@ -240,11 +228,16 @@ static int __init plic_init(struct device_node *node,
>   		handler = per_cpu_ptr(&plic_handlers, cpu);
>   		handler->present = true;
>   		handler->ctxid = i;
> +		handler->hart_base =
> +			plic_regs + CONTEXT_BASE + i * CONTEXT_PER_HART;
> +		raw_spin_lock_init(&handler->enable_lock);
> +		handler->enable_base =
> +			plic_regs + ENABLE_BASE + i * ENABLE_PER_HART;
>   
>   		/* priority must be > threshold to trigger an interrupt */
> -		writel(0, plic_hart_offset(i) + CONTEXT_THRESHOLD);
> +		writel(0, handler->hart_base + CONTEXT_THRESHOLD);
>   		for (hwirq = 1; hwirq <= nr_irqs; hwirq++)
> -			plic_toggle(i, hwirq, 0);
> +			plic_toggle(handler, hwirq, 0);
>   		nr_mapped++;
>   	}
>   
> 

