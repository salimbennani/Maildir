Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 11:05:46 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 106EF580213;
	Thu, 29 Nov 2018 17:39:52 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by fmsmga002-1.fm.intel.com with ESMTP; 29 Nov 2018 17:39:51 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A/DJBbRKqMwtSg3QiWNmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgULPv9rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZQ8hfSSJBDIO/?=
 =?us-ascii?q?YYUBAeUOMuRXoJXyqVsVtRuzBxKhBP/txzJSmnP6waM33uYnHArb3AIgBdUOsH?=
 =?us-ascii?q?HModjpKKcSUPu1zKnVxjvZdfxWxS3955LVeR0mu/6MQbNwcdHRyUU1DwPKlEmQ?=
 =?us-ascii?q?qZb/MD6O2OUCrnSU4/B8WuKojm4qsgd8qSWsyMc0koTFmJ4Zx1Te+Slkzos5O8?=
 =?us-ascii?q?e0RFN4bNK4CpddtiOXO5NrTs4mR2xkojg2x70GtJKhcyUHyI4rywPQZvGBboOG?=
 =?us-ascii?q?+AjsVPyLLjd9nH9leKywhxK18UW41O38Wde70ExQoipGjNbMrHYN2ALX6sSdTf?=
 =?us-ascii?q?t95Eih1S6O1wDV9O5EPVg5mbTHJ5Ml2LI8i5QevVrZEiPrm0j6kLWae0Qm9+Sw?=
 =?us-ascii?q?7uToeLTmppuSN49ujQH+N7wjmsi+AeQ+LwgPUHGX+eei2735+032XrFKguQxkq?=
 =?us-ascii?q?jXtpDVO94bq7WnAw9azIkj8QyzDzS439QCm3kIMlZFdAiAj4jzNFHCOOr4Auun?=
 =?us-ascii?q?g1SwjDdrwOjLPrngApXOMHfPirjgfatm5k5YyQozy81f5p1OBrEAJvLzRlH+tN?=
 =?us-ascii?q?jCAhAlNAy0xv7tCM9h2YMGRWKPHqiZPbvSsVCS5+IvP/ODZIgPtDb9Nvgq/fju?=
 =?us-ascii?q?jXAilF8ZfKmp24YXaX+iEvRnJUWZfWTjgtMbHWgWuQo+SfTgiEeeXj5Le3ayQ6?=
 =?us-ascii?q?U86yk5CIKhE4jPXIOtgLuH3Ce9GZ1bfWRGClGKEXf1eISIQfYMaCSOIsB/ljwI?=
 =?us-ascii?q?T6SuS4gk1Ru2rg/116JnLvbI+i0frZ/szsN15+3UlREx7zB0Fd6S02OWQmFwn2?=
 =?us-ascii?q?MIQSI23a9lrUx8zFeDzbZ3g/hCGdNP4PNJVx8wNYTAwOxiF9DyRgXBc8+KSFm8?=
 =?us-ascii?q?RNWqGzUxTtMrzN8IbEZwANGijhHF3yq3DL4Zjb2LBJoo8q3C23j9Pdpyy3HD1K?=
 =?us-ascii?q?M5lVkpXtNPNXG6hq547wXcGpTGk1uHmKqwdaQTxijN9HydwmqIu01YVA1wUaDB?=
 =?us-ascii?q?XX0EYkvWrNL55l7NTrO0CLQnNBdBxtCGKqdQdtLpilBGTu/5ONvCe2Kxh3uwBR?=
 =?us-ascii?q?GQy7yRdoXqZXsS0D/dCEcelQAT5miJNQ4lCyelomLeCiFuFF31b0Pt9+l+tG20?=
 =?us-ascii?q?Tksuww6WaE1h0qK/+gQJivyEV/MTwrUEtT89qzV1GVa92M7WC9qApgZ7YKVQe9?=
 =?us-ascii?q?Q94E1D1WLYsQx9MYetL6Rjhl4YbgR2sFni1xRxCoVcj8cqqGkmwxZ1KaKdyFlB?=
 =?us-ascii?q?bS+X3YjsOr3LLWn/5Aqga6rI1VDRztmX+r0D5+8lq1r+pg6pEEki83J509RO13?=
 =?us-ascii?q?uc55PKDBcdUJ7rU0Y38QR6qK/eYiUn+4zU0nhsO7GusjDew9IpGPclyhG4ctZf?=
 =?us-ascii?q?LaOIDhP9H9cbBsiuMuMqnVepYwkAPOBT8q40Isyne+GH2K6tIOZvgjamgX5b74?=
 =?us-ascii?q?B610KG7zB8RfLQ35YZ3/GY2ROKVy39jFi9qM/3g51LZTYIEmq51yfkHo9RarRu?=
 =?us-ascii?q?cokRDWehPtO4xs95h57rQHNY8F+jB1Ub2M6mYxaSblr93RFO2kQTu3CohSy4zz?=
 =?us-ascii?q?lsmTEzsqWfxDDOw/jldBcfOm9LRXNujFf2LYivktAaWlOlbwwolBuj+Eb7yLJX?=
 =?us-ascii?q?pKV5L2nPX0hIezL6IH1lUqu1rrCCedJA6Is0sSVLV+SxeVKaRaTnoxsZ0CPjGH?=
 =?us-ascii?q?FSxCsheDGpuZX5nhp6h3ybLHtoqHrZeMdwxQrQ5dDGRP5R2CYGSzd8iTXNGle8?=
 =?us-ascii?q?ONyp982Ol5jfquC+S36hVppLfCjr14yAszG35W9rAR25hP2zntznEQ4n0S70zd?=
 =?us-ascii?q?VqVCPIrAribYnvzai1LeVnfkxwDl/m98V6Ap1+kpc3hJwI2ngVnJSV8WAHkWfu?=
 =?us-ascii?q?K9pb363+YWEJRT4Kxd7V/Qfk1FdiLnKP24L2SHGdztF9aNm9Z2Mcwjg94NxSCK?=
 =?us-ascii?q?eI8LxEmjN4ol+5rQLSe/dxhDkcxuU16H4Gne4JohEiwTuHArAdBkRYOS3slxKV?=
 =?us-ascii?q?79GxtqlXZWCvcaSu20p6h9yuELaCogREUnbjZpgiBTNw7tl4MF/UzH3z7YTkdM?=
 =?us-ascii?q?PRbN0JsB2UjgzAj/NUKJ8qkvoKhCxnOX/yvHE/yu47iwBu0o++vISdN2pt+6e5?=
 =?us-ascii?q?CAZCNjLpf8MT5i3tjaFGk8mNxY+vGZFhGigRUJvsUPKlCzYStfXhNwaTHzwwsH?=
 =?us-ascii?q?abGbzDHQCB7EdqtW7AE5euN3uPPnkW0c1iRAWBJExYmA0UXi81npsnGQCx3sDh?=
 =?us-ascii?q?bF115jMM5l77txtMzPhnNwLkX2fbpQeobCo0SZeFIBpX6AFC+1naMciE4u1vGC?=
 =?us-ascii?q?FY+4WrrBaRJWyDewRIEWYJV1SEBlDkI7mu/MTA/PKeBuakNPvOZrOOqeNFWveM?=
 =?us-ascii?q?xJKv1JZm/jmWOsWOOHliE+M02k5ZUX9lHMTZni0FSzYLmCLVc86buBC89zV3rs?=
 =?us-ascii?q?+h8fTrWwHv5YqVB7tRK9Vv/B+2jrmZN+6NnyZ0MjJY1pIKxX/Vx7kTxl8Siydy?=
 =?us-ascii?q?dzazFbQMrzLCTKXVmqVPFR4UdztzNNdU76I7xgRCI9Pbhcjv1rFmjv85EVNFVV?=
 =?us-ascii?q?36l8GtZMwKJXy9NVzdCEaKMrSGOSPEw8XtbaygTr1Qif1etwestjaDD0/jIjOD?=
 =?us-ascii?q?miH1VxCuNOFAlj2UMAZCt4G9bBltD3PuTNbnah29Ld92gic6wbwyhnPWK2EcNS?=
 =?us-ascii?q?JwfF9Krr2V9SlYmOlwG3Rd7np5KumJgyaY4PPeKpYTsPtrBDx7luNa4HsgzbtV?=
 =?us-ascii?q?4zpJRPh0mCvUs95vrEuqkuiJyjp7ThVOrixHi56MvUVnau3l8cxpX2vctCoE8W?=
 =?us-ascii?q?iUQ0ADocZ9Itf1sqFWxNHSkL61Ly1NpZacxcIYAsXOYO6OOnAsNQahTCbdCA4I?=
 =?us-ascii?q?VxawNG/emUEbm/aXoDndh5wwp4Lw0L0TAutSU0EdG/4REQJvEcYBLZN6T3Upna?=
 =?us-ascii?q?PNyIYk7Hy/oR2ZYMhItZnBUbrGDfzpKTudy71JdRABx7TQKYUVP5f8nUt4ZQ8+?=
 =?us-ascii?q?1LjKHE/ZRphipiBgfgk5ug0Z7Hd6XkU32kT4dhmq5n4DU/K5yFp+qAJlZuJl3z?=
 =?us-ascii?q?Dr+1otbg7IrTA3lmE1kNbojTmcdTn3aqG9QdcSQw/9rUN5AIL9TAd4d0XmmEV+?=
 =?us-ascii?q?P3HWVrRejrZ6XWlxjUnXvp4ZStBGSqgRSQMR3vHfX/w0y10U/iy7xFRHo/PMFY?=
 =?us-ascii?q?FrvBQmetinqHcWiFErV8I8OaGFfPkB9VNXnK/b+3bwju0=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AtAACTlABch0O0hNFkDg8BAQUBBwUBg?=
 =?us-ascii?q?VMGAQsBg1kSJ4N5iHeLKoFgLRSXMBSBXywTAYRAgzQiNgcNAQMBAQEBAQECARM?=
 =?us-ascii?q?BAQEIDQkIKSMMgjYkAYJiAQEBAwECDxEEEQgBATcBBQkBAQoYAgImAgIDVAYBD?=
 =?us-ascii?q?AYCAQEBHYJ/ggIFnFg9AoppcHwzgnYBAQWBBQGBPYRpCIELiW+BHIFXP4ERJ4J?=
 =?us-ascii?q?rhGkYgwSCV4kthj80kAUHAoIdBI8LHpEcLIhMkSMCggQzGiODPIIbDBeDSooYB?=
 =?us-ascii?q?AFXHwExgQUBAY05AQE?=
X-IPAS-Result: =?us-ascii?q?A0AtAACTlABch0O0hNFkDg8BAQUBBwUBgVMGAQsBg1kSJ4N?=
 =?us-ascii?q?5iHeLKoFgLRSXMBSBXywTAYRAgzQiNgcNAQMBAQEBAQECARMBAQEIDQkIKSMMg?=
 =?us-ascii?q?jYkAYJiAQEBAwECDxEEEQgBATcBBQkBAQoYAgImAgIDVAYBDAYCAQEBHYJ/ggI?=
 =?us-ascii?q?FnFg9AoppcHwzgnYBAQWBBQGBPYRpCIELiW+BHIFXP4ERJ4JrhGkYgwSCV4kth?=
 =?us-ascii?q?j80kAUHAoIdBI8LHpEcLIhMkSMCggQzGiODPIIbDBeDSooYBAFXHwExgQUBAY0?=
 =?us-ascii?q?5AQE?=
X-IronPort-AV: E=Sophos;i="5.56,297,1539673200"; 
   d="scan'208";a="55487090"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 17:39:49 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727344AbeK3MrT (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 30 Nov 2018 07:47:19 -0500
Received: from esa3.hgst.iphmx.com ([216.71.153.141]:36461 "EHLO
        esa3.hgst.iphmx.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726161AbeK3MrT (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 30 Nov 2018 07:47:19 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple;
  d=wdc.com; i=@wdc.com; q=dns/txt; s=dkim.wdc.com;
  t=1543541987; x=1575077987;
  h=subject:to:cc:references:from:message-id:date:
   mime-version:in-reply-to:content-transfer-encoding;
  bh=nuBQjkoNBHnA8e5JkbiKnr8fvMi+LuXfed+OuvM9GEI=;
  b=rVIqTaLlgU3ZbDtnPVDdeJvD5kYBAjaxC60KsX04xmISdfM0DHBdA0lf
   /psBHMr5KylcP6N8+rM8U/6XleDz69F8fLxEpVGzLqwSP6CxRNSUvuKpt
   VZrvbKqyLqlamO9wUA9Z7dknkTagE1+AaVckcA9sW8/tIcpG3W8ghszEf
   2IzCQNNtWP+u+5BcjwNlXqloJzGt16NWWGDIyAtcHJC+BgdGLxXwI3GEO
   di3n5gsDW1RVDnMwYoQipayhxubAgVhbdfOcEEu0BDzf2Ar5DM7zXlALT
   Gr58pipwHTpIu1vVKVVjwLHO6BsMk6BH1WB5rp2as8z4iWTdfsgM7GFAc
   g==;
X-IronPort-AV: E=Sophos;i="5.56,297,1539619200"; 
   d="scan'208";a="100288448"
Received: from h199-255-45-14.hgst.com (HELO uls-op-cesaep01.wdc.com) ([199.255.45.14])
  by ob1.hgst.iphmx.com with ESMTP; 30 Nov 2018 09:39:46 +0800
Received: from uls-op-cesaip02.wdc.com ([10.248.3.37])
  by uls-op-cesaep01.wdc.com with ESMTP; 29 Nov 2018 17:22:11 -0800
Received: from c02v91rdhtd5.sdcorp.global.sandisk.com (HELO [10.111.72.98]) ([10.111.72.98])
  by uls-op-cesaip02.wdc.com with ESMTP; 29 Nov 2018 17:39:46 -0800
Subject: Re: [PATCH v2 2/4] irqchip: sifive-plic: More flexible
 plic_irq_toggle()
To: Anup Patel <anup@brainfault.org>,
        Palmer Dabbelt <palmer@sifive.com>,
        Albert Ou <aou@eecs.berkeley.edu>,
        Daniel Lezcano <daniel.lezcano@linaro.org>,
        Thomas Gleixner <tglx@linutronix.de>,
        Jason Cooper <jason@lakedaemon.net>,
        Marc Zyngier <marc.zyngier@arm.com>
Cc: Christoph Hellwig <hch@infradead.org>,
        "linux-riscv@lists.infradead.org" <linux-riscv@lists.infradead.org>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>
References: <20181127100317.12809-1-anup@brainfault.org>
 <20181127100317.12809-3-anup@brainfault.org>
From: Atish Patra <atish.patra@wdc.com>
Message-ID: <25c2fafc-a479-911f-a7df-704108da5dc7@wdc.com>
Date: Thu, 29 Nov 2018 17:39:45 -0800
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:60.0)
 Gecko/20100101 Thunderbird/60.3.0
MIME-Version: 1.0
In-Reply-To: <20181127100317.12809-3-anup@brainfault.org>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Language: en-US
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 11/27/18 2:03 AM, Anup Patel wrote:
> We make plic_irq_toggle() more generic so that we can enable/disable
> hwirq for given cpumask. This generic plic_irq_toggle() will be
> eventually used to implement set_affinity for PLIC driver.
> 
> Signed-off-by: Anup Patel <anup@brainfault.org>
> ---
>   drivers/irqchip/irq-sifive-plic.c | 79 +++++++++++++++----------------
>   1 file changed, 39 insertions(+), 40 deletions(-)
> 
> diff --git a/drivers/irqchip/irq-sifive-plic.c b/drivers/irqchip/irq-sifive-plic.c
> index 56fce648a901..95b4b92ca9b8 100644
> --- a/drivers/irqchip/irq-sifive-plic.c
> +++ b/drivers/irqchip/irq-sifive-plic.c
> @@ -55,19 +55,26 @@
>   #define     CONTEXT_THRESHOLD		0x00
>   #define     CONTEXT_CLAIM		0x04
>   
> -static void __iomem *plic_regs;
> -
>   struct plic_handler {
>   	bool			present;
> -	int			ctxid;
>   	void __iomem		*hart_base;
>   	raw_spinlock_t		enable_lock;
>   	void __iomem		*enable_base;
>   };
> +
>   static DEFINE_PER_CPU(struct plic_handler, plic_handlers);
>   
> -static inline void plic_toggle(struct plic_handler *handler,
> -				int hwirq, int enable)
> +struct plic_hw {
> +	u32			nr_irqs;
> +	u32			nr_handlers;
> +	u32			nr_mapped;

Why these three are moved inside a structure? I don't see them being 
used outside plic_init. Am I missing something ?

> +	void __iomem		*regs;
> +	struct irq_domain	*irqdomain;
> +};
> +
> +static struct plic_hw plic;
> +
> +static void plic_toggle(struct plic_handler *handler, int hwirq, int enable)
>   {
>   	u32 __iomem *reg = handler->enable_base + (hwirq / 32);
>   	u32 hwirq_mask = 1 << (hwirq % 32);
> @@ -80,27 +87,23 @@ static inline void plic_toggle(struct plic_handler *handler,
>   	raw_spin_unlock(&handler->enable_lock);
>   }
>   
> -static inline void plic_irq_toggle(struct irq_data *d, int enable)
> +static void plic_irq_toggle(const struct cpumask *mask, int hwirq, int enable)
>   {
>   	int cpu;
>   
> -	writel(enable, plic_regs + PRIORITY_BASE + d->hwirq * PRIORITY_PER_ID);
> -	for_each_cpu(cpu, irq_data_get_affinity_mask(d)) {
> -		struct plic_handler *handler = per_cpu_ptr(&plic_handlers, cpu);
> -
> -		if (handler->present)
> -			plic_toggle(handler, d->hwirq, enable);
> -	}
> +	writel(enable, plic.regs + PRIORITY_BASE + hwirq * PRIORITY_PER_ID);
> +	for_each_cpu(cpu, mask)
> +		plic_toggle(per_cpu_ptr(&plic_handlers, cpu), hwirq, enable);

Any specific reason to remove the handler->present check.

Moreover, only this part matches commit text. Most of the other changes 
looks like cosmetic cleanup because of variable is moved to a structure.
May be separate patch for those changes if they are are required at all.

>   }
>   
>   static void plic_irq_enable(struct irq_data *d)
>   {
> -	plic_irq_toggle(d, 1);
> +	plic_irq_toggle(irq_data_get_affinity_mask(d), d->hwirq, 1);
>   }
>   
>   static void plic_irq_disable(struct irq_data *d)
>   {
> -	plic_irq_toggle(d, 0);
> +	plic_irq_toggle(irq_data_get_affinity_mask(d), d->hwirq, 0);
>   }
>   
>   static struct irq_chip plic_chip = {
> @@ -127,8 +130,6 @@ static const struct irq_domain_ops plic_irqdomain_ops = {
>   	.xlate		= irq_domain_xlate_onecell,
>   };
>   
> -static struct irq_domain *plic_irqdomain;
> -
>   /*
>    * Handling an interrupt is a two-step process: first you claim the interrupt
>    * by reading the claim register, then you complete the interrupt by writing
> @@ -145,7 +146,7 @@ static void plic_handle_irq(struct pt_regs *regs)
>   
>   	csr_clear(sie, SIE_SEIE);
>   	while ((hwirq = readl(claim))) {
> -		int irq = irq_find_mapping(plic_irqdomain, hwirq);
> +		int irq = irq_find_mapping(plic.irqdomain, hwirq);
>   
>   		if (unlikely(irq <= 0))
>   			pr_warn_ratelimited("can't find mapping for hwirq %lu\n",
> @@ -174,36 +175,34 @@ static int plic_find_hart_id(struct device_node *node)
>   static int __init plic_init(struct device_node *node,
>   		struct device_node *parent)
>   {
> -	int error = 0, nr_handlers, nr_mapped = 0, i;
> -	u32 nr_irqs;
> +	int error = 0, i;
>   
> -	if (plic_regs) {
> +	if (plic.regs) {
>   		pr_warn("PLIC already present.\n");
>   		return -ENXIO;
>   	}
>   
> -	plic_regs = of_iomap(node, 0);
> -	if (WARN_ON(!plic_regs))
> +	plic.regs = of_iomap(node, 0);
> +	if (WARN_ON(!plic.regs))
>   		return -EIO;
>   
>   	error = -EINVAL;
> -	of_property_read_u32(node, "riscv,ndev", &nr_irqs);
> -	if (WARN_ON(!nr_irqs))
> +	of_property_read_u32(node, "riscv,ndev", &plic.nr_irqs);
> +	if (WARN_ON(!plic.nr_irqs))
>   		goto out_iounmap;
>   
> -	nr_handlers = of_irq_count(node);
> -	if (WARN_ON(!nr_handlers))
> +	plic.nr_handlers = of_irq_count(node);
> +	if (WARN_ON(!plic.nr_handlers))
>   		goto out_iounmap;
> -	if (WARN_ON(nr_handlers < num_possible_cpus()))
> +	if (WARN_ON(plic.nr_handlers < num_possible_cpus()))
>   		goto out_iounmap;
>   
> -	error = -ENOMEM;
> -	plic_irqdomain = irq_domain_add_linear(node, nr_irqs + 1,
> -			&plic_irqdomain_ops, NULL);
> -	if (WARN_ON(!plic_irqdomain))
> +	plic.irqdomain = irq_domain_add_linear(node, plic.nr_irqs + 1,
> +						&plic_irqdomain_ops, NULL);
> +	if (WARN_ON(!plic.irqdomain))
>   		goto out_iounmap;
>   

Should we return EINVAL if irq_domain_add_linear fails ? Earlier, it was 
returning ENOMEM.

> -	for (i = 0; i < nr_handlers; i++) {
> +	for (i = 0; i < plic.nr_handlers; i++) {
>   		struct of_phandle_args parent;
>   		struct plic_handler *handler;
>   		irq_hw_number_t hwirq;
> @@ -227,27 +226,27 @@ static int __init plic_init(struct device_node *node,
>   		cpu = riscv_hartid_to_cpuid(hartid);
>   		handler = per_cpu_ptr(&plic_handlers, cpu);
>   		handler->present = true;
> -		handler->ctxid = i;


The previous patch removed all the usage of ctxid. So this line also can 
be included in that patch as well to make it more coherent.


Regards,
Atish
>   		handler->hart_base =
> -			plic_regs + CONTEXT_BASE + i * CONTEXT_PER_HART;
> +			plic.regs + CONTEXT_BASE + i * CONTEXT_PER_HART;
>   		raw_spin_lock_init(&handler->enable_lock);
>   		handler->enable_base =
> -			plic_regs + ENABLE_BASE + i * ENABLE_PER_HART;
> +			plic.regs + ENABLE_BASE + i * ENABLE_PER_HART;
>   
>   		/* priority must be > threshold to trigger an interrupt */
>   		writel(0, handler->hart_base + CONTEXT_THRESHOLD);
> -		for (hwirq = 1; hwirq <= nr_irqs; hwirq++)
> +		for (hwirq = 1; hwirq <= plic.nr_irqs; hwirq++)
>   			plic_toggle(handler, hwirq, 0);
> -		nr_mapped++;
> +
> +		plic.nr_mapped++;
>   	}
>   
>   	pr_info("mapped %d interrupts to %d (out of %d) handlers.\n",
> -		nr_irqs, nr_mapped, nr_handlers);
> +		plic.nr_irqs, plic.nr_mapped, plic.nr_handlers);
>   	set_handle_irq(plic_handle_irq);
>   	return 0;
>   
>   out_iounmap:
> -	iounmap(plic_regs);
> +	iounmap(plic.regs);
>   	return error;
>   }
>   
> 

