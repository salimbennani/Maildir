Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 16:09:16 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id DC4A3580460;
	Thu, 29 Nov 2018 23:54:23 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by fmsmga001-1.fm.intel.com with ESMTP; 29 Nov 2018 23:54:22 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AUKxxrRYdcVTqS9znuXCX72z/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpcq9Yh7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTzFPDJ2y?=
 =?us-ascii?q?b4UPDOQPM+hXoIb/qFQSohW+HhGsCeH0xz9UhHL7x7E23/gvHAzE2gErAtIAsG?=
 =?us-ascii?q?7TrNXwLKofTfy1zKjTzTXDcvhYwy3y6JTSch87vPqBWqh/cdbQyUk0FwPJlE2Q?=
 =?us-ascii?q?ppb5PzOPzOsAqGaa4Pd8Wu61l2EnrARxryGpy8wxiYfJnpoYxk7Y+Sh92oo5ON?=
 =?us-ascii?q?O1RFBhbdK5E5ZcqzuWOop0T886Xm1lvCI3xqcYtZO7fCUG0psqyh7FZ/CafIWF?=
 =?us-ascii?q?5A/oWvyLLjdinn1lfaqyhxas/kikze3xTte00FlUoSpfiNXMtW4C1wbV6seZTv?=
 =?us-ascii?q?tx5ECh2SyA1wzL6+FEJ147lbbDJpI/3rI9koAfvVnNEyPogkn6kaybelk+9uWp?=
 =?us-ascii?q?6enrerDmqYWdN49whAH+KKMumsmnDOQ8MwgOWXWb+Oul2L3g40L5WrNKgeMykq?=
 =?us-ascii?q?XAt5DbK8IbqbCjAwJOzIYj5AiwDy283NQbg3YHNlRFdwyDj4TzPFHOOv/4Ae+l?=
 =?us-ascii?q?g1uwiDdr2+zGPrr5D5XJL3jDk6nucaxy6k5B0wczydFf55RJCrAOOv7zW0nxtM?=
 =?us-ascii?q?DGAR89KQC73+HnCNBl3IMERW2PGrOZML/VsVKQ5uIgOeiMZJMPtzb6MfQl5+Pu?=
 =?us-ascii?q?gmU/mV8SZqSp2ZoXaHalHvVpOUmZYHzsgssfHmcOpAYxUOvqiFiaWz5Je3myR7?=
 =?us-ascii?q?485i08CI++D4fDQZ6ijKaC3Ce8GJ1WYGdGB0uIEXfpcYWERvgNZDiTIs9njjwL?=
 =?us-ascii?q?S7yhR5U92hGpsQ/w06BnIfbM+i0EqZLj08B46PfIlREy8jx0DN6R03uXQGF2hW?=
 =?us-ascii?q?4IQz423KZioU1y0FuD0K54g+BGGtxX/f9GTgA6NZvExexgF9/yQh7BfsuOSFu+?=
 =?us-ascii?q?QdWpGzcxQsg1w98PeUl9HdqigwvH3yqrBb8VirOKCIY18qLaw3j+OcJ9x2za26?=
 =?us-ascii?q?kmilksWtFPOnG+hq5j6wjTAJbEnFiDmKa0a6sQxi7N+32FzWqVok5YVgl8UaHG?=
 =?us-ascii?q?XXAaYkvbttD55kLET7+zBrUrKApBycieKqRUbt3ll0lJRPDmON7GeWK+h3+wBQ?=
 =?us-ascii?q?qUxrOLdIflZn8S3DvDB0QekwAc53CGNRMgCSenuG/eCD1uFVTyY0Lj6+V+qXW7?=
 =?us-ascii?q?TlMqwAGOdUFuy721+hsNj/yGV/wTxq4EuDsmqzhsAFa93tfWC92cpwphfKRQe8?=
 =?us-ascii?q?897E1A1WLDswx9P5qgL695i14acgR3uV7u1hptBoVBl8gqsG0lzA5oJa2E11NB?=
 =?us-ascii?q?ciuS3YrsNb3PNmny4BevZrbM1VHaztmX9bkA6fQip1r4oQGmC1At83Nk09lSzX?=
 =?us-ascii?q?uR/ZHKDAsUUZLsXUc77Rl6p7fGYiYj44PYz2FjMa6xsjXawdImGPMlygq8f9dY?=
 =?us-ascii?q?KK6FFBLyH9cGCMS0Ke0qm0KmbhQLPO1J8K40PsWmd+aJ2aKxPeZgmi6mgnpD4I?=
 =?us-ascii?q?xnzk2M8C98QPbS35kZ2/GYwheHVzDkgVe7s8D4hZpLZSsPEWq40yTkApBeZrdz?=
 =?us-ascii?q?fYoSFWihOcm3ychgiJ73XH5Y8kWuB1cH2M+vZBqTYEbx3QxW1UQLv3OnnTG0wC?=
 =?us-ascii?q?BzkzEstqCfxjDBw/z+dBobPW5GXGljjVb2LYm0ldwaR1Wobw4ymRuh5Eb6wbVb?=
 =?us-ascii?q?patlI2nSR0dIYzb5L2V4XqSssbqCZtZF6Ik0viVPTOS8fVeaR6b/oxQAySPjHG?=
 =?us-ascii?q?hexDchezGxoJr5nB96iGObLHltqnrUYsVwxRbZ5NzBSv9dxDsGRC9kiTbJAliw?=
 =?us-ascii?q?JcWm/dKRl53bqOCxS3qhVoFPcSns1Y6BtDG05WpwDR29nvCznMbqEQw70S/9yt?=
 =?us-ascii?q?lrWj/ErBf6Yon3yau6NfhrcVVvBF/588B6AJ1xkpMshJEM3ngXnpaV8mAGkWvp?=
 =?us-ascii?q?MdVbxLjxbHwCRTMQx97V4Q7l2FBsL36TxoL5UGmdzdVlZ9WgfmwW3Sc95dhQCK?=
 =?us-ascii?q?iI9LxEgTd1ol2goALUYPh9nS0SxeEg6XEEmOEJpBQizj+GDb8MB0lYMjfhlxCJ?=
 =?us-ascii?q?79C4saVWa3yjcbm21Epig9+hCKuOrR1bWHb8Yp0iBzN/7t1jMFLQ133+8p3keN?=
 =?us-ascii?q?7Vbd4JtxybiRHAj/VOKJIql/oHni5nOWP7vX04xO83lx1u3ZemvIeZL2Vh5r62?=
 =?us-ascii?q?AhldNjftfcMc5intjbpCnsaRx42gBY9uGjIPXJv1V/6oFC8SuO/jNwaPFj08t3?=
 =?us-ascii?q?iaFaDeHQ+Z9EdpsXbPH4q3OHGQIXkT1c9iSwWFJExDnAAUWy03npwjGQCv2sPh?=
 =?us-ascii?q?a1115iwL6l77txtMyf9oNx/lXWfEvwqobjY0SJ6CLBtZ9A1C5kHVMdCA4eJ3BS?=
 =?us-ascii?q?1X4pqhrAmVIGyBewtIFX0JWlCDB137Priu4sTA8/GFBuWkKfvCe66OqetYV/eH?=
 =?us-ascii?q?3p+v1opm/zCRNsSAJHViDvs72lZdUnB9AcjWhzIPSykPnSLXc8GbvAu8+jFwrs?=
 =?us-ascii?q?2n8PTkRgPv5YiMC7tTK9lv+Aq2gaCMN+GOniZ5NC1Y24gIxX/JzrgfwVEThztv?=
 =?us-ascii?q?dzmrDbQPqyrNQLjMla9QCh4RczlzO9dQ76IgwglNPtbWhcno1rFjlP46FVdEWU?=
 =?us-ascii?q?blmsGofsEKJ2C9NFXaBEeELriGJDvLw93pbqO4U7FfkOJUtxioszaBD0DjJiiD?=
 =?us-ascii?q?lyXuVx23LeFMjSSbMAZCt42nbhltCXbsTNT9Zx2/Md93iyA2wLIuinPLM24cLS?=
 =?us-ascii?q?Zzc0dXorKM6iNYh+11G3Zd4Xp9MemEhyGZ4vHYK5kMt/trByV0l+RC73U7y7ta?=
 =?us-ascii?q?9idERPNulSvWr95upUymk+aVxjpmVhpOtihEhIaRsUp+PqXZ88oIZXGR1RQQ9S?=
 =?us-ascii?q?2oAggHo5MxA9vyo4ha0NHOkqz6NTNetdXO8p1YT/DdLMeKKjINOBDjFTrIRF8d?=
 =?us-ascii?q?RDquOHv3nE1Tke+fsHaSq85+4rHokpcUVvd8SRRhH/QHIkloF8dEKpptXT4gnK?=
 =?us-ascii?q?/dgcIVsz72gBDXRche9rTKRPmbB/KnfDqQi7hJY10MzKHzJIIUHon63UV4bR99?=
 =?us-ascii?q?houcXwLsXddIqzYpQQs5oVVL/WI2GnE831LNbgKr/WMJEvi1jlg6h106KcYk7z?=
 =?us-ascii?q?Dqq3wwIULHvmNkkkAqntPNhTmSfTL4IaK3W8dQBjai8wAUO4nwCzRkawKzkFYs?=
 =?us-ascii?q?YDLNXbkXnapmemFmkifVo54JEvlZG/5qehgVkNiLZu4omWxVtj+ujRtO+ereCd?=
 =?us-ascii?q?16nRcweLazo3kG0AVmOo1mbZfMLbZEmwADzpmFuTWlg6VomFcT?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ARAAAK7ABch0O0hNFiDg4BAQEEAQEHB?=
 =?us-ascii?q?AEBgVIGAQELAYNZEieDeYh3iymBYC0UkjqEeIFzLBMBh3QiNQgNAQMBAQEBAQE?=
 =?us-ascii?q?CARMBAQEIDQkIKSMMgjYkAYJiAQEBAwECDxEEEQgBATcBBQkBAQoYAgImAgIDV?=
 =?us-ascii?q?AYBDAYCAQEBHYJ/ggIFmmI9AoppcHwzgnYBAQWBBQGBPYRnCIELiXCBHIFXP4E?=
 =?us-ascii?q?RJ4JriAWCV4kJhh9ENJAIBwKCHgSPDh6RHCyITZEmA4IIMxojgzyCGwwXEoM4i?=
 =?us-ascii?q?hgEAVcfATGBBQEBizQFgkgBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ARAAAK7ABch0O0hNFiDg4BAQEEAQEHBAEBgVIGAQELAYN?=
 =?us-ascii?q?ZEieDeYh3iymBYC0UkjqEeIFzLBMBh3QiNQgNAQMBAQEBAQECARMBAQEIDQkIK?=
 =?us-ascii?q?SMMgjYkAYJiAQEBAwECDxEEEQgBATcBBQkBAQoYAgImAgIDVAYBDAYCAQEBHYJ?=
 =?us-ascii?q?/ggIFmmI9AoppcHwzgnYBAQWBBQGBPYRnCIELiXCBHIFXP4ERJ4JriAWCV4kJh?=
 =?us-ascii?q?h9ENJAIBwKCHgSPDh6RHCyITZEmA4IIMxojgzyCGwwXEoM4ihgEAVcfATGBBQE?=
 =?us-ascii?q?BizQFgkgBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,297,1539673200"; 
   d="scan'208";a="42210982"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 23:54:21 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726987AbeK3TCn (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 30 Nov 2018 14:02:43 -0500
Received: from esa2.hgst.iphmx.com ([68.232.143.124]:34042 "EHLO
        esa2.hgst.iphmx.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726551AbeK3TCn (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 30 Nov 2018 14:02:43 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple;
  d=wdc.com; i=@wdc.com; q=dns/txt; s=dkim.wdc.com;
  t=1543564490; x=1575100490;
  h=subject:to:cc:references:from:message-id:date:
   mime-version:in-reply-to:content-transfer-encoding;
  bh=eMqnPQM6D2Ocg72x92iWxuSYSVDGXRsS9oMJncVWvWA=;
  b=fTzf+Am3AJaosgu5XaSnkrB6mE0ZUV6IY3pHg2vSX4NMveFPJy7hOzXI
   d6Vz9d1BAa/P+zAmsMUBcm5x/XxyMRVxD2PrhmC9Tjh4Q9tf0Ma3yaPqr
   orRYdlmULKZWtn31KDTpg39I2GgxY1nSZXxdaAn6mwkE+XPyr820jkL5q
   5jtXJmw6fu21zeylYyDNxRizuy1mDgGsPJwO+retUdOzKL9VD1ru2GHIV
   x2qyNecWZiPqCrcHKkp76S//bfZ5vl8+1/5MrYD/0+ZrYUrUiw959D0ou
   uHaG1J1gQlbQix5vKWMy+ziqMhX6cD0odcChLxVruimphV7gBld6D9WXT
   Q==;
X-IronPort-AV: E=Sophos;i="5.56,297,1539619200"; 
   d="scan'208";a="193302401"
Received: from h199-255-45-14.hgst.com (HELO uls-op-cesaep01.wdc.com) ([199.255.45.14])
  by ob1.hgst.iphmx.com with ESMTP; 30 Nov 2018 15:54:50 +0800
Received: from uls-op-cesaip02.wdc.com ([10.248.3.37])
  by uls-op-cesaep01.wdc.com with ESMTP; 29 Nov 2018 23:36:41 -0800
Received: from th2t96qc2.ad.shared (HELO [10.86.56.90]) ([10.86.56.90])
  by uls-op-cesaip02.wdc.com with ESMTP; 29 Nov 2018 23:54:17 -0800
Subject: Re: [PATCH v2 4/4] irqchip: sifive-plic: Implement irq_set_affinity()
 for SMP host
To: Anup Patel <anup@brainfault.org>,
        Palmer Dabbelt <palmer@sifive.com>,
        Albert Ou <aou@eecs.berkeley.edu>,
        Daniel Lezcano <daniel.lezcano@linaro.org>,
        Thomas Gleixner <tglx@linutronix.de>,
        Jason Cooper <jason@lakedaemon.net>,
        Marc Zyngier <marc.zyngier@arm.com>
Cc: Christoph Hellwig <hch@infradead.org>,
        "linux-riscv@lists.infradead.org" <linux-riscv@lists.infradead.org>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>
References: <20181127100317.12809-1-anup@brainfault.org>
 <20181127100317.12809-5-anup@brainfault.org>
 <71aaed41-c794-ea82-8d87-ddcde3506067@wdc.com>
From: Atish Patra <atish.patra@wdc.com>
Message-ID: <fd970974-e461-c999-ba48-d26d8ada3ca2@wdc.com>
Date: Thu, 29 Nov 2018 23:54:16 -0800
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:60.0)
 Gecko/20100101 Thunderbird/60.3.0
MIME-Version: 1.0
In-Reply-To: <71aaed41-c794-ea82-8d87-ddcde3506067@wdc.com>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Language: en-US
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 11/29/18 9:59 PM, Atish Patra wrote:
> On 11/27/18 2:04 AM, Anup Patel wrote:
>> Currently on SMP host, all CPUs take external interrupts routed via
>> PLIC. All CPUs will try to claim a given external interrupt but only
>> one of them will succeed while other CPUs would simply resume whatever
>> they were doing before. This means if we have N CPUs then for every
>> external interrupt N-1 CPUs will always fail to claim it and waste
>> their CPU time.
>>
>> Instead of above, external interrupts should be taken by only one CPU
>> and we should have provision to explicity specify IRQ affinity from
> s/explicity/explicitly
> 
>> kernel-space or user-space.
>>
>> This patch provides irq_set_affinity() implementation for PLIC driver.
>> It also updates irq_enable() such that PLIC interrupts are only enabled
>> for one of CPUs specified in IRQ affinity mask.
>>
>> With this patch in-place, we can change IRQ affinity at any-time from
>> user-space using procfs.
>>
>> Example:
>>
>> / # cat /proc/interrupts
>>              CPU0       CPU1       CPU2       CPU3
>>     8:         44          0          0          0  SiFive PLIC   8  virtio0
>>    10:         48          0          0          0  SiFive PLIC  10  ttyS0
>> IPI0:        55        663         58        363  Rescheduling interrupts
>> IPI1:         0          1          3         16  Function call interrupts
>> / #
>> / #
>> / # echo 4 > /proc/irq/10/smp_affinity
>> / #
>> / # cat /proc/interrupts
>>              CPU0       CPU1       CPU2       CPU3
>>     8:         45          0          0          0  SiFive PLIC   8  virtio0
>>    10:        160          0         17          0  SiFive PLIC  10  ttyS0
>> IPI0:        68        693         77        410  Rescheduling interrupts
>> IPI1:         0          2          3         16  Function call interrupts
>>
>> Signed-off-by: Anup Patel <anup@brainfault.org>
>> ---
>>    drivers/irqchip/irq-sifive-plic.c | 35 +++++++++++++++++++++++++++++--
>>    1 file changed, 33 insertions(+), 2 deletions(-)
>>
>> diff --git a/drivers/irqchip/irq-sifive-plic.c b/drivers/irqchip/irq-sifive-plic.c
>> index ffd4deaca057..fec7da3797fa 100644
>> --- a/drivers/irqchip/irq-sifive-plic.c
>> +++ b/drivers/irqchip/irq-sifive-plic.c
>> @@ -98,14 +98,42 @@ static void plic_irq_toggle(const struct cpumask *mask, int hwirq, int enable)
>>    
>>    static void plic_irq_enable(struct irq_data *d)
>>    {
>> -	plic_irq_toggle(irq_data_get_affinity_mask(d), d->hwirq, 1);
>> +	unsigned int cpu = cpumask_any_and(irq_data_get_affinity_mask(d),
>> +					   cpu_online_mask);
>> +	WARN_ON(cpu >= nr_cpu_ids);
>> +	plic_irq_toggle(cpumask_of(cpu), d->hwirq, 1);
>>    }
>>    
>>    static void plic_irq_disable(struct irq_data *d)
>>    {
>> -	plic_irq_toggle(irq_data_get_affinity_mask(d), d->hwirq, 0);
>> +	plic_irq_toggle(cpu_possible_mask, d->hwirq, 0);
>>    }
>>    
>> +#ifdef CONFIG_SMP
>> +static int plic_set_affinity(struct irq_data *d, const struct cpumask *mask_val,
>> +			    bool force)
>> +{
>> +	unsigned int cpu;
>> +
>> +	if (!force)
>> +		cpu = cpumask_any_and(mask_val, cpu_online_mask);
>> +	else
>> +		cpu = cpumask_first(mask_val);
>> +
>> +	if (cpu >= nr_cpu_ids)
>> +		return -EINVAL;
>> +
>> +	if (!irqd_irq_disabled(d)) {
>> +		plic_irq_toggle(cpu_possible_mask, d->hwirq, 0);
>> +		plic_irq_toggle(cpumask_of(cpu), d->hwirq, 1);
> 
> irq is disabled for a fraction of time for cpu as well.
> You can use cpumask_andnot to avoid that.
> 
> 
> Moreover, something is weird here. I tested the patch in Unleashed with
> a debug statement.
> 
> Here are the cpumask plic_set_affinity receives.
> 
> # echo 0 > /proc[  280.810000] plic: plic_set_affinity: set affinity [0-1]
> [  280.810000] plic: plic_set_affinity: cpu = [0] irq = 4
> # echo 1 > /proc[  286.290000] plic: plic_set_affinity: set affinity [0]
> [  286.290000] plic: plic_set_affinity: cpu = [0] irq = 4
> # echo 2 > /proc[  292.130000] plic: plic_set_affinity: set affinity [1]
> [  292.130000] plic: plic_set_affinity: cpu = [1] irq = 4
> # echo 3 > /proc[  297.750000] plic: plic_set_affinity: set affinity [0-1]
> [  297.750000] plic: plic_set_affinity: cpu = [0] irq = 4
> 
> # echo 2 > /proc/irq/4/smp_affinity
> [  322.850000] plic: plic_set_affinity: set affinity [1]
> [  322.850000] plic: plic_set_affinity: cpu = [1] irq = 4
> 
> I have not figured out why it receive cpu mask for 0 & 3.
> Not sure if logical cpu id to hart id mapping is responsible for other
> two case. I will continue to test tomorrow.
> 

Never mind.
The input is in hex which explains the cpumask which explains all three 
cases except 0.
If we pass zero, it just passing the previous affinity mask.

Regards,
Atish
> Regards,
> Atish
>> +	}
>> +
> 
>> +	irq_data_update_effective_affinity(d, cpumask_of(cpu));
>> +
>> +	return IRQ_SET_MASK_OK_DONE;
>> +}
>> +#endif
>> +
>>    static struct irq_chip plic_chip = {
>>    	.name		= "SiFive PLIC",
>>    	/*
>> @@ -114,6 +142,9 @@ static struct irq_chip plic_chip = {
>>    	 */
>>    	.irq_enable	= plic_irq_enable,
>>    	.irq_disable	= plic_irq_disable,
>> +#ifdef CONFIG_SMP
>> +	.irq_set_affinity = plic_set_affinity,
>> +#endif
>>    };
>>    
>>    static int plic_irqdomain_map(struct irq_domain *d, unsigned int irq,
>>
> 
> 

