Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:50:52 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 09A1F5804F9;
	Thu,  6 Dec 2018 09:11:02 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 09:11:01 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ANcpl0hwsmBVvl6rXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e8VLvad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWVOXshTWCJBDI2y?=
 =?us-ascii?q?bJYBAfQdMuZDt4nwpUADrQeiCQS2GO/j1iNEi33w0KYn0+ohCwbG3Ak4EtwAqn?=
 =?us-ascii?q?vUstT1O7oPWu2p16bH0CjDb+lM1jjh6IjIdwouofeLXbJubMHczlQgGBnbjlWR?=
 =?us-ascii?q?tIPpJSma2f8QvGiG9epvT/6gi24iqw5rpDivwdksh5LGhoIQ0F/E9CF5zJwpKt?=
 =?us-ascii?q?2/TU52eNipG4ZeuSGdMot5WMIiQ2dwtSkkzL0GpYS7fSgQxJQ83BHSbeGMfYuQ?=
 =?us-ascii?q?4h/7SuqdPTN1iGh4dL+xmRq+61Wsx+7gWsWu0VtHrDJJnsfQun0JzRDe6ciKRu?=
 =?us-ascii?q?Fj8ku8xTqDzQHe5+JCLEspj6TUMYQhzaQ1lpcLsUTMACv2mELuga+IeUUr5PKo?=
 =?us-ascii?q?5/7kYrr4vJ+cMZF7igXkPqQpgMy/Dvw0MgkIX2eF5eSxzKPv8VH9TblQk/E7nL?=
 =?us-ascii?q?fVvIrHKckYuqK1GQ5Y34Q75xa6FTim0dAYnXcdLFJCfRKKl4zpO1DIIPDlAvaz?=
 =?us-ascii?q?mlesnylxx/DAILLhBozBLn/NkbfnY7l98VVRyBQ8zd9B/ZJYELIBL+zpWk/3qt?=
 =?us-ascii?q?PYCgU1Mwuuw+boENl9zJ8RWXqTAq+FN6PfqVuI5uMsI+aSfoMUtyv9JuMh5/7v?=
 =?us-ascii?q?i385hFAccbOo3ZsRdHC3APBmL1+Fbnrrh9cLCX0KsRYmTOz2lF2CViZeZ3aoUK?=
 =?us-ascii?q?I9+jE0EoWmAZ3DRoCwmrOB2ii7E4ZSZmBHDFCMDHjpe5+FW/cKdCKdPMthniYY?=
 =?us-ascii?q?WrimTo8rzQuuuxPiy7p7MurU/TUVtZDk1Ndr/eHTlhYy9TpyD8SayGyNS2B0nm?=
 =?us-ascii?q?UVRz45xqx/oEp9ykud3qh8mfBXCdtT5/ZRWAcgKZHc1/B6C8z1Wg/ZZNiJU1am?=
 =?us-ascii?q?QtKlAT0rVNI+2d0Obl15G9WjiBDDwiWrD6UUl7yNGJw77Kbc02LtKMZ6znbMzL?=
 =?us-ascii?q?MhgEU+QstTKW2mgbZy9wvJCI7PiUmZk6eqer4a3C7C72qDyWuOvEdFUA9/S6nF?=
 =?us-ascii?q?XHYfZlfIotT9/E/NU7iuCbE/OAtb1cGCMrdKasHujVheWfjsIsrebHyrl2ewHx?=
 =?us-ascii?q?mIwKiMY5Tse2ka2CXdC00EkwQI8HaCNAg+ADqhom3EADxvE1Lvf13j8e1kpHyn?=
 =?us-ascii?q?SU80yhmAb1d92Lqt5h4VmfucRusO0b0epicutS94HFan0NLQENqPuQxhcb5YYd?=
 =?us-ascii?q?M85ldHyG3YuxZ8PpymM6BtmFoefx5rsEPp0hV9Ep9AntQyrHM20ApyLrqV0E9A?=
 =?us-ascii?q?dzOd2pDwJr3XK2no8BCzcaLW3Uve0NKX+qcJ5/Q1sFHjvACvFko//HRrydhV03?=
 =?us-ascii?q?2A5prUCAoeS47+UkEy9xJivbHVfjE955/I1X1rKaS7qDvC1MwmBeQ7yhesZcxQ?=
 =?us-ascii?q?ML6ZGwDoFc0aBM+uKPIxllitbxIEOv1S9aEuM8OncfuGxLCkPOJ6kD26imRH5Z?=
 =?us-ascii?q?h30liQ+CpkVu7Iw5EFzumY3wuaTTvzkE2ts8H3mY9eYzESEXGyySzlBI5Xe61z?=
 =?us-ascii?q?cpwHCWaoI82r2Np+g4ThVGJf9F6mH1kGwtOmeQKOb1zh2g1dzV4XoX27liSi1T?=
 =?us-ascii?q?x7jjYporCZ3CPQ2eTidQMLNXJRS2lmkFjjP5K0j9ccXEWzawgplR2l5Vv1xqRB?=
 =?us-ascii?q?paR/KXXTTllMfyTsM25iVa6wvKKYY8FT8JMorTlXUOOkbFGaS77xuRsb3zn4H2?=
 =?us-ascii?q?tDwjA2bDWqupT/nxxnh2ORNndzrHzFec5uwRfT/sDTRflU3jAeXil3lSHXBkSg?=
 =?us-ascii?q?P9mu5diUlY3Msvq9V2KiUZ1fazLrwpmDtCu45G1qBwOwn/aol93jEAg61zL71t?=
 =?us-ascii?q?ZwWSXJqhb8fpfk16CgPe17eUloAUf269BmFYFmjoswmJYQ1GAah5qP+noLi2Xz?=
 =?us-ascii?q?MdRd2a/laHoNRDgLw8Pa4QT/2U1jKG6JyJz9VnmH3sRhYNy6aHsM2i0h98BKFL?=
 =?us-ascii?q?uU7LtckCt2uFW4rBjdYfhgnjgHz/su52UXg+UIuAor0yWcDaoeHUhePSzwiRuI?=
 =?us-ascii?q?68qyo7lQZGaqabKwzlZxnci9DLGepQFRQHP5epYhHSBq9Ml+PkzD0Gbv6o76Yt?=
 =?us-ascii?q?nfdswctgebkxrbi+hVKZQxlucFhCZ9OGL9u2ElxPA/jRB0wZ66u42HIX13/K2l?=
 =?us-ascii?q?Gh5YKiH1Z8QL9zHxiqZem9ya3oG1EZVnBzULR4DoTfOzHTIWtPTnMRuOETImpn?=
 =?us-ascii?q?eaH7rfARGQ6EN8o33TFJCrMmmdJGMFwtV6WBmdOEtfjRgPUzogmZ45Eh2qyNbl?=
 =?us-ascii?q?cEdk/T0R4l/4qh1RyuNnLRX/U2HfpBu2ZTcwUpSQMB1W7gRa7UfPLcOe9v5zHz?=
 =?us-ascii?q?1f/pC5rgyCMGmbaBpTDW0TRkyIHVPjPqSt5dnd9eiXHPG+IuDKYbWPr+xeSviJ?=
 =?us-ascii?q?yYiu0otg4zaDKMGPMmN+AP0830pJRWp5FNjBmzUTVywXkDrAbs6cpBeh4y13s9?=
 =?us-ascii?q?qw8PLxVAL04ouPDbRSPM5r+xC3h6eDKuGRiDx4KTZeypMD23vIxKID014VjiFk?=
 =?us-ascii?q?byOtHqgYtS7RUKLQnbdaDx4FZCNyN8tI7KM80hNOOc7BjdP12aB3juQoC1deTl?=
 =?us-ascii?q?HhnsCpZcoXI2CyLl/HBUCLNKiYKj3P2c34faS8SbhIhuVOqxKwoSqbE1PkPjmb?=
 =?us-ascii?q?jTbpSgugMftSgyCbJhBevIC9fw1pCWjiStLmdxK6PMV2jT0w3b07mHfKOXQAPj?=
 =?us-ascii?q?h7dkNHtqeQ4j9AgvVjB2xB6WJoLfWFmyac9eXXNowavudrAitqkeJX+3A6y7pT?=
 =?us-ascii?q?7CFZS/15girSrthyo164lumD0CZoUB1LqjxTnoKEoV1iObnF9plHQXvF/AgC7W?=
 =?us-ascii?q?OVCxQLodtqEtzuu6BKxdjJm6L+MzNC89PS/csBCMnYMsOHMHw9MRX3HD7YFhcK?=
 =?us-ascii?q?TTmuNTKXu0sIs/yf7TW+qZ854szvlZcVQbhcV3Q+FukdD0V4GZoFOpghDR0+lr?=
 =?us-ascii?q?vOoMcW5Hb2hRPdWd9TtZDCX/SVH727JD+HjLUCbhEE3KnxJoQWP4v8xWRtb1B7?=
 =?us-ascii?q?mMLBHE+GDoMFmTFocgJh+BYFy3N5VGBmnhu9Mg4=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A5AACUVwlch0O0hNFjHgEGBwaBUggLA?=
 =?us-ascii?q?YFaghEng3qDe5Atgg0UiQ+OK4FzLBMBh1ciNQgNAQMBAQEBAQECARMBAQEIDQk?=
 =?us-ascii?q?IKSMMgjYkAYJiAQIDAQIgHQEbHQEDAgkBAQUFCw0CAiYCAgMeAQERAQUBHAYTB?=
 =?us-ascii?q?YMcgWkBAxUFmj48iw2BEgUBF4J3BYQ5ChknDV2BNwIGEnmLFIIWgRABgxKCV4U?=
 =?us-ascii?q?uglcCiVuHKI8uLgcCgiCLeIMuGIFciDyHHo8IiXUwgScBggpwgQGCO4IbDBd/A?=
 =?us-ascii?q?QKCSIpUPjOBBQEBijoBAQ?=
X-IPAS-Result: =?us-ascii?q?A0A5AACUVwlch0O0hNFjHgEGBwaBUggLAYFaghEng3qDe5A?=
 =?us-ascii?q?tgg0UiQ+OK4FzLBMBh1ciNQgNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkAYJiA?=
 =?us-ascii?q?QIDAQIgHQEbHQEDAgkBAQUFCw0CAiYCAgMeAQERAQUBHAYTBYMcgWkBAxUFmj4?=
 =?us-ascii?q?8iw2BEgUBF4J3BYQ5ChknDV2BNwIGEnmLFIIWgRABgxKCV4UuglcCiVuHKI8uL?=
 =?us-ascii?q?gcCgiCLeIMuGIFciDyHHo8IiXUwgScBggpwgQGCO4IbDBd/AQKCSIpUPjOBBQE?=
 =?us-ascii?q?BijoBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,323,1539673200"; 
   d="scan'208";a="141071319"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 06 Dec 2018 09:11:00 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726056AbeLFRK5 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 6 Dec 2018 12:10:57 -0500
Received: from mail-ot1-f68.google.com ([209.85.210.68]:38231 "EHLO
        mail-ot1-f68.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725907AbeLFRK4 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 6 Dec 2018 12:10:56 -0500
Received: by mail-ot1-f68.google.com with SMTP id e12so1092745otl.5
        for <linux-kernel@vger.kernel.org>; Thu, 06 Dec 2018 09:10:55 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=CsQHc7pZNxS4ulmwiuUcDi6QerCVGZLPXXoqKFLAb7g=;
        b=beGN8GEYeuEmkQM6bXGZhUD7duOv1jnv9fS3l8V/he+HbSPiRMsVmZiOgJPLqk9y1X
         KVNVtq+8thaBPjswvzinRH/ak/zLW8LwFbocHO8jza4oF1C6S8IODzaS55C1jpTqGEUm
         I5X+np7mL5zGOoxZTuNg8sP4PTALFIGId6dZ1GgQvVFry7OyAeWUd5IANSiKLbe963FE
         5uFZON/NAPP5BPX4SwAO13Yx/+s+6fzExduekhBJorNaxFKNClW7mImydLz+PN4vAYtl
         6yBcJM81Qik35TAlWOuIRWn7tX5FToVYzb3KGhbHH8CVhpa6yeAI8v9su1+dB7eQGjoI
         +X5A==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=CsQHc7pZNxS4ulmwiuUcDi6QerCVGZLPXXoqKFLAb7g=;
        b=Hm74jYsGAF400Q8bdmZVaHTyZjS3urx9IWSEcGG6SyaUTok4OXDiMSVQnBqRJneilE
         BygZfQGZ0fDOFiGz4LA6qIura0CXnoZOQhijBnlh1lC2ORLipOXwDQk43XFHcQgX5nYe
         HGzeiPqmGXK+5X6j+pUc9Gmaut6cUUA7ZJm2wrv/AcveADrVeuvR0XP9pd/OhYRb03CD
         3einm4XQihS3YRFvDu8hFmkHanIZRq7MdoDfIfs8lRIIpOxAy845cb0Ar5lv2bQq21qw
         rqEP1w9s20h4DBrp/ZlkmWJaut0AOmZ1nfsPOABGIDBTzTXc6G+KU+0TbnVufASnAo3m
         v41A==
X-Gm-Message-State: AA+aEWYBjn6tB4eXLYGzY36dVyeTeI0eOVraTK9rrRzZmNwssDuQP0Oh
        87cW669kSAfOJ13eG5PZj/iI93GNstRu0llh82g=
X-Google-Smtp-Source: AFSGD/VAXh6zRqdvGkuYk5DC78EEQRWkVXMUKtjSmO0pN6MdwHNgERGjT+477PByhcjjkaQXWvpFNtdrTAtlL0pLgj4=
X-Received: by 2002:a9d:8e4:: with SMTP id 91mr17933662otf.169.1544116255139;
 Thu, 06 Dec 2018 09:10:55 -0800 (PST)
MIME-Version: 1.0
References: <20181206150156.28210-1-david.abdurachmanov@gmail.com>
 <20181206150156.28210-2-david.abdurachmanov@gmail.com> <CAGXu5jJkQjyhz5GP+mCPTA9yH8rLds=Vuz9g_ed+hZ0Co7Lqeg@mail.gmail.com>
In-Reply-To: <CAGXu5jJkQjyhz5GP+mCPTA9yH8rLds=Vuz9g_ed+hZ0Co7Lqeg@mail.gmail.com>
From: David Abdurachmanov <david.abdurachmanov@gmail.com>
Date: Thu, 6 Dec 2018 18:10:43 +0100
Message-ID: <CAEn-LTrdhQ2mEq=k3q=1wt+X7+S40t5OvXGKtw46VXUzeDNvaQ@mail.gmail.com>
Subject: Re: [PATCH 1/2] riscv: add support for SECCOMP incl. filters
To: Kees Cook <keescook@chromium.org>
Cc: Palmer Dabbelt <palmer@sifive.com>, aou@eecs.berkeley.edu,
        luto@amacapital.net, Will Drewry <wad@chromium.org>,
        Green Hu <green.hu@gmail.com>, deanbo422@gmail.com,
        linux-kernel@vger.kernel.org, linux-riscv@lists.infradead.org
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Thu, Dec 6, 2018 at 5:47 PM Kees Cook <keescook@chromium.org> wrote:
>
> On Thu, Dec 6, 2018 at 7:02 AM David Abdurachmanov
> <david.abdurachmanov@gmail.com> wrote:
> >
> > The patch adds support for SECCOMP and SECCOMP_FILTER (BPF).
> >
> > Signed-off-by: David Abdurachmanov <david.abdurachmanov@gmail.com>
> > ---
> >  arch/riscv/Kconfig                   | 14 ++++++++++++++
> >  arch/riscv/include/asm/thread_info.h |  5 ++++-
> >  arch/riscv/kernel/entry.S            | 27 +++++++++++++++++++++++++--
> >  arch/riscv/kernel/ptrace.c           |  8 ++++++++
> >  4 files changed, 51 insertions(+), 3 deletions(-)
> >
> > diff --git a/arch/riscv/Kconfig b/arch/riscv/Kconfig
> > index a4f48f757204..49cd8e251547 100644
> > --- a/arch/riscv/Kconfig
> > +++ b/arch/riscv/Kconfig
> > @@ -29,6 +29,7 @@ config RISCV
> >         select GENERIC_SMP_IDLE_THREAD
> >         select GENERIC_ATOMIC64 if !64BIT || !RISCV_ISA_A
> >         select HAVE_ARCH_AUDITSYSCALL
> > +       select HAVE_ARCH_SECCOMP_FILTER
> >         select HAVE_MEMBLOCK_NODE_MAP
> >         select HAVE_DMA_CONTIGUOUS
> >         select HAVE_FUTEX_CMPXCHG if FUTEX
> > @@ -228,6 +229,19 @@ menu "Kernel features"
> >
> >  source "kernel/Kconfig.hz"
> >
> > +config SECCOMP
> > +       bool "Enable seccomp to safely compute untrusted bytecode"
> > +       help
> > +         This kernel feature is useful for number crunching applications
> > +         that may need to compute untrusted bytecode during their
> > +         execution. By using pipes or other transports made available to
> > +         the process as file descriptors supporting the read/write
> > +         syscalls, it's possible to isolate those applications in
> > +         their own address space using seccomp. Once seccomp is
> > +         enabled via prctl(PR_SET_SECCOMP), it cannot be disabled
> > +         and the task is only allowed to execute a few safe syscalls
> > +         defined by each seccomp mode.
> > +
> >  endmenu
> >
> >  menu "Boot options"
> > diff --git a/arch/riscv/include/asm/thread_info.h b/arch/riscv/include/asm/thread_info.h
> > index 1c9cc8389928..1fd6e4130cab 100644
> > --- a/arch/riscv/include/asm/thread_info.h
> > +++ b/arch/riscv/include/asm/thread_info.h
> > @@ -81,6 +81,7 @@ struct thread_info {
> >  #define TIF_MEMDIE             5       /* is terminating due to OOM killer */
> >  #define TIF_SYSCALL_TRACEPOINT  6       /* syscall tracepoint instrumentation */
> >  #define TIF_SYSCALL_AUDIT      7       /* syscall auditing */
> > +#define TIF_SECCOMP                    8       /* syscall secure computing */
> >
> >  #define _TIF_SYSCALL_TRACE     (1 << TIF_SYSCALL_TRACE)
> >  #define _TIF_NOTIFY_RESUME     (1 << TIF_NOTIFY_RESUME)
> > @@ -88,11 +89,13 @@ struct thread_info {
> >  #define _TIF_NEED_RESCHED      (1 << TIF_NEED_RESCHED)
> >  #define _TIF_SYSCALL_TRACEPOINT        (1 << TIF_SYSCALL_TRACEPOINT)
> >  #define _TIF_SYSCALL_AUDIT     (1 << TIF_SYSCALL_AUDIT)
> > +#define _TIF_SECCOMP           (1 << TIF_SECCOMP)
> >
> >  #define _TIF_WORK_MASK \
> >         (_TIF_NOTIFY_RESUME | _TIF_SIGPENDING | _TIF_NEED_RESCHED)
> >
> >  #define _TIF_SYSCALL_WORK \
> > -       (_TIF_SYSCALL_TRACE | _TIF_SYSCALL_TRACEPOINT | _TIF_SYSCALL_AUDIT)
> > +       (_TIF_SYSCALL_TRACE | _TIF_SYSCALL_TRACEPOINT | _TIF_SYSCALL_AUDIT \
> > +        _TIF_SECCOMP )
> >
> >  #endif /* _ASM_RISCV_THREAD_INFO_H */
> > diff --git a/arch/riscv/kernel/entry.S b/arch/riscv/kernel/entry.S
> > index 355166f57205..e88ccbfa61ee 100644
> > --- a/arch/riscv/kernel/entry.S
> > +++ b/arch/riscv/kernel/entry.S
> > @@ -207,8 +207,25 @@ check_syscall_nr:
> >         /* Check to make sure we don't jump to a bogus syscall number. */
> >         li t0, __NR_syscalls
> >         la s0, sys_ni_syscall
> > -       /* Syscall number held in a7 */
> > -       bgeu a7, t0, 1f
> > +       /*
> > +        * The tracer can change syscall number to valid/invalid value.
> > +        * We use syscall_set_nr helper in syscall_trace_enter thus we
> > +        * cannot trust the current value in a7 and have to reload from
> > +        * the current task pt_regs.
> > +        */
> > +       REG_L a7, PT_A7(sp)
> > +       /*
> > +        * Syscall number held in a7.
> > +        * If syscall number is above allowed value, redirect to ni_syscall.
> > +        */
> > +       bge a7, t0, 1f
> > +       /*
> > +        * Check if syscall is rejected by tracer or seccomp, i.e., a7 == -1.
> > +        * If yes, we pretend it was executed.
> > +        */
> > +       li t1, -1
> > +       beq a7, t1, ret_from_syscall_rejected
> > +       /* Call syscall */
> >         la s0, sys_call_table
> >         slli t0, a7, RISCV_LGPTR
> >         add s0, s0, t0
> > @@ -219,6 +236,12 @@ check_syscall_nr:
> >  ret_from_syscall:
> >         /* Set user a0 to kernel a0 */
> >         REG_S a0, PT_A0(sp)
> > +       /*
> > +        * We didn't execute the actual syscall.
> > +        * Seccomp already set return value for the current task pt_regs.
> > +        * (If it was configured with SECCOMP_RET_ERRNO/TRACE)
> > +        */
> > +ret_from_syscall_rejected:
> >         /* Trace syscalls, but only if requested by the user. */
> >         REG_L t0, TASK_TI_FLAGS(tp)
> >         andi t0, t0, _TIF_SYSCALL_WORK
> > diff --git a/arch/riscv/kernel/ptrace.c b/arch/riscv/kernel/ptrace.c
> > index c1b51539c3e2..598e48b8ca2b 100644
> > --- a/arch/riscv/kernel/ptrace.c
> > +++ b/arch/riscv/kernel/ptrace.c
> > @@ -160,6 +160,14 @@ void do_syscall_trace_enter(struct pt_regs *regs)
> >                 if (tracehook_report_syscall_entry(regs))
> >                         syscall_set_nr(current, regs, -1);
> >
> > +       /*
> > +        * Do the secure computing after ptrace; failures should be fast.
> > +        * If this fails we might have return value in a0 from seccomp
> > +        * (via SECCOMP_RET_ERRNO/TRACE).
> > +        */
> > +       if (secure_computing(NULL) == -1)
> > +               syscall_set_nr(current, regs, -1);
>
> On a -1 return, this should return immediately -- it should not
> continue to process trace_sys_enter(), etc.

Ops! No idea how I missed that.
Will fix it.

> -Kees
>
> > +
> >  #ifdef CONFIG_HAVE_SYSCALL_TRACEPOINTS
> >         if (test_thread_flag(TIF_SYSCALL_TRACEPOINT))
> >                 trace_sys_enter(regs, syscall_get_nr(current, regs));
> > --
> > 2.19.2
> >
>
>
> --
> Kees Cook
