Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:48:54 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from FMSMGA003.fm.intel.com (fmsmga003.fm.intel.com [10.253.24.29])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 1CE3B58042F;
	Thu,  6 Dec 2018 07:02:43 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by FMSMGA003-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 07:02:42 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ADwUs5hVFjsjolUNXPJSnrxV+rsjV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhKBuadThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmTgLjhi?=
 =?us-ascii?q?UaOD4j6GzZitJ+gr9VrhyioBJwwYDUb46aOvplZqPQf8gXSXZCU8tLSyBMGJ+w?=
 =?us-ascii?q?Y5cJAuEcPehYtY79p14WoBWwHwasGuLvxSJVjXLqxqI1zvkhERvc0wM8H9IOtW?=
 =?us-ascii?q?7brNPyNKcMTOu4y7THwi/db/NXxDjx8pLHfQs8rvGRR7J/a9beyUkqFwzfiFWQ?=
 =?us-ascii?q?rpLlMiia1uQIqWeb7u5gWfizhG4grgF8uz6izdoihInOg4Ia0FHE9SNhzYkrI9?=
 =?us-ascii?q?24VFR7YN6+HJtLrC6XMZZ9TMA6Q2xwpio21rkLtYSmcCUE1pgr3QPTZv+bf4SS?=
 =?us-ascii?q?4x/uVv6dLDR8iX5/dr+znQu+/Eqjx+HmVMS50VBHpTdfnNbWrHACzRnT59CHSv?=
 =?us-ascii?q?Rj+keh3i6C1x7c6u5aO0A4j6nbJIA7wr42iJUTtV7PHijsmEX5lKOWd0Mk9fa0?=
 =?us-ascii?q?6+n/fLnqupuRO5VphgzwLKgigNGzDOckPgQUXmWW+/yw1Lj58k34RLVKgOc2kq?=
 =?us-ascii?q?7csJ3CIcQbp6i5AxJa04o66BawES2m0NIGknkDNV5FfxyGj473NFHUO/34E/i/?=
 =?us-ascii?q?jEq2kDtxxPDJIKfhApPTIXjHirvheqx960FExAop0d9f/45UCq0GIP/rXk/xtd?=
 =?us-ascii?q?/YAQEjPw273ubqE9F91oIYWWKSDa6VKqLSsVmU5u0xJ+mAfpMauDH4K/I9/f7h?=
 =?us-ascii?q?kWc5mUMBfamuxZYXaGq3HvV6I0qDZnrgmNcBEXoQsQo4Q+znk1mCUT9VZ3avUK?=
 =?us-ascii?q?Mw/DA7CIS6DYjdQoChmqCO3CC+HpdOfGBJFkiMEWv0d4WDQ/oMaiWSLdF7njwH?=
 =?us-ascii?q?UrihTYkh1Ra1uQ/+yrpnKPfU+yICuZLi0th1+/PclRUo+TNoCMSd1nmHT3tokW?=
 =?us-ascii?q?MQWz82wKd/rFRnxVeY0ah4hP9YGcZJ5/xTUAc3Lprcz+18C9DvVQPNZNaJSFC6?=
 =?us-ascii?q?Qtq4BTE9VM4+w9gLY0xlAdWtkgjD3za2A78Sj7GLB4Y78qTG03j1JsZy0XDG1K?=
 =?us-ascii?q?Y6glkiQ8tPM3Cmh6Fl+wjSAY7Jj1uWl6KweasA2y7N8X+JzXCSs0FATA5wTaLF?=
 =?us-ascii?q?UGgCaUTMs9T2+FnOT7+0BrQhKQtO18iCJqxOat3qiFVGQOzuONDfY2K3hmexCg?=
 =?us-ascii?q?yExrKKbIr2ZWod2D/RB1QDkwAW5XyGLxQxBj+9o2LCCzxjDU/gbFny8eZgsn+7?=
 =?us-ascii?q?TlU7zweRb0J/0bq44RoVhf2aS/MO0bMIoiYhqzNoHFmj29LaEcaPpw1kfK9Ee9?=
 =?us-ascii?q?My/E9H1X7Ftwx6JpGgM6FihlsZcwRrv0Pv1w97CplancgttnMqyAtyKaSX0F5a?=
 =?us-ascii?q?czOY3JbwOqDYK2Xo/RCvbbLW1U/a0NqM5qgP7/E4oU35vA61Dkoi72ln095N3n?=
 =?us-ascii?q?SG4pXFEgUTXozxU0ot7Bd6uqzVbTM754PX0n1sL7K5sjvD29IvGeskxQysf9ZZ?=
 =?us-ascii?q?MKOYCgDyF9cWCNSpKOwvg1KpdA4LPPhO9K4oOMOrb/uH2LOxMOl8hj6njGRH75?=
 =?us-ascii?q?p70kKD7Cd8Tu/I35AYw/CXxAeHVjH8jEu/vcDzg4xLeTYSHm+nwyj+GIFRfrFy?=
 =?us-ascii?q?fZoMCWq2Oc23x8lxiIT3W3FF816vHVUG19GzeRqTdlDywRdf1UAKrnO5gyu4yD?=
 =?us-ascii?q?p0niotrqqe2izO3uvjeAAGOm5NWGltk1PsLZKogNAdWUiidxIpmwe95Ubm26hb?=
 =?us-ascii?q?o7xyLmnSQUtSfyn6NXpiUra2treZZ85P6ZUosThYUeimYFCaTKL9rAUe0y/5A2?=
 =?us-ascii?q?RewzU7fSmwuprlhxx6lH6dLHFroXrbY85w3xTf5N/bRfJLxToJXip4iTrWBli6?=
 =?us-ascii?q?Idap+86Zl5PCsuC4SmKgWYdfcSjtzYOcqiS74XdmDgG4n/C2gtfnCxQ10Tfn19?=
 =?us-ascii?q?l2UiXFtBb9bZPs16igM+Jnf09oCUT468p7HIF+j4QxiIsR2XgcmpWa434HnX3v?=
 =?us-ascii?q?PtVc3KL0dGANSiITw97J/Ajl31VuLnGTyIL4THmdwtZhaMO8YmMZwS8968FKCK?=
 =?us-ascii?q?GJ7L1Lhyd1o1y4rR7Pbvh5hDsS1fwu6HsCieETpAUt1jmdAqwVHURAOCzslheI?=
 =?us-ascii?q?4MqkoKRZemmvaqSw21Rknd+6Er6CuA5cVW39epcjGy9w88p+PEjN0H319oHrZt?=
 =?us-ascii?q?3QYcgPuR2TlhfKl/JVJ44plvoWmSpnPnrwvWEiy+4+lxBv3Iu1vI6aK2V256K5?=
 =?us-ascii?q?AwVVNjn0Z8MV5zHsgrxSnseQ34CzAJphHi8HU4fvTfKtCDgSr+joNx6SED0grX?=
 =?us-ascii?q?eWAaHQEhWY6EdisnLDCZSrN2yMKXkdzNViQgSdJUNFjAAVWjU6goA2FgSwyMP9?=
 =?us-ascii?q?d0d54ygb5kTkpRtU1uJoKx7/X3/dpAiybzc7VoOfIABK7g1Y5EfVLM+e7v91Hy?=
 =?us-ascii?q?5C5Z2stwiNKm2dZwRVAmAFQE2EB1b/Praw4dnM6fSXBu27L/HWe7WBtfReV+uU?=
 =?us-ascii?q?xZKoyoZn/zGMNtiWPnl/FfI73FBPXWt+G8TflDUCUCgXlyPLb86Gqxaw4Cx3rs?=
 =?us-ascii?q?aj8Pv1XALj/5eAC7xXMd934RC5nb+DN/KMhCZ+MTtY1o0DxX7LyLgc3V4ekSJu?=
 =?us-ascii?q?dyOqEbQPqyHNVr/QmrRMAh4faiNzMtZI7q0m0glMP87bls361rpigvEpDFdFUE?=
 =?us-ascii?q?Trmtu1aswSP2G9KFTHCV6RO7SbPjLL2d/4YKOmRb1UjeVZrBmwuTedE0/+MTWP?=
 =?us-ascii?q?jTjpVxazMe5SiCGXJgBRuIa4chx1E2jsUMrmagGnMN9wlTA23bw0hnbQOWEAKz?=
 =?us-ascii?q?Rzb0NNoaOW7S5DhvV/GmpB7mdqLOWemiaZ6fXYJYgSsfdxHit0kOda6mwgy7RJ?=
 =?us-ascii?q?9CFEWOB1mCzKo99uuV6mlOyPyjthUBVWqzdLhJiEvUNtOajC8plAWHDE/A8C7G?=
 =?us-ascii?q?mKChQKocdlBcPru6xK1tfPk6fze39+9IfM9M8ZCtL8M8OJMWQsdxHuHXqcBQwY?=
 =?us-ascii?q?ZTOmPnqZjUFHk/yW+2zTo5Qn7tDvlZcVQbhcV3Q+FukdD0V4GZoFOpgzFjc5jb?=
 =?us-ascii?q?mzhcsB7nOmrQXYQINcs4yDHu2bDd3kKCyeiLhZYl0P27y8ZYsJO4D9nUx/QlZ/?=
 =?us-ascii?q?lYXOXUHXWJQFriBoaAUz/B8X2Hd7R2w3nUnib0fl5H4VCO7xnRMsjAZ6Sfoi+S?=
 =?us-ascii?q?2q4FotIFfO4iwqnw15ndTjnCDUaj/qJ7mYWYBNFzGytk4/KJr3Tg95Kwqokh9K?=
 =?us-ascii?q?LjDBEp5YkbpsPUlhhBLGsJBPHPdaSrMMNBMZ2/CbIfwi3UlGoy6nwEZB4vXtBp?=
 =?us-ascii?q?5rlQ9sepmp+SETkzl/ZcI4cPSDbJFCyUJd0/qD?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ARAABhOQlch0O0hNFkDg4BAQEEAQEHB?=
 =?us-ascii?q?AEBgVEHAQELAYNrJ4wTX4svgiGJD44rgXMSAQEYEwGHVyI0CQ0BAwEBAQEBAQI?=
 =?us-ascii?q?BEwEBAQgNCQgpIwyCNiKCZQMDAQIvAQ0BGx0BAwIJAQEFEDsDHgIRAQUBHAcSB?=
 =?us-ascii?q?YMcgWkBAxUEAZocPIwfBQEXgncFgQGDOQoZJw1dgTcCBhKHXoMTgRyCFoEQAYV?=
 =?us-ascii?q?piAUCiVuHKI8uLgcCgiCEJIdUgyMLGIFciAY2hx6JDoV6iV0GAgkHDyGBJYINc?=
 =?us-ascii?q?IEBgjuCGwwXg0qKGDw/MoEEAQEBO4l/AQE?=
X-IPAS-Result: =?us-ascii?q?A0ARAABhOQlch0O0hNFkDg4BAQEEAQEHBAEBgVEHAQELAYN?=
 =?us-ascii?q?rJ4wTX4svgiGJD44rgXMSAQEYEwGHVyI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpI?=
 =?us-ascii?q?wyCNiKCZQMDAQIvAQ0BGx0BAwIJAQEFEDsDHgIRAQUBHAcSBYMcgWkBAxUEAZo?=
 =?us-ascii?q?cPIwfBQEXgncFgQGDOQoZJw1dgTcCBhKHXoMTgRyCFoEQAYVpiAUCiVuHKI8uL?=
 =?us-ascii?q?gcCgiCEJIdUgyMLGIFciAY2hx6JDoV6iV0GAgkHDyGBJYINcIEBgjuCGwwXg0q?=
 =?us-ascii?q?KGDw/MoEEAQEBO4l/AQE?=
X-IronPort-AV: E=Sophos;i="5.56,322,1539673200"; 
   d="scan'208";a="54814925"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 06 Dec 2018 07:02:41 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726212AbeLFPCQ (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 6 Dec 2018 10:02:16 -0500
Received: from mail-wr1-f66.google.com ([209.85.221.66]:40473 "EHLO
        mail-wr1-f66.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725989AbeLFPCP (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 6 Dec 2018 10:02:15 -0500
Received: by mail-wr1-f66.google.com with SMTP id p4so796392wrt.7
        for <linux-kernel@vger.kernel.org>; Thu, 06 Dec 2018 07:02:13 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding;
        bh=uymB+aF3Tw4L2DXeZA9sUfLB7eetCMjtVdlmrZn8CYw=;
        b=YV0kAUlhA4d6E/c8W6W6ij+uB7OC9S1N+5T2FGJi3KrRpTUeNp2I9UCp8Las6beMym
         LTHIbn++LNfl3fpDNhIEO/w4puR7Ls6pfc4KdfPll7lUhfekVab3o2ChjE2hwTfgq63G
         bHt2w2PRGMNMlyPUjCl90dHzc3I8azEzm1YYxQxoKwEniTWqDhbVGgym+TuyVUeOUYA6
         2fp8VU+24hDHWHCn31nYS77X2g1qE42BRdpnzoMgDfp0nWJZ5RSBLd/DCaeb9+MeUU8b
         wXClzMo3ys6oYybMCsMj1GiXQO/H63MPg5vJKzN+ItGphC3XVl+sVFPqNH8w/an6P5px
         yxmg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=uymB+aF3Tw4L2DXeZA9sUfLB7eetCMjtVdlmrZn8CYw=;
        b=PRTD6pz7VPasiY5YOKl36/iyKjW5zU0JBINdtCQ6WUrIiepS82Cwj+2RG6HAbLBoh0
         GacDQkROeI1+E3+1WXsP7triiEtbendYE612U5PwPbfiAiVaDHuJWm5QA27zjnJPLKNE
         XJvA0gwDb/T+izA+4+CmYny41ITffoC9FQW3+MIc8Al9E5TfypKxseOt8T0C/IeMQUMU
         f5noNXf0ETqeFLoXRJvQNRjkHQBYBeS/a+POlIMDrgrZF2H09ZtJdbNf9BjcCdtwAthR
         tlKi9DPYbqepjsZotTxr27FSeE6eKq2T3iNdqCQhLQzkdJAFAeTuEWrvEE1mez/30bWa
         r8dg==
X-Gm-Message-State: AA+aEWaI+P6ha+pxFvNaPgoXFhO0tS33Z9VkI1JJWEWRY6cB1Fce6X3d
        cmVq3nisI3ZR0tmhcrdgrCo=
X-Google-Smtp-Source: AFSGD/U9w1eNmei2xXFqrIQYZU6tgjvRwfUNaZwOiKOSf4zoxmn4QIFgsc5tSrdUaFkyHxIUEEBZnw==
X-Received: by 2002:a5d:4d46:: with SMTP id a6mr18736738wru.28.1544108532621;
        Thu, 06 Dec 2018 07:02:12 -0800 (PST)
Received: from localhost.localdomain (ip-76.net-89-3-178.rev.numericable.fr. [89.3.178.76])
        by smtp.gmail.com with ESMTPSA id 14sm1629981wmv.36.2018.12.06.07.02.11
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Thu, 06 Dec 2018 07:02:12 -0800 (PST)
From: David Abdurachmanov <david.abdurachmanov@gmail.com>
To: palmer@sifive.com, aou@eecs.berkeley.edu, keescook@chromium.org,
        luto@amacapital.net, wad@chromium.org, green.hu@gmail.com,
        deanbo422@gmail.com, linux-kernel@vger.kernel.org,
        linux-riscv@lists.infradead.org
Cc: David Abdurachmanov <david.abdurachmanov@gmail.com>
Subject: [PATCH 1/2] riscv: add support for SECCOMP incl. filters
Date: Thu,  6 Dec 2018 16:01:55 +0100
Message-Id: <20181206150156.28210-2-david.abdurachmanov@gmail.com>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <20181206150156.28210-1-david.abdurachmanov@gmail.com>
References: <20181206150156.28210-1-david.abdurachmanov@gmail.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The patch adds support for SECCOMP and SECCOMP_FILTER (BPF).

Signed-off-by: David Abdurachmanov <david.abdurachmanov@gmail.com>
---
 arch/riscv/Kconfig                   | 14 ++++++++++++++
 arch/riscv/include/asm/thread_info.h |  5 ++++-
 arch/riscv/kernel/entry.S            | 27 +++++++++++++++++++++++++--
 arch/riscv/kernel/ptrace.c           |  8 ++++++++
 4 files changed, 51 insertions(+), 3 deletions(-)

diff --git a/arch/riscv/Kconfig b/arch/riscv/Kconfig
index a4f48f757204..49cd8e251547 100644
--- a/arch/riscv/Kconfig
+++ b/arch/riscv/Kconfig
@@ -29,6 +29,7 @@ config RISCV
 	select GENERIC_SMP_IDLE_THREAD
 	select GENERIC_ATOMIC64 if !64BIT || !RISCV_ISA_A
 	select HAVE_ARCH_AUDITSYSCALL
+	select HAVE_ARCH_SECCOMP_FILTER
 	select HAVE_MEMBLOCK_NODE_MAP
 	select HAVE_DMA_CONTIGUOUS
 	select HAVE_FUTEX_CMPXCHG if FUTEX
@@ -228,6 +229,19 @@ menu "Kernel features"
 
 source "kernel/Kconfig.hz"
 
+config SECCOMP
+	bool "Enable seccomp to safely compute untrusted bytecode"
+	help
+	  This kernel feature is useful for number crunching applications
+	  that may need to compute untrusted bytecode during their
+	  execution. By using pipes or other transports made available to
+	  the process as file descriptors supporting the read/write
+	  syscalls, it's possible to isolate those applications in
+	  their own address space using seccomp. Once seccomp is
+	  enabled via prctl(PR_SET_SECCOMP), it cannot be disabled
+	  and the task is only allowed to execute a few safe syscalls
+	  defined by each seccomp mode.
+
 endmenu
 
 menu "Boot options"
diff --git a/arch/riscv/include/asm/thread_info.h b/arch/riscv/include/asm/thread_info.h
index 1c9cc8389928..1fd6e4130cab 100644
--- a/arch/riscv/include/asm/thread_info.h
+++ b/arch/riscv/include/asm/thread_info.h
@@ -81,6 +81,7 @@ struct thread_info {
 #define TIF_MEMDIE		5	/* is terminating due to OOM killer */
 #define TIF_SYSCALL_TRACEPOINT  6       /* syscall tracepoint instrumentation */
 #define TIF_SYSCALL_AUDIT	7	/* syscall auditing */
+#define TIF_SECCOMP			8	/* syscall secure computing */
 
 #define _TIF_SYSCALL_TRACE	(1 << TIF_SYSCALL_TRACE)
 #define _TIF_NOTIFY_RESUME	(1 << TIF_NOTIFY_RESUME)
@@ -88,11 +89,13 @@ struct thread_info {
 #define _TIF_NEED_RESCHED	(1 << TIF_NEED_RESCHED)
 #define _TIF_SYSCALL_TRACEPOINT	(1 << TIF_SYSCALL_TRACEPOINT)
 #define _TIF_SYSCALL_AUDIT	(1 << TIF_SYSCALL_AUDIT)
+#define _TIF_SECCOMP		(1 << TIF_SECCOMP)
 
 #define _TIF_WORK_MASK \
 	(_TIF_NOTIFY_RESUME | _TIF_SIGPENDING | _TIF_NEED_RESCHED)
 
 #define _TIF_SYSCALL_WORK \
-	(_TIF_SYSCALL_TRACE | _TIF_SYSCALL_TRACEPOINT | _TIF_SYSCALL_AUDIT)
+	(_TIF_SYSCALL_TRACE | _TIF_SYSCALL_TRACEPOINT | _TIF_SYSCALL_AUDIT \
+	 _TIF_SECCOMP )
 
 #endif /* _ASM_RISCV_THREAD_INFO_H */
diff --git a/arch/riscv/kernel/entry.S b/arch/riscv/kernel/entry.S
index 355166f57205..e88ccbfa61ee 100644
--- a/arch/riscv/kernel/entry.S
+++ b/arch/riscv/kernel/entry.S
@@ -207,8 +207,25 @@ check_syscall_nr:
 	/* Check to make sure we don't jump to a bogus syscall number. */
 	li t0, __NR_syscalls
 	la s0, sys_ni_syscall
-	/* Syscall number held in a7 */
-	bgeu a7, t0, 1f
+	/*
+	 * The tracer can change syscall number to valid/invalid value.
+	 * We use syscall_set_nr helper in syscall_trace_enter thus we
+	 * cannot trust the current value in a7 and have to reload from
+	 * the current task pt_regs.
+	 */
+	REG_L a7, PT_A7(sp)
+	/*
+	 * Syscall number held in a7.
+	 * If syscall number is above allowed value, redirect to ni_syscall.
+	 */
+	bge a7, t0, 1f
+	/*
+	 * Check if syscall is rejected by tracer or seccomp, i.e., a7 == -1.
+	 * If yes, we pretend it was executed.
+	 */
+	li t1, -1
+	beq a7, t1, ret_from_syscall_rejected
+	/* Call syscall */
 	la s0, sys_call_table
 	slli t0, a7, RISCV_LGPTR
 	add s0, s0, t0
@@ -219,6 +236,12 @@ check_syscall_nr:
 ret_from_syscall:
 	/* Set user a0 to kernel a0 */
 	REG_S a0, PT_A0(sp)
+	/*
+	 * We didn't execute the actual syscall.
+	 * Seccomp already set return value for the current task pt_regs.
+	 * (If it was configured with SECCOMP_RET_ERRNO/TRACE)
+	 */
+ret_from_syscall_rejected:
 	/* Trace syscalls, but only if requested by the user. */
 	REG_L t0, TASK_TI_FLAGS(tp)
 	andi t0, t0, _TIF_SYSCALL_WORK
diff --git a/arch/riscv/kernel/ptrace.c b/arch/riscv/kernel/ptrace.c
index c1b51539c3e2..598e48b8ca2b 100644
--- a/arch/riscv/kernel/ptrace.c
+++ b/arch/riscv/kernel/ptrace.c
@@ -160,6 +160,14 @@ void do_syscall_trace_enter(struct pt_regs *regs)
 		if (tracehook_report_syscall_entry(regs))
 			syscall_set_nr(current, regs, -1);
 
+	/*
+	 * Do the secure computing after ptrace; failures should be fast.
+	 * If this fails we might have return value in a0 from seccomp
+	 * (via SECCOMP_RET_ERRNO/TRACE).
+	 */
+	if (secure_computing(NULL) == -1)
+		syscall_set_nr(current, regs, -1);
+
 #ifdef CONFIG_HAVE_SYSCALL_TRACEPOINTS
 	if (test_thread_flag(TIF_SYSCALL_TRACEPOINT))
 		trace_sys_enter(regs, syscall_get_nr(current, regs));
-- 
2.19.2

