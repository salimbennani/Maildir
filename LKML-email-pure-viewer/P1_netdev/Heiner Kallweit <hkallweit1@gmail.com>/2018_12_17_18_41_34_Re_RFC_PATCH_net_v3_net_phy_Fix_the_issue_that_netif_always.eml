Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  18 Dec 2018 08:48:23 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id B34375805CF;
	Mon, 17 Dec 2018 10:41:51 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga007-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 17 Dec 2018 10:41:50 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Ax1YvkBCkTtTL1NcQVJ+zUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP78p8+wAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95MWSJfDIOy?=
 =?us-ascii?q?b4gBAeQPMulXrYbyu1QArQCmBQSuH+7v1j1Fi2Xq0aEm3eksEwfL1xEgEdIUt3?=
 =?us-ascii?q?TUqc34OqUMXuC0yqnH0y/DZO5T1zjn7IjIdh4gru+NXbJsbMHczkkvFwDfgVWU?=
 =?us-ascii?q?rYzkMS2a1uURs2SG9OdgWuevhHQmqwF1uDSg2sAsiozQi48T11vK+yJ5wIMvKt?=
 =?us-ascii?q?25Tk52ecWkEINRtyGcNot5XtgiT3tuuCkk1r0KoZm7fSkOyJs93BHfcOaLc4+S?=
 =?us-ascii?q?4hLsUuuaPDR2hGp9db6hmxq/9VKsxvDyW8WqylpGsylInsXWun0M1RHf8taLRu?=
 =?us-ascii?q?dh8kqv3DuAyRrc5+RHLE8viaXbJZsszaA+m5YPrUjOGyv7lFnygaKVc0gp9Oyl?=
 =?us-ascii?q?5/r7bbjjvZCQK5J4hwP7P6gzhsCwGvg3Pw4TVGaB4+u8zqfs/UjhTbVKkPI2lq?=
 =?us-ascii?q?7ZvYjEJcQUuKG5GRVZ0oU95BalCTepztAYkWMALFJfdxKLl4npO1fQL/DkFfqz?=
 =?us-ascii?q?nUignTNxy/zbMLDtHI/BImXAnbv9Z7pw6kxRxBI2zd9F5pJUDr8BIOj0Wk/0rN?=
 =?us-ascii?q?HYCh45Mwqpw+foEdl91Z0RWXiJAqCHNKPeqFiI5+wpI+aSfo8Yoyj9K/c76P70?=
 =?us-ascii?q?l3M5mkESfbOv3ZQJbHC0BPNmI1+WYXb0mNcODX8KvhYiTOztkFCCVT9TZ3WsUK?=
 =?us-ascii?q?4m6TA7FZmrDYPCRoCrnbyA0z23HpxQZmBaFF+MFW3keJmDW/cJcCiSONNukiQY?=
 =?us-ascii?q?Vbi9TI8szRGuuxX7y7p7NOXU/TcUtZL+1Ndv4e3Tmgo/9Th1D8SbzmGMQHt4nm?=
 =?us-ascii?q?IORz8qwq9/pVZxxUuE0ah9m/ZYD8Bc5+tVUgcmMp7R1+56C9fsVQ7bfdeJT1Cm?=
 =?us-ascii?q?QtOhATwqStIxwtkOY1tyGtm4jxDD2TaqDKERl7CRGJM09afc1WDrJ8lh03bGyL?=
 =?us-ascii?q?Uhj14+T8RVLm2mhql/9wvJC47TiUqZlb2ndaAd3C7L6WeCwnCCvEBeUA5sT6rF?=
 =?us-ascii?q?WWoTaVfRrdT8/knCVaOhCaw7Mgtdzs6PMqhKZcfvjVlcQPfjOc7RY2S+m2qrAR?=
 =?us-ascii?q?aIx7WMbJflemkH3SXdDlQEnB4X/XqcKQc+ASKhqXrEDDNyDVLvf1/s8e5mpXym?=
 =?us-ascii?q?VEA00R+FY1dh17Wv/B4VnuKTS/UU0rIAuychrjF0EU2539LXDdqAugVgcL9dYd?=
 =?us-ascii?q?M7/FdIy2bZuxZhMZynKqBonkQefBhvv0PyyxV3DZ1NntUwo3M00gV+M6KY30lH?=
 =?us-ascii?q?dzODw5/wPKbaKm3z/BCpdq7X1UvS0NeQ+qcT9vs4r0/vsx2uFkon639nycVa02?=
 =?us-ascii?q?OA5pXWCwofSY7xUkcy9xh9u7HaYik865nI1XF2Nqm0qDvC29MvBOsq0Ruge9Zf?=
 =?us-ascii?q?MKWZFA79CcEaBs6uKPA0lFitdB4LIOdS9KssNcO8a/SGwLKrPPpnnD++l2tH5J?=
 =?us-ascii?q?5y002S+Ct8UOLHxIsFzOyC0QuBVDf8i0mhv9vzmYBFYzESA2W+xTLlBI5Xeq19?=
 =?us-ascii?q?Y4ILBX2yLM2ww9V0n4TtVGJA9F6/G1MG39ekeBqPb1DnwQJcz0UWoXy9liu+wD?=
 =?us-ascii?q?x5iDUprquZ3CzTzOXubhsHOmhXRGZ8iVfgO5S7j9cfXEKwdQgmiAOl5Vrmx6hc?=
 =?us-ascii?q?vKl/NWjTTltScCjsMm5iVbG8trycbM5V6ZMkqDlYX/64YV+HVLH9uRwa0yX4Em?=
 =?us-ascii?q?taxTA7cSyqu5rjkxx7jmKdMGh8rH7Ddc5swhff4cTWReRN0ToeWCl4lT7XC0C8?=
 =?us-ascii?q?Ptmo59mVl43PsvujV2KnTZBTdSjrzYWdtCq0/2FqABu/n+ytld3jCwQ1zSj719?=
 =?us-ascii?q?xyXyXSsBn8epXr17i9Me9/fElnHkX868l5GoF5iIcwn4sf2XsZhpWU+3oIj2Hz?=
 =?us-ascii?q?PM5f2aL/anoNWDEKz8TU4AjjxE1sMHaJy5jlWXWax8trf8O6bX8O2iIh88BKD7?=
 =?us-ascii?q?+Z7bxekityuFa4rwPRYf5mkzcZyPsu7mMagu4TtAosyCWdHq4dHU1CMSPwkBSI?=
 =?us-ascii?q?6si0rL9La2a3bbiwyE1+kMiiDL6YowFQQnb5eoo4Ei924cVyK1bM0Hz16oH5d9?=
 =?us-ascii?q?jcd9MTthuIkxjei+hZMo4+lv0PhSB/I2LyoWUly/InjRxpxZy6uYmHK2Z3866j?=
 =?us-ascii?q?DB9XKCb1Z98N9TH3lqlRgNyW34+0E5VlGzULWoboTP2yHDITs/TnKxiBEDkmpn?=
 =?us-ascii?q?iHHrrfGBeV6F16oHLXD5CrK3aXKWEFzdVlQRmRPk1ejxoSXDUnhZ45DQGqydfl?=
 =?us-ascii?q?cEd44DAR+1H5pgFNyuJuKxnwTGPfqB20ZTczTZiVNABW4R1a50fJLcye6fp+ED?=
 =?us-ascii?q?pC8Z2mqAyNN3aXZwBVDWwSXkyEBlbjPqSh5NXa8uiYAPa+IOXKYbmUteNeUPKI?=
 =?us-ascii?q?z4q10oR65zaMKtmPPn56Av05wEVDWG52G9/DlzUTUSAXlD/Nb82GpBe64CJ3td?=
 =?us-ascii?q?uy8PDqWALp+IuOBKFeMdRp+xCqn6iDM/Scizp+KTZdzpkM32PHyKAD3F4OjCFj?=
 =?us-ascii?q?bzmsEbMdtS7UUaLfgKlXAwQAayN0MstI4Lkx3g1MOc7dl9P02aR0jv8zC1dZS1?=
 =?us-ascii?q?PhntulatANI2G4LFnHHlqENKyaJT3XxMH6eaO8RqNRjOVXtB2wuCyXE0z5PjSE?=
 =?us-ascii?q?mDnmSQqvMfxXjCyAOBxeuYe9cgtiCGT5TdLmbAG7P8FzjTEs3bI0gXbKP3YGMT?=
 =?us-ascii?q?dga0NNsqGQ7SRAj/plBmxO9WBlIveEmiqD6+nYK40bsf9qAiRyiuJb7242y7pT?=
 =?us-ascii?q?7CFYWvN1nDHeocJpo1GjiuOP0CZoUAJSqjZXg4KGpVliOaTc9pVaRXnI5g4C7W?=
 =?us-ascii?q?WOBBQMvNZlDtzvu6ZNytnAjq7zKTFC887K8ssYHcTbNMWHMH85OxrzBDHUFBcF?=
 =?us-ascii?q?TSKsNWzHh01SiveS9niUrpg8spftmZoORaVdVFw6Df4aDkVlHNofIJZ4RD8kkL?=
 =?us-ascii?q?ibjNIW6nq6thXeWMJavpWUHs6VVNbyLjeZjLpDLzsB0LrjLYVbYo3yykV5alg8?=
 =?us-ascii?q?n5nMGkrRXtdluSpqbwgyrVVRtnN5Szt3k2vjZhmg/zc3CPiy1ko/jAdkbPsF8C?=
 =?us-ascii?q?rq5RE8JgyO7AU0l1MwkNOtrzmQdjP1KKb4CY8QBSP1sUU1NpLTTAN8bAn0lkth?=
 =?us-ascii?q?YnOMDZ5YkbpsPVstwCrdvZ9CA7QUGaFNfhIV7f2eefgt1VNStmOhyFMRtsXfDp?=
 =?us-ascii?q?43tAYrd5O251FJ3wZ8Yd8pbfjQJ6NNykddh77XliCt3+E1hgQZIhBeoyupZCcU?=
 =?us-ascii?q?tRlQZfEdLC2y87kpsFTalg=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AUAAB87Rdch0O0hNFbCBoBAQEBAQIBA?=
 =?us-ascii?q?QEBBwIBAQEBgVMDAQEBAQsBAYEvgTmBAieDfIN7kBaBYC0Ul0SBcxIBARgLCAG?=
 =?us-ascii?q?HViI2Bw0BAwEBAQEBAQIBEwEBAQoLCQgpIwxCARABgWIkAYJhAQEBAQIBAQIgB?=
 =?us-ascii?q?BkBGx0BAwIJAQEFBQsNAgImAgIDHgIFDAEFARwGAQwGAgEBAYMdAYFnAQMNCAE?=
 =?us-ascii?q?ECpxsPIsQfBYFAReCdwWBMQGBEoFwChknDV2BNwIBBRJ5iheBHIIWgTiCPS6CV?=
 =?us-ascii?q?0cDgTuDLYJXAoEqAY5pkFYvBgOBVoU3hi1wgyoGGIlzDIdTiTyEdoESgy2GTAI?=
 =?us-ascii?q?EAgQFAgUPIYEsBIIDTSOBAW2BToIbDBcSgziEWTuFQD8yAYEEAQEhgSaJWwSCS?=
 =?us-ascii?q?QEB?=
X-IPAS-Result: =?us-ascii?q?A0AUAAB87Rdch0O0hNFbCBoBAQEBAQIBAQEBBwIBAQEBgVM?=
 =?us-ascii?q?DAQEBAQsBAYEvgTmBAieDfIN7kBaBYC0Ul0SBcxIBARgLCAGHViI2Bw0BAwEBA?=
 =?us-ascii?q?QEBAQIBEwEBAQoLCQgpIwxCARABgWIkAYJhAQEBAQIBAQIgBBkBGx0BAwIJAQE?=
 =?us-ascii?q?FBQsNAgImAgIDHgIFDAEFARwGAQwGAgEBAYMdAYFnAQMNCAEECpxsPIsQfBYFA?=
 =?us-ascii?q?ReCdwWBMQGBEoFwChknDV2BNwIBBRJ5iheBHIIWgTiCPS6CV0cDgTuDLYJXAoE?=
 =?us-ascii?q?qAY5pkFYvBgOBVoU3hi1wgyoGGIlzDIdTiTyEdoESgy2GTAIEAgQFAgUPIYEsB?=
 =?us-ascii?q?IIDTSOBAW2BToIbDBcSgziEWTuFQD8yAYEEAQEhgSaJWwSCSQEB?=
X-IronPort-AV: E=Sophos;i="5.56,366,1539673200"; 
   d="scan'208";a="142463568"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 17 Dec 2018 10:41:49 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2389088AbeLQSlr (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 17 Dec 2018 13:41:47 -0500
Received: from mail-wr1-f66.google.com ([209.85.221.66]:36834 "EHLO
        mail-wr1-f66.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1728155AbeLQSlq (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 17 Dec 2018 13:41:46 -0500
Received: by mail-wr1-f66.google.com with SMTP id u4so12397743wrp.3;
        Mon, 17 Dec 2018 10:41:43 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=subject:to:cc:references:from:message-id:date:user-agent
         :mime-version:in-reply-to:content-language:content-transfer-encoding;
        bh=hoZqGmqHjh/RabrPalse1qzP0SaXa+/ulIH/GqmaHa8=;
        b=P0xASlQwZ/eEi2GxW9FpndgA2I5NcaF/nH+fsqnCrjVtwFCqcv811X9bekIuawFivF
         Q/21fw0j+/vWfBI0utM/dTQ5kMd1r5ZeRXrwWeEPu6yJ3b3DpWIgRvQEdaClMf9mKp6N
         8UTt1hSIy9itCZ+ODSozN4QWP0MNQUw3eX+YDIv9i2kZygsx7bM446LhVsHHGaMznoXb
         MEWD1+oAYO55pPUSHqykDi1WzYeqVLTxc/0ITsizNvkRdgUkp1a2a27Tg2kGFQKaOeaQ
         iWEtxr0rFui1TG2VtpwejScUK4eJh5rY9u+N4i2+j6T8S/GWiBCfdKyOBDyXHgizZ1pv
         AbKA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:subject:to:cc:references:from:message-id:date
         :user-agent:mime-version:in-reply-to:content-language
         :content-transfer-encoding;
        bh=hoZqGmqHjh/RabrPalse1qzP0SaXa+/ulIH/GqmaHa8=;
        b=TjVPkXOBC1OGULzN/vZsTp+0XFD/TPQ2DX5aMD7yOKXPUKXP3jRFyjLnwFRu0U4XKv
         Gmk3VVjQBo7kNDsZbPTdzZJVs3Y5IeuWxcEFUPE7FoowIiZD7kh8dG4KNe3nHbDfemCh
         8LOPZBke4TsUMf7XsOFlXusV6brhigWE6IeQ1StlEg66X6aIwGZw4WLj99SWfkd8nRpT
         w/P4DFi0ynzftmKxY2C1kPa9jgDnBa7XFuWosLOusuEg7+S7uZAVbchtG7ZLR//s2d4e
         /NIFQOstjRRrkNQa+RD07gX7cRWrlUn+KNsD6hy9TbGJSs3NFCz4F4z8fDZiokaAYQgM
         1Qkg==
X-Gm-Message-State: AA+aEWbpe0jFobrCpZJk07QbgXegu8QsQX5AVQcXwOa6RZ4VNc8a5q+T
        ZeHwpsJNXqIDg5ba1zT95fwX7xuR
X-Google-Smtp-Source: AFSGD/Ve2+bLDCv1NAILMv++OLjB45DVaWkI+F6DC0I7JMx6VD1E4hLNuqe2kkbO7NgNkEZaHCs5Vw==
X-Received: by 2002:adf:c7cc:: with SMTP id y12mr12215926wrg.52.1545072102837;
        Mon, 17 Dec 2018 10:41:42 -0800 (PST)
Received: from ?IPv6:2003:ea:8bcf:e300:9098:392c:b017:10bc? (p200300EA8BCFE3009098392CB01710BC.dip0.t-ipconnect.de. [2003:ea:8bcf:e300:9098:392c:b017:10bc])
        by smtp.googlemail.com with ESMTPSA id o5sm16700wmg.25.2018.12.17.10.41.41
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Mon, 17 Dec 2018 10:41:42 -0800 (PST)
Subject: Re: [RFC PATCH net v3] net: phy: Fix the issue that netif always
 links up after resuming
To: Kunihiko Hayashi <hayashi.kunihiko@socionext.com>,
        Andrew Lunn <andrew@lunn.ch>,
        Florian Fainelli <f.fainelli@gmail.com>,
        "David S. Miller" <davem@davemloft.net>
Cc: netdev@vger.kernel.org, linux-kernel@vger.kernel.org
References: <1543825349-423-1-git-send-email-hayashi.kunihiko@socionext.com>
 <20181217154102.34D9.4A936039@socionext.com>
From: Heiner Kallweit <hkallweit1@gmail.com>
Message-ID: <bb910914-73e5-c040-08d5-5f16d259b105@gmail.com>
Date: Mon, 17 Dec 2018 19:41:34 +0100
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:60.0) Gecko/20100101
 Thunderbird/60.3.3
MIME-Version: 1.0
In-Reply-To: <20181217154102.34D9.4A936039@socionext.com>
Content-Type: text/plain; charset=utf-8
Content-Language: en-US
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 17.12.2018 07:41, Kunihiko Hayashi wrote:
> Hi,
> 
> Gentle ping...
> Are there any comments about changes since v2?
> 
> v2: https://www.spinics.net/lists/netdev/msg536926.html
> 
> Thank you,
> 
> On Mon, 3 Dec 2018 17:22:29 +0900 <hayashi.kunihiko@socionext.com> wrote:
> 
>> Even though the link is down before entering hibernation,
>> there is an issue that the network interface always links up after resuming
>> from hibernation.
>>
>> The phydev->state is PHY_READY before enabling the network interface, so
>> the link is down. After resuming from hibernation, the phydev->state is
>> forcibly set to PHY_UP in mdio_bus_phy_restore(), and the link becomes up.
>>
>> This patch adds a new convenient function to check whether the PHY is in
>> a started state, and expects to solve the issue by changing phydev->state
>> to PHY_UP and calling phy_start_machine() only when the PHY is started.
>>
This convenience function and the related change to phy_stop() are part of
the following already and don't need to be part of your patch.
https://patchwork.ozlabs.org/patch/1014171/

>> Suggested-by: Heiner Kallweit <hkallweit1@gmail.com>
>> Signed-off-by: Kunihiko Hayashi <hayashi.kunihiko@socionext.com>
>> ---
>>
>> Changes since v2:
>>  - add mutex lock/unlock for changing phydev->state
>>  - check whether the mutex is locked in phy_is_started()
>>  
>> Changes since v1:
>>  - introduce a new helper function phy_is_started() and use it instead of
>>    checking link status
>>  - replace checking phydev->state with phy_is_started() in
>>    phy_stop_machine()
>>
>> drivers/net/phy/phy.c        |  2 +-
>>  drivers/net/phy/phy_device.c | 12 +++++++++---
>>  include/linux/phy.h          | 13 +++++++++++++
>>  3 files changed, 23 insertions(+), 4 deletions(-)
>>
>> diff --git a/drivers/net/phy/phy.c b/drivers/net/phy/phy.c
>> index 1d73ac3..f484d03 100644
>> --- a/drivers/net/phy/phy.c
>> +++ b/drivers/net/phy/phy.c
>> @@ -670,7 +670,7 @@ void phy_stop_machine(struct phy_device *phydev)
>>  	cancel_delayed_work_sync(&phydev->state_queue);
>>  
>>  	mutex_lock(&phydev->lock);
>> -	if (phydev->state > PHY_UP && phydev->state != PHY_HALTED)
>> +	if (phy_is_started(phydev))
>>  		phydev->state = PHY_UP;

I'm wondering whether we need to do this. If the PHY is attached,
then mdio_bus_phy_suspend() calls phy_stop_machine() which does
exactly the same. If the PHY is not attached, then we don't have
to do anything. Therefore I think we just have to do the same as
in mdio_bus_phy_resume():

if (phydev->attached_dev && phydev->adjust_link)
	phy_start_machine(phydev);

Can you test this?

>>  	mutex_unlock(&phydev->lock);
>>  }
>> diff --git a/drivers/net/phy/phy_device.c b/drivers/net/phy/phy_device.c
>> index ab33d17..4897d24 100644
>> --- a/drivers/net/phy/phy_device.c
>> +++ b/drivers/net/phy/phy_device.c
>> @@ -309,10 +309,16 @@ static int mdio_bus_phy_restore(struct device *dev)
>>  		return ret;
>>  
>>  	/* The PHY needs to renegotiate. */
>> -	phydev->link = 0;
>> -	phydev->state = PHY_UP;
>> +	mutex_lock(&phydev->lock);
>> +	if (phy_is_started(phydev)) {
>> +		phydev->state = PHY_UP;
>> +		mutex_unlock(&phydev->lock);
>> +		phydev->link = 0;
>> +		phy_start_machine(phydev);
>> +	} else {
>> +		mutex_unlock(&phydev->lock);
>> +	}
>>  
>> -	phy_start_machine(phydev);
>>  
>>  	return 0;
>>  }
>> diff --git a/include/linux/phy.h b/include/linux/phy.h
>> index 3ea87f7..dd21537 100644
>> --- a/include/linux/phy.h
>> +++ b/include/linux/phy.h
>> @@ -898,6 +898,19 @@ static inline bool phy_is_pseudo_fixed_link(struct phy_device *phydev)
>>  }
>>  
>>  /**
>> + * phy_is_started - Convenience function for testing whether a PHY is in
>> + * a started state
>> + * @phydev: the phy_device struct
>> + *
>> + * The caller must have taken the phy_device mutex lock.
>> + */
>> +static inline bool phy_is_started(struct phy_device *phydev)
>> +{
>> +	WARN_ON(!mutex_is_locked(&phydev->lock));
>> +	return phydev->state >= PHY_UP && phydev->state != PHY_HALTED;
>> +}
>> +
>> +/**
>>   * phy_write_mmd - Convenience function for writing a register
>>   * on an MMD on a given PHY.
>>   * @phydev: The phy_device struct
>> -- 
>> 2.7.4
> 
> ---
> Best Regards,
> Kunihiko Hayashi
> 
> 
> 

