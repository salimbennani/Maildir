Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 24 Nov 2018 12:36:55 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id C04A458037D;
	Fri, 23 Nov 2018 10:35:05 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by fmsmga002-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 23 Nov 2018 10:35:05 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AZn0gYh3nkM5F5eBSsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segTLfzxwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJPUMhRSSJPH4Cy?=
 =?us-ascii?q?b4UAAOUdIOlXrYfyp0AWrRa8HgSsGP/jxyVUinPqx6A2zeIsGhzG0gw6GNIOtW?=
 =?us-ascii?q?zZocjrO6cUTOu7zrTIzSnfYPNW2Df97ofIcgs8qvyLRr1/b8zRxVMvFwPYklWf?=
 =?us-ascii?q?tYzlPzKT1uQCqGiW9PZvVeWyhGE5twFxojmvxsEvioXTmo0VzUrI9Th6wIssI9?=
 =?us-ascii?q?CzVUB1YdmhEJRKtiGaMZN7Td8lQ251pik61r0GuZ+9fCgJ0pgo2xnfZ+aac4iL?=
 =?us-ascii?q?5B/oSeWfIS9giX57ZL6ygwy+/VWux+HiTMW4zVVHojZfntTNtH0Bzx/e58mdRv?=
 =?us-ascii?q?dg/UqtwzKC2gDJ5uxHJ00/iLDVJIQ7wrEqk5oeqUTDETHymEXxlKKWaEok9fay?=
 =?us-ascii?q?6+j9YbXpuIWcN4lqhQH6KKgunda/AesgPggPWWiU5/i82aX98UHlRLhGlOA6n6?=
 =?us-ascii?q?fHvJzAOMgWpbK1DxVU34sh8xq/Ci2p0NUcnXkJNlJFfxeHgpDtO1HPJvD4EPi+?=
 =?us-ascii?q?j02vkDh13fDGOKPuApHUInjEnrbhe6hy61RHxQotwtBQ+YhUBqsCIP3tQE/xss?=
 =?us-ascii?q?LXDhsjPwyz2ebnB81x1pkCVmKXHq+ZLKTSvEeM5uIuIOmDepUZuTngK/U+4/7u?=
 =?us-ascii?q?jHk5mUISfKWz3JsXbmy4EepiI0mDfXXshdIBG38QvgUiVOzqlEGCUTlLanayRa?=
 =?us-ascii?q?085y07B5ihDYvZRoCtnaaO3CG0HpBNYmBGC1aMEWrndomeWvcMbj6SLdFlkjAe?=
 =?us-ascii?q?SbehTIoh3wm0tADm07pnMvbU+ioAuJLh09h6+ffflRI19TxyCcSd1HqAT2V1nm?=
 =?us-ascii?q?MOWj8307pzoU17ylefz6d4h+ZUGsBU5/NMSg06L4LTz/RmC9DuXQLMZs2GSE2m?=
 =?us-ascii?q?QtWhAjE9VMgxzMUMY0tmH9WijxbD3zelArMPlryLAoA0/bzY33TrO8l9zHPG3r?=
 =?us-ascii?q?E7j1Y6WstPKXGmhqln+gjQHYHJlV+Vl6KrdasG2i7N+3yOzW6PvEFeTQ5xXr/J?=
 =?us-ascii?q?XXEZZkvKs9v54lnOQKOpCbQiKgFB09KNKrNWat31ilVLXOrsN87AY22vgWuwBQ?=
 =?us-ascii?q?yHxrWXbIX0fWUR2yHdCEsBkwAX5nuGMQk+BiG8o2PRFjBuFFTvY1/y/ul6sn+0?=
 =?us-ascii?q?Ukg0zwSSZU17y7W14gIVheCbS/4Lw70LojkhpCtuEFa9xd3WDcGAqBRnfKhHZd?=
 =?us-ascii?q?M94VFH1X/WtgBnP5ygKbxiiUAacwhto0zu0BB3AJ1akcc2tHMq0BZyKaWA3VNd?=
 =?us-ascii?q?djOY2JfwOqHXKmjy5hyvd7Ta2lbE0NaS+6cP7vs4pk7nvAGoEEoi7npm38NU03?=
 =?us-ascii?q?ua+pXFEg4SXYjtXUYw8hhwv6vabTUl54PIyX1sNrG5vSXG2903C+oq1Bahc81E?=
 =?us-ascii?q?P6OZCQD9CcsaB8upKOw0gFWpahMEPOZP9K87Jc+mdv2G2LK1M+Zkhj6pkWNH4I?=
 =?us-ascii?q?Vl2EKW6yV8UvLI34oCw/yA3gqHSi3wg0u7vsH2mYBLfzcSHmWkxCjgBY5RYLBy?=
 =?us-ascii?q?fIkRBWevJc232stxh5r3V3FE816jAksM2NW1dhqKc1z9wQpQ2FwNoXymhSS31S?=
 =?us-ascii?q?Z0nCwurqaF2izB3f7idBseNmFXXmZiiUrjLpauj9AdWkildAwplBqj5UbnyKlX?=
 =?us-ascii?q?vqV/L2/PQUhWeyj6NX1tUqy1trCaec5A9IsosTlLUOS7eV2bSr/9rwEa0i/5BG?=
 =?us-ascii?q?te2TY7eiquupX4mRx6lW2cIGxyrHrfZcF/2xPf6MbASv5W2zoMXDN4hiXPBlig?=
 =?us-ascii?q?I9mp+s2Zl5XZveCkVGKhVZpTfTPwzYyatyu75mxqARuhkPC1gdDnFQk60Snm19?=
 =?us-ascii?q?hlTynIrRD8YpX12KS+K+5oYk5oBFrk4cpgBo5+ipcwhI0X2XUChpSa530HnX3x?=
 =?us-ascii?q?MdVa36Lzd34NRT8Nw97I7wnpwkxjLnSVx43nUnWR2NduZ96/YmkOwCIy89hKCL?=
 =?us-ascii?q?uI7LxDhSZ1oUC3rQPLbfh9gzcS0/0u6HEBjuENuQotyDidA78IEUlZOyzsiwqH?=
 =?us-ascii?q?79SkoKpLY2avdKC61FBiktC5ELGCvgZcVW78epcjHi9/9N9zMVzS333o9oHrZs?=
 =?us-ascii?q?PQYskNuR2OnBfNlOxVKJM3lvoXiitrI2P9vXs5y+EliRxix421vI+CK2915qK2?=
 =?us-ascii?q?HgZYNiHpZ8MU4jztkaFensOM04GuBJphHCgLXIDzTfKpCz8SsfXnNwCTEDwzsH?=
 =?us-ascii?q?ubGLzfHROB50ditX7AD5erN3SPLnkD0dpiXAWdJFBYgA0MRzo1hJk5FgS3xMD7?=
 =?us-ascii?q?dEd5+ysc5lr5qhtK1+JpOAPzUmbZpAe0dDg0TIKTIwZR7gFH/03VK9CR7vpvHy?=
 =?us-ascii?q?FE+Z2stA6NJXaeZwtWFmEFQFCEC0rgPrmz5tnA7u6YCfClL/bVZbWOqOpeV+qH?=
 =?us-ascii?q?xJ6104tm+SqMOduLPnV4E/I73U9DV2hjG8vFgzUPVzAXlyXVYs+boxe85zR3rt?=
 =?us-ascii?q?2l//TtQg7v/oyPC71dMdh0/xC2gKGDN/OfhSpjKDZY0I8MymHMyLQFwFESjCRu?=
 =?us-ascii?q?fSG3EbscrS7NUL7QmqhPAh4bdSxzNchI76E93gVXOs7bkNT11rFmgf4vFldFTk?=
 =?us-ascii?q?fsmsWoZcwMPmG8O0nLBEeNNLSaOzLLx9v7br+7Sb1VlO9UrQG/uS6HE0//OTSO?=
 =?us-ascii?q?jyPmVw20PuFWki6aPAZSuIW8cht2DWjjTdTmagC0MdNtjD02x6E0iW3ONWIGLT?=
 =?us-ascii?q?d8dEZNpKWK7SxEmvV/B3BB7n19IOmYmiaZ6vPUJYoMvfR3AiR7ieRa7W8+y7tU?=
 =?us-ascii?q?6iFEWfN0lDHTrt5ov1GpjO2PxiB7XxpJrzZBnJiLsll6OaXF6plAXm7J/RIX4m?=
 =?us-ascii?q?WWDhQKpt1lBcXuuqBQ0NfPkq3zJSxG89LV+8scGsfVJNiGMHonLRrmBjrUABEZ?=
 =?us-ascii?q?Qj6sMGGMz3BaxdiW+22Yr9ABtpH2n4QJS6NcShRhH+gGIkdoBtoPJNFwRDxy1f?=
 =?us-ascii?q?a3hcgJ6H72hh7LR8BTuJaPAv6bB/TiLB6YirZJbgECxqO+K4kPYN7VwUtnP3N3?=
 =?us-ascii?q?mszqBlbbXdFLrTYpOgU5pgNN7WR1Tmw11FnNYQSh7WMTFPi32BUxzBZ9N7d+vA?=
 =?us-ascii?q?zw6ks6cwKZ7BA7l1M8zJC82Wic?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AXAAB/R/hbh0O0hNFjHgEGBwaBUQkLA?=
 =?us-ascii?q?YJpgQInjHCLIYIhlyeBcS4HDAGBS4cPIjQJDQEDAQEBAQEBAgETAQEBCA0JCCk?=
 =?us-ascii?q?jDII2JAGCYgMDAQIkEz8GCQEBGBMlAwxIBgESBYMcAYIBBAGoBzOKFQWMCYFXP?=
 =?us-ascii?q?458AqACBwKCHASPBCORCJl2gg1NNIMrglCLMoJYQDKBBQEBjCEBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AXAAB/R/hbh0O0hNFjHgEGBwaBUQkLAYJpgQInjHCLIYI?=
 =?us-ascii?q?hlyeBcS4HDAGBS4cPIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2JAGCYgMDA?=
 =?us-ascii?q?QIkEz8GCQEBGBMlAwxIBgESBYMcAYIBBAGoBzOKFQWMCYFXP458AqACBwKCHAS?=
 =?us-ascii?q?PBCORCJl2gg1NNIMrglCLMoJYQDKBBQEBjCEBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,270,1539673200"; 
   d="scan'208";a="63718182"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 23 Nov 2018 10:35:03 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2395371AbeKXFUZ (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sat, 24 Nov 2018 00:20:25 -0500
Received: from imap1.codethink.co.uk ([176.9.8.82]:60741 "EHLO
        imap1.codethink.co.uk" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1730102AbeKXFUZ (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sat, 24 Nov 2018 00:20:25 -0500
Received: from cpc118554-reig6-2-0-cust775.6-3.cable.virginm.net ([86.18.95.8] helo=xylophone.i.decadent.org.uk)
        by imap1.codethink.co.uk with esmtpsa (Exim 4.84_2 #1 (Debian))
        id 1gQGI5-0001K6-0V; Fri, 23 Nov 2018 18:34:57 +0000
Date: Fri, 23 Nov 2018 18:34:55 +0000
From: Ben Hutchings <ben.hutchings@codethink.co.uk>
To: Alexei Starovoitov <ast@kernel.org>,
        Daniel Borkmann <daniel@iogearbox.net>
Cc: netdev@vger.kernel.org, linux-kernel@vger.kernel.org
Subject: [PATCH 1/3] bpf/verifier: Log instruction patching when verbose
 logging is enabled
Message-ID: <20181123183455.qjokyt6zpa2yck6s@xylophone.i.decadent.org.uk>
References: <20181123183356.5q4bu47zpj5wdufb@xylophone.i.decadent.org.uk>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181123183356.5q4bu47zpj5wdufb@xylophone.i.decadent.org.uk>
User-Agent: NeoMutt/20170113 (1.7.2)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

User-space does not have access to the patched eBPF code, but we
need to be able to test that patches are being applied.  Therefore
log distinct messages for each case that requires patching.

Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
---
 kernel/bpf/verifier.c | 13 +++++++++++++
 1 file changed, 13 insertions(+)

diff --git a/kernel/bpf/verifier.c b/kernel/bpf/verifier.c
index 4ce049cd30a3..ea4bc796e545 100644
--- a/kernel/bpf/verifier.c
+++ b/kernel/bpf/verifier.c
@@ -5844,6 +5844,7 @@ static int convert_ctx_accesses(struct bpf_verifier_env *env)
 			verbose(env, "bpf verifier is misconfigured\n");
 			return -EINVAL;
 		} else if (cnt) {
+			verbose(env, "patching in prologue\n");
 			new_prog = bpf_patch_insn_data(env, 0, insn_buf, cnt);
 			if (!new_prog)
 				return -ENOMEM;
@@ -5892,6 +5893,9 @@ static int convert_ctx_accesses(struct bpf_verifier_env *env)
 			};
 
 			cnt = ARRAY_SIZE(patch);
+			verbose(env,
+				"patching in sanitization against SSB at %d\n",
+				i + delta);
 			new_prog = bpf_patch_insn_data(env, i + delta, patch, cnt);
 			if (!new_prog)
 				return -ENOMEM;
@@ -5973,6 +5977,7 @@ static int convert_ctx_accesses(struct bpf_verifier_env *env)
 			}
 		}
 
+		verbose(env, "patching explicit ctx access at %d\n", i + delta);
 		new_prog = bpf_patch_insn_data(env, i + delta, insn_buf, cnt);
 		if (!new_prog)
 			return -ENOMEM;
@@ -6225,6 +6230,8 @@ static int fixup_bpf_calls(struct bpf_verifier_env *env)
 				cnt = ARRAY_SIZE(mask_and_mod) - (is64 ? 1 : 0);
 			}
 
+			verbose(env, "patching in divide-by-zero check at %d\n",
+				i + delta);
 			new_prog = bpf_patch_insn_data(env, i + delta, patchlet, cnt);
 			if (!new_prog)
 				return -ENOMEM;
@@ -6244,6 +6251,8 @@ static int fixup_bpf_calls(struct bpf_verifier_env *env)
 				return -EINVAL;
 			}
 
+			verbose(env, "patching implicit ctx access at %d\n",
+				i + delta);
 			new_prog = bpf_patch_insn_data(env, i + delta, insn_buf, cnt);
 			if (!new_prog)
 				return -ENOMEM;
@@ -6307,6 +6316,8 @@ static int fixup_bpf_calls(struct bpf_verifier_env *env)
 								 map)->index_mask);
 			insn_buf[2] = *insn;
 			cnt = 3;
+			verbose(env, "patching in tail-call bounds check at %d",
+				i + delta);
 			new_prog = bpf_patch_insn_data(env, i + delta, insn_buf, cnt);
 			if (!new_prog)
 				return -ENOMEM;
@@ -6342,6 +6353,8 @@ static int fixup_bpf_calls(struct bpf_verifier_env *env)
 					return -EINVAL;
 				}
 
+				verbose(env, "patching in map lookup at %d",
+					i + delta);
 				new_prog = bpf_patch_insn_data(env, i + delta,
 							       insn_buf, cnt);
 				if (!new_prog)
-- 
Ben Hutchings, Software Developer                         Codethink Ltd
https://www.codethink.co.uk/                 Dale House, 35 Dale Street
                                     Manchester, M1 2HF, United Kingdom


