Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 03 Dec 2018 16:52:09 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 3B1CA580117;
	Sun,  2 Dec 2018 20:35:22 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 02 Dec 2018 20:35:21 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3At1xkEBSCxkRLh76sSdu9nzmSPNpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64YRCDt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZDI2y?=
 =?us-ascii?q?b5UBAfcDMuZWrIfyqEcBoxS5Cwm3HOPiyCRFhmP00KAgz+gsCx3K0BImEtkTsH?=
 =?us-ascii?q?rUttL1NKIKXO6w0anIyzTDb/NX2Tf+74jDbxIvruuMXL1qasrRyUgvHB7Cg1WQ?=
 =?us-ascii?q?s4PkPyma1v8Ns2ia9eZgVv+vi2gmqwFxozivxcAsh5LShoIS1l/E9CJ5wIArKt?=
 =?us-ascii?q?y3VE53e8KrEJxVtyyDMYZ9X8AsQ3lwtSok1rELvYS3cDUExZg53RLTdv+Kf5SS?=
 =?us-ascii?q?7h/iVuudOSl0iG57dL6lmRq//kutxvfzW8SwylpHoClIn9/RvX4XzRPT8NKISv?=
 =?us-ascii?q?5l80ehxzmP0wfT5/laIUA7i6XbMYQtwr0umZoJt0TMACv2lF/xjK+MeUUo4umo?=
 =?us-ascii?q?6+L5bbX6vpKQKZN4hwXkPqgzlMGzH/40PhUNUmSH4+ix1b/u8VX8QLpQj/02lq?=
 =?us-ascii?q?fZsIrdJcQevqO5Bw5V0oA+6xewFjum08oXnWMBLF1bfBKLlo/pOl/IIP/mF/ey?=
 =?us-ascii?q?mEqskDh1yPDcJLHhAYvCLmLFkLj/ebZx8UlcyBA8zdxH/ZJbFqkBIO7vWk/2rN?=
 =?us-ascii?q?HYCh45Mw+qzOr9B9R9y5gTWWaOAq+fLaPTvkWE5uMpI+mQeoAVvCzxJOQi5/7r?=
 =?us-ascii?q?lXU5g0MSfbG13ZsLb3C1BvRmLF+YYXrwmNgBFn0GvgojTOPwjl2CXiVeZ3KzX6?=
 =?us-ascii?q?I6+zE6B5iqDYbFRoCxnrOB2D23EYFRZmBDElqMC2vnd52YW/cQbyKfOs1hkjsa?=
 =?us-ascii?q?WrS7SI8h0heutAn9y7d8KurU+ysYtY/s1dRv5u3Tkw0y+iJwD8iHz26NSGR0lH?=
 =?us-ascii?q?sSRzAqxKB/vVB9ylCb3KdimPxYFdtT5/BTXgcgL5Hczfd3C9TzWgLHY9eIR0yq?=
 =?us-ascii?q?QtSgATEtUN0xx8UCbFp6G9WnlhrDxTalA6cJl7yXA5w56qHc0GL3J8pnz3bG1b?=
 =?us-ascii?q?Muj18pQsZUMW2mh6h/9xXcBoLTkkWZkbqqeroY3CLX6GiDym+OtllCUAFsSaXF?=
 =?us-ascii?q?QWwfZkzOoNvk/EzCUaGhBa4nMgRbz86CMbVFatvugVVCR/fjPdDebnm1m2exAx?=
 =?us-ascii?q?aI27yNYJDre2UbwCXSFkwEnxoP8naBMAg0Hj2hrH7GDDxyCVLvZFvh/vRkp3Ol?=
 =?us-ascii?q?UEA41QGKYFdn17qu5BEVg+eRS/cS3rICpScgpC94HFe739LKFdWAoxBtc7lbYd?=
 =?us-ascii?q?M4+F1Hz37WtxRhPpy8KKBvnkIecwVyv0PpyxV3CoVBndI2rH8wywpyM6aY0FJH?=
 =?us-ascii?q?dzOXxp3wPrzXKm/v/BGgcaLW21fe0MqI9acL8vg3t1LjvASxHEo473pny8VV02?=
 =?us-ascii?q?eb5pjSFgUSVYz+U0kp+Bl6vb3VeTQ96J7O2n1qMqm0tSHC1sktBOskzBagYthe?=
 =?us-ascii?q?PLmFFA/0D80VGcyuJPY2lFiuaxIOJPpS+7IsP8O6a/uG37amPeZ9nD68kWtL+o?=
 =?us-ascii?q?F80kKW+Cp6Re7FxJIFw/Ce3guaWDbwllahssbrmY9aYTEeBHawyS/hBIRJfK19?=
 =?us-ascii?q?YZ4LCXuyI82w3th+nZ/tVGJC+165GlwG39WleRyMYFzn3A1czFgYrmajmSSl0T?=
 =?us-ascii?q?N0iTYprqyE0SzKwuTicgcHO2FRSGlji1fsPZa7j9QAUEe0aAgpkQOv5VzmyKhD?=
 =?us-ascii?q?uKR/M27TTF9Ifij3NW1jUrG8tqGfY85J854otSRXUOKhYVGVULL9oh0a0z/9EG?=
 =?us-ascii?q?ta3jw0azaqupDhlRxglG2dNGpzrGbeecxoxxfQ/sbcRf1S3joBXiV4kiPYBlu/?=
 =?us-ascii?q?P9mo+9WbiZHDv/u6V2KgUJ1TbCbqwZmBtCu9+W1lHxm/k+qvld3gFAgwyTX72M?=
 =?us-ascii?q?VyVSXUsBb8ZZHm1qSgPuJgZEVoBl7868xhF4F6k4swgowQ2HcAipWU+3oHjXn8?=
 =?us-ascii?q?MdFB1a3ia3oNQCYBw8TJ7wj9xE1jMnWJypr6VnqHw8ttfdm6Yn4M1SI74MBHE6?=
 =?us-ascii?q?OU7L1CnStorVu0twPRYf5hnjgDzfsi8mIVg+YMuAA11CWSHqgSHVVEPSzrjxmI?=
 =?us-ascii?q?6tG+rKZNa2q1f7m/ylF+ncy/A7GYuQ5TRmz5epg5EC9078V/Nk/M0XLp5oHlft?=
 =?us-ascii?q?nQccwcthmOnxjciOhVLYo7luAWiip/JWL9oXolxvYnjRxp2JG2pomGJH9r/KKk?=
 =?us-ascii?q?GR5YLTz1atgX+jHsi6Zeg8mX05quHpVnBjUEQp/oQei0HzIVsPTtLxyOHyEkqn?=
 =?us-ascii?q?eHBbrfGheS51x8oHLIF5CrKmubJH0Ezdh5QBmdJUpfgB0bXTkgn545EByqy9Ll?=
 =?us-ascii?q?cEtj+j8R4Vv4oANWyu10Lxn/TnvfpACwZzc2UpefKQRZ7hpY60fJK8Ce7f9zHy?=
 =?us-ascii?q?JF/p2ntgONMXeWZwBJDWEPR0yFCErvPrio5dnc7eeYAvCyIOfJYbWLseZeTeuH?=
 =?us-ascii?q?xYqz0ot6+DaBLsWOPn5/D/0ix0pMR3Z5F97CmzUITSwXmDnAb8qapBe65y12od?=
 =?us-ascii?q?qz8PXtWALz+4SPD6FePslo+xCzma2DLfKfhD5lKTZE0ZMB3X/Ix6Ye3F4RiCFu?=
 =?us-ascii?q?diOhEbcatS7KQ6LfhLVXDwMAay5oMMtI7qQ83hRCOMLBi9P10KJ4geAxC1tfSV?=
 =?us-ascii?q?PhncSpb9QQI26hLFPHGFqLNLOeKDLR3sH4erm8RqNQjelOsx2wuC2WE0viPjSF?=
 =?us-ascii?q?ijnoWAqjMeBKjCGHIhNevJuxfQpqCWjmVNjmcAG0MMdrjT0qxr05nm/KNW8ZMT?=
 =?us-ascii?q?Rmb0xBtKGf7SNGjfV5AGFB6ntlLe+ZmyeW9eXYK5AWsed1DSRwje5V/HM6y75N?=
 =?us-ascii?q?5iFeWPN1gDfSrsJpo1y+kuiA0DxnUB9PqjZNnI2KvEViNr/f9plPQnvE+BMN7W?=
 =?us-ascii?q?ONCxUFvddlC9vvu7xOxdjLjq78NDBC89eHtfcbUubQL9iGOXxpHxPoHjPQCApN?=
 =?us-ascii?q?GTDtO2jegUFZlPC6+Xicr5x8oZ/pzt5GarJaUlEvXtATDkB6Ed0eaMN3XTogla?=
 =?us-ascii?q?GWjdJRzXW7pRjVAs5du8aUeOiVBKDMNTCYjbhHYFMoyKLxNoQSftn70l1rcVl7?=
 =?us-ascii?q?2ofXHUvQXNNKijZmZQ4zpkhd7D51SWhliBGtUR+k/HJGTa38pRUxkAYrJL11rD?=
 =?us-ascii?q?o=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ACAABQsQRch0O0hNFjGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBgmxtEieMEV+LKoINFIh9jjeBcywTAYd2IjQ?=
 =?us-ascii?q?JDQEDAQEBAQEBAgETAQEBCgsJCCkvgjYkAYJhAQEBAQIBAQIkEz8FAQkBAQoOC?=
 =?us-ascii?q?i4DHjYGARIFgxyBagMNBwEFpRMzGgKHWg2CHIJ+iR6CFoMBdC6CV4VfgiYCj3Q?=
 =?us-ascii?q?1j2kuBwKODoMjI16JDRQDhySJBIVwiz+CDTMaI4M8gicXEo4aMAEBMYEFAQGKH?=
 =?us-ascii?q?wSCSQEB?=
X-IPAS-Result: =?us-ascii?q?A0ACAABQsQRch0O0hNFjGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBgmxtEieMEV+LKoINFIh9jjeBcywTAYd2IjQJDQEDAQEBAQEBA?=
 =?us-ascii?q?gETAQEBCgsJCCkvgjYkAYJhAQEBAQIBAQIkEz8FAQkBAQoOCi4DHjYGARIFgxy?=
 =?us-ascii?q?BagMNBwEFpRMzGgKHWg2CHIJ+iR6CFoMBdC6CV4VfgiYCj3Q1j2kuBwKODoMjI?=
 =?us-ascii?q?16JDRQDhySJBIVwiz+CDTMaI4M8gicXEo4aMAEBMYEFAQGKHwSCSQEB?=
X-IronPort-AV: E=Sophos;i="5.56,309,1539673200"; 
   d="scan'208";a="54618075"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 02 Dec 2018 20:35:19 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1725901AbeLCEfS (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sun, 2 Dec 2018 23:35:18 -0500
Received: from mx.socionext.com ([202.248.49.38]:45835 "EHLO mx.socionext.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1725790AbeLCEfS (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Sun, 2 Dec 2018 23:35:18 -0500
Received: from unknown (HELO kinkan-ex.css.socionext.com) ([172.31.9.52])
  by mx.socionext.com with ESMTP; 03 Dec 2018 13:35:14 +0900
Received: from mail.mfilter.local (m-filter-2 [10.213.24.62])
        by kinkan-ex.css.socionext.com (Postfix) with ESMTP id 504E918005E;
        Mon,  3 Dec 2018 13:35:14 +0900 (JST)
Received: from 172.31.9.53 (172.31.9.53) by m-FILTER with ESMTP; Mon, 3 Dec 2018 13:35:14 +0900
Received: from yuzu.css.socionext.com (yuzu [172.31.8.45])
        by iyokan.css.socionext.com (Postfix) with ESMTP id B365D40304;
        Mon,  3 Dec 2018 13:35:13 +0900 (JST)
Received: from [127.0.0.1] (unknown [10.213.132.48])
        by yuzu.css.socionext.com (Postfix) with ESMTP id 904C0120455;
        Mon,  3 Dec 2018 13:35:13 +0900 (JST)
Date: Mon, 03 Dec 2018 13:35:13 +0900
From: Kunihiko Hayashi <hayashi.kunihiko@socionext.com>
To: Florian Fainelli <f.fainelli@gmail.com>,
        Heiner Kallweit <hkallweit1@gmail.com>
Subject: Re: [RFC PATCH net v2] net: phy: Fix the issue that netif always links up after resuming
Cc: Andrew Lunn <andrew@lunn.ch>,
        "David S. Miller" <davem@davemloft.net>, netdev@vger.kernel.org,
        linux-kernel@vger.kernel.org
In-Reply-To: <47b5606c-564c-2fe8-0683-65288dafe028@gmail.com>
References: <26e04d2e-16e5-ac0b-daab-931b8f5a0103@gmail.com> <47b5606c-564c-2fe8-0683-65288dafe028@gmail.com>
Message-Id: <20181203133512.57D3.4A936039@socionext.com>
MIME-Version: 1.0
Content-Type: text/plain; charset="US-ASCII"
Content-Transfer-Encoding: 7bit
X-Mailer: Becky! ver. 2.70 [ja]
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi Florian Heiner,

On Fri, 30 Nov 2018 19:47:37 +0100 <hkallweit1@gmail.com> wrote:

> On 30.11.2018 18:46, Florian Fainelli wrote:
> > 
> > 
> > On 11/30/2018 1:25 AM, Kunihiko Hayashi wrote:
> >> Even though the link is down before entering hibernation,
> >> there is an issue that the network interface always links up after resuming
> >> from hibernation.
> >>
> >> The phydev->state is PHY_READY before enabling the network interface, so
> >> the link is down. After resuming from hibernation, the phydev->state is
> >> forcibly set to PHY_UP in mdio_bus_phy_restore(), and the link becomes up.
> >>
> >> This patch adds a new convenient function to check whether the PHY is in
> >> a started state, and expects to solve the issue by changing phydev->state
> >> to PHY_UP and calling phy_start_machine() only when the PHY is started.
> >>
> >> Suggested-by: Heiner Kallweit <hkallweit1@gmail.com>
> >> Signed-off-by: Kunihiko Hayashi <hayashi.kunihiko@socionext.com>
> >> ---
> >>  drivers/net/phy/phy.c        |  2 +-
> >>  drivers/net/phy/phy_device.c |  9 +++++----
> >>  include/linux/phy.h          | 10 ++++++++++
> >>  3 files changed, 16 insertions(+), 5 deletions(-)
> >>
> >> diff --git a/drivers/net/phy/phy.c b/drivers/net/phy/phy.c
> >> index 1d73ac3..f484d03 100644
> >> --- a/drivers/net/phy/phy.c
> >> +++ b/drivers/net/phy/phy.c
> >> @@ -670,7 +670,7 @@ void phy_stop_machine(struct phy_device *phydev)
> >>  	cancel_delayed_work_sync(&phydev->state_queue);
> >>  
> >>  	mutex_lock(&phydev->lock);
> >> -	if (phydev->state > PHY_UP && phydev->state != PHY_HALTED)
> >> +	if (phy_is_started(phydev))
> >>  		phydev->state = PHY_UP;
> >>  	mutex_unlock(&phydev->lock);
> >>  }
> >> diff --git a/drivers/net/phy/phy_device.c b/drivers/net/phy/phy_device.c
> >> index ab33d17..2c39717 100644
> >> --- a/drivers/net/phy/phy_device.c
> >> +++ b/drivers/net/phy/phy_device.c
> >> @@ -309,10 +309,11 @@ static int mdio_bus_phy_restore(struct device *dev)
> >>  		return ret;
> >>  
> >>  	/* The PHY needs to renegotiate. */
> >> -	phydev->link = 0;
> >> -	phydev->state = PHY_UP;
> >> -
> >> -	phy_start_machine(phydev);
> >> +	if (phy_is_started(phydev)) {
> >> +		phydev->link = 0;
> >> +		phydev->state = PHY_UP;
> >> +		phy_start_machine(phydev);
> >> +	}
> > 
> > Don't you need some of these steps to be performed under phydev->lock
> > being held? See comment below.
> > 
> Yes, locking should be done. The old code sets phydev->state
> w/o holding the lock, I'd says this was wrong.

Indeed. The phydev->state should be set with locking the mutex even here.

And it seems that setting phydev->link and calling phy_start_machine() don't
need to hold the lock. Is it correct?

> >>  
> >>  	return 0;
> >>  }
> >> diff --git a/include/linux/phy.h b/include/linux/phy.h
> >> index 3ea87f7..c194b45 100644
> >> --- a/include/linux/phy.h
> >> +++ b/include/linux/phy.h
> >> @@ -898,6 +898,16 @@ static inline bool phy_is_pseudo_fixed_link(struct phy_device *phydev)
> >>  }
> >>  
> >>  /**
> >> + * phy_is_started - Convenience function for testing whether a PHY is in
> >> + * a started state
> >> + * @phydev: the phy_device struct
> >> + */
> >> +static inline bool phy_is_started(struct phy_device *phydev)
> >> +{
> > 
> > An assert with the phydev->lock mutex being held here would greatly
> > help, because otherwise this is possibly racy.
> > 
> Have a look at __phy_resume() to see what is meant with this comment.

I see. I found that there was a lock detection in this function.
The phy_is_started() should have the same detection, shouldn't it?

Thank you,

> >> +	return phydev->state >= PHY_UP && phydev->state != PHY_HALTED;
> >> +}
> >> +
> >> +/**
> >>   * phy_write_mmd - Convenience function for writing a register
> >>   * on an MMD on a given PHY.
> >>   * @phydev: The phy_device struct
> >>
> > 

---
Best Regards,
Kunihiko Hayashi


