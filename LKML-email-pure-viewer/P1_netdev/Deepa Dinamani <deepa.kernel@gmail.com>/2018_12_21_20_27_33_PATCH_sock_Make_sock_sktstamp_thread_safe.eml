Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:55:05 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id A680F580522;
	Fri, 21 Dec 2018 12:31:07 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga004-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 21 Dec 2018 12:31:06 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AoqTD9BMz/lMvAcdn7Sgl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KP/ypsbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Xymp4aV2Rx/ykC?=
 =?us-ascii?q?oJNyA3/nzZhMJzi6xbuwqhqh5kzoLIfI2YLuZyc7nBcd8GQ2dKQ8ZfVzZGAoO5?=
 =?us-ascii?q?d4YBAfQOMvhAr4bnulAAoxq+BQ+2C+Pq0DBIgH721rA93us8Dw7JwhQgEMgUvH?=
 =?us-ascii?q?TXstr1LqESXv6xzKTTwjXDaulZ2Tb56ITSbh8hpvSMUKt2fMHMykcvDxvIgkuM?=
 =?us-ascii?q?pYHhJT+Zy+oAv3aB4+Z9Vu+jl3QrpgBzrzS3wsohiZPFipwbx13L7yl0wJg5Kc?=
 =?us-ascii?q?emREN1fdKpFoZbuTuAOItsWMwiRnlluCYkxb0Cvp62ZDYKyJs5yB7FcfCHcJaH?=
 =?us-ascii?q?4gjlVOmPJTd0nnVleKiwhxqq8EigzPPzVtWs3VpUsiZIlsPAum0D2hDN8MSLV/?=
 =?us-ascii?q?hw8lu71TuO1Q3f8uRELlo1larfJZ4h2Lkwlp8LvETHHy/2nlj2jaCPekUn5Oeo?=
 =?us-ascii?q?8eLnbavippOFMI91hAf+Pbo0msGkH+Q4PRYBX3KB9eS/yrLj50v5T6tOjvEsla?=
 =?us-ascii?q?nZqp/aKdwBpqGlGw9Vzpoj6xGnAjei0dQYnmcIIEhKeRKalIXpP1DOIPblDfaw?=
 =?us-ascii?q?mViskTFrx+zYMb3lGJnCMn/DkLL5d7Zn90Fc0BYzzcxY559MCrEOOvPzWlPru9?=
 =?us-ascii?q?zfFBM5MxG0zPzhCNVyzY4eXWOPAqmEMKLdq1OI5+QvI/WSa48RojryN/8l5/v2?=
 =?us-ascii?q?h38jhVAdZbWp3YcQaH2gBPtmOEWZYX3vgtsbC2cFpAg+QffuiF2DVz5TenmzU7?=
 =?us-ascii?q?g95jE9FIKpE4PDSpqxj7yG2SexBodWaXxeClCQDXfocJ2JW/QWZyKUOMNhlj0E?=
 =?us-ascii?q?WqKnS48uzhyusA76y7x6Luvb4CEYtJTj1MRr6O3Xjx096Tt0D8GF2WGXU250hn?=
 =?us-ascii?q?8IRyMx3K1nvENy0EmD3rZij/xYD9NT4ehJXRk8NZLby+x6CNXyWgbac9eNSVam?=
 =?us-ascii?q?RMimAD4rQtIwxd8Of1hyG9G4gh/f2CqqBqcfl6aXC5ws7qLcw3/xKt5gxHncyq?=
 =?us-ascii?q?kukUMqQstVOm2gna5w6Q7TCpXNk0WYkaaqaKsd0DTM9GeF0WqBokVYXBRsXqXC?=
 =?us-ascii?q?WHAVflHWosjh5kPeU7+uDqwqMhdAyc6HLatKdt3pjFVcSPf/ItjeZHixm2OxBR?=
 =?us-ascii?q?aOybOBd47qe2Qb3CXAB0kIiQET/XCaNQcgAietuX7RDDtrFVj3eUPj7fF+qG+n?=
 =?us-ascii?q?Tk8z1wyFdUlh2KS6+xELhf2QUegc3q8Ztyg7rTV0H1G938zNBtqEpgpherhcYN?=
 =?us-ascii?q?wn7FdG02LZqxJyPpi6I69+gV4edhx9v1ny2BVvFoVAjc8qoWsqzQpvM66XzElN?=
 =?us-ascii?q?djKY3Z/qPL3XJXL//BSua67Qx1Hf38ya+qYJ6PQktVrjuBulGVYl83Viy9NVyW?=
 =?us-ascii?q?eT5o3WDAoOVpL8Slw39xlmqL7AeCky+oTU2WdqMaaqqD/C2sslC/c/xRakYthQ?=
 =?us-ascii?q?LrmEFAj0E8ABA8iuKeoqm0Wmbx4ePeBS8rI0MN2id/ecxKGrO+Ngliq8jWtb+I?=
 =?us-ascii?q?B9zl6M9y1kR+/I3pYJ2fGZ0hGcVzfhilesqcT3mYFCZTEPEWuz0ynkBIhNZqJs?=
 =?us-ascii?q?eYYHE3uhI8qyxt9mnZ7iR2ZY9EK/B1MBwMKpewCdb0b+3Q1T0kQbu2enljG7zz?=
 =?us-ascii?q?x3kjEpqLSQ3CrVzuTmdRoHPHNLRWZ4gVftJ4i0k84VXEyyYwc1kxul4F7wx7JH?=
 =?us-ascii?q?q6RnM2nTXUBIcjD2Lm54Vau8rLiCY89J6J4ztSVXUeK8YU2VS7Lnohsa1T/jEH?=
 =?us-ascii?q?VaxDwhaz6qvZD5lQRgiG2BNHZzsGbZecZoyBfc/tPcRORd3jobRCZijznXCUOx?=
 =?us-ascii?q?P92o/dWSipfCvfqyV2OnVp1PbybryZmMuze85W1vGRe/hey8msX7EQgm1i/2z9?=
 =?us-ascii?q?xqVSTLrBnmeIXq2bq1Mfl7fkZ2Hl/z8NR1GptxkoYrgJEQ2H4ahoia/HYdkGfz?=
 =?us-ascii?q?N8lb1rz6bHYXWTELxNvV6hD/2EJ/NnKJ2575VnKFz8t9YNm6Z3ka2yMn4MBMFa?=
 =?us-ascii?q?eU96dEnSpur1q8rALRZ+V9nzgHxfsv7n4an/8GuA43wiqBBbASGFFSPTbwmBSQ?=
 =?us-ascii?q?89C+sKJXaX60freq00p+mc2hAKuGogFBQ3v5fpYiHSlt7sRwKl7M0Xvz6p36d9?=
 =?us-ascii?q?nUd94cqhqUkxLYhehPNJ0xjuYKhTZgOW/lv30q0es7ggJ13Z2goIiLMWZt/L+6?=
 =?us-ascii?q?Ah5FMD36fdgT9yrpjaZfmMaWwo+uEo9gGjUNQJvnU/aoHCgOuvTgMgaECCc8pW?=
 =?us-ascii?q?uDGbrDAQ+f719rrnLIE5C2LnGXOWMWzdN4SBmGI0xfhg8UUS4+np44EACq2cPg?=
 =?us-ascii?q?fF145jAX+l73tB9Mxvh0OBn4V2fVvB2oZSssSJiDMBpW6RlP50fLPsyf7eJzHC?=
 =?us-ascii?q?BY8oeirAyXLWybaBpHDXsUWkyfHF3jOriu5d/d8+mXHOa+Lv3OYamQpuxaTfuH?=
 =?us-ascii?q?2ZWv0o5+9TaWKsqPJmViD+E82kdbR395Bt/Wmy8RRC0XjS7Na8+bqQy4+i12qM?=
 =?us-ascii?q?C/7fvqVBju5YuJF7tdL9Fv9wqqjqeEMu6anDx5JipA1pMQ2X/Iz6AS3EITiyFr?=
 =?us-ascii?q?bTWiDa4MujLNTK3OnK9aFBobayJ1NMtV4KMwxAhNOcjHitzr0r50lOI6C1BAVV?=
 =?us-ascii?q?b5gMGmedQKI32hNFPAHEuKNK6JJTvOw8H2Z6OzUbxRjOVOuB22tjaWCEvjPjWF?=
 =?us-ascii?q?lzn0WBGjK+BMjCeHPBNAvIGxaApiCW/mTIGuVhruPNZpgDgezbQqi3bOMmAAdz?=
 =?us-ascii?q?5xbwcFqLCM4S5GqutwFnYH7Xd/K+SA3SGD4K2QLpcQrOsuASluke9eyGo1xqET?=
 =?us-ascii?q?7yxeQvFx3izIoY1AuVajx8WCxyJuGDZPrD9OjYSK9RFuNKjB/99DVGzC8RYl4m?=
 =?us-ascii?q?CZChBMrNxgXI6885tMw8TCwfqgYAxJ9MjZqJMR?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AnAAA0TR1ch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUwUBAQsBg2snjHWNPokTjjiBcxMBARgTAYcwIjYHDQEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BCA0JCCkjDII6IoJ2AiQZARsdAQMCCQIFEAc0Ax4CEQEFAQ4VEgWDHYFpAQMVB?=
 =?us-ascii?q?ZpTPIwVFgUBF4J3BYJEgXgKGScNXoE3AgYSh2yDJYEcghaGeoFkH4YGAoknhzm?=
 =?us-ascii?q?QMjMHAoIpiC6DX4MnDBiJeodkASyJJ4YQihICBAIEBQIFDyGBLAKCBU0jgQGCO?=
 =?us-ascii?q?4IbDBeDSop0HzKBBAEBAYthDxeCJwEB?=
X-IPAS-Result: =?us-ascii?q?A0AnAAA0TR1ch0O0hNFkHAEBAQQBAQcEAQGBUwUBAQsBg2s?=
 =?us-ascii?q?njHWNPokTjjiBcxMBARgTAYcwIjYHDQEDAQEBAQEBAgETAQEBCA0JCCkjDII6I?=
 =?us-ascii?q?oJ2AiQZARsdAQMCCQIFEAc0Ax4CEQEFAQ4VEgWDHYFpAQMVBZpTPIwVFgUBF4J?=
 =?us-ascii?q?3BYJEgXgKGScNXoE3AgYSh2yDJYEcghaGeoFkH4YGAoknhzmQMjMHAoIpiC6DX?=
 =?us-ascii?q?4MnDBiJeodkASyJJ4YQihICBAIEBQIFDyGBLAKCBU0jgQGCO4IbDBeDSop0HzK?=
 =?us-ascii?q?BBAEBAYthDxeCJwEB?=
X-IronPort-AV: E=Sophos;i="5.56,382,1539673200"; 
   d="scan'208";a="56166185"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 21 Dec 2018 12:31:06 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2390334AbeLUU2C (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Fri, 21 Dec 2018 15:28:02 -0500
Received: from mail-pf1-f195.google.com ([209.85.210.195]:46703 "EHLO
        mail-pf1-f195.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S2388606AbeLUU2B (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 21 Dec 2018 15:28:01 -0500
Received: by mail-pf1-f195.google.com with SMTP id c73so3070507pfe.13;
        Fri, 21 Dec 2018 12:27:59 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=from:to:cc:subject:date:message-id;
        bh=xIRdOhGKRSWRyxL3s5x83RnEVTZuPGUkWvFDmjWCx+I=;
        b=DpSEw3WlTBFxkovyU7WfqVuf3p3qF4kRre2Vsthq2C1jIfVaWCyENkznIvQ7KMybI0
         HdPgafdX9sjzH+lW8j5+j03ggDR6hobxhSXo9s2fQL7tuN7x1rObfv049Q9n9sATkhEE
         c4Bwum1ypf0GtFTSTKOHJaic7Wuw47MleUR9olWKi5IRZ/CMinbH4rtIzDy+NGuvou9q
         Qhq3szgg91cI+Yzx1CwJMuOCtIHr7H73G4pzF+/RJqenW4z7bP45wpiW+Aw3R1bgQdXw
         lKZxIoSkAtAx09LUDLzZg325UBrctvjXiRW3WQAkgoEi4lue2xWROBSnCKAmiin7aiRn
         s1uw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id;
        bh=xIRdOhGKRSWRyxL3s5x83RnEVTZuPGUkWvFDmjWCx+I=;
        b=QH/zGIf4F+fGsWBTW9aOBNCbw7iV97GsMQjk5CXiTyaa8ocxNS+XeKp4EbBYtohKtt
         udAXl9gJrUVLi78bZYr6wecXhv9l2Tdtvfw5V0FCDbeIniBZCHO1nWH4zmUapvEOzGp1
         5AxyHioo3lej3QlwN+RcDdqxSNUtM/VAvUxAG2KbWxX/aFzqSa+rYeGmrcgUjbJb3+zu
         YpdRtGtaLyeV69DAXh6q/VBi/CL1npPmtRRmzd9H9e+PCH/TK0FTF+emVAqWeWZZsYsh
         NB4peEriSQs4ndz+pwUw7XRN1WawR3zNZlQsWMR8KNnaKkNEklKI6qLgU+/sl8EEJVlz
         0sbQ==
X-Gm-Message-State: AJcUukehl2VtAdQEqufs6ZTXw8X84xEYSXYwPEHu3/feQWVGtivRSQLo
        1AL2d1cuizk8JwydJxpKujY41QiG
X-Google-Smtp-Source: ALg8bN5BKmh0iWhQNpOXwYCs14fdeVrROdGxSyx3VJWdF5DdSgencF3D8ORM05LOIVkigykVRP1dZw==
X-Received: by 2002:a63:ff16:: with SMTP id k22mr3837689pgi.244.1545424079137;
        Fri, 21 Dec 2018 12:27:59 -0800 (PST)
Received: from deepa-ubuntu.lan (c-98-234-52-230.hsd1.ca.comcast.net. [98.234.52.230])
        by smtp.gmail.com with ESMTPSA id r12sm29108794pgv.83.2018.12.21.12.27.57
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Fri, 21 Dec 2018 12:27:58 -0800 (PST)
From: Deepa Dinamani <deepa.kernel@gmail.com>
To: davem@davemloft.net, netdev@vger.kernel.org,
        linux-kernel@vger.kernel.org
Cc: viro@zeniv.linux.org.uk, arnd@arndb.de, y2038@lists.linaro.org
Subject: [PATCH] sock: Make sock->sk_tstamp thread-safe
Date: Fri, 21 Dec 2018 12:27:33 -0800
Message-Id: <20181221202733.19627-1-deepa.kernel@gmail.com>
X-Mailer: git-send-email 2.17.1
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Al Viro mentioned that there is probably a race condition
lurking in accesses of sk_tstamp on 32-bit machines.

sock->sk_tstamp is of type ktime_t which is always an s64.
On a 32 bit architecture, we might run into situations of
unsafe access as the access to the field becomes non atomic.

Use seqlocks for synchronization.
This allows us to avoid using spinlocks for readers as
readers do not need mutual exclusion.

Another approach to solve this is to require sk_lock for all
modifications of the timestamps. The current approach allows
for timestamps to have their own lock: sk_tstamp_lock.
This allows for the patch to not compete with already
existing critical sections, and side effects are limited
to the paths in the patch.

The addition of the new field maintains the data locality
optimizations from
commit 9115e8cd2a0c ("net: reorganize struct sock for better data
locality")

Note that all the instances of the sk_tstamp accesses
are either through the ioctl or the syscall recvmsg.

Signed-off-by: Deepa Dinamani <deepa.kernel@gmail.com>
---
 include/net/sock.h | 16 +++++++++++++---
 net/compat.c       | 30 +++++++++++++++++++++++++-----
 net/core/sock.c    | 34 +++++++++++++++++++++++++++++-----
 3 files changed, 67 insertions(+), 13 deletions(-)

diff --git a/include/net/sock.h b/include/net/sock.h
index fe58aec00d09..2cb641606533 100644
--- a/include/net/sock.h
+++ b/include/net/sock.h
@@ -298,6 +298,7 @@ struct sock_common {
   *	@sk_filter: socket filtering instructions
   *	@sk_timer: sock cleanup timer
   *	@sk_stamp: time stamp of last packet received
+  *	@sk_stamp_seq: lock for accessing sk_stamp
   *	@sk_tsflags: SO_TIMESTAMPING socket options
   *	@sk_tskey: counter to disambiguate concurrent tstamp requests
   *	@sk_zckey: counter to order MSG_ZEROCOPY notifications
@@ -474,6 +475,7 @@ struct sock {
 	const struct cred	*sk_peer_cred;
 	long			sk_rcvtimeo;
 	ktime_t			sk_stamp;
+	seqlock_t		sk_stamp_seq;
 	u16			sk_tsflags;
 	u8			sk_shutdown;
 	u32			sk_tskey;
@@ -2311,8 +2313,11 @@ sock_recv_timestamp(struct msghdr *msg, struct sock *sk, struct sk_buff *skb)
 	    (hwtstamps->hwtstamp &&
 	     (sk->sk_tsflags & SOF_TIMESTAMPING_RAW_HARDWARE)))
 		__sock_recv_timestamp(msg, sk, skb);
-	else
+	else {
+		write_seqlock(&sk->sk_stamp_seq);
 		sk->sk_stamp = kt;
+		write_sequnlock(&sk->sk_stamp_seq);
+	}
 
 	if (sock_flag(sk, SOCK_WIFI_STATUS) && skb->wifi_acked_valid)
 		__sock_recv_wifi_status(msg, sk, skb);
@@ -2332,10 +2337,15 @@ static inline void sock_recv_ts_and_drops(struct msghdr *msg, struct sock *sk,
 
 	if (sk->sk_flags & FLAGS_TS_OR_DROPS || sk->sk_tsflags & TSFLAGS_ANY)
 		__sock_recv_ts_and_drops(msg, sk, skb);
-	else if (unlikely(sock_flag(sk, SOCK_TIMESTAMP)))
+	else if (unlikely(sock_flag(sk, SOCK_TIMESTAMP))) {
+		write_seqlock(&sk->sk_stamp_seq);
 		sk->sk_stamp = skb->tstamp;
-	else if (unlikely(sk->sk_stamp == SK_DEFAULT_STAMP))
+		write_sequnlock(&sk->sk_stamp_seq);
+	} else if (unlikely(sk->sk_stamp == SK_DEFAULT_STAMP)) {
+		write_seqlock(&sk->sk_stamp_seq);
 		sk->sk_stamp = 0;
+		write_sequnlock(&sk->sk_stamp_seq);
+	}
 }
 
 void __sock_tx_timestamp(__u16 tsflags, __u8 *tx_flags);
diff --git a/net/compat.c b/net/compat.c
index 6c9fceeefac0..3022f4941687 100644
--- a/net/compat.c
+++ b/net/compat.c
@@ -459,6 +459,7 @@ int compat_sock_get_timestamp(struct sock *sk, struct timeval __user *userstamp)
 {
 	struct compat_timeval __user *ctv;
 	int err;
+	unsigned int seq;
 	struct timeval tv;
 
 	if (COMPAT_USE_64BIT_TIME)
@@ -467,11 +468,20 @@ int compat_sock_get_timestamp(struct sock *sk, struct timeval __user *userstamp)
 	ctv = (struct compat_timeval __user *) userstamp;
 	err = -ENOENT;
 	sock_enable_timestamp(sk, SOCK_TIMESTAMP);
-	tv = ktime_to_timeval(sk->sk_stamp);
+
+	do {
+		seq = read_seqbegin(&sk->sk_stamp_seq);
+		tv = ktime_to_timeval(sk->sk_stamp);
+	} while (read_seqretry(&sk->sk_stamp_seq, seq));
+
 	if (tv.tv_sec == -1)
 		return err;
 	if (tv.tv_sec == 0) {
-		sk->sk_stamp = ktime_get_real();
+		ktime_t kt = ktime_get_real();
+
+		write_seqlock(&sk->sk_stamp_seq);
+		sk->sk_stamp = kt;
+		write_sequnlock(&sk->sk_stamp_seq);
 		tv = ktime_to_timeval(sk->sk_stamp);
 	}
 	err = 0;
@@ -486,6 +496,7 @@ int compat_sock_get_timestampns(struct sock *sk, struct timespec __user *usersta
 {
 	struct compat_timespec __user *ctv;
 	int err;
+	unsigned int seq;
 	struct timespec ts;
 
 	if (COMPAT_USE_64BIT_TIME)
@@ -494,12 +505,21 @@ int compat_sock_get_timestampns(struct sock *sk, struct timespec __user *usersta
 	ctv = (struct compat_timespec __user *) userstamp;
 	err = -ENOENT;
 	sock_enable_timestamp(sk, SOCK_TIMESTAMP);
-	ts = ktime_to_timespec(sk->sk_stamp);
+
+	do {
+		seq = read_seqbegin(&sk->sk_stamp_seq);
+		ts = ktime_to_timespec(sk->sk_stamp);
+	} while (read_seqretry(&sk->sk_stamp_seq, seq));
+
 	if (ts.tv_sec == -1)
 		return err;
 	if (ts.tv_sec == 0) {
-		sk->sk_stamp = ktime_get_real();
-		ts = ktime_to_timespec(sk->sk_stamp);
+		ktime_t kt = ktime_get_real();
+
+		write_seqlock(&sk->sk_stamp_seq);
+		sk->sk_stamp = kt;
+		write_sequnlock(&sk->sk_stamp_seq);
+		ts = ktime_to_timespec(kt);
 	}
 	err = 0;
 	if (put_user(ts.tv_sec, &ctv->tv_sec) ||
diff --git a/net/core/sock.c b/net/core/sock.c
index f0e0e12b2e0d..a9a99af24a95 100644
--- a/net/core/sock.c
+++ b/net/core/sock.c
@@ -2783,6 +2783,7 @@ void sock_init_data(struct socket *sock, struct sock *sk)
 	sk->sk_sndtimeo		=	MAX_SCHEDULE_TIMEOUT;
 
 	sk->sk_stamp = SK_DEFAULT_STAMP;
+	seqlock_init(&sk->sk_stamp_seq);
 	atomic_set(&sk->sk_zckey, 0);
 
 #ifdef CONFIG_NET_RX_BUSY_POLL
@@ -2880,15 +2881,27 @@ EXPORT_SYMBOL(lock_sock_fast);
 int sock_get_timestamp(struct sock *sk, struct timeval __user *userstamp)
 {
 	struct timeval tv;
+	unsigned int seq;
 
 	sock_enable_timestamp(sk, SOCK_TIMESTAMP);
-	tv = ktime_to_timeval(sk->sk_stamp);
+
+	do {
+		seq = read_seqbegin(&sk->sk_stamp_seq);
+		tv = ktime_to_timeval(sk->sk_stamp);
+	} while (read_seqretry(&sk->sk_stamp_seq, seq));
+
 	if (tv.tv_sec == -1)
 		return -ENOENT;
 	if (tv.tv_sec == 0) {
-		sk->sk_stamp = ktime_get_real();
-		tv = ktime_to_timeval(sk->sk_stamp);
+		ktime_t kt = ktime_get_real();
+
+		write_seqlock(&sk->sk_stamp_seq);
+		sk->sk_stamp = kt;
+		write_sequnlock(&sk->sk_stamp_seq);
+
+		tv = ktime_to_timeval(kt);
 	}
+
 	return copy_to_user(userstamp, &tv, sizeof(tv)) ? -EFAULT : 0;
 }
 EXPORT_SYMBOL(sock_get_timestamp);
@@ -2896,13 +2909,24 @@ EXPORT_SYMBOL(sock_get_timestamp);
 int sock_get_timestampns(struct sock *sk, struct timespec __user *userstamp)
 {
 	struct timespec ts;
+	unsigned int seq;
 
 	sock_enable_timestamp(sk, SOCK_TIMESTAMP);
-	ts = ktime_to_timespec(sk->sk_stamp);
+
+	do {
+		seq = read_seqbegin(&sk->sk_stamp_seq);
+		ts = ktime_to_timespec(sk->sk_stamp);
+	} while (read_seqretry(&sk->sk_stamp_seq, seq));
+
 	if (ts.tv_sec == -1)
 		return -ENOENT;
 	if (ts.tv_sec == 0) {
-		sk->sk_stamp = ktime_get_real();
+		ktime_t kt = ktime_get_real();
+
+		write_seqlock(&sk->sk_stamp_seq);
+		sk->sk_stamp = kt;
+		write_sequnlock(&sk->sk_stamp_seq);
+
 		ts = ktime_to_timespec(sk->sk_stamp);
 	}
 	return copy_to_user(userstamp, &ts, sizeof(ts)) ? -EFAULT : 0;
-- 
2.17.1

