Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  15 Dec 2018 13:11:52 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga008.fm.intel.com (fmsmga008.fm.intel.com [10.253.24.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id A4FE458061F;
	Fri, 14 Dec 2018 19:17:46 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by fmsmga008-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 14 Dec 2018 19:17:45 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A8jwJ/Rc+BrKs9E+7iywOX2dZlGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc6+ZRKN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4qF2QxHqlS?=
 =?us-ascii?q?gHLSY0/mHJhMJtgqxVoxWvqB5xw4HbfI6VNeF+frvfcN4BWWpNQtxcWzBbD4+g?=
 =?us-ascii?q?c4cCCfcKM+ZCr4n6olsDtQGwCheqBOPg1zRGgH721rA93uQlEAHGxBIvH9QBsH?=
 =?us-ascii?q?nastn5KbwfUeCozKbSwzTMcfJW1S3h54jPdxAsuPeBVq9zf8rJ0UQjCR/Jg1GK?=
 =?us-ascii?q?pYD4MT6ZyP4Bv3WY4uZ8T+6iimwqpxlsrjSz3MshiJTFipgLxlzY6Sl12og4Kc?=
 =?us-ascii?q?CgREN0YdOoCoVcui6eOodsXM8uXn9ktDwnxrACpJK2ejUBxo49yB7FcfOHdpCF?=
 =?us-ascii?q?4hL9W+aVJjd1nGxleL2hiBao60SgyfPzVtOy0FlUqipJiN7MtmoC1xDL68iHTO?=
 =?us-ascii?q?Vy/lu51DqRywze7vtILV06mKbFMZIt3709moYJvUnCHCL6gED2g7WXdkUg9Oio?=
 =?us-ascii?q?8ePnYrD+q5+YNo90jBz+M6s3lsy8H+s4KA4OUHaf+eil073i80v5T6tQjvAtjK?=
 =?us-ascii?q?nZv47VJd4Bqq66HQBVyIAj5Ai7Dzu819QYh3YHIEpfeB2bl4jpJ03OIPfgAPe7?=
 =?us-ascii?q?glSskylky+rJP738GZjNKnnDkLH8fbdy8UJcyQwzzcxB6JJQEL0OPPXzWkrpvt?=
 =?us-ascii?q?zCEhA5KxC0w/rgCNhl1oMRQ2OPArODP6PVq1OI5v8vLPOKZI8aozv9L/kl5/jz?=
 =?us-ascii?q?jX42g1MdfK+p3YcJZ3C8BPhpP0KZYX/0iNcbDWgKphY+TPDtiFCaUz5TYGi9U7?=
 =?us-ascii?q?g/5jE8DoKmC4DDS5upgLyA2ie7A5JXanpHClCKDXfnaYGEV+0QZyKVJ89riiYE?=
 =?us-ascii?q?WqS5S489yRGusxf3xKB8LurU/S0Ytojv1MJv6O3Rjhwy8T10D8KA02CCVW10n2?=
 =?us-ascii?q?UIRyMo06B7u0By1lCD0a1gifxCCdNT/+9JUhs9NZPEzOx1EdbyVhjFfteIUlmm?=
 =?us-ascii?q?RNqmDCo1TtIwxd8Ofkl8F8+jjhDFwyqlHbsVm6aXC5wz96LWx2LxKNply3bayK?=
 =?us-ascii?q?khiEErTdZVOm24mKFz7QjTCJTPk0WCiamqc6MQ3CrO9GeGyWqDp0VYUA92UaXY?=
 =?us-ascii?q?UnETfErWrdLl5kzcS7+iE6goMgxEycSaMKtFdsXpjUlaRPfkINnRfni+m3muCh?=
 =?us-ascii?q?qSxrODdozqe34D0yXbE0UElwET/XCbNQkxHCuhomTeDCBwGlLreU/j7e5+qHaj?=
 =?us-ascii?q?RE8u0w6Kd1Fh16ay+hMNmfycSvYT3rUYuCchqzR4Bkq908jRC9qaowphfaNcYd?=
 =?us-ascii?q?wm7VdD1GLZsRF9P5O6I6BjgF4ebxp4v0f02xprDYVAlNAgrGk2wwpqNaKYzFRB?=
 =?us-ascii?q?eiuC0pD0JLLWJXf9/RC1Z6HNx1HRzcyZ+qEM6PQ/tVXupwWpFksk83V63NhZyX?=
 =?us-ascii?q?qc5pPWDAUMVZL9SFo49x9/p7vCeCky+5vU1WFwMamzqjLD288pCPE5xRq6ftZf?=
 =?us-ascii?q?MLmLFAn9E8ABA8iuKeoqm0Wmbx4ePeBS8rI0MN2id/ecxKGrO+Ngliq8jWtb+I?=
 =?us-ascii?q?B9zl6M9y1kR+7S3pYK3+uX3hGaWDf7lluhtN74mZpFZT0LAmWw0yzkC5NPaa1o?=
 =?us-ascii?q?eoYLD3yjI8m2xtV4mp7sVGRU9F+lB1MaxsCpfQCeYED63Q1VzU4Xu2ComTOkzz?=
 =?us-ascii?q?xolDEktqqe3C3Uz+XibhYHIXNLRG95gFfoIIi0ic0aXUeyYwgokhul+Vj1x6xB?=
 =?us-ascii?q?qKtjKGnTRF9CfzLqIGF6Tquwqr2CbtZN6JwyqyVXU+e8YVeARr7muRQa0CDjH2?=
 =?us-ascii?q?pYxD8lcTGnoZH5nx18iGKAI3d/tnvZecdsxRjB4NzQX+Je3j0DRCNgkznYGkC8?=
 =?us-ascii?q?P8W1/dWTj5rCsvqxV2W7Wp1RcCnry5iNtC+65W1sHB2+kOq/mtzhEQgmzyD708?=
 =?us-ascii?q?NmWjnPrBb5eoPrzbi1Mfp7fkl0A1/x88l6FZt/kocqhJEQxGIVhpOa/XcclWfz?=
 =?us-ascii?q?MNNb2b/xbXYXRD4LxcLV7xbh2EF5Mn2JwIf5XG2HwsR9f9m6fn8W2iUl4sBPCa?=
 =?us-ascii?q?eU76ZLkTF7o1WmtgLRfeZyni0GxvQw8n4ajPoEuA4sziWbH7ATElNUPS3qlxSU?=
 =?us-ascii?q?8d++qL9ba3qocbi1zEB+h8yuDKmeogFAX3b0YosiHSh17sllMVPDynvz6pz/eN?=
 =?us-ascii?q?nLbNIerRmUkxbGj+hIJ5M9jPsKhSx7OW3juX0p0fI0jRtr3ZuipoiIN31t/L6l?=
 =?us-ascii?q?Ah5fLjD6fNkc+jbpjaZDhMqW252vE45lGjUKWpvoUP2pHCgTtfThKwaBDjk8pm?=
 =?us-ascii?q?2HFrrYGA+V8F1moG7XE5C3K3GXI2EUzdd4SxmYOkNfmxoYXCkgkp46CwCqx9Hh?=
 =?us-ascii?q?cEFj6TAK/VP4rhpMyuR1NxjwSGvfpQGoaisqR5ibNhZZ8gZC50LNO8yE8u1zBz?=
 =?us-ascii?q?1Y/oGmrAGVKm2bYBlIDXgUWkOeAVDvJKKu5d7G8+iXHee+K/rOYbOTqe1RTfuI?=
 =?us-ascii?q?xJSv0pd48DaILMmAIn5iD/gj0EpZQX95A9jZmykISyEPlyLCcc+bpBS/+i12tM?=
 =?us-ascii?q?y/8+7rWAXg5YSREbtSLM5v9guygaeCMe6QmSl4JSxZ1pMK2X/H1rwf0EQOhCFp?=
 =?us-ascii?q?cjmnCa4AujLVTKLMhq9XCAYWZDluNMRT9aIzwAlMNdTfitP0zbN4iv81C1FYVV?=
 =?us-ascii?q?3ugM2pZMoKI32jO1PDHkqEKLOGJTjTycHtfay8UaFQjPlTtxCopTabEkrjMi6f?=
 =?us-ascii?q?mDXzSx+vMf9DjCeAMRxauYG9dAttCGf5QNLnbB27LMF4jTkszbIogXPKMHYWMS?=
 =?us-ascii?q?JgfENVsr2Q8SRYj+1/GmNb6HplKOiEmyCB4OjZKpYZq/1rAitvmuJe4XQ6zaZV?=
 =?us-ascii?q?7S5eSPx0nivSssBho1W8nuaTzTpnVUkGljEe0I6Co0hnEanQ6JRFXXHK4FQL4H?=
 =?us-ascii?q?nGWDoQoN4wMtDptOh0y5CbkKPrJTFNqIiN1csBDtfZKYSMN393YkmhIyLdEAZQ?=
 =?us-ascii?q?FW3jDmrYnUEIyPw=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AcAAA3cRRch0O0hNFkHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGBWoIRJwqMC4t4gg0Ul0OBdikTAYFLhXwiNAkNAQMBAQEBAQECARMBAQE?=
 =?us-ascii?q?KCwkIKS+CNiKCZQMDAQIkUgYJAQEfMQNUBg4FBYMcggEFpjszijCHfVWDbIIWg?=
 =?us-ascii?q?3WLDAKBKgEBAYdxGoF+hBZ9Uo98AQYCAQ2BTo9/AhaBXY91ikCQZ4IOcIFugU6?=
 =?us-ascii?q?CJxcSbQEHjSMyAQExgQQBAQEOimMHgSeBHwEB?=
X-IPAS-Result: =?us-ascii?q?A0AcAAA3cRRch0O0hNFkHQEBBQEHBQGBUQgBCwGBWoIRJwq?=
 =?us-ascii?q?MC4t4gg0Ul0OBdikTAYFLhXwiNAkNAQMBAQEBAQECARMBAQEKCwkIKS+CNiKCZ?=
 =?us-ascii?q?QMDAQIkUgYJAQEfMQNUBg4FBYMcggEFpjszijCHfVWDbIIWg3WLDAKBKgEBAYd?=
 =?us-ascii?q?xGoF+hBZ9Uo98AQYCAQ2BTo9/AhaBXY91ikCQZ4IOcIFugU6CJxcSbQEHjSMyA?=
 =?us-ascii?q?QExgQQBAQEOimMHgSeBHwEB?=
X-IronPort-AV: E=Sophos;i="5.56,355,1539673200"; 
   d="scan'208";a="56998632"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 14 Dec 2018 19:17:45 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730271AbeLODRg (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 14 Dec 2018 22:17:36 -0500
Received: from szxga05-in.huawei.com ([45.249.212.191]:16138 "EHLO huawei.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1729890AbeLODRf (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 14 Dec 2018 22:17:35 -0500
Received: from DGGEMS411-HUB.china.huawei.com (unknown [172.30.72.59])
        by Forcepoint Email with ESMTP id 0DC0181B73EA9;
        Sat, 15 Dec 2018 11:17:30 +0800 (CST)
Received: from linux-ioko.site (10.71.200.31) by
 DGGEMS411-HUB.china.huawei.com (10.3.19.211) with Microsoft SMTP Server id
 14.3.408.0; Sat, 15 Dec 2018 11:17:24 +0800
From: Peng Li <lipeng321@huawei.com>
To: <davem@davemloft.net>
CC: <netdev@vger.kernel.org>, <linux-kernel@vger.kernel.org>,
        <linuxarm@huawei.com>, <yisen.zhuang@huawei.com>,
        <salil.mehta@huawei.com>, <lipeng321@huawei.com>
Subject: [Patch net 10/10] net: hns: Fix ping failed when use net bridge and send multicast
Date: Sat, 15 Dec 2018 11:53:29 +0800
Message-ID: <1544846009-50276-11-git-send-email-lipeng321@huawei.com>
X-Mailer: git-send-email 1.9.1
In-Reply-To: <1544846009-50276-1-git-send-email-lipeng321@huawei.com>
References: <1544846009-50276-1-git-send-email-lipeng321@huawei.com>
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [10.71.200.31]
X-CFilter-Loop: Reflected
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From: Yonglong Liu <liuyonglong@huawei.com>

Create a net bridge, add eth and vnet to the bridge. The vnet is used
by a virtual machine. When ping the virtual machine from the outside
host and the virtual machine send multicast at the same time, the ping
package will lost.

The multicast package send to the eth, eth will send it to the bridge too,
and the bridge learn the mac of eth. When outside host ping the virtual
mechine, it will match the promisc entry of the eth which is not expected,
and the bridge send it to eth not to vnet, cause ping lost.

So this patch change promisc tcam entry position to the END of 512 tcam
entries, which indicate lower priority. And separate one promisc entry to
two: mc & uc, to avoid package match the wrong tcam entry.

Signed-off-by: Yonglong Liu <liuyonglong@huawei.com>
Signed-off-by: Peng Li <lipeng321@huawei.com>
---
 drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c | 257 +++++++++++++++++----
 1 file changed, 216 insertions(+), 41 deletions(-)

diff --git a/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c b/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c
index 97d62de..3b9e74b 100644
--- a/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c
+++ b/drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c
@@ -935,6 +935,62 @@ static void hns_dsaf_tcam_mc_cfg(
 }
 
 /**
+ * hns_dsaf_tcam_uc_cfg_vague - INT
+ * @dsaf_dev: dsa fabric device struct pointer
+ * @address,
+ * @ptbl_tcam_data,
+ */
+static void hns_dsaf_tcam_uc_cfg_vague(struct dsaf_device *dsaf_dev,
+				       u32 address,
+				       struct dsaf_tbl_tcam_data *tcam_data,
+				       struct dsaf_tbl_tcam_data *tcam_mask,
+				       struct dsaf_tbl_tcam_ucast_cfg *tcam_uc)
+{
+	spin_lock_bh(&dsaf_dev->tcam_lock);
+	hns_dsaf_tbl_tcam_addr_cfg(dsaf_dev, address);
+	hns_dsaf_tbl_tcam_data_cfg(dsaf_dev, tcam_data);
+	hns_dsaf_tbl_tcam_ucast_cfg(dsaf_dev, tcam_uc);
+	hns_dsaf_tbl_tcam_match_cfg(dsaf_dev, tcam_mask);
+	hns_dsaf_tbl_tcam_data_ucast_pul(dsaf_dev);
+
+	/*Restore Match Data*/
+	tcam_mask->tbl_tcam_data_high = 0xffffffff;
+	tcam_mask->tbl_tcam_data_low = 0xffffffff;
+	hns_dsaf_tbl_tcam_match_cfg(dsaf_dev, tcam_mask);
+
+	spin_unlock_bh(&dsaf_dev->tcam_lock);
+}
+
+/**
+ * hns_dsaf_tcam_mc_cfg_vague - INT
+ * @dsaf_dev: dsa fabric device struct pointer
+ * @address,
+ * @ptbl_tcam_data,
+ * @ptbl_tcam_mask
+ * @ptbl_tcam_mcast
+ */
+static void hns_dsaf_tcam_mc_cfg_vague(struct dsaf_device *dsaf_dev,
+				       u32 address,
+				       struct dsaf_tbl_tcam_data *tcam_data,
+				       struct dsaf_tbl_tcam_data *tcam_mask,
+				       struct dsaf_tbl_tcam_mcast_cfg *tcam_mc)
+{
+	spin_lock_bh(&dsaf_dev->tcam_lock);
+	hns_dsaf_tbl_tcam_addr_cfg(dsaf_dev, address);
+	hns_dsaf_tbl_tcam_data_cfg(dsaf_dev, tcam_data);
+	hns_dsaf_tbl_tcam_mcast_cfg(dsaf_dev, tcam_mc);
+	hns_dsaf_tbl_tcam_match_cfg(dsaf_dev, tcam_mask);
+	hns_dsaf_tbl_tcam_data_mcast_pul(dsaf_dev);
+
+	/*Restore Match Data*/
+	tcam_mask->tbl_tcam_data_high = 0xffffffff;
+	tcam_mask->tbl_tcam_data_low = 0xffffffff;
+	hns_dsaf_tbl_tcam_match_cfg(dsaf_dev, tcam_mask);
+
+	spin_unlock_bh(&dsaf_dev->tcam_lock);
+}
+
+/**
  * hns_dsaf_tcam_mc_invld - INT
  * @dsaf_id: dsa fabric id
  * @address
@@ -1493,6 +1549,27 @@ static u16 hns_dsaf_find_empty_mac_entry(struct dsaf_device *dsaf_dev)
 }
 
 /**
+ * hns_dsaf_find_empty_mac_entry_reverse
+ * search dsa fabric soft empty-entry from the end
+ * @dsaf_dev: dsa fabric device struct pointer
+ */
+static u16 hns_dsaf_find_empty_mac_entry_reverse(struct dsaf_device *dsaf_dev)
+{
+	struct dsaf_drv_priv *priv = hns_dsaf_dev_priv(dsaf_dev);
+	struct dsaf_drv_soft_mac_tbl *soft_mac_entry;
+	int i;
+
+	soft_mac_entry = priv->soft_mac_tbl + (DSAF_TCAM_SUM - 1);
+	for (i = (DSAF_TCAM_SUM - 1); i > 0; i--) {
+		/* search all entry from end to start.*/
+		if (soft_mac_entry->index == DSAF_INVALID_ENTRY_IDX)
+			return i;
+		soft_mac_entry--;
+	}
+	return DSAF_INVALID_ENTRY_IDX;
+}
+
+/**
  * hns_dsaf_set_mac_key - set mac key
  * @dsaf_dev: dsa fabric device struct pointer
  * @mac_key: tcam key pointer
@@ -2673,58 +2750,156 @@ int hns_dsaf_get_regs_count(void)
 	return DSAF_DUMP_REGS_NUM;
 }
 
-/* Reserve the last TCAM entry for promisc support */
-#define dsaf_promisc_tcam_entry(port) \
-	(DSAF_TCAM_SUM - DSAFV2_MAC_FUZZY_TCAM_NUM + (port))
-void hns_dsaf_set_promisc_tcam(struct dsaf_device *dsaf_dev,
-			       u32 port, bool enable)
+static void set_promisc_tcam_enable(struct dsaf_device *dsaf_dev, u32 port)
 {
+	struct dsaf_tbl_tcam_ucast_cfg tbl_tcam_ucast = {0, 1, 0, 0, 0x80};
+	struct dsaf_tbl_tcam_data tbl_tcam_data_mc = {0x01000000, port};
+	struct dsaf_tbl_tcam_data tbl_tcam_mask_uc = {0x01000000, 0xf};
+	struct dsaf_tbl_tcam_mcast_cfg tbl_tcam_mcast = {0, 0, {0} };
 	struct dsaf_drv_priv *priv = hns_dsaf_dev_priv(dsaf_dev);
-	struct dsaf_drv_soft_mac_tbl *soft_mac_entry = priv->soft_mac_tbl;
-	u16 entry_index;
-	struct dsaf_drv_tbl_tcam_key tbl_tcam_data, tbl_tcam_mask;
-	struct dsaf_tbl_tcam_mcast_cfg mac_data = {0};
+	struct dsaf_tbl_tcam_data tbl_tcam_data_uc = {0, port};
+	struct dsaf_drv_mac_single_dest_entry mask_entry;
+	struct dsaf_drv_tbl_tcam_key temp_key, mask_key;
+	struct dsaf_drv_soft_mac_tbl *soft_mac_entry;
+	u16 entry_index = DSAF_INVALID_ENTRY_IDX;
+	struct dsaf_drv_tbl_tcam_key mac_key;
+	struct hns_mac_cb *mac_cb;
+	u8 addr[ETH_ALEN] = {0};
+	u8 port_num;
+	u16 mskid;
 
-	if ((AE_IS_VER1(dsaf_dev->dsaf_ver)) || HNS_DSAF_IS_DEBUG(dsaf_dev))
+	/* promisc use vague table match with vlanid = 0 & macaddr = 0 */
+	hns_dsaf_set_mac_key(dsaf_dev, &mac_key, 0x00, port, addr);
+	entry_index = hns_dsaf_find_soft_mac_entry(dsaf_dev, &mac_key);
+	if (entry_index != DSAF_INVALID_ENTRY_IDX)
 		return;
 
-	/* find the tcam entry index for promisc */
-	entry_index = dsaf_promisc_tcam_entry(port);
-
-	memset(&tbl_tcam_data, 0, sizeof(tbl_tcam_data));
-	memset(&tbl_tcam_mask, 0, sizeof(tbl_tcam_mask));
-
-	/* config key mask */
-	if (enable) {
-		dsaf_set_field(tbl_tcam_data.low.bits.port_vlan,
-			       DSAF_TBL_TCAM_KEY_PORT_M,
-			       DSAF_TBL_TCAM_KEY_PORT_S, port);
-		dsaf_set_field(tbl_tcam_mask.low.bits.port_vlan,
-			       DSAF_TBL_TCAM_KEY_PORT_M,
-			       DSAF_TBL_TCAM_KEY_PORT_S, 0xf);
-
-		/* SUB_QID */
-		dsaf_set_bit(mac_data.tbl_mcast_port_msk[0],
-			     DSAF_SERVICE_NW_NUM, true);
-		mac_data.tbl_mcast_item_vld = true;	/* item_vld bit */
+	/* put promisc tcam entry in the end. */
+	/* 1. set promisc unicast vague tcam entry. */
+	entry_index = hns_dsaf_find_empty_mac_entry_reverse(dsaf_dev);
+	if (entry_index == DSAF_INVALID_ENTRY_IDX) {
+		dev_err(dsaf_dev->dev,
+			"enable uc promisc failed (port:%#x)\n",
+			port);
+		return;
+	}
+
+	mac_cb = dsaf_dev->mac_cb[port];
+	(void)hns_mac_get_inner_port_num(mac_cb, 0, &port_num);
+	tbl_tcam_ucast.tbl_ucast_out_port = port_num;
+
+	/* config uc vague table */
+	hns_dsaf_tcam_uc_cfg_vague(dsaf_dev, entry_index, &tbl_tcam_data_uc,
+				   &tbl_tcam_mask_uc, &tbl_tcam_ucast);
+
+	/* update software entry */
+	soft_mac_entry = priv->soft_mac_tbl;
+	soft_mac_entry += entry_index;
+	soft_mac_entry->index = entry_index;
+	soft_mac_entry->tcam_key.high.val = mac_key.high.val;
+	soft_mac_entry->tcam_key.low.val = mac_key.low.val;
+	/* step back to the START for mc. */
+	soft_mac_entry = priv->soft_mac_tbl;
+
+	/* 2. set promisc multicast vague tcam entry. */
+	entry_index = hns_dsaf_find_empty_mac_entry_reverse(dsaf_dev);
+	if (entry_index == DSAF_INVALID_ENTRY_IDX) {
+		dev_err(dsaf_dev->dev,
+			"enable mc promisc failed (port:%#x)\n",
+			port);
+		return;
+	}
+
+	memset(&mask_entry, 0x0, sizeof(mask_entry));
+	memset(&mask_key, 0x0, sizeof(mask_key));
+	memset(&temp_key, 0x0, sizeof(temp_key));
+	mask_entry.addr[0] = 0x01;
+	hns_dsaf_set_mac_key(dsaf_dev, &mask_key, mask_entry.in_vlan_id,
+			     port, mask_entry.addr);
+	tbl_tcam_mcast.tbl_mcast_item_vld = 1;
+	tbl_tcam_mcast.tbl_mcast_old_en = 0;
+
+	if (port < DSAF_SERVICE_NW_NUM) {
+		mskid = port;
+	} else if (port >= DSAF_BASE_INNER_PORT_NUM) {
+		mskid = port - DSAF_BASE_INNER_PORT_NUM + DSAF_SERVICE_NW_NUM;
 	} else {
-		mac_data.tbl_mcast_item_vld = false;	/* item_vld bit */
+		dev_err(dsaf_dev->dev, "%s,pnum(%d)error,key(%#x:%#x)\n",
+			dsaf_dev->ae_dev.name, port,
+			mask_key.high.val, mask_key.low.val);
+		return;
 	}
 
-	dev_dbg(dsaf_dev->dev,
-		"set_promisc_entry, %s Mac key(%#x:%#x) entry_index%d\n",
-		dsaf_dev->ae_dev.name, tbl_tcam_data.high.val,
-		tbl_tcam_data.low.val, entry_index);
+	dsaf_set_bit(tbl_tcam_mcast.tbl_mcast_port_msk[mskid / 32],
+		     mskid % 32, 1);
+	memcpy(&temp_key, &mask_key, sizeof(mask_key));
+	hns_dsaf_tcam_mc_cfg_vague(dsaf_dev, entry_index, &tbl_tcam_data_mc,
+				   (struct dsaf_tbl_tcam_data *)(&mask_key),
+				   &tbl_tcam_mcast);
 
-	/* config promisc entry with mask */
-	hns_dsaf_tcam_mc_cfg(dsaf_dev, entry_index,
-			     (struct dsaf_tbl_tcam_data *)&tbl_tcam_data,
-			     (struct dsaf_tbl_tcam_data *)&tbl_tcam_mask,
-			     &mac_data);
+	/* update software entry */
+	soft_mac_entry += entry_index;
+	soft_mac_entry->index = entry_index;
+	soft_mac_entry->tcam_key.high.val = temp_key.high.val;
+	soft_mac_entry->tcam_key.low.val = temp_key.low.val;
+}
 
-	/* config software entry */
+static void set_promisc_tcam_disable(struct dsaf_device *dsaf_dev, u32 port)
+{
+	struct dsaf_tbl_tcam_data tbl_tcam_data_mc = {0x01000000, port};
+	struct dsaf_tbl_tcam_ucast_cfg tbl_tcam_ucast = {0, 0, 0, 0, 0};
+	struct dsaf_tbl_tcam_mcast_cfg tbl_tcam_mcast = {0, 0, {0} };
+	struct dsaf_drv_priv *priv = hns_dsaf_dev_priv(dsaf_dev);
+	struct dsaf_tbl_tcam_data tbl_tcam_data_uc = {0, 0};
+	struct dsaf_tbl_tcam_data tbl_tcam_mask = {0, 0};
+	struct dsaf_drv_soft_mac_tbl *soft_mac_entry;
+	u16 entry_index = DSAF_INVALID_ENTRY_IDX;
+	struct dsaf_drv_tbl_tcam_key mac_key;
+	u8 addr[ETH_ALEN] = {0};
+
+	/* 1. delete uc vague tcam entry. */
+	/* promisc use vague table match with vlanid = 0 & macaddr = 0 */
+	hns_dsaf_set_mac_key(dsaf_dev, &mac_key, 0x00, port, addr);
+	entry_index = hns_dsaf_find_soft_mac_entry(dsaf_dev, &mac_key);
+
+	if (entry_index == DSAF_INVALID_ENTRY_IDX)
+		return;
+
+	/* config uc vague table */
+	hns_dsaf_tcam_uc_cfg_vague(dsaf_dev, entry_index, &tbl_tcam_data_uc,
+				   &tbl_tcam_mask, &tbl_tcam_ucast);
+	/* update soft management table. */
+	soft_mac_entry = priv->soft_mac_tbl;
 	soft_mac_entry += entry_index;
-	soft_mac_entry->index = enable ? entry_index : DSAF_INVALID_ENTRY_IDX;
+	soft_mac_entry->index = DSAF_INVALID_ENTRY_IDX;
+	/* step back to the START for mc. */
+	soft_mac_entry = priv->soft_mac_tbl;
+
+	/* 2. delete mc vague tcam entry. */
+	addr[0] = 0x01;
+	memset(&mac_key, 0x0, sizeof(mac_key));
+	hns_dsaf_set_mac_key(dsaf_dev, &mac_key, 0x00, port, addr);
+	entry_index = hns_dsaf_find_soft_mac_entry(dsaf_dev, &mac_key);
+
+	if (entry_index == DSAF_INVALID_ENTRY_IDX)
+		return;
+
+	/* config mc vague table */
+	hns_dsaf_tcam_mc_cfg_vague(dsaf_dev, entry_index, &tbl_tcam_data_mc,
+				   &tbl_tcam_mask, &tbl_tcam_mcast);
+	/* update soft management table. */
+	soft_mac_entry += entry_index;
+	soft_mac_entry->index = DSAF_INVALID_ENTRY_IDX;
+}
+
+/* Reserve the last TCAM entry for promisc support */
+void hns_dsaf_set_promisc_tcam(struct dsaf_device *dsaf_dev,
+			       u32 port, bool enable)
+{
+	if (enable)
+		set_promisc_tcam_enable(dsaf_dev, port);
+	else
+		set_promisc_tcam_disable(dsaf_dev, port);
 }
 
 int hns_dsaf_wait_pkt_clean(struct dsaf_device *dsaf_dev, int port)
-- 
1.9.1

