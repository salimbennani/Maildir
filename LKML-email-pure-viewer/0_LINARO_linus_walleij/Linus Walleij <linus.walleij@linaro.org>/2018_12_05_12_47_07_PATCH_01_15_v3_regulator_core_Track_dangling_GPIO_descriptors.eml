Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 06 Dec 2018 08:52:13 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 0408E5804C1;
	Wed,  5 Dec 2018 04:47:41 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 05 Dec 2018 04:47:40 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ApBCyrBUBeBzzhhhyJe5tZ59oPtLV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhGHuadThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGoOy?=
 =?us-ascii?q?YZUSAeQPPuhWqIvyp1UBohWxHgmsHOHixyRUinL1x6A2z/4sHR3a0AEmAtkAsG?=
 =?us-ascii?q?7UrNLwNKoKV+61za/IzSjYb/hL2Tjy8ozIchQ/rvGNX7J7bM3cyU0uFwPDk1WQ?=
 =?us-ascii?q?spbpPj2P2eQJt2iU8etgVeC0hm4jqgFxpCKgxt0rioXTgYIV0F/E+Dx/zY0oJt?=
 =?us-ascii?q?O4UFZ2bcC4HJZUrS2WKoV7Tt04T211uys21qcKtJ+5cSQSy5kqxwTTZ+KJfoWI?=
 =?us-ascii?q?+B7vSfqdLS1miH57er+ygQu5/1K6xe3mTMa01U5HripbndnIsXAAzwLT6seZRf?=
 =?us-ascii?q?tn5Euh2iiA1xrV6u5aJUA4j63bK4QuwrIol5oTt1rMHjPulUnokKObcl8o9vWm?=
 =?us-ascii?q?5uj5eLnqu5yRO5Nuhgz/MKkigsm/Dv45MggKUWib4+O81Lj78E39QbVKiOA2k6?=
 =?us-ascii?q?bAvJDZO8sbvKi5DBFR0oo67Ba+ATGm38oCnXQcMlJFdwyIj5LzN1HNPv/4F/G/?=
 =?us-ascii?q?jEqokDtxwPDGJLLhDo3XLnffiLfhYap960lExQo3zNBf5IxbBqsOIfLuQULxsN?=
 =?us-ascii?q?3YDhkkMw272ernCdN91p8AVmKLGKOWLKTSsVqQ7OI1P+aMfJMVuCr6K/U95/7h?=
 =?us-ascii?q?l345mUMHcqmux5cXaG24Ee5gI0WWenfshtYBEWEXvgsxVuDqiVuCUSJNaHa2Ra?=
 =?us-ascii?q?4z+jY7CIe+B4fZWo+tmKCB3Du8HpBOZGBGDU6DHW3rd4WDXfcMbiWSL9RlkjwF?=
 =?us-ascii?q?U7ihVoAg2QuvtA/817poMO7U9jcEupLk0dh///fTmg0q9TxoE8Sd1HmAQHtvnm?=
 =?us-ascii?q?MIQD8237pzoVZnxVeByqV4h/1YFdpO5/JGSAs6NJjcz/BkBND2QA7OYtCJSFO+?=
 =?us-ascii?q?SNW8HT4xVs4xw8MJY0tlGNWtlBbD0zCuA78UjbOLApM0/7nY33jwIcZ91nnH2L?=
 =?us-ascii?q?Mgj1kgXstAK2mmirRj+AjUAo7Di1+ZmLqydaQAwC7N83+OwneUs0FGTgF8S6XF?=
 =?us-ascii?q?UmoZZkvNs9v54ETOT7utCbQiNgtM0sqCKqpMat30glRKXvbjONLCY22vn2e8Hw?=
 =?us-ascii?q?qHxrSJbIDyYWUSwD3dCFQYkwAU5XuJKBIxBjm/rG7EDDxhD1TvY1jy/ul4s367?=
 =?us-ascii?q?Sk40zweXb0xuzba1+xgVheCCRPMXxL4LpCAhqzBsFlanw93WE8aApxZmfKhEfd?=
 =?us-ascii?q?M94VJH1WXFtwx9Pp2sNbxiikQZcwRtu0Pu1hN3CopbnMgurXMqyhdyKK2C3FNA?=
 =?us-ascii?q?cTOYwY7/OrnNJmbu+xCvbrbc2kvC39aO5qcP9PM4pk35swGtCEUj/Gto0tlP33?=
 =?us-ascii?q?SH+5XFERAdUZTyUkYw6Rh3vLXaYig754PJ2nxgK6i0sjne2903AOsp0Aqvf9Ba?=
 =?us-ascii?q?MKmcDg/9D9UaB9SyKOwtg1Wobg8EMPpO+6IuPsKmd+GJ2KikPOt7mDKmjGJH4J?=
 =?us-ascii?q?1y006W9ip8TPLI0IgBw/2CwgSHUDL8hk+7ss/rgYBEeS0SHm2nxCj+BY5eerd9?=
 =?us-ascii?q?fZwWBmepOcG3wMtxh4TsW3JB6FGsHVcG19K3dhqIaFz92xZd1UAWoXyhhCu5wC?=
 =?us-ascii?q?Z4kzAvrqqDwiPOx/7uewYAOm5OXGNil0vjIZCoj9AGW0ildwgolBq/6Uf63aRb?=
 =?us-ascii?q?v7l/L2/ITEdMfij2KXxiU6SqurqDZc5P9I0nsSFNXOugZlCaT6b3owEG3CP7A2?=
 =?us-ascii?q?te2Dc7eimouprjhRx6i2GdLHFpoHrCY85wxhTf5N3aRfFP2DoLXy14iTjRBlih?=
 =?us-ascii?q?MNil59SUl5Hfsu+gU2KtTIFccS7uzYmYriu0+XVqAQGjn/C0gtDmERI10Sjh29?=
 =?us-ascii?q?loVCXIqg3xYo3q16S8LOJmcVNkBF7668pmBI5+lpE8i40X2Xgfnp+V52YIkX/v?=
 =?us-ascii?q?MdVH3qLzdHkNSiQKw9LP4AjlxVdsLnSGx4/iUnWdw81hZ8S1Y28M2yI96dxKB7?=
 =?us-ascii?q?mQ7LBegSR1pV+4pxrLYfdhhjcd1ecu6HkCjuEMuQotzT+SDqocHEZGJizsiwqH?=
 =?us-ascii?q?78qlo6pJfmavfqO91E5/ndCnEbGDrRtQWHf/epc+AyBw6t9zP07L0H328ovkYs?=
 =?us-ascii?q?XfbcoPth2IlBfNl/RVKJU0lvYQhCtoI2T9vWA+y+4gjBxjxpW6vImBK2Vw86O1?=
 =?us-ascii?q?GB9YNjvpZ8wN/jHhl7pRnsGT34q3BJVuBi0LXIf0TfKvCD8dru7oNwGKED0hsH?=
 =?us-ascii?q?ubHaffEBSb6EdnqXLPDp+qO2uWJHkf0dVtWh2dKFZDjwATWTUwhoQ5GRyyxMz9?=
 =?us-ascii?q?bEd54Sgc5lzipRtJ1O1oLAPzUnvFqAerdzc0S4WfLBxM4QFZ/ErVNc2e7uRuHy?=
 =?us-ascii?q?BX5JGhrQqNKnCFaARMF20GRkuEB1X7NLm0+dbA6/SYBva5L/bWYbSOrvFeV+6V?=
 =?us-ascii?q?xZ211Itq5S2MNsKJPnltFPA73ktDXXZkG8XWgTkPSioXlz7TYM6fvhuz5ip3rs?=
 =?us-ascii?q?Wn+vTxRA3v/ZePC6dVMdh3+xC5n6aDN+2ThCZ4MzpY1YkMxXjHyLcBxl4Sljpu?=
 =?us-ascii?q?eiKpEbQBsy7NUa3RlrVWDx4ddyN8Ks9I47gg0QlKPM7Rksn12aJgjv4pF1dFUk?=
 =?us-ascii?q?Tsldu0ZcMROWGyKlPGCFyPNLSHPjDLx8D3YaWhSbxflulUthuwuSqFHE/nJDiM?=
 =?us-ascii?q?iz7pVxW3O+FWkC6bJABeuJ26cht1FWjjTdfmZgenP9NtkTI2waM7hnXROG4YMD?=
 =?us-ascii?q?h8dV5Nr7KK4SNZhPV/B3JO7n5/IeaYnCaZ6vHSKowKvvtzHiR0i+Va7Ww6yrRP?=
 =?us-ascii?q?6iFEQf11mC3Kod9vo1GpiO+PyjV8XRpKqzZLgp+LvEp4NaXY8JlARWjL/BYX4W?=
 =?us-ascii?q?qMDBQKoogtNtq6n6FZz5Dglbj/NzBF/5qA+cQdHcTLL8WLGHUkOBvtXjXTCV1B?=
 =?us-ascii?q?BRuiL2KXrVZaj/faonePqZ88q5XEm5cUTLJfElsvGaVJJF5iGYkmIZFqRXsbmL?=
 =?us-ascii?q?qfgc8KrS66rR/MX4NFt5TDW/OQKfHuLj+Div9DfRRekuCwFpgaKoCugx8qUVJ9?=
 =?us-ascii?q?homfXhOIBd0=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAACAyAdch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBg2snjBKMDoIhlziBcxIBARgTAYdSIjQJDQEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BCA0JCCkjDII2JAGCYgMDAQIkCwENAQE3AQUJAQEYJhIDMQEFARwGARIFgxyCA?=
 =?us-ascii?q?gQBmSU8ih2BbDOCdgEBBYcmCBKHXYMTgRyBVz+BEY1uiTKGBZEhBwKCIASPEws?=
 =?us-ascii?q?YiWCHT4kJj04GAgkHDyGBJYINMxowgy+CG4kBhUA/MoEFAQGLHQEB?=
X-IPAS-Result: =?us-ascii?q?A0ANAACAyAdch0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBg2s?=
 =?us-ascii?q?njBKMDoIhlziBcxIBARgTAYdSIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2J?=
 =?us-ascii?q?AGCYgMDAQIkCwENAQE3AQUJAQEYJhIDMQEFARwGARIFgxyCAgQBmSU8ih2BbDO?=
 =?us-ascii?q?CdgEBBYcmCBKHXYMTgRyBVz+BEY1uiTKGBZEhBwKCIASPEwsYiWCHT4kJj04GA?=
 =?us-ascii?q?gkHDyGBJYINMxowgy+CG4kBhUA/MoEFAQGLHQEB?=
X-IronPort-AV: E=Sophos;i="5.56,317,1539673200"; 
   d="scan'208";a="140860003"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 05 Dec 2018 04:47:38 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727826AbeLEMrg (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 5 Dec 2018 07:47:36 -0500
Received: from mail-lj1-f195.google.com ([209.85.208.195]:39748 "EHLO
        mail-lj1-f195.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727182AbeLEMre (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 5 Dec 2018 07:47:34 -0500
Received: by mail-lj1-f195.google.com with SMTP id t9-v6so18186652ljh.6
        for <linux-kernel@vger.kernel.org>; Wed, 05 Dec 2018 04:47:32 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding;
        bh=A4nDgU+7Qud5q5NA5TQ6/b4Bwy+ewSh5xeh7X5HZgf0=;
        b=NahVgoXu8syEOm7l2/ydfZxU8zJa+ZkG+qgq5mXGJdihaYumr+04Y/ptkVAzrCsGyA
         BIo4dWjegzgiMXJGC4i7zz7t5KmKRRU6T1sJRc4gGukbdy7+fRW/d6wBrM5PaIX5t3+F
         Erdne9uWUVQnh24nyFmPvumM0ezY2GmDCQ6HI=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=A4nDgU+7Qud5q5NA5TQ6/b4Bwy+ewSh5xeh7X5HZgf0=;
        b=lNKKA8j2oPdRNpPqQjJK9EKbC4AmYzN3jBKHLn1D4+Qdw+8wN5vA9IJWszgs39YZeD
         r3lx/I2KnNYwzhmkl8208VfGmIAoZ9kIMwVGa9SF2xGxRzyflucgxrnJcnwlKDIgIMgd
         2/YpRYdzAvPPKdGfEBrbfM7IYKUCDIY9sRbPrYDOIahi9RfSd5s39jBCRzXZ+Zrj64U3
         ijAsXkQ2i5XW8X26OgV0euG4ZLNx2vbjwA7YUOloovdd0DdrSgbg2mzQlP1VigZ/tMzc
         elfJmcqghZ1moGagHLXH/YNywwnwyQibBoEyhPaDYB8qKpACFBI7RUyZxRQ7ScKMMh4m
         GiTA==
X-Gm-Message-State: AA+aEWZGM7zI2MCjKQWLMwp5VJYJ4SC0jZZxm4IYVMrSwdGMaaKnSINb
        8+PwBgwTR/WuZy/IMEAMtiJlCg==
X-Google-Smtp-Source: AFSGD/XoJ+JRh+BE2xxTwNa/5At6yH4dRWa1O/ttHME2gH+9nP+e3mLFiKGWjWKpFUz0WSzCUcphQQ==
X-Received: by 2002:a2e:5d12:: with SMTP id r18-v6mr17136640ljb.89.1544014051150;
        Wed, 05 Dec 2018 04:47:31 -0800 (PST)
Received: from genomnajs.ideon.se ([85.235.10.227])
        by smtp.gmail.com with ESMTPSA id e19-v6sm3797125ljf.67.2018.12.05.04.47.29
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Wed, 05 Dec 2018 04:47:29 -0800 (PST)
From: Linus Walleij <linus.walleij@linaro.org>
To: Liam Girdwood <lgirdwood@gmail.com>,
        Mark Brown <broonie@kernel.org>
Cc: linux-kernel@vger.kernel.org,
        Charles Keepax <ckeepax@opensource.cirrus.com>,
        Bartosz Golaszewski <bgolaszewski@baylibre.com>,
        Marek Szyprowski <m.szyprowski@samsung.com>,
        Linus Walleij <linus.walleij@linaro.org>
Subject: [PATCH 01/15 v3] regulator: core: Track dangling GPIO descriptors
Date: Wed,  5 Dec 2018 13:47:07 +0100
Message-Id: <20181205124721.26624-2-linus.walleij@linaro.org>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <20181205124721.26624-1-linus.walleij@linaro.org>
References: <20181205124721.26624-1-linus.walleij@linaro.org>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

If a GPIO descriptor is passed to the regulator_register()
function inside the config->ena_gpiod callers must be
sure that once they call this API the regulator core
owns that descriptor and will make sure to issue
gpiod_put() on it, no matter whether the call is
successful or not.

For device tree regulators, the regulator core will
automatically set up regulator init data from the device
tree when registering a regulator by calling
regulator_of_get_init_data() which in turn calls down to
the regulator driver's .of_parse_cb() callback.
This callback (in drivers such as for max77686) may also
choose to fill in the config->ena_gpiod field with a GPIO
descriptor.

Harden the errorpath of regulator_register() to
properly gpiod_put() any passed in cfg->ena_gpiod
or any gpiod coming from the device tree on any type
of error.

Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
---
ChangeLog v1->v3:
- Resending.
ChangeLog v1->v2:
- New patch, just numbering v2 to keep it in line with
  the patch set it came out of.
---
 drivers/regulator/core.c | 55 ++++++++++++++++++++++++++++++++--------
 1 file changed, 45 insertions(+), 10 deletions(-)

diff --git a/drivers/regulator/core.c b/drivers/regulator/core.c
index 757619878068..79cb090ff22f 100644
--- a/drivers/regulator/core.c
+++ b/drivers/regulator/core.c
@@ -4868,21 +4868,33 @@ regulator_register(const struct regulator_desc *regulator_desc,
 	struct regulator_config *config = NULL;
 	static atomic_t regulator_no = ATOMIC_INIT(-1);
 	struct regulator_dev *rdev;
+	bool dangling_cfg_gpiod = false;
+	bool dangling_of_gpiod = false;
 	struct device *dev;
 	int ret, i;
 
-	if (regulator_desc == NULL || cfg == NULL)
+	if (cfg == NULL)
 		return ERR_PTR(-EINVAL);
+	if (cfg->ena_gpiod)
+		dangling_cfg_gpiod = true;
+	if (regulator_desc == NULL) {
+		ret = -EINVAL;
+		goto rinse;
+	}
 
 	dev = cfg->dev;
 	WARN_ON(!dev);
 
-	if (regulator_desc->name == NULL || regulator_desc->ops == NULL)
-		return ERR_PTR(-EINVAL);
+	if (regulator_desc->name == NULL || regulator_desc->ops == NULL) {
+		ret = -EINVAL;
+		goto rinse;
+	}
 
 	if (regulator_desc->type != REGULATOR_VOLTAGE &&
-	    regulator_desc->type != REGULATOR_CURRENT)
-		return ERR_PTR(-EINVAL);
+	    regulator_desc->type != REGULATOR_CURRENT) {
+		ret = -EINVAL;
+		goto rinse;
+	}
 
 	/* Only one of each should be implemented */
 	WARN_ON(regulator_desc->ops->get_voltage &&
@@ -4893,16 +4905,20 @@ regulator_register(const struct regulator_desc *regulator_desc,
 	/* If we're using selectors we must implement list_voltage. */
 	if (regulator_desc->ops->get_voltage_sel &&
 	    !regulator_desc->ops->list_voltage) {
-		return ERR_PTR(-EINVAL);
+		ret = -EINVAL;
+		goto rinse;
 	}
 	if (regulator_desc->ops->set_voltage_sel &&
 	    !regulator_desc->ops->list_voltage) {
-		return ERR_PTR(-EINVAL);
+		ret = -EINVAL;
+		goto rinse;
 	}
 
 	rdev = kzalloc(sizeof(struct regulator_dev), GFP_KERNEL);
-	if (rdev == NULL)
-		return ERR_PTR(-ENOMEM);
+	if (rdev == NULL) {
+		ret = -ENOMEM;
+		goto rinse;
+	}
 
 	/*
 	 * Duplicate the config so the driver could override it after
@@ -4911,11 +4927,22 @@ regulator_register(const struct regulator_desc *regulator_desc,
 	config = kmemdup(cfg, sizeof(*cfg), GFP_KERNEL);
 	if (config == NULL) {
 		kfree(rdev);
-		return ERR_PTR(-ENOMEM);
+		ret = -ENOMEM;
+		goto rinse;
 	}
 
 	init_data = regulator_of_get_init_data(dev, regulator_desc, config,
 					       &rdev->dev.of_node);
+	/*
+	 * We need to keep track of any GPIO descriptor coming from the
+	 * device tree until we have handled it over to the core. If the
+	 * config that was passed in to this function DOES NOT contain
+	 * a descriptor, and the config after this call DOES contain
+	 * a descriptor, we definately got one from parsing the device
+	 * tree.
+	 */
+	if (!cfg->ena_gpiod && config->ena_gpiod)
+		dangling_of_gpiod = true;
 	if (!init_data) {
 		init_data = config->init_data;
 		rdev->dev.of_node = of_node_get(config->of_node);
@@ -4954,6 +4981,9 @@ regulator_register(const struct regulator_desc *regulator_desc,
 				 config->ena_gpio, ret);
 			goto clean;
 		}
+		/* The regulator core took over the GPIO descriptor */
+		dangling_cfg_gpiod = false;
+		dangling_of_gpiod = false;
 	}
 
 	/* register with sysfs */
@@ -5039,8 +5069,13 @@ regulator_register(const struct regulator_desc *regulator_desc,
 	regulator_ena_gpio_free(rdev);
 	mutex_unlock(&regulator_list_mutex);
 clean:
+	if (dangling_of_gpiod)
+		gpiod_put(config->ena_gpiod);
 	kfree(rdev);
 	kfree(config);
+rinse:
+	if (dangling_cfg_gpiod)
+		gpiod_put(cfg->ena_gpiod);
 	return ERR_PTR(ret);
 }
 EXPORT_SYMBOL_GPL(regulator_register);
-- 
2.19.2

