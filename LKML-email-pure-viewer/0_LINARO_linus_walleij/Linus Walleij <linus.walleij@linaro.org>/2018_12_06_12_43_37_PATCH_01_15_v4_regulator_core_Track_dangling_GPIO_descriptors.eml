Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:45:49 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 43DF1580443;
	Thu,  6 Dec 2018 04:44:10 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga006-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 04:44:09 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A8FBiHhCtGSamDYpc5xXOUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7+p8iwAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95RWSJfH42y?=
 =?us-ascii?q?YYgBAe0DMuZWoIbzqEAOrQO8CAS3GO/iySVFimPs0KEmz+gsFxzN0gw6H9IJtX?=
 =?us-ascii?q?TZtNP7NKYUUeCo16nD0DXMYOlS2Tf59ofIcxIhquyLULJ0cMrRz1QvFxjfglSe?=
 =?us-ascii?q?s4PlOzeV2foMs2iZ9OdgUeOvi2g9pAFrpTij3MAsipPGho8MzF3P6CZ3wJ4tKN?=
 =?us-ascii?q?GmVEJ2ZcSoHIZeui2ELYd6X8AvT31ytCs7yLAKoZ22cSgQxJg5yRPSa+aLf5WU?=
 =?us-ascii?q?7h75SuqdPzV1iXR4c7ylnRmy61KvyujkW8m0zllKqi1Fn8HStnACyRPT8NKLSv?=
 =?us-ascii?q?hj8Ue73zaAyQTT5vtDIUAumqrXM58hwrgumZoPqUnPADP6lUHsgKOLeEgo5PKk?=
 =?us-ascii?q?5/nkb7n6vJORNo15hhn7Mqs0m8y/Beo4MhIJX2ie4em80Lzj/UvkQLRFl/E2kb?=
 =?us-ascii?q?fWsIrcJcsFoq61GghV04gl6xmhFTery8oYnXYZI1JfYh6HjJbmO0vIIP/mCfez?=
 =?us-ascii?q?mVOskC1kx/zeJL3uHo3NLmTfkLfmZbt9709cyAktwtxF6JNUF6oMIPbyWk/3qd?=
 =?us-ascii?q?zZAQU1Mw2yw+b7Ftp90pkSVn6IAq+cKKnSq0OH5vozI+mQY48YoDb9JOIk5/7y?=
 =?us-ascii?q?l3A5nkURfam03ZQNbnC4Ee9rI0GYYXrqn9cAHn0Gvgs4TOz2llKCVSRfaGq1X6?=
 =?us-ascii?q?I5/js7Ep6pDZ/fRoCxh7yMxCW7HppIaWxcCVCMFnHod4ODW/oXbCKSI8lhkiEL?=
 =?us-ascii?q?VLS7So8h0w2uuxH+y7Z9MuXU/SgYv4r51Ndp/+3TiQ0y9TtsAsuHyGGNT2Z0nm?=
 =?us-ascii?q?ASSz8sxq9/o1dwylOC0ah+nvxZGsZf5/JPUgcmK5Hcy/Z2BMz1WgLEZt2JUkqp?=
 =?us-ascii?q?Qs26ATEtSdI829wObFx7G9m4ihDD3jClA7kal7GQAJw086Tc32X+JspnynbG0r?=
 =?us-ascii?q?UhgEciQsdVKWKmgat//RDJB4HVi0WZi7qqdaME0SHQ7miD03SBsFtYUAFqV6XF?=
 =?us-ascii?q?Rm4QZk3RodT95UPCSruuBK8jMgtAz86CN6RLZsfojVVAWPfsJtDeb3itlGe3AB?=
 =?us-ascii?q?aC3qmMY5bye2UBwCXdD1AJnB0J8naYKwcyHCehrHjYDDx1C13vZVjh8e1/qHO9?=
 =?us-ascii?q?U081wBuGb0xn17qp5BEVgeaQRO8U3rIBoC0hsSl7HE6h39LKDNqNvxZhfKRZYd?=
 =?us-ascii?q?M6/FdH1WLYuxZhPpC6KKBinFoecwVxv0PhzBh3DoRAkc43rHIl1gZyKKSY0E9f?=
 =?us-ascii?q?eDOcx5z/JrrXKmzq9hC1d6HWwk3e0MqR+qoX8vs4r0vsvQ63GUsi6XloyMRV3G?=
 =?us-ascii?q?aG6ZXMDwoSVozxX10z9xh7obHafyY865nV1X1qLam7rDvC18g1C+sizxaqZ81f?=
 =?us-ascii?q?P7+cFA/uD80aANCjKew3m1Szch0IJuFT9K4uMMOgePuLw6qrPOdmnDK7gmVL+o?=
 =?us-ascii?q?F90kSQ9yViTu7ExYoKw/ad3gGfTTfzkE+hstzrmYBDfTwSBGu/xjT+C45Le6Jy?=
 =?us-ascii?q?epwHCWGwLM2tx9VynoLiVGRc9FG+GVwGwsipeRyJYlz53A1Q01kXoHO9lSu5yT?=
 =?us-ascii?q?x0jy8mrq6F0CPSxOTicQINOnRXS2l6kVfsPY+0gsgaXUipdQQolAGp5V3nx6hd?=
 =?us-ascii?q?v6l/K2jTQUFVfyn5NW1iU62wtqacbM5L8p8nrSJXUOGka1CAVrH9uwca0z/kH2?=
 =?us-ascii?q?ZGxjA0bSuqupb6nxx9km6dN2x8rHnaecFxwxfQ+trcSOVV3joHQil4lDbWCkK9?=
 =?us-ascii?q?P9mv4dWbiZPDvvqiWGKmU51ZaTPrwp+YtCun+W1qBgWynvCpld3gCwQ60y7719?=
 =?us-ascii?q?9xWCXMrRb8ZJTr1qugPeJmeEloGEHz685gFo5ilYswgYka2WIGiZWN4XoHjWDz?=
 =?us-ascii?q?PM1Y2a3kbXoBXz4Lw8PP7wjj101uNXaJx4P/VnWAzcptfdi6YmUK2i0j68BGEr?=
 =?us-ascii?q?ub7LtBnSFtuFq3sRrRYeRhnjca0fYu7X8ag+ITtwY3wCSSHKsSHVVGMiz2jBuH?=
 =?us-ascii?q?8cq+rKpMaWarcLiw0ld+nN+7ALGDpAFcRGj2epM4ESBs6cV/NUrG0Gfv5YH8ZN?=
 =?us-ascii?q?nQcdUTuwWIkxfHiuhZMpMwmeAMhSp6ImL9pnwlxvU/jRxv25G6oYeGJ39s/KK/?=
 =?us-ascii?q?Hh5XKDn1a9kP9THqiKZUhtyW0Jy3HpV9BjULW4PlQumyHzIVsfTnKhyCEDkhqn?=
 =?us-ascii?q?qAHbrfHAmf6Fpprn7VEpCrMW2XK2cdzdl4WBadI0lfihgOXDomhp45ChyqxMv5?=
 =?us-ascii?q?fUd7/D8R40D3qgBWxuJ0LRX/UXrfpAS1ajcyUpefNwFb7gVD50fTLMyf4fh/Hy?=
 =?us-ascii?q?Be/p29sgONLnaXaBhPDWEMQkaEHUzsPqGy5dnc9OiVHuq/L/zTYbWXtOxRTfGI?=
 =?us-ascii?q?yYi00oth+TaMOd6CPn1jD/09x0pCUmp1G8XfmzUTVSMXkzjBYNKcpBe54id3tN?=
 =?us-ascii?q?yw8Oz3WALz4ouCE7tSPstu+xC1gqeDNvSchCVjKTZf2ZMD22XIyKUE3FMJjyFu?=
 =?us-ascii?q?dj+tEakPtCLXTaLQnLNXAAAfay9pKMRI6Kc81BFXOcHHktP1yqJ4jvktBlhfSF?=
 =?us-ascii?q?zugdupatIKIm2nMFPHBV2GNLCHJT3N3sH2brmwSbxWjOVIqRKwvSyXHFPkPjSG?=
 =?us-ascii?q?jzPpTQygMflQjCGHOxxToJ29chdoCWT5UN3qcAG0MN9pgj0w2rA0gnLKNWgBMT?=
 =?us-ascii?q?lzaU9Nr7uQ7T9GjfV7AWBO8n1lLeyckSaD8+bYMooWsedsAilsl+NV+nI6y75U?=
 =?us-ascii?q?7CFCXPN0mSvSocRoo1GpieSPzjtnUBxTqjdEno6LvENiObnH+ZlEQ3rL4BUN7W?=
 =?us-ascii?q?DDQygN8v9kA9inlKFKxsfIk667fDNN8sjY4swbC+DbLcuGNDwqNh+/XHbxBREG?=
 =?us-ascii?q?BRSxMn7ZzxhXivaV8HyYhps3sJ7hnNwJULANB3IvEfZPLkVjAcdKH55zWj4lk/?=
 =?us-ascii?q?bPiM8O+GH4sxDVQMhbvLjDV/SbG/KpLyyW2+oXLyAUyK/1eNxAfrbw3FZvPxwj?=
 =?us-ascii?q?xNzH?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAADWGAlch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBg2snjBOOL5c6gXMSAQEYEwGHViI0CQ0BAwEBAQEBAQIBEwEBAQg?=
 =?us-ascii?q?NCQgpIwyCNiQBgmIDAwECJAsBDQEBNwEFCQEBGCYSAzEBBQEcBgESBYMcggIEA?=
 =?us-ascii?q?ZoHPIodgWwzgnYBAQWHJQgSh12DE4EcgVc/gRGNbok0hgWRKAcCgiAEjxcLGIl?=
 =?us-ascii?q?hh1SJDo9WBgIJBw8hgSWCDTMaMIMvghuJAYVAPzKBBQEBimcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ANAADWGAlch0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBg2s?=
 =?us-ascii?q?njBOOL5c6gXMSAQEYEwGHViI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBg?=
 =?us-ascii?q?mIDAwECJAsBDQEBNwEFCQEBGCYSAzEBBQEcBgESBYMcggIEAZoHPIodgWwzgnY?=
 =?us-ascii?q?BAQWHJQgSh12DE4EcgVc/gRGNbok0hgWRKAcCgiAEjxcLGIlhh1SJDo9WBgIJB?=
 =?us-ascii?q?w8hgSWCDTMaMIMvghuJAYVAPzKBBQEBimcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,322,1539673200"; 
   d="scan'208";a="55177779"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 06 Dec 2018 04:44:07 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729584AbeLFMoF (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 6 Dec 2018 07:44:05 -0500
Received: from mail-lj1-f193.google.com ([209.85.208.193]:40014 "EHLO
        mail-lj1-f193.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727832AbeLFMoE (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 6 Dec 2018 07:44:04 -0500
Received: by mail-lj1-f193.google.com with SMTP id n18-v6so276346lji.7
        for <linux-kernel@vger.kernel.org>; Thu, 06 Dec 2018 04:44:02 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding;
        bh=tOxZO3nUb+U86qEGSI5iNJyT/exUrePPUOkDnR1qhVY=;
        b=T3X5npWw2s5gDwjGiLO+z4UcfTzTL+V9W6JjAq/wlgfmrZibqqOvRt/UPDTVaB69XZ
         WyO4zfZDSLcoELOUhCR1CMbxCwQheZiPalM0O75Q1ayPsBgA16ZCic7T/GRUncqXco9Z
         nvZMwx3wmO/9AQ0rbSHRkPsXafK90QOTFWcJs=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=tOxZO3nUb+U86qEGSI5iNJyT/exUrePPUOkDnR1qhVY=;
        b=AWaCml/AypbzpMxCQ+ion08yijUYPTbmfsokL5n+9gPwETLpG+3+V7yYliiKD4UESR
         dl2Ebh2mF7XFLyJCiDPFay5Km0NcgGb7JEC1kd8GtB1ViKA6VTCjxBWSRjGQC8ucdSuF
         Cf9f7EaLO3NIGUurk8uUCLW6S7nQixZx7bBotBdOkGfTrLyIXwlwuAMnnfbx6GgNbYP0
         MpOgASERIq5FdWH3Tf0AviY4VkRTC/h6QxJ3wfOy+0abTb6FFjTMLVRp76ziZ7rx+Aa2
         HLkLmnC0lFDSbX2FhGXLcJuNeS0Vd3Q3gjl06QOvsnz3y7gbq5VcBzSOl4ZxdGKzuIyN
         CBpQ==
X-Gm-Message-State: AA+aEWZmlW07gKfeSqUP0Pmbp0JRSCE0mHOAQAnGPsGCOFaiPFGJkJNk
        xc1F0v67MsD60A1FgtmvbgWW7w==
X-Google-Smtp-Source: AFSGD/UEgiOHqiWhZUucLXrEDYsN+kZU7Rww/hmKFxUuPxXzusm0lmcGviyR6hJU4Ot6DfANpkMFcg==
X-Received: by 2002:a2e:1f01:: with SMTP id f1-v6mr17921486ljf.129.1544100241274;
        Thu, 06 Dec 2018 04:44:01 -0800 (PST)
Received: from genomnajs.ideon.se ([85.235.10.227])
        by smtp.gmail.com with ESMTPSA id j25-v6sm44071lji.77.2018.12.06.04.43.59
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Thu, 06 Dec 2018 04:44:00 -0800 (PST)
From: Linus Walleij <linus.walleij@linaro.org>
To: Liam Girdwood <lgirdwood@gmail.com>,
        Mark Brown <broonie@kernel.org>
Cc: linux-kernel@vger.kernel.org,
        Charles Keepax <ckeepax@opensource.cirrus.com>,
        Bartosz Golaszewski <bgolaszewski@baylibre.com>,
        Marek Szyprowski <m.szyprowski@samsung.com>,
        Linus Walleij <linus.walleij@linaro.org>
Subject: [PATCH 01/15 v4] regulator: core: Track dangling GPIO descriptors
Date: Thu,  6 Dec 2018 13:43:37 +0100
Message-Id: <20181206124351.10155-2-linus.walleij@linaro.org>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <20181206124351.10155-1-linus.walleij@linaro.org>
References: <20181206124351.10155-1-linus.walleij@linaro.org>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

If a GPIO descriptor is passed to the regulator_register()
function inside the config->ena_gpiod callers must be
sure that once they call this API the regulator core
owns that descriptor and will make sure to issue
gpiod_put() on it, no matter whether the call is
successful or not.

For device tree regulators, the regulator core will
automatically set up regulator init data from the device
tree when registering a regulator by calling
regulator_of_get_init_data() which in turn calls down to
the regulator driver's .of_parse_cb() callback.
This callback (in drivers such as for max77686) may also
choose to fill in the config->ena_gpiod field with a GPIO
descriptor.

Harden the errorpath of regulator_register() to
properly gpiod_put() any passed in cfg->ena_gpiod
or any gpiod coming from the device tree on any type
of error.

Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
---
ChangeLog v3->v4:
- Resending.
ChangeLog v2->v3:
- Resending.
ChangeLog v1->v2:
- New patch, just numbering v2 to keep it in line with
  the patch set it came out of.
---
 drivers/regulator/core.c | 55 ++++++++++++++++++++++++++++++++--------
 1 file changed, 45 insertions(+), 10 deletions(-)

diff --git a/drivers/regulator/core.c b/drivers/regulator/core.c
index 757619878068..79cb090ff22f 100644
--- a/drivers/regulator/core.c
+++ b/drivers/regulator/core.c
@@ -4868,21 +4868,33 @@ regulator_register(const struct regulator_desc *regulator_desc,
 	struct regulator_config *config = NULL;
 	static atomic_t regulator_no = ATOMIC_INIT(-1);
 	struct regulator_dev *rdev;
+	bool dangling_cfg_gpiod = false;
+	bool dangling_of_gpiod = false;
 	struct device *dev;
 	int ret, i;
 
-	if (regulator_desc == NULL || cfg == NULL)
+	if (cfg == NULL)
 		return ERR_PTR(-EINVAL);
+	if (cfg->ena_gpiod)
+		dangling_cfg_gpiod = true;
+	if (regulator_desc == NULL) {
+		ret = -EINVAL;
+		goto rinse;
+	}
 
 	dev = cfg->dev;
 	WARN_ON(!dev);
 
-	if (regulator_desc->name == NULL || regulator_desc->ops == NULL)
-		return ERR_PTR(-EINVAL);
+	if (regulator_desc->name == NULL || regulator_desc->ops == NULL) {
+		ret = -EINVAL;
+		goto rinse;
+	}
 
 	if (regulator_desc->type != REGULATOR_VOLTAGE &&
-	    regulator_desc->type != REGULATOR_CURRENT)
-		return ERR_PTR(-EINVAL);
+	    regulator_desc->type != REGULATOR_CURRENT) {
+		ret = -EINVAL;
+		goto rinse;
+	}
 
 	/* Only one of each should be implemented */
 	WARN_ON(regulator_desc->ops->get_voltage &&
@@ -4893,16 +4905,20 @@ regulator_register(const struct regulator_desc *regulator_desc,
 	/* If we're using selectors we must implement list_voltage. */
 	if (regulator_desc->ops->get_voltage_sel &&
 	    !regulator_desc->ops->list_voltage) {
-		return ERR_PTR(-EINVAL);
+		ret = -EINVAL;
+		goto rinse;
 	}
 	if (regulator_desc->ops->set_voltage_sel &&
 	    !regulator_desc->ops->list_voltage) {
-		return ERR_PTR(-EINVAL);
+		ret = -EINVAL;
+		goto rinse;
 	}
 
 	rdev = kzalloc(sizeof(struct regulator_dev), GFP_KERNEL);
-	if (rdev == NULL)
-		return ERR_PTR(-ENOMEM);
+	if (rdev == NULL) {
+		ret = -ENOMEM;
+		goto rinse;
+	}
 
 	/*
 	 * Duplicate the config so the driver could override it after
@@ -4911,11 +4927,22 @@ regulator_register(const struct regulator_desc *regulator_desc,
 	config = kmemdup(cfg, sizeof(*cfg), GFP_KERNEL);
 	if (config == NULL) {
 		kfree(rdev);
-		return ERR_PTR(-ENOMEM);
+		ret = -ENOMEM;
+		goto rinse;
 	}
 
 	init_data = regulator_of_get_init_data(dev, regulator_desc, config,
 					       &rdev->dev.of_node);
+	/*
+	 * We need to keep track of any GPIO descriptor coming from the
+	 * device tree until we have handled it over to the core. If the
+	 * config that was passed in to this function DOES NOT contain
+	 * a descriptor, and the config after this call DOES contain
+	 * a descriptor, we definately got one from parsing the device
+	 * tree.
+	 */
+	if (!cfg->ena_gpiod && config->ena_gpiod)
+		dangling_of_gpiod = true;
 	if (!init_data) {
 		init_data = config->init_data;
 		rdev->dev.of_node = of_node_get(config->of_node);
@@ -4954,6 +4981,9 @@ regulator_register(const struct regulator_desc *regulator_desc,
 				 config->ena_gpio, ret);
 			goto clean;
 		}
+		/* The regulator core took over the GPIO descriptor */
+		dangling_cfg_gpiod = false;
+		dangling_of_gpiod = false;
 	}
 
 	/* register with sysfs */
@@ -5039,8 +5069,13 @@ regulator_register(const struct regulator_desc *regulator_desc,
 	regulator_ena_gpio_free(rdev);
 	mutex_unlock(&regulator_list_mutex);
 clean:
+	if (dangling_of_gpiod)
+		gpiod_put(config->ena_gpiod);
 	kfree(rdev);
 	kfree(config);
+rinse:
+	if (dangling_cfg_gpiod)
+		gpiod_put(cfg->ena_gpiod);
 	return ERR_PTR(ret);
 }
 EXPORT_SYMBOL_GPL(regulator_register);
-- 
2.19.2

