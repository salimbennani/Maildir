Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 21:24:23 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 5D0AF58079D;
	Thu, 13 Dec 2018 04:59:50 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 13 Dec 2018 04:59:49 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AZ2e3Vx+xU5ORmv9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1u4RIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CRmRPQ8ZfWTJPDIy+?=
 =?us-ascii?q?YYsAE+0PMulXoYnmv1sDrwCzBRWuCe711jNFnGP60K883u88EQ/GxgsgH9cWvX?=
 =?us-ascii?q?rOrNX1NaMSUeGtzKnQ0D7MbOlZ1izj54jMbxsspumMUahxcMXL0kYgCQfFg06I?=
 =?us-ascii?q?qYP7OTOV2fkNs3SB7+pnU+KvimEmpxtsrTex38ohjJTCiIENyl3c6yl13II4Kc?=
 =?us-ascii?q?elREN1f9KoCoZcuiKGO4dsQ84vQXlktDgmxrEapJK2eSkHxZY7yBPaavGKcZSE?=
 =?us-ascii?q?7xf+WOqNPTt1gXxod6iiiBuy9EWtxe/xVse60FtPoCpKjMPDtn4I2hDO8MeLV/?=
 =?us-ascii?q?lw80G80jiVzQ/T8PtLIUUsmKrbNZEhxrkwm4INsUTMACD2gl/6jKyIeUU+/Oin?=
 =?us-ascii?q?9eDnbq/hpp+GOI94kgD+MqIwlcyjGek0LBQCUmyB9eih2rDv41f1TKhJg/EqiK?=
 =?us-ascii?q?XUsZLXKdwepqGjAg9V1ogj6wy4DzejyNkYmXgHLFRYeBOIloTpOE/BIOr+Dfih?=
 =?us-ascii?q?h1SgiTBrxv7APrL/GJXANWbDkLj/crZn8UJcyxQ8zcpZ551KDrENOvXzWlX+tN?=
 =?us-ascii?q?DAFB82LxS0w/r7CNV6zo4eXWOPAqyHP6/Ivl6I+/kiI+2NZI8TpTb8JOIp5//o?=
 =?us-ascii?q?jX8lh1AdebOl0ocQaHC9Bv5mOVmWYWLwgtcdFmcHpgo+Q/briF2eSzFTYGy+X6?=
 =?us-ascii?q?Ih5j4hDoKmApzORoSsgLyHwSe6EYdaZmFAClCQD3joc5+IVOsLaCKXOsVhiCAL?=
 =?us-ascii?q?VaC9S4890hGjrA36y715IebO+S0YspTj1N5y5+DIkREy9Dp0D9mS0m2XTmF0mH?=
 =?us-ascii?q?8ISCEy3KxlvUN9zVKD27Big/NEDdxT++9JUgAiOJHG1Ox6C9fyWgHbcteTUlmm?=
 =?us-ascii?q?QM6rATUwTtI33t8PbFxxG9SkjhDfwSWqB6UZmKCMBJwx6qjcxWT+J95hy3ba06?=
 =?us-ascii?q?ksl1omTdFJNWG8gq5/9hLcB4jGk0iCk6aqdKIc3DPC9WuZzGqOul1YXxB0Uanf?=
 =?us-ascii?q?QX8fYU7Wp8zj5kzeV7+uFagnMgxZxMGfMKRKdMPmgU9GRPj5PtTeeHy+m2G3CR?=
 =?us-ascii?q?aMxbOMaY7qdn4Z3CXcDkgEjg8S8WyHNQg4GieuvWbeACZyGlLoZkPm6fN+p2+j?=
 =?us-ascii?q?Tk8o0wGKaFVs2Kev9R4Lm/OQUfMT0agCuCc6tTp0Gk2w39bXC9qGugpgc79QYd?=
 =?us-ascii?q?I74Fdby23ZsxZxMYCnL6BnnlQeaRh4v1vy1xVrDYVNidQqrHIvzAp1NaKY0FNA?=
 =?us-ascii?q?eymE3ZzqPb3XMG3y/BGpa67ZwVze1NeW+qES6PU3sVnjvQepFlY8/HVjydVaz3?=
 =?us-ascii?q?yc5pDSBgoITZ3xSlo39wR9p7zCeCY9453b1HJyPqi0qDPNwM8pC/Y/xRamfNdf?=
 =?us-ascii?q?N72EGRT2E80bAciuNeMrl0KobhICIOBd6qo0M9m6ePuB3a6hJPxgky6+jWRb/I?=
 =?us-ascii?q?B91VqB9iphSuLSw5kJ2fCZ3gudWDf6g1esqcT3mYFCZTEPEWuz0ynkBIhNZqJs?=
 =?us-ascii?q?eYYHE3uhI8qyxt9mnZ7iR2ZY9EK/B1MBwMKpYxuSYEDn0g1KyEsXpmarmS2mwD?=
 =?us-ascii?q?xukjElt7aQ0zbKw+v/ahUHIGlLRG95gFfoIIi0ic0aXUeyYwgokhul+Vj1x6xB?=
 =?us-ascii?q?qKtjKGnTRF9CfzLqIGF6Tquwqr2CbtZP6ZMpqylWUP6wYUuHSr77uBYa1yLjH2?=
 =?us-ascii?q?1DxDE0bT2qu5P5nwBkh2KZNnp8sH3ZecRozxfF+NPcXeJR3iYBRCRgiznYHEK8?=
 =?us-ascii?q?P9qq/dWTjZvDqfqxV2GiVp1Sdynk04WAuTC/5W1rBx2/gv+ylsfmEQg8zS/0yd?=
 =?us-ascii?q?1qWT/Uoxb7Z4nhz766Pv5/fkl0GF/87NJ3G4FknYs3np0Q23kahpOO8HoDkGfz?=
 =?us-ascii?q?N8hb2K3kYHoMQz4L38Da4Az/1EJ/KXKJwprzVm+Bzct5e9m6fmQW1zo+789QCa?=
 =?us-ascii?q?eY9rxEnTZvrVq+ogLcevx9njYbyfsz538WmeAJuAwxziqDBrAeB1VXPSvplx6Q?=
 =?us-ascii?q?9dCxsL1XZHqzcbi3zEd+mNGhDLKYrQ1GVnf2ZIwiHTNu4cVlK13Dzmfz6o7/dd?=
 =?us-ascii?q?nUbNITsACUkhjag+hULpIxiuQFhS59NW3hun0lzvYxjQZy0pGioIiHN2Jt8bql?=
 =?us-ascii?q?Ah5fMz35fcIS9SvrjaZDhcaWxIGvE45lGjUKWpvoUP2pHCgTtfThKwaBDjk8pm?=
 =?us-ascii?q?2HFrrYGA+V8F1moG7XE5C3K3GXI2EUws54SxmaIExfnRoYXDEnnpMiEgCqxcrh?=
 =?us-ascii?q?cFp25zwL5174rAdMxfxsNxXlTmjfowKoYC8uSJeDNBpW8h1C50DNPMyc9O1zGj?=
 =?us-ascii?q?9X/oa7oAyRMGCbZBlIDWIUWkyCHV/jJaKj5d3B8+ieG+q/IOHCYbSIqexCSfiI?=
 =?us-ascii?q?wYij3Zdh/zaJLs+PJGVtD+Un2kpfWnB0A8TYmzISSywOiiLCdcibqA2n+i1wqM?=
 =?us-ascii?q?C//+/mWAbu5YuJFrtTPs9j+xGwgaefKeGQgDx1Jipf1pMJ3XXI0qQQ3EYOiyFy?=
 =?us-ascii?q?cDmgCbQAujDMTKLTma9XDgQXayBpNMtP4KIzwBNNOdPAit7u0r54j/g1C0pKVF?=
 =?us-ascii?q?D7m8GpY9AKLH+5NF/dGEmLM7GGLyXRw87reaO8VaFQjOJMuhKqpDaUCFXjMSqD?=
 =?us-ascii?q?ljXzUxCvMPpBjCWaPBxYpYG8fQxhCWnlTNL6dBK7NMV7giExwb0xnnnKL3ITMS?=
 =?us-ascii?q?Bgc0NRqb2d9T9YgvR6G2Bb8nVpN/WLmyaH4OneMZsWtfprAiJpl+NV+ng6yr1V?=
 =?us-ascii?q?7D1aS/xxgifdstluo1S+mOmV1jVnSAZOqipMhI+TvURtI6PZ9pxBWXbC5B0M7G?=
 =?us-ascii?q?WQBA4Mp9tqEdDvv6FQyt7SlKP8MjtC8tTU/dcCCMjQMs6ILH0hMR+6UALTWTAZ?=
 =?us-ascii?q?QCCmfUXYgUNQivuf/3jd+oM+rZ7jlYAER7ZefFMwH/IeTE9iGYpGaJN2WC401L?=
 =?us-ascii?q?uWgM8BzWSxoQOXR8hAuJ3DEPWIDqbBMjGc2IFEZh8J2auwH40ZO4mzj1QkeFBw?=
 =?us-ascii?q?kYDiA0fWUs1RuCpnbx9yrEgboys2dXE6x0+wMlDl23QUD/Ph20du0gY=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAAAxVxJch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgTCCOyeDfIgZX41AFIh/jkGBdikTAYdEIjQJDQEDAQEBAQEBAgE?=
 =?us-ascii?q?TAQEBCA0JCCkvgjYkAYJhAQEBAQIBAQIgBFIFAQkBAQoOCgICJgICAx42BgESB?=
 =?us-ascii?q?YMcgWkDDQgBAwGmc3wzhUGCRw2CHCJpizGBVz+BEYMSgleFLoJXAosyhFyQUy4?=
 =?us-ascii?q?HAoEWiTaDXYNIgVyIG4dTiS6BBYUCi1qCDjMaJIM7gicXEo4MPzKBAgMBASETC?=
 =?us-ascii?q?wGMCAEB?=
X-IPAS-Result: =?us-ascii?q?A0ANAAAxVxJch0O0hNFjHAEBAQQBAQcEAQGBUQcBAQsBgTC?=
 =?us-ascii?q?COyeDfIgZX41AFIh/jkGBdikTAYdEIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkvg?=
 =?us-ascii?q?jYkAYJhAQEBAQIBAQIgBFIFAQkBAQoOCgICJgICAx42BgESBYMcgWkDDQgBAwG?=
 =?us-ascii?q?mc3wzhUGCRw2CHCJpizGBVz+BEYMSgleFLoJXAosyhFyQUy4HAoEWiTaDXYNIg?=
 =?us-ascii?q?VyIG4dTiS6BBYUCi1qCDjMaJIM7gicXEo4MPzKBAgMBASETCwGMCAEB?=
X-IronPort-AV: E=Sophos;i="5.56,349,1539673200"; 
   d="scan'208";a="44813584"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 13 Dec 2018 04:59:37 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729272AbeLMM7f (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 13 Dec 2018 07:59:35 -0500
Received: from metis.ext.pengutronix.de ([85.220.165.71]:57419 "EHLO
        metis.ext.pengutronix.de" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1728803AbeLMM7e (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 13 Dec 2018 07:59:34 -0500
Received: from lupine.hi.pengutronix.de ([2001:67c:670:100:3ad5:47ff:feaf:1a17] helo=lupine)
        by metis.ext.pengutronix.de with esmtp (Exim 4.89)
        (envelope-from <p.zabel@pengutronix.de>)
        id 1gXQaN-0000m9-97; Thu, 13 Dec 2018 13:59:27 +0100
Message-ID: <1544705964.5886.1.camel@pengutronix.de>
Subject: Re: [PATCH v5 02/12] gpu: ipu-csi: Swap fields according to
 input/output field types
From: Philipp Zabel <p.zabel@pengutronix.de>
To: Steve Longerbeam <slongerbeam@gmail.com>,
        linux-media@vger.kernel.org
Cc: Mauro Carvalho Chehab <mchehab@kernel.org>,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>,
        "open list:DRM DRIVERS FOR FREESCALE IMX" 
        <dri-devel@lists.freedesktop.org>,
        open list <linux-kernel@vger.kernel.org>,
        "open list:STAGING SUBSYSTEM" <devel@driverdev.osuosl.org>,
        "open list:FRAMEBUFFER LAYER" <linux-fbdev@vger.kernel.org>
Date: Thu, 13 Dec 2018 13:59:24 +0100
In-Reply-To: <20181017000027.23696-3-slongerbeam@gmail.com>
References: <20181017000027.23696-1-slongerbeam@gmail.com>
         <20181017000027.23696-3-slongerbeam@gmail.com>
Content-Type: text/plain; charset="UTF-8"
X-Mailer: Evolution 3.22.6-1+deb9u1 
Mime-Version: 1.0
Content-Transfer-Encoding: 7bit
X-SA-Exim-Connect-IP: 2001:67c:670:100:3ad5:47ff:feaf:1a17
X-SA-Exim-Mail-From: p.zabel@pengutronix.de
X-SA-Exim-Scanned: No (on metis.ext.pengutronix.de); SAEximRunCond expanded to false
X-PTX-Original-Recipient: linux-kernel@vger.kernel.org
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi Steve,

On Tue, 2018-10-16 at 17:00 -0700, Steve Longerbeam wrote:
> The function ipu_csi_init_interface() was inverting the F-bit for
> NTSC case, in the CCIR_CODE_1/2 registers. The result being that
> for NTSC bottom-top field order, the CSI would swap fields and
> capture in top-bottom order.
> 
> Instead, base field swap on the field order of the input to the CSI,
> and the field order of the requested output. If the input/output
> fields are sequential but different, swap fields, otherwise do
> not swap. This requires passing both the input and output mbus
> frame formats to ipu_csi_init_interface().
> 
> Move this code to a new private function ipu_csi_set_bt_interlaced_codes()
> that programs the CCIR_CODE_1/2 registers for interlaced BT.656 (and
> possibly interlaced BT.1120 in the future).
> 
> When detecting input video standard from the input frame width/height,
> make sure to double height if input field type is alternate, since
> in that case input height only includes lines for one field.
> 
> Signed-off-by: Steve Longerbeam <slongerbeam@gmail.com>
> ---
> Changes since v4:
> - Cleaned up some convoluted code in ipu_csi_init_interface(), suggested
>   by Philipp Zabel.
> - Fixed a regression in csi_setup(), caught by Philipp.
> ---
>  drivers/gpu/ipu-v3/ipu-csi.c              | 119 +++++++++++++++-------
>  drivers/staging/media/imx/imx-media-csi.c |  17 +---
>  include/video/imx-ipu-v3.h                |   3 +-
>  3 files changed, 88 insertions(+), 51 deletions(-)
> 
> diff --git a/drivers/gpu/ipu-v3/ipu-csi.c b/drivers/gpu/ipu-v3/ipu-csi.c
> index aa0e30a2ba18..4a15e513fa05 100644
> --- a/drivers/gpu/ipu-v3/ipu-csi.c
> +++ b/drivers/gpu/ipu-v3/ipu-csi.c
> @@ -325,6 +325,15 @@ static int mbus_code_to_bus_cfg(struct ipu_csi_bus_config *cfg, u32 mbus_code,
>  	return 0;
>  }
>  
> +/* translate alternate field mode based on given standard */
> +static inline enum v4l2_field
> +ipu_csi_translate_field(enum v4l2_field field, v4l2_std_id std)
> +{
> +	return (field != V4L2_FIELD_ALTERNATE) ? field :
> +		((std & V4L2_STD_525_60) ?
> +		 V4L2_FIELD_SEQ_BT : V4L2_FIELD_SEQ_TB);
> +}
> +
>  /*
>   * Fill a CSI bus config struct from mbus_config and mbus_framefmt.
>   */
> @@ -374,22 +383,75 @@ static int fill_csi_bus_cfg(struct ipu_csi_bus_config *csicfg,
>  	return 0;
>  }
>  
> +static int ipu_csi_set_bt_interlaced_codes(struct ipu_csi *csi,
> +					   struct v4l2_mbus_framefmt *infmt,
> +					   struct v4l2_mbus_framefmt *outfmt,

infmt and outfmt parameters could be const.

> +					   v4l2_std_id std)
> +{
> +	enum v4l2_field infield, outfield;
> +	bool swap_fields;
> +
> +	/* get translated field type of input and output */
> +	infield = ipu_csi_translate_field(infmt->field, std);
> +	outfield = ipu_csi_translate_field(outfmt->field, std);
> +
> +	/*
> +	 * Write the H-V-F codes the CSI will match against the
> +	 * incoming data for start/end of active and blanking
> +	 * field intervals. If input and output field types are
> +	 * sequential but not the same (one is SEQ_BT and the other
> +	 * is SEQ_TB), swap the F-bit so that the CSI will capture
> +	 * field 1 lines before field 0 lines.
> +	 */
> +	swap_fields = (V4L2_FIELD_IS_SEQUENTIAL(infield) &&
> +		       V4L2_FIELD_IS_SEQUENTIAL(outfield) &&
> +		       infield != outfield);
> +
> +	if (!swap_fields) {
> +		/*
> +		 * Field0BlankEnd  = 110, Field0BlankStart  = 010
> +		 * Field0ActiveEnd = 100, Field0ActiveStart = 000
> +		 * Field1BlankEnd  = 111, Field1BlankStart  = 011
> +		 * Field1ActiveEnd = 101, Field1ActiveStart = 001
> +		 */
> +		ipu_csi_write(csi, 0x40596 | CSI_CCIR_ERR_DET_EN,
> +			      CSI_CCIR_CODE_1);
> +		ipu_csi_write(csi, 0xD07DF, CSI_CCIR_CODE_2);
> +	} else {
> +		dev_dbg(csi->ipu->dev, "capture field swap\n");
> +
> +		/* same as above but with F-bit inverted */
> +		ipu_csi_write(csi, 0xD07DF | CSI_CCIR_ERR_DET_EN,
> +			      CSI_CCIR_CODE_1);
> +		ipu_csi_write(csi, 0x40596, CSI_CCIR_CODE_2);
> +	}
> +
> +	ipu_csi_write(csi, 0xFF0000, CSI_CCIR_CODE_3);
> +
> +	return 0;
> +}
> +
> +
>  int ipu_csi_init_interface(struct ipu_csi *csi,
>  			   struct v4l2_mbus_config *mbus_cfg,
> -			   struct v4l2_mbus_framefmt *mbus_fmt)
> +			   struct v4l2_mbus_framefmt *infmt,
> +			   struct v4l2_mbus_framefmt *outfmt)
>  {
>  	struct ipu_csi_bus_config cfg;
>  	unsigned long flags;
>  	u32 width, height, data = 0;
> +	v4l2_std_id std;
>  	int ret;
>  
> -	ret = fill_csi_bus_cfg(&cfg, mbus_cfg, mbus_fmt);
> +	ret = fill_csi_bus_cfg(&cfg, mbus_cfg, infmt);
>  	if (ret < 0)
>  		return ret;
>  
>  	/* set default sensor frame width and height */
> -	width = mbus_fmt->width;
> -	height = mbus_fmt->height;
> +	width = infmt->width;
> +	height = infmt->height;
> +	if (infmt->field == V4L2_FIELD_ALTERNATE)
> +		height *= 2;
>  
>  	/* Set the CSI_SENS_CONF register remaining fields */
>  	data |= cfg.data_width << CSI_SENS_CONF_DATA_WIDTH_SHIFT |
> @@ -416,42 +478,22 @@ int ipu_csi_init_interface(struct ipu_csi *csi,
>  		ipu_csi_write(csi, 0xFF0000, CSI_CCIR_CODE_3);
>  		break;
>  	case IPU_CSI_CLK_MODE_CCIR656_INTERLACED:
> -		if (mbus_fmt->width == 720 && mbus_fmt->height == 576) {
> -			/*
> -			 * PAL case
> -			 *
> -			 * Field0BlankEnd = 0x6, Field0BlankStart = 0x2,
> -			 * Field0ActiveEnd = 0x4, Field0ActiveStart = 0
> -			 * Field1BlankEnd = 0x7, Field1BlankStart = 0x3,
> -			 * Field1ActiveEnd = 0x5, Field1ActiveStart = 0x1
> -			 */
> -			height = 625; /* framelines for PAL */
> -
> -			ipu_csi_write(csi, 0x40596 | CSI_CCIR_ERR_DET_EN,
> -					  CSI_CCIR_CODE_1);
> -			ipu_csi_write(csi, 0xD07DF, CSI_CCIR_CODE_2);
> -			ipu_csi_write(csi, 0xFF0000, CSI_CCIR_CODE_3);
> -		} else if (mbus_fmt->width == 720 && mbus_fmt->height == 480) {
> -			/*
> -			 * NTSC case
> -			 *
> -			 * Field0BlankEnd = 0x7, Field0BlankStart = 0x3,
> -			 * Field0ActiveEnd = 0x5, Field0ActiveStart = 0x1
> -			 * Field1BlankEnd = 0x6, Field1BlankStart = 0x2,
> -			 * Field1ActiveEnd = 0x4, Field1ActiveStart = 0
> -			 */
> -			height = 525; /* framelines for NTSC */
> -
> -			ipu_csi_write(csi, 0xD07DF | CSI_CCIR_ERR_DET_EN,
> -					  CSI_CCIR_CODE_1);
> -			ipu_csi_write(csi, 0x40596, CSI_CCIR_CODE_2);
> -			ipu_csi_write(csi, 0xFF0000, CSI_CCIR_CODE_3);
> +		if (width == 720 && height == 480) {
> +			std = V4L2_STD_NTSC;
> +			height = 525;
> +		} else if (width == 720 && height == 576) {
> +			std = V4L2_STD_PAL;
> +			height = 625;
>  		} else {
>  			dev_err(csi->ipu->dev,
> -				"Unsupported CCIR656 interlaced video mode\n");
> -			spin_unlock_irqrestore(&csi->lock, flags);
> -			return -EINVAL;
> +				"Unsupported interlaced video mode\n");
> +			ret = -EINVAL;
> +			goto out_unlock;
>  		}
> +
> +		ret = ipu_csi_set_bt_interlaced_codes(csi, infmt, outfmt, std);
> +		if (ret)
> +			goto out_unlock;
>  		break;
>  	case IPU_CSI_CLK_MODE_CCIR1120_PROGRESSIVE_DDR:
>  	case IPU_CSI_CLK_MODE_CCIR1120_PROGRESSIVE_SDR:
> @@ -476,9 +518,10 @@ int ipu_csi_init_interface(struct ipu_csi *csi,
>  	dev_dbg(csi->ipu->dev, "CSI_ACT_FRM_SIZE = 0x%08X\n",
>  		ipu_csi_read(csi, CSI_ACT_FRM_SIZE));
>  
> +out_unlock:
>  	spin_unlock_irqrestore(&csi->lock, flags);
>  
> -	return 0;
> +	return ret;
>  }
>  EXPORT_SYMBOL_GPL(ipu_csi_init_interface);
>  
> diff --git a/drivers/staging/media/imx/imx-media-csi.c b/drivers/staging/media/imx/imx-media-csi.c
> index 4223f8d418ae..7ecbd4d76d09 100644
> --- a/drivers/staging/media/imx/imx-media-csi.c
> +++ b/drivers/staging/media/imx/imx-media-csi.c
> @@ -663,15 +663,14 @@ static void csi_idmac_stop(struct csi_priv *priv)
>  /* Update the CSI whole sensor and active windows */
>  static int csi_setup(struct csi_priv *priv)
>  {
> -	struct v4l2_mbus_framefmt *infmt, *outfmt;
> +	struct v4l2_mbus_framefmt infmt, outfmt;
>  	const struct imx_media_pixfmt *incc;
>  	struct v4l2_mbus_config mbus_cfg;
> -	struct v4l2_mbus_framefmt if_fmt;
>  	struct v4l2_rect crop;
>  
> -	infmt = &priv->format_mbus[CSI_SINK_PAD];
> +	infmt = priv->format_mbus[CSI_SINK_PAD];

Maybe still call this if_fmt, or maybe csi_fmt, to indicate this is not
just the userspace visible input format as determined by the pad, but
the modified format we set the interface to? Not a strong preference,
though.

>  	incc = priv->cc[CSI_SINK_PAD];
> -	outfmt = &priv->format_mbus[priv->active_output_pad];
> +	outfmt = priv->format_mbus[priv->active_output_pad];

Copying the output format onto the stack seems unnecessary to me.

>  
>  	/* compose mbus_config from the upstream endpoint */
>  	mbus_cfg.type = priv->upstream_ep.bus_type;
> @@ -679,12 +678,6 @@ static int csi_setup(struct csi_priv *priv)
>  		priv->upstream_ep.bus.parallel.flags :
>  		priv->upstream_ep.bus.mipi_csi2.flags;
>  
> -	/*
> -	 * we need to pass input frame to CSI interface, but
> -	 * with translated field type from output format
> -	 */
> -	if_fmt = *infmt;
> -	if_fmt.field = outfmt->field;
>  	crop = priv->crop;
>  
>  	/*
> @@ -692,7 +685,7 @@ static int csi_setup(struct csi_priv *priv)
>  	 * generic/bayer data
>  	 */
>  	if (is_parallel_bus(&priv->upstream_ep) && incc->cycles) {
> -		if_fmt.width *= incc->cycles;
> +		infmt.width *= incc->cycles;
>  		crop.width *= incc->cycles;
>  	}
>  
> @@ -702,7 +695,7 @@ static int csi_setup(struct csi_priv *priv)
>  			     priv->crop.width == 2 * priv->compose.width,
>  			     priv->crop.height == 2 * priv->compose.height);
>  
> -	ipu_csi_init_interface(priv->csi, &mbus_cfg, &if_fmt);
> +	ipu_csi_init_interface(priv->csi, &mbus_cfg, &infmt, &outfmt);

We can just pass the &priv->format_mbus[priv->active_output_pad] here,
or keep using struct v4l2_mbus_framefmt *outfmt as a shorthand.

>  
>  	ipu_csi_set_dest(priv->csi, priv->dest);
>  
> diff --git a/include/video/imx-ipu-v3.h b/include/video/imx-ipu-v3.h
> index abbad94e14a1..f44a35192313 100644
> --- a/include/video/imx-ipu-v3.h
> +++ b/include/video/imx-ipu-v3.h
> @@ -352,7 +352,8 @@ int ipu_prg_channel_configure(struct ipuv3_channel *ipu_chan,
>  struct ipu_csi;
>  int ipu_csi_init_interface(struct ipu_csi *csi,
>  			   struct v4l2_mbus_config *mbus_cfg,
> -			   struct v4l2_mbus_framefmt *mbus_fmt);
> +			   struct v4l2_mbus_framefmt *infmt,
> +			   struct v4l2_mbus_framefmt *outfmt);
>  bool ipu_csi_is_interlaced(struct ipu_csi *csi);
>  void ipu_csi_get_window(struct ipu_csi *csi, struct v4l2_rect *w);
>  void ipu_csi_set_window(struct ipu_csi *csi, struct v4l2_rect *w);

Either way,
Reviewed-by: Philipp Zabel <p.zabel@pengutronix.de>

regards
Philipp
