Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 28 Nov 2018 12:10:04 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 299F5580322;
	Tue, 27 Nov 2018 19:01:37 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 27 Nov 2018 19:01:36 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Aa6YIQhDIpSgZc5sTRzjhUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7+r8mwAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95RWSJfH428?=
 =?us-ascii?q?c4UBAekAPelEoIfyqEAOrQO8CAS3GOPhyDxFimPq0aEmzegsFxzN0gw6H9IJtX?=
 =?us-ascii?q?TZtM71NLoUUeCv0anIzCjIYvRN2Tfg7ojIaA0hofCSUb9xasfRyVQvGBnLj1qO?=
 =?us-ascii?q?qIzpJS+a1uMIs2WC6edrSOyhi2kiqw5rozivwN8hiorXiYIPzFDL6yF5zJwyJd?=
 =?us-ascii?q?2iR053ecKrEIFMuCyUKYd6WNgiTHputS0nybMGoYa2cDYWxJkj3RLTdvKKf5aS?=
 =?us-ascii?q?7h7+V+udPS10iXNndb6nmhq+7VKsx+LgWsWu31tGsDBJnsfQunwQzxDf98mKR/?=
 =?us-ascii?q?9n8ku/2TuC2Brf5+JeLUwpiKbWLYMqzKQqmZoJq0vDGzf7mEXog6+ScUUp4vao?=
 =?us-ascii?q?6+v5bbX8vJOcNJF7ihv4MqswnsyzG+M4MhIBX2SD+OS80qPs/VHhTblUkvE7lr?=
 =?us-ascii?q?PVvI3UKMgFvKK1HgxY3po55xu+DTqqyNEYkmMGLFJBdhKHlY/pO1TWLfD8DPe/?=
 =?us-ascii?q?hUmskThyy/DFILLhGJPNIWbHkLv4erZ85UhcxxQpzd1E+ZJUBa8OIOjpVk/yqt?=
 =?us-ascii?q?PYFBk5PBKww+r9D9V9zIweVXqVAqCFKKPSrUOI5uU3LumIZY8VuyjyJ+Iq5v7z?=
 =?us-ascii?q?lnI5nV4dfa+03ZoYcny4H/JmI1mHbnromNsODWAKvg8mRuzwlFKCSSJTZ2q1X6?=
 =?us-ascii?q?8k5jE0EoOmDZvZSYCqmrCB3Dq7EYdQZmBJEV2MFXbod4OZW/YDci6SI8lhkiAa?=
 =?us-ascii?q?WrilUYMuyRautAriwbp9MuXU4jEYtY7k1NVt5e3Tkg89+SZ3D8Sa1WGNSWZ0k3?=
 =?us-ascii?q?gMRz832qB/vEN8xk2C0ah+n/xXC9hT6+lVXQc9MJ7W1/Z6BMzqWgLdYteJT06r?=
 =?us-ascii?q?Tc+9ATExSdIxwMUCY1xnFNWglR3D2yuqA7kIl72EHpA086Tc32TvKMZ50XrJyK?=
 =?us-ascii?q?4hj1w+SMtVKWKmnrJ/9xTUB4PRkEWWjaCqeb4Y3C7M7miDy2WOsVpcUA5xV6XF?=
 =?us-ascii?q?QH8ealHXrdT/+kPNUbuuBa47PQtGzM6IMrFKZcHxjVVaWPfjP8zTbH+rlGeuGx?=
 =?us-ascii?q?mE3LOMY5Dse2UGwirdDk8IkwQQ/XaDMQgzHSOho2PYDDxzGlPjeULs8e9iqHyl?=
 =?us-ascii?q?Sk841R2Fb0pk17Ct4B4ameScS+8P3rIDoCouti97HEij0N7MC9qPvQxhfL5Cbt?=
 =?us-ascii?q?M7+1pH0WPZtwpgPp2vNaxih1gecxhpsEPqzRl4FoJAkc0ypnMw0AVyMb6Y0E9G?=
 =?us-ascii?q?dz6AwZDwO7jXKm7u/BCva6/awE3e3MyR+qcV7PQ4qlPjvA6yG0om8nVn1cRV0n?=
 =?us-ascii?q?SG6pXLCgoSTYz+UkIt+xdmoLHaZzE355nI2n10Lam0rjjC1sozC+sh1BmhcMlQ?=
 =?us-ascii?q?MaOeGADpDs0VGtKhKOopm1iucBIJJ+RS9K8yP8O7ePqKwq+rPOB8nD24iWRL+p?=
 =?us-ascii?q?xy0kWJ9yBkUO7Hw44Fw+2E3guATzr9jEqhvtrrloxeZDASHnCwyS7rBINKYq1y?=
 =?us-ascii?q?fIALCXqhIsGtx9V+gYLtVGBc9FK5G1wG38qpcwKIb1PhxQ1QyVgXoXu/lCuizj?=
 =?us-ascii?q?x7jysmrrCC0yzJ2ejicgQIOnRKRGV7kVjjO4y0gM0EU0iyaAgpkgCo5UL7x6hd?=
 =?us-ascii?q?uaR+IHPfQUZOfyjqMW5iVrG8uaaFY85K8JkoqzlYUPygYVCGTb7wuxsb0yL5E2?=
 =?us-ascii?q?pe3jw7bCyqupPikhx+iWKdKmtzrXXDdcFxwxff+MLTRfpL0jUaQyl4jCHdBkKg?=
 =?us-ascii?q?MNmx4dWUi5DDv/i8V227TJ1TcirrzYSauCug/2JqAh6/n/G1mtL5Fwg3yiv719?=
 =?us-ascii?q?hsVSXVoxfweIjr16KmMe15eklkHkPz681/GotmiIs/mIkQ2WQGhpWS5XcGkX38?=
 =?us-ascii?q?MdJB1aL8bXoNQyUGw9rU4AjjxU1iIWiFx4P/VnWB3MRhY8O2bX8R2iI498pKEr?=
 =?us-ascii?q?ub7KRYnStppVq1tQHRbuJ8njsHyfsu9WQVg+cGuAc2yiWdA7YSHVRXPCD2lhSI?=
 =?us-ascii?q?6cy+o7tTZGq1bbew009+l8i7DL6eugFcRGr5epA6EC9178V/M0jD3Gf96476Y9?=
 =?us-ascii?q?nQccwctgePnBjelehVJ4k8lv4LhSphJGL8smcpy+89jRxyw566uJKLJHlq/KK8?=
 =?us-ascii?q?GhRYLCH6Z9sP+jHxiqZThtqW34eqHpl7GzQERp3oTe+zEDIJtPTqLAKOEDw6qn?=
 =?us-ascii?q?eGFrvTBw6f6EF6r33RF5CnLW2YJH4czd96XhmSOFRfgBwIXDU9hpM2DRqlxMvl?=
 =?us-ascii?q?cEdk/DwR4kP4pwBIyuJpMRn/T2jeqB2pajcyVJiQMh5W4hte6EfSNMyU9vhzED?=
 =?us-ascii?q?1A/p29sAyNLXSWZwZSAmEMREOEHErvPqW06dnD7uiYBfe+L/3UbrWVsuFeU/aI?=
 =?us-ascii?q?xZSy0opp5TqMN8OPPmV8AP0/wEZMQXd5G8HBkTUVVyMXjz7Nb9KcpBqk+ix3qd?=
 =?us-ascii?q?2/8O32WA3144uDEaBSMdJp+xC5mqqDM++QhCBkKTdXzJ8MxHnIyKQB014WkS1h?=
 =?us-ascii?q?az6tEbEYvy7XUK3QgrNXDwIcay5rNMtH8aM83gpOOc7akN/11aR4jvk6C1hbT1?=
 =?us-ascii?q?zhh9qpaNcOI2G8MlPHGUmKOK6HJT3N38H4f6e8RadMg+VTsh26oSybHFP7PjSf?=
 =?us-ascii?q?iznpUAiiPvtRjC6AJhxRpoG8fgxpCWjiV9/mbhy7MNlqjTw527E0h3XKNXICPj?=
 =?us-ascii?q?h4aU9CsrqQ7SZAiPVlB2NB9mZlLfWDmyuB8+nYK5MWveF3DShui+1a4Go1y71O?=
 =?us-ascii?q?4SFARfx1njbSr9F0r1GnlOmP1iRoUB5UpjlXg4KLuF1oOb/F+ZlYRXbE4BUN4H?=
 =?us-ascii?q?2QChsQodtlD9zvu6ZIxdnOlKL8MjFC893P8MsYBsjULt+HMXU7PRroHj7UEBUK?=
 =?us-ascii?q?TTqxOW7DgExdlaLaynrAh4I24rLtlYEOR6JFWVh9QvoABgJvHdEZIJpqQD4gub?=
 =?us-ascii?q?qaiscS4jy5thaHAI0QupHBS+LXAvj1LjudpadLagFOwr7iK4kXcIrh1AYqPl17?=
 =?us-ascii?q?mpnaXkndR9ZApgV/YQIu5kZA6n5zSis0wU2zOS2353pGDuOyhAM3wl9lfOI36T?=
 =?us-ascii?q?a2vX83O1PVqSp2m040z4a2yQuNeSL8ef/jFbpdDDD54g1oasv2?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A3AAAxBP5bh0O0hNFkHQEBBQEHBQGBU?=
 =?us-ascii?q?wYBCwEBgmiBAicKmhwUlywUgWIpDQYBh1oiNgcNAQMBAQEBAQECARMBAQEIDQk?=
 =?us-ascii?q?IKSMMQgEMAYFmJAGCYgECAgEBAjAHPwUBCQIBAQgiFBADLxQSAQQBDQUFA4MZA?=
 =?us-ascii?q?YF5CAUKp3SELQGGI4wNgVZAgVeCTIMFgUkBEgGDVIImAoEqAQGeXwEGAgGBVoE?=
 =?us-ascii?q?yg3WKTIFZhQuKJ4lvg1iCfolACoELcXCBboFOCQkBghEDF4cybz2FPz8BATEBg?=
 =?us-ascii?q?QMBAQEOgU2IPoEfgR8BAQ?=
X-IPAS-Result: =?us-ascii?q?A0A3AAAxBP5bh0O0hNFkHQEBBQEHBQGBUwYBCwEBgmiBAic?=
 =?us-ascii?q?KmhwUlywUgWIpDQYBh1oiNgcNAQMBAQEBAQECARMBAQEIDQkIKSMMQgEMAYFmJ?=
 =?us-ascii?q?AGCYgECAgEBAjAHPwUBCQIBAQgiFBADLxQSAQQBDQUFA4MZAYF5CAUKp3SELQG?=
 =?us-ascii?q?GI4wNgVZAgVeCTIMFgUkBEgGDVIImAoEqAQGeXwEGAgGBVoEyg3WKTIFZhQuKJ?=
 =?us-ascii?q?4lvg1iCfolACoELcXCBboFOCQkBghEDF4cybz2FPz8BATEBgQMBAQEOgU2IPoE?=
 =?us-ascii?q?fgR8BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,289,1539673200"; 
   d="scan'208";a="42573264"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 27 Nov 2018 19:01:35 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727218AbeK1OBb convert rfc822-to-8bit (ORCPT
        <rfc822;like.xu@linux.intel.com> + 23 others);
        Wed, 28 Nov 2018 09:01:31 -0500
Received: from szxga03-in.huawei.com ([45.249.212.189]:6069 "EHLO huawei.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726705AbeK1OBb (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 28 Nov 2018 09:01:31 -0500
Received: from dggemi402-hub.china.huawei.com (unknown [172.30.72.56])
        by Forcepoint Email with ESMTP id A414DD7534E4F;
        Wed, 28 Nov 2018 11:01:22 +0800 (CST)
Received: from DGGEMI528-MBX.china.huawei.com ([169.254.8.11]) by
 dggemi402-hub.china.huawei.com ([10.3.17.135]) with mapi id 14.03.0415.000;
 Wed, 28 Nov 2018 11:01:23 +0800
From: sunrui <sunrui26@huawei.com>
To: Ard Biesheuvel <ard.biesheuvel@linaro.org>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>
CC: "linux-arm-kernel@lists.infradead.org" 
        <linux-arm-kernel@lists.infradead.org>,
        "catalin.marinas@arm.com" <catalin.marinas@arm.com>,
        "will.deacon@arm.com" <will.deacon@arm.com>
Subject: Re: [PATCH] arm64/lib: improve CRC32 performance for deep pipelines
Thread-Topic: [PATCH] arm64/lib: improve CRC32 performance for deep pipelines
Thread-Index: AdSGxiQQbnriIBeUQ8ucFbMMSDns2g==
Date: Wed, 28 Nov 2018 03:01:22 +0000
Message-ID: <0DF8AA8C9CD0FB4ABF4E83674055F7E2D91052@DGGEMI528-MBX.china.huawei.com>
Accept-Language: en-US
Content-Language: zh-CN
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-originating-ip: [10.40.42.201]
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 8BIT
MIME-Version: 1.0
X-CFilter-Loop: Reflected
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The code execute on my system performance improves from
# time ./old

real    0m6.645s
user    0m6.644s
sys     0m0.001s

to

# time ./new

real    0m5.565s
user    0m5.565s
sys     0m0.000s


> Improve the performance of the crc32() asm routines by getting rid of most of the branches and small sized loads on the common path.
> 
> Instead, use a branchless code path involving overlapping 16 byte loads to process the first (length % 32) bytes, and process the remainder using a loop that processes 32 bytes at a time.
> 
> Tested using the following test program:
> 
>   #include <stdlib.h>
> 
>   extern void crc32_le(unsigned short, char const*, int);
> 
>   int main(void)
>   {
>     static const char buf[4096];
> 
>     srand(20181126);
> 
>     for (int i = 0; i < 100 * 1000 * 1000; i++)
>       crc32_le(0, buf, rand() % 1024);
> 
>     return 0;
>   }
> 
> On Cortex-A53 and Cortex-A57, the performance regresses but only very slightly. On Cortex-A72 however, the performance improves from
> 
>   $ time ./crc32
> 
>   real  0m10.149s
>   user  0m10.149s
>   sys   0m0.000s
> 
> to
> 
>   $ time ./crc32
> 
>   real  0m7.915s
>   user  0m7.915s
>   sys   0m0.000s
> 
> Cc: Rui Sun <sunrui26@huawei.com>
> Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
> ---
> Cortex-A57 tcrypt results after the patch.
> 
> I ran Rui's code [0] as well. On Cortex-A57, performance regresses a bit more (but not dramatically). On Cortex-A72, it executes at
> 
> $ time ./crc32 
> 
> real	0m9.625s
> user	0m9.625s
> sys	0m0.000s
> 
> Rui, can you please benchmark this code on your system as well?
> 
> [0] https://lore.kernel.org/lkml/1542612560-10089-1-git-send-email-sunrui26@huawei.com/
> 
>  arch/arm64/lib/crc32.S | 54 ++++++++++++++++++--
>  1 file changed, 49 insertions(+), 5 deletions(-)
> 
> diff --git a/arch/arm64/lib/crc32.S b/arch/arm64/lib/crc32.S index 5bc1e85b4e1c..f132f2a7522e 100644
> --- a/arch/arm64/lib/crc32.S
> +++ b/arch/arm64/lib/crc32.S
> @@ -15,15 +15,59 @@
>  	.cpu		generic+crc
>  
>  	.macro		__crc32, c
> -0:	subs		x2, x2, #16
> -	b.mi		8f
> -	ldp		x3, x4, [x1], #16
> +	cmp		x2, #16
> +	b.lt		8f			// less than 16 bytes
> +
> +	and		x7, x2, #0x1f
> +	and		x2, x2, #~0x1f
> +	cbz		x7, 32f			// multiple of 32 bytes
> +
> +	and		x8, x7, #0xf
> +	ldp		x3, x4, [x1]
> +	add		x8, x8, x1
> +	add		x1, x1, x7
> +	ldp		x5, x6, [x8]
>  CPU_BE(	rev		x3, x3		)
>  CPU_BE(	rev		x4, x4		)
> +CPU_BE(	rev		x5, x5		)
> +CPU_BE(	rev		x6, x6		)
> +
> +	tst		x7, #8
> +	crc32\c\()x	w8, w0, x3
> +	csel		x3, x3, x4, eq
> +	csel		w0, w0, w8, eq
> +	tst		x7, #4
> +	lsr		x4, x3, #32
> +	crc32\c\()w	w8, w0, w3
> +	csel		x3, x3, x4, eq
> +	csel		w0, w0, w8, eq
> +	tst		x7, #2
> +	lsr		w4, w3, #16
> +	crc32\c\()h	w8, w0, w3
> +	csel		w3, w3, w4, eq
> +	csel		w0, w0, w8, eq
> +	tst		x7, #1
> +	crc32\c\()b	w8, w0, w3
> +	csel		w0, w0, w8, eq
> +	tst		x7, #16
> +	crc32\c\()x	w8, w0, x5
> +	crc32\c\()x	w8, w8, x6
> +	csel		w0, w0, w8, eq
> +	cbz		x2, 0f
> +
> +32:	ldp		x3, x4, [x1], #32
> +	sub		x2, x2, #32
> +	ldp		x5, x6, [x1, #-16]
> +CPU_BE(	rev		x3, x3		)
> +CPU_BE(	rev		x4, x4		)
> +CPU_BE(	rev		x5, x5		)
> +CPU_BE(	rev		x6, x6		)
>  	crc32\c\()x	w0, w0, x3
>  	crc32\c\()x	w0, w0, x4
> -	b.ne		0b
> -	ret
> +	crc32\c\()x	w0, w0, x5
> +	crc32\c\()x	w0, w0, x6
> +	cbnz		x2, 32b
> +0:	ret
>  
>  8:	tbz		x2, #3, 4f
>  	ldr		x3, [x1], #8
> --
> 2.19.1
> 
> 
> BEFORE testing speed of async crc32c (crc32c-generic)
> tcrypt: test  0 (   16 byte blocks,   16 bytes per update,   1 updates): 35416299 opers/sec, 566660784 bytes/sec
> tcrypt: test  1 (   64 byte blocks,   16 bytes per update,   4 updates): 5342888 opers/sec, 341944832 bytes/sec
> tcrypt: test  2 (   64 byte blocks,   64 bytes per update,   1 updates): 30056634 opers/sec, 1923624576 bytes/sec
> tcrypt: test  3 (  256 byte blocks,   16 bytes per update,  16 updates): 1543567 opers/sec, 395153152 bytes/sec
> tcrypt: test  4 (  256 byte blocks,   64 bytes per update,   4 updates): 4865198 opers/sec, 1245490688 bytes/sec
> tcrypt: test  5 (  256 byte blocks,  256 bytes per update,   1 updates): 12709474 opers/sec, 3253625344 bytes/sec
> tcrypt: test  6 ( 1024 byte blocks,   16 bytes per update,  64 updates): 401746 opers/sec, 411387904 bytes/sec
> tcrypt: test  7 ( 1024 byte blocks,  256 bytes per update,   4 updates): 2576764 opers/sec, 2638606336 bytes/sec
> tcrypt: test  8 ( 1024 byte blocks, 1024 bytes per update,   1 updates): 4464109 opers/sec, 4571247616 bytes/sec
> tcrypt: test  9 ( 2048 byte blocks,   16 bytes per update, 128 updates): 202236 opers/sec, 414179328 bytes/sec
> tcrypt: test 10 ( 2048 byte blocks,  256 bytes per update,   8 updates): 1344017 opers/sec, 2752546816 bytes/sec
> tcrypt: test 11 ( 2048 byte blocks, 1024 bytes per update,   2 updates): 2000544 opers/sec, 4097114112 bytes/sec
> tcrypt: test 12 ( 2048 byte blocks, 2048 bytes per update,   1 updates): 2395890 opers/sec, 4906782720 bytes/sec
> tcrypt: test 13 ( 4096 byte blocks,   16 bytes per update, 256 updates): 101569 opers/sec, 416026624 bytes/sec
> tcrypt: test 14 ( 4096 byte blocks,  256 bytes per update,  16 updates): 687876 opers/sec, 2817540096 bytes/sec
> tcrypt: test 15 ( 4096 byte blocks, 1024 bytes per update,   4 updates): 1029042 opers/sec, 4214956032 bytes/sec
> tcrypt: test 16 ( 4096 byte blocks, 4096 bytes per update,   1 updates): 1206227 opers/sec, 4940705792 bytes/sec
> tcrypt: test 17 ( 8192 byte blocks,   16 bytes per update, 512 updates):  50842 opers/sec, 416497664 bytes/sec
> tcrypt: test 18 ( 8192 byte blocks,  256 bytes per update,  32 updates): 347779 opers/sec, 2849005568 bytes/sec
> tcrypt: test 19 ( 8192 byte blocks, 1024 bytes per update,   8 updates): 525054 opers/sec, 4301242368 bytes/sec
> tcrypt: test 20 ( 8192 byte blocks, 4096 bytes per update,   2 updates): 600919 opers/sec, 4922728448 bytes/sec
> tcrypt: test 21 ( 8192 byte blocks, 8192 bytes per update,   1 updates): 606954 opers/sec, 4972167168 bytes/sec
> 
> AFTER testing speed of async crc32c (crc32c-generic)
> tcrypt: test  0 (   16 byte blocks,   16 bytes per update,   1 updates): 30535173 opers/sec, 488562768 bytes/sec
> tcrypt: test  1 (   64 byte blocks,   16 bytes per update,   4 updates): 4798401 opers/sec, 307097664 bytes/sec
> tcrypt: test  2 (   64 byte blocks,   64 bytes per update,   1 updates): 30061075 opers/sec, 1923908800 bytes/sec
> tcrypt: test  3 (  256 byte blocks,   16 bytes per update,  16 updates): 1359905 opers/sec, 348135680 bytes/sec
> tcrypt: test  4 (  256 byte blocks,   64 bytes per update,   4 updates): 4862043 opers/sec, 1244683008 bytes/sec
> tcrypt: test  5 (  256 byte blocks,  256 bytes per update,   1 updates): 14375092 opers/sec, 3680023552 bytes/sec
> tcrypt: test  6 ( 1024 byte blocks,   16 bytes per update,  64 updates): 351936 opers/sec, 360382464 bytes/sec
> tcrypt: test  7 ( 1024 byte blocks,  256 bytes per update,   4 updates): 2665564 opers/sec, 2729537536 bytes/sec
> tcrypt: test  8 ( 1024 byte blocks, 1024 bytes per update,   1 updates): 4467924 opers/sec, 4575154176 bytes/sec
> tcrypt: test  9 ( 2048 byte blocks,   16 bytes per update, 128 updates): 177021 opers/sec, 362539008 bytes/sec
> tcrypt: test 10 ( 2048 byte blocks,  256 bytes per update,   8 updates): 1414689 opers/sec, 2897283072 bytes/sec
> tcrypt: test 11 ( 2048 byte blocks, 1024 bytes per update,   2 updates): 1995413 opers/sec, 4086605824 bytes/sec
> tcrypt: test 12 ( 2048 byte blocks, 2048 bytes per update,   1 updates): 2393630 opers/sec, 4902154240 bytes/sec
> tcrypt: test 13 ( 4096 byte blocks,   16 bytes per update, 256 updates):  88758 opers/sec, 363552768 bytes/sec
> tcrypt: test 14 ( 4096 byte blocks,  256 bytes per update,  16 updates): 731752 opers/sec, 2997256192 bytes/sec
> tcrypt: test 15 ( 4096 byte blocks, 1024 bytes per update,   4 updates): 1030393 opers/sec, 4220489728 bytes/sec
> tcrypt: test 16 ( 4096 byte blocks, 4096 bytes per update,   1 updates): 1205718 opers/sec, 4938620928 bytes/sec
> tcrypt: test 17 ( 8192 byte blocks,   16 bytes per update, 512 updates):  44450 opers/sec, 364134400 bytes/sec
> tcrypt: test 18 ( 8192 byte blocks,  256 bytes per update,  32 updates): 373236 opers/sec, 3057549312 bytes/sec
> tcrypt: test 19 ( 8192 byte blocks, 1024 bytes per update,   8 updates): 524905 opers/sec, 4300021760 bytes/sec
> tcrypt: test 20 ( 8192 byte blocks, 4096 bytes per update,   2 updates): 601242 opers/sec, 4925374464 bytes/sec
> tcrypt: test 21 ( 8192 byte blocks, 8192 bytes per update,   1 updates): 606769 opers/sec, 4970651648 bytes/sec
