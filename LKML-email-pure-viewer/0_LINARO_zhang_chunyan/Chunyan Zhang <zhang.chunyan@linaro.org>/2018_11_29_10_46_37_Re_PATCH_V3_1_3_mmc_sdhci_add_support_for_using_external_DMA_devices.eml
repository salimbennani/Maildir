Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 29 Nov 2018 19:48:49 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id C79F25803ED;
	Thu, 29 Nov 2018 02:46:55 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga005-1.jf.intel.com with ESMTP; 29 Nov 2018 02:46:55 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Acawr9x2ep2Z4hvppsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segSLf/xwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJOUcZfVSNPAo2y?=
 =?us-ascii?q?YYgSAeQfIelYtJH9qlkVoBuiGQWhHv/jxiNUinL026AxzuQvERvB3AwlB98Drn?=
 =?us-ascii?q?TUrMjzNKYSS++1yrTDwjbDb/xM3zf955XDfxcgoPGMR71wd8XRxVMzGAPFk1WQ?=
 =?us-ascii?q?r4zkMCmT1ukWt2ib7uxgWvi1i24gsQ1xpSKvxsg1h4TPm4kbyUjE+D1nzIopId?=
 =?us-ascii?q?C0UlN3bNC6HJdKqi2XNJd6TtkjTmxqoCo21KEKtJqhcCUJyJkr3QDTZ+CEfoSS?=
 =?us-ascii?q?4x/uVOCcKipiin1/YrKwnROy/FCgyuLiUsm0105HrjRKktbSrHABzR/T5dadSv?=
 =?us-ascii?q?t74Eih3SyD1wfJ6uFLOUw0lKzbJIA9wrMoiJYfrUDOEjXrlEj4kqOabFgo9+u0?=
 =?us-ascii?q?5+j9Y7jrpIeQN4puhQH/NqQulNa/AeM9MgUWW2ib+OK81KDs/EHgQ7VFkOc2kq?=
 =?us-ascii?q?/Hv5DePMgboaC4AwlL3YY58Bu/ETim38oCnXUdL1JKZgiHj473NFHKOvz4Cu2/?=
 =?us-ascii?q?g1u0nDdx2//GJqHhAonKLnXblLfhfLV95FBGxAs80NBS/JZUCrAHIPLuVU79rt?=
 =?us-ascii?q?3YDhklMwOqx+brEsly1oQbWWiXGK+WLLvSsUOU5uIoO+SMZJUauDfhK/c/4P7i?=
 =?us-ascii?q?l385mUIHcqmv0psac3S4HvVgI0WEbnvgmNYBEWEWvgUgSOzmkkGNUTlWZ3yqRa?=
 =?us-ascii?q?Iz+ik7CJ66DYfEXo2tgruB0zmhEp1VYWBGDFaMEXDzeoWAWvcMbj+SI8B7njwF?=
 =?us-ascii?q?U7ihV5Eu1RW0uADmzLpnK/Le+jcEupL7yNh1++rTmAko+jxvD8Sd1GKNQ3tunm?=
 =?us-ascii?q?wSRT87x6R/oU17ylee3ql0mf1YFdpP5/xXVgc2L4LTz+t/C9rqQALOYs+JSEq6?=
 =?us-ascii?q?QtWhGTwxTcg+w9kUb0Z5GtWtlBbD3yWxDr8RlryLAoE0863G03jwIcZ912jJ1K?=
 =?us-ascii?q?07g1Y6RctPMHWshrRj+AjLG47Jj0KZmr63eqsGwi7C6n2PzWqUs0FeSw5/T6PF?=
 =?us-ascii?q?UXcbZkvVqNT54ljPT7uvCbQhLwtAxtSOKqpMat31k1pGQO3vN8jZY2K0g22wHw?=
 =?us-ascii?q?qHxquQbIr2fGUQxDjSB1Iakw8N53qGNRIxBiG6o23ACjxjDlbvY0Lq8eljp3K3?=
 =?us-ascii?q?VE40zweWb0J/07q54AIahfuZS/kLxLILpD8hqyloHFa6x9/WF9uApw9mfKVAYd?=
 =?us-ascii?q?M84E1L1X7Duwx6JJygK6FihlgRcwlsu0Pu1hN3CphPkMQwrXMqyhZyJryc0F9b?=
 =?us-ascii?q?azyY2pXwMKXNKmbu5BCvd7LW2lbG3dmM/qcA9vs5pEvjvQ2zDUUi7mho3MNT03?=
 =?us-ascii?q?uf4ZXKEhEfUZbwUkYx6hh7qKvWYig754PIy3JsNbO4vSPF29IsHOEl0Aqvf89D?=
 =?us-ascii?q?MKOYEw//C80bB9W0JOM2gVSobxIEM/pU9K47JM6mc/qG2Ki2POdvhj6mjGJH4J?=
 =?us-ascii?q?xj3UKI7SZzVunI35MdyfGCwgSHTyv8jEumss3vg4BEZC0dEXClySf5A45dfKty?=
 =?us-ascii?q?cpgRCWevOsG42s9xh5rwVHFG7l6jAFUG1dSteRqTaVz9wAJR2V4WoXyhhSu30T?=
 =?us-ascii?q?h0nys1oaqY2SzE2/7iewYfOm5XWGliik/hIIi1j9wAXEmkdRMplAaj5Uvhw6hb?=
 =?us-ascii?q?paJ/L3TcQEtSfij2KX1iXbW0traYf8FP75Youz1NUOugeVCaVqL9oxwC3iPhBW?=
 =?us-ascii?q?Re3jM7dzKtupnjhBx1kmGdLHVyrHrfZ85wwwzS5NjdRf5XwzoHSzN0iTjRBlig?=
 =?us-ascii?q?Idap+c+YmIvEsuC7T2ihTIFccTH3zYOcsyu2/W1rDge4n/ypmN3nEA463DT/19?=
 =?us-ascii?q?lrUyXIsRn9bpPq16S8LeJoYE1oCEXg5Mp9H4F0ipEwi40I2XgGmpWV+mIKkWTp?=
 =?us-ascii?q?PtVaw67+bGcNSiQNw97a+wXl3ExjLnSUx4P2THmdw81hZ8WkbWMSwC4y88dKCK?=
 =?us-ascii?q?KM5rxegSR1uka4rR7WYfVlmzcdyPgu52QAj+AHpgUt1TmdDa4IHUZDIyPsjRuI?=
 =?us-ascii?q?4su6rKVWYmavbLex2FB/ndCnELGNvAVcVGzldZclGC969t9/P07U0H3v9oHkf8?=
 =?us-ascii?q?Hdbc4Uth2RiRvBjvJaKJQslvoRnipnOHnwvXkky+49kBxv0ou2vImBK2Vx4q25?=
 =?us-ascii?q?BgRUOSHyZ8MW4jvtl7pRnt6K34CzGZVsAi4EU4HvTfKsDTIer/DnNxuVHT04q3?=
 =?us-ascii?q?ebH6ffHACF5EdnqXLPD46kN3WNKHYFytViQQGXJFZDjwAMQDU6gpk5GxioxMP7?=
 =?us-ascii?q?dUd2+CsR6kTkqhdWyeJoKhr/UnrZpAiycTc5U5yfLBtQ7gFf6EbZK82e7uRvHy?=
 =?us-ascii?q?5G+p2tthCCKmueZw5QF2EGRlSEB0z/Prmp/dTB8++YBvenL/vTe7qOr/ZSV+yP?=
 =?us-ascii?q?xZKp3Ytr5DKMNsSJPnl/APw3wEtDXXZlG8vHnzUDUTAYlyXIb8SDvhez5jV3rt?=
 =?us-ascii?q?yj8PTsQA/v5ZWAC7pRMdVs+hC6m6SDN/SXhCZ2NzlYzI4MxWTTxbgb3V4SjTxu?=
 =?us-ascii?q?dja3HbQBsy7NULzfmqtNAxEHbCNzMdNC77gg0QlVJc7bltT126Zigf4oEFhFT0?=
 =?us-ascii?q?Lum8GzacwOImGwL1fHBEeNNLSbKjzH2cD3YaWgSbJOiOVYrQG/uTGeE0X7JDSM?=
 =?us-ascii?q?iyHpVwyzMeFLlCybIB1euISnfhlxE2TsUNLmZQO9MNJsiT02wLs0hm7FNGIGMD?=
 =?us-ascii?q?h8dV9NoaOU7S9Cnvp/HGlB5GJ/LeaYgyaZ8/XYKpEOvPprGCt0keda4HU8y7RN?=
 =?us-ascii?q?7SBEROZ6mC3drtN1p1Gmk++PyidoURZUqzZLgp6LsltmOanD6pZAXnPEr1ox6j?=
 =?us-ascii?q?C5Bw4Lrt0tKsDpp61KgozGmLjyITEE88/S4cYGL8nSNM+DdnEmNEy6NiTTCV4u?=
 =?us-ascii?q?TSOtJGjZz35dmfedvimHrpE8pd7nmIcIW7ZdfFg0EPoADQJiBtNUc8Q/ZS8tjb?=
 =?us-ascii?q?PO1J1A3nG5thSEAZwC5p0=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAAASw/9bh0O0hNFlHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBg2sng3mIGIwIgg0Uly6BcywTAYdyIjQJDQEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BCA0JCCkjDII2JAGCYgECAwECIAQZAQE3AQUJAQEKCw0CAiYCAgMfEgEFARwGC?=
 =?us-ascii?q?gkFA4MZggIFmnM8ih1wfDOCdgEBBYcoCBJ5iwuCFoERgxKESoM7gleJI4F4hQR?=
 =?us-ascii?q?RhGGKVAcCkTIYXnyINIcOmD0wgSWCDTMaMHQGgjWCGwwXiF6FTDIzgQUBAYprg?=
 =?us-ascii?q?k0BAQ?=
X-IPAS-Result: =?us-ascii?q?A0ANAAASw/9bh0O0hNFlHAEBAQQBAQcEAQGBUQcBAQsBg2s?=
 =?us-ascii?q?ng3mIGIwIgg0Uly6BcywTAYdyIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2J?=
 =?us-ascii?q?AGCYgECAwECIAQZAQE3AQUJAQEKCw0CAiYCAgMfEgEFARwGCgkFA4MZggIFmnM?=
 =?us-ascii?q?8ih1wfDOCdgEBBYcoCBJ5iwuCFoERgxKESoM7gleJI4F4hQRRhGGKVAcCkTIYX?=
 =?us-ascii?q?nyINIcOmD0wgSWCDTMaMHQGgjWCGwwXiF6FTDIzgQUBAYprgk0BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,294,1539673200"; 
   d="scan'208";a="42047810"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 02:46:54 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727645AbeK2Vvq (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 29 Nov 2018 16:51:46 -0500
Received: from mail-ed1-f65.google.com ([209.85.208.65]:46664 "EHLO
        mail-ed1-f65.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726946AbeK2Vvq (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 29 Nov 2018 16:51:46 -0500
Received: by mail-ed1-f65.google.com with SMTP id o10so1452949edt.13
        for <linux-kernel@vger.kernel.org>; Thu, 29 Nov 2018 02:46:49 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=Ip1s5/eUtCFzB9tpB9q7uRXi2PSiBjYmNwyBewdZMP0=;
        b=En3QXAdlTwWk/0n7H37oKG+Gxxr4n9G5ytAfaMASlm22HN6GzOyUtZB5Ghb91OxKfn
         7OQd+U1M9YRQSsnHdW+Bj7d89opIkbPAtJDSIlKzcVr2PLbY34xtC2IG7jvuyUqZa1jl
         g7mO5DxTZQaWhxJFVhKCzjnBkA+nsUpYGnOGU=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=Ip1s5/eUtCFzB9tpB9q7uRXi2PSiBjYmNwyBewdZMP0=;
        b=DXJIb9rqFAbOtBfgB9BTPN4UXISOADKENCdBEJboHgg5uZiCU3YSAsUES2PT3X5VOS
         GZB3X8WPNiLvoQFzy+uo3JuwVJ/IS/313vYyNNTVTcapoG0sHJIvQMTH+jOYAHhAE1zu
         X7D643fzw+PqpoMYMm9OQWERFEAk+1LKiBSe5Jsw9ehyCrpMZVI+Fn6myzcVw/z38nFR
         sF7kAftG+s068iobzbXa7U+FEpq9ZVYnd9KNi531G+hwo4a7s+5BGOF1M+9zlGgfuD37
         gMY/MaFEZrhuLDyeL2YjKjUPiHB93MB5W8v0og0DvDriggT3yMLGp/rqkRq46u2BlXca
         t+iA==
X-Gm-Message-State: AA+aEWYk5K/WafCmGX5o8WnTMM/PHKjBXsa9crlv5Sbqddmce2sBSaFp
        wv+nfkLZAmsQtKS1kN98/sGaiG9OTrAD73BYwVIOLQ==
X-Google-Smtp-Source: AFSGD/VwviGWEDM9TJofM2YU/qnPWu4IJ63rLYlwJs5240a3xg1dxCbM32/L9Jc4MYuJe7GqfHpKphkRzQrEurcTRdE=
X-Received: by 2002:a50:9f64:: with SMTP id b91mr1185166edf.235.1543488408937;
 Thu, 29 Nov 2018 02:46:48 -0800 (PST)
MIME-Version: 1.0
References: <1542007566-9449-2-git-send-email-zhang.chunyan@linaro.org>
 <1543471664-22856-1-git-send-email-zhang.chunyan@linaro.org>
 <cb2cdfb9-f3e6-72cd-2d55-734b08ea3e15@intel.com> <CAAfSe-tw-pEdFBTjeGBQD03QdNMkdnHdf8=2J01Qczf54yJ9CA@mail.gmail.com>
 <9cbb0593-f817-5388-e379-0f7d33cb66b3@intel.com>
In-Reply-To: <9cbb0593-f817-5388-e379-0f7d33cb66b3@intel.com>
From: Chunyan Zhang <zhang.chunyan@linaro.org>
Date: Thu, 29 Nov 2018 18:46:37 +0800
Message-ID: <CAG2=9p9h-uOhVgeBK8kpJs1cODX5ZiqXSXX1JVp8E8Mcm63yFg@mail.gmail.com>
Subject: Re: [PATCH V3 1/3] mmc: sdhci: add support for using external DMA devices
To: Adrian Hunter <adrian.hunter@intel.com>
Cc: Lyra Zhang <zhang.lyra@gmail.com>,
        Ulf Hansson <ulf.hansson@linaro.org>,
        Faiz Abbas <faiz_abbas@ti.com>, linux-mmc@vger.kernel.org,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>,
        Arnd Bergmann <arnd@arndb.de>, Mark Brown <broonie@kernel.org>,
        Kishon Vijay Abraham I <kishon@ti.com>,
        Sekhar Nori <nsekhar@ti.com>
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Thu, 29 Nov 2018 at 18:41, Adrian Hunter <adrian.hunter@intel.com> wrote:
>
> On 29/11/18 11:44 AM, Chunyan Zhang wrote:
> > On Thu, 29 Nov 2018 at 17:25, Adrian Hunter <adrian.hunter@intel.com> wrote:
> >>
> >> On 29/11/18 8:07 AM, Chunyan Zhang wrote:
> >>> Some standard SD host controllers can support both external dma
> >>> controllers as well as ADMA/SDMA in which the SD host controller
> >>> acts as DMA master. TI's omap controller is the case as an example.
> >>>
> >>> Currently the generic SDHCI code supports ADMA/SDMA integrated in
> >>> the host controller but does not have any support for external DMA
> >>> controllers implemented using dmaengine, meaning that custom code is
> >>> needed for any systems that use an external DMA controller with SDHCI.
> >>>
> >>> Signed-off-by: Chunyan Zhang <zhang.chunyan@linaro.org>
> >>> ---
> >>>  drivers/mmc/host/Kconfig |  14 ++++
> >>>  drivers/mmc/host/sdhci.c | 185 ++++++++++++++++++++++++++++++++++++++++++++++-
> >>>  drivers/mmc/host/sdhci.h |   8 ++
> >>>  3 files changed, 206 insertions(+), 1 deletion(-)
> >>>
> >>> diff --git a/drivers/mmc/host/Kconfig b/drivers/mmc/host/Kconfig
> >>> index 1b58739..4183f43 100644
> >>> --- a/drivers/mmc/host/Kconfig
> >>> +++ b/drivers/mmc/host/Kconfig
> >>> @@ -969,6 +969,7 @@ config MMC_SDHCI_XENON
> >>>  config MMC_SDHCI_OMAP
> >>>       tristate "TI SDHCI Controller Support"
> >>>       depends on MMC_SDHCI_PLTFM && OF
> >>> +     select MMC_SDHCI_EXTERNAL_DMA if DMA_ENGINE
> >>>       help
> >>>         This selects the Secure Digital Host Controller Interface (SDHCI)
> >>>         support present in TI's DRA7 SOCs. The controller supports
> >>> @@ -977,3 +978,16 @@ config MMC_SDHCI_OMAP
> >>>         If you have a controller with this interface, say Y or M here.
> >>>
> >>>         If unsure, say N.
> >>> +
> >>> +config MMC_SDHCI_EXTERNAL_DMA
> >>> +        bool "Support external DMA in standard SD host controller"
> >>> +     depends on MMC_SDHCI
> >>> +     depends on DMA_ENGINE
> >>> +     help
> >>> +       This is an option for using external DMA device via dmaengine
> >>> +       framework.
> >>> +
> >>> +       If you have a controller which support using external DMA device
> >>> +       for data transfer, can say Y.
> >>> +
> >>> +       If unsure, say N.
> >>
> >> So if you are going to select this, then you don't need the prompt or help
> >> anymore i.e.
> >>
> >> config MMC_SDHCI_EXTERNAL_DMA
> >>         bool
> >>
> >>
> >>> diff --git a/drivers/mmc/host/sdhci.c b/drivers/mmc/host/sdhci.c
> >>> index 99bdae5..ad7cc80 100644
> >>> --- a/drivers/mmc/host/sdhci.c
> >>> +++ b/drivers/mmc/host/sdhci.c
> >>> @@ -14,6 +14,7 @@
> >>>   */
> >>>
> >>>  #include <linux/delay.h>
> >>> +#include <linux/dmaengine.h>
> >>>  #include <linux/ktime.h>
> >>>  #include <linux/highmem.h>
> >>>  #include <linux/io.h>
> >>> @@ -1309,6 +1310,162 @@ static void sdhci_del_timer(struct sdhci_host *host, struct mmc_request *mrq)
> >>>               del_timer(&host->timer);
> >>>  }
> >>>
> >>> +#if IS_ENABLED(CONFIG_MMC_SDHCI_EXTERNAL_DMA)
> >>> +static int sdhci_external_dma_init(struct sdhci_host *host)
> >>> +{
> >>> +     int ret = 0;
> >>> +     struct mmc_host *mmc = host->mmc;
> >>> +
> >>> +     host->tx_chan = dma_request_chan(mmc->parent, "tx");
> >>> +     if (IS_ERR(host->tx_chan)) {
> >>> +             ret = PTR_ERR(host->tx_chan);
> >>> +             if (ret != -EPROBE_DEFER)
> >>> +                     pr_warn("Failed to request TX DMA channel.\n");
> >>> +             host->tx_chan = NULL;
> >>> +             return ret;
> >>> +     }
> >>> +
> >>> +     host->rx_chan = dma_request_chan(mmc->parent, "rx");
> >>> +     if (IS_ERR(host->rx_chan)) {
> >>> +             if (host->tx_chan) {
> >>> +                     dma_release_channel(host->tx_chan);
> >>> +                     host->tx_chan = NULL;
> >>> +             }
> >>> +
> >>> +             ret = PTR_ERR(host->rx_chan);
> >>> +             if (ret != -EPROBE_DEFER)
> >>> +                     pr_warn("Failed to request RX DMA channel.\n");
> >>> +             host->rx_chan = NULL;
> >>> +     }
> >>> +
> >>> +     return ret;
> >>> +}
> >>> +
> >>> +static inline struct dma_chan *
> >>> +sdhci_external_dma_channel(struct sdhci_host *host, struct mmc_data *data)
> >>> +{
> >>> +     return data->flags & MMC_DATA_WRITE ? host->tx_chan : host->rx_chan;
> >>> +}
> >>> +
> >>> +static int sdhci_external_dma_setup(struct sdhci_host *host,
> >>> +                                 struct mmc_command *cmd)
> >>> +{
> >>> +     int ret, i;
> >>> +     struct dma_async_tx_descriptor *desc;
> >>> +     struct mmc_data *data = cmd->data;
> >>> +     struct dma_chan *chan;
> >>> +     struct dma_slave_config cfg;
> >>> +     dma_cookie_t cookie;
> >>> +
> >>> +     if (!host->mapbase)
> >>> +             return -EINVAL;
> >>> +
> >>> +     if (!data)
> >>> +             return 0;
> >>
> >> It would read better if the above 2 if-statements were the other way around i.e.
> >>
> >>         if (!data)
> >>                 return 0;
> >>
> >>         if (!host->mapbase)
> >>                 return -EINVAL;
> >>
> >
> > Ok.
> >
> >>> +
> >>> +     cfg.src_addr = host->mapbase + SDHCI_BUFFER;
> >>> +     cfg.dst_addr = host->mapbase + SDHCI_BUFFER;
> >>> +     cfg.src_addr_width = DMA_SLAVE_BUSWIDTH_4_BYTES;
> >>> +     cfg.dst_addr_width = DMA_SLAVE_BUSWIDTH_4_BYTES;
> >>> +     cfg.src_maxburst = data->blksz / 4;
> >>> +     cfg.dst_maxburst = data->blksz / 4;
> >>> +
> >>> +     /* Sanity check: all the SG entries must be aligned by block size. */
> >>> +     for (i = 0; i < data->sg_len; i++) {
> >>> +             if ((data->sg + i)->length % data->blksz)
> >>> +                     return -EINVAL;
> >>> +     }
> >>> +
> >>> +     chan = sdhci_external_dma_channel(host, data);
> >>> +
> >>> +     ret = dmaengine_slave_config(chan, &cfg);
> >>> +     if (ret)
> >>> +             return ret;
> >>> +
> >>> +     desc = dmaengine_prep_slave_sg(chan, data->sg, data->sg_len,
> >>> +                                    mmc_get_dma_dir(data),
> >>> +                                    DMA_PREP_INTERRUPT | DMA_CTRL_ACK);
> >>> +     if (!desc)
> >>> +             return -EINVAL;
> >>> +
> >>> +     desc->callback = NULL;
> >>> +     desc->callback_param = NULL;
> >>> +
> >>> +     cookie = dmaengine_submit(desc);
> >>> +     if (cookie < 0)
> >>> +             ret = cookie;
> >>> +
> >>> +     return ret;
> >>> +}
> >>> +
> >>> +static void sdhci_external_dma_release(struct sdhci_host *host)
> >>> +{
> >>> +     if (host->tx_chan) {
> >>> +             dma_release_channel(host->tx_chan);
> >>> +             host->tx_chan = NULL;
> >>> +     }
> >>> +
> >>> +     if (host->rx_chan) {
> >>> +             dma_release_channel(host->rx_chan);
> >>> +             host->rx_chan = NULL;
> >>> +     }
> >>> +
> >>> +     sdhci_switch_external_dma(host, false);
> >>> +}
> >>> +
> >>> +static void sdhci_external_dma_prepare_data(struct sdhci_host *host,
> >>> +                                         struct mmc_command *cmd)
> >>> +{
> >>> +     if (sdhci_external_dma_setup(host, cmd)) {
> >>> +             sdhci_external_dma_release(host);
> >>> +             pr_err("%s: Failed to setup external DMA, switch to the DMA/PIO which standard SDHCI provides.\n",
> >>> +                    mmc_hostname(host->mmc));
> >>> +     } else {
> >>> +             /* Prepare for using external dma */
> >>> +             host->flags |= SDHCI_REQ_USE_DMA;
> >>> +     }
> >>> +
> >>> +     sdhci_prepare_data(host, cmd);
> >>> +}
> >>> +
> >>> +static void sdhci_external_dma_pre_transfer(struct sdhci_host *host,
> >>> +                                         struct mmc_command *cmd)
> >>> +{
> >>> +     struct dma_chan *chan;
> >>> +
> >>> +     if (cmd->opcode != MMC_SET_BLOCK_COUNT && cmd->data) {
> >>
> >> MMC_SET_BLOCK_COUNT doesn't have data so that part is not needed
> >
> > Didn't get you here.
> > This is for other packets except MMC_SET_BLOCK_COUNT.
> >
>
> MMC_SET_BLOCK_COUNT is not a data transfer command, so cmd->data == NULL anyway.

Oh, got you.
"if (cmd->data)" is enough here :)

Thank you,
Chunyan
