Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 04 Dec 2018 08:56:41 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id C77A158014B;
	Mon,  3 Dec 2018 10:17:08 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 03 Dec 2018 10:17:07 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AyPT4Wh9Gof5sxv9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1uofIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CRmRPQ8ZfWTJPDIy+?=
 =?us-ascii?q?YYsAE+0PMulXoYnmv1sDrwCzBRWuCe711jNFnGP60LM83u88EQ/GxgsgH9cWvX?=
 =?us-ascii?q?nJttr1LrsSWv26w6bSyzXIcu9b2Szm6IfUchAuv+yHULVrfsrP00YvERnKjk6L?=
 =?us-ascii?q?qYP5PzOayP8AvHKH4OplT+6vjHQnqw5orzWp28wiiZHJi5oLxlzY8Sh12ps5KN?=
 =?us-ascii?q?OmREJhfNKpE4dcuzubOoZ0Ws8uXWBltDgmxrADpJK2fDQFxZE5yxHDdvOKdpaE?=
 =?us-ascii?q?7g7tWeuUITp3mG9qd666ihu970Ss1PHzW8y23VlRsCZIkdzBuW4W2BPI6sWKTO?=
 =?us-ascii?q?Z28F271jaVzQ/T7/lJIUAqmqrfLJ4s2qAwlpUNvkTZBCP2m1v5jLWQdko6/uik?=
 =?us-ascii?q?8ePnYq/pppOENo90jB/xMrg2l8ChHeg1NhICU3WV9OiizrHv4E70TKlQgvA3kK?=
 =?us-ascii?q?TVqJXaKt4apq69DQ9VyIEj6xOnAjei0dQYm2QHLV1cdBKEkYfpIVfOL+78Dfum?=
 =?us-ascii?q?hFStnjFryO7cPrD6HJXNIWbMkK37cbZ+9UFc0gwzws5b555ODbEBOv3zVlfrtN?=
 =?us-ascii?q?PEFh85LxC0w+H/BdV514MeWnyADrWWMaPPqlKI4uMvI++RZI4aojr9Kv4l5+Lw?=
 =?us-ascii?q?gn89g1MSYa6p3Z4PYnCiAvtmO1mZYWbrgtoZEWcFpAs+TPDwh12FSzJTZ2uyUL?=
 =?us-ascii?q?g65jE0E4+mCYbDRoawgL2Oxiu7H5tWZnxYBVCIC3vna4KEW/IUYiKIPsBhiiAE?=
 =?us-ascii?q?VaSmS4I51xGusxH1x6BkLurT/C0Ys5Xj2cNx5+3SkxEy6DN1A96c02GLU2F7gG?=
 =?us-ascii?q?cISyUq06B4pEx30k2D3rRgg/xECdxT4OtEXR0hNZ7cyOx6CMr+WhjbcdeLU1um?=
 =?us-ascii?q?RtSmATcsTtM+2dMOYkB9G8m8gRDHxSalH7gVl7mTDpwu7q3cx2TxJ9p6y3ve16?=
 =?us-ascii?q?kulV8mTtFLNW2nnKF/8QfTCpXNk0WYkaaqaKsd0DTM9GeF0WqBokVYXBRsXqXC?=
 =?us-ascii?q?WHAVflHWosjh5kPeU7+uDqwqPRZbxs6cNKRGcN3pgk9ARPf4JtveZWW9m2OzBR?=
 =?us-ascii?q?aNwrOBd47qe2Qb3CXAB0kIiQET/XCaNQcgAietuX7RDDtrFVj3eUPj7fF+qG+n?=
 =?us-ascii?q?Tk8z1wyFcldu16Sr9RIPhfyTUfUT3qkatycnsDh0GFe939TLC9uPvQZhfaNcYc?=
 =?us-ascii?q?8j71dDz27Wqwt9Ppm4JaB4mlEeaxh3v1/p1xhvFoVAkM0qrHQ2zApyKaOUyk9B?=
 =?us-ascii?q?eymf3ZDqPr3XK2/y/B+0Zq7S21He1suW+6gV5PQ5rVXjoB+mFk44/3p71NlV1m?=
 =?us-ascii?q?OW5o/WAwoKTZLxTkE3+gBgqLHefCY86J3b1H12Paavrz/NxsgmBO0myhanYddS?=
 =?us-ascii?q?K6eEFA70E80HCMmiMu0qm161bh0aOOBe7rI7P8Sjd/Gewq6kIP5gnC66jWRA+I?=
 =?us-ascii?q?180l+M+zBgReLS3pcFw+uX3g2IVzrniFehs8b3mZ1LZD0IH2q/zzTkC5BVZqFo?=
 =?us-ascii?q?YYkLDmKuKdWtxtpin57tR2JY9Fm7ClMc2c+mZQCdb0bg0g1Xz0gXp2KomTG5zz?=
 =?us-ascii?q?Btjz4mtK6f0zHQzOT4cxoHPHVGRG1jjVfqPIi1gMoWXEmubwg1ihSl4Vz2yLRc?=
 =?us-ascii?q?pKR6N2PTW1tHfzDqL2F+Vau9rrqDY89V5JIoqylXS/m8YVaBR775ohsa1T7jHm?=
 =?us-ascii?q?REyDA6cTGqpov2nxhghG2BK3ZzqWLTedtsyhfH+NzcWflR0yIERCZikznXBVu8?=
 =?us-ascii?q?P96z8dWPjZjDseO+V2OnVpJNdynm1oeAtCq95W13DhyzhfGzmtv7EQck1S/3zc?=
 =?us-ascii?q?VlVSLNrBzkeInky7y6Mf57fklvHFL969B1GoZknosyhZEQ32MXhpGU/XoBjGfy?=
 =?us-ascii?q?Ps9X2aP4bHoRWzELx8TZ7xTi2E1mNniJ3Z72Vm2Bwst9YNm3emAW1Tg878xQCK?=
 =?us-ascii?q?eU8aZLnS16olejqQLRYP59nioSyPc06X4ahf0JtxQpzimHHr8SGkxYNzT2lxuU?=
 =?us-ascii?q?99C+sLlXZGG3fLi11Up+nsquAKuMow5CQ3b5ZoktHTVr4cphKlLM32b+6oXleN?=
 =?us-ascii?q?nWcNISuQeYkxbGj+hJNp0xkuAGijZgOWL4pXcl0fI0jQRy3ZGmu4iKM3lt/KW8?=
 =?us-ascii?q?AhJCNzz6fcUT+iz2jaZFn8abxISvHpRnGjUWU5rkV/OoEDQOtfv5MwaCCiEzqn?=
 =?us-ascii?q?CeGbDHBw+Q9F9mr27TE5CsL3yYP2MWzdJmRBmAPkBfhB0UUS4+np44EACq2cPg?=
 =?us-ascii?q?fF145jAX+l73tB9Mxvh0OBn4V2fVvB2oZSssSJiDMBpW6RlP50XPPsyb8O1zBD?=
 =?us-ascii?q?tU/oG7oAyON2ybZBlIDWcTVUyfHF3jOriu5d/d8+mXHOa+Lv3OYamQpuxaTfuH?=
 =?us-ascii?q?2ZWv0o5+9TaWKsqPJmViD+E82kdbXXF5HNnZmywSSyMNkSLBddWbpBC6+i14tc?=
 =?us-ascii?q?2/9PXrWATy5YqAEbdSMNNv+wyojqeHLeKfmCF5KTNA3JMW2XDI0KQf3EIViyx2?=
 =?us-ascii?q?dzmiD7UAtS3OTKLRgKNXDAQbayR8NMRW9aI8wxJNNNXfitP00L54k/E0B01EVV?=
 =?us-ascii?q?znhsGme8gKL3uhO1PAAUaBLK6GKiHTw8HrfaO8TqVdg/9JtxKrozaUDU/iMi6H?=
 =?us-ascii?q?lznoTB2vNeBMjCeGPB1Roo29cxBtCXT9Q9LicBG0LNh3jTguy70umnzKLXIcMS?=
 =?us-ascii?q?R7c05Vsr2Q7CZYju9jFGBb8nVlLfeLmyCC4uncK5YWt+ZrAytum+Jb5nQ616Va?=
 =?us-ascii?q?7CVeSPNpnyvSq8Zko0u6nemX1jpnTB1Opy5LhY2Ru0ViPKTZ9p9YVnfF/BIC92?=
 =?us-ascii?q?OQCxsRqtthC93vvb1Qy9fVmKLyLjdC78zb/c8GC8fIL8KHNSlpDR28IDPIARFN?=
 =?us-ascii?q?fz+pMXrDnUUVxOmf6nCPvLA7rJb2kZYDQ7MdU0Y6QKA0EENgSfYLOos/YDoi2Z?=
 =?us-ascii?q?eAl8UI6DLqpgfYQsxBpZvHW9qbCvCpLyyW2+oXLyAUyK/1eNxAfrbw3FZvPxwj?=
 =?us-ascii?q?xNzH?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AUAQC3cQVch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBZYExgjuYRIINFJk5AQErAYgJIjgSAQMBAQEBAQECARMBAQEKCwkIKS+CNiQ?=
 =?us-ascii?q?BgmIDAwECdgYJAQEKRgMxAQUBHAYYgxyCAgEEmlw8jDyFQYRlEowKF4F/g24HL?=
 =?us-ascii?q?opcAokMhmg2kBYJkVSJW4dLmEYGAgkHDyGBPIF2MxowQ4JtkHsfgTcBASGKNgE?=
 =?us-ascii?q?B?=
X-IPAS-Result: =?us-ascii?q?A0AUAQC3cQVch0O0hNFjHAEBAQQBAQcEAQGBZYExgjuYRII?=
 =?us-ascii?q?NFJk5AQErAYgJIjgSAQMBAQEBAQECARMBAQEKCwkIKS+CNiQBgmIDAwECdgYJA?=
 =?us-ascii?q?QEKRgMxAQUBHAYYgxyCAgEEmlw8jDyFQYRlEowKF4F/g24HLopcAokMhmg2kBY?=
 =?us-ascii?q?JkVSJW4dLmEYGAgkHDyGBPIF2MxowQ4JtkHsfgTcBASGKNgEB?=
X-IronPort-AV: E=Sophos;i="5.56,311,1539673200"; 
   d="scan'208";a="55325777"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 03 Dec 2018 10:17:06 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726812AbeLCSRH (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 3 Dec 2018 13:17:07 -0500
Received: from mail-pg1-f194.google.com ([209.85.215.194]:44418 "EHLO
        mail-pg1-f194.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726394AbeLCSRH (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 3 Dec 2018 13:17:07 -0500
Received: by mail-pg1-f194.google.com with SMTP id t13so6062390pgr.11
        for <linux-kernel@vger.kernel.org>; Mon, 03 Dec 2018 10:17:02 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:message-id:subject:from:to:cc:date:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=gTwHjlnUwENPTmWAwgejIC0hSbwaNBIeEIizQkjHv5c=;
        b=mQbxqQ0/eSqz8c1jinNXUhDO6HYXFq0dxo+qj0z2+oLGMRPqNAQ9aYtEx9UTv0ud0Q
         ZecW+MNGBbmbaN9fLUXetzu5KO0RFkou9FKcKgTCpwqIUYKH7eNXgWNuLvXaDD0jAWxU
         m2zwuGWCOxDMZAcVWAccxmIx+cFFrslSOFTzR+UqfvGJNxhfdDwXOcsQp/fxbAN0ATh0
         CfsWXVrcAXEgRPxResBtxjCMQImdpgWESLxy1EI+sEKwk60UkxauowmXWhTvGJNffRzZ
         t8txB8DyWStfwzTQMP15KojJYkPxNzed1Ku8wkc8ZY5JlmuEptUQEHsztdS3oEQBIzlj
         b3mg==
X-Gm-Message-State: AA+aEWYOJilKsyxFxq4zQJKcvLiAapF01lE0B6/3W+MzO9v4L7d9m8h9
        RZtkRY8u2vpDwvo9jREVNhaD+rOQ
X-Google-Smtp-Source: AFSGD/V0w9UB45w3M++zhSqXy30hKjdLkxOWA+4Eo1XD79BWaRNR+eTUTeDYz6npb7Hxzpw2qTcE+g==
X-Received: by 2002:a63:c24c:: with SMTP id l12mr14181740pgg.146.1543861022080;
        Mon, 03 Dec 2018 10:17:02 -0800 (PST)
Received: from ?IPv6:2620:15c:2cd:203:5cdc:422c:7b28:ebb5? ([2620:15c:2cd:203:5cdc:422c:7b28:ebb5])
        by smtp.gmail.com with ESMTPSA id g185sm11485082pfc.174.2018.12.03.10.17.00
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Mon, 03 Dec 2018 10:17:01 -0800 (PST)
Message-ID: <1543861019.185366.167.camel@acm.org>
Subject: Re: [PATCH 22/27] locking/lockdep: Reuse list entries that are no
 longer in use
From: Bart Van Assche <bvanassche@acm.org>
To: Peter Zijlstra <peterz@infradead.org>
Cc: mingo@redhat.com, tj@kernel.org, johannes.berg@intel.com,
        linux-kernel@vger.kernel.org
Date: Mon, 03 Dec 2018 10:16:59 -0800
In-Reply-To: <20181203173258.GK11614@hirez.programming.kicks-ass.net>
References: <20181128234325.110011-1-bvanassche@acm.org>
         <20181128234325.110011-23-bvanassche@acm.org>
         <20181129104902.GH2131@hirez.programming.kicks-ass.net>
         <20181129120143.GG2149@hirez.programming.kicks-ass.net>
         <1543510130.185366.139.camel@acm.org>
         <20181201202446.GA19706@hirez.programming.kicks-ass.net>
         <1543855248.185366.158.camel@acm.org>
         <20181203173258.GK11614@hirez.programming.kicks-ass.net>
Content-Type: text/plain; charset="UTF-7"
X-Mailer: Evolution 3.26.2-1 
Mime-Version: 1.0
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Mon, 2018-12-03 at 18:32 +-0100, Peter Zijlstra wrote:
+AD4 On Mon, Dec 03, 2018 at 08:40:48AM -0800, Bart Van Assche wrote:
+AD4 
+AD4 +AD4 +AD4 I think we can do this with a free bitmap and an array of 2 pending
+AD4 +AD4 +AD4 bitmaps and an index. Add newly freed entries to the pending bitmap
+AD4 +AD4 +AD4 indicated by the current index, when complete flip the index -- such
+AD4 +AD4 +AD4 that further new bits go to the other pending bitmap -- and call+AF8-rcu().
+AD4 +AD4 +AD4 
+AD4 +AD4 +AD4 Then, on the call+AF8-rcu() callback, ie. after a GP has happened, OR our
+AD4 +AD4 +AD4 pending bitmap into the free bitmap, and when the other pending bitmap
+AD4 +AD4 +AD4 isn't empty, flip the index again and start it all again.
+AD4 +AD4 +AD4 
+AD4 +AD4 +AD4 This ensures there is at least one full GP between setting a bit and it
+AD4 +AD4 +AD4 landing in the free mask.
+AD4 +AD4 
+AD4 +AD4 Hi Peter,
+AD4 +AD4 
+AD4 +AD4 How about the following alternative which requires only two bitmaps instead
+AD4 +AD4 of three:
+AD4 +AD4 - Maintain two bitmaps, one for the free entries and one for the entries
+AD4 +AD4   that are being freed.
+AD4 +AD4 - Protect all accesses to both bitmaps with the graph lock.
+AD4 +AD4 - zap+AF8-class() sets a bit in the +ACI-being freed+ACI bitmap for the entries that
+AD4 +AD4   should be freed after a GP.
+AD4 +AD4 - Instead of making free+AF8-zapped+AF8-classes() wait for a grace period by calling
+AD4 +AD4   synchronize+AF8-sched(), use call+AF8-rcu() and do the freeing work from inside the
+AD4 +AD4   RCU callback.
+AD4 +AD4 - From inside the RCU callback, set a bit in the +ACI-free+ACI bitmap for all entries
+AD4 +AD4   that have a bit set in the +ACI-being freed+ACI bitmap and clears the +ACI-being freed+ACI
+AD4 +AD4   bitmap.
+AD4 
+AD4 What happens when another unreg happens while the rcu+AF8-call thing is
+AD4 still pending?

A new flag will have to keep track of whether or not an RCU callback has
already been scheduled via rcu+AF8-call() but not yet executed to avoid double
RCU call complaints. In other code a possible alternative would be to
allocate the RCU head data structure dynamically. However, I don't think
that alternative is appropriate inside the lockdep code - I don't want to
introduce a circular dependency between the lockdep code and the memory
allocator.

Bart.
