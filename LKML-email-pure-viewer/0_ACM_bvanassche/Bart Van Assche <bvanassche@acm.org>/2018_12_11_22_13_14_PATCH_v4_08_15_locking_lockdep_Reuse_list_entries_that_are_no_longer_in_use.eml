Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 12 Dec 2018 08:56:53 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 5B47B58079D;
	Tue, 11 Dec 2018 14:16:07 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga004-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 11 Dec 2018 14:16:06 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A0NxWnhXkHMaGU8iXw4utqDnlejnV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhCAuadThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGoOy?=
 =?us-ascii?q?YZUSAeQPPuhWqIvyp1UBohWxBAmsH/vvxz1Ti3Pq3qA3yfgtHBva0AA8Gd8FrX?=
 =?us-ascii?q?TarM/yNKcXSe240bPHzS/fb/hL1jjy8o7IeQ09rPGXRrJ/bcrRxlcyHA7ClVqQ?=
 =?us-ascii?q?t5bqPzWP2eQWqGiU8+pgWvy0hmE9tw5xpyKjxsA2ionGn48YzE3P+yZhwIstO9?=
 =?us-ascii?q?G0VEp2bcS5HJZeqS2WLZZ6T8A+T21yuSs3yKUKtYO5cSUJ0pgr2QLTZv+df4WG?=
 =?us-ascii?q?5h/vTvudLDd4iX59Zb6zmxm//VK9xuDyWMS4ylVHojBGn9TIsH0Gygbd5dKdSv?=
 =?us-ascii?q?Rn+0eswTaP2B7X6uFDOU00i6XbJIA7wrIqlZocr17DHinol0XylqOWcV8k+uew?=
 =?us-ascii?q?5+TmZLXpuIOcOpdqhg3iNqkigNGzDOomPgQUQmSW+viw2Kfi8ED7WLlKi+c5kq?=
 =?us-ascii?q?jdsJDUP8Qboau5DhdR0oYi7Ra/Ejin3M0bnXYZNlJFfgyIj4zwN1HJLvH4C+mw?=
 =?us-ascii?q?g063nTd1yPDJIKfhDo/OLnfdirfhe6hy60pGxAo019Bf6IpYCqsdL/LrRk/xqN?=
 =?us-ascii?q?vYAwc9Mwy1wOboFs9x14wDWW+UBq+ZMaXSsUKH5+41IumMYpMVtyj5K/Q/+/Hu?=
 =?us-ascii?q?ino5k0cHfaa1xZsXdGy4HvN+LkWZe3Xsg8sBHn0NvgYkTOzqlUeNUThcZ3upW6?=
 =?us-ascii?q?I85zc7CJ+pDIvZR4CthqCB0zm/HpFMem9GDVWMG2/yd4qYQ/cMdD6SIsh5nzwG?=
 =?us-ascii?q?UriuVZUt1RKptA/8zbpnKfHZ+ikZtZLlydh06PfflRA09TxoEcud13uBQH1znm?=
 =?us-ascii?q?MNXzU2xrxwoVRhylef1qh1m+ZXFcdT5/NOUQc2L4TcwPZ4C93pXgLBf9GJSEup?=
 =?us-ascii?q?Q9m8ADExSM4xzMEKY0pnB9qiiRXD1TKwA7AJj7yLGIA08qXE0njyPcl9zWzK1K?=
 =?us-ascii?q?0gj1Y8RMtPOnarhqp+9wjVGo7InF+Vl6esdaQAwiHN8H2PwnaJvEFdSARwS7nK?=
 =?us-ascii?q?XWgDZkvKqtT0/l7NQKWwCbs5KAdBydSNKq1RatL3i1VKQ/PjONfbY2K1gGqwAR?=
 =?us-ascii?q?eIxrWRbIvlYWkd3SPdCFQanAAX53qJKQ8+BiK5qWLEEDNuDU7vY1/r8eRmtXy0?=
 =?us-ascii?q?VFE0wB+QY01hzbW1/AUViuKaS/4I2rIEuSEhqyh7HVqn3tLWDcaAqBRlfKlGfd?=
 =?us-ascii?q?w951JH33rDtwNhJpygM7xihlkGfgRrvkPu0hJ3CplAkckqtn8q0BB+KaWC0FNF?=
 =?us-ascii?q?djOY25/wN6bTKmnz+hCvdqHX1kvf0NaQ5qcA9vA4p0//swGuE0oo629n3MVN03?=
 =?us-ascii?q?uA+pXKCxIfXoj1Ukkp+Bl1ubHbbjMm6IPJyHJjK6+0sjzF29I3H+Ylzhegf9FC?=
 =?us-ascii?q?MKKLDgPyEssaB9SwJ+wugVSmchUEPOVK/q4uI8ymb+eG2LKsPOt4nDOmkH5L75?=
 =?us-ascii?q?xn3kON9ypzUOjI35kezvGc3wuHUSr8jVi7vsD2n4BEeS8dHm6lxSf4A45RY7V4?=
 =?us-ascii?q?fZwXBme2P8232tJ+iob3W35Z6FGsHUkG19KueRaIaVzywxdQ1UUOrXO7gyS4yy?=
 =?us-ascii?q?F7nC8zrqqY2izD2ODidBsBOm5WS2hul1bsIY6oj98EWEikdRQmlByg5Uzi3ahU?=
 =?us-ascii?q?uLx/L3XPQUdPZyX3L2BiXrGwt7aYeM5P9ZUovD5TUOS9Z1CaV7H8rwEb0yPlA2?=
 =?us-ascii?q?tR2jQ7eyu2tZX+mhxwkHidI2prrHrFZcFwwg/S5N7GSv5L3ToGRy54hSPMBlem?=
 =?us-ascii?q?PNmp/tSUl5HdveC4TG+hUpxTcS/2zYKPrie75GtqAQGhkPC3gNHoDQ860Srj3d?=
 =?us-ascii?q?lwSSrItAr8YpXs16miMeNoZE5oCEX+68p7HIFziY8whJAW2XgHiZSZ53sHkWHv?=
 =?us-ascii?q?MdpF3aLydmYCRTkOw9TN+gjqxFVjLm6Vx4L+TnidwdFuZ9igbmMWxyIy9cZKCK?=
 =?us-ascii?q?iP4bxAnCt1pEe4rA3Lbfh8mDcd1eUh6HoAj+4Vvwotyz2XAqoOEklAISzsixOI?=
 =?us-ascii?q?4si7rKVWZ2aga6K81URgktC6ELGNvBtcV23ndZc4Ei999cF/MFPK0H3u5YDoYt?=
 =?us-ascii?q?jQbdQPthKKlxfMlfRaKJU0lvASnypoJXr9vWE5y+48lRFuwZa6vI2dJ2Rs5q25?=
 =?us-ascii?q?BANYNibuZ8MS4TztiadensCL34GgBJlhGzMLXIf2QvKsCj4dqfPnNwOWGj0mtn?=
 =?us-ascii?q?ibAabfHROY6Ep+tH3ACZerN3WKJHUDydViWQKQJEhegAASQTU7kYQ1FgGsxMz9?=
 =?us-ascii?q?bkh54iod6UL/qhtJ0uhoLQXwUn/DpAe0bTc5UJqfIwBT7g5c/EfZK9Ce4vhwHy?=
 =?us-ascii?q?FF/Z2hsQqNJXaAZwlTCWEJW0qEB03sP7W05NnA9fSYCfS6L/fUfbqOruleXe+S?=
 =?us-ascii?q?xZ2zyotm4yqMNsKXM3hiCP07x1NDXW1jFMTfgTkPUCsXlyTCb8OAoBe8+yt3rt?=
 =?us-ascii?q?2w8fjxWQLv45ePBKVWMdl15x+2hqKDPfaKhCllMTZYyo8MxXjQxbgfwlESiiJu?=
 =?us-ascii?q?dzqsEbgati7NVqXQmqBJAB4BdiNzL9BF76Y93glLJM7ahcn51r9+jv4pFVhFUU?=
 =?us-ascii?q?btld2uZcwPO2u9Lk/IBF6XNLSaIj3G29v4Yb6nRr1KkupVtwe8uTKaE0L4OjSD?=
 =?us-ascii?q?lj/pVw2gMO1WjSGbOgBet5+5chp3FWfjS9fmYAWhMNBrlT023aE0hnTSOG4AMD?=
 =?us-ascii?q?h8dllBoaGK4SxEgvVwBWpB42FhLemFnSaZ8ubZJowXsfttHiR7ieZa7G4mxLtS?=
 =?us-ascii?q?6SFOXOZ1lzfKrt5yv1GmlfGCyzp9XxpIrzZLhYSLsl1jOKXZ7JZAX3nE8QkJ7W?=
 =?us-ascii?q?WRDRQKutRkBsfuu6BW1tjAiqbzJC1e/NLT+MtPT/TTfdqKLHc7IzLoHjDOBQcI?=
 =?us-ascii?q?RDLtMnvQ1GJHl/TH3HSPstAEo56ksYEVQb9WHAg/CPocA19+F9wPCJ58W3Uji7?=
 =?us-ascii?q?HN351A3ma3sBSEHJYShZvATP/HRKy3cDs=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AYAADaNhBch0O0hNFlHgEGBwaBUQkLA?=
 =?us-ascii?q?YIAgWsnCpgcgiGXPoFzFBgTAYcuIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjDII?=
 =?us-ascii?q?2JAGCYgMDAQIkCwENAQE3AQUJAQFQAzIFHRkFgxyCAgQBmjc8ih2BbDOCdgEBB?=
 =?us-ascii?q?YcqCBaHZoQ/F4F/gRGCZIsKiRkkhwGQPwmRRiOJZgiHUpkzgUaCDjMaMEOCbII?=
 =?us-ascii?q?bCwEXgiyMElGBBQEBIYkkAYEeAQE?=
X-IPAS-Result: =?us-ascii?q?A0AYAADaNhBch0O0hNFlHgEGBwaBUQkLAYIAgWsnCpgcgiG?=
 =?us-ascii?q?XPoFzFBgTAYcuIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2JAGCYgMDAQIkC?=
 =?us-ascii?q?wENAQE3AQUJAQFQAzIFHRkFgxyCAgQBmjc8ih2BbDOCdgEBBYcqCBaHZoQ/F4F?=
 =?us-ascii?q?/gRGCZIsKiRkkhwGQPwmRRiOJZgiHUpkzgUaCDjMaMEOCbIIbCwEXgiyMElGBB?=
 =?us-ascii?q?QEBIYkkAYEeAQE?=
X-IronPort-AV: E=Sophos;i="5.56,343,1539673200"; 
   d="scan'208";a="66380555"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 11 Dec 2018 14:16:05 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726468AbeLKWQA (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 11 Dec 2018 17:16:00 -0500
Received: from com-out001.mailprotect.be ([83.217.72.83]:35927 "EHLO
        com-out001.mailprotect.be" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726305AbeLKWOL (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 11 Dec 2018 17:14:11 -0500
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
        d=mailprotect.be; s=mail; h=Content-Transfer-Encoding:MIME-Version:References
        :In-Reply-To:Message-Id:Date:Subject:Cc:To:From:reply-to:sender:bcc:
        content-type; bh=o7tXSJlOfScEy/51es8gD9E5byJW55frhbO4qMvIuaQ=; b=Yl/DdfDI+dVB
        b7fOYVrrK9pGaxoGhy+01rn63GLqeXZMXYRI2IBMxai0d31t2n0rIpoT28tPPB4dY8Wl/llCE8zw6
        oPYnUaWADjygSZAKL77Fdw81SY5jIfYwSEvByTzD5NOkMFbyVXgnwm+sVBscPn+FdhxmZWXD/hDwl
        ctENPAr16MqlvKEtBermA7MW1KvPYO8ZwFEng9MBy+hpz2JqitdB3J/vg4MA/UAgkY9gm2qMSoZDp
        8rhMV+7JwZ+e+XD70JLCG5zYtB+2VQRRp5mSZEwrEVkd7C/HdDb69PFLNgi5n65oSC18FDbXnxvKj
        oOu+EZXHAQswBq3Rr8ctQA==;
Received: from smtp-auth.mailprotect.be ([178.208.39.155])
        by com-mpt-out001.mailprotect.be with esmtp (Exim 4.89)
        (envelope-from <bvanassche@acm.org>)
        id 1gWqHp-0005NF-HB; Tue, 11 Dec 2018 23:13:54 +0100
Received: from desktop-bart.svl.corp.google.com (unknown [104.133.8.89])
        (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
        (No client certificate requested)
        by smtp-auth.mailprotect.be (Postfix) with ESMTPSA id A9472C09DB;
        Tue, 11 Dec 2018 23:13:51 +0100 (CET)
From: Bart Van Assche <bvanassche@acm.org>
To: peterz@infradead.org
Cc: mingo@redhat.com, tj@kernel.org, longman@redhat.com,
        johannes.berg@intel.com, linux-kernel@vger.kernel.org,
        Bart Van Assche <bvanassche@acm.org>,
        Johannes Berg <johannes@sipsolutions.net>
Subject: [PATCH v4 08/15] locking/lockdep: Reuse list entries that are no longer in use
Date: Tue, 11 Dec 2018 14:13:14 -0800
Message-Id: <20181211221321.196536-9-bvanassche@acm.org>
X-Mailer: git-send-email 2.20.0.rc2.403.gdbc3b29805-goog
In-Reply-To: <20181211221321.196536-1-bvanassche@acm.org>
References: <20181211221321.196536-1-bvanassche@acm.org>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Originating-IP: 178.208.39.155
X-SpamExperts-Domain: mailprotect.be
X-SpamExperts-Username: 178.208.39.128/27
Authentication-Results: mailprotect.be; auth=pass smtp.auth=178.208.39.128/27@mailprotect.be
X-SpamExperts-Outgoing-Class: ham
X-SpamExperts-Outgoing-Evidence: Combined (0.02)
X-Recommended-Action: accept
X-Filter-ID: EX5BVjFpneJeBchSMxfU5hyzKBUC78Yl+qfLkYux10t602E9L7XzfQH6nu9C/Fh9KJzpNe6xgvOx
 q3u0UDjvO1tLifGj39bI0bcPyaJsYTb/+zriNZuqQk0xRpGwjn+MTR8dtByWYYhgj25jR+mEA3YO
 AtfhCcV13BpIh8lqRXSSiFVwqwU9VgKUrYQ0lqWyFDaym8oavoPYsm7m1mVEGf0/5ST3nkt5XYDK
 YAuRpmF7E2F3eqKXiTd2ECUghryWXlqwG31yUGf3t09vBVYS71V1Pk0aHudBU1wyWVTA5OYS1waI
 XXCBiQFDV0yen8nGcSeERs4TOTnIH1kc1IWc5eLazqbUYkjl7F1LyK0RORpNi5kHhTOtgfj/V5da
 35caSNgvEAWLFiDAlQR6Wu0I/iWDegq4fQ11AxLVlrI7DVFg5Rj2g0fgHrO2rAGaVRcnzDg6HYuT
 CyYgL61SIkBTYXPEvhymCNb22qmKERGbL1SqvGGff0htQqhQf0/aDrhpLM4xnCPpmyyS7jgD9Nen
 VVoB/PLX+rmdznc91veCJAwpCI+5VHpzDqRcT2+GtIE8SRAgmLDKAcp9i+Q+BEiSUj07SNjVkl0P
 Pj+OUYZX3/1fKPQPEuPra72LpiTN2rUT6Y9xm3kmEG6YzhU+GhpkbBQllJXXeGX8fAMzPNqrCG8d
 f68W0InH/+bTMKNm38MHmfnhF9U/dVeZ9xbDBH3UiCDt3yfQxlhCaKc8coJFU+8pOMQJvQ/Ck3ii
 U+4DQAj38VcpxSBd167NiiR0DMS/T4GvZUhi7BJ7QOeRk66G/m8FNKZFrpMP+RrTJ6+mm5EZIJGM
 wI7EsU9X7t6jyXWnUCFeETgDl3PwKvXCHlDl/OyqltsYPx2OGpapJQwbU6lxiSPQp1QN34zBsoOP
 LAVTMEsOC75ReJHeVybconOP07vieGH1wwKQhUuVJ6kr80wTGaiTXW7z2lMqAnbumOwh0pBt+CpM
 AQh13vqug5h3DxzXti4dc8mSdWWWnq5+T0OlQCXHAnYN7KgY5ZOOQJ3pEpIAiDKO1d3jsySf+J0s
 zc3volzWZu5fe7ghC/HzOt6Mfqb5R4VemuUI6bcEARsm0JyPNwoZFF/BeruF9IPYgMLyX2cd5RrN
 VWdImRunoKaV5Izq4VabSfIGUY8RJ38dSGEP+JYPRX76oPSBtBBPLYw1mZQfhvSXPX1npIQpGBE7
 MnJiHvQ8gQs8eCOaG4DvtrnB4hxWBV/7jCqhcJq0hur2OKHH5lr9xXvSM4nM3avg
X-Report-Abuse-To: spam@com-mpt-mgt001.mailprotect.be
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Instead of abandoning elements of list_entries[] that are no longer in
use, make alloc_list_entry() reuse array elements that have been freed.

Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Waiman Long <longman@redhat.com>
Cc: Johannes Berg <johannes@sipsolutions.net>
Signed-off-by: Bart Van Assche <bvanassche@acm.org>
---
 kernel/locking/lockdep.c | 33 +++++++++++++++++++++++----------
 1 file changed, 23 insertions(+), 10 deletions(-)

diff --git a/kernel/locking/lockdep.c b/kernel/locking/lockdep.c
index 82dd7d2851eb..2da45621f741 100644
--- a/kernel/locking/lockdep.c
+++ b/kernel/locking/lockdep.c
@@ -45,6 +45,7 @@
 #include <linux/hash.h>
 #include <linux/ftrace.h>
 #include <linux/stringify.h>
+#include <linux/bitmap.h>
 #include <linux/bitops.h>
 #include <linux/gfp.h>
 #include <linux/random.h>
@@ -132,6 +133,7 @@ static inline int debug_locks_off_graph_unlock(void)
 
 unsigned long nr_list_entries;
 static struct lock_list list_entries[MAX_LOCKDEP_ENTRIES];
+static DECLARE_BITMAP(list_entries_in_use, MAX_LOCKDEP_ENTRIES);
 
 /*
  * All data structures here are protected by the global debug_lock.
@@ -296,6 +298,7 @@ static struct pending_free {
 	struct list_head zapped_classes;
 	struct rcu_head	 rcu_head;
 	bool		 scheduled;
+	DECLARE_BITMAP(list_entries_being_freed, MAX_LOCKDEP_ENTRIES);
 } pending_free[2];
 static DECLARE_WAIT_QUEUE_HEAD(rcu_cb);
 
@@ -891,7 +894,10 @@ register_lock_class(struct lockdep_map *lock, unsigned int subclass, int force)
  */
 static struct lock_list *alloc_list_entry(void)
 {
-	if (nr_list_entries >= MAX_LOCKDEP_ENTRIES) {
+	int idx = find_first_zero_bit(list_entries_in_use,
+				      ARRAY_SIZE(list_entries));
+
+	if (idx >= ARRAY_SIZE(list_entries)) {
 		if (!debug_locks_off_graph_unlock())
 			return NULL;
 
@@ -899,7 +905,9 @@ static struct lock_list *alloc_list_entry(void)
 		dump_stack();
 		return NULL;
 	}
-	return list_entries + nr_list_entries++;
+	nr_list_entries++;
+	__set_bit(idx, list_entries_in_use);
+	return list_entries + idx;
 }
 
 /*
@@ -1003,7 +1011,7 @@ static inline void mark_lock_accessed(struct lock_list *lock,
 	unsigned long nr;
 
 	nr = lock - list_entries;
-	WARN_ON(nr >= nr_list_entries); /* Out-of-bounds, input fail */
+	WARN_ON(nr >= ARRAY_SIZE(list_entries)); /* Out-of-bounds, input fail */
 	lock->parent = parent;
 	lock->class->dep_gen_id = lockdep_dependency_gen_id;
 }
@@ -1013,7 +1021,7 @@ static inline unsigned long lock_accessed(struct lock_list *lock)
 	unsigned long nr;
 
 	nr = lock - list_entries;
-	WARN_ON(nr >= nr_list_entries); /* Out-of-bounds, input fail */
+	WARN_ON(nr >= ARRAY_SIZE(list_entries)); /* Out-of-bounds, input fail */
 	return lock->class->dep_gen_id == lockdep_dependency_gen_id;
 }
 
@@ -4281,13 +4289,14 @@ static void zap_class(struct pending_free *pf, struct lock_class *class)
 	 * Remove all dependencies this lock is
 	 * involved in:
 	 */
-	for (i = 0, entry = list_entries; i < nr_list_entries; i++, entry++) {
+	for_each_set_bit(i, list_entries_in_use, ARRAY_SIZE(list_entries)) {
+		entry = list_entries + i;
 		if (entry->class != class && entry->links_to != class)
 			continue;
+		if (__test_and_set_bit(i, pf->list_entries_being_freed))
+			continue;
+		nr_list_entries--;
 		list_del_rcu(&entry->entry);
-		/* Clear .class and .links_to to avoid double removal. */
-		WRITE_ONCE(entry->class, NULL);
-		WRITE_ONCE(entry->links_to, NULL);
 	}
 	if (list_empty(&class->locks_after) &&
 	    list_empty(&class->locks_before)) {
@@ -4329,8 +4338,9 @@ static bool inside_selftest(void)
 }
 
 /*
- * Free all lock classes that are on the pf->zapped_classes list. May be called
- * from RCU callback context.
+ * Free all lock classes that are on the pf->zapped_classes list and also all
+ * list entries that have been marked as being freed. Called as an RCU
+ * callback function. May be called from RCU callback context.
  */
 static void free_zapped_classes(struct rcu_head *ch)
 {
@@ -4346,6 +4356,9 @@ static void free_zapped_classes(struct rcu_head *ch)
 		reinit_class(class);
 	}
 	list_splice_init(&pf->zapped_classes, &free_lock_classes);
+	bitmap_andnot(list_entries_in_use, list_entries_in_use,
+		      pf->list_entries_being_freed, ARRAY_SIZE(list_entries));
+	bitmap_clear(pf->list_entries_being_freed, 0, ARRAY_SIZE(list_entries));
 	graph_unlock();
 restore_irqs:
 	raw_local_irq_restore(flags);
-- 
2.20.0.rc2.403.gdbc3b29805-goog

