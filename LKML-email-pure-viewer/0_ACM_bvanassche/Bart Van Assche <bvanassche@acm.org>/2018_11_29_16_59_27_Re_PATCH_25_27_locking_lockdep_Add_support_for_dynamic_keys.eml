Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 08:48:27 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id BDE9E5802E4;
	Thu, 29 Nov 2018 08:59:37 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga006-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 08:59:37 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AyrYDThIYx9S7T6ckytmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgUL/zyrarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZXchfSixPDJ2y?=
 =?us-ascii?q?YYQNAeoOIeFWoIbyqVsVtRuzBxKhBP/txzJSmnP7x7E23vonHArb3AIgBdUOsH?=
 =?us-ascii?q?HModjoLqgSS/y1x7THwjrZafNdxCvw6JPTch89ofGDQ697fM3KxkkxDQzFiE+f?=
 =?us-ascii?q?qZf+PzyJ1uQCrXOW4PB8WuKqkWInrBtxoje2y8oql4LHhZoVx0ja+SllxIs5P8?=
 =?us-ascii?q?C0RUBlbdK+DZddtD2WO5F3T84gW21kpic3xqMatZO+YSQHyIgoyhvBZ/ObboeF?=
 =?us-ascii?q?5wzvWPqfLDp9hH9qZK+wiAq3/EWv1OHwSNW73VNIoyVejNXBtXUA2ALI5cecSv?=
 =?us-ascii?q?Zw+Fqq1yyV2ADJ8O5EJFg5larFJJ4lxb49joQTsUvdES/sgkn2j7GZdl8i+ue2?=
 =?us-ascii?q?7+TreLLmpoWTN4NsiwH+NLohmtCnDOgmLgQDW3KX9fmy2bH950H1XbZHguEsnq?=
 =?us-ascii?q?TYsp3WPcEbqbS4Aw9R3IYj8RG/DzK+3dQcnHkHKk9FeR2eg4jqJV7OOvb4Aum7?=
 =?us-ascii?q?g1i1lzdqyfbGMaP7ApjWMHjDn6nufaxn505f1gUz19Zf6IxQCr0bJ/LzQEDxuM?=
 =?us-ascii?q?TCDhAlKwy03/rnCNJl24MaWGKPAbGWPLndsF+V/e8vJ+iMZIkIuDfyMfQl5vju?=
 =?us-ascii?q?jWMnll8ZZ6WmwZwXaHWgFPR8P0qZeWbsgssGEWoSvgoxVu3qiEGYXj5UfXqyX7?=
 =?us-ascii?q?886Ss9CIKpForDQoGtgLqc3Ca0BJFWZ2ZGCkySHnfsbYmLR/AMaCeKKM97jjME?=
 =?us-ascii?q?TaShS5Mm1Ry2tg/6zKRoIvDX+i0fs5Lj0t916vbXlREz8zx0Esuc33uMT2Fygm?=
 =?us-ascii?q?MHWTs20Lpjrkx6z1eJybJ4jOBAFdxP+/NJVR83OoTHz+x6DNDyWRjNfs2TR1ak?=
 =?us-ascii?q?WdimBTAxTtQsw94BeUp9GtOijgzd0CquGbMai7uLBJks+KLGw3fxP9p9y2rB1K?=
 =?us-ascii?q?Q5jFkpWM1POXeihq5+7QfTAYHJnl6dl6arc6QcwSHM+H2CzWqIoEFXTgpwXb/Z?=
 =?us-ascii?q?UnAYY0vctc756V/aT7+yFbQnNRNMxtOYJatUdNLll1VGS+3lONTFfW2xnWC8BR?=
 =?us-ascii?q?KLxrOJaIrnYGEd3CTbCEgZnAEf53eGNQ4iBii/p2LSFiBhFVXqY0n06+lxtGu7?=
 =?us-ascii?q?TlMozwGNd0BuyqC6+gALivCGS/McxLQEuDw/pDVyB1u929PWC9ydpwtuZqlcYN?=
 =?us-ascii?q?U94EtZ2mLdrQByIpugL6V6jF4Ebwt3p1/u1wlwCohYjcgqrXYqzA1uKaKY0FJN?=
 =?us-ascii?q?bS+Y0Yr3Or3NLmny/Rava6HN11Ha0daW/LoP6fsip1XiugGpClQt83F939ZJ1H?=
 =?us-ascii?q?uc443ADBAOXpLpTkY36x96qqnAbSk5+YzV2mNjMKmuvjDZxtImGfEqyhCjf9dY?=
 =?us-ascii?q?LqOJDwvyE8wcB8izJ+0mgVmpbhQYPO9M8K44Jd+pd/yD2KSzJuZvgCqmjXhb4I?=
 =?us-ascii?q?B6yk+N9zd8RvTU0JofwvCY3hGIVzHzjFq6tsD3mIZEZSwdH2alyCjkApJRabN2?=
 =?us-ascii?q?fYoRFWiuJMi3zM1kh5HxQ35Y6EKjB1Qe1c+zeBqdc0by3RdN2kQQu3CnnzW3zy?=
 =?us-ascii?q?Z1kz0wsqWQxijOzPn8exodPW5LQnJvjVPtIYiyktAbU1KkbwkvlBu5+0n6w7JX?=
 =?us-ascii?q?q7h4L2nWWU1IZTT5L3l+UqussbqPe85O6JIyvSRXSui8ek2aSrjmrhse0iPjGX?=
 =?us-ascii?q?ZexT8hezGrvJX5gwJ1iGaHIHlvq3rZfNl6xQ3D69zEWf5Rwj0GSTF6iTbNHFi8?=
 =?us-ascii?q?PNqp/dKOm5fYqO++VGGhVpxVcSb1y4ONry+75WxsAR2ikPG/gNznEQ4m0SDl09?=
 =?us-ascii?q?lmTznHrBH5YoPzzaS1LfpnflV0BF/788d7GptxkowqiJES2HgagI6Y/X4GkWf1?=
 =?us-ascii?q?LNVa1rjybHsLRT4X3dHV5BLp11FkLnKM34j5TGmSwtN9Z9mmZWMbwiE94NpLCK?=
 =?us-ascii?q?uO7LxEgDF6oly3rQ/KZfh9nzEdyeYh6XIAguEJvhYtwTuZArwIAUZYOinsnQyS?=
 =?us-ascii?q?79+itKVXeHqvcb+o2Up7nNChD6uNrhtSWXnnYZciATF/7t9kP13Syn3z5ZrpeN?=
 =?us-ascii?q?3RbdIVqx2VnA3Mj+lTKJItiPUKgTBrNn76vX0g0+Q7lwBh3YmmvIibLGVg5L65?=
 =?us-ascii?q?AhldNjHvZsIc4DftjbtFnsaN3oCiBZFhGjQNXJv1QvOkCjMStfL7NwmQFD0wsG?=
 =?us-ascii?q?uUGb3aHQWH8kdps2rPE4y3N3GQPHQW1s9tRB6ZJExCmgwUWCg6k4U9FgCrwszh?=
 =?us-ascii?q?bUh46ioQ5l7+thtD1OZoOwPjXWfYoQeici00R4SHLBpK8gFC4F/YMc6E4eJ2AS?=
 =?us-ascii?q?5Y5YetrBCXJmyYegRIDnwJWkqeCFD4JbSu4djA8+6FBuuxNffOYLOOqfBAWPeM?=
 =?us-ascii?q?356gzoxm/zOUPMWVInZiF+E72lZEXX1hG8XZnCgPSzUKly3Xac6Xvgy8+ipxrs?=
 =?us-ascii?q?Cw6/nrXAPv5Y2SC7pdK9lv+ha2gbudOO6Unip2NTFY1pYUz3/S1LcfxEISiz1p?=
 =?us-ascii?q?dzS1EbQPqy/NTKHTmq9WFRIbaDlzNMxH760ixAlNJNXbh8jx1r55iP41FlhEWU?=
 =?us-ascii?q?bgmsGvecwFPWW9OEnbC0aMMbSMPSfLzN3vYaOgVb1Qi/1ZuAetuTmACU/sIDSC?=
 =?us-ascii?q?myPtVxCuKuxMiCCbPBpDuICyaBptCG7jTM74ZR2/KtN4kTo2wbgsjHPQKWEcKS?=
 =?us-ascii?q?R8c19KrrCI8SNYg/B/F3Zd4XZ/MeaEmziW7+/DJ5YSsPtrBDl0lu1A7HQ7zbtV?=
 =?us-ascii?q?8D9LRPhvlCTOqd5upkmskvOTxTp/TBpOtjFLiZqLvEp4P6XZ85hAWXDc8xMM7W?=
 =?us-ascii?q?WfERIKp9R+B93ruqBQzMXPla3pJDdD9dLU4dUTB8zOJM2bN3ohNEmhJDmBNAYZ?=
 =?us-ascii?q?QCTjB2Ddg1dBivjaomWYspUguLDtnpQUQ7NWXVBzEekVXBdLBtsHdb1+RC9sr7?=
 =?us-ascii?q?edxOcT/nG+oVGFTttTuJncTfmSDN3mIzPfiqNLMUhbiYjkJJgeY9Wok3dpbUN3?=
 =?us-ascii?q?ycGTQxLd?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AHAABDGgBch0O0hNFkGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUgUBAQELAYEwgjuYQIINFJcwggUBASsBh3QiNQgNAQMBAQEBAQECARM?=
 =?us-ascii?q?BAQEIDQkIKS+CNiQBgmIDAwECdgYJAQEKRgMxAQUBHAYYgxyCAgEEmnM8jDyFQ?=
 =?us-ascii?q?YRsEowEF4F/hCOKXAKJB4ZjNJAFCZFKiViHRJgnBgIJBw8hgScCggkzGjCDMII?=
 =?us-ascii?q?lGI4+H4E3AQEhjRkBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AHAABDGgBch0O0hNFkGwEBAQEDAQEBBwMBAQGBUgUBAQE?=
 =?us-ascii?q?LAYEwgjuYQIINFJcwggUBASsBh3QiNQgNAQMBAQEBAQECARMBAQEIDQkIKS+CN?=
 =?us-ascii?q?iQBgmIDAwECdgYJAQEKRgMxAQUBHAYYgxyCAgEEmnM8jDyFQYRsEowEF4F/hCO?=
 =?us-ascii?q?KXAKJB4ZjNJAFCZFKiViHRJgnBgIJBw8hgScCggkzGjCDMIIlGI4+H4E3AQEhj?=
 =?us-ascii?q?RkBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,295,1539673200"; 
   d="scan'208";a="42854929"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 08:59:35 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730092AbeK3EFb (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 29 Nov 2018 23:05:31 -0500
Received: from mail-pl1-f194.google.com ([209.85.214.194]:44052 "EHLO
        mail-pl1-f194.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1729519AbeK3EFb (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 29 Nov 2018 23:05:31 -0500
Received: by mail-pl1-f194.google.com with SMTP id k8so1316794pls.11
        for <linux-kernel@vger.kernel.org>; Thu, 29 Nov 2018 08:59:29 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:message-id:subject:from:to:cc:date:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=ntjuzxDQaoj1fqs341rXyp+TCylgYbBYTRllogcm+6s=;
        b=EP1TsAx+Mfi4tpVPHItOU+e/6AO90cXPOYEF5mxQKHiDXDE2/agTtQ/M1/MzQQvjbh
         n2vdQtw7d3GI8LhvytlMfr3G7vf7ZUH0L1ndTSZLeooDdybSu+HJlXVeUZQ9ovfWXjqb
         7rh87opTw6nd9Zdf/aONTLrrDgvjx7f+g0sN59NKP/em5mKhfux3OkaJmh6jYaI+a9p7
         TAaiTSSWne6DwFqHJkhuN0ILgmhmXeWDTXKzkRiHwatE7V5hPNWO0EzgJXfHkx5IzKXl
         I7Imzh+F2/Q0DuvDTo4+hXIBUNHrH9wsAUP/xINb+6CYuxQC0nu+BXGezcmZW44zWj4L
         9b4g==
X-Gm-Message-State: AA+aEWYYfdWEatuZ+v0mEJxR5Iz6tM5U5SLkldySk4xYWmu/uxIyfLRH
        VZYsZ6BFLEJQa94woMaaKlI=
X-Google-Smtp-Source: AFSGD/UzcZaqxlXaS1SojyT3+L9XWhRUW2/iUn52UaSqBXIGXCD3p3AW14MmgfEe9aKXTzmUmm2hKA==
X-Received: by 2002:a17:902:f20d:: with SMTP id gn13mr2118760plb.11.1543510769173;
        Thu, 29 Nov 2018 08:59:29 -0800 (PST)
Received: from ?IPv6:2620:15c:2cd:203:5cdc:422c:7b28:ebb5? ([2620:15c:2cd:203:5cdc:422c:7b28:ebb5])
        by smtp.gmail.com with ESMTPSA id t90sm9439247pfj.23.2018.11.29.08.59.28
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Thu, 29 Nov 2018 08:59:28 -0800 (PST)
Message-ID: <1543510767.185366.145.camel@acm.org>
Subject: Re: [PATCH 25/27] locking/lockdep: Add support for dynamic keys
From: Bart Van Assche <bvanassche@acm.org>
To: Peter Zijlstra <peterz@infradead.org>
Cc: mingo@redhat.com, tj@kernel.org, johannes.berg@intel.com,
        linux-kernel@vger.kernel.org
Date: Thu, 29 Nov 2018 08:59:27 -0800
In-Reply-To: <20181129120418.GI2131@hirez.programming.kicks-ass.net>
References: <20181128234325.110011-1-bvanassche@acm.org>
         <20181128234325.110011-26-bvanassche@acm.org>
         <20181129120418.GI2131@hirez.programming.kicks-ass.net>
Content-Type: text/plain; charset="UTF-7"
X-Mailer: Evolution 3.26.2-1 
Mime-Version: 1.0
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Thu, 2018-11-29 at 13:04 +-0100, Peter Zijlstra wrote:
+AD4 On Wed, Nov 28, 2018 at 03:43:23PM -0800, Bart Van Assche wrote:
+AD4 +AD4 A shortcoming of the current lockdep implementation is that it requires
+AD4 +AD4 lock keys to be allocated statically. That forces certain lock objects
+AD4 +AD4 to share lock keys. Since lock dependency analysis groups lock objects
+AD4 +AD4 per key sharing lock keys can cause false positive lockdep reports.
+AD4 +AD4 Make it possible to avoid such false positive reports by allowing lock
+AD4 +AD4 keys to be allocated dynamically. Require that dynamically allocated
+AD4 +AD4 lock keys are registered before use by calling lockdep+AF8-register+AF8-key().
+AD4 +AD4 Complain about attempts to register the same lock key pointer twice
+AD4 +AD4 without calling lockdep+AF8-unregister+AF8-key() between successive
+AD4 +AD4 registration calls.
+AD4 +AD4  struct lock+AF8-class+AF8-key +AHs
+AD4 +AD4 +-	struct hlist+AF8-node		hash+AF8-entry+ADs
+AD4 +AD4  	struct lockdep+AF8-subclass+AF8-key	subkeys+AFs-MAX+AF8-LOCKDEP+AF8-SUBCLASSES+AF0AOw
+AD4 +AD4  +AH0AOw
+AD4 
+AD4 That hash+AF8-entry is purely for that double-register warning, right? I
+AD4 wonder if we can do that differently+ADs by always doing
+AD4 register+AF8-lock+AF8-class(), and checking that state.

Hi Peter,

The hash+AF8-entry serves two purposes. One purpose is to verify whether the
lockdep+AF8-register+AF8-key() and  lockdep+AF8-unregister+AF8-key() functions are used
correctly. A second purpose is to avoid that lockdep+AF8-init+AF8-map() complains
when encountering a dynamically allocated key. I'm not sure how always
doing register+AF8-lock+AF8-class() would help?

Thanks,

Bart.
