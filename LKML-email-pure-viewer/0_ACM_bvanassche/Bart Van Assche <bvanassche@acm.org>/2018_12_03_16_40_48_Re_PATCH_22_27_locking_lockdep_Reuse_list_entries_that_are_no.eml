Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 04 Dec 2018 08:55:06 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id D5B61580375;
	Mon,  3 Dec 2018 08:40:55 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga006-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 03 Dec 2018 08:40:55 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Atq2YZhHgALKuIo1KlCcioZ1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75osyzbnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJVCJPH4Oy?=
 =?us-ascii?q?YZUBAeUDM+ZXs47zqFQBoxulHQmhBvjiyiNKi3LswaE3yfgtHB/A0Qc9H9wOqn?=
 =?us-ascii?q?PUrNDtOaoPS++11rXIxijMYPxM3zf29ZTFcgs6of6QXbJ/b9faxE40GAPblFqQ?=
 =?us-ascii?q?r5bqPyiO1usRs2iU8fFtWvizhG4isQ1xpSKvxsg1h4TPm4kbyUjE+D1nzIopId?=
 =?us-ascii?q?C0UlN3bNC6HJdKqi2XNJd6TtkjTmxqoCo21LwLtYCncCUP1ZgqxwLQZvmZf4eU?=
 =?us-ascii?q?/x3uUfidLSt2iX9geL+wmwu9/lSlx+DzSMW4zkpFoy9Hn9bXqHwA1Bne5dacRf?=
 =?us-ascii?q?Rm/kqs3yuE2RrJ5eFeO080kLLWK54/zb40kZoeqVrDHiDol0XslqOWdVsr+vKu?=
 =?us-ascii?q?6+v5ZrXqvJicN5V7ig3mM6QunNKwAfggPwQQQ2SW/f6w2KDt8EHnWrlGk/47nr?=
 =?us-ascii?q?XDvJ3bJ8kXvqu5DBVU0oYn5Ra/FTCm0NEAkHkDLVJFfg+HjofwN1HNPv/4F/G/?=
 =?us-ascii?q?jEqokDtywPDHMLvhDYvXLnXYjrfhcqhy61RGxAow099f/ZRUBa8FIP7pXU/xrt?=
 =?us-ascii?q?PYAgcjMwOo2+bnFMl91oQGVGKLA6+ZM73dvUWH5+IyOOSMYI4VuDDgK/kq/fLu?=
 =?us-ascii?q?jHk5mUMDcqmtx5cYdHe4HvF+KUWDfXXsmssBEXsNvgcmTOzlklyCUSJJaHa1Ra?=
 =?us-ascii?q?485iw7B5igDYfMXY2thL2B3CGmHpxZfGxGC1aMEWv2eIWAQfsDdCWSIsp5mDwe?=
 =?us-ascii?q?SbehU5Mh1Q2ptALiybpnKfTb9jcbtZLk0th14erTmAo29Tx1CcSdzm6MQ3t1nm?=
 =?us-ascii?q?MOWz85wqR/rVZhxVeE1Khym+ZYGsBL5/NVTgc6MobRwPZhC9DyXQLBfc2FSEy8?=
 =?us-ascii?q?TdWkGjwxStMxw9kTY0dyAdmijxbD3za0DL8RjbCEGJs08qfE1XjrO8l902rG1L?=
 =?us-ascii?q?Umj1Q+QctAL2umirR79wjSHYHJlUqZmr2udaQd2i7N6WiCwXCPvEFeTA5/T6HF?=
 =?us-ascii?q?UWoDaUvRqNTz/lnCQKO2CbQ7LgtBztaPJbZQZd33k1pKXvfjN87YY2KqhWiwAx?=
 =?us-ascii?q?GExrePbIrvf2UQxyHdCEkCkwAO8neKLwk+BiG9o23ACDxiD07gY0Tp8eNmsnO0?=
 =?us-ascii?q?Ulc0zx2Wb01mz7e65wQaheKCRP8J3rILoiEhqy5qE1a7xN/WD9uApwx8fKRTe9?=
 =?us-ascii?q?894VFH1X7HuAx5JJCvM6dihlsGeQRto0zuzwl3CplHkcUysHMqzQ9yKaWE0FNB?=
 =?us-ascii?q?dzKUx4zwNqfQKmno+BCvaqjW2l7F3daS+6cP7uk4qlr5sAGoEEoi72to091P33?=
 =?us-ascii?q?SA4ZXKCRIYUYjtXUYv6xh6u7babzEn6IPQy3JtPre7sz/Y190yGesq1wyvf9Fc?=
 =?us-ascii?q?MKODCg//CMkaB8moKOw3lFmldBMEPOZO9KEqO8OqbeeJ2KmuPOx4hjKpkXxH4J?=
 =?us-ascii?q?xh0kKL7yd9SvPI04wZzP2C3wqHVy3zjFGuss3snYBEZDcSHnewyCT+BY5RYLFy?=
 =?us-ascii?q?cpgPCWu0P8K3wdB+jYb3W3FE7F6jG08G2MixdBqIblzywRdf1V4Krnyggye4yS?=
 =?us-ascii?q?J7kysorqaGwCPB2eDiewcZNW5RQ2lii0zhIYy1j9AcQUipYBIllBqj5Ubm2adb?=
 =?us-ascii?q?oL5zIHXUQUdNZyL2NX1tUrOstrqeZM5C8JMpsSRNXOW8e1yaUaP9ox0B3iPnHm?=
 =?us-ascii?q?tewi07dj6wtpX4mRx6lHySLHJpoHXFfsFwwA/V5MbASv5JwjoGWC54hCHVBlem?=
 =?us-ascii?q?Jdmp/taUl5DZvuClTW2hVZ5TcSjtzYyesiu2/mlqARy5n/CuldzrCwk60Snn19?=
 =?us-ascii?q?Z0USXEtgrzYo7u166iK+JoYlFoBEPg68p9Aox/kpE/hJYK1XgYh5WV+2EKkWPy?=
 =?us-ascii?q?MdVdxKL/Y2ABRT8Nw97J/gfl3FdvIW6Ox4L8Tn+d2NduZ8GmYmMK3SIw98NKB7?=
 =?us-ascii?q?2V7LBenSt1v0C3rQTeYfVmmjcdyP0u6GMVgu0TuQotyDmdDa4WHUVCISPskBGI?=
 =?us-ascii?q?5cikrKpLfGavbaSw1E1mkNCkDbGCoRtTVGz3e5g8Bi9w8ttwMEjX33Lt8IHkd8?=
 =?us-ascii?q?LdbdYSth2SjhfBgPJZKJM3lvoWmyVnPXjxsmEiy+4+lRZux421vJCbK2Vx+6K0?=
 =?us-ascii?q?GgJYNjrwZ88J+zDil6BentuN34C0H5VsATELXJruTfK1HzMer/XnNwCSEDIirn?=
 =?us-ascii?q?eXA6bQHQia6E1+tXLAD4irN22LJHke1dhtXwOSJEtbgAAJRjk6moM5GxuuxMzg?=
 =?us-ascii?q?dkd5+z8Q6kT5qhtK1uJnKR3/Xn3Dqwevbzc+UIKfIwZO7gFe+0fVNtST7uBpEC?=
 =?us-ascii?q?Fd4JKhtxaBKnCBawRLEGEJWVGEB1b5Mbm1/tTA9+mYBuyjL/rBe7mOqOpeV+uW?=
 =?us-ascii?q?ypKryIdp4zGMNsCXNHl4E/I7wlZDXWx+G8nBmzQPTDEXlzvQb8GBohew4DZ3rs?=
 =?us-ascii?q?e58PTkQw/v4YqPC71PMdRg4Ry2gKGDN/KOiyZ9MzpXypQMxXrQwrgFwFESkz1u?=
 =?us-ascii?q?dyWqEbkYtS7CUqPQmqxUDx4acS9zN9FI76Uz3gZTI87bl8j126V8jv40DVdFSF?=
 =?us-ascii?q?PgltuoZcwMP2GyKlfHCFyXO7SBID3B29v3br+kSb1MkOVUsAW9tiyGE0D4JDSM?=
 =?us-ascii?q?iTnoWwqrMeFNlyybOB1euIegchdiE2TjTdTmagGlP99zlzE53bo0hnbSP24GLT?=
 =?us-ascii?q?d8a19NrqGX7S5AnvV/GmlB4mB5IuWehymZ7/fXKpANvPtvAyR0kf9a4Xsgx7tU?=
 =?us-ascii?q?6iFEWOJ6mC/IotFypFGml/GFyiB7XxpWtjZLmIWLsF1iOKrD8JlAXHfE/BQV4m?=
 =?us-ascii?q?SRCxQFvd1lCtL0tqBUy9jPkr/zKThY/9LV+8scG9bbKMadPHU9NhrpHW2cMAxQ?=
 =?us-ascii?q?dTO3OHuXtU1flOqO7HTd+oA3tpX2irIPTLFBXVA4H/9cDV5qSo8sOpByCxkti6?=
 =?us-ascii?q?LTsscOrVOltxLRSY0OtI7OUPuJGv7vJR6QhrwCYAEHl+CrZb8PP5H2jhQxImJx?=
 =?us-ascii?q?m57HTg+JBYhA?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AgAACEWwVch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUwUBAQsBgTCCO5hEgg0UaJZMFIFxAQErAYgJIjYHDQEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BCgsJCCkvgjYkAYJiAwMBAnYGCQEBCkYDMQEFARwGGIMcggIBBJovPIw8hUGEY?=
 =?us-ascii?q?BKMCheBf4ERgl0HLoRphXMCj3Q2kBYJijKHIolbh0uYRgYCCQcPIYEsBYIBMxo?=
 =?us-ascii?q?wQ4JtgiMajj4fgTcBASGKNgEB?=
X-IPAS-Result: =?us-ascii?q?A0AgAACEWwVch0O0hNFjHAEBAQQBAQcEAQGBUwUBAQsBgTC?=
 =?us-ascii?q?CO5hEgg0UaJZMFIFxAQErAYgJIjYHDQEDAQEBAQEBAgETAQEBCgsJCCkvgjYkA?=
 =?us-ascii?q?YJiAwMBAnYGCQEBCkYDMQEFARwGGIMcggIBBJovPIw8hUGEYBKMCheBf4ERgl0?=
 =?us-ascii?q?HLoRphXMCj3Q2kBYJijKHIolbh0uYRgYCCQcPIYEsBYIBMxowQ4JtgiMajj4fg?=
 =?us-ascii?q?TcBASGKNgEB?=
X-IronPort-AV: E=Sophos;i="5.56,311,1539673200"; 
   d="scan'208";a="140543051"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 03 Dec 2018 08:40:53 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726812AbeLCQkz (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 3 Dec 2018 11:40:55 -0500
Received: from mail-pl1-f194.google.com ([209.85.214.194]:34558 "EHLO
        mail-pl1-f194.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726708AbeLCQkz (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 3 Dec 2018 11:40:55 -0500
Received: by mail-pl1-f194.google.com with SMTP id w4so6747004plz.1
        for <linux-kernel@vger.kernel.org>; Mon, 03 Dec 2018 08:40:50 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:message-id:subject:from:to:cc:date:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=SMBZOeekZb3uh8AV9mezX+bVJfI3gkOah5vXVRnPGL4=;
        b=EG/YS6Q65ZAkDkSSukLQ8B8bq4WRmxK/MqZyQgdhE+kCm1gTq/vbiRoHoUyCQse2kr
         9w25KyT68lI84B/+vCERle384WTmPiRfRJPM7YT/XKKOJSkVknr3VJOe7i2ppGFvDOoa
         QACo82cRB4+FpIEibjKh3zofS8te76+Z2Ii9iyvM9pR2ifZS0IjZFnBDKwX27BMKMpO9
         WzUXCqRbmnCvFiLz6BUv45hE7X2CDuYVjcUrYt6euDannQ/4TEsQIbGiezvrK8qyMMG+
         eGrfFqvwwCdBTc+Kk22HKumqzJ1ZQ42YV+EyaYDnUnNi8eZIixO1wsSWeLXap7a32uzN
         bOQQ==
X-Gm-Message-State: AA+aEWZhRI/R0vQhZ6YnPudz+SD9i8QpOEJCz3Uix6PYAG8IOOkC99cZ
        57PBT3NuQ0YYobnv75S5gJk=
X-Google-Smtp-Source: AFSGD/UInCKhPYmIxYsMlC8yWNwInOoI7iXbloeLHrYVgdIPj8FQ28E2/YBeMNL4ZaOHR0c9qQ0V7A==
X-Received: by 2002:a17:902:d806:: with SMTP id a6mr15993901plz.172.1543855250177;
        Mon, 03 Dec 2018 08:40:50 -0800 (PST)
Received: from ?IPv6:2620:15c:2cd:203:5cdc:422c:7b28:ebb5? ([2620:15c:2cd:203:5cdc:422c:7b28:ebb5])
        by smtp.gmail.com with ESMTPSA id d6sm20450331pgc.89.2018.12.03.08.40.48
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Mon, 03 Dec 2018 08:40:49 -0800 (PST)
Message-ID: <1543855248.185366.158.camel@acm.org>
Subject: Re: [PATCH 22/27] locking/lockdep: Reuse list entries that are no
 longer in use
From: Bart Van Assche <bvanassche@acm.org>
To: Peter Zijlstra <peterz@infradead.org>
Cc: mingo@redhat.com, tj@kernel.org, johannes.berg@intel.com,
        linux-kernel@vger.kernel.org
Date: Mon, 03 Dec 2018 08:40:48 -0800
In-Reply-To: <20181201202446.GA19706@hirez.programming.kicks-ass.net>
References: <20181128234325.110011-1-bvanassche@acm.org>
         <20181128234325.110011-23-bvanassche@acm.org>
         <20181129104902.GH2131@hirez.programming.kicks-ass.net>
         <20181129120143.GG2149@hirez.programming.kicks-ass.net>
         <1543510130.185366.139.camel@acm.org>
         <20181201202446.GA19706@hirez.programming.kicks-ass.net>
Content-Type: text/plain; charset="UTF-7"
X-Mailer: Evolution 3.26.2-1 
Mime-Version: 1.0
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Sat, 2018-12-01 at 21:24 +-0100, Peter Zijlstra wrote:
+AD4 On Thu, Nov 29, 2018 at 08:48:50AM -0800, Bart Van Assche wrote:
+AD4 +AD4 On Thu, 2018-11-29 at 13:01 +-0100, Peter Zijlstra wrote:
+AD4 +AD4 +AD4 On Thu, Nov 29, 2018 at 11:49:02AM +-0100, Peter Zijlstra wrote:
+AD4 +AD4 +AD4 +AD4 On Wed, Nov 28, 2018 at 03:43:20PM -0800, Bart Van Assche wrote:
+AD4 +AD4 +AD4 +AD4 +AD4  	/+ACo
+AD4 +AD4 +AD4 +AD4 +AD4  	 +ACo Remove all dependencies this lock is
+AD4 +AD4 +AD4 +AD4 +AD4  	 +ACo involved in:
+AD4 +AD4 +AD4 +AD4 +AD4  	 +ACo-/
+AD4 +AD4 +AD4 +AD4 +AD4 +-	list+AF8-for+AF8-each+AF8-entry+AF8-safe(entry, tmp, +ACY-all+AF8-list+AF8-entries, alloc+AF8-entry) +AHs
+AD4 +AD4 +AD4 +AD4 +AD4  		if (entry-+AD4-class +ACEAPQ class +ACYAJg entry-+AD4-links+AF8-to +ACEAPQ class)
+AD4 +AD4 +AD4 +AD4 +AD4  			continue+ADs
+AD4 +AD4 +AD4 +AD4 +AD4  		links+AF8-to +AD0 entry-+AD4-links+AF8-to+ADs
+AD4 +AD4 +AD4 +AD4 +AD4  		WARN+AF8-ON+AF8-ONCE(entry-+AD4-class +AD0APQ links+AF8-to)+ADs
+AD4 +AD4 +AD4 +AD4 +AD4  		list+AF8-del+AF8-rcu(+ACY-entry-+AD4-lock+AF8-order+AF8-entry)+ADs
+AD4 +AD4 +AD4 +AD4 +AD4 +-		list+AF8-move(+ACY-entry-+AD4-alloc+AF8-entry, +ACY-free+AF8-list+AF8-entries)+ADs
+AD4 +AD4 +AD4 +AD4 +AD4  		entry-+AD4-class +AD0 NULL+ADs
+AD4 +AD4 +AD4 +AD4 +AD4  		entry-+AD4-links+AF8-to +AD0 NULL+ADs
+AD4 +AD4 +AD4 +AD4 +AD4  		check+AF8-free+AF8-class(zapped+AF8-classes, class)+ADs
+AD4 +AD4 +AD4 +AD4 
+AD4 +AD4 +AD4 +AD4 Hurm.. I'm confused here.
+AD4 +AD4 +AD4 +AD4 
+AD4 +AD4 +AD4 +AD4 The reason you cannot re-use lock+AF8-order+AF8-entry for the free list is
+AD4 +AD4 +AD4 +AD4 because list+AF8-del+AF8-rcu(), right? But if so, then what ensures the
+AD4 +AD4 +AD4 +AD4 list+AF8-entry is not re-used before it's grace-period?
+AD4 +AD4 +AD4 
+AD4 +AD4 +AD4 Also+ADs if you have to grow lock+AF8-list by 16 bytes just to be able to free
+AD4 +AD4 +AD4 it, a bitmap allocator is much cheaper, space wise.
+AD4 +AD4 +AD4 
+AD4 +AD4 +AD4 Some people seem to really care about the static image size, and
+AD4 +AD4 +AD4 lockdep's .data section does matter to them.
+AD4 +AD4 
+AD4 +AD4 How about addressing this by moving removed list entries to a +ACI-zapped+AF8-entries+ACI
+AD4 +AD4 list and only moving list entries from the zapped+AF8-entries list to the
+AD4 +AD4 free+AF8-list+AF8-entries list after an RCU grace period? I'm not sure that it is
+AD4 +AD4 possible to implement that approach without introducing a new list+AF8-head in
+AD4 +AD4 struct lock+AF8-list.
+AD4 
+AD4 I think we can do this with a free bitmap and an array of 2 pending
+AD4 bitmaps and an index. Add newly freed entries to the pending bitmap
+AD4 indicated by the current index, when complete flip the index -- such
+AD4 that further new bits go to the other pending bitmap -- and call+AF8-rcu().
+AD4 
+AD4 Then, on the call+AF8-rcu() callback, ie. after a GP has happened, OR our
+AD4 pending bitmap into the free bitmap, and when the other pending bitmap
+AD4 isn't empty, flip the index again and start it all again.
+AD4 
+AD4 This ensures there is at least one full GP between setting a bit and it
+AD4 landing in the free mask.

Hi Peter,

How about the following alternative which requires only two bitmaps instead
of three:
- Maintain two bitmaps, one for the free entries and one for the entries
  that are being freed.
- Protect all accesses to both bitmaps with the graph lock.
- zap+AF8-class() sets a bit in the +ACI-being freed+ACI bitmap for the entries that
  should be freed after a GP.
- Instead of making free+AF8-zapped+AF8-classes() wait for a grace period by calling
  synchronize+AF8-sched(), use call+AF8-rcu() and do the freeing work from inside the
  RCU callback.
- From inside the RCU callback, set a bit in the +ACI-free+ACI bitmap for all entries
  that have a bit set in the +ACI-being freed+ACI bitmap and clears the +ACI-being freed+ACI
  bitmap.

Thanks,

Bart.
