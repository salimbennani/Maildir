Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 05 Dec 2018 08:44:53 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 5BC47580375;
	Tue,  4 Dec 2018 13:42:57 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga007-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 04 Dec 2018 13:42:56 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AsmGoOx2BLWxJ+h19smDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segTKP7xwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJCUMhMVyJPHI2y?=
 =?us-ascii?q?YIkBD+UdOuhXoIbzp0AWrRa8HgSsGOHixyVUinLswaE3zeIsGhzG0gw6GNIOtW?=
 =?us-ascii?q?zZocjvO6cITeC+0abHwi/Fb/hLxTr985PIfQwhof6SQLl9dtHeyVc1GAPDlFqQ?=
 =?us-ascii?q?spflMC+V1usTqGWU9fZvVee1h24gsQFxrSGiy8ExgYfKnoIY0k7I+Tl9zYovON?=
 =?us-ascii?q?G1RlB3bcS5HJZTqy2WLYp7T8E6T212uSs21KEKtJumcCUK1JsqwgDTZOCafIWN?=
 =?us-ascii?q?/B7vSOicLDJ4iX15Zb2wmxO//Ee+xuHiSsa51VRHoTFbntTPs30CyQfc5dOHR/?=
 =?us-ascii?q?Z740yvwyyA1xrJ5eFBOU00lbTUK5omwrMoiJoTvlrMHjXslEX1kqCWbEMk9fas?=
 =?us-ascii?q?6+j9ZbXmvJCcO5d1igH4LKsuhtSyDfokPgUKRWSX5Oqx2KP58UHkQ7hGkuc6n6?=
 =?us-ascii?q?jbvZzCIMQUvK+5Awtb0oY57Ba/Ci+r0NAZnXkBMVJEdwuLj4v3NFHUJvD3E/O/?=
 =?us-ascii?q?j02rkDZlwfDJIKfhD47TLnjMjrjhZ6xx601Cxwopy9BQ+ZZUBqsGIPLpVU/9rM?=
 =?us-ascii?q?bYAQMhMwyo3+bnD81w1ocfWWKMHKCVKqzTsUKT6+IrIumMYpIVuTnnJ/gk4f7u?=
 =?us-ascii?q?kWE2mVsHcaa12psXbWiyHu56LEWBfXrsntABHH8KvgUkTezqlEeNUTlJa3ayQq?=
 =?us-ascii?q?Iz/Dc7CI29AIfHR4CthqGB3SihEp1XYGBGFk6DEXPye4qYXPcMbTqYItV9nTwc?=
 =?us-ascii?q?SbihV4gh2AmstA/91bVrNOnU+ioetZLl09h4/OnTlRA09TxpAMWRyWCNT2donm?=
 =?us-ascii?q?wWQz86xrxwoUt4yl2by6h3n+RYFcBP5/NOSgo1L4Xcz+x9C9DxQA7BZM2GSFS9?=
 =?us-ascii?q?T9WiADExSM8xwtAUb0Z8HdWikg7M3y6wD7AJkLyLAYQ+8rjA0HjpO8Z913HG2b?=
 =?us-ascii?q?Eij1Y8RMtDL2mmhq9l+AjVCI7EiEGZl6esdaQB0y/B7maDzWySvE5GVA58S7nK?=
 =?us-ascii?q?XXcaZkHOt9T2+lvCT6OyCbQgKgZO1NSNKrVUZdHzjVVJXvHjOM/AbGK3nGuwAR?=
 =?us-ascii?q?WIxraIbIfxf2Ud3SPdCFULkgwJ/HaGMxQ+CTmlo27EEDNuElfvaVv28eZisHO7?=
 =?us-ascii?q?UlM0zwaSYkJ8zbW15AAaieacS/wJ2LIEozkuqzNvEVa53tLWDceApgV7cKVdZ9?=
 =?us-ascii?q?M9/ElI1WbDuwNhOZygKrhohkQCfARvo0PuyxJ3B51ckcgrqXMqyxZyKaKY0V9b?=
 =?us-ascii?q?azOUx5fwOqfTKmnz+hCvZLXb2lXf0NaQ56cO5+40q1TlvAG1CEUi929r3MVS03?=
 =?us-ascii?q?uZ/p/KFhYdUYrtUkYr8Bh3v6vVYi0j6ILby3JtMbO4vSTf2900HuQlzBWgf9BB?=
 =?us-ascii?q?MK6fEA/yEssaB9WhKeAwmlipaA4EM/5W9KIuI8ymcP6G0raxPOl8hDKmkXhH4I?=
 =?us-ascii?q?dl30OM6ipwUPLH04wEwvGYxASHUTj8gUylssD2n4BEeD4TEnC+ySjiGI5eeKly?=
 =?us-ascii?q?cZwXBmepJs293s9+iIL1W35E6F6jAEsL2NWoeRWOdVP9xxBf1UMNrXyhhyS41T?=
 =?us-ascii?q?10nyg1oaWF2CzB3vrtdAAAOm5NX2RiiVbsIY6pj9EVRkSobg4plAe76kb+3aRU?=
 =?us-ascii?q?uKN/L2zLS0dSYyf2N31iUre3treaY89P6YkksCVNXOSnfFCaTKXwox8b0yPlAm?=
 =?us-ascii?q?tfyyo3dzCsupXlgRN6jHiRI2p0rHrcYctw3wvQ5MTARf5N2ToLXCt4hiPNBli/?=
 =?us-ascii?q?PNmp+s+Yl4zZveC9VGKhV5tTfjftzY6bsCu75GtqAQCwnvypm93nFxQ63jH/19?=
 =?us-ascii?q?VwSSrIqxP8aJHx16umKeJnYlVoBFjk5st6AI5+lZE8hJMR2XgcnZiV+XsHkWHu?=
 =?us-ascii?q?MdRUw67+bXwNRSIVzN7R+gTqxEpjLneRzYLjSnqd2tdhZ8W9Ym4O2SIy9cFKBL?=
 =?us-ascii?q?2U7LxZhyR1pFW4oBnVYfh8mDcd1PQv5GQbg+EPpAoi0CGdDqoOEklfOCzmjw6I?=
 =?us-ascii?q?4MymrKVLeGavdqC91E9/ndCiFr6OuA9dV2jiepc+AyBw9N5wP0zW0H388YzkfN?=
 =?us-ascii?q?jQbdQOthybiRvAju5VKI4vmfoOnyZoJWX9vXg9we4hkRNuxY26vJSAK2h14KK5?=
 =?us-ascii?q?BRtYOif0ZswJ/DHtkL1ent2X3420GpVhGzMLXIbnTP6yETISs+jnOBiKEDEmtn?=
 =?us-ascii?q?ibHr/fFxeF6Eh6t3LPD4yrN3aPKXYC19piQx2dJFFFjAAQQTU3hZo5FgGsxMz8?=
 =?us-ascii?q?f0Z1/DER5ljkqhRSzuJkLQXwUmDapA2wcDc7VICfLAZK7gFF/0rVM9aR7udtEC?=
 =?us-ascii?q?FD5JGhsBaBKm+GZwRLEGEJXFaLB0v4M7mq5NnA9fWYB+WkI/vPZ7WOtfJRV/OS?=
 =?us-ascii?q?yZ2z1Ytm+i6GNt+TMXl6E/07xk1DUGh5GsTehjUPUjEXmDjLb8KBvxe8/St3rs?=
 =?us-ascii?q?+k/fTvWQLv45aPCrRIPdVu/RC2nbmMN+qKiCllLjZY04sGxWXUx7gHwF4SlyZu?=
 =?us-ascii?q?eiGtEbsetC7NT6HQmq5NAx4YcSNzM8RI4Lwm3glQIs7Wkdf11r9+jv4oBFZJT1?=
 =?us-ascii?q?3hmse1ZcMUJ2GxLk/IBEGONL6ePz3E39n3Yb+gSb1XlOhbrQCwti2BE0D9PjWP?=
 =?us-ascii?q?jT3pVxG0POFIjSGbOgFeuY6nfhZsD2jjUMzpahmhPNBrij02xKU+hmnWOm4ELT?=
 =?us-ascii?q?h8b0RNo6WM7SNZh/VzAXBO4mB5IumEhSmZ6fLVKpIXsfttHyR1mPhW4HU8y7tJ?=
 =?us-ascii?q?8i5EQOZ5lzfVrt5ru1umiPWAyiJ7UBpSrTZGnIKKsl9kOaXc95lAX27L/RMN7W?=
 =?us-ascii?q?qKDRQKqMBoCtnuu6BW19jOm7j/KDZE89LI48QcA9LYJ96AMHokYlLVH2vrBQoA?=
 =?us-ascii?q?RDjjEWbZiAQJlPaU+XicqLAgp5TskYZIQbheAhh9E/IcBUNNBtEOIJ5rGDgjlO?=
 =?us-ascii?q?21lskNsFC3tgWZesxc9rncTfmSDL27IiiQi7BffBAIzJvxJoFVMZf0jR8xImJm?=
 =?us-ascii?q?lZjHThKDFetGpTdsO0pt+B1A?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAADd8wZch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgTCCO4w5jA6CDRSXNRSBcQEBKwGHTCI0CQ0BAwEBAQEBAQIBEwE?=
 =?us-ascii?q?BAQgNCQgpL4I2JAGCYgMDAQJ2BgkBAQpGAzEBBQEcBgEXgxyCAgEEmWc8jDyFQ?=
 =?us-ascii?q?YRxEowMF4F/gRGCZC6EOy6FcwKPeDeQGgmKNocjgVuIADaHFQiIfo9KBgIJBw8?=
 =?us-ascii?q?hgSWCDTMaMEOCbYImFxKOLB+BNwEBIYgCgjsDAQE?=
X-IPAS-Result: =?us-ascii?q?A0ANAADd8wZch0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBgTC?=
 =?us-ascii?q?CO4w5jA6CDRSXNRSBcQEBKwGHTCI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpL4I2J?=
 =?us-ascii?q?AGCYgMDAQJ2BgkBAQpGAzEBBQEcBgEXgxyCAgEEmWc8jDyFQYRxEowMF4F/gRG?=
 =?us-ascii?q?CZC6EOy6FcwKPeDeQGgmKNocjgVuIADaHFQiIfo9KBgIJBw8hgSWCDTMaMEOCb?=
 =?us-ascii?q?YImFxKOLB+BNwEBIYgCgjsDAQE?=
X-IronPort-AV: E=Sophos;i="5.56,315,1539673200"; 
   d="scan'208";a="65322832"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 04 Dec 2018 13:42:54 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726454AbeLDVmx (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 4 Dec 2018 16:42:53 -0500
Received: from mail-pl1-f194.google.com ([209.85.214.194]:34916 "EHLO
        mail-pl1-f194.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725906AbeLDVmu (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 4 Dec 2018 16:42:50 -0500
Received: by mail-pl1-f194.google.com with SMTP id p8so8961812plo.2
        for <linux-kernel@vger.kernel.org>; Tue, 04 Dec 2018 13:42:50 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:message-id:subject:from:to:cc:date:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=1c1zwl61qtCJlxK15kKZF0TseYgFkgxuUXvBoql0hg0=;
        b=iJvKIB18DMX/BcZRkxlbfMOeMMsgx2mg2eEHdqWv8/6h9FH1pJ5flcNV4+biGy7KCa
         MttkvsYUo6AEeHmbsH3QXXAyPE3H6Ytjvvr/h4V9ED+fG5s94oXwp3vdFD0OCekLHneD
         hPty3wkF/mQHILJfsh9UwySdHTUahe2Q00o0y5ituD2Gs0zQ1ljov3BnBHOXjlpNRHpW
         WuDitbSX03lcgRn4FirztMD4/Vm7rnckyTOebHyWldOvv//Owd+zTtoFc+J+5IDpR4gr
         U8MD6Sizz8Mh68Afd7lL6gYmokKZMsjj3YC7lrAye2qNz4BAy6ph44Q41uCZX+fs91lZ
         nVMg==
X-Gm-Message-State: AA+aEWasTBjzKFoCqECqdyaIC0gsTXCZCdarOdGTpVc0OG/g4KOtdGU0
        XxZXpoBMGNlhgKkULXdGkIo=
X-Google-Smtp-Source: AFSGD/UvDa+Kaq3DBIfrStnBiw7POQkDCsPLbi/z8pQ5hvNSuF6HD1PfzSEEKbl7H8eRZ+7upxqmSw==
X-Received: by 2002:a17:902:b03:: with SMTP id 3mr21462674plq.91.1543959769699;
        Tue, 04 Dec 2018 13:42:49 -0800 (PST)
Received: from ?IPv6:2620:15c:2cd:203:5cdc:422c:7b28:ebb5? ([2620:15c:2cd:203:5cdc:422c:7b28:ebb5])
        by smtp.gmail.com with ESMTPSA id d202sm34623125pfd.58.2018.12.04.13.42.48
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Tue, 04 Dec 2018 13:42:48 -0800 (PST)
Message-ID: <1543959767.185366.217.camel@acm.org>
Subject: Re: [PATCH v2 17/24] locking/lockdep: Free lock classes that are no
 longer in use
From: Bart Van Assche <bvanassche@acm.org>
To: Waiman Long <longman@redhat.com>, mingo@redhat.com
Cc: peterz@infradead.org, tj@kernel.org, johannes.berg@intel.com,
        linux-kernel@vger.kernel.org,
        Johannes Berg <johannes@sipsolutions.net>
Date: Tue, 04 Dec 2018 13:42:47 -0800
In-Reply-To: <46b0ff3c-aa6e-7183-3554-19ed112536aa@redhat.com>
References: <20181204002833.55452-1-bvanassche@acm.org>
         <20181204002833.55452-18-bvanassche@acm.org>
         <46b0ff3c-aa6e-7183-3554-19ed112536aa@redhat.com>
Content-Type: text/plain; charset="UTF-7"
X-Mailer: Evolution 3.26.2-1 
Mime-Version: 1.0
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Tue, 2018-12-04 at 15:27 -0500, Waiman Long wrote:
+AD4 On 12/03/2018 07:28 PM, Bart Van Assche wrote:
+AD4 +AD4 +-/+ACo Must be called with the graph lock held. +ACo-/
+AD4 +AD4 +-static void remove+AF8-class+AF8-from+AF8-lock+AF8-chain(struct lock+AF8-chain +ACo-chain,
+AD4 +AD4 +-					 struct lock+AF8-class +ACo-class)
+AD4 +AD4 +-+AHs
+AD4 +AD4 +-	u64 chain+AF8-key+ADs
+AD4 +AD4 +-	int i+ADs
+AD4 +AD4 +-
+AD4 +AD4 +-+ACM-ifdef CONFIG+AF8-PROVE+AF8-LOCKING
+AD4 +AD4 +-	for (i +AD0 chain-+AD4-base+ADs i +ADw chain-+AD4-base +- chain-+AD4-depth+ADs i+-+-) +AHs
+AD4 +AD4 +-		if (chain+AF8-hlocks+AFs-i+AF0 +ACEAPQ class - lock+AF8-classes)
+AD4 +AD4 +-			continue+ADs
+AD4 +AD4 +-		if (--chain-+AD4-depth +AD0APQ 0)
+AD4 +AD4 +-			break+ADs
+AD4 +AD4 +-		memmove(+ACY-chain+AF8-hlocks+AFs-i+AF0, +ACY-chain+AF8-hlocks+AFs-i +- 1+AF0,
+AD4 +AD4 +-			(chain-+AD4-base +- chain-+AD4-depth - i) +ACo
+AD4 +AD4 +-			sizeof(chain+AF8-hlocks+AFs-0+AF0))+ADs
+AD4 +AD4 +-		/+ACo
+AD4 +AD4 +-		 +ACo Each lock class occurs at most once in a
+AD4 +AD4 +-		 +ACo lock chain so once we found a match we can
+AD4 +AD4 +-		 +ACo break out of this loop.
+AD4 +AD4 +-		 +ACo-/
+AD4 +AD4 +-		break+ADs
+AD4 +AD4 +-	+AH0
+AD4 +AD4 +-	/+ACo
+AD4 +AD4 +-	 +ACo Note: calling hlist+AF8-del+AF8-rcu() from inside a
+AD4 +AD4 +-	 +ACo hlist+AF8-for+AF8-each+AF8-entry+AF8-rcu() loop is safe.
+AD4 +AD4 +-	 +ACo-/
+AD4 +AD4 +-	if (chain-+AD4-depth +AD0APQ 0) +AHs
+AD4 +AD4 +-		/+ACo To do: decrease chain count. See also inc+AF8-chains(). +ACo-/
+AD4 +AD4 +-		hlist+AF8-del+AF8-rcu(+ACY-chain-+AD4-entry)+ADs
+AD4 +AD4 +-		return+ADs
+AD4 +AD4 +-	+AH0
+AD4 +AD4 +-	chain+AF8-key +AD0 0+ADs
+AD4 +AD4 +-	for (i +AD0 chain-+AD4-base+ADs i +ADw chain-+AD4-base +- chain-+AD4-depth+ADs i+-+-)
+AD4 +AD4 +-		chain+AF8-key +AD0 iterate+AF8-chain+AF8-key(chain+AF8-key, chain+AF8-hlocks+AFs-i+AF0 +- 1)+ADs
+AD4 
+AD4 Do you need to recompute the chain+AF8-key if no entry in the chain is removed?

Thanks for having pointed that out. I will modify this function such that the
chain key is only recalculated if necessary.

+AD4 +AD4  
+AD4 +AD4 +AEAAQA -4141,14 +-4253,31 +AEAAQA static void zap+AF8-class(struct lock+AF8-class +ACo-class)
+AD4 +AD4  	for (i +AD0 0, entry +AD0 list+AF8-entries+ADs i +ADw nr+AF8-list+AF8-entries+ADs i+-+-, entry+-+-) +AHs
+AD4 +AD4  		if (entry-+AD4-class +ACEAPQ class +ACYAJg entry-+AD4-links+AF8-to +ACEAPQ class)
+AD4 +AD4  			continue+ADs
+AD4 +AD4 +-		links+AF8-to +AD0 entry-+AD4-links+AF8-to+ADs
+AD4 +AD4 +-		WARN+AF8-ON+AF8-ONCE(entry-+AD4-class +AD0APQ links+AF8-to)+ADs
+AD4 +AD4  		list+AF8-del+AF8-rcu(+ACY-entry-+AD4-entry)+ADs
+AD4 +AD4 +-		check+AF8-free+AF8-class(class)+ADs
+AD4 
+AD4 Is the check+AF8-free+AF8-class() call redundant? You are going to call it near
+AD4 the end below.

I think so. I will remove the check+AF8-free+AF8-class() that is inside the for-loop.

+AD4 +AD4 +-static void reinit+AF8-class(struct lock+AF8-class +ACo-class)
+AD4 +AD4 +-+AHs
+AD4 +AD4 +-	void +ACo-const p +AD0 class+ADs
+AD4 +AD4 +-	const unsigned int offset +AD0 offsetof(struct lock+AF8-class, key)+ADs
+AD4 +AD4 +-
+AD4 +AD4 +-	WARN+AF8-ON+AF8-ONCE(+ACE-class-+AD4-lock+AF8-entry.next)+ADs
+AD4 +AD4 +-	WARN+AF8-ON+AF8-ONCE(+ACE-list+AF8-empty(+ACY-class-+AD4-locks+AF8-after))+ADs
+AD4 +AD4 +-	WARN+AF8-ON+AF8-ONCE(+ACE-list+AF8-empty(+ACY-class-+AD4-locks+AF8-before))+ADs
+AD4 +AD4 +-	memset(p +- offset, 0, sizeof(+ACo-class) - offset)+ADs
+AD4 +AD4 +-	WARN+AF8-ON+AF8-ONCE(+ACE-class-+AD4-lock+AF8-entry.next)+ADs
+AD4 +AD4 +-	WARN+AF8-ON+AF8-ONCE(+ACE-list+AF8-empty(+ACY-class-+AD4-locks+AF8-after))+ADs
+AD4 +AD4 +-	WARN+AF8-ON+AF8-ONCE(+ACE-list+AF8-empty(+ACY-class-+AD4-locks+AF8-before))+ADs
+AD4 +AD4  +AH0
+AD4 
+AD4 Is it safer to just reinit those fields before +ACI-key+ACI instead of using
+AD4 memset()? Lockdep is slow anyway, doing that individually won't
+AD4 introduce any noticeable slowdown.

The warning statements will only be hit if the order of the struct lock+AF8-class members
would be modified. I don't think that we need to change the approach of this function.

+AD4 +AD4 +AEAAQA -4193,18 +-4355,14 +AEAAQA void lockdep+AF8-free+AF8-key+AF8-range(void +ACo-start, unsigned long size)
+AD4 +AD4  	raw+AF8-local+AF8-irq+AF8-restore(flags)+ADs
+AD4 +AD4  
+AD4 +AD4  	/+ACo
+AD4 +AD4 -	 +ACo Wait for any possible iterators from look+AF8-up+AF8-lock+AF8-class() to pass
+AD4 +AD4 -	 +ACo before continuing to free the memory they refer to.
+AD4 +AD4 -	 +ACo
+AD4 +AD4 -	 +ACo sync+AF8-sched() is sufficient because the read-side is IRQ disable.
+AD4 +AD4 +-	 +ACo Do not wait for concurrent look+AF8-up+AF8-lock+AF8-class() calls. If any such
+AD4 +AD4 +-	 +ACo concurrent call would return a pointer to one of the lock classes
+AD4 +AD4 +-	 +ACo freed by this function then that means that there is a race in the
+AD4 +AD4 +-	 +ACo code that calls look+AF8-up+AF8-lock+AF8-class(), namely concurrently accessing
+AD4 +AD4 +-	 +ACo and freeing a synchronization object.
+AD4 +AD4  	 +ACo-/
+AD4 +AD4 -	synchronize+AF8-sched()+ADs
+AD4 +AD4  
+AD4 +AD4 -	/+ACo
+AD4 +AD4 -	 +ACo XXX at this point we could return the resources to the pool+ADs
+AD4 +AD4 -	 +ACo instead we leak them. We would need to change to bitmap allocators
+AD4 +AD4 -	 +ACo instead of the linear allocators we have now.
+AD4 +AD4 -	 +ACo-/
+AD4 +AD4 +-	schedule+AF8-free+AF8-zapped+AF8-classes()+ADs
+AD4 
+AD4 Should you move the graph+AF8-unlock() and raw+AF8-lock+AF8-irq+AF8-restore() down to
+AD4 after this? The schedule+AF8-free+AF8-zapped+AF8-classes must be called with
+AD4 graph+AF8-lock held. Right?

I will modify this and other patches such that all schedule+AF8-free+AF8-zapped+AF8-classes()
calls are protected by the graph lock.

Bart.
