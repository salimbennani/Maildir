Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 23 Nov 2018 15:31:43 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id DC10B58040F;
	Thu, 22 Nov 2018 23:03:24 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 22 Nov 2018 23:03:24 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3As6GDjxWg2T+5niKC6UDsS6q2Ko3V8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhGBv6dThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGp6y?=
 =?us-ascii?q?YZUBD+QBPuhWoYfyqFQMohSiCgesH/vvxz1Ti3/q36A3yfgtHR3I0QEiGd8FrX?=
 =?us-ascii?q?TarM/yNKcXSe27yajIzS/Cb/NS3Tf29ZbGchMhof6WXLJ7bM3cyUozFwPGjlWf?=
 =?us-ascii?q?s43lMiiL1uQMqWib8/dgVeWuim8mrAF9uCSgxsApioTQgI8e11PK9T1hzYorOd?=
 =?us-ascii?q?G1TFR3bcOqHZdOrS2WKoh7Tt84T2xpuis20qAKtJ27cSQQ1pgqyQPTZ+aZf4WH?=
 =?us-ascii?q?/h7vTuScLDd+iXl4YrywnQyy/lKlyuDkVsm7zlJKri1dn9nSuXACyQbT5tKESv?=
 =?us-ascii?q?Rj5Eeh3yiA1wTJ5uFDO0A0mrLXK58nwrEuipoeqVrPEjPylUnskaObeFso9vK1?=
 =?us-ascii?q?5+nkfrnqvJ6ROo1shgH7KKsum8i/AeoiMggJWmiW4eC81Lzl/U3kT7RGl/42nb?=
 =?us-ascii?q?fDsJDcO8sbore1Awhb04Yl9Rm/FSyr0MoXnXYZNlJJYhGHgJbzO1HIPv/4Ce2z?=
 =?us-ascii?q?g1O2kDdk3/zGJKHuAo3RLnjfl7fsZbJ9609fyAUt19xe6I9UB6oFIPLyXE/xqd?=
 =?us-ascii?q?PZAgU4Mwyy3+boFtF92pkCVmKIB6+TKLnSvkOQ5uIzP+mMY5cYuDbnJPgk+/7h?=
 =?us-ascii?q?l3g5lUUdfam0x5QXbn+4E+9iI0WYZ3rsn9gAHX0Lvgo4UOzlllmCXSRPaHa1Wq?=
 =?us-ascii?q?I2/is7B56+DYffWoCth6SM3CW8HpJIfGxGCVeMEXHud4WDQPoMbCOSIsl8kj0L?=
 =?us-ascii?q?T7ShSokh1Q2wuw/+0bZoMu3U+igAv5L5yNd1//HTlQ019TFsFcudyGGNT2Z3nm?=
 =?us-ascii?q?8SXT85xqJ/rFd5yleC16h4nvNZGcZS5/NPTgc1K5rcw/ZmBND1XwLLZs2JR0q+?=
 =?us-ascii?q?QtW6HTExSco8w9wUbEZ7AdmiihHD0DCsA78ajLGLAJ008qTB33n+Pcp9ynDG1L?=
 =?us-ascii?q?U/gFkiWMdAKWqmhqtn/QjJG4HJi1mZl7qtdakEwSHC7nmDwnSUsEFYSgFwV77F?=
 =?us-ascii?q?Um4ZZkfRqdT55UbCT7u1BLQjMwtBz9OCK6RQZt3oi1VGWOnsONDEb22tnGewAA?=
 =?us-ascii?q?6CxqmQY4ryZ2UdwCLdBVAZnA8J43aJKxIyBie7rGLYFzxhC1Tvbljo8el/rnO7?=
 =?us-ascii?q?U0A1wxuLb01ny7q65BoVieaARPMU27IOoD0hpClsHFahw9LWDMKNpxZgfKVZZt?=
 =?us-ascii?q?M9/FdH1GLDuwxhJJCgKLpihlofcwRxsEPjzBF3CoRGkcg3o3Im1gtyKaSE0Fxf?=
 =?us-ascii?q?czOUx4z/OrrSKmPq5hCgd7bW2k3C0NaR4qoA8vA4pEvsvQ63Fksu6W5o08RI3H?=
 =?us-ascii?q?SG4JXKDw0SUYzqX0Yz9hh6oazaYyYn64PV031sLbe7sjvY1901A+slzw6qf81D?=
 =?us-ascii?q?P6OcCA/yD8oaCtCuKew3gVSmcggIPeFS9KEuOcOmeOCL2KqqPOZmgTKngn5L4I?=
 =?us-ascii?q?F70kKQ6SV8TvTE0IoCw/GdxgGHTSvzjE+9ssDrnoBJfSsSHmujxif+Ho5ee6py?=
 =?us-ascii?q?cZwNCWiwOc23x8xyiIL3VH5c6VGsGUkG2MiveReJa1z93AtQ1VkYoHC9mCu4yS?=
 =?us-ascii?q?B0nC8trqaFwCPOxOHifgIdOmFXXGlikUvsIY+sgtEaXUikdQgomAG+5UbnwahW?=
 =?us-ascii?q?v6B/L2jVQUdVcCn6NWBiUq2strWcZ85D8o8nsSJSUO6ke1CVVqb9owcG0yPkB2?=
 =?us-ascii?q?Zexio0dyupupX6mBx2knmdI2xwrHraeMFwwwnQ5NrHSP5V3zoGQjR4iDbNCli9?=
 =?us-ascii?q?Odmp4cubl5PZvu+iUGKhU4VZcTP3woOYqCu7+WpqDAW/nv+pnd3rCwo60S7919?=
 =?us-ascii?q?RxUSXIrRD8YpTk1qigMOJneFVoC0H468ZgBo5+lY4wjokK2XcGnpWV4WYHkWDr?=
 =?us-ascii?q?PNVYw63+bWABRT4Ww9HP5gjl11ZuLnaIx4L/S3WczdFtZ9i8YmMKxC0969pGB7?=
 =?us-ascii?q?uT7LxBhSF1uEa3rRrNYfhhmTcQ0f4u6H8Zg+4TogYswDuSAqsOHUZGJyzjjAqH?=
 =?us-ascii?q?78qxrKhMYGavcL6w1FdxnNy7DbGCpB1cV2j9eps4ASBw6cB/OkrW0HLv8oHkZM?=
 =?us-ascii?q?XQbdULux2IlBfAivJZKZMrmfoMmCpnInn9vXw+xu4/jBxu24y6vYedJ2Vs+qK5?=
 =?us-ascii?q?HgBXNjnva8wP/THtiL5UntyK0IC3ApVhBjILUYPzQv2yFzISsennOxyKED0hsX?=
 =?us-ascii?q?qbHbvfHQmC6EZptX7PEparN22JK3kd19ltWB6dJElHigAOQDo6hoI5FhytxMH5?=
 =?us-ascii?q?ckd2/DUR6UDjqhdW1uJkLRr/UnrcpAe1bDc7UoOfIQFS7gFD4UfVLMOf4vhyHy?=
 =?us-ascii?q?Fe4p2usgiNJnaHaARPCGEDQlaECEz7Prmy+dnA9PCVB+q5L/vTeLWOtPZRV/GS?=
 =?us-ascii?q?yZK01Ytm+TmMO96LPnljCf07x0VCUWp4G8TfhzUAVSgXmzjRYM6coRe24jd3od?=
 =?us-ascii?q?yn8PT3RALv4pOCC7tMPtVu+BC2gqaDO/SThCZjLjZY2Y0DxWXVyLgEx1MSjyBu?=
 =?us-ascii?q?dz+wEbUPryLNTaTQmrNJAB4fcS98KMxI76ck1AlXJcHbks/11qJ/jvMtEVhFSE?=
 =?us-ascii?q?fumtu3as0KOW29MFLHCV2PNLSHIz3L3s72bbm9Sb1WkOVbqRmwtSyHHE/kOzSJ?=
 =?us-ascii?q?jyPpWAy3MeFQkCGbOwRTuJ28chZoE2TsUMjqZQG7MNBpiz072rk0hnLMNW4BPj?=
 =?us-ascii?q?lwaUJNrruM7SxGhvVzAXBO7n1gLeOcgSaW8/HYKooKsftsGil1l/hV4HI/y7tU?=
 =?us-ascii?q?6iFLXP10mCvIod5orFGrie2PyjthUBpTpTdHnoOLvUN+OarH8plMQ2rL/BUI7T?=
 =?us-ascii?q?bYNxNfltJjBZXUu6EYnsnGkq21MzdD29bV+9YMQcHQKciOOnNnOh3sTnqcCQsC?=
 =?us-ascii?q?Rj2sHWLSnUpQlLeV7HLR5oYwo5LvkbIVV6RWElcnUrsaA0JjEccqK5JvTjgknv?=
 =?us-ascii?q?iclsFMrXqjoxndbMpduZ/DW7SZBvCrYD+albxsYxoO3KO9I4MOMIHyx01lbB99?=
 =?us-ascii?q?houZNVDXWIVuozdgagt8nEZN+Xk2Gm4v2ELsayuz4WUPCPmmjBlwgQx7N7d+vA?=
 =?us-ascii?q?zw6ks6cwKZ7BA7l1M8zJC82Wic?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AHAADtpfdbh0O0hNFaCBsBAQEBAwEBA?=
 =?us-ascii?q?QcDAQEBgVEGAQEBCwGDayeDeYgYi36BYAglFGaRFoUrgXMsEwGIUiI0CQ0BAwE?=
 =?us-ascii?q?BAQEBAQIBEwEBAQgNCQgpL4I2JAGCYgECAwECIARSBgkBAQoYAgImAgIDVAYBD?=
 =?us-ascii?q?AYCAQEBgxyCAgQBpyp8M4VAhFiBC4p+F4FAP4ERJwyCKjWEWYMpglcCiH+GXTG?=
 =?us-ascii?q?PdQmRKR6JYViGT5l2gg0zGggbFYMngicXjh88ATIBgQQBAYwiAQE?=
X-IPAS-Result: =?us-ascii?q?A0AHAADtpfdbh0O0hNFaCBsBAQEBAwEBAQcDAQEBgVEGAQE?=
 =?us-ascii?q?BCwGDayeDeYgYi36BYAglFGaRFoUrgXMsEwGIUiI0CQ0BAwEBAQEBAQIBEwEBA?=
 =?us-ascii?q?QgNCQgpL4I2JAGCYgECAwECIARSBgkBAQoYAgImAgIDVAYBDAYCAQEBgxyCAgQ?=
 =?us-ascii?q?Bpyp8M4VAhFiBC4p+F4FAP4ERJwyCKjWEWYMpglcCiH+GXTGPdQmRKR6JYViGT?=
 =?us-ascii?q?5l2gg0zGggbFYMngicXjh88ATIBgQQBAYwiAQE?=
X-IronPort-AV: E=Sophos;i="5.56,268,1539673200"; 
   d="scan'208";a="53048393"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 22 Nov 2018 23:03:15 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2502228AbeKWRqI (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 23 Nov 2018 12:46:08 -0500
Received: from relay.sw.ru ([185.231.240.75]:57032 "EHLO relay.sw.ru"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S2389987AbeKWRqI (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 23 Nov 2018 12:46:08 -0500
Received: from [172.16.25.169]
        by relay.sw.ru with esmtp (Exim 4.91)
        (envelope-from <ktkhai@virtuozzo.com>)
        id 1gQ5UX-0000hx-Qp; Fri, 23 Nov 2018 10:03:05 +0300
Subject: Re: [PATCH 2/2] mm: ksm: do not block on page lock when searching
 stable tree
To: Yang Shi <yang.shi@linux.alibaba.com>, mhocko@kernel.org,
        vbabka@suse.cz, hannes@cmpxchg.org, hughd@google.com,
        akpm@linux-foundation.org
Cc: linux-mm@kvack.org, linux-kernel@vger.kernel.org
References: <1541618201-120667-1-git-send-email-yang.shi@linux.alibaba.com>
 <1541618201-120667-2-git-send-email-yang.shi@linux.alibaba.com>
From: Kirill Tkhai <ktkhai@virtuozzo.com>
Message-ID: <302f3116-7e53-2750-ec2d-b90feb4cafec@virtuozzo.com>
Date: Fri, 23 Nov 2018 10:03:04 +0300
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.3.0
MIME-Version: 1.0
In-Reply-To: <1541618201-120667-2-git-send-email-yang.shi@linux.alibaba.com>
Content-Type: text/plain; charset=utf-8
Content-Language: en-US
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 07.11.2018 22:16, Yang Shi wrote:
> ksmd need search stable tree to look for the suitable KSM page, but the
> KSM page might be locked for long time due to i.e. KSM page rmap walk.
> 
> It sounds not worth waiting for the lock, the page can be skip, then try
> to merge it in the next scan to avoid long stall if its content is
> still intact.
> 
> Introduce async mode to get_ksm_page() to not block on page lock, like
> what try_to_merge_one_page() does.
> 
> Return -EBUSY if trylock fails, since NULL means not find suitable KSM
> page, which is a valid case.
> 
> Signed-off-by: Yang Shi <yang.shi@linux.alibaba.com>

Reviewed-by: Kirill Tkhai <ktkhai@virtuozzo.com>

> ---
>  mm/ksm.c | 29 +++++++++++++++++++++++++----
>  1 file changed, 25 insertions(+), 4 deletions(-)
> 
> diff --git a/mm/ksm.c b/mm/ksm.c
> index 5b0894b..576803d 100644
> --- a/mm/ksm.c
> +++ b/mm/ksm.c
> @@ -667,7 +667,7 @@ static void remove_node_from_stable_tree(struct stable_node *stable_node)
>  }
>  
>  /*
> - * get_ksm_page: checks if the page indicated by the stable node
> + * __get_ksm_page: checks if the page indicated by the stable node
>   * is still its ksm page, despite having held no reference to it.
>   * In which case we can trust the content of the page, and it
>   * returns the gotten page; but if the page has now been zapped,
> @@ -685,7 +685,8 @@ static void remove_node_from_stable_tree(struct stable_node *stable_node)
>   * a page to put something that might look like our key in page->mapping.
>   * is on its way to being freed; but it is an anomaly to bear in mind.
>   */
> -static struct page *get_ksm_page(struct stable_node *stable_node, bool lock_it)
> +static struct page *__get_ksm_page(struct stable_node *stable_node,
> +				   bool lock_it, bool async)
>  {
>  	struct page *page;
>  	void *expected_mapping;
> @@ -728,7 +729,14 @@ static struct page *get_ksm_page(struct stable_node *stable_node, bool lock_it)
>  	}
>  
>  	if (lock_it) {
> -		lock_page(page);
> +		if (async) {
> +			if (!trylock_page(page)) {
> +				put_page(page);
> +				return ERR_PTR(-EBUSY);
> +			}
> +		} else
> +			lock_page(page);
> +
>  		if (READ_ONCE(page->mapping) != expected_mapping) {
>  			unlock_page(page);
>  			put_page(page);
> @@ -751,6 +759,11 @@ static struct page *get_ksm_page(struct stable_node *stable_node, bool lock_it)
>  	return NULL;
>  }
>  
> +static struct page *get_ksm_page(struct stable_node *stable_node, bool lock_it)
> +{
> +	return __get_ksm_page(stable_node, lock_it, false);
> +}
> +
>  /*
>   * Removing rmap_item from stable or unstable tree.
>   * This function will clean the information from the stable/unstable tree.
> @@ -1675,7 +1688,11 @@ static struct page *stable_tree_search(struct page *page)
>  			 * It would be more elegant to return stable_node
>  			 * than kpage, but that involves more changes.
>  			 */
> -			tree_page = get_ksm_page(stable_node_dup, true);
> +			tree_page = __get_ksm_page(stable_node_dup, true, true);
> +
> +			if (PTR_ERR(tree_page) == -EBUSY)
> +				return ERR_PTR(-EBUSY);
> +
>  			if (unlikely(!tree_page))
>  				/*
>  				 * The tree may have been rebalanced,
> @@ -2062,6 +2079,10 @@ static void cmp_and_merge_page(struct page *page, struct rmap_item *rmap_item)
>  
>  	/* We first start with searching the page inside the stable tree */
>  	kpage = stable_tree_search(page);
> +
> +	if (PTR_ERR(kpage) == -EBUSY)
> +		return;
> +
>  	if (kpage == page && rmap_item->head == stable_node) {
>  		put_page(kpage);
>  		return;
> 
