Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  14 Dec 2018 20:26:10 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 2A9B45803DC;
	Fri, 14 Dec 2018 01:29:24 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga004-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 14 Dec 2018 01:29:23 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AxKxAWBxS3+Ly6bTXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e8TKvad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXXdPUNhfVyJBAY2y?=
 =?us-ascii?q?YYUAAOUDMulEoIf9vEMOoBmlCAmwB+7i0CNEimP40KA41ekqDAHI3BYnH9ILqH?=
 =?us-ascii?q?naqdT1NL0TUeCxyKnD0CvNb/BW2Tjn6YjDbxcsofKQXbJzccre00gvGhjbjlWR?=
 =?us-ascii?q?s4zlIy6V1uMMsmma6OpsT/6gi2kiqwxopDWk28QiipHRi44L1lzJ8T91zJs7KN?=
 =?us-ascii?q?GmUkJ3fN2pHIdKuyybNYZ6Wt4uTmJotSog1LELt4O3cDIUxJko2xLTcf6KfoiO?=
 =?us-ascii?q?7xn+TuieOy14i2hgeL+nhxa970ygyurkW8mq31ZFsDBFnsPPtn8TzRzT7NaISv?=
 =?us-ascii?q?9n8kemwzaP2Bjf6uBCIU8qiarWM4AtzqI0m5YJrEjOEDH6lF/rgKKVakko4Oml?=
 =?us-ascii?q?5ub/brXjvJCcNot0ig/kMqQpn8yyGeA4MgkIX2iG9uWwzb7j8lPjQLVMkPI2lr?=
 =?us-ascii?q?DVsJfUJMQduKG5GRRY0pgs6xmhFTeqytcYkmcdLFJDZh2Hi5LlO1bUIPD3Ffu/?=
 =?us-ascii?q?mUijkC93x/DaOb3sGpHNLnnAkLj/Z7p85FNcxRE3zdBe4ZJUF74ALOjyWk/3qN?=
 =?us-ascii?q?zXEBs5PxaozObgDdV3zpkeVn6XAq+FLKPStkeF5uI1LOmNeI8aojH9J+Il5/7z?=
 =?us-ascii?q?l3A5n1AdcLKt3ZsWbnC4A/tnL1+YYXrqntcOD2MKshAiQ+ztjV2ISSRTaGqqX6?=
 =?us-ascii?q?Ig+jE7D5qrDYXERo+zmrCB3yC7HptQZmBBEV2MFXbod4OZW/YDci6SI8lhkiAa?=
 =?us-ascii?q?WrilUYMuyRautAriwbp9MuXU4jEYtY7k1NVt/eLTjhEy9Tt3D8iHyWGCVWN0k3?=
 =?us-ascii?q?gMRz832qB/vEN8xk2C0ah+n/xXC9hT6+lVXQc9MJ7W1/Z6BMzqWgLdYteJT06r?=
 =?us-ascii?q?Qta8DjE3VN4xx94ObFx7G9WtlR3D2yuqA7kIl72EHpA086Tc32TvKMZ50XrJyK?=
 =?us-ascii?q?4hj1w+SMtVKWKmnrJ/9xTUB4PRjkqWjbiqeroG0C7N7miDy3GOs19eUAJ3VaXF?=
 =?us-ascii?q?XnUfZk/NoNT950PCSaKuCLs9PgtAz86CNrVFatnzgVpaQ/fjPczUY3itlGeoGR?=
 =?us-ascii?q?aI2rSMYZL3dGoHwiXSFlIIkwAJ8naALggxGCGhrnnaDDxvE1Lvfkzt/fN/qHO9?=
 =?us-ascii?q?Uk870QWKY1d92Lqy/x4fneacRO8L3rIYpCchrC15HEq839LTDNqAuwphfaVGbd?=
 =?us-ascii?q?Mh+ltH0njZtwh8PpymIKBvnVoecwVxv0Pz2BR7EIRAkc42rHw0yAp+M76X0FRE?=
 =?us-ascii?q?dzmAx5D/JqXXKnXu/BCoc6PZwFXe38iZ+6gR6PU0sU7svBy0GUU49XVn0N5V02?=
 =?us-ascii?q?WH65XODQoSV4/xU0kt+xh7obHafjcy54fO2XJwNqm0tyfI28g1C+s91hagY9Bf?=
 =?us-ascii?q?PbuEFQ/vCcEVG9KiKe0qm1ezaBIEM/tf9Ko1P8OgavuH17SnPOdmnDK6k2tH5J?=
 =?us-ascii?q?px3V6L9yp5UuTIxYoKw+mE3gubUDfxlE2hssHrlo9efzEdA22/xTLiBIFPfK1y?=
 =?us-ascii?q?fJ8HBnu0LM2z29pxmYTtW3le9FO4A1MG2cmpeQedblDn3A1Q01gXrmKjmSei0z?=
 =?us-ascii?q?N0lDQppLKF3CPS2+TiaAYHOmlTSWhijFfgO4i1g8oBXEi1aQgkjx+l5Uf8x6hG?=
 =?us-ascii?q?q6VzNWjTQUFUfyfoK2FuSLe/tr2HY8RX8pMnrT1XUPigYVCdUrP9oQEV0zngH2?=
 =?us-ascii?q?tdwzA3bSqqtY/6nxx5iWKdKmh8rHzCdMF0xBff4sHcRPFL0joHQil4lSfYBlym?=
 =?us-ascii?q?M9a1+tWUko/JsvqiWGK5Sp1TbS7rwJuAtSSh4m1mGx+/n/G1mtD8FQg60Cn718?=
 =?us-ascii?q?RlVCnSrRb8ZJXr2Lq+Me59YkZoA1r84dJgGo5iioswmI0Q2X8Ci5WW53UHkH3/?=
 =?us-ascii?q?MdVG2a3kanoNSiUGw9rU4AjjxU1iIWiFx4P/VnWB3MRhY8O2bX8R2iI498pKEr?=
 =?us-ascii?q?ub7KRYnStppVq1tQfRYfl+njgH0/cv5mAVg/oVuAUz1CWSGa4dHVNXPSH3kxSI?=
 =?us-ascii?q?7ta+rLhYZWq1cLiw0lZ+ks6lDL2Yvg5cX3P5cI84HSBs9sV/LE7M0Hrr54H4f9?=
 =?us-ascii?q?nQaMgftxyOnBfGkuhVM4kxlvsRiCpjOGL9u2AlyuEhgRxv25G6oJaIK2F38K2l?=
 =?us-ascii?q?BR5YMyX/Z9kP9TH1kaZegsGW0pi0EZp7HTULWIboQeisEDIPrvnnMweOEDshqn?=
 =?us-ascii?q?aUA7bfHAmf6Ft4oHLLCZykK3aXJHwBx9V4WBadPFBfgBwTXDginJ42DAWqy9L6?=
 =?us-ascii?q?cEtj+jAd/F34qgZPyuJ1MRnwSHzfqRysajc1TpifMRVX4htD50fTLcyR8OZzEz?=
 =?us-ascii?q?tE8Z2mqQyHMnabaBhQDWEVRkyEAEjuP7mp5dnd6uiYG/CxL/3UbbWVruxeUfiI?=
 =?us-ascii?q?yImr0otn+TaMK8qOMmNjD/09xkpMQ3R5F97FlDUITiwdjzjNYNKDpBeg5i13qd?=
 =?us-ascii?q?iy8PT1VwLu5ouPCLpSPc9s+xCshqeDOPCfhDxkKTZDzZ4MwX7IyL4C3F8dkS1u?=
 =?us-ascii?q?dj+tEageui7JVq7fhqhXDxsDYSNpKMRI97483hVKOcPDkNz1y6V3juQrBFZFT1?=
 =?us-ascii?q?DhnsCpaNcOI2G8MlPHGUmKOK6HJT3N38H4f6e8RadMg+VTsh26oSybHFP7PjSf?=
 =?us-ascii?q?iznpUAiiMf1NjCGeJhBRpJuxfQptCWf9StLrcRm7MN5xjT0rzrw4nHLKNWgAMT?=
 =?us-ascii?q?did0NBtKGf7SRdgv9nAWxO8mJlLfWYmyae9+TZKowZsf1uAiR1keJV+HU7y7tP?=
 =?us-ascii?q?4yFCS/x4gy/Srt9oo1G7neiD0DtnUBxSqjlVgIKHp1ltOaLc9soIZXGRzRsL4i?=
 =?us-ascii?q?2rCxVC88psDNKpoKBR4tzOkr/jbj5G8tjd98JaDM/RfobPOXk5NDLtGTjJHE4L?=
 =?us-ascii?q?SiOtOWjDhktb1vaI+TndrZkgq5zosIEOV6NWUVsrUPUTD0khVNwfL5d7djwjlr?=
 =?us-ascii?q?GfgYgD4n/65BDYXs5TuJ/KfuifDfXmNHCSirwXSQEPxObbLJ4SMomz509iY1gy?=
 =?us-ascii?q?yIfWGErZXPhTozd9cwgmskIL+397GD5gk3n5Yx+gtSdAXcW/mQQ7304nObwg?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0B9AQCjdhNch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBZYNsJ4N8lCqBYAglFJk0LBMBh0ciSgEDAQEBAQEBAgETAQEBCA0JCCkvgjY?=
 =?us-ascii?q?kAYJiAQIDAQIgBAsBRgYJAQEIAhgCAiYCAgNUBgEMBgIBAQGDHIIBBAGKXJtSf?=
 =?us-ascii?q?DOFQIRwgQuLMxeBQD+BEScMgl+IBYJXAokehymQUQmRVB6BXYUcgwZchnIsiQe?=
 =?us-ascii?q?TeTMaCBsVgyeCJxeOIDwBMoEFAQGMVgEB?=
X-IPAS-Result: =?us-ascii?q?A0B9AQCjdhNch0O0hNFjHAEBAQQBAQcEAQGBZYNsJ4N8lCq?=
 =?us-ascii?q?BYAglFJk0LBMBh0ciSgEDAQEBAQEBAgETAQEBCA0JCCkvgjYkAYJiAQIDAQIgB?=
 =?us-ascii?q?AsBRgYJAQEIAhgCAiYCAgNUBgEMBgIBAQGDHIIBBAGKXJtSfDOFQIRwgQuLMxe?=
 =?us-ascii?q?BQD+BEScMgl+IBYJXAokehymQUQmRVB6BXYUcgwZchnIsiQeTeTMaCBsVgyeCJ?=
 =?us-ascii?q?xeOIDwBMoEFAQGMVgEB?=
X-IronPort-AV: E=Sophos;i="5.56,352,1539673200"; 
   d="scan'208";a="56341701"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 14 Dec 2018 01:29:21 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728609AbeLNJ0T (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 14 Dec 2018 04:26:19 -0500
Received: from relay.sw.ru ([185.231.240.75]:43490 "EHLO relay.sw.ru"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726494AbeLNJ0T (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 14 Dec 2018 04:26:19 -0500
Received: from [172.16.25.169]
        by relay.sw.ru with esmtp (Exim 4.91)
        (envelope-from <ktkhai@virtuozzo.com>)
        id 1gXjjV-0000SP-OA; Fri, 14 Dec 2018 12:26:09 +0300
Subject: Re: [PATCH] mm: Reuse only-pte-mapped KSM page in do_wp_page()
To: Yang Shi <yang.shi@linux.alibaba.com>, akpm@linux-foundation.org,
        kirill@shutemov.name, hughd@google.com, aarcange@redhat.com
Cc: christian.koenig@amd.com, imbrenda@linux.vnet.ibm.com,
        riel@surriel.com, ying.huang@intel.com, minchan@kernel.org,
        linux-kernel@vger.kernel.org, linux-mm@kvack.org
References: <154471491016.31352.1168978849911555609.stgit@localhost.localdomain>
 <5d5bfbd2-8411-e707-1628-18bde66a6793@linux.alibaba.com>
From: Kirill Tkhai <ktkhai@virtuozzo.com>
Message-ID: <a394a604-20d6-e261-1735-bc225e39f2a2@virtuozzo.com>
Date: Fri, 14 Dec 2018 12:26:09 +0300
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.3.1
MIME-Version: 1.0
In-Reply-To: <5d5bfbd2-8411-e707-1628-18bde66a6793@linux.alibaba.com>
Content-Type: text/plain; charset=utf-8
Content-Language: en-US
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 13.12.2018 22:15, Yang Shi wrote:
> 
> 
> On 12/13/18 7:29 AM, Kirill Tkhai wrote:
>> This patch adds an optimization for KSM pages almost
>> in the same way, that we have for ordinary anonymous
>> pages. If there is a write fault in a page, which is
>> mapped to an only pte, and it is not related to swap
>> cache; the page may be reused without copying its
>> content.
>>
>> [Note, that we do not consider PageSwapCache() pages
>>   at least for now, since we don't want to complicate
>>   __get_ksm_page(), which has nice optimization based
>>   on this (for the migration case). Currenly it is
>>   spinning on PageSwapCache() pages, waiting for when
>>   they have unfreezed counters (i.e., for the migration
>>   finish). But we don't want to make it also spinning
>>   on swap cache pages, which we try to reuse, since
>>   there is not a very high probability to reuse them.
>>   So, for now we do not consider PageSwapCache() pages
>>   at all.]
>>
>> So, in reuse_ksm_page() we check for 1)PageSwapCache()
>> and 2)page_stable_node(), to skip a page, which KSM
>> is currently trying to link to stable tree. Then we
>> do page_ref_freeze() to prohibit KSM to merge one more
>> page into the page, we are reusing. After that, nobody
>> can refer to the reusing page: KSM skips !PageSwapCache()
>> pages with zero refcount; and the protection against
>> of all other participants is the same as for reused
>> ordinary anon pages pte lock, page lock and mmap_sem.
>>
>> Signed-off-by: Kirill Tkhai <ktkhai@virtuozzo.com>
>> ---
>>   include/linux/ksm.h |    7 +++++++
>>   mm/ksm.c            |   25 +++++++++++++++++++++++--
>>   mm/memory.c         |   16 ++++++++++++++--
>>   3 files changed, 44 insertions(+), 4 deletions(-)
>>
>> diff --git a/include/linux/ksm.h b/include/linux/ksm.h
>> index 161e8164abcf..e48b1e453ff5 100644
>> --- a/include/linux/ksm.h
>> +++ b/include/linux/ksm.h
>> @@ -53,6 +53,8 @@ struct page *ksm_might_need_to_copy(struct page *page,
>>     void rmap_walk_ksm(struct page *page, struct rmap_walk_control *rwc);
>>   void ksm_migrate_page(struct page *newpage, struct page *oldpage);
>> +bool reuse_ksm_page(struct page *page,
>> +            struct vm_area_struct *vma, unsigned long address);
>>     #else  /* !CONFIG_KSM */
>>   @@ -86,6 +88,11 @@ static inline void rmap_walk_ksm(struct page *page,
>>   static inline void ksm_migrate_page(struct page *newpage, struct page *oldpage)
>>   {
>>   }
>> +static inline bool reuse_ksm_page(struct page *page,
>> +            struct vm_area_struct *vma, unsigned long address)
>> +{
>> +    return false;
>> +}
>>   #endif /* CONFIG_MMU */
>>   #endif /* !CONFIG_KSM */
>>   diff --git a/mm/ksm.c b/mm/ksm.c
>> index 383f961e577a..fbd14264d784 100644
>> --- a/mm/ksm.c
>> +++ b/mm/ksm.c
>> @@ -707,8 +707,9 @@ static struct page *__get_ksm_page(struct stable_node *stable_node,
>>        * case this node is no longer referenced, and should be freed;
>>        * however, it might mean that the page is under page_ref_freeze().
>>        * The __remove_mapping() case is easy, again the node is now stale;
>> -     * but if page is swapcache in migrate_page_move_mapping(), it might
>> -     * still be our page, in which case it's essential to keep the node.
>> +     * the same is in reuse_ksm_page() case; but if page is swapcache
>> +     * in migrate_page_move_mapping(), it might still be our page,
>> +     * in which case it's essential to keep the node.
>>        */
>>       while (!get_page_unless_zero(page)) {
>>           /*
>> @@ -2666,6 +2667,26 @@ void rmap_walk_ksm(struct page *page, struct rmap_walk_control *rwc)
>>           goto again;
>>   }
>>   +bool reuse_ksm_page(struct page *page,
>> +            struct vm_area_struct *vma,
>> +            unsigned long address)
>> +{
>> +    VM_BUG_ON_PAGE(is_zero_pfn(page_to_pfn(page)), page);
>> +    VM_BUG_ON_PAGE(!page_mapped(page), page);
>> +    VM_BUG_ON_PAGE(!PageLocked(page), page);
>> +
>> +    if (PageSwapCache(page) || !page_stable_node(page))
>> +        return false;
>> +    /* Prohibit parallel get_ksm_page() */
>> +    if (!page_ref_freeze(page, 1))
>> +        return false;
>> +
>> +    page_move_anon_rmap(page, vma);
> 
> Once the mapping is changed, it is not KSM mapping anymore. It looks later get_ksm_page() would always fail on this page. Is this expected?

Yes, this is the thing that the patch makes. Let's look at the actions,
we have without the patch, when there is a writing to an only-pte-mapped
KSM page.

We enter to do_wp_page() with page_count() == 1, since KSM page is mapped
in only pte (and we do not get extra reference to a page, when we add it
to KSM stable tree). Then:

  do_wp_page()
    get_page(vmf->page) <- page_count() is 2
    wp_page_copy()
      ..
      cow_user_page() /* Copy user page to a new one */
      ..
      put_page(vmf->page) <- page_count() is 1
      put_page(vmf->page) <- page_count() is 0

Second put_page() frees the page (and also zeroes page->mapping),
and since that it's not a PageKsm() page anymore. Further
__get_ksm_page() calls will fail on this page (since the mapping
was zeroed), and its node will be unlinked from ksm stable tree:

__get_ksm_page()
{
	/* page->mapping == NULL, expected_mapping != NULL */
	if (READ_ONCE(page->mapping) != expected_mapping)
		goto stale;
	.......
stale:
	remove_node_from_stable_tree(stable_node);
}


The patch optimizes do_wp_page(), and makes it to avoid the copying
(like we have for ordinary anon pages). Since KSM page is freed anyway,
after we dropped the last reference to it; we reuse it instead of this.
So, the thing will now work in this way:

do_wp_page()
  lock_page(vmf->page)
  reuse_ksm_page()
    check PageSwapCache() and page_stable_node()
    page_ref_freeze(page, 1) <- Freeze the page to make parallel
                                __get_ksm_page() (if any) waiting
    page_move_anon_rmap()    <- Write new mapping, so __get_ksm_page()
                                sees this is not a KSM page anymore,
                                and it removes stable node.

So, the result is the same, but after the patch we achieve it faster :)

Also, note, that in the most probably case, do_wp_page() does not cross
with __get_ksm_page() (the race window is very small; __get_ksm_page()
is spinning, only when reuse_ksm_page() is between page_ref_freeze()
and page_move_anon_rmap(), which are on neighboring lines).

So, this is the idea. Please, let me know in case of something is unclear
for you.

Kirill
