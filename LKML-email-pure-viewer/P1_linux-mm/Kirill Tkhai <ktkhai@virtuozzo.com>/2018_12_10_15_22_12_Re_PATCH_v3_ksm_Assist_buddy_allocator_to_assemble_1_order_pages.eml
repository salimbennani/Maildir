Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 11 Dec 2018 08:38:45 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 2F530580380;
	Mon, 10 Dec 2018 07:28:46 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 10 Dec 2018 07:28:45 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Ax81CPBNosYRQ4SsHiUIl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KPj5osbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Xymp4aV2Rx/ykC?=
 =?us-ascii?q?oJKj43/n/ZisJzgqxUrh2uqB5jzIDbe4GVLPhzc7jBfd4YX2dNQtpdWiJBD466?=
 =?us-ascii?q?coABD/ABPeFdr4TlolUOrAG+BQioBOPr1zRGmHz23a0g3OQgDArL2w8gH84NsH?=
 =?us-ascii?q?TUttr1NbwfUf60zKnS0TXDcvRW2Db86YjPaBwuvfaMXbdpfMfX1EIhFBvFg02O?=
 =?us-ascii?q?pYD5Oz6ZzPkBvmaF4+Z6SO6iiHIrpxtwrzWt3ssgl4rEi4IPxlza+yh13Zw5Kc?=
 =?us-ascii?q?O3RUJne9KpEptduieHPIVsWMwiWXtnuCMix70Gp5G7eC8KxYw5xx7QdfOHaZKE?=
 =?us-ascii?q?4hH9W+aLJzd3mnZldKi4hxao/kis0uz8Vs+q31ZWtidJjMXAu3QX2xDO5MWLVO?=
 =?us-ascii?q?Fx8lqi1DqTzQze6+NJLVgxlaXBKp4hxrAwloAUsUTGBiL2nET2jKmLdkQr4+So?=
 =?us-ascii?q?6ProYq/gppCCM494kwb+M6oomsOhG+Q1KRYOX2eF9uSmzrHj/lP2QK9MjvIolq?=
 =?us-ascii?q?nVqpfaJd4UpqKhGQ9azp4j6wqjDzehyNkYmXgHLFFbdx6dgInpJkrDIPT5Dfe5?=
 =?us-ascii?q?nlStny1nx/HAPr39HJrNKmLPn6vmfbZ480Rc0hY8zchD55JIDbEMOPLzVVXwtN?=
 =?us-ascii?q?zEFBA5NBa4w+b6CNpn0IMeVnmCAquYMKPUrF+J6fgjI+iKZI8Jpjn9L+Ip6OLp?=
 =?us-ascii?q?jX88gVUdZ7Wm3YMLaHCkGfRrO0eZYX3yjdsbEmcKuQw+TOrtiFCZVT5TZnCyX7?=
 =?us-ascii?q?8z5z0hCYKmC5vDSZ6pgLCbwCi7GZhWbHhcCl+QCXfoa5mEW/AUZS2IOc9hkjsE?=
 =?us-ascii?q?Vbu7R487zx6uthT3y75mLurS5y0Zuojv1Nlz5+3Pix4y8SZ4ANia02GIV2t0hH?=
 =?us-ascii?q?8HRycq3KBjpkxw0lSD3rJ+g/BCEdxT5ulGUgE1NZPHy+x6CtbyWh/Of9uTSVam?=
 =?us-ascii?q?RMmmDi81Tt4r39AOZEN9Ec24jh/fxyqqH6MVl7uTCZMp6K3cwWb+K9x9y3nc0q?=
 =?us-ascii?q?khlEcpQs1IOW2iha5/8gzTCpXNk0WYkaaqaKsd0DTM9GeF0WqBokVYXBRsXqXC?=
 =?us-ascii?q?WHAVflHWosjh5kPeU7+uDqwqPRZbxs6cNKRGcN3pgk9ARPf4JtveZXm8m2OxBR?=
 =?us-ascii?q?aO27ONY5Dme2Qb3CXBFkcElxof8mqBNQg7Hi2huX7RDCRyFVLzZEPh6fV+qHK+?=
 =?us-ascii?q?Tk8z0wGKb01g26Cp+hIPgvycUfcT3rMCuCcusDh0GFe939TLC9uPvQZhfaNcYc?=
 =?us-ascii?q?8j71dDz27Wqwt9Ppm4JaB4mlEeaxh3v1/p1xhvEIpAldYlrXw0wwtyM66Xy05B?=
 =?us-ascii?q?eC6C0pD2Ob3XLXfy8Qura67X3FHezdmX9r0O6PQ+t1XsogWpGlA+/HVg1tlfy2?=
 =?us-ascii?q?Gc6YnSDAoOTZLxVV469hhnp73AfiYx/YLV1X12PqmyvT/PwNYpBOojyha9cNZT?=
 =?us-ascii?q?KqKEFAnuE8IEA8iiMvAlm1+sbhgcJuBd6LY0P9+6d/uBwKOrJudgky68gmRd/Y?=
 =?us-ascii?q?991ViA9yxiRe7S3pYJ2u2X0RGDVzjhklihqMf3mYZfaDEWH2q/zzXkBYFLaq1z?=
 =?us-ascii?q?e4YLFXmhI8mtytpigJ7tXmZS9ES/CFMexM+pZR2SYkT93A1Rz0gWoWarmTClzz?=
 =?us-ascii?q?xyiDwpqquf3CrTw+XtbhYHO2hLRHV8glfoO4S7k9caXE2wZQgziBSl/Vr6x7Rc?=
 =?us-ascii?q?pKlnLWncW11Ifyv1L2FlSKewraCNY81M6JMptyVYTuK8bEueSr78pRsaziziE3?=
 =?us-ascii?q?FfxDA9azGlpJH5kwZmh2KaKXZ5tGDZdt1oxRfD+NzcQuZc3zocSyl/kzXXBFm8?=
 =?us-ascii?q?P9+y8NWQlpfDtP2+Vm27Wp1Sdynr0Z2PtC+h6WJ2Bh2/mui5msf7HggizS/7y9?=
 =?us-ascii?q?5qWD3LrBnmY4nnzaS6Mf99cUluC1/x8M56GoB4kosti5Acw3kahpOJ/XUZlWf/?=
 =?us-ascii?q?K8lU2aX7bHAVXz4E38bV4BT52E1kNn+JwoP5VnaHzcd7adi1fHgW2j4j4MBQE6?=
 =?us-ascii?q?ib8qZEnSRur1q8rALRZ+V9nzgHxfsv7n4an/8GuA43wiqBBbASGFFSPTbwmBSQ?=
 =?us-ascii?q?89C+sKJXaX6zcbi30Upyh9GgA6uEogFBQ3b5YZYiEDR07sV+NlLMzXLy5pvleN?=
 =?us-ascii?q?nWcdIcqBmUnw3cgOhSLZI7juAKijZ/OWLhoX0lzPY2ggd00pG9uIiHNn9h/Kak?=
 =?us-ascii?q?AhNDMj31ZsUT+izijKpEn8aW2ZyvEYtlGjkRQJToSveoGioItfv7LwaODCE8qn?=
 =?us-ascii?q?CDFLrdBwCf7Vlpr2nVH5C3LX2XJ2QZzdZ/RBmbPkNfmxsZXDE7np4/CwCry9bt?=
 =?us-ascii?q?cEZ/5jAN+FH4rgFAxf5vNxn6Sm3fvhunai8oSJiDKxpb9gFD50DIMcyH8+J8BS?=
 =?us-ascii?q?dY8oe6rAyKLGybaB9FDWUIWkyCGlDiMaOi5djG8+iEGOW+K+HCbqmJqexbT/2I?=
 =?us-ascii?q?346g0pN6/zaQMcWCJnliAOM62kpAXnB5Gt7VmzYVSywQmCLCcdSbpAqn+iBsqs?=
 =?us-ascii?q?C/8fLrWB/g5IeVCrtSN8lv9A6ygauZK+GQgyN5Iy5C1pwQ3X/I1KQf3FkKhi50?=
 =?us-ascii?q?ajmiCq4AujDNTa7Knq9XDgUWaydyNMtO8qI90RNBOc/ditPpyLF4iuQ5BEtCVV?=
 =?us-ascii?q?zkgsupf9AFI3mhNFPbA0aGLKiGJTzOw83tfaywU6FfjOVKuB22ojubF07jPjKe?=
 =?us-ascii?q?lzjmTRyvMOdMjD2FMxxaoo2ybhFtCW37RtL8dhK7KMN3jSExwbAshnLFL2gcMT?=
 =?us-ascii?q?19c0NLtrKR7CNYje95G2xO9XdlKeiEmyCE7+jXMJoWsP1rAjhqmOJe+ng117xV?=
 =?us-ascii?q?7CQXDMByzQLUosRjvBmDlfOTzTwvBBNNsjNjgIONoFUnN6LE8JVJRXfD+lQK92?=
 =?us-ascii?q?rGWDoQoN4wKdz1uqRUguTMlKvyYGNB79HU9Mo0GcnONN+AImgmdxHuHWiHX0M+?=
 =?us-ascii?q?UTe3ODSH1ARmm/aI+yjNow=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0CFAADuhQ5ch0O0hNFjHAECBAEIBAGBV?=
 =?us-ascii?q?AUBDAGDayeYIoFgLRSSDYUwFIFfLBMBh20iNgcNAQMBAQEBAQECARMBAQEIDQk?=
 =?us-ascii?q?IKS+CNiKCZQECAwECdgYJAQEKDgouA1QGDQYCAQEBgxyCAgQBpwSKIIwhF4FAP?=
 =?us-ascii?q?4E4gjYHLoRphXMCiS+GVDRUhFeLEwmKQ4cGHoFchReDA1txhXuEUpYrCYF+Mxo?=
 =?us-ascii?q?IGxWDJ4ImAReOIDwBMoEFAQGMSQEB?=
X-IPAS-Result: =?us-ascii?q?A0CFAADuhQ5ch0O0hNFjHAECBAEIBAGBVAUBDAGDayeYIoF?=
 =?us-ascii?q?gLRSSDYUwFIFfLBMBh20iNgcNAQMBAQEBAQECARMBAQEIDQkIKS+CNiKCZQECA?=
 =?us-ascii?q?wECdgYJAQEKDgouA1QGDQYCAQEBgxyCAgQBpwSKIIwhF4FAP4E4gjYHLoRphXM?=
 =?us-ascii?q?CiS+GVDRUhFeLEwmKQ4cGHoFchReDA1txhXuEUpYrCYF+MxoIGxWDJ4ImAReOI?=
 =?us-ascii?q?DwBMoEFAQGMSQEB?=
X-IronPort-AV: E=Sophos;i="5.56,338,1539673200"; 
   d="scan'208";a="55702478"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 10 Dec 2018 07:28:31 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727930AbeLJPW1 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 10 Dec 2018 10:22:27 -0500
Received: from relay.sw.ru ([185.231.240.75]:39626 "EHLO relay.sw.ru"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726607AbeLJPW1 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 10 Dec 2018 10:22:27 -0500
Received: from [172.16.25.169]
        by relay.sw.ru with esmtp (Exim 4.91)
        (envelope-from <ktkhai@virtuozzo.com>)
        id 1gWNNt-0005Nj-8m; Mon, 10 Dec 2018 18:22:13 +0300
Subject: Re: [PATCH v3] ksm: Assist buddy allocator to assemble 1-order pages
From: Kirill Tkhai <ktkhai@virtuozzo.com>
To: Andrew Morton <akpm@linux-foundation.org>
Cc: hughd@google.com, aarcange@redhat.com,
        kirill.shutemov@linux.intel.com, andriy.shevchenko@linux.intel.com,
        mhocko@suse.com, rppt@linux.vnet.ibm.com,
        imbrenda@linux.vnet.ibm.com, corbet@lwn.net,
        ndesaulniers@google.com, dave.jiang@intel.com, jglisse@redhat.com,
        jia.he@hxt-semitech.com, paulmck@linux.vnet.ibm.com,
        colin.king@canonical.com, jiang.biao2@zte.com.cn,
        linux-mm@kvack.org, linux-kernel@vger.kernel.org
References: <153995241537.4096.15189862239521235797.stgit@localhost.localdomain>
 <20181109130857.54a1f383629e771b4f3888c4@linux-foundation.org>
 <0ac6ace8-1e0a-7013-7b1f-2dbe0f35f34f@virtuozzo.com>
Message-ID: <add11fe3-c524-ec00-be25-4892e905cfcd@virtuozzo.com>
Date: Mon, 10 Dec 2018 18:22:12 +0300
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.3.1
MIME-Version: 1.0
In-Reply-To: <0ac6ace8-1e0a-7013-7b1f-2dbe0f35f34f@virtuozzo.com>
Content-Type: text/plain; charset=windows-1252
Content-Language: en-US
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Andrew, please, drop this patch.

It misses, that the caller (i.e. cmp_and_merge_page()) is not symmetrical
for page and tree_page (there is put_page(tree_page) in the caller).
We could change try_to_merge_two_pages() arguments and to pass &rmap_item,
&page, &tree_rmap_item and &tree_page from the caller, but I need time
to investigate the reason tests did not warn about this, before resending
or new iteration of patch.

Thanks,
Kirill

On 15.11.2018 17:12, Kirill Tkhai wrote:
> On 10.11.2018 0:08, Andrew Morton wrote:
>> On Fri, 19 Oct 2018 15:33:39 +0300 Kirill Tkhai <ktkhai@virtuozzo.com> wrote:
>>
>>> v3: Comment improvements.
>>> v2: Style improvements.
>>>
>>> try_to_merge_two_pages() merges two pages, one of them
>>> is a page of currently scanned mm, the second is a page
>>> with identical hash from unstable tree. Currently, we
>>> merge the page from unstable tree into the first one,
>>> and then free it.
>>>
>>> The idea of this patch is to prefer freeing that page
>>> of them, which has a free neighbour (i.e., neighbour
>>> with zero page_count()). This allows buddy allocator
>>> to assemble at least 1-order set from the freed page
>>> and its neighbour; this is a kind of cheep passive
>>> compaction.
>>>
>>> AFAIK, 1-order pages set consists of pages with PFNs
>>> [2n, 2n+1] (odd, even), so the neighbour's pfn is
>>> calculated via XOR with 1. We check the result pfn
>>> is valid and its page_count(), and prefer merging
>>> into @tree_page if neighbour's usage count is zero.
>>>
>>> There a is small difference with current behavior
>>> in case of error path. In case of the second
>>> try_to_merge_with_ksm_page() is failed, we return
>>> from try_to_merge_two_pages() with @tree_page
>>> removed from unstable tree. It does not seem to matter,
>>> but if we do not want a change at all, it's not
>>> a problem to move remove_rmap_item_from_tree() from
>>> try_to_merge_with_ksm_page() to its callers.
>>>
>>
>> Seems sensible.
>>
>>>
>>> ...
>>>
>>> --- a/mm/ksm.c
>>> +++ b/mm/ksm.c
>>> @@ -1321,6 +1321,23 @@ static struct page *try_to_merge_two_pages(struct rmap_item *rmap_item,
>>>  {
>>>  	int err;
>>>  
>>> +	if (IS_ENABLED(CONFIG_COMPACTION)) {
>>> +		unsigned long pfn;
>>> +
>>> +		/*
>>> +		 * Find neighbour of @page containing 1-order pair in buddy
>>> +		 * allocator and check whether its count is 0. If so, we
>>> +		 * consider the neighbour as a free page (this is more
>>> +		 * probable than it's freezed via page_ref_freeze()), and
>>> +		 * we try to use @tree_page as ksm page and to free @page.
>>> +		 */
>>> +		pfn = page_to_pfn(page) ^ 1;
>>> +		if (pfn_valid(pfn) && page_count(pfn_to_page(pfn)) == 0) {
>>> +			swap(rmap_item, tree_rmap_item);
>>> +			swap(page, tree_page);
>>> +		}
>>> +	}
>>> +
>>
>> A few thoughts
>>
>> - if tree_page's neighbor is unused, there was no point in doing this
>>   swapping?
> 
> You are sure, and this is the thing I analyzed from several ways before
> the submitting. There is no point for doing this swapping, but there is
> no point for not doing it too. Both of this approach are almost equal
> each other, while the "doing swapping" approach just adds less code.
> This is the only reason I prefered it.
> 
>> - if both *page and *tree_page have unused neighbors we could go
>>   further and look for an opportunity to create an order-2 page. 
>>   etcetera.  This may b excessive ;)
> 
> We may do that, there are just less probability to meet a page with
> 3 free neighbors, than with 1 free neighbor. But we can.
> 
>> - are we really sure that this optimization causes desirable results?
>>   If we always merge from one tree into the other, we maximise the
>>   opportunities for page coalescing in the long term.  But if we
>>   sometimes merge one way and sometimes merge the other way, we might
>>   end up with less higher-order page coalescing?  Or am I confusing
>>   myself?
> 
> Just the previous version was RFC, so I'm not 100% sure :) I asked for
> compaction tests in reply to v2, but it looks like we don't have them.
> I tested this by adding a counter of swapped pages on top of this patch.
> The counter grows (though, not so fast as I expected this before).
> 
> It's difficult to rate the long term coalescing, since there are many
> players, which may introduce external influence, or make page disappear
> from process (shrinker, parallel compaction, COW on ksm-ed page, thp).
> This all is not completely deterministic, there are too many input
> parameters. There is a question whether short term compaction or long
> term compaction is more important. I have no answer on this...
> 
> Kirill
> 
