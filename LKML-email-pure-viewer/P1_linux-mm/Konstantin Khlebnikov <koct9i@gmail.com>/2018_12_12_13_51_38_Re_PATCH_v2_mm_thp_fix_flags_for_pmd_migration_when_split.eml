Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 08:50:44 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 4FA6958079D;
	Wed, 12 Dec 2018 05:51:56 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga005-1.jf.intel.com with ESMTP; 12 Dec 2018 05:51:56 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AskIOvhz/Bw+DWszXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e4TKfad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWVOXshTWCJBDI2y?=
 =?us-ascii?q?bJYBAfQdMuZDt4nwpUADrQeiCQS2GO/j1iNEi33w0KYn0+ohCwbG3Ak4EtwLt3?=
 =?us-ascii?q?TUqs71NLsIXuCz0KnIzDPDZO5T1zf97IjHbAsuofeNXbJzdsrR11QkGgTGjlWX?=
 =?us-ascii?q?tYPlIzeY1uUWvmiU6upvT+Ovi2o9pw5tpTivw94hh4/UjYwW0lDJ7Tt1zJoxKN?=
 =?us-ascii?q?GiVUJ2b8CoHIFNuyyZK4d6WMIvTmNwtCok1rELvYS3cSsKxZg92hLSav2Kf5KV?=
 =?us-ascii?q?7h/nVeucJypzimh/d7KlnRmy9FCtyu3iWcmw11ZHtjRFktbSuXAXzRDT6daISu?=
 =?us-ascii?q?F7/ki/3TaDzQfT6vtLIUwslKrbLYAuwqIom5YNrUjOGjX6lFj4gaOIbEko5+ul?=
 =?us-ascii?q?5/j9brjnpJKQL4p0hRv/MqQqlMy/G+M4Mg0WUmif+OS80qDj/ELgTLVJkPI2iK?=
 =?us-ascii?q?/Zv47eJcgCoa64DQlV3Zg56xukETem38oXnWMdIFJGZh2HlY7pNE/KIPziCve/?=
 =?us-ascii?q?mVusnC9xx//aJr3hHonNLn/bnbflfLZ96FBTxBA8zNBC/J9UDrABIPTuWk7+rt?=
 =?us-ascii?q?DYDxk5MxCqzObjEtlyyoQeWWeXCK+DLKzSqUOI5v4oI+SUZI8aojf9K+Q/6P7p?=
 =?us-ascii?q?l3M5mUIdcrOv3ZsYc324GvVmI0OEYXvjmNsBEGEKvhYgQ+zuklGNTTlTZ3OqVa?=
 =?us-ascii?q?Im+j47EJ6mDZvERo21gryB2zm0EodVZmBBDFCMF3Doep6AW/cNbiKSP8BgniYF?=
 =?us-ascii?q?VbinV48uyxWuuBXmxLpgK+re4jcYuo771Nhp++3Tkgk/+iZvD8Sd1GGNTHt4nn?=
 =?us-ascii?q?kSSD80x61/pU19ylGe0al3mfBYFNpT5+9XXQc+L5LT0+t6C9XqUALbYtiJUEqm?=
 =?us-ascii?q?QsmhATwpTdI+2dkOb1x5G9WjlB/D2SWqDqQRl7yKApw0763d02LwJ8Z713bJyq?=
 =?us-ascii?q?0hg0M6TctIMG2snrR/+BTLB47Vj0WZkL6nerkG0y7T6miP12qOs1teUA5rT6rF?=
 =?us-ascii?q?W3cTZk/VrdT84kPPVLuuCbUhMgtcxs+OMKpKatv1jVpYQPfvIsjRY2W0m22oHx?=
 =?us-ascii?q?aH2quMbJb2e2UaxCjSFVILkx4N8nqcNQgxHCGho3nAAzxoDl/vZ0Ls8e9jqHK0?=
 =?us-ascii?q?VEM0zgeKb1F/2Lqx4BIamfucS/YL1LIepCghsyl0HEq639/OF9qApg9hfKJAYd?=
 =?us-ascii?q?M94FZLz37ZuxZ6Ppy6K6Bih1gecwtsskPq1hV3DJhAkMcwoHMrygpyNbyX0Fdb?=
 =?us-ascii?q?ezyE2pDwP6XdKnPu8xC3d67Wxlbe3c6M9acL9vs5pEvsvQGzGkU57nVozsNa03?=
 =?us-ascii?q?2f5pXNEgofSpbxUkcx9xhnqLDWeCg954XI1XJyNam4qCPN29UsBOE90BavY89f?=
 =?us-ascii?q?ML+YFA/1C8AbB9WuJPY2lFSzbxMEPPpd9Kg7P869c/uG2airPPtvnT68jGRH5p?=
 =?us-ascii?q?x93VyI9yZmVuHI2JMFyemC3gSbTzf8kEuhssfvlIBeZDEdAnCwyTL5C45WfKFy?=
 =?us-ascii?q?e5gECX2vI8Gu2tpxnZrtVGNG+165AFMG3tSkeR6Tb1z7wA1R2l4boX2hmSuk0T?=
 =?us-ascii?q?N0lyslobaY3CzL2+7ibgYIOnZXRGl+ilfhOYi1j9EAUEmodQQpjwal5UDhyqhf?=
 =?us-ascii?q?paR/KXTTQEhScyj3KWFiTrW/tr6Yb8FT75MotD1dUP6gblCCVr79vxwa3jvhH2?=
 =?us-ascii?q?RE3jA7dDKqupLjkxxhkm2dL3VzrHvfec5uwxfS/9jcRf9X3jobSyh0kzjXBl6g?=
 =?us-ascii?q?P9a3+dWYjYvMsue7V2i5TJ1cbTHrzZ+ctCu8/WBrAQewn/eplt3lEAg61zT219?=
 =?us-ascii?q?1rVSXOsRb9bZPn16W8MeJ7YEZoAEXw5NZ9GoF7ioEwno0f2WAGhpWJ+noKiWTz?=
 =?us-ascii?q?Ps9a2a7kbHoNWCQEw9ja4AX+3E1jL3SJx5/2V3mHw8thYcW6bX0S2i4n889KD6?=
 =?us-ascii?q?KU5qRenSRpulq4sR7RYf9lkzcYyPsu62QVj/sHuQUz1SWdHq4dHVNDMiPyjRSI?=
 =?us-ascii?q?4MuzrKFWZGapbLix21ByndGnDLGevA5cXGz1dYslHS919s9/Kk7D0GXv6oH4f9?=
 =?us-ascii?q?nddc4TthqRkxvajulaMpQxlucRhSp8OGLwpnkly+89jRxz0pC2pomHK2Nx/K2n?=
 =?us-ascii?q?Bh5ULCH6Z8QW+jv1l6ZRgt6W35yzHpVmAjgER4HnTfWsEDIPr/jnMxuOHSY4qn?=
 =?us-ascii?q?eaH7rfAACe5F1nr3LJD5CkKXWXKGMFwtVlQRmXPFZfjxwMXDUmgp45ERinxM77?=
 =?us-ascii?q?f0d8+D8R/UT0qgdWxuJrKhn/UXrfpAGyZTcvU5WfKBtW7gdf50baK8Ce7+RzHz?=
 =?us-ascii?q?1G8Z2ltgCCNmubZwFQB2ETRkOEH0zjPqWp5dTY8+mYAfe+L+LTYbqUr+xSTeyI?=
 =?us-ascii?q?xZWp0otp5DuMMsSPPn9/D/w0wEZDXHZ5G9jHlDULUSAYiyXNb8uDrhem5iJ3tt?=
 =?us-ascii?q?y/8OjsWA/35YuAFbpSMdZs+xC3m6uDNPSQhCF2KTlGzJMM2GTIxaMb3F4TjSFu?=
 =?us-ascii?q?ajasHa4BtS7LUKLfhKtXAwQHZCN0MctC97g80RVVOc7HltP10aZ1geQoC1heT1?=
 =?us-ascii?q?zuhMGoadYOI2G8L17HAEeLNLKbJTzE2c33YKW8SaFOg+VQrRG/pTGbE0r7NDSZ?=
 =?us-ascii?q?izbpTwyvMf1LjCyDIBxeuYS9fgxxBmT5UN3magO0MNlsgD0ywL00gG7KNGEGPT?=
 =?us-ascii?q?h9dUNNsqOf7SdCjvpjHGxB62JvLfOYlCaB8+nYNpEWvONrAytukeJa5XU6y71N?=
 =?us-ascii?q?4yBFRPx6gi3SrtF1rlGik+mPzCdnURVUpjZKgoKLoVttOaHD+pZcXnbE+UFF0W?=
 =?us-ascii?q?LFExkWqsF1Isfit6BZ1p7Ek6egBi1F9of3+s0HG8HSNMOBeFkhNRfjHj/XCxVN?=
 =?us-ascii?q?GT2sPn2OhmRSlfiT8jueqZ1s+cuko4YHVrIODA99LfgdEEkwWYVaeJo=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A8AADOERFch0O0hNFjHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGCXYEOJ4N7g3uEHowSUAEBBoE1FIkNA44vFIFfLBMBgheFJyI0CQ0BAwE?=
 =?us-ascii?q?BAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmEBAQEBAgEBAiAdARsQCgMBAwEBCQEBB?=
 =?us-ascii?q?QULDQICJgICAx4BAREBBQEcEAkFgxyBaQEDCAUIBZoZPIsNgRIFAReCdwWEQAo?=
 =?us-ascii?q?ZJw1dgTcCBhJ5izGBD4EHhCOCV4ISgxyCVwKJaQaBQYUQkAYYLgmOJ4MwGIFci?=
 =?us-ascii?q?EOHJ48tigMwgSWCDnCBAYI7ghsMF4NKilY8MwEBgQMBAYx8AQE?=
X-IPAS-Result: =?us-ascii?q?A0A8AADOERFch0O0hNFjHQEBBQEHBQGBUQgBCwGCXYEOJ4N?=
 =?us-ascii?q?7g3uEHowSUAEBBoE1FIkNA44vFIFfLBMBgheFJyI0CQ0BAwEBAQEBAQIBEwEBA?=
 =?us-ascii?q?QgNCQgpIwyCNiQBgmEBAQEBAgEBAiAdARsQCgMBAwEBCQEBBQULDQICJgICAx4?=
 =?us-ascii?q?BAREBBQEcEAkFgxyBaQEDCAUIBZoZPIsNgRIFAReCdwWEQAoZJw1dgTcCBhJ5i?=
 =?us-ascii?q?zGBD4EHhCOCV4ISgxyCVwKJaQaBQYUQkAYYLgmOJ4MwGIFciEOHJ48tigMwgSW?=
 =?us-ascii?q?CDnCBAYI7ghsMF4NKilY8MwEBgQMBAYx8AQE?=
X-IronPort-AV: E=Sophos;i="5.56,344,1539673200"; 
   d="scan'208";a="57158546"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 12 Dec 2018 05:51:54 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727617AbeLLNvw (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 12 Dec 2018 08:51:52 -0500
Received: from mail-it1-f196.google.com ([209.85.166.196]:33817 "EHLO
        mail-it1-f196.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726232AbeLLNvv (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 12 Dec 2018 08:51:51 -0500
Received: by mail-it1-f196.google.com with SMTP id x124so13704997itd.1
        for <linux-kernel@vger.kernel.org>; Wed, 12 Dec 2018 05:51:50 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=eEpCoLPa3YrSbQPOUuLkkfExo2IQG3MVLYpYKqVQQqM=;
        b=a44j1xTm7+YjGmVQhZtdjl9niRXGEJI+zMU95jJC3GQmKGbT5qr9vit3NMMUnb4ybW
         ea14xlejYn5Bs/vD3Shmjl+4CoBJyYJ2p9bVmrZq/M8kCwn4fApbRqD3++mUo3cr6W4h
         sARjkfLFDoS28YPoITsKGmyeXIpjfzGjayx2y3Pby0xGmVcmN91Tsi5rcXoJ51TpVDSV
         7OlKQKoW0331ULhS2UiwAwzxPSCyS7Cnus0qCfMPV0dW+L5RUzTl/4jU0fPDbbsFGOLl
         pPNZ0iO486y0ni0FwqCD0pL5ZxqmYTQrbB3Xcz/zihlZiRHA5BiioUD6G2CbLCD4hlhN
         Me9A==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=eEpCoLPa3YrSbQPOUuLkkfExo2IQG3MVLYpYKqVQQqM=;
        b=nwal2r9DR+B7ZcpufJRhN6Bis7w66pn2pVf7M01+RCyJZ84TLNvZmKffZ8AFX9aivu
         z43fvpNzTUCaHIhU2i1LJWslOKsCi2EfEvRGKY+m/R+qplS8RYu6ZtdrcMjQRyKEfnzD
         gEyDVuKlD0SFrec/wc2RZwP1DNshT0LEajCQqLOE22cbidE5zxdt3Hipi24m03g9bqcQ
         /i1gJVbUF3fZN47XWPXbNs++9hoqttlC2jYCP0FuYwOENBwPYYUmZyZWiOCerhQCFHrY
         6Ai2DX80optIOQW6CUZ/kRH4FWS/qOvXMjHpDgyhu+s9adNyCxcFu4xuOkeEcIOpca/z
         /7/w==
X-Gm-Message-State: AA+aEWaKcwwWlIcCCuVlrdSGX0+QHHOdSe88W5koa/fMKfbD5s6R3tn1
        taIly7Kht39DBbu7/UAzj4trOi8U61xjc4FvoH4=
X-Google-Smtp-Source: AFSGD/WlNraaJDU+iXTm5iViDyyO+yy39mZAwN6litQXFGstWtT/pRP+KWKwJUbcHqKvyJRMgdoI/DB70YyeNRg1/E0=
X-Received: by 2002:a24:a08a:: with SMTP id o132mr6095554ite.1.1544622710375;
 Wed, 12 Dec 2018 05:51:50 -0800 (PST)
MIME-Version: 1.0
References: <20181211051254.16633-1-peterx@redhat.com> <1fc103f7-3164-007d-bcfd-7ad7c60bb6ec@yandex-team.ru>
 <20181212051540.GA8970@xz-x1>
In-Reply-To: <20181212051540.GA8970@xz-x1>
From: Konstantin Khlebnikov <koct9i@gmail.com>
Date: Wed, 12 Dec 2018 16:51:38 +0300
Message-ID: <CALYGNiOSrwH-JCEqsZCeCNwnyJBTy_WtpjVuq5hpo6MYX=db7Q@mail.gmail.com>
Subject: Re: [PATCH v2] mm: thp: fix flags for pmd migration when split
To: peterx@redhat.com
Cc: =?UTF-8?B?0JrQvtC90YHRgtCw0L3RgtC40L0g0KXQu9C10LHQvdC40LrQvtCy?= 
        <khlebnikov@yandex-team.ru>,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>,
        Andrea Arcangeli <aarcange@redhat.com>,
        Andrew Morton <akpm@linux-foundation.org>,
        "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>,
        Matthew Wilcox <willy@infradead.org>,
        Michal Hocko <mhocko@suse.com>, dave.jiang@intel.com,
        "Aneesh Kumar K.V" <aneesh.kumar@linux.vnet.ibm.com>,
        Souptick Joarder <jrdr.linux@gmail.com>, linux-mm@kvack.org
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Wed, Dec 12, 2018 at 8:15 AM Peter Xu <peterx@redhat.com> wrote:
>
> On Tue, Dec 11, 2018 at 11:21:44AM +0300, Konstantin Khlebnikov wrote:
> > On 11.12.2018 8:12, Peter Xu wrote:
> > > When splitting a huge migrating PMD, we'll transfer all the existing
> > > PMD bits and apply them again onto the small PTEs.  However we are
> > > fetching the bits unconditionally via pmd_soft_dirty(), pmd_write()
> > > or pmd_yound() while actually they don't make sense at all when it's
> > > a migration entry.  Fix them up by make it conditional.
> > >
> > > Note that if my understanding is correct about the problem then if
> > > without the patch there is chance to lose some of the dirty bits in
> > > the migrating pmd pages (on x86_64 we're fetching bit 11 which is part
> > > of swap offset instead of bit 2) and it could potentially corrupt the
> > > memory of an userspace program which depends on the dirty bit.
> > >
> > > CC: Andrea Arcangeli <aarcange@redhat.com>
> > > CC: Andrew Morton <akpm@linux-foundation.org>
> > > CC: "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>
> > > CC: Matthew Wilcox <willy@infradead.org>
> > > CC: Michal Hocko <mhocko@suse.com>
> > > CC: Dave Jiang <dave.jiang@intel.com>
> > > CC: "Aneesh Kumar K.V" <aneesh.kumar@linux.vnet.ibm.com>
> > > CC: Souptick Joarder <jrdr.linux@gmail.com>
> > > CC: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
> > > CC: linux-mm@kvack.org
> > > CC: linux-kernel@vger.kernel.org
> > > Signed-off-by: Peter Xu <peterx@redhat.com>
> > > ---
> > > v2:
> > > - fix it up for young/write/dirty bits too [Konstantin]
> > > ---
> > >   mm/huge_memory.c | 15 ++++++++++-----
> > >   1 file changed, 10 insertions(+), 5 deletions(-)
> > >
> > > diff --git a/mm/huge_memory.c b/mm/huge_memory.c
> > > index f2d19e4fe854..b00941b3d342 100644
> > > --- a/mm/huge_memory.c
> > > +++ b/mm/huge_memory.c
> > > @@ -2157,11 +2157,16 @@ static void __split_huge_pmd_locked(struct vm_area_struct *vma, pmd_t *pmd,
> > >             page = pmd_page(old_pmd);
> > >     VM_BUG_ON_PAGE(!page_count(page), page);
> > >     page_ref_add(page, HPAGE_PMD_NR - 1);
> > > -   if (pmd_dirty(old_pmd))
> > > -           SetPageDirty(page);
> > > -   write = pmd_write(old_pmd);
> > > -   young = pmd_young(old_pmd);
> > > -   soft_dirty = pmd_soft_dirty(old_pmd);
> > > +   if (unlikely(pmd_migration)) {
> > > +           soft_dirty = pmd_swp_soft_dirty(old_pmd);
> > > +           young = write = false;
> > > +   } else {
> > > +           if (pmd_dirty(old_pmd))
> > > +                   SetPageDirty(page);
> > > +           write = pmd_write(old_pmd);
> > > +           young = pmd_young(old_pmd);
> > > +           soft_dirty = pmd_soft_dirty(old_pmd);
> > > +   }
> >
> > Write/read-only is encoded into migration entry.
> > I suppose there should be something like this:
> >
> > --- a/mm/huge_memory.c
> > +++ b/mm/huge_memory.c
> > @@ -2151,16 +2151,21 @@ static void __split_huge_pmd_locked(struct vm_area_struct *vma, pmd_t *pmd,
> >
> >                 entry = pmd_to_swp_entry(old_pmd);
> >                 page = pfn_to_page(swp_offset(entry));
> > +               write = is_write_migration_entry(entry);
> > +               young = false;
> > +               soft_dirty = pmd_swp_soft_dirty(old_pmd);
> >         } else
> >  #endif
> > +       {
> >                 page = pmd_page(old_pmd);
> > +               if (pmd_dirty(old_pmd))
> > +                       SetPageDirty(page);
> > +               write = pmd_write(old_pmd);
> > +               young = pmd_young(old_pmd);
> > +               soft_dirty = pmd_soft_dirty(old_pmd);
> > +       }
> >         VM_BUG_ON_PAGE(!page_count(page), page);
> >         page_ref_add(page, HPAGE_PMD_NR - 1);
> > -       if (pmd_dirty(old_pmd))
> > -               SetPageDirty(page);
> > -       write = pmd_write(old_pmd);
> > -       young = pmd_young(old_pmd);
> > -       soft_dirty = pmd_soft_dirty(old_pmd);
> >
> >         /*
> >          * Withdraw the table only after we mark the pmd entry invalid.
> >
>
> Oops yes, I missed the write bit.  Thanks for pointing it out.
>
> Should I repost with your authorship and your sign-off?

Feel free to use this piece for your own patch.

> Or even I'll
> consider to directly drop the CONFIG_ARCH_ENABLE_THP_MIGRATION if with
> that since I don't see much gain to keep it:

Yep, this ifdef could be removed.
Without CONFIG_ARCH_ENABLE_THP_MIGRATION
is_pmd_migration_entry() is constant 0 so compiler should eliminate "if" branch.

>
> diff --git a/mm/huge_memory.c b/mm/huge_memory.c
> index f2d19e4fe854..aebade83cec9 100644
> --- a/mm/huge_memory.c
> +++ b/mm/huge_memory.c
> @@ -2145,23 +2145,25 @@ static void __split_huge_pmd_locked(struct vm_area_struct *vma, pmd_t *pmd,
>          */
>         old_pmd = pmdp_invalidate(vma, haddr, pmd);
>
> -#ifdef CONFIG_ARCH_ENABLE_THP_MIGRATION
>         pmd_migration = is_pmd_migration_entry(old_pmd);
> -       if (pmd_migration) {
> +       if (unlikely(pmd_migration)) {
>                 swp_entry_t entry;
>
>                 entry = pmd_to_swp_entry(old_pmd);
>                 page = pfn_to_page(swp_offset(entry));
> -       } else
> -#endif
> +               write = is_write_migration_entry(entry);
> +               young = false;
> +               soft_dirty = pmd_swp_soft_dirty(old_pmd);
> +       } else {
>                 page = pmd_page(old_pmd);
> +               if (pmd_dirty(old_pmd))
> +                       SetPageDirty(page);
> +               write = pmd_write(old_pmd);
> +               young = pmd_young(old_pmd);
> +               soft_dirty = pmd_soft_dirty(old_pmd);
> +       }
>         VM_BUG_ON_PAGE(!page_count(page), page);
>         page_ref_add(page, HPAGE_PMD_NR - 1);
> -       if (pmd_dirty(old_pmd))
> -               SetPageDirty(page);
> -       write = pmd_write(old_pmd);
> -       young = pmd_young(old_pmd);
> -       soft_dirty = pmd_soft_dirty(old_pmd);
>
>         /*
>          * Withdraw the table only after we mark the pmd entry invalid.
>
> Thanks,
>
> --
> Peter Xu
>
