Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  15 Dec 2018 13:08:22 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id CD6CF5805FC;
	Fri, 14 Dec 2018 10:11:10 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 14 Dec 2018 10:11:09 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AbEVWPhKovwLKakhPYtmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgULvn8rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZXshfSTFPDI2/?=
 =?us-ascii?q?YYUIDeUBM+lXoYbmp1sWrxazHhWgCeD1xzNUnHL6wbE23uI8Gg/GxgwgGNcOvW?=
 =?us-ascii?q?zIotXyMacdS+a1x7TJwzXedPNW2Svy6IjJchAnvPqBWr1wcdfLyUkoDQzFiE6d?=
 =?us-ascii?q?qYPgPzyP1+QNt3KX4PZnVeKqkmMqrRx6rDu3xso0lIXFmoYYxkrZ+Sh33oo5P8?=
 =?us-ascii?q?C0RU1nbdK+EZZdtTmWO5V3T888X21lvTs2xqEbtpO+YCcG1JAqywLaZvCZb4SE?=
 =?us-ascii?q?/hfuWeORLDp9in9qZbayihS0/EO90OPzTNO030xPriddktnDqHQN1xvL58iZRf?=
 =?us-ascii?q?ty4F2h1SyM1w/N8OFEJ147la7BJ54m2L4wmYIfsUXFHiDohEX7lLGaelkg9+Sy?=
 =?us-ascii?q?9ujqbKvqqoWBO4J3lg3yKKUjl86nDeQ9KAcOXmyb+eqm1L3k+E30WLFKjvwwkq?=
 =?us-ascii?q?nEv5HWPMcbqbCjAw9TzIkj7w+zDzCo0dQeg3YHNklIeAyIj4f3IVHCOvP4Auml?=
 =?us-ascii?q?g1Sqjjhrw+rKPrr7ApXCNnTDiqvufa5h605Azwo+1dRf55NXCr4fOv7yVVLxuc?=
 =?us-ascii?q?fcDh84NQy03unmBM981oMYRWKAHKuZPLnOvl+P4+IlO/OMa5MNuDbhN/gl4Obj?=
 =?us-ascii?q?jX8jll8cYammx5wXZGq4HvR7OUqZZ3Xsj8wFEWcLuAo+UePrhEeDUT5Ve3a9Qa?=
 =?us-ascii?q?Y86isnB4KhCIfJXpqtj6CZ3CenAp1WYXhLClKLEXj2bYmEWPAMaCSUIs9miTEE?=
 =?us-ascii?q?UbmhS4k81RChrgP6yrxnLvbK9S0cr57syN915+jLnxEo6TN0F9id032KT2xshG?=
 =?us-ascii?q?wIXD823Kd8oUBn0FeMy6p4judcFdxS4fNJTwg7OYTdz+x8F9D9RAbBcs2VR1ah?=
 =?us-ascii?q?R9WsGSsxQc4pw98Sf0Z9HM2vjhPZ0CqsGbMVk72LC4Yy8qLTxHXxI8d9y3Db1K?=
 =?us-ascii?q?gulVUmQ81PNXG4ia577QTcG4nJk0CBnaawaascxDLN9HuEzWeWoU5XShBwXrvf?=
 =?us-ascii?q?UXAffETWq8/56V3ET7OpDbQnMQ5BycqZJ6tOa93pi0hGRfj5NNTfZWKxh3m/BR?=
 =?us-ascii?q?KSyryQa4rqfn0X3D/BB0gcjwAT4XGGOBAjCSi7vWLREiZiFVL1bEPq6ulxtnW7?=
 =?us-ascii?q?Q1QwzwGLaU1hyrW09gQUhfyaV/McwLYEtD09pDVzGVa3x8jWBMaYpwp9YKVcZs?=
 =?us-ascii?q?sw4EtG1WLcsAx9IpygLqB4il4CaQh3uFnu1xF2CoVGnsgnt3cqzAt0KaKF31JN?=
 =?us-ascii?q?bTKY3ZbsOrLJLmn+5gyga6nT2lvGytaZ5r8P6Ogkq1XkpAymDE4i/Gto0tZL03?=
 =?us-ascii?q?qQ/I7FDBcPXp3rVEY39B96p6/Bbyk55oPU02BsMKauvj/D3dIpGPUqyhK6c9hD?=
 =?us-ascii?q?N6OEERf4E9cGCMi2NOwqh1+pYwoEPeBP7qI7I9mqdvqG2KGxOuZgkymrjWBG4I?=
 =?us-ascii?q?B7z0KN+DBwSu/O35YZ3f6Y2hGLWCv7jFekqsr3g5xLZSkOHmqjzijpHJRRZqxu?=
 =?us-ascii?q?cokRE2ehPsq3ys94h5HzQX5Y9UevCE8c18+tZBWdcUb93QpW1UkMpXynmC24zy?=
 =?us-ascii?q?F7kj0zr6qf2jDOzPrmdBYdJmFLQ2xih0/2IYeol9AaQFSobw8xmRql5Eb23aha?=
 =?us-ascii?q?qL5kL2nOR0dFZCz2L2BkUqutubuOec9P6JU0sSpJVOSwe0yVSrn4oxECySPsA3?=
 =?us-ascii?q?NexCwndzGtopj5nQZ1iHieLHZwq3rVY9pwyg3c5NzfRP5R2CQJRC9jhDnTB1i8?=
 =?us-ascii?q?OcSp/NqOm5fCtOC+S3yuVplJfSb3yoOAsTOx5Xd2Dh2ng/CzhtrnHBA60CDh0N?=
 =?us-ascii?q?lmTyfIrBf6YoTw06S6MORnflRnBVPm6sp6HJ1+nZU0hJ0KxXcagZCV92IdkWjv?=
 =?us-ascii?q?KdVbxb7+bH0VSD4I2dHV4RLp2E1+Ln2TwYL5WW6Qws9gZ9m8f2MX1Tgx78FMCK?=
 =?us-ascii?q?eI8rNEmTF5rUa/rQLUefJ9hCsSyeMy6H4GhOEEoA8tziSeAr8IB0VZMzLjlw+U?=
 =?us-ascii?q?79+gtqVYf3igcaK/1EdlmdChDbeCohxTWXrje5ciGzNw4dt7MF7WzHLz7YTkcs?=
 =?us-ascii?q?HKbd0Prh2UjwvAj+9NJZItkfoKgDBrOGPnsn0j1u47lgdu3ZChsYiDKmVt+r+5?=
 =?us-ascii?q?AxFCOj30YcMT5i/ijaJEksmK2ICvG41rGi8XU5vwUfKoDDUSuOz8OAmUFz08rm?=
 =?us-ascii?q?qbFaDbHQ+C80pmq3PPE5a2N3CYPnUZzNNiRAWDK0xbmgwbQDI6npshHACw2MPh?=
 =?us-ascii?q?aFt55iwW5lPgqBtD0OdoOAfkUmvFuAekcDQ0SIWcLBpL6AFN/VzVPNea7uJyGS?=
 =?us-ascii?q?FY45KgoBaMKmydewRHE2UJVlaYCFDkO7mk/cPA/PSABuqiM/vOZq2DqOxZV/eV?=
 =?us-ascii?q?3JKvz5Fp/zCWOsWUOXliCfI711FHXXB4HcTZhjoORzYWlyLLc86UuhO89jdroc?=
 =?us-ascii?q?C49fThQBjv6peXC7tOLdVv/Ai7gaedOO6RhyZ5KjdY2okPxX/Sz7gf00Adiztz?=
 =?us-ascii?q?dzm2CrkAsS/NTKTNmq5YFRIbaiVzNNdW4KI4xAVCJcnbitbt3L5ikvE1E0tFVU?=
 =?us-ascii?q?Dmmsyxf8MKPnqyNEnZC0eLLriGITzLztrzYaO9T71QkepVuwexuTadD0/sIDCD?=
 =?us-ascii?q?myP1WBCoNOFGlDubMwBGuIGhbhZtDnDuTM7nah2+KtN4kSc6zqE0hnzUM24RKj?=
 =?us-ascii?q?x8c0JLrr2N4iJUmPR/G2pd7nV7KemIgTqW7+7dKpwOq/tkHjx0l/5G4HQ907ZU?=
 =?us-ascii?q?7DtLRPpwmCvTqN5hu1CnkumVxTphXxpDsTJLhIONvUV/NqTV7JhAWXDY/B0T6W?=
 =?us-ascii?q?WcEQgFp9xgCo6nh6cFztnJibK2LTJq8Mzd9shaANLbe+ydN390Cx3sETicIxYe?=
 =?us-ascii?q?TTWrNGeX00NAivab8FWaq5E7rt7nn59YGewTb0A8Cv5PUhctJ9cFOpoiG2p8yb?=
 =?us-ascii?q?M=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0APAADA8RNch0O0hNFlHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgTCCOyeMFYt4UAEBBoFJiQ4Dbo1EgXEUAQEYEwGHRyI0CQ0BAwE?=
 =?us-ascii?q?BAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmIDAwECJAsBDQEbHQEDAgkBAQVLAyARA?=
 =?us-ascii?q?QUBHBkFgxyBaAEDCA0BBJpaPIwLFgUBF4J3BYQ6ChknDV2BNwIGEodrgyWBHBd?=
 =?us-ascii?q?4gQeJcYUQAokeGgqBdIUUUY99CZFPI4lzh18smQ4GAgkHDyGBJYIOTSMVgyeCG?=
 =?us-ascii?q?wwXg0qKdB8ygQUBAY0uAQE?=
X-IPAS-Result: =?us-ascii?q?A0APAADA8RNch0O0hNFlHAEBAQQBAQcEAQGBUQcBAQsBgTC?=
 =?us-ascii?q?COyeMFYt4UAEBBoFJiQ4Dbo1EgXEUAQEYEwGHRyI0CQ0BAwEBAQEBAQIBEwEBA?=
 =?us-ascii?q?QgNCQgpIwyCNiQBgmIDAwECJAsBDQEbHQEDAgkBAQVLAyARAQUBHBkFgxyBaAE?=
 =?us-ascii?q?DCA0BBJpaPIwLFgUBF4J3BYQ6ChknDV2BNwIGEodrgyWBHBd4gQeJcYUQAokeG?=
 =?us-ascii?q?gqBdIUUUY99CZFPI4lzh18smQ4GAgkHDyGBJYIOTSMVgyeCGwwXg0qKdB8ygQU?=
 =?us-ascii?q?BAY0uAQE?=
X-IronPort-AV: E=Sophos;i="5.56,353,1539673200"; 
   d="scan'208";a="55951603"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 14 Dec 2018 10:11:08 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729619AbeLNSIF (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 14 Dec 2018 13:08:05 -0500
Received: from mail-pf1-f195.google.com ([209.85.210.195]:41698 "EHLO
        mail-pf1-f195.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1730512AbeLNSHu (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 14 Dec 2018 13:07:50 -0500
Received: by mail-pf1-f195.google.com with SMTP id b7so3185864pfi.8
        for <linux-kernel@vger.kernel.org>; Fri, 14 Dec 2018 10:07:50 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding;
        bh=31kslWA2pzzsHiz8Y5tC9Fd+SHDoREs2MeMPfRmzSCw=;
        b=ravbIwCCdmKf4HxtAd0LBlD5fBNIcfvIVHABcxIopOo4LAyjDT/1svBMs2w8eK1Nd0
         SXJ2E39boVT6Ne+SuVpPWKiXXPYLmLdmgw5V2NUswhpHJ6rpxBbvCYs+c2PcvPDSQEoi
         NxQoGkpL7V4rdegdU3INlnD9GYPv09+WsJ3M6KzNlV0IPBZZUbJFyAHxDJzVg+v1TVxo
         vt3p/0jsTIvDih+ftuiWNI8to8QkMJtNjycUcSNJwi0ojQ3qGIO13wzGOLR2qx3G4Yzb
         6rcv6ciVXvHiZ4b7tj7iwvQH/+x9OfWuKTHSPWGbz4FJBzJ20kGhlhkjOWfmK+fJFXkx
         3w6g==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=31kslWA2pzzsHiz8Y5tC9Fd+SHDoREs2MeMPfRmzSCw=;
        b=M4yH7izwtu/iU2VFpTiGJ37IGiLkv/D6+tI5s/9sqltv6E6toD9tOUNFX34le/PZkw
         RyZ/7g/IRQ6LfAB4OBLiTUh8C6k9keC7H3sGp1v5fMJORSi029d5ijtocSWY95OgPAk2
         iekgz9E6zUpHvhpmgEkde8WVmFihZmzh3sL/WQXIgUGxoNjI8cNCmlu9WGewwmdWF6kD
         Bc5nmYtAEDFKTQGnVCOHHmPsnD6N7oeuLy0ZCmKwNfMg3bokCPhOyJOvKWc9QbHh3kTS
         EEXr95t2KwxBVB8B0gqbu3C+UB5V30wKI8yquFeVMbcH8qC3y4Ka7bdOgvMQhNID9cBB
         a0vw==
X-Gm-Message-State: AA+aEWZo493vNmvQMiCYgzlriVBXyd1+TfllIIq+pk7ksdf1irecYvMs
        t6kHLhK9FmuVgi+NUdygAQ4=
X-Google-Smtp-Source: AFSGD/WptKbrEs3BxathmN/kR19WDH39xE5sXtHrpcKCELKN5T/tzPlLlpfYs4rFDstZclsGpMduKw==
X-Received: by 2002:a65:47ca:: with SMTP id f10mr3686922pgs.166.1544810869674;
        Fri, 14 Dec 2018 10:07:49 -0800 (PST)
Received: from tower.thefacebook.com ([2620:10d:c090:200::5:3d97])
        by smtp.gmail.com with ESMTPSA id r2sm7180856pgo.18.2018.12.14.10.07.48
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Fri, 14 Dec 2018 10:07:49 -0800 (PST)
From: Roman Gushchin <guroan@gmail.com>
X-Google-Original-From: Roman Gushchin <guro@fb.com>
To: linux-mm@kvack.org
Cc: Alexey Dobriyan <adobriyan@gmail.com>,
        Johannes Weiner <hannes@cmpxchg.org>,
        Michal Hocko <mhocko@suse.com>,
        Vlastimil Babka <vbabka@suse.cz>, linux-kernel@vger.kernel.org,
        kernel-team@fb.com, Roman Gushchin <guro@fb.com>
Subject: [RFC 2/4] mm: separate memory allocation and actual work in alloc_vmap_area()
Date: Fri, 14 Dec 2018 10:07:18 -0800
Message-Id: <20181214180720.32040-3-guro@fb.com>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <20181214180720.32040-1-guro@fb.com>
References: <20181214180720.32040-1-guro@fb.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

alloc_vmap_area() is allocating memory for the vmap_area, and
performing the actual lookup of the vm area and vmap_area
initialization.

This prevents us from using a pre-allocated memory for the map_area
structure, which can be used in some cases to minimize the number
of required memory allocations.

Let's keep the memory allocation part in alloc_vmap_area() and
separate everything else into init_vmap_area().

Signed-off-by: Roman Gushchin <guro@fb.com>
Acked-by: Johannes Weiner <hannes@cmpxchg.org>
---
 mm/vmalloc.c | 52 +++++++++++++++++++++++++++++++++++-----------------
 1 file changed, 35 insertions(+), 17 deletions(-)

diff --git a/mm/vmalloc.c b/mm/vmalloc.c
index 24a84d584609..24c8ab28254d 100644
--- a/mm/vmalloc.c
+++ b/mm/vmalloc.c
@@ -395,16 +395,11 @@ static void purge_vmap_area_lazy(void);
 
 static BLOCKING_NOTIFIER_HEAD(vmap_notify_list);
 
-/*
- * Allocate a region of KVA of the specified size and alignment, within the
- * vstart and vend.
- */
-static struct vmap_area *alloc_vmap_area(unsigned long size,
-				unsigned long align,
-				unsigned long vstart, unsigned long vend,
-				int node, gfp_t gfp_mask)
+static int init_vmap_area(struct vmap_area *va, unsigned long size,
+			  unsigned long align, unsigned long vstart,
+			  unsigned long vend, int node, gfp_t gfp_mask)
 {
-	struct vmap_area *va;
+
 	struct rb_node *n;
 	unsigned long addr;
 	int purged = 0;
@@ -416,11 +411,6 @@ static struct vmap_area *alloc_vmap_area(unsigned long size,
 
 	might_sleep();
 
-	va = kmalloc_node(sizeof(struct vmap_area),
-			gfp_mask & GFP_RECLAIM_MASK, node);
-	if (unlikely(!va))
-		return ERR_PTR(-ENOMEM);
-
 	/*
 	 * Only scan the relevant parts containing pointers to other objects
 	 * to avoid false negatives.
@@ -512,7 +502,7 @@ static struct vmap_area *alloc_vmap_area(unsigned long size,
 	BUG_ON(va->va_start < vstart);
 	BUG_ON(va->va_end > vend);
 
-	return va;
+	return 0;
 
 overflow:
 	spin_unlock(&vmap_area_lock);
@@ -534,10 +524,38 @@ static struct vmap_area *alloc_vmap_area(unsigned long size,
 	if (!(gfp_mask & __GFP_NOWARN) && printk_ratelimit())
 		pr_warn("vmap allocation for size %lu failed: use vmalloc=<size> to increase size\n",
 			size);
-	kfree(va);
-	return ERR_PTR(-EBUSY);
+
+	return -EBUSY;
+}
+
+/*
+ * Allocate a region of KVA of the specified size and alignment, within the
+ * vstart and vend.
+ */
+static struct vmap_area *alloc_vmap_area(unsigned long size,
+					 unsigned long align,
+					 unsigned long vstart,
+					 unsigned long vend,
+					 int node, gfp_t gfp_mask)
+{
+	struct vmap_area *va;
+	int ret;
+
+	va = kmalloc_node(sizeof(struct vmap_area),
+			gfp_mask & GFP_RECLAIM_MASK, node);
+	if (unlikely(!va))
+		return ERR_PTR(-ENOMEM);
+
+	ret = init_vmap_area(va, size, align, vstart, vend, node, gfp_mask);
+	if (ret) {
+		kfree(va);
+		return ERR_PTR(ret);
+	}
+
+	return va;
 }
 
+
 int register_vmap_purge_notifier(struct notifier_block *nb)
 {
 	return blocking_notifier_chain_register(&vmap_notify_list, nb);
-- 
2.19.2

