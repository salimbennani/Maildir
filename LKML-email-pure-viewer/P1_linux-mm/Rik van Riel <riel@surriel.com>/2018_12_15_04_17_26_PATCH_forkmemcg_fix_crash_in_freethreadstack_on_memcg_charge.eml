Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  15 Dec 2018 13:11:59 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 75AF658061F;
	Fri, 14 Dec 2018 20:17:48 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga003-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 14 Dec 2018 20:17:48 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AgalzLhTN22QMWbKVO1OzPAoOidpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64YByCt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZDI2y?=
 =?us-ascii?q?b5UBAfcCM+hfoIbyu1QArQCmBQSuH+7v1j1Fi2Xq0aAgz+gtDwfL1xEgEdIUt3?=
 =?us-ascii?q?TUqc34OrsTUeC20aLI0y/Mb/VL0jnh6YjHbBQhquyLULJqcMre100vGhjejlWN?=
 =?us-ascii?q?s4zlJTKV2foJs2SB8+VgUuevhnchpgpsoTav3t8hhpfVio8R0FzI6Ct0zJgvKd?=
 =?us-ascii?q?GlS0N3fcSoHZpSui2CKYd6Xt8uT3xttSs1yLAKpZu2cDUEyJg7xRPSbuGLf5aS?=
 =?us-ascii?q?7R35UeucICl3iG5+d7+6hBu//kagyuP5W8m6zllFsDRJn9zIu30OzBPc8c6KQe?=
 =?us-ascii?q?Zn8Ei7wzaAzQXT5/lEIU8qkarbLIYswqA/lpUNq0TPBCz2l1vsjK+QaEok/vKk?=
 =?us-ascii?q?6+P9YrXpvpOcNol0hR/iMqk2hMCzHeA1PhITU2WV5+iwzqDv8E7lTLlQj/A7kL?=
 =?us-ascii?q?HVsJXAKsQaoq65DRVV0oEm6xunCzem0dIYnWQILV5cexKIkZLpO1fQL/D8FPu/?=
 =?us-ascii?q?hFqtkDF1yPDcJbDhHJrNIWbZkLv7frZy9VRcyAwtwtBb/Z5UDasBIP3rVk/rqN?=
 =?us-ascii?q?PYFgM5MxCzw+v/DNV914AeVnyVDq6WLaPfqluI5uMpI+mRa44Zojf9K/455/Hw?=
 =?us-ascii?q?iX81g0MSfa6s3ZEPcnC3AuxmI1mFYXrrmtoBEX0FvgsiTOPwj12OSz5TZ2uoUK?=
 =?us-ascii?q?I66TE2E4amDYbFRoCwj72Nxia7HptKZm9YDlCAC2vnd4KBW/0UciKdPtdhkiAY?=
 =?us-ascii?q?VbimU4Ih1xauuxHgx7pkKerU/CsYtZX42dhx5u3Tkwwy9DNuA8Sc1WGNU397nm?=
 =?us-ascii?q?cSSzAq26B/pFR3yk2f3qhgn/xYCdtT6utTXQchNZ7cyO96B8roWg3bfNeEU1Km?=
 =?us-ascii?q?QtSgATEsQdM92d4OY0BhG9q8ihDPxTalA7gQl7aTHpw77rrc32TtJ8Z603vG17?=
 =?us-ascii?q?Muj188TstLNG2pnKh/9wfICo7NkkWZkbuqdKsG0C7M8meD0XSBvEVCXAFsVqXF?=
 =?us-ascii?q?WGgVZlHKotTh+kPCU7iuBKw6PQRb186NNLFGat3zglVAX/fsJtLeb2W1m2ezAB?=
 =?us-ascii?q?aIwqiBbI7re2UbwSXcB1IIkwEV/XaaKwc+Aj2trH7ZDDxrDVjveV/j8fFiqHOn?=
 =?us-ascii?q?SU851xyFYFd/17Wr4BIVheaTS/UI3r0avicssDF0HFe739LLBNuMvQthfKNAYd?=
 =?us-ascii?q?wj5FdLz37Wtwt4Ppa4NaBtmkYecxhrv0Ppzxh3FoRAkc0trHM2zApzKbiU0E9b?=
 =?us-ascii?q?ezOfx5DwPrzXKm/9/B20b67W21fe0MuZ+6sV6fQ4rUnjsx+tFkY473pn1NxV2W?=
 =?us-ascii?q?OG5prWFAoSTY7xUkEv+hdgo7HVfCY86J3U1HF2Kqa0ryLN1MgvBOsmzRagYcxS?=
 =?us-ascii?q?MKeFFA/0Ds0bCNKiKO0sm1i1cB0EOPpe+7IzP8Ojb/GGwrKkPP58nDK6imRK+I?=
 =?us-ascii?q?B80l+W+yVgUOLJ3pYFzOue3guITDr8iFahssbqmYFLfz0SH2y/yTT6C45VfKF9?=
 =?us-ascii?q?YYELCWK2Kc2t2tp+n4LtW2Jf9FO7HVMG2dOmdgCIb1Pg2g1cz0IXrmK9mSu51j?=
 =?us-ascii?q?B7jysmrq6C0yPQ2eTicxwHN3VPRGlji1fsPIe1g8obXEiucwgmih+l6VzmyKhc?=
 =?us-ascii?q?oaR1N3PTTltQfyjqM2FiVbO9t7qDY8JV6JIkqz5XUPm6YV2BTr79oh0a0z7sHm?=
 =?us-ascii?q?dExTA7cS2qtYv9nxBglG2dK3NzpmLDec5s3Rff+MDcRflJ0zoEXiZ4kzrXBlu7?=
 =?us-ascii?q?P9Wz5tWbjZTDsuO/V2KnSJJTdzLmzYeBtCu9+G1rDgezn/G1mt37Dwc61TX32M?=
 =?us-ascii?q?VtVSXNtBz8eJXk17ymMeJ7eUllHF/95NB9Go1kkIswhZcQ1GMehpWU+3oHjGjy?=
 =?us-ascii?q?Pc9a2aL4cHoCWzoLz8TJ7wji3U1pNmiJyJ7hVnWB3sthYMG3YmAM1SI89cxKCL?=
 =?us-ascii?q?qU46ZCnSt6uVe4qQPRYf5gnjYS0/cu6Xgag/0Xtwop1CmSHrcSHUxANyz2ixuI?=
 =?us-ascii?q?98y+rLlQZGu3dLiw1Ul+ksq7ALCMvA5cQ2r5dYk4HSBr8Mp/Kl3M3Wb36oHlft?=
 =?us-ascii?q?nQcN0SugeVkxfGk+haNpYxmuAWiipgPGL3pWclxPIjjRxywZG6u5CKK3lq/KK8?=
 =?us-ascii?q?GBJZNyf6Z8UO+jH2lqZen92b34SuHpVnBzUKU4HkTfOuEDIOq/vnMxyCHyE7qn?=
 =?us-ascii?q?eeAbDfBxOQ6F96r3LTFJCmL2qYK2MezdVmWRmRPkhfgB0PUTU+n545EB2qxcP7?=
 =?us-ascii?q?fEd44DAR+kD3qh9Wxu10MBn/V3/VpB20ZTcsVJifMB1W4xlA50jPNMyR8PlzEz?=
 =?us-ascii?q?tE/pG7rwyNN2+bZxlODW4TQUyJHFTjPrio5dnd/OmUHOu+L/3SYbqQrexSTeuH?=
 =?us-ascii?q?xZWq0oF+5TaDKt2PPmV+D/08wkdCXXd5G9nAmzUSUSMXkTjBb9WcpBe69S16tc?=
 =?us-ascii?q?S/8PXtWALy6oqDEbpSMdNz+x+ohaePLfKfhCF8KTxAzJMD2WfIyKQD3F4Vkyxu?=
 =?us-ascii?q?dyeiEbUDtS7OTaLcgKxXDwQcayN8KsRI9b883hJWNM7fi9P10KN4j/EvB1dEU1?=
 =?us-ascii?q?zhht+mZcgQL26hM1PHAV6BNK6aKj3T38H3faS8RKVKg+VJrBKwoyiUEk/5MjSH?=
 =?us-ascii?q?ljnkTBSvMeBKjCGGMx1SooC9chBxCWf9SNLqcAG0MNhyjTcu2707mmvKNXIAMT?=
 =?us-ascii?q?h7a05NsryQ7SZCjvpjAWBO8nplIveCmyuC6+nYK5AWseZkAyhuluJa5mg6xKVR?=
 =?us-ascii?q?7C1eWPN1ny7SpMZ0o166iumP1iZnUB1WpzdLno2Lu0BiOaTf9pZYWHfE/AgC7W?=
 =?us-ascii?q?OfCxkRo9tlC9vvu71fy9TVlaLzLitC/MzQ/ccGG8fUL8eHYzIdNk/tGTjJHE4G?=
 =?us-ascii?q?QCStOGX3mUNQireR+2eTo5x8rYLjy7QUTboObl02Xu0TDAxfHdEGaMNtXz4gua?=
 =?us-ascii?q?WGltQJ6H74px7UEpYJ9qvbX+6fVK28YA2SiqNJMl5Rmev1?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AxAABufxRch0O0hNFkHQEBBQEHBQGBU?=
 =?us-ascii?q?wYBCwGBMII7J5gNgiGSRoR9gSQDTBQYEwGHRyI2Bw0BAwEBAQEBAQIBEwEBAQo?=
 =?us-ascii?q?LCQgpL4I2JAGCaQIkEz8GCQIrJQMMYQWDHIIBAQSmJTOKMow+F4F/jwMCizaEX?=
 =?us-ascii?q?TeQB0cJkU8jkVEBLJk1gUwBZoEhTSMVgyeCJxeOOyIygQUBAYx2AQE?=
X-IPAS-Result: =?us-ascii?q?A0AxAABufxRch0O0hNFkHQEBBQEHBQGBUwYBCwGBMII7J5g?=
 =?us-ascii?q?NgiGSRoR9gSQDTBQYEwGHRyI2Bw0BAwEBAQEBAQIBEwEBAQoLCQgpL4I2JAGCa?=
 =?us-ascii?q?QIkEz8GCQIrJQMMYQWDHIIBAQSmJTOKMow+F4F/jwMCizaEXTeQB0cJkU8jkVE?=
 =?us-ascii?q?BLJk1gUwBZoEhTSMVgyeCJxeOOyIygQUBAYx2AQE?=
X-IronPort-AV: E=Sophos;i="5.56,355,1539673200"; 
   d="scan'208";a="55286874"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 14 Dec 2018 20:17:42 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729908AbeLOERi (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 14 Dec 2018 23:17:38 -0500
Received: from shelob.surriel.com ([96.67.55.147]:38154 "EHLO
        shelob.surriel.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727965AbeLOERi (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 14 Dec 2018 23:17:38 -0500
Received: from [2001:470:1f07:12aa:6e0b:84ff:fee2:98bb] (helo=imladris.surriel.com)
        by shelob.surriel.com with esmtpsa (TLSv1.2:ECDHE-RSA-AES256-GCM-SHA384:256)
        (Exim 4.91)
        (envelope-from <riel@shelob.surriel.com>)
        id 1gY1OO-00016m-W2; Fri, 14 Dec 2018 23:17:33 -0500
Date: Fri, 14 Dec 2018 23:17:26 -0500
From: Rik van Riel <riel@surriel.com>
To: linux-kernel@vger.kernel.org
Cc: kernel-team@fb.com, linux-mm@kvack.org,
        Andrew Morton <akpm@linux-foundation.org>,
        Shakeel Butt <shakeelb@google.com>,
        Michal Hocko <mhocko@kernel.org>,
        Johannes Weiner <hannes@cmpxchg.org>,
        Tejun Heo <tj@kernel.org>, Roman Gushchin <guro@fb.com>
Subject: [PATCH] fork,memcg: fix crash in free_thread_stack on memcg charge
 fail
Message-ID: <20181214231726.7ee4843c@imladris.surriel.com>
X-Mailer: Claws Mail 3.16.0 (GTK+ 2.24.32; x86_64-redhat-linux-gnu)
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Changeset 9b6f7e163cd0 ("mm: rework memcg kernel stack accounting")
will result in fork failing if allocating a kernel stack for a task
in dup_task_struct exceeds the kernel memory allowance for that cgroup.

Unfortunately, it also results in a crash.

This is due to the code jumping to free_stack and calling free_thread_stack
when the memcg kernel stack charge fails, but without tsk->stack pointing
at the freshly allocated stack.

This in turn results in the vfree_atomic in free_thread_stack oopsing
with a backtrace like this:

#5 [ffffc900244efc88] die at ffffffff8101f0ab
 #6 [ffffc900244efcb8] do_general_protection at ffffffff8101cb86
 #7 [ffffc900244efce0] general_protection at ffffffff818ff082
    [exception RIP: llist_add_batch+7]
    RIP: ffffffff8150d487  RSP: ffffc900244efd98  RFLAGS: 00010282
    RAX: 0000000000000000  RBX: ffff88085ef55980  RCX: 0000000000000000
    RDX: ffff88085ef55980  RSI: 343834343531203a  RDI: 343834343531203a
    RBP: ffffc900244efd98   R8: 0000000000000001   R9: ffff8808578c3600
    R10: 0000000000000000  R11: 0000000000000001  R12: ffff88029f6c21c0
    R13: 0000000000000286  R14: ffff880147759b00  R15: 0000000000000000
    ORIG_RAX: ffffffffffffffff  CS: 0010  SS: 0018
 #8 [ffffc900244efda0] vfree_atomic at ffffffff811df2c7
 #9 [ffffc900244efdb8] copy_process at ffffffff81086e37
#10 [ffffc900244efe98] _do_fork at ffffffff810884e0
#11 [ffffc900244eff10] sys_vfork at ffffffff810887ff
#12 [ffffc900244eff20] do_syscall_64 at ffffffff81002a43
    RIP: 000000000049b948  RSP: 00007ffcdb307830  RFLAGS: 00000246
    RAX: ffffffffffffffda  RBX: 0000000000896030  RCX: 000000000049b948
    RDX: 0000000000000000  RSI: 00007ffcdb307790  RDI: 00000000005d7421
    RBP: 000000000067370f   R8: 00007ffcdb3077b0   R9: 000000000001ed00
    R10: 0000000000000008  R11: 0000000000000246  R12: 0000000000000040
    R13: 000000000000000f  R14: 0000000000000000  R15: 000000000088d018
    ORIG_RAX: 000000000000003a  CS: 0033  SS: 002b

The simplest fix is to assign tsk->stack right where it is allocated.

Fixes: 9b6f7e163cd0 ("mm: rework memcg kernel stack accounting")
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Shakeel Butt <shakeelb@google.com>
Cc: Michal Hocko <mhocko@kernel.org>
Cc: Johannes Weiner <hannes@cmpxchg.org>
Cc: Tejun Heo <tj@kernel.org>
Cc: Roman Gushchin <guro@fb.com>
Signed-off-by: Rik van Riel <riel@surriel.com>
---
 kernel/fork.c | 9 +++++++--
 1 file changed, 7 insertions(+), 2 deletions(-)

diff --git a/kernel/fork.c b/kernel/fork.c
index 07cddff89c7b..e2a5156bc9c3 100644
--- a/kernel/fork.c
+++ b/kernel/fork.c
@@ -240,8 +240,10 @@ static unsigned long *alloc_thread_stack_node(struct task_struct *tsk, int node)
 	 * free_thread_stack() can be called in interrupt context,
 	 * so cache the vm_struct.
 	 */
-	if (stack)
+	if (stack) {
 		tsk->stack_vm_area = find_vm_area(stack);
+		tsk->stack = stack;
+	}
 	return stack;
 #else
 	struct page *page = alloc_pages_node(node, THREADINFO_GFP,
@@ -288,7 +290,10 @@ static struct kmem_cache *thread_stack_cache;
 static unsigned long *alloc_thread_stack_node(struct task_struct *tsk,
 						  int node)
 {
-	return kmem_cache_alloc_node(thread_stack_cache, THREADINFO_GFP, node);
+	unsigned long *stack;
+	stack = kmem_cache_alloc_node(thread_stack_cache, THREADINFO_GFP, node);
+	tsk->stack = stack;
+	return stack;
 }
 
 static void free_thread_stack(struct task_struct *tsk)


-- 
All rights reversed.
