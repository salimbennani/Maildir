Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 04 Dec 2018 08:57:43 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 68B8C580375;
	Mon,  3 Dec 2018 12:35:36 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga008-1.jf.intel.com with ESMTP; 03 Dec 2018 12:35:36 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AaXFg6xPm3vt4zsZoHkIl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KPn7rsbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRshfWSxfDI2h?=
 =?us-ascii?q?bIUPFeQBMulEoIbgpVQBowC+BRGuCe701j9EmmX70bEm3+k7Dw3L2hErEdIUsH?=
 =?us-ascii?q?TTqdX4LKcdXv60zKLVzzrMdfVW2Tjg44XPaBAhoO2DXbJqfsrL1EYjDQ3EgUuR?=
 =?us-ascii?q?qY3lJTyV0OsNvnOU7+plT+2vimonpxttrTiow8chk4/EjZ8WxFDc7Sh13po5KN?=
 =?us-ascii?q?miREJmb9OoDoFcuzyZOodqWM8vQmNltD4nxrAFuZO3ZiwHxIo9yxLBdfCLbpKE?=
 =?us-ascii?q?7g/tWeuXPDx2nmhqeKiliBa36UWgyvPzVs2z0FtSsCpFncfDtmoX2xzQ9MeHUP?=
 =?us-ascii?q?198Vml2TqV0ADT8O5ELVg1lardNZEh3qY9moQPvUnHBCP6hUv7gLGMekk5+eWk?=
 =?us-ascii?q?9/7rb7Tkq5OEMo97kAD+MqAgmsylBuQ4NxADX2ya+eS6yb3i8lT1QLZUgf0slK?=
 =?us-ascii?q?nWrpTaKd0cpq+3BQ9azJwj5g2hDzepztsYh2MLLFFbdxKdiYjmJVXOLOr/Dfel?=
 =?us-ascii?q?jFSgiC1ryOzePr39HpXNKWDOkLPgfbZ+9UFQ0gUyzc1E6pJQC7EBJu/zW0DruN?=
 =?us-ascii?q?zZCB85LxK7w+L9BNph0YMeXHqFArWFP6PKrV+I+uUvLvGMZIAPuTb9N+Iq5/n0?=
 =?us-ascii?q?gX85hF8SZ6+p3ZQMZXC8H/RmJViZYHX2jtcAF2cKohQxTOjwhFKeVj5TYm64X7?=
 =?us-ascii?q?gg6TEjFIKmEYDDS5ivgLyGwii3BJ5WZmdAClCKFnflbIGEW/YKaCKPLc5tiD0E?=
 =?us-ascii?q?Vb69S4A/0RGirhP1y71iLuDM4C0XqYrj1MRp5+3UjRw97yd0D8Sa02GOVW10hH?=
 =?us-ascii?q?kHRz0t0aB7oEx9zEqD0Kdij/xZE9xT++1GUgMgOZHAyOx6Dsj4WhjdcdeRVFam?=
 =?us-ascii?q?XtKmDCkyTt0rxd8CeUJ9G9S4gRDF0CqnGLsVl72NBJwp/aPQxXnxJ8Bhy3nY0K?=
 =?us-ascii?q?ktlUUpQsxKNWe+nK5w6xDTB5LVk0Wej6ulaL4T3DDT+2uZzWqBpkdYUBVuXqXD?=
 =?us-ascii?q?WnwfYkjWrdH95k7ZS7+uCLInMhZOyMKYK6tKbMHpgktCRPv5JNveZGexkX+qBR?=
 =?us-ascii?q?mU3rOMcJbqe2IF0SrAEkcEjR4c8WyGNQckACehuHzRDDp1GFLrYkPs9/R+qXyh?=
 =?us-ascii?q?Qk81yQGKc1Nu176v9hEJgvycTusZ3qgYtyc5tzV0AFG90srKC9qBogphe7lcYd?=
 =?us-ascii?q?M94VtdyWLVrQt9PoakL6BjgF4efB96v0fv1xVxF4VBntImrHIszApuN62Y1ElN?=
 =?us-ascii?q?eC+f3ZD1IrfXMHX9/Aiza67K3VHTyMyZ+qMR5/U3tVrivBulGVE/83p6ydZV1X?=
 =?us-ascii?q?ic5pLUDAcJVZLxU0A39wV1pr3AYyk94Z/U2mNoMaWurjDC3NcpDvM/yhm8Z9df?=
 =?us-ascii?q?LL+EFAjqHswaGsiiMvAll0KobxIEJu9S8qE0Mtiid/uH3q6rIelhkCinjWRB/I?=
 =?us-ascii?q?ByzEaM+zBgRe7P2pYP2+uY0RefVzfgkFehtdj6mZpFZT4OBGW/0zXrBIlLaq10?=
 =?us-ascii?q?Y4kLE2auL9Srydpkg57iRmBX9ESkB1MAw8KpfRuSb1rg3Qxfz0gXoHqnmTemwD?=
 =?us-ascii?q?xwiT0msq2f3CnWyeT4aBUHInJLRHVljVr0IYm0jsoWXUiyYwgyiRul4133x6xa?=
 =?us-ascii?q?pKR5MmnSTl1EfynwL2F+TKSwsqCObNJI6JMtqS9XSvizYUiGSr7hpBsXyyHjEH?=
 =?us-ascii?q?FExDA4dDGqvY/1nwdgh2KeL3ZzrXzZdt92xRrE4NzcRPhR3icJRSViiDnXAES8?=
 =?us-ascii?q?MMet/dmOi5jDteW+XXq7VpJPaSnr0Z+AtCyj6GxqGxK/mOq/mt/mEQg8yiL709?=
 =?us-ascii?q?hqVSPVrBfzeIXr1qK6Mf55cUlsHlPz9816GoRmmIsqmJ4QwWQahomS/Xcfkmf8?=
 =?us-ascii?q?K9Rb1bj+bHoQXzELxdHV7RPh2E1iKHKJ2o34Wm+cwstne9m1fGcW1jgh4MBNDa?=
 =?us-ascii?q?ee9KZEkjdtolqksQLRZuBwnjIcyfst8nEWme8ItxQ2ziWBHL8SB1JXMjL2lxSH?=
 =?us-ascii?q?9N2+qKRXZGCycbm/zkZ+nNahDK2crQFYQnr2ZpAiHSpo5MVlLF3MyGHz6p3jeN?=
 =?us-ascii?q?TIcdITsRiUnw3BjudPLpIxi+EKhTFmOW/muX0lyug7jQFh3J2gvYiHLXlt87y9?=
 =?us-ascii?q?AhJCKjL1YMYT8Cn3jalChsaWw5yvHpJ5FzoQRpToSvaoEC8IufTjKgaDCzk8qn?=
 =?us-ascii?q?adGbrCEg6T8kZmr3TTE5+1M3GbPmUWzdJnRBOFPkxQnBgUXCkmnp4+Dg2qxtbu?=
 =?us-ascii?q?cEJn6TAK/FL4tgFAyuF1Nxn8T2ffoh2naiwvRZibLRpW6BxC5kjPPcyf6OJzAz?=
 =?us-ascii?q?9X/pm7oAORLWybYhxCDXsVVUycG1DjIr6u6MHA8uifG+q+NubObq+IqeBETPeI?=
 =?us-ascii?q?wpSv0oR98jaIN8WPOGRiDvIh1kpCW3B5B9rWmzEVRyMLkCLNataRpA2g9S1vss?=
 =?us-ascii?q?C/7PPrVRrv5YSRCrtSMtZv+xGsjaeALe6Qgyl5JihC1pMR3n/F07wf3F8UiyFz?=
 =?us-ascii?q?eDihC7UAtSjRTK3Onq9bFQIUayR2NMFQ9aIzwhFNOdLHitPyzrN3lOM1BExfVV?=
 =?us-ascii?q?P/msClf8gKI2CmOVPDBUaLMqmGJDLRz8H2Z6O8VaNfjOFOuxKsvjabFlfpPi6f?=
 =?us-ascii?q?mDnxSxCvLeZMgTmHPBxfvYGxaApiBXL/Q9LmdBK7NsR6jTk3wb0ym3PLOnQQMT?=
 =?us-ascii?q?l6c0NRsLKQ6TlUjel4G2xE9nBlN/WLmz6F7+nELZYbqftqDT5yl+Jf4XQ6zaNa?=
 =?us-ascii?q?7SBERPNvnivSocVjo1WnkumJ1zpmXwBCqjdNhIKXo0piPb/V+YVHWXbBr1ox6j?=
 =?us-ascii?q?C8AgoLq5NFC9njtqZa0NHJmOqnJD5c8t7858YQB8HIbsmANSxyCxfxHC/oC146?=
 =?us-ascii?q?QD/jBGjZiAQJivCZ9nSPot4lp5n9kZwBYrBeXV0xUPgdDxI2MsYFJcJIUzJsoL?=
 =?us-ascii?q?edg4Zc/3u1rBDLSINFs5HWX/SdKfrqITedy7JDYk1bkvvDMY0PO9ijiARZYV5g?=
 =?us-ascii?q?kdGPQhKIUA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AGAADAkgVch0O0hNFjGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUgUBAQELAYNrJ5orFIkOhGiJPoFzEgEBGBMBiAkiNQgNAQMBAQEBAQE?=
 =?us-ascii?q?CARMBAQEKCwkIKSMMgjYkAYJiAQIDAQIIIA8GARsdAQMCCQEBBQUYCSUDDBICD?=
 =?us-ascii?q?AEEAQUBAwEYBhMFgxyBaQEBAhUEAZpyPIwfBQEXDYJqBYI1gggKGQQKGQ1dgTc?=
 =?us-ascii?q?CBhKKboEcghaBEYMSgleIBQKJMIFvij+KHBguBwKODoEIghsjCoFRiAA2gTQLU?=
 =?us-ascii?q?IUGLI5IhgODTwYCCQcPITltAYILTSOCHYEfghsMF4NKilNAMoECAwEBIROKJgE?=
 =?us-ascii?q?B?=
X-IPAS-Result: =?us-ascii?q?A0AGAADAkgVch0O0hNFjGwEBAQEDAQEBBwMBAQGBUgUBAQE?=
 =?us-ascii?q?LAYNrJ5orFIkOhGiJPoFzEgEBGBMBiAkiNQgNAQMBAQEBAQECARMBAQEKCwkIK?=
 =?us-ascii?q?SMMgjYkAYJiAQIDAQIIIA8GARsdAQMCCQEBBQUYCSUDDBICDAEEAQUBAwEYBhM?=
 =?us-ascii?q?FgxyBaQEBAhUEAZpyPIwfBQEXDYJqBYI1gggKGQQKGQ1dgTcCBhKKboEcghaBE?=
 =?us-ascii?q?YMSgleIBQKJMIFvij+KHBguBwKODoEIghsjCoFRiAA2gTQLUIUGLI5IhgODTwY?=
 =?us-ascii?q?CCQcPITltAYILTSOCHYEfghsMF4NKilNAMoECAwEBIROKJgEB?=
X-IronPort-AV: E=Sophos;i="5.56,311,1539673200"; 
   d="scan'208";a="42566141"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 03 Dec 2018 12:35:00 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1725968AbeLCUe5 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 3 Dec 2018 15:34:57 -0500
Received: from mail-ed1-f66.google.com ([209.85.208.66]:35426 "EHLO
        mail-ed1-f66.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725913AbeLCUe5 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 3 Dec 2018 15:34:57 -0500
Received: by mail-ed1-f66.google.com with SMTP id x30so11981679edx.2
        for <linux-kernel@vger.kernel.org>; Mon, 03 Dec 2018 12:34:53 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=date:from:to:cc:subject:message-id:reply-to:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=/H+DYF/gmReZwQWsv7MKq2jl03FrcNxhmAwYZyuixkU=;
        b=TnPg6RN5cfy5w80wcwv59bMweiOq4tGasbzQXkNu9GkmIKoegjwLEpf2tx52N7dy5H
         UMHVQaigSnOutrhDMVnorqDHDMokk9to7XOkBjZmjGm+OzxU+PwLyDCdQHGjTqaSVnAT
         QwadmriflQ1HeEeV8MwCniEB2Zuq/R4isQR+Rx063HwrebgulSYVh2ZvFzuOSJG6Alds
         OVkvVo8qrkR8Zd9YtXSeCBo1zf9eIhfSyEhcSPyrRnLvzEuj7+f3tnMuW4k4JOHZD3v8
         yICoVspmNvRLEiQeMCejXysvQn2lS+iQyU+R4/Hy0MDtUYl5pCUeARyWgxBDE36S3eVp
         Efeg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:message-id:reply-to
         :references:mime-version:content-disposition:in-reply-to:user-agent;
        bh=/H+DYF/gmReZwQWsv7MKq2jl03FrcNxhmAwYZyuixkU=;
        b=PYmRhxN/hCheb4jom7nAwMpIFFUzB/OwtzUkf036WOgNR+QcrkDxAudG3oAiS3+uSz
         Kzamsh9vmj9J2sYzAtqP8BE3qmocqRN3J4uWjbmKiMldpNrWaN592RV0V8mb8Gn8fm3T
         3FQYSqGb8/gPFfK+lYLnalGJrVL8tpU1DKDU9SYcsqhYp3qHRpLINKAy+/gPdyMgxeKP
         YmL810oH+H8A3BfnT4Pf18q/y3Muog09UpH5HISnauJDSm3RDhKe8WsfVyMYWG3E3Z7a
         enCBRuljPaEgt7fWSgoc6d2El+IR5lnzir6zhhxxjbSrkWdMlrQypXwkLJkHxgdUlqz4
         FCUA==
X-Gm-Message-State: AA+aEWbew3RuhXJM4uv9SWfd4prftieamAWYGSyULbD1rBs3zvm3BgF/
        jiPlnWrPPhZjSJhouXJXQJE=
X-Google-Smtp-Source: AFSGD/UfMxjjkFgufJHTLFUR5osTp32T2jEIjfk03nV6e0WmGxTVf8gpOroW0hNLA4YxqyBIKn16Tg==
X-Received: by 2002:a17:906:45d8:: with SMTP id z24-v6mr13712720ejq.19.1543869292534;
        Mon, 03 Dec 2018 12:34:52 -0800 (PST)
Received: from localhost ([185.92.221.13])
        by smtp.gmail.com with ESMTPSA id i24sm3966217edq.0.2018.12.03.12.34.51
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Mon, 03 Dec 2018 12:34:51 -0800 (PST)
Date: Mon, 3 Dec 2018 20:34:50 +0000
From: Wei Yang <richard.weiyang@gmail.com>
To: David Hildenbrand <david@redhat.com>
Cc: linux-mm@kvack.org, linux-kernel@vger.kernel.org,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        "Rafael J. Wysocki" <rafael@kernel.org>,
        Andrew Morton <akpm@linux-foundation.org>,
        Ingo Molnar <mingo@kernel.org>,
        Pavel Tatashin <pasha.tatashin@oracle.com>,
        Oscar Salvador <osalvador@suse.com>,
        Michal Hocko <mhocko@kernel.org>,
        Wei Yang <richard.weiyang@gmail.com>
Subject: Re: [PATCH v1] drivers/base/memory.c: Use DEVICE_ATTR_RO and friends
Message-ID: <20181203203450.rjrpn2l4hpsjstfa@master>
Reply-To: Wei Yang <richard.weiyang@gmail.com>
References: <20181203111611.10633-1-david@redhat.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181203111611.10633-1-david@redhat.com>
User-Agent: NeoMutt/20170113 (1.7.2)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Mon, Dec 03, 2018 at 12:16:11PM +0100, David Hildenbrand wrote:
>Let's use the easier to read (and not mess up) variants:
>- Use DEVICE_ATTR_RO
>- Use DEVICE_ATTR_WO
>- Use DEVICE_ATTR_RW
>instead of the more generic DEVICE_ATTR() we're using right now.
>
>We have to rename most callback functions. By fixing the intendations we
>can even save some LOCs.
>
>Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
>Cc: "Rafael J. Wysocki" <rafael@kernel.org>
>Cc: Andrew Morton <akpm@linux-foundation.org>
>Cc: Ingo Molnar <mingo@kernel.org>
>Cc: Pavel Tatashin <pasha.tatashin@oracle.com>
>Cc: Oscar Salvador <osalvador@suse.com>
>Cc: Michal Hocko <mhocko@kernel.org>
>Cc: Wei Yang <richard.weiyang@gmail.com>
>Signed-off-by: David Hildenbrand <david@redhat.com>

Looks good to me.

Reviewed-by: Wei Yang <richard.weiyang@gmail.com>

>---
> drivers/base/memory.c | 79 ++++++++++++++++++++-----------------------
> 1 file changed, 36 insertions(+), 43 deletions(-)
>
>diff --git a/drivers/base/memory.c b/drivers/base/memory.c
>index 0c290f86ab20..c9c1ee564edb 100644
>--- a/drivers/base/memory.c
>+++ b/drivers/base/memory.c
>@@ -109,8 +109,8 @@ static unsigned long get_memory_block_size(void)
>  * uses.
>  */
> 
>-static ssize_t show_mem_start_phys_index(struct device *dev,
>-			struct device_attribute *attr, char *buf)
>+static ssize_t phys_index_show(struct device *dev,
>+			       struct device_attribute *attr, char *buf)
> {
> 	struct memory_block *mem = to_memory_block(dev);
> 	unsigned long phys_index;
>@@ -122,8 +122,8 @@ static ssize_t show_mem_start_phys_index(struct device *dev,
> /*
>  * Show whether the section of memory is likely to be hot-removable
>  */
>-static ssize_t show_mem_removable(struct device *dev,
>-			struct device_attribute *attr, char *buf)
>+static ssize_t removable_show(struct device *dev, struct device_attribute *attr,
>+			      char *buf)
> {
> 	unsigned long i, pfn;
> 	int ret = 1;
>@@ -146,8 +146,8 @@ static ssize_t show_mem_removable(struct device *dev,
> /*
>  * online, offline, going offline, etc.
>  */
>-static ssize_t show_mem_state(struct device *dev,
>-			struct device_attribute *attr, char *buf)
>+static ssize_t state_show(struct device *dev, struct device_attribute *attr,
>+			  char *buf)
> {
> 	struct memory_block *mem = to_memory_block(dev);
> 	ssize_t len = 0;
>@@ -286,7 +286,7 @@ static int memory_subsys_online(struct device *dev)
> 		return 0;
> 
> 	/*
>-	 * If we are called from store_mem_state(), online_type will be
>+	 * If we are called from state_store(), online_type will be
> 	 * set >= 0 Otherwise we were called from the device online
> 	 * attribute and need to set the online_type.
> 	 */
>@@ -315,9 +315,8 @@ static int memory_subsys_offline(struct device *dev)
> 	return memory_block_change_state(mem, MEM_OFFLINE, MEM_ONLINE);
> }
> 
>-static ssize_t
>-store_mem_state(struct device *dev,
>-		struct device_attribute *attr, const char *buf, size_t count)
>+static ssize_t state_store(struct device *dev, struct device_attribute *attr,
>+			   const char *buf, size_t count)
> {
> 	struct memory_block *mem = to_memory_block(dev);
> 	int ret, online_type;
>@@ -374,7 +373,7 @@ store_mem_state(struct device *dev,
>  * s.t. if I offline all of these sections I can then
>  * remove the physical device?
>  */
>-static ssize_t show_phys_device(struct device *dev,
>+static ssize_t phys_device_show(struct device *dev,
> 				struct device_attribute *attr, char *buf)
> {
> 	struct memory_block *mem = to_memory_block(dev);
>@@ -395,7 +394,7 @@ static void print_allowed_zone(char *buf, int nid, unsigned long start_pfn,
> 	}
> }
> 
>-static ssize_t show_valid_zones(struct device *dev,
>+static ssize_t valid_zones_show(struct device *dev,
> 				struct device_attribute *attr, char *buf)
> {
> 	struct memory_block *mem = to_memory_block(dev);
>@@ -435,33 +434,31 @@ static ssize_t show_valid_zones(struct device *dev,
> 
> 	return strlen(buf);
> }
>-static DEVICE_ATTR(valid_zones, 0444, show_valid_zones, NULL);
>+static DEVICE_ATTR_RO(valid_zones);
> #endif
> 
>-static DEVICE_ATTR(phys_index, 0444, show_mem_start_phys_index, NULL);
>-static DEVICE_ATTR(state, 0644, show_mem_state, store_mem_state);
>-static DEVICE_ATTR(phys_device, 0444, show_phys_device, NULL);
>-static DEVICE_ATTR(removable, 0444, show_mem_removable, NULL);
>+static DEVICE_ATTR_RO(phys_index);
>+static DEVICE_ATTR_RW(state);
>+static DEVICE_ATTR_RO(phys_device);
>+static DEVICE_ATTR_RO(removable);
> 
> /*
>  * Block size attribute stuff
>  */
>-static ssize_t
>-print_block_size(struct device *dev, struct device_attribute *attr,
>-		 char *buf)
>+static ssize_t block_size_bytes_show(struct device *dev,
>+				     struct device_attribute *attr, char *buf)
> {
> 	return sprintf(buf, "%lx\n", get_memory_block_size());
> }
> 
>-static DEVICE_ATTR(block_size_bytes, 0444, print_block_size, NULL);
>+static DEVICE_ATTR_RO(block_size_bytes);
> 
> /*
>  * Memory auto online policy.
>  */
> 
>-static ssize_t
>-show_auto_online_blocks(struct device *dev, struct device_attribute *attr,
>-			char *buf)
>+static ssize_t auto_online_blocks_show(struct device *dev,
>+				       struct device_attribute *attr, char *buf)
> {
> 	if (memhp_auto_online)
> 		return sprintf(buf, "online\n");
>@@ -469,9 +466,9 @@ show_auto_online_blocks(struct device *dev, struct device_attribute *attr,
> 		return sprintf(buf, "offline\n");
> }
> 
>-static ssize_t
>-store_auto_online_blocks(struct device *dev, struct device_attribute *attr,
>-			 const char *buf, size_t count)
>+static ssize_t auto_online_blocks_store(struct device *dev,
>+					struct device_attribute *attr,
>+					const char *buf, size_t count)
> {
> 	if (sysfs_streq(buf, "online"))
> 		memhp_auto_online = true;
>@@ -483,8 +480,7 @@ store_auto_online_blocks(struct device *dev, struct device_attribute *attr,
> 	return count;
> }
> 
>-static DEVICE_ATTR(auto_online_blocks, 0644, show_auto_online_blocks,
>-		   store_auto_online_blocks);
>+static DEVICE_ATTR_RW(auto_online_blocks);
> 
> /*
>  * Some architectures will have custom drivers to do this, and
>@@ -493,9 +489,8 @@ static DEVICE_ATTR(auto_online_blocks, 0644, show_auto_online_blocks,
>  * and will require this interface.
>  */
> #ifdef CONFIG_ARCH_MEMORY_PROBE
>-static ssize_t
>-memory_probe_store(struct device *dev, struct device_attribute *attr,
>-		   const char *buf, size_t count)
>+static ssize_t probe_store(struct device *dev, struct device_attribute *attr,
>+			   const char *buf, size_t count)
> {
> 	u64 phys_addr;
> 	int nid, ret;
>@@ -525,7 +520,7 @@ memory_probe_store(struct device *dev, struct device_attribute *attr,
> 	return ret;
> }
> 
>-static DEVICE_ATTR(probe, S_IWUSR, NULL, memory_probe_store);
>+static DEVICE_ATTR_WO(probe);
> #endif
> 
> #ifdef CONFIG_MEMORY_FAILURE
>@@ -534,10 +529,9 @@ static DEVICE_ATTR(probe, S_IWUSR, NULL, memory_probe_store);
>  */
> 
> /* Soft offline a page */
>-static ssize_t
>-store_soft_offline_page(struct device *dev,
>-			struct device_attribute *attr,
>-			const char *buf, size_t count)
>+static ssize_t soft_offline_page_store(struct device *dev,
>+				       struct device_attribute *attr,
>+				       const char *buf, size_t count)
> {
> 	int ret;
> 	u64 pfn;
>@@ -553,10 +547,9 @@ store_soft_offline_page(struct device *dev,
> }
> 
> /* Forcibly offline a page, including killing processes. */
>-static ssize_t
>-store_hard_offline_page(struct device *dev,
>-			struct device_attribute *attr,
>-			const char *buf, size_t count)
>+static ssize_t hard_offline_page_store(struct device *dev,
>+				       struct device_attribute *attr,
>+				       const char *buf, size_t count)
> {
> 	int ret;
> 	u64 pfn;
>@@ -569,8 +562,8 @@ store_hard_offline_page(struct device *dev,
> 	return ret ? ret : count;
> }
> 
>-static DEVICE_ATTR(soft_offline_page, S_IWUSR, NULL, store_soft_offline_page);
>-static DEVICE_ATTR(hard_offline_page, S_IWUSR, NULL, store_hard_offline_page);
>+static DEVICE_ATTR_WO(soft_offline_page);
>+static DEVICE_ATTR_WO(hard_offline_page);
> #endif
> 
> /*
>-- 
>2.17.2

-- 
Wei Yang
Help you, Help me
