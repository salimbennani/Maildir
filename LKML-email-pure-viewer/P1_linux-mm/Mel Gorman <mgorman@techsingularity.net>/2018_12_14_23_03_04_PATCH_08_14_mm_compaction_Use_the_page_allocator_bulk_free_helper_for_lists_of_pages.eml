Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  15 Dec 2018 13:10:58 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 0F8755805FC;
	Fri, 14 Dec 2018 15:03:28 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by fmsmga002-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 14 Dec 2018 15:03:27 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AHr/yFR2qPhYI0xFNsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segSL/XxwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJBUMhPSiJPDICy?=
 =?us-ascii?q?YYwNAOoPJuZYt4vwqkASoReiHwSgGPnixiNUinLwwKY00/4hEQbD3AE4GNwBrn?=
 =?us-ascii?q?DUp8j0OqcVS+C1ybPHzTPeZP5R3Df954/Icgokof6WW7J9atbRxlczGAPFlVWQ?=
 =?us-ascii?q?qIrlPzyI1uQJqWeb9etgVf6vimI9rQF+vCSvy94qh4LUhYwV0kjJ+TtlzIsxP9?=
 =?us-ascii?q?G0VUB2bcC+HJdNtCyWK5F6T8IgTm1wuys216cKtYO5cSQQ1pgqxxHSZ+aaf4SU?=
 =?us-ascii?q?5B/oSfyfLi1ihH1/fbKynxay/lakyu37TsS0zllKoTRfktXWtXACyQbT6s6ZRf?=
 =?us-ascii?q?t55Euh3iyP1w/L5uFFJ0A7i7bbJoY/zrIskpcfq1nPEyHolEnskaObdVko9vKp?=
 =?us-ascii?q?5unlernmo4WTN45wigHwKKQuncm/DPw8MggPWWib5Ou92KTg/ULnWrVKiOM5kq?=
 =?us-ascii?q?3AvJDdK8UboLC2AxVO34Y95BawES2m3M4bnXYZNlJFfgyIj4zzN1HJOvD4Au+z?=
 =?us-ascii?q?g06wnzdz2/DGIrrhD43JLnjCk7fuY6xx6kFByAcoydBf5pRUCqwOIf7pW0/xss?=
 =?us-ascii?q?DYAQE9MwCu3+nnD9B93JsEWW2TGq+ZLL/SsViQ6+IvOeaMZZMVtyz6K/Q/5/7u?=
 =?us-ascii?q?kGU2mVkSfaSy2ZsXaXa4HulpIkmDYHrshMsBHnkOvgYkUOPqj1iCWyZJZ3muR6?=
 =?us-ascii?q?I8+i07CIW+AIfBQYCinqaN3CS8Hp1QYGBGDUuBEXPpd4WCRvcNZzieIs5nkjwY?=
 =?us-ascii?q?S7ehT5Ut2g2ptA//07BnNPbb+jUEtZL/09h4//fclQoy9TxzDMSRyXuNQHt2nm?=
 =?us-ascii?q?4TQz823aZ/oVFyy1uZ0Kh4heBYGsJX5/9TTgg6MpvcxfRgC9/uQgLBYsuJSFG+?=
 =?us-ascii?q?T9WlGz4xSMg9w9sPY0lnHdWigQvO3y6rA78TiryKC4Y48qPa33jtOcl9z2zK27?=
 =?us-ascii?q?Umj1kjWsFPL3GphrZj9wjPAI7Ei1iWmLy0dasCxiLN9H2MzWyVvE5GVg58VqHF?=
 =?us-ascii?q?XXMaZkvSttn54kLCT7mzCbUoKAdByMiCKrdUZd3tl1lJWPDjONHGaWKrh2iwHQ?=
 =?us-ascii?q?qIxq+LbIfyZmoSxjvdB1YenwAT53mGMxM+CTmno2/FCDxuFFTvY17j8OVkqXO7?=
 =?us-ascii?q?SFM0wB+Ob0F7y7W1/RsVj+SGS/wPxrIEpDshqzJsEVah3tLWDt2ApxZhfKRce9?=
 =?us-ascii?q?89/E1L1WXDtwx5P5ygKa9ii0UacwR2uUPuyhp2Bp9BkcgssHMl0g5yJbiE31NG?=
 =?us-ascii?q?cjOSxYrwNaHPKmnu4BCvbLbb1Uva0NmI9aYA9vQ5p0/4swG0C0Ut6XNn09pS03?=
 =?us-ascii?q?uC/ZjKCAsSUZTsUkc47RR6prfaYjUj6IPQz3FjLa60sjra0dIzGOQl0gqgf8tY?=
 =?us-ascii?q?MK6cFA7yDtcWCNS0JO0rm1imdBQEPO9J+a4wPsOmceaG2aGxMOZhmjKmkXpI4I?=
 =?us-ascii?q?Rn3k2Q8Cp8T/bC34wZzPGAwguHSzD8gU+7ssD2hY9LfysSEXe4yST+Ao5eeLdy?=
 =?us-ascii?q?fYcSBWiyOcK3wshxiID3W35f8l6uHFcG2M6veRqPYF3xxwxQ1UILoXO5nSu01S?=
 =?us-ascii?q?B7kzYsrqCHxizB3/zidAYbOm5MXGRjjVbsLZK0jtwAR0iocg4pmQCh5Ub7wahb?=
 =?us-ascii?q?uat+I3PSQUdOYyj5MWViXrGsubqFZs5F8IkovjlPUOSgfVCaTabwoxkA3CP5HG?=
 =?us-ascii?q?texzc7eyuxuprjnBx6i2OdLHBto3rfYsxwwRbf5NrBRf9exDYGRS94iSXJCVi4?=
 =?us-ascii?q?JdWm4dKUl5LbuOCkS22hToFTcTXszY6YtCq0/2pqDQe9n/CynN3qCgw60S7919?=
 =?us-ascii?q?l3WiTEthf8Yo/316ukNeJrZFVnBFj568BiAIFxjpMwhI0M2XgdnpiV/mAIkWbp?=
 =?us-ascii?q?PdVbxKLxdnwNRTEQzt7R4Qjl3lBjL32Ty4L4UHWd3tVuZ92gbmwK3SI96thACL?=
 =?us-ascii?q?2I47xcgSt1vl24oBrUYfh8nTcS0+Ei6XAEjOESpAoi0D+dDasMEklCMizhjBCI?=
 =?us-ascii?q?79G4rKVKa2eja7mw1Exind+/CLGOuB1TWHH8ep06By9/8t1/ME7Q0H308ozkZN?=
 =?us-ascii?q?7QbdcJuhyViRjAifVVKIkqlvoLnidnPWP9vXs4y+80lxBu3Je6vJSZJGVp5q62?=
 =?us-ascii?q?HhlYNjjtbcMJ5j7tlbpentqR3423BZpuADILXJ/1Tf6yFDISqO/qNwKPED06t3?=
 =?us-ascii?q?eaFqDTHQ6Z6Ed6sX3PF4qnOG2QJHkc1d9iXgWSJFRDgAAIWzU3hpw5GRqvxMP/?=
 =?us-ascii?q?a0d1/CwR6kT7qhtRyeJoKh//XX3EpAqzbjc0SZ6fLAdZ7w1Y5kfVN9Ce4fx3Hy?=
 =?us-ascii?q?1C4pKhqwmNIHSBZwtUFWEJRlCEB1f7M7iu4tnA7vGYBvekIPvIe7mOsuteV/GH?=
 =?us-ascii?q?xZ+01otm/jCMNtiAP3V4Dv073FZDUm59G8jDhzoPTCkXnTrXb8GHvBe85jF3rs?=
 =?us-ascii?q?en/fTrRg3v5IiPC7hTMdl1+BC2m6CDN+GOiyZjNDZYzYgBxXvJyLgZwV4ThDti?=
 =?us-ascii?q?dzirEbQcqyHNSLjclbNQDx4ecylzLtdH77og3glRPs7Wksn61qNjgf4vFVhEVU?=
 =?us-ascii?q?btmsWoZcERJ2G9NVXHBFuENbicJD3Lxd33br24SbFKkOpUsBiwsy6BE0D/JjSD?=
 =?us-ascii?q?iyXpVxe3POFQjSGbOQZSt52nfhlxCWjsUtTmZwa/MN92iz023LI1imnLNW4aLT?=
 =?us-ascii?q?hzbUdNoqeM4iNfh/V1A3ZB4WZ9LemYhyaZ6PHVK5YMvvttByR0luRa72w7yrtV?=
 =?us-ascii?q?9i5EQvN1lTDWrt5vpVGmj+aOxiBmUBpItjZEmoaLsV9+NqXe85kTEUrDqTYM63?=
 =?us-ascii?q?iATjEv749hC9vyq+VVz/DMiqv4K3FF6d2CruUGAM2BDc+DeFUmKx/gHnaACQQC?=
 =?us-ascii?q?VzuiM0nDikddi/CU+WCRp4I7tomqnpcSHOwIHGcpH+8XXxw2VOcJJ416C3Z9ye?=
 =?us-ascii?q?aW?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0DCHwBcNhRch0O0hNFkHgEGBwaBVAYLA?=
 =?us-ascii?q?YNVBBIniGODFnuLGYIhgQ2YJy4TAYdAByI3Bg0BAwEBAQEBAQIBEwEBAQgNCQg?=
 =?us-ascii?q?pL4I2JAGCYgMDAQIkUgYJAQE+EgNUBhMFgxyCAQQBpwszGgKKD4d9hEEXgUA/g?=
 =?us-ascii?q?RGCZIsMAos2lWIJik2HAiOKGAOHN4hvkk6BeE0uCjuCbIInFxKOC0ExgQUBAY0?=
 =?us-ascii?q?+AQE?=
X-IPAS-Result: =?us-ascii?q?A0DCHwBcNhRch0O0hNFkHgEGBwaBVAYLAYNVBBIniGODFnu?=
 =?us-ascii?q?LGYIhgQ2YJy4TAYdAByI3Bg0BAwEBAQEBAQIBEwEBAQgNCQgpL4I2JAGCYgMDA?=
 =?us-ascii?q?QIkUgYJAQE+EgNUBhMFgxyCAQQBpwszGgKKD4d9hEEXgUA/gRGCZIsMAos2lWI?=
 =?us-ascii?q?Jik2HAiOKGAOHN4hvkk6BeE0uCjuCbIInFxKOC0ExgQUBAY0+AQE?=
X-IronPort-AV: E=Sophos;i="5.56,354,1539673200"; 
   d="scan'208";a="45062382"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 14 Dec 2018 15:03:22 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730792AbeLNXDU (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 14 Dec 2018 18:03:20 -0500
Received: from outbound-smtp10.blacknight.com ([46.22.139.15]:58917 "EHLO
        outbound-smtp10.blacknight.com" rhost-flags-OK-OK-OK-OK)
        by vger.kernel.org with ESMTP id S1730521AbeLNXDO (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 14 Dec 2018 18:03:14 -0500
Received: from mail.blacknight.com (pemlinmail01.blacknight.ie [81.17.254.10])
        by outbound-smtp10.blacknight.com (Postfix) with ESMTPS id C7E2D1C209F
        for <linux-kernel@vger.kernel.org>; Fri, 14 Dec 2018 23:03:12 +0000 (GMT)
Received: (qmail 31294 invoked from network); 14 Dec 2018 23:03:12 -0000
Received: from unknown (HELO stampy.163woodhaven.lan) (mgorman@techsingularity.net@[37.228.245.71])
  by 81.17.254.9 with ESMTPA; 14 Dec 2018 23:03:12 -0000
From: Mel Gorman <mgorman@techsingularity.net>
To: Linux-MM <linux-mm@kvack.org>
Cc: David Rientjes <rientjes@google.com>,
        Andrea Arcangeli <aarcange@redhat.com>,
        Linus Torvalds <torvalds@linux-foundation.org>,
        Michal Hocko <mhocko@kernel.org>, ying.huang@intel.com,
        kirill@shutemov.name, Andrew Morton <akpm@linux-foundation.org>,
        Linux List Kernel Mailing <linux-kernel@vger.kernel.org>,
        Mel Gorman <mgorman@techsingularity.net>
Subject: [PATCH 08/14] mm, compaction: Use the page allocator bulk-free helper for lists of pages
Date: Fri, 14 Dec 2018 23:03:04 +0000
Message-Id: <20181214230310.572-9-mgorman@techsingularity.net>
X-Mailer: git-send-email 2.16.4
In-Reply-To: <20181214230310.572-1-mgorman@techsingularity.net>
References: <20181214230310.572-1-mgorman@techsingularity.net>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

release_pages() is a simpler version of free_unref_page_list() but it
tracks the highest PFN for caching the restart point of the compaction
free scanner. This patch optionally tracks the highest PFN in the core
helper and converts compaction to use it.

Signed-off-by: Mel Gorman <mgorman@techsingularity.net>
---
 include/linux/gfp.h |  7 ++++++-
 mm/compaction.c     | 12 +++---------
 mm/page_alloc.c     | 10 +++++++++-
 3 files changed, 18 insertions(+), 11 deletions(-)

diff --git a/include/linux/gfp.h b/include/linux/gfp.h
index 0705164f928c..ed9a95b63374 100644
--- a/include/linux/gfp.h
+++ b/include/linux/gfp.h
@@ -543,7 +543,12 @@ void * __meminit alloc_pages_exact_nid(int nid, size_t size, gfp_t gfp_mask);
 extern void __free_pages(struct page *page, unsigned int order);
 extern void free_pages(unsigned long addr, unsigned int order);
 extern void free_unref_page(struct page *page);
-extern void free_unref_page_list(struct list_head *list);
+extern void __free_page_list(struct list_head *list, bool dropref, unsigned long *highest_pfn);
+
+static inline void free_unref_page_list(struct list_head *list)
+{
+	return __free_page_list(list, false, NULL);
+}
 
 struct page_frag_cache;
 extern void __page_frag_cache_drain(struct page *page, unsigned int count);
diff --git a/mm/compaction.c b/mm/compaction.c
index 4f51435c645a..8ba9b3b479e3 100644
--- a/mm/compaction.c
+++ b/mm/compaction.c
@@ -52,16 +52,10 @@ static inline void count_compact_events(enum vm_event_item item, long delta)
 
 static unsigned long release_freepages(struct list_head *freelist)
 {
-	struct page *page, *next;
-	unsigned long high_pfn = 0;
+	unsigned long high_pfn;
 
-	list_for_each_entry_safe(page, next, freelist, lru) {
-		unsigned long pfn = page_to_pfn(page);
-		list_del(&page->lru);
-		__free_page(page);
-		if (pfn > high_pfn)
-			high_pfn = pfn;
-	}
+	__free_page_list(freelist, true, &high_pfn);
+	INIT_LIST_HEAD(freelist);
 
 	return high_pfn;
 }
diff --git a/mm/page_alloc.c b/mm/page_alloc.c
index a6e7bfd18cde..80535cd55a92 100644
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@ -2961,18 +2961,26 @@ void free_unref_page(struct page *page)
 /*
  * Free a list of 0-order pages
  */
-void free_unref_page_list(struct list_head *list)
+void __free_page_list(struct list_head *list, bool dropref,
+				unsigned long *highest_pfn)
 {
 	struct page *page, *next;
 	unsigned long flags, pfn;
 	int batch_count = 0;
 
+	if (highest_pfn)
+		*highest_pfn = 0;
+
 	/* Prepare pages for freeing */
 	list_for_each_entry_safe(page, next, list, lru) {
+		if (dropref)
+			WARN_ON_ONCE(!put_page_testzero(page));
 		pfn = page_to_pfn(page);
 		if (!free_unref_page_prepare(page, pfn))
 			list_del(&page->lru);
 		set_page_private(page, pfn);
+		if (highest_pfn && pfn > *highest_pfn)
+			*highest_pfn = pfn;
 	}
 
 	local_irq_save(flags);
-- 
2.16.4

