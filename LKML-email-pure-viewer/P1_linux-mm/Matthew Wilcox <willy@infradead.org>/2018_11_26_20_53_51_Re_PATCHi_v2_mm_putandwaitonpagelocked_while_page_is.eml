Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 27 Nov 2018 08:41:09 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from FMSMGA003.fm.intel.com (fmsmga003.fm.intel.com [10.253.24.29])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 66048580322;
	Mon, 26 Nov 2018 12:54:10 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by FMSMGA003-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 26 Nov 2018 12:54:10 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AuUALlx/G0ByTUf9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1+MRIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CS2RPXthfWTFCDIOy?=
 =?us-ascii?q?YIQAE/cOMuRWoInmv1sDrwCzBRWwCO/z1jNEmmX70bM83u88EQ/GxgsgH9cWvX?=
 =?us-ascii?q?rTttr1KLsSUeCrw6jG0D7Mb/JW2TPh54jPfREqvPaBXLxxccrVzUkuFxjIjlSW?=
 =?us-ascii?q?qYzrJTOazPkCvHaB4OV9T+6vjHQnqw5orzWp28wihI7JhocPxVDF8yV02IM1Ks?=
 =?us-ascii?q?eiSEFne9KkEZ1Qty+dN4ZwX8gsQHlotT4kxrEavZO3ZjUGxZo5yxLFdvCKcJSE?=
 =?us-ascii?q?7gjiWeuTOTt0mXZodbGlixqv/0WtyPfwWteo3FpUtCZJj9fBu34L2hfO8MaIUO?=
 =?us-ascii?q?F98V2k2TuX1wDc9OVEIUcsmKrFJJ4u3KQwmoAQsUvdBC/2nlv5jKuMekUj4Oio?=
 =?us-ascii?q?5PzrYrTgppCCK495kh/yPrgql8ClHOg1PBYCU3KG9em/yLHv50z0TbdSgv0ziK?=
 =?us-ascii?q?bZsZTaJcoBpq6+Bg9YyoIj6xe5Dze739UUhHoHI0xfeBKBkYfpP0jCIPf2DPe5?=
 =?us-ascii?q?nVusiixmx+7JPrL/GJXBNHvDn6n7fbZ79UFczBA/zddF55JbEr0BOu78WlfttN?=
 =?us-ascii?q?zECR80Kwi0w+fkCNpjzI8fVn+PD7SdMKPTt1+I++0uL/ONZI8TpDbyNfwl6+Ty?=
 =?us-ascii?q?gn8+nF8XZbOp0ocPaHCkAvRmJF2UYXr2jdcADWcFpA0+QPbqiF2fSzFTYXmyUr?=
 =?us-ascii?q?k45jE6DoKmEIjCSpqsgLyHwCe0AJlWanpaBVCLFHfib5+EVOsUaCKOPs9hlSQJ?=
 =?us-ascii?q?VbqmS4A/zx2utwj6y7xhLurT4SAYsZPj1N5o5+zcjx0y9Dp0D9iD3GGJVW17gm?=
 =?us-ascii?q?QIRzou1qBlvUN90kuD0bR/g/FAD9NT/PNJUgA5NZLG1ex1EdLyVxnFfteITlam?=
 =?us-ascii?q?X9qnDSswTtI3398BfUJ9F8++gRDE2iqgG6UVmKCTBJwo7qLc2GD8J8VnxHbAzq?=
 =?us-ascii?q?Uhi1gmTdFJNW2pnaN/8wnTB4jUk0SWjaqqdKIc3DLT+2eH12aBoEZYUAtoW6Xf?=
 =?us-ascii?q?QX8fflfWrcj+5k7aUrChE6onPRVbxc6CMKRKbMbpgktARPvkPNTeYGexm2OrCB?=
 =?us-ascii?q?aMx7OMapfqemoH0CXcDkgEjx4c/XKcOQciASehpnrUDCZyGlL3f0Ps7e5+pWum?=
 =?us-ascii?q?QUAu0QGFcVdt17qv9R4TnvyTVfUT06kAuCcgrTV0AVm808jXC9qGuwpuYqFcbc?=
 =?us-ascii?q?kh71dA0GLTrxZ9MYC4L6B+ml4edBx6v1/v1xVyDYVAjcgqrXMwwApuM66Y10lB?=
 =?us-ascii?q?dzeZ3ZD2Nb3aMW3y/BGpa67L1VDSyteW+qET6Psmr1Xvph2mFk0n839/ydlaz2?=
 =?us-ascii?q?Oc5onWDAoVSZ/+SEI3+AZ1pr7EYigx/Zjb1WBxPqautD/C2NUpBPU+xxakftdf?=
 =?us-ascii?q?Nr6EFQDoH80bAciuNPIlm1yzYh0YO+BS8bY+P9m6ePuexK6rIOFgkSqmjGRa+o?=
 =?us-ascii?q?xyzliA9it8SuHS2ZYFzOqV3g+GVzf6kVegvdr7mYFCZTEOAGW/zTLoC5JWZq13?=
 =?us-ascii?q?ZYwLE3uhI9WrxtVigJ7gQ2RY9F+/CFwcws+mZB2SY0b73QJOz0QXoGWrljeiwD?=
 =?us-ascii?q?xwjj4msLCf3CvIw+n5cBoHO2hLRHRtjFv2IIi0icwaU1asbwQziBSl4kP6zbBB?=
 =?us-ascii?q?pKtjN2nTXVtIfy/uImBiU6u8rLqDb9RU6JM1tyVaS+C8YVGcSr7grBoWySLjH2?=
 =?us-ascii?q?1CxD8lczGmoIn2nxt/iGiFNnZ8sGLZed1sxRfY/NHcR+Re3iAFRCl7jjnbHEO8?=
 =?us-ascii?q?MMOq/dWXlpfDtP6xV2S6W51XcCnry56AtSSh6W1rBx2/g+68mtn9HQcm1i/70s?=
 =?us-ascii?q?FgVT/Uoxbkfonry6O6PPpnf0ZyA1/w8ch6GoB4koYrgJEQ2H4ahoia/HYdkGfz?=
 =?us-ascii?q?N8lb1rz6bHYXWTELxNvV6hD/2EJ/NnKJ2575VnKFz8tifda6Y3ka2iIg789QDq?=
 =?us-ascii?q?eU46dJnS90olq+sALQbuJxnjYbyfsy9nEah/sFtxYqziWYGroSB1VXPTTwlxSU?=
 =?us-ascii?q?6NCztKBXZGescbeqzkZ/k86uDKqeog5CQnb2YYktHTV/7shkNFLM0Xvz6pzred?=
 =?us-ascii?q?XKbNITsAGUnAnEj+RPNJ0xkf8KjzJ9OW3hpX0l1/I7jRt20JGmu4iHLn9h/aOj?=
 =?us-ascii?q?DR5eKz31fNgT+jD2gKZan8aW2Z2vH5p7FjUKWpvoUeynEDYIufv7MAaOFSU2qm?=
 =?us-ascii?q?2HFrrHAQ+f9EBmomrUHJ+xMHGXIGQZwc9mRBmAP0FfhAEUXDMnnp82DAyqxcrh?=
 =?us-ascii?q?cFtn6TAV/FL3thxMyudwPRnlTmjfvBuoaiszSJWHLhpZ9ARC6FnOMcCE8uJ/BS?=
 =?us-ascii?q?JY/oCirAyQLGyUfR9IAHoNWkyFAVDjI7av6cPB8+ieGuqxMf/Oba+SpuxZUveC?=
 =?us-ascii?q?3Yiv3Zd+/zaQKsWPOWFvDv082kpeRHB5Bt7WmzMVRywMkCLNacGbqQy4+i12qM?=
 =?us-ascii?q?C/7fvqVBju5YuJF7tdL9Fv9wqqjqeEMu6anDx5JipA1pMQ2X/Iz6AS3F4MhCFv?=
 =?us-ascii?q?dDmtErUAuTTOTKLKna9XAAAUazluNMtT9K882ghNOcjGitL6zLJ4j/g1C0tbWl?=
 =?us-ascii?q?zlgM2mecsKI2SlPlPdGEmLLKiGJSHMw8zve6y8VKZfjP9KuBywozqbF07jMy+H?=
 =?us-ascii?q?lznoURCvLO5NgDuaPBxYpIGybBJtBXL/Q9Lhbx2xKMV3giEuwb0omnPKMnYRMS?=
 =?us-ascii?q?R9c0NItLGf8TlUjel/G2Nf6HpoNu2Emyef7+nFJZcaq/prAiJol+1E5HQ20ada?=
 =?us-ascii?q?7CZBRPZtgivdssZuo026kumI0jdmUABBqjBOhIKKu0VtIaTY9plaVnbC8xIA9m?=
 =?us-ascii?q?GQCxUMp9t4BdzjoaFQyt7TlK3tLDdO6c7b/cwZB5ucFMXSEGcuMVLFGTXXDQ0e?=
 =?us-ascii?q?BWqrKG7fi2RSl/ad8nDTpZ8//MvCgp0LH5pSSEA1G+xSNUVhF9sSaMNoXzcggJ?=
 =?us-ascii?q?aaisAS7HazpRWXQ99V6MOUHsmOCOnifW7KxYJPYAEFlPahddwe?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AHAABrXPxbh0O0hNFcCBoBAQEBAQIBA?=
 =?us-ascii?q?QEBBwIBAQEBgVMDAQEBAQsBgmmBAieYFFABAQaBNRRmiCCJK4R3gSQDTCwLCAG?=
 =?us-ascii?q?DLIU3IjYHDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2JAGCYgECAwECNwYBATcBB?=
 =?us-ascii?q?QkBAQoYCRMSAwwFKCETBRmDAwGBdA0FCqVIgh+CdgEBBYclAwWMCRd4gQeBEYJ?=
 =?us-ascii?q?dNYMbBBiBIAKGAIsThH+PHVUJhnyKKCORCCyNF4w6DViBITMaCCgIO4JsE4FtG?=
 =?us-ascii?q?wwXhiOCO4VfHjOBBQEBiW2CTQEB?=
X-IPAS-Result: =?us-ascii?q?A0AHAABrXPxbh0O0hNFcCBoBAQEBAQIBAQEBBwIBAQEBgVM?=
 =?us-ascii?q?DAQEBAQsBgmmBAieYFFABAQaBNRRmiCCJK4R3gSQDTCwLCAGDLIU3IjYHDQEDA?=
 =?us-ascii?q?QEBAQEBAgETAQEBCA0JCCkjDII2JAGCYgECAwECNwYBATcBBQkBAQoYCRMSAww?=
 =?us-ascii?q?FKCETBRmDAwGBdA0FCqVIgh+CdgEBBYclAwWMCRd4gQeBEYJdNYMbBBiBIAKGA?=
 =?us-ascii?q?IsThH+PHVUJhnyKKCORCCyNF4w6DViBITMaCCgIO4JsE4FtGwwXhiOCO4VfHjO?=
 =?us-ascii?q?BBQEBiW2CTQEB?=
X-IronPort-AV: E=Sophos;i="5.56,283,1539673200"; 
   d="scan'208";a="54393385"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 26 Nov 2018 12:54:08 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727294AbeK0Ht0 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 27 Nov 2018 02:49:26 -0500
Received: from bombadil.infradead.org ([198.137.202.133]:59546 "EHLO
        bombadil.infradead.org" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727135AbeK0HtZ (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 27 Nov 2018 02:49:25 -0500
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
        d=infradead.org; s=bombadil.20170209; h=In-Reply-To:Content-Type:MIME-Version
        :References:Message-ID:Subject:Cc:To:From:Date:Sender:Reply-To:
        Content-Transfer-Encoding:Content-ID:Content-Description:Resent-Date:
        Resent-From:Resent-Sender:Resent-To:Resent-Cc:Resent-Message-ID:List-Id:
        List-Help:List-Unsubscribe:List-Subscribe:List-Post:List-Owner:List-Archive;
         bh=5LUyd42dpNT/5gZY8vCC36Z8cyNS6CzPcoPkp7P6+Oo=; b=OVZZWvTxYlGCiRyVKKTEETTUM
        pKzanPotdwVPsXSrsR7IJVSgNWQQ3gW3DFt5pWa24yUBM31eX63QGetL0dogskMCCw+MYFY75KeUO
        oymnYj5DHnGAaCZFlWUd4HQJQ/Sozeq5JQ1+jBB+HFp9oX0fXov245/R2pqaHTxeiAHrHrv0zNmdP
        XPxdWQRZH/IzNUNSVyg1Gkpfsl6PLD0XZF/qinY6zqFAK+X3MB85vSMreHgRoJJZqF+gBMO8bqApG
        IbjyR4uPoYh6SPnJ2Q06LQh4Ae/+fAsO0dZtqQupEOee5s8U5qdvC95/fL6HZhwlZRU2QOJu1OxmS
        LuZuh4Ymw==;
Received: from willy by bombadil.infradead.org with local (Exim 4.90_1 #2 (Red Hat Linux))
        id 1gRNt9-0005a1-U5; Mon, 26 Nov 2018 20:53:51 +0000
Date: Mon, 26 Nov 2018 12:53:51 -0800
From: Matthew Wilcox <willy@infradead.org>
To: Hugh Dickins <hughd@google.com>
Cc: Linus Torvalds <torvalds@linux-foundation.org>,
        Andrew Morton <akpm@linux-foundation.org>,
        Baoquan He <bhe@redhat.com>, Michal Hocko <mhocko@suse.com>,
        Vlastimil Babka <vbabka@suse.cz>,
        Andrea Arcangeli <aarcange@redhat.com>,
        David Hildenbrand <david@redhat.com>,
        Mel Gorman <mgorman@techsingularity.net>,
        David Herrmann <dh.herrmann@gmail.com>,
        Tim Chen <tim.c.chen@linux.intel.com>,
        Kan Liang <kan.liang@intel.com>,
        Andi Kleen <ak@linux.intel.com>,
        Davidlohr Bueso <dave@stgolabs.net>,
        Peter Zijlstra <peterz@infradead.org>,
        Christoph Lameter <cl@linux.com>,
        Nick Piggin <npiggin@gmail.com>, pifang@redhat.com,
        linux-kernel@vger.kernel.org, linux-mm@kvack.org
Subject: Re: [PATCHi v2] mm: put_and_wait_on_page_locked() while page is
 migrated
Message-ID: <20181126205351.GM3065@bombadil.infradead.org>
References: <alpine.LSU.2.11.1811241858540.4415@eggly.anvils>
 <CAHk-=wjeqKYevxGnfCM4UkxX8k8xfArzM6gKkG3BZg1jBYThVQ@mail.gmail.com>
 <alpine.LSU.2.11.1811251900300.1278@eggly.anvils>
 <alpine.LSU.2.11.1811261121330.1116@eggly.anvils>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <alpine.LSU.2.11.1811261121330.1116@eggly.anvils>
User-Agent: Mutt/1.9.2 (2017-12-15)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Mon, Nov 26, 2018 at 11:27:07AM -0800, Hugh Dickins wrote:
> Waiting on a page migration entry has used wait_on_page_locked() all
> along since 2006: but you cannot safely wait_on_page_locked() without
> holding a reference to the page, and that extra reference is enough to
> make migrate_page_move_mapping() fail with -EAGAIN, when a racing task
> faults on the entry before migrate_page_move_mapping() gets there.
> 
> And that failure is retried nine times, amplifying the pain when
> trying to migrate a popular page.  With a single persistent faulter,
> migration sometimes succeeds; with two or three concurrent faulters,
> success becomes much less likely (and the more the page was mapped,
> the worse the overhead of unmapping and remapping it on each try).
> 
> This is especially a problem for memory offlining, where the outer
> level retries forever (or until terminated from userspace), because
> a heavy refault workload can trigger an endless loop of migration
> failures.  wait_on_page_locked() is the wrong tool for the job.
> 
> David Herrmann (but was he the first?) noticed this issue in 2014:
> https://marc.info/?l=linux-mm&m=140110465608116&w=2
> 
> Tim Chen started a thread in August 2017 which appears relevant:
> https://marc.info/?l=linux-mm&m=150275941014915&w=2
> where Kan Liang went on to implicate __migration_entry_wait():
> https://marc.info/?l=linux-mm&m=150300268411980&w=2
> and the thread ended up with the v4.14 commits:
> 2554db916586 ("sched/wait: Break up long wake list walk")
> 11a19c7b099f ("sched/wait: Introduce wakeup boomark in wake_up_page_bit")
> 
> Baoquan He reported "Memory hotplug softlock issue" 14 November 2018:
> https://marc.info/?l=linux-mm&m=154217936431300&w=2
> 
> We have all assumed that it is essential to hold a page reference while
> waiting on a page lock: partly to guarantee that there is still a struct
> page when MEMORY_HOTREMOVE is configured, but also to protect against
> reuse of the struct page going to someone who then holds the page locked
> indefinitely, when the waiter can reasonably expect timely unlocking.
> 
> But in fact, so long as wait_on_page_bit_common() does the put_page(),
> and is careful not to rely on struct page contents thereafter, there is
> no need to hold a reference to the page while waiting on it.  That does
> mean that this case cannot go back through the loop: but that's fine for
> the page migration case, and even if used more widely, is limited by the
> "Stop walking if it's locked" optimization in wake_page_function().
> 
> Add interface put_and_wait_on_page_locked() to do this, using "behavior"
> enum in place of "lock" arg to wait_on_page_bit_common() to implement it.
> No interruptible or killable variant needed yet, but they might follow:
> I have a vague notion that reporting -EINTR should take precedence over
> return from wait_on_page_bit_common() without knowing the page state,
> so arrange it accordingly - but that may be nothing but pedantic.
> 
> __migration_entry_wait() still has to take a brief reference to the
> page, prior to calling put_and_wait_on_page_locked(): but now that it
> is dropped before waiting, the chance of impeding page migration is
> very much reduced.  Should we perhaps disable preemption across this?
> 
> shrink_page_list()'s __ClearPageLocked(): that was a surprise!  This
> survived a lot of testing before that showed up.  PageWaiters may have
> been set by wait_on_page_bit_common(), and the reference dropped, just
> before shrink_page_list() succeeds in freezing its last page reference:
> in such a case, unlock_page() must be used.  Follow the suggestion from
> Michal Hocko, just revert a978d6f52106 ("mm: unlockless reclaim") now:
> that optimization predates PageWaiters, and won't buy much these days;
> but we can reinstate it for the !PageWaiters case if anyone notices.
> 
> It does raise the question: should vmscan.c's is_page_cache_freeable()
> and __remove_mapping() now treat a PageWaiters page as if an extra
> reference were held?  Perhaps, but I don't think it matters much, since
> shrink_page_list() already had to win its trylock_page(), so waiters are
> not very common there: I noticed no difference when trying the bigger
> change, and it's surely not needed while put_and_wait_on_page_locked()
> is only used for page migration.
> 
> Reported-and-tested-by: Baoquan He <bhe@redhat.com>
> Signed-off-by: Hugh Dickins <hughd@google.com>
> Acked-by: Michal Hocko <mhocko@suse.com>
> Reviewed-by: Andrea Arcangeli <aarcange@redhat.com>
> ---
>  include/linux/pagemap.h |  2 ++
>  mm/filemap.c            | 77 ++++++++++++++++++++++++++++++++++-------
>  mm/huge_memory.c        |  6 ++--
>  mm/migrate.c            | 12 +++----
>  mm/vmscan.c             | 10 ++----
>  5 files changed, 74 insertions(+), 33 deletions(-)
> 

/**
 * put_and_wait_on_page_locked - Drop a reference and wait for it to be unlocked
 * @page: The page to wait for.
 *
 * The caller should hold a reference on @page.  They expect the page to
 * become unlocked relatively soon, but do not wish to hold up migration
 * (for example) by holding the reference while waiting for the page to
 * come unlocked.  After this function returns, the caller should not
 * dereference @page.
 */

(improvements gratefully received)

> +void put_and_wait_on_page_locked(struct page *page)
> +{
> +	wait_queue_head_t *q;
> +
> +	page = compound_head(page);
> +	q = page_waitqueue(page);
> +	wait_on_page_bit_common(q, page, PG_locked, TASK_UNINTERRUPTIBLE, DROP);
> +}
> +
>  /**
>   * add_page_wait_queue - Add an arbitrary waiter to a page's wait queue
>   * @page: Page defining the wait queue of interest
