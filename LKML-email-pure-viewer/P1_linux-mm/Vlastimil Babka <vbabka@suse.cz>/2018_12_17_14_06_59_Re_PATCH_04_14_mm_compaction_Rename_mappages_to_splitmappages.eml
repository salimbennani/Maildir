Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  18 Dec 2018 08:44:36 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 142025805AD;
	Mon, 17 Dec 2018 06:07:10 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 17 Dec 2018 06:07:10 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A0vAcnRW4p39oFos4GuuZLmJnlujV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhCPtKdThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGp6y?=
 =?us-ascii?q?YZUBD+QBPuhWoYfyqFQMohSiCgesH/vvxz1Ti3/q36A3yfgtHR3I0QEiGd8FrX?=
 =?us-ascii?q?TarM/yNKcXSe26w63Iwi/Yb/NK2Df97YnIchQ8qvyRR71/asnRxlMyHA7CkFWf?=
 =?us-ascii?q?spbqMCiW1usXqGWb9PdgVfmxhGI9tw5woyGiy8ExgYfKnoIY0k7I+Tl9zYovON?=
 =?us-ascii?q?G1RlB3bcS5HJZTqy2WLYp7T8E6T211vCs3yqcKtYO1cSUK0pgr2QDTZ+Cdf4SW?=
 =?us-ascii?q?4h/uW+CcKipiin1/YrKwnROy/FCgyuLiUsm0105HrjRKktbSrHABzR/T5dadSv?=
 =?us-ascii?q?t74Eih3SyD1wfJ6uFLOUw0lKzbJIA9wrMoiJYfrUDOEjXrlEj4kqOabFgo9+u0?=
 =?us-ascii?q?5+j9Y7jrpIeQN4puhQH/NqQulNa/AeM9MgUWW2ib+OK81KDs/EHgQ7VFkOc2kq?=
 =?us-ascii?q?/Hv5DePMgboaC4AwlL3YY58Bu/ETim38oCnXUdL1JKZgiHj473NFHKOvz4Cu2/?=
 =?us-ascii?q?g1u0nDdx2//GJqHhAonKLnXblLfhfLV95FBGxAs80NBS/JZUCrAHIPLuVU79rt?=
 =?us-ascii?q?3YDhklMwOqx+brEsly1oQbWWiXGK+WLLvSsUOU5uIoO+SMZJUauDfhK/c/4P7i?=
 =?us-ascii?q?l385mUIHcqmv0psac3S4HvVgI0WEbnvgmNYBEWEWvgUgSOzmkkGNUTlWZ3yqRa?=
 =?us-ascii?q?Iz+ik7CJ66DYfEXo2tgruB0zmhEp1VYWBGDFaMEXDzeoWAWvcMbj+SI8B7njwF?=
 =?us-ascii?q?U7ihV5Eu1RW0uADmzLpnK/Le+jcEupL7yNh1++rTmAko+jxvD8Sd1GKNQ3tunm?=
 =?us-ascii?q?wSRT87x6R/oU17ylee3ql0mf1YFdpP5/xXVgc2L4LTz+t/C9rqQALOYs+JSEq6?=
 =?us-ascii?q?QtWhGTwxTcg+w9kUb0Z5GtWtlBbD3yWxDr8RlryLAoE0863G03jwIcZ912jJ1K?=
 =?us-ascii?q?07g1Y6RctPMHWshrRj+AjLG47Jj0KZmr63eqsGwi7C6n2PzWqUs0FeSw5/T6PF?=
 =?us-ascii?q?UXcbZkvVqNT54ljPT7uvCbQhLwtAxtSOKqpMat31k1pGQO3vN8jZY2K0g22wHw?=
 =?us-ascii?q?qHxquQbIr2fGUQxDjSB1Iakw8N53qGNRIxBiG6o23ACjxjDlbvY0Lq8eljp3K3?=
 =?us-ascii?q?VE40zweWb0J/07q54AIahfuZS/kLxLILpD8hqyloHFa6x9/WF9uApw9mfKVAYd?=
 =?us-ascii?q?M84E1L1X7Duwx6JJygK6FihlgRcwlsu0Pu1hN3CphPkMQwrXMqyhZyJryc0F9b?=
 =?us-ascii?q?azyY2pXwMKXNKmbu5BCvd7LW2lbG3dmM/qcA9vs5pEvjvQ2zDUUi7mho3MNT03?=
 =?us-ascii?q?uf4ZXKEhEfUZbwUkYx6hh7qKvWYig754PIy3JsNbO4vSPF29IsHOEl0Aqvf89D?=
 =?us-ascii?q?MKOYEw//C80bB9W0JOM2gVSobxIEM/pU9K47JM6mc/qG2Ki2POdvhj6mjGJH4J?=
 =?us-ascii?q?xj3UKI7SZzVunI35MdyfGCwgSHTyv8jEumss3vg4BEZC0dEXClySf5A45dfKty?=
 =?us-ascii?q?cpgRCWevOsG42s9xh5rwVHFG7l6jAFUG1dSteRqTaVz9wAJR2V4WoXyhhSu30T?=
 =?us-ascii?q?h0nys1oaqY2SzE2/7iewYfOm5XWGliik/hIIi1j9wAXEmkdRMplAaj5Uvhw6hb?=
 =?us-ascii?q?paJ/L3TcQEtSfij2KX1iXbW0traYf8FP75Youz1NUOugeVCaVqL9oxwC3iPhBW?=
 =?us-ascii?q?Re3jM7dzKtupnjhBx1kmGdLHVyrHrfZ85wwwzS5NjdRf5XwzoHSzN0iTjRBlig?=
 =?us-ascii?q?Idap+c+YmIvEsuC7T2ihTIFccTH3zYOcsyu2/W1rDge4n/ypmN3nEA463DT/19?=
 =?us-ascii?q?lrUyXIsRn9bpPq16S8LeJoYE1oCEXg5Mp9H4F0ipEwi40I2XgGmpWV+mIKkWTp?=
 =?us-ascii?q?PtVaw67+bGcNSiQNw97a+wXl3ExjLnSUx4P2THmdw81hZ8WkbWMSwC4y88dKCK?=
 =?us-ascii?q?KM5rxegSR1uka4rR7WYfVlmzcdyPgu52QAj+AHpgUt1TmdDa4IHUZDIyPsjRuI?=
 =?us-ascii?q?4su6rKVWYmavbLex2FB/ndCnELGNvAVcVGzldZclGC969t9/P07U0H3v9oHkf8?=
 =?us-ascii?q?Hdbc4Uth2RiRvBjvJaKJQslvoRnipnOHnwvXkky+49kBxv0ou2vImBK2Vx4q25?=
 =?us-ascii?q?BgRUOSHyZ8MW4jvtl7pRnt6K34CzGZVsAi4EU4HvTfKsDTIer/DnNxuVHT04q3?=
 =?us-ascii?q?ebH6ffHACF5EdnqXLPD46kN3WNKHYFytViQQGXJFZDjwAMQDU6gpk5GxioxMP7?=
 =?us-ascii?q?dUd2+CsR6kTkqhdWyeJoKhr/UnrZpAiycTc5U5yfLBtQ7gFf6EbZK82e7uRvHy?=
 =?us-ascii?q?5G+p2tthCCKmueZw5QF2EGRlSEB0z/Prmp/dTB8++YBvenL/vTe7qOr/ZSV+yP?=
 =?us-ascii?q?xZKp3Ytr5DKMNsSJPnl/APw3wEtDXXZlG8vHnzUDUTAYlyXIb8SDvhez5jV3rt?=
 =?us-ascii?q?yj8PTsQA/v5ZWAC7pRMdVs+hC6m6SDN/SXhCZ2NzlYzI4MxWTTxbgb3V4SjTxu?=
 =?us-ascii?q?dja3HbQBsy7NULzfmqtNAxEHbCNzMdNC77gg0QlVJc7bltT126Zigf4oEFhFT0?=
 =?us-ascii?q?Lum8GzacwOImGwL1fHBEeNNLSbKjzH2cD3YaWgSbJOiOVYrQG/uTGeE0X7JDSM?=
 =?us-ascii?q?iyHpVwyzMeFLlCybIB1euISnfhlxE2TsUNLmZQO9MNJsiT02wLs0hm7FNGIGMD?=
 =?us-ascii?q?h8dV9NoaOU7S9Cnvp/HGlB5GJ/LeaYgyaZ8/XYKpEOvPprGCt0keda4HU8y7RN?=
 =?us-ascii?q?7SBEROZ6mC3drtN1p1Gmk++PyidoURZUqzZLgp6LsltmOanD6pZAXnPEr1ox6j?=
 =?us-ascii?q?C1BhBCiNx/D9Tp8/RVxd/Vkav1ACtP+NLP/M0TGszdMsObITwnPAa/XHbwDQ0Y?=
 =?us-ascii?q?XXuOECmLg01bjeHX83i9rYYzoZuqn4ABHOx1TlswQ80eA195HdkDJN9dVzknmP?=
 =?us-ascii?q?bPksQB73m3hALMX8gctYKRBaHaOunmNDvM1eoMXBAP276taN1LboA=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BaAQC0rBdch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBZYNsJ4N8lA+BYC0Ul1iBYikTAYdVIjgSAQMBAQEBAQECARMBAQEKCwkIKS+?=
 =?us-ascii?q?CNiQBgmEBAQEBAgEBAiAEUgUBCQEBCg4KAgIYDgICA1QGAQwGAgEBAYMdgXkIB?=
 =?us-ascii?q?AGoG3wzhUCDBYFZgQuLMxeBQD+BOIJrhGqDH4JXAolCgXSEF0eRBQmKTYcHBhi?=
 =?us-ascii?q?Jf4dTLIkQkgWBdzMaCDA7gmyCJxeOHj8ygQUBAY1vAQE?=
X-IPAS-Result: =?us-ascii?q?A0BaAQC0rBdch0O0hNFkHAEBAQQBAQcEAQGBZYNsJ4N8lA+?=
 =?us-ascii?q?BYC0Ul1iBYikTAYdVIjgSAQMBAQEBAQECARMBAQEKCwkIKS+CNiQBgmEBAQEBA?=
 =?us-ascii?q?gEBAiAEUgUBCQEBCg4KAgIYDgICA1QGAQwGAgEBAYMdgXkIBAGoG3wzhUCDBYF?=
 =?us-ascii?q?ZgQuLMxeBQD+BOIJrhGqDH4JXAolCgXSEF0eRBQmKTYcHBhiJf4dTLIkQkgWBd?=
 =?us-ascii?q?zMaCDA7gmyCJxeOHj8ygQUBAY1vAQE?=
X-IronPort-AV: E=Sophos;i="5.56,365,1539673200"; 
   d="scan'208";a="45277270"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 17 Dec 2018 06:07:08 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1733160AbeLQOHE (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 17 Dec 2018 09:07:04 -0500
Received: from mx2.suse.de ([195.135.220.15]:48212 "EHLO mx1.suse.de"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1727341AbeLQOHE (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 17 Dec 2018 09:07:04 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay1.suse.de (unknown [195.135.220.254])
        by mx1.suse.de (Postfix) with ESMTP id 47B38AD72;
        Mon, 17 Dec 2018 14:07:01 +0000 (UTC)
Subject: Re: [PATCH 04/14] mm, compaction: Rename map_pages to split_map_pages
To: Mel Gorman <mgorman@techsingularity.net>,
        Linux-MM <linux-mm@kvack.org>
Cc: David Rientjes <rientjes@google.com>,
        Andrea Arcangeli <aarcange@redhat.com>,
        Linus Torvalds <torvalds@linux-foundation.org>,
        Michal Hocko <mhocko@kernel.org>, ying.huang@intel.com,
        kirill@shutemov.name, Andrew Morton <akpm@linux-foundation.org>,
        Linux List Kernel Mailing <linux-kernel@vger.kernel.org>
References: <20181214230310.572-1-mgorman@techsingularity.net>
 <20181214230310.572-5-mgorman@techsingularity.net>
From: Vlastimil Babka <vbabka@suse.cz>
Openpgp: preference=signencrypt
Message-ID: <b9a6574a-6b0c-11bc-06e5-c650b03e06f3@suse.cz>
Date: Mon, 17 Dec 2018 15:06:59 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.3.2
MIME-Version: 1.0
In-Reply-To: <20181214230310.572-5-mgorman@techsingularity.net>
Content-Type: text/plain; charset=utf-8
Content-Language: en-US
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 12/15/18 12:03 AM, Mel Gorman wrote:
> It's non-obvious that high-order free pages are split into order-0
> pages from the function name. Fix it.

That's fine, but looks like the patch has another change squashed into
it that removes zone parameter from several functions and uses cc->zone
instead.

> Signed-off-by: Mel Gorman <mgorman@techsingularity.net>
> ---
>  mm/compaction.c | 60 ++++++++++++++++++++++++++++-----------------------------
>  1 file changed, 29 insertions(+), 31 deletions(-)
> 
> diff --git a/mm/compaction.c b/mm/compaction.c
> index fb4d9f52ed56..3afa4e9188b6 100644
> --- a/mm/compaction.c
> +++ b/mm/compaction.c
> @@ -66,7 +66,7 @@ static unsigned long release_freepages(struct list_head *freelist)
>  	return high_pfn;
>  }
>  
> -static void map_pages(struct list_head *list)
> +static void split_map_pages(struct list_head *list)
>  {
>  	unsigned int i, order, nr_pages;
>  	struct page *page, *next;
> @@ -644,7 +644,7 @@ isolate_freepages_range(struct compact_control *cc,
>  	}
>  
>  	/* __isolate_free_page() does not map the pages */
> -	map_pages(&freelist);
> +	split_map_pages(&freelist);
>  
>  	if (pfn < end_pfn) {
>  		/* Loop terminated early, cleanup. */
> @@ -1141,7 +1141,7 @@ static void isolate_freepages(struct compact_control *cc)
>  	}
>  
>  	/* __isolate_free_page() does not map the pages */
> -	map_pages(freelist);
> +	split_map_pages(freelist);
>  
>  	/*
>  	 * Record where the free scanner will restart next time. Either we
> @@ -1300,8 +1300,7 @@ static inline bool is_via_compact_memory(int order)
>  	return order == -1;
>  }
>  
> -static enum compact_result __compact_finished(struct zone *zone,
> -						struct compact_control *cc)
> +static enum compact_result __compact_finished(struct compact_control *cc)
>  {
>  	unsigned int order;
>  	const int migratetype = cc->migratetype;
> @@ -1312,7 +1311,7 @@ static enum compact_result __compact_finished(struct zone *zone,
>  	/* Compaction run completes if the migrate and free scanner meet */
>  	if (compact_scanners_met(cc)) {
>  		/* Let the next compaction start anew. */
> -		reset_cached_positions(zone);
> +		reset_cached_positions(cc->zone);
>  
>  		/*
>  		 * Mark that the PG_migrate_skip information should be cleared
> @@ -1321,7 +1320,7 @@ static enum compact_result __compact_finished(struct zone *zone,
>  		 * based on an allocation request.
>  		 */
>  		if (cc->direct_compaction)
> -			zone->compact_blockskip_flush = true;
> +			cc->zone->compact_blockskip_flush = true;
>  
>  		if (cc->whole_zone)
>  			return COMPACT_COMPLETE;
> @@ -1345,7 +1344,7 @@ static enum compact_result __compact_finished(struct zone *zone,
>  
>  	/* Direct compactor: Is a suitable page free? */
>  	for (order = cc->order; order < MAX_ORDER; order++) {
> -		struct free_area *area = &zone->free_area[order];
> +		struct free_area *area = &cc->zone->free_area[order];
>  		bool can_steal;
>  
>  		/* Job done if page is free of the right migratetype */
> @@ -1391,13 +1390,12 @@ static enum compact_result __compact_finished(struct zone *zone,
>  	return COMPACT_NO_SUITABLE_PAGE;
>  }
>  
> -static enum compact_result compact_finished(struct zone *zone,
> -			struct compact_control *cc)
> +static enum compact_result compact_finished(struct compact_control *cc)
>  {
>  	int ret;
>  
> -	ret = __compact_finished(zone, cc);
> -	trace_mm_compaction_finished(zone, cc->order, ret);
> +	ret = __compact_finished(cc);
> +	trace_mm_compaction_finished(cc->zone, cc->order, ret);
>  	if (ret == COMPACT_NO_SUITABLE_PAGE)
>  		ret = COMPACT_CONTINUE;
>  
> @@ -1524,16 +1522,16 @@ bool compaction_zonelist_suitable(struct alloc_context *ac, int order,
>  	return false;
>  }
>  
> -static enum compact_result compact_zone(struct zone *zone, struct compact_control *cc)
> +static enum compact_result compact_zone(struct compact_control *cc)
>  {
>  	enum compact_result ret;
> -	unsigned long start_pfn = zone->zone_start_pfn;
> -	unsigned long end_pfn = zone_end_pfn(zone);
> +	unsigned long start_pfn = cc->zone->zone_start_pfn;
> +	unsigned long end_pfn = zone_end_pfn(cc->zone);
>  	unsigned long last_migrated_pfn;
>  	const bool sync = cc->mode != MIGRATE_ASYNC;
>  
>  	cc->migratetype = gfpflags_to_migratetype(cc->gfp_mask);
> -	ret = compaction_suitable(zone, cc->order, cc->alloc_flags,
> +	ret = compaction_suitable(cc->zone, cc->order, cc->alloc_flags,
>  							cc->classzone_idx);
>  	/* Compaction is likely to fail */
>  	if (ret == COMPACT_SUCCESS || ret == COMPACT_SKIPPED)
> @@ -1546,8 +1544,8 @@ static enum compact_result compact_zone(struct zone *zone, struct compact_contro
>  	 * Clear pageblock skip if there were failures recently and compaction
>  	 * is about to be retried after being deferred.
>  	 */
> -	if (compaction_restarting(zone, cc->order))
> -		__reset_isolation_suitable(zone);
> +	if (compaction_restarting(cc->zone, cc->order))
> +		__reset_isolation_suitable(cc->zone);
>  
>  	/*
>  	 * Setup to move all movable pages to the end of the zone. Used cached
> @@ -1559,16 +1557,16 @@ static enum compact_result compact_zone(struct zone *zone, struct compact_contro
>  		cc->migrate_pfn = start_pfn;
>  		cc->free_pfn = pageblock_start_pfn(end_pfn - 1);
>  	} else {
> -		cc->migrate_pfn = zone->compact_cached_migrate_pfn[sync];
> -		cc->free_pfn = zone->compact_cached_free_pfn;
> +		cc->migrate_pfn = cc->zone->compact_cached_migrate_pfn[sync];
> +		cc->free_pfn = cc->zone->compact_cached_free_pfn;
>  		if (cc->free_pfn < start_pfn || cc->free_pfn >= end_pfn) {
>  			cc->free_pfn = pageblock_start_pfn(end_pfn - 1);
> -			zone->compact_cached_free_pfn = cc->free_pfn;
> +			cc->zone->compact_cached_free_pfn = cc->free_pfn;
>  		}
>  		if (cc->migrate_pfn < start_pfn || cc->migrate_pfn >= end_pfn) {
>  			cc->migrate_pfn = start_pfn;
> -			zone->compact_cached_migrate_pfn[0] = cc->migrate_pfn;
> -			zone->compact_cached_migrate_pfn[1] = cc->migrate_pfn;
> +			cc->zone->compact_cached_migrate_pfn[0] = cc->migrate_pfn;
> +			cc->zone->compact_cached_migrate_pfn[1] = cc->migrate_pfn;
>  		}
>  
>  		if (cc->migrate_pfn == start_pfn)
> @@ -1582,11 +1580,11 @@ static enum compact_result compact_zone(struct zone *zone, struct compact_contro
>  
>  	migrate_prep_local();
>  
> -	while ((ret = compact_finished(zone, cc)) == COMPACT_CONTINUE) {
> +	while ((ret = compact_finished(cc)) == COMPACT_CONTINUE) {
>  		int err;
>  		unsigned long start_pfn = cc->migrate_pfn;
>  
> -		switch (isolate_migratepages(zone, cc)) {
> +		switch (isolate_migratepages(cc->zone, cc)) {
>  		case ISOLATE_ABORT:
>  			ret = COMPACT_CONTENDED;
>  			putback_movable_pages(&cc->migratepages);
> @@ -1653,7 +1651,7 @@ static enum compact_result compact_zone(struct zone *zone, struct compact_contro
>  			if (last_migrated_pfn < current_block_start) {
>  				cpu = get_cpu();
>  				lru_add_drain_cpu(cpu);
> -				drain_local_pages(zone);
> +				drain_local_pages(cc->zone);
>  				put_cpu();
>  				/* No more flushing until we migrate again */
>  				last_migrated_pfn = 0;
> @@ -1678,8 +1676,8 @@ static enum compact_result compact_zone(struct zone *zone, struct compact_contro
>  		 * Only go back, not forward. The cached pfn might have been
>  		 * already reset to zone end in compact_finished()
>  		 */
> -		if (free_pfn > zone->compact_cached_free_pfn)
> -			zone->compact_cached_free_pfn = free_pfn;
> +		if (free_pfn > cc->zone->compact_cached_free_pfn)
> +			cc->zone->compact_cached_free_pfn = free_pfn;
>  	}
>  
>  	count_compact_events(COMPACTMIGRATE_SCANNED, cc->total_migrate_scanned);
> @@ -1716,7 +1714,7 @@ static enum compact_result compact_zone_order(struct zone *zone, int order,
>  	INIT_LIST_HEAD(&cc.freepages);
>  	INIT_LIST_HEAD(&cc.migratepages);
>  
> -	ret = compact_zone(zone, &cc);
> +	ret = compact_zone(&cc);
>  
>  	VM_BUG_ON(!list_empty(&cc.freepages));
>  	VM_BUG_ON(!list_empty(&cc.migratepages));
> @@ -1834,7 +1832,7 @@ static void compact_node(int nid)
>  		INIT_LIST_HEAD(&cc.freepages);
>  		INIT_LIST_HEAD(&cc.migratepages);
>  
> -		compact_zone(zone, &cc);
> +		compact_zone(&cc);
>  
>  		VM_BUG_ON(!list_empty(&cc.freepages));
>  		VM_BUG_ON(!list_empty(&cc.migratepages));
> @@ -1976,7 +1974,7 @@ static void kcompactd_do_work(pg_data_t *pgdat)
>  
>  		if (kthread_should_stop())
>  			return;
> -		status = compact_zone(zone, &cc);
> +		status = compact_zone(&cc);
>  
>  		if (status == COMPACT_SUCCESS) {
>  			compaction_defer_reset(zone, cc.order, false);
> 

