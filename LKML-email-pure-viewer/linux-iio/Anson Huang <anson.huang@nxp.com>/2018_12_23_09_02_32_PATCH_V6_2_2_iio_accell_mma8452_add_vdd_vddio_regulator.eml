Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 16:00:10 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 9976358049E;
	Sun, 23 Dec 2018 01:06:46 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 23 Dec 2018 01:06:46 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AEdnBmxNSdWl4SX0qGMIl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KfzzpsbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRsZfWTJcDIOg?=
 =?us-ascii?q?YYUBDOQBMuRfoYn8u1QAohSxBRK0BO7t0TJImmb20Lcm3+k7DQ3KwQotFM8Ovn?=
 =?us-ascii?q?TOq9X1Mb8fXPyzzKnTyjXDae5d1zXg6IfSdBAhruyHULVqfsrX0kkvEAXFgk+Q?=
 =?us-ascii?q?qYz4JTyV0OsNvnOd7+tvTeKjkXIoqwZ0ojW2wMonl4rHhpoNx1za6Sl0xJw5Kc?=
 =?us-ascii?q?C2RUJle9KoDZhduz2AO4Z3QM4uW3xktDs+x7Ect5O3YTIGxIklyhPQcfCKcomF?=
 =?us-ascii?q?7grtVOmPIjp0mHdodbe/ihu27Ees1OjxW8m03VlQsiZIl8TDuWsT2BHd78WLVO?=
 =?us-ascii?q?Fy80Oj1DuJygvd8PtLIVoumqreM5MhwqA/lp4UsUnbAC/2l1v5jLWMekUn5Oeo?=
 =?us-ascii?q?8eLnbavippOGMI90kA7+Prwvmsy5H+s4LhADU3aH9em4zrHv4EP0TKtQgvErka?=
 =?us-ascii?q?TVrIrWKMUZq6KhBg9ayIcj6xKxDze819QYmGEKLFZEeBKBkojoNEjCIPPmAvel?=
 =?us-ascii?q?hVSjjjNry+nBPrzvBJXCMGLDnaz/fbZy9UFc0hA/zdNB6JJODLEOPvbzVlX2tN?=
 =?us-ascii?q?zCAR81Kxa0zPr/CNVhyoMeXnqCAquYMKPRr1CE/O0uI/SXaY8RuTb9LeUl5vH0?=
 =?us-ascii?q?gX84n18dYbem3Z8NZH+kGfRmJl2TYWDwjdcZDWcKog0+QfTqiFKYUD5Te2y9X6?=
 =?us-ascii?q?Um6jE7FYKpF4HDRo+2jbyF3Se7GIBWZ29cBlCNF3foa5uLW/MWZC2OJc9hlyQO?=
 =?us-ascii?q?VaK9RI85yRGuqAj6xqJ9IerP+i0YspHj2MJv5+LJlxE/7jh0D8Wb02GQQGB4hG?=
 =?us-ascii?q?IIRzkq3K9hpUxx0EuM0a99g/ZAD9xc++tJUhsmNZ7b1+F6CMr9WgTbcteNSVap?=
 =?us-ascii?q?WNOmAT4qQ9I1wt8OZVt9Gtq4ghDC2SqqH6Eal7iRCJMo9aLc2mD7J9xhxHbeyK?=
 =?us-ascii?q?khk14mT9NSOmK8mK5w6RLfB47TnEWfjKala6Ic0CnJ9GeAyGqOuFpVUApxUaXD?=
 =?us-ascii?q?QHAeaVHardX/5kPeUbCuDa4rPRdGyc6HMqFKcMHmjU1aRPf/P9TTe3++lH2uBR?=
 =?us-ascii?q?mW3L+MbJDle2MG3CrDDkgJiAQT/XeANQgjCSatuWPeDDpyFV3xZ0Pg6/VxqHS+?=
 =?us-ascii?q?TkUs1QGFc1Vh16ap+h4SnfGcV/IT3rcDuCc9qzV1HEyx387MB9qHvQpheKRcYd?=
 =?us-ascii?q?Uy4Fpc0WLZtgp9PoGvLqx4h14edRh3sF3q1xltFopAls0qpmswzAVuMaKYzE9B?=
 =?us-ascii?q?dzSA0J/qPr3YNGbz8w6vaqLMwV7ezcuZ9b0J6PQ7rFXjohqkFk4j83VhztlU3G?=
 =?us-ascii?q?GQ5pTMDAoOT53xVlw7+AR9p7HfeiM9/Z/b1WVwMamotT/Pw9IoBPY/xhm8Zdte?=
 =?us-ascii?q?MaOEGxX0E80VHMWuLO0qm160bhMLJuxS9ag0P9+4ePuCwqKkIOFgnDe+h2Rd/I?=
 =?us-ascii?q?99yl6M9zZ7SuPQxZYFwu2X0RGdVzjhi1etqMb3lp5eZTETB2aw1TLrBIpMaaJs?=
 =?us-ascii?q?Z4YLDmGuLtazxtV/gZ7tRnFZ+ESiB1MAxM+mZx6SY0bh0g1X0EQduWanljegzz?=
 =?us-ascii?q?xojzEpqbKS3SzPw+j4dBsLIHVLRHRkjVr3JYi0jtYaXFWnbgQzlRul41r6yLZf?=
 =?us-ascii?q?pKhlM2bTRkJIdTDsL25+SquwqqaCY8lX5ZMqqypXSue8YVOdSrLnuBsVySDjH2?=
 =?us-ascii?q?hfxDA9aT6qvI70nxh7iGKbMXZyo2DVecB2xRfD+tPcQeRd0SYBRCl9kTPXHESz?=
 =?us-ascii?q?P8G1/dWIkJfOquC/WHimVpFJcynrzIWAuTC/5W1rBx2/gv+ylsfmEQg8zS/0yd?=
 =?us-ascii?q?1qWT/Uoxb7Z4nhz766Pv5/fkl0GF/87NJ3GoJknYsxnp0Q2WUaiY+T/XoIimrz?=
 =?us-ascii?q?NdRb2aTjbHsCXzILwtjV4BT7101nNH6G24X5VnCFyMt7e9a6en8W2j46781SDa?=
 =?us-ascii?q?eU7b9EkjFvrlu2sw3ReuR9kSkHyfQ19nEame4JtREpziWcBLASAEZZMTbtlxSO?=
 =?us-ascii?q?89CxsqFXaHyzfri30Up0hcqhA62aogFARHb5fY8vHTN37sV6Kl7N0Wf86of5eN?=
 =?us-ascii?q?nLdtITtwaZkxPBj+hTNZIwmeAGhSthOWLho3Ilz/Q3ggBp3ZG/pIKHMXli/Lql?=
 =?us-ascii?q?Ah5EMT34f9gc9SvqjaZag8aaxYSvHoh6FzUPXZvoS++oET0IufTmMQaODCMzqn?=
 =?us-ascii?q?OBFbXDGg+f7V9sr2jTHJCzK3GXOH4ZwM1gRBaHIUxQnhsUUC8mnpIjFQCq2c/h?=
 =?us-ascii?q?cFp/5j8L/V71sR9MyuNuNxniXWbTvgaoajEoSJeBKBpa9B1N50DQMcaG9OJ8Az?=
 =?us-ascii?q?lY/oG9rAyKMmGaZwNIDXwQWkyZHV/jOKOi5cLH8+ieCeqzNP/OYbSIqexDWPaE?=
 =?us-ascii?q?35Ov0o16/zmSMsWDJGVtD/o+2kBbR3B2B9zZmykTSywQjy/Nb9CUpBa/+i10r8?=
 =?us-ascii?q?Cz6vfrWBjo5YuAFbRSK8hv+wutjKeHNu6Qgjt5KDlC2pMNw3/I1KYQ3FoIhy5y?=
 =?us-ascii?q?cDmtFKwKtTTRQ6LIhq9XExkbZjtpO8tV9K08xBdCOM7BhtPx1751lfo1C1ZDVV?=
 =?us-ascii?q?z8lcClf80KI2ehNFzZAEaHLqiJJTrOw8vve6OzVaVQjPlItx23oTubD07jPjGZ?=
 =?us-ascii?q?mzb1TRygLeFMgz+dPBFFvIG9cxBtCXXsTd78ax27NsN3giMywbEumnzKMmscOy?=
 =?us-ascii?q?Bmc0xRtr2Q8T9YgvJnFm1B9HVlK+yEmyef7+bAK5cWseFkAiJ7l+9B5HQ6yr1V?=
 =?us-ascii?q?7DxLRfBvmSvSqMJurE+ikuWV1jVnVx9O+X53g9fBv0RpY/7x9ZRaX3vAuhUX4i?=
 =?us-ascii?q?/YXxYLrIE+It7ioaZdzp7Ijq2lbH8I8NTd9MAfQcj8J8eXdnYse1K9GzjdBQAG?=
 =?us-ascii?q?Cz6DOmTPwUBQxrXavHmctIMSr5XwkZQJTflXWRZ9QvcTEF9NGdEeKZlwWXUonO?=
 =?us-ascii?q?jfxIQQ4Heztgb5XMBXs4rYEPSfHb+nfC6cgLReeDMQxL71N5tVMIDnjQgqIEN9?=
 =?us-ascii?q?loSJF1b4Xt1XpCBlKAgurw8FpGJ5RG1w117NaQ635nIXU/mukUhywkF7aP4usi?=
 =?us-ascii?q?3x/1M+IFbirTE11kI2nJ+t1TWYaj23NrqsWYhQBwL9rU13OZT+FUI9Jwi7h1Bl?=
 =?us-ascii?q?MjTsX7VKk7ZnM2xmwkeIvJJVBf9aToVcZwQMyPbRa/h+lRx4pyKhzFVLrcDfBI?=
 =?us-ascii?q?B+mRliJZqhqHRJwQ4lZ8Q4PrDdNoJP3kAWjaWL6GvgnO8rzQAdJ24J8WWPaCAP?=
 =?us-ascii?q?pUoEP6UnICzu+fZjo0TWlCFOd2sMf/4rpO96+EQgPeiJ0yPn1fhEME/nc6TVIL?=
 =?us-ascii?q?6Cp2HekuaFR1k92k8Fm05fu7Nx1I1rJ0WJTFwm0ry5GhEDOMbOJA1SdYxZ832F?=
 =?us-ascii?q?OW7Eq/nXzIl0M4mVG+TlRvOUs6MdjQSvGwNvFplGppAbAoOhy0DUIe/qKLMO1Q?=
 =?us-ascii?q?8q4Q3kYl6CCbJAZUTP2H0Dosei3Np23I51OD4QGyN+PD+x67KRoRUlyrLXWNYw?=
 =?us-ascii?q?f2dfX4oDHmw5Vdf8mCNDuXlESj6t3bRdgEKO4iH9rSnMFjTxR8Rsae3SZh52Dt?=
 =?us-ascii?q?yyvzIl/OL+3VLa7JTVKn3gONlKpNDC86UZqoyBBvcSSqNy5QOU0Y1ZQWG6Fm3C?=
 =?us-ascii?q?C9i4I7DuZIQ2K9/5EHC3Vhq4kT1/B5P1PdCwPu2LjBvuSIJ8roaWxnYgONW7Gz?=
 =?us-ascii?q?VYHA1/8bIt/qV5MCQFeJ09KT71vgIxf/i2Jhyf1JOuXm+rJhNQX+EZxuK/Me8E?=
 =?us-ascii?q?hxEwZ/O3nSNzBqoxyPO6pAtUHMkH?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AXAAB+Tx9ch0O0hNFjHgEGBwaBUQkLA?=
 =?us-ascii?q?YEwUIFcBAsnCoc7A49/SoIhl08UgV8UARgTAYcwIjQJDQEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BCgsJCCkjDII6KQGCZwMDAQIkGQEBNwEFCQEBAQFOAy8lAgQBDQUFgx2CAQEBA?=
 =?us-ascii?q?gKbPwKKE4FsM4J2AQEFgQQBAYYUCId+hEGBVz+BEYdXIIV7iSsaCoZegQqQFgc?=
 =?us-ascii?q?CgiUEj0IWkWaIKIExkCkCBAIEBQINAQEFgUaCDjMaI4M8ghuDbYocATZygQUBA?=
 =?us-ascii?q?SGKaSmBBQGBHgEB?=
X-IPAS-Result: =?us-ascii?q?A0AXAAB+Tx9ch0O0hNFjHgEGBwaBUQkLAYEwUIFcBAsnCoc?=
 =?us-ascii?q?7A49/SoIhl08UgV8UARgTAYcwIjQJDQEDAQEBAQEBAgETAQEBCgsJCCkjDII6K?=
 =?us-ascii?q?QGCZwMDAQIkGQEBNwEFCQEBAQFOAy8lAgQBDQUFgx2CAQEBAgKbPwKKE4FsM4J?=
 =?us-ascii?q?2AQEFgQQBAYYUCId+hEGBVz+BEYdXIIV7iSsaCoZegQqQFgcCgiUEj0IWkWaIK?=
 =?us-ascii?q?IExkCkCBAIEBQINAQEFgUaCDjMaI4M8ghuDbYocATZygQUBASGKaSmBBQGBHgE?=
 =?us-ascii?q?B?=
X-IronPort-AV: E=Sophos;i="5.56,386,1539673200"; 
   d="scan'208";a="56279313"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 23 Dec 2018 01:06:44 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727054AbeLWJGn (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Sun, 23 Dec 2018 04:06:43 -0500
Received: from mail-eopbgr130084.outbound.protection.outlook.com ([40.107.13.84]:47373
        "EHLO EUR01-HE1-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1727008AbeLWJGm (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Sun, 23 Dec 2018 04:06:42 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=nxp.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=cBPZC1sDTmOQkwEWxPbJNz7U5bg9csRAkDn21aUkV9c=;
 b=jSFTrXf/4xXUx78kQnCg0D89ygoXmXbP23IFf1A4n3x5qx4cXBeAeQSrtEdHzv89ODwbvD6zpENl9lyaet5C7Emltd1HPYHLCfUL/ZwwLdq/YkCNlc2s8FNUvDzX3cz4QD6Z6A8cROR/DKL6oUjm7wtxC122qB2F6469wk8QrQY=
Received: from DB3PR0402MB3916.eurprd04.prod.outlook.com (52.134.72.18) by
 DB3PR0402MB3772.eurprd04.prod.outlook.com (52.134.71.19) with Microsoft SMTP
 Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1446.23; Sun, 23 Dec 2018 09:02:32 +0000
Received: from DB3PR0402MB3916.eurprd04.prod.outlook.com
 ([fe80::59d2:55a0:dbe3:2a97]) by DB3PR0402MB3916.eurprd04.prod.outlook.com
 ([fe80::59d2:55a0:dbe3:2a97%5]) with mapi id 15.20.1446.026; Sun, 23 Dec 2018
 09:02:32 +0000
From: Anson Huang <anson.huang@nxp.com>
To: "jic23@kernel.org" <jic23@kernel.org>,
        "knaack.h@gmx.de" <knaack.h@gmx.de>,
        "lars@metafoo.de" <lars@metafoo.de>,
        "pmeerw@pmeerw.net" <pmeerw@pmeerw.net>,
        "robh+dt@kernel.org" <robh+dt@kernel.org>,
        "mark.rutland@arm.com" <mark.rutland@arm.com>,
        "martink@posteo.de" <martink@posteo.de>,
        Leonard Crestez <leonard.crestez@nxp.com>,
        "gregkh@linuxfoundation.org" <gregkh@linuxfoundation.org>,
        "gustavo@embeddedor.com" <gustavo@embeddedor.com>,
        "rtresidd@electromag.com.au" <rtresidd@electromag.com.au>,
        "linux-iio@vger.kernel.org" <linux-iio@vger.kernel.org>,
        "devicetree@vger.kernel.org" <devicetree@vger.kernel.org>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>
CC: dl-linux-imx <linux-imx@nxp.com>
Subject: [PATCH V6 2/2] iio: accell: mma8452: add vdd/vddio regulator
 operation support
Thread-Topic: [PATCH V6 2/2] iio: accell: mma8452: add vdd/vddio regulator
 operation support
Thread-Index: AQHUmp49C+XR7zFyD0yTrl16mKer/g==
Date: Sun, 23 Dec 2018 09:02:32 +0000
Message-ID: <1545555462-16121-2-git-send-email-Anson.Huang@nxp.com>
References: <1545555462-16121-1-git-send-email-Anson.Huang@nxp.com>
In-Reply-To: <1545555462-16121-1-git-send-email-Anson.Huang@nxp.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-mailer: git-send-email 2.7.4
x-clientproxiedby: HK2PR02CA0145.apcprd02.prod.outlook.com
 (2603:1096:202:16::29) To DB3PR0402MB3916.eurprd04.prod.outlook.com
 (2603:10a6:8:10::18)
x-ms-exchange-messagesentrepresentingtype: 1
x-originating-ip: [119.31.174.66]
x-ms-publictraffictype: Email
x-microsoft-exchange-diagnostics: 1;DB3PR0402MB3772;6:wUnAwJ0ZQcZwrXx29T+FGEmCP928BE1wnMsLHPousT14fXBMfjoK0jRr2XnA09bk6O7ZnuvtIqevtBjaMdUgnUvyUmAeIcZ9I+1i8ZjAxd7c4ETjCWoNRFa4zs+FTkkcNcRfp4xxLHAsZxz4OVuyy7ifcD42JhBd2Y6CzRP+mP81cdNkq/9skLkFTZU/+HUMv16SuWEZsSTRPDHLVbslTlaiPDM4efwrcFLGkqGgJKUFlIVTw8bHlICexlv+VlyPn6CWgDxN8q0a9t7huj5D3tnHRLF2X9CUWufprhly+Vod9oOMnJCY3RBll+XkvBcFK2pTRmAopleubZvve63YftJwwBMsZcuOlJxzrpEiLHP7HQAnXhjfLTqvBV8/A8eKOx9zwLPtGr9KDDTgwg+87eJA666lJoKkFqppBBXrGvVppxQoTTx2lM3fzVmRP/65hmk1fiPUZzJywzt6VO1VEg==;5:24hKqo9T5vJChI1VzKrIi92s5BwAUv4BSWeV+eyJvScCRTO1RbUrMtbY+9OOFPbdej2FodiQTGD/o1pT1d1xO6PBtDzWqXWfIoa8ore6jBrR98pqMuUrCr2wEQyY5PzeAAEF5C5GGiP9gZkzGTRo8PqWnNEKi9i8f5+nEQMBMxY=;7:GJlDybAgGmYO8pbg2W/M0ncT5cC4gJ56FovgXvBvsBrH7elCnXJqaddJ9bXywNWSbZiaiV+DOi7r+piVx6IugeV9Aw7QhqG+COww5cpuI3EVkxHCyXAT0bv2kipAexMJikhK4NRTWj4SJX9TGCZRUg==
x-ms-office365-filtering-correlation-id: 0e75eefb-7537-49fa-83f8-08d668b55fb2
x-ms-office365-filtering-ht: Tenant
x-microsoft-antispam: BCL:0;PCL:0;RULEID:(2390118)(7020095)(4652040)(8989299)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(5600098)(711020)(4618075)(2017052603328)(7153060)(7193020);SRVR:DB3PR0402MB3772;
x-ms-traffictypediagnostic: DB3PR0402MB3772:
x-microsoft-antispam-prvs: <DB3PR0402MB3772DDEEFCE24FEA599BE4C4F5BA0@DB3PR0402MB3772.eurprd04.prod.outlook.com>
x-exchange-antispam-report-cfa-test: BCL:0;PCL:0;RULEID:(8211001083)(3230021)(908002)(999002)(5005026)(6040522)(8220043)(2401047)(8121501046)(10201501046)(93006095)(93001095)(3002001)(3231475)(944501520)(52105112)(6055026)(6041310)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123562045)(20161123560045)(20161123558120)(20161123564045)(201708071742011)(7699051)(76991095);SRVR:DB3PR0402MB3772;BCL:0;PCL:0;RULEID:;SRVR:DB3PR0402MB3772;
x-forefront-prvs: 0895DF8FFD
x-forefront-antispam-report: SFV:NSPM;SFS:(10009020)(396003)(39860400002)(136003)(376002)(346002)(366004)(54534003)(189003)(199004)(7736002)(106356001)(305945005)(102836004)(36756003)(486006)(53936002)(2906002)(76176011)(14444005)(446003)(256004)(66066001)(6116002)(3846002)(476003)(11346002)(71190400001)(2616005)(71200400001)(52116002)(6512007)(2201001)(99286004)(575784001)(110136005)(6506007)(386003)(50226002)(316002)(81156014)(81166006)(86362001)(8936002)(97736004)(8676002)(5660300001)(186003)(14454004)(6486002)(68736007)(4326008)(7416002)(25786009)(6436002)(2501003)(105586002)(26005)(478600001)(6346003)(921003)(1121003);DIR:OUT;SFP:1101;SCL:1;SRVR:DB3PR0402MB3772;H:DB3PR0402MB3916.eurprd04.prod.outlook.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;MX:1;A:1;
authentication-results: spf=none (sender IP is )
 smtp.mailfrom=anson.huang@nxp.com; 
x-ms-exchange-senderadcheck: 1
x-microsoft-antispam-message-info: c0C5ZB+IfIvTAcu6L8ZpflvKID62N9XMvyoiuVdxyTvTz+cBc2IyrQ3EuZ4IUIldTreWdD/HQNEnBwIWzOh92F2BQK7aU2w1b2MoT4FRypYun/II1RCVghbBWrhO7c2bv3Hs4jvk/W21YIlD5Bjk5RLkaeaiVZSi/iurKR0HbwT6qzrv/k2q2HVdpF3lgN8ckXyovygQjNxediRacQDzBFQ6IEvxtWVIZFdX2KWVI1gqaOFtmHVzlQ426rc7Qn4H0oh5Qfq9GAg5G24I+Js8BAtsYpwbVdUWrev7dEjj2U9nt5QEbbF+qqcL1/VzITF3
spamdiagnosticoutput: 1:99
spamdiagnosticmetadata: NSPM
Content-Type: text/plain; charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
X-OriginatorOrg: nxp.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 0e75eefb-7537-49fa-83f8-08d668b55fb2
X-MS-Exchange-CrossTenant-originalarrivaltime: 23 Dec 2018 09:02:32.6220
 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: 686ea1d3-bc2b-4c6f-a92c-d99c5c301635
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DB3PR0402MB3772
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The accelerometer's power supply could be controllable on some
platforms, such as i.MX6Q-SABRESD board, the mma8451's power supplies
are controlled by a GPIO fixed regulator, need to make sure the
regulators are enabled before any communication with mma8451, this
patch adds vdd/vddio regulator operation support.

Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
Acked-by: Martin Kepplinger <martink@posteo.de>
---
ChangeLog since V5:
    - ONLY enable vdd/vddio regulators after both of them are aquired;
    - Since the suspend/resume operations are same as runtime suspend/resum=
e, so just use the
      pm_runtime_force_suspend/resume for suspend/resuem callback to simply=
 the code.
---
 drivers/iio/accel/mma8452.c | 99 +++++++++++++++++++++++++++++++++++------=
----
 1 file changed, 77 insertions(+), 22 deletions(-)

diff --git a/drivers/iio/accel/mma8452.c b/drivers/iio/accel/mma8452.c
index 421a0a8..7519ed5 100644
--- a/drivers/iio/accel/mma8452.c
+++ b/drivers/iio/accel/mma8452.c
@@ -31,6 +31,7 @@
 #include <linux/of_device.h>
 #include <linux/of_irq.h>
 #include <linux/pm_runtime.h>
+#include <linux/regulator/consumer.h>
=20
 #define MMA8452_STATUS				0x00
 #define  MMA8452_STATUS_DRDY			(BIT(2) | BIT(1) | BIT(0))
@@ -107,6 +108,8 @@ struct mma8452_data {
 	u8 data_cfg;
 	const struct mma_chip_info *chip_info;
 	int sleep_val;
+	struct regulator *vdd_reg;
+	struct regulator *vddio_reg;
 };
=20
  /**
@@ -1534,9 +1537,33 @@ static int mma8452_probe(struct i2c_client *client,
 	mutex_init(&data->lock);
 	data->chip_info =3D match->data;
=20
+	data->vdd_reg =3D devm_regulator_get(&client->dev, "vdd");
+	data->vddio_reg =3D devm_regulator_get(&client->dev, "vddio");
+	if (IS_ERR(data->vdd_reg) || IS_ERR(data->vddio_reg)) {
+		if (PTR_ERR(data->vdd_reg) =3D=3D -EPROBE_DEFER ||
+			PTR_ERR(data->vddio_reg) =3D=3D -EPROBE_DEFER)
+			return -EPROBE_DEFER;
+
+		dev_err(&client->dev, "failed to get VDD/VDDIO regulator!\n");
+		return IS_ERR(data->vdd_reg) ?
+		       PTR_ERR(data->vdd_reg) : PTR_ERR(data->vddio_reg);
+	}
+
+	ret =3D regulator_enable(data->vdd_reg);
+	if (ret) {
+		dev_err(&client->dev, "failed to enable VDD regulator!\n");
+		return ret;
+	}
+
+	ret =3D regulator_enable(data->vddio_reg);
+	if (ret) {
+		dev_err(&client->dev, "failed to enable VDDIO regulator!\n");
+		goto disable_regulator_vdd;
+	}
+
 	ret =3D i2c_smbus_read_byte_data(client, MMA8452_WHO_AM_I);
 	if (ret < 0)
-		return ret;
+		goto disable_regulators;
=20
 	switch (ret) {
 	case MMA8451_DEVICE_ID:
@@ -1549,7 +1576,8 @@ static int mma8452_probe(struct i2c_client *client,
 			break;
 		/* else: fall through */
 	default:
-		return -ENODEV;
+		ret =3D -ENODEV;
+		goto disable_regulators;
 	}
=20
 	dev_info(&client->dev, "registering %s accelerometer; ID 0x%x\n",
@@ -1566,13 +1594,13 @@ static int mma8452_probe(struct i2c_client *client,
=20
 	ret =3D mma8452_reset(client);
 	if (ret < 0)
-		return ret;
+		goto disable_regulators;
=20
 	data->data_cfg =3D MMA8452_DATA_CFG_FS_2G;
 	ret =3D i2c_smbus_write_byte_data(client, MMA8452_DATA_CFG,
 					data->data_cfg);
 	if (ret < 0)
-		return ret;
+		goto disable_regulators;
=20
 	/*
 	 * By default set transient threshold to max to avoid events if
@@ -1581,7 +1609,7 @@ static int mma8452_probe(struct i2c_client *client,
 	ret =3D i2c_smbus_write_byte_data(client, MMA8452_TRANSIENT_THS,
 					MMA8452_TRANSIENT_THS_MASK);
 	if (ret < 0)
-		return ret;
+		goto disable_regulators;
=20
 	if (client->irq) {
 		int irq2;
@@ -1595,7 +1623,7 @@ static int mma8452_probe(struct i2c_client *client,
 						MMA8452_CTRL_REG5,
 						data->chip_info->all_events);
 			if (ret < 0)
-				return ret;
+				goto disable_regulators;
=20
 			dev_dbg(&client->dev, "using interrupt line INT1\n");
 		}
@@ -1604,11 +1632,11 @@ static int mma8452_probe(struct i2c_client *client,
 					MMA8452_CTRL_REG4,
 					data->chip_info->enabled_events);
 		if (ret < 0)
-			return ret;
+			goto disable_regulators;
=20
 		ret =3D mma8452_trigger_setup(indio_dev);
 		if (ret < 0)
-			return ret;
+			goto disable_regulators;
 	}
=20
 	data->ctrl_reg1 =3D MMA8452_CTRL_ACTIVE |
@@ -1661,12 +1689,19 @@ static int mma8452_probe(struct i2c_client *client,
 trigger_cleanup:
 	mma8452_trigger_cleanup(indio_dev);
=20
+disable_regulators:
+	regulator_disable(data->vddio_reg);
+
+disable_regulator_vdd:
+	regulator_disable(data->vdd_reg);
+
 	return ret;
 }
=20
 static int mma8452_remove(struct i2c_client *client)
 {
 	struct iio_dev *indio_dev =3D i2c_get_clientdata(client);
+	struct mma8452_data *data =3D iio_priv(indio_dev);
=20
 	iio_device_unregister(indio_dev);
=20
@@ -1678,6 +1713,9 @@ static int mma8452_remove(struct i2c_client *client)
 	mma8452_trigger_cleanup(indio_dev);
 	mma8452_standby(iio_priv(indio_dev));
=20
+	regulator_disable(data->vddio_reg);
+	regulator_disable(data->vdd_reg);
+
 	return 0;
 }
=20
@@ -1696,6 +1734,18 @@ static int mma8452_runtime_suspend(struct device *de=
v)
 		return -EAGAIN;
 	}
=20
+	ret =3D regulator_disable(data->vddio_reg);
+	if (ret) {
+		dev_err(dev, "failed to disable VDDIO regulator\n");
+		return ret;
+	}
+
+	ret =3D regulator_disable(data->vdd_reg);
+	if (ret) {
+		dev_err(dev, "failed to disable VDD regulator\n");
+		return ret;
+	}
+
 	return 0;
 }
=20
@@ -1705,9 +1755,22 @@ static int mma8452_runtime_resume(struct device *dev=
)
 	struct mma8452_data *data =3D iio_priv(indio_dev);
 	int ret, sleep_val;
=20
+	ret =3D regulator_enable(data->vdd_reg);
+	if (ret) {
+		dev_err(dev, "failed to enable VDD regulator\n");
+		return ret;
+	}
+
+	ret =3D regulator_enable(data->vddio_reg);
+	if (ret) {
+		dev_err(dev, "failed to enable VDDIO regulator\n");
+		regulator_disable(data->vdd_reg);
+		return ret;
+	}
+
 	ret =3D mma8452_active(data);
 	if (ret < 0)
-		return ret;
+		goto runtime_resume_failed;
=20
 	ret =3D mma8452_get_odr_index(data);
 	sleep_val =3D 1000 / mma8452_samp_freq[ret][0];
@@ -1717,25 +1780,17 @@ static int mma8452_runtime_resume(struct device *de=
v)
 		msleep_interruptible(sleep_val);
=20
 	return 0;
-}
-#endif
=20
-#ifdef CONFIG_PM_SLEEP
-static int mma8452_suspend(struct device *dev)
-{
-	return mma8452_standby(iio_priv(i2c_get_clientdata(
-		to_i2c_client(dev))));
-}
+runtime_resume_failed:
+	regulator_disable(data->vddio_reg);
+	regulator_disable(data->vdd_reg);
=20
-static int mma8452_resume(struct device *dev)
-{
-	return mma8452_active(iio_priv(i2c_get_clientdata(
-		to_i2c_client(dev))));
+	return ret;
 }
 #endif
=20
 static const struct dev_pm_ops mma8452_pm_ops =3D {
-	SET_SYSTEM_SLEEP_PM_OPS(mma8452_suspend, mma8452_resume)
+	SET_SYSTEM_SLEEP_PM_OPS(pm_runtime_force_suspend, pm_runtime_force_resume=
)
 	SET_RUNTIME_PM_OPS(mma8452_runtime_suspend,
 			   mma8452_runtime_resume, NULL)
 };
--=20
2.7.4

