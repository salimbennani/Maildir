Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  17 Dec 2018 08:31:31 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga007.fm.intel.com (fmsmga007.fm.intel.com [10.253.24.52])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 204B55805E2;
	Sun, 16 Dec 2018 05:15:10 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga007-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 16 Dec 2018 05:15:09 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A6zIe9xf7Lq3OI1nsDQ5SufHElGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc6+bReN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRPDI28?=
 =?us-ascii?q?cYUBEukPMuRWr4f6qFQBsRSwBRK0BO7t0TJImn370Lcm3+k7DQ3KwgotFM8Ovn?=
 =?us-ascii?q?TOq9X1Mb8fX+SyzKnO1zrDc/NW1i376IPVbB0uu/SMUqxqccrWz0kkCgTIjleR?=
 =?us-ascii?q?qYP5IT+Y2P8As2qa7+V8S+6ihXQrqxtvrTiz3McsjZLJhoQIyl/f7yl23IE1Kc?=
 =?us-ascii?q?elSE54eNOpFoZbuSKCN4ZuXM8uX2VltDwnxrAIp5K3ZjUGxZc7yxLFavGKcZCE?=
 =?us-ascii?q?7xH+WOqLJTp1hWhpdKyxihu960Ss1+LxW8qy3V1XtCRKiMPMuWoI1xHL6siIVP?=
 =?us-ascii?q?99/kC51DaR2ADc9PtELVo3laXFMZ4hxKA/lp4JvUTEBC/2l136jK6Qdko65uil?=
 =?us-ascii?q?8/rrbqniq5OGKoN5hB/yPr4zlsG8Heg0KAkDUmqD9eS5zrLj/En5QLtQjv0xl6?=
 =?us-ascii?q?nUqJTaJcUdpq6kDA5Zy4Uj5AilDzegztsYmWALLFVLeRKBkYfpIUrDIO73Dfih?=
 =?us-ascii?q?mVSgijRryO7cPr3nHJrNKmLPkLD7fbZy80Jc0hY8zchD55JIDbEMOPbzWk7ytN?=
 =?us-ascii?q?PGFBM4PBG0zv3jCNV80IMeRG2ODrWYMKPUrV+H+OYvL/OQa48SvTb3M+Il6OL2?=
 =?us-ascii?q?jX8lhV8derGk3ZsNZ3C5AvRpOUKZbWDsgtccC2gKuAU+QffuiF2DVz5TenmzU7?=
 =?us-ascii?q?g95jE9FIKpE4PDSpqxj7yG2SexBodWaXxeClCQDXfocJ2JW/ULaC2MOMNhkTsE?=
 =?us-ascii?q?Vb6nS48mzhyusA76y7x6Luvb4CEYtJTj1MRr6O3Xjx096Tt0D8GF2WGXU250hn?=
 =?us-ascii?q?8IRyMx3K1nu0N90VeD0a97g/BCD9xc/fFJXxw+NZ7dyex6Ft/zVhjAftePVFap?=
 =?us-ascii?q?XNGmDSstQdI2xt8Ee1x9FMm6jhDfwyqqBKcYl7+RC5wy6K7c23nxKNx7y3bJz6?=
 =?us-ascii?q?Qhi1gmQs1SNWypnKJ/9g7TB5LXnEWdjaqlaaMc3CvV/meZ0WWOpF1YUBJ3Uajd?=
 =?us-ascii?q?QH8QfFXWosrj6kPCVbCuD68nPRVHycKFLqtKadjpjVFdSffnOdTeZX+xmmiqCR?=
 =?us-ascii?q?aJwLOMcJTle2EH0CrBD0gElhgZ/WyaOggmGiehv2XeASRzGl31fUPj7/NyqHOh?=
 =?us-ascii?q?QU8y1AGFcUth2qGx+h4Ug/ycVvwS0qgFuCcntzV7AlK908jKBNqHogprZL9cbs?=
 =?us-ascii?q?8l4FdbyWLZsBRwPoChL6BngV4ebwR3vkP02xVrEIlAltIqrHcrzAp0JqKVy1dB?=
 =?us-ascii?q?dzKe3ZDtNbzbMGjy/Baza6HI3lHSysqZ+qAK6P4gsVXsoBmpFlY+83Vgy9RayX?=
 =?us-ascii?q?+c6YvFDQUMUZP9SF049wVnqL7AZCk95ITU1WN3PKmwsz/C3c8pBeQ/xhaheddf?=
 =?us-ascii?q?LL2LFAvoH8IGAMiuLfQgm0K1YRIcIOBS6Kk0MtumdvubwqKkIPxsnTOmjWtd5o?=
 =?us-ascii?q?B93VmB9y59Su7OwpYEzOuU3gqBVzfgklihttr7lpxDZTEXBmC/0zTrBJZNZq1u?=
 =?us-ascii?q?eoYGEX2uI8yrydpknZ7iRnlY+ESlB1wYws+peAOeYEDn0g1UyEsYv2anmSy+zz?=
 =?us-ascii?q?FvlzEpr6yf3DHBwuj4dRoHPHJLS3dmjVv2PYe0iNUaVlCybwc1jBul+Vr6x69D?=
 =?us-ascii?q?qaV/LmnfW0dJczLtL2F/VKu9rb6CY89J6JM1viRbSuW8YVaGSrHjpxsWyT/sH2?=
 =?us-ascii?q?xbxDojbTGlpo35nwBmiGKaNHtzrmDWedtzxRfc49zQX+VR0SAFRCl7iDnXAEaz?=
 =?us-ascii?q?P9+y8NWQlpfDtP2+Vm27Wp1Sdynr0Z2PtC+h6WJ2Bh2/mui5msf7HggizS/7y9?=
 =?us-ascii?q?5qWD3IrRnmZYnnzaa6MeNhfkRzAF/86sx6Gpxxk4cqhZEQ32QaiYuR/XYdjWjz?=
 =?us-ascii?q?NtBb07rkbHURXT4L38LV4A/91U1gNH2Jxpj1VnWAwsR7Ydm6bXgb2iY878BMFa?=
 =?us-ascii?q?eV46ZInSpzolqksw3RZeJxkSsayfsr8HQamf0GuBIxziWBBbAfBUxYPS3vlxuS?=
 =?us-ascii?q?9dy/ortYZH2zcbeuzkpxhs6uDKuNogxHXHb5e5EiHTJ/78llMVLM1mHz5Z/geN?=
 =?us-ascii?q?XKcd0TsRiUmQ/aj+dJMJIxiuYKhS1/NGLhun0lzvQ3jB100pG8oYiHMH5t/KOi?=
 =?us-ascii?q?Dx5cNz31Yd4T+z73gaZfmMaWw56gHpF7FjoXW5voSOqiECgOuvT/KwaODDo8p2?=
 =?us-ascii?q?+AFrXFGg+f7Fpmo2jLE5C2LHyXIHgZzdN/RBiSPkBfgQYUXCkkkZ49DAyl2Mvh?=
 =?us-ascii?q?cEJh7DAL+lH4sgdMyv5vNxTnUGfQvgKoZSkvSJSFMBpa9AJC51rWMcyD6OJ8BT?=
 =?us-ascii?q?pY84alrAyMLGybegtJAXsIWkyCG1DsIL2u6cPc/OifA+q0N+HObqmWqexCS/eI?=
 =?us-ascii?q?woqi04th/zaRL8WPI2NtD/sh1kpYWnB5HcvZli4LSywWkSLNcsGaqA29+i1xss?=
 =?us-ascii?q?Cw7vDrVBjz6ouIDrtYKc9v9AyugaefK+6Qgz50KTZG2ZMNxn/Iy7kf0EQRiyF0?=
 =?us-ascii?q?cDmtHqoPtTTQTKLLgaJXCx8bayVuNMpH9a483w9NOdLFhdPxzLJ3kvk1C1JdX1?=
 =?us-ascii?q?z7hs6pfdAKI326NF7fHkmLKa+JJSfVzMD3e6+8TbxQgf5Qtx2xvzabDkDiMi6C?=
 =?us-ascii?q?lznvSxCgL+VMgDuHMxxZvYG3agxtBnT7TNL6dh27N8d6jSE3wb0xnH/FKXQQPi?=
 =?us-ascii?q?R8c0xTqL2d9idYgvR5G2xc4XtpN+iEmyCF7+bGLpYaq+dkAiNxl+hC+nQ116NV?=
 =?us-ascii?q?7D1YRPxygCbTrsRho1ejkumOzDpoSBtPqjZRi4KNskVvIqHZ9phGWXbZ8xMB92?=
 =?us-ascii?q?SQCxIWp9R7Dt3jobxfyt/KlPG7FDAXz9XR9NAOT+TJM9CWNmEiMFK9BDLJFxkU?=
 =?us-ascii?q?SyWDOmTWhkgbm/aXoC67tJ8//7rrnpMSSrZdHHc8E/4ADUItSN4DK80sdjElmu?=
 =?us-ascii?q?TAytQF+WC5tx/MToNRudbaVaTBUr3UND+FgOwcNFMzyrTiINFWb9Wj1g=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ADAAADTxZch0O0hNFjGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwEBg2onjBVfixdQAQEGgTUUiQEOhG0QAYk3FIFYMxM?=
 =?us-ascii?q?Bh0ciNAkNAQMBAQEBAQECARMBAQEKCwkIKS9CFgGBXSQBgmIBAgIBAQIkEz8FA?=
 =?us-ascii?q?QkBAQoOEyUDDBI2BhMFgx2BaQMIBQgEAaVkM4d0DYIcjD6BD4EHgRGDEoJXgW8?=
 =?us-ascii?q?fBYV2AoEqAQGIDIYVR4EIjycnLgEGAgGOKoMlIwqBU4UcgzGFeoEuj0SLZoIOM?=
 =?us-ascii?q?xo0gV2BToIkAxeOHUAygQIDAQEhE4lhgRorgiABAQ?=
X-IPAS-Result: =?us-ascii?q?A0ADAAADTxZch0O0hNFjGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwEBg2onjBVfixdQAQEGgTUUiQEOhG0QAYk3FIFYMxMBh0ciNAkNAQMBA?=
 =?us-ascii?q?QEBAQECARMBAQEKCwkIKS9CFgGBXSQBgmIBAgIBAQIkEz8FAQkBAQoOEyUDDBI?=
 =?us-ascii?q?2BhMFgx2BaQMIBQgEAaVkM4d0DYIcjD6BD4EHgRGDEoJXgW8fBYV2AoEqAQGID?=
 =?us-ascii?q?IYVR4EIjycnLgEGAgGOKoMlIwqBU4UcgzGFeoEuj0SLZoIOMxo0gV2BToIkAxe?=
 =?us-ascii?q?OHUAygQIDAQEhE4lhgRorgiABAQ?=
X-IronPort-AV: E=Sophos;i="5.56,361,1539673200"; 
   d="scan'208";a="55375609"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 16 Dec 2018 05:15:08 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730448AbeLPNPB (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sun, 16 Dec 2018 08:15:01 -0500
Received: from saturn.retrosnub.co.uk ([46.235.226.198]:54770 "EHLO
        saturn.retrosnub.co.uk" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1730197AbeLPNPA (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sun, 16 Dec 2018 08:15:00 -0500
Received: from archlinux (cpc91196-cmbg18-2-0-cust659.5-4.cable.virginm.net [81.96.234.148])
        by saturn.retrosnub.co.uk (Postfix; Retrosnub mail submission) with ESMTPSA id 2B6409E74A4;
        Sun, 16 Dec 2018 13:14:55 +0000 (GMT)
Date: Sun, 16 Dec 2018 13:14:54 +0000
From: Jonathan Cameron <jic23@jic23.retrosnub.co.uk>
To: Tomasz Duszynski <tduszyns@gmail.com>
Cc: linux-iio@vger.kernel.org, linux-kernel@vger.kernel.org,
        devicetree@vger.kernel.org, robh+dt@kernel.org,
        a.brauchli@elementarea.net
Subject: Re: [PATCH v4 2/3] iio: chemical: add support for Sensirion SPS30
 sensor
Message-ID: <20181216131454.7aea6a95@archlinux>
In-Reply-To: <20181214182803.9006-3-tduszyns@gmail.com>
References: <20181214182803.9006-1-tduszyns@gmail.com>
        <20181214182803.9006-3-tduszyns@gmail.com>
X-Mailer: Claws Mail 3.17.2 (GTK+ 2.24.32; x86_64-pc-linux-gnu)
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Fri, 14 Dec 2018 19:28:02 +0100
Tomasz Duszynski <tduszyns@gmail.com> wrote:

> Add support for Sensirion SPS30 particulate matter sensor.
> 
> Signed-off-by: Tomasz Duszynski <tduszyns@gmail.com>
One minor thing inline I'll fix whilst applying.
Please check I didn't mess it up though!

Thanks,

Jonathan

> ---
>  drivers/iio/chemical/Kconfig  |  11 +
>  drivers/iio/chemical/Makefile |   1 +
>  drivers/iio/chemical/sps30.c  | 406 ++++++++++++++++++++++++++++++++++
>  3 files changed, 418 insertions(+)
>  create mode 100644 drivers/iio/chemical/sps30.c
> 
> diff --git a/drivers/iio/chemical/Kconfig b/drivers/iio/chemical/Kconfig
> index b8e005be4f87..57832b4360e9 100644
> --- a/drivers/iio/chemical/Kconfig
> +++ b/drivers/iio/chemical/Kconfig
> @@ -61,6 +61,17 @@ config IAQCORE
>  	  iAQ-Core Continuous/Pulsed VOC (Volatile Organic Compounds)
>  	  sensors
>  
> +config SPS30
> +	tristate "SPS30 particulate matter sensor"
> +	depends on I2C
> +	select CRC8
> +	help
> +	  Say Y here to build support for the Sensirion SPS30 particulate
> +	  matter sensor.
> +
> +	  To compile this driver as a module, choose M here: the module will
> +	  be called sps30.
> +
>  config VZ89X
>  	tristate "SGX Sensortech MiCS VZ89X VOC sensor"
>  	depends on I2C
> diff --git a/drivers/iio/chemical/Makefile b/drivers/iio/chemical/Makefile
> index 2f4c4ba4d781..9f42f4252151 100644
> --- a/drivers/iio/chemical/Makefile
> +++ b/drivers/iio/chemical/Makefile
> @@ -9,4 +9,5 @@ obj-$(CONFIG_BME680_I2C) += bme680_i2c.o
>  obj-$(CONFIG_BME680_SPI) += bme680_spi.o
>  obj-$(CONFIG_CCS811)		+= ccs811.o
>  obj-$(CONFIG_IAQCORE)		+= ams-iaq-core.o
> +obj-$(CONFIG_SPS30) += sps30.o
>  obj-$(CONFIG_VZ89X)		+= vz89x.o
> diff --git a/drivers/iio/chemical/sps30.c b/drivers/iio/chemical/sps30.c
> new file mode 100644
> index 000000000000..f1cea8699c78
> --- /dev/null
> +++ b/drivers/iio/chemical/sps30.c
> @@ -0,0 +1,406 @@
> +// SPDX-License-Identifier: GPL-2.0
> +/*
> + * Sensirion SPS30 particulate matter sensor driver
> + *
> + * Copyright (c) Tomasz Duszynski <tduszyns@gmail.com>
> + *
> + * I2C slave address: 0x69
> + *
> + * TODO:
> + *  - support for turning on fan cleaning
> + *  - support for reading/setting auto cleaning interval
> + */
> +
> +#define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
> +
> +#include <asm/unaligned.h>
> +#include <linux/crc8.h>
> +#include <linux/delay.h>
> +#include <linux/i2c.h>
> +#include <linux/iio/buffer.h>
> +#include <linux/iio/iio.h>
> +#include <linux/iio/sysfs.h>
> +#include <linux/iio/trigger_consumer.h>
> +#include <linux/iio/triggered_buffer.h>
> +#include <linux/module.h>
> +
> +#define SPS30_CRC8_POLYNOMIAL 0x31
> +/* max number of bytes needed to store PM measurements or serial string */
> +#define SPS30_MAX_READ_SIZE 48
> +/* sensor measures reliably up to 3000 ug / m3 */
> +#define SPS30_MAX_PM 3000
> +
> +/* SPS30 commands */
> +#define SPS30_START_MEAS 0x0010
> +#define SPS30_STOP_MEAS 0x0104
> +#define SPS30_RESET 0xd304
> +#define SPS30_READ_DATA_READY_FLAG 0x0202
> +#define SPS30_READ_DATA 0x0300
> +#define SPS30_READ_SERIAL 0xd033
> +
> +enum {
> +	PM1,
> +	PM2P5,
> +	PM4,
> +	PM10,
> +};
> +
> +struct sps30_state {
> +	struct i2c_client *client;
> +	/*
> +	 * Guards against concurrent access to sensor registers.
> +	 * Must be held whenever sequence of commands is to be executed.
> +	 */
> +	struct mutex lock;
> +};
> +
> +DECLARE_CRC8_TABLE(sps30_crc8_table);
> +
> +static int sps30_write_then_read(struct sps30_state *state, u8 *txbuf,
> +				 int txsize, u8 *rxbuf, int rxsize)
> +{
> +	int ret;
> +
> +	/*
> +	 * Sensor does not support repeated start so instead of
> +	 * sending two i2c messages in a row we just send one by one.
> +	 */
> +	ret = i2c_master_send(state->client, txbuf, txsize);
> +	if (ret != txsize)
> +		return ret < 0 ? ret : -EIO;
> +
> +	if (!rxbuf)
> +		return 0;
> +
> +	ret = i2c_master_recv(state->client, rxbuf, rxsize);
> +	if (ret != rxsize)
> +		return ret < 0 ? ret : -EIO;
> +
> +	return 0;
> +}
> +
> +static int sps30_do_cmd(struct sps30_state *state, u16 cmd, u8 *data, int size)
> +{
> +	/*
> +	 * Internally sensor stores measurements in a following manner:
> +	 *
> +	 * PM1: upper two bytes, crc8, lower two bytes, crc8
> +	 * PM2P5: upper two bytes, crc8, lower two bytes, crc8
> +	 * PM4: upper two bytes, crc8, lower two bytes, crc8
> +	 * PM10: upper two bytes, crc8, lower two bytes, crc8
> +	 *
> +	 * What follows next are number concentration measurements and
> +	 * typical particle size measurement which we omit.
> +	 */
> +	u8 buf[SPS30_MAX_READ_SIZE] = { cmd >> 8, cmd };
> +	int i, ret = 0;
> +
> +	switch (cmd) {
> +	case SPS30_START_MEAS:
> +		buf[2] = 0x03;
> +		buf[3] = 0x00;
> +		buf[4] = crc8(sps30_crc8_table, &buf[2], 2, CRC8_INIT_VALUE);
> +		ret = sps30_write_then_read(state, buf, 5, NULL, 0);
> +		break;
> +	case SPS30_STOP_MEAS:
> +	case SPS30_RESET:
> +		ret = sps30_write_then_read(state, buf, 2, NULL, 0);
> +		break;
> +	case SPS30_READ_DATA_READY_FLAG:
> +	case SPS30_READ_DATA:
> +	case SPS30_READ_SERIAL:
> +		/* every two data bytes are checksummed */
> +		size += size / 2;
> +		ret = sps30_write_then_read(state, buf, 2, buf, size);
> +		break;
> +	}
> +
> +	if (ret)
> +		return ret;
> +
> +	/* validate received data and strip off crc bytes */
> +	for (i = 0; i < size; i += 3) {
> +		u8 crc = crc8(sps30_crc8_table, &buf[i], 2, CRC8_INIT_VALUE);
> +
> +		if (crc != buf[i + 2]) {
> +			dev_err(&state->client->dev,
> +				"data integrity check failed\n");
> +			return -EIO;
> +		}
> +
> +		*data++ = buf[i];
> +		*data++ = buf[i + 1];
> +	}
> +
> +	return 0;
> +}
> +
> +static int sps30_float_to_int_clamped(const u8 *fp)
> +{
> +	int val = get_unaligned_be32(fp);
> +	int mantissa = val & GENMASK(22, 0);
> +	/* this is fine since passed float is always non-negative */
> +	int exp = val >> 23;
> +	int fraction, shift;
> +
> +	/* special case 0 */
> +	if (!exp && !mantissa)
> +		return 0;
> +
> +	exp -= 127;
> +	if (exp < 0) {
> +		/* return values ranging from 1 to 99 */
> +		return ((((1 << 23) + mantissa) * 100) >> 23) >> (-exp);
> +	}
> +
> +	/* return values ranging from 100 to 300000 */
> +	shift = 23 - exp;
> +	val = (1 << exp) + (mantissa >> shift);
> +	if (val >= SPS30_MAX_PM)
> +		return SPS30_MAX_PM * 100;
> +
> +	fraction = mantissa & GENMASK(shift - 1, 0);
> +
> +	return val * 100 + ((fraction * 100) >> shift);
> +}
> +
> +static int sps30_do_meas(struct sps30_state *state, int *data, int size)
> +{
> +	int i, ret, tries = 5;
> +	u8 tmp[16];
> +
> +	while (tries--) {
> +		ret = sps30_do_cmd(state, SPS30_READ_DATA_READY_FLAG, tmp, 2);
> +		if (ret)
> +			return -EIO;
> +
> +		/* new measurements ready to be read */
> +		if (tmp[1] == 1)
> +			break;
> +
> +		msleep_interruptible(300);
> +	}
> +
> +	if (!tries)
> +		return -ETIMEDOUT;
> +
> +	ret = sps30_do_cmd(state, SPS30_READ_DATA, tmp, sizeof(int) * size);
> +	if (ret)
> +		return ret;
> +
> +	for (i = 0; i < size; i++)
> +		data[i] = sps30_float_to_int_clamped(&tmp[4 * i]);
> +
> +	return 0;
> +}
> +
> +static irqreturn_t sps30_trigger_handler(int irq, void *p)
> +{
> +	struct iio_poll_func *pf = p;
> +	struct iio_dev *indio_dev = pf->indio_dev;
> +	struct sps30_state *state = iio_priv(indio_dev);
> +	int ret, data[4 + 2]; /* PM1, PM2P5, PM4, PM10, timestamp */

Totally trivial and I'll fix it, but data should be a fixed
width data type, not an int.  s32 will do nicely.


> +
> +	mutex_lock(&state->lock);
> +	ret = sps30_do_meas(state, data, 4);
> +	mutex_unlock(&state->lock);
> +	if (ret)
> +		goto err;
> +
> +	iio_push_to_buffers_with_timestamp(indio_dev, data,
> +					   iio_get_time_ns(indio_dev));
> +err:
> +	iio_trigger_notify_done(indio_dev->trig);
> +
> +	return IRQ_HANDLED;
> +}
> +
> +static int sps30_read_raw(struct iio_dev *indio_dev,
> +			  struct iio_chan_spec const *chan,
> +			  int *val, int *val2, long mask)
> +{
> +	struct sps30_state *state = iio_priv(indio_dev);
> +	int data[4], ret = -EINVAL;
> +
> +	switch (mask) {
> +	case IIO_CHAN_INFO_PROCESSED:
> +		switch (chan->type) {
> +		case IIO_MASSCONCENTRATION:
> +			mutex_lock(&state->lock);
> +			/* read up to the number of bytes actually needed */
> +			switch (chan->channel2) {
> +			case IIO_MOD_PM1:
> +				ret = sps30_do_meas(state, data, 1);
> +				break;
> +			case IIO_MOD_PM2P5:
> +				ret = sps30_do_meas(state, data, 2);
> +				break;
> +			case IIO_MOD_PM4:
> +				ret = sps30_do_meas(state, data, 3);
> +				break;
> +			case IIO_MOD_PM10:
> +				ret = sps30_do_meas(state, data, 4);
> +				break;
> +			}
> +			mutex_unlock(&state->lock);
> +			if (ret)
> +				return ret;
> +
> +			*val = data[chan->address] / 100;
> +			*val2 = (data[chan->address] % 100) * 10000;
> +
> +			return IIO_VAL_INT_PLUS_MICRO;
> +		default:
> +			return -EINVAL;
> +		}
> +	case IIO_CHAN_INFO_SCALE:
> +		switch (chan->type) {
> +		case IIO_MASSCONCENTRATION:
> +			switch (chan->channel2) {
> +			case IIO_MOD_PM1:
> +			case IIO_MOD_PM2P5:
> +			case IIO_MOD_PM4:
> +			case IIO_MOD_PM10:
> +				*val = 0;
> +				*val2 = 10000;
> +
> +				return IIO_VAL_INT_PLUS_MICRO;
> +			}
> +		default:
> +			return -EINVAL;
> +		}
> +	}
> +
> +	return -EINVAL;
> +}
> +
> +static const struct iio_info sps30_info = {
> +	.read_raw = sps30_read_raw,
> +};
> +
> +#define SPS30_CHAN(_index, _mod) { \
> +	.type = IIO_MASSCONCENTRATION, \
> +	.modified = 1, \
> +	.channel2 = IIO_MOD_ ## _mod, \
> +	.info_mask_separate = BIT(IIO_CHAN_INFO_PROCESSED), \
> +	.info_mask_shared_by_type = BIT(IIO_CHAN_INFO_SCALE), \
> +	.address = _mod, \
> +	.scan_index = _index, \
> +	.scan_type = { \
> +		.sign = 'u', \
> +		.realbits = 19, \
> +		.storagebits = 32, \
> +		.endianness = IIO_CPU, \
> +	}, \
> +}
> +
> +static const struct iio_chan_spec sps30_channels[] = {
> +	SPS30_CHAN(0, PM1),
> +	SPS30_CHAN(1, PM2P5),
> +	SPS30_CHAN(2, PM4),
> +	SPS30_CHAN(3, PM10),
> +	IIO_CHAN_SOFT_TIMESTAMP(4),
> +};
> +
> +static void sps30_stop_meas(void *data)
> +{
> +	struct sps30_state *state = data;
> +
> +	sps30_do_cmd(state, SPS30_STOP_MEAS, NULL, 0);
> +}
> +
> +static const unsigned long sps30_scan_masks[] = { 0x0f, 0x00 };
> +
> +static int sps30_probe(struct i2c_client *client)
> +{
> +	struct iio_dev *indio_dev;
> +	struct sps30_state *state;
> +	u8 buf[32];
> +	int ret;
> +
> +	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C))
> +		return -EOPNOTSUPP;
> +
> +	indio_dev = devm_iio_device_alloc(&client->dev, sizeof(*state));
> +	if (!indio_dev)
> +		return -ENOMEM;
> +
> +	state = iio_priv(indio_dev);
> +	i2c_set_clientdata(client, indio_dev);
> +	state->client = client;
> +	indio_dev->dev.parent = &client->dev;
> +	indio_dev->info = &sps30_info;
> +	indio_dev->name = client->name;
> +	indio_dev->channels = sps30_channels;
> +	indio_dev->num_channels = ARRAY_SIZE(sps30_channels);
> +	indio_dev->modes = INDIO_DIRECT_MODE;
> +	indio_dev->available_scan_masks = sps30_scan_masks;
> +
> +	mutex_init(&state->lock);
> +	crc8_populate_msb(sps30_crc8_table, SPS30_CRC8_POLYNOMIAL);
> +
> +	ret = sps30_do_cmd(state, SPS30_RESET, NULL, 0);
> +	if (ret) {
> +		dev_err(&client->dev, "failed to reset device\n");
> +		return ret;
> +	}
> +	msleep(300);
> +	/*
> +	 * Power-on-reset causes sensor to produce some glitch on i2c bus and
> +	 * some controllers end up in error state. Recover simply by placing
> +	 * some data on the bus, for example STOP_MEAS command, which
> +	 * is NOP in this case.
> +	 */
> +	sps30_do_cmd(state, SPS30_STOP_MEAS, NULL, 0);
> +
> +	ret = sps30_do_cmd(state, SPS30_READ_SERIAL, buf, sizeof(buf));
> +	if (ret) {
> +		dev_err(&client->dev, "failed to read serial number\n");
> +		return ret;
> +	}
> +	/* returned serial number is already NUL terminated */
> +	dev_info(&client->dev, "serial number: %s\n", buf);
> +
> +	ret = sps30_do_cmd(state, SPS30_START_MEAS, NULL, 0);
> +	if (ret) {
> +		dev_err(&client->dev, "failed to start measurement\n");
> +		return ret;
> +	}
> +
> +	ret = devm_add_action_or_reset(&client->dev, sps30_stop_meas, state);
> +	if (ret)
> +		return ret;
> +
> +	ret = devm_iio_triggered_buffer_setup(&client->dev, indio_dev, NULL,
> +					      sps30_trigger_handler, NULL);
> +	if (ret)
> +		return ret;
> +
> +	return devm_iio_device_register(&client->dev, indio_dev);
> +}
> +
> +static const struct i2c_device_id sps30_id[] = {
> +	{ "sps30" },
> +	{ }
> +};
> +MODULE_DEVICE_TABLE(i2c, sps30_id);
> +
> +static const struct of_device_id sps30_of_match[] = {
> +	{ .compatible = "sensirion,sps30" },
> +	{ }
> +};
> +MODULE_DEVICE_TABLE(of, sps30_of_match);
> +
> +static struct i2c_driver sps30_driver = {
> +	.driver = {
> +		.name = "sps30",
> +		.of_match_table = sps30_of_match,
> +	},
> +	.id_table = sps30_id,
> +	.probe_new = sps30_probe,
> +};
> +module_i2c_driver(sps30_driver);
> +
> +MODULE_AUTHOR("Tomasz Duszynski <tduszyns@gmail.com>");
> +MODULE_DESCRIPTION("Sensirion SPS30 particulate matter sensor driver");
> +MODULE_LICENSE("GPL v2");

