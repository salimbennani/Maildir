Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  17 Dec 2018 08:31:42 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 0333C5805E2;
	Sun, 16 Dec 2018 06:08:29 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 16 Dec 2018 06:08:28 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AimVohR1/I+5a4VOJsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segSIvXxwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJPUMhRSSJPH4Cy?=
 =?us-ascii?q?YIkBD+QGMulXs4bzp0AWrRa8HgSsGOHixyVUinLswaE2zeIsGhzG0gw6GNIOtW?=
 =?us-ascii?q?zZotHyNKcUS++10KnIwi/Fb/hLxzry8o3IfQ47ofGLW7J7bM3cyUsuFwzZkFmd?=
 =?us-ascii?q?p5foPzGU1usRrWSW4fBsVfixhG47sQFxpSOvxsExiobSnI4a1lfE+T9kwIY2PN?=
 =?us-ascii?q?C1TlNwb928EJZIqS2WK497Ttk/T2xmpio20KAKtJ2ncCQQyZkqxQbTZv+af4SS?=
 =?us-ascii?q?5h/uVfydLSl2iX9qYr6zmhm//Eumx+bhTMe7ykxKoTBAktTUtnACyRjT6s+fR/?=
 =?us-ascii?q?tj8UeuxyyP2xrQ6u5aO0A0k7TUK5o7zr43jJoTvlzPHi7wmErokK+bblso9vSs?=
 =?us-ascii?q?5uj9f7nrqIGQO5Vphgz9LqgigM2yDOYgPggLRWeb+OC81LP5/U3+RbVHlvk2kq?=
 =?us-ascii?q?jfsJDHKsUXv625DBFP0oYl9Rm/Cy6q0NMWnHkBMl1FYgmKj5bmO17QOvD0F/S/?=
 =?us-ascii?q?jEq2kDdt2f/GOqftApLXLnjMiLvhZ6py61ZAyAovytBS/5ZUCrACIP3tQEPwu8?=
 =?us-ascii?q?HYAwQ9Mwy1xebnFdp82pkfWWKJHq+WLqfSvUWU6eIoJumGfJUVtyrlK/g5+/7u?=
 =?us-ascii?q?imc0mV8HcqmowZsYcne4Eu5mI0WEe3XshNgBHHwOvgo/SuzqlVKDXSRSZ3a0Q6?=
 =?us-ascii?q?Iz+DU7BJi6AofEQ4CnmKaB0zujHp1KemBGDUiBEXXvd4qaQfsMayWSIslnkjwD?=
 =?us-ascii?q?TrWhT44h1ReztA710bZnL+zU+jEGupLnztR6++rTlRQq/zxuE8udy32NT31znm?=
 =?us-ascii?q?4QXTA2x6B/oUt+yluZy6h3mf5YGMdX5/NIVAc6KJHdw/Z7C9D0RgLOYNOJREy6?=
 =?us-ascii?q?TdWhBDE7VsgxzMMWY0ZhB9WiiQjO3ymwDL8TjbCLAJ00/bja33j+PMt9z3fG1K?=
 =?us-ascii?q?88j1gpWMdPNGumhrJh+AjXHYLGj0KZl6Oyf6QGwCHN7HuDzXaJvExATQF/S7vF?=
 =?us-ascii?q?Um4FakvWt9v54FjCQKGoCbggNgtBysuCKq9RZ93tjFVGQurjOdvEb2KwnWewGQ?=
 =?us-ascii?q?iHxreWYIX2fGUd2T3XCFIYnAAL4XaGKQ8+Cz+8rG3EEjxhC0jjY0P2/ul4s3O0?=
 =?us-ascii?q?UEk0whqOb01g0bq15xEUieadS/MVwrILpiMhpy9oE1a62tLcE8CAqBZ5fKVAfd?=
 =?us-ascii?q?M9509K1X7Ytwx4OZygM6Bih14EfwRrpU/u0A93CoFBkcgso3Mn1w5yKaOe0FNc?=
 =?us-ascii?q?eDKUx5HwOrvLKmbs+BCjcbLZ2lbb0NyO4KcA9Ow4q0n/vAGuDkct6XFn3Mda0n?=
 =?us-ascii?q?SC5pTGFhEdUY/sXUkt8Rh6pLbaYjcm6oPQ1H1sN7S0szDY19IoAusl1givf9NF?=
 =?us-ascii?q?PKyYEw/yFtUQB9KyJ+wyh1ipchUEMfhS9a4pJc+pa+GK2a+rPOl6mjKmgn9K4I?=
 =?us-ascii?q?R80kKK6ip9RfTE35cDw/GEwASHUy3wg0umssDygYpEfy0dHnKjySj4A45cfrdy?=
 =?us-ascii?q?fYcXBmi0Oc2429J+i4TrW3FG7l6jBkoK19OzdhqWclPywxdQ1UMRoXG8nSu4zj?=
 =?us-ascii?q?p0kywmr6aF3SzOxfjiewQDOmJRWGZiilLsK5Cuj98GREiocxQplBy96Ef6xqhX?=
 =?us-ascii?q?vqR+I3PIQUdVeSj7NGViUqq2trqfbM9D8pIosSNLUOuiZVCWUKLyoxwf0yn7BW?=
 =?us-ascii?q?tR2Cg7dy22upX+hxF6iniSLGxwrHrafsF83wzf68bfRf5S3zoGQjd3iT/MC1i4?=
 =?us-ascii?q?Ptmp+8iUlpjZvuC/UWKhSoNccS3xwYycsyu74HVgAQejkPCrht3nDQ863Df71t?=
 =?us-ascii?q?ZwUiXEthT8Yojt16mhNeJnf09oBELz6sZgG4F+lJcwi48U2XQAmpqV+n8Hm3/p?=
 =?us-ascii?q?MdpHwaL+cGYNRTkTzt7W+gfl2VdvLnKUx43jUHWdzdBsZ927YmMQxyI84NpGCK?=
 =?us-ascii?q?aS7LxYgyR1pkC0oh7WYfh4hj0d0+ch6GYGg+EVvwog1iCdArERHUZCJyDtmQqH?=
 =?us-ascii?q?78uirKpJfmagaqa/1FBxnd26CLGCowdcWGv2e5s4HC9w6Nl/P0zI0HHp9o7kf9?=
 =?us-ascii?q?zQZ8oJthKIixfAk/RVKJUpm/oWgipnPHjxvHw/xO49kBxuxoq6vImcJmVp/aK5?=
 =?us-ascii?q?BANYNzLva8MS/DHtkbhRnsKM04+zGZVhHy0BXIH0QvKwDDISqfPnOh6VHzImrX?=
 =?us-ascii?q?ebHaffERWb6Ed7tH/PF5GrN3eKJHgW19liRR+dJFBBjwAQRjk1gpk5FgWyzsz7?=
 =?us-ascii?q?bEh5/iwR5kL/qhZUyOJnLRz/XXnEpAuydjc4UpufLAdV7gFf4UfaK9ee4/l3Hy?=
 =?us-ascii?q?FZ+J2hsQOMJnaaZwROEWEGREiEC0r/Mbmp4NnK6/KYCfamL/vSfbWOrvRTVveP?=
 =?us-ascii?q?xZKyy4tm4iyDNsOVMnl5CP073EVDUGt9G8TYnTUPViMWmzjMb86duBez5Cl3ot?=
 =?us-ascii?q?qj//TsXQLl/ZGPBKdKMdVz5xC2hr+ON+6OiyZ4KjZY1ZIMyWXLyLgF214ShD9h?=
 =?us-ascii?q?dyOwEbQbriPNSKPQmqlKDx8UcS9zNc1I774i0QlJI8LUltT11rtghP4vF1hFTU?=
 =?us-ascii?q?Dhmt2uZcESOW69KUjIBFyVO7WGPzHLx8D3bLi4Sb1RiuVUqhKxtSyaE0/lIjSM?=
 =?us-ascii?q?iT3pWwqzPuFLiSGRJAZet52lchZxFWjjS8rragG6MN9ylzE53ac4iW/KNWECNz?=
 =?us-ascii?q?hxaEdNrryW7SNFjfRzAW1B7nx5LeaanyaV9fXXKpETsfFzGCR7i/pa4Ggmy7tS?=
 =?us-ascii?q?9CxFROZ6mC3Xrt5vpVGpiuiOyjp9XxpIpTZGn4aLvURkOaXE+ZhMQ3fE/BQR7W?=
 =?us-ascii?q?qODxQGvcdqCtrqu/MY9t+avaToLzEK08/d+8RUU8HSM8WBdno8OBzmMDjEFE0O?=
 =?us-ascii?q?Sjv9Zk/FgEkIsvaU/2GVp55ygZHplYAJTPcPVl0+TKgyCEVuRodEOpprRDQ/l6?=
 =?us-ascii?q?ORysUPo2e9+kqCDP5Gt4zKA6rBSc7kLyyU2PwdP0MF?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AmAADfWxZch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBAYNqJ4wVX4tnAQEGgTUUiQ+EbYlIFIFiKRMBh0ciNAkNAQMBAQE?=
 =?us-ascii?q?BAQECARMBAQEKCwkIKS9CAQ4BBgGBXSQBgmEBAQEBAgEBAiQTPwUBCQEBChgJJ?=
 =?us-ascii?q?QMMSAYTBYMdgXQFCAQBpVwzih2MPoEPgQeBEYMShEUghXsCgSoBAYdyGoF+hF6?=
 =?us-ascii?q?BCIRsixABBgIBkU8jCoFThRyKWYgPkxuCDjMaNIFdgU6CUI4LQDKBAgMBASETh?=
 =?us-ascii?q?QuER4NkAQE?=
X-IPAS-Result: =?us-ascii?q?A0AmAADfWxZch0O0hNFjHAEBAQQBAQcEAQGBUQcBAQsBAYN?=
 =?us-ascii?q?qJ4wVX4tnAQEGgTUUiQ+EbYlIFIFiKRMBh0ciNAkNAQMBAQEBAQECARMBAQEKC?=
 =?us-ascii?q?wkIKS9CAQ4BBgGBXSQBgmEBAQEBAgEBAiQTPwUBCQEBChgJJQMMSAYTBYMdgXQ?=
 =?us-ascii?q?FCAQBpVwzih2MPoEPgQeBEYMShEUghXsCgSoBAYdyGoF+hF6BCIRsixABBgIBk?=
 =?us-ascii?q?U8jCoFThRyKWYgPkxuCDjMaNIFdgU6CUI4LQDKBAgMBASEThQuER4NkAQE?=
X-IronPort-AV: E=Sophos;i="5.56,361,1539673200"; 
   d="scan'208";a="67046888"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 16 Dec 2018 06:08:26 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730606AbeLPOIY (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sun, 16 Dec 2018 09:08:24 -0500
Received: from saturn.retrosnub.co.uk ([46.235.226.198]:55222 "EHLO
        saturn.retrosnub.co.uk" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1729822AbeLPOIX (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sun, 16 Dec 2018 09:08:23 -0500
Received: from archlinux (cpc91196-cmbg18-2-0-cust659.5-4.cable.virginm.net [81.96.234.148])
        by saturn.retrosnub.co.uk (Postfix; Retrosnub mail submission) with ESMTPSA id 930689E747C;
        Sun, 16 Dec 2018 14:08:19 +0000 (GMT)
Date: Sun, 16 Dec 2018 14:08:17 +0000
From: Jonathan Cameron <jic23@jic23.retrosnub.co.uk>
To: Anson Huang <anson.huang@nxp.com>
Cc: "knaack.h@gmx.de" <knaack.h@gmx.de>,
        "lars@metafoo.de" <lars@metafoo.de>,
        "pmeerw@pmeerw.net" <pmeerw@pmeerw.net>,
        "robh+dt@kernel.org" <robh+dt@kernel.org>,
        "mark.rutland@arm.com" <mark.rutland@arm.com>,
        "gregkh@linuxfoundation.org" <gregkh@linuxfoundation.org>,
        "martink@posteo.de" <martink@posteo.de>,
        Leonard Crestez <leonard.crestez@nxp.com>,
        "rtresidd@electromag.com.au" <rtresidd@electromag.com.au>,
        "gustavo@embeddedor.com" <gustavo@embeddedor.com>,
        "linux-iio@vger.kernel.org" <linux-iio@vger.kernel.org>,
        "devicetree@vger.kernel.org" <devicetree@vger.kernel.org>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        "festevam@gmail.com" <festevam@gmail.com>,
        "preid@electromag.com.au" <preid@electromag.com.au>,
        dl-linux-imx <linux-imx@nxp.com>
Subject: Re: [PATCH V4 2/2] iio: accell: mma8452: add optional vdd/vddio
 regulator operation support
Message-ID: <20181216140817.63b4ca58@archlinux>
In-Reply-To: <20181216104639.00bb90b6@archlinux>
References: <1544504839-10958-1-git-send-email-Anson.Huang@nxp.com>
        <1544504839-10958-2-git-send-email-Anson.Huang@nxp.com>
        <20181216104639.00bb90b6@archlinux>
X-Mailer: Claws Mail 3.17.2 (GTK+ 2.24.32; x86_64-pc-linux-gnu)
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Sun, 16 Dec 2018 10:46:39 +0000
Jonathan Cameron <jic23@kernel.org> wrote:

> On Tue, 11 Dec 2018 05:13:20 +0000
> Anson Huang <anson.huang@nxp.com> wrote:
> 
> > The accelerometer's power supply could be controlled by regulator
> > on some platforms, such as i.MX6Q-SABRESD board, the mma8451's
> > power supply is controlled by a GPIO fixed regulator, need to make
> > sure the regulator is enabled before any communication with mma8451,
> > this patch adds optional vdd/vddio regulator operation support.
> > 
> > Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
> > Acked-by: Martin Kepplinger <martink@posteo.de>  
> Applied to the togreg branch of iio.git and pushed out as testing
> for the autobuilders to play with it.
Sorry again for this.  I was half asleep.  This one isn't
optional either, it just may not be controllable / queryable.

So please use the non optional regulator request.
If there is one specified it will wait for it to be available by
deferring. If not then it'll just provide a stub regulator so that
the rest of the code doesn't need to care.

Patches dropped for now.

Thanks,

Jonathan

> 
> Thanks,
> 
> Jonathan
> 
> > ---
> > ChangeLog since V3:
> > 	- add disabling vdd regulator in vddio error path;
> > 	- improve regulator enable/disable sequence.
> > ---
> >  drivers/iio/accel/mma8452.c | 186 +++++++++++++++++++++++++++++++++++++++++---
> >  1 file changed, 176 insertions(+), 10 deletions(-)
> > 
> > diff --git a/drivers/iio/accel/mma8452.c b/drivers/iio/accel/mma8452.c
> > index 421a0a8..590a95d 100644
> > --- a/drivers/iio/accel/mma8452.c
> > +++ b/drivers/iio/accel/mma8452.c
> > @@ -31,6 +31,7 @@
> >  #include <linux/of_device.h>
> >  #include <linux/of_irq.h>
> >  #include <linux/pm_runtime.h>
> > +#include <linux/regulator/consumer.h>
> >  
> >  #define MMA8452_STATUS				0x00
> >  #define  MMA8452_STATUS_DRDY			(BIT(2) | BIT(1) | BIT(0))
> > @@ -107,6 +108,8 @@ struct mma8452_data {
> >  	u8 data_cfg;
> >  	const struct mma_chip_info *chip_info;
> >  	int sleep_val;
> > +	struct regulator *vdd_reg;
> > +	struct regulator *vddio_reg;
> >  };
> >  
> >   /**
> > @@ -1533,10 +1536,35 @@ static int mma8452_probe(struct i2c_client *client,
> >  	data->client = client;
> >  	mutex_init(&data->lock);
> >  	data->chip_info = match->data;
> > +	data->vdd_reg = devm_regulator_get_optional(&client->dev, "vdd");
> > +	if (!IS_ERR(data->vdd_reg)) {
> > +		ret = regulator_enable(data->vdd_reg);
> > +		if (ret) {
> > +			dev_err(&client->dev, "failed to enable VDD regulator\n");
> > +			return ret;
> > +		}
> > +	} else {
> > +		ret = PTR_ERR(data->vdd_reg);
> > +		if (ret != -ENODEV)
> > +			return ret;
> > +	}
> > +
> > +	data->vddio_reg = devm_regulator_get_optional(&client->dev, "vddio");
> > +	if (!IS_ERR(data->vddio_reg)) {
> > +		ret = regulator_enable(data->vddio_reg);
> > +		if (ret) {
> > +			dev_err(&client->dev, "failed to enable VDDIO regulator\n");
> > +			goto disable_regulator_vdd;
> > +		}
> > +	} else {
> > +		ret = PTR_ERR(data->vddio_reg);
> > +		if (ret != -ENODEV)
> > +			goto disable_regulator_vdd;
> > +	}
> >  
> >  	ret = i2c_smbus_read_byte_data(client, MMA8452_WHO_AM_I);
> >  	if (ret < 0)
> > -		return ret;
> > +		goto disable_regulators;
> >  
> >  	switch (ret) {
> >  	case MMA8451_DEVICE_ID:
> > @@ -1549,7 +1577,8 @@ static int mma8452_probe(struct i2c_client *client,
> >  			break;
> >  		/* else: fall through */
> >  	default:
> > -		return -ENODEV;
> > +		ret = -ENODEV;
> > +		goto disable_regulators;
> >  	}
> >  
> >  	dev_info(&client->dev, "registering %s accelerometer; ID 0x%x\n",
> > @@ -1566,13 +1595,13 @@ static int mma8452_probe(struct i2c_client *client,
> >  
> >  	ret = mma8452_reset(client);
> >  	if (ret < 0)
> > -		return ret;
> > +		goto disable_regulators;
> >  
> >  	data->data_cfg = MMA8452_DATA_CFG_FS_2G;
> >  	ret = i2c_smbus_write_byte_data(client, MMA8452_DATA_CFG,
> >  					data->data_cfg);
> >  	if (ret < 0)
> > -		return ret;
> > +		goto disable_regulators;
> >  
> >  	/*
> >  	 * By default set transient threshold to max to avoid events if
> > @@ -1581,7 +1610,7 @@ static int mma8452_probe(struct i2c_client *client,
> >  	ret = i2c_smbus_write_byte_data(client, MMA8452_TRANSIENT_THS,
> >  					MMA8452_TRANSIENT_THS_MASK);
> >  	if (ret < 0)
> > -		return ret;
> > +		goto disable_regulators;
> >  
> >  	if (client->irq) {
> >  		int irq2;
> > @@ -1595,7 +1624,7 @@ static int mma8452_probe(struct i2c_client *client,
> >  						MMA8452_CTRL_REG5,
> >  						data->chip_info->all_events);
> >  			if (ret < 0)
> > -				return ret;
> > +				goto disable_regulators;
> >  
> >  			dev_dbg(&client->dev, "using interrupt line INT1\n");
> >  		}
> > @@ -1604,11 +1633,11 @@ static int mma8452_probe(struct i2c_client *client,
> >  					MMA8452_CTRL_REG4,
> >  					data->chip_info->enabled_events);
> >  		if (ret < 0)
> > -			return ret;
> > +			goto disable_regulators;
> >  
> >  		ret = mma8452_trigger_setup(indio_dev);
> >  		if (ret < 0)
> > -			return ret;
> > +			goto disable_regulators;
> >  	}
> >  
> >  	data->ctrl_reg1 = MMA8452_CTRL_ACTIVE |
> > @@ -1661,12 +1690,22 @@ static int mma8452_probe(struct i2c_client *client,
> >  trigger_cleanup:
> >  	mma8452_trigger_cleanup(indio_dev);
> >  
> > +disable_regulators:
> > +	if (!IS_ERR(data->vddio_reg))
> > +		regulator_disable(data->vddio_reg);
> > +
> > +disable_regulator_vdd:
> > +	if (!IS_ERR(data->vdd_reg))
> > +		regulator_disable(data->vdd_reg);
> > +
> >  	return ret;
> >  }
> >  
> >  static int mma8452_remove(struct i2c_client *client)
> >  {
> >  	struct iio_dev *indio_dev = i2c_get_clientdata(client);
> > +	struct mma8452_data *data = iio_priv(indio_dev);
> > +	int ret;
> >  
> >  	iio_device_unregister(indio_dev);
> >  
> > @@ -1678,6 +1717,21 @@ static int mma8452_remove(struct i2c_client *client)
> >  	mma8452_trigger_cleanup(indio_dev);
> >  	mma8452_standby(iio_priv(indio_dev));
> >  
> > +	if (!IS_ERR(data->vddio_reg)) {
> > +		ret = regulator_disable(data->vddio_reg);
> > +		if (ret) {
> > +			dev_err(&client->dev, "failed to disable VDDIO regulator\n");
> > +			return ret;
> > +		}
> > +	}
> > +	if (!IS_ERR(data->vdd_reg)) {
> > +		ret = regulator_disable(data->vdd_reg);
> > +		if (ret) {
> > +			dev_err(&client->dev, "failed to disable VDD regulator\n");
> > +			return ret;
> > +		}
> > +	}
> > +
> >  	return 0;
> >  }
> >  
> > @@ -1696,6 +1750,21 @@ static int mma8452_runtime_suspend(struct device *dev)
> >  		return -EAGAIN;
> >  	}
> >  
> > +	if (!IS_ERR(data->vddio_reg)) {
> > +		ret = regulator_disable(data->vddio_reg);
> > +		if (ret) {
> > +			dev_err(dev, "failed to disable VDDIO regulator\n");
> > +			return ret;
> > +		}
> > +	}
> > +	if (!IS_ERR(data->vdd_reg)) {
> > +		ret = regulator_disable(data->vdd_reg);
> > +		if (ret) {
> > +			dev_err(dev, "failed to disable VDD regulator\n");
> > +			return ret;
> > +		}
> > +	}
> > +
> >  	return 0;
> >  }
> >  
> > @@ -1705,6 +1774,23 @@ static int mma8452_runtime_resume(struct device *dev)
> >  	struct mma8452_data *data = iio_priv(indio_dev);
> >  	int ret, sleep_val;
> >  
> > +	if (!IS_ERR(data->vdd_reg)) {
> > +		ret = regulator_enable(data->vdd_reg);
> > +		if (ret) {
> > +			dev_err(dev, "failed to enable VDD regulator\n");
> > +			return ret;
> > +		}
> > +	}
> > +	if (!IS_ERR(data->vddio_reg)) {
> > +		ret = regulator_enable(data->vddio_reg);
> > +		if (ret) {
> > +			dev_err(dev, "failed to enable VDDIO regulator\n");
> > +			if (!IS_ERR(data->vdd_reg))
> > +				regulator_disable(data->vdd_reg);
> > +			return ret;
> > +		}
> > +	}
> > +
> >  	ret = mma8452_active(data);
> >  	if (ret < 0)
> >  		return ret;
> > @@ -1723,14 +1809,94 @@ static int mma8452_runtime_resume(struct device *dev)
> >  #ifdef CONFIG_PM_SLEEP
> >  static int mma8452_suspend(struct device *dev)
> >  {
> > -	return mma8452_standby(iio_priv(i2c_get_clientdata(
> > +	struct iio_dev *indio_dev = i2c_get_clientdata(to_i2c_client(dev));
> > +	struct mma8452_data *data = iio_priv(indio_dev);
> > +	int ret;
> > +
> > +	if (!IS_ERR(data->vdd_reg)) {
> > +		ret = regulator_enable(data->vdd_reg);
> > +		if (ret) {
> > +			dev_err(dev, "failed to enable VDD regulator\n");
> > +			return ret;
> > +		}
> > +	}
> > +	if (!IS_ERR(data->vddio_reg)) {
> > +		ret = regulator_enable(data->vddio_reg);
> > +		if (ret) {
> > +			dev_err(dev, "failed to enable VDDIO regulator\n");
> > +			if (!IS_ERR(data->vdd_reg))
> > +				regulator_disable(data->vdd_reg);
> > +			return ret;
> > +		}
> > +	}
> > +
> > +	ret = mma8452_standby(iio_priv(i2c_get_clientdata(
> >  		to_i2c_client(dev))));
> > +	if (ret)
> > +		return ret;
> > +
> > +	if (!IS_ERR(data->vddio_reg)) {
> > +		ret = regulator_disable(data->vddio_reg);
> > +		if (ret) {
> > +			dev_err(dev, "failed to disable VDDIO regulator\n");
> > +			return ret;
> > +		}
> > +	}
> > +	if (!IS_ERR(data->vdd_reg)) {
> > +		ret = regulator_disable(data->vdd_reg);
> > +		if (ret) {
> > +			dev_err(dev, "failed to disable VDD regulator\n");
> > +			return ret;
> > +		}
> > +	}
> > +
> > +	return 0;
> >  }
> >  
> >  static int mma8452_resume(struct device *dev)
> >  {
> > -	return mma8452_active(iio_priv(i2c_get_clientdata(
> > +	struct iio_dev *indio_dev = i2c_get_clientdata(to_i2c_client(dev));
> > +	struct mma8452_data *data = iio_priv(indio_dev);
> > +	int ret;
> > +
> > +	if (!IS_ERR(data->vdd_reg)) {
> > +		ret = regulator_enable(data->vdd_reg);
> > +		if (ret) {
> > +			dev_err(dev, "failed to enable VDD regulator\n");
> > +			return ret;
> > +		}
> > +	}
> > +	if (!IS_ERR(data->vddio_reg)) {
> > +		ret = regulator_enable(data->vddio_reg);
> > +		if (ret) {
> > +			dev_err(dev, "failed to enable VDDIO regulator\n");
> > +			if (!IS_ERR(data->vdd_reg))
> > +				regulator_disable(data->vdd_reg);
> > +			return ret;
> > +		}
> > +	}
> > +
> > +	ret = mma8452_active(iio_priv(i2c_get_clientdata(
> >  		to_i2c_client(dev))));
> > +	if (ret)
> > +		return ret;
> > +
> > +	if (!IS_ERR(data->vddio_reg)) {
> > +		ret = regulator_disable(data->vddio_reg);
> > +		if (ret) {
> > +			dev_err(dev, "failed to disable VDDIO regulator\n");
> > +			return ret;
> > +		}
> > +	}
> > +	if (!IS_ERR(data->vdd_reg)) {
> > +		ret = regulator_disable(data->vdd_reg);
> > +		if (ret) {
> > +			dev_err(dev, "failed to disable VDD regulator\n");
> > +			return ret;
> > +		}
> > +	}
> > +
> > +	return 0;
> >  }
> >  #endif
> >    
> 

