Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  17 Dec 2018 08:32:00 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 0C3245805FC;
	Sun, 16 Dec 2018 08:08:16 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga004-1.jf.intel.com with ESMTP; 16 Dec 2018 08:08:15 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AheytJxQx/unfifS16dqsyni79dpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64YBeFt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KptVRTmij?=
 =?us-ascii?q?oINyQh/W/ZisJ+kr9VrhGvpxNw34HbfYOaO/RlfqPFf94XXnZBUtpLWiBdHo+x?=
 =?us-ascii?q?dYkCAuwcNuhYtYn9oF4OoAOgCwmrAePg0CRIh37r1qM0zuQhCgDH3QwmH9IVs3?=
 =?us-ascii?q?TUrcj+OaAOUe+o0anI1jTCbvNQ2Tfm84XIfRUhruuNXbJ0a8be1U4vFwbcg1iW?=
 =?us-ascii?q?tIfrPCuV2/wTv2SH6+dsT/+jhmA5pw1rvzSixdsghpPIi48X0lzJ9iF0zJw3KN?=
 =?us-ascii?q?GkUkJ3f8CoHIdKuyyZNYZ7RN4pTXtytyYg0LIGvIa2fCgUx5QjwB7Sc+KHc4eW?=
 =?us-ascii?q?7RL5TuqRIil3hGhjeL2hgxa+60+gyvfzVsWs0VZKqDRKksXUu3wTyxDe7tKLRu?=
 =?us-ascii?q?Zz80u/wzqDygPe5v1eLU01l6fXM5shzaQxlpoXv0TDBCj2mEDuga+Sd0Uk/PWo?=
 =?us-ascii?q?6uv+brXluJCcLYl0hR/6Mqg3ncy+D+I4PRYUX2WA5+S826Ps/VfjTLVJkPI2iK?=
 =?us-ascii?q?/Zv47eJcgBoa65GQBV3p456xmjFzemzMgYnX4fIVJBeRKHjJbmN0vBIfDlFvq/?=
 =?us-ascii?q?h1WskDF2x/HJJLHhA5PNLmTdn7flZ7py90lcyA8rx9BF+51UEq0BIO70WkLptN?=
 =?us-ascii?q?zXFB45MxCuzObgEtl91p4eVniJAq+WK67StV6I5uQyI+iDfoMVuTD9K+Q76P7q?=
 =?us-ascii?q?l3M2hVgdfayx15sNdH+4BuhmI1meYXf0gNcBFnkFshA9TOztjl2CVzlTam22X6?=
 =?us-ascii?q?I94DE7FY2nAZ3CRoCrnLyOwiO7EodKaWBBD1CGCW3oeJmcW/cQdCKSJddsnSYf?=
 =?us-ascii?q?VbihTI8h1guitBXgxLplNefU/iwYtZT+1Nl6/eHTlBcy9SBqAMSZyW2CU2Z0nm?=
 =?us-ascii?q?YQTT8swK9/uVB9ykuE0aVggPxXD9pT6+lNUgc7L5HcyeN6Bsv2WgLAeNeJVVmn?=
 =?us-ascii?q?Ts+nATE3UtI+3dsOb1xhFNWlixDJxzCqDKMNl7yXGJw09brR0GXrKMZj1XnKzq?=
 =?us-ascii?q?khgEMgQstUK2KmgKlz9wzQB47Ml0WUjKKqdaUa3C7Q+2aP12uOvEdEUAFuVaXJ?=
 =?us-ascii?q?R2wQZkzTrd7h/EPNU6euCag7MgtG0cONN7FFasP3gllcRPfsItLeY3mvlGe2Hh?=
 =?us-ascii?q?uIwrKMbIz3e2QSxindCU4EkxwN8naCLwQxGiCho2fGBjx0CV3ve1/s8fV5qH6j?=
 =?us-ascii?q?Uk80zgSKb0p917q1+h8Zn+CcR+kU3rIevCchqjN0HFmm0tLSCtqAoRdhfapGbd?=
 =?us-ascii?q?M85ldHyXzWtwhnMpO8KKBig0YUcx5rsEP2yxV3FoJAnNAwo3Mu0gVzJryX0VNb?=
 =?us-ascii?q?ezyDwJD/J6fYKm/x/BCoda7bwVXe0NeQ+qcS5/U0sVTjvAe1FkU893VrycVa03?=
 =?us-ascii?q?yZ5p/SFgodTYrxUlor9xh9v7zbYjQ965nI2nF2MKi0siXN29QmBOY+zhagftFf?=
 =?us-ascii?q?ML6LFQPoEs0aAdSuJ/Ium1Szch0EO+VS/rYuP8y6b/uGxLKrPOF4kTK8jGRI/J?=
 =?us-ascii?q?py0liR+Cp7UOLI2YgKw+uZ3geeSzjzllOhvd3ploBeYjESGHGyySzlBI5Xe61z?=
 =?us-ascii?q?cpwHCWaoI82r2Np+g4ThVGJf9F6mH1kGwtOmeQKOb1zh2g1dzUQWoX29lSq41T?=
 =?us-ascii?q?B0iCwprqyE0SzKwuTicgcHO2FRSGlji1fsPZa7j9QAUEe0aAgpkQOv5VzmyKhD?=
 =?us-ascii?q?uKR/M27TTF9KfyfsNWFiUaiwtr2Yb85U8pwosiZXUOW6YV+ETL7wuB8a0yLlH2?=
 =?us-ascii?q?tDyzE3bTCqupPlnxNkjGKRNmp8rH3cecto3xfQ+MTcReJN3joBXCR5iSPYBl+m?=
 =?us-ascii?q?M9mr/NWUkYzOsuS/V2KnS51SfjPnzYKGtCun+2JqBQezkOy0mt3iCQI6yzP018?=
 =?us-ascii?q?F2VSXUqxbxeorr2L67Me59fkloGUXz68x1GoxlloswhZcQ2WUVh5mP/HoHl3vz?=
 =?us-ascii?q?Pstf2a7kcHUNQjsLycbP4Af5wE1jMm6Jx4XhW3WYw8thZMO1bnkY2y0j9MBKFL?=
 =?us-ascii?q?mb7KZfkiRruFq4ohncYfx8njcb1Psv52QWg+APuAox0CqdBqoeElVfPSzpjx6I?=
 =?us-ascii?q?9cyxrL1LZGazdri9zFZ+ndekDL2YowBTQnD5eoo5HS9r78VyK1bM0Hz16oH5d9?=
 =?us-ascii?q?jcd9MTthuIkxjei+hZMo4+lv0PhSB/I2LyoWUly/InjRxpxZy1p5KIK2Jp/KKk?=
 =?us-ascii?q?GBJYMiD1atgX+jHsi6Zeg8mX05quHpVnBjUEQp/oQei0HzIVsPTtLxyOHyEkqn?=
 =?us-ascii?q?eHBbrfGheS6EV8oHLKDZ+rLGubJGUDwdVhWRmdJ1FfgAYOUzUhhZM5EgGqxMr8?=
 =?us-ascii?q?cEZ2/DwR51j4qgdSxeJsLRXwTmDfpAKwYDcuVJefNAZW7h1F50rNMc2e6f9zHz?=
 =?us-ascii?q?hF/pK7qgyBMHebZwNODWEGQUGEA1HjPr+z5djP6eSYB+y+L+fQbrWKs+BRS/CI?=
 =?us-ascii?q?xZe32It84zmMLtmPPmVlD/Aj2kpMQ3F5G8famzUOUSAXlDjNb8mUpBii4C13s9?=
 =?us-ascii?q?u//e/vWALu44uPFrRTPc9u+xCwnaeMKeqQiDxlJjZf05MG3WXIx6QH3F4OlyFu?=
 =?us-ascii?q?cCGgHq4dtSHWVqLfhK9WAwQfayNyL8ZI66M83g9QOc/UkN/117h4juIrBFdBT1?=
 =?us-ascii?q?DuhsapZckSKWGnKFzHHFqLNKiBJTDT38H3YKa8RadMg+lOqxKwuSiUE0n4MzSH?=
 =?us-ascii?q?ljnpUQ2vMO5WgCGaOhxepJ+ychJ3BWf/S9LmbwWxMMVrgj0u3b00mnTKOHYcMD?=
 =?us-ascii?q?dmdUNNq7yQ7SVAjfR+G2xO9HxlLeafliad7unYLIsWsPRxDiR1keJa/Go1y79P?=
 =?us-ascii?q?4C5YQ/x1nXiaktk7gVagm/WPwzwvexNLpyxMgsrfv0RpY/7x9JhLAy2C5h8R92?=
 =?us-ascii?q?KLDQkA4dBiTMDs7fN+0N/KwZ70LT5Z4Zr44NAOFs7PK8PPZGYtLAH7CTjPJAQA?=
 =?us-ascii?q?RD+vc2rYghoOw7mp6nSJo81i+dDXk50UR+oDWQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ADAADidxZch0O0hNFjGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBAYJcgQ4ng3yIGV+NJBSJD4RtiUgUgVgZAQE?=
 =?us-ascii?q?YEwGHRyI0CQ0BAwEBAQEBAQIBEwEBAQoLCQgpIwxCAQEBAwkCgWMigmUBAgMBA?=
 =?us-ascii?q?iAEGQEbHQEDAgkBAQUFDgoCAgUhAgIDDAUNAhEBBQEiEwWDHYFoAQMIDQQBmQ0?=
 =?us-ascii?q?8ixB8FgUBF4J3BYQuChknDV2BNwIGEnmKF4EcF4FAP4ERgxKCV4FvHwWDHzGCJ?=
 =?us-ascii?q?gKJOIYVgU+PJycvCY4qgyUjCoFThRyCejeFeoEuj0SJeQYCCQcPIYElgg5NIxW?=
 =?us-ascii?q?DJ4IbCQMXg0qKVD8ygQIDAQEhE4Eog2OFYCuCIAEB?=
X-IPAS-Result: =?us-ascii?q?A0ADAADidxZch0O0hNFjGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBAYJcgQ4ng3yIGV+NJBSJD4RtiUgUgVgZAQEYEwGHRyI0CQ0BA?=
 =?us-ascii?q?wEBAQEBAQIBEwEBAQoLCQgpIwxCAQEBAwkCgWMigmUBAgMBAiAEGQEbHQEDAgk?=
 =?us-ascii?q?BAQUFDgoCAgUhAgIDDAUNAhEBBQEiEwWDHYFoAQMIDQQBmQ08ixB8FgUBF4J3B?=
 =?us-ascii?q?YQuChknDV2BNwIGEnmKF4EcF4FAP4ERgxKCV4FvHwWDHzGCJgKJOIYVgU+PJyc?=
 =?us-ascii?q?vCY4qgyUjCoFThRyCejeFeoEuj0SJeQYCCQcPIYElgg5NIxWDJ4IbCQMXg0qKV?=
 =?us-ascii?q?D8ygQIDAQEhE4Eog2OFYCuCIAEB?=
X-IronPort-AV: E=Sophos;i="5.56,361,1539673200"; 
   d="scan'208";a="57686573"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 16 Dec 2018 08:08:12 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730695AbeLPQIK (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sun, 16 Dec 2018 11:08:10 -0500
Received: from mail-lj1-f194.google.com ([209.85.208.194]:41572 "EHLO
        mail-lj1-f194.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1729822AbeLPQIJ (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sun, 16 Dec 2018 11:08:09 -0500
Received: by mail-lj1-f194.google.com with SMTP id k15-v6so8860286ljc.8;
        Sun, 16 Dec 2018 08:08:07 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=e6yppCnRJWaEY0nsD/Vprn+wt/0iRP9D2qRoprrYkr0=;
        b=ozi+WpwD+9R/+xM4Le/B2Yz1lU2gJz19H942nQ5BORDRtyPm83hdL/fQzVP8FU619u
         Sqnx+7L/dN19kRssQQ8Z/arwDB0Dbn1w9IkGPzAFqmxAozy+H4kEA8gwyzkwrG+756H3
         hix1hnJ6jzx1fr2V1pF0IUTfq3cMm4H8u2Ydsz7MQqHDgk9y5nsxF0cVKnbsnfOycAx3
         OdyW6VCE3IELDfNnT1VD0jptr546E1E/nOKQxSkiAxbos8B8w6fY4vUwZGSTEVIpzLAq
         MUE0RhxxupCjcp5cROVawoh+50i3qmCN70qU0w0l81xOQxD01LIT6xil1c69G6Rd14Xt
         cX9w==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:message-id:references
         :mime-version:content-disposition:in-reply-to:user-agent;
        bh=e6yppCnRJWaEY0nsD/Vprn+wt/0iRP9D2qRoprrYkr0=;
        b=Ns1ae6Y2cR9gg/HiQQi33cn8otA0uTO8Nj7gVYrFLrEZ8m5udOFbdtpieyBUZIjVbn
         Xnaa0PvT1bHv/80FbT+ekYlkX1EDVJA8mD71Tq99nlJuesUTDNH0KzzOFTM/yKXxkSFP
         /payeF1I2+kS+eZbxRLyUXl9ZGWvbVUBxJPFgAmXZLOaUSLwPyKlyfhlGmUhzL5QqEtv
         J7wd8xxG0eN3N1WPROKcGpcb+kTBDDt1SpwoOcMTCFn8FZ67MPfjlESbF7GX05kIS4U2
         WDMrAwYEPWYYc4yoCrPKB4ZaW3Jb6zdVeHOno0jAGAT3g9aTbiH/VmCtyukAJZLmawoi
         GNqg==
X-Gm-Message-State: AA+aEWbA/uAD0IbiO9WeSJ4Oqw0eQ6DbB9lEIVeC9VE+OKGsY4G9jQEZ
        qaKz/ObFCM2V7W9I21yhNpnlAnpjGMc=
X-Google-Smtp-Source: AFSGD/V9GPMNTXZR/Plqyuxw0yGoNx5Eis0BGlMDufenLqu3gH/NOTkQi3iYZfKmF5y4Qiod8fmvwQ==
X-Received: by 2002:a2e:29d7:: with SMTP id p84-v6mr5595291ljp.12.1544976486093;
        Sun, 16 Dec 2018 08:08:06 -0800 (PST)
Received: from localhost (89-70-220-87.dynamic.chello.pl. [89.70.220.87])
        by smtp.gmail.com with ESMTPSA id b69sm2154897lfl.28.2018.12.16.08.08.05
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Sun, 16 Dec 2018 08:08:05 -0800 (PST)
Date: Sun, 16 Dec 2018 17:07:42 +0100
From: Tomasz Duszynski <tduszyns@gmail.com>
To: Jonathan Cameron <jic23@jic23.retrosnub.co.uk>
Cc: Tomasz Duszynski <tduszyns@gmail.com>, linux-iio@vger.kernel.org,
        linux-kernel@vger.kernel.org, devicetree@vger.kernel.org,
        robh+dt@kernel.org, a.brauchli@elementarea.net
Subject: Re: [PATCH v4 2/3] iio: chemical: add support for Sensirion SPS30
 sensor
Message-ID: <20181216160741.GA9975@arch>
References: <20181214182803.9006-1-tduszyns@gmail.com>
 <20181214182803.9006-3-tduszyns@gmail.com>
 <20181216131454.7aea6a95@archlinux>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
In-Reply-To: <20181216131454.7aea6a95@archlinux>
User-Agent: Mutt/1.11.1 (2018-12-01)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Sun, Dec 16, 2018 at 01:14:54PM +0000, Jonathan Cameron wrote:
> On Fri, 14 Dec 2018 19:28:02 +0100
> Tomasz Duszynski <tduszyns@gmail.com> wrote:
>
> > Add support for Sensirion SPS30 particulate matter sensor.
> >
> > Signed-off-by: Tomasz Duszynski <tduszyns@gmail.com>
> One minor thing inline I'll fix whilst applying.
> Please check I didn't mess it up though!
>
> Thanks,
>
> Jonathan
>
> > ---
> >  drivers/iio/chemical/Kconfig  |  11 +
> >  drivers/iio/chemical/Makefile |   1 +
> >  drivers/iio/chemical/sps30.c  | 406 ++++++++++++++++++++++++++++++++++
> >  3 files changed, 418 insertions(+)
> >  create mode 100644 drivers/iio/chemical/sps30.c
> >
> > diff --git a/drivers/iio/chemical/Kconfig b/drivers/iio/chemical/Kconfig
> > index b8e005be4f87..57832b4360e9 100644
> > --- a/drivers/iio/chemical/Kconfig
> > +++ b/drivers/iio/chemical/Kconfig
> > @@ -61,6 +61,17 @@ config IAQCORE
> >  	  iAQ-Core Continuous/Pulsed VOC (Volatile Organic Compounds)
> >  	  sensors
> >
> > +config SPS30
> > +	tristate "SPS30 particulate matter sensor"
> > +	depends on I2C
> > +	select CRC8
> > +	help
> > +	  Say Y here to build support for the Sensirion SPS30 particulate
> > +	  matter sensor.
> > +
> > +	  To compile this driver as a module, choose M here: the module will
> > +	  be called sps30.
> > +
> >  config VZ89X
> >  	tristate "SGX Sensortech MiCS VZ89X VOC sensor"
> >  	depends on I2C
> > diff --git a/drivers/iio/chemical/Makefile b/drivers/iio/chemical/Makefile
> > index 2f4c4ba4d781..9f42f4252151 100644
> > --- a/drivers/iio/chemical/Makefile
> > +++ b/drivers/iio/chemical/Makefile
> > @@ -9,4 +9,5 @@ obj-$(CONFIG_BME680_I2C) += bme680_i2c.o
> >  obj-$(CONFIG_BME680_SPI) += bme680_spi.o
> >  obj-$(CONFIG_CCS811)		+= ccs811.o
> >  obj-$(CONFIG_IAQCORE)		+= ams-iaq-core.o
> > +obj-$(CONFIG_SPS30) += sps30.o
> >  obj-$(CONFIG_VZ89X)		+= vz89x.o
> > diff --git a/drivers/iio/chemical/sps30.c b/drivers/iio/chemical/sps30.c
> > new file mode 100644
> > index 000000000000..f1cea8699c78
> > --- /dev/null
> > +++ b/drivers/iio/chemical/sps30.c
> > @@ -0,0 +1,406 @@
> > +// SPDX-License-Identifier: GPL-2.0
> > +/*
> > + * Sensirion SPS30 particulate matter sensor driver
> > + *
> > + * Copyright (c) Tomasz Duszynski <tduszyns@gmail.com>
> > + *
> > + * I2C slave address: 0x69
> > + *
> > + * TODO:
> > + *  - support for turning on fan cleaning
> > + *  - support for reading/setting auto cleaning interval
> > + */
> > +
> > +#define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
> > +
> > +#include <asm/unaligned.h>
> > +#include <linux/crc8.h>
> > +#include <linux/delay.h>
> > +#include <linux/i2c.h>
> > +#include <linux/iio/buffer.h>
> > +#include <linux/iio/iio.h>
> > +#include <linux/iio/sysfs.h>
> > +#include <linux/iio/trigger_consumer.h>
> > +#include <linux/iio/triggered_buffer.h>
> > +#include <linux/module.h>
> > +
> > +#define SPS30_CRC8_POLYNOMIAL 0x31
> > +/* max number of bytes needed to store PM measurements or serial string */
> > +#define SPS30_MAX_READ_SIZE 48
> > +/* sensor measures reliably up to 3000 ug / m3 */
> > +#define SPS30_MAX_PM 3000
> > +
> > +/* SPS30 commands */
> > +#define SPS30_START_MEAS 0x0010
> > +#define SPS30_STOP_MEAS 0x0104
> > +#define SPS30_RESET 0xd304
> > +#define SPS30_READ_DATA_READY_FLAG 0x0202
> > +#define SPS30_READ_DATA 0x0300
> > +#define SPS30_READ_SERIAL 0xd033
> > +
> > +enum {
> > +	PM1,
> > +	PM2P5,
> > +	PM4,
> > +	PM10,
> > +};
> > +
> > +struct sps30_state {
> > +	struct i2c_client *client;
> > +	/*
> > +	 * Guards against concurrent access to sensor registers.
> > +	 * Must be held whenever sequence of commands is to be executed.
> > +	 */
> > +	struct mutex lock;
> > +};
> > +
> > +DECLARE_CRC8_TABLE(sps30_crc8_table);
> > +
> > +static int sps30_write_then_read(struct sps30_state *state, u8 *txbuf,
> > +				 int txsize, u8 *rxbuf, int rxsize)
> > +{
> > +	int ret;
> > +
> > +	/*
> > +	 * Sensor does not support repeated start so instead of
> > +	 * sending two i2c messages in a row we just send one by one.
> > +	 */
> > +	ret = i2c_master_send(state->client, txbuf, txsize);
> > +	if (ret != txsize)
> > +		return ret < 0 ? ret : -EIO;
> > +
> > +	if (!rxbuf)
> > +		return 0;
> > +
> > +	ret = i2c_master_recv(state->client, rxbuf, rxsize);
> > +	if (ret != rxsize)
> > +		return ret < 0 ? ret : -EIO;
> > +
> > +	return 0;
> > +}
> > +
> > +static int sps30_do_cmd(struct sps30_state *state, u16 cmd, u8 *data, int size)
> > +{
> > +	/*
> > +	 * Internally sensor stores measurements in a following manner:
> > +	 *
> > +	 * PM1: upper two bytes, crc8, lower two bytes, crc8
> > +	 * PM2P5: upper two bytes, crc8, lower two bytes, crc8
> > +	 * PM4: upper two bytes, crc8, lower two bytes, crc8
> > +	 * PM10: upper two bytes, crc8, lower two bytes, crc8
> > +	 *
> > +	 * What follows next are number concentration measurements and
> > +	 * typical particle size measurement which we omit.
> > +	 */
> > +	u8 buf[SPS30_MAX_READ_SIZE] = { cmd >> 8, cmd };
> > +	int i, ret = 0;
> > +
> > +	switch (cmd) {
> > +	case SPS30_START_MEAS:
> > +		buf[2] = 0x03;
> > +		buf[3] = 0x00;
> > +		buf[4] = crc8(sps30_crc8_table, &buf[2], 2, CRC8_INIT_VALUE);
> > +		ret = sps30_write_then_read(state, buf, 5, NULL, 0);
> > +		break;
> > +	case SPS30_STOP_MEAS:
> > +	case SPS30_RESET:
> > +		ret = sps30_write_then_read(state, buf, 2, NULL, 0);
> > +		break;
> > +	case SPS30_READ_DATA_READY_FLAG:
> > +	case SPS30_READ_DATA:
> > +	case SPS30_READ_SERIAL:
> > +		/* every two data bytes are checksummed */
> > +		size += size / 2;
> > +		ret = sps30_write_then_read(state, buf, 2, buf, size);
> > +		break;
> > +	}
> > +
> > +	if (ret)
> > +		return ret;
> > +
> > +	/* validate received data and strip off crc bytes */
> > +	for (i = 0; i < size; i += 3) {
> > +		u8 crc = crc8(sps30_crc8_table, &buf[i], 2, CRC8_INIT_VALUE);
> > +
> > +		if (crc != buf[i + 2]) {
> > +			dev_err(&state->client->dev,
> > +				"data integrity check failed\n");
> > +			return -EIO;
> > +		}
> > +
> > +		*data++ = buf[i];
> > +		*data++ = buf[i + 1];
> > +	}
> > +
> > +	return 0;
> > +}
> > +
> > +static int sps30_float_to_int_clamped(const u8 *fp)
> > +{
> > +	int val = get_unaligned_be32(fp);
> > +	int mantissa = val & GENMASK(22, 0);
> > +	/* this is fine since passed float is always non-negative */
> > +	int exp = val >> 23;
> > +	int fraction, shift;
> > +
> > +	/* special case 0 */
> > +	if (!exp && !mantissa)
> > +		return 0;
> > +
> > +	exp -= 127;
> > +	if (exp < 0) {
> > +		/* return values ranging from 1 to 99 */
> > +		return ((((1 << 23) + mantissa) * 100) >> 23) >> (-exp);
> > +	}
> > +
> > +	/* return values ranging from 100 to 300000 */
> > +	shift = 23 - exp;
> > +	val = (1 << exp) + (mantissa >> shift);
> > +	if (val >= SPS30_MAX_PM)
> > +		return SPS30_MAX_PM * 100;
> > +
> > +	fraction = mantissa & GENMASK(shift - 1, 0);
> > +
> > +	return val * 100 + ((fraction * 100) >> shift);
> > +}
> > +
> > +static int sps30_do_meas(struct sps30_state *state, int *data, int size)
> > +{
> > +	int i, ret, tries = 5;
> > +	u8 tmp[16];
> > +
> > +	while (tries--) {
> > +		ret = sps30_do_cmd(state, SPS30_READ_DATA_READY_FLAG, tmp, 2);
> > +		if (ret)
> > +			return -EIO;
> > +
> > +		/* new measurements ready to be read */
> > +		if (tmp[1] == 1)
> > +			break;
> > +
> > +		msleep_interruptible(300);
> > +	}
> > +
> > +	if (!tries)
> > +		return -ETIMEDOUT;
> > +
> > +	ret = sps30_do_cmd(state, SPS30_READ_DATA, tmp, sizeof(int) * size);
> > +	if (ret)
> > +		return ret;
> > +
> > +	for (i = 0; i < size; i++)
> > +		data[i] = sps30_float_to_int_clamped(&tmp[4 * i]);
> > +
> > +	return 0;
> > +}
> > +
> > +static irqreturn_t sps30_trigger_handler(int irq, void *p)
> > +{
> > +	struct iio_poll_func *pf = p;
> > +	struct iio_dev *indio_dev = pf->indio_dev;
> > +	struct sps30_state *state = iio_priv(indio_dev);
> > +	int ret, data[4 + 2]; /* PM1, PM2P5, PM4, PM10, timestamp */
>
> Totally trivial and I'll fix it, but data should be a fixed
> width data type, not an int.  s32 will do nicely.
>

Good. Thanks.

>
> > +
> > +	mutex_lock(&state->lock);
> > +	ret = sps30_do_meas(state, data, 4);
> > +	mutex_unlock(&state->lock);
> > +	if (ret)
> > +		goto err;
> > +
> > +	iio_push_to_buffers_with_timestamp(indio_dev, data,
> > +					   iio_get_time_ns(indio_dev));
> > +err:
> > +	iio_trigger_notify_done(indio_dev->trig);
> > +
> > +	return IRQ_HANDLED;
> > +}
> > +
> > +static int sps30_read_raw(struct iio_dev *indio_dev,
> > +			  struct iio_chan_spec const *chan,
> > +			  int *val, int *val2, long mask)
> > +{
> > +	struct sps30_state *state = iio_priv(indio_dev);
> > +	int data[4], ret = -EINVAL;
> > +
> > +	switch (mask) {
> > +	case IIO_CHAN_INFO_PROCESSED:
> > +		switch (chan->type) {
> > +		case IIO_MASSCONCENTRATION:
> > +			mutex_lock(&state->lock);
> > +			/* read up to the number of bytes actually needed */
> > +			switch (chan->channel2) {
> > +			case IIO_MOD_PM1:
> > +				ret = sps30_do_meas(state, data, 1);
> > +				break;
> > +			case IIO_MOD_PM2P5:
> > +				ret = sps30_do_meas(state, data, 2);
> > +				break;
> > +			case IIO_MOD_PM4:
> > +				ret = sps30_do_meas(state, data, 3);
> > +				break;
> > +			case IIO_MOD_PM10:
> > +				ret = sps30_do_meas(state, data, 4);
> > +				break;
> > +			}
> > +			mutex_unlock(&state->lock);
> > +			if (ret)
> > +				return ret;
> > +
> > +			*val = data[chan->address] / 100;
> > +			*val2 = (data[chan->address] % 100) * 10000;
> > +
> > +			return IIO_VAL_INT_PLUS_MICRO;
> > +		default:
> > +			return -EINVAL;
> > +		}
> > +	case IIO_CHAN_INFO_SCALE:
> > +		switch (chan->type) {
> > +		case IIO_MASSCONCENTRATION:
> > +			switch (chan->channel2) {
> > +			case IIO_MOD_PM1:
> > +			case IIO_MOD_PM2P5:
> > +			case IIO_MOD_PM4:
> > +			case IIO_MOD_PM10:
> > +				*val = 0;
> > +				*val2 = 10000;
> > +
> > +				return IIO_VAL_INT_PLUS_MICRO;
> > +			}
> > +		default:
> > +			return -EINVAL;
> > +		}
> > +	}
> > +
> > +	return -EINVAL;
> > +}
> > +
> > +static const struct iio_info sps30_info = {
> > +	.read_raw = sps30_read_raw,
> > +};
> > +
> > +#define SPS30_CHAN(_index, _mod) { \
> > +	.type = IIO_MASSCONCENTRATION, \
> > +	.modified = 1, \
> > +	.channel2 = IIO_MOD_ ## _mod, \
> > +	.info_mask_separate = BIT(IIO_CHAN_INFO_PROCESSED), \
> > +	.info_mask_shared_by_type = BIT(IIO_CHAN_INFO_SCALE), \
> > +	.address = _mod, \
> > +	.scan_index = _index, \
> > +	.scan_type = { \
> > +		.sign = 'u', \
> > +		.realbits = 19, \
> > +		.storagebits = 32, \
> > +		.endianness = IIO_CPU, \
> > +	}, \
> > +}
> > +
> > +static const struct iio_chan_spec sps30_channels[] = {
> > +	SPS30_CHAN(0, PM1),
> > +	SPS30_CHAN(1, PM2P5),
> > +	SPS30_CHAN(2, PM4),
> > +	SPS30_CHAN(3, PM10),
> > +	IIO_CHAN_SOFT_TIMESTAMP(4),
> > +};
> > +
> > +static void sps30_stop_meas(void *data)
> > +{
> > +	struct sps30_state *state = data;
> > +
> > +	sps30_do_cmd(state, SPS30_STOP_MEAS, NULL, 0);
> > +}
> > +
> > +static const unsigned long sps30_scan_masks[] = { 0x0f, 0x00 };
> > +
> > +static int sps30_probe(struct i2c_client *client)
> > +{
> > +	struct iio_dev *indio_dev;
> > +	struct sps30_state *state;
> > +	u8 buf[32];
> > +	int ret;
> > +
> > +	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C))
> > +		return -EOPNOTSUPP;
> > +
> > +	indio_dev = devm_iio_device_alloc(&client->dev, sizeof(*state));
> > +	if (!indio_dev)
> > +		return -ENOMEM;
> > +
> > +	state = iio_priv(indio_dev);
> > +	i2c_set_clientdata(client, indio_dev);
> > +	state->client = client;
> > +	indio_dev->dev.parent = &client->dev;
> > +	indio_dev->info = &sps30_info;
> > +	indio_dev->name = client->name;
> > +	indio_dev->channels = sps30_channels;
> > +	indio_dev->num_channels = ARRAY_SIZE(sps30_channels);
> > +	indio_dev->modes = INDIO_DIRECT_MODE;
> > +	indio_dev->available_scan_masks = sps30_scan_masks;
> > +
> > +	mutex_init(&state->lock);
> > +	crc8_populate_msb(sps30_crc8_table, SPS30_CRC8_POLYNOMIAL);
> > +
> > +	ret = sps30_do_cmd(state, SPS30_RESET, NULL, 0);
> > +	if (ret) {
> > +		dev_err(&client->dev, "failed to reset device\n");
> > +		return ret;
> > +	}
> > +	msleep(300);
> > +	/*
> > +	 * Power-on-reset causes sensor to produce some glitch on i2c bus and
> > +	 * some controllers end up in error state. Recover simply by placing
> > +	 * some data on the bus, for example STOP_MEAS command, which
> > +	 * is NOP in this case.
> > +	 */
> > +	sps30_do_cmd(state, SPS30_STOP_MEAS, NULL, 0);
> > +
> > +	ret = sps30_do_cmd(state, SPS30_READ_SERIAL, buf, sizeof(buf));
> > +	if (ret) {
> > +		dev_err(&client->dev, "failed to read serial number\n");
> > +		return ret;
> > +	}
> > +	/* returned serial number is already NUL terminated */
> > +	dev_info(&client->dev, "serial number: %s\n", buf);
> > +
> > +	ret = sps30_do_cmd(state, SPS30_START_MEAS, NULL, 0);
> > +	if (ret) {
> > +		dev_err(&client->dev, "failed to start measurement\n");
> > +		return ret;
> > +	}
> > +
> > +	ret = devm_add_action_or_reset(&client->dev, sps30_stop_meas, state);
> > +	if (ret)
> > +		return ret;
> > +
> > +	ret = devm_iio_triggered_buffer_setup(&client->dev, indio_dev, NULL,
> > +					      sps30_trigger_handler, NULL);
> > +	if (ret)
> > +		return ret;
> > +
> > +	return devm_iio_device_register(&client->dev, indio_dev);
> > +}
> > +
> > +static const struct i2c_device_id sps30_id[] = {
> > +	{ "sps30" },
> > +	{ }
> > +};
> > +MODULE_DEVICE_TABLE(i2c, sps30_id);
> > +
> > +static const struct of_device_id sps30_of_match[] = {
> > +	{ .compatible = "sensirion,sps30" },
> > +	{ }
> > +};
> > +MODULE_DEVICE_TABLE(of, sps30_of_match);
> > +
> > +static struct i2c_driver sps30_driver = {
> > +	.driver = {
> > +		.name = "sps30",
> > +		.of_match_table = sps30_of_match,
> > +	},
> > +	.id_table = sps30_id,
> > +	.probe_new = sps30_probe,
> > +};
> > +module_i2c_driver(sps30_driver);
> > +
> > +MODULE_AUTHOR("Tomasz Duszynski <tduszyns@gmail.com>");
> > +MODULE_DESCRIPTION("Sensirion SPS30 particulate matter sensor driver");
> > +MODULE_LICENSE("GPL v2");
>
