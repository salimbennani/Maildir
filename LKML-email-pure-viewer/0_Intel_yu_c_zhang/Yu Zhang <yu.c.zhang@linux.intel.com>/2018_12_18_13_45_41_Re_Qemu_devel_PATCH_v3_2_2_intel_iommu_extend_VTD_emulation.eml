Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 08:38:27 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 34F085805F0
	for <like.xu@linux.intel.com>; Tue, 18 Dec 2018 06:34:53 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 18 Dec 2018 06:34:52 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AvwfiQR8vLmKk9v9uRHKM819IXTAuvvDOBiVQ1KB2?=
 =?us-ascii?q?1OMcTK2v8tzYMVDF4r011RmVBdWds6oMotGVmpioYXYH75eFvSJKW713fDhBt/?=
 =?us-ascii?q?8rmRc9CtWOE0zxIa2iRSU7GMNfSA0tpCnjYgBaF8nkelLdvGC54yIMFRXjLwp1?=
 =?us-ascii?q?Ifn+FpLPg8it2O2+557ebx9UiDahfLh/MAi4oQLNu8cMnIBsMLwxyhzHontJf+?=
 =?us-ascii?q?RZ22ZlLk+Nkhj/+8m94odt/zxftPw9+cFAV776f7kjQrxDEDsmKWE169b1uhTF?=
 =?us-ascii?q?UACC+2ETUmQSkhpPHgjF8BT3VYr/vyfmquZw3jSRMNboRr4oRzut86ZrSAfpiC?=
 =?us-ascii?q?gZMT457HrXgdF0gK5CvR6tuwBzz4vSbYqINvRxY7ndcMsUS2RBQMhfVCJBDYyg?=
 =?us-ascii?q?YIQSDeUOM/tWr5H/qlUMohayGAehCP/xxT9TnXL2wbE23v49HQ3axgEsAdQDu2?=
 =?us-ascii?q?nUotXvM6cSVPi4w6vVzT7ebPxW2S3y6I7Hchs8pvyNXa9wfdDNxkU1FgLFjk+f?=
 =?us-ascii?q?qYrqPz6O0uQNsm6b7/dvVO61im4nrR1xrSarxss2lobJgYcVx0nC+C5kw4g1Pc?=
 =?us-ascii?q?W1RFBnbdOnCpdcqjyWOohsTs88TWxluDw2xqAEtJKjYSQHzIorywTfZvGHaYSF?=
 =?us-ascii?q?4gzvWPySLDp7gn9uZaixiAyo8Ue6z+3xTsm030hOripCitTMsnEN1wfP6sicUP?=
 =?us-ascii?q?d98UGh2SuV2wDU8OFELlg4lavdK5E/3r49joQfvVjAEyPshUn6kaybel869uWm?=
 =?us-ascii?q?6+nreKjqq52EO49xkA7+M6AumsKlAeQ/NwgDR3Gb9vq51L3+5EH2XatFjuMona?=
 =?us-ascii?q?ndqZzVPsMbprO/AwBJzIkj8BGzDzOn0NQbg3YLNl1EeA+fgojtOlHOJu34DPil?=
 =?us-ascii?q?j1Stljdr2+7JPrn7DprRKXjDlazsfbB6605axwozy81f64hTCrEbL/L/QlXxu8?=
 =?us-ascii?q?DADh8lLwy0xP7qCNF81oMdR22DGKCYML7JvF+M5+IvJfSMZYAPtDb8Lfgl++Dh?=
 =?us-ascii?q?jXsjlVABeqmp2MhfVXajA/4zI1mFeWG+xZAFEHwWpUw4S+rljkDEViRcIHO7Xq?=
 =?us-ascii?q?Y57zd8D5q6DIDFXce0jbmcmSu2AJBSNV1AEU2GRHLhdoGYXKUVZSePZ8NsjDEA?=
 =?us-ascii?q?EKKsUpIszg2Gsgj8xLx6aO3O9XoDqJjh2dNpsvDVjgw47jduDs6QgF2KGitRn2?=
 =?us-ascii?q?gITjIylJs56XBmy02A0K4yy6hdDsB7/f5FUg4mc5XbyropJcr1X1fwY5+7SF+g?=
 =?us-ascii?q?TZ3yECx3RZQjw9YIbG55GtO/nlbC2TanB/kekLndV898yb7Vw3Wkf5U18H3Bzq?=
 =?us-ascii?q?R0ygB+GsY=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AnAAA9BRlchxHrdtBkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgTCCKTmMFV+LGimBZIkVjkWBdhIYFIcdIjQJDQEDAQEBAQEBAgE?=
 =?us-ascii?q?TAQEBCgsJCBsOL4I2BQIDGgEGglsBAQEBAgEBAiQTDAopAwMBAgYBAQoYCRoDC?=
 =?us-ascii?q?AMBCxI2BhMFgx2BaQMNCAEEqEozhUCCSg2CHYw/eg+BDYERgxKCV4gJAokiJIF?=
 =?us-ascii?q?1hRSQJTAHAoIpjAaDJQwYkVePTYomgUaCDk0jgzyCJgEXEo4YNDEBAYEFi3yBd?=
 =?us-ascii?q?wEB?=
X-IPAS-Result: =?us-ascii?q?A0AnAAA9BRlchxHrdtBkHAEBAQQBAQcEAQGBUQcBAQsBgTC?=
 =?us-ascii?q?CKTmMFV+LGimBZIkVjkWBdhIYFIcdIjQJDQEDAQEBAQEBAgETAQEBCgsJCBsOL?=
 =?us-ascii?q?4I2BQIDGgEGglsBAQEBAgEBAiQTDAopAwMBAgYBAQoYCRoDCAMBCxI2BhMFgx2?=
 =?us-ascii?q?BaQMNCAEEqEozhUCCSg2CHYw/eg+BDYERgxKCV4gJAokiJIF1hRSQJTAHAoIpj?=
 =?us-ascii?q?AaDJQwYkVePTYomgUaCDk0jgzyCJgEXEo4YNDEBAYEFi3yBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,368,1539673200"; 
   d="scan'208";a="56360731"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 18 Dec 2018 06:34:40 -0800
Received: from localhost ([::1]:53993 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gZGSF-0004gd-Tx
	for like.xu@linux.intel.com; Tue, 18 Dec 2018 09:34:39 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:59237)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <yu.c.zhang@linux.intel.com>) id 1gZGAO-00077u-1s
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 09:16:15 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <yu.c.zhang@linux.intel.com>) id 1gZGAK-0004r8-RC
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 09:16:12 -0500
Received: from mga01.intel.com ([192.55.52.88]:14427)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <yu.c.zhang@linux.intel.com>)
	id 1gZGAK-0004qe-Bh
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 09:16:08 -0500
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from fmsmga002.fm.intel.com ([10.253.24.26])
	by fmsmga101.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
	18 Dec 2018 05:48:43 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,368,1539673200"; d="scan'208";a="126993792"
Received: from zhangyu-optiplex-9020.bj.intel.com (HELO localhost)
	([10.238.135.159])
	by fmsmga002.fm.intel.com with ESMTP; 18 Dec 2018 05:48:41 -0800
Date: Tue, 18 Dec 2018 21:45:41 +0800
From: Yu Zhang <yu.c.zhang@linux.intel.com>
To: "Michael S. Tsirkin" <mst@redhat.com>
Message-ID: <20181218134540.2q43v6fpvzbsam6h@linux.intel.com>
References: <1544619939-18102-1-git-send-email-yu.c.zhang@linux.intel.com>
	<1544619939-18102-3-git-send-email-yu.c.zhang@linux.intel.com>
	<20181217142902.1ee007c1@Igors-MacBook-Pro.local>
	<20181218094713.gzb4i4zizlu2tj4a@linux.intel.com>
	<20181218100116.6wqncwwhxni4o66t@linux.intel.com>
	<20181218074104-mutt-send-email-mst@kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181218074104-mutt-send-email-mst@kernel.org>
User-Agent: NeoMutt/20180622-66-b94505
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 192.55.52.88
Subject: Re: [Qemu-devel] [PATCH v3 2/2] intel-iommu: extend VTD emulation
 to allow 57-bit IOVA address width.
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Eduardo Habkost <ehabkost@redhat.com>, qemu-devel@nongnu.org,
	Peter Xu <peterx@redhat.com>, Paolo Bonzini <pbonzini@redhat.com>,
	Igor Mammedov <imammedo@redhat.com>, Richard Henderson <rth@twiddle.net>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Tue, Dec 18, 2018 at 07:43:28AM -0500, Michael S. Tsirkin wrote:
> On Tue, Dec 18, 2018 at 06:01:16PM +0800, Yu Zhang wrote:
> > On Tue, Dec 18, 2018 at 05:47:14PM +0800, Yu Zhang wrote:
> > > On Mon, Dec 17, 2018 at 02:29:02PM +0100, Igor Mammedov wrote:
> > > > On Wed, 12 Dec 2018 21:05:39 +0800
> > > > Yu Zhang <yu.c.zhang@linux.intel.com> wrote:
> > > > 
> > > > > A 5-level paging capable VM may choose to use 57-bit IOVA address width.
> > > > > E.g. guest applications may prefer to use its VA as IOVA when performing
> > > > > VFIO map/unmap operations, to avoid the burden of managing the IOVA space.
> > > > > 
> > > > > This patch extends the current vIOMMU logic to cover the extended address
> > > > > width. When creating a VM with 5-level paging feature, one can choose to
> > > > > create a virtual VTD with 5-level paging capability, with configurations
> > > > > like "-device intel-iommu,x-aw-bits=57".
> > > > > 
> > > > > Signed-off-by: Yu Zhang <yu.c.zhang@linux.intel.com>
> > > > > Reviewed-by: Peter Xu <peterx@redhat.com>
> > > > > ---
> > > > > Cc: "Michael S. Tsirkin" <mst@redhat.com>
> > > > > Cc: Marcel Apfelbaum <marcel.apfelbaum@gmail.com>
> > > > > Cc: Paolo Bonzini <pbonzini@redhat.com>
> > > > > Cc: Richard Henderson <rth@twiddle.net>
> > > > > Cc: Eduardo Habkost <ehabkost@redhat.com>
> > > > > Cc: Peter Xu <peterx@redhat.com>
> > > > > ---
> > > > >  hw/i386/intel_iommu.c          | 53 ++++++++++++++++++++++++++++++++----------
> > > > >  hw/i386/intel_iommu_internal.h | 10 ++++++--
> > > > >  include/hw/i386/intel_iommu.h  |  1 +
> > > > >  3 files changed, 50 insertions(+), 14 deletions(-)
> > > > > 
> > > > > diff --git a/hw/i386/intel_iommu.c b/hw/i386/intel_iommu.c
> > > > > index 0e88c63..871110c 100644
> > > > > --- a/hw/i386/intel_iommu.c
> > > > > +++ b/hw/i386/intel_iommu.c
> > > > > @@ -664,16 +664,16 @@ static inline bool vtd_iova_range_check(uint64_t iova, VTDContextEntry *ce,
> > > > >  
> > > > >  /*
> > > > >   * Rsvd field masks for spte:
> > > > > - *     Index [1] to [4] 4k pages
> > > > > - *     Index [5] to [8] large pages
> > > > > + *     Index [1] to [5] 4k pages
> > > > > + *     Index [6] to [10] large pages
> > > > >   */
> > > > > -static uint64_t vtd_paging_entry_rsvd_field[9];
> > > > > +static uint64_t vtd_paging_entry_rsvd_field[11];
> > > > >  
> > > > >  static bool vtd_slpte_nonzero_rsvd(uint64_t slpte, uint32_t level)
> > > > >  {
> > > > >      if (slpte & VTD_SL_PT_PAGE_SIZE_MASK) {
> > > > >          /* Maybe large page */
> > > > > -        return slpte & vtd_paging_entry_rsvd_field[level + 4];
> > > > > +        return slpte & vtd_paging_entry_rsvd_field[level + 5];
> > > > >      } else {
> > > > >          return slpte & vtd_paging_entry_rsvd_field[level];
> > > > >      }
> > > > > @@ -3127,6 +3127,8 @@ static void vtd_init(IntelIOMMUState *s)
> > > > >               VTD_CAP_SAGAW_39bit | VTD_CAP_MGAW(s->aw_bits);
> > > > >      if (s->aw_bits == VTD_AW_48BIT) {
> > > > >          s->cap |= VTD_CAP_SAGAW_48bit;
> > > > > +    } else if (s->aw_bits == VTD_AW_57BIT) {
> > > > > +        s->cap |= VTD_CAP_SAGAW_57bit | VTD_CAP_SAGAW_48bit;
> > > > >      }
> > > > >      s->ecap = VTD_ECAP_QI | VTD_ECAP_IRO;
> > > > >      s->haw_bits = cpu->phys_bits;
> > > > > @@ -3139,10 +3141,12 @@ static void vtd_init(IntelIOMMUState *s)
> > > > >      vtd_paging_entry_rsvd_field[2] = VTD_SPTE_PAGE_L2_RSVD_MASK(s->haw_bits);
> > > > >      vtd_paging_entry_rsvd_field[3] = VTD_SPTE_PAGE_L3_RSVD_MASK(s->haw_bits);
> > > > >      vtd_paging_entry_rsvd_field[4] = VTD_SPTE_PAGE_L4_RSVD_MASK(s->haw_bits);
> > > > > -    vtd_paging_entry_rsvd_field[5] = VTD_SPTE_LPAGE_L1_RSVD_MASK(s->haw_bits);
> > > > > -    vtd_paging_entry_rsvd_field[6] = VTD_SPTE_LPAGE_L2_RSVD_MASK(s->haw_bits);
> > > > > -    vtd_paging_entry_rsvd_field[7] = VTD_SPTE_LPAGE_L3_RSVD_MASK(s->haw_bits);
> > > > > -    vtd_paging_entry_rsvd_field[8] = VTD_SPTE_LPAGE_L4_RSVD_MASK(s->haw_bits);
> > > > > +    vtd_paging_entry_rsvd_field[5] = VTD_SPTE_PAGE_L5_RSVD_MASK(s->haw_bits);
> > > > > +    vtd_paging_entry_rsvd_field[6] = VTD_SPTE_LPAGE_L1_RSVD_MASK(s->haw_bits);
> > > > > +    vtd_paging_entry_rsvd_field[7] = VTD_SPTE_LPAGE_L2_RSVD_MASK(s->haw_bits);
> > > > > +    vtd_paging_entry_rsvd_field[8] = VTD_SPTE_LPAGE_L3_RSVD_MASK(s->haw_bits);
> > > > > +    vtd_paging_entry_rsvd_field[9] = VTD_SPTE_LPAGE_L4_RSVD_MASK(s->haw_bits);
> > > > > +    vtd_paging_entry_rsvd_field[10] = VTD_SPTE_LPAGE_L5_RSVD_MASK(s->haw_bits);
> > > > >  
> > > > >      if (x86_iommu->intr_supported) {
> > > > >          s->ecap |= VTD_ECAP_IR | VTD_ECAP_MHMV;
> > > > > @@ -3241,6 +3245,23 @@ static AddressSpace *vtd_host_dma_iommu(PCIBus *bus, void *opaque, int devfn)
> > > > >      return &vtd_as->as;
> > > > >  }
> > > > >  
> > > > > +static bool host_has_la57(void)
> > > > > +{
> > > > > +    uint32_t ecx, unused;
> > > > > +
> > > > > +    host_cpuid(7, 0, &unused, &unused, &ecx, &unused);
> > > > > +    return ecx & CPUID_7_0_ECX_LA57;
> > > > > +}
> > > > > +
> > > > > +static bool guest_has_la57(void)
> > > > > +{
> > > > > +    CPUState *cs = first_cpu;
> > > > > +    X86CPU *cpu = X86_CPU(cs);
> > > > > +    CPUX86State *env = &cpu->env;
> > > > > +
> > > > > +    return env->features[FEAT_7_0_ECX] & CPUID_7_0_ECX_LA57;
> > > > > +}
> > > > another direct access to CPU fields,
> > > > I'd suggest to set this value when iommu is created
> > > > i.e. add 'la57' property and set from iommu owner.
> > > > 
> > > 
> > > Sorry, do you mean "-device intel-iommu,la57"? I think we do not need
> > > that, because a 5-level capable vIOMMU can be created with properties
> > > like "-device intel-iommu,x-aw-bits=57". 
> > > 
> > > The guest CPU fields are checked to make sure the VM has LA57 CPU feature,
> > > because I believe there shall be no 5-level IOMMU on platforms without LA57
> > > CPUs. 
> 
> I don't necessarily see why these need to be connected.
> If yes pls add code to explain.

Sorry, do you mean the VM shall be able to see a 5-level IOMMU even it does not
have LA57 feature? I do not see any direct connection when asked to enable a 5-level
vIOMMU at first, but I was told(and checked) that DPDK in the VM may choose a VA
value as an IOVA. And if guest has LA57, we should create a 5-level vIOMMU to the VM.
But if the VM even does not have LA57, any specific reason we should give it a 5-level
vIOMMU?

> 
> 
> > > > >  static bool vtd_decide_config(IntelIOMMUState *s, Error **errp)
> > > > >  {
> > > > >      X86IOMMUState *x86_iommu = X86_IOMMU_DEVICE(s);
> > > > > @@ -3267,11 +3288,19 @@ static bool vtd_decide_config(IntelIOMMUState *s, Error **errp)
> > > > >          }
> > > > >      }
> > > > >  
> > > > > -    /* Currently only address widths supported are 39 and 48 bits */
> > > > > +    /* Currently address widths supported are 39, 48, and 57 bits */
> > > > >      if ((s->aw_bits != VTD_AW_39BIT) &&
> > > > > -        (s->aw_bits != VTD_AW_48BIT)) {
> > > > > -        error_setg(errp, "Supported values for x-aw-bits are: %d, %d",
> > > > > -                   VTD_AW_39BIT, VTD_AW_48BIT);
> > > > > +        (s->aw_bits != VTD_AW_48BIT) &&
> > > > > +        (s->aw_bits != VTD_AW_57BIT)) {
> > > > > +        error_setg(errp, "Supported values for x-aw-bits are: %d, %d, %d",
> > > > > +                   VTD_AW_39BIT, VTD_AW_48BIT, VTD_AW_57BIT);
> > > > > +        return false;
> > > > > +    }
> > > > > +
> > > > > +    if ((s->aw_bits == VTD_AW_57BIT) &&
> > > > > +        !(host_has_la57() && guest_has_la57())) {
> > > > Does iommu supposed to work in TCG mode?
> > > > If yes then why it should care about host_has_la57()?
> > > > 
> > > 
> > > Hmm... I did not take TCG mode into consideration. And host_has_la57() is
> > > used to guarantee the host have la57 feature so that iommu shadowing works
> > > for device assignment.
> > > 
> > > I guess iommu shall work in TCG mode(though I am not quite sure about this).
> > > But I do not have any usage case of a 5-level vIOMMU in TCG in mind. So maybe
> > > we can:
> > > 1> check the 'ms->accel' in vtd_decide_config() and do not care about host
> > > capability if it is TCG.
> > 
> > For choice 1, kvm_enabled() might be used instead of ms->accel. Thanks Peter
> > for the remind. :)
> 
> 
> This needs a big comment with an explanation though.
> And probably a TODO to make it work under TCG ...
> 

Thanks, Michael. For choice 1, I believe it should work for TCG(will need test
though), and the condition would be sth. like:

    if ((s->aw_bits == VTD_AW_57BIT) &&
        kvm_enabled() &&
        !host_has_la57())  {

As you can see, though I remove the check of guest_has_la57(), I still kept the
check against host when KVM is enabled. I'm still ready to be convinced for any
requirement why we do not need the guest check. :) 

> > > 2> Or, we can choose to keep as it is, and add the check when 5-level paging
> > > vIOMMU does have usage in TCG?
> > > 
> > > But as to the check of guest capability, I still believe it is necessary. As
> > > said, a VM without LA57 feature shall not see a VT-d with 5-level IOMMU.
> > > 
> > > > > +        error_setg(errp, "Do not support 57-bit DMA address, unless both "
> > > > > +                         "host and guest are capable of 5-level paging");
> > > > >          return false;
> > > > >      }
> > > > >  
> > > > > diff --git a/hw/i386/intel_iommu_internal.h b/hw/i386/intel_iommu_internal.h
> > > > > index d084099..2b29b6f 100644
> > > > > --- a/hw/i386/intel_iommu_internal.h
> > > > > +++ b/hw/i386/intel_iommu_internal.h
> > > > > @@ -114,8 +114,8 @@
> > > > >                                       VTD_INTERRUPT_ADDR_FIRST + 1)
> > > > >  
> > > > >  /* The shift of source_id in the key of IOTLB hash table */
> > > > > -#define VTD_IOTLB_SID_SHIFT         36
> > > > > -#define VTD_IOTLB_LVL_SHIFT         52
> > > > > +#define VTD_IOTLB_SID_SHIFT         45
> > > > > +#define VTD_IOTLB_LVL_SHIFT         61
> > > > >  #define VTD_IOTLB_MAX_SIZE          1024    /* Max size of the hash table */
> > > > >  
> > > > >  /* IOTLB_REG */
> > > > > @@ -212,6 +212,8 @@
> > > > >  #define VTD_CAP_SAGAW_39bit         (0x2ULL << VTD_CAP_SAGAW_SHIFT)
> > > > >   /* 48-bit AGAW, 4-level page-table */
> > > > >  #define VTD_CAP_SAGAW_48bit         (0x4ULL << VTD_CAP_SAGAW_SHIFT)
> > > > > + /* 57-bit AGAW, 5-level page-table */
> > > > > +#define VTD_CAP_SAGAW_57bit         (0x8ULL << VTD_CAP_SAGAW_SHIFT)
> > > > >  
> > > > >  /* IQT_REG */
> > > > >  #define VTD_IQT_QT(val)             (((val) >> 4) & 0x7fffULL)
> > > > > @@ -379,6 +381,8 @@ typedef union VTDInvDesc VTDInvDesc;
> > > > >          (0x800ULL | ~(VTD_HAW_MASK(aw) | VTD_SL_IGN_COM))
> > > > >  #define VTD_SPTE_PAGE_L4_RSVD_MASK(aw) \
> > > > >          (0x880ULL | ~(VTD_HAW_MASK(aw) | VTD_SL_IGN_COM))
> > > > > +#define VTD_SPTE_PAGE_L5_RSVD_MASK(aw) \
> > > > > +        (0x880ULL | ~(VTD_HAW_MASK(aw) | VTD_SL_IGN_COM))
> > > > >  #define VTD_SPTE_LPAGE_L1_RSVD_MASK(aw) \
> > > > >          (0x800ULL | ~(VTD_HAW_MASK(aw) | VTD_SL_IGN_COM))
> > > > >  #define VTD_SPTE_LPAGE_L2_RSVD_MASK(aw) \
> > > > > @@ -387,6 +391,8 @@ typedef union VTDInvDesc VTDInvDesc;
> > > > >          (0x3ffff800ULL | ~(VTD_HAW_MASK(aw) | VTD_SL_IGN_COM))
> > > > >  #define VTD_SPTE_LPAGE_L4_RSVD_MASK(aw) \
> > > > >          (0x880ULL | ~(VTD_HAW_MASK(aw) | VTD_SL_IGN_COM))
> > > > > +#define VTD_SPTE_LPAGE_L5_RSVD_MASK(aw) \
> > > > > +        (0x880ULL | ~(VTD_HAW_MASK(aw) | VTD_SL_IGN_COM))
> > > > >  
> > > > >  /* Information about page-selective IOTLB invalidate */
> > > > >  struct VTDIOTLBPageInvInfo {
> > > > > diff --git a/include/hw/i386/intel_iommu.h b/include/hw/i386/intel_iommu.h
> > > > > index 820451c..7474c4f 100644
> > > > > --- a/include/hw/i386/intel_iommu.h
> > > > > +++ b/include/hw/i386/intel_iommu.h
> > > > > @@ -49,6 +49,7 @@
> > > > >  #define DMAR_REG_SIZE               0x230
> > > > >  #define VTD_AW_39BIT                39
> > > > >  #define VTD_AW_48BIT                48
> > > > > +#define VTD_AW_57BIT                57
> > > > >  #define VTD_ADDRESS_WIDTH           VTD_AW_39BIT
> > > > >  #define VTD_HAW_MASK(aw)            ((1ULL << (aw)) - 1)
> > > > >  
> > > > 
> > > > 
> > > 
> > > B.R.
> > > Yu
> > > 

B.R.
Yu

