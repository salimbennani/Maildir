Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  12 Dec 2018 19:43:36 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id C8AF85803DC;
	Wed, 12 Dec 2018 01:39:05 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 12 Dec 2018 01:39:05 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AMQ2JzBLknlA/P4a1x9mcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgULvv5rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0yRD+s7bpkSAXwhS?=
 =?us-ascii?q?kHKTA37W/ZhM93gq1UvB2hvAR/zozPbYGJKPZzZL/RcMkGSWZdWMtaSixPApm7?=
 =?us-ascii?q?b4sKF+cPOeFYr5Pyp1QQqxu1GAuiC/npyj9TmHD227Ax3uMjEQHGxgMgGckOv2?=
 =?us-ascii?q?rSrNjuKqcSVO60w7PSzTrddf9ZxTD96I3Rfx0nvPqCXqpwfNLPxUUzEw7JlEic?=
 =?us-ascii?q?pIL7Mz+Py+gAsHSX4/BhWO+tk2IrtR19rzu1ysool4XFnJ4ZxkrZ+Sh6xIs4I8?=
 =?us-ascii?q?CzRlRhbt6+CpRQsjmXN4toTcMmRGFloDg6yrIYtp6hZiQKy4ooxwTZa/OZd4iE?=
 =?us-ascii?q?+BXjVPyeITtghXJlfqywhwqq/ES+1uHxUtO43EtEoyZbiNXAq3MA2wDJ5sWGSP?=
 =?us-ascii?q?Zx5kKh1iyO1wDX5OFEO0c0la/DJp4lw74wkIcTsEvaEi/1hkr2lqmWeVsg+uSx?=
 =?us-ascii?q?7OTmbLPmqYGGN4JvlAH+PbohmtalDeQ7LAcORW6b9vq41LH5+k35WrpKguUskq?=
 =?us-ascii?q?bFqJDaOdgbpqmhDg9R04Yj6AiwAy2p0dQFhnQHKFNFeBSaj4nmIV3OIfb4Deuh?=
 =?us-ascii?q?jFSoijtk2/fGPrj5CJXXMnfDiKvhfap660NEyAo819Ff545OBbEGOv7zWlLxu8?=
 =?us-ascii?q?beDh82KAG0x+fnCNNg1oIRQ26PA6mZML/Mvl+M/O4gP+6MZIoNsjbnN/cl/+Lu?=
 =?us-ascii?q?jWM+mVIFf6mp2oUYZGq7HvRhJUWZZ33sj8wFEWcLuAo+UePrhEeDUT5Ve3a9Qa?=
 =?us-ascii?q?Y86isnB4KhCIfJXpqtj6CZ3CenAp1WYXhLBUqXEXfocIWEWO0AaDiILc9jiTEE?=
 =?us-ascii?q?UbmhS4k81RChrgP6yrxnLvbK9S0cr57syN915+jLnxEo6TN0F9id032KT2xsnW?=
 =?us-ascii?q?MHXTk20Lp7oUx80FiD16d4judcFdxS4fNJTwg7OYTdz+x8F9D9RAbBcs2VR1ah?=
 =?us-ascii?q?R9WsGSsxQc4pw98Sf0Z9HM2vgQ3Z0Cq0HbAZjbyLC4Yy8qLHwXfxIcFxy3LF1K?=
 =?us-ascii?q?kki1krWc9PNWyghq5i+AnfHY/Jk0OFl6m0caQQxjLC9GCGzWCWpkFXTBZwUbnZ?=
 =?us-ascii?q?XXAYfkbZsM725l3cQLO0CbQoKA1BydWcJatMcdDpiVRGRPH+ONXReW6xmmGwBQ?=
 =?us-ascii?q?qWybOIdoblZ2Id3CDFAkgejw8T5WqGNRQ5Biq5v2LeDTluFVXzY0Ps8ehysm+7?=
 =?us-ascii?q?QlUzzwGQa01h1ry1+hEOiPyYSvMT2K8EuSg7pzV1Gla9w8zZC96aqwV9e6VcZM?=
 =?us-ascii?q?s34E1b2mLBqwx9IpugIrh4iV4abQt2sF3h1hVtBopbjMglsWklzAxxKaKfzlNM?=
 =?us-ascii?q?bDeY3ZH2Or3KJWj+5hGva6jK2l7A1Naa4LsA6PM9q1/7pgGmClIi82l709lSy3?=
 =?us-ascii?q?ad5ojKABAOXp7rU0c39wJ1p7fVYiQm44PU1HtsMbS7szPY2tIpAvclxQikf9tF?=
 =?us-ascii?q?LKyEEwryGdUAB8eyMOwqh0SpbhUcMeBI9a47I9mpd+Gb166sJupgmiypjX5G4I?=
 =?us-ascii?q?xkzk2D7S58RfPW0JYfxPGY2BCKVzP9jFenr8D2lppIZTAUHmqj1yfkAJRdabF1?=
 =?us-ascii?q?fYYOEW2uOdG4xs1ih57xXH5V7F6iB1Ic1M6pYxaSdEH93QtL2EQToHynnza4zj?=
 =?us-ascii?q?NunzEoqKqfwDLBw+D4eBUbPW5LQXFojU3wLoisk9AaQE+oYhArlBS//0b6xKtb?=
 =?us-ascii?q?pKNlI2nIW0hIfCv2L2BkUqSusLqPeMpP6JIusSVKX+Wwe1GaSrjhoxQE1yPvBX?=
 =?us-ascii?q?dRxDc+dzuyoJX2gwR6iH6BLHZ0tHfYedt/xRDF6NzeRP5R2CELRC15iTnRG1i9?=
 =?us-ascii?q?MMOl/dSSl5ffrO++U3itWYFUcSnu1YmArje05XV2AR2jmPC+gt7nHhI70SPh19?=
 =?us-ascii?q?lqSD/HrBDzYoTw06S6MORnflRnBVPm6sp6HJ1+nZU0hJ0KxXcagZCV92IdkWjv?=
 =?us-ascii?q?KdVbxb7+bH0VSD4Owt7V4xLq1FdtL32X3IL5SmuSwtF6aNakeGMW1Tkw78RLCK?=
 =?us-ascii?q?eS8bxFkjF5olu+rQLNf/d9mi0Rxucp6H4fm+sJohYizj2BArAOGklVJTDslxON?=
 =?us-ascii?q?79ykraRYfmCvcaWr1EplnNCsF7WCogBaWHbkdZYuBy5w7sNjMF3S1H3/8J3reN?=
 =?us-ascii?q?7VbdgLrB2bjw/Aj/RJKJI2jvcFnjBoOWX5vX040eI7iQFu0Iq+vIiGLWVt4a24?=
 =?us-ascii?q?DgRZNj3ze8Mc5DXtgbxCkcaR2oClBo9hFSkTXJv0UfKoFyoftfb9OAaLDjI8sW?=
 =?us-ascii?q?2XGabFEQ+c9UdmrG/PE5axOHGMP3QZydRiRB+AJE1QmgwUXTM6noInGQCu3sDu?=
 =?us-ascii?q?bEB55jUJ7F7ithRM0v5oNwX4UmrHpAaobSo0SIGCLBVM6AFO/VzVMcuY7uJ8BC?=
 =?us-ascii?q?xY+pyhrAqQKm2UfQhIDGcJWlCaCFDnJLWh+d7A8+2ADOqkM/TOeamOqfBZV/qQ?=
 =?us-ascii?q?xZKgzIpm/zWPNsWOJHViDOc72k1MXX9nAcTZhi4PRjcTlyLMac6buRi99jd2rs?=
 =?us-ascii?q?C57PTkRgbv6ZGTBLtVNNVl4wq2jrubN+6MmCZ5Li5V2YkRxXDT0rgQwl4Thztq?=
 =?us-ascii?q?dzmsCrkAsS/NTKTNmq5YFRIbaiVzNNdW4KI4xAVCJcnbitbt3L5ikvE1E0tFVU?=
 =?us-ascii?q?DmmsyxecwKImS9OEnbC0qRKLuGJSPEw8fsbKO4SL1QivhUthKqtTaaFU/jIiqM?=
 =?us-ascii?q?lz3zWx+zNuFMiTmRPAZCt4GlbhZtFW/jQcrmaxKhNt93iDw2wbssiXLLNW4TKz?=
 =?us-ascii?q?58c0xWo72U7CNYhOh/GmNb4npkK+mEhziW7+3CJpkKtvtrB3c8q+UPtHI317dY?=
 =?us-ascii?q?8glaS/Fv3ijftNhjpxehiObZjnIzVBtItyYOh4+Ru0hmEbvW+4MGWnve+h8Jq2?=
 =?us-ascii?q?KKBEJO7497C8fzpqlUy8rGiKP0Lh9G8snI5o0YBs7JOIeJN2cnPRP1GTnSSgwf?=
 =?us-ascii?q?Qmj4G3vYghl/l+ud+3vdjpE8sZXq0M4MSrZdT1EzPu0fFU1/EZoJJ5IhDWBsqq?=
 =?us-ascii?q?KSkMNdvSn2lxLWXsgP5p0=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AeAADm1RBch0O0hNFjHgEGBwaBUQkLA?=
 =?us-ascii?q?YNcBAsnmCaCIZc/FIFfLBMBhzoiNAkNAQMBAQEBAQECARMBAQEIDQkIKS+CNiK?=
 =?us-ascii?q?CbAIkUgYJAlADWgENBQWDHIICBaZPM4owh32EPxeBQD+BEYJkhRgBhXECiTkEh?=
 =?us-ascii?q?wSQRgmRVQIWkUMBiSaRWYIOMxoIGxWDJ5B8HgEBMYEFAQGNJwEB?=
X-IPAS-Result: =?us-ascii?q?A0AeAADm1RBch0O0hNFjHgEGBwaBUQkLAYNcBAsnmCaCIZc?=
 =?us-ascii?q?/FIFfLBMBhzoiNAkNAQMBAQEBAQECARMBAQEIDQkIKS+CNiKCbAIkUgYJAlADW?=
 =?us-ascii?q?gENBQWDHIICBaZPM4owh32EPxeBQD+BEYJkhRgBhXECiTkEhwSQRgmRVQIWkUM?=
 =?us-ascii?q?BiSaRWYIOMxoIGxWDJ5B8HgEBMYEFAQGNJwEB?=
X-IronPort-AV: E=Sophos;i="5.56,343,1539673200"; 
   d="scan'208";a="55565022"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 12 Dec 2018 01:39:04 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726880AbeLLJjC (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 12 Dec 2018 04:39:02 -0500
Received: from ex13-edg-ou-001.vmware.com ([208.91.0.189]:29035 "EHLO
        EX13-EDG-OU-001.vmware.com" rhost-flags-OK-OK-OK-OK)
        by vger.kernel.org with ESMTP id S1726525AbeLLJjB (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 12 Dec 2018 04:39:01 -0500
Received: from sc9-mailhost2.vmware.com (10.113.161.72) by
 EX13-EDG-OU-001.vmware.com (10.113.208.155) with Microsoft SMTP Server id
 15.0.1156.6; Wed, 12 Dec 2018 01:38:59 -0800
Received: from pa-dbc1104.eng.vmware.com (pa-dbc1104.eng.vmware.com [10.162.210.4])
        by sc9-mailhost2.vmware.com (Postfix) with ESMTP id BF593B2049;
        Wed, 12 Dec 2018 04:38:59 -0500 (EST)
From: Jorgen Hansen <jhansen@vmware.com>
To: <netdev@vger.kernel.org>, <linux-kernel@vger.kernel.org>,
        <virtualization@lists.linux-foundation.org>
CC: <gregkh@linuxfoundation.org>, <davem@davemloft.net>,
        <pv-drivers@vmware.com>, Jorgen Hansen <jhansen@vmware.com>
Subject: [PATCH] VSOCK: Send reset control packet when socket is partially bound
Date: Wed, 12 Dec 2018 01:38:59 -0800
Message-ID: <1544607539-52634-1-git-send-email-jhansen@vmware.com>
X-Mailer: git-send-email 2.6.2
MIME-Version: 1.0
Content-Type: text/plain
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

If a server side socket is bound to an address, but not in the listening
state yet, incoming connection requests should receive a reset control
packet in response. However, the function used to send the reset
silently drops the reset packet if the sending socket isn't bound
to a remote address (as is the case for a bound socket not yet in
the listening state). This change fixes this by using the src
of the incoming packet as destination for the reset packet in
this case.

Fixes: d021c344051a ("VSOCK: Introduce VM Sockets")
Reviewed-by: Adit Ranadive <aditr@vmware.com>
Reviewed-by: Vishnu Dasa <vdasa@vmware.com>
Signed-off-by: Jorgen Hansen <jhansen@vmware.com>
---
 net/vmw_vsock/vmci_transport.c | 67 +++++++++++++++++++++++++++++++-----------
 1 file changed, 50 insertions(+), 17 deletions(-)

diff --git a/net/vmw_vsock/vmci_transport.c b/net/vmw_vsock/vmci_transport.c
index 0ae3614..402d84e 100644
--- a/net/vmw_vsock/vmci_transport.c
+++ b/net/vmw_vsock/vmci_transport.c
@@ -264,6 +264,31 @@ vmci_transport_send_control_pkt_bh(struct sockaddr_vm *src,
 }
 
 static int
+vmci_transport_alloc_send_control_pkt(struct sockaddr_vm *src,
+				      struct sockaddr_vm *dst,
+				      enum vmci_transport_packet_type type,
+				      u64 size,
+				      u64 mode,
+				      struct vmci_transport_waiting_info *wait,
+				      u16 proto,
+				      struct vmci_handle handle)
+{
+	struct vmci_transport_packet *pkt;
+	int err;
+
+	pkt = kmalloc(sizeof(*pkt), GFP_KERNEL);
+	if (!pkt)
+		return -ENOMEM;
+
+	err = __vmci_transport_send_control_pkt(pkt, src, dst, type, size,
+						mode, wait, proto, handle,
+						true);
+	kfree(pkt);
+
+	return err;
+}
+
+static int
 vmci_transport_send_control_pkt(struct sock *sk,
 				enum vmci_transport_packet_type type,
 				u64 size,
@@ -272,9 +297,7 @@ vmci_transport_send_control_pkt(struct sock *sk,
 				u16 proto,
 				struct vmci_handle handle)
 {
-	struct vmci_transport_packet *pkt;
 	struct vsock_sock *vsk;
-	int err;
 
 	vsk = vsock_sk(sk);
 
@@ -284,17 +307,10 @@ vmci_transport_send_control_pkt(struct sock *sk,
 	if (!vsock_addr_bound(&vsk->remote_addr))
 		return -EINVAL;
 
-	pkt = kmalloc(sizeof(*pkt), GFP_KERNEL);
-	if (!pkt)
-		return -ENOMEM;
-
-	err = __vmci_transport_send_control_pkt(pkt, &vsk->local_addr,
-						&vsk->remote_addr, type, size,
-						mode, wait, proto, handle,
-						true);
-	kfree(pkt);
-
-	return err;
+	return vmci_transport_alloc_send_control_pkt(&vsk->local_addr,
+						     &vsk->remote_addr,
+						     type, size, mode,
+						     wait, proto, handle);
 }
 
 static int vmci_transport_send_reset_bh(struct sockaddr_vm *dst,
@@ -312,12 +328,29 @@ static int vmci_transport_send_reset_bh(struct sockaddr_vm *dst,
 static int vmci_transport_send_reset(struct sock *sk,
 				     struct vmci_transport_packet *pkt)
 {
+	struct sockaddr_vm dst;
+	struct sockaddr_vm *dst_ptr;
+	struct vsock_sock *vsk;
+
 	if (pkt->type == VMCI_TRANSPORT_PACKET_TYPE_RST)
 		return 0;
-	return vmci_transport_send_control_pkt(sk,
-					VMCI_TRANSPORT_PACKET_TYPE_RST,
-					0, 0, NULL, VSOCK_PROTO_INVALID,
-					VMCI_INVALID_HANDLE);
+
+	vsk = vsock_sk(sk);
+
+	if (!vsock_addr_bound(&vsk->local_addr))
+		return -EINVAL;
+
+	if (vsock_addr_bound(&vsk->remote_addr)) {
+		dst_ptr = &vsk->remote_addr;
+	} else {
+		vsock_addr_init(&dst, pkt->dg.src.context,
+				pkt->src_port);
+		dst_ptr = &dst;
+	}
+	return vmci_transport_alloc_send_control_pkt(&vsk->local_addr, dst_ptr,
+					     VMCI_TRANSPORT_PACKET_TYPE_RST,
+					     0, 0, NULL, VSOCK_PROTO_INVALID,
+					     VMCI_INVALID_HANDLE);
 }
 
 static int vmci_transport_send_negotiate(struct sock *sk, size_t size)
-- 
2.6.2

