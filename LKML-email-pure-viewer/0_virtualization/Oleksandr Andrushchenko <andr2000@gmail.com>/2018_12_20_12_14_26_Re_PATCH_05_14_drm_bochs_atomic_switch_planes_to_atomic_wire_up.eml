Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:35:43 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id CF4C7580522;
	Thu, 20 Dec 2018 04:14:38 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by fmsmga005-1.fm.intel.com with ESMTP; 20 Dec 2018 04:14:37 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AYDop9BWPD7WR7kOwdnLKYMPBFPfV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhCPuKdThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGp6y?=
 =?us-ascii?q?YZUBD+QBPuhWoYfyqFQMohSiCgesH/vvxz1Ti3/q36A3yfgtHR3I0QEiGd8FrX?=
 =?us-ascii?q?TarM/yNKcXSe271a3IwivAb/NNwzj97pXHcgo8qvyQW7J/bNDRyVQ0FwPFklqQ?=
 =?us-ascii?q?qZLqPzWW1uQKrmOW6PBvVeSyhG49tQ19viSjyts3h4nGg4Ia0FHE9SFjzIkpIt?=
 =?us-ascii?q?24TVd2bNi5G5VTryGXL5V6Tt8mTm1ypSo3xKMKtYSmcCUJ1Jgr3R/SZv6ff4WL?=
 =?us-ascii?q?4h/vTvidLSl2iX5/Zr6zmxK//VK+xuHiUMS/zUxEoTBfktbWs3AAzxzT5daDSv?=
 =?us-ascii?q?t65kqhxzmP2B7J6u1eIkA7i7DbK5g/zb40jJYTtl7DHiDulEX3iq+ZaFkk9/C2?=
 =?us-ascii?q?5+j7ZrjqvIKQOoFqhg3kL6gjmdCzDf45PwUMR2Sb/P6z1Lzn/U33WrVKifg2n7?=
 =?us-ascii?q?HdsJDbI8Qbu6G4DxZW0ok98Ra/CSmp0NABkXkAIlNFfgyIj5LyNlHQL/D3E+2/?=
 =?us-ascii?q?j06vkDh13fDGOKPuApHXInjEirfhcq5x61RAxwor0dBf+5VUB6kFIPLyWU/+qs?=
 =?us-ascii?q?bUDxAkMwGvx+bnCdN91p4RWG6VA6+ZNr/SvkGM5u41P+aMY4oVsi7nK/c5//7u?=
 =?us-ascii?q?kWM5mVgFcKmpx5QXaWy4Ee5hI0mDYXrsn80OEWEFvgclSOzqiVuCUSNcZnqoXq?=
 =?us-ascii?q?I84C07B5yiDYvZWo+th7mB1j+hHpJKfmBGFkyMEXDweoqeQPcMaCWSIsx7njwe?=
 =?us-ascii?q?T7ehSZQs1RWvtA/81rpmIfDY+iwetZL/ytd14/ffmg019TxxF86dyX2CT3lonm?=
 =?us-ascii?q?MUQD87xKN/rlZ7yluZ1ah4guZXFdpc5/5SVgc6NJjcz/F1CtzoWwLBeMuJR0ii?=
 =?us-ascii?q?Qtm8HT4xSdcxyccUY0lhA9WikgzD3y2yDrAIjbOLGoI7/rjc33frIcZ90GjJ1K?=
 =?us-ascii?q?8mg1kiQctPMGmmi7V79wjSAY7JjkqYm7yrdaQawC7C6mODwXCSs0FfVQ56Sb/F?=
 =?us-ascii?q?UmwHZkvKsdT54VvPQKK0BrQ5LARN086CJbFMat3yk1pGQuzuONDfY2K3hmexCg?=
 =?us-ascii?q?yExrKKbIr2ZWod2D/RB1QDkwAW5XyGLxQxBj+9o2LCCzxjDU7vY0Lp8el5tHO7?=
 =?us-ascii?q?Tk81wxuWb0F70Lq14BoVhf2aS/Mcxb8EvCYhqzNpHFeyxd7WCtyApxZ/c6VYe9?=
 =?us-ascii?q?8y/FBH1WfBvQxnIpOgN7xihkIZcwlvpUzu0wt4C4penskqtn8l1xdyJr+C31NH?=
 =?us-ascii?q?dDOY2o7wN6bTKmnz+hCvdqHX1kvf0NaQ5qcA9vA4p0//swGuE0oo629n3MVN03?=
 =?us-ascii?q?uA+pXKCxIfUJLsUkot6xd2vbDbYikn6IPS2n1hKq20sj7E29I0C+op0Begf9FD?=
 =?us-ascii?q?MKyaEA/+CdEVB8+rKOYygVimcgoEPPxO9K4zJ86mbfqG17KxM+Z6gT2min5L4I?=
 =?us-ascii?q?Zj3UKW9ipwU/LH0IwBw/6FwASHTTD8jFG6v8DzmIBEYywSH2WlxSjlAo5RerN9?=
 =?us-ascii?q?fYIRBWiyJM23w810h4TxVH5A6F6jG1QG1depeBqTdVD83Rdc1V8KoXyhgia4yz?=
 =?us-ascii?q?10kzc0rquQxiDOwuLidAYZNW5PXmVtkVDsIY2shdAAQEeodxQplAei5UvixahU?=
 =?us-ascii?q?vr5/L2rQQUdPZST2NHttUqiztrqDZc5A9pUovD5TUOS9Z1CaV7H8rwEb0yPlA2?=
 =?us-ascii?q?tR2jQ7eyu2tZX+mhxwkHidI2prrHrFZcFwwg/S5dzGSv5WxDYGRih4iT/MC1i4?=
 =?us-ascii?q?Ptmp+8iUlpjZvuC/UWKhSoNccS3xwYycsyu74HVgAQejkPCrht3nDQ863Df419?=
 =?us-ascii?q?ZwVCXEthb8YpTx2KS8PuJqZU1oBF7668pnFYByiIowhJcM2XcEgpWZ52YIkWD2?=
 =?us-ascii?q?Md9Dw6LxcGINRSIXw97S+AXl3UxjLnGTyI7jWHSS3NBhZ8WkbWMMwS0y8dpKCK?=
 =?us-ascii?q?iP4bxAnCt1pEe4rA3Lbfh8mDcd1eUh6HoAj+4Vvwotyz2XAqoOEklAISzsixOI?=
 =?us-ascii?q?4siirKVQYWaja7mx21B4ndC8F7GCuQBcVW39epcjGy9w88p+PEjN0H319oHrZt?=
 =?us-ascii?q?3QYcgPuR2TlhfKl/JVJ44plvoWmSpnPnrwsmY/xO48iRxuwIu2vIyaK2h2+KK5?=
 =?us-ascii?q?AxhYNiD6Zs8J+zHti7pekdiS34y1ApphHTALVoPyTf20CDISqejnNwGWHT0+sH?=
 =?us-ascii?q?ibHKTQHRSF5Ed6tX7PEI2rN3KKJHkf19piXwKQJEhegAASQTU7kYQ1FgGsxMz9?=
 =?us-ascii?q?bkh54iod6UL/qhtJ0uhoLQXwUn/DpAe0bTc5UJieLB1L7gFb+kfaK8qe4vhoHy?=
 =?us-ascii?q?Ff+J2hoxeAKmiaZwROEGEIVVaIB1HlPrmy+9bA9/KUCfa5L/vLeb+Os/BRV++U?=
 =?us-ascii?q?xZKz1Ytr5zaMOduOPnlhDP0721BPXXNjG8TelDUAVTYXlz/Wb8OAoBe8+yt3rt?=
 =?us-ascii?q?2w8fjxWQLv45ePBKVWMdl15x+2hqKDPfaKhCllMTZYyo8MxXjQxbcFwV4dkDtu?=
 =?us-ascii?q?eCetELgasS7NTbndmqtWDx4ddiNyO9FE76M63glRJ8Hbjsn52aJ/jv4wE11FT0?=
 =?us-ascii?q?Dumtm1ZcwWJGGwLE/HBEeONLicOTLH2d34YaOiRr1Wl+hUsxywuTCGE07sJDiD?=
 =?us-ascii?q?lj/pVwyxPuFIli2UIBteuISleBZ3FWfjVM7magG8MNJvjTw527s0hnbLNW4aKT?=
 =?us-ascii?q?d9ckNNoaeW7SNXmfh/H21B7nx4LeiLgSqZ7u/YKooIvvtvGCh7i+Va4HFpg4dS?=
 =?us-ascii?q?uQ5JXvA9uCzcoNtnpVfuxuqVwypqVDJUpzpLjZ7NtkJnb+GR+oNBHHrJ4h8JxW?=
 =?us-ascii?q?GREAgR4dV/B9DjtrtT1t/X0qXpJ3MK39vK/MdULsnOLMOKeC4oMADtGTPYJBEI?=
 =?us-ascii?q?QT6iKSfUgEkLw9+I8XjAiZw3qYPlnpYUApZdWEYoDfMRCkljH9tKdJ5xUil+ye?=
 =?us-ascii?q?bDpMEN7Hu66hLWQZMJ7dj8SvuODKC3e36ihr5eak5NmOugIA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AqAAC2hhtch0O0hNFkGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUgUBAQELAYFagQOBDieDfYN7kBpQAQEGgQgtFIhuIQMFao1IFIFfEwE?=
 =?us-ascii?q?BGBMBhy4iNQgNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkAYJiAQIDAQIgBBEIA?=
 =?us-ascii?q?RsdAQMCCQEBBQULAwoCAhEVAgIDIBEBBQEcBgEMBgIBAQGCUkuBaQEDCA0EAZw?=
 =?us-ascii?q?FPIsZfBYFAReCdwWCRIF4ChknDV5QZwIGEnmKGIEcgQ+BB4ERJ4JrgWOCWS5Wg?=
 =?us-ascii?q?kmCVwKBKgEBAYgeB4ZSkRgBBgIBgVYFkAQGGIl4EYdUiU2QGQIEAgQFAgUPIYE?=
 =?us-ascii?q?nAYILcIEBbYFOghsMF4NKilU+MoEFAQGNYAEB?=
X-IPAS-Result: =?us-ascii?q?A0AqAAC2hhtch0O0hNFkGwEBAQEDAQEBBwMBAQGBUgUBAQE?=
 =?us-ascii?q?LAYFagQOBDieDfYN7kBpQAQEGgQgtFIhuIQMFao1IFIFfEwEBGBMBhy4iNQgNA?=
 =?us-ascii?q?QMBAQEBAQECARMBAQEIDQkIKSMMgjYkAYJiAQIDAQIgBBEIARsdAQMCCQEBBQU?=
 =?us-ascii?q?LAwoCAhEVAgIDIBEBBQEcBgEMBgIBAQGCUkuBaQEDCA0EAZwFPIsZfBYFAReCd?=
 =?us-ascii?q?wWCRIF4ChknDV5QZwIGEnmKGIEcgQ+BB4ERJ4JrgWOCWS5WgkmCVwKBKgEBAYg?=
 =?us-ascii?q?eB4ZSkRgBBgIBgVYFkAQGGIl4EYdUiU2QGQIEAgQFAgUPIYEnAYILcIEBbYFOg?=
 =?us-ascii?q?hsMF4NKilU+MoEFAQGNYAEB?=
X-IronPort-AV: E=Sophos;i="5.56,376,1539673200"; 
   d="scan'208";a="44824651"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 20 Dec 2018 04:14:35 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1731784AbeLTMOc (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Thu, 20 Dec 2018 07:14:32 -0500
Received: from mail-lj1-f195.google.com ([209.85.208.195]:44809 "EHLO
        mail-lj1-f195.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1728588AbeLTMOa (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 20 Dec 2018 07:14:30 -0500
Received: by mail-lj1-f195.google.com with SMTP id k19-v6so1324770lji.11
        for <linux-kernel@vger.kernel.org>; Thu, 20 Dec 2018 04:14:29 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=subject:to:cc:references:from:message-id:date:user-agent
         :mime-version:in-reply-to:content-transfer-encoding:content-language;
        bh=ykPQgd+D8oV9K7tP/NcA/KVCltx/mFL7ha6/pueegv8=;
        b=ZeSreWHNuOd/8BzwWqmsC26IQzsJ8nu2I8fyzIWWl/5n9SHkbyiWney1TaI8UF1ej/
         mokJ8pbNuVb5DF8Ka6op8VnyXPeLw6w+eHW/pllJQic2lYxlrzgr53TOFnFdeqgvUggo
         yCoXawR3HFsDPwyTa1y3rVzbEpPXhLt3sluBPR1BQqCAHhQ3spMrzxnR+P5OaXQ+QOPm
         nvS76fo9jKcl/zFycOf2kVY35O/Yc8BrHqgQg4M/6o5ywnOtug1UnnpmOR/iN4qypZ59
         tuKPr2YSBgT+vg/QYWYLhHEMEk3LnVqfX714lp6iMUjE7VHmbB+ikQIlMoKfeqihpG29
         mBbg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:subject:to:cc:references:from:message-id:date
         :user-agent:mime-version:in-reply-to:content-transfer-encoding
         :content-language;
        bh=ykPQgd+D8oV9K7tP/NcA/KVCltx/mFL7ha6/pueegv8=;
        b=TjpivzHs7CdvKcFMkHz3Oy89/A1h+w7DaRgtJQQn7YxoAQbgAvI+obYDdr8D7jbLCn
         9T5H/QQh4ClByzvezAis2q5Y7iQHNpl/x9sHkD+rNMhC7dyT8wjQZOPedZ3pwnVtRuqH
         Ik3/qYw266e+BlouwA+Siq2/Iq/rGMotqHoL1DeygkcffQf0kqlUT2eqadGz2HFqqsrj
         6ij4fkNmVlbQYMbc4QRgh3Z1YZWoUw+7LL6uTwVNG70HMn0AP9ZUgUDgkkLJG+BjTNrb
         syl19Z7Elru6jDg016Mbhr5hl+SPIyvVVw8bTC8xy9US+cpkvIJ8T44uOIa01NmcJSmN
         SXwA==
X-Gm-Message-State: AA+aEWZ2iGyND+GQjgWlDi2GnmyGgZG7ahCZVxEUfA0dMq8HYnSgfe9X
        AD58L699VVjXxdg7I7aGKhE=
X-Google-Smtp-Source: AFSGD/XFRHf5mGyo1UXx/x78K+PI4EWcEzZFop3nfuSpiBUMQoITdp8uyjBSavhR6P2eE9brswzYWg==
X-Received: by 2002:a2e:a202:: with SMTP id h2-v6mr14878874ljm.72.1545308068073;
        Thu, 20 Dec 2018 04:14:28 -0800 (PST)
Received: from [10.17.182.20] (ll-22.209.223.85.sovam.net.ua. [85.223.209.22])
        by smtp.gmail.com with ESMTPSA id s24sm4178942lfc.30.2018.12.20.04.14.26
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Thu, 20 Dec 2018 04:14:27 -0800 (PST)
Subject: Re: [PATCH 05/14] drm/bochs: atomic: switch planes to atomic, wire up
 helpers.
To: Gerd Hoffmann <kraxel@redhat.com>, dri-devel@lists.freedesktop.org,
        David Airlie <airlied@redhat.com>
Cc: David Airlie <airlied@linux.ie>,
        open list <linux-kernel@vger.kernel.org>,
        "open list:DRM DRIVER FOR BOCHS VIRTUAL GPU" 
        <virtualization@lists.linux-foundation.org>
References: <20181219115127.31359-1-kraxel@redhat.com>
 <20181219115127.31359-6-kraxel@redhat.com>
From: Oleksandr Andrushchenko <andr2000@gmail.com>
Message-ID: <277f1e16-aa7b-b741-4ceb-3dea0f776a60@gmail.com>
Date: Thu, 20 Dec 2018 14:14:26 +0200
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.2.1
MIME-Version: 1.0
In-Reply-To: <20181219115127.31359-6-kraxel@redhat.com>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 7bit
Content-Language: en-US
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 12/19/18 1:51 PM, Gerd Hoffmann wrote:
> Conversion to atomic modesetting, step three.
> Wire up atomic helpers.  Switch planes to atomic.
>
> We are late to the party, the transitional helpers are gone,
> so this can't be splitted into smaller steps any more.
>
> Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
> ---
>   drivers/gpu/drm/bochs/bochs_fbdev.c |  3 ++
>   drivers/gpu/drm/bochs/bochs_kms.c   | 70 +++++++++++++++++++++++++++++++++++--
>   2 files changed, 70 insertions(+), 3 deletions(-)
>
> diff --git a/drivers/gpu/drm/bochs/bochs_fbdev.c b/drivers/gpu/drm/bochs/bochs_fbdev.c
> index dd3c7df267..d9f3d42999 100644
> --- a/drivers/gpu/drm/bochs/bochs_fbdev.c
> +++ b/drivers/gpu/drm/bochs/bochs_fbdev.c
> @@ -6,6 +6,7 @@
>    */
>   
>   #include "bochs.h"
> +#include <drm/drm_atomic_helper.h>
>   #include <drm/drm_gem_framebuffer_helper.h>
>   
>   /* ---------------------------------------------------------------------- */
> @@ -149,6 +150,8 @@ bochs_gem_fb_create(struct drm_device *dev, struct drm_file *file,
>   
>   const struct drm_mode_config_funcs bochs_mode_funcs = {
>   	.fb_create = bochs_gem_fb_create,
> +	.atomic_check = drm_atomic_helper_check,
> +	.atomic_commit = drm_atomic_helper_commit,
>   };
>   
>   int bochs_fbdev_init(struct bochs_device *bochs)
> diff --git a/drivers/gpu/drm/bochs/bochs_kms.c b/drivers/gpu/drm/bochs/bochs_kms.c
> index 18b705fb0b..aa3ba0377a 100644
> --- a/drivers/gpu/drm/bochs/bochs_kms.c
> +++ b/drivers/gpu/drm/bochs/bochs_kms.c
> @@ -6,7 +6,9 @@
>    */
>   
>   #include "bochs.h"
> +#include <drm/drm_atomic_helper.h>
>   #include <drm/drm_plane_helper.h>
> +#include <drm/drm_atomic_uapi.h>
>   
>   static int defx = 1024;
>   static int defy = 768;
> @@ -113,7 +115,7 @@ static int bochs_crtc_page_flip(struct drm_crtc *crtc,
>   	struct drm_framebuffer *old_fb = crtc->primary->fb;
>   	unsigned long irqflags;
>   
> -	crtc->primary->fb = fb;
> +	drm_atomic_set_fb_for_plane(crtc->primary->state, fb);
Taking into account that crtc->primary access goes away in the series:
Reviewed-by: Oleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>
>   	bochs_crtc_mode_set_base(crtc, 0, 0, old_fb);
>   	if (event) {
>   		spin_lock_irqsave(&bochs->dev->event_lock, irqflags);
> @@ -151,6 +153,9 @@ static const struct drm_crtc_funcs bochs_crtc_funcs = {
>   	.set_config = drm_crtc_helper_set_config,
>   	.destroy = drm_crtc_cleanup,
>   	.page_flip = bochs_crtc_page_flip,
> +	.reset = drm_atomic_helper_crtc_reset,
> +	.atomic_duplicate_state = drm_atomic_helper_crtc_duplicate_state,
> +	.atomic_destroy_state = drm_atomic_helper_crtc_destroy_state,
>   };
>   
>   static const struct drm_crtc_helper_funcs bochs_helper_funcs = {
> @@ -169,6 +174,59 @@ static const uint32_t bochs_formats[] = {
>   	DRM_FORMAT_BGRX8888,
>   };
>   
> +static void bochs_plane_atomic_update(struct drm_plane *plane,
> +				      struct drm_plane_state *old_state)
> +{
> +	struct bochs_device *bochs = plane->dev->dev_private;
> +	struct bochs_bo *bo;
> +
> +	if (!plane->state->fb)
> +		return;
> +	bo = gem_to_bochs_bo(plane->state->fb->obj[0]);
> +	bochs_hw_setbase(bochs,
> +			 plane->state->crtc_x,
> +			 plane->state->crtc_y,
> +			 bo->bo.offset);
> +	bochs_hw_setformat(bochs, plane->state->fb->format);
> +}
> +
> +static int bochs_plane_prepare_fb(struct drm_plane *plane,
> +				struct drm_plane_state *new_state)
> +{
> +	struct bochs_bo *bo;
> +
> +	if (!new_state->fb)
> +		return 0;
> +	bo = gem_to_bochs_bo(new_state->fb->obj[0]);
> +	return bochs_bo_pin(bo, TTM_PL_FLAG_VRAM, NULL);
> +}
> +
> +static void bochs_plane_cleanup_fb(struct drm_plane *plane,
> +				   struct drm_plane_state *old_state)
> +{
> +	struct bochs_bo *bo;
> +
> +	if (!old_state->fb)
> +		return;
> +	bo = gem_to_bochs_bo(old_state->fb->obj[0]);
> +	bochs_bo_unpin(bo);
> +}
> +
> +static const struct drm_plane_helper_funcs bochs_plane_helper_funcs = {
> +	.atomic_update = bochs_plane_atomic_update,
> +	.prepare_fb = bochs_plane_prepare_fb,
> +	.cleanup_fb = bochs_plane_cleanup_fb,
> +};
> +
> +static const struct drm_plane_funcs bochs_plane_funcs = {
> +       .update_plane   = drm_atomic_helper_update_plane,
> +       .disable_plane  = drm_atomic_helper_disable_plane,
> +       .destroy        = drm_primary_helper_destroy,
> +       .reset          = drm_atomic_helper_plane_reset,
> +       .atomic_duplicate_state = drm_atomic_helper_plane_duplicate_state,
> +       .atomic_destroy_state = drm_atomic_helper_plane_destroy_state,
> +};
> +
>   static struct drm_plane *bochs_primary_plane(struct drm_device *dev)
>   {
>   	struct drm_plane *primary;
> @@ -181,16 +239,17 @@ static struct drm_plane *bochs_primary_plane(struct drm_device *dev)
>   	}
>   
>   	ret = drm_universal_plane_init(dev, primary, 0,
> -				       &drm_primary_helper_funcs,
> +				       &bochs_plane_funcs,
>   				       bochs_formats,
>   				       ARRAY_SIZE(bochs_formats),
>   				       NULL,
>   				       DRM_PLANE_TYPE_PRIMARY, NULL);
>   	if (ret) {
>   		kfree(primary);
> -		primary = NULL;
> +		return NULL;
>   	}
>   
> +	drm_plane_helper_add(primary, &bochs_plane_helper_funcs);
>   	return primary;
>   }
>   
> @@ -275,6 +334,9 @@ static const struct drm_connector_funcs bochs_connector_connector_funcs = {
>   	.dpms = drm_helper_connector_dpms,
>   	.fill_modes = drm_helper_probe_single_connector_modes,
>   	.destroy = drm_connector_cleanup,
> +	.reset = drm_atomic_helper_connector_reset,
> +	.atomic_duplicate_state = drm_atomic_helper_connector_duplicate_state,
> +	.atomic_destroy_state = drm_atomic_helper_connector_destroy_state,
>   };
>   
>   static void bochs_connector_init(struct drm_device *dev)
> @@ -318,6 +380,8 @@ int bochs_kms_init(struct bochs_device *bochs)
>   	drm_connector_attach_encoder(&bochs->connector,
>   					  &bochs->encoder);
>   
> +	drm_mode_config_reset(bochs->dev);
> +
>   	return 0;
>   }
>   

