Return-Path: <virtualization-bounces@lists.linux-foundation.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 21:33:34 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id ADAB0580261
	for <like.xu@linux.intel.com>; Wed, 19 Dec 2018 03:21:20 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 19 Dec 2018 03:21:20 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A+6lg3hHfeGnkMOCqrv2HP51GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ76ps6/bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJWSJPAp2y?=
 =?us-ascii?q?YZYMAeoPMulXsovyqFUWrRa8BwehC/7jxzFUinDq0qM6yPouHBra3AEiBd8CrG?=
 =?us-ascii?q?jYoc/rOKoUTOu7zLPIzTLGb/5O2jn97ofIchc8qv+LWrJwdczRxlM1FwjYiViQ?=
 =?us-ascii?q?rI3lPzWa1uQKqGWb7PRvVfipi2E5rwF9uD+vxt0jioTQgI8e117K9SJ8wIkvJN?=
 =?us-ascii?q?24TlZ2Yd26H5tKsSGVKY92TtklQ2FytyY20rkGuZ+9fCgXx5UnyRnfa+GBc4eV?=
 =?us-ascii?q?+B3jSOeRITB+hH5/f7K/nRmy/VC+xuHgTMW0y1FKojJKktnKq3ABzRvT6tKISv?=
 =?us-ascii?q?Z740yv2i6P2hjO5uxLPUw4j7TXJ4M8zrIqi5YesEDOEjXrlEnolKObeUQp9vK1?=
 =?us-ascii?q?5+npZrjqvIKQO5Fuhg3gL6gjlMqyCvkiPAcURWiU4+G82aXj/ULnRLVKieU7kq?=
 =?us-ascii?q?zDv5DbIcQXvKq5Aw5T0oY+5Be/ATCm0MkenXYaNl1FZBOHj4/vO13UJ/D4F/i/?=
 =?us-ascii?q?j0ytkDdt2f/GIqXsDojCI3TfirvtY6tx51NGxAYuzN1S44hYBqwfLP7rX0/+rt?=
 =?us-ascii?q?3YDhs3MwyuxObnDc1w1p0fWWKVHq+ZLbndsVuJ5uMuOeaMeI4VuDH7K/Q8/PHu?=
 =?us-ascii?q?imI5mVkBcqa3xpsac3S4HvV9I0WFenrgmNMBEWYMvgojQ+3mkVOCUTlOZ3a0Qq?=
 =?us-ascii?q?0z/C07CIOhDYfFXIyth6aB3CijEp1Mem9GEkyMEWvvd4icX/cMaSGSLdF7nj0L?=
 =?us-ascii?q?SLisUIsh1RCotA/nxLtrNOvU+isEtZ390Nh5/fHclRY39W88MsKGzmvYT31ohn?=
 =?us-ascii?q?haAHgy3btjugp5y1GewaZ/nvpUHMBS4PUPVR01cpvVzuh/Ata1XRrdf9CPUxG4?=
 =?us-ascii?q?Q8+6HDg1T8A4394JZRVAHc6/hEXG1iuuH7hHib2RGIE99qPO1mTwIMA40Xvfya?=
 =?us-ascii?q?Q6k3EiQ9BTLiuih6hi503dAJPPn0yFlqGsM6MG03nW6W2BwGGS6VxeSxN6Sq7f?=
 =?us-ascii?q?XHoSNXfR+PHw/UrCTqWpQYUuNwJNwIbWO6JPY9Hgy1BPX/7jOc7ZS3m2kGa3Ax?=
 =?us-ascii?q?uY2vWHa4+8KEsH2yCIKU4LlEg2+nKAPBJ2UiKgpW3ZJD9jD1TiZwXr6+Yo+yDz?=
 =?us-ascii?q?dVM90wzfNx4p7LGy4BNAwKXEE/4=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AEAABpKBpchwyp04xkGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBgmmBKYwWX4sdgg18JZY8gXMTAQEYCwmDeoM?=
 =?us-ascii?q?rBSI0CQ0BAwEBAQEBAQIBEwEBAQoLCQgpIwyCNgUCAxoBBoJcAQICAQEBASQTB?=
 =?us-ascii?q?gEFCh4LAQIBAQEBAgYBAQUFCxYTAgQECAMBCwUTAQwBBQECIBMFFoMHAYFpAw0?=
 =?us-ascii?q?IBAEKm1o8jBUzgncFgTEBg1gNghUCAQUSixGBHBeBf4ERghRJNYMFGQECAoUXg?=
 =?us-ascii?q?iYCiS4bgXaEYJBKSwmHEIYxhBUMGIFehR+CeAKHYop0g02LGgYCCQcPIYElgg4?=
 =?us-ascii?q?zGggoCDsxBoIBATOCGwwXg0qFFIVAPwExAYEDEQOLWIF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0AEAABpKBpchwyp04xkGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBgmmBKYwWX4sdgg18JZY8gXMTAQEYCwmDeoMrBSI0CQ0BAwEBA?=
 =?us-ascii?q?QEBAQIBEwEBAQoLCQgpIwyCNgUCAxoBBoJcAQICAQEBASQTBgEFCh4LAQIBAQE?=
 =?us-ascii?q?BAgYBAQUFCxYTAgQECAMBCwUTAQwBBQECIBMFFoMHAYFpAw0IBAEKm1o8jBUzg?=
 =?us-ascii?q?ncFgTEBg1gNghUCAQUSixGBHBeBf4ERghRJNYMFGQECAoUXgiYCiS4bgXaEYJB?=
 =?us-ascii?q?KSwmHEIYxhBUMGIFehR+CeAKHYop0g02LGgYCCQcPIYElgg4zGggoCDsxBoIBA?=
 =?us-ascii?q?TOCGwwXg0qFFIVAPwExAYEDEQOLWIF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,372,1539673200"; 
   d="scan'208";a="56516275"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from mail.linuxfoundation.org ([140.211.169.12])
  by mtab.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 19 Dec 2018 03:21:19 -0800
Received: from mail.linux-foundation.org (localhost [127.0.0.1])
	by mail.linuxfoundation.org (Postfix) with ESMTP id 97FECDB8;
	Wed, 19 Dec 2018 11:20:41 +0000 (UTC)
X-Original-To: virtualization@lists.linux-foundation.org
Delivered-To: virtualization@mail.linuxfoundation.org
Received: from smtp1.linuxfoundation.org (smtp1.linux-foundation.org
	[172.17.192.35])
	by mail.linuxfoundation.org (Postfix) with ESMTPS id 48462B4B
	for <virtualization@lists.linux-foundation.org>;
	Wed, 19 Dec 2018 11:20:37 +0000 (UTC)
X-Greylist: whitelisted by SQLgrey-1.7.6
Received: from mail-wr1-f68.google.com (mail-wr1-f68.google.com
	[209.85.221.68])
	by smtp1.linuxfoundation.org (Postfix) with ESMTPS id 442E07C3
	for <virtualization@lists.linux-foundation.org>;
	Wed, 19 Dec 2018 11:20:34 +0000 (UTC)
Received: by mail-wr1-f68.google.com with SMTP id c14so19133490wrr.0
	for <virtualization@lists.linux-foundation.org>;
	Wed, 19 Dec 2018 03:20:34 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
	h=sender:date:from:to:cc:subject:message-id:references:mime-version
	:content-disposition:in-reply-to:user-agent;
	bh=qzRDyJoDOTma597x2MZ7+yRPZMyKKu7YO8LIRpUFIls=;
	b=kPvGq5FDYfq/wnWALdG3Xxrs841VQkA65NdvVRRMDz29tYztvvqP0SUnXja7izMvjo
	YyaKfIX/SVyhhdxj7iDubac8bPkMdaB5zfbI+AlUl97NHCc7bnxjysrcXNHfjwrGcn54
	vbPrcLdoyIQmkJd8PiefSsLRVwkYDwZsmxJNTvRd1pEtVIDdpXsjhvf3vmNMkPHo2FHo
	YgHjLYj3himQf0dx2IKxRuUQBMWXAGeA4FBqDatE4N9sezcJwNyfq/PiICqc4ESlhaPl
	jryfNNk3nb2MqjxfVXZNz5YJE7w2vkHMKsz7Ey6X7REkNDXtWSaFn+dViEsEjZhI4dNK
	WSrg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:sender:date:from:to:cc:subject:message-id
	:references:mime-version:content-disposition:in-reply-to:user-agent;
	bh=qzRDyJoDOTma597x2MZ7+yRPZMyKKu7YO8LIRpUFIls=;
	b=cufn1syBvdFgn19yiMehtQ86kQwHrfbSxfp84SW8fb0QnY8PjjfZvJQcmnCTdDSvBr
	c9d3GsB77rsQ59aDyNFTOK/6IgxtZLUJPeXWwaLeOausc1jLG5lVGjqI7wlzCVsoxf9U
	oPNrsfHvbIQnz2SNmNdN/vUDBmc87lo5GjGT/s1oAd/pZ7kTiENk+aS0VFqcB5YhTLAy
	Ayom5uxV0iHlE3mbFLGBvtzZmymX1MC02qg4WyuuuKbmqv+Zk4sHdwBD5Fekol28wMcM
	8xjvoJEzaf0k/64UFZKUu+eVlH0FDR1po5JvddVkQ2tcIy6CwnrjfWCmnueLJI2w5zmW
	mjCg==
X-Gm-Message-State: AA+aEWad9V1+puh8/TP6TVEsk6vY3YSJiHYaR9zfQqCnRfWYEF/UvEtr
	uUdIUgvkFJ7NyFDZMyWlW2I=
X-Google-Smtp-Source: AFSGD/XOXyHJhMkDXm6z6RSt+laLMMROGBXnA7Gpbz1VSVpSRCp4veJ6GFhHN56+P00M9Q116mm5Wg==
X-Received: by 2002:a5d:6a42:: with SMTP id t2mr19854124wrw.50.1545218432704; 
	Wed, 19 Dec 2018 03:20:32 -0800 (PST)
Received: from gmail.com (2E8B0CD5.catv.pool.telekom.hu. [46.139.12.213])
	by smtp.gmail.com with ESMTPSA id
	j202sm13789844wmf.15.2018.12.19.03.20.30
	(version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
	Wed, 19 Dec 2018 03:20:31 -0800 (PST)
Date: Wed, 19 Dec 2018 12:20:28 +0100
From: Ingo Molnar <mingo@kernel.org>
To: Masahiro Yamada <yamada.masahiro@socionext.com>
Subject: Re: [PATCH v3 00/12] x86, kbuild: revert macrofying inline assembly
	code
Message-ID: <20181219112028.GA38175@gmail.com>
References: <1545062607-8599-1-git-send-email-yamada.masahiro@socionext.com>
MIME-Version: 1.0
Content-Disposition: inline
In-Reply-To: <1545062607-8599-1-git-send-email-yamada.masahiro@socionext.com>
User-Agent: Mutt/1.9.4 (2018-02-28)
X-Spam-Status: No, score=1.6 required=5.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, FREEMAIL_FROM, FSL_HELO_FAKE,
	RCVD_IN_DNSWL_NONE autolearn=no version=3.3.1
X-Spam-Level: *
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	smtp1.linux-foundation.org
Cc: Peter Zijlstra <peterz@infradead.org>, Yonghong Song <yhs@fb.com>,
	Alexei Starovoitov <ast@kernel.org>,
	virtualization@lists.linux-foundation.org,
	Nadav Amit <namit@vmware.com>, Jan Beulich <JBeulich@suse.com>,
	"H . Peter Anvin" <hpa@zytor.com>,
	Alok Kataria <akataria@vmware.com>, linux-arch@vger.kernel.org,
	Arnd Bergmann <arnd@arndb.de>, x86@kernel.org,
	linux-sparse@vger.kernel.org, Ingo Molnar <mingo@redhat.com>,
	Andrey Ryabinin <aryabinin@virtuozzo.com>,
	Alexey Dobriyan <adobriyan@gmail.com>, Kees Cook <keescook@chromium.org>,
	Segher Boessenkool <segher@kernel.crashing.org>,
	Jann Horn <jannh@google.com>, Arnaldo Carvalho de Melo <acme@redhat.com>,
	Borislav Petkov <bp@alien8.de>, Josh Poimboeuf <jpoimboe@redhat.com>,
	Thomas Gleixner <tglx@linutronix.de>,
	linux-kbuild@vger.kernel.org, Juergen Gross <jgross@suse.com>,
	Michal Marek <michal.lkml@markovi.net>, Richard Biener <rguenther@suse.de>,
	Ard Biesheuvel <ard.biesheuvel@linaro.org>, linux-kernel@vger.kernel.org,
	David Woodhouse <dwmw@amazon.co.uk>,
	Andrew Morton <akpm@linux-foundation.org>,
	Linus Torvalds <torvalds@linux-foundation.org>,
	Luc Van Oostenryck <luc.vanoostenryck@gmail.com>
X-BeenThere: virtualization@lists.linux-foundation.org
X-Mailman-Version: 2.1.12
Precedence: list
List-Id: Linux virtualization <virtualization.lists.linux-foundation.org>
List-Unsubscribe: <https://lists.linuxfoundation.org/mailman/options/virtualization>,
	<mailto:virtualization-request@lists.linux-foundation.org?subject=unsubscribe>
List-Archive: <http://lists.linuxfoundation.org/pipermail/virtualization/>
List-Post: <mailto:virtualization@lists.linux-foundation.org>
List-Help: <mailto:virtualization-request@lists.linux-foundation.org?subject=help>
List-Subscribe: <https://lists.linuxfoundation.org/mailman/listinfo/virtualization>,
	<mailto:virtualization-request@lists.linux-foundation.org?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Sender: virtualization-bounces@lists.linux-foundation.org
Errors-To: virtualization-bounces@lists.linux-foundation.org


* Masahiro Yamada <yamada.masahiro@socionext.com> wrote:

> This series reverts the in-kernel workarounds for inlining issues.
> 
> The commit description of 77b0bf55bc67 mentioned
> "We also hope that GCC will eventually get fixed,..."
> 
> Now, GCC provides a solution.
> 
> https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html
> explains the new "asm inline" syntax.
> 
> The performance issue will be eventually solved.
> 
> [About Code cleanups]
> 
> I know Nadam Amit is opposed to the full revert.
> He also claims his motivation for macrofying was not only
> performance, but also cleanups.
> 
> IIUC, the criticism addresses the code duplication between C and ASM.
> 
> If so, I'd like to suggest a different approach for cleanups.
> Please see the last 3 patches.
> IMHO, preprocessor approach is more straight-forward, and readable.
> Basically, this idea should work because it is what we already do for
> __ASM_FORM() etc.
> 
> [Quick Test of "asm inline" of GCC 9]
> 
> If you want to try "asm inline" feature, the patch is available:
> https://lore.kernel.org/patchwork/patch/1024590/
> 
> The number of symbols for arch/x86/configs/x86_64_defconfig:
> 
>                             nr_symbols
>   [1]    v4.20-rc7       :   96502
>   [2]    [1]+full revert :   96705   (+203)
>   [3]    [2]+"asm inline":   96568   (-137)
> 
> [3]: apply my patch, then replace "asm" -> "asm_inline"
>     for _BUG_FLAGS(), refcount_add(), refcount_inc(), refcount_dec(),
>         annotate_reachable(), annotate_unreachable()
> 
> 
> Changes in v3:
>   - Split into per-commit revert (per Nadav Amit)
>   - Add some cleanups with preprocessor approach
> 
> Changes in v2:
>   - Revive clean-ups made by 5bdcd510c2ac (per Peter Zijlstra)
>   - Fix commit quoting style (per Peter Zijlstra)
> 
> Masahiro Yamada (12):
>   Revert "x86/jump-labels: Macrofy inline assembly code to work around
>     GCC inlining bugs"
>   Revert "x86/cpufeature: Macrofy inline assembly code to work around
>     GCC inlining bugs"
>   Revert "x86/extable: Macrofy inline assembly code to work around GCC
>     inlining bugs"
>   Revert "x86/paravirt: Work around GCC inlining bugs when compiling
>     paravirt ops"
>   Revert "x86/bug: Macrofy the BUG table section handling, to work
>     around GCC inlining bugs"
>   Revert "x86/alternatives: Macrofy lock prefixes to work around GCC
>     inlining bugs"
>   Revert "x86/refcount: Work around GCC inlining bug"
>   Revert "x86/objtool: Use asm macros to work around GCC inlining bugs"
>   Revert "kbuild/Makefile: Prepare for using macros in inline assembly
>     code to work around asm() related GCC inlining bugs"
>   linux/linkage: add ASM() macro to reduce duplication between C/ASM
>     code
>   x86/alternatives: consolidate LOCK_PREFIX macro
>   x86/asm: consolidate ASM_EXTABLE_* macros
> 
>  Makefile                                  |  9 +--
>  arch/x86/Makefile                         |  7 ---
>  arch/x86/include/asm/alternative-asm.h    | 22 +------
>  arch/x86/include/asm/alternative-common.h | 47 +++++++++++++++
>  arch/x86/include/asm/alternative.h        | 30 +---------
>  arch/x86/include/asm/asm.h                | 46 +++++----------
>  arch/x86/include/asm/bug.h                | 98 +++++++++++++------------------
>  arch/x86/include/asm/cpufeature.h         | 82 +++++++++++---------------
>  arch/x86/include/asm/jump_label.h         | 22 +++++--
>  arch/x86/include/asm/paravirt_types.h     | 56 +++++++++---------
>  arch/x86/include/asm/refcount.h           | 81 +++++++++++--------------
>  arch/x86/kernel/macros.S                  | 16 -----
>  include/asm-generic/bug.h                 |  8 +--
>  include/linux/compiler.h                  | 56 ++++--------------
>  include/linux/linkage.h                   |  8 +++
>  scripts/Kbuild.include                    |  4 +-
>  scripts/mod/Makefile                      |  2 -
>  17 files changed, 249 insertions(+), 345 deletions(-)
>  create mode 100644 arch/x86/include/asm/alternative-common.h
>  delete mode 100644 arch/x86/kernel/macros.S

I absolutely agree that this needs to be resolved in v4.20.

So I did the 1-9 reverts manually myself as well, because I think the 
first commit should be reverted fully to get as close to the starting 
point as possible (we are late in the cycle) - and came to the attached 
interdiff between your series and mine.

Does this approach look OK to you, or did I miss something?

Thanks,

	Ingo

=============>

 entry/calling.h          |    2 -
 include/asm/jump_label.h |   50 ++++++++++++++++++++++++++++++++++-------------
 2 files changed, 38 insertions(+), 14 deletions(-)

diff --git a/arch/x86/entry/calling.h b/arch/x86/entry/calling.h
index 25e5a6bda8c3..20d0885b00fb 100644
--- a/arch/x86/entry/calling.h
+++ b/arch/x86/entry/calling.h
@@ -352,7 +352,7 @@ For 32-bit we have the following conventions - kernel is built with
 .macro CALL_enter_from_user_mode
 #ifdef CONFIG_CONTEXT_TRACKING
 #ifdef HAVE_JUMP_LABEL
-	STATIC_BRANCH_JMP l_yes=.Lafter_call_\@, key=context_tracking_enabled, branch=1
+	STATIC_JUMP_IF_FALSE .Lafter_call_\@, context_tracking_enabled, def=0
 #endif
 	call enter_from_user_mode
 .Lafter_call_\@:
diff --git a/arch/x86/include/asm/jump_label.h b/arch/x86/include/asm/jump_label.h
index cf88ebf9a4ca..21efc9d07ed9 100644
--- a/arch/x86/include/asm/jump_label.h
+++ b/arch/x86/include/asm/jump_label.h
@@ -2,6 +2,19 @@
 #ifndef _ASM_X86_JUMP_LABEL_H
 #define _ASM_X86_JUMP_LABEL_H
 
+#ifndef HAVE_JUMP_LABEL
+/*
+ * For better or for worse, if jump labels (the gcc extension) are missing,
+ * then the entire static branch patching infrastructure is compiled out.
+ * If that happens, the code in here will malfunction.  Raise a compiler
+ * error instead.
+ *
+ * In theory, jump labels and the static branch patching infrastructure
+ * could be decoupled to fix this.
+ */
+#error asm/jump_label.h included on a non-jump-label kernel
+#endif
+
 #define JUMP_LABEL_NOP_SIZE 5
 
 #ifdef CONFIG_X86_64
@@ -53,26 +66,37 @@ static __always_inline bool arch_static_branch_jump(struct static_key *key, bool
 
 #else	/* __ASSEMBLY__ */
 
-.macro STATIC_BRANCH_NOP l_yes:req key:req branch:req
-.Lstatic_branch_nop_\@:
-	.byte STATIC_KEY_INIT_NOP
-.Lstatic_branch_no_after_\@:
+.macro STATIC_JUMP_IF_TRUE target, key, def
+.Lstatic_jump_\@:
+	.if \def
+	/* Equivalent to "jmp.d32 \target" */
+	.byte		0xe9
+	.long		\target - .Lstatic_jump_after_\@
+.Lstatic_jump_after_\@:
+	.else
+	.byte		STATIC_KEY_INIT_NOP
+	.endif
 	.pushsection __jump_table, "aw"
 	_ASM_ALIGN
-	.long		.Lstatic_branch_nop_\@ - ., \l_yes - .
-	_ASM_PTR        \key + \branch - .
+	.long		.Lstatic_jump_\@ - ., \target - .
+	_ASM_PTR	\key - .
 	.popsection
 .endm
 
-.macro STATIC_BRANCH_JMP l_yes:req key:req branch:req
-.Lstatic_branch_jmp_\@:
-	.byte 0xe9
-	.long \l_yes - .Lstatic_branch_jmp_after_\@
-.Lstatic_branch_jmp_after_\@:
+.macro STATIC_JUMP_IF_FALSE target, key, def
+.Lstatic_jump_\@:
+	.if \def
+	.byte		STATIC_KEY_INIT_NOP
+	.else
+	/* Equivalent to "jmp.d32 \target" */
+	.byte		0xe9
+	.long		\target - .Lstatic_jump_after_\@
+.Lstatic_jump_after_\@:
+	.endif
 	.pushsection __jump_table, "aw"
 	_ASM_ALIGN
-	.long		.Lstatic_branch_jmp_\@ - ., \l_yes - .
-	_ASM_PTR	\key + \branch - .
+	.long		.Lstatic_jump_\@ - ., \target - .
+	_ASM_PTR	\key + 1 - .
 	.popsection
 .endm
 

_______________________________________________
Virtualization mailing list
Virtualization@lists.linux-foundation.org
https://lists.linuxfoundation.org/mailman/listinfo/virtualization
