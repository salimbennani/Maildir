Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 29 Nov 2018 08:41:39 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 6EC95580460;
	Wed, 28 Nov 2018 14:21:24 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 28 Nov 2018 14:21:24 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AxsKaCh29St//ztx1smDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segSIvXxwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJBUMhPSiJPDICy?=
 =?us-ascii?q?YYwNAOoPMulWoJL9p0MMoBalGQWhB/nixiNSi3PqwaE31fkqHwHc3AwnGtIDqG?=
 =?us-ascii?q?nao8vuO6gISuC10KjIwi/Fb/hLxTr97pXHcgogoP6SX7J7bNffyUgxGALLj1WQ?=
 =?us-ascii?q?rpblNC6S2+sWsmib4PRvWvi0i28nsAxxpjmvxsExionVnIIVzVbE9SR2wYovON?=
 =?us-ascii?q?K3Vld2bNi5G5VTryGXL5V6Tt8mTm1ypSo3xKMKtYSmcCUJ1Jgr3R/SZv6ff4SV?=
 =?us-ascii?q?7R/uVfydLStiiH57dr+yhAy+/Eq8xuD6S8K6ykxFrjBfndnJrn0N1wLc6syASv?=
 =?us-ascii?q?Zl4Eeh1iiA1xrJ5uFHP080j6zbJIAlwrIqkZoTq0vDEjf3mEXwkqCWal0p9va0?=
 =?us-ascii?q?5+njeLnqu5GRO5Fuhg3jMakihtazDOU6PwQWWmiU4+W81Lnt/U3jR7VKi+U7kq?=
 =?us-ascii?q?3YsJDcOMQaqbe1AwxL3YY57RawETOm3M0fnXgJKlJKZgiHgpP3O1HBPv/4F+2z?=
 =?us-ascii?q?g1eynzdxwfDJILnhDo/KLnjZn7ftZax95FJEyAov0dBf4IpZCrUAIPLwRED9rt?=
 =?us-ascii?q?PZDgIiPgywwubnDsh914wEVWKOBK+ZLL3dsVuS6u0zJOmMYZcfuCzhJPg9+/7u?=
 =?us-ascii?q?kXg5lEcdfaaz3JsXdGq3HvN8L0WZfHrjmNEBEWgRswo6TezqjkCCUDFJa3azWa?=
 =?us-ascii?q?I8+i80CIa8AYjfQYCthaSL3D2nEZ1OemBGFleMHG/qd4WDRfgAciGSIshnkjwC?=
 =?us-ascii?q?UrisUIsh1RCotA/nxLtrNOvU+isEtZ390Nh5/fHclRY39TZsFcSSz3mNT31onm?=
 =?us-ascii?q?MPXzI5xrt/oUx6yleAy6R4meZXFd5I6vNNUwc6M4PczuNgB9DzXALBYsmGSFK8?=
 =?us-ascii?q?Ttq6BjExS8o7w8USbEZlB9WikhfD0jKpA7APkbyHHpg08qPG0Hj3KMZw0HLG1K?=
 =?us-ascii?q?gnj1k7TcpDL2ymhqhj9wfNA47FiVmWl6Gvda4Exi7C6H+DzXaSvEFfSAN/TL/K?=
 =?us-ascii?q?XW4BaUfMrdT2/EXCT6SwBrQhNQdBzc2CKq5OatDyiVVGRfHjOMnRYm6rmmewAw?=
 =?us-ascii?q?qIya2IbIbwZ2od2yDdAlAekw8P5XaGKRQ+BiC5rm3DFjNuC0zgb1ns8eZkrnO7?=
 =?us-ascii?q?VVE7zweRYk1l1rq1/AMVhPOGR/MS2LIEpDkuqzFuEFmh2NLWDsKKpxB9c6VEfd?=
 =?us-ascii?q?M9/FBH2HrFtwx8O5ygKLxihl4ecghto0PizRJ3Cp9EkcgrqnMqwxF/KaaZ0FNH?=
 =?us-ascii?q?ajOZ0or8OrzRKmnu4h+vb7Ta1U3Z0NaT4q0P8ug3q03/vAG1EUov629o091L3H?=
 =?us-ascii?q?qT+JrLDBAeXonsUkkq7Rd6obLaYi4j547P0X1sMK+0siLN2t4zBeslzAqgcMlb?=
 =?us-ascii?q?MK+eCADyFMgaDdC0KOM2g1ipcg4EPOdK+a80IsOqbeeJ1LSqPeZghj2mi2tH7Z?=
 =?us-ascii?q?t50kKN8Sp8V+HJ04wEw/GewguISTP8gE29vcDwnIBOfSsSEXanySj4GI5RYbV/?=
 =?us-ascii?q?fZwKCWiyOcK33Mhxh5n3V35e6lGjHVIG1Na1dhWIa1zywBNf1V4QoXyhgia4yz?=
 =?us-ascii?q?10kzc0rquQxiDOwuLidAYZNW5PXmVtkVDsIY2shdAAQEeodxQplAei5Uvix6lb?=
 =?us-ascii?q?pb5zLmnJTUdTYij2KXpvUq+xtrqEfs5O54kksSRRUOSgf1+aTqTxrAcd0yPmB2?=
 =?us-ascii?q?Fe3iw0dym2upXlmBx3kGCdI2xprHraesFwwg3T5MfGSv5S3ToGRS94hifRBlWn?=
 =?us-ascii?q?O9mp/NOUl4rMs+ykVmKhUIFTfjfvzY+aqCS74mhqCwWln/+vgt3nDRQ60Sjj2t?=
 =?us-ascii?q?hqTyrIqwzwYovq16S8Ku9nekhoBFnh68t1AI1+k40whI0O1ngenJma4X0HkWLr?=
 =?us-ascii?q?O9VBxa3+dGYNRSIMw9PN4wjqwkxjImiJx4LkTHqdxMRhasK+YmMX3CI98s9LBL?=
 =?us-ascii?q?2V7LxCgSt6vF64oRjNbvh6mzcX0eEu52ICg+EVpAotyT2QArUTHUlbJyPgjRqJ?=
 =?us-ascii?q?4M6lrKVLemmva6O/21RkndCuF7yCpgBcWHDkepYtByNw78N/ME7S33338I3rZN?=
 =?us-ascii?q?7QbdcLvB2OjxjAl/RVKI42lvcSmSpnPmf9sWckyuEhixxuwIq6vJOGK2h2+KK5?=
 =?us-ascii?q?AxhYNiD6Zs8J+zHti7pekdiS34y1ApphHTALVoPyTf20CDISqejnNwGWHTInsH?=
 =?us-ascii?q?ibHr7fHRKF5EdisnLCCJSrN3CRJHkEwtRuXhidJEpDgA8KWDU2hII2FgevxMb5?=
 =?us-ascii?q?akd2+igR5kLkqhtL0u9oNQPwUmLBqwezcDs0VIKTLBlL7gFB+kfVN9aR7vloEi?=
 =?us-ascii?q?Fc/52hqhGNK2OBawRJC2EJRlKLB1T5Mray4tnA9vCSBvCiIPvWfbWOteteWu+I?=
 =?us-ascii?q?xJKoz4tm5iuMOd+JPnV4FP073UxDXX9iFsTdmjUPTTEXli3XY86aohe85jN4rs?=
 =?us-ascii?q?Sl/Pv3XwLv4JOFC6FOPtV35xC2naCDOvaQhClnKDZY1ZAMxX7SxLgcxl4SjC5u?=
 =?us-ascii?q?eCe3EbQdri7AV6bQmq5RDx4GZCJ/LspI76Qg3gZTPc7XkM/61rl9jvQtEVdKSU?=
 =?us-ascii?q?Thmt21ZcwNO2yyLk7HC12RNLuYJTzH2cX3YaKnRL1UjeVUsQCwuDmBH0/iODSD?=
 =?us-ascii?q?iyfmVxS1Pe5QiyGbOQRUuJuhfRZ1FWjjUNXmZwWnMN92iD0626E7imnWOm4cLz?=
 =?us-ascii?q?d8dVhArrmR7SNen/V+FHZN7ntjLemYhSmZ6/PUJYoRsftuGi50jf5V4Gwmy7tJ?=
 =?us-ascii?q?6yFJXPx0lzHUrt5rolGmlPGAyztnUBVUrDZLi5mGvUFjOaXf65lBVmzI/BML7W?=
 =?us-ascii?q?WMFRsKo8FpBcHou6BVmZDzk/f3KTFf45fX8NEaCsz8Ns2KKjwiPADvFTqSCxEK?=
 =?us-ascii?q?HhCxMmSKvEFXmeqO93ST5rE8poL+lZhGcb5WS10yDLtOAEVqEdUZMb9zXzU5ja?=
 =?us-ascii?q?Scis8Yo3az+kqCDP5Gt4zKA6rBSc7kLyyU2PwdP0MF?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAACuFP9bh0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgVqCESeMEV+LKVIGgUmXLoFxLhMBh24iNAkNAQMBAQEBAQECARM?=
 =?us-ascii?q?BAQEIDQkIKS+CNiQBgmIDAwECJAsBRgYJAQFQA1QZBYMcgXUNBagbM4oqh2uEK?=
 =?us-ascii?q?xEGeIEHgRGIYIUOAokFIQOBbpUECYERkBUjiWOHMiyZYoINMxoIHBSDJ4InF38?=
 =?us-ascii?q?BAo0cPgEygQUBAY1jAQE?=
X-IPAS-Result: =?us-ascii?q?A0ANAACuFP9bh0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBgVq?=
 =?us-ascii?q?CESeMEV+LKVIGgUmXLoFxLhMBh24iNAkNAQMBAQEBAQECARMBAQEIDQkIKS+CN?=
 =?us-ascii?q?iQBgmIDAwECJAsBRgYJAQFQA1QZBYMcgXUNBagbM4oqh2uEKxEGeIEHgRGIYIU?=
 =?us-ascii?q?OAokFIQOBbpUECYERkBUjiWOHMiyZYoINMxoIHBSDJ4InF38BAo0cPgEygQUBA?=
 =?us-ascii?q?Y1jAQE?=
X-IronPort-AV: E=Sophos;i="5.56,292,1539673200"; 
   d="scan'208";a="53063674"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 28 Nov 2018 14:21:18 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727031AbeK2JYX (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 29 Nov 2018 04:24:23 -0500
Received: from Galois.linutronix.de ([146.0.238.70]:33144 "EHLO
        Galois.linutronix.de" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726870AbeK2JYW (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 29 Nov 2018 04:24:22 -0500
Received: from localhost ([127.0.0.1] helo=bazinga.breakpoint.cc)
        by Galois.linutronix.de with esmtp (Exim 4.80)
        (envelope-from <bigeasy@linutronix.de>)
        id 1gS8Ch-0001GX-Qt; Wed, 28 Nov 2018 23:21:08 +0100
From: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
To: linux-kernel@vger.kernel.org
Cc: x86@kernel.org, Andy Lutomirski <luto@kernel.org>,
        Paolo Bonzini <pbonzini@redhat.com>,
        =?UTF-8?q?Radim=20Kr=C4=8Dm=C3=A1=C5=99?= <rkrcmar@redhat.com>,
        kvm@vger.kernel.org, "Jason A. Donenfeld" <Jason@zx2c4.com>,
        Rik van Riel <riel@surriel.com>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Subject: [PATCH 15/29] x86/fpu: Remove user_fpu_begin()
Date: Wed, 28 Nov 2018 23:20:21 +0100
Message-Id: <20181128222035.2996-16-bigeasy@linutronix.de>
X-Mailer: git-send-email 2.20.0.rc1
In-Reply-To: <20181128222035.2996-1-bigeasy@linutronix.de>
References: <20181128222035.2996-1-bigeasy@linutronix.de>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

user_fpu_begin() sets fpu_fpregs_owner_ctx to task's fpu struct. This is
always the case since there is no lazy FPU anymore.

fpu_fpregs_owner_ctx is used during context switch to decide if it needs
to load the saved registers or if the currently loaded registers are
valid. It could be skipped during
	taskA -> kernel thread -> taskA

because the switch to kernel thread would not alter the CPU's FPU state.

Since this field is always updated during context switch and never
invalidated, setting it manually (in user context) makes no difference.
A kernel thread with kernel_fpu_begin() block could set
fpu_fpregs_owner_ctx to NULL but a kernel thread does not use
user_fpu_begin().
This is a leftover from the lazy-FPU time.

Remove user_fpu_begin(), it does not change fpu_fpregs_owner_ctx's
content.

Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
---
 arch/x86/include/asm/fpu/internal.h | 17 -----------------
 arch/x86/kernel/fpu/core.c          |  4 +---
 arch/x86/kernel/fpu/signal.c        |  1 -
 3 files changed, 1 insertion(+), 21 deletions(-)

diff --git a/arch/x86/include/asm/fpu/internal.h b/arch/x86/include/asm/fpu/internal.h
index 932b4577e2f0f..a8b4c1e92c010 100644
--- a/arch/x86/include/asm/fpu/internal.h
+++ b/arch/x86/include/asm/fpu/internal.h
@@ -558,23 +558,6 @@ static inline void switch_fpu_finish(struct fpu *new_fpu, int cpu)
 	}
 }
 
-/*
- * Needs to be preemption-safe.
- *
- * NOTE! user_fpu_begin() must be used only immediately before restoring
- * the save state. It does not do any saving/restoring on its own. In
- * lazy FPU mode, it is just an optimization to avoid a #NM exception,
- * the task can lose the FPU right after preempt_enable().
- */
-static inline void user_fpu_begin(void)
-{
-	struct fpu *fpu = &current->thread.fpu;
-
-	preempt_disable();
-	fpregs_activate(fpu);
-	preempt_enable();
-}
-
 /*
  * MXCSR and XCR definitions:
  */
diff --git a/arch/x86/kernel/fpu/core.c b/arch/x86/kernel/fpu/core.c
index 3a4668c9d24f1..78d8037635932 100644
--- a/arch/x86/kernel/fpu/core.c
+++ b/arch/x86/kernel/fpu/core.c
@@ -335,10 +335,8 @@ void fpu__clear(struct fpu *fpu)
 	 * Make sure fpstate is cleared and initialized.
 	 */
 	fpu__initialize(fpu);
-	if (static_cpu_has(X86_FEATURE_FPU)) {
-		user_fpu_begin();
+	if (static_cpu_has(X86_FEATURE_FPU))
 		copy_init_fpstate_to_fpregs();
-	}
 }
 
 /*
diff --git a/arch/x86/kernel/fpu/signal.c b/arch/x86/kernel/fpu/signal.c
index 3a59c578440e2..5f42de8a21deb 100644
--- a/arch/x86/kernel/fpu/signal.c
+++ b/arch/x86/kernel/fpu/signal.c
@@ -325,7 +325,6 @@ static int __fpu__restore_sig(void __user *buf, void __user *buf_fx, int size)
 		 * For 64-bit frames and 32-bit fsave frames, restore the user
 		 * state to the registers directly (with exceptions handled).
 		 */
-		user_fpu_begin();
 		if (copy_user_to_fpregs_zeroing(buf_fx, xfeatures, fx_only)) {
 			fpu__clear(fpu);
 			return -1;
-- 
2.20.0.rc1

