Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 24 Nov 2018 12:36:06 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 5F5A658037D;
	Fri, 23 Nov 2018 08:44:21 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga003-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 23 Nov 2018 08:44:21 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AL4kF9R8ss2tfkf9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1ukVIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CWGRPQMhRWSxCDI2y?=
 =?us-ascii?q?YYQAAOgOMvpXoYn8vFsOtRmzCBKwBO7t0DJEmmP60KM63uknDArI3BYgH9ULsH?=
 =?us-ascii?q?nMqNv1M6cSUeaox6fJ1zrDdelW2Dfg44XPcBAhpvGMXbRqfcre00YvDRnFj1WL?=
 =?us-ascii?q?pIzlIjOazOoMvHaa7+Z6Se2vjGsnphh3rzOyyMksjYzJiZgUylDC7Sh5xZw6Jd?=
 =?us-ascii?q?y8SEJie9GkCodftyGbN4toXMwuWX1nuCE/yrAApJW1fzAKxYw5yxLDb/GLaZWE?=
 =?us-ascii?q?7xz9WOqLPDt1h25pdKi+ihuw6USs1/HwWtOq3FpWsCZJiMfAum4M2hDJ5cWLV+?=
 =?us-ascii?q?Nx80ih1DqVyQze5eVJLVoqmabGNZIt2LA9moQVvE/eBCH5gl/2g7WTdkg8+uin?=
 =?us-ascii?q?9eDnYrL+q5+COI97lBv+Pr4tmsOhG+Q4NBYBX2yB9eS7zr3j8lX1QLRMjvIojq?=
 =?us-ascii?q?nUqI7WKdgfq6KjHgNY3Jgv5wyiAzqlzNgUh3gKIVBddBKClYfpOlXOIP7iDfe4?=
 =?us-ascii?q?hlShiDNrx/HAPr38DZTBN3vDn6n7fbZ79UFczBM/zddR5pJSFL4BOun+WlH+tN?=
 =?us-ascii?q?PGFB81KQ+0zPj9CNV7yIweXXiDAqiDMKPdqVOI/P4gI/GQZI8JvzbwM/wl5//t?=
 =?us-ascii?q?jXAng1MccrSp0IATaHC5GPRmPkqYbWDtgtcHDWcFoA4+QPb2h12FVD5Zf2yyUL?=
 =?us-ascii?q?4k5jEnFIKmCp/ORoC3j7yAwCe0BJpWanpGClCRC3jocYqEVuwIaCKTJM9hjzMF?=
 =?us-ascii?q?WaKgS48nyRGhqgv6x6B7IerT/y0SrYjj28Rt5+3PiREy8iR5D8aa026TVW10nW?=
 =?us-ascii?q?QIRzkw3KB4ukF9zlaD0a5lg/1XD9BT5vVJUhskOp7Y1eB1F9fyWgfZdNeTVFmm?=
 =?us-ascii?q?WsmmAS02Tt8p2dAOeEZ9G9KhjhzZxSqlGb0VmqePBJw19KLcwnfwK9x8y3bAyK?=
 =?us-ascii?q?kukV0mTtFTOm2hg6517xLTCJLRk0WFi6aqcrwR3C3X+2eF12aOuEBYXxR2UaXK?=
 =?us-ascii?q?Rn0fYkrWrdLk5kLNVbOuCLInMhdfxs6GMKdFdtrpjVBeTvf5JNvee36xm3u3BR?=
 =?us-ascii?q?uQ27yDdpTqdHsH0CXdEkcElRsT8miANQQ5AiehoGfeDDh1GFLrYkPs9/R+qXyh?=
 =?us-ascii?q?Qk81yQGKc1Nu176v9hEJgvycTusZ3qgYtyc5tzV0AFG90srLBNWauQpuYr9QYd?=
 =?us-ascii?q?Mn71dBzmLWqQp9M4ekL6BjgF4ebgt2s1nv1xVxFoVPj8wqoGk2wwp1LKKSyElB?=
 =?us-ascii?q?eC+A3ZDsJr3XLXH//Ayua67T3VHezNaW+6cV5PQksVnjuxupFk4j83Vh3NlYyH?=
 =?us-ascii?q?+c5pTMDAoPXpP9SEc39x5mp77EZikx/Z/b1XppMaOsqD/Nx8opBPc5yhanZ9pQ?=
 =?us-ascii?q?KqeEGxH9EsIEB8miMvclm0W0YR0eOuBS96k0P929evuC2a6rOvtgnT28gWRG5o?=
 =?us-ascii?q?B9zlyD9y5mRuHU2JYFxumS3hGbWDfkkFehrsf3lJhEZDEPBGaw1TLoBY9RZqJo?=
 =?us-ascii?q?e4YLBnyjI8m2xtV4mp7sVGRU9F+lB1MaxsCpfQCeYED63Q1VzU4Xu2ComTOkzz?=
 =?us-ascii?q?xolDEktrCf3C3SzOv4bhoIJ2lLSHNkjVjyO4i0jskWU1SyYAgtiRSq+1z6x69d?=
 =?us-ascii?q?pKlkK2nTQEFIfzX5Lm14U6uwsKaCbNBL6J8yrSpXV+G8a0iASrHhuxsazz/jH2?=
 =?us-ascii?q?xGyTE7djGmoJX4kwZhiGKAKnZ+t37ZecB2xRfC693QX/9R3jwaRCZmjTnbHESz?=
 =?us-ascii?q?P96s/d+MjZfMrvi+V369Vp1UaSTrz5mPtDG45W1pBh2zheuzlcfkEQg50C/70c?=
 =?us-ascii?q?dlVSPToRb4Y4nr0bm6MO19cklpAl/899R1GoVknoQsg5EQ3GAQho+J8nofjWfz?=
 =?us-ascii?q?LdJb1Lr+bXUXQj4H2dzV4Anj2EB4KnKJxoT5VmiSw8d7Ztm6ZH8W1Tw578xQFK?=
 =?us-ascii?q?iU67lElzNvolWktQLRfeR9njAFxPst8nEagvsFuAowziqHBLASElJVPSjtlxSO?=
 =?us-ascii?q?8tC/o79bZGepcbisykV+mcqtA62FogFZQHz5YIstHTds7sVjN1LByHjz6oDneN?=
 =?us-ascii?q?bKd94SuAObkwzcj+dLMpI+jeQFhTBoOW/muX0lyug7jQFh3J2gvYiHLXlt87y9?=
 =?us-ascii?q?AhJCKjL1YMYT8Cn3jalChsaWw5yvHpJ5FzUXW5voSOikETMIuvThKgaOCyY8qn?=
 =?us-ascii?q?aAFLrbHA+f7lpmrn3VH5CqMXGXOGcWzdF4SBaBI0xfhRgeXC8mkZ4hCgCq2Mvh?=
 =?us-ascii?q?fV9i6T8L4V74rgZMxvhsNxniSWrfoAaoajEpSJmQNhZW7wdC51vLPsya9O58Ay?=
 =?us-ascii?q?ZY/pi5pgyXNmObfxhIDX0OWkGcBVDsJLyu6sfb8+SCGuqyNfjOYaiNqexDUfeH?=
 =?us-ascii?q?34mv35Bi/zaNMMWPI3ZjA+c62kpFQXB2BcDZly8TRCwQkiLHd9Sbqwuk+i1rss?=
 =?us-ascii?q?C/9+zmWQLo5YuSErtSLM9g+xasjaeYMO6Qgil5JC1c1pMNw3/I1bce0EQTiyFo?=
 =?us-ascii?q?azmiD7AAuTTRQ6LXn69dFwQbZD9rNMtU86I82RFAOc7FhdP01b54jf81B01GVV?=
 =?us-ascii?q?z7ncGpatIFI3ugNFPcH0uLMLWGJTvWw8D4e6+8SLtQjPlKuB20ozqUD0jjPjGb?=
 =?us-ascii?q?nTnzSx+vKf1MjD2cPBFGoo69bw1iCXL9Q9PmcBG7NN53gCYywb01gHPKKGEdPS?=
 =?us-ascii?q?J9c0NLsr2f8ydYju9jFGxG63pvNfOElDqB7+nENpYWtuNmAjh1l+Jf+ng116FZ?=
 =?us-ascii?q?4z1ERPNrnivftdpuo1CgkumSxTtrShtOqjBXhI2VuUVuI7nW9p5FWXzc5hIC8X?=
 =?us-ascii?q?2QCwgWp9tiEtDuu7pfyt7KlKLyLjdN69PV/csGCMjSJ8KKK34hMRvvGD7JAwoJ?=
 =?us-ascii?q?Vz+rNWfDh0NDlPGe7GGarp8/qsukpJ1bdb5fUBQZG/oRDUItSMMDJJMxUj4tmr?=
 =?us-ascii?q?mdpMcS4Dy1qxyHF+tAuZWSdPWSB73AISyDnPEQZRwIx/X3JJ4JJ6X7xkV9Z1g8?=
 =?us-ascii?q?l4PPTRmDFetRqzFsO1dn6H5G92JzGyhqgxro?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAgBtLfhbh0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBZYJqA38nCpgHgWAIJRSSMIZtKQ0GAYhaIjgSAQMBAQEBAQECARMBAQEIDQk?=
 =?us-ascii?q?IKSMMgjYkAYJhAQEBAQIBAQI1QQUBCQEBChUDLgNUBg0BBQIBAQGDHAGBeQgFC?=
 =?us-ascii?q?qgzhUCEVQWKR4EkHoFXP4ERJwyCMS6DGwOBQAEBhXkCixGES5AmBwKCHASPCQY?=
 =?us-ascii?q?YgVmFCwWCeIVygTUskSOIPoF2MxojgzyCJxcSgziKUj8BATEBAQGBAQEBAQ6JV?=
 =?us-ascii?q?YEfgR8BAQ?=
X-IPAS-Result: =?us-ascii?q?A0ABAgBtLfhbh0O0hNFjHAEBAQQBAQcEAQGBZYJqA38nCpg?=
 =?us-ascii?q?HgWAIJRSSMIZtKQ0GAYhaIjgSAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkAYJhA?=
 =?us-ascii?q?QEBAQIBAQI1QQUBCQEBChUDLgNUBg0BBQIBAQGDHAGBeQgFCqgzhUCEVQWKR4E?=
 =?us-ascii?q?kHoFXP4ERJwyCMS6DGwOBQAEBhXkCixGES5AmBwKCHASPCQYYgVmFCwWCeIVyg?=
 =?us-ascii?q?TUskSOIPoF2MxojgzyCJxcSgziKUj8BATEBAQGBAQEBAQ6JVYEfgR8BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,270,1539673200"; 
   d="scan'208";a="53476205"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 23 Nov 2018 08:44:19 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2440648AbeKXD0M (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 23 Nov 2018 22:26:12 -0500
Received: from szxga06-in.huawei.com ([45.249.212.32]:58467 "EHLO huawei.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1730360AbeKXD0M (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 23 Nov 2018 22:26:12 -0500
Received: from DGGEMS401-HUB.china.huawei.com (unknown [172.30.72.59])
        by Forcepoint Email with ESMTP id 25D6E7AC9CFC3;
        Sat, 24 Nov 2018 00:41:11 +0800 (CST)
Received: from [127.0.0.1] (10.202.226.41) by DGGEMS401-HUB.china.huawei.com
 (10.3.19.201) with Microsoft SMTP Server id 14.3.408.0; Sat, 24 Nov 2018
 00:41:04 +0800
Subject: Re: [PATCH v3] iommu/dma: Use NUMA aware memory allocations in
 __iommu_dma_alloc_pages()
To: Will Deacon <will.deacon@arm.com>
References: <1542812051-178935-1-git-send-email-john.garry@huawei.com>
 <20181121160718.GB24883@arm.com>
 <24be0d21-63b1-c88d-fdfd-42575f12634f@huawei.com>
 <20181121165755.GE24883@arm.com>
CC: <joro@8bytes.org>, <robin.murphy@arm.com>,
        <linux-kernel@vger.kernel.org>, <iommu@lists.linux-foundation.org>,
        <ganapatrao.kulkarni@cavium.com>, <hch@lst.de>,
        <m.szyprowski@samsung.com>, <linuxarm@huawei.com>
From: John Garry <john.garry@huawei.com>
Message-ID: <86eaa286-d884-d599-4109-bbf31b5d5d97@huawei.com>
Date: Fri, 23 Nov 2018 16:40:58 +0000
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:45.0) Gecko/20100101
 Thunderbird/45.3.0
MIME-Version: 1.0
In-Reply-To: <20181121165755.GE24883@arm.com>
Content-Type: text/plain; charset="windows-1252"; format=flowed
Content-Transfer-Encoding: 7bit
X-Originating-IP: [10.202.226.41]
X-CFilter-Loop: Reflected
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 21/11/2018 16:57, Will Deacon wrote:
> On Wed, Nov 21, 2018 at 04:47:48PM +0000, John Garry wrote:
>> On 21/11/2018 16:07, Will Deacon wrote:
>>> On Wed, Nov 21, 2018 at 10:54:10PM +0800, John Garry wrote:
>>>> From: Ganapatrao Kulkarni <ganapatrao.kulkarni@cavium.com>
>>>>
>>>> Change function __iommu_dma_alloc_pages() to allocate pages for DMA from
>>>> respective device NUMA node. The ternary operator which would be for
>>>> alloc_pages_node() is tidied along with this.
>>>>
>>>> We also include a change to use kvzalloc() for kzalloc()/vzalloc()
>>>> combination.
>>>>
>>>> Signed-off-by: Ganapatrao Kulkarni <ganapatrao.kulkarni@cavium.com>
>>>> [JPG: Added kvzalloc(), drop pages ** being device local, tidied ternary operator]
>>>> Signed-off-by: John Garry <john.garry@huawei.com>
>>>
>>> Weird, you're missing a diffstat here.
>>>
>>> Anyway, the patch looks fine to me, but it would be nice if you could
>>> justify the change with some numbers. Do you actually see an improvement
>> >from this change?
>>>
>>
>> Hi Will,
>>
>> Ah, I missed adding my comments explaining the motivation. It would be
>> better in the commit log. Anyway, here's the snippet:
>>
>> " ... as mentioned in [3], dma_alloc_coherent() uses the locality
>> information from the device - as in direct DMA - so this patch is just
>> applying this same policy.
>>
>> [3]
>> https://www.mail-archive.com/linux-kernel@vger.kernel.org/msg1692998.html"
>
> Yes, please add to this to the commit log.
>

Sure,

>> I did have some numbers to show improvement in some scenarios when I tested
>> this a while back which I'll dig out.
>>
>> However I would say that some scenarios will improve and the opposite for
>> others with this change, considering different conditions in which DMA
>> memory may be used.
>
> Well, if you can show that it's useful in some cases and not catastrophic in
> others, then I think shooting for parity with direct DMA is a reasonable
> justification for the change.
>

So I have done some more testing with our SoC crypto engine, using 
tcrypt module. The reason I used this device was because we can utilise 
a local device per socket in the system, unlike other DMAing devices, 
which generally only exist on a single socket (for us, anyway).

Overall the results aren't brilliant - as expected - but show a general 
marginal improvement. Here's some figures:

Summary:
Average diff		+0.9%
Max diff		+1.5%
Min diff		+0.2%

Test			     Ops/second	before  after   diff %	

async ecb(aes) encrypt
test 0 (128 bit key, 16 byte blocks)	68717	69057	0.5
test 1 (128 bit key, 64 byte blocks):	72633	73163	0.7
test 2 (128 bit key, 256 byte blocks):	71475	72076	0.8
test 3 (128 bit key, 1024 byte blocks):	66819	67467	1.0
test 4 (128 bit key, 8192 byte blocks):	38237	38495	0.7
test 5 (192 bit key, 16 byte blocks): 	70273	71079	1.2
test 6 (192 bit key, 64 byte blocks):	72455	73292	1.2
test 7 (192 bit key, 256 byte blocks):	71085	71876	1.1
test 8 (192 bit key, 1024 byte blocks):	65891	66576	1.0
test 9 (192 bit key, 8192 byte blocks): 34846	35061	0.6
test 10 (256 bit key, 16 byte blocks):	72927	73762	1.2
test 11 (256 bit key, 64 byte blocks):	72361	73207	1.2
test 12 (256 bit key, 256 byte blocks):	70907	71602	1.0
test 13 (256 bit key, 1024 byte blocks):65035	65653	1.0
test 14 (256 bit key, 8192 byte blocks):32835	32998	0.5
async ecb(aes) decrypt
test 0 (128 bit key, 16 byte blocks)	68384	69130	1.1
test 1 (128 bit key, 64 byte blocks):	72645	73133	0.7
test 2 (128 bit key, 256 byte blocks):	71523	71912	0.5
test 3 (128 bit key, 1024 byte blocks):	66902	67258	0.5
test 4 (128 bit key, 8192 byte blocks):	38260	38434	0.5
test 5 (192 bit key, 16 byte blocks): 	70301	70816	0.7
test 6 (192 bit key, 64 byte blocks):	72473	73064	0.8
test 7 (192 bit key, 256 byte blocks):	71106	71663	0.8
test 8 (192 bit key, 1024 byte blocks):	65915	66363	0.7
test 9 (192 bit key, 8192 byte blocks): 34876	35006	0.4
test 10 (256 bit key, 16 byte blocks):	72969	73519	0.8
test 11 (256 bit key, 64 byte blocks):	72404	72925	0.7
test 12 (256 bit key, 256 byte blocks):	70861	71350	0.7
test 13 (256 bit key, 1024 byte blocks):65074	65485	0.6
test 14 (256 bit key, 8192 byte blocks):32861	32974	0.3
async cbc(aes) encrypt
test 0 (128 bit key, 16 byte blocks)	58306	59131	1.4
test 1 (128 bit key, 64 byte blocks):	61647	62565	1.5
test 2 (128 bit key, 256 byte blocks):	60841	61666	1.4
test 3 (128 bit key, 1024 byte blocks):	57503	58204	1.2
test 4 (128 bit key, 8192 byte blocks):	34760	35055	0.9
test 5 (192 bit key, 16 byte blocks): 	59684	60452	1.3
test 6 (192 bit key, 64 byte blocks):	61705	62516	1.3
test 7 (192 bit key, 256 byte blocks):	60678	61426	1.2
test 8 (192 bit key, 1024 byte blocks):	56805	57487	1.2
test 9 (192 bit key, 8192 byte blocks): 31836	32093	0.8
test 10 (256 bit key, 16 byte blocks):	61961	62785	1.3
test 11 (256 bit key, 64 byte blocks):	61584	62427	1.4
test 12 (256 bit key, 256 byte blocks):	60407	61246	1.4
test 13 (256 bit key, 1024 byte blocks):56135	56868	1.3
test 14 (256 bit key, 8192 byte blocks):30128	30380	0.8
async cbc(aes) decrypt
test 0 (128 bit key, 16 byte blocks)	58555	59044	0.8
test 1 (128 bit key, 64 byte blocks):	61853	62589	1.2
test 2 (128 bit key, 256 byte blocks):	60992	61728	1.2
test 3 (128 bit key, 1024 byte blocks):	57591	58250	1.1
test 4 (128 bit key, 8192 byte blocks):	34796	35064	0.8
test 5 (192 bit key, 16 byte blocks): 	59843	60506	1.1
test 6 (192 bit key, 64 byte blocks):	61808	62521	1.2
test 7 (192 bit key, 256 byte blocks):	60800	61445	1.1
test 8 (192 bit key, 1024 byte blocks):	56949	57513	1.0
test 9 (192 bit key, 8192 byte blocks): 31890	32107	0.7
test 10 (256 bit key, 16 byte blocks):	62109	62778	1.1
test 11 (256 bit key, 64 byte blocks):	61748	62418	1.1
test 12 (256 bit key, 256 byte blocks):	60604	61226	1.0
test 13 (256 bit key, 1024 byte blocks):56277	56845	1.0
test 14 (256 bit key, 8192 byte blocks):30165	30340	0.6
sync xts(aes) encrypt
test 0 (256 bit key, 16 byte blocks):	59501	59742	0.4
test 1 (256 bit key, 64 byte blocks):	62894	63249	0.6
test 2 (256 bit key, 256 byte blocks):	62074	62476	0.7
test 3 (256 bit key, 1024 byte blocks):	58569	58894	0.6
test 4 (256 bit key, 8192 byte blocks):	35271	35462	0.5
test 5 (512 bit key, 16 byte blocks):	60749	61174	0.7
test 6 (512 bit key, 64 byte blocks):	62760	63148	0.6
test 7 (512 bit key, 256 byte blocks):	61625	61928	0.5
test 8 (512 bit key, 1024 byte blocks):	57162	57452	0.5
test 9 (512 bit key, 8192 byte blocks):	30582	30718	0.4
async xts(aes) decrypt
test 0 (256 bit key, 16 byte blocks):	59423	59587	0.3
test 1 (256 bit key, 64 byte blocks):	62849	62974	0.2
test 2 (256 bit key, 256 byte blocks):	61884	62231	0.6
test 3 (256 bit key, 1024 byte blocks):	58402	58699	0.5
test 4 (256 bit key, 8192 byte blocks):	35244	35353	0.3
test 5 (512 bit key, 16 byte blocks):	60693	60882	0.3
test 6 (512 bit key, 64 byte blocks):	62671	62896	0.4
test 7 (512 bit key, 256 byte blocks):	61488	61722	0.4
test 8 (512 bit key, 1024 byte blocks):	57092	57261	0.3
test 9 (512 bit key, 8192 byte blocks):	30572	30655	0.3
sync ctr(aes) encrypt	
test 0 (128 bit key, 16 byte blocks):	59673	9926	0.4
test 1 (128 bit key, 64 byte blocks):	62738	63024	0.5
test 2 (128 bit key, 256 byte blocks):	61841	62171	0.5
test 3 (128 bit key, 1024 byte blocks):	58374	58633	0.4
test 4 (128 bit key, 8192 byte blocks):	35137	35273	0.4
test 5 (192 bit key, 16 byte blocks):	60736	61049	0.5
test 6 (192 bit key, 64 byte blocks):	62718	63081	0.6
test 7 (192 bit key, 256 byte blocks):	61652	61973	0.5
test 8 (192 bit key, 1024 byte blocks):	57709	58002	0.5
test 9 (192 bit key, 8192 byte blocks):	32171	32306	0.4
test 10 (256 bit key, 16 byte blocks):	63000	63428	0.7
test 11 (256 bit key, 64 byte blocks):	62594	63027	0.7
test 12 (256 bit key, 256 byte blocks):	61452	61845	0.6
test 13 (256 bit key, 1024 byte blocks):57019	57346	0.6
test 14 (256 bit key, 8192 byte blocks):30422	30544	0.4
async ctr(aes) decrypt
test 0 (128 bit key, 16 byte blocks):	59488	59994	0.9
test 1 (128 bit key, 64 byte blocks):	62651	63173	0.8
test 2 (128 bit key, 256 byte blocks):	61778	62464	1.1
test 3 (128 bit key, 1024 byte blocks):	58290	58909	1.1
test 4 (128 bit key, 8192 byte blocks):	35115	35358	0.7
test 5 (192 bit key, 16 byte blocks):	60590	61244	1.1
test 6 (192 bit key, 64 byte blocks):	62604	63296	1.1
test 7 (192 bit key, 256 byte blocks):	61540	62199	1.1
test 8 (192 bit key, 1024 byte blocks):	57577	58149	1.0
test 9 (192 bit key, 8192 byte blocks):	32146	32368	0.7
test 10 (256 bit key, 16 byte blocks):	62852	63610	1.2
test 11 (256 bit key, 64 byte blocks):	62523	63276	1.2
test 12 (256 bit key, 256 byte blocks):	61356	62049	1.1
test 13 (256 bit key, 1024 byte blocks):56943	57546	1.1
test 14 (256 bit key, 8192 byte blocks):30399	30593	0.6

Let me know if any more questions or comments.

Thanks,
John

> Will
>
> .
>


