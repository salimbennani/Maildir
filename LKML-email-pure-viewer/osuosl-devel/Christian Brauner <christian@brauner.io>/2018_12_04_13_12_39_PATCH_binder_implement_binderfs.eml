Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 05 Dec 2018 08:38:48 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 97645580375;
	Tue,  4 Dec 2018 05:13:08 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga002-1.jf.intel.com with ESMTP; 04 Dec 2018 05:13:08 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AxTtWEBEs/ba/k2rx+QSu1J1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75ocu+bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7Ses4URXdaXsZJSSNOHp+8?=
 =?us-ascii?q?YYUID+oEJ+lYro/9rEYKoRaxAQSgAeXiwSJKiHDrx603y+QvHx/b0gIuHNwAt3?=
 =?us-ascii?q?vbotruNKcKU+2417XEwDbZYv9Kwzrx9JTEfxY8qv+MR7Jwds/RxFExGgPFlFWQ?=
 =?us-ascii?q?qJflPy+U1usXtWiQ8vdtVfi1hG46rQF+vCKvzdorh4bVhoIV0FHE9T5lwIY0P9?=
 =?us-ascii?q?K4TlV2bsW+EJRKqiGaMZV5Qtk4T2FpvyY307sLsoO1cigNzZQo3R/fa/qffoeS?=
 =?us-ascii?q?+RLsSOeRITZ+hH17fbKwnQy+8U+6yu3zTsW031FKri1fntnDsnAA0QHY5MufSv?=
 =?us-ascii?q?Zl4EutxTKC2xrO5uxKP0w4j7fXJp09zrIql5ces1zPEjH5lUnqg6Kbc0op9+e0?=
 =?us-ascii?q?5+noZ7jqu5GROoFuhQz7PakjmtCzDfg9PwcVXGWX5+ux2bj58kHlTrhGk/g7nb?=
 =?us-ascii?q?LZvZzGO8sWo6C5DgBJ3oo+7Ru0Ei2o384CnXYdKVJIYBKHgJbtO1HJOP34E/i/?=
 =?us-ascii?q?jEq2kDtxxPDJIKfhApPTIXjHirvheqx960FExAoyy9BQ+Y5UB6kfLP7vXkL9rs?=
 =?us-ascii?q?HUAxEnPwCu3urqC8lx2pkfVG+NGqOZNbndsV6M5uIhOemMY4oVtS75K/gk4f7u?=
 =?us-ascii?q?kHA4lUYefaa3x5sXbm63HvB/L0Web3vshMkOEX0RswogQ+zllkeCXSRQZ3msRa?=
 =?us-ascii?q?I84C80CIa8AYfEXICtj6SN3D2nEZ1OemBGFleMHG/sd4WFWPcDdjieI8B8kjEf?=
 =?us-ascii?q?UbihSokh1QyhtQPgyrpnKPbU9TMctZ75yNd14OjTnwko9TNoF8Sdz32NT2Zsk2?=
 =?us-ascii?q?MIXTA23bx/rlZ6yluZ0ah4nuZXFdpc5/5SVgc6NJjcz/F1CtzoWwLBeMuJR0ii?=
 =?us-ascii?q?Qtm8HT4xSdcxyccUY0lhA9WikgzD3y2yDr8XkLyEGoY48qHb33j3IcZ9zG3L1K?=
 =?us-ascii?q?0gj1kgX8tOOneqhq959wjPGYHJl1+VmLqtdaQZxCTN7nuMzXKSvEFEVw59Sb/K?=
 =?us-ascii?q?XWsfZkvRrtT1/FnCQKWsCbk8NgtByMiCKrZFa9HzjFVGQuvjN8raY26rh2iwAh?=
 =?us-ascii?q?OIzKuWbIX2Y2UdwDndCE8cngAQ53mGMxIyBiOgo23ECjxuGkniY0ft8el4tXO6?=
 =?us-ascii?q?QVU4zwCMb019ybW1/gQZiuCbS/MWxrgEojsuqy1oHFah2NLbE8ePqBB/fKpCe9?=
 =?us-ascii?q?894E1I1WTCtwNjOJysKKRihl0bcwRzpE7u0xR3CoNdkckltn8qzQxyKb6G31NF?=
 =?us-ascii?q?bT+XwZfwOrjPIGno4B+vc7LW2k3Z0NuO56gA8uo4pEv5sAGpDEUi9W5n3MdT03?=
 =?us-ascii?q?aH4pXKDQwSUY/+U0ot9hh6oa3abTc554/OyXJsNqy0uCfY2901HOsl1gqgf9BH?=
 =?us-ascii?q?PaOYFQ/yFsoaB9SuKO0qgVSpcggIPOdI9K4wPsOmcfSG1bWvPOZhmjKmkGtG7J?=
 =?us-ascii?q?p80kKK6ypzVOrI04wZzPGf2wuNTy38g0u5ssDrhYBEYikfEXC7ySf6C49eeK1z?=
 =?us-ascii?q?cZwQBmezPsK43NN+h53qW35G71OjA1IG2Mm0eRuddVD93AtQ1VgJrnyjgye30z?=
 =?us-ascii?q?t0kzQxpKqFwCPO2/jidAYAOmNTRGhikE3gLpSug9EbXEindQ4plBS+6Eb+xqhb?=
 =?us-ascii?q?orl/LmbJTUdJeSj2M39tUq+qurWeZM5P7YsisT9LX+SkfVCaVrn9rgMA0yPiA2?=
 =?us-ascii?q?RR3io7eCytupnjmRx1lnidLHdqoHXFY85wwQrQ68LGRf5W2DoLXy14iTjRBlih?=
 =?us-ascii?q?MNil59SUl5Hfsu+gU2KtTIFccS7uzYmYriu0+XVqAQGjn/C0gtDmEQk63TX71t?=
 =?us-ascii?q?VwTiXIsRD8b5Lv16S7N+JnY0ZpCEX968p8BoFxjI8wiIsM1ngdg5Wf5WAHnnvr?=
 =?us-ascii?q?MdVHxaL+a2IARTwRzN7P4wjl20pjImiSx43jVXWdwcphZ9+kbWMQwS8968FKCK?=
 =?us-ascii?q?GJ7L1Lhyd1o1y4rR7Pbvh5hDsS1fwu6HsCieETpAUt1jmdAqwVHURAPS3jjROI?=
 =?us-ascii?q?48q8rKVWYmaiaryw1Et4ndC8A7COuABcWHDlepg8GS989NlwMFXJ0Hfr8IHrZM?=
 =?us-ascii?q?HQbc4Pth2TixrAjPJaKJMrmvoKmCpoI2T9vXI+xu4/jBxu24y6vYedJ2Vs+qK5?=
 =?us-ascii?q?HgBXNjnva8wP/THtiL5UntyK0IC3ApVhBjILUYPtTfKpEzIdr+7rNgiQHz0ntn?=
 =?us-ascii?q?eUB6DfEhSB50d8oHLCCJSrN3CRJHkEwtRuXhidJEpDgA8KWDU2hII2FgevxMb5?=
 =?us-ascii?q?akd2+igR5kLkqhtL0u9oKx7/UmLFqAapcDg0ToWfLAFN7gFD/ErVNc2e7uRuHy?=
 =?us-ascii?q?BX5JGhrQqNKnCFaARMF20GRkuEB1X7NLm0+dbA6/SYBva5L/bWerqBs+teV/OV?=
 =?us-ascii?q?xZ611otm4i2BNsGOPnlkEv061VBPXXF/G8TFhToPTzYbmD7Kb86evB284DF4rt?=
 =?us-ascii?q?ij8PT3XwLi/YmPBKFXMdpx4BC6m7uDO/SThCZkKjZYy5UMymXTyLUE2F4Siidu?=
 =?us-ascii?q?dySiELgatC7NSr7QlbFTDxIBdyxzM85I5bom3gZRIc7bls/11rlgg/81DFdFSE?=
 =?us-ascii?q?XhmtyzaswMOW29L1THBECENLmdIT3Lwsf3Yb6zSLFKjeVUsQGwtiifE0P5IjuD?=
 =?us-ascii?q?kDzpXQi1Me5QlCGbIABeuIalfxZtF2fjTdHmah66MNNtjj0227o0hnzUOm4GLD?=
 =?us-ascii?q?h8aFhArrmR7SNen/V+FHZN7ntjLemYhSmZ6/PUJYoRsftuGi50jf5V4Gwmy7tJ?=
 =?us-ascii?q?6yFJXOZ6mDbJod50vV6nkvODyj5mUBdVrjZLhYSLvVhtOKnD95lAX2rE8wwJ7W?=
 =?us-ascii?q?mKFxsKoN5lAMX1u69M0tjPiL7zKDBa/tLI/MscAtLYJ96dPHU9MRrmBjjUARAB?=
 =?us-ascii?q?TT6qM2HfmkNcnOuT9n2Tspg1tJzslIASRb9cUVw/DukaBVh9HNwePJd3WSspkL?=
 =?us-ascii?q?6Bg84O4Hq+rR/RS91bv5DHTP2SB/rvJS2djblFYRsI3Lz5IZ4SNo39x0xtdF16?=
 =?us-ascii?q?kJ7WFErXWNAe6hFmOwAurUpO8FB6T2suy0zidwWh6WMSEvjymQQ5zkNiYuYq7x?=
 =?us-ascii?q?/l5VstIVvG4iA3lQ15nNzuhhiYdjLrK6a8G4pRDm68s0k3L4O+QAtvawC2tVJr?=
 =?us-ascii?q?OS2CRL9LibZkM2dxh1zyo5xKTNVcV6xffB4Zw7m9ffw111lG4nGsxVVG/vfEAJ?=
 =?us-ascii?q?1KnhEjbJihtTRB3FQwP5YOOaXMKf8RnRBrjaWUs3rti7k8?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0APAABufAZch0O0hNFZChwBAQEEAQEHB?=
 =?us-ascii?q?AEBgVEHAQELAYEwJYEUgQInjBKMDoIhlzUUgRADUA4BARgLCAGEQINRIjQJDQE?=
 =?us-ascii?q?DAQEBAQEBAgETAQEBCgsJCCkjDII2JIJqAhcNCwENAQEmEQEFCQJQAzEBBQEjE?=
 =?us-ascii?q?gWDHAGCAQEECgOYdjyKHYFsM4J2AQEFgTABhX0IEoddgxOBHBeBf4ERhjACgSY?=
 =?us-ascii?q?QBA9EhS+JIQgGhgSBTY9JCYIkhB9AijMjX3xNhESCb4dKAYkFhGeKYgIEAgQFA?=
 =?us-ascii?q?gUPIYElbIEhMxosR4JsCRaBfAwXhTJ8gW1DhUA/MhgBAWoBAQE7iAqCTQEB?=
X-IPAS-Result: =?us-ascii?q?A0APAABufAZch0O0hNFZChwBAQEEAQEHBAEBgVEHAQELAYE?=
 =?us-ascii?q?wJYEUgQInjBKMDoIhlzUUgRADUA4BARgLCAGEQINRIjQJDQEDAQEBAQEBAgETA?=
 =?us-ascii?q?QEBCgsJCCkjDII2JIJqAhcNCwENAQEmEQEFCQJQAzEBBQEjEgWDHAGCAQEECgO?=
 =?us-ascii?q?YdjyKHYFsM4J2AQEFgTABhX0IEoddgxOBHBeBf4ERhjACgSYQBA9EhS+JIQgGh?=
 =?us-ascii?q?gSBTY9JCYIkhB9AijMjX3xNhESCb4dKAYkFhGeKYgIEAgQFAgUPIYElbIEhMxo?=
 =?us-ascii?q?sR4JsCRaBfAwXhTJ8gW1DhUA/MhgBAWoBAQE7iAqCTQEB?=
X-IronPort-AV: E=Sophos;i="5.56,314,1539673200"; 
   d="scan'208";a="56003142"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 04 Dec 2018 05:13:05 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726360AbeLDNNC (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 4 Dec 2018 08:13:02 -0500
Received: from mail-pf1-f194.google.com ([209.85.210.194]:44723 "EHLO
        mail-pf1-f194.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725802AbeLDNNC (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 4 Dec 2018 08:13:02 -0500
Received: by mail-pf1-f194.google.com with SMTP id u6so8186777pfh.11
        for <linux-kernel@vger.kernel.org>; Tue, 04 Dec 2018 05:13:00 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=brauner.io; s=google;
        h=from:to:cc:subject:date:message-id:mime-version
         :content-transfer-encoding;
        bh=3rD42SkB8S1FsdmPKENdSJlb9jx2q0QkQ9hvV8jrvy4=;
        b=bn+BIFE7u3XOCo5PbwR0w4Hl2STwXZ07nkBsjt9NOHZcHG3xxO1zJk4GFHwJHq3Dc7
         mK3vnmZeCynjcsObtyLQguXniNRTwvXdceZ9wXypL9E3P3xqnumgtX/mJnbn76bEr3/6
         IItni3W1WmGYRfE6OJW0T4aL3zlSmR7HcBy9FnnbifLvB7SJnP0gik8mrYahvUhFRfbf
         j4IXp+65IgHVK8uHFImMmxO+r3Y/+bfR41fAqaHfNW+BltarR7Ak41DOSJB1Zau0bbFw
         VDg6X/K1ZHhr4cFHS14GZb2VhUwh0oAbQ3o8rYzB8ICC1fYlNDq+en4u7kx4dVviIrt3
         9wSA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:mime-version
         :content-transfer-encoding;
        bh=3rD42SkB8S1FsdmPKENdSJlb9jx2q0QkQ9hvV8jrvy4=;
        b=QGwvMyfNvsWYnn56GXZFtLtOwVjMIxYKQ1loA7Xl59Uo3u9mRQZDuOKl+bEcXMVgLM
         BdW4r1+k5uMppvbZeekTresIAbesz6ag70pODVjmDI3NJH6GDEqh5V2bhv075CTs3DqJ
         hBp+kQo30H/f3eNOY2kylACT5CQxeuICZMxfZ7sfWgXTczhjyDdzy5qZjFWUdUxkeigJ
         /msei81MLWSkSJt8YNy6oTGs0V/tLpiY+K47MjwKKdf/3LoKXN9YQqtHWgb0pgBliEqJ
         VsFvX32opUK5DbWm7+IOimPRdG3ZhUAwBPEsYE2HJwBOFfLv0Fl9el/ARiQj/GajtJfR
         q2GQ==
X-Gm-Message-State: AA+aEWZzl5yLGgaopCkIODYykErJ4ZnNn6mgC1o7k7G1m+BCLAMlPPsc
        qHnsmUKaqPudMQPhyMH+feBxcw==
X-Google-Smtp-Source: AFSGD/UB0ewOM1vMOgG+vaFyIVceERGoO79R+pRkT/HfB8z0VWFH23nDWBin1KRri7e/VLVHBK5S/Q==
X-Received: by 2002:a62:47d9:: with SMTP id p86mr19583330pfi.95.1543929179704;
        Tue, 04 Dec 2018 05:12:59 -0800 (PST)
Received: from localhost.localdomain ([2404:4404:133a:4500:b824:a031:b50e:f401])
        by smtp.gmail.com with ESMTPSA id e23sm23424209pfh.68.2018.12.04.05.12.53
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Tue, 04 Dec 2018 05:12:58 -0800 (PST)
From: Christian Brauner <christian@brauner.io>
To: gregkh@linuxfoundation.org, tkjos@android.com, maco@android.com,
        linux-kernel@vger.kernel.org
Cc: arve@android.com, joel@joelfernandes.org, darrick.wong@oracle.com,
        david@fromorbit.com, kilobyte@angband.pl,
        devel@driverdev.osuosl.org, chouryzhou@tencent.com,
        Christian Brauner <christian@brauner.io>,
        Todd Kjos <tkjos@google.com>
Subject: [PATCH] binder: implement binderfs
Date: Tue,  4 Dec 2018 14:12:39 +0100
Message-Id: <20181204131239.15158-1-christian@brauner.io>
X-Mailer: git-send-email 2.19.1
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

As discussed at Linux Plumbers Conference 2018 in Vancouver [1] this is the
implementation of binderfs. If you want to skip reading and just see how it
works, please go to [2].

binderfs is a backwards-compatible filesystem for Android's binder ipc
mechanism. Each ipc namespace will mount a new binderfs instance. Mounting
binderfs multiple times at different locations in the same ipc namespace
will not cause a new super block to be allocated and hence it will be the
same filesystem instance.
Each new binderfs mount will have its own set of binder devices only
visible in the ipc namespace it has been mounted in. All devices in a new
binderfs mount will follow the scheme binder%d and numbering will always
start at 0.

/* Backwards compatibility */
Devices requested in the Kconfig via CONFIG_ANDROID_BINDER_DEVICES for the
initial ipc namespace will work as before. They will be registered via
misc_register() and appear in the devtmpfs mount. Specifically, the
standard devices binder, hwbinder, and vndbinder will all appear in their
standard locations in /dev. Mounting or unmounting the binderfs mount in
the initial ipc namespace will have no effect on these devices, i.e. they
will neither show up in the binderfs mount nor will they disappear when the
binderfs mount is gone.

/* binder-control */
Each new binderfs instance comes with a binder-control device. No other
devices will be present at first. The binder-control device can be used to
dynamically allocate binder devices. All requests operate on the binderfs
mount the binder-control device resides in:
- BINDER_CTL_ADD
  Allocate a new binder device.
Assuming a new instance of binderfs has been mounted at /dev/binderfs via
mount -t binderfs binderfs /dev/binderfs. Then a request to create a new
binder device can be made via:

struct binderfs_device device = {0};
int fd = open("/dev/binderfs/binder-control", O_RDWR);
ioctl(fd, BINDER_CTL_ADD, &device);

The struct binderfs_device will be used to return the major and minor
number, as well as the index used as the new name for the device.
Binderfs devices can simply be removed via unlink().

/* Implementation details */
- When binderfs is registered as a new filesystem it will dynamically
  allocate a new major number. The allocated major number will be returned
  in struct binderfs_device when a new binder device is allocated.
  Minor numbers that have been given out are tracked in a global idr struct
  that is capped at BINDERFS_MAX_MINOR. The minor number tracker is
  protected by a global mutex. This is the only point of contention between
  binderfs mounts.
- The naming scheme for binder devices is binder%d. Each binderfs mount
  starts numbering of new binder devices at 0 up to n. The indeces used in
  constructing the name are tracked in a struct idr that is per-binderfs
  super block.
- Each binderfs super block has its own struct binderfs_info that tracks
  specific details about a binderfs instance: the ipc namespace, the idr
  tracker for new names, the dentry of the binder-control device, the
  root uid and gid of the user namespace the binderfs instance was mounted
  in, and a mutex to protect the binder-control device and idr tracker from
  concurrent access.
- binderfs can be mounted by user namespace root in a non-initial user
  namespace. The devices will be owned by user namespace root.
- New binder devices associated with a binderfs mount do not use the
  full misc_register() infrastructure. The misc_register() infrastructure
  can only create new devices in the host's devtmpfs mount. binderfs does
  however only make devices appear under its own mountpoint and thus
  allocates new character devices nodes from the inode of the root dentry
  of the super block. This will have the side-effect that binderfs specific
  device nodes do not appear in sysfs. This behavior is similar to devpts
  allocated pts devices and has no effect on the functionality of the ipc
  mechanism itself.

/* Create a new binder device in a binderfs mount */
sudo mkdir /dev/binderfs
sudo mount -t binder binder /dev/binderfs

 #define _GNU_SOURCE
 #include <errno.h>
 #include <fcntl.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 #include <sys/ioctl.h>
 #include <sys/stat.h>
 #include <sys/types.h>
 #include <unistd.h>
 #include <linux/android/binder_ctl.h>

 int main(int argc, char *argv[])
 {
         int fd, ret, saved_errno;
         struct binderfs_device device = { 0 };

         fd = open("/dev/binderfs/binder-control", O_RDONLY | O_CLOEXEC);
         if (fd < 0) {
                 printf("%s - Failed to open binder-control device\n",
                        strerror(errno));
                 exit(EXIT_FAILURE);
         }

         ret = ioctl(fd, BINDER_CTL_ADD, &device);
         saved_errno = errno;
         close(fd);
         errno = saved_errno;
         if (ret < 0) {
                 printf("%s - Failed to allocate new binder device\n",
                        strerror(errno));
                 exit(EXIT_FAILURE);
         }

         printf("Allocated new binder device with major %d, minor %d, and "
                "name suffix %d\n", device.major, device.minor,
                device.suffix);

         exit(EXIT_SUCCESS);
 }

/* Demo */
A demo of how binderfs works can be found under [2].

[1]: https://goo.gl/JL2tfX
[2]: https://asciinema.org/a/zYUCqL7OySASWK9S2yVFq2sxM

Cc: Martijn Coenen <maco@android.com>
Cc: Todd Kjos <tkjos@google.com>
Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Signed-off-by: Christian Brauner <christian.brauner@ubuntu.com>
---
 drivers/android/Kconfig                 |  12 +
 drivers/android/Makefile                |   1 +
 drivers/android/binder.c                |  25 +-
 drivers/android/binder_internal.h       |  52 +++
 drivers/android/binderfs.c              | 576 ++++++++++++++++++++++++
 include/uapi/linux/android/binder_ctl.h |  33 ++
 include/uapi/linux/magic.h              |   1 +
 7 files changed, 683 insertions(+), 17 deletions(-)
 create mode 100644 drivers/android/binder_internal.h
 create mode 100644 drivers/android/binderfs.c
 create mode 100644 include/uapi/linux/android/binder_ctl.h

diff --git a/drivers/android/Kconfig b/drivers/android/Kconfig
index 51e8250d113f..4c190f8d1f4c 100644
--- a/drivers/android/Kconfig
+++ b/drivers/android/Kconfig
@@ -20,6 +20,18 @@ config ANDROID_BINDER_IPC
 	  Android process, using Binder to identify, invoke and pass arguments
 	  between said processes.
 
+config ANDROID_BINDERFS
+	bool "Android Binderfs filesystem"
+	depends on ANDROID_BINDER_IPC
+	default n
+	---help---
+	  Binderfs is a pseudo-filesystem for the Android Binder IPC driver
+	  which can be mounted per-ipc namespace allowing to run multiple
+	  instances of Android.
+	  Each binderfs mount initially only contains a binder-control device.
+	  It can be used to dynamically allocate new binder IPC devices via
+	  ioctls.
+
 config ANDROID_BINDER_DEVICES
 	string "Android Binder devices"
 	depends on ANDROID_BINDER_IPC
diff --git a/drivers/android/Makefile b/drivers/android/Makefile
index a01254c43ee3..c7856e3200da 100644
--- a/drivers/android/Makefile
+++ b/drivers/android/Makefile
@@ -1,4 +1,5 @@
 ccflags-y += -I$(src)			# needed for trace events
 
+obj-$(CONFIG_ANDROID_BINDERFS)		+= binderfs.o
 obj-$(CONFIG_ANDROID_BINDER_IPC)	+= binder.o binder_alloc.o
 obj-$(CONFIG_ANDROID_BINDER_IPC_SELFTEST) += binder_alloc_selftest.o
diff --git a/drivers/android/binder.c b/drivers/android/binder.c
index cb30a524d16d..3ed8bc4b7451 100644
--- a/drivers/android/binder.c
+++ b/drivers/android/binder.c
@@ -78,6 +78,7 @@
 #include <asm/cacheflush.h>
 
 #include "binder_alloc.h"
+#include "binder_internal.h"
 #include "binder_trace.h"
 
 static HLIST_HEAD(binder_deferred_list);
@@ -262,20 +263,6 @@ static struct binder_transaction_log_entry *binder_transaction_log_add(
 	return e;
 }
 
-struct binder_context {
-	struct binder_node *binder_context_mgr_node;
-	struct mutex context_mgr_node_lock;
-
-	kuid_t binder_context_mgr_uid;
-	const char *name;
-};
-
-struct binder_device {
-	struct hlist_node hlist;
-	struct miscdevice miscdev;
-	struct binder_context context;
-};
-
 /**
  * struct binder_work - work enqueued on a worklist
  * @entry:             node enqueued on list
@@ -4935,8 +4922,12 @@ static int binder_open(struct inode *nodp, struct file *filp)
 	proc->tsk = current->group_leader;
 	INIT_LIST_HEAD(&proc->todo);
 	proc->default_priority = task_nice(current);
-	binder_dev = container_of(filp->private_data, struct binder_device,
-				  miscdev);
+	/* binderfs stashes devices in i_private */
+	if (is_binderfs_device(nodp))
+		binder_dev = nodp->i_private;
+	else
+		binder_dev = container_of(filp->private_data,
+					  struct binder_device, miscdev);
 	proc->context = &binder_dev->context;
 	binder_alloc_init(&proc->alloc);
 
@@ -5724,7 +5715,7 @@ static int binder_transaction_log_show(struct seq_file *m, void *unused)
 	return 0;
 }
 
-static const struct file_operations binder_fops = {
+const struct file_operations binder_fops = {
 	.owner = THIS_MODULE,
 	.poll = binder_poll,
 	.unlocked_ioctl = binder_ioctl,
diff --git a/drivers/android/binder_internal.h b/drivers/android/binder_internal.h
new file mode 100644
index 000000000000..6879478196aa
--- /dev/null
+++ b/drivers/android/binder_internal.h
@@ -0,0 +1,52 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+
+#ifndef _LINUX_BINDER_INTERNAL_H
+#define _LINUX_BINDER_INTERNAL_H
+
+#include <linux/export.h>
+#include <linux/fs.h>
+#include <linux/list.h>
+#include <linux/miscdevice.h>
+#include <linux/mutex.h>
+#include <linux/stddef.h>
+#include <linux/types.h>
+#include <linux/uidgid.h>
+
+struct binder_context {
+	struct binder_node *binder_context_mgr_node;
+	struct mutex context_mgr_node_lock;
+	kuid_t binder_context_mgr_uid;
+	const char *name;
+};
+
+/**
+ * struct binder_device - information about a binder device node
+ * @hlist:          list of binder devices (only used for devices requested via
+ *                  CONFIG_ANDROID_BINDER_DEVICES)
+ * @miscdev:        information about a binder character device node
+ * @context:        binder context information
+ * @binderfs_inode: This is the inode of the root dentry of the super block
+ *                  belonging to a binderfs mount.
+ * @idr:            The idr used to construct the name of the binder device in
+ *                  its binderfs mount.
+ */
+struct binder_device {
+	struct hlist_node hlist;
+	struct miscdevice miscdev;
+	struct binder_context context;
+	struct inode *binderfs_inode;
+	int idr;
+};
+
+extern const struct file_operations binder_fops;
+
+#ifdef CONFIG_ANDROID_BINDERFS
+extern bool is_binderfs_device(const struct inode *inode);
+#else
+static inline bool is_binderfs_device(const struct inode *inode)
+{
+	return false;
+}
+#endif
+
+#endif /* _LINUX_BINDER_INTERNAL_H */
diff --git a/drivers/android/binderfs.c b/drivers/android/binderfs.c
new file mode 100644
index 000000000000..7f88e811adce
--- /dev/null
+++ b/drivers/android/binderfs.c
@@ -0,0 +1,576 @@
+// SPDX-License-Identifier: GPL-2.0
+
+#include <linux/compiler_types.h>
+#include <linux/errno.h>
+#include <linux/fs.h>
+#include <linux/fsnotify.h>
+#include <linux/gfp.h>
+#include <linux/idr.h>
+#include <linux/init.h>
+#include <linux/ipc_namespace.h>
+#include <linux/kdev_t.h>
+#include <linux/kernel.h>
+#include <linux/list.h>
+#include <linux/magic.h>
+#include <linux/major.h>
+#include <linux/miscdevice.h>
+#include <linux/module.h>
+#include <linux/mutex.h>
+#include <linux/mount.h>
+#include <linux/parser.h>
+#include <linux/radix-tree.h>
+#include <linux/sched.h>
+#include <linux/slab.h>
+#include <linux/spinlock_types.h>
+#include <linux/stddef.h>
+#include <linux/string.h>
+#include <linux/types.h>
+#include <linux/uaccess.h>
+#include <linux/user_namespace.h>
+#include <linux/xarray.h>
+#include <uapi/asm-generic/errno-base.h>
+#include <uapi/linux/android/binder.h>
+#include <uapi/linux/android/binder_ctl.h>
+
+#include "binder_internal.h"
+
+#define FIRST_INODE 1
+#define SECOND_INODE 2
+#define INODE_OFFSET 3
+#define INTSTRLEN 21
+#define BINDERFS_MAX_MINOR (1U << MINORBITS)
+
+static struct vfsmount *binderfs_mnt;
+
+static dev_t binderfs_dev;
+static DEFINE_MUTEX(binderfs_minors_mutex);
+static DEFINE_IDR(binderfs_minors);
+
+/**
+ * binderfs_info - information about a binderfs mount
+ * @ipc_ns:         The ipc namespace the binderfs mount belongs to.
+ * @control_dentry: This records the dentry of this binderfs mount
+ *                  binder-control device.
+ * @idr:            Currently occupied idrs in this binderfs mount.
+ * @ctl_mutex:      Protect idr and devices from concurrent access
+ * @root_uid:       uid that needs to be used when a new binder device is
+ *                  created.
+ * @root_gid:       gid that needs to be used when a new binder device is
+ *                  created.
+ */
+struct binderfs_info {
+	struct ipc_namespace *ipc_ns;
+	struct dentry *control_dentry;
+	struct idr idr;
+	struct mutex ctl_mutex;
+	kuid_t root_uid;
+	kgid_t root_gid;
+
+};
+
+static inline struct binderfs_info *BINDERFS_I(struct inode *inode)
+{
+	return inode->i_sb->s_fs_info;
+}
+
+bool is_binderfs_device(const struct inode *inode)
+{
+	if (inode->i_sb->s_magic == BINDERFS_SUPER_MAGIC)
+		return true;
+
+	return false;
+}
+
+/**
+ * binderfs_new_inode - allocate inode from super block of a binderfs mount
+ * @ref_inode: inode from wich the super block will be taken
+ * @userp:     buffer to copy information about new device for userspace to
+ * @device:    binder device for which the new inode will be allocated
+ *
+ * This function will allocate a new inode from the super block of the
+ * filesystem mount and attach a dentry to that inode.
+ * Minor numbers are limited and tracked globally in binderfs_minors.
+ * The function will stash a struct binder_device for the specific binder
+ * device in i_private of the inode.
+ *
+ * Return: 0 on success, negative errno on failure
+ */
+static int binderfs_new_inode(struct inode *ref_inode,
+			      struct binderfs_device __user *userp,
+			      struct binder_device *device)
+{
+	int minor, ret;
+	struct dentry *root, *dentry;
+	size_t name_len = sizeof("binder") - 1 + INTSTRLEN;
+	int new_idr = -1;
+	char *name = NULL;
+	struct inode *inode = NULL;
+	struct binderfs_device bfs_device = { 0 };
+	struct super_block *sb = ref_inode->i_sb;
+	struct binderfs_info *info = sb->s_fs_info;
+
+	/* Reserve new minor number for the new device. */
+	mutex_lock(&binderfs_minors_mutex);
+	minor = idr_alloc(&binderfs_minors, device, 0, BINDERFS_MAX_MINOR + 1,
+			  GFP_KERNEL);
+	mutex_unlock(&binderfs_minors_mutex);
+	if (minor < 0)
+		return minor;
+
+	ret = -ENOMEM;
+	inode = new_inode(sb);
+	if (!inode)
+		goto err;
+
+	inode->i_ino = minor + INODE_OFFSET;
+	inode->i_mtime = inode->i_atime = inode->i_ctime = current_time(inode);
+	init_special_inode(inode, S_IFCHR | 0600,
+			   MKDEV(MAJOR(binderfs_dev), minor));
+	inode->i_fop = &binder_fops;
+	inode->i_uid = info->root_uid;
+	inode->i_gid = info->root_gid;
+	inode->i_private = device;
+
+	name = kmalloc(name_len, GFP_KERNEL);
+	if (!name)
+		goto err;
+
+	/* Allocate new index for binder device name. */
+	ret = idr_alloc(&info->idr, device, 0, BINDERFS_MAX_MINOR + 1,
+			GFP_KERNEL);
+	if (ret < 0)
+		goto err;
+
+	new_idr = ret;
+	ret = snprintf(name, name_len, "binder%d", new_idr);
+	if (ret < 0 || (size_t)ret >= name_len) {
+		ret = -EINVAL;
+		goto err;
+	}
+
+	device->binderfs_inode = inode;
+	device->context.binder_context_mgr_uid = INVALID_UID;
+	device->context.name = name;
+	device->idr = new_idr;
+	device->miscdev.name = name;
+	device->miscdev.minor = minor;
+	mutex_init(&device->context.context_mgr_node_lock);
+
+	bfs_device.major = MAJOR(binderfs_dev);
+	bfs_device.minor = minor;
+	bfs_device.suffix = new_idr;
+
+	ret = copy_to_user(userp, &bfs_device, sizeof(bfs_device));
+	if (ret)
+		goto err;
+
+	ret = -ENOMEM;
+	root = sb->s_root;
+	inode_lock(d_inode(root));
+	dentry = d_alloc_name(root, name);
+	if (!dentry) {
+		inode_unlock(d_inode(root));
+		goto err;
+	}
+
+	d_add(dentry, inode);
+	fsnotify_create(root->d_inode, dentry);
+	inode_unlock(d_inode(root));
+
+	return 0;
+
+err:
+	kfree(name);
+	mutex_lock(&binderfs_minors_mutex);
+	idr_remove(&binderfs_minors, minor);
+	mutex_unlock(&binderfs_minors_mutex);
+	if (new_idr >= 0)
+		idr_remove(&info->idr, new_idr);
+	iput(inode);
+
+	return ret;
+}
+
+static int binderfs_binder_device_create(struct inode *inode,
+					 struct binderfs_device __user *userp)
+{
+	struct binder_device *device;
+	int ret;
+
+	device = kzalloc(sizeof(*device), GFP_KERNEL);
+	if (!device)
+		return -ENOMEM;
+
+	ret = binderfs_new_inode(inode, userp, device);
+	if (ret < 0) {
+		kfree(device);
+		return ret;
+	}
+
+	return 0;
+}
+
+/**
+ * binderfs_ctl_ioctl - handle binder device node allocation requests
+ *
+ * The request handler for the binder-control device. All requests operate on
+ * the binderfs mount the binder-control device resides in:
+ * - BINDER_CTL_ADD
+ *   Allocate a new binder device.
+ *
+ * Return: 0 on success, negative errno on failure
+ */
+static long binder_ctl_ioctl(struct file *file, unsigned int cmd,
+			     unsigned long arg)
+{
+	struct binderfs_info *info;
+	int ret = -EINVAL;
+	struct inode *inode = file_inode(file);
+	struct binderfs_device *device = (struct binderfs_device __user *)arg;
+
+	info = BINDERFS_I(inode);
+	mutex_lock(&info->ctl_mutex);
+	switch (cmd) {
+	case BINDER_CTL_ADD:
+		ret = binderfs_binder_device_create(inode, device);
+		break;
+	default:
+		break;
+	}
+	mutex_unlock(&info->ctl_mutex);
+
+	return ret;
+}
+
+static void binderfs_evict_inode(struct inode *inode)
+{
+	struct binderfs_info *info = BINDERFS_I(inode);
+	struct binder_device *device = inode->i_private;
+
+	clear_inode(inode);
+
+	if (!device)
+		return;
+
+	mutex_lock(&binderfs_minors_mutex);
+	idr_remove(&binderfs_minors, device->miscdev.minor);
+	mutex_unlock(&binderfs_minors_mutex);
+
+	/* binder-control does not have an idr allocation */
+	if (device->idr >= 0) {
+		mutex_lock(&info->ctl_mutex);
+		idr_remove(&info->idr, device->idr);
+		mutex_unlock(&info->ctl_mutex);
+	}
+
+	kfree(device->context.name);
+	kfree(device);
+}
+
+static const struct super_operations binderfs_super_ops = {
+	.statfs = simple_statfs,
+	.evict_inode = binderfs_evict_inode,
+};
+
+static int binderfs_rename(struct inode *old_dir, struct dentry *old_dentry,
+			   struct inode *new_dir, struct dentry *new_dentry,
+			   unsigned int flags)
+{
+	struct inode *inode = d_inode(old_dentry);
+
+	/* binderfs doesn't support directories. */
+	if (d_is_dir(old_dentry))
+		return -EPERM;
+
+	if (flags & ~RENAME_NOREPLACE)
+		return -EINVAL;
+
+	if (!simple_empty(new_dentry))
+		return -ENOTEMPTY;
+
+	if (d_really_is_positive(new_dentry))
+		simple_unlink(new_dir, new_dentry);
+
+	old_dir->i_ctime = old_dir->i_mtime = new_dir->i_ctime =
+		new_dir->i_mtime = inode->i_ctime = current_time(old_dir);
+
+	return 0;
+}
+
+static int binderfs_unlink(struct inode *dir, struct dentry *dentry)
+{
+	/*
+	 * The control dentry is only ever touched during mount so checking it
+	 * here should not require us to take lock.
+	 */
+	if (BINDERFS_I(dir)->control_dentry == dentry)
+		return -EPERM;
+
+	return simple_unlink(dir, dentry);
+}
+
+static const struct inode_operations binderfs_dir_inode_operations = {
+	.lookup = simple_lookup,
+	.rename = binderfs_rename,
+	.unlink = binderfs_unlink,
+};
+
+static int binderfs_fill_super(struct super_block *sb, void *data, int silent)
+{
+	struct binderfs_info *info;
+	struct inode *inode = NULL;
+	struct ipc_namespace *ipc_ns = sb->s_fs_info;
+
+	get_ipc_ns(ipc_ns);
+
+	sb->s_blocksize = PAGE_SIZE;
+	sb->s_blocksize_bits = PAGE_SHIFT;
+
+	/*
+	 * The binderfs filesystem can be mounted by userns root in a
+	 * non-initial userns. By default such mounts have the SB_I_NODEV flag
+	 * set in s_iflags to prevent security issues where userns root can
+	 * just create random device nodes via mknod() since it owns the
+	 * filesystem mount. But binderfs does not allow to create any files
+	 * including devices nodes. The only way to create binder devices nodes
+	 * is through the binder-control device which userns root is explicitly
+	 * allowed to do. So removing the SB_I_NODEV flag from s_iflags is both
+	 * necessary and safe.
+	 */
+	sb->s_iflags &= ~SB_I_NODEV;
+	sb->s_iflags |= SB_I_NOEXEC;
+	sb->s_magic = BINDERFS_SUPER_MAGIC;
+	sb->s_op = &binderfs_super_ops;
+	sb->s_time_gran = 1;
+
+	info = kzalloc(sizeof(struct binderfs_info), GFP_KERNEL);
+	if (!info)
+		return -ENOMEM;
+
+	info->ipc_ns = ipc_ns;
+	info->root_gid = make_kgid(sb->s_user_ns, 0);
+	if (!gid_valid(info->root_gid))
+		info->root_gid = GLOBAL_ROOT_GID;
+	info->root_uid = make_kuid(sb->s_user_ns, 0);
+	if (!uid_valid(info->root_uid))
+		info->root_uid = GLOBAL_ROOT_UID;
+	idr_init(&info->idr);
+	mutex_init(&info->ctl_mutex);
+
+	sb->s_fs_info = info;
+
+	inode = new_inode(sb);
+	if (!inode)
+		goto err;
+
+	inode->i_ino = FIRST_INODE;
+	inode->i_fop = &simple_dir_operations;
+	inode->i_mode = 0755;
+	inode->i_mtime = inode->i_atime = inode->i_ctime = current_time(inode);
+	inode->i_op = &binderfs_dir_inode_operations;
+	set_nlink(inode, 2);
+
+	sb->s_root = d_make_root(inode);
+	if (sb->s_root)
+		return 0;
+
+err:
+	if (inode)
+		iput(inode);
+	kfree(info);
+	put_ipc_ns(ipc_ns);
+
+	return -ENOMEM;
+}
+
+static const struct file_operations binder_ctl_fops = {
+	.owner		= THIS_MODULE,
+	.open		= nonseekable_open,
+	.unlocked_ioctl	= binder_ctl_ioctl,
+	.compat_ioctl	= binder_ctl_ioctl,
+	.llseek		= noop_llseek,
+};
+
+/**
+ * binderfs_binder_ctl_create - create a new binder-control device
+ * @sb: super block of the binderfs mount
+ *
+ * This function creates a new binder-control device node in the binderfs mount
+ * referred to by @sb.
+ *
+ * Return: 0 on success, negative errno on failure
+ */
+static int binderfs_binder_ctl_create(struct super_block *sb)
+{
+	int minor;
+	struct inode *inode;
+	struct dentry *dentry;
+	struct binder_device *device;
+	struct dentry *root = sb->s_root;
+	struct binderfs_info *info = sb->s_fs_info;
+	int ret = 0;
+
+	device = kzalloc(sizeof(*device), GFP_KERNEL);
+	if (!device)
+		return -ENOMEM;
+
+	inode_lock(d_inode(root));
+
+	if (info->control_dentry)
+		goto out;
+
+	ret = -ENOMEM;
+	inode = new_inode(sb);
+	if (!inode)
+		goto out;
+
+	/* Reserve a new minor number for the new device. */
+	mutex_lock(&binderfs_minors_mutex);
+	minor = idr_alloc(&binderfs_minors, device, 0, BINDERFS_MAX_MINOR + 1,
+			  GFP_KERNEL);
+	mutex_unlock(&binderfs_minors_mutex);
+	if (minor < 0) {
+		ret = minor;
+		goto out;
+	}
+
+	inode->i_ino = SECOND_INODE;
+	inode->i_mtime = inode->i_atime = inode->i_ctime = current_time(inode);
+	init_special_inode(inode, S_IFCHR | 0600,
+			   MKDEV(MAJOR(binderfs_dev), minor));
+	inode->i_fop = &binder_ctl_fops;
+	inode->i_uid = info->root_uid;
+	inode->i_gid = info->root_gid;
+	inode->i_private = device;
+
+	device->binderfs_inode = inode;
+	device->miscdev.minor = minor;
+	device->idr = -1;
+
+	dentry = d_alloc_name(root, "binder-control");
+	if (!dentry)
+		goto out;
+
+	info->control_dentry = dentry;
+	d_add(dentry, inode);
+
+	ret = 0;
+out:
+	inode_unlock(d_inode(root));
+	if (ret)
+		kfree(device);
+	return ret;
+}
+
+
+static int binderfs_test_super(struct super_block *sb, void *data)
+{
+	struct binderfs_info *info = sb->s_fs_info;
+
+	if (info)
+		return info->ipc_ns == data;
+
+	return 0;
+}
+
+static int binderfs_set_super(struct super_block *sb, void *data)
+{
+	sb->s_fs_info = data;
+	return set_anon_super(sb, NULL);
+}
+
+static void binderfs_free_binderfs_info(struct super_block *sb)
+{
+	struct binderfs_info *info = sb->s_fs_info;
+
+	put_ipc_ns(info->ipc_ns);
+	kfree(info);
+}
+
+static struct dentry *binderfs_mount(struct file_system_type *fs_type,
+				     int flags, const char *dev_name,
+				     void *data)
+{
+	int err;
+	bool new_sb;
+	struct super_block *sb;
+	struct ipc_namespace *ipc_ns = current->nsproxy->ipc_ns;
+
+	if (!ns_capable(ipc_ns->user_ns, CAP_SYS_ADMIN))
+		return ERR_PTR(-EPERM);
+
+	sb = sget_userns(fs_type, binderfs_test_super, binderfs_set_super,
+			 flags, ipc_ns->user_ns, ipc_ns);
+	if (IS_ERR(sb))
+		return ERR_CAST(sb);
+
+	new_sb = !sb->s_root;
+	if (new_sb) {
+		err = binderfs_fill_super(sb, data, flags & SB_SILENT ? 1 : 0);
+		if (err) {
+			deactivate_locked_super(sb);
+			return ERR_PTR(err);
+		}
+		dget(sb->s_root);
+		sb->s_flags |= SB_ACTIVE;
+	}
+
+	err = binderfs_binder_ctl_create(sb);
+	if (err) {
+		if (new_sb) {
+			binderfs_free_binderfs_info(sb);
+			dput(sb->s_root);
+			deactivate_locked_super(sb);
+		}
+		return ERR_PTR(err);
+	}
+
+	return sb->s_root;
+}
+
+static void binderfs_kill_super(struct super_block *sb)
+{
+	struct binderfs_info *info = sb->s_fs_info;
+	struct ipc_namespace *ipc_ns = info->ipc_ns;
+
+	kfree(info);
+	kill_litter_super(sb);
+	if (ipc_ns)
+		put_ipc_ns(ipc_ns);
+}
+
+static struct file_system_type binder_fs_type = {
+	.name		= "binder",
+	.mount		= binderfs_mount,
+	.kill_sb	= binderfs_kill_super,
+	.fs_flags	= FS_USERNS_MOUNT,
+};
+
+static int __init init_binderfs(void)
+{
+	int ret;
+
+	/* Allocate new major number for binderfs. */
+	ret = alloc_chrdev_region(&binderfs_dev, 0, BINDERFS_MAX_MINOR,
+				  "binder");
+	if (ret < 0)
+		return ret;
+
+	ret = register_filesystem(&binder_fs_type);
+	if (ret) {
+		unregister_chrdev_region(binderfs_dev, BINDERFS_MAX_MINOR);
+		return ret;
+	}
+
+	binderfs_mnt = kern_mount(&binder_fs_type);
+	if (IS_ERR(binderfs_mnt)) {
+		ret = PTR_ERR(binderfs_mnt);
+		binderfs_mnt = NULL;
+		unregister_filesystem(&binder_fs_type);
+		unregister_chrdev_region(binderfs_dev, BINDERFS_MAX_MINOR);
+	}
+
+	return ret;
+}
+
+device_initcall(init_binderfs);
diff --git a/include/uapi/linux/android/binder_ctl.h b/include/uapi/linux/android/binder_ctl.h
new file mode 100644
index 000000000000..a706608dd67c
--- /dev/null
+++ b/include/uapi/linux/android/binder_ctl.h
@@ -0,0 +1,33 @@
+/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */
+/*
+ * Copyright (C) 2018 Canonical Ltd.
+ *
+ */
+
+#ifndef _UAPI_LINUX_BINDER_CTL_H
+#define _UAPI_LINUX_BINDER_CTL_H
+
+#include <linux/android/binder.h>
+#include <linux/types.h>
+#include <linux/ioctl.h>
+
+/**
+ * struct binderfs_device - retrieve information about a new binder device
+ * @major:  major number allocated for binderfs binder devices
+ * @minor:  minor number allocated for the new binderfs binder device
+ * @suffix: index used as the name for the new binder device
+ *
+ */
+struct binderfs_device {
+	__u32 major;
+	__u32 minor;
+	__u32 suffix;
+};
+
+/**
+ * Allocate a new binder device.
+ */
+#define BINDER_CTL_ADD _IOWR('b', 1, struct binderfs_device)
+
+#endif /* _UAPI_LINUX_BINDER_CTL_H */
+
diff --git a/include/uapi/linux/magic.h b/include/uapi/linux/magic.h
index 96c24478d8ce..f8c00045d537 100644
--- a/include/uapi/linux/magic.h
+++ b/include/uapi/linux/magic.h
@@ -73,6 +73,7 @@
 #define DAXFS_MAGIC             0x64646178
 #define BINFMTFS_MAGIC          0x42494e4d
 #define DEVPTS_SUPER_MAGIC	0x1cd1
+#define BINDERFS_SUPER_MAGIC	0x6c6f6f70
 #define FUTEXFS_SUPER_MAGIC	0xBAD1DEA
 #define PIPEFS_MAGIC            0x50495045
 #define PROC_SUPER_MAGIC	0x9fa0
-- 
2.19.1

