Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 03 Dec 2018 20:25:52 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id B7338580224;
	Mon,  3 Dec 2018 03:19:22 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 03 Dec 2018 03:19:21 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ATu4lmBV6MaWIIZpwDfSyYN6H7NzV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhCEuadThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGoOy?=
 =?us-ascii?q?YZUSAeQPPuhYtJH9qlkVoBeiGQWhHv/jxiNUinPq26AxzuQvERvB3AwlB98Avm?=
 =?us-ascii?q?7brMv0NKgPTOu7zqjIzTHeYPxI3zfy85LIfQonof6RQLl9dtfexlMxFwPEk1qd?=
 =?us-ascii?q?spblMC2I2eQNqWeb8/BsWv6oi24isgx8pCWkyMQ0ioTRmI4Z1lTJ+T9kzIs7O9?=
 =?us-ascii?q?G0UlN3bN24HJdKtiyXNZN6Tt0+T2xsoio217MLtYChcCQXy5kqyQTTZ+KEfoWO?=
 =?us-ascii?q?/xntTvyeIS1ii3JgYL+/hwi98UynyuDkSMm030hFrjBfntnPqH8NzRrT5daDSv?=
 =?us-ascii?q?dn+UehwzmP2xjS6uFCP080ibLWJ4A9zrM0jJYfrErOEjHslEnrj6Kaal8o9+mq?=
 =?us-ascii?q?5uj/Z7XpvJ6cN4t6igHkNaQun9SyAeA5MggIQmia9v2w1L798k3jRrVFkPk2nr?=
 =?us-ascii?q?DesJHUI8QUuLS5DhRL0oYs9Rm/FS2q0NcGknkdKlJKZhaHg5LuO1HUL/D0Fe2/?=
 =?us-ascii?q?jEi0kDd32/DGOaXsApHMLnjAjrjtZ7l861NHxQo3zNBf4Y9UC74bLPLyXE/xqM?=
 =?us-ascii?q?LXDhsjPwOoxObnDc131pkCVmKXHq+ZLKTSvEeI5u01IumMeJUauDHnJ/gl+v7h?=
 =?us-ascii?q?l3k5mVAGcKmt3JsXbm24H/t8L0WYZ3rsnskOEWMQsgUiS+zqjUWIUSRPaHaqQ6?=
 =?us-ascii?q?I8+jY7BZqkDYfEWI+hmr+B3CC9Hp1QYWBLEVSMEXbud4WZVPYAciOSIsl9kjMa?=
 =?us-ascii?q?UbitUZMu1RartAXi0bpoMvLU+jEEtZLkzNV6/fbTlRE19Tx3FcidyXuCT2Nvk2?=
 =?us-ascii?q?MMRj822r1/oENnxleC16h4n+JXFdhJ6/xVVQc6MIbWz/ZmBNDqRgLBYtCJRU6l?=
 =?us-ascii?q?Qtq8BzE9VNYxw94UbEZ7FNWvlRTD3yusA78ImL2HHp008qTA33fvI8Zx0WrJ1K?=
 =?us-ascii?q?4kj1M+WMtAKXWmhrJj9wjUH4PGjl+Wl7i0eqgG3C7C7mGDzXGQs0FeVwJwVabF?=
 =?us-ascii?q?XXUbZkbNqdT550XCT6KhCLg9MwtBz9KCJbVOatHzkVpGQ/LjMszEY22tg2ewGQ?=
 =?us-ascii?q?qIxrSUYYX3YWodwjvSBFIEkw8J+3aGLhYxBiG6rmLaDTxuE0/vYkz2/el/rnO7?=
 =?us-ascii?q?UlE7zwWQY0J90Lq1/wYfheaARPMLwrIEpCAhpi1oHFa82tLWDMaApwphfalGfd?=
 =?us-ascii?q?Mx+lBH1Xjdtwx8OJygILtvhlofcwRxokPv2A97CoRGkcg2snwqyBB+Jr6f0FNE?=
 =?us-ascii?q?bzmYx4z/OqXLKmnu+xCic7TZ2lXA39eZ5KgO6O40pE7+vA60DEUi9XZn095L03?=
 =?us-ascii?q?aH4pXKDQwSUY/+U0ot9hh6oa3abTc554/OyXJsNqy0uCfY2901HOsl1gqgf9BH?=
 =?us-ascii?q?PaKECQ/+CdEVC9KvKewqgVepaB0EMftW9K41OcOmavSH1LSqPOZmgDKpk2BH7J?=
 =?us-ascii?q?ph3UKL8ip2UvTI0Iodw/GEwguHUC/xjE2gss/rg49EfywdHm2lxSjiGoFRfKxy?=
 =?us-ascii?q?cZ8XBmi0J82428txh4TqW35e71OjA1IG2Mm0eRuddVD93AtQ1VgJrnyjgye30z?=
 =?us-ascii?q?t0kzQxpKqFwCPO2/jidAYAOmNTRGhijE3gIIiug9ABQUioaRMklB+k5Ub82qha?=
 =?us-ascii?q?q75zL2jVQUdUYSf2K3tuXbe3trqHe8RP8o8nsT1LUOSgZlCXUrz9rAEA0yPgHG?=
 =?us-ascii?q?tewyo3dyqwtZX6nBx6iWSdI2h1rHfCfcFwxBHf5MHTRPJL3zoGQjV4hifTBlSm?=
 =?us-ascii?q?I9ap+tCUnY/Zsu+iT2KhSoFTcS7zwIKAriS74ndmAR++n/C1gdDnFQk60Snm19?=
 =?us-ascii?q?hlTynIrRD8YpX12KS+K+5oYk5oBFrk4cpgBo5+ipcwhI0X2XUChZWa53sHnX3z?=
 =?us-ascii?q?MdVGw63+anUNSCUPw97U5gjlxUJiImiIx4L/SnWS3M9ha8OmbWMR3yI399pKB7?=
 =?us-ascii?q?uM7LxYgSt1pUK1rQfQYfh+hDgR0/Uv52ABg+EVpgUt1D6SDa4IHUlXJiHskxWI?=
 =?us-ascii?q?79ajrKRYfmqvcL6w1FZgktClFr2NvgZcWHPhcJc4ASBw9tl/ME7L0HDr9oHkf9?=
 =?us-ascii?q?zQYcgStxKOlRfAkvNVKIkwlvcRgSpnOGT9vWAqyuIhjBxu2426s5aDK2l34K25?=
 =?us-ascii?q?BRtYPCXvZ8wP4jHtkbpensGO0o+0BJphHTELXIbyQfKsDTIfrvDnNweIED0hpX?=
 =?us-ascii?q?aXA7vfHQmD6Eh4q3LDCYykN3aSJHMB19VtWAGdJFBDgAATRDg6nIQ2FgW0y8z6?=
 =?us-ascii?q?akt5+iod5l3lqhtP1+JoMQPwUnzEqQesazc0ToWfLRVM4gFD4UfVLdKR7uZpEy?=
 =?us-ascii?q?5E+Z2hqRSHKnaHaARQEWEJRkuECkjjP7mp+NnA6vWYCfC4L/fUerWOrupeV/iT?=
 =?us-ascii?q?yJKr04tm+SuMN8qVMnljCf07xlRMXXRjF8vFnDUPTjQdlzjRYM6DuBe85ip3o9?=
 =?us-ascii?q?i/8Pv1WQLv5oiPC7pIPdVs4RC2hqiDOPCKhCZkMjZVzZcMxX7OyLgC018ekSBu?=
 =?us-ascii?q?dz+xEbsesS7BVr7fmqhSDxQDcSN8KNNI774g3glKIcPUkM712aVijvErC1ZJT1?=
 =?us-ascii?q?jhmsCyaMwOImG9Mk7HBUmROLSHIz3L39/4YaemRbJMi+VUsgW6uSyHHE/7IjSD?=
 =?us-ascii?q?iz7pWgizMeFNiSGXJgBRtJuhfRZtF2fjSsnrahm6MN9xkD03zqc4hnLMNW4ALz?=
 =?us-ascii?q?d8d1lBoaGX7SNdmv9/AXBO7mJ5LemYnCaU9+nZJYwQsftuAyR0kfpV4XU6y7RP?=
 =?us-ascii?q?6iFES+d4mC/Trt5ovlGnnfODyjthUBpStDlLgJiHslllOaXcpdF8XiPA/RQQ/S?=
 =?us-ascii?q?CVDjwJudJuCZvooa8D5MLIkfffISlD/5r0/M8QCs7eMsuBPDJ1PRP3GTL8FgYJ?=
 =?us-ascii?q?TTe3c2rYghoOw7mp6nSJo81i+dDXk50UR+oeDQRtGw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ATAABAEAVch0O0hNFiHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGDayeMEV+NTIh9jjeBcxQYEwGIAyI0CQ0BAwEBAQEBAQIBEwEBAQoLCQg?=
 =?us-ascii?q?pL4I2JAGCaQJ2BgkCUAMeTwWDHIFqAxUFpiWHdQ2CHIwcF4F/gRGFaYgFAokwg?=
 =?us-ascii?q?W+UWxguCYIji2uBCIIbCxhffIgANocVLI5IhgODdoFGgg1wFYMngicXjh4+AQE?=
 =?us-ascii?q?xgQUBARyKUAEB?=
X-IPAS-Result: =?us-ascii?q?A0ATAABAEAVch0O0hNFiHQEBBQEHBQGBUQgBCwGDayeMEV+?=
 =?us-ascii?q?NTIh9jjeBcxQYEwGIAyI0CQ0BAwEBAQEBAQIBEwEBAQoLCQgpL4I2JAGCaQJ2B?=
 =?us-ascii?q?gkCUAMeTwWDHIFqAxUFpiWHdQ2CHIwcF4F/gRGFaYgFAokwgW+UWxguCYIji2u?=
 =?us-ascii?q?BCIIbCxhffIgANocVLI5IhgODdoFGgg1wFYMngicXjh4+AQExgQUBARyKUAEB?=
X-IronPort-AV: E=Sophos;i="5.56,310,1539673200"; 
   d="scan'208";a="55265760"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 03 Dec 2018 03:19:20 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726277AbeLCLQx (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 3 Dec 2018 06:16:53 -0500
Received: from mx1.redhat.com ([209.132.183.28]:33986 "EHLO mx1.redhat.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1725888AbeLCLQx (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 3 Dec 2018 06:16:53 -0500
Received: from smtp.corp.redhat.com (int-mx06.intmail.prod.int.phx2.redhat.com [10.5.11.16])
        (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
        (No client certificate requested)
        by mx1.redhat.com (Postfix) with ESMTPS id 2D33D30015FE;
        Mon,  3 Dec 2018 11:16:16 +0000 (UTC)
Received: from t460s.redhat.com (unknown [10.36.118.125])
        by smtp.corp.redhat.com (Postfix) with ESMTP id DE66B5C23A;
        Mon,  3 Dec 2018 11:16:11 +0000 (UTC)
From: David Hildenbrand <david@redhat.com>
To: linux-mm@kvack.org
Cc: linux-kernel@vger.kernel.org, David Hildenbrand <david@redhat.com>,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        "Rafael J. Wysocki" <rafael@kernel.org>,
        Andrew Morton <akpm@linux-foundation.org>,
        Ingo Molnar <mingo@kernel.org>,
        Pavel Tatashin <pasha.tatashin@oracle.com>,
        Oscar Salvador <osalvador@suse.com>,
        Michal Hocko <mhocko@kernel.org>,
        Wei Yang <richard.weiyang@gmail.com>
Subject: [PATCH v1] drivers/base/memory.c: Use DEVICE_ATTR_RO and friends
Date: Mon,  3 Dec 2018 12:16:11 +0100
Message-Id: <20181203111611.10633-1-david@redhat.com>
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.16
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16 (mx1.redhat.com [10.5.110.43]); Mon, 03 Dec 2018 11:16:16 +0000 (UTC)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Let's use the easier to read (and not mess up) variants:
- Use DEVICE_ATTR_RO
- Use DEVICE_ATTR_WO
- Use DEVICE_ATTR_RW
instead of the more generic DEVICE_ATTR() we're using right now.

We have to rename most callback functions. By fixing the intendations we
can even save some LOCs.

Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Cc: "Rafael J. Wysocki" <rafael@kernel.org>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Ingo Molnar <mingo@kernel.org>
Cc: Pavel Tatashin <pasha.tatashin@oracle.com>
Cc: Oscar Salvador <osalvador@suse.com>
Cc: Michal Hocko <mhocko@kernel.org>
Cc: Wei Yang <richard.weiyang@gmail.com>
Signed-off-by: David Hildenbrand <david@redhat.com>
---
 drivers/base/memory.c | 79 ++++++++++++++++++++-----------------------
 1 file changed, 36 insertions(+), 43 deletions(-)

diff --git a/drivers/base/memory.c b/drivers/base/memory.c
index 0c290f86ab20..c9c1ee564edb 100644
--- a/drivers/base/memory.c
+++ b/drivers/base/memory.c
@@ -109,8 +109,8 @@ static unsigned long get_memory_block_size(void)
  * uses.
  */
 
-static ssize_t show_mem_start_phys_index(struct device *dev,
-			struct device_attribute *attr, char *buf)
+static ssize_t phys_index_show(struct device *dev,
+			       struct device_attribute *attr, char *buf)
 {
 	struct memory_block *mem = to_memory_block(dev);
 	unsigned long phys_index;
@@ -122,8 +122,8 @@ static ssize_t show_mem_start_phys_index(struct device *dev,
 /*
  * Show whether the section of memory is likely to be hot-removable
  */
-static ssize_t show_mem_removable(struct device *dev,
-			struct device_attribute *attr, char *buf)
+static ssize_t removable_show(struct device *dev, struct device_attribute *attr,
+			      char *buf)
 {
 	unsigned long i, pfn;
 	int ret = 1;
@@ -146,8 +146,8 @@ static ssize_t show_mem_removable(struct device *dev,
 /*
  * online, offline, going offline, etc.
  */
-static ssize_t show_mem_state(struct device *dev,
-			struct device_attribute *attr, char *buf)
+static ssize_t state_show(struct device *dev, struct device_attribute *attr,
+			  char *buf)
 {
 	struct memory_block *mem = to_memory_block(dev);
 	ssize_t len = 0;
@@ -286,7 +286,7 @@ static int memory_subsys_online(struct device *dev)
 		return 0;
 
 	/*
-	 * If we are called from store_mem_state(), online_type will be
+	 * If we are called from state_store(), online_type will be
 	 * set >= 0 Otherwise we were called from the device online
 	 * attribute and need to set the online_type.
 	 */
@@ -315,9 +315,8 @@ static int memory_subsys_offline(struct device *dev)
 	return memory_block_change_state(mem, MEM_OFFLINE, MEM_ONLINE);
 }
 
-static ssize_t
-store_mem_state(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t count)
+static ssize_t state_store(struct device *dev, struct device_attribute *attr,
+			   const char *buf, size_t count)
 {
 	struct memory_block *mem = to_memory_block(dev);
 	int ret, online_type;
@@ -374,7 +373,7 @@ store_mem_state(struct device *dev,
  * s.t. if I offline all of these sections I can then
  * remove the physical device?
  */
-static ssize_t show_phys_device(struct device *dev,
+static ssize_t phys_device_show(struct device *dev,
 				struct device_attribute *attr, char *buf)
 {
 	struct memory_block *mem = to_memory_block(dev);
@@ -395,7 +394,7 @@ static void print_allowed_zone(char *buf, int nid, unsigned long start_pfn,
 	}
 }
 
-static ssize_t show_valid_zones(struct device *dev,
+static ssize_t valid_zones_show(struct device *dev,
 				struct device_attribute *attr, char *buf)
 {
 	struct memory_block *mem = to_memory_block(dev);
@@ -435,33 +434,31 @@ static ssize_t show_valid_zones(struct device *dev,
 
 	return strlen(buf);
 }
-static DEVICE_ATTR(valid_zones, 0444, show_valid_zones, NULL);
+static DEVICE_ATTR_RO(valid_zones);
 #endif
 
-static DEVICE_ATTR(phys_index, 0444, show_mem_start_phys_index, NULL);
-static DEVICE_ATTR(state, 0644, show_mem_state, store_mem_state);
-static DEVICE_ATTR(phys_device, 0444, show_phys_device, NULL);
-static DEVICE_ATTR(removable, 0444, show_mem_removable, NULL);
+static DEVICE_ATTR_RO(phys_index);
+static DEVICE_ATTR_RW(state);
+static DEVICE_ATTR_RO(phys_device);
+static DEVICE_ATTR_RO(removable);
 
 /*
  * Block size attribute stuff
  */
-static ssize_t
-print_block_size(struct device *dev, struct device_attribute *attr,
-		 char *buf)
+static ssize_t block_size_bytes_show(struct device *dev,
+				     struct device_attribute *attr, char *buf)
 {
 	return sprintf(buf, "%lx\n", get_memory_block_size());
 }
 
-static DEVICE_ATTR(block_size_bytes, 0444, print_block_size, NULL);
+static DEVICE_ATTR_RO(block_size_bytes);
 
 /*
  * Memory auto online policy.
  */
 
-static ssize_t
-show_auto_online_blocks(struct device *dev, struct device_attribute *attr,
-			char *buf)
+static ssize_t auto_online_blocks_show(struct device *dev,
+				       struct device_attribute *attr, char *buf)
 {
 	if (memhp_auto_online)
 		return sprintf(buf, "online\n");
@@ -469,9 +466,9 @@ show_auto_online_blocks(struct device *dev, struct device_attribute *attr,
 		return sprintf(buf, "offline\n");
 }
 
-static ssize_t
-store_auto_online_blocks(struct device *dev, struct device_attribute *attr,
-			 const char *buf, size_t count)
+static ssize_t auto_online_blocks_store(struct device *dev,
+					struct device_attribute *attr,
+					const char *buf, size_t count)
 {
 	if (sysfs_streq(buf, "online"))
 		memhp_auto_online = true;
@@ -483,8 +480,7 @@ store_auto_online_blocks(struct device *dev, struct device_attribute *attr,
 	return count;
 }
 
-static DEVICE_ATTR(auto_online_blocks, 0644, show_auto_online_blocks,
-		   store_auto_online_blocks);
+static DEVICE_ATTR_RW(auto_online_blocks);
 
 /*
  * Some architectures will have custom drivers to do this, and
@@ -493,9 +489,8 @@ static DEVICE_ATTR(auto_online_blocks, 0644, show_auto_online_blocks,
  * and will require this interface.
  */
 #ifdef CONFIG_ARCH_MEMORY_PROBE
-static ssize_t
-memory_probe_store(struct device *dev, struct device_attribute *attr,
-		   const char *buf, size_t count)
+static ssize_t probe_store(struct device *dev, struct device_attribute *attr,
+			   const char *buf, size_t count)
 {
 	u64 phys_addr;
 	int nid, ret;
@@ -525,7 +520,7 @@ memory_probe_store(struct device *dev, struct device_attribute *attr,
 	return ret;
 }
 
-static DEVICE_ATTR(probe, S_IWUSR, NULL, memory_probe_store);
+static DEVICE_ATTR_WO(probe);
 #endif
 
 #ifdef CONFIG_MEMORY_FAILURE
@@ -534,10 +529,9 @@ static DEVICE_ATTR(probe, S_IWUSR, NULL, memory_probe_store);
  */
 
 /* Soft offline a page */
-static ssize_t
-store_soft_offline_page(struct device *dev,
-			struct device_attribute *attr,
-			const char *buf, size_t count)
+static ssize_t soft_offline_page_store(struct device *dev,
+				       struct device_attribute *attr,
+				       const char *buf, size_t count)
 {
 	int ret;
 	u64 pfn;
@@ -553,10 +547,9 @@ store_soft_offline_page(struct device *dev,
 }
 
 /* Forcibly offline a page, including killing processes. */
-static ssize_t
-store_hard_offline_page(struct device *dev,
-			struct device_attribute *attr,
-			const char *buf, size_t count)
+static ssize_t hard_offline_page_store(struct device *dev,
+				       struct device_attribute *attr,
+				       const char *buf, size_t count)
 {
 	int ret;
 	u64 pfn;
@@ -569,8 +562,8 @@ store_hard_offline_page(struct device *dev,
 	return ret ? ret : count;
 }
 
-static DEVICE_ATTR(soft_offline_page, S_IWUSR, NULL, store_soft_offline_page);
-static DEVICE_ATTR(hard_offline_page, S_IWUSR, NULL, store_hard_offline_page);
+static DEVICE_ATTR_WO(soft_offline_page);
+static DEVICE_ATTR_WO(hard_offline_page);
 #endif
 
 /*
-- 
2.17.2

