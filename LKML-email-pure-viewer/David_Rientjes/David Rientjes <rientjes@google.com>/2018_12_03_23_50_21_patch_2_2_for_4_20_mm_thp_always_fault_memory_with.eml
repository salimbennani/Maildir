Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 04 Dec 2018 08:59:32 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 3B2CA58014B;
	Mon,  3 Dec 2018 15:50:30 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 03 Dec 2018 15:50:29 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AzlVbLxa9EiL5DP2dLgJ8fy3/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpcq5YB7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyJPDIOi?=
 =?us-ascii?q?YYUSDeUPPuhYoIfyqFQSthu+HQuhCfjzyjNUnHL6wbE23v4/HQzAwQcuH8gOsH?=
 =?us-ascii?q?PRrNjtOqkdS/61zKjVwj7ec/1W2Cny6I7UchAjv/6MRq97fM3LyUkuCQzFiEmQ?=
 =?us-ascii?q?qY77MDOOzekNvG+b7+1vVeKrlWErsR1+oj+qxso1jITCm4wbylfB9SpjwYY1I8?=
 =?us-ascii?q?W1R1N+YdG+CpdfqziWO5JvTsw4W21ovTg1yrgBuZ6hfCkG0ogoywfGZ/CeaYeE?=
 =?us-ascii?q?+gjsVOKVITd/mH1pYq6wiw+r/US50OLxUNS/3lVSriddjNXAqnQA2wbO5sWJVP?=
 =?us-ascii?q?dx5Fqt1DWT2wzJ6+xJI1g4mbTaJpI/3rI9k4cfvETfESLzhUn7jqqbe0sh9+Wm?=
 =?us-ascii?q?8evqYrDrqoGSOoBuiAzzN6QjldKxDOgmNwUDUGiW9OC/2bDl4Eb3Wq9Fjucsna?=
 =?us-ascii?q?ncqJ3aJdoUpqq+AwJNzIYj5AiwDy283NQbg3YHNlRFdwyDj4TzPFHOOv/4Ae++?=
 =?us-ascii?q?g1Sqjjhr2+jLMqP9DpjJNHTPjbnscahn50JBywc/0cpT6pNWB70ZJfL8QE7xtN?=
 =?us-ascii?q?jWDh8jNAy0xv7qCNF81oMYRGKODbaVMKDMvl+S4OIgPe2MaJYSuDfzLfgq+eTu?=
 =?us-ascii?q?gGQnmV8SY6apx4EbaHOmEfR8JUWWf37sjs0GEWcQsQoyVPbqh0GaUT5Pe3ayWL?=
 =?us-ascii?q?ox5jU6CIKlE4jPXI+sgKGa0Se/H51WYH1GC1+WHXfpcYWER+kDaCaILsB9lTwE?=
 =?us-ascii?q?UKCrS5U92hG2qA/6171nI/LU+iICtJLjyMJ65+rJmREy6Dx7FcKd026WQmFwn2?=
 =?us-ascii?q?MIQSI23a9lrUx8zFeDzbZ3g/hCGdNP4PNJVx8wNYTAwOxiF9DyRgXBc8+LSFah?=
 =?us-ascii?q?XNqqGzIxTtU3w98IZEZwANGijhHF3yq3DL4Zjb2LBJoo8q3C23j9Pdpyy3HD1K?=
 =?us-ascii?q?M5lVkpXtNPNXG6hq547wXcHZXJk0Wel6apb6gcxjTC9GWYwGqKvUFYVhNwUKrf?=
 =?us-ascii?q?UXAeYEvWscr25kfYQ7CyDrQnNxNLydSeJatSdt3pkVJGSe/gONvEZWK9gWOwBR?=
 =?us-ascii?q?eSybOKY4rnYGEd3CTbCEgZnAEf53eGNQ4iBii/p2LSFiBhFVXqY0n06+lxtGu7?=
 =?us-ascii?q?TlMozwGNd0BuyqC6+gALivCGS/McxLQEuDw/pDVyG1q929HWC9+Epwd6eKVcYN?=
 =?us-ascii?q?U94EpI1G7Dtgx9OICgIL5mhlIEbwt3uEbu3Q1tCopcicgqsG8qzA1qJK2FylxB?=
 =?us-ascii?q?aS2X0YrwOrLNLGny5w6ga6jN11Ha0daW/LoP6fsip1XiugGpClQt83F939ZJ1H?=
 =?us-ascii?q?uc443ADBAOXpLpTkY36x96qqnGYik84oPU0mFsMam0szPYx9IlHuwlygykf9de?=
 =?us-ascii?q?NqOEGxT/E8kbB8ioNewrlEKlbhMCPOBO6qE0O9mqeOeB2K6uJOxghi6pjXxb4I?=
 =?us-ascii?q?Bh1UKB7zBzSurW0JcK3f6Z3hGLWCzhjFi8qM/3n4NEZTYMHmekzSjkBYhRZrB9?=
 =?us-ascii?q?fIoRCGeuJdG3yct6h5L3R3FY81ujDUsc2MC1YRqSc0D93QpI2EUXvHyrgze3wy?=
 =?us-ascii?q?Z1kjEptKWf2iPOzv/mdBoGPG5LWWZjgU3tIYiyk9AVQkyoYxI1mxui4Ebw37Jb?=
 =?us-ascii?q?q7hnL2nPXUdIeDD7L3tjUqSsrLWCedNA6JQyvSVRTuu8e1GaRqfhrBQA1yPsAn?=
 =?us-ascii?q?VRxCo8dzGsoZj5mx16iGSALHd8tnbZeMdwxQvB69zYX/Jewj0GRCxggznNGle8?=
 =?us-ascii?q?J8Wp/cmTl5rbsuG+VnitV51JfSnw0IOAsjC25WlrAR25gvCylcfrEQk80S/nyd?=
 =?us-ascii?q?ZqUT/Eowr7Yonuz666K/5oflF0BF/g7Mp3AoN+nZEqhJET2ngagY+Z/WEdnmfw?=
 =?us-ascii?q?MtVb2KT+Y2QLRTMQx97V4Q7l2FBsL36TxoL5UGmdzdVlZ9WgfmwW3Sc95dhQCK?=
 =?us-ascii?q?iI9LxEgTd1ol2goAPRe/d9mS0Ryfkv6H4cmOwJvAstziOAArEdB0VYPCrslwiW?=
 =?us-ascii?q?4NC6tqlYeGGvcb2o3kpkgd+hFK2Coh1bWHvheZctBy5w4t9/MFLRynLz7I7kdc?=
 =?us-ascii?q?LUbdISsB2UjhjBg/JUKJI3ivoFmy5nNXjhsn0izu4xlQZu0o2ivIibN2Vt+7q0?=
 =?us-ascii?q?AhtZNj32fcwf4D/sgrhFnsaKwY+vBI5uFSsRXJvnVv+oFDMStfL6NweBCjE8q3?=
 =?us-ascii?q?GbGabBEg+b8ktps3XPE5WzPXGNOHYZ1cliRAWaJEFHnAAUWzA6koQ4Fw+wwszh?=
 =?us-ascii?q?bVx55isQ5lPjrhtMy+RoNwTwU2vFpQeobCs0R4abLBZM8g5C4ELVO9SE7u1vBy?=
 =?us-ascii?q?FY4oGhrAuVJ2OAfQtICmUJWlGeC1DnI7mj/t3A8+meBuqjIPrCe7SOqepCV/iW?=
 =?us-ascii?q?wZKjyJdp/zGJNs+XJHltE+U72lZfXXB+A8nZmS8ASykJmCLWdcKbuA2w+i5qrs?=
 =?us-ascii?q?C87fTrXhjg5ZCUBrtWMNVv/Q22gKiZO+6RgiZ5NShX1pcWyXDUz7gf2UYYizty?=
 =?us-ascii?q?eDm1DbQAqSnNQbrQm69QEh4bcj5zO9FO764mxQlNPsjbitzu2758j/41DUpFVF?=
 =?us-ascii?q?P7lsGoY8wKP3+yNFfdCEmXM7SGICXBw9vrbqOkVb1QkOJUugWwuTmFEk/jPTeD?=
 =?us-ascii?q?lzjzWxCsK+FMiy6bMwJEuIGgaRZgEmzjTNPgah2mP957lzw2wbsohnzUMW4QKy?=
 =?us-ascii?q?Rzc0RIrreI9yNXnu1/G3Bd7npiNeSLgTuZ4PLCKpkIsfpnGCB0l+NB7XQ+yrtV?=
 =?us-ascii?q?6jxERfNvlCvTqN5uv0+pku2VxjV7VxpOry5BhJiXskV6JaXZ6p5AVG7Y/BIM6G?=
 =?us-ascii?q?WcEQgFq8F5Bd3vpa9QzMPClKbyKDdE7tLV8tEQB8nSKMKbLnUhNQDlFyLTDAsA?=
 =?us-ascii?q?VTSrL33Qh1RBkPGO8X2Ytpg7pYLqmJoLS79bUkQ6F/IaCkt/GtwCL4x6Xjclkb?=
 =?us-ascii?q?6dkc4J6mCyrBjXRMVGoJ/HUuieDunoKDac3vF4YE4swLXlNswvMZfl0khucREu?=
 =?us-ascii?q?gIPQBUPUUctlpixncx9xrkJQ9nR3Umw03QTicAz7pDc6E/Kukxd+oxF1aOIi+T?=
 =?us-ascii?q?PtqwM+L0DBrS0/nWErlNnliCzXezn0evSeR4ZTXgb9qUk9eqn6TgBpbwCp1Rh+?=
 =?us-ascii?q?NTrCW7BclJNvcmdkjAKaspxKT60PBZZYaQMdkKnEL84j1k5R/2D+nRdK?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AIAQCvwAVch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBZYExJQWCESeYIIFoOZhYA0wSAQEYEwGICSI4EgEDAQEBAQEBAgETAQEBCgs?=
 =?us-ascii?q?JCCkjDII2JAGCYgMDAQIkEwYBATcBBQkBAVADMQEFARwGARIFgxyCAgEEmjk8i?=
 =?us-ascii?q?h2BbDOCdgEBBYcpCBKKboEcF4F/gUSFfQKHPJAskBYJhTWEfYcKGIlbh0ssiFi?=
 =?us-ascii?q?PQgYCCQcPIYE8VYEhTSMVgyeCG4EiAQmCQYp0HzKBBQEBIYpgAQE?=
X-IPAS-Result: =?us-ascii?q?A0AIAQCvwAVch0O0hNFjHAEBAQQBAQcEAQGBZYExJQWCESe?=
 =?us-ascii?q?YIIFoOZhYA0wSAQEYEwGICSI4EgEDAQEBAQEBAgETAQEBCgsJCCkjDII2JAGCY?=
 =?us-ascii?q?gMDAQIkEwYBATcBBQkBAVADMQEFARwGARIFgxyCAgEEmjk8ih2BbDOCdgEBBYc?=
 =?us-ascii?q?pCBKKboEcF4F/gUSFfQKHPJAskBYJhTWEfYcKGIlbh0ssiFiPQgYCCQcPIYE8V?=
 =?us-ascii?q?YEhTSMVgyeCG4EiAQmCQYp0HzKBBQEBIYpgAQE?=
X-IronPort-AV: E=Sophos;i="5.56,312,1539673200"; 
   d="scan'208";a="54756744"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 03 Dec 2018 15:50:27 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726073AbeLCXuZ (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 3 Dec 2018 18:50:25 -0500
Received: from mail-pl1-f195.google.com ([209.85.214.195]:44076 "EHLO
        mail-pl1-f195.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725981AbeLCXuY (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 3 Dec 2018 18:50:24 -0500
Received: by mail-pl1-f195.google.com with SMTP id k8so7271149pls.11
        for <linux-kernel@vger.kernel.org>; Mon, 03 Dec 2018 15:50:23 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=date:from:to:cc:subject:in-reply-to:message-id:references
         :user-agent:mime-version;
        bh=T5rIjhLQ4stys0+TCyJHyOn0Ld01LDgoTWpjXbRKG0I=;
        b=kmS0Lz+FUCFImUjiMzzAMvPH9SDaCcijUEb3OtIX0B0AHfRNJEJB5Z0lEMrUNDVsta
         SV1aHT1uvyV1o8FPNZr1PU/VZXiUQccnYK0s0zfQZs4Kbv41+wYPGdmmyAS4FWIy1+pD
         hg2nKRqz4OKszVVvFR92g1Z/vDgICbVWOTL0pkmPrykvWkwlp9E+yrui7QzZE54uJsgP
         rSBNPBRmeVKqiTdG9QU+kxdnGpcaTnwM2bAbfCBXc7r28R69kHIl0IeqCXarLiYD2fFc
         OL2T3cv8X822lAbwJp6ACRN8wR489gsvnl+2pwZSEIULHNcXFjqLksPrW1D6OqRqPbde
         ttGg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:in-reply-to:message-id
         :references:user-agent:mime-version;
        bh=T5rIjhLQ4stys0+TCyJHyOn0Ld01LDgoTWpjXbRKG0I=;
        b=Y0eEsUnmc5ilkbb0H+kV78E9xOoY1UjEBhOs1kWrzQp2T+QMD2V7b/oauy6MkT40jm
         pPD5/cikEAfRgt9NCFHNPIS51Z/rh/FU2Ahsw9tr4P8SAz9ztTkzGyx8ONJMLZOUTLb8
         6N7ZigZedfrZloIwtuEmTg03VVKhN+M/BxmvKoK7WtAyf6Jvvprd2oly6gAcaTM+eaxx
         e2v7S26CO2h90HujnNOrFOhPxn5Wj8QjGuyGmbDVEjzhYBZ/3PMEn2qsbLk+F5LC4PwZ
         7LFpspXgdRz7D27Yf0kxU7VQjRCz7mpCOD/7vSfEgjJ6jqLoNBD0vguZRx0CNFG2uMSF
         LOHw==
X-Gm-Message-State: AA+aEWa7vwuxlXkdQOCGJMjmeUHh12VvfG9wvCDwNdrIE6LcMa2u2OwV
        avKdAvcINSUepNrc2PXM9CEEDw==
X-Google-Smtp-Source: AFSGD/WFxerY9ewj+pJg7Q4RYnTJUw0WzmmjdzF5VO05aXccRNp7gGduY95rZHuOGPomDcdlgC0pVQ==
X-Received: by 2002:a17:902:15a8:: with SMTP id m37mr3080673pla.129.1543881023156;
        Mon, 03 Dec 2018 15:50:23 -0800 (PST)
Received: from [2620:15c:17:3:3a5:23a7:5e32:4598] ([2620:15c:17:3:3a5:23a7:5e32:4598])
        by smtp.gmail.com with ESMTPSA id w11sm15585480pgk.16.2018.12.03.15.50.22
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Mon, 03 Dec 2018 15:50:22 -0800 (PST)
Date: Mon, 3 Dec 2018 15:50:21 -0800 (PST)
From: David Rientjes <rientjes@google.com>
X-X-Sender: rientjes@chino.kir.corp.google.com
To: Linus Torvalds <torvalds@linux-foundation.org>,
        Andrea Arcangeli <aarcange@redhat.com>
cc: ying.huang@intel.com, Michal Hocko <mhocko@suse.com>,
        s.priebe@profihost.ag, mgorman@techsingularity.net,
        Linux List Kernel Mailing <linux-kernel@vger.kernel.org>,
        alex.williamson@redhat.com, lkp@01.org, kirill@shutemov.name,
        Andrew Morton <akpm@linux-foundation.org>,
        zi.yan@cs.rutgers.edu, Vlastimil Babka <vbabka@suse.cz>
Subject: [patch 2/2 for-4.20] mm, thp: always fault memory with
 __GFP_NORETRY
In-Reply-To: <alpine.DEB.2.21.1812031545080.161134@chino.kir.corp.google.com>
Message-ID: <alpine.DEB.2.21.1812031546230.161134@chino.kir.corp.google.com>
References: <alpine.DEB.2.21.1812031545080.161134@chino.kir.corp.google.com>
User-Agent: Alpine 2.21 (DEB 202 2017-01-01)
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

If memory compaction initially fails to free a hugepage, reclaiming and
retrying compaction is more likely to be harmful rather than beneficial.

For reclaim, it is unlikely that the pages reclaimed will form contiguous
memory the size of a hugepage without unnecessarily reclaiming a lot of
memory unnecessarily.  It is also not guaranteed to be beneficial to
compaction if the reclaimed memory is not accessible to the per-zone
freeing scanner.  For both of these reasons independently, all reclaim
activity may be entirely fruitless.

With these two issues, retrying compaction again is not likely to have a
different result.  It is better to fallback to pages of the native page
size and allow khugepaged to collapse the memory into a hugepage later
when the fragmentation or availability of local memory is better.

If __GFP_NORETRY is set, which the page allocator implementation is
expecting in its comments, this can prevent large amounts of unnecesary
reclaim and swapping activity that can cause performance of other
applications to quickly degrade.

Furthermore, since reclaim is likely to be more harmful than beneficial
for such large order allocations, it is better to fail earlier rather
than trying reclaim of SWAP_CLUSTER_MAX pages which is unlikely to make
a difference for memory compaction to become successful.

Signed-off-by: David Rientjes <rientjes@google.com>
---
 drivers/gpu/drm/ttm/ttm_page_alloc.c     |  8 ++++----
 drivers/gpu/drm/ttm/ttm_page_alloc_dma.c |  3 +--
 include/linux/gfp.h                      |  3 ++-
 mm/huge_memory.c                         |  3 +--
 mm/page_alloc.c                          | 16 ++++++++++++++++
 5 files changed, 24 insertions(+), 9 deletions(-)

diff --git a/drivers/gpu/drm/ttm/ttm_page_alloc.c b/drivers/gpu/drm/ttm/ttm_page_alloc.c
--- a/drivers/gpu/drm/ttm/ttm_page_alloc.c
+++ b/drivers/gpu/drm/ttm/ttm_page_alloc.c
@@ -860,8 +860,8 @@ static int ttm_get_pages(struct page **pages, unsigned npages, int flags,
 			while (npages >= HPAGE_PMD_NR) {
 				gfp_t huge_flags = gfp_flags;
 
-				huge_flags |= GFP_TRANSHUGE_LIGHT | __GFP_NORETRY |
-					__GFP_KSWAPD_RECLAIM;
+				huge_flags |= GFP_TRANSHUGE_LIGHT |
+					      __GFP_KSWAPD_RECLAIM;
 				huge_flags &= ~__GFP_MOVABLE;
 				huge_flags &= ~__GFP_COMP;
 				p = alloc_pages(huge_flags, HPAGE_PMD_ORDER);
@@ -978,13 +978,13 @@ int ttm_page_alloc_init(struct ttm_mem_global *glob, unsigned max_pages)
 				  GFP_USER | GFP_DMA32, "uc dma", 0);
 
 	ttm_page_pool_init_locked(&_manager->wc_pool_huge,
-				  (GFP_TRANSHUGE_LIGHT | __GFP_NORETRY |
+				  (GFP_TRANSHUGE_LIGHT |
 				   __GFP_KSWAPD_RECLAIM) &
 				  ~(__GFP_MOVABLE | __GFP_COMP),
 				  "wc huge", order);
 
 	ttm_page_pool_init_locked(&_manager->uc_pool_huge,
-				  (GFP_TRANSHUGE_LIGHT | __GFP_NORETRY |
+				  (GFP_TRANSHUGE_LIGHT |
 				   __GFP_KSWAPD_RECLAIM) &
 				  ~(__GFP_MOVABLE | __GFP_COMP)
 				  , "uc huge", order);
diff --git a/drivers/gpu/drm/ttm/ttm_page_alloc_dma.c b/drivers/gpu/drm/ttm/ttm_page_alloc_dma.c
--- a/drivers/gpu/drm/ttm/ttm_page_alloc_dma.c
+++ b/drivers/gpu/drm/ttm/ttm_page_alloc_dma.c
@@ -863,8 +863,7 @@ static gfp_t ttm_dma_pool_gfp_flags(struct ttm_dma_tt *ttm_dma, bool huge)
 		gfp_flags |= __GFP_ZERO;
 
 	if (huge) {
-		gfp_flags |= GFP_TRANSHUGE_LIGHT | __GFP_NORETRY |
-			__GFP_KSWAPD_RECLAIM;
+		gfp_flags |= GFP_TRANSHUGE_LIGHT | __GFP_KSWAPD_RECLAIM;
 		gfp_flags &= ~__GFP_MOVABLE;
 		gfp_flags &= ~__GFP_COMP;
 	}
diff --git a/include/linux/gfp.h b/include/linux/gfp.h
--- a/include/linux/gfp.h
+++ b/include/linux/gfp.h
@@ -298,7 +298,8 @@ struct vm_area_struct;
 #define GFP_HIGHUSER	(GFP_USER | __GFP_HIGHMEM)
 #define GFP_HIGHUSER_MOVABLE	(GFP_HIGHUSER | __GFP_MOVABLE)
 #define GFP_TRANSHUGE_LIGHT	((GFP_HIGHUSER_MOVABLE | __GFP_COMP | \
-			 __GFP_NOMEMALLOC | __GFP_NOWARN) & ~__GFP_RECLAIM)
+			 __GFP_NOMEMALLOC | __GFP_NORETRY | __GFP_NOWARN) & \
+			 ~__GFP_RECLAIM)
 #define GFP_TRANSHUGE	(GFP_TRANSHUGE_LIGHT | __GFP_DIRECT_RECLAIM)
 
 /* Convert GFP flags to their corresponding migrate type */
diff --git a/mm/huge_memory.c b/mm/huge_memory.c
--- a/mm/huge_memory.c
+++ b/mm/huge_memory.c
@@ -636,8 +636,7 @@ static inline gfp_t alloc_hugepage_direct_gfpmask(struct vm_area_struct *vma, un
 
 	/* Always do synchronous compaction */
 	if (test_bit(TRANSPARENT_HUGEPAGE_DEFRAG_DIRECT_FLAG, &transparent_hugepage_flags))
-		return GFP_TRANSHUGE | __GFP_THISNODE |
-		       (vma_madvised ? 0 : __GFP_NORETRY);
+		return GFP_TRANSHUGE | __GFP_THISNODE;
 
 	/* Kick kcompactd and fail quickly */
 	if (test_bit(TRANSPARENT_HUGEPAGE_DEFRAG_KSWAPD_FLAG, &transparent_hugepage_flags))
diff --git a/mm/page_alloc.c b/mm/page_alloc.c
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@ -4139,6 +4139,22 @@ __alloc_pages_slowpath(gfp_t gfp_mask, unsigned int order,
 			if (compact_result == COMPACT_DEFERRED)
 				goto nopage;
 
+#ifdef CONFIG_TRANSPARENT_HUGEPAGE
+			/*
+			 * When faulting a hugepage, it is very unlikely that
+			 * thrashing the zonelist is going to help compaction in
+			 * freeing such a high-order page.  Reclaim would need
+			 * to free contiguous memory itself or guarantee the
+			 * reclaimed memory is accessible by the compaction
+			 * freeing scanner.  Since there is no such guarantee,
+			 * thrashing is more harmful than beneficial.  It is
+			 * better to simply fail and fallback to native pages.
+			 */
+			if (order == HPAGE_PMD_ORDER &&
+					!(current->flags & PF_KTHREAD))
+				goto nopage;
+#endif
+
 			/*
 			 * Looks like reclaim/compaction is worth trying, but
 			 * sync compaction could be very expensive, so keep
