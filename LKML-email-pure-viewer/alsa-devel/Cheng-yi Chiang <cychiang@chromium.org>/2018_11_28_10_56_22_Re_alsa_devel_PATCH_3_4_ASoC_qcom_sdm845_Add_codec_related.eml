Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 28 Nov 2018 21:42:02 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 9EDB85803C2;
	Wed, 28 Nov 2018 02:56:56 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 28 Nov 2018 02:56:56 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AUQNVaRebD/hMyGoXIrPsa0cJlGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc6+bBSN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRODYOy?=
 =?us-ascii?q?bYQBD+QPM+VFoYfju1QOtgO+CAu3CePz1jNFnGP60bEm3+kjFwzNwQwuH8gJsH?=
 =?us-ascii?q?TRtNj4KqcSXv6zzKnH1DnCb/JW0irj5YjIcxAuu/eMXb1tesfW1UYuFx/KjlWR?=
 =?us-ascii?q?qYP/OTOV2f8AvHSb7+p6UuKvjm8nqxx0ojS1wccskIbJi5sTx1vZ9it52J44Kc?=
 =?us-ascii?q?OkREN/e9KoDZVduz+AO4drQc4uX3tktSc4x7Eep5K3YCwHxI4kyhPfcfCLbZaE?=
 =?us-ascii?q?7gz5WOuQIzp1gm9udqiliBao60egz/XxVsmq31ZOqSpIisfMtn8T2BzJ8MSHSe?=
 =?us-ascii?q?Vy/l2n2TmR0wDf8OZEIVo7labDKp4hxKA/loYLvEjdAiP7nF/6gLKYe0k64OSk?=
 =?us-ascii?q?9ufqbqn8qpKdNYJ4kgT+Pb4vmsy7D+Q4KA8OX22D9OS41b3j+1D5QbpTgv01jK?=
 =?us-ascii?q?bZqpbaKtofpqKgBA9U3IAj5AilDzq9ztQYkmcILEhfdBKEkYfpIVfOL+78Dful?=
 =?us-ascii?q?hFSsijhry+jcPrL9GpXNMmTDkLD5cLZ56k5cyxQ8wcpQ5pJJEbwBJPPzWknstN?=
 =?us-ascii?q?3XFBM5Mgq0w/r5B9V5zI8RRWWPAqqBOqPIrVCI/v4vI/WLZIINuDbyMfkl5+L0?=
 =?us-ascii?q?gn8+g1MdfbSp0oERaHC3BflmJ0SZYXzxgtYOC2sKvww+TPD0h12GSzJce3GyX6?=
 =?us-ascii?q?ck7DEhFI2mFZvDRpyqgLGZ3ie7GYNZanpFClCLF3focYKEVuwIaCKTJM9hjzMF?=
 =?us-ascii?q?WaKgS48nyRGhqgv6x6B7IerT/y0SrYjj28Rt5+3PiREy8iR5AN6G02GNSGF0nX?=
 =?us-ascii?q?kERyUs06B9ukF9zlaD0a5lg/1XD9BT5vVJUhskOp7Y1eB1F9fyWgfZdNeTVFmm?=
 =?us-ascii?q?WsmmAS02Tt8pwN8BeUB9F8+mjhDCxSWqBbAVmqePBJw19KLcwnfwK9x8y3bAyK?=
 =?us-ascii?q?kukV0mTtFTOm2hg6517xLTCJLRk0WFi6aqcrwR0zPX+2ed02WCpkFYXxR2UaXe?=
 =?us-ascii?q?Q38fYEzardD65kPHS7+jErAnMgpHyc6fJapGcNzpjVNaRPj9PNTSeX6+m2C1BR?=
 =?us-ascii?q?yQ3LODcJLqe3kB3CXaEEULjhoc/WiYOgQkBieuuWTeDCdwGlLpeE7s9eh+qHWm?=
 =?us-ascii?q?Tk471Q2Kbkth16ar9R4Rn/CTV/QT3rccsic7tzp0BEq9387RC9eYuwphfaBcYd?=
 =?us-ascii?q?Qh4FdH1WPVrRB9MoanL6B4gl4ecgJ3v0z12hVzC4VAl9UqrXwwwApzL6KYzE1O?=
 =?us-ascii?q?dzeC0Z/sPb3XL3H4/AqzZK7OxlHezNGW978V5/Q8tVrisx+mF0o4/3p8ztlazm?=
 =?us-ascii?q?GT5pPJDAoVT5L8SUI39xl8p7HHbSgx/YLU1XtwMaaqtj/Owc4mBOwgyhy4ZddQ?=
 =?us-ascii?q?LLuEFBPuE80dH8WvKPEql0K1YR4ePeFS9LQ7P8Wpd/ad3K6rPeBgnC+pjGhd4Y?=
 =?us-ascii?q?B91F6M+DR4SuLSw5kFxPSY1BOdVzjglFehrtz3mYdcaDEIH2qw1TLrBJRMaa11?=
 =?us-ascii?q?Z4oLD3mhI9e2xtlnm5HiQXpY+0O9CFMc38+pfwGfb1j83Q1WyEQWrmarmSq+zz?=
 =?us-ascii?q?xojT4pqrCT0zDJw+TnbBAHIHJERHF+jVfwJoi5l9AbXEmyYwkpjhel/lv6x65A?=
 =?us-ascii?q?qaR7LmnTR1pIfifsI2FjVKuwqqSNY8pV5Jw0tiVXVfy2YUqGRb7lvxsazyTjEn?=
 =?us-ascii?q?NcxD8hbTGquZb5nxtghGKGNnlzr3nZecB2xRjB4tzRXvpR3jsARCllhjjbHFm8?=
 =?us-ascii?q?P9+1/dqKk5fPqPyxV2WkVpdLaynk0ZuAtDen5W1tGRC+n+q8mtr9HQg40C/70c?=
 =?us-ascii?q?JnVSHJrBb6f4nq2L62MeNhfkl0GlD879B2FZ15kos1nJsQw2QVho2J/Xoblmf+?=
 =?us-ascii?q?KdZb1rj/bHYXRT4L3sTa4A7q2EB4KnKJxoT5VmiSw8d7Ztm6ZH8W1Tw578xQFK?=
 =?us-ascii?q?iU67lElzNvolWktQLRfeR9njAFxPsr6X4agPsGtBAjzyqDGbASAVdXPTb3mBuW?=
 =?us-ascii?q?9dC+o75aZGKucbi2yUp/ksqtDLCEogFARnn5fo0uEjN37sV6KFjMymH86pn4eN?=
 =?us-ascii?q?nMatIergGUkxDFj+RPKZM+jPwKhTd8OWLmvH0o0Oo7jR1o3ZGns4mLMWRt/KSl?=
 =?us-ascii?q?AhFGMj35fd8c+jbojaxGhMaZw5ivHol9GjUMRJbnVuinEDUWtfT6LQqOFCA8p2?=
 =?us-ascii?q?yfGbreGw+f9Uhno2jOE5CtK3GYOn0Zwc9+SxmaIUxVmBoUUykinp4lCgCqw9Ts?=
 =?us-ascii?q?cEVj6TAU+FH4sQFAyv5yOxn8T2ffpxqoajEuR5iENxdW6gBC50HIMc2R9O5zHi?=
 =?us-ascii?q?dY/oG/owyJMGCUewNIDWQRUEyeG1/jJqWu5cXH8+WABuu+KObOYayTqeNEUfeE?=
 =?us-ascii?q?34mv0oxg/zaDLciPOnhiD/sm2ktMR3x5GsLZmykRRCwTjS7Cc8mbpBKk8C1tss?=
 =?us-ascii?q?+/6OjrWB7o5YaXC7tdL9Rv+xO1gaeCLeKQhzx5KTFX1pwS33/I1aMf0UUWiyFv?=
 =?us-ascii?q?cTmtDLsBuTTMTKLWhq9YERobZzlvO8tP6qI2xhNNNtLDitPpyr54ieY4BE1YVV?=
 =?us-ascii?q?P6gMGme8wLL3u5NFPGH0uLMLWGJTvWw8D4e6+8SLtQjPlKuB20ozqUD0jjPjGb?=
 =?us-ascii?q?nTnzSx+vKf1MjD2cPBFGpIG9cxNtBXL/Q978dhK7MMF4jTstzL0wh3PKM3McMD?=
 =?us-ascii?q?dmf0NMqL2Q8T1XgvFlF2Nd6XplKPGOmzyF4OnANpYWrfxrDzx0lu1A5nQ6zrpV?=
 =?us-ascii?q?7CdcS/10mCvdtNhuo169n+mLyzpnVgdOqzlRiIKKu0ViJbvW9p1aVXnY+xIN6D?=
 =?us-ascii?q?bYNxNfnMFkDNynmKlWxtHAnb73IX8W6MjV+8oCDtOSK8uBPHMuOAbtERbQDQ0M?=
 =?us-ascii?q?VzntMnvQ0R9zivaXo1aVo54174nt0LEOS7ZdWxRhHeIRCkVsGtMqK5dtWTYljL?=
 =?us-ascii?q?vdi9QHsynt5CLNTdlX68iUHsmZBu/ifXPA1eFJ?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AXAADJc/5bh0O0hNFkHgEGBwaBUQkLA?=
 =?us-ascii?q?YFaghEng3mUIYINFJcugXMsEwGHaSI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwy?=
 =?us-ascii?q?CNiQBgmEBAQEBAgEBAiAEGQEBNwEEAQkBAQoLDQICJgICAx8SAQUBHAYTBYJRS?=
 =?us-ascii?q?4F6CAWaVTyKHXB8M4J2AQEFh0QIEnmLCheBf4ERgxKESoM7gleQHJABCZExGJE?=
 =?us-ascii?q?VmDkwgSWCDU0wCGwGgjWCGzWITIVMMjOBBQEBiiyCTQEB?=
X-IPAS-Result: =?us-ascii?q?A0AXAADJc/5bh0O0hNFkHgEGBwaBUQkLAYFaghEng3mUIYI?=
 =?us-ascii?q?NFJcugXMsEwGHaSI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmEBAQEBA?=
 =?us-ascii?q?gEBAiAEGQEBNwEEAQkBAQoLDQICJgICAx8SAQUBHAYTBYJRS4F6CAWaVTyKHXB?=
 =?us-ascii?q?8M4J2AQEFh0QIEnmLCheBf4ERgxKESoM7gleQHJABCZExGJEVmDkwgSWCDU0wC?=
 =?us-ascii?q?GwGgjWCGzWITIVMMjOBBQEBiiyCTQEB?=
X-IronPort-AV: E=Sophos;i="5.56,290,1539673200"; 
   d="scan'208";a="52960401"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 28 Nov 2018 02:56:54 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728345AbeK1V6F (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 28 Nov 2018 16:58:05 -0500
Received: from mail-ua1-f67.google.com ([209.85.222.67]:35225 "EHLO
        mail-ua1-f67.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727431AbeK1V6F (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 28 Nov 2018 16:58:05 -0500
Received: by mail-ua1-f67.google.com with SMTP id d2so8744221ual.2
        for <linux-kernel@vger.kernel.org>; Wed, 28 Nov 2018 02:56:49 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=chromium.org; s=google;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=oGhghgtxjguW2pJnyy1BN0lxlDT6vR8savGXlVJYFn4=;
        b=B3Wb+jJU8jyTcYZGZApEuKNv7i1631UPelhMn0muiP9hL298DGSP5aZaBAsqYl10H+
         txa85E1JDApLnTVcz17H4qjVL11bzVWJYqSdekZO3XwhR999Xvo1zF0CJaGuh/l514LF
         a1hfA9uhET7VDGsfcedkxkxhbLM0+v71o/zq4=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=oGhghgtxjguW2pJnyy1BN0lxlDT6vR8savGXlVJYFn4=;
        b=Af4pLzpU/lyv+pMJ6aV+R5V8LwM8JVPGV5ouSqz7l01JJswDvLWTfFhm1EKFIahXGs
         TPvkjjKbc6ZQSMRwXuQxoZ6R/EVO2PrVOvq6xNvtDgPYFc6GEkI3aKrPuQELR2aaJBhL
         3TIk7DS/t9noaPNwiumps0ZMMr2Fxuex1AzytBt0g9xFLuH7UaIKcF5jAaQAXQT+Rfsv
         3lRlzhKFMfgsc7ICo0eB42swcpVdCC+bzjuu0VF7z4oSDmSGpewt3gdf59PFlEHNqiy8
         pYJxkDdY9GihnFxdrz/YUs4XZd7I51GjmlwrXIpKhwLZo4RgLu+bfOhqSKKbOt91vtbK
         G/iQ==
X-Gm-Message-State: AA+aEWb5qjiEq+/TEhDB5dM3Y4KTf5f05kZ+fl9NkR5vsCzoloOd9Unl
        ET//Z5cNvphy7wiIVlhOj18dv8xO2RRRK6LV/EryaQ==
X-Google-Smtp-Source: AFSGD/UskW12e2R52WhfYHCCJfn3pDxe/kxoLpNdBdTICXa/ixrttWxrodH1ktTw4YGe8mTq0GVBmNal+a4iZ4oB204=
X-Received: by 2002:ab0:304b:: with SMTP id x11mr14338547ual.91.1543402609060;
 Wed, 28 Nov 2018 02:56:49 -0800 (PST)
MIME-Version: 1.0
References: <20181124110948.209019-1-cychiang@chromium.org>
 <20181124110948.209019-3-cychiang@chromium.org> <4f8debc0-40f3-6195-8acb-de9ae3335671@linaro.org>
In-Reply-To: <4f8debc0-40f3-6195-8acb-de9ae3335671@linaro.org>
From: Cheng-yi Chiang <cychiang@chromium.org>
Date: Wed, 28 Nov 2018 18:56:22 +0800
Message-ID: <CAFv8NwLQGkJttDeLhmg+LPBO222khnprVxaX2VQyi6JMHx=svw@mail.gmail.com>
Subject: Re: [alsa-devel] [PATCH 3/4] ASoC: qcom: sdm845: Add codec related
 configuration for sdm845
To: Srini Kandagatla <srinivas.kandagatla@linaro.org>
Cc: linux-kernel@vger.kernel.org, Oder Chiou <oder_chiou@realtek.com>,
        alsa-devel@alsa-project.org, tzungbi@chromium.org,
        Mark Brown <broonie@kernel.org>, rohitkr@codeaurora.org,
        Dylan Reid <dgreid@chromium.org>
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Tue, Nov 27, 2018 at 5:32 PM Srinivas Kandagatla
<srinivas.kandagatla@linaro.org> wrote:
>
> Thanks for the patch Jimmy,
>
Hi Srini,
Thanks for the review!
I have updated the patch series in v2.

> On 24/11/18 11:09, Cheng-Yi Chiang wrote:
> > Set TDM time slots and DAI format for speaker codec.
> > Set DAI format and clock for headset. >
> > Signed-off-by: Rohit kumar <rohitkr@codeaurora.org>
> > Signed-off-by: Cheng-Yi Chiang <cychiang@chromium.org>
>
> Overall the patch looks good for me, but this needs to be split into two
> patches + few more minor nits!
Separated for speaker and headset in v2.
> > ---
> >   sound/soc/qcom/sdm845.c | 82 ++++++++++++++++++++++++++++++++++++++++-
> >   1 file changed, 81 insertions(+), 1 deletion(-)
> >
> > diff --git a/sound/soc/qcom/sdm845.c b/sound/soc/qcom/sdm845.c
> > index 43c03f8e8cdc2..d815040e98dc9 100644
> > --- a/sound/soc/qcom/sdm845.c
> > +++ b/sound/soc/qcom/sdm845.c
> > @@ -6,12 +6,15 @@
> >   #include <linux/module.h>
> >   #include <linux/platform_device.h>
> >   #include <linux/of_device.h>
> > +#include <sound/core.h>
> >   #include <sound/pcm.h>
> >   #include <sound/pcm_params.h>
> >   #include <sound/jack.h>
> > +#include <sound/soc.h>
> >   #include <uapi/linux/input-event-codes.h>
> >   #include "common.h"
> >   #include "qdsp6/q6afe.h"
> > +#include "../codecs/rt5663.h"
> >
> >   #define DEFAULT_SAMPLE_RATE_48K             48000
> >   #define DEFAULT_MCLK_RATE           24576000
> > @@ -34,7 +37,7 @@ static int sdm845_tdm_snd_hw_params(struct snd_pcm_substream *substream,
> >   {
> >       struct snd_soc_pcm_runtime *rtd = substream->private_data;
> >       struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
> > -     int ret = 0;
> > +     int ret = 0, j;
> >       int channels, slot_width;
> >
> >       switch (params_format(params)) {
> > @@ -81,6 +84,31 @@ static int sdm845_tdm_snd_hw_params(struct snd_pcm_substream *substream,
> >                       goto end;
> >               }
> >       }
> > +
> > +     for (j = 0; j < rtd->num_codecs; j++) {
> > +             struct snd_soc_dai *codec_dai = rtd->codec_dais[j];
> > +
> > +             if (!strcmp(codec_dai->component->name_prefix, "Left")) {
> > +                     ret = snd_soc_dai_set_tdm_slot(
> > +                                     codec_dai, 0x30, 0x3, 8, slot_width);
>
> These constants needs some kind of defines to make the code more readable!
Fixed in v2.
>
> > +                     if (ret < 0) {
> > +                             dev_err(rtd->dev,
> > +                                     "DEV0 TDM slot err:%d\n", ret);
> > +                             return ret;
> > +                     }
> > +             }
> > +
> > +             if (!strcmp(codec_dai->component->name_prefix, "Right")) {
> > +                     ret = snd_soc_dai_set_tdm_slot(
> > +                                     codec_dai, 0xC0, 0x3, 8, slot_width);
> > +                     if (ret < 0) {
> > +                             dev_err(rtd->dev,
> > +                                     "DEV1 TDM slot err:%d\n", ret);
> > +                             return ret;
> > +                     }
> > +             }
> > +     }
> > +
> >   end:
> >       return ret;
> >   }
> > @@ -90,9 +118,26 @@ static int sdm845_snd_hw_params(struct snd_pcm_substream *substream,
> >   {
> >       struct snd_soc_pcm_runtime *rtd = substream->private_data;
> >       struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
> > +     struct snd_soc_dai *codec_dai = rtd->codec_dai;
> >       int ret = 0;
> >
> >       switch (cpu_dai->id) {
> > +     case PRIMARY_MI2S_RX:
> > +     case PRIMARY_MI2S_TX:
> > +             /*
> > +              * Use ASRC for internal clocks, as PLL rate isn't multiple
> > +              * of BCLK.
> > +              */
> > +             rt5663_sel_asrc_clk_src(
> > +                     codec_dai->component,
> > +                     RT5663_DA_STEREO_FILTER | RT5663_AD_STEREO_FILTER,
> > +                     RT5663_CLK_SEL_I2S1_ASRC);
> > +             ret = snd_soc_dai_set_sysclk(codec_dai,
> > +                             RT5663_SCLK_S_MCLK, 24576000, SND_SOC_CLOCK_IN);
>
> Use DEFAULT_MCLK_RATE here.
Fixed in v2.
>
>
> > +             if (ret < 0)
> > +                     dev_err(rtd->dev,
> > +                             "snd_soc_dai_set_sysclk err = %d\n", ret);
> > +             break;
> >       case QUATERNARY_TDM_RX_0:
> >       case QUATERNARY_TDM_TX_0:
> >               ret = sdm845_tdm_snd_hw_params(substream, params);
> > @@ -155,14 +200,20 @@ static int sdm845_dai_init(struct snd_soc_pcm_runtime *rtd)
> >   static int sdm845_snd_startup(struct snd_pcm_substream *substream)
> >   {
> >       unsigned int fmt = SND_SOC_DAIFMT_CBS_CFS;
> > +     unsigned int codec_dai_fmt = SND_SOC_DAIFMT_CBS_CFS;
> >       struct snd_soc_pcm_runtime *rtd = substream->private_data;
> >       struct snd_soc_card *card = rtd->card;
> >       struct sdm845_snd_data *data = snd_soc_card_get_drvdata(card);
> >       struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
> > +     struct snd_soc_dai *codec_dai = rtd->codec_dai;
> > +
> Unnecessary New line here.
Fixed in v2.
>
> > +     int j;
> > +     int ret;
> >
> >       switch (cpu_dai->id) {
> >       case PRIMARY_MI2S_RX:
> >       case PRIMARY_MI2S_TX:
> > +             codec_dai_fmt |= SND_SOC_DAIFMT_NB_NF;
> >               if (++(data->pri_mi2s_clk_count) == 1) {
> >                       snd_soc_dai_set_sysclk(cpu_dai,
> >                               Q6AFE_LPASS_CLK_ID_MCLK_1,
> > @@ -172,6 +223,7 @@ static int sdm845_snd_startup(struct snd_pcm_substream *substream)
> >                               MI2S_BCLK_RATE, SNDRV_PCM_STREAM_PLAYBACK);
> >               }
> >               snd_soc_dai_set_fmt(cpu_dai, fmt);
> > +             snd_soc_dai_set_fmt(codec_dai, codec_dai_fmt);
> >               break;
> >
> >       case SECONDARY_MI2S_TX:
> > @@ -190,6 +242,34 @@ static int sdm845_snd_startup(struct snd_pcm_substream *substream)
> >                               Q6AFE_LPASS_CLK_ID_QUAD_TDM_IBIT,
> >                               TDM_BCLK_RATE, SNDRV_PCM_STREAM_PLAYBACK);
> >               }
> > +
> > +             codec_dai_fmt |= SND_SOC_DAIFMT_IB_NF | SND_SOC_DAIFMT_DSP_B;
> > +
> > +             for (j = 0; j < rtd->num_codecs; j++) {
> > +                     codec_dai = rtd->codec_dais[j];
> > +
> > +                     if (!strcmp(codec_dai->component->name_prefix,
> > +                                 "Left")) {
> > +                             ret = snd_soc_dai_set_fmt(
> > +                                             codec_dai, codec_dai_fmt);
> > +                             if (ret < 0) {
> > +                                     dev_err(rtd->dev,
> > +                                             "Left TDM fmt err:%d\n", ret);
> > +                                     return ret;
> > +                             }
> > +                     }
> > +
> > +                     if (!strcmp(codec_dai->component->name_prefix,
> > +                                 "Right")) {
> > +                             ret = snd_soc_dai_set_fmt(
> > +                                             codec_dai, codec_dai_fmt);
> > +                             if (ret < 0) {
> > +                                     dev_err(rtd->dev,
> > +                                             "Right TDM slot err:%d\n", ret);
> > +                                     return ret;
> > +                             }
> > +                     }
> > +             }
> >               break;
> >
> >       default:
> >
