Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 27 Nov 2018 12:18:50 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 2D84F5802E4;
	Mon, 26 Nov 2018 18:58:45 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by orsmga001-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 26 Nov 2018 18:58:44 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AIhx/jBe/A+phxrUrFwQmOZi7lGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc69bBON2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRBDI2i?=
 =?us-ascii?q?coUBAekPM+FaoInzqFQAogC+BRGuCe701jNFhWX70bEg3ug9DQ3L2hErEdIUsH?=
 =?us-ascii?q?TTqdX4LLsfUOCwzKbSyzXIcu5b1i3y6IfSaR8uu+qMVq93fMXLyUgvEhnKjlOK?=
 =?us-ascii?q?pYP+JTyV2f4CvHOB4Op7Tu+vhGsnpBtwojir3Msjlo7JhocMx13C6C53w541KM?=
 =?us-ascii?q?WmREJnZdOoCoZcui+EO4dsX88vQH1ktDw7x7AEoZK3YikHxIg6yxPab/GLb5aE?=
 =?us-ascii?q?7xf/W+qPPTt0mHdodbO/ihqv70Stz/fzW8mo3FlRqydFnMXDu3AQ2BHW5MWKS+?=
 =?us-ascii?q?dx80ik1DmS0w3e6+BJLEYpnqTBMZEh2KQ/lp8LvETDACD2nEL2gbeIdkUr5Oeo?=
 =?us-ascii?q?8f7rYrb4qZ+GMY97lAX+Pr4pmsylDuQ0KgkOX26F9uSgzLDv41H1TbFQgvErnK?=
 =?us-ascii?q?TVrorWKdkYq6KlGQNY04Qu5w66Dzi80dQYmXcHLEhCeBKCl4XpP1DOIPblDfaw?=
 =?us-ascii?q?mliskylkx+rAPrL/BpXBN3/Dkbnnfblj8U5R0xQzzd9B6JJOEL0BI+z8WlX3tN?=
 =?us-ascii?q?PGCh81KQu0w/zoCNllzIMRRXqPArOFMKPVqVKI4uMvI+qSa4MPtzf9NuMo5/rv?=
 =?us-ascii?q?jX8/hF8ccrOl3ZoRaHCkAPtmJ1+VbmbrgtcECW0KpBYxTPT2iF2eVj5ef3ayUL?=
 =?us-ascii?q?g95jEnEo2mCp3PRoCwgLOb2ie7EYZbZmRHClCKDHfpeJ+IW/YKaCKOPMBhliYI?=
 =?us-ascii?q?WqSmS48kzRuurhP1y6J7LurI/S0VrZDj1N9r6OHJlhEy8jp0D8Ka02yWS2F0n2?=
 =?us-ascii?q?UIRyI53axloEx9zEuD3rZ8g/BCCdNT4PZJWB8gNZHA1+x6F8zyWgXZc9iTU1am?=
 =?us-ascii?q?QtKmATIrQtIr2dAOYV1wG9GjjhDFwiqrDKUZl72NBJwo7K3c22L9KNp6y3bDzK?=
 =?us-ascii?q?MhlUUpQtNTNW26ga5y7wvTCJTPk0mDk6aqdL4T3CjC9GqYyWqOvUdYUBN/UKnf?=
 =?us-ascii?q?XHAfYFfWosr95k/YU7CuDrEnOBNbycGeMqtKdsHpjVJeSfj+ItvefXy+l32wBR?=
 =?us-ascii?q?mSwLOMd5Tle2Ma0CXZC0gElgQT8G2CNQg/ACehvm3fACZvFVLpf0Pj7+1+pGmn?=
 =?us-ascii?q?QU8zygGAd1dh2Kat+h4JmfycTOse0a8etyc/tTp4Bla90MjQC9qbuQVher5RYd?=
 =?us-ascii?q?c84FdByGLYuBZxPp2mL6B+mFEedx57sF/p1xVyEo9Ai9QlrGs2zApuLqKVyE9B?=
 =?us-ascii?q?dzKd3ZD3Jr3XKmnz8Aqza6LM3VHeytKW+qYJ6PQ3sFjjuACpFkw/83RoydVV0n?=
 =?us-ascii?q?2c5onUAwoWS57+TkE39x1irbHAfiY9/5/U1WFrMaSsqDDC38wmBeQ7xRegZdtQ?=
 =?us-ascii?q?K76EGxLoHM0cBMiuL/IqlkOtbhIFOuBS6aE1M9mnd/uAxK6kIuJgkCi6gmRA5Y?=
 =?us-ascii?q?B3yliM+DZkSu7Uw5YFxOmV3wuaVzvmkFitqMH2mYBeajEUEWqy0izkBI9XZq1v?=
 =?us-ascii?q?cocHE2auI8urxtpgg57hQWJX9FmmB1kews+mZQKSb0Dh3Q1XzUkXu32nljeiwD?=
 =?us-ascii?q?xujj4pqbCT3CrQzOT4dRoLI3JES3NmjVjxP4e0ldcaXE6zYggtlRul41v6xqdB?=
 =?us-ascii?q?qKR+KWnTXVlHfyzsI25+Vauws6KIY9RT55MwrSVXTOO8bEiaS778uRcb0znvH3?=
 =?us-ascii?q?BDxDA9bDyqvpT5nxpniGOSNnpzrXzZed1uyhfb/tDTWflR3j8eTililTbXHkS8?=
 =?us-ascii?q?P8Wu/diMlZfMqPq+V2GiVp1UayXr1pmPtCi45W1rBx2wgfazl8bjEQg71y/7yt?=
 =?us-ascii?q?ZrWT/JrBb6fonkyaC6Pfh7cUlvAV/289B6FZ1mkossmJEQ3mAXh5WP8noAi2vz?=
 =?us-ascii?q?M9Rb2aTlYXoJRD4LxcPV4Qf/1E1iKHKJ25z2VnGHzsR9YNm6Z3sc2jgh4MBSFK?=
 =?us-ascii?q?eU8LtEkDN2olWirALde/h9nioHxvso534XmOUJuAsrziWADbEeB0hYPSrwlxuW?=
 =?us-ascii?q?69CytrlYZGGqcbKozkpxgcihDK2eogFbQHv5f5YiHSxq4cllPlPDzmbz6p36d9?=
 =?us-ascii?q?nKdt0cqAeUkxjbguhRKZIxkOcKhCV9NWL8u30l1/A0jRh00Z6mu4iHLn1n/Lil?=
 =?us-ascii?q?DR5AKj31e8QT9ynxjaZZm8aaxYGuEY9nGjUWR5voVvOoHSkWtfTmMQaODTI9pm?=
 =?us-ascii?q?2aGbrZAQ+Q9kNmo2jTHJCsMnGdPGMZwsl6RBmBOExfhxgZUy4gkZ4+EgCq2dbt?=
 =?us-ascii?q?cENk5j0K4l74qx1Myv9nNhXlU2ffohuoZSkwSJSFMBVW6QRC7V/PMcOC9uJzAz?=
 =?us-ascii?q?1Y/pq5oQyPMGObYhpHDXoTVkyYHVzjPaSu5drd8+ieHOW+NODDYbGPqexYSveJ?=
 =?us-ascii?q?yoij0opg/zaQKMqPOmNuAOE82kpGRXp5AdjWmy0TSywLkCLAd86apBCh+i1us8?=
 =?us-ascii?q?Cw6vLrVBj05YuIDbtSPs5i+xS3gaeFKu6Rizx1KTde1pMQ23DIzKIT00IViyFr?=
 =?us-ascii?q?bzOtC6gPtTbRTKLMna9aFx4bZD1yNMtL7KI83xNBOc3BitPy2b53kOQ1C0peVV?=
 =?us-ascii?q?H6nsGpZMoKI3yyNV/dBUaLMqiGKiPPw83tfay8TrhQhv1OtxKsoTabD1PjPjOb?=
 =?us-ascii?q?mjbzShCgKvtMgz+bPRBEvIG9cw1gCWziTNLgdx26P8V7jTwwwb0omHzKMXQQPi?=
 =?us-ascii?q?R7c0NItreQ9z9Xgu1jG2xd6XpoNfWEmyec7+XCNpkaq+dkAiRqmOJc+3k6z7pV?=
 =?us-ascii?q?7CdZRP16gifSr9huo024nemL0DZoTB1OqjNTjoKRoUpiIbnZ9oVHWXvc/BMC92?=
 =?us-ascii?q?OQCxELp9tjEtLuuqBQxcLJlKL8MzpC99PU/c0BB8nbMs6HMXwhMQb3Fz7QFgcK?=
 =?us-ascii?q?UTmrNWSMz3Baxd2b7GeYqNAao4Lw0M4CVL9STkAdF/UUEE1pEdUOZpBtUWVg2Z?=
 =?us-ascii?q?edgN9A3nqzshLRScNZudiTX/SeEN3uLjiDhLVJbhdOxqn3e8BbFITh3FdmY0cy?=
 =?us-ascii?q?v5XRFk7ZFYRVrzdsficsrV9A4D51XDt3k37saQq24H5bNOG9n1ZilgphaOUF7y?=
 =?us-ascii?q?r37hE8IV+c4GMTmUg1kNPqyQGYdjG5eKS5XIVfDSXcrUU4No/2QEB+agjk2QRE?=
 =?us-ascii?q?KTaMeLtXgPM0dX1qzhDVv5RnEvdaSqtFaxYUg/qQYqNsmVBdrDi3gExK/+3IDb?=
 =?us-ascii?q?N8mwYwN52htXRN30RkdtFxbbTULbZHyUJVw66UvzGlzKUhkFE2OUkA6iWRdTQO?=
 =?us-ascii?q?tUhOMaMpY2Kh+vdlrACPhTZHUGEITPNvuuht9E42J6KH1S2z/aRELxWYJumWKe?=
 =?us-ascii?q?uzsmfJn8eTCgc5x0YBkQ9P9Ld/2844W0WRXkErirCWEkJaZoL5NQhJYp8KpzDo?=
 =?us-ascii?q?diGUvLCImMotMg=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAAAnsvxbh0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgTAqghEnjBGOJpcoFIFiDwEBGBMBiGMiNAkNAQMBAQEBAQECARM?=
 =?us-ascii?q?BAQEIDQkIKSMMgjYkAYJiAwMBAiQLAQ0BGx0BAwIJAQEFEAM4Ax4CEQEFARwGA?=
 =?us-ascii?q?RIFglFLgWkBAxUBBJoMPIwJFgUBF4J3BYEGAYM/ChknDVqBNwIGEodMgw+BHIF?=
 =?us-ascii?q?XP4ERhWiBbYYWAokfhXp3j0YuBwKCHASEHYdHgyALGIlRhzeOTok8BgIJBw8hg?=
 =?us-ascii?q?SWCDTMaI4EBgjuCGwwXg0qKHAFTIjKBBAEBATuMWwEB?=
X-IPAS-Result: =?us-ascii?q?A0ANAAAnsvxbh0O0hNFjHAEBAQQBAQcEAQGBUQcBAQsBgTA?=
 =?us-ascii?q?qghEnjBGOJpcoFIFiDwEBGBMBiGMiNAkNAQMBAQEBAQECARMBAQEIDQkIKSMMg?=
 =?us-ascii?q?jYkAYJiAwMBAiQLAQ0BGx0BAwIJAQEFEAM4Ax4CEQEFARwGARIFglFLgWkBAxU?=
 =?us-ascii?q?BBJoMPIwJFgUBF4J3BYEGAYM/ChknDVqBNwIGEodMgw+BHIFXP4ERhWiBbYYWA?=
 =?us-ascii?q?okfhXp3j0YuBwKCHASEHYdHgyALGIlRhzeOTok8BgIJBw8hgSWCDTMaI4EBgju?=
 =?us-ascii?q?CGwwXg0qKHAFTIjKBBAEBATuMWwEB?=
X-IronPort-AV: E=Sophos;i="5.56,285,1539673200"; 
   d="scan'208";a="54436801"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 26 Nov 2018 18:58:43 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728431AbeK0NzA (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 27 Nov 2018 08:55:00 -0500
Received: from mail-vs1-f66.google.com ([209.85.217.66]:37483 "EHLO
        mail-vs1-f66.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727741AbeK0NzA (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 27 Nov 2018 08:55:00 -0500
Received: by mail-vs1-f66.google.com with SMTP id h18so12817018vsj.4;
        Mon, 26 Nov 2018 18:58:38 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding;
        bh=s+lnsOoSpKzOe0OGNePqW8hMjyow6Cx41d/JN1fD5LA=;
        b=b0M6yxsUm1rHQ/qEAmI+u40zl2CUwgLOeSSUS/ricMThCDdtBA8lviBmHYn4GUb0BG
         ydiMHZfREMuDfTgSzjbVd0ALWSXLQtOI+x4adxaBlTYVo8IdpvQfOMsLKkdr4ogdYSfL
         pWT7MP/G66kgHfUKYT0q63s2+MaKTQsb276p+4Tsgr4pic/cObDOPW+vNHkckYEl1pf5
         IFMT5KnV/XFnCJcsp9prjZt5NewBWSpznyBRAqfeegYxiY7SXcaejq6DGS0gdWZoodJG
         P11G38YTU+ew2VRE2U9rL7Vulj3Ffskt3AmCcDiagxYduBHTeP4z7s5v+yc+D7QHwz9+
         BeZQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=s+lnsOoSpKzOe0OGNePqW8hMjyow6Cx41d/JN1fD5LA=;
        b=mZMSDZDP9BBlcLcRVLxAjncFocPcOocr3bWP2nAKBDIlqpKXRj9sgNbOY+CX+zrNUf
         C0DgkV1+7u4kXgRSXqMKy/VzINfOB+pmsDvqPZgk3ajjxfTvBC14q4D11h8LakqYiHth
         8wAiF8BQ/sc0L/qeuaA8iDXHbI94gjcbSeIlP73AabuZycrE6EZArQAqaOmu29dEam5Y
         6+kjPk8ASXuqvcNuSH3dZHUjp7hh/8gVcBlGsOOBiyDA5pBkzPZEvswQWto+BBOS3r9x
         6gnYD1ANeCZ7U7v97mK4bkRAuxjAMpxLeDRQQoHL6nLeDTMhS1NCyIzbUH7rOaYiCd5u
         xhLA==
X-Gm-Message-State: AA+aEWaJt0upkp/N/XzNxNC/zLy5YOg+MIHWjenWVqNpad+HCBBL4iev
        0JKMV41+xPLQBT4Y+7YLgVmmjQ7d7w==
X-Google-Smtp-Source: AJdET5eIpTFP4+e7UtCePdkfXR5qDBSK7bWjClKRsOSNpBHra9orumNP8mtagpHOHzWsW5WYsKqIbw==
X-Received: by 2002:a67:6583:: with SMTP id z125mr11882805vsb.135.1543287517903;
        Mon, 26 Nov 2018 18:58:37 -0800 (PST)
Received: from localhost.localdomain ([2601:902:c200:6512:a50b:fc5d:3604:d966])
        by smtp.gmail.com with ESMTPSA id j82sm1006934vsd.23.2018.11.26.18.58.36
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Mon, 26 Nov 2018 18:58:37 -0800 (PST)
From: Ayman Bagabas <ayman.bagabas@gmail.com>
To: Darren Hart <dvhart@infradead.org>,
        Andy Shevchenko <andy@infradead.org>,
        Jaroslav Kysela <perex@perex.cz>,
        Takashi Iwai <tiwai@suse.com>,
        Kailang Yang <kailang@realtek.com>,
        Hui Wang <hui.wang@canonical.com>,
        linux-kernel@vger.kernel.org, platform-driver-x86@vger.kernel.org,
        alsa-devel@alsa-project.org
Cc: ayman.bagabas@gmail.com
Subject: [PATCH v7 2/3] x86: add support for Huawei WMI hotkeys.
Date: Mon, 26 Nov 2018 21:57:48 -0500
Message-Id: <20181127025752.6459-3-ayman.bagabas@gmail.com>
X-Mailer: git-send-email 2.19.1
In-Reply-To: <20181127025752.6459-1-ayman.bagabas@gmail.com>
References: <20181127025752.6459-1-ayman.bagabas@gmail.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This driver adds support for missing hotkeys on some Huawei laptops.
Currently, only Huawei Matebook X and Matebook X Pro is supported.

Signed-off-by: Ayman Bagabas <ayman.bagabas@gmail.com>
---
 drivers/platform/x86/Kconfig      |  15 ++
 drivers/platform/x86/Makefile     |   1 +
 drivers/platform/x86/huawei-wmi.c | 247 ++++++++++++++++++++++++++++++
 3 files changed, 263 insertions(+)
 create mode 100644 drivers/platform/x86/huawei-wmi.c

diff --git a/drivers/platform/x86/Kconfig b/drivers/platform/x86/Kconfig
index 87f70e8f4dd0..0f9db4275fb4 100644
--- a/drivers/platform/x86/Kconfig
+++ b/drivers/platform/x86/Kconfig
@@ -1292,6 +1292,21 @@ config INTEL_ATOMISP2_PM
 	  To compile this driver as a module, choose M here: the module
 	  will be called intel_atomisp2_pm.
 
+config HUAWEI_WMI
+	tristate "Huawei WMI hotkeys driver"
+	depends on ACPI_WMI
+	depends on INPUT
+	select INPUT_SPARSEKMAP
+	select LEDS_TRIGGERS
+	select LEDS_TRIGGER_AUDIO
+	help
+	  This driver provides support for Huawei WMI hotkeys.
+	  It enables the missing keys and adds support to the micmute
+	  LED found on some of these laptops.
+
+	  To compile this driver as a module, choose M here: the module
+	  will be called huawei-wmi.
+
 endif # X86_PLATFORM_DEVICES
 
 config PMC_ATOM
diff --git a/drivers/platform/x86/Makefile b/drivers/platform/x86/Makefile
index 39ae94135406..d841c550e3cc 100644
--- a/drivers/platform/x86/Makefile
+++ b/drivers/platform/x86/Makefile
@@ -32,6 +32,7 @@ obj-$(CONFIG_ACERHDF)		+= acerhdf.o
 obj-$(CONFIG_HP_ACCEL)		+= hp_accel.o
 obj-$(CONFIG_HP_WIRELESS)	+= hp-wireless.o
 obj-$(CONFIG_HP_WMI)		+= hp-wmi.o
+obj-$(CONFIG_HUAWEI_WMI)		+= huawei-wmi.o
 obj-$(CONFIG_AMILO_RFKILL)	+= amilo-rfkill.o
 obj-$(CONFIG_GPD_POCKET_FAN)	+= gpd-pocket-fan.o
 obj-$(CONFIG_TC1100_WMI)	+= tc1100-wmi.o
diff --git a/drivers/platform/x86/huawei-wmi.c b/drivers/platform/x86/huawei-wmi.c
new file mode 100644
index 000000000000..b6157c5b7f4a
--- /dev/null
+++ b/drivers/platform/x86/huawei-wmi.c
@@ -0,0 +1,247 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ *  Huawei WMI hotkeys
+ *
+ *  Copyright (C) 2018	      Ayman Bagabas <ayman.bagabas@gmail.com>
+ */
+
+#include <linux/acpi.h>
+#include <linux/input.h>
+#include <linux/input/sparse-keymap.h>
+#include <linux/leds.h>
+#include <linux/module.h>
+
+MODULE_AUTHOR("Ayman Bagabas <ayman.bagabas@gmail.com>");
+MODULE_DESCRIPTION("Huawei WMI hotkeys");
+MODULE_LICENSE("GPL v2");
+
+/*
+ * Huawei WMI Events GUIDs
+ */
+#define MBX_EVENT_GUID "59142400-C6A3-40fa-BADB-8A2652834100"
+#define MBXP_EVENT_GUID "ABBC0F5C-8EA1-11D1-A000-C90629100000"
+
+MODULE_ALIAS("wmi:"MBX_EVENT_GUID);
+MODULE_ALIAS("wmi:"MBXP_EVENT_GUID);
+
+static const struct key_entry huawei_wmi_keymap[] __initconst = {
+		{ KE_KEY,    0x281, { KEY_BRIGHTNESSDOWN } },
+		{ KE_KEY,    0x282, { KEY_BRIGHTNESSUP } },
+		{ KE_KEY,    0x284, { KEY_MUTE } },
+		{ KE_KEY,    0x285, { KEY_VOLUMEDOWN } },
+		{ KE_KEY,    0x286, { KEY_VOLUMEUP } },
+		{ KE_KEY,    0x287, { KEY_MICMUTE } },
+		{ KE_KEY,    0x289, { KEY_WLAN } },
+		// Huawei |M| button
+		{ KE_KEY,    0x28a, { KEY_CONFIG } },
+		// Keyboard light
+		{ KE_IGNORE, 0x293, { KEY_KBDILLUMTOGGLE } },
+		{ KE_IGNORE, 0x294, { KEY_KBDILLUMUP } },
+		{ KE_IGNORE, 0x295, { KEY_KBDILLUMUP } },
+		{ KE_END,    0 }
+};
+
+static char *event_guid;
+static struct input_dev *inputdev;
+
+static int huawei_wmi_micmute_led_set(bool on)
+{
+	acpi_handle handle;
+	char *method;
+	union acpi_object args[3];
+	struct acpi_object_list arg_list = {
+		.pointer = args,
+		.count = ARRAY_SIZE(args),
+	};
+
+	handle = ACPI_HANDLE(&inputdev->dev);
+	args[0].type = args[1].type = args[2].type = ACPI_TYPE_INTEGER;
+	args[1].integer.value = 0x04;
+
+	if (acpi_has_method(handle, method = "\\_SB.PCI0.LPCB.EC0.SPIN")) {
+		args[0].integer.value = 0;
+		args[2].integer.value = on ? 1 : 0;
+	} else if (acpi_has_method(handle, method = "\\_SB.PCI0.LPCB.EC0.WPIN")) {
+		args[0].integer.value = 1;
+		args[2].integer.value = on ? 0 : 1;
+	} else {
+		dev_err(&inputdev->dev, "Unable to find ACPI method\n");
+		return -ENOSYS;
+	}
+
+	acpi_evaluate_object(handle, method, &arg_list, NULL);
+
+	return 0;
+}
+
+static int micmute_led_set(struct led_classdev *led_cdev,
+		enum led_brightness brightness)
+{
+	int state = brightness != LED_OFF;
+	int err;
+
+	err = huawei_wmi_micmute_led_set(state);
+	return err < 0 ? err : 0;
+}
+
+static struct led_classdev micmute_led_cdev = {
+	.name = "huawei::micmute",
+	.max_brightness = 1,
+	.brightness_set_blocking = micmute_led_set,
+	.default_trigger = "audio-micmute",
+};
+
+static void huawei_wmi_process_key(struct input_dev *inputdev, int code)
+{
+	const struct key_entry *key;
+
+	/*
+	 * MBX uses code 0x80 to indicate a hotkey event.
+	 * The actual key is fetched from the method WQ00.
+	 */
+	if (code == 0x80) {
+		acpi_status status;
+		unsigned long long result;
+		const char *method = "\\WMI0.WQ00";
+		union acpi_object args[1];
+		struct acpi_object_list arg_list = {
+			.pointer = args,
+			.count = ARRAY_SIZE(args),
+		};
+
+		args[0].type = ACPI_TYPE_INTEGER;
+		args[0].integer.value = 0;
+
+		status = acpi_evaluate_integer(ACPI_HANDLE(&inputdev->dev), (char *)method, &arg_list, &result);
+		if (ACPI_FAILURE(status)) {
+			dev_err(&inputdev->dev, "Unable to evaluate ACPI method %s\n", method);
+			return;
+		}
+
+		code = result;
+	}
+
+	key = sparse_keymap_entry_from_scancode(inputdev, code);
+	if (!key) {
+		dev_info(&inputdev->dev, "Unknown key pressed, code: 0x%04x\n", code);
+		return;
+	}
+
+	/*
+	 * The MBXP handles backlight natively using ACPI,
+	 * but not the MBX. If MBXP is being used, skip reporting event.
+	 */
+	if ((key->sw.code == KEY_BRIGHTNESSUP || key->sw.code == KEY_BRIGHTNESSDOWN)
+			&& strcmp(event_guid, MBXP_EVENT_GUID) == 0)
+		return;
+
+	sparse_keymap_report_entry(inputdev, key, 1, true);
+}
+
+static void huawei_wmi_notify(u32 value, void *context)
+{
+	struct input_dev *inputdev = context;
+	struct acpi_buffer response = { ACPI_ALLOCATE_BUFFER, NULL };
+	union acpi_object *obj;
+	acpi_status status;
+
+	status = wmi_get_event_data(value, &response);
+	if (ACPI_FAILURE(status)) {
+		dev_err(&inputdev->dev, "Bad event status 0x%x\n", status);
+		return;
+	}
+
+	obj = (union acpi_object *)response.pointer;
+	if (!obj)
+		return;
+
+	if (obj->type == ACPI_TYPE_INTEGER)
+		huawei_wmi_process_key(inputdev, obj->integer.value);
+	else
+		dev_info(&inputdev->dev, "Unknown response received %d\n", obj->type);
+
+	kfree(response.pointer);
+}
+
+static int huawei_wmi_input_init(void)
+{
+	acpi_status status;
+	int err;
+
+	inputdev = input_allocate_device();
+	if (!inputdev)
+		return -ENOMEM;
+
+	inputdev->name = "Huawei WMI hotkeys";
+	inputdev->phys = "wmi/input0";
+	inputdev->id.bustype = BUS_HOST;
+
+	err = sparse_keymap_setup(inputdev, huawei_wmi_keymap, NULL);
+	if (err)
+		goto err_free_dev;
+
+	status = wmi_install_notify_handler(event_guid,
+			huawei_wmi_notify,
+			inputdev);
+	if (ACPI_FAILURE(status)) {
+		err = -EIO;
+		goto err_free_dev;
+	}
+
+	err = input_register_device(inputdev);
+	if (err)
+		goto err_remove_notifier;
+
+	return 0;
+
+err_remove_notifier:
+	wmi_remove_notify_handler(event_guid);
+err_free_dev:
+	input_free_device(inputdev);
+	return err;
+}
+
+static void huawei_wmi_input_exit(void)
+{
+	wmi_remove_notify_handler(event_guid);
+	input_unregister_device(inputdev);
+}
+
+static int __init huawei_wmi_init(void)
+{
+	int err;
+
+	if (wmi_has_guid(MBX_EVENT_GUID)) {
+		event_guid = MBX_EVENT_GUID;
+	} else if (wmi_has_guid(MBXP_EVENT_GUID)) {
+		event_guid = MBXP_EVENT_GUID;
+	} else {
+		pr_warn("Compatible WMI GUID not found\n");
+		return -ENODEV;
+	}
+
+	err = huawei_wmi_input_init();
+	if (err)
+		goto err_input;
+
+	micmute_led_cdev.brightness = ledtrig_audio_get(LED_AUDIO_MICMUTE);
+	err = led_classdev_register(&inputdev->dev, &micmute_led_cdev);
+	if (err)
+		goto err_leds;
+
+	return 0;
+
+err_leds:
+	huawei_wmi_input_exit();
+err_input:
+	return err;
+}
+
+static void __exit huawei_wmi_exit(void)
+{
+	led_classdev_unregister(&micmute_led_cdev);
+	huawei_wmi_input_exit();
+}
+
+module_init(huawei_wmi_init);
+module_exit(huawei_wmi_exit);
-- 
2.19.1

