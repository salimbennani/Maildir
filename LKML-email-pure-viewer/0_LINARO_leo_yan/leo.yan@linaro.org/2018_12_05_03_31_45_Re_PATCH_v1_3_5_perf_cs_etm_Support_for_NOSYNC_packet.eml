Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 05 Dec 2018 14:28:43 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga008.fm.intel.com (fmsmga008.fm.intel.com [10.253.24.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id A6E7758014B;
	Tue,  4 Dec 2018 19:32:07 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by fmsmga008-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 04 Dec 2018 19:32:07 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AWooKwBScEXMmv1JBix4dDXfPdNpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64YBWPt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZDI2y?=
 =?us-ascii?q?b5UBAfcCM+ZWoIbyu0YBohmwCgm3HOPiyCRFhmPq0aAgz+gtDRvL0BImEtkTsH?=
 =?us-ascii?q?rUttL1NKIKXOCx0qbIyi/PbvNM1jf784XIdhEhofeWUrJqdsrd004vFxnKjliW?=
 =?us-ascii?q?tIfrPCuV2/wTv2SH6+dsT/+jhmA5pw1rvzSixdsghpPIi48X0lzI6zl1zYIvKd?=
 =?us-ascii?q?GmSEN3fcSoHIVOuyyZLYd6X8AvTmd1sygg0LIGo4S0fC0SxZQn2RHfb/uHfpCW?=
 =?us-ascii?q?4hLsSumROy10hHF7d7KlgRa970ygxvf7Vsmu31ZGtitFkt/SuXARzxHf9NSLR/?=
 =?us-ascii?q?9n8ku81zuDyRrf5vxHLEwoj6bWKpwszqY1lpUJsETDGiH2mF/xjK+Tbkgk/umo?=
 =?us-ascii?q?6+L6YrTpv5OcNJF7ihv4MqswnsyzGOM4MwYIX2eF4+Sxz6Pj/ULnT7VQlPE2kb?=
 =?us-ascii?q?fWsIrcJcsFoq61GQhV0pws6xqnFTepzMwYnWUbLFJCYB+Hi4npO1LQL/ziAva/?=
 =?us-ascii?q?nk+hkDNqx/DAI73gDY/BLnnFkLf9Y7l971RQxxY0zdBa/5hUEK0OIOrvWk/ts9?=
 =?us-ascii?q?zVFh85PBa1w+b7Etp90ZkSWWKSAqCDNqPSvkSF5uYuI+mKeY8UtyzxK/kj5/7y?=
 =?us-ascii?q?k3A5nUURcrWu3ZsScHq4BOhpI12FYXrwhdcMCWUKvg0gQ+Dwi12CVjhTZ3C1X6?=
 =?us-ascii?q?8n4jE7CYSmDZrMR4y3gbyB2ju7EYNSZmxcFl+MFnLofZ2eW/gQcCKSPtNhkjsc?=
 =?us-ascii?q?WLe7UI8h1RautAzgx7p9NOXU+DYVtZbi1Nhz+u3Smgs+9T1yD8SBzW6NS3t4kX?=
 =?us-ascii?q?8PRz8zxKp/u1Byyk+f0ahkhPxVDd9T6OlPUgsgMZ7czvZ1C9b9Wg/aeteJSVCm?=
 =?us-ascii?q?QsipAD0rT9IxxcMObFh5G9m4kh/D2C+qCacPl7OXHJw07r7c33/pKslg0XnGyr?=
 =?us-ascii?q?cug0MmQsRVM22mnbBw9w7UC47NkEWZkqKqeL8Y3C7M8meD0GWPsFtZUA52TaXK?=
 =?us-ascii?q?Q3QfalHKotT+40PIV6WuBqg/Mgtd1c6CLbNHZcDzglVYWvjvItTebHi3m2erGx?=
 =?us-ascii?q?mIwKiBbI7re2UbwSXcB1IIkwEV/XaaKwc+Aj2trH7ZDDxrDVjveV/j8fFiqHOn?=
 =?us-ascii?q?SU851x2Kb0xk17qy5h4VhfydR+kP3r4evychsTF0HFe739LZENeAowthfKNBYd?=
 =?us-ascii?q?Iy+ltH1GTZtxBjMZykNaxtmlkecwFvtUP0yxp3EplAkdQtrH4y1gVyLbyX0Vxf?=
 =?us-ascii?q?eDKYx5z/IaDXJXTo8xCpaK7W3U/e3c2S+qcO7vQ4tlrisBuoFkok73Vozd1V32?=
 =?us-ascii?q?GA6ZXNCQoYSYjxXVov9xhmu7HaZTEw5oPJ1XF2Laa4qD7D29IzC+sjxRatZNNf?=
 =?us-ascii?q?MKKCFA/vHMwWHcmuKOo2m1e3ahIIJvxd9KkxP8m+bfuJxLarPPp8nDKhlWlH+o?=
 =?us-ascii?q?F93V6W+CpmV+HI2IwJw/eG0QudVjfwlUuuvdrzmY9Zez4SBG2/yS7/CY5VZ61y?=
 =?us-ascii?q?e5sLCGi0L822wNV+m4DiW3pC+FG/AFMG3dejeQCOYFzlwQ1QyUMXrGSnmCu51T?=
 =?us-ascii?q?B1kyslrrGC3CzI2OnicBsHOmhWRGhtl1vsII60j8wEU0isdQQmiByl5UPizahB?=
 =?us-ascii?q?uKt/N3XTQVtPfyXuLWFtSLGwtrmBY85I8p8oqj9YUOe/YVCbTL7yvR0a3jjnH2?=
 =?us-ascii?q?tfwjA7aj6rto/4nxx8lGKSMnJzoGDFdsF3wBfV/MbcSuJJ3joaWCl4jiHaB1im?=
 =?us-ascii?q?MNmu59mUlZbDsualWmKlV51TdzTrzIyauCu6421qHQOwn/SpltL7Fgg61Dfx18?=
 =?us-ascii?q?N2WiXQsBb8fo7r2ry5Me19f0lkHl/869dgFYF4nYs9n5UQ2XkchpWI8nsLi2bz?=
 =?us-ascii?q?MdNH2a3gaHoBXyIEw9nQ4AL9wk1sMmqJx57lVnWa2sZhYti6YmAM1S4n4cFFFr?=
 =?us-ascii?q?yU7KBakitvuVW3sxjRYfdmkzcZyPsu7mMagu4TtAosyCWdHq4dHU1CMSPwkBSI?=
 =?us-ascii?q?6si0rL9La2a3bbiwyE1+kMi9DLGFpwFQQnf4dY0kHS9t9cV/K1PM3Wb36oHlft?=
 =?us-ascii?q?nQcN0SugeVkxfGk+haNpYxmuAWiipgPGL3pWclxPIjjRxywZG6u5CKJH5386K+?=
 =?us-ascii?q?Bh5YKyf5Z8cO+jz2iaZen8CW352gH5l7GzULWofoQuysED4IqfvnMAOOGiUmqn?=
 =?us-ascii?q?iHAbrfAROf6EB+onLNCZ+rMm+YJGIDwdV+XhWdJ1FfgAMJXDU8hJE5DRunxMjg?=
 =?us-ascii?q?cEd/+zAQ6UT0qhpKyuJ0KRb/Vn3TqxuvajcxUJKfNgZZ7hle50fJNsyT9uJyHy?=
 =?us-ascii?q?ZF/p24sQyCMGqbax5TDWEOXEyECEvuPr2v5dnG7uiZCfCyL/rIYbWSt+NeU+2E?=
 =?us-ascii?q?yo6o0otj5zyMLNmAPmF+D/0n3UpORXB5FNrYmzUMSCwXljjBb82BpBe79S14sN?=
 =?us-ascii?q?q/8OnwWA/04YuPCr1SMchg+hysgKeDMfKQizh9KTpCypwMwnrIwqAF3FEOkyFu?=
 =?us-ascii?q?ayWtEbMYuCHXUaLfgbVXAAAbai9pMMtI7rkx3g1MOc7dl9P02aR0jv8zC1dZS1?=
 =?us-ascii?q?PhntulatANI2G4LFnHHlqENKyaJT3XxMH6eb+8SbxVjOlOqxK8oyqUE0/9MTSF?=
 =?us-ascii?q?jDTpUxGvMedRjCCUJhBeuYe9cgpzBmjnVt7pdhq7MNpvhz0s3bI0nm/KNXIbMT?=
 =?us-ascii?q?Vkc0JCtLuQ7SZZgvV5A2NA73plIvOCmyaW9OTYLpcWsf12AiV7je5a4XI6y6dL?=
 =?us-ascii?q?4yFAXvB6hCzSrts9622hx8yG1jpmXQcGkjFKnoOGpw02PKzF9phNRDDc+xMX7G?=
 =?us-ascii?q?iKIxALodJ/DZvooa8GmfbVk6emLDpFtcPd++MYBs7dMsXBN2AuYkmhIyLdEAZQ?=
 =?us-ascii?q?FW3jDmrYnUEI1ajKrnA=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AFAAB/Rgdch0O0hNFkGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBVAEBAQEBAQsBg2sUE5gggg0Ul0mBXxIBARgTAYdMIjcGDQE?=
 =?us-ascii?q?DAQEBAQEBAgETAQEBCA0JCCkjDII2JAGCYQEBAQECAQECJBMGAQE3AQQBCQEBC?=
 =?us-ascii?q?hgJJQMMBSABBQEiEwWDHIF6CAWZSDyKHYFsM4J2AQEFhgSBJAgSiUiBKIEcgha?=
 =?us-ascii?q?DbjWEaoNMgiaJDyABK4FHhQ2FOIpjBwKRNiMKAoFPhRGCb4dLLJgjAgQCBAUCB?=
 =?us-ascii?q?Q8hgTuBd32DL4IbiQGFTDMygQUBASGLAQEB?=
X-IPAS-Result: =?us-ascii?q?A0AFAAB/Rgdch0O0hNFkGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BVAEBAQEBAQsBg2sUE5gggg0Ul0mBXxIBARgTAYdMIjcGDQEDAQEBAQEBAgETA?=
 =?us-ascii?q?QEBCA0JCCkjDII2JAGCYQEBAQECAQECJBMGAQE3AQQBCQEBChgJJQMMBSABBQE?=
 =?us-ascii?q?iEwWDHIF6CAWZSDyKHYFsM4J2AQEFhgSBJAgSiUiBKIEcghaDbjWEaoNMgiaJD?=
 =?us-ascii?q?yABK4FHhQ2FOIpjBwKRNiMKAoFPhRGCb4dLLJgjAgQCBAUCBQ8hgTuBd32DL4I?=
 =?us-ascii?q?biQGFTDMygQUBASGLAQEB?=
X-IronPort-AV: E=Sophos;i="5.56,316,1539673200"; 
   d="scan'208";a="54568246"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 04 Dec 2018 19:31:59 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726762AbeLEDb4 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 4 Dec 2018 22:31:56 -0500
Received: from mail-wr1-f52.google.com ([209.85.221.52]:46742 "EHLO
        mail-wr1-f52.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725864AbeLEDb4 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 4 Dec 2018 22:31:56 -0500
Received: by mail-wr1-f52.google.com with SMTP id l9so18080682wrt.13
        for <linux-kernel@vger.kernel.org>; Tue, 04 Dec 2018 19:31:54 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=wlB088EpjbYek5NUXwNcHjHRuylhxCk0ZK1/tQY/sk0=;
        b=VAA+kmeKItk/BPU5YyORYApHXpEKcLqBlZ2zrXSWIYyciaPnf9bBiQg17/3Nh5bZou
         pro8CuOxcGIdlfPY9V028c+10gPduIHKtmlHgo0oMlYtsO1+83hOiRXagQcVoY6+DF2t
         SfOMDOktR3NFuwJYM3JwHdQUWwSsuKRUYAAYI=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:message-id:references
         :mime-version:content-disposition:in-reply-to:user-agent;
        bh=wlB088EpjbYek5NUXwNcHjHRuylhxCk0ZK1/tQY/sk0=;
        b=XU/9p6ScioXG604rYYUySXcTmvqPFa6sO5HcV5xDnjB4cFZ+/Qy4l+8nF9WvtslJiM
         kXqvx7dznAlYqvk4SizH/2xhFjmwK3wHP65pDD7acaSqRM9UZgZYufnNTL5QTqthWJZA
         DsCD2c79XXur5xmXgv4iDoO0rYHFL4sPglq/j1sHpxvDBsXENv5Lqyv6xKW5pBMBrphZ
         U05tO2/FF5R1hPeqc4t1P9F3uqUy1T2Kx+krSsmO6yv8DUyCOCCuZDudPzmjujA/FQdO
         kZezE76X5fZ03UzJ3DG6M7ZVCl1XdfbVtJgeaojKwdjy+hDMxde4z/L3bEf12hZRoJ2c
         MAjg==
X-Gm-Message-State: AA+aEWbjZ+ucJnrto+xdifsfUThKFgFklIB3RncLZrO0LUS3Naz1hhoZ
        9RwBCLxvqX+2rL2lXEu6gLTWow==
X-Google-Smtp-Source: AFSGD/Vl8s3XYOM+zzdpiCJXzy0gKzWjIhjss1fXYwqw6EPg8PHIChEVrGdnCb8kPjgTouv3jyHZsw==
X-Received: by 2002:adf:92c7:: with SMTP id 65mr6836282wrn.228.1543980713789;
        Tue, 04 Dec 2018 19:31:53 -0800 (PST)
Received: from leoy-ThinkPad-X240s ([209.250.228.18])
        by smtp.gmail.com with ESMTPSA id w12sm15911882wrr.23.2018.12.04.19.31.48
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Tue, 04 Dec 2018 19:31:52 -0800 (PST)
Date: Wed, 5 Dec 2018 11:31:45 +0800
From: leo.yan@linaro.org
To: Mathieu Poirier <mathieu.poirier@linaro.org>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>,
        Alexander Shishkin <alexander.shishkin@linux.intel.com>,
        Jiri Olsa <jolsa@redhat.com>,
        Namhyung Kim <namhyung@kernel.org>,
        linux-arm-kernel@lists.infradead.org, linux-kernel@vger.kernel.org,
        Mike Leach <mike.leach@linaro.org>,
        Robert Walker <robert.walker@arm.com>,
        Al Grant <Al.Grant@arm.com>,
        Coresight ML <coresight@lists.linaro.org>
Subject: Re: [PATCH v1 3/5] perf cs-etm: Support for NO_SYNC packet
Message-ID: <20181205033145.GA15964@leoy-ThinkPad-X240s>
References: <1541912383-19915-1-git-send-email-leo.yan@linaro.org>
 <1541912383-19915-4-git-send-email-leo.yan@linaro.org>
 <20181119182759.GA608@xps15>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181119182759.GA608@xps15>
User-Agent: Mutt/1.10+31 (9cdd884) (2018-06-19)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Mon, Nov 19, 2018 at 11:27:59AM -0700, Mathieu Poirier wrote:
> On Sun, Nov 11, 2018 at 12:59:41PM +0800, Leo Yan wrote:
> > As described in OpenCSD (CoreSight decoder lib), in the decoding stream
> > it includes one trace element with type OCSD_GEN_TRC_ELEM_NO_SYNC; the
> > element indicates 'either at start of decode, or after overflow / bad
> > packet', we should take it as a signal for the tracing off and this will
> > cause tracing discontinuity.  From the trace dump with 'perf script',
> > sometimes the element OCSD_GEN_TRC_ELEM_NO_SYNC collaborates with
> > element OCSD_GEN_TRC_ELEM_TRACE_ON to show the tracing flow have been
> > turned off and on, in this case the cs-etm code has handled TRACE_ON
> > packet well so we observe the tracing discontinuity; but in another case
> > it only inserts the element OCSD_GEN_TRC_ELEM_NO_SYNC into instructions
> > packets, we miss to handle the case if has only standalone NO_SYNC
> > element and users cannot receive the info for tracing discontinuity.
> > 
> > This patch introduces new type CS_ETM_TRACE_OFF to generate packet for
> > receiving element OCSD_GEN_TRC_ELEM_NO_SYNC from decoder; when generate
> > sample, CS_ETM_TRACE_OFF packet has almost the same behaviour with
> 
> Here you have used the word "almost", leading me to beleive there are cases
> where the handling of TRACE_ON and NO_SYNC packets differ, but the
> implementation enacts the same behavior for both.
> 
> Mike or Robert, can you confirm that TRACE_ON and NO_SYNC packets should be
> treated the same way?

I also would like to get suggestions/comments from Mike and Rob.

For NO_SYNC packet, Mike before has given some explination for it:

"looking at the decoder flow, when the decoder is reset, then it is
returned to an unsynchronised state and a NO_SYNC will be output.
With perf, it can concatenate multiple trace buffers into a single
section of the perf.data file. To ensure that the decode process can
see the start of a new buffer, the drivers will insert a barrier
packet between different buffers so that the decoder can spot the
boundaries. When the decoder hits a barrier packet it will
automatically reset so that it correctly decodes the next trace
buffer. This could be what you are seeing here."

So I think there still have some difference between TRACE_ON and
NO_SYNC packets, TRACE_ON packet indicates the start of trace and it's
also possible caused by tracing discontinuity; NO_SYNC packets usually
caused by an unsynchronised state.  But both of them presents
discontinuity in perf trace data.

I prefer to use two different packet types to present them, this can
let the code to be more readable and easier to be maintained later.

If you agree with this, I also will rephrase the commit log to avoid
confusion that these two packets are the same thing.

> Leo, if handling of the TRACE_ON and NO_SYNC packets is the same then we should
> treat them the same way in cs_etm_decoder__gen_trace_elem_printer(), i.e simply
> call cs_etm_decoder__buffer_trace_on().  That way packet handling in cs-etm.c
> doesn't change.  Otherwise see my comments below.
> 
> > CS_ETM_TRACE_ON packet: both of them invokes cs_etm__flush() to generate
> > samples for the previous instructions packet, and in cs_etm__sample() it
> > also needs to generate samples if TRACE_OFF packet is followed by one
> > sequential instructions packet.  This patch also converts the address to
> > 0 for TRACE_OFF packet, this is same with TRACE_ON packet as well.
> > 
> > Signed-off-by: Leo Yan <leo.yan@linaro.org>
> > ---
> >  tools/perf/util/cs-etm-decoder/cs-etm-decoder.c | 10 ++++++++++
> >  tools/perf/util/cs-etm-decoder/cs-etm-decoder.h |  7 ++++---
> >  tools/perf/util/cs-etm.c                        | 15 +++++++++++----
> >  3 files changed, 25 insertions(+), 7 deletions(-)
> > 
> > diff --git a/tools/perf/util/cs-etm-decoder/cs-etm-decoder.c b/tools/perf/util/cs-etm-decoder/cs-etm-decoder.c
> > index 5efb616..9d52727 100644
> > --- a/tools/perf/util/cs-etm-decoder/cs-etm-decoder.c
> > +++ b/tools/perf/util/cs-etm-decoder/cs-etm-decoder.c
> > @@ -369,6 +369,14 @@ cs_etm_decoder__buffer_range(struct cs_etm_decoder *decoder,
> >  }
> >  
> >  static ocsd_datapath_resp_t
> > +cs_etm_decoder__buffer_trace_off(struct cs_etm_decoder *decoder,
> > +				 const uint8_t trace_chan_id)
> > +{
> > +	return cs_etm_decoder__buffer_packet(decoder, trace_chan_id,
> > +					     CS_ETM_TRACE_OFF);
> > +}
> > +
> > +static ocsd_datapath_resp_t
> >  cs_etm_decoder__buffer_trace_on(struct cs_etm_decoder *decoder,
> >  				const uint8_t trace_chan_id)
> >  {
> > @@ -389,6 +397,8 @@ static ocsd_datapath_resp_t cs_etm_decoder__gen_trace_elem_printer(
> >  	case OCSD_GEN_TRC_ELEM_UNKNOWN:
> >  		break;
> >  	case OCSD_GEN_TRC_ELEM_NO_SYNC:
> > +		resp = cs_etm_decoder__buffer_trace_off(decoder,
> > +							trace_chan_id);
> 
> If we want to handle NO_SYNC element types, why introduce a "trace_off"
> function?  Wouldn't it make more sense to call it
> cs_etm_decoder__buffer_no_sync() ?

Will change to cs_etm_decoder__buffer_no_sync().

> >  		decoder->trace_on = false;
> >  		break;
> >  	case OCSD_GEN_TRC_ELEM_TRACE_ON:
> > diff --git a/tools/perf/util/cs-etm-decoder/cs-etm-decoder.h b/tools/perf/util/cs-etm-decoder/cs-etm-decoder.h
> > index 9351bd1..a38c97c 100644
> > --- a/tools/perf/util/cs-etm-decoder/cs-etm-decoder.h
> > +++ b/tools/perf/util/cs-etm-decoder/cs-etm-decoder.h
> > @@ -23,9 +23,10 @@ struct cs_etm_buffer {
> >  };
> >  
> >  enum cs_etm_sample_type {
> > -	CS_ETM_EMPTY = 0,
> > -	CS_ETM_RANGE = 1 << 0,
> > -	CS_ETM_TRACE_ON = 1 << 1,
> > +	CS_ETM_EMPTY		= 0,
> > +	CS_ETM_RANGE		= 1 << 0,
> > +	CS_ETM_TRACE_ON		= 1 << 1,
> > +	CS_ETM_TRACE_OFF	= 1 << 2,
> 
> CS_ETM_NO_SYNC, see above comment.  And please don't use indentation.

Will do this.

> >  };
> >  
> >  enum cs_etm_isa {
> > diff --git a/tools/perf/util/cs-etm.c b/tools/perf/util/cs-etm.c
> > index f4fa877..2a0cef9 100644
> > --- a/tools/perf/util/cs-etm.c
> > +++ b/tools/perf/util/cs-etm.c
> > @@ -517,8 +517,9 @@ static inline int cs_etm__t32_instr_size(struct cs_etm_queue *etmq,
> >  
> >  static inline u64 cs_etm__first_executed_instr(struct cs_etm_packet *packet)
> >  {
> > -	/* Returns 0 for the CS_ETM_TRACE_ON packet */
> > -	if (packet->sample_type == CS_ETM_TRACE_ON)
> > +	/* Returns 0 for TRACE_ON and TRACE_OFF packets */
> > +	if (packet->sample_type == CS_ETM_TRACE_ON ||
> > +	    packet->sample_type == CS_ETM_TRACE_OFF)
> >  		return 0;
> >  
> >  	return packet->start_addr;
> > @@ -527,8 +528,9 @@ static inline u64 cs_etm__first_executed_instr(struct cs_etm_packet *packet)
> >  static inline
> >  u64 cs_etm__last_executed_instr(const struct cs_etm_packet *packet)
> >  {
> > -	/* Returns 0 for the CS_ETM_TRACE_ON packet */
> > -	if (packet->sample_type == CS_ETM_TRACE_ON)
> > +	/* Returns 0 for TRACE_ON and TRACE_OFF packets */
> > +	if (packet->sample_type == CS_ETM_TRACE_ON ||
> > +	    packet->sample_type == CS_ETM_TRACE_OFF)
> >  		return 0;
> >  
> >  	return packet->end_addr - packet->last_instr_size;
> > @@ -930,6 +932,10 @@ static int cs_etm__sample(struct cs_etm_queue *etmq)
> >  		if (etmq->prev_packet->sample_type == CS_ETM_TRACE_ON)
> >  			generate_sample = true;
> >  
> > +		/* Generate sample for tracing off packet */
> > +		if (etmq->prev_packet->sample_type == CS_ETM_TRACE_OFF)
> > +			generate_sample = true;
> > +
> >  		/* Generate sample for branch taken packet */
> >  		if (etmq->prev_packet->sample_type == CS_ETM_RANGE &&
> >  		    etmq->prev_packet->last_instr_taken_branch)
> > @@ -1085,6 +1091,7 @@ static int cs_etm__run_decoder(struct cs_etm_queue *etmq)
> >  					cs_etm__sample(etmq);
> >  					break;
> >  				case CS_ETM_TRACE_ON:
> > +				case CS_ETM_TRACE_OFF:
> >  					/*
> >  					 * Discontinuity in trace, flush
> >  					 * previous branch stack
> > -- 
> > 2.7.4
> > 
