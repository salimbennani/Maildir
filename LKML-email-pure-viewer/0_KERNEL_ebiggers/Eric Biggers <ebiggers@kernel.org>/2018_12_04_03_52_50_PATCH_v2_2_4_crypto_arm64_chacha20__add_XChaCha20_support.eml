Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 04 Dec 2018 18:29:08 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 96FFD580117;
	Mon,  3 Dec 2018 19:56:18 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 03 Dec 2018 19:56:17 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AaMyKYx8jqiMZaf9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1uoUIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CRWRPQNtfWSJCDI27?=
 =?us-ascii?q?bYQPAeUOM+lDr4nlpVYDtgeyCAq2Ce/z0DJEmmP60Ksn2OohCwHG2wkgEsoBvn?=
 =?us-ascii?q?TOrdX6KLoZXP20zKnHwjXMcelW2Szg44XPbB8uuvCMXb1/ccXP00kvDBjIjlaO?=
 =?us-ascii?q?poz/OTOayOANv3Kc7+p6WuKikmgqoBx/rDiow8cjkIjJhoQNx1/Y9SV22po6Jd?=
 =?us-ascii?q?2iR0JlfdKoCZ1QuD+dN4twW88tX2ZouDwkxbEcop60Zy4Hw4kkyR7Hc/GLbZSE?=
 =?us-ascii?q?7xb5WOqMLzp0mmhpdK+8ihqu60Sty+/xWtGq3FtFtCZJjNfBumoQ2xHc9MSLUP?=
 =?us-ascii?q?hw80G80jiVzQ/T8PtLIUUsmKrbNZEhxrkwm4INsUTMACD2gl/6jKyIeUU+/Oin?=
 =?us-ascii?q?9eDnbq/hpp+GOI94kgD+MqIwlcyjGek0LBQCUmyB9eih2rDv41f1TKhJg/EqiK?=
 =?us-ascii?q?XUsZLXKdwepqGjAg9V1ogj6wy4DzejyNkYmXgHLFRYeBOIloTpOE/BIOr+Dfih?=
 =?us-ascii?q?h1SgiTBrxv7APrL/GJXANWbDkLj/crZn8UJcyxQ8zcpZ551KDrENOvXzWlX+tN?=
 =?us-ascii?q?DAFB82LxS0w/r7CNV6zo4eXWOPAqyHP6/Ivl6I+/kiI+2NZI8TpTb8JOIp5//o?=
 =?us-ascii?q?jX8lh1AdebOl0ocQaHC9Bv5mOVmWYWLwgtcdFmcHpgo+Q/briF2eSzFTYGy+X6?=
 =?us-ascii?q?Ih5j4hDoKmApzORoSsgLyHwSe6EYdaZmFAClCQD3joc5+IVOsLaCKXOsVhiCAL?=
 =?us-ascii?q?VaC9S4890hGjrA36y715IebO+S0YspTj1N5y5+DIkREy9Dp0D9mS0m2XTmF0mH?=
 =?us-ascii?q?8ISCEy3KxlvUN9zVKD27Big/NEDdxT++9JUgAiOJHG1Ox6C9fyWgHbcteTUlmm?=
 =?us-ascii?q?QM6rATUwTtI33t8PbFxxG9SkjhDfwSWqB6UZmKCMBJwx6qjcxWT+J95hy3ba06?=
 =?us-ascii?q?ksl1omTdFJNWG8gq5/9hLcB4jGk0iCk6aqdKIc3DPC9WuZzGqOul1YXxB0Uanf?=
 =?us-ascii?q?QX8fYU7Wp8zj5kzeV7+uFagnMgxZxMGfMKRKdMPmgU9GRPj5PtTeeHy+m2G3CR?=
 =?us-ascii?q?aMxbOMaY7qdn4Z3CXcDkgEjg8S8WyHNQg4GieuvWbeACZyGlLoZkPm6fN+p2+j?=
 =?us-ascii?q?Tk8o0wGKaFVs2Kev9R4Lm/OQUfMT0agCuCc6tTp0Gk2w39bXC9qGugpgc79QYd?=
 =?us-ascii?q?I74Fdby23ZsxZxMYCnL6BnnlQeaRh4v1vy1xVrDYVNidQqrHIvzAp1NaKY0FNA?=
 =?us-ascii?q?eymE3ZzqPb3XMG3y/BGpa67ZwVze1NeW+qES6PU3sVnjvQepFlY8/HVjydVaz3?=
 =?us-ascii?q?yc5pDSBgoITZ3xSlo39wR9p7zCeCY9453b1HJyPqi0qDPNwM8pC/Y/xRamfNdf?=
 =?us-ascii?q?N72EGRT2E80bAciuNeMrl0KobhICIOBd6qo0M9m6ePuB3a6hJPxgky6+jWRb/I?=
 =?us-ascii?q?B91VqB9iphSuLSw5kJ2fCZ3gudWDf6g1esqcT3mYFCZTEPEWuz0ynkBIhNZqJs?=
 =?us-ascii?q?eYYHE3uhI8qyxt9mnZ7iR2ZY9EK/B1MBwMKpYxuSYEDn0g1KyEsXpmarmS2mwD?=
 =?us-ascii?q?xukjElt7aQ0zbKw+v/ahUHIGlLRG95gFfoIIi0ic0aXUeyYwgokhul+Vj1x6xB?=
 =?us-ascii?q?qKtjKGnTRF9CfzLqIGF6Tquwqr2CbtZP6ZMpqylWUP6wYUuHSr77uBYa1yLjH2?=
 =?us-ascii?q?1DxDE0bT2qu5P5nwBkh2KZNnp8sH3ZecRozxfF+NPcXeJR3iYBRCRgiznYHEK8?=
 =?us-ascii?q?P9qq/dWTjZvDqfqxV2GiVp1Sdynk04WAuTC/5W1rBx2/gv+ylsfmEQg8zS/0yd?=
 =?us-ascii?q?1qWT/Uoxb7Z4nhz766Pv5/fkl0GF/87NJ3G4FknYs3np0Q23kahpOO8HoDkGfz?=
 =?us-ascii?q?N8hb2K3kYHoMQz4L38Da4Az/1EJ/KXKJwprzVm+Bzct5e9m6fmQW1zo+789QCa?=
 =?us-ascii?q?eY9rxEnTZvrVq+ogLcevx9njYbyfsz538WmeAJuAwxziqDBrAeB1VXPSvplx6Q?=
 =?us-ascii?q?9dCxsL1XZHqzcbi3zEd+mNGhDLKYrQ1GVnf2ZIwiHTNu4cVlK13Dzmfz6o7/dd?=
 =?us-ascii?q?nUbNITsACUkhjag+hULpIxiuQFhS59NW3hun0lzvYxjQZy0pGioIiHN2Jt8bql?=
 =?us-ascii?q?Ah5fMz35fcIS9SvrjaZDhcaWxIGvE45lGjUKWpvoUP2pHCgTtfThKwaBDjk8pm?=
 =?us-ascii?q?2HFrrYGA+V8F1moG7XE5C3K3GXI2EUws54SxmaIExfnRoYXDEnnpMiEgCqxcrh?=
 =?us-ascii?q?cFp25zwL5174rAdMxfxsNxXlTmjfowKoYC8uSJeDNBpW8h1C50DNPMyc9O1zGj?=
 =?us-ascii?q?9X/oa7oAyRMGCbZBlIDWIUWkyCHV/jJaKj5d3B8+ieG+q/IOHCYbSIqexCSfiI?=
 =?us-ascii?q?wYij3Zdh/zaJLs+PJGVtD+Un2kpfWnB0A8TYmzISSywOiiLCdcibqA2n+i1wqM?=
 =?us-ascii?q?C//+/mWAbu5YuJFrtTPs9j+xGwgaefKeGQgDx1Jipf1pMJ3XXI0qQQ3EYOiyFy?=
 =?us-ascii?q?cDmgCbQAujDMTKLTma9XDgQXayBpNMtP4KIzwBNNOdPAit7u0r54j/g1C0pKVF?=
 =?us-ascii?q?D7m8GpY9AKLH+5NF/dGEmLM7GGLyXRw87reaO8VaFQjOJMuhKqpDaUCFXjMSqD?=
 =?us-ascii?q?ljXzUxCvMPpBjCWaPBxYpYG8fQxhCWnlTNL6dBK7NMV7giExwb0xnnnKL3ITMS?=
 =?us-ascii?q?Bgc0NRqb2d9T9YgvR6G2Bb8nVpN/WLmyaH4OneMZsWtfprAiJpl+NV+ng6yr1V?=
 =?us-ascii?q?7D1aS/xxgifdstluo1S+mOmV1jVnSAZOqipMhI+TvURtI6PZ9pxBWXbC5B0M7G?=
 =?us-ascii?q?WQBA4Mp9tqEdDvv6FQyt7SlKP8MjtC8tTU/dcCCMjQMs6ILH0hMR+6UALTWQ8E?=
 =?us-ascii?q?SyO7cGrFllRBl9mM+XCP6Js3sJ7hnNwJULAIekYyE6Y3EEVuVPYDL5h6RChsxb?=
 =?us-ascii?q?ORjcEH6GClhBrcXsNXutbATP3EUqanEyqQkbQRP0hA+rj/N4lGc9Sjg0E=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAAAw+gVch0O0hNFjGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGCaYECJ4wRX4swgg0UlzSBJANMFBgDEAGICSI0CQ0?=
 =?us-ascii?q?BAwEBAQEBAQIBEwEBAQoLCQgpIwyCNiQBgmIDAwECJAsBDQEBNwEFCQEBHzEDV?=
 =?us-ascii?q?BkFgxwBggEFpBOBbDOCdgEBBYcuCIdtgm0mfh4XgUA/gRGNbpAskBYJkTELGJE?=
 =?us-ascii?q?mgnuNeod4gUZsgSEzGggoCIMnCYISCQMXiCE9hWAfMoEEAQEBiwEBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ABAAAw+gVch0O0hNFjGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGCaYECJ4wRX4swgg0UlzSBJANMFBgDEAGICSI0CQ0BAwEBAQEBAQIBE?=
 =?us-ascii?q?wEBAQoLCQgpIwyCNiQBgmIDAwECJAsBDQEBNwEFCQEBHzEDVBkFgxwBggEFpBO?=
 =?us-ascii?q?BbDOCdgEBBYcuCIdtgm0mfh4XgUA/gRGNbpAskBYJkTELGJEmgnuNeod4gUZsg?=
 =?us-ascii?q?SEzGggoCIMnCYISCQMXiCE9hWAfMoEEAQEBiwEBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,312,1539673200"; 
   d="scan'208";a="54387447"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 03 Dec 2018 19:56:16 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726104AbeLDD4N (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 3 Dec 2018 22:56:13 -0500
Received: from mail.kernel.org ([198.145.29.99]:55304 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1725988AbeLDD4J (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 3 Dec 2018 22:56:09 -0500
Received: from sol.localdomain (c-24-23-142-8.hsd1.ca.comcast.net [24.23.142.8])
        (using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 37CF7214C1;
        Tue,  4 Dec 2018 03:56:08 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1543895768;
        bh=4q5pDYK7J1eWYD984RIQP1w41XRnjIsevrsv2GyPqoo=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=EvCX2AysJiIB3lPVva3kcIGTJyRgX4PztTON5xo2IapDvNspfkvIk6L+7bv8mohJP
         RbR0Tcp7KzKJBeCnx6CsJarkXs33JbhexLuS0CyczLKQaFz2caT0AsiIRoTAm0IQjl
         XVHjJyjKD224welZLFAzMUVJkjHayN6P5S8HPp1E=
From: Eric Biggers <ebiggers@kernel.org>
To: linux-crypto@vger.kernel.org
Cc: Paul Crowley <paulcrowley@google.com>,
        Ard Biesheuvel <ard.biesheuvel@linaro.org>,
        "Jason A . Donenfeld" <Jason@zx2c4.com>,
        linux-arm-kernel@lists.infradead.org, linux-kernel@vger.kernel.org
Subject: [PATCH v2 2/4] crypto: arm64/chacha20 - add XChaCha20 support
Date: Mon,  3 Dec 2018 19:52:50 -0800
Message-Id: <20181204035252.14853-3-ebiggers@kernel.org>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <20181204035252.14853-1-ebiggers@kernel.org>
References: <20181204035252.14853-1-ebiggers@kernel.org>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From: Eric Biggers <ebiggers@google.com>

Add an XChaCha20 implementation that is hooked up to the ARM64 NEON
implementation of ChaCha20.  This can be used by Adiantum.

A NEON implementation of single-block HChaCha20 is also added so that
XChaCha20 can use it rather than the generic implementation.  This
required refactoring the ChaCha20 permutation into its own function.

Signed-off-by: Eric Biggers <ebiggers@google.com>
---
 arch/arm64/crypto/Kconfig              |   2 +-
 arch/arm64/crypto/chacha20-neon-core.S |  65 +++++++++++-----
 arch/arm64/crypto/chacha20-neon-glue.c | 101 +++++++++++++++++++------
 3 files changed, 125 insertions(+), 43 deletions(-)

diff --git a/arch/arm64/crypto/Kconfig b/arch/arm64/crypto/Kconfig
index 3f5aeb786192..d54ddb8468ef 100644
--- a/arch/arm64/crypto/Kconfig
+++ b/arch/arm64/crypto/Kconfig
@@ -101,7 +101,7 @@ config CRYPTO_AES_ARM64_NEON_BLK
 	select CRYPTO_SIMD
 
 config CRYPTO_CHACHA20_NEON
-	tristate "NEON accelerated ChaCha20 symmetric cipher"
+	tristate "ChaCha20 and XChaCha20 stream ciphers using NEON instructions"
 	depends on KERNEL_MODE_NEON
 	select CRYPTO_BLKCIPHER
 	select CRYPTO_CHACHA20
diff --git a/arch/arm64/crypto/chacha20-neon-core.S b/arch/arm64/crypto/chacha20-neon-core.S
index 13c85e272c2a..0571e45a1a0a 100644
--- a/arch/arm64/crypto/chacha20-neon-core.S
+++ b/arch/arm64/crypto/chacha20-neon-core.S
@@ -23,25 +23,20 @@
 	.text
 	.align		6
 
-ENTRY(chacha20_block_xor_neon)
-	// x0: Input state matrix, s
-	// x1: 1 data block output, o
-	// x2: 1 data block input, i
-
-	//
-	// This function encrypts one ChaCha20 block by loading the state matrix
-	// in four NEON registers. It performs matrix operation on four words in
-	// parallel, but requires shuffling to rearrange the words after each
-	// round.
-	//
-
-	// x0..3 = s0..3
-	adr		x3, ROT8
-	ld1		{v0.4s-v3.4s}, [x0]
-	ld1		{v8.4s-v11.4s}, [x0]
-	ld1		{v12.4s}, [x3]
+/*
+ * chacha20_permute - permute one block
+ *
+ * Permute one 64-byte block where the state matrix is stored in the four NEON
+ * registers v0-v3.  It performs matrix operations on four words in parallel,
+ * but requires shuffling to rearrange the words after each round.
+ *
+ * Clobbers: x3, x10, v4, v12
+ */
+chacha20_permute:
 
 	mov		x3, #10
+	adr		x10, ROT8
+	ld1		{v12.4s}, [x10]
 
 .Ldoubleround:
 	// x0 += x1, x3 = rotl32(x3 ^ x0, 16)
@@ -105,6 +100,23 @@ ENTRY(chacha20_block_xor_neon)
 	subs		x3, x3, #1
 	b.ne		.Ldoubleround
 
+	ret
+ENDPROC(chacha20_permute)
+
+ENTRY(chacha20_block_xor_neon)
+	// x0: Input state matrix, s
+	// x1: 1 data block output, o
+	// x2: 1 data block input, i
+
+	stp		x29, x30, [sp, #-16]!
+	mov		x29, sp
+
+	// x0..3 = s0..3
+	ld1		{v0.4s-v3.4s}, [x0]
+	ld1		{v8.4s-v11.4s}, [x0]
+
+	bl		chacha20_permute
+
 	ld1		{v4.16b-v7.16b}, [x2]
 
 	// o0 = i0 ^ (x0 + s0)
@@ -125,9 +137,28 @@ ENTRY(chacha20_block_xor_neon)
 
 	st1		{v0.16b-v3.16b}, [x1]
 
+	ldp		x29, x30, [sp], #16
 	ret
 ENDPROC(chacha20_block_xor_neon)
 
+ENTRY(hchacha20_block_neon)
+	// x0: Input state matrix, s
+	// x1: output (8 32-bit words)
+
+	stp		x29, x30, [sp, #-16]!
+	mov		x29, sp
+
+	ld1		{v0.4s-v3.4s}, [x0]
+
+	bl		chacha20_permute
+
+	st1		{v0.16b}, [x1], #16
+	st1		{v3.16b}, [x1]
+
+	ldp		x29, x30, [sp], #16
+	ret
+ENDPROC(hchacha20_block_neon)
+
 	.align		6
 ENTRY(chacha20_4block_xor_neon)
 	// x0: Input state matrix, s
diff --git a/arch/arm64/crypto/chacha20-neon-glue.c b/arch/arm64/crypto/chacha20-neon-glue.c
index 96e0cfb8c3f5..a5b9cbc0c4de 100644
--- a/arch/arm64/crypto/chacha20-neon-glue.c
+++ b/arch/arm64/crypto/chacha20-neon-glue.c
@@ -30,6 +30,7 @@
 
 asmlinkage void chacha20_block_xor_neon(u32 *state, u8 *dst, const u8 *src);
 asmlinkage void chacha20_4block_xor_neon(u32 *state, u8 *dst, const u8 *src);
+asmlinkage void hchacha20_block_neon(const u32 *state, u32 *out);
 
 static void chacha20_doneon(u32 *state, u8 *dst, const u8 *src,
 			    unsigned int bytes)
@@ -65,20 +66,16 @@ static void chacha20_doneon(u32 *state, u8 *dst, const u8 *src,
 	kernel_neon_end();
 }
 
-static int chacha20_neon(struct skcipher_request *req)
+static int chacha20_neon_stream_xor(struct skcipher_request *req,
+				    struct chacha_ctx *ctx, u8 *iv)
 {
-	struct crypto_skcipher *tfm = crypto_skcipher_reqtfm(req);
-	struct chacha_ctx *ctx = crypto_skcipher_ctx(tfm);
 	struct skcipher_walk walk;
 	u32 state[16];
 	int err;
 
-	if (!may_use_simd() || req->cryptlen <= CHACHA_BLOCK_SIZE)
-		return crypto_chacha_crypt(req);
-
 	err = skcipher_walk_virt(&walk, req, false);
 
-	crypto_chacha_init(state, ctx, walk.iv);
+	crypto_chacha_init(state, ctx, iv);
 
 	while (walk.nbytes > 0) {
 		unsigned int nbytes = walk.nbytes;
@@ -94,22 +91,73 @@ static int chacha20_neon(struct skcipher_request *req)
 	return err;
 }
 
-static struct skcipher_alg alg = {
-	.base.cra_name		= "chacha20",
-	.base.cra_driver_name	= "chacha20-neon",
-	.base.cra_priority	= 300,
-	.base.cra_blocksize	= 1,
-	.base.cra_ctxsize	= sizeof(struct chacha_ctx),
-	.base.cra_module	= THIS_MODULE,
-
-	.min_keysize		= CHACHA_KEY_SIZE,
-	.max_keysize		= CHACHA_KEY_SIZE,
-	.ivsize			= CHACHA_IV_SIZE,
-	.chunksize		= CHACHA_BLOCK_SIZE,
-	.walksize		= 4 * CHACHA_BLOCK_SIZE,
-	.setkey			= crypto_chacha20_setkey,
-	.encrypt		= chacha20_neon,
-	.decrypt		= chacha20_neon,
+static int chacha20_neon(struct skcipher_request *req)
+{
+	struct crypto_skcipher *tfm = crypto_skcipher_reqtfm(req);
+	struct chacha_ctx *ctx = crypto_skcipher_ctx(tfm);
+
+	if (req->cryptlen <= CHACHA_BLOCK_SIZE || !may_use_simd())
+		return crypto_chacha_crypt(req);
+
+	return chacha20_neon_stream_xor(req, ctx, req->iv);
+}
+
+static int xchacha20_neon(struct skcipher_request *req)
+{
+	struct crypto_skcipher *tfm = crypto_skcipher_reqtfm(req);
+	struct chacha_ctx *ctx = crypto_skcipher_ctx(tfm);
+	struct chacha_ctx subctx;
+	u32 state[16];
+	u8 real_iv[16];
+
+	if (req->cryptlen <= CHACHA_BLOCK_SIZE || !may_use_simd())
+		return crypto_xchacha_crypt(req);
+
+	crypto_chacha_init(state, ctx, req->iv);
+
+	kernel_neon_begin();
+	hchacha20_block_neon(state, subctx.key);
+	kernel_neon_end();
+
+	memcpy(&real_iv[0], req->iv + 24, 8);
+	memcpy(&real_iv[8], req->iv + 16, 8);
+	return chacha20_neon_stream_xor(req, &subctx, real_iv);
+}
+
+static struct skcipher_alg algs[] = {
+	{
+		.base.cra_name		= "chacha20",
+		.base.cra_driver_name	= "chacha20-neon",
+		.base.cra_priority	= 300,
+		.base.cra_blocksize	= 1,
+		.base.cra_ctxsize	= sizeof(struct chacha_ctx),
+		.base.cra_module	= THIS_MODULE,
+
+		.min_keysize		= CHACHA_KEY_SIZE,
+		.max_keysize		= CHACHA_KEY_SIZE,
+		.ivsize			= CHACHA_IV_SIZE,
+		.chunksize		= CHACHA_BLOCK_SIZE,
+		.walksize		= 4 * CHACHA_BLOCK_SIZE,
+		.setkey			= crypto_chacha20_setkey,
+		.encrypt		= chacha20_neon,
+		.decrypt		= chacha20_neon,
+	}, {
+		.base.cra_name		= "xchacha20",
+		.base.cra_driver_name	= "xchacha20-neon",
+		.base.cra_priority	= 300,
+		.base.cra_blocksize	= 1,
+		.base.cra_ctxsize	= sizeof(struct chacha_ctx),
+		.base.cra_module	= THIS_MODULE,
+
+		.min_keysize		= CHACHA_KEY_SIZE,
+		.max_keysize		= CHACHA_KEY_SIZE,
+		.ivsize			= XCHACHA_IV_SIZE,
+		.chunksize		= CHACHA_BLOCK_SIZE,
+		.walksize		= 4 * CHACHA_BLOCK_SIZE,
+		.setkey			= crypto_chacha20_setkey,
+		.encrypt		= xchacha20_neon,
+		.decrypt		= xchacha20_neon,
+	}
 };
 
 static int __init chacha20_simd_mod_init(void)
@@ -117,12 +165,12 @@ static int __init chacha20_simd_mod_init(void)
 	if (!(elf_hwcap & HWCAP_ASIMD))
 		return -ENODEV;
 
-	return crypto_register_skcipher(&alg);
+	return crypto_register_skciphers(algs, ARRAY_SIZE(algs));
 }
 
 static void __exit chacha20_simd_mod_fini(void)
 {
-	crypto_unregister_skcipher(&alg);
+	crypto_unregister_skciphers(algs, ARRAY_SIZE(algs));
 }
 
 module_init(chacha20_simd_mod_init);
@@ -131,3 +179,6 @@ module_exit(chacha20_simd_mod_fini);
 MODULE_AUTHOR("Ard Biesheuvel <ard.biesheuvel@linaro.org>");
 MODULE_LICENSE("GPL v2");
 MODULE_ALIAS_CRYPTO("chacha20");
+MODULE_ALIAS_CRYPTO("chacha20-neon");
+MODULE_ALIAS_CRYPTO("xchacha20");
+MODULE_ALIAS_CRYPTO("xchacha20-neon");
-- 
2.19.2

