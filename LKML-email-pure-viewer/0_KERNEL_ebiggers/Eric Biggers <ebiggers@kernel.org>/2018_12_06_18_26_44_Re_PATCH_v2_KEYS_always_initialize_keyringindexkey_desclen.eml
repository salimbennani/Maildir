Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:51:44 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id E1647580375;
	Thu,  6 Dec 2018 10:27:51 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 10:27:51 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A3gOBDRRLCtxJoCHNaQaaRkvXONpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64YBOOt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZDI2y?=
 =?us-ascii?q?b5UBAfcCM+ZWoIbyu0YBohmwCgm3HOPiyCRFhmPq0aAgz+gtDRvL0BImEtkTsH?=
 =?us-ascii?q?rUttL1NKIKXO661qnIzCnMZO5L1Df854jIfQ4uoeuXXbltdsfe11IgFwLKjlWf?=
 =?us-ascii?q?t4PlJSiV2/8Os2eF9epgU/ygi2o9pwF2uDivyd4hh4/UjYwW0lDJ7Tt1zJoxKN?=
 =?us-ascii?q?GiVUJ2b8CoHIFNuyyZK4d6WMIvTmNwtCon1rELtoS3cDUExZg53RLTduaLfouI?=
 =?us-ascii?q?7x/lSe2fOy13hGh/d7K6nxuy8Vavyun7VsSszlZKoTRKksPWunAOyRPT8M6HRe?=
 =?us-ascii?q?V5/ku73jaPzQ/T5vlFIUAyi6XbN4YszqAsmpcXq0jPAyH7lFvsgKOLdUgo5vKk?=
 =?us-ascii?q?5uXlb7n+o5+TLY50igXwMqQ0ncy/BPw1MgwPX2id5OS926Tv/U7nT7VQiP05jK?=
 =?us-ascii?q?3ZvIndJcUVoK62HRVV35096xawETimys4UnXoZI1JffhKIkYzpN0vJIPDiAvez?=
 =?us-ascii?q?m06snytzx/DaIr3hBY3ALnzCkLfiY7lx8UFdyBcowNBb5pJUDKwBIf3pVk/wst?=
 =?us-ascii?q?zYEgE2Mwiuz+n7D9V905sUWXiTDa+BLKPSrViI6/ovI+aWZY8VpCzyK/8/6/7u?=
 =?us-ascii?q?kH82g1kdfaay0JsTaXC4GOlmIkqDbXrthNcBDXkFvg4kQOP2j12CVCZZZ2yuUK?=
 =?us-ascii?q?Ik+jE7FIWmAJ/BRoCqnrONxiS7HppQZmBADVCBCnPod4SCW/cRZyOeOM5hkjoY?=
 =?us-ascii?q?Vbe/T48tzw2htAj/y7B/NOrb5jUYtY7/1Nhy/+Dcjwoy9TxzD8SeyW2NVXt7nm?=
 =?us-ascii?q?ETSj8y3aB/p1F9y1iZ3ah5hfxYCcJc5/dTXggmMp7cyvRwC8ruVQLZYteJVFGm?=
 =?us-ascii?q?T82lAT4rSNI92dsOY0dnFNWkgRDOxC6qA74Tl7yWC5046KPc337tJ8ljz3bKzr?=
 =?us-ascii?q?Uuj14jQsFXL22pmrZ/9xTPB47Oi0iWiryldboC0yLX9GeM12yOvFpGXw52VqnF?=
 =?us-ascii?q?WXMfZk7Srdni4kPCTrmuCakoMwdbyM6CLLdKZcPtjVlcWPjjP9HeaXqrm2isHR?=
 =?us-ascii?q?aI2q+MbI3ydmoAxirdFlYLnxoT/XmcMwg+HTmuo2TFATxqFFLvZV7s8OZkpHO6?=
 =?us-ascii?q?SE800x+Fb0l727Wp/R4VgOSWS+kP0bIcpCchtzJ0EU6h39LXDtqAoBZhfKVcYN?=
 =?us-ascii?q?8n/FdLz2XZtxZ5PpyhKaBiiUUTcwB2v0PoyhV2BZ9MkcksrHM20gVyLbiU309G?=
 =?us-ascii?q?dzOdxZrwIKHYKnHu/BCzbK7bwkvR0NKI9aYA9vs5q0/vsxq0FkU/6Xpn1dpV03?=
 =?us-ascii?q?yC5pjRCAoSUJTxUls49hRgprHaZDU96J3Q1XF2Laa0tTrC0cozBOQ50hagY8tf?=
 =?us-ascii?q?MKScGQ7yDs0WHdShJPYrmlipdB0EOu9S+bUwP8OncfuGxaGqMPxhnDKgkWRI/o?=
 =?us-ascii?q?R93liQ+Cp7T+7Cx4wFzO2A3gubSzf8i0+sstr2mY9Yfz4SBHewyS/+CI5XeKJy?=
 =?us-ascii?q?Z4cLBX6yLMKtwtVxmoDiW2Rf9F6lHF4G3M6peRyPb13yxwFQ1EIXoWC5liu81T?=
 =?us-ascii?q?B7jzYprq+H1izU3+vibAYHOnJMRGR6jVbsIJK4jtAAUEizcggpkgCo5UL7x6hd?=
 =?us-ascii?q?uaR+IHPfQUZOfyjqMW5iVrG8uaaFY85K8JkoqzlYUPygYVCGTb7wuxka3Dn5H2?=
 =?us-ascii?q?tdxzA7cCumuo7jkBx5i2KdLXBzo2TfecxrwRff5drcReNe3zYcRSl4jyXXCUa4?=
 =?us-ascii?q?P9Wz4dqUkJLDuPikV229Tp1TbTXrzYSYuSq7/2JqBgezn/Kymt3hCgU61S7719?=
 =?us-ascii?q?93VSTHthr8Y4/r17ikPuJjZEVnGFj8689iEIFkjoQwnI0Q2WQdhpiN/noIi2bz?=
 =?us-ascii?q?Pc9b2aLjdnUNQzELzsXR4Ajk3k1jM32Iy5j4VnWb3stued26bnkK1SI66sBAEL?=
 =?us-ascii?q?2U46BcnStpvlq4qhrcYf18njce0/Qi8nAbjP8SuAox0CqdGKsdEldCPSzjjBmI?=
 =?us-ascii?q?69G+rKNKZGega7Sw1Ux+ncy/A7GGuA1TRHH5epI6Fy9q8sp/KE7M0GH06oz8ZN?=
 =?us-ascii?q?nQatcTugeVkhjaiehVNYkxluELhSd8PWL9vHsly/M0jBB03JG6upSHJHtp/K6j?=
 =?us-ascii?q?HhFYMTj1bdsJ+j7xlaZegtqW34e3E5p6ADoLW5/oTe+yHDIWqPTqLAKOEDw6qn?=
 =?us-ascii?q?eGFrvTBw6f6EF6r33RF5CnLW2YJH4czd96XhmSOFRfgBwIXDU9hpM5FBqlxMn/?=
 =?us-ascii?q?f0di/DwR+kT0qhhRyuJrKhn/VH3QpByzZzcwSZifKgdW7w5Y60fUN8ye8vx8Hy?=
 =?us-ascii?q?VC8pK9qwyNL3SRZx5UAmERRkyEG1fjM6Gu5NnH7uiYH/e+IOHIYbmUsuxeUPGI?=
 =?us-ascii?q?xZ2034ti/jaMMNiPP3Z4A/063EpDQW52G8DDlzoTTCwXkjrHb9SHqxek5i13ss?=
 =?us-ascii?q?e//ezrWA3x5IuPCLhSMdR19xC1m6eDMOGQizhjKTZFzZMB3nvIyLkZ3F4PhCBi?=
 =?us-ascii?q?bTitEbIctSHTSKLcgLNYDxkeaylrLstH87o83hVROc7ckt76zKN4geUvC1hbVV?=
 =?us-ascii?q?3tgMWpZc0RLmG5NVPHAluLNbucKT3KxcH3fb2zSblKgOpIsB2wvC6RE1X/MTSb?=
 =?us-ascii?q?iznpSxevPPlQjCGaORxSop2yfgxxBmjjUt3mbAa2MNt2jT0w3L01iWnGNW8aMT?=
 =?us-ascii?q?hgbUxNqqec4j9fgvV6A2ZB9GZqLfGYmyaF6OnVMpYXvuFtAiRxluJa5mw1yrpV?=
 =?us-ascii?q?7C5eQvx1lzDfrtpvo1Ggj+mOxSBrUBtIqjZXmo2LuV9uNrne9plFCj74+0cO4H?=
 =?us-ascii?q?SKChIFvPN7BdD1/aNd0N7CkOT0MjgGu/7d48oQT+jTN8+DNGFpZRbpHyHZCA8e?=
 =?us-ascii?q?ZSSmOWHWmwpWl/TEpVOPqZ1vh4Ltk9IkS7BUWUYuXqcXAEVqE9EYO790UykinL?=
 =?us-ascii?q?rdi9QHsynt5CLNTdlX68iUHsmZBu/ifXPA1eFJ?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AHAACwaAlch0O0hNFkGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBgmmBAieME4wPgg0UkkGEeYEkA0wUGAMQAYd?=
 =?us-ascii?q?SBSI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmEBAQEBAwECJBMGAQE3A?=
 =?us-ascii?q?QUJAQEKCwoDCQ0BBRIDDAUpIAESBYMcAYIBBaUngWwzgnYBAQWHJQiLA4EcF4F?=
 =?us-ascii?q?AP4ERgxKFSQKCa4ImkDWQLAmHBIZHg3ALGJE2LIhij36BRmyBITMaCCgIbAaCN?=
 =?us-ascii?q?QmCEgwXiF6FYB8ygQQBAQEOA4deDReCJwEB?=
X-IPAS-Result: =?us-ascii?q?A0AHAACwaAlch0O0hNFkGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBgmmBAieME4wPgg0UkkGEeYEkA0wUGAMQAYdSBSI0CQ0BAwEBA?=
 =?us-ascii?q?QEBAQIBEwEBAQgNCQgpIwyCNiQBgmEBAQEBAwECJBMGAQE3AQUJAQEKCwoDCQ0?=
 =?us-ascii?q?BBRIDDAUpIAESBYMcAYIBBaUngWwzgnYBAQWHJQiLA4EcF4FAP4ERgxKFSQKCa?=
 =?us-ascii?q?4ImkDWQLAmHBIZHg3ALGJE2LIhij36BRmyBITMaCCgIbAaCNQmCEgwXiF6FYB8?=
 =?us-ascii?q?ygQQBAQEOA4deDReCJwEB?=
X-IronPort-AV: E=Sophos;i="5.56,323,1539673200"; 
   d="scan'208";a="55232275"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 06 Dec 2018 10:26:50 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726083AbeLFS0s (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 6 Dec 2018 13:26:48 -0500
Received: from mail.kernel.org ([198.145.29.99]:58794 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726035AbeLFS0s (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 6 Dec 2018 13:26:48 -0500
Received: from gmail.com (unknown [104.132.1.85])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 3D61020892;
        Thu,  6 Dec 2018 18:26:46 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1544120806;
        bh=p4Z8Z7b5X2ovRh4clK0IoLz45oV6YqmfXPdNaDaia0c=;
        h=Date:From:To:Cc:Subject:References:In-Reply-To:From;
        b=ATxWtf2YodOhuHUnrQ7PJ5rlfcx2EcDvPo3v3G9VPZZafvr6o2AxPKeM63lOsLVjB
         mjb0Qwf8mroMXCZ4gqvcACcTsKlteSHDj8kLdVSPLFC0iSrAsQzjKn6dgZQ7qhUmQg
         73e/CPz+bVzd8VYPhsjh5rP9S7GpXR1/Lu9HxT4E=
Date: Thu, 6 Dec 2018 10:26:44 -0800
From: Eric Biggers <ebiggers@kernel.org>
To: keyrings@vger.kernel.org, David Howells <dhowells@redhat.com>
Cc: linux-security-module@vger.kernel.org,
        linux-kernel@vger.kernel.org, syzkaller-bugs@googlegroups.com
Subject: Re: [PATCH v2] KEYS: always initialize keyring_index_key::desc_len
Message-ID: <20181206182644.GB90507@gmail.com>
References: <000000000000a722550577796543@google.com>
 <20181103015854.7380-1-ebiggers@kernel.org>
 <20181128231940.GB131170@gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181128231940.GB131170@gmail.com>
User-Agent: Mutt/1.10.1 (2018-07-13)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Wed, Nov 28, 2018 at 03:19:41PM -0800, Eric Biggers wrote:
> On Fri, Nov 02, 2018 at 06:58:54PM -0700, Eric Biggers wrote:
> > From: Eric Biggers <ebiggers@google.com>
> > 
> > syzbot hit the 'BUG_ON(index_key->desc_len == 0);' in __key_link_begin()
> > called from construct_alloc_key() during sys_request_key(), because the
> > length of the key description was never calculated.
> > 
> > The problem is that we rely on ->desc_len being initialized by
> > search_process_keyrings(), specifically by search_nested_keyrings().
> > But, if the process isn't subscribed to any keyrings that never happens.
> > 
> > Fix it by always initializing keyring_index_key::desc_len as soon as the
> > description is set, like we already do in some places.
> > 
> > The following program reproduces the BUG_ON() when it's run as root and
> > no session keyring has been installed.  If it doesn't work, try removing
> > pam_keyinit.so from /etc/pam.d/login and rebooting.
> > 
> >     #include <stdlib.h>
> >     #include <unistd.h>
> >     #include <keyutils.h>
> > 
> >     int main(void)
> >     {
> >             int id = add_key("keyring", "syz", NULL, 0, KEY_SPEC_USER_KEYRING);
> > 
> >             keyctl_setperm(id, KEY_OTH_WRITE);
> >             setreuid(5000, 5000);
> >             request_key("user", "desc", "", id);
> >     }
> > 
> > Reported-by: syzbot+ec24e95ea483de0a24da@syzkaller.appspotmail.com
> > Fixes: b2a4df200d57 ("KEYS: Expand the capacity of a keyring")
> > Cc: <stable@vger.kernel.org> # v3.13+
> > Signed-off-by: Eric Biggers <ebiggers@google.com>
> > ---
> > 
> > v2: In proc_keys_show(), assign index_key directly
> > 
> >  security/keys/keyring.c          | 4 +---
> >  security/keys/proc.c             | 3 +--
> >  security/keys/request_key.c      | 1 +
> >  security/keys/request_key_auth.c | 2 +-
> >  4 files changed, 4 insertions(+), 6 deletions(-)
> > 
> > diff --git a/security/keys/keyring.c b/security/keys/keyring.c
> > index 41bcf57e96f21..99a55145ddcd2 100644
> > --- a/security/keys/keyring.c
> > +++ b/security/keys/keyring.c
> > @@ -661,9 +661,6 @@ static bool search_nested_keyrings(struct key *keyring,
> >  	BUG_ON((ctx->flags & STATE_CHECKS) == 0 ||
> >  	       (ctx->flags & STATE_CHECKS) == STATE_CHECKS);
> >  
> > -	if (ctx->index_key.description)
> > -		ctx->index_key.desc_len = strlen(ctx->index_key.description);
> > -
> >  	/* Check to see if this top-level keyring is what we are looking for
> >  	 * and whether it is valid or not.
> >  	 */
> > @@ -914,6 +911,7 @@ key_ref_t keyring_search(key_ref_t keyring,
> >  	struct keyring_search_context ctx = {
> >  		.index_key.type		= type,
> >  		.index_key.description	= description,
> > +		.index_key.desc_len	= strlen(description),
> >  		.cred			= current_cred(),
> >  		.match_data.cmp		= key_default_cmp,
> >  		.match_data.raw_data	= description,
> > diff --git a/security/keys/proc.c b/security/keys/proc.c
> > index 5af2934965d80..d38be9db2cc07 100644
> > --- a/security/keys/proc.c
> > +++ b/security/keys/proc.c
> > @@ -166,8 +166,7 @@ static int proc_keys_show(struct seq_file *m, void *v)
> >  	int rc;
> >  
> >  	struct keyring_search_context ctx = {
> > -		.index_key.type		= key->type,
> > -		.index_key.description	= key->description,
> > +		.index_key		= key->index_key,
> >  		.cred			= m->file->f_cred,
> >  		.match_data.cmp		= lookup_user_key_possessed,
> >  		.match_data.raw_data	= key,
> > diff --git a/security/keys/request_key.c b/security/keys/request_key.c
> > index 114f7408feee6..7385536986497 100644
> > --- a/security/keys/request_key.c
> > +++ b/security/keys/request_key.c
> > @@ -545,6 +545,7 @@ struct key *request_key_and_link(struct key_type *type,
> >  	struct keyring_search_context ctx = {
> >  		.index_key.type		= type,
> >  		.index_key.description	= description,
> > +		.index_key.desc_len	= strlen(description),
> >  		.cred			= current_cred(),
> >  		.match_data.cmp		= key_default_cmp,
> >  		.match_data.raw_data	= description,
> > diff --git a/security/keys/request_key_auth.c b/security/keys/request_key_auth.c
> > index 424e1d90412ea..6797843154f03 100644
> > --- a/security/keys/request_key_auth.c
> > +++ b/security/keys/request_key_auth.c
> > @@ -246,7 +246,7 @@ struct key *key_get_instantiation_authkey(key_serial_t target_id)
> >  	struct key *authkey;
> >  	key_ref_t authkey_ref;
> >  
> > -	sprintf(description, "%x", target_id);
> > +	ctx.index_key.desc_len = sprintf(description, "%x", target_id);
> >  
> >  	authkey_ref = search_process_keyrings(&ctx);
> >  
> > -- 
> > 2.19.1
> > 
> 
> Ping.  David, are you planning to apply this?
> 
> - Eric
> 

Ping.
