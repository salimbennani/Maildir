Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 08:45:32 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 039D75805CF
	for <like.xu@linux.intel.com>; Tue, 18 Dec 2018 15:39:37 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 18 Dec 2018 15:39:36 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A0E9uURInS3CQ55zyE9mcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgXKvrzrarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZXshfSSJPDIC7?=
 =?us-ascii?q?YYQNAeoOMvpXoYbgqVsWrxawBwahCP7hxzNUmHD2xrY30/g4EQzcwAAtBc4CvX?=
 =?us-ascii?q?bSod7oNKkSS+e1zKzQwDvedfxW3Cr955bMchs8v/+MXbNwftHLxkkyEwPFkkib?=
 =?us-ascii?q?pIv+PzyP0+QNrnaU7+56WeKzi24nqhp+rSKyxscolonEnZwaylbf9SlgxIY0Jd?=
 =?us-ascii?q?q4SEhhbd6jCptQuDiXOo1rSc0hW2FloDg2xqEFtJKhYSQG1ZcqywTBZ/GJc4WE?=
 =?us-ascii?q?+A/vWeSJLTtmnn1pZK+zihOu/ke71+HxUsy53EtJoyZYl9TDqm4B2wDP5sWCTv?=
 =?us-ascii?q?Zy4Fyu1DeK2g/O9u1EL040mK/VK5E/wbM9lZ8evljNEyDqmkj7irKdeF8+9eiy?=
 =?us-ascii?q?8evnZ63rpp+COI9wjQHzKqAums2kAeQkKQgCRWeb+eKh1LH5+k35WrpKguU3kq?=
 =?us-ascii?q?nfrp/aOdwWqrClDwJWyIov9guzAjS83NgGk3QKLEhJdA+FgoTxPlHBOvH4DfOx?=
 =?us-ascii?q?g1S2lzdrwujLPqT/DZXIM3jPiarucqhj60FCzAo/1MtQ55VJCrEHPP38RFTxuN?=
 =?us-ascii?q?vcDh84MAy73fzrCdpg1o4GXWKPA6mZML7dsFOS5+IvJfWMa5ERuDrnN/cl4Pvu?=
 =?us-ascii?q?gGQ/mV8ae6mp0p0XaG2iEvRhOUWZbmLggs0dHmcSogo+UOvqhUWGUT5SZHa9Qb?=
 =?us-ascii?q?gw5z4mCI+9CYfDR4atgKGO3SuhH51WYHxGBU6IEXvya4qEXPIMO2qvJNR8mGkE?=
 =?us-ascii?q?SaS5UN1mkhWvrxPhjbxgKOXS52sfr52k0dF04+jak1Y17SB1CMKGlHiASnwxkm?=
 =?us-ascii?q?4WSjtl4aZkvEYoz16C1bR/0eVVEMEW6/5XXwN/L5PF0uFhF/j0XQTOeMrPT0yp?=
 =?us-ascii?q?Fc67CzM8Rc5k3tkVfkxmEM+jhB2Q4y3/GrIQivmHCYI59ora2H7+Ids7zGzJkO?=
 =?us-ascii?q?E5gkUrWI1KPHyqi6p73wzSAYfTlAOejan5W74b2Xv2/WKewG7GgEFZWgdtVbmN?=
 =?us-ascii?q?CWsWY1bbqZLl5kLIRqKqFZwqNBAEzd+FLO1NcNK/3gYOf+vqJNmLOzH5oGy3Hx?=
 =?us-ascii?q?vdg+rUNIc=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AqAgCxhBlchxHrdtBkHQEBBQEHBQGBZ?=
 =?us-ascii?q?YExgmKDfYh4ix2CDXyYURUYFIcdIjgSAQMBAQEBAQECARMBAQEKCwkIGw4vgjY?=
 =?us-ascii?q?FAgMaAQaCXAMDAQIgBB8KKQMDAQIGAQEfBQIiBAICAwE4GwcSBYMdggEBAwGnD?=
 =?us-ascii?q?nwzhUCEboELhnOEQYFXP4ERgl2IPoJXAolCBJdeBwKCJQSPKySBXY96iUSBBY8?=
 =?us-ascii?q?qgSY3gXdNMIMvgicXjh5xgQQDIItJgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AqAgCxhBlchxHrdtBkHQEBBQEHBQGBZYExgmKDfYh4ix2?=
 =?us-ascii?q?CDXyYURUYFIcdIjgSAQMBAQEBAQECARMBAQEKCwkIGw4vgjYFAgMaAQaCXAMDA?=
 =?us-ascii?q?QIgBB8KKQMDAQIGAQEfBQIiBAICAwE4GwcSBYMdggEBAwGnDnwzhUCEboELhnO?=
 =?us-ascii?q?EQYFXP4ERgl2IPoJXAolCBJdeBwKCJQSPKySBXY96iUSBBY8qgSY3gXdNMIMvg?=
 =?us-ascii?q?icXjh5xgQQDIItJgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,370,1539673200"; 
   d="scan'208";a="55720288"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 18 Dec 2018 15:39:36 -0800
Received: from localhost ([::1]:56826 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gZOxb-0001yu-9W
	for like.xu@linux.intel.com; Tue, 18 Dec 2018 18:39:35 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:40786)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <samuel.thibault@ens-lyon.org>) id 1gZORB-0000Ok-KF
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 18:06:08 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <samuel.thibault@ens-lyon.org>) id 1gZOR9-00052Q-BT
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 18:06:05 -0500
Received: from hera.aquilenet.fr ([185.233.100.1]:41876)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <samuel.thibault@ens-lyon.org>)
	id 1gZOR8-0004ax-NT
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 18:06:03 -0500
Received: from localhost (localhost [127.0.0.1])
	by hera.aquilenet.fr (Postfix) with ESMTP id F3D8727ED;
	Wed, 19 Dec 2018 00:05:14 +0100 (CET)
X-Virus-Scanned: Debian amavisd-new at aquilenet.fr
Received: from hera.aquilenet.fr ([127.0.0.1])
	by localhost (hera.aquilenet.fr [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id avaKSbUJ0Lvg; Wed, 19 Dec 2018 00:05:13 +0100 (CET)
Received: from function.home (unknown
	[IPv6:2a01:cb19:181:c200:9eb6:d0ff:fe88:c3c7])
	by hera.aquilenet.fr (Postfix) with ESMTPSA id E893928EA;
	Wed, 19 Dec 2018 00:04:46 +0100 (CET)
Received: from samy by function.home with local (Exim 4.91)
	(envelope-from <samuel.thibault@ens-lyon.org>)
	id 1gZOPs-0007JY-0f; Wed, 19 Dec 2018 00:04:44 +0100
From: Samuel Thibault <samuel.thibault@ens-lyon.org>
To: qemu-devel@nongnu.org,
	peter.maydell@linaro.org
Date: Wed, 19 Dec 2018 00:04:15 +0100
Message-Id: <20181218230442.27887-38-samuel.thibault@ens-lyon.org>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <20181218230442.27887-1-samuel.thibault@ens-lyon.org>
References: <20181218230442.27887-1-samuel.thibault@ens-lyon.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 185.233.100.1
Subject: [Qemu-devel] [PULL 37/64] slirp: remove #if notdef dead code
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: =?UTF-8?q?Marc-Andr=C3=A9=20Lureau?= <marcandre.lureau@redhat.com>,
	Samuel Thibault <samuel.thibault@ens-lyon.org>,
	stefanha@redhat.com, jan.kiszka@siemens.com
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

From: Marc-Andr=C3=A9 Lureau <marcandre.lureau@redhat.com>

Signed-off-by: Marc-Andr=C3=A9 Lureau <marcandre.lureau@redhat.com>
Reviewed-by: Daniel P. Berrang=C3=A9 <berrange@redhat.com>
Signed-off-by: Samuel Thibault <samuel.thibault@ens-lyon.org>
---
 slirp/ip_input.c  | 200 ----------------------------------------------
 slirp/tcp_input.c |  39 ---------
 2 files changed, 239 deletions(-)

diff --git a/slirp/ip_input.c b/slirp/ip_input.c
index 348e1dca5a..6831526320 100644
--- a/slirp/ip_input.c
+++ b/slirp/ip_input.c
@@ -447,206 +447,6 @@ ip_slowtimo(Slirp *slirp)
     }
 }
=20
-/*
- * Do option processing on a datagram,
- * possibly discarding it if bad options are encountered,
- * or forwarding it if source-routed.
- * Returns 1 if packet has been forwarded/freed,
- * 0 if the packet should be processed further.
- */
-
-#ifdef notdef
-
-int
-ip_dooptions(m)
-	struct mbuf *m;
-{
-	register struct ip *ip =3D mtod(m, struct ip *);
-	register u_char *cp;
-	register struct ip_timestamp *ipt;
-	register struct in_ifaddr *ia;
-	int opt, optlen, cnt, off, code, type, forward =3D 0;
-	struct in_addr *sin, dst;
-typedef uint32_t n_time;
-	n_time ntime;
-
-	dst =3D ip->ip_dst;
-	cp =3D (u_char *)(ip + 1);
-	cnt =3D (ip->ip_hl << 2) - sizeof (struct ip);
-	for (; cnt > 0; cnt -=3D optlen, cp +=3D optlen) {
-		opt =3D cp[IPOPT_OPTVAL];
-		if (opt =3D=3D IPOPT_EOL)
-			break;
-		if (opt =3D=3D IPOPT_NOP)
-			optlen =3D 1;
-		else {
-			optlen =3D cp[IPOPT_OLEN];
-			if (optlen <=3D 0 || optlen > cnt) {
-				code =3D &cp[IPOPT_OLEN] - (u_char *)ip;
-				goto bad;
-			}
-		}
-		switch (opt) {
-
-		default:
-			break;
-
-		/*
-		 * Source routing with record.
-		 * Find interface with current destination address.
-		 * If none on this machine then drop if strictly routed,
-		 * or do nothing if loosely routed.
-		 * Record interface address and bring up next address
-		 * component.  If strictly routed make sure next
-		 * address is on directly accessible net.
-		 */
-		case IPOPT_LSRR:
-		case IPOPT_SSRR:
-			if ((off =3D cp[IPOPT_OFFSET]) < IPOPT_MINOFF) {
-				code =3D &cp[IPOPT_OFFSET] - (u_char *)ip;
-				goto bad;
-			}
-			ipaddr.sin_addr =3D ip->ip_dst;
-			ia =3D (struct in_ifaddr *)
-				ifa_ifwithaddr((struct sockaddr *)&ipaddr);
-			if (ia =3D=3D 0) {
-				if (opt =3D=3D IPOPT_SSRR) {
-					type =3D ICMP_UNREACH;
-					code =3D ICMP_UNREACH_SRCFAIL;
-					goto bad;
-				}
-				/*
-				 * Loose routing, and not at next destination
-				 * yet; nothing to do except forward.
-				 */
-				break;
-			}
-                        off--; /* 0 origin */
-			if (off > optlen - sizeof(struct in_addr)) {
-				/*
-				 * End of source route.  Should be for us.
-				 */
-				save_rte(cp, ip->ip_src);
-				break;
-			}
-			/*
-			 * locate outgoing interface
-			 */
-			bcopy((caddr_t)(cp + off), (caddr_t)&ipaddr.sin_addr,
-			    sizeof(ipaddr.sin_addr));
-			if (opt =3D=3D IPOPT_SSRR) {
-#define	INA	struct in_ifaddr *
-#define	SA	struct sockaddr *
- 			    if ((ia =3D (INA)ifa_ifwithdstaddr((SA)&ipaddr)) =3D=3D 0)
-				ia =3D (INA)ifa_ifwithnet((SA)&ipaddr);
-			} else
-				ia =3D ip_rtaddr(ipaddr.sin_addr);
-			if (ia =3D=3D 0) {
-				type =3D ICMP_UNREACH;
-				code =3D ICMP_UNREACH_SRCFAIL;
-				goto bad;
-			}
-			ip->ip_dst =3D ipaddr.sin_addr;
-			bcopy((caddr_t)&(IA_SIN(ia)->sin_addr),
-			    (caddr_t)(cp + off), sizeof(struct in_addr));
-			cp[IPOPT_OFFSET] +=3D sizeof(struct in_addr);
-			/*
-			 * Let ip_intr's mcast routing check handle mcast pkts
-			 */
-			forward =3D !IN_MULTICAST(ntohl(ip->ip_dst.s_addr));
-			break;
-
-		case IPOPT_RR:
-			if ((off =3D cp[IPOPT_OFFSET]) < IPOPT_MINOFF) {
-				code =3D &cp[IPOPT_OFFSET] - (u_char *)ip;
-				goto bad;
-			}
-			/*
-			 * If no space remains, ignore.
-			 */
-                        off--; /* 0 origin */
-			if (off > optlen - sizeof(struct in_addr))
-				break;
-			bcopy((caddr_t)(&ip->ip_dst), (caddr_t)&ipaddr.sin_addr,
-			    sizeof(ipaddr.sin_addr));
-			/*
-			 * locate outgoing interface; if we're the destination,
-			 * use the incoming interface (should be same).
-			 */
-			if ((ia =3D (INA)ifa_ifwithaddr((SA)&ipaddr)) =3D=3D 0 &&
-			    (ia =3D ip_rtaddr(ipaddr.sin_addr)) =3D=3D 0) {
-				type =3D ICMP_UNREACH;
-				code =3D ICMP_UNREACH_HOST;
-				goto bad;
-			}
-			bcopy((caddr_t)&(IA_SIN(ia)->sin_addr),
-			    (caddr_t)(cp + off), sizeof(struct in_addr));
-			cp[IPOPT_OFFSET] +=3D sizeof(struct in_addr);
-			break;
-
-		case IPOPT_TS:
-			code =3D cp - (u_char *)ip;
-			ipt =3D (struct ip_timestamp *)cp;
-			if (ipt->ipt_len < 5)
-				goto bad;
-			if (ipt->ipt_ptr > ipt->ipt_len - sizeof (int32_t)) {
-				if (++ipt->ipt_oflw =3D=3D 0)
-					goto bad;
-				break;
-			}
-			sin =3D (struct in_addr *)(cp + ipt->ipt_ptr - 1);
-			switch (ipt->ipt_flg) {
-
-			case IPOPT_TS_TSONLY:
-				break;
-
-			case IPOPT_TS_TSANDADDR:
-				if (ipt->ipt_ptr + sizeof(n_time) +
-				    sizeof(struct in_addr) > ipt->ipt_len)
-					goto bad;
-				ipaddr.sin_addr =3D dst;
-				ia =3D (INA)ifaof_ i f p foraddr((SA)&ipaddr,
-							    m->m_pkthdr.rcvif);
-				if (ia =3D=3D 0)
-					continue;
-				bcopy((caddr_t)&IA_SIN(ia)->sin_addr,
-				    (caddr_t)sin, sizeof(struct in_addr));
-				ipt->ipt_ptr +=3D sizeof(struct in_addr);
-				break;
-
-			case IPOPT_TS_PRESPEC:
-				if (ipt->ipt_ptr + sizeof(n_time) +
-				    sizeof(struct in_addr) > ipt->ipt_len)
-					goto bad;
-				bcopy((caddr_t)sin, (caddr_t)&ipaddr.sin_addr,
-				    sizeof(struct in_addr));
-				if (ifa_ifwithaddr((SA)&ipaddr) =3D=3D 0)
-					continue;
-				ipt->ipt_ptr +=3D sizeof(struct in_addr);
-				break;
-
-			default:
-				goto bad;
-			}
-			ntime =3D iptime();
-			bcopy((caddr_t)&ntime, (caddr_t)cp + ipt->ipt_ptr - 1,
-			    sizeof(n_time));
-			ipt->ipt_ptr +=3D sizeof(n_time);
-		}
-	}
-	if (forward) {
-		ip_forward(m, 1);
-		return (1);
-	}
-	return (0);
-bad:
-	icmp_send_error(m, type, code, 0, 0);
-
-	return (1);
-}
-
-#endif /* notdef */
-
 /*
  * Strip out IP options, at higher
  * level protocol in the kernel.
diff --git a/slirp/tcp_input.c b/slirp/tcp_input.c
index e33fb83df5..5b5355dd99 100644
--- a/slirp/tcp_input.c
+++ b/slirp/tcp_input.c
@@ -1441,45 +1441,6 @@ tcp_dooptions(struct tcpcb *tp, u_char *cp, int cn=
t, struct tcpiphdr *ti)
 	}
 }
=20
-
-/*
- * Pull out of band byte out of a segment so
- * it doesn't appear in the user's data queue.
- * It is still reflected in the segment length for
- * sequencing purposes.
- */
-
-#ifdef notdef
-
-void
-tcp_pulloutofband(so, ti, m)
-	struct socket *so;
-	struct tcpiphdr *ti;
-	register struct mbuf *m;
-{
-	int cnt =3D ti->ti_urp - 1;
-
-	while (cnt >=3D 0) {
-		if (m->m_len > cnt) {
-			char *cp =3D mtod(m, caddr_t) + cnt;
-			struct tcpcb *tp =3D sototcpcb(so);
-
-			tp->t_iobc =3D *cp;
-			tp->t_oobflags |=3D TCPOOB_HAVEDATA;
-			memcpy(sp, cp+1, (unsigned)(m->m_len - cnt - 1));
-			m->m_len--;
-			return;
-		}
-		cnt -=3D m->m_len;
-		m =3D m->m_next; /* XXX WRONG! Fix it! */
-		if (m =3D=3D 0)
-			break;
-	}
-	panic("tcp_pulloutofband");
-}
-
-#endif /* notdef */
-
 /*
  * Collect new round-trip time estimate
  * and update averages and current timeout.
--=20
2.19.2


