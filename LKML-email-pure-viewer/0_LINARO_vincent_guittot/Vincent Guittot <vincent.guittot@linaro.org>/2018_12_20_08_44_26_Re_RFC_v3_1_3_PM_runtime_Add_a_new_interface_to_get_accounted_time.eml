Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  20 Dec 2018 19:13:10 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 463C6580522;
	Thu, 20 Dec 2018 00:44:44 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga001-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 20 Dec 2018 00:44:43 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3APRuKwRDdH18cpOiUe8FUUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7/psqwAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95eWCxPAIyy?=
 =?us-ascii?q?b4UBAekcM+hGs4b9vEMOoBmlCAmwGO/i0CNEimPq0aA41ekqDAHI3BYnH9ILqH?=
 =?us-ascii?q?nbo9T1NKEOXu+ryqnI0SjIYfJL2Tf89IjIbhchoe2RVr93b8rRyE8vGB/bgVWW?=
 =?us-ascii?q?tYzpJTyV1vkMs2iH8+pgUv6vhnUjqwFwpDig3N0sio7TioIS0FDE+jx0zYAoLt?=
 =?us-ascii?q?O7UE52ecCoHIdUui2AKod7TN0uT3t1tCs51rEKo5+2cSoSxJg52xLSb+aLfouI?=
 =?us-ascii?q?7x75SeqcIDZ1iGhkdb+8gRu57FKuxffmVsau1VZHtipFncfItnAKzxHT9MeHRe?=
 =?us-ascii?q?Vn/ku72jaAyRrT6udaLkAwj6bbLIQhwrEompoSt0TMADP2lV3ogKOKckgo4PWk?=
 =?us-ascii?q?5ur5brn8u5ORNJN4hhv/P6ksgsC/BP43MgkKX2iV4+S807jj8FX9QLVLiP02j6?=
 =?us-ascii?q?bYvInZJcsFvK65BRFa0oI65xa4ATam1soXnWMcIVJbdxKIkZLpN0vNIP/mF/e/?=
 =?us-ascii?q?hUqjkDNxy/DBJL3hDY3BLmLfn7f5YbZ990lcxRI3zdBe5JJbFKsNIf3uWkLqsN?=
 =?us-ascii?q?zYDxk5MxG7wur9CdV90J8eVnyLAqODLKzStlqI7Po1I+aQfI8VpCr9K/896v7u?=
 =?us-ascii?q?l3A5mEMdcrOu3ZcNaHC4A+5pI0OWYXf3htcBEGEKvhcxTeDwiV2CVyJTaGi2X6?=
 =?us-ascii?q?4m+j47D4emB5/ZRo+xmLyBwDu7HppOa29cEVCMEXDod4aeV/cWci2SINRskjgF?=
 =?us-ascii?q?VbinVo8g2guitA78y7p7MOXU/jcUuo7k1Nhw/+fTjw099SRoD8SB1GGAV2J0kX?=
 =?us-ascii?q?kORzMs2KB/oFZyylGM0aVjh/xYFNpT5+5GUwsgNJ7cyfB6BM72Wg7bYtiJT1Om?=
 =?us-ascii?q?SM28AT4tVtIx38MOY0FlFtq/lB/DwTSlD6UVl7ORApw06bzT3372K8Z5yHbG0a?=
 =?us-ascii?q?0hgkIiQstOM22mm6F++xLSB47Pj0WWiaKqeb4A0y7K8WeJ1XCOs11AUA5sTaXF?=
 =?us-ascii?q?WmgSaVbMotTn+EzOVb+uBq4hMgta18GCLLBHatnojVVAWffiN87SY2O3m2esGx?=
 =?us-ascii?q?mIwqmAY5bte2UYxC/dElQLkxgP/XaaMggzHjuho2PbDDxpCVLvY0Pt/fNiqH+h?=
 =?us-ascii?q?SU801QWKb0xn17q64RMVgf2cS/UO3rMLoishqjN0HEqj0NLSEdaPuw1hfKBEa9?=
 =?us-ascii?q?Mn/FhHzX7ZtxB6PpG4Na9igkARcgtpsELuzRl4EZhAntUwo3MszwpyLryY3UhF?=
 =?us-ascii?q?dzOZ25DwJ7LWJnPz/BCpd67ZxFXe3MyK9acI7fQys0/jsx2xFko+73Vn1MFY0n?=
 =?us-ascii?q?uB5pnQEAUeS5PwUkYt+Bh8qLHXeS0954LS1X1xPqi4qD7C29Q1BOQ7zhasZctQ?=
 =?us-ascii?q?MKSBFAXqCc0VG9CuKPA2m1iudh8EJuFS+7IuMMO8avSG37SnPOB+kzK8jGRL+Z?=
 =?us-ascii?q?xy3ViI9yVhVOHIxZEFw/eD0wuDVjf8ikqhs8/tlYBFYzESAnSwySz+CIFNYa1y?=
 =?us-ascii?q?eJ4BCX2yLM2v2tV+m5ntVmZY9V6iHV8H2NWleQGPb1z7xgBQ0UUXoXq6mSq31T?=
 =?us-ascii?q?B0kjcprraB0yzK2ejtaB0HOmtTTml4kVjsOZS0j8wdXEWwbQgmjgGl5UX5x6hc?=
 =?us-ascii?q?vqh/NHPcQURLfyj3KWFtTK2wu6GGY85O7pMorCpWXP69YVCcVr7yvR8a3zn/EG?=
 =?us-ascii?q?tZwTAxbyuqtYnhnxxmlGKdK25+rXrDdsF33xvf5t3cRfhK0zoCRSl4jyTXB1em?=
 =?us-ascii?q?M9mo+9WUi4nMsuSkW229UZ1TdDHhzZmcuyuj+W1qHRq/kuiwmtL9EAg2yy/718?=
 =?us-ascii?q?RwWiXOoxbxeY3r16W8MeJ6cUhkHl7868xmGo5glos8no0f2X8fhp+N53oIjX/z?=
 =?us-ascii?q?MclH2aL5dHcNQD8Lw93P7wT/1kxsMGmJx57nWXWH2cRuecO6YmwN1yI57sBKDr?=
 =?us-ascii?q?qU7bNekSt0pFq4sRzeYfxnkjgBzvsu7WYQg/sVtwo10iWdHrcSEFFEPSzrkhSE?=
 =?us-ascii?q?9dG/o79RZGayariwz0t+kMulDLGDpAFcRXn4do0jHS928sVwLlbM3Gfv5YHjfd?=
 =?us-ascii?q?nadcgTuQGMkxfck+hVL4o8meEQiipgPWL9oGcpy+omjRF12ZG6vY6HK3hi/a6j?=
 =?us-ascii?q?Ax5YMCH1aN0X+j33kalemcOW1Zi1Hpp9AjULQIfoTfWwHTIQr/vnMhiBECYmpn?=
 =?us-ascii?q?eHA7bfHhKf6ER7r3LJCZ+rLGqaJH0YzdVkWRmcK1ZTgAESXDUmgJE5Ehqmy9Dm?=
 =?us-ascii?q?cEd8/joR/EL3qgNQyuJ0MBnySmfepAC1ajctVZiQNhxW4htZ50fSN8ye4fl+Hy?=
 =?us-ascii?q?VZ/p2nsQyMJXaXZwVODWEVREOEA0rvMaWp5dnF6+KYHPaxL+PSYbWSruxTT/eI?=
 =?us-ascii?q?yoyu0otl/DaMN9+DPnp4D/081UpMQ2p5G9nCmzgUTywXliTNb9OUpRum+y13qN?=
 =?us-ascii?q?y//+rvWA71+YSPDL5SO811+x+qmaeDK/KQhCFhJDlCy5MD3mXIx6Yf3VIIjyFu?=
 =?us-ascii?q?diKgEbABtS7LUaLRlbVbDx8dayNvKsRI67gw0RVKOc7ektn1zKJ3juYpC1dZUl?=
 =?us-ascii?q?zsgt2pZc0PI22nKFzLHlqENLSYKj3N2Mz3ZaK8SbtNjORbrRGwuDCbE1P9MTSH?=
 =?us-ascii?q?jTXmSxevMeRUhiGBIBNeoJ29cgpqCWX7TNPpcBu7MNp2jT0w2bI1h3PKOnQaMT?=
 =?us-ascii?q?hzaE5NqryQ7SVFgvRwAWBB73xlLfWalCad9eXXNpEWsf44Shhzwt9e7jwawr1O?=
 =?us-ascii?q?9yZCDKhonCWUrtdouEqhlMGLyzxuSh0IrSxE0tGlp0JnbJvY8JJNX2qM0w8M8X?=
 =?us-ascii?q?mXF1xeudpjAdDpp+Zf19nTiKXvADND9dvO+o0bHceCe5HPC2YoLRe8QG2cNwAC?=
 =?us-ascii?q?VzP+cDiH30E=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BwAADjVRtch0O0hNFcAQYeAQYHBoFUB?=
 =?us-ascii?q?gsBg2sUE4N9lBWCDRSXXYFYNBMBhy0iNwYNAQMBAQEBAQECARMBAQEIDQkIKSM?=
 =?us-ascii?q?MgjYkAYJhAQEBAQIBAQIgBBkBATcBBQkBAQoLDQICERUCAgMfEgEFARwGEwWDH?=
 =?us-ascii?q?YF6CAWbfDyKKXB8M4J2AQEFgi6EeggSeYs0gVc/g24HLoQ8KQkFTYJJgleJKRJ?=
 =?us-ascii?q?AgUmVIVoHAoIlBI88GIFfiFCHLYpSjyowgTuBeDMaMHQGgjWCGwwXiF6FQD4zg?=
 =?us-ascii?q?QUBAYsTKYIkAQE?=
X-IPAS-Result: =?us-ascii?q?A0BwAADjVRtch0O0hNFcAQYeAQYHBoFUBgsBg2sUE4N9lBW?=
 =?us-ascii?q?CDRSXXYFYNBMBhy0iNwYNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkAYJhAQEBA?=
 =?us-ascii?q?QIBAQIgBBkBATcBBQkBAQoLDQICERUCAgMfEgEFARwGEwWDHYF6CAWbfDyKKXB?=
 =?us-ascii?q?8M4J2AQEFgi6EeggSeYs0gVc/g24HLoQ8KQkFTYJJgleJKRJAgUmVIVoHAoIlB?=
 =?us-ascii?q?I88GIFfiFCHLYpSjyowgTuBeDMaMHQGgjWCGwwXiF6FQD4zgQUBAYsTKYIkAQE?=
X-IronPort-AV: E=Sophos;i="5.56,376,1539673200"; 
   d="scan'208";a="56671195"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 20 Dec 2018 00:44:42 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728527AbeLTIoj (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Thu, 20 Dec 2018 03:44:39 -0500
Received: from mail-io1-f68.google.com ([209.85.166.68]:43151 "EHLO
        mail-io1-f68.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725799AbeLTIoj (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 20 Dec 2018 03:44:39 -0500
Received: by mail-io1-f68.google.com with SMTP id g17so701445ioc.10
        for <linux-kernel@vger.kernel.org>; Thu, 20 Dec 2018 00:44:38 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=WSRusmlTOT2YUD9xUTBz/xvZKqKgg/kBTQVB+7qm598=;
        b=ENEGJYuUxObBvdu2XmNJx7KkabGA8TuhOooH7APHO9G8Kx1EKHX48IJxS7B0UleXPd
         xicRdJXVI+9EernMxyiOPi2kIikuFIfG9P+KDJ5jjKwdUMRRCBmD2V8z6+4LoV2C7tBF
         Q9Wcd50UjThObanOub2jQwuCEm14uNr5H89Zs=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=WSRusmlTOT2YUD9xUTBz/xvZKqKgg/kBTQVB+7qm598=;
        b=k6Dvo9CTLh5GvP36VoF31eTQ7Zw6qE5VO6/DU/Vy3j9EOtoGy7IyrSp+rm5QvIdUdx
         Ov5qK+hrG1KMTWN5VUdoZPNKkWxBcZEzKmZeRmsTHcPURH1gcbrBvtPFSEVMweUIOrIW
         RSDYZxx/vxQxTPhI5gguzmAdMqemv3FfEuDfBo+YuB1m4IdhGxVqUSSTlWPt2khtN7Re
         vrtZxaXRz07MJDDEoSd83ZLNB5O20vVRlm8qdTqtL0GXY6fY8x92FQCQsnAOdaaxVcHC
         kwWsdgPLPhNg6CPs4o22sbG0PIN5m8BfO93mlyWMJFLojcoHce/RhJ7hrmigQdfoMvvp
         KQyw==
X-Gm-Message-State: AJcUukeWyyFj8zM8zeSxIGXyfes0Fvmoqu6N08aOgPI3GpAv5XBX59Ar
        YjveQHB+2f/5BJap45tzoJm9y8aPXbIsEcaIFQFG1kmZ39U1SA==
X-Google-Smtp-Source: ALg8bN5wju+Em/96CEEYLsrt52YYg0LTzVAfmC0FP4uNWi7UXhvL0zuU9qnB80LMKEq6+eUnqIPcpuUtPY5uHEBMMtw=
X-Received: by 2002:a6b:6b18:: with SMTP id g24mr610300ioc.18.1545295477408;
 Thu, 20 Dec 2018 00:44:37 -0800 (PST)
MIME-Version: 1.0
References: <1545144923-31546-1-git-send-email-vincent.guittot@linaro.org>
 <1545144923-31546-2-git-send-email-vincent.guittot@linaro.org>
 <CAPDyKFq6X8vJU=pK1fgirGkD2-GS=LryRP1No8bSgPNLbyvAEg@mail.gmail.com>
 <CAKfTPtCpv0MqF64JGTyR63bqKdAhXzL1fEsNbS6DHsD-jXYpKw@mail.gmail.com>
 <CAPDyKFrSxX-eBsTiEvbrbjVpqkSuBnhxruCgtihH6hSvWSFD1g@mail.gmail.com>
 <CAKfTPtB=TUAz=KpZzJsRUvK8ymiXnTgQ3BxcY0yu9YbJ1BW7QA@mail.gmail.com>
 <CAPDyKFoR7t=K65n0_+4yRqdpRMZ0BbA16cDhmxEvNhm0qEOXNQ@mail.gmail.com>
 <CAKfTPtA4Fr6Xk7+dUpzZqGvK6dJGtWAiz70Ho4noQk3gBdGFdg@mail.gmail.com>
 <CAPDyKFqpieqgh-0U_N1wwWdciotMAAJ2SRNXpGAb8D2voiaOJA@mail.gmail.com>
 <CAKfTPtBp+eCqyCWh27FWe8pkrFJiLQitPL_+kfL42r_BTq6DcQ@mail.gmail.com> <CAPDyKFocLDoJG5P3ywAV7+p6PL3fnno1cZ87=-Mzn49ag-y6tw@mail.gmail.com>
In-Reply-To: <CAPDyKFocLDoJG5P3ywAV7+p6PL3fnno1cZ87=-Mzn49ag-y6tw@mail.gmail.com>
From: Vincent Guittot <vincent.guittot@linaro.org>
Date: Thu, 20 Dec 2018 09:44:26 +0100
Message-ID: <CAKfTPtA7Y5=wQ-CqKxquyiRVA1PjqqjV1A9aDn8tMok=eDYX5A@mail.gmail.com>
Subject: Re: [RFC v3 1/3] PM/runtime: Add a new interface to get accounted time
To: Ulf Hansson <ulf.hansson@linaro.org>
Cc: "open list:THERMAL" <linux-pm@vger.kernel.org>,
        linux-kernel <linux-kernel@vger.kernel.org>,
        "Rafael J. Wysocki" <rjw@rjwysocki.net>,
        Thara Gopinath <thara.gopinath@linaro.org>,
        jani.nikula@linux.intel.com,
        Joonas Lahtinen <joonas.lahtinen@linux.intel.com>,
        rodrigo.vivi@intel.com, David Airlie <airlied@linux.ie>,
        "Intel graphics driver community testing & development" 
        <intel-gfx@lists.freedesktop.org>,
        dri-devel <dri-devel@lists.freedesktop.org>
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Thu, 20 Dec 2018 at 09:16, Ulf Hansson <ulf.hansson@linaro.org> wrote:
>
> On Wed, 19 Dec 2018 at 17:52, Vincent Guittot
> <vincent.guittot@linaro.org> wrote:
> >
> > On Wed, 19 Dec 2018 at 17:36, Ulf Hansson <ulf.hansson@linaro.org> wrote:
> > >
> > > On Wed, 19 Dec 2018 at 14:26, Vincent Guittot
> > > <vincent.guittot@linaro.org> wrote:
> > > >
> > > > On Wed, 19 Dec 2018 at 11:43, Ulf Hansson <ulf.hansson@linaro.org> wrote:
> > > > >
> > > > > On Wed, 19 Dec 2018 at 11:34, Vincent Guittot
> > > > > <vincent.guittot@linaro.org> wrote:
> > > > > >
> > > > > > On Wed, 19 Dec 2018 at 11:21, Ulf Hansson <ulf.hansson@linaro.org> wrote:
> > > > > > >
> > > >
> > > > > > > > > >
> > > > > > > > > > diff --git a/drivers/base/power/runtime.c b/drivers/base/power/runtime.c
> > > > > > > > > > index 7062469..6461469 100644
> > > > > > > > > > --- a/drivers/base/power/runtime.c
> > > > > > > > > > +++ b/drivers/base/power/runtime.c
> > > > > > > > > > @@ -88,6 +88,32 @@ static void __update_runtime_status(struct device *dev, enum rpm_status status)
> > > > > > > > > >         dev->power.runtime_status = status;
> > > > > > > > > >  }
> > > > > > > > > >
> > > > > > > > > > +u64 pm_runtime_accounted_time_get(struct device *dev, enum rpm_status status, bool update)
> > > > > > > > > > +{
> > > > > > > > > > +       u64 now = ktime_to_ns(ktime_get());
> > > > > > > > >
> > > > > > > > > I think you should stay on jiffies here - and then switch to ktime in patch 3.
> > > > > > > > >
> > > > > > > > > > +       u64 delta = 0, time = 0;
> > > > > > > > > > +       unsigned long flags;
> > > > > > > > > > +
> > > > > > > > > > +       spin_lock_irqsave(&dev->power.lock, flags);
> > > > > > > > > > +
> > > > > > > > > > +       if (dev->power.disable_depth > 0)
> > > > > > > > > > +               goto unlock;
> > > > > > > > > > +
> > > > > > > > > > +       /* Add ongoing state  if requested */
> > > > > > > > > > +       if (update && dev->power.runtime_status == status)
> > > > > > > > > > +               delta = now - dev->power.accounting_timestamp;
> > > > > > > > > > +
> > > > > > > > >
> > > > > > > > > Hmm. Do we really need to update the accounting timestamp? I would
> > > > > > > > > rather avoid it if possible.
> > > > > > > >
> > > > > > > > i915/drm uses this to track ongoing suspended state. In fact they are
> > > > > > > > mainly interested by this part
> > > > > > >
> > > > > > > Again, sorry I don't follow.
> > > > > >
> > > > > > In fact we don't update dev->power.accounting_timestamp but only use
> > > > > > it to get how much time has elapsed in the current state.
> > > > > >
> > > > > > >
> > > > > > > My suggested changes below, would do exactly that; track the ongoing
> > > > > > > suspended state.
> > > > > > >
> > > > > > > The user can call the function several times while the device remains
> > > > > > > RPM_SUSPENDED, and if needed the user could then compute the delta
> > > > > > > in-between the calls, for whatever reason that may be needed.
> > > > > >
> > > > > > So I'm not sure to catch your question:
> > > > > > Is your problem linked to status != RPM_SUSPENDED or the update
> > > > > > parameter that compute delta ?
> > > > >
> > > > > My intent was to keep things simple.
> > > > >
> > > > > 1. Only expose last suspended time, which means tracking the ongoing
> > > > > suspended state. In other words, you can also remove "enum rpm_status
> > > > > status" as the in-parameter to pm_runtime_accounted_time_get().
> > > >
> > > > Ok for this point if Rafael doesn't see any benefit of keeping the
> > > > generic interface
> > > >
> > > > > 2. Don't allow the user of pm_runtime_accounted_time_get() to update
> > > > > the current timestamp, in "dev->power.accounting_timestamp".
> > > >
> > > > But pm_runtime_accounted_time_get doesn't update
> > > > dev->power.accounting_timestamp, it only reads it to know when when
> > > > the last state transition happened
> > >
> > > I understand, sorry for not being clear enough.
> > >
> > > My point is, you must not update dev->power.suspended_time, without
> > > also setting a new value for dev->power.accounting_timestamp.
> > > Otherwise, the next time the core calls
> > > update_pm_runtime_accounting(), it will end up adding a wrong delta to
> > > dev->power.suspended_time.
> >
> > I fully agree on that and that's why dev->power.accounting_timestamp
> > is not and has never been modified
>
> Huh, I have miss-read your patch. What a mess, my apologies.
>
> >
> > >
> > > BTW, it seems like you have based this on top of some patch converting
> > > from jiffies to ktime, as I can't fine dev->power.suspended_time, but
> > > instead I have dev->power.suspended_jiffies.
> > >
> > > On Wed, 19 Dec 2018 at 14:26, Vincent Guittot
> > > <vincent.guittot@linaro.org> wrote:
> > > >
> > > > On Wed, 19 Dec 2018 at 11:43, Ulf Hansson <ulf.hansson@linaro.org> wrote:
> > > > >
> > > > > On Wed, 19 Dec 2018 at 11:34, Vincent Guittot
> > > > > <vincent.guittot@linaro.org> wrote:
> > > > > >
> > > > > > On Wed, 19 Dec 2018 at 11:21, Ulf Hansson <ulf.hansson@linaro.org> wrote:
> > > > > > >
> > > >
> > > > > > > > > >
> > > > > > > > > > diff --git a/drivers/base/power/runtime.c b/drivers/base/power/runtime.c
> > > > > > > > > > index 7062469..6461469 100644
> > > > > > > > > > --- a/drivers/base/power/runtime.c
> > > > > > > > > > +++ b/drivers/base/power/runtime.c
> > > > > > > > > > @@ -88,6 +88,32 @@ static void __update_runtime_status(struct device *dev, enum rpm_status status)
> > > > > > > > > >         dev->power.runtime_status = status;
> > > > > > > > > >  }
> > > > > > > > > >
> > > > > > > > > > +u64 pm_runtime_accounted_time_get(struct device *dev, enum rpm_status status, bool update)
> > > > > > > > > > +{
> > > > > > > > > > +       u64 now = ktime_to_ns(ktime_get());
> > > > > > > > >
> > > > > > > > > I think you should stay on jiffies here - and then switch to ktime in patch 3.
> > > > > > > > >
> > > > > > > > > > +       u64 delta = 0, time = 0;
> > > > > > > > > > +       unsigned long flags;
> > > > > > > > > > +
> > > > > > > > > > +       spin_lock_irqsave(&dev->power.lock, flags);
> > > > > > > > > > +
> > > > > > > > > > +       if (dev->power.disable_depth > 0)
> > > > > > > > > > +               goto unlock;
> > > > > > > > > > +
> > > > > > > > > > +       /* Add ongoing state  if requested */
> > > > > > > > > > +       if (update && dev->power.runtime_status == status)
> > > > > > > > > > +               delta = now - dev->power.accounting_timestamp;
> > > > > > > > > > +
> > > > > > > > >
> > > > > > > > > Hmm. Do we really need to update the accounting timestamp? I would
> > > > > > > > > rather avoid it if possible.
> > > > > > > >
> > > > > > > > i915/drm uses this to track ongoing suspended state. In fact they are
> > > > > > > > mainly interested by this part
> > > > > > >
> > > > > > > Again, sorry I don't follow.
> > > > > >
> > > > > > In fact we don't update dev->power.accounting_timestamp but only use
> > > > > > it to get how much time has elapsed in the current state.
> > > > > >
> > > > > > >
> > > > > > > My suggested changes below, would do exactly that; track the ongoing
> > > > > > > suspended state.
> > > > > > >
> > > > > > > The user can call the function several times while the device remains
> > > > > > > RPM_SUSPENDED, and if needed the user could then compute the delta
> > > > > > > in-between the calls, for whatever reason that may be needed.
> > > > > >
> > > > > > So I'm not sure to catch your question:
> > > > > > Is your problem linked to status != RPM_SUSPENDED or the update
> > > > > > parameter that compute delta ?
> > > > >
> > > > > My intent was to keep things simple.
> > > > >
> > > > > 1. Only expose last suspended time, which means tracking the ongoing
> > > > > suspended state. In other words, you can also remove "enum rpm_status
> > > > > status" as the in-parameter to pm_runtime_accounted_time_get().
> > > >
> > > > Ok for this point if Rafael doesn't see any benefit of keeping the
> > > > generic interface
> > > >
> > > > > 2. Don't allow the user of pm_runtime_accounted_time_get() to update
> > > > > the current timestamp, in "dev->power.accounting_timestamp".
> > > >
> > > > But pm_runtime_accounted_time_get doesn't update
> > > > dev->power.accounting_timestamp, it only reads it to know when when
> > > > the last state transition happened
> > > >
> > > > >
> > > > > Is that okay for the drm driver, to do what it does today?
> > > >
> > > > drm driver needs 2 things: the  accounted suspended time since the
> > > > last transition
> > >
> > > The core keeps tracks of the "total suspended time". Each time
> > > update_pm_runtime_accounting() is called, and the state is
> > > RPM_SUSPENDED it adds a delta to the total suspended time. Just to be
> > > clear, this may even happen when userspace reads the
> > > "runtime_suspended_time" sysfs node.
> > >
> > > My point is, the core doesn't track the "total suspended time since
> > > the last transition", which seems to be what the drm driver tries to
> > > figure out.
> > >
> > > Just to be clear, I don't think we should update the core to provide
> > > the data reflecting that time, as it would add overhead from
> > > additional time computations. I think it's better to push this down to
> >
> > Which kind of overhead are you referring ? This is done only when
> > pm_runtime_accounted_time_get') is called and doesn't modify
> > pm core metrics
>
> I was talking hypothetically.
>
> Having a function that performs some computation when actually called
> by the user, along the lines of what you propose in $subject patch, is
> in principle fine by me.
>
> The important part, is that we don't make core to perform *additional*
> unnecessary time computations, each time it calls
> update_pm_runtime_accounting().
>
> >
> > > those drivers that needs it, as it seems like a highly unusual thing.
> > >
> > > Instead, perhaps we should provide an API
> > > (pm_runtime_suspended_time()) that simply returns the value of
> > > dev->power.suspended_jiffies. The driver/subsystem could then call
> > > this API from its ->runtime_suspend|resume() callbacks, for example,
> > > to store values from it locally and later compute the deltas from it
> > > that it needs.
> >
> > not sure that i915/drm has such call back
> >
> > >
> > > Do note that, the core updates the status of the device to
> > > RPM_SUSPENDED, after the ->runtime_suspend() callback has returned a
> > > successful error code. Hence, calling the API from a
> > > ->runtime_suspend() callback would fetch the total suspended time, up
> > > until the last time the device became runtime resumed. That should be
> > > helpful, right?
> >
> > TBH, I don't know if this would help or not. i915/drm driver developer
> > should have the answer
> >
> > AFAICT, all this code is not driver in itself but some perf monitoring
> > stuff that estimate a events when it is not accessible anymore because
> > devices is suspended
> > >
> > > > and the time elapse in the current state when suspened
> > >
> > > Re-thinking this a bit from my earlier comments - and by following the
> > > above reasoning, it sounds like this better belongs in the
> > > driver/subsystem, without requiring any data from the core.
> > >
> > > The driver/subsystem could just store a timestamp in it's
> > > ->runtime_suspend() callback and whenever needed, it could compute a
> > > delta towards it. That should work, right?
> >
> > I don't know i915/drm enough to know all that details
>
> Okay, so let me re-summarize the main issue I see with your approach
> in $subject patch.
>
> dev->power.accounting_timestamp can't be used to know when last
> transition was made. If I understand correctly, that is how you use
> it. No?

Yes. At least that how I have interpreted the current code

>
> Anyway, as stated, that's because the timestamp becomes updated, if
> update_pm_runtime_accounting() is called via the sysfs nobs, which
> means there is no state transition happening, but only accounting data
> is updated.

Yes I have not realized that the update also happens there which makes
me think that i have
may be over interpreted the code and the initialization of
i915->pmu.suspended_jiffies_last

>
> So, what I think we can do from the core perspective, if it helps
> (which I am not sure of):
> 1. Export a function, which returns the value of dev->power.suspended_jiffies.
> 2. Export a wrapper function (to deal with locking) which calls
> update_pm_runtime_accounting(). This wrapper function allows the user
> the update the total suspended time, also taking into account the time
> spent in the current state.

Having now in mind that suspended_jiffies can be updated outside state
transition like via sysfs call,
we can maybe just implements 2 and return dev->power.suspended_jiffies

something like below
unsigned long pm_runtime_get_suspended_time(struct device *dev)
{
unsigned long time;
unsigned long flags;

spin_lock_irqsave(&dev->power.lock, flags);

update_pm_runtime_accounting(dev);

time = dev->power.suspended_time;

spin_unlock_irqrestore(&dev->power.lock, flags);

return time;
}


>
> Other than that, I think the rest should be managed in the drm driver itself.
>
> Kind regards
> Uffe
