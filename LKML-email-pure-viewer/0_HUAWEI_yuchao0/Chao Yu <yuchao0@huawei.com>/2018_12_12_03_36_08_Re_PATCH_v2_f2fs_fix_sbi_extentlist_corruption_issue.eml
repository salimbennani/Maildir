Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  12 Dec 2018 19:41:24 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id A9E945803DC;
	Tue, 11 Dec 2018 19:39:21 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga001-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 11 Dec 2018 19:39:21 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Aepf6cxS9zOl7TiRBFHs+Eq3g0tpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64YBOCt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZH42y?=
 =?us-ascii?q?cYUPAeoCM+hWoYbyqFkBogexCwmtH+Pv0j1Fi2Tq3aA4yektDR3K0QIgEt8IrX?=
 =?us-ascii?q?/arM/1NKAXUe2t0qTIzS/Mb/RL0jj/9YjDbxcsoPGRXb1sccre004vGx/eg1WQ?=
 =?us-ascii?q?tIzqJT2U2foMs2SB8+VgUuevhnchpgpsoTav3t8hhpfVio8R0FzI6Ct0zJgvKd?=
 =?us-ascii?q?GlS0N3fcSoHZpSui2CKod6XtkuT3xmtSs10LEKp4C3cDIXxJkjxxPTc/OKfoiS?=
 =?us-ascii?q?7h79W+ucJS10iGx4dL6hnRq+7EytxvH6W8KpylhFtDBFncPJtn0V1xzc9MyHSv?=
 =?us-ascii?q?xl80e/1jaAyRrT5vtHIU8qj6rbLYAuwroqmpoUq0TDETf6mETwjKCIakUp4vak?=
 =?us-ascii?q?5/jjb7n8u5OROZF4hhvjPqkthsCzG+U1PwoWU2ie4+u81bnj/UPjQLVNi/07iq?=
 =?us-ascii?q?3ZsJHcJcQGqa+1GgxV3Zg56xa5ETim1M0UnX4JLVJDZh2HlZPkO0/BIP/mF/ez?=
 =?us-ascii?q?mVesnylxx/DAILLhBo/BLn/ZkLfuZbp98VJTyBIvzdBD4JJZErUBIPPwWkDvrt?=
 =?us-ascii?q?DZAQI5Pheww+bmDtV9y4wfVXiOAq+fLKPdr1uI6vgzLOmLYY8foCz9JOQ95/7y?=
 =?us-ascii?q?kX85nkcQfamz0psWdHC3BPNmL1+ZYXrxmNgBF2gKsxE6TOzrjl2CTDFSa2yzX6?=
 =?us-ascii?q?I6+jE0FoamAZ3fSYCqhbyLxD27EYFOZmBaFlCMFm/ld4eDW/gSci6SIchhkjoC?=
 =?us-ascii?q?VbimUIIh0RCutAnny7toNObU+ysYtY7929hx/eHciRYy9TlsBcSHz26NV310nn?=
 =?us-ascii?q?8PRzIuxq9/ukx9ylCA0aRimfxXD95T6uhNUgc7M57c0uN7B8rzWgLHYteGVlKm?=
 =?us-ascii?q?Ts+6DjE2S9I728UObFplG9W+khDD2DKnA7wPmLyNHpA09qPc0GL3J8Zy0HvG0K?=
 =?us-ascii?q?ghj187QspAL2Gmh6h/9xTNCI7NiUmWi6GqdaEE1i7X6GiD1XaOvF1fUANoTKrK?=
 =?us-ascii?q?R24faVXModT5/EzCSaSuBqohMgdGzc6CKa5KatnygFVCRffjPsneYm2rl2exAx?=
 =?us-ascii?q?aI2q2DbI7wd2oB2yXdDVAOkxoP8naeKQg+GiChrnrDAzN0C1LgfVng8elkp3O9?=
 =?us-ascii?q?VU870QeKYlZl17q0/B4VmPOdR+kS3rICpCcutTF0EEyh0NLRDtqKvxBhc7lEYd?=
 =?us-ascii?q?Mh/FdH0nrUtxB8PpylKKBiml4ecgRts0PyzRl3DZ9AkcwrrHMswwp/MqaY0FJH?=
 =?us-ascii?q?dzOF0pH8ILzXKm/u/B+xb67awE3R0NGT+q0X8vQ3t03jvB21Fkol63hoyd1V3G?=
 =?us-ascii?q?WT55rUDAseS4n+Ulsq+BdgobHaYS49553P2H1oMKm0tCLC2t0zCOskzBagY8lQ?=
 =?us-ascii?q?MKeeGADuFM0aAtCkKPY2lFixchIEIOdS+bY0PsO7bfeJxLSnPedgnD28i2RH75?=
 =?us-ascii?q?tw0kaN9yp6V+7J0IwJw/Ce3gubSTj8iE2tvdzwmYBBfTsSBHawyTD4BI5NYa1/?=
 =?us-ascii?q?ZZwLCWayLMKt3NVxmpntV2Re9FG9HVMG2daldgaIYFz5wAJfy14XoXuhmSajyz?=
 =?us-ascii?q?x0kjcprreQ3SDUwuTicgYHNXBPRGV4kVjsJo20hcgAXEe0dwgpiAel5UHiyqlb?=
 =?us-ascii?q?paRzNWnSTV1TfyjrKWFvSa+wtruEY85S55IkqyRXUOKgYV+ETr7xuQcV0yTmH2?=
 =?us-ascii?q?FG3jA0aymquonlnxx9kG+dLmx8rGDaecFzwhfT/sfcSuRS3joFRSl4jyfYBl6n?=
 =?us-ascii?q?Mtmt/NWUkYrDs++kW2KgUJ1TbTfkzYeauCSn4m1qBAW1n+qvld3/DQg6zSj72s?=
 =?us-ascii?q?FqVCrSqxbweIvr16W8Me98ekloBVn869d1G41kk4swgo0Q1mYehpmP4XUHlmLz?=
 =?us-ascii?q?O81B2a3idHoNWSILw9nN7QjmwkJjL2iFx4LkVnqHxMthaMK3YmcX2iI78sBLB7?=
 =?us-ascii?q?2Y7L1CnStpvFW4qRjdbuR6njcY0fEu8mIVg/kVuAoxySWQGrUSHUhbPSP2jRiJ?=
 =?us-ascii?q?4c6xrL5LZGmxa7i/z1RxncquDLyZpgFcWXD5eootHCNq78V/Nk7M32P36o3+ZN?=
 =?us-ascii?q?bQatcTvAWOkxjcl+hVNI4xlv0SiCp7PmL9uGcpyu8hghxowJG6p5OHK2R28aK9?=
 =?us-ascii?q?Ax5YMCD1ZswJ9jHsi6ZegtiZ34S1Epp9HTULWYPiTei0HzIKqfTnKwGOHSUnpX?=
 =?us-ascii?q?iBHrrfGRKf5F1ir3LSCJ2rM3CXJH8EzdRtXhWdJUpfgBwKUzU+hJI2CgeqxMn5?=
 =?us-ascii?q?ekdj+j8R/kL4qgdLyu9wNRnwSGLfqxmzajsuVJiTNhlW7hxB50fIN8yR9PlzEj?=
 =?us-ascii?q?pc/p2gqgyNN2Oaax5JDWEPRkyLGVTjMqOy6tnH9uiSHvC+IOfWYbWStexeUO+F?=
 =?us-ascii?q?xJKo0ot75jaMK9+APn94A/0g3UpDW395Ft/dmzUOTSwXii3MY9SapBe65i14sM?=
 =?us-ascii?q?S//O73VwLo4IuFE6FSPsl3+xCqnaeDMPadhCZnJjZZ1ZMMxn7IxKIc3F4IjCFu?=
 =?us-ascii?q?eCeiEa4dtS7WV6/Qnq5XDxgGayJ8LsdI7qQ83hVTNs7fkN/6yrl4jvstAVdfSV?=
 =?us-ascii?q?Phgt2pZdANI2ylLlzHGV2ENK6YKjzL2c33ZaK8RKZUjOVVsR2wpDmaH1XiPjSF?=
 =?us-ascii?q?iznmSRSvPftQgyGcORxUoJu9fQp1CWj/UNLmbQW2MMN2jT0z27E7mmnGOnIcMT?=
 =?us-ascii?q?didUNAtbmQ7SJegvViFG1N9HtlLe+YmymH6+nUMIoZsfxuAi5sjeJV/Gw6y6dJ?=
 =?us-ascii?q?7CFDXPF0mDHdrthro1GnlOmA0jtmUBpUpTZNi4KGpkFiOaTf9pldVnfI5hMN7W?=
 =?us-ascii?q?OMCxsUo9tpEMHgu6dVyouHqKWmEz5C8s7F9IMgGs3RIcaOeC46LQfsHTfQBSMO?=
 =?us-ascii?q?SjKmPHzFgFZU1vaI+SvGgII9r83HmJMJAo5GHAgkC/gaA0M9NNwfKYh6X3Uvlr?=
 =?us-ascii?q?vN351A3ma3sBSEHJYShZvATP/HRKy3cDs=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AqAACXghBch0O0hNFlHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGCbH8nCowKjXIIJRSXPoF2KRMBhy4iNAkNAQMBAQEBAQECARMBAQEIDQk?=
 =?us-ascii?q?IKS+CNiQBgmEBAQEBAgEBAiRSBgkBAQoOBgQuA1QGDQEFAgEBAYMcgXoIBaZ1M?=
 =?us-ascii?q?4VAhHKMO4IWgREnDIJfhFoMhXYCgSoBiAaGVDZSjyhGBgMNkUAGGIl4h0oskh+?=
 =?us-ascii?q?IL4IOcFCBHoFOgicXjioyAQExgQQBAQEOiHUBJYEIgR8BAQ?=
X-IPAS-Result: =?us-ascii?q?A0AqAACXghBch0O0hNFlHQEBBQEHBQGBUQgBCwGCbH8nCow?=
 =?us-ascii?q?KjXIIJRSXPoF2KRMBhy4iNAkNAQMBAQEBAQECARMBAQEIDQkIKS+CNiQBgmEBA?=
 =?us-ascii?q?QEBAgEBAiRSBgkBAQoOBgQuA1QGDQEFAgEBAYMcgXoIBaZ1M4VAhHKMO4IWgRE?=
 =?us-ascii?q?nDIJfhFoMhXYCgSoBiAaGVDZSjyhGBgMNkUAGGIl4h0oskh+IL4IOcFCBHoFOg?=
 =?us-ascii?q?icXjioyAQExgQQBAQEOiHUBJYEIgR8BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,343,1539673200"; 
   d="scan'208";a="44597942"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 11 Dec 2018 19:39:19 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726362AbeLLDgP (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 11 Dec 2018 22:36:15 -0500
Received: from szxga04-in.huawei.com ([45.249.212.190]:16115 "EHLO huawei.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726218AbeLLDgP (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 11 Dec 2018 22:36:15 -0500
Received: from DGGEMS408-HUB.china.huawei.com (unknown [172.30.72.59])
        by Forcepoint Email with ESMTP id B0116A38FA54C;
        Wed, 12 Dec 2018 11:36:11 +0800 (CST)
Received: from [127.0.0.1] (10.134.22.195) by DGGEMS408-HUB.china.huawei.com
 (10.3.19.208) with Microsoft SMTP Server id 14.3.408.0; Wed, 12 Dec 2018
 11:36:08 +0800
Subject: Re: [PATCH v2] f2fs: fix sbi->extent_list corruption issue
To: Sahitya Tummala <stummala@codeaurora.org>
CC: Jaegeuk Kim <jaegeuk@kernel.org>,
        <linux-f2fs-devel@lists.sourceforge.net>,
        <linux-kernel@vger.kernel.org>
References: <1543207640-31033-1-git-send-email-stummala@codeaurora.org>
 <20181127003050.GG55960@jaegeuk-macbookpro.roam.corp.google.com>
 <fc8c38f6-a039-7b63-d25c-966b0d4396d8@huawei.com>
 <20181129033239.GE9838@codeaurora.org>
 <20181130203339.GB71781@jaegeuk-macbookpro.roam.corp.google.com>
 <49285288-cf99-5f5a-0d1a-c2e0accd8d3d@huawei.com>
 <20181212031749.GF9838@codeaurora.org>
From: Chao Yu <yuchao0@huawei.com>
Message-ID: <0167a499-8479-6be4-946d-4446bd02ff63@huawei.com>
Date: Wed, 12 Dec 2018 11:36:08 +0800
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:52.0) Gecko/20100101
 Thunderbird/52.9.1
MIME-Version: 1.0
In-Reply-To: <20181212031749.GF9838@codeaurora.org>
Content-Type: text/plain; charset="windows-1252"
Content-Language: en-US
Content-Transfer-Encoding: 7bit
X-Originating-IP: [10.134.22.195]
X-CFilter-Loop: Reflected
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 2018/12/12 11:17, Sahitya Tummala wrote:
> On Fri, Dec 07, 2018 at 05:47:31PM +0800, Chao Yu wrote:
>> On 2018/12/1 4:33, Jaegeuk Kim wrote:
>>> On 11/29, Sahitya Tummala wrote:
>>>>
>>>> On Tue, Nov 27, 2018 at 09:42:39AM +0800, Chao Yu wrote:
>>>>> On 2018/11/27 8:30, Jaegeuk Kim wrote:
>>>>>> On 11/26, Sahitya Tummala wrote:
>>>>>>> When there is a failure in f2fs_fill_super() after/during
>>>>>>> the recovery of fsync'd nodes, it frees the current sbi and
>>>>>>> retries again. This time the mount is successful, but the files
>>>>>>> that got recovered before retry, still holds the extent tree,
>>>>>>> whose extent nodes list is corrupted since sbi and sbi->extent_list
>>>>>>> is freed up. The list_del corruption issue is observed when the
>>>>>>> file system is getting unmounted and when those recoverd files extent
>>>>>>> node is being freed up in the below context.
>>>>>>>
>>>>>>> list_del corruption. prev->next should be fffffff1e1ef5480, but was (null)
>>>>>>> <...>
>>>>>>> kernel BUG at kernel/msm-4.14/lib/list_debug.c:53!
>>>>>>> task: fffffff1f46f2280 task.stack: ffffff8008068000
>>>>>>> lr : __list_del_entry_valid+0x94/0xb4
>>>>>>> pc : __list_del_entry_valid+0x94/0xb4
>>>>>>> <...>
>>>>>>> Call trace:
>>>>>>> __list_del_entry_valid+0x94/0xb4
>>>>>>> __release_extent_node+0xb0/0x114
>>>>>>> __free_extent_tree+0x58/0x7c
>>>>>>> f2fs_shrink_extent_tree+0xdc/0x3b0
>>>>>>> f2fs_leave_shrinker+0x28/0x7c
>>>>>>> f2fs_put_super+0xfc/0x1e0
>>>>>>> generic_shutdown_super+0x70/0xf4
>>>>>>> kill_block_super+0x2c/0x5c
>>>>>>> kill_f2fs_super+0x44/0x50
>>>>>>> deactivate_locked_super+0x60/0x8c
>>>>>>> deactivate_super+0x68/0x74
>>>>>>> cleanup_mnt+0x40/0x78
>>>>>>> __cleanup_mnt+0x1c/0x28
>>>>>>> task_work_run+0x48/0xd0
>>>>>>> do_notify_resume+0x678/0xe98
>>>>>>> work_pending+0x8/0x14
>>>>>>>
>>>>>>> Fix this by cleaning up inodes, extent tree and nodes of those
>>>>>>> recovered files before freeing up sbi and before next retry.
>>>>>>>
>>>>>>> Signed-off-by: Sahitya Tummala <stummala@codeaurora.org>
>>>>>>> ---
>>>>>>> v2:
>>>>>>> -call evict_inodes() and f2fs_shrink_extent_tree() to cleanup inodes
>>>>>>>
>>>>>>>  fs/f2fs/f2fs.h     |  1 +
>>>>>>>  fs/f2fs/shrinker.c |  2 +-
>>>>>>>  fs/f2fs/super.c    | 13 ++++++++++++-
>>>>>>>  3 files changed, 14 insertions(+), 2 deletions(-)
>>>>>>>
>>>>>>> diff --git a/fs/f2fs/f2fs.h b/fs/f2fs/f2fs.h
>>>>>>> index 1e03197..aaee63b 100644
>>>>>>> --- a/fs/f2fs/f2fs.h
>>>>>>> +++ b/fs/f2fs/f2fs.h
>>>>>>> @@ -3407,6 +3407,7 @@ struct rb_entry *f2fs_lookup_rb_tree_ret(struct rb_root_cached *root,
>>>>>>>  bool f2fs_check_rb_tree_consistence(struct f2fs_sb_info *sbi,
>>>>>>>  						struct rb_root_cached *root);
>>>>>>>  unsigned int f2fs_shrink_extent_tree(struct f2fs_sb_info *sbi, int nr_shrink);
>>>>>>> +unsigned long __count_extent_cache(struct f2fs_sb_info *sbi);
>>>>>>>  bool f2fs_init_extent_tree(struct inode *inode, struct f2fs_extent *i_ext);
>>>>>>>  void f2fs_drop_extent_tree(struct inode *inode);
>>>>>>>  unsigned int f2fs_destroy_extent_node(struct inode *inode);
>>>>>>> diff --git a/fs/f2fs/shrinker.c b/fs/f2fs/shrinker.c
>>>>>>> index 9e13db9..7e3c13b 100644
>>>>>>> --- a/fs/f2fs/shrinker.c
>>>>>>> +++ b/fs/f2fs/shrinker.c
>>>>>>> @@ -30,7 +30,7 @@ static unsigned long __count_free_nids(struct f2fs_sb_info *sbi)
>>>>>>>  	return count > 0 ? count : 0;
>>>>>>>  }
>>>>>>>  
>>>>>>> -static unsigned long __count_extent_cache(struct f2fs_sb_info *sbi)
>>>>>>> +unsigned long __count_extent_cache(struct f2fs_sb_info *sbi)
>>>>>>>  {
>>>>>>>  	return atomic_read(&sbi->total_zombie_tree) +
>>>>>>>  				atomic_read(&sbi->total_ext_node);
>>>>>>> diff --git a/fs/f2fs/super.c b/fs/f2fs/super.c
>>>>>>> index af58b2c..769e7b1 100644
>>>>>>> --- a/fs/f2fs/super.c
>>>>>>> +++ b/fs/f2fs/super.c
>>>>>>> @@ -3016,6 +3016,16 @@ static void f2fs_tuning_parameters(struct f2fs_sb_info *sbi)
>>>>>>>  	sbi->readdir_ra = 1;
>>>>>>>  }
>>>>>>>  
>>>>>>> +static void f2fs_cleanup_inodes(struct f2fs_sb_info *sbi)
>>>>>>> +{
>>>>>>> +	struct super_block *sb = sbi->sb;
>>>>>>> +
>>>>>>> +	sync_filesystem(sb);
>>>>>>
>>>>>> This writes another checkpoint, which would not be what this retrial intended.
>>>>>
>>>>> Actually, checkpoint will not be triggered due to SBI_POR_DOING flag check
>>>>> as below:
>>>>>
>>>>> int f2fs_sync_fs(struct super_block *sb, int sync)
>>>>> {
>>>>> ...
>>>>> 	if (unlikely(is_sbi_flag_set(sbi, SBI_POR_DOING)))
>>>>> 		return -EAGAIN;
>>>>> ...
>>>>> }
>>>>>
>>>>> And also all dirty data/node won't be persisted due to SBI_POR_DOING flag,
>>>>> IIUC.
>>>>>
>>>>
>>>> Thanks Chao for the clarification.
>>>>
>>>> Hi Jaegeuk,
>>>>
>>>> Do you still have any further concerns or comments on this patch?
>>>
>>> Could you try the below first?
>>>
>>> --  How about adding a condition in f2fs_may_extent_tree() when adding extents?
>>> -- Likewise, if (shrinker is not registered) return false;
>>>
>>> If we can fix what you described directly, I don't want to rely on such the
>>> assumptions saying we won't do checkpoint. This flow literally says syncing
>>> and evicting cached objects, which opposed to what we'd like to drop all caches
>>> and restart fill_super again.
>>>
>>> Let me consider this as a final resolution.
>>
>> Jaegeuk,
>>
>> Still I want to ask, what kind of scenario we have to add retry logic in
>> fill_super for? As in android scenario, it must be extreme rare case that
>> system runs out-of-memory in boot time...at least, I didn't get any kind of
>> report like that.
>>
> Hi Chao,

Hi Sahitya,

Thanks for letting me know that, I git-blamed the code, and found the
original intention is like what you described:

commit ed2e621a95d704e6a4e904cc00524e8cbddda0c2
Author: Jaegeuk Kim <jaegeuk@kernel.org>
Date:   Fri Aug 8 15:37:41 2014 -0700

    f2fs: give a chance to mount again when encountering errors

    This patch gives another chance to try mount process when we encounter
an error.
    This makes an effect on the roll-forward recovery failures as well.

But I doubt that if we failed in recovery, maybe there is corruption in
this image, would it be better to fail the mount, and let user fsck it and
retry the mount? otherwise, the corruption may be expanded...

Thanks,

> 
> In my case, the first boot up has a failure in recovery as below -
> 
> F2FS-fs (mmcblk0p75): find_fsync_dnodes: detect looped node chain, blkaddr:1979471, next:1979472
> F2FS-fs (mmcblk0p75): Cannot recover all fsync data errno=-22
> 
> But in the second attempt, retry will be set to false and because of that
> recover_fsync_data() is skipped. This helped mount to be successful in
> the second attempt. 
> 
> Thanks,
> 
>> Thanks,
>>
>>>
>>> Thanks,
>>>
>>>>
>>>> Thanks,
>>>> Sahitya.
>>>>
>>>>> Thanks,
>>>>>
>>>>>> How about adding a condition in f2fs_may_extent_tree() when adding extents?
>>>>>> Likewise, if (shrinker is not registered) return false;
>>>>>>
>>>>>>
>>>>>>> +	shrink_dcache_sb(sb);
>>>>>>> +	evict_inodes(sb);
>>>>>>> +	f2fs_shrink_extent_tree(sbi, __count_extent_cache(sbi));
>>>>>>> +}
>>>>>>> +
>>>>>>>  static int f2fs_fill_super(struct super_block *sb, void *data, int silent)
>>>>>>>  {
>>>>>>>  	struct f2fs_sb_info *sbi;
>>>>>>> @@ -3402,6 +3412,8 @@ static int f2fs_fill_super(struct super_block *sb, void *data, int silent)
>>>>>>>  	 * falls into an infinite loop in f2fs_sync_meta_pages().
>>>>>>>  	 */
>>>>>>>  	truncate_inode_pages_final(META_MAPPING(sbi));
>>>>>>> +	/* cleanup recovery and quota inodes */
>>>>>>> +	f2fs_cleanup_inodes(sbi);
>>>>>>>  	f2fs_unregister_sysfs(sbi);
>>>>>>>  free_root_inode:
>>>>>>>  	dput(sb->s_root);
>>>>>>> @@ -3445,7 +3457,6 @@ static int f2fs_fill_super(struct super_block *sb, void *data, int silent)
>>>>>>>  	/* give only one another chance */
>>>>>>>  	if (retry) {
>>>>>>>  		retry = false;
>>>>>>> -		shrink_dcache_sb(sb);
>>>>>>>  		goto try_onemore;
>>>>>>>  	}
>>>>>>>  	return err;
>>>>>>> -- 
>>>>>>> Qualcomm India Private Limited, on behalf of Qualcomm Innovation Center, Inc.
>>>>>>> Qualcomm Innovation Center, Inc. is a member of Code Aurora Forum, a Linux Foundation Collaborative Project.
>>>>>>
>>>>>> .
>>>>>>
>>>>>
>>>>
>>>> -- 
>>>> --
>>>> Sent by a consultant of the Qualcomm Innovation Center, Inc.
>>>> The Qualcomm Innovation Center, Inc. is a member of the Code Aurora Forum.
>>>
>>> .
>>>
>>
> 

