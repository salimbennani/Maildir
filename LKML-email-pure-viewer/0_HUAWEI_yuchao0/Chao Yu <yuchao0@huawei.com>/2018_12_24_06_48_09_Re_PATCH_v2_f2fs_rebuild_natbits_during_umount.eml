Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 16:02:49 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id B54C858048A;
	Sun, 23 Dec 2018 22:49:24 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by fmsmga006-1.fm.intel.com with ESMTP; 23 Dec 2018 22:49:23 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Ad1t0YhE5pITKQT3ciY02B51GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75pMi9bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjmk8qxlSgLniD?=
 =?us-ascii?q?0fOjAk7m/XhMx+gqFVrh2vqBNwwZLbbo6UNPplZqPQf8gXRXZDU8tLSyBNHo2x?=
 =?us-ascii?q?YosJAuEcPehYtY79p14WoBagBQmjHuTvwSJKiX/rwKY31OQgERza0wwgBd0Ot2?=
 =?us-ascii?q?jYoc71NKcPS++0wrfHzTTZY/xK3jf97ZHFfxY8qv+PRbJ9adTdxVUrGg/fk1md?=
 =?us-ascii?q?p5LpMymI2ukOr2SX9ettWOC3h2I6tw19uCWjy8kjh4XTmI4Z1ErI+Th9zYs1Pd?=
 =?us-ascii?q?G1R052bcS6HJZfsyyWLZV6Tt48T21ypSo3zqEKtJimdyYQ0psn3QTQa/mffoiI?=
 =?us-ascii?q?/B3jUOGRLC9mhHJqZr2/nQy+8Uu+xe3mUMm7zlJKojBCktnWuXABzx3T6s6ZRf?=
 =?us-ascii?q?th5kqtxyqD2gTJ5u1ZL004i7DXJ4Miz7IsjJYesEbOEjfzmErsja+Wcksk+vKv?=
 =?us-ascii?q?6+Tierjmop6cN4lpigDxK6gumdKwAf4+MgcQW2iX4OO81bPl/ULnWrVHleM2kq?=
 =?us-ascii?q?bHv5DAP8gbpbC2AxVT0ok97xazFTCm0M4XnXUfNlJKZAqHj5T1O1HJOP34Cfa/?=
 =?us-ascii?q?g1eynztxyPHGI6bsApHMLnjFjbfgcqxx609ayAov099f44hYBa0GIPL2QkXxrs?=
 =?us-ascii?q?DXDgclMwyoxObqENV92ZkfWWKTGKCZN7nesV+V5u01JemMa5QYuDL8K/gj+v7v?=
 =?us-ascii?q?gmU1mV4bfam1w5QXbGq0EehhI0WceXDsmMsOEX8WvgoiS+znkEeNUSVTZ3a1XK?=
 =?us-ascii?q?Iw/Cs7B5ikDYrYQoCtgbqB3Dq0H5FMZ2BGDEyMHmnsd4meR/gMbyeSKNd7kjMY?=
 =?us-ascii?q?TbihV5Mh1Ra2uQ/50bVnKPDY+ikZtZ350th16PbelRUz9TxyEsSc3HuBT2Bynm?=
 =?us-ascii?q?MUWTA22LpzrlB6yleGyaJ4meBXFcRP5/NVVQc3LYPTwPZkC9/sQA7Bfs2GSFC9?=
 =?us-ascii?q?Qtq4BzE9SdYxw9wLY0Z5ANiiihHD3yy3A74ajbCLBZo08r7C0Hj1Pcpy13HG1K?=
 =?us-ascii?q?w5hVk8XsRPLXGmhrJ49wXLGoHGiVuZmLiweaQcxiHN8nyDwnSIvExDVA5wUKPF?=
 =?us-ascii?q?XW0QZ0fMrNT54F/CQKGqCbg9LgRBzsuCILNQatL1lVVGWOvjONPGbmKtmmewAB?=
 =?us-ascii?q?GIxq+MbIvqYWkdwD/RCE8ekwAX/HaGMwc+Czylo2LfCjxuCF3ub1nt8el4tHO0?=
 =?us-ascii?q?UEs0wxuWYE1m0rq/4gQViuCES/MPwrIEvz8spC9wHFmj0NPZFdqBqxB6c6VBfN?=
 =?us-ascii?q?wy+lFH1WHetwxjJZGgK6FihlgDcwV4pU/u1hN3Cplensgutn8l0A1yKaeA2lNb?=
 =?us-ascii?q?azyYxYzwOqHQKmTq/BGvdrTa1U3E3NeX+qcA8vI4q1r4sQGtF0oi9Whn0tZP33?=
 =?us-ascii?q?ud4JXKEBQdUZbrXkkr8Bh6oqnQYjMh6IPMyX1sLa60vyfY29IoGOQq0AygcMpY?=
 =?us-ascii?q?MK+eEg/9DdcaB8m3JOM2gVepag8LM/5I9K4zOcOrbP+G2K+tPOZ9kzOql2VH4I?=
 =?us-ascii?q?Zh0k2S8ypwUPLH35EAw/uAxAuISy/8jEu9ssDwgY1FZTASEnC/yCT+H45Re6ty?=
 =?us-ascii?q?cJ0PCWevJc2329p/i4TsW35e6F6sGVcG1NW1dhqValz3xRdQ2lgPoXy7hSu4yC?=
 =?us-ascii?q?R5kzMzoaqF3yzOwOPieAAcOmFRR2lijlbsIY6qgNAcR0WoawkplB245Uf13aRb?=
 =?us-ascii?q?paJ/L3XNTkdMZST5M2ZiUq6ovLqYf8FP8I8osTlQUOmkYVGVULn9rwEY0yPiGW?=
 =?us-ascii?q?tT3zQ7dzCsupXkkB12kmOdLHBvrHXHfcF83wvQ5NvZRfRJxDoJWDF4iSXLBli7?=
 =?us-ascii?q?J9Sp/s+bl5bZvuC+SmKuTJtTcSbwwIOEtSu743BqABKlk/CynN3nDRY10Svh29?=
 =?us-ascii?q?Z2UiXIqQ72YpP32KSiLeJnYk5oCUf568p7GYFxiJE8hZ8O1ngBmpWa42AHnnzt?=
 =?us-ascii?q?PtVB1qLzd34NRT8Nw97I7wnpwkxjLnSVx43nUnWR2NduZ96/YmkOwCIy89hKCL?=
 =?us-ascii?q?uI7LxDhSZ1vl24rQfLbfl8hDgdz+Yu6GUBg+EIowctyiSdArYPHUhXJyDslhKI?=
 =?us-ascii?q?78ygo6VTfmqgbb+w1E9ml9C7EL6Cuh1cWGr+epo6BiB/9MJ/MFbR0HHp7oHkZc?=
 =?us-ascii?q?LdbdYSth2SjhfBgPJZKJM3lvoWmyVnPXjxsmEiy+4+lRZux421vJCbK2Vx+6K0?=
 =?us-ascii?q?GhxYOSfwZ8wN4THhl7pektyV34CyHZVhBzMLU4HzTf+zFDIStPLnNxuBETEmq3?=
 =?us-ascii?q?ebH6bfEhGb6Et8s33PFJWrPWmNJHYF1dViWAWdJEtHjQEUWzU6g4c5Fh2wy8zn?=
 =?us-ascii?q?akt5/TcR5lj3qhZXzuJoNh//UnrQpQuyazc0ToSfIwRS7g1Y+0jVNsme5PppHy?=
 =?us-ascii?q?5E5p2hsBCNKmuDagRIE24JW0+EB1PiPrW05tnA6e+YBuWgIPvUfLWOsvdTV/OJ?=
 =?us-ascii?q?xZKpz4tn8CyANsSJPnl+EfI73lBPUmx+G8Tcgz8PUTAYlzrRb86Hoxex4jd4rt?=
 =?us-ascii?q?2k//TxRg3u5ZGDC79TMdh0/xC2gKGDN/OfhSpjKDZY0I8MymHMyLQFwFESjCRu?=
 =?us-ascii?q?fSG3EbscrS7NUL7QmqhPAh4HaiNzMdFE4L4m0gZROc7UlNX126V8jv40DVdFSF?=
 =?us-ascii?q?PgltuoZcwMP2GyKlfHCFyXO7SBID3B29v3br+kSb1MkOVUsAW9uDaBHE/lOzSD?=
 =?us-ascii?q?lj/pWAiuMOFMli6bOhNetZq5chZsD2jjUd3nZge6MN9xkT0537k0imnWOm4bND?=
 =?us-ascii?q?gvO39K++mS5C5Xj+h8M29M9HxoKa+DgSnPvMfCLZNDmvtiBWxFiqoO8Wkxy7JS?=
 =?us-ascii?q?tAlEWfVqlSqUpdlr9QL12tKTwyZqBUId4g1Ag5iG6B1v?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AaAAC4gCBch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgmx/JwqMDY1ZLRSXT4FzLRMBhzAiNAkNAQMBAQEBAQECARMBAQE?=
 =?us-ascii?q?KCwkIKS+COiKCbgEBAQECAQECJFIGCQEBChguA1QGDQEFAgEBAYMdgXoIBag+M?=
 =?us-ascii?q?4VAhF6MP4IWgREngmuKYAKBKgGIIoZfNpBpBgMNikqHDAYYgWCFIYMLh1otkn2?=
 =?us-ascii?q?IRYIOcIFugU6CJxeOKjIBATGBBAEBAQ6LayuBAYEfAQE?=
X-IPAS-Result: =?us-ascii?q?A0AaAAC4gCBch0O0hNFjHAEBAQQBAQcEAQGBUQcBAQsBgmx?=
 =?us-ascii?q?/JwqMDY1ZLRSXT4FzLRMBhzAiNAkNAQMBAQEBAQECARMBAQEKCwkIKS+COiKCb?=
 =?us-ascii?q?gEBAQECAQECJFIGCQEBChguA1QGDQEFAgEBAYMdgXoIBag+M4VAhF6MP4IWgRE?=
 =?us-ascii?q?ngmuKYAKBKgGIIoZfNpBpBgMNikqHDAYYgWCFIYMLh1otkn2IRYIOcIFugU6CJ?=
 =?us-ascii?q?xeOKjIBATGBBAEBAQ6LayuBAYEfAQE?=
X-IronPort-AV: E=Sophos;i="5.56,391,1539673200"; 
   d="scan'208";a="58687245"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 23 Dec 2018 22:48:21 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726720AbeLXGsS (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Mon, 24 Dec 2018 01:48:18 -0500
Received: from szxga04-in.huawei.com ([45.249.212.190]:17056 "EHLO huawei.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1725933AbeLXGsR (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 24 Dec 2018 01:48:17 -0500
Received: from DGGEMS406-HUB.china.huawei.com (unknown [172.30.72.59])
        by Forcepoint Email with ESMTP id 1BF154E5DA31B;
        Mon, 24 Dec 2018 14:48:14 +0800 (CST)
Received: from [127.0.0.1] (10.134.22.195) by DGGEMS406-HUB.china.huawei.com
 (10.3.19.206) with Microsoft SMTP Server id 14.3.408.0; Mon, 24 Dec 2018
 14:48:10 +0800
Subject: Re: [PATCH v2] f2fs: rebuild nat_bits during umount
To: <jaegeuk@kernel.org>
CC: <linux-f2fs-devel@lists.sourceforge.net>,
        <linux-kernel@vger.kernel.org>, <chao@kernel.org>
References: <20181213085020.49241-1-yuchao0@huawei.com>
From: Chao Yu <yuchao0@huawei.com>
Message-ID: <461b1a02-977a-00a7-cf5b-4869355fa8f0@huawei.com>
Date: Mon, 24 Dec 2018 14:48:09 +0800
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:52.0) Gecko/20100101
 Thunderbird/52.9.1
MIME-Version: 1.0
In-Reply-To: <20181213085020.49241-1-yuchao0@huawei.com>
Content-Type: text/plain; charset="windows-1252"
Content-Language: en-US
Content-Transfer-Encoding: 7bit
X-Originating-IP: [10.134.22.195]
X-CFilter-Loop: Reflected
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 2018/12/13 16:50, Chao Yu wrote:
> If all free_nat_bitmap are available, we can rebuild nat_bits from
> free_nat_bitmap entirely during umount, let's make another chance
> to reenable nat_bits for image.

Jaegeuk,

Could you please have a try with this patch?

I just did xfstest on it with below method, and there is no data corruption
reported from fsck:

- let fill_super preload all NAT blocks to enable free_nid_bitmap entirely.
- don't add nat_bits during mkfs image.

Thanks,

> 
> Signed-off-by: Chao Yu <yuchao0@huawei.com>
> ---
> v2:
> - fix bugs in f2fs_enable_nat_bits()
> - add kmsg to record nat_bits {en,dis}abling operations
> - fix to validate {full,empty}_nat_bits in __get_nat_bitmaps()
> 
>  fs/f2fs/checkpoint.c | 20 +++++++++---
>  fs/f2fs/f2fs.h       | 21 ++-----------
>  fs/f2fs/node.c       | 72 +++++++++++++++++++++++++++++++++++++++-----
>  3 files changed, 82 insertions(+), 31 deletions(-)
> 
> diff --git a/fs/f2fs/checkpoint.c b/fs/f2fs/checkpoint.c
> index 623536b8e0c0..fa0eb56f1703 100644
> --- a/fs/f2fs/checkpoint.c
> +++ b/fs/f2fs/checkpoint.c
> @@ -1225,12 +1225,22 @@ static void update_ckpt_flags(struct f2fs_sb_info *sbi, struct cp_control *cpc)
>  	struct f2fs_checkpoint *ckpt = F2FS_CKPT(sbi);
>  	unsigned long flags;
>  
> -	spin_lock_irqsave(&sbi->cp_lock, flags);
> +	if (cpc->reason & CP_UMOUNT) {
> +		if (le32_to_cpu(ckpt->cp_pack_total_block_count) >
> +			sbi->blocks_per_seg - NM_I(sbi)->nat_bits_blocks) {
> +			clear_ckpt_flags(sbi, CP_NAT_BITS_FLAG);
> +			f2fs_msg(sbi->sb, KERN_NOTICE,
> +				"Disable nat_bits due to no space");
> +		} else if (!is_set_ckpt_flags(sbi, CP_NAT_BITS_FLAG) &&
> +						f2fs_nat_bitmap_enabled(sbi)) {
> +			f2fs_enable_nat_bits(sbi);
> +			set_ckpt_flags(sbi, CP_NAT_BITS_FLAG);
> +			f2fs_msg(sbi->sb, KERN_NOTICE,
> +				"Rebuild and enable nat_bits");
> +		}
> +	}
>  
> -	if ((cpc->reason & CP_UMOUNT) &&
> -			le32_to_cpu(ckpt->cp_pack_total_block_count) >
> -			sbi->blocks_per_seg - NM_I(sbi)->nat_bits_blocks)
> -		disable_nat_bits(sbi, false);
> +	spin_lock_irqsave(&sbi->cp_lock, flags);
>  
>  	if (cpc->reason & CP_TRIMMED)
>  		__set_ckpt_flags(ckpt, CP_TRIMMED_FLAG);
> diff --git a/fs/f2fs/f2fs.h b/fs/f2fs/f2fs.h
> index 7cec897146a3..869a36b6a28f 100644
> --- a/fs/f2fs/f2fs.h
> +++ b/fs/f2fs/f2fs.h
> @@ -1618,25 +1618,6 @@ static inline void clear_ckpt_flags(struct f2fs_sb_info *sbi, unsigned int f)
>  	spin_unlock_irqrestore(&sbi->cp_lock, flags);
>  }
>  
> -static inline void disable_nat_bits(struct f2fs_sb_info *sbi, bool lock)
> -{
> -	unsigned long flags;
> -
> -	/*
> -	 * In order to re-enable nat_bits we need to call fsck.f2fs by
> -	 * set_sbi_flag(sbi, SBI_NEED_FSCK). But it may give huge cost,
> -	 * so let's rely on regular fsck or unclean shutdown.
> -	 */
> -
> -	if (lock)
> -		spin_lock_irqsave(&sbi->cp_lock, flags);
> -	__clear_ckpt_flags(F2FS_CKPT(sbi), CP_NAT_BITS_FLAG);
> -	kfree(NM_I(sbi)->nat_bits);
> -	NM_I(sbi)->nat_bits = NULL;
> -	if (lock)
> -		spin_unlock_irqrestore(&sbi->cp_lock, flags);
> -}
> -
>  static inline bool enabled_nat_bits(struct f2fs_sb_info *sbi,
>  					struct cp_control *cpc)
>  {
> @@ -2952,6 +2933,7 @@ int f2fs_truncate_inode_blocks(struct inode *inode, pgoff_t from);
>  int f2fs_truncate_xattr_node(struct inode *inode);
>  int f2fs_wait_on_node_pages_writeback(struct f2fs_sb_info *sbi,
>  					unsigned int seq_id);
> +bool f2fs_nat_bitmap_enabled(struct f2fs_sb_info *sbi);
>  int f2fs_remove_inode_page(struct inode *inode);
>  struct page *f2fs_new_inode_page(struct inode *inode);
>  struct page *f2fs_new_node_page(struct dnode_of_data *dn, unsigned int ofs);
> @@ -2975,6 +2957,7 @@ int f2fs_recover_xattr_data(struct inode *inode, struct page *page);
>  int f2fs_recover_inode_page(struct f2fs_sb_info *sbi, struct page *page);
>  int f2fs_restore_node_summary(struct f2fs_sb_info *sbi,
>  			unsigned int segno, struct f2fs_summary_block *sum);
> +void f2fs_enable_nat_bits(struct f2fs_sb_info *sbi);
>  int f2fs_flush_nat_entries(struct f2fs_sb_info *sbi, struct cp_control *cpc);
>  int f2fs_build_node_manager(struct f2fs_sb_info *sbi);
>  void f2fs_destroy_node_manager(struct f2fs_sb_info *sbi);
> diff --git a/fs/f2fs/node.c b/fs/f2fs/node.c
> index 30a4427aaa94..9f55f2cb0dff 100644
> --- a/fs/f2fs/node.c
> +++ b/fs/f2fs/node.c
> @@ -2036,6 +2036,24 @@ static void __move_free_nid(struct f2fs_sb_info *sbi, struct free_nid *i,
>  	}
>  }
>  
> +bool f2fs_nat_bitmap_enabled(struct f2fs_sb_info *sbi)
> +{
> +	struct f2fs_nm_info *nm_i = NM_I(sbi);
> +	unsigned int i;
> +	bool ret = true;
> +
> +	down_read(&nm_i->nat_tree_lock);
> +	for (i = 0; i < nm_i->nat_blocks; i++) {
> +		if (!test_bit_le(i, nm_i->nat_block_bitmap)) {
> +			ret = false;
> +			break;
> +		}
> +	}
> +	up_read(&nm_i->nat_tree_lock);
> +
> +	return ret;
> +}
> +
>  static void update_free_nid_bitmap(struct f2fs_sb_info *sbi, nid_t nid,
>  							bool set, bool build)
>  {
> @@ -2720,6 +2738,43 @@ static void __update_nat_bits(struct f2fs_sb_info *sbi, nid_t start_nid,
>  		__clear_bit_le(nat_index, nm_i->full_nat_bits);
>  }
>  
> +void f2fs_enable_nat_bits(struct f2fs_sb_info *sbi)
> +{
> +	struct f2fs_nm_info *nm_i = NM_I(sbi);
> +	int nat_ofs;
> +
> +	down_read(&nm_i->nat_tree_lock);
> +
> +	for (nat_ofs = 0; nat_ofs < nm_i->nat_blocks; nat_ofs++) {
> +		int valid = 0, nid_ofs = 0;
> +
> +		if (nat_ofs == 0) {
> +			valid = 1;
> +			nid_ofs = 1;
> +		}
> +
> +		for (; nid_ofs < NAT_ENTRY_PER_BLOCK; nid_ofs++) {
> +			if (!test_bit_le(nid_ofs,
> +					nm_i->free_nid_bitmap[nat_ofs]))
> +				valid++;
> +		}
> +
> +		if (valid == 0) {
> +			__set_bit_le(nat_ofs, nm_i->empty_nat_bits);
> +			__clear_bit_le(nat_ofs, nm_i->full_nat_bits);
> +			continue;
> +		}
> +
> +		__clear_bit_le(nat_ofs, nm_i->empty_nat_bits);
> +		if (valid == NAT_ENTRY_PER_BLOCK)
> +			__set_bit_le(nat_ofs, nm_i->full_nat_bits);
> +		else
> +			__clear_bit_le(nat_ofs, nm_i->full_nat_bits);
> +	}
> +
> +	up_read(&nm_i->nat_tree_lock);
> +}
> +
>  static int __flush_nat_entry_set(struct f2fs_sb_info *sbi,
>  		struct nat_entry_set *set, struct cp_control *cpc)
>  {
> @@ -2862,15 +2917,18 @@ static int __get_nat_bitmaps(struct f2fs_sb_info *sbi)
>  	__u64 cp_ver = cur_cp_version(ckpt);
>  	block_t nat_bits_addr;
>  
> -	if (!enabled_nat_bits(sbi, NULL))
> -		return 0;
> -
>  	nm_i->nat_bits_blocks = F2FS_BLK_ALIGN((nat_bits_bytes << 1) + 8);
>  	nm_i->nat_bits = f2fs_kzalloc(sbi,
>  			nm_i->nat_bits_blocks << F2FS_BLKSIZE_BITS, GFP_KERNEL);
>  	if (!nm_i->nat_bits)
>  		return -ENOMEM;
>  
> +	nm_i->full_nat_bits = nm_i->nat_bits + 8;
> +	nm_i->empty_nat_bits = nm_i->full_nat_bits + nat_bits_bytes;
> +
> +	if (!enabled_nat_bits(sbi, NULL))
> +		return 0;
> +
>  	nat_bits_addr = __start_cp_addr(sbi) + sbi->blocks_per_seg -
>  						nm_i->nat_bits_blocks;
>  	for (i = 0; i < nm_i->nat_bits_blocks; i++) {
> @@ -2887,13 +2945,13 @@ static int __get_nat_bitmaps(struct f2fs_sb_info *sbi)
>  
>  	cp_ver |= (cur_cp_crc(ckpt) << 32);
>  	if (cpu_to_le64(cp_ver) != *(__le64 *)nm_i->nat_bits) {
> -		disable_nat_bits(sbi, true);
> +		clear_ckpt_flags(sbi, CP_NAT_BITS_FLAG);
> +		f2fs_msg(sbi->sb, KERN_NOTICE,
> +			"Disable nat_bits due to incorrect cp_ver (%llu, %llu)",
> +			cp_ver, le64_to_cpu(*(__le64 *)nm_i->nat_bits));
>  		return 0;
>  	}
>  
> -	nm_i->full_nat_bits = nm_i->nat_bits + 8;
> -	nm_i->empty_nat_bits = nm_i->full_nat_bits + nat_bits_bytes;
> -
>  	f2fs_msg(sbi->sb, KERN_NOTICE, "Found nat_bits in checkpoint");
>  	return 0;
>  }
> 

