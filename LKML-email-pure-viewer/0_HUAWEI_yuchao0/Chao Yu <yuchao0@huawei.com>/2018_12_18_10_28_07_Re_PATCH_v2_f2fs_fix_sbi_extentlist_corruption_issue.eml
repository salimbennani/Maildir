Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  18 Dec 2018 21:09:14 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 5AE3C5805F0;
	Tue, 18 Dec 2018 02:28:19 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by fmsmga001-1.fm.intel.com with ESMTP; 18 Dec 2018 02:28:18 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AXcZ3Vh8JyMy9S/9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1uofIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CWGRPQMhRWSxCDI2y?=
 =?us-ascii?q?YYQAAOgOMvpXoYn8vFsOtRmzCBKwBO7t0DJEmmP60KM63uknDArI3BYgH9ULsH?=
 =?us-ascii?q?nMstj1NL0dUeeox6bK0DXIcvRb2Dfg6IfUchAuu/aMUa5rfMrR1EkgDQ3EgUuR?=
 =?us-ascii?q?qYD/IzyV0eENvnGd4uF9Vuyvk3Yqpx9trjWr3Msgl4fEipwPxlzZ9ih13Jw5KN?=
 =?us-ascii?q?y6RUJjfNKoDIFcuzyUOoZ5WM8uXX9ktDwnxrACuZO3ZCcHxZQ9yxLBZPGKd5KE?=
 =?us-ascii?q?7gz+WOqPOzt0mXZodK+5ih2v60av0Pf8WdOx0FtSripKjN3MtncV2hzN5ciIVO?=
 =?us-ascii?q?F98l2i2TmRzQDT7P9LIUQumarcMZ4hzaY8lpsVsUvdAi/7gFv6gLOSe0k+5+Sl?=
 =?us-ascii?q?5frrbq/7qpKfK4N4kADzP6Y2lsy6G+s4MwwOX2aB+eS70b3u5Un5QLRMjv0rna?=
 =?us-ascii?q?jVqZPaKtoBpq6/HQBV1p8v6xGxDjegztsYh2IKLExKeB2ZlYjlIVLOL+7iDfe5?=
 =?us-ascii?q?nVuslC1nx/fcPr3uGpnNNGTMkK/9fbZh7E5R0A4zzdFc551KEL0AL+/zV1T1tN?=
 =?us-ascii?q?zZCB85LgO1z/zmCNV7yoMRR2aPDrWFP6PVtF+C/vgvLPWUZI8JpDb9LOAo5/70?=
 =?us-ascii?q?gn84hV8SZ66p0YEXaHClBPtmJUqZbGHogtcAF2cKowU/QPbriF2ETT5ceXKyU7?=
 =?us-ascii?q?gg6TE8DYKsFZ3DSZy1gLydwCe7GYVbZmJBCl+SC3vodIKEW/EKaCKVOcJhlj0E?=
 =?us-ascii?q?Vb68S44uzx2utQn6y6Z5IerQ4CEXqZXj1N1t7e3JiR4y7SB0D9ia02yVVW50hW?=
 =?us-ascii?q?MIRzg13Kxlu0xy0FWD3LN8g/xZE9xT+vxIXh07NZ7a0+x1FdTyVhjdcdeOTVas?=
 =?us-ascii?q?Ws+mDi0pTtIt398OZF5wG9a4gRDFxSaqB74VmKaNBJw76a/c23nxJ8Bgy3fJzq?=
 =?us-ascii?q?Uhjl8mQtdROm2inKJw6w/TB4vRmUWDi6mqbbgc3DLK9Gqb0GWBpl9YXxBqXaXF?=
 =?us-ascii?q?R38fYFDWosr/5k/FS7+uCrEnMg9axM6GK6tKbMDpjFpcSPfiPtTef3y+m2OqCR?=
 =?us-ascii?q?mUwbOMaZLge38B0yXFFEgEjwcT8G6bOgckGCeuvXjSDDx0GlLpeEPj7+9+pWi/?=
 =?us-ascii?q?Tk81yQGKckJg26C0+h4TmfyTVfcT0qgYtycmrjV+BEy90M7OC9qcuwphe71RYc?=
 =?us-ascii?q?884FdC0mLZqwx9P5y6I6B+nFIedB53v0fv1xVxBYVNiswqrHIszApvJqOUylJB?=
 =?us-ascii?q?dzWE3Z/uPr3bMHX9/Beqa6TOwFHRzM6W+rsT6PQ/s1jspgWpGVQt8np509hZyW?=
 =?us-ascii?q?CT5ojXAwUIV5LxUUE39wZhqrHeYyk94Z7U1HJ2Pam1tD/Cx8wmBO8/xhm8eNdf?=
 =?us-ascii?q?NbuOFBXuHM0CG8iuNOsqlkCpbxIZJuxd6LQ4PsKmd/Sc3q6rM/1tnDanjWRB/Y?=
 =?us-ascii?q?B83ViA9yt6Su7UwZkFx+uU0ReAVzf5lF2hqNz4mZhYZTEOGWqy0TLkBI9NaaJo?=
 =?us-ascii?q?Z4YEFGCuL9exxtpgnZ7tWmdU+0K5CFMCxcCmZwCSb1v73QBL0UQXoHqnmTa3zj?=
 =?us-ascii?q?BukjEpqLaf0zLKw+j4aBUHPWtLTnF4jVjwOYi0k8waXE+wYgkplRup/0b7y7JA?=
 =?us-ascii?q?pKRiKWneWkNIfynwL2F/Xaq8rLuCY8hT6Jw2tSVbSvizYVefSrTluRsVzzvjH3?=
 =?us-ascii?q?dCxDA8bzyquI/2nwZ5iGKeK3Z/tmHZdttzxRfc5dzcQ+Be3jwdSSl8iDnXAEW8?=
 =?us-ascii?q?Ptaz8dWVkZfDrv6xV2a7WpJPdinryJuKtDGn6m1yHR2/g/ezl8XnEAcg1i/3zd?=
 =?us-ascii?q?tqVSTOrBvnZonr1qK6Mf9of0VyBV/87dZ6FZ96kocqmJ4Q3n0ajI2P/XUbiWfz?=
 =?us-ascii?q?Lclb2aXmYXoOXzELwsTZ4Aj42EJ5KHKJyJn0VnGcwstnetm7bXka2iM778BWFq?=
 =?us-ascii?q?iU6KZIkjdyolq9tQjRe+Ryni8Byfsy734Xm+QJuAsuziqHGLwTE1dXPTfwlxuW?=
 =?us-ascii?q?9dCxt7tYZHygcbWr0Ep+nNahDKyNow1GWXb5fIsiEjF07sllLF3M13jz4Jn+eN?=
 =?us-ascii?q?bMddITqgGUkxDYguhJL5Ixk+AGhCt9NmL7oH0l0PU7jR110JG+vYiHLXht/a2j?=
 =?us-ascii?q?Dh5ZMD31e90c+jX3galCmcaW2pilHo99FTUTQJvoUfWoHSoJuvv9MAaOFCA8pm?=
 =?us-ascii?q?2fGbrCBgKf7EZmr3TSE5GkLX2XJX8Zzcl8SxmZPkBQnAcUXDAilJ4jCg+q3NDh?=
 =?us-ascii?q?cFt+5j0J5F73sB5MxfxzNxXlTmfTvgSoaio3SJiCKhpZ9BpC6lzRMcyf6OJzAi?=
 =?us-ascii?q?5Z8oegrAyLNmyUeQBIAXsVVUyDAlDpJqOu6sXY8+iEGuq+KOPDYLWJqexDTveI?=
 =?us-ascii?q?2Iig0o188zaXMcWPOHZiAuY/2kpCW3B5BsvYly8OSywRiyLCccqbqA2g9S1wq8?=
 =?us-ascii?q?C16O7rVx735YuTF7tSNs1i+xCojqeCNO6Qhyd5JSxb1pMWwn/Ix6YQ3EQPiyF1?=
 =?us-ascii?q?bDStFbUAtSjQTKPfgKNXDhgbaz9tO8tM9a4zwg5NOcvDgNPvyrF4luI1C0tCVV?=
 =?us-ascii?q?H5gM6peNcFI3ujO1LHHkqLMLWGKCbPw8H2Z6O8VLJRgP9Vtx22pTaUDUvjMi6f?=
 =?us-ascii?q?mDnuUhClKftMgz2DPBxCpIG9dQ5gCXTiTNLjcBG0LMV7giE2wbIqgHPHLmocMT?=
 =?us-ascii?q?l6c0NQobyc9yJYgvNjG2Nf6nppN/WLmyGc7+PAMJYZreNrAjhol+Jd+Hk7y6Fa?=
 =?us-ascii?q?7CdBRPx0nivdtt9vo1G8nemJxTpqSx5OqjdNhIKWskRuI6TZ9p9cWXna+BIB93?=
 =?us-ascii?q?mfCxMPp4gtNtq6maldxdXSl+rQKTIKp9Dd8MQRGsv8K8+dNncldx3zF2iQRDAM?=
 =?us-ascii?q?TT+3JGiXu1FYlfiW/zXBtYQnr53lnJMmQbhXWVUoDPQAAwJiBtNUc7ltWTZxur?=
 =?us-ascii?q?6Si4Y5+DLqvQTaRMxd5rjHS/uNDPSpIzGc2+oXLyAUyK/1eNxAfrbw3FZvPxwj?=
 =?us-ascii?q?xNzH?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AWAAAkyxhch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgmx/JwqMC4t5gWAtFJdGgXYqEwGHXyI0CQ0BAwEBAQEBAQIBEwE?=
 =?us-ascii?q?BAQoLCQgpL4I2JAGCYQEBAQECAQECJFIFAQkBAQoUBC4DVAYBDAEFAgEBAYMdg?=
 =?us-ascii?q?XkIBahhM4VAhHuMP4IWgREngmuEWgyFegKBKgGIEQaGVjZSjzlIBgMNkUwGGIF?=
 =?us-ascii?q?dhR6DC4dOLIkViTiIO4IOcFCBHoFOgicXjioyAQExgQQBAQEOix0BJYEIgR8BA?=
 =?us-ascii?q?Q?=
X-IPAS-Result: =?us-ascii?q?A0AWAAAkyxhch0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBgmx?=
 =?us-ascii?q?/JwqMC4t5gWAtFJdGgXYqEwGHXyI0CQ0BAwEBAQEBAQIBEwEBAQoLCQgpL4I2J?=
 =?us-ascii?q?AGCYQEBAQECAQECJFIFAQkBAQoUBC4DVAYBDAEFAgEBAYMdgXkIBahhM4VAhHu?=
 =?us-ascii?q?MP4IWgREngmuEWgyFegKBKgGIEQaGVjZSjzlIBgMNkUwGGIFdhR6DC4dOLIkVi?=
 =?us-ascii?q?TiIO4IOcFCBHoFOgicXjioyAQExgQQBAQEOix0BJYEIgR8BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,367,1539673200"; 
   d="scan'208";a="44477074"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 18 Dec 2018 02:28:15 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726417AbeLRK2N (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 18 Dec 2018 05:28:13 -0500
Received: from szxga05-in.huawei.com ([45.249.212.191]:16152 "EHLO huawei.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726375AbeLRK2N (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 18 Dec 2018 05:28:13 -0500
Received: from DGGEMS409-HUB.china.huawei.com (unknown [172.30.72.59])
        by Forcepoint Email with ESMTP id F0728B37976B2;
        Tue, 18 Dec 2018 18:28:09 +0800 (CST)
Received: from [127.0.0.1] (10.134.22.195) by DGGEMS409-HUB.china.huawei.com
 (10.3.19.209) with Microsoft SMTP Server id 14.3.408.0; Tue, 18 Dec 2018
 18:28:07 +0800
Subject: Re: [PATCH v2] f2fs: fix sbi->extent_list corruption issue
To: Jaegeuk Kim <jaegeuk@kernel.org>,
        Sahitya Tummala <stummala@codeaurora.org>
CC: <linux-f2fs-devel@lists.sourceforge.net>,
        <linux-kernel@vger.kernel.org>
References: <1543207640-31033-1-git-send-email-stummala@codeaurora.org>
 <20181127003050.GG55960@jaegeuk-macbookpro.roam.corp.google.com>
 <fc8c38f6-a039-7b63-d25c-966b0d4396d8@huawei.com>
 <20181129033239.GE9838@codeaurora.org>
 <20181130203339.GB71781@jaegeuk-macbookpro.roam.corp.google.com>
 <49285288-cf99-5f5a-0d1a-c2e0accd8d3d@huawei.com>
 <20181212031749.GF9838@codeaurora.org>
 <0167a499-8479-6be4-946d-4446bd02ff63@huawei.com>
 <20181214075602.GA15236@codeaurora.org>
 <20181214142537.GA75922@jaegeuk-macbookpro.roam.corp.google.com>
From: Chao Yu <yuchao0@huawei.com>
Message-ID: <ad28be8b-361e-550f-50c4-1744e60ff9c5@huawei.com>
Date: Tue, 18 Dec 2018 18:28:07 +0800
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:52.0) Gecko/20100101
 Thunderbird/52.9.1
MIME-Version: 1.0
In-Reply-To: <20181214142537.GA75922@jaegeuk-macbookpro.roam.corp.google.com>
Content-Type: text/plain; charset="windows-1252"
Content-Language: en-US
Content-Transfer-Encoding: 7bit
X-Originating-IP: [10.134.22.195]
X-CFilter-Loop: Reflected
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 2018/12/14 22:25, Jaegeuk Kim wrote:
> On 12/14, Sahitya Tummala wrote:
>> On Wed, Dec 12, 2018 at 11:36:08AM +0800, Chao Yu wrote:
>>> On 2018/12/12 11:17, Sahitya Tummala wrote:
>>>> On Fri, Dec 07, 2018 at 05:47:31PM +0800, Chao Yu wrote:
>>>>> On 2018/12/1 4:33, Jaegeuk Kim wrote:
>>>>>> On 11/29, Sahitya Tummala wrote:
>>>>>>>
>>>>>>> On Tue, Nov 27, 2018 at 09:42:39AM +0800, Chao Yu wrote:
>>>>>>>> On 2018/11/27 8:30, Jaegeuk Kim wrote:
>>>>>>>>> On 11/26, Sahitya Tummala wrote:
>>>>>>>>>> When there is a failure in f2fs_fill_super() after/during
>>>>>>>>>> the recovery of fsync'd nodes, it frees the current sbi and
>>>>>>>>>> retries again. This time the mount is successful, but the files
>>>>>>>>>> that got recovered before retry, still holds the extent tree,
>>>>>>>>>> whose extent nodes list is corrupted since sbi and sbi->extent_list
>>>>>>>>>> is freed up. The list_del corruption issue is observed when the
>>>>>>>>>> file system is getting unmounted and when those recoverd files extent
>>>>>>>>>> node is being freed up in the below context.
>>>>>>>>>>
>>>>>>>>>> list_del corruption. prev->next should be fffffff1e1ef5480, but was (null)
>>>>>>>>>> <...>
>>>>>>>>>> kernel BUG at kernel/msm-4.14/lib/list_debug.c:53!
>>>>>>>>>> task: fffffff1f46f2280 task.stack: ffffff8008068000
>>>>>>>>>> lr : __list_del_entry_valid+0x94/0xb4
>>>>>>>>>> pc : __list_del_entry_valid+0x94/0xb4
>>>>>>>>>> <...>
>>>>>>>>>> Call trace:
>>>>>>>>>> __list_del_entry_valid+0x94/0xb4
>>>>>>>>>> __release_extent_node+0xb0/0x114
>>>>>>>>>> __free_extent_tree+0x58/0x7c
>>>>>>>>>> f2fs_shrink_extent_tree+0xdc/0x3b0
>>>>>>>>>> f2fs_leave_shrinker+0x28/0x7c
>>>>>>>>>> f2fs_put_super+0xfc/0x1e0
>>>>>>>>>> generic_shutdown_super+0x70/0xf4
>>>>>>>>>> kill_block_super+0x2c/0x5c
>>>>>>>>>> kill_f2fs_super+0x44/0x50
>>>>>>>>>> deactivate_locked_super+0x60/0x8c
>>>>>>>>>> deactivate_super+0x68/0x74
>>>>>>>>>> cleanup_mnt+0x40/0x78
>>>>>>>>>> __cleanup_mnt+0x1c/0x28
>>>>>>>>>> task_work_run+0x48/0xd0
>>>>>>>>>> do_notify_resume+0x678/0xe98
>>>>>>>>>> work_pending+0x8/0x14
>>>>>>>>>>
>>>>>>>>>> Fix this by cleaning up inodes, extent tree and nodes of those
>>>>>>>>>> recovered files before freeing up sbi and before next retry.
>>>>>>>>>>
>>>>>>>>>> Signed-off-by: Sahitya Tummala <stummala@codeaurora.org>
>>>>>>>>>> ---
>>>>>>>>>> v2:
>>>>>>>>>> -call evict_inodes() and f2fs_shrink_extent_tree() to cleanup inodes
>>>>>>>>>>
>>>>>>>>>>  fs/f2fs/f2fs.h     |  1 +
>>>>>>>>>>  fs/f2fs/shrinker.c |  2 +-
>>>>>>>>>>  fs/f2fs/super.c    | 13 ++++++++++++-
>>>>>>>>>>  3 files changed, 14 insertions(+), 2 deletions(-)
>>>>>>>>>>
>>>>>>>>>> diff --git a/fs/f2fs/f2fs.h b/fs/f2fs/f2fs.h
>>>>>>>>>> index 1e03197..aaee63b 100644
>>>>>>>>>> --- a/fs/f2fs/f2fs.h
>>>>>>>>>> +++ b/fs/f2fs/f2fs.h
>>>>>>>>>> @@ -3407,6 +3407,7 @@ struct rb_entry *f2fs_lookup_rb_tree_ret(struct rb_root_cached *root,
>>>>>>>>>>  bool f2fs_check_rb_tree_consistence(struct f2fs_sb_info *sbi,
>>>>>>>>>>  						struct rb_root_cached *root);
>>>>>>>>>>  unsigned int f2fs_shrink_extent_tree(struct f2fs_sb_info *sbi, int nr_shrink);
>>>>>>>>>> +unsigned long __count_extent_cache(struct f2fs_sb_info *sbi);
>>>>>>>>>>  bool f2fs_init_extent_tree(struct inode *inode, struct f2fs_extent *i_ext);
>>>>>>>>>>  void f2fs_drop_extent_tree(struct inode *inode);
>>>>>>>>>>  unsigned int f2fs_destroy_extent_node(struct inode *inode);
>>>>>>>>>> diff --git a/fs/f2fs/shrinker.c b/fs/f2fs/shrinker.c
>>>>>>>>>> index 9e13db9..7e3c13b 100644
>>>>>>>>>> --- a/fs/f2fs/shrinker.c
>>>>>>>>>> +++ b/fs/f2fs/shrinker.c
>>>>>>>>>> @@ -30,7 +30,7 @@ static unsigned long __count_free_nids(struct f2fs_sb_info *sbi)
>>>>>>>>>>  	return count > 0 ? count : 0;
>>>>>>>>>>  }
>>>>>>>>>>  
>>>>>>>>>> -static unsigned long __count_extent_cache(struct f2fs_sb_info *sbi)
>>>>>>>>>> +unsigned long __count_extent_cache(struct f2fs_sb_info *sbi)
>>>>>>>>>>  {
>>>>>>>>>>  	return atomic_read(&sbi->total_zombie_tree) +
>>>>>>>>>>  				atomic_read(&sbi->total_ext_node);
>>>>>>>>>> diff --git a/fs/f2fs/super.c b/fs/f2fs/super.c
>>>>>>>>>> index af58b2c..769e7b1 100644
>>>>>>>>>> --- a/fs/f2fs/super.c
>>>>>>>>>> +++ b/fs/f2fs/super.c
>>>>>>>>>> @@ -3016,6 +3016,16 @@ static void f2fs_tuning_parameters(struct f2fs_sb_info *sbi)
>>>>>>>>>>  	sbi->readdir_ra = 1;
>>>>>>>>>>  }
>>>>>>>>>>  
>>>>>>>>>> +static void f2fs_cleanup_inodes(struct f2fs_sb_info *sbi)
>>>>>>>>>> +{
>>>>>>>>>> +	struct super_block *sb = sbi->sb;
>>>>>>>>>> +
>>>>>>>>>> +	sync_filesystem(sb);
>>>>>>>>>
>>>>>>>>> This writes another checkpoint, which would not be what this retrial intended.
>>>>>>>>
>>>>>>>> Actually, checkpoint will not be triggered due to SBI_POR_DOING flag check
>>>>>>>> as below:
>>>>>>>>
>>>>>>>> int f2fs_sync_fs(struct super_block *sb, int sync)
>>>>>>>> {
>>>>>>>> ...
>>>>>>>> 	if (unlikely(is_sbi_flag_set(sbi, SBI_POR_DOING)))
>>>>>>>> 		return -EAGAIN;
>>>>>>>> ...
>>>>>>>> }
>>>>>>>>
>>>>>>>> And also all dirty data/node won't be persisted due to SBI_POR_DOING flag,
>>>>>>>> IIUC.
>>>>>>>>
>>>>>>>
>>>>>>> Thanks Chao for the clarification.
>>>>>>>
>>>>>>> Hi Jaegeuk,
>>>>>>>
>>>>>>> Do you still have any further concerns or comments on this patch?
>>>>>>
>>>>>> Could you try the below first?
>>>>>>
>>>>>> --  How about adding a condition in f2fs_may_extent_tree() when adding extents?
>>>>>> -- Likewise, if (shrinker is not registered) return false;
>>>>>>
>>>>>> If we can fix what you described directly, I don't want to rely on such the
>>>>>> assumptions saying we won't do checkpoint. This flow literally says syncing
>>>>>> and evicting cached objects, which opposed to what we'd like to drop all caches
>>>>>> and restart fill_super again.
>>>>>>
>>>>>> Let me consider this as a final resolution.
>>>>>
>>>>> Jaegeuk,
>>>>>
>>>>> Still I want to ask, what kind of scenario we have to add retry logic in
>>>>> fill_super for? As in android scenario, it must be extreme rare case that
>>>>> system runs out-of-memory in boot time...at least, I didn't get any kind of
>>>>> report like that.
>>>>>
>>>> Hi Chao,
>>>
>>> Hi Sahitya,
>>>
>>> Thanks for letting me know that, I git-blamed the code, and found the
>>> original intention is like what you described:
>>>
>>> commit ed2e621a95d704e6a4e904cc00524e8cbddda0c2
>>> Author: Jaegeuk Kim <jaegeuk@kernel.org>
>>> Date:   Fri Aug 8 15:37:41 2014 -0700
>>>
>>>     f2fs: give a chance to mount again when encountering errors
>>>
>>>     This patch gives another chance to try mount process when we encounter
>>> an error.
>>>     This makes an effect on the roll-forward recovery failures as well.
>>>
>>> But I doubt that if we failed in recovery, maybe there is corruption in
>>> this image, would it be better to fail the mount, and let user fsck it and
>>> retry the mount? otherwise, the corruption may be expanded...
> 
> The problem was there was no way to recover roll-forward area by fsck. IOWs,
> mount was failing all the time. I don't think roll-forward itself can corrupt

I got your concern, IMO, if mount fails, it will be better to let user
decide how to handle it.

If mount fails due to:

1) recovery, user can run fsck and/or try disable_roll_forward or
norecovery option in another mount;
2) -EINVAL caused by sanity, user can run fsck and retry mount.
3) -ENOMEM caused low memory in system, user can add more memory and retry
mount.
...

Thanks,

> the image more. Please report, if you have any issue on this.>
>>>
>>
>> Hi Jaegeuk,
>>
>> How do you think about this? If you think it is okay, then I will fix the
>> sbi->extent_list corruption issue, by removing the retry logic. Otherwise,
>> I will fix it in the extent handling as you have suggested earlier.
> 
> I'd like to keep retry logic, so could you please test what I suggested above?
> 
> Thanks,
> 
>>
>> Thanks,
>>
>>> Thanks,
>>>
>>>>
>>>> In my case, the first boot up has a failure in recovery as below -
>>>>
>>>> F2FS-fs (mmcblk0p75): find_fsync_dnodes: detect looped node chain, blkaddr:1979471, next:1979472
>>>> F2FS-fs (mmcblk0p75): Cannot recover all fsync data errno=-22
>>>>
>>>> But in the second attempt, retry will be set to false and because of that
>>>> recover_fsync_data() is skipped. This helped mount to be successful in
>>>> the second attempt. 
>>>>
>>>> Thanks,
>>>>
>>>>> Thanks,
>>>>>
>>>>>>
>>>>>> Thanks,
>>>>>>
>>>>>>>
>>>>>>> Thanks,
>>>>>>> Sahitya.
>>>>>>>
>>>>>>>> Thanks,
>>>>>>>>
>>>>>>>>> How about adding a condition in f2fs_may_extent_tree() when adding extents?
>>>>>>>>> Likewise, if (shrinker is not registered) return false;
>>>>>>>>>
>>>>>>>>>
>>>>>>>>>> +	shrink_dcache_sb(sb);
>>>>>>>>>> +	evict_inodes(sb);
>>>>>>>>>> +	f2fs_shrink_extent_tree(sbi, __count_extent_cache(sbi));
>>>>>>>>>> +}
>>>>>>>>>> +
>>>>>>>>>>  static int f2fs_fill_super(struct super_block *sb, void *data, int silent)
>>>>>>>>>>  {
>>>>>>>>>>  	struct f2fs_sb_info *sbi;
>>>>>>>>>> @@ -3402,6 +3412,8 @@ static int f2fs_fill_super(struct super_block *sb, void *data, int silent)
>>>>>>>>>>  	 * falls into an infinite loop in f2fs_sync_meta_pages().
>>>>>>>>>>  	 */
>>>>>>>>>>  	truncate_inode_pages_final(META_MAPPING(sbi));
>>>>>>>>>> +	/* cleanup recovery and quota inodes */
>>>>>>>>>> +	f2fs_cleanup_inodes(sbi);
>>>>>>>>>>  	f2fs_unregister_sysfs(sbi);
>>>>>>>>>>  free_root_inode:
>>>>>>>>>>  	dput(sb->s_root);
>>>>>>>>>> @@ -3445,7 +3457,6 @@ static int f2fs_fill_super(struct super_block *sb, void *data, int silent)
>>>>>>>>>>  	/* give only one another chance */
>>>>>>>>>>  	if (retry) {
>>>>>>>>>>  		retry = false;
>>>>>>>>>> -		shrink_dcache_sb(sb);
>>>>>>>>>>  		goto try_onemore;
>>>>>>>>>>  	}
>>>>>>>>>>  	return err;
>>>>>>>>>> -- 
>>>>>>>>>> Qualcomm India Private Limited, on behalf of Qualcomm Innovation Center, Inc.
>>>>>>>>>> Qualcomm Innovation Center, Inc. is a member of Code Aurora Forum, a Linux Foundation Collaborative Project.
>>>>>>>>>
>>>>>>>>> .
>>>>>>>>>
>>>>>>>>
>>>>>>>
>>>>>>> -- 
>>>>>>> --
>>>>>>> Sent by a consultant of the Qualcomm Innovation Center, Inc.
>>>>>>> The Qualcomm Innovation Center, Inc. is a member of the Code Aurora Forum.
>>>>>>
>>>>>> .
>>>>>>
>>>>>
>>>>
>>>
>>
>> -- 
>> --
>> Sent by a consultant of the Qualcomm Innovation Center, Inc.
>> The Qualcomm Innovation Center, Inc. is a member of the Code Aurora Forum.
> 
> .
> 

