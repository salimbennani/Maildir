Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 21:00:59 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id A0A5C5804C1;
	Fri,  7 Dec 2018 01:41:28 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 07 Dec 2018 01:41:25 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AyC9gohT1LCHkff1pJkS1lQRBDtpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64YRWDt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZH42y?=
 =?us-ascii?q?cYUPAeoCM+hWoYbyqFkBogexCwmtH+Pv0j1Fi2Tq3aA4yektDR3K0QIgEt8IrX?=
 =?us-ascii?q?/arM/1NKAXUe2t0qTIzS/Mb/RL0jj/9YjDbxcsoPGRXb1sccre004vGx/eg1WQ?=
 =?us-ascii?q?tIzqJT2U2foMs2SB8+VgUuevhnchpgpsrDavwcIshZPIhoIT0l3E7iJ5wJsvJd?=
 =?us-ascii?q?KkVkF7b9mkEIFfty6ELYd2RN0tQ31utS0nybMGoYa2cDYWxJkj3RLTdvKKf5aS?=
 =?us-ascii?q?7h7+V+udPS10iXNndb6nmhq+7VKsxvDyW8S7ylpGsDRJnsPRun0J1xHf8seKR/?=
 =?us-ascii?q?tn8ku/1juC0xrf5v9ZLUwqj6bXNposzqM2m5EOq0rMBDX2l1/zjKKOdkUr5Oyo?=
 =?us-ascii?q?6+P/b7X4qZ+TKZV0hhv9MqswgMy/B/o3MgwUU2ic4+S826Xv/Uz/QLpUkv07ir?=
 =?us-ascii?q?fVvIzeKMgBu6K0DRFZ3pw+5xu8EzuqytUVkHsfIFJAYh2HjozpO1/UIPD/CPey?=
 =?us-ascii?q?m1CskDZtx/DbMbztG5bNIWbZkLfnY7l971dQyA09zNBZ+Z1UEKoMIOz8WkDvrt?=
 =?us-ascii?q?zUFBw5PBKuw+bhFtp90pkSWWWVAq+WKK/Sq0OH5vozI+mQY48YoDL9K/km5/Hw?=
 =?us-ascii?q?l3M4lkIdcLKt3ZsWbnC4A/tnL1+YYXrqntcOD2MKshAiQ+ztjV2ISSRTaGqqX6?=
 =?us-ascii?q?Ig+jE7D5qrDYfZSYCsnLyOxiC7EodWZmBbEF+MF3joep6AW/cNbiKSP8BgniYF?=
 =?us-ascii?q?VbinV48uyxWuuBXmxLpgK+re4jcYuo771Nhp++3Tkgk/9T5zD8uDyW2NTGZ0nm?=
 =?us-ascii?q?UORz8xx61/pU19ylGe0al3mfBYFNpT5+9XXQc+L5LT0+t6C9XqUALbYtiJUEqm?=
 =?us-ascii?q?QsmhATwpVN0x2N8OY0F+G9m4lBDMxSiqDqQRl7yKApw0763d02LwJ8Z713bJyq?=
 =?us-ascii?q?0hg0M6TctIMG2snrR/+BTLB47Vj0WZkL6ndacG0y7L7muDyWuOs1teUA5/SqjF?=
 =?us-ascii?q?WXEfZk3LrdX2/E/CTrmuCag5PQtF08KNNqxKatjxh1VcWPjjIMjeY362m2qoGB?=
 =?us-ascii?q?mH3K2MY5Twd2UdxirdDlMEnB4V/XqBMQg+BSKho2bFATxqFFLvZV7s8OZkpHO6?=
 =?us-ascii?q?SE800x+Fb0l727Wp/R4VgOSWS+kP0bIcpCchtzJ0EU6g0N3MFdqPuRBtfKVGbt?=
 =?us-ascii?q?M7+1dIy2TZuhd5PpyhKaBim1Effx52v0PoyxV4FIFAndI2o3MtyQp4MbiY309Z?=
 =?us-ascii?q?dzOEwZDwPaXaKnXz/BCqbK7WxlHe0daM9qcT8vg4rE/jvAWoFkok/HVqyN1V03?=
 =?us-ascii?q?qa5pXXAwseS5PxUkAr9xdko7HWeDUy54TR1Xd0K6m7rifC2841BOsi0huvZdNf?=
 =?us-ascii?q?P72LFQDsE8wWHdOhKPE3lFezaBIEP+dS9LAvMsOidvuG3rOrPel6kDKni2RH/J?=
 =?us-ascii?q?5y0kaW+yVgTe7I2o4Pw+uE0QufSzf8kFChv9j3mIBZfz0dAnCzyCnkBIFLYK1y?=
 =?us-ascii?q?cp0GCWOvI82x29V/iIThW39e9F6/GVwG3NWldgaVb1z4xQdQz1gYoWS7mSukyD?=
 =?us-ascii?q?x5iysprquD0yPU2eTtaR0HNnRNRGZ8l1fsIJG4gMwAU0iscgcmigGl5UH8x6VA?=
 =?us-ascii?q?oKR/Lm/TQVpHfiTsLmFiVLewuaSGY8JV9JwotiBXWvymYV+GUr79vwca0yT7Em?=
 =?us-ascii?q?pexTA3bTGrto/inxxnjmKQN3JzrHvfecFtyhbT/t3cRfhN3jUYQCl0kyXYBl+5?=
 =?us-ascii?q?P9Ox59Wbi4/DsvyiV2KmTpBTczPkzZmDtCu44m1mGwa/kOqwmt3kEAg61zH019?=
 =?us-ascii?q?9xWCXMrRb8ZJTr1qugPeJmeEloGEHz685gFo5ilYswgYka2WIGiZWN4XoHjWDz?=
 =?us-ascii?q?PM1b2K3ka3oBXzwLw9/T4AX+3E1jL3SJx5/2V3mHw8thYcW6bX0S2i4n889KD6?=
 =?us-ascii?q?KU5qRenSRpulq4sR7RYf9lkzce0/Qu6WQWg+EUuAU3yCWdDasfHU1ZPSzqihSJ?=
 =?us-ascii?q?4MqyrKRRZGazb7ew0FByksymDLGHugtcQmr2eo8+HS9s6cVyKFfM0Hzw6o7+Yt?=
 =?us-ascii?q?XRY8wctgaIkxjelehaM4w+luAFhSd8PWL9vHsly/M0jBB03JG6upSHJHtp/K6j?=
 =?us-ascii?q?HhFYMTj1bdsJ+j7xlaZegtqW34e3E5V9HTULWYHkTPOyHzIUqPTnLB2OEDwnp3?=
 =?us-ascii?q?efGLrfGxKf6Uh8o3LOFZCrK2+YJH0Dwdp+QxmdIVRVgBoIUzUigp45CgeqydT6?=
 =?us-ascii?q?f0hj4TAR4kP4pgFIyuJ1LBT/VmbfpAG1ajY7UpSfLRxW7h1c6EfRK8CR8uVzHy?=
 =?us-ascii?q?RA9J27sAONMnCbZxhPDWwRWEyLHVXjMae15dXa7+iUHOm+L+bNYbWTr+xRTeyI?=
 =?us-ascii?q?yImr0otn+TaMK8qOMmNjD/09xkpMQ3R5F97FlDUITiwdjzjNYNKDpBeg5i13qd?=
 =?us-ascii?q?iy8fTsWALy/IuPFqFdMdN19xCthqeDMeGQiT19KTZZ0JMM2HDJxKIe3F4UlyFh?=
 =?us-ascii?q?aT2tHa4cui7KSaLagrVXAAIDayNvKMtI6Lox3glTNs7aidP11b94guQ2C1dfUl?=
 =?us-ascii?q?zhld+mZdYXI2GmL17HAEeLNLKbJTzE2c33YKW8SaFOg+VQrRG/pTGbE0r7NDSZ?=
 =?us-ascii?q?izbpTwyvMf1LjCyDJhNepZqycgxzBmnjVt7mbhy7PcRzjT03x700m3zLOXQdMT?=
 =?us-ascii?q?h6b0NCsLmQ4TlEjfV4HmxL9mBlIvWcmyaF8+nYLY4bsedqAiRxje5V/G42xKdV?=
 =?us-ascii?q?7C5aQvx4gy/Srt9oo1G7neiD0DtnUBxSqjlVgIKHp1ltOaLc9pNYQ3bL4AoN7X?=
 =?us-ascii?q?mMCxQNv9ZkCsfgu6ZVytjOkqL8MDZD89LO8ssaCMjZM8aHMHsnMRr0Fz/YFgoF?=
 =?us-ascii?q?TTi3NW7Bg0xRiu2d9nqQrstylp+5upMDRbJGVxQWF/ZSXkZsEdMPPZRfXT4+l7?=
 =?us-ascii?q?OfyskS6iztggPWQZBxvpnAHsOPSaH+NT2ZhL4cTxsVyKz1LMIYMYitiB8qUUVz?=
 =?us-ascii?q?gImfQxmYZttKuCA0K1Zs+Eg=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ApAADAPwpch0O0hNFiHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGBWoEPA38nCowJjXAtFJc7gXMsCwgBh1kiNAkNAQMBAQEBAQECARMBAQE?=
 =?us-ascii?q?IDQkIKSMMgjYkAYJhAQEBAQIBAQEBJEcLBQEJAQEKEQMBAgEuAyQBJwgGDQEFA?=
 =?us-ascii?q?gEBAYMcAYF5CAUKpg4zhUCEawWMH4IWgTiCa4MeAQSBJxwHhW8CgSoBh2eGbTW?=
 =?us-ascii?q?FOop0BgMNhnmDOYJthBgGGIFciBaHRIoUg2yEMYgvgg1wUIEegU6CJxd/AQmHG?=
 =?us-ascii?q?oYHMgEBMYEEAQEBDodkASWBCIEfAQE?=
X-IPAS-Result: =?us-ascii?q?A0ApAADAPwpch0O0hNFiHQEBBQEHBQGBUQgBCwGBWoEPA38?=
 =?us-ascii?q?nCowJjXAtFJc7gXMsCwgBh1kiNAkNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkA?=
 =?us-ascii?q?YJhAQEBAQIBAQEBJEcLBQEJAQEKEQMBAgEuAyQBJwgGDQEFAgEBAYMcAYF5CAU?=
 =?us-ascii?q?Kpg4zhUCEawWMH4IWgTiCa4MeAQSBJxwHhW8CgSoBh2eGbTWFOop0BgMNhnmDO?=
 =?us-ascii?q?YJthBgGGIFciBaHRIoUg2yEMYgvgg1wUIEegU6CJxd/AQmHGoYHMgEBMYEEAQE?=
 =?us-ascii?q?BDodkASWBCIEfAQE?=
X-IronPort-AV: E=Sophos;i="5.56,324,1539673200"; 
   d="scan'208";a="65767607"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 07 Dec 2018 01:41:26 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726019AbeLGJlX (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 7 Dec 2018 04:41:23 -0500
Received: from szxga05-in.huawei.com ([45.249.212.191]:15653 "EHLO huawei.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1725976AbeLGJlW (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 7 Dec 2018 04:41:22 -0500
Received: from DGGEMS413-HUB.china.huawei.com (unknown [172.30.72.59])
        by Forcepoint Email with ESMTP id 9867CF3ED7496;
        Fri,  7 Dec 2018 17:41:18 +0800 (CST)
Received: from [127.0.0.1] (10.134.22.195) by DGGEMS413-HUB.china.huawei.com
 (10.3.19.213) with Microsoft SMTP Server id 14.3.408.0; Fri, 7 Dec 2018
 17:41:11 +0800
Subject: Re: [f2fs-dev] [PATCH] f2fs: avoid frequent costly fsck triggers
To: Jaegeuk Kim <jaegeuk@kernel.org>
CC: Sheng Yong <shengyong1@huawei.com>, <linux-kernel@vger.kernel.org>,
        <linux-f2fs-devel@lists.sourceforge.net>
References: <20181128073125.39102-1-jaegeuk@kernel.org>
 <724de929-6ee1-3ad7-cfa7-6e80d4e7a3da@huawei.com>
 <20181128081035.GA41969@jaegeuk-macbookpro.roam.corp.google.com>
 <4f43735a-d01f-f194-18ce-4fbbe10ad8d4@huawei.com>
 <20181128174805.GB41969@jaegeuk-macbookpro.roam.corp.google.com>
 <234cabcd-a1c1-9fb6-13aa-94fe681731dc@huawei.com>
 <afaee7a9-162a-b157-f0bc-de366cbb7b53@huawei.com>
 <20181130202807.GA71781@jaegeuk-macbookpro.roam.corp.google.com>
From: Chao Yu <yuchao0@huawei.com>
Message-ID: <297bfe4f-8cc9-09af-8cc3-3b91755ea482@huawei.com>
Date: Fri, 7 Dec 2018 17:41:11 +0800
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:52.0) Gecko/20100101
 Thunderbird/52.9.1
MIME-Version: 1.0
In-Reply-To: <20181130202807.GA71781@jaegeuk-macbookpro.roam.corp.google.com>
Content-Type: text/plain; charset="windows-1252"
Content-Language: en-US
Content-Transfer-Encoding: 7bit
X-Originating-IP: [10.134.22.195]
X-CFilter-Loop: Reflected
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 2018/12/1 4:28, Jaegeuk Kim wrote:
> On 11/30, Chao Yu wrote:
>> On 2018/11/30 10:35, Sheng Yong wrote:
>>> Hi, Jaegeuk and Chao,
>>>
>>> On 2018/11/29 1:48, Jaegeuk Kim wrote:
>>>> On 11/28, Chao Yu wrote:
>>>>> On 2018/11/28 16:10, Jaegeuk Kim wrote:
>>>>>> On 11/28, Chao Yu wrote:
>>>>>>> Hi Jaeguek,
>>>>>>>
>>>>>>> On 2018/11/28 15:31, Jaegeuk Kim wrote:
>>>>>>>> If we want to re-enable nat_bits, we rely on fsck which requires full scan
>>>>>>>> of directory tree. Let's do that by regular fsck or unclean shutdown.
>>>>>>>
>>>>>>> Reviewed-by: Chao Yu <yuchao0@huawei.com>
>>>>>>>
>>>>>>> BTW, I have patch made some month ago...
>>>>>>>
>>>>>>> In order to detect nat_bits disabling, could we introduce one more flag for
>>>>>>> fsck?
>>>>>>
>>>>>> Do we have a way to enable nat_bits very quickly in fsck?
>>>>>
>>>>> For image with SBI_NATBIT_NEED_REPAIR flag, can we just check metadata and
>>>>> rebuild nat_bits based on verified nat blocks/journals?
>>>>
>>>> I'm leaning to rely on full scan to enable nat_bits again. We may add a mount
>>>> count or timer to trigger fsck regularly?
>>>
>>> I'm afraid regular full fsck would give us bad experience of booting time.
>>> FYI, 256GB storage, which is filled with small files, costs almost 10 min
>>> to do a full fsck. And it seems larger capacity storages are on the way.
>>
>> Agreed.
> 
> Agreed. So, that's why I wrote this patch.

I see.

> 
>>
>>> So, is it worth doing that only to enable nat_bits (plus checking f2fs
>>> consistent not that necessarily)?
>>
>> In android environment, I think it may be too expensive for adding nat_bits
>> by triggering full scan by fsck during boot time.
> 
> That's why I'd like to enable this only when we need full scan.
> 
>>
>> If we can update all nat bitmap in free time after mount, maybe we can
>> rebuild nat_bits based on full nat bitmap during umount, which can be
>> cheaper than rebuiding in userspace.
> 
> Yeah, rebuiling nat_bits in run time would be better, but can be applied
> in future. But, since Android reboot procedure uses a timeout, if we exceed

It only need to write additional nat_bits blocks during last umount
checkpoint, why it can exceed the timeout period?

Thanks,

> it, we'll get unclean unmount which triggers another fsck, which doesn't
> make sense at all.
> 
>>
>> Thanks,
>>
>>>
>>> Thanks
>>>>
>>>>>
>>>>> Thanks,
>>>>>
>>>>>>
>>>>>>>
>>>>>>> >From 86e8bdb2faeec904944bb6621073f4f7de51cc2d Mon Sep 17 00:00:00 2001
>>>>>>> From: Chao Yu <yuchao0@huawei.com>
>>>>>>> Date: Sun, 9 Sep 2018 05:40:20 +0800
>>>>>>> Subject: [PATCH] f2fs: set specified flag after invalidating nat_bits
>>>>>>>
>>>>>>> Signed-off-by: Chao Yu <yuchao0@huawei.com>
>>>>>>> ---
>>>>>>>   fs/f2fs/checkpoint.c    | 12 +++++++++++-
>>>>>>>   fs/f2fs/f2fs.h          |  3 ++-
>>>>>>>   fs/f2fs/node.c          |  3 +++
>>>>>>>   include/linux/f2fs_fs.h |  1 +
>>>>>>>   4 files changed, 17 insertions(+), 2 deletions(-)
>>>>>>>
>>>>>>> diff --git a/fs/f2fs/checkpoint.c b/fs/f2fs/checkpoint.c
>>>>>>> index 7e17bb3dfcb1..f7fb14e0f5f9 100644
>>>>>>> --- a/fs/f2fs/checkpoint.c
>>>>>>> +++ b/fs/f2fs/checkpoint.c
>>>>>>> @@ -1226,13 +1226,16 @@ static void update_ckpt_flags(struct f2fs_sb_info
>>>>>>> *sbi, struct cp_control *cpc)
>>>>>>>   	unsigned long orphan_num = sbi->im[ORPHAN_INO].ino_num;
>>>>>>>   	struct f2fs_checkpoint *ckpt = F2FS_CKPT(sbi);
>>>>>>>   	unsigned long flags;
>>>>>>> +	bool disable_natbits = false;
>>>>>>>
>>>>>>>   	spin_lock_irqsave(&sbi->cp_lock, flags);
>>>>>>>
>>>>>>>   	if ((cpc->reason & CP_UMOUNT) &&
>>>>>>>   			le32_to_cpu(ckpt->cp_pack_total_block_count) >
>>>>>>> -			sbi->blocks_per_seg - NM_I(sbi)->nat_bits_blocks)
>>>>>>> +			sbi->blocks_per_seg - NM_I(sbi)->nat_bits_blocks) {
>>>>>>>   		disable_nat_bits(sbi, false);
>>>>>>> +		disable_natbits = true;
>>>>>>> +	}
>>>>>>>
>>>>>>>   	if (cpc->reason & CP_TRIMMED)
>>>>>>>   		__set_ckpt_flags(ckpt, CP_TRIMMED_FLAG);
>>>>>>> @@ -1270,11 +1273,18 @@ static void update_ckpt_flags(struct f2fs_sb_info
>>>>>>> *sbi, struct cp_control *cpc)
>>>>>>>   	if (is_sbi_flag_set(sbi, SBI_QUOTA_NEED_REPAIR))
>>>>>>>   		__set_ckpt_flags(ckpt, CP_QUOTA_NEED_FSCK_FLAG);
>>>>>>>
>>>>>>> +	if (is_sbi_flag_set(sbi, SBI_NATBIT_NEED_REPAIR))
>>>>>>> +		__set_ckpt_flags(ckpt, CP_NATBIT_NEED_FSCK_FLAG);
>>>>>>> +
>>>>>>>   	/* set this flag to activate crc|cp_ver for recovery */
>>>>>>>   	__set_ckpt_flags(ckpt, CP_CRC_RECOVERY_FLAG);
>>>>>>>   	__clear_ckpt_flags(ckpt, CP_NOCRC_RECOVERY_FLAG);
>>>>>>>
>>>>>>>   	spin_unlock_irqrestore(&sbi->cp_lock, flags);
>>>>>>> +
>>>>>>> +	if (disable_natbits)
>>>>>>> +		f2fs_msg(sbi->sb, KERN_NOTICE,
>>>>>>> +			"No enough space in CP area, disable nat_bits.");
>>>>>>>   }
>>>>>>>
>>>>>>>   static void commit_checkpoint(struct f2fs_sb_info *sbi,
>>>>>>> diff --git a/fs/f2fs/f2fs.h b/fs/f2fs/f2fs.h
>>>>>>> index f0cedbe0c536..b55341c269b2 100644
>>>>>>> --- a/fs/f2fs/f2fs.h
>>>>>>> +++ b/fs/f2fs/f2fs.h
>>>>>>> @@ -1107,6 +1107,7 @@ enum {
>>>>>>>   	SBI_QUOTA_NEED_FLUSH,			/* need to flush quota info in CP */
>>>>>>>   	SBI_QUOTA_SKIP_FLUSH,			/* skip flushing quota in current CP */
>>>>>>>   	SBI_QUOTA_NEED_REPAIR,			/* quota file may be corrupted */
>>>>>>> +	SBI_NATBIT_NEED_REPAIR,			/* nat full/empty bitmaps need repair */
>>>>>>>   };
>>>>>>>
>>>>>>>   enum {
>>>>>>> @@ -1628,7 +1629,7 @@ static inline void disable_nat_bits(struct
>>>>>>> f2fs_sb_info *sbi, bool lock)
>>>>>>>   {
>>>>>>>   	unsigned long flags;
>>>>>>>
>>>>>>> -	set_sbi_flag(sbi, SBI_NEED_FSCK);
>>>>>>> +	set_sbi_flag(sbi, SBI_NATBIT_NEED_REPAIR);
>>>>>>>
>>>>>>>   	if (lock)
>>>>>>>   		spin_lock_irqsave(&sbi->cp_lock, flags);
>>>>>>> diff --git a/fs/f2fs/node.c b/fs/f2fs/node.c
>>>>>>> index e57add1e8966..0c6f8312a087 100644
>>>>>>> --- a/fs/f2fs/node.c
>>>>>>> +++ b/fs/f2fs/node.c
>>>>>>> @@ -2902,6 +2902,9 @@ static int __get_nat_bitmaps(struct f2fs_sb_info *sbi)
>>>>>>>
>>>>>>>   	cp_ver |= (cur_cp_crc(ckpt) << 32);
>>>>>>>   	if (cpu_to_le64(cp_ver) != *(__le64 *)nm_i->nat_bits) {
>>>>>>> +		f2fs_msg(sbi->sb, KERN_NOTICE,
>>>>>>> +			"Disable nat_bits due to incorrect cp_ver (%llu, %llu)",
>>>>>>> +			cp_ver, le64_to_cpu(*(__le64 *)nm_i->nat_bits));
>>>>>>>   		disable_nat_bits(sbi, true);
>>>>>>>   		return 0;
>>>>>>>   	}
>>>>>>> diff --git a/include/linux/f2fs_fs.h b/include/linux/f2fs_fs.h
>>>>>>> index 7196653833fa..1f3ae1504573 100644
>>>>>>> --- a/include/linux/f2fs_fs.h
>>>>>>> +++ b/include/linux/f2fs_fs.h
>>>>>>> @@ -117,6 +117,7 @@ struct f2fs_super_block {
>>>>>>>   /*
>>>>>>>    * For checkpoint
>>>>>>>    */
>>>>>>> +#define CP_NATBIT_NEED_FSCK_FLAG	0X00002000
>>>>>>>   #define CP_DISABLED_FLAG		0x00001000
>>>>>>>   #define CP_QUOTA_NEED_FSCK_FLAG		0x00000800
>>>>>>>   #define CP_LARGE_NAT_BITMAP_FLAG	0x00000400
>>>>>>> -- 
>>>>>>> 2.18.0.rc1
>>>>>>>
>>>>>>>
>>>>>>>
>>>>>>>>
>>>>>>>> Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
>>>>>>>> ---
>>>>>>>>   fs/f2fs/f2fs.h | 6 +++++-
>>>>>>>>   1 file changed, 5 insertions(+), 1 deletion(-)
>>>>>>>>
>>>>>>>> diff --git a/fs/f2fs/f2fs.h b/fs/f2fs/f2fs.h
>>>>>>>> index c28a9d1cb278..aa500239baf2 100644
>>>>>>>> --- a/fs/f2fs/f2fs.h
>>>>>>>> +++ b/fs/f2fs/f2fs.h
>>>>>>>> @@ -1621,7 +1621,11 @@ static inline void disable_nat_bits(struct f2fs_sb_info *sbi, bool lock)
>>>>>>>>   {
>>>>>>>>   	unsigned long flags;
>>>>>>>>   
>>>>>>>> -	set_sbi_flag(sbi, SBI_NEED_FSCK);
>>>>>>>> +	/*
>>>>>>>> +	 * In order to re-enable nat_bits we need to call fsck.f2fs by
>>>>>>>> +	 * set_sbi_flag(sbi, SBI_NEED_FSCK). But it may give huge cost,
>>>>>>>> +	 * so let's rely on regular fsck or unclean shutdown.
>>>>>>>> +	 */
>>>>>>>>   
>>>>>>>>   	if (lock)
>>>>>>>>   		spin_lock_irqsave(&sbi->cp_lock, flags);
>>>>>>>>
>>>>>>
>>>>>> .
>>>>>>
>>>>
>>>>
>>>> _______________________________________________
>>>> Linux-f2fs-devel mailing list
>>>> Linux-f2fs-devel@lists.sourceforge.net
>>>> https://lists.sourceforge.net/lists/listinfo/linux-f2fs-devel
>>>>
>>>> .
>>>>
>>>
>>>
>>> .
>>>
> 
> .
> 

