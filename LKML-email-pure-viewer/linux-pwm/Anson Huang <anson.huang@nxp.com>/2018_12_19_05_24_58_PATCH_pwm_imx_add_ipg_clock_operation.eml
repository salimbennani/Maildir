Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 21:30:35 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 74CDA5805CF;
	Tue, 18 Dec 2018 21:28:20 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 18 Dec 2018 21:28:15 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ASSVCzBOd+nrHBQVjg3Al6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KPr/pcbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRsZfWTJcDIOg?=
 =?us-ascii?q?YYUBDO0PPedEoIfyqFQOtgO+CAu3CePz0z9FnGP60Lcm3+g8FwzNwQwuH8gJsH?=
 =?us-ascii?q?TRtNj4KKESUfuyzKnO0D7Nbe5W1i376IjHbxsspuuDXbRrccrWz0kjDQPFjkiK?=
 =?us-ascii?q?pozjMDOYzeINsmeD7+Z6Se2vjGsnphh3rzOyxckskpHEipwJxl3A7yl13Yg4Kc?=
 =?us-ascii?q?OiREJmYtOoDIFcuiCYOoduX88uXmVltDw0x7Ebo5K3YSoHxZs9yxPeavGLa4aI?=
 =?us-ascii?q?7QzgWeqNJDp1gWhqd6+xhxux9EWgxOLxW82p31tPsyVKjMLDu38I2hHT6cWHRO?=
 =?us-ascii?q?Zy80G80jiVzQ/T8PtLIUUsmKrbNZEhxrkwm4INsUTMACD2gl/6jKyIeUU+/Oin?=
 =?us-ascii?q?9eDnbq/hpp+GOI94kgD+MqIwlcyjGek0LBQCUmyB9eih2rDv41f1TKhJg/EqiK?=
 =?us-ascii?q?XUsZLXKdwepqGjAg9V1ogj6wy4DzejyNkYmXgHLFRYeBOIloTpOE/BIOr+Dfih?=
 =?us-ascii?q?h1SgiTBrxv7APrL/GJXANWbDkLj/crZn8UJcyxQ8zcpZ551KDrENOvXzWlX+tN?=
 =?us-ascii?q?DAFB82LxS0w/r7CNV6zo4eXWOPAqyHP6/Ivl6I+/kiI+2NZI8TpTb8JOIp5//o?=
 =?us-ascii?q?jX8lh1AdebOl0ocQaHC9Bv5mOVmWYWLwgtcdFmcHpgo+Q/briF2eSzFTYGy+X6?=
 =?us-ascii?q?Ih5j4hDoKmApzORoSsgLyHwSe6EYdaZmFAClCQD3joc5+IVOsLaCKXOsVhiCAL?=
 =?us-ascii?q?VaC9S4890hGjrA36y715IebO+S0YspTj1N5y5+DIkREy9Dp0D9mS0m2XTmF0mH?=
 =?us-ascii?q?8ISCEy3KxlvUN9zVKD27Big/NEDdxT++9JUgAiOJHG1Ox6C9fyWgHbcteTUlmm?=
 =?us-ascii?q?QM6rATUwTtI33t8PbFxxG9SkjhDfwSWqB6UZmKCMBJwx6qjcxWT+J95hy3ba06?=
 =?us-ascii?q?ksl1omTdFJNWG8gq5/9hLcB4jGk0iCk6aqdKIc3DPC9WuZzGqOul1YXxB0Uanf?=
 =?us-ascii?q?QX8fYU7Wp8zj5kzeV7+uFagnMgxZxMGfMKRKdMPmgU9GRPj5PtTeeHy+m2G3CR?=
 =?us-ascii?q?aMxbOMaY7qdn4Z3CXcDkgEjg8S8WyHNQg4GieuvWbeACZyGlLoZkPm6fN+p2+j?=
 =?us-ascii?q?Tk8o0wGKaFVs2Kev9R4Lm/OQUfMT0agCuCc6tTp0Gk2w39bXC9qGugpgc79QYd?=
 =?us-ascii?q?I74Fdby23ZsxZxMYCnL6BnnlQeaRh4v1vy1xVrDYVNidQqrHIvzAp1NaKY0FNA?=
 =?us-ascii?q?eymE3ZzqPb3XMG3y/BGpa67ZwVze1NeW+qES6PU3sVnjvQepFlY8/HVjydVaz3?=
 =?us-ascii?q?yc5pDSBgoITZ3xSlo39wR9p7zCeCY9453b1HJyPqi0qDPNwM8pC/Y/xRamfNdf?=
 =?us-ascii?q?N72EGRT2E80bAciuNeMrl0KobhICIOBd6qo0M9m6ePuB3a6hJPxgky6+jWRb/I?=
 =?us-ascii?q?B91VqB9iphSuLSw5kJ2fCZ3gudWDf6g1esqcT3mYFCZTEPEWuz0ynkBIhNZqJs?=
 =?us-ascii?q?eYYHE3uhI8qyxt9mnZ7iR2ZY9EK/B1MBwMKpYxuSYEDn0g1KyEsXpmarmS2mwD?=
 =?us-ascii?q?xukjElt7aQ0zbKw+v/ahUHIGlLRG95gFfoIIi0ic0aXUeyYwgokhul+Vj1x6xB?=
 =?us-ascii?q?qKtjKGnTRF9CfzLqIGF6Tquwqr2CbtZP6ZMpqylWUP6wYUuHSr77uBYa1yLjH2?=
 =?us-ascii?q?1DxDE0bT2qu5P5nwBkh2KZNnp8sH3ZecRozxfF+NPcXeJR3iYBRCRgiznYHEK8?=
 =?us-ascii?q?P9qq/dWTjZvDqfqxV2GiVp1Sdynk04WAuTC/5W1rBx2/gv+ylsfmEQg8zS/0yd?=
 =?us-ascii?q?1qWT/Uoxb7Z4nhz766Pv5/fkl0GF/87NJ3G4FknYs3np0Q23kahpOO8HoDkGfz?=
 =?us-ascii?q?N8hb2K3kYHoMQz4L38Da4Az/1EJ/KXKJwprzVm+Bzct5e9m6fmQW1zo+789QCa?=
 =?us-ascii?q?eY9rxEnTZvrVq+ogLcevx9njYbyfsz538WmeAJuAwxziqDBrAeB1VXPSvplx6Q?=
 =?us-ascii?q?9dCxsL1XZHqzcbi3zEd+mNGhDLKYrQ1GVnf2ZIwiHTNu4cVlK13Dzmfz6o7/dd?=
 =?us-ascii?q?nUbNITsACUkhjag+hULpIxiuQFhS59NW3hun0lzvYxjQZy0pGioIiHN2Jt8bql?=
 =?us-ascii?q?Ah5fMz35fcIS9SvrjaZDhcaWxIGvE45lGjUKWpvoUP2pHCgTtfThKwaBDjk8pm?=
 =?us-ascii?q?2HFrrYGA+V8F1moG7XE5C3K3GXI2EUws54SxmaIExfnRoYXDEnnpMiEgCqxcrh?=
 =?us-ascii?q?cFp25zwL5174rAdMxfxsNxXlTmjfowKoYC8uSJeDNBpW8h1C50DNPMyc9O1zGj?=
 =?us-ascii?q?9X/oa7oAyRMGCbZBlIDWIUWkyCHV/jJaKj5d3B8+ieG+q/IOHCYbSIqexCSfiI?=
 =?us-ascii?q?wYij3Zdh/zaJLs+PJGVtD+Un2kpfWnB0A8TYmzISSywOiiLCdcibqA2n+i1wqM?=
 =?us-ascii?q?C//+/mWAbu5YuJFrtTPs9j+xGwgaefKeGQgDx1Jipf1pMJ3XXI0qQQ3EYOiyFy?=
 =?us-ascii?q?cDmgCbQAujDMTKLTma9XDgQXayBpNMtP4KIzwBNNOdPAit7u0r54j/g1C0pKVF?=
 =?us-ascii?q?D7m8GpY9AKLH+5NF/dGEmLM7GGLyXRw87reaO8VaFQjOJMuhKqpDaUCFXjMSqD?=
 =?us-ascii?q?ljXzUxCvMPpBjCWaPBxYpYG8fQxhCWnlTNL6dBK7NMV7giExwb0xnnnKL3ITMS?=
 =?us-ascii?q?Bgc0NRqb2d9T9YgvR6G2Bb8nVpN/WLmyaH4OneMZsWtfprAiJpl+NV+ng6yr1V?=
 =?us-ascii?q?7D1aS/xxgifdstluo1S+mOmV1jVnSAZOqipMhI+TvURtI6PZ9pxBWXbC5B0M7G?=
 =?us-ascii?q?WQBA4Mp9tqEdDvv6FQyt7SlKP8MjtC8tTU/dcCCMjQMs6ILH0hMR+6UALTWUEZ?=
 =?us-ascii?q?TT+mL3vOwVZQnPCU+VWaq5E7rt7nn59EAutHVF04DOkLTF5oEN0EL794Wzollf?=
 =?us-ascii?q?iQi8teoTL0qBjXWdUfpo/CfuydDO+pKzuDi7RAIRwSzvmweYASMJDrnlR9b3Fk?=
 =?us-ascii?q?k4nQXUndR9ZApmtmdABi5A0H9Hl4U3122E//bA6pyGEcGOTynRMsjAZ6J+M3+3?=
 =?us-ascii?q?2kt1M2IEfa4Sg9ik88nf37jj2LNj38NqG9WcdRESWi5GYrNZauagBuagv6vVFt?=
 =?us-ascii?q?MjiME7tXlLxmM2B2gQnTkZ1fAbhXSqgSM0xY/u2ee/h9iQcUkS6g30ISoLKdUZ?=
 =?us-ascii?q?Y=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AkAQCt1hlch0O0hNFkgheBMVBpcwQLJ?=
 =?us-ascii?q?wqHOgOQAYJrl0iBcxQBGAMQAYcgIjQJDQEDAQEBAQEBAgETAQEBCgsJCCkjDII?=
 =?us-ascii?q?2JAGCaQIkGQEBNwEFCQIBAU4DLycEAQ0FBYMdAYIAAQECApsLAooTgWwzgnYBA?=
 =?us-ascii?q?QWHLAiHfoRBgVc/gRGHTYYliT6GXIEJkAUHAoIlBI85FpFVAYlGiCaHYwIEAgQ?=
 =?us-ascii?q?FAg0BAQWBRoIOMxojgzwJgh4Xg0qESoYJcoEFAQEhiwGBHwGBHgEB?=
X-IPAS-Result: =?us-ascii?q?A0AkAQCt1hlch0O0hNFkgheBMVBpcwQLJwqHOgOQAYJrl0i?=
 =?us-ascii?q?BcxQBGAMQAYcgIjQJDQEDAQEBAQEBAgETAQEBCgsJCCkjDII2JAGCaQIkGQEBN?=
 =?us-ascii?q?wEFCQIBAU4DLycEAQ0FBYMdAYIAAQECApsLAooTgWwzgnYBAQWHLAiHfoRBgVc?=
 =?us-ascii?q?/gRGHTYYliT6GXIEJkAUHAoIlBI85FpFVAYlGiCaHYwIEAgQFAg0BAQWBRoIOM?=
 =?us-ascii?q?xojgzwJgh4Xg0qESoYJcoEFAQEhiwGBHwGBHgEB?=
X-IronPort-AV: E=Sophos;i="5.56,371,1539673200"; 
   d="scan'208";a="56945074"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 18 Dec 2018 21:28:08 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727722AbeLSFZF (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 19 Dec 2018 00:25:05 -0500
Received: from mail-eopbgr70082.outbound.protection.outlook.com ([40.107.7.82]:30688
        "EHLO EUR04-HE1-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1727321AbeLSFZF (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 19 Dec 2018 00:25:05 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=nxp.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=0Qvi8SidpDlNUuRS/ioA1ZHmBxrHmEsY/nr5UMh/3r4=;
 b=hgQoq6sti/bgw868K9kst1+7xtbfl1SO8C53e10P/KOBsrQID8tC4vlNHhWXhFmcFQeMGeH82alz43sUc1DqFWZITlbTPuzfa4MNf2nT55PIBLfY+YnEh9uezQgDpkdQDcAsmeUDNeeYw9f41kH2LqxoDstcXhe1xxt4hc9M3H8=
Received: from DB3PR0402MB3916.eurprd04.prod.outlook.com (52.134.72.18) by
 DB3SPR01MB014.eurprd04.prod.outlook.com (52.134.70.158) with Microsoft SMTP
 Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1446.17; Wed, 19 Dec 2018 05:24:58 +0000
Received: from DB3PR0402MB3916.eurprd04.prod.outlook.com
 ([fe80::adf8:f49d:deb4:58fd]) by DB3PR0402MB3916.eurprd04.prod.outlook.com
 ([fe80::adf8:f49d:deb4:58fd%3]) with mapi id 15.20.1425.023; Wed, 19 Dec 2018
 05:24:58 +0000
From: Anson Huang <anson.huang@nxp.com>
To: "thierry.reding@gmail.com" <thierry.reding@gmail.com>,
        "linux-pwm@vger.kernel.org" <linux-pwm@vger.kernel.org>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>
CC: dl-linux-imx <linux-imx@nxp.com>
Subject: [PATCH] pwm: imx: add ipg clock operation
Thread-Topic: [PATCH] pwm: imx: add ipg clock operation
Thread-Index: AQHUl1suxeUnCR+GgEiqBlmW06QBLg==
Date: Wed, 19 Dec 2018 05:24:58 +0000
Message-ID: <1545196822-31361-1-git-send-email-Anson.Huang@nxp.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-mailer: git-send-email 2.7.4
x-clientproxiedby: HK0PR01CA0064.apcprd01.prod.exchangelabs.com
 (2603:1096:203:a6::28) To DB3PR0402MB3916.eurprd04.prod.outlook.com
 (2603:10a6:8:10::18)
authentication-results: spf=none (sender IP is )
 smtp.mailfrom=anson.huang@nxp.com; 
x-ms-exchange-messagesentrepresentingtype: 1
x-originating-ip: [119.31.174.66]
x-ms-publictraffictype: Email
x-microsoft-exchange-diagnostics: 1;DB3SPR01MB014;6:qywFLFgFRZ9UNzpWocId2x1Z2Nm9CcWPlX93I7QtQGKXLHGL5iYXhwEN5iLJ7jVPA0ILecTzXoWNfRO0kVB4ibXDDjYMng6q6I8xy/NXmXBtR0m0OBEEwVEhkTDBQ0jrAhzIrPL1OrqUdrPl0Nm973BIkN3+tywcgLMkvBfhNhHJG2SHpgHnTBBBb6Etpf1mCRfIzReyqOIjCsIT9kIcRYQfuR4IDirT6GfT1IMzvQjadWBX0RdF98s0ByvS1MZd92o3Z7mBI12RGoeZaZDPYms7Ll6Ps+1SwQhJksfmVRFf0IPwhc3DIK9u6tymiTAAnMKVNZYIWe8GXNvsA460dZJ09lLES3/VkVAc1DGConV9R4jOp+mj3ilrx4xVXYFzYyfCJRWrvO+2h1PPIfod3fbfUsAf1Hxl8OAVElfNQL/Qr39ymf096RDbEru58v4OTGh9nmERfF3EbuSQxaBPGQ==;5:1u9CQNEOfODUnNjmuE12gyXQzJLFUtxEUixTN+jWb2UGlHFCxFAMCXNhAKvsV+0SIYppBD4s3mDRqQEFQrR3Wo2heoVGFQ4zXLqDjYOGCC4e22K8nk+Af/qjSiwCL69lTzI1a//3e8dBOcfqJmOkWt/qF50YatQRAccFh14/jmo=;7:SZ1A3HEnTtk/PcGeRRQdCCjezXBWF2dkcxuEZuykZg6KNvYX8Yae3dDazaV7Mu9ymH4t/9viPct2wlbbIK7Vh1oQ3dsa8zR7tcNAjVBxjarVDMunC76kO0vtNLpGlJ90Acwj1l9Rh0n6Bg0hLCpzDg==
x-ms-office365-filtering-correlation-id: fd701f5f-0023-42d7-4862-08d66572511a
x-ms-office365-filtering-ht: Tenant
x-microsoft-antispam: BCL:0;PCL:0;RULEID:(2390118)(7020095)(4652040)(8989299)(5600074)(711020)(4618075)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(2017052603328)(7153060)(7193020);SRVR:DB3SPR01MB014;
x-ms-traffictypediagnostic: DB3SPR01MB014:
x-microsoft-antispam-prvs: <DB3SPR01MB014B897B06E732F986B8FD6F5BE0@DB3SPR01MB014.eurprd04.prod.outlook.com>
x-ms-exchange-senderadcheck: 1
x-exchange-antispam-report-cfa-test: BCL:0;PCL:0;RULEID:(8211001083)(3230021)(999002)(5005020)(6040522)(2401047)(8121501046)(10201501046)(3231475)(944501520)(52105112)(3002001)(93006095)(93001095)(6055026)(148016)(149066)(150057)(6041310)(20161123564045)(20161123558120)(20161123560045)(20161123562045)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(201708071742011)(7699051)(76991095);SRVR:DB3SPR01MB014;BCL:0;PCL:0;RULEID:;SRVR:DB3SPR01MB014;
x-forefront-prvs: 0891BC3F3D
x-forefront-antispam-report: SFV:NSPM;SFS:(10009020)(136003)(346002)(376002)(396003)(39860400002)(366004)(199004)(189003)(68736007)(110136005)(5660300001)(71200400001)(7736002)(316002)(71190400001)(575784001)(4326008)(2201001)(39060400002)(86362001)(256004)(14444005)(478600001)(25786009)(2616005)(486006)(476003)(14454004)(305945005)(97736004)(53936002)(2501003)(2906002)(36756003)(52116002)(8676002)(26005)(186003)(6436002)(6512007)(81156014)(6116002)(3846002)(81166006)(8936002)(50226002)(6506007)(105586002)(106356001)(386003)(102836004)(6486002)(99286004)(66066001);DIR:OUT;SFP:1101;SCL:1;SRVR:DB3SPR01MB014;H:DB3PR0402MB3916.eurprd04.prod.outlook.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;A:1;MX:1;
x-microsoft-antispam-message-info: o0M0tx3ib3Pveaf6MJZkLfkxenzcE3ZdURGZfur7hDBQ2VG6t/RRWAd0v1M5iHgY5SjJwVp7ngocXKK8QnzHvQ+mbXovMeVPvV5c9QZG1DMg44x5XUN/G3k4uvLAuDwDWnQC0w1LESG2ad7lgDFc4lUeA+N2hei/sAqKF5fCZBlqpTMJXtkPyordqnnO4Q6hMcZybjd1TlXbLpsBpRr042e5y7pEIpkjZuf/SlYaysvPfJ7khEhfrTG8YLRzsBReo11b2uH+6ymj1bzWMiljn2bNM1fMi08abxOA5szV6XaFnnFax7qktb9G/g16queR
spamdiagnosticoutput: 1:99
spamdiagnosticmetadata: NSPM
Content-Type: text/plain; charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
X-OriginatorOrg: nxp.com
X-MS-Exchange-CrossTenant-Network-Message-Id: fd701f5f-0023-42d7-4862-08d66572511a
X-MS-Exchange-CrossTenant-originalarrivaltime: 19 Dec 2018 05:24:58.4170
 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: 686ea1d3-bc2b-4c6f-a92c-d99c5c301635
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DB3SPR01MB014
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

i.MX PWM module's ipg_clk_s is for PWM register access, on
most of i.MX SoCs, this ipg_clk_s is from system ipg clock
or perclk which is always enabled, but on i.MX7D, the ipg_clk_s
is from PWM1_CLK_ROOT which is controlled by CCGR132, that means
the CCGR132 MUST be enabled first before accessing PWM registers
on i.MX7D. This patch adds ipg clock operation to make sure
register access successfully on i.MX7D and it fixes Linux kernel
boot up hang during PWM driver probe.

Fixes: 4a23e6ee9f69 ("ARM: dts: imx7d-sdb: Restore pwm backlight support")
Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
---
 drivers/pwm/pwm-imx.c | 53 ++++++++++++++++++++++++++++++++++++++++++++++-=
----
 1 file changed, 48 insertions(+), 5 deletions(-)

diff --git a/drivers/pwm/pwm-imx.c b/drivers/pwm/pwm-imx.c
index 6cd3b72..55a3a36 100644
--- a/drivers/pwm/pwm-imx.c
+++ b/drivers/pwm/pwm-imx.c
@@ -87,6 +87,8 @@
 #define MX3_PWMPR_MAX			0xfffe
=20
 struct imx_chip {
+	struct clk	*clk_ipg;
+
 	struct clk	*clk_per;
=20
 	void __iomem	*mmio_base;
@@ -96,6 +98,32 @@ struct imx_chip {
=20
 #define to_imx_chip(chip)	container_of(chip, struct imx_chip, chip)
=20
+static int imx_pwm_clk_prepare_enable(struct pwm_chip *chip)
+{
+	struct imx_chip *imx =3D to_imx_chip(chip);
+	int ret;
+
+	ret =3D clk_prepare_enable(imx->clk_ipg);
+	if (ret)
+		return ret;
+
+	ret =3D clk_prepare_enable(imx->clk_per);
+	if (ret) {
+		clk_disable_unprepare(imx->clk_ipg);
+		return ret;
+	}
+
+	return 0;
+}
+
+static void imx_pwm_clk_disable_unprepare(struct pwm_chip *chip)
+{
+	struct imx_chip *imx =3D to_imx_chip(chip);
+
+	clk_disable_unprepare(imx->clk_per);
+	clk_disable_unprepare(imx->clk_ipg);
+}
+
 static void imx_pwm_get_state(struct pwm_chip *chip,
 		struct pwm_device *pwm, struct pwm_state *state)
 {
@@ -103,11 +131,15 @@ static void imx_pwm_get_state(struct pwm_chip *chip,
 	u32 period, prescaler, pwm_clk, ret, val;
 	u64 tmp;
=20
+	ret =3D imx_pwm_clk_prepare_enable(chip);
+	if (ret < 0)
+		return;
+
 	val =3D readl(imx->mmio_base + MX3_PWMCR);
=20
 	if (val & MX3_PWMCR_EN) {
 		state->enabled =3D true;
-		ret =3D clk_prepare_enable(imx->clk_per);
+		ret =3D imx_pwm_clk_prepare_enable(chip);
 		if (ret)
 			return;
 	} else {
@@ -143,6 +175,8 @@ static void imx_pwm_get_state(struct pwm_chip *chip,
 	} else {
 		state->duty_cycle =3D 0;
 	}
+
+	imx_pwm_clk_disable_unprepare(chip);
 }
=20
 static int imx_pwm_config_v1(struct pwm_chip *chip,
@@ -180,7 +214,7 @@ static int imx_pwm_enable_v1(struct pwm_chip *chip, str=
uct pwm_device *pwm)
 	u32 val;
 	int ret;
=20
-	ret =3D clk_prepare_enable(imx->clk_per);
+	ret =3D imx_pwm_clk_prepare_enable(chip);
 	if (ret < 0)
 		return ret;
=20
@@ -200,7 +234,7 @@ static void imx_pwm_disable_v1(struct pwm_chip *chip, s=
truct pwm_device *pwm)
 	val &=3D ~MX1_PWMC_EN;
 	writel(val, imx->mmio_base + MX1_PWMC);
=20
-	clk_disable_unprepare(imx->clk_per);
+	imx_pwm_clk_disable_unprepare(chip);
 }
=20
 static void imx_pwm_sw_reset(struct pwm_chip *chip)
@@ -286,7 +320,7 @@ static int imx_pwm_apply_v2(struct pwm_chip *chip, stru=
ct pwm_device *pwm,
 		if (cstate.enabled) {
 			imx_pwm_wait_fifo_slot(chip, pwm);
 		} else {
-			ret =3D clk_prepare_enable(imx->clk_per);
+			ret =3D imx_pwm_clk_prepare_enable(chip);
 			if (ret)
 				return ret;
=20
@@ -309,7 +343,7 @@ static int imx_pwm_apply_v2(struct pwm_chip *chip, stru=
ct pwm_device *pwm,
 	} else if (cstate.enabled) {
 		writel(0, imx->mmio_base + MX3_PWMCR);
=20
-		clk_disable_unprepare(imx->clk_per);
+		imx_pwm_clk_disable_unprepare(chip);
 	}
=20
 	return 0;
@@ -367,6 +401,13 @@ static int imx_pwm_probe(struct platform_device *pdev)
 	if (imx =3D=3D NULL)
 		return -ENOMEM;
=20
+	imx->clk_ipg =3D devm_clk_get(&pdev->dev, "ipg");
+	if (IS_ERR(imx->clk_ipg)) {
+		dev_err(&pdev->dev, "getting ipg clock failed with %ld\n",
+				PTR_ERR(imx->clk_ipg));
+		return PTR_ERR(imx->clk_ipg);
+	}
+
 	imx->clk_per =3D devm_clk_get(&pdev->dev, "per");
 	if (IS_ERR(imx->clk_per)) {
 		dev_err(&pdev->dev, "getting per clock failed with %ld\n",
@@ -406,6 +447,8 @@ static int imx_pwm_remove(struct platform_device *pdev)
 	if (imx =3D=3D NULL)
 		return -ENODEV;
=20
+	imx_pwm_clk_disable_unprepare(&imx->chip);
+
 	return pwmchip_remove(&imx->chip);
 }
=20
--=20
2.7.4

