Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  12 Dec 2018 19:44:48 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 0795858079D;
	Wed, 12 Dec 2018 02:51:34 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga005-1.jf.intel.com with ESMTP; 12 Dec 2018 02:51:33 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A+2bEoRYICdZPBLEgoW0KqJX/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpci9Yx7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyJPDIOi?=
 =?us-ascii?q?YYUSDOQBM+lXoJXgqFQMoxS+HhGsCeH0xz9HmnP7x7c33/g7HAzE2gErAtIAsG?=
 =?us-ascii?q?7TrNXwLKodX+60w7fVxjvGa/NZxzb96I7WfRw4pP+UW7RwccveyUIyEA7Fk1uR?=
 =?us-ascii?q?ppL+MjOW0uQCrWmb7+x+Wu62iG4nrB9+oj6uxscjkIXJgZgVyl/d+Ch/3Y07Js?=
 =?us-ascii?q?W4RVZlbdK4FJZcrTyWOoVoTs84Xm1luzo2xqcHtJO5ZCQHzJsqywTCZ/GJb4SE?=
 =?us-ascii?q?+A/vWPuNLTtimn5odrOyihCv+ka60OL8TNO70FNSoypFjNbMsncN2gTN6siIVP?=
 =?us-ascii?q?R95F2t2TWR2ADJ7OFLP0Q0mbDcK547zb48jpsTsULdES/qgEj6krOae0E+9uS1?=
 =?us-ascii?q?5enrfK/qqoKfOoNokA3zM6YjltS6AesiMwgOW2ab+f671L3m5UD5RLRKjvsrkq?=
 =?us-ascii?q?jWqZzaJtoUprS/AwBL1oYv8hG/Djmg0NsGh3kKN0xFeB2ZgIjzIV3OI+73De25?=
 =?us-ascii?q?g1uylDdn3ffGPqfuApnVNHjMjK/hfaph605b0AczydFf55FKBb0bL/PzR1T8tN?=
 =?us-ascii?q?jZDh8/Lgy1zPzrCNR71oMCR22PBrWVP7/VsV+N/ugvOfWDZJcJuDbhLPgo//7u?=
 =?us-ascii?q?gmU4mV8BZ6ap2oEbaHClHvt8JUWZbmHhgtMAEWcMowo/Q/bmiFyEUT5PeXmyW7?=
 =?us-ascii?q?gw6S08CIKjFY3DXJyigKSd3CenGZ1bfmJGCleSHnvydIWEXPEMaCSVIsJ6ljwE?=
 =?us-ascii?q?VL6hS5Iu1B20tQ/6zaZnIfTQ+iECqZ3j09117fXJlR4u7Tx0E9id02aVQm5uhW?=
 =?us-ascii?q?MIRzg23KNlrUxn0FiD07N1g/hZFdxV+vNIXR02NZ/az+xmFd/yXhjNccuOSFaj?=
 =?us-ascii?q?Wt+mGy0+Tsotw98SZEZwA9aigQrF3yawB78VlqaEBJo78q/H23jxJsB9y2vJ1a?=
 =?us-ascii?q?U7jlkmRNdPOnOihqJl6wfTAIvJmV2Dl6m2baQcwDLN9GCbwGWTpk5YThB/Xb/F?=
 =?us-ascii?q?XX8FYEvWtsr25kXFQ7+qCrQnNw9BxNWGKqtLbN3pkFpHSO3iONTYf2K+hWOwCQ?=
 =?us-ascii?q?yUybOLaYrgY38d0znFCEgYjwAT+m6LOhUkCSe/vW3SFjxuGkjpY0P37+Z+rmi2?=
 =?us-ascii?q?Tks1zwGMck1g2KC5+h8ThfyAVfwT2qgItzsmqzVxBFy9xc7ZC8Kcpwp9e6VRec?=
 =?us-ascii?q?894FZC1WLeqwx9PpyhI7p+hlIEdAR3pUfu1xRxCoVPisUqqHIqzAxvKaOXyl9B?=
 =?us-ascii?q?djWY3YzuNb3TMGX94Beva6vO0FHEzNmW4rsP6Og/q1j7pg6pElQt8np53NhVyX?=
 =?us-ascii?q?eT/YjKAxcIXpL3UUY38AZ6qqreYik84YPUyHJtPbO1sj/Ex9ImGu8lxgy8cNdY?=
 =?us-ascii?q?NaOODBXyHNECB8iyNOwqnECkbxIZPOxI6KE4JcKnd/uc166tM+ZthzamjWVB4I?=
 =?us-ascii?q?Bg3UOA7St8SujU35kbx/GUxBeIVzD5jF25qMD4hZhEZS0OHmq40SXkHo9RabFo?=
 =?us-ascii?q?coYRFGiuJNe7xtNgiJ73Wn5U7UKsCEkC2MC0ZxWSdVv93QtL2EQToHynnza4zj?=
 =?us-ascii?q?NunzEoqKqfwDLBw+D4eBUbPW5LQXFojU3wLoisk9AaQE+oYhAplRuk/0r7x7JX?=
 =?us-ascii?q?pL9iL2nVWkpIeyn2L2d/Uqq/rLaCYshP6I82viVTSuizfVeaSrvlqRsAzyzjB3?=
 =?us-ascii?q?dexCw8dzyyuJX2hQZ6iGGeLHZ0tnbZYtt/xRTc5NzdQ/5ewDwGSTJ8iTnWAFi8?=
 =?us-ascii?q?Itao8c+Vl5fFruCxSWahWodPfinsyIOKrDG76nFyAR2jg/CzncXqEAgg3i/8zd?=
 =?us-ascii?q?VqVyTIrBDnb4nv1qS6N/9nf0ZyCF/97cp6Bp9xko8qiJ4M3ngag42f/WAbnmfr?=
 =?us-ascii?q?LdVbxaX+YWIORTERwt7Z+gjl2FB5IXKPyIL0TXGdwspnZ9mnbWIawCM978ZWCK?=
 =?us-ascii?q?iK6LxIhzd6ol29rQjJe/hygi8dyecy6H4dm+wJvQstziaHDbwIE0hXIzfslwiW?=
 =?us-ascii?q?4NCkt6pYenyvcber2Up6nNChCqyCow5GVHb4fJciATF/7sFlPF3Q133z75nueM?=
 =?us-ascii?q?PMYtILqh2UjxDAgvBJKJI2k/oGnytmNnj7vX040O47lh1u0Iq+vIiGLWVt4a24?=
 =?us-ascii?q?DgRZNj3ze8Mc5DXtgbxCkcaR2oClBo9hFSkTXJv0UfKoFyofuu/9OAaJFD08t2?=
 =?us-ascii?q?2XGb7CHQKE7EdmrnTPE42kNn2NJXkZy8liSweZJEBFnA8UWzA6lIYjFg+23Mzh?=
 =?us-ascii?q?bFt55jcJ6176sBRMz/xnNwLlXmfDvguoaSo0SJuCLBpQ9A5C/FzYMcif7uJ1Ai?=
 =?us-ascii?q?FZ8YetrA2LKmyHeQtICXsFVVCDB1DmJrOu/8XP8/CEBuqiKPvDebWPqetDV/eR?=
 =?us-ascii?q?2JKgyI1m8yyXNsWIOHliAOY22k5CXXB/BsTYlC8DSy0RlyLRccGboA2w9TFwrs?=
 =?us-ascii?q?C66P7rQh7g5ZOTC7tONtVi4xC2jrmCN+6ThyZ5KCxU1pAWxX/Px7gQwkQSizx1?=
 =?us-ascii?q?dzS2FbQAtCjNTL/fm6NNDh4bbT9zO9VM764mwgZNPsvbgMvv1rFklv41F0tFVV?=
 =?us-ascii?q?v5l86zeMwFOHu9O03HBUqRMLSGJCbGw8X2YaO6VL1Rg/9Ytxy2uTaHDUDjOi6P?=
 =?us-ascii?q?mCXuVxCqKetMlj2UPARCuIGhdRZgEXTjTNPjahGhLNB7lyE5wb0qiXPMLmMcNT?=
 =?us-ascii?q?l8c0VQrryf9y9Yg/N/G3Bf4XphN+WLhyGZ7+zAIJYMrfRrGjh0l/5d4Hkiy7pa?=
 =?us-ascii?q?9idERPl0mCvUttFvolGmnfOJyjpoSxdOrjdLhISWvURtI6nZ959AWWra8xIJ92?=
 =?us-ascii?q?mfFxMKp942QuHo7oVRwdjGkOrNLzTL+JqA+MoXB8HQbtyAM3MqGQvyHzDISgAC?=
 =?us-ascii?q?SGj4G3vYghlgj/za1XmYr54377tynpsBAutGS1EdFfcXC0JoWd8FLZF2UXUji7?=
 =?us-ascii?q?HN351A3ma3sBSEHJYShZvATP/HRKy3cDs=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAACL5xBch0O0hNFjGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGDayeDe4gZjBKCDRSXP4FyAQ8dEwGHOyI0CQ0BAwE?=
 =?us-ascii?q?BAQEBAQIBEwEBAQgNCQgpL4I2JAGCYQEBAQECAQECIARSBQEJAQEIAhgJIQICA?=
 =?us-ascii?q?wwFGDETBYMcAYF5CAQBihKbUHwziiEPgm2JTxc+gUGBEYMSiAUxgiYCiUaMNos?=
 =?us-ascii?q?LCYZIiwILGIFciEOHJSyaU4IOfQiDJ4InF44ePjOBBQEBjScBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ABAACL5xBch0O0hNFjGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGDayeDe4gZjBKCDRSXP4FyAQ8dEwGHOyI0CQ0BAwEBAQEBAQIBEwEBA?=
 =?us-ascii?q?QgNCQgpL4I2JAGCYQEBAQECAQECIARSBQEJAQEIAhgJIQICAwwFGDETBYMcAYF?=
 =?us-ascii?q?5CAQBihKbUHwziiEPgm2JTxc+gUGBEYMSiAUxgiYCiUaMNosLCYZIiwILGIFci?=
 =?us-ascii?q?EOHJSyaU4IOfQiDJ4InF44ePjOBBQEBjScBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,344,1539673200"; 
   d="asc'?scan'208";a="57139442"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 12 Dec 2018 02:51:32 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727067AbeLLKv3 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 12 Dec 2018 05:51:29 -0500
Received: from antares.kleine-koenig.org ([94.130.110.236]:45650 "EHLO
        antares.kleine-koenig.org" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726842AbeLLKv3 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 12 Dec 2018 05:51:29 -0500
Received: by antares.kleine-koenig.org (Postfix, from userid 1000)
        id 5683B4DA80C; Wed, 12 Dec 2018 11:51:26 +0100 (CET)
Date: Wed, 12 Dec 2018 11:51:24 +0100
From: Uwe =?iso-8859-1?Q?Kleine-K=F6nig?= <uwe@kleine-koenig.org>
To: Michal =?utf-8?B?Vm9rw6HEjQ==?= <michal.vokac@ysoft.com>
Cc: Thierry Reding <thierry.reding@gmail.com>,
        linux-pwm@vger.kernel.org, linux-kernel@vger.kernel.org
Subject: Re: [3/3] pwm: imx: Implement get_state() function for hardware
 readout
Message-ID: <20181212105118.GA9268@taurus.defre.kleine-koenig.org>
References: <1538403588-68850-3-git-send-email-michal.vokac@ysoft.com>
MIME-Version: 1.0
Content-Type: multipart/signed; micalg=pgp-sha512;
        protocol="application/pgp-signature"; boundary="liOOAslEiF7prFVr"
Content-Disposition: inline
In-Reply-To: <1538403588-68850-3-git-send-email-michal.vokac@ysoft.com>
User-Agent: Mutt/1.10.1 (2018-07-13)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org


--liOOAslEiF7prFVr
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable

Hello,

On Mon, Oct 01, 2018 at 04:19:48PM +0200, Michal Vok=C3=A1=C4=8D wrote:
> Implement the get_state() function and set the initial state to reflect
> real state of the hardware. This allows to keep the PWM running if it was
> enabled in bootloader. It is very similar to the GPIO behavior. GPIO pin
> set as output in bootloader keep the same setting in Linux unless it is
> reconfigured.
>=20
> If we find the PWM block enabled we need to prepare and enable its source
> clock otherwise the clock will be disabled late in the boot as unused.
> That will leave the PWM in enabled state but with disabled clock. That has
> a side effect that the PWM output is left at its current level at which
> the clock was disabled. It is totally non-deterministic and it may be LOW
> or HIGH.

Does this problem still exist if the pwm-imx driver is a module?

> Signed-off-by: Michal Vok=C3=A1=C4=8D <michal.vokac@ysoft.com>
> ---
>  drivers/pwm/pwm-imx.c | 53 +++++++++++++++++++++++++++++++++++++++++++++=
++++++
>  1 file changed, 53 insertions(+)
>=20
> diff --git a/drivers/pwm/pwm-imx.c b/drivers/pwm/pwm-imx.c
> index 7a4907b..6cd3b72 100644
> --- a/drivers/pwm/pwm-imx.c
> +++ b/drivers/pwm/pwm-imx.c
> @@ -83,6 +83,9 @@
> =20
>  #define MX3_PWM_SWR_LOOP		5
> =20
> +/* PWMPR register value of 0xffff has the same effect as 0xfffe */
> +#define MX3_PWMPR_MAX			0xfffe
> +
>  struct imx_chip {
>  	struct clk	*clk_per;
> =20
> @@ -93,6 +96,55 @@ struct imx_chip {
> =20
>  #define to_imx_chip(chip)	container_of(chip, struct imx_chip, chip)
> =20
> +static void imx_pwm_get_state(struct pwm_chip *chip,
> +		struct pwm_device *pwm, struct pwm_state *state)

broken alignment.

> +{
> +	struct imx_chip *imx =3D to_imx_chip(chip);
> +	u32 period, prescaler, pwm_clk, ret, val;
> +	u64 tmp;
> +
> +	val =3D readl(imx->mmio_base + MX3_PWMCR);
> +
> +	if (val & MX3_PWMCR_EN) {
> +		state->enabled =3D true;
> +		ret =3D clk_prepare_enable(imx->clk_per);
> +		if (ret)
> +			return;
> +	} else {
> +		state->enabled =3D false;
> +	}
> +
> +	switch (FIELD_GET(MX3_PWMCR_POUTC, val)) {
> +	case MX3_PWMCR_POUTC_NORMAL:
> +		state->polarity =3D PWM_POLARITY_NORMAL;
> +		break;
> +	case MX3_PWMCR_POUTC_INVERTED:
> +		state->polarity =3D PWM_POLARITY_INVERSED;
> +		break;
> +	default:
> +		dev_warn(chip->dev, "can't set polarity, output disconnected");

Should we return an error here?

> +	}
> +
> +	prescaler =3D MX3_PWMCR_PRESCALER_GET(val);
> +	pwm_clk =3D clk_get_rate(imx->clk_per);
> +	pwm_clk =3D DIV_ROUND_CLOSEST_ULL(pwm_clk, prescaler);
> +	val =3D readl(imx->mmio_base + MX3_PWMPR);

It would be more cautionous to not rely on the reserved bits to read as
zero. So I suggest to mask the value with 0xffff.

> +	period =3D val >=3D MX3_PWMPR_MAX ? MX3_PWMPR_MAX : val;
> +
> +	/* PWMOUT (Hz) =3D PWMCLK / (PWMPR + 2) */
> +	tmp =3D NSEC_PER_SEC * (u64)(period + 2);
> +	state->period =3D DIV_ROUND_CLOSEST_ULL(tmp, pwm_clk);

Would it make sense to introduce a policy about how to round in this
case? (Similarily for .apply?) This is of course out of scope for this
patch.

> +
> +	/* PWMSAR can be read only if PWM is enabled */
> +	if (state->enabled) {
> +		val =3D readl(imx->mmio_base + MX3_PWMSAR);
> +		tmp =3D NSEC_PER_SEC * (u64)(val);
> +		state->duty_cycle =3D DIV_ROUND_CLOSEST_ULL(tmp, pwm_clk);
> +	} else {
> +		state->duty_cycle =3D 0;
> +	}
> +}
> +
>  static int imx_pwm_config_v1(struct pwm_chip *chip,
>  		struct pwm_device *pwm, int duty_ns, int period_ns)
>  {
> @@ -272,6 +324,7 @@ static const struct pwm_ops imx_pwm_ops_v1 =3D {
> =20
>  static const struct pwm_ops imx_pwm_ops_v2 =3D {
>  	.apply =3D imx_pwm_apply_v2,
> +	.get_state =3D imx_pwm_get_state,
>  	.owner =3D THIS_MODULE,
>  };
> =20

--liOOAslEiF7prFVr
Content-Type: application/pgp-signature; name="signature.asc"

-----BEGIN PGP SIGNATURE-----

iQEzBAABCgAdFiEEfnIqFpAYrP8+dKQLwfwUeK3K7AkFAlwQ6CIACgkQwfwUeK3K
7AlMWgf9Gj9lIoShtg2SzUGV34HsRZ0VXDzyUeASF86bsQechN8iN5SsR+PQNmgC
LtStIJnVKknQz2FhdgcRfXo2wUVBpMIvmsyJSH4IhmYVd51u1TX8sigjIMZarofi
pN2Hy2jua0pwxQeOWicEgXO3ukl9yoOlQc6C716Gaf4fjxXCYddEUz3EyXEXumQM
XijO9J1bx22fr4hEmxCve95rV6xP2mpjhyvRLhVGFwR8RWlTj+ToOJQZ4Kv7j9hU
uc+S1G+WcV+Z8bvufh3Vko/C1pWwNfI6mD73X9sOapJVfQ7Wscx9Q4U6EoJBfmx/
PTxjDqSQvSuVUg+T4Hk7C5of+trTGw==
=+grv
-----END PGP SIGNATURE-----

--liOOAslEiF7prFVr--
