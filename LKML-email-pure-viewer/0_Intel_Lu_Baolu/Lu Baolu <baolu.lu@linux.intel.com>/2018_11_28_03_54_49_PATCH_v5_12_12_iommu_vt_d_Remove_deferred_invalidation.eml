Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 28 Nov 2018 12:10:29 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 0539358046A;
	Tue, 27 Nov 2018 19:58:33 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by fmsmga006-1.fm.intel.com with ESMTP; 27 Nov 2018 19:58:32 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AhM4ZBB9n18D3tf9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1+IeIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CRWRPQNtfWSJCDI27?=
 =?us-ascii?q?bYQPAfEBPf5aooTmu1cCsQGzCRW2Ce/z1jNFgGL9060g0+QmFAHLxAouH88Tu3?=
 =?us-ascii?q?nJttr1M6MSUf2ox6TP1jrMdfRW2TPg6ITSdhAhvOqBXbZxccrX1EkuGBnJjlSW?=
 =?us-ascii?q?qYz5ITyV0v4BvHSc7+plTO+ijXMspQJpojW32Msglo3EipgIxl3K6yl12ps5KN?=
 =?us-ascii?q?6kREJhYNOpEoNcuzyUOoZ5WM8uXm9ltSkgxrEbt5O2fTIGxZo6yxPZdveJaZKH?=
 =?us-ascii?q?4gj5W+aUOTp4hGxqeLa4hxuq70igxfPzVtOu3FZJsCVFiN/MuW4J1xDJ7ciHUP?=
 =?us-ascii?q?R98l+g2TaJyQ/T9vlJLV4omaffMZIt37A9moQJvUjeHSL6hF/6ga6Ue0k8/+in?=
 =?us-ascii?q?8eXnYrHopp+GMI90jxnzMqAvmsy5HOQ5PRECX2uF9uSm0r3s40n5TKxNjvw4lK?=
 =?us-ascii?q?nWroraKN8Fpq62HQBVyJwv6xWhADe81tQXg30HIEhCeBKdgIjlI0vOL+zgDfej?=
 =?us-ascii?q?n1Ssly9mx/THPr3iHJrBNHfCkKr6cLZ56k5czhczzN9F65JVDLEBPOz8WkvruN?=
 =?us-ascii?q?PECR85NhS+w/z7B9VlyoMeRWWPD7eZMKzIsF+I+vggI+6WaI8VpTbyMf4l5/H1?=
 =?us-ascii?q?gH89mF8de7Sp3JQNZHC5GPRmP1uWYX72jtgdFmcKuxI0TPb2h12aTT5Te3GyUr?=
 =?us-ascii?q?o+5jE8Fo2qF4TDRoergLyH2ye2BZlWZmFAClCRHnbkbYSEW/EQaC2MJs9tiCAL?=
 =?us-ascii?q?Vb+kS4U5zxGhqBf6y6Z7LurT4iAXr4nj1Nhy5+3Qjx0y7yZ7D8aG3mGJTmF0mH?=
 =?us-ascii?q?4IRjAs0KB+p0x91kmM0axij/NEEtxT4utDUh0mOp7E0+x6F9fyVxrCftiTTlaq?=
 =?us-ascii?q?WNGmATArQdI3zN8DeEJ9G9SkjhDe0CumGb4Vl7qXBJMq9qLQxWT+J8F4y3zezq?=
 =?us-ascii?q?kuk0EmQtdTNW2hnqNw6hLcB5DXnEmDl6alb6Ic3DXT+2eFymaOuEJYUAt0Uaje?=
 =?us-ascii?q?WXAfZ03Wrcn250/YTr+uD6gnPRVFycKYNqRKbdjph01cRPj/INTef36xm2CoCB?=
 =?us-ascii?q?mV3LyMcpTld38d3CrHDkgEiB4c/XCdOAg6ByehpX/eDTN0GVLuZUPs7fdxqHeh?=
 =?us-ascii?q?QkAoyAGKalVr16Cp9R4NmfycV/QT06oYuCcgrjV0G0q939LWCtaauwptZqJcYc?=
 =?us-ascii?q?k54FdG02LZuBdwPpihL6Bkm14ffB57v0Lo1xVrFIpAldImo28tzAp3MaiYyk9O?=
 =?us-ascii?q?dyuE3ZDsPb3aMnP9/BSxZK/ZxF7f0Mya9bwS6PslsVrjugKpFk0883h819lV0n?=
 =?us-ascii?q?2c5ojFDQYIUJLxVFo3+AZ+p73AfiY94IbU32V2Maaoqj/Cx84pBOw9xxegYtdT?=
 =?us-ascii?q?Kr+LGBXzEs0aHceuLuMqlkOtbhIFOuBS6aE1M9mnd/uAxK6kIuJgkCi6gmRA5Y?=
 =?us-ascii?q?B3yliM+DZkSu7Uw5YFxOmV3hGGVzjgllihqN34mYdeaTEUAGW/0ynkCJdNaaJo?=
 =?us-ascii?q?eYYEFHmhI9ewxtV4nJPtX39Y9Fi+B1IJwsOpeBySb0Dj0g1Uz0gYvXunmS6gxT?=
 =?us-ascii?q?xujz4ptraf3DDJw+n6dBsHO3RHRWl4gVf3PIi0icsXXEypbwgviRuk6lz2x6ld?=
 =?us-ascii?q?pKRjMWbTRV1EcDTxL2FnSqGwrKaNY9ZT6JM0tiVaSOa8bkqASr7+oBsa1DnvH3?=
 =?us-ascii?q?BEyzA4dDGqu5P5kAJ8iG+GKHZzrXzZedx/xBvF5dzcQ+JR0SQCRCVilTbXAV28?=
 =?us-ascii?q?NcGz/dqIj5fDrvy+V2W5W5xTaybrypmMtCm65W1sGhC/m/Gzmtv6EQk1yyP71t?=
 =?us-ascii?q?9qVTnWoxb4eIXky6O6Med/dElyGFD889Z6Gp15koYoh5Efw3kaio+V/Xoai2jz?=
 =?us-ascii?q?N9pb1Ln6bHoMQz4L3tHU7BLk2E1lMnKG2Yb5Wm+BzctmYtmwenkW1T4l78BWFK?=
 =?us-ascii?q?eU66RJnS50olq7tw3de/Z8kSkGyfsy9nEamfoGtxQ3ziWSGb0SGUhYPSrxlxWH?=
 =?us-ascii?q?9dy+raNXZHqxfri0zkZxgdehDLSaqAFGRHn5YosiHTN37shnLFLM13jz5pvled?=
 =?us-ascii?q?bKa9ITqwaUkwzBj+VOLJIxl/wKhTdoOG7nvH0lzfI7ggJq3Z2goIeHLGBt9rqj?=
 =?us-ascii?q?AhFELj31e98T+jb1gKlFhMmW2ISvHoh7FjUPQZvlVvaoEDMUtfT6OAeCCjw8qn?=
 =?us-ascii?q?GHGbXBGQ+T8ltpr3XKE5qzLXGYOGEZzcl+RBmaPEFfghobXDAkkZ4iDAyq2Nbt?=
 =?us-ascii?q?cERk5jAS+174rAFDyvlzOhn7U2ffohqoazguRJieKhpW8h9N50PPPcOC6eJzGj?=
 =?us-ascii?q?lS/oe9owyVNmybewNIAHkJW0yDGlDjJ6Su6sPG8+SCHeq+KP3OYbqVpOxaVveI?=
 =?us-ascii?q?w4+v04R88zaNMMWPImdtD/kh1kVfWnB5HtzTmy8TRCwPiyLNc8mbqQ+8+iJpr8?=
 =?us-ascii?q?C/8/frWAP16YuMEbtSNtpv9A6sgaeeLO6dnyJ5KTde1pMRyn7E0rkf3FgOiy5w?=
 =?us-ascii?q?czmhC6gPtSnITKjIgK9YEwYbaz9vNMtP968zxBRNNtXBitzr1r90lPo1C1ZeWF?=
 =?us-ascii?q?zlm8GpY9EKIm6nOFPGAkaLKKqJJTnRz87rZqO8TKVajP9IuB2opTabD0jjMyyf?=
 =?us-ascii?q?lznoUhCjK/1DgDuHMxxepo69dA1gCWziTNLgdx26P8V7jTwwwb0omHzKMXQQPi?=
 =?us-ascii?q?R7c0NItreQ9z9Xgu1jG2xd6XpoNemFlDyf7+ndK5YWt+NkAyV0l+1A5nQ6xKBY?=
 =?us-ascii?q?7CVFRPxzhSvTocRio1CgkumT1DVnVABCpSpMhIKO7g1ePvD78ZRaVj7++x8B4G?=
 =?us-ascii?q?HYXxYNvdxNWtf+p61LjN/Vm/S3YBtL7dPYtfQbAMTUL9+cPTJ1PQXsB2T8DQ0L?=
 =?us-ascii?q?VzenOGjTwUtHn6fB2GeSq80et9DGkZ0KV/cPXlUyEu5cDllNGN0EPYcxXzU4nL?=
 =?us-ascii?q?rdh8kNsynt5CLNTdlX68iUHsmZBu/ifXPA1eFJ?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAADsEf5bh0O0hNFkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGDayeMEY4plyyBcxQYEwGHWiI0CQ0BAwEBAQEBAQI?=
 =?us-ascii?q?BEwEBAQgNCQgpIwyCNiQBgmIDAwECJFIGCQEBGDgDVAYBEgWDHIICBadGM4pRh?=
 =?us-ascii?q?2KEK4IWgRGHbYYBAokdCoV5dk+PJwcCiiqGfAsYXpAtmDiBRoINTSNQDQ2CUoI?=
 =?us-ascii?q?nF4c1hnUyAQExAQGBAwEBigoBJQOCJAEB?=
X-IPAS-Result: =?us-ascii?q?A0ABAADsEf5bh0O0hNFkGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGDayeMEY4plyyBcxQYEwGHWiI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpI?=
 =?us-ascii?q?wyCNiQBgmIDAwECJFIGCQEBGDgDVAYBEgWDHIICBadGM4pRh2KEK4IWgRGHbYY?=
 =?us-ascii?q?BAokdCoV5dk+PJwcCiiqGfAsYXpAtmDiBRoINTSNQDQ2CUoInF4c1hnUyAQExA?=
 =?us-ascii?q?QGBAwEBigoBJQOCJAEB?=
X-IronPort-AV: E=Sophos;i="5.56,289,1539673200"; 
   d="scan'208";a="41843688"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 27 Nov 2018 19:58:31 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727603AbeK1O6e (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 28 Nov 2018 09:58:34 -0500
Received: from mga06.intel.com ([134.134.136.31]:51653 "EHLO mga06.intel.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1727561AbeK1O6e (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 28 Nov 2018 09:58:34 -0500
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from fmsmga002.fm.intel.com ([10.253.24.26])
  by orsmga104.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 27 Nov 2018 19:58:18 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,289,1539673200"; 
   d="scan'208";a="113554441"
Received: from allen-box.sh.intel.com ([10.239.161.122])
  by fmsmga002.fm.intel.com with ESMTP; 27 Nov 2018 19:58:16 -0800
From: Lu Baolu <baolu.lu@linux.intel.com>
To: Joerg Roedel <joro@8bytes.org>,
        David Woodhouse <dwmw2@infradead.org>
Cc: ashok.raj@intel.com, sanjay.k.kumar@intel.com,
        jacob.jun.pan@intel.com, kevin.tian@intel.com, yi.l.liu@intel.com,
        yi.y.sun@intel.com, peterx@redhat.com,
        Jean-Philippe Brucker <jean-philippe.brucker@arm.com>,
        iommu@lists.linux-foundation.org, linux-kernel@vger.kernel.org,
        Lu Baolu <baolu.lu@linux.intel.com>,
        Jacob Pan <jacob.jun.pan@linux.intel.com>
Subject: [PATCH v5 12/12] iommu/vt-d: Remove deferred invalidation
Date: Wed, 28 Nov 2018 11:54:49 +0800
Message-Id: <20181128035449.10226-13-baolu.lu@linux.intel.com>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20181128035449.10226-1-baolu.lu@linux.intel.com>
References: <20181128035449.10226-1-baolu.lu@linux.intel.com>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Deferred invalidation is an ECS specific feature. It will not be
supported when IOMMU works in scalable mode. As we deprecated the
ECS support, remove deferred invalidation and cleanup the code.

Cc: Ashok Raj <ashok.raj@intel.com>
Cc: Jacob Pan <jacob.jun.pan@linux.intel.com>
Cc: Kevin Tian <kevin.tian@intel.com>
Cc: Liu Yi L <yi.l.liu@intel.com>
Cc: Sanjay Kumar <sanjay.k.kumar@intel.com>
Signed-off-by: Lu Baolu <baolu.lu@linux.intel.com>
Reviewed-by: Ashok Raj <ashok.raj@intel.com>
---
 drivers/iommu/intel-iommu.c |  1 -
 drivers/iommu/intel-svm.c   | 45 -------------------------------------
 include/linux/intel-iommu.h |  8 -------
 3 files changed, 54 deletions(-)

diff --git a/drivers/iommu/intel-iommu.c b/drivers/iommu/intel-iommu.c
index 1c718bd9d6e9..f85f3fd1fb47 100644
--- a/drivers/iommu/intel-iommu.c
+++ b/drivers/iommu/intel-iommu.c
@@ -1697,7 +1697,6 @@ static void free_dmar_iommu(struct intel_iommu *iommu)
 	if (pasid_supported(iommu)) {
 		if (ecap_prs(iommu->ecap))
 			intel_svm_finish_prq(iommu);
-		intel_svm_exit(iommu);
 	}
 #endif
 }
diff --git a/drivers/iommu/intel-svm.c b/drivers/iommu/intel-svm.c
index d639da5e020b..c20e319c14e0 100644
--- a/drivers/iommu/intel-svm.c
+++ b/drivers/iommu/intel-svm.c
@@ -31,15 +31,8 @@
 
 static irqreturn_t prq_event_thread(int irq, void *d);
 
-struct pasid_state_entry {
-	u64 val;
-};
-
 int intel_svm_init(struct intel_iommu *iommu)
 {
-	struct page *pages;
-	int order;
-
 	if (cpu_feature_enabled(X86_FEATURE_GBPAGES) &&
 			!cap_fl1gp_support(iommu->cap))
 		return -EINVAL;
@@ -48,39 +41,6 @@ int intel_svm_init(struct intel_iommu *iommu)
 			!cap_5lp_support(iommu->cap))
 		return -EINVAL;
 
-	/* Start at 2 because it's defined as 2^(1+PSS) */
-	iommu->pasid_max = 2 << ecap_pss(iommu->ecap);
-
-	/* Eventually I'm promised we will get a multi-level PASID table
-	 * and it won't have to be physically contiguous. Until then,
-	 * limit the size because 8MiB contiguous allocations can be hard
-	 * to come by. The limit of 0x20000, which is 1MiB for each of
-	 * the PASID and PASID-state tables, is somewhat arbitrary. */
-	if (iommu->pasid_max > 0x20000)
-		iommu->pasid_max = 0x20000;
-
-	order = get_order(sizeof(struct pasid_entry) * iommu->pasid_max);
-	if (ecap_dis(iommu->ecap)) {
-		pages = alloc_pages(GFP_KERNEL | __GFP_ZERO, order);
-		if (pages)
-			iommu->pasid_state_table = page_address(pages);
-		else
-			pr_warn("IOMMU: %s: Failed to allocate PASID state table\n",
-				iommu->name);
-	}
-
-	return 0;
-}
-
-int intel_svm_exit(struct intel_iommu *iommu)
-{
-	int order = get_order(sizeof(struct pasid_entry) * iommu->pasid_max);
-
-	if (iommu->pasid_state_table) {
-		free_pages((unsigned long)iommu->pasid_state_table, order);
-		iommu->pasid_state_table = NULL;
-	}
-
 	return 0;
 }
 
@@ -214,11 +174,6 @@ static void intel_flush_svm_range(struct intel_svm *svm, unsigned long address,
 {
 	struct intel_svm_dev *sdev;
 
-	/* Try deferred invalidate if available */
-	if (svm->iommu->pasid_state_table &&
-	    !cmpxchg64(&svm->iommu->pasid_state_table[svm->pasid].val, 0, 1ULL << 63))
-		return;
-
 	rcu_read_lock();
 	list_for_each_entry_rcu(sdev, &svm->devs, list)
 		intel_flush_svm_range_dev(svm, sdev, address, pages, ih, gl);
diff --git a/include/linux/intel-iommu.h b/include/linux/intel-iommu.h
index cfcf9c1e1872..0605f3bf6e79 100644
--- a/include/linux/intel-iommu.h
+++ b/include/linux/intel-iommu.h
@@ -541,15 +541,8 @@ struct intel_iommu {
 	struct iommu_flush flush;
 #endif
 #ifdef CONFIG_INTEL_IOMMU_SVM
-	/* These are large and need to be contiguous, so we allocate just
-	 * one for now. We'll maybe want to rethink that if we truly give
-	 * devices away to userspace processes (e.g. for DPDK) and don't
-	 * want to trust that userspace will use *only* the PASID it was
-	 * told to. But while it's all driver-arbitrated, we're fine. */
-	struct pasid_state_entry *pasid_state_table;
 	struct page_req_dsc *prq;
 	unsigned char prq_name[16];    /* Name for PRQ interrupt */
-	u32 pasid_max;
 #endif
 	struct q_inval  *qi;            /* Queued invalidation info */
 	u32 *iommu_state; /* Store iommu states between suspend and resume.*/
@@ -663,7 +656,6 @@ void iommu_flush_write_buffer(struct intel_iommu *iommu);
 
 #ifdef CONFIG_INTEL_IOMMU_SVM
 int intel_svm_init(struct intel_iommu *iommu);
-int intel_svm_exit(struct intel_iommu *iommu);
 extern int intel_svm_enable_prq(struct intel_iommu *iommu);
 extern int intel_svm_finish_prq(struct intel_iommu *iommu);
 
-- 
2.17.1

