Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 27 Nov 2018 12:18:33 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 678195802E4;
	Mon, 26 Nov 2018 18:05:18 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga001-1.jf.intel.com with ESMTP; 26 Nov 2018 18:05:18 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AjUc2cBcWWeM9dY60AaDZ4SHAlGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc6+YRaN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4qF2QxHqlS?=
 =?us-ascii?q?gHLSY0/m/XhMJukaxVoxyhqBNjzIHJYo6aOuF+frvfcN4BWWpNQtxcWzBdDo6m?=
 =?us-ascii?q?cYcCCfcKM+ZCr4n6olsDtRywBQiqBOzzyj9HnHn21rA/3eQgFAHNwQstH9cPsH?=
 =?us-ascii?q?TSsNr1NL0dUeauwanL0zrDdfVW1in56ITSdRAhu/6MUKt2fMHMykcvDxvIgkuM?=
 =?us-ascii?q?pYHhJT+Zy+oAv3aB4+Z9Vu+jl3QrpgBzrzS32MshhZXFip8Qx1DK7yp13Jo5KN?=
 =?us-ascii?q?ilR0N+fdKpFZ9duiKUN4drR84vQHpntSgnxbADpJK7ciYHxZYiyhPRdfOKcI6F?=
 =?us-ascii?q?6Q/5WumLOzd3nndldaq/hxms9UigzfXxVte70FlUtCpJiNrMuW4X1xzV9MeHTu?=
 =?us-ascii?q?Fx/kC72TaAzwzT6+dELl4olafDNZIt3ro9moAOvUnNACP6glj6gayKekk+++Wl?=
 =?us-ascii?q?6fzrYrD8qZ+dM490hBv+MqMrmsGnBeQ4Mw4OX3WU+Oil173s41f5QLNUgf0yi6?=
 =?us-ascii?q?XZt57bJcIFqa6jGAJVzIkj5AilDzu809QXg2MHLFRbdxKDlYTpPEvOIP/gAfel?=
 =?us-ascii?q?n1usiCtrx+zBPrD5BpXNL3vDn6n7cbdy9k5R0w4zzdFZ55JJBbANOvPzWknttN?=
 =?us-ascii?q?PGCh81KRC7w+HiCN9lzIMRRXqPArOFMKPVqVKI5vggI+iQZIAPvzbxMfgl5+P0?=
 =?us-ascii?q?gn8/ll8QZq2p3ZoRaHClEfVqOUSZYXzwgtgfFWcGpBYxTOvviFeaSz5ce26yX7?=
 =?us-ascii?q?4g5jE8EI+mD4DDSZ63jLyC2ye7GJtWZmddB1CIEHfocZiEWvgWZCKTJM9hjiIL?=
 =?us-ascii?q?Vby7R4A90hGusRfwy6B7IerM5i0YqZXj2cBv6O3IlREy8j90A96H026XTWF5hW?=
 =?us-ascii?q?cIRz4w3KBirk1x0FaD0a5kg/NGEdxf/e9GUgA/NZTE1ex1F8jyWh7dfteOUFum?=
 =?us-ascii?q?Qc+pATcrQtI1wt8BeUB9G9q5gxDH3iqqBaIVlrORCJw19KLcw2b+J8Jnx3na06?=
 =?us-ascii?q?khikEsQtFTOm2+mq5/6w/TCpbUnEqDiaala74Q3C7X+2eF1mqBokdYXAl0UaXG?=
 =?us-ascii?q?WHAfYlDbrdD45kPEUr+vBq4rMgpHyc6eNKRKbsflgklBRPfmIN7eeX6+m3+sBR?=
 =?us-ascii?q?aUwbOBdJfldH8D3CrDEkQEkxoc/XCdNQcgACesuGbeDD1oFVLybELg6+h+qHWn?=
 =?us-ascii?q?TkAqywGGdVFu172w+hQNn/yTV+sT3q4YuCcmszh0AFe939fRC9qcpwpgfL9QYc?=
 =?us-ascii?q?8n7FdAz2LZsw19PpqvL615gl4ecgJ3v17h1hltC4VAl9Qqo20uzAZoNa2Y11ZB?=
 =?us-ascii?q?fSuC3Z/sIr3XNnXy/Be3ZqHM3lHRztmX9bkP6fgisFrjoRymGVAk83Vk1NlVzW?=
 =?us-ascii?q?CR5pHLDAoUTJLwXVw79xl8p7HGfCY945nY2mFrMamxqjXCwc4mBPM5yha8eNdS?=
 =?us-ascii?q?KKOFFBLoH8IGHcSvKewqlEKvbhILJ+1S8K80P8W7d/qJwqKrPeBgnC64gmRD+o?=
 =?us-ascii?q?xyzkWM9y9kQO7Sw5kF2+2Y3heAVzrkllehs9z4lppeZT4PGWqz0y7kC5BLZq1z?=
 =?us-ascii?q?ZIoEFX2hI8mqydpgnZ7tXHhY+UWnB1MH3s+pZBWTY0b83Q1WyUQYv3inlTGkwD?=
 =?us-ascii?q?xzljEjtrCf0zDWw+T+aBoHPXZGRWljjVv2IYm4lcsaXFWubwUykBul5ED6x7VU?=
 =?us-ascii?q?pahlLmnTR1tIcDbyL214TqSwsb+CadZV6Jw0qSVXTPi8YVeCR77/uRQaySDjH2?=
 =?us-ascii?q?hZxDwhbDGloJb5nx97iGKbMnlzqmHUecVxxRfZ+dzdSuRd3jsARClklzbXAkKw?=
 =?us-ascii?q?MMWu/dWRj53DqPyxV3q9Vp1Pdinm1YOBuzG85WFwAx2/nvazl8bjEQg71y/7yt?=
 =?us-ascii?q?ZrWT/JrBb6fonkyaC6Pfh7cUlvAV/289B6FZ1mkossmJEQ3mAXhpaP8noGi2vz?=
 =?us-ascii?q?Mchb1rj4bHoCXjMLx9/V4A742ExsNH6JxoT5VmmDzctlfdW1fmQW2icl5cBQFK?=
 =?us-ascii?q?iU9KBEnTdyolegqALRYPt9kS0Hxfog9nEamP0JtxQ3ziqGHL8SB0ZYMDfolxSJ?=
 =?us-ascii?q?6dC+sapWaHyucbi2yEpxg9ShAKuerQFbXXbzYo0iEjNo7sVjLFLM12X+6p3jeN?=
 =?us-ascii?q?nVd94StwebkxHdj+hOM5Ixl+EHhS5mOWL7oH0kxPQ3jR1o3ZGmooeHL39h876+?=
 =?us-ascii?q?Ah5dLjf1fd8c+inxjaZCmcabx5ugEY9mGjUPQZvkV/aoEC8JuPTjNgaOFiA8q3?=
 =?us-ascii?q?iBFbreGw+f9Flpr3bVH5+3MHGXIWETzc9+SxmFOExfnAcUUS04npEjEwCl2tfh?=
 =?us-ascii?q?fF1l5jwL5V74txhMyv9uNxblSWfSvwOoajYySJiCIxta9ABC50HJMcOA6uJ/BT?=
 =?us-ascii?q?1X/pqkrAaVMGyUexxIDX0VWkyDH13iPr6u5cTZ8+iFHOW+KeHCYa6JqexYWPeF?=
 =?us-ascii?q?3pav0opg/zaROcSDJHhiD/sn2kVdWXB1AdjWmzIKSyYPjSLCc9abpAug+i1wts?=
 =?us-ascii?q?2/8OrkWAPs5YuMCrteK9Zv+wqxgaeMKeGQnjt5KS1D25MIxH/IzqUf3VEIhyFv?=
 =?us-ascii?q?cTmtDaoPtSrXQK3Mna9XCgYRazlvO8tQ86I8wg5NNNbBhdPozbF4lOA6CldfWV?=
 =?us-ascii?q?zlm8GkfsgKI2C7NFPaC0eHLrWGJTvXw87pZaOwU6FfjOJRtxeoozaUD1fjPiif?=
 =?us-ascii?q?lznuTx2vLeBMjCSBMBNCoo2ybhZtBnblTN/9bh27Mdl3jSA5wLEuh3PKM3IcPi?=
 =?us-ascii?q?Z4c09XsrKQ6iZYiO1lG2Nd9nplMfWEmyGB4ujYMJkWt/5rAiVyl+1C4XU6y6Fa?=
 =?us-ascii?q?7CdLRPFunCvSr9huo0ypk+WVyzpnVgZOpShPhI6RoUpiPqDZpdF8XiPt+h4X4H?=
 =?us-ascii?q?rYLhMQu9xjQonmuLhV4tzOkr/jbTlF7tTY9NcdAM6SL9iIZikPKx3sTRvVCgAF?=
 =?us-ascii?q?RDjjFmDazxhYkfeZ9nSThps3sJ7hnNwJULANBw99Le8TFkkwRI9KG5xwRD5xyb?=
 =?us-ascii?q?M=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AuAAD0pPxbh0O0hNFjGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBgTCCOyeMEY4RFJcogXMSAQEYEwGIXgUiNAk?=
 =?us-ascii?q?NAQMBAQEBAQECARMBAQEIDQkIKSMMgjYigmUBAgMBAiQTBgE4AQMCCQEBBQUOC?=
 =?us-ascii?q?gklAwwFIAEFAQIgEwUWgwaBagMVAQSaITyMCTOCdwWFCw2CEQIGEopbgRwXgX+?=
 =?us-ascii?q?EI4Rsg0eCJgKJHwSGbI91CYIgjwQLGIlRhzeYCgYCCQcPIYElgg0zGggoCIMng?=
 =?us-ascii?q?hsMF4NKimExMoEEAQEBDo0IAQE?=
X-IPAS-Result: =?us-ascii?q?A0AuAAD0pPxbh0O0hNFjGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBgTCCOyeMEY4RFJcogXMSAQEYEwGIXgUiNAkNAQMBAQEBAQECA?=
 =?us-ascii?q?RMBAQEIDQkIKSMMgjYigmUBAgMBAiQTBgE4AQMCCQEBBQUOCgklAwwFIAEFAQI?=
 =?us-ascii?q?gEwUWgwaBagMVAQSaITyMCTOCdwWFCw2CEQIGEopbgRwXgX+EI4Rsg0eCJgKJH?=
 =?us-ascii?q?wSGbI91CYIgjwQLGIlRhzeYCgYCCQcPIYElgg0zGggoCIMnghsMF4NKimExMoE?=
 =?us-ascii?q?EAQEBDo0IAQE?=
X-IronPort-AV: E=Sophos;i="5.56,284,1539673200"; 
   d="scan'208";a="54941694"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 26 Nov 2018 18:05:16 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728151AbeK0NB0 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 27 Nov 2018 08:01:26 -0500
Received: from mail-pg1-f195.google.com ([209.85.215.195]:46360 "EHLO
        mail-pg1-f195.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727544AbeK0NBZ (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 27 Nov 2018 08:01:25 -0500
Received: by mail-pg1-f195.google.com with SMTP id w7so7057109pgp.13;
        Mon, 26 Nov 2018 18:05:12 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=sender:date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=HceQpm+Y1ZbD1rpfaGMY9nQ/A+0TiH92egWM3unopz8=;
        b=A6pFxlxGVVfx2b+td0C8B5SdPqtGo/XtZQiRHENP40kBUg6yHAJPj4jdiWFRpVRaIn
         908iPT9CfyhrKMX4hMfEYzcidqINIem7vrAv/JEPSCLcLGQNQ+5hzUPLKRIWx8jNU89J
         IpQEDUjTFuaXC5gT5JJJ2MKHZ4+hjvQfWRVV1j6OswjzgTteLgTy52qzJ5FGxIgw0FHR
         JGbwpAdolgoqWkb9Pj+aNdDSo+j0h8YTd6yJrdQwVVwh9d5uRGg94jLhTCHgHuUqHSEs
         D0uoIyjzHp4H2HUkAfQaAbi7Z+lCSpE9l98LZZMGEbvo0re3gqZblp8llV47s7x4XBmF
         vz+Q==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:sender:date:from:to:cc:subject:message-id
         :references:mime-version:content-disposition:in-reply-to:user-agent;
        bh=HceQpm+Y1ZbD1rpfaGMY9nQ/A+0TiH92egWM3unopz8=;
        b=ktHd9SB0qTn0+nw/2/q8X2jnJdede6hxe8+EBiuQU2B+IMTyKOFZdH960edke8+1YR
         aGcNCJMe4m7b2iYG1etAEfm/yce+azkR0kmlaAcZ3p2ioFfzuIS3D2DWskW9n3KkO48J
         aIbZWq72U9nKwXIQg+OoL2LxvgHbOwFWAb3cBz6Al2e+U2TiKA8q+VGcT+yIZJh0X4vy
         /z7imeUQtX8TdN5XFCJXPidQwlbd8omdyEjVNuiYUz+hUNtMcDK4uOccSdfe92FO1ZnZ
         TTGsu7B0Ztp1rUM33lVKkb/1JdKeyyMgi38s3eTvjDCgIhrwkSW0DcnzkRTZ3MQ0ce2a
         eq/w==
X-Gm-Message-State: AGRZ1gLLBEqSqrw6bN+N6/DAN/DQJ7w1HJnLg9msInEWltowNOx3P5Kh
        Pd1mDmyM1MjaWEu8u4ys4jh3XrmSvMk=
X-Google-Smtp-Source: AJdET5eR1Ggl2c4Dk2gVTrQn8yXemBeDV/7Sx1q4Rg3Q9J88fLJzFD5wGXx7s+BBd8fCaH5iwknhSg==
X-Received: by 2002:a62:c21c:: with SMTP id l28mr30562786pfg.74.1543284312016;
        Mon, 26 Nov 2018 18:05:12 -0800 (PST)
Received: from google.com ([2401:fa00:d:0:98f1:8b3d:1f37:3e8])
        by smtp.gmail.com with ESMTPSA id s37sm3061284pgm.19.2018.11.26.18.05.09
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Mon, 26 Nov 2018 18:05:10 -0800 (PST)
Date: Tue, 27 Nov 2018 11:05:06 +0900
From: Minchan Kim <minchan@kernel.org>
To: Andrew Morton <akpm@linux-foundation.org>
Cc: LKML <linux-kernel@vger.kernel.org>,
        Sergey Senozhatsky <sergey.senozhatsky.work@gmail.com>,
        stable@vger.kernel.org
Subject: Re: [PATCH v2 1/7] zram: fix lockdep warning of free block handling
Message-ID: <20181127020506.GA237537@google.com>
References: <20181126082813.81977-1-minchan@kernel.org>
 <20181126082813.81977-2-minchan@kernel.org>
 <20181126124928.8fbbf01966b741ac79a3d003@linux-foundation.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181126124928.8fbbf01966b741ac79a3d003@linux-foundation.org>
User-Agent: Mutt/1.10.1+60 (6df12dc1) (2018-08-07)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Mon, Nov 26, 2018 at 12:49:28PM -0800, Andrew Morton wrote:
> On Mon, 26 Nov 2018 17:28:07 +0900 Minchan Kim <minchan@kernel.org> wrote:
> 
> > 
> > ...
> >
> > With writeback feature, zram_slot_free_notify could be called
> > in softirq context by end_swap_bio_read. However, bitmap_lock
> > is not aware of that so lockdep yell out. Thanks.
> > 
> > The problem is not only bitmap_lock but it is also zram_slot_lock
> > so straightforward solution would disable irq on zram_slot_lock
> > which covers every bitmap_lock, too.
> > Although duration disabling the irq is short in many places
> > zram_slot_lock is used, a place(ie, decompress) is not fast
> > enough to hold irqlock on relying on compression algorithm
> > so it's not a option.
> > 
> > The approach in this patch is just "best effort", not guarantee
> > "freeing orphan zpage". If the zram_slot_lock contention may happen,
> > kernel couldn't free the zpage until it recycles the block. However,
> > such contention between zram_slot_free_notify and other places to
> > hold zram_slot_lock should be very rare in real practice.
> > To see how often it happens, this patch adds new debug stat
> > "miss_free".
> > 
> > It also adds irq lock in get/put_block_bdev to prevent deadlock
> > lockdep reported. The reason I used irq disable rather than bottom
> > half is swap_slot_free_notify could be called with irq disabled
> > so it breaks local_bh_enable's rule. The irqlock works on only
> > writebacked zram slot entry so it should be not frequent lock.
> > 
> > Cc: stable@vger.kernel.org # 4.14+
> > Signed-off-by: Minchan Kim <minchan@kernel.org>
> > ---
> >  drivers/block/zram/zram_drv.c | 56 +++++++++++++++++++++++++----------
> >  drivers/block/zram/zram_drv.h |  1 +
> >  2 files changed, 42 insertions(+), 15 deletions(-)
> > 
> > diff --git a/drivers/block/zram/zram_drv.c b/drivers/block/zram/zram_drv.c
> > index 4879595200e1..472027eaed60 100644
> > --- a/drivers/block/zram/zram_drv.c
> > +++ b/drivers/block/zram/zram_drv.c
> > @@ -53,6 +53,11 @@ static size_t huge_class_size;
> >  
> >  static void zram_free_page(struct zram *zram, size_t index);
> >  
> > +static int zram_slot_trylock(struct zram *zram, u32 index)
> > +{
> > +	return bit_spin_trylock(ZRAM_LOCK, &zram->table[index].value);
> > +}
> > +
> >  static void zram_slot_lock(struct zram *zram, u32 index)
> >  {
> >  	bit_spin_lock(ZRAM_LOCK, &zram->table[index].value);
> > @@ -443,29 +448,45 @@ static ssize_t backing_dev_store(struct device *dev,
> >  
> >  static unsigned long get_entry_bdev(struct zram *zram)
> >  {
> > -	unsigned long entry;
> > +	unsigned long blk_idx;
> > +	unsigned long ret = 0;
> >  
> > -	spin_lock(&zram->bitmap_lock);
> >  	/* skip 0 bit to confuse zram.handle = 0 */
> > -	entry = find_next_zero_bit(zram->bitmap, zram->nr_pages, 1);
> > -	if (entry == zram->nr_pages) {
> > -		spin_unlock(&zram->bitmap_lock);
> > -		return 0;
> > +	blk_idx = find_next_zero_bit(zram->bitmap, zram->nr_pages, 1);
> > +	if (blk_idx == zram->nr_pages)
> > +		goto retry;
> > +
> > +	spin_lock_irq(&zram->bitmap_lock);
> > +	if (test_bit(blk_idx, zram->bitmap)) {
> > +		spin_unlock_irq(&zram->bitmap_lock);
> > +		goto retry;
> >  	}
> >  
> > -	set_bit(entry, zram->bitmap);
> > -	spin_unlock(&zram->bitmap_lock);
> > +	set_bit(blk_idx, zram->bitmap);
> 
> Here we could do
> 
> 	if (test_and_set_bit(...)) {
> 		spin_unlock(...);
> 		goto retry;
> 
> But it's weird to take the spinlock on behalf of bitops which are
> already atomic!
> 
> It seems rather suspicious to me.  Why are we doing this?

What I need is look_up_and_set operation. I don't see there is an
atomic operation for that. But I want to minimize irq disabled
area so first, it scans the bit lockless and if race happens,
i can try under the lock.

It seems __set_bit is enough under the lock.

> 
> > +	ret = blk_idx;
> > +	goto out;
> > +retry:
> > +	spin_lock_irq(&zram->bitmap_lock);
> > +	blk_idx = find_next_zero_bit(zram->bitmap, zram->nr_pages, 1);
> > +	if (blk_idx == zram->nr_pages)
> > +		goto out;
> > +
> > +	set_bit(blk_idx, zram->bitmap);
> > +	ret = blk_idx;
> > +out:
> > +	spin_unlock_irq(&zram->bitmap_lock);
> >  
> > -	return entry;
> > +	return ret;
> >  }
> >  
> >  static void put_entry_bdev(struct zram *zram, unsigned long entry)
> >  {
> >  	int was_set;
> > +	unsigned long flags;
> >  
> > -	spin_lock(&zram->bitmap_lock);
> > +	spin_lock_irqsave(&zram->bitmap_lock, flags);
> >  	was_set = test_and_clear_bit(entry, zram->bitmap);
> > -	spin_unlock(&zram->bitmap_lock);
> > +	spin_unlock_irqrestore(&zram->bitmap_lock, flags);
> 
> Here's another one.  Surely that locking is unnecessary.

Indeed! although get_entry_bdev side can miss some bits, it's not a critical problem.
Benefit is we might remove irq disable for the lockdep problem.
Yes, I will cook and test.

Thanks, Andrew.
