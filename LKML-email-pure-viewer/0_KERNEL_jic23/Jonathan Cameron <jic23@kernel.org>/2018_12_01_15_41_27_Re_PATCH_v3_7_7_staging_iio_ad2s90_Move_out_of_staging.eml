Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:25:27 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from mta-temp.ostc.intel.com (mta-temp.ostc.intel.com [10.54.63.100])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 710B4580C84;
	Sat,  1 Dec 2018 18:20:39 -0800 (PST)
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by mta-temp.ostc.intel.com (Postfix) with ESMTPS id A6C1162428;
	Sat,  1 Dec 2018 07:42:39 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga007-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 01 Dec 2018 07:41:39 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AOUAOYB8uVqgccf9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1+0QIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CS2RPXthfWTFCDIy+?=
 =?us-ascii?q?YYsBCOUOMvpXoYnmv1sDrwCzBRWuCe711jNFnGP60bM83u88EQ/GxgsgH9cWvX?=
 =?us-ascii?q?rQq9X1Mr0dUfy1zKbSyzXIcu1b1i346IfWaBAhpveMVq93fMrTyEkgCx3Jg1uL?=
 =?us-ascii?q?pIzmITyVzOINvHaf7+Z6UuKvkWEnphh3rzOyxckskpHEipwJxl3A7yl13Yg4Kc?=
 =?us-ascii?q?OiREJmYtOoDIFcuiCYOoduQc4uXntktSI7x7Ecp5K2cicHxI46yxPQaPGKdZWD?=
 =?us-ascii?q?7Aj5W+aLOzh4gWpoeLKhiBa29kit0vP8Vsaq31ZQtCZFkcfDtmoL1xPN7siLUP?=
 =?us-ascii?q?x9/l2u2TqX1gDT7P9LIVwsmKbFN5IsxqQ8mocdvEjdBCP6hUb7gLOMekgl+OWk?=
 =?us-ascii?q?8+Hnba/npp+YOY90kAb+MqE2l8y7AOQ4NBUOXmeC9eS/yrLj50v5T6tOjvEvla?=
 =?us-ascii?q?nYvpbaKtoBpqOiHQ9V3Zgs6wylAzelztsYh38HI0xBeB6diIjpIV7OLOjiDfij?=
 =?us-ascii?q?m1SsjCtrx/feM73lA5XNLWbMnK3ufLZg8ENczAszzdZC55NbEL0BIfTzWlPvu9?=
 =?us-ascii?q?zcFBM2Lwu0w+P/AtVnyoweQX6PArOeMK7KsV+H/OMvI/WWa48Sojr9K+Ul6OTo?=
 =?us-ascii?q?jX82glIdeaip3Z0KaHG3BPhmIkOZYWbyjdcFC2sFog0+TOnygl2YTTFTf2qyX7?=
 =?us-ascii?q?475jwjCoKmCpnMSpqugLyG2ie7GJpWa3tCClCNF3foaoqFV+0NaCKUPs9ujDgE?=
 =?us-ascii?q?WaK9RI8m0BGkrBX6xKZ/LurI5i0Ysoru28Ju5+3TkhEy9iZ4D96H3GGPVGx0mm?=
 =?us-ascii?q?IIRzkr3KFwu0B9y1GD0bRmjPxcD9Bc+/RJUgIiP57G0+N6E8zyWh7GftqRS1ap?=
 =?us-ascii?q?WNOmDSs1TtIw2dAOZUl9Fs6mjhDC2SqqHrAUm6aKBJwy7qLTwXzxK9xhxHbB0a?=
 =?us-ascii?q?krl0MmTddXNW26mq5/8BDeCJPTnEWHiammb6Qc0zTL9GeY02WOukZUUApzUaXA?=
 =?us-ascii?q?WXASfU/WrdX/5kPfQL6iE7UnMg1dycGcLqtGcMHmjVJDRP37ItTRf3qxm3usBR?=
 =?us-ascii?q?aP3r6DcZDle3sD0ynHCEgLiQYT/W2YOgg4HSqhp2PeDDpzFVPgeU/s8O9+qG+l?=
 =?us-ascii?q?QU8w1Q2Fc0ph17+t8B4PmfOcU+8T3q4DuCo5tzV0HVO939XKC9qApwttZrlcbc?=
 =?us-ascii?q?k64Fdd0WLZtgp9PpO7IqBmh14edRl3vkz02xV2DIVAjdYlrHcwwAVuLqKY1UtL?=
 =?us-ascii?q?dymE0pDoJr3XNm7y8Qi1ZK7SxF7f38iZ+6cV5PsjtlXsoRumFkwh83VgzdlYyH?=
 =?us-ascii?q?+c5pTMDAoPXpP9SEc39x5mp77EZikx/Z/b1XppMaOsqD/Nx8opBPc5yhanZ9pe?=
 =?us-ascii?q?ML6EGBXuHMEABsmuKPYlm16mbh8fOOBS9ag0P96pdvec2a6rOvpgkyyijWhd/I?=
 =?us-ascii?q?991UeM/TJmSuHUx5YF3+2Y3gyfWjfmjVeurtr4mZpZajEVBGa/zzbrBJRQZqFr?=
 =?us-ascii?q?YYkEE2OuLNCpydVkgJ7tXWVV9FqiB1MAxc+odgCeb1373Q1My0sXpWarlje/zz?=
 =?us-ascii?q?xxizsptLaQ3DTSw+T+cxoKIm5KRGh4gVbsO4S0lM0aXE6zYggtlRul41v6xqdB?=
 =?us-ascii?q?qKR+KWnTXVlHfyzsI25+Vauws6KIY9RT55MwrSVXTOO8bEiYSrHnuRsa0CDjH2?=
 =?us-ascii?q?xEyDAgbT6quZb5nx18iG2DKnZ+t37ZecB2xRfC693QX/9R3jwaRCZmjTnbHESz?=
 =?us-ascii?q?P96s/d+MjZfMrvi+V369Vp1UaSTqzZmPtCyh6W1oAB2/meu+mtnmEQg8zC/62M?=
 =?us-ascii?q?NmVSTOrBbgfIbr0762Pv5gfkltHFX88dZ1Gplikossg5EdwXsaiY+U/XYdkWfz?=
 =?us-ascii?q?LM9U2aTxbHcWQT4LwtjV4BXq2UF5L3KJwZ75WWuZwsd7e9a6ZWYW0Don789WEK?=
 =?us-ascii?q?eU8KBEnSxtr1q9rALRYuJyki0TyPQw834an/8GuBA2wSqDGLASElJVPSjtlxSO?=
 =?us-ascii?q?8tC/o79bZGepcbisykV+mcqtA62FogFZQHz5YIstHTds7sVjN1LByGHz6obheN?=
 =?us-ascii?q?XKbNMcrBuUkwrbj+hOKZI8jf4KhSthOWLgsnwp0e87jRpy3Z6kuIiLMXli/KW8?=
 =?us-ascii?q?AhRALD36e9sT+i3xjaZZhsuZxJqgHpJlGjUWRpfoSe+oHSkWtfTmMQaODTI9pm?=
 =?us-ascii?q?2aGbrZAQ+Q9kNmo2jTHJCsMnGdPGMZwsl6RBmBOExfhxgZXDcgkZ48CA+q39bt?=
 =?us-ascii?q?cFtj6jAS+174qQZMyuRyOBnkSWrfoAaoajEpSJmQNhZW7wdC51vLPsya9O58Ay?=
 =?us-ascii?q?ZY/pi5pgyXNmObfxhIDX0OWkGcB1HjOaSu5cDd8+eCAOqyNeDOYbKIqexRTPqI?=
 =?us-ascii?q?wZOv0o17/zeDLMmPP39iD+El1UpHR3x2B8PZmzAXQSwNiy3Nd9KbpAu7+iBvrs?=
 =?us-ascii?q?Cw7vXrWAHs5YuOEbdSMs9v+xe5gaidLe6QmT15JC1c1pMNw3/I1bce0EQTiyFo?=
 =?us-ascii?q?azmiD7AAuTTRQ6LXn69dFwQbZD9rNMtU86I82RFANtTGitzuzL53kP40B01BVV?=
 =?us-ascii?q?zggcypYc0KI2egNFLIHkqLNbKGJSHVzMHze6+zVbpQjOBMvR2qpTmbC1PjPiiE?=
 =?us-ascii?q?lzTxSxCvMORMgDuHMxBEpI69cghiCW74QdLiax27NsJ3jDIszb01gHPKKXATMT?=
 =?us-ascii?q?xmf0xRqb2Q6DtSgu9jFGxZ8nplMe6Elj6Z7ubCLJYWtPprAiJsmONb4HQ10b1V?=
 =?us-ascii?q?7C5fSfxxmSvSqMNuol68numOzDpnTARBqjJRiI2XukViPPaRyp4VE1/e8B8J4G?=
 =?us-ascii?q?yWT1wjo9Z1A9vjob0agozGkK/jITFO6c+S1NEQCszZIcSvOXwoNR3mXjXTCV1W?=
 =?us-ascii?q?YySsMDT9gEpUjPGb8DW+p503sJ/q0M4MS7QBD3Q2G+kcB0AjG8YNdsQkFgg4mK?=
 =?us-ascii?q?KW2ZZbrUG1qwPcEYAD5sjK?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ATAACeqgJch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBAYNqJ4wRX4t8AQEGgTUUiH0OhGuJPhSBYhEYEwGHdiI0CQ0BAwE?=
 =?us-ascii?q?BAQEBAQIBEwEBAQoLCQgpIwxCAQwBgWYkAYJhAQEBAQIBAQIkEwYBATcBBAEJA?=
 =?us-ascii?q?QEKGAklAwwSNgYTBYMcgWoDCAUIBAGkZYFsM4J2AQEFhQANghQIiwCBHIEPgQe?=
 =?us-ascii?q?BEYMSgleBb4YWgSwBAYgEgW+ED0aQHi0BBgIBjg6DIyMKkRyOdIl5gUaCDTMaM?=
 =?us-ascii?q?IFhgU6CG4kBhT9AMoECAwEBIRODCYoBAQE?=
X-IPAS-Result: =?us-ascii?q?A0ATAACeqgJch0O0hNFjHAEBAQQBAQcEAQGBUQcBAQsBAYN?=
 =?us-ascii?q?qJ4wRX4t8AQEGgTUUiH0OhGuJPhSBYhEYEwGHdiI0CQ0BAwEBAQEBAQIBEwEBA?=
 =?us-ascii?q?QoLCQgpIwxCAQwBgWYkAYJhAQEBAQIBAQIkEwYBATcBBAEJAQEKGAklAwwSNgY?=
 =?us-ascii?q?TBYMcgWoDCAUIBAGkZYFsM4J2AQEFhQANghQIiwCBHIEPgQeBEYMSgleBb4YWg?=
 =?us-ascii?q?SwBAYgEgW+ED0aQHi0BBgIBjg6DIyMKkRyOdIl5gUaCDTMaMIFhgU6CG4kBhT9?=
 =?us-ascii?q?AMoECAwEBIRODCYoBAQE?=
X-IronPort-AV: E=Sophos;i="5.56,303,1539673200"; 
   d="scan'208";a="43123112"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 01 Dec 2018 07:41:37 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727101AbeLBCyV (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sat, 1 Dec 2018 21:54:21 -0500
Received: from mail.kernel.org ([198.145.29.99]:53370 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726717AbeLBCyU (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Sat, 1 Dec 2018 21:54:20 -0500
Received: from archlinux (cpc91196-cmbg18-2-0-cust659.5-4.cable.virginm.net [81.96.234.148])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 50C0920673;
        Sat,  1 Dec 2018 15:41:30 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1543678892;
        bh=lO0ZEoKuRZ6H4kjCx0LGAwPGDMRttkxNWUgl4r/W85Y=;
        h=Date:From:To:Cc:Subject:In-Reply-To:References:From;
        b=LBYPr/DrFEBeyaX2hB2uIpQmHJJVf4rMXp82Y5Yzf9GF9/nnmyBrzLrnEr2oJigFS
         2bc8FgTwFGHjPL1SUgQ6BXTox6tpkt2PRna2Y81E0Mxc7lQqAs3oA28HNApZOmKGm3
         ZwYIiAGwgT5trhDxM7dUyRR6vVW75CqUMDEx5ZQM=
Date: Sat, 1 Dec 2018 15:41:27 +0000
From: Jonathan Cameron <jic23@kernel.org>
To: "Ardelean, Alexandru" <alexandru.Ardelean@analog.com>
Cc: "lars@metafoo.de" <lars@metafoo.de>,
        "robh+dt@kernel.org" <robh+dt@kernel.org>,
        "knaack.h@gmx.de" <knaack.h@gmx.de>,
        "Hennerich, Michael" <Michael.Hennerich@analog.com>,
        "mark.rutland@arm.com" <mark.rutland@arm.com>,
        "matheus.bernardino@usp.br" <matheus.bernardino@usp.br>,
        "pmeerw@pmeerw.net" <pmeerw@pmeerw.net>,
        "gregkh@linuxfoundation.org" <gregkh@linuxfoundation.org>,
        "victorcolombo@gmail.com" <victorcolombo@gmail.com>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        "linux-iio@vger.kernel.org" <linux-iio@vger.kernel.org>,
        "devel@driverdev.osuosl.org" <devel@driverdev.osuosl.org>,
        "kernel-usp@googlegroups.com" <kernel-usp@googlegroups.com>,
        "devicetree@vger.kernel.org" <devicetree@vger.kernel.org>
Subject: Re: [PATCH v3 7/7] staging:iio:ad2s90: Move out of staging
Message-ID: <20181201154127.4020c8a6@archlinux>
In-Reply-To: <a1b8b1fe23cd707e5988d42aa3d76e6daae5bd5e.camel@analog.com>
References: <20181124002312.6923-1-matheus.bernardino@usp.br>
        <20181124002312.6923-8-matheus.bernardino@usp.br>
        <a1b8b1fe23cd707e5988d42aa3d76e6daae5bd5e.camel@analog.com>
X-Mailer: Claws Mail 3.17.1 (GTK+ 2.24.32; x86_64-pc-linux-gnu)
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Mon, 26 Nov 2018 07:34:35 +0000
"Ardelean, Alexandru" <alexandru.Ardelean@analog.com> wrote:

> On Fri, 2018-11-23 at 22:23 -0200, Matheus Tavares wrote:
> > Move ad2s90 resolver driver out of staging to the main tree.
> >   
> 
> Acked-by: Alexandru Ardelean <alexandru.ardelean@analog.com>
Hi Alexandru,

I took that to apply to the whole series, hope you don't mind.

Applied to the togreg branch of iio.git and pushed out as testing
for the autobuilders to play with it.

Thanks,

Jonathan

> 
> > Signed-off-by: Matheus Tavares <matheus.bernardino@usp.br>
> > Signed-off-by: Victor Colombo <victorcolombo@gmail.com>
> > ---
> > Changes in v3:
> >  - none
> > 
> > Changes in v2:
> >  - Disabled git move detection, to see the whole code, as Jonathan
> >  suggested
> > 
> >  drivers/iio/resolver/Kconfig          |  10 ++
> >  drivers/iio/resolver/Makefile         |   1 +
> >  drivers/iio/resolver/ad2s90.c         | 131 ++++++++++++++++++++++++++
> >  drivers/staging/iio/resolver/Kconfig  |  10 --
> >  drivers/staging/iio/resolver/Makefile |   1 -
> >  drivers/staging/iio/resolver/ad2s90.c | 131 --------------------------
> >  6 files changed, 142 insertions(+), 142 deletions(-)
> >  create mode 100644 drivers/iio/resolver/ad2s90.c
> >  delete mode 100644 drivers/staging/iio/resolver/ad2s90.c
> > 
> > diff --git a/drivers/iio/resolver/Kconfig b/drivers/iio/resolver/Kconfig
> > index 2ced9f22aa70..786801be54f6 100644
> > --- a/drivers/iio/resolver/Kconfig
> > +++ b/drivers/iio/resolver/Kconfig
> > @@ -3,6 +3,16 @@
> >  #
> >  menu "Resolver to digital converters"
> >  
> > +config AD2S90
> > +	tristate "Analog Devices ad2s90 driver"
> > +	depends on SPI
> > +	help
> > +	  Say yes here to build support for Analog Devices spi resolver
> > +	  to digital converters, ad2s90, provides direct access via sysfs.
> > +
> > +	  To compile this driver as a module, choose M here: the
> > +	  module will be called ad2s90.
> > +
> >  config AD2S1200
> >  	tristate "Analog Devices ad2s1200/ad2s1205 driver"
> >  	depends on SPI
> > diff --git a/drivers/iio/resolver/Makefile
> > b/drivers/iio/resolver/Makefile
> > index 4e1dccae07e7..398d82d50028 100644
> > --- a/drivers/iio/resolver/Makefile
> > +++ b/drivers/iio/resolver/Makefile
> > @@ -2,4 +2,5 @@
> >  # Makefile for Resolver/Synchro drivers
> >  #
> >  
> > +obj-$(CONFIG_AD2S90) += ad2s90.o
> >  obj-$(CONFIG_AD2S1200) += ad2s1200.o
> > diff --git a/drivers/iio/resolver/ad2s90.c
> > b/drivers/iio/resolver/ad2s90.c
> > new file mode 100644
> > index 000000000000..a41f5cb10da5
> > --- /dev/null
> > +++ b/drivers/iio/resolver/ad2s90.c
> > @@ -0,0 +1,131 @@
> > +// SPDX-License-Identifier: GPL-2.0
> > +/*
> > + * ad2s90.c simple support for the ADI Resolver to Digital Converters:
> > AD2S90
> > + *
> > + * Copyright (c) 2010-2010 Analog Devices Inc.
> > + */
> > +#include <linux/types.h>
> > +#include <linux/mutex.h>
> > +#include <linux/device.h>
> > +#include <linux/spi/spi.h>
> > +#include <linux/slab.h>
> > +#include <linux/sysfs.h>
> > +#include <linux/module.h>
> > +
> > +#include <linux/iio/iio.h>
> > +#include <linux/iio/sysfs.h>
> > +
> > +/*
> > + * Although chip's max frequency is 2Mhz, it needs 600ns between CS and
> > the
> > + * first falling edge of SCLK, so frequency should be at most 1 / (2 *
> > 6e-7)
> > + */
> > +#define AD2S90_MAX_SPI_FREQ_HZ  830000
> > +
> > +struct ad2s90_state {
> > +	struct mutex lock; /* lock to protect rx buffer */
> > +	struct spi_device *sdev;
> > +	u8 rx[2] ____cacheline_aligned;
> > +};
> > +
> > +static int ad2s90_read_raw(struct iio_dev *indio_dev,
> > +			   struct iio_chan_spec const *chan,
> > +			   int *val,
> > +			   int *val2,
> > +			   long m)
> > +{
> > +	int ret;
> > +	struct ad2s90_state *st = iio_priv(indio_dev);
> > +
> > +	if (chan->type != IIO_ANGL)
> > +		return -EINVAL;
> > +
> > +	switch (m) {
> > +	case IIO_CHAN_INFO_SCALE:
> > +		/* 2 * Pi / 2^12 */
> > +		*val = 6283; /* mV */
> > +		*val2 = 12;
> > +		return IIO_VAL_FRACTIONAL_LOG2;
> > +	case IIO_CHAN_INFO_RAW:
> > +		mutex_lock(&st->lock);
> > +		ret = spi_read(st->sdev, st->rx, 2);
> > +		if (ret < 0) {
> > +			mutex_unlock(&st->lock);
> > +			return ret;
> > +		}
> > +		*val = (((u16)(st->rx[0])) << 4) | ((st->rx[1] & 0xF0) >>
> > 4);
> > +
> > +		mutex_unlock(&st->lock);
> > +
> > +		return IIO_VAL_INT;
> > +	default:
> > +		break;
> > +	}
> > +
> > +	return -EINVAL;
> > +}
> > +
> > +static const struct iio_info ad2s90_info = {
> > +	.read_raw = ad2s90_read_raw,
> > +};
> > +
> > +static const struct iio_chan_spec ad2s90_chan = {
> > +	.type = IIO_ANGL,
> > +	.indexed = 1,
> > +	.channel = 0,
> > +	.info_mask_separate = BIT(IIO_CHAN_INFO_RAW) |
> > BIT(IIO_CHAN_INFO_SCALE),
> > +};
> > +
> > +static int ad2s90_probe(struct spi_device *spi)
> > +{
> > +	struct iio_dev *indio_dev;
> > +	struct ad2s90_state *st;
> > +
> > +	if (spi->max_speed_hz > AD2S90_MAX_SPI_FREQ_HZ) {
> > +		dev_err(&spi->dev, "SPI CLK, %d Hz exceeds %d Hz\n",
> > +			spi->max_speed_hz, AD2S90_MAX_SPI_FREQ_HZ);
> > +		return -EINVAL;
> > +	}
> > +
> > +	indio_dev = devm_iio_device_alloc(&spi->dev, sizeof(*st));
> > +	if (!indio_dev)
> > +		return -ENOMEM;
> > +	st = iio_priv(indio_dev);
> > +	spi_set_drvdata(spi, indio_dev);
> > +
> > +	mutex_init(&st->lock);
> > +	st->sdev = spi;
> > +	indio_dev->dev.parent = &spi->dev;
> > +	indio_dev->info = &ad2s90_info;
> > +	indio_dev->modes = INDIO_DIRECT_MODE;
> > +	indio_dev->channels = &ad2s90_chan;
> > +	indio_dev->num_channels = 1;
> > +	indio_dev->name = spi_get_device_id(spi)->name;
> > +
> > +	return devm_iio_device_register(indio_dev->dev.parent, indio_dev);
> > +}
> > +
> > +static const struct of_device_id ad2s90_of_match[] = {
> > +	{ .compatible = "adi,ad2s90", },
> > +	{}
> > +};
> > +MODULE_DEVICE_TABLE(of, ad2s90_of_match);
> > +
> > +static const struct spi_device_id ad2s90_id[] = {
> > +	{ "ad2s90" },
> > +	{}
> > +};
> > +MODULE_DEVICE_TABLE(spi, ad2s90_id);
> > +
> > +static struct spi_driver ad2s90_driver = {
> > +	.driver = {
> > +		.name = "ad2s90",
> > +		.of_match_table = ad2s90_of_match,
> > +	},
> > +	.probe = ad2s90_probe,
> > +	.id_table = ad2s90_id,
> > +};
> > +module_spi_driver(ad2s90_driver);
> > +
> > +MODULE_AUTHOR("Graff Yang <graff.yang@gmail.com>");
> > +MODULE_DESCRIPTION("Analog Devices AD2S90 Resolver to Digital SPI
> > driver");
> > +MODULE_LICENSE("GPL v2");
> > diff --git a/drivers/staging/iio/resolver/Kconfig
> > b/drivers/staging/iio/resolver/Kconfig
> > index 6a469ee6101f..4a727c17bb8f 100644
> > --- a/drivers/staging/iio/resolver/Kconfig
> > +++ b/drivers/staging/iio/resolver/Kconfig
> > @@ -3,16 +3,6 @@
> >  #
> >  menu "Resolver to digital converters"
> >  
> > -config AD2S90
> > -	tristate "Analog Devices ad2s90 driver"
> > -	depends on SPI
> > -	help
> > -	  Say yes here to build support for Analog Devices spi resolver
> > -	  to digital converters, ad2s90, provides direct access via sysfs.
> > -
> > -	  To compile this driver as a module, choose M here: the
> > -	  module will be called ad2s90.
> > -
> >  config AD2S1210
> >  	tristate "Analog Devices ad2s1210 driver"
> >  	depends on SPI
> > diff --git a/drivers/staging/iio/resolver/Makefile
> > b/drivers/staging/iio/resolver/Makefile
> > index 8d901dc7500b..b2049f2ce36e 100644
> > --- a/drivers/staging/iio/resolver/Makefile
> > +++ b/drivers/staging/iio/resolver/Makefile
> > @@ -2,5 +2,4 @@
> >  # Makefile for Resolver/Synchro drivers
> >  #
> >  
> > -obj-$(CONFIG_AD2S90) += ad2s90.o
> >  obj-$(CONFIG_AD2S1210) += ad2s1210.o
> > diff --git a/drivers/staging/iio/resolver/ad2s90.c
> > b/drivers/staging/iio/resolver/ad2s90.c
> > deleted file mode 100644
> > index a41f5cb10da5..000000000000
> > --- a/drivers/staging/iio/resolver/ad2s90.c
> > +++ /dev/null
> > @@ -1,131 +0,0 @@
> > -// SPDX-License-Identifier: GPL-2.0
> > -/*
> > - * ad2s90.c simple support for the ADI Resolver to Digital Converters:
> > AD2S90
> > - *
> > - * Copyright (c) 2010-2010 Analog Devices Inc.
> > - */
> > -#include <linux/types.h>
> > -#include <linux/mutex.h>
> > -#include <linux/device.h>
> > -#include <linux/spi/spi.h>
> > -#include <linux/slab.h>
> > -#include <linux/sysfs.h>
> > -#include <linux/module.h>
> > -
> > -#include <linux/iio/iio.h>
> > -#include <linux/iio/sysfs.h>
> > -
> > -/*
> > - * Although chip's max frequency is 2Mhz, it needs 600ns between CS and
> > the
> > - * first falling edge of SCLK, so frequency should be at most 1 / (2 *
> > 6e-7)
> > - */
> > -#define AD2S90_MAX_SPI_FREQ_HZ  830000
> > -
> > -struct ad2s90_state {
> > -	struct mutex lock; /* lock to protect rx buffer */
> > -	struct spi_device *sdev;
> > -	u8 rx[2] ____cacheline_aligned;
> > -};
> > -
> > -static int ad2s90_read_raw(struct iio_dev *indio_dev,
> > -			   struct iio_chan_spec const *chan,
> > -			   int *val,
> > -			   int *val2,
> > -			   long m)
> > -{
> > -	int ret;
> > -	struct ad2s90_state *st = iio_priv(indio_dev);
> > -
> > -	if (chan->type != IIO_ANGL)
> > -		return -EINVAL;
> > -
> > -	switch (m) {
> > -	case IIO_CHAN_INFO_SCALE:
> > -		/* 2 * Pi / 2^12 */
> > -		*val = 6283; /* mV */
> > -		*val2 = 12;
> > -		return IIO_VAL_FRACTIONAL_LOG2;
> > -	case IIO_CHAN_INFO_RAW:
> > -		mutex_lock(&st->lock);
> > -		ret = spi_read(st->sdev, st->rx, 2);
> > -		if (ret < 0) {
> > -			mutex_unlock(&st->lock);
> > -			return ret;
> > -		}
> > -		*val = (((u16)(st->rx[0])) << 4) | ((st->rx[1] & 0xF0) >>
> > 4);
> > -
> > -		mutex_unlock(&st->lock);
> > -
> > -		return IIO_VAL_INT;
> > -	default:
> > -		break;
> > -	}
> > -
> > -	return -EINVAL;
> > -}
> > -
> > -static const struct iio_info ad2s90_info = {
> > -	.read_raw = ad2s90_read_raw,
> > -};
> > -
> > -static const struct iio_chan_spec ad2s90_chan = {
> > -	.type = IIO_ANGL,
> > -	.indexed = 1,
> > -	.channel = 0,
> > -	.info_mask_separate = BIT(IIO_CHAN_INFO_RAW) |
> > BIT(IIO_CHAN_INFO_SCALE),
> > -};
> > -
> > -static int ad2s90_probe(struct spi_device *spi)
> > -{
> > -	struct iio_dev *indio_dev;
> > -	struct ad2s90_state *st;
> > -
> > -	if (spi->max_speed_hz > AD2S90_MAX_SPI_FREQ_HZ) {
> > -		dev_err(&spi->dev, "SPI CLK, %d Hz exceeds %d Hz\n",
> > -			spi->max_speed_hz, AD2S90_MAX_SPI_FREQ_HZ);
> > -		return -EINVAL;
> > -	}
> > -
> > -	indio_dev = devm_iio_device_alloc(&spi->dev, sizeof(*st));
> > -	if (!indio_dev)
> > -		return -ENOMEM;
> > -	st = iio_priv(indio_dev);
> > -	spi_set_drvdata(spi, indio_dev);
> > -
> > -	mutex_init(&st->lock);
> > -	st->sdev = spi;
> > -	indio_dev->dev.parent = &spi->dev;
> > -	indio_dev->info = &ad2s90_info;
> > -	indio_dev->modes = INDIO_DIRECT_MODE;
> > -	indio_dev->channels = &ad2s90_chan;
> > -	indio_dev->num_channels = 1;
> > -	indio_dev->name = spi_get_device_id(spi)->name;
> > -
> > -	return devm_iio_device_register(indio_dev->dev.parent, indio_dev);
> > -}
> > -
> > -static const struct of_device_id ad2s90_of_match[] = {
> > -	{ .compatible = "adi,ad2s90", },
> > -	{}
> > -};
> > -MODULE_DEVICE_TABLE(of, ad2s90_of_match);
> > -
> > -static const struct spi_device_id ad2s90_id[] = {
> > -	{ "ad2s90" },
> > -	{}
> > -};
> > -MODULE_DEVICE_TABLE(spi, ad2s90_id);
> > -
> > -static struct spi_driver ad2s90_driver = {
> > -	.driver = {
> > -		.name = "ad2s90",
> > -		.of_match_table = ad2s90_of_match,
> > -	},
> > -	.probe = ad2s90_probe,
> > -	.id_table = ad2s90_id,
> > -};
> > -module_spi_driver(ad2s90_driver);
> > -
> > -MODULE_AUTHOR("Graff Yang <graff.yang@gmail.com>");
> > -MODULE_DESCRIPTION("Analog Devices AD2S90 Resolver to Digital SPI
> > driver");
> > -MODULE_LICENSE("GPL v2");  

