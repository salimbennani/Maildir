Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  17 Dec 2018 08:31:36 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 38C355805CF;
	Sun, 16 Dec 2018 05:34:56 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga007-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 16 Dec 2018 05:34:56 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Ay54zuxCnqcywAbyWFVijUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7+ps6wAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95fWSJBHI2y?=
 =?us-ascii?q?cogBAOgPPehfoIbyu1QArQCmBQSuH+7v1j1Fi2Xq0aAgz+gtDwfL1xEgEdIUt3?=
 =?us-ascii?q?TUqc34OqMVUeCz1qbI0TXDYOlQ2Tzg9oXHaBUhru+WXbJ3d8ra1E4iFwHEjlqM?=
 =?us-ascii?q?t4DoMSiY1ucTvGiB6epvS+avh3QgqwFrrTii38EhgZTHiIISz1DL7yR5wIAtKN?=
 =?us-ascii?q?2jVkF7Z8WkEJpKtyGbMIt2RNkuTH1vuCY/zLANpJ21fDASxZg52xLSb+aLf5WG?=
 =?us-ascii?q?7x79TuqdPDR1iG5/dL++hRu+6UutxvDmWsSw0VtGtDRJn9fDu3wXyhDe5cuKR/?=
 =?us-ascii?q?1g9Um7wzmPzRrc6uRcLEA0i6XbL5khz6Yulpocr0vDBDX6mEbog6+McEUr5Oyo?=
 =?us-ascii?q?5/7gYrX8qZ+QL450igfgPaQygsGzH/g0PwwUU2SG9+mwyqfv8VD6TblWlPE7k6?=
 =?us-ascii?q?vUvIjfJcsBp665BwFV0pwk6xa6Fzqm1NUYnX8aLFNKYR6HjJbmO0vIIP/mCfez?=
 =?us-ascii?q?mlOskTltx//YJL3sGYvNLnfdn7f7Z7p96FBTyBA1zd9B45JYELYBIOj8WkPprt?=
 =?us-ascii?q?zXEgc5MxCow+bgENh90oIeWWGRDaODP6LSrESF5uYuI+mKeY8UtyzxK/kj5/7y?=
 =?us-ascii?q?k3A5nUURcrWu3ZsScHq4BOhpI12FYXrwhdcMCWcKsRA/TOz2klKCViRfZ3avX6?=
 =?us-ascii?q?0m4DE7B5mrDYPCRoCrnbyA0z23HpxQZmBaFF+MFW3keJmDW/cJcCiSONNukiQY?=
 =?us-ascii?q?Vbi9TI8szROutAjkxLZ9LerU/SsYtZTk1NVu4+3TlBcy9SF7DsiH0mGNSX10kX?=
 =?us-ascii?q?0MRzMswK9/pkl9wE+Z0adkm/xYCcBT5/RRXwggLp7cz+t6C9PoVgLbZNiJSk2r?=
 =?us-ascii?q?QtGnATE3U9IwzMUCY0d7G9W+kB/D2zCmDKMSl7yOHJY06L7T32DtJ8ZhzHbLzK?=
 =?us-ascii?q?ohgEMgQsdVMW2mh7Rw9w7cB4PSl0WZlqCqdbkT3SLX9WeDy3aOs19cUAJqTarF?=
 =?us-ascii?q?WnUfbFPMrdvl/kPCU6OuCbM/PwRc08GCNLVFZsfpjVpcQvfjI8rRY2S2l2e0Bh?=
 =?us-ascii?q?aIw7eMYZHue2Uc2iXdFUcFnxoS/XaAKQgxGCOhr3jCAzxpEFLle1ns/vVmqHOn?=
 =?us-ascii?q?Uk80yBmHYFB72Lqr5BEZn/ycROkV3rIfpighrS55HFK839LQFtqBqBBtfKRaYd?=
 =?us-ascii?q?Mh/lhH0XjVuBB6PpylN6pinEIRcxxrv0Py0BV6EplAkckvrHMt0ApyKaKZ3Eld?=
 =?us-ascii?q?dz+C2pDwILnXKmj0/BCgcKPW3lDe0NCL+qYA8vg4qlPjvB23GUom6Xloz95V03?=
 =?us-ascii?q?6E7JXQEAUSSY7xUlow9xVivb7aZjcy5ozK2nxsK6W7qSLC1M8zC+sjyRageMlf?=
 =?us-ascii?q?PbiAFA/zFc0aGsevJPYrm1ivchILIuRS+LQoMMOhcvuMwLSrM/p4nDK6kWRH55?=
 =?us-ascii?q?hw00KR9yZmVuHExZcEw/GC0QuBWDfxl1OhssHxmYBZajAeBGu/yS74BIFPYq1+?=
 =?us-ascii?q?Z5oECWCrI8ev3NVxm4btW2JE9F6kH14Gws6pdgaIYFznwAJQ0l4boXq5liuizj?=
 =?us-ascii?q?x4ii0mobCb3CPT3evibh0HOmhQSWlmjFfsJ5W0jt8AUEipaQgpiAWq5ULgy6dH?=
 =?us-ascii?q?o6R/KnHZQV1UcCjuM2FiTqywu6KCYs5O8p8psT9bUP+hYVCcUbP9pxoa0yX+H2?=
 =?us-ascii?q?pR3jw7djequonnkBx+km6SMHFzrH/Bc8Fq2Rjf/MDcReJW3jceRil3kyPXBlu/?=
 =?us-ascii?q?P9mu59mUjI3MsuO9V2KgUJ1cby/rwJiEtCu6421qHBK+k+qymt3hDQg1zyv728?=
 =?us-ascii?q?N2WiXPqRb2epPr2LiiMeJ7YkloA0fx6spgFYF5iIcwhpAQ2X4Bi5WR/HoHl3rz?=
 =?us-ascii?q?MNpB1aL/anoNWSAEw9rP7Af5301jK2qDx5jlWXWF3sthe966b3sV2i0n7sBGEq?=
 =?us-ascii?q?eU7KFekitzrVq1tgbRYfl7njcAxvoi8n8ag+cVuAUzyiWRGKwdHU5dPSb0jRSH?=
 =?us-ascii?q?88i+rLlLZGaoabWw0Ut+ndO7A72YrABTRm35eos8Ei9q9cpwLkjM0HLo54Hged?=
 =?us-ascii?q?nQa88TtxKOnxfBiehVNIw+lv4QiSV7PmL9uGUvy/Qnghx2wZG6oI+HJn1x/KK+?=
 =?us-ascii?q?Bx5ULDz0aNkV+jHwlqZehceW0purHpVgHDULQZTpQeipEDIUqfToKQKOHCcgpX?=
 =?us-ascii?q?ecHLrVBRWf51t+r3LTD5CrMGmaK2IDwtVlQBmdOVZTgAQJXDghmp45FwaqxNHu?=
 =?us-ascii?q?cUtj5zAR4EL4pQVIyu5yKxb/VWLfrh+yajgoUJifMAZW7gZa6kfXK8Oe6/x8Hz?=
 =?us-ascii?q?pC8p29tgCNKXGbZwdVDWEPQEOEHEvuPr2v5dnG7uiZCfCyL/rIYbWSt+NeU+2E?=
 =?us-ascii?q?yo6o0otj5zyMLNmAPmF+D/0n3UpORXB4G8PEmzUWViwYjSTNY9SApBe7/C13od?=
 =?us-ascii?q?uy8PDqWALp+IuOBKFeMdRp+xCqn6iDM/Scizp+KTZdzpkM32PHyKAD3F4OjCFj?=
 =?us-ascii?q?bzmtHqoBtS7OT6LQm7VbDx0BayN0O8tH8bg83hRWOcPAjtP117h4juM6CltfVF?=
 =?us-ascii?q?zhnN2patIOI22nKFzHA0OLPqycJTLX28H3fb+8SbpIgepOqh2/oiybHFHjPziZ?=
 =?us-ascii?q?kznpVguiMeVNjCGdIRxft5uxchdrCWj/Ut3mbge3P8NwjT0z2bc0nG/FNXYAMT?=
 =?us-ascii?q?hgdENAtqGQ7SJdgvllB2NN9GZqLemalCaf9OTYLpcWsf12AiV7je5a4XI6y6dL?=
 =?us-ascii?q?4yFAXvB6hCzSrtt2qVG8juaP0iZnUAZJqjtThIOEp0NiOaDY9plGQXnF/RIN4n?=
 =?us-ascii?q?+WCxQFvNZlDtzvu6ZNytnAjq7zKTFC887K8ssYHcTbNMWHMH9yeSbuTRfSABEI?=
 =?us-ascii?q?RCXjH3vWmkddlPDaonTTpIIzt5PsnJsmR7tWUVEzCvoAB00jGtEedsRZRDQhxJ?=
 =?us-ascii?q?yciscU5XO45DLYQchAuZaPAvCTCq+0ADWUl79JY10P27yuftdbDZHyx0E3Mgoy?=
 =?us-ascii?q?p4/NAUeFGIkV+iA=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AUAABqUxZch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBAYJogQInjBVfi2cBAQaBNRSJD4RtiUgUgVsYGAsIAYRAgwciNAk?=
 =?us-ascii?q?NAQMBAQEBAQECARMBAQEKCwkIKSMMQgEOAYFkJAGCYgECAgEBAiQTBgEBNwEEA?=
 =?us-ascii?q?QkBAQoOEyUDDEgGEwWDHQGBcwUIBAEKo26BbDOCdgEBBYcYAwWLIoEcgQ+BB4E?=
 =?us-ascii?q?RgxKERh8chV+BLAEBiAwyhWNHgQiEbIsQAQYCAZFPIwqBU4hNhyiZZIFGgg4zG?=
 =?us-ascii?q?jCBYYFOghsJAxeDSoUUhT9AMoECAwEBIROFC4grAQE?=
X-IPAS-Result: =?us-ascii?q?A0AUAABqUxZch0O0hNFjHAEBAQQBAQcEAQGBUQcBAQsBAYJ?=
 =?us-ascii?q?ogQInjBVfi2cBAQaBNRSJD4RtiUgUgVsYGAsIAYRAgwciNAkNAQMBAQEBAQECA?=
 =?us-ascii?q?RMBAQEKCwkIKSMMQgEOAYFkJAGCYgECAgEBAiQTBgEBNwEEAQkBAQoOEyUDDEg?=
 =?us-ascii?q?GEwWDHQGBcwUIBAEKo26BbDOCdgEBBYcYAwWLIoEcgQ+BB4ERgxKERh8chV+BL?=
 =?us-ascii?q?AEBiAwyhWNHgQiEbIsQAQYCAZFPIwqBU4hNhyiZZIFGgg4zGjCBYYFOghsJAxe?=
 =?us-ascii?q?DSoUUhT9AMoECAwEBIROFC4grAQE?=
X-IronPort-AV: E=Sophos;i="5.56,361,1539673200"; 
   d="scan'208";a="45178179"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 16 Dec 2018 05:34:54 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730571AbeLPNev (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sun, 16 Dec 2018 08:34:51 -0500
Received: from mail.kernel.org ([198.145.29.99]:42078 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1729822AbeLPNev (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Sun, 16 Dec 2018 08:34:51 -0500
Received: from archlinux (cpc91196-cmbg18-2-0-cust659.5-4.cable.virginm.net [81.96.234.148])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id EA2D0217F9;
        Sun, 16 Dec 2018 13:34:47 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1544967289;
        bh=SlvJmtEkqf/ju+IEORhIA2xn8R0GilcHuVWfJXhn0eo=;
        h=Date:From:To:Cc:Subject:In-Reply-To:References:From;
        b=07wVFhZa0oFuCTMmd5rEyTq2uD6JaCaM7u7TpwFikhiMU6nfvkwIzo924HVfy20ja
         dDhKZ0/fWFDrciDFW8Ip7GZvwiy/IFZa/RZrvf4ptHD2lpoE9m+C9PNPnlYSIefJLY
         IQYo/NmQPWjpyY1UPwc3pqqdFMaqRv73O8qW0Q34=
Date: Sun, 16 Dec 2018 13:34:44 +0000
From: Jonathan Cameron <jic23@kernel.org>
To: Andreas Brauchli <a.brauchli@elementarea.net>
Cc: Hartmut Knaack <knaack.h@gmx.de>,
        Lars-Peter Clausen <lars@metafoo.de>,
        Peter Meerwald-Stadler <pmeerw@pmeerw.net>,
        linux-kernel@vger.kernel.org, linux-iio@vger.kernel.org,
        Andreas Brauchli <andreas.brauchli@sensirion.com>
Subject: Re: [PATCH v3 2/3] iio: chemical: sgp30: Support Sensirion
 SGP30/SGPC3 sensors
Message-ID: <20181216133444.3c4bbb16@archlinux>
In-Reply-To: <20181213144323.24820-3-andreas.brauchli@sensirion.com>
References: <20181213144323.24820-3-andreas.brauchli@sensirion.com>
X-Mailer: Claws Mail 3.17.2 (GTK+ 2.24.32; x86_64-pc-linux-gnu)
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Thu, 13 Dec 2018 15:43:23 +0100
Andreas Brauchli <a.brauchli@elementarea.net> wrote:

> Support Sensirion SGP30 and SGPC3 multi-pixel I2C gas sensors
> 
> Supported Features:
> 
> * Indoor Air Quality (IAQ) concentrations for
>   - tVOC (in_concentration_voc_input)
>   - CO2eq (in_concentration_co2_input) - SGP30 only
> 
>   IAQ concentrations are periodically read out by a background thread
>   to allow the sensor to maintain its internal baseline.
> 
> * Gas concentration signals
>   - Ethanol (in_concentration_ethanol_raw)
>   - H2 (in_concentration_h2_raw) - SGP30 only
> 
> https://www.sensirion.com/file/datasheet_sgp30
> https://www.sensirion.com/file/datasheet_sgpc3
> 
> Signed-off-by: Andreas Brauchli <andreas.brauchli@sensirion.com>

Why do we provide endianness info given we don't provide the buffered
interface?  It's only used when we do.

Some over the top line wrapping as well.  However as that's it
I'll just clean up whilst applying.  If I've missed something odd
around the endian thing shout!

Jonathan

> ---
>  drivers/iio/chemical/Kconfig  |  13 +
>  drivers/iio/chemical/Makefile |   1 +
>  drivers/iio/chemical/sgp30.c  | 603 ++++++++++++++++++++++++++++++++++
>  3 files changed, 617 insertions(+)
>  create mode 100644 drivers/iio/chemical/sgp30.c
> 
> diff --git a/drivers/iio/chemical/Kconfig b/drivers/iio/chemical/Kconfig
> index b8e005be4f87..b0c912be94a9 100644
> --- a/drivers/iio/chemical/Kconfig
> +++ b/drivers/iio/chemical/Kconfig
> @@ -61,6 +61,19 @@ config IAQCORE
>  	  iAQ-Core Continuous/Pulsed VOC (Volatile Organic Compounds)
>  	  sensors
>  
> +config SENSIRION_SGP30
> +	tristate "Sensirion SGPxx gas sensors"
> +	depends on I2C
> +	select CRC8
> +	help
> +	  Say Y here to build I2C interface support for the following
> +	  Sensirion SGP gas sensors:
> +	    * SGP30 gas sensor
> +	    * SGPC3 low power gas sensor
> +
> +	  To compile this driver as module, choose M here: the
> +	  module will be called sgp30.
> +
>  config VZ89X
>  	tristate "SGX Sensortech MiCS VZ89X VOC sensor"
>  	depends on I2C
> diff --git a/drivers/iio/chemical/Makefile b/drivers/iio/chemical/Makefile
> index 2f4c4ba4d781..61e83944db1a 100644
> --- a/drivers/iio/chemical/Makefile
> +++ b/drivers/iio/chemical/Makefile
> @@ -9,4 +9,5 @@ obj-$(CONFIG_BME680_I2C) += bme680_i2c.o
>  obj-$(CONFIG_BME680_SPI) += bme680_spi.o
>  obj-$(CONFIG_CCS811)		+= ccs811.o
>  obj-$(CONFIG_IAQCORE)		+= ams-iaq-core.o
> +obj-$(CONFIG_SENSIRION_SGP30)	+= sgp30.o
>  obj-$(CONFIG_VZ89X)		+= vz89x.o
> diff --git a/drivers/iio/chemical/sgp30.c b/drivers/iio/chemical/sgp30.c
> new file mode 100644
> index 000000000000..90eb4cbb18cf
> --- /dev/null
> +++ b/drivers/iio/chemical/sgp30.c
> @@ -0,0 +1,603 @@
> +// SPDX-License-Identifier: GPL-2.0
> +/*
> + * sgp30.c - Support for Sensirion SGP Gas Sensors
> + *
> + * Copyright (C) 2018 Andreas Brauchli <andreas.brauchli@sensirion.com>
> + *
> + * I2C slave address: 0x58
> + *
> + * Datasheets:
> + * https://www.sensirion.com/file/datasheet_sgp30
> + * https://www.sensirion.com/file/datasheet_sgpc3
> + *
> + * TODO:
> + * - baseline support
> + * - humidity compensation
> + * - power mode switching (SGPC3)
> + */
> +
> +#include <linux/crc8.h>
> +#include <linux/delay.h>
> +#include <linux/kthread.h>
> +#include <linux/module.h>
> +#include <linux/mutex.h>
> +#include <linux/i2c.h>
> +#include <linux/of_device.h>
> +#include <linux/iio/iio.h>
> +#include <linux/iio/sysfs.h>
> +
> +#define SGP_WORD_LEN				2
> +#define SGP_CRC8_POLYNOMIAL			0x31
> +#define SGP_CRC8_INIT				0xff
> +#define SGP_CRC8_LEN				1
> +#define SGP_CMD(cmd_word)			cpu_to_be16(cmd_word)
> +#define SGP_CMD_DURATION_US			12000
> +#define SGP_MEASUREMENT_DURATION_US		50000
> +#define SGP_CMD_LEN				SGP_WORD_LEN
> +#define SGP_CMD_MAX_BUF_SIZE			(SGP_CMD_LEN + 2 * SGP_WORD_LEN)
> +#define SGP_MEASUREMENT_LEN			2
> +#define SGP30_MEASURE_INTERVAL_HZ		1
> +#define SGPC3_MEASURE_INTERVAL_HZ		2
> +#define SGP_VERS_PRODUCT(data)	((((data)->feature_set) & 0xf000) >> 12)
> +#define SGP_VERS_RESERVED(data)	((((data)->feature_set) & 0x0800) >> 11)
> +#define SGP_VERS_GEN(data)	((((data)->feature_set) & 0x0600) >> 9)
> +#define SGP_VERS_ENG_BIT(data)	((((data)->feature_set) & 0x0100) >> 8)
> +#define SGP_VERS_MAJOR(data)	((((data)->feature_set) & 0x00e0) >> 5)
> +#define SGP_VERS_MINOR(data)	(((data)->feature_set) & 0x001f)
> +
> +DECLARE_CRC8_TABLE(sgp_crc8_table);
> +
> +enum sgp_product_id {
> +	SGP30 = 0,
> +	SGPC3,
> +};
> +
> +enum sgp30_channel_idx {
> +	SGP30_IAQ_TVOC_IDX = 0,
> +	SGP30_IAQ_CO2EQ_IDX,
> +	SGP30_SIG_ETOH_IDX,
> +	SGP30_SIG_H2_IDX,
> +};
> +
> +enum sgpc3_channel_idx {
> +	SGPC3_IAQ_TVOC_IDX = 10,
> +	SGPC3_SIG_ETOH_IDX,
> +};
> +
> +enum sgp_cmd {
> +	SGP_CMD_IAQ_INIT			= SGP_CMD(0x2003),
> +	SGP_CMD_IAQ_MEASURE			= SGP_CMD(0x2008),
> +	SGP_CMD_GET_FEATURE_SET			= SGP_CMD(0x202f),
> +	SGP_CMD_GET_SERIAL_ID			= SGP_CMD(0x3682),
> +
> +	SGP30_CMD_MEASURE_SIGNAL		= SGP_CMD(0x2050),
> +
> +	SGPC3_CMD_MEASURE_RAW			= SGP_CMD(0x2046),
> +};
> +
> +struct sgp_version {
> +	u8 major;
> +	u8 minor;
> +};
> +
> +struct sgp_crc_word {
> +	__be16 value;
> +	u8 crc8;
> +} __attribute__((__packed__));
> +
> +union sgp_reading {
> +	u8 start;
> +	struct sgp_crc_word raw_words[4];
> +};
> +
> +enum _iaq_buffer_state {
> +	IAQ_BUFFER_EMPTY = 0,
> +	IAQ_BUFFER_DEFAULT_VALS,
> +	IAQ_BUFFER_VALID,
> +};
> +
> +struct sgp_data {
> +	struct i2c_client *client;
> +	struct task_struct *iaq_thread;
> +	struct mutex data_lock;
> +	unsigned long iaq_init_start_jiffies;
> +	unsigned long iaq_defval_skip_jiffies;
> +	u16 product_id;
> +	u16 feature_set;
> +	unsigned long measure_interval_jiffies;
> +	enum sgp_cmd iaq_init_cmd;
> +	enum sgp_cmd measure_iaq_cmd;
> +	enum sgp_cmd measure_gas_signals_cmd;
> +	union sgp_reading buffer;
> +	union sgp_reading iaq_buffer;
> +	enum _iaq_buffer_state iaq_buffer_state;
> +};
> +
> +struct sgp_device {
> +	const struct iio_chan_spec *channels;
> +	int num_channels;
> +};
> +
> +static const struct sgp_version supported_versions_sgp30[] = {
> +	{
> +		.major = 1,
> +		.minor = 0,
> +	},
> +};
> +
> +static const struct sgp_version supported_versions_sgpc3[] = {
> +	{
> +		.major = 0,
> +		.minor = 4,
> +	},
> +};
> +
> +static const struct iio_chan_spec sgp30_channels[] = {
> +	{
> +		.type = IIO_CONCENTRATION,
> +		.channel2 = IIO_MOD_VOC,
> +		.modified = 1,
> +		.info_mask_separate = BIT(IIO_CHAN_INFO_PROCESSED),
> +		.address = SGP30_IAQ_TVOC_IDX,
> +	},
> +	{
> +		.type = IIO_CONCENTRATION,
> +		.channel2 = IIO_MOD_CO2,
> +		.modified = 1,
> +		.info_mask_separate = BIT(IIO_CHAN_INFO_PROCESSED),
> +		.address = SGP30_IAQ_CO2EQ_IDX,
> +	},
> +	{
> +		.type = IIO_CONCENTRATION,
> +		.channel2 = IIO_MOD_ETHANOL,
> +		.modified = 1,
> +		.info_mask_separate =
> +			BIT(IIO_CHAN_INFO_RAW),

Definitely looks like it'll fit in under 80 chars.

> +		.address = SGP30_SIG_ETOH_IDX,
> +		.scan_type = {
> +			.endianness = IIO_BE,
> +		},
> +	},
> +	{
> +		.type = IIO_CONCENTRATION,
> +		.channel2 = IIO_MOD_H2,
> +		.modified = 1,
> +		.info_mask_separate =
> +			BIT(IIO_CHAN_INFO_RAW),

Same here on length.

> +		.address = SGP30_SIG_H2_IDX,
> +		.scan_type = {
> +			.endianness = IIO_BE,
> +		},
> +	},
> +};
> +
> +static const struct iio_chan_spec sgpc3_channels[] = {
> +	{
> +		.type = IIO_CONCENTRATION,
> +		.channel2 = IIO_MOD_VOC,
> +		.modified = 1,
> +		.info_mask_separate = BIT(IIO_CHAN_INFO_PROCESSED),
> +		.address = SGPC3_IAQ_TVOC_IDX,
> +	},
> +	{
> +		.type = IIO_CONCENTRATION,
> +		.channel2 = IIO_MOD_ETHANOL,
> +		.modified = 1,
> +		.info_mask_separate =
> +			BIT(IIO_CHAN_INFO_RAW),
And another on length.
> +		.address = SGPC3_SIG_ETOH_IDX,
> +		.scan_type = {
> +			.endianness = IIO_BE,
> +		},
> +	},
> +};
> +
> +static const struct sgp_device sgp_devices[] = {
> +	[SGP30] = {
> +		.channels = sgp30_channels,
> +		.num_channels = ARRAY_SIZE(sgp30_channels),
> +	},
> +	[SGPC3] = {
> +		.channels = sgpc3_channels,
> +		.num_channels = ARRAY_SIZE(sgpc3_channels),
> +	},
> +};
> +
> +/**
> + * sgp_verify_buffer() - verify the checksums of the data buffer words
> + *
> + * @data:       SGP data
> + * @buf:        Raw data buffer
> + * @word_count: Num data words stored in the buffer, excluding CRC bytes
> + *
> + * Return:      0 on success, negative error otherwise.
> + */
> +static int sgp_verify_buffer(const struct sgp_data *data,
> +			     union sgp_reading *buf, size_t word_count)
> +{
> +	size_t size = word_count * (SGP_WORD_LEN + SGP_CRC8_LEN);
> +	int i;
> +	u8 crc;
> +	u8 *data_buf = &buf->start;
> +
> +	for (i = 0; i < size; i += SGP_WORD_LEN + SGP_CRC8_LEN) {
> +		crc = crc8(sgp_crc8_table, &data_buf[i], SGP_WORD_LEN,
> +			   SGP_CRC8_INIT);
> +		if (crc != data_buf[i + SGP_WORD_LEN]) {
> +			dev_err(&data->client->dev, "CRC error\n");
> +			return -EIO;
> +		}
> +	}
> +
> +	return 0;
> +}
> +
> +/**
> + * sgp_read_cmd() - reads data from sensor after issuing a command
> + * The caller must hold data->data_lock for the duration of the call.
> + * @data:        SGP data
> + * @cmd:         SGP Command to issue
> + * @buf:         Raw data buffer to use
> + * @word_count:  Num words to read, excluding CRC bytes
> + *
> + * Return:       0 on success, negative error otherwise.
> + */
> +static int sgp_read_cmd(struct sgp_data *data, enum sgp_cmd cmd,
> +			union sgp_reading *buf, size_t word_count,
> +			unsigned long duration_us)
> +{
> +	int ret;
> +	struct i2c_client *client = data->client;
> +	size_t size = word_count * (SGP_WORD_LEN + SGP_CRC8_LEN);
> +	u8 *data_buf;
> +
> +	ret = i2c_master_send(client, (const char *)&cmd, SGP_CMD_LEN);
> +	if (ret != SGP_CMD_LEN)
> +		return -EIO;
> +	usleep_range(duration_us, duration_us + 1000);
> +
> +	if (word_count == 0)
> +		return 0;
> +
> +	data_buf = &buf->start;
> +	ret = i2c_master_recv(client, data_buf, size);
> +	if (ret < 0)
> +		return ret;
> +	if (ret != size)
> +		return -EIO;
> +
> +	return sgp_verify_buffer(data, buf, word_count);
> +}
> +
> +/**
> + * sgp_measure_iaq() - measure and retrieve IAQ values from sensor
> + * The caller must hold data->data_lock for the duration of the call.
> + * @data:       SGP data
> + *
> + * Return:      0 on success, -EBUSY on default values, negative error
> + *              otherwise.
> + */
> +
> +static int sgp_measure_iaq(struct sgp_data *data)
> +{
> +	int ret;
> +	/* data contains default values */
> +	bool default_vals = !time_after(jiffies, data->iaq_init_start_jiffies +
> +						 data->iaq_defval_skip_jiffies);
> +
> +	ret = sgp_read_cmd(data, data->measure_iaq_cmd, &data->iaq_buffer,
> +			   SGP_MEASUREMENT_LEN, SGP_MEASUREMENT_DURATION_US);
> +	if (ret < 0)
> +		return ret;
> +
> +	data->iaq_buffer_state = IAQ_BUFFER_DEFAULT_VALS;
> +
> +	if (default_vals)
> +		return -EBUSY;
> +
> +	data->iaq_buffer_state = IAQ_BUFFER_VALID;
> +
> +	return 0;
> +}
> +
> +static void sgp_iaq_thread_sleep_until(const struct sgp_data *data,
> +				       unsigned long sleep_jiffies)
> +{
> +	const long IAQ_POLL = 50000;
> +
> +	while (!time_after(jiffies, sleep_jiffies)) {
> +		usleep_range(IAQ_POLL, IAQ_POLL + 10000);
> +		if (kthread_should_stop() || data->iaq_init_start_jiffies == 0)
> +			return;
> +	}
> +}
> +
> +static int sgp_iaq_threadfn(void *p)
> +{
> +	struct sgp_data *data = (struct sgp_data *)p;
> +	unsigned long next_update_jiffies;
> +	int ret;
> +
> +	while (!kthread_should_stop()) {
> +		mutex_lock(&data->data_lock);
> +		if (data->iaq_init_start_jiffies == 0) {
> +			ret = sgp_read_cmd(data, data->iaq_init_cmd, NULL, 0,
> +					   SGP_CMD_DURATION_US);
> +			if (ret < 0)
> +				goto unlock_sleep_continue;
> +			data->iaq_init_start_jiffies = jiffies;
> +		}
> +
> +		ret = sgp_measure_iaq(data);
> +		if (ret && ret != -EBUSY) {
> +			dev_warn(&data->client->dev,
> +				 "IAQ measurement error [%d]\n", ret);
> +		}
> +unlock_sleep_continue:
> +		next_update_jiffies = jiffies + data->measure_interval_jiffies;
> +		mutex_unlock(&data->data_lock);
> +		sgp_iaq_thread_sleep_until(data, next_update_jiffies);
> +	}
> +
> +	return 0;
> +}
> +
> +static int sgp_read_raw(struct iio_dev *indio_dev,
> +			struct iio_chan_spec const *chan, int *val,
> +			int *val2, long mask)
> +{
> +	struct sgp_data *data = iio_priv(indio_dev);
> +	struct sgp_crc_word *words;
> +	int ret;
> +
> +	switch (mask) {
> +	case IIO_CHAN_INFO_PROCESSED:
> +		mutex_lock(&data->data_lock);
> +		if (data->iaq_buffer_state != IAQ_BUFFER_VALID) {
> +			mutex_unlock(&data->data_lock);
> +			return -EBUSY;
> +		}
> +		words = data->iaq_buffer.raw_words;
> +		switch (chan->address) {
> +		case SGP30_IAQ_TVOC_IDX:
> +		case SGPC3_IAQ_TVOC_IDX:
> +			*val = 0;
> +			*val2 = be16_to_cpu(words[1].value);
> +			ret = IIO_VAL_INT_PLUS_NANO;
> +			break;
> +		case SGP30_IAQ_CO2EQ_IDX:
> +			*val = 0;
> +			*val2 = be16_to_cpu(words[0].value);
> +			ret = IIO_VAL_INT_PLUS_MICRO;
> +			break;
> +		default:
> +			ret = -EINVAL;
> +			break;
> +		}
> +		mutex_unlock(&data->data_lock);
> +		break;
> +	case IIO_CHAN_INFO_RAW:
> +		mutex_lock(&data->data_lock);
> +		if (chan->address == SGPC3_SIG_ETOH_IDX) {
> +			if (data->iaq_buffer_state == IAQ_BUFFER_EMPTY)
> +				ret = -EBUSY;
> +			else
> +				ret = 0;
> +			words = data->iaq_buffer.raw_words;
> +		} else {
> +			ret = sgp_read_cmd(data, data->measure_gas_signals_cmd,
> +					   &data->buffer, SGP_MEASUREMENT_LEN,
> +					   SGP_MEASUREMENT_DURATION_US);
> +			words = data->buffer.raw_words;
> +		}
> +		if (ret) {
> +			mutex_unlock(&data->data_lock);
> +			return ret;
> +		}
> +
> +		switch (chan->address) {
> +		case SGP30_SIG_ETOH_IDX:
> +			*val = be16_to_cpu(words[1].value);
> +			ret = IIO_VAL_INT;
> +			break;
> +		case SGPC3_SIG_ETOH_IDX:
> +		case SGP30_SIG_H2_IDX:
> +			*val = be16_to_cpu(words[0].value);
> +			ret = IIO_VAL_INT;
> +			break;
> +		default:
> +			ret = -EINVAL;
> +			break;
> +		}
> +		mutex_unlock(&data->data_lock);
> +		break;
> +	default:
> +		return -EINVAL;
> +	}
> +
> +	return ret;
> +}
> +
> +static int sgp_check_compat(struct sgp_data *data,
> +			    unsigned int product_id)
> +{
> +	const struct sgp_version *supported_versions;
> +	u16 ix, num_fs;
> +	u16 product, generation, major, minor;
> +
> +	/* driver does not match product */
> +	generation = SGP_VERS_GEN(data);
> +	if (generation != 0) {
> +		dev_err(&data->client->dev,
> +			"incompatible product generation %d != 0", generation);
> +		return -ENODEV;
> +	}
> +
> +	product = SGP_VERS_PRODUCT(data);
> +	if (product != product_id) {
> +		dev_err(&data->client->dev,
> +			"sensor reports a different product: 0x%04hx\n",
> +			product);
> +		return -ENODEV;
> +	}
> +
> +	if (SGP_VERS_RESERVED(data))
> +		dev_warn(&data->client->dev, "reserved bit is set\n");
> +
> +	/* engineering samples are not supported: no interface guarantees */
> +	if (SGP_VERS_ENG_BIT(data))
> +		return -ENODEV;
> +
> +	switch (product) {
> +	case SGP30:
> +		supported_versions = supported_versions_sgp30;
> +		num_fs = ARRAY_SIZE(supported_versions_sgp30);
> +		break;
> +	case SGPC3:
> +		supported_versions = supported_versions_sgpc3;
> +		num_fs = ARRAY_SIZE(supported_versions_sgpc3);
> +		break;
> +	default:
> +		return -ENODEV;
> +	}
> +
> +	major = SGP_VERS_MAJOR(data);
> +	minor = SGP_VERS_MINOR(data);
> +	for (ix = 0; ix < num_fs; ix++) {
> +		if (major == supported_versions[ix].major &&
> +		    minor >= supported_versions[ix].minor)
> +			return 0;
> +	}
> +	dev_err(&data->client->dev, "unsupported sgp version: %d.%d\n",
> +		major, minor);
> +
> +	return -ENODEV;
> +}
> +
> +static void sgp_init(struct sgp_data *data)
> +{
> +	data->iaq_init_cmd = SGP_CMD_IAQ_INIT;
> +	data->iaq_init_start_jiffies = 0;
> +	data->iaq_buffer_state = IAQ_BUFFER_EMPTY;
> +	switch (SGP_VERS_PRODUCT(data)) {
> +	case SGP30:
> +		data->measure_interval_jiffies = SGP30_MEASURE_INTERVAL_HZ * HZ;
> +		data->measure_iaq_cmd = SGP_CMD_IAQ_MEASURE;
> +		data->measure_gas_signals_cmd = SGP30_CMD_MEASURE_SIGNAL;
> +		data->product_id = SGP30;
> +		data->iaq_defval_skip_jiffies = 15 * HZ;
> +		break;
> +	case SGPC3:
> +		data->measure_interval_jiffies = SGPC3_MEASURE_INTERVAL_HZ * HZ;
> +		data->measure_iaq_cmd = SGPC3_CMD_MEASURE_RAW;
> +		data->measure_gas_signals_cmd = SGPC3_CMD_MEASURE_RAW;
> +		data->product_id = SGPC3;
> +		data->iaq_defval_skip_jiffies =
> +			43 * data->measure_interval_jiffies;
> +		break;
> +	};
> +}
> +
> +static const struct iio_info sgp_info = {
> +	.read_raw	= sgp_read_raw,
> +};
> +
> +static const struct of_device_id sgp_dt_ids[] = {
> +	{ .compatible = "sensirion,sgp30", .data = (void *)SGP30 },
> +	{ .compatible = "sensirion,sgpc3", .data = (void *)SGPC3 },
> +	{ }
> +};
> +
> +static int sgp_probe(struct i2c_client *client,
> +		     const struct i2c_device_id *id)
> +{
> +	struct iio_dev *indio_dev;
> +	struct sgp_data *data;
> +	const struct of_device_id *of_id;
> +	unsigned long product_id;
> +	int ret;
> +
> +	indio_dev = devm_iio_device_alloc(&client->dev, sizeof(*data));
> +	if (!indio_dev)
> +		return -ENOMEM;
> +
> +	of_id = of_match_device(sgp_dt_ids, &client->dev);
> +	if (of_id)
> +		product_id = (unsigned long)of_id->data;
> +	else
> +		product_id = id->driver_data;
> +
> +	data = iio_priv(indio_dev);
> +	i2c_set_clientdata(client, indio_dev);
> +	data->client = client;
> +	crc8_populate_msb(sgp_crc8_table, SGP_CRC8_POLYNOMIAL);
> +	mutex_init(&data->data_lock);
> +
> +	/* get feature set version and write it to client data */
> +	ret = sgp_read_cmd(data, SGP_CMD_GET_FEATURE_SET, &data->buffer, 1,
> +			   SGP_CMD_DURATION_US);
> +	if (ret < 0)
> +		return ret;
> +
> +	data->feature_set = be16_to_cpu(data->buffer.raw_words[0].value);
> +
> +	ret = sgp_check_compat(data, product_id);
> +	if (ret)
> +		return ret;
> +
> +	indio_dev->dev.parent = &client->dev;
> +	indio_dev->info = &sgp_info;
> +	indio_dev->name = id->name;
> +	indio_dev->modes = INDIO_DIRECT_MODE;
> +	indio_dev->channels = sgp_devices[product_id].channels;
> +	indio_dev->num_channels = sgp_devices[product_id].num_channels;
> +
> +	sgp_init(data);
> +
> +	ret = devm_iio_device_register(&client->dev, indio_dev);
> +	if (ret) {
> +		dev_err(&client->dev, "failed to register iio device\n");
> +		return ret;
> +	}
> +
> +	data->iaq_thread = kthread_run(sgp_iaq_threadfn, data,
> +				       "%s-iaq", data->client->name);
> +
> +	return 0;
> +}
> +
> +static int sgp_remove(struct i2c_client *client)
> +{
> +	struct iio_dev *indio_dev = i2c_get_clientdata(client);
> +	struct sgp_data *data = iio_priv(indio_dev);
> +
> +	if (data->iaq_thread)
> +		kthread_stop(data->iaq_thread);
> +
> +	return 0;
> +}
> +
> +static const struct i2c_device_id sgp_id[] = {
> +	{ "sgp30", SGP30 },
> +	{ "sgpc3", SGPC3 },
> +	{ }
> +};
> +
> +MODULE_DEVICE_TABLE(i2c, sgp_id);
> +MODULE_DEVICE_TABLE(of, sgp_dt_ids);
> +
> +static struct i2c_driver sgp_driver = {
> +	.driver = {
> +		.name = "sgp30",
> +		.of_match_table = of_match_ptr(sgp_dt_ids),
> +	},
> +	.probe = sgp_probe,
> +	.remove = sgp_remove,
> +	.id_table = sgp_id,
> +};
> +module_i2c_driver(sgp_driver);
> +
> +MODULE_AUTHOR("Andreas Brauchli <andreas.brauchli@sensirion.com>");
> +MODULE_AUTHOR("Pascal Sachs <pascal.sachs@sensirion.com>");
> +MODULE_DESCRIPTION("Sensirion SGP gas sensors");
> +MODULE_LICENSE("GPL v2");

