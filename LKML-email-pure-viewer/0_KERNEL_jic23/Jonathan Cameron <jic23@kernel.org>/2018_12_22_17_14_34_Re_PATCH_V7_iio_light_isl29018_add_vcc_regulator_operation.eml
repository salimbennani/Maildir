Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:57:50 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 9A1085805CF;
	Sat, 22 Dec 2018 09:20:46 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by orsmga003-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 22 Dec 2018 09:20:46 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AAAr3Xx2JqxiMEuicsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segVI/zxwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJPUMhRSSJPH4Cy?=
 =?us-ascii?q?YIkBD+QGMulXs4bzp0AWrRa8HgSsGOHixyVUinLswaE2zeIsGhzG0gw6GNIOtW?=
 =?us-ascii?q?zZotHyNKcUS++10KnIwi/Fb/hLxzry8o3IfQ47ofGLW7J7bM3cyUsuFwzZkFmd?=
 =?us-ascii?q?p5foPzCL2eQXtWiU8e5gWfioi249pAF8uz6izdovhInRno8Z1EzI+CFjzIooK9?=
 =?us-ascii?q?C0VlR3bcOnHZdMrS2XNol7TtshTm11oio3zrwLtYSlcCUEx5kr3QPTZvOEfoWO?=
 =?us-ascii?q?/xntTvyeIS1ii3JgYL+/hwi98UynyuDkSMm030hFrjBfntnPqH8NzRrT5daDSv?=
 =?us-ascii?q?dn+UehwzmP2xjS6uFCP080ibLWJ4A9zrM0jJYfrErOEjHslEnrj6Kaal8o9+mq?=
 =?us-ascii?q?5uj/Z7XpvJ6cN4t6igHkNaQun9SyAeA5MggIQmia9v2w1L798k3jRrVFkPk2nr?=
 =?us-ascii?q?DesJHUI8QUuLS5DhRL0oYs9Rm/FS2q0NcGknkdKlJKZhaHg5LuO1HUL/D0Fe2/?=
 =?us-ascii?q?jEi0kDd32/DGOaXsApHMLnjAjrjtZ7l861NHxQo3zNBf4Y9UC74bLPLyXE/xqM?=
 =?us-ascii?q?LXDhsjPwOoxObnDc131pkCVmKXHq+ZLKTSvEeI5u01IumMeJUauDHnJ/gl+v7h?=
 =?us-ascii?q?l3k5mVAGcKmt3JsXbm24H/t8L0WYZ3rsnskOEWMQsgUiS+zqjUWIUSRPaHaqQ6?=
 =?us-ascii?q?I8+jY7BZq8AofYRoCth7+B0D2hHpJMZGBLEVSMEXbud4WZVPYAciOSIsl9kjMa?=
 =?us-ascii?q?UbitUZMu1RartAXi0bpoMvLU+jEEtZLkzNV15PfclRco+TxwDsSSyWeNT25vk2?=
 =?us-ascii?q?MMRj822r1/oENnxleC16h4n+JXFdhJ6/xVVQc6MIbWz/ZmBNDqRgLBYtCJRU67?=
 =?us-ascii?q?Tdq8HzE+UMg9w98UbEZ7ANWtkBbD0y2uA78WkryLAIc58qbd33j3OsZ8xGzK1K?=
 =?us-ascii?q?gnj1k6XMRPMXeqibJ49wjWH4TJiVmWl762daQA2y7A7HqMwnCQvE5GSgJwUb/K?=
 =?us-ascii?q?XXYEZkTIq9T0/UfCT76oCbQ6PQpN08+CKq1WatL3iVVKXuvsONPbY2ipgWe/GQ?=
 =?us-ascii?q?6Ixq+QbIrtY2gdwCTdCE0DkwAP/XaHNRIyBju7r2LZFjxuEVPvY0Xj8eRlrHO7?=
 =?us-ascii?q?T0k0zxyFbkF71rq1/AIViuKYS/8Jwr0EvyIhoS1uHFmhx9LWF8aApw15capGZd?=
 =?us-ascii?q?My/lhG2nzZtgBnJZOgMr1tiUQYcwR0uEPuyQ56CoFBkcgssXMrwxB+KaOe0FNd?=
 =?us-ascii?q?aTyY2Yr8NaHQKmn35BqvcbLZ2knC0NaK/acC8PQ5q0j5sA61DEYj8nVn3MNT03?=
 =?us-ascii?q?uT/ZjKCAsSUZTsUkc47RR6prfaYjUj6IPQz3FjLa60sjra0dIzGOQl0gqgf8tY?=
 =?us-ascii?q?MK6cDg/yEtEVCNK0KOM3nFildBQEM/5I9K41Js+pa+GJ2Kq2M+l+hjKmimJH7Z?=
 =?us-ascii?q?t50kKN8Sp8V+HJ04wEw/GewguISTP8gE29vcDwnIBOfSsSEXanySj4GI5RYbV/?=
 =?us-ascii?q?fIYKCWu0I8y73M5+h4PrW3ND8F6jBlUG2NKmeBaIblz92xFQ2loToXC9hSS4yD?=
 =?us-ascii?q?l0mSkzrqWDxCzO3/jidB0fN25JXmZil1TsIYuzj9wAR0indQsplBik5Ub82adb?=
 =?us-ascii?q?or9yL23SQUdOYij3IHtuUqq2trqefcFP7IkkvjlQUOS5eVqaUKLyowMG0yP/GG?=
 =?us-ascii?q?tT3DA6eCutupnjnRx6iWSdIW13rHrYf8Fw2Bje6MbdRf5XwjoJWi14hSPLCVi7?=
 =?us-ascii?q?Otmj5c+UmIvbsuCiS2KhUYVecSrxwoOBrie75XBqDge5n/C8gdDnFQk60Snm19?=
 =?us-ascii?q?hlTynIrRD8YpX12KS+K+5oYk5oBFrk4cpgBo5+ipcwhI0X2XUCg5WV/HkHnn3p?=
 =?us-ascii?q?PdRVx63+d2YNSiARw9HO/gflwkJjI2mNx4L4UHWd38Rga8O7YmMQxiIy8cRKBL?=
 =?us-ascii?q?2I47xDmCt/ukC4oh7JYfhhgjcdzuMj6GIdg+EMogYszz+SArYPHUlDJizslg+F?=
 =?us-ascii?q?79S/rKVReWaufqK81Et4ndC9Er6CphtQV2r+epcnBSVw9NlwMErQ0H3v7YHpYM?=
 =?us-ascii?q?LfYsgUth2QjhfMlexVKI8qm/oOhCpnP3/9vHI/x+46ixxuwY+1vIydJ2px+6K5?=
 =?us-ascii?q?BwZSNifpaMML5jHtkaFek96U34+1G5VuBC4LUIH0Tf6yEzISqPfnNxuIEDImsX?=
 =?us-ascii?q?eWAr7fHQ6Z6Ed7oHPDCZGrN3eLJHYHydVuXgWSJEtagAoMRjU1goY5Fhy2xMzm?=
 =?us-ascii?q?aEp45jcR5kPhqhtR0O1oMQPzUnzYpAeuZTc5U5yfLBtQ7gFf6EbZK82e7uRvHy?=
 =?us-ascii?q?5G+p2tthCCKmueZw5QF2EGRlSEB0z/Prmp/dTA8/aXBuu9L/vNYLWCs+9eV+2P?=
 =?us-ascii?q?xZKgzIRm5SuMNt6UM3lmDv073FdDXH9jF8TYnTUPVzIYlybXY8GHoxe8/zV9rt?=
 =?us-ascii?q?qj//TzRALv+YyPBqNIPtVy4B+2m7mMNu6KiCZ9KDZVzZcMxX7OyLgC018ekSBu?=
 =?us-ascii?q?dz+xEbsesS7BVr7fmqhSDxQDcSN8KNNI774g3glKIcPbltL11rtigvEpEVtKSV?=
 =?us-ascii?q?zhld+vZcERJ2G9NVXHBFuENbicJD3Lxd33br24SbFKkOpUsBiwsy6BE0D/JjSD?=
 =?us-ascii?q?iyXpVxe3POBMli6bOhleuIC7chl1CGnjTMjpahu0MNJsiT02wLs0hm7FNGIGMD?=
 =?us-ascii?q?h8dV9NoaOU7S9Cnvp/HGlBvTJZKrytnT2e6aH4N58QvrM/CyJvkOQc4GkzzbR9?=
 =?us-ascii?q?6jFcAvdynX2BgMRppgSEle+G1jpuVlJlozNGnoWN9RFgOK6DrbFDVGzC8RZL6n?=
 =?us-ascii?q?+fXUdZ7+B5A8Hi7vgDguPEk7j+fXIbq4rZ?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AdAABhcR5ch0O0hNFdBx0BAQUBBwUBg?=
 =?us-ascii?q?VEIAQsBAYNqJ4wXX4ttAQEGgTUUiROEbolOgXMVGBMBhzAiNAkNAQMBAQEBAQE?=
 =?us-ascii?q?CARMBAQEKCwkIKSMMQgEOAYFoKQGCZwECAgEBAiQTBgEBNwEEAQkBAQohJQMMS?=
 =?us-ascii?q?AYTBYMdgXUFCAQBpRKBbDOCdgEBBYchCIsjgRyBD4EHgRGDEoRlCYVygSwBAYg?=
 =?us-ascii?q?XggKEZ4EJhHOLIgEGAgGRXSQKjl6CfogojkSDPYFGgg4zGjCBYYFOghsMF4heh?=
 =?us-ascii?q?T9AMoECAwEBIRODDodhKYIkAQE?=
X-IPAS-Result: =?us-ascii?q?A0AdAABhcR5ch0O0hNFdBx0BAQUBBwUBgVEIAQsBAYNqJ4w?=
 =?us-ascii?q?XX4ttAQEGgTUUiROEbolOgXMVGBMBhzAiNAkNAQMBAQEBAQECARMBAQEKCwkIK?=
 =?us-ascii?q?SMMQgEOAYFoKQGCZwECAgEBAiQTBgEBNwEEAQkBAQohJQMMSAYTBYMdgXUFCAQ?=
 =?us-ascii?q?BpRKBbDOCdgEBBYchCIsjgRyBD4EHgRGDEoRlCYVygSwBAYgXggKEZ4EJhHOLI?=
 =?us-ascii?q?gEGAgGRXSQKjl6CfogojkSDPYFGgg4zGjCBYYFOghsMF4hehT9AMoECAwEBIRO?=
 =?us-ascii?q?DDodhKYIkAQE?=
X-IronPort-AV: E=Sophos;i="5.56,384,1539673200"; 
   d="scan'208";a="57972472"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 22 Dec 2018 09:20:44 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2391094AbeLVROl (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Sat, 22 Dec 2018 12:14:41 -0500
Received: from mail.kernel.org ([198.145.29.99]:51204 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1725846AbeLVROl (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Sat, 22 Dec 2018 12:14:41 -0500
Received: from archlinux (cpc91196-cmbg18-2-0-cust659.5-4.cable.virginm.net [81.96.234.148])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 2B2DB21A48;
        Sat, 22 Dec 2018 17:14:38 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1545498879;
        bh=SlwRFVr8o1+pHSQuVQJyZat0WNfmHfVXNZY+I3zGvTo=;
        h=Date:From:To:Cc:Subject:In-Reply-To:References:From;
        b=Ux69gp4YuA7BsGGSUaF0N7mLVo7lkDx4yunoP2u8kb2Praz4/W3jn9ESl4F1Nt56p
         P7WDjOnmOMXZCj0sujKdQjqu3xhj20ajZt8I6DPiYbuWadHroequUjapT2zBSHO7LJ
         obq2pX/9gCGlIZQEfP2R6qryyVwV32vVhO31wEG4=
Date: Sat, 22 Dec 2018 17:14:34 +0000
From: Jonathan Cameron <jic23@kernel.org>
To: Anson Huang <anson.huang@nxp.com>
Cc: "knaack.h@gmx.de" <knaack.h@gmx.de>,
        "lars@metafoo.de" <lars@metafoo.de>,
        "pmeerw@pmeerw.net" <pmeerw@pmeerw.net>,
        "linux-iio@vger.kernel.org" <linux-iio@vger.kernel.org>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        "festevam@gmail.com" <festevam@gmail.com>,
        "preid@electromag.com.au" <preid@electromag.com.au>,
        dl-linux-imx <linux-imx@nxp.com>
Subject: Re: [PATCH V7] iio: light: isl29018: add vcc regulator operation
 support
Message-ID: <20181222171434.4eca4ea4@archlinux>
In-Reply-To: <1545016752-9865-1-git-send-email-Anson.Huang@nxp.com>
References: <1545016752-9865-1-git-send-email-Anson.Huang@nxp.com>
X-Mailer: Claws Mail 3.17.2 (GTK+ 2.24.32; x86_64-pc-linux-gnu)
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Mon, 17 Dec 2018 03:25:17 +0000
Anson Huang <anson.huang@nxp.com> wrote:

> The light sensor's power supply could be controllable by regulator
> on some platforms, such as i.MX6Q-SABRESD board, the light sensor
> isl29023's power supply is controlled by a GPIO fixed regulator,
> need to make sure the regulator is enabled before any operation of
> sensor, this patch adds vcc regulator operation support.
> 
> Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
Hi Anson

See below.

> ---
> ChangeLog since V6
>     - using devm_regulator_get() instead of devm_regulator_get_optional() since the regulator is
>       there anyway, if dtb does NOT specify one, regulator framework will assign dummy regulator for it;
>     - Setup devm action for cleaning up regulator resource for error handling.
> ---
>  drivers/iio/light/isl29018.c | 58 ++++++++++++++++++++++++++++++++++++++++++++
>  1 file changed, 58 insertions(+)
> 
> diff --git a/drivers/iio/light/isl29018.c b/drivers/iio/light/isl29018.c
> index b45400f..63f7b9d 100644
> --- a/drivers/iio/light/isl29018.c
> +++ b/drivers/iio/light/isl29018.c
> @@ -23,6 +23,7 @@
>  #include <linux/mutex.h>
>  #include <linux/delay.h>
>  #include <linux/regmap.h>
> +#include <linux/regulator/consumer.h>
>  #include <linux/slab.h>
>  #include <linux/iio/iio.h>
>  #include <linux/iio/sysfs.h>
> @@ -95,6 +96,7 @@ struct isl29018_chip {
>  	struct isl29018_scale	scale;
>  	int			prox_scheme;
>  	bool			suspended;
> +	struct regulator	*vcc_reg;
>  };
>  
>  static int isl29018_set_integration_time(struct isl29018_chip *chip,
> @@ -708,6 +710,17 @@ static const char *isl29018_match_acpi_device(struct device *dev, int *data)
>  	return dev_name(dev);
>  }
>  
> +static void isl29018_disable_regulator_action(void *_data)
> +{
> +	struct isl29018_chip *chip = _data;
> +	int err;
> +
> +	err = regulator_disable(chip->vcc_reg);
> +	if (err)
> +		dev_err(regmap_get_device(chip->regmap),
> +			"failed to disable VCC regulator!\n");
> +}
> +
>  static int isl29018_probe(struct i2c_client *client,
>  			  const struct i2c_device_id *id)
>  {
> @@ -742,6 +755,37 @@ static int isl29018_probe(struct i2c_client *client,
>  	chip->scale = isl29018_scales[chip->int_time][0];
>  	chip->suspended = false;
>  
> +	chip->vcc_reg = devm_regulator_get(&client->dev, "vcc");
> +	if (IS_ERR(chip->vcc_reg)) {
> +		err = PTR_ERR(chip->vcc_reg);
> +		if (err != -EPROBE_DEFER)
> +			dev_err(&client->dev, "failed to get VCC regulator!\n");
> +		return err;
> +	}
> +
> +	err = regulator_enable(chip->vcc_reg);
> +	if (err) {
> +		dev_err(&client->dev, "failed to enable VCC regulator!\n");
> +		return err;
> +	}
> +
> +	chip->regmap = devm_regmap_init_i2c(client,
> +				isl29018_chip_info_tbl[dev_id].regmap_cfg);
> +	if (IS_ERR(chip->regmap)) {
> +		err = PTR_ERR(chip->regmap);
> +		dev_err(&client->dev, "regmap initialization fails: %d\n", err);
> +		regulator_disable(chip->vcc_reg);
> +		return err;
> +	}
> +
> +	err = devm_add_action(&client->dev, isl29018_disable_regulator_action,
> +				 chip);
> +	if (err) {

I'm a little confused, why not do this before devm_regmap_init_i2c.
That way you won't have to disable the regulator in that one error path.
Also, devm_add_action_or_reset will call isl29018_disable_regulator_action for
you on error.

> +		isl29018_disable_regulator_action(chip);
> +		dev_err(&client->dev, "failed to setup regulator cleanup action!\n");
> +		return err;
> +	}
> +
>  	chip->regmap = devm_regmap_init_i2c(client,
>  				isl29018_chip_info_tbl[dev_id].regmap_cfg);
>  	if (IS_ERR(chip->regmap)) {
> @@ -768,6 +812,7 @@ static int isl29018_probe(struct i2c_client *client,
>  static int isl29018_suspend(struct device *dev)
>  {
>  	struct isl29018_chip *chip = iio_priv(dev_get_drvdata(dev));
> +	int ret;
>  
>  	mutex_lock(&chip->lock);
>  
> @@ -777,6 +822,12 @@ static int isl29018_suspend(struct device *dev)
>  	 * So we do not have much to do here.
>  	 */
>  	chip->suspended = true;
> +	ret = regulator_disable(chip->vcc_reg);
> +	if (ret) {
> +		dev_err(dev, "failed to disable VCC regulator\n");
> +		mutex_unlock(&chip->lock);
> +		return ret;

Given you are about to unlock anyway a common pattern is to not
check ret until after the unlock, thus simplifying the code.

> +	}
>  
>  	mutex_unlock(&chip->lock);
>  
> @@ -790,6 +841,13 @@ static int isl29018_resume(struct device *dev)
>  
>  	mutex_lock(&chip->lock);
>  
> +	err = regulator_enable(chip->vcc_reg);
> +	if (err) {
> +		dev_err(dev, "failed to enable VCC regulator\n");
> +		mutex_unlock(&chip->lock);
> +		return err;
> +	}
> +
>  	err = isl29018_chip_init(chip);
>  	if (!err)
>  		chip->suspended = false;

