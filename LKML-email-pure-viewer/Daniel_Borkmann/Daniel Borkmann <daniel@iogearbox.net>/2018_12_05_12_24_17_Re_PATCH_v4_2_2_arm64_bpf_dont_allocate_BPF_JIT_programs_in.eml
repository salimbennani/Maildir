Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 06 Dec 2018 08:51:54 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 96B02580433;
	Wed,  5 Dec 2018 04:24:30 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 05 Dec 2018 04:24:30 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A71EZ2xGC4DButxryXvWuiJ1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75osmzbnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJSiJPHI28?=
 =?us-ascii?q?YYsMAeQPM+lXoIvyqEcBoxulHQmhBvjiyiNKi3LswaE2z+osHAPA0Qc9H9wOqn?=
 =?us-ascii?q?PUrNDtOakcS++1yqjIwivHb/hLxDr975LIchMkof6WW7Jwd9faxE4yGAzfiFWQ?=
 =?us-ascii?q?qJLqPzeO2+QMtGib4PRvWvi1i2E8rAFwrSKjxsEyhYnVn48YzE3P+yZhwIstO9?=
 =?us-ascii?q?G0VEp2bcS5HJZeqS2WLZZ6T8A+T21yuSs3yKUKtYChcyQW1pgqwgPTZ+Kbf4WG?=
 =?us-ascii?q?5x/sSvqeLixliH9gY72yhQu+/VSlx+LgVcS4zVhKoy9YndXSq38A1hne58ibRv?=
 =?us-ascii?q?Rn+kqs3CqA2x7O5exCPEs6j7DUK4Q7zb41jpcTsVrMHivxmEjukq+WeVsr+vKy?=
 =?us-ascii?q?5+TkfLrmvJmcOJFwig3kNaQugMO/Dfw5MggIQWeb5fyx2KP/8UD9WrlGk/M7nr?=
 =?us-ascii?q?fDvJzHJskXurS1Dg5X34o77hawFTam0NAWnXkdK1JFfQqKj4zoO1HIPfD5Au6z?=
 =?us-ascii?q?g1eynzdxwfDJILnhDozKLnnNlrfuY6x95lVCyAo8099f/YhYCrIfL/LpXE/+qt?=
 =?us-ascii?q?jYAgU+MwyuzObrEM992Z8GWWKTHq+ZN7vfsVuJ5uIsPeaAfoAUuCvmJvgh5v7u?=
 =?us-ascii?q?i2I5mFAHcamo25sXdG63HvB8L0qFZnrsh88LEX0WsQomUOzqlFqCXCZTZ3moXq?=
 =?us-ascii?q?I8+is0CIW8AYfDW4CimrqB3CigE51SZ2BGDE2MEHjye4WFXfcMdDydIst7njMY?=
 =?us-ascii?q?UrihTpcr1Quyuw/i17pnMu3U9zUatZLkytd5/e7TlRY09TxyCMSQyGWNT2Bynm?=
 =?us-ascii?q?MVSD46xqF/oUphylid1ah0meBXFdtW5/lRSAc1KYbcz/BmC9D1Qg/OZMyJSFah?=
 =?us-ascii?q?QtWlGz0xVMg+w90VbkZ5GtWiiA3D3iWwD78UkbyLGII78qbG03ftIMZ9zm7M1L?=
 =?us-ascii?q?M9gFk+XstPKWqmi7Z89wfJAY7FiUGZl6eweqQa0y7A72ODzWuIvEFFXw98S6TF?=
 =?us-ascii?q?XXYDZkTIqdT1/F/NT7irCb4/KAtO1daCKrdWat3ulVhJWe3sOMrAbG6rm2e/Hx?=
 =?us-ascii?q?CIxqiSY4rsfGkd2CbdCE0Akw0I+XaGNA4+Bjquom7EDTxuE07vbF3o8eVktHy7?=
 =?us-ascii?q?SUo0xRmQb0J9z7q15gIVhfuERvwOxL0Epjkupy90HFmn2dLWEMSPpwx6caVYYN?=
 =?us-ascii?q?M95kpH1G3Duwx8OJygM75thloEfwtruEPu0g19Cp9cnsgysHMq0A1yJLqE0FNA?=
 =?us-ascii?q?cjOY2ozwOr3XK2Xo4BCjcanW2kva0NaX/KcP5+81q1HivAGvC0oj/G9r09hT03?=
 =?us-ascii?q?uA+JrKCBAeXo72UkYy7xJ6va3VYjEh54PI0n1hKbO7sjvc1NMmGuQkygyscMxC?=
 =?us-ascii?q?MKyZDgDyFc4aB8+wKOExn1ipbxQEPP1d9aIuPsOmceeG17CvPOp6gD2mimFH6p?=
 =?us-ascii?q?hn0k2Q7yp8VvLI35EdzvCYwwuLTSvzgE2gs8D3g49EYz4SE3G7ySjlAo5Re6Jz?=
 =?us-ascii?q?cZwKCWeoP8242NF+i4TxVH5f8V6pH0kG19OxeRqOc1z92hVd1V4WoXO7gyS41S?=
 =?us-ascii?q?F7kzYzoqqZwiPO2eXieAMbNWFRQGltkEnjIZKzj9AcR0WoawkplB245Uf13aRb?=
 =?us-ascii?q?paJ/L3XNTkdMZST5M2ZiUq6ovLqYf8FP8I8osTlQUOmkYVGaS6TxohsA3yP4Am?=
 =?us-ascii?q?tewis2dzWrupX/ghx7h3iRLHd1rHrFZ85wwQ3T68DbRf5UxjAGXjV3iSHLBlig?=
 =?us-ascii?q?ONmk5deUmI3ZsuC9VGKhUYdfcTLxwoODtyu75GtqDgO5n/2ont3nEA460TL01t?=
 =?us-ascii?q?VwVCXIqgr8bZfv16igLe1neUxoDkfm68VmAoF+jpcwhJYI1HkanJqV+mALkWXy?=
 =?us-ascii?q?MdVdwq/+aHsNRTgWw9/a+gTl2UtjLm6XyIL9THmS3sxhZ9yiaGMMxi0999xKCL?=
 =?us-ascii?q?uT7LFcnit6uFu4oRjRYfhghDgdz/Qu5WUeg+EIvgot0yqcDqoTHUleISzjiRCI?=
 =?us-ascii?q?48qio6VQYWalaaKw21ZmndC9ELGCpRlRWHP4epchByB89Mt+P0zX0H3v9I7kYs?=
 =?us-ascii?q?LfYswJth2biBrAi+lVKJQslvsFnyZnOGT9vWE7xO4/lxBhwZa6vI2fIWV34K25?=
 =?us-ascii?q?GgJYNiHyZ84L5jHtiqNektyX3o+1GJVhBy4LXIDpTf+zFDIStPLnNxuBETEmq3?=
 =?us-ascii?q?ebH6bfEhGb6Et8s33PFJWrPWmNJHYF1dViWAWdJEtHjQ8PRjo6mZo5Fh2wyMzl?=
 =?us-ascii?q?bUd0/TQR5l/+qhtRxeNkLRj/UmHDpAi2bjc4UoSQLB1T7gta/UfaLdSe7v5vHy?=
 =?us-ascii?q?Ff5pChrhaCKmmFaARTF20JRlaIB1P+Prmt+NnA9fKXBvGlIvvKYLWOr/FeVviS?=
 =?us-ascii?q?yZKu1Itm4yiDNsGVMnZ+CP0731JJXWplFMTBhzUPVysXmjrNbs6cuRe84zB3od?=
 =?us-ascii?q?q58PjxQwLv4o2PC7RJPNVr+hC2h7qDNuGKiCZ4LzZYyo0DxXvSxLcD214Sjjlk?=
 =?us-ascii?q?dyOxHrQYqS7NUKXQl7dXDxEFaiNzN8hI76Mm0glOI87bjdz12aBijv4oEFdITl?=
 =?us-ascii?q?jhmsCvZcwXLGCxLlLHBECXNLuYIT3H2d34YaS5SbdIluVbqwWwuSqHE0/kJjmM?=
 =?us-ascii?q?jSTpWAu1Me5SjCCXJhheuICmfxZpCGjjSs/maxKhPN92iz023aM7hnfQOWEANj?=
 =?us-ascii?q?h8dltHrqeM4iNAnvV/B2tB42J5LemFniaV9fXXJowKvvtrHCt0kflX4HA7y7tT?=
 =?us-ascii?q?8SFFS+Z5mCrUrt5yvV6mlvODxSZgUBpLsjxLnp6EvV1+OaXF8ZlNQXbF8wgL7W?=
 =?us-ascii?q?WVChQKocNqC9zvu69KzNjPm7n+KDND89LS4MsdCNLYKMOBMHo9LxXpHCTYAxcC?=
 =?us-ascii?q?TT6uZinjgBl0iv3a3HyYtZg3t4bhnNJaQ6VXElY0G+gaB1l7EdgqJJZxVykj17?=
 =?us-ascii?q?mBg5hMrUW/qB2ZaMhTtZfBHqaNAPHrbjqUhLJDYTMB27a+JoMWYN7VwUtnP3Vz?=
 =?us-ascii?q?moXHHwL6WspOpyRnaEdgrExL8XV6Zmw01E/scAmq8DkVGOLizU1+sRd3fel4rG?=
 =?us-ascii?q?Sk2FwwPFef4XJoyEQ=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AZAABnwgdch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgTCCOyeDeYgZjA6BYAglFJc4gXMUGBMBh1IiNAkNAQMBAQEBAQE?=
 =?us-ascii?q?CARMBAQEIDQkIKS+CNiQBgmIBAgMBAiBWBgkBAQoYAgImAgIDVAYBDAYCAQEBg?=
 =?us-ascii?q?xyCAgEDAaR3gS+FQIRrgQuLExeBf4E4DIJfhEoRgyqCVwKLIoRZkFsJgiSIE4c?=
 =?us-ascii?q?FCBZfiQwFhz+JCY91gUaCDU0uCoMngicXjh5AMYEEAQEBIIgwASWCJwEB?=
X-IPAS-Result: =?us-ascii?q?A0AZAABnwgdch0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBgTC?=
 =?us-ascii?q?COyeDeYgZjA6BYAglFJc4gXMUGBMBh1IiNAkNAQMBAQEBAQECARMBAQEIDQkIK?=
 =?us-ascii?q?S+CNiQBgmIBAgMBAiBWBgkBAQoYAgImAgIDVAYBDAYCAQEBgxyCAgEDAaR3gS+?=
 =?us-ascii?q?FQIRrgQuLExeBf4E4DIJfhEoRgyqCVwKLIoRZkFsJgiSIE4cFCBZfiQwFhz+JC?=
 =?us-ascii?q?Y91gUaCDU0uCoMngicXjh5AMYEEAQEBIIgwASWCJwEB?=
X-IronPort-AV: E=Sophos;i="5.56,317,1539673200"; 
   d="scan'208";a="140857695"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 05 Dec 2018 04:24:28 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727759AbeLEMY0 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 5 Dec 2018 07:24:26 -0500
Received: from www62.your-server.de ([213.133.104.62]:47064 "EHLO
        www62.your-server.de" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726979AbeLEMYX (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 5 Dec 2018 07:24:23 -0500
Received: from [88.198.220.132] (helo=sslproxy03.your-server.de)
        by www62.your-server.de with esmtpsa (TLSv1.2:DHE-RSA-AES256-GCM-SHA384:256)
        (Exim 4.89_1)
        (envelope-from <daniel@iogearbox.net>)
        id 1gUWDz-0003Xb-Gp; Wed, 05 Dec 2018 13:24:19 +0100
Received: from [2a02:1203:ecb1:b710:c81f:d2d6:50a9:c2d] (helo=linux.home)
        by sslproxy03.your-server.de with esmtpsa (TLSv1.2:ECDHE-RSA-AES256-GCM-SHA384:256)
        (Exim 4.89)
        (envelope-from <daniel@iogearbox.net>)
        id 1gUWDz-000842-8q; Wed, 05 Dec 2018 13:24:19 +0100
Subject: Re: [PATCH v4 2/2] arm64/bpf: don't allocate BPF JIT programs in
 module memory
To: Ard Biesheuvel <ard.biesheuvel@linaro.org>,
        Will Deacon <will.deacon@arm.com>
Cc: Linux Kernel Mailing List <linux-kernel@vger.kernel.org>,
        Alexei Starovoitov <ast@kernel.org>,
        Rick Edgecombe <rick.p.edgecombe@intel.com>,
        Eric Dumazet <eric.dumazet@gmail.com>,
        Jann Horn <jannh@google.com>,
        Kees Cook <keescook@chromium.org>,
        Jessica Yu <jeyu@kernel.org>, Arnd Bergmann <arnd@arndb.de>,
        Catalin Marinas <catalin.marinas@arm.com>,
        Mark Rutland <mark.rutland@arm.com>,
        "David S. Miller" <davem@davemloft.net>,
        linux-arm-kernel <linux-arm-kernel@lists.infradead.org>,
        "<netdev@vger.kernel.org>" <netdev@vger.kernel.org>
References: <20181123221804.440-1-ard.biesheuvel@linaro.org>
 <20181123221804.440-3-ard.biesheuvel@linaro.org>
 <20181130182629.GA16085@arm.com>
 <CAKv+Gu9QVHLWu5H3Ok1Kbm=vtzd1KaHUn2VEij6oToW5aPR9uA@mail.gmail.com>
 <20181203124930.GB25097@arm.com>
 <CAKv+Gu8svuTSOzg7wmmK70tRPgFqGvBh5BZR-V+43dMLvT1bJg@mail.gmail.com>
From: Daniel Borkmann <daniel@iogearbox.net>
Message-ID: <12954298-de06-349e-6df2-c218e5bf09a3@iogearbox.net>
Date: Wed, 5 Dec 2018 13:24:17 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101
 Thunderbird/52.3.0
MIME-Version: 1.0
In-Reply-To: <CAKv+Gu8svuTSOzg7wmmK70tRPgFqGvBh5BZR-V+43dMLvT1bJg@mail.gmail.com>
Content-Type: text/plain; charset=utf-8
Content-Language: en-US
Content-Transfer-Encoding: 7bit
X-Authenticated-Sender: daniel@iogearbox.net
X-Virus-Scanned: Clear (ClamAV 0.100.2/25179/Tue Dec  4 15:18:37 2018)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi Will,

On 12/04/2018 04:45 PM, Ard Biesheuvel wrote:
> On Mon, 3 Dec 2018 at 13:49, Will Deacon <will.deacon@arm.com> wrote:
>> On Fri, Nov 30, 2018 at 08:20:06PM +0100, Ard Biesheuvel wrote:
>>> On Fri, 30 Nov 2018 at 19:26, Will Deacon <will.deacon@arm.com> wrote:
>>>> On Fri, Nov 23, 2018 at 11:18:04PM +0100, Ard Biesheuvel wrote:
>>>>> The arm64 module region is a 128 MB region that is kept close to
>>>>> the core kernel, in order to ensure that relative branches are
>>>>> always in range. So using the same region for programs that do
>>>>> not have this restriction is wasteful, and preferably avoided.
>>>>>
>>>>> Now that the core BPF JIT code permits the alloc/free routines to
>>>>> be overridden, implement them by vmalloc()/vfree() calls from a
>>>>> dedicated 128 MB region set aside for BPF programs. This ensures
>>>>> that BPF programs are still in branching range of each other, which
>>>>> is something the JIT currently depends upon (and is not guaranteed
>>>>> when using module_alloc() on KASLR kernels like we do currently).
>>>>> It also ensures that placement of BPF programs does not correlate
>>>>> with the placement of the core kernel or modules, making it less
>>>>> likely that leaking the former will reveal the latter.
>>>>>
>>>>> This also solves an issue under KASAN, where shadow memory is
>>>>> needlessly allocated for all BPF programs (which don't require KASAN
>>>>> shadow pages since they are not KASAN instrumented)
>>>>>
>>>>> Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
>>>>> ---
>>>>>  arch/arm64/include/asm/memory.h |  5 ++++-
>>>>>  arch/arm64/net/bpf_jit_comp.c   | 13 +++++++++++++
>>>>>  2 files changed, 17 insertions(+), 1 deletion(-)
>>>>>
>>>>> diff --git a/arch/arm64/include/asm/memory.h b/arch/arm64/include/asm/memory.h
>>>>> index b96442960aea..ee20fc63899c 100644
>>>>> --- a/arch/arm64/include/asm/memory.h
>>>>> +++ b/arch/arm64/include/asm/memory.h
>>>>> @@ -62,8 +62,11 @@
>>>>>  #define PAGE_OFFSET          (UL(0xffffffffffffffff) - \
>>>>>       (UL(1) << (VA_BITS - 1)) + 1)
>>>>>  #define KIMAGE_VADDR         (MODULES_END)
>>>>> +#define BPF_JIT_REGION_START (VA_START + KASAN_SHADOW_SIZE)
>>>>> +#define BPF_JIT_REGION_SIZE  (SZ_128M)
>>>>> +#define BPF_JIT_REGION_END   (BPF_JIT_REGION_START + BPF_JIT_REGION_SIZE)
>>>>>  #define MODULES_END          (MODULES_VADDR + MODULES_VSIZE)
>>>>> -#define MODULES_VADDR                (VA_START + KASAN_SHADOW_SIZE)
>>>>> +#define MODULES_VADDR                (BPF_JIT_REGION_END)
>>>>>  #define MODULES_VSIZE                (SZ_128M)
>>>>>  #define VMEMMAP_START                (PAGE_OFFSET - VMEMMAP_SIZE)
>>>>>  #define PCI_IO_END           (VMEMMAP_START - SZ_2M)
>>>>> diff --git a/arch/arm64/net/bpf_jit_comp.c b/arch/arm64/net/bpf_jit_comp.c
>>>>> index a6fdaea07c63..76c2ab40c02d 100644
>>>>> --- a/arch/arm64/net/bpf_jit_comp.c
>>>>> +++ b/arch/arm64/net/bpf_jit_comp.c
>>>>> @@ -940,3 +940,16 @@ struct bpf_prog *bpf_int_jit_compile(struct bpf_prog *prog)
>>>>>                                          tmp : orig_prog);
>>>>>       return prog;
>>>>>  }
>>>>> +
>>>>> +void *bpf_jit_alloc_exec(unsigned long size)
>>>>> +{
>>>>> +     return __vmalloc_node_range(size, PAGE_SIZE, BPF_JIT_REGION_START,
>>>>> +                                 BPF_JIT_REGION_END, GFP_KERNEL,
>>>>> +                                 PAGE_KERNEL_EXEC, 0, NUMA_NO_NODE,
>>>>> +                                 __builtin_return_address(0));
>>>>
>>>> I guess we'll want VM_IMMEDIATE_UNMAP here if Rich gets that merged.
>>>
>>> I think akpm already queued up that patch.
>>>
>>>> In the
>>>> meantime, I wonder if it's worth zeroing the region in bpf_jit_free_exec()?
>>>> (although we'd need the size information...).
>>>>
>>>
>>> Not sure. What exactly would that achieve?
>>
>> I think the zero encoding is guaranteed to be undefined, so it would limit
>> the usefulness of any stale, executable TLB entries. However, we'd also need
>> cache maintenance to make that stuff visible to the I side, so it's probably
>> not worth it, especially if akpm has queued the stuff from Rich.
>>
>> Maybe just add an:
>>
>> /* FIXME: Remove this when VM_IMMEDIATE_UNMAP is supported */
>> #ifndef VM_IMMEDIATE_UNMAP
>> #define VM_IMMEDIATE_UNMAP      0
>> #endif
>>
>> so we remember to come back and sort this out? Up to you.
> 
> I'll just make a note to send out that patch once the definition lands via -akpm

Could I get an ACK from you for this patch, then I'd take the series into bpf-next.

Thanks,
Daniel
