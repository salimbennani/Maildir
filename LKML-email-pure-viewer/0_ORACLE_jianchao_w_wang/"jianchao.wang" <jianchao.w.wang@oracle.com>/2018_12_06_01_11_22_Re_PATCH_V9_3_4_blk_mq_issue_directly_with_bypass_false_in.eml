Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:40:16 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 9ACF85804C1;
	Wed,  5 Dec 2018 17:10:54 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga007-1.jf.intel.com with ESMTP; 05 Dec 2018 17:10:54 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Ad31U4hTuTcCcWHLIQkFn3G28ttpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64YByHt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZH42y?=
 =?us-ascii?q?cYUPAeoCM+hWoYbyqFkBogexCwm3HOPiyCRFhmP00KAgz+gtDQ/L0Q4mEtkTsH?=
 =?us-ascii?q?rUttL1NKIKXOy7zqnIzC/Mb/VK1jf98ofIdQotoP+WUrJ2fsrdx1QkGgTHjlWR?=
 =?us-ascii?q?s4PlOS+a1uQXvGic9eZhW/ijimA9pAF3rTii3cAsipPTiY0JzlDL6z91z5oyJd?=
 =?us-ascii?q?29UUN2Z8OvHphItyyCKYd6XscvT3t1tCs01LEKo4O3cSsWxJg9xhPSaeSLf5WH?=
 =?us-ascii?q?7x7+TuqdPDh1iXN/dL6imhq/8FKsxvP8W8SyzV1EtDBKksPWuXAIzxHT6taISv?=
 =?us-ascii?q?96/kq5xzaP2B7c6vteLUA3i6XbMZghzaA0lpYJtkTDBCD2lF33jK+QaEok5vCl?=
 =?us-ascii?q?5/r7brjivJOQKoF5hh/kPqgzmcGzHf40PwkMUmSD/OSzzrzj/Un3QLVQif02l7?=
 =?us-ascii?q?HUsJTbJcQdu664DBZZ0oU95BalCTepztAYkWAALFNLfhKIkZLpNkrQIPD3E/i/?=
 =?us-ascii?q?mU6gkDR1yPDcOL3uHJHNImLEkLf7crZx81RcxxYrzdBD+5JUDakMIPbyWk/yqt?=
 =?us-ascii?q?PUFBA4MxGvzubjCdV90J4eWG2VDq+YNqPSrUGH5uY1L+aQY48VvS73K+I56P72?=
 =?us-ascii?q?kX85hVgdcLGp3ZQNaXC4Au5pI0KDbXrsn9cOC2EKvgUlQezuiV2CVyNTZnmoU6?=
 =?us-ascii?q?I94DE7FJypDYPZSo+xh7yB2T+xHodKaWBeFlCMDXDoep2GW/cLdi2eOMxhkjsC?=
 =?us-ascii?q?VbinTI8szhWutA78y7p6IevY4CwYtZT/1Ndr4+3fjw099TtxD86FyWGCU3l0nn?=
 =?us-ascii?q?8URz8xxK1wu1d9yleE0ah7mfBYD8Zc5/FSXwc+NJ7cyfF6Ct/oVgLAeNeJVEip?=
 =?us-ascii?q?QtG8DT4tSdIxxscEY1xhFNW6khDDwy2qDqcWl7ORApw46Kbc33nrKMZ7xHbLz6?=
 =?us-ascii?q?0hj1ggQstSOmyqnK9/9w7PB4HXl0WVjbqldaMZ3CTV7meM0XKOvF1EUA53SajK?=
 =?us-ascii?q?QGoQZlXIotjj5kPNVbmuCa85PQtHzsKCLqhKatjtjVhdQPfjOdLeY3++mmuqBB?=
 =?us-ascii?q?aIwK+MY5Tue2kHwCrdD00EmRgJ/XmaLQg+Gjuho2XGATNzD13vfV3j/fN+qHyh?=
 =?us-ascii?q?SE801B+Fb0t62rqx+x4Vg+GcSvwJ0rIFvichtyt7HFKn093KDNqAohJrfL9Abt?=
 =?us-ascii?q?Ml/FdHyWXZuhRhPpyhKqBigUIecwR3vk/0yxV7EIJAkdIurHMrygpyJrmV0FdA?=
 =?us-ascii?q?dzOewJDxNafbKmj0/BCzdaHW3kvS38qR+qcK8P44sUnsvBm1Fko+9HVqy8Na03?=
 =?us-ascii?q?+C6ZTFEgUTUYj9XV0q9xdnvb7aZCo954TK1XB3Nam0sznC288mBec/yxagectf?=
 =?us-ascii?q?P72AFAPoD8IaAM2uIvQwm1e1dhIEIPxS9KksMsKmavuKwrKkMPxhnTKml2tH5o?=
 =?us-ascii?q?9931mI9yp9TO7IwpkEz+uZ3guBSzfzklOhvtrrloBDYDEYBnC/xjT8BI5Neq1y?=
 =?us-ascii?q?ep4GCX2vI8Kr3Np+nYPiW3lC+F6lGVwGws6pdQOOYFPn2Q1fyFoYoWagmSu+1D?=
 =?us-ascii?q?F0lzAprqyC3C3B2ejidRwHOnJVS2lml1vjPY+0j9UCVkiycwcpjAel5Vr9x6VD?=
 =?us-ascii?q?pKV/LnPfQEdScyjtMmFiVLC9tr6DY85J9ZMpvj9bUOW6YVCGVLH9pwEW3D/kH2?=
 =?us-ascii?q?tb3Do7bS2luo3lnxxmj2KQNHRzo2DDecFzxhff48bQReVL0ToFRyl4iD/XCUa6?=
 =?us-ascii?q?P9Sy+dWUlpHDsv2xVm67V51TdzXrwp2EtCeh+WJqBhi/leipmtL7CQg6zTP719?=
 =?us-ascii?q?5yWCTIthn8ZZPn16a7MeJhZURoAF7868xnGoBxiIcwhZcQ2WQEiZWR53YIjWDz?=
 =?us-ascii?q?MdBD06LkcHUNXSILw8LS4AX9201sNHOJy5j5VnWA2MRhYda6b3gS2iI86cBKFa?=
 =?us-ascii?q?iV4KZFnStzvlq3swbRbeJhkTcazPsk8GQajP0RuAox0iWdBagfHUxZPSzvjRuE?=
 =?us-ascii?q?9d6/o7tMZGazb7ewzlFxks67DLGNuQxcXHf5epE/HS5/9Ml/MVTM0GHt5YHgYt?=
 =?us-ascii?q?XfcdUTthiMmRfak+dVMI4xluYNhSd/JWL9unglx/Q6jBN025G6oZOHK35s/K+i?=
 =?us-ascii?q?Bh5YNzv1Z94c+z33jKZemNqW0J6rHpl7BjoLW57oR+qyED0OrfTnKxqOEDokp3?=
 =?us-ascii?q?iAA7XfGguf6Fp8o3LLDpCmLHWXJHgfzdV/SxiRPk1fgAYIXDokmp41DBylxMvk?=
 =?us-ascii?q?cE1h/DAe+kb4qgdQyuJvLxT/UH3QpAK2ZTcvUpSfMABa7gJf50fWLMye6Ph8Hz?=
 =?us-ascii?q?pD852lrQyNLHGbZgtSAWEIXEyEG07sPr206dbc9OiYA/K0L+HSbrWWtexeS/CI?=
 =?us-ascii?q?yIqv04th4jaML9iPMWNkD/EhwUpDWnZ5G8vCljULSiwXkT/NbsGBqBe9/C13st?=
 =?us-ascii?q?6w8PDxVA3z4ouPDqNYMc9z9BCunaeDK+mQiT55KTlG15MMxnzIyLkF0F4RkSFu?=
 =?us-ascii?q?cDatHqoatS7QV6LdgatXDx8dayNuO8pE9aM83g9ROcHFjtP5zKJ3jvkwC11dT1?=
 =?us-ascii?q?zuhtmpZdAWI2G6LF7IHluLO6+cJTLVw8D7e6e8SbxLgeVQth2wvyubEkD5MjSC?=
 =?us-ascii?q?kTnpSw6gMeVWgC6HOxxevZm3cgxxBmj7UNLmdhq7PcdrjT03xL04nG/FOXQAPj?=
 =?us-ascii?q?h8bUxNqKad7SdZgvV5BmxA4WBpLeiCmyaF8ebYLowavudsAiRxj+ha+mg1y6NJ?=
 =?us-ascii?q?7CFYQ/x4gCvTocRoo1Gjk+mPzCJoURtOqjlRgoKLsl5vOaHY9plGRHbF8wgB7W?=
 =?us-ascii?q?SWCxQWudRlDsfjtLxXytjKx+rPL2Jg/tTPteIMDc/ZYJaOIHAmPDLqFSTSAQ9D?=
 =?us-ascii?q?QT39Zk/FgEkI2vOT/3uerpE97IflnpVEAutZVVUzHfMTDQJ6WsMLJphfWSktmr?=
 =?us-ascii?q?qWysUP4Czt/1HqWMxGs8WfBbqpCvL1JWPc1OEcag=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAADYdghch0O0hNFaChkBAQEBAQEBA?=
 =?us-ascii?q?QEBAQEHAQEBAQEBgVEEAQEBAQELAYNrJ4N6iBlfi1eBPyUUkj+EeRSBcQEBKwG?=
 =?us-ascii?q?HUyI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmEBAQEBAgEBAiAEGQEBN?=
 =?us-ascii?q?wEFCQEBChgCAiYCAgNUBg0IAQEBgxyBeggEAaUpcHwzgnYBAQWCQ4RnCIELixN?=
 =?us-ascii?q?6gRyBOAyCX4RWBQ6DHIJXiTGGTDWFJ4p/BwICkToGGIFbhRSDAYFLhXQsmCsCB?=
 =?us-ascii?q?AIEBQITAYFGgg1RH1CCbIIbDBcSgziKYGWBBQEBiA2CTAEB?=
X-IPAS-Result: =?us-ascii?q?A0ABAADYdghch0O0hNFaChkBAQEBAQEBAQEBAQEHAQEBAQE?=
 =?us-ascii?q?BgVEEAQEBAQELAYNrJ4N6iBlfi1eBPyUUkj+EeRSBcQEBKwGHUyI0CQ0BAwEBA?=
 =?us-ascii?q?QEBAQIBEwEBAQgNCQgpIwyCNiQBgmEBAQEBAgEBAiAEGQEBNwEFCQEBChgCAiY?=
 =?us-ascii?q?CAgNUBg0IAQEBgxyBeggEAaUpcHwzgnYBAQWCQ4RnCIELixN6gRyBOAyCX4RWB?=
 =?us-ascii?q?Q6DHIJXiTGGTDWFJ4p/BwICkToGGIFbhRSDAYFLhXQsmCsCBAIEBQITAYFGgg1?=
 =?us-ascii?q?RH1CCbIIbDBcSgziKYGWBBQEBiA2CTAEB?=
X-IronPort-AV: E=Sophos;i="5.56,320,1539673200"; 
   d="scan'208";a="56293692"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 05 Dec 2018 17:10:51 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728663AbeLFBKs (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 5 Dec 2018 20:10:48 -0500
Received: from userp2130.oracle.com ([156.151.31.86]:41264 "EHLO
        userp2130.oracle.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727575AbeLFBKr (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 5 Dec 2018 20:10:47 -0500
Received: from pps.filterd (userp2130.oracle.com [127.0.0.1])
        by userp2130.oracle.com (8.16.0.22/8.16.0.22) with SMTP id wB619T31034130;
        Thu, 6 Dec 2018 01:10:43 GMT
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=oracle.com; h=subject : to : cc :
 references : from : message-id : date : mime-version : in-reply-to :
 content-type : content-transfer-encoding; s=corp-2018-07-02;
 bh=vkfPimCXJ60akZSzATpjseD0xbz2X0hZ5XHuYLhIpdA=;
 b=PS3GR5TQdRzepDNb3wCL14cqjAAlPfVEyjNIc8iTQvV6yCiovIjWJvW/pskA7lzAvSkf
 mj3DW+IMf7hyTkVP6SuHiwNZTVmhHVsta88akECO0LZD6/DjDPhPjPk2WEZRcYE4axhF
 D77uJ8j91SFvHtzTDi3Z+PyQkm/zowI2PcGRbr5Vv35w6uuQ8/Kf/9NomrVXL1EyHdGm
 AFnLutoYgZ7vJlO3p1asZg98wyy1LwFF0+I2i7OtpPxcvtP+c/ymfpUKHEKw7YcDKaW7
 SclorHL4AvHFmMf78tUDmK4SAVWzMpdXNl3iFwkNs9KHXAe5YBRoMq2zP6krhGR3eOpF fA== 
Received: from aserv0022.oracle.com (aserv0022.oracle.com [141.146.126.234])
        by userp2130.oracle.com with ESMTP id 2p3hqu5pbm-1
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=OK);
        Thu, 06 Dec 2018 01:10:43 +0000
Received: from userv0122.oracle.com (userv0122.oracle.com [156.151.31.75])
        by aserv0022.oracle.com (8.14.4/8.14.4) with ESMTP id wB61AfRW002107
        (version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256 verify=OK);
        Thu, 6 Dec 2018 01:10:42 GMT
Received: from abhmp0019.oracle.com (abhmp0019.oracle.com [141.146.116.25])
        by userv0122.oracle.com (8.14.4/8.14.4) with ESMTP id wB61Afnl020735;
        Thu, 6 Dec 2018 01:10:41 GMT
Received: from [10.182.71.8] (/10.182.71.8)
        by default (Oracle Beehive Gateway v4.0)
        with ESMTP ; Wed, 05 Dec 2018 17:10:41 -0800
Subject: Re: [PATCH V9 3/4] blk-mq: issue directly with bypass 'false' in
 blk_mq_sched_insert_requests
To: Jens Axboe <axboe@kernel.dk>
Cc: ming.lei@redhat.com, linux-block@vger.kernel.org,
        linux-kernel@vger.kernel.org
References: <1543995842-20704-1-git-send-email-jianchao.w.wang@oracle.com>
 <1543995842-20704-4-git-send-email-jianchao.w.wang@oracle.com>
 <6cb12913-3575-d3aa-ff08-f89bcb38b3d6@kernel.dk>
From: "jianchao.wang" <jianchao.w.wang@oracle.com>
Message-ID: <b57bbedf-bc7e-7b8d-2217-3e8628ab657c@oracle.com>
Date: Thu, 6 Dec 2018 09:11:22 +0800
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.2.1
MIME-Version: 1.0
In-Reply-To: <6cb12913-3575-d3aa-ff08-f89bcb38b3d6@kernel.dk>
Content-Type: text/plain; charset=utf-8
Content-Language: en-US
Content-Transfer-Encoding: 7bit
X-Proofpoint-Virus-Version: vendor=nai engine=5900 definitions=9098 signatures=668679
X-Proofpoint-Spam-Details: rule=notspam policy=default score=0 suspectscore=0 malwarescore=0
 phishscore=0 bulkscore=0 spamscore=0 mlxscore=0 mlxlogscore=999
 adultscore=0 classifier=spam adjust=0 reason=mlx scancount=1
 engine=8.0.1-1810050000 definitions=main-1812060007
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi Jens

On 12/6/18 12:30 AM, Jens Axboe wrote:
> On 12/5/18 12:44 AM, Jianchao Wang wrote:
>> diff --git a/block/blk-mq.c b/block/blk-mq.c
>> index fe92e52..0dfa269 100644
>> --- a/block/blk-mq.c
>> +++ b/block/blk-mq.c
>> @@ -1899,32 +1899,23 @@ blk_status_t blk_mq_request_issue_directly(struct request *rq, bool last)
>>  void blk_mq_try_issue_list_directly(struct blk_mq_hw_ctx *hctx,
>>  		struct list_head *list)
>>  {
>> +	blk_qc_t cookie = BLK_QC_T_INVALID;
>> +
> 
> I'm fine with adding this, but I think we need some sort of check for
> that not being a valid cookie. That isn't new, we really should have
> already.
> 
>>  	while (!list_empty(list)) {
>> -		blk_status_t ret;
>>  		struct request *rq = list_first_entry(list, struct request,
>>  				queuelist);
>>  
>> -		if (!blk_rq_can_direct_dispatch(rq))
>> -			break;
>> -
>>  		list_del_init(&rq->queuelist);
>> -		ret = blk_mq_request_issue_directly(rq, list_empty(list));
>> -		if (ret != BLK_STS_OK) {
>> -			if (ret == BLK_STS_RESOURCE ||
>> -					ret == BLK_STS_DEV_RESOURCE) {
>> -				list_add(&rq->queuelist, list);
>> -				break;
>> -			}
>> -			blk_mq_end_request(rq, ret);
>> -		}
>> +		blk_mq_try_issue_directly(hctx, rq, &cookie, false,
>> +				list_empty(list));
> 
> Indent the list_empty() one more tab, should be after the ( if possible.

Yes, I will do it

> 
>> -	 * If we didn't flush the entire list, we could have told
>> -	 * the driver there was more coming, but that turned out to
>> -	 * be a lie.
>> +	 * cookie is set to a valid value only when reqeust is issued successfully.
>> +	 * We only need to care about the last request's result, if it is inserted,
>> +	 * kick the hardware with commit_rqs hook.
> 
> reqeust -> request
> 
> Also lines are too long, limit to 80 chars please.

Yes, I will do it.

> 
> And why aren't we just using the list_empty() check like before, and not
> having to add the inval cookie value?

Because we use 'bypass == false' here, so blk_mq_try_issue_directly will take
over the request totally, so the request will always be removed from the list
and finally, the list must be empty.

There is another way to identify the result of blk_mq_try_issue_directly.
Currently,
for the 'bypass == true' case,
    it always return BLK_STS_OK,
for the 'bypass == false' case,
    it return the actual result, except for 'force == true' case
    where the request has to be inserted into hctx dispatch list
    and return a BLK_STS_OK.

We could let the 'bypass == true' case also return the actual result to
show what has been done in the blk_mq_try_issue_directly and thus we could
get the actual result of the last request.

Would you mind we handle it like this ?

>> -	if (!list_empty(list) && hctx->queue->mq_ops->commit_rqs)
>> +	if ((cookie == BLK_QC_T_INVALID) && hctx->queue->mq_ops->commit_rqs)
>>  		hctx->queue->mq_ops->commit_rqs(hctx);
> 
> Redundant parens around the cookie check.
> 

Yes.

Thanks
Jianchao
