Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 06 Dec 2018 08:49:05 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 2AFCF5804F9;
	Wed,  5 Dec 2018 01:49:35 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 05 Dec 2018 01:49:34 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A38zhURzMkpc6/zXXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e8XL/ad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWpPUNhMWSJPAY2y?=
 =?us-ascii?q?aIkAD+QaPeZArYTwvEcCoQekCAWwHu7j1iNEi3nr1qM6yeQhFgTG0RQ9Ed0Uq3?=
 =?us-ascii?q?TUrM/6P7oUX++r0qnIzDPDZO5R1Dfm8ofIaRAhruuIXb9rcsre11MvFwXbgVWU?=
 =?us-ascii?q?s4DlOCmV1usUvmWd8uFuW+Wvi2s9pAFwpDii3twshZfVho0P11/L7z15wJorKt?=
 =?us-ascii?q?2iUE50e8SkEJ5Lty2AKoR5WN8iTHtutS0nybMGoYa2cDYWxJkj3RLTdvKKf5aS?=
 =?us-ascii?q?7h7+V+udPS10iXNndb6nmRq+7Eatxvf8W8S2ylpGsyVIn9fWunwQyhDe7NWMRO?=
 =?us-ascii?q?Fn8Ue7wzmP0hje6uFaLkAwkqrWM4AhwrEumZoJq0jDHTH5mF/wjKCIckUo4O+o?=
 =?us-ascii?q?6/7oYrn+p5+cMZF7ih3mP6gwhsCyBf40PhUAUmSF4+iwyb7u8VHjTLhLjPA6iq?=
 =?us-ascii?q?zZv4rbJcQfqK65GQhV0oM75ha7Djem1skYnHYeIFJGZh2HlY7pNE/KIPzhCve+?=
 =?us-ascii?q?jVKsnylxx/3dIL3hDYvCLmLZnLfiY7l98UhcxxQ3zdxF4JJUEL4BLOrpWkDtrN?=
 =?us-ascii?q?zYEgM5MwuszubjCdV91Z0RVXiAA6+EK67StV6I5uQyI+iDfoMVuTD9K+Q76P7q?=
 =?us-ascii?q?l3M2hVgdfayx15sNdH+4BuhmI1meYXf0gtcOC2YKvhYkQ+ztklGCUSNTaGy0X6?=
 =?us-ascii?q?Iz/Tw7DIOmDYHeRoGimrCB3SG7HoFIaWBCEFyDDXDod4CcUfcWdC2SOtNhkiAD?=
 =?us-ascii?q?VbW5SY8h0g+huBX5y7pgKOrU/CoYuInn1Nh04e3TiB4z+SZ1D8Sbz2GCUWV0kn?=
 =?us-ascii?q?kUSD8x2aB1uVZ9xUub0ahkn/xYEsRe6OlSUgc6Mp7czPZ2C8roVQLDZdqJTFem?=
 =?us-ascii?q?QtO7ATA+VN4xwtkOY1pjFNWmlBzMwy2qA7oNnbyRGJM06r7c32T2J8tlyHbJzq?=
 =?us-ascii?q?8hg0MiQstOL2KmgKF/+hPXB47IlUWZiqmreb4d3C7L6GeM026OsFtEXw53VKXP?=
 =?us-ascii?q?RWofaVfOrdTl+kPCSKejBqk9PQtf18GOMKtKZcfvjVVdWvjjPtPSY2aym2e1AR?=
 =?us-ascii?q?aF3beMbIvse2UA0yTREkkEkwYP/XmYMQgyHDuuo2XbDDZ2D1Lgf1vs8fViqHO8?=
 =?us-ascii?q?VkI70huFb1N/2Lav+h4an/qcS+gN0bICoyohrzR0HFCg39PZEdaApgxhfLlCbt?=
 =?us-ascii?q?M5+ltIyWXZtwllNJy6M69inkIecxhwv072yxV3C4BAkc82rHMqzAt+M76Y3ElG?=
 =?us-ascii?q?dzOC2ZDwO7vXKmbp8RCraq7W3Eze0dmM9qcO7vQ4t0vsvAWzGkU+9HVn1sFf02?=
 =?us-ascii?q?GA6ZXSEAoSTZXxX14t+Bh+ub7bbTcy5oPO2XJ3LKm7ryXN29QqBOsi1BatZNNf?=
 =?us-ascii?q?MKKCFA/vHMwWHcmuKOo2m1e3ahIIJvxd9KkxP8m+bfuJxLarPPp8nDKhlWlG4J?=
 =?us-ascii?q?193liQ+CZmS+/I34wKw/eX3gacUzf8jVGhst34mIxeZDESGHa/xjbgBIJLeqJy?=
 =?us-ascii?q?eoMLA3+0I8Kr3tV+m4LtW3lA+V65BlMJxNWmeQCPYFz6xwFQ01oYoWammSeh0z?=
 =?us-ascii?q?N7iTUpobeB0yzUxOTicgEKOmpKRGlkkFftLpK4j9EcXEi0cQcpkAGp6lr9x6he?=
 =?us-ascii?q?vK5/NXXcQV9UfyjqKGFvSquxtruYb89P8p8oqjhXUOKnbFCeS779pQYa0iz5E2?=
 =?us-ascii?q?tfwjA7ay+lupHjkxNmj2KdKW55rGDFdsFo2Rff+NvcSOZT3jUcXil4ijrXBl+m?=
 =?us-ascii?q?M9my59qUlJTDsuG4V22/UJ1eai3rzYKGtCum6mxmGxy/n/avmtL5FQg2yzP019?=
 =?us-ascii?q?5vVS/QthbzfpHr17imMeJgZkRpBEXz681gFoF8k4swgood2XwbhpWT4HoGnn3/?=
 =?us-ascii?q?MdRd2aLicnUNQSQHzMLS4AjgwEdjNG6Gx5rlVnWBxctsf9q6bXkX2i4n78BKFb?=
 =?us-ascii?q?2b7LpLnSZuplq4rATRYeVynzsHyPsu7mIajP8NuAY30iqdBbUSF1FCPSPwjxSI?=
 =?us-ascii?q?88y+rKJPaWaqcLiw11BxkcqvDb6cuQFcRGj2eo05EiBu9MV/P0nB0Hny6oHiZd?=
 =?us-ascii?q?nRYsgfthySkxfckedVLIg9meYNhSpiIWj9p2Eqy/YnjRxy2pG3pJSHK2Jo/K6j?=
 =?us-ascii?q?Ax9XLDv1Z94I+jH2jKZThcKW34GpHpV8FTQHRproTfS0ED0MsfTrLRqBEDo5qn?=
 =?us-ascii?q?2DA7rQARef6Ft6r3LIC52kLGuYJH4dzdV/XhWdIFFfjRsQXDU7mJ45Cw+ryNbg?=
 =?us-ascii?q?cEd/+jAe+Fr4pgFQxeJvMhn1Sn3fqxuwajcoVJifKwJb7gNY6EfQL8Oe9fh/Hz?=
 =?us-ascii?q?1C8p2isQyNKXGbZwJSAmESQUGEA1HjPr+z5djP6eSYB+y+L+fQbrWKs+BRS/CI?=
 =?us-ascii?q?xZe32It84zmMLtmPPmVlD/Aj2ktDWm15G93EmzoVTSwbjTnNb8mdpBez4SB3qs?=
 =?us-ascii?q?G/8PL2WAPg/4ePCr1SMclx9BCym6uMK+mQhCNhIzZCypwM3WPIyKQY3FMKiyFh?=
 =?us-ascii?q?aTitEbcDtS7MVq7QmbVXDxkUayxtLstI8rk80xJJOc7ajNP1y7F5guQ0C1dDSV?=
 =?us-ascii?q?zuhMWpadYWLGG6MVPNHFyLO6ieJT3X38H3ZruxRqdNjOpPrR2/pzaaH1XnPjSC?=
 =?us-ascii?q?jDTpUxGvMedRjCCUJhBeuYe9cgpzBmjnVt7pdhq7MNpvhz0s3bI0nm/KNXIbMT?=
 =?us-ascii?q?Vkb0NNr7iQ4TlEjfllB2NB7mRqLe+fliad7unYLIsWsPRxDiR1keJa/Go1y79P?=
 =?us-ascii?q?4C5YQ/x1nTPYrsRyrFG+jumP1j1nXQJOqzlRgoKLuERiOaPB+ZhBWXbL5hQN7W?=
 =?us-ascii?q?qLBhQOpttlDMDvuq9KxtjOkqLzNClN89bO8cQAAMjULZHPDH10KgbgEjrZJBUK?=
 =?us-ascii?q?QCTtNmzFgUFZ1vaI+Tndqpk8t4ipm5cUTLJffEI6G+lcCUl/GtEGZpBtUWAKi7?=
 =?us-ascii?q?me2fUB/nq35D3cWsRc9sTcX+mSCPHHKzuDi7RAIRwSzuWrfswoKoTn1hk6ORFB?=
 =?us-ascii?q?l4PQFh+VBIgVrw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAAATngdch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBg2snjBKMDoINFJc4gXMUGBMBh1AiNAkNAQMBAQEBAQECARMBAQE?=
 =?us-ascii?q?IDQkIKSMMgjYkAYJiAwMBAiQZAQEyBQEFCQEBHzEDVAcSBYMcggIEAaQXgWwzg?=
 =?us-ascii?q?nYBAQWHJwiHb4MTgRwXgUA/jn+JNYZ+kCUJgiSPEwsYkS+JCY91gUaCDTMaCCg?=
 =?us-ascii?q?IgyeCGwkDF4hehV0iMoEFAQGLHQEB?=
X-IPAS-Result: =?us-ascii?q?A0ANAAATngdch0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBg2s?=
 =?us-ascii?q?njBKMDoINFJc4gXMUGBMBh1AiNAkNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkA?=
 =?us-ascii?q?YJiAwMBAiQZAQEyBQEFCQEBHzEDVAcSBYMcggIEAaQXgWwzgnYBAQWHJwiHb4M?=
 =?us-ascii?q?TgRwXgUA/jn+JNYZ+kCUJgiSPEwsYkS+JCY91gUaCDTMaCCgIgyeCGwkDF4heh?=
 =?us-ascii?q?V0iMoEFAQGLHQEB?=
X-IronPort-AV: E=Sophos;i="5.56,317,1539673200"; 
   d="scan'208";a="65393680"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 05 Dec 2018 01:49:33 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729264AbeLEJsZ (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 5 Dec 2018 04:48:25 -0500
Received: from mail.kernel.org ([198.145.29.99]:51576 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1729558AbeLEJqL (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 5 Dec 2018 04:46:11 -0500
Received: from sasha-vm.mshome.net (unknown [213.57.143.11])
        (using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 1DE8E20878;
        Wed,  5 Dec 2018 09:46:07 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1544003170;
        bh=QI9KjFox9ChtohRfEi/OKph3qLoWW1iE1U3EOPusId0=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=yrwmDd6dyfdweq9xdOvZjEAAHM4d06f59baURkBYBYvThCV7AGWso9hjcLjjC+QCd
         hOvX5h9QBldroUAd5/ecHCuuC69bvIiUvO04kDvYjp/HhvIVs7VDyWHuHs0eDkEIBM
         mc572IjtIFraFAwVE1c2PFBs1EY8BNFpmoOGl2tg=
From: Sasha Levin <sashal@kernel.org>
To: stable@vger.kernel.org, linux-kernel@vger.kernel.org
Cc: Julian Wiedmann <jwi@linux.ibm.com>,
        "David S . Miller" <davem@davemloft.net>,
        Sasha Levin <sashal@kernel.org>, linux-s390@vger.kernel.org
Subject: [PATCH AUTOSEL 4.14 52/69] s390/qeth: fix length check in SNMP processing
Date: Wed,  5 Dec 2018 04:42:30 -0500
Message-Id: <20181205094247.6556-52-sashal@kernel.org>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20181205094247.6556-1-sashal@kernel.org>
References: <20181205094247.6556-1-sashal@kernel.org>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From: Julian Wiedmann <jwi@linux.ibm.com>

[ Upstream commit 9a764c1e59684c0358e16ccaafd870629f2cfe67 ]

The response for a SNMP request can consist of multiple parts, which
the cmd callback stages into a kernel buffer until all parts have been
received. If the callback detects that the staging buffer provides
insufficient space, it bails out with error.
This processing is buggy for the first part of the response - while it
initially checks for a length of 'data_len', it later copies an
additional amount of 'offsetof(struct qeth_snmp_cmd, data)' bytes.

Fix the calculation of 'data_len' for the first part of the response.
This also nicely cleans up the memcpy code.

Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
Signed-off-by: Julian Wiedmann <jwi@linux.ibm.com>
Reviewed-by: Ursula Braun <ubraun@linux.ibm.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
Signed-off-by: Sasha Levin <sashal@kernel.org>
---
 drivers/s390/net/qeth_core_main.c | 27 ++++++++++++---------------
 1 file changed, 12 insertions(+), 15 deletions(-)

diff --git a/drivers/s390/net/qeth_core_main.c b/drivers/s390/net/qeth_core_main.c
index 169dd7127f9e..69ef5f4060ed 100644
--- a/drivers/s390/net/qeth_core_main.c
+++ b/drivers/s390/net/qeth_core_main.c
@@ -4545,8 +4545,8 @@ static int qeth_snmp_command_cb(struct qeth_card *card,
 {
 	struct qeth_ipa_cmd *cmd;
 	struct qeth_arp_query_info *qinfo;
-	struct qeth_snmp_cmd *snmp;
 	unsigned char *data;
+	void *snmp_data;
 	__u16 data_len;
 
 	QETH_CARD_TEXT(card, 3, "snpcmdcb");
@@ -4554,7 +4554,6 @@ static int qeth_snmp_command_cb(struct qeth_card *card,
 	cmd = (struct qeth_ipa_cmd *) sdata;
 	data = (unsigned char *)((char *)cmd - reply->offset);
 	qinfo = (struct qeth_arp_query_info *) reply->param;
-	snmp = &cmd->data.setadapterparms.data.snmp;
 
 	if (cmd->hdr.return_code) {
 		QETH_CARD_TEXT_(card, 4, "scer1%x", cmd->hdr.return_code);
@@ -4567,10 +4566,15 @@ static int qeth_snmp_command_cb(struct qeth_card *card,
 		return 0;
 	}
 	data_len = *((__u16 *)QETH_IPA_PDU_LEN_PDU1(data));
-	if (cmd->data.setadapterparms.hdr.seq_no == 1)
-		data_len -= (__u16)((char *)&snmp->data - (char *)cmd);
-	else
-		data_len -= (__u16)((char *)&snmp->request - (char *)cmd);
+	if (cmd->data.setadapterparms.hdr.seq_no == 1) {
+		snmp_data = &cmd->data.setadapterparms.data.snmp;
+		data_len -= offsetof(struct qeth_ipa_cmd,
+				     data.setadapterparms.data.snmp);
+	} else {
+		snmp_data = &cmd->data.setadapterparms.data.snmp.request;
+		data_len -= offsetof(struct qeth_ipa_cmd,
+				     data.setadapterparms.data.snmp.request);
+	}
 
 	/* check if there is enough room in userspace */
 	if ((qinfo->udata_len - qinfo->udata_offset) < data_len) {
@@ -4583,16 +4587,9 @@ static int qeth_snmp_command_cb(struct qeth_card *card,
 	QETH_CARD_TEXT_(card, 4, "sseqn%i",
 		cmd->data.setadapterparms.hdr.seq_no);
 	/*copy entries to user buffer*/
-	if (cmd->data.setadapterparms.hdr.seq_no == 1) {
-		memcpy(qinfo->udata + qinfo->udata_offset,
-		       (char *)snmp,
-		       data_len + offsetof(struct qeth_snmp_cmd, data));
-		qinfo->udata_offset += offsetof(struct qeth_snmp_cmd, data);
-	} else {
-		memcpy(qinfo->udata + qinfo->udata_offset,
-		       (char *)&snmp->request, data_len);
-	}
+	memcpy(qinfo->udata + qinfo->udata_offset, snmp_data, data_len);
 	qinfo->udata_offset += data_len;
+
 	/* check if all replies received ... */
 		QETH_CARD_TEXT_(card, 4, "srtot%i",
 			       cmd->data.setadapterparms.hdr.used_total);
-- 
2.17.1

