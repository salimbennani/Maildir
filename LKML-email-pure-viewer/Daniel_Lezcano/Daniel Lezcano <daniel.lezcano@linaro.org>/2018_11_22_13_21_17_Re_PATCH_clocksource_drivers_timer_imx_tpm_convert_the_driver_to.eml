Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 22 Nov 2018 21:40:34 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 5B75858040F;
	Thu, 22 Nov 2018 05:21:28 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by orsmga001-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 22 Nov 2018 05:21:27 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A7oJXPRdndURlw3owGkdqLMDSlGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc68YxWN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRcDI2i?=
 =?us-ascii?q?YYsBD+kPM+hWoIbypVQBsRSwBRK0BO7t0TJImnz70Lcm3+g9HwzL3gotFM8Ovn?=
 =?us-ascii?q?TOq9X1Mb8fX+6vw6nOzDXMcfdW0ir75ofWcxEuveuDXbR3ccHMzkQgChnKjlOR?=
 =?us-ascii?q?qYP7OzOZzOANvHaa7uV8T+2vjWknphp1ojiuwMcjkJPJhoUPxlDD7yV5z584KN?=
 =?us-ascii?q?ulQ0B1Zt6kFYFftyCcN4ZuXsMjTWBouDomyrIYo563ZjQFyJMixxLHb/yHco6I?=
 =?us-ascii?q?7Qj5VOaWOzt4g2hleL2nixa860ev1vPzWdKz0FZNrSpJiMXDtncI1xHV98OJSe?=
 =?us-ascii?q?N981+/1TqT0w3f8PxILE4qmabBNpIswaI8moASvEnBBiP7mkf7gLWLekgq++Wk?=
 =?us-ascii?q?8erqb7X8qpOBNIJ5jgfzObk0lMOlG+Q3KA0OUnCb+eui0L3j+lX0QKtFjvIoiK?=
 =?us-ascii?q?nVqpPaKtoBpq6/HQBV1pwv6xGlDzepyNgYnH8HI0xZeB+fkYTlJ1XDLOrlAfqx?=
 =?us-ascii?q?nVigiipnyvPaMrH7A5jALGDPkLL7crZ8705cxhAzzdda559MDrEBIfTzWlL+td?=
 =?us-ascii?q?DBDR82LRa0w+D5B9V5z48eXmyOAqmHP6PIqlKI+O0vLPeWZIMPuzbyNeIl5/jw?=
 =?us-ascii?q?gn89g1MderOp3ZQPZHCiAvtmO1mZYWbrgtoZFWcKvwk+Q/LwhFyNTD5efHKyX6?=
 =?us-ascii?q?M65jEmB4OqF4bDRoaxgLOf2Ce3BIFZZmdDClqUC3fna52EW+sQaCKVOsJhkiYL?=
 =?us-ascii?q?Vbm9S4A70hGirg/6y6d9IerS9S0Vrpbj1Nlz5+3OmhA+7z10D8KB026TS2F4hH?=
 =?us-ascii?q?8HRzgz3Kpnu0xy1k+D0bRkg/xfDdFT5fRJXRkgOZ7fyOx6DdbyWgXac9eNSVam?=
 =?us-ascii?q?RMimAD4rQtIwxd8Of1hyG9G4gh/f2CqqBqcfl6aXC5ws7qLcw3/xKt5nxHbd1K?=
 =?us-ascii?q?khiFomTtFVNWK8hK5y7AzTB4/Pk0WEmKemb6Uc3CjR9GidyWqCpl1XUAl1Ua/d?=
 =?us-ascii?q?R3AQelPWrcjl5kPFV7KuCq4oMg1bxc6GK6tFcNvpjVpdSffnOdTeZX+xmmiqCR?=
 =?us-ascii?q?aJwLOMcJTle2EH0CrBD0gElhgZ/WyaOggmGiehv2XeASRzGl31fUPj7/NyqHOh?=
 =?us-ascii?q?QU8y1AGFcUth272x+h4WgPycT+ge3rYFuCcntjV1E0yx39PQC9qcuQVheL9Qbs?=
 =?us-ascii?q?864FdCzWjZrRByPoS8L6B+gV4Taxl4sFnw1xppEIlAkdIlrHUxzAVsL6KVy1dB?=
 =?us-ascii?q?dzKe3ZDtNbzbMGjy/Baza6HI3lHSysqZ+qAK6P4gsVXsoBmpFlY+83Vgy9RVz3?=
 =?us-ascii?q?qc5pDNDAoOUZLwUlw79wRgq7HdeCk944LU1XtjMaSvtj/C2tQpBPYqyxq6ftdf?=
 =?us-ascii?q?Nr+EGxH2E8EAG8euL+kqkUCzbh0YJOBS6LI0P8S+evSc3K6kIulhkyymjGhd+4?=
 =?us-ascii?q?99z1+D+DB6Su7L2JYF3eqV3g+GVzf6kVegvdr7mYFCZTEOAGW/zTLoC5JWZq13?=
 =?us-ascii?q?ZYwLE3uhI9WrxtVigJ7gQ35Z9EO5C1wawsOoeBqSYEb73Q1fzkkXpX2nmS2lzz?=
 =?us-ascii?q?17iT0pr6yf3DDQzOTmbhYIJmlLRGx6h1f2PYe0l8waXFSvbwUxjhul5Fr1yLJB?=
 =?us-ascii?q?pKtiKGnfW0FIcDbsL2FjS6e/qqCNY8pS55w2qyVXV+K8bEueSr78pRsaziziE3?=
 =?us-ascii?q?FfxDA9azGlpJH5kwZmh2KaKXZ5tGDZdt1oxRfD+NzcQuZc3zoHRCViiTjbHEO8?=
 =?us-ascii?q?P8Sv/diPk5fDs+a+V3+uV5FJcCnry5+AuzW/5WFwHRK/mPWzkMX9EQcmyS/7y8?=
 =?us-ascii?q?VqVSLQoRb+eIbrzae6MeFgfkVyH1/z8cl6GoJ/kos2mp4Q32MXhpGU/XoBjGfy?=
 =?us-ascii?q?Ps9X2aP4bHoRWzELx8TZ7xTi2E1mNniJ3Z72Vm2Bwst9YNm3emMX1Tg678xQCq?=
 =?us-ascii?q?eU7bpEkDBxolq5qwLRfPd8ki0cyfso9H4VneUJtBAxwSWaB7AYBVNYMjD0lxSU?=
 =?us-ascii?q?89C+q71aZGW1frixzkZ+nc2hA6uEogFTQ3v5fpYiHSlt7sRwKl7M0Xvz6p36d9?=
 =?us-ascii?q?nUd94cqhqUkxLYhehPNJ0xjuYKhTZgOW/luH0lyu07ggZ00ZC0ooeHMHlt87yj?=
 =?us-ascii?q?AhFDKDL1fcwT9yrpjaZfmMaWwo+uEo9gGjUNQJvnU/aoHCgOuvTgMgaECCc8pW?=
 =?us-ascii?q?uDGbrDAQ+f719rr27IE5CuLX2WJWMWzdN/RBmGP0xfgRsZXDE7np4/CwCry9bt?=
 =?us-ascii?q?cEZ/5jAN+FH4rgFAxf5vNxn6Sm3fvhunai8oSJiDKxpb9hpN6F3SMcya8+J/BS?=
 =?us-ascii?q?VY/oC6oQyJK2ybYRlIDG4TVkyFAVDjIqeh5d3a/+eEAeq+KuPEYa+SpuxGS/eI?=
 =?us-ascii?q?2ZWv35Nk/zmWM8WAIGJiA+cn2kZZXnB5BsfZmygJSyMNjCLAdMqbpBa6+i1qoc?=
 =?us-ascii?q?Gz6vXrWATz5YSRD7teK8lg+xezga2bLe6fmD55KSpE1pML3XLJyL8f3EMLiyFz?=
 =?us-ascii?q?bTatF64MtTXKTKLWla9aFBobayJ1NMtV4KMwxAhNOcjHitzr0r50lOI6C1BAVV?=
 =?us-ascii?q?b5gMGmedQKI32hNFPAHEuLNKqJJTzIw8H0YKOwU75QjP9Ttx2/pzmbCVLjPi+Y?=
 =?us-ascii?q?mjntVhCvN/xMjS6BMBxfvoG9bghiCWz5QN36bR27Ncd9jScqzr0smnPKKWkcPC?=
 =?us-ascii?q?BmfENQtbKQ9z1Xg/VlF2xF73poNu2Emyef7+nFJZcaq/prAiJol+1E5HQ20ada?=
 =?us-ascii?q?7CZBRPZtgivdssZuo026kumI0jdnTBtOqjNRiI2Xp0ltJaXZ+YdGWXvf+BIN7G?=
 =?us-ascii?q?OQCwkFptd/C93vvbxQxcbLlK7pNDhC9NfU99MGB8fIMMKHLGYhMR3xFT/UFgQF?=
 =?us-ascii?q?SzurNWDZh0NFkfCS9mearp41qpX3nJoOS7lbVEE6F/8AC0RlGsACL4lzXj8+jb?=
 =?us-ascii?q?Gbi8sItjKCq0z4Qt5duNjnS/uUDr27ITCCir8CZwYBx7zQK5QLcIb83homIhNm?=
 =?us-ascii?q?k4DaM07RW81RuCpnbx9yrEgHuCxiQWkj80bkbB6x+ngVFO7ykhNgzkM0ZeUr6S?=
 =?us-ascii?q?ep4FotIFfOjDU/nVN3mtj/hz2VNjnrI+34CYVXDTfk8ks8KJX2Ry5rYgCo209p?=
 =?us-ascii?q?LjHJQ/RWlbQ2Jk5xjwqJlZJJGPNYBYlJchQZw/bfM/kh11VRrmOjyF1M7O3CIZ?=
 =?us-ascii?q?9jkgIwdtirtX0WiFErV8I8OaGFfPkB9VNXnK/b+3bwju0=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AcAADzrPZbh0O0hNFiHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgmkDfyeDeIM8hFyMAYFoJRSOIokEgXMSAQEYBwwBgUuHBiI0CQ0?=
 =?us-ascii?q?BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmEBAQEBAgEBAiAPAQ0BATcBBAEJA?=
 =?us-ascii?q?QEKGAICJgICAzEBBQEcBgEMBgIBAQEEgxgBgXkIBAEKniY8ih1wgS+CdgEBBYJ?=
 =?us-ascii?q?DhF8IEnmJYoEcgVc/gTgMgl+DEAsCAoEZg0qCV4dSgUkGBIV2gUWPJAcCghwEg?=
 =?us-ascii?q?3thii0GGIImhysQhyeNQ4pGAgQCBAUCBQ8hgSWCDTMaMIMvCYISDBeDSoUUhT8?=
 =?us-ascii?q?/MoEFAQGKa4I+AQE?=
X-IPAS-Result: =?us-ascii?q?A0AcAADzrPZbh0O0hNFiHAEBAQQBAQcEAQGBUQcBAQsBgmk?=
 =?us-ascii?q?DfyeDeIM8hFyMAYFoJRSOIokEgXMSAQEYBwwBgUuHBiI0CQ0BAwEBAQEBAQIBE?=
 =?us-ascii?q?wEBAQgNCQgpIwyCNiQBgmEBAQEBAgEBAiAPAQ0BATcBBAEJAQEKGAICJgICAzE?=
 =?us-ascii?q?BBQEcBgEMBgIBAQEEgxgBgXkIBAEKniY8ih1wgS+CdgEBBYJDhF8IEnmJYoEcg?=
 =?us-ascii?q?Vc/gTgMgl+DEAsCAoEZg0qCV4dSgUkGBIV2gUWPJAcCghwEg3thii0GGIImhys?=
 =?us-ascii?q?QhyeNQ4pGAgQCBAUCBQ8hgSWCDTMaMIMvCYISDBeDSoUUhT8/MoEFAQGKa4I+A?=
 =?us-ascii?q?QE?=
X-IronPort-AV: E=Sophos;i="5.56,265,1539673200"; 
   d="scan'208";a="53956428"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 22 Nov 2018 05:21:26 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2436780AbeKWAAl (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 22 Nov 2018 19:00:41 -0500
Received: from mail-wr1-f65.google.com ([209.85.221.65]:37729 "EHLO
        mail-wr1-f65.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727034AbeKWAAl (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 22 Nov 2018 19:00:41 -0500
Received: by mail-wr1-f65.google.com with SMTP id j10so9246138wru.4
        for <linux-kernel@vger.kernel.org>; Thu, 22 Nov 2018 05:21:20 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=subject:to:cc:references:from:message-id:date:user-agent
         :mime-version:in-reply-to:content-language:content-transfer-encoding;
        bh=+Bk8fqwx+vwpKrFa9BEYtiZKtKYoJ100RWpAY0SA3pE=;
        b=da6EXoqc7UZhFlGU7rOvQ0plK9+KnepG7/AaFUMpV/+ldJZeQiPY8xkIXPPBBOk2bg
         FqVAlwBG3O9CGkbsCkuQKZypVmxvt+Nkr3FYtx3ewS2sQaXKZtt2X7Y/mUY4uD3YyLoa
         BvVvY50g3Khj7TYBWutCItIKXZ5eZ+Y4GPgb8=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:subject:to:cc:references:from:message-id:date
         :user-agent:mime-version:in-reply-to:content-language
         :content-transfer-encoding;
        bh=+Bk8fqwx+vwpKrFa9BEYtiZKtKYoJ100RWpAY0SA3pE=;
        b=XskBCqspQGGFNnJzMs16UfM1Uvaje1ooxTndgjuiCeqEyRi8b8R+rHJ7gYmi0QkPiz
         e0KSvQ2/X+1F/t5S+c2zSudpcdcqX84cWrytkmfuAkTx0XjS+fjwdJSyX2xHCrbXHQEg
         IwAfh/1MyH5KG2U9XvQH7iiYFWY9XA+Y5Nrv3yYrpsaThzRwB7sYPUU+c78qMnucVxsM
         teFsrSFUL6VAMnVhC1jTox4hpEHc/k7egPLVYJrFaRXUGLUQyVNiIqOkc8fJQHH/PEk5
         e0VZTtEZZ+ENfYhOtRfi3q7LtH1sYVbtHYiBWngCyoK+KV9W87OMetU9uKnwsi7bg56H
         CUmw==
X-Gm-Message-State: AA+aEWYDYTfla4fGTJErkwCVYcLZZyC0/2JQkmasgSa93b68fH1/Pa94
        /Z53OloOksjo/NjZkuY/Jmd2eA==
X-Google-Smtp-Source: AFSGD/WrRK9+7/ZOfqufYHdZivNUZ3BE/+nuj4vq8d1xA00PB3oRpfbvV3vaIRmkOgNLxJgSMFvdtQ==
X-Received: by 2002:adf:9dd2:: with SMTP id q18mr9734146wre.12.1542892879753;
        Thu, 22 Nov 2018 05:21:19 -0800 (PST)
Received: from [192.168.0.40] (189.35.136.77.rev.sfr.net. [77.136.35.189])
        by smtp.googlemail.com with ESMTPSA id m65sm6227145wmb.4.2018.11.22.05.21.18
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Thu, 22 Nov 2018 05:21:19 -0800 (PST)
Subject: Re: [PATCH] clocksource/drivers/timer-imx-tpm: convert the driver to
 timer-of
To: Anson Huang <anson.huang@nxp.com>,
        "tglx@linutronix.de" <tglx@linutronix.de>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>
Cc: dl-linux-imx <linux-imx@nxp.com>
References: <1541481054-25186-1-git-send-email-Anson.Huang@nxp.com>
From: Daniel Lezcano <daniel.lezcano@linaro.org>
Message-ID: <ce65714b-8145-ca77-f019-d189184dffdd@linaro.org>
Date: Thu, 22 Nov 2018 14:21:17 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.2.1
MIME-Version: 1.0
In-Reply-To: <1541481054-25186-1-git-send-email-Anson.Huang@nxp.com>
Content-Type: text/plain; charset=utf-8
Content-Language: en-US
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org


Hi Anson,


On 06/11/2018 06:15, Anson Huang wrote:
> Convert the driver to use the timer_of helpers.
> This allows to handle timer base, clock and irq using
> common timer_of driver and it simplifies the code.

Can you do an extra move by passing the timer_of structure around for:
 - tpm_timer_disable
 - tpm_timer_enable
 - tpm_irq_acknowledge

and use to_timer_of(clkevt) to retrieve the timer_base value for other
clockevent callbacks ?

The clockevent code will be self-encapsulated.



> Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
> ---
>  drivers/clocksource/timer-imx-tpm.c | 136 +++++++++++++++---------------------
>  1 file changed, 55 insertions(+), 81 deletions(-)
> 
> diff --git a/drivers/clocksource/timer-imx-tpm.c b/drivers/clocksource/timer-imx-tpm.c
> index b7aa2b8..c3dd4d2 100644
> --- a/drivers/clocksource/timer-imx-tpm.c
> +++ b/drivers/clocksource/timer-imx-tpm.c
> @@ -12,6 +12,8 @@
>  #include <linux/of_irq.h>
>  #include <linux/sched_clock.h>
>  
> +#include "timer-of.h"
> +
>  #define TPM_PARAM			0x4
>  #define TPM_PARAM_WIDTH_SHIFT		16
>  #define TPM_PARAM_WIDTH_MASK		(0xff << 16)
> @@ -33,9 +35,7 @@
>  #define TPM_C0V				0x24
>  
>  static int counter_width;
> -static int rating;
>  static void __iomem *timer_base;
> -static struct clock_event_device clockevent_tpm;
>  
>  static inline void tpm_timer_disable(void)
>  {
> @@ -80,19 +80,6 @@ static u64 notrace tpm_read_sched_clock(void)
>  	return tpm_read_counter();
>  }
>  
> -static int __init tpm_clocksource_init(unsigned long rate)
> -{
> -	tpm_delay_timer.read_current_timer = &tpm_read_current_timer;
> -	tpm_delay_timer.freq = rate;
> -	register_current_timer_delay(&tpm_delay_timer);
> -
> -	sched_clock_register(tpm_read_sched_clock, counter_width, rate);
> -
> -	return clocksource_mmio_init(timer_base + TPM_CNT, "imx-tpm",
> -				     rate, rating, counter_width,
> -				     clocksource_mmio_readl_up);
> -}
> -
>  static int tpm_set_next_event(unsigned long delta,
>  				struct clock_event_device *evt)
>  {
> @@ -137,74 +124,77 @@ static irqreturn_t tpm_timer_interrupt(int irq, void *dev_id)
>  	return IRQ_HANDLED;
>  }
>  
> -static struct clock_event_device clockevent_tpm = {
> -	.name			= "i.MX7ULP TPM Timer",
> -	.features		= CLOCK_EVT_FEAT_ONESHOT,
> -	.set_state_oneshot	= tpm_set_state_oneshot,
> -	.set_next_event		= tpm_set_next_event,
> -	.set_state_shutdown	= tpm_set_state_shutdown,
> +static struct timer_of to_tpm = {
> +	.flags = TIMER_OF_IRQ | TIMER_OF_BASE | TIMER_OF_CLOCK,
> +	.clkevt = {
> +		.name			= "i.MX7ULP TPM Timer",
> +		.rating			= 200,
> +		.features		= CLOCK_EVT_FEAT_ONESHOT,
> +		.set_state_shutdown	= tpm_set_state_shutdown,
> +		.set_state_oneshot	= tpm_set_state_oneshot,
> +		.set_next_event		= tpm_set_next_event,
> +		.cpumask		= cpu_possible_mask,
> +	},
> +	.of_irq = {
> +		.handler		= tpm_timer_interrupt,
> +		.flags			= IRQF_TIMER | IRQF_IRQPOLL,
> +	},
>  };
>  
> -static int __init tpm_clockevent_init(unsigned long rate, int irq)
> +static int __init tpm_clocksource_init(void)
>  {
> -	int ret;
> +	tpm_delay_timer.read_current_timer = &tpm_read_current_timer;
> +	tpm_delay_timer.freq = timer_of_rate(&to_tpm) >> 3;
> +	register_current_timer_delay(&tpm_delay_timer);
>  
> -	ret = request_irq(irq, tpm_timer_interrupt, IRQF_TIMER | IRQF_IRQPOLL,
> -			  "i.MX7ULP TPM Timer", &clockevent_tpm);
> +	sched_clock_register(tpm_read_sched_clock, counter_width,
> +			     timer_of_rate(&to_tpm) >> 3);
>  
> -	clockevent_tpm.rating = rating;
> -	clockevent_tpm.cpumask = cpumask_of(0);
> -	clockevent_tpm.irq = irq;
> -	clockevents_config_and_register(&clockevent_tpm, rate, 300,
> -					GENMASK(counter_width - 1, 1));
> +	return clocksource_mmio_init(timer_base + TPM_CNT,
> +				     "imx-tpm",
> +				     timer_of_rate(&to_tpm) >> 3,
> +				     to_tpm.clkevt.rating,
> +				     counter_width,
> +				     clocksource_mmio_readl_up);
> +}
>  
> -	return ret;
> +static void __init tpm_clockevent_init(void)
> +{
> +	clockevents_config_and_register(&to_tpm.clkevt,
> +					timer_of_rate(&to_tpm) >> 3,
> +					300,
> +					GENMASK(counter_width - 1,
> +					1));
>  }
>  
>  static int __init tpm_timer_init(struct device_node *np)
>  {
> -	struct clk *ipg, *per;
> -	int irq, ret;
> -	u32 rate;
> -
> -	timer_base = of_iomap(np, 0);
> -	if (!timer_base) {
> -		pr_err("tpm: failed to get base address\n");
> -		return -ENXIO;
> -	}
> -
> -	irq = irq_of_parse_and_map(np, 0);
> -	if (!irq) {
> -		pr_err("tpm: failed to get irq\n");
> -		ret = -ENOENT;
> -		goto err_iomap;
> -	}
> +	struct clk *ipg;
> +	int ret;
>  
>  	ipg = of_clk_get_by_name(np, "ipg");
> -	per = of_clk_get_by_name(np, "per");
> -	if (IS_ERR(ipg) || IS_ERR(per)) {
> -		pr_err("tpm: failed to get ipg or per clk\n");
> -		ret = -ENODEV;
> -		goto err_clk_get;
> +	if (IS_ERR(ipg)) {
> +		pr_err("tpm: failed to get ipg clk\n");
> +		return -ENODEV;
>  	}
> -
>  	/* enable clk before accessing registers */
>  	ret = clk_prepare_enable(ipg);
>  	if (ret) {
>  		pr_err("tpm: ipg clock enable failed (%d)\n", ret);
> -		goto err_clk_get;
> +		clk_put(ipg);
> +		return ret;
>  	}
>  
> -	ret = clk_prepare_enable(per);
> -	if (ret) {
> -		pr_err("tpm: per clock enable failed (%d)\n", ret);
> -		goto err_per_clk_enable;
> -	}
> +	ret = timer_of_init(np, &to_tpm);
> +	if (ret)
> +		return ret;
> +
> +	timer_base = timer_of_base(&to_tpm);
>  
> -	counter_width = (readl(timer_base + TPM_PARAM) & TPM_PARAM_WIDTH_MASK)
> -		>> TPM_PARAM_WIDTH_SHIFT;
> +	counter_width = (readl(timer_base + TPM_PARAM)
> +		& TPM_PARAM_WIDTH_MASK) >> TPM_PARAM_WIDTH_SHIFT;
>  	/* use rating 200 for 32-bit counter and 150 for 16-bit counter */
> -	rating = counter_width == 0x20 ? 200 : 150;
> +	to_tpm.clkevt.rating = counter_width == 0x20 ? 200 : 150;
>  
>  	/*
>  	 * Initialize tpm module to a known state
> @@ -229,29 +219,13 @@ static int __init tpm_timer_init(struct device_node *np)
>  	writel(TPM_SC_CMOD_INC_PER_CNT |
>  		(counter_width == 0x20 ?
>  		TPM_SC_CMOD_DIV_DEFAULT : TPM_SC_CMOD_DIV_MAX),
> -		     timer_base + TPM_SC);
> +		timer_base + TPM_SC);
>  
>  	/* set MOD register to maximum for free running mode */
>  	writel(GENMASK(counter_width - 1, 0), timer_base + TPM_MOD);
>  
> -	rate = clk_get_rate(per) >> 3;
> -	ret = tpm_clocksource_init(rate);
> -	if (ret)
> -		goto err_per_clk_enable;
> -
> -	ret = tpm_clockevent_init(rate, irq);
> -	if (ret)
> -		goto err_per_clk_enable;
> -
> -	return 0;
> +	tpm_clockevent_init();
>  
> -err_per_clk_enable:
> -	clk_disable_unprepare(ipg);
> -err_clk_get:
> -	clk_put(per);
> -	clk_put(ipg);
> -err_iomap:
> -	iounmap(timer_base);
> -	return ret;
> +	return tpm_clocksource_init();
>  }
>  TIMER_OF_DECLARE(imx7ulp, "fsl,imx7ulp-tpm", tpm_timer_init);
> 


-- 
 <http://www.linaro.org/> Linaro.org │ Open source software for ARM SoCs

Follow Linaro:  <http://www.facebook.com/pages/Linaro> Facebook |
<http://twitter.com/#!/linaroorg> Twitter |
<http://www.linaro.org/linaro-blog/> Blog

