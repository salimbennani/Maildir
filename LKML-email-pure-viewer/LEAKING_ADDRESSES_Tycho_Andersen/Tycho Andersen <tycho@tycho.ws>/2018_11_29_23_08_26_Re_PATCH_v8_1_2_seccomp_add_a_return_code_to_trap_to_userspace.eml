Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 08:52:15 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 94937580460;
	Thu, 29 Nov 2018 15:08:38 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga007-1.jf.intel.com with ESMTP; 29 Nov 2018 15:08:38 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A/Q9XlRIUvSznXL8QmtmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgUL/35rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvdxcLndfdcHTmRfWMhfWTFKDoei?=
 =?us-ascii?q?Y4cTCuYMO/tToYvgqFsUtRawCwmiCv3yxDFLiH/50rE13PkjHg7IxwwgB9ADvW?=
 =?us-ascii?q?/IrNnpLqoeTfy5wbPWwTjFcvhY2S396I/Nch05v/+NXa5/ccrWyUIyCw7FiEif?=
 =?us-ascii?q?ppL/PzOOyOsNtXWQ4u18VeOvl2EnqwZxryOzxsYslobJhoUVxkrK9CVi2Ys4I8?=
 =?us-ascii?q?CzRk1jYdO8DpdcqyWXO5FrTs4sXW1kojs2x74atZKhfSUHyowrywPBZ/GEaYSE?=
 =?us-ascii?q?/w7vWeSLLTtmi39pZaiziwuz/ES9zOD3S9O630xQriVfl9nBrnAN2ALX6siAUv?=
 =?us-ascii?q?Z94Eih1iiV1wzJ6eFLP1o0lazFJJ4l2LIwkYATsUvbEi/3nkX5krOWe1069uS0?=
 =?us-ascii?q?7+nreKjqq5GCO4Nulw3zMbgilta+DOk6KgQOWnKU+eW41L3t5035R7BKg+Uykq?=
 =?us-ascii?q?nYtpDaOMsaqre6AwBLyIYj7QiwDzO/3NQfk3gHKkxKeAicgoj3NFHBPur4Ae28?=
 =?us-ascii?q?g1uyijdrwe7JPrn7DpXKNHjDn6/tfaxh5E5E1Aoz0ddf6opQCrEAI/L8RFX9td?=
 =?us-ascii?q?PFDhIiNwy0wuDnCMhy148EWGKPBLOZP73WsVOS+u0vJOyMbpcPuDnhM/gl++Lu?=
 =?us-ascii?q?jXghlF8dZ6ap3IcXZ2q/Hvh8I0WZfGDjgtEOEWoRugo+TerqiECNUDJJZnayWb?=
 =?us-ascii?q?486S8/CI68EYjDQYWtiqSb3CinBp1WenxGCleUHHfqcIWLRe0AaCGVIs9nlDwE?=
 =?us-ascii?q?UqOsS4sg1RGoqQ/7xKBrLuvS+i0Eq53j0MJ56PHUlRE37TZ0FdiS03mRT2FomW?=
 =?us-ascii?q?MFXyU53Lt/oUx6yVePy7J4jOZaFdFI4/NJUwE6NYPTzuBgCtDyXB7BccmNSFq8?=
 =?us-ascii?q?XtqmBjQxRMorw9ASe0Z9B8mijhfb0iqpGbAVkaaHBJg18q3G2XjxKN1wy3LH1K?=
 =?us-ascii?q?knklknTdFDNWyghq5j6QfTA5TFnFmel6avba4cxjLC9H+fzWqSu0FVSBN/Xr/b?=
 =?us-ascii?q?XX8BfEfWrc725kXZT7CwD7QrNQ9Byc2HKqtOcdDpiVRGRPH+ONXReW6xmmGwBQ?=
 =?us-ascii?q?qWybOIdoblZ2Id3CDFAkgejw8T5WqGNRQ5Biq5vm3RFiJuGkz1b0Ps6+Z+rmi7?=
 =?us-ascii?q?QVEyzwyRa01h1ry1+gMahPCGSvMT2K4EtzklqzluAFm92NfWAcKapwV9ZKVcfc?=
 =?us-ascii?q?894FBf2GLFtgx9O5ugL7xihl8eaQh3o1ni1xJtCoVEkMgqqnwqwRF2KaKZ1lNB?=
 =?us-ascii?q?ajyZ0YrxOr3RNmn94hSvZ7TK1VHZ1dac4r0P5+ggq1X/oAGpEVIv/G9j09ZL3H?=
 =?us-ascii?q?qT+JXLABAJXpLsT0k47R56p7LdYikj/I7U0XxsMa+psj7Nwd4pBe0lygq+cNdb?=
 =?us-ascii?q?Kq+LCAjyE8gCDci0NOMqg0Spbg4DPO1K9K80ItmqeOec1K+qPOZvhjSmjWtc7Y?=
 =?us-ascii?q?B500KM8Td8S+HS05YExfGYwhWIVzPmgFi9tcD3nJhOZSsOEWqn1SjkGIlRa7Vo?=
 =?us-ascii?q?fYYKFWihOde3ych5h5L3XX5X6kSjB1If1MC1YxWSa0Hy0hNK1UQQp3yqgi+4zz?=
 =?us-ascii?q?1ykzE0oauTxi3Ow+L+dBUZPm5HXnVtjVDpIYKsldAVQFCobxQ1lBui/Uv7x6lb?=
 =?us-ascii?q?qL5/LmXJWkdIYi72InpmUquxsLqCfsFO5IkpsSVRTOSzf1SaRqThrBsd1iPpB3?=
 =?us-ascii?q?FeyywjdzG2ppX5mAR3iGCHI3Zpr3rZesZwyQ3E5NPGRv5R3TsGRC9mhjnRHVW8?=
 =?us-ascii?q?O9ip/dOJl5bMqOy+VmShVoFNfinv14+PqCy75WhyCx2lg/+zgsHnERQ90SLj19?=
 =?us-ascii?q?hlTyLIoAz+Yonq0aS3KuZnfkhuBF/h5Mt2AIB+ko0shJ4O3XgWnIma/X0CkW3r?=
 =?us-ascii?q?K9VUxbr+bGYRRT4M29PV4xLq2Ex5InKJ2oL2THOdwsR6atm+Y2MW3D897s9QBK?=
 =?us-ascii?q?eV6rxEgTV6ol6ioQ3NZvh9my8XyeEy534Cn+EJpA0twz2YArATHklXJzbglhqW?=
 =?us-ascii?q?4NClsKVYenyvfqOu20pkktCsF7WCogBaWHbkdZYuBy5w7sNjMF3S1H3/8J3reN?=
 =?us-ascii?q?7VbdgLrB2bjw/Aj/RJKJI2jvcKmS1nOWfnsXwk0eE7iwFu3YqhvIiGMGht+KO5?=
 =?us-ascii?q?AhhFNjz6fc8T+zftjbpAkcaSxYygApJhGjATVpvyUf2oCC4StejgNwuWCzIzsH?=
 =?us-ascii?q?CbGb7CHQOF7EdmsmnCE5SqN3GROXkYws9uRBibJExDng8UWC82kYI+FgCv3Mbh?=
 =?us-ascii?q?alt25igN5l7krRtB0uBoOAP6UmjBvwekcCs0RIKcLBpL7QFC+kHVPtaF7u9oGy?=
 =?us-ascii?q?FY/5uhrBGCK2CBZgRIC30JVVKAB1z5Irau4tzA+fCCBuWiN/vOfamOqetGWvaI?=
 =?us-ascii?q?wpKvz5Jm/yuWOcWJJHViFPo72kxMXX1iH8TZmjMPSzEYli7Xbs6bogu89TNzrs?=
 =?us-ascii?q?yl7PvrXwfv75OVC7ROKdVv5wy2gaCbOu6Qmil5KDVY1pANxXPSy7gfxlkSiy5w?=
 =?us-ascii?q?eDm3DLQArjXATKbRmq9REh4aZDl/NMpO76IgwAZNPdTXhc/y1r59lvQ1EUtKVU?=
 =?us-ascii?q?T9msG1YswHO3uyNE7cC0aRKruHJSfHw8X2Ya6nTb1QjeNUtwC/uDqBEk/jOCiD?=
 =?us-ascii?q?mCftVxy1Le5MiySbNgREuI6hahZtFXTjTNX+Zx2nMd93iCc6zqEuinzWNW4TLz?=
 =?us-ascii?q?58flhJrr2R6yNYn/p+F3ZA7npjMemLhSKZ4/PEJZYRtPthGj50mP5C4HQm17tV?=
 =?us-ascii?q?6zlJRfxvlyvUq95uolemnfGOyzpnShVOrDlLiZmPvUVjP6XZ65ZBVWzF/BIL8W?=
 =?us-ascii?q?WfFRAKq8F5Bd3ovqADguTIwYH+JSwK2NXT/oNIBMXZM8mAN3kJOhrzHzvVEQ5D?=
 =?us-ascii?q?SiSkYyWXrkpRgbm262GSq5kgsZvt0M4KV6NcfFUwH/gTEkV5FdhEJpprCGAKi7?=
 =?us-ascii?q?me2fIZ7nq55DDXSMhApZ3BHqaOEP7vLx6FnLJEYF0X2uWrfswoKoTn1hk6ORFB?=
 =?us-ascii?q?l4PQFh+VDYhA?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ADAAA5cABch0O0hNFlGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBgVqBD4ECJ4wRi1Q1gg0UjXSJPIEkA0wSAQE?=
 =?us-ascii?q?YAxABh3QiNAkNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkgmMBAgMBAjcGAQE3A?=
 =?us-ascii?q?QUJAQEKGAklAwwFIAEFAQEhAReCUUsBggEFnXI8ih2CH4J2AQEFhyoIEhCKWIE?=
 =?us-ascii?q?cF4F/gRABgxKINoImiSMGgXKFBVCPNQmCIYRdiikjClWBSIcxh0SIeI8vBgIJB?=
 =?us-ascii?q?w8hgSWCDU04gycJghIMF4IQgTqCSogpIDIBgQEDAQEhEwsBjH8BAQ?=
X-IPAS-Result: =?us-ascii?q?A0ADAAA5cABch0O0hNFlGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBgVqBD4ECJ4wRi1Q1gg0UjXSJPIEkA0wSAQEYAxABh3QiNAkNA?=
 =?us-ascii?q?QMBAQEBAQECARMBAQEIDQkIKSMMgjYkgmMBAgMBAjcGAQE3AQUJAQEKGAklAww?=
 =?us-ascii?q?FIAEFAQEhAReCUUsBggEFnXI8ih2CH4J2AQEFhyoIEhCKWIEcF4F/gRABgxKIN?=
 =?us-ascii?q?oImiSMGgXKFBVCPNQmCIYRdiikjClWBSIcxh0SIeI8vBgIJBw8hgSWCDU04gyc?=
 =?us-ascii?q?JghIMF4IQgTqCSogpIDIBgQEDAQEhEwsBjH8BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,296,1539673200"; 
   d="scan'208";a="55470020"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 15:08:36 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727192AbeK3KPj (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 30 Nov 2018 05:15:39 -0500
Received: from mail-pf1-f195.google.com ([209.85.210.195]:41428 "EHLO
        mail-pf1-f195.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726824AbeK3KPj (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 30 Nov 2018 05:15:39 -0500
Received: by mail-pf1-f195.google.com with SMTP id b7so1773919pfi.8
        for <linux-kernel@vger.kernel.org>; Thu, 29 Nov 2018 15:08:30 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=tycho-ws.20150623.gappssmtp.com; s=20150623;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=37xWa5ppls1wBcn3ORaj0+L5Gz0YBCVILQxhZKoSFQo=;
        b=D3v74xaxjmaV2Q98XgwWS6ruPskB9hIrccOgMFOTAjEibQfg+jc9tl5FU2JjYTWUYu
         J+Ia1tj/xvBNEOfW0QsvXOiAFNyhB4OCNfGlfXaWJkqPdzTyZezlcuUrdJkxvKGj3WHL
         X9P00gUKkyZEvFoKMv9NIPqvCejjna1rCQU5RaKChOXC8mSJU23t+wWULKZifGiKjXgA
         6fCP0Sm2ZSTHUQ2Dt55hOlHXeGPzg6DHMcRF/Pow8UIqo+X9X1FB7zaxSWn7dLssrsUW
         X30eSrIlAOVGoz5xZ4RlXySs520wCRDbazZ8rIpdUknVmUCfLP1myMnleh4LCdZrq7DZ
         UcWQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:message-id:references
         :mime-version:content-disposition:in-reply-to:user-agent;
        bh=37xWa5ppls1wBcn3ORaj0+L5Gz0YBCVILQxhZKoSFQo=;
        b=GFlkUGsR8KVs4uma6CueZPZEXSKgunjq6jYQZJjy0dEONLJFQrh2bezDiXFpMuMX/A
         dx76UiDFTTjxtnQfbgT4tmiWk9E/gfCZSBAQ0lVGXRBUQQTaf5vJ2RppQC21RtvlmhOF
         ilwbLl2o0ATePXHxJRjvP2WTSlFqLnqDEhXmC9M3zU5czaaTC+OWT1ybibFOtP24OLrA
         OxF9Adweq0qQ++M4RCG6CIOgm3B0qi4ja5gi7S+Wuzqh6FG67XqeDaY1eVJZOF6fNnDW
         3rKvfCGqKCNgm3HRSto12WuGqhMtRsF78QBViENPez6ROotguA1O02RPNv7tJuQLPhlg
         GxAw==
X-Gm-Message-State: AA+aEWZoaH2jrIvXu81y6Ugpqy8Ek7sbi9bqUDbP1+oPQqVlREPt4S9W
        K3yKNhEAEWFf0LDjDTyKNvFVkQ==
X-Google-Smtp-Source: AFSGD/VaI+Krx6+6ZdUsuoRT4zyKf4Q1f42hP3RYrIPSy8iVIJCdQMYVcSNKwYSoJjqXW9xC6QfxdQ==
X-Received: by 2002:a62:190e:: with SMTP id 14mr3253200pfz.70.1543532909714;
        Thu, 29 Nov 2018 15:08:29 -0800 (PST)
Received: from cisco ([128.107.241.161])
        by smtp.gmail.com with ESMTPSA id v190sm4625799pfv.26.2018.11.29.15.08.27
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Thu, 29 Nov 2018 15:08:28 -0800 (PST)
Date: Thu, 29 Nov 2018 16:08:26 -0700
From: Tycho Andersen <tycho@tycho.ws>
To: Kees Cook <keescook@chromium.org>,
        Andy Lutomirski <luto@amacapital.net>
Cc: Oleg Nesterov <oleg@redhat.com>,
        "Eric W . Biederman" <ebiederm@xmission.com>,
        "Serge E . Hallyn" <serge@hallyn.com>,
        Christian Brauner <christian@brauner.io>,
        Tyler Hicks <tyhicks@canonical.com>,
        Akihiro Suda <suda.akihiro@lab.ntt.co.jp>,
        Aleksa Sarai <asarai@suse.de>, linux-kernel@vger.kernel.org,
        containers@lists.linux-foundation.org, linux-api@vger.kernel.org
Subject: Re: [PATCH v8 1/2] seccomp: add a return code to trap to userspace
Message-ID: <20181129230826.GB4676@cisco>
References: <20181029224031.29809-1-tycho@tycho.ws>
 <20181029224031.29809-2-tycho@tycho.ws>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181029224031.29809-2-tycho@tycho.ws>
User-Agent: Mutt/1.10.1 (2018-07-13)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Mon, Oct 29, 2018 at 04:40:30PM -0600, Tycho Andersen wrote:
> +	resp.id = req.id;
> +	resp.error = -512; /* -ERESTARTSYS */
> +	resp.val = 0;
> +
> +	EXPECT_EQ(ioctl(listener, SECCOMP_IOCTL_NOTIF_SEND, &resp), 0);

So, it turns out this *doesn't* work, and the reason this test was
passing is because of poor hygiene on my part.

Per the documentation in include/linux/errno.h,

/*
 * These should never be seen by user programs.  To return one of ERESTART*
 * codes, signal_pending() MUST be set.  Note that ptrace can observe these
 * at syscall exit tracing, but they will never be left for the debugged user
 * process to see.
 */
#define ERESTARTSYS     512

So basically, if you respond with -ERESTARTSYS with no signal pending, you'll
leak it to userspace. It turns out this is already possible with
SECCOMP_RET_TRAP (and probably ptrace alone, although I didn't try it out),
see the program below.

The question is: do we care? If so, it seems like we may need to handle the
-ERESTARTSYS-style cases even when there is no signal pending. If we don't,
there's precedent for us to just do the same thing as what happens for
SECCOMP_RET_TRACE, but we should probably at least fix the docs.

Tycho


#include <stdio.h>
#include <stddef.h>
#include <stdbool.h>
#include <unistd.h>
#include <stdlib.h>
#include <errno.h>
#include <signal.h>
#include <string.h>
#include <sys/syscall.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/wait.h>
#include <sys/ptrace.h>
#include <sys/ioctl.h>
#include <inttypes.h>
#include <linux/filter.h>
#include <linux/seccomp.h>
#include <linux/ptrace.h>
#include <linux/elf.h>
#include <pthread.h>


static int filter_syscall(int syscall_nr)
{
	struct sock_filter filter[] = {
		BPF_STMT(BPF_LD+BPF_W+BPF_ABS, offsetof(struct seccomp_data, nr)),
		BPF_JUMP(BPF_JMP+BPF_JEQ+BPF_K, syscall_nr, 0, 1),
		BPF_STMT(BPF_RET+BPF_K, SECCOMP_RET_TRACE),
		BPF_STMT(BPF_RET+BPF_K, SECCOMP_RET_ALLOW),
	};

	struct sock_fprog bpf_prog = {
		.len = (unsigned short)(sizeof(filter)/sizeof(filter[0])),
		.filter = filter,
	};

	int ret;

	ret = syscall(__NR_seccomp, SECCOMP_SET_MODE_FILTER, 0, &bpf_prog);
	if (ret < 0) {
		perror("prctl failed");
		return -1;
	}

	return ret;
}

typedef struct {
        uint64_t        r15;
        uint64_t        r14;
        uint64_t        r13;
        uint64_t        r12;
        uint64_t        bp;
        uint64_t        bx;
        uint64_t        r11;
        uint64_t        r10;
        uint64_t        r9;
        uint64_t        r8;
        uint64_t        ax;
        uint64_t        cx;
        uint64_t        dx;
        uint64_t        si;
        uint64_t        di;
        uint64_t        orig_ax;
        uint64_t        ip;
        uint64_t        cs;
        uint64_t        flags;
        uint64_t        sp;
        uint64_t        ss;
        uint64_t        fs_base;
        uint64_t        gs_base;
        uint64_t        ds;
        uint64_t        es;
        uint64_t        fs;
        uint64_t        gs;
} user_regs_struct64;

int main(int argc, char **argv)
{
	pid_t pid;
	user_regs_struct64 regs;
	struct iovec iov = {.iov_base = &regs, .iov_len = sizeof(regs)};
	int status;

	pid = fork();

	if (pid == 0) {
		if (signal(SIGUSR1, signal_handler) == SIG_ERR) {
			perror("signal");
			exit(1);
		}

		if (filter_syscall(__NR_getpid) < 0)
			exit(1);

		/* i'm lazy, so sue me :) */
		sleep(1);

		errno = 0;
		pid = syscall(__NR_getpid);

		/*
		 * we get:
		 *   getpid(): -1, errno: 512
		 * probably should get
		 *   getpid(): <pid> errno: 0
		 */
		printf("getpid(): %d, errno: %d\n", pid, errno);
		exit(errno);
	}

	if (ptrace(PTRACE_ATTACH, pid, NULL, 0) < 0) {
		perror("ptrace attach");
		goto out;
	}

	if (waitpid(pid, NULL, 0) != pid) {
		perror("waitpid");
		goto out;
	}

	if (ptrace(PTRACE_SETOPTIONS, pid, NULL, PTRACE_O_TRACESECCOMP) < 0) {
		perror("ptrace setoptions");
		goto out;
	}

	if (ptrace(PTRACE_CONT, pid, NULL, 0) != 0) {
		perror("ptrace cont");
		goto out;
	}

	if (waitpid(pid, &status, 0) != pid) {
		perror("wait for trace");
		goto out;
	}

	if (status >> 8 != (SIGTRAP | (PTRACE_EVENT_SECCOMP<<8))) {
		printf("got bad trap event?\n");
		goto out;
	}

	if (ptrace(PTRACE_GETREGSET, pid, NT_PRSTATUS, &iov) < 0) {
		perror("getregset");
		goto out;
	}

	/*
	 * Tell the syscall to restart. Per include/linux/errno.h this should
	 * only be set when signal_pending() is set. But we just won't send
	 * any signals to the process, and we'll see this in userspace.
	 */
	regs.ax = -512; /* -ERESTARTSYS */

	/*
	 * This makes the this_syscall < 0 check in __seccomp_filter()
	 * trigger, so we skip the syscall and return whatever is in ax
	 */
	regs.orig_ax = -512; /* -ERESTARTSYS */

	if (ptrace(PTRACE_SETREGSET, pid, NT_PRSTATUS, &iov) < 0) {
		perror("setregset");
		goto out;
	}

	if (ptrace(PTRACE_CONT, pid, NULL, 0) < 0) {
		perror("cont after setregset");
		goto out;
	}

	while (1) {
		if (waitpid(pid, &status, 0) != pid) {
			perror("wait for death");
			goto out;
		}

		if (!WIFSTOPPED(status)) {
			break;
		}

		if (ptrace(PTRACE_CONT, pid, NULL, 0) < 0) {
			perror("cont after setregset");
			goto out;
		}

	}

	if (WIFSIGNALED(status)) {
		printf("didn't exit: %d\n", WTERMSIG(status));
		return 1;
	}

	if (WEXITSTATUS(status)) {
		printf("exited: %d\n", WEXITSTATUS(status));
		return 1;
	}

	return 0;
out:
	kill(pid, SIGKILL);
	return 1;
}
