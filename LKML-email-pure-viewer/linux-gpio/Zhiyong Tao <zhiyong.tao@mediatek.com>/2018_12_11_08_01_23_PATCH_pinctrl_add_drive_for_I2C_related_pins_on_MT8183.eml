Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 11 Dec 2018 19:47:29 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 7D44A58028E;
	Tue, 11 Dec 2018 00:01:59 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga007-1.jf.intel.com with ESMTP; 11 Dec 2018 00:01:59 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A61LlmBJ9BqlFK+yW/tmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgULvT8rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0yRD+s7bpkSAXwhS?=
 =?us-ascii?q?kHKTA37W/ZhM93gq1ZrhKuqABww5XMYIyXL/d+Yr/RcMkGSWdbQspdSypMCZ68?=
 =?us-ascii?q?YYsVCOoBOP5VoIr9p1sPrRq+Ag+sBOzywTFWnHD22rAx3uMgEAHG3QwhH9UOsH?=
 =?us-ascii?q?LbrNnvKKcdS+e1wbLNzTrdcvxW2C3y6JTWfRAiu/2DQbVwcc/IxEQpCgjLjU2Q?=
 =?us-ascii?q?pJT7Mz+J0ukBqXWX4uR+We61lmIqqB19riKuy8oukoXFmJ8Zxkze+Sh43Yo5P9?=
 =?us-ascii?q?61RFBhbdK5E5ZduSeXPJZsTMw4WWFnoiM6x6UGuZGleCgKz4wqxwDQa/OZaYiE?=
 =?us-ascii?q?+BHjW/iLITd+mn1lfKizhxGo8Uiv0uH8V8+030hWriddjNXAqnQA2wbO5sWJVP?=
 =?us-ascii?q?dx5Fqt1DWT2wzJ6+xJI1g4la/BJJ4gxr4wmIATsUPGHiLunEX2jamWdlgr++Sx?=
 =?us-ascii?q?6OTofK/mppmCOI9wkw3+NaovmsqhDuQiKQUOQWeb9vqm1LH5/k32Xq9Kjvsona?=
 =?us-ascii?q?ndqpzaIt4bpqGhDw9Pzokj8wq/Dyuh0NkAmXkHLVFFdwydg4nmJlHDO/T4Dfa5?=
 =?us-ascii?q?g1SxnzZn3fHGPrv9AprTKnjPiqvufbF460RE0go80chf545ICrEGOP/zWlX+tN?=
 =?us-ascii?q?3EDhAjNAy42ebnCMhn2YMYVmKCGauZMKLUsV+V6eMjOeiMZIkJuDnjL/gp/eLh?=
 =?us-ascii?q?jXg8mVUFZ6mmwYMXaGykHvRhO0iZY33sjckbHWcJuQo+SurqiFqZXD5XZnayWb?=
 =?us-ascii?q?885z4hBIKnC4fDWp6igLib0CinGZ1WY3hMCkqQHnfwa4WER/AMZTqILc96kjwE?=
 =?us-ascii?q?UruhR5U71R60tg/30L5nLuvS+i0FupPvztl15+vPlR4s8Tx4FdiS02aIT2tshG?=
 =?us-ascii?q?MHWyc23LxjoUx60lqD0rJ3g/pCGdxX5vNGSAE6NZHHwux+CtDyXB/Bf9iTRFan?=
 =?us-ascii?q?RNWmHS8+TtYrz9ASZEZ9Hs2ojgrf0CqyH78Vi7uLCYQp/a3GwXj+Odxxy3bc26?=
 =?us-ascii?q?knlFkpXM1POWqihq588gjTA5XEk0GYl6asaKQd0zTB9GaFzWqSok5YVBR8XrnC?=
 =?us-ascii?q?XXAafkHWt8j25lveT7+yDrQqKhZOxtScKqRUcNHpjU9JRPH4ONvAZWK8gGOwBR?=
 =?us-ascii?q?eOxrORY4vmYWQd3CPBCEcalwAf52qJNQ87Bi25uWLRECRuFU7zY0Pr6eR+tHK7?=
 =?us-ascii?q?TkozzwGWb01g16C5+gIPifybUfMT2rMEuCEuqzhvGFa93tTWC8ePpgZ7faVcZ8?=
 =?us-ascii?q?8970lD1W7DqwN9OZmgJbh4hlECawR3o1/u1xJvB4palcglsnwrwxRyKK6Cy1xB?=
 =?us-ascii?q?ai6X0or2Or3ULWny4guia6rX2lHYzdaX9b0D6PU+q1X/og6pElAu/Glg09lQy3?=
 =?us-ascii?q?Gc/InFDBIOUZLtVUY67xh7p6zAbiYh/Y/V1H1sPrOysj/NwN8pAOolyhC9f9ZQ?=
 =?us-ascii?q?Kq+EFQnyE9EECMiqMuAlh1+pbhccNuBI6KE0J9+md+eB2KOzJuZgnS6pgn5d4I?=
 =?us-ascii?q?9g1UKA7Sx8RfDS35YE2v2XwhGIVzPhg1i/qMD3noZEaCoWHmq+zyjkGYFQardz?=
 =?us-ascii?q?fYYNFWehPcm3ys9iiJ7qXn5S7ESjCE8e2M+1ZRqSaETw3A1R1UgNoX2rgzC4zy?=
 =?us-ascii?q?Fykzwyqqqf3SrOw/ntdRYdO25LQnVigknoIYSuk98aW02oZRAzlBS5/Ub627Rb?=
 =?us-ascii?q?pKNnImnRW0hIZSv2L2JlUqeqrbqNec1P6JApsSVRTuu8Z0uXSrr8oxscziPiEH?=
 =?us-ascii?q?FSxDE9dzG2pJr5mwZ2h36aLHZ2tHDZY91/xQ/D5NzAQv5cxjoHSzN/iTXNBFi8?=
 =?us-ascii?q?Pt+p8M6Ql5fCtOC+Sm2gWodScSnt0YOPqi+76Xd2Dh24mvC5gsfnHhQi0S/ny9?=
 =?us-ascii?q?lqUj3FrBXmbYnqzai6Mf9ncVNuBF/z8Md6HoB+ko0thJAfw3Qah5OV/WYZnmf3?=
 =?us-ascii?q?K9lUxaX+bH8VTz4R39HV+BTl2FFkLn+RwoL5V3adzdF7a9i0fGwWwT494N5QCK?=
 =?us-ascii?q?iP8rNEhyR1r0G8rQLQZ/h9gzgcxeEv6H4cn+EGpg4twj+BDbAVGElSJTbsmAiQ?=
 =?us-ascii?q?79CisKVXY36icaS31Ep7h9ygDauNogdBWHbiYZciHDR97sF+MFLKzX3y5ZvoeN?=
 =?us-ascii?q?jWbdIPqBKUlw3MgPRSKJI0jvAKnzZoOXrhvX05zO42lQdh0ou9vIiDNmVh5qa5?=
 =?us-ascii?q?AgNDOz3xZsMT/CztjKlEksaX2YCvAotuGjERUJT0SvKoFSoYte77OAaWDD08tn?=
 =?us-ascii?q?CbFKLdHQCF7UdpsWnPH4q3N32NJ3kZ0NZiRASbJENFmwAZRzE6np8/FgC3y83t?=
 =?us-ascii?q?akZ55jYN5lHmrhtA0P5nNx76Um3Hvgendi80SISDLBpR9gxD50DVMdGH7uJuBS?=
 =?us-ascii?q?5Y+IetrBeKKmydaARFFmUJWk2CB1D+Mbii/9jA8+6EBuWgK/vCe6mBqetbV/2Q?=
 =?us-ascii?q?35KgzpNm/yqQNsWIJnRiD+M02ktAXXB6GsTVgTYPSzYQlyLCccGbvgq8+jZso8?=
 =?us-ascii?q?C78fTrXh/v5ISVB7tTN9Vv5w65gaOZO+GMgyZ5LC5S1okQyn/Q1LgfwFkShjl0?=
 =?us-ascii?q?eDmwCrsArzDCTaLKlq9TDh4WcCdzNMpO76Ih0QhBI8/bitXp1rFmiv45EUtKVV?=
 =?us-ascii?q?vkmsuxf8wFP3m9NE/bBEaMLLmGOTzLw8TtbaygU7FfkOVUuAO2uTuAF0/jPzKD?=
 =?us-ascii?q?lyTmVhy1MOFMij2bMwJauI2nbhltDm3jRsr8ahKnKN93kSE2wbosi3LKL2EcNz?=
 =?us-ascii?q?18c0JLrrKI7CJYgu9wG2pO7nd+KemEmiCZ7/TXK5oMsPtrBDh0mPxe4Hgg17RV?=
 =?us-ascii?q?6yREF7RJn36GtNlkoxKqjsGMxyBhXR4IrSxE0sbD6UFjP7jCsIZJXXLJ/RAl6W?=
 =?us-ascii?q?SWAg4N4dx/BYur8/RVw8LM0rjuNDNL9d789NEZQcPTLZTDeC4kOAb1GD/dF00P?=
 =?us-ascii?q?QjGDOmTWhkgbm/aXoC67tJ8//6rsmYsJTLATaFUyXqcICkV0G9oNZot+WRshnL?=
 =?us-ascii?q?KahdIF5jy1qxyHF5YShYzOSv/HWaanEz2el7QRPxY=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BzAABqbg9ch0O0hNFkHQEBBQEHBQGBV?=
 =?us-ascii?q?AUBCwGDayeYJIIhmTQRGBMBh3YiNwYNAQMBAQEBAQECARMBAQEIDQkIKS+CNiK?=
 =?us-ascii?q?CZQMDAQIkUgYJAQFQA1QGAQ0FBYMcggEBBaY3M4ouh3uEP4FXP4ERhFOJGwKLK?=
 =?us-ascii?q?oUQkD0HAoIiBIQjinwjhGKMXAGJI5AQgVyBeDMaI4M8gicMC44qMgEBMYEFAQG?=
 =?us-ascii?q?KZAEB?=
X-IPAS-Result: =?us-ascii?q?A0BzAABqbg9ch0O0hNFkHQEBBQEHBQGBVAUBCwGDayeYJII?=
 =?us-ascii?q?hmTQRGBMBh3YiNwYNAQMBAQEBAQECARMBAQEIDQkIKS+CNiKCZQMDAQIkUgYJA?=
 =?us-ascii?q?QFQA1QGAQ0FBYMcggEBBaY3M4ouh3uEP4FXP4ERhFOJGwKLKoUQkD0HAoIiBIQ?=
 =?us-ascii?q?jinwjhGKMXAGJI5AQgVyBeDMaI4M8gicMC44qMgEBMYEFAQGKZAEB?=
X-IronPort-AV: E=Sophos;i="5.56,341,1539673200"; 
   d="scan'208";a="56945672"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 11 Dec 2018 00:01:57 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726260AbeLKIBy (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 11 Dec 2018 03:01:54 -0500
Received: from mailgw01.mediatek.com ([210.61.82.183]:33582 "EHLO
        mailgw01.mediatek.com" rhost-flags-OK-FAIL-OK-FAIL) by vger.kernel.org
        with ESMTP id S1726036AbeLKIBw (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 11 Dec 2018 03:01:52 -0500
X-UUID: 05589f5ad45341589857077929822880-20181211
X-UUID: 05589f5ad45341589857077929822880-20181211
Received: from mtkcas06.mediatek.inc [(172.21.101.30)] by mailgw01.mediatek.com
        (envelope-from <zhiyong.tao@mediatek.com>)
        (mhqrelay.mediatek.com ESMTP with TLS)
        with ESMTP id 1072666083; Tue, 11 Dec 2018 16:01:28 +0800
Received: from mtkcas08.mediatek.inc (172.21.101.126) by
 mtkmbs02n1.mediatek.inc (172.21.101.77) with Microsoft SMTP Server (TLS) id
 15.0.1395.4; Tue, 11 Dec 2018 16:01:28 +0800
Received: from localhost.localdomain (10.17.3.153) by mtkcas08.mediatek.inc
 (172.21.101.73) with Microsoft SMTP Server id 15.0.1395.4 via Frontend
 Transport; Tue, 11 Dec 2018 16:01:27 +0800
From: Zhiyong Tao <zhiyong.tao@mediatek.com>
To: <robh+dt@kernel.org>, <linus.walleij@linaro.org>,
        <mark.rutland@arm.com>, <matthias.bgg@gmail.com>
CC: <srv_heupstream@mediatek.com>, <liguo.zhang@mediatek.com>,
        <eddie.huang@mediatek.com>, <hongkun.cao@mediatek.com>,
        <biao.huang@mediatek.com>, <hongzhou.yang@mediatek.com>,
        <chuanjia.liu@mediatek.com>, <erin.lo@mediatek.com>,
        <devicetree@vger.kernel.org>, <linux-kernel@vger.kernel.org>,
        <linux-arm-kernel@lists.infradead.org>,
        <linux-mediatek@lists.infradead.org>, <linux-gpio@vger.kernel.org>,
        Zhiyong Tao <zhiyong.tao@mediatek.com>
Subject: [PATCH] pinctrl: add drive for I2C related pins on MT8183
Date: Tue, 11 Dec 2018 16:01:23 +0800
Message-ID: <20181211080123.1397-2-zhiyong.tao@mediatek.com>
X-Mailer: git-send-email 2.12.5
In-Reply-To: <20181211080123.1397-1-zhiyong.tao@mediatek.com>
References: <20181211080123.1397-1-zhiyong.tao@mediatek.com>
MIME-Version: 1.0
Content-Type: text/plain
X-MTK: N
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This patch provides the advanced drive for I2C used pins on MT8183.

Signed-off-by: Zhiyong Tao <zhiyong.tao@mediatek.com>
---
 drivers/pinctrl/mediatek/pinctrl-mt8183.c        | 50 ++++++++++++++++++++++++
 drivers/pinctrl/mediatek/pinctrl-mtk-common-v2.c | 45 +++++++++++++++++++++
 drivers/pinctrl/mediatek/pinctrl-mtk-common-v2.h | 13 ++++++
 drivers/pinctrl/mediatek/pinctrl-paris.c         | 20 ++++++++++
 4 files changed, 128 insertions(+)

diff --git a/drivers/pinctrl/mediatek/pinctrl-mt8183.c b/drivers/pinctrl/mediatek/pinctrl-mt8183.c
index 6262fd3678ea..5244e1b27b1d 100644
--- a/drivers/pinctrl/mediatek/pinctrl-mt8183.c
+++ b/drivers/pinctrl/mediatek/pinctrl-mt8183.c
@@ -472,6 +472,51 @@ static const struct mtk_pin_field_calc mt8183_pin_r1_range[] = {
 	PIN_FIELD_BASE(133, 133, 8, 0x0D0, 0x10, 13, 1),
 };
 
+static const struct mtk_pin_field_calc mt8183_pin_drv_en_dis_range[] = {
+	PIN_FIELD_BASE(48, 48, 3, 0x0F0, 0x10, 20, 1),
+	PIN_FIELD_BASE(49, 49, 3, 0x0F0, 0x10, 15, 1),
+	PIN_FIELD_BASE(50, 50, 4, 0x0F0, 0x10, 12, 1),
+	PIN_FIELD_BASE(51, 51, 4, 0x0F0, 0x10, 7, 1),
+	PIN_FIELD_BASE(81, 81, 5, 0x0F0, 0x10, 12, 1),
+	PIN_FIELD_BASE(82, 82, 5, 0x0F0, 0x10, 9, 1),
+	PIN_FIELD_BASE(83, 83, 5, 0x0F0, 0x10, 19, 1),
+	PIN_FIELD_BASE(84, 84, 5, 0x0F0, 0x10, 22, 1),
+	PIN_FIELD_BASE(103, 103, 6, 0x0F0, 0x10, 24, 1),
+	PIN_FIELD_BASE(104, 104, 6, 0x0F0, 0x10, 14, 1),
+	PIN_FIELD_BASE(105, 105, 6, 0x0F0, 0x10, 27, 1),
+	PIN_FIELD_BASE(106, 106, 6, 0x0F0, 0x10, 17, 1),
+};
+
+static const struct mtk_pin_field_calc mt8183_pin_drv_e0_range[] = {
+	PIN_FIELD_BASE(48, 48, 3, 0x0F0, 0x10, 21, 1),
+	PIN_FIELD_BASE(49, 49, 3, 0x0F0, 0x10, 16, 1),
+	PIN_FIELD_BASE(50, 50, 4, 0x0F0, 0x10, 13, 1),
+	PIN_FIELD_BASE(51, 51, 4, 0x0F0, 0x10, 8, 1),
+	PIN_FIELD_BASE(81, 81, 5, 0x0F0, 0x10, 13, 1),
+	PIN_FIELD_BASE(82, 82, 5, 0x0F0, 0x10, 10, 1),
+	PIN_FIELD_BASE(83, 83, 5, 0x0F0, 0x10, 20, 1),
+	PIN_FIELD_BASE(84, 84, 5, 0x0F0, 0x10, 23, 1),
+	PIN_FIELD_BASE(103, 103, 6, 0x0F0, 0x10, 25, 1),
+	PIN_FIELD_BASE(104, 104, 6, 0x0F0, 0x10, 15, 1),
+	PIN_FIELD_BASE(105, 105, 6, 0x0F0, 0x10, 28, 1),
+	PIN_FIELD_BASE(106, 106, 6, 0x0F0, 0x10, 18, 1),
+};
+
+static const struct mtk_pin_field_calc mt8183_pin_drv_e1_range[] = {
+	PIN_FIELD_BASE(48, 48, 3, 0x0F0, 0x10, 22, 1),
+	PIN_FIELD_BASE(49, 49, 3, 0x0F0, 0x10, 17, 1),
+	PIN_FIELD_BASE(50, 50, 4, 0x0F0, 0x10, 14, 1),
+	PIN_FIELD_BASE(51, 51, 4, 0x0F0, 0x10, 9, 1),
+	PIN_FIELD_BASE(81, 81, 5, 0x0F0, 0x10, 14, 1),
+	PIN_FIELD_BASE(82, 82, 5, 0x0F0, 0x10, 11, 1),
+	PIN_FIELD_BASE(83, 83, 5, 0x0F0, 0x10, 21, 1),
+	PIN_FIELD_BASE(84, 84, 5, 0x0F0, 0x10, 24, 1),
+	PIN_FIELD_BASE(103, 103, 6, 0x0F0, 0x10, 26, 1),
+	PIN_FIELD_BASE(104, 104, 6, 0x0F0, 0x10, 16, 1),
+	PIN_FIELD_BASE(105, 105, 6, 0x0F0, 0x10, 29, 1),
+	PIN_FIELD_BASE(106, 106, 6, 0x0F0, 0x10, 19, 1),
+};
+
 static const struct mtk_pin_reg_calc mt8183_reg_cals[PINCTRL_PIN_REG_MAX] = {
 	[PINCTRL_PIN_REG_MODE] = MTK_RANGE(mt8183_pin_mode_range),
 	[PINCTRL_PIN_REG_DIR] = MTK_RANGE(mt8183_pin_dir_range),
@@ -485,6 +530,9 @@ static const struct mtk_pin_reg_calc mt8183_reg_cals[PINCTRL_PIN_REG_MAX] = {
 	[PINCTRL_PIN_REG_PUPD] = MTK_RANGE(mt8183_pin_pupd_range),
 	[PINCTRL_PIN_REG_R0] = MTK_RANGE(mt8183_pin_r0_range),
 	[PINCTRL_PIN_REG_R1] = MTK_RANGE(mt8183_pin_r1_range),
+	[PINCTRL_PIN_REG_DRV_EN_DIS] = MTK_RANGE(mt8183_pin_drv_en_dis_range),
+	[PINCTRL_PIN_REG_DRV_E0] = MTK_RANGE(mt8183_pin_drv_e0_range),
+	[PINCTRL_PIN_REG_DRV_E1] = MTK_RANGE(mt8183_pin_drv_e1_range),
 };
 
 static const char * const mt8183_pinctrl_register_base_names[] = {
@@ -517,6 +565,8 @@ static const struct mtk_pin_soc mt8183_data = {
 	.drive_get = mtk_pinconf_drive_get_rev1,
 	.adv_pull_get = mtk_pinconf_adv_pull_get,
 	.adv_pull_set = mtk_pinconf_adv_pull_set,
+	.adv_drive_get = mtk_pinconf_adv_drive_get,
+	.adv_drive_set = mtk_pinconf_adv_drive_set,
 };
 
 static const struct of_device_id mt8183_pinctrl_of_match[] = {
diff --git a/drivers/pinctrl/mediatek/pinctrl-mtk-common-v2.c b/drivers/pinctrl/mediatek/pinctrl-mtk-common-v2.c
index 4a9e0d4c2bbc..da024279ec59 100644
--- a/drivers/pinctrl/mediatek/pinctrl-mtk-common-v2.c
+++ b/drivers/pinctrl/mediatek/pinctrl-mtk-common-v2.c
@@ -668,3 +668,48 @@ int mtk_pinconf_adv_pull_get(struct mtk_pinctrl *hw,
 
 	return 0;
 }
+
+int mtk_pinconf_adv_drive_set(struct mtk_pinctrl *hw,
+			      const struct mtk_pin_desc *desc, bool enable,
+			      u32 arg)
+{
+	int err;
+
+	err = mtk_hw_set_value(hw, desc, PINCTRL_PIN_REG_DRV_E0, arg & 1);
+	if (err)
+		return 0;
+
+	err = mtk_hw_set_value(hw, desc, PINCTRL_PIN_REG_DRV_E1,
+			       !!(arg & 2));
+	if (err)
+		return 0;
+
+	arg = enable ? 1 : 0;
+
+	err = mtk_hw_set_value(hw, desc, PINCTRL_PIN_REG_DRV_EN_DIS, arg);
+
+	return err;
+}
+
+int mtk_pinconf_adv_drive_get(struct mtk_pinctrl *hw,
+			      const struct mtk_pin_desc *desc, u32 *val)
+{
+	u32 en, e0, e1;
+	int err;
+
+	err = mtk_hw_get_value(hw, desc, PINCTRL_PIN_REG_DRV_EN_DIS, &en);
+	if (err)
+		return err;
+
+	err = mtk_hw_get_value(hw, desc, PINCTRL_PIN_REG_DRV_E0, &e0);
+	if (err)
+		return err;
+
+	err = mtk_hw_get_value(hw, desc, PINCTRL_PIN_REG_DRV_E1, &e1);
+	if (err)
+		return err;
+
+	*val = (e0 | e1 << 1 | en << 2) & 0x7;
+
+	return 0;
+}
diff --git a/drivers/pinctrl/mediatek/pinctrl-mtk-common-v2.h b/drivers/pinctrl/mediatek/pinctrl-mtk-common-v2.h
index 6d24522739d9..795a3b10d54e 100644
--- a/drivers/pinctrl/mediatek/pinctrl-mtk-common-v2.h
+++ b/drivers/pinctrl/mediatek/pinctrl-mtk-common-v2.h
@@ -63,6 +63,9 @@ enum {
 	PINCTRL_PIN_REG_IES,
 	PINCTRL_PIN_REG_PULLEN,
 	PINCTRL_PIN_REG_PULLSEL,
+	PINCTRL_PIN_REG_DRV_EN_DIS,
+	PINCTRL_PIN_REG_DRV_E0,
+	PINCTRL_PIN_REG_DRV_E1,
 	PINCTRL_PIN_REG_MAX,
 };
 
@@ -224,6 +227,11 @@ struct mtk_pin_soc {
 	int (*adv_pull_get)(struct mtk_pinctrl *hw,
 			    const struct mtk_pin_desc *desc, bool pullup,
 			    u32 *val);
+	int (*adv_drive_set)(struct mtk_pinctrl *hw,
+			     const struct mtk_pin_desc *desc, bool enable,
+			     u32 arg);
+	int (*adv_drive_get)(struct mtk_pinctrl *hw,
+			     const struct mtk_pin_desc *desc, u32 *val);
 
 	/* Specific driver data */
 	void				*driver_data;
@@ -287,5 +295,10 @@ int mtk_pinconf_adv_pull_set(struct mtk_pinctrl *hw,
 int mtk_pinconf_adv_pull_get(struct mtk_pinctrl *hw,
 			     const struct mtk_pin_desc *desc, bool pullup,
 			     u32 *val);
+int mtk_pinconf_adv_drive_set(struct mtk_pinctrl *hw,
+			      const struct mtk_pin_desc *desc, bool enable,
+			     u32 arg);
+int mtk_pinconf_adv_drive_get(struct mtk_pinctrl *hw,
+			      const struct mtk_pin_desc *desc, u32 *val);
 
 #endif /* __PINCTRL_MTK_COMMON_V2_H */
diff --git a/drivers/pinctrl/mediatek/pinctrl-paris.c b/drivers/pinctrl/mediatek/pinctrl-paris.c
index d2179028f134..ef4ccaa59e55 100644
--- a/drivers/pinctrl/mediatek/pinctrl-paris.c
+++ b/drivers/pinctrl/mediatek/pinctrl-paris.c
@@ -20,12 +20,16 @@
 #define MTK_PIN_CONFIG_RDSEL	(PIN_CONFIG_END + 2)
 #define MTK_PIN_CONFIG_PU_ADV	(PIN_CONFIG_END + 3)
 #define MTK_PIN_CONFIG_PD_ADV	(PIN_CONFIG_END + 4)
+#define MTK_PIN_CONFIG_DRV_EN_ADV	(PIN_CONFIG_END + 5)
+#define MTK_PIN_CONFIG_DRV_DIS_ADV	(PIN_CONFIG_END + 6)
 
 static const struct pinconf_generic_params mtk_custom_bindings[] = {
 	{"mediatek,tdsel",	MTK_PIN_CONFIG_TDSEL,		0},
 	{"mediatek,rdsel",	MTK_PIN_CONFIG_RDSEL,		0},
 	{"mediatek,pull-up-adv", MTK_PIN_CONFIG_PU_ADV,		1},
 	{"mediatek,pull-down-adv", MTK_PIN_CONFIG_PD_ADV,	1},
+	{"mediatek,drive-enable-adv", MTK_PIN_CONFIG_DRV_EN_ADV,	2},
+	{"mediatek,drive-disable-adv", MTK_PIN_CONFIG_DRV_DIS_ADV,	2},
 };
 
 #ifdef CONFIG_DEBUG_FS
@@ -34,6 +38,8 @@ static const struct pin_config_item mtk_conf_items[] = {
 	PCONFDUMP(MTK_PIN_CONFIG_RDSEL, "rdsel", NULL, true),
 	PCONFDUMP(MTK_PIN_CONFIG_PU_ADV, "pu-adv", NULL, true),
 	PCONFDUMP(MTK_PIN_CONFIG_PD_ADV, "pd-adv", NULL, true),
+	PCONFDUMP(MTK_PIN_CONFIG_DRV_EN_ADV, "drive-enable-adv", NULL, true),
+	PCONFDUMP(MTK_PIN_CONFIG_DRV_DIS_ADV, "drive-disable-adv", NULL, true),
 };
 #endif
 
@@ -311,6 +317,20 @@ static int mtk_pinconf_set(struct pinctrl_dev *pctldev, unsigned int pin,
 			return -ENOTSUPP;
 		}
 		break;
+	case MTK_PIN_CONFIG_DRV_EN_ADV:
+	case MTK_PIN_CONFIG_DRV_DIS_ADV:
+		if (hw->soc->adv_drive_set) {
+			bool enable;
+
+			enable = param == MTK_PIN_CONFIG_DRV_EN_ADV;
+			err = hw->soc->adv_drive_set(hw, desc, enable,
+						    arg);
+			if (err)
+				return err;
+		} else {
+			return -ENOTSUPP;
+		}
+		break;
 	default:
 		err = -ENOTSUPP;
 	}
-- 
2.12.5

