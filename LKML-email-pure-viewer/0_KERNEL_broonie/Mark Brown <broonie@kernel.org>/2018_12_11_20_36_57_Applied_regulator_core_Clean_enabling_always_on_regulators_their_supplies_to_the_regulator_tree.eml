Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 12 Dec 2018 08:55:53 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga007.fm.intel.com (fmsmga007.fm.intel.com [10.253.24.52])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 01D75580380;
	Tue, 11 Dec 2018 12:37:06 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by fmsmga007-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 11 Dec 2018 12:37:06 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AFcKAWBK3Dy2JbaGiONmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgULvv8rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZXshfSTFPDYG/?=
 =?us-ascii?q?YYUBFOoBJeRVopLhq1cSsReyGRWgCP/zxjJOm3T43bc60+MkEQze2wIvBcgOsH?=
 =?us-ascii?q?fJp9joLqcSVu60zK/VxjjEdPxWwzD96I/OchAgv/6BRrFwftTLyUkpCQzFik+c?=
 =?us-ascii?q?qYv/PzOaz+kAtXWQ4eRnVeKqkWEnqgdxryCsxsgykInJgJwaylTe+SV+2oY1Kt?=
 =?us-ascii?q?u1Q1N4b968CJZcqT2WOo9sTs8/TWxkpjw2xqAFtJKnZiQHyZYqywbcZvCZaYSF?=
 =?us-ascii?q?7BDuWPyMLTp5h39pYr2yihS0/EO90OPzTNO030xPriddktnDqHQN1xvL58iZRf?=
 =?us-ascii?q?ty4F2h1SyM1w/N8OFEJ147la7BJ54m2L4wmYIfsUXFHiDohEX7lLGaelkg9+Sy?=
 =?us-ascii?q?9ujqbKvqqoWBO4J3lg3yKKUjl86nDeQ9KAcOXmyb+eqm1L3k+E30WLFKjvwwkq?=
 =?us-ascii?q?nEv5HWPMcbqbCjAw9TzIkj7w+zDzCo0dQeg3YHNklIeAyIj4f3IVHCOvP4Auml?=
 =?us-ascii?q?g1Sqjjhrw+rKPrr7ApXCNnTDiqvufa5h605Azwo+1dRf55NXCr4fOv7yVVLxuc?=
 =?us-ascii?q?fcDh84NQy03unmBM981oMYRWKAHKuZPLnOvl+P4+IlO/OMa5MNuDbhN/gl4Obj?=
 =?us-ascii?q?jX8jll8cYammx5wXZGq4HvR7OUqZZ3Xsj8wFEWcLuAo+UePrhEeDUT5Ve3a9Qa?=
 =?us-ascii?q?Y86isnB4KhCIfJXpqtj6CZ3CenAp1WYXhLClKLEXj2bYmEWPAMaCSUIs9miTEE?=
 =?us-ascii?q?UbmhS4k81RChrgP6yrxnLvbK9S0cr57syN915+jLnxEo6TN0F9id032KT2xshG?=
 =?us-ascii?q?wIXD823Kd8oUBn0FeMy6p4judcFdxS4fNJTwg7OYTdz+x8F9D9RAbBcs2VR1ah?=
 =?us-ascii?q?R9WsGSsxQc4pw98Sf0Z9HM2vjhPZ0CqsGbMVk72LC4Yy8qLTxHXxI8d9y3Db1K?=
 =?us-ascii?q?gulVUmQ81PNXG4ia577QTcG4nJk0CBnaawaascxDLN9HuEzWeWoU5XShBwXrvf?=
 =?us-ascii?q?UXAffETWq8/56V3ET7OpDbQnMQ5BycqZJ6tOa93pi0hGRfj5NNTfZWKxh3m/BR?=
 =?us-ascii?q?KSyryQa4rqfn0X3D/BB0gcjwAT4XGGOBAjCSi7vWLREiZiFVL1bEPq6ulxtnW7?=
 =?us-ascii?q?Q1QwzwGLaU1hyrW09gQUhfyaV/McwLYEtD09pDVzGVa3x8jWBMaYpwp9YKVcZs?=
 =?us-ascii?q?sw4EtG1WLcsAx9IpygLqB4il4CaQh3uFnu1xF2CoVGnsgnt3cqzAt0KaKF31JN?=
 =?us-ascii?q?bTKY3ZbsOrLJLmn+5gyga6nT2lvGytaZ5r8P6Ogkq1XkpAymDE4i/Gto0tZL03?=
 =?us-ascii?q?qQ/I7FDBcPXp3rVEY39B96p6/Bbyk55oPU02BsMKauvj/D3dIpGPUqyhK6c9hD?=
 =?us-ascii?q?N6OEERf4E9cGCMi2NOwqh1+pYwoEPeBP7qI7I9mqdvqG2KGxOuZgkymrjWBG4I?=
 =?us-ascii?q?B7z0KN+DBwSu/O35YZ3f6Y2hGLWCv7jFekqsr3g5xLZSkOHmqjzijpHJRRZqxu?=
 =?us-ascii?q?cokRE2ehPsq3ys94h5HzQX5Y9UevCE8c18+tZBWdcUb93QpW1UkMpXynmC24zy?=
 =?us-ascii?q?F7kj0zr6qf2jDOzPrmdBYdJmFLQ2xih0/2IYeol9AaQFSobw8xmRql5Eb23aha?=
 =?us-ascii?q?qL5kL2nOR0dFZCz2L2BkUqutubuOec9P6JU0sSpJVOSwe0yVSrn4oxECySPsA3?=
 =?us-ascii?q?NexCwndzGtopj5nQZ1iHieLHZwq3rVY9pwyg3c5NzfRP5R2CQJRC9jhDnTB1i8?=
 =?us-ascii?q?OcSp/NqOm5fCtOC+S3yuVplJfSb3yoOAsTOx5Xd2Dh2ng/CzhtrnHBA60CDh0N?=
 =?us-ascii?q?lmTyfIrBf6YoTw06S6MORnflRnBVPm6sp6HJ1+nZU0hJ0KxXcagZCV92IdkWjv?=
 =?us-ascii?q?KdVbxb7+bH0VSD4I2dHV4RLp2E1+Ln2TwYL5WW6Qws9gZ9m8f2MX1Tgx78FMCK?=
 =?us-ascii?q?eI8rNEmTF5rUa/rQLUefJ9hCsSyeMy6H4GhOEEoA8tziSeAr8IB0VZMzLjlw+U?=
 =?us-ascii?q?79+gtqVYf3igcaK/1EdlmdChDbeCohxTWXrje5ciGzNw4dt7MF7WzHLz7YTkcs?=
 =?us-ascii?q?HKbd0Prh2UjwvAj+9NJZItkfoKgDBrOGPnsn0j1u47lgdu3ZChsYiDKmVt+r+5?=
 =?us-ascii?q?AxFCOj30YcMT5i/ijaJEksmK2ICvG41rGi8XU5vwUfKoDDUSuOz8OAmUFz08rm?=
 =?us-ascii?q?qbFaDbHQ+C80pmq3PPE5a2N3CYPnUZzNNiRAWDK0xbmgwbQDI6npshHACw2MPh?=
 =?us-ascii?q?aFt55iwW5lPgqBtD0OdoOAfkUmvFuAekcDQ0SIWcLBpL6AFN/VzVPNea7uJyGS?=
 =?us-ascii?q?FY45KgoBaMKmydewRHE2UJVlaYCFDkO7mk/cPA/PSABuqiM/vOZq2DqOxZV/eV?=
 =?us-ascii?q?3JKvz5Fp/zCWOsWUOXliCfI711FHXXB4HcTZhjoORzYWlyLLc86UuhO89jdroc?=
 =?us-ascii?q?C49fThQBjv6peXC7tOLdVv/Ai7gaedOO6RhyZ5KjdY2okPxX/Sz7gf00Adiztz?=
 =?us-ascii?q?dzm2CrkAsS/NTKTNmq5YFRIbaiVzNNdW4KI4xAVCJcnbitbt3L5ikvE1E0tFVU?=
 =?us-ascii?q?Dmmsyxf8MKPnqyNEnZC0eLLriGITzLztrzYaO9T71QkepVuwexuTadD0/sIDCD?=
 =?us-ascii?q?myP1WBCoNOFGlDubMwBGuIGhbhZtDnDuTM7nah2+KtN4kSc6zqE0hnzUM24RKj?=
 =?us-ascii?q?x8c0JLrr2N4iJUmPR/G2pd7nV7KemIgTqW7+7dKpwOq/tkHjx0l/5G4HQ907ZU?=
 =?us-ascii?q?7DtLRPpwmCvTqN5hu1CnkumVxTphXxpDsTJLhIONvUV/NqTV7JhAWXDY/B0T6W?=
 =?us-ascii?q?WcEQgFp9xgCo6nh6cF5t/Sm6b6M39r9d7Z59AbAYCAJMOONnYsKwHBEz7OCw4E?=
 =?us-ascii?q?UDvtMnvQ0R9zivaXo1ictJtygILrh5xGHrVBU1szF/4yCUl/GtEGZpBtUWV3wv?=
 =?us-ascii?q?agkMcU6C/m/1HqT8JAs8WCD6rKDA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AYAADEHhBch0O0hNFlHgEGBwaBUQkLA?=
 =?us-ascii?q?YJpgQInjHOLMlABAQaBSYkNjjGBcywLCAGHLiI0CQ0BAwEBAQEBAQIBEwEBAQg?=
 =?us-ascii?q?NCQgpIwyCNiQBgmEBAwMBAiQZAQE3AQUJAhgDAwECChMHCwMMHSMIBhMFgxwBg?=
 =?us-ascii?q?XQNBAEKpQqBbDOCdgEBBYcrAwWHEoE9g2wXeIEHgRGGF4FcAQGDU4ImiRkah1y?=
 =?us-ascii?q?PbgmHCYo9I4FchRcFgySHJId5hh2MY4IOMxoIKAiDJ4IbDBcSiEyCZoJZQDIBg?=
 =?us-ascii?q?QQBAYglgj4BAQ?=
X-IPAS-Result: =?us-ascii?q?A0AYAADEHhBch0O0hNFlHgEGBwaBUQkLAYJpgQInjHOLMlA?=
 =?us-ascii?q?BAQaBSYkNjjGBcywLCAGHLiI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBg?=
 =?us-ascii?q?mEBAwMBAiQZAQE3AQUJAhgDAwECChMHCwMMHSMIBhMFgxwBgXQNBAEKpQqBbDO?=
 =?us-ascii?q?CdgEBBYcrAwWHEoE9g2wXeIEHgRGGF4FcAQGDU4ImiRkah1yPbgmHCYo9I4Fch?=
 =?us-ascii?q?RcFgySHJId5hh2MY4IOMxoIKAiDJ4IbDBcSiEyCZoJZQDIBgQQBAYglgj4BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,343,1539673200"; 
   d="scan'208";a="55489576"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 11 Dec 2018 12:37:05 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726357AbeLKUhC (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 11 Dec 2018 15:37:02 -0500
Received: from heliosphere.sirena.org.uk ([172.104.155.198]:50720 "EHLO
        heliosphere.sirena.org.uk" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726288AbeLKUhB (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 11 Dec 2018 15:37:01 -0500
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
        d=sirena.org.uk; s=20170815-heliosphere; h=Date:Message-Id:In-Reply-To:
        Subject:Cc:To:From:Sender:Reply-To:MIME-Version:Content-Type:
        Content-Transfer-Encoding:Content-ID:Content-Description:Resent-Date:
        Resent-From:Resent-Sender:Resent-To:Resent-Cc:Resent-Message-ID:References:
        List-Id:List-Help:List-Unsubscribe:List-Subscribe:List-Post:List-Owner:
        List-Archive; bh=m/U5FBlYCmgY5VOQOXdGknlWVEVfGSSh/ycPSPRipfM=; b=rkuwNxf810hp
        wt/8sQ1dfZVrdvMmcUI5Jolc20oK841ulv2CEEOirdUcVlOookXzpg6qlMDd1RPoomaiNmQBL0z0X
        Os4aKnmaad9PTL7tnVZ1fYenl04/n+maB/IC+TThC2Y4mTH1wc4FCF6IyqsxPXgLETpxlklZ0caXO
        bY/6Q=;
Received: from cpc102320-sgyl38-2-0-cust46.18-2.cable.virginm.net ([82.37.168.47] helo=debutante.sirena.org.uk)
        by heliosphere.sirena.org.uk with esmtpa (Exim 4.89)
        (envelope-from <broonie@sirena.org.uk>)
        id 1gWom2-0001ez-GE; Tue, 11 Dec 2018 20:36:58 +0000
Received: by debutante.sirena.org.uk (Postfix, from userid 1000)
        id C79B7112540E; Tue, 11 Dec 2018 20:36:57 +0000 (GMT)
From: Mark Brown <broonie@kernel.org>
To: Douglas Anderson <dianders@chromium.org>
Cc: Evan Green <evgreen@chromium.org>,
        Brian Masney <masneyb@onstation.org>,
        Mark Brown <broonie@kernel.org>, linux-kernel@vger.kernel.org
Subject: Applied "regulator: core: Clean enabling always-on regulators + their supplies" to the regulator tree
In-Reply-To: 
X-Patchwork-Hint: ignore
Message-Id: <20181211203657.C79B7112540E@debutante.sirena.org.uk>
Date: Tue, 11 Dec 2018 20:36:57 +0000 (GMT)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The patch

   regulator: core: Clean enabling always-on regulators + their supplies

has been applied to the regulator tree at

   https://git.kernel.org/pub/scm/linux/kernel/git/broonie/regulator.git 

All being well this means that it will be integrated into the linux-next
tree (usually sometime in the next 24 hours) and sent to Linus during
the next merge window (or sooner if it is a bug fix), however if
problems are discovered then the patch may be dropped or reverted.  

You may get further e-mails resulting from automated or manual testing
and review of the tree, please engage with people reporting problems and
send followup patches addressing any issues that are reported if needed.

If any updates are required or you are submitting further changes they
should be sent as incremental updates against current git, existing
patches will not be replaced.

Please add any relevant lists and maintainers to the CCs when replying
to this mail.

Thanks,
Mark

From 4c9ed27f79fe4fb46db42dd0c6e69328371f2f3d Mon Sep 17 00:00:00 2001
From: Douglas Anderson <dianders@chromium.org>
Date: Tue, 11 Dec 2018 08:17:19 -0800
Subject: [PATCH] regulator: core: Clean enabling always-on regulators + their
 supplies

At the end of regulator_resolve_supply() we have historically turned
on our supply in some cases.  This could be for one of two reasons:

1. If resolving supplies was happening before the call to
   set_machine_constraints() we needed to predict if
   set_machine_constraints() was going to turn the regulator on and we
   needed to preemptively turn the supply on.
2. Maybe set_machine_constraints() happened before we could resolve
   supplies (because we failed the first time to resolve) and thus we
   might need to propagate an enable that already happened up to our
   supply.

Historically regulator_resolve_supply() used _regulator_is_enabled()
to decide whether to turn on the supply.

Let's change things a little bit.  Specifically:

1. Let's try to enable the supply and the regulator in the same place,
   both in set_machine_constraints().  This means that we have exactly
   the same logic for enabling the supply and the regulator.
2. Let's properly set use_count when we enable always-on or boot-on
   regulators even for those that don't have supplies.  The previous
   commit 1fc12b05895e ("regulator: core: Avoid propagating to
   supplies when possible") only did this right for regulators with
   supplies.
3. Let's make it clear that the only time we need to enable the supply
   in regulator_resolve_supply() is if the main regulator is currently
   in use.  By using use_count (like the rest of the code) to decide
   if we're going to enable our supply we keep everything consistent.

Overall the new scheme should be cleaner and easier to reason about.
In addition to fixing regulator_summary to be more correct (because of
the more correct use_count), this change also has the effect of no
longer using _regulator_is_enabled() in this code path.
_regulator_is_enabled() could return an error code for some regulators
at bootup (like RPMh) that can't read their initial state.  While one
can argue that the design of those regulators is sub-optimal, the new
logic sidesteps this brokenness.  This fix in particular fixes
observed problems on Qualcomm sdm845 boards which use the
above-mentioned RPMh regulator.  Those problems were made worse by
commit 1fc12b05895e ("regulator: core: Avoid propagating to supplies
when possible") because now we'd think at bootup that the SD
regulators were already enabled and we'd never try them again.

Fixes: 1fc12b05895e ("regulator: core: Avoid propagating to supplies when possible")
Reported-by: Evan Green <evgreen@chromium.org>
Signed-off-by: Douglas Anderson <dianders@chromium.org>
Tested-by: Brian Masney <masneyb@onstation.org>
Signed-off-by: Mark Brown <broonie@kernel.org>
---
 drivers/regulator/core.c | 19 ++++++++++++++++---
 1 file changed, 16 insertions(+), 3 deletions(-)

diff --git a/drivers/regulator/core.c b/drivers/regulator/core.c
index 4981ed71686d..925fa0f5d7cb 100644
--- a/drivers/regulator/core.c
+++ b/drivers/regulator/core.c
@@ -1356,11 +1356,21 @@ static int set_machine_constraints(struct regulator_dev *rdev,
 	 * and we have control then make sure it is enabled.
 	 */
 	if (rdev->constraints->always_on || rdev->constraints->boot_on) {
+		if (rdev->supply) {
+			ret = regulator_enable(rdev->supply);
+			if (ret < 0) {
+				_regulator_put(rdev->supply);
+				rdev->supply = NULL;
+				return ret;
+			}
+		}
+
 		ret = _regulator_do_enable(rdev);
 		if (ret < 0 && ret != -EINVAL) {
 			rdev_err(rdev, "failed to enable\n");
 			return ret;
 		}
+		rdev->use_count++;
 	}
 
 	if ((rdev->constraints->ramp_delay || rdev->constraints->ramp_disable)
@@ -1822,15 +1832,18 @@ static int regulator_resolve_supply(struct regulator_dev *rdev)
 		return ret;
 	}
 
-	/* Cascade always-on state to supply */
-	if (_regulator_is_enabled(rdev)) {
+	/*
+	 * In set_machine_constraints() we may have turned this regulator on
+	 * but we couldn't propagate to the supply if it hadn't been resolved
+	 * yet.  Do it now.
+	 */
+	if (rdev->use_count) {
 		ret = regulator_enable(rdev->supply);
 		if (ret < 0) {
 			_regulator_put(rdev->supply);
 			rdev->supply = NULL;
 			return ret;
 		}
-		rdev->use_count = 1;
 	}
 
 	return 0;
-- 
2.19.0.rc2

