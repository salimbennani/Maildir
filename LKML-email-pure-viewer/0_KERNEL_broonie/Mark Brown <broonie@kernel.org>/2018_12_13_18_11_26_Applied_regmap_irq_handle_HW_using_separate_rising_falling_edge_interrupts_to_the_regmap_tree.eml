Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  14 Dec 2018 08:40:16 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 7A56758079D;
	Thu, 13 Dec 2018 10:11:34 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga001-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 13 Dec 2018 10:11:33 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AqKs11hEpgra/V7y2NgJu5J1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75o8S+bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJVyJPHJ6y?=
 =?us-ascii?q?YIkMAeQPJuZYt4vwqkASoReiGQWgGP/jxiNUinLwwKY00/4hEQbD3AE4GNwBqm?=
 =?us-ascii?q?7UrNboP6oPS+C1y6fJzTPeZP5Rwjj98o/IchcnofGNQ719asnRxlc1FwPDkFqQ?=
 =?us-ascii?q?rZbpPzSP1uQCqmWW6fdrW+yoi24isQ5xoz6vy98viobXnIIVzE7L9SFjzIYyP9?=
 =?us-ascii?q?24R0h2asOnHptIryyWKZd6T8c4T211tis21KcKtYO4cSQW0pgqxhzSZ+SEfoSW?=
 =?us-ascii?q?+B7uWuScLS1liH9ke7+znRm//Eqmx+bhTMe7ykxKoTBAktTUtnACyRjT6s+fR/?=
 =?us-ascii?q?tj8UeuxyyP2xrQ6u5aO0A0k7TUK5o7zr43jJoTvlzPHi7wmErokK+bblso9vSs?=
 =?us-ascii?q?5uj9f7nrqIGQO5Vphgz9LqgigM2yDOYgPggLRWeb+OC81LP5/U3+RbVHlvk2kq?=
 =?us-ascii?q?jfsJDHKsUXv625DBFP0oYl9Rm/Cy6q0NMWnHkBMl1FYgmKj5bmO17QOvD0F/S/?=
 =?us-ascii?q?jEq2kDdt2f/GOqftApLXLnjMiLvhZ6py61ZAyAovytBS/5ZUCrACIP3tQEPwu8?=
 =?us-ascii?q?HYAwQ9Mwy1xebnFdp82pkfWWKJHq+WLqfSvUWU6eIoJumGfJUVtyrlK/g5+/7u?=
 =?us-ascii?q?imc0mV8HcqmowZsYcne4Eu5mI0WEe3XshNgBHHwOvgo/SuzqlVKDXSRSZ3a0Q6?=
 =?us-ascii?q?Iz+DU7BJi6AofEQ4CnmKaB0zujHp1KemBGDUiBEXXvd4qaQfsMayWSIslnkjwD?=
 =?us-ascii?q?TrWhT44h1ReztA710bZnL+zU+jEGupLnztR6++rTlRQq/zxuE8udy32NT31znm?=
 =?us-ascii?q?4QXTA2x6B/oUt+yluZy6h3mf5YGMdX5/NIVAc6KJHdw/Z7C9D0RgLOYNOJREy6?=
 =?us-ascii?q?TdWhBDE7VsgxzMMWY0ZhB9WiiQjO3ymwDL8TjbCLAJ00/bja33j+PMt9z3fG1K?=
 =?us-ascii?q?88j1gpWMdPNGumhrJh+AjXHYLGj0KZl6Oyf6QGwCHN7HuDzXaJvExATQF/S7vF?=
 =?us-ascii?q?Um4FakvWt9v54FjCQKGoCbggNgtBysuCKq9RZ93tjFVGQurjOdvEb2KwnWewGQ?=
 =?us-ascii?q?iHxreWYIX2fGUd2T3XCFIYnAAL4XaGKQ8+Cz+8rG3EEjxhC0jjY0P2/ul4s3O0?=
 =?us-ascii?q?UEk0whqOb01g0bq15xEUieadS/MVwrILpiMhpy9oE1a62tLcE8CAqBZ5fKVAfd?=
 =?us-ascii?q?M9509K1X7Ytwx4OZygM6Bih14EfwRrpU/u0A93CoFBkcgso3Mn1w5yKaOe0FNc?=
 =?us-ascii?q?eDKUx5HwOrvLKmbs+BCjcbLZ2lbb0NyO4KcA9Ow4q0n/vAGuDkct6XFn3Mda0n?=
 =?us-ascii?q?SC5pTGFhEdUY/sXUkt8Rh6pLbaYjcm6oPQ1H1sN7S0szDY19IoAusl1givf9NF?=
 =?us-ascii?q?PKyYEw/yFtUQB9KyJ+wyh1ipchUEMfhS9a4pJc+pa+GK2a+rPOl6mjKmgn9K4I?=
 =?us-ascii?q?R80kKK6ip9RfTE35cDw/GEwASHUy3wg0umssDygYpEfy0dHnKjySj4A45cfrdy?=
 =?us-ascii?q?fYcXBmi0Oc2429J+i4TrW3FG7l6jBkoK19OzdhqWclPywxdQ1UMRoXG8nSu4zj?=
 =?us-ascii?q?p0kywmr6aF3SzOxfjiewQDOmJRWGZiilLsK5Cuj98GREiocxQplBy96Ef6xqhX?=
 =?us-ascii?q?vqR+I3PIQUdVeSj7NGViUqq2trqfbM9D8pIosSNLUOuiZVCWUKLyoxwf0yn7BW?=
 =?us-ascii?q?tR2Cg7dy22upX+hxF6iniSLGxwrHrafsF83wzf68bfRf5S3zoGQjd3iT/MC1i4?=
 =?us-ascii?q?Ptmp+8iUlpjZvuC/UWKhSoNccS3xwYycsyu74HVgAQejkPCrht3nDQ863Df71t?=
 =?us-ascii?q?ZwUiXEthT8Yojt16mhNeJnf09oBELz6sZgG4F+lJcwi48U2XQAmpqV+n8Hm3/p?=
 =?us-ascii?q?MdpHwaL+cGYNRTkTzt7W+gfl2VdvLnKUx43jUHWdzdBsZ927YmMQxyI84NpGCK?=
 =?us-ascii?q?aS7LxYgyR1pkC0oh7WYfh4hj0d0+ch6GYGg+EVvwog1iCdArERHUZCJyDtmQqH?=
 =?us-ascii?q?78uirKpJfmagaqa/1FBxnd26CLGCowdcWGv2e5s4HC9w6Nl/P0zI0HHp9o7kf9?=
 =?us-ascii?q?zQZ8oJthKIixfAk/RVKJUpm/oWgipnPHjxvHw/xO49kBxuxoq6vImcJmVp/aK5?=
 =?us-ascii?q?BANYNzLva8MS/DHtkbhRnsKM04+zGZVhHy0BXIH0QvKwDDISqfPnOh6VHzImrX?=
 =?us-ascii?q?ebHaffERWb6Ed7tH/PF5GrN3eKJHgW19liRR+dJFBBjwAQRjk1gpk5FgWyzsz7?=
 =?us-ascii?q?bEh5/iwR5kL/qhZUyOJnLRz/XXnEpAuydjc4UpufLAdV7gFf4UfaK9ee4/l3Hy?=
 =?us-ascii?q?FZ+J2hsQOMJnaaZwROEWEGREiEC0r/Mbmp4NnK6/KYCfamL/vSfbWOrvRTVveP?=
 =?us-ascii?q?xZKyy4tm4iyDNsOVMnl5CP073EVDUGt9G8TYnTUPViMWmzjMb86duBez5Cl3ot?=
 =?us-ascii?q?qj//TsXQLl/ZGPBKdKMdVz5xC2hr+ON+6OiyZ4KjZY1ZIMyWXLyLgF214ShD9h?=
 =?us-ascii?q?dyOwEbQbriPNSKPQmqlKDx8UcS9zNc1I774i0QlJI8LUltT11rtghP4vF1hFTU?=
 =?us-ascii?q?Dhmt2uZcESOW69KUjIBFyVO7WGPzHLx8D3bLi4Sb1RiuVUqhKxtSyaE0/lIjSM?=
 =?us-ascii?q?iT3pWwqzPuFLiSGRJAZet52lchZxFWjjS8rragG6MN9ylzE53ac4iW/KNWECNz?=
 =?us-ascii?q?hxaEdNrryW7SNFjfRzAW1B7nx5LeaanyaV9fXXKpETsfFzGCR7i/pa4Ggmy7tS?=
 =?us-ascii?q?9CxFROZ6mC3Xrt5vpVGpiuiOyjp9XxpIpTZGn4aLvURkOaXE+ZhMQ3fE/BQR7W?=
 =?us-ascii?q?qODxQGvcdqCtrqu/MY9t+avqvpNDBZ4Zr7+s8VHNrZN9mEMTJ1OxXuHDfPHgYa?=
 =?us-ascii?q?Vj2qHWvWlkhcmuufsHaSq85phILrnc8rQ6VYHHYvEewcQhBvBtsFJpZ6djApi7?=
 =?us-ascii?q?iWiIgP/3Xo/0qZf9lTop2SDqHaOv7oMjvMyOAcPxY=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BsAgCYnxJch0O0hNFOFh0CHwUHgU0Cg?=
 =?us-ascii?q?miBAieMdIs0UAEBBoFJiQ2OM4FzLAsIAYdFIjQJDQEDAQEBAQEBAgETAQEBCA0?=
 =?us-ascii?q?JCCkjDII2JAGCYQEDAwECJBkBATcBBQkCGAMDAQIKCgkSAwwdIwgGEwWDHAGBc?=
 =?us-ascii?q?w0EAQqnU4FsM4J2AQEFhy8DBYw8F3iBB4cogTYDIwEBg1OCJok3BgSHV495CYc?=
 =?us-ascii?q?NikEjgVyFHAWKTYozg3GMa4IOMxoIKAiDJ4InFxKITIJmgllAMgGBBAEBigSCP?=
 =?us-ascii?q?gEB?=
X-IPAS-Result: =?us-ascii?q?A0BsAgCYnxJch0O0hNFOFh0CHwUHgU0CgmiBAieMdIs0UAE?=
 =?us-ascii?q?BBoFJiQ2OM4FzLAsIAYdFIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2JAGCY?=
 =?us-ascii?q?QEDAwECJBkBATcBBQkCGAMDAQIKCgkSAwwdIwgGEwWDHAGBcw0EAQqnU4FsM4J?=
 =?us-ascii?q?2AQEFhy8DBYw8F3iBB4cogTYDIwEBg1OCJok3BgSHV495CYcNikEjgVyFHAWKT?=
 =?us-ascii?q?Yozg3GMa4IOMxoIKAiDJ4InFxKITIJmgllAMgGBBAEBigSCPgEB?=
X-IronPort-AV: E=Sophos;i="5.56,349,1539673200"; 
   d="scan'208";a="55799388"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 13 Dec 2018 10:11:32 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729579AbeLMSL3 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 13 Dec 2018 13:11:29 -0500
Received: from heliosphere.sirena.org.uk ([172.104.155.198]:37194 "EHLO
        heliosphere.sirena.org.uk" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727659AbeLMSL3 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 13 Dec 2018 13:11:29 -0500
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
        d=sirena.org.uk; s=20170815-heliosphere; h=Date:Message-Id:In-Reply-To:
        Subject:Cc:To:From:Sender:Reply-To:MIME-Version:Content-Type:
        Content-Transfer-Encoding:Content-ID:Content-Description:Resent-Date:
        Resent-From:Resent-Sender:Resent-To:Resent-Cc:Resent-Message-ID:References:
        List-Id:List-Help:List-Unsubscribe:List-Subscribe:List-Post:List-Owner:
        List-Archive; bh=xb4olY8YyV0MlBUgRpCusoCTHfpyzp71vb60Z5ZQD2c=; b=mn2HMH7c2fV+
        wqkoCmR5AhAMSwEy7w9s35f/Qzf7lEnH1kjtnNef7TRr/t0dHkjCEiTU/eD1PWnP0X53qOtt5+KbM
        fic7OAcs0VR6wOs4/Y0RmTecpN/nV9WkcR3FOgoMuI6xuudRywhlGuhKysHP2fMrdfXAUp0x6aSjL
        j7Kzs=;
Received: from cpc102320-sgyl38-2-0-cust46.18-2.cable.virginm.net ([82.37.168.47] helo=debutante.sirena.org.uk)
        by heliosphere.sirena.org.uk with esmtpa (Exim 4.89)
        (envelope-from <broonie@sirena.org.uk>)
        id 1gXVSI-0002Qg-Et; Thu, 13 Dec 2018 18:11:26 +0000
Received: by debutante.sirena.org.uk (Postfix, from userid 1000)
        id 2E02711254D1; Thu, 13 Dec 2018 18:11:26 +0000 (GMT)
From: Mark Brown <broonie@kernel.org>
To: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Cc: Mark Brown <broonie@kernel.org>, linux-kernel@vger.kernel.org
Subject: Applied "regmap: irq: handle HW using separate rising/falling edge interrupts" to the regmap tree
In-Reply-To: 
X-Patchwork-Hint: ignore
Message-Id: <20181213181126.2E02711254D1@debutante.sirena.org.uk>
Date: Thu, 13 Dec 2018 18:11:26 +0000 (GMT)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The patch

   regmap: irq: handle HW using separate rising/falling edge interrupts

has been applied to the regmap tree at

   https://git.kernel.org/pub/scm/linux/kernel/git/broonie/regmap.git 

All being well this means that it will be integrated into the linux-next
tree (usually sometime in the next 24 hours) and sent to Linus during
the next merge window (or sooner if it is a bug fix), however if
problems are discovered then the patch may be dropped or reverted.  

You may get further e-mails resulting from automated or manual testing
and review of the tree, please engage with people reporting problems and
send followup patches addressing any issues that are reported if needed.

If any updates are required or you are submitting further changes they
should be sent as incremental updates against current git, existing
patches will not be replaced.

Please add any relevant lists and maintainers to the CCs when replying
to this mail.

Thanks,
Mark

From bc998a730367a69a1449320d321187d7414668fa Mon Sep 17 00:00:00 2001
From: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date: Fri, 7 Dec 2018 14:04:52 +0100
Subject: [PATCH] regmap: irq: handle HW using separate rising/falling edge
 interrupts

Some interrupt controllers use separate bits for controlling rising
and falling edge interrupts in the mask register i.e. they have one
interrupt for rising edge and one for falling.

We already handle the case where we have a single interrupt in the
mask register and a separate type configuration register.

Add a new switch to regmap_irq_chip which tells the framework to use
the mask_base address for configuring the edge of the interrupts that
define type_falling/rising_mask values.

For such interrupts we never update the type_base bits. For interrupts
that don't define type masks or their regmap irq chip doesn't set the
type_in_mask to true everything stays the same.

Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Signed-off-by: Mark Brown <broonie@kernel.org>
---
 drivers/base/regmap/regmap-irq.c | 64 ++++++++++++++++++++++----------
 include/linux/regmap.h           |  4 ++
 2 files changed, 48 insertions(+), 20 deletions(-)

diff --git a/drivers/base/regmap/regmap-irq.c b/drivers/base/regmap/regmap-irq.c
index 429ca8ed7e51..603b1554f81c 100644
--- a/drivers/base/regmap/regmap-irq.c
+++ b/drivers/base/regmap/regmap-irq.c
@@ -157,20 +157,23 @@ static void regmap_irq_sync_unlock(struct irq_data *data)
 		}
 	}
 
-	for (i = 0; i < d->chip->num_type_reg; i++) {
-		if (!d->type_buf_def[i])
-			continue;
-		reg = d->chip->type_base +
-			(i * map->reg_stride * d->type_reg_stride);
-		if (d->chip->type_invert)
-			ret = regmap_irq_update_bits(d, reg,
-				d->type_buf_def[i], ~d->type_buf[i]);
-		else
-			ret = regmap_irq_update_bits(d, reg,
-				d->type_buf_def[i], d->type_buf[i]);
-		if (ret != 0)
-			dev_err(d->map->dev, "Failed to sync type in %x\n",
-				reg);
+	/* Don't update the type bits if we're using mask bits for irq type. */
+	if (!d->chip->type_in_mask) {
+		for (i = 0; i < d->chip->num_type_reg; i++) {
+			if (!d->type_buf_def[i])
+				continue;
+			reg = d->chip->type_base +
+				(i * map->reg_stride * d->type_reg_stride);
+			if (d->chip->type_invert)
+				ret = regmap_irq_update_bits(d, reg,
+					d->type_buf_def[i], ~d->type_buf[i]);
+			else
+				ret = regmap_irq_update_bits(d, reg,
+					d->type_buf_def[i], d->type_buf[i]);
+			if (ret != 0)
+				dev_err(d->map->dev, "Failed to sync type in %x\n",
+					reg);
+		}
 	}
 
 	if (d->chip->runtime_pm)
@@ -194,8 +197,27 @@ static void regmap_irq_enable(struct irq_data *data)
 	struct regmap_irq_chip_data *d = irq_data_get_irq_chip_data(data);
 	struct regmap *map = d->map;
 	const struct regmap_irq *irq_data = irq_to_regmap_irq(d, data->hwirq);
+	unsigned int mask, type;
+
+	type = irq_data->type_falling_mask | irq_data->type_rising_mask;
+
+	/*
+	 * The type_in_mask flag means that the underlying hardware uses
+	 * separate mask bits for rising and falling edge interrupts, but
+	 * we want to make them into a single virtual interrupt with
+	 * configurable edge.
+	 *
+	 * If the interrupt we're enabling defines the falling or rising
+	 * masks then instead of using the regular mask bits for this
+	 * interrupt, use the value previously written to the type buffer
+	 * at the corresponding offset in regmap_irq_set_type().
+	 */
+	if (d->chip->type_in_mask && type)
+		mask = d->type_buf[irq_data->reg_offset / map->reg_stride];
+	else
+		mask = irq_data->mask;
 
-	d->mask_buf[irq_data->reg_offset / map->reg_stride] &= ~irq_data->mask;
+	d->mask_buf[irq_data->reg_offset / map->reg_stride] &= ~mask;
 }
 
 static void regmap_irq_disable(struct irq_data *data)
@@ -430,6 +452,7 @@ int regmap_add_irq_chip(struct regmap *map, int irq, int irq_flags,
 	struct regmap_irq_chip_data *d;
 	int i;
 	int ret = -ENOMEM;
+	int num_type_reg;
 	u32 reg;
 	u32 unmask_offset;
 
@@ -479,13 +502,14 @@ int regmap_add_irq_chip(struct regmap *map, int irq, int irq_flags,
 			goto err_alloc;
 	}
 
-	if (chip->num_type_reg) {
-		d->type_buf_def = kcalloc(chip->num_type_reg,
-					sizeof(unsigned int), GFP_KERNEL);
+	num_type_reg = chip->type_in_mask ? chip->num_regs : chip->num_type_reg;
+	if (num_type_reg) {
+		d->type_buf_def = kcalloc(num_type_reg,
+					  sizeof(unsigned int), GFP_KERNEL);
 		if (!d->type_buf_def)
 			goto err_alloc;
 
-		d->type_buf = kcalloc(chip->num_type_reg, sizeof(unsigned int),
+		d->type_buf = kcalloc(num_type_reg, sizeof(unsigned int),
 				      GFP_KERNEL);
 		if (!d->type_buf)
 			goto err_alloc;
@@ -600,7 +624,7 @@ int regmap_add_irq_chip(struct regmap *map, int irq, int irq_flags,
 		}
 	}
 
-	if (chip->num_type_reg) {
+	if (chip->num_type_reg && !chip->type_in_mask) {
 		for (i = 0; i < chip->num_irqs; i++) {
 			reg = chip->irqs[i].type_reg_offset / map->reg_stride;
 			d->type_buf_def[reg] |= chip->irqs[i].type_rising_mask |
diff --git a/include/linux/regmap.h b/include/linux/regmap.h
index 3930f3331652..c54c778f3051 100644
--- a/include/linux/regmap.h
+++ b/include/linux/regmap.h
@@ -1137,6 +1137,9 @@ struct regmap_irq {
  * @ack_invert:  Inverted ack register: cleared bits for ack.
  * @wake_invert: Inverted wake register: cleared bits are wake enabled.
  * @type_invert: Invert the type flags.
+ * @type_in_mask: Use the mask registers for controlling irq type. For
+ *                interrupts defining type_rising/falling_mask use mask_base
+ *                for edge configuration and never update bits in type_base.
  * @runtime_pm:  Hold a runtime PM lock on the device when accessing it.
  *
  * @num_regs:    Number of registers in each control bank.
@@ -1175,6 +1178,7 @@ struct regmap_irq_chip {
 	bool wake_invert:1;
 	bool runtime_pm:1;
 	bool type_invert:1;
+	bool type_in_mask:1;
 
 	int num_regs;
 
-- 
2.19.0.rc2

