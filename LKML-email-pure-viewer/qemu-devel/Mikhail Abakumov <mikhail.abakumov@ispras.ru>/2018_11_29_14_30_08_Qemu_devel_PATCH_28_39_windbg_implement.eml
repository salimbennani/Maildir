Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 08:46:25 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id D3C065802E4
	for <like.xu@linux.intel.com>; Thu, 29 Nov 2018 07:09:52 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 07:09:52 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A4HMiRxBGxyUbvtnDCff6UyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSPX+p8bcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Xymp4aV2Rx/ykC?=
 =?us-ascii?q?oJNyA3/m/UhMNygqJUrh2uqABwzYDJeIGYNvhwc6zAcd4UWWZOQN1RWjddAo6+?=
 =?us-ascii?q?dYYDE/YNMPxaooT7ulAArQG+BQ6pBO73zTFIh3z23a0g3OQgFQHNwRAtEMkUv3?=
 =?us-ascii?q?TXsdX1MaASUf6ox6TPyDXDbvBW2Tfn54jJdhAtu+uDUqlqfsrS1EkvEgTFjkuL?=
 =?us-ascii?q?pIzkJDOVzv4NvHKA7+Z6T+KvlncqpgdsqTas3schkpfFip4Wx1ze6Cl13YU4Kc?=
 =?us-ascii?q?emREN1YdOoCoZcuiOCO4Z1Qs4uWXxktSkkxrEcpJK3YSoHxI45yxLBavGKdZWD?=
 =?us-ascii?q?7Aj5W+aLOzh4gWpoeLKhiBa29kit0un8Vsiv0FZWtSpJiNbMtnYQ1xDJ7ciHUP?=
 =?us-ascii?q?R98l+g2TaJyQ/T9vlJLV4omafYMZIt36M8m5kJvUjdECL7mF/6gLKUe0k8/+in?=
 =?us-ascii?q?8eXnYrHopp+GMI90jxnzMr0wlcy6HOQ0KxUBUHaF+eui0L3v5Fb2QLJXjv0wjq?=
 =?us-ascii?q?bWrovaKcMfpq64AA9azJwv6hmiDzq+1NQYnH8HLE9KeR6djojpPU3OL+78Dful?=
 =?us-ascii?q?n1uslzJryuvAPr3mBJXNIX7DkKr7cbZ68U5cxxI/zcpD6JJMFrEBPPXzV1f1tN?=
 =?us-ascii?q?zZDR82LRa4wun6CNhm0oMeWGSPArKWMa/IsF+I4P4vLPeIZIMPpDn9LP0ltLbT?=
 =?us-ascii?q?i2QkkwodYbWxxslQL3S5Beh9ZUOeZ3Xqn5EGC2hNuwM/SOnjjhqFSSJSYHCpGL?=
 =?us-ascii?q?sx4yx+BI+4AIOQe4a2nbbU2S66GoFRNHlLD03JHXr2eoHBQfoVdS+JPudnlToL?=
 =?us-ascii?q?U6XnTJUuggqzvg33wKYyM+zP5ycDvoji3tUm2+qGjBw36Hl4AtqQ10mLSGd7mH?=
 =?us-ascii?q?5OQCU5j45lpkko71aA0aF5h7RxH9VQ+vZOTE9uMJ/fz+V7D5b7UAvCY9KOVn6n?=
 =?us-ascii?q?Wc28CCp3VM9nkIxGWFp0B9j31kOL5CGtGbJAz7E=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BVAQBaAABchxHrdtBkHgEGBwaBUQkLA?=
 =?us-ascii?q?YEwgmKDeYh3iymBaIEhkRw0hHiBcxQYFIITgRmBDwODNiI0CQ0BAwEBAQEBAQI?=
 =?us-ascii?q?BEwEBAQoLCQgbDi+CNgUCAxgJglwDAwECIAQfCikDAwECBgEBJAIfAwQCAgMBQ?=
 =?us-ascii?q?xAQCQWDHIICAQMBphV8M4orgQuLC4FXP4ERM4IqiDqCVwKPajGQCAcCgh0EhCG?=
 =?us-ascii?q?LCIpAhlwsmCKBRoINTTKBAQhWgU6CJxcSjg5vgQeLQ4F3AQE?=
X-IPAS-Result: =?us-ascii?q?A0BVAQBaAABchxHrdtBkHgEGBwaBUQkLAYEwgmKDeYh3iym?=
 =?us-ascii?q?BaIEhkRw0hHiBcxQYFIITgRmBDwODNiI0CQ0BAwEBAQEBAQIBEwEBAQoLCQgbD?=
 =?us-ascii?q?i+CNgUCAxgJglwDAwECIAQfCikDAwECBgEBJAIfAwQCAgMBQxAQCQWDHIICAQM?=
 =?us-ascii?q?BphV8M4orgQuLC4FXP4ERM4IqiDqCVwKPajGQCAcCgh0EhCGLCIpAhlwsmCKBR?=
 =?us-ascii?q?oINTTKBAQhWgU6CJxcSjg5vgQeLQ4F3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,295,1539673200"; 
   d="scan'208";a="54855186"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 29 Nov 2018 07:09:52 -0800
Received: from localhost ([::1]:54699 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gSNwt-0001rd-GP
	for like.xu@linux.intel.com; Thu, 29 Nov 2018 10:09:51 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:53866)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <mikhail.abakumov@ispras.ru>) id 1gSNKZ-00065Z-Rw
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 09:30:16 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <mikhail.abakumov@ispras.ru>) id 1gSNKV-0001Fd-R1
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 09:30:15 -0500
Received: from mail.ispras.ru ([83.149.199.45]:39898)
	by eggs.gnu.org with esmtp (Exim 4.71)
	(envelope-from <mikhail.abakumov@ispras.ru>) id 1gSNKV-0001Du-EN
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 09:30:11 -0500
Received: from Misha-PC.lan02.inno (unknown [85.142.117.226])
	by mail.ispras.ru (Postfix) with ESMTPSA id A78F55401AE;
	Thu, 29 Nov 2018 17:30:10 +0300 (MSK)
From: Mikhail Abakumov <mikhail.abakumov@ispras.ru>
To: qemu-devel@nongnu.org
Date: Thu, 29 Nov 2018 17:30:08 +0300
Message-ID: <154350180810.8036.6259045508996849140.stgit@Misha-PC.lan02.inno>
In-Reply-To: <154350164526.8036.12623669071583857903.stgit@Misha-PC.lan02.inno>
References: <154350164526.8036.12623669071583857903.stgit@Misha-PC.lan02.inno>
User-Agent: StGit/0.17.1-dirty
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 3.x [fuzzy]
X-Received-From: 83.149.199.45
Subject: [Qemu-devel] [PATCH 28/39] windbg: implement
 kd_api_read_control_space and kd_api_write_control_space
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: sw@weilnetz.de, lprosek@redhat.com, dovgaluk@ispras.ru,
	rkagan@virtuozzo.com, pbonzini@redhat.com, den@openvz.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Signed-off-by: Mikhail Abakumov <mikhail.abakumov@ispras.ru>
Signed-off-by: Pavel Dovgalyuk <dovgaluk@ispras.ru>
---
 include/exec/windbgstub-utils.h |    2 +
 target/i386/windbgstub.c        |   81 +++++++++++++++++++++++++++++++++++++++
 windbgstub.c                    |    8 ++++
 3 files changed, 91 insertions(+)

diff --git a/include/exec/windbgstub-utils.h b/include/exec/windbgstub-utils.h
index 6936fd0ffb..2781a54044 100644
--- a/include/exec/windbgstub-utils.h
+++ b/include/exec/windbgstub-utils.h
@@ -71,6 +71,8 @@ void kd_api_read_virtual_memory(CPUState *cs, PacketData *pd);
 void kd_api_write_virtual_memory(CPUState *cs, PacketData *pd);
 void kd_api_get_context(CPUState *cs, PacketData *pd);
 void kd_api_set_context(CPUState *cs, PacketData *pd);
+void kd_api_read_control_space(CPUState *cs, PacketData *pd);
+void kd_api_write_control_space(CPUState *cs, PacketData *pd);
 void kd_api_get_context_ex(CPUState *cs, PacketData *pd);
 void kd_api_set_context_ex(CPUState *cs, PacketData *pd);
 void kd_api_unsupported(CPUState *cs, PacketData *pd);
diff --git a/target/i386/windbgstub.c b/target/i386/windbgstub.c
index 946f5cdb6a..c982eff590 100644
--- a/target/i386/windbgstub.c
+++ b/target/i386/windbgstub.c
@@ -962,6 +962,87 @@ void kd_api_set_context(CPUState *cs, PacketData *pd)
     }
 }
 
+void kd_api_read_control_space(CPUState *cs, PacketData *pd)
+{
+    DBGKD_READ_MEMORY64 *mem = &pd->m64.u.ReadMemory;
+    target_ulong addr = ldtul_p(&mem->TargetBaseAddress);
+    uint32_t len = MIN(ldl_p(&mem->TransferCount),
+                       PACKET_MAX_SIZE - sizeof(DBGKD_MANIPULATE_STATE64));
+    int err = 0;
+
+#ifdef TARGET_X86_64
+
+    switch (addr) {
+    case AMD64_DEBUG_CONTROL_SPACE_KPCR:
+        addr = KPCR.addr;
+        len = sizeof(target_ulong);
+        err = cpu_memory_rw_debug(cs, addr, pd->extra, len, 0);
+        break;
+
+    case AMD64_DEBUG_CONTROL_SPACE_KPRCB:
+        addr = VMEM_ADDR(cs, KPCR.addr + OFFSET_KPRCB);
+        len = sizeof(target_ulong);
+        err = cpu_memory_rw_debug(cs, addr, pd->extra, len, 0);
+        break;
+
+    case AMD64_DEBUG_CONTROL_SPACE_KSPECIAL:
+        len = MIN(len, sizeof(CPU_KSPECIAL_REGISTERS));
+        err = windbg_read_ks_regs(cs, pd->extra, len, 0, len);
+        break;
+
+    case AMD64_DEBUG_CONTROL_SPACE_KTHREAD:
+        addr = VMEM_ADDR(cs, addr + OFFSET_KPRCB_CURRTHREAD);
+        len = sizeof(target_ulong);
+        err = cpu_memory_rw_debug(cs, addr, pd->extra, len, 0);
+        break;
+    }
+
+#else /* TARGET_I386 */
+
+    err = windbg_rw_context_ex(cs, pd->extra, len, addr, len, true);
+
+#endif /* TARGET_I386 */
+
+    if (err) {
+        len = 0;
+        pd->m64.ReturnStatus = STATUS_UNSUCCESSFUL;
+    }
+
+    pd->extra_size = len;
+    stl_p(&mem->ActualBytesRead, len);
+}
+
+void kd_api_write_control_space(CPUState *cs, PacketData *pd)
+{
+    DBGKD_WRITE_MEMORY64 *mem = &pd->m64.u.WriteMemory;
+    target_ulong addr = ldtul_p(&mem->TargetBaseAddress);
+    uint32_t len = MIN(ldl_p(&mem->TransferCount), pd->extra_size);
+    int err = 0;
+
+#ifdef TARGET_X86_64
+
+    if (addr == AMD64_DEBUG_CONTROL_SPACE_KSPECIAL) {
+        len = MIN(len, sizeof(CPU_KSPECIAL_REGISTERS));
+        err = windbg_write_ks_regs(cs, pd->extra, len, 0, len);
+    } else {
+        err = 1;
+    }
+
+#else /* TARGET_I386 */
+
+    err = windbg_rw_context_ex(cs, pd->extra, len, addr, len, false);
+
+#endif /* TARGET_I386 */
+
+    if (err) {
+        len = 0;
+        pd->m64.ReturnStatus = STATUS_UNSUCCESSFUL;
+    }
+
+    pd->extra_size = 0;
+    stl_p(&mem->ActualBytesWritten, len);
+}
+
 void kd_api_get_context_ex(CPUState *cs, PacketData *pd)
 {
     DBGKD_CONTEXT_EX *ctx = &pd->m64.u.ContextEx;
diff --git a/windbgstub.c b/windbgstub.c
index e9d759cddf..328a04735f 100644
--- a/windbgstub.c
+++ b/windbgstub.c
@@ -165,6 +165,14 @@ static void windbg_process_manipulate_packet(WindbgState *state)
         kd_api_set_context(cs, data);
         break;
 
+    case DbgKdReadControlSpaceApi:
+        kd_api_read_control_space(cs, data);
+        break;
+
+    case DbgKdWriteControlSpaceApi:
+        kd_api_write_control_space(cs, data);
+        break;
+
     case DbgKdGetContextExApi:
         kd_api_get_context_ex(cs, data);
         break;


