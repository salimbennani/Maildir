Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:45:03 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id BAE2E580443
	for <like.xu@linux.intel.com>; Thu,  6 Dec 2018 04:09:01 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by orsmga001-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 04:09:01 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AkR7gnxQWSvZpx3uHZgtb7wf1wNpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa6zYRSN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4qF2QxHqlS?=
 =?us-ascii?q?gHLSY0/mHJhMJ+j6xUohyhqBJwzIHIb4+bKeJ+c6Hfc94VWGZMUNpdWDJaAo6n?=
 =?us-ascii?q?c4sCDfAMMfpEo4TnpVYDqwa1Cwm2BOPozz9Fnnj43aw50+QhCw7G3QggFM8SvX?=
 =?us-ascii?q?vPttr1N7oSUeWyzKnW0D7OaPZW2Tb+6IjIaB8hoPWMUahqfsXK00YvFB7FjlCX?=
 =?us-ascii?q?qYz7JD6V1/8Ns3CB7+V6TuKjkXQnqxxorzWp28wiiZHJi5oLxlzY9ih12ps5Kc?=
 =?us-ascii?q?C7RUJhf9KpHptduzuHO4Z0Ws8vQGFltDwnxrAJp5K3ZjUGxIklyhLFdfCLbYmF?=
 =?us-ascii?q?7xT+X+iLOzh4nmhqeLenihay70egzur8W9Gw0FZLtSpFjsLMumoC1xzV98iLUP?=
 =?us-ascii?q?x9/l2u2TqX1gDT7P9LIVwsmKbFN5IswaQ8mocOvUnABCP6hkv7ga+Mekk5+OWk?=
 =?us-ascii?q?8+Hnba/npp+YOY90kAb+MqE2l8ymH+s4NxUOU3GG9uuiyr3s40n5TKxRgf0xj6?=
 =?us-ascii?q?nZtozVKtoApqK+Bw9V04Uj5AilAzapzdQVhX0HLFNDeBKagInlIVDOIPbkDfih?=
 =?us-ascii?q?h1Sgiitkx/fDPrD6BJXNKX7DkLjnfbZg8UJczxAzzd9H65JOFr4BOO7zWlP2tN?=
 =?us-ascii?q?HACh85Mg+0zPj9BNRyy4MTQmaPAq6fMKPPvl6E/OMvI++QZIALvDbxMeQq5/nr?=
 =?us-ascii?q?jSxxpFkGYKP83YcLcGvqWbNiIl6FejzqhdEOF3pMuRAxC+njiVmHWDgUYG6uXq?=
 =?us-ascii?q?U6/XYiBYe7SIvOWI2p04GHxzqxS5hfZ2RaDQKVHHL1MomJRfoILTifO9JsiSAs?=
 =?us-ascii?q?U7+nRIk8kxa0u1jh1rBlI+HIrzAero/pz9Nv5ufexi01oCV5CtnY32yTQmVcmG?=
 =?us-ascii?q?QOSDkrmqdlrh9T0FCGhI15gPxRFNgbzvlAURo/MoCUm+l7CND7WwaHd92AS0uj?=
 =?us-ascii?q?RcuOACopVNsqhcUTNRUuU+6+hwzOinL5S4QekKaGUcQ5?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AsAAAgEQlchxHrdtBkHgEGBwaBUQkLA?=
 =?us-ascii?q?YEwgTmBKYN6iHiNFpdzgXMUGAMRhDsDgxgiNAkNAQMBAQEBAQECARMBAQEKCwk?=
 =?us-ascii?q?IGw4jDII2BQIDGAmCXAMDAQIgBB8KKQMDAQIGAQEkAiIEAgIDAUMQGQWDHAGCA?=
 =?us-ascii?q?QEDAaVJfDOKK4ELixOBVz+BRIVkhQCCVwKPN0YzkC8HAoIgBIQjPYpaikuGapk?=
 =?us-ascii?q?LgUaCDU0ygQEIVoFOCYIeF4gbhgVvgQeIcIF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0AsAAAgEQlchxHrdtBkHgEGBwaBUQkLAYEwgTmBKYN6iHi?=
 =?us-ascii?q?NFpdzgXMUGAMRhDsDgxgiNAkNAQMBAQEBAQECARMBAQEKCwkIGw4jDII2BQIDG?=
 =?us-ascii?q?AmCXAMDAQIgBB8KKQMDAQIGAQEkAiIEAgIDAUMQGQWDHAGCAQEDAaVJfDOKK4E?=
 =?us-ascii?q?LixOBVz+BRIVkhQCCVwKPN0YzkC8HAoIgBIQjPYpaikuGapkLgUaCDU0ygQEIV?=
 =?us-ascii?q?oFOCYIeF4gbhgVvgQeIcIF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,322,1539673200"; 
   d="scan'208";a="55784463"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 06 Dec 2018 04:08:58 -0800
Received: from localhost ([::1]:40357 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gUsSf-0006Wh-C6
	for like.xu@linux.intel.com; Thu, 06 Dec 2018 07:08:57 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:41535)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <mikhail.abakumov@ispras.ru>) id 1gUsK2-0008C9-1I
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 07:00:09 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <mikhail.abakumov@ispras.ru>) id 1gUsJx-0004nz-DV
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 07:00:01 -0500
Received: from mail.ispras.ru ([83.149.199.45]:59978)
	by eggs.gnu.org with esmtp (Exim 4.71)
	(envelope-from <mikhail.abakumov@ispras.ru>) id 1gUsJw-0004nm-Vv
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 06:59:57 -0500
Received: from Misha-PC.lan02.inno (unknown [85.142.117.226])
	by mail.ispras.ru (Postfix) with ESMTPSA id 43092540082;
	Thu,  6 Dec 2018 14:59:56 +0300 (MSK)
From: Mikhail Abakumov <mikhail.abakumov@ispras.ru>
To: qemu-devel@nongnu.org
Date: Thu, 06 Dec 2018 14:59:51 +0300
Message-ID: <154409759149.5432.7433579017265187980.stgit@Misha-PC.lan02.inno>
In-Reply-To: <154409751316.5432.3325938832238028060.stgit@Misha-PC.lan02.inno>
References: <154409751316.5432.3325938832238028060.stgit@Misha-PC.lan02.inno>
User-Agent: StGit/0.17.1-dirty
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 3.x [fuzzy]
X-Received-From: 83.149.199.45
Subject: [Qemu-devel] [PATCH v3 13/39] windbg: parsing data stream
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: sw@weilnetz.de, lprosek@redhat.com, dovgaluk@ispras.ru,
	rkagan@virtuozzo.com, pbonzini@redhat.com, den@openvz.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Add parsing data stream to packets from windbg client.

Signed-off-by: Mikhail Abakumov <mikhail.abakumov@ispras.ru>
Signed-off-by: Pavel Dovgalyuk <dovgaluk@ispras.ru>
---
 include/exec/windbgstub-utils.h |   11 +++
 windbgstub.c                    |  139 +++++++++++++++++++++++++++++++++++++++
 2 files changed, 150 insertions(+)

diff --git a/include/exec/windbgstub-utils.h b/include/exec/windbgstub-utils.h
index 2760684cfb..a28068eecd 100644
--- a/include/exec/windbgstub-utils.h
+++ b/include/exec/windbgstub-utils.h
@@ -53,6 +53,17 @@ typedef struct InitedAddr {
     bool is_init;
 } InitedAddr;
 
+typedef struct PacketData {
+    union {
+        struct {
+            DBGKD_MANIPULATE_STATE64 m64;
+            uint8_t extra[0];
+        };
+        uint8_t buf[PACKET_MAX_SIZE];
+    };
+    uint16_t extra_size;
+} PacketData;
+
 const char *kd_api_name(int id);
 const char *kd_pkt_type_name(int id);
 
diff --git a/windbgstub.c b/windbgstub.c
index d7fadda096..2869d94389 100644
--- a/windbgstub.c
+++ b/windbgstub.c
@@ -19,12 +19,43 @@
 #include "exec/windbgstub.h"
 #include "exec/windbgstub-utils.h"
 
+typedef enum ParsingState {
+    STATE_LEADER,
+    STATE_PACKET_TYPE,
+    STATE_PACKET_BYTE_COUNT,
+    STATE_PACKET_ID,
+    STATE_PACKET_CHECKSUM,
+    STATE_PACKET_DATA,
+    STATE_TRAILING_BYTE,
+} ParsingState;
+
+typedef enum ParsingResult {
+    RESULT_NONE,
+    RESULT_BREAKIN_BYTE,
+    RESULT_UNKNOWN_PACKET,
+    RESULT_CONTROL_PACKET,
+    RESULT_DATA_PACKET,
+    RESULT_ERROR,
+} ParsingResult;
+
+typedef struct ParsingContext {
+    /* index in the current buffer,
+       which depends on the current state */
+    int index;
+    ParsingState state;
+    ParsingResult result;
+    KD_PACKET packet;
+    PacketData data;
+    const char *name;
+} ParsingContext;
+
 typedef struct WindbgState {
     bool is_loaded;
     bool catched_breakin_byte;
     uint32_t wait_packet_type;
     uint32_t curr_packet_id;
 
+    ParsingContext ctx;
     CharBackend chr;
 } WindbgState;
 
@@ -36,6 +67,108 @@ static void windbg_state_clean(WindbgState *state)
     state->catched_breakin_byte = false;
     state->wait_packet_type = 0;
     state->curr_packet_id = INITIAL_PACKET_ID | SYNC_PACKET_ID;
+    state->ctx.state = STATE_LEADER;
+    state->ctx.result = RESULT_NONE;
+}
+
+static void windbg_ctx_handler(WindbgState *state)
+{
+}
+
+static void windbg_read_byte(ParsingContext *ctx, uint8_t byte)
+{
+    switch (ctx->state) {
+    case STATE_LEADER:
+        ctx->result = RESULT_NONE;
+        if (byte == PACKET_LEADER_BYTE || byte == CONTROL_PACKET_LEADER_BYTE) {
+            if (ctx->index > 0 && byte != PTR(ctx->packet.PacketLeader)[0]) {
+                ctx->index = 0;
+            }
+            PTR(ctx->packet.PacketLeader)[ctx->index] = byte;
+            ++ctx->index;
+            if (ctx->index == sizeof(ctx->packet.PacketLeader)) {
+                ctx->state = STATE_PACKET_TYPE;
+                ctx->index = 0;
+            }
+        } else if (byte == BREAKIN_PACKET_BYTE) {
+            ctx->result = RESULT_BREAKIN_BYTE;
+            ctx->index = 0;
+        } else {
+            ctx->index = 0;
+        }
+        break;
+
+    case STATE_PACKET_TYPE:
+        PTR(ctx->packet.PacketType)[ctx->index] = byte;
+        ++ctx->index;
+        if (ctx->index == sizeof(ctx->packet.PacketType)) {
+            ctx->packet.PacketType = lduw_p(&ctx->packet.PacketType);
+            if (ctx->packet.PacketType >= PACKET_TYPE_MAX) {
+                ctx->state = STATE_LEADER;
+                ctx->result = RESULT_UNKNOWN_PACKET;
+            } else {
+                ctx->state = STATE_PACKET_BYTE_COUNT;
+            }
+            ctx->index = 0;
+        }
+        break;
+
+    case STATE_PACKET_BYTE_COUNT:
+        PTR(ctx->packet.ByteCount)[ctx->index] = byte;
+        ++ctx->index;
+        if (ctx->index == sizeof(ctx->packet.ByteCount)) {
+            ctx->packet.ByteCount = lduw_p(&ctx->packet.ByteCount);
+            ctx->state = STATE_PACKET_ID;
+            ctx->index = 0;
+        }
+        break;
+
+    case STATE_PACKET_ID:
+        PTR(ctx->packet.PacketId)[ctx->index] = byte;
+        ++ctx->index;
+        if (ctx->index == sizeof(ctx->packet.PacketId)) {
+            ctx->packet.PacketId = ldl_p(&ctx->packet.PacketId);
+            ctx->state = STATE_PACKET_CHECKSUM;
+            ctx->index = 0;
+        }
+        break;
+
+    case STATE_PACKET_CHECKSUM:
+        PTR(ctx->packet.Checksum)[ctx->index] = byte;
+        ++ctx->index;
+        if (ctx->index == sizeof(ctx->packet.Checksum)) {
+            ctx->packet.Checksum = ldl_p(&ctx->packet.Checksum);
+            if (ctx->packet.PacketLeader == CONTROL_PACKET_LEADER) {
+                ctx->state = STATE_LEADER;
+                ctx->result = RESULT_CONTROL_PACKET;
+            } else if (ctx->packet.ByteCount > PACKET_MAX_SIZE) {
+                ctx->state = STATE_LEADER;
+                ctx->result = RESULT_ERROR;
+            } else {
+                ctx->state = STATE_PACKET_DATA;
+            }
+            ctx->index = 0;
+        }
+        break;
+
+    case STATE_PACKET_DATA:
+        ctx->data.buf[ctx->index] = byte;
+        ++ctx->index;
+        if (ctx->index == ctx->packet.ByteCount) {
+            ctx->state = STATE_TRAILING_BYTE;
+            ctx->index = 0;
+        }
+        break;
+
+    case STATE_TRAILING_BYTE:
+        if (byte == PACKET_TRAILING_BYTE) {
+            ctx->result = RESULT_DATA_PACKET;
+        } else {
+            ctx->result = RESULT_ERROR;
+        }
+        ctx->state = STATE_LEADER;
+        break;
+    }
 }
 
 static int windbg_chr_can_receive(void *opaque)
@@ -45,6 +178,11 @@ static int windbg_chr_can_receive(void *opaque)
 
 static void windbg_chr_receive(void *opaque, const uint8_t *buf, int size)
 {
+    int i;
+    for (i = 0; i < size; i++) {
+        windbg_read_byte(&windbg_state->ctx, buf[i]);
+        windbg_ctx_handler(windbg_state);
+    }
 }
 
 static void windbg_exit(void)
@@ -87,6 +225,7 @@ int windbg_server_start(const char *device)
     }
 
     windbg_state = g_new0(WindbgState, 1);
+    windbg_state->ctx.name = "Windbg";
     windbg_state_clean(windbg_state);
 
     chr = qemu_chr_new_noreplay("windbg", device, true);


