Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:45:48 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id DE04258042F
	for <like.xu@linux.intel.com>; Thu,  6 Dec 2018 04:42:19 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 04:42:19 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3ADuc9shLkeNYw7nmVOdmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgfL/zxwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QLYpUjqg8qhrUgflhi?=
 =?us-ascii?q?cZOTA382/YiMJwg6xUrx29qBJx3pbUbYOXOvdxY6/Qc88WSnRaXstKSyxMAJmx?=
 =?us-ascii?q?Y5cTA+cbP+tVqZT2qVsUrRu5AAmhHOThyj5Lhn/2x6I60uAhGhza0QM7Bd0Os2?=
 =?us-ascii?q?nUrNDyNKcMTOu4y6zIzTTAb/NWwzj96YzIfgo7rv6XR71wctfRyUwoFwPblViQ?=
 =?us-ascii?q?qJflPyuP1usXqGiX9fBgVf+2hmMhtgp/oSCvy98yhoXVhY8Z0E3I+Th6zYovO9?=
 =?us-ascii?q?G1Rk52bcS5HJZSry2XNIt7Ttk/T2xnpio20KAKtYO5cSQQ1pgr2R/SZvqaeIaS?=
 =?us-ascii?q?+B3jTvyeITJgiXJlZr2/gxGy/FCkyu39Tcm0zE1KojBKktnKq3ABzRvT6tKISv?=
 =?us-ascii?q?dl/0eh3yiA1xzL5+1aPUw5lrDXJ4M8zrMzjJYfr0rOEy/slEnrjqKabkAk9fKp?=
 =?us-ascii?q?6+TjbLXmvJicN4pshwHnLKsun9G/Df0lPQcQQWiU5+C82KT48k3+XbVKiOE5nb?=
 =?us-ascii?q?fCsJzdIcQbp625DBFP3ocs9hayFzOm0NUenXkaI1NJYhOHj471O17QJPD0F+uw?=
 =?us-ascii?q?g1OpkDpwwfDGObvhAprLLnjeirvheqx960FExAop0d9f/45UCq0GIP/rXk/xtd?=
 =?us-ascii?q?/YAQEjPw273ubqE9F91oIYWWKSDa6VKqLSsVmU5u0xJ+mAfpMauDH4K6tt2vj1?=
 =?us-ascii?q?kHVsmUMBZbL7mtwTaWukBbJgJEOWZ2eqhc0OVmIDvw47Reqtj0WeUDlVfDGrUq?=
 =?us-ascii?q?choz02Fo+iXrrFXZ2n1bmI3SOnGc9Pa2VbT1yBD3rsMp+JQuoBcz66JMhnnToZ?=
 =?us-ascii?q?E7+7RNg6yBusuQTmnqdhNffe4SYCtJjuh+RysvTekAx3+TFqAsC11WaLQGdp2G?=
 =?us-ascii?q?QSSGwYxqd69Gl8yVeK0KwwqvZRFsFW4O0BBgI7Np7Vzug8Atr7WR/EecmhSU2+?=
 =?us-ascii?q?WNy9RyssGIFii+QSalpwTo3xxivI2DCnVucY?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0CkAADoFwlcmBHrdtBkHgEGBwaBUQkLA?=
 =?us-ascii?q?YEwgmKDeoh4jReBIZElNIR5gXMUGBSDLIEPA4MYIjQJDQEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BAQEICwsGGw4vgjYFAgMYCYJcAwMBAiAEHwopAwMBAgYBASQCIgQCAgMBQxAZB?=
 =?us-ascii?q?YMcggIBAwGlT3wziiqBC4sTgVc/gRA0giqIOoJXAok1hkgzkC8HAoIgBIQjixe?=
 =?us-ascii?q?KS4ZqLJhfgUaCDU0ygQEIVoFOgicXEo4Ob4EHiHCBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0CkAADoFwlcmBHrdtBkHgEGBwaBUQkLAYEwgmKDeoh4jRe?=
 =?us-ascii?q?BIZElNIR5gXMUGBSDLIEPA4MYIjQJDQEDAQEBAQEBAgETAQEBAQEICwsGGw4vg?=
 =?us-ascii?q?jYFAgMYCYJcAwMBAiAEHwopAwMBAgYBASQCIgQCAgMBQxAZBYMcggIBAwGlT3w?=
 =?us-ascii?q?ziiqBC4sTgVc/gRA0giqIOoJXAok1hkgzkC8HAoIgBIQjixeKS4ZqLJhfgUaCD?=
 =?us-ascii?q?U0ygQEIVoFOgicXEo4Ob4EHiHCBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,322,1539673200"; 
   d="scan'208";a="65600036"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mga01b.intel.com with ESMTP/TLS/AES256-SHA; 06 Dec 2018 04:42:18 -0800
Received: from localhost ([::1]:40554 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gUsyw-00069H-9f
	for like.xu@linux.intel.com; Thu, 06 Dec 2018 07:42:18 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:42303)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <mikhail.abakumov@ispras.ru>) id 1gUsMC-0001Pe-Af
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 07:02:20 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <mikhail.abakumov@ispras.ru>) id 1gUsM6-0006SP-At
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 07:02:16 -0500
Received: from mail.ispras.ru ([83.149.199.45]:60512)
	by eggs.gnu.org with esmtp (Exim 4.71)
	(envelope-from <mikhail.abakumov@ispras.ru>) id 1gUsM5-0006FU-UE
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 07:02:10 -0500
Received: from Misha-PC.lan02.inno (unknown [85.142.117.226])
	by mail.ispras.ru (Postfix) with ESMTPSA id 27DB0540082;
	Thu,  6 Dec 2018 15:01:59 +0300 (MSK)
From: Mikhail Abakumov <mikhail.abakumov@ispras.ru>
To: qemu-devel@nongnu.org
Date: Thu, 06 Dec 2018 15:01:54 +0300
Message-ID: <154409771441.5432.1285340295550689902.stgit@Misha-PC.lan02.inno>
In-Reply-To: <154409751316.5432.3325938832238028060.stgit@Misha-PC.lan02.inno>
References: <154409751316.5432.3325938832238028060.stgit@Misha-PC.lan02.inno>
User-Agent: StGit/0.17.1-dirty
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 3.x [fuzzy]
X-Received-From: 83.149.199.45
Subject: [Qemu-devel] [PATCH v3 35/39] windbg: implement kd_api_read_msr and
 kd_api_write_msr
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: sw@weilnetz.de, lprosek@redhat.com, dovgaluk@ispras.ru,
	rkagan@virtuozzo.com, pbonzini@redhat.com, den@openvz.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Add sub functions for helper_wrmsr and helper_rdmsr: cpu_x86_write_msr
and cpu_x86_read_msr.

Signed-off-by: Mikhail Abakumov <mikhail.abakumov@ispras.ru>
Signed-off-by: Pavel Dovgalyuk <dovgaluk@ispras.ru>
---
 include/exec/windbgstub-utils.h |    2 ++
 target/i386/cpu.h               |    5 +++++
 target/i386/misc_helper.c       |   39 ++++++++++++++++++++++++++++-----------
 target/i386/windbgstub.c        |   30 ++++++++++++++++++++++++++++++
 windbgstub.c                    |    8 ++++++++
 5 files changed, 73 insertions(+), 11 deletions(-)

diff --git a/include/exec/windbgstub-utils.h b/include/exec/windbgstub-utils.h
index adfc9936f3..74e3b9a0da 100644
--- a/include/exec/windbgstub-utils.h
+++ b/include/exec/windbgstub-utils.h
@@ -81,6 +81,8 @@ void kd_api_write_io_space(CPUState *cs, PacketData *pd);
 void kd_api_read_physical_memory(CPUState *cs, PacketData *pd);
 void kd_api_write_physical_memory(CPUState *cs, PacketData *pd);
 void kd_api_get_version(CPUState *cs, PacketData *pd);
+void kd_api_read_msr(CPUState *cs, PacketData *pd);
+void kd_api_write_msr(CPUState *cs, PacketData *pd);
 void kd_api_clear_all_internal_breakpoints(CPUState *cs, PacketData *pd);
 void kd_api_get_context_ex(CPUState *cs, PacketData *pd);
 void kd_api_set_context_ex(CPUState *cs, PacketData *pd);
diff --git a/target/i386/cpu.h b/target/i386/cpu.h
index 9c52d0cbeb..0f451d81bf 100644
--- a/target/i386/cpu.h
+++ b/target/i386/cpu.h
@@ -1680,6 +1680,11 @@ void cpu_x86_update_cr3(CPUX86State *env, target_ulong new_cr3);
 void cpu_x86_update_cr4(CPUX86State *env, uint32_t new_cr4);
 void cpu_x86_update_dr7(CPUX86State *env, uint32_t new_dr7);
 
+#ifndef CONFIG_USER_ONLY
+void cpu_x86_write_msr(CPUX86State *env, uint64_t val);
+uint64_t cpu_x86_read_msr(CPUX86State *env);
+#endif
+
 /* hw/pc.c */
 uint64_t cpu_get_tsc(CPUX86State *env);
 
diff --git a/target/i386/misc_helper.c b/target/i386/misc_helper.c
index 6ae67cf885..1f9adb246d 100644
--- a/target/i386/misc_helper.c
+++ b/target/i386/misc_helper.c
@@ -228,15 +228,8 @@ void helper_rdmsr(CPUX86State *env)
 {
 }
 #else
-void helper_wrmsr(CPUX86State *env)
+void cpu_x86_write_msr(CPUX86State *env, uint64_t val)
 {
-    uint64_t val;
-
-    cpu_svm_check_intercept_param(env, SVM_EXIT_MSR, 1, GETPC());
-
-    val = ((uint32_t)env->regs[R_EAX]) |
-        ((uint64_t)((uint32_t)env->regs[R_EDX]) << 32);
-
     switch ((uint32_t)env->regs[R_ECX]) {
     case MSR_IA32_SYSENTER_CS:
         env->sysenter_cs = val & 0xffff;
@@ -386,11 +379,9 @@ void helper_wrmsr(CPUX86State *env)
         /* XXX: exception? */
         break;
     }
-
-    windbg_try_load();
 }
 
-void helper_rdmsr(CPUX86State *env)
+uint64_t cpu_x86_read_msr(CPUX86State *env)
 {
     uint64_t val;
 
@@ -537,6 +528,32 @@ void helper_rdmsr(CPUX86State *env)
         val = 0;
         break;
     }
+
+    return val;
+}
+
+void helper_wrmsr(CPUX86State *env)
+{
+    uint64_t val;
+
+    cpu_svm_check_intercept_param(env, SVM_EXIT_MSR, 1, GETPC());
+
+    val = ((uint32_t)env->regs[R_EAX]) |
+        ((uint64_t)((uint32_t)env->regs[R_EDX]) << 32);
+
+    cpu_x86_write_msr(env, val);
+
+    windbg_try_load();
+}
+
+void helper_rdmsr(CPUX86State *env)
+{
+    uint64_t val;
+
+    cpu_svm_check_intercept_param(env, SVM_EXIT_MSR, 0, GETPC());
+
+    val = cpu_x86_read_msr(env);
+
     env->regs[R_EAX] = (uint32_t)(val);
     env->regs[R_EDX] = (uint32_t)(val >> 32);
 }
diff --git a/target/i386/windbgstub.c b/target/i386/windbgstub.c
index 9e84027f19..ccc7bc3035 100644
--- a/target/i386/windbgstub.c
+++ b/target/i386/windbgstub.c
@@ -1083,6 +1083,36 @@ void kd_api_set_context_ex(CPUState *cs, PacketData *pd)
     stl_p(&ctx->BytesCopied, len);
 }
 
+void kd_api_read_msr(CPUState *cs, PacketData *pd)
+{
+#ifndef CONFIG_USER_ONLY
+    DBGKD_READ_WRITE_MSR *m64c = &pd->m64.u.ReadWriteMsr;
+    X86CPU *cpu = X86_CPU(cs);
+    CPUX86State *env = &cpu->env;
+    uint64_t val = cpu_x86_read_msr(env);
+
+    stq_p(&val, val);
+
+    m64c->DataValueLow = val;
+    m64c->DataValueHigh = val >> 32;
+    pd->m64.ReturnStatus = STATUS_SUCCESS;
+#endif /* !CONFIG_USER_ONLY */
+}
+
+void kd_api_write_msr(CPUState *cs, PacketData *pd)
+{
+#ifndef CONFIG_USER_ONLY
+    DBGKD_READ_WRITE_MSR *m64c = &pd->m64.u.ReadWriteMsr;
+    X86CPU *cpu = X86_CPU(cs);
+    CPUX86State *env = &cpu->env;
+    uint64_t val = m64c->DataValueLow | ((uint64_t) m64c->DataValueHigh) << 32;
+
+    cpu_x86_write_msr(env, ldq_p(&val));
+
+    pd->m64.ReturnStatus = STATUS_SUCCESS;
+#endif /* !CONFIG_USER_ONLY */
+}
+
 void kd_api_get_version(CPUState *cs, PacketData *pd)
 {
     DBGKD_GET_VERSION64 *kdver = (DBGKD_GET_VERSION64 *) (PTR(pd->m64) + 0x10);
diff --git a/windbgstub.c b/windbgstub.c
index 366856bc81..109a52b663 100644
--- a/windbgstub.c
+++ b/windbgstub.c
@@ -216,6 +216,14 @@ static void windbg_process_manipulate_packet(WindbgState *state)
         kd_api_get_version(cs, data);
         break;
 
+    case DbgKdReadMachineSpecificRegister:
+        kd_api_read_msr(cs, data);
+        break;
+
+    case DbgKdWriteMachineSpecificRegister:
+        kd_api_write_msr(cs, data);
+        break;
+
     case DbgKdClearAllInternalBreakpointsApi:
         kd_api_clear_all_internal_breakpoints(cs, data);
         return;


