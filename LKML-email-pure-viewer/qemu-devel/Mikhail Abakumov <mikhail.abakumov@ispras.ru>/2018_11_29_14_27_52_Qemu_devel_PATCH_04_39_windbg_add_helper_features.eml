Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 08:44:12 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id B8EA2580213
	for <like.xu@linux.intel.com>; Thu, 29 Nov 2018 06:33:15 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 06:33:15 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AUiBz/B+GMuvbyv9uRHKM819IXTAuvvDOBiVQ1KB2?=
 =?us-ascii?q?1uocTK2v8tzYMVDF4r011RmVBdWds6oMotGVmpioYXYH75eFvSJKW713fDhBt/?=
 =?us-ascii?q?8rmRc9CtWOE0zxIa2iRSU7GMNfSA0tpCnjYgBaF8nkelLdvGC54yIMFRXjLwp1?=
 =?us-ascii?q?Ifn+FpLPg8it2O2+557ebx9UiDahfLh/MAi4oQLNu8cMnIBsMLwxyhzHontJf+?=
 =?us-ascii?q?RZ22ZlLk+Nkhj/+8m94odt/zxftPw9+cFAV776f7kjQrxDEDsmKWE169b1uhTF?=
 =?us-ascii?q?UACC+2ETUmQSkhpPHgjF8BT3VYr/vyfmquZw3jSRMMvrRr42RDui9b9mRh/2hi?=
 =?us-ascii?q?kJNDA28m/XhcJ/g61HrxyvugR/zozWboyaKfZzcL/Rcs0BRWdaQsZcVTZMDp+g?=
 =?us-ascii?q?Y4YVDecMO/tToYnnp1sJqBuzHQ6iBOLsyj9InHD23Kk62Pk9HA7dxgMgHM8OsH?=
 =?us-ascii?q?HTrNXrKawfVuW1zKjLzTXDdfxW2DP95JLSfR86u/6MXq9wcc/WyUkxDA7Fj06Q?=
 =?us-ascii?q?qZT/PzyPzeQBqXKb7/d5WO+plmUpqBlxryCxysswiYTFnJ8Zxk3H+Clj3oo4K9?=
 =?us-ascii?q?21RFRmbdOmCJddtCGXO5FrTs4tXW1kojs2xqAEtJKhYiQG1pUqyhjCYPKdaYeI?=
 =?us-ascii?q?+AjsVOOJLDd4mn1lfLW/ig628Uih0e38StK03ExFripDj9nArHcN1wbc6sSfS/?=
 =?us-ascii?q?t9+Fmu2SqX2gzN9u1JIlo4mbfGJ5Mi2LI8iJQevETZEiPrmkj6lKqWeV8l+uis?=
 =?us-ascii?q?5eTneLLmppqEOo9tlA7+N7kultWiDusmLAgBQWyb9f2n273k4E35RqlFgeMtkq?=
 =?us-ascii?q?XetJDaJMcbqbCjDw5az4Yu8xK/Dzag0NQFkngLNlNFeBSbj4f3P1HCOuz3DfC6?=
 =?us-ascii?q?g1m3ljdrwPbGPrLnApXQNHTDl63hfbll505G1AUz1cxf545TCrwZJPLzW0zxu8?=
 =?us-ascii?q?LCAh42Lgy52OLnCNR71oMDVmODGK6ZMKXOsVCW4uIjOfWDZIgQuGW1Fv4++vS7?=
 =?us-ascii?q?jWMlgURPOu6t3IALcza+GfJpJVjfZmDjxdIIEGMPtwx5S/T2iVqESnlKanOvGq?=
 =?us-ascii?q?4x+Dw/W7+gFprJE4Wkgbid23WiE5hLI2xLFF2IVG3lbpiJQOskbiWULcl81Dse?=
 =?us-ascii?q?Wu+6VoUj2Bqy4RL80KdtNeHO+ycV5q7kgcF44vCWmRws+DhcCcOb3GeQCWZukT?=
 =?us-ascii?q?AmXTgziYV+okx0y1PL+KJxgOFdEsIbs/ZIUQczNJqaxuZzCM33XRzpf8yRUl+9?=
 =?us-ascii?q?BM+7V2JiBuktysMDNh4uU+6piQrOinKn?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0DgAwDT9/9bhxHrdtBkgheBMYJig3mId?=
 =?us-ascii?q?4spgWiXaYFzFBgUghOCKAODNiI0CQ0BAwEBAQEBAQIBEwEBAQoLCQgbDi+CNgU?=
 =?us-ascii?q?CAxgJglwDAwECICMKKQMDAQIGAQEkAiIEAgIDAUMQGQWDHIICAQMBpgSBL4otg?=
 =?us-ascii?q?QuLC4FXP4FEimSCVwKPajGQCAcCgh0EhCGLCIpAhlyYToFGgg1NMoEBCFaBTpB?=
 =?us-ascii?q?eb4EHi0OBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0DgAwDT9/9bhxHrdtBkgheBMYJig3mId4spgWiXaYFzFBg?=
 =?us-ascii?q?UghOCKAODNiI0CQ0BAwEBAQEBAQIBEwEBAQoLCQgbDi+CNgUCAxgJglwDAwECI?=
 =?us-ascii?q?CMKKQMDAQIGAQEkAiIEAgIDAUMQGQWDHIICAQMBpgSBL4otgQuLC4FXP4FEimS?=
 =?us-ascii?q?CVwKPajGQCAcCgh0EhCGLCIpAhlyYToFGgg1NMoEBCFaBTpBeb4EHi0OBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,294,1539673200"; 
   d="scan'208";a="64560432"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mga01b.intel.com with ESMTP/TLS/AES256-SHA; 29 Nov 2018 06:33:15 -0800
Received: from localhost ([::1]:54472 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gSNNS-0008Km-7P
	for like.xu@linux.intel.com; Thu, 29 Nov 2018 09:33:14 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:52347)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <mikhail.abakumov@ispras.ru>) id 1gSNIK-0003Rk-W8
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 09:28:01 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <mikhail.abakumov@ispras.ru>) id 1gSNIK-0004Rk-3R
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 09:27:57 -0500
Received: from mail.ispras.ru ([83.149.199.45]:39168)
	by eggs.gnu.org with esmtp (Exim 4.71)
	(envelope-from <mikhail.abakumov@ispras.ru>) id 1gSNIJ-0004LW-Mp
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 09:27:56 -0500
Received: from Misha-PC.lan02.inno (unknown [85.142.117.226])
	by mail.ispras.ru (Postfix) with ESMTPSA id F3BA95400A7;
	Thu, 29 Nov 2018 17:27:54 +0300 (MSK)
From: Mikhail Abakumov <mikhail.abakumov@ispras.ru>
To: qemu-devel@nongnu.org
Date: Thu, 29 Nov 2018 17:27:52 +0300
Message-ID: <154350167242.8036.17729571538406950488.stgit@Misha-PC.lan02.inno>
In-Reply-To: <154350164526.8036.12623669071583857903.stgit@Misha-PC.lan02.inno>
References: <154350164526.8036.12623669071583857903.stgit@Misha-PC.lan02.inno>
User-Agent: StGit/0.17.1-dirty
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 3.x [fuzzy]
X-Received-From: 83.149.199.45
Subject: [Qemu-devel] [PATCH 04/39] windbg: add helper features
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: sw@weilnetz.de, lprosek@redhat.com, dovgaluk@ispras.ru,
	rkagan@virtuozzo.com, pbonzini@redhat.com, den@openvz.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Add some helper features for windbgstub.

Signed-off-by: Mikhail Abakumov <mikhail.abakumov@ispras.ru>
Signed-off-by: Pavel Dovgalyuk <dovgaluk@ispras.ru>
---
 include/exec/windbgstub-utils.h |   40 +++++++++++++++++++
 include/exec/windbgstub.h       |    6 +++
 windbgstub-utils.c              |   83 +++++++++++++++++++++++++++++++++++++++
 3 files changed, 129 insertions(+)

diff --git a/include/exec/windbgstub-utils.h b/include/exec/windbgstub-utils.h
index e80b9cba8f..e7db062289 100644
--- a/include/exec/windbgstub-utils.h
+++ b/include/exec/windbgstub-utils.h
@@ -13,7 +13,47 @@
 #define WINDBGSTUB_UTILS_H
 
 #include "qemu/osdep.h"
+#include "qemu/error-report.h"
+#include "log.h"
+#include "cpu.h"
 #include "exec/windbgstub.h"
 #include "exec/windbgkd.h"
 
+#define DPRINTF(fmt, ...)                                                      \
+    do {                                                                       \
+        if (WINDBG_DPRINT) {                                                   \
+            qemu_log("windbg: " fmt, ##__VA_ARGS__);                           \
+        }                                                                      \
+    } while (0)
+
+#define WINDBG_ERROR(...) error_report("windbg: " __VA_ARGS__)
+
+#define FMT_ADDR "addr:0x" TARGET_FMT_lx
+#define FMT_ERR "Error:%d"
+
+#define PTR(var) ((uint8_t *) (&var))
+
+#define VMEM_ADDR(cpu, addr)                                                   \
+    ({                                                                         \
+        target_ulong _addr;                                                    \
+        cpu_memory_rw_debug(cpu, addr, PTR(_addr), sizeof(target_ulong), 0);   \
+        ldtul_p(&_addr);                                                       \
+    })
+
+#if TARGET_LONG_BITS == 64
+#define sttul_p(p, v) stq_p(p, v)
+#define ldtul_p(p) ldq_p(p)
+#else
+#define sttul_p(p, v) stl_p(p, v)
+#define ldtul_p(p) ldl_p(p)
+#endif
+
+typedef struct InitedAddr {
+    target_ulong addr;
+    bool is_init;
+} InitedAddr;
+
+const char *kd_api_name(int id);
+const char *kd_pkt_type_name(int id);
+
 #endif /* WINDBGSTUB_UTILS_H */
diff --git a/include/exec/windbgstub.h b/include/exec/windbgstub.h
index 9656c152ef..576acb1ee8 100644
--- a/include/exec/windbgstub.h
+++ b/include/exec/windbgstub.h
@@ -12,6 +12,12 @@
 #ifndef WINDBGSTUB_H
 #define WINDBGSTUB_H
 
+#ifdef DEBUG_WINDBG
+#define WINDBG_DPRINT true
+#else
+#define WINDBG_DPRINT false
+#endif
+
 int windbg_server_start(const char *device);
 
 #endif /* WINDBGSTUB_H */
diff --git a/windbgstub-utils.c b/windbgstub-utils.c
index 7f603b7f3f..968e5cb2dd 100644
--- a/windbgstub-utils.c
+++ b/windbgstub-utils.c
@@ -10,3 +10,86 @@
  */
 
 #include "exec/windbgstub-utils.h"
+
+static const char *kd_api_names[] = {
+    "DbgKdReadVirtualMemoryApi",
+    "DbgKdWriteVirtualMemoryApi",
+    "DbgKdGetContextApi",
+    "DbgKdSetContextApi",
+    "DbgKdWriteBreakPointApi",
+    "DbgKdRestoreBreakPointApi",
+    "DbgKdContinueApi",
+    "DbgKdReadControlSpaceApi",
+    "DbgKdWriteControlSpaceApi",
+    "DbgKdReadIoSpaceApi",
+    "DbgKdWriteIoSpaceApi",
+    "DbgKdRebootApi",
+    "DbgKdContinueApi2",
+    "DbgKdReadPhysicalMemoryApi",
+    "DbgKdWritePhysicalMemoryApi",
+    "DbgKdQuerySpecialCallsApi",
+    "DbgKdSetSpecialCallApi",
+    "DbgKdClearSpecialCallsApi",
+    "DbgKdSetInternalBreakPointApi",
+    "DbgKdGetInternalBreakPointApi",
+    "DbgKdReadIoSpaceExtendedApi",
+    "DbgKdWriteIoSpaceExtendedApi",
+    "DbgKdGetVersionApi",
+    "DbgKdWriteBreakPointExApi",
+    "DbgKdRestoreBreakPointExApi",
+    "DbgKdCauseBugCheckApi",
+    "",
+    "",
+    "",
+    "",
+    "",
+    "",
+    "DbgKdSwitchProcessor",
+    "DbgKdPageInApi",
+    "DbgKdReadMachineSpecificRegister",
+    "DbgKdWriteMachineSpecificRegister",
+    "OldVlm1",
+    "OldVlm2",
+    "DbgKdSearchMemoryApi",
+    "DbgKdGetBusDataApi",
+    "DbgKdSetBusDataApi",
+    "DbgKdCheckLowMemoryApi",
+    "DbgKdClearAllInternalBreakpointsApi",
+    "DbgKdFillMemoryApi",
+    "DbgKdQueryMemoryApi",
+    "DbgKdSwitchPartition",
+    "DbgKdWriteCustomBreakpointApi",
+    "DbgKdGetContextExApi",
+    "DbgKdSetContextExApi",
+    "DbgKdUnknownApi",
+};
+
+static const char *kd_packet_type_names[] = {
+    "PACKET_TYPE_UNUSED",
+    "PACKET_TYPE_KD_STATE_CHANGE32",
+    "PACKET_TYPE_KD_STATE_MANIPULATE",
+    "PACKET_TYPE_KD_DEBUG_IO",
+    "PACKET_TYPE_KD_ACKNOWLEDGE",
+    "PACKET_TYPE_KD_RESEND",
+    "PACKET_TYPE_KD_RESET",
+    "PACKET_TYPE_KD_STATE_CHANGE64",
+    "PACKET_TYPE_KD_POLL_BREAKIN",
+    "PACKET_TYPE_KD_TRACE_IO",
+    "PACKET_TYPE_KD_CONTROL_REQUEST",
+    "PACKET_TYPE_KD_FILE_IO",
+    "PACKET_TYPE_MAX",
+};
+
+const char *kd_api_name(int id)
+{
+    return (id >= DbgKdMinimumManipulate && id < DbgKdMaximumManipulate)
+        ? kd_api_names[id - DbgKdMinimumManipulate]
+        : kd_api_names[DbgKdMaximumManipulate - DbgKdMinimumManipulate];
+}
+
+const char *kd_pkt_type_name(int id)
+{
+    return (id >= 0 && id < PACKET_TYPE_MAX)
+        ? kd_packet_type_names[id]
+        : kd_packet_type_names[PACKET_TYPE_MAX - 1];
+}


