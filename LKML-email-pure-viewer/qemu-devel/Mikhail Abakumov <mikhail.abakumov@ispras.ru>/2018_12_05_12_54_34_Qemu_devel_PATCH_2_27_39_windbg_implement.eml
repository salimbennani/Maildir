Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 06 Dec 2018 08:52:42 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 80B625804C1
	for <like.xu@linux.intel.com>; Wed,  5 Dec 2018 05:06:35 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga008-1.jf.intel.com with ESMTP; 05 Dec 2018 05:06:35 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AKf2+qBYw4pZ/L2FOW9Xmv8P/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZrsm6bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjmk8qxlSgLniD?=
 =?us-ascii?q?0fOjA57m/ZhM9+g6BVoB2vqBNw34HabpyNNPd8fK3Qcs4WSGRdUslPTCxMGZ+8?=
 =?us-ascii?q?YokVAuYdIepVtYvwql0TphW+HwmsA+bvxydPiH/33q060/4uEQDC3Ac9A98Bq2?=
 =?us-ascii?q?7brNboNKcXVuC10rTDwDLGb/NX2jf96JLHchElof2WR71/atDeyUoyFwPAiVWQ?=
 =?us-ascii?q?t5foPzKO1uQVqWiU9fFgWfi1i246sgx8pCWkyMQ0ioTRmI4Z1lPJ+T9kzIooJt?=
 =?us-ascii?q?C0UlB3bNCkHZdKqi2XNZN6T8AiTm1ypSo3xaMKtYSmcCQXypkr3QDTZ+KGfoWO?=
 =?us-ascii?q?/xntTvyeIS1ii3JgYL+/hwi98UynyuDkUsm00U1KrjZektXWuXAN0QHT5tKASv?=
 =?us-ascii?q?tn8UetwTeP1wbN5eFYOU04i7bXJp07zrIti5Yesl7PEjH4lUj2lqOaa0cp9vCt?=
 =?us-ascii?q?6+v9Y7XmopGcN5VzigH7Kqkug9KwAeElMgQXQmeU5/q826Pn/UHgW7pKieA2kq?=
 =?us-ascii?q?/Fv5/EPsQXoaq5Aw5W0ok98Rq+ACqm3cwcnXkGKlJFZR2Gg5LoO1HIPPD3E/O/?=
 =?us-ascii?q?j06wnzdswvDLJbvhApLLLnjMlrfhYKxx60lGyAo81dxf/Y5bCqkdIPLvXU/8rN?=
 =?us-ascii?q?jYDh46MwOq2ermB8h925gaWWKOBK+ZLazTvUWJ5uIpP+mDeosVtCzhJPgi4v69?=
 =?us-ascii?q?xUI/gkIXKKm1wYMMOjf/GvV9P17fZ33qjdEcV2AQsU07Re3ujVSEFjlLe3e1Wb?=
 =?us-ascii?q?l7/zw+FceqAJnOQtOQhqec1nK+F5xSemcUE12JDDLkepuJX7IWZTuPL9R9ujoD?=
 =?us-ascii?q?U7enVskmzx75rxLwybdsMr/J/DYFv4noztl/6r7vkkQr+DlpSsiQzWyJZ2dzmG?=
 =?us-ascii?q?wOWnkxxq8sj1Z6zwKm0Kt4iv1cXfVZ7vBUVwAkfcrZzu96AtH2HAvLd9SUTVG4?=
 =?us-ascii?q?atS9GSs4VZQr3oldMA5GB9y+g0WbjGKRCLgPmunTCQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0CjAAAJzAdchxHrdtBkHgEGBwaBUQkLA?=
 =?us-ascii?q?YEwgmKDeYh4iy+BaJJENIR5gXMUGBSDLIEPA4MUIjQJDQEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BCgsJCBsOL4I2BQIDGAmCXAMDAQIgBB8KKQMDAQIGAQEkAiIEAgIDAUMQGQWDH?=
 =?us-ascii?q?IICAQMBpHN8M4orgQuLE4FXP4FEgiqIOoJXAo97M5AoBwKCIASEIosUikqGZSy?=
 =?us-ascii?q?YUoFGgg1NMoEBCFaBToInFxKODm+BB4kmgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0CjAAAJzAdchxHrdtBkHgEGBwaBUQkLAYEwgmKDeYh4iy+?=
 =?us-ascii?q?BaJJENIR5gXMUGBSDLIEPA4MUIjQJDQEDAQEBAQEBAgETAQEBCgsJCBsOL4I2B?=
 =?us-ascii?q?QIDGAmCXAMDAQIgBB8KKQMDAQIGAQEkAiIEAgIDAUMQGQWDHIICAQMBpHN8M4o?=
 =?us-ascii?q?rgQuLE4FXP4FEgiqIOoJXAo97M5AoBwKCIASEIosUikqGZSyYUoFGgg1NMoEBC?=
 =?us-ascii?q?FaBToInFxKODm+BB4kmgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,317,1539673200"; 
   d="scan'208";a="42834144"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 05 Dec 2018 05:06:21 -0800
Received: from localhost ([::1]:34122 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gUWse-0000QB-FZ
	for like.xu@linux.intel.com; Wed, 05 Dec 2018 08:06:20 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:34493)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <mikhail.abakumov@ispras.ru>) id 1gUWhK-0002ya-UP
	for qemu-devel@nongnu.org; Wed, 05 Dec 2018 07:54:42 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <mikhail.abakumov@ispras.ru>) id 1gUWhJ-0006qX-Bq
	for qemu-devel@nongnu.org; Wed, 05 Dec 2018 07:54:38 -0500
Received: from mail.ispras.ru ([83.149.199.45]:50622)
	by eggs.gnu.org with esmtp (Exim 4.71)
	(envelope-from <mikhail.abakumov@ispras.ru>) id 1gUWhI-0006pa-Qh
	for qemu-devel@nongnu.org; Wed, 05 Dec 2018 07:54:37 -0500
Received: from Misha-PC.lan02.inno (unknown [85.142.117.226])
	by mail.ispras.ru (Postfix) with ESMTPSA id 0CAF0540082;
	Wed,  5 Dec 2018 15:54:36 +0300 (MSK)
From: Mikhail Abakumov <mikhail.abakumov@ispras.ru>
To: qemu-devel@nongnu.org
Date: Wed, 05 Dec 2018 15:54:34 +0300
Message-ID: <154401447439.8440.5765466463496877485.stgit@Misha-PC.lan02.inno>
In-Reply-To: <154401431697.8440.845616703562380651.stgit@Misha-PC.lan02.inno>
References: <154401431697.8440.845616703562380651.stgit@Misha-PC.lan02.inno>
User-Agent: StGit/0.17.1-dirty
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 3.x [fuzzy]
X-Received-From: 83.149.199.45
Subject: [Qemu-devel] [PATCH 2 27/39] windbg: implement
 kd_api_get_context_ex and kd_api_set_context_ex
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: sw@weilnetz.de, lprosek@redhat.com, dovgaluk@ispras.ru,
	rkagan@virtuozzo.com, pbonzini@redhat.com, den@openvz.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Signed-off-by: Mikhail Abakumov <mikhail.abakumov@ispras.ru>
Signed-off-by: Pavel Dovgalyuk <dovgaluk@ispras.ru>
---
 include/exec/windbgstub-utils.h |    2 +
 target/i386/windbgstub.c        |   90 ++++++++++++++++++++++++++++++++++++---
 windbgstub.c                    |    8 +++
 3 files changed, 93 insertions(+), 7 deletions(-)

diff --git a/include/exec/windbgstub-utils.h b/include/exec/windbgstub-utils.h
index a88e013de9..6936fd0ffb 100644
--- a/include/exec/windbgstub-utils.h
+++ b/include/exec/windbgstub-utils.h
@@ -71,6 +71,8 @@ void kd_api_read_virtual_memory(CPUState *cs, PacketData *pd);
 void kd_api_write_virtual_memory(CPUState *cs, PacketData *pd);
 void kd_api_get_context(CPUState *cs, PacketData *pd);
 void kd_api_set_context(CPUState *cs, PacketData *pd);
+void kd_api_get_context_ex(CPUState *cs, PacketData *pd);
+void kd_api_set_context_ex(CPUState *cs, PacketData *pd);
 void kd_api_unsupported(CPUState *cs, PacketData *pd);
 
 DBGKD_ANY_WAIT_STATE_CHANGE *kd_state_change_exc(CPUState *cs);
diff --git a/target/i386/windbgstub.c b/target/i386/windbgstub.c
index 900950495f..76cdc1d9a7 100644
--- a/target/i386/windbgstub.c
+++ b/target/i386/windbgstub.c
@@ -884,18 +884,57 @@ static int fun_name(CPUState *cs, uint8_t *buf, int buf_size,                  \
     return 0;                                                                  \
 }
 
-__attribute__ ((unused)) /* unused yet */
 GEN_WINDBG_CONTEXT_RW(windbg_read_context, false)
-
-__attribute__ ((unused)) /* unused yet */
 GEN_WINDBG_CONTEXT_RW(windbg_write_context, true)
-
-__attribute__ ((unused)) /* unused yet */
 GEN_WINDBG_KSPEC_REGS_RW(windbg_read_ks_regs, false)
-
-__attribute__ ((unused)) /* unused yet */
 GEN_WINDBG_KSPEC_REGS_RW(windbg_write_ks_regs, true)
 
+static int windbg_rw_context_ex(CPUState *cs, uint8_t *buf, int buf_size,
+                                int offset, int len, bool is_read)
+{
+    int context_len;
+    int ks_regs_len;
+    int err = -1;
+
+    if (offset < sizeof(CPU_KPROCESSOR_STATE)) {
+        len = MIN(len, sizeof(CPU_KPROCESSOR_STATE) - offset);
+
+        context_len = MAX(0, (int) (sizeof(CPU_CONTEXT) - offset));
+        ks_regs_len = len - context_len;
+
+        if (context_len > 0) {
+            if (is_read) {
+                err = windbg_read_context(cs, buf, context_len, offset,
+                                          context_len);
+            } else {
+                err = windbg_write_context(cs, buf, context_len, offset,
+                                           context_len);
+            }
+
+            if (err) {
+                return err;
+            }
+        }
+
+        if (ks_regs_len > 0) {
+            offset += context_len - sizeof(CPU_CONTEXT);
+            if (is_read) {
+                err = windbg_read_ks_regs(cs, buf + context_len, ks_regs_len,
+                                          offset, ks_regs_len);
+            } else {
+                err = windbg_write_ks_regs(cs, buf + context_len, ks_regs_len,
+                                           offset, ks_regs_len);
+            }
+
+            if (err) {
+                return err;
+            }
+        }
+    }
+
+    return err;
+}
+
 void kd_api_get_context(CPUState *cs, PacketData *pd)
 {
     int err;
@@ -923,6 +962,43 @@ void kd_api_set_context(CPUState *cs, PacketData *pd)
     }
 }
 
+void kd_api_get_context_ex(CPUState *cs, PacketData *pd)
+{
+    DBGKD_CONTEXT_EX *ctx = &pd->m64.u.ContextEx;
+    uint32_t offset = ldl_p(&ctx->Offset);
+    uint32_t len = MIN(ldl_p(&ctx->ByteCount),
+                       PACKET_MAX_SIZE - sizeof(DBGKD_MANIPULATE_STATE64));
+    int err;
+
+    err = windbg_rw_context_ex(cs, pd->extra, len, offset, len, true);
+
+    if (err) {
+        len = 0;
+        pd->m64.ReturnStatus = STATUS_UNSUCCESSFUL;
+    }
+
+    pd->extra_size = len;
+    stl_p(&ctx->BytesCopied, len);
+}
+
+void kd_api_set_context_ex(CPUState *cs, PacketData *pd)
+{
+    DBGKD_CONTEXT_EX *ctx = &pd->m64.u.ContextEx;
+    uint32_t offset = ldl_p(&ctx->Offset);
+    uint32_t len = MIN(ldl_p(&ctx->ByteCount), pd->extra_size);
+    int err;
+
+    err = windbg_rw_context_ex(cs, pd->extra, len, offset, len, false);
+
+    if (err) {
+        len = 0;
+        pd->m64.ReturnStatus = STATUS_UNSUCCESSFUL;
+    }
+
+    pd->extra_size = 0;
+    stl_p(&ctx->BytesCopied, len);
+}
+
 static bool find_KPCR(CPUState *cs)
 {
     X86CPU *cpu = X86_CPU(cs);
diff --git a/windbgstub.c b/windbgstub.c
index 70ebf3c0ad..e9d759cddf 100644
--- a/windbgstub.c
+++ b/windbgstub.c
@@ -165,6 +165,14 @@ static void windbg_process_manipulate_packet(WindbgState *state)
         kd_api_set_context(cs, data);
         break;
 
+    case DbgKdGetContextExApi:
+        kd_api_get_context_ex(cs, data);
+        break;
+
+    case DbgKdSetContextExApi:
+        kd_api_set_context_ex(cs, data);
+        break;
+
     default:
         kd_api_unsupported(cs, data);
         break;


