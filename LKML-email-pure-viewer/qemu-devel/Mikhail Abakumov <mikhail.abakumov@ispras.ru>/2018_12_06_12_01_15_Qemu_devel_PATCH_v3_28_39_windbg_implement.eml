Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:45:39 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id E0C5B580443
	for <like.xu@linux.intel.com>; Thu,  6 Dec 2018 04:34:04 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga003-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 04:34:04 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AqJ9DlRSO5vVQdSu58XEZtPSLotpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa6zYRSN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4qF2QxHqlS?=
 =?us-ascii?q?gHLSY0/mHJhMJ+j6xUohyhqBJwzIHIb4+bKeJ+c6Hfc94VWGZMUNpdWDJaAo6n?=
 =?us-ascii?q?c4sCDfAMMfpEo4TnpVYDqwa1Cwm2BOPozz9Fnnj43aw50+QhCw7G3QggFM8SvX?=
 =?us-ascii?q?vPttr1N7oSUeWyzKnW0D7OaPZW2Tb+6IjIaB8hoPWMUahqfsXK00YvFB7FjlCX?=
 =?us-ascii?q?qYz7JD6V1/8Ns3CB7+V6TuKjkXQnqxxorzWp28wiiZHJi5oLxlzY9ih12ps5Kc?=
 =?us-ascii?q?C7RUJhf9KpHptduzuHO4Z0Ws8vQGFltDwnxrAJp5K3ZjUGxIklyhLFdfCLbYmF?=
 =?us-ascii?q?7xT+X+iLOzh4nmhqeLenihay70egzur8W9Gw0FZLtSpFjsLMumoC1xzV98iLUP?=
 =?us-ascii?q?x9/l2u2TqX1gDT7P9LIVwsmKbFN5IswaQ8mocOvUnABCP6hkv7ga+Mekk5+OWk?=
 =?us-ascii?q?8+Hnba/npp+YOY90kAb+MqE2l8ymH+s4NxUOU3GG9uuiyr3s40n5TKxRgf0xj6?=
 =?us-ascii?q?nZtozVKtoApqK+Bw9V04Uj5AilAzapzdQVhX0HLFNDeBKagInlIVDOIPbkDfih?=
 =?us-ascii?q?h1Sgiitkx/fDPrD6BJXNKX7DkLjnfbZg8UJczxAzzd9H65JOFr4BOO7zWlP2tN?=
 =?us-ascii?q?HACh85Mg+0zPj9BNRyy4MTQmaPAq6fMKPPvl6E/OMvI++QZIALvDbxMeQq5/nr?=
 =?us-ascii?q?jSxxpFkGYKP83YcLcGvqWbNiIl6FejzqhdEOF3pMuRAxC+njiVmHWDgUYG6uXq?=
 =?us-ascii?q?U6/XYiBYe7SIvOWI2p04GHxzqxS5hfZ2RaDQKVHHL1MomJRfoILTifO9JsiSAs?=
 =?us-ascii?q?U7+nRIk8kxa0u1jh1rBlI+HIrzAero/pz9Nv5ufexi01oCV5CtnY32yTQmVcmG?=
 =?us-ascii?q?QOSDkrmqdlrh9T0FCGhI15gPxRFNgbzvlAURo/MoCUm+l7CND7WwaHd92AS0uj?=
 =?us-ascii?q?RcuOACopVNsqhcUTNRUuU+6+hwzOinL5S4QekKaGUcQ5?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ChAACAFglcmBHrdtBkHgEGBwaBUQkLA?=
 =?us-ascii?q?YEwgmKDeoh4jjiRJTSEeYFzFBgUgyyEKiI0CQ0BAwEBAQEBAQIBEwEBAQEBCAs?=
 =?us-ascii?q?LBhsOL4I2BQIDGAmCXAMDAQIgBB8KKQMDAQIGAQEkAh8DBAICAwFDEBAJBYMcg?=
 =?us-ascii?q?gIBAwGlUHwziiqBC4sTgVc/gRGCXYg6glcCj30zkC8HAoIgBIQjixeKS4ZqLJh?=
 =?us-ascii?q?fgUaCDU0ygQEIVoFOgicXEo4Ob4EHiHCBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0ChAACAFglcmBHrdtBkHgEGBwaBUQkLAYEwgmKDeoh4jji?=
 =?us-ascii?q?RJTSEeYFzFBgUgyyEKiI0CQ0BAwEBAQEBAQIBEwEBAQEBCAsLBhsOL4I2BQIDG?=
 =?us-ascii?q?AmCXAMDAQIgBB8KKQMDAQIGAQEkAh8DBAICAwFDEBAJBYMcggIBAwGlUHwziiq?=
 =?us-ascii?q?BC4sTgVc/gRGCXYg6glcCj30zkC8HAoIgBIQjixeKS4ZqLJhfgUaCDU0ygQEIV?=
 =?us-ascii?q?oFOgicXEo4Ob4EHiHCBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,322,1539673200"; 
   d="scan'208";a="55176733"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 06 Dec 2018 04:34:04 -0800
Received: from localhost ([::1]:40496 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gUsqx-0006ad-Ab
	for like.xu@linux.intel.com; Thu, 06 Dec 2018 07:34:03 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:42021)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <mikhail.abakumov@ispras.ru>) id 1gUsLO-0000pJ-OZ
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 07:01:30 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <mikhail.abakumov@ispras.ru>) id 1gUsLJ-0005rP-9E
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 07:01:26 -0500
Received: from mail.ispras.ru ([83.149.199.45]:60352)
	by eggs.gnu.org with esmtp (Exim 4.71)
	(envelope-from <mikhail.abakumov@ispras.ru>) id 1gUsLI-0005r6-RB
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 07:01:21 -0500
Received: from Misha-PC.lan02.inno (unknown [85.142.117.226])
	by mail.ispras.ru (Postfix) with ESMTPSA id 266E7540082;
	Thu,  6 Dec 2018 15:01:20 +0300 (MSK)
From: Mikhail Abakumov <mikhail.abakumov@ispras.ru>
To: qemu-devel@nongnu.org
Date: Thu, 06 Dec 2018 15:01:15 +0300
Message-ID: <154409767531.5432.754426674425811776.stgit@Misha-PC.lan02.inno>
In-Reply-To: <154409751316.5432.3325938832238028060.stgit@Misha-PC.lan02.inno>
References: <154409751316.5432.3325938832238028060.stgit@Misha-PC.lan02.inno>
User-Agent: StGit/0.17.1-dirty
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 3.x [fuzzy]
X-Received-From: 83.149.199.45
Subject: [Qemu-devel] [PATCH v3 28/39] windbg: implement
 kd_api_read_control_space and kd_api_write_control_space
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: sw@weilnetz.de, lprosek@redhat.com, dovgaluk@ispras.ru,
	rkagan@virtuozzo.com, pbonzini@redhat.com, den@openvz.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Signed-off-by: Mikhail Abakumov <mikhail.abakumov@ispras.ru>
Signed-off-by: Pavel Dovgalyuk <dovgaluk@ispras.ru>
---
 include/exec/windbgstub-utils.h |    2 +
 target/i386/windbgstub.c        |   81 +++++++++++++++++++++++++++++++++++++++
 windbgstub.c                    |    8 ++++
 3 files changed, 91 insertions(+)

diff --git a/include/exec/windbgstub-utils.h b/include/exec/windbgstub-utils.h
index 6936fd0ffb..2781a54044 100644
--- a/include/exec/windbgstub-utils.h
+++ b/include/exec/windbgstub-utils.h
@@ -71,6 +71,8 @@ void kd_api_read_virtual_memory(CPUState *cs, PacketData *pd);
 void kd_api_write_virtual_memory(CPUState *cs, PacketData *pd);
 void kd_api_get_context(CPUState *cs, PacketData *pd);
 void kd_api_set_context(CPUState *cs, PacketData *pd);
+void kd_api_read_control_space(CPUState *cs, PacketData *pd);
+void kd_api_write_control_space(CPUState *cs, PacketData *pd);
 void kd_api_get_context_ex(CPUState *cs, PacketData *pd);
 void kd_api_set_context_ex(CPUState *cs, PacketData *pd);
 void kd_api_unsupported(CPUState *cs, PacketData *pd);
diff --git a/target/i386/windbgstub.c b/target/i386/windbgstub.c
index 76cdc1d9a7..6d2e7de746 100644
--- a/target/i386/windbgstub.c
+++ b/target/i386/windbgstub.c
@@ -962,6 +962,87 @@ void kd_api_set_context(CPUState *cs, PacketData *pd)
     }
 }
 
+void kd_api_read_control_space(CPUState *cs, PacketData *pd)
+{
+    DBGKD_READ_MEMORY64 *mem = &pd->m64.u.ReadMemory;
+    target_ulong addr = ldtul_p(&mem->TargetBaseAddress);
+    uint32_t len = MIN(ldl_p(&mem->TransferCount),
+                       PACKET_MAX_SIZE - sizeof(DBGKD_MANIPULATE_STATE64));
+    int err = 0;
+
+#ifdef TARGET_X86_64
+
+    switch (addr) {
+    case AMD64_DEBUG_CONTROL_SPACE_KPCR:
+        addr = KPCR.addr;
+        len = sizeof(target_ulong);
+        err = cpu_memory_rw_debug(cs, addr, pd->extra, len, 0);
+        break;
+
+    case AMD64_DEBUG_CONTROL_SPACE_KPRCB:
+        addr = VMEM_ADDR(cs, KPCR.addr + OFFSET_KPRCB);
+        len = sizeof(target_ulong);
+        err = cpu_memory_rw_debug(cs, addr, pd->extra, len, 0);
+        break;
+
+    case AMD64_DEBUG_CONTROL_SPACE_KSPECIAL:
+        len = MIN(len, sizeof(CPU_KSPECIAL_REGISTERS));
+        err = windbg_read_ks_regs(cs, pd->extra, len, 0, len);
+        break;
+
+    case AMD64_DEBUG_CONTROL_SPACE_KTHREAD:
+        addr = VMEM_ADDR(cs, addr + OFFSET_KPRCB_CURRTHREAD);
+        len = sizeof(target_ulong);
+        err = cpu_memory_rw_debug(cs, addr, pd->extra, len, 0);
+        break;
+    }
+
+#else /* TARGET_I386 */
+
+    err = windbg_rw_context_ex(cs, pd->extra, len, addr, len, true);
+
+#endif /* TARGET_I386 */
+
+    if (err) {
+        len = 0;
+        pd->m64.ReturnStatus = STATUS_UNSUCCESSFUL;
+    }
+
+    pd->extra_size = len;
+    stl_p(&mem->ActualBytesRead, len);
+}
+
+void kd_api_write_control_space(CPUState *cs, PacketData *pd)
+{
+    DBGKD_WRITE_MEMORY64 *mem = &pd->m64.u.WriteMemory;
+    target_ulong addr = ldtul_p(&mem->TargetBaseAddress);
+    uint32_t len = MIN(ldl_p(&mem->TransferCount), pd->extra_size);
+    int err = 0;
+
+#ifdef TARGET_X86_64
+
+    if (addr == AMD64_DEBUG_CONTROL_SPACE_KSPECIAL) {
+        len = MIN(len, sizeof(CPU_KSPECIAL_REGISTERS));
+        err = windbg_write_ks_regs(cs, pd->extra, len, 0, len);
+    } else {
+        err = 1;
+    }
+
+#else /* TARGET_I386 */
+
+    err = windbg_rw_context_ex(cs, pd->extra, len, addr, len, false);
+
+#endif /* TARGET_I386 */
+
+    if (err) {
+        len = 0;
+        pd->m64.ReturnStatus = STATUS_UNSUCCESSFUL;
+    }
+
+    pd->extra_size = 0;
+    stl_p(&mem->ActualBytesWritten, len);
+}
+
 void kd_api_get_context_ex(CPUState *cs, PacketData *pd)
 {
     DBGKD_CONTEXT_EX *ctx = &pd->m64.u.ContextEx;
diff --git a/windbgstub.c b/windbgstub.c
index e9d759cddf..328a04735f 100644
--- a/windbgstub.c
+++ b/windbgstub.c
@@ -165,6 +165,14 @@ static void windbg_process_manipulate_packet(WindbgState *state)
         kd_api_set_context(cs, data);
         break;
 
+    case DbgKdReadControlSpaceApi:
+        kd_api_read_control_space(cs, data);
+        break;
+
+    case DbgKdWriteControlSpaceApi:
+        kd_api_write_control_space(cs, data);
+        break;
+
     case DbgKdGetContextExApi:
         kd_api_get_context_ex(cs, data);
         break;


