Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 08:45:45 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 651815802E4
	for <like.xu@linux.intel.com>; Thu, 29 Nov 2018 06:55:30 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga001-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 06:55:30 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3ADH7syhwZ28l/Qd7XCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?2u8WIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDwULs6Wymt771zRRHoli?=
 =?us-ascii?q?kJOT03/2PZisN+g61UvB2vqQFnw4PWYo+YO+dyc63BcdwEXmpMRdpRWi5bD4+g?=
 =?us-ascii?q?c4cCFegMMOBFpIf9vVsOqh6+CBGrCuPuyT9IhmX53aw+0+88DQzJxxYvH9ETsH?=
 =?us-ascii?q?TRq9X1KroZXOewzKnJzjXDb+lZ2Tb56ITSaB8uuuuDXbFtccrUzkkvCRjIjlSL?=
 =?us-ascii?q?qYz9JTOazP8Nv3KB7+p9TO+ijXMspQJpojW32MsglorEipgIxlzZ9ih12pg5KN?=
 =?us-ascii?q?O4RUJhfNKpEoNcuiKaOodsX88vTH9ktDwnxrEbu5O3ZjYGxIomyhPZdveJaZKH?=
 =?us-ascii?q?4gj5W+aUOTp4hGxqeLa4hxuq9Uigy/b8VtWv0FpQoSpFlMTMumoK1xzJ5ciLUv?=
 =?us-ascii?q?p9/kG/1jaTzw3f9P1ILEMumabGNpIswaQ8moQdvEnDBCP6hUf7gLeTdko+++io?=
 =?us-ascii?q?7+rnYq/hpp+ZL4J0kx/xMqEzmsCmHOs3LBYOUHaf+eilz7Lj+lD5QLNWgfIoia?=
 =?us-ascii?q?nVt5TaJcUYpqGnGQNU3Zsj5g67Dzen1tQYgHYGIEhEeBKBk4jmJVXOLOrkAve4?=
 =?us-ascii?q?hlShizFrx/fAPr3uBJXNM2LPkLD7fbZy80Jc0hY8zchD55JIDbEMOPbzWk7ytN?=
 =?us-ascii?q?PGFBM4PBG0zv3jCNV80IMeRG2ODrWYMKPUrV+H+OYvL/OQa48SvTauY8Uj/OPk?=
 =?us-ascii?q?2H8lhUcGL+7u2ZoMdGv+GPNgLEOEJ332jZAEGGYOuwM4C+vylFyFVyUUfnu3Qu?=
 =?us-ascii?q?cw6y82DNGbC5zeTNWoib2FwCDpB5BTeyVKB06BFTLyepyZVuwQQCSVJMBnj3oD?=
 =?us-ascii?q?T7f2UJIr1xylqFrnzaF6JPHf4CwSuMHf041s6ujO0B0/6zFwJ8Ka1W6LUidzhG?=
 =?us-ascii?q?xbaSUx2fVaoE99w1aHmYFyiv9FENtNr6dMUwQ6PJ/YieVwAtPvXwXfVtaSUEyv?=
 =?us-ascii?q?WZO8HGdiHZoK39YSbhMlSJ2ZhRfZ0n/yDg=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0DcAABP/f9bhxHrdtBkHgEGBwaBUQkLA?=
 =?us-ascii?q?YEwgmKDeYh3iymBaIEhkRw0hHiBcxQYFIITgigDgzYiNAkNAQMBAQEBAQECARM?=
 =?us-ascii?q?BAQEKCwkIGw4vgjYFAgMYCYJcAwMBAiAEHwopAwMBAgYBASQCIgQCAgMBQxAZB?=
 =?us-ascii?q?YMcggIBAwGmB3wziiyBC4sLgVc/gREzgiqIOoJXAo9qMZAIBwKCHQSEIYsIikC?=
 =?us-ascii?q?GXCyYIoFGgg1NMoEBCFaBToInF44gb4EHi0OBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0DcAABP/f9bhxHrdtBkHgEGBwaBUQkLAYEwgmKDeYh3iym?=
 =?us-ascii?q?BaIEhkRw0hHiBcxQYFIITgigDgzYiNAkNAQMBAQEBAQECARMBAQEKCwkIGw4vg?=
 =?us-ascii?q?jYFAgMYCYJcAwMBAiAEHwopAwMBAgYBASQCIgQCAgMBQxAZBYMcggIBAwGmB3w?=
 =?us-ascii?q?ziiyBC4sLgVc/gREzgiqIOoJXAo9qMZAIBwKCHQSEIYsIikCGXCyYIoFGgg1NM?=
 =?us-ascii?q?oEBCFaBToInF44gb4EHi0OBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,295,1539673200"; 
   d="scan'208";a="53847455"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 29 Nov 2018 06:55:29 -0800
Received: from localhost ([::1]:54598 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gSNiy-0005iA-Ta
	for like.xu@linux.intel.com; Thu, 29 Nov 2018 09:55:28 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:54181)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <mikhail.abakumov@ispras.ru>) id 1gSNLE-0006h8-RZ
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 09:31:02 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <mikhail.abakumov@ispras.ru>) id 1gSNLD-00020O-Rr
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 09:30:56 -0500
Received: from mail.ispras.ru ([83.149.199.45]:40048)
	by eggs.gnu.org with esmtp (Exim 4.71)
	(envelope-from <mikhail.abakumov@ispras.ru>) id 1gSNLD-0001sw-EY
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 09:30:55 -0500
Received: from Misha-PC.lan02.inno (unknown [85.142.117.226])
	by mail.ispras.ru (Postfix) with ESMTPSA id A803D5401FC;
	Thu, 29 Nov 2018 17:30:44 +0300 (MSK)
From: Mikhail Abakumov <mikhail.abakumov@ispras.ru>
To: qemu-devel@nongnu.org
Date: Thu, 29 Nov 2018 17:30:42 +0300
Message-ID: <154350184211.8036.11928187976370255901.stgit@Misha-PC.lan02.inno>
In-Reply-To: <154350164526.8036.12623669071583857903.stgit@Misha-PC.lan02.inno>
References: <154350164526.8036.12623669071583857903.stgit@Misha-PC.lan02.inno>
User-Agent: StGit/0.17.1-dirty
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 3.x [fuzzy]
X-Received-From: 83.149.199.45
Subject: [Qemu-devel] [PATCH 34/39] windbg: implement kd_api_get_version
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: sw@weilnetz.de, lprosek@redhat.com, dovgaluk@ispras.ru,
	rkagan@virtuozzo.com, pbonzini@redhat.com, den@openvz.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Signed-off-by: Mikhail Abakumov <mikhail.abakumov@ispras.ru>
Signed-off-by: Pavel Dovgalyuk <dovgaluk@ispras.ru>
---
 include/exec/windbgstub-utils.h |    1 +
 target/i386/windbgstub.c        |   61 +++++++++++++++++++++++++++++++++++++++
 windbgstub.c                    |    4 +++
 3 files changed, 66 insertions(+)

diff --git a/include/exec/windbgstub-utils.h b/include/exec/windbgstub-utils.h
index fa67a7048d..adfc9936f3 100644
--- a/include/exec/windbgstub-utils.h
+++ b/include/exec/windbgstub-utils.h
@@ -80,6 +80,7 @@ void kd_api_read_io_space(CPUState *cs, PacketData *pd);
 void kd_api_write_io_space(CPUState *cs, PacketData *pd);
 void kd_api_read_physical_memory(CPUState *cs, PacketData *pd);
 void kd_api_write_physical_memory(CPUState *cs, PacketData *pd);
+void kd_api_get_version(CPUState *cs, PacketData *pd);
 void kd_api_clear_all_internal_breakpoints(CPUState *cs, PacketData *pd);
 void kd_api_get_context_ex(CPUState *cs, PacketData *pd);
 void kd_api_set_context_ex(CPUState *cs, PacketData *pd);
diff --git a/target/i386/windbgstub.c b/target/i386/windbgstub.c
index c982eff590..a5be1bc158 100644
--- a/target/i386/windbgstub.c
+++ b/target/i386/windbgstub.c
@@ -15,6 +15,9 @@
 #ifdef TARGET_X86_64
 #define OFFSET_KPCR_SELF 0x18
 #define OFFSET_KPCR_LOCK_ARRAY 0x28
+#define OFFSET_KDBG_LIST 0x0
+#define OFFSET_KDBG_KERNBASE 0x18
+#define OFFSET_KDBG_MODULELIST 0x48
 #define OFFSET_KPRCB 0x20
 #define OFFSET_KPRCB_CURRTHREAD 0x8
 #else  /* TARGET_I386 */
@@ -1080,6 +1083,64 @@ void kd_api_set_context_ex(CPUState *cs, PacketData *pd)
     stl_p(&ctx->BytesCopied, len);
 }
 
+void kd_api_get_version(CPUState *cs, PacketData *pd)
+{
+    DBGKD_GET_VERSION64 *kdver = (DBGKD_GET_VERSION64 *) (PTR(pd->m64) + 0x10);
+#ifdef TARGET_X86_64
+    target_ulong kdbg = kdDebuggerDataBlock.addr;
+    target_ulong dDataList = VMEM_ADDR(cs, kdbg + OFFSET_KDBG_LIST);
+    target_ulong kernbase = VMEM_ADDR(cs, kdbg + OFFSET_KDBG_KERNBASE);
+    target_ulong modules = VMEM_ADDR(cs, kdbg + OFFSET_KDBG_MODULELIST);
+
+    /* TODO: Fix this hardcoded value.
+     * Receives 0xF if the target's operating system is a free build,
+     * and 0xC if it is a checked build.
+     */
+    stw_p(&kdver->MajorVersion, 0xF);
+    /* TODO: Fix this hardcoded value. Needs NtBuildNumber. How to get it? */
+    stw_p(&kdver->MinorVersion, 0x1db1);
+    stb_p(&kdver->ProtocolVersion, DBGKD_64BIT_PROTOCOL_VERSION2);
+    /* TODO: Fix this hardcoded value. */
+    stb_p(&kdver->KdSecondaryVersion, 0);
+    stw_p(&kdver->Flags,
+          DBGKD_VERS_FLAG_MP | DBGKD_VERS_FLAG_DATA | DBGKD_VERS_FLAG_PTR64);
+    stw_p(&kdver->MachineType, IMAGE_FILE_MACHINE_AMD64);
+    stb_p(&kdver->MaxPacketType, PACKET_TYPE_MAX);
+    stb_p(&kdver->MaxStateChange,
+          DbgKdMaximumStateChange - DbgKdMinimumStateChange);
+    stb_p(&kdver->MaxManipulate,
+          DbgKdMaximumManipulate - DbgKdMinimumManipulate);
+    /* FIXME: Maybe DBGKD_SIMULATION_EXDI? */
+    stb_p(&kdver->Simulation, DBGKD_SIMULATION_NONE);
+    stw_p(&kdver->Unused[0], 0);
+    sttul_p(&kdver->KernBase, kernbase);
+    sttul_p(&kdver->PsLoadedModuleList, modules);
+    sttul_p(&kdver->DebuggerDataList, dDataList);
+#else /* TARGET_I386 */
+    int err = cpu_memory_rw_debug(cs, kdVersion.addr, (uint8_t *) kdver,
+                                  sizeof(DBGKD_MANIPULATE_STATE64) - 0x10, 0);
+    if (!err) {
+        stw_p(&kdver->MajorVersion, kdver->MajorVersion);
+        stw_p(&kdver->MinorVersion, kdver->MinorVersion);
+        stb_p(&kdver->ProtocolVersion, kdver->ProtocolVersion);
+        stb_p(&kdver->KdSecondaryVersion, kdver->KdSecondaryVersion);
+        stw_p(&kdver->Flags, kdver->Flags);
+        stw_p(&kdver->MachineType, kdver->MachineType);
+        stb_p(&kdver->MaxPacketType, kdver->MaxPacketType);
+        stb_p(&kdver->MaxStateChange, kdver->MaxStateChange);
+        stb_p(&kdver->MaxManipulate, kdver->MaxManipulate);
+        stb_p(&kdver->Simulation, kdver->Simulation);
+        stw_p(&kdver->Unused[0], kdver->Unused[0]);
+        sttul_p(&kdver->KernBase, kdver->KernBase);
+        sttul_p(&kdver->PsLoadedModuleList, kdver->PsLoadedModuleList);
+        sttul_p(&kdver->DebuggerDataList, kdver->DebuggerDataList);
+    } else {
+        pd->m64.ReturnStatus = STATUS_UNSUCCESSFUL;
+        WINDBG_ERROR("get_version: " FMT_ERR, err);
+    }
+#endif /* TARGET_I386 */
+}
+
 static bool find_KPCR(CPUState *cs)
 {
     X86CPU *cpu = X86_CPU(cs);
diff --git a/windbgstub.c b/windbgstub.c
index 25331f218f..366856bc81 100644
--- a/windbgstub.c
+++ b/windbgstub.c
@@ -212,6 +212,10 @@ static void windbg_process_manipulate_packet(WindbgState *state)
         kd_api_write_physical_memory(cs, data);
         break;
 
+    case DbgKdGetVersionApi:
+        kd_api_get_version(cs, data);
+        break;
+
     case DbgKdClearAllInternalBreakpointsApi:
         kd_api_clear_all_internal_breakpoints(cs, data);
         return;


