Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 11 Dec 2018 08:39:25 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 2CB945807A2
	for <like.xu@linux.intel.com>; Mon, 10 Dec 2018 08:18:31 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by fmsmga001-1.fm.intel.com with ESMTP; 10 Dec 2018 08:18:30 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AsN20VBbahuIW8Fz0xO6HVdH/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpsy/YR7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyxPDJ2y?=
 =?us-ascii?q?YYUMCOQOP+hYoZTlp1YMrxWzChSgCe3zxjBWnX/7xrE23/g7HA3axgEsA84CvX?=
 =?us-ascii?q?LJp9v1LqcSVuW1wbHHwjrdafNWxCr25ZXVchA6oPGMR6x/ftfMxkgvCgjIiUuQ?=
 =?us-ascii?q?ppLjPzOIzOgCqHWb7/FhVeK1lWEothx+ozi0y8crkInGnJ4aylTa+ilj3Ik1It?=
 =?us-ascii?q?i4RVd9bNW5E5VQrzmXO5VqTs4hWW1kpTs2x74ctZKlciUHyI4rywPdZvCfboSF?=
 =?us-ascii?q?7Q/vWPyMLTp3hX9pYq+ziwuz/ES6zuDxUNS/3kxQoSpfiNbMs2gA1xzN5ciDTf?=
 =?us-ascii?q?tw5kOh2TeU1wDP8eFIO080lazGK5I7xb4wjJUTvVzCHi/whkr2kLebels49uWr?=
 =?us-ascii?q?8ejrf6jqq5yGO4NqhAzzMr4iltG9DOggNwgBRWmb+eCy1L35+k35Ra1HjuQona?=
 =?us-ascii?q?ncrZDWPNkUqbCnAwBL1oYv8g2wDzC70NQegXYIMklFdBWDj4joOFHBPur0DPii?=
 =?us-ascii?q?g1m0lDdrxvbGPqDuA5nXL3jDlqvhcqh560JG1AUzytVf6olSCrEGJvLzVUnxtM?=
 =?us-ascii?q?HCAh8+KQy0zP7rCM9h2YMGRWKPHqiZPbvWsV+J5eIgPfOAZYAIuDvmL/gl5vju?=
 =?us-ascii?q?jWI2mFMHfKmp24cXZ268Hvh8P0qZZn/s0Z88F3wXtF8+UPDykw/FFjpSfGqpGa?=
 =?us-ascii?q?Q74D49FcShF4iEQ4mshLmI2mC8BoFXYWZdTUmBFGqte4iaVvNfVSSJP8U0lzUF?=
 =?us-ascii?q?UaSmGZYs0AzruALkxr4iNOfN5yADqbrl09564fCVkgs9oidpBcaQ2H3YUmdvg2?=
 =?us-ascii?q?kTTCU31q0snUso1FqFzO5ynudZD9Ff6+JhVR0zPprRied9DpS6ECfAddeARVLu?=
 =?us-ascii?q?eZPuPSowVNEwxZVGN0NmB/24gxzD1jbsCLgQwfjDIZUu+a/Yl1HpKct5wX/b0e?=
 =?us-ascii?q?F1ilA8ScZLHXeriq52607YAIufwGuDkKP/S6kawWbn6XyC12eCsFAQBBB9V7iD?=
 =?us-ascii?q?V20EZ1HbodjozkTYRrSqBPIsNQ4Xmp3KEbdDdtC81QYOf/zkItmLJjvpw2o=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAACjkA5cmBHrdtBZChkBAQEBAQEBA?=
 =?us-ascii?q?QEBAQEHAQEBAQEBgVEEAQEBAQELAYEwKoImEowTX4swmV4UgV8SAQEYFIdtIjQ?=
 =?us-ascii?q?JDQEDAQEBAQEBAgETAQEBAQEICwsGGw4jDII2BQIDGgEGglwDAwECJBkBAQQKK?=
 =?us-ascii?q?QECAwECBgEBSAgDAVMGARIFglFLggIBAwGkc4FsM4J2AQEFhxsIh3KEL4FXP4E?=
 =?us-ascii?q?Rh2gFDgGFco8/fYUoixMHAoIhBI8qAhaLQoV7LIh2j2cCBAIEBQITAYFGgg5NB?=
 =?us-ascii?q?B+DPIIbDBcSgziKcVSBB4lMVYF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0ABAACjkA5cmBHrdtBZChkBAQEBAQEBAQEBAQEHAQEBAQE?=
 =?us-ascii?q?BgVEEAQEBAQELAYEwKoImEowTX4swmV4UgV8SAQEYFIdtIjQJDQEDAQEBAQEBA?=
 =?us-ascii?q?gETAQEBAQEICwsGGw4jDII2BQIDGgEGglwDAwECJBkBAQQKKQECAwECBgEBSAg?=
 =?us-ascii?q?DAVMGARIFglFLggIBAwGkc4FsM4J2AQEFhxsIh3KEL4FXP4ERh2gFDgGFco8/f?=
 =?us-ascii?q?YUoixMHAoIhBI8qAhaLQoV7LIh2j2cCBAIEBQITAYFGgg5NBB+DPIIbDBcSgzi?=
 =?us-ascii?q?KcVSBB4lMVYF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,339,1539673200"; 
   d="scan'208";a="56840314"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 10 Dec 2018 08:18:30 -0800
Received: from localhost ([::1]:33555 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gWOGL-0002Xd-EY
	for like.xu@linux.intel.com; Mon, 10 Dec 2018 11:18:29 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:55424)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <venu.busireddy@oracle.com>) id 1gWOED-0001KG-5o
	for qemu-devel@nongnu.org; Mon, 10 Dec 2018 11:16:18 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <venu.busireddy@oracle.com>) id 1gWOE9-0001nG-CB
	for qemu-devel@nongnu.org; Mon, 10 Dec 2018 11:16:17 -0500
Received: from userp2130.oracle.com ([156.151.31.86]:46172)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <venu.busireddy@oracle.com>)
	id 1gWOE7-0001m4-Bh
	for qemu-devel@nongnu.org; Mon, 10 Dec 2018 11:16:13 -0500
Received: from pps.filterd (userp2130.oracle.com [127.0.0.1])
	by userp2130.oracle.com (8.16.0.22/8.16.0.22) with SMTP id
	wBAGCu8Z005030; Mon, 10 Dec 2018 16:16:08 GMT
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=oracle.com;
	h=from : to : cc :
	subject : date : message-id : in-reply-to : references;
	s=corp-2018-07-02; 
	bh=OaRDJtZKn9NN11FtcrNjxSEGyzqXSyu5KgHkBJAtLn8=;
	b=qe1VDO0iWcKaN+yaQ23/ef6xzH74UTMuaH6MtSoy1T/VSCyefMmKl/aUF5TV0INKvuoj
	LDNJZ9XKTrs/ZDdRSLCj7RwMAStpeFYOsfbbSSL4QlWFTHL2AwkWpGV+TFDlcVwthUTq
	SWW+17oa2OLLbMo0wCcPNO0XP4Ilk9Tpjl+yrtA96UmQ5CVy47A0/vbGQzVMHhLJv9m+
	8jyWUNwBhCvgmrwn+QW455+7aQmFJQ9j6EBKq1xkbtwj7xyclXLR5ysUeTWpbguoxK5/
	AHomPeyh22Wkd+aZQjqSHxoEoCQfrw7OFkFT7EOfN31AqNQc6nOAlMn9XQ3f76xAbDA+
	Zw== 
Received: from userv0022.oracle.com (userv0022.oracle.com [156.151.31.74])
	by userp2130.oracle.com with ESMTP id 2p85ctxwpr-1
	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=OK);
	Mon, 10 Dec 2018 16:16:08 +0000
Received: from aserv0122.oracle.com (aserv0122.oracle.com [141.146.126.236])
	by userv0022.oracle.com (8.14.4/8.14.4) with ESMTP id wBAGG7Ov022801
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256
	verify=OK); Mon, 10 Dec 2018 16:16:07 GMT
Received: from abhmp0003.oracle.com (abhmp0003.oracle.com [141.146.116.9])
	by aserv0122.oracle.com (8.14.4/8.14.4) with ESMTP id wBAGG75L022087;
	Mon, 10 Dec 2018 16:16:07 GMT
Received: from ban25x6uut28.us.oracle.com (/10.153.73.28)
	by default (Oracle Beehive Gateway v4.0)
	with ESMTP ; Mon, 10 Dec 2018 08:16:07 -0800
From: Venu Busireddy <venu.busireddy@oracle.com>
To: venu.busireddy@oracle.com, "Michael S. Tsirkin" <mst@redhat.com>,
	Marcel Apfelbaum <marcel@redhat.com>
Date: Mon, 10 Dec 2018 11:15:47 -0500
Message-Id: <1544458548-5986-3-git-send-email-venu.busireddy@oracle.com>
X-Mailer: git-send-email 1.8.3.1
In-Reply-To: <1544458548-5986-1-git-send-email-venu.busireddy@oracle.com>
References: <1544458548-5986-1-git-send-email-venu.busireddy@oracle.com>
X-Proofpoint-Virus-Version: vendor=nai engine=5900 definitions=9103
	signatures=668679
X-Proofpoint-Spam-Details: rule=notspam policy=default score=0 suspectscore=0
	malwarescore=0
	phishscore=0 bulkscore=0 spamscore=0 mlxscore=0 mlxlogscore=999
	adultscore=0 classifier=spam adjust=0 reason=mlx scancount=1
	engine=8.0.1-1810050000 definitions=main-1812100146
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 3.x [generic] [fuzzy]
X-Received-From: 156.151.31.86
Subject: [Qemu-devel] [PATCH 2/3] virtio_net: Add support for "Data Path
 Switching" during Live Migration.
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: virtio-dev@lists.oasis-open.org, qemu-devel@nongnu.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Added two new events, FAILOVER_PLUG_PRIMARY and FAILOVER_UNPLUG_PRIMARY.
The first is emitted when the guest negotiates the F_STANDBY feature
bit. The second is emitted when the virtio_net driver is removed, either
manually or as a result of guest reboot. Management stack can use these
events to determine when to plug/unplug the VF device to/from the guest.

Also, the Virtual Functions will be automatically removed from the guest
if the guest is rebooted. To properly identify the VFIO devices that
must be removed, a new property named "x-failover-primary" is added to
the vfio-pci devices. Only the vfio-pci devices that have this property
enabled are removed from the guest upon reboot.

Signed-off-by: Venu Busireddy <venu.busireddy@oracle.com>
---
 hw/acpi/pcihp.c                | 27 ++++++++++++++++++++++++++
 hw/net/virtio-net.c            | 23 ++++++++++++++++++++++
 hw/vfio/pci.c                  |  3 +++
 hw/vfio/pci.h                  |  1 +
 include/hw/pci/pci.h           |  1 +
 include/hw/virtio/virtio-net.h |  4 ++++
 qapi/net.json                  | 44 ++++++++++++++++++++++++++++++++++++++++++
 7 files changed, 103 insertions(+)

diff --git a/hw/acpi/pcihp.c b/hw/acpi/pcihp.c
index 80d42e1..2a3ffd3 100644
--- a/hw/acpi/pcihp.c
+++ b/hw/acpi/pcihp.c
@@ -176,6 +176,25 @@ static void acpi_pcihp_eject_slot(AcpiPciHpState *s, unsigned bsel, unsigned slo
     }
 }
 
+static void acpi_pcihp_cleanup_failover_primary(AcpiPciHpState *s, int bsel)
+{
+    BusChild *kid, *next;
+    PCIBus *bus = acpi_pcihp_find_hotplug_bus(s, bsel);
+
+    if (!bus) {
+        return;
+    }
+    QTAILQ_FOREACH_SAFE(kid, &bus->qbus.children, sibling, next) {
+        DeviceState *qdev = kid->child;
+        PCIDevice *pdev = PCI_DEVICE(qdev);
+        int slot = PCI_SLOT(pdev->devfn);
+
+        if (pdev->failover_primary) {
+            s->acpi_pcihp_pci_status[bsel].down |= (1U << slot);
+        }
+    }
+}
+
 static void acpi_pcihp_update_hotplug_bus(AcpiPciHpState *s, int bsel)
 {
     BusChild *kid, *next;
@@ -207,6 +226,14 @@ static void acpi_pcihp_update(AcpiPciHpState *s)
     int i;
 
     for (i = 0; i < ACPI_PCIHP_MAX_HOTPLUG_BUS; ++i) {
+        /*
+         * Set the acpi_pcihp_pci_status[].down bits of all the
+         * failover_primary devices so that the devices are ejected
+         * from the guest. We can't use the qdev_unplug() as well as the
+         * hotplug_handler to unplug the devices, because the guest may
+         * not be in a state to cooperate.
+         */
+        acpi_pcihp_cleanup_failover_primary(s, i);
         acpi_pcihp_update_hotplug_bus(s, i);
     }
 }
diff --git a/hw/net/virtio-net.c b/hw/net/virtio-net.c
index 411f8fb..d37f33c 100644
--- a/hw/net/virtio-net.c
+++ b/hw/net/virtio-net.c
@@ -248,6 +248,28 @@ static void virtio_net_drop_tx_queue_data(VirtIODevice *vdev, VirtQueue *vq)
     }
 }
 
+static void virtio_net_failover_notify_event(VirtIONet *n, uint8_t status)
+{
+    VirtIODevice *vdev = VIRTIO_DEVICE(n);
+
+    if (virtio_has_feature(vdev->guest_features, VIRTIO_NET_F_STANDBY)) {
+        gchar *path = object_get_canonical_path(OBJECT(n->qdev));
+        /*
+         * Emit the FAILOVER_PLUG_PRIMARY event
+         *   when the status transitions from 0 to VIRTIO_CONFIG_S_DRIVER_OK
+         * Emit the FAILOVER_UNPLUG_PRIMARY event
+         *   when the status transitions from VIRTIO_CONFIG_S_DRIVER_OK to 0
+         */
+        if ((status & VIRTIO_CONFIG_S_DRIVER_OK) &&
+                (!(vdev->status & VIRTIO_CONFIG_S_DRIVER_OK))) {
+            FAILOVER_NOTIFY_EVENT(plug, n, path);
+        } else if ((!(status & VIRTIO_CONFIG_S_DRIVER_OK)) &&
+                (vdev->status & VIRTIO_CONFIG_S_DRIVER_OK)) {
+            FAILOVER_NOTIFY_EVENT(unplug, n, path);
+        }
+    }
+}
+
 static void virtio_net_set_status(struct VirtIODevice *vdev, uint8_t status)
 {
     VirtIONet *n = VIRTIO_NET(vdev);
@@ -256,6 +278,7 @@ static void virtio_net_set_status(struct VirtIODevice *vdev, uint8_t status)
     uint8_t queue_status;
 
     virtio_net_vnet_endian_status(n, status);
+    virtio_net_failover_notify_event(n, status);
     virtio_net_vhost_status(n, status);
 
     for (i = 0; i < n->max_queues; i++) {
diff --git a/hw/vfio/pci.c b/hw/vfio/pci.c
index 5c7bd96..ce1f33c 100644
--- a/hw/vfio/pci.c
+++ b/hw/vfio/pci.c
@@ -3077,6 +3077,7 @@ static void vfio_realize(PCIDevice *pdev, Error **errp)
     vfio_register_err_notifier(vdev);
     vfio_register_req_notifier(vdev);
     vfio_setup_resetfn_quirk(vdev);
+    pdev->failover_primary = vdev->failover_primary;
 
     return;
 
@@ -3219,6 +3220,8 @@ static Property vfio_pci_dev_properties[] = {
                                    qdev_prop_nv_gpudirect_clique, uint8_t),
     DEFINE_PROP_OFF_AUTO_PCIBAR("x-msix-relocation", VFIOPCIDevice, msix_relo,
                                 OFF_AUTOPCIBAR_OFF),
+    DEFINE_PROP_BOOL("x-failover-primary", VFIOPCIDevice,
+                     failover_primary, false),
     /*
      * TODO - support passed fds... is this necessary?
      * DEFINE_PROP_STRING("vfiofd", VFIOPCIDevice, vfiofd_name),
diff --git a/hw/vfio/pci.h b/hw/vfio/pci.h
index b1ae4c0..06ca661 100644
--- a/hw/vfio/pci.h
+++ b/hw/vfio/pci.h
@@ -167,6 +167,7 @@ typedef struct VFIOPCIDevice {
     bool no_vfio_ioeventfd;
     bool enable_ramfb;
     VFIODisplay *dpy;
+    bool failover_primary;
 } VFIOPCIDevice;
 
 uint32_t vfio_pci_read_config(PCIDevice *pdev, uint32_t addr, int len);
diff --git a/include/hw/pci/pci.h b/include/hw/pci/pci.h
index e6514bb..b0111d1 100644
--- a/include/hw/pci/pci.h
+++ b/include/hw/pci/pci.h
@@ -351,6 +351,7 @@ struct PCIDevice {
     MSIVectorUseNotifier msix_vector_use_notifier;
     MSIVectorReleaseNotifier msix_vector_release_notifier;
     MSIVectorPollNotifier msix_vector_poll_notifier;
+    bool failover_primary;
 };
 
 void pci_register_bar(PCIDevice *pci_dev, int region_num,
diff --git a/include/hw/virtio/virtio-net.h b/include/hw/virtio/virtio-net.h
index 4d7f3c8..a697903 100644
--- a/include/hw/virtio/virtio-net.h
+++ b/include/hw/virtio/virtio-net.h
@@ -22,6 +22,10 @@
 #define VIRTIO_NET(obj) \
         OBJECT_CHECK(VirtIONet, (obj), TYPE_VIRTIO_NET)
 
+#define FAILOVER_NOTIFY_EVENT(type, n, path) \
+        qapi_event_send_failover_##type##_primary \
+                (!!n->netclient_name, n->netclient_name, path)
+
 #define TX_TIMER_INTERVAL 150000 /* 150 us */
 
 /* Limit the number of packets that can be sent via a single flush
diff --git a/qapi/net.json b/qapi/net.json
index 8f99fd9..04a9de9 100644
--- a/qapi/net.json
+++ b/qapi/net.json
@@ -683,3 +683,47 @@
 ##
 { 'event': 'NIC_RX_FILTER_CHANGED',
   'data': { '*name': 'str', 'path': 'str' } }
+
+##
+# @FAILOVER_PLUG_PRIMARY:
+#
+# Emitted when the guest successfully loads the driver after the STANDBY
+# feature bit is negotiated.
+#
+# @device: Indicates the virtio_net device.
+#
+# @path: Indicates the device path.
+#
+# Since: 3.0
+#
+# Example:
+#
+# <- {"timestamp": {"seconds": 1432121972, "microseconds": 744001},
+#     "event": "FAILOVER_PLUG_PRIMARY",
+#     "data": {"device": "net0", "path": "/machine/peripheral/net0/virtio-backend"} }
+#
+##
+{ 'event': 'FAILOVER_PLUG_PRIMARY',
+  'data': {'*device': 'str', 'path': 'str'} }
+
+##
+# @FAILOVER_UNPLUG_PRIMARY:
+#
+# Emitted when the guest resets the virtio_net driver.
+# The reset can be the result of either unloading the driver or a reboot.
+#
+# @device: Indicates the virtio_net device.
+#
+# @path: Indicates the device path.
+#
+# Since: 3.0
+#
+# Example:
+#
+# <- {"timestamp": {"seconds": 1432121972, "microseconds": 744001},
+#     "event": "FAILOVER_UNPLUG_PRIMARY",
+#     "data": {"device": "net0", "path": "/machine/peripheral/net0/virtio-backend"} }
+#
+##
+{ 'event': 'FAILOVER_UNPLUG_PRIMARY',
+  'data': {'*device': 'str', 'path': 'str'} }

