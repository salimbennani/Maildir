Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:41:58 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 30463580433
	for <like.xu@linux.intel.com>; Wed,  5 Dec 2018 23:23:20 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by fmsmga004-1.fm.intel.com with ESMTP; 05 Dec 2018 23:23:19 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A6l07ux9bMZJkzf9uRHKM819IXTAuvvDOBiVQ1KB2?=
 =?us-ascii?q?1eIcTK2v8tzYMVDF4r011RmVBdWds6oMotGVmpioYXYH75eFvSJKW713fDhBt/?=
 =?us-ascii?q?8rmRc9CtWOE0zxIa2iRSU7GMNfSA0tpCnjYgBaF8nkelLdvGC54yIMFRXjLwp1?=
 =?us-ascii?q?Ifn+FpLPg8it2O2+557ebx9UiDahfLh/MAi4oQLNu8cMnIBsMLwxyhzHontJf+?=
 =?us-ascii?q?RZ22ZlLk+Nkhj/+8m94odt/zxftPw9+cFAV776f7kjQrxDEDsmKWE169b1uhTF?=
 =?us-ascii?q?UACC+2ETUmQSkhpPHgjF8BT3VYr/vyfmquZw3jSRMNboRr4oRzut86ZrSAfpiC?=
 =?us-ascii?q?gZMT457HrXgdF0gK5CvR6tuwBzz4vSbYqINvRxY7ndcMsVSmpPXMlfVyJPDICi?=
 =?us-ascii?q?YYQTAOQPIP5Yoov/qVYBsBezCxWgC/30yjJTmn/2xLc33/g9HQ3a3gEtGc8Fvn?=
 =?us-ascii?q?TOrNXyMacfSeK6zK7OzTXMbfNW2Cr254nJch8/vPqBWqx/cc7WyUkvFgPFi0uf?=
 =?us-ascii?q?qZf+MjOa0+QCqWmb7+56We2zjG4nrhh8rz6yzckvkonEnpwZxkzH+Clj3Yo5ON?=
 =?us-ascii?q?61RFRlbdOqEJZcrTyWOoluTs88QmxkpCQ3x7gIuZO4ZycG1JEqyhHcZvGGfIWF?=
 =?us-ascii?q?5wzvWPqULDp9n31od7yyihCv+ka60OL8TNO70FNSoypFjNbMsncN2gTX6siGUf?=
 =?us-ascii?q?t94lyh1SyA1wDV9+FIO0c0lbDUK5I5w74wkIQcsVjbEyPohEn7j7Waelg59uWr?=
 =?us-ascii?q?8ejrfLvrq5+GO4NpiAzyKqEulda+AeQ8PAgORW+b+eGk2b3640L5RahKguQrna?=
 =?us-ascii?q?bHrpDVO8AbqreiDA9Sz4Yj7QqwACm90NgfmXkHLVFFdwydg4nmJlHDOPT4Dfa5?=
 =?us-ascii?q?g1SxnzZn3fHGPrv9AprTKnjPiqvufbF460NHzgozytZf551SCrEcOv7zXVXxtN?=
 =?us-ascii?q?PAAh8jLwO02/rnCMl61o4GXWKPA6yZP73IvV6H++IiOO2MZI4TuDbgJPkp/f/u?=
 =?us-ascii?q?jXklmVADeamlx4cYaHe9HqcuHkOCfHC5gssdCXxY+U06Tff2kxuEVjhcYWv0WL?=
 =?us-ascii?q?gzoTQyCYajBIGEQZixgbuHx2CiE5hLI2xLFF2IQkrubJiODvIFaSaOJZ14nzkZ?=
 =?us-ascii?q?ELSsVYIlkAujrRL30KZPKO3S9SsF85X5249u+ufRmBouoCFyFNmXyGqXTmt5zV?=
 =?us-ascii?q?8PEjo/xqt2p0BnxxGHzLJ1iuFwGtla5vcPWQA/ZrDGyOkvOtf0VQDANueIRR7y?=
 =?us-ascii?q?T9GhATA0Q8kZzNoHYkI7ENKn2EOQlxG2CqMYwuTYTKc/9bjRij2of55w?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BHBAB7zQhchxHrdtBkHQIfBQeBTQKBL?=
 =?us-ascii?q?4EtgSITg3qIeIsugg2JIAOOKoFzFBgUhECDFSI0CQ0BAwEBAQEBAQIBEwEBAQo?=
 =?us-ascii?q?LCQgbDiMMgjYFAgMaAQaCWwEBAQECAQECIAQZAQUKDB0BAgECAQIGAQEFBQsKA?=
 =?us-ascii?q?wICIgQCAgMBHQEBEQEFARwZBYMcgWkBAwgFCAEEmgo8iw18FgUBF4J3BYRAChk?=
 =?us-ascii?q?nDV2BNwIGEnmLExeBf4ERgX2BFYJXgiqDBIJXAokqhwdRhAJnikAuCY4Ugy4Yg?=
 =?us-ascii?q?VuFFIpBig6EdIlxDyGBJYINMxoIGxVsgjuCJxcSgziKYDQxgQeIZYF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0BHBAB7zQhchxHrdtBkHQIfBQeBTQKBL4EtgSITg3qIeIs?=
 =?us-ascii?q?ugg2JIAOOKoFzFBgUhECDFSI0CQ0BAwEBAQEBAQIBEwEBAQoLCQgbDiMMgjYFA?=
 =?us-ascii?q?gMaAQaCWwEBAQECAQECIAQZAQUKDB0BAgECAQIGAQEFBQsKAwICIgQCAgMBHQE?=
 =?us-ascii?q?BEQEFARwZBYMcgWkBAwgFCAEEmgo8iw18FgUBF4J3BYRAChknDV2BNwIGEnmLE?=
 =?us-ascii?q?xeBf4ERgX2BFYJXgiqDBIJXAokqhwdRhAJnikAuCY4Ugy4YgVuFFIpBig6EdIl?=
 =?us-ascii?q?xDyGBJYINMxoIGxVsgjuCJxcSgziKYDQxgQeIZYF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,321,1539673200"; 
   d="scan'208";a="56321594"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 05 Dec 2018 23:23:18 -0800
Received: from localhost ([::1]:39290 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gUo0E-000692-4Y
	for like.xu@linux.intel.com; Thu, 06 Dec 2018 02:23:18 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:52379)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <elohimes@gmail.com>) id 1gUnzy-0005tq-Ou
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 02:23:04 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <elohimes@gmail.com>) id 1gUnzx-0003Yy-Am
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 02:23:02 -0500
Received: from mail-yb1-xb43.google.com ([2607:f8b0:4864:20::b43]:36334)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <elohimes@gmail.com>) id 1gUnzw-0003Xz-TN
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 02:23:01 -0500
Received: by mail-yb1-xb43.google.com with SMTP id w203so6549159ybg.3
	for <qemu-devel@nongnu.org>; Wed, 05 Dec 2018 23:23:00 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
	h=mime-version:references:in-reply-to:from:date:message-id:subject:to
	:cc:content-transfer-encoding;
	bh=kyDpmpVn8yRYGkboS0+Uj1wnUQuCU4tJuE8KEv+PlyE=;
	b=H5IYv4iD1yNcuOHBdwWPF+Z7ata0+30cDnhujb21wFs51PQIHxKlEpQ3SrhguLHCCl
	z3u37AdeMB4ieyg2HqbyL7U8FJUdBE3kW8qpHDJ0dxrEx0fsttWRkHZHvmEr4idpvBSx
	QSk1RpKkFKnXf+hv9R5x8S370RaqSmQ9dY60HHPNDTyVBccspLCNrGCtr0Zy5dii3bdB
	sKgllA0p3cqXvdV3lHVEY2E7OMrY+kQGmmIbbXwPFrWg5sRY7FZtmbh1/VUp47kwkSBm
	QqQs5Lv2Vuc/HQVVfOWqypgEANt5I4ocGVqtRJoQyDlWpJFDrYcsDZGeA8UERMaOdFtH
	Qu8w==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:mime-version:references:in-reply-to:from:date
	:message-id:subject:to:cc:content-transfer-encoding;
	bh=kyDpmpVn8yRYGkboS0+Uj1wnUQuCU4tJuE8KEv+PlyE=;
	b=tJ6PTO/sltiuRdj5Xh6nUeROHo6Gjd7ZDdjbGBFiaVMcYpuqOFP49p7S6LvQ3G9Uan
	Usu+jLqQaIjNrgXfn0UY+9fQp69HiKspOuNicX4ProQVIbuwMuwKwZsXfbnc/gzrbxCy
	V3CokPuZ03PFKsPars3mdE6WnadqNAZ+EmD6ovJDCmD9B3DfxrXnq3WoiVIzNzNzYQKL
	Zq4CuFAkyBU1Sd1yOfwGRTSiNc4YNregODa/MYQQi/gZ90184VmCZC/NwuicVnkQjXEB
	VjSBlr6IqS6Xkwt/38B0G3AJ1jcDhQMQMdzH4qrZpT2CYuPHvagrWZnBWYcs+lR2ypfs
	V7gA==
X-Gm-Message-State: AA+aEWb65OuB7Uc9LpwRZV3Qnyb0Cm3bpxpVUpagLxdbxg6doNlOW0IZ
	4ZCVPwwrjsS74yt7JAolW5ZuqIOJLNwJuRZl90c=
X-Google-Smtp-Source: AFSGD/ULio40Mzyw/WQzqqtsH7enAg+8co23ABKduWb3FEUkRNouHDB52K7Jl94otdLg6OIXNAtNv+Fc5JMAdPJkfwo=
X-Received: by 2002:a25:c049:: with SMTP id
	c70-v6mr25547834ybf.382.1544080980165; 
	Wed, 05 Dec 2018 23:23:00 -0800 (PST)
MIME-Version: 1.0
References: <20181206063552.6701-1-xieyongji@baidu.com>
	<20181206063552.6701-3-xieyongji@baidu.com>
	<CAJ+F1CJtJi8GKOSFPr0M3j3ZCx2n3xR=Lmg=PAT+jJaDJkM_aw@mail.gmail.com>
In-Reply-To: <CAJ+F1CJtJi8GKOSFPr0M3j3ZCx2n3xR=Lmg=PAT+jJaDJkM_aw@mail.gmail.com>
From: Yongji Xie <elohimes@gmail.com>
Date: Thu, 6 Dec 2018 15:22:46 +0800
Message-ID: <CAONzpcbvoSdOTssddYmr46OVO686Ruja2i+Fm60BL31y6LOw3w@mail.gmail.com>
To: marcandre.lureau@gmail.com
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 2607:f8b0:4864:20::b43
Subject: Re: [Qemu-devel] [PATCH for-4.0 2/6] vhost-user: Add shared memory
 to record inflight I/O
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: zhangyu31@baidu.com, "Michael S. Tsirkin" <mst@redhat.com>,
	Xie Yongji <xieyongji@baidu.com>, lilin24@baidu.com,
	qemu-devel@nongnu.org, chaiwen@baidu.com, nixun@baidu.com
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Thu, 6 Dec 2018 at 15:19, Marc-Andr=C3=A9 Lureau
<marcandre.lureau@gmail.com> wrote:
>
> Hi
> On Thu, Dec 6, 2018 at 10:40 AM <elohimes@gmail.com> wrote:
> >
> > From: Xie Yongji <xieyongji@baidu.com>
> >
> > This introduces a new message VHOST_USER_SET_VRING_INFLIGHT
> > to support offering shared memory to backend to record
> > its inflight I/O.
> >
> > With this new message, the backend is able to restart without
> > missing I/O which would cause I/O hung for block device.
> >
> > Signed-off-by: Xie Yongji <xieyongji@baidu.com>
> > Signed-off-by: Chai Wen <chaiwen@baidu.com>
> > Signed-off-by: Zhang Yu <zhangyu31@baidu.com>
> > ---
> >  hw/virtio/vhost-user.c            | 69 +++++++++++++++++++++++++++++++
> >  hw/virtio/vhost.c                 |  8 ++++
> >  include/hw/virtio/vhost-backend.h |  4 ++
> >  include/hw/virtio/vhost-user.h    |  8 ++++
>
> Please update docs/interop/vhost-user.txt to describe the new message
>

Will do it in v2.

Thanks,
Yongji

> >  4 files changed, 89 insertions(+)
> >
> > diff --git a/hw/virtio/vhost-user.c b/hw/virtio/vhost-user.c
> > index e09bed0e4a..4c0e64891d 100644
> > --- a/hw/virtio/vhost-user.c
> > +++ b/hw/virtio/vhost-user.c
> > @@ -19,6 +19,7 @@
> >  #include "sysemu/kvm.h"
> >  #include "qemu/error-report.h"
> >  #include "qemu/sockets.h"
> > +#include "qemu/memfd.h"
> >  #include "sysemu/cryptodev.h"
> >  #include "migration/migration.h"
> >  #include "migration/postcopy-ram.h"
> > @@ -52,6 +53,7 @@ enum VhostUserProtocolFeature {
> >      VHOST_USER_PROTOCOL_F_CONFIG =3D 9,
> >      VHOST_USER_PROTOCOL_F_SLAVE_SEND_FD =3D 10,
> >      VHOST_USER_PROTOCOL_F_HOST_NOTIFIER =3D 11,
> > +    VHOST_USER_PROTOCOL_F_INFLIGHT_SHMFD =3D 12,
> >      VHOST_USER_PROTOCOL_F_MAX
> >  };
> >
> > @@ -89,6 +91,7 @@ typedef enum VhostUserRequest {
> >      VHOST_USER_POSTCOPY_ADVISE  =3D 28,
> >      VHOST_USER_POSTCOPY_LISTEN  =3D 29,
> >      VHOST_USER_POSTCOPY_END     =3D 30,
> > +    VHOST_USER_SET_VRING_INFLIGHT =3D 31,
>
> why VRING? it seems to be free/arbitrary memory area.
>
> Oh, I understand later that this has an explicit layout and behaviour
> later described in "libvhost-user: Support recording inflight I/O in
> shared memory"
>
> Please update the vhost-user spec first to describe expected usage/behavi=
our.
>
>
> >      VHOST_USER_MAX
> >  } VhostUserRequest;
> >
> > @@ -147,6 +150,11 @@ typedef struct VhostUserVringArea {
> >      uint64_t offset;
> >  } VhostUserVringArea;
> >
> > +typedef struct VhostUserVringInflight {
> > +    uint32_t size;
> > +    uint32_t idx;
> > +} VhostUserVringInflight;
> > +
> >  typedef struct {
> >      VhostUserRequest request;
> >
> > @@ -169,6 +177,7 @@ typedef union {
> >          VhostUserConfig config;
> >          VhostUserCryptoSession session;
> >          VhostUserVringArea area;
> > +        VhostUserVringInflight inflight;
> >  } VhostUserPayload;
> >
> >  typedef struct VhostUserMsg {
> > @@ -1739,6 +1748,58 @@ static bool vhost_user_mem_section_filter(struct=
 vhost_dev *dev,
> >      return result;
> >  }
> >
> > +static int vhost_user_set_vring_inflight(struct vhost_dev *dev, int id=
x)
> > +{
> > +    struct vhost_user *u =3D dev->opaque;
> > +
> > +    if (!virtio_has_feature(dev->protocol_features,
> > +                            VHOST_USER_PROTOCOL_F_INFLIGHT_SHMFD)) {
> > +        return 0;
> > +    }
> > +
> > +    if (!u->user->inflight[idx].addr) {
> > +        Error *err =3D NULL;
> > +
> > +        u->user->inflight[idx].size =3D qemu_real_host_page_size;
> > +        u->user->inflight[idx].addr =3D qemu_memfd_alloc("vhost-inflig=
ht",
> > +                                      u->user->inflight[idx].size,
> > +                                      F_SEAL_GROW | F_SEAL_SHRINK | F_=
SEAL_SEAL,
> > +                                      &u->user->inflight[idx].fd, &err=
);
> > +        if (err) {
> > +            error_report_err(err);
> > +            u->user->inflight[idx].addr =3D NULL;
> > +            return -1;
> > +        }
> > +    }
> > +
> > +    VhostUserMsg msg =3D {
> > +        .hdr.request =3D VHOST_USER_SET_VRING_INFLIGHT,
> > +        .hdr.flags =3D VHOST_USER_VERSION,
> > +        .payload.inflight.size =3D u->user->inflight[idx].size,
> > +        .payload.inflight.idx =3D idx,
> > +        .hdr.size =3D sizeof(msg.payload.inflight),
> > +    };
> > +
> > +    if (vhost_user_write(dev, &msg, &u->user->inflight[idx].fd, 1) < 0=
) {
> > +        return -1;
> > +    }
> > +
> > +    return 0;
> > +}
> > +
> > +void vhost_user_inflight_reset(VhostUserState *user)
> > +{
> > +    int i;
> > +
> > +    for (i =3D 0; i < VIRTIO_QUEUE_MAX; i++) {
> > +        if (!user->inflight[i].addr) {
> > +            continue;
> > +        }
> > +
> > +        memset(user->inflight[i].addr, 0, user->inflight[i].size);
> > +    }
> > +}
> > +
> >  VhostUserState *vhost_user_init(void)
> >  {
> >      VhostUserState *user =3D g_new0(struct VhostUserState, 1);
> > @@ -1756,6 +1817,13 @@ void vhost_user_cleanup(VhostUserState *user)
> >              munmap(user->notifier[i].addr, qemu_real_host_page_size);
> >              user->notifier[i].addr =3D NULL;
> >          }
> > +
> > +        if (user->inflight[i].addr) {
> > +            munmap(user->inflight[i].addr, user->inflight[i].size);
> > +            user->inflight[i].addr =3D NULL;
> > +            close(user->inflight[i].fd);
> > +            user->inflight[i].fd =3D -1;
> > +        }
> >      }
> >  }
> >
> > @@ -1790,4 +1858,5 @@ const VhostOps user_ops =3D {
> >          .vhost_crypto_create_session =3D vhost_user_crypto_create_sess=
ion,
> >          .vhost_crypto_close_session =3D vhost_user_crypto_close_sessio=
n,
> >          .vhost_backend_mem_section_filter =3D vhost_user_mem_section_f=
ilter,
> > +        .vhost_set_vring_inflight =3D vhost_user_set_vring_inflight,
> >  };
> > diff --git a/hw/virtio/vhost.c b/hw/virtio/vhost.c
> > index 569c4053ea..2ca7b4e841 100644
> > --- a/hw/virtio/vhost.c
> > +++ b/hw/virtio/vhost.c
> > @@ -973,6 +973,14 @@ static int vhost_virtqueue_start(struct vhost_dev =
*dev,
> >          return -errno;
> >      }
> >
> > +    if (dev->vhost_ops->vhost_set_vring_inflight) {
> > +        r =3D dev->vhost_ops->vhost_set_vring_inflight(dev, vhost_vq_i=
ndex);
> > +        if (r) {
> > +            VHOST_OPS_DEBUG("vhost_set_vring_inflight failed");
> > +            return -errno;
> > +        }
> > +    }
> > +
> >      state.num =3D virtio_queue_get_last_avail_idx(vdev, idx);
> >      r =3D dev->vhost_ops->vhost_set_vring_base(dev, &state);
> >      if (r) {
> > diff --git a/include/hw/virtio/vhost-backend.h b/include/hw/virtio/vhos=
t-backend.h
> > index 81283ec50f..8110e09089 100644
> > --- a/include/hw/virtio/vhost-backend.h
> > +++ b/include/hw/virtio/vhost-backend.h
> > @@ -104,6 +104,9 @@ typedef int (*vhost_crypto_close_session_op)(struct=
 vhost_dev *dev,
> >  typedef bool (*vhost_backend_mem_section_filter_op)(struct vhost_dev *=
dev,
> >                                                  MemoryRegionSection *s=
ection);
> >
> > +typedef int (*vhost_set_vring_inflight_op)(struct vhost_dev *dev,
> > +                                           int idx);
> > +
> >  typedef struct VhostOps {
> >      VhostBackendType backend_type;
> >      vhost_backend_init vhost_backend_init;
> > @@ -142,6 +145,7 @@ typedef struct VhostOps {
> >      vhost_crypto_create_session_op vhost_crypto_create_session;
> >      vhost_crypto_close_session_op vhost_crypto_close_session;
> >      vhost_backend_mem_section_filter_op vhost_backend_mem_section_filt=
er;
> > +    vhost_set_vring_inflight_op vhost_set_vring_inflight;
> >  } VhostOps;
> >
> >  extern const VhostOps user_ops;
> > diff --git a/include/hw/virtio/vhost-user.h b/include/hw/virtio/vhost-u=
ser.h
> > index fd660393a0..ff13433153 100644
> > --- a/include/hw/virtio/vhost-user.h
> > +++ b/include/hw/virtio/vhost-user.h
> > @@ -17,11 +17,19 @@ typedef struct VhostUserHostNotifier {
> >      bool set;
> >  } VhostUserHostNotifier;
> >
> > +typedef struct VhostUserInflight {
> > +    void *addr;
> > +    uint32_t size;
> > +    int fd;
> > +} VhostUserInflight;
> > +
> >  typedef struct VhostUserState {
> >      CharBackend *chr;
> >      VhostUserHostNotifier notifier[VIRTIO_QUEUE_MAX];
> > +    VhostUserInflight inflight[VIRTIO_QUEUE_MAX];
> >  } VhostUserState;
> >
> > +void vhost_user_inflight_reset(VhostUserState *user);
> >  VhostUserState *vhost_user_init(void);
> >  void vhost_user_cleanup(VhostUserState *user);
> >
> > --
> > 2.17.1
> >
> >
>
>
> --
> Marc-Andr=C3=A9 Lureau

