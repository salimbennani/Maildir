Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 12 Dec 2018 08:48:16 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga007.fm.intel.com (fmsmga007.fm.intel.com [10.253.24.52])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id DFCD35807A0
	for <like.xu@linux.intel.com>; Tue, 11 Dec 2018 07:36:38 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by fmsmga007-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 11 Dec 2018 07:36:38 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AhvB1NxFDFeXsIUMgUGnpM51GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ76pcu9bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJVyJPHJ+8?=
 =?us-ascii?q?YYUMAeoPP+lYrpXyqVQBohWjHQmhBuHhxzBVinL4waE1zf8hHBra3Aw5Bd8CrG?=
 =?us-ascii?q?jYoMnoOKoUTOu7zLPIzTLGb/5OxTry8pLIchcnofqRW7xwcMzRxlQ0FwzfjlSb?=
 =?us-ascii?q?tIvoMCmP2eQXtGib6fFtVeW0i2I9sQ5xpyCvydk2iobXmo0VzVXE9T1kwIYpJN?=
 =?us-ascii?q?24TkF7bcS4H5tXsiGXLo17Sd4hTWFwoCs21KEKtJ2hcCQX1ZgqxATTZ+KJfoWI?=
 =?us-ascii?q?+B7vSeScLS95iX9lYr6zmhK//VS6xuD9TMW4zktGojRdntnCqH8A1ADf582CR/?=
 =?us-ascii?q?Z54kis2yqA2gXN5uxGPU85l6/WJpE9zbErlJcetErDEyzolEnqiqKda18q9fKy?=
 =?us-ascii?q?6+v9Z7Xrvp+cOJFwigH5Kqkuns2/Af8kMggVRWSb9uK81KD58U3+WrVKgeU6kq?=
 =?us-ascii?q?jfsJ/EOcQWvrC1DxNW34o59hqzEjSr3M4GkXQJLF9JYg+LgorxN1HLOv/4DPO/?=
 =?us-ascii?q?g1q2kDdswvDLJqThDYvILnjeibvuYKhy61BCxwo31NxQ/JVUCqwHIP3vREDxr9?=
 =?us-ascii?q?vUDhs4Mwy33enrEtp81p4GVGKLA6+ZNr7SsFCS6uIuJemMeJEauDLnJ/c54P7u?=
 =?us-ascii?q?iGQ0mVkafamv0psXbm24Eu5hI0WDbnrgms0BHnsSvgoiUOzqj0WPUTpSZ3axQa?=
 =?us-ascii?q?0w/D46CJ+9AIfHR4CthqGB3SihEp1XYGBGFk6DEXPye4qYXPcMbXHaH8l6jzZR?=
 =?us-ascii?q?VaS9U5RzklaqtRTm0PxhKezb/DBesojsk9185unWnBd18iRoDsObyCaUQmRp22?=
 =?us-ascii?q?8FWTIyj515ulF3n1KK0KxkhK5BGNlOov9ETAo+cITR1vF3EMzaXAXHcdGUDlG8?=
 =?us-ascii?q?TYK9HDszQ9ktlsIIeFt3AN64jxrOjBatVvUMmrmWQZUu94ra2H7+Ids7zGzJnu?=
 =?us-ascii?q?F1llQjX45GL2iOgKl5+A7OQYnTnBPd356naakGlAvE5WuOyW7G6FlVTANqF6DM?=
 =?us-ascii?q?THwSYk/+qdX/71nFCbi0BuJjeiJFyNWeI6pQIvPzhFNNReyrbN3aYnmtkmaqQx?=
 =?us-ascii?q?iSz7WHbZHCa2QZ3SPNTkMDllZXtUmLNEAeGy6nrCqKEzFvPUjib0Pl7a91r3bt?=
 =?us-ascii?q?CgcMwh2HdQVKzb2u5h4KjP2ARrtH1agDozshtDx1AFv7x9/KBsCoqA9ofaEaat?=
 =?us-ascii?q?Q4thMP72PStwVnMtSAIqZui0QFdAI/61nv3BV+EIkGkcUsoH4w1w10AaaZ1lpb?=
 =?us-ascii?q?cHWfx5+maZPNLWyn1Rm1bKie/lDY3M2f6+9b4f0irFPLuxrvH086/m9q2N5Qy2?=
 =?us-ascii?q?aA55PFSgEVVMSiAQ4M6xFmquSCMWEG7ITO2CgpaPHsvw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0DBAQBG2Q9cmBHrdtBkgheBMSomgVwEM?=
 =?us-ascii?q?gqMaYpnSoMJjQiJToEkA08QARgUhy4iNAkNAQMBAQEBAQECARMBAQEBAQgLCwY?=
 =?us-ascii?q?bDiMMgjYFAgMaAQaCXAIBAwECDxUZAQEECikBAgMBAgYBAQEBRggDAS4lAgQBE?=
 =?us-ascii?q?gUdgjRLgWoDFQECApopKgKKB4FsM4J2AQEFgQUBg38YggkIjDsXgX+BEYJdixG?=
 =?us-ascii?q?QBpB3CYImjyAjEFB8j2SJI4EFjmQCBAIEBQIPBYFGgg4zGggbFYMngicXEoM4i?=
 =?us-ascii?q?hwBNnKBByGISVgBgR4BAQ?=
X-IPAS-Result: =?us-ascii?q?A0DBAQBG2Q9cmBHrdtBkgheBMSomgVwEMgqMaYpnSoMJjQi?=
 =?us-ascii?q?JToEkA08QARgUhy4iNAkNAQMBAQEBAQECARMBAQEBAQgLCwYbDiMMgjYFAgMaA?=
 =?us-ascii?q?QaCXAIBAwECDxUZAQEECikBAgMBAgYBAQEBRggDAS4lAgQBEgUdgjRLgWoDFQE?=
 =?us-ascii?q?CApopKgKKB4FsM4J2AQEFgQUBg38YggkIjDsXgX+BEYJdixGQBpB3CYImjyAjE?=
 =?us-ascii?q?FB8j2SJI4EFjmQCBAIEBQIPBYFGgg4zGggbFYMngicXEoM4ihwBNnKBByGISVg?=
 =?us-ascii?q?BgR4BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,342,1539673200"; 
   d="scan'208";a="56425234"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 11 Dec 2018 07:36:37 -0800
Received: from localhost ([::1]:38722 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gWk5M-0000dN-Qj
	for like.xu@linux.intel.com; Tue, 11 Dec 2018 10:36:36 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:57705)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <aaron@os.amperecomputing.com>) id 1gWjqY-0004XO-BU
	for qemu-devel@nongnu.org; Tue, 11 Dec 2018 10:21:20 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <aaron@os.amperecomputing.com>) id 1gWjqU-0001sd-3O
	for qemu-devel@nongnu.org; Tue, 11 Dec 2018 10:21:18 -0500
Received: from mail-eopbgr810104.outbound.protection.outlook.com
	([40.107.81.104]:19650
	helo=NAM01-BY2-obe.outbound.protection.outlook.com)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <aaron@os.amperecomputing.com>)
	id 1gWjqF-0001hW-Ni; Tue, 11 Dec 2018 10:21:00 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=amperemail.onmicrosoft.com; s=selector1-os-amperecomputing-com;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
	bh=SH5lIHOfuSg7ZqdGfL34eT4I//OcBi6/bOHyubJLhSQ=;
	b=kA4bVENihvja7vkVxNLmDOmn48QZNRrDCieNIPQfsyo8YJZg5I5fTnFwQPUYvnP2ZRWB2IQj9tu8Db7Offjy9q27uvR1X/pHgMyp1IP1U6FVabK0VGG4mZVSdhSchiPkqW4f3BK3NxRD1nRs8egc+XoEF8313Ck+WYj2yOTj+vM=
Received: from DM6PR01MB4825.prod.exchangelabs.com (20.177.218.222) by
	DM6PR01MB4601.prod.exchangelabs.com (20.177.216.78) with Microsoft SMTP
	Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
	15.20.1404.21; Tue, 11 Dec 2018 15:20:56 +0000
Received: from DM6PR01MB4825.prod.exchangelabs.com
	([fe80::9c7c:27c7:4cb7:f820]) by DM6PR01MB4825.prod.exchangelabs.com
	([fe80::9c7c:27c7:4cb7:f820%2]) with mapi id 15.20.1404.026;
	Tue, 11 Dec 2018 15:20:56 +0000
From: Aaron Lindsay <aaron@os.amperecomputing.com>
To: "qemu-arm@nongnu.org" <qemu-arm@nongnu.org>, Peter Maydell
	<peter.maydell@linaro.org>,
	Alistair Francis <alistair.francis@xilinx.com>, 
	Wei Huang <wei@redhat.com>,
	Peter Crosthwaite <crosthwaite.peter@gmail.com>, 
	Richard Henderson <richard.henderson@linaro.org>
Thread-Topic: [PATCH v10 14/14] target/arm: Send interrupts on PMU counter
	overflow
Thread-Index: AQHUkWUdr/WJq8auikKadmPIluyvUQ==
Date: Tue, 11 Dec 2018 15:20:56 +0000
Message-ID: <20181211151945.29137-15-aaron@os.amperecomputing.com>
References: <20181211151945.29137-1-aaron@os.amperecomputing.com>
In-Reply-To: <20181211151945.29137-1-aaron@os.amperecomputing.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-clientproxiedby: BYAPR11CA0041.namprd11.prod.outlook.com
	(2603:10b6:a03:80::18) To DM6PR01MB4825.prod.exchangelabs.com
	(2603:10b6:5:6b::30)
authentication-results: spf=none (sender IP is )
	smtp.mailfrom=aaron@os.amperecomputing.com; 
x-ms-exchange-messagesentrepresentingtype: 1
x-originating-ip: [65.190.6.212]
x-ms-publictraffictype: Email
x-microsoft-exchange-diagnostics: 1; DM6PR01MB4601;
	6:ZjkoilytwauTnUhL4IlInsRN8dbcLphNC4TMR1EByiFV02xJN5R07ZTo8mqe37tkbbmmazXetxSgt/4EymSM8GNhNtUm9qgfzruymAlGyoOMUjYqowgbbcMnE8zbIPPlge2ELQbJXExehHHF4v40vWSOWVtObt0ImHyFTq3IYhRa2+XRSVCRHGM39ZWAZ8f2r50ZfGhs0H7M5ncozor0UfjtqHJsYKBxHCsjcKog4SZqBEuM8m6BEp866xq5aI08j/fQr9L/SgArq8qj9ZNoJXXAL0U9M6hi3D41tksh8M9ZhSyE/aRb9lssQwbjGVZxVyMN6czPgctZH8lAVXMwYct8RVS/B7KTdOWdfbm5O/2mBIhC2FgrWzOfyo9H+8lZLPQioAscVbOVvHGzQKP9tXRHtj2hV5WV09it/tCOdrSUiR/sMaUNYEnpxybH5kOaoiB1SQSVDMmjp22gdx0GKQ==;
	5:WRf4c0mc3ZqnB9vJHV/9L++v6K2F02Lm1rXmklETklr5udGgsozDoRJ9eke5BA3c5B3l3qa5fLrEv2U7vAFl0JlNzQikyumhfm2CQibopWWqtNku3R3MdPH0yPlch2ne891GLtTfOVYvyBYfSKbDdGeBLOP3jyY2EeNaz0p1siY=;
	7:O7cKiMAo3S37JkZnT2NLxHiptp4TzJpH62vy5Toa3zTBreOfzwC2AR6z0lZB7+w7/Fp8xNy7+Ok8ydPyF/zU2k1v5LW/zGXYtNY/PEFINwrogf4OZ8DlaxkkcJuA2ldf3dW1hcb+0KtL0agKifWsNQ==
x-ms-office365-filtering-correlation-id: 81352c97-6755-427c-7934-08d65f7c3f3f
x-microsoft-antispam: BCL:0; PCL:0;
	RULEID:(2390098)(7020095)(4652040)(8989299)(5600074)(711020)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(2017052603328)(7153060)(7193020);
	SRVR:DM6PR01MB4601; 
x-ms-traffictypediagnostic: DM6PR01MB4601:
x-microsoft-antispam-prvs: <DM6PR01MB46011AAA2D338839ED6678A58AA60@DM6PR01MB4601.prod.exchangelabs.com>
x-ms-exchange-senderadcheck: 1
x-exchange-antispam-report-cfa-test: BCL:0; PCL:0;
	RULEID:(8211001083)(6040522)(2401047)(5005006)(8121501046)(3231455)(999002)(944501520)(52105112)(10201501046)(3002001)(93006095)(93001095)(148016)(149066)(150057)(6041310)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123562045)(20161123558120)(20161123564045)(20161123560045)(201708071742011)(7699051)(76991095);
	SRVR:DM6PR01MB4601; BCL:0; PCL:0; RULEID:; SRVR:DM6PR01MB4601; 
x-forefront-prvs: 08831F51DC
x-forefront-antispam-report: SFV:NSPM;
	SFS:(10019020)(396003)(39850400004)(366004)(346002)(376002)(136003)(199004)(189003)(66066001)(7416002)(54906003)(106356001)(2906002)(97736004)(110136005)(305945005)(105586002)(316002)(5660300001)(3846002)(256004)(39060400002)(68736007)(14454004)(1076002)(7736002)(76176011)(11346002)(2501003)(99286004)(52116002)(6116002)(4326008)(6512007)(53936002)(81166006)(81156014)(8936002)(102836004)(26005)(8676002)(186003)(14444005)(71190400001)(446003)(486006)(6436002)(4744004)(86362001)(25786009)(6486002)(2616005)(386003)(476003)(478600001)(6506007)(71200400001);
	DIR:OUT; SFP:1102; SCL:1; SRVR:DM6PR01MB4601;
	H:DM6PR01MB4825.prod.exchangelabs.com; FPR:; SPF:None; LANG:en;
	PTR:InfoNoRecords; A:0; MX:1; 
x-microsoft-antispam-message-info: a6Tp5HwBV6N/edO8gPR/j5ZRSCAuOG62C39/gtMFZCpGLcb/JM4PM5gRlA0pS73aG//g6ubK3lb2yyT9QP9tYQGxfY9F/zWtovQ3XWdzKPQ+n8bjAxqaIf1U+Bqo4Fj/XgsyC7VxBiYCES28tiLA5xEfbiNUlcktpW9Xi6Vq6pQevHOapIdUxqh5nLHhnQ8P3xjcEkOumzGGHKGxAxdNsw3m/m/paXX2eSKU+RSljfYoV4zncjIY1c6yMFgBH/mugiW0gV0zeMKiddah6iCHTrdUIw07T6Y5YeZPzo8xLOnNb9j6c1ZPAn9dq/WnXutR
spamdiagnosticoutput: 1:99
spamdiagnosticmetadata: NSPM
Content-Type: text/plain; charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
X-OriginatorOrg: os.amperecomputing.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 81352c97-6755-427c-7934-08d65f7c3f3f
X-MS-Exchange-CrossTenant-originalarrivaltime: 11 Dec 2018 15:20:56.5274 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: 3bc2b170-fd94-476d-b0ce-4229bdc904a7
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM6PR01MB4601
X-detected-operating-system: by eggs.gnu.org: Windows 7 or 8 [fuzzy]
X-Received-From: 40.107.81.104
Subject: [Qemu-devel] [PATCH v10 14/14] target/arm: Send interrupts on PMU
 counter overflow
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Aaron Lindsay <aaron@os.amperecomputing.com>,
	Michael Spradling <mspradli@codeaurora.org>,
	"qemu-devel@nongnu.org" <qemu-devel@nongnu.org>,
	Digant Desai <digantd@codeaurora.org>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Setup a QEMUTimer to get a callback when we expect counters to next
overflow and trigger an interrupt at that time.

Signed-off-by: Aaron Lindsay <alindsay@codeaurora.org>
Signed-off-by: Aaron Lindsay <aaron@os.amperecomputing.com>
---
 target/arm/cpu.c    |  12 +++++
 target/arm/cpu.h    |   8 +++
 target/arm/helper.c | 126 +++++++++++++++++++++++++++++++++++++++++---
 3 files changed, 140 insertions(+), 6 deletions(-)

diff --git a/target/arm/cpu.c b/target/arm/cpu.c
index 208a08e867..85cec59fc9 100644
--- a/target/arm/cpu.c
+++ b/target/arm/cpu.c
@@ -827,6 +827,13 @@ static void arm_cpu_finalizefn(Object *obj)
         QLIST_REMOVE(hook, node);
         g_free(hook);
     }
+#ifndef CONFIG_USER_ONLY
+    if (cpu->pmu_timer) {
+        timer_del(cpu->pmu_timer);
+        timer_deinit(cpu->pmu_timer);
+        timer_free(cpu->pmu_timer);
+    }
+#endif
 }
=20
 static void arm_cpu_realizefn(DeviceState *dev, Error **errp)
@@ -1028,6 +1035,11 @@ static void arm_cpu_realizefn(DeviceState *dev, Erro=
r **errp)
             arm_register_pre_el_change_hook(cpu, &pmu_pre_el_change, 0);
             arm_register_el_change_hook(cpu, &pmu_post_el_change, 0);
         }
+
+#ifndef CONFIG_USER_ONLY
+        cpu->pmu_timer =3D timer_new_ns(QEMU_CLOCK_VIRTUAL, arm_pmu_timer_=
cb,
+                cpu);
+#endif
     } else {
         cpu->id_aa64dfr0 &=3D ~0xf00;
         cpu->pmceid0 =3D 0;
diff --git a/target/arm/cpu.h b/target/arm/cpu.h
index a479625790..24821c8292 100644
--- a/target/arm/cpu.h
+++ b/target/arm/cpu.h
@@ -733,6 +733,9 @@ struct ARMCPU {
=20
     /* Timers used by the generic (architected) timer */
     QEMUTimer *gt_timer[NUM_GTIMERS];
+    /* Timer used by the PMU. Its state is restored after migration by
+     * pmu_op_finish() - it does not need other handling during migration =
*/
+    QEMUTimer *pmu_timer;
     /* GPIO outputs for generic timer */
     qemu_irq gt_timer_outputs[NUM_GTIMERS];
     /* GPIO output for GICv3 maintenance interrupt signal */
@@ -990,6 +993,11 @@ void pmccntr_op_finish(CPUARMState *env);
 void pmu_op_start(CPUARMState *env);
 void pmu_op_finish(CPUARMState *env);
=20
+/**
+ * Called when a PMU counter is due to overflow
+ */
+void arm_pmu_timer_cb(void *opaque);
+
 /**
  * Functions to register as EL change hooks for PMU mode filtering
  */
diff --git a/target/arm/helper.c b/target/arm/helper.c
index 881d49c662..2466f91995 100644
--- a/target/arm/helper.c
+++ b/target/arm/helper.c
@@ -977,6 +977,7 @@ static const ARMCPRegInfo v6_cp_reginfo[] =3D {
 /* Definitions for the PMU registers */
 #define PMCRN_MASK  0xf800
 #define PMCRN_SHIFT 11
+#define PMCRLC  0x40
 #define PMCRDP  0x10
 #define PMCRD   0x8
 #define PMCRC   0x4
@@ -996,6 +997,8 @@ static const ARMCPRegInfo v6_cp_reginfo[] =3D {
                                PMXEVTYPER_M | PMXEVTYPER_MT | \
                                PMXEVTYPER_EVTCOUNT)
=20
+#define PMEVCNTR_OVERFLOW_MASK ((uint64_t)1 << 31)
+
 #define PMCCFILTR             0xf8000000
 #define PMCCFILTR_M           PMXEVTYPER_M
 #define PMCCFILTR_EL0         (PMCCFILTR | PMCCFILTR_M)
@@ -1020,6 +1023,11 @@ typedef struct pm_event {
      * counters hold a difference from the return value from this function
      */
     uint64_t (*get_count)(CPUARMState *);
+    /* Return how many nanoseconds it will take (at a minimum) for count e=
vents
+     * to occur. A negative value indicates the counter will never overflo=
w, or
+     * that the counter has otherwise arranged for the overflow bit to be =
set
+     * and the PMU interrupt to be raised on overflow. */
+    int64_t (*ns_per_count)(uint64_t);
 } pm_event;
=20
 static bool event_always_supported(CPUARMState *env)
@@ -1036,6 +1044,11 @@ static uint64_t swinc_get_count(CPUARMState *env)
     return 0;
 }
=20
+static int64_t swinc_ns_per(uint64_t ignored)
+{
+    return -1;
+}
+
 /*
  * Return the underlying cycle count for the PMU cycle counters. If we're =
in
  * usermode, simply return 0.
@@ -1051,6 +1064,11 @@ static uint64_t cycles_get_count(CPUARMState *env)
 }
=20
 #ifndef CONFIG_USER_ONLY
+static int64_t cycles_ns_per(uint64_t cycles)
+{
+    return (ARM_CPU_FREQ / NANOSECONDS_PER_SECOND) * cycles;
+}
+
 static bool instructions_supported(CPUARMState *env)
 {
     return use_icount =3D=3D 1 /* Precise instruction counting */;
@@ -1060,21 +1078,29 @@ static uint64_t instructions_get_count(CPUARMState =
*env)
 {
     return (uint64_t)cpu_get_icount_raw();
 }
+
+static int64_t instructions_ns_per(uint64_t icount)
+{
+    return cpu_icount_to_ns((int64_t)icount);
+}
 #endif
=20
 static const pm_event pm_events[] =3D {
     { .number =3D 0x000, /* SW_INCR */
       .supported =3D event_always_supported,
       .get_count =3D swinc_get_count,
+      .ns_per_count =3D swinc_ns_per,
     },
 #ifndef CONFIG_USER_ONLY
     { .number =3D 0x008, /* INST_RETIRED, Instruction architecturally exec=
uted */
       .supported =3D instructions_supported,
       .get_count =3D instructions_get_count,
+      .ns_per_count =3D instructions_ns_per,
     },
     { .number =3D 0x011, /* CPU_CYCLES, Cycle */
       .supported =3D event_always_supported,
       .get_count =3D cycles_get_count,
+      .ns_per_count =3D cycles_ns_per,
     }
 #endif
 };
@@ -1288,6 +1314,13 @@ static bool pmu_counter_enabled(CPUARMState *env, ui=
nt8_t counter)
     return enabled && !prohibited && !filtered;
 }
=20
+static void pmu_update_irq(CPUARMState *env)
+{
+    ARMCPU *cpu =3D arm_env_get_cpu(env);
+    qemu_set_irq(cpu->pmu_interrupt, (env->cp15.c9_pmcr & PMCRE) &&
+            (env->cp15.c9_pminten & env->cp15.c9_pmovsr));
+}
+
 /*
  * Ensure c15_ccnt is the guest-visible count so that operations such as
  * enabling/disabling the counter or filtering, modifying the count itself=
,
@@ -1305,7 +1338,19 @@ void pmccntr_op_start(CPUARMState *env)
             eff_cycles /=3D 64;
         }
=20
-        env->cp15.c15_ccnt =3D eff_cycles - env->cp15.c15_ccnt_delta;
+        uint64_t new_pmccntr =3D eff_cycles - env->cp15.c15_ccnt_delta;
+
+        unsigned int overflow_bit =3D (env->cp15.c9_pmcr & PMCRLC) ? 63 : =
31;
+        uint64_t overflow_mask =3D (uint64_t)1 << overflow_bit;
+        if (env->cp15.c15_ccnt & ~new_pmccntr & overflow_mask) {
+            env->cp15.c9_pmovsr |=3D (1 << 31);
+            if (!(env->cp15.c9_pmcr & PMCRLC)) {
+                new_pmccntr &=3D 0xffffffff;
+            }
+            pmu_update_irq(env);
+        }
+
+        env->cp15.c15_ccnt =3D new_pmccntr;
     }
     env->cp15.c15_ccnt_delta =3D cycles;
 }
@@ -1318,13 +1363,27 @@ void pmccntr_op_start(CPUARMState *env)
 void pmccntr_op_finish(CPUARMState *env)
 {
     if (pmu_counter_enabled(env, 31)) {
-        uint64_t prev_cycles =3D env->cp15.c15_ccnt_delta;
+#ifndef CONFIG_USER_ONLY
+        /* Calculate when the counter will next overflow */
+        uint64_t delta =3D -env->cp15.c15_ccnt;
+        if (!(env->cp15.c9_pmcr & PMCRLC)) {
+            delta =3D (uint32_t)delta;
+        }
+        int64_t overflow_in =3D cycles_ns_per(delta);
+
+        if (overflow_in > 0) {
+            int64_t overflow_at =3D qemu_clock_get_ns(QEMU_CLOCK_VIRTUAL) =
+
+                overflow_in;
+            ARMCPU *cpu =3D arm_env_get_cpu(env);
+            timer_mod_anticipate_ns(cpu->pmu_timer, overflow_at);
+        }
+#endif
=20
+        uint64_t prev_cycles =3D env->cp15.c15_ccnt_delta;
         if (env->cp15.c9_pmcr & PMCRD) {
             /* Increment once every 64 processor clock cycles */
             prev_cycles /=3D 64;
         }
-
         env->cp15.c15_ccnt_delta =3D prev_cycles - env->cp15.c15_ccnt;
     }
 }
@@ -1340,8 +1399,15 @@ static void pmevcntr_op_start(CPUARMState *env, uint=
8_t counter)
     }
=20
     if (pmu_counter_enabled(env, counter)) {
-        env->cp15.c14_pmevcntr[counter] =3D
-            count - env->cp15.c14_pmevcntr_delta[counter];
+        uint64_t new_pmevcntr =3D count - env->cp15.c14_pmevcntr_delta[cou=
nter];
+
+        if (!(new_pmevcntr & PMEVCNTR_OVERFLOW_MASK) &&
+                (env->cp15.c14_pmevcntr[counter] & PMEVCNTR_OVERFLOW_MASK)=
) {
+            env->cp15.c9_pmovsr |=3D (1 << counter);
+            new_pmevcntr &=3D ~PMEVCNTR_OVERFLOW_MASK;
+            pmu_update_irq(env);
+        }
+        env->cp15.c14_pmevcntr[counter] =3D new_pmevcntr;
     }
     env->cp15.c14_pmevcntr_delta[counter] =3D count;
 }
@@ -1349,6 +1415,21 @@ static void pmevcntr_op_start(CPUARMState *env, uint=
8_t counter)
 static void pmevcntr_op_finish(CPUARMState *env, uint8_t counter)
 {
     if (pmu_counter_enabled(env, counter)) {
+#ifndef CONFIG_USER_ONLY
+        uint16_t event =3D env->cp15.c14_pmevtyper[counter] & PMXEVTYPER_E=
VTCOUNT;
+        uint16_t event_idx =3D supported_event_map[event];
+        uint64_t delta =3D UINT32_MAX -
+            (uint32_t)env->cp15.c14_pmevcntr[counter] + 1;
+        int64_t overflow_in =3D pm_events[event_idx].ns_per_count(delta);
+
+        if (overflow_in > 0) {
+            int64_t overflow_at =3D qemu_clock_get_ns(QEMU_CLOCK_VIRTUAL) =
+
+                overflow_in;
+            ARMCPU *cpu =3D arm_env_get_cpu(env);
+            timer_mod_anticipate_ns(cpu->pmu_timer, overflow_at);
+        }
+#endif
+
         env->cp15.c14_pmevcntr_delta[counter] -=3D
             env->cp15.c14_pmevcntr[counter];
     }
@@ -1382,6 +1463,19 @@ void pmu_post_el_change(ARMCPU *cpu, void *ignored)
     pmu_op_finish(&cpu->env);
 }
=20
+void arm_pmu_timer_cb(void *opaque)
+{
+    ARMCPU *cpu =3D opaque;
+
+    /* Update all the counter values based on the current underlying count=
s,
+     * triggering interrupts to be raised, if necessary. pmu_op_finish() a=
lso
+     * has the effect of setting the cpu->pmu_timer to the next earliest t=
ime a
+     * counter may expire.
+     */
+    pmu_op_start(&cpu->env);
+    pmu_op_finish(&cpu->env);
+}
+
 static void pmcr_write(CPUARMState *env, const ARMCPRegInfo *ri,
                        uint64_t value)
 {
@@ -1418,7 +1512,21 @@ static void pmswinc_write(CPUARMState *env, const AR=
MCPRegInfo *ri,
                 /* counter is SW_INCR */
                 (env->cp15.c14_pmevtyper[i] & PMXEVTYPER_EVTCOUNT) =3D=3D =
0x0) {
             pmevcntr_op_start(env, i);
-            env->cp15.c14_pmevcntr[i]++;
+
+            /* Detect if this write causes an overflow since we can't pred=
ict
+             * PMSWINC overflows like we can for other events
+             */
+            uint64_t new_pmswinc =3D env->cp15.c14_pmevcntr[i] + 1;
+
+            if (!(new_pmswinc & PMEVCNTR_OVERFLOW_MASK) &&
+                    (env->cp15.c14_pmevcntr[i] & PMEVCNTR_OVERFLOW_MASK)) =
{
+                env->cp15.c9_pmovsr |=3D (1 << i);
+                new_pmswinc &=3D ~PMEVCNTR_OVERFLOW_MASK;
+                pmu_update_irq(env);
+            }
+
+            env->cp15.c14_pmevcntr[i] =3D new_pmswinc;
+
             pmevcntr_op_finish(env, i);
         }
     }
@@ -1489,6 +1597,7 @@ static void pmcntenset_write(CPUARMState *env, const =
ARMCPRegInfo *ri,
 {
     value &=3D pmu_counter_mask(env);
     env->cp15.c9_pmcnten |=3D value;
+    pmu_update_irq(env);
 }
=20
 static void pmcntenclr_write(CPUARMState *env, const ARMCPRegInfo *ri,
@@ -1496,6 +1605,7 @@ static void pmcntenclr_write(CPUARMState *env, const =
ARMCPRegInfo *ri,
 {
     value &=3D pmu_counter_mask(env);
     env->cp15.c9_pmcnten &=3D ~value;
+    pmu_update_irq(env);
 }
=20
 static void pmovsr_write(CPUARMState *env, const ARMCPRegInfo *ri,
@@ -1503,6 +1613,7 @@ static void pmovsr_write(CPUARMState *env, const ARMC=
PRegInfo *ri,
 {
     value &=3D pmu_counter_mask(env);
     env->cp15.c9_pmovsr &=3D ~value;
+    pmu_update_irq(env);
 }
=20
 static void pmovsset_write(CPUARMState *env, const ARMCPRegInfo *ri,
@@ -1510,6 +1621,7 @@ static void pmovsset_write(CPUARMState *env, const AR=
MCPRegInfo *ri,
 {
     value &=3D pmu_counter_mask(env);
     env->cp15.c9_pmovsr |=3D value;
+    pmu_update_irq(env);
 }
=20
 static void pmevtyper_write(CPUARMState *env, const ARMCPRegInfo *ri,
@@ -1696,6 +1808,7 @@ static void pmintenset_write(CPUARMState *env, const =
ARMCPRegInfo *ri,
     /* We have no event counters so only the C bit can be changed */
     value &=3D pmu_counter_mask(env);
     env->cp15.c9_pminten |=3D value;
+    pmu_update_irq(env);
 }
=20
 static void pmintenclr_write(CPUARMState *env, const ARMCPRegInfo *ri,
@@ -1703,6 +1816,7 @@ static void pmintenclr_write(CPUARMState *env, const =
ARMCPRegInfo *ri,
 {
     value &=3D pmu_counter_mask(env);
     env->cp15.c9_pminten &=3D ~value;
+    pmu_update_irq(env);
 }
=20
 static void vbar_write(CPUARMState *env, const ARMCPRegInfo *ri,
--=20
2.19.2


