Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  18 Dec 2018 21:08:56 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 74F145805AD
	for <like.xu@linux.intel.com>; Tue, 18 Dec 2018 02:09:38 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by fmsmga002-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 18 Dec 2018 02:09:38 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A8AZsvBKBaTo/7Pr3itmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgXKvz/rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZXshfSSJPDIC7?=
 =?us-ascii?q?YYQNAeoPIP5Yoov/qVYBsBezCxWgC/30yjJTmnP6wbc33/g7HA3awAAtGc8Fvn?=
 =?us-ascii?q?TOrNXyMacfSf66zK3PzTXDbvNW3Cny6JPTfxAupPGDR7Nwcc7LxUYzEAPFi1Od?=
 =?us-ascii?q?opHmMTONzukBrXSX4ul6We6ylmIqqBt9riahy8oskIXFm4AYxkjZ+SlkwYs5P8?=
 =?us-ascii?q?O0RUF5bNK+DZdcqj+WO5FrTs4iXW1lvjsxxKcctp6hZicKzYwqxx7BZPyDdIiF?=
 =?us-ascii?q?+hbjVOeKITdkn3JpYr2/hxCv8US6ze38TMa03E5LripDjNbMqmgA2wLP5sWEUP?=
 =?us-ascii?q?dx41qt1DWV2wzN5OxJIVo4mbfZJpI5x74/jJsTsUDNHi/sn0X2ibebdlw69eit?=
 =?us-ascii?q?9uTre6jpqYGCN4BqjgHyK78hmsuiAeQ+LgcBQXOb9eO41L3i/k32Xq9Gj/Irkq?=
 =?us-ascii?q?TBtJDaJMIbprO2AgNP04Yj7Qq/ACmi0NgCgXYHK1dFdQmBj4juPVHOL/b4Deql?=
 =?us-ascii?q?j1SrijdryOjKPqf9DZXVMnjDjLDhcK55605dywo808pT5p1JCrwaJPLzW0nxtM?=
 =?us-ascii?q?HXDxMjMgy0xfrnB8t51o8ERW2PBaqZY+vvt0SV7LcvP/WUf91S/zL8MOQ+ofjp?=
 =?us-ascii?q?i3A/hBkaZ6bu2JIWbHWxGLNhO1mYZnz3xc4MFHpPsgcgQei5tVuZTDQGYn+zW7?=
 =?us-ascii?q?47tCg2DZ/jAYrdS4TomrGYwSqgArVQYWZJDE3KFm3nIJ6ZUfUBYz7HP8l6jzYf?=
 =?us-ascii?q?XqKgQYJy6Rb7sRTm46BqIurd5msTspennN18/ebakx0o+HpwEt6Q2nylVWx4nm?=
 =?us-ascii?q?oUATQx2eQ3o0VmzUiK16dQmfFUFdVPofhOV0NyJIPG3ql5DMz1RCrQd9GFRUbj?=
 =?us-ascii?q?XtivBHcrU5Z5xtYeYkNwXd6llw3O2yusK6UYm7yCGNo/9aeP8WL2IpNwz3HG1a?=
 =?us-ascii?q?wslHEpR8JOMSutgasspEDoG4fVnhDBxO6RfqMG0XuIrT/bwA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AeAAASxxhchxHrdtBkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUgYBAQsBgTAqgjiMdIsagg2KFY1FgXYQAQEYFIdfIjUIDQEDAQEBAQEBAgE?=
 =?us-ascii?q?TAQEBCgsJCBsOIwyCNgUCAxoBBoJcAwMBAiQZAQUKDB0BAgECAQIGAQEFGikIA?=
 =?us-ascii?q?wEfEQEFARwHEgWCUkuBaAEDFAEBBJwVPIwVFgUBF4J3BYRLChknDV4TgSQCBhK?=
 =?us-ascii?q?HbIF9gSiBHBeBf4ERjXICiTyHElKEBYt8CZFTDBiJdYdfiUGQBgYCCQcPIYEnA?=
 =?us-ascii?q?oIKcIM8ghsMFxKDOIpgZYECBSETi02BdwEB?=
X-IPAS-Result: =?us-ascii?q?A0AeAAASxxhchxHrdtBkHAEBAQQBAQcEAQGBUgYBAQsBgTA?=
 =?us-ascii?q?qgjiMdIsagg2KFY1FgXYQAQEYFIdfIjUIDQEDAQEBAQEBAgETAQEBCgsJCBsOI?=
 =?us-ascii?q?wyCNgUCAxoBBoJcAwMBAiQZAQUKDB0BAgECAQIGAQEFGikIAwEfEQEFARwHEgW?=
 =?us-ascii?q?CUkuBaAEDFAEBBJwVPIwVFgUBF4J3BYRLChknDV4TgSQCBhKHbIF9gSiBHBeBf?=
 =?us-ascii?q?4ERjXICiTyHElKEBYt8CZFTDBiJdYdfiUGQBgYCCQcPIYEnAoIKcIM8ghsMFxK?=
 =?us-ascii?q?DOIpgZYECBSETi02BdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,367,1539673200"; 
   d="scan'208";a="56333427"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 18 Dec 2018 02:09:37 -0800
Received: from localhost ([::1]:52907 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gZCJk-0005Z5-LF
	for like.xu@linux.intel.com; Tue, 18 Dec 2018 05:09:36 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:53265)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <elohimes@gmail.com>) id 1gZCBm-0007rH-Fp
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 05:01:26 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <elohimes@gmail.com>) id 1gZCBe-0001t4-TT
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 05:01:20 -0500
Received: from mail-pl1-x642.google.com ([2607:f8b0:4864:20::642]:34421)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <elohimes@gmail.com>) id 1gZCBU-0001oe-J7
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 05:01:06 -0500
Received: by mail-pl1-x642.google.com with SMTP id w4so7603520plz.1
	for <qemu-devel@nongnu.org>; Tue, 18 Dec 2018 02:01:03 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
	h=from:to:cc:subject:date:message-id:in-reply-to:references;
	bh=rpCrrMTMjO8Pf2TduvQzJoDEGAQRbHHxcLC8HFS/jb4=;
	b=lznQMdNX9xYyD9nyL3YjZg1qqrso6t14Jaz6csUq/DAHbr6IINWZCB5BXuffozYtmQ
	nhOdFVIU80EEbGz8kpNgxxDAtzUE6Zz6VE7k5Abrl2G3eCiq1qaaS4ebNmruDafgXvEQ
	sKc+XoUMIkv7D5b8MxEpP209Fc7/ahVPzNjqKyAvAdw6hj2mEhC49gVViALKjDUDEbog
	6p455kSt/H2gNJFkYd8tQZKES5I4qJVdHwqS3Akzony3t4AYmk/ePrbDj/IjbZmjLR+Y
	xjvjBVXRsAUhoBNgIqRQYT7cMO12qgbtR3NRKFbLQWucPDLbTIav4if2bIQoEwhSGuVs
	fZ4g==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
	:references;
	bh=rpCrrMTMjO8Pf2TduvQzJoDEGAQRbHHxcLC8HFS/jb4=;
	b=SERGkN4XARuw1fyROfFk7OaXO2aT1KQzJhXVU5Ea5IOo33R2vpi4pBR8rE7WXlId9x
	Ym+F55EMKPpf2SXpeM7ZXLtn+gYRvaJOzHD6ZaUsEZnZtbHp6+tKybwm6Hi8fcESmK0d
	i4qrYMzzYVa3q0qblKNl7QOl9f7EupYEO2eQMGkU7pCU53+P1ucnMKmAxS/241KX3stJ
	Txrxs1Qlq2LpYBuo8A75ATNH+wA1PdndafDaMyBvzOCkqf7yYcOcU9yS/7/F8U6yrXZY
	t/LoCtlJYG3CpR7mHbEWccM1mhYF68a01mYVN0EEtQiQdrvGZZtbdIG+9zB+h2DAmgQG
	832w==
X-Gm-Message-State: AA+aEWb/YNJWDTAJHBxAM/9oEsBQXn9Hy52tXqiMR8AdOluA5sTaBD4G
	rK7IEpnbnhrCNfRRkNeU5QE=
X-Google-Smtp-Source: AFSGD/U7UH1ujFOuuXdFVgI3faiTu4kM2lV91Xi5qkj/n/1leFEDjFfNwqTbZqEItIwBFNcMOcxNmQ==
X-Received: by 2002:a17:902:bd4a:: with SMTP id
	b10mr15904886plx.232.1545127262946; 
	Tue, 18 Dec 2018 02:01:02 -0800 (PST)
Received: from localhost ([116.247.112.152]) by smtp.gmail.com with ESMTPSA id
	l22sm23723308pfj.179.2018.12.18.02.01.01
	(version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
	Tue, 18 Dec 2018 02:01:02 -0800 (PST)
From: elohimes@gmail.com
X-Google-Original-From: xieyongji@baidu.com
To: mst@redhat.com, marcandre.lureau@redhat.com, jasowang@redhat.com,
	yury-kotov@yandex-team.ru, maxime.coquelin@redhat.com
Date: Tue, 18 Dec 2018 18:00:01 +0800
Message-Id: <20181218100002.11219-7-xieyongji@baidu.com>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20181218100002.11219-1-xieyongji@baidu.com>
References: <20181218100002.11219-1-xieyongji@baidu.com>
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 2607:f8b0:4864:20::642
Subject: [Qemu-devel] [PATCH v2 for-4.0 6/7] vhost-user-blk: Add support to
 reconnect backend
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: nixun@baidu.com, qemu-devel@nongnu.org, lilin24@baidu.com,
	zhangyu31@baidu.com, chaiwen@baidu.com, Xie Yongji <xieyongji@baidu.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

From: Xie Yongji <xieyongji@baidu.com>

Since we now support the message VHOST_USER_GET_SHM_SIZE
and VHOST_USER_SET_SHM_FD. The backend is able to restart
safely because it can record inflight I/O in shared memory.
This patch allows qemu to reconnect the backend after
connection closed.

Signed-off-by: Xie Yongji <xieyongji@baidu.com>
Signed-off-by: Ni Xun <nixun@baidu.com>
Signed-off-by: Zhang Yu <zhangyu31@baidu.com>
---
 hw/block/vhost-user-blk.c          | 183 ++++++++++++++++++++++++-----
 include/hw/virtio/vhost-user-blk.h |   4 +
 2 files changed, 160 insertions(+), 27 deletions(-)

diff --git a/hw/block/vhost-user-blk.c b/hw/block/vhost-user-blk.c
index 27028cf996..80f2e2d765 100644
--- a/hw/block/vhost-user-blk.c
+++ b/hw/block/vhost-user-blk.c
@@ -101,7 +101,7 @@ const VhostDevConfigOps blk_ops = {
     .vhost_dev_config_notifier = vhost_user_blk_handle_config_change,
 };
 
-static void vhost_user_blk_start(VirtIODevice *vdev)
+static int vhost_user_blk_start(VirtIODevice *vdev)
 {
     VHostUserBlk *s = VHOST_USER_BLK(vdev);
     BusState *qbus = BUS(qdev_get_parent_bus(DEVICE(vdev)));
@@ -110,13 +110,13 @@ static void vhost_user_blk_start(VirtIODevice *vdev)
 
     if (!k->set_guest_notifiers) {
         error_report("binding does not support guest notifiers");
-        return;
+        return -ENOSYS;
     }
 
     ret = vhost_dev_enable_notifiers(&s->dev, vdev);
     if (ret < 0) {
         error_report("Error enabling host notifiers: %d", -ret);
-        return;
+        return ret;
     }
 
     ret = k->set_guest_notifiers(qbus->parent, s->dev.nvqs, true);
@@ -147,12 +147,13 @@ static void vhost_user_blk_start(VirtIODevice *vdev)
         vhost_virtqueue_mask(&s->dev, vdev, i, false);
     }
 
-    return;
+    return ret;
 
 err_guest_notifiers:
     k->set_guest_notifiers(qbus->parent, s->dev.nvqs, false);
 err_host_notifiers:
     vhost_dev_disable_notifiers(&s->dev, vdev);
+    return ret;
 }
 
 static void vhost_user_blk_stop(VirtIODevice *vdev)
@@ -171,7 +172,6 @@ static void vhost_user_blk_stop(VirtIODevice *vdev)
     ret = k->set_guest_notifiers(qbus->parent, s->dev.nvqs, false);
     if (ret < 0) {
         error_report("vhost guest notifier cleanup failed: %d", ret);
-        return;
     }
 
     vhost_dev_disable_notifiers(&s->dev, vdev);
@@ -181,21 +181,43 @@ static void vhost_user_blk_set_status(VirtIODevice *vdev, uint8_t status)
 {
     VHostUserBlk *s = VHOST_USER_BLK(vdev);
     bool should_start = status & VIRTIO_CONFIG_S_DRIVER_OK;
+    int ret;
 
     if (!vdev->vm_running) {
         should_start = false;
     }
 
-    if (s->dev.started == should_start) {
+    if (s->should_start == should_start) {
+        return;
+    }
+
+    if (!s->connected || s->dev.started == should_start) {
+        s->should_start = should_start;
         return;
     }
 
     if (should_start) {
-        vhost_user_blk_start(vdev);
+        s->should_start = true;
+        /*
+         * make sure vhost_user_blk_handle_output() ignores fake
+         * guest kick by vhost_dev_enable_notifiers()
+         */
+        barrier();
+        ret = vhost_user_blk_start(vdev);
+        if (ret < 0) {
+            error_report("vhost-user-blk: vhost start failed: %s",
+                         strerror(-ret));
+            qemu_chr_fe_disconnect(&s->chardev);
+        }
     } else {
         vhost_user_blk_stop(vdev);
+        /*
+         * make sure vhost_user_blk_handle_output() ignore fake
+         * guest kick by vhost_dev_disable_notifiers()
+         */
+        barrier();
+        s->should_start = false;
     }
-
 }
 
 static uint64_t vhost_user_blk_get_features(VirtIODevice *vdev,
@@ -225,13 +247,22 @@ static uint64_t vhost_user_blk_get_features(VirtIODevice *vdev,
 static void vhost_user_blk_handle_output(VirtIODevice *vdev, VirtQueue *vq)
 {
     VHostUserBlk *s = VHOST_USER_BLK(vdev);
-    int i;
+    int i, ret;
 
     if (!(virtio_host_has_feature(vdev, VIRTIO_F_VERSION_1) &&
         !virtio_vdev_has_feature(vdev, VIRTIO_F_VERSION_1))) {
         return;
     }
 
+    if (s->should_start) {
+        return;
+    }
+    s->should_start = true;
+
+    if (!s->connected) {
+        return;
+    }
+
     if (s->dev.started) {
         return;
     }
@@ -239,7 +270,13 @@ static void vhost_user_blk_handle_output(VirtIODevice *vdev, VirtQueue *vq)
     /* Some guests kick before setting VIRTIO_CONFIG_S_DRIVER_OK so start
      * vhost here instead of waiting for .set_status().
      */
-    vhost_user_blk_start(vdev);
+    ret = vhost_user_blk_start(vdev);
+    if (ret < 0) {
+        error_report("vhost-user-blk: vhost start failed: %s",
+                     strerror(-ret));
+        qemu_chr_fe_disconnect(&s->chardev);
+        return;
+    }
 
     /* Kick right away to begin processing requests already in vring */
     for (i = 0; i < s->dev.nvqs; i++) {
@@ -259,12 +296,105 @@ static void vhost_user_blk_reset(VirtIODevice *vdev)
     vhost_dev_reset_shm(s->shm);
 }
 
+static int vhost_user_blk_connect(DeviceState *dev)
+{
+    VirtIODevice *vdev = VIRTIO_DEVICE(dev);
+    VHostUserBlk *s = VHOST_USER_BLK(vdev);
+    int ret = 0;
+
+    if (s->connected) {
+        return 0;
+    }
+    s->connected = true;
+
+    s->dev.nvqs = s->num_queues;
+    s->dev.vqs = s->vqs;
+    s->dev.vq_index = 0;
+    s->dev.backend_features = 0;
+
+    vhost_dev_set_config_notifier(&s->dev, &blk_ops);
+
+    ret = vhost_dev_init(&s->dev, s->vhost_user, VHOST_BACKEND_TYPE_USER, 0);
+    if (ret < 0) {
+        error_report("vhost-user-blk: vhost initialization failed: %s",
+                     strerror(-ret));
+        return ret;
+    }
+
+    /* restore vhost state */
+    if (s->should_start) {
+        ret = vhost_user_blk_start(vdev);
+        if (ret < 0) {
+            error_report("vhost-user-blk: vhost start failed: %s",
+                         strerror(-ret));
+            return ret;
+        }
+    }
+
+    return 0;
+}
+
+static void vhost_user_blk_disconnect(DeviceState *dev)
+{
+    VirtIODevice *vdev = VIRTIO_DEVICE(dev);
+    VHostUserBlk *s = VHOST_USER_BLK(vdev);
+
+    if (!s->connected) {
+        return;
+    }
+    s->connected = false;
+
+    if (s->dev.started) {
+        vhost_user_blk_stop(vdev);
+    }
+
+    vhost_dev_cleanup(&s->dev);
+}
+
+static gboolean vhost_user_blk_watch(GIOChannel *chan, GIOCondition cond,
+                                     void *opaque)
+{
+    DeviceState *dev = opaque;
+    VirtIODevice *vdev = VIRTIO_DEVICE(dev);
+    VHostUserBlk *s = VHOST_USER_BLK(vdev);
+
+    qemu_chr_fe_disconnect(&s->chardev);
+
+    return true;
+}
+
+static void vhost_user_blk_event(void *opaque, int event)
+{
+    DeviceState *dev = opaque;
+    VirtIODevice *vdev = VIRTIO_DEVICE(dev);
+    VHostUserBlk *s = VHOST_USER_BLK(vdev);
+
+    switch (event) {
+    case CHR_EVENT_OPENED:
+        if (vhost_user_blk_connect(dev) < 0) {
+            qemu_chr_fe_disconnect(&s->chardev);
+            return;
+        }
+        s->watch = qemu_chr_fe_add_watch(&s->chardev, G_IO_HUP,
+                                         vhost_user_blk_watch, dev);
+        break;
+    case CHR_EVENT_CLOSED:
+        vhost_user_blk_disconnect(dev);
+        if (s->watch) {
+            g_source_remove(s->watch);
+            s->watch = 0;
+        }
+        break;
+    }
+}
+
 static void vhost_user_blk_device_realize(DeviceState *dev, Error **errp)
 {
     VirtIODevice *vdev = VIRTIO_DEVICE(dev);
     VHostUserBlk *s = VHOST_USER_BLK(vdev);
     VhostUserState *user;
     int i, ret;
+    Error *err = NULL;
 
     if (!s->chardev.chr) {
         error_setg(errp, "vhost-user-blk: chardev is mandatory");
@@ -299,23 +429,21 @@ static void vhost_user_blk_device_realize(DeviceState *dev, Error **errp)
     }
 
     s->shm = g_new0(struct vhost_shm, 1);
-
-    s->dev.nvqs = s->num_queues;
-    s->dev.vqs = g_new(struct vhost_virtqueue, s->dev.nvqs);
-    s->dev.vq_index = 0;
-    s->dev.backend_features = 0;
-
-    vhost_dev_set_config_notifier(&s->dev, &blk_ops);
-
-    ret = vhost_dev_init(&s->dev, s->vhost_user, VHOST_BACKEND_TYPE_USER, 0);
-    if (ret < 0) {
-        error_setg(errp, "vhost-user-blk: vhost initialization failed: %s",
-                   strerror(-ret));
-        goto virtio_err;
+    s->vqs = g_new(struct vhost_virtqueue, s->num_queues);
+    s->watch = 0;
+    s->should_start = false;
+    s->connected = false;
+
+    while (qemu_chr_fe_wait_connected(&s->chardev, &err) < 0) {
+        error_report_err(err);
+        err = NULL;
+        sleep(1);
     }
+    qemu_chr_fe_set_handlers(&s->chardev,  NULL, NULL, vhost_user_blk_event,
+                             NULL, (void *)dev, NULL, true);
 
     ret = vhost_dev_get_config(&s->dev, (uint8_t *)&s->blkcfg,
-                              sizeof(struct virtio_blk_config));
+                               sizeof(struct virtio_blk_config));
     if (ret < 0) {
         error_setg(errp, "vhost-user-blk: get block config failed");
         goto vhost_err;
@@ -335,8 +463,7 @@ static void vhost_user_blk_device_realize(DeviceState *dev, Error **errp)
 
 vhost_err:
     vhost_dev_cleanup(&s->dev);
-virtio_err:
-    g_free(s->dev.vqs);
+    g_free(s->vqs);
     g_free(s->shm);
     virtio_cleanup(vdev);
 
@@ -351,9 +478,11 @@ static void vhost_user_blk_device_unrealize(DeviceState *dev, Error **errp)
     VHostUserBlk *s = VHOST_USER_BLK(dev);
 
     vhost_user_blk_set_status(vdev, 0);
+    qemu_chr_fe_set_handlers(&s->chardev,  NULL, NULL, NULL,
+                             NULL, NULL, NULL, false);
     vhost_dev_cleanup(&s->dev);
     vhost_dev_free_shm(s->shm);
-    g_free(s->dev.vqs);
+    g_free(s->vqs);
     g_free(s->shm);
     virtio_cleanup(vdev);
 
diff --git a/include/hw/virtio/vhost-user-blk.h b/include/hw/virtio/vhost-user-blk.h
index bb706d70b3..c17d47402b 100644
--- a/include/hw/virtio/vhost-user-blk.h
+++ b/include/hw/virtio/vhost-user-blk.h
@@ -38,6 +38,10 @@ typedef struct VHostUserBlk {
     struct vhost_dev dev;
     struct vhost_shm *shm;
     VhostUserState *vhost_user;
+    struct vhost_virtqueue *vqs;
+    guint watch;
+    bool should_start;
+    bool connected;
 } VHostUserBlk;
 
 #endif
-- 
2.17.1


