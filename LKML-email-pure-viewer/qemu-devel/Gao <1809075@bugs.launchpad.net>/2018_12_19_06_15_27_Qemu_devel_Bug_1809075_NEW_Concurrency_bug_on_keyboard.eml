Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 21:31:00 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 9BD285805F0
	for <like.xu@linux.intel.com>; Tue, 18 Dec 2018 22:21:00 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga003-1.jf.intel.com with ESMTP; 18 Dec 2018 22:21:00 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A1gO8EBRNlR1kYqEGk80YvcMZWNpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa67ZBWPt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KptVRTmij?=
 =?us-ascii?q?oINyQh/W7YlsN+g6xVrhK/qRJ8247afYOYOvhxc6/Ac94WWXBBUdhKVyFaHoO8?=
 =?us-ascii?q?dpECA/YdMepErYTwoUYFoxukBQmrAePi0j5GiWXx3aYn1OktDALL0BAkEt4Ssn?=
 =?us-ascii?q?nZrM74O7wPUeC616nE1zHDYOlL2Tf79IfIcgghruuRUr5qd8re11UvGhrDg16N?=
 =?us-ascii?q?p4LlODaV2f4Ms2id9+dgUfigi3Mhqw5tojiv3t0jhZTTioIT1F/E6T11wIMrKt?=
 =?us-ascii?q?KlSU57fNukHIFMuCGdMot7RN4pTWJwuCsi1LEKpZ22cDIXxJg6xBPTceKLfoaI?=
 =?us-ascii?q?7x75SeqcIy90iXZ4dL6lmhq/8kytxvf4W8WoylpHoChIn9/RvX4XzRPT8NKISv?=
 =?us-ascii?q?5l80ehxzmP0wfT5/lAIUA1jqrbN4UhzqQ/lpoVrETPBCj2mF/5jKOOd0Uk/Pan?=
 =?us-ascii?q?6/j/b7n4upORNJV4hhzjPqktgMCzH+o1PwgUU2SG++mwzLjj8lf4QLVOgP02iK?=
 =?us-ascii?q?7ZsJXCKMQCuKG5BhJV3p8+5BmhETepztAYkWAcI1JCZRKHiZTmNE/VIPz/Cfe/?=
 =?us-ascii?q?glesnylxy/HJI73sGpHNLnnFkLf8crdx8U9cyAwvzd9B45JYEK0OIPX2WkLqst?=
 =?us-ascii?q?zYCRk5MwOyw+b6Etl90ZkeWW2XDq+DLKzSqUOI5v4oI+SUYI8VuTX9JOY/6//h?=
 =?us-ascii?q?kH80glsdfaiv3ZsKZ3G0BPVmI0OFYXXyhtcNC3sFvg07TL+itVuZTDQGZ2quR7?=
 =?us-ascii?q?luoXY/CZm6FsHFQYaihqHH2z20WZhfZ2RDA1bLFm/0doKCQLAVZSePZ8NsjDEA?=
 =?us-ascii?q?BoWnUJIrgBSntQvmzOh+I+/JvyEVq5/nkcJ4/vDejg0a8ztyAMKAlWaXQDZvg2?=
 =?us-ascii?q?kKSjQqib15ulF30VyZ0KJ10MBfQMVe4u4MXgokOJr0yet8BNbvHAXbcYSzRU6i?=
 =?us-ascii?q?U+mhVBssQZpok4dfOxkgU4H73kiSh3X3K7UImKfNAJUp9Kncx3H9YcBw1yCV+r?=
 =?us-ascii?q?MmigwJS8wHYTT23v8nqFX7DZPGiAOdnrusfqQE1SKL8mqfmznd9HpEWRJ9BP2W?=
 =?us-ascii?q?FUsUYVHb+Iz0?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0C1FAB84hlchxHrdtBkHAEBAR8EAQEFA?=
 =?us-ascii?q?QGBTAI9ciqBD4UmiHiLHAFYgRCJW4RRiVWBcxUYCwmEOwOCZyI1CA0BAwEBAQE?=
 =?us-ascii?q?BAQIBEwEBAQoLCQgbDiMMgjYFAgMYCYJfBAIgIwoKFgwDAQIGAiQCHwMEAgIDA?=
 =?us-ascii?q?UMlCRaCPEsBgXQNAQMBChmmGIEvhC0BgQOEewWBC4s0gQ+BB4ERM4IxgW+GSIJ?=
 =?us-ascii?q?XAoEqAQEBiAkPhhCRAFkBBgIBgxODfIpSGBCLYIVmjj+LPYFHAYIMTS4kgT86g?=
 =?us-ascii?q?RURgiEdgziEWYV6gQF4i2mBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0C1FAB84hlchxHrdtBkHAEBAR8EAQEFAQGBTAI9ciqBD4U?=
 =?us-ascii?q?miHiLHAFYgRCJW4RRiVWBcxUYCwmEOwOCZyI1CA0BAwEBAQEBAQIBEwEBAQoLC?=
 =?us-ascii?q?QgbDiMMgjYFAgMYCYJfBAIgIwoKFgwDAQIGAiQCHwMEAgIDAUMlCRaCPEsBgXQ?=
 =?us-ascii?q?NAQMBChmmGIEvhC0BgQOEewWBC4s0gQ+BB4ERM4IxgW+GSIJXAoEqAQEBiAkPh?=
 =?us-ascii?q?hCRAFkBBgIBgxODfIpSGBCLYIVmjj+LPYFHAYIMTS4kgT86gRURgiEdgziEWYV?=
 =?us-ascii?q?6gQF4i2mBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,371,1539673200"; 
   d="scan'208";a="44616996"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 18 Dec 2018 22:20:59 -0800
Received: from localhost ([::1]:57821 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gZVE3-0002zn-2e
	for like.xu@linux.intel.com; Wed, 19 Dec 2018 01:20:59 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:46325)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <bounces@canonical.com>) id 1gZVDl-0002zO-8Y
	for qemu-devel@nongnu.org; Wed, 19 Dec 2018 01:20:42 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <bounces@canonical.com>) id 1gZVDh-0000cv-7U
	for qemu-devel@nongnu.org; Wed, 19 Dec 2018 01:20:41 -0500
Received: from indium.canonical.com ([91.189.90.7]:34858)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <bounces@canonical.com>)
	id 1gZVDh-0000bv-0L
	for qemu-devel@nongnu.org; Wed, 19 Dec 2018 01:20:37 -0500
Received: from loganberry.canonical.com ([91.189.90.37])
	by indium.canonical.com with esmtp (Exim 4.86_2 #2 (Debian))
	id 1gZVDf-0000QF-SJ
	for <qemu-devel@nongnu.org>; Wed, 19 Dec 2018 06:20:35 +0000
Received: from loganberry.canonical.com (localhost [127.0.0.1])
	by loganberry.canonical.com (Postfix) with ESMTP id CAA542E80C8
	for <qemu-devel@nongnu.org>; Wed, 19 Dec 2018 06:20:35 +0000 (UTC)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Date: Wed, 19 Dec 2018 06:15:27 -0000
From: Gao <1809075@bugs.launchpad.net>
To: qemu-devel@nongnu.org
X-Launchpad-Notification-Type: bug
X-Launchpad-Bug: product=qemu; status=New; importance=Undecided; assignee=None;
X-Launchpad-Bug-Information-Type: Public
X-Launchpad-Bug-Private: no
X-Launchpad-Bug-Security-Vulnerability: no
X-Launchpad-Bug-Commenters: alapha23
X-Launchpad-Bug-Reporter: Gao (alapha23)
X-Launchpad-Bug-Modifier: Gao (alapha23)
Message-Id: <154520012723.21082.14347694074023377449.malonedeb@wampee.canonical.com>
X-Launchpad-Message-Rationale: Subscriber (QEMU) @qemu-devel-ml
X-Launchpad-Message-For: qemu-devel-ml
Precedence: bulk
X-Generated-By: Launchpad (canonical.com); Revision="18843";
	Instance="launchpad-lazr.conf"
X-Launchpad-Hash: cbd91d3024beb7b122023ce0d1f005572fd56670
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 91.189.90.7
Subject: [Qemu-devel] [Bug 1809075] [NEW] Concurrency bug on keyboard
 events: capslock LED messing up keycode streams causes character misses at
 guest kernel
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Reply-To: Bug 1809075 <1809075@bugs.launchpad.net>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Public bug reported:

Whenever capslock is pressed on host, both capslock keycode(0x3a 0xba)
and capslock LED keycode(0xfa 0xfa) would be sent to the ps2 keycode
stream.

However, capslock LED is handled by another thread, confirmed by tracing
`ps2_write_keyboard` with gdb. The keycode of casplock LED might divide

For example, I sent AaBb but got ABa. I was using vncdotool, so it
equals sending `capslock a capslock a capslock b capslock b`. In
ps2_queue, I was expecting `3a fa fa ba 1e 9e 3a fa fa ba 1e 9e 3a fa fa
ba 30 b0 3a fa fa ba 30 b0`. But actually once in a while, it might not
receive such streams. In one case I got `3a fa fa ba 1e 9e 3a ba 1e fa
fa 9e 3a ba 30 b0 3a ba 30 b0 fa fa`

In this specific example, `a` was lost because LED keycode 'jumps in' its k=
eycode. Kernel event device receives below streams
```
# /dev/input/event receives    what is sent from ps2_queue
# I use cap_1 to show capslock key down
cap_1   led     caps_0,        # 0x3a 0xfa 0xfa 0xba
a_1     a_0                    # 0x1e 0x9e
caps_1  caps_0                 # 0x3a 0xba
led                            # 0x1e 0xfa 0xfa 0x1e (we lost `a` here)
caps_1  caps_0                 # 0x3a 0xba
b_1     led     b_0            # 0x30 0xfa 0xfa 0xb0 =

caps_1  caps_0                 # 0x3a 0xba
led     b_1     b_0            # 0xfa 0xfa 0x30 0xb0
```

I made sure kernel receives the correct key stream as the qemu ps2_queue
sends using /proc, ftrace and dynamic_debug. I explained the details in
this [post](https://medium.com/@alapha23/quick-peek-into-kernel-land-
keyboard-events-handling-with-ftrace-and-dynamic-debug-24a790056d5a)

So it seems to be a concurrency issue.

A hacky path on my mind is to skip all `0xfa` in ps2_queue. But I'm not
sure if capslock LED is the only stink bug to our ps2 keycode queue as
I've seen other keycodes handled by `ps2_write_keyboard` sent to ps2
queue.

Another solution might be a memory barrier or a lock. Making key down
and key up atomic will prevent another thread modifying the ps2 queue
unwantedly.

What do you think?

** Affects: qemu
     Importance: Undecided
         Status: New

-- =

You received this bug notification because you are a member of qemu-
devel-ml, which is subscribed to QEMU.
https://bugs.launchpad.net/bugs/1809075

Title:
  Concurrency bug on keyboard events: capslock LED messing up keycode
  streams causes character misses at guest kernel

Status in QEMU:
  New

Bug description:
  Whenever capslock is pressed on host, both capslock keycode(0x3a 0xba)
  and capslock LED keycode(0xfa 0xfa) would be sent to the ps2 keycode
  stream.

  However, capslock LED is handled by another thread, confirmed by
  tracing `ps2_write_keyboard` with gdb. The keycode of casplock LED
  might divide

  For example, I sent AaBb but got ABa. I was using vncdotool, so it
  equals sending `capslock a capslock a capslock b capslock b`. In
  ps2_queue, I was expecting `3a fa fa ba 1e 9e 3a fa fa ba 1e 9e 3a fa
  fa ba 30 b0 3a fa fa ba 30 b0`. But actually once in a while, it might
  not receive such streams. In one case I got `3a fa fa ba 1e 9e 3a ba
  1e fa fa 9e 3a ba 30 b0 3a ba 30 b0 fa fa`

  In this specific example, `a` was lost because LED keycode 'jumps in' its=
 keycode. Kernel event device receives below streams
  ```
  # /dev/input/event receives    what is sent from ps2_queue
  # I use cap_1 to show capslock key down
  cap_1   led     caps_0,        # 0x3a 0xfa 0xfa 0xba
  a_1     a_0                    # 0x1e 0x9e
  caps_1  caps_0                 # 0x3a 0xba
  led                            # 0x1e 0xfa 0xfa 0x1e (we lost `a` here)
  caps_1  caps_0                 # 0x3a 0xba
  b_1     led     b_0            # 0x30 0xfa 0xfa 0xb0 =

  caps_1  caps_0                 # 0x3a 0xba
  led     b_1     b_0            # 0xfa 0xfa 0x30 0xb0
  ```

  I made sure kernel receives the correct key stream as the qemu
  ps2_queue sends using /proc, ftrace and dynamic_debug. I explained the
  details in this [post](https://medium.com/@alapha23/quick-peek-into-
  kernel-land-keyboard-events-handling-with-ftrace-and-dynamic-debug-
  24a790056d5a)

  So it seems to be a concurrency issue.

  A hacky path on my mind is to skip all `0xfa` in ps2_queue. But I'm
  not sure if capslock LED is the only stink bug to our ps2 keycode
  queue as I've seen other keycodes handled by `ps2_write_keyboard` sent
  to ps2 queue.

  Another solution might be a memory barrier or a lock. Making key down
  and key up atomic will prevent another thread modifying the ps2 queue
  unwantedly.

  What do you think?

To manage notifications about this bug go to:
https://bugs.launchpad.net/qemu/+bug/1809075/+subscriptions

