Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 05 Dec 2018 08:43:03 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 358D8580375
	for <like.xu@linux.intel.com>; Tue,  4 Dec 2018 10:51:42 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by fmsmga002-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 04 Dec 2018 10:51:40 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AuhYCLhbwydZCXfjY12aaNXP/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZrsW9bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjmk8qxlSgLniD?=
 =?us-ascii?q?0fOjA57m/ZhM9+gqVZrxKvuhJ/24zZboOaOfZjcK7RYc0VRXFaU8pNSyBMGJ+w?=
 =?us-ascii?q?YpETA+YdO+tTsonzp0EJrRu7HQSjC+fvxSVViX/32K060v4hGhzb0gM+GtIBrn?=
 =?us-ascii?q?LUrMnuNKcVT+C51bDGzTrCb/xIxzf984vIchEhoPqRWr9wb9HRxlcqFwzbiFWQ?=
 =?us-ascii?q?tZflPzSL1ukWrWib7vBgVf6yi24gqgBwoz+vyt0whYnOg4IY01bJ/jh6zoYtPd?=
 =?us-ascii?q?C0VlJ3bN2+HJdNqi2XNJF6Tt0sTmxooio2178LtYamcCUJyJkr3QDTZvKaf4SS?=
 =?us-ascii?q?/B7uW/qdLS16iX9lfr+0mgy8/lK6yuLmU8m5yFZKoTRBktnLrn0N0x3T6tObSv?=
 =?us-ascii?q?tm5Euh1jCP1x3J5uFDO0A0mrLXK58nwrEuipoeqVrPEjP1lUnskaOaa0Yp9vK2?=
 =?us-ascii?q?5+npYrjqvIKQOo1shgH7KKsum8i/AeoiMggJWmiW4f2826Pm/U3kWblFk+M5kr?=
 =?us-ascii?q?fHv5DePMgUvam5AxJT0ok/9Rm/FDCq0NAZnXkEMl1JYh2Gj5XxNlHKIfD4C+q/?=
 =?us-ascii?q?glu2nDdqwfDGIqPuApHXInffl7fheK1w60hbyAo1wtBf4Y9UBqsGIPLpVU/9rM?=
 =?us-ascii?q?bYAQMhMwyo3+bnD81w1ocfWWKMHKCVKqzTsUKT6+IrIumMYpIVuTnnJ/gk4f7u?=
 =?us-ascii?q?kWE2mVsHcaa12psXbSPwI/J9Pk/MYWbwmsxTViAOvxEiV6rsj1uNVyMVYGy9GK?=
 =?us-ascii?q?c15zU+AYThCp/fR4erm/uY0SKmW5FbeG1CWW2KCmriIoCNWvMQb3CLL8p81zAJ?=
 =?us-ascii?q?S7WlDpUszAyjrxPSzb1hIezJvCoCusX4ydJ36ubPwAw07iF+FM+H0muAHF1zy3?=
 =?us-ascii?q?oFQiJz0K1hrEhVzFCF3q5lxftCGpgb/v5MT0IwMZnXzMR8DNb9XB+Hec2GG3i8?=
 =?us-ascii?q?RdDzPzU4QtM0wsVGWEt4FtO+lRfdmg2lArILjL+KFdRg7LnR2nX3O9161V7Y1b?=
 =?us-ascii?q?M9kl40UMwJPmqj0P0svzPPDpLExh3K352hcr4RiXbA?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AYAACTywZchxHrdtBkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgTCCYowSX6UGFIFfFBgUh0wiNAkNAQMBAQEBAQECARMBAQEKCwk?=
 =?us-ascii?q?IGw4vgjYFAgMYCYJcAwMBAiQfCikDAwECBgEBOg4IAwFTBxIFgxyCAgEDAaVFM?=
 =?us-ascii?q?4VAhHCHb4JtgSQeF4FAP4kNZoUMAokxhnuQHQmRNiOJa1qGYSyIWo9xgUaCDU0?=
 =?us-ascii?q?jgzyQXj4xgQeIOTKBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0AYAACTywZchxHrdtBkHAEBAQQBAQcEAQGBUQcBAQsBgTC?=
 =?us-ascii?q?CYowSX6UGFIFfFBgUh0wiNAkNAQMBAQEBAQECARMBAQEKCwkIGw4vgjYFAgMYC?=
 =?us-ascii?q?YJcAwMBAiQfCikDAwECBgEBOg4IAwFTBxIFgxyCAgEDAaVFM4VAhHCHb4JtgSQ?=
 =?us-ascii?q?eF4FAP4kNZoUMAokxhnuQHQmRNiOJa1qGYSyIWo9xgUaCDU0jgzyQXj4xgQeIO?=
 =?us-ascii?q?TKBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,315,1539673200"; 
   d="scan'208";a="65288123"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mga01b.intel.com with ESMTP/TLS/AES256-SHA; 04 Dec 2018 10:51:38 -0800
Received: from localhost ([::1]:58537 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gUFnH-0000DT-9v
	for like.xu@linux.intel.com; Tue, 04 Dec 2018 13:51:39 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:50440)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <vsementsov@virtuozzo.com>) id 1gUFiv-00041O-FW
	for qemu-devel@nongnu.org; Tue, 04 Dec 2018 13:47:15 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <vsementsov@virtuozzo.com>) id 1gUFip-0001Dh-UH
	for qemu-devel@nongnu.org; Tue, 04 Dec 2018 13:47:08 -0500
Received: from relay.sw.ru ([185.231.240.75]:50656)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <vsementsov@virtuozzo.com>)
	id 1gUFip-0001Cs-Jn; Tue, 04 Dec 2018 13:47:03 -0500
Received: from [10.28.8.145] (helo=kvm.sw.ru)
	by relay.sw.ru with esmtp (Exim 4.91)
	(envelope-from <vsementsov@virtuozzo.com>)
	id 1gUFil-0001hc-G8; Tue, 04 Dec 2018 21:46:59 +0300
From: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
To: qemu-devel@nongnu.org,
	qemu-block@nongnu.org
Date: Tue,  4 Dec 2018 21:46:55 +0300
Message-Id: <20181204184657.78028-4-vsementsov@virtuozzo.com>
X-Mailer: git-send-email 2.18.0
In-Reply-To: <20181204184657.78028-1-vsementsov@virtuozzo.com>
References: <20181204184657.78028-1-vsementsov@virtuozzo.com>
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 3.x [fuzzy]
X-Received-From: 185.231.240.75
Subject: [Qemu-devel] [PATCH 3/5] crypto/block: rename
 qcrypto_block_*crypt_helper
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: kwolf@redhat.com, den@openvz.org, vsementsov@virtuozzo.com,
	mreitz@redhat.com
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Rename qcrypto_block_*crypt_helper to qcrypto_cipher_*crypt_helper, as
it's not about QCryptoBlock. This is needed to introduce
qcrypto_block_*crypt_helper in the next commit, which will have
QCryptoBlock pointer and than will be able to use additional fields of
it, which in turn will be used to implement thread-safe QCryptoBlock
operations.

Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
---
 crypto/blockpriv.h  | 34 +++++++++++++-------------
 crypto/block-luks.c | 44 +++++++++++++++++-----------------
 crypto/block-qcow.c | 16 ++++++-------
 crypto/block.c      | 58 ++++++++++++++++++++++-----------------------
 4 files changed, 76 insertions(+), 76 deletions(-)

diff --git a/crypto/blockpriv.h b/crypto/blockpriv.h
index 41840abcec..347a7c010a 100644
--- a/crypto/blockpriv.h
+++ b/crypto/blockpriv.h
@@ -78,22 +78,22 @@ struct QCryptoBlockDriver {
 };
 
 
-int qcrypto_block_decrypt_helper(QCryptoCipher *cipher,
-                                 size_t niv,
-                                 QCryptoIVGen *ivgen,
-                                 int sectorsize,
-                                 uint64_t offset,
-                                 uint8_t *buf,
-                                 size_t len,
-                                 Error **errp);
-
-int qcrypto_block_encrypt_helper(QCryptoCipher *cipher,
-                                 size_t niv,
-                                 QCryptoIVGen *ivgen,
-                                 int sectorsize,
-                                 uint64_t offset,
-                                 uint8_t *buf,
-                                 size_t len,
-                                 Error **errp);
+int qcrypto_cipher_decrypt_helper(QCryptoCipher *cipher,
+                                  size_t niv,
+                                  QCryptoIVGen *ivgen,
+                                  int sectorsize,
+                                  uint64_t offset,
+                                  uint8_t *buf,
+                                  size_t len,
+                                  Error **errp);
+
+int qcrypto_cipher_encrypt_helper(QCryptoCipher *cipher,
+                                  size_t niv,
+                                  QCryptoIVGen *ivgen,
+                                  int sectorsize,
+                                  uint64_t offset,
+                                  uint8_t *buf,
+                                  size_t len,
+                                  Error **errp);
 
 #endif /* QCRYPTO_BLOCKPRIV_H */
diff --git a/crypto/block-luks.c b/crypto/block-luks.c
index 51e24d23ca..72dd51051d 100644
--- a/crypto/block-luks.c
+++ b/crypto/block-luks.c
@@ -504,14 +504,14 @@ qcrypto_block_luks_load_key(QCryptoBlock *block,
      * to reset the encryption cipher every time the master
      * key crosses a sector boundary.
      */
-    if (qcrypto_block_decrypt_helper(cipher,
-                                     niv,
-                                     ivgen,
-                                     QCRYPTO_BLOCK_LUKS_SECTOR_SIZE,
-                                     0,
-                                     splitkey,
-                                     splitkeylen,
-                                     errp) < 0) {
+    if (qcrypto_cipher_decrypt_helper(cipher,
+                                      niv,
+                                      ivgen,
+                                      QCRYPTO_BLOCK_LUKS_SECTOR_SIZE,
+                                      0,
+                                      splitkey,
+                                      splitkeylen,
+                                      errp) < 0) {
         goto cleanup;
     }
 
@@ -1219,12 +1219,12 @@ qcrypto_block_luks_create(QCryptoBlock *block,
 
     /* Now we encrypt the split master key with the key generated
      * from the user's password, before storing it */
-    if (qcrypto_block_encrypt_helper(cipher, block->niv, ivgen,
-                                     QCRYPTO_BLOCK_LUKS_SECTOR_SIZE,
-                                     0,
-                                     splitkey,
-                                     splitkeylen,
-                                     errp) < 0) {
+    if (qcrypto_cipher_encrypt_helper(cipher, block->niv, ivgen,
+                                      QCRYPTO_BLOCK_LUKS_SECTOR_SIZE,
+                                      0,
+                                      splitkey,
+                                      splitkeylen,
+                                      errp) < 0) {
         goto error;
     }
 
@@ -1409,10 +1409,10 @@ qcrypto_block_luks_decrypt(QCryptoBlock *block,
 {
     assert(QEMU_IS_ALIGNED(offset, QCRYPTO_BLOCK_LUKS_SECTOR_SIZE));
     assert(QEMU_IS_ALIGNED(len, QCRYPTO_BLOCK_LUKS_SECTOR_SIZE));
-    return qcrypto_block_decrypt_helper(block->cipher,
-                                        block->niv, block->ivgen,
-                                        QCRYPTO_BLOCK_LUKS_SECTOR_SIZE,
-                                        offset, buf, len, errp);
+    return qcrypto_cipher_decrypt_helper(block->cipher,
+                                         block->niv, block->ivgen,
+                                         QCRYPTO_BLOCK_LUKS_SECTOR_SIZE,
+                                         offset, buf, len, errp);
 }
 
 
@@ -1425,10 +1425,10 @@ qcrypto_block_luks_encrypt(QCryptoBlock *block,
 {
     assert(QEMU_IS_ALIGNED(offset, QCRYPTO_BLOCK_LUKS_SECTOR_SIZE));
     assert(QEMU_IS_ALIGNED(len, QCRYPTO_BLOCK_LUKS_SECTOR_SIZE));
-    return qcrypto_block_encrypt_helper(block->cipher,
-                                        block->niv, block->ivgen,
-                                        QCRYPTO_BLOCK_LUKS_SECTOR_SIZE,
-                                        offset, buf, len, errp);
+    return qcrypto_cipher_encrypt_helper(block->cipher,
+                                         block->niv, block->ivgen,
+                                         QCRYPTO_BLOCK_LUKS_SECTOR_SIZE,
+                                         offset, buf, len, errp);
 }
 
 
diff --git a/crypto/block-qcow.c b/crypto/block-qcow.c
index 7606231e79..536ef4ee98 100644
--- a/crypto/block-qcow.c
+++ b/crypto/block-qcow.c
@@ -152,10 +152,10 @@ qcrypto_block_qcow_decrypt(QCryptoBlock *block,
 {
     assert(QEMU_IS_ALIGNED(offset, QCRYPTO_BLOCK_QCOW_SECTOR_SIZE));
     assert(QEMU_IS_ALIGNED(len, QCRYPTO_BLOCK_QCOW_SECTOR_SIZE));
-    return qcrypto_block_decrypt_helper(block->cipher,
-                                        block->niv, block->ivgen,
-                                        QCRYPTO_BLOCK_QCOW_SECTOR_SIZE,
-                                        offset, buf, len, errp);
+    return qcrypto_cipher_decrypt_helper(block->cipher,
+                                         block->niv, block->ivgen,
+                                         QCRYPTO_BLOCK_QCOW_SECTOR_SIZE,
+                                         offset, buf, len, errp);
 }
 
 
@@ -168,10 +168,10 @@ qcrypto_block_qcow_encrypt(QCryptoBlock *block,
 {
     assert(QEMU_IS_ALIGNED(offset, QCRYPTO_BLOCK_QCOW_SECTOR_SIZE));
     assert(QEMU_IS_ALIGNED(len, QCRYPTO_BLOCK_QCOW_SECTOR_SIZE));
-    return qcrypto_block_encrypt_helper(block->cipher,
-                                        block->niv, block->ivgen,
-                                        QCRYPTO_BLOCK_QCOW_SECTOR_SIZE,
-                                        offset, buf, len, errp);
+    return qcrypto_cipher_encrypt_helper(block->cipher,
+                                         block->niv, block->ivgen,
+                                         QCRYPTO_BLOCK_QCOW_SECTOR_SIZE,
+                                         offset, buf, len, errp);
 }
 
 
diff --git a/crypto/block.c b/crypto/block.c
index f4101f0841..540b27e581 100644
--- a/crypto/block.c
+++ b/crypto/block.c
@@ -196,15 +196,15 @@ typedef int (*QCryptoCipherEncryptFunc)(QCryptoCipher *cipher,
                                         size_t len,
                                         Error **errp);
 
-static int do_qcrypto_block_encrypt(QCryptoCipher *cipher,
-                                    size_t niv,
-                                    QCryptoIVGen *ivgen,
-                                    int sectorsize,
-                                    uint64_t offset,
-                                    uint8_t *buf,
-                                    size_t len,
-                                    QCryptoCipherEncryptFunc func,
-                                    Error **errp)
+static int do_qcrypto_cipher_encrypt(QCryptoCipher *cipher,
+                                     size_t niv,
+                                     QCryptoIVGen *ivgen,
+                                     int sectorsize,
+                                     uint64_t offset,
+                                     uint8_t *buf,
+                                     size_t len,
+                                     QCryptoCipherEncryptFunc func,
+                                     Error **errp)
 {
     uint8_t *iv;
     int ret = -1;
@@ -249,29 +249,29 @@ static int do_qcrypto_block_encrypt(QCryptoCipher *cipher,
 }
 
 
-int qcrypto_block_decrypt_helper(QCryptoCipher *cipher,
-                                 size_t niv,
-                                 QCryptoIVGen *ivgen,
-                                 int sectorsize,
-                                 uint64_t offset,
-                                 uint8_t *buf,
-                                 size_t len,
-                                 Error **errp)
+int qcrypto_cipher_decrypt_helper(QCryptoCipher *cipher,
+                                  size_t niv,
+                                  QCryptoIVGen *ivgen,
+                                  int sectorsize,
+                                  uint64_t offset,
+                                  uint8_t *buf,
+                                  size_t len,
+                                  Error **errp)
 {
-    return do_qcrypto_block_encrypt(cipher, niv, ivgen, sectorsize, offset,
-                                    buf, len, qcrypto_cipher_decrypt, errp);
+    return do_qcrypto_cipher_encrypt(cipher, niv, ivgen, sectorsize, offset,
+                                     buf, len, qcrypto_cipher_decrypt, errp);
 }
 
 
-int qcrypto_block_encrypt_helper(QCryptoCipher *cipher,
-                                 size_t niv,
-                                 QCryptoIVGen *ivgen,
-                                 int sectorsize,
-                                 uint64_t offset,
-                                 uint8_t *buf,
-                                 size_t len,
-                                 Error **errp)
+int qcrypto_cipher_encrypt_helper(QCryptoCipher *cipher,
+                                  size_t niv,
+                                  QCryptoIVGen *ivgen,
+                                  int sectorsize,
+                                  uint64_t offset,
+                                  uint8_t *buf,
+                                  size_t len,
+                                  Error **errp)
 {
-    return do_qcrypto_block_encrypt(cipher, niv, ivgen, sectorsize, offset,
-                                    buf, len, qcrypto_cipher_encrypt, errp);
+    return do_qcrypto_cipher_encrypt(cipher, niv, ivgen, sectorsize, offset,
+                                     buf, len, qcrypto_cipher_encrypt, errp);
 }
-- 
2.18.0


