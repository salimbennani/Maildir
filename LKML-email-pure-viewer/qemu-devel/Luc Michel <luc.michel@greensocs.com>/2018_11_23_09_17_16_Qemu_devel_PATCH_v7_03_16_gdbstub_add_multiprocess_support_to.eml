Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 23 Nov 2018 23:32:51 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 205E558040F
	for <like.xu@linux.intel.com>; Fri, 23 Nov 2018 01:19:23 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 23 Nov 2018 01:19:22 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A7/bXaxbwUMlud6Tba8mGv8v/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZrsq7bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJVyJPHI2y?=
 =?us-ascii?q?YYgIAeUDM+ZXoIbzqUYWrRa8BwehC/7jxzFUinDoxq03yPgtERjc0QA8Bd8CrG?=
 =?us-ascii?q?jYodPoP6kSS+C1y6zIwC3FYfNLxTj29Y/GchE9rvGMQ71wddfaxE4rFwPYklqc?=
 =?us-ascii?q?s4nlPzKJ2eQNrWeb6/FtVe21i2E5tQ5xpCOvxsAwhYnSnI4a1lfE9SBgzYszON?=
 =?us-ascii?q?a2S1Z7bMa6HJdMtCyWLZZ6Tt4hTm1ypio3xL0LtYSmcCUI0JgqwwLTZ+aaf4SV?=
 =?us-ascii?q?/B7vTuScLDhiiH9mZr6ygQu5/1K6xe3mTMa01U5HripbndnIsXAAzxjT6smcSv?=
 =?us-ascii?q?th5UetwzmP1wbO6u1eJkA0j6XbJ4Ygwr42iJUTrVzOEjHqlEj1lqOaa1go9+uy?=
 =?us-ascii?q?5+j5bLjrpoWQO5J2hw3mN6QhgM2/AeA2MggUWGib/Pyx1KT98k38XbVGl+A5nb?=
 =?us-ascii?q?fHsJ/EIcQXv7W2AwhI0oYl9xmwESym3NMcnXkGL1JKZgiLjof0O1zWJPD4DPG/?=
 =?us-ascii?q?g0mjkTtxxvDGOKHhDYvJLnTZjLjherN95lVayAo0y9Bf6JRUCqwbLPL0QE/xu8?=
 =?us-ascii?q?TUDgUlPAys3+bnFNJ925saWWKOAa+WLrnesFCV5u80J+mMZYkVuCvyKvQ/5v7u?=
 =?us-ascii?q?i2M5lkEZfaWzwZQXb3W4TbxbJV6Eay/snssZCjVN+Q4/V/DxzluFVzFVejC1Ra?=
 =?us-ascii?q?174zg6DIevC8DEXpysh7qamz62G4ATam1YB1TfLHHzao/RXv4NbD6VcNZslyFB?=
 =?us-ascii?q?WbW/Rotkzxy3qQLh15JhKezb/DBesojsg8No7e/eng1n6DpvEs6G2HuMRWwnom?=
 =?us-ascii?q?RdXjIzweVzrFJwzn+F1q53heEeEsZctN1TVQJvEYPXh8l7AND/XkqVesqCDlOn?=
 =?us-ascii?q?SdWrBRk+VN88xcQJaF07ENKn2EOQlxG2CqMYwuTYTKc/9bjRij2of55w?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AYAAARxfdbhxHrdtBYCh4BBgcGgVIIC?=
 =?us-ascii?q?wGBMFCCEoxwix6ZSIFzFBgUiFQiNQgNAQMBAQEBAQECARMBAQEKCwkIKSMMgjY?=
 =?us-ascii?q?FAgMaAQaCXAMDAQIkGQEBBAopAQIDAQIGAQFICAMBKCsZBYMcggIBAwGmOIFsM?=
 =?us-ascii?q?4J2AQEFgkOETwiHXoMPgRyBVz+BEYdlhgaPG5BpBwKCHASPBCORCJgwgSYiAYI?=
 =?us-ascii?q?KTSODPIIbDBeDSopTcYEEA4orgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AYAAARxfdbhxHrdtBYCh4BBgcGgVIICwGBMFCCEoxwix6?=
 =?us-ascii?q?ZSIFzFBgUiFQiNQgNAQMBAQEBAQECARMBAQEKCwkIKSMMgjYFAgMaAQaCXAMDA?=
 =?us-ascii?q?QIkGQEBBAopAQIDAQIGAQFICAMBKCsZBYMcggIBAwGmOIFsM4J2AQEFgkOETwi?=
 =?us-ascii?q?HXoMPgRyBVz+BEYdlhgaPG5BpBwKCHASPBCORCJgwgSYiAYIKTSODPIIbDBeDS?=
 =?us-ascii?q?opTcYEEA4orgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,269,1539673200"; 
   d="scan'208";a="53436760"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 23 Nov 2018 01:19:21 -0800
Received: from localhost ([::1]:51152 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gQ7cO-0000gd-Hz
	for like.xu@linux.intel.com; Fri, 23 Nov 2018 04:19:20 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:57989)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <luc.michel@greensocs.com>) id 1gQ7b3-0007yS-Ey
	for qemu-devel@nongnu.org; Fri, 23 Nov 2018 04:17:59 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <luc.michel@greensocs.com>) id 1gQ7b1-0000m7-UM
	for qemu-devel@nongnu.org; Fri, 23 Nov 2018 04:17:57 -0500
Received: from greensocs.com ([193.104.36.180]:47023)
	by eggs.gnu.org with esmtp (Exim 4.71)
	(envelope-from <luc.michel@greensocs.com>)
	id 1gQ7ar-0000Lj-2e; Fri, 23 Nov 2018 04:17:45 -0500
Received: from localhost (localhost [127.0.0.1])
	by greensocs.com (Postfix) with ESMTP id 61A055C025C;
	Fri, 23 Nov 2018 10:17:34 +0100 (CET)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=greensocs.com;
	s=mail; t=1542964654;
	bh=KrQImGji4CDiFKtwmdt0cnVuILaxfZ+qg7f4LV2oAA0=;
	h=From:To:Cc:Subject:Date:In-Reply-To:References;
	b=3JdHeqUybAsL0UWJ6XA/3g1BzzIym7R2cVbDABXh3ccIB2wPDRzd6flSr0FXsSrj9
	YETIDAdZghEG3A1CJzd2CfcrDTMcluYz7U4p8u4ibq/OMXQRvHComOiCjMg/usOPYm
	O7egYQPO+f9tOfEkYZjVRI7rHtULI5BBIcrOdSOc=
X-Virus-Scanned: amavisd-new at greensocs.com
Authentication-Results: gs-01.greensocs.com (amavisd-new);
	dkim=pass (1024-bit key) header.d=greensocs.com header.b=Hdx5UaMP;
	dkim=pass (1024-bit key) header.d=greensocs.com header.b=OWWHhx9U
Received: from greensocs.com ([127.0.0.1])
	by localhost (gs-01.greensocs.com [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id QDMe3M1pUPpD; Fri, 23 Nov 2018 10:17:33 +0100 (CET)
Received: by greensocs.com (Postfix, from userid 998)
	id 0B13E5BD1A0; Fri, 23 Nov 2018 10:17:33 +0100 (CET)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=greensocs.com;
	s=mail; t=1542964653;
	bh=KrQImGji4CDiFKtwmdt0cnVuILaxfZ+qg7f4LV2oAA0=;
	h=From:To:Cc:Subject:Date:In-Reply-To:References;
	b=Hdx5UaMPBtPYC342v2voJNW82zeU5xEakY63fT7+eX1AYX4K3G0254MCDZKi7AFTk
	KW0E1uaLSpdqGEC8kMKJvCKUCSB2CDGRSvfx74eD3G8djfovodUor6OLckU2ft/oD+
	22VJRvEy6qA6YIVpfcuIxJvjNUs26m64lOTjO+zY=
Received: from michell-laptop.home.lmichel.fr
	(lfbn-1-8165-82.w90-112.abo.wanadoo.fr [90.112.74.82])
	(using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
	(No client certificate requested)
	(Authenticated sender: luc.michel@greensocs.com)
	by greensocs.com (Postfix) with ESMTPSA id 8E8105C0259;
	Fri, 23 Nov 2018 10:17:32 +0100 (CET)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=greensocs.com;
	s=mail; t=1542964652;
	bh=KrQImGji4CDiFKtwmdt0cnVuILaxfZ+qg7f4LV2oAA0=;
	h=From:To:Cc:Subject:Date:In-Reply-To:References;
	b=OWWHhx9URe7We9BVC5xSR8gIKxWdWqKymgQ7zlz16HVNfedJOaSuR2YIA7TU4t7b0
	6X/L3AoNc51SFRcHao5eX8oLG0L9gVejoDvLyufV8xAb3s1LIGmi9cvrVncUJEF9Yo
	XUo07hTLNmIMBp+Ltjgk1qTECWDPBx5jdt2D9GC0=
From: Luc Michel <luc.michel@greensocs.com>
To: qemu-devel@nongnu.org
Date: Fri, 23 Nov 2018 10:17:16 +0100
Message-Id: <20181123091729.29921-4-luc.michel@greensocs.com>
X-Mailer: git-send-email 2.19.1
In-Reply-To: <20181123091729.29921-1-luc.michel@greensocs.com>
References: <20181123091729.29921-1-luc.michel@greensocs.com>
MIME-Version: 1.0
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 3.x [fuzzy]
X-Received-From: 193.104.36.180
Subject: [Qemu-devel] [PATCH v7 03/16] gdbstub: add multiprocess support to
 '?' packets
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Peter Maydell <peter.maydell@linaro.org>,
	Eduardo Habkost <ehabkost@redhat.com>, alistair@alistair23.me,
	mark.burton@greensocs.com,
	=?UTF-8?q?Philippe=20Mathieu-Daud=C3=A9?= <f4bug@amsat.org>,
	saipava@xilinx.com, edgari@xilinx.com, qemu-arm@nongnu.org,
	Luc Michel <luc.michel@greensocs.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

The gdb_get_cpu_pid() function does the PID lookup for the given CPU. It
checks if the CPU is a direct child of a CPU cluster. If it is, the
returned PID is the cluster ID plus one (cluster IDs start at 0, GDB
PIDs at 1). When the CPU is not a child of such a container, the PID of
the first process is returned.

The gdb_fmt_thread_id() function generates the string to be used to ident=
ify
a given thread, in a response packet for the peer. This function
supports generating thread IDs when multiprocess mode is enabled (in the
form `p<pid>.<tid>').

Use them in the reply to a '?' request.

Signed-off-by: Luc Michel <luc.michel@greensocs.com>
Acked-by: Alistair Francis <alistair.francis@wdc.com>
Reviewed-by: Edgar E. Iglesias <edgar.iglesias@xilinx.com>
---
 gdbstub.c | 60 +++++++++++++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 58 insertions(+), 2 deletions(-)

diff --git a/gdbstub.c b/gdbstub.c
index 26f5a7449a..4fbc05dfe3 100644
--- a/gdbstub.c
+++ b/gdbstub.c
@@ -638,10 +638,52 @@ static int memtox(char *buf, const char *mem, int l=
en)
         }
     }
     return p - buf;
 }
=20
+static uint32_t gdb_get_cpu_pid(const GDBState *s, CPUState *cpu)
+{
+#ifndef CONFIG_USER_ONLY
+    gchar *path, *name;
+    Object *obj;
+    CPUClusterState *cluster;
+    uint32_t ret;
+
+    path =3D object_get_canonical_path(OBJECT(cpu));
+    name =3D object_get_canonical_path_component(OBJECT(cpu));
+
+    if (path =3D=3D NULL) {
+        ret =3D s->processes[0].pid;
+        goto out;
+    }
+
+    /*
+     * Retrieve the CPU parent path by removing the last '/' and the CPU=
 name
+     * from the CPU canonical path. */
+    path[strlen(path) - strlen(name) - 1] =3D '\0';
+
+    obj =3D object_resolve_path_type(path, TYPE_CPU_CLUSTER, NULL);
+
+    if (obj =3D=3D NULL) {
+        ret =3D s->processes[0].pid;
+        goto out;
+    }
+
+    cluster =3D CPU_CLUSTER(obj);
+    ret =3D cluster->cluster_id + 1;
+
+out:
+    g_free(name);
+    g_free(path);
+
+    return ret;
+
+#else
+    return s->processes[0].pid;
+#endif
+}
+
 static const char *get_feature_xml(const char *p, const char **newp,
                                    CPUClass *cc)
 {
     size_t len;
     int i;
@@ -907,10 +949,23 @@ static CPUState *find_cpu(uint32_t thread_id)
     }
=20
     return NULL;
 }
=20
+static char *gdb_fmt_thread_id(const GDBState *s, CPUState *cpu,
+                           char *buf, size_t buf_size)
+{
+    if (s->multiprocess) {
+        snprintf(buf, buf_size, "p%02x.%02x",
+                 gdb_get_cpu_pid(s, cpu), cpu_gdb_index(cpu));
+    } else {
+        snprintf(buf, buf_size, "%02x", cpu_gdb_index(cpu));
+    }
+
+    return buf;
+}
+
 static int is_query_packet(const char *p, const char *query, char separa=
tor)
 {
     unsigned int query_len =3D strlen(query);
=20
     return strncmp(p, query, query_len) =3D=3D 0 &&
@@ -1018,22 +1073,23 @@ static int gdb_handle_packet(GDBState *s, const c=
har *line_buf)
     const char *p;
     uint32_t thread;
     int ch, reg_size, type, res;
     uint8_t mem_buf[MAX_PACKET_LENGTH];
     char buf[sizeof(mem_buf) + 1 /* trailing NUL */];
+    char thread_id[16];
     uint8_t *registers;
     target_ulong addr, len;
=20
     trace_gdbstub_io_command(line_buf);
=20
     p =3D line_buf;
     ch =3D *p++;
     switch(ch) {
     case '?':
         /* TODO: Make this return the correct value for user-mode.  */
-        snprintf(buf, sizeof(buf), "T%02xthread:%02x;", GDB_SIGNAL_TRAP,
-                 cpu_gdb_index(s->c_cpu));
+        snprintf(buf, sizeof(buf), "T%02xthread:%s;", GDB_SIGNAL_TRAP,
+                 gdb_fmt_thread_id(s, s->c_cpu, thread_id, sizeof(thread=
_id)));
         put_packet(s, buf);
         /* Remove all the breakpoints when this query is issued,
          * because gdb is doing and initial connect and the state
          * should be cleaned up.
          */
--=20
2.19.1


