Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 25 Nov 2018 22:12:32 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id DA76D580478
	for <like.xu@linux.intel.com>; Sat, 24 Nov 2018 23:36:45 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga007-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 24 Nov 2018 23:36:45 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AFKI5DBZiuA3GUqv0zAyu6W3/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZrsWybnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJSSJBDIOy?=
 =?us-ascii?q?YYgBAeUPMulXrZXyqVQToxumBwSiBuzixiJGi3Pqw6I6yP8sER3E0QE6A94CrH?=
 =?us-ascii?q?rZodfzOawPUe611q7IzTDbYv1Rwzj98pTHfQ4lofqRQb9wacTRxlcrFwzelFqQ?=
 =?us-ascii?q?tInlNC6S2+QIqWeb9fZvWvyri2I9sQ5xujavydkoiobSnI0V11XE+D52wIYwP9?=
 =?us-ascii?q?K4SUp7bcS4H5tXsiGXLo17Sd4hTWFwoCs21KEKtJ2hcCQX1ZgqxATTZ+KJfoWI?=
 =?us-ascii?q?+B7vSeScLS9miH5/eL+yhwy+/Eq6xuHhV8S50VBHpTdfnNbWrHACzRnT59CHSv?=
 =?us-ascii?q?Rj+keh3i6C1wTS6uFfPUA0jrDXK5Enwr4tjJYTtl7DHiDulEX3iq+ZaFkk9/C2?=
 =?us-ascii?q?5+j7YbjqvIKQO5J3hw3kLKgjlMyyDf4lPgUMR2Sb/P6z1Lzn/U33WrVKifg2n7?=
 =?us-ascii?q?HAsJ/EIMQbu7e1DBJL3YY99Rm/Cy6q388fnXkaKlJKZAyIj5PuN1HKIfD4Dumw?=
 =?us-ascii?q?j06jkTd23/3GOrzhApPQLnnMirvhfLB961JCxwo319xQ+5VUCrQaLfL1XU/xst?=
 =?us-ascii?q?PYDhkkMwCuxObnEtp92psEWW2TGq+ZLL/SsViQ6+IrIumMZ5EatCzyKvg4/PPu?=
 =?us-ascii?q?iX45mVkAfaimx5cXaXa4Huh4LEWde3bjntABEWJZ9jc4V/Hg3V2eTSZINTH1W6?=
 =?us-ascii?q?Mn+ip9DoWgAoHeAIe3j/uE1Sa/G5RQIWdeFlGLF2yvboiBRrIAZTyfJpxclCcZ?=
 =?us-ascii?q?X+2kQo4lyRb8rQL/1v9rI/TZ/mgCuIv+2cNpz+vUkx406HpzFcvKyHyHTWx/gj?=
 =?us-ascii?q?YVQSQr1rt0u013xwS/1v1JnuJREZRo5/pIW09uJIPCxug8END7Wwvpec2AQ1Kr?=
 =?us-ascii?q?BN6hBGdiYMg2xooralx2FtHqpwjN0i6gCqIQ3+iODYY//6aa1mD/KsJ3wmvD/K?=
 =?us-ascii?q?YkhlgiBMBIMDv11eZE6wHPCtuRwA2inKGwePFZhXaV+Q=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0APAACWUPpbhxHrdtBhHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgTCCYoN5iBhfiyCBYC2JHW6NMYFzEgEBGBSIWiI0CQ0BAwEBAQE?=
 =?us-ascii?q?BAQIBEwEBAQoLCQgbDiMMgjYFAgMaAQaCWwEBAQECAQECIAQRCAEFCgwdAQIBA?=
 =?us-ascii?q?gECBgEBBQULDQICIgQCAgMBHxEBBQEcBg0GAgEBAYMcgWkBAw0IAQMBmg48iw1?=
 =?us-ascii?q?8FgUBF4J3BYEBgUOBaAoZJw1agTcCBhJ5iWKBHIFXP4E4gmuIAoJXAokfBIY5h?=
 =?us-ascii?q?HOLMwcCghwEhB2KbAYYiVGHN5gJAgQCBAUCBQ8hgSWCDU0jgQGCO4IbDBcSgzi?=
 =?us-ascii?q?KVHCBBAM7ijmBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0APAACWUPpbhxHrdtBhHAEBAQQBAQcEAQGBUQcBAQsBgTC?=
 =?us-ascii?q?CYoN5iBhfiyCBYC2JHW6NMYFzEgEBGBSIWiI0CQ0BAwEBAQEBAQIBEwEBAQoLC?=
 =?us-ascii?q?QgbDiMMgjYFAgMaAQaCWwEBAQECAQECIAQRCAEFCgwdAQIBAgECBgEBBQULDQI?=
 =?us-ascii?q?CIgQCAgMBHxEBBQEcBg0GAgEBAYMcgWkBAw0IAQMBmg48iw18FgUBF4J3BYEBg?=
 =?us-ascii?q?UOBaAoZJw1agTcCBhJ5iWKBHIFXP4E4gmuIAoJXAokfBIY5hHOLMwcCghwEhB2?=
 =?us-ascii?q?KbAYYiVGHN5gJAgQCBAUCBQ8hgSWCDU0jgQGCO4IbDBcSgziKVHCBBAM7ijmBd?=
 =?us-ascii?q?wEB?=
X-IronPort-AV: E=Sophos;i="5.56,277,1539673200"; 
   d="scan'208";a="63823867"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mga01b.intel.com with ESMTP/TLS/AES256-SHA; 24 Nov 2018 23:36:44 -0800
Received: from localhost ([::1]:58981 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gQoyC-0002E0-0c
	for like.xu@linux.intel.com; Sun, 25 Nov 2018 02:36:44 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:45806)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <marcel.apfelbaum@gmail.com>) id 1gQoxx-0002Dk-M5
	for qemu-devel@nongnu.org; Sun, 25 Nov 2018 02:36:30 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <marcel.apfelbaum@gmail.com>) id 1gQoxu-0003yn-HU
	for qemu-devel@nongnu.org; Sun, 25 Nov 2018 02:36:29 -0500
Received: from mail-wm1-x341.google.com ([2a00:1450:4864:20::341]:54443)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <marcel.apfelbaum@gmail.com>)
	id 1gQoxu-0003yP-AD
	for qemu-devel@nongnu.org; Sun, 25 Nov 2018 02:36:26 -0500
Received: by mail-wm1-x341.google.com with SMTP id z18so466046wmc.4
	for <qemu-devel@nongnu.org>; Sat, 24 Nov 2018 23:36:26 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
	h=subject:to:cc:references:from:message-id:date:user-agent
	:mime-version:in-reply-to:content-transfer-encoding:content-language;
	bh=skwR9pPqBBSXc+DNPexrwf+vK2UlQ2SxnKNULwHJ9Qs=;
	b=lrEnxO8IFillqb9ZMjpFtx1sEkWxgpNMl6ks+3Zm/F0XCw434S1tD/M9evuBJz16UE
	HuNPvPW8zhkOfMTGge7Ag8W5OWSy28114osVwL1Fm47Pnrp+DBl+ZSSZavJzpWcsm5fg
	IHhgkKHUtdNbBkgpfPLX1okUmZOqJOTXyy/DN4vuQWCkkaL3u+Vls8UokxNjhiyfAmyS
	+rytLjQb1/VzWG5RkJeBxBNMj4vxjzrWQLix/+NICQMrkhB1vmB9M64Pwx0SeAH6mbO1
	gNFBE4LaAcA71uX1koRqRLH6SBozZ26g6HdtlHa4gmZh/yu9rvdbyCMp6ORY5t/ilA+B
	A8WA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:subject:to:cc:references:from:message-id:date
	:user-agent:mime-version:in-reply-to:content-transfer-encoding
	:content-language;
	bh=skwR9pPqBBSXc+DNPexrwf+vK2UlQ2SxnKNULwHJ9Qs=;
	b=USR/j8DDeKRRdi8cMeaem5Y1PPQRK4ZrhCSp15BW0sbFKSJSBryn53gxeupTHElRKf
	x40147TcMvhEn6O4R5SZTCe63QP+Ew2nzuqmdPVSxBcSfqDyFUDdMF8zN73b1afwspQm
	b/Bx4KUosNDBGcPCKn3Bc+4PF4cofbxScBWOMrfsjXzxP3Ne8tuO+/KuBX1o0S/Arl0r
	0P7+/+8f0v8kNKPDaP9kVg4Rk9PzKykofBnWT31kQsM9LnE8tTLgk7/soAgjg7dc0wvG
	11QAqRMA1U5ccyZlWgAqCWzIDhMTpUjtxwzUIVQg7yI95x1kzNTzLooGggM34y8OgIQ0
	L+3w==
X-Gm-Message-State: AGRZ1gKTPgs75xxZAaA0ZdyO27TCuACYxrUte//7yloAKcB0XhyWELWy
	NdGfvXx0JyaeDJan5Z5Ot64=
X-Google-Smtp-Source: AJdET5czBjUJzsoguZmfPCQpHuA7uG/aMonfM3ObJU9+CIBG4YsFbeQIrDfuqmp3tDfRFRyj2iDtiA==
X-Received: by 2002:a1c:eed3:: with SMTP id j80mr19295465wmi.58.1543131385207; 
	Sat, 24 Nov 2018 23:36:25 -0800 (PST)
Received: from localhost.localdomain ([2.55.7.166])
	by smtp.gmail.com with ESMTPSA id
	j128sm10690920wmb.3.2018.11.24.23.36.13
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Sat, 24 Nov 2018 23:36:24 -0800 (PST)
To: Yuval Shaia <yuval.shaia@oracle.com>
References: <20181113071336.6242-1-yuval.shaia@oracle.com>
	<20181113071336.6242-18-yuval.shaia@oracle.com>
	<0770c06d-b482-c0bf-0d6a-efe31984b31e@gmail.com>
	<20181118082446.GC3638@lap1>
From: Marcel Apfelbaum <marcel.apfelbaum@gmail.com>
Message-ID: <abcf3559-e1c7-c93f-f244-25efd3df05c7@gmail.com>
Date: Sun, 25 Nov 2018 09:35:43 +0200
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
	Thunderbird/60.0
MIME-Version: 1.0
In-Reply-To: <20181118082446.GC3638@lap1>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 7bit
Content-Language: en-US
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 2a00:1450:4864:20::341
Subject: Re: [Qemu-devel] [PATCH v3 17/23] hw/pvrdma: Fill error code in
 command's response
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: dmitry.fleytman@gmail.com, shamir.rabinovitch@oracle.com,
	jasowang@redhat.com, cohuck@redhat.com, armbru@redhat.com,
	qemu-devel@nongnu.org, pbonzini@redhat.com
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>



On 11/18/18 10:24 AM, Yuval Shaia wrote:
> On Sat, Nov 17, 2018 at 02:22:31PM +0200, Marcel Apfelbaum wrote:
>>
>> On 11/13/18 9:13 AM, Yuval Shaia wrote:
>>> Driver checks error code let's set it.
>>>
>>> Signed-off-by: Yuval Shaia <yuval.shaia@oracle.com>
>>> ---
>>>    hw/rdma/vmw/pvrdma_cmd.c | 67 ++++++++++++++++++++++++++++------------
>>>    1 file changed, 48 insertions(+), 19 deletions(-)
>>>
>>> diff --git a/hw/rdma/vmw/pvrdma_cmd.c b/hw/rdma/vmw/pvrdma_cmd.c
>>> index 0d3c818c20..a326c5d470 100644
>>> --- a/hw/rdma/vmw/pvrdma_cmd.c
>>> +++ b/hw/rdma/vmw/pvrdma_cmd.c
>>> @@ -131,7 +131,8 @@ static int query_port(PVRDMADev *dev, union pvrdma_cmd_req *req,
>>>        if (rdma_backend_query_port(&dev->backend_dev,
>>>                                    (struct ibv_port_attr *)&attrs)) {
>>> -        return -ENOMEM;
>>> +        resp->hdr.err = -ENOMEM;
>>> +        goto out;
>>>        }
>>>        memset(resp, 0, sizeof(*resp));
>>> @@ -150,7 +151,9 @@ static int query_port(PVRDMADev *dev, union pvrdma_cmd_req *req,
>>>        resp->attrs.active_width = 1;
>>>        resp->attrs.active_speed = 1;
>>> -    return 0;
>>> +out:
>>> +    pr_dbg("ret=%d\n", resp->hdr.err);
>>> +    return resp->hdr.err;
>>>    }
>>>    static int query_pkey(PVRDMADev *dev, union pvrdma_cmd_req *req,
>>> @@ -170,7 +173,7 @@ static int query_pkey(PVRDMADev *dev, union pvrdma_cmd_req *req,
>>>        resp->pkey = PVRDMA_PKEY;
>>>        pr_dbg("pkey=0x%x\n", resp->pkey);
>>> -    return 0;
>>> +    return resp->hdr.err;
>>>    }
>>>    static int create_pd(PVRDMADev *dev, union pvrdma_cmd_req *req,
>>> @@ -200,7 +203,9 @@ static int destroy_pd(PVRDMADev *dev, union pvrdma_cmd_req *req,
>>>        rdma_rm_dealloc_pd(&dev->rdma_dev_res, cmd->pd_handle);
>>> -    return 0;
>>> +    rsp->hdr.err = 0;
>>>   with se
>> Is it possible to ensure err is 0 by default during hdr creation
>> instead of manually setting it every time?
> Yes we can but since these handlers any fills some other fields in the
> response i thought it will be clean if they will fill the op-status as
> well.
> I believe filling it at "handler" level is more modular.
> Do you think filling it outside will make the code cleaner?

The only problem with manually clearing the filed
is one might forget to do it and we may see random
err codes in the future, hard to debug,

Thanks,
Marcel

>
>> Thanks,
>> Marcel
>>
>>> +
>>> +    return rsp->hdr.err;
>>>    }
>>>    static int create_mr(PVRDMADev *dev, union pvrdma_cmd_req *req,
>>> @@ -251,7 +256,9 @@ static int destroy_mr(PVRDMADev *dev, union pvrdma_cmd_req *req,
>>>        rdma_rm_dealloc_mr(&dev->rdma_dev_res, cmd->mr_handle);
>>> -    return 0;
>>> +    rsp->hdr.err = 0;
>>> +
>>> +    return rsp->hdr.err;
>>>    }
>>>    static int create_cq_ring(PCIDevice *pci_dev , PvrdmaRing **ring,
>>> @@ -353,7 +360,8 @@ static int destroy_cq(PVRDMADev *dev, union pvrdma_cmd_req *req,
>>>        cq = rdma_rm_get_cq(&dev->rdma_dev_res, cmd->cq_handle);
>>>        if (!cq) {
>>>            pr_dbg("Invalid CQ handle\n");
>>> -        return -EINVAL;
>>> +        rsp->hdr.err = -EINVAL;
>>> +        goto out;
>>>        }
>>>        ring = (PvrdmaRing *)cq->opaque;
>>> @@ -364,7 +372,11 @@ static int destroy_cq(PVRDMADev *dev, union pvrdma_cmd_req *req,
>>>        rdma_rm_dealloc_cq(&dev->rdma_dev_res, cmd->cq_handle);
>>> -    return 0;
>>> +    rsp->hdr.err = 0;
>>> +
>>> +out:
>>> +    pr_dbg("ret=%d\n", rsp->hdr.err);
>>> +    return rsp->hdr.err;
>>>    }
>>>    static int create_qp_rings(PCIDevice *pci_dev, uint64_t pdir_dma,
>>> @@ -553,7 +565,8 @@ static int destroy_qp(PVRDMADev *dev, union pvrdma_cmd_req *req,
>>>        qp = rdma_rm_get_qp(&dev->rdma_dev_res, cmd->qp_handle);
>>>        if (!qp) {
>>>            pr_dbg("Invalid QP handle\n");
>>> -        return -EINVAL;
>>> +        rsp->hdr.err = -EINVAL;
>>> +        goto out;
>>>        }
>>>        rdma_rm_dealloc_qp(&dev->rdma_dev_res, cmd->qp_handle);
>>> @@ -567,7 +580,11 @@ static int destroy_qp(PVRDMADev *dev, union pvrdma_cmd_req *req,
>>>        rdma_pci_dma_unmap(PCI_DEVICE(dev), ring->ring_state, TARGET_PAGE_SIZE);
>>>        g_free(ring);
>>> -    return 0;
>>> +    rsp->hdr.err = 0;
>>> +
>>> +out:
>>> +    pr_dbg("ret=%d\n", rsp->hdr.err);
>>> +    return rsp->hdr.err;
>>>    }
>>>    static int create_bind(PVRDMADev *dev, union pvrdma_cmd_req *req,
>>> @@ -580,7 +597,8 @@ static int create_bind(PVRDMADev *dev, union pvrdma_cmd_req *req,
>>>        pr_dbg("index=%d\n", cmd->index);
>>>        if (cmd->index >= MAX_PORT_GIDS) {
>>> -        return -EINVAL;
>>> +        rsp->hdr.err = -EINVAL;
>>> +        goto out;
>>>        }
>>>        pr_dbg("gid[%d]=0x%llx,0x%llx\n", cmd->index,
>>> @@ -590,10 +608,15 @@ static int create_bind(PVRDMADev *dev, union pvrdma_cmd_req *req,
>>>        rc = rdma_rm_add_gid(&dev->rdma_dev_res, &dev->backend_dev,
>>>                             dev->backend_eth_device_name, gid, cmd->index);
>>>        if (rc < 0) {
>>> -        return -EINVAL;
>>> +        rsp->hdr.err = rc;
>>> +        goto out;
>>>        }
>>> -    return 0;
>>> +    rsp->hdr.err = 0;
>>> +
>>> +out:
>>> +    pr_dbg("ret=%d\n", rsp->hdr.err);
>>> +    return rsp->hdr.err;
>>>    }
>>>    static int destroy_bind(PVRDMADev *dev, union pvrdma_cmd_req *req,
>>> @@ -606,7 +629,8 @@ static int destroy_bind(PVRDMADev *dev, union pvrdma_cmd_req *req,
>>>        pr_dbg("index=%d\n", cmd->index);
>>>        if (cmd->index >= MAX_PORT_GIDS) {
>>> -        return -EINVAL;
>>> +        rsp->hdr.err = -EINVAL;
>>> +        goto out;
>>>        }
>>>        rc = rdma_rm_del_gid(&dev->rdma_dev_res, &dev->backend_dev,
>>> @@ -617,7 +641,11 @@ static int destroy_bind(PVRDMADev *dev, union pvrdma_cmd_req *req,
>>>            goto out;
>>>        }
>>> -    return 0;
>>> +    rsp->hdr.err = 0;
>>> +
>>> +out:
>>> +    pr_dbg("ret=%d\n", rsp->hdr.err);
>>> +    return rsp->hdr.err;
>>>    }
>>>    static int create_uc(PVRDMADev *dev, union pvrdma_cmd_req *req,
>>> @@ -634,9 +662,8 @@ static int create_uc(PVRDMADev *dev, union pvrdma_cmd_req *req,
>>>        resp->hdr.err = rdma_rm_alloc_uc(&dev->rdma_dev_res, cmd->pfn,
>>>                                         &resp->ctx_handle);
>>> -    pr_dbg("ret=%d\n", resp->hdr.err);
>>> -
>>> -    return 0;
>>> +    pr_dbg("ret=%d\n", rsp->hdr.err);
>>> +    return rsp->hdr.err;
>>>    }
>>>    static int destroy_uc(PVRDMADev *dev, union pvrdma_cmd_req *req,
>>> @@ -648,7 +675,9 @@ static int destroy_uc(PVRDMADev *dev, union pvrdma_cmd_req *req,
>>>        rdma_rm_dealloc_uc(&dev->rdma_dev_res, cmd->ctx_handle);
>>> -    return 0;
>>> +    rsp->hdr.err = 0;
>>> +
>>> +    return rsp->hdr.err;
>>>    }
>>>    struct cmd_handler {
>>>        uint32_t cmd;
>>> @@ -696,7 +725,7 @@ int execute_command(PVRDMADev *dev)
>>>        }
>>>        err = cmd_handlers[dsr_info->req->hdr.cmd].exec(dev, dsr_info->req,
>>> -                            dsr_info->rsp);
>>> +                                                    dsr_info->rsp);
>>>    out:
>>>        set_reg_val(dev, PVRDMA_REG_ERR, err);
>>>        post_interrupt(dev, INTR_VEC_CMD_RING);


