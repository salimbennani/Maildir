Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 25 Nov 2018 22:12:32 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id E8DB45803EB
	for <like.xu@linux.intel.com>; Sat, 24 Nov 2018 23:38:38 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 24 Nov 2018 23:38:39 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3ArEvljhN+WuZxMPoSBFYl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0K/38r8bcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRthfVyJBDI2/?=
 =?us-ascii?q?YYUAAeUOMuREoIfyulUOtRmzCwujCe/yxDJEmmH53bYh3uQ9EwzLxhAsE84AvX?=
 =?us-ascii?q?nWqtj+KaccUfqyzKnN1TjNaOlZ2S3h54fWdhAqvO2BXap+ccXPzUkgDBnKjkiV?=
 =?us-ascii?q?qYf4OD6V0/4Cs3KH4OV+UeKjkXQoqxl/ojexwscjkZPGhp8Qyl3f+iV5xZw6Jd?=
 =?us-ascii?q?y8SEJhfdGkF55QujicOoBrQc0iW3lltDgmxrAFo5K3YTUGxZc9yxLBZfGKc5KE?=
 =?us-ascii?q?7g/hWeqJPzt0nnJodbKlixuw60Ss1+zxW8iy3V1XtCRKiMPMuWoI1xHL6siIVP?=
 =?us-ascii?q?99/kC51DaL1gDT8f1EIVsumarULZ4h36Q8lp0JsUTMBiP2mUP2g7GKdkg85OSk?=
 =?us-ascii?q?9+fqbq/7qpOBNIJ4kB/yP6oul8ClHOg1MBACX22B9uS90L3j81f5QLJPjvAui6?=
 =?us-ascii?q?nWrpXaJdkCqqGkHQBVzJgs6xKmAzi919QYgH8HI05bdxKciITpP1DOIPPmAvul?=
 =?us-ascii?q?jFWsjS9mx/THPr3nH5XMIWLPkLbnfbZh9UFczBA/wsxY55JREbwBJvXzWkn+tN?=
 =?us-ascii?q?zeEx81KQu0w/zoCNllzIMRRXqPArOFMKPVqVKI4uMvI+qSa4MPtzf9NuMo5/rv?=
 =?us-ascii?q?jX8/hF8ccrOl3ZoRaHCkAPtmJ1+VbmbrgtcEQi83uBEjRrnqlEGaSmwUIHKzRL?=
 =?us-ascii?q?4noDc8Do2gEMHEXI/qhbWA2CKyGNpRfnxHDVaXVm7lcpjBV/oSZSbBH8l6jzZR?=
 =?us-ascii?q?ULGgT5MmhwijsRK/x7d5I+6R4CABqJ/4yPBz4Ovckwx08iZ7WN+A2WOARH0hg2?=
 =?us-ascii?q?UTWjUt17p+q0Eu9lDW4LVmivgQLtxa5voBBhYnK5fYifd6AtH7cgXbd9yNRRCt?=
 =?us-ascii?q?RdDwRXk9S9Mt2c5IbUJwCsmnhxbr0C+jArtTnLuOQNQ2+7nbwHH3KO5nxnrG3b?=
 =?us-ascii?q?VnhF4jBoNCP2mvhaNX7QXfB4fV1U6ekuLifL4Z1jTQ3H2OwWqHoAdTVws0Gb3P?=
 =?us-ascii?q?WnYNZ03Xhc706kPLU/mlDrFjehJMzNPHJqZUZ9nBi1JAS/H+ftPEbCb5gGe5AB?=
 =?us-ascii?q?eSgKmFZovsfHscwC7dIE8emgsX8DCNMg16Tiymo3/VDxR0GF7val+q+u57+12h?=
 =?us-ascii?q?SUph6giQZEBln5Ot9BMRj/WBTrtH27sesyol7TxsElu51dvLDvKPogNgeONXZt?=
 =?us-ascii?q?ZrswQP7n7QqwEoZs/oFKtlnFNLNl0v504=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AWAABfUPpbhxHrdtBhHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGBMIJig3mIGF+LIIFgCCWJHY4fgXMSAQEYFIhaIjQJDQEDAQEBAQEBAgE?=
 =?us-ascii?q?TAQEBCgsJCBsOIwyCNgUCAxoBBoJcAQIDAQIgBBEIAQUKDB4CAQIBAgYBAQUFC?=
 =?us-ascii?q?w0CAiIEAgIDAR0CEQEFARwGAQwGAgEBAYMcgWkBAxUBAwGaDjyLDXwWBQEXgnc?=
 =?us-ascii?q?FgQGBQ4FoChknDVqBNwIGEnmKfoFXP4E4DIJfglaFLIJXAokfBIY5hHOLBS4HA?=
 =?us-ascii?q?oIcBIQdh0eDJQYYgVmFC4JthzeOTYk8AgQCBAUCBQ8hgSWCDU0jgQGCO4IbDBc?=
 =?us-ascii?q?SgziKVHCBBAM7ijmBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0AWAABfUPpbhxHrdtBhHQEBBQEHBQGBUQgBCwGBMIJig3m?=
 =?us-ascii?q?IGF+LIIFgCCWJHY4fgXMSAQEYFIhaIjQJDQEDAQEBAQEBAgETAQEBCgsJCBsOI?=
 =?us-ascii?q?wyCNgUCAxoBBoJcAQIDAQIgBBEIAQUKDB4CAQIBAgYBAQUFCw0CAiIEAgIDAR0?=
 =?us-ascii?q?CEQEFARwGAQwGAgEBAYMcgWkBAxUBAwGaDjyLDXwWBQEXgncFgQGBQ4FoChknD?=
 =?us-ascii?q?VqBNwIGEnmKfoFXP4E4DIJfglaFLIJXAokfBIY5hHOLBS4HAoIcBIQdh0eDJQY?=
 =?us-ascii?q?YgVmFC4JthzeOTYk8AgQCBAUCBQ8hgSWCDU0jgQGCO4IbDBcSgziKVHCBBAM7i?=
 =?us-ascii?q?jmBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,277,1539673200"; 
   d="scan'208";a="53578347"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 24 Nov 2018 23:38:38 -0800
Received: from localhost ([::1]:58984 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gQp01-0003kS-AE
	for like.xu@linux.intel.com; Sun, 25 Nov 2018 02:38:37 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:46003)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <marcel.apfelbaum@gmail.com>) id 1gQozj-0003jS-LK
	for qemu-devel@nongnu.org; Sun, 25 Nov 2018 02:38:20 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <marcel.apfelbaum@gmail.com>) id 1gQozg-0005ED-Fn
	for qemu-devel@nongnu.org; Sun, 25 Nov 2018 02:38:19 -0500
Received: from mail-wm1-x344.google.com ([2a00:1450:4864:20::344]:34910)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <marcel.apfelbaum@gmail.com>)
	id 1gQozg-0005Bs-6g
	for qemu-devel@nongnu.org; Sun, 25 Nov 2018 02:38:16 -0500
Received: by mail-wm1-x344.google.com with SMTP id c126so15219756wmh.0
	for <qemu-devel@nongnu.org>; Sat, 24 Nov 2018 23:38:16 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
	h=subject:to:references:from:message-id:date:user-agent:mime-version
	:in-reply-to:content-transfer-encoding:content-language;
	bh=AVc2A08GLY33ltIQ0IwAp0RRk32Puvcq8nwAWzKCq3c=;
	b=s2fqp6b6qOyS2PKUmp+sRkTrTTvGQa3yFOmJZ6vS4un+/Q35hKU6nOMbCzYLG3Glr6
	uNcVqVFTg1ny97QQi5DHNzDRiOWVDpIw+a5wmI3YlKRC30YdMoFrp59gW66/2WTOoCe0
	+tyZEke9JrlsHCW18sIWPirX0/GmDBi9iF70z9A32B49lVrTIvl3XH9Tzwp+jIJgF8xz
	jAErh8UR6JxB5MZzvmaGGYL2OCL0Q3MlspFVKucO6zmmQ04f+0QB2WgpK//E4srG/0Tk
	Bp2ruXDPsuCZX9eZ7ETdCbEYslB+KvWI8abtK+RPQ289iJv+wMEk2UI9zji6g/DAqNXB
	hUFA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:subject:to:references:from:message-id:date
	:user-agent:mime-version:in-reply-to:content-transfer-encoding
	:content-language;
	bh=AVc2A08GLY33ltIQ0IwAp0RRk32Puvcq8nwAWzKCq3c=;
	b=feRxyldGRTZyFBTKijO20Q2A4fIXubGCWjXK/jf69dgDqi3YGL1N1Qa4NxfZU3eGfl
	ZCWglKgnpsTaVCiWUT+uAo6ur09P3+gOWyUao5n+SXOGXde78ogz6hIbEvAc2oZtLrkb
	k4egvcD1VyqB1gJpyiiNqlujjYE9rRBZszxEi4c2bEkgjVHhM9tNn5iYUw8oRWHy7wYy
	2eL2hZZl89kduyYsFiX9lnguS/q2bqSitRsTHXtt+ET1pdwz/zJUxOJr6BcdKGtEURAE
	04Gy/y/lT+3v9OYR3uOgppy6JiZyC+D5ftbzFKe5l8ShYGbqEkUji+UoZLcE/VZHxEB7
	xh6Q==
X-Gm-Message-State: AGRZ1gJx1t9EsUaOek4qB54NNeRPrmBqbN0BJ0I0MYqBhVcA4by8jvmC
	47dlB46EqxAQO9BO2poHewo=
X-Google-Smtp-Source: AFSGD/XaMEKOIesFuJywNx3jhPDfJ+PsiwRh+tKiM+RkdTvAkj61P0DMEtpO3pK1xFNo77Sp75rC4A==
X-Received: by 2002:a1c:a6cd:: with SMTP id
	p196mr19445740wme.142.1543131495066; 
	Sat, 24 Nov 2018 23:38:15 -0800 (PST)
Received: from localhost.localdomain ([2.55.7.166])
	by smtp.gmail.com with ESMTPSA id
	i9sm27489688wrs.34.2018.11.24.23.38.09
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Sat, 24 Nov 2018 23:38:14 -0800 (PST)
To: Yuval Shaia <yuval.shaia@oracle.com>, dmitry.fleytman@gmail.com,
	jasowang@redhat.com, eblake@redhat.com, armbru@redhat.com,
	pbonzini@redhat.com, qemu-devel@nongnu.org, shamir.rabinovitch@oracle.com, 
	cohuck@redhat.com
References: <20181118122843.10892-1-yuval.shaia@oracle.com>
	<20181118122843.10892-18-yuval.shaia@oracle.com>
From: Marcel Apfelbaum <marcel.apfelbaum@gmail.com>
Message-ID: <0d8508a6-9277-1895-fd96-d84417f69391@gmail.com>
Date: Sun, 25 Nov 2018 09:38:08 +0200
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
	Thunderbird/60.0
MIME-Version: 1.0
In-Reply-To: <20181118122843.10892-18-yuval.shaia@oracle.com>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 7bit
Content-Language: en-US
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 2a00:1450:4864:20::344
Subject: Re: [Qemu-devel] [PATCH v4 17/23] hw/pvrdma: Fill error code in
 command's response
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>



On 11/18/18 2:28 PM, Yuval Shaia wrote:
> Driver checks error code let's set it.
>
> Signed-off-by: Yuval Shaia <yuval.shaia@oracle.com>
> ---
>   hw/rdma/vmw/pvrdma_cmd.c | 67 ++++++++++++++++++++++++++++------------
>   1 file changed, 48 insertions(+), 19 deletions(-)
>
> diff --git a/hw/rdma/vmw/pvrdma_cmd.c b/hw/rdma/vmw/pvrdma_cmd.c
> index 0d3c818c20..a326c5d470 100644
> --- a/hw/rdma/vmw/pvrdma_cmd.c
> +++ b/hw/rdma/vmw/pvrdma_cmd.c
> @@ -131,7 +131,8 @@ static int query_port(PVRDMADev *dev, union pvrdma_cmd_req *req,
>   
>       if (rdma_backend_query_port(&dev->backend_dev,
>                                   (struct ibv_port_attr *)&attrs)) {
> -        return -ENOMEM;
> +        resp->hdr.err = -ENOMEM;
> +        goto out;
>       }
>   
>       memset(resp, 0, sizeof(*resp));
> @@ -150,7 +151,9 @@ static int query_port(PVRDMADev *dev, union pvrdma_cmd_req *req,
>       resp->attrs.active_width = 1;
>       resp->attrs.active_speed = 1;
>   
> -    return 0;
> +out:
> +    pr_dbg("ret=%d\n", resp->hdr.err);
> +    return resp->hdr.err;
>   }
>   
>   static int query_pkey(PVRDMADev *dev, union pvrdma_cmd_req *req,
> @@ -170,7 +173,7 @@ static int query_pkey(PVRDMADev *dev, union pvrdma_cmd_req *req,
>       resp->pkey = PVRDMA_PKEY;
>       pr_dbg("pkey=0x%x\n", resp->pkey);
>   
> -    return 0;
> +    return resp->hdr.err;
>   }
>   
>   static int create_pd(PVRDMADev *dev, union pvrdma_cmd_req *req,
> @@ -200,7 +203,9 @@ static int destroy_pd(PVRDMADev *dev, union pvrdma_cmd_req *req,
>   
>       rdma_rm_dealloc_pd(&dev->rdma_dev_res, cmd->pd_handle);
>   
> -    return 0;
> +    rsp->hdr.err = 0;
> +
> +    return rsp->hdr.err;
>   }
>   
>   static int create_mr(PVRDMADev *dev, union pvrdma_cmd_req *req,
> @@ -251,7 +256,9 @@ static int destroy_mr(PVRDMADev *dev, union pvrdma_cmd_req *req,
>   
>       rdma_rm_dealloc_mr(&dev->rdma_dev_res, cmd->mr_handle);
>   
> -    return 0;
> +    rsp->hdr.err = 0;
> +
> +    return rsp->hdr.err;
>   }
>   
>   static int create_cq_ring(PCIDevice *pci_dev , PvrdmaRing **ring,
> @@ -353,7 +360,8 @@ static int destroy_cq(PVRDMADev *dev, union pvrdma_cmd_req *req,
>       cq = rdma_rm_get_cq(&dev->rdma_dev_res, cmd->cq_handle);
>       if (!cq) {
>           pr_dbg("Invalid CQ handle\n");
> -        return -EINVAL;
> +        rsp->hdr.err = -EINVAL;
> +        goto out;
>       }
>   
>       ring = (PvrdmaRing *)cq->opaque;
> @@ -364,7 +372,11 @@ static int destroy_cq(PVRDMADev *dev, union pvrdma_cmd_req *req,
>   
>       rdma_rm_dealloc_cq(&dev->rdma_dev_res, cmd->cq_handle);
>   
> -    return 0;
> +    rsp->hdr.err = 0;
> +
> +out:
> +    pr_dbg("ret=%d\n", rsp->hdr.err);
> +    return rsp->hdr.err;
>   }
>   
>   static int create_qp_rings(PCIDevice *pci_dev, uint64_t pdir_dma,
> @@ -553,7 +565,8 @@ static int destroy_qp(PVRDMADev *dev, union pvrdma_cmd_req *req,
>       qp = rdma_rm_get_qp(&dev->rdma_dev_res, cmd->qp_handle);
>       if (!qp) {
>           pr_dbg("Invalid QP handle\n");
> -        return -EINVAL;
> +        rsp->hdr.err = -EINVAL;
> +        goto out;
>       }
>   
>       rdma_rm_dealloc_qp(&dev->rdma_dev_res, cmd->qp_handle);
> @@ -567,7 +580,11 @@ static int destroy_qp(PVRDMADev *dev, union pvrdma_cmd_req *req,
>       rdma_pci_dma_unmap(PCI_DEVICE(dev), ring->ring_state, TARGET_PAGE_SIZE);
>       g_free(ring);
>   
> -    return 0;
> +    rsp->hdr.err = 0;
> +
> +out:
> +    pr_dbg("ret=%d\n", rsp->hdr.err);
> +    return rsp->hdr.err;
>   }
>   
>   static int create_bind(PVRDMADev *dev, union pvrdma_cmd_req *req,
> @@ -580,7 +597,8 @@ static int create_bind(PVRDMADev *dev, union pvrdma_cmd_req *req,
>       pr_dbg("index=%d\n", cmd->index);
>   
>       if (cmd->index >= MAX_PORT_GIDS) {
> -        return -EINVAL;
> +        rsp->hdr.err = -EINVAL;
> +        goto out;
>       }
>   
>       pr_dbg("gid[%d]=0x%llx,0x%llx\n", cmd->index,
> @@ -590,10 +608,15 @@ static int create_bind(PVRDMADev *dev, union pvrdma_cmd_req *req,
>       rc = rdma_rm_add_gid(&dev->rdma_dev_res, &dev->backend_dev,
>                            dev->backend_eth_device_name, gid, cmd->index);
>       if (rc < 0) {
> -        return -EINVAL;
> +        rsp->hdr.err = rc;
> +        goto out;
>       }
>   
> -    return 0;
> +    rsp->hdr.err = 0;
> +
> +out:
> +    pr_dbg("ret=%d\n", rsp->hdr.err);
> +    return rsp->hdr.err;
>   }
>   
>   static int destroy_bind(PVRDMADev *dev, union pvrdma_cmd_req *req,
> @@ -606,7 +629,8 @@ static int destroy_bind(PVRDMADev *dev, union pvrdma_cmd_req *req,
>       pr_dbg("index=%d\n", cmd->index);
>   
>       if (cmd->index >= MAX_PORT_GIDS) {
> -        return -EINVAL;
> +        rsp->hdr.err = -EINVAL;
> +        goto out;
>       }
>   
>       rc = rdma_rm_del_gid(&dev->rdma_dev_res, &dev->backend_dev,
> @@ -617,7 +641,11 @@ static int destroy_bind(PVRDMADev *dev, union pvrdma_cmd_req *req,
>           goto out;
>       }
>   
> -    return 0;
> +    rsp->hdr.err = 0;
> +
> +out:
> +    pr_dbg("ret=%d\n", rsp->hdr.err);
> +    return rsp->hdr.err;
>   }
>   
>   static int create_uc(PVRDMADev *dev, union pvrdma_cmd_req *req,
> @@ -634,9 +662,8 @@ static int create_uc(PVRDMADev *dev, union pvrdma_cmd_req *req,
>       resp->hdr.err = rdma_rm_alloc_uc(&dev->rdma_dev_res, cmd->pfn,
>                                        &resp->ctx_handle);
>   
> -    pr_dbg("ret=%d\n", resp->hdr.err);
> -
> -    return 0;
> +    pr_dbg("ret=%d\n", rsp->hdr.err);
> +    return rsp->hdr.err;
>   }
>   
>   static int destroy_uc(PVRDMADev *dev, union pvrdma_cmd_req *req,
> @@ -648,7 +675,9 @@ static int destroy_uc(PVRDMADev *dev, union pvrdma_cmd_req *req,
>   
>       rdma_rm_dealloc_uc(&dev->rdma_dev_res, cmd->ctx_handle);
>   
> -    return 0;
> +    rsp->hdr.err = 0;
> +
> +    return rsp->hdr.err;
>   }
>   struct cmd_handler {
>       uint32_t cmd;
> @@ -696,7 +725,7 @@ int execute_command(PVRDMADev *dev)
>       }
>   
>       err = cmd_handlers[dsr_info->req->hdr.cmd].exec(dev, dsr_info->req,
> -                            dsr_info->rsp);
> +                                                    dsr_info->rsp);
>   out:
>       set_reg_val(dev, PVRDMA_REG_ERR, err);
>       post_interrupt(dev, INTR_VEC_CMD_RING);

As I responded in V3 thread one might forget to set hdr.error to 0
resulting in errors hard to debug.

Please consider clearing the field on init.

Reviewed-by: Marcel Apfelbaum <marcel.apfelbaum@gmail.com>

Thanks,
Marcel

