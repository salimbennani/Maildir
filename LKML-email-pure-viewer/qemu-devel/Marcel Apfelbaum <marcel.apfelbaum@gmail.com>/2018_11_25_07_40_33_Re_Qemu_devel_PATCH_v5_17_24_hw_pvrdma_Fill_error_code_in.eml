Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 25 Nov 2018 22:12:33 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id C0DFF580478
	for <like.xu@linux.intel.com>; Sat, 24 Nov 2018 23:41:27 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga002-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 24 Nov 2018 23:41:27 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3ARH09rR1cs+3fQIJ+smDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?sesXLfTxwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJfUMZfVyJPAY2y?=
 =?us-ascii?q?YIUAAOUDIelWoJTzp0MMoBW8CgSgGe3ixiNWiX/txqA6z+YsHBva0AA8Ed8Dsn?=
 =?us-ascii?q?LZp8j1OqcIVuC1ybHFwzLZYPNMxTjy9ozIeQ09rPGUU7J/b87RxlI1GAPYi1Wb?=
 =?us-ascii?q?tIvoPzaP2eQXr2eU8e5gWfi1hG4/pQF+vDyvydw2hYnUg4IY0V/E9SBjz4Y0Id?=
 =?us-ascii?q?20UlJ0YdmhEJZJsSyRKoh4Qts6Tm12pCo3yacKtYOmcCUJ0pgr2RDSZvydf4SV?=
 =?us-ascii?q?4B/vTPidLS14iX9lYr6yhQy+/VWhx+D9UMS/zUxEoTBfktbWs3AAzxzT5daDSv?=
 =?us-ascii?q?t65kqh3TeP1xvP6uFfO0w0mqzbK4M7zr43jJoTvlzPHi7wmErokK+bblso9vSr?=
 =?us-ascii?q?5uj9f7nqu5yRO5VqhgzwMqkigNGzDOYgPggLRWeb+OC81LP5/U3+RbVHluQ2nb?=
 =?us-ascii?q?fcsJDHPMgUu7C2AxFL3YYn8hqwFDCm0MkenXYbMl1FYxWLj4zoO1HNPv/0F/i+?=
 =?us-ascii?q?g0m0nTdvxvDGOKDhA5rXInjClrfhYahy60pGxAUvytBf4olZCrcGIPL1VU/xss?=
 =?us-ascii?q?HYAgU+MwyuzObrEM992Z8GWWKTHq+ZN7vfsVuJ5uIsPeaAfoAUuCvmJvgh5v7u?=
 =?us-ascii?q?i2I5mFAHcamo25sXdG63HvB8L0qFZnrsh4RJLGERowBrTPD2kEbQFnlXZm2uRO?=
 =?us-ascii?q?Q64Tc0Dp/gCp3MAYWkgbiE1SH8GYVKZ2dAEReVHHL1MomJRfoIOx+UOdJrxzkN?=
 =?us-ascii?q?VLy9TN042BSz8QP31bdja/DZ4zAVro7L0t9z6OvO0xYo+mtvEs6f3mqRGnxyhX?=
 =?us-ascii?q?4CXDQs3apy8nB6n2aez6F8y8dYHN1ar6dYTxkzMdjHz+V7Avj1QAvKetrPQ1Gj?=
 =?us-ascii?q?FJHuDTQwUsgghdEKbldhHtykph/G1iuuRbQSkvjDBpUv9b3V2XfZPctxy3/akq?=
 =?us-ascii?q?Imih1uT8FLPG6rrrRy+wjaG8jClEDd36+wcK4GwQbX+WuDxHbIt0ZdFEZoW6LD?=
 =?us-ascii?q?T3EZZ2PMoNj571+ERLirTfw+Pw5cjMKPNKZOQtvui1pAWbHkItuaK3mxkmKxH1?=
 =?us-ascii?q?CSz7mNao30enkW3A3aEkEPlw1V9nGDcUA1ASe8qGH2FjFiFVvzJUjr9LpQsnS+?=
 =?us-ascii?q?G2o91QqHawVIz7S4/hQcmPnUH/YaxLkJvGEoszt5GFy0wtf+BN+Jpg4nd6JZN4?=
 =?us-ascii?q?BuqGxb3H7U4lQudqerKLpv0xtHK1x6?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AWAADbUPpbhxHrdtBhHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGBMIJig3mIGF+LIIFgCCWJHY4fgXMSAQEYFIhaIjQJDQEDAQEBAQEBAgE?=
 =?us-ascii?q?TAQEBCgsJCBsOIwyCNgUCAxoBBoJcAQIDAQIgBBEIAQUKDB4CAQIBAgYBAQUFC?=
 =?us-ascii?q?w0CAiIEAgIDAR0CEQEFARwGAQwGAgEBAYMcgWkBAxUBAwGaDjyLDXwWBQEXgnc?=
 =?us-ascii?q?FgQGBQ4FoChknDVqBNwIGEnmKfoFXP4E4DIJfglaFLIJXAokfBIY5hHOLBS4HA?=
 =?us-ascii?q?oIcBIQdh0eDJQYYgVmFC4JthzeOTYk8AgQCBAUCBQ8hgSWCDU0jgQGCO4IbDBc?=
 =?us-ascii?q?SgziKVHCBBAM7ijmBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0AWAADbUPpbhxHrdtBhHQEBBQEHBQGBUQgBCwGBMIJig3m?=
 =?us-ascii?q?IGF+LIIFgCCWJHY4fgXMSAQEYFIhaIjQJDQEDAQEBAQEBAgETAQEBCgsJCBsOI?=
 =?us-ascii?q?wyCNgUCAxoBBoJcAQIDAQIgBBEIAQUKDB4CAQIBAgYBAQUFCw0CAiIEAgIDAR0?=
 =?us-ascii?q?CEQEFARwGAQwGAgEBAYMcgWkBAxUBAwGaDjyLDXwWBQEXgncFgQGBQ4FoChknD?=
 =?us-ascii?q?VqBNwIGEnmKfoFXP4E4DIJfglaFLIJXAokfBIY5hHOLBS4HAoIcBIQdh0eDJQY?=
 =?us-ascii?q?YgVmFC4JthzeOTYk8AgQCBAUCBQ8hgSWCDU0jgQGCO4IbDBcSgziKVHCBBAM7i?=
 =?us-ascii?q?jmBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,277,1539673200"; 
   d="scan'208";a="52504420"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 24 Nov 2018 23:41:26 -0800
Received: from localhost ([::1]:58996 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gQp2j-0004UP-TA
	for like.xu@linux.intel.com; Sun, 25 Nov 2018 02:41:25 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:46457)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <marcel.apfelbaum@gmail.com>) id 1gQp2N-0004UH-56
	for qemu-devel@nongnu.org; Sun, 25 Nov 2018 02:41:04 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <marcel.apfelbaum@gmail.com>) id 1gQp2J-0007cD-Lo
	for qemu-devel@nongnu.org; Sun, 25 Nov 2018 02:41:03 -0500
Received: from mail-wm1-x344.google.com ([2a00:1450:4864:20::344]:50463)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <marcel.apfelbaum@gmail.com>)
	id 1gQp2J-0007Zg-6W
	for qemu-devel@nongnu.org; Sun, 25 Nov 2018 02:40:59 -0500
Received: by mail-wm1-x344.google.com with SMTP id 125so15231767wmh.0
	for <qemu-devel@nongnu.org>; Sat, 24 Nov 2018 23:40:57 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
	h=subject:to:references:from:message-id:date:user-agent:mime-version
	:in-reply-to:content-transfer-encoding:content-language;
	bh=J8wm9uNx11cP9M/4u+PTS3+kdM8Jas49RIvlSoG1s+g=;
	b=J5Id4sehHZOGLipJvhyhXhH+yvl/RjfuASZZicgni1m9/KAKvcOoVkkiH0zfnTsr0e
	Fpd8YCC5yPgLZmibqEg6DHlz29TbgsTWZamV0YLkE4ZkynKArFE/kDZO5yTBLgYQMMCe
	0jI++XNw9xEFPMh2bWObXEq3frkDc2RZGe2itDP8/v3QzY1oIoKkn4KZAqAFESWzL43o
	uaNjTBXLXA2e7CvongjLRcNZ6Lf2y1UPMNuR2okgMclMrOHg9GQ2FitWz6MTNTd46Hbi
	EoC9TEsDrriV9Wqvf6F+xnf77am5S0wa/mU8n4QBSKj1jRX/kgSMBdZ4hGIzDHTU4qZS
	3krQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:subject:to:references:from:message-id:date
	:user-agent:mime-version:in-reply-to:content-transfer-encoding
	:content-language;
	bh=J8wm9uNx11cP9M/4u+PTS3+kdM8Jas49RIvlSoG1s+g=;
	b=swV+P2Lx3WT+vVWDxTnoM/k9YF5/agBJWDUu4Ma/0zCr4ELTPgRxUJmwj8uBCOPfKz
	+oYBVoFo695m0HurI5hrBTx/wOPWp91fQQ5eY/OErYh8JzZ8RsjgfVcGHh+liOh/c1Wl
	IKVCe6dKCWk3p8yl1W/Gbj/qEm9365GCACHnbXsr6IGiqsCXTP4JuNRWKKeHGdSm61A3
	+Vwvca/xQ0pEEyJbodrauDkBYrFClJjQxKcAc15my6lBB4ySMzs8DjmquyeZXe97QsnC
	BI8byiuDqufvKRweToy8qetaTrNWPEKjlLnVTJ6il5pX9jArzNxOwqrilxxHueLSTYtV
	fe0A==
X-Gm-Message-State: AGRZ1gK7YYl4Fvp3rxCdIL6NDsV0vrsLRw4M+RJwnIiW+UU7kupoSyDE
	HH6mLN0Hc0obnyLvRdvRYN8=
X-Google-Smtp-Source: AJdET5fao20nR17L1+OnHEW964IgI73JVZnZnwQbYrJMXdBaWXPwE7faIAr/AWOJVXBy9AoivrsetA==
X-Received: by 2002:a1c:4046:: with SMTP id n67mr18692351wma.123.1543131656340;
	Sat, 24 Nov 2018 23:40:56 -0800 (PST)
Received: from localhost.localdomain ([2.55.7.166])
	by smtp.gmail.com with ESMTPSA id
	n82sm8639204wma.42.2018.11.24.23.40.38
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Sat, 24 Nov 2018 23:40:55 -0800 (PST)
To: Yuval Shaia <yuval.shaia@oracle.com>, dmitry.fleytman@gmail.com,
	jasowang@redhat.com, eblake@redhat.com, armbru@redhat.com,
	pbonzini@redhat.com, qemu-devel@nongnu.org, shamir.rabinovitch@oracle.com, 
	cohuck@redhat.com
References: <20181122121402.13764-1-yuval.shaia@oracle.com>
	<20181122121402.13764-18-yuval.shaia@oracle.com>
From: Marcel Apfelbaum <marcel.apfelbaum@gmail.com>
Message-ID: <335892d6-7475-8465-4b20-060bd2960c0f@gmail.com>
Date: Sun, 25 Nov 2018 09:40:33 +0200
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
	Thunderbird/60.0
MIME-Version: 1.0
In-Reply-To: <20181122121402.13764-18-yuval.shaia@oracle.com>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 7bit
Content-Language: en-US
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 2a00:1450:4864:20::344
Subject: Re: [Qemu-devel] [PATCH v5 17/24] hw/pvrdma: Fill error code in
 command's response
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>



On 11/22/18 2:13 PM, Yuval Shaia wrote:
> Driver checks error code let's set it.
>
> Signed-off-by: Yuval Shaia <yuval.shaia@oracle.com>
> ---
>   hw/rdma/vmw/pvrdma_cmd.c | 67 ++++++++++++++++++++++++++++------------
>   1 file changed, 48 insertions(+), 19 deletions(-)
>
> diff --git a/hw/rdma/vmw/pvrdma_cmd.c b/hw/rdma/vmw/pvrdma_cmd.c
> index 0d3c818c20..a326c5d470 100644
> --- a/hw/rdma/vmw/pvrdma_cmd.c
> +++ b/hw/rdma/vmw/pvrdma_cmd.c
> @@ -131,7 +131,8 @@ static int query_port(PVRDMADev *dev, union pvrdma_cmd_req *req,
>   
>       if (rdma_backend_query_port(&dev->backend_dev,
>                                   (struct ibv_port_attr *)&attrs)) {
> -        return -ENOMEM;
> +        resp->hdr.err = -ENOMEM;
> +        goto out;
>       }
>   
>       memset(resp, 0, sizeof(*resp));
> @@ -150,7 +151,9 @@ static int query_port(PVRDMADev *dev, union pvrdma_cmd_req *req,
>       resp->attrs.active_width = 1;
>       resp->attrs.active_speed = 1;
>   
> -    return 0;
> +out:
> +    pr_dbg("ret=%d\n", resp->hdr.err);
> +    return resp->hdr.err;
>   }
>   
>   static int query_pkey(PVRDMADev *dev, union pvrdma_cmd_req *req,
> @@ -170,7 +173,7 @@ static int query_pkey(PVRDMADev *dev, union pvrdma_cmd_req *req,
>       resp->pkey = PVRDMA_PKEY;
>       pr_dbg("pkey=0x%x\n", resp->pkey);
>   
> -    return 0;
> +    return resp->hdr.err;
>   }
>   
>   static int create_pd(PVRDMADev *dev, union pvrdma_cmd_req *req,
> @@ -200,7 +203,9 @@ static int destroy_pd(PVRDMADev *dev, union pvrdma_cmd_req *req,
>   
>       rdma_rm_dealloc_pd(&dev->rdma_dev_res, cmd->pd_handle);
>   
> -    return 0;
> +    rsp->hdr.err = 0;
> +
> +    return rsp->hdr.err;
>   }
>   
>   static int create_mr(PVRDMADev *dev, union pvrdma_cmd_req *req,
> @@ -251,7 +256,9 @@ static int destroy_mr(PVRDMADev *dev, union pvrdma_cmd_req *req,
>   
>       rdma_rm_dealloc_mr(&dev->rdma_dev_res, cmd->mr_handle);
>   
> -    return 0;
> +    rsp->hdr.err = 0;
> +
> +    return rsp->hdr.err;
>   }
>   
>   static int create_cq_ring(PCIDevice *pci_dev , PvrdmaRing **ring,
> @@ -353,7 +360,8 @@ static int destroy_cq(PVRDMADev *dev, union pvrdma_cmd_req *req,
>       cq = rdma_rm_get_cq(&dev->rdma_dev_res, cmd->cq_handle);
>       if (!cq) {
>           pr_dbg("Invalid CQ handle\n");
> -        return -EINVAL;
> +        rsp->hdr.err = -EINVAL;
> +        goto out;
>       }
>   
>       ring = (PvrdmaRing *)cq->opaque;
> @@ -364,7 +372,11 @@ static int destroy_cq(PVRDMADev *dev, union pvrdma_cmd_req *req,
>   
>       rdma_rm_dealloc_cq(&dev->rdma_dev_res, cmd->cq_handle);
>   
> -    return 0;
> +    rsp->hdr.err = 0;
> +
> +out:
> +    pr_dbg("ret=%d\n", rsp->hdr.err);
> +    return rsp->hdr.err;
>   }
>   
>   static int create_qp_rings(PCIDevice *pci_dev, uint64_t pdir_dma,
> @@ -553,7 +565,8 @@ static int destroy_qp(PVRDMADev *dev, union pvrdma_cmd_req *req,
>       qp = rdma_rm_get_qp(&dev->rdma_dev_res, cmd->qp_handle);
>       if (!qp) {
>           pr_dbg("Invalid QP handle\n");
> -        return -EINVAL;
> +        rsp->hdr.err = -EINVAL;
> +        goto out;
>       }
>   
>       rdma_rm_dealloc_qp(&dev->rdma_dev_res, cmd->qp_handle);
> @@ -567,7 +580,11 @@ static int destroy_qp(PVRDMADev *dev, union pvrdma_cmd_req *req,
>       rdma_pci_dma_unmap(PCI_DEVICE(dev), ring->ring_state, TARGET_PAGE_SIZE);
>       g_free(ring);
>   
> -    return 0;
> +    rsp->hdr.err = 0;
> +
> +out:
> +    pr_dbg("ret=%d\n", rsp->hdr.err);
> +    return rsp->hdr.err;
>   }
>   
>   static int create_bind(PVRDMADev *dev, union pvrdma_cmd_req *req,
> @@ -580,7 +597,8 @@ static int create_bind(PVRDMADev *dev, union pvrdma_cmd_req *req,
>       pr_dbg("index=%d\n", cmd->index);
>   
>       if (cmd->index >= MAX_PORT_GIDS) {
> -        return -EINVAL;
> +        rsp->hdr.err = -EINVAL;
> +        goto out;
>       }
>   
>       pr_dbg("gid[%d]=0x%llx,0x%llx\n", cmd->index,
> @@ -590,10 +608,15 @@ static int create_bind(PVRDMADev *dev, union pvrdma_cmd_req *req,
>       rc = rdma_rm_add_gid(&dev->rdma_dev_res, &dev->backend_dev,
>                            dev->backend_eth_device_name, gid, cmd->index);
>       if (rc < 0) {
> -        return -EINVAL;
> +        rsp->hdr.err = rc;
> +        goto out;
>       }
>   
> -    return 0;
> +    rsp->hdr.err = 0;
> +
> +out:
> +    pr_dbg("ret=%d\n", rsp->hdr.err);
> +    return rsp->hdr.err;
>   }
>   
>   static int destroy_bind(PVRDMADev *dev, union pvrdma_cmd_req *req,
> @@ -606,7 +629,8 @@ static int destroy_bind(PVRDMADev *dev, union pvrdma_cmd_req *req,
>       pr_dbg("index=%d\n", cmd->index);
>   
>       if (cmd->index >= MAX_PORT_GIDS) {
> -        return -EINVAL;
> +        rsp->hdr.err = -EINVAL;
> +        goto out;
>       }
>   
>       rc = rdma_rm_del_gid(&dev->rdma_dev_res, &dev->backend_dev,
> @@ -617,7 +641,11 @@ static int destroy_bind(PVRDMADev *dev, union pvrdma_cmd_req *req,
>           goto out;
>       }
>   
> -    return 0;
> +    rsp->hdr.err = 0;
> +
> +out:
> +    pr_dbg("ret=%d\n", rsp->hdr.err);
> +    return rsp->hdr.err;
>   }
>   
>   static int create_uc(PVRDMADev *dev, union pvrdma_cmd_req *req,
> @@ -634,9 +662,8 @@ static int create_uc(PVRDMADev *dev, union pvrdma_cmd_req *req,
>       resp->hdr.err = rdma_rm_alloc_uc(&dev->rdma_dev_res, cmd->pfn,
>                                        &resp->ctx_handle);
>   
> -    pr_dbg("ret=%d\n", resp->hdr.err);
> -
> -    return 0;
> +    pr_dbg("ret=%d\n", rsp->hdr.err);
> +    return rsp->hdr.err;
>   }
>   
>   static int destroy_uc(PVRDMADev *dev, union pvrdma_cmd_req *req,
> @@ -648,7 +675,9 @@ static int destroy_uc(PVRDMADev *dev, union pvrdma_cmd_req *req,
>   
>       rdma_rm_dealloc_uc(&dev->rdma_dev_res, cmd->ctx_handle);
>   
> -    return 0;
> +    rsp->hdr.err = 0;
> +
> +    return rsp->hdr.err;
>   }
>   struct cmd_handler {
>       uint32_t cmd;
> @@ -696,7 +725,7 @@ int execute_command(PVRDMADev *dev)
>       }
>   
>       err = cmd_handlers[dsr_info->req->hdr.cmd].exec(dev, dsr_info->req,
> -                            dsr_info->rsp);
> +                                                    dsr_info->rsp);
>   out:
>       set_reg_val(dev, PVRDMA_REG_ERR, err);
>       post_interrupt(dev, INTR_VEC_CMD_RING);


As I responded in V4 thread :) one might forget to set hdr.error to 0
resulting in errors hard to debug.

Please consider clearing the field on init.

Reviewed-by: Marcel Apfelbaum <marcel.apfelbaum@gmail.com>

Thanks,
Marcel

