Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 22:54:15 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 8BEDB580261
	for <like.xu@linux.intel.com>; Wed, 19 Dec 2018 06:50:51 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 19 Dec 2018 06:50:51 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AUdcgNh8lt0EgeP9uRHKM819IXTAuvvDOBiVQ1KB+?=
 =?us-ascii?q?0+gQIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CRWRPQMhfWS9GDI2h?=
 =?us-ascii?q?d4sCDegPMOlFo4Tzu1cBswC+CBKwCO/z0DJEmmX70bEm3+knDArI3BYgH9ULsH?=
 =?us-ascii?q?nMotT6KqYSUeK0zKbSyzXDYOla2Dfn54jOfRAsuvCMXbRsccXPzUkjDR/KjlKV?=
 =?us-ascii?q?qYHjIjib2OMNs22B4OphU+Kik2EnqwdsojS1wccskIbJi4QIwV7H7SV02Jg5Kc?=
 =?us-ascii?q?G7RUJhfNKoDZhduzuEO4Z4Qs4uWXxktSQixrEbvZO3YjIGxZQnyhLFa/GLbZKE?=
 =?us-ascii?q?7x3tWeuXPDx2nmhqeKiliBa36UWgyvPzVs2z0FtSqipFk8LMtmwW1xDJ5ciHTO?=
 =?us-ascii?q?Z98l2m2TaV2ADf8uBEIUYqmqrHM5Mt3KI8m5kJvUjeAyP7m1/6gLGYe0gk4OSk?=
 =?us-ascii?q?9ubqbq3jppCGNo90jg/+Mr4pmsy6Gek4KxYBX22G+eilybLs41P5T6tOjvEvia?=
 =?us-ascii?q?bZt43aJcIHqaGnGA9Z1YIj6xe8Dzi4ytgZkmQHIUpBeBKGiYjpJl7PLOr5Dfe5?=
 =?us-ascii?q?n1SjjjNry+raMb3mB5XANX7DkLDnfbZy7U5c1RA/zddF55JbEr0BOu78WlfttN?=
 =?us-ascii?q?zECR80Kwi0w+fkCNpjzI8fVn+PD7SdMKPTt1+I++0uL/ONZI8TpDbyNfwl6+Ty?=
 =?us-ascii?q?gn8+nF9ONZSvxoYdPXCkAux9cQLeZXv3nsxHF2AMsQwjCuvwhxqHWD9XYn+0GK?=
 =?us-ascii?q?Uk+jA8DpnhFIrGW8WhjaKM2HSGGIZLbDVDA1GIDXC6boiBRrIAZTyfJop7nyUZ?=
 =?us-ascii?q?WKO9Y4km0x6oqUn90bUwNffe+CATqcf+0sNo7fbYjxA4+G9ICJGE3mSQCm15gG?=
 =?us-ascii?q?4Mbzkx2q95vAp60FjHmaR3gvhSGMZPz+lEXgczKdjXyOk+Q8nvWwTdc9OAYEyr?=
 =?us-ascii?q?TtWvHXc6Sdd1i8cDf0tnC/24gxzD1jbsCLgQ0/SUCZ1y7eTD1n7+D8d713vCkq?=
 =?us-ascii?q?ImigoIWMxKYHKrh6x+/g7cQZ/AlUqxlqC2eKBa1ynIpzTL9naHoEwNCF04aq7C?=
 =?us-ascii?q?R31KIxKO9dk=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AtAAAfWhpchxHrdtBkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUwUBAQsBgTCBOXA5jHWLHYxgjQqBcxUYCwmHLSI2Bw0BAwEBAQEBAQIBEwE?=
 =?us-ascii?q?BAQoLCQgbDiMMgjYFAgMaAQaCXwQCQwopAwMBAgYCHykIAwEkNhIFgx0BggEBB?=
 =?us-ascii?q?AqpPhoChBEBAwIMQoQBgScFgn6FAIF9gkSCFoNuB4NMAQIChz0CkFWQXwcChlB?=
 =?us-ascii?q?AhjGEFQwYihwDhzqJSIR5i0GBTQSCA3CDPIInFxKITIVMNDEBgQaLaYF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0AtAAAfWhpchxHrdtBkHAEBAQQBAQcEAQGBUwUBAQsBgTC?=
 =?us-ascii?q?BOXA5jHWLHYxgjQqBcxUYCwmHLSI2Bw0BAwEBAQEBAQIBEwEBAQoLCQgbDiMMg?=
 =?us-ascii?q?jYFAgMaAQaCXwQCQwopAwMBAgYCHykIAwEkNhIFgx0BggEBBAqpPhoChBEBAwI?=
 =?us-ascii?q?MQoQBgScFgn6FAIF9gkSCFoNuB4NMAQIChz0CkFWQXwcChlBAhjGEFQwYihwDh?=
 =?us-ascii?q?zqJSIR5i0GBTQSCA3CDPIInFxKITIVMNDEBgQaLaYF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,373,1539673200"; 
   d="scan'208";a="57006700"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 19 Dec 2018 06:50:50 -0800
Received: from localhost ([::1]:60568 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gZdBS-0002tY-1L
	for like.xu@linux.intel.com; Wed, 19 Dec 2018 09:50:50 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:55532)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <weijiang.yang@intel.com>) id 1gZTm5-0000Wy-OW
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 23:48:06 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <weijiang.yang@intel.com>) id 1gZTl7-00019V-UX
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 23:47:06 -0500
Received: from mga05.intel.com ([192.55.52.43]:64703)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <weijiang.yang@intel.com>)
	id 1gZTl7-000165-K9
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 23:47:01 -0500
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from fmsmga007.fm.intel.com ([10.253.24.52])
	by fmsmga105.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
	18 Dec 2018 20:46:53 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,371,1539673200"; d="scan'208";a="108479644"
Received: from unknown (HELO localhost.localdomain.sh.intel.com)
	([10.239.159.43])
	by fmsmga007.fm.intel.com with ESMTP; 18 Dec 2018 20:46:51 -0800
From: weijiang.yang@intel.com
To: qemu-devel@nongnu.org, dgilbert@redhat.com, quintela@redhat.com,
	peterx@redhat.com, wei.w.wang@intel.com
Date: Wed, 19 Dec 2018 12:50:21 +0800
Message-Id: <20181219045021.18479-1-weijiang.yang@intel.com>
X-Mailer: git-send-email 2.17.1
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 192.55.52.43
X-Mailman-Approved-At: Wed, 19 Dec 2018 09:48:59 -0500
Subject: [Qemu-devel] [PATCH v1] This patch enhances bitmap op function
 input check and ambiguous return.
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Yang Weijiang <weijiang.yang@intel.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

From: Yang Weijiang <weijiang.yang@intel.com>

    BITMAP_LAST_WORD_MASK(nbits) returns 0xffffffff when "nbits=0",
    this leads to error returns in some functions. This patch also
    checks bits input in some slow bitmap op functions, if bits = 0,
    do early return to keep the dst data unchanged.

    this patch is a follow-up patch of :
    https://lists.gnu.org/archive/html/qemu-devel/2018-12/msg03510.html

Signed-off-by: Yang Weijiang <weijiang.yang@intel.com>
---
 include/qemu/bitmap.h | 24 ++++++++++++++++++++++++
 util/bitmap.c         | 24 ++++++++++++++++++++++++
 2 files changed, 48 insertions(+)

diff --git a/include/qemu/bitmap.h b/include/qemu/bitmap.h
index 509eeddece..b6ce0ed551 100644
--- a/include/qemu/bitmap.h
+++ b/include/qemu/bitmap.h
@@ -113,6 +113,10 @@ static inline void bitmap_zero(unsigned long *dst, long nbits)
 
 static inline void bitmap_fill(unsigned long *dst, long nbits)
 {
+    if (unlikely(!nbits)) {
+        return;
+    }
+
     size_t nlongs = BITS_TO_LONGS(nbits);
     if (!small_nbits(nbits)) {
         long len = (nlongs - 1) * sizeof(unsigned long);
@@ -174,6 +178,10 @@ static inline void bitmap_complement(unsigned long *dst,
                                      const unsigned long *src,
                                      long nbits)
 {
+    if (unlikely(!nbits)) {
+        return;
+    }
+
     if (small_nbits(nbits)) {
         *dst = ~(*src) & BITMAP_LAST_WORD_MASK(nbits);
     } else {
@@ -184,6 +192,10 @@ static inline void bitmap_complement(unsigned long *dst,
 static inline int bitmap_equal(const unsigned long *src1,
                                const unsigned long *src2, long nbits)
 {
+    if (unlikely(!nbits)) {
+        return 0;
+    }
+
     if (small_nbits(nbits)) {
         return ! ((*src1 ^ *src2) & BITMAP_LAST_WORD_MASK(nbits));
     } else {
@@ -193,6 +205,10 @@ static inline int bitmap_equal(const unsigned long *src1,
 
 static inline int bitmap_empty(const unsigned long *src, long nbits)
 {
+    if (unlikely(!nbits)) {
+        return 0;
+    }
+
     if (small_nbits(nbits)) {
         return ! (*src & BITMAP_LAST_WORD_MASK(nbits));
     } else {
@@ -202,6 +218,10 @@ static inline int bitmap_empty(const unsigned long *src, long nbits)
 
 static inline int bitmap_full(const unsigned long *src, long nbits)
 {
+    if (unlikely(!nbits)) {
+        return 0;
+    }
+
     if (small_nbits(nbits)) {
         return ! (~(*src) & BITMAP_LAST_WORD_MASK(nbits));
     } else {
@@ -212,6 +232,10 @@ static inline int bitmap_full(const unsigned long *src, long nbits)
 static inline int bitmap_intersects(const unsigned long *src1,
                                     const unsigned long *src2, long nbits)
 {
+    if (unlikely(!nbits)) {
+        return 0;
+    }
+
     if (small_nbits(nbits)) {
         return ((*src1 & *src2) & BITMAP_LAST_WORD_MASK(nbits)) != 0;
     } else {
diff --git a/util/bitmap.c b/util/bitmap.c
index cb618c65a5..64bb16a46a 100644
--- a/util/bitmap.c
+++ b/util/bitmap.c
@@ -42,6 +42,10 @@ int slow_bitmap_empty(const unsigned long *bitmap, long bits)
 {
     long k, lim = bits/BITS_PER_LONG;
 
+    if (unlikely(!bits)) {
+        return 0;
+    }
+
     for (k = 0; k < lim; ++k) {
         if (bitmap[k]) {
             return 0;
@@ -60,6 +64,10 @@ int slow_bitmap_full(const unsigned long *bitmap, long bits)
 {
     long k, lim = bits/BITS_PER_LONG;
 
+    if (unlikely(!bits)) {
+        return 0;
+    }
+
     for (k = 0; k < lim; ++k) {
         if (~bitmap[k]) {
             return 0;
@@ -80,6 +88,10 @@ int slow_bitmap_equal(const unsigned long *bitmap1,
 {
     long k, lim = bits/BITS_PER_LONG;
 
+    if (unlikely(!bits)) {
+        return 0;
+    }
+
     for (k = 0; k < lim; ++k) {
         if (bitmap1[k] != bitmap2[k]) {
             return 0;
@@ -116,6 +128,10 @@ int slow_bitmap_and(unsigned long *dst, const unsigned long *bitmap1,
     long nr = BITS_TO_LONGS(bits);
     unsigned long result = 0;
 
+    if (unlikely(!bits)) {
+        return 0;
+    }
+
     for (k = 0; k < nr; k++) {
         result |= (dst[k] = bitmap1[k] & bitmap2[k]);
     }
@@ -342,6 +358,10 @@ int slow_bitmap_intersects(const unsigned long *bitmap1,
 {
     long k, lim = bits/BITS_PER_LONG;
 
+    if (unlikely(!bits)) {
+        return 0;
+    }
+
     for (k = 0; k < lim; ++k) {
         if (bitmap1[k] & bitmap2[k]) {
             return 1;
@@ -360,6 +380,10 @@ long slow_bitmap_count_one(const unsigned long *bitmap, long nbits)
 {
     long k, lim = nbits / BITS_PER_LONG, result = 0;
 
+    if (unlikely(!nbits)) {
+        return 0;
+    }
+
     for (k = 0; k < lim; k++) {
         result += ctpopl(bitmap[k]);
     }
-- 
2.17.1


