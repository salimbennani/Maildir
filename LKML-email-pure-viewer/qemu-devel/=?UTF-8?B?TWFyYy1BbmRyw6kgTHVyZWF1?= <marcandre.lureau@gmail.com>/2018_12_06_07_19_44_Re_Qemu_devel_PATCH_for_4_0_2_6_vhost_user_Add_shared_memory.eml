Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:41:57 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga007.fm.intel.com (fmsmga007.fm.intel.com [10.253.24.52])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 555E65804C1
	for <like.xu@linux.intel.com>; Wed,  5 Dec 2018 23:20:16 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by fmsmga007-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 05 Dec 2018 23:20:15 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AulqjcBZ+ANErytzY9sOcvRf/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZrsu9bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjmk8qxlSgLniD?=
 =?us-ascii?q?0fOjE2/mHYiMx+gqxYrhy/uxNxzJPaYJmXOfR8ca7RYN0XSXZfUcZKTCFBHpq8?=
 =?us-ascii?q?YpETA+YdIepVrY/wrEYOoxukAgmsAfvixDhSiX/swaI2yvgsEQfb0ww6BdUFrX?=
 =?us-ascii?q?LarMjvNKgMS++10bTDwDLGb/xMwzfy9JLHchY8rvGWQ718a87RyVQ1FwzblFqQ?=
 =?us-ascii?q?tJfoPzyQ1usXsmib6/BsWv6oi24isgx8pCWkyMQ0ioTRmI4Z1lPJ+T9kzIooJt?=
 =?us-ascii?q?C0UlB3bNCkHZdKqi2XNZN6Tt04TG10pCo3z6AKtJG7cSQWzZkqyB3SZv2IfoWN?=
 =?us-ascii?q?/B7vSOOcLDJ3iX9qd7+ygQu5/1K6xe3mTMa01U5HripbndnIsXAAzxjT6smcSv?=
 =?us-ascii?q?th5UetwzmP1wbO6u1eJkA0j6XbJ4Ygwr42iJUTrVzOEjHqlEj1lqOaa1go9+uy?=
 =?us-ascii?q?5+j5bLjrpoWQO5J2hw3mN6QhgM2/AeA2MggUWGib/Pyx1KT98k38XbVGl+A5nb?=
 =?us-ascii?q?fHsJ/EIcQXv7W2AwhI0oYl9xmwESym3NMcnXkGL1JKZgiLjof0O1zWJPD4DPG/?=
 =?us-ascii?q?g0mjkTtxxvDGOKHhDYvJLnTZjLjherN95lVayAo0y9Bf6JRUCqwbLPL0QE/xu8?=
 =?us-ascii?q?TUDgUlPAys3+bnFNJ925saWWKOAa+WLrnesFCV5u80J+mMZYkVuCvyKvQ/5v7u?=
 =?us-ascii?q?i2M5lkEZfaWzwZQXb3W4TbxbJV6Eay/snssZCjVN+Q4/V/DxzluFVzFVejC1Ra?=
 =?us-ascii?q?174zg6DIevC8DEXpysh7qamz62G4ATam1YB1TfLHHzao/RXv4NbD6VcNZslyFB?=
 =?us-ascii?q?WbW/Rotkzxy3qQLh15JhKezb/DBesojsg8No7e/eng1n6DpvEs6G2HuMRWwnom?=
 =?us-ascii?q?Rddjgw06J+6Xx8xx/X3Kx/g/1dGMd76PZAUwN8PpnZmb9UEdf3DyfIZNzMYVCq?=
 =?us-ascii?q?WFTuJSwrQ9ssi4sLalx2EtOulB2F2zewDrYIv7OODZ0wtKnb2i6idI5G13/a2f?=
 =?us-ascii?q?x53BEdScxVODj+iw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A6AAA7zQhchxHrdtBkHgEGBwaBUQkLA?=
 =?us-ascii?q?YEwgk8Tg3qIeIsugg2JI2WNRYFzFBgUhECDFSI0CQ0BAwEBAQEBAQIBEwEBAQo?=
 =?us-ascii?q?LCQgbDiMMgjYFAgMYCYJbAQEBAQIBAQIgBBkBBQoMHQECAQEBAQIGAQEFBQsDB?=
 =?us-ascii?q?wMCAiIEAgIDAR0BAREBBQEcBhMFgxyBaQEDDQgBBJoNPIsNfBYFAReCdwWEQAo?=
 =?us-ascii?q?ZJw1dMYEGAgYSeYsTghaBEYF9gRWCV4IqgwSCVwKJKocFU4QCiycuBwKOFIMuG?=
 =?us-ascii?q?IFbhRSKQYoOhHSJcQ8hgSWCDTMaI4EBgjuCGwwXEoM4ilg8MYEHiGWBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0A6AAA7zQhchxHrdtBkHgEGBwaBUQkLAYEwgk8Tg3qIeIs?=
 =?us-ascii?q?ugg2JI2WNRYFzFBgUhECDFSI0CQ0BAwEBAQEBAQIBEwEBAQoLCQgbDiMMgjYFA?=
 =?us-ascii?q?gMYCYJbAQEBAQIBAQIgBBkBBQoMHQECAQEBAQIGAQEFBQsDBwMCAiIEAgIDAR0?=
 =?us-ascii?q?BAREBBQEcBhMFgxyBaQEDDQgBBJoNPIsNfBYFAReCdwWEQAoZJw1dMYEGAgYSe?=
 =?us-ascii?q?YsTghaBEYF9gRWCV4IqgwSCVwKJKocFU4QCiycuBwKOFIMuGIFbhRSKQYoOhHS?=
 =?us-ascii?q?JcQ8hgSWCDTMaI4EBgjuCGwwXEoM4ilg8MYEHiGWBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,321,1539673200"; 
   d="scan'208";a="54766124"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 05 Dec 2018 23:20:15 -0800
Received: from localhost ([::1]:39281 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gUnxG-00040B-It
	for like.xu@linux.intel.com; Thu, 06 Dec 2018 02:20:14 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:50967)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <marcandre.lureau@gmail.com>) id 1gUnx6-0003zz-Rn
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 02:20:06 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <marcandre.lureau@gmail.com>) id 1gUnx4-0007yV-NP
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 02:20:04 -0500
Received: from mail-wr1-x444.google.com ([2a00:1450:4864:20::444]:34565)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <marcandre.lureau@gmail.com>)
	id 1gUnx2-0007rd-IE
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 02:20:02 -0500
Received: by mail-wr1-x444.google.com with SMTP id j2so22158883wrw.1
	for <qemu-devel@nongnu.org>; Wed, 05 Dec 2018 23:19:57 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
	h=mime-version:references:in-reply-to:from:date:message-id:subject:to
	:cc:content-transfer-encoding;
	bh=/OSsdG5bCqMQYeiJWyycv5NlRnE+sueCr/hA/x1mOSU=;
	b=SwEfhPeyyLr2pRivarRuZ2zCrK7BvyPonHvRAMxf2Qrzs0r77p2dbkwOZatcba083Z
	oXamhqcwUAr5Xd/2jksGVp+bil11BG/0nMZGqX0Lf4ft3Az4A5oEHHHdZw7SyU+nUyh+
	1et38JpK2cfbxjQIgApT0S/BjB04430KiHo+FxFZFZl7Nd25/iXZk1ahCgw/EtOth80P
	ETz+tLMuJHR0EtpFJudJlEw5wsbBOx/l+yJimAogbsBnDJIb1Pkr9c4F3yCz/nppun/z
	4TH/X0z39MD00CbTthujSqaiobe+g8hvkpxUIGzPiytopRVpel3iNJ91LJC1GlScmQO3
	ZOYw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:mime-version:references:in-reply-to:from:date
	:message-id:subject:to:cc:content-transfer-encoding;
	bh=/OSsdG5bCqMQYeiJWyycv5NlRnE+sueCr/hA/x1mOSU=;
	b=GReRrKeaqS4FAAYRubiqb8WVzGtZDEIHYEk1QEqsG+I+7sNdpX+bL221AZBr++j5kW
	5EGFphUReHiTfnjNB5f6HODhmDAeCJCQISMwqM3jAgB7R5hANiBXWNHs/ohA2S/sm/KI
	vSQRm2By20Lhkj62GOKZhOunqfRe7pJDSUEybT/nA6u2MI06JGTRD0Oz5aiLztCJMKFy
	Zr9BuldtdYiPRRVCFBtj8yqKuu05XqisrAbrGzE3U6JBeRg3ofWfDA+hKt4nnzkVpdjS
	TSajHqmfmuzitwR/Wtr5X/iMAG2LwfsHjV4JKLZhYNOfiaXzJIfBmP78qVLydTJleJ6X
	V4IA==
X-Gm-Message-State: AA+aEWYkEKx7OzC1Ni3hK7QaQkHaIz8I5524gNCRbPrYrZri98X0t2hY
	6cvYd78VCJfOfXwvhcqZkccejRu8K3TiN10QAtw=
X-Google-Smtp-Source: AFSGD/X2KmXjzgw1EzW2aNmvbtrKoD4sS0de2LDe/G3ZSiX3g1frS9oIEuL8Ko1ct7tiZn0WJk5aWE/dtDdEMyQTXME=
X-Received: by 2002:adf:80cf:: with SMTP id 73mr24104830wrl.57.1544080796830; 
	Wed, 05 Dec 2018 23:19:56 -0800 (PST)
MIME-Version: 1.0
References: <20181206063552.6701-1-xieyongji@baidu.com>
	<20181206063552.6701-3-xieyongji@baidu.com>
In-Reply-To: <20181206063552.6701-3-xieyongji@baidu.com>
From: =?UTF-8?B?TWFyYy1BbmRyw6kgTHVyZWF1?= <marcandre.lureau@gmail.com>
Date: Thu, 6 Dec 2018 11:19:44 +0400
Message-ID: <CAJ+F1CJtJi8GKOSFPr0M3j3ZCx2n3xR=Lmg=PAT+jJaDJkM_aw@mail.gmail.com>
To: Yongji Xie <elohimes@gmail.com>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 2a00:1450:4864:20::444
Subject: Re: [Qemu-devel] [PATCH for-4.0 2/6] vhost-user: Add shared memory
 to record inflight I/O
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: zhangyu31@baidu.com, "Michael S. Tsirkin" <mst@redhat.com>,
	xieyongji@baidu.com, lilin24@baidu.com,
	QEMU <qemu-devel@nongnu.org>, chaiwen@baidu.com, nixun@baidu.com
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Hi
On Thu, Dec 6, 2018 at 10:40 AM <elohimes@gmail.com> wrote:
>
> From: Xie Yongji <xieyongji@baidu.com>
>
> This introduces a new message VHOST_USER_SET_VRING_INFLIGHT
> to support offering shared memory to backend to record
> its inflight I/O.
>
> With this new message, the backend is able to restart without
> missing I/O which would cause I/O hung for block device.
>
> Signed-off-by: Xie Yongji <xieyongji@baidu.com>
> Signed-off-by: Chai Wen <chaiwen@baidu.com>
> Signed-off-by: Zhang Yu <zhangyu31@baidu.com>
> ---
>  hw/virtio/vhost-user.c            | 69 +++++++++++++++++++++++++++++++
>  hw/virtio/vhost.c                 |  8 ++++
>  include/hw/virtio/vhost-backend.h |  4 ++
>  include/hw/virtio/vhost-user.h    |  8 ++++

Please update docs/interop/vhost-user.txt to describe the new message

>  4 files changed, 89 insertions(+)
>
> diff --git a/hw/virtio/vhost-user.c b/hw/virtio/vhost-user.c
> index e09bed0e4a..4c0e64891d 100644
> --- a/hw/virtio/vhost-user.c
> +++ b/hw/virtio/vhost-user.c
> @@ -19,6 +19,7 @@
>  #include "sysemu/kvm.h"
>  #include "qemu/error-report.h"
>  #include "qemu/sockets.h"
> +#include "qemu/memfd.h"
>  #include "sysemu/cryptodev.h"
>  #include "migration/migration.h"
>  #include "migration/postcopy-ram.h"
> @@ -52,6 +53,7 @@ enum VhostUserProtocolFeature {
>      VHOST_USER_PROTOCOL_F_CONFIG =3D 9,
>      VHOST_USER_PROTOCOL_F_SLAVE_SEND_FD =3D 10,
>      VHOST_USER_PROTOCOL_F_HOST_NOTIFIER =3D 11,
> +    VHOST_USER_PROTOCOL_F_INFLIGHT_SHMFD =3D 12,
>      VHOST_USER_PROTOCOL_F_MAX
>  };
>
> @@ -89,6 +91,7 @@ typedef enum VhostUserRequest {
>      VHOST_USER_POSTCOPY_ADVISE  =3D 28,
>      VHOST_USER_POSTCOPY_LISTEN  =3D 29,
>      VHOST_USER_POSTCOPY_END     =3D 30,
> +    VHOST_USER_SET_VRING_INFLIGHT =3D 31,

why VRING? it seems to be free/arbitrary memory area.

Oh, I understand later that this has an explicit layout and behaviour
later described in "libvhost-user: Support recording inflight I/O in
shared memory"

Please update the vhost-user spec first to describe expected usage/behaviou=
r.


>      VHOST_USER_MAX
>  } VhostUserRequest;
>
> @@ -147,6 +150,11 @@ typedef struct VhostUserVringArea {
>      uint64_t offset;
>  } VhostUserVringArea;
>
> +typedef struct VhostUserVringInflight {
> +    uint32_t size;
> +    uint32_t idx;
> +} VhostUserVringInflight;
> +
>  typedef struct {
>      VhostUserRequest request;
>
> @@ -169,6 +177,7 @@ typedef union {
>          VhostUserConfig config;
>          VhostUserCryptoSession session;
>          VhostUserVringArea area;
> +        VhostUserVringInflight inflight;
>  } VhostUserPayload;
>
>  typedef struct VhostUserMsg {
> @@ -1739,6 +1748,58 @@ static bool vhost_user_mem_section_filter(struct v=
host_dev *dev,
>      return result;
>  }
>
> +static int vhost_user_set_vring_inflight(struct vhost_dev *dev, int idx)
> +{
> +    struct vhost_user *u =3D dev->opaque;
> +
> +    if (!virtio_has_feature(dev->protocol_features,
> +                            VHOST_USER_PROTOCOL_F_INFLIGHT_SHMFD)) {
> +        return 0;
> +    }
> +
> +    if (!u->user->inflight[idx].addr) {
> +        Error *err =3D NULL;
> +
> +        u->user->inflight[idx].size =3D qemu_real_host_page_size;
> +        u->user->inflight[idx].addr =3D qemu_memfd_alloc("vhost-inflight=
",
> +                                      u->user->inflight[idx].size,
> +                                      F_SEAL_GROW | F_SEAL_SHRINK | F_SE=
AL_SEAL,
> +                                      &u->user->inflight[idx].fd, &err);
> +        if (err) {
> +            error_report_err(err);
> +            u->user->inflight[idx].addr =3D NULL;
> +            return -1;
> +        }
> +    }
> +
> +    VhostUserMsg msg =3D {
> +        .hdr.request =3D VHOST_USER_SET_VRING_INFLIGHT,
> +        .hdr.flags =3D VHOST_USER_VERSION,
> +        .payload.inflight.size =3D u->user->inflight[idx].size,
> +        .payload.inflight.idx =3D idx,
> +        .hdr.size =3D sizeof(msg.payload.inflight),
> +    };
> +
> +    if (vhost_user_write(dev, &msg, &u->user->inflight[idx].fd, 1) < 0) =
{
> +        return -1;
> +    }
> +
> +    return 0;
> +}
> +
> +void vhost_user_inflight_reset(VhostUserState *user)
> +{
> +    int i;
> +
> +    for (i =3D 0; i < VIRTIO_QUEUE_MAX; i++) {
> +        if (!user->inflight[i].addr) {
> +            continue;
> +        }
> +
> +        memset(user->inflight[i].addr, 0, user->inflight[i].size);
> +    }
> +}
> +
>  VhostUserState *vhost_user_init(void)
>  {
>      VhostUserState *user =3D g_new0(struct VhostUserState, 1);
> @@ -1756,6 +1817,13 @@ void vhost_user_cleanup(VhostUserState *user)
>              munmap(user->notifier[i].addr, qemu_real_host_page_size);
>              user->notifier[i].addr =3D NULL;
>          }
> +
> +        if (user->inflight[i].addr) {
> +            munmap(user->inflight[i].addr, user->inflight[i].size);
> +            user->inflight[i].addr =3D NULL;
> +            close(user->inflight[i].fd);
> +            user->inflight[i].fd =3D -1;
> +        }
>      }
>  }
>
> @@ -1790,4 +1858,5 @@ const VhostOps user_ops =3D {
>          .vhost_crypto_create_session =3D vhost_user_crypto_create_sessio=
n,
>          .vhost_crypto_close_session =3D vhost_user_crypto_close_session,
>          .vhost_backend_mem_section_filter =3D vhost_user_mem_section_fil=
ter,
> +        .vhost_set_vring_inflight =3D vhost_user_set_vring_inflight,
>  };
> diff --git a/hw/virtio/vhost.c b/hw/virtio/vhost.c
> index 569c4053ea..2ca7b4e841 100644
> --- a/hw/virtio/vhost.c
> +++ b/hw/virtio/vhost.c
> @@ -973,6 +973,14 @@ static int vhost_virtqueue_start(struct vhost_dev *d=
ev,
>          return -errno;
>      }
>
> +    if (dev->vhost_ops->vhost_set_vring_inflight) {
> +        r =3D dev->vhost_ops->vhost_set_vring_inflight(dev, vhost_vq_ind=
ex);
> +        if (r) {
> +            VHOST_OPS_DEBUG("vhost_set_vring_inflight failed");
> +            return -errno;
> +        }
> +    }
> +
>      state.num =3D virtio_queue_get_last_avail_idx(vdev, idx);
>      r =3D dev->vhost_ops->vhost_set_vring_base(dev, &state);
>      if (r) {
> diff --git a/include/hw/virtio/vhost-backend.h b/include/hw/virtio/vhost-=
backend.h
> index 81283ec50f..8110e09089 100644
> --- a/include/hw/virtio/vhost-backend.h
> +++ b/include/hw/virtio/vhost-backend.h
> @@ -104,6 +104,9 @@ typedef int (*vhost_crypto_close_session_op)(struct v=
host_dev *dev,
>  typedef bool (*vhost_backend_mem_section_filter_op)(struct vhost_dev *de=
v,
>                                                  MemoryRegionSection *sec=
tion);
>
> +typedef int (*vhost_set_vring_inflight_op)(struct vhost_dev *dev,
> +                                           int idx);
> +
>  typedef struct VhostOps {
>      VhostBackendType backend_type;
>      vhost_backend_init vhost_backend_init;
> @@ -142,6 +145,7 @@ typedef struct VhostOps {
>      vhost_crypto_create_session_op vhost_crypto_create_session;
>      vhost_crypto_close_session_op vhost_crypto_close_session;
>      vhost_backend_mem_section_filter_op vhost_backend_mem_section_filter=
;
> +    vhost_set_vring_inflight_op vhost_set_vring_inflight;
>  } VhostOps;
>
>  extern const VhostOps user_ops;
> diff --git a/include/hw/virtio/vhost-user.h b/include/hw/virtio/vhost-use=
r.h
> index fd660393a0..ff13433153 100644
> --- a/include/hw/virtio/vhost-user.h
> +++ b/include/hw/virtio/vhost-user.h
> @@ -17,11 +17,19 @@ typedef struct VhostUserHostNotifier {
>      bool set;
>  } VhostUserHostNotifier;
>
> +typedef struct VhostUserInflight {
> +    void *addr;
> +    uint32_t size;
> +    int fd;
> +} VhostUserInflight;
> +
>  typedef struct VhostUserState {
>      CharBackend *chr;
>      VhostUserHostNotifier notifier[VIRTIO_QUEUE_MAX];
> +    VhostUserInflight inflight[VIRTIO_QUEUE_MAX];
>  } VhostUserState;
>
> +void vhost_user_inflight_reset(VhostUserState *user);
>  VhostUserState *vhost_user_init(void);
>  void vhost_user_cleanup(VhostUserState *user);
>
> --
> 2.17.1
>
>


--
Marc-Andr=C3=A9 Lureau

