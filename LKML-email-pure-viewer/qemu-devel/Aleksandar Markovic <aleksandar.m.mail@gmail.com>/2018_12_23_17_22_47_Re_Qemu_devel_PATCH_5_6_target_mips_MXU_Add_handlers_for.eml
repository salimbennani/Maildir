Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 16:01:26 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 70DBA58048A
	for <like.xu@linux.intel.com>; Sun, 23 Dec 2018 09:23:25 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga005-1.jf.intel.com with ESMTP; 23 Dec 2018 09:23:25 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AqrJj0xwENPxyMcXXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0uoSL/ad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWVOXshTWCJBDI2y?=
 =?us-ascii?q?bJUBAPYcM+ZArYTzpVQDoQawCAWwGuzv0SRFhmPq0aAgz+gtDR3K0Q4mEtkTsH?=
 =?us-ascii?q?rUttL1NKIKXO2pyKnH0zbDb+hM1jf79YfHaAohquyLU71qa8rRyk4vFx3EjlqM?=
 =?us-ascii?q?tIfoOCma1uATvGiY9OpvT+SvhHM9pAFruDSvw90giozTiYIUzlDJ7ip5wIMvKt?=
 =?us-ascii?q?25TE53e8KrEJxVtyyDMYZ9X8AsQ3lwtSok1rELuoS3cDUXxJkk3RLTdfKKfoiS?=
 =?us-ascii?q?7h7+VuudOSl0iXN5dL+9ghuy/0utxfbgWsSx31tHrStIn9bJu3wTyxDe782KR/?=
 =?us-ascii?q?Vy80u/3zuEyhrd5fteIU8ukKrWM54hzaA0lpoUqUnDGi72mF7qjK+NbEkk9e6o?=
 =?us-ascii?q?6/n9brXhvJ+cOJd4igD4MqswhsyyGfo0PhQNUmSB5Oiwyb7u8VfnTLhEjvA6iL?=
 =?us-ascii?q?TVvZLCKcQevKG5AgtV0og56xa4CjeryM0YkmcCLFJYYR6IkpbmO0/QL/D8FPuw?=
 =?us-ascii?q?mFOskCptx//aILLhGZLBLnzCkLfiY7lx8UFdyBcrwNBb5pJUDKwBIf3pVk/wst?=
 =?us-ascii?q?zYEgE2Mwiuz+n7D9V905gTWWSIAq+fP6PSt0KI6vgoI+mWa48ZoCz9JOQ95/7y?=
 =?us-ascii?q?kX85nkcQfa2o3ZsUdn+0BPtnI1iCbHrog9cBF3oKvwUkQOzrjl2CTSBcZ3KoU6?=
 =?us-ascii?q?0g4TE7DdHuMIHYW4r4gKCdxDzpWdpSZ3taERaKFnHncZjCXO0DLyebI8tkmzpD?=
 =?us-ascii?q?UqC9Sognzla3uQrnjrZqMOfQqRAero/pgd185unPkkMr+DlpSsiQzWyJCnt5h3?=
 =?us-ascii?q?4FXCMe2qd5rkpgjFCZ3v9jnvZaGNdPsu5PSRowLpXGzuZ3WOz1DyvFc9SSQVCq?=
 =?us-ascii?q?S8/uJDgrTdUvwtRGN095Fta5hxbP1jDsBrYPlLuVBZcc6L6ZxXu3LMF4nSXozq?=
 =?us-ascii?q?4k2nAiT8hUPGuqj7Q30gHJBInXkk7Rw6+ueKcH1SjB/X3FyCyLtUBceAF1WKTB?=
 =?us-ascii?q?G3sYYx2F/pzC+kreQur2WvwcOQxbxJvHc/MSZw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BDBADmwx9chxHrdtBiHQEBBQEHBQGBZ?=
 =?us-ascii?q?YExJYI9g36IeIsaKYFkfJhTHBgUhzAiOBIBAwEBAQEBAQIBEwEBAQoLCQgbDiM?=
 =?us-ascii?q?MgjoFAgMfAQaCYAEBAQECAQECIAQZAQUKDB0BAgEBAQECBgEBBQULCgMCAiIEA?=
 =?us-ascii?q?gIDAR4BEQEFARwGEwWDHYFpAQMNCAEEmhc8ixl8FgUBF4J3BYQtChknDV6BNwI?=
 =?us-ascii?q?GEnmLNHqBHIERgl01iAmCVwKJTYtxjA0HAoIpj0AYgWCQBopfjzsPIYE8gXdNI?=
 =?us-ascii?q?4EBgjuCGwwXEoM4ilRAMYEHiy+BdwEB?=
X-IPAS-Result: =?us-ascii?q?A0BDBADmwx9chxHrdtBiHQEBBQEHBQGBZYExJYI9g36IeIs?=
 =?us-ascii?q?aKYFkfJhTHBgUhzAiOBIBAwEBAQEBAQIBEwEBAQoLCQgbDiMMgjoFAgMfAQaCY?=
 =?us-ascii?q?AEBAQECAQECIAQZAQUKDB0BAgEBAQECBgEBBQULCgMCAiIEAgIDAR4BEQEFARw?=
 =?us-ascii?q?GEwWDHYFpAQMNCAEEmhc8ixl8FgUBF4J3BYQtChknDV6BNwIGEnmLNHqBHIERg?=
 =?us-ascii?q?l01iAmCVwKJTYtxjA0HAoIpj0AYgWCQBopfjzsPIYE8gXdNI4EBgjuCGwwXEoM?=
 =?us-ascii?q?4ilRAMYEHiy+BdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,388,1539673200"; 
   d="scan'208";a="58645973"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 23 Dec 2018 09:23:23 -0800
Received: from localhost ([::1]:37951 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gb7TG-0007pN-LW
	for like.xu@linux.intel.com; Sun, 23 Dec 2018 12:23:22 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:48611)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <aleksandar.m.mail@gmail.com>) id 1gb7Sy-0007pI-9M
	for qemu-devel@nongnu.org; Sun, 23 Dec 2018 12:23:06 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <aleksandar.m.mail@gmail.com>) id 1gb7Sw-0003QS-I0
	for qemu-devel@nongnu.org; Sun, 23 Dec 2018 12:23:04 -0500
Received: from mail-ot1-x342.google.com ([2607:f8b0:4864:20::342]:35822)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <aleksandar.m.mail@gmail.com>)
	id 1gb7Sw-0003OR-9l
	for qemu-devel@nongnu.org; Sun, 23 Dec 2018 12:23:02 -0500
Received: by mail-ot1-x342.google.com with SMTP id 81so9374663otj.2
	for <qemu-devel@nongnu.org>; Sun, 23 Dec 2018 09:23:01 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
	h=mime-version:references:in-reply-to:from:date:message-id:subject:to
	:cc; bh=rSrTPzIatBzzqAfGS6Ol5Uv+5Rn1rYxjVLoJ8z3kYCc=;
	b=gphfxLXanV5KUhZyk4ssvaGNGRLq1H/jcYhtxNfgb8QvFC56ubRo5BRcMSK+nYMgKq
	mURaOGS/6RXFNVRSuIvongV246wzz4uU4CnKvF7GX/RcbTfj0rxBj2g4XDCewje+Wsyv
	tYwPkV6YEti+Zk0BRP2/ay+4lNsuRe8iydjloS0CMqS1E9SeCgyl9DeYsYxHSycWnyMt
	m5T61YfRFNi+rzZLM6Pyn3+uxqDeU8PUFVBQ0C1rFUv8ME0xpudTc9hJxCaryRwnI/P7
	8T0nvjU44be45fU1WVICV7jyZIE2KxVHyV6Qid6wQLyP+/R6z4S7MypILxvcqCFd2egp
	n65A==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:mime-version:references:in-reply-to:from:date
	:message-id:subject:to:cc;
	bh=rSrTPzIatBzzqAfGS6Ol5Uv+5Rn1rYxjVLoJ8z3kYCc=;
	b=KB28mo2Rq4kShsk8tCtTMjzIyqW4391z2cgVwG3KcASNh/yt0zsoGdNEvOnNHE7N3P
	1LZT7DG9PVzqSuGyWhs1ISuNsO76QsYaUivg1QoCi3UAbMdIFgI25+M5aJi41WjiQNI8
	s+Dm/EemYclHJ9h5O/iXaRVgxTR4terKlEoL+Vz2cMIzjYYxsmAqg1eSlN8ajbFl4tOP
	R1R7DeKTQe+M1DwOjO2JQXtP12EJgtU7NIOmDvrJtaCNEMFnFO0iHH01l5juiA8wLZpX
	iEDXT18B494T4+O1BkWMLu+h7X4AaZ9KU3Qx2IEy894V9V0fw/Bp8xNU5k4bnrI8F/aE
	tmFw==
X-Gm-Message-State: AJcUukftXAm1fKUzmcKQSGCgvEqYLfu79IAywtUmoqmW8N9nNj4XYXZw
	nLrb84t2W40kbDSTp1cFZLy/rAIh7rewrWC0TUY=
X-Google-Smtp-Source: ALg8bN7E/3xakf/FLjG8DUyZvJ1sF2roEV+ehxo/htxMDaDp4OVi8WEOan1yQy8/VbS7mDAPDHSv2CopR+uydrB4HfM=
X-Received: by 2002:a9d:6c94:: with SMTP id c20mr6732097otr.251.1545585780410; 
	Sun, 23 Dec 2018 09:23:00 -0800 (PST)
MIME-Version: 1.0
References: <20181217200444.14812-1-aleksandar.markovic@rt-rk.com>
	<20181217200444.14812-6-aleksandar.markovic@rt-rk.com>
In-Reply-To: <20181217200444.14812-6-aleksandar.markovic@rt-rk.com>
From: Aleksandar Markovic <aleksandar.m.mail@gmail.com>
Date: Sun, 23 Dec 2018 18:22:47 +0100
Message-ID: <CAL1e-=gUE7KPL+MwBOd_sb2KocHox-4Davo_SN2fwozBoOa20Q@mail.gmail.com>
To: Aleksandar Markovic <aleksandar.markovic@rt-rk.com>
Content-Type: text/plain; charset="UTF-8"
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 2607:f8b0:4864:20::342
Subject: Re: [Qemu-devel] [PATCH 5/6] target/mips: MXU: Add handlers for
 max/min instructions
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Stefan Markovic <smarkovic@wavecomp.com>, qemu-devel@nongnu.org,
	Aleksandar Markovic <amarkovic@wavecomp.com>, "Janeczek,
	Craig" <jancraig@amazon.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Mon, Dec 17, 2018 at 9:11 PM Aleksandar Markovic
<aleksandar.markovic@rt-rk.com> wrote:
>
> From: Aleksandar Markovic <amarkovic@wavecomp.com>
>
> Add translation handlers for max/min MXU instructions.
>
> Signed-off-by: Aleksandar Markovic <amarkovic@wavecomp.com>
> ---
>  target/mips/translate.c | 356 +++++++++++++++++++++++++++++++++++++---
>  1 file changed, 335 insertions(+), 21 deletions(-)
>

It would be shorter and cleaner if loops were used for processing bits
2, 1, 0 in Q8MAX and Q8MIN handlers, but, if there is no objection
over that, I can do it while applying, without respin of ghe whole
series.

Thanks,
Aleksandar

> diff --git a/target/mips/translate.c b/target/mips/translate.c
> index c74a831a17..339de8c32b 100644
> --- a/target/mips/translate.c
> +++ b/target/mips/translate.c
> @@ -24815,6 +24815,338 @@ static void gen_mxu_S32XOR(DisasContext *ctx)
>  }
>
>
> +/*
> + *                   MXU instruction category max/min
> + *                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
> + *
> + *                     S32MAX     D16MAX     Q8MAX
> + *                     S32MIN     D16MIN     Q8MIN
> + */
> +
> +/*
> + *  S32MAX XRa, XRb, XRc
> + *    Update XRa with the maximum of signed 32-bit integers contained
> + *    in XRb and XRc.
> + *
> + *  S32MIN XRa, XRb, XRc
> + *    Update XRa with the minimum of signed 32-bit integers contained
> + *    in XRb and XRc.
> + *
> + *   1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
> + *  +-----------+---------+-----+-------+-------+-------+-----------+
> + *  |  SPECIAL2 |0 0 0 0 0| opc |  XRc  |  XRb  |  XRa  |MXU__POOL00|
> + *  +-----------+---------+-----+-------+-------+-------+-----------+
> + */
> +static void gen_mxu_S32MAX_S32MIN(DisasContext *ctx)
> +{
> +    uint32_t pad, opc, XRc, XRb, XRa;
> +
> +    pad = extract32(ctx->opcode, 21, 5);
> +    opc = extract32(ctx->opcode, 18, 3);
> +    XRc = extract32(ctx->opcode, 14, 4);
> +    XRb = extract32(ctx->opcode, 10, 4);
> +    XRa = extract32(ctx->opcode,  6, 4);
> +
> +    if (unlikely(pad != 0)) {
> +        /* opcode padding incorrect -> do nothing */
> +    } else if (unlikely(XRa == 0)) {
> +        /* destination is zero register -> do nothing */
> +    } else if (unlikely((XRb == 0) && (XRc == 0))) {
> +        /* both operands zero registers -> just set destination to zero */
> +        tcg_gen_movi_i32(mxu_gpr[XRa - 1], 0);
> +    } else if (unlikely((XRb == 0) || (XRc == 0))) {
> +        /* exactly one operand is zero register - find which one is not...*/
> +        uint32_t XRx = XRb ? XRb : XRc;
> +        /* ...and do max/min operation with one operand 0 */
> +        if (opc == OPC_MXU_S32MAX) {
> +            tcg_gen_smax_i32(mxu_gpr[XRa - 1], mxu_gpr[XRx - 1], 0);
> +        } else {
> +            tcg_gen_smin_i32(mxu_gpr[XRa - 1], mxu_gpr[XRx - 1], 0);
> +        }
> +    } else if (unlikely(XRb == XRc)) {
> +        /* both operands same -> just set destination to one of them */
> +        tcg_gen_mov_i32(mxu_gpr[XRa - 1], mxu_gpr[XRb - 1]);
> +    } else {
> +        /* the most general case */
> +        if (opc == OPC_MXU_S32MAX) {
> +            tcg_gen_smax_i32(mxu_gpr[XRa - 1], mxu_gpr[XRb - 1],
> +                                               mxu_gpr[XRc - 1]);
> +        } else {
> +            tcg_gen_smin_i32(mxu_gpr[XRa - 1], mxu_gpr[XRb - 1],
> +                                               mxu_gpr[XRc - 1]);
> +        }
> +    }
> +}
> +
> +/*
> + *  D16MAX
> + *    Update XRa with the 16-bit-wise maximums of signed integers
> + *    contained in XRb and XRc.
> + *
> + *  D16MIN
> + *    Update XRa with the 16-bit-wise minimums of signed integers
> + *    contained in XRb and XRc.
> + *
> + *   1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
> + *  +-----------+---------+-----+-------+-------+-------+-----------+
> + *  |  SPECIAL2 |0 0 0 0 0| opc |  XRc  |  XRb  |  XRa  |MXU__POOL00|
> + *  +-----------+---------+-----+-------+-------+-------+-----------+
> + */
> +static void gen_mxu_D16MAX_D16MIN(DisasContext *ctx)
> +{
> +    uint32_t pad, opc, XRc, XRb, XRa;
> +
> +    pad = extract32(ctx->opcode, 21, 5);
> +    opc = extract32(ctx->opcode, 18, 3);
> +    XRc = extract32(ctx->opcode, 14, 4);
> +    XRb = extract32(ctx->opcode, 10, 4);
> +    XRa = extract32(ctx->opcode,  6, 4);
> +
> +    if (unlikely(pad != 0)) {
> +        /* opcode padding incorrect -> do nothing */
> +    } else if (unlikely(XRc == 0)) {
> +        /* destination is zero register -> do nothing */
> +    } else if (unlikely((XRb == 0) && (XRa == 0))) {
> +        /* both operands zero registers -> just set destination to zero */
> +        tcg_gen_movi_i32(mxu_gpr[XRc - 1], 0);
> +    } else if (unlikely((XRb == 0) || (XRa == 0))) {
> +        /* exactly one operand is zero register - find which one is not...*/
> +        uint32_t XRx = XRb ? XRb : XRc;
> +        /* ...and do half-word-wise max/min with one operand 0 */
> +        TCGv_i32 t0 = tcg_temp_new();
> +        TCGv_i32 t1 = tcg_const_i32(0);
> +
> +        /* the left half-word first */
> +        tcg_gen_andi_i32(t0, mxu_gpr[XRx - 1], 0xFFFF0000);
> +        if (opc == OPC_MXU_D16MAX) {
> +            tcg_gen_smax_i32(mxu_gpr[XRa - 1], t0, t1);
> +        } else {
> +            tcg_gen_smin_i32(mxu_gpr[XRa - 1], t0, t1);
> +        }
> +
> +        /* the right half-word */
> +        tcg_gen_andi_i32(t0, mxu_gpr[XRx - 1], 0x0000FFFF);
> +        /* move half-words to the leftmost position */
> +        tcg_gen_shli_i32(t0, t0, 16);
> +        /* t0 will be max/min of t0 and t1 */
> +        if (opc == OPC_MXU_D16MAX) {
> +            tcg_gen_smax_i32(t0, t0, t1);
> +        } else {
> +            tcg_gen_smin_i32(t0, t0, t1);
> +        }
> +        /* return resulting half-words to its original position */
> +        tcg_gen_shri_i32(t0, t0, 16);
> +        /* finaly update the destination */
> +        tcg_gen_or_i32(mxu_gpr[XRa - 1], mxu_gpr[XRa - 1], t0);
> +
> +        tcg_temp_free(t1);
> +        tcg_temp_free(t0);
> +    } else if (unlikely(XRb == XRc)) {
> +        /* both operands same -> just set destination to one of them */
> +        tcg_gen_mov_i32(mxu_gpr[XRa - 1], mxu_gpr[XRb - 1]);
> +    } else {
> +        /* the most general case */
> +        TCGv_i32 t0 = tcg_temp_new();
> +        TCGv_i32 t1 = tcg_temp_new();
> +
> +        /* the left half-word first */
> +        tcg_gen_andi_i32(t0, mxu_gpr[XRb - 1], 0xFFFF0000);
> +        tcg_gen_andi_i32(t1, mxu_gpr[XRc - 1], 0xFFFF0000);
> +        if (opc == OPC_MXU_D16MAX) {
> +            tcg_gen_smax_i32(mxu_gpr[XRa - 1], t0, t1);
> +        } else {
> +            tcg_gen_smin_i32(mxu_gpr[XRa - 1], t0, t1);
> +        }
> +
> +        /* the right half-word */
> +        tcg_gen_andi_i32(t0, mxu_gpr[XRb - 1], 0x0000FFFF);
> +        tcg_gen_andi_i32(t1, mxu_gpr[XRc - 1], 0x0000FFFF);
> +        /* move half-words to the leftmost position */
> +        tcg_gen_shli_i32(t0, t0, 16);
> +        tcg_gen_shli_i32(t1, t1, 16);
> +        /* t0 will be max/min of t0 and t1 */
> +        if (opc == OPC_MXU_D16MAX) {
> +            tcg_gen_smax_i32(t0, t0, t1);
> +        } else {
> +            tcg_gen_smin_i32(t0, t0, t1);
> +        }
> +        /* return resulting half-words to its original position */
> +        tcg_gen_shri_i32(t0, t0, 16);
> +        /* finaly update the destination */
> +        tcg_gen_or_i32(mxu_gpr[XRa - 1], mxu_gpr[XRa - 1], t0);
> +
> +        tcg_temp_free(t1);
> +        tcg_temp_free(t0);
> +    }
> +}
> +
> +/*
> + *  Q8MAX
> + *    Update XRa with the 8-bit-wise maximums of signed integers
> + *    contained in XRb and XRc.
> + *
> + *  Q8MIN
> + *    Update XRa with the 8-bit-wise minimums of signed integers
> + *    contained in XRb and XRc.
> + *
> + *   1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
> + *  +-----------+---------+-----+-------+-------+-------+-----------+
> + *  |  SPECIAL2 |0 0 0 0 0| opc |  XRc  |  XRb  |  XRa  |MXU__POOL00|
> + *  +-----------+---------+-----+-------+-------+-------+-----------+
> + */
> +static void gen_mxu_Q8MAX_Q8MIN(DisasContext *ctx)
> +{
> +    uint32_t pad, opc, XRc, XRb, XRa;
> +
> +    pad = extract32(ctx->opcode, 21, 5);
> +    opc = extract32(ctx->opcode, 18, 3);
> +    XRc = extract32(ctx->opcode, 14, 4);
> +    XRb = extract32(ctx->opcode, 10, 4);
> +    XRa = extract32(ctx->opcode,  6, 4);
> +
> +    if (unlikely(pad != 0)) {
> +        /* opcode padding incorrect -> do nothing */
> +    } else if (unlikely(XRa == 0)) {
> +        /* destination is zero register -> do nothing */
> +    } else if (unlikely((XRb == 0) && (XRc == 0))) {
> +        /* both operands zero registers -> just set destination to zero */
> +        tcg_gen_movi_i32(mxu_gpr[XRa - 1], 0);
> +    } else if (unlikely((XRb == 0) || (XRc == 0))) {
> +        /* exactly one operand is zero register - make it be the first...*/
> +        uint32_t XRx = XRb ? XRb : XRc;
> +        /* ...and do byte-wise max/min with one operand 0 */
> +        TCGv_i32 t0 = tcg_temp_new();
> +        TCGv_i32 t1 = tcg_const_i32(0);
> +
> +        /* the leftmost byte (byte 3) first */
> +        tcg_gen_andi_i32(t0, mxu_gpr[XRx - 1], 0xFF000000);
> +        if (opc == OPC_MXU_Q8MAX) {
> +            tcg_gen_smax_i32(mxu_gpr[XRa - 1], t0, t1);
> +        } else {
> +            tcg_gen_smin_i32(mxu_gpr[XRa - 1], t0, t1);
> +        }
> +
> +        /* byte 2 */
> +        tcg_gen_andi_i32(t0, mxu_gpr[XRx - 1], 0x00FF0000);
> +        /* move half-words to the leftmost position */
> +        tcg_gen_shli_i32(t0, t0, 8);
> +        /* t0 will be max/min of t0 and t1 */
> +        if (opc == OPC_MXU_Q8MAX) {
> +            tcg_gen_smax_i32(t0, t0, t1);
> +        } else {
> +            tcg_gen_smin_i32(t0, t0, t1);
> +        }
> +        /* return resulting byte to its original position */
> +        tcg_gen_shri_i32(t0, t0, 8);
> +        /* finaly update the destination */
> +        tcg_gen_or_i32(mxu_gpr[XRa - 1], mxu_gpr[XRa - 1], t0);
> +
> +        /* byte 1 */
> +        tcg_gen_andi_i32(t0, mxu_gpr[XRx - 1], 0x0000FF00);
> +        /* move half-words to the leftmost position */
> +        tcg_gen_shli_i32(t0, t0, 16);
> +        /* t0 will be max/min of t0 and t1 */
> +        if (opc == OPC_MXU_Q8MAX) {
> +            tcg_gen_smax_i32(t0, t0, t1);
> +        } else {
> +            tcg_gen_smin_i32(t0, t0, t1);
> +        }
> +        /* return resulting byte to its original position */
> +        tcg_gen_shri_i32(t0, t0, 24);
> +        /* finaly update the destination */
> +        tcg_gen_or_i32(mxu_gpr[XRa - 1], mxu_gpr[XRa - 1], t0);
> +
> +        /* byte 0 */
> +        tcg_gen_andi_i32(t0, mxu_gpr[XRx - 1], 0x000000FF);
> +        /* move half-words to the leftmost position */
> +        tcg_gen_shli_i32(t0, t0, 24);
> +        /* t0 will be max/min of t0 and t1 */
> +        if (opc == OPC_MXU_Q8MAX) {
> +            tcg_gen_smax_i32(t0, t0, t1);
> +        } else {
> +            tcg_gen_smin_i32(t0, t0, t1);
> +        }
> +        /* return resulting byte to its original position */
> +        tcg_gen_shri_i32(t0, t0, 8);
> +        /* finaly update the destination */
> +        tcg_gen_or_i32(mxu_gpr[XRa - 1], mxu_gpr[XRa - 1], t0);
> +
> +        tcg_temp_free(t1);
> +        tcg_temp_free(t0);
> +    } else if (unlikely(XRb == XRc)) {
> +        /* both operands same -> just set destination to one of them */
> +        tcg_gen_mov_i32(mxu_gpr[XRa - 1], mxu_gpr[XRb - 1]);
> +    } else {
> +        /* the most general case */
> +        TCGv_i32 t0 = tcg_temp_new();
> +        TCGv_i32 t1 = tcg_temp_new();
> +
> +        /* the leftmost byte (byte 3) first */
> +        tcg_gen_andi_i32(t0, mxu_gpr[XRb - 1], 0xFF000000);
> +        tcg_gen_andi_i32(t1, mxu_gpr[XRc - 1], 0xFF000000);
> +        if (opc == OPC_MXU_Q8MAX) {
> +            tcg_gen_smax_i32(mxu_gpr[XRa - 1], t0, t1);
> +        } else {
> +            tcg_gen_smin_i32(mxu_gpr[XRa - 1], t0, t1);
> +        }
> +
> +        /* byte 2 */
> +        tcg_gen_andi_i32(t0, mxu_gpr[XRb - 1], 0x00FF0000);
> +        tcg_gen_andi_i32(t1, mxu_gpr[XRc - 1], 0x00FF0000);
> +        /* move half-words to the leftmost position */
> +        tcg_gen_shli_i32(t0, t0, 8);
> +        tcg_gen_shli_i32(t1, t1, 8);
> +        /* t0 will be max/min of t0 and t1 */
> +        if (opc == OPC_MXU_Q8MAX) {
> +            tcg_gen_smax_i32(t0, t0, t1);
> +        } else {
> +            tcg_gen_smin_i32(t0, t0, t1);
> +        }
> +        /* return resulting byte to its original position */
> +        tcg_gen_shri_i32(t0, t0, 8);
> +        /* finaly update the destination */
> +        tcg_gen_or_i32(mxu_gpr[XRa - 1], mxu_gpr[XRa - 1], t0);
> +
> +        /* byte 1 */
> +        tcg_gen_andi_i32(t0, mxu_gpr[XRb - 1], 0x0000FF00);
> +        tcg_gen_andi_i32(t1, mxu_gpr[XRc - 1], 0x0000FF00);
> +        /* move half-words to the leftmost position */
> +        tcg_gen_shli_i32(t0, t0, 16);
> +        tcg_gen_shli_i32(t1, t1, 16);
> +        /* t0 will be max/min of t0 and t1 */
> +        if (opc == OPC_MXU_Q8MAX) {
> +            tcg_gen_smax_i32(t0, t0, t1);
> +        } else {
> +            tcg_gen_smin_i32(t0, t0, t1);
> +        }
> +        /* return resulting byte to its original position */
> +        tcg_gen_shri_i32(t0, t0, 24);
> +        /* finaly update the destination */
> +        tcg_gen_or_i32(mxu_gpr[XRa - 1], mxu_gpr[XRa - 1], t0);
> +
> +        /* byte 0 */
> +        tcg_gen_andi_i32(t0, mxu_gpr[XRb - 1], 0x000000FF);
> +        tcg_gen_andi_i32(t1, mxu_gpr[XRc - 1], 0x000000FF);
> +        /* move half-words to the leftmost position */
> +        tcg_gen_shli_i32(t0, t0, 24);
> +        tcg_gen_shli_i32(t1, t1, 24);
> +        /* t0 will be max/min of t0 and t1 */
> +        if (opc == OPC_MXU_Q8MAX) {
> +            tcg_gen_smax_i32(t0, t0, t1);
> +        } else {
> +            tcg_gen_smin_i32(t0, t0, t1);
> +        }
> +        /* return resulting byte to its original position */
> +        tcg_gen_shri_i32(t0, t0, 8);
> +        /* finaly update the destination */
> +        tcg_gen_or_i32(mxu_gpr[XRa - 1], mxu_gpr[XRa - 1], t0);
> +
> +        tcg_temp_free(t1);
> +        tcg_temp_free(t0);
> +    }
> +}
> +
> +
>  /*
>   * Decoding engine for MXU
>   * =======================
> @@ -24836,34 +25168,16 @@ static void decode_opc_mxu__pool00(CPUMIPSState *env, DisasContext *ctx)
>
>      switch (opcode) {
>      case OPC_MXU_S32MAX:
> -        /* TODO: Implement emulation of S32MAX instruction. */
> -        MIPS_INVAL("OPC_MXU_S32MAX");
> -        generate_exception_end(ctx, EXCP_RI);
> -        break;
>      case OPC_MXU_S32MIN:
> -        /* TODO: Implement emulation of S32MIN instruction. */
> -        MIPS_INVAL("OPC_MXU_S32MIN");
> -        generate_exception_end(ctx, EXCP_RI);
> +        gen_mxu_S32MAX_S32MIN(ctx);
>          break;
>      case OPC_MXU_D16MAX:
> -        /* TODO: Implement emulation of D16MAX instruction. */
> -        MIPS_INVAL("OPC_MXU_D16MAX");
> -        generate_exception_end(ctx, EXCP_RI);
> -        break;
>      case OPC_MXU_D16MIN:
> -        /* TODO: Implement emulation of D16MIN instruction. */
> -        MIPS_INVAL("OPC_MXU_D16MIN");
> -        generate_exception_end(ctx, EXCP_RI);
> +        gen_mxu_D16MAX_D16MIN(ctx);
>          break;
>      case OPC_MXU_Q8MAX:
> -        /* TODO: Implement emulation of Q8MAX instruction. */
> -        MIPS_INVAL("OPC_MXU_Q8MAX");
> -        generate_exception_end(ctx, EXCP_RI);
> -        break;
>      case OPC_MXU_Q8MIN:
> -        /* TODO: Implement emulation of Q8MIN instruction. */
> -        MIPS_INVAL("OPC_MXU_Q8MIN");
> -        generate_exception_end(ctx, EXCP_RI);
> +        gen_mxu_Q8MAX_Q8MIN(ctx);
>          break;
>      case OPC_MXU_Q8SLT:
>          /* TODO: Implement emulation of Q8SLT instruction. */
> --
> 2.17.1
>
>

