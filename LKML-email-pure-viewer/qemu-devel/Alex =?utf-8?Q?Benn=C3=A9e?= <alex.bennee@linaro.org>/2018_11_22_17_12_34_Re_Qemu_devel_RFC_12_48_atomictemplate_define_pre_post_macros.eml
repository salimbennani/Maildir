Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 23 Nov 2018 08:30:09 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id D5D0C580460
	for <like.xu@linux.intel.com>; Thu, 22 Nov 2018 09:13:23 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 22 Nov 2018 09:13:23 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AjS3mrhxXsHQnGEvXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?2u0SIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CS2pOUMZfWTJDDY2y?=
 =?us-ascii?q?bIUAAPYOM+lFoYnlpVYArxSzCRSiCe/z1DBInWT73bEj0+k7DQ3KwBYtEtAIvX?=
 =?us-ascii?q?/JrNv1LqASUeWtwaTUyTXMcfxX0irg5YfWdBAhp+uLUqxtesfW00YvEx3Kj1qK?=
 =?us-ascii?q?pYP+ITyV0OINvHaF4Od7UeKvimgnpBtrojio3MssjZPJho0Mx13C6C53w541KM?=
 =?us-ascii?q?WmREJnYtOoCoZcuzyZOodsXM8vTWFltDwnxrAEoZK2fzUGxI46yxLBaPGLaZWE?=
 =?us-ascii?q?7xHjWeqLLzp1i3Roc6+liRmo60iv0Oj8W9G00FlUqipFlcHBtnQM1xzI9siHUe?=
 =?us-ascii?q?Fx/kin2TaSzQzT7ftEIU8smaraLZ4u3KIwm4INvUjfHSL6glj6gLKVe0k+5OSl?=
 =?us-ascii?q?5eTqbq/7qpKeL4N0jxvxMqUqmsyxG+Q4NQ0OUnCC+eui0b3j4FT1T6hUgf0ojK?=
 =?us-ascii?q?bZtInWKt8cpq6kBQ9azpgs6w24Azei0dQYnmcIIEhKeRKal4XpP1DOIPblDfaw?=
 =?us-ascii?q?mViskTFrx+zYMb3lGJnCMn/DkLL6cLZ77E5czgUzzdZC555ODbEBOv3zVlfrtN?=
 =?us-ascii?q?PEFh85LxC0w+H/BdV514MeWnyADrWWMaPPqlKI4uMvI++RZI4aojr9Kv4l5+Lw?=
 =?us-ascii?q?gn89g1MSYa6p3Z5EIE2+BelsdkWFfWL30JBGFWYRohF4Suvsh1ufFzlJaDG3Vq?=
 =?us-ascii?q?M44zg9T4W+EYbEQJvqmbGEwWK3E4NbYjN7DEuRGyLtfoSAR/BecS+XP4ptnyIJ?=
 =?us-ascii?q?Uf27RpY82AqynAn9zbVhM6zT4CJPro/p1tV++7jOkwov/yd/FcWX3jKxSDQ+s2?=
 =?us-ascii?q?YJQz4xlI856Wd61l7JmfxzhOBRPdZJ7vpRFAAgOsiP4fZ9DoXbXg/RNv2ETlAn?=
 =?us-ascii?q?T53yCDU8XpQ7ztkIbktVH9SkhwrEmS2wDOlGxPSwGJUo//eEjDDKLMFnxiODjf?=
 =?us-ascii?q?F5gg=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A2AAD24vZbhxHrdtBiHgEGBwaBUwcLA?=
 =?us-ascii?q?YEwJYI9g3iId4sigg2XOoFzEgEBGBSEQIQSIjYHDQEDAQEBAQEBAgETAQEBCgs?=
 =?us-ascii?q?JCCkjDII2BQIDGgEGglwBAgIBAQIgHQEBBAopAQICAQECBgEBChoCBR0EAgIDA?=
 =?us-ascii?q?QsBJAEFAQEbBhMFgxyBeggBAwGdfzyKHXCBL4J2AQEFgkODUoEFCBIQaYligRy?=
 =?us-ascii?q?CFoERgXCBIoR+gwSCV4klll8HApEvGIlRhzcsl10GAgkHDyGBLAWCATNKgy+CG?=
 =?us-ascii?q?wwXiF6FPnKBB4pdgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0A2AAD24vZbhxHrdtBiHgEGBwaBUwcLAYEwJYI9g3iId4s?=
 =?us-ascii?q?igg2XOoFzEgEBGBSEQIQSIjYHDQEDAQEBAQEBAgETAQEBCgsJCCkjDII2BQIDG?=
 =?us-ascii?q?gEGglwBAgIBAQIgHQEBBAopAQICAQECBgEBChoCBR0EAgIDAQsBJAEFAQEbBhM?=
 =?us-ascii?q?FgxyBeggBAwGdfzyKHXCBL4J2AQEFgkODUoEFCBIQaYligRyCFoERgXCBIoR+g?=
 =?us-ascii?q?wSCV4klll8HApEvGIlRhzcsl10GAgkHDyGBLAWCATNKgy+CGwwXiF6FPnKBB4p?=
 =?us-ascii?q?dgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,266,1539673200"; 
   d="scan'208";a="52304944"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 22 Nov 2018 09:13:22 -0800
Received: from localhost ([::1]:47959 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gPsXZ-0001X1-Js
	for like.xu@linux.intel.com; Thu, 22 Nov 2018 12:13:21 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:46545)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <alex.bennee@linaro.org>) id 1gPsWv-0001U6-Ob
	for qemu-devel@nongnu.org; Thu, 22 Nov 2018 12:12:43 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <alex.bennee@linaro.org>) id 1gPsWr-0000A9-6m
	for qemu-devel@nongnu.org; Thu, 22 Nov 2018 12:12:41 -0500
Received: from mail-wm1-x342.google.com ([2a00:1450:4864:20::342]:35270)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <alex.bennee@linaro.org>)
	id 1gPsWq-00008J-Th
	for qemu-devel@nongnu.org; Thu, 22 Nov 2018 12:12:37 -0500
Received: by mail-wm1-x342.google.com with SMTP id c126so9774424wmh.0
	for <qemu-devel@nongnu.org>; Thu, 22 Nov 2018 09:12:36 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linaro.org; s=google;
	h=references:user-agent:from:to:cc:subject:in-reply-to:date
	:message-id:mime-version:content-transfer-encoding;
	bh=intVEKBjZyOrfsrvYySFT5XF0noJKNijBhvXJROgP2A=;
	b=JyOp1uHNjrryi7Ry2u2bjU/3hPZQgVUXqrmra1zAu7qhikdm2zP8pNqtQSWqijNbrM
	IxFiBdEiZylS2H/Q5w+WI8azXs7OgWhrPa5eFqr+KqX/lJFuXYpctms7Q/TsEsNA/Z9l
	hiUycGKbRNyvqZG3wkEnh6JBx6N3eefZgBsw0=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:references:user-agent:from:to:cc:subject
	:in-reply-to:date:message-id:mime-version:content-transfer-encoding;
	bh=intVEKBjZyOrfsrvYySFT5XF0noJKNijBhvXJROgP2A=;
	b=fnsbj+Z55rTaWXcyYP5XfEfIsME7pJbtALDwrAWhJtuStNZlc1aaWalhnD02ncFdLy
	zhWc60S+RDn/eGU7DrsY3cwpas/ADbCryDE+xKAzpeHxP28szgAIDSo4coP5Kb0/14a2
	S2isHB6XRIdlOqAlaOwsnQep/+aOuu5cLSovuC6AO/4owWQBFMthtgTMIjVKbfVzw2mN
	/PuhBxvoAK1hHU/6XGQrqNGpIlYzPr9gMquIR6hGAk2JJrBauNZi9IDxA0knUjQGFPvF
	qnaOON/1C2GZy4UNV4aSQNyPYeR42JJAgS8wbUMW2RXgRdtUYXAX1rV1cVj2Qsu2Z8Jk
	HZMA==
X-Gm-Message-State: AGRZ1gKJfMxTulrHEeQb2WITD4zYkyG8BxTSejugZ+2Z9TtfYr/Us4/H
	8ypeq7ng3PEXJm9JK5mp2QUVMg==
X-Google-Smtp-Source: AFSGD/X2x+3pYvaPcSOGkaQxi/GWtlX9sPooV6qmdpYLKv8mtq/EJy71jLrj+h7psZl72h1FiRknQA==
X-Received: by 2002:a1c:ccf:: with SMTP id 198-v6mr11156713wmm.6.1542906755661;
	Thu, 22 Nov 2018 09:12:35 -0800 (PST)
Received: from zen.linaro.local ([81.128.185.34])
	by smtp.gmail.com with ESMTPSA id
	y7-v6sm5581993wmy.27.2018.11.22.09.12.34
	(version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
	Thu, 22 Nov 2018 09:12:35 -0800 (PST)
Received: from zen (localhost [127.0.0.1])
	by zen.linaro.local (Postfix) with ESMTPS id 5EF903E016E;
	Thu, 22 Nov 2018 17:12:34 +0000 (GMT)
References: <20181025172057.20414-1-cota@braap.org>
	<20181025172057.20414-13-cota@braap.org>
User-agent: mu4e 1.1.0; emacs 26.1.90
From: Alex =?utf-8?Q?Benn=C3=A9e?= <alex.bennee@linaro.org>
To: "Emilio G. Cota" <cota@braap.org>
In-reply-to: <20181025172057.20414-13-cota@braap.org>
Date: Thu, 22 Nov 2018 17:12:34 +0000
Message-ID: <871s7dhw8t.fsf@linaro.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 2a00:1450:4864:20::342
Subject: Re: [Qemu-devel] [RFC 12/48] atomic_template: define pre/post macros
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Stefan Hajnoczi <stefanha@gmail.com>,
	Peter Maydell <peter.maydell@linaro.org>, qemu-devel@nongnu.org,
	Pavel Dovgalyuk <Pavel.Dovgaluk@ispras.ru>,
	=?utf-8?Q?Llu=C3=ADs?= Vilanova <vilanova@ac.upc.edu>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>


Emilio G. Cota <cota@braap.org> writes:

> In preparation for plugin support.
>
> Signed-off-by: Emilio G. Cota <cota@braap.org>

More macros for the macro-god. I guess this works but I wonder if it's
possible to do a clean-up ala softfloat and the experimental softmmu
re-factor that makes this less a mess of macros?


> ---
>  accel/tcg/atomic_template.h | 92 +++++++++++++++++++++++--------------
>  1 file changed, 57 insertions(+), 35 deletions(-)
>
> diff --git a/accel/tcg/atomic_template.h b/accel/tcg/atomic_template.h
> index 8d177fefef..b13318c1ce 100644
> --- a/accel/tcg/atomic_template.h
> +++ b/accel/tcg/atomic_template.h
> @@ -59,25 +59,26 @@
>  # define ABI_TYPE  uint32_t
>  #endif
>
> -#define ATOMIC_TRACE_RMW do {                                           \
> -        uint8_t info =3D glue(trace_mem_build_info_no_se, MEND)(SHIFT, f=
alse); \
> -                                                                        \
> -        trace_guest_mem_before_exec(ENV_GET_CPU(env), addr, info);      \
> -        trace_guest_mem_before_exec(ENV_GET_CPU(env), addr,             \
> -                                    info | TRACE_MEM_ST);               \
> -    } while (0)
> -
> -#define ATOMIC_TRACE_LD do {                                            \
> -        uint8_t info =3D glue(trace_mem_build_info_no_se, MEND)(SHIFT, f=
alse); \
> -                                                                        \
> -        trace_guest_mem_before_exec(ENV_GET_CPU(env), addr, info);      \
> -    } while (0)
> -
> -# define ATOMIC_TRACE_ST do {                                           \
> -        uint8_t info =3D glue(trace_mem_build_info_no_se, MEND)(SHIFT, t=
rue); \
> -                                                                        \
> -        trace_guest_mem_before_exec(ENV_GET_CPU(env), addr, info);      \
> -    } while (0)
> +/* these don't depend on MEND/SHIFT, so we just define them once */
> +#ifndef ATOMIC_TRACE_RMW_PRE
> +# define ATOMIC_TRACE_RMW_PRE do {                                      =
      \
> +    trace_guest_mem_before_exec(ENV_GET_CPU(env), addr, info);          =
      \
> +    trace_guest_mem_before_exec(ENV_GET_CPU(env), addr, info | TRACE_MEM=
_ST); \
> +} while (0)
> +
> +# define ATOMIC_TRACE_RMW_POST                                          \
> +
> +# define ATOMIC_TRACE_LD_PRE                                    \
> +    trace_guest_mem_before_exec(ENV_GET_CPU(env), addr, info)
> +
> +# define ATOMIC_TRACE_LD_POST                                           \
> +
> +# define ATOMIC_TRACE_ST_PRE                                    \
> +    trace_guest_mem_before_exec(ENV_GET_CPU(env), addr, info)
> +
> +# define ATOMIC_TRACE_ST_POST                                           \
> +
> +#endif /* ATOMIC_TRACE_RMW_PRE */
>
>  /* Define host-endian atomic operations.  Note that END is used within
>     the ATOMIC_NAME macro, and redefined below.  */
> @@ -98,14 +99,16 @@ ABI_TYPE ATOMIC_NAME(cmpxchg)(CPUArchState *env, targ=
et_ulong addr,
>      ATOMIC_MMU_DECLS;
>      DATA_TYPE *haddr =3D ATOMIC_MMU_LOOKUP;
>      DATA_TYPE ret;
> +    uint8_t info =3D glue(trace_mem_build_info_no_se, MEND)(SHIFT, false=
);
>
> -    ATOMIC_TRACE_RMW;
> +    ATOMIC_TRACE_RMW_PRE;
>  #if DATA_SIZE =3D=3D 16
>      ret =3D atomic16_cmpxchg(haddr, cmpv, newv);
>  #else
>      ret =3D atomic_cmpxchg__nocheck(haddr, cmpv, newv);
>  #endif
>      ATOMIC_MMU_CLEANUP;
> +    ATOMIC_TRACE_RMW_POST;
>      return ret;
>  }
>
> @@ -115,10 +118,12 @@ ABI_TYPE ATOMIC_NAME(ld)(CPUArchState *env, target_=
ulong addr EXTRA_ARGS)
>  {
>      ATOMIC_MMU_DECLS;
>      DATA_TYPE val, *haddr =3D ATOMIC_MMU_LOOKUP;
> +    uint8_t info =3D glue(trace_mem_build_info_no_se, MEND)(SHIFT, false=
);
>
> -    ATOMIC_TRACE_LD;
> +    ATOMIC_TRACE_LD_PRE;
>      val =3D atomic16_read(haddr);
>      ATOMIC_MMU_CLEANUP;
> +    ATOMIC_TRACE_LD_POST;
>      return val;
>  }
>
> @@ -127,10 +132,12 @@ void ATOMIC_NAME(st)(CPUArchState *env, target_ulon=
g addr,
>  {
>      ATOMIC_MMU_DECLS;
>      DATA_TYPE *haddr =3D ATOMIC_MMU_LOOKUP;
> +    uint8_t info =3D glue(trace_mem_build_info_no_se, MEND)(SHIFT, true);
>
> -    ATOMIC_TRACE_ST;
> +    ATOMIC_TRACE_ST_PRE;
>      atomic16_set(haddr, val);
>      ATOMIC_MMU_CLEANUP;
> +    ATOMIC_TRACE_ST_POST;
>  }
>  #endif
>  #else
> @@ -140,10 +147,12 @@ ABI_TYPE ATOMIC_NAME(xchg)(CPUArchState *env, targe=
t_ulong addr,
>      ATOMIC_MMU_DECLS;
>      DATA_TYPE *haddr =3D ATOMIC_MMU_LOOKUP;
>      DATA_TYPE ret;
> +    uint8_t info =3D glue(trace_mem_build_info_no_se, MEND)(SHIFT, false=
);
>
> -    ATOMIC_TRACE_RMW;
> +    ATOMIC_TRACE_RMW_PRE;
>      ret =3D atomic_xchg__nocheck(haddr, val);
>      ATOMIC_MMU_CLEANUP;
> +    ATOMIC_TRACE_RMW_POST;
>      return ret;
>  }
>
> @@ -154,10 +163,12 @@ ABI_TYPE ATOMIC_NAME(X)(CPUArchState *env, target_u=
long addr,       \
>      ATOMIC_MMU_DECLS;                                               \
>      DATA_TYPE *haddr =3D ATOMIC_MMU_LOOKUP;                           \
>      DATA_TYPE ret;                                                  \
> +    uint8_t info =3D glue(trace_mem_build_info_no_se, MEND)(SHIFT, false=
); \
>                                                                      \
> -    ATOMIC_TRACE_RMW;                                               \
> +    ATOMIC_TRACE_RMW_PRE;                                           \
>      ret =3D atomic_##X(haddr, val);                                   \
>      ATOMIC_MMU_CLEANUP;                                             \
> +    ATOMIC_TRACE_RMW_POST;                                          \
>      return ret;                                                     \
>  }
>
> @@ -186,8 +197,9 @@ ABI_TYPE ATOMIC_NAME(X)(CPUArchState *env, target_ulo=
ng addr,       \
>      ATOMIC_MMU_DECLS;                                               \
>      XDATA_TYPE *haddr =3D ATOMIC_MMU_LOOKUP;                          \
>      XDATA_TYPE cmp, old, new, val =3D xval;                           \
> +    uint8_t info =3D glue(trace_mem_build_info_no_se, MEND)(SHIFT, false=
); \
>                                                                      \
> -    ATOMIC_TRACE_RMW;                                               \
> +    ATOMIC_TRACE_RMW_PRE;                                           \
>      smp_mb();                                                       \
>      cmp =3D atomic_read__nocheck(haddr);                              \
>      do {                                                            \
> @@ -195,6 +207,7 @@ ABI_TYPE ATOMIC_NAME(X)(CPUArchState *env, target_ulo=
ng addr,       \
>          cmp =3D atomic_cmpxchg__nocheck(haddr, old, new);             \
>      } while (cmp !=3D old);                                           \
>      ATOMIC_MMU_CLEANUP;                                             \
> +    ATOMIC_TRACE_RMW_POST;                                          \
>      return RET;                                                     \
>  }
>
> @@ -232,14 +245,16 @@ ABI_TYPE ATOMIC_NAME(cmpxchg)(CPUArchState *env, ta=
rget_ulong addr,
>      ATOMIC_MMU_DECLS;
>      DATA_TYPE *haddr =3D ATOMIC_MMU_LOOKUP;
>      DATA_TYPE ret;
> +    uint8_t info =3D glue(trace_mem_build_info_no_se, MEND)(SHIFT, false=
);
>
> -    ATOMIC_TRACE_RMW;
> +    ATOMIC_TRACE_RMW_PRE;
>  #if DATA_SIZE =3D=3D 16
>      ret =3D atomic16_cmpxchg(haddr, BSWAP(cmpv), BSWAP(newv));
>  #else
>      ret =3D atomic_cmpxchg__nocheck(haddr, BSWAP(cmpv), BSWAP(newv));
>  #endif
>      ATOMIC_MMU_CLEANUP;
> +    ATOMIC_TRACE_RMW_POST;
>      return BSWAP(ret);
>  }
>
> @@ -249,10 +264,12 @@ ABI_TYPE ATOMIC_NAME(ld)(CPUArchState *env, target_=
ulong addr EXTRA_ARGS)
>  {
>      ATOMIC_MMU_DECLS;
>      DATA_TYPE val, *haddr =3D ATOMIC_MMU_LOOKUP;
> +    uint8_t info =3D glue(trace_mem_build_info_no_se, MEND)(SHIFT, false=
);
>
> -    ATOMIC_TRACE_LD;
> +    ATOMIC_TRACE_LD_PRE;
>      val =3D atomic16_read(haddr);
>      ATOMIC_MMU_CLEANUP;
> +    ATOMIC_TRACE_LD_POST;
>      return BSWAP(val);
>  }
>
> @@ -261,11 +278,14 @@ void ATOMIC_NAME(st)(CPUArchState *env, target_ulon=
g addr,
>  {
>      ATOMIC_MMU_DECLS;
>      DATA_TYPE *haddr =3D ATOMIC_MMU_LOOKUP;
> +    uint8_t info =3D glue(trace_mem_build_info_no_se, MEND)(SHIFT, true);
>
> -    ATOMIC_TRACE_ST;
> +    val =3D BSWAP(val);
> +    ATOMIC_TRACE_ST_PRE;
>      val =3D BSWAP(val);
>      atomic16_set(haddr, val);
>      ATOMIC_MMU_CLEANUP;
> +    ATOMIC_TRACE_ST_POST;
>  }
>  #endif
>  #else
> @@ -275,10 +295,12 @@ ABI_TYPE ATOMIC_NAME(xchg)(CPUArchState *env, targe=
t_ulong addr,
>      ATOMIC_MMU_DECLS;
>      DATA_TYPE *haddr =3D ATOMIC_MMU_LOOKUP;
>      ABI_TYPE ret;
> +    uint8_t info =3D glue(trace_mem_build_info_no_se, MEND)(SHIFT, false=
);
>
> -    ATOMIC_TRACE_RMW;
> +    ATOMIC_TRACE_RMW_PRE;
>      ret =3D atomic_xchg__nocheck(haddr, BSWAP(val));
>      ATOMIC_MMU_CLEANUP;
> +    ATOMIC_TRACE_RMW_POST;
>      return BSWAP(ret);
>  }
>
> @@ -289,10 +311,12 @@ ABI_TYPE ATOMIC_NAME(X)(CPUArchState *env, target_u=
long addr,       \
>      ATOMIC_MMU_DECLS;                                               \
>      DATA_TYPE *haddr =3D ATOMIC_MMU_LOOKUP;                           \
>      DATA_TYPE ret;                                                  \
> +    uint8_t info =3D glue(trace_mem_build_info_no_se, MEND)(SHIFT, false=
); \
>                                                                      \
> -    ATOMIC_TRACE_RMW;                                               \
> +    ATOMIC_TRACE_RMW_PRE;                                           \
>      ret =3D atomic_##X(haddr, BSWAP(val));                            \
>      ATOMIC_MMU_CLEANUP;                                             \
> +    ATOMIC_TRACE_RMW_POST;                                          \
>      return BSWAP(ret);                                              \
>  }
>
> @@ -319,8 +343,9 @@ ABI_TYPE ATOMIC_NAME(X)(CPUArchState *env, target_ulo=
ng addr,       \
>      ATOMIC_MMU_DECLS;                                               \
>      XDATA_TYPE *haddr =3D ATOMIC_MMU_LOOKUP;                          \
>      XDATA_TYPE ldo, ldn, old, new, val =3D xval;                      \
> +    uint8_t info =3D glue(trace_mem_build_info_no_se, MEND)(SHIFT, false=
); \
>                                                                      \
> -    ATOMIC_TRACE_RMW;                                               \
> +    ATOMIC_TRACE_RMW_PRE;                                           \
>      smp_mb();                                                       \
>      ldn =3D atomic_read__nocheck(haddr);                              \
>      do {                                                            \
> @@ -328,6 +353,7 @@ ABI_TYPE ATOMIC_NAME(X)(CPUArchState *env, target_ulo=
ng addr,       \
>          ldn =3D atomic_cmpxchg__nocheck(haddr, ldo, BSWAP(new));      \
>      } while (ldo !=3D ldn);                                           \
>      ATOMIC_MMU_CLEANUP;                                             \
> +    ATOMIC_TRACE_RMW_POST;                                          \
>      return RET;                                                     \
>  }
>
> @@ -355,10 +381,6 @@ GEN_ATOMIC_HELPER_FN(add_fetch, ADD, DATA_TYPE, new)
>  #undef MEND
>  #endif /* DATA_SIZE > 1 */
>
> -#undef ATOMIC_TRACE_ST
> -#undef ATOMIC_TRACE_LD
> -#undef ATOMIC_TRACE_RMW
> -
>  #undef BSWAP
>  #undef ABI_TYPE
>  #undef DATA_TYPE


--
Alex Benn=C3=A9e

