Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 23 Nov 2018 08:32:26 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 45CEC58037D
	for <like.xu@linux.intel.com>; Thu, 22 Nov 2018 13:48:30 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 22 Nov 2018 13:48:30 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3ACNNAjxNkEh6NiV9IB3cl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0I/rzrarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZQMhRWSxPDICy?=
 =?us-ascii?q?YYQBAOUOP/pXoYbgqVsWrxawBwahCP7hxzNUmHD2xrY30/g4EQzcwAAsA9wDvX?=
 =?us-ascii?q?TSod7oNKkSS+e1zKzQwDjddfRZxC396InUfR85p/+DQ6p/f8vWyUY1CwPKkE+Q?=
 =?us-ascii?q?opHiMjyJ0uQNvHOW7+l6WuKolmErsQZxoiKgxso1jITCm4Ebykjc+Cln3Io4Js?=
 =?us-ascii?q?e0RFNmbdOnCpdcqS+XOotsTs8/QWxkoCI3xqEctZO4eCUG0okryhreZvCdboSE?=
 =?us-ascii?q?/w7vWeCMKjlinn1lYqiwhxOq/Eig1OL8Us603U5OripEidnMqmsN2wbc6siBV/?=
 =?us-ascii?q?tx5ECh2SyA1wzL6+FEJ147lbbDJpI/3rI9lYAfvVneEiL1gkn6kqGbe0U+9uS1?=
 =?us-ascii?q?6enrerDmqYWdN49whAH+KKMumsmnDOQhLAcOWnWb9f2h27L94032XrFKguQtna?=
 =?us-ascii?q?nerZDaI9gUqbCiAwNS1oYj6hW/ACm83NUXgHkKNFZFeBOBj4j0NFDCOvH4DfGj?=
 =?us-ascii?q?g1uylDdn3ezJPrrkApjWKHjDl7Hhfbl7605B0gYzyspf551MBrEbPP3zQlPxtM?=
 =?us-ascii?q?DfDhIhNwy0wuXnB8tn2oIRRGKCGauZMKLUsV+V6eMjOeiMZIkJuDnjL/gp/eLh?=
 =?us-ascii?q?jXg8mQxVQK+ywJFCaGykBu80ZAKdYGHwmZEHFmEFuBd4S/blz1iLUDpWbnD1WL?=
 =?us-ascii?q?og5zY9E8W/AILeA4ygnrGFjxq9BYBcM2VPC1SQFiXxeoCZHvsBdi+WZ9VsiyEJ?=
 =?us-ascii?q?TqSJTYgn2hez8gjgxO18M+DW9yYE4I/lz8V//ObJlBs/pgBzWuiUzWCBB051lH?=
 =?us-ascii?q?gPQXdi0KlhoEBVxVaJyq9+xfBCEsRZ6vpTFAY2c5fBmb9UEdf3DylAcs2IQ2GC?=
 =?us-ascii?q?T+KJBjgtQ8h5l9QKbG5+EtKuyBfZ0Hz5UPcui7WXCclsoern1H/rKpM4ki6e2Q?=
 =?us-ascii?q?=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAADEI/dbhxHrdtBYChwBAQEEAQEHB?=
 =?us-ascii?q?AEBgVEHAQELAYEwKoI4jBFfiyGCDXqDaZJXgWwbGBSBS4J1hBIiNAkNAQMBAQE?=
 =?us-ascii?q?BAQECARMBAQEKCwkIKS+CNgUCAxoBBoJbAQEBAQIBAQIkHwoiBQIDAgEBAgYBA?=
 =?us-ascii?q?QoYHAoIAwE5GgYNBgIBAQGCUUuBeggBAwGpODOFQINPgQ2MCREGgX+BESeCNjW?=
 =?us-ascii?q?EUxUWhGMXYQKJGQaHP48kCZEpBhiBWYULgyOHAYltjkOBRoINTTAIgyeCACQDF?=
 =?us-ascii?q?xJtAQeNFnGBBAOKXoF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0ANAADEI/dbhxHrdtBYChwBAQEEAQEHBAEBgVEHAQELAYE?=
 =?us-ascii?q?wKoI4jBFfiyGCDXqDaZJXgWwbGBSBS4J1hBIiNAkNAQMBAQEBAQECARMBAQEKC?=
 =?us-ascii?q?wkIKS+CNgUCAxoBBoJbAQEBAQIBAQIkHwoiBQIDAgEBAgYBAQoYHAoIAwE5GgY?=
 =?us-ascii?q?NBgIBAQGCUUuBeggBAwGpODOFQINPgQ2MCREGgX+BESeCNjWEUxUWhGMXYQKJG?=
 =?us-ascii?q?QaHP48kCZEpBhiBWYULgyOHAYltjkOBRoINTTAIgyeCACQDFxJtAQeNFnGBBAO?=
 =?us-ascii?q?KXoF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,267,1539673200"; 
   d="scan'208";a="53016745"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 22 Nov 2018 13:48:28 -0800
Received: from localhost ([::1]:49436 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gPwpo-0007Ob-Bb
	for like.xu@linux.intel.com; Thu, 22 Nov 2018 16:48:28 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:54560)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <clg@kaod.org>) id 1gPwpJ-0007Ki-Qt
	for qemu-devel@nongnu.org; Thu, 22 Nov 2018 16:47:59 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <clg@kaod.org>) id 1gPwpF-0000x2-L4
	for qemu-devel@nongnu.org; Thu, 22 Nov 2018 16:47:57 -0500
Received: from 9.mo68.mail-out.ovh.net ([46.105.78.111]:35357)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <clg@kaod.org>) id 1gPwpF-0000uG-A0
	for qemu-devel@nongnu.org; Thu, 22 Nov 2018 16:47:53 -0500
Received: from player791.ha.ovh.net (unknown [10.109.159.222])
	by mo68.mail-out.ovh.net (Postfix) with ESMTP id 425F510631C
	for <qemu-devel@nongnu.org>; Thu, 22 Nov 2018 22:47:51 +0100 (CET)
Received: from kaod.org (lfbn-1-10605-110.w90-89.abo.wanadoo.fr
	[90.89.196.110]) (Authenticated sender: postmaster@kaod.org)
	by player791.ha.ovh.net (Postfix) with ESMTPSA id ECD1081815;
	Thu, 22 Nov 2018 21:47:44 +0000 (UTC)
To: David Gibson <david@gibson.dropbear.id.au>
References: <20181116105729.23240-1-clg@kaod.org>
	<20181116105729.23240-6-clg@kaod.org>
	<20181122044127.GE10448@umbus.fritz.box>
From: =?UTF-8?Q?C=c3=a9dric_Le_Goater?= <clg@kaod.org>
Message-ID: <3095c0b4-ebcd-907b-360d-d5e7cdfd3b7d@kaod.org>
Date: Thu, 22 Nov 2018 22:47:44 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
	Thunderbird/60.3.0
MIME-Version: 1.0
In-Reply-To: <20181122044127.GE10448@umbus.fritz.box>
Content-Type: text/plain; charset=windows-1252
Content-Language: en-US
X-Ovh-Tracer-Id: 2595762237273115505
X-VR-SPAMSTATE: OK
X-VR-SPAMSCORE: -100
X-VR-SPAMCAUSE: gggruggvucftvghtrhhoucdtuddrgedtkedruddtledgudehgecutefuodetggdotefrodftvfcurfhrohhfihhlvgemucfqggfjpdevjffgvefmvefgnecuuegrihhlohhuthemucehtddtnecusecvtfgvtghiphhivghnthhsucdlqddutddtmd
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 46.105.78.111
Subject: Re: [Qemu-devel] [PATCH v5 05/36] ppc/xive: introduce the XIVE
 Event Notification Descriptors
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: qemu-ppc@nongnu.org, qemu-devel@nongnu.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On 11/22/18 5:41 AM, David Gibson wrote:
> On Fri, Nov 16, 2018 at 11:56:58AM +0100, C=E9dric Le Goater wrote:
>> To complete the event routing, the IVRE sub-engine uses an internal
>> table containing Event Notification Descriptor (END) structures.
>>
>> An END specifies on which Event Queue (EQ) the event notification
>> data, defined in the associated EAS, should be posted when an
>> exception occurs. It also defines which Notification Virtual Target
>> (NVT) should be notified.
>>
>> The Event Queue is a memory page provided by the O/S defining a
>> circular buffer, one per server and priority couple, containing Event
>> Queue entries. These are 4 bytes long, the first bit being a
>> 'generation' bit and the 31 following bits the END Data field. They
>> are pulled by the O/S when the exception occurs.
>>
>> The END Data field is a way to set an invariant logical event source
>> number for an IRQ. It is set with the H_INT_SET_SOURCE_CONFIG hcall
>> when the EISN flag is used.
>>
>> Signed-off-by: C=E9dric Le Goater <clg@kaod.org>
>> ---
>>  include/hw/ppc/xive.h      |  18 ++++
>>  include/hw/ppc/xive_regs.h |  48 ++++++++++
>>  hw/intc/xive.c             | 185 ++++++++++++++++++++++++++++++++++++=
-
>>  3 files changed, 248 insertions(+), 3 deletions(-)
>>
>> diff --git a/include/hw/ppc/xive.h b/include/hw/ppc/xive.h
>> index 5a0696366577..ce62aaf28343 100644
>> --- a/include/hw/ppc/xive.h
>> +++ b/include/hw/ppc/xive.h
>> @@ -193,11 +193,29 @@ typedef struct XiveRouterClass {
>>      /* XIVE table accessors */
>>      int (*get_eas)(XiveRouter *xrtr, uint32_t lisn, XiveEAS *eas);
>>      int (*set_eas)(XiveRouter *xrtr, uint32_t lisn, XiveEAS *eas);
>> +    int (*get_end)(XiveRouter *xrtr, uint8_t end_blk, uint32_t end_id=
x,
>> +                   XiveEND *end);
>> +    int (*set_end)(XiveRouter *xrtr, uint8_t end_blk, uint32_t end_id=
x,
>> +                   XiveEND *end);
>=20
> Hrm.  So unlike the EAS, which is basically just a word, the END is a
> pretty large structure. =20

yes. and so will be the NVT.

> It's unclear here if get/set are expected to copy the whole thing out=20
> and in,=20

That's the plan.=20

What I had in mind are memory accessors to the XIVE structures, which=20
are local to QEMU for sPAPR and in the guest RAM for PowerNV (Please
take a look at the XIVE PowerNV model).

> or if get give you a pointer into a "live" structure=20

no

> and set just does any necessary barriers after an update.
that would be too complex for the PowerNV model I think. There is a cache
in between the software running on the (QEMU) machine and the XIVE HW but
it would be hard to handle.=20
=20
> Really, for a non-atomic value like this, I'm not sure get/set is the
> right model.

ok. we need something to get them out and in.

> Also as I understand it nearly all the indices in XIVE are broken into
> block/index.  Is there a reason those are folded together into lisn
> for the EAS, but not for the END?

The indexing of the EAT is global to the sytem and the index defines
which blk to use. The IRQ source numbers on the powerbus are architected=20
to be :

    #define XIVE_SRCNO(blk, idx)      ((uint32_t)(blk) << 28 | (idx))

and XIVE can use different strategies to identify the XIVE IC in charge=20
of routing. It can be a one-to-one chip to block relation as skiboot does=
.=20
Using a block scope table is possible also. Our model only supports one=20
block per chip and some shortcuts are taken but not that much in fact.
=20
Remote access to the XIVE structures of another chip are done through=20
MMIO (not modeled in PowerNV) and the blkid is used to partition the MMIO=
=20
regions. Being local is better for performance because the END and NVT=20
tables have a strong relation with the XIVE subengines using them=20
(VC and PC).=20

May be, Ben can clarified it this is badly explained.=20

>>  } XiveRouterClass;
>> =20
>>  void xive_eas_pic_print_info(XiveEAS *eas, uint32_t lisn, Monitor *mo=
n);
>> =20
>>  int xive_router_get_eas(XiveRouter *xrtr, uint32_t lisn, XiveEAS *eas=
);
>>  int xive_router_set_eas(XiveRouter *xrtr, uint32_t lisn, XiveEAS *eas=
);
>> +int xive_router_get_end(XiveRouter *xrtr, uint8_t end_blk, uint32_t e=
nd_idx,
>> +                        XiveEND *end);
>> +int xive_router_set_end(XiveRouter *xrtr, uint8_t end_blk, uint32_t e=
nd_idx,
>> +                        XiveEND *end);
>> +
>> +/*
>> + * For legacy compatibility, the exceptions define up to 256 differen=
t
>> + * priorities. P9 implements only 9 levels : 8 active levels [0 - 7]
>> + * and the least favored level 0xFF.
>> + */
>> +#define XIVE_PRIORITY_MAX  7
>> +
>> +void xive_end_reset(XiveEND *end);
>> +void xive_end_pic_print_info(XiveEND *end, uint32_t end_idx, Monitor =
*mon);
>> =20
>>  #endif /* PPC_XIVE_H */
>> diff --git a/include/hw/ppc/xive_regs.h b/include/hw/ppc/xive_regs.h
>> index 12499b33614c..f97fb2b90bee 100644
>> --- a/include/hw/ppc/xive_regs.h
>> +++ b/include/hw/ppc/xive_regs.h
>> @@ -28,4 +28,52 @@ typedef struct XiveEAS {
>>  #define EAS_END_DATA    PPC_BITMASK(33, 63)      /* Data written to t=
he END */
>>  } XiveEAS;
>> =20
>> +/* Event Notification Descriptor (END) */
>> +typedef struct XiveEND {
>> +        uint32_t        w0;
>> +#define END_W0_VALID             PPC_BIT32(0) /* "v" bit */
>> +#define END_W0_ENQUEUE           PPC_BIT32(1) /* "q" bit */
>> +#define END_W0_UCOND_NOTIFY      PPC_BIT32(2) /* "n" bit */
>> +#define END_W0_BACKLOG           PPC_BIT32(3) /* "b" bit */
>> +#define END_W0_PRECL_ESC_CTL     PPC_BIT32(4) /* "p" bit */
>> +#define END_W0_ESCALATE_CTL      PPC_BIT32(5) /* "e" bit */
>> +#define END_W0_UNCOND_ESCALATE   PPC_BIT32(6) /* "u" bit - DD2.0 */
>> +#define END_W0_SILENT_ESCALATE   PPC_BIT32(7) /* "s" bit - DD2.0 */
>> +#define END_W0_QSIZE             PPC_BITMASK32(12, 15)
>> +#define END_W0_SW0               PPC_BIT32(16)
>> +#define END_W0_FIRMWARE          END_W0_SW0 /* Owned by FW */
>> +#define END_QSIZE_4K             0
>> +#define END_QSIZE_64K            4
>> +#define END_W0_HWDEP             PPC_BITMASK32(24, 31)
>> +        uint32_t        w1;
>> +#define END_W1_ESn               PPC_BITMASK32(0, 1)
>> +#define END_W1_ESn_P             PPC_BIT32(0)
>> +#define END_W1_ESn_Q             PPC_BIT32(1)
>> +#define END_W1_ESe               PPC_BITMASK32(2, 3)
>> +#define END_W1_ESe_P             PPC_BIT32(2)
>> +#define END_W1_ESe_Q             PPC_BIT32(3)
>> +#define END_W1_GENERATION        PPC_BIT32(9)
>> +#define END_W1_PAGE_OFF          PPC_BITMASK32(10, 31)
>> +        uint32_t        w2;
>> +#define END_W2_MIGRATION_REG     PPC_BITMASK32(0, 3)
>> +#define END_W2_OP_DESC_HI        PPC_BITMASK32(4, 31)
>> +        uint32_t        w3;
>> +#define END_W3_OP_DESC_LO        PPC_BITMASK32(0, 31)
>> +        uint32_t        w4;
>> +#define END_W4_ESC_END_BLOCK     PPC_BITMASK32(4, 7)
>> +#define END_W4_ESC_END_INDEX     PPC_BITMASK32(8, 31)
>> +        uint32_t        w5;
>> +#define END_W5_ESC_END_DATA      PPC_BITMASK32(1, 31)
>> +        uint32_t        w6;
>> +#define END_W6_FORMAT_BIT        PPC_BIT32(8)
>> +#define END_W6_NVT_BLOCK         PPC_BITMASK32(9, 12)
>> +#define END_W6_NVT_INDEX         PPC_BITMASK32(13, 31)
>> +        uint32_t        w7;
>> +#define END_W7_F0_IGNORE         PPC_BIT32(0)
>> +#define END_W7_F0_BLK_GROUPING   PPC_BIT32(1)
>> +#define END_W7_F0_PRIORITY       PPC_BITMASK32(8, 15)
>> +#define END_W7_F1_WAKEZ          PPC_BIT32(0)
>> +#define END_W7_F1_LOG_SERVER_ID  PPC_BITMASK32(1, 31)
>> +} XiveEND;
>> +
>>  #endif /* PPC_XIVE_REGS_H */
>> diff --git a/hw/intc/xive.c b/hw/intc/xive.c
>> index c4c90a25758e..9cb001e7b540 100644
>> --- a/hw/intc/xive.c
>> +++ b/hw/intc/xive.c
>> @@ -442,6 +442,101 @@ static const TypeInfo xive_source_info =3D {
>>      .class_init    =3D xive_source_class_init,
>>  };
>> =20
>> +/*
>> + * XiveEND helpers
>> + */
>> +
>> +void xive_end_reset(XiveEND *end)
>> +{
>> +    memset(end, 0, sizeof(*end));
>> +
>> +    /* switch off the escalation and notification ESBs */
>> +    end->w1 =3D END_W1_ESe_Q | END_W1_ESn_Q;
>=20
> It's not obvious to me what circumstances this would be called under.
> Since the ENDs are in system memory, a memset() seems like an odd
> thing for (virtual) hardware to be doing to it.

It makes sense on sPAPR if one day some OS starts using the END ESBs for=20
further coalescing of the events. None does for now but I have added the=20
model though.=20

>> +}
>> +
>> +static void xive_end_queue_pic_print_info(XiveEND *end, uint32_t widt=
h,
>> +                                          Monitor *mon)
>> +{
>> +    uint64_t qaddr_base =3D (((uint64_t)(end->w2 & 0x0fffffff)) << 32=
) | end->w3;
>> +    uint32_t qsize =3D GETFIELD(END_W0_QSIZE, end->w0);
>> +    uint32_t qindex =3D GETFIELD(END_W1_PAGE_OFF, end->w1);
>> +    uint32_t qentries =3D 1 << (qsize + 10);
>> +    int i;
>> +
>> +    /*
>> +     * print out the [ (qindex - (width - 1)) .. (qindex + 1)] window
>> +     */
>> +    monitor_printf(mon, " [ ");
>> +    qindex =3D (qindex - (width - 1)) & (qentries - 1);
>> +    for (i =3D 0; i < width; i++) {
>> +        uint64_t qaddr =3D qaddr_base + (qindex << 2);
>> +        uint32_t qdata =3D -1;
>> +
>> +        if (dma_memory_read(&address_space_memory, qaddr, &qdata,
>> +                            sizeof(qdata))) {
>> +            qemu_log_mask(LOG_GUEST_ERROR, "XIVE: failed to read EQ @=
0x%"
>> +                          HWADDR_PRIx "\n", qaddr);
>> +            return;
>> +        }
>> +        monitor_printf(mon, "%s%08x ", i =3D=3D width - 1 ? "^" : "",
>> +                       be32_to_cpu(qdata));
>> +        qindex =3D (qindex + 1) & (qentries - 1);
>> +    }
>> +    monitor_printf(mon, "]\n");
>> +}
>> +
>> +void xive_end_pic_print_info(XiveEND *end, uint32_t end_idx, Monitor =
*mon)
>> +{
>> +    uint64_t qaddr_base =3D (((uint64_t)(end->w2 & 0x0fffffff)) << 32=
) | end->w3;
>> +    uint32_t qindex =3D GETFIELD(END_W1_PAGE_OFF, end->w1);
>> +    uint32_t qgen =3D GETFIELD(END_W1_GENERATION, end->w1);
>> +    uint32_t qsize =3D GETFIELD(END_W0_QSIZE, end->w0);
>> +    uint32_t qentries =3D 1 << (qsize + 10);
>> +
>> +    uint32_t nvt =3D GETFIELD(END_W6_NVT_INDEX, end->w6);
>> +    uint8_t priority =3D GETFIELD(END_W7_F0_PRIORITY, end->w7);
>> +
>> +    if (!(end->w0 & END_W0_VALID)) {
>> +        return;
>> +    }
>> +
>> +    monitor_printf(mon, "  %08x %c%c%c%c%c prio:%d nvt:%04x eq:@%08"P=
RIx64
>> +                   "% 6d/%5d ^%d", end_idx,
>> +                   end->w0 & END_W0_VALID ? 'v' : '-',
>> +                   end->w0 & END_W0_ENQUEUE ? 'q' : '-',
>> +                   end->w0 & END_W0_UCOND_NOTIFY ? 'n' : '-',
>> +                   end->w0 & END_W0_BACKLOG ? 'b' : '-',
>> +                   end->w0 & END_W0_ESCALATE_CTL ? 'e' : '-',
>> +                   priority, nvt, qaddr_base, qindex, qentries, qgen)=
;
>> +
>> +    xive_end_queue_pic_print_info(end, 6, mon);
>> +}
>> +
>> +static void xive_end_push(XiveEND *end, uint32_t data)
>=20
> s/push/enqueue/ please, "push" suggests a stack.  (Not to mention that
> "push" and "pull" are used as terms elsewhere in XIVE).

yes. you are right. I will change.

>> +{
>> +    uint64_t qaddr_base =3D (((uint64_t)(end->w2 & 0x0fffffff)) << 32=
) | end->w3;
>> +    uint32_t qsize =3D GETFIELD(END_W0_QSIZE, end->w0);
>> +    uint32_t qindex =3D GETFIELD(END_W1_PAGE_OFF, end->w1);
>> +    uint32_t qgen =3D GETFIELD(END_W1_GENERATION, end->w1);
>> +
>> +    uint64_t qaddr =3D qaddr_base + (qindex << 2);
>> +    uint32_t qdata =3D cpu_to_be32((qgen << 31) | (data & 0x7fffffff)=
);
>> +    uint32_t qentries =3D 1 << (qsize + 10);
>> +
>> +    if (dma_memory_write(&address_space_memory, qaddr, &qdata, sizeof=
(qdata))) {
>> +        qemu_log_mask(LOG_GUEST_ERROR, "XIVE: failed to write END dat=
a @0x%"
>> +                      HWADDR_PRIx "\n", qaddr);
>> +        return;
>> +    }
>> +
>> +    qindex =3D (qindex + 1) & (qentries - 1);
>> +    if (qindex =3D=3D 0) {
>> +        qgen ^=3D 1;
>> +        end->w1 =3D SETFIELD(END_W1_GENERATION, end->w1, qgen);
>> +    }
>> +    end->w1 =3D SETFIELD(END_W1_PAGE_OFF, end->w1, qindex);
>> +}
>> +
>>  /*
>>   * XIVE Router (aka. Virtualization Controller or IVRE)
>>   */
>> @@ -460,6 +555,82 @@ int xive_router_set_eas(XiveRouter *xrtr, uint32_=
t lisn, XiveEAS *eas)
>>      return xrc->set_eas(xrtr, lisn, eas);
>>  }
>> =20
>> +int xive_router_get_end(XiveRouter *xrtr, uint8_t end_blk, uint32_t e=
nd_idx,
>> +                        XiveEND *end)
>> +{
>> +   XiveRouterClass *xrc =3D XIVE_ROUTER_GET_CLASS(xrtr);
>> +
>> +   return xrc->get_end(xrtr, end_blk, end_idx, end);
>> +}
>> +
>> +int xive_router_set_end(XiveRouter *xrtr, uint8_t end_blk, uint32_t e=
nd_idx,
>> +                        XiveEND *end)
>> +{
>> +   XiveRouterClass *xrc =3D XIVE_ROUTER_GET_CLASS(xrtr);
>> +
>> +   return xrc->set_end(xrtr, end_blk, end_idx, end);
>> +}
>> +
>> +/*
>> + * An END trigger can come from an event trigger (IPI or HW) or from
>> + * another chip. We don't model the PowerBus but the END trigger
>> + * message has the same parameters than in the function below.
>> + */
>> +static void xive_router_end_notify(XiveRouter *xrtr, uint8_t end_blk,
>> +                                   uint32_t end_idx, uint32_t end_dat=
a)
>> +{
>> +    XiveEND end;
>> +    uint8_t priority;
>> +    uint8_t format;
>> +
>> +    /* END cache lookup */
>> +    if (xive_router_get_end(xrtr, end_blk, end_idx, &end)) {
>> +        qemu_log_mask(LOG_GUEST_ERROR, "XIVE: No END %x/%x\n", end_bl=
k,
>> +                      end_idx);
>> +        return;
>> +    }
>> +
>> +    if (!(end.w0 & END_W0_VALID)) {
>> +        qemu_log_mask(LOG_GUEST_ERROR, "XIVE: END %x/%x is invalid\n"=
,
>> +                      end_blk, end_idx);
>> +        return;
>> +    }
>> +
>> +    if (end.w0 & END_W0_ENQUEUE) {
>> +        xive_end_push(&end, end_data);
>> +        xive_router_set_end(xrtr, end_blk, end_idx, &end);
>> +    }
>> +
>> +    /*
>> +     * The W7 format depends on the F bit in W6. It defines the type
>> +     * of the notification :
>> +     *
>> +     *   F=3D0 : single or multiple NVT notification
>> +     *   F=3D1 : User level Event-Based Branch (EBB) notification, no
>> +     *         priority
>> +     */
>> +    format =3D GETFIELD(END_W6_FORMAT_BIT, end.w6);
>> +    priority =3D GETFIELD(END_W7_F0_PRIORITY, end.w7);
>> +
>> +    /* The END is masked */
>> +    if (format =3D=3D 0 && priority =3D=3D 0xff) {
>> +        return;
>> +    }
>> +
>> +    /*
>> +     * Check the END ESn (Event State Buffer for notification) for
>> +     * even futher coalescing in the Router
>> +     */
>> +    if (!(end.w0 & END_W0_UCOND_NOTIFY)) {
>> +        qemu_log_mask(LOG_UNIMP, "XIVE: !UCOND_NOTIFY not implemented=
\n");
>> +        return;
>> +    }
>> +
>> +    /*
>> +     * Follows IVPE notification
>> +     */
>> +}
>> +
>>  static void xive_router_notify(XiveFabric *xf, uint32_t lisn)
>>  {
>>      XiveRouter *xrtr =3D XIVE_ROUTER(xf);
>> @@ -471,9 +642,9 @@ static void xive_router_notify(XiveFabric *xf, uin=
t32_t lisn)
>>          return;
>>      }
>> =20
>> -    /* The IVRE has a State Bit Cache for its internal sources which
>> -     * is also involed at this point. We skip the SBC lookup because
>> -     * the state bits of the sources are modeled internally in QEMU.
>> +    /* The IVRE checks the State Bit Cache at this point. We skip the
>> +     * SBC lookup because the state bits of the sources are modeled
>> +     * internally in QEMU.
>=20
> Replacing a comment about something we're not doing with a different
> comment about something we're not doing doesn't seem very useful.
> Maybe fold these together into one patch or the other.

That's me rephrasing. it should be indeed in the previous patch

Thanks,

C.

>>       */
>> =20
>>      if (!(eas.w & EAS_VALID)) {
>> @@ -485,6 +656,14 @@ static void xive_router_notify(XiveFabric *xf, ui=
nt32_t lisn)
>>          /* Notification completed */
>>          return;
>>      }
>> +
>> +    /*
>> +     * The event trigger becomes an END trigger
>> +     */
>> +    xive_router_end_notify(xrtr,
>> +                           GETFIELD(EAS_END_BLOCK, eas.w),
>> +                           GETFIELD(EAS_END_INDEX, eas.w),
>> +                           GETFIELD(EAS_END_DATA,  eas.w));
>>  }
>> =20
>>  static Property xive_router_properties[] =3D {
>=20


