Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  18 Dec 2018 18:08:50 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id C963F5805AD
	for <like.xu@linux.intel.com>; Tue, 18 Dec 2018 00:04:59 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga008-1.jf.intel.com with ESMTP; 18 Dec 2018 00:04:59 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A4zpcOhwBrdL2PpzXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0uoQK/ad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWpPUNhNVyJPAY28?=
 =?us-ascii?q?YYkAD+sdMuhXoIbzukMOoBm8CwSjGe/ixCNEiWHt3aAhz+QhCBvL0BA8E94SrX?=
 =?us-ascii?q?jZqsj+OqcIUeCyyanF1SnOb/VK2Tf67ojDbwgvru+CXb1ubMXRzlcvHB7Cg1qK?=
 =?us-ascii?q?r4zlIzSV1uIXv2id8eVgW/yghHMgqwFvuTWv2MYsipPVhoIIzVDF9CR4wIEvKd?=
 =?us-ascii?q?KkT057ZMepHZ1NvC+ZL4t7Wt0uT31rtSog17EKpJ22cDIUxJkpxxPTceGLfoqQ?=
 =?us-ascii?q?7h7+V+ucIS10iGxrdb6inRq+70etxvHmWsS0yFpKoDRKn9rQun0I0hHc9tSIRe?=
 =?us-ascii?q?Vm8Uqk1juDyR7c5+VBLE07l6fWJIAtz7s+m5cXv0nOGDL9ll/sg6+MbEok//Cl?=
 =?us-ascii?q?6+T5bbXioZ+RL4t0igDlMqQygcyzG+s4Mg4TX2SB/uS8zrLj8VX4QLVMkPI2jr?=
 =?us-ascii?q?HUvI7GKckYvKK1HhJZ34U55xqhATqr0M4UkWQFIV5dfRKIlYnpO1XAIPDiCve/?=
 =?us-ascii?q?hkyhkC51yPDDI73tG4jCIWbdkLj/ebZx8lVTyA0uzdBZ+51bFKoBLPX3Wk/wt9?=
 =?us-ascii?q?zXEAU1MgOpw+v/DNV914UeWX+AA6ODMaPSt0OI6fwrI+WWeIAVvzP9JuMj5/7p?=
 =?us-ascii?q?i385llkdfbSz0ZsQcnC4EexqI1+Fbnr0ntcBDWAKsxI6TOzri12NTyRfZnmvX6?=
 =?us-ascii?q?8n4jE7CYSmDZrMR4y3gbyB2ju7EYNSZmxcFl+MFnLoJM25XewRYneSPtN5iW5D?=
 =?us-ascii?q?ErygUJM6kxepsgD81vxgNOWT/yQZsZfq0p9y//HSkhcpsiV5CtnY32yTQmUno2?=
 =?us-ascii?q?UTWjVj2al+pVB6mE6O1LU9j/FGGNgW/f5QTwohKbbayOp1Dc20XRjOKcyUQlSr?=
 =?us-ascii?q?ScnzHDcqU9gqyMUPaUsuJ9L3xAnO2jfvD7ILmrijApsy/aTBmX/rKIw1n2/L0b?=
 =?us-ascii?q?Rkg1Q4T89nM2qgiahisQ/JCNiavV+ekvODc7gb2mbr+WmOwW2Q9BVRVhJ3V+PD?=
 =?us-ascii?q?UH4SakzIhcr4/F/fSK28DvIsNQ4Xmp3KEbdDdtC81QYOf/zkItmLJjvpw2o=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0C0AAA0qRhchxHrdtBkHgEGBwaBVAYLA?=
 =?us-ascii?q?YEwUIFcBDIKhzkDhS6KUEqUaoZwFAEYFIdeIjcGDQEDAQEBAQEBAgETAQEBCgs?=
 =?us-ascii?q?JCBsOIwELgjYFAgMaAQaCXAMDAQIkGQEBBAopAQIDAQIGAQEBAUYIAwEuJQIEE?=
 =?us-ascii?q?wWDHYIBAQIBAZx7AooTgWwzgnYBAQWCQ4RzCIw/gVc/gRGNcos8hF2RCgcCgiU?=
 =?us-ascii?q?EjyokkVQsiRWQBgIEAgQFAg0BAQWBXIF4MxojgzyCGwkDF4NKilNygQchi2BYA?=
 =?us-ascii?q?YEeAQE?=
X-IPAS-Result: =?us-ascii?q?A0C0AAA0qRhchxHrdtBkHgEGBwaBVAYLAYEwUIFcBDIKhzk?=
 =?us-ascii?q?DhS6KUEqUaoZwFAEYFIdeIjcGDQEDAQEBAQEBAgETAQEBCgsJCBsOIwELgjYFA?=
 =?us-ascii?q?gMaAQaCXAMDAQIkGQEBBAopAQIDAQIGAQEBAUYIAwEuJQIEEwWDHYIBAQIBAZx?=
 =?us-ascii?q?7AooTgWwzgnYBAQWCQ4RzCIw/gVc/gRGNcos8hF2RCgcCgiUEjyokkVQsiRWQB?=
 =?us-ascii?q?gIEAgQFAg0BAQWBXIF4MxojgzyCGwkDF4NKilNygQchi2BYAYEeAQE?=
X-IronPort-AV: E=Sophos;i="5.56,367,1539673200"; 
   d="scan'208";a="57904812"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 18 Dec 2018 00:04:59 -0800
Received: from localhost ([::1]:52394 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gZAN8-0003ls-A3
	for like.xu@linux.intel.com; Tue, 18 Dec 2018 03:04:58 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:47486)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <anton.nefedov@virtuozzo.com>) id 1gZAG8-0006PE-6r
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 02:57:46 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <anton.nefedov@virtuozzo.com>) id 1gZAG4-0003dg-PV
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 02:57:43 -0500
Received: from mail-ve1eur03on071d.outbound.protection.outlook.com
	([2a01:111:f400:fe09::71d]:6167
	helo=EUR03-VE1-obe.outbound.protection.outlook.com)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <anton.nefedov@virtuozzo.com>)
	id 1gZAG4-0003cS-9S; Tue, 18 Dec 2018 02:57:40 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=virtuozzo.com;
	s=selector1;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
	bh=fvc+iED4iWv1ieJRJLBavPDqDVCZcR3e7vVzDa9xwcU=;
	b=LGss9fbNfD6W5coN9p+sZeD710spJL79wYNAg7WYAvfB6Zgig0UKpAZEvbcunreSWIPFORqp/yh4lpvK9+M8Rw2BtZiyLp2E0Mo2WfGbNH4uYXgkwWNjrr69H7p+d1ggVkLQDdN48p30VIHvBSKXRiYVLOcPjK4AcOzH7zRrTd8=
Received: from AM0PR08MB3347.eurprd08.prod.outlook.com (52.134.94.148) by
	AM0PR08MB4419.eurprd08.prod.outlook.com (20.179.34.207) with Microsoft
	SMTP
	Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
	15.20.1425.22; Tue, 18 Dec 2018 07:57:38 +0000
Received: from AM0PR08MB3347.eurprd08.prod.outlook.com
	([fe80::cceb:42e9:4742:393]) by AM0PR08MB3347.eurprd08.prod.outlook.com
	([fe80::cceb:42e9:4742:393%2]) with mapi id 15.20.1425.023;
	Tue, 18 Dec 2018 07:57:38 +0000
From: Anton Nefedov <anton.nefedov@virtuozzo.com>
To: "qemu-devel@nongnu.org" <qemu-devel@nongnu.org>
Thread-Topic: [PATCH v11 05/10] block: treat BDRV_REQ_ALLOCATE as serialising
Thread-Index: AQHUlqdYKh2pii7CQEWDNg94f2O9+A==
Date: Tue, 18 Dec 2018 07:57:38 +0000
Message-ID: <20181218075707.12006-6-anton.nefedov@virtuozzo.com>
References: <20181218075707.12006-1-anton.nefedov@virtuozzo.com>
In-Reply-To: <20181218075707.12006-1-anton.nefedov@virtuozzo.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-clientproxiedby: HE1P191CA0007.EURP191.PROD.OUTLOOK.COM (2603:10a6:3:cf::17)
	To AM0PR08MB3347.eurprd08.prod.outlook.com
	(2603:10a6:208:5f::20)
authentication-results: spf=none (sender IP is )
	smtp.mailfrom=anton.nefedov@virtuozzo.com; 
x-ms-exchange-messagesentrepresentingtype: 1
x-originating-ip: [185.231.240.5]
x-ms-publictraffictype: Email
x-microsoft-exchange-diagnostics: 1; AM0PR08MB4419;
	20:Ln1XpZcOD9Bgv6g+jMGzRe4jrVj6OrzrvxynurRaaCF8QLIrNY+U+40m5PURKG707ZzsoWOA0pqs3nYanNgCOTiKddMyPFhQtGO0uhbpghdr/Yq37FldCnLVuBxzKUj5R5gnsA20NXInNYwTtHxRebvmxgjPgEoOXPai5sXYMFY=
x-ms-office365-filtering-correlation-id: 44b1eeb7-fd1d-48d2-aa62-08d664be7a3e
x-microsoft-antispam: BCL:0; PCL:0;
	RULEID:(2390118)(7020095)(4652040)(8989299)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(5600074)(711020)(2017052603328)(7153060)(7193020);
	SRVR:AM0PR08MB4419; 
x-ms-traffictypediagnostic: AM0PR08MB4419:
x-microsoft-antispam-prvs: <AM0PR08MB441967D87985B71C1CADC5A7F8BD0@AM0PR08MB4419.eurprd08.prod.outlook.com>
x-ms-exchange-senderadcheck: 1
x-exchange-antispam-report-cfa-test: BCL:0; PCL:0;
	RULEID:(3230021)(999002)(6040522)(2401047)(8121501046)(5005006)(93006095)(93001095)(3002001)(10201501046)(3231475)(944501520)(52105112)(148016)(149066)(150057)(6041310)(20161123558120)(20161123560045)(20161123562045)(20161123564045)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(201708071742011)(7699051)(76991095);
	SRVR:AM0PR08MB4419; BCL:0; PCL:0; RULEID:; SRVR:AM0PR08MB4419; 
x-forefront-prvs: 08902E536D
x-forefront-antispam-report: SFV:NSPM;
	SFS:(10019020)(136003)(396003)(39850400004)(346002)(376002)(366004)(199004)(189003)(8676002)(5660300001)(5640700003)(7736002)(8936002)(4326008)(81166006)(81156014)(14454004)(305945005)(53936002)(97736004)(106356001)(2501003)(68736007)(25786009)(2351001)(105586002)(1076003)(478600001)(386003)(6916009)(66066001)(6506007)(486006)(26005)(76176011)(71190400001)(71200400001)(6486002)(102836004)(575784001)(86362001)(186003)(476003)(6512007)(99286004)(3846002)(6116002)(14444005)(54906003)(2906002)(2616005)(256004)(11346002)(52116002)(107886003)(446003)(6436002)(36756003)(44832011)(316002);
	DIR:OUT; SFP:1102; SCL:1; SRVR:AM0PR08MB4419;
	H:AM0PR08MB3347.eurprd08.prod.outlook.com; FPR:; SPF:None;
	LANG:en; PTR:InfoNoRecords; A:1; MX:1; 
x-microsoft-antispam-message-info: fP9rHSM4lVvuPlJZozAR7pOwTN75OE8LdeqtuYnL2FgWfF4FQyN/c5Xex6iDPblgxzZhZ1ubSLJwTj8JIKRfpYDMEpF0HrRmzBSDXA2g9ZJDExSakz4hblv0um1P44xJBo0mG0R5xOnLlNJBT/tZ8+OgOk0QG28Kj98j+CZBefLRZr8/3NZuC9sfqJ1wNgPlYKWXNpts3O+FzIJwMo6Cyz1aj9rGh/oHU1GXZihwoZhN2nDM3Tardn0xBoSSr1GtB/z9VFuvdaSNdaJ7n+LOgjLd0gZ9bTmS6ifuaiW3rHjpsi9+KoPNBQ0sU2KiWB0Z
spamdiagnosticoutput: 1:99
spamdiagnosticmetadata: NSPM
Content-Type: text/plain; charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
X-OriginatorOrg: virtuozzo.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 44b1eeb7-fd1d-48d2-aa62-08d664be7a3e
X-MS-Exchange-CrossTenant-originalarrivaltime: 18 Dec 2018 07:57:38.1369 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: 0bc7f26d-0264-416e-a6fc-8352af79c58f
X-MS-Exchange-Transport-CrossTenantHeadersStamped: AM0PR08MB4419
X-detected-operating-system: by eggs.gnu.org: Windows 7 or 8 [fuzzy]
X-Received-From: 2a01:111:f400:fe09::71d
Subject: [Qemu-devel] [PATCH v11 05/10] block: treat BDRV_REQ_ALLOCATE as
 serialising
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: "kwolf@redhat.com" <kwolf@redhat.com>,
	Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>,
	"berto@igalia.com" <berto@igalia.com>, Denis Lunev <den@virtuozzo.com>,
	"qemu-block@nongnu.org" <qemu-block@nongnu.org>,
	"mreitz@redhat.com" <mreitz@redhat.com>,
	Anton Nefedov <anton.nefedov@virtuozzo.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

The idea is that ALLOCATE requests may overlap with other requests.
Reuse the existing block layer infrastructure for serialising requests.
Use the following approach:
  - mark ALLOCATE also SERIALISING, so subsequent requests to the area wait
  - ALLOCATE request itself must never wait if another request is in flight
    already. Return EAGAIN, let the caller reconsider.

Signed-off-by: Anton Nefedov <anton.nefedov@virtuozzo.com>
---
 include/block/block.h |  3 +++
 block/io.c            | 31 ++++++++++++++++++++++++-------
 2 files changed, 27 insertions(+), 7 deletions(-)

diff --git a/include/block/block.h b/include/block/block.h
index 643d32f4b8..dfc0fc1b8f 100644
--- a/include/block/block.h
+++ b/include/block/block.h
@@ -88,6 +88,9 @@ typedef enum {
      * efficiently allocate the space so it reads as zeroes, or return an =
error.
      * If this flag is set then BDRV_REQ_ZERO_WRITE must also be set.
      * This flag cannot be set together with BDRV_REQ_MAY_UNMAP.
+     * This flag implicitly sets BDRV_REQ_SERIALISING meaning it is protec=
ted
+     * from conflicts with overlapping requests. If such conflict is detec=
ted,
+     * -EAGAIN is returned.
      */
     BDRV_REQ_ALLOCATE           =3D 0x100,
=20
diff --git a/block/io.c b/block/io.c
index 66006a089d..4451714a60 100644
--- a/block/io.c
+++ b/block/io.c
@@ -720,12 +720,13 @@ void bdrv_dec_in_flight(BlockDriverState *bs)
     bdrv_wakeup(bs);
 }
=20
-static bool coroutine_fn wait_serialising_requests(BdrvTrackedRequest *sel=
f)
+static bool coroutine_fn find_or_wait_serialising_requests(
+    BdrvTrackedRequest *self, bool wait)
 {
     BlockDriverState *bs =3D self->bs;
     BdrvTrackedRequest *req;
     bool retry;
-    bool waited =3D false;
+    bool found =3D false;
=20
     if (!atomic_read(&bs->serialising_in_flight)) {
         return false;
@@ -751,11 +752,14 @@ static bool coroutine_fn wait_serialising_requests(Bd=
rvTrackedRequest *self)
                  * will wait for us as soon as it wakes up, then just go o=
n
                  * (instead of producing a deadlock in the former case). *=
/
                 if (!req->waiting_for) {
+                    found =3D true;
+                    if (!wait) {
+                        break;
+                    }
                     self->waiting_for =3D req;
                     qemu_co_queue_wait(&req->wait_queue, &bs->reqs_lock);
                     self->waiting_for =3D NULL;
                     retry =3D true;
-                    waited =3D true;
                     break;
                 }
             }
@@ -763,7 +767,12 @@ static bool coroutine_fn wait_serialising_requests(Bdr=
vTrackedRequest *self)
         qemu_co_mutex_unlock(&bs->reqs_lock);
     } while (retry);
=20
-    return waited;
+    return found;
+}
+
+static bool coroutine_fn wait_serialising_requests(BdrvTrackedRequest *sel=
f)
+{
+    return find_or_wait_serialising_requests(self, true);
 }
=20
 static int bdrv_check_byte_request(BlockDriverState *bs, int64_t offset,
@@ -1585,7 +1594,7 @@ bdrv_co_write_req_prepare(BdrvChild *child, int64_t o=
ffset, uint64_t bytes,
                           BdrvTrackedRequest *req, int flags)
 {
     BlockDriverState *bs =3D child->bs;
-    bool waited;
+    bool found;
     int64_t end_sector =3D DIV_ROUND_UP(offset + bytes, BDRV_SECTOR_SIZE);
=20
     if (bs->read_only) {
@@ -1602,9 +1611,13 @@ bdrv_co_write_req_prepare(BdrvChild *child, int64_t =
offset, uint64_t bytes,
         mark_request_serialising(req, bdrv_get_cluster_size(bs));
     }
=20
-    waited =3D wait_serialising_requests(req);
+    found =3D find_or_wait_serialising_requests(req,
+                                              !(flags & BDRV_REQ_ALLOCATE)=
);
+    if (found && (flags & BDRV_REQ_ALLOCATE)) {
+        return -EAGAIN;
+    }
=20
-    assert(!waited || !req->serialising ||
+    assert(!found || !req->serialising ||
            is_request_serialising_and_aligned(req));
     assert(req->overlap_offset <=3D offset);
     assert(offset + bytes <=3D req->overlap_offset + req->overlap_bytes);
@@ -1864,6 +1877,10 @@ int coroutine_fn bdrv_co_pwritev(BdrvChild *child,
     assert(!((flags & BDRV_REQ_ALLOCATE) && (flags & BDRV_REQ_MAY_UNMAP)))=
;
     assert(!((flags & BDRV_REQ_ALLOCATE) && !(flags & BDRV_REQ_ZERO_WRITE)=
));
=20
+    if (flags & BDRV_REQ_ALLOCATE) {
+        flags |=3D BDRV_REQ_SERIALISING;
+    }
+
     trace_bdrv_co_pwritev(child->bs, offset, bytes, flags);
=20
     if (!bs->drv) {
--=20
2.17.1


