Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  18 Dec 2018 18:08:49 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id D159A5805FC
	for <like.xu@linux.intel.com>; Tue, 18 Dec 2018 00:04:58 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 18 Dec 2018 00:04:58 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AQJQg9BEau6baEEqzHoALQp1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ76p8q7bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJVyJPHJ+8?=
 =?us-ascii?q?YYUMAeoPP+lYrpXyqVQBohWjHQmhBuHhxzBVinL4waE1zf8hHBra3Aw5Bd8CrG?=
 =?us-ascii?q?jYoMnoOKoUTOu7zLPIzTLGb/5OxTr97pTIchcnofqRRbx/b8TRxlcyGAPCkFWb?=
 =?us-ascii?q?tIvoMCmT1uQRtGib6fBsVeSxhG4ptQ5+vz+vxtk3h4nXh4IV0EzE9Th+wIc0JN?=
 =?us-ascii?q?y4T1R3bsKjEJtVriyXMZZ9TMA6Q2xwpio21r4LtYSmcCQXy5kr3QDTZvKHfoSS?=
 =?us-ascii?q?/x7uVv6dLSp7iX9lYr6zmRi//VW6xuHiWcS4zExGoypdntnCqH8A1ADf582CR/?=
 =?us-ascii?q?Rh4kiuxy2A2gXc5+1aP085ka/WJpEjz7M/iJYetErOEyv4lUjwkaSYbF8r+vKy?=
 =?us-ascii?q?5OTierjmpoGTN4tzigzmNqQum9e/AfgjMgQUUGib//m82Kfk/U3jT7VGlvw2kq?=
 =?us-ascii?q?/Hv5DGPckXuLK1DgxP3oo+9hqyDC2q3MoWkHQHNl5JZRCKg5DsO17UIfD4Cfm/?=
 =?us-ascii?q?g06rkDdu3/3GJ6PuApDQLnTajbjuY6h95FBYyAYq1t9f4I9UCrcdL/3tQU/9s9?=
 =?us-ascii?q?jYDh46MwOq2ermB8h925saWWKOBK+ZLazTvUWJ5uIpP+mDeosVtCzhJPgi4v7j?=
 =?us-ascii?q?lnk5mVgbfamm25sXdWq0HvN8I0WWeXbsmMsOEX8WvgoiS+znkFmCUT9QZ3msRa?=
 =?us-ascii?q?496Sw7BZmiDYfCQICtnbOA0D26Hp1QemBJFFSMHW30eIWDXvdfIB+UOdJrxzwY?=
 =?us-ascii?q?SaC6Gchm0RC1qBS8zb1hIezJvCoCutXm3dlx4uTV0hYq6T1zCd/aymyIUiR4k3?=
 =?us-ascii?q?0FQ2wL2rtiqxl4w1aHza8qmvFdCJlf6u1EVkIgOIfBwvdmI9b1XA3HY5GOUlnx?=
 =?us-ascii?q?WcisAzw6UocsxcQTaV12AdSog0P/2H/gGrIQivmHCYI59ora2H7+Ids7zGzJnu?=
 =?us-ascii?q?F1llQjX45DOHOrgoZ58A7cAZOPlF+WwfWEb6MZiQfL6GCFhUyDskxUVxA4BazD?=
 =?us-ascii?q?QXcZIE3bo9n14V3qUb60FakgIBlGj8WFL/0ZOZXSkVxaSaK7a5zlaGWrljL1XE?=
 =?us-ascii?q?7Qyw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ClAAA0qRhchxHrdtBkHgEGBwaBVAYLA?=
 =?us-ascii?q?YEwKiaBXAQyCoc5A4UuilBKm10RARgUh14iNwYNAQMBAQEBAQECARMBAQEKCwk?=
 =?us-ascii?q?IGw4jAQuCNgUCAxoBBoJcAwMBAiQZAQEECikBAgMBAgYBAQEBRggDAS4lAgQTB?=
 =?us-ascii?q?YMdggEBAgEBnHsCihOBbDOCdgEBBYJDhHMIjCIdgVc/gRGNcolFgXeEXZEKBwK?=
 =?us-ascii?q?CJQSIKIcCJIFdiE+HKIlBkAYCBAIEBQINAQEFgVyBeDMaI4M8ghsJAxcSbQECg?=
 =?us-ascii?q?kiKU3KBByGLYFgBgR4BAQ?=
X-IPAS-Result: =?us-ascii?q?A0ClAAA0qRhchxHrdtBkHgEGBwaBVAYLAYEwKiaBXAQyCoc?=
 =?us-ascii?q?5A4UuilBKm10RARgUh14iNwYNAQMBAQEBAQECARMBAQEKCwkIGw4jAQuCNgUCA?=
 =?us-ascii?q?xoBBoJcAwMBAiQZAQEECikBAgMBAgYBAQEBRggDAS4lAgQTBYMdggEBAgEBnHs?=
 =?us-ascii?q?CihOBbDOCdgEBBYJDhHMIjCIdgVc/gRGNcolFgXeEXZEKBwKCJQSIKIcCJIFdi?=
 =?us-ascii?q?E+HKIlBkAYCBAIEBQINAQEFgVyBeDMaI4M8ghsJAxcSbQECgkiKU3KBByGLYFg?=
 =?us-ascii?q?BgR4BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,367,1539673200"; 
   d="scan'208";a="142537986"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 18 Dec 2018 00:04:57 -0800
Received: from localhost ([::1]:52393 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gZAN6-0003jU-VE
	for like.xu@linux.intel.com; Tue, 18 Dec 2018 03:04:57 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:47661)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <anton.nefedov@virtuozzo.com>) id 1gZAGF-0006Wc-Bz
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 02:57:53 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <anton.nefedov@virtuozzo.com>) id 1gZAGC-0003lL-8F
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 02:57:51 -0500
Received: from mail-am5eur02on0700.outbound.protection.outlook.com
	([2a01:111:f400:fe07::700]:56086
	helo=EUR02-AM5-obe.outbound.protection.outlook.com)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <anton.nefedov@virtuozzo.com>)
	id 1gZAGB-0003kG-Qf; Tue, 18 Dec 2018 02:57:48 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=virtuozzo.com;
	s=selector1;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
	bh=bbSZF04cAcNCS/p/EwDshQ27r24O9A1/6DbWlzJPZ3A=;
	b=UEzZKNcuLL8coWhZ91cGpmWBWyVMFThpkbSjvkOBqMQTPlub6SpeFePFXMN1ziAj6Zq9q3SErHZ2To029P4R0Fipc62BLZEVcgveMyR2yYgErtPiOGTsBu3bFhk84CyDgbco7+UvaKQeDehOw34x/wtQ5RK6HcGHzuZOLWW31zY=
Received: from AM0PR08MB3347.eurprd08.prod.outlook.com (52.134.94.148) by
	AM0PR08MB4033.eurprd08.prod.outlook.com (20.178.119.75) with Microsoft
	SMTP
	Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
	15.20.1425.22; Tue, 18 Dec 2018 07:57:45 +0000
Received: from AM0PR08MB3347.eurprd08.prod.outlook.com
	([fe80::cceb:42e9:4742:393]) by AM0PR08MB3347.eurprd08.prod.outlook.com
	([fe80::cceb:42e9:4742:393%2]) with mapi id 15.20.1425.023;
	Tue, 18 Dec 2018 07:57:45 +0000
From: Anton Nefedov <anton.nefedov@virtuozzo.com>
To: "qemu-devel@nongnu.org" <qemu-devel@nongnu.org>
Thread-Topic: [PATCH v11 09/10] qcow2: skip writing zero buffers to empty COW
	areas
Thread-Index: AQHUlqdcC+cG8AXL2ESg1DcXJDCTRA==
Date: Tue, 18 Dec 2018 07:57:45 +0000
Message-ID: <20181218075707.12006-10-anton.nefedov@virtuozzo.com>
References: <20181218075707.12006-1-anton.nefedov@virtuozzo.com>
In-Reply-To: <20181218075707.12006-1-anton.nefedov@virtuozzo.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-clientproxiedby: HE1P191CA0007.EURP191.PROD.OUTLOOK.COM (2603:10a6:3:cf::17)
	To AM0PR08MB3347.eurprd08.prod.outlook.com
	(2603:10a6:208:5f::20)
authentication-results: spf=none (sender IP is )
	smtp.mailfrom=anton.nefedov@virtuozzo.com; 
x-ms-exchange-messagesentrepresentingtype: 1
x-originating-ip: [185.231.240.5]
x-ms-publictraffictype: Email
x-microsoft-exchange-diagnostics: 1; AM0PR08MB4033;
	20:0zjbnNItDlHFJwhAF7rpgrzRoCGlfuq9AWM88S1Bf8OF1HNKBjr+3CQHC3h7M+QLZQV547KRN2EqoM/XA6xPddr03IRytiDQk6Sii5x7A6mBo+xndh48ptGwWtxaz+G4saxnqhh8cr9/mx46nmJMh3Bnx5kKRDg0w0lo2FTWnJg=
x-ms-office365-filtering-correlation-id: 50d46088-9613-4dca-884e-08d664be7ecc
x-microsoft-antispam: BCL:0; PCL:0;
	RULEID:(2390118)(7020095)(4652040)(8989299)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(5600074)(711020)(2017052603328)(7153060)(7193020);
	SRVR:AM0PR08MB4033; 
x-ms-traffictypediagnostic: AM0PR08MB4033:
x-microsoft-antispam-prvs: <AM0PR08MB4033FDD6DD5AD2EA291CE0E3F8BD0@AM0PR08MB4033.eurprd08.prod.outlook.com>
x-ms-exchange-senderadcheck: 1
x-exchange-antispam-report-cfa-test: BCL:0; PCL:0;
	RULEID:(3230021)(999002)(6040522)(2401047)(5005006)(8121501046)(3002001)(10201501046)(93006095)(93001095)(3231475)(944501520)(52105112)(148016)(149066)(150057)(6041310)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123560045)(20161123564045)(20161123562045)(20161123558120)(201708071742011)(7699051)(76991095);
	SRVR:AM0PR08MB4033; BCL:0; PCL:0; RULEID:; SRVR:AM0PR08MB4033; 
x-forefront-prvs: 08902E536D
x-forefront-antispam-report: SFV:NSPM;
	SFS:(10019020)(346002)(396003)(366004)(136003)(376002)(39850400004)(189003)(199004)(14454004)(6436002)(5660300001)(66066001)(52116002)(102836004)(2906002)(54906003)(99286004)(6116002)(316002)(107886003)(6486002)(76176011)(4326008)(6512007)(3846002)(1076003)(478600001)(53936002)(7736002)(68736007)(5640700003)(25786009)(11346002)(26005)(14444005)(486006)(44832011)(186003)(2351001)(2501003)(305945005)(8936002)(105586002)(476003)(81166006)(97736004)(6916009)(106356001)(71190400001)(81156014)(8676002)(71200400001)(386003)(6506007)(86362001)(256004)(446003)(2616005)(36756003)(21314003);
	DIR:OUT; SFP:1102; SCL:1; SRVR:AM0PR08MB4033;
	H:AM0PR08MB3347.eurprd08.prod.outlook.com; FPR:; SPF:None;
	LANG:en; PTR:InfoNoRecords; MX:1; A:1; 
x-microsoft-antispam-message-info: X8qeiBY2XGVja9/8uCGmgv4PDh14y0TfWmm2rO+a1Xy278cJWGd+ZU2NNJdnWEx1AdEePXSJY9LMBPt54O6PCFeoPNQBiKTmDLJ45Msl7JsQlUcw0o0jJ6A1Bb9+09doh75ofVevsL2Qkn6YXPj2QCZI50mJTF6lsrkLNkFy2kFUP0Dy8J/Xj64yJKM0pVu4Ecrnwj+KVSGmDjG7lF7m/E5CjP3drs/saPLJ3FSsnLmZSD8r4SXeWyXqu2nwf94GPOJ+HQiNO5lsk4KljBLaUvYOGHLJz9t+BT1pdQXjHfhLXMAuifFjcjq3BqvFwPHY
spamdiagnosticoutput: 1:99
spamdiagnosticmetadata: NSPM
Content-Type: text/plain; charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
X-OriginatorOrg: virtuozzo.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 50d46088-9613-4dca-884e-08d664be7ecc
X-MS-Exchange-CrossTenant-originalarrivaltime: 18 Dec 2018 07:57:45.6994 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: 0bc7f26d-0264-416e-a6fc-8352af79c58f
X-MS-Exchange-Transport-CrossTenantHeadersStamped: AM0PR08MB4033
X-detected-operating-system: by eggs.gnu.org: Windows 7 or 8 [fuzzy]
X-Received-From: 2a01:111:f400:fe07::700
Subject: [Qemu-devel] [PATCH v11 09/10] qcow2: skip writing zero buffers to
 empty COW areas
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: "kwolf@redhat.com" <kwolf@redhat.com>,
	Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>,
	"berto@igalia.com" <berto@igalia.com>, Denis Lunev <den@virtuozzo.com>,
	"qemu-block@nongnu.org" <qemu-block@nongnu.org>,
	"mreitz@redhat.com" <mreitz@redhat.com>,
	Anton Nefedov <anton.nefedov@virtuozzo.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

If COW areas of the newly allocated clusters are zeroes on the backing imag=
e,
efficient bdrv_write_zeroes(flags=3DBDRV_REQ_ALLOCATE) can be used on the w=
hole
cluster instead of writing explicit zero buffers later in perform_cow().

iotest 060:
write to the discarded cluster does not trigger COW anymore.
Use a backing image instead.

Signed-off-by: Anton Nefedov <anton.nefedov@virtuozzo.com>
---
 qapi/block-core.json       |  4 +-
 block/qcow2.h              |  6 +++
 block/qcow2-cluster.c      |  2 +-
 block/qcow2.c              | 89 +++++++++++++++++++++++++++++++++++++-
 block/trace-events         |  1 +
 tests/qemu-iotests/060     |  7 ++-
 tests/qemu-iotests/060.out |  5 ++-
 7 files changed, 108 insertions(+), 6 deletions(-)

diff --git a/qapi/block-core.json b/qapi/block-core.json
index 762000f31f..204528b3f6 100644
--- a/qapi/block-core.json
+++ b/qapi/block-core.json
@@ -3009,6 +3009,8 @@
 #
 # @cor_write: a write due to copy-on-read (since 2.11)
 #
+# @cluster_alloc_space: an allocation of file space for a cluster (since 4=
.0)
+#
 # Since: 2.9
 ##
 { 'enum': 'BlkdebugEvent', 'prefix': 'BLKDBG',
@@ -3027,7 +3029,7 @@
             'pwritev_rmw_tail', 'pwritev_rmw_after_tail', 'pwritev',
             'pwritev_zero', 'pwritev_done', 'empty_image_prepare',
             'l1_shrink_write_table', 'l1_shrink_free_l2_clusters',
-            'cor_write'] }
+            'cor_write', 'cluster_alloc_space'] }
=20
 ##
 # @BlkdebugInjectErrorOptions:
diff --git a/block/qcow2.h b/block/qcow2.h
index a98d24500b..32d2c04bfa 100644
--- a/block/qcow2.h
+++ b/block/qcow2.h
@@ -386,6 +386,12 @@ typedef struct QCowL2Meta
      */
     Qcow2COWRegion cow_end;
=20
+    /*
+     * Indicates that COW regions are already handled and do not require
+     * any more processing.
+     */
+    bool skip_cow;
+
     /**
      * The I/O vector with the data from the actual guest write request.
      * If non-NULL, this is meant to be merged together with the data
diff --git a/block/qcow2-cluster.c b/block/qcow2-cluster.c
index e2737429f5..23e0702027 100644
--- a/block/qcow2-cluster.c
+++ b/block/qcow2-cluster.c
@@ -806,7 +806,7 @@ static int perform_cow(BlockDriverState *bs, QCowL2Meta=
 *m)
     assert(start->offset + start->nb_bytes <=3D end->offset);
     assert(!m->data_qiov || m->data_qiov->size =3D=3D data_bytes);
=20
-    if (start->nb_bytes =3D=3D 0 && end->nb_bytes =3D=3D 0) {
+    if ((start->nb_bytes =3D=3D 0 && end->nb_bytes =3D=3D 0) || m->skip_co=
w) {
         return 0;
     }
=20
diff --git a/block/qcow2.c b/block/qcow2.c
index 4897abae5e..161b935962 100644
--- a/block/qcow2.c
+++ b/block/qcow2.c
@@ -2021,6 +2021,11 @@ static bool merge_cow(uint64_t offset, unsigned byte=
s,
             continue;
         }
=20
+        /* If COW regions are handled already, skip this too */
+        if (m->skip_cow) {
+            continue;
+        }
+
         /* The data (middle) region must be immediately after the
          * start region */
         if (l2meta_cow_start(m) + m->cow_start.nb_bytes !=3D offset) {
@@ -2046,6 +2051,77 @@ static bool merge_cow(uint64_t offset, unsigned byte=
s,
     return false;
 }
=20
+static bool is_unallocated(BlockDriverState *bs, int64_t offset, int64_t b=
ytes)
+{
+    int64_t nr;
+    return !bytes ||
+        (!bdrv_is_allocated_above(bs, NULL, offset, bytes, &nr) && nr =3D=
=3D bytes);
+}
+
+static bool is_zero_cow(BlockDriverState *bs, QCowL2Meta *m)
+{
+    /*
+     * This check is designed for optimization shortcut so it must be
+     * efficient.
+     * Instead of is_zero(), use is_unallocated() as it is faster (but not
+     * as accurate and can result in false negatives).
+     */
+    return is_unallocated(bs, m->offset + m->cow_start.offset,
+                          m->cow_start.nb_bytes) &&
+           is_unallocated(bs, m->offset + m->cow_end.offset,
+                          m->cow_end.nb_bytes);
+}
+
+static int handle_alloc_space(BlockDriverState *bs, QCowL2Meta *l2meta)
+{
+    BDRVQcow2State *s =3D bs->opaque;
+    QCowL2Meta *m;
+
+    if (!(bs->file->bs->supported_zero_flags & BDRV_REQ_ALLOCATE)) {
+        return 0;
+    }
+
+    if (bs->encrypted) {
+        return 0;
+    }
+
+    for (m =3D l2meta; m !=3D NULL; m =3D m->next) {
+        int ret;
+
+        if (!m->cow_start.nb_bytes && !m->cow_end.nb_bytes) {
+            continue;
+        }
+
+        if (!is_zero_cow(bs, m)) {
+            continue;
+        }
+
+        /*
+         * Conventional place for qcow2_pre_write_overlap_check() but in t=
his
+         * case it is already done for these clusters
+         */
+
+        BLKDBG_EVENT(bs->file, BLKDBG_CLUSTER_ALLOC_SPACE);
+        /*
+         * instead of writing zero COW buffers,
+         * efficiently zero out the whole clusters
+         */
+        ret =3D bdrv_co_pwrite_zeroes(bs->file, m->alloc_offset,
+                                    m->nb_clusters * s->cluster_size,
+                                    BDRV_REQ_ALLOCATE);
+        if (ret < 0) {
+            if (ret !=3D -ENOTSUP && ret !=3D -EAGAIN) {
+                return ret;
+            }
+            continue;
+        }
+
+        trace_qcow2_skip_cow(qemu_coroutine_self(), m->offset, m->nb_clust=
ers);
+        m->skip_cow =3D true;
+    }
+    return 0;
+}
+
 static coroutine_fn int qcow2_co_pwritev(BlockDriverState *bs, uint64_t of=
fset,
                                          uint64_t bytes, QEMUIOVector *qio=
v,
                                          int flags)
@@ -2126,24 +2202,33 @@ static coroutine_fn int qcow2_co_pwritev(BlockDrive=
rState *bs, uint64_t offset,
             goto fail;
         }
=20
+        qemu_co_mutex_unlock(&s->lock);
+
+        ret =3D handle_alloc_space(bs, l2meta);
+        if (ret < 0) {
+            qemu_co_mutex_lock(&s->lock);
+            goto fail;
+        }
+
         /* If we need to do COW, check if it's possible to merge the
          * writing of the guest data together with that of the COW regions=
.
          * If it's not possible (or not necessary) then write the
          * guest data now. */
         if (!merge_cow(offset, cur_bytes, &hd_qiov, l2meta)) {
-            qemu_co_mutex_unlock(&s->lock);
             BLKDBG_EVENT(bs->file, BLKDBG_WRITE_AIO);
             trace_qcow2_writev_data(qemu_coroutine_self(),
                                     cluster_offset + offset_in_cluster);
             ret =3D bdrv_co_pwritev(bs->file,
                                   cluster_offset + offset_in_cluster,
                                   cur_bytes, &hd_qiov, 0);
-            qemu_co_mutex_lock(&s->lock);
             if (ret < 0) {
+                qemu_co_mutex_lock(&s->lock);
                 goto fail;
             }
         }
=20
+        qemu_co_mutex_lock(&s->lock);
+
         ret =3D qcow2_handle_l2meta(bs, &l2meta, true);
         if (ret) {
             goto fail;
diff --git a/block/trace-events b/block/trace-events
index 3e8c47bb24..f3f6d66dcc 100644
--- a/block/trace-events
+++ b/block/trace-events
@@ -69,6 +69,7 @@ qcow2_writev_done_part(void *co, int cur_bytes) "co %p cu=
r_bytes %d"
 qcow2_writev_data(void *co, uint64_t offset) "co %p offset 0x%" PRIx64
 qcow2_pwrite_zeroes_start_req(void *co, int64_t offset, int count) "co %p =
offset 0x%" PRIx64 " count %d"
 qcow2_pwrite_zeroes(void *co, int64_t offset, int count) "co %p offset 0x%=
" PRIx64 " count %d"
+qcow2_skip_cow(void *co, uint64_t offset, int nb_clusters) "co %p offset 0=
x%" PRIx64 " nb_clusters %d"
=20
 # block/qcow2-cluster.c
 qcow2_alloc_clusters_offset(void *co, uint64_t offset, int bytes) "co %p o=
ffset 0x%" PRIx64 " bytes %d"
diff --git a/tests/qemu-iotests/060 b/tests/qemu-iotests/060
index af0588ae9a..163fb075ea 100755
--- a/tests/qemu-iotests/060
+++ b/tests/qemu-iotests/060
@@ -150,10 +150,15 @@ $QEMU_IO -c "$OPEN_RO" -c "read -P 1 0 512" | _filter=
_qemu_io
 echo
 echo "=3D=3D=3D Testing overlap while COW is in flight =3D=3D=3D"
 echo
+BACKING_IMG=3D$TEST_IMG.base
+TEST_IMG=3D$BACKING_IMG _make_test_img 1G
+
+$QEMU_IO -c 'write 0k 64k' "$BACKING_IMG" | _filter_qemu_io
+
 # compat=3D0.10 is required in order to make the following discard actuall=
y
 # unallocate the sector rather than make it a zero sector - we want COW, a=
fter
 # all.
-IMGOPTS=3D'compat=3D0.10' _make_test_img 1G
+IMGOPTS=3D'compat=3D0.10' _make_test_img -b "$BACKING_IMG" 1G
 # Write two clusters, the second one enforces creation of an L2 table afte=
r
 # the first data cluster.
 $QEMU_IO -c 'write 0k 64k' -c 'write 512M 64k' "$TEST_IMG" | _filter_qemu_=
io
diff --git a/tests/qemu-iotests/060.out b/tests/qemu-iotests/060.out
index d67c6234a4..1d582d4b36 100644
--- a/tests/qemu-iotests/060.out
+++ b/tests/qemu-iotests/060.out
@@ -97,7 +97,10 @@ read 512/512 bytes at offset 0
=20
 =3D=3D=3D Testing overlap while COW is in flight =3D=3D=3D
=20
-Formatting 'TEST_DIR/t.IMGFMT', fmt=3DIMGFMT size=3D1073741824
+Formatting 'TEST_DIR/t.IMGFMT.base', fmt=3DIMGFMT size=3D1073741824
+wrote 65536/65536 bytes at offset 0
+64 KiB, X ops; XX:XX:XX.X (XXX YYY/sec and XXX ops/sec)
+Formatting 'TEST_DIR/t.IMGFMT', fmt=3DIMGFMT size=3D1073741824 backing_fil=
e=3DTEST_DIR/t.IMGFMT.base
 wrote 65536/65536 bytes at offset 0
 64 KiB, X ops; XX:XX:XX.X (XXX YYY/sec and XXX ops/sec)
 wrote 65536/65536 bytes at offset 536870912
--=20
2.17.1


