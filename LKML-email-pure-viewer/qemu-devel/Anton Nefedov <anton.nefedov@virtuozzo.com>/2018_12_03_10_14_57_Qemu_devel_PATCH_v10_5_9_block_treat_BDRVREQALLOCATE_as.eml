Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 03 Dec 2018 20:24:53 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 88663580224
	for <like.xu@linux.intel.com>; Mon,  3 Dec 2018 02:18:50 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga006-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 03 Dec 2018 02:18:50 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AInieDRT8yRihIPldtpGsYRzAx9psv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa67ZBKEt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZAo2y?=
 =?us-ascii?q?cZcPAeQCM+ZWrYb9pkcBoxSxCgexHOPiyD1Gi3Dr0aA0z+guDxrG0Rc8H9IXqn?=
 =?us-ascii?q?nYsMn5OLsPXe2z0aLGzS/Db/RT2Trl9IXIdAwhofaKXbltacTe10cvGB3YgVWX?=
 =?us-ascii?q?t4zuIjSY2f4Ls2iH6OpgU/iji2g5pAF/vDeg28AsipfSi4ILy1DE7zl5wJsyJd?=
 =?us-ascii?q?y5SU97ZsSoH4dXtyGfLoZ7RN4pTWJwuCsi1LEKpZ22cDIXxJg6xBPTceKLfoaI?=
 =?us-ascii?q?7x75SeqcIy90iG9mdb+/nRq+70atxvDmWsWq31tGsjBJn9nUunADyRPe6dSLR/?=
 =?us-ascii?q?5480i7xTqAzB3c5+RZLk8pj6XWJJsszaM0m5UNvknOGzL6l1jqgKOLcEgv5/Km?=
 =?us-ascii?q?5P79Yrr8o5+RL490hR/6MqQpgsG/BeU4MhMSX2iA4+i827vj/VDjTLVNlP02nb?=
 =?us-ascii?q?HVsJHcJcsFuq60GxFZ3pog5hqlEjuqzdcVkWMZIF9LeB+LlZXlNlPWLPD9F/i/?=
 =?us-ascii?q?glCskDlxx/DBO73sGozNIWbGkLf8ZLpy9lBTyBQtwtBb/p5bEbYBIO/1WkDtqt?=
 =?us-ascii?q?PYFRg1Mwi1w+bkFtpxzIwfWX+XD6+dMaPSt0KI5+01L+mNYo8VpCjyK/w/6/Hy?=
 =?us-ascii?q?in85nEQQfa+u3ZsRZ3C4GOlmL1+eYXr2jdcNCX0KsRYmTOz2lF2CViZeZ3KzX6?=
 =?us-ascii?q?I/+D43Eo2nDZrYS4CpgbyB2jq7H5JMamBHDFCMDWnnd4GeV/gQbyKSJ5wprzof?=
 =?us-ascii?q?SLL0S5M9zQr880j+yqF7NazS/SsXs4+l08J6oOjalBU3/DozCNyB0maLVCZtk2?=
 =?us-ascii?q?YVAjM7wq178nF70UqJhK1xgvhEEo5K6vZUFws3K5PYivZ3Es3/QR7peNCPR1C7?=
 =?us-ascii?q?BNK8DmYqU9gzztQSNlt7AMiolRvZ3iCnUIMSwvaSCZkpt67RwXX1D8B6zXnAye?=
 =?us-ascii?q?8mlVZsCp9WOGi7w6Jy6QXXL4jOlUqfiuCtb6tKjwDX82LW5GySu0cQdgN+XKnC?=
 =?us-ascii?q?QzhLb03KqtK/4E7MQrOpF5w5MxFd1MmQOKwMYdrs2wYVDMz/McjTNjri01y7Ag?=
 =?us-ascii?q?yFk/bVNNLn?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BwAABoAgVchxHrdtBiHgEGBwaBUwcLA?=
 =?us-ascii?q?YEwUIFcBDIKhzYDhS2KYJUmhHmBcxMBGBSIAyI2Bw0BAwEBAQEBAQIBEwEBAQo?=
 =?us-ascii?q?LCQgbDiMBC4I2BQIDGgEGglwDAwECJBkBAQQKKQECAwECBgEBAQFGCAMBLiUCB?=
 =?us-ascii?q?BMFgxyCAgECAQGZcQKKB4FsM4J2AQEFgkOEVgiMHIFXP4ERjW6LIYRUkE0HAoI?=
 =?us-ascii?q?fBI8OI5EmLIhYj0ICBAIEBQINAQEFgU0GggAzGiODPIIbCQMXg0qKU3KBByGIV?=
 =?us-ascii?q?FgBgR4BAQ?=
X-IPAS-Result: =?us-ascii?q?A0BwAABoAgVchxHrdtBiHgEGBwaBUwcLAYEwUIFcBDIKhzY?=
 =?us-ascii?q?DhS2KYJUmhHmBcxMBGBSIAyI2Bw0BAwEBAQEBAQIBEwEBAQoLCQgbDiMBC4I2B?=
 =?us-ascii?q?QIDGgEGglwDAwECJBkBAQQKKQECAwECBgEBAQFGCAMBLiUCBBMFgxyCAgECAQG?=
 =?us-ascii?q?ZcQKKB4FsM4J2AQEFgkOEVgiMHIFXP4ERjW6LIYRUkE0HAoIfBI8OI5EmLIhYj?=
 =?us-ascii?q?0ICBAIEBQINAQEFgU0GggAzGiODPIIbCQMXg0qKU3KBByGIVFgBgR4BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,310,1539673200"; 
   d="scan'208";a="53563638"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 03 Dec 2018 02:18:49 -0800
Received: from localhost ([::1]:47764 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gTlJQ-0004sm-42
	for like.xu@linux.intel.com; Mon, 03 Dec 2018 05:18:48 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:39206)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <anton.nefedov@virtuozzo.com>) id 1gTlFr-0002IR-VE
	for qemu-devel@nongnu.org; Mon, 03 Dec 2018 05:15:13 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <anton.nefedov@virtuozzo.com>) id 1gTlFo-0004vt-2C
	for qemu-devel@nongnu.org; Mon, 03 Dec 2018 05:15:07 -0500
Received: from mail-eopbgr00107.outbound.protection.outlook.com
	([40.107.0.107]:40233
	helo=EUR02-AM5-obe.outbound.protection.outlook.com)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <anton.nefedov@virtuozzo.com>)
	id 1gTlFm-0004r0-8g; Mon, 03 Dec 2018 05:15:03 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=virtuozzo.com;
	s=selector1;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
	bh=ebkufZL8nsXIr6VCfve1CswnbbTplJl2MbGrAMSfGcE=;
	b=SvvmR70QKRPzXz7/El3B0UYJVjqif+xO33WmVYdnfQbcPMBg6SMPyrXdEsWcIX6itIwtWjiM/leKWlXFuyyyPXRgnhgrVFZ8cN3YaQJNhuVfkZ+Kq4KAr2KUyLpekhLGiWSXNsArGdL0uq2s6aN3sJq/d5UCy9srrMW61LyvzTs=
Received: from AM0PR08MB3347.eurprd08.prod.outlook.com (52.134.94.148) by
	AM0PR08MB3875.eurprd08.prod.outlook.com (20.178.82.87) with Microsoft
	SMTP
	Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
	15.20.1382.22; Mon, 3 Dec 2018 10:14:57 +0000
Received: from AM0PR08MB3347.eurprd08.prod.outlook.com
	([fe80::a0bd:dda4:d9e4:1d01]) by
	AM0PR08MB3347.eurprd08.prod.outlook.com
	([fe80::a0bd:dda4:d9e4:1d01%2]) with mapi id 15.20.1382.020;
	Mon, 3 Dec 2018 10:14:57 +0000
From: Anton Nefedov <anton.nefedov@virtuozzo.com>
To: "qemu-devel@nongnu.org" <qemu-devel@nongnu.org>
Thread-Topic: [PATCH v10 5/9] block: treat BDRV_REQ_ALLOCATE as serialising
Thread-Index: AQHUivEKfLKyjUuzakO7xI+sP/yunQ==
Date: Mon, 3 Dec 2018 10:14:57 +0000
Message-ID: <20181203101429.88735-6-anton.nefedov@virtuozzo.com>
References: <20181203101429.88735-1-anton.nefedov@virtuozzo.com>
In-Reply-To: <20181203101429.88735-1-anton.nefedov@virtuozzo.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-clientproxiedby: HE1PR0301CA0004.eurprd03.prod.outlook.com
	(2603:10a6:3:76::14) To AM0PR08MB3347.eurprd08.prod.outlook.com
	(2603:10a6:208:5f::20)
authentication-results: spf=none (sender IP is )
	smtp.mailfrom=anton.nefedov@virtuozzo.com; 
x-ms-exchange-messagesentrepresentingtype: 1
x-originating-ip: [185.231.240.5]
x-ms-publictraffictype: Email
x-microsoft-exchange-diagnostics: 1; AM0PR08MB3875;
	20:cV3K+Fp7ZWc8DtDBSs3SaeCCE/IT0RLB8KAwBtVwcN79mEKpnedQi8/TrBuU41wRkIS6/GlvzfCt3biWQulptVjCo81SdVapE/x3TAf1H1kLkqRAK846D5kenFR5vx7vTEmIRvPrGOZn6zVq3A1m3QnGnGumRPsSTzkAZuYdYEo=
x-ms-office365-filtering-correlation-id: ccbe3199-711c-428c-ead5-08d659082ce5
x-microsoft-antispam: BCL:0; PCL:0;
	RULEID:(2390098)(7020095)(4652040)(8989299)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(5600074)(711020)(2017052603328)(7153060)(7193020);
	SRVR:AM0PR08MB3875; 
x-ms-traffictypediagnostic: AM0PR08MB3875:
x-microsoft-antispam-prvs: <AM0PR08MB3875B65C4637B922B1CD8A4CF8AE0@AM0PR08MB3875.eurprd08.prod.outlook.com>
x-ms-exchange-senderadcheck: 1
x-exchange-antispam-report-cfa-test: BCL:0; PCL:0;
	RULEID:(6040522)(2401047)(8121501046)(5005006)(93006095)(93001095)(3231455)(999002)(944501493)(52105112)(3002001)(10201501046)(148016)(149066)(150057)(6041310)(20161123558120)(20161123562045)(20161123560045)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123564045)(201708071742011)(7699051)(76991095);
	SRVR:AM0PR08MB3875; BCL:0; PCL:0; RULEID:; SRVR:AM0PR08MB3875; 
x-forefront-prvs: 08756AC3C8
x-forefront-antispam-report: SFV:NSPM;
	SFS:(10019020)(39840400004)(376002)(136003)(396003)(346002)(366004)(199004)(189003)(305945005)(5660300001)(7736002)(106356001)(68736007)(2906002)(105586002)(256004)(14444005)(6436002)(2351001)(6486002)(71190400001)(71200400001)(6116002)(3846002)(4326008)(36756003)(6506007)(186003)(476003)(25786009)(102836004)(2616005)(478600001)(76176011)(14454004)(486006)(53936002)(86362001)(44832011)(99286004)(5640700003)(26005)(107886003)(6512007)(386003)(66066001)(316002)(8676002)(54906003)(11346002)(446003)(81166006)(81156014)(8936002)(2501003)(6916009)(52116002)(97736004)(1076002);
	DIR:OUT; SFP:1102; SCL:1; SRVR:AM0PR08MB3875;
	H:AM0PR08MB3347.eurprd08.prod.outlook.com; FPR:; SPF:None;
	LANG:en; PTR:InfoNoRecords; A:1; MX:1; 
x-microsoft-antispam-message-info: okRCfTFMQnO2wPGZHfeB7V5x26IFscTccwUYycj14mVUYxXOR6kgEvRPNksqb7U3QInagUrCE0QJs5D6b64iANbZYtHYsTYidPf3LvZFzA5a78+/IuSilglMX6eSY4biuuMQKU0/9bcXmLV2ri7QONsG2cEO4/zxwTa9U3W0YiXz66dD1NeCscWf2Q1+fVjO4Tp2q1gyz+Mxy+BwEQoWB9wwMOqkaxAorp5bcPyt3ZtToWugMhGc5cL4GJiqa1cnZeuorn2iwCDLqQDEzyyPOQlDSkZHP7u8sAky4GRt1o3C7KAtVzFVI9zVvmnxifFAfOq0XMihfZnw7xis1SSl+qcIDlElrvaZGh6HNYduQF8=
spamdiagnosticoutput: 1:99
spamdiagnosticmetadata: NSPM
Content-Type: text/plain; charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
X-OriginatorOrg: virtuozzo.com
X-MS-Exchange-CrossTenant-Network-Message-Id: ccbe3199-711c-428c-ead5-08d659082ce5
X-MS-Exchange-CrossTenant-originalarrivaltime: 03 Dec 2018 10:14:57.1552 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: 0bc7f26d-0264-416e-a6fc-8352af79c58f
X-MS-Exchange-Transport-CrossTenantHeadersStamped: AM0PR08MB3875
X-detected-operating-system: by eggs.gnu.org: Windows 7 or 8 [fuzzy]
X-Received-From: 40.107.0.107
Subject: [Qemu-devel] [PATCH v10 5/9] block: treat BDRV_REQ_ALLOCATE as
 serialising
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: "kwolf@redhat.com" <kwolf@redhat.com>,
	Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>,
	"berto@igalia.com" <berto@igalia.com>, Denis Lunev <den@virtuozzo.com>,
	"qemu-block@nongnu.org" <qemu-block@nongnu.org>,
	"mreitz@redhat.com" <mreitz@redhat.com>,
	Anton Nefedov <anton.nefedov@virtuozzo.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

The idea is that ALLOCATE requests may overlap with other requests.
Reuse the existing block layer infrastructure for serialising requests.
Use the following approach:
  - mark ALLOCATE also SERIALISING, so subsequent requests to the area wait
  - ALLOCATE request itself must never wait if another request is in flight
    already. Return EAGAIN, let the caller reconsider.

Signed-off-by: Anton Nefedov <anton.nefedov@virtuozzo.com>
---
 block/io.c | 31 ++++++++++++++++++++++++-------
 1 file changed, 24 insertions(+), 7 deletions(-)

diff --git a/block/io.c b/block/io.c
index d9d7644858..6ff946f63d 100644
--- a/block/io.c
+++ b/block/io.c
@@ -720,12 +720,13 @@ void bdrv_dec_in_flight(BlockDriverState *bs)
     bdrv_wakeup(bs);
 }
=20
-static bool coroutine_fn wait_serialising_requests(BdrvTrackedRequest *sel=
f)
+static bool coroutine_fn find_or_wait_serialising_requests(
+    BdrvTrackedRequest *self, bool wait)
 {
     BlockDriverState *bs =3D self->bs;
     BdrvTrackedRequest *req;
     bool retry;
-    bool waited =3D false;
+    bool found =3D false;
=20
     if (!atomic_read(&bs->serialising_in_flight)) {
         return false;
@@ -751,11 +752,14 @@ static bool coroutine_fn wait_serialising_requests(Bd=
rvTrackedRequest *self)
                  * will wait for us as soon as it wakes up, then just go o=
n
                  * (instead of producing a deadlock in the former case). *=
/
                 if (!req->waiting_for) {
+                    found =3D true;
+                    if (!wait) {
+                        break;
+                    }
                     self->waiting_for =3D req;
                     qemu_co_queue_wait(&req->wait_queue, &bs->reqs_lock);
                     self->waiting_for =3D NULL;
                     retry =3D true;
-                    waited =3D true;
                     break;
                 }
             }
@@ -763,7 +767,12 @@ static bool coroutine_fn wait_serialising_requests(Bdr=
vTrackedRequest *self)
         qemu_co_mutex_unlock(&bs->reqs_lock);
     } while (retry);
=20
-    return waited;
+    return found;
+}
+
+static bool coroutine_fn wait_serialising_requests(BdrvTrackedRequest *sel=
f)
+{
+    return find_or_wait_serialising_requests(self, true);
 }
=20
 static int bdrv_check_byte_request(BlockDriverState *bs, int64_t offset,
@@ -1585,7 +1594,7 @@ bdrv_co_write_req_prepare(BdrvChild *child, int64_t o=
ffset, uint64_t bytes,
                           BdrvTrackedRequest *req, int flags)
 {
     BlockDriverState *bs =3D child->bs;
-    bool waited;
+    bool found;
     int64_t end_sector =3D DIV_ROUND_UP(offset + bytes, BDRV_SECTOR_SIZE);
=20
     if (bs->read_only) {
@@ -1602,9 +1611,13 @@ bdrv_co_write_req_prepare(BdrvChild *child, int64_t =
offset, uint64_t bytes,
         mark_request_serialising(req, bdrv_get_cluster_size(bs));
     }
=20
-    waited =3D wait_serialising_requests(req);
+    found =3D find_or_wait_serialising_requests(req,
+                                              !(flags & BDRV_REQ_ALLOCATE)=
);
+    if (found && (flags & BDRV_REQ_ALLOCATE)) {
+        return -EAGAIN;
+    }
=20
-    assert(!waited || !req->serialising ||
+    assert(!found || !req->serialising ||
            is_request_serialising_and_aligned(req));
     assert(req->overlap_offset <=3D offset);
     assert(offset + bytes <=3D req->overlap_offset + req->overlap_bytes);
@@ -1866,6 +1879,10 @@ int coroutine_fn bdrv_co_pwritev(BdrvChild *child,
     assert(!((flags & BDRV_REQ_ALLOCATE) && (flags & BDRV_REQ_MAY_UNMAP)))=
;
     assert(!((flags & BDRV_REQ_ALLOCATE) && !(flags & BDRV_REQ_ZERO_WRITE)=
));
=20
+    if (flags & BDRV_REQ_ALLOCATE) {
+        flags |=3D BDRV_REQ_SERIALISING;
+    }
+
     trace_bdrv_co_pwritev(child->bs, offset, bytes, flags);
=20
     if (!bs->drv) {
--=20
2.17.1


