Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 03 Dec 2018 20:24:45 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 0A8E3580117
	for <like.xu@linux.intel.com>; Mon,  3 Dec 2018 02:15:43 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by fmsmga006-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 03 Dec 2018 02:15:42 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AXRIg0hFzRf8WMLxCCDpTSZ1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ76p8q5bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJVyJPHJ+8?=
 =?us-ascii?q?YYUMAeoPP+lYrpXyqVQBohWjHQmhBuHhxzBVinL4waE1zf8hHBra3Aw5Bd8CrG?=
 =?us-ascii?q?jYoMnoOKoUTOu7zLPIzTLGb/5OxTr97pTIchcnofqRRbx/b8TRxlcyGAPCkFWb?=
 =?us-ascii?q?tIvoMCmT1uQRtGib6fBsVeSxhG4ptQ5+vz+vxtk3h4nXh4IV0EzE9Th+wIc0JN?=
 =?us-ascii?q?y4T1R3bsKjEJtVriyXMZZ9TMA6Q2xwpio21r4LtYSmcCQXy5kr3QDTZvKHfoSS?=
 =?us-ascii?q?/x7uVv6dLSp7iX9lYr6zmRi//VW6xuHiWcS4zExGoypdntnCqH8A1ADf582CR/?=
 =?us-ascii?q?Rn4kuuwiuA2gXO5e5ZO085mq/WJIMlz7EumZcetFnPETLqlEnriqKda18q9fKy?=
 =?us-ascii?q?6+v9Z7Xrvp+cOJFwigH5Kqkuns2/Af8kMggVRWSb9uK81KD58U3+WrVKgeU6kq?=
 =?us-ascii?q?jfsJ/EOcQWvrC1DxNW34o59hqzEjSr3M4GkXQJLF9JYg+LgorxN1HLOv/4DPO/?=
 =?us-ascii?q?g1q2kDdswvDLJqThDYvILnjeibvuYKhy61BCxwo31NxQ/JVUCqwHIP3vREDxr9?=
 =?us-ascii?q?vUDhs4Mwy33enrEtp81p4GVGKLA6+ZNr7SsFCS6uIuJemMeJEauDLnJ/c54P7u?=
 =?us-ascii?q?iGQ0mVkafamv0psXbm24Eu5hI0WDbnrgms0BHnsSvgoiUOzqj0WPUTpSZ3axQa?=
 =?us-ascii?q?0w/D46CJ+9AIfHR4CthqGB3SihEp1XYGBGFk6DEXPye4qYXPcMbXHaH8l6jzZR?=
 =?us-ascii?q?VaS9U5RzklaqtRTm0PxhKezb/DBesojsk9185unWnBd18iRoDsObyCaUQmRp22?=
 =?us-ascii?q?8FWTIyj515ulF3n1KK0KxkhK5BGNlOov9ETAo+cITR1vF3EMzaXAXHcdGUDlG8?=
 =?us-ascii?q?TYK9HDszQ9ktlsIIeFt3AN64jxrOjBatVvUMmrmWQZA57K/Y9372Icl71jDBzq?=
 =?us-ascii?q?Zrxw0/T85ScGGrmKN73w7UAYHPjgOejan8JooG2yuY3WGfymzGmkxWXQJ3T+2R?=
 =?us-ascii?q?VHYDYU2Qq9n360/FUZewCK47LwxT28nEIaxPPI66xW5aTevubYyNK1m6nH29UF?=
 =?us-ascii?q?PRnuuB?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0CKAAAmAQVchxHrdtBiHQEBBQEHBQGBV?=
 =?us-ascii?q?AUBCwGBMComgVwEMgqHNgOFLYpgnBUQARgUiAMiNwYNAQMBAQEBAQECARMBAQE?=
 =?us-ascii?q?KCwkIGw4jAQuCNgUCAxoBBoJcAwMBAiQZAQEECikBAgMBAgYBAQEBRggDAS4lA?=
 =?us-ascii?q?gQTBYMcggIBAgEBmW8CigeBbDOCdgEBBYJDhFYIi38dgVc/gRGNbokvgXKEVJB?=
 =?us-ascii?q?NBwKCHwSID4Z/I4FbiDaHFYkEj0ICBAIEBQINAQEFgVyBdzMaI4M8ghsJAxcSb?=
 =?us-ascii?q?QECgkiKU3KBByGIVFgBgR4BAQ?=
X-IPAS-Result: =?us-ascii?q?A0CKAAAmAQVchxHrdtBiHQEBBQEHBQGBVAUBCwGBMComgVw?=
 =?us-ascii?q?EMgqHNgOFLYpgnBUQARgUiAMiNwYNAQMBAQEBAQECARMBAQEKCwkIGw4jAQuCN?=
 =?us-ascii?q?gUCAxoBBoJcAwMBAiQZAQEECikBAgMBAgYBAQEBRggDAS4lAgQTBYMcggIBAgE?=
 =?us-ascii?q?BmW8CigeBbDOCdgEBBYJDhFYIi38dgVc/gRGNbokvgXKEVJBNBwKCHwSID4Z/I?=
 =?us-ascii?q?4FbiDaHFYkEj0ICBAIEBQINAQEFgVyBdzMaI4M8ghsJAxcSbQECgkiKU3KBByG?=
 =?us-ascii?q?IVFgBgR4BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,310,1539673200"; 
   d="scan'208";a="55259565"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 03 Dec 2018 02:15:41 -0800
Received: from localhost ([::1]:47751 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gTlGO-0002Ts-F3
	for like.xu@linux.intel.com; Mon, 03 Dec 2018 05:15:40 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:39305)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <anton.nefedov@virtuozzo.com>) id 1gTlFw-0002Mx-Ny
	for qemu-devel@nongnu.org; Mon, 03 Dec 2018 05:15:15 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <anton.nefedov@virtuozzo.com>) id 1gTlFt-00054U-Sw
	for qemu-devel@nongnu.org; Mon, 03 Dec 2018 05:15:12 -0500
Received: from mail-db3eur04on0714.outbound.protection.outlook.com
	([2a01:111:f400:fe0c::714]:4512
	helo=EUR04-DB3-obe.outbound.protection.outlook.com)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <anton.nefedov@virtuozzo.com>)
	id 1gTlFs-0004uU-1Y; Mon, 03 Dec 2018 05:15:09 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=virtuozzo.com;
	s=selector1;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
	bh=1q2g/4jQlTwXDuNi8WAD+IFCiVqusDTaT0vMylyyAts=;
	b=WgY4We+XrEaz0Ls5GU2D3PAg8cCXzMp1sIb9bdB8j3H778pFvXPZFjYxNfPNgUBJQwWJRWJuvwXRGc+q0yVowlB5mop3/YdP97+kOs05APvqgyCttvcgBrIBjvMXeerleOt9kE8hjyTih5jyCc3GqRtr5pEpqRvc8ltUicZmhOc=
Received: from AM0PR08MB3347.eurprd08.prod.outlook.com (52.134.94.148) by
	AM0PR08MB3922.eurprd08.prod.outlook.com (20.178.118.139) with Microsoft
	SMTP
	Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
	15.20.1382.18; Mon, 3 Dec 2018 10:15:00 +0000
Received: from AM0PR08MB3347.eurprd08.prod.outlook.com
	([fe80::a0bd:dda4:d9e4:1d01]) by
	AM0PR08MB3347.eurprd08.prod.outlook.com
	([fe80::a0bd:dda4:d9e4:1d01%2]) with mapi id 15.20.1382.020;
	Mon, 3 Dec 2018 10:15:00 +0000
From: Anton Nefedov <anton.nefedov@virtuozzo.com>
To: "qemu-devel@nongnu.org" <qemu-devel@nongnu.org>
Thread-Topic: [PATCH v10 8/9] qcow2: skip writing zero buffers to empty COW
	areas
Thread-Index: AQHUivEMFZ+BKPUbXkqHMTqd3200yg==
Date: Mon, 3 Dec 2018 10:14:59 +0000
Message-ID: <20181203101429.88735-9-anton.nefedov@virtuozzo.com>
References: <20181203101429.88735-1-anton.nefedov@virtuozzo.com>
In-Reply-To: <20181203101429.88735-1-anton.nefedov@virtuozzo.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-clientproxiedby: HE1PR0301CA0004.eurprd03.prod.outlook.com
	(2603:10a6:3:76::14) To AM0PR08MB3347.eurprd08.prod.outlook.com
	(2603:10a6:208:5f::20)
x-ms-exchange-messagesentrepresentingtype: 1
x-originating-ip: [185.231.240.5]
x-ms-publictraffictype: Email
x-microsoft-exchange-diagnostics: 1; AM0PR08MB3922;
	20:A2P0gcD4psOD4887gGBGq6u0m7CKf1ymSyoGmfXQ6BEbIeCwz7D/n+pBIzmfnGPKAYdd0zTK7rtXmY6L933R3RTjkwL2KJ/hgHoiHeY8oMSaT7wSRZH8vpshuBCGFetoSdfbLoXCgi5K7bzkOGwLDDAqBVCCzfjybPl6pBLCksM=
x-ms-office365-filtering-correlation-id: 907a8080-6692-473c-28e0-08d659082ea5
x-microsoft-antispam: BCL:0; PCL:0;
	RULEID:(2390098)(7020095)(4652040)(8989299)(5600074)(711020)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(2017052603328)(7153060)(7193020);
	SRVR:AM0PR08MB3922; 
x-ms-traffictypediagnostic: AM0PR08MB3922:
authentication-results: spf=none (sender IP is )
	smtp.mailfrom=anton.nefedov@virtuozzo.com; 
x-microsoft-antispam-prvs: <AM0PR08MB3922C558F34FE491F457C118F8AE0@AM0PR08MB3922.eurprd08.prod.outlook.com>
x-ms-exchange-senderadcheck: 1
x-exchange-antispam-report-cfa-test: BCL:0; PCL:0;
	RULEID:(6040522)(2401047)(8121501046)(5005006)(10201501046)(93006095)(93001095)(3231455)(999002)(944501493)(52105112)(3002001)(148016)(149066)(150057)(6041310)(20161123558120)(20161123562045)(20161123564045)(20161123560045)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(201708071742011)(7699051)(76991095);
	SRVR:AM0PR08MB3922; BCL:0; PCL:0; RULEID:; SRVR:AM0PR08MB3922; 
x-forefront-prvs: 08756AC3C8
x-forefront-antispam-report: SFV:NSPM;
	SFS:(10019020)(136003)(366004)(39840400004)(376002)(346002)(396003)(189003)(199004)(476003)(107886003)(5660300001)(54906003)(14454004)(2906002)(52116002)(386003)(7736002)(1076002)(99286004)(6506007)(316002)(3846002)(6116002)(305945005)(68736007)(25786009)(478600001)(76176011)(97736004)(86362001)(66066001)(36756003)(8676002)(14444005)(44832011)(6486002)(8936002)(2501003)(81156014)(81166006)(256004)(26005)(2351001)(11346002)(4326008)(446003)(102836004)(106356001)(105586002)(5640700003)(186003)(6436002)(71200400001)(71190400001)(6512007)(486006)(53936002)(6916009)(2616005)(21314003);
	DIR:OUT; SFP:1102; SCL:1; SRVR:AM0PR08MB3922;
	H:AM0PR08MB3347.eurprd08.prod.outlook.com; FPR:; SPF:None;
	LANG:en; PTR:InfoNoRecords; MX:1; A:1; 
x-microsoft-antispam-message-info: C/hf2jIRI69p/EyV/6L00E6AAuOjKW21o7P2wsVHSqn2N+Xg3eV18QHsv3J+vlWm7/rvK0B4ON3zQsKCl1MYDXqPqpddzO/XpweaR53EZyUSGX352ri2O5DFSU2XPW7pl+QuAtfqp2IJ6QH+mC6vxxB5vpWd64SPdM0U0qvfSLM+MVZ9XRaB7OXLwjD5XOh5lcghE65IQS5pI1CVnYnWdzuvWZRDG7wYf1S+45+26XvO3x5EyuOHObjQrLKCN+9PSQ16rTPo/A68xSOknAARWNaJ6OCXk4WF7t14LDaUi7YdmwyYpX4QZd/gcbAoN9nWvFgZCJQpNR53nEIGrNqmGIoB+qp2LgiVbAr+2MGbnW0=
spamdiagnosticoutput: 1:99
spamdiagnosticmetadata: NSPM
Content-Type: text/plain; charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
X-OriginatorOrg: virtuozzo.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 907a8080-6692-473c-28e0-08d659082ea5
X-MS-Exchange-CrossTenant-originalarrivaltime: 03 Dec 2018 10:14:59.9111 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: 0bc7f26d-0264-416e-a6fc-8352af79c58f
X-MS-Exchange-Transport-CrossTenantHeadersStamped: AM0PR08MB3922
X-detected-operating-system: by eggs.gnu.org: Windows 7 or 8 [fuzzy]
X-Received-From: 2a01:111:f400:fe0c::714
Subject: [Qemu-devel] [PATCH v10 8/9] qcow2: skip writing zero buffers to
 empty COW areas
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: "kwolf@redhat.com" <kwolf@redhat.com>,
	Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>,
	"berto@igalia.com" <berto@igalia.com>, Denis Lunev <den@virtuozzo.com>,
	"qemu-block@nongnu.org" <qemu-block@nongnu.org>,
	"mreitz@redhat.com" <mreitz@redhat.com>,
	Anton Nefedov <anton.nefedov@virtuozzo.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

If COW areas of the newly allocated clusters are zeroes on the backing imag=
e,
efficient bdrv_write_zeroes(flags=3DBDRV_REQ_ALLOCATE) can be used on the w=
hole
cluster instead of writing explicit zero buffers later in perform_cow().

iotest 060:
write to the discarded cluster does not trigger COW anymore.
Use a backing image instead.

Signed-off-by: Anton Nefedov <anton.nefedov@virtuozzo.com>
Reviewed-by: Alberto Garcia <berto@igalia.com>
---
 qapi/block-core.json       |  4 +-
 block/qcow2.h              |  6 +++
 block/qcow2-cluster.c      |  2 +-
 block/qcow2.c              | 80 +++++++++++++++++++++++++++++++++++++-
 block/trace-events         |  1 +
 tests/qemu-iotests/060     | 26 ++++++++-----
 tests/qemu-iotests/060.out |  5 ++-
 7 files changed, 109 insertions(+), 15 deletions(-)

diff --git a/qapi/block-core.json b/qapi/block-core.json
index d4fe710836..50598aa8fe 100644
--- a/qapi/block-core.json
+++ b/qapi/block-core.json
@@ -3004,6 +3004,8 @@
 #
 # @cor_write: a write due to copy-on-read (since 2.11)
 #
+# @cluster_alloc_space: an allocation of file space for a cluster (since 4=
.0)
+#
 # Since: 2.9
 ##
 { 'enum': 'BlkdebugEvent', 'prefix': 'BLKDBG',
@@ -3022,7 +3024,7 @@
             'pwritev_rmw_tail', 'pwritev_rmw_after_tail', 'pwritev',
             'pwritev_zero', 'pwritev_done', 'empty_image_prepare',
             'l1_shrink_write_table', 'l1_shrink_free_l2_clusters',
-            'cor_write'] }
+            'cor_write', 'cluster_alloc_space'] }
=20
 ##
 # @BlkdebugInjectErrorOptions:
diff --git a/block/qcow2.h b/block/qcow2.h
index 8662b68575..8a64077897 100644
--- a/block/qcow2.h
+++ b/block/qcow2.h
@@ -389,6 +389,12 @@ typedef struct QCowL2Meta
      */
     Qcow2COWRegion cow_end;
=20
+    /**
+     * Indicates that COW regions are already handled and do not require
+     * any more processing.
+     */
+    bool skip_cow;
+
     /**
      * The I/O vector with the data from the actual guest write request.
      * If non-NULL, this is meant to be merged together with the data
diff --git a/block/qcow2-cluster.c b/block/qcow2-cluster.c
index d37fe08b3d..3685c5f67e 100644
--- a/block/qcow2-cluster.c
+++ b/block/qcow2-cluster.c
@@ -806,7 +806,7 @@ static int perform_cow(BlockDriverState *bs, QCowL2Meta=
 *m)
     assert(start->offset + start->nb_bytes <=3D end->offset);
     assert(!m->data_qiov || m->data_qiov->size =3D=3D data_bytes);
=20
-    if (start->nb_bytes =3D=3D 0 && end->nb_bytes =3D=3D 0) {
+    if ((start->nb_bytes =3D=3D 0 && end->nb_bytes =3D=3D 0) || m->skip_co=
w) {
         return 0;
     }
=20
diff --git a/block/qcow2.c b/block/qcow2.c
index 991d6ac91b..027188a1a3 100644
--- a/block/qcow2.c
+++ b/block/qcow2.c
@@ -2015,6 +2015,11 @@ static bool merge_cow(uint64_t offset, unsigned byte=
s,
             continue;
         }
=20
+        /* If COW regions are handled already, skip this too */
+        if (m->skip_cow) {
+            continue;
+        }
+
         /* The data (middle) region must be immediately after the
          * start region */
         if (l2meta_cow_start(m) + m->cow_start.nb_bytes !=3D offset) {
@@ -2040,6 +2045,68 @@ static bool merge_cow(uint64_t offset, unsigned byte=
s,
     return false;
 }
=20
+static bool is_unallocated(BlockDriverState *bs, int64_t offset, int64_t b=
ytes)
+{
+    int64_t nr;
+    return !bytes ||
+        (!bdrv_is_allocated_above(bs, NULL, offset, bytes, &nr) && nr =3D=
=3D bytes);
+}
+
+static bool is_zero_cow(BlockDriverState *bs, QCowL2Meta *m)
+{
+    /* This check is designed for optimization shortcut so it must be
+     * efficient.
+     * Instead of is_zero(), use is_unallocated() as it is faster (but not
+     * as accurate and can result in false negatives). */
+    return is_unallocated(bs, m->offset + m->cow_start.offset,
+                          m->cow_start.nb_bytes) &&
+           is_unallocated(bs, m->offset + m->cow_end.offset,
+                          m->cow_end.nb_bytes);
+}
+
+static int handle_alloc_space(BlockDriverState *bs, QCowL2Meta *l2meta)
+{
+    BDRVQcow2State *s =3D bs->opaque;
+    QCowL2Meta *m;
+
+    if (!(bs->file->bs->supported_zero_flags & BDRV_REQ_ALLOCATE)) {
+        return 0;
+    }
+
+    if (bs->encrypted) {
+        return 0;
+    }
+
+    for (m =3D l2meta; m !=3D NULL; m =3D m->next) {
+        int ret;
+
+        if (!m->cow_start.nb_bytes && !m->cow_end.nb_bytes) {
+            continue;
+        }
+
+        if (!is_zero_cow(bs, m)) {
+            continue;
+        }
+
+        BLKDBG_EVENT(bs->file, BLKDBG_CLUSTER_ALLOC_SPACE);
+        /* instead of writing zero COW buffers,
+           efficiently zero out the whole clusters */
+        ret =3D bdrv_co_pwrite_zeroes(bs->file, m->alloc_offset,
+                                    m->nb_clusters * s->cluster_size,
+                                    BDRV_REQ_ALLOCATE);
+        if (ret < 0) {
+            if (ret !=3D -ENOTSUP && ret !=3D -EAGAIN) {
+                return ret;
+            }
+            continue;
+        }
+
+        trace_qcow2_skip_cow(qemu_coroutine_self(), m->offset, m->nb_clust=
ers);
+        m->skip_cow =3D true;
+    }
+    return 0;
+}
+
 static coroutine_fn int qcow2_co_pwritev(BlockDriverState *bs, uint64_t of=
fset,
                                          uint64_t bytes, QEMUIOVector *qio=
v,
                                          int flags)
@@ -2122,24 +2189,33 @@ static coroutine_fn int qcow2_co_pwritev(BlockDrive=
rState *bs, uint64_t offset,
             goto fail;
         }
=20
+        qemu_co_mutex_unlock(&s->lock);
+
+        ret =3D handle_alloc_space(bs, l2meta);
+        if (ret < 0) {
+            qemu_co_mutex_lock(&s->lock);
+            goto fail;
+        }
+
         /* If we need to do COW, check if it's possible to merge the
          * writing of the guest data together with that of the COW regions=
.
          * If it's not possible (or not necessary) then write the
          * guest data now. */
         if (!merge_cow(offset, cur_bytes, &hd_qiov, l2meta)) {
-            qemu_co_mutex_unlock(&s->lock);
             BLKDBG_EVENT(bs->file, BLKDBG_WRITE_AIO);
             trace_qcow2_writev_data(qemu_coroutine_self(),
                                     cluster_offset + offset_in_cluster);
             ret =3D bdrv_co_pwritev(bs->file,
                                   cluster_offset + offset_in_cluster,
                                   cur_bytes, &hd_qiov, 0);
-            qemu_co_mutex_lock(&s->lock);
             if (ret < 0) {
+                qemu_co_mutex_lock(&s->lock);
                 goto fail;
             }
         }
=20
+        qemu_co_mutex_lock(&s->lock);
+
         ret =3D qcow2_handle_l2meta(bs, &l2meta, true);
         if (ret) {
             goto fail;
diff --git a/block/trace-events b/block/trace-events
index 3e8c47bb24..f3f6d66dcc 100644
--- a/block/trace-events
+++ b/block/trace-events
@@ -69,6 +69,7 @@ qcow2_writev_done_part(void *co, int cur_bytes) "co %p cu=
r_bytes %d"
 qcow2_writev_data(void *co, uint64_t offset) "co %p offset 0x%" PRIx64
 qcow2_pwrite_zeroes_start_req(void *co, int64_t offset, int count) "co %p =
offset 0x%" PRIx64 " count %d"
 qcow2_pwrite_zeroes(void *co, int64_t offset, int count) "co %p offset 0x%=
" PRIx64 " count %d"
+qcow2_skip_cow(void *co, uint64_t offset, int nb_clusters) "co %p offset 0=
x%" PRIx64 " nb_clusters %d"
=20
 # block/qcow2-cluster.c
 qcow2_alloc_clusters_offset(void *co, uint64_t offset, int bytes) "co %p o=
ffset 0x%" PRIx64 " bytes %d"
diff --git a/tests/qemu-iotests/060 b/tests/qemu-iotests/060
index af0588ae9a..089df94657 100755
--- a/tests/qemu-iotests/060
+++ b/tests/qemu-iotests/060
@@ -150,27 +150,33 @@ $QEMU_IO -c "$OPEN_RO" -c "read -P 1 0 512" | _filter=
_qemu_io
 echo
 echo "=3D=3D=3D Testing overlap while COW is in flight =3D=3D=3D"
 echo
+BACKING_IMG=3D$TEST_IMG.base
+TEST_IMG=3D$BACKING_IMG _make_test_img 1G
+
+$QEMU_IO -c 'write 64k 64k' "$BACKING_IMG" | _filter_qemu_io
+
 # compat=3D0.10 is required in order to make the following discard actuall=
y
-# unallocate the sector rather than make it a zero sector - we want COW, a=
fter
-# all.
-IMGOPTS=3D'compat=3D0.10' _make_test_img 1G
+# unallocate the sector rather than make it a zero sector as we would like
+# to reuse it for another guest offset
+IMGOPTS=3D'compat=3D0.10' _make_test_img -b "$BACKING_IMG" 1G
 # Write two clusters, the second one enforces creation of an L2 table afte=
r
 # the first data cluster.
 $QEMU_IO -c 'write 0k 64k' -c 'write 512M 64k' "$TEST_IMG" | _filter_qemu_=
io
-# Discard the first cluster. This cluster will soon enough be reallocated =
and
-# used for COW.
+# Discard the first cluster. This cluster will soon enough be reallocated
 $QEMU_IO -c 'discard 0k 64k' "$TEST_IMG" | _filter_qemu_io
 # Now, corrupt the image by marking the second L2 table cluster as free.
 poke_file "$TEST_IMG" '131084' "\x00\x00" # 0x2000c
-# Start a write operation requiring COW on the image stopping it right bef=
ore
-# doing the read; then, trigger the corruption prevention by writing anyth=
ing to
-# any unallocated cluster, leading to an attempt to overwrite the second L=
2
+# Start a write operation requiring COW on the image;
+# this write will reuse the host offset released by a previous discard.
+# Stop it right before doing the read.
+# Then, trigger the corruption prevention by writing anything to
+# another unallocated cluster, leading to an attempt to overwrite the seco=
nd L2
 # table. Finally, resume the COW write and see it fail (but not crash).
 echo "open -o file.driver=3Dblkdebug $TEST_IMG
 break cow_read 0
-aio_write 0k 1k
+aio_write 64k 1k
 wait_break 0
-write 64k 64k
+write 128k 64k
 resume 0" | $QEMU_IO | _filter_qemu_io
=20
 echo
diff --git a/tests/qemu-iotests/060.out b/tests/qemu-iotests/060.out
index d67c6234a4..ec8f15d2f0 100644
--- a/tests/qemu-iotests/060.out
+++ b/tests/qemu-iotests/060.out
@@ -97,7 +97,10 @@ read 512/512 bytes at offset 0
=20
 =3D=3D=3D Testing overlap while COW is in flight =3D=3D=3D
=20
-Formatting 'TEST_DIR/t.IMGFMT', fmt=3DIMGFMT size=3D1073741824
+Formatting 'TEST_DIR/t.IMGFMT.base', fmt=3DIMGFMT size=3D1073741824
+wrote 65536/65536 bytes at offset 65536
+64 KiB, X ops; XX:XX:XX.X (XXX YYY/sec and XXX ops/sec)
+Formatting 'TEST_DIR/t.IMGFMT', fmt=3DIMGFMT size=3D1073741824 backing_fil=
e=3DTEST_DIR/t.IMGFMT.base
 wrote 65536/65536 bytes at offset 0
 64 KiB, X ops; XX:XX:XX.X (XXX YYY/sec and XXX ops/sec)
 wrote 65536/65536 bytes at offset 536870912
--=20
2.17.1


