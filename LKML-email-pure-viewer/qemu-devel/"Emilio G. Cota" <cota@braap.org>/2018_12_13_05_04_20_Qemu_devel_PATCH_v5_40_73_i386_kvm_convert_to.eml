Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 21:19:57 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 38D85580380
	for <like.xu@linux.intel.com>; Wed, 12 Dec 2018 21:44:47 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by fmsmga002-1.fm.intel.com with ESMTP; 12 Dec 2018 21:44:46 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AtZD1nB8G1qCRdf9uRHKM819IXTAuvvDOBiVQ1KB+?=
 =?us-ascii?q?0+oRIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CRWRPQNtfWSJCDI27?=
 =?us-ascii?q?bYQPAfEMMfpEo4Tnu1cDtweyCRWqCejyyjFInHj23agi3ugvHg/G2Q0gH9YPsH?=
 =?us-ascii?q?TTsd77Nb0eWv2rwanP0TXMdf1a0ir65YfUdRAhveuDUKlrfsrL00YgDRvFgk+X?=
 =?us-ascii?q?qYz/MDOYz+IAuHWY4ep4Te+jlXIrpgJrrjSy28shiZPFipwbx13E7yl13YQ4Kc?=
 =?us-ascii?q?WlREJlYtOoCptduiWAO4doXs8uWX9ktDs7x7AApJW1ZjIFyI49yB7ac/GHc5aH?=
 =?us-ascii?q?4hbkVOuJJTd4hWlleK6khxqo/kigzPD8WtOz0FZQoSpJitjMtnYT2BzP8sWLVO?=
 =?us-ascii?q?dx80S71TqSygze6ftILV46mKfbMZIt37w9moIWsUvZHy/2nEv2jLWRdkUh4uWo?=
 =?us-ascii?q?8vroYrD7ppOFKoB7lB/+PboqmsCmGus4NRUOX26H9uuiz73v+kn5QLRJjvIoiK?=
 =?us-ascii?q?XYv43aKNwfpq64BQ9Vz4ki5wy+DzegzNQXg30HIEhZdxKAiojkIFfOIPf+Dfew?=
 =?us-ascii?q?hVSsjS1nx/fcPr3uGpnNNGTMkK/9fbZh7E5R0A4zzdFc551KEL0AL+/zV1T1tN?=
 =?us-ascii?q?zZCB85LgO1z/zmCNV7yoMRR2aPDrWFP6PVtF+E/ucvLPONZI8Rtjb9Mf8l5/v2?=
 =?us-ascii?q?gHAlnl8dYbOm0IAMZ3CiBPtpOV2ZbWDrgtcbHmcHuBc1QfLuiF2fSj5Te2i9X7?=
 =?us-ascii?q?gh6DE6CYOpE5/OS4P+yIGHxzqxS51KenhdWBfLFXbza57CXfAKZySPZMh7nXsB?=
 =?us-ascii?q?XLmlToYnkha2qA79zaEgN+fR52gUuIzu0ItI4fbOn0Q3/D1wE8PPymyIUiR4k3?=
 =?us-ascii?q?0FQ3os0blirFdh4lGE16d+nrpfD9ME/O5DUAoxKcvByfdnAcv5QAPLc4S1TwO/?=
 =?us-ascii?q?T9C7RD08UN8169kJZUl7BpOllB+Q8TCtBupfurmKAJ0zuo2al1P2O883gyLN07?=
 =?us-ascii?q?Uop1M8S8JXc2q8ifgspEDoG4fVnhDBxO6RfqMG0XuIrT/bwA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AZAACJ8BFcmBHrdtBjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgTCCYowVX4szgwmRW4R8gXMUGBSHPiI0CQ0BAwEBAQEBAQIBEwE?=
 =?us-ascii?q?BAQEBCAsLBhsOIwyCNgUCAxoBBoJcAwMBAiQZAQEECikBAgMBAgYBAUgIAwFTG?=
 =?us-ascii?q?QWDHIIBAQSmGYFsM4J2AQEFgkOEbgiHfYMjgRwRBoF/gRGCXYsRiT+HBpBJBwI?=
 =?us-ascii?q?CkUoLGIlnh18smROBRoIOfQiDJ4IbDBeDSoUUhV1UgQIFIROKL4F3AQE?=
X-IPAS-Result: =?us-ascii?q?A0AZAACJ8BFcmBHrdtBjHAEBAQQBAQcEAQGBUQcBAQsBgTC?=
 =?us-ascii?q?CYowVX4szgwmRW4R8gXMUGBSHPiI0CQ0BAwEBAQEBAQIBEwEBAQEBCAsLBhsOI?=
 =?us-ascii?q?wyCNgUCAxoBBoJcAwMBAiQZAQEECikBAgMBAgYBAUgIAwFTGQWDHIIBAQSmGYF?=
 =?us-ascii?q?sM4J2AQEFgkOEbgiHfYMjgRwRBoF/gRGCXYsRiT+HBpBJBwICkUoLGIlnh18sm?=
 =?us-ascii?q?ROBRoIOfQiDJ4IbDBeDSoUUhV1UgQIFIROKL4F3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,347,1539673200"; 
   d="scan'208";a="43867112"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 12 Dec 2018 21:44:45 -0800
Received: from localhost ([::1]:50632 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gXJnh-0008BI-7W
	for like.xu@linux.intel.com; Thu, 13 Dec 2018 00:44:45 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:55916)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <cota@braap.org>) id 1gXJCs-0007sJ-M7
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 00:06:45 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <cota@braap.org>) id 1gXJCp-0001w9-Qq
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 00:06:42 -0500
Received: from out1-smtp.messagingengine.com ([66.111.4.25]:60279)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <cota@braap.org>) id 1gXJCo-0001ZR-VA
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 00:06:39 -0500
Received: from compute4.internal (compute4.nyi.internal [10.202.2.44])
	by mailout.nyi.internal (Postfix) with ESMTP id F35EE221C9;
	Thu, 13 Dec 2018 00:05:45 -0500 (EST)
Received: from mailfrontend2 ([10.202.2.163])
	by compute4.internal (MEProxy); Thu, 13 Dec 2018 00:05:45 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=braap.org; h=
	from:to:cc:subject:date:message-id:in-reply-to:references; s=
	mesmtp; bh=buvhOJZRe2JlPG3OSHAlBNB5dgT/+qCLYRfBOFNqPKo=; b=J1mkq
	xsy4WyysBmNSNPHNAt3eogQ9RHDjHHEDmOZDwVmhs9nZVh1wFa9hBplJftrGMp4P
	I+ZNIWzMYxN+5OQlywcu1eNigIv+VORlRUy9hg0SwgENBpYttoHPb4JvmVh/WdgF
	WEtF/WeYiXeyy5awDDZxK1xPoJCbvIQp0PlE4A=
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=
	messagingengine.com; h=cc:date:from:in-reply-to:message-id
	:references:subject:to:x-me-proxy:x-me-proxy:x-me-sender
	:x-me-sender:x-sasl-enc; s=fm1; bh=buvhOJZRe2JlPG3OSHAlBNB5dgT/+
	qCLYRfBOFNqPKo=; b=FTSUeFxCevfmqaMJ8144AT1mftFYS+CYyVKZdrom3YUaP
	JQ/y1xT+L4KhLX3yotVs1eTMbLZBsnhdwhbzMyLNWZngm4bTlFH2+J2jswc4Ec0j
	gIqbY+xuKiy6lQej173FZVYPBo3FYD7/7bzoKsImuGAzt4A1PdyUKatgkisG+BEZ
	fAQeCrRF4hEznodzg4bu/AGPHOmDaUV+RNPvTSeekEoA91okd5rOKbiF3PGD5y4R
	voDSn15oHetw8EmL1PxMhby+aDO/JCaW4UT3ZjU4sQ1KnNiU9vnUcpvEZX3tmUtJ
	c5rpSRd6aQpZYuD+mg1baS/Yww+zo8txxxXKfzwdA==
X-ME-Sender: <xms:qegRXCys4DSneLPlKOOnPLidP7DHOMWbZU0qjpYDg3G2CncJC-xzYw>
X-ME-Proxy-Cause: gggruggvucftvghtrhhoucdtuddrgedtkedrudehuddgkedtucetufdoteggodetrfdotf
	fvucfrrhhofhhilhgvmecuhfgrshhtofgrihhlpdfquhhtnecuuegrihhlohhuthemucef
	tddtnecusecvtfgvtghiphhivghnthhsucdlqddutddtmdenucfjughrpefhvffufffkof
	gjfhestddtredtredttdenucfhrhhomhepfdfgmhhilhhiohcuifdrucevohhtrgdfuceo
	tghothgrsegsrhgrrghprdhorhhgqeenucfkphepuddvkedrheelrddvtddrvdduieenuc
	frrghrrghmpehmrghilhhfrhhomheptghothgrsegsrhgrrghprdhorhhgnecuvehluhhs
	thgvrhfuihiivgepke
X-ME-Proxy: <xmx:qegRXN1tkN7cUPX70l95wVSXIYu2h6NgQKkWz5lNxBV1TryX4MiQlA>
	<xmx:qegRXKylbyONGMsFjqsLQOn0a6bzt6dSickGjY0rogzIxQFHTWXCwA>
	<xmx:qegRXIHgvck1A2MMV3FbprWr7kHiiTI6zK539ADQO2J9YzkmxD2rPw>
	<xmx:qegRXFHfmwMiSCUduuYs21caBwIqOXjDrLx0HLvLALJRXAV6WnVbLQ>
Received: from localhost (flamenco.cs.columbia.edu [128.59.20.216])
	by mail.messagingengine.com (Postfix) with ESMTPA id 80A3B1045F;
	Thu, 13 Dec 2018 00:05:45 -0500 (EST)
From: "Emilio G. Cota" <cota@braap.org>
To: qemu-devel@nongnu.org
Date: Thu, 13 Dec 2018 00:04:20 -0500
Message-Id: <20181213050453.9677-41-cota@braap.org>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20181213050453.9677-1-cota@braap.org>
References: <20181213050453.9677-1-cota@braap.org>
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 66.111.4.25
Subject: [Qemu-devel] [PATCH v5 40/73] i386/kvm: convert to
 cpu_interrupt_request
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: =?UTF-8?q?Alex=20Benn=C3=A9e?= <alex.bennee@linaro.org>,
	Paolo Bonzini <pbonzini@redhat.com>,
	Richard Henderson <richard.henderson@linaro.org>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
Signed-off-by: Emilio G. Cota <cota@braap.org>
---
 target/i386/kvm.c | 54 +++++++++++++++++++++++++++--------------------
 1 file changed, 31 insertions(+), 23 deletions(-)

diff --git a/target/i386/kvm.c b/target/i386/kvm.c
index a3d1f47556..61b9473403 100644
--- a/target/i386/kvm.c
+++ b/target/i386/kvm.c
@@ -2875,11 +2875,14 @@ static int kvm_put_vcpu_events(X86CPU *cpu, int level)
         events.smi.smm = !!(env->hflags & HF_SMM_MASK);
         events.smi.smm_inside_nmi = !!(env->hflags2 & HF2_SMM_INSIDE_NMI_MASK);
         if (kvm_irqchip_in_kernel()) {
+            uint32_t interrupt_request;
+
             /* As soon as these are moved to the kernel, remove them
              * from cs->interrupt_request.
              */
-            events.smi.pending = cs->interrupt_request & CPU_INTERRUPT_SMI;
-            events.smi.latched_init = cs->interrupt_request & CPU_INTERRUPT_INIT;
+            interrupt_request = cpu_interrupt_request(cs);
+            events.smi.pending = interrupt_request & CPU_INTERRUPT_SMI;
+            events.smi.latched_init = interrupt_request & CPU_INTERRUPT_INIT;
             cpu_reset_interrupt(cs, CPU_INTERRUPT_INIT | CPU_INTERRUPT_SMI);
         } else {
             /* Keep these in cs->interrupt_request.  */
@@ -3170,14 +3173,14 @@ void kvm_arch_pre_run(CPUState *cpu, struct kvm_run *run)
 {
     X86CPU *x86_cpu = X86_CPU(cpu);
     CPUX86State *env = &x86_cpu->env;
+    uint32_t interrupt_request;
     int ret;
 
+    interrupt_request = cpu_interrupt_request(cpu);
     /* Inject NMI */
-    if (cpu->interrupt_request & (CPU_INTERRUPT_NMI | CPU_INTERRUPT_SMI)) {
-        if (cpu->interrupt_request & CPU_INTERRUPT_NMI) {
-            qemu_mutex_lock_iothread();
+    if (interrupt_request & (CPU_INTERRUPT_NMI | CPU_INTERRUPT_SMI)) {
+        if (interrupt_request & CPU_INTERRUPT_NMI) {
             cpu_reset_interrupt(cpu, CPU_INTERRUPT_NMI);
-            qemu_mutex_unlock_iothread();
             DPRINTF("injected NMI\n");
             ret = kvm_vcpu_ioctl(cpu, KVM_NMI);
             if (ret < 0) {
@@ -3185,10 +3188,8 @@ void kvm_arch_pre_run(CPUState *cpu, struct kvm_run *run)
                         strerror(-ret));
             }
         }
-        if (cpu->interrupt_request & CPU_INTERRUPT_SMI) {
-            qemu_mutex_lock_iothread();
+        if (interrupt_request & CPU_INTERRUPT_SMI) {
             cpu_reset_interrupt(cpu, CPU_INTERRUPT_SMI);
-            qemu_mutex_unlock_iothread();
             DPRINTF("injected SMI\n");
             ret = kvm_vcpu_ioctl(cpu, KVM_SMI);
             if (ret < 0) {
@@ -3202,16 +3203,18 @@ void kvm_arch_pre_run(CPUState *cpu, struct kvm_run *run)
         qemu_mutex_lock_iothread();
     }
 
+    interrupt_request = cpu_interrupt_request(cpu);
+
     /* Force the VCPU out of its inner loop to process any INIT requests
      * or (for userspace APIC, but it is cheap to combine the checks here)
      * pending TPR access reports.
      */
-    if (cpu->interrupt_request & (CPU_INTERRUPT_INIT | CPU_INTERRUPT_TPR)) {
-        if ((cpu->interrupt_request & CPU_INTERRUPT_INIT) &&
+    if (interrupt_request & (CPU_INTERRUPT_INIT | CPU_INTERRUPT_TPR)) {
+        if ((interrupt_request & CPU_INTERRUPT_INIT) &&
             !(env->hflags & HF_SMM_MASK)) {
             cpu->exit_request = 1;
         }
-        if (cpu->interrupt_request & CPU_INTERRUPT_TPR) {
+        if (interrupt_request & CPU_INTERRUPT_TPR) {
             cpu->exit_request = 1;
         }
     }
@@ -3219,7 +3222,7 @@ void kvm_arch_pre_run(CPUState *cpu, struct kvm_run *run)
     if (!kvm_pic_in_kernel()) {
         /* Try to inject an interrupt if the guest can accept it */
         if (run->ready_for_interrupt_injection &&
-            (cpu->interrupt_request & CPU_INTERRUPT_HARD) &&
+            (interrupt_request & CPU_INTERRUPT_HARD) &&
             (env->eflags & IF_MASK)) {
             int irq;
 
@@ -3243,7 +3246,7 @@ void kvm_arch_pre_run(CPUState *cpu, struct kvm_run *run)
          * interrupt, request an interrupt window exit.  This will
          * cause a return to userspace as soon as the guest is ready to
          * receive interrupts. */
-        if ((cpu->interrupt_request & CPU_INTERRUPT_HARD)) {
+        if ((cpu_interrupt_request(cpu) & CPU_INTERRUPT_HARD)) {
             run->request_interrupt_window = 1;
         } else {
             run->request_interrupt_window = 0;
@@ -3289,8 +3292,9 @@ int kvm_arch_process_async_events(CPUState *cs)
 {
     X86CPU *cpu = X86_CPU(cs);
     CPUX86State *env = &cpu->env;
+    uint32_t interrupt_request;
 
-    if (cs->interrupt_request & CPU_INTERRUPT_MCE) {
+    if (cpu_interrupt_request(cs) & CPU_INTERRUPT_MCE) {
         /* We must not raise CPU_INTERRUPT_MCE if it's not supported. */
         assert(env->mcg_cap);
 
@@ -3313,7 +3317,7 @@ int kvm_arch_process_async_events(CPUState *cs)
         }
     }
 
-    if ((cs->interrupt_request & CPU_INTERRUPT_INIT) &&
+    if ((cpu_interrupt_request(cs) & CPU_INTERRUPT_INIT) &&
         !(env->hflags & HF_SMM_MASK)) {
         kvm_cpu_synchronize_state(cs);
         do_cpu_init(cpu);
@@ -3323,20 +3327,21 @@ int kvm_arch_process_async_events(CPUState *cs)
         return 0;
     }
 
-    if (cs->interrupt_request & CPU_INTERRUPT_POLL) {
+    if (cpu_interrupt_request(cs) & CPU_INTERRUPT_POLL) {
         cpu_reset_interrupt(cs, CPU_INTERRUPT_POLL);
         apic_poll_irq(cpu->apic_state);
     }
-    if (((cs->interrupt_request & CPU_INTERRUPT_HARD) &&
+    interrupt_request = cpu_interrupt_request(cs);
+    if (((interrupt_request & CPU_INTERRUPT_HARD) &&
          (env->eflags & IF_MASK)) ||
-        (cs->interrupt_request & CPU_INTERRUPT_NMI)) {
+        (interrupt_request & CPU_INTERRUPT_NMI)) {
         cpu_halted_set(cs, 0);
     }
-    if (cs->interrupt_request & CPU_INTERRUPT_SIPI) {
+    if (interrupt_request & CPU_INTERRUPT_SIPI) {
         kvm_cpu_synchronize_state(cs);
         do_cpu_sipi(cpu);
     }
-    if (cs->interrupt_request & CPU_INTERRUPT_TPR) {
+    if (cpu_interrupt_request(cs) & CPU_INTERRUPT_TPR) {
         cpu_reset_interrupt(cs, CPU_INTERRUPT_TPR);
         kvm_cpu_synchronize_state(cs);
         apic_handle_tpr_access_report(cpu->apic_state, env->eip,
@@ -3350,10 +3355,13 @@ static int kvm_handle_halt(X86CPU *cpu)
 {
     CPUState *cs = CPU(cpu);
     CPUX86State *env = &cpu->env;
+    uint32_t interrupt_request;
+
+    interrupt_request = cpu_interrupt_request(cs);
 
-    if (!((cs->interrupt_request & CPU_INTERRUPT_HARD) &&
+    if (!((interrupt_request & CPU_INTERRUPT_HARD) &&
           (env->eflags & IF_MASK)) &&
-        !(cs->interrupt_request & CPU_INTERRUPT_NMI)) {
+        !(interrupt_request & CPU_INTERRUPT_NMI)) {
         cpu_halted_set(cs, 1);
         return EXCP_HLT;
     }
-- 
2.17.1


