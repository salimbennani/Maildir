Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 21:19:33 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga008.fm.intel.com (fmsmga008.fm.intel.com [10.253.24.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id B234B580380
	for <like.xu@linux.intel.com>; Wed, 12 Dec 2018 21:16:20 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga008-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 12 Dec 2018 21:16:20 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3Aw+suYR0MkOQdfL8ZsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?sesWKvvxwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJBUMhPSiJPDICy?=
 =?us-ascii?q?YYwNAOoPJutUs5XxqkESoRakGQWgGOXiwSJIiH/s2q061vwsHQ/J0gwlHtIOtH?=
 =?us-ascii?q?XUrNLoP6kTS+y+0bfFzTLfb/xM1zv29Y/FfQwmofGQR719atHeyVM1GAzfllWc?=
 =?us-ascii?q?s4vlPyma1ukUtWWQ8uluVfq3hmI5tw18oSKjytoxhoTKnI4Z1F7J+CVjzIooJ9?=
 =?us-ascii?q?C0UFN3bcCnHZdKtyyXM5F6Tt0+T21ypio217wLtJimdyYQ0psn3QTQa/mffoiI?=
 =?us-ascii?q?/B3jUOGRLC98hHJkY7K/mw2y/VKvyu36S8m4ylFKrjBKktXUt3AN0QLc6tSfR/?=
 =?us-ascii?q?dj4kus2iyD2x3O5uxHO0w4i6TWJp47zrItlJcfqUHDETX3mEXygq+WbEIk+u2w?=
 =?us-ascii?q?5uT+fLrmo4KcO5ZphQ7gLKQhhMi/Df0jPQgJQmib//iz26P4/UH+RLVKj/42nb?=
 =?us-ascii?q?fDvJHVOMQWvqq5Aw5T0oY+5BezFTam0NIEnXYZKFJJYg6Ij4/sO1zVJvD4CvG/?=
 =?us-ascii?q?g1uqkDd23fzGOafhAprVInjZjLjhZap961JbyAcrydBf5pFUBa8bLPP8R0/8r9?=
 =?us-ascii?q?jYDh4/MwypzOfrEtR91oUCWW2RBq+VKr/dsViN5u43JumDfo4VuDLzK/g/4P7u?=
 =?us-ascii?q?iGc0lkMafam1x5Qac2u3Hu58LEqDeXrgmNABEX0Fvgc4UefnllmCUSNIZ3auQa?=
 =?us-ascii?q?08/Cw1CIOnDIjdXo2hnO/J4SGgA5cDZnxaEkveVjDsdp6YQLEKbySdJNInlSYL?=
 =?us-ascii?q?Er2oSosk3Bfpsxfmyr1hNa3N9ygF8J7uytVxtNDVjgw4oDl9DsCB1DOUQmRp22?=
 =?us-ascii?q?8FWTIymbpyuFFw0Uur169+jPpFU9tJ6KRSTw04OJXAmvF8EM34QQnbf92EG2qh?=
 =?us-ascii?q?F8yrBCx0Qt8vztsmZUF7FNO/yBfZ0HmEGbgQwvamAZ0w86WU8D65DMFhwjyOgK?=
 =?us-ascii?q?Imk1AOSNFGPHXggbRwoVuAT7XVmlmUwv75PZ8X2zTAoSLalTKD?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AgAACi6hFcmBHrdtBjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUgYBAQsBgTCCYox0izOZYIFzFBgUgz+DfyI1CA0BAwEBAQEBAQIBEwEBAQE?=
 =?us-ascii?q?BCAsLBhsOIwyCNgUCAxoBBoJcAwMBAiQZAQEECikBAgMBAgYBAUgIAwFTGQWDH?=
 =?us-ascii?q?IIBAQSmFYFsM4J2AQEFgkOEbgiHfYMjgRwRBoF/jn+QRZBJBwICikiHAgsYiWe?=
 =?us-ascii?q?HX5k/gUgDggl9CIMnghsMFxKDOIUUhV1UgQIFIROKL4F3AQE?=
X-IPAS-Result: =?us-ascii?q?A0AgAACi6hFcmBHrdtBjHAEBAQQBAQcEAQGBUgYBAQsBgTC?=
 =?us-ascii?q?CYox0izOZYIFzFBgUgz+DfyI1CA0BAwEBAQEBAQIBEwEBAQEBCAsLBhsOIwyCN?=
 =?us-ascii?q?gUCAxoBBoJcAwMBAiQZAQEECikBAgMBAgYBAUgIAwFTGQWDHIIBAQSmFYFsM4J?=
 =?us-ascii?q?2AQEFgkOEbgiHfYMjgRwRBoF/jn+QRZBJBwICikiHAgsYiWeHX5k/gUgDggl9C?=
 =?us-ascii?q?IMnghsMFxKDOIUUhV1UgQIFIROKL4F3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,347,1539673200"; 
   d="scan'208";a="54989434"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 12 Dec 2018 21:16:19 -0800
Received: from localhost ([::1]:50485 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gXJMA-00085c-TZ
	for like.xu@linux.intel.com; Thu, 13 Dec 2018 00:16:19 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:54967)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <cota@braap.org>) id 1gXJC7-0007Ep-Gm
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 00:05:56 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <cota@braap.org>) id 1gXJC4-0000vm-L1
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 00:05:54 -0500
Received: from out1-smtp.messagingengine.com ([66.111.4.25]:56129)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <cota@braap.org>) id 1gXJC3-0000qq-S7
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 00:05:51 -0500
Received: from compute4.internal (compute4.nyi.internal [10.202.2.44])
	by mailout.nyi.internal (Postfix) with ESMTP id C720922165;
	Thu, 13 Dec 2018 00:05:38 -0500 (EST)
Received: from mailfrontend2 ([10.202.2.163])
	by compute4.internal (MEProxy); Thu, 13 Dec 2018 00:05:38 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=braap.org; h=
	from:to:cc:subject:date:message-id:in-reply-to:references; s=
	mesmtp; bh=InxqPHxmPk73Jo33+Y3UzmyxCoTtQHCRlzNoCWVIhsw=; b=POe/a
	u0w5OSkpX1eD8R2/h4OjFwWjH+tpXILLELnHXZFo2a15WUbGLT+ZmYb+F7OZAwHM
	jQqojL4sduYa/XL/KmXfb+OjHkQ5rherg99Yyw98PrK4AjU3sX8dGgBIGRVHr5LV
	Ozb2F6GyjktLw+ouvnbmCR8KBYOs8///DPb4FY=
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=
	messagingengine.com; h=cc:date:from:in-reply-to:message-id
	:references:subject:to:x-me-proxy:x-me-proxy:x-me-sender
	:x-me-sender:x-sasl-enc; s=fm1; bh=InxqPHxmPk73Jo33+Y3UzmyxCoTtQ
	HCRlzNoCWVIhsw=; b=bCMC+W2wTv3brQ87HczUGYVwFM1hZeHelx8HEh+EX437f
	2tGI6zgrVVzbytSZP3M/H5hl4/IlswA/DuSBG7WlIa9NO5jD8WNEonV7FxQ6PU8O
	Hot6sMCvnKIGHhhn+4E7tY4ItFDaeWMzIyMFOAGs6ebrQwMpxUyNHcw9YZWDCtdW
	PE4YmfABoEpwo5xx1JnWxzVy1ur6au/cuTTxWT8wOlPhSUfTyipmdJWD3EsAyPL0
	8gvZPbJ49qAQFvrVcWAe9g2b+UZqtwDn8ZQiB5hO1zJ7CqvIlsjgaKudtucKvxQe
	2XEe+vq9zbaBw1RCeHqj5T4mvSq1a9uPt8g1XvyUA==
X-ME-Sender: <xms:ougRXLewbKl0iYdbKUWAz1hCAYoaANYdf9beELbKXROZfAs5FNq7cA>
X-ME-Proxy-Cause: gggruggvucftvghtrhhoucdtuddrgedtkedrudehuddgkedtucetufdoteggodetrfdotf
	fvucfrrhhofhhilhgvmecuhfgrshhtofgrihhlpdfquhhtnecuuegrihhlohhuthemucef
	tddtnecusecvtfgvtghiphhivghnthhsucdlqddutddtmdenucfjughrpefhvffufffkof
	gjfhestddtredtredttdenucfhrhhomhepfdfgmhhilhhiohcuifdrucevohhtrgdfuceo
	tghothgrsegsrhgrrghprdhorhhgqeenucfkphepuddvkedrheelrddvtddrvdduieenuc
	frrghrrghmpehmrghilhhfrhhomheptghothgrsegsrhgrrghprdhorhhgnecuvehluhhs
	thgvrhfuihiivgeptd
X-ME-Proxy: <xmx:ougRXIf1Niw2BtZj-qHGofF3zZjILAh4Zo_LFl_GRE3xcIBK3q__qQ>
	<xmx:ougRXPYb8s6j6pFUjqL0sw-kC6nGH4yMh5KHxwkakPZqF2gRYA0Taw>
	<xmx:ougRXM5zZ9xDlTDLPgx06eQY7C6Pv9F3QSMVQ8Qc9XQCfA2w49AdoA>
	<xmx:ougRXHlAiIsnz1v530gPG-S0UnkxbZyrAcXgVoNLhnsJ2yMvxQ-f2Q>
Received: from localhost (flamenco.cs.columbia.edu [128.59.20.216])
	by mail.messagingengine.com (Postfix) with ESMTPA id 5A4721033F;
	Thu, 13 Dec 2018 00:05:38 -0500 (EST)
From: "Emilio G. Cota" <cota@braap.org>
To: qemu-devel@nongnu.org
Date: Thu, 13 Dec 2018 00:03:47 -0500
Message-Id: <20181213050453.9677-8-cota@braap.org>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20181213050453.9677-1-cota@braap.org>
References: <20181213050453.9677-1-cota@braap.org>
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 66.111.4.25
Subject: [Qemu-devel] [PATCH v5 07/73] cpu: make per-CPU locks an alias of
 the BQL in TCG rr mode
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: =?UTF-8?q?Alex=20Benn=C3=A9e?= <alex.bennee@linaro.org>,
	Paolo Bonzini <pbonzini@redhat.com>,
	Richard Henderson <richard.henderson@linaro.org>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Before we can switch from the BQL to per-CPU locks in
the CPU loop, we have to accommodate the fact that TCG
rr mode (i.e. !MTTCG) cannot work with separate per-vCPU
locks. That would lead to deadlock since we need a single
lock/condvar pair on which to wait for events that affect
any vCPU, e.g. in qemu_tcg_rr_wait_io_event.

At the same time, we are moving towards an interface where
the BQL and CPU locks are independent, and the only requirement
is that the locking order is respected, i.e. the BQL is
acquired first if both locks have to be held at the same time.

In this patch we make the BQL a recursive lock under the hood.
This allows us to (1) keep the BQL and CPU locks interfaces
separate, and (2) use a single lock for all vCPUs in TCG rr mode.

Note that the BQL's API (qemu_mutex_lock/unlock_iothread) remains
non-recursive.

Signed-off-by: Emilio G. Cota <cota@braap.org>
---
 include/qom/cpu.h |  2 +-
 cpus-common.c     |  2 +-
 cpus.c            | 91 +++++++++++++++++++++++++++++++++++++++++------
 qom/cpu.c         |  1 -
 stubs/cpu-lock.c  |  6 ++--
 5 files changed, 85 insertions(+), 17 deletions(-)

diff --git a/include/qom/cpu.h b/include/qom/cpu.h
index f0fc0bccd9..505daa6ce9 100644
--- a/include/qom/cpu.h
+++ b/include/qom/cpu.h
@@ -357,7 +357,7 @@ struct CPUState {
     int64_t icount_extra;
     sigjmp_buf jmp_env;
 
-    QemuMutex lock;
+    QemuMutex *lock;
     /* fields below protected by @lock */
     QemuCond cond;
     QSIMPLEQ_HEAD(, qemu_work_item) work_list;
diff --git a/cpus-common.c b/cpus-common.c
index c2ad554d54..36ce9872bd 100644
--- a/cpus-common.c
+++ b/cpus-common.c
@@ -171,7 +171,7 @@ void run_on_cpu(CPUState *cpu, run_on_cpu_func func, run_on_cpu_data data)
     while (!atomic_mb_read(&wi.done)) {
         CPUState *self_cpu = current_cpu;
 
-        qemu_cond_wait(&cpu->cond, &cpu->lock);
+        qemu_cond_wait(&cpu->cond, cpu->lock);
         current_cpu = self_cpu;
     }
     cpu_mutex_unlock(cpu);
diff --git a/cpus.c b/cpus.c
index cc683895d8..e85dbbb166 100644
--- a/cpus.c
+++ b/cpus.c
@@ -83,6 +83,12 @@ static unsigned int throttle_percentage;
 #define CPU_THROTTLE_PCT_MAX 99
 #define CPU_THROTTLE_TIMESLICE_NS 10000000
 
+static inline bool qemu_is_tcg_rr(void)
+{
+    /* in `make check-qtest', "use_icount && !tcg_enabled()" might be true */
+    return use_icount || (tcg_enabled() && !qemu_tcg_mttcg_enabled());
+}
+
 /* XXX: is this really the max number of CPUs? */
 #define CPU_LOCK_BITMAP_SIZE 2048
 
@@ -98,25 +104,76 @@ bool no_cpu_mutex_locked(void)
     return bitmap_empty(cpu_lock_bitmap, CPU_LOCK_BITMAP_SIZE);
 }
 
-void cpu_mutex_lock_impl(CPUState *cpu, const char *file, int line)
+static QemuMutex qemu_global_mutex;
+static __thread bool iothread_locked;
+/*
+ * In TCG rr mode, we make the BQL a recursive mutex, so that we can use it for
+ * all vCPUs while keeping the interface as if the locks were per-CPU.
+ *
+ * The fact that the BQL is implemented recursively is invisible to BQL users;
+ * the mutex API we export (qemu_mutex_lock_iothread() etc.) is non-recursive.
+ *
+ * Locking order: the BQL is always acquired before CPU locks.
+ */
+static __thread int iothread_lock_count;
+
+static void rr_cpu_mutex_lock(void)
+{
+    if (iothread_lock_count++ == 0) {
+        /*
+         * Circumvent qemu_mutex_lock_iothread()'s state keeping by
+         * acquiring the BQL directly.
+         */
+        qemu_mutex_lock(&qemu_global_mutex);
+    }
+}
+
+static void rr_cpu_mutex_unlock(void)
+{
+    g_assert(iothread_lock_count > 0);
+    if (--iothread_lock_count == 0) {
+        /*
+         * Circumvent qemu_mutex_unlock_iothread()'s state keeping by
+         * releasing the BQL directly.
+         */
+        qemu_mutex_unlock(&qemu_global_mutex);
+    }
+}
+
+static void do_cpu_mutex_lock(CPUState *cpu, const char *file, int line)
 {
-/* coverity gets confused by the indirect function call */
+    /* coverity gets confused by the indirect function call */
 #ifdef __COVERITY__
-    qemu_mutex_lock_impl(&cpu->lock, file, line);
+    qemu_mutex_lock_impl(cpu->lock, file, line);
 #else
     QemuMutexLockFunc f = atomic_read(&qemu_mutex_lock_func);
 
+    f(cpu->lock, file, line);
+#endif
+}
+
+void cpu_mutex_lock_impl(CPUState *cpu, const char *file, int line)
+{
     g_assert(!cpu_mutex_locked(cpu));
     set_bit(cpu->cpu_index + 1, cpu_lock_bitmap);
-    f(&cpu->lock, file, line);
-#endif
+
+    if (qemu_is_tcg_rr()) {
+        rr_cpu_mutex_lock();
+    } else {
+        do_cpu_mutex_lock(cpu, file, line);
+    }
 }
 
 void cpu_mutex_unlock_impl(CPUState *cpu, const char *file, int line)
 {
     g_assert(cpu_mutex_locked(cpu));
-    qemu_mutex_unlock_impl(&cpu->lock, file, line);
     clear_bit(cpu->cpu_index + 1, cpu_lock_bitmap);
+
+    if (qemu_is_tcg_rr()) {
+        rr_cpu_mutex_unlock();
+        return;
+    }
+    qemu_mutex_unlock_impl(cpu->lock, file, line);
 }
 
 bool cpu_mutex_locked(const CPUState *cpu)
@@ -1215,8 +1272,6 @@ static void qemu_init_sigbus(void)
 }
 #endif /* !CONFIG_LINUX */
 
-static QemuMutex qemu_global_mutex;
-
 static QemuThread io_thread;
 
 /* cpu creation */
@@ -1876,8 +1931,6 @@ bool qemu_in_vcpu_thread(void)
     return current_cpu && qemu_cpu_is_self(current_cpu);
 }
 
-static __thread bool iothread_locked = false;
-
 bool qemu_mutex_iothread_locked(void)
 {
     return iothread_locked;
@@ -1896,6 +1949,8 @@ void qemu_mutex_lock_iothread_impl(const char *file, int line)
 
     g_assert(!qemu_mutex_iothread_locked());
     bql_lock(&qemu_global_mutex, file, line);
+    g_assert(iothread_lock_count == 0);
+    iothread_lock_count++;
     iothread_locked = true;
 }
 
@@ -1903,7 +1958,10 @@ void qemu_mutex_unlock_iothread(void)
 {
     g_assert(qemu_mutex_iothread_locked());
     iothread_locked = false;
-    qemu_mutex_unlock(&qemu_global_mutex);
+    g_assert(iothread_lock_count > 0);
+    if (--iothread_lock_count == 0) {
+        qemu_mutex_unlock(&qemu_global_mutex);
+    }
 }
 
 static bool all_vcpus_paused(void)
@@ -2127,6 +2185,17 @@ void qemu_init_vcpu(CPUState *cpu)
         cpu_address_space_init(cpu, 0, "cpu-memory", cpu->memory);
     }
 
+    /*
+     * In TCG RR, cpu->lock is the BQL under the hood. In all other modes,
+     * cpu->lock is a standalone per-CPU lock.
+     */
+    if (qemu_is_tcg_rr()) {
+        cpu->lock = &qemu_global_mutex;
+    } else {
+        cpu->lock = g_malloc(sizeof(*cpu->lock));
+        qemu_mutex_init(cpu->lock);
+    }
+
     if (kvm_enabled()) {
         qemu_kvm_start_vcpu(cpu);
     } else if (hax_enabled()) {
diff --git a/qom/cpu.c b/qom/cpu.c
index aa15ea4af5..2ea5b1da08 100644
--- a/qom/cpu.c
+++ b/qom/cpu.c
@@ -371,7 +371,6 @@ static void cpu_common_initfn(Object *obj)
     cpu->nr_cores = 1;
     cpu->nr_threads = 1;
 
-    qemu_mutex_init(&cpu->lock);
     qemu_cond_init(&cpu->cond);
     QSIMPLEQ_INIT(&cpu->work_list);
     QTAILQ_INIT(&cpu->breakpoints);
diff --git a/stubs/cpu-lock.c b/stubs/cpu-lock.c
index 3f07d3a28b..7406a66d97 100644
--- a/stubs/cpu-lock.c
+++ b/stubs/cpu-lock.c
@@ -5,16 +5,16 @@ void cpu_mutex_lock_impl(CPUState *cpu, const char *file, int line)
 {
 /* coverity gets confused by the indirect function call */
 #ifdef __COVERITY__
-    qemu_mutex_lock_impl(&cpu->lock, file, line);
+    qemu_mutex_lock_impl(cpu->lock, file, line);
 #else
     QemuMutexLockFunc f = atomic_read(&qemu_mutex_lock_func);
-    f(&cpu->lock, file, line);
+    f(cpu->lock, file, line);
 #endif
 }
 
 void cpu_mutex_unlock_impl(CPUState *cpu, const char *file, int line)
 {
-    qemu_mutex_unlock_impl(&cpu->lock, file, line);
+    qemu_mutex_unlock_impl(cpu->lock, file, line);
 }
 
 bool cpu_mutex_locked(const CPUState *cpu)
-- 
2.17.1


