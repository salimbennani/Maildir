Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:55:14 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga007.fm.intel.com (fmsmga007.fm.intel.com [10.253.24.52])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 31478580522;
	Fri, 21 Dec 2018 12:55:21 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga007-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 21 Dec 2018 12:55:20 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ANWU+1hPHruOPNHoTSdUl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KPj7pcbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRshfWSxfDI2h?=
 =?us-ascii?q?bIUADeQBM+FXoIbhqFUOtgO+CAu3CePzyDJFnGP60Lcm3+g/FwzNwQwuH8gJsH?=
 =?us-ascii?q?TRtNj7KbsSXv6rzKbWyzXIcu9Y2TDm6IjUbB8uvO2MVq93fMrLzkkvDB/FgUuN?=
 =?us-ascii?q?poz5JD6V2eMNs2+G4OplVOKvkHQrqwZrojig38ohjJTCiIENyl3c6yl13II4Kc?=
 =?us-ascii?q?elREN1f9KoCoZcuiKGO4dsQ84vQXlktSc7x7Ecp5K2czIGxZQmyhLFafGKcI6F?=
 =?us-ascii?q?6Q/5WumLOzd3nndldaq/hxms9UigzfXxVte70FlUtCpJiNrMuW4X1xzV9MeHTu?=
 =?us-ascii?q?Fx/kC72TaAzwzT6+dELl4olafDNZIt3ro9moAOvUnNACP6glj6gayKekk+++Wl?=
 =?us-ascii?q?6fzrYrD8qZ+dM490hBv+MqMrmsGnBeQ4Mw4OX3WU+Oil173s41f5QLNUgf0yi6?=
 =?us-ascii?q?XZt57bJcIFqa6jGAJVzIkj5AilDzu809QXg2MHLFRbdxKDlYTpPEvOIP/gAfel?=
 =?us-ascii?q?n1usiCtrx+zBPrD5BpXNL3vDn6n7cbdy9k5R0w4zzdFZ55JJBbANOvPzWknttN?=
 =?us-ascii?q?PGCh81KRC7w+HiCN9lzIMRRXqPArOFMKPVqVKI5vggI+iQZIAPvzbxMfgl5+P0?=
 =?us-ascii?q?gn8/ll8QZq2p3ZoRaHClEfVqOUSZYXzwgtgfFWcGpBYxTOvviFeaSz5ce26yX7?=
 =?us-ascii?q?4g5jE8EI+pF5zDRoCqgLyCxiu7BIdZZmJdB1CIEHfocZiEWvgWZCKTJM9hjiIL?=
 =?us-ascii?q?Vby7R4A90hGusRfwy6B7IerM5i0YqZXj2cB25+LJkxE+7zh0D8WH3GGLQGF5hW?=
 =?us-ascii?q?cIRz4w3KBirk1x0FaD0a5kg/NGEdxf/e9GUgA/NZTE1ex1F8jyWh7dfteOUFup?=
 =?us-ascii?q?X8+pAS8vQd4rw98BeUB9G868gRDF2CaqB7wVl7mPBJEv9qLc3n7xJ9tyynrc1a?=
 =?us-ascii?q?khiUUmTdVLNWG8mqF/8A3TDZbTk0qFj6aqabgc3CnV+Wie12WOol9XXBRwUarf?=
 =?us-ascii?q?W3AffVXZrdLi60PGTr+uD6knMwRbxc6DLKtKdsPmjVFcSPj/P9TeZnq7m32sCh?=
 =?us-ascii?q?aQ2rOMcI3qdn0B3CXcDUgElBwT/XaGNAQkGietuWXeDCZqFVLuZUPs/vJzqHe6?=
 =?us-ascii?q?Tk8y0gGLYFdt17uz+h4Jm/OcT+kf0a4DuCcksz90Bkqy38rKC9qcoApsZL9TYd?=
 =?us-ascii?q?cj71ZIy23YtxZxMYe9L69/nFEedQd3v0Tw1xhsDoVAkM4qrG4lzQZoKKKY1k9B?=
 =?us-ascii?q?eC2c3ZzqJrLXLWzy9gi1a6HKwlHezMqW+qAX5fU4tlXvph2mGlAj8nVnydZV1X?=
 =?us-ascii?q?Sc647ODAoTV5LxT0k2+wJ7p7Hcfiky+YfU2WdwPqmztz/Iw8gpC/c9yha8Y9df?=
 =?us-ascii?q?N7uJFBXzE8IGHceuMvElm1+zYhICIu9S7q80M9q6ePSc3K6kIfhvnCihjWRB+4?=
 =?us-ascii?q?191kOM9yxhSu/HxZoFwveY3heZWDf4lluursf3mYVcbzEIAmW/0TTkBJJWZqBq?=
 =?us-ascii?q?fYcLCH2iIs2tytVlmp7tXWVV9FqiB1MAxc+odgCeb1373Q1My0sXpWarlje/zz?=
 =?us-ascii?q?xxizsptLaQ3DTSw+T+cxoKImxLS3N4jVfvIoi0iMoWXFOyYAgqlxul5ED6yLZd?=
 =?us-ascii?q?pKlkK2nTQEFIfzX5Lm14U6uwsKaCbNBL6J8yrSpXV+G8a0iASrHhuxsazz/jH2?=
 =?us-ascii?q?xGyTE7bT6qvY/1nx57iGKbN3tzqHvZecdtxRbQ/tDcRPhR3iYYSyl8kzXYGl+8?=
 =?us-ascii?q?P9yx99WOi5jDqvy+V36mVpBLcink14KAuDG75W13GxK/mf+zl8bjEQg71y/7yt?=
 =?us-ascii?q?ZrWT/JrBb6fonkyaC6Pfh7cUlvAV/289B6FZ1mkossmJEQ3mAXhpCU/XoEi2j/?=
 =?us-ascii?q?K9ta1rzlbHoRWzEL2cXa7xb/2E1sNX+Jw4P5VnOAwspufdW6Y2UW2j4j4MBOEq?=
 =?us-ascii?q?ub8LtEnS5tqFqisQ3ReeR9nisayfY29H4ahOQJtBAszyqHBLASAFJYPTftlxmT?=
 =?us-ascii?q?69C+raNXZHugcLSq1Up+m8yhA6+Gog1GRHn5fZIiFzdq7spjKFLMzGHz6ob8dd?=
 =?us-ascii?q?bLd90TsRmUkwrag+hRNZI8jf4KhSthOWLgsnwp0e87jRpy3Z6kuIiLMXli/KW8?=
 =?us-ascii?q?AhRALD36e9sT+i3xjaZZhsuW3ZqgHpB/FTUQRpfoUeikEDEPtfTkKgaOFiczqm?=
 =?us-ascii?q?yAFLrbHA+f7lpmrn3VH5CqMXGXOGcWzdF4SBaBI0xfhRgeXC8mkZ4hCgCq2Mvh?=
 =?us-ascii?q?fV955zAW+174swZMxfhuNxXlSWffowGoajgvRZibLRpW6BxC5kjPPcyf6OJzAz?=
 =?us-ascii?q?9X/pm7oAORLWybYhxCDXsVVUycG1DjIr6u6MHA8+eGB+q+LPjOYbSUpexdTfeI?=
 =?us-ascii?q?wp2v3ZV8/zaRLcWCJX1iD/w92kpeUnF1AcXZmzMTSyMJkyLBddKUpBC5+idvtM?=
 =?us-ascii?q?Cw7OzrWB7z5YuIE7ZdK8hv9AusgaidN++cniJ5KTdD25MIxH/IzqUf3VEIhyFv?=
 =?us-ascii?q?cTmtDaoPtSrXQK3Mna9XCgYRazlvO8tQ86I8wg5NNNbHitP00750lOI6B01ZWl?=
 =?us-ascii?q?zhhM6pY9cHI2W8NFPBGUaKO66KJTzNw8Hrf6y8Tadcg/lTtx21oTybCVPsPiyf?=
 =?us-ascii?q?lzn1UBCiKeFNgzudPBxbuYG9dA5iCGnjTN38bB27P8R6jTk3wb0ym3PLOnQQMT?=
 =?us-ascii?q?l6c0NRsLKQ6TlUjel4G2xEvTJZKrygmiCE9KHkLYwIuP9nGWwgi+VA/n0+x6B9?=
 =?us-ascii?q?6CBCWewwlizPqNJnv1ChlK+I0DUxAzRUrTMev56Go0hkcZ/e7YVNVWqMqAgK9n?=
 =?us-ascii?q?mdBwgiqNxiBtjuoOZX0NeZx/G7EytL79+BpZhUPMPTMs/SdSN5aRc=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ADAADpUR1ch0O0hNFkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUwMBAQEBCwGDayeMdY0qFJdLgXEXGBMBhzAiNgcNAQMBAQEBAQE?=
 =?us-ascii?q?CARMBAQEIDQkIKS+COikBgmYBAQEBAgEBAjc/BQEJAQEKGAkTEgMMSAYTBYMdg?=
 =?us-ascii?q?XoIBadPii2IU4NsF4F/g241imACi0OEZjeQGksJkV0kkV8smXCBTQKCBTMaCCg?=
 =?us-ascii?q?IgyeCJxeOOyIygQUBAY4uAQE?=
X-IPAS-Result: =?us-ascii?q?A0ADAADpUR1ch0O0hNFkGgEBAQEBAgEBAQEHAgEBAQGBUwM?=
 =?us-ascii?q?BAQEBCwGDayeMdY0qFJdLgXEXGBMBhzAiNgcNAQMBAQEBAQECARMBAQEIDQkIK?=
 =?us-ascii?q?S+COikBgmYBAQEBAgEBAjc/BQEJAQEKGAkTEgMMSAYTBYMdgXoIBadPii2IU4N?=
 =?us-ascii?q?sF4F/g241imACi0OEZjeQGksJkV0kkV8smXCBTQKCBTMaCCgIgyeCJxeOOyIyg?=
 =?us-ascii?q?QUBAY4uAQE?=
X-IronPort-AV: E=Sophos;i="5.56,382,1539673200"; 
   d="scan'208";a="56168458"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 21 Dec 2018 12:55:19 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2391881AbeLUUzR (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Fri, 21 Dec 2018 15:55:17 -0500
Received: from mail.kernel.org ([198.145.29.99]:60134 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S2391870AbeLUUzR (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 21 Dec 2018 15:55:17 -0500
Received: from gandalf.local.home (cpe-66-24-56-78.stny.res.rr.com [66.24.56.78])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id E99A621929;
        Fri, 21 Dec 2018 20:55:14 +0000 (UTC)
Date: Fri, 21 Dec 2018 15:55:13 -0500
From: Steven Rostedt <rostedt@goodmis.org>
To: Linus Torvalds <torvalds@linux-foundation.org>
Cc: Linux List Kernel Mailing <linux-kernel@vger.kernel.org>,
        Ingo Molnar <mingo@kernel.org>,
        Andrew Morton <akpm@linux-foundation.org>,
        Namhyung Kim <namhyung@kernel.org>,
        Masami Hiramatsu <mhiramat@kernel.org>,
        Joe Perches <joe@perches.com>,
        Tom Zanussi <zanussi@kernel.org>,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Subject: Re: [for-next][PATCH 23/24] string.h: Add strncmp_prefix() helper
 macro
Message-ID: <20181221155513.11450ca6@gandalf.local.home>
In-Reply-To: <CAHk-=wjtkvFUuRNZU67KccuUKYHw=pYoDMQJ_9OVDFxOwmK9zQ@mail.gmail.com>
References: <20181221175618.968519903@goodmis.org>
        <20181221175659.208858193@goodmis.org>
        <CAHk-=wg_sR-UEC1ggmkZpypOUYanL5CMX4R7ceuaV4QMf5jBtg@mail.gmail.com>
        <20181221144054.20bdeb33@gandalf.local.home>
        <CAHk-=wgSvRhj6KNRdn9gbK9RJVAswdtKSNjAxdf9O9vn04T5XQ@mail.gmail.com>
        <20181221153526.5e6055ca@gandalf.local.home>
        <CAHk-=wjtkvFUuRNZU67KccuUKYHw=pYoDMQJ_9OVDFxOwmK9zQ@mail.gmail.com>
X-Mailer: Claws Mail 3.16.0 (GTK+ 2.24.32; x86_64-pc-linux-gnu)
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Fri, 21 Dec 2018 12:41:17 -0800
Linus Torvalds <torvalds@linux-foundation.org> wrote:

> Parentheses....

?

-- Steve

> 
> On Fri, Dec 21, 2018, 12:35 Steven Rostedt <rostedt@goodmis.org wrote:
> 
> > On Fri, 21 Dec 2018 12:01:48 -0800
> > Linus Torvalds <torvalds@linux-foundation.org> wrote:
> >
> > > On Fri, Dec 21, 2018 at 11:40 AM Steven Rostedt <rostedt@goodmis.org>
> > wrote:
> > > >
> > > > OK, what about if we just use strlen() and say that this macro is not
> > > > safe for parameters with side effects.
> > >
> > > I think gcc follows simple assignments just fine, and does the
> > > optimized strlen() for them too.
> > >
> > > So why not just do
> > >
> > >    #define have_prefix(str,prefix) ({ \
> > >         const char *__pfx = prefix; \
> > >         size_t __pfxlen = strlen(__pfx); \
> > >         strncmp(str, __pfx, __pfxlen) ? 0 : __pfxlen); })
> > >
> > > and be done with it safely?
> > >
> > > The above is ENTIRELY untested.
> > >
> >
> > At first I thought this would have issues, but with a slight change...
> >
> > #define have_prefix(str, prefix) ({ \
> >         const char *__pfx = (const char *)prefix; \
> >
> >
> > And the rest the same, it appears to work.
> >
> > Need the cast because if for some reason someone passed in something
> > like "const unsigned char" then it wouldn't work. But that's just a nit.
> >
> > So something like this then?
> >
> > -- Steve
> >
> > diff --git a/include/linux/string.h b/include/linux/string.h
> > index 27d0482e5e05..4586fee60194 100644
> > --- a/include/linux/string.h
> > +++ b/include/linux/string.h
> > @@ -14,6 +14,28 @@ extern void *memdup_user(const void __user *, size_t);
> >  extern void *vmemdup_user(const void __user *, size_t);
> >  extern void *memdup_user_nul(const void __user *, size_t);
> >
> > +/**
> > + * have_prefix - Test if a string has a given prefix
> > + * @str: The string to test
> > + * @prefix: The string to see if @str starts with
> > + *
> > + * A common way to test a prefix of a string is to do:
> > + *  strncmp(str, prefix, sizeof(prefix) - 1)
> > + *
> > + * But this can lead to bugs due to typos, or if prefix is a pointer
> > + * and not a constant. Instead use has_prefix().
> > + *
> > + * Returns: 0 if @str does not start with @prefix
> > +         strlen(@prefix) if @str does start with @prefix
> > + */
> > +#define has_prefix(str, prefix)
> >       \
> > +       ({                                                              \
> > +               const char *____prefix____ = (const char *)(prefix);    \
> > +               int ____len____ = strlen(____prefix____);               \
> > +               strncmp(str, ____prefix____, ____len____) == 0 ?        \
> > +                       ____len____ : 0;                                \
> > +       })
> > +
> >  /*
> >   * Include machine specific inline routines
> >   */
> >

