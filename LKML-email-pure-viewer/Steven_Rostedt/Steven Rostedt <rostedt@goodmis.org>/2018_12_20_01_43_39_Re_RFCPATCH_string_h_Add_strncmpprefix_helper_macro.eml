Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  20 Dec 2018 16:21:14 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id D4CCE5805F0;
	Wed, 19 Dec 2018 17:43:47 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 19 Dec 2018 17:43:47 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AmW+l8BXXl4G27f30y5WBdODC84LV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhePuKdThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGo2y?=
 =?us-ascii?q?YYsRAeQcPuhYoYbyqEcTohS8CwasH/vvxz1Ti3/qwaE3yfgtHR3c0QA+Gd8FrX?=
 =?us-ascii?q?TarM/yNKcXSe270bXIwivdb/xI3zf29ZTGchc6ofGQQ71/bNbRwlQoGgPfiVWQ?=
 =?us-ascii?q?spDlMC2I2eQRqGWb4O1gVeWyhG4iqgFxuSKjxsA2ionGn48YzE3P+yZhwIstO9?=
 =?us-ascii?q?G0VEp2bcS5HJZeqS2WLZZ6T8A+T21yuSs3yKUKtJ+6cSQQ1pgqyATTZvyGfoSS?=
 =?us-ascii?q?4B/uV+CcKipiin1/YrKwnROy/FCgyuLiUsm0105HrjRKktbSrHABzR/T5dadSv?=
 =?us-ascii?q?t74Eih3SyD1wfJ6uFLOUw0lKzbJIA9wrMoiJYfrUDOEjXrlEj4kqOabFgo9+u0?=
 =?us-ascii?q?5+j9Y7jrpIeQN4puhQH/NqQulNa/AeM9MgUWW2ib+OK81KDs/EHgQ7VFkOc2kq?=
 =?us-ascii?q?/Hv5DePMgboaC4AwlL3YY58Bu/ETim38oCnXUdL1JKZgiHj473NFHKOvz4Cu2/?=
 =?us-ascii?q?g1u0nDdx2//GJqHhAonKLnXblLfhfLV95FBGxAs80NBS/JZUCrAHIPLuVU79rt?=
 =?us-ascii?q?3YDhklMwOqx+brEsly1oQbWWiXGK+WLLvSsUOU5uIoO+SMZJUauDfhK/c/4P7i?=
 =?us-ascii?q?l385mUIHcqmv0psac3S4HvVgI0WEbnvgmNYBEWEWvgUgSOzmkkGNUTlWZ3yqRa?=
 =?us-ascii?q?Iz+ik7CJ66DYfEXo2imqeB3Ce8Hp1VfGxGEEqDEXXzeoWAWvcMbj+SI8B7njwF?=
 =?us-ascii?q?U7ihV5Eu1RW0uADmzLpnK/Le+jcEupL7yNh1++rTmAkx9TNuCcSRyWWNT2BukW?=
 =?us-ascii?q?MOSD87x6R/oU17ylee3ql0mf1YFdpP5/xXVgc2L4LTz+t/C9rqQALOYs+JSEq6?=
 =?us-ascii?q?QtWhGTw+U8g+w8EQbEpnG9WtlBbD3zG0DL8TkLCLAJ808qfY33XqI8Z9ynDG1L?=
 =?us-ascii?q?QujlU8Q8tPM3GmibB79wTJG4HJlECZnb6wdasAxC7N6HuDzW2WsU5FSgFwT7vK?=
 =?us-ascii?q?UWofZkTMq9T5/V3NT7m1BLQjMwtBz9OCK6RQZt3oi1VGWOnsONDEb22tnGewAA?=
 =?us-ascii?q?6CxqmQY4ryZ2UdwCLdBVAYkwAS+HaGMhQ+Biehom7EEDxiD1XvY1no8el/rnO7?=
 =?us-ascii?q?QVQ5zwWLb01nyrq09QQZhf2aS/MPwL0EvD0tpClzHFa4x9jWEcaPpxJ9fKVAZt?=
 =?us-ascii?q?Mw+E1I1WbHuA1yIJOhL7puiUUDcwtqpUzu0RZ3CoJekcUxqHMqzQxyKb+X0V9b?=
 =?us-ascii?q?djOY24zwNaPTKmXo4B+vbKvW0EnE0NmK4qcP9Og4q1L7sQCpC0ou6Wlo38NU0n?=
 =?us-ascii?q?uc/JrKCgUSXIn1UkY28Rh6ur7bbjM854PSyX1jL620viXe1NIuAesv0gygcMtH?=
 =?us-ascii?q?MKOYCA/yFNUXB9KvKOM2gVepdA8LPOdI+K4yIcymbfqG1Le3M+l6mDKpkHpI4J?=
 =?us-ascii?q?p60kKK7Cd8Tu/I35AYw/CXxAeHVjH8jEu/vcDzg4xLeTYSHm+nwyj+GIFRfrFy?=
 =?us-ascii?q?fZoMCWq2I8y3x89yhp73V35D6V6jAUgL2MuoeRqUclz80hdc1UURoXy7hyS4yy?=
 =?us-ascii?q?Z4nC0urqqaxCbO2fjtdAIbOm5XQ2lvlVXsLpKuj9AZX0ioaBIllAC/6kb5xKhb?=
 =?us-ascii?q?paJ/IHfVQUpTeyj2LmdiUra/t7aYYs5P7o8ovjtTUOimfV+aTbv9qQMA0yz/B2?=
 =?us-ascii?q?te2Cw7dzayt5T5hRN6j3iRLHRyrHrfYsxwwRbf5NrBRf9exDYGRS94iSXJCVi4?=
 =?us-ascii?q?JdWm4dKUl5LbuOCkS22hToFTcTXszY6Ytyu0/2xqDQe/n/CugNLnFwc63DT/19?=
 =?us-ascii?q?lrUyXIsRn9bpPq16S8LeJoYE1oCEXg5Mp9H4F0ipEwi40I2XgGmpWV+mIKkWLy?=
 =?us-ascii?q?MdVYw63ydnQMSiAQw97J/gflwlZsIWyTx4L2TXidxsphZ9+nYmIZwC497sZKCL?=
 =?us-ascii?q?uK47xAhyd6vl24rQfJa/hngjgd0ecu6GIdg+wRpAotySCdDqoTHEZCOyzsig+I?=
 =?us-ascii?q?78u/rKhMYGavcL6w1FdxnNy7DbGCpB1cV2j9eps4ASBw6cB/OkrW0HLv8oHkZM?=
 =?us-ascii?q?XQbdULuxKPiRjAiOxVKI8rmvoOmCpqImb9vXwjy+4mgh1ix5C6vI6bK2pz+KK1?=
 =?us-ascii?q?GAJXNjrwZ8kL4DHikb5entqK34CoBphhGC8EXJ72QvKzCj4Sqe7rNwWTED0/t3?=
 =?us-ascii?q?ebH6DQHRSE5UdirnLPFY2rNn6NKHkYy9ViWAeSJEhFjA8IWzU6m4YzFhq2y8z5?=
 =?us-ascii?q?bEd5+jcR60b4qxtL1+JoLgT/XX3ZpAuycTc0T56fLBVN4wFG5kfVN9Ge7+1pEy?=
 =?us-ascii?q?FZ+J2hsBKCKmiBawtUCmEJX1SOB0r/Mbm2+dnA7++YC/K+L/TQYLWOqu9eV/aS?=
 =?us-ascii?q?yZKsyItm+DmMOduVPnl/FP02wU5DXXF/G8TElDQDUS0XlyTRb8GFoBew4DF4rs?=
 =?us-ascii?q?e68P7zQgLg+ZOPC6dOMdVo4x25m7qDOPWKhClnKTdUzJcMxX7Txbgb3V4SjTxu?=
 =?us-ascii?q?dja3HbQBsy7NULzfmqtNAxEHbCNzMdNC77gg0QlVJc7bltT126Zkjv40DldJT0?=
 =?us-ascii?q?Dultu1aswKPW69MkjKBEKKNLSAOD3KzNv7YaK6Sb1MkupUswe8tiqcE0/mJj6D?=
 =?us-ascii?q?jSXmVwizMeFQiyGWJBxft5u7chZoCGjjSsrpaxy7MNBtiz02zqY5hnfLNW4aLD?=
 =?us-ascii?q?h9fFlBrryW7SNEnPp/H3ZN4WZiLemByG6l6Lz6LZteifZxCSR5jKoO4nM346NY?=
 =?us-ascii?q?9ipESeczkyzX+I1AuVajx9KTxyRqVlJ0rS1XiY6X9RF4Pr7F+5VccXnD+x4I7H?=
 =?us-ascii?q?7WDA4F8Yg2Qubzsrxdn4Cc3Jn4Ly1PppeNpZMR?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AHAAAL8xpch0O0hNFkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBVAIBAQEBCwGDa40cjSoUmVErAYctIjcGDQEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BCA0JCCkvgjYkAYJiAQIDAQI3PwYJAQEKGAkTEgMMSAYYgx2CAgWpGYoujD8Xg?=
 =?us-ascii?q?X+EI4pgAotAhRiQXwmRVgwYkVksmViBXIF4MxoIKAiDKJB4IoE3AQGNYAEB?=
X-IPAS-Result: =?us-ascii?q?A0AHAAAL8xpch0O0hNFkGgEBAQEBAgEBAQEHAgEBAQGBVAI?=
 =?us-ascii?q?BAQEBCwGDa40cjSoUmVErAYctIjcGDQEDAQEBAQEBAgETAQEBCA0JCCkvgjYkA?=
 =?us-ascii?q?YJiAQIDAQI3PwYJAQEKGAkTEgMMSAYYgx2CAgWpGYoujD8XgX+EI4pgAotAhRi?=
 =?us-ascii?q?QXwmRVgwYkVksmViBXIF4MxoIKAiDKJB4IoE3AQGNYAEB?=
X-IronPort-AV: E=Sophos;i="5.56,375,1539673200"; 
   d="scan'208";a="55901099"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 19 Dec 2018 17:43:46 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729368AbeLTBno (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Wed, 19 Dec 2018 20:43:44 -0500
Received: from mail.kernel.org ([198.145.29.99]:36934 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726604AbeLTBnn (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 19 Dec 2018 20:43:43 -0500
Received: from home.goodmis.org (cpe-66-24-56-78.stny.res.rr.com [66.24.56.78])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id D5C8320672;
        Thu, 20 Dec 2018 01:43:41 +0000 (UTC)
Date: Wed, 19 Dec 2018 20:43:39 -0500
From: Steven Rostedt <rostedt@goodmis.org>
To: Joe Perches <joe@perches.com>
Cc: LKML <linux-kernel@vger.kernel.org>,
        Linus Torvalds <torvalds@linux-foundation.org>,
        Andrew Morton <akpm@linux-foundation.org>,
        Ingo Molnar <mingo@kernel.org>,
        Tom Zanussi <zanussi@kernel.org>,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        Alexander Shishkin <alexander.shishkin@linux.intel.com>
Subject: Re: [RFC][PATCH] string.h: Add strncmp_prefix() helper macro
Message-ID: <20181220014339.f32q6duwein53bfd@home.goodmis.org>
References: <20181219163207.792e0f97@gandalf.local.home>
 <b6cc5327509148fb26bfba2ca34f9c2927437707.camel@perches.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <b6cc5327509148fb26bfba2ca34f9c2927437707.camel@perches.com>
User-Agent: NeoMutt/20170113 (1.7.2)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

[ Sending now as myself and not my daughter :-p ]

On Wed, Dec 19, 2018 at 01:54:57PM -0800, Joe Perches wrote:
> On Wed, 2018-12-19 at 16:32 -0500, Bryana Rostedt wrote:
> >  
> > +/*
> > + * A common way to test a prefix of a string is to do:
> > + *  strncmp(str, prefix, sizeof(prefix) - 1)
> > + *
> > + * But this can lead to bugs due to typos, or if prefix is a pointer
> > + * and not a constant. Instead use strncmp_prefix().
> > + */
> > +#define strncmp_prefix(str, prefix)					\e
> > +	({								\
> > +		int ____strcmp_prefix_ret____;				\
> > +		char *____strcmp_prefix____ = prefix;			\
> 
> This creates a warning and discards any const from prefix when used like
> 
> 	static const char foo[] = "bar";
> 
> 	strncmp_prefix(str, foo);
> 
> > +		if (__builtin_constant_p(&prefix))			\
> > +			____strcmp_prefix_ret____ =			\
> > +				strncmp(str, prefix, sizeof(prefix) - 1); \
> > +		else							\
> > +			____strcmp_prefix_ret____ =			\
> > +				strncmp(str, ____strcmp_prefix____,	\
> > +					strlen(____strcmp_prefix____));	\
> > +		____strcmp_prefix_ret____;				\
> > +	})
> > +
> 
> Perhaps
> 
> #define strncmp_prefix(str, prefix)					\
> ({									\
> 	typeof(prefix) p = (prefix);					\
> 	strncmp(str, p, strlen(p));					\


I'll have to see how all supported  gcc optimizes that.

I could just move the prefix assignment in the else part, which gets compiled
out on constants anyway, just to be safe, and also shows exactly what is
happening and not worrying about gcc doing the "right" thing.

-- Steve


> })
> 
