Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 29 Nov 2018 08:39:55 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id E926C5803ED;
	Wed, 28 Nov 2018 10:47:11 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 28 Nov 2018 10:47:10 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Asf+09xVGenO1Th+4X679ZBUtNPzV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhCCvqdThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGo2y?=
 =?us-ascii?q?YYsRAeQcPuhWqIbyqEcBoxulHQmhBvjiyiNKiHLswaE3yfgtHR/A0Qc9H9wOqn?=
 =?us-ascii?q?PUrNDtOakPTeC60rfIwivFb/hLxTn975PIcgw/rv6RQbJ7bM3cyVMoFwPeklWf?=
 =?us-ascii?q?t5HqPy+O2+QCtGib6PdvVeeui248sQ1xpSKvxsg1h4TPm4kbyUjE+D1nzIopId?=
 =?us-ascii?q?C0UlN3bNC6HJdKqi2XNJd6TtkjTmxqoCo3y7wLtYSlcCUF0pgqxx/SZ+aFfoWL?=
 =?us-ascii?q?5B/oSfyfLi1ihH1/fbKynxay/lakyu37TsS0zllKoTRfktXWtXACyQbT6s6ZRf?=
 =?us-ascii?q?t55Euh3iyP1w/L5uFFJ0A7i7bbJoY/zrIskpcfq1nPEyHolEnskaObdVko9vKp?=
 =?us-ascii?q?5unlernmo4WTN45wigHwKKQuncm/DPw8MggPWWib5Ou92KTg/ULnWrVKiOM5kq?=
 =?us-ascii?q?3AvJDdK8UboLC2AxVO34Y95BawES2m3M4bnXYZNlJFfgyIj4zzN1HJOvD4Au+z?=
 =?us-ascii?q?g06wnzdz2/DGIrrhD43JLnjCk7fuY6xx6kFByAcoydBf5pRUCqwOIf7pW0/xss?=
 =?us-ascii?q?DYAQE9MwCu3+nnD9B93JsEWW2TGq+ZLL/SsViQ6+IvOeaMZZMVtyz6K/Q/5/7u?=
 =?us-ascii?q?kGU2mVkSfaSy2ZsXaXa4HulpIkmDYHrshMsBHnkOvgYkUOPqj1iCWyZJZ3muR6?=
 =?us-ascii?q?I8+i07CIW+AIfBQYCinqaN3CS8Hp1QYGBGDUuBEXPpd4WCRvcNZzieIs5nkjwY?=
 =?us-ascii?q?S7ehT5Ut2g2ptA//07BnNPbb+jUEtZL/09h4//fclQoy9TxzDMSRyXuNQHt2nm?=
 =?us-ascii?q?4TQz823aZ/oVFyy1uZ0Kh4heBYGsJX5/9TTgg6MpvcxfRgC9/uQgLBYsuJSFG+?=
 =?us-ascii?q?T9WlGz4xSMg9w9sPY0lnHdWigQvO3y6rA78TiryKC4Y48qPa33jtOcl9z2zK27?=
 =?us-ascii?q?Umj1kjWsFPL3GphrZj9wjPAI7Ei1iWmLy0dasCxiLN9H2MzWyVvE5GVg58VqHF?=
 =?us-ascii?q?XXMaZkvSttn54kLCT7mzCbUoKAdByMiCKrdUZd3tl1lJWPDjONHGaWKrh2iwHQ?=
 =?us-ascii?q?qIxq+LbIfyZmoSxjvdB1YenwAT53mGMxM+CTmno2/FCDxuFFTvY17j8OVkqXO7?=
 =?us-ascii?q?SFM0wB+Ob0F7y7W1/RsVj+SGS/wPxrIEpDshqzJsEVah3tLWDt2ApxZhfKRce9?=
 =?us-ascii?q?89/E1L1WXDtwx5P5ygKa9ii0UacwR2uUPuyhp2Bp9BkcgssHMl0g5yJbiE31NG?=
 =?us-ascii?q?cjOSxYrwNaHPKmnu4BCvbLbb1Uva0NmI9aYA9vQ5p0/4swG0C0Ut6XNn09pS03?=
 =?us-ascii?q?uC/ZjKCAsSUZTsUkc47RR6prfaYjUj6IPQz3FjLa60sjra0dIzGOQl0gqgf8tY?=
 =?us-ascii?q?MK6cFA7yDtcWCNS0JO0rm1imdBQEPO9J+a4wPsOmceaG2aGxMOZhmjKmkXpI4I?=
 =?us-ascii?q?Rn3k2Q8Cp8T/bC34wZzPGAwguHSzD8gU+7ssD2hY9LfysSEXe4yST+Ao5eeLdy?=
 =?us-ascii?q?fYcSBWiyOcK3wshxiID3W35f8l6uHFcG2M6veRqPYF3xxwxQ1UILoXO5nSu01S?=
 =?us-ascii?q?B7kzYsrqCHxizB3/zidAYbOm5MXGRjjVbsLZK0jtwAR0iocg4pmQCh5Ub7wahb?=
 =?us-ascii?q?uat+I3PSQUdOYyj5MWViXrGsubqFZs5F8IkovjlPUOSgfVCaTabwoxkA3CP5HG?=
 =?us-ascii?q?texzc7eyuxuprjnBx6i2OdLHBto3rfYsxwwRbf5NrBRf9exDYGRS94iSXJCVi4?=
 =?us-ascii?q?JdWm4dKUl5LbuOCkS22hToFTcTXszY6YtCq0/2pqDQe9n/CynN3qCgw60S7919?=
 =?us-ascii?q?l3WiTEthf8Yo/316ukNeJrZFVnBFj568BiAIFxjpMwhI0M2XgdnpiV/mAIkWbp?=
 =?us-ascii?q?PdVbxKLxdnwNRTEQzt7R4Qjl3lBjL32Ty4L4UHWd3tVuZ92gbmwK3SI96thACL?=
 =?us-ascii?q?2I47xcgSt1vl24oBrUYfh8nTcS0+Ei6XAEjOESpAoi0D+dDasMEklCMizhjBCI?=
 =?us-ascii?q?79G4rKVKa2eja7mw1Exind+/CLGOuB1TWHH8ep06By9/8t1/ME7Q0H308ozkZN?=
 =?us-ascii?q?7QbdcJuhyViRjAifVVKIkqlvoLnidnPWP9vXs4y+80lxBu3Je6vJSZJGVp5q62?=
 =?us-ascii?q?HhlYNjjtbcMJ5j7tlbpentqR3423BZpuADILXJ/1Tf6yFDISqO/qNwKPED06t3?=
 =?us-ascii?q?eaFqDTHQ6Z6Ed6sX3PF4qnOG2QJHkc1d9iXgWSJFRDgAAIWzU3hpw5GRqvxMP/?=
 =?us-ascii?q?a0d1/CwR6kT7qhtRyeJoKh//XX3EpAqzbjc0SZ6fLAdZ7w1Y5kfVN9Ce4fx3Hy?=
 =?us-ascii?q?1C4pKhqwmNIHSBZwtUFWEJRlCEB1f7M7iu4tnA7vGYBvekIPvIe7mOsuteV/GH?=
 =?us-ascii?q?xZ+01otm/jCMNtiAP3V4Dv073FZDUm59G8jDhzoPTCkXnTrXb8GHvBe85jF3rs?=
 =?us-ascii?q?en/fTrRg3v5IiPC7hTMdl1+BC2m6CDN+GOiyZjNDZYzYgBxXvJyLgZwV4ThDti?=
 =?us-ascii?q?dzirEbQcqyHNSLjclbNQDx4ecylzLtdH77og3glRPs7Wksn61qNjgf4vFVhEVU?=
 =?us-ascii?q?btmsWoZcERJ2G9NVXHBFuENbicJD3Lxd33br24SbFKkOpUsBiwsy6BE0D/JjSD?=
 =?us-ascii?q?iyXpVxe3POFQjSGbOQZSt52nfhlxCWjsUtTmZwa/MN92iz023LI1imnLNW4aLT?=
 =?us-ascii?q?hzbUdNoqeM4iNfh/V1A3ZB4WZ9LemYhyaZ6PHVK5YMvvttByR0luRa72w7yrtV?=
 =?us-ascii?q?9i5EQvN1lTDWrt5vpVGmj+aOxiBmUBpItjZEmoaLsV9+NqXe85kTEUrDqTYuyE?=
 =?us-ascii?q?HYXxALocZ1T97ioaZdzvDRm6/pbjRP6dTZ+Y0bHceCe+ydN390CgbkBjPSRDEC?=
 =?us-ascii?q?ViKmOX2X01Zai+2f+mG9oZ89pp3tg9wJULANBw99Le8TFkkwRI9KG5xwRD5x1O?=
 =?us-ascii?q?fD1MM=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAAAJ4v5bh0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgVqCEYw4X4spgiGXLoIHKwGHbiI0CQ0BAwEBAQEBAQIBEwEBAQg?=
 =?us-ascii?q?NCQgpL4I2JAGCaQIkDAc/BgkCKxMSAwxOGIJRS4ICBagZM4ovjBYXgX+BEYJki?=
 =?us-ascii?q?woCiSWBcoUEkAAJgWSLZINeI4F9jxiJZ40VgUyBRoINMxoIKAg7gm2CJheOOyK?=
 =?us-ascii?q?BNwEBjTADAQE?=
X-IPAS-Result: =?us-ascii?q?A0ANAAAJ4v5bh0O0hNFjHAEBAQQBAQcEAQGBUQcBAQsBgVq?=
 =?us-ascii?q?CEYw4X4spgiGXLoIHKwGHbiI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpL4I2JAGCa?=
 =?us-ascii?q?QIkDAc/BgkCKxMSAwxOGIJRS4ICBagZM4ovjBYXgX+BEYJkiwoCiSWBcoUEkAA?=
 =?us-ascii?q?JgWSLZINeI4F9jxiJZ40VgUyBRoINMxoIKAg7gm2CJheOOyKBNwEBjTADAQE?=
X-IronPort-AV: E=Sophos;i="5.56,291,1539673200"; 
   d="scan'208";a="42698197"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 28 Nov 2018 10:47:09 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727169AbeK2Ftk convert rfc822-to-8bit (ORCPT
        <rfc822;like.xu@linux.intel.com> + 23 others);
        Thu, 29 Nov 2018 00:49:40 -0500
Received: from mail.kernel.org ([198.145.29.99]:60592 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1725772AbeK2Ftk (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 29 Nov 2018 00:49:40 -0500
Received: from gandalf.local.home (cpe-66-24-56-78.stny.res.rr.com [66.24.56.78])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 65150206B2;
        Wed, 28 Nov 2018 18:47:02 +0000 (UTC)
Date: Wed, 28 Nov 2018 13:47:00 -0500
From: Steven Rostedt <rostedt@goodmis.org>
To: LKML <linux-kernel@vger.kernel.org>
Cc: Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@kernel.org>,
        Peter Zijlstra <peterz@infradead.org>,
        "Luis Claudio R. Goncalves" <lclaudio@uudg.org>,
        Arnaldo Carvalho de Melo <acme@kernel.org>,
        Jiri Olsa <jolsa@redhat.com>, ldv@altlinux.org,
        esyr@redhat.com, Frederic Weisbecker <fweisbec@gmail.com>
Subject: Rough idea of implementing blocking perf calls for system call
 tracepoints
Message-ID: <20181128134700.212ed035@gandalf.local.home>
X-Mailer: Claws Mail 3.16.0 (GTK+ 2.24.32; x86_64-pc-linux-gnu)
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 8BIT
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org


[
 Sorry for the late reply on this, when I got back from Plumbers, my
 work was really piled up, and then Turkey day came and just added more
 to the chaos.
]

From our discussion at the Linux Plumbers strace talk about
implementing strace with perf. As strace requires to be lossless, it
currently can not be implemented with perf because there's always a
chance to lose events. The idea here is to have a way to instrument a
way to record system calls from perf but also block when the perf ring
buffer is full.

Below is a patch I wrote that gives an idea of what needs to be done.
It is by no means a real patch (wont even compile). And I left out the
wake up part, as I'm not familiar enough with how perf works to
implement it. But hopefully someone on this list can :-)

The idea here is that we set the tracepoints sys_enter and sys_exit
with a new flag called TRACE_EVENT_FL_BLOCK. When the perf code records
the event, if the buffer is full, it will set a "perf_block" field in
the current task structure to point to the tp_event, if the tp_event
has the BLOCK flag set.

Then on the exit of the syscall tracepoints, the perf_block field is
checked, and if it is set, it knows that the event was dropped, and
will add itself to a wait queue. When the reader reads the perf buffer
and hits a water mark, it can wake whatever is on the queue (not sure
where to put this queue, but someone can figure it out).

Once woken, it will try to write to the perf system call tracepoint
again (notice that it only tries perf and doesn't call the generic
tracepoint code, as only perf requires a repeat).

This is just a basic idea patch, to hopefully give someone else an idea
of what I envision. I think it can work, and if it does, I can imagine
that it would greatly improve the performance of strace!

Thoughts?

-- Steve

diff --git a/arch/x86/entry/common.c b/arch/x86/entry/common.c
index 3b2490b81918..57fe95950a24 100644
--- a/arch/x86/entry/common.c
+++ b/arch/x86/entry/common.c
@@ -123,8 +123,22 @@ static long syscall_trace_enter(struct pt_regs *regs)
 	}
 #endif
 
-	if (unlikely(test_thread_flag(TIF_SYSCALL_TRACEPOINT)))
+	if (unlikely(test_thread_flag(TIF_SYSCALL_TRACEPOINT))) {
+		current->perf_block = NULL;
 		trace_sys_enter(regs, regs->orig_ax);
+		while (current->perf_block) {
+			DECLARE_WAITQUEUE(wait, current);
+			struct trace_event_call *tp_event = current->perf_block;
+
+			current->perf_block = NULL;
+
+			set_current_state(TASK_INTERRUPTIBLE);
+			add_wait_queue(&tp_event->block_queue, &wait);
+			perf_trace_sys_enter(tp_event, regs, regs->orig_ax);
+			if (current->perf_block)
+				schedule();
+		}
+	}
 
 	do_audit_syscall_entry(regs, arch);
 
@@ -224,8 +238,22 @@ static void syscall_slow_exit_work(struct pt_regs *regs, u32 cached_flags)
 
 	audit_syscall_exit(regs);
 
-	if (cached_flags & _TIF_SYSCALL_TRACEPOINT)
+	if (cached_flags & _TIF_SYSCALL_TRACEPOINT) {
+		current->perf_block = NULL;
 		trace_sys_exit(regs, regs->ax);
+		while (current->perf_block) {
+			DECLARE_WAITQUEUE(wait, current);
+			struct trace_event_call *tp_event = current->perf_block;
+
+			current->perf_block = NULL;
+
+			set_current_state(TASK_INTERRUPTIBLE);
+			add_wait_queue(&tp_event->block_queue, &wait);
+			perf_trace_sys_exit(tp_event, regs, regs->orig_ax);
+			if (current->perf_block)
+				schedule();
+		}
+	}
 
 	/*
 	 * If TIF_SYSCALL_EMU is set, we only get here because of
diff --git a/include/linux/sched.h b/include/linux/sched.h
index d6183a55e8eb..39a98da0e03b 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -1009,6 +1009,7 @@ struct task_struct {
 	struct perf_event_context	*perf_event_ctxp[perf_nr_task_contexts];
 	struct mutex			perf_event_mutex;
 	struct list_head		perf_event_list;
+	struct trace_event_call		*perf_block;
 #endif
 #ifdef CONFIG_DEBUG_PREEMPT
 	unsigned long			preempt_disable_ip;
diff --git a/include/linux/trace_events.h b/include/linux/trace_events.h
index 4130a5497d40..35a71f853d64 100644
--- a/include/linux/trace_events.h
+++ b/include/linux/trace_events.h
@@ -226,6 +226,7 @@ enum {
 	TRACE_EVENT_FL_TRACEPOINT_BIT,
 	TRACE_EVENT_FL_KPROBE_BIT,
 	TRACE_EVENT_FL_UPROBE_BIT,
+	TRACE_EVENT_FL_BLOCK_BIT,
 };
 
 /*
@@ -246,6 +247,7 @@ enum {
 	TRACE_EVENT_FL_TRACEPOINT	= (1 << TRACE_EVENT_FL_TRACEPOINT_BIT),
 	TRACE_EVENT_FL_KPROBE		= (1 << TRACE_EVENT_FL_KPROBE_BIT),
 	TRACE_EVENT_FL_UPROBE		= (1 << TRACE_EVENT_FL_UPROBE_BIT),
+	TRACE_EVENT_FL_BLOCK		= (1 << TRACE_EVENT_FL_BLOCK_BIT),
 };
 
 #define TRACE_EVENT_FL_UKPROBE (TRACE_EVENT_FL_KPROBE | TRACE_EVENT_FL_UPROBE)
diff --git a/include/trace/events/syscalls.h b/include/trace/events/syscalls.h
index 44a3259ed4a5..3fc4ecafebcf 100644
--- a/include/trace/events/syscalls.h
+++ b/include/trace/events/syscalls.h
@@ -39,7 +39,7 @@ TRACE_EVENT_FN(sys_enter,
 	syscall_regfunc, syscall_unregfunc
 );
 
-TRACE_EVENT_FLAGS(sys_enter, TRACE_EVENT_FL_CAP_ANY)
+TRACE_EVENT_FLAGS(sys_enter, TRACE_EVENT_FL_CAP_ANY | TRACE_EVENT_FL_BLOCK)
 
 TRACE_EVENT_FN(sys_exit,
 
@@ -63,7 +63,7 @@ TRACE_EVENT_FN(sys_exit,
 	syscall_regfunc, syscall_unregfunc
 );
 
-TRACE_EVENT_FLAGS(sys_exit, TRACE_EVENT_FL_CAP_ANY)
+TRACE_EVENT_FLAGS(sys_exit, TRACE_EVENT_FL_CAP_ANY | TRACE_EVENT_FL_BLOCK)
 
 #endif /* CONFIG_HAVE_SYSCALL_TRACEPOINTS */
 
diff --git a/kernel/events/core.c b/kernel/events/core.c
index 84530ab358c3..64be3de9ee41 100644
--- a/kernel/events/core.c
+++ b/kernel/events/core.c
@@ -6505,8 +6505,12 @@ __perf_event_output(struct perf_event *event,
 
 	perf_prepare_sample(&header, data, event, regs);
 
-	if (output_begin(&handle, event, header.size))
+	if (output_begin(&handle, event, header.size)) {
+		if (event->tp_event &&
+		    event->tp_event->flags & TRACE_EVENT_FL_BLOCK)
+			current->perf_block = event->tp_event;
 		goto exit;
+	}
 
 	perf_output_sample(&handle, &header, data, event);
 
