Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:53:48 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id E92A858050C;
	Fri, 21 Dec 2018 09:58:27 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga003-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 21 Dec 2018 09:58:27 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AakHV4RxK3/uSDyLXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0ekeKvad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWlPUchfWSJBHI2y?=
 =?us-ascii?q?coUPAOUdMuZDt4nwpUADrQeiCQSiGO/j1iVFi3vw0KYn0+ohCwbG3Ak4EtwTrH?=
 =?us-ascii?q?Tbssv1O7kUUeuo0KfIyi7Db+9I1jjg9IjDbxcsoeuLXbJrbcre11QgFx/eg1Wf?=
 =?us-ascii?q?rozlOC6a1uEMs2iA9eZgUvivi2E+pgx3vzOhxd8sh5HXio4Jzl3I7zh1zYgrKd?=
 =?us-ascii?q?GiVUJ2YsKoHIFRuiyYL4d7Q8IvT3t2tCs10LELuZ+2cDIIxZkkwRPUduaJfJKS?=
 =?us-ascii?q?4h35UeacOTd4i2xheLK4nxuy70egxfPmVsWu01ZFsDBFkt/SuXAJzRDT7dKHSv?=
 =?us-ascii?q?Rl8keg3zaAyRzT5/laLUwokafXMYMtz7AumpYJrEjOHTP6lF/3gaKUbkkk//Kn?=
 =?us-ascii?q?6+XjYrXovJ+cMIp0hxn6MqQvnMy/HOs5PhENX2eF4+S80qPs/UngTLVNgPw2lL?=
 =?us-ascii?q?fWsIrBKMQFqa62HRVV3pwg6xmhFTem1soXnX0dIFJCYhKHgJDlO0vSL/DgEfe/?=
 =?us-ascii?q?n1OsnS9vx/DHPb3uHI/BL3fekLr6ebZ96khcyBc8zNxF5pJUDK0BL+z3WkPrqN?=
 =?us-ascii?q?PYCRo5ORSuw+n7ENV9yp8eWWWXD6+ZKqzSsEOI6fgoI+WWZI8VpSzyK/4q5/P1?=
 =?us-ascii?q?iX85mFkdfbSm3JcNaXC4GOhmLFudYXb2ntgBFmIKtBIkTOP2kF2CTSJTZ3GqUq?=
 =?us-ascii?q?0m/TE7CIWmDYTZSoC3mrOB3jy2HplXZmBAF1CNHm3kd4SCW/cQdi2SJtVtnSAD?=
 =?us-ascii?q?VbikU4Uhzw2htBfmy7p7KerZ4i4Yuojl1NRv4+3TlAs99Tp7D8mG12GNTmd0nn?=
 =?us-ascii?q?4HRjMs3aB/p1B9xUmH0aRin/NYEtlT7etTUggmLZ7c0/B6C9fqVw3cZNiJVkip?=
 =?us-ascii?q?Ts+mAT4rSNIx2MEBY0B6F9WmjRDD2i6qDqQRl7yKApw0763d02LwJ8Z713bJyq?=
 =?us-ascii?q?0hg0M6TctIMG2snrR/+BTLB47Vj0WZkL6nerkG0y7T6miP12qOs1teUA5rT6rF?=
 =?us-ascii?q?W2sSZk/XrdT/+0PDQKWiCbUhMgtd18GCLrFGZcHujVVDXP3jIsjRY3qtm2esAh?=
 =?us-ascii?q?aF3q+MbIvve2UawCXdCEgFnxoP/XqcMgg+HCOho2PYDDxhDl/vZ0Ls8e9jqHK0?=
 =?us-ascii?q?VEM0zgeKb1F/2Lqx4BIamfucS/YL1LIepCghsyl0HEq639/OEdWAoxRufapCbt?=
 =?us-ascii?q?I9+ltIzn/ZuBFnMZymLKBigUAefh9zv0Pv0RV3F4pBndIrrHMs0Ap9N6aY3Eld?=
 =?us-ascii?q?eDOf2JD6IqfXJXXq/BCzd67W3UnT0daL+qsV9Ps0sVTivAGzGUok/HVqyN1V03?=
 =?us-ascii?q?qa5pXXAwseS5PxUkAr9xdko7HWeDUy54TR1Xd0K6m7rifC2841BOsi0hugZdZf?=
 =?us-ascii?q?P7+eGw/oDsIaANKiKOo0lFizbxIIJfxd+7QwP8y7afSGwqmrPOB7kTKijGRH5p?=
 =?us-ascii?q?19002W+yp9TO7Iw4gKw/WC0gSbUDf8iU+rstrrloBceTESAm2/xDDkBY5QfKFz?=
 =?us-ascii?q?fZwHCXyzI82x3dh+g5/tW3hF9F+sHV8G2cmpeQaMYFz5xwFfyUMXoXm/kyui0z?=
 =?us-ascii?q?N0iy0prraY3CHWweTtbgAHOm1IRGlll1vsOpK7j9MZXEipaQgmih2l6F3+x6ha?=
 =?us-ascii?q?oqR/MmbSTV1JfyjwM2FtTK+wuqCebM5I7ZMiqT9XX/ikYVCGVr79pAMX0iP5EG?=
 =?us-ascii?q?tZ3jw7dTCqupPikhx+iWKdKmtzrXXDdcFxwxff+MLTRfpL0jUaQyl4jCHdBkKg?=
 =?us-ascii?q?MNmx4dWUi5DDv/i9V227V51faynrzZ6auyu96m1nGhm/n/G1mt36Hgk2yy7719?=
 =?us-ascii?q?92VSrWqBbweJXk16O/Meh/ZElnGEf869ZmGoF5ioYwgZAQ2XsAiZmP83sIj3zz?=
 =?us-ascii?q?MclF1qLkd3UCWyQLw9HO7Qjh2U1jKG+Jxo3jWnWcxMthe8e1YmcM1i0h6MBKDb?=
 =?us-ascii?q?+e7KZYkittvlq4sQXRbOBhnjcazPsi8n8bjPsPuAow1SWdGbESEFJcPSztkRSI?=
 =?us-ascii?q?8t+/oL9WZGapbbi/yk5+kcq9A7GFpwFWQGz5dYs6HS9s8sV/N0rB32bp5YHjfN?=
 =?us-ascii?q?nQcMgfthmJkxrbi+hVKZQxlucFhCZ9OGL9u2ElxPA/jRB0wZ66u42HIX13/K2l?=
 =?us-ascii?q?Gh5YKiH1Z8QL9zHvl6lem9iZ35u1EpV9ADkLX4boTfG1EDIUr/vnLB2DEDk9qn?=
 =?us-ascii?q?edBLreEhWT6EZgr3LTDZ+rM2ubK2UezdVnXBOdPlBQgBgIXDUmmZ40DgCrxMv8?=
 =?us-ascii?q?cEdg+zAe/Fj4pgFXyuJvMRn/XXzSpAOpajcyVZieIwBa7gBE50fJL8Oe6vh/ED?=
 =?us-ascii?q?1f/p2ktAaNMHCUZxxUDWEVXUyJH1DjMaev5dnD8OiYB/CyL/jUYbWJpuxRSe2I?=
 =?us-ascii?q?xY+00oZ9+zaMN8OPPmRtDvEh20pDW2x5FNrdmzkVVyMXkCfNZdaBpBig4i13st?=
 =?us-ascii?q?y/8PPzVQ31+IuAEKFSPstv+hyshaeDNvWdhCJ4KTZey5MNymXEyLkZ3F4OlS5u?=
 =?us-ascii?q?cyOhHqgHtS7IVKjQgLNYDwYHayNvM8tF97483ghIOcLBltz5zKJ3jv4rBFdDTl?=
 =?us-ascii?q?HhnsCpZcoXI2CyLl/HBUCLNKiYKj3P2c34faS8SbhIhuVOqxKwoSqbE1PkPjmb?=
 =?us-ascii?q?lzjmTRavMeRNjCGdJBNfuYG9fQxrCWjsV9/mbhy7MNlqjTw527E0h3XKNXICPj?=
 =?us-ascii?q?h4aU9CsrqQ7SYLysl4TmhA6Gd1aOqJgSCU68HGJZsM9/hmGCJ5k6Rd+ntp5aFS?=
 =?us-ascii?q?6XR/WPFrlS2alNl1v1yqjqHb0D18TBdCth5Eg4WHuER5f6LD+c8TCj7/4BsR4D?=
 =?us-ascii?q?DIWFwxrNx/B4iq4vgIxw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAADPKB1ch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBg2snjBZfjSsUkk2EfoFzFRgTAYcwIjQJDQEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BCA0JCCkvgjopAYJnAwMBAiRSBgkBAR8MExIDDBkUGxkFgx2CAgWnHwwnhUGEb?=
 =?us-ascii?q?ow/F4F/gRGHTYYlAotDhR2QZQmNRoQXJJFfLJYzgz2BRoIOMxoIKAiDJ4InFxK?=
 =?us-ascii?q?OKSIygQUBAYtwgj4BAQ?=
X-IPAS-Result: =?us-ascii?q?A0ANAADPKB1ch0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBg2s?=
 =?us-ascii?q?njBZfjSsUkk2EfoFzFRgTAYcwIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkvgjopA?=
 =?us-ascii?q?YJnAwMBAiRSBgkBAR8MExIDDBkUGxkFgx2CAgWnHwwnhUGEbow/F4F/gRGHTYY?=
 =?us-ascii?q?lAotDhR2QZQmNRoQXJJFfLJYzgz2BRoIOMxoIKAiDJ4InFxKOKSIygQUBAYtwg?=
 =?us-ascii?q?j4BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,382,1539673200"; 
   d="scan'208";a="56148386"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 21 Dec 2018 09:58:26 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2391352AbeLUR6W (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Fri, 21 Dec 2018 12:58:22 -0500
Received: from mail.kernel.org ([198.145.29.99]:55920 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S2391135AbeLUR46 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 21 Dec 2018 12:56:58 -0500
Received: from gandalf.local.home (cpe-66-24-56-78.stny.res.rr.com [66.24.56.78])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id B0BFC21934;
        Fri, 21 Dec 2018 17:56:57 +0000 (UTC)
Received: from rostedt by gandalf.local.home with local (Exim 4.91)
        (envelope-from <rostedt@goodmis.org>)
        id 1gaP2e-0002Ki-Jw; Fri, 21 Dec 2018 12:56:56 -0500
Message-Id: <20181221175656.503716620@goodmis.org>
User-Agent: quilt/0.65
Date: Fri, 21 Dec 2018 12:56:26 -0500
From: Steven Rostedt <rostedt@goodmis.org>
To: linux-kernel@vger.kernel.org
Cc: Ingo Molnar <mingo@kernel.org>,
        Andrew Morton <akpm@linux-foundation.org>,
        Namhyung Kim <namhyung@kernel.org>,
        Masami Hiramatsu <mhiramat@kernel.org>,
        linux-arm-kernel@lists.infradead.org,
        Will Deacon <will.deacon@arm.com>,
        Mark Rutland <mark.rutland@arm.com>,
        Catalin Marinas <catalin.marinas@arm.com>
Subject: [for-next][PATCH 08/24] arm64: Use ftrace_graph_get_ret_stack() instead of curr_ret_stack
References: <20181221175618.968519903@goodmis.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-15
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From: "Steven Rostedt (VMware)" <rostedt@goodmis.org>

The structure of the ret_stack array on the task struct is going to
change, and accessing it directly via the curr_ret_stack index will no
longer give the ret_stack entry that holds the return address. To access
that, architectures must now use ftrace_graph_get_ret_stack() to get the
associated ret_stack that matches the saved return address.

Cc: linux-arm-kernel@lists.infradead.org
Cc: Will Deacon <will.deacon@arm.com>
Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Catalin Marinas <catalin.marinas@arm.com>
Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
---
 arch/arm64/kernel/perf_callchain.c |  2 +-
 arch/arm64/kernel/process.c        |  2 +-
 arch/arm64/kernel/return_address.c |  2 +-
 arch/arm64/kernel/stacktrace.c     | 12 +++++++-----
 arch/arm64/kernel/time.c           |  2 +-
 arch/arm64/kernel/traps.c          |  2 +-
 6 files changed, 12 insertions(+), 10 deletions(-)

diff --git a/arch/arm64/kernel/perf_callchain.c b/arch/arm64/kernel/perf_callchain.c
index bcafd7dcfe8b..1b792b46604e 100644
--- a/arch/arm64/kernel/perf_callchain.c
+++ b/arch/arm64/kernel/perf_callchain.c
@@ -164,7 +164,7 @@ void perf_callchain_kernel(struct perf_callchain_entry_ctx *entry,
 	frame.fp = regs->regs[29];
 	frame.pc = regs->pc;
 #ifdef CONFIG_FUNCTION_GRAPH_TRACER
-	frame.graph = current->curr_ret_stack;
+	frame.graph = 0;
 #endif
 
 	walk_stackframe(current, &frame, callchain_trace, entry);
diff --git a/arch/arm64/kernel/process.c b/arch/arm64/kernel/process.c
index d9a4c2d6dd8b..37a66394b07d 100644
--- a/arch/arm64/kernel/process.c
+++ b/arch/arm64/kernel/process.c
@@ -459,7 +459,7 @@ unsigned long get_wchan(struct task_struct *p)
 	frame.fp = thread_saved_fp(p);
 	frame.pc = thread_saved_pc(p);
 #ifdef CONFIG_FUNCTION_GRAPH_TRACER
-	frame.graph = p->curr_ret_stack;
+	frame.graph = 0;
 #endif
 	do {
 		if (unwind_frame(p, &frame))
diff --git a/arch/arm64/kernel/return_address.c b/arch/arm64/kernel/return_address.c
index 933adbc0f654..53c40196b607 100644
--- a/arch/arm64/kernel/return_address.c
+++ b/arch/arm64/kernel/return_address.c
@@ -44,7 +44,7 @@ void *return_address(unsigned int level)
 	frame.fp = (unsigned long)__builtin_frame_address(0);
 	frame.pc = (unsigned long)return_address; /* dummy */
 #ifdef CONFIG_FUNCTION_GRAPH_TRACER
-	frame.graph = current->curr_ret_stack;
+	frame.graph = 0;
 #endif
 
 	walk_stackframe(current, &frame, save_return_addr, &data);
diff --git a/arch/arm64/kernel/stacktrace.c b/arch/arm64/kernel/stacktrace.c
index 7723dadf25be..1a29f2695ff2 100644
--- a/arch/arm64/kernel/stacktrace.c
+++ b/arch/arm64/kernel/stacktrace.c
@@ -59,15 +59,17 @@ int notrace unwind_frame(struct task_struct *tsk, struct stackframe *frame)
 #ifdef CONFIG_FUNCTION_GRAPH_TRACER
 	if (tsk->ret_stack &&
 			(frame->pc == (unsigned long)return_to_handler)) {
-		if (WARN_ON_ONCE(frame->graph == -1))
-			return -EINVAL;
+		struct ftrace_ret_stack *ret_stack;
 		/*
 		 * This is a case where function graph tracer has
 		 * modified a return address (LR) in a stack frame
 		 * to hook a function return.
 		 * So replace it to an original value.
 		 */
-		frame->pc = tsk->ret_stack[frame->graph--].ret;
+		ret_stack = ftrace_graph_get_ret_stack(tsk, frame->graph++);
+		if (WARN_ON_ONCE(!ret_stack))
+			return -EINVAL;
+		frame->pc = ret_stack->ret;
 	}
 #endif /* CONFIG_FUNCTION_GRAPH_TRACER */
 
@@ -134,7 +136,7 @@ void save_stack_trace_regs(struct pt_regs *regs, struct stack_trace *trace)
 	frame.fp = regs->regs[29];
 	frame.pc = regs->pc;
 #ifdef CONFIG_FUNCTION_GRAPH_TRACER
-	frame.graph = current->curr_ret_stack;
+	frame.graph = 0;
 #endif
 
 	walk_stackframe(current, &frame, save_trace, &data);
@@ -165,7 +167,7 @@ static noinline void __save_stack_trace(struct task_struct *tsk,
 		frame.pc = (unsigned long)__save_stack_trace;
 	}
 #ifdef CONFIG_FUNCTION_GRAPH_TRACER
-	frame.graph = tsk->curr_ret_stack;
+	frame.graph = 0;
 #endif
 
 	walk_stackframe(tsk, &frame, save_trace, &data);
diff --git a/arch/arm64/kernel/time.c b/arch/arm64/kernel/time.c
index f258636273c9..a777ae90044d 100644
--- a/arch/arm64/kernel/time.c
+++ b/arch/arm64/kernel/time.c
@@ -52,7 +52,7 @@ unsigned long profile_pc(struct pt_regs *regs)
 	frame.fp = regs->regs[29];
 	frame.pc = regs->pc;
 #ifdef CONFIG_FUNCTION_GRAPH_TRACER
-	frame.graph = current->curr_ret_stack;
+	frame.graph = 0;
 #endif
 	do {
 		int ret = unwind_frame(NULL, &frame);
diff --git a/arch/arm64/kernel/traps.c b/arch/arm64/kernel/traps.c
index 5f4d9acb32f5..49ebf3771391 100644
--- a/arch/arm64/kernel/traps.c
+++ b/arch/arm64/kernel/traps.c
@@ -122,7 +122,7 @@ void dump_backtrace(struct pt_regs *regs, struct task_struct *tsk)
 		frame.pc = thread_saved_pc(tsk);
 	}
 #ifdef CONFIG_FUNCTION_GRAPH_TRACER
-	frame.graph = tsk->curr_ret_stack;
+	frame.graph = 0;
 #endif
 
 	skip = !!regs;
-- 
2.19.2


