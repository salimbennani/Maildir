Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:53:51 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id E42F658050C;
	Fri, 21 Dec 2018 09:59:36 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by fmsmga006-1.fm.intel.com with ESMTP; 21 Dec 2018 09:59:35 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AvsdM/xaS2z4YoP1q3CR0eQ3/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpci6bB7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTy9PDY2y?=
 =?us-ascii?q?YYUPEeQPIOhYoIbhqFsVtRuzBxKhBP/zxjJGmnP6wbc33uAnHArb3AIgBdUOsH?=
 =?us-ascii?q?HModvoKKcdT/61w7fOzT7ec/1W3iz96JTWfR88vfGHQLV9cdDWyUk0CwPKkEif?=
 =?us-ascii?q?qZD+MjOa0eQNtHWU7+9hVeK0kWInrBtxoje2y8oql4LHiIUVylXe+iV4xoY4Pd?=
 =?us-ascii?q?y1RUFhbd6/C5RdsTyROYhuQs46XW1kpCI3xqcbtZO1YiQG0okryh3DZ/CdcoWF?=
 =?us-ascii?q?4ArvWeeQLDtimn5od6izihaz/ES6yODxVc+520tQoCVfiNnDrHUN2gTT6seZTv?=
 =?us-ascii?q?t9+V+s2SiA1w/N8OFIO0M0mrTBK54n3LEwkoAfsUPZHi/5gEn2jamWeVs4+uWw?=
 =?us-ascii?q?9ejrfrHrqoWBO4J6lA3yKLkil8+jDegiMwUDXXCX+eGm273i+U35Tq9Kjvozkq?=
 =?us-ascii?q?TBtJDaJMIbprO2AgNM0YYs9Qy/DzG439QchHUHK1xEeBSZgIjzIFzOPv/4Auml?=
 =?us-ascii?q?g1i2kzdk2erGPrv/DZXJNHTDl63hfbll505G1AUz1cxf545TCrwZJPLzW0zxu8?=
 =?us-ascii?q?LCAh42Lgy52OLnCNR71oMDVmODGK6ZMKXOsVCW4uIjOfWDZIgQuDzlMfgq++bu?=
 =?us-ascii?q?jWMlmV8aZaSp3YEYaHGkHvt8JEWVe3rsgsobHmcMsQozV+jqiFyEUT5OaHe+Ra?=
 =?us-ascii?q?M85jcnCI24CYfPXJyigLuE3C2jBJ1ZenhGCkyQEXfvb4iLQewMaCKVIs9iiDAE?=
 =?us-ascii?q?T6KuS4062BGqtQ/6zadnL+XO9i0Zs5LjyMZ65+nJmR4u8jx0CtyX03uRQGFsgm?=
 =?us-ascii?q?MIWzg20bh8oUNnzFePy6x4g/1CGtxV6PNESQM6NZ/az+xnBNH+QAPBftGVSFm4?=
 =?us-ascii?q?RtWqGy0+TtU0w9UWeUZyB82ijgzf3yqtG7IaiqaEBIIq/a7G33j+PcB9y23Y26?=
 =?us-ascii?q?kniFUmRshPNWiihqNk8wjTBojJk1iWlqqwdKQc2jLN+3mHzWaUoE5YVwtwW73f?=
 =?us-ascii?q?XX8DfkvWscj55kTaQrCzE7snLBVOxdSCKqRQbN3plktJRPH4NdTaYmKxnXqwBB?=
 =?us-ascii?q?mSyrONaorqZ3sS3CHHBEcYlAAT+G6MNRIiCSe5v2LeEDtuGErzY0Pt9Ol+r2+7?=
 =?us-ascii?q?Tk80zg2Qc01tzb21+gQRhfydTfMT0akJuCMgqzVyAVa80MjaC9uGpwp9YqpcZc?=
 =?us-ascii?q?kx70tA1WLcrwZ9JICvL7h+hl4CdAR6p1nh1xFpBYRPj8crrGkmwxFvKa2FylxB?=
 =?us-ascii?q?cTCY3ZfuOrDMLmny/Rava7PZ213E0daW/LsP5+o8q1n5oA6pEU8i+W1909ZJy3?=
 =?us-ascii?q?uc+onKDA0KXJPxT0Y77QR1q6vbYyk9/YzU03JsPLKwsj/D3dIpGeQkxgyhf9dZ?=
 =?us-ascii?q?LKOLCgvyH9cGCMipLewgg0KpYQ4cPOBO6K40ONurd+GH2KG3Julghi+pjWNd7I?=
 =?us-ascii?q?B7zE2M7St8RvfU0Jkfx/GXwxWIVy37jFenqc33nYFEZTcPHmuw0yTkBYhRZrFs?=
 =?us-ascii?q?coYPE2uhP8q3xtBmjZ73R3FY7EKjB08B2MKxeRuSbkbx3A1K2UQMvHynnzC1zz?=
 =?us-ascii?q?h1kzEvs6qe0zbCw+XkdBobJGFLQHNugkvrIYixl9oaRlSnbxA1lBu54kb336pb?=
 =?us-ascii?q?q75lL2nQQkdIeDL6L3p4XauztbqCYshP540usShMVOS8YFaaSqPyohcA0iPjGX?=
 =?us-ascii?q?deyy4/dz2wppr5mBl6gnqHLHlvtHrZZd1wxRDH6d3cX/FR2SAKRCt5iTnRHVW8?=
 =?us-ascii?q?O9ip/dOJl5bMqOy+VmShVoFNfinv14+PqCy75WhyCx2lg/+zgsHnERQ90SLj1N?=
 =?us-ascii?q?llTyTIoAz8Yon2zau6N+1nc1JsBF/97cp6B45/npExhJEWxXgVmJGV8WAbnmf0?=
 =?us-ascii?q?NNVRwbj+Y2YVRT4X397V5xDo2EhiLnKK3Y31THuczdV6Z9mmfGwWwDky4N5QCK?=
 =?us-ascii?q?eb97FEmSp1olylrQPee/R9nzEdyecw534eme0GpA0tziCFCLAIAUZYJTDslwiP?=
 =?us-ascii?q?792msKVXY2OvfaKx1UVkm9ChEaqCohpdWHvifpciHClw7thwMV7W0X3z7J3kd8?=
 =?us-ascii?q?fUbd4JqhKUlBLAhfBPKJ0tjvoKmTZnOWXlsHI+0eE7ihhu3YygsIiDNmVg56a5?=
 =?us-ascii?q?Ah9eNj3oaMIf4DDtjaBCnsmI24CjBIluGjIOXJHwV/KnDCoStej7NwaJCDA8qG?=
 =?us-ascii?q?2UGb/BEg+E8ktms2jDE5O2N3GUOXkZy89tRAKGKUxbgQAUWig6n5EjGgCrwszh?=
 =?us-ascii?q?bFl25jQL6lHkrRtMz/piNwPjXWfHuAeodjA0RYCfLRpR8wFC/lrVPtaY7u5pBC?=
 =?us-ascii?q?FY+ZuhrAOWJ2yfZgRIC3wJW0OeC1DiOLmu+cfP8+yCCuWiKPvOZK2EqfZCWPeQ?=
 =?us-ascii?q?2ZKvzoxm8i6MNsqRP3liDP472ktZUXB6AcTZnDoPRDINlyLQdM6WvxO8+ixxrs?=
 =?us-ascii?q?Ci//XnQgPv5Y2TC7RMNdVj4Qy5gaCGN+SIniZ2NS5Y1o8QxX/P0LUQxkMShDp0?=
 =?us-ascii?q?dzazEbUMryrNTKPLl69TDh4bbT5zNcRS46I92AlNJdDUitfv2rFkif41Dk9PVU?=
 =?us-ascii?q?b9lcGxecwKP2a9OUvbBEaKMbSKPyHEz9vrbqO8V7JQiv5ZtxmxuTadDk/iMS6P?=
 =?us-ascii?q?lzjvVxCzL+5MiDuXMwBZuIG4ahxtE3TsTMr6ah2nN996lT03zqcyhnPPNG4cNy?=
 =?us-ascii?q?BzckJNrrKK6yNYje5yG2hA7npjMOmFlDyV7+jeKpYKr/RrBj54mP5d4HQ/mPNp?=
 =?us-ascii?q?63RARfpoiG7Ro8RorlWOjOaC0HxkXQBIpzINg5iE7mt4PqCMzYVNR3vCtCgK9n?=
 =?us-ascii?q?mdBwhC88FiEcHit7x4xd/ImKfyM3FF6d2CrphUPNTdNM/SaClpChHuAjOBSVJd?=
 =?us-ascii?q?FTM=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ATAAD5IR1ch0O0hNFkHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGDayeMFl+NKxSXS4FzFRgTAYcwIjQJDQEDAQEBAQEBAgETAQEBCA0JCCk?=
 =?us-ascii?q?vgjopAYJnAwMBAiRSBgkBAR8MExIDDC0bGQWDHYICBacaDCeFQYRvjD8XgX+BE?=
 =?us-ascii?q?YJkiw4CiUuBeIUdkAtaCZFdJJFfmhyBRoIOMxoIKAiDJ4InFxKOKSIygQUBAY4?=
 =?us-ascii?q?uAQE?=
X-IPAS-Result: =?us-ascii?q?A0ATAAD5IR1ch0O0hNFkHQEBBQEHBQGBUQgBCwGDayeMFl+?=
 =?us-ascii?q?NKxSXS4FzFRgTAYcwIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkvgjopAYJnAwMBA?=
 =?us-ascii?q?iRSBgkBAR8MExIDDC0bGQWDHYICBacaDCeFQYRvjD8XgX+BEYJkiw4CiUuBeIU?=
 =?us-ascii?q?dkAtaCZFdJJFfmhyBRoIOMxoIKAiDJ4InFxKOKSIygQUBAY4uAQE?=
X-IronPort-AV: E=Sophos;i="5.56,382,1539673200"; 
   d="scan'208";a="45015040"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 21 Dec 2018 09:58:33 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2391340AbeLUR6V (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Fri, 21 Dec 2018 12:58:21 -0500
Received: from mail.kernel.org ([198.145.29.99]:55882 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S2390986AbeLUR46 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 21 Dec 2018 12:56:58 -0500
Received: from gandalf.local.home (cpe-66-24-56-78.stny.res.rr.com [66.24.56.78])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id E7F5421974;
        Fri, 21 Dec 2018 17:56:56 +0000 (UTC)
Received: from rostedt by gandalf.local.home with local (Exim 4.91)
        (envelope-from <rostedt@goodmis.org>)
        id 1gaP2e-0002Ia-0L; Fri, 21 Dec 2018 12:56:56 -0500
Message-Id: <20181221175655.883112589@goodmis.org>
User-Agent: quilt/0.65
Date: Fri, 21 Dec 2018 12:56:22 -0500
From: Steven Rostedt <rostedt@goodmis.org>
To: linux-kernel@vger.kernel.org
Cc: Ingo Molnar <mingo@kernel.org>,
        Andrew Morton <akpm@linux-foundation.org>,
        Namhyung Kim <namhyung@kernel.org>,
        Masami Hiramatsu <mhiramat@kernel.org>,
        Thomas Gleixner <tglx@linutronix.de>,
        Borislav Petkov <bp@alien8.de>,
        "H. Peter Anvin" <hpa@zytor.com>, x86@kernel.org
Subject: [for-next][PATCH 04/24] x86/ftrace: Do not call function graph from dynamic trampolines
References: <20181221175618.968519903@goodmis.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-15
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From: "Steven Rostedt (VMware)" <rostedt@goodmis.org>

Since commit 79922b8009c07 ("ftrace: Optimize function graph to be
called directly"), dynamic trampolines should not be calling the
function graph tracer at the end. If they do, it could cause the function
graph tracer to trace functions that it filtered out.

Right now it does not cause a problem because there's a test to check if
the function graph tracer is attached to the same function as the
function tracer, which for now is true. But the function graph tracer is
undergoing changes that can make this no longer true which will cause
the function graph tracer to trace other functions.

 For example:

 # cd /sys/kernel/tracing/
 # echo do_IRQ > set_ftrace_filter
 # mkdir instances/foo
 # echo ip_rcv > instances/foo/set_ftrace_filter
 # echo function_graph > current_tracer
 # echo function > instances/foo/current_tracer

Would cause the function graph tracer to trace both do_IRQ and ip_rcv,
if the current tests change.

As the current tests prevent this from being a problem, this code does
not need to be backported. But it does make the code cleaner.

Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Borislav Petkov <bp@alien8.de>
Cc: "H. Peter Anvin" <hpa@zytor.com>
Cc: x86@kernel.org
Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
---
 arch/x86/kernel/ftrace.c    | 41 ++++++++++++++++++++-----------------
 arch/x86/kernel/ftrace_64.S |  8 ++++----
 2 files changed, 26 insertions(+), 23 deletions(-)

diff --git a/arch/x86/kernel/ftrace.c b/arch/x86/kernel/ftrace.c
index 7ee8067cbf45..8257a59704ae 100644
--- a/arch/x86/kernel/ftrace.c
+++ b/arch/x86/kernel/ftrace.c
@@ -733,18 +733,20 @@ union ftrace_op_code_union {
 	} __attribute__((packed));
 };
 
+#define RET_SIZE		1
+
 static unsigned long
 create_trampoline(struct ftrace_ops *ops, unsigned int *tramp_size)
 {
-	unsigned const char *jmp;
 	unsigned long start_offset;
 	unsigned long end_offset;
 	unsigned long op_offset;
 	unsigned long offset;
 	unsigned long size;
-	unsigned long ip;
+	unsigned long retq;
 	unsigned long *ptr;
 	void *trampoline;
+	void *ip;
 	/* 48 8b 15 <offset> is movq <offset>(%rip), %rdx */
 	unsigned const char op_ref[] = { 0x48, 0x8b, 0x15 };
 	union ftrace_op_code_union op_ptr;
@@ -764,27 +766,27 @@ create_trampoline(struct ftrace_ops *ops, unsigned int *tramp_size)
 
 	/*
 	 * Allocate enough size to store the ftrace_caller code,
-	 * the jmp to ftrace_epilogue, as well as the address of
-	 * the ftrace_ops this trampoline is used for.
+	 * the iret , as well as the address of the ftrace_ops this
+	 * trampoline is used for.
 	 */
-	trampoline = alloc_tramp(size + MCOUNT_INSN_SIZE + sizeof(void *));
+	trampoline = alloc_tramp(size + RET_SIZE + sizeof(void *));
 	if (!trampoline)
 		return 0;
 
-	*tramp_size = size + MCOUNT_INSN_SIZE + sizeof(void *);
+	*tramp_size = size + RET_SIZE + sizeof(void *);
 
 	/* Copy ftrace_caller onto the trampoline memory */
 	ret = probe_kernel_read(trampoline, (void *)start_offset, size);
-	if (WARN_ON(ret < 0)) {
-		tramp_free(trampoline, *tramp_size);
-		return 0;
-	}
+	if (WARN_ON(ret < 0))
+		goto fail;
 
-	ip = (unsigned long)trampoline + size;
+	ip = trampoline + size;
 
-	/* The trampoline ends with a jmp to ftrace_epilogue */
-	jmp = ftrace_jmp_replace(ip, (unsigned long)ftrace_epilogue);
-	memcpy(trampoline + size, jmp, MCOUNT_INSN_SIZE);
+	/* The trampoline ends with ret(q) */
+	retq = (unsigned long)ftrace_stub;
+	ret = probe_kernel_read(ip, (void *)retq, RET_SIZE);
+	if (WARN_ON(ret < 0))
+		goto fail;
 
 	/*
 	 * The address of the ftrace_ops that is used for this trampoline
@@ -794,17 +796,15 @@ create_trampoline(struct ftrace_ops *ops, unsigned int *tramp_size)
 	 * the global function_trace_op variable.
 	 */
 
-	ptr = (unsigned long *)(trampoline + size + MCOUNT_INSN_SIZE);
+	ptr = (unsigned long *)(trampoline + size + RET_SIZE);
 	*ptr = (unsigned long)ops;
 
 	op_offset -= start_offset;
 	memcpy(&op_ptr, trampoline + op_offset, OP_REF_SIZE);
 
 	/* Are we pointing to the reference? */
-	if (WARN_ON(memcmp(op_ptr.op, op_ref, 3) != 0)) {
-		tramp_free(trampoline, *tramp_size);
-		return 0;
-	}
+	if (WARN_ON(memcmp(op_ptr.op, op_ref, 3) != 0))
+		goto fail;
 
 	/* Load the contents of ptr into the callback parameter */
 	offset = (unsigned long)ptr;
@@ -819,6 +819,9 @@ create_trampoline(struct ftrace_ops *ops, unsigned int *tramp_size)
 	ops->flags |= FTRACE_OPS_FL_ALLOC_TRAMP;
 
 	return (unsigned long)trampoline;
+fail:
+	tramp_free(trampoline, *tramp_size);
+	return 0;
 }
 
 static unsigned long calc_trampoline_call_offset(bool save_regs)
diff --git a/arch/x86/kernel/ftrace_64.S b/arch/x86/kernel/ftrace_64.S
index 91b2cff4b79a..75f2b36b41a6 100644
--- a/arch/x86/kernel/ftrace_64.S
+++ b/arch/x86/kernel/ftrace_64.S
@@ -171,9 +171,6 @@ GLOBAL(ftrace_call)
 	restore_mcount_regs
 
 	/*
-	 * The copied trampoline must call ftrace_epilogue as it
-	 * still may need to call the function graph tracer.
-	 *
 	 * The code up to this label is copied into trampolines so
 	 * think twice before adding any new code or changing the
 	 * layout here.
@@ -185,7 +182,10 @@ GLOBAL(ftrace_graph_call)
 	jmp ftrace_stub
 #endif
 
-/* This is weak to keep gas from relaxing the jumps */
+/*
+ * This is weak to keep gas from relaxing the jumps.
+ * It is also used to copy the retq for trampolines.
+ */
 WEAK(ftrace_stub)
 	retq
 ENDPROC(ftrace_caller)
-- 
2.19.2


