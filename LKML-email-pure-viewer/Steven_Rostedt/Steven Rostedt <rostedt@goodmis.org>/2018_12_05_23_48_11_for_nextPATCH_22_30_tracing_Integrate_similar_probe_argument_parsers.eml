Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 06 Dec 2018 09:00:48 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga007.fm.intel.com (fmsmga007.fm.intel.com [10.253.24.52])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 0D70D58052C;
	Wed,  5 Dec 2018 15:50:03 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by fmsmga007-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 05 Dec 2018 15:50:02 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Ag5V0gBS+A2B/Q6xCl8qmiwgwftpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64YByDt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZAY2z?=
 =?us-ascii?q?YYUBAeofM+hFoYnyqEcBrQCmBQSuH+7v1iNEi3Hq0aEmyeksEwfL1xEgEdIUt3?=
 =?us-ascii?q?TUqc34OroOUe+r0qnH0zPDZO5K1zf684jIbg4uruyQXbltdsfR004vFxjZjlqO?=
 =?us-ascii?q?tIPlIyiY1usKs2ic8uVgUOOvi3U9pwF2uDivyd4hh4/UjYwbzVDE8D92wIczJd?=
 =?us-ascii?q?CgS050f8SkEJ1OuCGeLYd2RdkiQ25utS0nybMGoYa2cDYWxJkj3RLTdvKKf5aS?=
 =?us-ascii?q?7h7+V+udPS10iXNndb6nhhu/8FKsxvPzW8Wu0FtHrzBJn9vPu30Lyhfd8NKISu?=
 =?us-ascii?q?Fn8UekwTuP1x7c6uVDIU0si6rbJIAuwqQqmpoQr0vDBCn2l1vyjKOMcUUk4Oeo?=
 =?us-ascii?q?5/zmYrXguJCcK5d5hh/iPqkqgMCzHOo1PhYUU2SG+umwyKfv8Ez7TblSi/05iK?=
 =?us-ascii?q?jZsJTUJcQBoa65BhdY0oIi6xa5Ejen380UnXoZI1JffhKIkYzpN0jJIPH2C/ew?=
 =?us-ascii?q?nU6snSx1x/DJILLhGI/BLnvdn7f7e7Zy9UpcxBA0zdBF6JJYEqsBL+7rWk/tqN?=
 =?us-ascii?q?zYCQc0Mwi1w+bkFtpxzIwfWX+UD6+dMaPSt0KI5+01L+mNYo8VpCjyK/w/6/Hy?=
 =?us-ascii?q?in85nEcXfbO10psPdHC4AvNmLl2ZYXX2g9cBDX0Fvg0kQOzqlV2NSzhTZ3mpUq?=
 =?us-ascii?q?I45zE7Dp+mDIjZSoCshryBwDm0HplMam9aDVCMFG/id5+YVPcUdCKSPshhnyQG?=
 =?us-ascii?q?VbimVYAtzxKutAj8y7phKerZ4SkYtZPl1Nho6OzfjxAy9TpoD8uD12GBVX17nm?=
 =?us-ascii?q?QNRzUuxqBwvVR9ykuf0ah/m/FXD8dT5/NOUgc5L5Lc1fZ1C9LpVwLFf9eJTkum?=
 =?us-ascii?q?Q9q8DTEwSNIx38EBY0JnF9q+iRDD2jKgA6UJmLyTGJw07qXc0mDyJ8lnzXbKzq?=
 =?us-ascii?q?0hj1g8TctJOm2rnap/9wnVB47UnESVjaeqdaIA3CHT8GeP13aBvEZdUARoS6XK?=
 =?us-ascii?q?QWgfZlfKrdT+/k7NUqWhCao5PQdbyc6NMK1Kasb3glVAQ/vjPNfeY2e1m2qrAR?=
 =?us-ascii?q?aIx7WMbJflemkH3SXdDlQEnB4X/XqcKQc+ASKhqXrEDDNyDVLvf1/s8e5mpXym?=
 =?us-ascii?q?VEA00R+FY1dh17Wv/B4VnuKTS/UI07IAuSchrSh0HVmn09LXDdqAuxRufKFGbd?=
 =?us-ascii?q?wh51dH0HrTtxZhMZy4M6Bimlkefhxrv0Pv0hV3DZlAkcgqrX8w0Ap+M6WY0ElF?=
 =?us-ascii?q?dzOZ25DwNabaKm3z/BCpdq7X1UvS0NeQ+qcT9vs4r0/vsx2uFkon639nycVa02?=
 =?us-ascii?q?OA5pXWCwofSYj+UkIp+Bl1ub7bYjMx6JjJ1XJxK6a0tDzC29U3BOY+zhagftFf?=
 =?us-ascii?q?ML6LFQPoEs0aAdSuJ/Ium1Szch0EO+VS/rYuP8y6b/uGxLKrPOF4kTOmkGRL+p?=
 =?us-ascii?q?xy3liN9ip8UOHI2ZkFzuqc3guGUTf8kVigvtr2mYBCeTEdAG6/xTL4C45WY614?=
 =?us-ascii?q?ZZwLBnu2I82r2tV+gIbgW2RZ9FG/HVwGwtKmeR2IY1z7wwJQz0UXrWW7liSiyz?=
 =?us-ascii?q?x7ji8mrrCY3CzI2OnicBsHOmhWRGhtl1vsII60j8wEU0isdQQmiByl5UPizahB?=
 =?us-ascii?q?uKt/N3XTQVtPfyXuL2BiU7G8t7qYb85U9ZMotz5aUOC9YVCcV778rAEW0yLlH2?=
 =?us-ascii?q?tC2j87cyumtYn+nxx/kGidNmp8rGLFecFswhfS/N7cSuRL3joFRyl4jiPbBkOm?=
 =?us-ascii?q?MNmq/tWUlpHDvf64V2+6Up1TcC/rzZ6PtSeh5G1qBwG/kO63mtH9DQc61ir73c?=
 =?us-ascii?q?FwVSrUtBb8fpXr16OiPONnZEZoA0Xw68h7GoF4iYYwgJAQ2X4HhpSa53YHkGHz?=
 =?us-ascii?q?MclF1qL6dnYCWTkLw9vN6gj/xEJjNm6Jx57+VniFwctufdi6bnkW2iIg9c9KDq?=
 =?us-ascii?q?iU4adAnSt0pFq4sA3QbeJ8njcb1fsh9noaj/sVtwoqyyWXGqoSElVAPSzwixSI?=
 =?us-ascii?q?6MizrKBWZGasa7e8zkR/ks66DLGevA5cQm32dYk4HS9/9ch/NFPM0Hvu6oDrYt?=
 =?us-ascii?q?XQbNQTtgGKnBfEleRaNJUxlv8Sjyp9JW39pWEly/I8jRF2wZG6u42HJ39s/a2j?=
 =?us-ascii?q?BB5YKyb1Z9gS+jz2iaZen8CW352gH5l7GzULWofoQuysED4IqfvnMAOOGiUmqn?=
 =?us-ascii?q?iHAbrfAROf6EB+on3UCZ+rMHWXJGQDwdVmWRmQP0hfgAESXDUnkZ81DAGqxMr9?=
 =?us-ascii?q?cEhn4jAd/EL3qhxJyuhwLRnwTn/fpBu0ajczUJWfLgBZ7gRc6EfOK8Ce8vh/Hy?=
 =?us-ascii?q?JF/p2isQyNLHaUZx9TAGENW0yEAU3jP7a06dnB9eiYGvSxL//UbbqSruxeUu+C?=
 =?us-ascii?q?xYiz3Yt+4zaMKsKPM2FiDv08x0pDRG15FN7fmzkVUCwXkCTNb8GAqRe4+y13qN?=
 =?us-ascii?q?2/8fvxVALu44uPF6VdMdF19x+qhqeDMvaahDxlJjZAypMM2XjIxaAf3FEMiiFu?=
 =?us-ascii?q?dDqtEbUauS7OVqLQnaBXAAABayNuL8tF9KY83ghLOc7GhdL5zL94jvgpC1hbUV?=
 =?us-ascii?q?ztgN2mZcsPI2ulLlPIGF6LNKiaJT3M28z4e768RqZKjOpKtxy8ozKbE074MzSH?=
 =?us-ascii?q?ljnpUQ2vMO5WgCGaOhxepJ+ychJ3BWf/S9LmbwWxMMVrgj0u3b00mnTKOHYAMT?=
 =?us-ascii?q?h9dkNBtKGf4TlEjfV/BWNB6GFoLe2Fmyaf8unZJYwasfptAiRoie1a5G42xKdS?=
 =?us-ascii?q?7CFBXPZ1gjfdrsZyo1G6lemC0jpmXwBIqjZOhYKLu11tOKTZ9pZaX3bE8wkA7W?=
 =?us-ascii?q?GRCxQMuttkBcfju6FWytjTiq3zLC1O/M7T/csZVIDoL5eDMXw8IV/qFSTSAQ8t?=
 =?us-ascii?q?UzGmLyfcilZbnfXU8Wea/bYgrZ25o4YDVLJdHGYyDe8XBlgtSMYFO4t6Ui8Mnr?=
 =?us-ascii?q?mcgMsJ/jy5thaHF5YShYzOSv/HWaanEz2el7QRIkJQmb4=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AJAACnYwhch0O0hNFkGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUwQBAQELAYFagQ+BAieDeYh4iy6CDRRojUWJC4FzFBgNBgGHUyI2Bw0?=
 =?us-ascii?q?BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmIDAwECIARSBgkBAR8FAgUTDgICA?=
 =?us-ascii?q?wwtGxkFglFLAYIBBQqmC3wMJ4NBbAGBE4RtgQuLExeBf4ERgl2IOoJXAokpCoF?=
 =?us-ascii?q?vhBN8UI9VCYcDijQjgiiPB4p5gnmLDIFNDIF6MxoIKAiDJwkKghQXiF6FXSIyA?=
 =?us-ascii?q?QEBgQIBAYpSAQE?=
X-IPAS-Result: =?us-ascii?q?A0AJAACnYwhch0O0hNFkGwEBAQEDAQEBBwMBAQGBUwQBAQE?=
 =?us-ascii?q?LAYFagQ+BAieDeYh4iy6CDRRojUWJC4FzFBgNBgGHUyI2Bw0BAwEBAQEBAQIBE?=
 =?us-ascii?q?wEBAQgNCQgpIwyCNiQBgmIDAwECIARSBgkBAR8FAgUTDgICAwwtGxkFglFLAYI?=
 =?us-ascii?q?BBQqmC3wMJ4NBbAGBE4RtgQuLExeBf4ERgl2IOoJXAokpCoFvhBN8UI9VCYcDi?=
 =?us-ascii?q?jQjgiiPB4p5gnmLDIFNDIF6MxoIKAiDJwkKghQXiF6FXSIyAQEBgQIBAYpSAQE?=
X-IronPort-AV: E=Sophos;i="5.56,320,1539673200"; 
   d="scan'208";a="54731466"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 05 Dec 2018 15:50:01 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729174AbeLEXtg (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 5 Dec 2018 18:49:36 -0500
Received: from mail.kernel.org ([198.145.29.99]:58388 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1728939AbeLEXsd (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 5 Dec 2018 18:48:33 -0500
Received: from gandalf.local.home (cpe-66-24-56-78.stny.res.rr.com [66.24.56.78])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id C6827214F1;
        Wed,  5 Dec 2018 23:48:32 +0000 (UTC)
Received: from rostedt by gandalf.local.home with local (Exim 4.91)
        (envelope-from <rostedt@goodmis.org>)
        id 1gUgu7-0000IC-RD; Wed, 05 Dec 2018 18:48:31 -0500
Message-Id: <20181205234831.742480131@goodmis.org>
User-Agent: quilt/0.65
Date: Wed, 05 Dec 2018 18:48:11 -0500
From: Steven Rostedt <rostedt@goodmis.org>
To: linux-kernel@vger.kernel.org
Cc: Ingo Molnar <mingo@kernel.org>,
        Andrew Morton <akpm@linux-foundation.org>,
        Namhyung Kim <namhyung@kernel.org>,
        Masami Hiramatsu <mhiramat@kernel.org>,
        Tom Zanussi <zanussi@kernel.org>,
        Ravi Bangoria <ravi.bangoria@linux.vnet.ibm.com>,
        Tom Zanussi <tom.zanussi@linux.intel.com>
Subject: [for-next][PATCH 22/30] tracing: Integrate similar probe argument parsers
References: <20181205234749.372720574@goodmis.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From: Masami Hiramatsu <mhiramat@kernel.org>

Integrate similar argument parsers for kprobes and uprobes events
into traceprobe_parse_probe_arg().

Link: http://lkml.kernel.org/r/154140850016.17322.9836787731210512176.stgit@devbox

Reviewed-by: Tom Zanussi <tom.zanussi@linux.intel.com>
Tested-by: Tom Zanussi <tom.zanussi@linux.intel.com>
Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
---
 kernel/trace/trace_kprobe.c | 48 ++-----------------------------------
 kernel/trace/trace_probe.c  | 47 +++++++++++++++++++++++++++++++++---
 kernel/trace/trace_probe.h  |  7 ++----
 kernel/trace/trace_uprobe.c | 44 ++--------------------------------
 4 files changed, 50 insertions(+), 96 deletions(-)

diff --git a/kernel/trace/trace_kprobe.c b/kernel/trace/trace_kprobe.c
index fec67188c4d2..d313bcc259dc 100644
--- a/kernel/trace/trace_kprobe.c
+++ b/kernel/trace/trace_kprobe.c
@@ -548,7 +548,6 @@ static int create_trace_kprobe(int argc, char **argv)
 	bool is_return = false, is_delete = false;
 	char *symbol = NULL, *event = NULL, *group = NULL;
 	int maxactive = 0;
-	char *arg;
 	long offset = 0;
 	void *addr = NULL;
 	char buf[MAX_EVENT_NAME_LEN];
@@ -676,53 +675,10 @@ static int create_trace_kprobe(int argc, char **argv)
 	}
 
 	/* parse arguments */
-	ret = 0;
 	for (i = 0; i < argc && i < MAX_TRACE_ARGS; i++) {
-		struct probe_arg *parg = &tk->tp.args[i];
-
-		/* Increment count for freeing args in error case */
-		tk->tp.nr_args++;
-
-		/* Parse argument name */
-		arg = strchr(argv[i], '=');
-		if (arg) {
-			*arg++ = '\0';
-			parg->name = kstrdup(argv[i], GFP_KERNEL);
-		} else {
-			arg = argv[i];
-			/* If argument name is omitted, set "argN" */
-			snprintf(buf, MAX_EVENT_NAME_LEN, "arg%d", i + 1);
-			parg->name = kstrdup(buf, GFP_KERNEL);
-		}
-
-		if (!parg->name) {
-			pr_info("Failed to allocate argument[%d] name.\n", i);
-			ret = -ENOMEM;
-			goto error;
-		}
-
-		if (!is_good_name(parg->name)) {
-			pr_info("Invalid argument[%d] name: %s\n",
-				i, parg->name);
-			ret = -EINVAL;
-			goto error;
-		}
-
-		if (traceprobe_conflict_field_name(parg->name,
-							tk->tp.args, i)) {
-			pr_info("Argument[%d] name '%s' conflicts with "
-				"another field.\n", i, argv[i]);
-			ret = -EINVAL;
-			goto error;
-		}
-
-		/* Parse fetch argument */
-		ret = traceprobe_parse_probe_arg(arg, &tk->tp.size, parg,
-						 flags);
-		if (ret) {
-			pr_info("Parse error at argument[%d]. (%d)\n", i, ret);
+		ret = traceprobe_parse_probe_arg(&tk->tp, i, argv[i], flags);
+		if (ret)
 			goto error;
-		}
 	}
 
 	ret = register_trace_kprobe(tk);
diff --git a/kernel/trace/trace_probe.c b/kernel/trace/trace_probe.c
index bd30e9398d2a..449150c6a87f 100644
--- a/kernel/trace/trace_probe.c
+++ b/kernel/trace/trace_probe.c
@@ -348,7 +348,7 @@ static int __parse_bitfield_probe_arg(const char *bf,
 }
 
 /* String length checking wrapper */
-int traceprobe_parse_probe_arg(char *arg, ssize_t *size,
+static int traceprobe_parse_probe_arg_body(char *arg, ssize_t *size,
 		struct probe_arg *parg, unsigned int flags)
 {
 	struct fetch_insn *code, *scode, *tmp = NULL;
@@ -491,8 +491,8 @@ int traceprobe_parse_probe_arg(char *arg, ssize_t *size,
 }
 
 /* Return 1 if name is reserved or already used by another argument */
-int traceprobe_conflict_field_name(const char *name,
-			       struct probe_arg *args, int narg)
+static int traceprobe_conflict_field_name(const char *name,
+					  struct probe_arg *args, int narg)
 {
 	int i;
 
@@ -507,6 +507,47 @@ int traceprobe_conflict_field_name(const char *name,
 	return 0;
 }
 
+int traceprobe_parse_probe_arg(struct trace_probe *tp, int i, char *arg,
+				unsigned int flags)
+{
+	struct probe_arg *parg = &tp->args[i];
+	char *body;
+	int ret;
+
+	/* Increment count for freeing args in error case */
+	tp->nr_args++;
+
+	body = strchr(arg, '=');
+	if (body) {
+		parg->name = kmemdup_nul(arg, body - arg, GFP_KERNEL);
+		body++;
+	} else {
+		/* If argument name is omitted, set "argN" */
+		parg->name = kasprintf(GFP_KERNEL, "arg%d", i + 1);
+		body = arg;
+	}
+	if (!parg->name)
+		return -ENOMEM;
+
+	if (!is_good_name(parg->name)) {
+		pr_info("Invalid argument[%d] name: %s\n",
+			i, parg->name);
+		return -EINVAL;
+	}
+
+	if (traceprobe_conflict_field_name(parg->name, tp->args, i)) {
+		pr_info("Argument[%d]: '%s' conflicts with another field.\n",
+			i, parg->name);
+		return -EINVAL;
+	}
+
+	/* Parse fetch argument */
+	ret = traceprobe_parse_probe_arg_body(body, &tp->size, parg, flags);
+	if (ret)
+		pr_info("Parse error at argument[%d]. (%d)\n", i, ret);
+	return ret;
+}
+
 void traceprobe_free_probe_arg(struct probe_arg *arg)
 {
 	struct fetch_insn *code = arg->code;
diff --git a/kernel/trace/trace_probe.h b/kernel/trace/trace_probe.h
index 974afc1a3e73..feeec261b356 100644
--- a/kernel/trace/trace_probe.h
+++ b/kernel/trace/trace_probe.h
@@ -272,11 +272,8 @@ find_event_file_link(struct trace_probe *tp, struct trace_event_file *file)
 #define TPARG_FL_FENTRY BIT(2)
 #define TPARG_FL_MASK	GENMASK(2, 0)
 
-extern int traceprobe_parse_probe_arg(char *arg, ssize_t *size,
-		   struct probe_arg *parg, unsigned int flags);
-
-extern int traceprobe_conflict_field_name(const char *name,
-			       struct probe_arg *args, int narg);
+extern int traceprobe_parse_probe_arg(struct trace_probe *tp, int i,
+				char *arg, unsigned int flags);
 
 extern int traceprobe_update_arg(struct probe_arg *arg);
 extern void traceprobe_free_probe_arg(struct probe_arg *arg);
diff --git a/kernel/trace/trace_uprobe.c b/kernel/trace/trace_uprobe.c
index b708e4ff7ea7..6eaaa2150685 100644
--- a/kernel/trace/trace_uprobe.c
+++ b/kernel/trace/trace_uprobe.c
@@ -517,51 +517,11 @@ static int create_trace_uprobe(int argc, char **argv)
 	}
 
 	/* parse arguments */
-	ret = 0;
 	for (i = 0; i < argc && i < MAX_TRACE_ARGS; i++) {
-		struct probe_arg *parg = &tu->tp.args[i];
-
-		/* Increment count for freeing args in error case */
-		tu->tp.nr_args++;
-
-		/* Parse argument name */
-		arg = strchr(argv[i], '=');
-		if (arg) {
-			*arg++ = '\0';
-			parg->name = kstrdup(argv[i], GFP_KERNEL);
-		} else {
-			arg = argv[i];
-			/* If argument name is omitted, set "argN" */
-			snprintf(buf, MAX_EVENT_NAME_LEN, "arg%d", i + 1);
-			parg->name = kstrdup(buf, GFP_KERNEL);
-		}
-
-		if (!parg->name) {
-			pr_info("Failed to allocate argument[%d] name.\n", i);
-			ret = -ENOMEM;
-			goto error;
-		}
-
-		if (!is_good_name(parg->name)) {
-			pr_info("Invalid argument[%d] name: %s\n", i, parg->name);
-			ret = -EINVAL;
-			goto error;
-		}
-
-		if (traceprobe_conflict_field_name(parg->name, tu->tp.args, i)) {
-			pr_info("Argument[%d] name '%s' conflicts with "
-				"another field.\n", i, argv[i]);
-			ret = -EINVAL;
-			goto error;
-		}
-
-		/* Parse fetch argument */
-		ret = traceprobe_parse_probe_arg(arg, &tu->tp.size, parg,
+		ret = traceprobe_parse_probe_arg(&tu->tp, i, argv[i],
 					is_return ? TPARG_FL_RETURN : 0);
-		if (ret) {
-			pr_info("Parse error at argument[%d]. (%d)\n", i, ret);
+		if (ret)
 			goto error;
-		}
 	}
 
 	ret = register_trace_uprobe(tu);
-- 
2.19.1


