Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  12 Dec 2018 19:42:21 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 8B8475803DC;
	Tue, 11 Dec 2018 23:49:25 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 11 Dec 2018 23:49:25 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A7o6mgBdwfdhEJ4/v534CgAt7lGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc65bRGN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4qF2QxHqlS?=
 =?us-ascii?q?gHLSY0/m/XhMJukaxVoxyhqBNjzIHJYo6aOuF+frvfcN4BWWpNQtxcWzBdDo6m?=
 =?us-ascii?q?cYcCCfcKM+ZCr4n6olsDtQazChOrBOP21z9HnHn21rA43es/DArL2xcvH9IQv3?=
 =?us-ascii?q?nPttX6KrodUeCvw6nU1znMc/RW2TLk5YXObxsvoumMUKpufcbNzUQjDR7Jg1uO?=
 =?us-ascii?q?pYD/Ij+Y1fgBv3Ka4udiTe6jlXIrpgVrrjSyyMoglJPFip8Wx13K7yl13oU4KN?=
 =?us-ascii?q?ulQ0Bhe9GkCoFftySCOot2XMwiR2ZotT4kyr0Jp5G7ZjIGyJc5yB7FbfyIbYyI?=
 =?us-ascii?q?7gjkVOaLLjd0nHNleLShiBau6UWs1PHwW82u3FpXoCdJjMPAum0O2hDP8MSKS/?=
 =?us-ascii?q?lw8l+k2TmV1gDT7u9EIVozlareM5Mhxr8wlpwOsUXMByP2m1v5jLWQdko6/uik?=
 =?us-ascii?q?8uPnY7vgppCCLY95kR/+MqswlcylG+g4MRYBX3Kd+eui0L3v50r5QK9FjvEuiK?=
 =?us-ascii?q?nWrIjaJdgHpq6+GwJV1ocj6xWhADu839UYgGIKLFZEeBKBkojoNEvCIPH+Dfej?=
 =?us-ascii?q?nVuslC1nyOzBPr3kGp/NNGTMkK/9fbZh7E5R0Aozwspe55JIEL4BJ+j/Wk/stN?=
 =?us-ascii?q?PCCB85PBe5w+LmCNV7y4MfVniDAq6fMKPOr1CI4vgjLPWLZI8QoDz9MeQq5+by?=
 =?us-ascii?q?jX8lnl8QZaup3ZwJZ3yiHfRmJEOZYXzrgtoaFWcKvww+TPHliVGYUD5TYWqyUL?=
 =?us-ascii?q?w45j0hFI2mCoLDTJi3gLOdxCe7AoFWZmdeB1+WCnfod4KEW/QWZCKIOMBhkCcJ?=
 =?us-ascii?q?VbygS48nyBGvuxX2y7thLurI5CIYsYjv28Ry5+3WjRsy7yB7D9yB02GRSGF5hm?=
 =?us-ascii?q?AISCUw3KxlpUx9y02M0a53g/FDEdxT5vVJUho1NJLGzux6DczyVRzFftuTVFmm?=
 =?us-ascii?q?RdCmCykrTt0t298Of1p9G9K6gx/exSWqHaEam6aLBJMu9KLcxGb+J8B6x3bC16?=
 =?us-ascii?q?khil0mT9BLNW2ngK5/6gfSC5TIk0Wfi6ala6Ac0DTR+2eEyGqEpFtYXxJoUaXZ?=
 =?us-ascii?q?QXAfYVPbosnj6UPcUbCiE7QnPRFHyc6ZNKRKbMbkjVFHRPflJdTfbHi9m2a2BR?=
 =?us-ascii?q?aU2LyMaJDmdHka3CXYEEIEiRwc/W6aNQgiASesu37eDD1rFVLof0Ps8el/pGmn?=
 =?us-ascii?q?TkMuyAGKdUlh17uz+h4anvGcT/IT3rQZuCYusTl0HVC9387IBNqEvQZuYKJcYd?=
 =?us-ascii?q?Yl6lddyW3ZrxB9PoCnL616nFEedxp4vkzw2BR3EIlPitUqo24wwwp0KqKY101B?=
 =?us-ascii?q?eiic3ZDxPL3XN2bz8Aqua67QxlHRztKW9r0T5/Q/rlXppBupGVY683V7z9lV1G?=
 =?us-ascii?q?OR55XXDAYITZ39SEc29xhgqLHcbSkw/IfU1XxqMampvT7OwdMpBO05yhm+e9dT?=
 =?us-ascii?q?Kr+LFAj3E8cCHcihNPQqm0S1bhIDJO1S7q80MN+8ePucxaGrO/xsnDS4gmRd4Y?=
 =?us-ascii?q?Bxy16D+DB4SuHVwZkF2faY3g2cWjf4jVehtN33mI9eaTETGGq/1TbrBIpLaqJu?=
 =?us-ascii?q?eoYLDH+kI9erydVmm57tR3lY+UajBlMHwsOoeQCeb0fg3Q1WzkkXpX2nmS2lzz?=
 =?us-ascii?q?17iT0pr6yf3DDQzOTmbhYIJmlLRGx6h1f2PYe0l8waXFSvbwUxlhuq/1z6x6tY?=
 =?us-ascii?q?pKR4NWXTWl1Hfyv1L2FjVKu/qLyCbtVL6JMptyVXTeu9bUqbSr77vxsVzSfjE3?=
 =?us-ascii?q?FCyzA8cjGgoo/5kABiiGKBMHZzq2LUeMFqyhfY/tDcR/9R3jwdSSl8iDnXAEW8?=
 =?us-ascii?q?Ptaz8dWVkZfDrv6xV2a7WpJPdinryJuKtDGn6m1yHR2/g/ezl8XkEQcg0C/3zd?=
 =?us-ascii?q?lqVTjSoxb6bYnmzKC6MeNhfkl1C17w8ct6GodikoQugJEcw2QVhpKQ/XAfi2f8?=
 =?us-ascii?q?Lc1b2b7ibHoKXTMLxt/V4Av/10F5IHOG2Zn5VmmDzct7fNa1fHkW2i0m4sBOCa?=
 =?us-ascii?q?eU6qFEnCRvrlq5qwLRfeZynjMHxfQy734ahvkDuBAxwSWFHrASAU5YMDTwlxSP?=
 =?us-ascii?q?6tCytqRWa3ypcbitz0p+htGhAaqGogFdXnb5Z5gjETVx7sV5LFLDznnz5pv4d9?=
 =?us-ascii?q?nXaNIZrgeUnAvYj+hJNJIxkeIHijF9NmL6uX0l1vQ3jRhz3ZyhuIiHKmNt/L+2?=
 =?us-ascii?q?AxJCNz31Yd8T9S/pjapEgsmW2IWvFI17GjoXRJvoUe6oEDUKuPTlLQmOFSMzqm?=
 =?us-ascii?q?yBFbrDBwOf61pmr3HSE5CtLX6XP2IUzdFjRBmbOUxejxoYXDQ8np4lCA+qwNbt?=
 =?us-ascii?q?f1t+5jAU/lT4sAdDyvp0NxnjVWfSvAepajApSJiGMRpZ9AdC613OMcyZ6OJzED?=
 =?us-ascii?q?pV/pmgrAyLN2yaaB5EDWAPWkyYGV/jOqOi6sXH8+idHuC+NefBYa2SqexCUPeF?=
 =?us-ascii?q?3ZKv3ZVn/zaPNcWPP2NuD/4h2kpEUnB2Bd7ZmygUSyEMkyLNbsibpAqz+yFtr8?=
 =?us-ascii?q?C/9ujrVxzr5YeVF7RSNtBv8QisgaifL+6QmDp5KTFA25wW2H/H06If00ASii10?=
 =?us-ascii?q?czmtEK8NtSrMTKLWh69WAAQXayJ1NMtU8a082hNBNtLcitPwzrR4lOI6C09ZVV?=
 =?us-ascii?q?z9ncGkfdAKI2C4NF/dGEmHLqiJJT3VzMHxeq68TbxQjONJtxy/ozqbEknjPiid?=
 =?us-ascii?q?mDntTRygLeZMjCSDNhxEpI69agptCXTkTN/+ahy0Ktl3jTg3wb0ynnzLNG4cPi?=
 =?us-ascii?q?J6c0NCtbCQ6SJYgvNiG21O9HZlLO+EmzqH4OncMJoZrfxrAiEn395dtV86wrwd?=
 =?us-ascii?q?wihCDKh7kS3Z6NBouE2Ome/JxCdlUQZVt3BAg4fd7mt4PqCM3JBHQGvN+lot4C?=
 =?us-ascii?q?3EARQHj8FoBt3mp+Zbzd2Zx/G7EytL79+BpZhUPMPTMs/SaHc=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAADkvBBch0O0hNFkGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUwQBAQELAYNrJ4xzizOCDRRolleBcxQYEwGHOCI2Bw0BAwEBAQEBAQI?=
 =?us-ascii?q?BEwEBAQgNCQgpL4I2IoJkAQEBAQIBAQI3PwUBCQEBChgJJQMMBUkTBYMcgXoIB?=
 =?us-ascii?q?acDijCMPBeBQD+BEYJdNYpcApBAkEcJDZE9IwoCiV2HWyyZDYFNCYF+cBWDJ4J?=
 =?us-ascii?q?QjhgyAQExAYEEAQEcjQsBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ANAADkvBBch0O0hNFkGwEBAQEDAQEBBwMBAQGBUwQBAQE?=
 =?us-ascii?q?LAYNrJ4xzizOCDRRolleBcxQYEwGHOCI2Bw0BAwEBAQEBAQIBEwEBAQgNCQgpL?=
 =?us-ascii?q?4I2IoJkAQEBAQIBAQI3PwUBCQEBChgJJQMMBUkTBYMcgXoIBacDijCMPBeBQD+?=
 =?us-ascii?q?BEYJdNYpcApBAkEcJDZE9IwoCiV2HWyyZDYFNCYF+cBWDJ4JQjhgyAQExAYEEA?=
 =?us-ascii?q?QEcjQsBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,343,1539673200"; 
   d="scan'208";a="56550672"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 11 Dec 2018 23:49:23 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726653AbeLLHqV (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 12 Dec 2018 02:46:21 -0500
Received: from mx1.redhat.com ([209.132.183.28]:47302 "EHLO mx1.redhat.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726007AbeLLHqV (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 12 Dec 2018 02:46:21 -0500
Received: from smtp.corp.redhat.com (int-mx01.intmail.prod.int.phx2.redhat.com [10.5.11.11])
        (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
        (No client certificate requested)
        by mx1.redhat.com (Postfix) with ESMTPS id AF83F308FB94;
        Wed, 12 Dec 2018 07:46:20 +0000 (UTC)
Received: from localhost (ovpn-8-20.pek2.redhat.com [10.72.8.20])
        by smtp.corp.redhat.com (Postfix) with ESMTPS id 74236600C9;
        Wed, 12 Dec 2018 07:46:19 +0000 (UTC)
Date: Wed, 12 Dec 2018 15:46:15 +0800
From: Baoquan He <bhe@redhat.com>
To: Chao Fan <fanc.fnst@cn.fujitsu.com>
Cc: linux-kernel@vger.kernel.org, x86@kernel.org, bp@alien8.de,
        tglx@linutronix.de, mingo@redhat.com, hpa@zytor.com,
        keescook@chromium.org, msys.mizuma@gmail.com,
        indou.takao@jp.fujitsu.com, caoj.fnst@cn.fujitsu.com
Subject: Re: [PATCH v13 1/6] x86/boot: Introduce kstrtoull() to boot
 directory instead of simple_strtoull()
Message-ID: <20181212074615.GO17340@MiWiFi-R3L-srv>
References: <20181212031053.1815-1-fanc.fnst@cn.fujitsu.com>
 <20181212031053.1815-2-fanc.fnst@cn.fujitsu.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181212031053.1815-2-fanc.fnst@cn.fujitsu.com>
User-Agent: Mutt/1.9.1 (2017-09-22)
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.11
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16 (mx1.redhat.com [10.5.110.43]); Wed, 12 Dec 2018 07:46:20 +0000 (UTC)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 12/12/18 at 11:10am, Chao Fan wrote:
> Introduce kstrtoull() from lib/kstrtox.c to boot directory so that code

It's not introducing kstrtoull(), just copying kstrtoull() from
lib/kstrtox.c to boot.

> in boot/ can use kstrtoull() and the old simple_strtoull() can be
> replaced.
> 
> Signed-off-by: Chao Fan <fanc.fnst@cn.fujitsu.com>
> ---
>  arch/x86/boot/string.c | 137 +++++++++++++++++++++++++++++++++++++++++
>  arch/x86/boot/string.h |   2 +
>  2 files changed, 139 insertions(+)
> 
> diff --git a/arch/x86/boot/string.c b/arch/x86/boot/string.c
> index c4428a176973..e02405f20f98 100644
> --- a/arch/x86/boot/string.c
> +++ b/arch/x86/boot/string.c
> @@ -12,7 +12,10 @@
>   * Very basic string functions
>   */
>  
> +#define _LINUX_CTYPE_H
>  #include <linux/types.h>
> +#include <linux/kernel.h>
> +#include <linux/errno.h>
>  #include <asm/asm.h>
>  #include "ctype.h"
>  #include "string.h"
> @@ -187,3 +190,137 @@ char *strchr(const char *s, int c)
>  			return NULL;
>  	return (char *)s;
>  }
> +
> +static inline u64 div_u64_rem(u64 dividend, u32 divisor, u32 *remainder)
> +{
> +	union {
> +		u64 v64;
> +		u32 v32[2];
> +	} d = { dividend };
> +	u32 upper;
> +
> +	upper = d.v32[1];
> +	d.v32[1] = 0;
> +	if (upper >= divisor) {
> +		d.v32[1] = upper / divisor;
> +		upper %= divisor;
> +	}
> +	asm ("divl %2" : "=a" (d.v32[0]), "=d" (*remainder) :
> +		"rm" (divisor), "0" (d.v32[0]), "1" (upper));
> +	return d.v64;
> +}
> +
> +static inline u64 div_u64(u64 dividend, u32 divisor)
> +{
> +	u32 remainder;
> +	return div_u64_rem(dividend, divisor, &remainder);
> +}
> +
> +static inline char _tolower(const char c)
> +{
> +	return c | 0x20;
> +}
> +
> +const char *_parse_integer_fixup_radix(const char *s, unsigned int *base)
> +{
> +	if (*base == 0) {
> +		if (s[0] == '0') {
> +			if (_tolower(s[1]) == 'x' && isxdigit(s[2]))
> +				*base = 16;
> +			else
> +				*base = 8;
> +		} else
> +			*base = 10;
> +	}
> +	if (*base == 16 && s[0] == '0' && _tolower(s[1]) == 'x')
> +		s += 2;
> +	return s;
> +}
> +
> +/*
> + * Convert non-negative integer string representation in explicitly given radix
> + * to an integer.
> + * Return number of characters consumed maybe or-ed with overflow bit.
> + * If overflow occurs, result integer (incorrect) is still returned.
> + *
> + * Don't you dare use this function.
> + */
> +unsigned int _parse_integer(const char *s, unsigned int base, unsigned long long *p)
> +{
> +	unsigned long long res;
> +	unsigned int rv;
> +
> +	res = 0;
> +	rv = 0;
> +	while (1) {
> +		unsigned int c = *s;
> +		unsigned int lc = c | 0x20; /* don't tolower() this line */
> +		unsigned int val;
> +
> +		if ('0' <= c && c <= '9')
> +			val = c - '0';
> +		else if ('a' <= lc && lc <= 'f')
> +			val = lc - 'a' + 10;
> +		else
> +			break;
> +
> +		if (val >= base)
> +			break;
> +		/*
> +		 * Check for overflow only if we are within range of
> +		 * it in the max base we support (16)
> +		 */
> +		if (unlikely(res & (~0ull << 60))) {
> +			if (res > div_u64(ULLONG_MAX - val, base))
> +				rv |= KSTRTOX_OVERFLOW;
> +		}
> +		res = res * base + val;
> +		rv++;
> +		s++;
> +	}
> +	*p = res;
> +	return rv;
> +}
> +
> +static int _kstrtoull(const char *s, unsigned int base, unsigned long long *res)
> +{
> +	unsigned long long _res;
> +	unsigned int rv;
> +
> +	s = _parse_integer_fixup_radix(s, &base);
> +	rv = _parse_integer(s, base, &_res);
> +	if (rv & KSTRTOX_OVERFLOW)
> +		return -ERANGE;
> +	if (rv == 0)
> +		return -EINVAL;
> +	s += rv;
> +	if (*s == '\n')
> +		s++;
> +	if (*s)
> +		return -EINVAL;
> +	*res = _res;
> +	return 0;
> +}
> +
> +/**
> + * kstrtoull - convert a string to an unsigned long long
> + * @s: The start of the string. The string must be null-terminated, and may also
> + *  include a single newline before its terminating null. The first character
> + *  may also be a plus sign, but not a minus sign.
> + * @base: The number base to use. The maximum supported base is 16. If base is
> + *  given as 0, then the base of the string is automatically detected with the
> + *  conventional semantics - If it begins with 0x the number will be parsed as a
> + *  hexadecimal (case insensitive), if it otherwise begins with 0, it will be
> + *  parsed as an octal number. Otherwise it will be parsed as a decimal.
> + * @res: Where to write the result of the conversion on success.
> + *
> + * Returns 0 on success, -ERANGE on overflow and -EINVAL on parsing error.
> + * Used as a replacement for the obsolete simple_strtoull. Return code must
> + * be checked.
> + */
> +int kstrtoull(const char *s, unsigned int base, unsigned long long *res)
> +{
> +	if (s[0] == '+')
> +		s++;
> +	return _kstrtoull(s, base, res);
> +}
> diff --git a/arch/x86/boot/string.h b/arch/x86/boot/string.h
> index 3d78e27077f4..171007c99acc 100644
> --- a/arch/x86/boot/string.h
> +++ b/arch/x86/boot/string.h
> @@ -29,4 +29,6 @@ extern unsigned int atou(const char *s);
>  extern unsigned long long simple_strtoull(const char *cp, char **endp,
>  					  unsigned int base);
>  
> +int kstrtoull(const char *s, unsigned int base, unsigned long long *res);
> +#define KSTRTOX_OVERFLOW       (1U << 31)
>  #endif /* BOOT_STRING_H */
> -- 
> 2.19.2
> 
> 
> 
