Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 06 Dec 2018 08:51:53 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 20F605804C1;
	Wed,  5 Dec 2018 04:24:27 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 05 Dec 2018 04:24:26 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AUjsoHhWz6EH9Vh1/XA8/GGVrZH/V8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhGFvKdThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGoOy?=
 =?us-ascii?q?YZUSAeUDM+ZWoYrzqFQSohulHQmhBvjiyiNUinLswaE2z/gtHR3A0Qc9H9wOqn?=
 =?us-ascii?q?PUrNDtOakVUOC60KnIwi/dYPNSxDzz54zIchQ/rvGWWLJ/a8zRwlQoGgPAllWf?=
 =?us-ascii?q?t5foMC2R1uQJrWeb9e9gWvipi2I9qgF+vyKjyd0xioTQgI8e117K9SJ8wIkvJN?=
 =?us-ascii?q?24TlZ2YcWkEZtLqyGVLI92Ttk5Q25zoCo3y7ILtYSgfCcRzpks2h3Ra+SffoSW?=
 =?us-ascii?q?/h7uUPydLSp2iX57Yr6zmhW//VS6xuD9VMS4yEhGojZLn9XWq3wBygbf58qaRv?=
 =?us-ascii?q?dn40us3yuE2RrJ5eFeO080kLLWK54/zb40kZoeqVrDHiDol0XslqOWdVsr+vKu?=
 =?us-ascii?q?6+v5ZrXqvJicN5V7ig3mM6QunNKwAfggPwQQQ2SW/f6w2KDt8EHnWrlGk/47nr?=
 =?us-ascii?q?XDvJ3bJ8kXvqu5DBVU0oYn5Ra/FTCm0NEAkHkDLVJFfg+HjofwN1HNPv/4F/G/?=
 =?us-ascii?q?jEqokDtywPDHMLvhDYvXLnXYjrfhcqhy61RGxAow099f/ZRUBa8FIP7pXU/xrt?=
 =?us-ascii?q?PYAgcjMwOo2+bnFMl91oQGVGKLA6+ZM73dvUWH5+IyOOSMYI4VuDDgK/kq/fLu?=
 =?us-ascii?q?jHk5mUMDcqmtx5cYdHe4HvF+KUWDfXXsmssBEXsNvgcmTOzlklyCUSJJaHa1Ra?=
 =?us-ascii?q?485iw7B5igDYfMXY2thL2B3CGmHpxZfGxGC1aMEWv2eIWAQfsDdCWSIsp5mDwe?=
 =?us-ascii?q?SbehU5Mh1Q2ptALiybpnKfTb9jcbtZLk0th14erTmAo29Tx1CcSdzm6MQ3t1nm?=
 =?us-ascii?q?MOWz85wqR/rVZhxVeE1Khym+ZYGsBL5/NVTgc6MobRwPZhC9DyXQLBfc2FSEy8?=
 =?us-ascii?q?TdWkGjwxStMxw9kTY0dyAdmijxbD3za0DL8RjbCEGJs08qfE1XjrO8l902rG1L?=
 =?us-ascii?q?Umj1Q+QctAL2umirR79wjSHYHJlUqZmr2udaQd2i7N6WiCwXCPvEFeTA5/T6HF?=
 =?us-ascii?q?UWoDaUvRqNTz/lnCQKO2CbQ7LgtBztaPJbZQZd33k1pKXvfjN87YY2KqhWiwAx?=
 =?us-ascii?q?GExrePbIrvf2UQxyHdCEkCkwAO8neKLwk+BiG9o23ACDxiD07gY0Tp8eNmsnO0?=
 =?us-ascii?q?Ulc0zx2Wb01mz7e65wQaheKCRP8J3rILoiEhqy5qE1a7xN/WD9uApwx8fKRTe9?=
 =?us-ascii?q?894VFH1X7HuAx5JJCvM6dihlsGeQRto0zuzwl3CplHkcUysHMqzQ9yKaWE0FNB?=
 =?us-ascii?q?dzKUx4zwNqfQKmno+BCvaqjW2l7F3daS+6cP7uk4qlr5sAGoEEoi72to091P33?=
 =?us-ascii?q?SA4ZXKCRIYUYjtXUYv6xh6u7babzEn6IPQy3JtPre7sz/Y190yGesq1wyvf9Fc?=
 =?us-ascii?q?MKODCg//CMkaB8moKOw3lFmldBMEPOZO9KEqO8OqbeeJ2KmuPOx4hjKpkXxH4J?=
 =?us-ascii?q?xh0kKL7yd9SvPI04wZzP2C3wqHVy3zjFGuss3snYBEZDcSHnewyCT+BY5RYLFy?=
 =?us-ascii?q?cpgPCWu0P8K3wdB+jYb3W3FE7F6jG08G2MixdBqIblzywRdf1V4Krnyggye4yS?=
 =?us-ascii?q?J7kysorqaGwCPB2eDiewcZNW5RQ2lii0zhIYy1j9AcQUipYBIllBqj5Ubm2adb?=
 =?us-ascii?q?oL5zIHXUQUdNZyL2NX1tUrOstrqeZM5C8JMpsSRNXOW8e1yaUaP9ox0B3iPnHm?=
 =?us-ascii?q?tewi07dj6wtpX4mRx6lHySLHJpoHXFfsFwwA/V5MbASv5JwjoGWC54hCHVBlem?=
 =?us-ascii?q?Jdmp/taUl5DZvuClTW2hVZ5TcSjtzYyesiu2/mlqARy5n/CuldzrCwk60Snn19?=
 =?us-ascii?q?Z0USXEtgrzYo7u166iK+JoYlFoBEPg68p9Aox/kpE/hJYK1XgYh5WV+2EKkWPy?=
 =?us-ascii?q?MdVdxKL/Y2ABRT8Nw97J/gfl3FdvIW6Ox4L8Tn+d2NduZ8GmYmMK3SIw98NKB7?=
 =?us-ascii?q?2V7LBenSt1v0C3rQTeYfVmmjcdyP0u6GMVgu0TuQotyDmdDa4WHUVCISPskBGI?=
 =?us-ascii?q?5cikrKpLfGavbaSw1E1mkNCkDbGCoRtTVGz3e5g8Bi9w8ttwMEjX33Lt8IHkd8?=
 =?us-ascii?q?LdbdYSth2SjhfBgPJZKJM3lvoWmyVnPXjxsmEiy+4+lRZux421vJCbK2Vx+6K0?=
 =?us-ascii?q?GgJYNjrwZ88J+zDil6BentuN34C0H5VsATELXJruTfK1HzMer/XnNwCSEDIirn?=
 =?us-ascii?q?eXA6bQHQia6E1+tXLAD4irN22LJHke1dhtXwOSJEtbgAAJRjk6moM5GxuuxMzg?=
 =?us-ascii?q?dkd5+z8Q6kT5qhtK1uJnKR3/Xn3Dqwevbzc+UIKfIwZO7gFe+0fVNtST7uBpEC?=
 =?us-ascii?q?Fd4JKhtxaBKnCBawRLEGEJWVGEB1b5Mbm1/tTA9+mYBuyjL/rBe7mOqOpeV+uW?=
 =?us-ascii?q?ypKryIdp4zGMNsCXNHl4E/I7wlZDXWx+G8nBmzQPTDEXlzvQb8GBohew4DZ3rs?=
 =?us-ascii?q?e58PTkQw/v4YqPC71PMdRg4Ry2gKGDN/KOiyZ9MzpXypQMxXrQwrgFwFESkz1u?=
 =?us-ascii?q?dyWqEbkYtS7CUqPQmqxUDx4acS9zN9FI76Uz3gZTI87bl8j126V8jv40DVdFSF?=
 =?us-ascii?q?PgltuoZcwMP2GyKlfHCFyXO7SBID3B29v3br+kSb1MkOVUsAW9tiyGE0D4JDSM?=
 =?us-ascii?q?iTnoWwqrMeFNlyybOB1euIegchdiE2TjTdTmagGlP99zlzE53bo0hnbSP24GLT?=
 =?us-ascii?q?d8a19NrqGX7S5AnvV/GmlB4mB5IuWehymZ7/fXKpANvPtvAyR0kf9a4Xsgx7tU?=
 =?us-ascii?q?6iFEWOJ6mC/IotFypFGml/GFyiB7XxpWtjZLmIWLsF1iOKrD8JlAXHfE/BQV4m?=
 =?us-ascii?q?SRCxQFvd1lCtL0tqBUy9jPkr/zKThY/9LV+8scG9bbKMadPHU9NhrpHW2cMAxQ?=
 =?us-ascii?q?ZCStOSn1ilZSlfiU8DXBp4I8prDlgpwCQPlXWQpxXv0bEEN3Wt8CKZFfWjIimK?=
 =?us-ascii?q?ScyskS6imQth7UEeBbtZDOW/baLPHrJSychL8MMx4QzJv1KYAeLIjy3QpjZh9z?=
 =?us-ascii?q?gdKZSALrQdlRr3g5PUcPq0JX/S07FzVr1g=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ACAABnwgdch0O0hNFkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUgQBAQEBCwGCAIFrJ4xxiy+CDRRollCBcxQYEwGHUiI1CA0BAwE?=
 =?us-ascii?q?BAQEBAQIBEwEBAQgNCQgpL4I2JAGCYgECAgEBAiRSBQEJAQEKISUDDAFHBgESB?=
 =?us-ascii?q?YMcgXoHAQWlczOKK4weF4F/gRGCXTWKXAKLIopHim0JkVqRL4kJj3WBSAGCCk0?=
 =?us-ascii?q?fGYMngicXjjErATKBBAEBAYsdAQE?=
X-IPAS-Result: =?us-ascii?q?A0ACAABnwgdch0O0hNFkGgEBAQEBAgEBAQEHAgEBAQGBUgQ?=
 =?us-ascii?q?BAQEBCwGCAIFrJ4xxiy+CDRRollCBcxQYEwGHUiI1CA0BAwEBAQEBAQIBEwEBA?=
 =?us-ascii?q?QgNCQgpL4I2JAGCYgECAgEBAiRSBQEJAQEKISUDDAFHBgESBYMcgXoHAQWlczO?=
 =?us-ascii?q?KK4weF4F/gRGCXTWKXAKLIopHim0JkVqRL4kJj3WBSAGCCk0fGYMngicXjjErA?=
 =?us-ascii?q?TKBBAEBAYsdAQE?=
X-IronPort-AV: E=Sophos;i="5.56,317,1539673200"; 
   d="scan'208";a="140857692"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 05 Dec 2018 04:24:25 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727484AbeLEMYW (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 5 Dec 2018 07:24:22 -0500
Received: from ozlabs.org ([203.11.71.1]:47929 "EHLO ozlabs.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726944AbeLEMYW (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 5 Dec 2018 07:24:22 -0500
Received: from authenticated.ozlabs.org (localhost [127.0.0.1])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by ozlabs.org (Postfix) with ESMTPSA id 438yb60yPcz9s8J;
        Wed,  5 Dec 2018 23:24:17 +1100 (AEDT)
Authentication-Results: ozlabs.org; dmarc=none (p=none dis=none) header.from=ellerman.id.au
From: Michael Ellerman <mpe@ellerman.id.au>
To: Arnd Bergmann <arnd@arndb.de>, firoz.khan@linaro.org
Cc: y2038@lists.linaro.org, linux-arch@vger.kernel.org,
        deepa.kernel@gmail.com, Arnd Bergmann <arnd@arndb.de>,
        Benjamin Herrenschmidt <benh@kernel.crashing.org>,
        Paul Mackerras <paulus@samba.org>,
        Nicholas Piggin <npiggin@gmail.com>,
        Madhavan Srinivasan <maddy@linux.vnet.ibm.com>,
        Christophe Leroy <christophe.leroy@c-s.fr>,
        Joel Stanley <joel@jms.id.au>, linuxppc-dev@lists.ozlabs.org,
        linux-kernel@vger.kernel.org
Subject: Re: [PATCH] powerpc: split compat syscall table out from native table
In-Reply-To: <20181204212340.3915309-1-arnd@arndb.de>
References: <CAK8P3a2SP0eX50NoFKaM2N85mgSejToQkD9ZOE_7V_RT__BCvg@mail.gmail.com> <20181204212340.3915309-1-arnd@arndb.de>
Date: Wed, 05 Dec 2018 23:24:16 +1100
Message-ID: <87pnugkvpr.fsf@concordia.ellerman.id.au>
MIME-Version: 1.0
Content-Type: text/plain
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Arnd Bergmann <arnd@arndb.de> writes:

> PowerPC uses a syscall table with native and compat calls interleaved,
> which is a slightly simpler way to define two matching tables.
>
> As we move to having the tables generated, that advantage is no longer
> important, but the interleaved table gets in the way of using the
> same scripts as on the other architectures.
>
> Split out a new compat_sys_call_table symbol that contains all the
> compat calls, and leave the main table for the native calls, to more
> closely match the method we use everywhere else.
>
> Signed-off-by: Arnd Bergmann <arnd@arndb.de>
> ---
> This is completely untested, it's just for illustration and to
> get comments about whether this is a good idea.

Seems like a good idea to me.

The code's not much more complicated, in fact it's probably clearer
except for the extra macros.

It's more cache efficient too, though it probably doesn't really matter.

cheers

> Firoz, can you try to get this working?
> ---
>  arch/powerpc/include/asm/syscall.h |  3 +--
>  arch/powerpc/kernel/entry_64.S     |  7 ++++--
>  arch/powerpc/kernel/systbl.S       | 37 ++++++++++++++++++++++++------
>  arch/powerpc/kernel/vdso.c         |  7 ++++--
>  4 files changed, 41 insertions(+), 13 deletions(-)
>
> diff --git a/arch/powerpc/include/asm/syscall.h b/arch/powerpc/include/asm/syscall.h
> index ab9f3f0a8637..1a0e7a8b1c81 100644
> --- a/arch/powerpc/include/asm/syscall.h
> +++ b/arch/powerpc/include/asm/syscall.h
> @@ -18,9 +18,8 @@
>  #include <linux/thread_info.h>
>  
>  /* ftrace syscalls requires exporting the sys_call_table */
> -#ifdef CONFIG_FTRACE_SYSCALLS
>  extern const unsigned long sys_call_table[];
> -#endif /* CONFIG_FTRACE_SYSCALLS */
> +extern const unsigned long compat_sys_call_table[];
>  
>  static inline int syscall_get_nr(struct task_struct *task, struct pt_regs *regs)
>  {
> diff --git a/arch/powerpc/kernel/entry_64.S b/arch/powerpc/kernel/entry_64.S
> index 7b1693adff2a..5574d92646f1 100644
> --- a/arch/powerpc/kernel/entry_64.S
> +++ b/arch/powerpc/kernel/entry_64.S
> @@ -54,6 +54,9 @@
>  SYS_CALL_TABLE:
>  	.tc sys_call_table[TC],sys_call_table
>  
> +COMPAT_SYS_CALL_TABLE:
> +	.tc compat_sys_call_table[TC],compat_sys_call_table
> +
>  /* This value is used to mark exception frames on the stack. */
>  exception_marker:
>  	.tc	ID_EXC_MARKER[TC],STACK_FRAME_REGS_MARKER
> @@ -173,7 +176,7 @@ system_call:			/* label this so stack traces look sane */
>  	ld	r11,SYS_CALL_TABLE@toc(2)
>  	andis.	r10,r10,_TIF_32BIT@h
>  	beq	15f
> -	addi	r11,r11,8	/* use 32-bit syscall entries */
> +	ld	r11,COMPAT_SYS_CALL_TABLE@toc(2)
>  	clrldi	r3,r3,32
>  	clrldi	r4,r4,32
>  	clrldi	r5,r5,32
> @@ -181,7 +184,7 @@ system_call:			/* label this so stack traces look sane */
>  	clrldi	r7,r7,32
>  	clrldi	r8,r8,32
>  15:
> -	slwi	r0,r0,4
> +	slwi	r0,r0,3
>  
>  	barrier_nospec_asm
>  	/*
> diff --git a/arch/powerpc/kernel/systbl.S b/arch/powerpc/kernel/systbl.S
> index 919a32746ede..883b8e36964c 100644
> --- a/arch/powerpc/kernel/systbl.S
> +++ b/arch/powerpc/kernel/systbl.S
> @@ -17,13 +17,13 @@
>  #include <asm/ppc_asm.h>
>  
>  #ifdef CONFIG_PPC64
> -#define SYSCALL(func)		.8byte	DOTSYM(sys_##func),DOTSYM(sys_##func)
> -#define COMPAT_SYS(func)	.8byte	DOTSYM(sys_##func),DOTSYM(compat_sys_##func)
> -#define PPC_SYS(func)		.8byte	DOTSYM(ppc_##func),DOTSYM(ppc_##func)
> -#define OLDSYS(func)		.8byte	DOTSYM(sys_ni_syscall),DOTSYM(sys_ni_syscall)
> -#define SYS32ONLY(func)		.8byte	DOTSYM(sys_ni_syscall),DOTSYM(compat_sys_##func)
> -#define PPC64ONLY(func)		.8byte	DOTSYM(ppc_##func),DOTSYM(sys_ni_syscall)
> -#define SYSX(f, f3264, f32)	.8byte	DOTSYM(f),DOTSYM(f3264)
> +#define SYSCALL(func)		.8byte	DOTSYM(sys_##func)
> +#define COMPAT_SYS(func)	.8byte	DOTSYM(sys_##func)
> +#define PPC_SYS(func)		.8byte	DOTSYM(ppc_##func)
> +#define OLDSYS(func)		.8byte	DOTSYM(sys_ni_syscall)
> +#define SYS32ONLY(func)		.8byte	DOTSYM(sys_ni_syscall)
> +#define PPC64ONLY(func)		.8byte	DOTSYM(ppc_##func)
> +#define SYSX(f, f3264, f32)	.8byte	DOTSYM(f)
>  #else
>  #define SYSCALL(func)		.long	sys_##func
>  #define COMPAT_SYS(func)	.long	sys_##func
> @@ -48,3 +48,26 @@
>  sys_call_table:
>  
>  #include <asm/systbl.h>
> +
> +#undef SYSCALL
> +#undef COMPAT_SYS
> +#undef PPC_SYS
> +#undef OLDSYS
> +#undef SYS32ONLY
> +#undef PPC64ONLY
> +#undef SYSX
> +
> +#ifdef CONFIG_COMPAT
> +#define SYSCALL(func)		.8byte	DOTSYM(sys_##func)
> +#define COMPAT_SYS(func)	.8byte	DOTSYM(compat_sys_##func)
> +#define PPC_SYS(func)		.8byte	DOTSYM(ppc_##func)
> +#define OLDSYS(func)		.8byte	DOTSYM(sys_ni_syscall)
> +#define SYS32ONLY(func)		.8byte	DOTSYM(compat_sys_##func)
> +#define PPC64ONLY(func)		.8byte	DOTSYM(sys_ni_syscall)
> +#define SYSX(f, f3264, f32)	.8byte	DOTSYM(f3264)
> +
> +.globl compat_sys_call_table
> +compat_sys_call_table:
> +
> +#include <asm/systbl.h>
> +#endif
> diff --git a/arch/powerpc/kernel/vdso.c b/arch/powerpc/kernel/vdso.c
> index 65b3bdb99f0b..7725a9714736 100644
> --- a/arch/powerpc/kernel/vdso.c
> +++ b/arch/powerpc/kernel/vdso.c
> @@ -671,15 +671,18 @@ static void __init vdso_setup_syscall_map(void)
>  {
>  	unsigned int i;
>  	extern unsigned long *sys_call_table;
> +#ifdef CONFIG_PPC64
> +	extern unsigned long *compat_sys_call_table;
> +#endif
>  	extern unsigned long sys_ni_syscall;
>  
>  
>  	for (i = 0; i < NR_syscalls; i++) {
>  #ifdef CONFIG_PPC64
> -		if (sys_call_table[i*2] != sys_ni_syscall)
> +		if (sys_call_table[i] != sys_ni_syscall)
>  			vdso_data->syscall_map_64[i >> 5] |=
>  				0x80000000UL >> (i & 0x1f);
> -		if (sys_call_table[i*2+1] != sys_ni_syscall)
> +		if (compat_sys_call_table[i] != sys_ni_syscall)
>  			vdso_data->syscall_map_32[i >> 5] |=
>  				0x80000000UL >> (i & 0x1f);
>  #else /* CONFIG_PPC64 */
> -- 
> 2.18.0
