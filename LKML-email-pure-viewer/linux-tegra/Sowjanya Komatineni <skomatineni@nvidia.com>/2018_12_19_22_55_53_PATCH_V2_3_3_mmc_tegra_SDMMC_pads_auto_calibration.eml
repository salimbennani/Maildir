Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  20 Dec 2018 08:43:54 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 45C6B580522;
	Wed, 19 Dec 2018 14:58:31 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 19 Dec 2018 14:58:31 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ALg0AVRAepMqpreCVSCcxUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7+o8ywAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VDK/5KlpVRDokj?=
 =?us-ascii?q?8KOT4n/m/KhMJ+j6VVrxCvpxNw34HUe5mVOfhlc6PBYd8XX3ZNU9xNWyBdBI63?=
 =?us-ascii?q?cosBD/AGPeZdt4TzulwOrBW8BQa2AuPuyiVHjWLz06091uQuCx3G3A0mH90Qtn?=
 =?us-ascii?q?TUrcj+OaAJUeC2y6nIyC/Mb+9X2Tf79ofIdBEhrOqKXbJucMre1EgvGBnfglqM?=
 =?us-ascii?q?rozlOiqY2+IQuGaY9+ptTfyjh3Ijpg1rvzSiyNkghpPUio8W1lzI7yR0zYQtKd?=
 =?us-ascii?q?GmVUJ2YMSoHIVOuyyZLYd6X90uT3xytCs7xbALv4OwcjIQx5Q93RHfbuSKc4iW?=
 =?us-ascii?q?7RLnU+acOSl4hH17d7KlnRqy8lavyvf6Vsaq1FZGtC1FksPDtnwV1hzT7NaISu?=
 =?us-ascii?q?dl80u/xTqC0xrf5vxKLEwqj6bXNp0szqIqmpcSs0nPBir2l1/3jK+SeEUk4O+o?=
 =?us-ascii?q?6+H/b7Xip5+cMZJ0iw7nPqQthMO/G+I4PRYKX2SC/uS92rvj8lPjQLhRkP02nb?=
 =?us-ascii?q?fWsIrAKcQYuKG5GQlV3Zgn6xqlCDemytsYkWEdLF1ZYBKHk5TpO1bWLfD8DPe/?=
 =?us-ascii?q?gEqjnC1kxvDbJbDhBpTNLn7ekLbuZ7p96khcyBYtwtBb/Z5bFrYBIPfrUE/rqN?=
 =?us-ascii?q?PYFgM5MxCzw+v/CNVyzIIeWX6VDa+eKq/SsUKI6fgpI+mDf4IVvDf9K/445//h?=
 =?us-ascii?q?l3M5mFkdfbW30psTcny3AvNmI0CBa3r2ntgBCXsKvhY5TOHyklKCSj5TZ3GxX6?=
 =?us-ascii?q?4m/DE0EoCmAJzHRoCshryBwSi6EodXZmBAFlCDD3Poe5+YVPcLbSKYOtVhnSAc?=
 =?us-ascii?q?Vbi9V48h0gmjtAzgxLphNObU/iwYuojl1Nh6/ODTkRAy9TppD8WSyW2NTmd0nn?=
 =?us-ascii?q?8WSD8yxqxwvUt9ylKb26hin/NYDcBT5+9OUgoiKJHT1fJ6BM7oVgLBZNiJTk2m?=
 =?us-ascii?q?TcugAT02StIxwNoOY0JmFtWmjxDD2TeqArAPm7yKApw07rzT33zrK8lhzHbG0b?=
 =?us-ascii?q?Erj0M6TctXKW2mmql/+hDOCIHTjUWWibymdaQG0y7L72eM02yOsVpcUA5xV6XF?=
 =?us-ascii?q?QH8ealHXrdT/+kPNUbuuBa47PQtGzM6IMrFKZcHxjVVaWPfjP8zTY36wm2e1Ah?=
 =?us-ascii?q?aI2rOMbYrwd2UBxindD1IEkwQS/XaAOggzHSOho2PYDDxzGlPjeULs8e9iqHyl?=
 =?us-ascii?q?Sk841R2Fb0pk17Ct4B4ameScS+8P3rIDoCousTF0E0iy3t3IC9uMvRFufLhBbt?=
 =?us-ascii?q?wn5ldH1mXZtxJmM5ykLqBigEMecgtts0Pv0RV3FptPkcwwoHw2ywpyLLqS0Eld?=
 =?us-ascii?q?eDOAwZDwJrrXJ3Hy/RCycaLZxkvS0deW+qgV7vQ4pE7uvAWoFkok7nVm3MNZ03?=
 =?us-ascii?q?qa5pXWEgUSVYj9XVow9xh/v7vaeDUy55vI1X1wNqm5qiXC29M1C+Q/0BavYtBf?=
 =?us-ascii?q?PLmCFADsCc0aBtGiJ/AwlFitcx0LIvpS9KkyP869c/uG2airPPtvnT68jGRH5p?=
 =?us-ascii?q?x93VyI9yZmVuHI2JMFyemC3gSbTzf8kEuhssfvlIFEZDEeBGq+xTL/BI5MYK1/?=
 =?us-ascii?q?ZoILCWaoI82qydRynZ/tW3hE9FG9A1MKwtOmeR2Xb1blxw1fyVwXoWC7mSu/1z?=
 =?us-ascii?q?F0kSsmrrCc3CzNxOTubgEHNXRIRGlhjFfsJ5a7j9YBUUisbggpkgal5Engy6ha?=
 =?us-ascii?q?oqR/M3fcQUNScyfqKGFiV7O6tqCebM5X9JMorSJXXfy8YF+ATb7xuRka0yLlH2?=
 =?us-ascii?q?ZFwDA7djequoj2nhBgiWKdKmpzo2Tdec1q2Rjf49ncT+ZL3jUaXCl4lSXXBl+k?=
 =?us-ascii?q?Mtmq59qUlo3PsuCjV227UJ1TfjLmzYeBtCu9+G1rDgezn/G1mt37Dwc61TX32M?=
 =?us-ascii?q?VtVSXNtBz8eJXk17ymMeJ7eUllHFr868t5Go5kiIcxio8f2WMGhpqL53oIinn8?=
 =?us-ascii?q?Mc9U2a/laHoNRDgLw8Pa4QT/2U1jKG6JyJz9VnmH3sRhYNy6aHsM2i0h98BKFL?=
 =?us-ascii?q?uU7LtckCtppVq4qBjdYPlnkTcb1Psu82Uag+AStQopzyWdBK0SHEZCMSztkRSI?=
 =?us-ascii?q?886xrKFNaGmzdriw0VJ0ncq9A7GavgFcRHH5d485EiBq6cV/NE/M3Gf36oH5Y9?=
 =?us-ascii?q?TQadMTthuJkxbPleRVKZQxluYUiipjI27yoXoly+sjhxx0wZ66pJSHK3lq/K+h?=
 =?us-ascii?q?AB5XLDj1aN0I+j33kaZShMWW352sHpV8HDUERoDoQOmsEDITs/TnKgmPHCc9qn?=
 =?us-ascii?q?edBbrQAwuf5F16oHLIFpChL2uXK2UBzdV+WBmdI1RSgQATXDUnh545CxqlxMr7?=
 =?us-ascii?q?fEdi4TAR4FH4pwBIyuJpMRn/T2jeqB2pajcyVJiQMh5W4hte6EfSNMyU9vhzED?=
 =?us-ascii?q?1A/p29sAyNLXSWZwRWAmEIWUyEBFHjMqOt5dna9OiYCfSxL+HTYbWVsuFeU/aI?=
 =?us-ascii?q?xZSy0opp5TqMN8OPPmV8AP0/wEZMQXd5G8HBkTUVVyMXjz7Nb9KcpBqk4CJ3s9?=
 =?us-ascii?q?uw8O71VwPv/4ePD7pSPM5r+xC3h6eDKuGRiDx4KTZeypMD23vIxKID014VjiFk?=
 =?us-ascii?q?byOtHqgYtS7RUKLQnbdaDwIaayN2LsdH87gw0RVNOcHFjNP4zbp4jv8zC1dYWl?=
 =?us-ascii?q?3tgMCpZcoWI26jMFPLHlqENLODJTfT2cH4fbu8SaFMjOVTrxCxuSyUE0nmPjSC?=
 =?us-ascii?q?kTnmTxGuMeFWgyGdMxxTo4W9chdrCWj+Q9PqcBy7MNlrjTIoxb04nG/FNWkZMW?=
 =?us-ascii?q?s0T0QY+qeX5yMbjulXGGFb6Hdha+6elHDdp73dI4wV9+F2HiB9ke5y6W4/jbBS?=
 =?us-ascii?q?6XcADKhwgCbIssJzpVyguu+RyzZmWVxFrTMdwMrfoUVjNL/D599aVHrF+h0l4m?=
 =?us-ascii?q?CZChBMrNxgXJmn76JXzNHTlKv1KB9E7dPY/MJaDM/RfobPZHMtKxvgHnjUEQ0Z?=
 =?us-ascii?q?QCSDNGfDikgbm/aXoDnd+oU+pN7skZwVUbhdfFg0EPoADQJiBtNUZN8jRjgkmL?=
 =?us-ascii?q?iXltMg42S/oBjYAs5du8aUeOiVBKDULymbhL9VblMrxrbxMYUVO4v6kxh5aV5/?=
 =?us-ascii?q?lZjLHUfWXPhLvCxtbwZyq0JIpistBlYv0l7oP1v+qEQYEuS5y0Y7?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ARAABCzBpch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBg2snjBaOHZdJgXMVGBMBhy0iNAkNAQMBAQEBAQECARMBAQEIDQk?=
 =?us-ascii?q?IKSMMgjYigmUDAwECJBkBATcBBQkBAVADVAYBDQUFgx2CAgWnNIFsM4J2AQEFg?=
 =?us-ascii?q?QUBhiMIh36DJYEcF4FAP4ERiAiFaolBCoF2hRdRkA0JkWICFpFZiUiQOoFGgg5?=
 =?us-ascii?q?wgzyCGwwXg0qKHAFXHwExgQUBAY1gAQE?=
X-IPAS-Result: =?us-ascii?q?A0ARAABCzBpch0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBg2s?=
 =?us-ascii?q?njBaOHZdJgXMVGBMBhy0iNAkNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYigmUDA?=
 =?us-ascii?q?wECJBkBATcBBQkBAVADVAYBDQUFgx2CAgWnNIFsM4J2AQEFgQUBhiMIh36DJYE?=
 =?us-ascii?q?cF4FAP4ERiAiFaolBCoF2hRdRkA0JkWICFpFZiUiQOoFGgg5wgzyCGwwXg0qKH?=
 =?us-ascii?q?AFXHwExgQUBAY1gAQE?=
X-IronPort-AV: E=Sophos;i="5.56,374,1539673200"; 
   d="scan'208";a="142849519"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 19 Dec 2018 14:58:30 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729363AbeLSW61 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Wed, 19 Dec 2018 17:58:27 -0500
Received: from hqemgate15.nvidia.com ([216.228.121.64]:13503 "EHLO
        hqemgate15.nvidia.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1728307AbeLSW6R (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 19 Dec 2018 17:58:17 -0500
Received: from hqpgpgate102.nvidia.com (Not Verified[216.228.121.13]) by hqemgate15.nvidia.com (using TLS: TLSv1.2, DES-CBC3-SHA)
        id <B5c1acd010001>; Wed, 19 Dec 2018 14:58:09 -0800
Received: from hqmail.nvidia.com ([172.20.161.6])
  by hqpgpgate102.nvidia.com (PGP Universal service);
  Wed, 19 Dec 2018 14:58:15 -0800
X-PGP-Universal: processed;
        by hqpgpgate102.nvidia.com on Wed, 19 Dec 2018 14:58:15 -0800
Received: from HQMAIL106.nvidia.com (172.18.146.12) by HQMAIL105.nvidia.com
 (172.20.187.12) with Microsoft SMTP Server (TLS) id 15.0.1395.4; Wed, 19 Dec
 2018 22:58:15 +0000
Received: from hqnvemgw01.nvidia.com (172.20.150.20) by HQMAIL106.nvidia.com
 (172.18.146.12) with Microsoft SMTP Server (TLS) id 15.0.1395.4 via Frontend
 Transport; Wed, 19 Dec 2018 22:58:14 +0000
Received: from skomatineni-linux.nvidia.com (Not Verified[10.110.103.52]) by hqnvemgw01.nvidia.com with Trustwave SEG (v7,5,8,10121)
        id <B5c1acc840004>; Wed, 19 Dec 2018 14:56:04 -0800
From: Sowjanya Komatineni <skomatineni@nvidia.com>
To: <robh+dt@kernel.org>, <mark.rutland@arm.com>,
        <mperttunen@nvidia.com>, <thierry.reding@gmail.com>,
        <jonathanh@nvidia.com>, <adrian.hunter@intel.com>,
        <ulf.hansson@linaro.org>, <pchandru@nvidia.com>
CC: <devicetree@vger.kernel.org>, <linux-tegra@vger.kernel.org>,
        <linux-kernel@vger.kernel.org>, <linux-mmc@vger.kernel.org>,
        Sowjanya Komatineni <skomatineni@nvidia.com>
Subject: [PATCH V2 3/3] mmc: tegra: SDMMC pads auto-calibration
Date: Wed, 19 Dec 2018 14:55:53 -0800
Message-ID: <1545260153-11338-3-git-send-email-skomatineni@nvidia.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1545260153-11338-1-git-send-email-skomatineni@nvidia.com>
References: <1545260153-11338-1-git-send-email-skomatineni@nvidia.com>
X-NVConfidentiality: public
MIME-Version: 1.0
Content-Type: text/plain
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=nvidia.com; s=n1;
        t=1545260289; bh=tavZPryP9hpCrx4xFldGTcLpWrEs1LaHRmLHHTWogwc=;
        h=X-PGP-Universal:From:To:CC:Subject:Date:Message-ID:X-Mailer:
         In-Reply-To:References:X-NVConfidentiality:MIME-Version:
         Content-Type;
        b=dgpNdq8n9bEZq8BSXrjKDVCcDey8nzpC7z654rv2/bFUkZ7va3F7HPt1/D/Hrrlh/
         ZQV5gihlEt+8OCaeyLZabU4JhdO4mrtvHZ7ERqW9z7z/px8vkkQlRd+jLttvRENNPl
         fFi9hC/MKuwYaPinYMib8Wf8FgFCLxqqUIiuxLj81N1RlPE/5u/alWj0b7iAa1zg10
         xLGDMq40giS+v6GL0hSvkd+pcTr4NGqvZ3s0a2kE3h1SzfpVtRCjldPsAc+3D7JQNC
         V7BhreruNb/UkoqgglwrChSZaizvYUlU4nUS/EmQIYctTBwL+YRJBGs9jW04fSB9M4
         E2TJJy6xLEnZw==
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Programs initial drive code offsets which will be used by auto
calibration process.

Programs fixed drive strengths for SDMMC pads when auto cal
timeouts. Fixed settings are based on Pre-SI analysis of the
pad design.

Signed-off-by: Sowjanya Komatineni <skomatineni@nvidia.com>
---
 drivers/mmc/host/sdhci-tegra.c | 107 +++++++++++++++++++++++++++++++----------
 1 file changed, 81 insertions(+), 26 deletions(-)

diff --git a/drivers/mmc/host/sdhci-tegra.c b/drivers/mmc/host/sdhci-tegra.c
index 7b95d088fdef..f8361249cf57 100644
--- a/drivers/mmc/host/sdhci-tegra.c
+++ b/drivers/mmc/host/sdhci-tegra.c
@@ -75,6 +75,7 @@
 #define SDHCI_TEGRA_SDMEM_COMP_PADCTRL_VREF_SEL_MASK	0x0000000f
 #define SDHCI_TEGRA_SDMEM_COMP_PADCTRL_VREF_SEL_VAL	0x7
 #define SDHCI_TEGRA_SDMEM_COMP_PADCTRL_E_INPUT_E_PWRD	BIT(31)
+#define SDHCI_COMP_PADCTRL_DRVUPDN_OFFSET_MASK		0x07FFF000
 
 #define SDHCI_TEGRA_AUTO_CAL_STATUS			0x1ec
 #define SDHCI_TEGRA_AUTO_CAL_ACTIVE			BIT(31)
@@ -121,6 +122,8 @@ struct sdhci_tegra {
 	struct pinctrl *pinctrl_sdmmc;
 	struct pinctrl_state *pinctrl_state_3v3;
 	struct pinctrl_state *pinctrl_state_1v8;
+	struct pinctrl_state *pinctrl_state_3v3_drv;
+	struct pinctrl_state *pinctrl_state_1v8_drv;
 
 	struct sdhci_tegra_autocal_offsets autocal_offsets;
 	ktime_t last_calib;
@@ -130,6 +133,9 @@ struct sdhci_tegra {
 	u32 dqs_trim;
 };
 
+static int tegra_sdhci_set_padctrl(struct sdhci_host *host, int voltage,
+							bool state_drvupdn);
+
 static u16 tegra_sdhci_readw(struct sdhci_host *host, int reg)
 {
 	struct sdhci_pltfm_host *pltfm_host = sdhci_priv(host);
@@ -437,6 +443,7 @@ static void tegra_sdhci_pad_autocalib(struct sdhci_host *host)
 			pdpu = offsets.pull_down_3v3 << 8 | offsets.pull_up_3v3;
 	}
 
+	/* Set initial offset before auto-calibration */
 	tegra_sdhci_set_pad_autocal_offset(host, pdpu);
 
 	card_clk_enabled = tegra_sdhci_configure_card_clk(host, false);
@@ -460,19 +467,15 @@ static void tegra_sdhci_pad_autocalib(struct sdhci_host *host)
 	if (ret) {
 		dev_err(mmc_dev(host->mmc), "Pad autocal timed out\n");
 
-		if (ios->signal_voltage == MMC_SIGNAL_VOLTAGE_180)
-			pdpu = offsets.pull_down_1v8_timeout << 8 |
-			       offsets.pull_up_1v8_timeout;
-		else
-			pdpu = offsets.pull_down_3v3_timeout << 8 |
-			       offsets.pull_up_3v3_timeout;
-
-		/* Disable automatic calibration and use fixed offsets */
+		/* Disable automatic cal and use fixed Drive Strengths */
 		reg = sdhci_readl(host, SDHCI_TEGRA_AUTO_CAL_CONFIG);
 		reg &= ~SDHCI_AUTO_CAL_ENABLE;
 		sdhci_writel(host, reg, SDHCI_TEGRA_AUTO_CAL_CONFIG);
 
-		tegra_sdhci_set_pad_autocal_offset(host, pdpu);
+		ret = tegra_sdhci_set_padctrl(host, ios->signal_voltage, false);
+		if (ret < 0)
+			dev_err(mmc_dev(host->mmc),
+			"Setting drive strengths failed %d\n", PTR_ERR(ret));
 	}
 }
 
@@ -743,27 +746,73 @@ static int tegra_sdhci_execute_tuning(struct sdhci_host *host, u32 opcode)
 	return mmc_send_tuning(host->mmc, opcode, NULL);
 }
 
-static int tegra_sdhci_set_padctrl(struct sdhci_host *host, int voltage)
+static int tegra_sdhci_set_padctrl(struct sdhci_host *host, int voltage,
+							bool state_drvupdn)
 {
 	struct sdhci_pltfm_host *pltfm_host = sdhci_priv(host);
 	struct sdhci_tegra *tegra_host = sdhci_pltfm_priv(pltfm_host);
-	int ret;
+	struct sdhci_tegra_autocal_offsets offsets =
+					tegra_host->autocal_offsets;
+	struct pinctrl_state *pinctrl_drvupdn = NULL;
+	int ret = 0;
+	u8 drvup = 0, drvdn = 0;
+	u32 reg;
 
-	if (!tegra_host->pad_control_available)
-		return 0;
+	if (!state_drvupdn) {
+		/* PADS Drive Strength */
+		if (voltage == MMC_SIGNAL_VOLTAGE_180) {
+			if (!IS_ERR(tegra_host->pinctrl_state_1v8_drv) &&
+				(tegra_host->pinctrl_state_1v8_drv != NULL)) {
+				pinctrl_drvupdn =
+					tegra_host->pinctrl_state_1v8_drv;
+			} else {
+				drvup = offsets.pull_up_1v8_timeout;
+				drvdn = offsets.pull_down_1v8_timeout;
+			}
+		} else {
+			if (!IS_ERR(tegra_host->pinctrl_state_3v3_drv) &&
+				(tegra_host->pinctrl_state_3v3_drv != NULL)) {
+				pinctrl_drvupdn =
+					tegra_host->pinctrl_state_3v3_drv;
+			} else {
+				drvup = offsets.pull_up_3v3_timeout;
+				drvdn = offsets.pull_down_3v3_timeout;
+			}
+		}
+
+		if (pinctrl_drvupdn != NULL) {
+			ret = pinctrl_select_state(tegra_host->pinctrl_sdmmc,
+							pinctrl_drvupdn);
+			if (ret < 0)
+				dev_err(mmc_dev(host->mmc),
+					"failed pads drvupdn, ret: %d\n", ret);
+		} else if ((drvup) || (drvdn)) {
+			reg = sdhci_readl(host,
+					SDHCI_TEGRA_SDMEM_COMP_PADCTRL);
+			reg &= ~SDHCI_COMP_PADCTRL_DRVUPDN_OFFSET_MASK;
+			reg |= (drvup << 20) | (drvdn << 12);
+			sdhci_writel(host, reg,
+					SDHCI_TEGRA_SDMEM_COMP_PADCTRL);
+		}
 
-	if (voltage == MMC_SIGNAL_VOLTAGE_180) {
-		ret = pinctrl_select_state(tegra_host->pinctrl_sdmmc,
-					   tegra_host->pinctrl_state_1v8);
-		if (ret < 0)
-			dev_err(mmc_dev(host->mmc),
-				"setting 1.8V failed, ret: %d\n", ret);
 	} else {
-		ret = pinctrl_select_state(tegra_host->pinctrl_sdmmc,
-					   tegra_host->pinctrl_state_3v3);
-		if (ret < 0)
-			dev_err(mmc_dev(host->mmc),
-				"setting 3.3V failed, ret: %d\n", ret);
+		/* Dual Voltage PADS Voltage selection */
+		if (!tegra_host->pad_control_available)
+			return 0;
+
+		if (voltage == MMC_SIGNAL_VOLTAGE_180) {
+			ret = pinctrl_select_state(tegra_host->pinctrl_sdmmc,
+						tegra_host->pinctrl_state_1v8);
+			if (ret < 0)
+				dev_err(mmc_dev(host->mmc),
+					"setting 1.8V failed, ret: %d\n", ret);
+		} else {
+			ret = pinctrl_select_state(tegra_host->pinctrl_sdmmc,
+						tegra_host->pinctrl_state_3v3);
+			if (ret < 0)
+				dev_err(mmc_dev(host->mmc),
+					"setting 3.3V failed, ret: %d\n", ret);
+		}
 	}
 
 	return ret;
@@ -778,7 +827,7 @@ static int sdhci_tegra_start_signal_voltage_switch(struct mmc_host *mmc,
 	int ret = 0;
 
 	if (ios->signal_voltage == MMC_SIGNAL_VOLTAGE_330) {
-		ret = tegra_sdhci_set_padctrl(host, ios->signal_voltage);
+		ret = tegra_sdhci_set_padctrl(host, ios->signal_voltage, true);
 		if (ret < 0)
 			return ret;
 		ret = sdhci_start_signal_voltage_switch(mmc, ios);
@@ -786,7 +835,7 @@ static int sdhci_tegra_start_signal_voltage_switch(struct mmc_host *mmc,
 		ret = sdhci_start_signal_voltage_switch(mmc, ios);
 		if (ret < 0)
 			return ret;
-		ret = tegra_sdhci_set_padctrl(host, ios->signal_voltage);
+		ret = tegra_sdhci_set_padctrl(host, ios->signal_voltage, true);
 	}
 
 	if (tegra_host->pad_calib_required)
@@ -805,6 +854,12 @@ static int tegra_sdhci_init_pinctrl_info(struct device *dev,
 		return -1;
 	}
 
+	tegra_host->pinctrl_state_1v8_drv = pinctrl_lookup_state(
+				tegra_host->pinctrl_sdmmc, "sdmmc-1v8-drv");
+
+	tegra_host->pinctrl_state_3v3_drv = pinctrl_lookup_state(
+				tegra_host->pinctrl_sdmmc, "sdmmc-3v3-drv");
+
 	tegra_host->pinctrl_state_3v3 =
 		pinctrl_lookup_state(tegra_host->pinctrl_sdmmc, "sdmmc-3v3");
 	if (IS_ERR(tegra_host->pinctrl_state_3v3)) {
-- 
2.7.4

