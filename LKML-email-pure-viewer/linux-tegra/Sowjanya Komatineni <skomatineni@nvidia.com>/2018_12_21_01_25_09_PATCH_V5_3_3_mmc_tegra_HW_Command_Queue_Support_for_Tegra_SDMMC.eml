Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:44:42 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id E67D058050C;
	Thu, 20 Dec 2018 18:16:16 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 20 Dec 2018 18:16:16 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ASWMIexyc8EoCEHHXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e8XI/ad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7S60/Vza/4KdxUBLmiD?=
 =?us-ascii?q?kJOSM3/m/UjcJ/jqxbrx29qBxk247ZYpqYNOZicq7HYd8XX3ZNUtpXWidcAo28?=
 =?us-ascii?q?dYwPD+8ZMOhFqIn8qVkOogG4BQisHuzk1zpGhnjz3aIgz+QhEAfG0xImH9IPrX?=
 =?us-ascii?q?/Zq871NKQVUeCw1qbI0TTDb/VI1jf76YjFaRYhoe+NXb1tcMre01MjGB/CjlWV?=
 =?us-ascii?q?sIHoOS6e2OcVs2WD8eZsSeaih3Q6pwx/vDSj3Nogh4rVio4Py13J9z11zJgoKd?=
 =?us-ascii?q?C5UkJ3f8CoHZhKuy2HKYd6X9kuT3xntSs0zLANpIS1czIQyJs9wh7Sc/yHfJaM?=
 =?us-ascii?q?4hLkTOuRPzh4i2x/eL6lhBa971KgyuviWcmwylpKqTBFktbUunAM0Rzc9NSHR+?=
 =?us-ascii?q?Nj8ku93TuDzR3f5+9aLUwuiKbWKIItzqQxm5cRqUjDGzX5mETyjK+YbEUk/e2o?=
 =?us-ascii?q?5vzjYrXnoJ+cKoB1hhj9MqswgMy/B/o3MgwXU2ic9+W80qPs/VfiTbVUgf05jL?=
 =?us-ascii?q?PZvIrZJcsFvK65BRFa0oI55xa4FTem38wUnWMbI1JdZBKHk4/pNknKIPD5Dvew?=
 =?us-ascii?q?nU6gkTh2x/3dOr3hA5PNLmXMkbv7fLZ97VJcxxQ3zdxF+51UDbQBKurpWkDtrN?=
 =?us-ascii?q?zYEgM5MwuszubnEtp9158eVniIAqODMKPSrEWH5uQgI+SXYI8VuTD9K+Uq5vL0?=
 =?us-ascii?q?jH85n0Mdcret3ZcNdH+4GfFmKV2DYXXwmtcBDXsKvg0mQePwk12CUTlTZ3WoU6?=
 =?us-ascii?q?Im/D47CpmrDYPCRoCrnbyA0z23HpxQZmBaFF+MFW3keJmDW/cJcCiSONNukiQY?=
 =?us-ascii?q?Vbi9TI8szRKuuxX8y7Z9KurU+zcXtZTs1NVu4+3TlBcy9SF7DsiH0mGNSX10kX?=
 =?us-ascii?q?0MRzMswK9/pkl9wE+Z0adkm/xYCcBT5/RRXwgnL5Hc0fJ1B8ryWg3beNeJU0ip?=
 =?us-ascii?q?QtOhDTE1TdIxxtsObl15G9WjiBDDwiWrD6UUl7yNGJw77Kbc02LtKMZ6znbMzL?=
 =?us-ascii?q?MhgEU+QstTKW2mgbZy+BXJCI7XjUqVjaaqer4a3C7W6miDy3GDvEVZUA52TKXE?=
 =?us-ascii?q?UmoTZkrQrdTl+EzCS6WiBqggMgtE0cSCMLdFasX1jVVaQ/fuIMjeY2O0m2e3GR?=
 =?us-ascii?q?aIxrONYJD2e2kH2yXdEkwEkwEV/XaJLgU+Aiaho2TDDD1hD17vYkXs8fVgp3O/?=
 =?us-ascii?q?VEM70waKb0h53bqv5hEVneCcS+8U3r8coighryt7HVmj0NPWEdaPvBdhc7hGbt?=
 =?us-ascii?q?M741dH0nzZuhd5PpyhKaBim1Effx52v0PoyxV4FIFAndI2o3MtyQp4MbiY309Z?=
 =?us-ascii?q?dzOEwZDwPaXaK2nv/By1d6HawFDf0NaM9acJ5/Q1sFHjvACvFko//HRrydhV03?=
 =?us-ascii?q?2A5prUCAoeS47+UkEy9xJivbHVfjE955/I1X1rKaS0qD7C1M4zC+s/1xmgeM1T?=
 =?us-ascii?q?MKWaGw/oEs0WHtShJ/Yum1e0cB0EJudS9KgvMsOidvuG3rOrPel6kDKni2RH/J?=
 =?us-ascii?q?5y0kaW+yVgTe7I2o4Pw+uE0QufSzf8kFChv9j3mIBFfz0THnCzyTP5BI5XfaBy?=
 =?us-ascii?q?eYcLCWGzI8y43Nl+hpjtW2JG+16nHV8JxMipeR+KZVznwQJQzVgXoWCgmSagzT?=
 =?us-ascii?q?x7iSsprqmc3CzJ2ejibwAIOm1IRGlji1fjP460gsseXEipaQgpiRSk6Vz7x6hd?=
 =?us-ascii?q?uKRwMW3TTV1UcCjxKmFoSrGwuaaaY85T9JMotj1aUeSmblCdULL9oRoa0yX4Em?=
 =?us-ascii?q?taxTA7cSyqu5rjkxx7jmKdMGh8rH7Ddc5swhff4cTWReRN0ToeWCl4lT7XC0C/?=
 =?us-ascii?q?P9az/NWYjZfDsv2kWGKnWZ1eai3rzYKGtCum6mxmGxy/n/avmtL5FQg2yzP019?=
 =?us-ascii?q?5vVS/QthbzfpHr17imMeJgZkRoAV7868lgFY1knIo/mooQ2WQEiZWP5nUIj33z?=
 =?us-ascii?q?MdpA1KL6bXoNQyMLwtHP7Ajk3k1jMmyGx4bjWnqBxcthYsGwYnkK1SIl88BKFK?=
 =?us-ascii?q?CU4aRYnStyp1q0twPQbuJ7njcA0vsu838ajvoNuAosyCWdH78TEVNZPSzqixSH?=
 =?us-ascii?q?8dS+oL9La2aodLi6zFB+ksy5DLGevgFcX270dYw4Ei936sV/LUjA0Hnu6oz/fN?=
 =?us-ascii?q?nQbNQTtgCbkhvajuhVLo4xmeQOhSZ9JW39unglwfYhjRNyxZG6oJSHK2J18aK7?=
 =?us-ascii?q?GBFYMyP6Z9gJ9jHxl6penduW34OyHpVnADoLR4DlTfapEDIUqPTmOByCEDw6qn?=
 =?us-ascii?q?eHB7XfGRWT51thr3LKC5qrLW2YJGEFzdV+QxmQPExegAcJXDUjg542DAaqyNb6?=
 =?us-ascii?q?cEd+4DAR6UX1qh9NyuJuKhn+XX3TpAauajcoVpefKABa4R1F50fQKcae9P58Hz?=
 =?us-ascii?q?lE/p29qwyAMmybaBpJDWEKWUyEBkrvPrq05dnH/OiXGPC+L+bVYbiVrexeVvGI?=
 =?us-ascii?q?xY+g04d8/jaMMNmPMWdmD/EhxkVDWnV5EdzDmzoTUywXiz7Nb8mDqRim5y14td?=
 =?us-ascii?q?q//+rrWQ714YuPCqBfMdFu+xCwnKeCOPSchCd/KTZEyJwMwWXEx6QY3F4Xkytu?=
 =?us-ascii?q?bSWiEawctS7RS6LdgrNXDx8eay9pKMRE9b4z3glTNs7dkd710r94jvgoC1ZKT1?=
 =?us-ascii?q?Dhm8epZdAULGG5Ll/IGEGLNLGeLz3R3873eb+8SaFXjOhMtxy/ozCbE0riPjSF?=
 =?us-ascii?q?jzboVhCvPvtKjCGUJxFevIC9chBwCWnsVt7maxu7MMNpgj0y27E7mnTKNWtPeQ?=
 =?us-ascii?q?R7JhdXqbeQri9EqvZyAWpM6jxiN+bS327N6uDCKdAMrOdvCyJ4v+tA5TIxzL4D?=
 =?us-ascii?q?qGkQQeR4gjfOs9hjpXmgjOiDyzMhWx1L/HID0J6LvEh4I7Sf7JRMWHDL1B0I5G?=
 =?us-ascii?q?SUTR8Noo0hQontvKZZ1tjGkqLbLilD/9Pdu8AbAp6QYJaOPGAgOByvGCPSEAYf?=
 =?us-ascii?q?ZT+tKWzbwUdalafWvimIqpZ8qpHqg4EJTJdfVVo8DPRcDV5qSo8sOpByCwgjjr?=
 =?us-ascii?q?ySit8BrVm5qRDNRcNXuJGPAumRBvDmNDefgL9FTx0WwL/5JMIYMYitiB8qUUVz?=
 =?us-ascii?q?gImfQxmYZttKuCA0NgI=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ARAAAQTBxch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBg2snjBaLe4Ihl0qBcxUYEwGHLiI0CQ0BAwEBAQEBAQIBEwEBAQg?=
 =?us-ascii?q?NCQgpIwyCNiKCZQMDAQIkGQEBNwEFCQEBUANUBgEJBAUFgx2CAgWmFYFsM4J2A?=
 =?us-ascii?q?QEFgQUBhiYIh36DJYEcF4FAP4N1hHiGFol+gUaFGYVJixgJkWUCFpFdiU2QQIF?=
 =?us-ascii?q?Ggg5wgzyCGwwXg0qKHAFXHwExgQUBAYtMgk0BAQ?=
X-IPAS-Result: =?us-ascii?q?A0ARAAAQTBxch0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBg2s?=
 =?us-ascii?q?njBaLe4Ihl0qBcxUYEwGHLiI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiKCZ?=
 =?us-ascii?q?QMDAQIkGQEBNwEFCQEBUANUBgEJBAUFgx2CAgWmFYFsM4J2AQEFgQUBhiYIh36?=
 =?us-ascii?q?DJYEcF4FAP4N1hHiGFol+gUaFGYVJixgJkWUCFpFdiU2QQIFGgg5wgzyCGwwXg?=
 =?us-ascii?q?0qKHAFXHwExgQUBAYtMgk0BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,379,1539673200"; 
   d="scan'208";a="56063848"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 20 Dec 2018 18:16:14 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2390815AbeLUCQN (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Thu, 20 Dec 2018 21:16:13 -0500
Received: from hqemgate14.nvidia.com ([216.228.121.143]:11701 "EHLO
        hqemgate14.nvidia.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S2403803AbeLUCQK (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 20 Dec 2018 21:16:10 -0500
Received: from hqpgpgate102.nvidia.com (Not Verified[216.228.121.13]) by hqemgate14.nvidia.com (using TLS: TLSv1.2, DES-CBC3-SHA)
        id <B5c1c4ce00000>; Thu, 20 Dec 2018 18:16:02 -0800
Received: from hqmail.nvidia.com ([172.20.161.6])
  by hqpgpgate102.nvidia.com (PGP Universal service);
  Thu, 20 Dec 2018 18:16:09 -0800
X-PGP-Universal: processed;
        by hqpgpgate102.nvidia.com on Thu, 20 Dec 2018 18:16:09 -0800
Received: from HQMAIL107.nvidia.com (172.20.187.13) by HQMAIL101.nvidia.com
 (172.20.187.10) with Microsoft SMTP Server (TLS) id 15.0.1395.4; Fri, 21 Dec
 2018 02:16:06 +0000
Received: from hqnvemgw01.nvidia.com (172.20.150.20) by HQMAIL107.nvidia.com
 (172.20.187.13) with Microsoft SMTP Server (TLS) id 15.0.1395.4 via Frontend
 Transport; Fri, 21 Dec 2018 02:16:06 +0000
Received: from skomatineni-linux.nvidia.com (Not Verified[10.110.103.52]) by hqnvemgw01.nvidia.com with Trustwave SEG (v7,5,8,10121)
        id <B5c1c410b0003>; Thu, 20 Dec 2018 17:25:36 -0800
From: Sowjanya Komatineni <skomatineni@nvidia.com>
To: <robh+dt@kernel.org>, <mark.rutland@arm.com>,
        <mperttunen@nvidia.com>, <thierry.reding@gmail.com>,
        <jonathanh@nvidia.com>, <adrian.hunter@intel.com>,
        <ulf.hansson@linaro.org>
CC: <devicetree@vger.kernel.org>, <linux-tegra@vger.kernel.org>,
        <linux-kernel@vger.kernel.org>, <linux-mmc@vger.kernel.org>,
        Sowjanya Komatineni <skomatineni@nvidia.com>
Subject: [PATCH V5 3/3] mmc: tegra: HW Command Queue Support for Tegra SDMMC
Date: Thu, 20 Dec 2018 17:25:09 -0800
Message-ID: <1545355509-6914-4-git-send-email-skomatineni@nvidia.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1545355509-6914-1-git-send-email-skomatineni@nvidia.com>
References: <1545355509-6914-1-git-send-email-skomatineni@nvidia.com>
X-NVConfidentiality: public
MIME-Version: 1.0
Content-Type: text/plain
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=nvidia.com; s=n1;
        t=1545358563; bh=YcW0jSk2mEpyBkq9C9NZTaHi4y0btI5OvMS6KLex5fk=;
        h=X-PGP-Universal:From:To:CC:Subject:Date:Message-ID:X-Mailer:
         In-Reply-To:References:X-NVConfidentiality:MIME-Version:
         Content-Type;
        b=Sh1qd7dxM9iBO1y16E3M+Kr+V5YFS9cs70E6epZsP7Znfjt8kI5+iICMZgvegz3MN
         QGKe7sMzNDQLyn2+RFXyqVqn1wIGa4DXf7LXSH9N5cy7n7iUSaTl8k/A7vlIJ3WfRH
         0yAfJurMT4Bu0xMLNWzbwPRUMqtWRGqxO5N8Tls87eQEgP4iVn8ahXflKFhdsKhKn6
         0o1q7281CkwDEq0shwpEiRcoTcJGnTzotxe6dQDQIlL7UQHWpVFpjsTffeIJbw20w0
         PWlFX7s90tSFzET78jjm/SxI/lIIrn149ZJFpP0c8pr8CGpGdkbL0IeNDkUE4k3Gwl
         t1NjwnINDOJUg==
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This patch adds HW Command Queue for supported Tegra SDMMC
controllers.

Tegra SDHCI with Quirk SDHCI_QUIRK2_BROKEN_64_BIT_DMA disables the
use of 64_BIT DMA to disable 64-bit addressing mode access to the
system memory and sdhci_cqe_enable using flag SDHCI_USE_64_BIT_DMA
for ADMA32/ADMA2 Vs ADMA64/ADMA3 DMA selection.

CQE need to use ADMA3 as it need to fetch task descriptor along
with transfer descriptor, so this patch forces DMA Select to be
ADMA3 for CQE.

Tegra SDMMC Host design prevents write access to BLOCK_COUNT
register when CQE is enabled to prevent SW from updating block
size during Command Queue mode. As per eMMC5.1 device spec, block
size of 512 B need to be set prior to enabling Command Queue.

Signed-off-by: Sowjanya Komatineni <skomatineni@nvidia.com>
---
 drivers/mmc/host/Kconfig       |   1 +
 drivers/mmc/host/sdhci-tegra.c | 138 ++++++++++++++++++++++++++++++++++++++++-
 2 files changed, 138 insertions(+), 1 deletion(-)

diff --git a/drivers/mmc/host/Kconfig b/drivers/mmc/host/Kconfig
index 1b58739d9744..5aa2de2c7609 100644
--- a/drivers/mmc/host/Kconfig
+++ b/drivers/mmc/host/Kconfig
@@ -250,6 +250,7 @@ config MMC_SDHCI_TEGRA
 	depends on ARCH_TEGRA
 	depends on MMC_SDHCI_PLTFM
 	select MMC_SDHCI_IO_ACCESSORS
+	select MMC_CQHCI
 	help
 	  This selects the Tegra SD/MMC controller. If you have a Tegra
 	  platform with SD or MMC devices, say Y or M here.
diff --git a/drivers/mmc/host/sdhci-tegra.c b/drivers/mmc/host/sdhci-tegra.c
index 7b95d088fdef..68b328df05ed 100644
--- a/drivers/mmc/host/sdhci-tegra.c
+++ b/drivers/mmc/host/sdhci-tegra.c
@@ -33,6 +33,7 @@
 #include <linux/ktime.h>
 
 #include "sdhci-pltfm.h"
+#include "cqhci.h"
 
 /* Tegra SDHOST controller vendor register definitions */
 #define SDHCI_TEGRA_VENDOR_CLOCK_CTRL			0x100
@@ -89,6 +90,9 @@
 #define NVQUIRK_NEEDS_PAD_CONTROL			BIT(7)
 #define NVQUIRK_DIS_CARD_CLK_CONFIG_TAP			BIT(8)
 
+/* SDMMC CQE Base Address for Tegra Host Ver 4.1 and Higher */
+#define SDHCI_TEGRA_CQE_BASE_ADDR			0xF000
+
 struct sdhci_tegra_soc_data {
 	const struct sdhci_pltfm_data *pdata;
 	u32 nvquirks;
@@ -128,6 +132,7 @@ struct sdhci_tegra {
 	u32 default_tap;
 	u32 default_trim;
 	u32 dqs_trim;
+	bool enable_hwcq;
 };
 
 static u16 tegra_sdhci_readw(struct sdhci_host *host, int reg)
@@ -836,6 +841,80 @@ static void tegra_sdhci_voltage_switch(struct sdhci_host *host)
 		tegra_host->pad_calib_required = true;
 }
 
+static void sdhci_tegra_cqe_enable(struct mmc_host *mmc)
+{
+	struct sdhci_host *host = mmc_priv(mmc);
+	struct cqhci_host *cq_host = mmc->cqe_private;
+	unsigned long flags;
+	u8 ctrl;
+	u32 cqcfg = 0;
+
+	spin_lock_irqsave(&host->lock, flags);
+
+	ctrl = sdhci_readb(host, SDHCI_HOST_CONTROL);
+	ctrl &= ~SDHCI_CTRL_DMA_MASK;
+	if ((host->flags & SDHCI_USE_64_BIT_DMA) ||
+			(host->quirks2 & SDHCI_QUIRK2_BROKEN_64_BIT_DMA))
+		ctrl |= SDHCI_CTRL_ADMA64;
+	else
+		ctrl |= SDHCI_CTRL_ADMA32;
+	sdhci_writeb(host, ctrl, SDHCI_HOST_CONTROL);
+
+	/* Tegra SDMMC Controller design prevents write access to BLOCK_COUNT
+	 * registers when CQE is enabled.
+	 */
+	cqcfg = cqhci_readl(cq_host, CQHCI_CFG);
+	if (cqcfg & CQHCI_ENABLE)
+		cqhci_writel(cq_host, (cqcfg & ~CQHCI_ENABLE), CQHCI_CFG);
+
+	sdhci_writew(host, SDHCI_MAKE_BLKSZ(host->sdma_boundary, 512),
+		     SDHCI_BLOCK_SIZE);
+
+	if (cqcfg & CQHCI_ENABLE)
+		cqhci_writel(cq_host, cqcfg, CQHCI_CFG);
+
+	/* Set maximum timeout */
+	sdhci_writeb(host, 0xE, SDHCI_TIMEOUT_CONTROL);
+
+	host->ier = host->cqe_ier;
+
+	sdhci_writel(host, host->ier, SDHCI_INT_ENABLE);
+	sdhci_writel(host, host->ier, SDHCI_SIGNAL_ENABLE);
+
+	host->cqe_on = true;
+
+	pr_debug("%s: sdhci: CQE on, IRQ mask %#x, IRQ status %#x\n",
+		 mmc_hostname(mmc), host->ier,
+		 sdhci_readl(host, SDHCI_INT_STATUS));
+
+	mmiowb();
+	spin_unlock_irqrestore(&host->lock, flags);
+}
+
+static void sdhci_tegra_dumpregs(struct mmc_host *mmc)
+{
+	sdhci_dumpregs(mmc_priv(mmc));
+}
+
+static u32 sdhci_tegra_cqhci_irq(struct sdhci_host *host, u32 intmask)
+{
+	int cmd_error = 0;
+	int data_error = 0;
+
+	if (!sdhci_cqe_irq(host, intmask, &cmd_error, &data_error))
+		return intmask;
+
+	cqhci_irq(host->mmc, intmask, cmd_error, data_error);
+
+	return 0;
+}
+
+static const struct cqhci_host_ops sdhci_tegra_cqhci_ops = {
+	.enable	= sdhci_tegra_cqe_enable,
+	.disable = sdhci_cqe_disable,
+	.dumpregs = sdhci_tegra_dumpregs,
+};
+
 static const struct sdhci_ops tegra_sdhci_ops = {
 	.get_ro     = tegra_sdhci_get_ro,
 	.read_w     = tegra_sdhci_readw,
@@ -989,6 +1068,7 @@ static const struct sdhci_ops tegra186_sdhci_ops = {
 	.set_uhs_signaling = tegra_sdhci_set_uhs_signaling,
 	.voltage_switch = tegra_sdhci_voltage_switch,
 	.get_max_clock = tegra_sdhci_get_max_clock,
+	.irq = sdhci_tegra_cqhci_irq,
 };
 
 static const struct sdhci_pltfm_data sdhci_tegra186_pdata = {
@@ -1030,6 +1110,55 @@ static const struct of_device_id sdhci_tegra_dt_match[] = {
 };
 MODULE_DEVICE_TABLE(of, sdhci_tegra_dt_match);
 
+static int sdhci_tegra_add_host(struct sdhci_host *host)
+{
+	struct sdhci_pltfm_host *pltfm_host = sdhci_priv(host);
+	struct sdhci_tegra *tegra_host = sdhci_pltfm_priv(pltfm_host);
+	struct cqhci_host *cq_host;
+	bool dma64;
+	int ret;
+
+	if (!tegra_host->enable_hwcq)
+		return sdhci_add_host(host);
+
+	host->v4_mode = true;
+
+	ret = sdhci_setup_host(host);
+	if (ret)
+		return ret;
+
+	host->mmc->caps2 |= MMC_CAP2_CQE | MMC_CAP2_CQE_DCMD;
+
+	cq_host = devm_kzalloc(host->mmc->parent,
+				sizeof(*cq_host), GFP_KERNEL);
+	if (!cq_host) {
+		ret = -ENOMEM;
+		goto cleanup;
+	}
+
+	cq_host->mmio = host->ioaddr + SDHCI_TEGRA_CQE_BASE_ADDR;
+	cq_host->ops = &sdhci_tegra_cqhci_ops;
+
+	dma64 = host->flags & SDHCI_USE_64_BIT_DMA;
+	if (dma64)
+		cq_host->caps |= CQHCI_TASK_DESC_SZ_128;
+
+	ret = cqhci_init(cq_host, host->mmc, dma64);
+	if (ret)
+		goto cleanup;
+
+	ret = __sdhci_add_host(host);
+	if (ret)
+		goto cleanup;
+
+	return 0;
+
+cleanup:
+	sdhci_cleanup_host(host);
+	return ret;
+
+}
+
 static int sdhci_tegra_probe(struct platform_device *pdev)
 {
 	const struct of_device_id *match;
@@ -1039,6 +1168,7 @@ static int sdhci_tegra_probe(struct platform_device *pdev)
 	struct sdhci_tegra *tegra_host;
 	struct clk *clk;
 	int rc;
+	struct resource *iomem;
 
 	match = of_match_device(sdhci_tegra_dt_match, &pdev->dev);
 	if (!match)
@@ -1056,6 +1186,12 @@ static int sdhci_tegra_probe(struct platform_device *pdev)
 	tegra_host->pad_control_available = false;
 	tegra_host->soc_data = soc_data;
 
+	iomem = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (resource_size(iomem) > SDHCI_TEGRA_CQE_BASE_ADDR)
+		tegra_host->enable_hwcq = true;
+	else
+		tegra_host->enable_hwcq = false;
+
 	if (soc_data->nvquirks & NVQUIRK_NEEDS_PAD_CONTROL) {
 		rc = tegra_sdhci_init_pinctrl_info(&pdev->dev, tegra_host);
 		if (rc == 0)
@@ -1117,7 +1253,7 @@ static int sdhci_tegra_probe(struct platform_device *pdev)
 
 	usleep_range(2000, 4000);
 
-	rc = sdhci_add_host(host);
+	rc = sdhci_tegra_add_host(host);
 	if (rc)
 		goto err_add_host;
 
-- 
2.7.4

