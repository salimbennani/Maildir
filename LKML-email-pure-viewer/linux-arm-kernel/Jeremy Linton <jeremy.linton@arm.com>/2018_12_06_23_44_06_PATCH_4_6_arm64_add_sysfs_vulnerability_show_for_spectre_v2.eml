Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:55:17 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga008.fm.intel.com (fmsmga008.fm.intel.com [10.253.24.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id B84F6580375;
	Thu,  6 Dec 2018 15:44:45 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by fmsmga008-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 15:44:45 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AvOAWmxenLEPPXPKjM+X3CQsylGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc6+ZhSN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4qF2QxHqlS?=
 =?us-ascii?q?gHLSY0/mHJhMJtgqxVoxWvqB5xw47PeIGYNuFzcr/Bcd4AWWZMRNpdWzBHD4ih?=
 =?us-ascii?q?b4UPFe0BPeNAoof5uVQOtwWxBQysBejyzDFIh3n23bE90+QnDArL2w4gEMwUsH?=
 =?us-ascii?q?vKqdX0NL0eUeS0zKnO0TXDaPVW1Czn54jSdxAtu+2DXbV1ccfIz0QkCgDLjk2I?=
 =?us-ascii?q?pID7Iz+Y0v4Bv3WV4uZ+T+6jlm0qpx1rrjWuxMogkpfFip8Xx1ze6Cl0z5o5Kc?=
 =?us-ascii?q?elREJnfNKoCplduz2cOoBrWM0tWXtotzw/yrAeuZ60YiwKyJM/yh7BZPyIbZKI?=
 =?us-ascii?q?7gjgVOmPOzd4gmxqeLalixa160igxfXwVsiy0FlUsipIisfAumwJ2hDJ98SKRO?=
 =?us-ascii?q?Vx8l281TuMywzf8OBJLEIsmareMZEhw7owlpQJsUTEGy/7gEH2jK6QdkU59emk?=
 =?us-ascii?q?8ufnbav8pp+aKYB0jhjyMqMgm8y5H+s4KBMDX3aU+euizr3v5075T6tQjv0wjK?=
 =?us-ascii?q?bZtIrWJcMBpq62GwNVyJos6w6jDze619QVhX0HLFNGeB2ZlYToNEzOLev8Dfe+?=
 =?us-ascii?q?hVSsjThqy+rHPr3nHpXCMHzDnK39crZ67k5W0BAzwsxH55JIFrEBJ+r+Wk/ru9?=
 =?us-ascii?q?zZEh82KQu0z/znCNVgzIweX22PD7SdMKPTt1+I++0uL/ONZI8TpDbyNfwl6+Ty?=
 =?us-ascii?q?gn8+nF8XZbOp0ocPaHCkAvRmJF2UYXjrgtgfC2sKvQ0+TOrsiF2FSjNTY3eyX6?=
 =?us-ascii?q?Qh5jA0Eo6mDIHDRpyzj7yFxiu0AppWZmVeAFCWDXjob5mEW+sLaC+KOMBhiTwE?=
 =?us-ascii?q?Vb+iS4M7zxGhrg36xqFjLurV/C0YqJ3i2MJ05+3ViRE96zh0A96B3GGKSmF+hn?=
 =?us-ascii?q?kISCMu3KBjvUx9zU+O0atijPxeD9BT4/JJXR08NZ7T1OF6D9HyWgTcftaGUlqm?=
 =?us-ascii?q?Q9OmAS0vQdI12dMBf0F9G9C6hBDZwyWqG6MVl6CMBJEs763TxWbxKNhnx3bGzq?=
 =?us-ascii?q?YhiUImTdVJNWGhgq5/9A3TB4rSnkWdlqaqc7kc3SHX+GeCy2qOoF9XUApqXarZ?=
 =?us-ascii?q?WnAfY1Pcrc7l6UPaU7+uFbMnPxNcxsGYNKtFdMfljVVcS/flI9TRfWSxlny0BR?=
 =?us-ascii?q?aJwLOMcYXrd38c3CXbFEgLjQQT8WyaOgg5Ayeru3jeAyB2FVLzf0Ps9vFzqG+6?=
 =?us-ascii?q?Tk8xyAGKc01h1rqv9h4Jn/CcTOkT3rYFuCcnpDV5B1K939PQC9qdqAttZqRcYd?=
 =?us-ascii?q?Uh4FhZ0WLVrRByPpulL6p6nF4Rbxx3v1/y1xVwEohPi8wqo20lzQVsKaOUykhO?=
 =?us-ascii?q?dy6F0p/qPL3XKW7y/A60Zq7S21He1suW+6gV5PQ5rVXjoB+mFk44/3p71NlV1m?=
 =?us-ascii?q?OW5o/WAwoKTZLxTkE3+gB6prHHeCUy+5nY1HxsMaautD/C1MkkBO8kyhamYtde?=
 =?us-ascii?q?P7mIFA70E80GGceuLPYmlESubhIBJOpS7rI7P9u6d/ua366mJPxgnDO6gmtd+o?=
 =?us-ascii?q?Byz0WM+zB6SuHWxZYFwuiU0RedWDf4kViurNr3mYdCZTwJGmq/yC7kBJNeZ6Fo?=
 =?us-ascii?q?fIYLD3uuLNOzxtlkm5HtXHtY/ka5B1wawM+pZQaSb1vl0AxQ1EQbu3ymlTGjzz?=
 =?us-ascii?q?xplTEkta6f3C3Iw+T/exsLIG9LRG9+jVjyJYi4lcwVXE+tbwIxjhuq+V76x7RH?=
 =?us-ascii?q?pKR4N2TTQ11HfzL1L2FhVau8rKGCbNRM6JMrsCVXVvqzYVaBR775ohsa1T7jHm?=
 =?us-ascii?q?REyDA6cTGqpov2nxhghG2BK3ZzqWLTedtsyhfH+NzcWflR0yIGRSZijjnbHFq8?=
 =?us-ascii?q?P9iv/diPk5fDs+a+V3+uV5FJcCnry5+AuzW/5WFwHRK/mPWzkMX9EQcmyS/7y8?=
 =?us-ascii?q?VqVSLQoRb/eIbr1r62MeJ6fkZyAl/85NF3GoV/kos2mZER1mIWhpST/Xobj2jz?=
 =?us-ascii?q?Nc9X1r75bHoIXTQL2cLa4BD52E1/KXKE34f5VnSewsR7fdW7bH0Z2jkh789UEq?=
 =?us-ascii?q?eb96JLnTF6olejqQLRYP59nioSyPc06X4ahf0JtxQpzimHHr8SGkxYNzT2lxuU?=
 =?us-ascii?q?99C+sLlXZGG3fLis00p+mMqtDbCYrQFaRXb5YYwiHS5r48V7MVLM1mDz647+dN?=
 =?us-ascii?q?nRa9ITqgObkxPag+dJL5Ixk+IAhTB7NmLloX0l1+k7gAR10p6gu4iHL3ht8Li9?=
 =?us-ascii?q?Ah5FLTD1Y8IT+jfwjadRhMqW3oavHol/FTUPRpfnUfWoEDcKv/T9KwmOCCE8qm?=
 =?us-ascii?q?ucGbfHHw+Q8kJmoGzUE5yxK3GbPnoZzchhRBmAIkxQmhsUUS4+np44EACq2cPg?=
 =?us-ascii?q?fF145jAX+l73tB9Mxvh0OBn4V2fVvB2oZSssSJiDMBpW6RlP5kfSMcyD9+JzAj?=
 =?us-ascii?q?tX/pu7oAyWLWybYQtIAHoNWkyFAVDjI7av6cPB8+ieGuqxMf/Oba+SpuxZUveC?=
 =?us-ascii?q?3Yiv3Zd+/zaQKsWPOWFvD/0l1UpCXnB5GMXZly8MSywNkCLNYNCUpA2h+i1stc?=
 =?us-ascii?q?2/9PXrWATy5YqAEbdSMNNv+wyojqeHLeKfmCF5KTNA3JMW2XDI0KQf3EIViyx2?=
 =?us-ascii?q?bTatDK8PtTTTQ6PQgKNXCx8bZjh3NMtJ6aI8wwZMNdTaitPzyr53kPo1B01ZWl?=
 =?us-ascii?q?zmn8GjfdYKLH2lNFPbGEaLM6yLJSHKw8Hye6+zVadcg/lUtxKuvzaWCEvjPjWF?=
 =?us-ascii?q?lzn0WBGjK+BMjCeHPBNAvIGxaApiCW/mTNj+cB20LMd3jSEqwb0znn7LNXQTMT?=
 =?us-ascii?q?55c0NMqL2f9SJZgvVlFGxH4XpoNu2Emyef7+nFJZcaq/prAiJol+1E5HQ20ada?=
 =?us-ascii?q?7CZBRK89pCyHqt9ovkHjm/OKjzlqShxDrh5PhZmXpgNjP6vD/5VNUHqC+wgCvk?=
 =?us-ascii?q?uKDBFfhdZ/B9j+84RRzMTIkuqnKjpY/tfFu88dAdTTLuqOKn9nOh3sTm2HRDAZ?=
 =?us-ascii?q?RCKmYDmMz3dWl+ufoyWY?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AeAADZswlch0O0hNFjHgEGBwaBUQkLA?=
 =?us-ascii?q?YNrJ5gjgiGXOoFzLBMBh1ciNAkNAQMBAQEBAQECARMBAQEIDQkIKS+CNiKCZQM?=
 =?us-ascii?q?DAQIkUgYJAQFQA1QZBYMcggIEAacgM4ovh3CEL4FXP4ERjW4CkDOQLAcCgiAEj?=
 =?us-ascii?q?xcjkTaaUoINMxojUIJskHogAQExgQUBAYo6AQE?=
X-IPAS-Result: =?us-ascii?q?A0AeAADZswlch0O0hNFjHgEGBwaBUQkLAYNrJ5gjgiGXOoF?=
 =?us-ascii?q?zLBMBh1ciNAkNAQMBAQEBAQECARMBAQEIDQkIKS+CNiKCZQMDAQIkUgYJAQFQA?=
 =?us-ascii?q?1QZBYMcggIEAacgM4ovh3CEL4FXP4ERjW4CkDOQLAcCgiAEjxcjkTaaUoINMxo?=
 =?us-ascii?q?jUIJskHogAQExgQUBAYo6AQE?=
X-IronPort-AV: E=Sophos;i="5.56,324,1539673200"; 
   d="scan'208";a="65714221"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 06 Dec 2018 15:44:44 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726444AbeLFXoh (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 6 Dec 2018 18:44:37 -0500
Received: from usa-sjc-mx-foss1.foss.arm.com ([217.140.101.70]:35928 "EHLO
        foss.arm.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726249AbeLFXoe (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 6 Dec 2018 18:44:34 -0500
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.72.51.249])
        by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id 4D8481682;
        Thu,  6 Dec 2018 15:44:34 -0800 (PST)
Received: from beelzebub.austin.arm.com (beelzebub.austin.arm.com [10.118.12.119])
        by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPA id C09853F5AF;
        Thu,  6 Dec 2018 15:44:33 -0800 (PST)
From: Jeremy Linton <jeremy.linton@arm.com>
To: linux-arm-kernel@lists.infradead.org
Cc: catalin.marinas@arm.com, will.deacon@arm.com, marc.zyngier@arm.com,
        suzuki.poulose@arm.com, dave.martin@arm.com,
        shankerd@codeaurora.org, mark.rutland@arm.com,
        linux-kernel@vger.kernel.org, ykaukab@suse.de,
        Jeremy Linton <jeremy.linton@arm.com>
Subject: [PATCH 4/6] arm64: add sysfs vulnerability show for spectre v2
Date: Thu,  6 Dec 2018 17:44:06 -0600
Message-Id: <20181206234408.1287689-5-jeremy.linton@arm.com>
X-Mailer: git-send-email 2.17.2
In-Reply-To: <20181206234408.1287689-1-jeremy.linton@arm.com>
References: <20181206234408.1287689-1-jeremy.linton@arm.com>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Add code to track whether all the cores in the machine are
vulnerable, and whether all the vulnerable cores have been
mitigated.

Once we have that information we can add the sysfs stub and
provide an accurate view of what is known about the machine.

Signed-off-by: Jeremy Linton <jeremy.linton@arm.com>
---
 arch/arm64/kernel/cpu_errata.c | 72 +++++++++++++++++++++++++++++++---
 1 file changed, 67 insertions(+), 5 deletions(-)

diff --git a/arch/arm64/kernel/cpu_errata.c b/arch/arm64/kernel/cpu_errata.c
index 559ecdee6fd2..6505c93d507e 100644
--- a/arch/arm64/kernel/cpu_errata.c
+++ b/arch/arm64/kernel/cpu_errata.c
@@ -109,6 +109,11 @@ cpu_enable_trap_ctr_access(const struct arm64_cpu_capabilities *__unused)
 
 atomic_t arm64_el2_vector_last_slot = ATOMIC_INIT(-1);
 
+#if defined(CONFIG_HARDEN_BRANCH_PREDICTOR) || defined(CONFIG_GENERIC_CPU_VULNERABILITIES)
+/* Track overall mitigation state. We are only mitigated if all cores are ok */
+static enum { A64_HBP_UNSET, A64_HBP_MIT, A64_HBP_NOTMIT } __hardenbp_enab = A64_HBP_UNSET;
+#endif
+
 #ifdef CONFIG_HARDEN_BRANCH_PREDICTOR
 #include <asm/mmu_context.h>
 #include <asm/cacheflush.h>
@@ -231,15 +236,19 @@ enable_smccc_arch_workaround_1(const struct arm64_cpu_capabilities *entry)
 	if (!entry->matches(entry, SCOPE_LOCAL_CPU))
 		return;
 
-	if (psci_ops.smccc_version == SMCCC_VERSION_1_0)
+	if (psci_ops.smccc_version == SMCCC_VERSION_1_0) {
+		__hardenbp_enab = A64_HBP_NOTMIT;
 		return;
+	}
 
 	switch (psci_ops.conduit) {
 	case PSCI_CONDUIT_HVC:
 		arm_smccc_1_1_hvc(ARM_SMCCC_ARCH_FEATURES_FUNC_ID,
 				  ARM_SMCCC_ARCH_WORKAROUND_1, &res);
-		if ((int)res.a0 < 0)
+		if ((int)res.a0 < 0) {
+			__hardenbp_enab = A64_HBP_NOTMIT;
 			return;
+		}
 		cb = call_hvc_arch_workaround_1;
 		/* This is a guest, no need to patch KVM vectors */
 		smccc_start = NULL;
@@ -249,14 +258,17 @@ enable_smccc_arch_workaround_1(const struct arm64_cpu_capabilities *entry)
 	case PSCI_CONDUIT_SMC:
 		arm_smccc_1_1_smc(ARM_SMCCC_ARCH_FEATURES_FUNC_ID,
 				  ARM_SMCCC_ARCH_WORKAROUND_1, &res);
-		if ((int)res.a0 < 0)
+		if ((int)res.a0 < 0) {
+			__hardenbp_enab = A64_HBP_NOTMIT;
 			return;
+		}
 		cb = call_smc_arch_workaround_1;
 		smccc_start = __smccc_workaround_1_smc_start;
 		smccc_end = __smccc_workaround_1_smc_end;
 		break;
 
 	default:
+		__hardenbp_enab = A64_HBP_NOTMIT;
 		return;
 	}
 
@@ -266,6 +278,9 @@ enable_smccc_arch_workaround_1(const struct arm64_cpu_capabilities *entry)
 
 	install_bp_hardening_cb(entry, cb, smccc_start, smccc_end);
 
+	if (__hardenbp_enab == A64_HBP_UNSET)
+		__hardenbp_enab = A64_HBP_MIT;
+
 	return;
 }
 #endif	/* CONFIG_HARDEN_BRANCH_PREDICTOR */
@@ -539,7 +554,36 @@ multi_entry_cap_cpu_enable(const struct arm64_cpu_capabilities *entry)
 			caps->cpu_enable(caps);
 }
 
-#ifdef CONFIG_HARDEN_BRANCH_PREDICTOR
+#if defined(CONFIG_HARDEN_BRANCH_PREDICTOR) || \
+	defined(CONFIG_GENERIC_CPU_VULNERABILITIES)
+
+static enum { A64_SV2_UNSET, A64_SV2_SAFE, A64_SV2_UNSAFE } __spectrev2_safe = A64_SV2_UNSET;
+
+/*
+ * Track overall bp hardening for all heterogeneous cores in the machine.
+ * We are only considered "safe" if all booted cores are known safe.
+ */
+static bool __maybe_unused
+check_branch_predictor(const struct arm64_cpu_capabilities *entry, int scope)
+{
+	bool is_vul;
+	bool has_csv2;
+	u64 pfr0;
+
+	WARN_ON(scope != SCOPE_LOCAL_CPU || preemptible());
+
+	is_vul = is_midr_in_range_list(read_cpuid_id(), entry->midr_range_list);
+
+	pfr0 = read_cpuid(ID_AA64PFR0_EL1);
+	has_csv2 = cpuid_feature_extract_unsigned_field(pfr0, ID_AA64PFR0_CSV2_SHIFT);
+
+	if (is_vul)
+		__spectrev2_safe = A64_SV2_UNSAFE;
+	else if (__spectrev2_safe == A64_SV2_UNSET && has_csv2)
+		__spectrev2_safe = A64_SV2_SAFE;
+
+	return is_vul;
+}
 
 /*
  * List of CPUs where we need to issue a psci call to
@@ -728,7 +772,9 @@ const struct arm64_cpu_capabilities arm64_errata[] = {
 	{
 		.capability = ARM64_HARDEN_BRANCH_PREDICTOR,
 		.cpu_enable = enable_smccc_arch_workaround_1,
-		ERRATA_MIDR_RANGE_LIST(arm64_bp_harden_smccc_cpus),
+		.type = ARM64_CPUCAP_LOCAL_CPU_ERRATUM,
+		.matches = check_branch_predictor,
+		.midr_range_list = arm64_bp_harden_smccc_cpus,
 	},
 #endif
 #ifdef CONFIG_HARDEN_EL2_VECTORS
@@ -766,4 +812,20 @@ ssize_t cpu_show_spectre_v1(struct device *dev, struct device_attribute *attr,
 	return sprintf(buf, "Mitigation: __user pointer sanitization\n");
 }
 
+ssize_t cpu_show_spectre_v2(struct device *dev, struct device_attribute *attr,
+		char *buf)
+{
+	switch (__spectrev2_safe) {
+	case A64_SV2_SAFE:
+		return sprintf(buf, "Not affected\n");
+	case A64_SV2_UNSAFE:
+		if (__hardenbp_enab == A64_HBP_MIT)
+			return sprintf(buf,
+				"Mitigation: Branch predictor hardening\n");
+		return sprintf(buf, "Vulnerable\n");
+	default:
+		return sprintf(buf, "Unknown\n");
+	}
+}
+
 #endif
-- 
2.17.2

