Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 08:49:58 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 6561958079D;
	Wed, 12 Dec 2018 05:08:13 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga004-1.jf.intel.com with ESMTP; 12 Dec 2018 05:08:13 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AGLZYAxdP4dpMa6Pw7cNniLbPlGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc6+bBCN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRBDI2i?=
 =?us-ascii?q?coUBAekPM+FaoInzqFQAogC+BRGuCe701jNFhWX70bEg3ug9DQ3L2hErEdIUsH?=
 =?us-ascii?q?TTqdX4LL0cUeC0zKnMzDXDd+tW1ing44bVbh8hoe+DXbRzccXP00kkCgTIgUiO?=
 =?us-ascii?q?poz7JD6Vzv8NvHSb7+V+U+KviHAoqxtrrjezxschk4/EjZ8WxFDc7Sh13po5KN?=
 =?us-ascii?q?miREJmb9OoDoFcuzyZOodqWM8vQmNltD41x7AHo5K3YScHxIg9yxPddfCLaYuF?=
 =?us-ascii?q?7gzlWe2MOzl3nmhld6i6hxuq8Uiv1On8Vs6s3VZUoSpKjMPMumoO1xPN8MiHTO?=
 =?us-ascii?q?Vy/kO71TaIzQDT5flIIUEylaXFN54s2qA8moYXvEjZAyP7llv6gLWLekgn5uSk?=
 =?us-ascii?q?8eXqb7f+qp+ZLYB0iwX+Mqo0msy4BOQ1KgwOX2md+eSh27zv5E75T6tQjv0wjK?=
 =?us-ascii?q?bZtInWJcMVp66/HQBVyJ0u6wiwDzi4ytQUh3oHI0xfeBKBkYfpP0vCIPfiDfew?=
 =?us-ascii?q?m1isiitkx+jaPr39BZXANnzDkLbifblj8UJdxxczwMtb55JVDLEBPf3yVlXwtN?=
 =?us-ascii?q?zeEh82LQi0z/z7B9V604MUQXiPDbOBMKPOrV+I4foiI+mWa48UpDbyMf8l6+Tu?=
 =?us-ascii?q?jX8kg1Ade6ap0IATaHC5GPRmPkqYbWDtgtcHDWcFoA4+QPb2h12FVD5Zf2yyUL?=
 =?us-ascii?q?4k5jEnFIKmCp/ORoKqgLOfxiu7HZpWZmZAClCLCnroc4SEW/ERaCOdOMNhkzoE?=
 =?us-ascii?q?VaS/RI8lzx2hqAj6y79/JOrO5iIYrY7j1MRy5+DLjx4y7jx0D8Oe022XVWF7hG?=
 =?us-ascii?q?EISiQy3KB+p0x911iC3bJ5g/xeCdxc+fdJXh0mOp7byuxwE8ryVR7ZfteVVFam?=
 =?us-ascii?q?Rc2rATIrQdI32dMOZ0d9FM+kjhDMxCeqB74Vl7qWBJ076K7c3n7xJ9pjxHbCzq?=
 =?us-ascii?q?Uuk14mQs5XP228mqF/7xTTB5LOk0iBiqmlb7oc0zDX+GeD12WOulpYXxB2UanC?=
 =?us-ascii?q?WXAfZU7WrdDi60PGTr+uD6knMwRbxc6DLKtKdsPmjVFcSPj/P9TeZnq7m32sCh?=
 =?us-ascii?q?aQ2rOMcI3qdn0A0yrHFkgLjRof/XacOgg4HSeuvWTeASdqFVLuZUPs7OZ/pGm6?=
 =?us-ascii?q?Tk8y0wGFcUlh26Cp9R4SgPyWU+kT0a4cuCc9tzV0G06w387XC9qFoAphYKVcYN?=
 =?us-ascii?q?Mn7Fdbz27ZsBZ9PpihL6BkiV4TaAB3v0Lo1xVqBYRMi8kqrHU2zAVsLaKUyk9O?=
 =?us-ascii?q?dzSd3ZroIL3YNnHy/Ayza67RwlzRytKW9bkA6fsmq1TvphqmFlc//Hp91dlV0H?=
 =?us-ascii?q?yc5ovRAQoWUJLxVFs39hdgq7HbZCk9+53b1Xl2PaaotT/C3sojBPE5xRa4Y9df?=
 =?us-ascii?q?LKSEGRfyEs0HHcShNPYmmlmpbh0eOuBS+7U5P8end/uAxa6qM/xsnDOgjWRb/o?=
 =?us-ascii?q?991liA+DZ7Su7Nx5wF2e2X3hObVzfgi1esqtr3mYFYaj4IBGqw1C/kCJRXZqJs?=
 =?us-ascii?q?Z4YLCH6iLNGtydV6mpHiRWRY9FmlB14d3M+peBySb0Hy3AFK1EQXp2CnljW8zz?=
 =?us-ascii?q?Bujz4pqa+f1jTUw+v+bBoHJnJLRG56gFbsIIi4ldAbUFKzbwg0khuo/kL6x6ld?=
 =?us-ascii?q?pKRiIGjfW0ZIfy7qL258Vqu8rKaNY8lK6JkwqyVYTPy8YUyGSr76uxYa0TnsH3?=
 =?us-ascii?q?FdxDA4cDGmoI75kAZ5iGKeLXZzqmTWecdryBfb5dzcQ+NR3zUcSCl5jznXGkaz?=
 =?us-ascii?q?P92z8dqIkJfDt/i0V3i9WZ1LbSnr0YSAuTO75GJwBh2zhfKzmtzhEQUh1S/71t?=
 =?us-ascii?q?9qVTjHrRrmY4nr0bi6PvxjfkVyGFD87M96EJlkkoQsnJEQxWQahpKN8HoEi2jz?=
 =?us-ascii?q?MM9X2aLjbHUXQz4LzMXY4Azk2E1lM3KIyJj1VnSbwst9eda6Znka1T4678BPEK?=
 =?us-ascii?q?2U9qBLnTNpolqkqgLcef19njYeyfQ08nIbjf8GuBExziqDGLAdBldXPTbjlxmT?=
 =?us-ascii?q?69C+raNXZHugcLSq1Up+m8yhA6+Gog1GRHn5fZIiFzdq7spjKFLMzGHz6ob8dd?=
 =?us-ascii?q?nMatITsweYkhbagOhTNZIxjeEKhSt8NGL5vH0lzfM7jBN00ZG7uoiHN3ti/Kaj?=
 =?us-ascii?q?DhFEMT31YtsZ+ivxgqZGgsaWw4evE416FToRW5voSe+oHCgWtfT6LAuOFDw8qn?=
 =?us-ascii?q?GGGbvQBwOf6UFmr27RHJCvLX2YOH4ZzdB6ThmHOENfmBwUXCk9npMhFACl3snh?=
 =?us-ascii?q?f1li5jwL+l70sBhMyv9rNxniVGfQvhyoZywwSJieKhpW8w5D613UMcyY8uJ8AS?=
 =?us-ascii?q?VY8oe9owyKL2yRfx5IAn0RWkyYG1DjOaGj5NnH8+iFH+q+MuHBYbOUpexFUPeI?=
 =?us-ascii?q?w52v35Bi/zaNMMWPI3ZjA+c62kpFQXB2BcDZly8TRCwQkiLHd9Sbqwuk+i1rss?=
 =?us-ascii?q?C/9+zmWALx6ouOCLtSMtRv9wq1gaeZMO6Qizh2KSxF1pMX3nLIzLkf3FgPiyBh?=
 =?us-ascii?q?bTWtELIAtTLTQ6LUgKNYExkbayZrPstS8608xhVNOdLcit7tzLF4k+U6C01bWl?=
 =?us-ascii?q?3hgM2pYc0KLnq5NFPGAkaLKbuHKSfKw8HxfaOzV7lQgP9IuB23vDaRC1XjMSib?=
 =?us-ascii?q?lzn1SxCvNvlBjD2aPBxboo2ybgxhBnTjTN34bB22K9t3jTwwwb0piXLGL28cMT?=
 =?us-ascii?q?5gc0xTqr2c9z9XgvJ6G2ZZ9HpqMfGEmzqF7+nfMpsXseFkAiJxl+Jb5nQ107pU?=
 =?us-ascii?q?7CFeS/xzlyvftdpuo1CgkumSxTtrShtOqjBXhI2VuUVuI7nW9p5FWSWMwBVY72?=
 =?us-ascii?q?SbUU8ipNZ/DNDr/adKxZyHkavpIzpGtcDV5tQdA8XOAN6AKnMtPAqvEznRSEMe?=
 =?us-ascii?q?UTOlPGf3jkNbnevU/X3GgII9r83UmJsKS6dDWRQOHfMXDEdoBpRWLJppdis/mr?=
 =?us-ascii?q?6Wis0F/zy1rE+CF41hopnbW6fKUr3UIzGDgOwBPkNQzA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAABpBxFch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBg2snjBSMEoIhlz8UgV8UGBMBhz0iNAkNAQMBAQEBAQECARMBAQE?=
 =?us-ascii?q?IDQkIKS+CNiQBgmIDAwECJAsBRgYJAQFQA1QHEgWDHIICBAGmWjOKMId9hD8XP?=
 =?us-ascii?q?oFBgRGHXB+FcwKLMIQVkUcJgRaFNgKKfiOBXIUagwOHTYkpkBaBRoIOTTiDJ5B?=
 =?us-ascii?q?cPwExgQUBAYovgk0BAQ?=
X-IPAS-Result: =?us-ascii?q?A0ANAABpBxFch0O0hNFjHAEBAQQBAQcEAQGBUQcBAQsBg2s?=
 =?us-ascii?q?njBSMEoIhlz8UgV8UGBMBhz0iNAkNAQMBAQEBAQECARMBAQEIDQkIKS+CNiQBg?=
 =?us-ascii?q?mIDAwECJAsBRgYJAQFQA1QHEgWDHIICBAGmWjOKMId9hD8XPoFBgRGHXB+FcwK?=
 =?us-ascii?q?LMIQVkUcJgRaFNgKKfiOBXIUagwOHTYkpkBaBRoIOTTiDJ5BcPwExgQUBAYovg?=
 =?us-ascii?q?k0BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,344,1539673200"; 
   d="scan'208";a="57153536"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 12 Dec 2018 05:07:51 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727611AbeLLNHr (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 12 Dec 2018 08:07:47 -0500
Received: from mxout017.mail.hostpoint.ch ([217.26.49.177]:53372 "EHLO
        mxout017.mail.hostpoint.ch" rhost-flags-OK-OK-OK-OK)
        by vger.kernel.org with ESMTP id S1726235AbeLLNHI (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 12 Dec 2018 08:07:08 -0500
Received: from [10.0.2.45] (helo=asmtp012.mail.hostpoint.ch)
        by mxout017.mail.hostpoint.ch with esmtp (Exim 4.91 (FreeBSD))
        (envelope-from <dev@pschenker.ch>)
        id 1gX4E6-0006ff-Kg; Wed, 12 Dec 2018 14:06:58 +0100
Received: from [46.140.72.82] (helo=philippe-pc.toradex.int)
        by asmtp012.mail.hostpoint.ch with esmtpsa (TLSv1.2:ECDHE-RSA-AES256-GCM-SHA384:256)
        (Exim 4.91 (FreeBSD))
        (envelope-from <dev@pschenker.ch>)
        id 1gX4E6-000IXM-Ds; Wed, 12 Dec 2018 14:06:58 +0100
X-Authenticated-Sender-Id: dev@pschenker.ch
From: Philippe Schenker <dev@pschenker.ch>
To: jic23@kernel.org, marcel.ziswiler@toradex.com, stefan@agner.ch
Cc: thierry.reding@gmail.com, Philippe Schenker <dev@pschenker.ch>,
        Max Krummenacher <max.krummenacher@toradex.com>,
        Philippe Schenker <philippe.schenker@toradex.com>,
        Alexandre Torgue <alexandre.torgue@st.com>,
        linux-kernel@vger.kernel.org, Lee Jones <lee.jones@linaro.org>,
        Maxime Coquelin <mcoquelin.stm32@gmail.com>,
        linux-stm32@st-md-mailman.stormreply.com,
        linux-arm-kernel@lists.infradead.org
Subject: [PATCH v4 3/8] mfd: stmpe: preparations for STMPE ADC driver
Date: Wed, 12 Dec 2018 14:06:44 +0100
Message-Id: <20181212130649.15146-3-dev@pschenker.ch>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <20181212130649.15146-1-dev@pschenker.ch>
References: <20181212130649.15146-1-dev@pschenker.ch>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This prepares the MFD for the STMPE ADC driver. This commit introduces
devicetree settings that are used by the ADC and adds an init function.
Common ADC settings that are shared with the touchscreen driver can now
reside in the overlying MFD.

Signed-off-by: Stefan Agner <stefan@agner.ch>
Signed-off-by: Max Krummenacher <max.krummenacher@toradex.com>
Signed-off-by: Philippe Schenker <philippe.schenker@toradex.com>
---

I moved now all enables back to the subdevices. The disable of ADC
block is now done at remove of mfd. I know this is not particularly
right, the right way to do this would be with a refcounter.

But I don't know how to implement this in this driver. If someone does
not agree to disable adc in remove of mfd, please give me some advice
in how to do it with refcounter.

Changes in v4:
 - New patch: split mfd changes into this precursor patch
 - Export the added stmpe811_adc_commmon_init function
 - Disabling adc when mfd is removed

Changes in v3: None
Changes in v2:
 - Move code to setup ADC to MFD device, as it is used by both drivers
   adc and touchscreen

 drivers/mfd/Kconfig       |  3 +-
 drivers/mfd/stmpe.c       | 68 +++++++++++++++++++++++++++++++++++++++
 include/linux/mfd/stmpe.h | 10 ++++++
 3 files changed, 80 insertions(+), 1 deletion(-)

diff --git a/drivers/mfd/Kconfig b/drivers/mfd/Kconfig
index 8c5dfdce4326..bba159e8eaa4 100644
--- a/drivers/mfd/Kconfig
+++ b/drivers/mfd/Kconfig
@@ -1204,7 +1204,7 @@ config MFD_STMPE
 
 	  Currently supported devices are:
 
-		STMPE811: GPIO, Touchscreen
+		STMPE811: GPIO, Touchscreen, ADC
 		STMPE1601: GPIO, Keypad
 		STMPE1801: GPIO, Keypad
 		STMPE2401: GPIO, Keypad
@@ -1217,6 +1217,7 @@ config MFD_STMPE
 		GPIO: stmpe-gpio
 		Keypad: stmpe-keypad
 		Touchscreen: stmpe-ts
+		ADC: stmpe-adc
 
 menu "STMicroelectronics STMPE Interface Drivers"
 depends on MFD_STMPE
diff --git a/drivers/mfd/stmpe.c b/drivers/mfd/stmpe.c
index 566caca4efd8..f582531a8f3e 100644
--- a/drivers/mfd/stmpe.c
+++ b/drivers/mfd/stmpe.c
@@ -463,6 +463,28 @@ static const struct mfd_cell stmpe_ts_cell = {
 	.num_resources	= ARRAY_SIZE(stmpe_ts_resources),
 };
 
+/*
+ * ADC (STMPE811)
+ */
+
+static struct resource stmpe_adc_resources[] = {
+	{
+		.name	= "STMPE_TEMP_SENS",
+		.flags	= IORESOURCE_IRQ,
+	},
+	{
+		.name	= "STMPE_ADC",
+		.flags	= IORESOURCE_IRQ,
+	},
+};
+
+static const struct mfd_cell stmpe_adc_cell = {
+	.name		= "stmpe-adc",
+	.of_compatible	= "st,stmpe-adc",
+	.resources	= stmpe_adc_resources,
+	.num_resources	= ARRAY_SIZE(stmpe_adc_resources),
+};
+
 /*
  * STMPE811 or STMPE610
  */
@@ -497,6 +519,11 @@ static struct stmpe_variant_block stmpe811_blocks[] = {
 		.irq	= STMPE811_IRQ_TOUCH_DET,
 		.block	= STMPE_BLOCK_TOUCHSCREEN,
 	},
+	{
+		.cell	= &stmpe_adc_cell,
+		.irq	= STMPE811_IRQ_TEMP_SENS,
+		.block	= STMPE_BLOCK_ADC,
+	},
 };
 
 static int stmpe811_enable(struct stmpe *stmpe, unsigned int blocks,
@@ -517,6 +544,35 @@ static int stmpe811_enable(struct stmpe *stmpe, unsigned int blocks,
 				enable ? 0 : mask);
 }
 
+int stmpe811_adc_common_init(struct stmpe *stmpe)
+{
+	int ret;
+	u8 adc_ctrl1, adc_ctrl1_mask;
+
+	adc_ctrl1 = STMPE_SAMPLE_TIME(stmpe->sample_time) |
+		    STMPE_MOD_12B(stmpe->mod_12b) |
+		    STMPE_REF_SEL(stmpe->ref_sel);
+	adc_ctrl1_mask = STMPE_SAMPLE_TIME(0xff) | STMPE_MOD_12B(0xff) |
+			 STMPE_REF_SEL(0xff);
+
+	ret = stmpe_set_bits(stmpe, STMPE811_REG_ADC_CTRL1,
+			adc_ctrl1_mask, adc_ctrl1);
+	if (ret) {
+		dev_err(stmpe->dev, "Could not setup ADC\n");
+		return ret;
+	}
+
+	ret = stmpe_set_bits(stmpe, STMPE811_REG_ADC_CTRL2,
+			STMPE_ADC_FREQ(0xff), STMPE_ADC_FREQ(stmpe->adc_freq));
+	if (ret) {
+		dev_err(stmpe->dev, "Could not setup ADC\n");
+		return ret;
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(stmpe811_adc_common_init);
+
 static int stmpe811_get_altfunc(struct stmpe *stmpe, enum stmpe_block block)
 {
 	/* 0 for touchscreen, 1 for GPIO */
@@ -1325,6 +1381,7 @@ int stmpe_probe(struct stmpe_client_info *ci, enum stmpe_partnum partnum)
 	struct device_node *np = ci->dev->of_node;
 	struct stmpe *stmpe;
 	int ret;
+	u32 val;
 
 	pdata = devm_kzalloc(ci->dev, sizeof(*pdata), GFP_KERNEL);
 	if (!pdata)
@@ -1342,6 +1399,15 @@ int stmpe_probe(struct stmpe_client_info *ci, enum stmpe_partnum partnum)
 	mutex_init(&stmpe->irq_lock);
 	mutex_init(&stmpe->lock);
 
+	if (!of_property_read_u32(np, "st,sample-time", &val))
+		stmpe->sample_time = val;
+	if (!of_property_read_u32(np, "st,mod-12b", &val))
+		stmpe->mod_12b = val;
+	if (!of_property_read_u32(np, "st,ref-sel", &val))
+		stmpe->ref_sel = val;
+	if (!of_property_read_u32(np, "st,adc-freq", &val))
+		stmpe->adc_freq = val;
+
 	stmpe->dev = ci->dev;
 	stmpe->client = ci->client;
 	stmpe->pdata = pdata;
@@ -1433,6 +1499,8 @@ int stmpe_remove(struct stmpe *stmpe)
 	if (!IS_ERR(stmpe->vcc))
 		regulator_disable(stmpe->vcc);
 
+	__stmpe_disable(stmpe, STMPE_BLOCK_ADC);
+
 	mfd_remove_devices(stmpe->dev);
 
 	return 0;
diff --git a/include/linux/mfd/stmpe.h b/include/linux/mfd/stmpe.h
index c0353f6431f9..07f55aac9390 100644
--- a/include/linux/mfd/stmpe.h
+++ b/include/linux/mfd/stmpe.h
@@ -21,6 +21,9 @@
 #define STMPE_I_DRIVE(x)	(x & 0x1)
 #define STMPE_OP_MODE(x)	((x & 0x7) << 1)
 
+#define STMPE811_REG_ADC_CTRL1	0x20
+#define STMPE811_REG_ADC_CTRL2	0x21
+
 struct device;
 struct regulator;
 
@@ -134,6 +137,12 @@ struct stmpe {
 	u8 ier[2];
 	u8 oldier[2];
 	struct stmpe_platform_data *pdata;
+
+	/* For devices that use an ADC */
+	u8 sample_time;
+	u8 mod_12b;
+	u8 ref_sel;
+	u8 adc_freq;
 };
 
 extern int stmpe_reg_write(struct stmpe *stmpe, u8 reg, u8 data);
@@ -147,6 +156,7 @@ extern int stmpe_set_altfunc(struct stmpe *stmpe, u32 pins,
 			     enum stmpe_block block);
 extern int stmpe_enable(struct stmpe *stmpe, unsigned int blocks);
 extern int stmpe_disable(struct stmpe *stmpe, unsigned int blocks);
+extern int stmpe811_adc_common_init(struct stmpe *stmpe);
 
 #define STMPE_GPIO_NOREQ_811_TOUCH	(0xf0)
 
-- 
2.19.2

