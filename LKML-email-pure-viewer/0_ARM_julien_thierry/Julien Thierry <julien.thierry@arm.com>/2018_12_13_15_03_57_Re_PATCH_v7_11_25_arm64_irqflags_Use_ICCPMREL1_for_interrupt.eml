Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  14 Dec 2018 08:38:07 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga007.fm.intel.com (fmsmga007.fm.intel.com [10.253.24.52])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 14ED958079D;
	Thu, 13 Dec 2018 07:04:09 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by fmsmga007-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 13 Dec 2018 07:04:08 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AoRFpihPsKlaw5VWHXYkl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KPj8rsbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRttfWSxfDIOy?=
 =?us-ascii?q?bIUBAeQOMulaoIbhqFUOtgO+CAu3CePzyDJFnGP60bE03ukjFwzNwQwuH8gJsH?=
 =?us-ascii?q?TRtNj7MLoSUeS0zKbWyzXIcu1Y2Tf86IfWaBAhu/GNVq93fMrT1EkvEwLFgUuW?=
 =?us-ascii?q?qYD/IzOV1uUNvHaB7+p6VeOikHQoqxt0ojS12sgsjYzJi5sTx1vZ9it52J44Kc?=
 =?us-ascii?q?OkREN/e9KoDZVduz+AO4drQc4uX3tktSc4x7Eep5K3YSoHxI46yxPQd/CLaZWE?=
 =?us-ascii?q?7g7+WOqLIzp0mHRoc6+liRmo60iv0Oj8W9G00FlUqipFlcHBtm4C1xPN8MiLUP?=
 =?us-ascii?q?h98Vm72TaJyQ/T7vtIIUcularUM5Ihw7gwmYQPsUnbACP6hEH7gLWLekgq5OSk?=
 =?us-ascii?q?8fnrb7b6qpOGNoJ5iBnyMqE0lcy+BeQ4PBIOX2+e+emk0L3j/Ev5QKhFj/Evka?=
 =?us-ascii?q?nWroraJcIFqa69GgNV1Ygi6xChADe8y9kYg3YHI0xfeB6djIjmJUvOIPbmAve7?=
 =?us-ascii?q?mVisly1rx//eMr37HprNNmTDkKvmfbtl705cyQkzws5F65NbF7EMO/bzWk73tN?=
 =?us-ascii?q?zFAR41KQ20w+D7CNpj0oMSQ36AAqicMKnKq1+H+vovI/WQZI8SoDv9K+Iq5//y?=
 =?us-ascii?q?jXAjnl8RZ6mp3YYNZ3C+EfRrOEGZYXvqgtccHmYGpAs+TOr2iFKcVT5ffWq9X6?=
 =?us-ascii?q?U55jsjEoKpEZ/DRpyxgLyGxCq7HJpWaX5cBlCPFnfocYOEW/AXZSKWI89hlCEE?=
 =?us-ascii?q?VLe7R48g0xGuqBH1y759IuXI/S0YsIrp1MJp6O3LiREy6Tt0AtyH3GGWT2F0mW?=
 =?us-ascii?q?AISyUs3K9lo0xw0VOD0al+g/xFGt1f/fJJUgEmNZHCy+x2Ecz9WgXEft2RUlap?=
 =?us-ascii?q?Xs2mAS0tTtI229IOYFxyG9O4ghDH3iqlGbkVl7OQCZww86Lc2WXxJslnx3bH0q?=
 =?us-ascii?q?khk0cpQs9VOWK6ga5/8hDZB5TVnEWBi6aqaaMc0TbQ+2iZ02qBoltUUA5qXqXD?=
 =?us-ascii?q?RnAQeE3WodP95kPBSr+uDa8qMg9Ayc6EN6tLZcfljVRARPf/JtveZ3i9lHu3BR?=
 =?us-ascii?q?aN3rmMdpble30B3CXBD0gJix0c8myYNQcgHCuho3jRDDp1FV3xZUPh6u1+qHK9?=
 =?us-ascii?q?Tk8pwACGdUxh17yp+hELgfyQUe8c3rUBuC05sTV7AE69387KC9qHvwdhYKRcYd?=
 =?us-ascii?q?Y64Fdb1WLYtxZxPoC6I6BlnF4edwV3v0Xh1xhsDoVAkM4qrG4lzQZoKKKY1k9B?=
 =?us-ascii?q?eC2c3ZzqJrLXLWzy9gi1a6HKwlHezMqW+qAX5fsir1Xsog6oGVQi8nl9yNZVzm?=
 =?us-ascii?q?aT6Y/MDAoRVpLxTF069xx7p7Hcfyk86JnY1XxqMamorDDC38glC/ciyhalZ91f?=
 =?us-ascii?q?Kr+LFBfuE80GAMijMOwrm0WzYh0YJuxT9a40MNmgd/uJw6OrOOdgnDS7jWVI+o?=
 =?us-ascii?q?x900SM9zZiRe7MxZoK3/aY3g6fXTfmkFihqtz3mZxDZTwKBGq/yDTrC5RLZqJv?=
 =?us-ascii?q?eoYHE2GuLNOtxtV/npLiR2RX9Fq+CFwYws+pfhySYkf53Q1R00QXvHOmlTG5zz?=
 =?us-ascii?q?xyjzEmsK6f0DbSzOTlcRoNInRLS3V6jVfwPYi0iMgXXUipbwQzlBqp/136x7Vd?=
 =?us-ascii?q?pKlkK2nTQEFIfzX5Lm14U6uwsKaCbNBL6J8yrSpXV+G8a0iASrHhuxsazz/jH2?=
 =?us-ascii?q?xGyTA5bT6qoJb5nx99iG6HN3Z8tnnZecJxxRfZ+tPcQ+Vc3j4HRCl+lDnWCUKw?=
 =?us-ascii?q?P9iv/dWIiZjDtvqyWH6mVp1WaSPr15+PtDOn5W12Bh2yh/CylcfgEQQg0y/71t?=
 =?us-ascii?q?9qWD7MrBb9ZInryqu7PfhmfkluGF/z9c56FptinYs3gZEawWIaiYmN/XobjWfz?=
 =?us-ascii?q?Ns1W2aHkY3oMXzILw8PV7xLj2E1sNX+Jw4P5VnOAwspufdW6Y2UW2j4j4MBOEq?=
 =?us-ascii?q?ub8LtEnS5tqFqisQ3ReeR9nisayfY27X4aguIJtxA3wiSTHL8SBlVYMjL2lxuT?=
 =?us-ascii?q?8d++tqpXaX2rcbix0kp+gN+gAKuDogFaRHb2ZJMiETVs4cV4NVLGyGfz5Z38eN?=
 =?us-ascii?q?nMcdITsQWZkwvHj+hQMp4wl+AFhSx6OWLmpn0lyvU2jRhv3ZG8oYiGJH9h/KO/?=
 =?us-ascii?q?Ah5EKDL1Y9kf9S3qjaZbhsyWxZygHo19GjUXW5vlVemnHygVtfTjKgaCCjk8qm?=
 =?us-ascii?q?qAFLrbHA+f7lpmrn3VH5CqMXGXOGcWzdF4SBaBI0xfhRgeXC8mkZ4hCgCq2Mvh?=
 =?us-ascii?q?fV975j8L4173tABMxvh0NxXlUWffuQSoaioySJeFNxpb9QVC50bTMcyD4eN/BS?=
 =?us-ascii?q?BY/pu9rAOTLmyXfRhHDWYMWkacHVDsIqGu5cXc8+ifHue/L/zOYaiXqexDTfiI?=
 =?us-ascii?q?w4ij0pBh/zaKOcWCJX1iD/w92kpeUnF1AcXZmzMTSyMJkyLBddKUpBC5+idvtM?=
 =?us-ascii?q?Cw7OzrWB7z5YuIE7ZSMctg+xG1gaeANu6cniV5KSxf1pMD23DI0qUf3EUJhiFq?=
 =?us-ascii?q?djmtF6kAtCHXQKLRnK9XEwAUaydpOMRU6KI82xFHOdTHhdPtyr54kvk1Bk9fWl?=
 =?us-ascii?q?z8gc6pf9IFImGnOFPDBUaGL7CGJTzNw8HqbqKwU7xQjONItxKuvTaXCVPsPjOG?=
 =?us-ascii?q?lzPxTRCgLflMjD2HPBxZoIy9bhdtCW35QN36cBG0LN93giMwwbAvgnPKNGgcMS?=
 =?us-ascii?q?Vzck9Xr72Q6z9Yjet7G2Bb8nVlKuyEkT6D7+bEMpYWredrAiNsmuNa+ns6zb5V?=
 =?us-ascii?q?7CBCRPNtmSrSrsRho1epkuSUzjpnURxOqitEhY6RvEViP7nZ+YdEWXre4B0N6m?=
 =?us-ascii?q?CQWFw2oI5MENGnkaFd0djCibz+LH8W+sjYu8EdCtPUJd+ZPX4JNRvvESTTSgwf?=
 =?us-ascii?q?Qmj4G3vYghl/jfWT+3vdkpg7p4L2idJaSKJfVVEzUO8aC0l/Bs0qKY1yGDgjlO?=
 =?us-ascii?q?jI34Yz+XOioUyJF41htZfdW6fXWK23JQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AgAADtcxJch0O0hNFjGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBVAMBAQELAYFaghEng3yWDC0UmTMsEwGHRSI3Bg0BAwEBAQEBAQIBEwE?=
 =?us-ascii?q?BAQgNCQgpL4I2JAGCYgECAwECIFYGCQEBChIGAgImAgIDRg4GDQYCAQEBFoMGg?=
 =?us-ascii?q?gEEAaZ+gS+KMIELizGBVz+BEQEmgmuEWoMrglcCizKEXJEBBwKCJASPKx6BXIg?=
 =?us-ascii?q?gh04sigeQcoF4MxojgzyCJxd/AQONGj8BATGBBQEBiXuCTQEB?=
X-IPAS-Result: =?us-ascii?q?A0AgAADtcxJch0O0hNFjGwEBAQEDAQEBBwMBAQGBVAMBAQE?=
 =?us-ascii?q?LAYFaghEng3yWDC0UmTMsEwGHRSI3Bg0BAwEBAQEBAQIBEwEBAQgNCQgpL4I2J?=
 =?us-ascii?q?AGCYgECAwECIFYGCQEBChIGAgImAgIDRg4GDQYCAQEBFoMGggEEAaZ+gS+KMIE?=
 =?us-ascii?q?LizGBVz+BEQEmgmuEWoMrglcCizKEXJEBBwKCJASPKx6BXIggh04sigeQcoF4M?=
 =?us-ascii?q?xojgzyCJxd/AQONGj8BATGBBQEBiXuCTQEB?=
X-IronPort-AV: E=Sophos;i="5.56,349,1539673200"; 
   d="scan'208";a="141991410"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 13 Dec 2018 07:04:06 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729483AbeLMPEB (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 13 Dec 2018 10:04:01 -0500
Received: from usa-sjc-mx-foss1.foss.arm.com ([217.140.101.70]:35742 "EHLO
        foss.arm.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1728620AbeLMPEB (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 13 Dec 2018 10:04:01 -0500
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.72.51.249])
        by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id 9D1E780D;
        Thu, 13 Dec 2018 07:04:00 -0800 (PST)
Received: from [10.1.197.36] (e112298-lin.cambridge.arm.com [10.1.197.36])
        by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPSA id A90AF3F614;
        Thu, 13 Dec 2018 07:03:58 -0800 (PST)
Subject: Re: [PATCH v7 11/25] arm64: irqflags: Use ICC_PMR_EL1 for interrupt
 masking
From: Julien Thierry <julien.thierry@arm.com>
To: Ard Biesheuvel <ard.biesheuvel@linaro.org>
Cc: linux-arm-kernel <linux-arm-kernel@lists.infradead.org>,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>,
        Daniel Thompson <daniel.thompson@linaro.org>,
        joel@joelfernandes.org, Marc Zyngier <marc.zyngier@arm.com>,
        Christoffer Dall <christoffer.dall@arm.com>,
        James Morse <james.morse@arm.com>,
        Catalin Marinas <catalin.marinas@arm.com>,
        Will Deacon <will.deacon@arm.com>,
        Mark Rutland <mark.rutland@arm.com>, oleg@redhat.com
References: <1544633245-6036-1-git-send-email-julien.thierry@arm.com>
 <1544633245-6036-12-git-send-email-julien.thierry@arm.com>
 <CAKv+Gu8E9g=J78a-2HAdcijaHyVFL1KA3civwfoVHQ=mp7yJJA@mail.gmail.com>
 <19500d6b-62a3-21cb-9ac0-a4e5d4714a63@arm.com>
 <CAKv+Gu8+1JNzM4AUujiEfkYujpgakLXcUwTDG4eHwvQ7pKAzFA@mail.gmail.com>
 <31e41461-763f-aa7d-91ea-b493ede81eed@arm.com>
 <CAKv+Gu9PaeGbfB-9r0Gv1oYn+jORJDk9ozajEwKbse3KjkSmbQ@mail.gmail.com>
 <bc27fb6d-1adf-d7e9-ded2-2cbed81b6e03@arm.com>
Message-ID: <e0ecdb24-ef52-2c31-565d-66f7a2770f4a@arm.com>
Date: Thu, 13 Dec 2018 15:03:57 +0000
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.2.1
MIME-Version: 1.0
In-Reply-To: <bc27fb6d-1adf-d7e9-ded2-2cbed81b6e03@arm.com>
Content-Type: text/plain; charset=utf-8
Content-Language: en-US
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org



On 13/12/2018 12:02, Julien Thierry wrote:
> 
> 
> On 13/12/2018 11:35, Ard Biesheuvel wrote:
>> On Thu, 13 Dec 2018 at 09:54, Julien Thierry <julien.thierry@arm.com> wrote:
>>>
>>>
>>>
>>> On 12/12/2018 18:10, Ard Biesheuvel wrote:
>>>> On Wed, 12 Dec 2018 at 18:59, Julien Thierry <julien.thierry@arm.com> wrote:
>>>>>
>>>>>
>>>>>
>>>>> On 12/12/2018 17:27, Ard Biesheuvel wrote:
>>>>>> On Wed, 12 Dec 2018 at 17:48, Julien Thierry <julien.thierry@arm.com> wrote:
>>>>>>>
>>>>>>> Instead disabling interrupts by setting the PSR.I bit, use a priority
>>>>>>> higher than the one used for interrupts to mask them via PMR.
>>>>>>>
>>>>>>> When using PMR to disable interrupts, the value of PMR will be used
>>>>>>> instead of PSR.[DAIF] for the irqflags.
>>>>>>>
>>>>>>> Signed-off-by: Julien Thierry <julien.thierry@arm.com>
>>>>>>> Suggested-by: Daniel Thompson <daniel.thompson@linaro.org>
>>>>>>> Cc: Catalin Marinas <catalin.marinas@arm.com>
>>>>>>> Cc: Will Deacon <will.deacon@arm.com>
>>>>>>> Cc: Ard Biesheuvel <ard.biesheuvel@linaro.org>
>>>>>>> Cc: Oleg Nesterov <oleg@redhat.com>
>>>>>>> ---
>>>>>>>  arch/arm64/include/asm/efi.h      |   5 +-
>>>>>>>  arch/arm64/include/asm/irqflags.h | 123 +++++++++++++++++++++++++++++---------
>>>>>>>  2 files changed, 99 insertions(+), 29 deletions(-)
>>>>>>>
>>>>>>> diff --git a/arch/arm64/include/asm/efi.h b/arch/arm64/include/asm/efi.h
>>>>>>> index 7ed3208..a9d3ebc 100644
>>>>>>> --- a/arch/arm64/include/asm/efi.h
>>>>>>> +++ b/arch/arm64/include/asm/efi.h
>>>>>>> @@ -42,7 +42,10 @@
>>>>>>>
>>>>>>>  efi_status_t __efi_rt_asm_wrapper(void *, const char *, ...);
>>>>>>>
>>>>>>> -#define ARCH_EFI_IRQ_FLAGS_MASK (PSR_D_BIT | PSR_A_BIT | PSR_I_BIT | PSR_F_BIT)
>>>>>>> +#define ARCH_EFI_IRQ_FLAGS_MASK                                                \
>>>>>>> +       (system_uses_irq_prio_masking() ?                               \
>>>>>>> +               GIC_PRIO_IRQON :                                        \
>>>>>>> +               (PSR_D_BIT | PSR_A_BIT | PSR_I_BIT | PSR_F_BIT))
>>>>>>>
>>>>>>
>>>>>> This mask is used to determine whether we return from a firmware call
>>>>>> with a different value for the I flag than we entered it with. So
>>>>>> instead of changing the mask, we should change the way we record DAIF,
>>>>>> given that the firmware is still going to poke the I bit if it
>>>>>> misbehaves, regardless of whether the OS happens to use priorities for
>>>>>> interrupt masking.
>>>>>>
>>>>>
>>>>> Thanks for pointing that out, so this change makes little sense...
>>>>>
>>>>> The annoying part is that the flag checking takes place in the arch
>>>>> agnostic code.
>>>>>
>>>>> Would introducing some overriddable efi_get_flags() or efi_save_flags()
>>>>> that default to local_save_flags() seem like an acceptable solution?
>>>>>
>>>>> This way I could override it for arm64 and still return the DAIF bits.
>>>>>
>>>>
>>>> I don't follow the reasoning below about irqflags exactly, but is
>>>> there any way we could simply but both PMR and DAIF in flags? We could
>>>> even update the mask here to ensure that the firmware doesn't corrupt
>>>> the PMR.
>>>>
>>>
>>> So, that was the case in my previous versions of the series, and as you
>>> said, that covered checking both DAIF bits and PMR on return from EFI
>>> services. But Catalin suggested that irqflags could just use PMR when we
>>> enable the priority masking feature. Catalin's suggestion does simplify
>>> things, except for this part.
>>>
>>> However, it doesn't seem to far-fetched to me that the architecture
>>> could have a more generic way to tell the EFI driver "this is the set of
>>> stuff that I care about and you should return from runtime services with
>>> this stuff in the same state as before" without the "set of stuff" being
>>> limited to irqflags.
>>>
>>> But maybe this would be over-engineering just to deal with my use-case...
>>>
>>
>> No, that makes sense. As you said, you can just create a
>> efi_get_irqflags() helper that defaults to what we are using now, and
>> can be overridden to just return DAIF in our case.
>>
> 
> Good, thanks for the confirmation. I'll do that for the next version of
> the series.
> 

Argh, not as simple as I had expected.

Turns out include/linux/efi.h does not include asm/efi.h (including it
at the beginning of the file breaks the build because asm/efi.h misses
the efi type definitions.

So a thing like:

#ifndef efi_get_irqflags
#define efi_get_irqflags(flags) local_save_flags(flags)
#endif

in include/linux/efi.h cannot be overridden.

Either I would need to introduce the definitions arm, arm64 and x86 (I
don't think there are other arch supporting EFI right now) or I'll need
to come up with another solution.

-- 
Julien Thierry
