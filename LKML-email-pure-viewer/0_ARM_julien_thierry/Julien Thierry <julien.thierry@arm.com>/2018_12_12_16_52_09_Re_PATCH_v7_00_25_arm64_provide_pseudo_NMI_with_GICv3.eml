Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 08:53:07 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id AE8BF58079D;
	Wed, 12 Dec 2018 08:52:24 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 12 Dec 2018 08:52:23 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A85y6gR+EPRx84f9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1useIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDwULs6Wymt771zRRH1li?=
 =?us-ascii?q?kHOT43/mLZhMN+g61Uog6uqRNkw47MYoyYL+Z+c6HHcN8GWWZMUMRcWipcCY28?=
 =?us-ascii?q?dYsPCO8BMP5coYngo1sOrAWxBQ+xD+3xyj9Ih2H53bcg0+UhDArL2w4gH88KsH?=
 =?us-ascii?q?TVstr1Mr0eUfy1zKnJ0zrDdelW2Dfm5YfSaBAhpOuAUq53ccrU0EQiER7OgFuX?=
 =?us-ascii?q?qYzgJTyV1+INvnCf7+pjUOKvj3QrqwZrojig3ssskZHJhoMTylDF6Sp525w5Jd?=
 =?us-ascii?q?umR05nedKkFJpQtyeHN4p5W88tWXtouCMgxr0Bo567cy4Hw4kkyR7Hc/GLbZSE?=
 =?us-ascii?q?7xb5WOqMLzp0mmhpdK+8ihqu60Sty+/xWtGq3FpXrCdJiMTAu38R2xDJ98SLVu?=
 =?us-ascii?q?Zx8l2j1DqT0Q3Y9/tKLloulaXBLp4s2r4wmYQXsUTEBiL2hkr2g7GMdkk++ein?=
 =?us-ascii?q?9f7nYrP4qZ+YLYN0jRv+Mqs2lsy+B+Q3LBQOUnCF9eig0LDv51D1TbtUgvEsj6?=
 =?us-ascii?q?XUs4zWKd4aq6O7GwNV15ws6xe7DzeoytQYmnwHIUpBeBKGiYjpJl7PLOn7Dfih?=
 =?us-ascii?q?mVSslilkx/TfMr3mDJTNKGbMkK36cLZj5E5T1hAzwcpc551KELEBJuz8WkvruN?=
 =?us-ascii?q?zfFB85PBS4w/z7B9VlyoMeRWWPD7edMKPTsl+H+PgjIuaRZIIOvDb9Kv4l5+Ph?=
 =?us-ascii?q?jHMjmF8de7Wp0oUTaHyiAvtmJECZa2L2gtgdCWcKohY+TOvyhV2CSzFTZmqyUL?=
 =?us-ascii?q?g75j0hCIKmEJ3MRoaigLGa2Ce7H5tWZn1JC1yWEHfocZmEVOkIaC6IPsBhlTkE?=
 =?us-ascii?q?X6C7S4A9zRGuqBP6y71/I+rW/S0Xq4jv1Nty5+3VkxEy8id5D8Cc02GLUmF1kX?=
 =?us-ascii?q?kERz4w3KBjv0N9zk2P3rR/g/xdDdZT/e9GUh8mNZ7AyOx3E8r9WhnBfteOS1aq?=
 =?us-ascii?q?WM+mDiszTt8qx98OYkB9G8itjxzZ3iqqBaMVmKKPBJAu7q3c2H3xLd5ny3nazK?=
 =?us-ascii?q?khk0UmQsxXOG2lnKF/8RLfB4rIk0qDkaaqer8R3CrM9GeF0GqPs1tUUA92UaXZ?=
 =?us-ascii?q?Q38fYlHaosj+5kPHV7WuE6goMhNdyc6eLatHcsDmgk9YRPj9ItjeY3i+m2GrBR?=
 =?us-ascii?q?mWwLOAa47qe2YY3CXZE0UElwET/XCbNQkxHCuhomTeDCBwGlLreU/j7e5+qHaj?=
 =?us-ascii?q?RE8u0w6Kd1Fh16ay+hMNmPOTUe0T0awetCchsTp0Gk290MzQC9ebowphfaNcYc?=
 =?us-ascii?q?4y4Vtd1GLZsRB9MYKkL6x4mlEedAF3tVv01xprEoVAjdQqrHQywQpuKKKY1VRB?=
 =?us-ascii?q?dy+Y3ZHwILHXNnP+/Be1a67S21He1tmW97wL6PQ5rVXjoQ6oGlAj83Vhz9lazX?=
 =?us-ascii?q?+c6o/WAwoVVJL7Slw3+ARip7HGfik94JvZ2mdoMaaqvT7NxdIoCPE+xRa9YthQ?=
 =?us-ascii?q?KqWEFAz1E80EHMWuLO0qm160bhMLJuxS9ag0P9+4ePuCwqKkIOFgnDe+h2Rd/I?=
 =?us-ascii?q?99yl6M9zZ7SuPQ35cF3uuU0RedWzb9jFeuqMb3mY9faDEWH2q/zzXkBYFLaq1z?=
 =?us-ascii?q?e4YLFXmhI8mtytpigJ7tXmZS9ES/CFMexM+pZR2SYkTn3Q1RyUsYu2anlja/zz?=
 =?us-ascii?q?BulTEmsLCf3C3Xz+v+bhUHPnNES3d4jVfrJ4i5lNQaXEmubwg0mxqp/0f6x65H?=
 =?us-ascii?q?pKthK2nfW1tHfy/zL2t6SKu/qqKCY9JT6JMvqShWUOW8bUqaS7LnuBsaziXjEn?=
 =?us-ascii?q?BaxDA6cTGqp5r4kwZ7iGKbMHZ8sn7ZddtsyhfY4dzWXeRR0SYeRClklTnXAUCx?=
 =?us-ascii?q?P9uz8tWOlJfDsee+W3i6VpJJcinrzoKAtC2l6m1sGhC/m/Gzmtv6EQk1yyP71t?=
 =?us-ascii?q?9qVTnWoxb4eIXky6O6Med/dElyGFD889Z6Gp15koYohJAfw38aio+X/XoGl2f+?=
 =?us-ascii?q?KtFb2aP4bHoQSj8H2d/V4A752EJ9KnKF3Z72VnKYwsF5fdm1fnsW2j4h78BNEK?=
 =?us-ascii?q?qU76ZLnSpvrlq4sALee/59njgGxPsq6X4ahfwJuQU3wiWcBLASAVdXPSj2mxuU?=
 =?us-ascii?q?6NC+qb1dZHyzfrioyEp+gdehAamHogFdW3b2YI0uHCFu4cVkLFLDzmfz5Zr6d9?=
 =?us-ascii?q?nKYtIerRmUkxbGj+hIJ5M9jPsKhSx7OW3juX0p0fI0jRtr3ZuipoiIN31t/L6l?=
 =?us-ascii?q?Ah5fLjD1e8QT+jT3gadfhMmW2Z2vHo56GjUKR5boSfOoEDQPtfXoLQqOETs8qm?=
 =?us-ascii?q?uFFrrbBwOQ9EBmr3fXGZCxK36XPGUZzcllRBSFP0NQmgcUXDEnnpIjEgCq2dfs?=
 =?us-ascii?q?cEN45jAX+175pQFAyuNuNxnjTGjfoB2kZSszSJiaNBBW9B1N51/JMcyC6eJ+By?=
 =?us-ascii?q?NY8YekrAOTMWyXfRhIAXsKWkyZBFDjI7+u6sPb8+WDAuq+Lv3OYaiBqOBEVveI?=
 =?us-ascii?q?w46v3ZVi/zqWKsqPOXxiBeUh2kVfRXB5B9jZmzIXRi0XkCLNctebpAqm9S1xtM?=
 =?us-ascii?q?y/6/PrWATg5YaUD7tSMNNv+w25gKuZNu6Qgjp5Jihc1p8W2XDIz70f1kYIiy5y?=
 =?us-ascii?q?bzmtDagAtSnVQaLQhKBXDh0bayByNMdS7KI8xA5NOcHFhdPvy754leU4C1NEVV?=
 =?us-ascii?q?znh8GoatYGI2C7NFPbGkmLMK6KKiHMw8Hyeam8U6FfjP1Itx2svjaWC1XsPimY?=
 =?us-ascii?q?mDnzSR+uMftAjCWaPBFFvIG9cxBtCXXsTd78ax27NsN3giMywbEumnzKMmscOy?=
 =?us-ascii?q?Bmc0xRtr2Q8T9YgvJnFmxd73plKPOIlDqD4+bEKpYZr/1rDz9wl+Jb5nQ61rRU?=
 =?us-ascii?q?4DtFRPxzhCvdsNpur0u6nemIzzptSABOpSpThIKXoUViPr3U95laVnbC+RIN7G?=
 =?us-ascii?q?OQBAwLpttlENLvva9Qx8PLlKLyLjdC7t3V8dEdB8jSNMKILn4hPQD1Fz7TCQtW?=
 =?us-ascii?q?BQKsYGXegVFN1fiI8ziWo4I8p5zEnJsVVqQdVVo7DPoWB01pWtsYL8RZRDQhxJ?=
 =?us-ascii?q?yGiM8F4zKCrBjcXt9L9sTFS/aTDPOpNDaYgKNedjMB27a+JoMWYN6ok3d+Y0V3?=
 =?us-ascii?q?ydyZU3HbWspA93Vs?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ApAACaOxFch0O0hNFaChwBAQEEAQEHB?=
 =?us-ascii?q?AEBgVEHAQELAYFagQ+BAieDe4gZjBKBYC0Ulz+BdikLCAGHPiI0CQ0BAwEBAQE?=
 =?us-ascii?q?BAQIBEwEBAQgNCQgpIwyCNiKCZQECAwECIARSBgkBAQoYAgImAgIDJS8TCAEBA?=
 =?us-ascii?q?YMcAYIBBAEKph58M4QtAYEShGyBC4sxgVc/gRImgmuDBRkBAoE1gy+CVwKJOYZ?=
 =?us-ascii?q?TkQAHAoIjBIRkhiyEGh6BXIgdJocnjS9ujGhggS4zGiODPAkWgggXfwEDBIccO?=
 =?us-ascii?q?4U/PwEBMQGBBAEBjHwBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ApAACaOxFch0O0hNFaChwBAQEEAQEHBAEBgVEHAQELAYF?=
 =?us-ascii?q?agQ+BAieDe4gZjBKBYC0Ulz+BdikLCAGHPiI0CQ0BAwEBAQEBAQIBEwEBAQgNC?=
 =?us-ascii?q?QgpIwyCNiKCZQECAwECIARSBgkBAQoYAgImAgIDJS8TCAEBAYMcAYIBBAEKph5?=
 =?us-ascii?q?8M4QtAYEShGyBC4sxgVc/gRImgmuDBRkBAoE1gy+CVwKJOYZTkQAHAoIjBIRkh?=
 =?us-ascii?q?iyEGh6BXIgdJocnjS9ujGhggS4zGiODPAkWgggXfwEDBIccO4U/PwEBMQGBBAE?=
 =?us-ascii?q?BjHwBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,344,1539673200"; 
   d="scan'208";a="141847046"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 12 Dec 2018 08:52:21 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727939AbeLLQwO (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 12 Dec 2018 11:52:14 -0500
Received: from foss.arm.com ([217.140.101.70]:45094 "EHLO foss.arm.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1727756AbeLLQwN (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 12 Dec 2018 11:52:13 -0500
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.72.51.249])
        by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id 9FF1180D;
        Wed, 12 Dec 2018 08:52:12 -0800 (PST)
Received: from [10.1.197.36] (e112298-lin.cambridge.arm.com [10.1.197.36])
        by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPSA id EC8DC3F575;
        Wed, 12 Dec 2018 08:52:10 -0800 (PST)
Subject: Re: [PATCH v7 00/25] arm64: provide pseudo NMI with GICv3
To: linux-arm-kernel@lists.infradead.org
Cc: linux-kernel@vger.kernel.org, daniel.thompson@linaro.org,
        joel@joelfernandes.org, marc.zyngier@arm.com,
        christoffer.dall@arm.com, james.morse@arm.com,
        catalin.marinas@arm.com, will.deacon@arm.com, mark.rutland@arm.com
References: <1544633245-6036-1-git-send-email-julien.thierry@arm.com>
From: Julien Thierry <julien.thierry@arm.com>
Message-ID: <5543a23c-e314-439f-7cf1-e77855399742@arm.com>
Date: Wed, 12 Dec 2018 16:52:09 +0000
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.2.1
MIME-Version: 1.0
In-Reply-To: <1544633245-6036-1-git-send-email-julien.thierry@arm.com>
Content-Type: text/plain; charset=utf-8
Content-Language: en-US
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi,

This series + the core NMI patches can be fetched from:

git clone http://linux-arm.org/linux-jt.git -b v4.20-pseudo-nmi

Thanks,

Julien

On 12/12/2018 16:47, Julien Thierry wrote:
> Hi,
> 
> This series is a continuation of the work started by Daniel [1]. The goal
> is to use GICv3 interrupt priorities to simulate an NMI.
> 
> The patches depend on the core API for NMIs patches [2].
> 
> To achieve this, set two priorities, one for standard interrupts and
> another, higher priority, for NMIs. Whenever we want to disable interrupts,
> we mask the standard priority instead so NMIs can still be raised. Some
> corner cases though still require to actually mask all interrupts
> effectively disabling the NMI.
> 
> Daniel Thompson ran some benchmarks [3] on a previous version showing a
> small (<1%) performance drop when using interrupt priorities on Cortex-A53
> and GIC-500.
> 
> Currently, only PPIs and SPIs can be set as NMIs. IPIs being currently
> hardcoded IRQ numbers, there isn't a generic interface to set SGIs as NMI
> for now. LPIs being controlled by the ITS cannot be delivered as NMI.
> When an NMI is active on a CPU, no other NMI can be triggered on the CPU.
> 
> Requirements to use this:
> - Have GICv3
> - SCR_EL3.FIQ is set to 1 when linux runs or have single security state
> - Select Kernel Feature -> Use ICC system registers for IRQ masking
> 
> * Patch 1 fixes an existing issue with current NMI contexts in arm64
> * Patches 2 and 3 are just a bit of cleanup
> * Patch 4 introduces a CPU feature to check if priority masking should be
>   used
> * Patches 5 and 6 add the support for priority masking in GICv3 driver
> * Patches 7 to 12 add the support for priority masking the arch/arm64
>   code
> * Patches 13 and 14 allow us to apply alternatives earlier in the boot
>   process
> * Patches 15 to 17 starts the PMR masking on cpu startup and provides
>   primitives for arm64 GICv3 driver to perform priority masking
> * Patches 18 to 21 Add support for pseudo-NMIs in GICv3 driver
> * Patches 22 to 24 Add support for receiving NMIs in arch/arm64
> * Patch 25 adds the build config and command line option to enable
>   pseudo-NMIs
> 
> 
> Changes since v6[4]:
> * Rebased on v4.20-rc6
> * Added Acked-by and Reviewed-by tags
> * Added fix for NMI contexts (patch 1)
> * Renamed system_supports_irq_prio_masking() to
>   system_uses_irq_prio_masking()
> * Added some comments about PMR and the fact we need dsb
> * Use higher priority bit of PMR to disable IRQs, set NMI priority
>   accordingly
> * Stop mixing daif and PMR for irqflags, irqflags now only
>   touch PMR
> * Get rid of PMR defines for GIC_PRIO_STATUS bit as single bit encoding
>   of PMR status is no longer relyed upon
> * Mask priorities in a single place in GICv3 handler code, this
>   ensures we use PMR when we receive spurious interrupts
> * Write cpu_do_idle() in C
> 
> Changes since v5[5]:
> * Rebased on v4.20-rc2
> * Reorganized patches again
> * Renamed compile option + PMR values defines
> * Write PMR enablement for cpu startup in C
> * Fix wrong array size passed to __apply_alternatives
> * Do not touch PMR in pt_regs when not using irq masking
> * Remove ISB between PMR and IAR -> turns out it is not needed
> * Simplify irqflags code after introducing PMR in it
> * Use ref count API to track PPIs set as NMI
> * Simplify NMI exit path
> 
> Changes since V4[6]:
> * Rebased to v4.19-rc1
> * Adapted GIC driver to the core NMI API
> * Added option to disable priority masking on command line
> * Added Daniel's Tested-by on patches related replacing PSR.I toggling with
>   PMR masking
> * Fix scope matching for alternative features.
> * Spotted some more places using PSR.I or daif and replaced with generic
>   interrupt functions
> 
> Changes since V3[7]:
> * Big refactoring. As suggested by Marc Z., some of the bigger patches
>   needed to be split into smaller one.
> * Try to reduce the amount of #ifdef for the new feature by introducing
>   an individual cpufeature for priority masking
> * Do not track which alternatives have been applied (was a bit dodgy
>   anyway), and use an alternative for VHE cpu_enable callback
> * Fix a build failure with arm by adding the correct RPR accessors
> * Added Suggested-by tags for changes from coming or inspired by Daniel's
>   series. Do let me know if you feel I missed something and am not giving
>   you due credit.
> 
> Changes since V2[8]:
> * Series rebase to v4.17-rc6
> * Adapt pathces 1 and 2 to the rework of cpufeatures framework
> * Use the group0 detection scheme in the GICv3 driver to identify
>   the priority view, and drop the use of a fake interrupt
> * Add the case for a GIC configured in a single security state
> * Use local_daif_restore instead of local_irq_enable the first time
>   we enable interrupts after a bp hardening in the handling of a kernel
>   entry. Otherwise PRS.I remains set...
> 
> Changes since V1[9]:
> * Series rebased to v4.15-rc8.
> * Check for arm64_early_features in this_cpu_has_cap (spotted by Suzuki).
> * Fix issue where debug exception were not masked when enabling debug in
>   mdscr_el1.
> 
> Changes since RFC[10]:
> * The series was rebased to v4.15-rc2 which implied some changes mainly
>   related to the work on exception entries and daif flags by James Morse.
>   - The first patch in the previous series was dropped because no longer
>     applicable.
>   - With the semantics James introduced of "inheriting" daif flags,
>     handling of PMR on exception entry is simplified as PMR is not altered
>     by taking an exception and already inherited from previous state.
>   - James pointed out that taking a PseudoNMI before reading the FAR_EL1
>     register should not be allowed as per the TRM (D10.2.29):
>     "FAR_EL1 is made UNKNOWN on an exception return from EL1."
>     So in this submission PSR.I bit is cleared only after FAR_EL1 is read.
> * For KVM, only deal with PMR unmasking/restoring in common code, and VHE
>   specific code makes sure PSR.I bit is set when necessary.
> * When detecting the GIC priority view (patch 5), wait for an actual
>   interrupt instead of trying only once.
> 
> 
> [1] http://www.spinics.net/lists/arm-kernel/msg525077.html
> [2] https://lkml.org/lkml/2018/11/12/2113
> [3] https://lkml.org/lkml/2018/7/20/803
> [4] https://www.spinics.net/lists/arm-kernel/msg686670.html
> [5] https://lkml.org/lkml/2018/8/28/693
> [6] https://lkml.org/lkml/2018/7/24/321
> [7] https://lkml.org/lkml/2018/5/21/276
> [8] https://lkml.org/lkml/2018/1/17/335
> [9] https://www.spinics.net/lists/arm-kernel/msg620763.html
> [10] https://www.spinics.net/lists/arm-kernel/msg610736.html
> 
> Cheers,
> 
> Julien
> 
> -->
> 
> Daniel Thompson (1):
>   arm64: alternative: Apply alternatives early in boot process
> 
> Julien Thierry (24):
>   arm64: Fix HCR.TGE status for NMI contexts
>   arm64: Remove unused daif related functions/macros
>   arm64: cpufeature: Set SYSREG_GIC_CPUIF as a boot system feature
>   arm64: cpufeature: Add cpufeature for IRQ priority masking
>   arm/arm64: gic-v3: Add PMR and RPR accessors
>   irqchip/gic-v3: Switch to PMR masking before calling IRQ handler
>   arm64: ptrace: Provide definitions for PMR values
>   arm64: Make PMR part of task context
>   arm64: Unmask PMR before going idle
>   arm64: kvm: Unmask PMR before entering guest
>   arm64: irqflags: Use ICC_PMR_EL1 for interrupt masking
>   arm64: daifflags: Include PMR in daifflags restore operations
>   arm64: alternative: Allow alternative status checking per cpufeature
>   irqchip/gic-v3: Factor group0 detection into functions
>   arm64: Switch to PMR masking when starting CPUs
>   arm64: gic-v3: Implement arch support for priority masking
>   irqchip/gic-v3: Detect if GIC can support pseudo-NMIs
>   irqchip/gic-v3: Handle pseudo-NMIs
>   irqchip/gic: Add functions to access irq priorities
>   irqchip/gic-v3: Allow interrupts to be set as pseudo-NMI
>   arm64: Handle serror in NMI context
>   arm64: Skip preemption when exiting an NMI
>   arm64: Skip irqflags tracing for NMI in IRQs disabled context
>   arm64: Enable the support of pseudo-NMIs
> 
>  Documentation/admin-guide/kernel-parameters.txt |   6 +
>  Documentation/arm64/booting.txt                 |   5 +
>  arch/arm/include/asm/arch_gicv3.h               |  33 ++++
>  arch/arm64/Kconfig                              |  14 ++
>  arch/arm64/include/asm/alternative.h            |   4 +-
>  arch/arm64/include/asm/arch_gicv3.h             |  32 +++
>  arch/arm64/include/asm/assembler.h              |  10 +-
>  arch/arm64/include/asm/cpucaps.h                |   3 +-
>  arch/arm64/include/asm/cpufeature.h             |  10 +
>  arch/arm64/include/asm/daifflags.h              |  41 ++--
>  arch/arm64/include/asm/efi.h                    |   5 +-
>  arch/arm64/include/asm/hardirq.h                |  28 +++
>  arch/arm64/include/asm/irqflags.h               | 123 +++++++++---
>  arch/arm64/include/asm/kvm_host.h               |  12 ++
>  arch/arm64/include/asm/processor.h              |   3 +
>  arch/arm64/include/asm/ptrace.h                 |  26 ++-
>  arch/arm64/kernel/alternative.c                 |  60 +++++-
>  arch/arm64/kernel/asm-offsets.c                 |   1 +
>  arch/arm64/kernel/cpufeature.c                  |  42 +++-
>  arch/arm64/kernel/entry.S                       |  43 ++++
>  arch/arm64/kernel/irq.c                         |   3 +
>  arch/arm64/kernel/process.c                     |  51 +++++
>  arch/arm64/kernel/smp.c                         |  33 ++++
>  arch/arm64/kernel/traps.c                       |   8 +-
>  arch/arm64/kvm/hyp/switch.c                     |  16 ++
>  arch/arm64/mm/proc.S                            |  11 --
>  drivers/irqchip/irq-gic-common.c                |  10 +
>  drivers/irqchip/irq-gic-common.h                |   2 +
>  drivers/irqchip/irq-gic-v3.c                    | 252 +++++++++++++++++++++---
>  include/asm-generic/hardirq.h                   |   3 +
>  include/linux/hardirq.h                         |   2 +
>  31 files changed, 780 insertions(+), 112 deletions(-)
> 
> --
> 1.9.1
> 

-- 
Julien Thierry
