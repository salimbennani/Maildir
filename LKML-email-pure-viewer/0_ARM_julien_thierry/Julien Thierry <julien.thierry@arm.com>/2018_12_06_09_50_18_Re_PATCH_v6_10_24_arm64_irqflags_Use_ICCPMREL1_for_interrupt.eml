Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:43:27 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 4F8A2580433;
	Thu,  6 Dec 2018 01:50:33 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga003-1.jf.intel.com with ESMTP; 06 Dec 2018 01:50:28 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ASFCVfhSI6z8hJB033FyUzJSgBdpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64YBOPt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZH42y?=
 =?us-ascii?q?cYUPAeoCM+hWoYbyqFkBogexCwm3HOPiyCRFhmP00KAgz+gtDQ/L0Q4mEtkTsH?=
 =?us-ascii?q?rUttL1NKIKXO6x0anIyTTDYO1Q2Tzg9obIchEhru+WXbJqccva1E4iFwHYjlWU?=
 =?us-ascii?q?qIzqITWV2v4Rs2ib7upvS/ivi3QnqgxquDev3MIshpPViYISz1DJ7CN0y5s2K9?=
 =?us-ascii?q?2gUEN3f8KoHZ9Kuy2HOYZ6XNkuT3xrtSom0LELuJy2cDAUxJg6xRPTceGLfoeU?=
 =?us-ascii?q?7h75SeqdPSp0iGhndb6jgRu57FKuxffmVsau1VZHtipFncfItnAKzxHT9MeHRe?=
 =?us-ascii?q?Vn/ku72jaAyRrT6udaLkAwj6bbLIQhwrEompoSt0TMADP2lV3ogKOKckgo4PWk?=
 =?us-ascii?q?5ur5brn8u5ORNJN4hhv/P6ksgsC/BP43MgkKX2iV4+S807jj8FX9QLVLiP02j6?=
 =?us-ascii?q?bYvInZJcsFvK65BRFa0oI65xa4ATam1soXnWMcIVJbdxKIkZLpN0vNIP/mF/e/?=
 =?us-ascii?q?hUqjkDNxy/DBJL3hDY3BLmLfn7f5YbZ990lcxRI3zdBe5JJbFKsNIf3uWkLqsN?=
 =?us-ascii?q?zYDxk5MxG7wur9CdV90J8eVnyLAqODLKzStlqI7Po1I+aQfI8VpCr9K/896v7u?=
 =?us-ascii?q?l3A5mEMdcrOu3ZcNaHC4A+5pI0OWYXf3htcBEGEKvhcxTeDwiV2CVyJTaGi2X6?=
 =?us-ascii?q?4m+j47D4emB5/ZRo+xmLyBwDu7HppOa2BEDVCDD23kd4aDW/cKbiKSJdRskjgF?=
 =?us-ascii?q?VbinVo8g2guitA78y7p7MOXU/jcUuo7k1Nhw/+fTjw099SRoD8SB1GGAV3t7nn?=
 =?us-ascii?q?gIRz8x36Bzu1Z9xU2B0aVjh/xYFNpT5+5GUwsgNJ7cyfB6BM72Wg7bYtiJT1Om?=
 =?us-ascii?q?SM28AT4tVtIx38MOY0FlFtWhlB/D2TCmA7sUl7ORApw0/bnR33zwJ8Z71nbH27?=
 =?us-ascii?q?Mtj1ggQstTK2KmgrRz+BTUB47Mi0+ZjbqldbwA3C7R82eO1XeBs1tGUAFuS6nF?=
 =?us-ascii?q?XWoQZk3Nrdvn4EPOSLuuCbciMgtF0sOCLqpKatv0jVRJXvvjOdLeY36vlGe0Hx?=
 =?us-ascii?q?qH2rSMbI/ycWUHwCrdEFQEkxwU/XueKAcxHDmhrHzEADxuD13vZVjs/vd4qH6g?=
 =?us-ascii?q?Sk80zgeKb1Bu1rav+x4Vg+CcRO0X3r4epCghrDB0Fk6n393KE9qAuxZhfKJEbN?=
 =?us-ascii?q?Mh4VdH0GXZtxB9Pp2gNaximkQScwNtv0Pq1hV3DIpAnNMurHMrygpyNK2Z3ElA?=
 =?us-ascii?q?dzOewZD/JLnXJnPu8xCobq7cwkve38qO+qcT9PQ4rE3usxutFkU8/HRozdlU32?=
 =?us-ascii?q?GH6ZXXEQUdS5TxUkUw9xhkvLzaZig954XJ1XxjK6W0sznC2843C+sh0BqvY9Bf?=
 =?us-ascii?q?MKacHg/oD8IaH9SuKPAtm1WxbhMEIfpe+7IuM8Knd/uJwqirPOl7kTKijGRH5p?=
 =?us-ascii?q?19002W+yp9TO7Iw4gKw/WC0gSbUDf8iU+rstrrloBceTESAm2/xDD+BI5QeqJ9?=
 =?us-ascii?q?Z5wLBnqpI8GtwNVxmYTtW39B+FG/HVwG3NKmdgSIb1z62w1dzkAXoX2hmSulwD?=
 =?us-ascii?q?14iTAprqyD3CPQx+TubgYIOmlORGN6l1fjPZC0j8wGXEivdwUolBql6Vz6xqRB?=
 =?us-ascii?q?v6R/Mm/TTFxMfyj3KWFiT6SxuqCDY85J9JMnryFXXP6gblCdT773uwEa3D/7H2?=
 =?us-ascii?q?tC2DA7cCmnupfjkBxgi2KdL3FzoGDCec5qxhff593cRfhP0ToAXyR4jTjXBl6h?=
 =?us-ascii?q?P9im59mUlpHDsvygWGKlTJFcbS7rzYaYviuh+WJqGQG/n+y0mtD/EQk1yyj728?=
 =?us-ascii?q?NoVSXJqhbxeY3r16W8MeJ6cUhkHl7868xmGo5glos8no0f2X8fhp+N53oIjX/z?=
 =?us-ascii?q?MclH2aL5dHcNRiQEw9/P7AjlxU1sNHSJx43iW3WZw8thYcS6Y2wM1iI86cBKFL?=
 =?us-ascii?q?mb7LhekSRppVq4qBrbYeJhkTcF1fsu9HkajvkMuAoszSWSGKoeHEdGMiz3ixSH?=
 =?us-ascii?q?8cq+o75Ja2a1fri9z05+ndGnDLGfrQBQQnf5epE+HSBu6sVzKk7D0Hr26ov8Yt?=
 =?us-ascii?q?nfccoTtgGIkxfHl+VVNJUxlv8QiStmI239u2Aly/UgjRxvxpy6uImHK2Nw/KO2?=
 =?us-ascii?q?GBJYNzv1Z98N9THpl6pRgsGW34W3FJV7BjoLRIfoTe6vED8KrvvoLQGOEDkhqn?=
 =?us-ascii?q?uBHbrfABSS6ENnr3LJDpCqOGubJHgfzdV+WhadIFZTjxwTXDU/hpQ5DBylxNT9?=
 =?us-ascii?q?cEdl4TAc/lz4pQFJyu12LBnzSHvfqB2rajcpS5ifMRxW4RtZ50rONcye7+RzHz?=
 =?us-ascii?q?xX/5G7rQyNLHCbaBpMDW0TRkOEAFXjNKG05dbc6+iYGva+L/zWbLSOruxeSu6I?=
 =?us-ascii?q?xY+13Ytg5TqMLcKPPn9tD/Ag3kpDXHZ5G9nWmjkVSiwXkT7NYNCfpBum5iJ3qc?=
 =?us-ascii?q?W/+uzxWA3z/YuPF6dSMdJ39hC2n6iDNu2QhCV4KTpC1ZMM33jIyLcB014IliFu?=
 =?us-ascii?q?bCKgEbABtS7LUaLRlbVbDx8dayNvKsRI67gw0RVKOc7ektn1zKJ3juYpC1dZUl?=
 =?us-ascii?q?zsgtumZdERLGGnKlzGBFyHNLCHJTDQx8H3YKW8SaBfjelOth2wvyqbHFHnPjiZ?=
 =?us-ascii?q?izbpUBWvO/lWjC6HJBxepJ29chF1BGj/TdLmbwe3P8NtgTIqwb07mHXKOHUYMT?=
 =?us-ascii?q?h9dUNNs7KR4TlZgvV5B2xO8H5lIfOYlCae6unSMowWvudzAiRoi+Ja52w3yrtP?=
 =?us-ascii?q?4yFCQfx1mS3SocZvolGmiOaPzDVnXQFKqjZKgoKLoEpjNb/Y9plGRXbL4hYN4X?=
 =?us-ascii?q?+MBBQNots2QuHo7otZ1tHLlaS7DT5Y8tTd5oNIDMHIIcaGNjwkOADoHjfPJAIf?=
 =?us-ascii?q?SHigMmSJ1GJHl/TH1GCRr5U84qTsmZcUUK4TAF4oEvIXDAJ5HN0POo1mdjo+lP?=
 =?us-ascii?q?iQi8tetin2lwXYWMgP5sOPbfmVG/i6bW/B1bQ=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BCAACe7whch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBVAQBAQsBg2uEIZQmgWAIJRSZawGBS4YKIjcGDQEDAQEBAQEBAgETAQEBCA0?=
 =?us-ascii?q?JCCkvgjYkAYJhAQEBAQIBAQIgVgUBCQEBChgCAiYCAgNUBg0IAQEBgxyBeggEA?=
 =?us-ascii?q?aVdgS+FQIRsgQuLE4FXP4ESJgyCX4gFglcCj3yQXQcCgiAEjxgeiXCHQCyaMoF?=
 =?us-ascii?q?3Mxojgz2QWj8BAYE2AQGKWQMBAQ?=
X-IPAS-Result: =?us-ascii?q?A0BCAACe7whch0O0hNFkHAEBAQQBAQcEAQGBVAQBAQsBg2u?=
 =?us-ascii?q?EIZQmgWAIJRSZawGBS4YKIjcGDQEDAQEBAQEBAgETAQEBCA0JCCkvgjYkAYJhA?=
 =?us-ascii?q?QEBAQIBAQIgVgUBCQEBChgCAiYCAgNUBg0IAQEBgxyBeggEAaVdgS+FQIRsgQu?=
 =?us-ascii?q?LE4FXP4ESJgyCX4gFglcCj3yQXQcCgiAEjxgeiXCHQCyaMoF3Mxojgz2QWj8BA?=
 =?us-ascii?q?YE2AQGKWQMBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,321,1539673200"; 
   d="scan'208";a="56336880"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 06 Dec 2018 01:50:26 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729395AbeLFJuX (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 6 Dec 2018 04:50:23 -0500
Received: from usa-sjc-mx-foss1.foss.arm.com ([217.140.101.70]:43138 "EHLO
        foss.arm.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1727783AbeLFJuW (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 6 Dec 2018 04:50:22 -0500
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.72.51.249])
        by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id 95F8CA78;
        Thu,  6 Dec 2018 01:50:22 -0800 (PST)
Received: from [10.1.197.36] (e112298-lin.cambridge.arm.com [10.1.197.36])
        by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPSA id BEB013F5AF;
        Thu,  6 Dec 2018 01:50:20 -0800 (PST)
Subject: Re: [PATCH v6 10/24] arm64: irqflags: Use ICC_PMR_EL1 for interrupt
 masking
To: Catalin Marinas <catalin.marinas@arm.com>
Cc: daniel.thompson@linaro.org,
        Ard Biesheuvel <ard.biesheuvel@linaro.org>,
        marc.zyngier@arm.com, will.deacon@arm.com,
        linux-kernel@vger.kernel.org, christoffer.dall@arm.com,
        james.morse@arm.com, Oleg Nesterov <oleg@redhat.com>,
        joel@joelfernandes.org, linux-arm-kernel@lists.infradead.org
References: <1542023835-21446-1-git-send-email-julien.thierry@arm.com>
 <1542023835-21446-11-git-send-email-julien.thierry@arm.com>
 <20181204173610.GC19210@arrakis.emea.arm.com>
 <bc8d0621-8b6c-c678-49ec-ad1c96bac88a@arm.com>
 <20181205182616.GE27881@arrakis.emea.arm.com>
From: Julien Thierry <julien.thierry@arm.com>
Message-ID: <b8bcfa89-8c57-6e16-1861-9379f6762584@arm.com>
Date: Thu, 6 Dec 2018 09:50:18 +0000
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101
 Thunderbird/52.8.0
MIME-Version: 1.0
In-Reply-To: <20181205182616.GE27881@arrakis.emea.arm.com>
Content-Type: text/plain; charset=utf-8
Content-Language: en-US
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org



On 05/12/18 18:26, Catalin Marinas wrote:
> On Wed, Dec 05, 2018 at 04:55:54PM +0000, Julien Thierry wrote:
>> On 04/12/18 17:36, Catalin Marinas wrote:
>>> On Mon, Nov 12, 2018 at 11:57:01AM +0000, Julien Thierry wrote:
>>>> diff --git a/arch/arm64/include/asm/irqflags.h b/arch/arm64/include/asm/irqflags.h
>>>> index 24692ed..e0a32e4 100644
>>>> --- a/arch/arm64/include/asm/irqflags.h
>>>> +++ b/arch/arm64/include/asm/irqflags.h
>>>> @@ -18,7 +18,27 @@
>>>>  
>>>>  #ifdef __KERNEL__
>>>>  
>>>> +#include <asm/alternative.h>
>>>> +#include <asm/cpufeature.h>
>>>>  #include <asm/ptrace.h>
>>>> +#include <asm/sysreg.h>
>>>> +
>>>> +
>>>> +/*
>>>> + * When ICC_PMR_EL1 is used for interrupt masking, only the bit indicating
>>>> + * whether the normal interrupts are masked is kept along with the daif
>>>> + * flags.
>>>> + */
>>>> +#define ARCH_FLAG_PMR_EN 0x1
>>>> +
>>>> +#define MAKE_ARCH_FLAGS(daif, pmr)					\
>>>> +	((daif) | (((pmr) >> GIC_PRIO_STATUS_SHIFT) & ARCH_FLAG_PMR_EN))
>>>> +
>>>> +#define ARCH_FLAGS_GET_PMR(flags)				 \
>>>> +	((((flags) & ARCH_FLAG_PMR_EN) << GIC_PRIO_STATUS_SHIFT) \
>>>> +		| GIC_PRIO_IRQOFF)
>>>> +
>>>> +#define ARCH_FLAGS_GET_DAIF(flags) ((flags) & ~ARCH_FLAG_PMR_EN)
>>>
>>> I wonder whether we could just use the PSR_I_BIT here to decide whether
>>> to set the GIC_PRIO_IRQ{ON,OFF}. We could clear the PSR_I_BIT in
>>> _restore_daif() with an alternative.
>>
>> So, the issue with it is that some contexts might be using PSR.I to
>> disable interrupts (any contexts with async errors or debug exceptions
>> disabled, kvm guest entry paths, pseudo-NMIs, ...).
>>
>> If any of these contexts calls local_irq_save()/local_irq_restore() or
>> local_daif_save()/local_daif_restore(), by only relying on PSR_I_BIT to
>> represent the PMR status, we might end up clearing PSR.I when we shouldn't.
>>
>> I'm not sure whether there are no callers of these functions in those
>> context. But if that is the case, we could simplify things, yes.
> 
> There are callers of local_daif_save() (3) and local_daif_mask() (7) but
> do they all need to disable the pseudo-NMIs?
> 

Hmmm, I really think that both of those should be disabling NMIs.
Otherwise, if we take an NMI, the first thing the el1_irq handler is
going to do is "enable_da_f()" which could lead to potential issues.

One thing that could be done is:
- local_daif_save() and local_daif_mask() both mask all daif bits
(taking care to represent PMR value in the I bit of the saved flags)
- local_daif_restore() restores da_f as expected and decides values to
put for PMR and PSR.I as follows:
	* do the da_f restore
	* if PSR.A bit is cleared in the saved flags, then we also do a start_nmi()

However, this would not work with a local_daif_save()/restore() on the
return path of an NMI because I think it is the only context with NMIs
"stopped" that can take aborts. I can add a WARN_ON(in_nmi()) for
local_daif_restore() if that doesn't affect performance too much.

Does that sound alright?

> At a brief look at x86, it seems that they have something like
> stop_nmi() and restart_nmi(). These don't have save/restore semantics,
> so we could do something similar on arm64 that only deals with the
> PSTATE.I bit directly and keep the software (flags) PSR.I as the PMR
> bit. But we'd have to go through the 10 local_daif_* cases above to see
> which actually need the stop_nmi() semantics.
> 

Yes, having those could be useful to deal with the above and maybe some
other places.

Thanks,

-- 
Julien Thierry
