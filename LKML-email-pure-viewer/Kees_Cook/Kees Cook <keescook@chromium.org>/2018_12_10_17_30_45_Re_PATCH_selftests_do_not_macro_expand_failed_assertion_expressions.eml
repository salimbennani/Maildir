Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 11 Dec 2018 08:40:50 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id B5B3E580380;
	Mon, 10 Dec 2018 09:31:05 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by fmsmga006-1.fm.intel.com with ESMTP; 10 Dec 2018 09:31:04 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AdS34GBekCg3wLKgX2rfDr5zJlGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc6+bRON2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRODYOy?=
 =?us-ascii?q?bYQBD+QPM+VFoYfju1QOtgO+CAu3CePz1jNFnGP60bEm3+kjFwzNwQwuH8gJsH?=
 =?us-ascii?q?TRtNj7MbkdXv6uzKLV0zjDaPRW2TTg44XPcRAuv++DXalsfsrWzkkvFBjIgUmQ?=
 =?us-ascii?q?qYz/ODOV0+UNs3We7+Z6UuKvkWEnphh3rzOyyMksjYzJiZgUylDC7Sh524E1Jc?=
 =?us-ascii?q?CiSEFnf9GlHoFftzuEOIdsRcMiWW5otSAnwbMFoZ62ZDYGxIgjyhLFdvCKfZaE?=
 =?us-ascii?q?7gj+WOuSPTt0nnNodbCnixqs7UStzvfwW8q03VpQsCZJj93BumoQ2xHQ9MSKTO?=
 =?us-ascii?q?Z28F271jaVzQ/T7/lJIUAqmqrfLJ4s2qAwlpUNvkTZBCP2m1v5jLWQdko6/uik?=
 =?us-ascii?q?8ePnYq/pppOENo90jB/xMrg2l8ChHeg1NhICU3WV9OiizrHv4E70TKlQgvA3kK?=
 =?us-ascii?q?TVqJXaKt4apq69DQ9VyIEj6xOnAjei0dQYm2QHLV1cdBKEkYfpIVfOL+78Dfum?=
 =?us-ascii?q?hFStnjFryO7cPrD6HJXNIWbMkK37cbZ+9UFc0gwzws5b555ODbEBOv3zVlfrtN?=
 =?us-ascii?q?PEFh85LxC0w+H/BdV514MeWnyADrWWMaPPqlKI4uMvI++RZI4aojr9Kv4l5+Lw?=
 =?us-ascii?q?gn89g1MSYa6p3Z4PYnCiAvtmO1mZYWbrgtoZEWcFpAs+TPDwh12FSzJTZ2uyUL?=
 =?us-ascii?q?g65jE0E4+mCYbDRoawgL2Oxiu7H5tWZnxYBVCIC3vna4KEW/IUYiKIPsBhiiAE?=
 =?us-ascii?q?VaSmS4I51xGusxH1x6BkLurT/C0Ys5Xj2cNx5+3SkxEy6DN1A96c02GLU2F7gG?=
 =?us-ascii?q?cISyUq06B4pEx30k2D3rRgg/xECdxT4OtEXR0hNZ7cyOx6CMr+WhjbcdeLU1um?=
 =?us-ascii?q?RtSmATcsTtM+2dMOYkB9G8m8gRDHxSalH7gVl7mTDpwu7q3cx2TxJ9p6y3ve16?=
 =?us-ascii?q?kulV8mTtFLNW2nnKF/8QfTCpXNk0WYkaaqaKsd0DTM9GeF0WqBokVYXBRsXqXC?=
 =?us-ascii?q?WHAVflHWosjh5kPeU7+uDqwqPRZbxs6cNKRGcN3pgk9ARPf4JtveZWW9m2OzBR?=
 =?us-ascii?q?aNwrOBd47qe2Qb3CXAB0kIiQET/XCaNQcgAietuX7RDDtrFVj3eUPj7fF+qG+n?=
 =?us-ascii?q?Tk8z1wyFcldu16Sr9RIPhfyTUfUT3qkatycnsDh0GFe939TLC9uPvQZhfaNcYc?=
 =?us-ascii?q?8j71dDz27Wqwt9Ppm4JaB4mlEeaxh3v1/p1xhvFoVAkM0qrHQ2zApyKaOUyk9B?=
 =?us-ascii?q?eymf3ZDqPr3XK2/y/B+0Zq7S21He1suW+6gV5PQ5rVXjoB+mFk44/3p71NlV1m?=
 =?us-ascii?q?OW5o/WAwoKTZLxTkE3+gBgqLHefCY86J3b1H12Paavrz/NxsgmBO0myhanYddS?=
 =?us-ascii?q?K6eEFA70E80HCMmiMu0qm161bh0aOOBe7rI7P8Sjd/Gewq6kIP5gnC66jWRA+I?=
 =?us-ascii?q?180l+M+zBgReLS3pcFw+uX3g2IVzrniFehs8b3mZ1LZD0IH2q/zzTkC5BVZqFo?=
 =?us-ascii?q?YYkLDmKuKdWtxtpin57tR2JY9Fm7ClMc2c+mZQCdb0bg0g1Xz0gXp2KomTG5zz?=
 =?us-ascii?q?Btjz4mtK6f0zHQzOT4cxoHPHVGRG1jjVfqPIi1gMoWXEmubwg1ihSl4Vz2yLRc?=
 =?us-ascii?q?pKR6N2PTW1tHfzDqL2F+Vau9rrqDY89V5JIoqylXS/m8YVaBR775ohsa1T7jHm?=
 =?us-ascii?q?REyDA6cTGqpov2nxhghG2BK3ZzqWLTedtsyhfH+NzcWflR0yIERCZikznXBVu8?=
 =?us-ascii?q?P96z8dWPjZjDseO+V2OnVpJNdynm1oeAtCq95W13DhyzhfGzmtv7EQck1S/3zc?=
 =?us-ascii?q?VlVSLNrBzkeInky7y6Mf57fklvHFL969B1GoZknosyhZEQ32MXhpGU/XoBjGfy?=
 =?us-ascii?q?Ps9X2aP4bHoRWzELx8TZ7xTi2E1mNniJ3Z72Vm2Bwst9YNm3emAW1Tg878xQCK?=
 =?us-ascii?q?eU8aZLnS16olejqQLRYP59nioSyPc06X4ahf0JtxQpzimHHr8SGkxYNzT2lxuU?=
 =?us-ascii?q?99C+sLlXZGG3fLi11Up+nsquAKuMow5CQ3b5ZoktHTVr4cphKlLM32b+6oXleN?=
 =?us-ascii?q?nWcNISuQeYkxbGj+hJNp0xkuAGijZgOWL4pXcl0fI0jQRy3ZGmu4iKM3lt/KW8?=
 =?us-ascii?q?AhJCNzz6fcUT+iz2jaZFn8abxISvHpRnGjUWU5rkV/OoEDQOtfv5MwaCCiEzqn?=
 =?us-ascii?q?CeGbDHBw+Q9F9mr27TE5CsL3yYP2MWzdJmRBmAPkBfhB0UUS4+np44EACq2cPg?=
 =?us-ascii?q?fF145jAX+l73tB9Mxvh0OBn4V2fVvB2oZSssSJiDMBpW6RlP50XPPsyb8O1zBD?=
 =?us-ascii?q?tU/oG7oAyON2ybZBlIDWcTVUyfHF3jOriu5d/d8+mXHOa+Lv3OYamQpuxaTfuH?=
 =?us-ascii?q?2ZWv0o5+9TaWKsqPJmViD+E82kdbXXF5HNnZmywSSyMNkSLBddWbpBC6+i14tc?=
 =?us-ascii?q?2/9PXrWATy5YqAEbdSMNNv+wyojqeHLeKfmCF5KTNA3JMW2XDI0KQf3EIViyx2?=
 =?us-ascii?q?dzmiD7UAtS3OTKLRgKNXDAQbayR8NMRW9aI8wxJNNNXfitP00L54k/E0B01EVV?=
 =?us-ascii?q?znhsGme8gKL3uhO1PAAUaBLK6GKiHTw8HrfaO8TqVdg/9JtxKrozaUDU/iMi6H?=
 =?us-ascii?q?lznoTB2vNeBMjCeGPB1Roo29cxBtCXT9Q9LicBG0LNh3jTguy70umnzKLXIcMS?=
 =?us-ascii?q?R7c05Vsr2Q7CZYju9jFGBb8nVlLfeLmyCC4uncK5YWt+ZrAytum+Jb5nQ616Va?=
 =?us-ascii?q?7CVeSPNpnyvSq8Zko0u6nemX1jpnTB1Opy5LhY2Ru0ViPKTZ9p9YVnfF/BIC92?=
 =?us-ascii?q?OQCxsRqtthC93vvb1Qy9fVmKLyLjdC78zb/c8GC8fIL8KHNSlpDR28UhLRDRcf?=
 =?us-ascii?q?XHaVcyn7ilJclrvaonmZsLAzroTomZwTWvlcTlNjRd0ADUEwP9EPO99cWTQn2e?=
 =?us-ascii?q?qYgcMT7n25rzHaRN9du5HaU7SVG/q5e2XRtqVNexZdmeCwFo8ULICunhU6MlQ?=
 =?us-ascii?q?=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ATAADYoQ5ch0O0hNFkHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGCaYECJ4N6iBlfizCCDRSXPYFzEwEYCwgBh20iNAkNAQMBAQEBAQECARM?=
 =?us-ascii?q?BAQEIDQkIKSMMgjYkAYJiAQIDAQIgBBkBATcBBQkBAQoLDQICJgICAx8SAQUBH?=
 =?us-ascii?q?AYTBYMcAYIBBQqaRjyKHXB8M4J2AQEFhxsDBRJ5ixYXgUA/gRGDEoMeBBiES4J?=
 =?us-ascii?q?XiRcaCoFwhRFRj2oJgiWEY4pHGIlmh1eOFYp0AgQCBAUCBQ8hgSWCDjMaCCgIb?=
 =?us-ascii?q?AaCNYIbiQGFYB8ygQUBAYwYAQE?=
X-IPAS-Result: =?us-ascii?q?A0ATAADYoQ5ch0O0hNFkHQEBBQEHBQGBUQgBCwGCaYECJ4N?=
 =?us-ascii?q?6iBlfizCCDRSXPYFzEwEYCwgBh20iNAkNAQMBAQEBAQECARMBAQEIDQkIKSMMg?=
 =?us-ascii?q?jYkAYJiAQIDAQIgBBkBATcBBQkBAQoLDQICJgICAx8SAQUBHAYTBYMcAYIBBQq?=
 =?us-ascii?q?aRjyKHXB8M4J2AQEFhxsDBRJ5ixYXgUA/gRGDEoMeBBiES4JXiRcaCoFwhRFRj?=
 =?us-ascii?q?2oJgiWEY4pHGIlmh1eOFYp0AgQCBAUCBQ8hgSWCDjMaCCgIbAaCNYIbiQGFYB8?=
 =?us-ascii?q?ygQUBAYwYAQE?=
X-IronPort-AV: E=Sophos;i="5.56,339,1539673200"; 
   d="scan'208";a="43458551"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 10 Dec 2018 09:31:02 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727735AbeLJRbA (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 10 Dec 2018 12:31:00 -0500
Received: from mail-yb1-f195.google.com ([209.85.219.195]:33783 "EHLO
        mail-yb1-f195.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726649AbeLJRbA (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 10 Dec 2018 12:31:00 -0500
Received: by mail-yb1-f195.google.com with SMTP id f125so5554941ybc.0
        for <linux-kernel@vger.kernel.org>; Mon, 10 Dec 2018 09:30:59 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=chromium.org; s=google;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=noaXan9fvv/bxTji2oJ84ZgKJH7hS09sn+6R7x3DB64=;
        b=WK9Af9FF//pYMe3zsM/agbHvKXGTEVl8MGP0hRQoCBaM1PNbaPHeTbY6D+gdKexX/t
         RwHqmwzqWqZh9sZOYUwODBSraNyfocV9iemOMJp9j0vpkuW00ZJnOecKILAGeqUyhYMa
         fvKZNkuCwgjIIKmU5ZetgZDDLlQ3SFeADWd+Y=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=noaXan9fvv/bxTji2oJ84ZgKJH7hS09sn+6R7x3DB64=;
        b=SEZmu4P1EJH1fhCrtRQZSmT6ZGfpbBHbR7Vz6DlH4g8JX7TUA9Hi68Djo+fFZYO6IH
         SJdMSMyJ2/L3PYvkmzgOs7EZWv/4WkmAHxtlK1GzQ7DDJPv39FaGZT1xMHG0ichf+Vpk
         0aNxIgQHh7SFioz47JdQ2PbUwgkm8XVV9t3GyY9xWs8QovgqUqD47uuu1Z2ERUuBj91r
         0YIMoWlMgEv4sl5rif+6/nBEJu/xZdg2wgX1LSmqZEbsqowqEdBeEKFnZVtoe+qjwegQ
         OPTD6jjcR2btV6Jv3A25bf7rydRwpmMRZZIqu0FXY1F2mllxdJrlisqn748B0pGsh89O
         EyXQ==
X-Gm-Message-State: AA+aEWYlX2kG7t2W6tsHcFdQD81PUTLJAoAWubtYog3MX+uNHM4EYUWJ
        59rObAobWooJlx99pYuFaCUOkKJP8T0=
X-Google-Smtp-Source: AFSGD/URoVLquj0vMNIDq3sZC8UeDYQiBaicbs8eaqHo00LZInqzvSFhVx3gWqVuE/vH3sTg/wlEAw==
X-Received: by 2002:a25:4c82:: with SMTP id z124-v6mr12488192yba.125.1544463058084;
        Mon, 10 Dec 2018 09:30:58 -0800 (PST)
Received: from mail-yb1-f182.google.com (mail-yb1-f182.google.com. [209.85.219.182])
        by smtp.gmail.com with ESMTPSA id v78sm5022294ywa.103.2018.12.10.09.30.57
        for <linux-kernel@vger.kernel.org>
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Mon, 10 Dec 2018 09:30:57 -0800 (PST)
Received: by mail-yb1-f182.google.com with SMTP id s15so5526486ybk.6
        for <linux-kernel@vger.kernel.org>; Mon, 10 Dec 2018 09:30:57 -0800 (PST)
X-Received: by 2002:a25:1cc1:: with SMTP id c184-v6mr13024940ybc.421.1544463056642;
 Mon, 10 Dec 2018 09:30:56 -0800 (PST)
MIME-Version: 1.0
References: <20181209230047.GA1738@altlinux.org>
In-Reply-To: <20181209230047.GA1738@altlinux.org>
From: Kees Cook <keescook@chromium.org>
Date: Mon, 10 Dec 2018 09:30:45 -0800
X-Gmail-Original-Message-ID: <CAGXu5jKLHbfgZLGqxwG8LRs=0hy+iJGYQd61Ad5LghrkDWV=4w@mail.gmail.com>
Message-ID: <CAGXu5jKLHbfgZLGqxwG8LRs=0hy+iJGYQd61Ad5LghrkDWV=4w@mail.gmail.com>
Subject: Re: [PATCH] selftests: do not macro-expand failed assertion expressions
To: "Dmitry V. Levin" <ldv@altlinux.org>
Cc: Shuah Khan <shuah@kernel.org>,
        Andy Lutomirski <luto@amacapital.net>,
        Will Drewry <wad@chromium.org>,
        "open list:KERNEL SELFTEST FRAMEWORK" 
        <linux-kselftest@vger.kernel.org>,
        LKML <linux-kernel@vger.kernel.org>
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Sun, Dec 9, 2018 at 3:00 PM Dmitry V. Levin <ldv@altlinux.org> wrote:
>
> I've stumbled over the current macro-expand behaviour of the test
> harness:
>
> $ gcc -Wall -xc - <<'__EOF__'
> TEST(macro) {
>         int status = 0;
>         ASSERT_TRUE(WIFSIGNALED(status));
> }
> TEST_HARNESS_MAIN
> __EOF__
> $ ./a.out
> [==========] Running 1 tests from 1 test cases.
> [ RUN      ] global.macro
> <stdin>:4:global.macro:Expected 0 (0) != (((signed char) (((status) & 0x7f) + 1) >> 1) > 0) (0)
> global.macro: Test terminated by assertion
> [     FAIL ] global.macro
> [==========] 0 / 1 tests passed.
> [  FAILED  ]
>
> With this change the output of the same test looks much more
> comprehensible:
>
> [==========] Running 1 tests from 1 test cases.
> [ RUN      ] global.macro
> <stdin>:4:global.macro:Expected 0 (0) != WIFSIGNALED(status) (0)
> global.macro: Test terminated by assertion
> [     FAIL ] global.macro
> [==========] 0 / 1 tests passed.
> [  FAILED  ]
>
> The issue is very similar to the bug fixed in glibc assert(3)
> three years ago:
> https://sourceware.org/bugzilla/show_bug.cgi?id=18604
>
> Cc: Shuah Khan <shuah@kernel.org>
> Cc: Kees Cook <keescook@chromium.org>
> Cc: Andy Lutomirski <luto@amacapital.net>
> Cc: Will Drewry <wad@chromium.org>
> Cc: linux-kselftest@vger.kernel.org
> Signed-off-by: Dmitry V. Levin <ldv@altlinux.org>

Yeah, good idea.

Acked-by: Kees Cook <keescook@chromium.org>

-Kees


> ---
>  tools/testing/selftests/kselftest_harness.h | 42 ++++++++++-----------
>  1 file changed, 21 insertions(+), 21 deletions(-)
>
> diff --git a/tools/testing/selftests/kselftest_harness.h b/tools/testing/selftests/kselftest_harness.h
> index 6ae3730c4ee3..76d654ef3234 100644
> --- a/tools/testing/selftests/kselftest_harness.h
> +++ b/tools/testing/selftests/kselftest_harness.h
> @@ -354,7 +354,7 @@
>   * ASSERT_EQ(expected, measured): expected == measured
>   */
>  #define ASSERT_EQ(expected, seen) \
> -       __EXPECT(expected, seen, ==, 1)
> +       __EXPECT(expected, #expected, seen, #seen, ==, 1)
>
>  /**
>   * ASSERT_NE(expected, seen)
> @@ -365,7 +365,7 @@
>   * ASSERT_NE(expected, measured): expected != measured
>   */
>  #define ASSERT_NE(expected, seen) \
> -       __EXPECT(expected, seen, !=, 1)
> +       __EXPECT(expected, #expected, seen, #seen, !=, 1)
>
>  /**
>   * ASSERT_LT(expected, seen)
> @@ -376,7 +376,7 @@
>   * ASSERT_LT(expected, measured): expected < measured
>   */
>  #define ASSERT_LT(expected, seen) \
> -       __EXPECT(expected, seen, <, 1)
> +       __EXPECT(expected, #expected, seen, #seen, <, 1)
>
>  /**
>   * ASSERT_LE(expected, seen)
> @@ -387,7 +387,7 @@
>   * ASSERT_LE(expected, measured): expected <= measured
>   */
>  #define ASSERT_LE(expected, seen) \
> -       __EXPECT(expected, seen, <=, 1)
> +       __EXPECT(expected, #expected, seen, #seen, <=, 1)
>
>  /**
>   * ASSERT_GT(expected, seen)
> @@ -398,7 +398,7 @@
>   * ASSERT_GT(expected, measured): expected > measured
>   */
>  #define ASSERT_GT(expected, seen) \
> -       __EXPECT(expected, seen, >, 1)
> +       __EXPECT(expected, #expected, seen, #seen, >, 1)
>
>  /**
>   * ASSERT_GE(expected, seen)
> @@ -409,7 +409,7 @@
>   * ASSERT_GE(expected, measured): expected >= measured
>   */
>  #define ASSERT_GE(expected, seen) \
> -       __EXPECT(expected, seen, >=, 1)
> +       __EXPECT(expected, #expected, seen, #seen, >=, 1)
>
>  /**
>   * ASSERT_NULL(seen)
> @@ -419,7 +419,7 @@
>   * ASSERT_NULL(measured): NULL == measured
>   */
>  #define ASSERT_NULL(seen) \
> -       __EXPECT(NULL, seen, ==, 1)
> +       __EXPECT(NULL, "NULL", seen, #seen, ==, 1)
>
>  /**
>   * ASSERT_TRUE(seen)
> @@ -429,7 +429,7 @@
>   * ASSERT_TRUE(measured): measured != 0
>   */
>  #define ASSERT_TRUE(seen) \
> -       ASSERT_NE(0, seen)
> +       __EXPECT(0, "0", seen, #seen, !=, 1)
>
>  /**
>   * ASSERT_FALSE(seen)
> @@ -439,7 +439,7 @@
>   * ASSERT_FALSE(measured): measured == 0
>   */
>  #define ASSERT_FALSE(seen) \
> -       ASSERT_EQ(0, seen)
> +       __EXPECT(0, "0", seen, #seen, ==, 1)
>
>  /**
>   * ASSERT_STREQ(expected, seen)
> @@ -472,7 +472,7 @@
>   * EXPECT_EQ(expected, measured): expected == measured
>   */
>  #define EXPECT_EQ(expected, seen) \
> -       __EXPECT(expected, seen, ==, 0)
> +       __EXPECT(expected, #expected, seen, #seen, ==, 0)
>
>  /**
>   * EXPECT_NE(expected, seen)
> @@ -483,7 +483,7 @@
>   * EXPECT_NE(expected, measured): expected != measured
>   */
>  #define EXPECT_NE(expected, seen) \
> -       __EXPECT(expected, seen, !=, 0)
> +       __EXPECT(expected, #expected, seen, #seen, !=, 0)
>
>  /**
>   * EXPECT_LT(expected, seen)
> @@ -494,7 +494,7 @@
>   * EXPECT_LT(expected, measured): expected < measured
>   */
>  #define EXPECT_LT(expected, seen) \
> -       __EXPECT(expected, seen, <, 0)
> +       __EXPECT(expected, #expected, seen, #seen, <, 0)
>
>  /**
>   * EXPECT_LE(expected, seen)
> @@ -505,7 +505,7 @@
>   * EXPECT_LE(expected, measured): expected <= measured
>   */
>  #define EXPECT_LE(expected, seen) \
> -       __EXPECT(expected, seen, <=, 0)
> +       __EXPECT(expected, #expected, seen, #seen, <=, 0)
>
>  /**
>   * EXPECT_GT(expected, seen)
> @@ -516,7 +516,7 @@
>   * EXPECT_GT(expected, measured): expected > measured
>   */
>  #define EXPECT_GT(expected, seen) \
> -       __EXPECT(expected, seen, >, 0)
> +       __EXPECT(expected, #expected, seen, #seen, >, 0)
>
>  /**
>   * EXPECT_GE(expected, seen)
> @@ -527,7 +527,7 @@
>   * EXPECT_GE(expected, measured): expected >= measured
>   */
>  #define EXPECT_GE(expected, seen) \
> -       __EXPECT(expected, seen, >=, 0)
> +       __EXPECT(expected, #expected, seen, #seen, >=, 0)
>
>  /**
>   * EXPECT_NULL(seen)
> @@ -537,7 +537,7 @@
>   * EXPECT_NULL(measured): NULL == measured
>   */
>  #define EXPECT_NULL(seen) \
> -       __EXPECT(NULL, seen, ==, 0)
> +       __EXPECT(NULL, "NULL", seen, #seen, ==, 0)
>
>  /**
>   * EXPECT_TRUE(seen)
> @@ -547,7 +547,7 @@
>   * EXPECT_TRUE(measured): 0 != measured
>   */
>  #define EXPECT_TRUE(seen) \
> -       EXPECT_NE(0, seen)
> +       __EXPECT(0, "0", seen, #seen, !=, 0)
>
>  /**
>   * EXPECT_FALSE(seen)
> @@ -557,7 +557,7 @@
>   * EXPECT_FALSE(measured): 0 == measured
>   */
>  #define EXPECT_FALSE(seen) \
> -       EXPECT_EQ(0, seen)
> +       __EXPECT(0, "0", seen, #seen, ==, 0)
>
>  /**
>   * EXPECT_STREQ(expected, seen)
> @@ -597,7 +597,7 @@
>         if (_metadata->passed && _metadata->step < 255) \
>                 _metadata->step++;
>
> -#define __EXPECT(_expected, _seen, _t, _assert) do { \
> +#define __EXPECT(_expected, _expected_str, _seen, _seen_str, _t, _assert) do { \
>         /* Avoid multiple evaluation of the cases */ \
>         __typeof__(_expected) __exp = (_expected); \
>         __typeof__(_seen) __seen = (_seen); \
> @@ -606,8 +606,8 @@
>                 unsigned long long __exp_print = (uintptr_t)__exp; \
>                 unsigned long long __seen_print = (uintptr_t)__seen; \
>                 __TH_LOG("Expected %s (%llu) %s %s (%llu)", \
> -                        #_expected, __exp_print, #_t, \
> -                        #_seen, __seen_print); \
> +                        _expected_str, __exp_print, #_t, \
> +                        _seen_str, __seen_print); \
>                 _metadata->passed = 0; \
>                 /* Ensure the optional handler is triggered */ \
>                 _metadata->trigger = 1; \
> --
> ldv



--
Kees Cook
