Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 08:53:52 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id EEDF958079D;
	Wed, 12 Dec 2018 09:50:59 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 12 Dec 2018 09:50:59 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AFOJkeBZuEaihVJKKDprBkhf/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpci/YR7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyNOAo2+?=
 =?us-ascii?q?YIUPAeQPPvtWoZfhqFsVtRuzBxKhBP/zxjJSmnP6wbE23uYnHArb3AIgBdUOsH?=
 =?us-ascii?q?HModvwKqgdT/u1x7TWwDXEaPNW2ir25Y/Lch8/v/6MRq5/cc3WyUksDA7KklWQ?=
 =?us-ascii?q?qZbiPzOQ1+QNrm2b4/BnVeK1hG4qsgd8qSWsyMc0koTFmJ4Zx1Te+Slkzos5O8?=
 =?us-ascii?q?e0RFN4bNK4CpddtiOXO5NoTs8+R2xkoiU3x70ctZKmfSUG1Y4ryhHQZvGBboOG?=
 =?us-ascii?q?+AjsVPyLLjd9nH9leKywhxK18UW41O38Wde70ExQoipGjNbMrHYN2ALX6sSdTf?=
 =?us-ascii?q?t95Eih1S6O1wDV9O5EPVg5mbTHJ5Ml2LI8i5QevVrZEiPrm0j6kLWae0Qm9+Sw?=
 =?us-ascii?q?7uToeLTmppuSN49ujQH+N7wjmsi+AeQ+LwgPUHGX+eei2735+032XrFKguQxkq?=
 =?us-ascii?q?jXtpDVO94bq7WnAw9azIkj8QyzDzS439QCm3kIMlZFdAiAj4jzNFHCOOr4Auun?=
 =?us-ascii?q?g1SwjDdrwOjLPrngApXOMHfPirjgfatm5k5YyQozy81f5p1OBrEAJvLzRlH+tN?=
 =?us-ascii?q?jCAhAlNAy0xv7tCM9h2YMGRWKPHqiZPbvSsVCS5+IvP/ODZIgPtDb9Nvgq/fju?=
 =?us-ascii?q?jXAilF8ZfKmp24YXaX+iEvRnJUWZfWTjgtMbHWgWuQo+SfTgiEeeXj5Le3ayQ6?=
 =?us-ascii?q?U86yk5CIKhE4jPXIOtgLuH3Ce9GZ1bfWRGClGKEXf1eISIQfYMaCSOIsB/ljwI?=
 =?us-ascii?q?T6SuS4gk1Ru2rg/116JnLvbI+i0frZ/szsN15+3UlREx7zB0Fd6S02OWQmFwn2?=
 =?us-ascii?q?MIQSI23a9lrUx8zFeDzbZ3g/hCGdNP4PNJVx8wNYTAwOxiF9DyRgXBc8+KSFm8?=
 =?us-ascii?q?RNWqGzUxTtMrzN8IbEZwANGijhHF3yq3DL4Zjb2LBJoo8q3C23j9Pdpyy3HD1K?=
 =?us-ascii?q?M5lVkpXtNPNXG6hq547wXcGpTGk1uHmKqwdaQTxijN9HydwmqIu01YVA1wUaDB?=
 =?us-ascii?q?XX0EYkvWrNL55l7NTrO0CLQnNBdBxtCGKqdQdtLpilBGTu/5ONvCe2Kxh3uwBR?=
 =?us-ascii?q?GQy7yRdoXqZXsS0D/dCEcelQAT5miJNQ4lCyelomLeCiFuFF31b0Pt9+l+tG20?=
 =?us-ascii?q?Tksuww6WaE1h0qK/+gQJivyEV/MTwrUEtT89qzV1GVa92M7WC9qApgZ7YKVQe9?=
 =?us-ascii?q?Q94E1D1WLYsQx9MYetL6Rjhl4YbgR2sFni1xRxCoVcj8cqqGkmwxZ1KaKdyFlB?=
 =?us-ascii?q?bS+X3YjsOr3LLWn/5Aqga6rI1VDRztmX+r0D5+8lq1r+pg6pEEki83J509RO13?=
 =?us-ascii?q?uc55PKDBcdUJ7rU0Y38QR6qK/eYiUn+4zU0nhsO7GusjDew9IpGPclyhG4ctZf?=
 =?us-ascii?q?LaOIDhP9H9cbBsiuMuMqnVepYwkAPOBT8q40Isyne+GH2K6tIOZvgjamgX5b74?=
 =?us-ascii?q?B610KG7zB8RfLQ35YZ3/GY2ROKVy39jFi9qM/3g51LZTYIEmq51yfkHo9RarRu?=
 =?us-ascii?q?cokRDWehPtO4xs95h57rQHNY8F+jB1Ub2M6mYxaSblr93RFO2kQTu3CohSy4zz?=
 =?us-ascii?q?lsmTEzsqWfxDDOw/jldBcfOm9LRXNujFf2LYivktAaWlOlbwwolBuj+Eb7yLJX?=
 =?us-ascii?q?pKV5L2nPX0hIezL6IH1lUqu1rrCCedJA6Is0sSVLV+SxeVKaRaTnoxsZ0CPjGH?=
 =?us-ascii?q?FSxCsheDGpuZX5nhp6h3ybLHtoqHrZeMdwxQrQ5dDGRP5R2CYGSzd8iTXNGle8?=
 =?us-ascii?q?ONyp982Ol5jfquC+S36hVppLfCjr14yAszG35W9rAR25hP2zntznEQ4n0S70zd?=
 =?us-ascii?q?VqVCPIrAribYnvzai1LeVnfkxwDl/m98V6Ap1+kpc3hJwI2ngVnJSV8WAHkWfu?=
 =?us-ascii?q?K9pb363+YWEJRT4Kxd7V/Qfk1FdiLnKP24L2SHGdztF9aNm9Z2Mcwjg94NxSCK?=
 =?us-ascii?q?eI8LxEmjN4ol+5rQLSe/dxhDkcxuU16H4Gne4JohEiwTuHArAdBkRYOS3slxKV?=
 =?us-ascii?q?79GxtqlXZWCvcaSu20p6h9yuELaCogREUnbjZpgiBTNw7tl4MF/UzH3z7YTkdM?=
 =?us-ascii?q?PRbN0JsB2UjgzAj/NUKJ8qkvoKhCxnOX/yvHE/yu47iwBu0o++vISdN2pt+6e5?=
 =?us-ascii?q?CAZCNjLpf8MT5i3tjaFGk8mNxY+vGZFhGigRUJvsUPKlCzYStfXhNwaTHzwwsH?=
 =?us-ascii?q?abGbzDHQCB7EdqtW7AE5euN3uPPnkW0c1iRAWBJExYmA0UXi81npsnGQCx3sDh?=
 =?us-ascii?q?bF115jMM5l77txtMzPhnNwLkX2fbpQeobCo0SZeFIBpX6AFC+1naMciE4u1vGC?=
 =?us-ascii?q?FY+4WrrBaRJWyDewRIEWYJV1SEBlDkI7mu/MTA/PKeBuakNPvOZrOOqeNFWveM?=
 =?us-ascii?q?xJKv1JZm/jmWOsWOOHliE+M02k5ZUX9lHMTZni0FSzYLmCLVc86buBC89zV3rs?=
 =?us-ascii?q?+h8fTrWwHv5YqVB7tRK9Vv/B+2jrmZN+6NnyZ0MjJY1pIKxX/Vx7kTxl8Siydy?=
 =?us-ascii?q?dzazFbQMrzLCTKXVmqVPFR4UdztzNNdU76I7xgRCI9Pbhcjv1rFmjv85EVNFVV?=
 =?us-ascii?q?36l8GtZMwKJXy9NVzdCEaKMrSGOSPEw8XtbaygTr1Qif1etwestjaDD0/jIjOD?=
 =?us-ascii?q?miH1VxCuNOFAlj2UMAZCt4G9bBltD3PuTNbnah29Ld92gic6wbwyhnPWK2EcNS?=
 =?us-ascii?q?JwfF9Krr2V9SlYmOlwG3Rd7np5KumJgyaY4PPeKpYTsPtrBDx7luNa4HsgzbtV?=
 =?us-ascii?q?4zpJRPh0mCvUs95vrEuqkuiJyjp7ThVOrixHi56MvUVnau3l8cxpQ3qM1hMA9m?=
 =?us-ascii?q?WdFgoHo5MxA8fj/apRx8PPmb/tJTNq99PS9NEbQc/OJ5TUHmAmNE/KFTPPRCAC?=
 =?us-ascii?q?Sj3jYWLSildWl/aR3naVtJ8/q4Xp3p0URekIBxQOCvoGBxE9T5Q5K5BtU2ZhyO?=
 =?us-ascii?q?bDgQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ATAAA6ShFch0O0hNFkHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGDayeDfIgZX4sygg0Ulz+BcxMBGBMBhz4iNAkNAQMBAQEBAQECARMBAQE?=
 =?us-ascii?q?IDQkIKSMMgjYkAYJiAQIDAQIgBBkBATcBBQkBAQoLDQICJgICAx8SAQUBHAYTB?=
 =?us-ascii?q?YMcggIFmnQ8ih1wfDOCdgEBBYcjCBJ5izEXgUA/hCMQhEqDK4JXiRuCF4UTkEk?=
 =?us-ascii?q?JgiePMBiJaYddiSaPcgIEAgQFAgUPIYElgg4zGggoCGwGgjWCGwwXiF6FYB8yg?=
 =?us-ascii?q?QUBAYozgk0BAQ?=
X-IPAS-Result: =?us-ascii?q?A0ATAAA6ShFch0O0hNFkHQEBBQEHBQGBUQgBCwGDayeDfIg?=
 =?us-ascii?q?ZX4sygg0Ulz+BcxMBGBMBhz4iNAkNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkA?=
 =?us-ascii?q?YJiAQIDAQIgBBkBATcBBQkBAQoLDQICJgICAx8SAQUBHAYTBYMcggIFmnQ8ih1?=
 =?us-ascii?q?wfDOCdgEBBYcjCBJ5izEXgUA/hCMQhEqDK4JXiRuCF4UTkEkJgiePMBiJaYddi?=
 =?us-ascii?q?SaPcgIEAgQFAgUPIYElgg4zGggoCGwGgjWCGwwXiF6FYB8ygQUBAYozgk0BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,345,1539673200"; 
   d="scan'208";a="56077199"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 12 Dec 2018 09:50:57 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728141AbeLLRux (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 12 Dec 2018 12:50:53 -0500
Received: from mail-yb1-f194.google.com ([209.85.219.194]:36983 "EHLO
        mail-yb1-f194.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727880AbeLLRux (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 12 Dec 2018 12:50:53 -0500
Received: by mail-yb1-f194.google.com with SMTP id f4so8008096ybq.4
        for <linux-kernel@vger.kernel.org>; Wed, 12 Dec 2018 09:50:52 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=chromium.org; s=google;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=9KiA5/WdjpRwlFUUpr7dF8lh/5i+oUE3Oturfa5exLE=;
        b=IjtZeB9FvRSQGisWutRPkI21c2s7/qnB2zAEG7Prax6ujYoY3Y/QSpir04yWqcw+iq
         IR3/S47cVNRQ9tNqRrAQw93G9RitHFv6W6aQiSD8/WOFI4FSNIHq2fgj3iU8tes9+MtB
         Pwa0eowKgHGDBDuoHzxQU2mBSVAMZWUZFGQ6w=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=9KiA5/WdjpRwlFUUpr7dF8lh/5i+oUE3Oturfa5exLE=;
        b=jCaOXrMevVG8Ujr5L9NM+jbikmyMf7MTid5HroRh+DNIC0YXAA77K48jUQBZM/NAl4
         7rRUUhgO8wq13es23pOHJIOPgGbMmL44odMYqV0blTkFDpC0THYzD+7URApir5paIxFb
         7efm/Me9pCe1/9sbOdVf22HthSIoqfIgN1JXeZyFvL24xwwAvyGqicjPDGR57AwD+V7k
         r4hRHb4BVTaUxZyG3PFgWJxV0v1sO/QAsz9kokek0YXyswV1j7INOj8lviwi7wjFabUI
         t5+GehGyGbrFOs9hroMw3Llkgv5EsYrvf9cuFJ4ysRngXXlth6AuVWD1JzherdjbUjYQ
         nTxw==
X-Gm-Message-State: AA+aEWbafO+2q0EDmCcAJgYvZ0CHNl8Jck7p7TSkH1uzKuQqSzQnW4wl
        ACDxnPLNs+r/MACH8yQGeiF81MYqfaE=
X-Google-Smtp-Source: AFSGD/VTNo+DEAsTXfugSiKGLpWiiJm3cThRqyv2x7JGAo3STBteQ1VJeraJb2er8xx5s8oNV5x4TA==
X-Received: by 2002:a25:d9d2:: with SMTP id q201mr2931264ybg.151.1544637051395;
        Wed, 12 Dec 2018 09:50:51 -0800 (PST)
Received: from mail-yw1-f44.google.com (mail-yw1-f44.google.com. [209.85.161.44])
        by smtp.gmail.com with ESMTPSA id x4sm12746894ywj.80.2018.12.12.09.50.49
        for <linux-kernel@vger.kernel.org>
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Wed, 12 Dec 2018 09:50:50 -0800 (PST)
Received: by mail-yw1-f44.google.com with SMTP id q11so7326315ywa.0
        for <linux-kernel@vger.kernel.org>; Wed, 12 Dec 2018 09:50:49 -0800 (PST)
X-Received: by 2002:a81:98e:: with SMTP id 136mr21314411ywj.47.1544637049189;
 Wed, 12 Dec 2018 09:50:49 -0800 (PST)
MIME-Version: 1.0
References: <20181212120844.19268-1-ard.biesheuvel@linaro.org>
In-Reply-To: <20181212120844.19268-1-ard.biesheuvel@linaro.org>
From: Kees Cook <keescook@chromium.org>
Date: Wed, 12 Dec 2018 09:50:37 -0800
X-Gmail-Original-Message-ID: <CAGXu5jK50pY-bOxfE0mjBew_dqFcecKT6_1dd+rYQ5T54-fuDg@mail.gmail.com>
Message-ID: <CAGXu5jK50pY-bOxfE0mjBew_dqFcecKT6_1dd+rYQ5T54-fuDg@mail.gmail.com>
Subject: Re: [PATCH v3] arm64: enable per-task stack canaries
To: Ard Biesheuvel <ard.biesheuvel@linaro.org>
Cc: linux-arm-kernel <linux-arm-kernel@lists.infradead.org>,
        LKML <linux-kernel@vger.kernel.org>,
        Will Deacon <will.deacon@arm.com>,
        Mark Rutland <mark.rutland@arm.com>,
        Catalin Marinas <catalin.marinas@arm.com>,
        Ramana Radhakrishnan <Ramana.Radhakrishnan@arm.com>,
        linux-hardened@lists.openwall.com,
        Laura Abbott <labbott@fedoraproject.org>
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Wed, Dec 12, 2018 at 4:08 AM Ard Biesheuvel
<ard.biesheuvel@linaro.org> wrote:
>
> This enables the use of per-task stack canary values if GCC has
> support for emitting the stack canary reference relative to the
> value of sp_el0, which holds the task struct pointer in the arm64
> kernel.
>
> The $(eval) extends KBUILD_CFLAGS at the moment the make rule is
> applied, which means asm-offsets.o (which we rely on for the offset
> value) is built without the arguments, and everything built afterwards
> has the options set.
>
> Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>

Reviewed-by: Kees Cook <keescook@chromium.org>

-Kees

> ---
> v3: add all 3 options to the Kconfig cc-option check, to avoid relying on
>     implementation defined logic in the compiler regarding which options
>     need to appear together.
>
>  arch/arm64/Kconfig                      |  7 +++++++
>  arch/arm64/Makefile                     | 10 ++++++++++
>  arch/arm64/include/asm/stackprotector.h |  3 ++-
>  arch/arm64/kernel/asm-offsets.c         |  3 +++
>  arch/arm64/kernel/process.c             |  2 +-
>  5 files changed, 23 insertions(+), 2 deletions(-)
>
> diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig
> index ea2ab0330e3a..e355946cde97 100644
> --- a/arch/arm64/Kconfig
> +++ b/arch/arm64/Kconfig
> @@ -1272,6 +1272,13 @@ config RANDOMIZE_MODULE_REGION_FULL
>           a limited range that contains the [_stext, _etext] interval of the
>           core kernel, so branch relocations are always in range.
>
> +config CC_HAVE_STACKPROTECTOR_SYSREG
> +       def_bool $(cc-option,-mstack-protector-guard=sysreg -mstack-protector-guard-reg=sp_el0 -mstack-protector-guard-offset=0)
> +
> +config STACKPROTECTOR_PER_TASK
> +       def_bool y
> +       depends on STACKPROTECTOR && CC_HAVE_STACKPROTECTOR_SYSREG
> +
>  endmenu
>
>  menu "Boot options"
> diff --git a/arch/arm64/Makefile b/arch/arm64/Makefile
> index 6cb9fc7e9382..79d927542322 100644
> --- a/arch/arm64/Makefile
> +++ b/arch/arm64/Makefile
> @@ -56,6 +56,16 @@ KBUILD_AFLAGS        += $(lseinstr) $(brokengasinst)
>  KBUILD_CFLAGS  += $(call cc-option,-mabi=lp64)
>  KBUILD_AFLAGS  += $(call cc-option,-mabi=lp64)
>
> +ifeq ($(CONFIG_STACKPROTECTOR_PER_TASK),y)
> +prepare: stack_protector_prepare
> +stack_protector_prepare: prepare0
> +       $(eval KBUILD_CFLAGS += -mstack-protector-guard=sysreg            \
> +                               -mstack-protector-guard-reg=sp_el0        \
> +                               -mstack-protector-guard-offset=$(shell    \
> +                       awk '{if ($$2 == "TSK_STACK_CANARY") print $$3;}' \
> +                                       include/generated/asm-offsets.h))
> +endif
> +
>  ifeq ($(CONFIG_CPU_BIG_ENDIAN), y)
>  KBUILD_CPPFLAGS        += -mbig-endian
>  CHECKFLAGS     += -D__AARCH64EB__
> diff --git a/arch/arm64/include/asm/stackprotector.h b/arch/arm64/include/asm/stackprotector.h
> index 58d15be11c4d..5884a2b02827 100644
> --- a/arch/arm64/include/asm/stackprotector.h
> +++ b/arch/arm64/include/asm/stackprotector.h
> @@ -34,7 +34,8 @@ static __always_inline void boot_init_stack_canary(void)
>         canary &= CANARY_MASK;
>
>         current->stack_canary = canary;
> -       __stack_chk_guard = current->stack_canary;
> +       if (!IS_ENABLED(CONFIG_STACKPROTECTOR_PER_TASK))
> +               __stack_chk_guard = current->stack_canary;
>  }
>
>  #endif /* _ASM_STACKPROTECTOR_H */
> diff --git a/arch/arm64/kernel/asm-offsets.c b/arch/arm64/kernel/asm-offsets.c
> index 323aeb5f2fe6..65b8afc84466 100644
> --- a/arch/arm64/kernel/asm-offsets.c
> +++ b/arch/arm64/kernel/asm-offsets.c
> @@ -46,6 +46,9 @@ int main(void)
>    DEFINE(TSK_TI_TTBR0,         offsetof(struct task_struct, thread_info.ttbr0));
>  #endif
>    DEFINE(TSK_STACK,            offsetof(struct task_struct, stack));
> +#ifdef CONFIG_STACKPROTECTOR
> +  DEFINE(TSK_STACK_CANARY,     offsetof(struct task_struct, stack_canary));
> +#endif
>    BLANK();
>    DEFINE(THREAD_CPU_CONTEXT,   offsetof(struct task_struct, thread.cpu_context));
>    BLANK();
> diff --git a/arch/arm64/kernel/process.c b/arch/arm64/kernel/process.c
> index d9a4c2d6dd8b..8a2d68f04e0d 100644
> --- a/arch/arm64/kernel/process.c
> +++ b/arch/arm64/kernel/process.c
> @@ -59,7 +59,7 @@
>  #include <asm/processor.h>
>  #include <asm/stacktrace.h>
>
> -#ifdef CONFIG_STACKPROTECTOR
> +#if defined(CONFIG_STACKPROTECTOR) && !defined(CONFIG_STACKPROTECTOR_PER_TASK)
>  #include <linux/stackprotector.h>
>  unsigned long __stack_chk_guard __read_mostly;
>  EXPORT_SYMBOL(__stack_chk_guard);
> --
> 2.19.2
>
> s



-- 
Kees Cook
