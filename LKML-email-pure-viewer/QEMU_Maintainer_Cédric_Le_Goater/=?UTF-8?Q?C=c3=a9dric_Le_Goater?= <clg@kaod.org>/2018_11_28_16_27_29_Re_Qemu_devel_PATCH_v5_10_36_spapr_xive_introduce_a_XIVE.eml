Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 29 Nov 2018 08:38:41 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id CD9D55803ED
	for <like.xu@linux.intel.com>; Wed, 28 Nov 2018 08:49:37 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 28 Nov 2018 08:49:37 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AxPIfUxS0LlAlhk1Pgyx53uLN7Npsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa6zYhyN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRfDIOy?=
 =?us-ascii?q?b4UBDOQPMuhXoIb/u1QAogawBRGuCe3txTJEm3H70bEk3OQ6CgzGwBUgEsgSvH?=
 =?us-ascii?q?jIotj4NKEfWv21wqnSyjXDautb1Cnn74fVaBAhoO2DUqp2f8XP0UYhFgTFgU+M?=
 =?us-ascii?q?qYP7JTOey+MAvHSf7+pvTu+viHQoqwZsrTS1wccskIbJi5sTx1vZ9it52J44Kc?=
 =?us-ascii?q?OkREN4e9KoDYZcuiKAO4doTM4vQ3tktDs4x7EevZO3YDIGxZcjyhLFdvCKd4mF?=
 =?us-ascii?q?7gj+WOqMPTt1gm9udqiliBao60egz/XxVsmq31ZOqSpIit3MtnEW1xzP8ciLUP?=
 =?us-ascii?q?R9/kG82TqV0ADT8O5ELVg1lardNZEh3qY9moQPvUnABCP6hVj6gayMekk69OWl?=
 =?us-ascii?q?6/7rbqjkq5OEMo97kAD+MqAgmsylBuQ4NxADX3GF9uS5yb3v5FD2T6tUjvIolq?=
 =?us-ascii?q?nVqYvVJcMGpq6/HwBazJ0j5xG7Dzen09QXg2MLLV1YeB+fi4jpOlfOIO33DPul?=
 =?us-ascii?q?glSslitryO7CPrH7HprNKX3DnaznfbZ67U5cxwwzzc1F65JTELEBL+r/WlXtu9?=
 =?us-ascii?q?zAEh85Lwu0zv7jCNV81YMRR3iDA6CEMK7JtV+I5+QvI/SDZYMPuTb9LeQl6ODq?=
 =?us-ascii?q?jXMjhVAdeqypjtMqbmulFKFmP1mBeiirxdMACnsR+Aw5SuPslRuFSzEUYn+zW6?=
 =?us-ascii?q?c14HY8EJ6nCoHYAZmghaHE0CqlE5kFW2ZdF1rZFH7pc5mDCe4BbT/XLsJ/nzhB?=
 =?us-ascii?q?T7W4VoI6yTmoswn1zachKfDbrTYFv5Du38Qg+uvIiBsp/iZ1BcnO72bYY2hqn2?=
 =?us-ascii?q?9AaD48x6d56Rhxw0mC3YB3gvZDEtoV6+lOSg03PISazuA8As2kCSzbedLcY9eq?=
 =?us-ascii?q?WNStNhU8ef02ysMDeQ4pENGtphPK2CbsBKUawe/YTKco+77RiiCib/12zGzLge?=
 =?us-ascii?q?x41wEr?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AnAAAIxv5bhxHrdtBjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBAYEvKoI4jBFfiymBYC18kGaFYBSBWxgYFIRAgy4iNAkNAQMBAQE?=
 =?us-ascii?q?BAQECARMBAQEKCwkIGw4vQgEQAYFiBQIDGgEGglsBAQEBAgEBAiQfCikDAgEBA?=
 =?us-ascii?q?gYBAQoSBhwKCAMBOQwOBg0GAgEBAYJRS4F6CAEDAadmM4VAg2eBDYwWEQaBf4E?=
 =?us-ascii?q?RJ4I2NYRGJAMUhVsCiRdAhUwBEJBnCYg5iHIGGJEVmEiBRoINTTAIgyeCACcXE?=
 =?us-ascii?q?o4McYEEA4UahU1VgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AnAAAIxv5bhxHrdtBjHAEBAQQBAQcEAQGBUQcBAQsBAYE?=
 =?us-ascii?q?vKoI4jBFfiymBYC18kGaFYBSBWxgYFIRAgy4iNAkNAQMBAQEBAQECARMBAQEKC?=
 =?us-ascii?q?wkIGw4vQgEQAYFiBQIDGgEGglsBAQEBAgEBAiQfCikDAgEBAgYBAQoSBhwKCAM?=
 =?us-ascii?q?BOQwOBg0GAgEBAYJRS4F6CAEDAadmM4VAg2eBDYwWEQaBf4ERJ4I2NYRGJAMUh?=
 =?us-ascii?q?VsCiRdAhUwBEJBnCYg5iHIGGJEVmEiBRoINTTAIgyeCACcXEo4McYEEA4UahU1?=
 =?us-ascii?q?VgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,291,1539673200"; 
   d="scan'208";a="53694265"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 28 Nov 2018 08:49:36 -0800
Received: from localhost ([::1]:48660 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gS31r-0005N8-K7
	for like.xu@linux.intel.com; Wed, 28 Nov 2018 11:49:35 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:41230)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <clg@kaod.org>) id 1gS31Q-0005Kp-1w
	for qemu-devel@nongnu.org; Wed, 28 Nov 2018 11:49:10 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <clg@kaod.org>) id 1gS31L-00027h-Sp
	for qemu-devel@nongnu.org; Wed, 28 Nov 2018 11:49:08 -0500
Received: from 4.mo6.mail-out.ovh.net ([87.98.184.159]:50464)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <clg@kaod.org>) id 1gS2gc-0005At-0a
	for qemu-devel@nongnu.org; Wed, 28 Nov 2018 11:27:38 -0500
Received: from player730.ha.ovh.net (unknown [10.109.143.146])
	by mo6.mail-out.ovh.net (Postfix) with ESMTP id 6675119B90B
	for <qemu-devel@nongnu.org>; Wed, 28 Nov 2018 17:27:35 +0100 (CET)
Received: from kaod.org (lfbn-1-10605-110.w90-89.abo.wanadoo.fr
	[90.89.196.110]) (Authenticated sender: postmaster@kaod.org)
	by player730.ha.ovh.net (Postfix) with ESMTPSA id 1B4A633FC8D;
	Wed, 28 Nov 2018 16:27:30 +0000 (UTC)
To: David Gibson <david@gibson.dropbear.id.au>
References: <20181116105729.23240-1-clg@kaod.org>
	<20181116105729.23240-11-clg@kaod.org>
	<20181128005255.GT2251@umbus.fritz.box>
From: =?UTF-8?Q?C=c3=a9dric_Le_Goater?= <clg@kaod.org>
Message-ID: <64aef78f-e374-9c6d-1a1f-892c4e3b0677@kaod.org>
Date: Wed, 28 Nov 2018 17:27:29 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
	Thunderbird/60.3.0
MIME-Version: 1.0
In-Reply-To: <20181128005255.GT2251@umbus.fritz.box>
Content-Type: text/plain; charset=windows-1252
Content-Language: en-US
X-Ovh-Tracer-Id: 13976639971203844977
X-VR-SPAMSTATE: OK
X-VR-SPAMSCORE: -100
X-VR-SPAMCAUSE: gggruggvucftvghtrhhoucdtuddrgedtkedruddvuddgkeejucetufdoteggodetrfdotffvucfrrhhofhhilhgvmecuqfggjfdpvefjgfevmfevgfenuceurghilhhouhhtmecuhedttdenucesvcftvggtihhpihgvnhhtshculddquddttddm
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 87.98.184.159
Subject: Re: [Qemu-devel] [PATCH v5 10/36] spapr/xive: introduce a XIVE
 interrupt controller
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: qemu-ppc@nongnu.org, qemu-devel@nongnu.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On 11/28/18 1:52 AM, David Gibson wrote:
> On Fri, Nov 16, 2018 at 11:57:03AM +0100, C=E9dric Le Goater wrote:
>> sPAPRXive models the XIVE interrupt controller of the sPAPR machine.
>> It inherits from the XiveRouter and provisions storage for the routing
>> tables :
>>
>>   - Event Assignment Structure (EAS)
>>   - Event Notification Descriptor (END)
>>
>> The sPAPRXive model incorporates an internal XiveSource for the IPIs
>> and for the interrupts of the virtual devices of the guest. This model
>> is consistent with XIVE architecture which also incorporates an
>> internal IVSE for IPIs and accelerator interrupts in the IVRE
>> sub-engine.
>>
>> The sPAPRXive model exports two memory regions, one for the ESB
>> trigger and management pages used to control the sources and one for
>> the TIMA pages. They are mapped by default at the addresses found on
>> chip 0 of a baremetal system. This is also consistent with the XIVE
>> architecture which defines a Virtualization Controller BAR for the
>> internal IVSE ESB pages and a Thread Managment BAR for the TIMA.
>>
>> Signed-off-by: C=E9dric Le Goater <clg@kaod.org>
>> ---
>>  default-configs/ppc64-softmmu.mak |   1 +
>>  include/hw/ppc/spapr_xive.h       |  46 +++++
>>  hw/intc/spapr_xive.c              | 323 +++++++++++++++++++++++++++++=
+
>>  hw/intc/Makefile.objs             |   1 +
>>  4 files changed, 371 insertions(+)
>>  create mode 100644 include/hw/ppc/spapr_xive.h
>>  create mode 100644 hw/intc/spapr_xive.c
>>
>> diff --git a/default-configs/ppc64-softmmu.mak b/default-configs/ppc64=
-softmmu.mak
>> index 2d1e7c5c4668..7f34ad0528ed 100644
>> --- a/default-configs/ppc64-softmmu.mak
>> +++ b/default-configs/ppc64-softmmu.mak
>> @@ -17,6 +17,7 @@ CONFIG_XICS=3D$(CONFIG_PSERIES)
>>  CONFIG_XICS_SPAPR=3D$(CONFIG_PSERIES)
>>  CONFIG_XICS_KVM=3D$(call land,$(CONFIG_PSERIES),$(CONFIG_KVM))
>>  CONFIG_XIVE=3D$(CONFIG_PSERIES)
>> +CONFIG_XIVE_SPAPR=3D$(CONFIG_PSERIES)
>>  CONFIG_MEM_DEVICE=3Dy
>>  CONFIG_DIMM=3Dy
>>  CONFIG_SPAPR_RNG=3Dy
>> diff --git a/include/hw/ppc/spapr_xive.h b/include/hw/ppc/spapr_xive.h
>> new file mode 100644
>> index 000000000000..06727bd86aa9
>> --- /dev/null
>> +++ b/include/hw/ppc/spapr_xive.h
>> @@ -0,0 +1,46 @@
>> +/*
>> + * QEMU PowerPC sPAPR XIVE interrupt controller model
>> + *
>> + * Copyright (c) 2017-2018, IBM Corporation.
>> + *
>> + * This code is licensed under the GPL version 2 or later. See the
>> + * COPYING file in the top-level directory.
>> + */
>> +
>> +#ifndef PPC_SPAPR_XIVE_H
>> +#define PPC_SPAPR_XIVE_H
>> +
>> +#include "hw/sysbus.h"
>> +#include "hw/ppc/xive.h"
>> +
>> +#define TYPE_SPAPR_XIVE "spapr-xive"
>> +#define SPAPR_XIVE(obj) OBJECT_CHECK(sPAPRXive, (obj), TYPE_SPAPR_XIV=
E)
>> +
>> +typedef struct sPAPRXive {
>> +    XiveRouter    parent;
>> +
>> +    /* Internal interrupt source for IPIs and virtual devices */
>> +    XiveSource    source;
>> +    hwaddr        vc_base;
>> +
>> +    /* END ESB MMIOs */
>> +    XiveENDSource end_source;
>> +    hwaddr        end_base;
>> +
>> +    /* Routing table */
>> +    XiveEAS       *eat;
>> +    uint32_t      nr_irqs;
>> +    XiveEND       *endt;
>> +    uint32_t      nr_ends;
>> +
>> +    /* TIMA mapping address */
>> +    hwaddr        tm_base;
>> +    MemoryRegion  tm_mmio;
>> +} sPAPRXive;
>> +
>> +bool spapr_xive_irq_enable(sPAPRXive *xive, uint32_t lisn, bool lsi);
>> +bool spapr_xive_irq_disable(sPAPRXive *xive, uint32_t lisn);
>> +void spapr_xive_pic_print_info(sPAPRXive *xive, Monitor *mon);
>> +qemu_irq spapr_xive_qirq(sPAPRXive *xive, uint32_t lisn);
>> +
>> +#endif /* PPC_SPAPR_XIVE_H */
>> diff --git a/hw/intc/spapr_xive.c b/hw/intc/spapr_xive.c
>> new file mode 100644
>> index 000000000000..5d038146c08e
>> --- /dev/null
>> +++ b/hw/intc/spapr_xive.c
>> @@ -0,0 +1,323 @@
>> +/*
>> + * QEMU PowerPC sPAPR XIVE interrupt controller model
>> + *
>> + * Copyright (c) 2017-2018, IBM Corporation.
>> + *
>> + * This code is licensed under the GPL version 2 or later. See the
>> + * COPYING file in the top-level directory.
>> + */
>> +
>> +#include "qemu/osdep.h"
>> +#include "qemu/log.h"
>> +#include "qapi/error.h"
>> +#include "target/ppc/cpu.h"
>> +#include "sysemu/cpus.h"
>> +#include "monitor/monitor.h"
>> +#include "hw/ppc/spapr.h"
>> +#include "hw/ppc/spapr_xive.h"
>> +#include "hw/ppc/xive.h"
>> +#include "hw/ppc/xive_regs.h"
>> +
>> +/*
>> + * XIVE Virtualization Controller BAR and Thread Managment BAR that w=
e
>> + * use for the ESB pages and the TIMA pages
>> + */
>> +#define SPAPR_XIVE_VC_BASE   0x0006010000000000ull
>> +#define SPAPR_XIVE_TM_BASE   0x0006030203180000ull
>> +
>> +void spapr_xive_pic_print_info(sPAPRXive *xive, Monitor *mon)
>> +{
>> +    int i;
>> +    uint32_t offset =3D 0;
>> +
>> +    monitor_printf(mon, "XIVE Source %08x .. %08x\n", offset,
>> +                   offset + xive->source.nr_irqs - 1);
>> +    xive_source_pic_print_info(&xive->source, offset, mon);
>> +
>> +    monitor_printf(mon, "XIVE EAT %08x .. %08x\n", 0, xive->nr_irqs -=
 1);
>> +    for (i =3D 0; i < xive->nr_irqs; i++) {
>> +        xive_eas_pic_print_info(&xive->eat[i], i, mon);
>> +    }
>> +
>> +    monitor_printf(mon, "XIVE ENDT %08x .. %08x\n", 0, xive->nr_ends =
- 1);
>> +    for (i =3D 0; i < xive->nr_ends; i++) {
>> +        xive_end_pic_print_info(&xive->endt[i], i, mon);
>> +    }
>=20
> AIUI the PAPR model hides the details of ENDs, EQs and NVTs - instead
> each logical EAS just points at a (thread, priority) pair, which under
> the hood has exactly one END and one NVT bound to it.
>=20
> Given that, would it make more sense to reformat the info here to show
> things in terms of those (thread, priority) pairs, rather than the
> internal EAS and END details?

Yes. I had a version doing something like that before. I will rework
the ouput a little for sPAPR. =20


>> +}
>> +
>> +/* Map the ESB pages and the TIMA pages */
>> +static void spapr_xive_mmio_map(sPAPRXive *xive)
>> +{
>> +    sysbus_mmio_map(SYS_BUS_DEVICE(&xive->source), 0, xive->vc_base);
>> +    sysbus_mmio_map(SYS_BUS_DEVICE(&xive->end_source), 0, xive->end_b=
ase);
>=20
> Uh.. I didn't think the PAPR model exposed the END sources to the guest=
?

Well, it should if it was being used but it's not the case for any of the=
=20
sPAPR guest OS today. So I think it's preferable to remove the mapping un=
til=20
someone wants to experiment with it. We can keep the XiveENDSource object=
=20
though. This is harmless.

There is no KVM side to the END ESBs either as OPAL does not use them.=20

>=20
>> +    sysbus_mmio_map(SYS_BUS_DEVICE(xive), 0, xive->tm_base);
>> +}
>> +
>> +static void spapr_xive_reset(DeviceState *dev)
>> +{
>> +    sPAPRXive *xive =3D SPAPR_XIVE(dev);
>> +    int i;
>> +
>> +    /* Xive Source reset is done through SysBus, it should put all
>> +     * IRQs to OFF (!P|Q) */
>> +
>> +    /* Mask all valid EASs in the IRQ number space. */
>> +    for (i =3D 0; i < xive->nr_irqs; i++) {
>> +        XiveEAS *eas =3D &xive->eat[i];
>> +        if (eas->w & EAS_VALID) {
>> +            eas->w |=3D EAS_MASKED;
>=20
> To ensure consistent behaviour across reboots, it would be better to
> reset the whole of the EAS, except those which have to be preserved
> across reboots (which would be VALID, and maybe nothing else?).

VALID EAS corresponds to IRQ numbers claimed by the devices of the machin=
e.
So we should keep the valid bit but reset all other settings which this
reset method is not doing. I will fix.

>> +        }
>> +    }
>> +
>> +    for (i =3D 0; i < xive->nr_ends; i++) {
>> +        xive_end_reset(&xive->endt[i]);
>> +    }
>> +
>> +    spapr_xive_mmio_map(xive);
>=20
> You shouldn't need to re-etablish MMIO mappings at reset time, only
> during initialization.

Yes. Not for now indeed, but the patch is anticipating the switch=20
of the interrupt mode at reset. I will move the mapping to the=20
realize method in that patch and re-move it again in reset when=20
we reach that part of the patchset (dual machine) =20

>> +}
>> +
>> +static void spapr_xive_instance_init(Object *obj)
>> +{
>> +    sPAPRXive *xive =3D SPAPR_XIVE(obj);
>> +
>> +    object_initialize(&xive->source, sizeof(xive->source), TYPE_XIVE_=
SOURCE);
>=20
> Yeah, embedding the source here makes sense, but it's a strong
> indication that XiveSource should not be a SysBusDevice subclass.  I
> really think it wants to be a TYPE_DEVICE subclass - and, in fact, I
> think it can be object_initialize() embedded everywhere it's used.

I have changed XiveSource to be a TYPE_DEVICE.
=20
> I've also said elswhere that I suspect XiveRouter should also not be a
> SysBusDevice. =20

I have changed XiveRouter to be a TYPE_DEVICE.

> With that approach it might make sense to embed it
> here, rather than subclassing it=20

ah. why not indeed. I have to think about it.=20

> (the old composition vs. inheritance debate).

he. but then the XiveRouter needs to become a QOM interface if we=20
want to be able to define XIVE table accessors for sPAPRXive. See
the  spapr_xive_class_init() routine.

>> +    object_property_add_child(obj, "source", OBJECT(&xive->source), N=
ULL);
>> +
>> +    object_initialize(&xive->end_source, sizeof(xive->end_source),
>> +                      TYPE_XIVE_END_SOURCE);
>> +    object_property_add_child(obj, "end_source", OBJECT(&xive->end_so=
urce),
>> +                              NULL);
>> +}
>> +
>> +static void spapr_xive_realize(DeviceState *dev, Error **errp)
>> +{
>> +    sPAPRXive *xive =3D SPAPR_XIVE(dev);
>> +    XiveSource *xsrc =3D &xive->source;
>> +    XiveENDSource *end_xsrc =3D &xive->end_source;
>> +    Error *local_err =3D NULL;
>> +
>> +    if (!xive->nr_irqs) {
>> +        error_setg(errp, "Number of interrupt needs to be greater 0")=
;
>> +        return;
>> +    }
>> +
>> +    if (!xive->nr_ends) {
>> +        error_setg(errp, "Number of interrupt needs to be greater 0")=
;
>> +        return;
>> +    }
>> +
>> +    /*
>> +     * Initialize the internal sources, for IPIs and virtual devices.
>> +     */
>> +    object_property_set_int(OBJECT(xsrc), xive->nr_irqs, "nr-irqs",
>> +                            &error_fatal);
>> +    object_property_add_const_link(OBJECT(xsrc), "xive", OBJECT(xive)=
,
>> +                                   &error_fatal);
>> +    object_property_set_bool(OBJECT(xsrc), true, "realized", &local_e=
rr);
>> +    if (local_err) {
>> +        error_propagate(errp, local_err);
>> +        return;
>> +    }
>> +    qdev_set_parent_bus(DEVICE(xsrc), sysbus_get_default());
>> +
>> +    /*
>> +     * Initialize the END ESB source
>> +     */
>> +    object_property_set_int(OBJECT(end_xsrc), xive->nr_irqs, "nr-ends=
",
>> +                            &error_fatal);
>> +    object_property_add_const_link(OBJECT(end_xsrc), "xive", OBJECT(x=
ive),
>> +                                   &error_fatal);
>> +    object_property_set_bool(OBJECT(end_xsrc), true, "realized", &loc=
al_err);
>> +    if (local_err) {
>> +        error_propagate(errp, local_err);
>> +        return;
>> +    }
>> +    qdev_set_parent_bus(DEVICE(end_xsrc), sysbus_get_default());
>> +
>> +    /* Set the mapping address of the END ESB pages after the source =
ESBs */
>> +    xive->end_base =3D xive->vc_base + (1ull << xsrc->esb_shift) * xs=
rc->nr_irqs;
>> +
>> +    /*
>> +     * Allocate the routing tables
>> +     */
>> +    xive->eat =3D g_new0(XiveEAS, xive->nr_irqs);
>> +    xive->endt =3D g_new0(XiveEND, xive->nr_ends);
>> +
>> +    /* TIMA initialization */
>> +    memory_region_init_io(&xive->tm_mmio, OBJECT(xive), &xive_tm_ops,=
 xive,
>> +                          "xive.tima", 4ull << TM_SHIFT);
>> +    sysbus_init_mmio(SYS_BUS_DEVICE(dev), &xive->tm_mmio);
>> +}
>> +
>> +static int spapr_xive_get_eas(XiveRouter *xrtr, uint32_t lisn, XiveEA=
S *eas)
>> +{
>> +    sPAPRXive *xive =3D SPAPR_XIVE(xrtr);
>> +
>> +    if (lisn >=3D xive->nr_irqs) {
>> +        return -1;
>> +    }
>> +
>> +    *eas =3D xive->eat[lisn];
>> +    return 0;
>> +}
>> +
>> +static int spapr_xive_set_eas(XiveRouter *xrtr, uint32_t lisn, XiveEA=
S *eas)
>> +{
>> +    sPAPRXive *xive =3D SPAPR_XIVE(xrtr);
>> +
>> +    if (lisn >=3D xive->nr_irqs) {
>> +        return -1;
>> +    }
>> +
>> +    xive->eat[lisn] =3D *eas;
>> +    return 0;
>> +}
>> +
>> +static int spapr_xive_get_end(XiveRouter *xrtr,
>> +                              uint8_t end_blk, uint32_t end_idx, Xive=
END *end)
>> +{
>> +    sPAPRXive *xive =3D SPAPR_XIVE(xrtr);
>> +
>> +    if (end_idx >=3D xive->nr_ends) {
>> +        return -1;
>> +    }
>> +
>> +    memcpy(end, &xive->endt[end_idx], sizeof(XiveEND));
>> +    return 0;
>> +}
>> +
>> +static int spapr_xive_set_end(XiveRouter *xrtr,
>> +                              uint8_t end_blk, uint32_t end_idx, Xive=
END *end)
>> +{
>> +    sPAPRXive *xive =3D SPAPR_XIVE(xrtr);
>> +
>> +    if (end_idx >=3D xive->nr_ends) {
>> +        return -1;
>> +    }
>> +
>> +    memcpy(&xive->endt[end_idx], end, sizeof(XiveEND));
>> +    return 0;
>> +}
>> +
>> +static const VMStateDescription vmstate_spapr_xive_end =3D {
>> +    .name =3D TYPE_SPAPR_XIVE "/end",
>> +    .version_id =3D 1,
>> +    .minimum_version_id =3D 1,
>> +    .fields =3D (VMStateField []) {
>> +        VMSTATE_UINT32(w0, XiveEND),
>> +        VMSTATE_UINT32(w1, XiveEND),
>> +        VMSTATE_UINT32(w2, XiveEND),
>> +        VMSTATE_UINT32(w3, XiveEND),
>> +        VMSTATE_UINT32(w4, XiveEND),
>> +        VMSTATE_UINT32(w5, XiveEND),
>> +        VMSTATE_UINT32(w6, XiveEND),
>> +        VMSTATE_UINT32(w7, XiveEND),
>> +        VMSTATE_END_OF_LIST()
>> +    },
>> +};
>> +
>> +static const VMStateDescription vmstate_spapr_xive_eas =3D {
>> +    .name =3D TYPE_SPAPR_XIVE "/eas",
>> +    .version_id =3D 1,
>> +    .minimum_version_id =3D 1,
>> +    .fields =3D (VMStateField []) {
>> +        VMSTATE_UINT64(w, XiveEAS),
>> +        VMSTATE_END_OF_LIST()
>> +    },
>> +};
>> +
>> +static const VMStateDescription vmstate_spapr_xive =3D {
>> +    .name =3D TYPE_SPAPR_XIVE,
>> +    .version_id =3D 1,
>> +    .minimum_version_id =3D 1,
>> +    .fields =3D (VMStateField[]) {
>> +        VMSTATE_UINT32_EQUAL(nr_irqs, sPAPRXive, NULL),
>> +        VMSTATE_STRUCT_VARRAY_POINTER_UINT32(eat, sPAPRXive, nr_irqs,
>> +                                     vmstate_spapr_xive_eas, XiveEAS)=
,
>> +        VMSTATE_STRUCT_VARRAY_POINTER_UINT32(endt, sPAPRXive, nr_ends=
,
>> +                                             vmstate_spapr_xive_end, =
XiveEND),
>> +        VMSTATE_END_OF_LIST()
>> +    },
>> +};
>> +
>> +static Property spapr_xive_properties[] =3D {
>> +    DEFINE_PROP_UINT32("nr-irqs", sPAPRXive, nr_irqs, 0),
>> +    DEFINE_PROP_UINT32("nr-ends", sPAPRXive, nr_ends, 0),
>> +    DEFINE_PROP_UINT64("vc-base", sPAPRXive, vc_base, SPAPR_XIVE_VC_B=
ASE),
>> +    DEFINE_PROP_UINT64("tm-base", sPAPRXive, tm_base, SPAPR_XIVE_TM_B=
ASE),
>> +    DEFINE_PROP_END_OF_LIST(),
>> +};
>> +
>> +static void spapr_xive_class_init(ObjectClass *klass, void *data)
>> +{
>> +    DeviceClass *dc =3D DEVICE_CLASS(klass);
>> +    XiveRouterClass *xrc =3D XIVE_ROUTER_CLASS(klass);
>> +
>> +    dc->desc    =3D "sPAPR XIVE Interrupt Controller";
>> +    dc->props   =3D spapr_xive_properties;
>> +    dc->realize =3D spapr_xive_realize;
>> +    dc->reset   =3D spapr_xive_reset;
>> +    dc->vmsd    =3D &vmstate_spapr_xive;
>> +
>> +    xrc->get_eas =3D spapr_xive_get_eas;
>> +    xrc->set_eas =3D spapr_xive_set_eas;
>> +    xrc->get_end =3D spapr_xive_get_end;
>> +    xrc->set_end =3D spapr_xive_set_end;
>> +}
>> +
>> +static const TypeInfo spapr_xive_info =3D {
>> +    .name =3D TYPE_SPAPR_XIVE,
>> +    .parent =3D TYPE_XIVE_ROUTER,
>> +    .instance_init =3D spapr_xive_instance_init,
>> +    .instance_size =3D sizeof(sPAPRXive),
>> +    .class_init =3D spapr_xive_class_init,
>> +};
>> +
>> +static void spapr_xive_register_types(void)
>> +{
>> +    type_register_static(&spapr_xive_info);
>> +}
>> +
>> +type_init(spapr_xive_register_types)
>> +
>> +bool spapr_xive_irq_enable(sPAPRXive *xive, uint32_t lisn, bool lsi)
>> +{
>> +    XiveSource *xsrc =3D &xive->source;
>> +
>> +    if (lisn >=3D xive->nr_irqs) {
>> +        return false;
>> +    }
>> +
>> +    xive->eat[lisn].w |=3D EAS_VALID;
>> +    xive_source_irq_set(xsrc, lisn, lsi);
>> +    return true;
>> +}
>> +
>> +bool spapr_xive_irq_disable(sPAPRXive *xive, uint32_t lisn)
>> +{
>> +    XiveSource *xsrc =3D &xive->source;
>> +
>> +    if (lisn >=3D xive->nr_irqs) {
>> +        return false;
>> +    }
>> +
>> +    xive->eat[lisn].w &=3D ~EAS_VALID;
>> +    xive_source_irq_set(xsrc, lisn, false);
>> +    return true;
>> +}
>> +
>> +qemu_irq spapr_xive_qirq(sPAPRXive *xive, uint32_t lisn)
>> +{
>> +    XiveSource *xsrc =3D &xive->source;
>> +
>> +    if (lisn >=3D xive->nr_irqs) {
>> +        return NULL;
>> +    }
>> +
>> +    if (!(xive->eat[lisn].w & EAS_VALID)) {
>> +        qemu_log_mask(LOG_GUEST_ERROR, "XIVE: invalid LISN %x\n", lis=
n);
>=20
> I don't think this is a guest error - gettint the qirq by number
> should generally be something qemu code does.

Even if the IRQ was not defined by the machine ? The EAS_VALID bit is
raised when the IRQ is enabled at the XIVE level, which means that the
IRQ number has been claimed by some device of the machine. You cannot
get a qirq by number for  some random IRQ number. Can you ?=20

Thanks,

C.=20

>=20
>> +        return NULL;
>> +    }
>> +
>> +    return xive_source_qirq(xsrc, lisn);
>> +}
>> diff --git a/hw/intc/Makefile.objs b/hw/intc/Makefile.objs
>> index 72a46ed91c31..301a8e972d91 100644
>> --- a/hw/intc/Makefile.objs
>> +++ b/hw/intc/Makefile.objs
>> @@ -38,6 +38,7 @@ obj-$(CONFIG_XICS) +=3D xics.o
>>  obj-$(CONFIG_XICS_SPAPR) +=3D xics_spapr.o
>>  obj-$(CONFIG_XICS_KVM) +=3D xics_kvm.o
>>  obj-$(CONFIG_XIVE) +=3D xive.o
>> +obj-$(CONFIG_XIVE_SPAPR) +=3D spapr_xive.o
>>  obj-$(CONFIG_POWERNV) +=3D xics_pnv.o
>>  obj-$(CONFIG_ALLWINNER_A10_PIC) +=3D allwinner-a10-pic.o
>>  obj-$(CONFIG_S390_FLIC) +=3D s390_flic.o
>=20


