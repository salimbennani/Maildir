Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 12 Dec 2018 08:52:43 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id E950F58079D
	for <like.xu@linux.intel.com>; Tue, 11 Dec 2018 08:51:57 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 11 Dec 2018 08:51:57 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3ALg8wuhb33EWWt5PO9zgAO+3/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZrsu6bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJSSJBDIOy?=
 =?us-ascii?q?YYgBAeUPMulXrZXyqVQToxumBwSiBuzixiJGi3Pqw6I6yP8sER3f3AE6A94CrH?=
 =?us-ascii?q?rZodXzOawPUe611q7IzTDbYv5IwzDy9ZLIchE9rv6UW7x/b9Lex0goFwzfklWf?=
 =?us-ascii?q?t5blNC6S2+sRt2ib4PFtVeG1hG4gtg59uD+vxt0jioTQgI8e11PK9T1hzYorOd?=
 =?us-ascii?q?G1S1R3bcO5HJZTrS2WKYV7T8M4T211uis20qAKtJq7cSQQ1pgr2gDTZ+aZf4WM?=
 =?us-ascii?q?+B7vSeecLSl+iXl4YrywnQyy/lKlyuDkVsm7zlJKri1dn9nIt3ANzADT6tOdRv?=
 =?us-ascii?q?ty+EehxCyD1wfJ6uFLOUw0lKzbJIA9wrMoiJYfrUfOEjXrlEnrj6KabFso9+ao?=
 =?us-ascii?q?5uj9f7nrpIeQN4puhQH/NqQulNa/AeM9MgUWRmiU5+G81KD68ULkXrpKkOM5kq?=
 =?us-ascii?q?3AvJ/BIsQbu6i5DBNL3YY47Bq/Czam0NcGknUdI1NFZQqKj4zoO1HIPfD5Au2z?=
 =?us-ascii?q?g1WqkDd32f/GOqftDYnKLnjGi7rhe7F960hTyAo10NBT/ZVUCqsOIP7rQE/+qM?=
 =?us-ascii?q?TYDgMlMwyz2+vnDNR91oAAVm6VDa6ZLbjfsVuJ5uIpPumNa5UZuDf7K/g5+fHu?=
 =?us-ascii?q?iWU1lkMafamsjtMqbmulFKFmP1mBeiirxdMACnsR+Aw5SuPslRuFSzEUYn+zW6?=
 =?us-ascii?q?c14HY8EJ6nCoHYAZmghaHE0CqlE5kFW2ZdF1rZFH7pc5mDCe4BbT/XLsJ/nzhB?=
 =?us-ascii?q?T7W4VoI6yTmoswn1zachKfDbrTYFv5Du38Qg+uvIiBsp/iZ1BcnO72bYY2hqn2?=
 =?us-ascii?q?9AaD48x6d56Rhxw0mC3YB3gvZDEtoV6+lOSg03PISazuA8As2kCSzbedLcY9eq?=
 =?us-ascii?q?WNStNhU8ef02ysMDeQ4pENGtphPK2CbsBKUawe/YTKco+77RiiCib/12zGzLge?=
 =?us-ascii?q?x41wEr?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BqAADN6Q9cmBHrdtBkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUwUBAQsBgTAqgjiMc4sxgWAtl1IUgWIRGBSEQIJuIjYHDQEDAQEBAQEBAgE?=
 =?us-ascii?q?TAQEBAQEICwsGGw4vgjYFAgMaAQaCXAECAwECJB8KKQMDAQIGAQEKGBwKCAMBO?=
 =?us-ascii?q?RoGDQYCAQEBgxyCAgEDAaZzM4VAg2CBDYw7EQaBf4ERJ4JrhGoXhVsCjz+RPAm?=
 =?us-ascii?q?RSwYYkUCZM4FNDIF7TTAIO4JsgicXfwEHjRdxgQQDiGyBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0BqAADN6Q9cmBHrdtBkHAEBAQQBAQcEAQGBUwUBAQsBgTA?=
 =?us-ascii?q?qgjiMc4sxgWAtl1IUgWIRGBSEQIJuIjYHDQEDAQEBAQEBAgETAQEBAQEICwsGG?=
 =?us-ascii?q?w4vgjYFAgMaAQaCXAECAwECJB8KKQMDAQIGAQEKGBwKCAMBORoGDQYCAQEBgxy?=
 =?us-ascii?q?CAgEDAaZzM4VAg2CBDYw7EQaBf4ERJ4JrhGoXhVsCjz+RPAmRSwYYkUCZM4FND?=
 =?us-ascii?q?IF7TTAIO4JsgicXfwEHjRdxgQQDiGyBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,342,1539673200"; 
   d="scan'208";a="55449799"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 11 Dec 2018 08:51:56 -0800
Received: from localhost ([::1]:40080 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gWlGF-0001fT-U0
	for like.xu@linux.intel.com; Tue, 11 Dec 2018 11:51:55 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:42629)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <clg@kaod.org>) id 1gWl9B-0002zD-J7
	for qemu-devel@nongnu.org; Tue, 11 Dec 2018 11:44:39 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <clg@kaod.org>) id 1gWl98-0005Or-66
	for qemu-devel@nongnu.org; Tue, 11 Dec 2018 11:44:37 -0500
Received: from 4.mo5.mail-out.ovh.net ([178.33.111.247]:46619)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <clg@kaod.org>) id 1gWl97-0005O8-VG
	for qemu-devel@nongnu.org; Tue, 11 Dec 2018 11:44:34 -0500
Received: from player798.ha.ovh.net (unknown [10.109.146.86])
	by mo5.mail-out.ovh.net (Postfix) with ESMTP id 7B21620A073
	for <qemu-devel@nongnu.org>; Tue, 11 Dec 2018 17:44:32 +0100 (CET)
Received: from kaod.org (deibp9eh1--blueice1n0.emea.ibm.com [195.212.29.162])
	(Authenticated sender: postmaster@kaod.org)
	by player798.ha.ovh.net (Postfix) with ESMTPSA id 31206D498C1;
	Tue, 11 Dec 2018 16:44:27 +0000 (UTC)
To: David Gibson <david@gibson.dropbear.id.au>
References: <20181209194610.29727-1-clg@kaod.org>
	<20181209194610.29727-19-clg@kaod.org>
	<39e8edd0-6056-5b51-174b-631dcb267ff5@kaod.org>
	<20181211020620.GG4261@umbus.fritz.box>
	<744ff9f8-6f84-00d4-a2e0-84652658762e@kaod.org>
From: =?UTF-8?Q?C=c3=a9dric_Le_Goater?= <clg@kaod.org>
Message-ID: <23f5d148-5b11-bc33-6a88-7df9e591f9d0@kaod.org>
Date: Tue, 11 Dec 2018 17:44:26 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
	Thunderbird/60.3.1
MIME-Version: 1.0
In-Reply-To: <744ff9f8-6f84-00d4-a2e0-84652658762e@kaod.org>
Content-Type: text/plain; charset=windows-1252
Content-Language: en-US
X-Ovh-Tracer-Id: 16820944611863989105
X-VR-SPAMSTATE: OK
X-VR-SPAMSCORE: -100
X-VR-SPAMCAUSE: gggruggvucftvghtrhhoucdtuddrgedtkedrudegjedgledvucetufdoteggodetrfdotffvucfrrhhofhhilhgvmecuqfggjfdpvefjgfevmfevgfenuceurghilhhouhhtmecuhedttdenucesvcftvggtihhpihgvnhhtshculddquddttddm
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 178.33.111.247
Subject: Re: [Qemu-devel] [PATCH v7 18/19] spapr: add a 'pseries-4.0-xive'
 machine type
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: qemu-ppc@nongnu.org, qemu-devel@nongnu.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On 12/11/18 11:42 AM, C=E9dric Le Goater wrote:
> On 12/11/18 3:06 AM, David Gibson wrote:
>> On Mon, Dec 10, 2018 at 11:17:33PM +0100, C=E9dric Le Goater wrote:
>>> On 12/9/18 8:46 PM, C=E9dric Le Goater wrote:
>>>> This pseries machine makes use of a new sPAPR IRQ backend supporting
>>>> the XIVE interrupt mode.
>>>>
>>>> The guest OS is required to have support for the XIVE exploitation
>>>> mode of the POWER9 interrupt controller.
>>>>
>>>> Signed-off-by: C=E9dric Le Goater <clg@kaod.org>
>>>> ---
>>>>  hw/ppc/spapr.c | 15 +++++++++++++++
>>>>  1 file changed, 15 insertions(+)
>>>>
>>>> diff --git a/hw/ppc/spapr.c b/hw/ppc/spapr.c
>>>> index 4012ebd794a4..3cc134a0b673 100644
>>>> --- a/hw/ppc/spapr.c
>>>> +++ b/hw/ppc/spapr.c
>>>> @@ -3985,6 +3985,21 @@ static void spapr_machine_4_0_class_options(M=
achineClass *mc)
>>>> =20
>>>>  DEFINE_SPAPR_MACHINE(4_0, "4.0", true);
>>>> =20
>>>> +static void spapr_machine_4_0_xive_instance_options(MachineState *m=
achine)
>>>> +{
>>>> +    spapr_machine_4_0_instance_options(machine);
>>>> +}
>>>> +
>>>> +static void spapr_machine_4_0_xive_class_options(MachineClass *mc)
>>>> +{
>>>> +    sPAPRMachineClass *smc =3D SPAPR_MACHINE_CLASS(mc);
>>>> +
>>>> +    spapr_machine_4_0_class_options(mc);> +    smc->irq =3D &spapr_=
irq_xive;
>>>
>>> I have been adding checks on the CPU model to export the XIVE capabil=
ity=20
>>> only on POWER9 processors but it breaks some of the tests.
>>>
>>> I was wondering if we could add a default POWER9 CPU to the -xive mac=
hine :=20
>>>
>>>   + mc->default_cpu_type =3D POWERPC_CPU_TYPE_NAME("power9_v2.0");
>>>
>>> and if we could change tests/cpu-plug-test.c with :
>>>
>>>   @@ -198,8 +198,13 @@ static void add_pseries_test_case(const
>>>        }
>>>        data =3D g_new(PlugTestData, 1);
>>>        data->machine =3D g_strdup(mname);
>>>   -    data->cpu_model =3D "power8_v2.0";
>>>   -    data->device_model =3D g_strdup("power8_v2.0-spapr-cpu-core");
>>>   +    if (g_str_has_suffix(mname, "xive")) {
>>>   +        data->cpu_model =3D "power9_v2.0";
>>>   +        data->device_model =3D g_strdup("power9_v2.0-spapr-cpu-cor=
e");
>>>   +    } else {
>>>   +        data->cpu_model =3D "power8_v2.0";
>>>   +        data->device_model =3D g_strdup("power8_v2.0-spapr-cpu-cor=
e");
>>>   +    }
>>>        data->sockets =3D 2;
>>>        data->cores =3D 3;
>>>        data->threads =3D 1;
>>>
>>> or if there is a better way ?
>>
>> So, I'd actually prefer a machine option, rather than wholly separate
>> machine types to select xics/xive/dual.  Machine types was fine while
>> prototyping this, but I don't think we want to actually merge new
>> machine types for it.
>=20
> I agree.=20
>=20
>> So, instead I think we want a machine option which can be set to
>> xics/xive/dual, with xics being the default for earlier machine types
>> and dual the default for 4.0 onwards.
>=20
> I will revive an old patch doing just that.=20
>=20
> The question now is how to link the sPAPRMachineState instance to=20
> the selected sPAPR IRQ backend.=20

Would something like below be acceptable ? If so I will change the=20
remaining patches to use 'spapr->irq' and not 'smc->irq' anymore.
=20
Thanks,

C.

Index: qemu-xive.git/include/hw/ppc/spapr.h
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
--- qemu-xive.git.orig/include/hw/ppc/spapr.h
+++ qemu-xive.git/include/hw/ppc/spapr.h
@@ -177,6 +177,7 @@ struct sPAPRMachineState {
     int32_t irq_map_nr;
     unsigned long *irq_map;
     sPAPRXive  *xive;
+    sPAPRIrq *irq;
=20
     bool cmd_line_caps[SPAPR_CAP_NUM];
     sPAPRCapabilities def, eff, mig;
Index: qemu-xive.git/hw/ppc/spapr.c
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
--- qemu-xive.git.orig/hw/ppc/spapr.c
+++ qemu-xive.git/hw/ppc/spapr.c
@@ -1302,7 +1301,7 @@ static void *spapr_build_fdt(sPAPRMachin
     }
=20
     QLIST_FOREACH(phb, &spapr->phbs, list) {
-        ret =3D spapr_populate_pci_dt(phb, PHANDLE_XICP, fdt, smc->irq->=
nr_msis);
+        ret =3D spapr_populate_pci_dt(phb, PHANDLE_XICP, fdt, spapr->irq=
->nr_msis);
         if (ret < 0) {
             error_report("couldn't setup PCI devices in fdt");
             exit(1);
@@ -3056,9 +3055,38 @@ static void spapr_set_vsmt(Object *obj,
     visit_type_uint32(v, name, (uint32_t *)opaque, errp);
 }
=20
+static char *spapr_get_irq(Object *obj, Error **errp)
+{
+    sPAPRMachineState *spapr =3D SPAPR_MACHINE(obj);
+
+    if (spapr->irq =3D=3D &spapr_irq_xics_legacy) {
+        return g_strdup("legacy");
+    } else if (spapr->irq =3D=3D &spapr_irq_xics) {
+        return g_strdup("xics");
+    } else if (spapr->irq =3D=3D &spapr_irq_xive) {
+        return g_strdup("xive");
+    }
+    g_assert_not_reached();
+}
+
+static void spapr_set_irq(Object *obj, const char *value, Error **errp)
+{
+    sPAPRMachineState *spapr =3D SPAPR_MACHINE(obj);
+
+    /* We don't want to set the legacy IRQ backend */
+    if (strcmp(value, "xics") =3D=3D 0) {
+        spapr->irq =3D &spapr_irq_xics;
+    } else if (strcmp(value, "xive") =3D=3D 0) {
+        spapr->irq =3D &spapr_irq_xive;
+    } else {
+        error_setg(errp, "Bad value for \"irq\" property");
+    }
+}
+
 static void spapr_instance_init(Object *obj)
 {
     sPAPRMachineState *spapr =3D SPAPR_MACHINE(obj);
+    sPAPRMachineClass *smc =3D SPAPR_MACHINE_GET_CLASS(spapr);
=20
     spapr->htab_fd =3D -1;
     spapr->use_hotplug_event_source =3D true;
@@ -3092,6 +3120,13 @@ static void spapr_instance_init(Object *
                                     " the host's SMT mode", &error_abort=
);
     object_property_add_bool(obj, "vfio-no-msix-emulation",
                              spapr_get_msix_emulation, NULL, NULL);
+
+    /* Get the default from the machine class */
+    spapr->irq =3D smc->irq;
+    object_property_add_str(obj, "irq", spapr_get_irq, spapr_set_irq, NU=
LL);
+    object_property_set_description(obj, "irq",
+                 "Specifies the interrupt controller mode (xics, xive)",
+                 NULL);
 }
=20
 static void spapr_machine_finalizefn(Object *obj)
@@ -3814,9 +3849,8 @@ static void spapr_pic_print_info(Interru
                                  Monitor *mon)
 {
     sPAPRMachineState *spapr =3D SPAPR_MACHINE(obj);
-    sPAPRMachineClass *smc =3D SPAPR_MACHINE_GET_CLASS(spapr);
=20
-    smc->irq->print_info(spapr, mon);
+    spapr->irq->print_info(spapr, mon);
 }
=20
 int spapr_get_vcpu_id(PowerPCCPU *cpu)
Index: qemu-xive.git/hw/ppc/spapr_irq.c
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
--- qemu-xive.git.orig/hw/ppc/spapr_irq.c
+++ qemu-xive.git/hw/ppc/spapr_irq.c
@@ -94,8 +94,7 @@ error:
 static void spapr_irq_init_xics(sPAPRMachineState *spapr, Error **errp)
 {
     MachineState *machine =3D MACHINE(spapr);
-    sPAPRMachineClass *smc =3D SPAPR_MACHINE_GET_CLASS(spapr);
-    int nr_irqs =3D smc->irq->nr_irqs;
+    int nr_irqs =3D spapr->irq->nr_irqs;
     Error *local_err =3D NULL;
=20
     if (kvm_enabled()) {
@@ -234,7 +233,6 @@ sPAPRIrq spapr_irq_xics =3D {
 static void spapr_irq_init_xive(sPAPRMachineState *spapr, Error **errp)
 {
     MachineState *machine =3D MACHINE(spapr);
-    sPAPRMachineClass *smc =3D SPAPR_MACHINE_GET_CLASS(spapr);
     uint32_t nr_servers =3D spapr_max_server_number(spapr);
     DeviceState *dev;
     int i;
@@ -248,7 +246,7 @@ static void spapr_irq_init_xive(sPAPRMac
     }
=20
     dev =3D qdev_create(NULL, TYPE_SPAPR_XIVE);
-    qdev_prop_set_uint32(dev, "nr-irqs", smc->irq->nr_irqs);
+    qdev_prop_set_uint32(dev, "nr-irqs", spapr->irq->nr_irqs);
     /*
      * 8 XIVE END structures per CPU. One for each available priority
      */
@@ -353,50 +351,38 @@ sPAPRIrq spapr_irq_xive =3D {
  */
 void spapr_irq_init(sPAPRMachineState *spapr, Error **errp)
 {
-    sPAPRMachineClass *smc =3D SPAPR_MACHINE_GET_CLASS(spapr);
-
     /* Initialize the MSI IRQ allocator. */
     if (!SPAPR_MACHINE_GET_CLASS(spapr)->legacy_irq_allocation) {
-        spapr_irq_msi_init(spapr, smc->irq->nr_msis);
+        spapr_irq_msi_init(spapr, spapr->irq->nr_msis);
     }
=20
-    smc->irq->init(spapr, errp);
+    spapr->irq->init(spapr, errp);
 }
=20
 int spapr_irq_claim(sPAPRMachineState *spapr, int irq, bool lsi, Error *=
*errp)
 {
-    sPAPRMachineClass *smc =3D SPAPR_MACHINE_GET_CLASS(spapr);
-
-    return smc->irq->claim(spapr, irq, lsi, errp);
+    return spapr->irq->claim(spapr, irq, lsi, errp);
 }
=20
 void spapr_irq_free(sPAPRMachineState *spapr, int irq, int num)
 {
-    sPAPRMachineClass *smc =3D SPAPR_MACHINE_GET_CLASS(spapr);
-
-    smc->irq->free(spapr, irq, num);
+    spapr->irq->free(spapr, irq, num);
 }
=20
 qemu_irq spapr_qirq(sPAPRMachineState *spapr, int irq)
 {
-    sPAPRMachineClass *smc =3D SPAPR_MACHINE_GET_CLASS(spapr);
-
-    return smc->irq->qirq(spapr, irq);
+    return spapr->irq->qirq(spapr, irq);
 }
=20
 int spapr_irq_post_load(sPAPRMachineState *spapr, int version_id)
 {
-    sPAPRMachineClass *smc =3D SPAPR_MACHINE_GET_CLASS(spapr);
-
-    return smc->irq->post_load(spapr, version_id);
+    return spapr->irq->post_load(spapr, version_id);
 }
=20
 void spapr_irq_reset(sPAPRMachineState *spapr, Error **errp)
 {
-    sPAPRMachineClass *smc =3D SPAPR_MACHINE_GET_CLASS(spapr);
-
-    if (smc->irq->reset) {
-        smc->irq->reset(spapr, errp);
+    if (spapr->irq->reset) {
+        spapr->irq->reset(spapr, errp);
     }
 }
=20

