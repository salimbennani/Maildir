Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  12 Dec 2018 19:43:05 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 2997358079D
	for <like.xu@linux.intel.com>; Wed, 12 Dec 2018 01:13:57 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 12 Dec 2018 01:13:56 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3Ax4HMhhMK3zWTluTU28wl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0I/rzrarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZQMhRWSxPDICy?=
 =?us-ascii?q?YYQBAOUOP/pXoYbgqVsWrxawBwahCP7hxzNUmHD2xrY30/gjHAzcwAAsA9wDvX?=
 =?us-ascii?q?TSod7oNKkSS+e1zKzQwDjddfRZxC396InUfR85p/+DQ6p/f8vWyUY1CwPKkE+Q?=
 =?us-ascii?q?opHiMjyJ0uQNvHOW7+l6WuKolmErsQZxoiKgxso1jITCm4Ebykjc+Cln3Io4Js?=
 =?us-ascii?q?e0RFNmbdOnCpdcqS+XOotsTs8/QWxkoCI3xqEctZO4eCUG0okryhreZvCdboSE?=
 =?us-ascii?q?/w7vWeCMKjlinn1lYqiwhxOq/Eig1OL8Us603U5OripEidnMqmsN2wbc6siBV/?=
 =?us-ascii?q?tx5ECh2SyA1wzL6+FEJ147lbbDJpI/3rI9lYAfvVneEiL1gkn6kqGbe0U+9uS1?=
 =?us-ascii?q?6enrerDmqYWdN49whAH+KKMumsmnDOQhLAcOWnWb9f2h27L94032XrFKguQtna?=
 =?us-ascii?q?nerZDaI9gUqbCiAwNS1oYj6hW/ACm83NUXgHkKNFZFeBOBj4j0NFDCOvH4DfGj?=
 =?us-ascii?q?g1uylDdn3ezJPrrkApjWKHjDl7Hhfbl7605B0gYzyspf551MBrEbPP3zQlPxtM?=
 =?us-ascii?q?DfDhIhNwy0wuXnB8tn2oIRRGKCGauZMKLUsV+V6eMjOeiMZIkJuDnjL/gp/eLh?=
 =?us-ascii?q?jXg8mQxVQK+ywJFCaGykBu80ZAKdYGHwmZEHFmEFuBd4S/blz1iLUDpWbnD1WL?=
 =?us-ascii?q?og5zY9E8W/AILeA4ygnrGFjxq9BYBcM2VPC1SQFiXxeoCZHvsBdi+WZ9VsiyEJ?=
 =?us-ascii?q?TqSJTYgn2hez8gjgxO18M+DW9yYE4I/lz8V//ObJlBs/pgBzWuiUzWCBB051lH?=
 =?us-ascii?q?gPQXdi0KlhoEBVxVaJyq9+xfBCEsRZ6vpTFAY2c5fBmb9UEdf3DylAcs2IQ2GC?=
 =?us-ascii?q?T+KJBjgtQ8h5l9QKbG5+EtKuyBfZ0Hz5UPcui7WXCclsoern1H/rKpM4ki6e2Q?=
 =?us-ascii?q?=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0CBAAAG0BBcmBHrdtBkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBVAQBAQsBgTCPVYszgWCYFIFfFBgUhzkiNwYNAQMBAQEBAQECARMBAQEBAQg?=
 =?us-ascii?q?LCwYbDi+CNgUCAxoBBoJcAwMBAiQfCikDAwECBgEBCjQHAwgDATkaBg0IAQEBg?=
 =?us-ascii?q?xyCAgEDAaZEM4VAg2OBDYw8EQaBf4ERJ4JrhGqFcgKJa4YfkH0JkU8GGJFEh3y?=
 =?us-ascii?q?RPYFcgXhNMAiDKIImFxKODIF1A4swgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0CBAAAG0BBcmBHrdtBkHAEBAQQBAQcEAQGBVAQBAQsBgTC?=
 =?us-ascii?q?PVYszgWCYFIFfFBgUhzkiNwYNAQMBAQEBAQECARMBAQEBAQgLCwYbDi+CNgUCA?=
 =?us-ascii?q?xoBBoJcAwMBAiQfCikDAwECBgEBCjQHAwgDATkaBg0IAQEBgxyCAgEDAaZEM4V?=
 =?us-ascii?q?Ag2OBDYw8EQaBf4ERJ4JrhGqFcgKJa4YfkH0JkU8GGJFEh3yRPYFcgXhNMAiDK?=
 =?us-ascii?q?IImFxKODIF1A4swgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,343,1539673200"; 
   d="scan'208";a="55562562"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 12 Dec 2018 01:13:56 -0800
Received: from localhost ([::1]:43289 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gX0aZ-0007yN-DV
	for like.xu@linux.intel.com; Wed, 12 Dec 2018 04:13:55 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:58437)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <clg@kaod.org>) id 1gX0aM-0007yC-MD
	for qemu-devel@nongnu.org; Wed, 12 Dec 2018 04:13:43 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <clg@kaod.org>) id 1gX0aJ-0003uw-H5
	for qemu-devel@nongnu.org; Wed, 12 Dec 2018 04:13:42 -0500
Received: from 2.mo7.mail-out.ovh.net ([87.98.143.68]:33957)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <clg@kaod.org>) id 1gX0aJ-0003u3-9B
	for qemu-devel@nongnu.org; Wed, 12 Dec 2018 04:13:39 -0500
Received: from player714.ha.ovh.net (unknown [10.109.146.168])
	by mo7.mail-out.ovh.net (Postfix) with ESMTP id 49837EFB4F
	for <qemu-devel@nongnu.org>; Wed, 12 Dec 2018 10:13:37 +0100 (CET)
Received: from kaod.org (lfbn-1-10605-110.w90-89.abo.wanadoo.fr
	[90.89.196.110]) (Authenticated sender: postmaster@kaod.org)
	by player714.ha.ovh.net (Postfix) with ESMTPSA id 692F8AF7DA8;
	Wed, 12 Dec 2018 09:13:30 +0000 (UTC)
To: David Gibson <david@gibson.dropbear.id.au>
References: <20181209194610.29727-1-clg@kaod.org>
	<20181209194610.29727-17-clg@kaod.org>
	<20181211020350.GF4261@umbus.fritz.box>
	<771f030d-b69f-78e4-ac0c-9f37e3ab9c17@kaod.org>
	<20181212005418.GG2719@umbus.fritz.box>
From: =?UTF-8?Q?C=c3=a9dric_Le_Goater?= <clg@kaod.org>
Message-ID: <d5a33faf-cd68-861e-e795-d587b1b49bc7@kaod.org>
Date: Wed, 12 Dec 2018 10:13:29 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
	Thunderbird/60.3.1
MIME-Version: 1.0
In-Reply-To: <20181212005418.GG2719@umbus.fritz.box>
Content-Type: text/plain; charset=windows-1252
Content-Language: en-US
Content-Transfer-Encoding: 7bit
X-Ovh-Tracer-Id: 15078333028080782193
X-VR-SPAMSTATE: OK
X-VR-SPAMSCORE: -100
X-VR-SPAMCAUSE: gggruggvucftvghtrhhoucdtuddrgedtkedrudegkedgudeftdcutefuodetggdotefrodftvfcurfhrohhfihhlvgemucfqggfjpdevjffgvefmvefgnecuuegrihhlohhuthemucehtddtnecusecvtfgvtghiphhivghnthhsucdlqddutddtmd
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 87.98.143.68
Subject: Re: [Qemu-devel] [PATCH v7 16/19] spapr: introduce a new sPAPR IRQ
 backend supporting XIVE and XICS
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: qemu-ppc@nongnu.org, qemu-devel@nongnu.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

[ ... ] 


>>>> +
>>>> +static qemu_irq spapr_qirq_dual(sPAPRMachineState *spapr, int irq)
>>>> +{
>>>> +    return spapr_irq_current(spapr)->qirq(spapr, irq);
>>>
>>> Urgh... I don't think this is going to work.  IIRC the various devices
>>> (PHB, VIO, etc.)  are wired up to their qirqs at realize() time, so if
>>> you reboot from a XIVE guest to XICS guest (or maybe the other way
>>> around) the peripherals won't be able to signal irqs in the new
>>> scheme.
>>
>> It does. The IRQ numbers are claimed in both backends.
> 
> Yes, I realize that, but the two backends still have their own set of
> qirqs, which have their own set_irq routines associated with them.
> 
>> This is the problem since the very beginning. For reset and migration
>> to work, we need to keep in sync the IRQ number space of the machine 
>> and the different interrupt controllers.
> 
> Sure, we have the numbers in sync, but that won't help if when the
> peripherals do a qemu_irq_pulse() it goes to the wrong backend's
> trigger routine.

Ah. You mean that the devices could bypass the sPAPR IRQ layer and 
trigger the IRQ directly from the IRQ controller model ? it's not 
the case today. 

I agree that having a common set of qirqs and a qemu_irq handler 
doing the dispatch on the selected interrupt contoller model is 
good idea. I didn't go in that direction because KVM brings additional 
head aches.

Where would put the qirqs ? at the machine level I suppose.

Thanks,

C.    
 
> 
>>
>> C. 
>>
>>
>>> I think instead we need a common set of qirqs, whose set_irq routine
>>> looks at whether to signal XICS or XIVE.  FOr now I think the easiest
>>> approach is to layer those on top of the existing XICS or XIVE
>>> specific qirqs.  Later we might want to remove the (input) qirqs
>>> entirely from the XICS and XIVE subsystems, instead having just
>>> explicit trigger functions.  Then spapr will always supply the qirqs
>>> which call into one or the other.
>>>
>>>> +}
>>>> +
>>>> +static void spapr_irq_print_info_dual(sPAPRMachineState *spapr, Monitor *mon)
>>>> +{
>>>> +    spapr_irq_current(spapr)->print_info(spapr, mon);
>>>> +}
>>>> +
>>>> +static void spapr_irq_dt_populate_dual(sPAPRMachineState *spapr,
>>>> +                                       uint32_t nr_servers, void *fdt,
>>>> +                                       uint32_t phandle)
>>>> +{
>>>> +    spapr_irq_current(spapr)->dt_populate(spapr, nr_servers, fdt, phandle);
>>>> +}
>>>> +
>>>> +static Object *spapr_irq_cpu_intc_create_dual(sPAPRMachineState *spapr,
>>>> +                                              Object *cpu, Error **errp)
>>>> +{
>>>> +    Error *local_err = NULL;
>>>> +
>>>> +    spapr_irq_xive.cpu_intc_create(spapr, cpu, &local_err);
>>>> +    if (local_err) {
>>>> +        error_propagate(errp, local_err);
>>>> +        return NULL;
>>>> +    }
>>>> +
>>>> +    /* Default to XICS interrupt mode */
>>>> +    return spapr_irq_xics.cpu_intc_create(spapr, cpu, errp);
>>>> +}
>>>> +
>>>> +static int spapr_irq_post_load_dual(sPAPRMachineState *spapr, int version_id)
>>>> +{
>>>> +    /*
>>>> +     * Force a reset of the XIVE backend after migration. The machine
>>>> +     * defaults to XICS at startup.
>>>> +     */
>>>> +    if (spapr_ovec_test(spapr->ov5_cas, OV5_XIVE_EXPLOIT)) {
>>>> +        spapr_irq_xive.reset(spapr, &error_fatal);
>>>> +    }
>>>> +
>>>> +    return spapr_irq_current(spapr)->post_load(spapr, version_id);
>>>> +}
>>>> +
>>>> +static void spapr_irq_reset_dual(sPAPRMachineState *spapr, Error **errp)
>>>> +{
>>>> +    /*
>>>> +     * Reset the interrupt mode selected by CAS.
>>>> +     */
>>>> +    spapr_irq_current(spapr)->reset(spapr, errp);
>>>> +}
>>>> +
>>>> +/*
>>>> + * Define values in sync with the XIVE and XICS backend
>>>> + */
>>>> +#define SPAPR_IRQ_DUAL_NR_IRQS     0x2000
>>>> +#define SPAPR_IRQ_DUAL_NR_MSIS     (SPAPR_IRQ_DUAL_NR_IRQS - SPAPR_IRQ_MSI)
>>>> +
>>>> +sPAPRIrq spapr_irq_dual = {
>>>> +    .nr_irqs     = SPAPR_IRQ_DUAL_NR_IRQS,
>>>> +    .nr_msis     = SPAPR_IRQ_DUAL_NR_MSIS,
>>>> +    .ov5         = SPAPR_OV5_XIVE_BOTH,
>>>> +
>>>> +    .init        = spapr_irq_init_dual,
>>>> +    .claim       = spapr_irq_claim_dual,
>>>> +    .free        = spapr_irq_free_dual,
>>>> +    .qirq        = spapr_qirq_dual,
>>>> +    .print_info  = spapr_irq_print_info_dual,
>>>> +    .dt_populate = spapr_irq_dt_populate_dual,
>>>> +    .cpu_intc_create = spapr_irq_cpu_intc_create_dual,
>>>> +    .post_load   = spapr_irq_post_load_dual,
>>>> +    .reset       = spapr_irq_reset_dual,
>>>> +};
>>>> +
>>>>  /*
>>>>   * sPAPR IRQ frontend routines for devices
>>>>   */
>>>
>>
> 


