Return-Path: <virtualization-bounces@lists.linux-foundation.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 08:52:06 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga007.fm.intel.com (fmsmga007.fm.intel.com [10.253.24.52])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id A745358079D
	for <like.xu@linux.intel.com>; Wed, 12 Dec 2018 07:37:25 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by fmsmga007-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 12 Dec 2018 07:37:25 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AM3XXbBThG3dvbefR+0tYuWKut9psv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa67ZByEt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZDI2y?=
 =?us-ascii?q?b5UBAfcCM+ZWoIbyulkBrQO8CAeuC+7j1zFFimPq0qM1yOQuDxrL3BAiEt8UrH?=
 =?us-ascii?q?jYsMn5OLkUXOuozKfI1zLDb/ZO1Dvz74bIcwwuofGWUr1udcra1FQhGxnYhVuO?=
 =?us-ascii?q?sozlPimV1ucMs2id4eZrSOWii2s8qwFtuTWv3NkjhZTJho0P1lDI7zl2wIEwJd?=
 =?us-ascii?q?ChTkNwfNCqEJxVty6ANot2RNsvQ2VpuCY8170HtpC7fC8XyJQh2hHQceCHc4mP?=
 =?us-ascii?q?4hLlTuqRJi14hH1jdbmihBiy6VCtxvDzW8WoylpGsDdJnsTWunwQ1hHe7tKLRu?=
 =?us-ascii?q?Zj8ku5xzqDywTe5vtZLU06i6bXMYMtz70+m5YJr0jOHSn7k1jsgqCMbEUr4O2o?=
 =?us-ascii?q?5vznYrr4op+cMJd5igTkPaQvnsyzG+A4MgkIX2iG9uW82rrj/VD/QLpXlPI2jq?=
 =?us-ascii?q?jZsJfcJcgBoa65GQBV3p4i6xa5ETimzMwVkWQIIV5ZYh6LkZXlN0zULPzlDPqy?=
 =?us-ascii?q?h06gnCp1y/zeO73uGJTNLnzNkLf7erZ97lZRyBQyzdBF+5JUF6sOIPbyWk7wrt?=
 =?us-ascii?q?PYEh45Mwuyw+r+E9p90Z4eWWSTDaCHK6PfqluI5uM0I+mQf48ZojL9K/kj5/7z?=
 =?us-ascii?q?gn41gFEdfa603ZsRdX+3BOhmI0SeYXrqmNsBFn0KvgUmQOzwlFKCSSJTZ2q1X6?=
 =?us-ascii?q?8k4jE7CYGmApnZSoGinbyMxyO7HpxQZmBbBVGAC3bod4OYW/gSbCKeONNukjsB?=
 =?us-ascii?q?Vevpdok6yBv7tBPm06E1aa3Q+zYErtTn1d5o9+PUiBc+/CB1CMLb1HuCCGR9n2?=
 =?us-ascii?q?cNTjlx27hjoEt70RCd0LJknvVcFM5a+/JOVFQHM4XBxbl/AtH2RgWTYNaTVEuv?=
 =?us-ascii?q?RtS0CC0wSdR02dIXfktmB/2mjwvfxGyuArkIh/mFA4Ey/qvA3n/3YcFnxCHdya?=
 =?us-ascii?q?MjglI6F9ZJLnCsnaVl9gLeVLLOxkeYnqClZKUD0SiFoGWCxGyBrUBHXQhYUbjM?=
 =?us-ascii?q?Qn0eIEDRqIKqyFnFSurkLLUsMgJMzYa5bON2cdzzjlRADr+3Pc/CS3i8l2e5GV?=
 =?us-ascii?q?CDwbbaP9miQHkUwCiIUBtMqAsU53vTcFFmXio=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAAD/KRFchwyp04xkGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBgVqBD4EpjBRfizOCDYEhljKBcxQYCwmDeoN?=
 =?us-ascii?q?EIjQJDQEDAQEBAQEBAgETAQEBCgsJCCkjDII2BQIDGgEGglwBAgMBAQEkEwwKH?=
 =?us-ascii?q?AIIAwMDAQIGAQEKGB4EBAgDASMBFRoGEwWDHAGCAQUKpmMziigFjDwRBoF/gRG?=
 =?us-ascii?q?DEoMeAQSBQ4V2AokZhnM3j3QPRgcCAocJhiyEIAIWgVyICwI2hyeOHYsigUaCD?=
 =?us-ascii?q?nAVO4JsgicXfwEJh1WFXSEBATGBI4oTAQMiMIF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0ABAAD/KRFchwyp04xkGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBgVqBD4EpjBRfizOCDYEhljKBcxQYCwmDeoNEIjQJDQEDAQEBA?=
 =?us-ascii?q?QEBAgETAQEBCgsJCCkjDII2BQIDGgEGglwBAgMBAQEkEwwKHAIIAwMDAQIGAQE?=
 =?us-ascii?q?KGB4EBAgDASMBFRoGEwWDHAGCAQUKpmMziigFjDwRBoF/gRGDEoMeAQSBQ4V2A?=
 =?us-ascii?q?okZhnM3j3QPRgcCAocJhiyEIAIWgVyICwI2hyeOHYsigUaCDnAVO4JsgicXfwE?=
 =?us-ascii?q?Jh1WFXSEBATGBI4oTAQMiMIF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,344,1539673200"; 
   d="scan'208";a="56604422"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from mail.linuxfoundation.org ([140.211.169.12])
  by mtab.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 12 Dec 2018 07:37:24 -0800
Received: from mail.linux-foundation.org (localhost [127.0.0.1])
	by mail.linuxfoundation.org (Postfix) with ESMTP id 1C24CF11;
	Wed, 12 Dec 2018 15:37:23 +0000 (UTC)
X-Original-To: virtualization@lists.linux-foundation.org
Delivered-To: virtualization@mail.linuxfoundation.org
Received: from smtp1.linuxfoundation.org (smtp1.linux-foundation.org
	[172.17.192.35])
	by mail.linuxfoundation.org (Postfix) with ESMTPS id 9D048B09
	for <virtualization@lists.linux-foundation.org>;
	Wed, 12 Dec 2018 15:37:21 +0000 (UTC)
X-Greylist: domain auto-whitelisted by SQLgrey-1.7.6
Received: from mx1.redhat.com (mx1.redhat.com [209.132.183.28])
	by smtp1.linuxfoundation.org (Postfix) with ESMTPS id 8A851782
	for <virtualization@lists.linux-foundation.org>;
	Wed, 12 Dec 2018 15:37:20 +0000 (UTC)
Received: from smtp.corp.redhat.com (int-mx01.intmail.prod.int.phx2.redhat.com
	[10.5.11.11])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id D37B985A04;
	Wed, 12 Dec 2018 15:37:19 +0000 (UTC)
Received: from redhat.com (ovpn-122-106.rdu2.redhat.com [10.10.122.106])
	by smtp.corp.redhat.com (Postfix) with SMTP id 0E6786013D;
	Wed, 12 Dec 2018 15:37:11 +0000 (UTC)
Date: Wed, 12 Dec 2018 10:37:11 -0500
From: "Michael S. Tsirkin" <mst@redhat.com>
To: jiangyiwen <jiangyiwen@huawei.com>
Subject: Re: [PATCH v2 2/5] VSOCK: support fill data to mergeable rx buffer
	in host
Message-ID: <20181212103138-mutt-send-email-mst@kernel.org>
References: <5C10D4FB.6070009@huawei.com>
MIME-Version: 1.0
Content-Disposition: inline
In-Reply-To: <5C10D4FB.6070009@huawei.com>
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.11
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.26]);
	Wed, 12 Dec 2018 15:37:19 +0000 (UTC)
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	smtp1.linux-foundation.org
Cc: netdev@vger.kernel.org, kvm@vger.kernel.org,
	Stefan Hajnoczi <stefanha@redhat.com>,
	virtualization@lists.linux-foundation.org
X-BeenThere: virtualization@lists.linux-foundation.org
X-Mailman-Version: 2.1.12
Precedence: list
List-Id: Linux virtualization <virtualization.lists.linux-foundation.org>
List-Unsubscribe: <https://lists.linuxfoundation.org/mailman/options/virtualization>,
	<mailto:virtualization-request@lists.linux-foundation.org?subject=unsubscribe>
List-Archive: <http://lists.linuxfoundation.org/pipermail/virtualization/>
List-Post: <mailto:virtualization@lists.linux-foundation.org>
List-Help: <mailto:virtualization-request@lists.linux-foundation.org?subject=help>
List-Subscribe: <https://lists.linuxfoundation.org/mailman/listinfo/virtualization>,
	<mailto:virtualization-request@lists.linux-foundation.org?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Sender: virtualization-bounces@lists.linux-foundation.org
Errors-To: virtualization-bounces@lists.linux-foundation.org

On Wed, Dec 12, 2018 at 05:29:31PM +0800, jiangyiwen wrote:
> When vhost support VIRTIO_VSOCK_F_MRG_RXBUF feature,
> it will merge big packet into rx vq.
> 
> Signed-off-by: Yiwen Jiang <jiangyiwen@huawei.com>

I feel this approach jumps into making interface changes for
optimizations too quickly. For example, what prevents us
from taking a big buffer, prepending each chunk
with the header and writing it out without
host/guest interface changes?

This should allow optimizations such as vhost_add_used_n
batching.

I realize a header in each packet does have a cost,
but it also has advantages such as improved robustness,
I'd like to see more of an apples to apples comparison
of the performance gain from skipping them.


> ---
>  drivers/vhost/vsock.c             | 111 ++++++++++++++++++++++++++++++--------
>  include/linux/virtio_vsock.h      |   1 +
>  include/uapi/linux/virtio_vsock.h |   5 ++
>  3 files changed, 94 insertions(+), 23 deletions(-)
> 
> diff --git a/drivers/vhost/vsock.c b/drivers/vhost/vsock.c
> index 34bc3ab..dc52b0f 100644
> --- a/drivers/vhost/vsock.c
> +++ b/drivers/vhost/vsock.c
> @@ -22,7 +22,8 @@
>  #define VHOST_VSOCK_DEFAULT_HOST_CID	2
> 
>  enum {
> -	VHOST_VSOCK_FEATURES = VHOST_FEATURES,
> +	VHOST_VSOCK_FEATURES = VHOST_FEATURES |
> +			(1ULL << VIRTIO_VSOCK_F_MRG_RXBUF),
>  };
> 
>  /* Used to track all the vhost_vsock instances on the system. */
> @@ -80,6 +81,69 @@ static struct vhost_vsock *vhost_vsock_get(u32 guest_cid)
>  	return vsock;
>  }
> 
> +/* This segment of codes are copied from drivers/vhost/net.c */
> +static int get_rx_bufs(struct vhost_virtqueue *vq,
> +		struct vring_used_elem *heads, int datalen,
> +		unsigned *iovcount, unsigned int quota)
> +{
> +	unsigned int out, in;
> +	int seg = 0;
> +	int headcount = 0;
> +	unsigned d;
> +	int ret;
> +	/*
> +	 * len is always initialized before use since we are always called with
> +	 * datalen > 0.
> +	 */
> +	u32 uninitialized_var(len);
> +
> +	while (datalen > 0 && headcount < quota) {
> +		if (unlikely(seg >= UIO_MAXIOV)) {
> +			ret = -ENOBUFS;
> +			goto err;
> +		}
> +
> +		ret = vhost_get_vq_desc(vq, vq->iov + seg,
> +				ARRAY_SIZE(vq->iov) - seg, &out,
> +				&in, NULL, NULL);
> +		if (unlikely(ret < 0))
> +			goto err;
> +
> +		d = ret;
> +		if (d == vq->num) {
> +			ret = 0;
> +			goto err;
> +		}
> +
> +		if (unlikely(out || in <= 0)) {
> +			vq_err(vq, "unexpected descriptor format for RX: "
> +					"out %d, in %d\n", out, in);
> +			ret = -EINVAL;
> +			goto err;
> +		}
> +
> +		heads[headcount].id = cpu_to_vhost32(vq, d);
> +		len = iov_length(vq->iov + seg, in);
> +		heads[headcount].len = cpu_to_vhost32(vq, len);
> +		datalen -= len;
> +		++headcount;
> +		seg += in;
> +	}
> +
> +	heads[headcount - 1].len = cpu_to_vhost32(vq, len + datalen);
> +	*iovcount = seg;
> +
> +	/* Detect overrun */
> +	if (unlikely(datalen > 0)) {
> +		ret = UIO_MAXIOV + 1;
> +		goto err;
> +	}
> +	return headcount;
> +err:
> +	vhost_discard_vq_desc(vq, headcount);
> +	return ret;
> +}
> +
>  static void
>  vhost_transport_do_send_pkt(struct vhost_vsock *vsock,
>  			    struct vhost_virtqueue *vq)
> @@ -87,22 +151,34 @@ static struct vhost_vsock *vhost_vsock_get(u32 guest_cid)
>  	struct vhost_virtqueue *tx_vq = &vsock->vqs[VSOCK_VQ_TX];
>  	bool added = false;
>  	bool restart_tx = false;
> +	int mergeable;
> +	size_t vsock_hlen;
> 
>  	mutex_lock(&vq->mutex);
> 
>  	if (!vq->private_data)
>  		goto out;
> 
> +	mergeable = vhost_has_feature(vq, VIRTIO_VSOCK_F_MRG_RXBUF);
> +	/*
> +	 * Guest fill page for rx vq in mergeable case, so it will not
> +	 * allocate pkt structure, we should reserve size of pkt in advance.
> +	 */
> +	if (likely(mergeable))
> +		vsock_hlen = sizeof(struct virtio_vsock_pkt);
> +	else
> +		vsock_hlen = sizeof(struct virtio_vsock_hdr);
> +
>  	/* Avoid further vmexits, we're already processing the virtqueue */
>  	vhost_disable_notify(&vsock->dev, vq);
> 
>  	for (;;) {
>  		struct virtio_vsock_pkt *pkt;
>  		struct iov_iter iov_iter;
> -		unsigned out, in;
> +		unsigned out = 0, in = 0;
>  		size_t nbytes;
>  		size_t len;
> -		int head;
> +		s16 headcount;
> 
>  		spin_lock_bh(&vsock->send_pkt_list_lock);
>  		if (list_empty(&vsock->send_pkt_list)) {
> @@ -116,16 +192,9 @@ static struct vhost_vsock *vhost_vsock_get(u32 guest_cid)
>  		list_del_init(&pkt->list);
>  		spin_unlock_bh(&vsock->send_pkt_list_lock);
> 
> -		head = vhost_get_vq_desc(vq, vq->iov, ARRAY_SIZE(vq->iov),
> -					 &out, &in, NULL, NULL);
> -		if (head < 0) {
> -			spin_lock_bh(&vsock->send_pkt_list_lock);
> -			list_add(&pkt->list, &vsock->send_pkt_list);
> -			spin_unlock_bh(&vsock->send_pkt_list_lock);
> -			break;
> -		}
> -
> -		if (head == vq->num) {
> +		headcount = get_rx_bufs(vq, vq->heads, vsock_hlen + pkt->len,
> +				&in, likely(mergeable) ? UIO_MAXIOV : 1);
> +		if (headcount <= 0) {
>  			spin_lock_bh(&vsock->send_pkt_list_lock);
>  			list_add(&pkt->list, &vsock->send_pkt_list);
>  			spin_unlock_bh(&vsock->send_pkt_list_lock);
> @@ -133,24 +202,20 @@ static struct vhost_vsock *vhost_vsock_get(u32 guest_cid)
>  			/* We cannot finish yet if more buffers snuck in while
>  			 * re-enabling notify.
>  			 */
> -			if (unlikely(vhost_enable_notify(&vsock->dev, vq))) {
> +			if (!headcount && unlikely(vhost_enable_notify(&vsock->dev, vq))) {
>  				vhost_disable_notify(&vsock->dev, vq);
>  				continue;
>  			}
>  			break;
>  		}
> 
> -		if (out) {
> -			virtio_transport_free_pkt(pkt);
> -			vq_err(vq, "Expected 0 output buffers, got %u\n", out);
> -			break;
> -		}
> -
>  		len = iov_length(&vq->iov[out], in);
>  		iov_iter_init(&iov_iter, READ, &vq->iov[out], in, len);
> 
> -		nbytes = copy_to_iter(&pkt->hdr, sizeof(pkt->hdr), &iov_iter);
> -		if (nbytes != sizeof(pkt->hdr)) {
> +		if (likely(mergeable))
> +			pkt->mrg_rxbuf_hdr.num_buffers = cpu_to_le16(headcount);
> +		nbytes = copy_to_iter(&pkt->hdr, vsock_hlen, &iov_iter);
> +		if (nbytes != vsock_hlen) {
>  			virtio_transport_free_pkt(pkt);
>  			vq_err(vq, "Faulted on copying pkt hdr\n");
>  			break;
> @@ -163,7 +228,7 @@ static struct vhost_vsock *vhost_vsock_get(u32 guest_cid)
>  			break;
>  		}
> 
> -		vhost_add_used(vq, head, sizeof(pkt->hdr) + pkt->len);
> +		vhost_add_used_n(vq, vq->heads, headcount);
>  		added = true;
> 
>  		if (pkt->reply) {
> diff --git a/include/linux/virtio_vsock.h b/include/linux/virtio_vsock.h
> index bf84418..da9e1fe 100644
> --- a/include/linux/virtio_vsock.h
> +++ b/include/linux/virtio_vsock.h
> @@ -50,6 +50,7 @@ struct virtio_vsock_sock {
> 
>  struct virtio_vsock_pkt {
>  	struct virtio_vsock_hdr	hdr;
> +	struct virtio_vsock_mrg_rxbuf_hdr mrg_rxbuf_hdr;
>  	struct work_struct work;
>  	struct list_head list;
>  	/* socket refcnt not held, only use for cancellation */
> diff --git a/include/uapi/linux/virtio_vsock.h b/include/uapi/linux/virtio_vsock.h
> index 1d57ed3..2292f30 100644
> --- a/include/uapi/linux/virtio_vsock.h
> +++ b/include/uapi/linux/virtio_vsock.h
> @@ -63,6 +63,11 @@ struct virtio_vsock_hdr {
>  	__le32	fwd_cnt;
>  } __attribute__((packed));
> 
> +/* It add mergeable rx buffers feature */
> +struct virtio_vsock_mrg_rxbuf_hdr {
> +	__le16  num_buffers;    /* number of mergeable rx buffers */
> +} __attribute__((packed));
> +
>  enum virtio_vsock_type {
>  	VIRTIO_VSOCK_TYPE_STREAM = 1,
>  };
> -- 
> 1.8.3.1
> 
_______________________________________________
Virtualization mailing list
Virtualization@lists.linux-foundation.org
https://lists.linuxfoundation.org/mailman/listinfo/virtualization
