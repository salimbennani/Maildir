Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  18 Dec 2018 08:47:59 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 8670F5805CF;
	Mon, 17 Dec 2018 10:16:29 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 17 Dec 2018 10:16:28 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AjFNRuhbdJAFqp7Hqt+DF5w//LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpcizZR7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyJPDIOi?=
 =?us-ascii?q?YYUSDOQBM+lXoJXgqFQMoxS+HhGsCeH0xz9UmnP7x7E23/g7HA3Y2gErAtIAsG?=
 =?us-ascii?q?7TrNXwLKofTOK1zK7SzTXFcvhbxTH955XWfRA7uvGMRrVwcczMwkQoDAzFjFKQ?=
 =?us-ascii?q?qZbjPz+PzOsNtXWU4PR6VeK0kG4nrAdxryOrxsctjInGnJgVylfe+SV+2oY1Ks?=
 =?us-ascii?q?S1RUhmatCnCJtdrz+WO5dyT884Xm1ltjg2xqcbtZO4YCQG0pUqyhzHZ/Cab4SF?=
 =?us-ascii?q?7QjvWPuSLDp7nn5pZbCyiwys/UWjzOD3S9O630xQriVfl9nBrnAN2ALX6siAUv?=
 =?us-ascii?q?Z94Eih1iiV1wzJ6eFLP1o0lazFJJ4l2LIwkYATsUvbEi/3nkX5krOWe1069uS0?=
 =?us-ascii?q?7+nreKjqq5GCO4Nulw3zMbgilta+DOk6KgQOWnKU+eW41L3t5035R7BKg+Uykq?=
 =?us-ascii?q?nYtpDaOMsaqre6AwBLyIYj7QiwDzO/3NQfk3gHKkxKeAicgoj3NFHBPur4Ae28?=
 =?us-ascii?q?g1uyijdrwe7JPrn7DpXKNHjDn6/tfaxh5E5E1Aoz0ddf6opQCrEAI/L8RFX9td?=
 =?us-ascii?q?PFDhIiNwy0wuDnCMhy148EWGKPBLOZP73WsVOS+u0vJOyMbpcPuDnhM/gl++Lu?=
 =?us-ascii?q?jXghlF8dZ6ap3IcXZ2q/Hvh8I0WZfGDjgtEOEWoRugo+TerqiECNUDJJZnayWb?=
 =?us-ascii?q?486S8/CI68EYjDQYWtiqSb3CinBp1WenxGCleUHHfqcIWLRe0AaCGVIs9nlDwE?=
 =?us-ascii?q?UqOsS4sg1RGoqQ/7xKBrLuvS+i0Eq53j0MJ56PHUlRE37TZ0FdiS03mRT2FomW?=
 =?us-ascii?q?MFXyU53Lt/oUx6yVePy7J4jOZaFdFI4/NJUwE6NYPTzuBgCtDyXB7BccmNSFq8?=
 =?us-ascii?q?XtqmBjQxRMorw9ASe0Z9B8mijhfb0iqpGbAVkaaHBJg18q3G2XjxKN1wy3LH1K?=
 =?us-ascii?q?knklknTdFDNWyghq5j6QfTA5TFnFmel6avba4cxjLC9H+fzWqSu0FVSBN/Xr/b?=
 =?us-ascii?q?XX8BfEfWrc725kXZT7CwD7QrNQ9Byc2HKqtOcdDpiVRGRPH+ONXReW6xmmGwBQ?=
 =?us-ascii?q?qWybOIdoblZ2Id3CDFAkgejw8T5WqGNRQ5Biq5vm3RFiJuGkz1b0Ps6+Z+rmi7?=
 =?us-ascii?q?QVEyzwyRa01h1ry1+gMahPCGSvMT2K4EtzklqzluAFm92NfWAcKapwV9ZKVcfc?=
 =?us-ascii?q?894FBf2GLFtgx9O5ugL7xihl8eaQh3o1ni1xJtCoVEkMgqqnwqwRF2KaKZ1lNB?=
 =?us-ascii?q?ajyZ0YrxOr3RNmn94hSvZ7TK1VHZ1dac4r0P5+ggq1X/oAGpEVIv/G9j09ZL3H?=
 =?us-ascii?q?qT+JXLABAJXpLsT0k47R56p7LdYikj/I7U0XxsMa+psj7Nwd4pBe0lygq+cNdb?=
 =?us-ascii?q?Kq+LCAjyE8gCDci0NOMqg0Spbg4DPO1K9K80ItmqeOec1K+qPOZvhjSmjWtc7Y?=
 =?us-ascii?q?B500KM8Td8S+HS05YExfGYwhWIVzPmgFi9tcD3nJhOZSsOEWqn1SjkGIlRa7Vo?=
 =?us-ascii?q?fYYKFWihOde3ych5h5L3XX5X6kSjB1If1MC1YxWSa0Hy0hNK1UQQp3yqgi+4zz?=
 =?us-ascii?q?1ykzE0oauTxi3Ow+L+dBUZPm5HXnVtjVDpIYKsldAVQFCobxQ1lBui/Uv7x6lb?=
 =?us-ascii?q?qL5/LmXJWkdIYi72InpmUquxsLqCfsFO5IkpsSVRTOSzf1SaRqThrBsd1iPpB3?=
 =?us-ascii?q?FeyywjdzG2ppX5mAR3iGCHI3Zpr3rZesZwyQ3E5NPGRv5R3TsGRC9mhjnRHVW8?=
 =?us-ascii?q?O9ip/dOJl5bMqOy+VmShVoFNfinv14+PqCy75WhyCx2lg/+zgsHnERQ90SLj19?=
 =?us-ascii?q?hlTyLIoAz+Yonq0aS3KuZnfkhuBF/h5Mt2AIB+ko0shJ4O3XgWnIma/X0CkW3r?=
 =?us-ascii?q?K9VUxbr+bGYRRT4M29PV4xLq2Ex5InKJ2oL2THOdwsR6atm+Y2MW3D897s9QBK?=
 =?us-ascii?q?eV6rxEgTV6ol6ioQ3NZvh9my8XyeEy534Cn+EJpA0twz2YArATHklXJzbglhqW?=
 =?us-ascii?q?4NClsKVYenyvfqOu20pkktCsF7WCogBaWHbkdZYuBy5w7sNjMF3S1H3/8J3reN?=
 =?us-ascii?q?7VbdgLrB2bjw/Aj/RJKJI2jvcKmS1nOWfnsXwk0eE7iwFu3YqhvIiGMGht+KO5?=
 =?us-ascii?q?AhhFNjz6fc8T+zftjbpAkcaSxYygApJhGjATVpvyUf2oCC4StejgNwuWCzIzsH?=
 =?us-ascii?q?CbGb7CHQOF7EdmsmnCE5SqN3GROXkYws9uRBibJExDng8UWC82kYI+FgCv3Mbh?=
 =?us-ascii?q?alt25igN5l7krRtB0uBoOAP6UmjBvwekcCs0RIKcLBpL7QFC+kHVPtaF7u9oGy?=
 =?us-ascii?q?FY/5uhrBGCK2CBZgRIC30JVVKAB1z5Irau4tzA+fCCBuWiN/vOfamOqetGWvaI?=
 =?us-ascii?q?wpKvz5Jm/yuWOcWJJHViFPo72kxMXX1iH8TZmjMPSzEYli7Xbs6bogu89TNzrs?=
 =?us-ascii?q?yl7PvrXwfv75OVC7ROKdVv5wy2gaCbOu6Qmil5KDVY1pANxXPSy7gfxlkSiy5w?=
 =?us-ascii?q?eDm3DLQArjXATKbRmq9REh4aZDl/NMpO76IgwAZNPdTXhc/y1r59lvQ1EUtKVU?=
 =?us-ascii?q?T9msG1YswHO3uyNE7cC0aRKruHJSfHw8X2Ya6nTb1QjeNUtwC/uDqBEk/jOCiD?=
 =?us-ascii?q?mCftVxy1Le5MiySbNgREuI6hahZtFXTjTNX+Zx2nMd93iCc6zqEuinzWNW4TLz?=
 =?us-ascii?q?58flhJrr2R6yNYn/p+F3ZA7npjMemLhSKZ4/PEJZYRtPthGj50mP5C4HQm17tV?=
 =?us-ascii?q?6zlJRfxvlyvUq95uolemnfGOyzpnShVOrDlLiZmPvUVjP6XZ65ZBVWzF/BIL8W?=
 =?us-ascii?q?WfFRAKq8F5Bd3ovqADguTIwZ7zKTpY6cOcx8YQBs7bYJabMHssKwD4XiTZAAoD?=
 =?us-ascii?q?QhakMGjegwpWl/TEpVOPqZ1vgJrrgpxGY7lXWUYuDfQcQhBvHtsYJtF+WD8pi6?=
 =?us-ascii?q?WAi8gg4Xu4pQPWAsJAscaUBbqpHfzzJWPB3vF/bBwSzOa9dNxLOw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AFAABP5xdch0O0hNFjGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUgQBAQEBCwEBg2onjHSLGIINFI18iUiBcxIBARgTAYdWIjUIDQE?=
 =?us-ascii?q?DAQEBAQEBAgETAQEBCgsJCCkjDEIWAYFdJAGCYQEBAQECAQECNwYBATcBBAEJA?=
 =?us-ascii?q?QEKFQwlAwwFIAEFAQEhEwWDHYF5CAWccTyKIIIfgnYBAQWHHQgSEIsAgRyBVz+?=
 =?us-ascii?q?DbjWBVIMLg1uCJos4hRWQTgcCgiQEjycjColph1+DCpYzBgIJBw8hgSYBggxNM?=
 =?us-ascii?q?IMvghsMF4hehWAfMoECAwEBAwEdEwsBiBeCWoI+AQE?=
X-IPAS-Result: =?us-ascii?q?A0AFAABP5xdch0O0hNFjGgEBAQEBAgEBAQEHAgEBAQGBUgQ?=
 =?us-ascii?q?BAQEBCwEBg2onjHSLGIINFI18iUiBcxIBARgTAYdWIjUIDQEDAQEBAQEBAgETA?=
 =?us-ascii?q?QEBCgsJCCkjDEIWAYFdJAGCYQEBAQECAQECNwYBATcBBAEJAQEKFQwlAwwFIAE?=
 =?us-ascii?q?FAQEhEwWDHYF5CAWccTyKIIIfgnYBAQWHHQgSEIsAgRyBVz+DbjWBVIMLg1uCJ?=
 =?us-ascii?q?os4hRWQTgcCgiQEjycjColph1+DCpYzBgIJBw8hgSYBggxNMIMvghsMF4hehWA?=
 =?us-ascii?q?fMoECAwEBAwEdEwsBiBeCWoI+AQE?=
X-IronPort-AV: E=Sophos;i="5.56,366,1539673200"; 
   d="scan'208";a="45320891"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 17 Dec 2018 10:15:48 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1733307AbeLQSPq (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 17 Dec 2018 13:15:46 -0500
Received: from mail-pg1-f194.google.com ([209.85.215.194]:37520 "EHLO
        mail-pg1-f194.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727597AbeLQSPp (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 17 Dec 2018 13:15:45 -0500
Received: by mail-pg1-f194.google.com with SMTP id c25so4991911pgb.4
        for <linux-kernel@vger.kernel.org>; Mon, 17 Dec 2018 10:15:44 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=og8Wglg/epenP0vUaoDaHpm/GgULb0XrG6CiyNfFsw8=;
        b=CqRwdMOi3FTGPV8digQwTckVl+iQKi95bj/38WqLqyx5TAgcbc3KYk9j8OqWK3L0kK
         441PC+QMhCld2Cu46N9MCq2abk9xxyCKOO6ANQUxtJTe5mc9CjgFw7dve/wXTS9o4drm
         vtAwnuQO56PbSsNsWrC7u2YlR6THHSaVT5nUw=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:message-id:references
         :mime-version:content-disposition:in-reply-to:user-agent;
        bh=og8Wglg/epenP0vUaoDaHpm/GgULb0XrG6CiyNfFsw8=;
        b=ObiBuDeoXRXBbkAIg1t2gcZNVc7grh4JIeqH8xrxspx8p1++DRdzBRQLGSwtC9iuq1
         Ol8cRT5GOBepko11yCRa9u+LlRsXEFvoCXDpck/GHidzo/ui2kcieuGfWF9TZEiXyoTS
         YSJmjsP02zElxev0Mh275usl7NVpLpUVw80QSC5thTiGpZkAgNL2h6pNiUFboCLJt5+v
         EQrr4ZeSl5PYAVyPP39q5VeZOwBuu2Ilx5y1G0hE9AnDwOZHf93w7ZTY7ZC6sZx1KzeS
         MGVmfOYPuq7i5mrhNlXa++iRmkFSVTwzo/RelxmSjXwueenDD/s8rsm0z2IjKuwj64/D
         YGrA==
X-Gm-Message-State: AA+aEWbR50uDzRnETT8ApY11QeoQjvd0FD7Xzfe2JbjAz/B9GlAjT23h
        p72GAP7JAJiTmFs6xnZTXk0/Qw==
X-Google-Smtp-Source: AFSGD/VEob1yLIEfHiOO9uf3rnKAEVvnoiDpvrGP0cYIoBq/a83twp+OQwF08oDpvgb23ffgyHcjIQ==
X-Received: by 2002:a65:500c:: with SMTP id f12mr12338572pgo.226.1545070544172;
        Mon, 17 Dec 2018 10:15:44 -0800 (PST)
Received: from minitux (104-188-17-28.lightspeed.sndgca.sbcglobal.net. [104.188.17.28])
        by smtp.gmail.com with ESMTPSA id x3sm42603674pgt.45.2018.12.17.10.15.41
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Mon, 17 Dec 2018 10:15:43 -0800 (PST)
Date: Mon, 17 Dec 2018 10:15:40 -0800
From: Bjorn Andersson <bjorn.andersson@linaro.org>
To: Thierry Reding <thierry.reding@gmail.com>
Cc: Jassi Brar <jassisinghbrar@gmail.com>,
        linux-kernel@vger.kernel.org, Andy Gospodarek <gospo@broadcom.com>,
        Anup Patel <anup.patel@broadcom.com>,
        Caesar Wang <wxt@rock-chips.com>, CK Hu <ck.hu@mediatek.com>,
        Dong Aisheng <aisheng.dong@nxp.com>, Duc Dang <dhdang@apm.com>,
        Eric Anholt <eric@anholt.net>,
        Fabien Dessenne <fabien.dessenne@st.com>,
        Feng Kan <fkan@apm.com>,
        Florian Fainelli <f.fainelli@gmail.com>,
        Georgi Djakov <georgi.djakov@linaro.org>,
        Houlong Wei <houlong.wei@mediatek.com>,
        HS Liao <hs.liao@mediatek.com>,
        Jon Mason <jon.mason@broadcom.com>,
        Kaihua Zhong <zhongkaihua@huawei.com>,
        Kevin Wangtao <kevin.wangtao@hisilicon.com>,
        Lee Jones <lee.jones@linaro.org>, Leo Yan <leo.yan@linaro.org>,
        Ley Foon Tan <lftan@altera.com>,
        Ludovic Barre <ludovic.barre@st.com>,
        Neil Armstrong <narmstrong@baylibre.com>,
        Nishanth Menon <nm@ti.com>,
        Oleksij Rempel <o.rempel@pengutronix.de>,
        Ray Jui <ray.jui@broadcom.com>,
        Rob Rice <rob.rice@broadcom.com>,
        Ruyi Wang <wangruyi@huawei.com>,
        Scott Branden <scott.branden@broadcom.com>,
        Sibi Sankar <sibis@codeaurora.org>,
        Stefan Wahren <stefan.wahren@i2se.com>,
        Steve Lin <steven.lin1@broadcom.com>,
        Sudeep Holla <sudeep.holla@arm.com>,
        Suman Anna <s-anna@ti.com>, Tony Lindgren <tony@atomide.com>,
        Vikram Prakash <vikram.prakash@broadcom.com>,
        Vladimir Zapolskiy <vz@mleia.com>
Subject: Re: [PATCH v2 01/19] mailbox: Add device-managed registration
 functions
Message-ID: <20181217181540.GC12886@minitux>
References: <20181217150217.32435-1-thierry.reding@gmail.com>
 <20181217150217.32435-2-thierry.reding@gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181217150217.32435-2-thierry.reding@gmail.com>
User-Agent: Mutt/1.10.1 (2018-07-13)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Mon 17 Dec 07:01 PST 2018, Thierry Reding wrote:

> From: Thierry Reding <treding@nvidia.com>
> 
> Add device-managed equivalents of the mbox_controller_register() and
> mbox_controller_unregister() functions that can be used to have the
> devres infrastructure automatically unregister mailbox controllers on
> driver probe failure or driver removal. This can help remove a lot of
> boiler plate code from drivers.
> 

Reviewed-by: Bjorn Andersson <bjorn.andersson@linaro.org>

Regards,
Bjorn

> Signed-off-by: Thierry Reding <treding@nvidia.com>
> ---
>  drivers/mailbox/mailbox.c          | 70 ++++++++++++++++++++++++++++++
>  include/linux/mailbox_controller.h |  5 +++
>  2 files changed, 75 insertions(+)
> 
> diff --git a/drivers/mailbox/mailbox.c b/drivers/mailbox/mailbox.c
> index 674b35f402f5..eb781e2b19cb 100644
> --- a/drivers/mailbox/mailbox.c
> +++ b/drivers/mailbox/mailbox.c
> @@ -515,3 +515,73 @@ void mbox_controller_unregister(struct mbox_controller *mbox)
>  	mutex_unlock(&con_mutex);
>  }
>  EXPORT_SYMBOL_GPL(mbox_controller_unregister);
> +
> +static void __devm_mbox_controller_unregister(struct device *dev, void *res)
> +{
> +	struct mbox_controller *mbox = res;
> +
> +	mbox_controller_unregister(mbox);
> +}
> +
> +static int devm_mbox_controller_match(struct device *dev, void *res, void *data)
> +{
> +	struct mbox_controller **mbox = res;
> +
> +	if (WARN_ON(!mbox || !*mbox))
> +		return 0;
> +
> +	return *mbox == data;
> +}
> +
> +/**
> + * devm_mbox_controller_register() - managed mbox_controller_register()
> + * @dev: device owning the mailbox controller being registered
> + * @mbox: mailbox controller being registered
> + *
> + * This function adds a device-managed resource that will make sure that the
> + * mailbox controller, which is registered using mbox_controller_register()
> + * as part of this function, will be unregistered along with the rest of
> + * device-managed resources upon driver probe failure or driver removal.
> + *
> + * Returns 0 on success or a negative error code on failure.
> + */
> +int devm_mbox_controller_register(struct device *dev,
> +				  struct mbox_controller *mbox)
> +{
> +	struct mbox_controller **ptr;
> +	int err;
> +
> +	ptr = devres_alloc(__devm_mbox_controller_unregister, sizeof(*ptr),
> +			   GFP_KERNEL);
> +	if (!ptr)
> +		return -ENOMEM;
> +
> +	err = mbox_controller_register(mbox);
> +	if (err < 0) {
> +		devres_free(ptr);
> +		return err;
> +	}
> +
> +	devres_add(dev, ptr);
> +	*ptr = mbox;
> +
> +	return 0;
> +}
> +EXPORT_SYMBOL_GPL(devm_mbox_controller_register);
> +
> +/**
> + * devm_mbox_controller_unregister() - managed mbox_controller_unregister()
> + * @dev: device owning the mailbox controller being unregistered
> + * @mbox: mailbox controller being unregistered
> + *
> + * This function unregisters the mailbox controller and removes the device-
> + * managed resource that was set up to automatically unregister the mailbox
> + * controller on driver probe failure or driver removal. It's typically not
> + * necessary to call this function.
> + */
> +void devm_mbox_controller_unregister(struct device *dev, struct mbox_controller *mbox)
> +{
> +	WARN_ON(devres_release(dev, __devm_mbox_controller_unregister,
> +			       devm_mbox_controller_match, mbox));
> +}
> +EXPORT_SYMBOL_GPL(devm_mbox_controller_unregister);
> diff --git a/include/linux/mailbox_controller.h b/include/linux/mailbox_controller.h
> index 74deadb42d76..9b0b21207345 100644
> --- a/include/linux/mailbox_controller.h
> +++ b/include/linux/mailbox_controller.h
> @@ -131,4 +131,9 @@ void mbox_controller_unregister(struct mbox_controller *mbox); /* can sleep */
>  void mbox_chan_received_data(struct mbox_chan *chan, void *data); /* atomic */
>  void mbox_chan_txdone(struct mbox_chan *chan, int r); /* atomic */
>  
> +int devm_mbox_controller_register(struct device *dev,
> +				  struct mbox_controller *mbox);
> +void devm_mbox_controller_unregister(struct device *dev,
> +				     struct mbox_controller *mbox);
> +
>  #endif /* __MAILBOX_CONTROLLER_H */
> -- 
> 2.19.1
> 
