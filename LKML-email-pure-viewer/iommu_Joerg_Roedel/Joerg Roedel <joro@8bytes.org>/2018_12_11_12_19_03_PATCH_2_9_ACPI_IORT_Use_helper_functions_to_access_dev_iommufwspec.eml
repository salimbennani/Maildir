Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 11 Dec 2018 20:16:58 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 64FD5580380;
	Tue, 11 Dec 2018 04:19:28 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 11 Dec 2018 04:19:27 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AO1YBgR/ynbATwP9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1+kQIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CRWRPQNtfWSJCDI27?=
 =?us-ascii?q?bYQPAfEBPf5aooTmu1cCsQGzCRW2Ce/z1jNFgGL9060g0+QmFAHLxAguH9UQv3?=
 =?us-ascii?q?TOo9X+KbscUeerw6bV0zrDa+5d1DD/6IjPaBAhpuqBULFrfsvR1UkgCRjFgk+X?=
 =?us-ascii?q?qYz/MDOYz+IAuHWY4ep4Te+jlXIrpgVrrjSyyMoglJPFip8Wx1zY7yl0wYQ4Kc?=
 =?us-ascii?q?W7RUJme9KoDZpduiWAO4doTc4uXntktDg1x7AEv5OwYTIEx449xxHFbvyKa4iI?=
 =?us-ascii?q?7QznVOaWOTp4mn1ld6ylhxqo8kiv1Pf8Vs+q31ZOtCZFlcPMtn8V2xzS7MiIVO?=
 =?us-ascii?q?d981+/1TqT0w3f8PxILE4qmabBNpIswaI8moASvEnBBiP2nV/5jK6SdkUq4Oio?=
 =?us-ascii?q?7OHnb63ipp+dMY90lw7/Pr0tmsOhG+Q4NBYBX2yC9eS72rzj+1P2QK9Rg/0ona?=
 =?us-ascii?q?nWroraKd4YpqGnGQ9V1Jgs6xKlAzehytQYkmELLEhZdxKfk4jpJ1bOLej8Dfe+?=
 =?us-ascii?q?gFSjji1nxv/bPrD6BpXNL37DkKrufLpn6k5czhYzws5b555OFr4BJ/fzUFfrtN?=
 =?us-ascii?q?PEFh85LxC0w+H/BdV9zIweWH6PDbWeMK/IsV+I+/ggI++DZIIOvDb9Kv4l5+Ph?=
 =?us-ascii?q?jHMjmF8de7Wp0oUTaHyiAvtmJECZa2L2gtgdCWcKohY+TOvyhV2AVj5ceWy+X6?=
 =?us-ascii?q?E75jE9DoKmCpzORoSsgLyHwSe6EYdaZmFAClCQD3joc5+IVOsLaCKXOsVhiCAL?=
 =?us-ascii?q?VaC9S4890hGjrBX1y6FnLurT+S0Ur4jj28J35+DIkREy9Dp0D9mS0m2XTmF0mH?=
 =?us-ascii?q?8ISCEy3KxlvUN9zVKD27Big/NEDdxT++9JUgAiOJ7f1eN6Dcr+WgbAftiTTlam?=
 =?us-ascii?q?Tc6rATUwTtI33t8PbFxxG9SkjhDfwSWqB6UZmKCMBJwx6qjcxWT+J95hy3ba06?=
 =?us-ascii?q?ksl0QpTdFRNWK4nKJ/9xLcB4jSk0qHkaamcqAc3C3I9GeH1meOuEBYUAhtUaTK?=
 =?us-ascii?q?R3wfZ03Wrcjn6UPGVbOhFbMnMg5Zw86YNqRKcsHpjUlBRPr7JdvReXyxlHmqCR?=
 =?us-ascii?q?aI3LyMapHqdHsb3CjGDEgEkgYT/WuJNAQkByehpX7eAyJqFV71f0zs9ux+omuh?=
 =?us-ascii?q?TkAo1wGKc1Fh172t9x4JhPycTvQT3q4EuCYhsTl0AEyx39XMC9qEpgpheqpcbM?=
 =?us-ascii?q?g54FdG02LZqgN8MoahL6Bkml4RbQB3s1ny2BVwD4VKidIqo28yzApuNaKY10tM?=
 =?us-ascii?q?eCmc3Z/uNbzYNGnz8Aq0ZK7Lx17RytCW+qQI6PQmsFjjuACpFkw/83RoydVV0n?=
 =?us-ascii?q?2c5onUAwoWS57+TkE39x1irbHAfiY9/5/U1WFrMaSssj7CxsglC/c/xhehf9dQ?=
 =?us-ascii?q?KqWEFADpHs0eBsiuLvEqmlezYhIFOuBS6LA7P8e8e/Sa366rOf5qnCi6gmRf/I?=
 =?us-ascii?q?B9zkWM+jJmSu7Jw5kK2euY0RaAVzvmileurNr3mYFdaT4OBGW/zTXrC5BLZq11?=
 =?us-ascii?q?e4YGEmOuI8yxxtVjiJ/hQX9Y9Fi/B1wY3M+lYwadb1v43QdIz0QYvWSnmTekzz?=
 =?us-ascii?q?xzizworquf0DbOwuj4bxoHJ2hLSXJmjVftJ4i0kt8bUFKpbwgviBuq+0L6y7JH?=
 =?us-ascii?q?q6R4KmnZWV1IcDTuL2F+TquwsaKPY8xV55MysiVXU+O8bUqBSrHnoBsa0CLjH2?=
 =?us-ascii?q?1AyzA9bDyqvpT5nxpniGOSNnpzrXzZed1uyhfb/tDTWflR3j8eTililTbXHkS8?=
 =?us-ascii?q?P8Wu/diMl5bMqOe+W3ijVp1Sdynm1oeAtCq95W13DhyzhfGzmtv7EQck1S/3zc?=
 =?us-ascii?q?VlVSLNrBzkeInky7y6Mf57fklvHFL86NB1GoBknoswmZEfw34ahpqO8HoDkGfz?=
 =?us-ascii?q?N8hb2K3kYHoMQz4L38Da4Az/1EJ/KXKJwprzVm+Bzct5e9m6fmQW1zo478BLC6?=
 =?us-ascii?q?eb9qZInCVrrVqjsQLef+J9kSwDxvs0534XmOUJuAsrziWADbEeB0hYPSrwlxuW?=
 =?us-ascii?q?69CytrlYZGGqcbKozkpxgcihDK2eogFbQHv5ZpAiHSpq4sR+Kl3M1mDz6pr/eN?=
 =?us-ascii?q?nRdt8TshyUkxHdj+laMp4xl/wKhTZ5NmL5p3Eq1+k7jRl215GgoIeHM3lt/L6+?=
 =?us-ascii?q?AhNALTL6fcQT+jXwjapEmsaWwpuiHpFgGjUNQZvpQuikEDMUtfT7KQmOFCcwpW?=
 =?us-ascii?q?ucGbraBQWf8ltpr2rTE5C3MHGaPHsZws9nRBaDP0xTmhwUUC85np4kFQCq2crh?=
 =?us-ascii?q?f11i5j0K4l74qx1Myv9nNhXlU2ffohuoZSkwSJSFMBVW6QRC7V/PMcOC9uJzAz?=
 =?us-ascii?q?1Y/pq5oQ2NLWybeh1IDXwTVUyCHVzjJb6u5d/P8+WDAuq+Lv3OYaiBqOBEVveI?=
 =?us-ascii?q?w46v3ZVi/zqWKsqPOXxiBeUh2kVfRXB5B9jZmzIXRiwXiS3Nbs2bpBS9+iFtrc?=
 =?us-ascii?q?C/6vPrWA3x6ouVFrtSKs5i+xS3gaeFKu6Rizx1KTde1pMQ23DIzKIT00IViyFr?=
 =?us-ascii?q?bzOtC6gPtTbRTKLMna9aFwQUaz5oO8tS8a093hNBOcrait7u0r54j/g1C0pKVF?=
 =?us-ascii?q?D7m8GpY9AKLH+5NF/dGEmLM7GGLyXRw87reaO8VaFQjOJMuh2suDabFlXvMSiZ?=
 =?us-ascii?q?mzb1VxCgL+dMgTqfPBxfvoG9bxlsBXLiTNLgdh20Ltt3gScqzr0zg3PALXQcPi?=
 =?us-ascii?q?Rkc0NRsr2Q6jtVg/VlFGxH63plLO+ElD6Y7unYMJkWt/RrDz9wl+Jb5nQ61rRU?=
 =?us-ascii?q?4DtFRPxzhCvdsNpur0u6nemIzzo0GCZJ/zdMgYeWlUFjIrnCsJ1BX2vUuRwK8G?=
 =?us-ascii?q?OcAggLoN0jDcfg6I5Kzd2atqX+MjgKydXZ8cYYT5zWL9iAGCorIAbkA3jTFgRT?=
 =?us-ascii?q?Hm3jDn3Wm0EIyKLazXaStJVv78G0wJc=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AaAACYqg9ch0O0hNFlHgEGBwaBUQkLA?=
 =?us-ascii?q?YNrJ5gkgg0UiQ2OMYFzLBMBh3kiNAkNAQMBAQEBAQECARMBAQEIDQkIKS+CNiQ?=
 =?us-ascii?q?BgmIDAwECJFIGCQEBHx8SAykrGQWDHIF1DQQBphwzii2HfIQ/F4FAP4ERjW4Ci?=
 =?us-ascii?q?yuVUAmKRYcBCxiRQCyaTYIOMxoIKAiDJ5BcPjOBBQEBimEBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AaAACYqg9ch0O0hNFlHgEGBwaBUQkLAYNrJ5gkgg0UiQ2?=
 =?us-ascii?q?OMYFzLBMBh3kiNAkNAQMBAQEBAQECARMBAQEIDQkIKS+CNiQBgmIDAwECJFIGC?=
 =?us-ascii?q?QEBHx8SAykrGQWDHIF1DQQBphwzii2HfIQ/F4FAP4ERjW4CiyuVUAmKRYcBCxi?=
 =?us-ascii?q?RQCyaTYIOMxoIKAiDJ5BcPjOBBQEBimEBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,342,1539673200"; 
   d="scan'208";a="44458754"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 11 Dec 2018 04:19:25 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726479AbeLKMTY (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 11 Dec 2018 07:19:24 -0500
Received: from 8bytes.org ([81.169.241.247]:53110 "EHLO theia.8bytes.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726335AbeLKMTP (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 11 Dec 2018 07:19:15 -0500
Received: by theia.8bytes.org (Postfix, from userid 1000)
        id 5BF923AF; Tue, 11 Dec 2018 13:19:12 +0100 (CET)
From: Joerg Roedel <joro@8bytes.org>
To: iommu@lists.linux-foundation.org
Cc: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>,
        Hanjun Guo <hanjun.guo@linaro.org>,
        Sudeep Holla <sudeep.holla@arm.com>,
        Will Deacon <will.deacon@arm.com>,
        Robin Murphy <robin.murphy@arm.com>,
        Joerg Roedel <joro@8bytes.org>,
        Matthias Brugger <matthias.bgg@gmail.com>,
        Rob Clark <robdclark@gmail.com>,
        Thierry Reding <thierry.reding@gmail.com>,
        linux-kernel@vger.kernel.org, Joerg Roedel <jroedel@suse.de>
Subject: [PATCH 2/9] ACPI/IORT: Use helper functions to access dev->iommu_fwspec
Date: Tue, 11 Dec 2018 13:19:03 +0100
Message-Id: <20181211121910.5604-3-joro@8bytes.org>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20181211121910.5604-1-joro@8bytes.org>
References: <20181211121910.5604-1-joro@8bytes.org>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From: Joerg Roedel <jroedel@suse.de>

Use the new helpers dev_iommu_fwspec_get()/set() to access
the dev->iommu_fwspec pointer. This makes it easier to move
that pointer later into another struct.

Cc: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
Signed-off-by: Joerg Roedel <jroedel@suse.de>
---
 drivers/acpi/arm64/iort.c | 19 ++++++++++---------
 1 file changed, 10 insertions(+), 9 deletions(-)

diff --git a/drivers/acpi/arm64/iort.c b/drivers/acpi/arm64/iort.c
index 70f4e80b9246..736381673638 100644
--- a/drivers/acpi/arm64/iort.c
+++ b/drivers/acpi/arm64/iort.c
@@ -779,7 +779,7 @@ static inline bool iort_iommu_driver_enabled(u8 type)
 static struct acpi_iort_node *iort_get_msi_resv_iommu(struct device *dev)
 {
 	struct acpi_iort_node *iommu;
-	struct iommu_fwspec *fwspec = dev->iommu_fwspec;
+	struct iommu_fwspec *fwspec = dev_iommu_fwspec_get(dev);
 
 	iommu = iort_get_iort_node(fwspec->iommu_fwnode);
 
@@ -794,9 +794,10 @@ static struct acpi_iort_node *iort_get_msi_resv_iommu(struct device *dev)
 	return NULL;
 }
 
-static inline const struct iommu_ops *iort_fwspec_iommu_ops(
-				struct iommu_fwspec *fwspec)
+static inline const struct iommu_ops *iort_fwspec_iommu_ops(struct device *dev)
 {
+	struct iommu_fwspec *fwspec = dev_iommu_fwspec_get(dev);
+
 	return (fwspec && fwspec->ops) ? fwspec->ops : NULL;
 }
 
@@ -824,6 +825,7 @@ static inline int iort_add_device_replay(const struct iommu_ops *ops,
  */
 int iort_iommu_msi_get_resv_regions(struct device *dev, struct list_head *head)
 {
+	struct iommu_fwspec *fwspec = dev_iommu_fwspec_get(dev);
 	struct acpi_iort_its_group *its;
 	struct acpi_iort_node *iommu_node, *its_node = NULL;
 	int i, resv = 0;
@@ -841,9 +843,9 @@ int iort_iommu_msi_get_resv_regions(struct device *dev, struct list_head *head)
 	 * a given PCI or named component may map IDs to.
 	 */
 
-	for (i = 0; i < dev->iommu_fwspec->num_ids; i++) {
+	for (i = 0; i < fwspec->num_ids; i++) {
 		its_node = iort_node_map_id(iommu_node,
-					dev->iommu_fwspec->ids[i],
+					fwspec->ids[i],
 					NULL, IORT_MSI_TYPE);
 		if (its_node)
 			break;
@@ -874,8 +876,7 @@ int iort_iommu_msi_get_resv_regions(struct device *dev, struct list_head *head)
 	return (resv == its->its_count) ? resv : -ENODEV;
 }
 #else
-static inline const struct iommu_ops *iort_fwspec_iommu_ops(
-				struct iommu_fwspec *fwspec)
+static inline const struct iommu_ops *iort_fwspec_iommu_ops(struct device *dev);
 { return NULL; }
 static inline int iort_add_device_replay(const struct iommu_ops *ops,
 					 struct device *dev)
@@ -1045,7 +1046,7 @@ const struct iommu_ops *iort_iommu_configure(struct device *dev)
 	 * If we already translated the fwspec there
 	 * is nothing left to do, return the iommu_ops.
 	 */
-	ops = iort_fwspec_iommu_ops(dev->iommu_fwspec);
+	ops = iort_fwspec_iommu_ops(dev);
 	if (ops)
 		return ops;
 
@@ -1084,7 +1085,7 @@ const struct iommu_ops *iort_iommu_configure(struct device *dev)
 	 * add_device callback for dev, replay it to get things in order.
 	 */
 	if (!err) {
-		ops = iort_fwspec_iommu_ops(dev->iommu_fwspec);
+		ops = iort_fwspec_iommu_ops(dev);
 		err = iort_add_device_replay(ops, dev);
 	}
 
-- 
2.17.1

