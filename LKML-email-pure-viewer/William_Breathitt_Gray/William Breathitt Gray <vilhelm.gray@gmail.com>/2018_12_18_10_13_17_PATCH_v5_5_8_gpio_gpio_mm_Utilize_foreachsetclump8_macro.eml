Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  18 Dec 2018 21:09:05 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 413E05805AD;
	Tue, 18 Dec 2018 02:12:58 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga004-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 18 Dec 2018 02:12:58 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ABNYn1BAJDnOs9KxCyf8TUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7/rsywAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VDK/5KlpVRDokj?=
 =?us-ascii?q?8KOT4n/m/KhMJ+j6VVrxCvpxNwzIDUe5mVOfhlc6/Bft4XX3ZNU9xNWyBdBI63?=
 =?us-ascii?q?cosBD/AGPeZdt4Typ1oOrR+6BQmtHuzvzyJDi2Ls3aIkyeshDQHG3A08H9ISrX?=
 =?us-ascii?q?/arc/1O70SUOuoy6TI0zTDb/dW2Tjj7IjIdwotof6WXb1qccvc0kYvFwbfgVWR?=
 =?us-ascii?q?rYzpJS+a1uMIs2WC6edrSOGhi3Y/pg1vvjSiwt0ghpTHi44L0FzI6CZ0zJovKd?=
 =?us-ascii?q?C5SkN3ecCoHIdMuy2HMoZ6XMIvTmJttSkm1rEJo562cS0Rx5kn2RHSb/mKfoaU?=
 =?us-ascii?q?7R/hUOucJCl3iGxkdb2hghu96kagx+L8W8Sxy1lHqipIn9fKu3sQzRLc8NKHRe?=
 =?us-ascii?q?F4/kq52TaAyQTT6uZcLEAqmqrUNYQhzqQzlpUNq0TDGDH5mEHsgK+RbEUk9fCk?=
 =?us-ascii?q?6+XhYrr4up+RL5F4hh36P6g0h8CyD/o0PhITU2WY5eiwzrzu8E/hTLVPlPI2k6?=
 =?us-ascii?q?3ZsJ7AJcQco660GwtV0ocl6xaiADaqydcYkmcdLFJDZh2Hi5HlO1bAIfD+E/i/?=
 =?us-ascii?q?mU+hkClkx//YJL3tGJbNIWbZkLfnY7l971RQyA0pzdBQ/55UEK0OIOrvWk/ts9?=
 =?us-ascii?q?zVFhs5Mw23w+n5Etl82Z4eVHmLAq+YNqPSrFCJ6vguI+mKeI8apjL9J+I56P7p?=
 =?us-ascii?q?iH8zgUUdcrWx3ZsLdHC4GexrI0WDbnrtntcOC2AKshA+TOz3klKCVzFTam22X6?=
 =?us-ascii?q?I94DE7FY2nAZ3CRoCrnLyOwiO7EodKaWBBD1CGCW3oeJmcW/cQdCKSJddskj4D?=
 =?us-ascii?q?Vbe/UYMh1hautAn8y7pgNefU/iwYtZT+1Nl6/eHTlBcy9SBqAMSZyW2CU2Z0nm?=
 =?us-ascii?q?YQTT8swK9/uVB9ykuE0aVgmfNYDtxT5/RKUgsgL57T1e56Bsv2WgLAeNeJVVmn?=
 =?us-ascii?q?Ts+nATE3UtI+3dsOb1xhFNWlixDJxzCqDKMNl7yXGJw09brR33vrKMZ70XrG0K?=
 =?us-ascii?q?ghgEMgQstALmCmgq9/9w7OB4/GiUmZlqCqdbgC0y7J7muM0W2OvERAWg5qTarF?=
 =?us-ascii?q?RWwfZlfRrdnh+0zNVaGuBqo9PgtB08GCLLBKZcPvjVlBQPfjO9HeY2aqlme0BB?=
 =?us-ascii?q?aIwK6MbYXwd2Uc2iXdFFYLkwQJ8XmaMgg+Az+ro3jCAzx2CVLvf0Ts/PFjp3yh?=
 =?us-ascii?q?UE870RuGb0172Lqz4R4am/qcRugX3rIFvichtjp1EEy839LQF9qPuQ5hcL9Abt?=
 =?us-ascii?q?M65VdNzXjZuBBlPpy8M6BigUYTcxh2v0Pr0BV3FoVAkMgwoHM21gZyLriY0FdA?=
 =?us-ascii?q?dzOe0pD9IbnXKmj0/BCyZK/awFDe0NCK+qgR7PQ0sUnsvAasFkA66XVoz8FV02?=
 =?us-ascii?q?eA5pXNFAcdS5bxXVg49hdkp7DWeDIy557J2nJ2N6m0sTjC28wyCeshyxagecpf?=
 =?us-ascii?q?MayeGA/zFc0aG9ahKOgwl1e1aRIEOfhY9LQoMMO+a/uGxKmrMf5gnTK7l2hI/J?=
 =?us-ascii?q?px00OM9yVmTO7I0I0Iw/WZ3guBSjf9g02tssHxmYBYez4SGnCzxjTjBI5Ufqdy?=
 =?us-ascii?q?Z5oECX+yI82rwdVzn4TtW39E+1G5HVMJxcipdQCUb1Pjxw1Q1F0brmC9liu80j?=
 =?us-ascii?q?N7jSsprq2Z3CHVx+TidRwHOnNERWV4jFfsJ5S0gM4eXESycwcpkx6l717gx6dH?=
 =?us-ascii?q?vKR/M3XTQUBQcin2LmFuSKuxuqCZY85S7pMlqiFXUOW6YVCHRb/xuRoa0yX/H2?=
 =?us-ascii?q?RAwDA3bS2lupL8nxZikmKSMG5zrGbFecF33Rrf5sbTReRS3joFQyl0kyLXCUK/?=
 =?us-ascii?q?P9mq/NWUkYnMsualWmKlV51TdzTrzIyauCu6421qHQOwn/SpltL7Fgg61Dfx18?=
 =?us-ascii?q?N2WiXQsBb8fo7r2ry6MO19eUlkHl3868t8GoxlloswhZcQ2WUVh5mP/HoHl3vz?=
 =?us-ascii?q?Pstf2a7kcHUNQjsLycbP4Af5wE1jMm6Jx4XhW3We2MRhZsO2YmML2i0n6cBKB7?=
 =?us-ascii?q?yZ7LhFnStzv1q5ohjdYfl7njcB1/Qu7GQWjP0OuAoo1i+dGKwdHVFEPSzwkBSF?=
 =?us-ascii?q?99W+rKRUZGm1a7Sx2lRxncu9DL6cuAFTQ2j2eo0tHSJr6sV/MVTM0GD8643+ed?=
 =?us-ascii?q?nQa84TuQOQkxvak+dVL5cxnOIQhSV7IWL9oWEly+kjgBxy2pG6uZKLKmR386K/?=
 =?us-ascii?q?Hx5YLSb1Z8II9zHpjKZemNuW3o+1EpVgHDULQIXnTfayHD0OsvTnMh6EECcgpX?=
 =?us-ascii?q?eDBbrfAQif5V99oH3VFJCrM2yXKGMdzdV/XxSdIE1fgAYJXDQ1hJI5FwaqxND/?=
 =?us-ascii?q?f0d9/Dwe+ln4qh5UwOJyKxb/SnvfpBuvajosSpiQNh9W4R9Z50vPLcyS9OFzHz?=
 =?us-ascii?q?xb/p28qgyCMHebah9MDWEIXEyEGl/iMqOv5dnG7+iXGO6+I+HSbrWJrOxUT+2I?=
 =?us-ascii?q?yo630ot64zaMMd2CP3llD/0mw0pDQGp2G8LDlzUUTCwXkS3NYtWfpBe9/C13s8?=
 =?us-ascii?q?++/O7qWALp+YuAFb9SPc9z9BCxhKeJL/SQizphKTZEypMMwmfFyLgB014TiCFu?=
 =?us-ascii?q?dDitHa4DtS7XS6LQlbFYDwQGayNoL8ZI66M83g9QOc/UkN/117h4juIrBFdBT1?=
 =?us-ascii?q?DuhsapZckSKWGnKFzHHFqLNKiBJTDT2c73fLizSadOg+RUrRGwvTebHlTnPjSC?=
 =?us-ascii?q?kTnpSh+uPftNjCGdIBxRpoW9fgxxBmjkSdLscge7P8NvjT0q3b00gWvHNXIdMT?=
 =?us-ascii?q?h5aU9Csqec4j9YgvphHWxM9X5lLeiCmyaE4OjUMJcWsf13Aitqk+JW+mg1y7xQ?=
 =?us-ascii?q?7CtcXvx6hDPSrsJyo1GhiuSOyiBoUBxLqjZKgoKEpURjOaXD+ZlGVnbJ5xYN7W?=
 =?us-ascii?q?SWCxQXqNppENzvu6ZMytfRkKL/MitN89XR/ZhUO8+BLMOBLWFnLhPtHDPVDiMB?=
 =?us-ascii?q?TDiiL2aZgFZSw9+I8XjAkZk+rpnlndIkULJSSFw0Cu9SJV5sDZRWPpZzXj4glP?=
 =?us-ascii?q?iUlscZzXW7pRjVAs5du8aUBbqpHfzzJWPB3vF/bBwSzOagIA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AgAACYxxhch0O0hNFkHgEGBwaBUQkLA?=
 =?us-ascii?q?YEwgjsnmA6BaDmJEok3hH2BcxMBARgTAYdfIjQJDQEDAQEBAQEBAgETAQEBCgs?=
 =?us-ascii?q?JCCkjDII2IoJlAwMBAiQLAQ0BGx0BAwIJAQEFEDsDHgIRAQUBHBkFgx2BaAEDF?=
 =?us-ascii?q?QEEnBU8jBUWBQEXgncFhEsKGScNXoE3AgYSh2yDJYEcghaBRIU2iAkCiUaHCJA?=
 =?us-ascii?q?jMAcChk+HX4MxGIFdiBg3hygsihqFA4l+AgQCBAUCBQ8hgSWCDk0jgQGCO4IbD?=
 =?us-ascii?q?BeDSopiMTKBBAEBATuNPQEB?=
X-IPAS-Result: =?us-ascii?q?A0AgAACYxxhch0O0hNFkHgEGBwaBUQkLAYEwgjsnmA6BaDm?=
 =?us-ascii?q?JEok3hH2BcxMBARgTAYdfIjQJDQEDAQEBAQEBAgETAQEBCgsJCCkjDII2IoJlA?=
 =?us-ascii?q?wMBAiQLAQ0BGx0BAwIJAQEFEDsDHgIRAQUBHBkFgx2BaAEDFQEEnBU8jBUWBQE?=
 =?us-ascii?q?XgncFhEsKGScNXoE3AgYSh2yDJYEcghaBRIU2iAkCiUaHCJAjMAcChk+HX4MxG?=
 =?us-ascii?q?IFdiBg3hygsihqFA4l+AgQCBAUCBQ8hgSWCDk0jgQGCO4IbDBeDSopiMTKBBAE?=
 =?us-ascii?q?BATuNPQEB?=
X-IronPort-AV: E=Sophos;i="5.56,367,1539673200"; 
   d="scan'208";a="45413261"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 18 Dec 2018 02:12:53 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726792AbeLRKMt (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 18 Dec 2018 05:12:49 -0500
Received: from mail-pl1-f196.google.com ([209.85.214.196]:33073 "EHLO
        mail-pl1-f196.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726384AbeLRKMs (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 18 Dec 2018 05:12:48 -0500
Received: by mail-pl1-f196.google.com with SMTP id z23so7618626plo.0;
        Tue, 18 Dec 2018 02:12:47 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding;
        bh=85H/4t6RkooDK10L2W5Uhts7AwM0xn2RPdanjNRGSLI=;
        b=IMYB5SQuGgtXrdAn/xxZkh+DNeUZE7ztaWqW4U2mvfeYd8TrU8oBkET58UTPC1/YVc
         45U1XNALOBODzzyuX/X4tjVQXg1G2FJht2IuXPcyMrlKgJlJ3APu8nYyOjFnJQBRUu4T
         PD+hwMMaoZucKDE1s8/RO0gydBoDZXqdKxmrSWgSWwUfnPoBe0YA/jPnwnBYTs79MwaZ
         fQeRDKhYshKDGFg6n2l/tLwAl+d+LLFImFET7TUSZUH9kHOHRgOxcVJzw8nlcvXM2ypE
         hk7XmJs4Beb1uAaqxkPB/xPPOAo72Sk8dolBQA1rbjuxbJWwKP10E3W6KL8BXz+8or3L
         12ZQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=85H/4t6RkooDK10L2W5Uhts7AwM0xn2RPdanjNRGSLI=;
        b=DCPhfy3wESHyFegflCCCL5MwevyUmNQbSYg+dmJ0HihuQYlHfU6GJpjAwi+s9eiiwV
         lKXC9nLBxAWRfSv2mrAWGdn2ovyC3V6uaiutyw7CxixwP3Qk8qwQ4dsz/2Giw/EuWmbS
         6njlSaLwl+8uWuqRROLa13kVK/gicnYXIrIFohCQ/QMEocFNf9AjHLjRvgEFHDbspp1T
         pLC/4+KvoC5ckg4exeujC/xRXabDLgsjAKgNXLc14qGOXsgg5xU3fOpkEsTMNbA5OqRP
         11g2xQfg+BKAnS4UKImbUv0mwm8dYMiVsBTIGZvoI0IqzJmtnKupzKeTtJmodrrib8Yt
         GBqw==
X-Gm-Message-State: AA+aEWb8yk63rKe5Lbz0w2PWwrL6rbWdvDkk7uF6YHoZw5mYPIvP8xl4
        W+yC2cNZAaMCnc6n55gf8C0=
X-Google-Smtp-Source: AFSGD/XxYWMwLNavSJlTSy3Sg+5dfxAybxJ92j5y3zXEyGcy09zPD8+antRKUCNrhPHOQxBteNAEVA==
X-Received: by 2002:a17:902:e290:: with SMTP id cf16mr16311430plb.81.1545127967494;
        Tue, 18 Dec 2018 02:12:47 -0800 (PST)
Received: from localhost.localdomain ([2001:268:c0a5:b5e9:3c79:e26e:bf45:b953])
        by smtp.gmail.com with ESMTPSA id 85sm20998587pfw.17.2018.12.18.02.12.43
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Tue, 18 Dec 2018 02:12:46 -0800 (PST)
From: William Breathitt Gray <vilhelm.gray@gmail.com>
To: linus.walleij@linaro.org
Cc: akpm@linux-foundation.org, linux-gpio@vger.kernel.org,
        linux-arch@vger.kernel.org, linux-kernel@vger.kernel.org,
        andriy.shevchenko@linux.intel.com, linux@rasmusvillemoes.dk,
        William Breathitt Gray <vilhelm.gray@gmail.com>
Subject: [PATCH v5 5/8] gpio: gpio-mm: Utilize for_each_set_clump8 macro
Date: Tue, 18 Dec 2018 19:13:17 +0900
Message-Id: <0038b39823b7b593fb939319eda01a383303fdc1.1545126272.git.vilhelm.gray@gmail.com>
X-Mailer: git-send-email 2.20.1
In-Reply-To: <cover.1545126272.git.vilhelm.gray@gmail.com>
References: <cover.1545126272.git.vilhelm.gray@gmail.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Replace verbose implementation in get_multiple/set_multiple callbacks
with for_each_set_clump8 macro to simplify code and improve clarity.

Signed-off-by: William Breathitt Gray <vilhelm.gray@gmail.com>
---
 drivers/gpio/gpio-gpio-mm.c | 71 +++++++++++--------------------------
 1 file changed, 20 insertions(+), 51 deletions(-)

diff --git a/drivers/gpio/gpio-gpio-mm.c b/drivers/gpio/gpio-gpio-mm.c
index 8c150fd68d9d..5647abe72376 100644
--- a/drivers/gpio/gpio-gpio-mm.c
+++ b/drivers/gpio/gpio-gpio-mm.c
@@ -172,46 +172,25 @@ static int gpiomm_gpio_get(struct gpio_chip *chip, unsigned int offset)
 	return !!(port_state & mask);
 }
 
+static const size_t ports[] = { 0, 1, 2, 4, 5, 6 };
+
 static int gpiomm_gpio_get_multiple(struct gpio_chip *chip, unsigned long *mask,
 	unsigned long *bits)
 {
 	struct gpiomm_gpio *const gpiommgpio = gpiochip_get_data(chip);
-	size_t i;
-	static const size_t ports[] = { 0, 1, 2, 4, 5, 6 };
-	const unsigned int gpio_reg_size = 8;
-	unsigned int bits_offset;
-	size_t word_index;
-	unsigned int word_offset;
-	unsigned long word_mask;
-	const unsigned long port_mask = GENMASK(gpio_reg_size - 1, 0);
+	unsigned int offset;
+	unsigned long gpio_mask;
+	unsigned int port_addr;
 	unsigned long port_state;
 
 	/* clear bits array to a clean slate */
 	bitmap_zero(bits, chip->ngpio);
 
-	/* get bits are evaluated a gpio port register at a time */
-	for (i = 0; i < ARRAY_SIZE(ports); i++) {
-		/* gpio offset in bits array */
-		bits_offset = i * gpio_reg_size;
-
-		/* word index for bits array */
-		word_index = BIT_WORD(bits_offset);
-
-		/* gpio offset within current word of bits array */
-		word_offset = bits_offset % BITS_PER_LONG;
-
-		/* mask of get bits for current gpio within current word */
-		word_mask = mask[word_index] & (port_mask << word_offset);
-		if (!word_mask) {
-			/* no get bits in this port so skip to next one */
-			continue;
-		}
-
-		/* read bits from current gpio port */
-		port_state = inb(gpiommgpio->base + ports[i]);
+	for_each_set_clump8(offset, gpio_mask, mask, ARRAY_SIZE(ports) * 8) {
+		port_addr = gpiommgpio->base + ports[offset / 8];
+		port_state = inb(port_addr) & gpio_mask;
 
-		/* store acquired bits at respective bits array offset */
-		bits[word_index] |= (port_state << word_offset) & word_mask;
+		bitmap_set_value8(bits, &port_state, offset);
 	}
 
 	return 0;
@@ -242,37 +221,27 @@ static void gpiomm_gpio_set_multiple(struct gpio_chip *chip,
 	unsigned long *mask, unsigned long *bits)
 {
 	struct gpiomm_gpio *const gpiommgpio = gpiochip_get_data(chip);
-	unsigned int i;
-	const unsigned int gpio_reg_size = 8;
-	unsigned int port;
-	unsigned int out_port;
+	unsigned int offset;
+	unsigned long gpio_mask;
+	size_t index;
+	unsigned int port_addr;
 	unsigned int bitmask;
 	unsigned long flags;
 
-	/* set bits are evaluated a gpio register size at a time */
-	for (i = 0; i < chip->ngpio; i += gpio_reg_size) {
-		/* no more set bits in this mask word; skip to the next word */
-		if (!mask[BIT_WORD(i)]) {
-			i = (BIT_WORD(i) + 1) * BITS_PER_LONG - gpio_reg_size;
-			continue;
-		}
+	for_each_set_clump8(offset, gpio_mask, mask, ARRAY_SIZE(ports) * 8) {
+		index = offset / 8;
+		port_addr = gpiommgpio->base + ports[index];
 
-		port = i / gpio_reg_size;
-		out_port = (port > 2) ? port + 1 : port;
-		bitmask = mask[BIT_WORD(i)] & bits[BIT_WORD(i)];
+		bitmask = bitmap_get_value8(bits, offset) & gpio_mask;
 
 		spin_lock_irqsave(&gpiommgpio->lock, flags);
 
 		/* update output state data and set device gpio register */
-		gpiommgpio->out_state[port] &= ~mask[BIT_WORD(i)];
-		gpiommgpio->out_state[port] |= bitmask;
-		outb(gpiommgpio->out_state[port], gpiommgpio->base + out_port);
+		gpiommgpio->out_state[index] &= ~gpio_mask;
+		gpiommgpio->out_state[index] |= bitmask;
+		outb(gpiommgpio->out_state[index], port_addr);
 
 		spin_unlock_irqrestore(&gpiommgpio->lock, flags);
-
-		/* prepare for next gpio register set */
-		mask[BIT_WORD(i)] >>= gpio_reg_size;
-		bits[BIT_WORD(i)] >>= gpio_reg_size;
 	}
 }
 
-- 
2.20.1

