Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  18 Dec 2018 21:09:07 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga008.fm.intel.com (fmsmga008.fm.intel.com [10.253.24.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 019DF5805AD;
	Tue, 18 Dec 2018 02:13:28 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by fmsmga008-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 18 Dec 2018 02:13:28 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AcTH1JBZQtRQ/Ftxm29Tuf3z/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpcizZB7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v6bpgRh31hy?=
 =?us-ascii?q?cdLzM38H/ZhNF+gqxYpxyupRJ/zIHbboGOLPpzfLjQcc8ZSGdbQspcTTBNDp+6?=
 =?us-ascii?q?YoASD+QBJ+FYr4zlqlQOrBu+AQ2sBOL1xT9Nm3T7wLc63Po7HgHa3AwgHs4OsG?=
 =?us-ascii?q?jJp9v0LqcdS+C0x7TPwDXdbvNW3Tf955bMchAku/2MUqhwftDRyEQ0GAPFi0+f?=
 =?us-ascii?q?qY3hPz+PyusNtG2b4vNmWOmyiGAnsxl8riazysookIXFm4wYxk7e+Slkw4s5Oc?=
 =?us-ascii?q?e0RU95bNK8Dpdcqz2WO5ZzT888QmxluyM3xaEatZGhfCUHzY8oyh7BZPGDdoWF?=
 =?us-ascii?q?7A7sWeSVLDp9mn1pZrOyiAi3/Ee7xO3xWcm53VNRoSdBktTBuHYA3AHJ5MedUP?=
 =?us-ascii?q?ty5EKh1C6P1w/N7uFEJlg5lbTUK5E/2L48jJkTvlrZHi/whkr2iLWadkI++uin?=
 =?us-ascii?q?8+jnY7PmqYGAN4JslA3yLqAjltaiDek2LAQCRXWX9Oeg2LH5/ED0Qq1Gjvgsna?=
 =?us-ascii?q?nYtJDaK94bpqm8AwJN1oYj6hC/Dyqp0dgBnnkIMkhFeBSZgIjtIl3OJ/75DfGh?=
 =?us-ascii?q?jFS2izpr2f/GMaP7ApnXLXjMjq3hfbBj5E5Y0gYzyspf551MBrEbPP3zQlPxtM?=
 =?us-ascii?q?DfDhIhNwy0wuXnB8tn2oIRRGKCGauZMKLUsV+V6eMjOeiMZIkJuDnjL/gp/eLh?=
 =?us-ascii?q?jXg8mVUFZ6mmwYMXaGykHvRhO0iZYWDjgtYdEWgQuQoyVuzqiECYXj5VaHa/RK?=
 =?us-ascii?q?Y85jA9CIK7AobPXIGtgLqd3CilGp1afHxJCleJEX3wbYWLR+8MaD6OIs9mijEE?=
 =?us-ascii?q?V7+hRJE72RGtsw/6zbxnLu3P9y0ctJLj0sV15uLJmREz8zx0E9qS02WXQ25omW?=
 =?us-ascii?q?MIQic83Lpjrkxl1leDza94juRCGtxI5/NJVQQ6OYTGz+NgCdD/QQbBftaPSFa7?=
 =?us-ascii?q?TdSqGzAxTtQtw9AQZ0ZxAcmtjhfG3yCyGb8ai6SLBIAo8qLbx3XxJNxyy3Dc2K?=
 =?us-ascii?q?kljlkpWM1PNWK9i6579gjTAZPJkkqDm6arc6QcwDDC9GOZwWWSu0FYVRZ6Ub/Z?=
 =?us-ascii?q?UnAHekvWsdP561vfQLC0F7QoLBFNyc6YJatMcd3mk1NGSPDnONTdZmKxn3y9BR?=
 =?us-ascii?q?KJxrOKcYrrdH8R3CTbCEgYjQ8T+WyKOhQ5Bieku2jeFiBhFUrzY0Pw9ulzsG60?=
 =?us-ascii?q?QVUqzw6UdUFh16C6+hgOhfOCTfMexbYEuCYnqzVpE1exxdPWC9ycpwV/eKVQe8?=
 =?us-ascii?q?8y4FBC1WjBrQxyIoSgL7x+hl4Zawl3o0Lu1xBwCoVckcgrrGkmzBZoJaKfylNB?=
 =?us-ascii?q?czKY3Zb/OrDMLmny/Rava7PZ213E0daW/LsP5+o8q1n5oA6pEU8i+W1909ZJy3?=
 =?us-ascii?q?uc+onKDA0KXJ3rVkY46Rd7qK/aYyUn/IzUyGBjPrOysj/B3NIpGvAoyhKhf9dZ?=
 =?us-ascii?q?LaOFGxX+E8wcB8iyNuMqn0KlYQ4DPOBX7KQ0Jd+pd+Oa2K63O+ZthDKnjXld7I?=
 =?us-ascii?q?9hyE6N9ip8RfTO35YK2PyY2gqHVzHhjFauqMz3mIZEZS0MEWq70yTrGIlRZqhq?=
 =?us-ascii?q?d4YRFWiuO9G3xsl5h5P1QX5Y9UKsCEkc2MC0fhqedVr90hNK1UQWuHCohTG3zz?=
 =?us-ascii?q?hpnD43tKqf2yrOzv/mdBoGPG5LWWZjgU3tIYiyk9AVQkyoYxI1mxui4Ebw37Jb?=
 =?us-ascii?q?q7hnL2nPXUdIeDD7LmFjUqeqtruOedVP6I4usShMVOS8YFaaSqPyohcA0iPjGX?=
 =?us-ascii?q?deyy4/dz2wppr5mBl6gnqHLHlvtHrZZd1wxRDH6dzeX/FRxDkGRCp/iTXNHViz?=
 =?us-ascii?q?Jdqp/daVl5fFrO++UXmsVplScSnt0IOBuzG35WxsAR2jgf+znsfrHhQ90S/+z9?=
 =?us-ascii?q?NqTznHrA7gYon30KS3KeJmcVNvBFPm6cp6G4d+n5A0hJER33gam5qU8WAGkWf1?=
 =?us-ascii?q?LdVUx6b+YGARSj4Mxt7f+BLl11F7LnKV24L5UW2Qwsh7aNm7eG8W2j894NpMCK?=
 =?us-ascii?q?eb97FEmSp1olylrQPee/R9nzEdyecw534eme0GpA0tziCFCLAIAUZYJTDslwiP?=
 =?us-ascii?q?792mqaVXZWWvfqKq2Etwg9+hF62CrR9GWHniZJgiByBw4957MFLN1n3z947ldM?=
 =?us-ascii?q?PRbdIVqh2bjRPAg/JJJ5I2k/oAnTBnNn7lvX051+47igRj3Y29vIiCMWls/bi2?=
 =?us-ascii?q?AhhFNj3ufMMT+yrgjaJfnsaQwoCuEY9tGjQNXJv0U/2oFCgeuujgNwaLCDc8sG?=
 =?us-ascii?q?uUGaLDHQ+D70drt2nAHIqsN3GTOXkV19FiRASGKUxbgQAUWig6n5EjGgCrwszh?=
 =?us-ascii?q?bFl25jQL6lHkrRtMz/piNwPjXWfHuAeodjA0RYCdLBVM6wFN+VzVPdaC7u5pHC?=
 =?us-ascii?q?FY456hrBGLKmOBfARFFmUJWk2CB1D+Mbii/9jA8+6EBuWgK/vCe6mBqetbV/2Q?=
 =?us-ascii?q?35KgzpNm/yqQNsWIJnRjD/o72ldaXXBkAcvZnS8DSzcQlyLLYM6WvxO8+ixxrs?=
 =?us-ascii?q?Ci//XnQgPv5Y2TC7RMNdVj4Qy5gaCGN+SIniZ2NS5Y1o8QxX/P0LUf3EAdiyBt?=
 =?us-ascii?q?dzmuELQMry3NTLjXmq9YEREbcT5zNNBT4qI43wlNP9Pbi9zv2r55iP41F0lKVV?=
 =?us-ascii?q?j7ls61YswKJnm3NEnbC0aTKLSGOTrLztntbqOhUrJQlvtbth2qtTafEk/uJTCD?=
 =?us-ascii?q?lzjvVxCyPuBAliCbPBpCuI6jdhZhE3TsTNXjahejKt94kSU2waEohnPNLWMcLT?=
 =?us-ascii?q?l8c0ZXorKM9y9XnvV/FHJH7nd+KemEmiCZ7/TXK5oMsPtrBDh0mPxe4Hgg17RV?=
 =?us-ascii?q?6yRETuRvmCTOtt5uv02mku6XxztnShVOrDNLhIONvUp6OKTZ9oNPWXDL/B8W6W?=
 =?us-ascii?q?WQChIKp8ZqC9H1uqBQzMTPm7z3KDtY793U+s4cVIDoL5eDMXw8Klz2ETrQAQoH?=
 =?us-ascii?q?ZTqqM2jFgApaiv7B2GeSq80Fq5zomZMLApVBWVUpFvIGFgxKBtUTaMNpXzcknL?=
 =?us-ascii?q?qeysES7GuWoxzYRcEctZfCAKHBSc7zISqU2OEXLyADxqn1eNwe?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AgAADYxxhch0O0hNFkHgEGBwaBUQkLA?=
 =?us-ascii?q?YEwgjsnmA6BaDmJEok3hH2BcxMBARgTAYdfIjQJDQEDAQEBAQEBAgETAQEBCgs?=
 =?us-ascii?q?JCCkjDII2IoJlAwMBAiQLAQ0BGx0BAwIJAQEFEDsDHgIRAQUBHBkFgx2BaAEDF?=
 =?us-ascii?q?QEEnBc8jBUWBQEXgncFhEsKGScNXoE3AgYSh2yDJYEcghaBRIU2iAkCiUaHCJA?=
 =?us-ascii?q?jMAcChk+HX4MxGIFdiBg3hygsjx2JfgIEAgQFAgUPIYElgg5NI4EBgjuCGwwXg?=
 =?us-ascii?q?0qKYjEygQQBAQE7jT0BAQ?=
X-IPAS-Result: =?us-ascii?q?A0AgAADYxxhch0O0hNFkHgEGBwaBUQkLAYEwgjsnmA6BaDm?=
 =?us-ascii?q?JEok3hH2BcxMBARgTAYdfIjQJDQEDAQEBAQEBAgETAQEBCgsJCCkjDII2IoJlA?=
 =?us-ascii?q?wMBAiQLAQ0BGx0BAwIJAQEFEDsDHgIRAQUBHBkFgx2BaAEDFQEEnBc8jBUWBQE?=
 =?us-ascii?q?XgncFhEsKGScNXoE3AgYSh2yDJYEcghaBRIU2iAkCiUaHCJAjMAcChk+HX4MxG?=
 =?us-ascii?q?IFdiBg3hygsjx2JfgIEAgQFAgUPIYElgg5NI4EBgjuCGwwXg0qKYjEygQQBAQE?=
 =?us-ascii?q?7jT0BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,367,1539673200"; 
   d="scan'208";a="142551805"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 18 Dec 2018 02:13:26 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726549AbeLRKNZ (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 18 Dec 2018 05:13:25 -0500
Received: from mail-pf1-f194.google.com ([209.85.210.194]:39837 "EHLO
        mail-pf1-f194.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726391AbeLRKNY (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 18 Dec 2018 05:13:24 -0500
Received: by mail-pf1-f194.google.com with SMTP id r136so857614pfc.6;
        Tue, 18 Dec 2018 02:13:23 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding;
        bh=wIUcUn9NZpZ4AkNdcsel1CBOeLuu/XGaElsnv6eh2k0=;
        b=Iw4C84++IJ29lEg2R6wMOCjifBtu0xVJ7C77kHUhN4KOimHZpRzxsstUuYZ+CVgLFJ
         7I+NjzH9aVaVB3wrhfgkHF8zshuCdlhJ9NhHaF3BT8wd9FJv65I3DLjKWJTIiHCsoQOU
         Acc9f+FMW8jCi2b4rYocQ0r85vUgrnqz2yRYqDtCS/8+1z2E5a15dkTf754y+V6QKtvb
         SVlxVzdrv6/Cz8aPwTOzn+2IBnOq6Zy0KBWmXLGwJ+8OZ/z6WlMkAUoMG/SLVTC9Jy9d
         Gm/op3bX7J/tFabgjVwDB2LiguInA4Abkf5hSXzM1IO+w/R4JRothYr3tXcy1rOt7SNS
         qJMw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=wIUcUn9NZpZ4AkNdcsel1CBOeLuu/XGaElsnv6eh2k0=;
        b=B7a9OgorBi5b260QF6MAFkQUNPj77+ufZGRuw3WwYCB8tAaHW8s7Jc8X1EtE7/P/WZ
         QlLeV2WCGVN1/u9RLeH1P+45IWx0JkNlrm4T2TIWxEiE5p8nAwfwKacgvyhFcFhIYFAS
         5U70GbVYOS0KMKwzun55F8dJSftvmOyBJBYt201CqPZamYJ4mOMmc9vlyhcOktUVfMoM
         O0Do6UanDRgp3O+4BnKh0pt5Hi73Fr8Fl2wg7822l2ggmHHigVowSRdDoNP/pN/jxEjF
         DOB3hljIFWVhlqodulufJvErUBJO62qsAZGWqBDa7LTx/aleLDz2eI+IR6ZKS0tYuP9R
         KWBQ==
X-Gm-Message-State: AA+aEWYbydgjIf9tTBgE5M2eq7nJ8+2NNk7/En/U6kQzwSiE3UEGNYL+
        pFwTwg0ohJOuzdmyNN6dhe0=
X-Google-Smtp-Source: AFSGD/VYuNC5NxAqnKIK16veOZo0kCxjh3QRLwZYEOmJw6xp0pMl6LPvHxciyxj8riMW1Bcay2KmbA==
X-Received: by 2002:a62:3811:: with SMTP id f17mr16413592pfa.206.1545128003659;
        Tue, 18 Dec 2018 02:13:23 -0800 (PST)
Received: from localhost.localdomain ([2001:268:c0a5:b5e9:3c79:e26e:bf45:b953])
        by smtp.gmail.com with ESMTPSA id y71sm31996501pfi.123.2018.12.18.02.13.20
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Tue, 18 Dec 2018 02:13:23 -0800 (PST)
From: William Breathitt Gray <vilhelm.gray@gmail.com>
To: linus.walleij@linaro.org
Cc: akpm@linux-foundation.org, linux-gpio@vger.kernel.org,
        linux-arch@vger.kernel.org, linux-kernel@vger.kernel.org,
        andriy.shevchenko@linux.intel.com, linux@rasmusvillemoes.dk,
        William Breathitt Gray <vilhelm.gray@gmail.com>
Subject: [PATCH v5 7/8] gpio: pci-idio-16: Utilize for_each_set_clump8 macro
Date: Tue, 18 Dec 2018 19:13:51 +0900
Message-Id: <fc6a5fdb4c5368f081b2efc012a384e9acfc010d.1545126272.git.vilhelm.gray@gmail.com>
X-Mailer: git-send-email 2.20.1
In-Reply-To: <cover.1545126272.git.vilhelm.gray@gmail.com>
References: <cover.1545126272.git.vilhelm.gray@gmail.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Replace verbose implementation in get_multiple/set_multiple callbacks
with for_each_set_clump8 macro to simplify code and improve clarity.

Signed-off-by: William Breathitt Gray <vilhelm.gray@gmail.com>
---
 drivers/gpio/gpio-pci-idio-16.c | 73 ++++++++++++---------------------
 1 file changed, 26 insertions(+), 47 deletions(-)

diff --git a/drivers/gpio/gpio-pci-idio-16.c b/drivers/gpio/gpio-pci-idio-16.c
index 6b7349783223..4eb89f8b5f9b 100644
--- a/drivers/gpio/gpio-pci-idio-16.c
+++ b/drivers/gpio/gpio-pci-idio-16.c
@@ -108,45 +108,23 @@ static int idio_16_gpio_get_multiple(struct gpio_chip *chip,
 	unsigned long *mask, unsigned long *bits)
 {
 	struct idio_16_gpio *const idio16gpio = gpiochip_get_data(chip);
-	size_t i;
-	const unsigned int gpio_reg_size = 8;
-	unsigned int bits_offset;
-	size_t word_index;
-	unsigned int word_offset;
-	unsigned long word_mask;
-	const unsigned long port_mask = GENMASK(gpio_reg_size - 1, 0);
-	unsigned long port_state;
+	unsigned int offset;
+	unsigned long gpio_mask;
 	void __iomem *ports[] = {
 		&idio16gpio->reg->out0_7, &idio16gpio->reg->out8_15,
 		&idio16gpio->reg->in0_7, &idio16gpio->reg->in8_15,
 	};
+	void __iomem *port_addr;
+	unsigned long port_state;
 
 	/* clear bits array to a clean slate */
 	bitmap_zero(bits, chip->ngpio);
 
-	/* get bits are evaluated a gpio port register at a time */
-	for (i = 0; i < ARRAY_SIZE(ports); i++) {
-		/* gpio offset in bits array */
-		bits_offset = i * gpio_reg_size;
-
-		/* word index for bits array */
-		word_index = BIT_WORD(bits_offset);
-
-		/* gpio offset within current word of bits array */
-		word_offset = bits_offset % BITS_PER_LONG;
+	for_each_set_clump8(offset, gpio_mask, mask, ARRAY_SIZE(ports) * 8) {
+		port_addr = ports[offset / 8];
+		port_state = ioread8(port_addr) & gpio_mask;
 
-		/* mask of get bits for current gpio within current word */
-		word_mask = mask[word_index] & (port_mask << word_offset);
-		if (!word_mask) {
-			/* no get bits in this port so skip to next one */
-			continue;
-		}
-
-		/* read bits from current gpio port */
-		port_state = ioread8(ports[i]);
-
-		/* store acquired bits at respective bits array offset */
-		bits[word_index] |= (port_state << word_offset) & word_mask;
+		bitmap_set_value8(bits, &port_state, offset);
 	}
 
 	return 0;
@@ -186,30 +164,31 @@ static void idio_16_gpio_set_multiple(struct gpio_chip *chip,
 	unsigned long *mask, unsigned long *bits)
 {
 	struct idio_16_gpio *const idio16gpio = gpiochip_get_data(chip);
+	unsigned int offset;
+	unsigned long gpio_mask;
+	void __iomem *ports[] = {
+		&idio16gpio->reg->out0_7, &idio16gpio->reg->out8_15,
+	};
+	size_t index;
+	void __iomem *port_addr;
+	unsigned int bitmask;
 	unsigned long flags;
 	unsigned int out_state;
 
-	raw_spin_lock_irqsave(&idio16gpio->lock, flags);
+	for_each_set_clump8(offset, gpio_mask, mask, ARRAY_SIZE(ports) * 8) {
+		index = offset / 8;
+		port_addr = ports[index];
 
-	/* process output lines 0-7 */
-	if (*mask & 0xFF) {
-		out_state = ioread8(&idio16gpio->reg->out0_7) & ~*mask;
-		out_state |= *mask & *bits;
-		iowrite8(out_state, &idio16gpio->reg->out0_7);
-	}
+		bitmask = bitmap_get_value8(bits, offset) & gpio_mask;
+
+		raw_spin_lock_irqsave(&idio16gpio->lock, flags);
 
-	/* shift to next output line word */
-	*mask >>= 8;
+		out_state = ioread8(port_addr) & ~gpio_mask;
+		out_state |= bitmask;
+		iowrite8(out_state, port_addr);
 
-	/* process output lines 8-15 */
-	if (*mask & 0xFF) {
-		*bits >>= 8;
-		out_state = ioread8(&idio16gpio->reg->out8_15) & ~*mask;
-		out_state |= *mask & *bits;
-		iowrite8(out_state, &idio16gpio->reg->out8_15);
+		raw_spin_unlock_irqrestore(&idio16gpio->lock, flags);
 	}
-
-	raw_spin_unlock_irqrestore(&idio16gpio->lock, flags);
 }
 
 static void idio_16_irq_ack(struct irq_data *data)
-- 
2.20.1

