Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 08:52:15 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 7FDA1580380;
	Wed, 12 Dec 2018 07:48:08 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 12 Dec 2018 07:48:08 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AAUWMdhaJZ5t0dAku+vzDz2n/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpcq9ZB7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyJPDIOi?=
 =?us-ascii?q?YYUSDOQBM+lXoJXgqFUBrxSxCxKsBPvtxzJTmn/73rc33/g9HQzc3gEtGc8Fvn?=
 =?us-ascii?q?TOrNXyMacfSee7w7POzTXCcfNZwzH96I7SfRAnvPqCQKh/ftfRyUY1DAPFj0uQ?=
 =?us-ascii?q?ppbgPziI0ekNtnKU7+xhVeKxkWEnrQdxrSKpxss2kYnGnJ8aylDe+iViwYY1O8?=
 =?us-ascii?q?e3SEtgbN6gEZtQsTuVN5FxQs84RGFooik6x6QAtJWmciYKz5EnyATea/yBa4WI?=
 =?us-ascii?q?/hziVOeNITdkmn1lYqiziAq18Uil0uH8Usi00FBQoSpfldnArHcN1wbc6sSfRP?=
 =?us-ascii?q?ty5Fuu1iiU2ADU7eFEIlo4mrbcK54kxLM7i5kdsVzbEyPohEn7iLWaelgq9+S2?=
 =?us-ascii?q?8ejrf7brqoOGO4J1iAzyKroil8OjDek8NwUDUHSX9Oai2LDm/ED1XbFHguEzn6?=
 =?us-ascii?q?bHsJ3XKsUWq6unDAJVyYkv9ROyAymm3dkahnYKKU5KdRGJgofyPlzDJPP1Aumw?=
 =?us-ascii?q?jlmqjTxl3erJPqf7DZXINnXDkKnufbJ660NE1gozws5Q54hOBrECPv3zQEnxu8?=
 =?us-ascii?q?LcDhMjNAy02ennBM181oMYR22PHreUPL3OvVKM/O4jPueBaJEPtDrgKPUp++Ti?=
 =?us-ascii?q?gH47lFMFeKmmx5oXaHS2HvR8JEWZZGLhgtMAEWcMowo/Q/XmiF6cXj5JYXa9Qa?=
 =?us-ascii?q?Y86ig8CIOoC4fMWJqtjaef3Ce0AJJWfHpKClOSHnfycYWLRfMMZDiVIs97nTwI?=
 =?us-ascii?q?TaKhRJM51RGyqA/6zKJqLu7V+i0bq53vztd05/DImBE29Dx0Cdmd0m6XQ2F1mG?=
 =?us-ascii?q?MIWyE53KRlrUNhzVeD1LByg+ZEGtxL+/NJTgA6OIbcz+NgCtDyRhjOftCTRFam?=
 =?us-ascii?q?X9WpGzcxTt0qzt8KYkZ9Hciijx/Z0yqrBb8Vi6KEBJgu/q3A2HjxIt53y2za26?=
 =?us-ascii?q?k5k1kmXsxPOHWkhq546QffHY3Jk0Kfl6ascqQRxyrN9GaFzWqTs0BUSg9wUaPZ?=
 =?us-ascii?q?XX8BYkvat8j25kTHT7W2E7QoLhNBydKeKqtNctDml05GRPfkONTdeW6xgX2/BR?=
 =?us-ascii?q?STy7OIbYrqfXgd3SrHBEgFlQAT4WiJNQwkCii9pGLeCSRkFUjzbEP07el+tHS7?=
 =?us-ascii?q?Q1c3zw6QaU1tzb61+h8PivyaRPMexbYEuCYnqzVpE1exxdPWC9ycpwV/eKVQe8?=
 =?us-ascii?q?8y4FBC1WjBrQxyIoSgL7x+hl4Zawl4olnh1wtpBYlakcgltnUqzBFsJqKe119B?=
 =?us-ascii?q?czCY3ZX0OrDMLmny/Rava7PZ213E0daW/LsP5+o8q1n5oA6pEU8i+W1909ZJy3?=
 =?us-ascii?q?uc+onKDA0KXJ3sSEk36QZ1q6vaYiYn4YPUzmNjMa+vvz/G2tIpAvYlyxm6c9de?=
 =?us-ascii?q?NqOECBH9E8kAC8eyL+wqnkCjbggYM+BK6K40I8SmeuOa2K6qOeZgmy6mjWRH4Y?=
 =?us-ascii?q?xnzkKA7S18SvTM35YExfGY0RCKVzP9jFenr8D2lppIZTAUHmqj1yfkAJRdabF1?=
 =?us-ascii?q?fYYOEW2uOdG4xs1ih57xXH5V7ESsB1cY186mZxWTb0bx0hZN1UsKu3Onnyi4zz?=
 =?us-ascii?q?tqkzwyqqqf3SrOw/ntdRYdO25LQnVigknoIYSuk98aW02oZRAzlBS5/Ub627Rb?=
 =?us-ascii?q?pKNnImjTXEdEZTT5I3tjU6uwrLWCZcFP5YgssSVWVuS8fF+bRqT8oxsczyPsAW?=
 =?us-ascii?q?9eyConeDGtv5XzhwZ6h36FLHZvsHrZftl9xQ3e5NPAX/FRxCcJRC5ihTnRGFe8?=
 =?us-ascii?q?Jdip8cyImJjZtuCxSnyuVodUcSnt1o6AsCq75Wt3ARywhfyzm9vnERQk3i//zd?=
 =?us-ascii?q?VlSSLIrBPkaInxy6u6Kf5nflVvBFLk68t6G5tyk4sqiJELxHgagI6Y/X4GkWf1?=
 =?us-ascii?q?LNVa1rjybHsLRT4X3dHV5BLp11FkLnKM34j5TGmSwtN9Z9mmZWMbwiA94NpQCK?=
 =?us-ascii?q?eX77xEmjF5okGiogLSYvh9nzEdxuUo6HMBh+EJuQwtzjiSA7wIHElYOzDsmAqM?=
 =?us-ascii?q?79yksKpXY2Ove6Cq1EVihdChEK2CogZEVXf5YJgiGjV87sd+MFLKy3Dz7oDkeN?=
 =?us-ascii?q?/NbdMcrBGUkhHAj/RLJ5I1jPYFmS1nOWflt30/1+E7lQBu3Y29vIWfKGVi5qO5?=
 =?us-ascii?q?DgRYNj3ofcwT/D7tgL1ansaX2YCvA5pgFi8KXJvuUfKnDjYSue77OAaJFT02sm?=
 =?us-ascii?q?2bFqbHHQ+D9EdmqGrCE5WqN3GUPnYV19tjSweGJExDng8URi41kYAjFgCl38Hh?=
 =?us-ascii?q?dEZ55jYM5l/3sBdMy+RoNwXhXWfbvgundjA0SJ2HJhpM8g5C/1vVMdCZ7u9rAy?=
 =?us-ascii?q?FY+ZihoBaMK2OBYQRIEHoJWleFB134Ormu5N/A8/WXB+akLvvOZ6mOpvJaV/uS?=
 =?us-ascii?q?2Z2v1Y5m9S6WNsqTJnliE+E72k1bUH9iAcvZnDEPSzENmyLJcs6WvxO8+ixxrs?=
 =?us-ascii?q?Ci//XnQgPv5Y2TC7RMNdVj4Qy5gaCGN+SIniZ2NS5Y1o8QxX/P0LUf3kQdiyRw?=
 =?us-ascii?q?eDm2C7gAqTTBTKHNmq9UEh4bbTl8NNBT4qI43wlNP9Pbi9zv2r55iP41F0lKVV?=
 =?us-ascii?q?j7ls61YswKJnm3NEnbC0aTKLSGOTrLztn3YKO7VL1QlfhUuAe2uTqBCE/jOTKD?=
 =?us-ascii?q?lzbyWhCrMOFMijybPRNEtIG8dBZtFXbsTNb8ZhKnN993iCU8wacoiXPSKW4cLT?=
 =?us-ascii?q?98fltNrrKO7CNYgfZ/G21b4npmN+mEnCmZ4PfCKpYLqvtmGSB0l+Nc4HQnxLpZ?=
 =?us-ascii?q?9iBERPppmCTMqt5iuU2pku6KyjB/ShpBti5LhJ6XvUVlIajW7IRAVm3e/B0T7W?=
 =?us-ascii?q?ScERAKp9p+B93ruqBQzMXPla3pJDdD9dLU4dUTB8zOJM2bN3ohNALjGCTIAwsd?=
 =?us-ascii?q?UT6rKWbfilRBkPGT832ZtIQ1poLwl5oOVLBbUkc4FvcbCkRjAdwDL417XjIikb?=
 =?us-ascii?q?6HksEI4WCyowXWRMVfpprHTO6dAe3zKDaFirlJfxsJzqn+LYQWN4373VRta1h6?=
 =?us-ascii?q?nIvQHUrQUstAoilgbg8yvUVM/2JyTmw120L5dAyt5GUfGuKznh4z2UNCZrEB/T?=
 =?us-ascii?q?Ht7lN/AlfYryI2lwFlldzjgD2VNjr8Pqy5W4Z+DyvyvlI2dJThTFAmQxe1mBlB?=
 =?us-ascii?q?PTHFWbtXibJmPVtihA/VoppREPsUGahNZh4OzPeRbvNuyl1Qqiy8xFFO4MPBCJ?=
 =?us-ascii?q?1rjgxsdoSj+SETkzl/ZcI4cPSDbJFCyUJd0+fX5nel?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAABbLBFch0O0hNFkGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBgTCBOYECFBODe4gZjBKCDRSXPxSBYg8BARg?=
 =?us-ascii?q?HDAGBS4JxAoMAIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2JAGCYgECAwECI?=
 =?us-ascii?q?AQLAQ0BATcBBQkBAQoYAgIFIQICAwwFIAEFASILCAUEgxgBggEBBAqaGzyKHXB?=
 =?us-ascii?q?8M4J2AQEFhygIEnmKFYEcgVc/gRGCZC6BQYFSCwICgSSDPzGCJodogTqGJX2QS?=
 =?us-ascii?q?gcCgiMEg39liCaCGyMKAoFQTYRNgnM2hyeOHYp7BgIJBw8hgSWCDn2DLwmCEgw?=
 =?us-ascii?q?Xg0qFFIVHODKBBQEBIYxbAQE?=
X-IPAS-Result: =?us-ascii?q?A0ABAABbLBFch0O0hNFkGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBgTCBOYECFBODe4gZjBKCDRSXPxSBYg8BARgHDAGBS4JxAoMAI?=
 =?us-ascii?q?jQJDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2JAGCYgECAwECIAQLAQ0BATcBBQk?=
 =?us-ascii?q?BAQoYAgIFIQICAwwFIAEFASILCAUEgxgBggEBBAqaGzyKHXB8M4J2AQEFhygIE?=
 =?us-ascii?q?nmKFYEcgVc/gRGCZC6BQYFSCwICgSSDPzGCJodogTqGJX2QSgcCgiMEg39liCa?=
 =?us-ascii?q?CGyMKAoFQTYRNgnM2hyeOHYp7BgIJBw8hgSWCDn2DLwmCEgwXg0qFFIVHODKBB?=
 =?us-ascii?q?QEBIYxbAQE?=
X-IronPort-AV: E=Sophos;i="5.56,344,1539673200"; 
   d="scan'208";a="141835560"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 12 Dec 2018 07:48:06 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727691AbeLLPsE (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 12 Dec 2018 10:48:04 -0500
Received: from mail-pl1-f195.google.com ([209.85.214.195]:34826 "EHLO
        mail-pl1-f195.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726325AbeLLPsD (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 12 Dec 2018 10:48:03 -0500
Received: by mail-pl1-f195.google.com with SMTP id p8so8787382plo.2
        for <linux-kernel@vger.kernel.org>; Wed, 12 Dec 2018 07:48:02 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:content-transfer-encoding:in-reply-to
         :user-agent;
        bh=N60FAG2NJBggwe7p+0/SBf1HvS7foaElFiUCo/9ze3o=;
        b=eBQssCa0hoNQcnz79Q27e4E9m5Xbwh3qMeB9TjxzRojL7hTGR3DyoSVXJ5L9v253ib
         TBdQm2tPN18YjhpGGYhx6iOW5zqXS128s8+gO599AKwr+pyCvOdwartQ2ZlDAG99hH20
         aUxVwxFtdDr8Tzw2ywDYeqGA+uoyOzne7xZHE=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:message-id:references
         :mime-version:content-disposition:content-transfer-encoding
         :in-reply-to:user-agent;
        bh=N60FAG2NJBggwe7p+0/SBf1HvS7foaElFiUCo/9ze3o=;
        b=HeR1SsNJOgreddhhVdxipy6icmsyHgpvNSJ73Z5O0NV0o2Lw/dkQZez6kbMWojef9w
         RNEn8/uslS9aYrVhDQsWA7O0j7dfQ+HRcMBRanQEvHnSITH3YO3DZzoGzYzf4cS57gaw
         CCdCQHcYNDUMv11whU45j8DlUGrrdNnZYa0GhM/kk+ApawqC8JqGfKy9C8hHCqe0ZPK/
         CgfO+lyoQ1j+AXxqBA8X9mfIgsoaUIU3ESrvPsbSijxZ+T4PIJHlBaNR21zgomV+O3iE
         9pXHF55wv4PMAYSYQfVFLzJkgsDOfVO8oV4UHEAQjnMiGTpi+tx6qevaVIXO2KhKvaqO
         YcQA==
X-Gm-Message-State: AA+aEWbCk27l3H8hgR3uH2Vtp4abePafa+GRcATr95i20LhE6lqD7zTO
        g+mJQDXLqPgCsoyFHkomdGDT
X-Google-Smtp-Source: AFSGD/VjNX2TKLmwFqCYG7O1nM3N7fmma1MTNb/uQSjwS0lLckpv5pYg9IVfvcW7nuECzhhuZdkXDA==
X-Received: by 2002:a17:902:f64:: with SMTP id 91mr20189686ply.132.1544629681624;
        Wed, 12 Dec 2018 07:48:01 -0800 (PST)
Received: from Mani-XPS-13-9360 ([2409:4072:6190:e546:e5b2:257b:c83b:98e4])
        by smtp.gmail.com with ESMTPSA id r76sm26429212pfb.69.2018.12.12.07.47.51
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Wed, 12 Dec 2018 07:48:00 -0800 (PST)
Date: Wed, 12 Dec 2018 21:17:48 +0530
From: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
To: Daniel Lezcano <daniel.lezcano@linaro.org>
Cc: olof@lixom.net, arnd@arndb.de, robh+dt@kernel.org,
        tglx@linutronix.de, jason@lakedaemon.net, marc.zyngier@arm.com,
        gregkh@linuxfoundation.org, jslaby@suse.com,
        linux-unisoc@lists.infradead.org, afaerber@suse.de,
        linux-arm-kernel@lists.infradead.org, linux-kernel@vger.kernel.org,
        devicetree@vger.kernel.org, linux-serial@vger.kernel.org,
        amit.kucheria@linaro.org, linus.walleij@linaro.org,
        zhao_steven@263.net
Subject: Re: [PATCH v4 11/15] clocksource: Add clock driver for RDA8810PL SoC
Message-ID: <20181212154748.GA28130@Mani-XPS-13-9360>
References: <20181210173550.29643-1-manivannan.sadhasivam@linaro.org>
 <20181210173550.29643-12-manivannan.sadhasivam@linaro.org>
 <0b90a179-aa4b-57f7-0874-996d5c535ea9@linaro.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
Content-Transfer-Encoding: 8bit
In-Reply-To: <0b90a179-aa4b-57f7-0874-996d5c535ea9@linaro.org>
User-Agent: Mutt/1.9.4 (2018-02-28)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi Daniel,

On Wed, Dec 12, 2018 at 04:07:53PM +0100, Daniel Lezcano wrote:
> On 10/12/2018 18:35, Manivannan Sadhasivam wrote:
> > Add clock driver for RDA Micro RDA8810PL SoC supporting OSTIMER
> > and HWTIMER.
> > 
> > RDA8810PL has two independent timers: OSTIMER (56 bit) and HWTIMER
> > (64 bit). Each timer provides optional interrupt support. In this
> > driver, OSTIMER is used for clockevents and HWTIMER is used for
> > clocksource.
> > 
> > Signed-off-by: Andreas Färber <afaerber@suse.de>
> > Signed-off-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
> 
> The driver looks good to me. Do you want me to pick it up via my tree?
> 

Yes, please do. Marc is going to pick up the irqchip driver but I'm not
sure about the serial driver. The rest of the patches can be picked up
by the ARM maintainers (I need to send another version for dropping
Andreas from MAINTAINERS).

Thanks,
Mani

> > ---
> >  drivers/clocksource/Kconfig     |   8 ++
> >  drivers/clocksource/Makefile    |   1 +
> >  drivers/clocksource/timer-rda.c | 195 ++++++++++++++++++++++++++++++++
> >  3 files changed, 204 insertions(+)
> >  create mode 100644 drivers/clocksource/timer-rda.c
> > 
> > diff --git a/drivers/clocksource/Kconfig b/drivers/clocksource/Kconfig
> > index 55c77e44bb2d..598b592e03d7 100644
> > --- a/drivers/clocksource/Kconfig
> > +++ b/drivers/clocksource/Kconfig
> > @@ -105,6 +105,14 @@ config OWL_TIMER
> >  	help
> >  	  Enables the support for the Actions Semi Owl timer driver.
> >  
> > +config RDA_TIMER
> > +	bool "RDA timer driver" if COMPILE_TEST
> > +	depends on GENERIC_CLOCKEVENTS
> > +	select CLKSRC_MMIO
> > +	select TIMER_OF
> > +	help
> > +	  Enables the support for the RDA Micro timer driver.
> > +
> >  config SUN4I_TIMER
> >  	bool "Sun4i timer driver" if COMPILE_TEST
> >  	depends on HAS_IOMEM
> > diff --git a/drivers/clocksource/Makefile b/drivers/clocksource/Makefile
> > index dd9138104568..150020a90707 100644
> > --- a/drivers/clocksource/Makefile
> > +++ b/drivers/clocksource/Makefile
> > @@ -57,6 +57,7 @@ obj-$(CONFIG_OXNAS_RPS_TIMER)	+= timer-oxnas-rps.o
> >  obj-$(CONFIG_OWL_TIMER)		+= timer-owl.o
> >  obj-$(CONFIG_SPRD_TIMER)	+= timer-sprd.o
> >  obj-$(CONFIG_NPCM7XX_TIMER)	+= timer-npcm7xx.o
> > +obj-$(CONFIG_RDA_TIMER)		+= timer-rda.o
> >  
> >  obj-$(CONFIG_ARC_TIMERS)		+= arc_timer.o
> >  obj-$(CONFIG_ARM_ARCH_TIMER)		+= arm_arch_timer.o
> > diff --git a/drivers/clocksource/timer-rda.c b/drivers/clocksource/timer-rda.c
> > new file mode 100644
> > index 000000000000..fd1199c189bf
> > --- /dev/null
> > +++ b/drivers/clocksource/timer-rda.c
> > @@ -0,0 +1,195 @@
> > +// SPDX-License-Identifier: GPL-2.0+
> > +/*
> > + * RDA8810PL SoC timer driver
> > + *
> > + * Copyright RDA Microelectronics Company Limited
> > + * Copyright (c) 2017 Andreas Färber
> > + * Copyright (c) 2018 Manivannan Sadhasivam
> > + *
> > + * RDA8810PL has two independent timers: OSTIMER (56 bit) and HWTIMER (64 bit).
> > + * Each timer provides optional interrupt support. In this driver, OSTIMER is
> > + * used for clockevents and HWTIMER is used for clocksource.
> > + */
> > +
> > +#include <linux/init.h>
> > +#include <linux/interrupt.h>
> > +
> > +#include "timer-of.h"
> > +
> > +#define RDA_OSTIMER_LOADVAL_L	0x000
> > +#define RDA_OSTIMER_CTRL	0x004
> > +#define RDA_HWTIMER_LOCKVAL_L	0x024
> > +#define RDA_HWTIMER_LOCKVAL_H	0x028
> > +#define RDA_TIMER_IRQ_MASK_SET	0x02c
> > +#define RDA_TIMER_IRQ_MASK_CLR	0x030
> > +#define RDA_TIMER_IRQ_CLR	0x034
> > +
> > +#define RDA_OSTIMER_CTRL_ENABLE		BIT(24)
> > +#define RDA_OSTIMER_CTRL_REPEAT		BIT(28)
> > +#define RDA_OSTIMER_CTRL_LOAD		BIT(30)
> > +
> > +#define RDA_TIMER_IRQ_MASK_OSTIMER	BIT(0)
> > +
> > +#define RDA_TIMER_IRQ_CLR_OSTIMER	BIT(0)
> > +
> > +static int rda_ostimer_start(void __iomem *base, bool periodic, u64 cycles)
> > +{
> > +	u32 ctrl, load_l;
> > +
> > +	load_l = (u32)cycles;
> > +	ctrl = ((cycles >> 32) & 0xffffff);
> > +	ctrl |= RDA_OSTIMER_CTRL_LOAD | RDA_OSTIMER_CTRL_ENABLE;
> > +	if (periodic)
> > +		ctrl |= RDA_OSTIMER_CTRL_REPEAT;
> > +	/* Enable ostimer interrupt first */
> > +	writel_relaxed(RDA_TIMER_IRQ_MASK_OSTIMER,
> > +		       base + RDA_TIMER_IRQ_MASK_SET);
> > +
> > +	/* Write low 32 bits first, high 24 bits are with ctrl */
> > +	writel_relaxed(load_l, base + RDA_OSTIMER_LOADVAL_L);
> > +	writel_relaxed(ctrl, base + RDA_OSTIMER_CTRL);
> > +
> > +	return 0;
> > +}
> > +
> > +static int rda_ostimer_stop(void __iomem *base)
> > +{
> > +	/* Disable ostimer interrupt first */
> > +	writel_relaxed(RDA_TIMER_IRQ_MASK_OSTIMER,
> > +		       base + RDA_TIMER_IRQ_MASK_CLR);
> > +
> > +	writel_relaxed(0, base + RDA_OSTIMER_CTRL);
> > +
> > +	return 0;
> > +}
> > +
> > +static int rda_ostimer_set_state_shutdown(struct clock_event_device *evt)
> > +{
> > +	struct timer_of *to = to_timer_of(evt);
> > +
> > +	rda_ostimer_stop(timer_of_base(to));
> > +
> > +	return 0;
> > +}
> > +
> > +static int rda_ostimer_set_state_oneshot(struct clock_event_device *evt)
> > +{
> > +	struct timer_of *to = to_timer_of(evt);
> > +
> > +	rda_ostimer_stop(timer_of_base(to));
> > +
> > +	return 0;
> > +}
> > +
> > +static int rda_ostimer_set_state_periodic(struct clock_event_device *evt)
> > +{
> > +	struct timer_of *to = to_timer_of(evt);
> > +	unsigned long cycles_per_jiffy;
> > +
> > +	rda_ostimer_stop(timer_of_base(to));
> > +
> > +	cycles_per_jiffy = ((unsigned long long)NSEC_PER_SEC / HZ *
> > +			     evt->mult) >> evt->shift;
> > +	rda_ostimer_start(timer_of_base(to), true, cycles_per_jiffy);
> > +
> > +	return 0;
> > +}
> > +
> > +static int rda_ostimer_tick_resume(struct clock_event_device *evt)
> > +{
> > +	return 0;
> > +}
> > +
> > +static int rda_ostimer_set_next_event(unsigned long evt,
> > +				      struct clock_event_device *ev)
> > +{
> > +	struct timer_of *to = to_timer_of(ev);
> > +
> > +	rda_ostimer_start(timer_of_base(to), false, evt);
> > +
> > +	return 0;
> > +}
> > +
> > +static irqreturn_t rda_ostimer_interrupt(int irq, void *dev_id)
> > +{
> > +	struct clock_event_device *evt = dev_id;
> > +	struct timer_of *to = to_timer_of(evt);
> > +
> > +	/* clear timer int */
> > +	writel_relaxed(RDA_TIMER_IRQ_CLR_OSTIMER,
> > +		       timer_of_base(to) + RDA_TIMER_IRQ_CLR);
> > +
> > +	if (evt->event_handler)
> > +		evt->event_handler(evt);
> > +
> > +	return IRQ_HANDLED;
> > +}
> > +
> > +static struct timer_of rda_ostimer_of = {
> > +	.flags = TIMER_OF_IRQ | TIMER_OF_BASE,
> > +
> > +	.clkevt = {
> > +		.name = "rda-ostimer",
> > +		.rating = 250,
> > +		.features = CLOCK_EVT_FEAT_PERIODIC | CLOCK_EVT_FEAT_ONESHOT |
> > +			    CLOCK_EVT_FEAT_DYNIRQ,
> > +		.set_state_shutdown = rda_ostimer_set_state_shutdown,
> > +		.set_state_oneshot = rda_ostimer_set_state_oneshot,
> > +		.set_state_periodic = rda_ostimer_set_state_periodic,
> > +		.tick_resume = rda_ostimer_tick_resume,
> > +		.set_next_event	= rda_ostimer_set_next_event,
> > +	},
> > +
> > +	.of_base = {
> > +		.name = "rda-timer",
> > +		.index = 0,
> > +	},
> > +
> > +	.of_irq = {
> > +		.name = "ostimer",
> > +		.handler = rda_ostimer_interrupt,
> > +		.flags = IRQF_TIMER,
> > +	},
> > +};
> > +
> > +static u64 rda_hwtimer_read(struct clocksource *cs)
> > +{
> > +	void __iomem *base = timer_of_base(&rda_ostimer_of);
> > +	u32 lo, hi;
> > +
> > +	/* Always read low 32 bits first */
> > +	do {
> > +		lo = readl_relaxed(base + RDA_HWTIMER_LOCKVAL_L);
> > +		hi = readl_relaxed(base + RDA_HWTIMER_LOCKVAL_H);
> > +	} while (hi != readl_relaxed(base + RDA_HWTIMER_LOCKVAL_H));
> > +
> > +	return ((u64)hi << 32) | lo;
> > +}
> > +
> > +static struct clocksource rda_hwtimer_clocksource = {
> > +	.name           = "rda-timer",
> > +	.rating         = 400,
> > +	.read           = rda_hwtimer_read,
> > +	.mask           = CLOCKSOURCE_MASK(64),
> > +	.flags          = CLOCK_SOURCE_IS_CONTINUOUS,
> > +};
> > +
> > +static int __init rda_timer_init(struct device_node *np)
> > +{
> > +	unsigned long rate = 2000000;
> > +	int ret;
> > +
> > +	ret = timer_of_init(np, &rda_ostimer_of);
> > +	if (ret)
> > +		return ret;
> > +
> > +	clocksource_register_hz(&rda_hwtimer_clocksource, rate);
> > +
> > +	clockevents_config_and_register(&rda_ostimer_of.clkevt, rate,
> > +					0x2, UINT_MAX);
> > +
> > +	return 0;
> > +}
> > +
> > +TIMER_OF_DECLARE(rda8810pl, "rda,8810pl-timer", rda_timer_init);
> > 
> 
> 
> -- 
>  <http://www.linaro.org/> Linaro.org │ Open source software for ARM SoCs
> 
> Follow Linaro:  <http://www.facebook.com/pages/Linaro> Facebook |
> <http://twitter.com/#!/linaroorg> Twitter |
> <http://www.linaro.org/linaro-blog/> Blog
> 
