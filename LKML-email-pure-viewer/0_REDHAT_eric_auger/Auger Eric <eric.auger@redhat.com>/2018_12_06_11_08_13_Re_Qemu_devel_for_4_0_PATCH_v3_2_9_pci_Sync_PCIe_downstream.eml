Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:44:32 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 28D58580433
	for <like.xu@linux.intel.com>; Thu,  6 Dec 2018 03:15:37 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 03:15:36 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AqbNvrBM4VgLn9WddjpMl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0K/z7o8bcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRthfVyJBDI2/?=
 =?us-ascii?q?YYUAAeUOMuREoIfyulUOtRmzCwujCe/yxDJEmmH53bYh3uQ9EwzLxhAsE84AvX?=
 =?us-ascii?q?nWqtj+KaccUfqyzKnN1TjOc+5W2Tjj54jSbxsvruuMXbNsfsHMzkQgCRnFjlSM?=
 =?us-ascii?q?poD/JTyVy+sNvHaB7+d7T+KglXMoqwFrrTiz3Msjlo7JhocMx13C6C53w541KM?=
 =?us-ascii?q?WmREJnYtOoCoZcuzyZOodsXM8vTWFltDwnxrAEoZK3YjQGxZA9yxLCZfGLbZKE?=
 =?us-ascii?q?7g/gWeufOzt0mnFodbSijBio60eg0PfzVsys3VZKsCVFlt7Mu2gJ1xzS8ciHVu?=
 =?us-ascii?q?B98l2u2TaJygDf8OZEIVo7labDKp4hxKA/loYLvEjdAiP7m1/6gLKLekgn4OSk?=
 =?us-ascii?q?9erqb7X8qpOBNYJ4kgT+Pb4vmsy7D+Q4KA8OX22D9OSlyrLj+FD5TKxXgfIojK?=
 =?us-ascii?q?nWrpTaKd0Aqa6+Hg9V1Jos5AikDzuh1NQYnHoHI0xfdBOIkojkI1XOIPH+Dfei?=
 =?us-ascii?q?jFWgijZrx/baPrL/BpXBNGTMkLDkfbtm7U5czwwzzd9Z55JJEL0BJ+jzWkDpuN?=
 =?us-ascii?q?zCEhA5KxC0w/rgCNhl0oMeWGGPDbGDPKLdrF+F/eYvI+iKZI8ItzfxMfkl5/jy?=
 =?us-ascii?q?jXAnnV8RZ7Wm3ZwSaCPwI/J9Pk/MYWbwmsxTViAOvxEiV6rsj1uNVyMVYGy9GK?=
 =?us-ascii?q?c15zU+AYThCp/fR4erm/uY0SKmW5FbeG1CWW2KCmriIoCNWvMQb3CLL8p81zAJ?=
 =?us-ascii?q?S7WlDpUszAyjrxPSzb1hIezJvCoCusX4ydJ36ubPwAw07iF+FM+H0muAHF1zy0?=
 =?us-ascii?q?oMSi9+46F7pU10z0yE1+AsivhVBZpM5vdNUw4/Lpna5/Z3B9D7RkTKedLfDB6/?=
 =?us-ascii?q?T9C7RD08UN8169kJZUl7BpOllB+Q8TCtBuo8irOGHtQZ6KPXlyz8Pcd2jX/b26?=
 =?us-ascii?q?Q7p0MrTstGKSutgasppFubPJLAj0jMz/XiTq8bxiOYsT7blWc=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0APAACjAQlchxHrdtBkGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUwQBAQELAYEwgk8Tg3qIeI0OLYkSjjyBcxQYFIdWIjYHDQEDAQEBAQE?=
 =?us-ascii?q?BAgETAQEBCgsJCBsOL4I2BQIDGgEGglwBAgMBAiAEHwopAwMBAgYBAQoYAgIiB?=
 =?us-ascii?q?AICAwEdNgYBDAYCAQEBgxyBagMVAQSlVnwzhUCCQg2CHIELixOCFoE4gjY1gle?=
 =?us-ascii?q?CBAqDIIJXAo99kDQuBwKOGIMoBhhffYgFECaHHokOhXmKBIFNBIICMxojgzyCJ?=
 =?us-ascii?q?xcSjgxAMYEHHId/VYF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0APAACjAQlchxHrdtBkGwEBAQEDAQEBBwMBAQGBUwQBAQE?=
 =?us-ascii?q?LAYEwgk8Tg3qIeI0OLYkSjjyBcxQYFIdWIjYHDQEDAQEBAQEBAgETAQEBCgsJC?=
 =?us-ascii?q?BsOL4I2BQIDGgEGglwBAgMBAiAEHwopAwMBAgYBAQoYAgIiBAICAwEdNgYBDAY?=
 =?us-ascii?q?CAQEBgxyBagMVAQSlVnwzhUCCQg2CHIELixOCFoE4gjY1gleCBAqDIIJXAo99k?=
 =?us-ascii?q?DQuBwKOGIMoBhhffYgFECaHHokOhXmKBIFNBIICMxojgzyCJxcSjgxAMYEHHId?=
 =?us-ascii?q?/VYF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,322,1539673200"; 
   d="scan'208";a="141019865"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 06 Dec 2018 03:15:36 -0800
Received: from localhost ([::1]:40150 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gUrd1-0007MA-I3
	for like.xu@linux.intel.com; Thu, 06 Dec 2018 06:15:35 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:51111)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <eric.auger@redhat.com>) id 1gUrW8-0008Ve-2y
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 06:08:32 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <eric.auger@redhat.com>) id 1gUrW3-0002XH-Mw
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 06:08:27 -0500
Received: from mx1.redhat.com ([209.132.183.28]:37338)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <eric.auger@redhat.com>)
	id 1gUrW3-0002Wb-DQ
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 06:08:23 -0500
Received: from smtp.corp.redhat.com (int-mx07.intmail.prod.int.phx2.redhat.com
	[10.5.11.22])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id B9A0913A9E;
	Thu,  6 Dec 2018 11:08:22 +0000 (UTC)
Received: from [10.36.117.0] (unknown [10.36.117.0])
	by smtp.corp.redhat.com (Postfix) with ESMTPS id EF3B21001F54;
	Thu,  6 Dec 2018 11:08:14 +0000 (UTC)
To: Alex Williamson <alex.williamson@redhat.com>, qemu-devel@nongnu.org
References: <154393964026.28192.13536237934563059985.stgit@gimli.home>
	<154394077152.28192.11886427713872503309.stgit@gimli.home>
From: Auger Eric <eric.auger@redhat.com>
Message-ID: <06c7a549-51ef-b7db-a30c-17d02b625b72@redhat.com>
Date: Thu, 6 Dec 2018 12:08:13 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
	Thunderbird/60.3.0
MIME-Version: 1.0
In-Reply-To: <154394077152.28192.11886427713872503309.stgit@gimli.home>
Content-Type: text/plain; charset=utf-8
Content-Language: en-US
Content-Transfer-Encoding: 7bit
X-Scanned-By: MIMEDefang 2.84 on 10.5.11.22
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.29]);
	Thu, 06 Dec 2018 11:08:22 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [for-4.0 PATCH v3 2/9] pci: Sync PCIe downstream
 port LNKSTA on read
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Geoffrey McRae <geoff@hostfission.com>,
	"Michael S. Tsirkin" <mst@redhat.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Hi Alex,

On 12/4/18 5:26 PM, Alex Williamson wrote:
> The PCIe link speed and width between a downstream device and its
> upstream port is negotiated on real hardware and susceptible to
> dynamic changes due to signal issues and power management.  In the
> emulated device case there is no real hardware link, but we still
> might wish to have some consistency between endpoint and downstream
> port via a virtual negotiation.  There is of course a real link for
> assigned devices and this same virtual negotiation allows the
> downstream port to match the endpoint, synchronizing on every read
> to support underlying physical hardware dynamically adjusting the
> link.
> 
> This negotiation is intentionally unidirectional for compatibility.
> If the endpoint exceeds the capabilities of the downstream port or
> there is no endpoint device, the downstream port reports negotiation
> to its maximum speed and width, matching the previous case where
> negotiation was absent.  De-tuning the endpoint to match a virtual
> link doesn't seem to benefit anyone and is a condition we've thus
> far reported without functional issues.
> 
> Note that PCI_EXP_LNKSTA is already ignored for migration
> compatibility via pcie_cap_v1_fill().
> 
> Cc: Michael S. Tsirkin <mst@redhat.com>
> Cc: Marcel Apfelbaum <marcel.apfelbaum@gmail.com>
> Tested-by: Geoffrey McRae <geoff@hostfission.com>
> Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
Reviewed-by: Eric Auger <eric.auger@redhat.com>

Thanks

Eric
> ---
>  hw/pci/pci.c          |    4 ++++
>  hw/pci/pcie.c         |   39 +++++++++++++++++++++++++++++++++++++++
>  include/hw/pci/pci.h  |   13 +++++++++++++
>  include/hw/pci/pcie.h |    1 +
>  4 files changed, 57 insertions(+)
> 
> diff --git a/hw/pci/pci.c b/hw/pci/pci.c
> index 56b13b3320ec..495db3b9e18a 100644
> --- a/hw/pci/pci.c
> +++ b/hw/pci/pci.c
> @@ -1353,6 +1353,10 @@ uint32_t pci_default_read_config(PCIDevice *d,
>  {
>      uint32_t val = 0;
>  
> +    if (pci_is_express_downstream_port(d) &&
> +        ranges_overlap(address, len, d->exp.exp_cap + PCI_EXP_LNKSTA, 2)) {
> +        pcie_sync_bridge_lnk(d);
> +    }
>      memcpy(&val, d->config + address, len);
>      return le32_to_cpu(val);
>  }
> diff --git a/hw/pci/pcie.c b/hw/pci/pcie.c
> index 914a5261a79b..61b7b96c52cd 100644
> --- a/hw/pci/pcie.c
> +++ b/hw/pci/pcie.c
> @@ -729,6 +729,45 @@ void pcie_add_capability(PCIDevice *dev,
>      memset(dev->cmask + offset, 0xFF, size);
>  }
>  
> +/*
> + * Sync the PCIe Link Status negotiated speed and width of a bridge with the
> + * downstream device.  If downstream device is not present, re-write with the
> + * Link Capability fields.  Limit width and speed to bridge capabilities for
> + * compatibility.  Use config_read to access the downstream device since it
> + * could be an assigned device with volatile link information.
> + */
> +void pcie_sync_bridge_lnk(PCIDevice *bridge_dev)
> +{
> +    PCIBridge *br = PCI_BRIDGE(bridge_dev);
> +    PCIBus *bus = pci_bridge_get_sec_bus(br);
> +    PCIDevice *target = bus->devices[0];
> +    uint8_t *exp_cap = bridge_dev->config + bridge_dev->exp.exp_cap;
> +    uint16_t lnksta, lnkcap = pci_get_word(exp_cap + PCI_EXP_LNKCAP);
> +
> +    if (!target || !target->exp.exp_cap) {
> +        lnksta = lnkcap;
> +    } else {
> +        lnksta = target->config_read(target,
> +                                     target->exp.exp_cap + PCI_EXP_LNKSTA,
> +                                     sizeof(lnksta));
> +
> +        if ((lnksta & PCI_EXP_LNKSTA_NLW) > (lnkcap & PCI_EXP_LNKCAP_MLW)) {
> +            lnksta &= ~PCI_EXP_LNKSTA_NLW;
> +            lnksta |= lnkcap & PCI_EXP_LNKCAP_MLW;
> +        }
> +
> +        if ((lnksta & PCI_EXP_LNKSTA_CLS) > (lnkcap & PCI_EXP_LNKCAP_SLS)) {
> +            lnksta &= ~PCI_EXP_LNKSTA_CLS;
> +            lnksta |= lnkcap & PCI_EXP_LNKCAP_SLS;
> +        }
> +    }
> +
> +    pci_word_test_and_clear_mask(exp_cap + PCI_EXP_LNKSTA,
> +                                 PCI_EXP_LNKSTA_CLS | PCI_EXP_LNKSTA_NLW);
> +    pci_word_test_and_set_mask(exp_cap + PCI_EXP_LNKSTA, lnksta &
> +                               (PCI_EXP_LNKSTA_CLS | PCI_EXP_LNKSTA_NLW));
> +}
> +
>  /**************************************************************************
>   * pci express extended capability helper functions
>   */
> diff --git a/include/hw/pci/pci.h b/include/hw/pci/pci.h
> index e6514bba23aa..eb12fa112ed2 100644
> --- a/include/hw/pci/pci.h
> +++ b/include/hw/pci/pci.h
> @@ -737,6 +737,19 @@ static inline int pci_is_express(const PCIDevice *d)
>      return d->cap_present & QEMU_PCI_CAP_EXPRESS;
>  }
>  
> +static inline int pci_is_express_downstream_port(const PCIDevice *d)
> +{
> +    uint8_t type;
> +
> +    if (!pci_is_express(d) || !d->exp.exp_cap) {
> +        return 0;
> +    }
> +
> +    type = pcie_cap_get_type(d);
> +
> +    return type == PCI_EXP_TYPE_DOWNSTREAM || type == PCI_EXP_TYPE_ROOT_PORT;
> +}
> +
>  static inline uint32_t pci_config_size(const PCIDevice *d)
>  {
>      return pci_is_express(d) ? PCIE_CONFIG_SPACE_SIZE : PCI_CONFIG_SPACE_SIZE;
> diff --git a/include/hw/pci/pcie.h b/include/hw/pci/pcie.h
> index b71e36970345..1976909ab4c8 100644
> --- a/include/hw/pci/pcie.h
> +++ b/include/hw/pci/pcie.h
> @@ -126,6 +126,7 @@ uint16_t pcie_find_capability(PCIDevice *dev, uint16_t cap_id);
>  void pcie_add_capability(PCIDevice *dev,
>                           uint16_t cap_id, uint8_t cap_ver,
>                           uint16_t offset, uint16_t size);
> +void pcie_sync_bridge_lnk(PCIDevice *dev);
>  
>  void pcie_ari_init(PCIDevice *dev, uint16_t offset, uint16_t nextfn);
>  void pcie_dev_ser_num_init(PCIDevice *dev, uint16_t offset, uint64_t ser_num);
> 
> 

