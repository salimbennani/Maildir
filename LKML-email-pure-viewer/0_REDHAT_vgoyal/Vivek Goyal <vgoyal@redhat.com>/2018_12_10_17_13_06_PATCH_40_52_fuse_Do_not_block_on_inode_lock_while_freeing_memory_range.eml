Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 11 Dec 2018 08:40:29 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 7116D580380;
	Mon, 10 Dec 2018 09:17:48 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga005-1.jf.intel.com with ESMTP; 10 Dec 2018 09:17:48 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ACmz3VBEUTLVk58a6IC48Op1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75o8i+bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjmk8qxlSgLniD?=
 =?us-ascii?q?0fOjA57m/Zl8J+gqFZrxKvvBx/24zZbZqJOPZiZK7RYc8WSXZdUstXSidPApm8?=
 =?us-ascii?q?b4wKD+cZMulYrpf9qEUNrRCjBAesA+PuxSVMhnTr2qA6zeshEQbG3QM6G9IDq2?=
 =?us-ascii?q?7Uo8voO6cSS++10LPEwinEb/NTwDrw7pXDfBM5ofyUQ758bc7cxVMyGw7LkFmc?=
 =?us-ascii?q?s5HpMjCJ2ugXsmWW7fJsWfyzh2MjsQ19vzaiytk2hoXUhY8YxErI+Tt6zYszON?=
 =?us-ascii?q?a2UlR0YcS+H5tVryyaN5V5QsclQ2xwpiY6xaMJuYShcCgJ1psn3RjfZOKDc4SS?=
 =?us-ascii?q?5RLjTumRLS95hHJjZr2/mw6//Va8xuD4TMW4zVhHojRfntXRtX0Bywbf58mFR/?=
 =?us-ascii?q?dl+0euwzeP1wTd6uFeJkA0kLLWK5ogwr42i5oSvl3PHizol0Xsiq+ZaEEk9vGv?=
 =?us-ascii?q?6+XpZLXpuIWcOpRqigHxLKsugNazAecmPQgUWWiU5+C82Kfk/U3jT7VGluc2nb?=
 =?us-ascii?q?XBsJDGOcQboba0AwtU0oYg9RmzFTin0MkDkHkDLVJFfg+HjofzN1HPJvD4Eemw?=
 =?us-ascii?q?g1C2nDh3wPDGO6XrAo/RIXjbjLfhYbF95lZcyAUpzNBf+4hbCrYbLPLzR0/+rt?=
 =?us-ascii?q?rYDhAiPgywwubnDsh914wEVWKOBK+ZLL3dsVuS6u0zJOmMYZcfuCzhJPg9+/7u?=
 =?us-ascii?q?kXg5lEcffamuw5QbcnO4HvNgI0WfZnrhmdMBEWYMvgojQ+3mklyCUThPZ3msW6?=
 =?us-ascii?q?Iw/C00CIWjDY3bXICinKSB3DunHp1Rfm1JEEuMEXfvd4WHQfsMcjidIs16nzwA?=
 =?us-ascii?q?VLihTZIh1B60uA/7zbpnMvTb+ikCuZ3/09h14vXZlQsu+jxsE8Sdz2aNQnl3nm?=
 =?us-ascii?q?wSQT86xqR/oU1nxVeF3qh1mPhYFd1V5/NUXQY2L5/cz+pmC9/sXgLNZMuGSFGj?=
 =?us-ascii?q?Qt++GzE+Usoxw8MSY0Z6A9itkwrM3zS0DLMPl7yEHpo08rnC0Hj3IMp9z3XG1K?=
 =?us-ascii?q?wlj1Q9RstPNGumhrNw9gTJBo7JlVmZmLiudagGwCHN82KDx3KUvE5ESA5wTbnF?=
 =?us-ascii?q?XXcHa0TLt9v5+F3NQ6WuCbs9NAtB0tCNKq1RZ93tjFVGQurjOdvEb2KwnWewGQ?=
 =?us-ascii?q?iHxreWYIX2fGUd2T3XCFIYnAAL4XaGKQ8+Cz+9o2LfCTxuEk7vY0Ps8OVktHO3?=
 =?us-ascii?q?VEg0zxuOb01g0bq19QUYhfidS/MVw7IFtz0tqzRyHFahwd3WD8CMqBZmfKVZed?=
 =?us-ascii?q?k9+ktI1XrFtwxhOZytN7pthloAfAV4oUzv1w97BZ5dkcc3tnwqyglyKaWG0F5a?=
 =?us-ascii?q?czOY3JbwOqDYK2Xo/RCvbbLW1U/a0NqM5qgP7/E4oU35vA61Dkoi72ln095N3n?=
 =?us-ascii?q?qc+5XGFhYdXYjwU0Y37Rd6ob7abzI554PV031sLKa1viXD29IvGOsq1BKgc81D?=
 =?us-ascii?q?P6ODEQ/4C9caCNS2KOw2h1ipaQoJPPpT9KEoJcymbeaJ2KmxMOZmgj2ml2VH7J?=
 =?us-ascii?q?lh3U2W8ypzV/DH34wCw/GexQaHUzb8jFG8ssH4g4xEZDcSHnahxijgHoJeeqpy?=
 =?us-ascii?q?fYMTA2e0P8K33sl+h4LqW3NA9F+jBkkK2c+zdRqJclz92xZd1UAWoXyhhCu5wC?=
 =?us-ascii?q?Z4kzAvrqqDwiPOx/7uewYAOm5OXGNil0vjIZCoj9AGW0ildwopmwG/5Ub5xKhb?=
 =?us-ascii?q?o75zL3LJTkdLfCj2LmdiXbW2treZZ85P6ZUosThYUeimYFCaTKL9rAUe0y/5A2?=
 =?us-ascii?q?RewzU7fSmwuprlhxx6lH6dLHFroXvZY85wwg3T5N7dRf5XxTcGQCh4iT/KBlmz?=
 =?us-ascii?q?JdWp/NOUl4vdveC6TW6uSppTcSzzx4OaqCS7/XFqAQG4n/2rmd3oCwk63TX719?=
 =?us-ascii?q?l3TyrIqhn8b5Lv16S7N+JnY0ZpCEX968p8BoFxjI8wiIsM1ngdg5Wf5WAHnnvr?=
 =?us-ascii?q?MdVHxaL+a2IARTsKw97W+gfpwkNiIWySx4LlSHqd2NBuaMegYmMZwS8968FKCK?=
 =?us-ascii?q?GJ7L1Lhyd1o1y4rR7Pbvh5hDsS1fwu6HsCieETpAUt1jmdAqwVHURAISzskBGI?=
 =?us-ascii?q?48q/rapNYmavbKOw1FF/nd26CLGCowdcWGv2e5s4HC9w6Nl/P0zI0HHp9o7kf9?=
 =?us-ascii?q?zQZ8oJthKIixfAk/RVKJUpm/URnyVnPmb9vWA/x+4/kBxjxpW6vImBK2Vw86O1?=
 =?us-ascii?q?GB9YNjvpZ8wN/jHhl7pRnsGT34q3BJVuBi0LXIf0TfKvCD8St+7oNwOQHz0nsH?=
 =?us-ascii?q?ubBaDTHQyC6EdlsnLPFYqkN2qMKXkdzNViQgSdJUNFjAAVWjU6goA2FgSwyMP9?=
 =?us-ascii?q?d0d54ygb5kTkpRtU1uJoKx7/X3/fpQevdzc0UYWfIwBQ7g1Y/EfVNsqe7u1oEi?=
 =?us-ascii?q?Fc/52hqhGNK2OBawRJC2EJRlKLB1T5Mray4tnA9vCSBvCiIPvWfbWOteteWu+I?=
 =?us-ascii?q?xZ2x04tm/DWMNsSVMnlhFf073UVDUm5jG8TEgDUCUCgXlyPLb86Gqxaw4Cx3rs?=
 =?us-ascii?q?aj8Pv1XALj/5eAC7xXMd934RC5nb+DN/KMhCZ+MTtXzI4MymTSyLcB3F8ekSVu?=
 =?us-ascii?q?dzi2HLQEtC7NSr/Qm6BNAx4abSNzKNVH76Ym0gZRPs7bj8v/1qRkgf4tF1dFSV?=
 =?us-ascii?q?vhl9m1ZcwLJmGxLk/ICFyXO7SGOzLLxdr6Yae9Sb1WkeVVuAe8uTedE0//IDuD?=
 =?us-ascii?q?kyPlWAyoMeFJlCubJgBRuJmhchZxDmjuVNLnZQe9MN9yjD02x6U7h3LKNWEGNz?=
 =?us-ascii?q?h8fFhArrmR7SNen/V+FHZN7ntjLemYhSmZ6/PUJYoRsftuUWxIkLde4XIn2/5b?=
 =?us-ascii?q?9y1JWvFxsDXdo8QooFy8lOSLjD19X14GrjdNmZLOvkh4P6jd3odPVGyC/x8X62?=
 =?us-ascii?q?iUTRMQqJ8tCcPqk75fx8KJl6/pLjpGtdXO8pgyHc/RffyGLncieTXuCTfQRF8b?=
 =?us-ascii?q?Qjm6PGX3nUFRkPiOsHaSq85p+dDXhJMSR+oDBxQOHfQABxE9EQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BNAABIng5ch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBVAQBAQsBg2snjHKLMIIhmTAUGBMBh20iNwYNAQMBAQEBAQECARMBAQEIDQk?=
 =?us-ascii?q?IKS+CNiKCZQMDAQIkUgYJAQFQAykrBxIFgxyCAgWnBTOKIIwhF4FAP4ERgmSLC?=
 =?us-ascii?q?gKJFRqHC1GPagmRRAsYiWaHV4kijF2DMYFcgXgzGggbFTuCbJB5IQEBMYEFAQE?=
 =?us-ascii?q?ci3wBAQ?=
X-IPAS-Result: =?us-ascii?q?A0BNAABIng5ch0O0hNFkHAEBAQQBAQcEAQGBVAQBAQsBg2s?=
 =?us-ascii?q?njHKLMIIhmTAUGBMBh20iNwYNAQMBAQEBAQECARMBAQEIDQkIKS+CNiKCZQMDA?=
 =?us-ascii?q?QIkUgYJAQFQAykrBxIFgxyCAgWnBTOKIIwhF4FAP4ERgmSLCgKJFRqHC1GPagm?=
 =?us-ascii?q?RRAsYiWaHV4kijF2DMYFcgXgzGggbFTuCbJB5IQEBMYEFAQEci3wBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,339,1539673200"; 
   d="scan'208";a="43455464"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 10 Dec 2018 09:17:46 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728933AbeLJRRM (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 10 Dec 2018 12:17:12 -0500
Received: from mx1.redhat.com ([209.132.183.28]:50522 "EHLO mx1.redhat.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1728396AbeLJRNg (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 10 Dec 2018 12:13:36 -0500
Received: from smtp.corp.redhat.com (int-mx01.intmail.prod.int.phx2.redhat.com [10.5.11.11])
        (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
        (No client certificate requested)
        by mx1.redhat.com (Postfix) with ESMTPS id A53CB30DDBD1;
        Mon, 10 Dec 2018 17:13:35 +0000 (UTC)
Received: from horse.redhat.com (unknown [10.18.25.234])
        by smtp.corp.redhat.com (Postfix) with ESMTP id 67FDD6015E;
        Mon, 10 Dec 2018 17:13:35 +0000 (UTC)
Received: by horse.redhat.com (Postfix, from userid 10451)
        id A2DF1224274; Mon, 10 Dec 2018 12:13:30 -0500 (EST)
From: Vivek Goyal <vgoyal@redhat.com>
To: linux-fsdevel@vger.kernel.org, linux-kernel@vger.kernel.org,
        kvm@vger.kernel.org
Cc: vgoyal@redhat.com, miklos@szeredi.hu, stefanha@redhat.com,
        dgilbert@redhat.com, sweil@redhat.com, swhiteho@redhat.com
Subject: [PATCH 40/52] fuse: Do not block on inode lock while freeing memory range
Date: Mon, 10 Dec 2018 12:13:06 -0500
Message-Id: <20181210171318.16998-41-vgoyal@redhat.com>
In-Reply-To: <20181210171318.16998-1-vgoyal@redhat.com>
References: <20181210171318.16998-1-vgoyal@redhat.com>
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.11
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16 (mx1.redhat.com [10.5.110.49]); Mon, 10 Dec 2018 17:13:35 +0000 (UTC)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Once we select a memory range to free, we currently block on inode
lock. Do not block and use trylock instead. And move on to next memory
range if trylock fails.

Reason being that in next few patches I want to enabling waiting for
memmory ranges to become free in fuse_iomap_begin(). So insted of
returning -EBUSY, a process will wait for a memory range to become
free.

We don't want to end up in a situation where process is sleeping in
iomap_begin() with inode lock held and worker is trying to free
memory from same inode, resulting in deadlock.

To avoid deadlock, use trylock instead.

Signed-off-by: Vivek Goyal <vgoyal@redhat.com>
---
 fs/fuse/file.c | 36 ++++++++++++++++++++++++++++--------
 1 file changed, 28 insertions(+), 8 deletions(-)

diff --git a/fs/fuse/file.c b/fs/fuse/file.c
index d86f6e5c4daf..dbe3410a94d7 100644
--- a/fs/fuse/file.c
+++ b/fs/fuse/file.c
@@ -3891,7 +3891,12 @@ int fuse_dax_free_one_mapping(struct fuse_conn *fc, struct inode *inode,
 	int ret;
 	struct fuse_inode *fi = get_fuse_inode(inode);
 
-	inode_lock(inode);
+	/*
+	 * If process is blocked waiting for memory while holding inode
+	 * lock, we will deadlock. So continue to free next range.
+	 */
+	if (!inode_trylock(inode))
+		return -EAGAIN;
 	down_write(&fi->i_mmap_sem);
 	down_write(&fi->i_dmap_sem);
 	ret = fuse_dax_free_one_mapping_locked(fc, inode, dmap_start);
@@ -3903,19 +3908,22 @@ int fuse_dax_free_one_mapping(struct fuse_conn *fc, struct inode *inode,
 
 int fuse_dax_free_memory(struct fuse_conn *fc, unsigned long nr_to_free)
 {
-	struct fuse_dax_mapping *dmap, *pos;
-	int ret, i;
+	struct fuse_dax_mapping *dmap, *pos, *temp;
+	int ret, nr_freed = 0;
 	u64 dmap_start = 0, window_offset = 0;
 	struct inode *inode = NULL;
 
 	/* Pick first busy range and free it for now*/
-	for (i = 0; i < nr_to_free; i++) {
+	while(1) {
+		if (nr_freed >= nr_to_free)
+			break;
+
 		dmap = NULL;
 		spin_lock(&fc->lock);
 
-		list_for_each_entry(pos, &fc->busy_ranges, busy_list) {
-			dmap = pos;
-			inode = igrab(dmap->inode);
+		list_for_each_entry_safe(pos, temp, &fc->busy_ranges,
+						busy_list) {
+			inode = igrab(pos->inode);
 			/*
 			 * This inode is going away. That will free
 			 * up all the ranges anyway, continue to
@@ -3923,6 +3931,13 @@ int fuse_dax_free_memory(struct fuse_conn *fc, unsigned long nr_to_free)
 			 */
 			if (!inode)
 				continue;
+			/*
+			 * Take this element off list and add it tail. If
+			 * inode lock can't be obtained, this will help with
+			 * selecting new element
+			 */
+			dmap = pos;
+			list_move_tail(&dmap->busy_list, &fc->busy_ranges);
 			dmap_start = dmap->start;
 			window_offset = dmap->window_offset;
 			break;
@@ -3933,11 +3948,16 @@ int fuse_dax_free_memory(struct fuse_conn *fc, unsigned long nr_to_free)
 
 		ret = fuse_dax_free_one_mapping(fc, inode, dmap_start);
 		iput(inode);
-		if (ret) {
+		if (ret && ret != -EAGAIN) {
 			printk("%s(window_offset=0x%llx) failed. err=%d\n",
 				__func__, window_offset, ret);
 			return ret;
 		}
+
+		/* Could not get inode lock. Try next element */
+		if (ret == -EAGAIN)
+			continue;
+		nr_freed++;
 	}
 	return 0;
 }
-- 
2.13.6

