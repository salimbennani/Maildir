Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:53:00 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 40A76580375;
	Thu,  6 Dec 2018 12:25:19 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga006-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 12:25:19 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Abq+uBBfNQjU3iq95bB/qj2twlGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc6+YRGN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRcDI2i?=
 =?us-ascii?q?YYsBD+kPM+hWoIbypVQBsRSwBRK0BO7t0TJImn370Lcm3+g9HwzL3gotFM8Ovn?=
 =?us-ascii?q?TOq9X1Mb8fX/yyzKbTzDXDae5d1zDg6IjSahAhofGNVq93fMrLzkkgDALFjlOK?=
 =?us-ascii?q?pYzgIjOVzPwNs2ib7ud7T+2vkWsnpxttrTiow8chk4/EjZ8WxFDc7Sh13po5KN?=
 =?us-ascii?q?miREJmb9OoDoFcuzyZOodqWM8vQmNltD4kxrEbu5O3ZjUGxZs7yxLFdvCLb5WE?=
 =?us-ascii?q?7gjhWeqNJzpzmWhrd6ilhxmo9Eit0u38Wdew0FZNtidFjNbMuW4X1xDJ6ciIVO?=
 =?us-ascii?q?F9/kG/1jaLzQzT7ftEIU8smaraLZ4u3KIwm4INvUjfGiL6glj6gaGIekk+5+Sl?=
 =?us-ascii?q?6Pjrbq/nq5KeL4N0jxvxMqUqmsyxG+Q4NQ0OUnCf+eS90r3j4EL4TKxJjvIoiK?=
 =?us-ascii?q?nZto7VJcACqq6+DQ5V1Jgs6wykAje439QXg2MHIEhGeB2ZlYjpPU/BIPTiAfe4?=
 =?us-ascii?q?mVSsny9nx+raMb35HpXNMn/Dna/lfbZ86E5T1hA/zN9C559PDrEBIfTzWlL+td?=
 =?us-ascii?q?DCDx85NRC0zPjjCNlnyoweXmePCLeDMKzOqV+I+v4vI+6UaY8Vojn9KuQl6OTp?=
 =?us-ascii?q?jXMjmV8dYLOm3Z0YaH2jGvRmIkOZYWfjg9sbEGcKuBY+Q/LuiFGYTTFTYHOyVb?=
 =?us-ascii?q?om5j4nEIKmEZvDRoe1jbyD2ye0AIdaZmNBClCKF3focJ6JW/MNaCKUP89gnSYI?=
 =?us-ascii?q?VbmnS489yx6usBX2xKZgLurR4icYr47s1MBp5+3PkhE/7SZ7D9+d02GKTGF4hH?=
 =?us-ascii?q?kISCU03K1kpUx9y1GD0bV3gvBCFNxT4e9JXRk+NZLG0+N6DNXyUBrbftiVUFam?=
 =?us-ascii?q?XsmmATYpQ9Iy2dAOZVxxG9Gjjh/Z2SqqDKQYl7iKBJwy76Ld0GL9J8d7y3bayq?=
 =?us-ascii?q?Yhi0MqTddINW2jnqR/7RTcB5bVk0WFkKanbbkT0zTT9Gid12aOvFtXUAhrUarb?=
 =?us-ascii?q?W3ATYU/Wrdf85kPGVLKuDbUnMg1cyc+NMKdKa9vpjUlYS/fnItjRf2Wxm2KoDx?=
 =?us-ascii?q?aS2ryMdJbqe3ka3CjFFUcLiR4T8micOQg+HCihpXneAyJoFV/0Z0Ps8O9+qG60?=
 =?us-ascii?q?T0MuzgGKaVFh2KSx+hIPmfOcTPYT1KoeuCg9szV0AEq939XOBtqcpgpheaJcYc?=
 =?us-ascii?q?894FZHz27ZqxZxPpu6L6Bmh14edQt3sljq1xV2DIVAjMcroGkrzAp0NaKXzldB?=
 =?us-ascii?q?eymE0pD3P73dMnPy8wy3a67KxlHe186b9b0L6PsmpFTsogGoGlA5/HV6ztZayX?=
 =?us-ascii?q?2c5pbNDAoMSp/xVkc39x5np7DVeCU95oXU1WFyPqmwqDPNx9UpBO49wBa6Y9hf?=
 =?us-ascii?q?KL+EFBP1E8ACB8muNfYmlESzYhMFPOBd7qg0P8y9evuC2a6rOvtgnT28gWRG5o?=
 =?us-ascii?q?B9zlyD9y5mRuHU2JYFxumS3hGbWDfkkFehrsf3lJheZTETAmWw0zLkC5NWZqFo?=
 =?us-ascii?q?e4YEF32uI8yuytpinZHtX2NX+0C5B1MB3s+kYh6Sb1373Q1N2kUbu32nmS2kzz?=
 =?us-ascii?q?NqlzEltLaQ3CvLw+76bhoIJnZLRHV+jVfrOYW1j9EaUFKobgQzjxul+ED6yrNf?=
 =?us-ascii?q?pKR+KWnTXEhJczL3L2FkTqu/qL6Cb9RT55MvtCVdSP68bkyCSr7hvxsa1DvuH2?=
 =?us-ascii?q?lEyzAhdDGquZL5kwZhiG2HL3Zzr3vZecduyhfZ/9HcQf9R3jwbRCh3kzXXB168?=
 =?us-ascii?q?P8W38tWQjZvMrue+V2e5XJ1JbSbr1Z+AtDe85WByARywhfezlsflEQg71y/2zN?=
 =?us-ascii?q?1qVSTOrBbhbYjnzaW6MeR7fkZ2AF/w8dZ1GoZ7koEonpEfxWAahomJ/XoAiWrz?=
 =?us-ascii?q?Ms9U2aPkYHoNWD4E2djV4Af+1U1nL3KJwZ/5V3qHzstgYdm6fn0Z2iYn489WD6?=
 =?us-ascii?q?eU6aROnTFprVqgsQLRff99ky8Yyfsv634VmfsFuQQzwSWGHrAdA1NYMjfymBSS?=
 =?us-ascii?q?4NCzt6FXZGepcbit20tyh9GhDLeeog5CXHb1YIstHSh17s9nKlLDzGXz6p34eN?=
 =?us-ascii?q?nXdd8TqhqUkxLag+lUMp0xkOcKhTF8OWL8pnAlz+87jRpz3ZC1poSHKmNt/L6n?=
 =?us-ascii?q?DR5cLDH6e8QT+jT1h6ZEgsmWx5yvHolmGjgTR5TnV/WoEDYPtfj9MwaODSYxqn?=
 =?us-ascii?q?OaGbrZAA+e511qr3PJE5C3KX6XIGMVwsllRBmYPEZfmhwbXC0mnp4lEQCn3M7h?=
 =?us-ascii?q?f1185j8P/V70sAdMxvhrNxniUWffuQGoZS0vSJWEKBpW7wdC51raMMCE7+JzGT?=
 =?us-ascii?q?1Y8YOlrACXNmObYAFIB3kTWkOYH1DjIqWu5d7Y/umYAeq+MuLOYaiUpuxYTfuI?=
 =?us-ascii?q?3pWv0o1p/zuXMsWPP39iD+A020ZZXHB5HdjZlCsLSyANiy3NaMubrg+m+iJrts?=
 =?us-ascii?q?C/7OjrWAX36IuPFbRSMNZv+xO3gauZNO6QniF5KTlG2ZMW2H/I06MS3FoTiyFo?=
 =?us-ascii?q?ajmsHq4MtS/LTKLMhKBXCwQXZD90NMtN96g8xBVCOdbHitPp0b51luQ6C0peWl?=
 =?us-ascii?q?z7hM6oZdYGI2W8NF7cAEaLNbKGJSDEws3tYKO8T6FQg/tQtxGqpTmbFErjNCyZ?=
 =?us-ascii?q?lzb1TxCvLf1MjCaDMRxCuYG9dwxhBnT5QN36ah20Ltl3gCYywb01gHPKKGEdPS?=
 =?us-ascii?q?J9c0NLsr2f8ydYju9jFGxG63pvNfOElDqB7+nENpYWtuNmAyRumOJc5XQ6yr1V?=
 =?us-ascii?q?4zlFRfx1giTSqNFurkqikumOzDpnTRVPpixKhIKNoUVtJ6HZ+oNcVnbD+RJepV?=
 =?us-ascii?q?mXXj8Kvdp+Ftr3u+hwx9zLi6P8YGNC+NL8+dAAQcTZfpGpKn0kZCDuEj/SRC4Y?=
 =?us-ascii?q?VyarJCmLnUtXkffU82CPtpgrgpH2ndwFTboNBw99Le8TFkkwRI9KG5xwRD5x1O?=
 =?us-ascii?q?fD1MM=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AHAADzhAlch0O0hNFkGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUgUBAQELAYNrhCGUKIFgLRSXOoIyAYdXIjUIDQEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BCA0JCCkvgjYkAYJiAQIDAQIgBBFBBgkBAQoOCgICJgICA1QGDQgBAQGDHIICB?=
 =?us-ascii?q?AGmT3wzhUCEaoELixSBVz+BESeCa4gFglcCiRGGbIVvinMHAoIgBI8cHolyh0S?=
 =?us-ascii?q?VV4R9AoIJMxojgz2CJheOHT8BAYE2AQGKNwMBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AHAADzhAlch0O0hNFkGwEBAQEDAQEBBwMBAQGBUgUBAQE?=
 =?us-ascii?q?LAYNrhCGUKIFgLRSXOoIyAYdXIjUIDQEDAQEBAQEBAgETAQEBCA0JCCkvgjYkA?=
 =?us-ascii?q?YJiAQIDAQIgBBFBBgkBAQoOCgICJgICA1QGDQgBAQGDHIICBAGmT3wzhUCEaoE?=
 =?us-ascii?q?LixSBVz+BESeCa4gFglcCiRGGbIVvinMHAoIgBI8cHolyh0SVV4R9AoIJMxojg?=
 =?us-ascii?q?z2CJheOHT8BAYE2AQGKNwMBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,323,1539673200"; 
   d="scan'208";a="43911073"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 06 Dec 2018 12:24:46 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726060AbeLFUYn (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 6 Dec 2018 15:24:43 -0500
Received: from foss.arm.com ([217.140.101.70]:60064 "EHLO foss.arm.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1725916AbeLFUYn (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 6 Dec 2018 15:24:43 -0500
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.72.51.249])
        by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id B92D81596;
        Thu,  6 Dec 2018 12:24:42 -0800 (PST)
Received: from [10.1.196.75] (e110467-lin.cambridge.arm.com [10.1.196.75])
        by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPSA id 5F93F3F614;
        Thu,  6 Dec 2018 12:24:41 -0800 (PST)
Subject: Re: [RFC] avoid indirect calls for DMA direct mappings
To: Christoph Hellwig <hch@lst.de>
Cc: Linus Torvalds <torvalds@linux-foundation.org>,
        iommu@lists.linux-foundation.org, brouer@redhat.com,
        tariqt@mellanox.com, ilias.apalodimas@linaro.org, toke@toke.dk,
        Linux List Kernel Mailing <linux-kernel@vger.kernel.org>
References: <20181206153720.10702-1-hch@lst.de>
 <CAHk-=wgz6PFCm+XMWN31dRHzA3JcNP0x0Y-z5NMMw3dHhrDXAw@mail.gmail.com>
 <20181206184330.GB30039@lst.de>
 <173bfba7-033d-93c4-6ef1-48c9e39c9efc@arm.com>
 <20181206200006.GA31548@lst.de>
From: Robin Murphy <robin.murphy@arm.com>
Message-ID: <e3e4c17e-ba6d-d743-04e5-7f240211b9bc@arm.com>
Date: Thu, 6 Dec 2018 20:24:38 +0000
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.2.1
MIME-Version: 1.0
In-Reply-To: <20181206200006.GA31548@lst.de>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Language: en-GB
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 06/12/2018 20:00, Christoph Hellwig wrote:
> On Thu, Dec 06, 2018 at 06:54:17PM +0000, Robin Murphy wrote:
>> I'm pretty sure we used to assign dummy_dma_ops explicitly to devices at
>> the point we detected the ACPI properties are wrong - that shouldn't be too
>> much of a headache to go back to.
> 
> Ok.  I've cooked up a patch to use NULL as the go direct marker.
> This cleans up a few things nicely, but also means we now need to
> do the bypass scheme for all ops, not just the fast path.  But we
> probably should just move the slow path ops out of line anyway,
> so I'm not worried about it.  This has survived some very basic
> testing on x86, and really needs to be cleaned up and split into
> multiple patches..

I've also just finished hacking something up to keep the arm64 status 
quo - I'll need to actually test it tomorrow, but the overall diff looks 
like the below.

Robin.

----->8-----
diff --git a/arch/arm64/include/asm/dma-mapping.h 
b/arch/arm64/include/asm/dma-mapping.h
index 0626c3a93730..fe6287f68adb 100644
--- a/arch/arm64/include/asm/dma-mapping.h
+++ b/arch/arm64/include/asm/dma-mapping.h
@@ -19,15 +19,13 @@
  #include <linux/types.h>
  #include <linux/vmalloc.h>

-extern const struct dma_map_ops dummy_dma_ops;
-
  static inline const struct dma_map_ops *get_arch_dma_ops(struct 
bus_type *bus)
  {
  	/*
  	 * We expect no ISA devices, and all other DMA masters are expected to
  	 * have someone call arch_setup_dma_ops at device creation time.
  	 */
-	return &dummy_dma_ops;
+	return &dma_dummy_ops;
  }

  void arch_setup_dma_ops(struct device *dev, u64 dma_base, u64 size,
diff --git a/arch/arm64/mm/dma-mapping.c b/arch/arm64/mm/dma-mapping.c
index 17f8fc784de2..574aee2d04e7 100644
--- a/arch/arm64/mm/dma-mapping.c
+++ b/arch/arm64/mm/dma-mapping.c
@@ -255,98 +255,6 @@ static int __init atomic_pool_init(void)
  	return -ENOMEM;
  }

-/********************************************
- * The following APIs are for dummy DMA ops *
- ********************************************/
-
-static void *__dummy_alloc(struct device *dev, size_t size,
-			   dma_addr_t *dma_handle, gfp_t flags,
-			   unsigned long attrs)
-{
-	return NULL;
-}
-
-static void __dummy_free(struct device *dev, size_t size,
-			 void *vaddr, dma_addr_t dma_handle,
-			 unsigned long attrs)
-{
-}
-
-static int __dummy_mmap(struct device *dev,
-			struct vm_area_struct *vma,
-			void *cpu_addr, dma_addr_t dma_addr, size_t size,
-			unsigned long attrs)
-{
-	return -ENXIO;
-}
-
-static dma_addr_t __dummy_map_page(struct device *dev, struct page *page,
-				   unsigned long offset, size_t size,
-				   enum dma_data_direction dir,
-				   unsigned long attrs)
-{
-	return 0;
-}
-
-static void __dummy_unmap_page(struct device *dev, dma_addr_t dev_addr,
-			       size_t size, enum dma_data_direction dir,
-			       unsigned long attrs)
-{
-}
-
-static int __dummy_map_sg(struct device *dev, struct scatterlist *sgl,
-			  int nelems, enum dma_data_direction dir,
-			  unsigned long attrs)
-{
-	return 0;
-}
-
-static void __dummy_unmap_sg(struct device *dev,
-			     struct scatterlist *sgl, int nelems,
-			     enum dma_data_direction dir,
-			     unsigned long attrs)
-{
-}
-
-static void __dummy_sync_single(struct device *dev,
-				dma_addr_t dev_addr, size_t size,
-				enum dma_data_direction dir)
-{
-}
-
-static void __dummy_sync_sg(struct device *dev,
-			    struct scatterlist *sgl, int nelems,
-			    enum dma_data_direction dir)
-{
-}
-
-static int __dummy_mapping_error(struct device *hwdev, dma_addr_t dma_addr)
-{
-	return 1;
-}
-
-static int __dummy_dma_supported(struct device *hwdev, u64 mask)
-{
-	return 0;
-}
-
-const struct dma_map_ops dummy_dma_ops = {
-	.alloc                  = __dummy_alloc,
-	.free                   = __dummy_free,
-	.mmap                   = __dummy_mmap,
-	.map_page               = __dummy_map_page,
-	.unmap_page             = __dummy_unmap_page,
-	.map_sg                 = __dummy_map_sg,
-	.unmap_sg               = __dummy_unmap_sg,
-	.sync_single_for_cpu    = __dummy_sync_single,
-	.sync_single_for_device = __dummy_sync_single,
-	.sync_sg_for_cpu        = __dummy_sync_sg,
-	.sync_sg_for_device     = __dummy_sync_sg,
-	.mapping_error          = __dummy_mapping_error,
-	.dma_supported          = __dummy_dma_supported,
-};
-EXPORT_SYMBOL(dummy_dma_ops);
-
  static int __init arm64_dma_init(void)
  {
  	WARN_TAINT(ARCH_DMA_MINALIGN < cache_line_size(),
diff --git a/drivers/acpi/scan.c b/drivers/acpi/scan.c
index bd1c59fb0e17..b75ae34ed188 100644
--- a/drivers/acpi/scan.c
+++ b/drivers/acpi/scan.c
@@ -1456,6 +1456,11 @@ int acpi_dma_configure(struct device *dev, enum 
dev_dma_attr attr)
  	const struct iommu_ops *iommu;
  	u64 dma_addr = 0, size = 0;

+	if (attr == DEV_DMA_NOT_SUPPORTED) {
+		set_dma_ops(dev, &dma_dummy_ops);
+		return 0;
+	}
+
  	iort_dma_setup(dev, &dma_addr, &size);

  	iommu = iort_iommu_configure(dev);
diff --git a/drivers/base/platform.c b/drivers/base/platform.c
index 41b91af95afb..c6daca875c17 100644
--- a/drivers/base/platform.c
+++ b/drivers/base/platform.c
@@ -1138,8 +1138,7 @@ int platform_dma_configure(struct device *dev)
  		ret = of_dma_configure(dev, dev->of_node, true);
  	} else if (has_acpi_companion(dev)) {
  		attr = acpi_get_dma_attr(to_acpi_device_node(dev->fwnode));
-		if (attr != DEV_DMA_NOT_SUPPORTED)
-			ret = acpi_dma_configure(dev, attr);
+		ret = acpi_dma_configure(dev, attr);
  	}

  	return ret;
diff --git a/drivers/pci/pci-driver.c b/drivers/pci/pci-driver.c
index bef17c3fca67..f899a28b90f8 100644
--- a/drivers/pci/pci-driver.c
+++ b/drivers/pci/pci-driver.c
@@ -1602,8 +1602,7 @@ static int pci_dma_configure(struct device *dev)
  		struct acpi_device *adev = to_acpi_device_node(bridge->fwnode);
  		enum dev_dma_attr attr = acpi_get_dma_attr(adev);

-		if (attr != DEV_DMA_NOT_SUPPORTED)
-			ret = acpi_dma_configure(dev, attr);
+		ret = acpi_dma_configure(dev, attr);
  	}

  	pci_put_host_bridge_device(bridge);
diff --git a/include/linux/dma-mapping.h b/include/linux/dma-mapping.h
index 15bd41447025..3a1928ea23c9 100644
--- a/include/linux/dma-mapping.h
+++ b/include/linux/dma-mapping.h
@@ -134,6 +134,7 @@ struct dma_map_ops {
  };

  extern const struct dma_map_ops dma_direct_ops;
+extern const struct dma_map_ops dma_dummy_ops;
  extern const struct dma_map_ops dma_virt_ops;

  #define DMA_BIT_MASK(n)	(((n) == 64) ? ~0ULL : ((1ULL<<(n))-1))
diff --git a/kernel/dma/mapping.c b/kernel/dma/mapping.c
index 58dec7a92b7b..957a42ebabcf 100644
--- a/kernel/dma/mapping.c
+++ b/kernel/dma/mapping.c
@@ -346,3 +346,57 @@ void dma_common_free_remap(void *cpu_addr, size_t 
size, unsigned long vm_flags)
  	vunmap(cpu_addr);
  }
  #endif
+
+/*
+ * Dummy DMA ops always fail
+ */
+
+static int dma_dummy_mmap(struct device *dev, struct vm_area_struct *vma,
+			  void *cpu_addr, dma_addr_t dma_addr, size_t size,
+			  unsigned long attrs)
+{
+	return -ENXIO;
+}
+
+static dma_addr_t dma_dummy_map_page(struct device *dev, struct page *page,
+				     unsigned long offset, size_t size,
+				     enum dma_data_direction dir,
+				     unsigned long attrs)
+{
+	return 0;
+}
+
+static int dma_dummy_map_sg(struct device *dev, struct scatterlist *sgl,
+			    int nelems, enum dma_data_direction dir,
+			    unsigned long attrs)
+{
+	return 0;
+}
+
+static dma_addr_t dma_dummy_map_resource(struct device *dev,
+					 phys_addr_t phys_addr, size_t size,
+					 enum dma_data_direction dir,
+					 unsigned long attrs)
+{
+	return 0;
+}
+
+static int dma_dummy_mapping_error(struct device *hwdev, dma_addr_t 
dma_addr)
+{
+	return 1;
+}
+
+static int dma_dummy_supported(struct device *hwdev, u64 mask)
+{
+	return 0;
+}
+
+const struct dma_map_ops dma_dummy_ops = {
+	.mmap		= dma_dummy_mmap,
+	.map_page	= dma_dummy_map_page,
+	.map_sg		= dma_dummy_map_sg,
+	.map_resource	= dma_dummy_map_resource,
+	.mapping_error	= dma_dummy_mapping_error,
+	.dma_supported	= dma_dummy_supported,
+};
+EXPORT_SYMBOL(dma_dummy_ops);
