Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 12 Dec 2018 08:46:40 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 47EA458079D;
	Tue, 11 Dec 2018 05:53:41 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga006-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 11 Dec 2018 05:53:40 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AthiuVR+4I9b++f9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1u0TIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CRWRPQNtfWSJCDI27?=
 =?us-ascii?q?bYQPAeUOM+lDr4nlpVYDtgeyCAq2Ce/z0DJEmmP60Ksn2OohCwHG2wkgEsoKvn?=
 =?us-ascii?q?vKttX1M6ISXv6ox6TV1zXDcvVW1inh6IPVdR0ho+qDXahtccrX10YvCxjIgU6K?=
 =?us-ascii?q?po3lOzOV1/8Cs3KF4OZ6Se2vjGsnphh3rzOyxckskpHEipwJxl3A7yl13Yg4Kc?=
 =?us-ascii?q?OiREJmYtOoDIFcuiCYOoduXM8tWX1ktDs/x7IYt5O2cy0Hx4o5yBHEavGKdoeF?=
 =?us-ascii?q?7xPnWeqNJDp0mW5pdbOkiBu36kev0PPzW8ex3VtEsyZKjMTDu3UP2hHT68WLV/?=
 =?us-ascii?q?1w9Vq71zmVzQDc8ORELFg0laXFL54hxaY9loQcsUvdBC/6gkb2g7GMdkUi5Oeo?=
 =?us-ascii?q?7/7rYrL8pp+TL4N0iwf+PboymsGnH+g0LgwDU3KG9emyyrHv51D1TbZWgvEsk6?=
 =?us-ascii?q?TUsojWJcEBqa64Bw9V3Jwj6xG6Dzq+1NQYnH8HLE9KeR6ejIjmJUvOIPbmAve7?=
 =?us-ascii?q?mlislzlqx/bYMb37GZjNMHfDn6n7fbpn6E5T1hAzzdZB6JJQEL0BJ+jzWkDpuN?=
 =?us-ascii?q?zCEhA5KxC0w/rgCNhl0oMeWGGPDbGDPKLdrF+F/eYvI+iKZI8ItzfxMfkl5/jy?=
 =?us-ascii?q?jXAnnV8RZ7Wm3ZwSaHqgBPRpP12ZYWbwgtcGCWoKvhAxTO32iFKYVj5ffXayX7?=
 =?us-ascii?q?8m6TE9B4KrFoPDRoGrgLyc0ya3BJxWZmZaCl+SFXfkbZmLW/AJaCiKOM9ujiQE?=
 =?us-ascii?q?VaS9S48mzRyutgj6xKR9IurX/S0Ys5Tj1N9u6u3XlBEy8yF0DsuH32GMSWF0gn?=
 =?us-ascii?q?0HRzss0K9jpkx9z0+J0bJkjPxACdxT+/RJXx8gOp7Hz+x6DNPyVhjbftiTSlar?=
 =?us-ascii?q?WdGmATA3TtIszN4CeUd9G9O+jh/d2yqmGaMal7uOBJYs6KLTw2DxJ9phy3bBzK?=
 =?us-ascii?q?QhjEMpQs1VOW2ih65w7Q7TB4HSnkWdlqaqc7kc3SHX+GeCy2qOoF9XUApqXarZ?=
 =?us-ascii?q?WnAfY1Pcrc7l6UPaU7+uFbMnPxNcxsGYNKtFdMfljVVcS/flI9TRfWSxl2C0BR?=
 =?us-ascii?q?aLw7OMaJHne2Ec3CXbFUgFnBof/XeANQgiGCihp3jSAyBpFVLqe0ns6/VxqGun?=
 =?us-ascii?q?Tk8oyAGHd1Bu2KCr+hELn/CcS+kc3rQfuCg/rTV5B1K939PQC9qdqAttZqRcYd?=
 =?us-ascii?q?Uh4FhZ0WLVrRByPpulL6p6nF4Rbxx3v1/y1xVwEohAjckqrHYtzApuKaKZ0ElN?=
 =?us-ascii?q?dy+C0ZD3IL3XLmjy/Baga6PN3lHe0dCW+roA6fgiqlXjuh2pGVQm83l9z9ZV1H?=
 =?us-ascii?q?6c7I3QDAUOSZLxTlo39x9iqr7AZiky+YzV2mNsMKWuqTDCxs8mC/EjyhajeNdf?=
 =?us-ascii?q?LriJFAvzE80cGsivJ/Ymm1mvbhIYIu9S8LQ4MN+hd/uDwKSrJvpvnCq6jWRb54?=
 =?us-ascii?q?BwykKN9zdmRuHUxZoEwvGY0RGBVzfzl1qhtsH3mYZZZTAdBGa/yC7kBJJPaa12?=
 =?us-ascii?q?Z4oEFWCuI8ivzNVkm5HtQ2JY9EKkB14ews+peAadYEbn3QJN0kQbu3qnljWizz?=
 =?us-ascii?q?x1ij0msrCQ3CjTzOv8bhoHPWhLSXJmjVftJ4i0kt8bUFKpbwgviBuq+0L6y7JH?=
 =?us-ascii?q?q6R4KmnZWV1IcDTuL2F+TquwsaKPYs5O6J8ysSRbSv+8YU2cSrPmpxsa0iXjH3?=
 =?us-ascii?q?ZRxTwhdjGqvIn5kAJ+iG6HMHlzq3/Zc9lqxRjD/NzcWeJR3j0eSSl6kzbXHFu8?=
 =?us-ascii?q?P9qu/dmOjJfMqOO+V2GgVp1Vbybry5iNtC+65W1sHB2+kOq/mtzhEQgmzyD708?=
 =?us-ascii?q?NmWjnPrBb5eoPrzbi1Mfp7fkl0A1/x88p7FZt5kocqhpEQ2H4ai46R/XoGl2fz?=
 =?us-ascii?q?LNpa1bj/bHoLWT4E3drV7BL5101kK3KD35j5WWmFwst9e9m6ZXsb2iEn4MBLEq?=
 =?us-ascii?q?uU7KFEkjFzolq3tg/RZfl9njEAyfoh8nIagucJuBYzwSWZGLwdAU5YPSn0nRSS?=
 =?us-ascii?q?89++tLlXZHqocbWo0Up+nNOhA6uYrgBSRnn5YYsiEjFq7spkLl3MynLz55rgeN?=
 =?us-ascii?q?nRa9ITqxKVnw3Bj+hTNJI+iP4KiTB7NmL6uH0v0/Q7ggB23ZGmoIiHLH1g/L6+?=
 =?us-ascii?q?Ah5dLDH0Ztkc+jfwjaZFhcaW3puiHpFgGjUNQZvpQuikEDMUtfT7KQmOFCcwpW?=
 =?us-ascii?q?ucGbraBQWf8ltpr2rTE5C3MHGaPGIWws9lRBmZOUxTmgQUXCghk549FwCqwtHh?=
 =?us-ascii?q?cUhj6jAQ4F74tgVDyuZyOxbjVWffoR+iai0oR5iHMBpW8gZC6l/XMcOE6+J8AT?=
 =?us-ascii?q?pY8oe9rACXKWybegdIDXwPWkOeHFDuJb2u5djG8+iFCeuyNfrOYbOSqeNAU/eE?=
 =?us-ascii?q?346g0oxj/zyULMWAImFiD+En2kpERX14G8PZmygWSywKjS3NadSXpAy7+i1xoc?=
 =?us-ascii?q?Cy6/DrWAPp5YuSBLpeK9Rv+xaqgaidM+6cnjp2KTFd1pkU33/H1KAf3EIOiyFp?=
 =?us-ascii?q?bzStEaoPtS/OTKLTm69bFR0bazl0NMtH8a08xBRNOdXAh9Px1754iOM1ClhfWV?=
 =?us-ascii?q?zgnMGpedIFI2WnOFzbA0aLMayMJSfXzMHvfaO8VbpQgf1OuB2tojmbCVHsPzSZ?=
 =?us-ascii?q?mzntVhCiKuVMjCCdPBxDt4CxaBdtCW7/TN34bh23KsN4jTozwbcsnHPFKXYcMS?=
 =?us-ascii?q?Rgc0NKtrCQ8SJYgvBlF2Nd9HZqMemElDif7+TDLpYWsP1rAjl7lu5A4XQ6zadV?=
 =?us-ascii?q?4z9ARPBvhCTSqdtuqUm8kuaT0jpnTAZOqjFTiYOLp0piP6DZ9phGWXnc/RMN7X?=
 =?us-ascii?q?+fCxIFp9Z+Dt3vuqZQysXAla7pKTdC9c7U8tUYB8TONM2HN38hYlLVH2vxBREG?=
 =?us-ascii?q?BRSxMn7ZzxhXivaV8HyYhps3sJ7hnNwJULANEBQWG+0bDAxFHdgHKZE/CjAkkL?=
 =?us-ascii?q?qehcgg73OvqBjbXsgctZfCALbaKvz1LDHRprBFYB0FiefzJJ4XMaXw0k1lbFQ8?=
 =?us-ascii?q?m57FTRn+R9dI9w9sdAgxrQ1n6mV4Q3F7j0DvcB6r7WM7H/elmh88kAY4auMoom?=
 =?us-ascii?q?S/q2wrL0bH8XNj2HI6ns/o1HXIKGb8?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAABowA9ch0O0hNFlHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgTCCOyeMFIwQgiGXPhSBEANIFgEBGBMBhy0iNAkNAQMBAQEBAQE?=
 =?us-ascii?q?CARMBAQEIDQkIKSMMgjYkAYJiAwMBAiQLAQ0BATcBBQkBARg4AzEBBQECGgYBE?=
 =?us-ascii?q?gWDHIICAQSZZjyKHYFsM4J2AQEFhycIEodqgyOBHBeBQD+BEYFwhWgEIIVyiTO?=
 =?us-ascii?q?GDoFOhG+KfwmRRiOBXIgKh1qJI4EFi1mDCwYCCQcPIYElgg4zGggbFYMnghsMF?=
 =?us-ascii?q?4NKilQ/MgGBAwEBAYgUgk0BAQ?=
X-IPAS-Result: =?us-ascii?q?A0ANAABowA9ch0O0hNFlHAEBAQQBAQcEAQGBUQcBAQsBgTC?=
 =?us-ascii?q?COyeMFIwQgiGXPhSBEANIFgEBGBMBhy0iNAkNAQMBAQEBAQECARMBAQEIDQkIK?=
 =?us-ascii?q?SMMgjYkAYJiAwMBAiQLAQ0BATcBBQkBARg4AzEBBQECGgYBEgWDHIICAQSZZjy?=
 =?us-ascii?q?KHYFsM4J2AQEFhycIEodqgyOBHBeBQD+BEYFwhWgEIIVyiTOGDoFOhG+KfwmRR?=
 =?us-ascii?q?iOBXIgKh1qJI4EFi1mDCwYCCQcPIYElgg4zGggbFYMnghsMF4NKilQ/MgGBAwE?=
 =?us-ascii?q?BAYgUgk0BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,342,1539673200"; 
   d="scan'208";a="141642245"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 11 Dec 2018 05:53:38 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726720AbeLKNrf (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 11 Dec 2018 08:47:35 -0500
Received: from mail-wr1-f68.google.com ([209.85.221.68]:43438 "EHLO
        mail-wr1-f68.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726672AbeLKNrc (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 11 Dec 2018 08:47:32 -0500
Received: by mail-wr1-f68.google.com with SMTP id r10so14132181wrs.10
        for <linux-kernel@vger.kernel.org>; Tue, 11 Dec 2018 05:47:30 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=baylibre-com.20150623.gappssmtp.com; s=20150623;
        h=from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding;
        bh=gFepgdqrcGgU+6Pt3bNOl0J8Hvcm4qcs2uMepngl8Wk=;
        b=XqIlSK4WqU6U+WpnG+Rzgx1t7X1cPbvYK249iOAysDhd4K1d2UFyJtcw0Exij+3M8p
         peKF9TYvtcQWeZjlcrdMawexTDb3v1tuHDfXJz6p3PO1BMXAjKYysK9KKTLAvuacZ+90
         4w4Q2h6+inycHTvwf5WXksx8q7a5Am932uqPZINQ4CnMltoKKoz5qLX3XsyLHvJooCww
         TuWhjWo/eCH2kupGRKDXdk0ndWcPzeoJGl8PyoULpvbO6LGRcN+sDFFG2HFCwn7SpgTB
         gaNHps4JoiMaOnuLXALAIkJKxPk406TJj8Exue+Fc/XIG0HIS8qhPE+8jYOLKVtRm+L0
         CPkw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=gFepgdqrcGgU+6Pt3bNOl0J8Hvcm4qcs2uMepngl8Wk=;
        b=O6T2rvo9CPxsHShC3w27BkV9senr4CNVJkpoW15BR7IV/0TnymT07FeyNYiHgSVBFl
         5NsBafOX5aIcW5CchGK3ugr/iC1n0mS5KFPVA+yC84AUKW+0HSDe/FmUXayVIwnpeLfT
         4pquzaqnLC+SDYtz/tQpu/f+Nef2LaCWYUaOSv5EdAVudTGUZVh3CLmHWFYBUxOawe08
         Fn3jpfL6xw+v6UJx0Vi4pa2RwXqVzUXW9vxfD8jJ8vN3aBlb3u551fhnvzgWfTMB94wI
         W+BaYz79klFhETh3utNqlHuuQRI/UpQPLHj2rsQgSdtNff+GCrmf1VWNiR9pPA98mHXP
         ObSA==
X-Gm-Message-State: AA+aEWZ0719eCNuLvd0H2dI+sDNiSQf2/T7zkOCF8+SD3IJLQgHapjyk
        BnwVISpe9CwmgUBIBfMnBpeXhQ==
X-Google-Smtp-Source: AFSGD/XHKbng+NVNLfQRPKImX8LeMzp3HIojH/DImKjbPl/GSViSVK5ZrG4OfMUhmIo1pDTsZpTP9g==
X-Received: by 2002:a05:6000:120a:: with SMTP id e10mr13603584wrx.85.1544536049797;
        Tue, 11 Dec 2018 05:47:29 -0800 (PST)
Received: from boomer.local ([2a01:e34:eeb6:4690:106b:bae3:31ed:7561])
        by smtp.googlemail.com with ESMTPSA id 126sm113768wmd.1.2018.12.11.05.47.27
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Tue, 11 Dec 2018 05:47:29 -0800 (PST)
From: Jerome Brunet <jbrunet@baylibre.com>
To: Mark Brown <broonie@kernel.org>,
        Kevin Hilman <khilman@baylibre.com>,
        Carlo Caione <carlo@caione.org>
Cc: Jerome Brunet <jbrunet@baylibre.com>, alsa-devel@alsa-project.org,
        devicetree@vger.kernel.org, linux-kernel@vger.kernel.org,
        linux-amlogic@lists.infradead.org
Subject: [PATCH 3/4] ASoC: meson: add axg spdif input
Date: Tue, 11 Dec 2018 14:47:12 +0100
Message-Id: <20181211134713.4908-4-jbrunet@baylibre.com>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <20181211134713.4908-1-jbrunet@baylibre.com>
References: <20181211134713.4908-1-jbrunet@baylibre.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Add support for the spdif input decoder of the axg SoC family

Signed-off-by: Jerome Brunet <jbrunet@baylibre.com>
---
 sound/soc/meson/Kconfig       |   9 +-
 sound/soc/meson/Makefile      |   2 +
 sound/soc/meson/axg-spdifin.c | 521 ++++++++++++++++++++++++++++++++++
 3 files changed, 531 insertions(+), 1 deletion(-)
 create mode 100644 sound/soc/meson/axg-spdifin.c

diff --git a/sound/soc/meson/Kconfig b/sound/soc/meson/Kconfig
index 8b8426ed2363..8779fe23671d 100644
--- a/sound/soc/meson/Kconfig
+++ b/sound/soc/meson/Kconfig
@@ -54,6 +54,7 @@ config SND_MESON_AXG_SOUND_CARD
 	imply SND_MESON_AXG_TDMIN
 	imply SND_MESON_AXG_TDMOUT
 	imply SND_MESON_AXG_SPDIFOUT
+	imply SND_MESON_AXG_SPDIFIN
 	imply SND_MESON_AXG_PDM
 	help
 	  Select Y or M to add support for the AXG SoC sound card
@@ -67,6 +68,13 @@ config SND_MESON_AXG_SPDIFOUT
 	  Select Y or M to add support for SPDIF output serializer embedded
 	  in the Amlogic AXG SoC family
 
+config SND_MESON_AXG_SPDIFIN
+	tristate "Amlogic AXG SPDIF Input Support"
+	imply SND_SOC_SPDIF
+	help
+	  Select Y or M to add support for SPDIF input embedded
+	  in the Amlogic AXG SoC family
+
 config SND_MESON_AXG_PDM
 	tristate "Amlogic AXG PDM Input Support"
 	imply SND_SOC_DMIC
@@ -74,5 +82,4 @@ config SND_MESON_AXG_PDM
 	help
 	  Select Y or M to add support for PDM input embedded
 	  in the Amlogic AXG SoC family
-
 endmenu
diff --git a/sound/soc/meson/Makefile b/sound/soc/meson/Makefile
index 4cd25104029d..b45dfb9e2f88 100644
--- a/sound/soc/meson/Makefile
+++ b/sound/soc/meson/Makefile
@@ -8,6 +8,7 @@ snd-soc-meson-axg-tdm-interface-objs := axg-tdm-interface.o
 snd-soc-meson-axg-tdmin-objs := axg-tdmin.o
 snd-soc-meson-axg-tdmout-objs := axg-tdmout.o
 snd-soc-meson-axg-sound-card-objs := axg-card.o
+snd-soc-meson-axg-spdifin-objs := axg-spdifin.o
 snd-soc-meson-axg-spdifout-objs := axg-spdifout.o
 snd-soc-meson-axg-pdm-objs := axg-pdm.o
 
@@ -19,5 +20,6 @@ obj-$(CONFIG_SND_MESON_AXG_TDM_INTERFACE) += snd-soc-meson-axg-tdm-interface.o
 obj-$(CONFIG_SND_MESON_AXG_TDMIN) += snd-soc-meson-axg-tdmin.o
 obj-$(CONFIG_SND_MESON_AXG_TDMOUT) += snd-soc-meson-axg-tdmout.o
 obj-$(CONFIG_SND_MESON_AXG_SOUND_CARD) += snd-soc-meson-axg-sound-card.o
+obj-$(CONFIG_SND_MESON_AXG_SPDIFIN) += snd-soc-meson-axg-spdifin.o
 obj-$(CONFIG_SND_MESON_AXG_SPDIFOUT) += snd-soc-meson-axg-spdifout.o
 obj-$(CONFIG_SND_MESON_AXG_PDM) += snd-soc-meson-axg-pdm.o
diff --git a/sound/soc/meson/axg-spdifin.c b/sound/soc/meson/axg-spdifin.c
new file mode 100644
index 000000000000..09f385a2bbba
--- /dev/null
+++ b/sound/soc/meson/axg-spdifin.c
@@ -0,0 +1,521 @@
+// SPDX-License-Identifier: (GPL-2.0 OR MIT)
+//
+// Copyright (c) 2018 BayLibre, SAS.
+// Author: Jerome Brunet <jbrunet@baylibre.com>
+
+#include <linux/bitfield.h>
+#include <linux/clk.h>
+#include <linux/module.h>
+#include <linux/of_platform.h>
+#include <linux/regmap.h>
+#include <sound/soc.h>
+#include <sound/soc-dai.h>
+#include <sound/pcm_params.h>
+
+#define SPDIFIN_CTRL0			0x00
+#define  SPDIFIN_CTRL0_EN		BIT(31)
+#define  SPDIFIN_CTRL0_RST_OUT		BIT(29)
+#define  SPDIFIN_CTRL0_RST_IN		BIT(28)
+#define  SPDIFIN_CTRL0_WIDTH_SEL	BIT(24)
+#define  SPDIFIN_CTRL0_STATUS_CH_SHIFT	11
+#define  SPDIFIN_CTRL0_STATUS_SEL	GENMASK(10, 8)
+#define  SPDIFIN_CTRL0_SRC_SEL		GENMASK(5, 4)
+#define  SPDIFIN_CTRL0_CHK_VALID	BIT(3)
+#define SPDIFIN_CTRL1			0x04
+#define  SPDIFIN_CTRL1_BASE_TIMER	GENMASK(19, 0)
+#define  SPDIFIN_CTRL1_IRQ_MASK		GENMASK(27, 20)
+#define SPDIFIN_CTRL2			0x08
+#define  SPDIFIN_THRES_PER_REG		3
+#define  SPDIFIN_THRES_WIDTH		10
+#define SPDIFIN_CTRL3			0x0c
+#define SPDIFIN_CTRL4			0x10
+#define  SPDIFIN_TIMER_PER_REG		4
+#define  SPDIFIN_TIMER_WIDTH		8
+#define SPDIFIN_CTRL5			0x14
+#define SPDIFIN_CTRL6			0x18
+#define SPDIFIN_STAT0			0x1c
+#define  SPDIFIN_STAT0_MODE		GENMASK(30, 28)
+#define  SPDIFIN_STAT0_MAXW		GENMASK(17, 8)
+#define  SPDIFIN_STAT0_IRQ		GENMASK(7, 0)
+#define  SPDIFIN_IRQ_MODE_CHANGED	BIT(2)
+#define SPDIFIN_STAT1			0x20
+#define SPDIFIN_STAT2			0x24
+#define SPDIFIN_MUTE_VAL		0x28
+
+#define SPDIFIN_MODE_NUM		7
+
+struct axg_spdifin_cfg {
+	const unsigned int *mode_rates;
+	unsigned int ref_rate;
+};
+
+struct axg_spdifin {
+	const struct axg_spdifin_cfg *conf;
+	struct regmap *map;
+	struct clk *refclk;
+	struct clk *pclk;
+};
+
+/*
+ * TODO:
+ * It would have been nice to check the actual rate against the sample rate
+ * requested in hw_params(). Unfortunately, I was not able to make the mode
+ * detection and IRQ work reliably:
+ *
+ * 1. IRQs are generated on mode change only, so there is no notification
+ *    on transition between no signal and mode 0 (32kHz).
+ * 2. Mode detection very often has glitches, and may detects the
+ *    lowest or the highest mode before zeroing in on the actual mode.
+ *
+ * This makes calling snd_pcm_stop() difficult to get right. Even notifying
+ * the kcontrol would be very unreliable at this point.
+ * Let's keep things simple until the magic spell that makes this work is
+ * found.
+ */
+
+static unsigned int axg_spdifin_get_rate(struct axg_spdifin *priv)
+{
+	unsigned int stat, mode, rate = 0;
+
+	regmap_read(priv->map, SPDIFIN_STAT0, &stat);
+	mode = FIELD_GET(SPDIFIN_STAT0_MODE, stat);
+
+	/*
+	 * If max width is zero, we are not capturing anything.
+	 * Also Sometimes, when the capture is on but there is no data,
+	 * mode is SPDIFIN_MODE_NUM, but not always ...
+	 */
+	if (FIELD_GET(SPDIFIN_STAT0_MAXW, stat) &&
+	    mode < SPDIFIN_MODE_NUM)
+		rate = priv->conf->mode_rates[mode];
+
+	return rate;
+}
+
+static int axg_spdifin_prepare(struct snd_pcm_substream *substream,
+			       struct snd_soc_dai *dai)
+{
+	struct axg_spdifin *priv = snd_soc_dai_get_drvdata(dai);
+
+	/* Apply both reset */
+	regmap_update_bits(priv->map, SPDIFIN_CTRL0,
+			   SPDIFIN_CTRL0_RST_OUT |
+			   SPDIFIN_CTRL0_RST_IN,
+			   0);
+
+	/* Clear out reset before in reset */
+	regmap_update_bits(priv->map, SPDIFIN_CTRL0,
+			   SPDIFIN_CTRL0_RST_OUT, SPDIFIN_CTRL0_RST_OUT);
+	regmap_update_bits(priv->map, SPDIFIN_CTRL0,
+			   SPDIFIN_CTRL0_RST_IN,  SPDIFIN_CTRL0_RST_IN);
+
+	return 0;
+}
+
+static int axg_spdifin_startup(struct snd_pcm_substream *substream,
+			       struct snd_soc_dai *dai)
+{
+	struct axg_spdifin *priv = snd_soc_dai_get_drvdata(dai);
+	int ret;
+
+	ret = clk_prepare_enable(priv->refclk);
+	if (ret) {
+		dev_err(dai->dev,
+			"failed to enable spdifin reference clock\n");
+		return ret;
+	}
+
+	regmap_update_bits(priv->map, SPDIFIN_CTRL0, SPDIFIN_CTRL0_EN,
+			   SPDIFIN_CTRL0_EN);
+
+	return 0;
+}
+
+static void axg_spdifin_shutdown(struct snd_pcm_substream *substream,
+				 struct snd_soc_dai *dai)
+{
+	struct axg_spdifin *priv = snd_soc_dai_get_drvdata(dai);
+
+	regmap_update_bits(priv->map, SPDIFIN_CTRL0, SPDIFIN_CTRL0_EN, 0);
+	clk_disable_unprepare(priv->refclk);
+}
+
+static void axg_spdifin_write_mode_param(struct regmap *map, int mode,
+					 unsigned int val,
+					 unsigned int num_per_reg,
+					 unsigned int base_reg,
+					 unsigned int width)
+{
+	unsigned int offset = mode, rem;
+	unsigned int reg, shift;
+
+	rem = do_div(offset, num_per_reg);
+
+	reg = offset * regmap_get_reg_stride(map) + base_reg;
+	shift = width * (num_per_reg - 1 - rem);
+
+	regmap_update_bits(map, reg, GENMASK(width - 1, 0) << shift,
+			   val << shift);
+}
+
+static void axg_spdifin_write_timer(struct regmap *map, int mode,
+				    unsigned int val)
+{
+	axg_spdifin_write_mode_param(map, mode, val, SPDIFIN_TIMER_PER_REG,
+				     SPDIFIN_CTRL4, SPDIFIN_TIMER_WIDTH);
+}
+
+static void axg_spdifin_write_threshold(struct regmap *map, int mode,
+					unsigned int val)
+{
+	axg_spdifin_write_mode_param(map, mode, val, SPDIFIN_THRES_PER_REG,
+				     SPDIFIN_CTRL2, SPDIFIN_THRES_WIDTH);
+}
+
+static unsigned int axg_spdifin_mode_timer(struct axg_spdifin *priv,
+					   int mode,
+					   unsigned int rate)
+{
+	/*
+	 * Number of period of the reference clock during a period of the
+	 * input signal reference clock
+	 */
+	return rate / (128 * priv->conf->mode_rates[mode]);
+}
+
+static int axg_spdifin_sample_mode_config(struct snd_soc_dai *dai,
+					  struct axg_spdifin *priv)
+{
+	unsigned int rate, t_next;
+	int ret, i = SPDIFIN_MODE_NUM - 1;
+
+	/* Set spdif input reference clock */
+	ret = clk_set_rate(priv->refclk, priv->conf->ref_rate);
+	if (ret) {
+		dev_err(dai->dev, "reference clock rate set failed\n");
+		return ret;
+	}
+
+	/*
+	 * The rate actually set might be slightly different, get
+	 * the actual rate for the following mode calculation
+	 */
+	rate = clk_get_rate(priv->refclk);
+
+	/* HW will update mode every 1ms */
+	regmap_update_bits(priv->map, SPDIFIN_CTRL1,
+			   SPDIFIN_CTRL1_BASE_TIMER,
+			   FIELD_PREP(SPDIFIN_CTRL1_BASE_TIMER, rate / 1000));
+
+	/* Threshold based on the minimum width between two edges */
+	regmap_update_bits(priv->map, SPDIFIN_CTRL0,
+			   SPDIFIN_CTRL0_WIDTH_SEL, SPDIFIN_CTRL0_WIDTH_SEL);
+
+	/* Calculate the last timer which has no threshold */
+	t_next = axg_spdifin_mode_timer(priv, i, rate);
+	axg_spdifin_write_timer(priv->map, i, t_next);
+
+	do {
+		unsigned int t;
+
+		i -= 1;
+
+		/* Calculate the timer */
+		t = axg_spdifin_mode_timer(priv, i, rate);
+
+		/* Set the timer value */
+		axg_spdifin_write_timer(priv->map, i, t);
+
+		/* Set the threshold value */
+		axg_spdifin_write_threshold(priv->map, i, t + t_next);
+
+		/* Save the current timer for the next threshold calculation */
+		t_next = t;
+
+	} while (i > 0);
+
+	return 0;
+}
+
+static int axg_spdifin_dai_probe(struct snd_soc_dai *dai)
+{
+	struct axg_spdifin *priv = snd_soc_dai_get_drvdata(dai);
+	int ret;
+
+	ret = clk_prepare_enable(priv->pclk);
+	if (ret) {
+		dev_err(dai->dev, "failed to enable pclk\n");
+		return ret;
+	}
+
+	ret = axg_spdifin_sample_mode_config(dai, priv);
+	if (ret) {
+		dev_err(dai->dev, "mode configuration failed\n");
+		clk_disable_unprepare(priv->pclk);
+		return ret;
+	}
+
+	return 0;
+}
+
+static int axg_spdifin_dai_remove(struct snd_soc_dai *dai)
+{
+	struct axg_spdifin *priv = snd_soc_dai_get_drvdata(dai);
+
+	clk_disable_unprepare(priv->pclk);
+	return 0;
+}
+
+static const struct snd_soc_dai_ops axg_spdifin_ops = {
+	.prepare	= axg_spdifin_prepare,
+	.startup	= axg_spdifin_startup,
+	.shutdown	= axg_spdifin_shutdown,
+};
+
+static int axg_spdifin_iec958_info(struct snd_kcontrol *kcontrol,
+				   struct snd_ctl_elem_info *uinfo)
+{
+	uinfo->type = SNDRV_CTL_ELEM_TYPE_IEC958;
+	uinfo->count = 1;
+
+	return 0;
+}
+
+static int axg_spdifin_get_status_mask(struct snd_kcontrol *kcontrol,
+				       struct snd_ctl_elem_value *ucontrol)
+{
+	int i;
+
+	for (i = 0; i < 24; i++)
+		ucontrol->value.iec958.status[i] = 0xff;
+
+	return 0;
+}
+
+static int axg_spdifin_get_status(struct snd_kcontrol *kcontrol,
+				  struct snd_ctl_elem_value *ucontrol)
+{
+	struct snd_soc_component *c = snd_kcontrol_chip(kcontrol);
+	struct axg_spdifin *priv = snd_soc_component_get_drvdata(c);
+	int i, j;
+
+	for (i = 0; i < 6; i++) {
+		unsigned int val;
+
+		regmap_update_bits(priv->map, SPDIFIN_CTRL0,
+				   SPDIFIN_CTRL0_STATUS_SEL,
+				   FIELD_PREP(SPDIFIN_CTRL0_STATUS_SEL, i));
+
+		regmap_read(priv->map, SPDIFIN_STAT1, &val);
+
+		for (j = 0; j < 4; j++) {
+			unsigned int offset = i * 4 + j;
+
+			ucontrol->value.iec958.status[offset] =
+				(val >> (j * 8)) & 0xff;
+		}
+	}
+
+	return 0;
+}
+
+#define AXG_SPDIFIN_IEC958_MASK						\
+	{								\
+		.access = SNDRV_CTL_ELEM_ACCESS_READ,			\
+		.iface = SNDRV_CTL_ELEM_IFACE_PCM,			\
+		.name = SNDRV_CTL_NAME_IEC958("", CAPTURE, MASK),	\
+		.info = axg_spdifin_iec958_info,			\
+		.get = axg_spdifin_get_status_mask,			\
+	}
+
+#define AXG_SPDIFIN_IEC958_STATUS					\
+	{								\
+		.access = (SNDRV_CTL_ELEM_ACCESS_READ |			\
+			   SNDRV_CTL_ELEM_ACCESS_VOLATILE),		\
+		.iface = SNDRV_CTL_ELEM_IFACE_PCM,			\
+		.name =	SNDRV_CTL_NAME_IEC958("", CAPTURE, NONE),	\
+		.info = axg_spdifin_iec958_info,			\
+		.get = axg_spdifin_get_status,				\
+	}
+
+static const char * const spdifin_chsts_src_texts[] = {
+	"A", "B",
+};
+
+static SOC_ENUM_SINGLE_DECL(axg_spdifin_chsts_src_enum, SPDIFIN_CTRL0,
+			    SPDIFIN_CTRL0_STATUS_CH_SHIFT,
+			    spdifin_chsts_src_texts);
+
+static int axg_spdifin_rate_lock_info(struct snd_kcontrol *kcontrol,
+				      struct snd_ctl_elem_info *uinfo)
+{
+	uinfo->type = SNDRV_CTL_ELEM_TYPE_INTEGER;
+	uinfo->count = 1;
+	uinfo->value.integer.min = 0;
+	uinfo->value.integer.max = 192000;
+
+	return 0;
+}
+
+static int axg_spdifin_rate_lock_get(struct snd_kcontrol *kcontrol,
+				     struct snd_ctl_elem_value *ucontrol)
+{
+	struct snd_soc_component *c = snd_kcontrol_chip(kcontrol);
+	struct axg_spdifin *priv = snd_soc_component_get_drvdata(c);
+
+	ucontrol->value.integer.value[0] = axg_spdifin_get_rate(priv);
+
+	return 0;
+}
+
+#define AXG_SPDIFIN_LOCK_RATE(xname)				\
+	{							\
+		.iface = SNDRV_CTL_ELEM_IFACE_PCM,		\
+		.access = (SNDRV_CTL_ELEM_ACCESS_READ |		\
+			   SNDRV_CTL_ELEM_ACCESS_VOLATILE),	\
+		.get = axg_spdifin_rate_lock_get,		\
+		.info = axg_spdifin_rate_lock_info,		\
+		.name = xname,					\
+	}
+
+static const struct snd_kcontrol_new axg_spdifin_controls[] = {
+	AXG_SPDIFIN_LOCK_RATE("Capture Rate Lock"),
+	SOC_DOUBLE("Capture Switch", SPDIFIN_CTRL0, 7, 6, 1, 1),
+	SOC_ENUM(SNDRV_CTL_NAME_IEC958("", CAPTURE, NONE) "Src",
+		 axg_spdifin_chsts_src_enum),
+	AXG_SPDIFIN_IEC958_MASK,
+	AXG_SPDIFIN_IEC958_STATUS,
+};
+
+static const struct snd_soc_component_driver axg_spdifin_component_drv = {
+	.controls		= axg_spdifin_controls,
+	.num_controls		= ARRAY_SIZE(axg_spdifin_controls),
+};
+
+static const struct regmap_config axg_spdifin_regmap_cfg = {
+	.reg_bits	= 32,
+	.val_bits	= 32,
+	.reg_stride	= 4,
+	.max_register	= SPDIFIN_MUTE_VAL,
+};
+
+static const unsigned int axg_spdifin_mode_rates[SPDIFIN_MODE_NUM] = {
+	32000, 44100, 48000, 88200, 96000, 176400, 192000,
+};
+
+static const struct axg_spdifin_cfg axg_cfg = {
+	.mode_rates = axg_spdifin_mode_rates,
+	.ref_rate = 333333333,
+};
+
+static const struct of_device_id axg_spdifin_of_match[] = {
+	{
+		.compatible = "amlogic,axg-spdifin",
+		.data = &axg_cfg,
+	}, {}
+};
+MODULE_DEVICE_TABLE(of, axg_spdifin_of_match);
+
+static struct snd_soc_dai_driver *
+axg_spdifin_get_dai_drv(struct device *dev, struct axg_spdifin *priv)
+{
+	struct snd_soc_dai_driver *drv;
+	int i;
+
+	drv = devm_kzalloc(dev, sizeof(*drv), GFP_KERNEL);
+	if (!drv)
+		return ERR_PTR(-ENOMEM);
+
+	drv->name = "SPDIF Input";
+	drv->ops = &axg_spdifin_ops;
+	drv->probe = axg_spdifin_dai_probe;
+	drv->remove = axg_spdifin_dai_remove;
+	drv->capture.stream_name = "Capture";
+	drv->capture.channels_min = 1;
+	drv->capture.channels_max = 2;
+	drv->capture.formats = SNDRV_PCM_FMTBIT_IEC958_SUBFRAME_LE;
+
+	for (i = 0; i < SPDIFIN_MODE_NUM; i++) {
+		unsigned int rb =
+			snd_pcm_rate_to_rate_bit(priv->conf->mode_rates[i]);
+
+		if (rb == SNDRV_PCM_RATE_KNOT)
+			return ERR_PTR(-EINVAL);
+
+		drv->capture.rates |= rb;
+	}
+
+	return drv;
+}
+
+static int axg_spdifin_probe(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+	struct axg_spdifin *priv;
+	struct snd_soc_dai_driver *dai_drv;
+	struct resource *res;
+	void __iomem *regs;
+	int ret;
+
+	priv = devm_kzalloc(dev, sizeof(*priv), GFP_KERNEL);
+	if (!priv)
+		return -ENOMEM;
+	platform_set_drvdata(pdev, priv);
+
+	priv->conf = of_device_get_match_data(dev);
+	if (!priv->conf) {
+		dev_err(dev, "failed to match device\n");
+		return -ENODEV;
+	}
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	regs = devm_ioremap_resource(dev, res);
+	if (IS_ERR(regs))
+		return PTR_ERR(regs);
+
+	priv->map = devm_regmap_init_mmio(dev, regs, &axg_spdifin_regmap_cfg);
+	if (IS_ERR(priv->map)) {
+		dev_err(dev, "failed to init regmap: %ld\n",
+			PTR_ERR(priv->map));
+		return PTR_ERR(priv->map);
+	}
+
+	priv->pclk = devm_clk_get(dev, "pclk");
+	if (IS_ERR(priv->pclk)) {
+		ret = PTR_ERR(priv->pclk);
+		if (ret != -EPROBE_DEFER)
+			dev_err(dev, "failed to get pclk: %d\n", ret);
+		return ret;
+	}
+
+	priv->refclk = devm_clk_get(dev, "refclk");
+	if (IS_ERR(priv->refclk)) {
+		ret = PTR_ERR(priv->refclk);
+		if (ret != -EPROBE_DEFER)
+			dev_err(dev, "failed to get mclk: %d\n", ret);
+		return ret;
+	}
+
+	dai_drv = axg_spdifin_get_dai_drv(dev, priv);
+	if (IS_ERR(dai_drv)) {
+		dev_err(dev, "failed to get dai driver: %ld\n",
+			PTR_ERR(dai_drv));
+		return PTR_ERR(dai_drv);
+	}
+
+	return devm_snd_soc_register_component(dev, &axg_spdifin_component_drv,
+					       dai_drv, 1);
+}
+
+static struct platform_driver axg_spdifin_pdrv = {
+	.probe = axg_spdifin_probe,
+	.driver = {
+		.name = "axg-spdifin",
+		.of_match_table = axg_spdifin_of_match,
+	},
+};
+module_platform_driver(axg_spdifin_pdrv);
+
+MODULE_DESCRIPTION("Amlogic AXG SPDIF Input driver");
+MODULE_AUTHOR("Jerome Brunet <jbrunet@baylibre.com>");
+MODULE_LICENSE("GPL v2");
-- 
2.19.2

