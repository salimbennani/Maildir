Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 05 Dec 2018 08:41:47 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 2E92358014B;
	Tue,  4 Dec 2018 08:53:40 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by fmsmga004-1.fm.intel.com with ESMTP; 04 Dec 2018 08:53:39 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AN+p6QRYGDwo7f35zkOVhb6r/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpcmyYB7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyxPDJ2h?=
 =?us-ascii?q?YYUBDOQPOuRXr4fyqFUBthu+HQuhCfjzxjJLnHL6wbc33/g9HQzAwQcuH8gOsH?=
 =?us-ascii?q?PRrNjtMKkdT/q1zK7NzTrdcvhbxC396JXOch8/vfGHQLV9ccjKxkk1CgPFiEuf?=
 =?us-ascii?q?qZD+MjyOzOsMs2yb7+t7WuK1lWErsR1+oj+qxso1jITCm4Ebykjc+Cln3Io4Ic?=
 =?us-ascii?q?e0RFN1bNK6CpdcqiKXO5dsTs4jQWxkoDg2xacatZKmeSUF1poqyhHaZvOZbYeH?=
 =?us-ascii?q?+RPuWeOeLDp5gH9pZLeyiwuu/UWh0eLxU9K730xUoSdLl9TBuG0B2ALO5cWCSP?=
 =?us-ascii?q?Zw/kas1SuJ2gvO8O9LO1o0mrDeK5M5wr4/iJ4TsUPbEy/ol0X5krWWel8n+ue2?=
 =?us-ascii?q?8eTnZKvpppuGO49zkAH+Pbwims25AesmLggDR3aX9fi42bH54EH0TqtGgucrnq?=
 =?us-ascii?q?TarJzWP8UWq6yhDw9QyIkj6hK/Dzm80NQfmHkKNFZFeBOBj4j0NFDCOfP4Auml?=
 =?us-ascii?q?g1Sqjjhrw+nKPrrvA5XLMHfDiqzsfahy60FC0go/19Nf6IxOCrEHPv3zXlX9tN?=
 =?us-ascii?q?vCDh82KwC02froCM1h1oMCXmKCGquZMKLRsVCW/O4uLPSMaZQRuDb8Lfgl+vHv?=
 =?us-ascii?q?gWU4mV8bYammw58XZGqkEfRhJkWTeWDsjcsZEWcWogo+S/TniF2YXj5Se3a9Ra?=
 =?us-ascii?q?U86is7CIK7F4jDQI+tjaeF3Ce6GJ1We29HBkqNEXfua4WLRfMMZDiOLc9mlzwO?=
 =?us-ascii?q?TaKhRJM51RGyqA/6zKJqLujT+iIGr57j19915+vVlRE17jF0C8Wd02eQT2B7hG?=
 =?us-ascii?q?8IRjk23Lxhrkx50FuMza94g/lAH9xJ+/xJShs6NYLbz+FiEd/yQQLBftCKSFq8?=
 =?us-ascii?q?WNWpGzMxQ8k1w98PZUZ9BtqjggrC3yqsH78aibiLCIYo/aLb2nj7P9x9xGre1K?=
 =?us-ascii?q?k9k1kmRdNCNW68ia557QTTA4/JnF+fl6albqkc2C/N9GGezWuBpk1YUQhwUbnb?=
 =?us-ascii?q?UnAbfEfZsdP55kbaRb+0FbsnKhdBydKFKqZSd9Lml0tGS+n5NNTeeW2xnXywCg?=
 =?us-ascii?q?iOxr+LaIrqeGAd3CHGBUgAkgAT+2uGNAckCiegpWLeECJhFVb1b0zw9ul+rWux?=
 =?us-ascii?q?TlUowAGSc01hy7219wYIivOGVfMcwKgIuCc7pDVyB1aywdTWBsGEpwpgeqVcfN?=
 =?us-ascii?q?w87E1G1WLfqwxyIJigI7p+iV4ZdgR9p1nu2AlvCoVcjcgqq2snzBZzKaKd11NB?=
 =?us-ascii?q?azOY3JDqNr3LMGXy+wqva6rX2lHY39ab4aMP6PU+q1X+swClDEsi83N709ZL13?=
 =?us-ascii?q?uQ/InFDA0XUZjpSEY46wB6p63GYik6/47bz3lsPre7szDc29MlHvAqygu9cNhF?=
 =?us-ascii?q?NqOEFwjyE9MBCsiqKewqnUWpbx0eMOBT8q40I92pd/+c1KG3O+ZgmSqsjX5b74?=
 =?us-ascii?q?BlzkKM6y18R/bI3pYY2f2XwhGLVjb8jFi7tMD3lptJZTUTHmq51CjlC5RdZqx0?=
 =?us-ascii?q?fYYXF2iuJ9e7ycl5h57oQ3RY7kKsB0sa2M+1fhqfd0b93QxM2ksNu3yohCy4wy?=
 =?us-ascii?q?Zykz43tKqf3TXCzPj4exoDJ2FEWnNijVDqIYWvi9AaXU6obxUmlRe/5Eb6wbRb?=
 =?us-ascii?q?q7p7L2XJXUhIeC32JXl4UqSsrrqCf9JP6JQwvCRXUeSwe1CbRqTmoxsH1SPuBG?=
 =?us-ascii?q?9exDE9dzG3tZT1hR16iGSBLHltqHrVY91/xRDa5NbEX/5ewiIGRDVkiTnQHlW8?=
 =?us-ascii?q?PcOm/c+Xl5fAteCyTXmhWYdQcSnozIOAsjW05WtxDB27nvCznMDnEAcg3S/60d?=
 =?us-ascii?q?lqSTvHrBLmbob30KS6NPptflN0C1/k98p6BoZ+n5MwhZ4K3ngWnJeV/XsBkWro?=
 =?us-ascii?q?NdVb2KT+bGcCRDIRwt7V5hTl11NnLn6T2435UXCdyNN7Z9amemMWxj4978dSBa?=
 =?us-ascii?q?eX9rNEnDF5olqlrQ3LZ/h9kSwQyf8v6H4cnuEItxAhziSbArAOA0ZYOTbgmAiP?=
 =?us-ascii?q?79C7tK9XfnqgcaCs1EpimtCsFLSCogBfWHnjYJsjEzF/7t5jMF3Syn388Z/reM?=
 =?us-ascii?q?Pfbd8Ish2UkhHAj/VaKZ4rl/oKgzZnNnz5vXE/1+E7ihlu14mgvIebM2Vt4L65?=
 =?us-ascii?q?AhlAOz3pYMMT/yvhjKdEkcaQwoCvBY5hGjQQUZvsTPKoFi8StPv9OwaPFj08tm?=
 =?us-ascii?q?mUGb7FEQCD70dmqmrFE4q3OHGPOHkZ0dJiSQGGK0NFhwAUWCg6koQ9FgC338Hh?=
 =?us-ascii?q?dEZ55jYM5l/3sBdMy+RoNwXhXWfbvgundjA0SJ2HJhpM8g5C/1vVMdCZ7u9rHS?=
 =?us-ascii?q?FX5JihoxKWKmCBewREF2IJWlGHB1D+OLmh/8LA/vOcBuq/KfvOfLqPpfZfV/eO?=
 =?us-ascii?q?2ZKgzI9m8yyQOcWIO3loF+c71VZbXXBlB8TZnC0CSiwQlyLQds6buQ2z+ittos?=
 =?us-ascii?q?Ck9/TrXg3v6JCLC7tTN9Vv5h+3jb2CN+6WmCZ2NzJY2okQyn/PzbgVxEQShD12?=
 =?us-ascii?q?dzmxDbQAsjbATKLOla9WDB4baCJzONFL76Im2QlNNtDUisno1r5jlfM1D1ZFVV?=
 =?us-ascii?q?r8msCmf8AKIme9NE/ZC0aPLriJOTrLw8Tva6OmVbJQlPlUtwG3uTuDCUDjIy+M?=
 =?us-ascii?q?lyP3WBGvK+1MiCCbMQdauIG8dBZtFGfiQMjnah29LN94kzk2zacoiXPNMG4WKS?=
 =?us-ascii?q?J8fF9Vrr2M8SNYhe1yG3BA7npgN+WLhzyV4PXYKpkIt/tmGSB0l+Nc4HQnxLpZ?=
 =?us-ascii?q?9iBERPppmCTMqt5iuU2pku6KyjB/ShpBti5LhJ6XvUVlIajY9oNPWXDB/BIM62?=
 =?us-ascii?q?WfExULp9t/Bd3ptKBd0dzPlKP1KDdf/NPY58ocB87IKM2ZNHotKwbmGDnRDFhN?=
 =?us-ascii?q?cTn+E2zegwR0ivSJ6meSqJdy/p7lgp8VVqVcUlMdHPoLDkVvBtFEK5ByCHdssr?=
 =?us-ascii?q?OFjchAxXu6qRDXDJFZvpHDU/uUKf/mOTKYh6NJIRAPxOW8Za8aLIn8k2dra158?=
 =?us-ascii?q?kcyeEEPKWddlqSRgaQk55kJX/y4tYHc03hfHZxmq5XJbP+SpmBMqwl98a/4w8j?=
 =?us-ascii?q?rwy10+N17LrjE91kI2nIO20niqbDftIfLoDsltAC3uuh10a8ujTg=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAADKrwZch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgTCCOyeMEo4wlzUUgRADTBIBARgTAYdMIjQJDQEDAQEBAQEBAgE?=
 =?us-ascii?q?TAQEBCA0JCCkjDII2JAGCYgMDAQIvAQ0BATcBBQkBARg4AzEBBQECGgYBEgWDH?=
 =?us-ascii?q?IICAQSZRDyKHYIfgnYBAQWHKwgSh12DE4EcF4FAP4MBhgyFco80kRcJkTYjiVu?=
 =?us-ascii?q?HS4kGj0oGAgkHDyGBJYINMxoIGxWDJ4Ibg22KVD8yAYEDAQEBimIBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ANAADKrwZch0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBgTC?=
 =?us-ascii?q?COyeMEo4wlzUUgRADTBIBARgTAYdMIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjD?=
 =?us-ascii?q?II2JAGCYgMDAQIvAQ0BATcBBQkBARg4AzEBBQECGgYBEgWDHIICAQSZRDyKHYI?=
 =?us-ascii?q?fgnYBAQWHKwgSh12DE4EcF4FAP4MBhgyFco80kRcJkTYjiVuHS4kGj0oGAgkHD?=
 =?us-ascii?q?yGBJYINMxoIGxWDJ4Ibg22KVD8yAYEDAQEBimIBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,314,1539673200"; 
   d="scan'208";a="42698142"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 04 Dec 2018 08:53:37 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727315AbeLDQxb (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 4 Dec 2018 11:53:31 -0500
Received: from mail-wr1-f66.google.com ([209.85.221.66]:37571 "EHLO
        mail-wr1-f66.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727199AbeLDQx3 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 4 Dec 2018 11:53:29 -0500
Received: by mail-wr1-f66.google.com with SMTP id j10so16704851wru.4
        for <linux-kernel@vger.kernel.org>; Tue, 04 Dec 2018 08:53:28 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=baylibre-com.20150623.gappssmtp.com; s=20150623;
        h=from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding;
        bh=QCM3RFYsWLjUZObZsaZJYw0tcQdErTU1Tp3H4V4iqCo=;
        b=WoHlFZNVuHVfp4QGP7GPJFMTlvqX12F7KCCwPhv4Wkh2T+nb7Qmf+KjWBVKgQ/5v0s
         ZBSRY+B94GL4xlHD9AEBEysnxO4IHvSWghYdhs8ntST7h4dAGmCXeUO8c76jtDEgJIOO
         GtwCxB2gW/dZMhYUG5aOsk8pudFGQcPVN06akG3MQeP4F8MolfLlrvie8uo9WgX653GY
         QepR7BM5WkRzmhLRNnDvj0n2Yk72/s0fAU6CODNYQLySqqpdpnOavRA4AZzmuq1ee8NQ
         muoZjZmAKo6AmimfJed/q9atSGHniNwrZ9YrOlEVgyAJ9zCbybcKuTeXHuGUp0uqcXAg
         Z68Q==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=QCM3RFYsWLjUZObZsaZJYw0tcQdErTU1Tp3H4V4iqCo=;
        b=r6/WVI+FdHM/r+9FnDBA46vp7HGAzGpl5BX5iNqnU4OYk9dfyOsKOxa9ycFmlYIHNd
         XeUmZo9doBJcPMGteCLijDHSIjrcYgErkMao/NhcwCsnhty4F9oDVSVMKEx9AZ/cvMxD
         CC93vbkkuQuTPGEe3vS6KdY7HsU1crl30WPad/IebNNKhtLCceMZ5h2LSpnppdSS/T4/
         uQqi+oEiXAD7s2cnzRP9dvzEUdzAGYtZklKHlvLwYckdIIBO3dsUcANNDv37pbX7HPkI
         9or7Ay6wEupM0Exwn4gxrjNjsF8BGom2Y4lgNXq8ZrjuyfjhtQZ03p3ZfYZjFzdXg+oK
         kUNg==
X-Gm-Message-State: AA+aEWYkmE6UH0TLW2m8/nAYH+3d8Ajl7HsZZNormtKKTu9YATvCo69/
        2+IPimA61p5VlItXNI+NgW8oew==
X-Google-Smtp-Source: AFSGD/UKoxfPSbaMWGvaEsVCJjKZ+3IoPtxRXNc5qRQ0U8Ymv5AQyflcnbpbRsrJDEtP/T5iZ+AP7Q==
X-Received: by 2002:a5d:488f:: with SMTP id g15mr18802323wrq.15.1543942407261;
        Tue, 04 Dec 2018 08:53:27 -0800 (PST)
Received: from boomer.local ([2a01:e34:eeb6:4690:106b:bae3:31ed:7561])
        by smtp.googlemail.com with ESMTPSA id s66sm11581633wmf.34.2018.12.04.08.53.25
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Tue, 04 Dec 2018 08:53:26 -0800 (PST)
From: Jerome Brunet <jbrunet@baylibre.com>
To: Neil Armstrong <narmstrong@baylibre.com>,
        Kevin Hilman <khilman@baylibre.com>,
        Carlo Caione <carlo@caione.org>
Cc: Jerome Brunet <jbrunet@baylibre.com>, linux-clk@vger.kernel.org,
        linux-amlogic@lists.infradead.org, linux-kernel@vger.kernel.org,
        devicetree@vger.kernel.org
Subject: [PATCH 5/5] clk: meson: axg-ao: add 32k generation subtree
Date: Tue,  4 Dec 2018 17:53:10 +0100
Message-Id: <20181204165310.20806-6-jbrunet@baylibre.com>
X-Mailer: git-send-email 2.19.1
In-Reply-To: <20181204165310.20806-1-jbrunet@baylibre.com>
References: <20181204165310.20806-1-jbrunet@baylibre.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Add the clock subtree generating the 32k clock in amlogic axg ao block.

Signed-off-by: Jerome Brunet <jbrunet@baylibre.com>
---
 drivers/clk/meson/axg-aoclk.c | 175 +++++++++++++++++++++++++++++++---
 drivers/clk/meson/axg-aoclk.h |  13 +--
 2 files changed, 163 insertions(+), 25 deletions(-)

diff --git a/drivers/clk/meson/axg-aoclk.c b/drivers/clk/meson/axg-aoclk.c
index 29e088542387..5f518be144ce 100644
--- a/drivers/clk/meson/axg-aoclk.c
+++ b/drivers/clk/meson/axg-aoclk.c
@@ -12,10 +12,23 @@
 #include <linux/platform_device.h>
 #include <linux/reset-controller.h>
 #include <linux/mfd/syscon.h>
-#include "clk-regmap.h"
+#include "clkc.h"
 #include "meson-aoclk.h"
 #include "axg-aoclk.h"
 
+/*
+ * AO Configuration Clock registers offsets
+ * Register offsets from the data sheet must be multiplied by 4.
+ */
+#define AO_RTI_PWR_CNTL_REG1	0x0C
+#define AO_RTI_PWR_CNTL_REG0	0x10
+#define AO_RTI_GEN_CNTL_REG0	0x40
+#define AO_OSCIN_CNTL		0x58
+#define AO_CRT_CLK_CNTL1	0x68
+#define AO_SAR_CLK		0x90
+#define AO_RTC_ALT_CLK_CNTL0	0x94
+#define AO_RTC_ALT_CLK_CNTL1	0x98
+
 #define AXG_AO_GATE(_name, _bit)					\
 static struct clk_regmap axg_aoclk_##_name = {				\
 	.data = &(struct clk_regmap_gate_data) {			\
@@ -39,17 +52,141 @@ AXG_AO_GATE(uart2, 5);
 AXG_AO_GATE(ir_blaster, 6);
 AXG_AO_GATE(saradc, 7);
 
+static struct clk_regmap axg_aoclk_cts_oscin = {
+	.data = &(struct clk_regmap_gate_data){
+		.offset = AO_RTI_PWR_CNTL_REG0,
+		.bit_idx = 14,
+	},
+	.hw.init = &(struct clk_init_data){
+		.name = "cts_oscin",
+		.ops = &clk_regmap_gate_ro_ops,
+		.parent_names = (const char *[]){ "xtal" },
+		.num_parents = 1,
+	},
+};
+
+static struct clk_regmap axg_aoclk_32k_pre = {
+	.data = &(struct clk_regmap_gate_data){
+		.offset = AO_RTC_ALT_CLK_CNTL0,
+		.bit_idx = 31,
+	},
+	.hw.init = &(struct clk_init_data){
+		.name = "axg_ao_32k_pre",
+		.ops = &clk_regmap_gate_ops,
+		.parent_names = (const char *[]){ "cts_oscin" },
+		.num_parents = 1,
+	},
+};
+
+static const struct meson_clk_dualdiv_param axg_32k_div_table[] = {
+	{
+		.dual	= 1,
+		.n1	= 733,
+		.m1	= 8,
+		.n2	= 732,
+		.m2	= 11,
+	}, {}
+};
+
+static struct clk_regmap axg_aoclk_32k_div = {
+	.data = &(struct meson_clk_dualdiv_data){
+		.n1 = {
+			.reg_off = AO_RTC_ALT_CLK_CNTL0,
+			.shift   = 0,
+			.width   = 12,
+		},
+		.n2 = {
+			.reg_off = AO_RTC_ALT_CLK_CNTL0,
+			.shift   = 12,
+			.width   = 12,
+		},
+		.m1 = {
+			.reg_off = AO_RTC_ALT_CLK_CNTL1,
+			.shift   = 0,
+			.width   = 12,
+		},
+		.m2 = {
+			.reg_off = AO_RTC_ALT_CLK_CNTL1,
+			.shift   = 12,
+			.width   = 12,
+		},
+		.dual = {
+			.reg_off = AO_RTC_ALT_CLK_CNTL0,
+			.shift   = 28,
+			.width   = 1,
+		},
+		.table = axg_32k_div_table,
+	},
+	.hw.init = &(struct clk_init_data){
+		.name = "axg_ao_32k_div",
+		.ops = &meson_clk_dualdiv_ops,
+		.parent_names = (const char *[]){ "axg_ao_32k_pre" },
+		.num_parents = 1,
+	},
+};
+
+static struct clk_regmap axg_aoclk_32k_sel = {
+	.data = &(struct clk_regmap_mux_data) {
+		.offset = AO_RTC_ALT_CLK_CNTL1,
+		.mask = 0x1,
+		.shift = 24,
+		.flags = CLK_MUX_ROUND_CLOSEST,
+	},
+	.hw.init = &(struct clk_init_data){
+		.name = "axg_ao_32k_sel",
+		.ops = &clk_regmap_mux_ops,
+		.parent_names = (const char *[]){ "axg_ao_32k_div",
+						  "axg_ao_32k_pre" },
+		.num_parents = 2,
+		.flags = CLK_SET_RATE_PARENT,
+	},
+};
+
+static struct clk_regmap axg_aoclk_32k = {
+	.data = &(struct clk_regmap_gate_data){
+		.offset = AO_RTC_ALT_CLK_CNTL0,
+		.bit_idx = 30,
+	},
+	.hw.init = &(struct clk_init_data){
+		.name = "axg_ao_32k",
+		.ops = &clk_regmap_gate_ops,
+		.parent_names = (const char *[]){ "axg_ao_32k_sel" },
+		.num_parents = 1,
+		.flags = CLK_SET_RATE_PARENT,
+	},
+};
+
+static struct clk_regmap axg_aoclk_cts_rtc_oscin = {
+	.data = &(struct clk_regmap_mux_data) {
+		.offset = AO_RTI_PWR_CNTL_REG0,
+		.mask = 0x1,
+		.shift = 10,
+		.flags = CLK_MUX_ROUND_CLOSEST,
+	},
+	.hw.init = &(struct clk_init_data){
+		.name = "axg_ao_cts_rtc_oscin",
+		.ops = &clk_regmap_mux_ops,
+		.parent_names = (const char *[]){ "axg_ao_32k",
+						  "axg_ext_32k" },
+		.num_parents = 2,
+		.flags = CLK_SET_RATE_PARENT,
+	},
+};
+
 static struct clk_regmap axg_aoclk_clk81 = {
 	.data = &(struct clk_regmap_mux_data) {
 		.offset = AO_RTI_PWR_CNTL_REG0,
 		.mask = 0x1,
 		.shift = 8,
+		.flags = CLK_MUX_ROUND_CLOSEST,
 	},
 	.hw.init = &(struct clk_init_data){
 		.name = "axg_ao_clk81",
 		.ops = &clk_regmap_mux_ro_ops,
-		.parent_names = (const char *[]){ "clk81", "ao_alt_xtal"},
+		.parent_names = (const char *[]){ "clk81",
+						  "axg_ao_cts_rtc_oscin"},
 		.num_parents = 2,
+		.flags = CLK_SET_RATE_PARENT,
 	},
 };
 
@@ -106,17 +243,23 @@ static const unsigned int axg_aoclk_reset[] = {
 };
 
 static struct clk_regmap *axg_aoclk_regmap[] = {
-	[CLKID_AO_REMOTE]	= &axg_aoclk_remote,
-	[CLKID_AO_I2C_MASTER]	= &axg_aoclk_i2c_master,
-	[CLKID_AO_I2C_SLAVE]	= &axg_aoclk_i2c_slave,
-	[CLKID_AO_UART1]	= &axg_aoclk_uart1,
-	[CLKID_AO_UART2]	= &axg_aoclk_uart2,
-	[CLKID_AO_IR_BLASTER]	= &axg_aoclk_ir_blaster,
-	[CLKID_AO_SAR_ADC]	= &axg_aoclk_saradc,
-	[CLKID_AO_CLK81]	= &axg_aoclk_clk81,
-	[CLKID_AO_SAR_ADC_SEL]	= &axg_aoclk_saradc_mux,
-	[CLKID_AO_SAR_ADC_DIV]	= &axg_aoclk_saradc_div,
-	[CLKID_AO_SAR_ADC_CLK]	= &axg_aoclk_saradc_gate,
+	&axg_aoclk_remote,
+	&axg_aoclk_i2c_master,
+	&axg_aoclk_i2c_slave,
+	&axg_aoclk_uart1,
+	&axg_aoclk_uart2,
+	&axg_aoclk_ir_blaster,
+	&axg_aoclk_saradc,
+	&axg_aoclk_cts_oscin,
+	&axg_aoclk_32k_pre,
+	&axg_aoclk_32k_div,
+	&axg_aoclk_32k_sel,
+	&axg_aoclk_32k,
+	&axg_aoclk_cts_rtc_oscin,
+	&axg_aoclk_clk81,
+	&axg_aoclk_saradc_mux,
+	&axg_aoclk_saradc_div,
+	&axg_aoclk_saradc_gate,
 };
 
 static const struct clk_hw_onecell_data axg_aoclk_onecell_data = {
@@ -132,6 +275,12 @@ static const struct clk_hw_onecell_data axg_aoclk_onecell_data = {
 		[CLKID_AO_SAR_ADC_SEL]	= &axg_aoclk_saradc_mux.hw,
 		[CLKID_AO_SAR_ADC_DIV]	= &axg_aoclk_saradc_div.hw,
 		[CLKID_AO_SAR_ADC_CLK]	= &axg_aoclk_saradc_gate.hw,
+		[CLKID_AO_CTS_OSCIN]	= &axg_aoclk_cts_oscin.hw,
+		[CLKID_AO_32K_PRE]	= &axg_aoclk_32k_pre.hw,
+		[CLKID_AO_32K_DIV]	= &axg_aoclk_32k_div.hw,
+		[CLKID_AO_32K_SEL]	= &axg_aoclk_32k_sel.hw,
+		[CLKID_AO_32K]		= &axg_aoclk_32k.hw,
+		[CLKID_AO_CTS_RTC_OSCIN] = &axg_aoclk_cts_rtc_oscin.hw,
 	},
 	.num = NR_CLKS,
 };
diff --git a/drivers/clk/meson/axg-aoclk.h b/drivers/clk/meson/axg-aoclk.h
index 91384d8dd844..3cc27e85170f 100644
--- a/drivers/clk/meson/axg-aoclk.h
+++ b/drivers/clk/meson/axg-aoclk.h
@@ -10,18 +10,7 @@
 #ifndef __AXG_AOCLKC_H
 #define __AXG_AOCLKC_H
 
-#define NR_CLKS	11
-/* AO Configuration Clock registers offsets
- * Register offsets from the data sheet must be multiplied by 4.
- */
-#define AO_RTI_PWR_CNTL_REG1	0x0C
-#define AO_RTI_PWR_CNTL_REG0	0x10
-#define AO_RTI_GEN_CNTL_REG0	0x40
-#define AO_OSCIN_CNTL		0x58
-#define AO_CRT_CLK_CNTL1	0x68
-#define AO_SAR_CLK		0x90
-#define AO_RTC_ALT_CLK_CNTL0	0x94
-#define AO_RTC_ALT_CLK_CNTL1	0x98
+#define NR_CLKS	17
 
 #include <dt-bindings/clock/axg-aoclkc.h>
 #include <dt-bindings/reset/axg-aoclkc.h>
-- 
2.19.1

