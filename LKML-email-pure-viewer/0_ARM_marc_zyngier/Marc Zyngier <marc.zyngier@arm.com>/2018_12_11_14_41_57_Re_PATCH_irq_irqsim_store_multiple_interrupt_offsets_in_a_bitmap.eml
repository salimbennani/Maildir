Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 12 Dec 2018 08:47:15 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga008.fm.intel.com (fmsmga008.fm.intel.com [10.253.24.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 9C370580380;
	Tue, 11 Dec 2018 06:42:05 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga008-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 11 Dec 2018 06:42:05 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AgjvQbBwF+AYQLknXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e8eI/ad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXXdPUNhfVyJBBYOy?=
 =?us-ascii?q?bIUBAOQOMulas4bzqEAOrQO8CAS3GOPiySVFimPq0aA00eksFxzN0gw6H9IJtX?=
 =?us-ascii?q?TZtNL7O70IUe+p0aLHzjXCb/VZ2Tf89ofIaA0qrPaJXb1qa8re1VMjFgLFj1WW?=
 =?us-ascii?q?pozlPi2a1v4WvmeB9epgUPijhHIgqwF0uzWiwNonhIfOhoIQ0F/E9CN5zZ42Jd?=
 =?us-ascii?q?KmUk57Z8CrEJ9KuyGdLYt2TcUvSHxrtiYi0rAKp4K3cSwQxJg6yRPTdeaLf5WL?=
 =?us-ascii?q?7x7/TuqcIDV1iGp7dL6ihRu+61Wsx+LgWsWuzVpGsjdJnsPOu3wR0RHY99KJRe?=
 =?us-ascii?q?Fn/ki73DaCzwDT5f9AIUAzjafbNZEhzaAqlpYJskTMADX2mEPog6+SbEkk/fKo?=
 =?us-ascii?q?6+v/brXnoJ+TKZN0hxngPqgynsGzG/k0PwYQU2SB5Oix16Hv8Vf4TbhIlvE2l7?=
 =?us-ascii?q?PWsJHeJcQVvK65BApV354n6xa+CTemzdsZkWAELF1bYhKHiZbmO1XXLPD/A/a/?=
 =?us-ascii?q?hUqjkC1wyvDYMb3uHI/NImLAkLj/Z7Z97VBTyA4pwdBY/ZJUBakNIOjvVU/pqN?=
 =?us-ascii?q?zYEhg5PhSww+bmC9VyyJkSWG2SAqKCNKPSsFmI5v8gIuWWZY8Vvir9JOYh5/L0?=
 =?us-ascii?q?kXA5nlodd7Gz3ZQLcHC4AuhmI0KBbHrsmNgBEHsKsRA5TODwiF2CTCRcZ3C9X6?=
 =?us-ascii?q?8n4jE7CYSmDZrMR4y3gbyB2ju7EYNSZmxcFl+MFnLofZ2eW/gQcCKSPtNhkjsc?=
 =?us-ascii?q?WLijTI8uywuitAz9y7phKOrU/TYVtZbi1Nhz+u3Smgs+9T1yD8SBzW6NS3t4kX?=
 =?us-ascii?q?8PRz8zxKp/u1Byyk+f0ahkhPxVDcZc5+hJUgc9Np7Q1fZ6BMrwWg/aeteJSVCm?=
 =?us-ascii?q?QsipAD0rT9IxxcMObFh5G9m4kh/D2C+qCacPl7OXHJw07r7c33/pKsZ+0XnG0r?=
 =?us-ascii?q?Mtj10nQsRVM22mibVy9wzSB47PjkWYmLymdaUa3C7R6miDyXCCs11fUA51Sa/F?=
 =?us-ascii?q?R2wQZlPKrdTl4UPPV6KhBq45MgRf08KCKrFFatvyjVpYQvfvP9DeY2G0m2e0Hh?=
 =?us-ascii?q?uIwrKMbIz3e2QSxindCU4EkxwN8naCLwQxGiCho2fGBjx0CV3ve1/s8fV5qH6j?=
 =?us-ascii?q?U0A71R+KYFN727q14BEVg+ecRO0V3r8fvCchqjN0HEuy3t7MCtqAoRZhc7tYYd?=
 =?us-ascii?q?8n/FhH0mfZvRRnPpO8N6BimkIecwNvskPy1hV3D4JAkdQqrHIq1gZyNbiU0FRb?=
 =?us-ascii?q?dzOc3JDwPLLXJ3L2/BCuba7Wx17f3MyX+qcJ9PQ3tVHjsBu1GUol9nVty8NV3G?=
 =?us-ascii?q?eE5pXWEAoSVor8XVwz9xdkqLDVfCk865nP2n1xLKa7qDnC29EuBOs70Ruge9Zf?=
 =?us-ascii?q?MKWZFA79CcEaBs6uKPA0lFitdB4LIOdS9KssNcO8a/SGwLKrPPpnnD++jWVH/Z?=
 =?us-ascii?q?px3V6W+yt9Su7HxZAFw/6D0wuDVjf8ikqhs8/tlYBFYzESAnSwySz+CIFNYa1y?=
 =?us-ascii?q?eJ4BCX2yLM2v2tV+m5ntVmZC9F6iG1wJwtWpdgeVb1Dn2w1fy14XoX2+lSSk1T?=
 =?us-ascii?q?N0lywmobSF3CzJxeTvbx4HOm9NRGl/glbgO4m0j9YGXEe2awgljgeq5UH/x6JD?=
 =?us-ascii?q?vqRwM3HTQVtUfyjxN2xjUqqwuqCCYsJV85MorCNXXf+4YVCbTL79vhQb3zniH2?=
 =?us-ascii?q?tY2DA0aTWqto/lkBx9jWKXNGxzo2bBecFs2Rff48TRRfxL0TocRyl4ij7XCkKn?=
 =?us-ascii?q?P9az/tWUlJbDsuagWGKnTZBTdSjrzYWdtCq0/2FqABu/n+ytld3jCwQ1zSj719?=
 =?us-ascii?q?xyXyXSsBn8epXr17i9Me9/fkhnHlj859B4GoF/lIs9n5UQ2XkchpWI8nsLi2bz?=
 =?us-ascii?q?MdNH2a3gaHoBXyIEw9nQ4AL9wk1sMmqJx57lVnWa2sZhZMO1YmIM1iI98sBFEq?=
 =?us-ascii?q?GU7LNfkCtxo1q4qx/RYPdnkjccz/su9GAVg+UTtAUxySWdB6gYHVNEMiz0ixSI?=
 =?us-ascii?q?89e+ob1SZGaucri/zlBynN6/A7GZvgFTRmz5dYw8Ei9q4cVyK1bM0Hz16oH5d9?=
 =?us-ascii?q?jcd9MTthuIkxjei+hZMo4+lv0PhSB/I2LyoWUly/InjRxpxZy6oI+HK2B38KO4?=
 =?us-ascii?q?GBFYMCD1Z9gI+jHslqtemseW34ayHpRuADkLXZ3oTe62HzIWr/joKwGOEDgkoH?=
 =?us-ascii?q?eBBbXfBROf6Fthr3/XCJ+kLXaXJH0Ezdl4QBmdOVdSgAQVXDU8g544GRqmxM3n?=
 =?us-ascii?q?cEdl+D8R4kT0pQdLyuJtLxP/SHvQpB+0ajcoT5iSNBhW4RtH50jLKsyS9P5zEz?=
 =?us-ascii?q?tb/p28rwyNN2qbaB5TDWwSXkyEBlbjPqSh5NXa8uiYAPa+IOXKYbmUteNeUPKI?=
 =?us-ascii?q?z4q10oR65zaMKtmPPn56Avw73UpDQGl5G9nDlDUJUSAXjCXNb8iUpBqn/i13r8?=
 =?us-ascii?q?a/8OnkWQ715IuPDadSPstr+xysnaiDMOuQjj5jKTlEzpMM2WPIyL8H0V4SlS5u?=
 =?us-ascii?q?djqtEbcBtSLXT6LQgKhXDxEFZCNpKctI9Lkx3g1MOc7dl9P02aR0jv8zC1dZS1?=
 =?us-ascii?q?PhntulatANI2G4LFnHHlqENKyaJT3XxMH6ebmzSaBLg+VOqRKxuSyXE0viPjmY?=
 =?us-ascii?q?kznpVhavMfxDjS2BPRxevp29fQhpCWT5UN3mbRi7OsdtjTIq2b00mm/KNWkEPD?=
 =?us-ascii?q?hgckNNq6ec4j9CjvpjG2xO8HxlIPKAmyaY6enYN5kXveFqAiRyi+JV/nA6x6FJ?=
 =?us-ascii?q?4yFDQfx/gDHSocJ2o1G6jumPzSJqURpUpTZNgYKLvENiNr3Y95lAQ3nE+h0N4H?=
 =?us-ascii?q?6UCxQLodtlF9Lut7pRytjJiKL8NjNC/8jI8ssbAsiHYP6AZVAoKwbuAyycIwwB?=
 =?us-ascii?q?RCW5OH7EhE0VxPuI+Xm9pJc2p4aqgJ5YDvdnVFswH+hSJUBoHcwELY0/Ci8rla?=
 =?us-ascii?q?6ziM8O+Gakqx/QVINWs8aDHs+NDMLMLDuYi7QBRIUOwLyweZlVNYn22kpvL1p9?=
 =?us-ascii?q?kYLLFGLIUNZCvzF7aQk1sANB/S4tYHc03hfAYxmmqE0CE/G1kwR+3g53e+9r5i?=
 =?us-ascii?q?bq7FY6PHLDvi52m040z4a2yQuNeSL8ef/jFbpdDDD54g1oasv2?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BBAABmzA9ch0O0hNFlHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBVAQBAQsBgmmBAieDe5QpgWAIJRSZMSwLCAGHLiI3Bg0BAwEBAQEBAQIBEwE?=
 =?us-ascii?q?BAQgNCQgpIwyCNiQBgmIBAgMBAiAECwFGBgkBAQoOCgICJgICA1QGAQwGAgEBA?=
 =?us-ascii?q?RaDBgGCAQQBCqUpfDOELQGFeAWBC4swgVc/gTgMgl+EWQKDKoJXAqB7BwKCIgS?=
 =?us-ascii?q?EY4pCHol2h0osiHeEc4x5gXgzGiODCAEzgicXiF6FPz8BATGBBQEBiBUOF4InA?=
 =?us-ascii?q?QE?=
X-IPAS-Result: =?us-ascii?q?A0BBAABmzA9ch0O0hNFlHAEBAQQBAQcEAQGBVAQBAQsBgmm?=
 =?us-ascii?q?BAieDe5QpgWAIJRSZMSwLCAGHLiI3Bg0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCN?=
 =?us-ascii?q?iQBgmIBAgMBAiAECwFGBgkBAQoOCgICJgICA1QGAQwGAgEBARaDBgGCAQQBCqU?=
 =?us-ascii?q?pfDOELQGFeAWBC4swgVc/gTgMgl+EWQKDKoJXAqB7BwKCIgSEY4pCHol2h0osi?=
 =?us-ascii?q?HeEc4x5gXgzGiODCAEzgicXiF6FPz8BATGBBQEBiBUOF4InAQE?=
X-IronPort-AV: E=Sophos;i="5.56,342,1539673200"; 
   d="scan'208";a="54707932"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 11 Dec 2018 06:42:04 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726722AbeLKOmB (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 11 Dec 2018 09:42:01 -0500
Received: from usa-sjc-mx-foss1.foss.arm.com ([217.140.101.70]:48712 "EHLO
        foss.arm.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726231AbeLKOmA (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 11 Dec 2018 09:42:00 -0500
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.72.51.249])
        by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id CB9CA1596;
        Tue, 11 Dec 2018 06:41:59 -0800 (PST)
Received: from [10.1.196.62] (usa-sjc-imap-foss1.foss.arm.com [10.72.51.249])
        by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPSA id 0DB133F575;
        Tue, 11 Dec 2018 06:41:58 -0800 (PST)
Subject: Re: [PATCH] irq/irq_sim: store multiple interrupt offsets in a bitmap
To: Bartosz Golaszewski <brgl@bgdev.pl>,
        Thomas Gleixner <tglx@linutronix.de>,
        =?UTF-8?Q?Uwe_Kleine-K=c3=b6nig?= <u.kleine-koenig@pengutronix.de>
Cc: Linux Kernel Mailing List <linux-kernel@vger.kernel.org>
References: <20181109172132.30939-1-brgl@bgdev.pl>
 <CAMRc=MeY_CbdQDF7UOai5MW3OLF1u+a04AAyq5bsux8_Fv5DVQ@mail.gmail.com>
From: Marc Zyngier <marc.zyngier@arm.com>
Openpgp: preference=signencrypt
Autocrypt: addr=marc.zyngier@arm.com; prefer-encrypt=mutual; keydata=
 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
Organization: ARM Ltd
Message-ID: <204b38d9-7658-f21d-3153-e1d9db749550@arm.com>
Date: Tue, 11 Dec 2018 14:41:57 +0000
User-Agent: Mozilla/5.0 (X11; Linux aarch64; rv:60.0) Gecko/20100101
 Thunderbird/60.3.1
MIME-Version: 1.0
In-Reply-To: <CAMRc=MeY_CbdQDF7UOai5MW3OLF1u+a04AAyq5bsux8_Fv5DVQ@mail.gmail.com>
Content-Type: text/plain; charset=utf-8
Content-Language: en-US
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 11/12/2018 14:02, Bartosz Golaszewski wrote:
> pt., 9 lis 2018 o 18:21 Bartosz Golaszewski <brgl@bgdev.pl> napisał(a):
>>
>> Two threads can try to fire the irq_sim with different offsets and will
>> end up fighting for the irq_work asignment. Thomas Gleixner suggested a
>> solution based on a bitfield where we set a bit for every offset
>> associated with an interrupt that should be fired and then iterate over
>> all set bits in the interrupt handler.
>>
>> This is a slightly modified solution using a bitmap so that we don't
>> impose a limit on the number of interrupts one can allocate with
>> irq_sim.
>>
>> Suggested-by: Thomas Gleixner <tglx@linutronix.de>
>> Signed-off-by: Bartosz Golaszewski <brgl@bgdev.pl>
>> ---
>>  include/linux/irq_sim.h |  2 +-
>>  kernel/irq/irq_sim.c    | 23 +++++++++++++++++++++--
>>  2 files changed, 22 insertions(+), 3 deletions(-)
>>
>> diff --git a/include/linux/irq_sim.h b/include/linux/irq_sim.h
>> index 630a57e55db6..4500d453a63e 100644
>> --- a/include/linux/irq_sim.h
>> +++ b/include/linux/irq_sim.h
>> @@ -16,7 +16,7 @@
>>
>>  struct irq_sim_work_ctx {
>>         struct irq_work         work;
>> -       int                     irq;
>> +       unsigned long           *pending;
>>  };
>>
>>  struct irq_sim_irq_ctx {
>> diff --git a/kernel/irq/irq_sim.c b/kernel/irq/irq_sim.c
>> index dd20d0d528d4..98a20e1594ce 100644
>> --- a/kernel/irq/irq_sim.c
>> +++ b/kernel/irq/irq_sim.c
>> @@ -34,9 +34,20 @@ static struct irq_chip irq_sim_irqchip = {
>>  static void irq_sim_handle_irq(struct irq_work *work)
>>  {
>>         struct irq_sim_work_ctx *work_ctx;
>> +       unsigned int offset = 0;
>> +       struct irq_sim *sim;
>> +       int irqnum;
>>
>>         work_ctx = container_of(work, struct irq_sim_work_ctx, work);
>> -       handle_simple_irq(irq_to_desc(work_ctx->irq));
>> +       sim = container_of(work_ctx, struct irq_sim, work_ctx);
>> +
>> +       while (!bitmap_empty(work_ctx->pending, sim->irq_count)) {
>> +               offset = find_next_bit(work_ctx->pending,
>> +                                      sim->irq_count, offset);
>> +               clear_bit(offset, work_ctx->pending);
>> +               irqnum = irq_sim_irqnum(sim, offset);
>> +               handle_simple_irq(irq_to_desc(irqnum));
>> +       }
>>  }
>>
>>  /**
>> @@ -63,6 +74,13 @@ int irq_sim_init(struct irq_sim *sim, unsigned int num_irqs)
>>                 return sim->irq_base;
>>         }
>>
>> +       sim->work_ctx.pending = bitmap_zalloc(num_irqs, GFP_KERNEL);
>> +       if (!sim->work_ctx.pending) {
>> +               kfree(sim->irqs);
>> +               irq_free_descs(sim->irq_base, num_irqs);
>> +               return -ENOMEM;
>> +       }
>> +
>>         for (i = 0; i < num_irqs; i++) {
>>                 sim->irqs[i].irqnum = sim->irq_base + i;
>>                 sim->irqs[i].enabled = false;
>> @@ -89,6 +107,7 @@ EXPORT_SYMBOL_GPL(irq_sim_init);
>>  void irq_sim_fini(struct irq_sim *sim)
>>  {
>>         irq_work_sync(&sim->work_ctx.work);
>> +       bitmap_free(sim->work_ctx.pending);
>>         irq_free_descs(sim->irq_base, sim->irq_count);
>>         kfree(sim->irqs);
>>  }
>> @@ -143,7 +162,7 @@ EXPORT_SYMBOL_GPL(devm_irq_sim_init);
>>  void irq_sim_fire(struct irq_sim *sim, unsigned int offset)
>>  {
>>         if (sim->irqs[offset].enabled) {
>> -               sim->work_ctx.irq = irq_sim_irqnum(sim, offset);
>> +               set_bit(offset, sim->work_ctx.pending);
>>                 irq_work_queue(&sim->work_ctx.work);
>>         }
>>  }
>> --
>> 2.19.1
>>
> 
> Ping and Cc'ing Marc Zyngier. Any chance of getting this in for 4.21?

Bizarrely, I can't find any trace of this patch in my Inbox. I've now
cherry-picked from https://lore.kernel.org/patchwork/patch/1009297/ .

Thanks,

	M.
-- 
Jazz is not dead. It just smells funny...
