Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:28:45 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id B8E7358046A;
	Sun,  2 Dec 2018 03:13:41 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 02 Dec 2018 03:13:41 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AvVixFhSsIiewi4s7NCUNzRL0MNpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64YBWPt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KptVRTmij?=
 =?us-ascii?q?oINyQh/W/ZisJ+kr9VoByuqBNj3oHbYo+aOvllfqPFf94XXnZBUtpLWiBdHo+x?=
 =?us-ascii?q?dZUDAuwcNuhYtYn9oF4OoAO5CwmtB+Pg1CJDiGPs0q0i1OQhCQbG3BY8H9kTt3?=
 =?us-ascii?q?nUts31NL8OUe2uyKnIzDPDb+5Z2Dvn6YjHaRUhreuQUrJ3dMrc0E8iHB7GgFWI?=
 =?us-ascii?q?sYHpIS+Z2+AXv2SG4edsS/ijh3Mkpg1tuDSix8UhhpHNi44P11zJ+iZ0zJwrKd?=
 =?us-ascii?q?GkR0N3e8OoHZVSuiycKoB4WNktQ3tytyY/0rAGuYC0fCwNyJk/2R7fZOKIc5KS?=
 =?us-ascii?q?7hLgSumROzF4i2xheL6lgBay60egxvX9VsmyzllKsjJInsfQun0JzRDf98aKRu?=
 =?us-ascii?q?Vn8ku82juDyxrf5+BGLEwskKrUMZ8hwro+lpoJtkTDGzf7mEH3jK+Qa0Ul9fGk?=
 =?us-ascii?q?6+f5bbX8oJ+TKYt0hhj5MqUgnMywH/44PxMQX2iU5+u8zqfv/U7nT7VQiP05jK?=
 =?us-ascii?q?3ZvIrdJcQBqa61GxVV3Zo76xajEzem18wVnX0GLFJGZh2LlYfoO0zVLfD8DPe/?=
 =?us-ascii?q?hUmskThxy/DHOL3hHovCLnzZnLj9erZ97lZWyBAvwtBH+5JUFrYBLerzWkDrtd?=
 =?us-ascii?q?zYEgU2Mwuuz+bnFdVyzIUeWW2UD6+dMaPSt0KI5+01L+mNYo8VpCjyK/w/6/Hy?=
 =?us-ascii?q?in85nEcXfbO10psPdHC4AvNmLl2bYXrrnNgNC2QKvg04TOzsj12PSjpTZ3e0X6?=
 =?us-ascii?q?Ih6TA3EoOmDYHfRo+zhLyNxju0HppTZmpeEFCDDW/od5mYW/cLcC+dONRhkjwD?=
 =?us-ascii?q?VbiiUYMhzwuhtA3hxrpjL+rU/DAYtJ352Nh04e3TiQ899ThuA8uB1GGNSnl+nn?=
 =?us-ascii?q?kUSD8uwKB/vUt9x0+A0adihfxUD9hT5/JTXQc8Op7R1Oh6C9H0WgLccdaFUlem?=
 =?us-ascii?q?QtO6AT4vStI92cMBY0F4G9+6lBDMwzKqA6MJl7yMHJE777jT32bvKMpny3bJzq?=
 =?us-ascii?q?8hj0I4TctJMmGmgq1/9w3XB4PSl0WZlqCqdbkT3SLX9WeDy3aOs19cUAJqTarF?=
 =?us-ascii?q?WnUfbFPMrdvl/kPCU6OuCbM/PwRc08GCNLVFZsfpjVpcQvfjI8rRY2Sqlme0BB?=
 =?us-ascii?q?aIwK6MbYXwd2Uc2iXdFFYLkwQJ8XmaMgg+Az+ro3jCAzx2CVLvf0Ts/PFiqHO6?=
 =?us-ascii?q?S080yB2Kb01h1rav5h4Zn/ucS+kX3rIFvichpC55HFK839LQFtqBqBBtfKRaYd?=
 =?us-ascii?q?Mh/lhH0XjVuBB6PpylN6pinEIRcxxrv0Py0BV6Ep9Pkcw0o3Il0gVzKbiU30hc?=
 =?us-ascii?q?dzyFx5/wPL7XKm7s/B20b67W21fe0MuZ+6sV6fQ4rUnjsx+tFkY473pn1NxV2W?=
 =?us-ascii?q?OG5prWFAoSTY7xUkEv+hl6urHWeDUy65nV1H1sK6a0tDDC1sktBOskzBagYthe?=
 =?us-ascii?q?PLmFFA/0D80VGcyuJPY2lFiuaxIOJPpS+7IsP8O6a/uG37amPPxhnD26l2tH+p?=
 =?us-ascii?q?1y0kWW+yp6VOHIxZcFz+iE0QSdUzfzkUmustrwmYBCfjwSGmu/yS75BI9efKFy?=
 =?us-ascii?q?fIALCXuwLM2z3Nlxm5ntW3tA/l65G1wGwNOpeQaVb1Hl3QxQ1F4boHy9lSuj0j?=
 =?us-ascii?q?x0lSokrq6e3CzI3uTjewALOm9NRGl+k1jsJZK4gMwdXEitdwIpjgeq5V7mx6hH?=
 =?us-ascii?q?o6RyN2vTTl1Sfyj1LGFiVbG8tqGYbM5M65MosCNXX/q6YV2BTr79oh0a0z7sHm?=
 =?us-ascii?q?dExTA7cS2qtYv9nxBglG2dK3NzpmLDec5s3Rff+MDcRflJ0zsGXiZ4jiPbBlq9?=
 =?us-ascii?q?P9mv5tiUk5bDsuajV2OuTJFTcC/rzZ+euyu//2FlHRq/n/WrkN39DQc6yTP718?=
 =?us-ascii?q?VtVSjQrxbzeIjr2766MeJ6ZEZoAlD85tF+GoF/lIswmZ4R1WIbhpWT4XoIj2Pz?=
 =?us-ascii?q?Pc9H1qL5aXoHXSQLzMLN4Aj5xE1jKWqEx4f4VnWe2MRtfde7bX0N2iIh8c9KEr?=
 =?us-ascii?q?yb46JenSt6uVe4qQPRYf5gnjYS0/cu6Xgag/0Xtwop1CmSHrcSHUxANyz2ixuI?=
 =?us-ascii?q?98y+rLlQZGu3bbiw009+kcqgDb6YpAFcRW35eowjHSJr6sV/MVTM0GD8643+ed?=
 =?us-ascii?q?nQa84TuQOQkxvak+dVL5cxnOIQhSV7IWL9oWEly+kjgBN1x566u4yHK3h38KK9?=
 =?us-ascii?q?Hx5VLTn1Z8IV+jHwgqdShMeW34azHpp/HjUHRofnTfWtEDgKr/ToKx6OECEgqn?=
 =?us-ascii?q?ecAbffHxWQ6EJ4oHLUCZyrK2ubJHoEzdVhWRmdIlZQgBsPUTU+n545EB2qxcP7?=
 =?us-ascii?q?fEd44DAR+kD3qh9Wxu10MBn/V3/VpB20ZTcsVJifMB1W4xlC5kfSLMye9/9zED?=
 =?us-ascii?q?te/pG7twyNLWqbZwtTAGENW0yEAU3jP7a06dnB9eiYGvSxL//UbbqSruxeUu+C?=
 =?us-ascii?q?xYiz3Yt+4zaMKsKPM2FiD/Il20pDXnN5G8XDlzUMUSwXkC3NYNCBpBeh4S16tc?=
 =?us-ascii?q?S/8PXtWALy6oqDEbpSMdNz+x+ohaePLfKfhCF8KTxAzJMD2WfIyKQD3F4Vkyxh?=
 =?us-ascii?q?bSStHq8atSHTTKPcgKtXDx8AZiN3NctI6b883wZXNc7ajNP1yqB3jvovB1hZUl?=
 =?us-ascii?q?zhn9mjZdYWLGGlKFPHGEGLOayaJT3KxsH7e7+zRadMg+VUqRKwvy2WE0viPjSF?=
 =?us-ascii?q?ijnoWAqjMeBKjCGHIhNevJuxfQpqCWjmVNjmcAG0MMdrjT0qxr05nnPLOnQaMT?=
 =?us-ascii?q?h5ckNNqKWf7CJYgvplHWxB4WFoLe2Fmyaf8unZJYwasfptAiRoie1a5G42xKdS?=
 =?us-ascii?q?7CFBF7RJn37pqcN2v1CtkaGtzTN9XBdU4mJJno6R+0FjP7jJ3pZFUHfAuhkK6D?=
 =?us-ascii?q?PDJQ4Noo5AC97i85pZ0t/Xk7jvYGNY68rI1c8dAdXEbsONNTwqNh+/S22cNxcM?=
 =?us-ascii?q?UTP+bTKXvEdaivzHrnA=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ARAAB8vQNch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgVqCESeMEV+LKVABAQaBNRSIfQ6OKYFzEgEBGBMBh3YiNAkNAQM?=
 =?us-ascii?q?BAQEBAQECARMBAQEKCwkIKS+CNiKCZAEBAQECAQECDxUTOQYFAQkBAQoOCgklA?=
 =?us-ascii?q?wwFDTwTBR2Cf4FqAwgFCAMBAZgbiVgBAQGBajOHcw2CHIwcF3iBB4NuNYJXhV+?=
 =?us-ascii?q?CJgKgEi4Jjg6DIyMKApEaLI5IiVICBAYFAhMBgUaCDU0jFYMngicXfwECjR1wg?=
 =?us-ascii?q?QUBASGMewEB?=
X-IPAS-Result: =?us-ascii?q?A0ARAAB8vQNch0O0hNFjHAEBAQQBAQcEAQGBUQcBAQsBgVq?=
 =?us-ascii?q?CESeMEV+LKVABAQaBNRSIfQ6OKYFzEgEBGBMBh3YiNAkNAQMBAQEBAQECARMBA?=
 =?us-ascii?q?QEKCwkIKS+CNiKCZAEBAQECAQECDxUTOQYFAQkBAQoOCgklAwwFDTwTBR2Cf4F?=
 =?us-ascii?q?qAwgFCAMBAZgbiVgBAQGBajOHcw2CHIwcF3iBB4NuNYJXhV+CJgKgEi4Jjg6DI?=
 =?us-ascii?q?yMKApEaLI5IiVICBAYFAhMBgUaCDU0jFYMngicXfwECjR1wgQUBASGMewEB?=
X-IronPort-AV: E=Sophos;i="5.56,306,1539673200"; 
   d="scan'208";a="43175151"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 02 Dec 2018 03:13:38 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1725841AbeLBLNg (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sun, 2 Dec 2018 06:13:36 -0500
Received: from mx0b-001b2d01.pphosted.com ([148.163.158.5]:47906 "EHLO
        mx0a-001b2d01.pphosted.com" rhost-flags-OK-OK-OK-FAIL)
        by vger.kernel.org with ESMTP id S1725776AbeLBLNf (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sun, 2 Dec 2018 06:13:35 -0500
Received: from pps.filterd (m0098413.ppops.net [127.0.0.1])
        by mx0b-001b2d01.pphosted.com (8.16.0.22/8.16.0.22) with SMTP id wB2B9PZW105808
        for <linux-kernel@vger.kernel.org>; Sun, 2 Dec 2018 06:13:32 -0500
Received: from e06smtp05.uk.ibm.com (e06smtp05.uk.ibm.com [195.75.94.101])
        by mx0b-001b2d01.pphosted.com with ESMTP id 2p482s2ctw-1
        (version=TLSv1.2 cipher=AES256-GCM-SHA384 bits=256 verify=NOT)
        for <linux-kernel@vger.kernel.org>; Sun, 02 Dec 2018 06:13:32 -0500
Received: from localhost
        by e06smtp05.uk.ibm.com with IBM ESMTP SMTP Gateway: Authorized Use Only! Violators will be prosecuted
        for <linux-kernel@vger.kernel.org> from <rppt@linux.ibm.com>;
        Sun, 2 Dec 2018 11:13:30 -0000
Received: from b06cxnps4076.portsmouth.uk.ibm.com (9.149.109.198)
        by e06smtp05.uk.ibm.com (192.168.101.135) with IBM ESMTP SMTP Gateway: Authorized Use Only! Violators will be prosecuted;
        (version=TLSv1/SSLv3 cipher=AES256-GCM-SHA384 bits=256/256)
        Sun, 2 Dec 2018 11:13:19 -0000
Received: from d06av24.portsmouth.uk.ibm.com (mk.ibm.com [9.149.105.60])
        by b06cxnps4076.portsmouth.uk.ibm.com (8.14.9/8.14.9/NCO v10.0) with ESMTP id wB2BDIJg3277230
        (version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256 verify=FAIL);
        Sun, 2 Dec 2018 11:13:19 GMT
Received: from d06av24.portsmouth.uk.ibm.com (unknown [127.0.0.1])
        by IMSVA (Postfix) with ESMTP id DA75B42045;
        Sun,  2 Dec 2018 11:13:18 +0000 (GMT)
Received: from d06av24.portsmouth.uk.ibm.com (unknown [127.0.0.1])
        by IMSVA (Postfix) with ESMTP id CC8B042041;
        Sun,  2 Dec 2018 11:13:15 +0000 (GMT)
Received: from rapoport-lnx (unknown [9.148.204.137])
        by d06av24.portsmouth.uk.ibm.com (Postfix) with ESMTPS;
        Sun,  2 Dec 2018 11:13:15 +0000 (GMT)
Date: Sun, 2 Dec 2018 13:13:13 +0200
From: Mike Rapoport <rppt@linux.ibm.com>
To: Souptick Joarder <jrdr.linux@gmail.com>
Cc: akpm@linux-foundation.org, willy@infradead.org, mhocko@suse.com,
        kirill.shutemov@linux.intel.com, vbabka@suse.cz, riel@surriel.com,
        sfr@canb.auug.org.au, rppt@linux.vnet.ibm.com,
        peterz@infradead.org, linux@armlinux.org.uk, robin.murphy@arm.com,
        iamjoonsoo.kim@lge.com, treding@nvidia.com, keescook@chromium.org,
        m.szyprowski@samsung.com, stefanr@s5r6.in-berlin.de,
        hjc@rock-chips.com, heiko@sntech.de, airlied@linux.ie,
        oleksandr_andrushchenko@epam.com, joro@8bytes.org,
        pawel@osciak.com, kyungmin.park@samsung.com, mchehab@kernel.org,
        boris.ostrovsky@oracle.com, jgross@suse.com,
        linux-kernel@vger.kernel.org, linux-mm@kvack.org,
        linux-arm-kernel@lists.infradead.org,
        linux1394-devel@lists.sourceforge.net,
        dri-devel@lists.freedesktop.org,
        linux-rockchip@lists.infradead.org, xen-devel@lists.xen.org,
        iommu@lists.linux-foundation.org, linux-media@vger.kernel.org
Subject: Re: [PATCH v2 1/9] mm: Introduce new vm_insert_range API
References: <20181202061944.GA3094@jordon-HP-15-Notebook-PC>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181202061944.GA3094@jordon-HP-15-Notebook-PC>
User-Agent: Mutt/1.5.24 (2015-08-30)
X-TM-AS-GCONF: 00
x-cbid: 18120211-0020-0000-0000-000002F0E7FC
X-IBM-AV-DETECTION: SAVI=unused REMOTE=unused XFE=unused
x-cbparentid: 18120211-0021-0000-0000-00002140544B
Message-Id: <20181202111313.GC6959@rapoport-lnx>
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10434:,, definitions=2018-12-02_07:,,
 signatures=0
X-Proofpoint-Spam-Details: rule=outbound_notspam policy=outbound score=0 priorityscore=1501
 malwarescore=0 suspectscore=0 phishscore=0 bulkscore=0 spamscore=0
 clxscore=1015 lowpriorityscore=0 mlxscore=0 impostorscore=0
 mlxlogscore=999 adultscore=0 classifier=spam adjust=0 reason=mlx
 scancount=1 engine=8.0.1-1810050000 definitions=main-1812020110
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Sun, Dec 02, 2018 at 11:49:44AM +0530, Souptick Joarder wrote:
> Previouly drivers have their own way of mapping range of
> kernel pages/memory into user vma and this was done by
> invoking vm_insert_page() within a loop.
> 
> As this pattern is common across different drivers, it can
> be generalized by creating a new function and use it across
> the drivers.
> 
> vm_insert_range is the new API which will be used to map a
> range of kernel memory/pages to user vma.
> 
> This API is tested by Heiko for Rockchip drm driver, on rk3188,
> rk3288, rk3328 and rk3399 with graphics.
> 
> Signed-off-by: Souptick Joarder <jrdr.linux@gmail.com>
> Reviewed-by: Matthew Wilcox <willy@infradead.org>
> Tested-by: Heiko Stuebner <heiko@sntech.de>
> ---
>  include/linux/mm_types.h |  3 +++
>  mm/memory.c              | 38 ++++++++++++++++++++++++++++++++++++++
>  mm/nommu.c               |  7 +++++++
>  3 files changed, 48 insertions(+)
> 
> diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h
> index 5ed8f62..15ae24f 100644
> --- a/include/linux/mm_types.h
> +++ b/include/linux/mm_types.h
> @@ -523,6 +523,9 @@ extern void tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm,
>  extern void tlb_finish_mmu(struct mmu_gather *tlb,
>  				unsigned long start, unsigned long end);
> 
> +int vm_insert_range(struct vm_area_struct *vma, unsigned long addr,
> +			struct page **pages, unsigned long page_count);
> +

This seem to belong to include/linux/mm.h, near vm_insert_page()

>  static inline void init_tlb_flush_pending(struct mm_struct *mm)
>  {
>  	atomic_set(&mm->tlb_flush_pending, 0);
> diff --git a/mm/memory.c b/mm/memory.c
> index 15c417e..84ea46c 100644
> --- a/mm/memory.c
> +++ b/mm/memory.c
> @@ -1478,6 +1478,44 @@ static int insert_page(struct vm_area_struct *vma, unsigned long addr,
>  }
> 
>  /**
> + * vm_insert_range - insert range of kernel pages into user vma
> + * @vma: user vma to map to
> + * @addr: target user address of this page
> + * @pages: pointer to array of source kernel pages
> + * @page_count: number of pages need to insert into user vma
> + *
> + * This allows drivers to insert range of kernel pages they've allocated
> + * into a user vma. This is a generic function which drivers can use
> + * rather than using their own way of mapping range of kernel pages into
> + * user vma.
> + *
> + * If we fail to insert any page into the vma, the function will return
> + * immediately leaving any previously-inserted pages present.  Callers
> + * from the mmap handler may immediately return the error as their caller
> + * will destroy the vma, removing any successfully-inserted pages. Other
> + * callers should make their own arrangements for calling unmap_region().
> + *
> + * Context: Process context. Called by mmap handlers.
> + * Return: 0 on success and error code otherwise
> + */
> +int vm_insert_range(struct vm_area_struct *vma, unsigned long addr,
> +			struct page **pages, unsigned long page_count)
> +{
> +	unsigned long uaddr = addr;
> +	int ret = 0, i;
> +
> +	for (i = 0; i < page_count; i++) {
> +		ret = vm_insert_page(vma, uaddr, pages[i]);
> +		if (ret < 0)
> +			return ret;
> +		uaddr += PAGE_SIZE;
> +	}
> +
> +	return ret;
> +}
> +EXPORT_SYMBOL(vm_insert_range);
> +
> +/**
>   * vm_insert_page - insert single page into user vma
>   * @vma: user vma to map to
>   * @addr: target user address of this page
> diff --git a/mm/nommu.c b/mm/nommu.c
> index 749276b..d6ef5c7 100644
> --- a/mm/nommu.c
> +++ b/mm/nommu.c
> @@ -473,6 +473,13 @@ int vm_insert_page(struct vm_area_struct *vma, unsigned long addr,
>  }
>  EXPORT_SYMBOL(vm_insert_page);
> 
> +int vm_insert_range(struct vm_area_struct *vma, unsigned long addr,
> +			struct page **pages, unsigned long page_count)
> +{
> +	return -EINVAL;
> +}
> +EXPORT_SYMBOL(vm_insert_range);
> +
>  /*
>   *  sys_brk() for the most part doesn't need the global kernel
>   *  lock, except when an application is doing something nasty
> -- 
> 1.9.1
> 

-- 
Sincerely yours,
Mike.

