Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 22:12:46 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from FMSMGA003.fm.intel.com (fmsmga003.fm.intel.com [10.253.24.29])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id B1E8B58061F;
	Thu, 13 Dec 2018 06:10:26 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by FMSMGA003-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 13 Dec 2018 06:10:26 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AruGkoB24IcpstrXksmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segSKf3xwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJPUMhRSSJPH4Cy?=
 =?us-ascii?q?b4UAAOUdIOlXrYfyp0AWrRa8HgSsGP/jxyVUinPqx6A2zeIsGhzG0gw6GNIOtW?=
 =?us-ascii?q?zZotHrO6cJSuC1zbXHwi/eZPxUxDf29Y/FchI/rvCMQLJ9asnRxlc1FwPDkFqQ?=
 =?us-ascii?q?rZbpPzSP1uQCqmWW6fdrW+G3i2M/tQ19vjyiyt0xhoTHmI4Z0E3I+CZlzIovJN?=
 =?us-ascii?q?C1SlZ3bNqqHZdKqS2WKYh7TtkmTm10oio216EKtJC9cSMX0poo3QTfZOaCc4WQ?=
 =?us-ascii?q?4hLsSuKRITBgiXJ7d7KwmQyy/VKjyuLiTMm01khFri5fntnLrHAN2ATf6smBSv?=
 =?us-ascii?q?Rj4keswSiD2xzX5+1ePEw5m7TXJ4Q8zrMzipYfq0XOEy3ulEXzlqCWd0Ek+uay?=
 =?us-ascii?q?6+TgZ7XrvpucN45yigHjPaUig8+/DvoiMggIQWeb/f2w1Lrt/E3/XrpKlOY7kr?=
 =?us-ascii?q?fWsJ/EP8QXvK25DBFP0oYl9Rm/Cy2q0NMCnXkINF5FYg6Ij5D1O1HSJ/D1FfO/?=
 =?us-ascii?q?g1WvkDh13fzHMaDhD47JLnjClrfhYLl851RdyAo10dBQ+ZZUBqsdL/L0X0/7rM?=
 =?us-ascii?q?bYAQMhMwyo3+bnD81w1oMEVmKOHq+WKqTSvUWI5uIyOeaMYoAVtS35K/gk4f7u?=
 =?us-ascii?q?kHA4lUUcfamvwZsYdnS4Eu56LEWeZHrmms0BHnsSvgoiUOzqj0WPUTxUZ3msRa?=
 =?us-ascii?q?485TY7CISgDYfEXY2thL2B3CGmHpxZfGxGC1aMEWv2eIWAQfsDdCWSIsp5mDwe?=
 =?us-ascii?q?SbehU5Mh1Q2ptALi0bVnNerU+iobtZ75zth6/e/TmAo29Tx1CcSdzm6MQ3t1nm?=
 =?us-ascii?q?MOWz85wqR/rVZhxVeE1Khym+ZYGsBL5/NVTgc6MobRz+9gBND0QA7BetaJR0yg?=
 =?us-ascii?q?QtWpGjwxStMxw9kTY0dyAdmijxbD3za0DL8RjbCEGJs08qfE1XjrO8l902rG1L?=
 =?us-ascii?q?Umj1Q+X8RAL3OmibBl+wjTHYHJlV6ZmLisdagb2C7N92KDzW6VsUFcUQ5wV7jF?=
 =?us-ascii?q?XH8FakvXq9T5+l3NT7u0Bbs7NQtBzNaIKrFWZd3xkVVGWPDjNczDbG2rhWe/Gw?=
 =?us-ascii?q?yExrOWY4rsYGUSwiPdBVMAkwAS+3aGKAc/Cj2go2LYEDxhC1bvb1nw/ul5rXOx?=
 =?us-ascii?q?VlU0wB2Sb019y7q1/QYYheCdS/MW2bIEpCchqjVuEFahxd7WDMCApw5gfKVabt?=
 =?us-ascii?q?Mw+1NH1WPftwxgMZ2sNaFihlgCcwtpu0PizQl4CoJFkcIytnMl0BJyKb6E0FNG?=
 =?us-ascii?q?bz6Xx5TwNaPYK2bs/BGjcbXZ2kzD39mM/KcP6/M4q0v4sQGtF0oi9Whn0tZP33?=
 =?us-ascii?q?ud4JXKEBQdUZbrXkkr8Bh6oqnQYjMh6IPMyX1sLa60vyfC2tI0Hucq1gysftZf?=
 =?us-ascii?q?MKyeEg/yHNYXB8yvKOwshlioYQgIPOFU9K4oIcymc+GK17KsPOZlhDiml3hI4J?=
 =?us-ascii?q?hh0kKQ8CpxUvTI35cZzP6CxAuISjD8gE2nss/pg4BEZCgeEXalxijgGYFeeLdy?=
 =?us-ascii?q?fYENCWq1J823x9N+h4PiWnJC9V6jAU8G19GteRaIc1P92ghQ31wNoXO7gSu40y?=
 =?us-ascii?q?B0kzYxo6uf3SzC2eTjeAAcOm5WQmlvllPsIYmyj9AHU0mkdQkplB255Unkw6hX?=
 =?us-ascii?q?vrhwL27WQU1QZSj5M3liUrestrqFe8NP6oknsT9UUOS/ZlCWUKX9rAEZ0yPgHm?=
 =?us-ascii?q?tewi40dzext5X9nhx6jn+dLXlpoHrYf8Fw2QnQ5NjGSfFN2ToGQTFyiSPLCVik?=
 =?us-ascii?q?I9mp4dKUmo/Ds++kUGKtTJ9TcSjtzY6bsCu75GtqAQCwnvypm93nFxQ63jH/19?=
 =?us-ascii?q?VwSSrIqxP8aJHx16umKeJnYlVoBFjk5sp5AI5+k5E8hJEN2XcAgJWV8mEKkWPy?=
 =?us-ascii?q?MdVdxKL/Y2ABRT8Nw97J/gfl3FdvIW6Ox4L8Tn+d2NduZ8GmYmMK3SIw98VKCK?=
 =?us-ascii?q?aX7LNehyd0rES3rRnNYfdjhDcS0uUh6GQVg+wSvAotzyOdAq0dHEVCPCzskQiI?=
 =?us-ascii?q?4M66rKlNeGmvdr2w3lJknd+9FLGCvh1cWHHhd5c+Gi9w699zMVPW333194HkY8?=
 =?us-ascii?q?LQbdMIux2QkhfAifVVKZ0rmvoLgypnJXzyvXk/x+Enihxu2ImwvJKbJGV14KK5?=
 =?us-ascii?q?HhlYOyXuaMwJ/THtibtektyS34CyBZhhHjQLXJ31TfOnCj4StPLnNxqQHz04sH?=
 =?us-ascii?q?uUBb3fHQqH4kd8s33PC4yrN22QJHQBz9VtXhydK1JEgAwOQDU2hJ05Fh2pxMz8?=
 =?us-ascii?q?dkd2/CsR60X8qhtNzOJoKhb+Xn3epAeudjc7VpyfIABK4QFF4kffKdae4f5rHy?=
 =?us-ascii?q?FE4p2hqxSAK2ycZwRVFGEJR1aLB1b5Mrm14tnA9eeYC/G6L/vPZ7WOtONfW+2J?=
 =?us-ascii?q?xZKpzotp4TKMOt+TMXllCv0xwlBDUmxhG8TFhzUPTDQalyLTYM6apxe8+Sx3ot?=
 =?us-ascii?q?q88PTxXwLv6pWAC6FPMdV04B22haaDN+iNhCd2MzpY15UMxWPWx7gbxlIdlyZu?=
 =?us-ascii?q?dzy1G7QaqSHNVL7QmrNQDxMDcSxzKdBH77gi0QhNI8LbjtL126V8jv40DVdFSF?=
 =?us-ascii?q?PgltuoZcwMP2GyKlfHCFyXO7SBID3B29v3br+kSb1MkOVUsAW9uSqaE0/mJDiM?=
 =?us-ascii?q?iyPlWAyvMe5SiiGWJxheuIC7chZwBmnvVtPmahunMNBpiT0626E7hnTPNWQEKz?=
 =?us-ascii?q?hzb1tNrqGM7SNfmvh+G3ZO7nxgLemFnSaW9+jZKpYMvvttDSR5jOZa4HU8y7tI?=
 =?us-ascii?q?4yBIXv11mC3OrtFwp1GqiPWAyj1iUEkGljEeoouHtFsqEKDY6tEUX3/B/Q4l82?=
 =?us-ascii?q?CPAg4H4dBiD4u8lbpXz43tmbnoKTxLu+PJtZ8eCtnJAMGKKnwsNVzuAjGCX1hN?=
 =?us-ascii?q?diKiKWyK3x8Vq/qV7HDA68Fi8pU=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AbAADtZhJch0O0hNFjHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwEBg2onjBVfjVSXQIFzFBgTAYM/AYQEIjQJDQEDAQEBAQEBAgETAQEBCA0?=
 =?us-ascii?q?JCCkjDEIBEAGBYiQBgmIDAwECJBECBgEBNwEFCQEBCg4TJQMMBUkTBYMcggEEA?=
 =?us-ascii?q?aYLgWwzgnYBAQWHKwiLIIEcF4FAP4ERgmQuiDaCJolBLoFFlV0JDZFBIwoCiWu?=
 =?us-ascii?q?HU5lJgUaCDn0IgyeCGwwXiF6FQD8yAYEEAQEHARmBNIpzAQE?=
X-IPAS-Result: =?us-ascii?q?A0AbAADtZhJch0O0hNFjHQEBBQEHBQGBUQgBCwEBg2onjBV?=
 =?us-ascii?q?fjVSXQIFzFBgTAYM/AYQEIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjDEIBEAGBY?=
 =?us-ascii?q?iQBgmIDAwECJBECBgEBNwEFCQEBCg4TJQMMBUkTBYMcggEEAaYLgWwzgnYBAQW?=
 =?us-ascii?q?HKwiLIIEcF4FAP4ERgmQuiDaCJolBLoFFlV0JDZFBIwoCiWuHU5lJgUaCDn0Ig?=
 =?us-ascii?q?yeCGwwXiF6FQD8yAYEEAQEHARmBNIpzAQE?=
X-IronPort-AV: E=Sophos;i="5.56,349,1539673200"; 
   d="scan'208";a="55039792"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 13 Dec 2018 06:10:24 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728716AbeLMOKX (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 13 Dec 2018 09:10:23 -0500
Received: from mail.kernel.org ([198.145.29.99]:54102 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1727720AbeLMOKW (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 13 Dec 2018 09:10:22 -0500
Received: from linux-8ccs (p5DE45A67.dip0.t-ipconnect.de [93.228.90.103])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 91FDA2086D;
        Thu, 13 Dec 2018 14:10:16 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1544710220;
        bh=SSWtJydgAT1VIU1V2HZUv33F7SJctJF2ncli7OfWFOQ=;
        h=Date:From:To:Cc:Subject:References:In-Reply-To:From;
        b=ZOuhypgqy+brjCnFoNs8MojU6a/Cdy++6vjYA4O+gsdTIVA3QVy+arpdsjE8Iv7fi
         IsMsa6H3WjdgvhGiUa2KDhzu7H65oNgpc0p4DaOkqr3gdTglYeaT889xP3tlydk5kD
         8baQXkUowvIEmcLwHDGRpyie7Ui+h0GmJkHjMRAc=
Date: Thu, 13 Dec 2018 15:10:13 +0100
From: Jessica Yu <jeyu@kernel.org>
To: Nadav Amit <namit@vmware.com>
Cc: Ingo Molnar <mingo@redhat.com>, linux-kernel@vger.kernel.org,
        x86@kernel.org, "H. Peter Anvin" <hpa@zytor.com>,
        Thomas Gleixner <tglx@linutronix.de>,
        Borislav Petkov <bp@alien8.de>,
        Andy Lutomirski <luto@kernel.org>,
        Nadav Amit <nadav.amit@gmail.com>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        Peter Zijlstra <peterz@infradead.org>, linux_dti@icloud.com,
        linux-integrity@vger.kernel.org,
        linux-security-module@vger.kernel.org,
        Rick P Edgecombe <rick.p.edgecombe@intel.com>,
        Will Deacon <will.deacon@arm.com>,
        Andrea Parri <andrea.parri@amarulasolutions.com>
Subject: Re: [PATCH v7 13/14] module: Do not set nx for module memory before
 freeing
Message-ID: <20181213141013.GA16819@linux-8ccs>
References: <20181205013408.47725-1-namit@vmware.com>
 <20181205013408.47725-14-namit@vmware.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii; format=flowed
Content-Disposition: inline
In-Reply-To: <20181205013408.47725-14-namit@vmware.com>
X-OS: Linux linux-8ccs 4.12.14-lp150.12.22-default x86_64
User-Agent: Mutt/1.10.1 (2018-07-13)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

+++ Nadav Amit [04/12/18 17:34 -0800]:
>When module memory is about to be freed, there is no apparent reason to
>make it (and its data) executable, but that's exactly what is done
>today. This is not efficient and not secure.
>
>There are various theories why it was done, but none of them seem as
>something that really require it today. nios2 uses kmalloc for module
>memory, but anyhow it does not change the PTEs of the module memory.  In
>x86, changing vmalloc'd memory mappings also modifies the direct mapping
>alias, but the NX-bit is not modified in such way.
>
>So let's remove it. Andy suggested that the changes of the PTEs can be
>avoided (excluding the direct-mapping alias), which is true. However,
>in x86 it requires some cleanup of the contiguous page allocator, which
>is outside of the scope of this patch-set.
>
>Cc: Rick P Edgecombe <rick.p.edgecombe@intel.com>
>Cc: Will Deacon <will.deacon@arm.com>
>Cc: Andy Lutomirski <luto@kernel.org>
>Signed-off-by: Nadav Amit <namit@vmware.com>

[ Thanks Andrea Parri for the cc ]

Regarding the patch subject, don't you mean "Do not make module
memory executable" or "Do not unset nx" instead of "Do not set nx"?
Hm, these double negatives are confusing :-)

I think this also needs to be done in the load_module() error path.
See the bug_cleanup label. There, module_disable_{ro,nx}() are called
before module deallocation.

I am not sure why all this was made executable before freeing in the
first place.  Tried to dig through the commit history and the first
commit that introduced this behavior was 448694a1d50 ("module: undo
module RONX protection correctly"). There, the behavior was changed
from W+NX to W+X before releasing the module. But AFAIK from the
changelog, there was no real technical reason behind it, it stemmed
out of the complaint of code asymmetry :-/

Jessica

>---
> kernel/module.c | 35 ++++++++++++++++++++++-------------
> 1 file changed, 22 insertions(+), 13 deletions(-)
>
>diff --git a/kernel/module.c b/kernel/module.c
>index 7cb207249437..57c5b23746e7 100644
>--- a/kernel/module.c
>+++ b/kernel/module.c
>@@ -2027,20 +2027,29 @@ void set_all_modules_text_ro(void)
> 	mutex_unlock(&module_mutex);
> }
>
>-static void disable_ro_nx(const struct module_layout *layout)
>+static void module_restore_mappings(const struct module_layout *layout)
> {
>-	if (rodata_enabled) {
>-		frob_text(layout, set_memory_rw);
>-		frob_rodata(layout, set_memory_rw);
>-		frob_ro_after_init(layout, set_memory_rw);
>-	}
>-	frob_rodata(layout, set_memory_x);
>-	frob_ro_after_init(layout, set_memory_x);
>-	frob_writable_data(layout, set_memory_x);
>+	/*
>+	 * First, make the mappings of the code non-executable to prevent
>+	 * transient W+X mappings from being set when the text is set as RW.
>+	 */
>+	frob_text(layout, set_memory_nx);
>+
>+	if (!rodata_enabled)
>+		return;
>+
>+	/*
>+	 * Second, set the memory as writable. Although the module memory is
>+	 * about to be freed, these calls are required (at least on x86) to
>+	 * restore the direct map to its "correct" state.
>+	 */
>+	frob_text(layout, set_memory_rw);
>+	frob_rodata(layout, set_memory_rw);
>+	frob_ro_after_init(layout, set_memory_rw);
> }
>
> #else
>-static void disable_ro_nx(const struct module_layout *layout) { }
>+static void module_restore_mappings(const struct module_layout *layout) { }
> static void module_enable_nx(const struct module *mod) { }
> static void module_disable_nx(const struct module *mod) { }
> #endif
>@@ -2173,7 +2182,7 @@ static void free_module(struct module *mod)
> 	mutex_unlock(&module_mutex);
>
> 	/* This may be empty, but that's OK */
>-	disable_ro_nx(&mod->init_layout);
>+	module_restore_mappings(&mod->init_layout);
> 	module_arch_freeing_init(mod);
> 	module_memfree(mod->init_layout.base);
> 	kfree(mod->args);
>@@ -2183,7 +2192,7 @@ static void free_module(struct module *mod)
> 	lockdep_free_key_range(mod->core_layout.base, mod->core_layout.size);
>
> 	/* Finally, free the core (containing the module structure) */
>-	disable_ro_nx(&mod->core_layout);
>+	module_restore_mappings(&mod->core_layout);
> 	module_memfree(mod->core_layout.base);
> }
>
>@@ -3507,7 +3516,7 @@ static noinline int do_init_module(struct module *mod)
> #endif
> 	module_enable_ro(mod, true);
> 	mod_tree_remove_init(mod);
>-	disable_ro_nx(&mod->init_layout);
>+	module_restore_mappings(&mod->init_layout);
> 	module_arch_freeing_init(mod);
> 	mod->init_layout.base = NULL;
> 	mod->init_layout.size = 0;
>-- 
>2.17.1
>
