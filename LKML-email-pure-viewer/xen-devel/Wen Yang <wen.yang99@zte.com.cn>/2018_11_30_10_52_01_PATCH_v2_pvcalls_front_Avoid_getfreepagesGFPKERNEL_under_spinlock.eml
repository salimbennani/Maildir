Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:16:26 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 817F658054E;
	Fri, 30 Nov 2018 02:52:20 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 30 Nov 2018 02:52:19 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Ai6T/PhCOIFC4Wd5giczcUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7/oM+wAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95RWSJfH42y?=
 =?us-ascii?q?YYgBAe0OMuhXtIn9v1kDoACiCQm1Hu7j1iVFimPq0aA8zu8vERvG3AslH98WsH?=
 =?us-ascii?q?vbstP1P7oQXu+vyqnIwijIYvRY2Djj7ojEaBAgruuKXbJ/dcfczVIiFgLZjlqO?=
 =?us-ascii?q?s4DqIzSV1uEXv2eH6eptTOSigHMkpQFpujWj2Nsgh43Tio4IxF3I6z91zJs2KN?=
 =?us-ascii?q?GkUkJ2YNypHINRuiyULYd6XN4uTmNytCs51rEKo5y2cDQMxZ863RDQceaHfJKN?=
 =?us-ascii?q?4h/7VOaePzN4hHV9dbKhiBa971Kgxvf/VsaqylZKqDRKkt3WunAKzRzT5dCLSv?=
 =?us-ascii?q?p7/ki/xTaCzx7f5v1ALEwuiKbWJYAtzqQtmpcQrUjPBC77lUfugK+TbEok++yo?=
 =?us-ascii?q?6+r9YrXho5+RL4t0igD4MqQzlc2zGOc4PRYUX2id5+u80KTv/Ur3QbVMkPI2iL?=
 =?us-ascii?q?LUsI7VJcsFvK61GQxV3Zg56xa5ETim1M4UnX4dLFJKYB6HlZTmO0nSIPDkCvey?=
 =?us-ascii?q?m1CskDZox//YJLHgDYjNI2PHkLfge7Z99kFdxBAyzdBZ+5JbFLUBLOjvVU/2sd?=
 =?us-ascii?q?zSFgU5PBCsw+b7FNV90ZsTWWKVDa+YLKPdq1iI6vgvI+mRfoAVvjn9JuMh5/7v?=
 =?us-ascii?q?i385hFAccbOo3ZsRdHC3APBmL1+Fbnrrh9cLCX0KsRYmTOz2lF2CViZeZ3S1X6?=
 =?us-ascii?q?0i/D07C4WmDYHFRoCqm7GB2Ca7HptLZmFJEFyMEHHod5maVPcIci6dPshhkjkc?=
 =?us-ascii?q?X7i7V4AhzQ2utBP9y7d/NOXU4S0YtZXg1NRv/e3cjxMy+CdwD8Sc1WGNUm51kn?=
 =?us-ascii?q?kJRz8wwKBwv0h9xk2f3qh/hvxSDcZT6O9RUgcmKZ7cyPR3C9PoVQLHZNuJTFem?=
 =?us-ascii?q?Tc+gATE+Vd8xx94OY0BgG9StlBzD3iyqA6MLmLyPHpA77qXc333pLcZn13nGzL?=
 =?us-ascii?q?Uhj0UhQsZXKGKpnLB/+BbJC47JiUqZkb2qeroa3CLK8GeDzm+OvEVDXQ50UKXF?=
 =?us-ascii?q?W20fZ0TModT44EPCU6GhCbA9PgRdzs6CL7NAasf1glVeWPfjJNPebnqslGiqGx?=
 =?us-ascii?q?aH2KmAbIrwdGUbxyXSFk4EnhsX/XaHMwg+Gyigr3jfDDxoCVLgfUfs/fNip3O8?=
 =?us-ascii?q?S08+1xuKYFF517qp5h4VguSRS+8S3rIBvychtzV0HVan09LKEdaAoBBhfKFdYd?=
 =?us-ascii?q?M771dKzmbZtw17Ppy9IKFunF8ecwJrv0zw0xV7EJlPkc8vrHky1gp9NbqY0E9d?=
 =?us-ascii?q?dzOfxZ3/ILnXJXf9/R+xa6/awErR0MuL9agV7vQ4qFLjvB+yG0om8nVn1cRV0n?=
 =?us-ascii?q?SG6pXLCgoSTYz+UkIt+xdmoLHaZzE355nI2n10Lam0rjjC1sopBes40BqvY81T?=
 =?us-ascii?q?MaKEFADoFc0aCNOjKOgrm1ivcxIFM/pe9K8yP8O6afSG3LSnM/pnnDKjlW5H+p?=
 =?us-ascii?q?xy0lqQ9ypgTe7Fx4wFw/CE0QSdTTfzkVChvtrxmY9afzESH3OzxjT+C45Ve6J9?=
 =?us-ascii?q?Y5wLCWCoI8CswtV+hpjtW2NX9VK5BlMG3tOpdgSWb1DnwQJQ0kEXq2S9mSSk1z?=
 =?us-ascii?q?x0jy0prq2H0S3OwuTubhoGNnRQRGl/i1fhOoy0j9EcXEi1YAkljhql5UDmx6dF?=
 =?us-ascii?q?oKRzNXXcQUBNfyLuNWFtTrOwtqaeY85I8J4osz9YUP6/YVCZTb7xuQAa3DngH2?=
 =?us-ascii?q?tdxTA7cS+lupPikhx+iWKdKmtzrXXDdcFxwxff+MLTRfpL0jUaQyl4jCHdBkKg?=
 =?us-ascii?q?MNmx4dWUi5DDv/i+Vm27UZ1fayvrzYKGtCag4W1qABu/n+28m9H9EAg61zP72M?=
 =?us-ascii?q?duVSnSsBn8ZYzr3bygMe17ZkloGEP8681iF4F9iIQwhYsc2XgHhpqP+3oHnnz+?=
 =?us-ascii?q?MdFa2aL4cXoMSiQHw9/T4Aj5xkJjKmiFyJ7+VnWY2sFhfcW1YnsK2iIh6MBHEK?=
 =?us-ascii?q?KU7L1HnSRvuFa5oxzeYeNhnjgD0/sh82AVg/sGuAc2yiWdA7YSHVRXPCD2lhSI?=
 =?us-ascii?q?6cy+o7tTZGq1bbew009+l8i7DL6eugFcRGr5epA6EC9s6cV/NUjA0Xzp5YHiZd?=
 =?us-ascii?q?nQdskTthyPnhfEjuhVLo8xl/UQiSpmP2L9oWMqy+ohgRNy2pG6uZCNK39x86Kh?=
 =?us-ascii?q?Hh5YKjr1atsI9T73iqZemtuW05qrHpV8ATgLWJroTfS1EDMdr/jnNgCOECEipX?=
 =?us-ascii?q?efA7bQAQif6EJ+pXLVD5+rL22XJGUezdh6RhmSPklfjx4PXDkggp41DAOqxNHi?=
 =?us-ascii?q?cEdk4DAe/EX4pwBIyuJpMRn/T2jeqB2pajcyVJiQMh5W4hte6EfSNMyU9vhzED?=
 =?us-ascii?q?1A/p29sAyNLXSWZgRPDWEUQ0yEGkrsPr+06dnb9OiYAOW+IuDKYbWPr+xeSviJ?=
 =?us-ascii?q?yYiu0otg4zaDKMGPMmN+AP0830pJRWp5FNjBmzUTVywXkDrAb86Fqxe9+S13rc?=
 =?us-ascii?q?G//O7oWAL14ouPBKVdMc9y+xCtmqqDM++QhCBkKTdXzJ8MxHnIyKQB014WkS1h?=
 =?us-ascii?q?az6tEbEYvy7XUK3QgrNXDwIcay5rLsRI8rkz3hNTNs/bkN/10r94g+UxC1dEU1?=
 =?us-ascii?q?zhh86oadYLI2G7KFPIGkKLOK6aKj3MxsH9ebm8RqFIjOVIqx2wvi6WE1PiPjSG?=
 =?us-ascii?q?jTXmSwqjPv1MjC6FOhxTo4W9chdrCWj+Q9PqcBy7MNlrjTIoxb04nG/FNWkZMT?=
 =?us-ascii?q?JkaUNCsqWQ7T9EgvV4A2FA7mBqLe+BmyaY6enXMpcXsftxDSRymOJX+3A6y7pT?=
 =?us-ascii?q?7CFZS/15girSrthyo164lumD0CZoUB1LqmUDuIXet0J4OL6f8YJcQ3Ha5xEcxW?=
 =?us-ascii?q?KKAh8Oqp1uDdir86Jf0N/Uj4roNSxPtdnT+I9UHNPIIciKNH4gNxvBGzPOCgYB?=
 =?us-ascii?q?CzmxOjLxnUtYxc6f8DWkp5414szzlZxIW7ZdWw1kPuEGBwJuG9lEK5EhDWBsqq?=
 =?us-ascii?q?KSkMNdvSn2lxLWXsgP+8mfDv8=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AbAACWFQFch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUgYBAQsBAYNqJ5gagiGSO4R5gXMsEwGBS4ZLNQgNAQMBAQEBAQECARMBAQE?=
 =?us-ascii?q?IDQkIKS9CARABgWIkAYJlBAIkUgYJAlADJTYSBYMcggIFp18zii6HbYQughaBE?=
 =?us-ascii?q?Y1uAoEqAQGHXIcckAwBBgEBAYIiiniEEiORHyyIT5EmAYILTYIRgU6CJAMXjio?=
 =?us-ascii?q?yAQExgQUBAYM7imABAQ?=
X-IPAS-Result: =?us-ascii?q?A0AbAACWFQFch0O0hNFjHAEBAQQBAQcEAQGBUgYBAQsBAYN?=
 =?us-ascii?q?qJ5gagiGSO4R5gXMsEwGBS4ZLNQgNAQMBAQEBAQECARMBAQEIDQkIKS9CARABg?=
 =?us-ascii?q?WIkAYJlBAIkUgYJAlADJTYSBYMcggIFp18zii6HbYQughaBEY1uAoEqAQGHXIc?=
 =?us-ascii?q?ckAwBBgEBAYIiiniEEiORHyyIT5EmAYILTYIRgU6CJAMXjioyAQExgQUBAYM7i?=
 =?us-ascii?q?mABAQ?=
X-IronPort-AV: E=Sophos;i="5.56,298,1539673200"; 
   d="scan'208";a="42983611"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 30 Nov 2018 02:52:17 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726773AbeK3WBH (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 30 Nov 2018 17:01:07 -0500
Received: from mxhk.zte.com.cn ([63.217.80.70]:58384 "EHLO mxhk.zte.com.cn"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726521AbeK3WBH (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 30 Nov 2018 17:01:07 -0500
Received: from mse01.zte.com.cn (unknown [10.30.3.20])
        by Forcepoint Email with ESMTPS id 50ED2C8994E5E6FE6672;
        Fri, 30 Nov 2018 18:52:12 +0800 (CST)
Received: from notes_smtp.zte.com.cn ([10.30.1.239])
        by mse01.zte.com.cn with ESMTP id wAUAq30e012500;
        Fri, 30 Nov 2018 18:52:04 +0800 (GMT-8)
        (envelope-from wen.yang99@zte.com.cn)
Received: from LIN-A6CB96A0603.zte.intra ([10.90.106.118])
          by szsmtp06.zte.com.cn (Lotus Domino Release 8.5.3FP6)
          with ESMTP id 2018113018524326-13967000 ;
          Fri, 30 Nov 2018 18:52:43 +0800 
From: Wen Yang <wen.yang99@zte.com.cn>
To: boris.ostrovsky@oracle.com, jgross@suse.com, sstabellini@kernel.org
Cc: xen-devel@lists.xenproject.org, linux-kernel@vger.kernel.org,
        zhong.weidong@zte.com.cn, Wen Yang <wen.yang99@zte.com.cn>,
        Julia Lawall <julia.lawall@lip6.fr>
Subject: [PATCH v2] pvcalls-front: Avoid __get_free_pages(GFP_KERNEL) under spinlock
Date: Fri, 30 Nov 2018 18:52:01 +0800
Message-Id: <20181130105201.21796-1-wen.yang99@zte.com.cn>
X-Mailer: git-send-email 2.19.1
MIME-Version: 1.0
X-MIMETrack: Itemize by SMTP Server on SZSMTP06/server/zte_ltd(Release 8.5.3FP6|November
 21, 2013) at 2018-11-30 18:52:43,
        Serialize by Router on notes_smtp/zte_ltd(Release 9.0.1FP7|August  17, 2016) at
 2018-11-30 18:51:48
Content-Transfer-Encoding: quoted-printable
X-MAIL: mse01.zte.com.cn wAUAq30e012500
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The problem is that we call this with a spin lock held.
The call tree is:
pvcalls=5Ffront=5Faccept() holds bedata->socket=5Flock.
    -> create=5Factive()
        -> =5F=5Fget=5Ffree=5Fpages() uses GFP=5FKERNEL

The create=5Factive() function is only called from pvcalls=5Ffront=5Faccept=
()
with a spin=5Flock held, The allocation is not allowed to sleep and
GFP=5FKERNEL is not sufficient.

This issue was detected by using the Coccinelle software.

v2: Add a function doing the allocations which is called
    outside the lock and passing the allocated data to
    create=5Factive().

Suggested-by: Juergen Gross <jgross@suse.com>
Signed-off-by: Wen Yang <wen.yang99@zte.com.cn>
CC: Julia Lawall <julia.lawall@lip6.fr>
CC: Boris Ostrovsky <boris.ostrovsky@oracle.com>
CC: Juergen Gross <jgross@suse.com>
CC: Stefano Stabellini <sstabellini@kernel.org>
CC: xen-devel@lists.xenproject.org
CC: linux-kernel@vger.kernel.org
---
 drivers/xen/pvcalls-front.c | 71 ++++++++++++++++++++++++++++++-------
 1 file changed, 59 insertions(+), 12 deletions(-)

diff --git a/drivers/xen/pvcalls-front.c b/drivers/xen/pvcalls-front.c
index 2f11ca72a281..cc92af31807f 100644
--- a/drivers/xen/pvcalls-front.c
+++ b/drivers/xen/pvcalls-front.c
@@ -335,7 +335,43 @@ int pvcalls=5Ffront=5Fsocket(struct socket *sock)
 	return ret;
 }
=20
-static int create=5Factive(struct sock=5Fmapping *map, int *evtchn)
+struct sock=5Fmapping=5Factive=5Fring {
+	struct pvcalls=5Fdata=5Fintf *ring;
+	RING=5FIDX ring=5Forder;
+	void *bytes;
+};
+
+static int alloc=5Factive=5Fring(struct sock=5Fmapping=5Factive=5Fring *ac=
tive=5Fring)
+{
+	active=5Fring->ring =3D NULL;
+	active=5Fring->bytes =3D NULL;
+
+	active=5Fring->ring =3D (struct pvcalls=5Fdata=5Fintf *)
+		=5F=5Fget=5Ffree=5Fpage(GFP=5FKERNEL | =5F=5FGFP=5FZERO);
+	if (active=5Fring->ring =3D=3D NULL)
+		goto out=5Ferror;
+	active=5Fring->ring=5Forder =3D PVCALLS=5FRING=5FORDER;
+	active=5Fring->bytes =3D (void *)=5F=5Fget=5Ffree=5Fpages(GFP=5FKERNEL | =
=5F=5FGFP=5FZERO,
+			PVCALLS=5FRING=5FORDER);
+	if (active=5Fring->bytes =3D=3D NULL)
+		goto out=5Ferror;
+
+	return 0;
+
+out=5Ferror:
+	kfree(active=5Fring->bytes);
+	kfree(active=5Fring->ring);
+	return -ENOMEM;
+}
+
+static void free=5Factive=5Fring(struct sock=5Fmapping=5Factive=5Fring *ac=
tive=5Fring)
+{
+	free=5Fpages((unsigned long)active=5Fring->bytes, active=5Fring->ring=5Fo=
rder);
+	free=5Fpage((unsigned long)active=5Fring->ring);
+}
+
+static int create=5Factive(struct sock=5Fmapping *map, int *evtchn,
+		struct sock=5Fmapping=5Factive=5Fring *active=5Fring)
 {
 	void *bytes;
 	int ret =3D -ENOMEM, irq =3D -1, i;
@@ -343,15 +379,9 @@ static int create=5Factive(struct sock=5Fmapping *map,=
 int *evtchn)
 	*evtchn =3D -1;
 	init=5Fwaitqueue=5Fhead(&map->active.inflight=5Fconn=5Freq);
=20
-	map->active.ring =3D (struct pvcalls=5Fdata=5Fintf *)
-		=5F=5Fget=5Ffree=5Fpage(GFP=5FKERNEL | =5F=5FGFP=5FZERO);
-	if (map->active.ring =3D=3D NULL)
-		goto out=5Ferror;
-	map->active.ring->ring=5Forder =3D PVCALLS=5FRING=5FORDER;
-	bytes =3D (void *)=5F=5Fget=5Ffree=5Fpages(GFP=5FKERNEL | =5F=5FGFP=5FZER=
O,
-					PVCALLS=5FRING=5FORDER);
-	if (bytes =3D=3D NULL)
-		goto out=5Ferror;
+	map->active.ring =3D active=5Fring->ring;
+	map->active.ring->ring=5Forder =3D active=5Fring->ring=5Forder;
+	bytes =3D active=5Fring->bytes;
 	for (i =3D 0; i < (1 << PVCALLS=5FRING=5FORDER); i++)
 		map->active.ring->ref[i] =3D gnttab=5Fgrant=5Fforeign=5Faccess(
 			pvcalls=5Ffront=5Fdev->otherend=5Fid,
@@ -397,6 +427,7 @@ int pvcalls=5Ffront=5Fconnect(struct socket *sock, stru=
ct sockaddr *addr,
 	struct sock=5Fmapping *map =3D NULL;
 	struct xen=5Fpvcalls=5Frequest *req;
 	int notify, req=5Fid, ret, evtchn;
+	struct sock=5Fmapping=5Factive=5Fring active=5Fring;
=20
 	if (addr->sa=5Ffamily !=3D AF=5FINET || sock->type !=3D SOCK=5FSTREAM)
 		return -EOPNOTSUPP;
@@ -406,15 +437,21 @@ int pvcalls=5Ffront=5Fconnect(struct socket *sock, st=
ruct sockaddr *addr,
 		return PTR=5FERR(map);
=20
 	bedata =3D dev=5Fget=5Fdrvdata(&pvcalls=5Ffront=5Fdev->dev);
+	ret =3D alloc=5Factive=5Fring(&active=5Fring);
+	if (ret < 0) {
+		pvcalls=5Fexit=5Fsock(sock);
+		return ret;
+	}
=20
 	spin=5Flock(&bedata->socket=5Flock);
 	ret =3D get=5Frequest(bedata, &req=5Fid);
 	if (ret < 0) {
 		spin=5Funlock(&bedata->socket=5Flock);
+		free=5Factive=5Fring(&active=5Fring);
 		pvcalls=5Fexit=5Fsock(sock);
 		return ret;
 	}
-	ret =3D create=5Factive(map, &evtchn);
+	ret =3D create=5Factive(map, &evtchn, &active=5Fring);
 	if (ret < 0) {
 		spin=5Funlock(&bedata->socket=5Flock);
 		pvcalls=5Fexit=5Fsock(sock);
@@ -744,6 +781,7 @@ int pvcalls=5Ffront=5Faccept(struct socket *sock, struc=
t socket *newsock, int flags)
 	struct sock=5Fmapping *map2 =3D NULL;
 	struct xen=5Fpvcalls=5Frequest *req;
 	int notify, req=5Fid, ret, evtchn, nonblock;
+	struct sock=5Fmapping=5Factive=5Fring active=5Fring;
=20
 	map =3D pvcalls=5Fenter=5Fsock(sock);
 	if (IS=5FERR(map))
@@ -780,12 +818,20 @@ int pvcalls=5Ffront=5Faccept(struct socket *sock, str=
uct socket *newsock, int flags)
 		}
 	}
=20
+	ret =3D alloc=5Factive=5Fring(&active=5Fring);
+	if (ret < 0) {
+		clear=5Fbit(PVCALLS=5FFLAG=5FACCEPT=5FINFLIGHT,
+				(void *)&map->passive.flags);
+		pvcalls=5Fexit=5Fsock(sock);
+		return ret;
+	}
 	spin=5Flock(&bedata->socket=5Flock);
 	ret =3D get=5Frequest(bedata, &req=5Fid);
 	if (ret < 0) {
 		clear=5Fbit(PVCALLS=5FFLAG=5FACCEPT=5FINFLIGHT,
 			  (void *)&map->passive.flags);
 		spin=5Funlock(&bedata->socket=5Flock);
+		free=5Factive=5Fring(&active=5Fring);
 		pvcalls=5Fexit=5Fsock(sock);
 		return ret;
 	}
@@ -794,10 +840,11 @@ int pvcalls=5Ffront=5Faccept(struct socket *sock, str=
uct socket *newsock, int flags)
 		clear=5Fbit(PVCALLS=5FFLAG=5FACCEPT=5FINFLIGHT,
 			  (void *)&map->passive.flags);
 		spin=5Funlock(&bedata->socket=5Flock);
+		free=5Factive=5Fring(&active=5Fring);
 		pvcalls=5Fexit=5Fsock(sock);
 		return -ENOMEM;
 	}
-	ret =3D create=5Factive(map2, &evtchn);
+	ret =3D create=5Factive(map2, &evtchn, &active=5Fring);
 	if (ret < 0) {
 		kfree(map2);
 		clear=5Fbit(PVCALLS=5FFLAG=5FACCEPT=5FINFLIGHT,
--=20
2.19.1

