Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 16:17:50 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id EABC3580375;
	Thu,  6 Dec 2018 20:16:24 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga002-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 20:16:23 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Aw3yjUB9NC2FVp/9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1+0UIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDwULs6Wymt771zRRHoli?=
 =?us-ascii?q?kJKjA3/mLQhMxrlKJWogmsqwBjz4POfI2YLuZycr/bcNgHRWRBRMFRVylZD42y?=
 =?us-ascii?q?aIsPCeUBPeJZr4LgpFQOrQGxBQ+jBOjyzTJHm3j23as10+QlEAHKxg0hH9IUv3?=
 =?us-ascii?q?TSo9X4L6ASUfqvw6bUyTXMcela1iv66IjNax0sp+yHU7FoccfJ10UjCwfIgk+N?=
 =?us-ascii?q?pYHrIT+ZzPkBvmuH4+Z6VO+iiXYrpxx+rzSy3Msgl4bEi4MPxlzZ6Cl0wZw5Kc?=
 =?us-ascii?q?C4RUN9fNWqCoFftzuAOItzWs4iQ39nuCI9yrAep567czYFyI49yx7cdfOHaY6I?=
 =?us-ascii?q?7QznVOqLJjd4nn1ldKq+hxa070eg1vXxWteo3FtOtCZJj9fBum4X2xDO6cWLVu?=
 =?us-ascii?q?Fx80aj1DqX0gDc8OBEIUQ6larBLJ4hx6Y9lp4SsUTFAy/3l1z6jKyIeUU+/Oin?=
 =?us-ascii?q?9eDnbqzhpp6SMY97lBv+P78wmsywH+s4KBICX2uF9uSm0r3s40n5TK9Njv0sna?=
 =?us-ascii?q?nVqIraKtgDpq6lHw9V1Z4u6xK+DzelztsUh3YGLE9edRKDjojpPUzOIf/iAfe+?=
 =?us-ascii?q?hVSsjClkx/TcMrL9BZXNK2DJkK39crZl905c1A0zwMhf551OC7EBPOj8WkjruN?=
 =?us-ascii?q?zYEx82KQq0w+n8BdV514MeX3+PA6CDPKPTt1+I+vwgI+2WaIAJvzb9LuAv5+Ty?=
 =?us-ascii?q?gn8hhV8dYa6p0IMVaHC/APtqOUaZYX3qgtcHFmcHpQ4+TO3siF2fXj9ffXeyX6?=
 =?us-ascii?q?Qg5j4lDIKqF5vMRoeogLaZxie0AoVWZnxaClCLCXrnbZ6EW/cLaCKROMNhiCYL?=
 =?us-ascii?q?Vbq6Ro8l1BGushL6yrV9IurV/C0YqYzs1Nxv6+LPkhEy8CR+D96B3GGVU2F0gm?=
 =?us-ascii?q?QISic13K9lp0xx0FOD0alijPxeGtxe/PdJUgY8NZ7BwO12EdHyWgTdftiXTFaq?=
 =?us-ascii?q?WMmpATY0Ttgp2d8Bf159G8m+jhDExyelHqUal6KVC5Au8qLTxX7xJ91jxHbA06?=
 =?us-ascii?q?Uhi1omQs5LNWC9gq5/9g7TB5PGkkmDlqaqc7gc0zDJ9GuZ0WWOu0RYWhZqUarZ?=
 =?us-ascii?q?RXAfelfWrdPh60zfVbCuF6ooPhFBycGYLKtKccPmjVNdSffnOdTeZX+xmmiqCR?=
 =?us-ascii?q?aJwLOMcJTle2EH0CrBD0gElhgZ/WyaOggmGiehv2XeASRyFVLuZkPs9vV+qHO7?=
 =?us-ascii?q?T0Mu0wGGdUph16Cx+h4Ug/ycROge3rYFuCcntjV1E0yx39PQC9qcuQVheL9Qbs?=
 =?us-ascii?q?864FdCzWjZrRByPoS8L6B+gV4Tax54v0fw2BR4FIpBkdImo2g3zAVvM62Y1lBB?=
 =?us-ascii?q?dzSG3Z3rPr3XK2/y/A2gaqLM21He1sqW9bkL6Pgit1rjuwSpHFI483p7y9lVz2?=
 =?us-ascii?q?ec5pLSAQsSTJL9SFo4+wJ7prHaeCY94YzU2GZoMam1tD/Cxt0oCPEkyhamY9dQ?=
 =?us-ascii?q?LqeEGBXuHM0dAsikMPYqlESxbhIYIOBS87Y5P9mnd/SawqGrJvtvnDW8gWRB/o?=
 =?us-ascii?q?99yEOM+zNgReHS25YK3u+X3hGAVzf6l1qhtsH3mYZZZTAdBGa/yC7kBJJPaa12?=
 =?us-ascii?q?Z4oEFWCuI8ivzNVkm5HtQ2JY9EKkB14e2M6peACeblzn0Q1LyEQXp2eqmS+5zz?=
 =?us-ascii?q?xyjjEoobCT3C3Iw+T+ahUHPnRHS3VljVfpOYK0lcwVXFC0bwg1kxuo/UT6yLJB?=
 =?us-ascii?q?pKR8LGnTRl1EfzPsIGFhUauwt7yCbNBJ6J4ztSVXUeK8YU2VS7Lnohsa1T/jEH?=
 =?us-ascii?q?VaxDwhaz6qvZD5lQRgiG2BNHZzsGbZecZoyBbf/tPcQuRd3jgHRCl+kjTXAlm8?=
 =?us-ascii?q?P9+0/dSbjZvDs+a+V36/WZ1XayXk0YSAtC6j721wHRK/h+yzmsHgEQUi0i/0zd?=
 =?us-ascii?q?hqWT/IrBbheIbr0au6PPljfklpAl/89sV7Fpt/kos2mJEfx3waio+J8noAlGf5?=
 =?us-ascii?q?Kc9b1r7mbHoRWT4LxMbY4A3k2E1gNH2F3Yz4WWuGwst9eda6eHgZ1Twn78BFE6?=
 =?us-ascii?q?qU6L1EnS1oolu3tw7RYP59nisDxvsq8nIVn+YJuA81xCWHHr8SBVVYPTDrlxmQ?=
 =?us-ascii?q?89C+q6BXaHyucLeq0kp+gMuhDKqDogxHXHb5e5EiHTJ/78llMVLM1mHz5Z/geN?=
 =?us-ascii?q?XKcd0TsRiUmQ/aj+dJMJIxiuYKhS1/NG3mp3IlzOo7jQF00ZG+oYiKMGFt/KO/?=
 =?us-ascii?q?Ah5FOTz5fcIT+jfxjalAmsaaxZygHpJkGj8TRpvnUeqoEC4OtfTgLwuOEiczqn?=
 =?us-ascii?q?KFFrrEBwOf9F1qr3HSE5CoKnGXImMWzc55SRmZJUxfhh0UXTogkp44EACq2NLu?=
 =?us-ascii?q?cENj6j8N4V74rwNGyvh0OBnnTmffuACoZy80SZiYMRpW9xxC6F3TMcCE9eJzGC?=
 =?us-ascii?q?dY/pK6oQyJK2ybYRlIDG4TVkyFAVDjIqeh5d3a/+eEAeq+KuPEYa+SpuxGS/eI?=
 =?us-ascii?q?2ZWv35Nm/zmSN8WPPXpiD/wh1kpAR3B5HMvZlCsVSywKjCLAdMqbpBa6+i1qoc?=
 =?us-ascii?q?Gz6vXrWATz5YSRD7teK8lg+xezga2bLe6fmD55KSpE1pML3XLH0qUf00UIiy5w?=
 =?us-ascii?q?dzihC7AAtS/WQaLUm69XCQMbaixpOMtJ6aI8whdCOcrBhtzp0b54i+Y/C01ZWl?=
 =?us-ascii?q?z5hsGpecsKLnmhNFPGAUaHLqiJKSfXzMH3f6y8T6ZdjOFVtx22pDaaHFXvPjWF?=
 =?us-ascii?q?lzn1SR+vNftAgz2cPBxboIu9aApiCXD/TNL6bR22KN92gicwwb0xh3PKM3YTMD?=
 =?us-ascii?q?l8c0xXqL2Q4jhVgvF+G2xH83pkIvOImyef7+nENJkWteFnDThzl+JfszwGzO5R?=
 =?us-ascii?q?7SdZVLl2lTHUo9pGvV6riK+MxyBhXR4IrSxEwMqbsEMnNajH+51oXXff4AlL/W?=
 =?us-ascii?q?iWEw4NpdZuFpvooa8UgtzOkr/jbT1G9NnX1dUTCtKSK8+dNncldx3zF236FgwA?=
 =?us-ascii?q?GBKsM27bhgRvkPiU+TXBop88pZzt3ogOQ7lUfFsvH/geBwJuG9lUc8Q/ZS8tjb?=
 =?us-ascii?q?PO1J1A3nG5thSEHMg=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAABu8wlch0O0hNFjGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGBWoIRJ4wTX4sxgiGXOoFzEgEBGBMBh1ciNAkNAQM?=
 =?us-ascii?q?BAQEBAQECARMBAQEIDQkIKSMMgjYigmwCJBkBATcBBQkCRQsDWxIFglFLggIEA?=
 =?us-ascii?q?aUQgWwzgnYBAQWHKwiHcIQvgVc/jn+JEySGfZAtBwKCIASIF4cLAhaBXIg8hx4?=
 =?us-ascii?q?shCOEP49XAgQCBAUCEwGBRoINMxoEH4M8ghsMFxKDOIpgZYEFAQGKPAEB?=
X-IPAS-Result: =?us-ascii?q?A0ABAABu8wlch0O0hNFjGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGBWoIRJ4wTX4sxgiGXOoFzEgEBGBMBh1ciNAkNAQMBAQEBAQECARMBA?=
 =?us-ascii?q?QEIDQkIKSMMgjYigmwCJBkBATcBBQkCRQsDWxIFglFLggIEAaUQgWwzgnYBAQW?=
 =?us-ascii?q?HKwiHcIQvgVc/jn+JEySGfZAtBwKCIASIF4cLAhaBXIg8hx4shCOEP49XAgQCB?=
 =?us-ascii?q?AUCEwGBRoINMxoEH4M8ghsMFxKDOIpgZYEFAQGKPAEB?=
X-IronPort-AV: E=Sophos;i="5.56,324,1539673200"; 
   d="scan'208";a="55301527"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 06 Dec 2018 20:16:22 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726032AbeLGEQT (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 6 Dec 2018 23:16:19 -0500
Received: from userp2130.oracle.com ([156.151.31.86]:47564 "EHLO
        userp2130.oracle.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725939AbeLGEQS (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 6 Dec 2018 23:16:18 -0500
Received: from pps.filterd (userp2130.oracle.com [127.0.0.1])
        by userp2130.oracle.com (8.16.0.22/8.16.0.22) with SMTP id wB74DpEt067073;
        Fri, 7 Dec 2018 04:16:09 GMT
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=oracle.com; h=from : to : cc :
 subject : date : message-id; s=corp-2018-07-02;
 bh=qLP8RAZfsGU0TDpj1ZbaMz0GzS2DloBjXjB7AxvJHvI=;
 b=AeSOtSxpDcNYmDWxQPGzWw7IKgOGOtZAFV5rNf2XrQsE503FHoYdvc/yv4pLISQ923KU
 3U/fusTyF3kUGfQO+MC8SMMNolmFWQDaFelxtTlhH7Q89zbl4gFBCnsAu+fHk0Sw0lyG
 fA1q1ucgvmafeM7Af2qXUMbhYzSY99sVUiIKGhtqFcFsmsIbStqAe0gEhGapSEFJ9NCf
 HLKr8tjlF+W/PrhnOk8COMBlyFBnc5YDTkuqsbVf3iG6VMCC885wsgILe9HoJSwNMRPu
 ecGWAb9jShpJps6afMNeP8A/gdLx7DlPGWvD/VoFmjbJu+D6RGyzpiaJcwiB+bFJmadS Jg== 
Received: from aserv0021.oracle.com (aserv0021.oracle.com [141.146.126.233])
        by userp2130.oracle.com with ESMTP id 2p3hqubr3d-1
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=OK);
        Fri, 07 Dec 2018 04:16:09 +0000
Received: from userv0122.oracle.com (userv0122.oracle.com [156.151.31.75])
        by aserv0021.oracle.com (8.14.4/8.14.4) with ESMTP id wB74G8af009242
        (version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256 verify=OK);
        Fri, 7 Dec 2018 04:16:08 GMT
Received: from abhmp0009.oracle.com (abhmp0009.oracle.com [141.146.116.15])
        by userv0122.oracle.com (8.14.4/8.14.4) with ESMTP id wB74G7eA027974;
        Fri, 7 Dec 2018 04:16:07 GMT
Received: from linux.cn.oracle.com (/10.182.71.9)
        by default (Oracle Beehive Gateway v4.0)
        with ESMTP ; Thu, 06 Dec 2018 20:16:07 -0800
From: Dongli Zhang <dongli.zhang@oracle.com>
To: linux-kernel@vger.kernel.org, xen-devel@lists.xenproject.org,
        linux-block@vger.kernel.org
Cc: konrad.wilk@oracle.com, roger.pau@citrix.com, axboe@kernel.dk
Subject: [PATCH 1/1] xen/blkback: rework connect_ring() to avoid inconsistent xenstore 'ring-page-order' set by malicious blkfront
Date: Fri,  7 Dec 2018 12:18:04 +0800
Message-Id: <1544156284-7756-1-git-send-email-dongli.zhang@oracle.com>
X-Mailer: git-send-email 2.7.4
X-Proofpoint-Virus-Version: vendor=nai engine=5900 definitions=9099 signatures=668679
X-Proofpoint-Spam-Details: rule=notspam policy=default score=0 suspectscore=0 malwarescore=0
 phishscore=0 bulkscore=0 spamscore=0 mlxscore=0 mlxlogscore=999
 adultscore=0 classifier=spam adjust=0 reason=mlx scancount=1
 engine=8.0.1-1810050000 definitions=main-1812070034
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The xenstore 'ring-page-order' is used globally for each blkback queue and
therefore should be read from xenstore only once. However, it is obtained
in read_per_ring_refs() which might be called multiple times during the
initialization of each blkback queue.

If the blkfront is malicious and the 'ring-page-order' is set in different
value by blkfront every time before blkback reads it, this may end up at
the "WARN_ON(i != (XEN_BLKIF_REQS_PER_PAGE * blkif->nr_ring_pages));" in
xen_blkif_disconnect() when frontend is destroyed.

This patch reworks connect_ring() to read xenstore 'ring-page-order' only
once.

Signed-off-by: Dongli Zhang <dongli.zhang@oracle.com>
---
 drivers/block/xen-blkback/xenbus.c | 49 ++++++++++++++++++++++++--------------
 1 file changed, 31 insertions(+), 18 deletions(-)

diff --git a/drivers/block/xen-blkback/xenbus.c b/drivers/block/xen-blkback/xenbus.c
index a4bc74e..4a8ce20 100644
--- a/drivers/block/xen-blkback/xenbus.c
+++ b/drivers/block/xen-blkback/xenbus.c
@@ -919,14 +919,15 @@ static void connect(struct backend_info *be)
 /*
  * Each ring may have multi pages, depends on "ring-page-order".
  */
-static int read_per_ring_refs(struct xen_blkif_ring *ring, const char *dir)
+static int read_per_ring_refs(struct xen_blkif_ring *ring, const char *dir,
+			      bool use_ring_page_order)
 {
 	unsigned int ring_ref[XENBUS_MAX_RING_GRANTS];
 	struct pending_req *req, *n;
 	int err, i, j;
 	struct xen_blkif *blkif = ring->blkif;
 	struct xenbus_device *dev = blkif->be->dev;
-	unsigned int ring_page_order, nr_grefs, evtchn;
+	unsigned int nr_grefs, evtchn;
 
 	err = xenbus_scanf(XBT_NIL, dir, "event-channel", "%u",
 			  &evtchn);
@@ -936,28 +937,18 @@ static int read_per_ring_refs(struct xen_blkif_ring *ring, const char *dir)
 		return err;
 	}
 
-	err = xenbus_scanf(XBT_NIL, dev->otherend, "ring-page-order", "%u",
-			  &ring_page_order);
-	if (err != 1) {
+	nr_grefs = blkif->nr_ring_pages;
+
+	if (!use_ring_page_order) {
 		err = xenbus_scanf(XBT_NIL, dir, "ring-ref", "%u", &ring_ref[0]);
 		if (err != 1) {
 			err = -EINVAL;
 			xenbus_dev_fatal(dev, err, "reading %s/ring-ref", dir);
 			return err;
 		}
-		nr_grefs = 1;
 	} else {
 		unsigned int i;
 
-		if (ring_page_order > xen_blkif_max_ring_order) {
-			err = -EINVAL;
-			xenbus_dev_fatal(dev, err, "%s/request %d ring page order exceed max:%d",
-					 dir, ring_page_order,
-					 xen_blkif_max_ring_order);
-			return err;
-		}
-
-		nr_grefs = 1 << ring_page_order;
 		for (i = 0; i < nr_grefs; i++) {
 			char ring_ref_name[RINGREF_NAME_LEN];
 
@@ -972,7 +963,6 @@ static int read_per_ring_refs(struct xen_blkif_ring *ring, const char *dir)
 			}
 		}
 	}
-	blkif->nr_ring_pages = nr_grefs;
 
 	for (i = 0; i < nr_grefs * XEN_BLKIF_REQS_PER_PAGE; i++) {
 		req = kzalloc(sizeof(*req), GFP_KERNEL);
@@ -1030,6 +1020,8 @@ static int connect_ring(struct backend_info *be)
 	size_t xspathsize;
 	const size_t xenstore_path_ext_size = 11; /* sufficient for "/queue-NNN" */
 	unsigned int requested_num_queues = 0;
+	bool use_ring_page_order = false;
+	unsigned int ring_page_order;
 
 	pr_debug("%s %s\n", __func__, dev->otherend);
 
@@ -1075,8 +1067,28 @@ static int connect_ring(struct backend_info *be)
 		 be->blkif->nr_rings, be->blkif->blk_protocol, protocol,
 		 pers_grants ? "persistent grants" : "");
 
+	err = xenbus_scanf(XBT_NIL, dev->otherend, "ring-page-order", "%u",
+			   &ring_page_order);
+
+	if (err != 1) {
+		be->blkif->nr_ring_pages = 1;
+	} else {
+		if (ring_page_order > xen_blkif_max_ring_order) {
+			err = -EINVAL;
+			xenbus_dev_fatal(dev, err,
+					 "requested ring page order %d exceed max:%d",
+					 ring_page_order,
+					 xen_blkif_max_ring_order);
+			return err;
+		}
+
+		use_ring_page_order = true;
+		be->blkif->nr_ring_pages = 1 << ring_page_order;
+	}
+
 	if (be->blkif->nr_rings == 1)
-		return read_per_ring_refs(&be->blkif->rings[0], dev->otherend);
+		return read_per_ring_refs(&be->blkif->rings[0], dev->otherend,
+					  use_ring_page_order);
 	else {
 		xspathsize = strlen(dev->otherend) + xenstore_path_ext_size;
 		xspath = kmalloc(xspathsize, GFP_KERNEL);
@@ -1088,7 +1100,8 @@ static int connect_ring(struct backend_info *be)
 		for (i = 0; i < be->blkif->nr_rings; i++) {
 			memset(xspath, 0, xspathsize);
 			snprintf(xspath, xspathsize, "%s/queue-%u", dev->otherend, i);
-			err = read_per_ring_refs(&be->blkif->rings[i], xspath);
+			err = read_per_ring_refs(&be->blkif->rings[i], xspath,
+						 use_ring_page_order);
 			if (err) {
 				kfree(xspath);
 				return err;
-- 
2.7.4

