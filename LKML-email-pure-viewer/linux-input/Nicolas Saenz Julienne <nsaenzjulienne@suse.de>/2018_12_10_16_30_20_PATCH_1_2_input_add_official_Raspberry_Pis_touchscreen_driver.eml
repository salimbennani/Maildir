Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 11 Dec 2018 08:39:46 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 2A764580380;
	Mon, 10 Dec 2018 08:31:51 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by orsmga006-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 10 Dec 2018 08:31:50 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AXALDeBw6Szbnu+bXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e4fLfad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWpPUNhMWSJPAY2y?=
 =?us-ascii?q?aIkAD+QOMuhXtIn9v1kDoACiCQSvHu7j1iVFimPq0aA8zu8vERvG3AslH98WqH?=
 =?us-ascii?q?rUrcn6NKAWUe+v16nD0CjNYOlI1jf76YnDbxQvoeyIXbJxb8XRz08vGB3YhViX?=
 =?us-ascii?q?r4zlJCma2foLs2ma7epgSOavi285pAF3pDig2NwhipLUhoIO1F/I7zh2z5gsKN?=
 =?us-ascii?q?C+VUV1YsakHYNOuy2GM4Z6WN4uTm92tCog17ELuoK3cDILxZkl3xLTdviKfoiS?=
 =?us-ascii?q?7h7+WuucIS10iGx7dL6jnRq+70itx+L6W8KpylhFtDBFncPJtn0V1xzc9MyHSv?=
 =?us-ascii?q?xl80e/1jaAyRrT5vtHIU8qj6rbLYAuwroqmpoUq0TDETf6mETwjKCIakUp4vak?=
 =?us-ascii?q?5/jjb7n8u5OROZF4hhvjPqkthsCzG+U1PwoWU2ie4+u81bnj/UPjQLVNi/07iq?=
 =?us-ascii?q?3ZsJHcJcQGqa+1GgxV3Zg56xa5ETim1M0UnX4JLVJDZh2HlZPkO0/BIP/mF/ez?=
 =?us-ascii?q?mVesnylxx/DAILLhBo/BLn/ZkLfuZbp98VJTyBIvzdBD4JJZErUBIPPwWkDvrt?=
 =?us-ascii?q?DZAQI5Pheww+bmDtV9y4wfVXiOAq+fLKPdr1uI6vgzLOmLYY8foCz9JOQ95/7y?=
 =?us-ascii?q?kX85nkcQfamz0psWdHC3BPNmL1+ZYXrxmNgBF2gKsxE6TOzrjl2CTDFSa2yzX6?=
 =?us-ascii?q?I6+jE0FoamAZ3fSYCqhbyLxD27EYFOZmBaFlCMFm/ld4eDW/gSci6SIchhkjoC?=
 =?us-ascii?q?VbimUIIh0RCutAnny7toNObU+ysYtY7929hx/eHciRYy9TlsBcSHz26NV310nn?=
 =?us-ascii?q?8PRzIuxq9/ukx9ylCA0aRimfxXD95T6uhNUgc7M57c0uN7B8rzWgLHYteGVlKm?=
 =?us-ascii?q?Ts+6DjE2S9I728UObFplG9W+khDD2DKnA7wPmLyNHpA09qPc0GL3J8Zy0HvG0K?=
 =?us-ascii?q?ghj187QspAL2Gmh6h/9xTNCI7NiUmWi6GqdaEE1i7X6GiD1XaOvF1fUANoTKrK?=
 =?us-ascii?q?R24faVXModT5/EzCSaSuBqohMgdGzc6CKa5KatnygFVCRffjPsneYm2rl2exAx?=
 =?us-ascii?q?aI2q2DbI7wd2oB2yXdDVAOkxoP8naeKQg+GiChrnrDAzN0C1LgfVng8elkp3O9?=
 =?us-ascii?q?VU870QeKYlZl17q0/B4VmPOdR+kS3rICpCcutTF0EEyh0NLRDtqKvxBhc7lEYd?=
 =?us-ascii?q?Mh/FdH0nrUtxB8PpylKKBiml4ecgRts0PyzRl3DZ9AkcwrrHMswwp/MqaY0FJH?=
 =?us-ascii?q?dzOF0pH8ILzXKm/u/B+xb67awE3R0NGT+q0X8vQ3t03jvB21Fkol63hoyd1V3G?=
 =?us-ascii?q?WT55rUDAseS4n+Ulsq+BdgobHaYS49553P2H1oMKm0tCLC2t0zCOskzBagY8lQ?=
 =?us-ascii?q?MKeeGADuFM0aAtCkKPY2lFixchIEIOdS+bY0PsO7bfeJxLSnPedgnD28i2RH75?=
 =?us-ascii?q?tw0kaN9yp6V+7J0IwJw/Ce3gubSTj8iE2tvdzwmYBBfTsSBHawyTD4BI5NYa1/?=
 =?us-ascii?q?ZZwLCWayLMKt3NVxmpntV2Re9FG9HVMG2daldgaIYFz5wAJfy14XoXuhmSajyz?=
 =?us-ascii?q?x0kjcprreQ3SDUwuTicgYHNXBPRGV4kVjsJo20hcgAXEe0dwgpiAel5UHiyqlb?=
 =?us-ascii?q?paRzNWnSTV1TfyjrKWFvSa+wtruEY85S55IkqyRXUOKgYV+ETr7xuQcV0yTmH2?=
 =?us-ascii?q?FG3jA0aymquonlnxx9kG+dLmx8rGDaecFzwhfT/sfcSuRS3joFRSl4jyfYBl6n?=
 =?us-ascii?q?Mtmt/NWUkYrDs++kW2KgUJ1TbTfkzYeauCSn4m1qBAW1n+qvld3/DQg6zSj72s?=
 =?us-ascii?q?FqVCrSqxbweIvr16W8Me98ekloBVn869d1G41kk4swgo0Q1mYehpmP4XUHlmLz?=
 =?us-ascii?q?O81B2a3idHoNWSILw9nN7QjmwkJjL2iFx4LkVnqHxMthaMK3YmcX2iI78sBLB7?=
 =?us-ascii?q?2Y7L1CnStpvFW4qRjdbuR6njcY0fEu8mIVg/kVuAoxySWQGrUSHUhbPSP2jRiJ?=
 =?us-ascii?q?4c6xrL5LZGmxa7i/z1RxncquDLyZpgFcWXD5eootHCNq78V/Nk7M32P36o3+ZN?=
 =?us-ascii?q?bQatcTvAWOkxjcl+hVNI4xlv0SiCp7PmL9uGcpyu8hghxowJG6p5OHK2R28aK9?=
 =?us-ascii?q?Ax5YMCD1ZswJ9jHsi6ZegtiZ34S1Epp9HTULWYPiTei0HzIKqfTnKwGOHSUnpX?=
 =?us-ascii?q?iBHrrfGRKf5F1ir3LSCJ2rM3CXJH8EzdRtXhWdJUpfgBwKUzU+hJI2CgeqxMn5?=
 =?us-ascii?q?ekdj+j8R/kL4qgdLyu9wNRnwSGLfqxmzajsuVJiTNhlW7hxB50fIN8yR9PlzEj?=
 =?us-ascii?q?pc/p2gqgyNN2Oaax5JDWEPRkyLGVTjMqOy6tnH9uiSHvC+IOfWYbWStexeUO+F?=
 =?us-ascii?q?xJKo0ot75jaMK9+APn94A/0g3UpDW395Ft/dmzUOTSwXii3MY9SapBe65i14sM?=
 =?us-ascii?q?S//O73VwLo4IuFE6FSPsl3+xCqnaeDMPadhCZnJjZZ1ZMMxn7IxKIc3F4IjCFu?=
 =?us-ascii?q?eCeiEa4dtS7WV6/Qnq5XDxgGayJ8LsdI7qQ83hVTNs7fkN/6yrl4jvstAVdfSV?=
 =?us-ascii?q?Phgt2pZdANI2ylLlzHGV2ENK6YKjzL2c33ZaK8RKZUjOVVsR2wpDmaH1XiPjSF?=
 =?us-ascii?q?iznmSRSvPftQgyGcORxUoJu9fQp1CWj/UNLmbQW2MMN2jT0z27E7mmnGOnIcMT?=
 =?us-ascii?q?didUNAtbmQ7SJegvViFG1N9HtlLe+YmymH6+nUMIoZsfxuAi5sjeJV/Gw6y6dJ?=
 =?us-ascii?q?7CFDXPF0mDHdrthro1GnlOmA0jtmUBpUpTZNi4KGpkFiOaTf9pldVnfI5hMN7W?=
 =?us-ascii?q?OMCxsUo9tpEMHgu6dVyouHqKWmCDpE6dPXtfENC8LZMs3PZGAwPRDkAjH8BgoZ?=
 =?us-ascii?q?SDe3NSfYnUMLw9+I8XjAiJkxrZzlg9I1Q7JdRhQXC/cbB0JjEZRWJox+UzU2k6?=
 =?us-ascii?q?OfjcMO43eWtwTKSYNWs8aUBbqpHfzzJWPB3vF/bBwSzOa9dNxLOw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AWAADokw5ch0O0hNFjHgEGBwaBUQkLA?=
 =?us-ascii?q?YNrJ5gigiGXPRSBXywTAYdtIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkvgjYkAYJ?=
 =?us-ascii?q?iAwMBAiQLAS0ZBgkBAT4SA1QGEwWDHIICBAGmbTOKIIdyhC8XgX+BEAGHWIYWA?=
 =?us-ascii?q?okvgXqEFIFOj2oJgRWQLwsYiXGHTJp2gg4zGiSDO4InF44ePzKBBQEBjBgBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AWAADokw5ch0O0hNFjHgEGBwaBUQkLAYNrJ5gigiGXPRS?=
 =?us-ascii?q?BXywTAYdtIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkvgjYkAYJiAwMBAiQLAS0ZB?=
 =?us-ascii?q?gkBAT4SA1QGEwWDHIICBAGmbTOKIIdyhC8XgX+BEAGHWIYWAokvgXqEFIFOj2o?=
 =?us-ascii?q?JgRWQLwsYiXGHTJp2gg4zGiSDO4InF44ePzKBBQEBjBgBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,339,1539673200"; 
   d="scan'208";a="56269438"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 10 Dec 2018 08:31:48 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728529AbeLJQbf (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 10 Dec 2018 11:31:35 -0500
Received: from mx2.suse.de ([195.135.220.15]:45670 "EHLO mx1.suse.de"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726962AbeLJQbe (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 10 Dec 2018 11:31:34 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (unknown [195.135.220.254])
        by mx1.suse.de (Postfix) with ESMTP id 3BC59AFE0;
        Mon, 10 Dec 2018 16:31:31 +0000 (UTC)
From: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
To: Henrik Rydberg <rydberg@bitmath.org>
Cc: linux-rpi-kernel@lists.infradead.org, stefan.wahren@i2se.com,
        eric@anholt.net, agraf@suse.de,
        Nicolas Saenz Julienne <nsaenzjulienne@suse.de>,
        Dmitry Torokhov <dmitry.torokhov@gmail.com>,
        Eugen Hristev <eugen.hristev@microchip.com>,
        Rob Herring <robh@kernel.org>,
        Mark Jonas <mark.jonas@de.bosch.com>,
        Zhu Yi <yi.zhu5@cn.bosch.com>,
        Hans de Goede <hdegoede@redhat.com>,
        Masanari Iida <standby24x7@gmail.com>,
        Corentin Labbe <clabbe.montjoie@gmail.com>,
        Hans-Christian Noren Egtvedt <egtvedt@samfundet.no>,
        linux-kernel@vger.kernel.org, linux-input@vger.kernel.org
Subject: [PATCH 1/2] input: add official Raspberry Pi's touchscreen driver
Date: Mon, 10 Dec 2018 17:30:20 +0100
Message-Id: <20181210163036.24813-2-nsaenzjulienne@suse.de>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <20181210163036.24813-1-nsaenzjulienne@suse.de>
References: <20181210163036.24813-1-nsaenzjulienne@suse.de>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Add's support to Raspberry Pi's 7" Touch device. Instead of using a
conventional bus all information is copied into a memory mapped area by
RPi's firmware.

Based on the driver found in RPi's kernel repository.

Signed-off-by: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
---
 drivers/input/touchscreen/Kconfig          |  12 ++
 drivers/input/touchscreen/Makefile         |   1 +
 drivers/input/touchscreen/raspberrypi-ts.c | 223 +++++++++++++++++++++
 3 files changed, 236 insertions(+)
 create mode 100644 drivers/input/touchscreen/raspberrypi-ts.c

diff --git a/drivers/input/touchscreen/Kconfig b/drivers/input/touchscreen/Kconfig
index 2a80675cfd94..a9be434de738 100644
--- a/drivers/input/touchscreen/Kconfig
+++ b/drivers/input/touchscreen/Kconfig
@@ -696,6 +696,18 @@ config TOUCHSCREEN_EDT_FT5X06
 	  To compile this driver as a module, choose M here: the
 	  module will be called edt-ft5x06.
 
+config TOUCHSCREEN_RASPBERRYPI_TS
+	tristate "Raspberry Pi's firmware base touch screen support"
+	depends on RASPBERRYPI_FIRMWARE || COMPILE_TEST
+	help
+	  Say Y here if you have the offitial Raspberry Pi 7' scren on your
+	  system.
+
+	  If unsure, say N.
+
+	  To compile this driver as a module, choose M here: the
+	  module will be called raspberrypi-ts.
+
 config TOUCHSCREEN_MIGOR
 	tristate "Renesas MIGO-R touchscreen"
 	depends on (SH_MIGOR || COMPILE_TEST) && I2C
diff --git a/drivers/input/touchscreen/Makefile b/drivers/input/touchscreen/Makefile
index 5911a4190cd2..3eccb1925e89 100644
--- a/drivers/input/touchscreen/Makefile
+++ b/drivers/input/touchscreen/Makefile
@@ -109,3 +109,4 @@ obj-$(CONFIG_TOUCHSCREEN_ZET6223)	+= zet6223.o
 obj-$(CONFIG_TOUCHSCREEN_ZFORCE)	+= zforce_ts.o
 obj-$(CONFIG_TOUCHSCREEN_COLIBRI_VF50)	+= colibri-vf50-ts.o
 obj-$(CONFIG_TOUCHSCREEN_ROHM_BU21023)	+= rohm_bu21023.o
+obj-$(CONFIG_TOUCHSCREEN_RASPBERRYPI_TS)	+= raspberrypi-ts.o
diff --git a/drivers/input/touchscreen/raspberrypi-ts.c b/drivers/input/touchscreen/raspberrypi-ts.c
new file mode 100644
index 000000000000..edc92018687e
--- /dev/null
+++ b/drivers/input/touchscreen/raspberrypi-ts.c
@@ -0,0 +1,223 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Raspberry Pi 3 firmware based touchscreen driver
+ *
+ * Copyright (C) 2015, 2017 Raspberry Pi
+ * Copyright (C) 2018 Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
+ */
+
+#include <linux/io.h>
+#include <linux/slab.h>
+#include <linux/module.h>
+#include <linux/bitops.h>
+#include <linux/dma-mapping.h>
+#include <linux/platform_device.h>
+#include <linux/input.h>
+#include <linux/input/mt.h>
+#include <linux/input-polldev.h>
+#include <linux/input/touchscreen.h>
+#include <soc/bcm2835/raspberrypi-firmware.h>
+
+#define RPI_TS_DEFAULT_WIDTH	800
+#define RPI_TS_DEFAULT_HEIGHT	480
+
+#define RPI_TS_MAX_SUPPORTED_POINTS	10
+
+#define RPI_TS_FTS_TOUCH_DOWN		0
+#define RPI_TS_FTS_TOUCH_CONTACT	2
+
+#define RPI_TS_POLL_INTERVAL		17	/* 60fps */
+
+struct rpi_ts {
+	struct platform_device *pdev;
+	struct input_polled_dev *poll_dev;
+	struct touchscreen_properties prop;
+
+	void __iomem *fw_regs_va;
+	dma_addr_t fw_regs_phys;
+
+	int known_ids;
+};
+
+struct rpi_ts_regs {
+	u8 device_mode;
+	u8 gesture_id;
+	u8 num_points;
+	struct rpi_ts_touch {
+		u8 xh;
+		u8 xl;
+		u8 yh;
+		u8 yl;
+		u8 pressure; /* Not supported */
+		u8 area;     /* Not supported */
+	} point[RPI_TS_MAX_SUPPORTED_POINTS];
+};
+
+/*
+ * We poll the memory based register copy of the touchscreen chip using the
+ * number of points register to know whether the copy has been updated (we
+ * write 99 to the memory copy, the GPU will write between 0 - 10 points)
+ */
+static void rpi_ts_poll(struct input_polled_dev *dev)
+{
+	struct input_dev *input = dev->input;
+	struct rpi_ts *ts = dev->private;
+	struct rpi_ts_regs regs;
+	int modified_ids = 0;
+	long released_ids;
+	int event_type;
+	int touchid;
+	int x, y;
+	int i;
+
+	memcpy_fromio(&regs, ts->fw_regs_va, sizeof(regs));
+	iowrite8(99, ts->fw_regs_va + offsetof(struct rpi_ts_regs, num_points));
+
+	if (regs.num_points == 99 ||
+	    (regs.num_points == 0 && ts->known_ids == 0))
+	    return;
+
+	for (i = 0; i < regs.num_points; i++) {
+		x = (((int)regs.point[i].xh & 0xf) << 8) + regs.point[i].xl;
+		y = (((int)regs.point[i].yh & 0xf) << 8) + regs.point[i].yl;
+		touchid = (regs.point[i].yh >> 4) & 0xf;
+		event_type = (regs.point[i].xh >> 6) & 0x03;
+
+		modified_ids |= BIT(touchid);
+
+		if (event_type == RPI_TS_FTS_TOUCH_DOWN ||
+		    event_type == RPI_TS_FTS_TOUCH_CONTACT) {
+			input_mt_slot(input, touchid);
+			input_mt_report_slot_state(input, MT_TOOL_FINGER, 1);
+			touchscreen_report_pos(input, &ts->prop, x, y, true);
+		}
+	}
+
+	released_ids = ts->known_ids & ~modified_ids;
+	for_each_set_bit(i, &released_ids, RPI_TS_MAX_SUPPORTED_POINTS) {
+		input_mt_slot(input, i);
+		input_mt_report_slot_state(input, MT_TOOL_FINGER, 0);
+		modified_ids &= ~(BIT(i));
+	}
+	ts->known_ids = modified_ids;
+
+	input_mt_sync_frame(input);
+	input_sync(input);
+}
+
+static void rpi_ts_dma_cleanup(void *data)
+{
+	struct rpi_ts *ts = data;
+	struct device *dev = &ts->pdev->dev;
+
+	if(ts->fw_regs_va)
+		dma_free_coherent(dev, PAGE_SIZE, ts->fw_regs_va,
+				  ts->fw_regs_phys);
+}
+
+static int rpi_ts_probe(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+	struct device_node *np = dev->of_node;
+	struct input_polled_dev *poll_dev;
+	struct device_node *fw_node;
+	struct rpi_firmware *fw;
+	struct input_dev *input;
+	struct rpi_ts *ts;
+	u32 touchbuf;
+	int ret;
+
+	fw_node = of_get_parent(np);
+	if (!fw_node) {
+		dev_err(dev, "Missing firmware node\n");
+		return -ENOENT;
+	}
+
+	fw = rpi_firmware_get(fw_node);
+	of_node_put(fw_node);
+	if (!fw)
+		return -EPROBE_DEFER;
+
+	ts = devm_kzalloc(dev, sizeof(*ts), GFP_KERNEL);
+	if (!ts) {
+		dev_err(dev, "Failed to allocate memory\n");
+		return -ENOMEM;
+	}
+	ts->pdev = pdev;
+
+	ret = devm_add_action_or_reset(dev, rpi_ts_dma_cleanup, ts);
+	if (ret)
+		return ret;
+
+	ts->fw_regs_va = dma_zalloc_coherent(dev, PAGE_SIZE, &ts->fw_regs_phys,
+					     GFP_KERNEL);
+	if (!ts->fw_regs_va) {
+		dev_err(dev, "failed to dma_alloc_coherent\n");
+		return -ENOMEM;
+	}
+
+	touchbuf = (u32)ts->fw_regs_phys;
+	ret = rpi_firmware_property(fw, RPI_FIRMWARE_FRAMEBUFFER_SET_TOUCHBUF,
+				    &touchbuf, sizeof(touchbuf));
+
+	if (ret || touchbuf != 0) {
+		dev_warn(dev, "Failed to set touchbuf, trying to get err:%x\n",
+			 ret);
+		return ret;
+	}
+
+	poll_dev = devm_input_allocate_polled_device(dev);
+	if (!poll_dev) {
+		dev_err(dev, "Failed to allocate input device\n");
+		return -ENOMEM;
+	}
+	ts->poll_dev = poll_dev;
+	input = poll_dev->input;
+
+	input->name = "raspberrypi-ts";
+	input->id.bustype = BUS_HOST;
+	poll_dev->poll_interval = RPI_TS_POLL_INTERVAL;
+	poll_dev->poll = rpi_ts_poll;
+	poll_dev->private = ts;
+
+	__set_bit(EV_SYN, input->evbit);
+	__set_bit(EV_KEY, input->evbit);
+	__set_bit(EV_ABS, input->evbit);
+
+	input_set_abs_params(input, ABS_MT_POSITION_X, 0,
+			     RPI_TS_DEFAULT_WIDTH, 0, 0);
+	input_set_abs_params(input, ABS_MT_POSITION_Y, 0,
+			     RPI_TS_DEFAULT_HEIGHT, 0, 0);
+	touchscreen_parse_properties(input, true, &ts->prop);
+
+	input_mt_init_slots(input, RPI_TS_MAX_SUPPORTED_POINTS,
+			    INPUT_MT_DIRECT | INPUT_MT_POINTER);
+
+	ret = input_register_polled_device(poll_dev);
+	if (ret) {
+		dev_err(dev, "could not register input device, %d\n", ret);
+		return ret;
+	}
+
+	return 0;
+}
+
+static const struct of_device_id rpi_ts_match[] = {
+	{ .compatible = "raspberrypi,firmware-ts", },
+	{},
+};
+MODULE_DEVICE_TABLE(of, rpi_ts_match);
+
+static struct platform_driver rpi_ts_driver = {
+	.driver = {
+		.name   = "raspberrypi-ts",
+		.of_match_table = rpi_ts_match,
+	},
+	.probe          = rpi_ts_probe,
+};
+module_platform_driver(rpi_ts_driver);
+
+MODULE_AUTHOR("Gordon Hollingworth");
+MODULE_AUTHOR("Nicolas Saenz Julienne <nsaenzjulienne@suse.de>");
+MODULE_DESCRIPTION("Raspberry Pi 3 firmware based touchscreen driver");
+MODULE_LICENSE("GPL v2");
-- 
2.19.2

