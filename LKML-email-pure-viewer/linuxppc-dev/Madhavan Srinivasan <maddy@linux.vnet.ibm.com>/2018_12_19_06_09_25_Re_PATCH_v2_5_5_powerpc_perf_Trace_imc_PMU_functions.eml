Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 21:30:59 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 268C35805CF;
	Tue, 18 Dec 2018 22:09:39 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga003-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 18 Dec 2018 22:09:39 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A18XWjRUaxf+vstqpC0mDXkBtbvDV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhGDuKdThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGp6y?=
 =?us-ascii?q?YZUBD+QBM+hXoYbyqFkSohWxBgesH/vvxz1Ti3/q36A3yfgtHR3I0QEiGd8FrX?=
 =?us-ascii?q?TarM/yNKcXSe27y7PHwijDb/xMxzfy8o7IeQ08r/GWXLJwd8vRyVc1GAPelFqQ?=
 =?us-ascii?q?r5HuMjSQ1usXrmeU8uphWPmri24mrQFxvzeuyt0yionPmI0V1krI9SRiz4YwP9?=
 =?us-ascii?q?G3VEl7Ydu9HZZWqiqUNJN2T9s8T210vCs20KAKtJClcCQQ1ZgqxALTZ+aGfoWK?=
 =?us-ascii?q?+h7uUPydLSpmiH9kYr6zmRS//VK9xuDyVcS51ktBoDBfndnWrH8N0gTe6siZRf?=
 =?us-ascii?q?t5+UeswSiP1w/N5eFeO0w0lrTUK4QnwrEukpofq0PDHjX5mEnuja+WcFsr+vSw?=
 =?us-ascii?q?5uj5frnrooWQO5J6hw3gKKgih8+yDfgiPgUPXWWX4eG826fi/U39TrVKlPo2kq?=
 =?us-ascii?q?zBvZDeJMQboLO5AgBM3oYg9Rm/FTGm38ocnXUeK1JEdhSHgJbzO1zVPvD4Aumw?=
 =?us-ascii?q?g062nDdo2f/GJLvhDYvJLnTZl7fhZ7l951ZGyAUv1dBf+45UCrYZLfL3W0/xt8?=
 =?us-ascii?q?LXAgU2Mgyp2OvnDNR91oUDWWOAGKOZMaXSsUOW6eIrOeWDeIgVuDPlIfg/+/Hu?=
 =?us-ascii?q?lWM5mUMafaSx3ZsYcnG4Huh8LEWee3bsgsoBHn0MvgoxV+HqjFyCUThOZ3e9Ra?=
 =?us-ascii?q?485zc7CJ64AofHXIyinLuB3CKjFJ1Mem9GEkyMEWvvd4icWfcMbzydLtVikjwD?=
 =?us-ascii?q?U7ihTYgh2AqqtA/7zbpnM+XV9jcZtZLlyNh6+enTmQsu+jxzCsSXy3uNQH1snm?=
 =?us-ascii?q?MUWz8227hyrlZmyleD1qh4gOZUFcZJ6PNLSQo6MZ/cz+pnC9H9QA7Bf9GJSEq4?=
 =?us-ascii?q?TdWiGz0+UtUxw9oWaUZnB9qilgzD3zatA7INlLyEHpo0/rjY33jwPcl9zXnG2b?=
 =?us-ascii?q?Ilj1knRMtPKGKnirR+9wjVG47GjUGZm7y2eqQb2S7H7H2DwnaWvEFETA5wVr3I?=
 =?us-ascii?q?Um0FaUvIs9v1/EPCQKWoCbQ8LARBz8mOKq9Jat3siVVLX/PjONXYY2KslGa8Hx?=
 =?us-ascii?q?eIxrWQbIX0f2URxjnSCE8BkwoL53aJKRA+Bju9o2LZFDFhCEjgY13y/uVkqHO0?=
 =?us-ascii?q?VEk0zxqUYE1nzLe1/h8VhfqBS/IcxL4EuSEhqylqE1a5xd7ZF92Apw95dqVGfd?=
 =?us-ascii?q?w9+EtH1X7etwFlIpygLqVihlkCcwR3v0LizQl3Bp9HkcgwqHMqzQxyKa2D3VNF?=
 =?us-ascii?q?djOY243wO7LNJmnz+hCvd7DZ2lXE3NmK/acP7ewyq0//swGxCkoi73Jn3sFP3H?=
 =?us-ascii?q?uY+JrLAxQdUJLrXkks6hh1uqvVYi8+54PTy31hKq20sj7E29I0C+op0Begf9FD?=
 =?us-ascii?q?MKyaEA/+CdEVB8+rKOYygVimcgoEPPxO9K4zJ86nd+aG1LS3M+p6nTOmjX5I4I?=
 =?us-ascii?q?Zy0k+X8yp8S+jI34sKwv2C3wuHUSv8g0mlsszthY9EYjQSFHKlySf4HI5RerFy?=
 =?us-ascii?q?fYETBGe0Is242s9xh4TwVH5f7lKjAU0J2NWoeRaLc1PyxwlQ2lkJrny9niu4yS?=
 =?us-ascii?q?d5kzUorqqZwSzPzP7udBsBOm5XWmZiiU3gLpSzj9AfREKodRQmlAO55UbmwKhW?=
 =?us-ascii?q?vKR+L2jJTUZIZST2NHxiUq2ru7qGYs5P7o4osCpNXOS9Z1CaVqDyox8A3yz/GG?=
 =?us-ascii?q?tewSgxdyu2tZXhgxx6lGWdIW5xrHXDY8FwxhTf5NvGSf5KxDUGRyp4iTjRBlei?=
 =?us-ascii?q?Odmk5tGUl5bFsuCjWGOtTJxTcS/3zYyesCu3/3FlARq6n/qrgN3oDRA60TPn19?=
 =?us-ascii?q?ltTSjJrAzzYo7x26S4MOJneFJlBFv968p8B4F/nZE8hJAW2XgGmJqV+WALnnv0?=
 =?us-ascii?q?MdVewaj+dmYCRSYXw97J5wjowE5jIWiIx47jVnWd39FuZ9+1Ym4N3iI97sZKCL?=
 =?us-ascii?q?qb7bBenCt1pEa4ohzVYfRngjgdzv4u4mYAg+4VoAot0jmdArcKEEldPCzslA6H?=
 =?us-ascii?q?48qwrapJf2avbaa/1FBlkt+/FrGCrRpRWHL4epckAC9x4d9zMFPK0H3v9I7kfM?=
 =?us-ascii?q?PcYs4Uth2Rix3AlfRaKIotlvoWgipqIX79vXogy+IhjB1hx5e6vJWcK2V2/aK0?=
 =?us-ascii?q?GRpYNjzzZ8MO9TDhl6densCK34+xGpVtACkEXJztTfiwCjIdqeznNxqSED07sn?=
 =?us-ascii?q?qUAqDQHQib6Ed7tX7PF42rOmqTJHkYy9ViWRacKFZegAASQDU1gJo5Ghq2y8zm?=
 =?us-ascii?q?dUdz/ioR6ULgqhtQ1uJoMAHyUmXFqwetdDg0U4KTLAZM4gFB+kfVMtGe7uRpEC?=
 =?us-ascii?q?FD5ZChqA2NKmqGZwVHF20JW0qEB0z9Mbmq/9XP7++YBu+mJfvUfbqOsfBeV+uP?=
 =?us-ascii?q?xZ+30opm+CuMNtySPnZ4Cf03wFFDXXd/G8TWgDgPTy0XlyTQb8+Uvhu8+yt3rt?=
 =?us-ascii?q?yh//TvQg7g+YyPC75KO9V15x+2mbuDN/KXhCthKTZXyJIMxXzLyLgexlISiDtu?=
 =?us-ascii?q?dz6iEbsery7NUbnQl7RTDx4abSNzKcRJ47g93glLJc7UlNf12qRkgf4yDldPTU?=
 =?us-ascii?q?bhld2xZcwWP2G9M0vKC1yWNLudPz3E3cH2bbm4Sb1Rl+hUsxywuTCGE07sJDiD?=
 =?us-ascii?q?lj/pVwyxPuFIli2UIBteuISleBZ3FWfjVM7magG8MNJvkT02wLg0imnWOmIGLT?=
 =?us-ascii?q?d8c11CrruL4CNcg/V/HXFB73V/IemFnSaZ8/fXKpIMvfR3BSR0kvpQ4G4mxLtN?=
 =?us-ascii?q?8CFEWPt1lTPSr9F0pVGml+iPyjx/XxtPqjZEnoSLvUp5NKXd95lAX2vE/R0X4W?=
 =?us-ascii?q?WRDRQKu8VqCtn1t69MzdjPkfG7FDAX2tTW4IMgT/PJJMKOM3M7eU7gHjzJJA8E?=
 =?us-ascii?q?SyO7c3/ZilAbkfuXsHaSq85+4p30lbIDTrtWTlk8ELUbBgJsAZhKJJZxQyNhkr?=
 =?us-ascii?q?OBisMMzWSxoQOXR8hAuJ3DEPWIDqbBMjGc2JxNaxsB37r+Zb8JN4v6xUV5Y18y?=
 =?us-ascii?q?yIHDF0bBddRMpDBxKBEyrVkL8XJ7CGY03hS2OUuW/HYPGKvszVYNgQxkbLForW?=
 =?us-ascii?q?+07g=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BBAADr3xlch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUwUBAQsBAYFZghEUE4N9iHiLHYFgLRSJD445gXMTAQEYEwGEQIJlIjYHDQE?=
 =?us-ascii?q?DAQEBAQEBAgETAQEBCgsJCCkvQgEOAYFkJAGCYQEBAQECAQECIAQRQQYJAQEKG?=
 =?us-ascii?q?AICJgICA1QGAQoCBgIBAQGCUkuBdQUIAwEBpUMBAQFufDOKMYELizQXgX+BOII?=
 =?us-ascii?q?2NYUBgwiCVwKJRIZZNpBcCZFbBhiBXYgqJocpiUeQDgIEBgUCEwGBTQSCA3AVg?=
 =?us-ascii?q?yeCJxeOJWoBgQQBAYU3hVwEgkkBAQ?=
X-IPAS-Result: =?us-ascii?q?A0BBAADr3xlch0O0hNFkHAEBAQQBAQcEAQGBUwUBAQsBAYF?=
 =?us-ascii?q?ZghEUE4N9iHiLHYFgLRSJD445gXMTAQEYEwGEQIJlIjYHDQEDAQEBAQEBAgETA?=
 =?us-ascii?q?QEBCgsJCCkvQgEOAYFkJAGCYQEBAQECAQECIAQRQQYJAQEKGAICJgICA1QGAQo?=
 =?us-ascii?q?CBgIBAQGCUkuBdQUIAwEBpUMBAQFufDOKMYELizQXgX+BOII2NYUBgwiCVwKJR?=
 =?us-ascii?q?IZZNpBcCZFbBhiBXYgqJocpiUeQDgIEBgUCEwGBTQSCA3AVgyeCJxeOJWoBgQQ?=
 =?us-ascii?q?BAYU3hVwEgkkBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,371,1539673200"; 
   d="scan'208";a="56947952"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 18 Dec 2018 22:09:37 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728160AbeLSGJd (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 19 Dec 2018 01:09:33 -0500
Received: from mx0a-001b2d01.pphosted.com ([148.163.156.1]:56276 "EHLO
        mx0a-001b2d01.pphosted.com" rhost-flags-OK-OK-OK-OK)
        by vger.kernel.org with ESMTP id S1727437AbeLSGJd (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 19 Dec 2018 01:09:33 -0500
Received: from pps.filterd (m0098393.ppops.net [127.0.0.1])
        by mx0a-001b2d01.pphosted.com (8.16.0.22/8.16.0.22) with SMTP id wBJ68pEM127016
        for <linux-kernel@vger.kernel.org>; Wed, 19 Dec 2018 01:09:32 -0500
Received: from e06smtp04.uk.ibm.com (e06smtp04.uk.ibm.com [195.75.94.100])
        by mx0a-001b2d01.pphosted.com with ESMTP id 2pfg10h4y4-1
        (version=TLSv1.2 cipher=AES256-GCM-SHA384 bits=256 verify=NOT)
        for <linux-kernel@vger.kernel.org>; Wed, 19 Dec 2018 01:09:31 -0500
Received: from localhost
        by e06smtp04.uk.ibm.com with IBM ESMTP SMTP Gateway: Authorized Use Only! Violators will be prosecuted
        for <linux-kernel@vger.kernel.org> from <maddy@linux.vnet.ibm.com>;
        Wed, 19 Dec 2018 06:09:29 -0000
Received: from b06cxnps4074.portsmouth.uk.ibm.com (9.149.109.196)
        by e06smtp04.uk.ibm.com (192.168.101.134) with IBM ESMTP SMTP Gateway: Authorized Use Only! Violators will be prosecuted;
        (version=TLSv1/SSLv3 cipher=AES256-GCM-SHA384 bits=256/256)
        Wed, 19 Dec 2018 06:09:28 -0000
Received: from d06av23.portsmouth.uk.ibm.com (d06av23.portsmouth.uk.ibm.com [9.149.105.59])
        by b06cxnps4074.portsmouth.uk.ibm.com (8.14.9/8.14.9/NCO v10.0) with ESMTP id wBJ69RD515335500
        (version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256 verify=FAIL);
        Wed, 19 Dec 2018 06:09:27 GMT
Received: from d06av23.portsmouth.uk.ibm.com (unknown [127.0.0.1])
        by IMSVA (Postfix) with ESMTP id 2DAD5A4059;
        Wed, 19 Dec 2018 06:09:27 +0000 (GMT)
Received: from d06av23.portsmouth.uk.ibm.com (unknown [127.0.0.1])
        by IMSVA (Postfix) with ESMTP id 6286BA4053;
        Wed, 19 Dec 2018 06:09:26 +0000 (GMT)
Received: from [9.126.27.138] (unknown [9.126.27.138])
        by d06av23.portsmouth.uk.ibm.com (Postfix) with ESMTP;
        Wed, 19 Dec 2018 06:09:26 +0000 (GMT)
Subject: Re: [PATCH v2 5/5] powerpc/perf: Trace imc PMU functions
To: Anju T Sudhakar <anju@linux.vnet.ibm.com>, mpe@ellerman.id.au,
        linux-kernel@vger.kernel.org
Cc: linuxppc-dev@lists.ozlabs.org
References: <20181214091122.20992-1-anju@linux.vnet.ibm.com>
 <20181214091122.20992-6-anju@linux.vnet.ibm.com>
From: Madhavan Srinivasan <maddy@linux.vnet.ibm.com>
Date: Wed, 19 Dec 2018 11:39:25 +0530
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.2.1
MIME-Version: 1.0
In-Reply-To: <20181214091122.20992-6-anju@linux.vnet.ibm.com>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 7bit
Content-Language: en-US
X-TM-AS-GCONF: 00
x-cbid: 18121906-0016-0000-0000-000002388350
X-IBM-AV-DETECTION: SAVI=unused REMOTE=unused XFE=unused
x-cbparentid: 18121906-0017-0000-0000-00003290D743
Message-Id: <39c7fde0-f9fb-76d4-f6f8-4de954d9d404@linux.vnet.ibm.com>
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10434:,, definitions=2018-12-19_03:,,
 signatures=0
X-Proofpoint-Spam-Details: rule=outbound_notspam policy=outbound score=0 priorityscore=1501
 malwarescore=0 suspectscore=0 phishscore=0 bulkscore=0 spamscore=0
 clxscore=1015 lowpriorityscore=0 mlxscore=0 impostorscore=0
 mlxlogscore=999 adultscore=0 classifier=spam adjust=0 reason=mlx
 scancount=1 engine=8.0.1-1810050000 definitions=main-1812190053
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org


On 14/12/18 2:41 PM, Anju T Sudhakar wrote:
> Add PMU functions to support trace-imc.

Reviewed-by: Madhavan Srinivasan <maddy@linux.vnet.ibm.com>

>
> Signed-off-by: Anju T Sudhakar <anju@linux.vnet.ibm.com>
> ---
>   arch/powerpc/perf/imc-pmu.c | 175 ++++++++++++++++++++++++++++++++++++
>   1 file changed, 175 insertions(+)
>
> diff --git a/arch/powerpc/perf/imc-pmu.c b/arch/powerpc/perf/imc-pmu.c
> index 1f09265c8fb0..32ff0e449fca 100644
> --- a/arch/powerpc/perf/imc-pmu.c
> +++ b/arch/powerpc/perf/imc-pmu.c
> @@ -1120,6 +1120,173 @@ static int trace_imc_cpu_init(void)
>   			  ppc_trace_imc_cpu_offline);
>   }
>
> +static u64 get_trace_imc_event_base_addr(void)
> +{
> +	return (u64)per_cpu(trace_imc_mem, smp_processor_id());
> +}
> +
> +/*
> + * Function to parse trace-imc data obtained
> + * and to prepare the perf sample.
> + */
> +static int trace_imc_prepare_sample(struct trace_imc_data *mem,
> +				    struct perf_sample_data *data,
> +				    u64 *prev_tb,
> +				    struct perf_event_header *header,
> +				    struct perf_event *event)
> +{
> +	/* Sanity checks for a valid record */
> +	if (be64_to_cpu(READ_ONCE(mem->tb1)) > *prev_tb)
> +		*prev_tb = be64_to_cpu(READ_ONCE(mem->tb1));
> +	else
> +		return -EINVAL;
> +
> +	if ((be64_to_cpu(READ_ONCE(mem->tb1)) & IMC_TRACE_RECORD_TB1_MASK) !=
> +			 be64_to_cpu(READ_ONCE(mem->tb2)))
> +		return -EINVAL;
> +
> +	/* Prepare perf sample */
> +	data->ip =  be64_to_cpu(READ_ONCE(mem->ip));
> +	data->period = event->hw.last_period;
> +
> +	header->type = PERF_RECORD_SAMPLE;
> +	header->size = sizeof(*header) + event->header_size;
> +	header->misc = 0;
> +
> +	if (is_kernel_addr(data->ip))
> +		header->misc |= PERF_RECORD_MISC_KERNEL;
> +	else
> +		header->misc |= PERF_RECORD_MISC_USER;
> +
> +	perf_event_header__init_id(header, data, event);
> +
> +	return 0;
> +}
> +
> +static void dump_trace_imc_data(struct perf_event *event)
> +{
> +	struct trace_imc_data *mem;
> +	int i, ret;
> +	u64 prev_tb = 0;
> +
> +	mem = (struct trace_imc_data *)get_trace_imc_event_base_addr();
> +	for (i = 0; i < (trace_imc_mem_size / sizeof(struct trace_imc_data));
> +		i++, mem++) {
> +		struct perf_sample_data data;
> +		struct perf_event_header header;
> +
> +		ret = trace_imc_prepare_sample(mem, &data, &prev_tb, &header, event);
> +		if (ret) /* Exit, if not a valid record */
> +			break;
> +		else {
> +			/* If this is a valid record, create the sample */
> +			struct perf_output_handle handle;
> +
> +			if (perf_output_begin(&handle, event, header.size))
> +				return;
> +
> +			perf_output_sample(&handle, &header, &data, event);
> +			perf_output_end(&handle);
> +		}
> +	}
> +}
> +
> +static int trace_imc_event_add(struct perf_event *event, int flags)
> +{
> +	/* Enable the sched_task to start the engine */
> +       perf_sched_cb_inc(event->ctx->pmu);
> +       return 0;
> +}
> +
> +static void trace_imc_event_read(struct perf_event *event)
> +{
> +	dump_trace_imc_data(event);
> +}
> +
> +static void trace_imc_event_stop(struct perf_event *event, int flags)
> +{
> +	trace_imc_event_read(event);
> +}
> +
> +static void trace_imc_event_start(struct perf_event *event, int flags)
> +{
> +	return;
> +}
> +
> +static void trace_imc_event_del(struct perf_event *event, int flags)
> +{
> +	perf_sched_cb_dec(event->ctx->pmu);
> +}
> +
> +void trace_imc_pmu_sched_task(struct perf_event_context *ctx,
> +				bool sched_in)
> +{
> +	int core_id = smp_processor_id() / threads_per_core;
> +	struct imc_pmu_ref *ref;
> +	u64 local_mem, ldbar_value;
> +
> +	/* Set trace-imc bit in ldbar and load ldbar with per-thread memory address */
> +	local_mem = get_trace_imc_event_base_addr();
> +	ldbar_value = ((u64)local_mem & THREAD_IMC_LDBAR_MASK) | TRACE_IMC_ENABLE;
> +
> +	ref = &core_imc_refc[core_id];
> +	if (!ref)
> +		return;
> +
> +	if (sched_in) {
> +		mtspr(SPRN_LDBAR, ldbar_value);
> +		mutex_lock(&ref->lock);
> +		if (ref->refc == 0) {
> +			if (opal_imc_counters_start(OPAL_IMC_COUNTERS_TRACE,
> +					get_hard_smp_processor_id(smp_processor_id()))) {
> +				mutex_unlock(&ref->lock);
> +				pr_err("trace-imc: Unable to start the counters for core %d\n", core_id);
> +				mtspr(SPRN_LDBAR, 0);
> +				return;
> +			}
> +		}
> +		++ref->refc;
> +		mutex_unlock(&ref->lock);
> +	} else {
> +		mtspr(SPRN_LDBAR, 0);
> +		mutex_lock(&ref->lock);
> +		ref->refc--;
> +		if (ref->refc == 0) {
> +			if (opal_imc_counters_stop(OPAL_IMC_COUNTERS_TRACE,
> +					get_hard_smp_processor_id(smp_processor_id()))) {
> +				mutex_unlock(&ref->lock);
> +				pr_err("trace-imc: Unable to stop the counters for core %d\n", core_id);
> +				return;
> +			}
> +		} else if (ref->refc < 0) {
> +			ref->refc = 0;
> +		}
> +		mutex_unlock(&ref->lock);
> +	}
> +	return;
> +}
> +
> +static int trace_imc_event_init(struct perf_event *event)
> +{
> +	struct task_struct *target;
> +
> +	if (event->attr.type != event->pmu->type)
> +		return -ENOENT;
> +
> +	if (!capable(CAP_SYS_ADMIN))
> +		return -EACCES;
> +
> +	/* Return if this is a couting event */
> +	if (event->attr.sample_period == 0)
> +		return -ENOENT;
> +
> +	event->hw.idx = -1;
> +	target = event->hw.target;
> +
> +	event->pmu->task_ctx_nr = perf_hw_context;
> +	return 0;
> +}
> +
>   /* update_pmu_ops : Populate the appropriate operations for "pmu" */
>   static int update_pmu_ops(struct imc_pmu *pmu)
>   {
> @@ -1149,6 +1316,14 @@ static int update_pmu_ops(struct imc_pmu *pmu)
>   		pmu->pmu.cancel_txn = thread_imc_pmu_cancel_txn;
>   		pmu->pmu.commit_txn = thread_imc_pmu_commit_txn;
>   		break;
> +	case IMC_DOMAIN_TRACE:
> +		pmu->pmu.event_init = trace_imc_event_init;
> +		pmu->pmu.add = trace_imc_event_add;
> +		pmu->pmu.del = trace_imc_event_del;
> +		pmu->pmu.start = trace_imc_event_start;
> +		pmu->pmu.stop = trace_imc_event_stop;
> +		pmu->pmu.read = trace_imc_event_read;
> +		pmu->pmu.sched_task = trace_imc_pmu_sched_task;
>   	default:
>   		break;
>   	}

