Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 08:42:09 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from FMSMGA003.fm.intel.com (fmsmga003.fm.intel.com [10.253.24.29])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 7584E580213;
	Thu, 29 Nov 2018 06:08:27 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by FMSMGA003-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 06:08:27 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AaXGsfBwxrtO7DWvXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e8TLfad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWlPUcRfVyJBH42y?=
 =?us-ascii?q?cYUBD/EZPetatITxu0cCoAGiCQWwGO/j1jlFjWL2060g1OQhFBnL0RIgH9IUsX?=
 =?us-ascii?q?TUt8n1NKAKUeC10qbD0DPNYO1M2Tf66InDbxcsru2MXbJqcMrR0lUvFwTdjlWQ?=
 =?us-ascii?q?t4PpJTeV2foXs2ic7+ttTv6gh3c8qw1rrDiv3N4hh4/UjYwW0lDJ7Tt1zJoxKN?=
 =?us-ascii?q?GiVUJ2b8CoHIFNuyyZK4d6WMIvTmNwtCs+xLAKo4O3cSoQxJg5yRPSauaLfoaU?=
 =?us-ascii?q?7h/lSe2fOy13hGh/d7K6nxuy8Vavyun7VsSszlZKoTRKksPWunAOyRPT8M6HRe?=
 =?us-ascii?q?V5/ku73jaPzQ/T5vlFIUAyi6XbN4YszqAsmpcXq0jPAyH7lFvsgKOLdUgo5vKk?=
 =?us-ascii?q?5uXlb7n+o5+TLY50igXwMqQ0ncy/BPw1MgwPX2id5OS926Tv/U7nT7VQiP05jK?=
 =?us-ascii?q?3ZvIndJcUVoK62HRVV35096xawETimys4UnXoZI1JffhKIkYzpN0vJIPDiAvez?=
 =?us-ascii?q?m06snytzx/DaIr3hBY3ALnzCkLfiY7lx8UFdyBcowNBb5pJUDKwBIf3pVk/wst?=
 =?us-ascii?q?zYEgE2Mwiuz+n7D9V905sUWXiTDa+BLKPSrViI6/ovI+aWZY8VpCzyK/8/6/7u?=
 =?us-ascii?q?kH82g1kdfaay0JsTaXC4GOlmIkqDbXrthNcBDXkFvg4kQOP2j12CVCZZZ2yuUK?=
 =?us-ascii?q?Ik+jE7FIWmAJ/BRoCqnrONxiS7HppQZmBADVCBCnPod4SCW/cRZyOeOM5hkjoY?=
 =?us-ascii?q?Vbe/T48tzw2htAj/y7B/NOrb5jUYtY7/1Nhy/+Dcjwoy9TxzD8SeyW2NVXt7nm?=
 =?us-ascii?q?ETSj8y3aB/p1F9y1iZ3ah5hfxYCcJc5/dTXggmMp7cyvRwC8ruVQLZYteJVFGm?=
 =?us-ascii?q?T82lAT4rSNI92dsOY0dnFNWkgRDOxC6qA74Tl7yWC5046KPc337tJ8ljz3bKzr?=
 =?us-ascii?q?Uuj14jQsFXL22pmrZ/9xTPB47Oi0iWiryldboC0yLX9GeM12yOvFpGXw52VqnF?=
 =?us-ascii?q?WXMfZk7Srdni4kPCTrmuCakoMwdbyM6CLLdKZcPtjVlcWPjjP9HeaXqrm2isHR?=
 =?us-ascii?q?aI2q+MbI3ydmoAxirdFlYLnxoT/XmcMwg+HTmuo2TFATxqFFLvZV7s8OZkpHO6?=
 =?us-ascii?q?SE800x+Fb0l727Wp/R4VgOSWS+kP0bIcpCchtzJ0EU6h39LXDtqAoBZhfKVcYN?=
 =?us-ascii?q?8n/FdLz2XZtxZ5PpyhKaBiiUUTcwB2v0PoyhV2BZ9MkcksrHM20gVyLbiU309G?=
 =?us-ascii?q?dzOdxZrwIKHYKnHu/BCzbK7bwkvR0NKI9aYA9vs5q0/vsxq0FkU/6Xpn1dpV03?=
 =?us-ascii?q?yC5pjRCAoSUJTxUls49hRgprHaZDU96J3Q1XF2Laa0tTrC0cozBOQ50hagY8tf?=
 =?us-ascii?q?MKScGQ7yDs0WHdShJPYrmlipdB0EOu9S+bUwP8OncfuGxaGqMPxhnDKgkWRI/o?=
 =?us-ascii?q?R93liQ+Cp7T+7Cx4wFzO2A3gubSzf8i0+sstr2mY9Yfz4SBHewyS/+CI5XeKJy?=
 =?us-ascii?q?Z4cLBX6yLMKtwtVxmoDiW2Rf9F6lHF4G3M6peRyPb13yxwFQ1EIXoWC5liu81T?=
 =?us-ascii?q?B7jzYprq+H1izU3+vibAYHOnJMRGR6jVbsIJK4jtAAUEizcggpkgCo5UL7x6hd?=
 =?us-ascii?q?uaR+IHPfQUZOfyjqMW5iVrG8uaaFY85K8JkoqzlYUPygYVCGTb7wuxka3Dn5H2?=
 =?us-ascii?q?tdxzA7cCumuo7jkBx5i2KdLXBzo2TfecxrwRff5drcReNe3zYcRSl4jyXXCUa4?=
 =?us-ascii?q?P9Wz4dqUkJLDuPikV229Tp1TbTXrzYSYuSq7/2JqBgezn/Kymt3hCgU61S7719?=
 =?us-ascii?q?93VSTHthr8Y4/r17ikPuJjZEVnGFj8689iEIFkjoQwnI0Q2WQdhpiN/noIi2bz?=
 =?us-ascii?q?Pc9b2aLjdnUNQzELzsXR4Ajk3k1jM32Iy5j4VnWb3stued26bnkK1SI66sBAEL?=
 =?us-ascii?q?2U46BcnStpvlq4qhrcYf18njce0/Qi8nAbjP8SuAox0CqdGKsdEldCPSzjjBmI?=
 =?us-ascii?q?69G+rKNKZGega7Sw1Ux+ncy/A7GGuA1TRHH5epI6Fy9q8sp/KE7M0GH06oz8ZN?=
 =?us-ascii?q?nQatcTugeVkhjaiehVNYkxluELhSd8PWL9vHsly/M0jBB03JG6upSHJHtp/K6j?=
 =?us-ascii?q?HhFYMTj1bdsJ+j7xlaZegtqW34e3E5p6ADoLW5/oTe+yHDIWqPTqLAKOEDw6qn?=
 =?us-ascii?q?eGFrvTBw6f6EF6r33RF5CnLW2YJH4czd96XhmSOFRfgBwIXDU9hpM5FBqlxMn/?=
 =?us-ascii?q?f0di/DwR+kT0qhhRyuJrKhn/VH3QpByzZzcwSZifKgdW7w5Y60fUN8ye8vx8Hy?=
 =?us-ascii?q?VC8pK9qwyNL3SRZx5UAmERRkyEG1fjM6Gu5NnH7uiYH/e+IOHIYbmUsuxeUPGI?=
 =?us-ascii?q?xZ2034ti/jaMMNiPP3Z4A/063EpDQW52G8DDlzoTTCwXkjrHb9SHqxek5i13ss?=
 =?us-ascii?q?e//ezrWA3x5IuPCLhSMdR19xC1m6eDMOGQizhjKTZFzZMB3nvIyLkZ3F4PhCBi?=
 =?us-ascii?q?bTitEbIctSHTSKLcgLNYDxkeaylrLstH87o83hVROc7ckt76zKN4geUvC1hbVV?=
 =?us-ascii?q?3tgMWpZc0RLmG5NVPHAluLNbucKT3KxcH3fb2zSblKgOpIsB2wvC6RE1X/MTSb?=
 =?us-ascii?q?iznpSxevPPlQjCGaORxSop2yfgxxBmjjUt3mbAa2MNt2jT0w3L01iWnGNW8aMT?=
 =?us-ascii?q?hgbUxNqqec4j9fgvV6A2ZB9GZqLfGYmyaF6OnVMpYXvuFtAiRxluJa5mw1yrpV?=
 =?us-ascii?q?7C5eQvx1lzDfrtpvo1Ggj+mOxSBrUBtIqjZXmo2LuV9uNrne9plFCj74+0cn4G?=
 =?us-ascii?q?OSAhELoZNFB8f1tqZLwdjKla7vYGNI/tTU1cgRHc7ZLISMKnM6MRvvF3jTFgRT?=
 =?us-ascii?q?CXaTPHzbz2lUm/Kf7GectdBuspHxnIcVYqRSUVY8UPQABRIhVPkDK5d+UzdsvL?=
 =?us-ascii?q?qfgdQN7Hz2+BzJSe1XupTKTPebB7PuJHCQkO8XSQEPxObTLZ4SLZH8w0xvIn13?=
 =?us-ascii?q?hoPbUx7bXcpMuTFmdg855kFA6n9vZmZ2wATrcFX+szcoCfeok0tu2UNFauM3+W?=
 =?us-ascii?q?Kpug9vKw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AYAABp8v9bh0O0hNFkHgEGBwaBUQkLA?=
 =?us-ascii?q?YNrJ4xwiymBaDmXMIFxLhMBh3QiNAkNAQMBAQEBAQECARMBAQEIDQkIKS+CNiQ?=
 =?us-ascii?q?BgmIDAwECJFIGCQEBGDgDKSsGARIFgxyCAgQBpwYzhUGEbIwWgVc/gREzjTsCi?=
 =?us-ascii?q?SeWfAcCgQyBEQSICocfkRwsiEyQfCCCDU0ngziCJxeOHT8BATGBBQEBjToBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AYAABp8v9bh0O0hNFkHgEGBwaBUQkLAYNrJ4xwiymBaDm?=
 =?us-ascii?q?XMIFxLhMBh3QiNAkNAQMBAQEBAQECARMBAQEIDQkIKS+CNiQBgmIDAwECJFIGC?=
 =?us-ascii?q?QEBGDgDKSsGARIFgxyCAgQBpwYzhUGEbIwWgVc/gREzjTsCiSeWfAcCgQyBEQS?=
 =?us-ascii?q?ICocfkRwsiEyQfCCCDU0ngziCJxeOHT8BATGBBQEBjToBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,294,1539673200"; 
   d="scan'208";a="54843815"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 06:08:25 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728695AbeK3BMa (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 29 Nov 2018 20:12:30 -0500
Received: from pegase1.c-s.fr ([93.17.236.30]:13724 "EHLO pegase1.c-s.fr"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1728492AbeK3BM3 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 29 Nov 2018 20:12:29 -0500
Received: from localhost (mailhub1-int [192.168.12.234])
        by localhost (Postfix) with ESMTP id 435K8L6vKtz9vFvn;
        Thu, 29 Nov 2018 15:06:58 +0100 (CET)
X-Virus-Scanned: Debian amavisd-new at c-s.fr
Received: from pegase1.c-s.fr ([192.168.12.234])
        by localhost (pegase1.c-s.fr [192.168.12.234]) (amavisd-new, port 10024)
        with ESMTP id mtfUfyq8z1bz; Thu, 29 Nov 2018 15:06:58 +0100 (CET)
Received: from messagerie.si.c-s.fr (messagerie.si.c-s.fr [192.168.25.192])
        by pegase1.c-s.fr (Postfix) with ESMTP id 435K8L6Nklz9vFvc;
        Thu, 29 Nov 2018 15:06:58 +0100 (CET)
Received: from localhost (localhost [127.0.0.1])
        by messagerie.si.c-s.fr (Postfix) with ESMTP id 28B1F8B89E;
        Thu, 29 Nov 2018 15:07:00 +0100 (CET)
X-Virus-Scanned: amavisd-new at c-s.fr
Received: from messagerie.si.c-s.fr ([127.0.0.1])
        by localhost (messagerie.si.c-s.fr [127.0.0.1]) (amavisd-new, port 10023)
        with ESMTP id LEhOPfuUjyG4; Thu, 29 Nov 2018 15:07:00 +0100 (CET)
Received: from po14163vm.idsi0.si.c-s.fr (unknown [192.168.232.3])
        by messagerie.si.c-s.fr (Postfix) with ESMTP id E820C8B899;
        Thu, 29 Nov 2018 15:06:59 +0100 (CET)
Received: by po14163vm.idsi0.si.c-s.fr (Postfix, from userid 0)
        id AC07569AE8; Thu, 29 Nov 2018 14:06:59 +0000 (UTC)
Message-Id: <02136697ed7be9ca538a02e571a8f21737d3927e.1543499863.git.christophe.leroy@c-s.fr>
In-Reply-To: <cover.1543499860.git.christophe.leroy@c-s.fr>
References: <cover.1543499860.git.christophe.leroy@c-s.fr>
From: Christophe Leroy <christophe.leroy@c-s.fr>
Subject: [PATCH v9 07/20] powerpc/mm: add helpers to get/set
 mm.context->pte_frag
To: Benjamin Herrenschmidt <benh@kernel.crashing.org>,
        Paul Mackerras <paulus@samba.org>,
        Michael Ellerman <mpe@ellerman.id.au>
Cc: linux-kernel@vger.kernel.org, linuxppc-dev@lists.ozlabs.org
Date: Thu, 29 Nov 2018 14:06:59 +0000 (UTC)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

In order to handle pte_fragment functions with single fragment
without adding pte_frag in all mm_context_t, this patch creates
two helpers which do nothing on platforms using a single fragment.

Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
---
 arch/powerpc/include/asm/pgtable.h | 25 +++++++++++++++++++++++++
 arch/powerpc/mm/pgtable-frag.c     |  8 ++++----
 2 files changed, 29 insertions(+), 4 deletions(-)

diff --git a/arch/powerpc/include/asm/pgtable.h b/arch/powerpc/include/asm/pgtable.h
index 9679b7519a35..314a2890a972 100644
--- a/arch/powerpc/include/asm/pgtable.h
+++ b/arch/powerpc/include/asm/pgtable.h
@@ -110,6 +110,31 @@ void mark_initmem_nx(void);
 static inline void mark_initmem_nx(void) { }
 #endif
 
+/*
+ * When used, PTE_FRAG_NR is defined in subarch pgtable.h
+ * so we are sure it is included when arriving here.
+ */
+#ifdef PTE_FRAG_NR
+static inline void *pte_frag_get(mm_context_t *ctx)
+{
+	return ctx->pte_frag;
+}
+
+static inline void pte_frag_set(mm_context_t *ctx, void *p)
+{
+	ctx->pte_frag = p;
+}
+#else
+static inline void *pte_frag_get(mm_context_t *ctx)
+{
+	return NULL;
+}
+
+static inline void pte_frag_set(mm_context_t *ctx, void *p)
+{
+}
+#endif
+
 #endif /* __ASSEMBLY__ */
 
 #endif /* _ASM_POWERPC_PGTABLE_H */
diff --git a/arch/powerpc/mm/pgtable-frag.c b/arch/powerpc/mm/pgtable-frag.c
index 7544d0d7177d..af23a587f019 100644
--- a/arch/powerpc/mm/pgtable-frag.c
+++ b/arch/powerpc/mm/pgtable-frag.c
@@ -38,7 +38,7 @@ static pte_t *get_pte_from_cache(struct mm_struct *mm)
 		return NULL;
 
 	spin_lock(&mm->page_table_lock);
-	ret = mm->context.pte_frag;
+	ret = pte_frag_get(&mm->context);
 	if (ret) {
 		pte_frag = ret + PTE_FRAG_SIZE;
 		/*
@@ -46,7 +46,7 @@ static pte_t *get_pte_from_cache(struct mm_struct *mm)
 		 */
 		if (((unsigned long)pte_frag & ~PAGE_MASK) == 0)
 			pte_frag = NULL;
-		mm->context.pte_frag = pte_frag;
+		pte_frag_set(&mm->context, pte_frag);
 	}
 	spin_unlock(&mm->page_table_lock);
 	return (pte_t *)ret;
@@ -86,9 +86,9 @@ static pte_t *__alloc_for_ptecache(struct mm_struct *mm, int kernel)
 	 * the allocated page with single fragement
 	 * count.
 	 */
-	if (likely(!mm->context.pte_frag)) {
+	if (likely(!pte_frag_get(&mm->context))) {
 		atomic_set(&page->pt_frag_refcount, PTE_FRAG_NR);
-		mm->context.pte_frag = ret + PTE_FRAG_SIZE;
+		pte_frag_set(&mm->context, ret + PTE_FRAG_SIZE);
 	}
 	spin_unlock(&mm->page_table_lock);
 
-- 
2.13.3

