Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 08:42:09 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from FMSMGA003.fm.intel.com (fmsmga003.fm.intel.com [10.253.24.29])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 2B8B05802E4;
	Thu, 29 Nov 2018 06:08:28 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by FMSMGA003-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 06:08:28 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AoIblnxVuiB+TqgWryUF5q2GEjobV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhGCuqdThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGoCy?=
 =?us-ascii?q?YIkBD+QBIOhWsYfzp0AWrRa8HgSgGP/jxyVUinPqwaE2z+IsGhzG0gw6GNIOtW?=
 =?us-ascii?q?zZocv1NKcIUOC117XIzTLbb/NWxzj29Y7GfQ47ofGLXbN7bM3cxlUvFwPfj1WQ?=
 =?us-ascii?q?spDlPzSN1uQNrWeX9e5gWvy1i24gqwB8uSSgyt43ioXTiIIV0EnJ+CNky4g2Pd?=
 =?us-ascii?q?21UFB3bcKgHZdKqi2XOZV6Ttk/T2xrpCo20LwLtJyjcCUOxpkr3QPTZv6df4SW?=
 =?us-ascii?q?7B/uVfydLDlkiH9jZbmxnQy98VK6xe35TsS00EhFri5CktTUqHAN2ALc6tKdRv?=
 =?us-ascii?q?t+4EihwzCP2B7X6u1eJkA0j6XbJ4Ygwr42iJUTrVzOEjHqlEjylqOaa0sp9vay?=
 =?us-ascii?q?5+j6YbjquoWQOo52hw3mN6QhgM2/AeA2MggUWGib/Pyx1Lni/U3/XbVLgeQ6kq?=
 =?us-ascii?q?rHv5DAI8QUuKq5DxZS0oct7RawES2m3c8GnXkIMl1FYgiLj4v3NFHUJvD3E/O/?=
 =?us-ascii?q?j06rkDdxyPDKJqfhDYnVLnjfjLfheq5w60pdyAow099T/Z1VCqwaLfL3W0/xss?=
 =?us-ascii?q?HYDxAjPwy1xebnFMty1ocEVW2TBa+ZNbvYsUWU6eI3P+mMeIgVtS79K/c/5v7u?=
 =?us-ascii?q?kWU2mVgHcampwJsYcna4Hvt9LkWdYHrshMoBEGgQsgo/SuzqlEONUTpJa3muWK?=
 =?us-ascii?q?I84ykxCJi6AofbWoCtnLuB0T+5Hp1ReG9KEFOMEXDud4WCXPcBcyaSIs5nkjwZ?=
 =?us-ascii?q?WrmtUY4h1ReytADkz7prNPbb+iodtZj7zth6+/XTlQ0u9TxzF8mSyXqNT2Fznm?=
 =?us-ascii?q?MLXTM2xrpwoU5mx1eH0Kh4heFYFNNJ6/NIVAc6KYDTz+hgB9/uXQLBe8+DSEy6?=
 =?us-ascii?q?TdW+HTExUtUxzscNY0lnHdWulBTD3yuwDL8TmLyGH5g08qPa33jsKMdx0XfG1K?=
 =?us-ascii?q?89j1Y4RstDL3Gphql69wLLHY7Gj12Zl7q2daQbxCPC6X2MzXSQs01CUA5/S6PF?=
 =?us-ascii?q?XWsBaUvQqtj54kDCT7qqCbk8NgtByMiCKrZFa9HzjFVGQuvjN8raY26rh2iwAh?=
 =?us-ascii?q?OIzKuWbIX2Y2UdwDndCE8cng8O53mGKxYxCj2ho23ECjxuDkzgY0X3/Ol6qXO7?=
 =?us-ascii?q?SFI0zg6QY01g0bq15gAahfiGR/wP2bIEvT8rqy9oE1alw9LWF92AqhJ9fKVdZN?=
 =?us-ascii?q?M950tH1WLZtgBnIpysNadihkQacwR2uUPu2A56CoFBkcgssXMrwxB+KaOe0FNd?=
 =?us-ascii?q?aTyY2Yr8NaHQKmn35BqvcbLZ2knC0NaK/acC8O43q1H9swCmCEUj829r3MJI03?=
 =?us-ascii?q?SB/JrKCgkSUZXvUkss8xh6prfaYjQy5o/O1H1sN7W0vSHG294zGOQlzROgdc9F?=
 =?us-ascii?q?MKyYDA/yD9EaB8+2Je0qhlildA4LMPpT9a40JcymcfSG1bWvPOZhmjKmkGtG7J?=
 =?us-ascii?q?p80kKK6ypzVOrI04wZzPGf2wuNTy38g0u5ssDrhYBEYikfHnC+ySf4HoFRfLB9?=
 =?us-ascii?q?fYERBWeoPcK33NR+i4fxVHFC8F6sGk0J2NWueRqUdFH92QxQ1UIKoX2ogye4zj?=
 =?us-ascii?q?p0ky03oaqbxiDB3+PidB8fMG5RWGZilUvsIZSzj90CXEmobhIllRu/6Ubh2qhb?=
 =?us-ascii?q?or9yL23SQUdOYij3IHtuUqq2trqefcFP7IkkvjlQUOS5eVqaUKLyowMG0yP/GG?=
 =?us-ascii?q?tT3DI7eCuwupX6nBx6j3iRLG1po3raesFwxBHf68LaRfNK2joGRS94iSTYB1Sm?=
 =?us-ascii?q?Ptmp+8mUmInHsuykS22hUZhTezHxzYycrCu7+XFqARqnkvGzgNLnFhI20S3619?=
 =?us-ascii?q?lsTijIqBf8Yo/216W1K+5nf09oBEPi5Mp+AI1xjowwhJQI03gAmpqV5WYHkXv0?=
 =?us-ascii?q?MdhD2qLxdnsNSSQLw97I+gfl3kJjI2mNx4L4UHWd38Rga8O7YmMQxiIy8cRKBL?=
 =?us-ascii?q?2I47xDmCt/ukC4oh7JYfhhgjcdzuMj6Hsbg+EKogUh1CucDa4JHUlEIyPsjQ+H?=
 =?us-ascii?q?4M6krKVYf2uvdbmw1ExjndGuFr2CowdcWGrndZcmByN/8sJ/MFfU2n3p9o7kYM?=
 =?us-ascii?q?XQbc4UthCMjxfAiO1VJIgwl/UQgypnJHn9vWYky+MgiRxu3Je6vJWIKml3/aK5?=
 =?us-ascii?q?BAJYOSPxZ88J5j7tiqNelN6M34+zBpVhBikLXJzwQP2zCj0SsvDnNxuUHD04t3?=
 =?us-ascii?q?eWAr7fHQ6Z6Ed7oHPDCZGrN3eLJHYHydVuXgWSJEtagAoMRjU1goY5Fhy2xMzm?=
 =?us-ascii?q?aEp55Coe5lvmpRtX0O5oKwPzUmTCpAerdzc0ToKQLAFN4wFG5kfVN9Ge7+1pEy?=
 =?us-ascii?q?FZ+J2hsBKCKmiBawtUCmEJX1SOB0r/Mbm2+dnA7++YC/K+LvvJfLWOsPFeWO2O?=
 =?us-ascii?q?xZ61yYtm+DCMNsqUM3lmDv073FdDXH9jF8TYnTUPVzIYlybXY8GHoxe8/zV9rt?=
 =?us-ascii?q?qj//TzRALv+YyPBqNSMdpx+hC2gqSDN++KiCZ6MzZY0ZwMymHSyLgCx14fkCVu?=
 =?us-ascii?q?dzirEbQdui/BVqPQmqlLDxEFbyN/LtdH76U53gNVI87Ulsv11qJkjv4yE1pKT0?=
 =?us-ascii?q?HhldqzZcMUI2CxLlfHBEeQObSCJD3Lxdz3YKymRb1RiuVUqwO/uTKBH0D/OTSD?=
 =?us-ascii?q?kiHjVwqzPuFUkCGbIBtetZmhchZsDGjvVs7pZgenP993kzI2x6Y5hnfLNW4aLD?=
 =?us-ascii?q?h9fFlBrryW7SNEnPp/H3ZN4WZiLemBgyyZ9fXXKo4Ksft3BSR5j+Jb7248y7tQ?=
 =?us-ascii?q?7SFEQuR6mSrSrtF0pVGmnfKCyj5mUBpItzZKi5iHvURkOaXF6JZAXWzI8w4K7W?=
 =?us-ascii?q?WVWFw2oI5PB9vtsqVRzJDvmbjpJTFZ+NLR/McAT5zeJcSHGHksKxzkHHjfFgIe?=
 =?us-ascii?q?TT+tOifYnUML1Lmq/2CR5r0zoZvhgoAHUfcPTFUoEu4BIl9sGdYLZpBtUWVg2Z?=
 =?us-ascii?q?uah84B6H72gR3VSd9ft5aPAveKDN3iLDKUl7xNYV0JzfXxMNJAGJf83hlJakN7?=
 =?us-ascii?q?h5jNA0rdFfRAuCpwJls/oF9M62R5Vm0+nUbocAS8yHRWDri6hEhl2UNFfe0x+W?=
 =?us-ascii?q?K0sB8MLV3QqX51yRFplA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AaAABp8v9bh0O0hNFkHgEGBwaBUQkLA?=
 =?us-ascii?q?YJpgQInjHCLKYFoOY4oiQiBbDMDEAGBS4YpIjQJDQEDAQEBAQEBAgETAQEBCA0?=
 =?us-ascii?q?JCCkjDII2JAGCYgMDAQIkUgYJAQEYOAMpKwYBEgWDHAGCAQQBpwYzhUGEbIwWg?=
 =?us-ascii?q?Vc/gREzjTsCiScElngHAoEMgREEhF2DLYcfgieOdSyITJB8IIINTSeDOAmCHQE?=
 =?us-ascii?q?XgUGEU4gJPwEBMYEFAQGNOgEB?=
X-IPAS-Result: =?us-ascii?q?A0AaAABp8v9bh0O0hNFkHgEGBwaBUQkLAYJpgQInjHCLKYF?=
 =?us-ascii?q?oOY4oiQiBbDMDEAGBS4YpIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2JAGCY?=
 =?us-ascii?q?gMDAQIkUgYJAQEYOAMpKwYBEgWDHAGCAQQBpwYzhUGEbIwWgVc/gREzjTsCiSc?=
 =?us-ascii?q?ElngHAoEMgREEhF2DLYcfgieOdSyITJB8IIINTSeDOAmCHQEXgUGEU4gJPwEBM?=
 =?us-ascii?q?YEFAQGNOgEB?=
X-IronPort-AV: E=Sophos;i="5.56,294,1539673200"; 
   d="scan'208";a="54843819"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 06:08:26 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728751AbeK3BMd (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 29 Nov 2018 20:12:33 -0500
Received: from pegase1.c-s.fr ([93.17.236.30]:23660 "EHLO pegase1.c-s.fr"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1728492AbeK3BMc (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 29 Nov 2018 20:12:32 -0500
Received: from localhost (mailhub1-int [192.168.12.234])
        by localhost (Postfix) with ESMTP id 435K8P1xshz9vFvp;
        Thu, 29 Nov 2018 15:07:01 +0100 (CET)
X-Virus-Scanned: Debian amavisd-new at c-s.fr
Received: from pegase1.c-s.fr ([192.168.12.234])
        by localhost (pegase1.c-s.fr [192.168.12.234]) (amavisd-new, port 10024)
        with ESMTP id M-YA1l72yNHS; Thu, 29 Nov 2018 15:07:01 +0100 (CET)
Received: from messagerie.si.c-s.fr (messagerie.si.c-s.fr [192.168.25.192])
        by pegase1.c-s.fr (Postfix) with ESMTP id 435K8P1QMWz9vFvc;
        Thu, 29 Nov 2018 15:07:01 +0100 (CET)
Received: from localhost (localhost [127.0.0.1])
        by messagerie.si.c-s.fr (Postfix) with ESMTP id 58CE78B8A1;
        Thu, 29 Nov 2018 15:07:02 +0100 (CET)
X-Virus-Scanned: amavisd-new at c-s.fr
Received: from messagerie.si.c-s.fr ([127.0.0.1])
        by localhost (messagerie.si.c-s.fr [127.0.0.1]) (amavisd-new, port 10023)
        with ESMTP id urP2bw3UPDDV; Thu, 29 Nov 2018 15:07:02 +0100 (CET)
Received: from po14163vm.idsi0.si.c-s.fr (unknown [192.168.232.3])
        by messagerie.si.c-s.fr (Postfix) with ESMTP id EC9C68B89F;
        Thu, 29 Nov 2018 15:07:01 +0100 (CET)
Received: by po14163vm.idsi0.si.c-s.fr (Postfix, from userid 0)
        id B0CEA69AE8; Thu, 29 Nov 2018 14:07:01 +0000 (UTC)
Message-Id: <7f5b6822992f0f2fc5204ede3bcba80f06b3d3eb.1543499863.git.christophe.leroy@c-s.fr>
In-Reply-To: <cover.1543499860.git.christophe.leroy@c-s.fr>
References: <cover.1543499860.git.christophe.leroy@c-s.fr>
From: Christophe Leroy <christophe.leroy@c-s.fr>
Subject: [PATCH v9 08/20] powerpc/mm: Extend pte_fragment functionality to
 PPC32
To: Benjamin Herrenschmidt <benh@kernel.crashing.org>,
        Paul Mackerras <paulus@samba.org>,
        Michael Ellerman <mpe@ellerman.id.au>
Cc: linux-kernel@vger.kernel.org, linuxppc-dev@lists.ozlabs.org
Date: Thu, 29 Nov 2018 14:07:01 +0000 (UTC)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

In order to allow the 8xx to handle pte_fragments, this patch
extends the use of pte_fragments to PPC32 platforms.

Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
---
 arch/powerpc/include/asm/book3s/32/mmu-hash.h |  5 ++++-
 arch/powerpc/include/asm/book3s/32/pgalloc.h  | 17 +++++++++--------
 arch/powerpc/include/asm/book3s/32/pgtable.h  |  5 +++--
 arch/powerpc/include/asm/mmu_context.h        |  2 +-
 arch/powerpc/include/asm/nohash/32/mmu.h      |  4 +++-
 arch/powerpc/include/asm/nohash/32/pgalloc.h  | 22 +++++++++++-----------
 arch/powerpc/include/asm/nohash/32/pgtable.h  |  7 ++++---
 arch/powerpc/include/asm/pgtable.h            |  4 ++++
 arch/powerpc/mm/Makefile                      |  1 +
 arch/powerpc/mm/mmu_context.c                 | 10 ++++++++++
 arch/powerpc/mm/mmu_context_nohash.c          |  2 +-
 arch/powerpc/mm/pgtable_32.c                  | 25 ++++---------------------
 12 files changed, 55 insertions(+), 49 deletions(-)

diff --git a/arch/powerpc/include/asm/book3s/32/mmu-hash.h b/arch/powerpc/include/asm/book3s/32/mmu-hash.h
index 5bd26c218b94..2bb500d25de6 100644
--- a/arch/powerpc/include/asm/book3s/32/mmu-hash.h
+++ b/arch/powerpc/include/asm/book3s/32/mmu-hash.h
@@ -1,6 +1,7 @@
 /* SPDX-License-Identifier: GPL-2.0 */
 #ifndef _ASM_POWERPC_BOOK3S_32_MMU_HASH_H_
 #define _ASM_POWERPC_BOOK3S_32_MMU_HASH_H_
+
 /*
  * 32-bit hash table MMU support
  */
@@ -9,6 +10,8 @@
  * BATs
  */
 
+#include <asm/page.h>
+
 /* Block size masks */
 #define BL_128K	0x000
 #define BL_256K 0x001
@@ -43,7 +46,7 @@ struct ppc_bat {
 	u32 batl;
 };
 
-typedef struct page *pgtable_t;
+typedef pte_t *pgtable_t;
 #endif /* !__ASSEMBLY__ */
 
 /*
diff --git a/arch/powerpc/include/asm/book3s/32/pgalloc.h b/arch/powerpc/include/asm/book3s/32/pgalloc.h
index eb8882c6dbb0..0f58e5b9dbe7 100644
--- a/arch/powerpc/include/asm/book3s/32/pgalloc.h
+++ b/arch/powerpc/include/asm/book3s/32/pgalloc.h
@@ -59,30 +59,31 @@ static inline void pmd_populate_kernel(struct mm_struct *mm, pmd_t *pmdp,
 static inline void pmd_populate(struct mm_struct *mm, pmd_t *pmdp,
 				pgtable_t pte_page)
 {
-	*pmdp = __pmd((page_to_pfn(pte_page) << PAGE_SHIFT) | _PMD_PRESENT);
+	*pmdp = __pmd(__pa(pte_page) | _PMD_PRESENT);
 }
 
-#define pmd_pgtable(pmd) pmd_page(pmd)
+#define pmd_pgtable(pmd) ((pgtable_t)pmd_page_vaddr(pmd))
 
 extern pte_t *pte_alloc_one_kernel(struct mm_struct *mm, unsigned long addr);
 extern pgtable_t pte_alloc_one(struct mm_struct *mm, unsigned long addr);
+void pte_frag_destroy(void *pte_frag);
+pte_t *pte_fragment_alloc(struct mm_struct *mm, unsigned long vmaddr, int kernel);
+void pte_fragment_free(unsigned long *table, int kernel);
 
 static inline void pte_free_kernel(struct mm_struct *mm, pte_t *pte)
 {
-	free_page((unsigned long)pte);
+	pte_fragment_free((unsigned long *)pte, 1);
 }
 
 static inline void pte_free(struct mm_struct *mm, pgtable_t ptepage)
 {
-	pgtable_page_dtor(ptepage);
-	__free_page(ptepage);
+	pte_fragment_free((unsigned long *)ptepage, 0);
 }
 
 static inline void pgtable_free(void *table, unsigned index_size)
 {
 	if (!index_size) {
-		pgtable_page_dtor(virt_to_page(table));
-		free_page((unsigned long)table);
+		pte_fragment_free((unsigned long *)table, 0);
 	} else {
 		BUG_ON(index_size > MAX_PGTABLE_INDEX_SIZE);
 		kmem_cache_free(PGT_CACHE(index_size), table);
@@ -120,6 +121,6 @@ static inline void pgtable_free_tlb(struct mmu_gather *tlb,
 static inline void __pte_free_tlb(struct mmu_gather *tlb, pgtable_t table,
 				  unsigned long address)
 {
-	pgtable_free_tlb(tlb, page_address(table), 0);
+	pgtable_free_tlb(tlb, table, 0);
 }
 #endif /* _ASM_POWERPC_BOOK3S_32_PGALLOC_H */
diff --git a/arch/powerpc/include/asm/book3s/32/pgtable.h b/arch/powerpc/include/asm/book3s/32/pgtable.h
index 32c33eccc0e2..47156b93f9af 100644
--- a/arch/powerpc/include/asm/book3s/32/pgtable.h
+++ b/arch/powerpc/include/asm/book3s/32/pgtable.h
@@ -329,7 +329,7 @@ static inline void __ptep_set_access_flags(struct vm_area_struct *vma,
 #define pte_same(A,B)	(((pte_val(A) ^ pte_val(B)) & ~_PAGE_HASHPTE) == 0)
 
 #define pmd_page_vaddr(pmd)	\
-	((unsigned long) __va(pmd_val(pmd) & PAGE_MASK))
+	((unsigned long)__va(pmd_val(pmd) & ~(PTE_TABLE_SIZE - 1)))
 #define pmd_page(pmd)		\
 	pfn_to_page(pmd_val(pmd) >> PAGE_SHIFT)
 
@@ -346,7 +346,8 @@ static inline void __ptep_set_access_flags(struct vm_area_struct *vma,
 #define pte_offset_kernel(dir, addr)	\
 	((pte_t *) pmd_page_vaddr(*(dir)) + pte_index(addr))
 #define pte_offset_map(dir, addr)		\
-	((pte_t *) kmap_atomic(pmd_page(*(dir))) + pte_index(addr))
+	((pte_t *)(kmap_atomic(pmd_page(*(dir))) + \
+		   (pmd_page_vaddr(*(dir)) & ~PAGE_MASK)) + pte_index(addr))
 #define pte_unmap(pte)		kunmap_atomic(pte)
 
 /*
diff --git a/arch/powerpc/include/asm/mmu_context.h b/arch/powerpc/include/asm/mmu_context.h
index 0381394a425b..c05efd2e8736 100644
--- a/arch/powerpc/include/asm/mmu_context.h
+++ b/arch/powerpc/include/asm/mmu_context.h
@@ -223,7 +223,7 @@ static inline int arch_dup_mmap(struct mm_struct *oldmm,
 	return 0;
 }
 
-#ifndef CONFIG_PPC_BOOK3S_64
+#ifdef CONFIG_PPC_BOOK3E_64
 static inline void arch_exit_mmap(struct mm_struct *mm)
 {
 }
diff --git a/arch/powerpc/include/asm/nohash/32/mmu.h b/arch/powerpc/include/asm/nohash/32/mmu.h
index f61f933a4cd8..7d94a36d57d2 100644
--- a/arch/powerpc/include/asm/nohash/32/mmu.h
+++ b/arch/powerpc/include/asm/nohash/32/mmu.h
@@ -2,6 +2,8 @@
 #ifndef _ASM_POWERPC_NOHASH_32_MMU_H_
 #define _ASM_POWERPC_NOHASH_32_MMU_H_
 
+#include <asm/page.h>
+
 #if defined(CONFIG_40x)
 /* 40x-style software loaded TLB */
 #include <asm/nohash/32/mmu-40x.h>
@@ -17,7 +19,7 @@
 #endif
 
 #ifndef __ASSEMBLY__
-typedef struct page *pgtable_t;
+typedef pte_t *pgtable_t;
 #endif
 
 #endif /* _ASM_POWERPC_NOHASH_32_MMU_H_ */
diff --git a/arch/powerpc/include/asm/nohash/32/pgalloc.h b/arch/powerpc/include/asm/nohash/32/pgalloc.h
index 8825953c225b..7e234582dce5 100644
--- a/arch/powerpc/include/asm/nohash/32/pgalloc.h
+++ b/arch/powerpc/include/asm/nohash/32/pgalloc.h
@@ -61,11 +61,10 @@ static inline void pmd_populate_kernel(struct mm_struct *mm, pmd_t *pmdp,
 static inline void pmd_populate(struct mm_struct *mm, pmd_t *pmdp,
 				pgtable_t pte_page)
 {
-	*pmdp = __pmd((page_to_pfn(pte_page) << PAGE_SHIFT) | _PMD_USER |
-		      _PMD_PRESENT);
+	*pmdp = __pmd(__pa(pte_page) | _PMD_USER | _PMD_PRESENT);
 }
 
-#define pmd_pgtable(pmd) pmd_page(pmd)
+#define pmd_pgtable(pmd) ((pgtable_t)pmd_page_vaddr(pmd))
 #else
 
 static inline void pmd_populate_kernel(struct mm_struct *mm, pmd_t *pmdp,
@@ -77,31 +76,32 @@ static inline void pmd_populate_kernel(struct mm_struct *mm, pmd_t *pmdp,
 static inline void pmd_populate(struct mm_struct *mm, pmd_t *pmdp,
 				pgtable_t pte_page)
 {
-	*pmdp = __pmd((unsigned long)lowmem_page_address(pte_page) | _PMD_PRESENT);
+	*pmdp = __pmd((unsigned long)pte_page | _PMD_PRESENT);
 }
 
-#define pmd_pgtable(pmd) pmd_page(pmd)
+#define pmd_pgtable(pmd) ((pgtable_t)pmd_page_vaddr(pmd))
 #endif
 
 extern pte_t *pte_alloc_one_kernel(struct mm_struct *mm, unsigned long addr);
 extern pgtable_t pte_alloc_one(struct mm_struct *mm, unsigned long addr);
+void pte_frag_destroy(void *pte_frag);
+pte_t *pte_fragment_alloc(struct mm_struct *mm, unsigned long vmaddr, int kernel);
+void pte_fragment_free(unsigned long *table, int kernel);
 
 static inline void pte_free_kernel(struct mm_struct *mm, pte_t *pte)
 {
-	free_page((unsigned long)pte);
+	pte_fragment_free((unsigned long *)pte, 1);
 }
 
 static inline void pte_free(struct mm_struct *mm, pgtable_t ptepage)
 {
-	pgtable_page_dtor(ptepage);
-	__free_page(ptepage);
+	pte_fragment_free((unsigned long *)ptepage, 0);
 }
 
 static inline void pgtable_free(void *table, unsigned index_size)
 {
 	if (!index_size) {
-		pgtable_page_dtor(virt_to_page(table));
-		free_page((unsigned long)table);
+		pte_fragment_free((unsigned long *)table, 0);
 	} else {
 		BUG_ON(index_size > MAX_PGTABLE_INDEX_SIZE);
 		kmem_cache_free(PGT_CACHE(index_size), table);
@@ -140,6 +140,6 @@ static inline void __pte_free_tlb(struct mmu_gather *tlb, pgtable_t table,
 				  unsigned long address)
 {
 	tlb_flush_pgtable(tlb, address);
-	pgtable_free_tlb(tlb, page_address(table), 0);
+	pgtable_free_tlb(tlb, table, 0);
 }
 #endif /* _ASM_POWERPC_PGALLOC_32_H */
diff --git a/arch/powerpc/include/asm/nohash/32/pgtable.h b/arch/powerpc/include/asm/nohash/32/pgtable.h
index 3ffb0ff5a038..e9c8604cc8c5 100644
--- a/arch/powerpc/include/asm/nohash/32/pgtable.h
+++ b/arch/powerpc/include/asm/nohash/32/pgtable.h
@@ -333,12 +333,12 @@ static inline int pte_young(pte_t pte)
  */
 #ifndef CONFIG_BOOKE
 #define pmd_page_vaddr(pmd)	\
-	((unsigned long) __va(pmd_val(pmd) & PAGE_MASK))
+	((unsigned long)__va(pmd_val(pmd) & ~(PTE_TABLE_SIZE - 1)))
 #define pmd_page(pmd)		\
 	pfn_to_page(pmd_val(pmd) >> PAGE_SHIFT)
 #else
 #define pmd_page_vaddr(pmd)	\
-	((unsigned long) (pmd_val(pmd) & PAGE_MASK))
+	((unsigned long)(pmd_val(pmd) & ~(PTE_TABLE_SIZE - 1)))
 #define pmd_page(pmd)		\
 	pfn_to_page((__pa(pmd_val(pmd)) >> PAGE_SHIFT))
 #endif
@@ -357,7 +357,8 @@ static inline int pte_young(pte_t pte)
 	(pmd_bad(*(dir)) ? NULL : (pte_t *)pmd_page_vaddr(*(dir)) + \
 				  pte_index(addr))
 #define pte_offset_map(dir, addr)		\
-	((pte_t *) kmap_atomic(pmd_page(*(dir))) + pte_index(addr))
+	((pte_t *)(kmap_atomic(pmd_page(*(dir))) + \
+		   (pmd_page_vaddr(*(dir)) & ~PAGE_MASK)) + pte_index(addr))
 #define pte_unmap(pte)		kunmap_atomic(pte)
 
 /*
diff --git a/arch/powerpc/include/asm/pgtable.h b/arch/powerpc/include/asm/pgtable.h
index 314a2890a972..56ef5437eb2f 100644
--- a/arch/powerpc/include/asm/pgtable.h
+++ b/arch/powerpc/include/asm/pgtable.h
@@ -125,6 +125,10 @@ static inline void pte_frag_set(mm_context_t *ctx, void *p)
 	ctx->pte_frag = p;
 }
 #else
+#define PTE_FRAG_NR		1
+#define PTE_FRAG_SIZE_SHIFT	PAGE_SHIFT
+#define PTE_FRAG_SIZE		(1UL << PTE_FRAG_SIZE_SHIFT)
+
 static inline void *pte_frag_get(mm_context_t *ctx)
 {
 	return NULL;
diff --git a/arch/powerpc/mm/Makefile b/arch/powerpc/mm/Makefile
index 3cbb1acf0745..c8778a640d68 100644
--- a/arch/powerpc/mm/Makefile
+++ b/arch/powerpc/mm/Makefile
@@ -18,6 +18,7 @@ obj-$(CONFIG_PPC_BOOK3E_64)   += pgtable-book3e.o
 obj-$(CONFIG_PPC_BOOK3S_64)	+= pgtable-hash64.o hash_utils_64.o slb.o \
 				   $(hash64-y) mmu_context_book3s64.o \
 				   pgtable-book3s64.o pgtable-frag.o
+obj-$(CONFIG_PPC32)		+= pgtable-frag.o
 obj-$(CONFIG_PPC_RADIX_MMU)	+= pgtable-radix.o tlb-radix.o
 obj-$(CONFIG_PPC_STD_MMU_32)	+= ppc_mmu_32.o hash_low_32.o mmu_context_hash32.o
 obj-$(CONFIG_PPC_STD_MMU)	+= tlb_hash$(BITS).o
diff --git a/arch/powerpc/mm/mmu_context.c b/arch/powerpc/mm/mmu_context.c
index f84e14f23e50..bb52320b7369 100644
--- a/arch/powerpc/mm/mmu_context.c
+++ b/arch/powerpc/mm/mmu_context.c
@@ -15,6 +15,7 @@
 #include <linux/sched/mm.h>
 
 #include <asm/mmu_context.h>
+#include <asm/pgalloc.h>
 
 #if defined(CONFIG_PPC32)
 static inline void switch_mm_pgdir(struct task_struct *tsk,
@@ -97,3 +98,12 @@ void switch_mm_irqs_off(struct mm_struct *prev, struct mm_struct *next,
 	switch_mmu_context(prev, next, tsk);
 }
 
+#ifdef CONFIG_PPC32
+void arch_exit_mmap(struct mm_struct *mm)
+{
+	void *frag = pte_frag_get(&mm->context);
+
+	if (frag)
+		pte_frag_destroy(frag);
+}
+#endif
diff --git a/arch/powerpc/mm/mmu_context_nohash.c b/arch/powerpc/mm/mmu_context_nohash.c
index 2faca46ad720..431ecf37f17c 100644
--- a/arch/powerpc/mm/mmu_context_nohash.c
+++ b/arch/powerpc/mm/mmu_context_nohash.c
@@ -385,6 +385,7 @@ int init_new_context(struct task_struct *t, struct mm_struct *mm)
 #endif
 	mm->context.id = MMU_NO_CONTEXT;
 	mm->context.active = 0;
+	pte_frag_set(&mm->context, NULL);
 	return 0;
 }
 
@@ -487,4 +488,3 @@ void __init mmu_context_init(void)
 	next_context = FIRST_CONTEXT;
 	nr_free_contexts = LAST_CONTEXT - FIRST_CONTEXT + 1;
 }
-
diff --git a/arch/powerpc/mm/pgtable_32.c b/arch/powerpc/mm/pgtable_32.c
index bda3c6f1bd32..deb49a6e9cad 100644
--- a/arch/powerpc/mm/pgtable_32.c
+++ b/arch/powerpc/mm/pgtable_32.c
@@ -45,32 +45,15 @@ extern char etext[], _stext[], _sinittext[], _einittext[];
 
 __ref pte_t *pte_alloc_one_kernel(struct mm_struct *mm, unsigned long address)
 {
-	pte_t *pte;
+	if (!slab_is_available())
+		return memblock_alloc(PTE_FRAG_SIZE, PTE_FRAG_SIZE);
 
-	if (slab_is_available()) {
-		pte = (pte_t *)__get_free_page(GFP_KERNEL|__GFP_ZERO);
-	} else {
-		pte = __va(memblock_phys_alloc(PAGE_SIZE, PAGE_SIZE));
-		if (pte)
-			clear_page(pte);
-	}
-	return pte;
+	return (pte_t *)pte_fragment_alloc(mm, address, 1);
 }
 
 pgtable_t pte_alloc_one(struct mm_struct *mm, unsigned long address)
 {
-	struct page *ptepage;
-
-	gfp_t flags = GFP_KERNEL | __GFP_ZERO | __GFP_ACCOUNT;
-
-	ptepage = alloc_pages(flags, 0);
-	if (!ptepage)
-		return NULL;
-	if (!pgtable_page_ctor(ptepage)) {
-		__free_page(ptepage);
-		return NULL;
-	}
-	return ptepage;
+	return (pgtable_t)pte_fragment_alloc(mm, address, 0);
 }
 
 void __iomem *
-- 
2.13.3

