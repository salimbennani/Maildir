Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 08:41:01 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 504165802E4;
	Thu, 29 Nov 2018 04:13:42 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga001-1.jf.intel.com with ESMTP; 29 Nov 2018 04:13:42 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AE9J2ShRrfvpL21NcrUQB8jQYB9psv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64YhCFt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZH42y?=
 =?us-ascii?q?cYUPAeoCM+hWoYbyqFkBogexCwm3HOPiyCRFhmP10KAgz+gtDQ/L0Q4mEtkTsH?=
 =?us-ascii?q?rUttL1NKIKXO2rzKnI1zTDb+hK2Tf68IjIcg4uquyKU7x/bcTf0EsgHB7Cg1qM?=
 =?us-ascii?q?qYzlJTKV1v8Rs2ic9+pgVfygh3Qjqw5vuDivwccth5LViY4M0VDI7yt5wJwsKN?=
 =?us-ascii?q?C+VUV1b9mkEJ5KuCGbMYt7Ws0vT39ytCYh0bILv4OwcisSyJk/2RLTd/iKf5KV?=
 =?us-ascii?q?7h/tSuqdOyp0iXF5dL6lhhu/81Csx+nyW8WuzVpHrDBJnsfCu30MzRDe5NSLR/?=
 =?us-ascii?q?1g9Um7wzmPzRrc6uRcLEA0i6XbL5khz6Yulpocr0vDBDX6mEbog6+McEUr5Oyo?=
 =?us-ascii?q?5/7gYrX8qZ+QL450igfgPaQygsGzH/g0PwwUU2SG9+mwyqfv8VD6TblWlPE7k6?=
 =?us-ascii?q?vUvIjfJcsBp665BwFV0pwk6xa6Fzqm1NUYnX8aLFNKYR6HjJbmO0vIIP/mCfez?=
 =?us-ascii?q?mlOskTltx//YJL3sGYvNLnfdn7f7Z7p96FBTyBA1zd9B45JYELYBIOj8WkPprt?=
 =?us-ascii?q?zXEgc5MxCow+bgENh90oIeWWGRDaODP6LSrESF5uYuI+mKeY8UtyzxK/kj5/7y?=
 =?us-ascii?q?k3A5nUURcrWu3ZsScHq4BOhpI12FYXrwhdcMCWcKsRA/TOz2klKCViRfZ3avX6?=
 =?us-ascii?q?0m4DE7B5mrDYPCRoCrnbyA0z23HpxQZmBaFF+MFW3keJmDW/cJcCiSONNukiQY?=
 =?us-ascii?q?Vbi9TI8szROutAjkxLZ9LerU/SsYtZTk1NVu4+3TlBcy9SF7DsiH0mGNSX10kX?=
 =?us-ascii?q?0MRzMswK9/pkl9wE+Z0adkm/xYCcBT5/RRXwggLp7cz+t6C9PoVgLbZNiJSk2r?=
 =?us-ascii?q?QtGnATE3U9IwzMUCY0d7G9W+kB/D2zCmDKMSl7yOHJY06L7T32DtJ8ZhzHbLzK?=
 =?us-ascii?q?ohgEMgQsdVMW2mh7Rw9w7cB4PSl0WZlqCqdbkT3SLX9WeDy3aOs19cUAJqTarF?=
 =?us-ascii?q?WnUfbFPMrdvl/kPCU6OuCbM/PwRc08GCNLVFZsfpjVpcQvfjI8rRY2S2l2e0Bh?=
 =?us-ascii?q?aIw7eMYZHue2Uc2iXdFUcFnxoS/XaAKQgxGCOhr3jCAzxpEFLle1ns/vVmqHOn?=
 =?us-ascii?q?Uk80yBmHYFB72Lqr5BEZn/ycROkV3rIfpighrS55HFK839LQFtqBqBBtfKRaYd?=
 =?us-ascii?q?Mh/lhH0XjVuBB6PpylN6pinEIRcxxrv0Py0BV6EplAkckvrHMt0ApyKaKZ3Eld?=
 =?us-ascii?q?dz+C2pDwILnXKmj0/BCgcKPW3lDe0NCL+qYA8vg4qlPjvB23GUom6Xloz95V03?=
 =?us-ascii?q?6E7JXQEAUSSY7xUlow9xVivb7aZjcy5ozK2nxsK6W7qSLC1M8zC+sjyRageMlf?=
 =?us-ascii?q?PbiAFA/zFc0aGsevJPYrm1ivchILIuRS+LQoMMOhcvuMwLSrM/p4nDK6kWRH55?=
 =?us-ascii?q?hw00KR9yZmVuHExZcEw/GC0QuBWDfxl1OhssHxmYBZajAeBGu/yS74BIFPYq1+?=
 =?us-ascii?q?Z5oECWCrI8ev3NVxm4btW2JE9F6kH14Gws6pdgaIYFznwAJQ0l4boXq5liuizj?=
 =?us-ascii?q?x4ii0mobCb3CPT3evibh0HOmhQSWlmjFfsJ5W0jt8AUEipaQgpiAWq5ULgy6dH?=
 =?us-ascii?q?o6R/KnHZQV1UcCjuM2FiTqywu6KCYs5O8p8psT9bUP+hYVCcUbP9pxoa0yX+H2?=
 =?us-ascii?q?pR3jw7djequonnkBx+km6SMHFzrH/Bc8Fq2Rjf/MDcReJW3jceRil3kyPXBlu/?=
 =?us-ascii?q?P9mu59mUjI3MsuO9V2KgUJ1cby/rwJiEtCu6421qHBK+k+qymt3hDQg1zyv728?=
 =?us-ascii?q?N2WiXPqRb2epPr2LiiMeJ7YkloA0fx6spgFYF5iIcwhpAQ2X4Bi5WR/HoHl3rz?=
 =?us-ascii?q?MNpB1aL/anoNWSAEw9rP7Af5301jK2qDx5jlWXWF3sthe966b3sV2i0n7sBGEq?=
 =?us-ascii?q?eU7KFekitzrVq1tgbRYfl7njcAxvoi8n8ag+cVuAUzyiWRGKwdHU5dPSb0jRSH?=
 =?us-ascii?q?88i+rLlLZGaoabWw0Ut+ndO7A72YrABTRm35eos8Ei9q9cpwLkjM0HLo54Hged?=
 =?us-ascii?q?nQa88TtxKOnxfBiehVNIw+lv4QiSV7PmL9uGUvy/Qnghx2wZG6oI+HJn1x/KK+?=
 =?us-ascii?q?Bx5ULDz0aNkV+jHwlqZehceW0purHpVgHDULQZTpQeipEDIUqfToKQKOHCcgpX?=
 =?us-ascii?q?ecHLrVBRWf51t+r3LTD5CrMGmaK2IDwtVlQBmdOVZTgAQJXDghmp45FwaqxNHu?=
 =?us-ascii?q?cUtj5zAR4EL4pQVIyu5yKxb/VWLfrh+yajgoUJifMAZW7gZa6kfXK8Oe6/x8Hz?=
 =?us-ascii?q?pC8p29tgCNKXGbZwdVDWEPQEOEHEvuPr2v5dnG7uiZCfCyL/rIYbWSt+NeU+2E?=
 =?us-ascii?q?yo6o0otj5zyMLNmAPmF+D/0n3UpORXB4G8PEmzUWViwYjSTNY9SApBe7/C13od?=
 =?us-ascii?q?uy8PDqWALp+IuOBKFeMdRp+xCqn6iDM/Scizp+KTZdzpkM32PHyKAD3F4OjCFj?=
 =?us-ascii?q?bzmtHqoBtS7OT6LQm7VbDx0BayN0O8tH8bg83hRWOcPAjtP117h4juM6CltfVF?=
 =?us-ascii?q?zhnN2patIOI22nKFzHA0OLPqycJTLX28H3fb+8SbpIgepOqh2/oiybHFHjPziZ?=
 =?us-ascii?q?kznpVguiMeVNjCGdIRxft5uxchdrCWj/Ut3mbge3P8NwjT0z2bc0nG/FNXYAMT?=
 =?us-ascii?q?hgdENAtqGQ7SJdgvllB2NN9GZqLemalCaf9OTYLpcWsf12AiV7je5a4XI6y6dL?=
 =?us-ascii?q?4yFAXvB6hCzSrtt2qVG8juaP0iZnUAZJqjtThIOEp0NiOaDY9plGQXnF/RIN4n?=
 =?us-ascii?q?+WCxQFvNZlDtzvu6ZNytnAjq7zKTFC887K8ssYHcTbNMWHMH9yeSbuTXT9CgYI?=
 =?us-ascii?q?Vj7jFnzajlYVs7esvDXBp543p4Ps3pkTT7ZBfFg0EO4KTEVvGZoJJ5IhGnsOnL?=
 =?us-ascii?q?iZhcsJ4zKeoQPLScNBtZDCV/6OSaHlJTCZpbpJfR0FxfXzN40INoz91AplcFYs?=
 =?us-ascii?q?2MzyElfUFfVEqS5sdBU9uw0Z6HFjSnAo81nsbwmkpngJGqjw1js3gQt3bOBl2T?=
 =?us-ascii?q?Po7k0yL1yC8C4onWE8ndHomzWYdnjwIOG5QNcFJTDzsh0aMon6WBpydQ2/1WhJ?=
 =?us-ascii?q?DhD1D+Zaj6FhbnxskA/R/59CA/lNZaYBe1ke36fENL0TzV1Ap3D/lgd87uzfBM?=
 =?us-ascii?q?4nzVNyfA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AnAAAT1/9bh0O0hNFlHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUwUBAQsBg2sng3mId4spgWAtFJcugXYpEwGBS4YoIjYHDQEDAQEBAQEBAgE?=
 =?us-ascii?q?TAQEBCA0JCCkvgjYkAYJiAQIDAQIgDwEFQQYJAQEIAhgCAiYCAgMcOAYBDAYCA?=
 =?us-ascii?q?QEBgxyCAgQBik+bUIEvhUCEbYELiwuBVz+BESeCa4gFglcCiSiWewcCHHCBFYg?=
 =?us-ascii?q?KhwEekRyIeIhwiAonDIF6dIM4giYBF44ePgEBMQGBBAEBjTgBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AnAAAT1/9bh0O0hNFlHAEBAQQBAQcEAQGBUwUBAQsBg2s?=
 =?us-ascii?q?ng3mId4spgWAtFJcugXYpEwGBS4YoIjYHDQEDAQEBAQEBAgETAQEBCA0JCCkvg?=
 =?us-ascii?q?jYkAYJiAQIDAQIgDwEFQQYJAQEIAhgCAiYCAgMcOAYBDAYCAQEBgxyCAgQBik+?=
 =?us-ascii?q?bUIEvhUCEbYELiwuBVz+BESeCa4gFglcCiSiWewcCHHCBFYgKhwEekRyIeIhwi?=
 =?us-ascii?q?AonDIF6dIM4giYBF44ePgEBMQGBBAEBjTgBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,294,1539673200"; 
   d="scan'208";a="42056002"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 04:12:40 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728039AbeK2XRq (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 29 Nov 2018 18:17:46 -0500
Received: from pegase1.c-s.fr ([93.17.236.30]:62901 "EHLO pegase1.c-s.fr"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726683AbeK2XRq (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 29 Nov 2018 18:17:46 -0500
Received: from localhost (mailhub1-int [192.168.12.234])
        by localhost (Postfix) with ESMTP id 435GcL4KTpz9vGxw;
        Thu, 29 Nov 2018 13:12:34 +0100 (CET)
X-Virus-Scanned: Debian amavisd-new at c-s.fr
Received: from pegase1.c-s.fr ([192.168.12.234])
        by localhost (pegase1.c-s.fr [192.168.12.234]) (amavisd-new, port 10024)
        with ESMTP id B2j74Y-Puwei; Thu, 29 Nov 2018 13:12:34 +0100 (CET)
Received: from messagerie.si.c-s.fr (messagerie.si.c-s.fr [192.168.25.192])
        by pegase1.c-s.fr (Postfix) with ESMTP id 435GcL3ggMz9vGxv;
        Thu, 29 Nov 2018 13:12:34 +0100 (CET)
Received: from localhost (localhost [127.0.0.1])
        by messagerie.si.c-s.fr (Postfix) with ESMTP id 9E6DB8B89A;
        Thu, 29 Nov 2018 13:12:35 +0100 (CET)
X-Virus-Scanned: amavisd-new at c-s.fr
Received: from messagerie.si.c-s.fr ([127.0.0.1])
        by localhost (messagerie.si.c-s.fr [127.0.0.1]) (amavisd-new, port 10023)
        with ESMTP id SkVQhbmlSxdj; Thu, 29 Nov 2018 13:12:35 +0100 (CET)
Received: from PO15451 (unknown [192.168.232.3])
        by messagerie.si.c-s.fr (Postfix) with ESMTP id E65EA8B899;
        Thu, 29 Nov 2018 13:12:34 +0100 (CET)
Subject: Re: [PATCH] powerpc/mm: add exec protection on powerpc 603
To: "Aneesh Kumar K.V" <aneesh.kumar@linux.ibm.com>,
        Benjamin Herrenschmidt <benh@kernel.crashing.org>,
        Paul Mackerras <paulus@samba.org>,
        Michael Ellerman <mpe@ellerman.id.au>
Cc: linux-kernel@vger.kernel.org, linuxppc-dev@lists.ozlabs.org
References: <c8231561dfd73a18cc0fe7db94405ee71a886136.1542388741.git.christophe.leroy@c-s.fr>
 <a1e73a85-f5f0-769e-ba17-5b4560ecd9b7@linux.ibm.com>
From: Christophe LEROY <christophe.leroy@c-s.fr>
Message-ID: <b6e5d20f-0a9a-9348-3229-eb4631300378@c-s.fr>
Date: Thu, 29 Nov 2018 13:12:34 +0100
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:60.0) Gecko/20100101
 Thunderbird/60.3.1
MIME-Version: 1.0
In-Reply-To: <a1e73a85-f5f0-769e-ba17-5b4560ecd9b7@linux.ibm.com>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Language: fr
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org



Le 29/11/2018 à 12:25, Aneesh Kumar K.V a écrit :
> On 11/16/18 10:50 PM, Christophe Leroy wrote:
>> The 603 doesn't have a HASH table, TLB misses are handled by
>> software. It is then possible to generate page fault when
>> _PAGE_EXEC is not set like in nohash/32.
>>
>> In order to support it, set_pte_filter() and
>> set_access_flags_filter() are made common, and the handling
>> is made dependent on MMU_FTR_HPTE_TABLE
>>
>> Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
>> ---
>>   arch/powerpc/include/asm/book3s/32/hash.h    |  1 +
>>   arch/powerpc/include/asm/book3s/32/pgtable.h | 18 +++++++++---------
>>   arch/powerpc/include/asm/cputable.h          |  8 ++++----
>>   arch/powerpc/kernel/head_32.S                |  2 ++
>>   arch/powerpc/mm/pgtable.c                    | 20 +++++++++++---------
>>   5 files changed, 27 insertions(+), 22 deletions(-)
>>
>> diff --git a/arch/powerpc/include/asm/book3s/32/hash.h 
>> b/arch/powerpc/include/asm/book3s/32/hash.h
>> index f2892c7ab73e..2a0a467d2985 100644
>> --- a/arch/powerpc/include/asm/book3s/32/hash.h
>> +++ b/arch/powerpc/include/asm/book3s/32/hash.h
>> @@ -26,6 +26,7 @@
>>   #define _PAGE_WRITETHRU    0x040    /* W: cache write-through */
>>   #define _PAGE_DIRTY    0x080    /* C: page changed */
>>   #define _PAGE_ACCESSED    0x100    /* R: page referenced */
>> +#define _PAGE_EXEC    0x200    /* software: exec allowed */
>>   #define _PAGE_RW    0x400    /* software: user write access allowed */
>>   #define _PAGE_SPECIAL    0x800    /* software: Special page */
>> diff --git a/arch/powerpc/include/asm/book3s/32/pgtable.h 
>> b/arch/powerpc/include/asm/book3s/32/pgtable.h
>> index c21d33704633..cf844fed4527 100644
>> --- a/arch/powerpc/include/asm/book3s/32/pgtable.h
>> +++ b/arch/powerpc/include/asm/book3s/32/pgtable.h
>> @@ -10,9 +10,9 @@
>>   /* And here we include common definitions */
>>   #define _PAGE_KERNEL_RO        0
>> -#define _PAGE_KERNEL_ROX    0
>> +#define _PAGE_KERNEL_ROX    (_PAGE_EXEC)
>>   #define _PAGE_KERNEL_RW        (_PAGE_DIRTY | _PAGE_RW)
>> -#define _PAGE_KERNEL_RWX    (_PAGE_DIRTY | _PAGE_RW)
>> +#define _PAGE_KERNEL_RWX    (_PAGE_DIRTY | _PAGE_RW | _PAGE_EXEC)
>>   #define _PAGE_HPTEFLAGS _PAGE_HASHPTE
>> @@ -66,11 +66,11 @@ static inline bool pte_user(pte_t pte)
>>    */
>>   #define PAGE_NONE    __pgprot(_PAGE_BASE)
>>   #define PAGE_SHARED    __pgprot(_PAGE_BASE | _PAGE_USER | _PAGE_RW)
>> -#define PAGE_SHARED_X    __pgprot(_PAGE_BASE | _PAGE_USER | _PAGE_RW)
>> +#define PAGE_SHARED_X    __pgprot(_PAGE_BASE | _PAGE_USER | _PAGE_RW 
>> | _PAGE_EXEC)
>>   #define PAGE_COPY    __pgprot(_PAGE_BASE | _PAGE_USER)
>> -#define PAGE_COPY_X    __pgprot(_PAGE_BASE | _PAGE_USER)
>> +#define PAGE_COPY_X    __pgprot(_PAGE_BASE | _PAGE_USER | _PAGE_EXEC)
>>   #define PAGE_READONLY    __pgprot(_PAGE_BASE | _PAGE_USER)
>> -#define PAGE_READONLY_X    __pgprot(_PAGE_BASE | _PAGE_USER)
>> +#define PAGE_READONLY_X    __pgprot(_PAGE_BASE | _PAGE_USER | 
>> _PAGE_EXEC)
>>   /* Permission masks used for kernel mappings */
>>   #define PAGE_KERNEL    __pgprot(_PAGE_BASE | _PAGE_KERNEL_RW)
>> @@ -318,7 +318,7 @@ static inline void __ptep_set_access_flags(struct 
>> vm_area_struct *vma,
>>                          int psize)
>>   {
>>       unsigned long set = pte_val(entry) &
>> -        (_PAGE_DIRTY | _PAGE_ACCESSED | _PAGE_RW);
>> +        (_PAGE_DIRTY | _PAGE_ACCESSED | _PAGE_RW | _PAGE_EXEC);
>>       pte_update(ptep, 0, set);
>> @@ -384,7 +384,7 @@ static inline int pte_dirty(pte_t pte)        { 
>> return !!(pte_val(pte) & _PAGE_DIRTY);
>>   static inline int pte_young(pte_t pte)        { return 
>> !!(pte_val(pte) & _PAGE_ACCESSED); }
>>   static inline int pte_special(pte_t pte)    { return !!(pte_val(pte) 
>> & _PAGE_SPECIAL); }
>>   static inline int pte_none(pte_t pte)        { return (pte_val(pte) 
>> & ~_PTE_NONE_MASK) == 0; }
>> -static inline bool pte_exec(pte_t pte)        { return true; }
>> +static inline bool pte_exec(pte_t pte)        { return pte_val(pte) & 
>> _PAGE_EXEC; }
>>   static inline int pte_present(pte_t pte)
>>   {
>> @@ -451,7 +451,7 @@ static inline pte_t pte_wrprotect(pte_t pte)
>>   static inline pte_t pte_exprotect(pte_t pte)
>>   {
>> -    return pte;
>> +    return __pte(pte_val(pte) & ~_PAGE_EXEC);
>>   }
>>   static inline pte_t pte_mkclean(pte_t pte)
>> @@ -466,7 +466,7 @@ static inline pte_t pte_mkold(pte_t pte)
>>   static inline pte_t pte_mkexec(pte_t pte)
>>   {
>> -    return pte;
>> +    return __pte(pte_val(pte) | _PAGE_EXEC);
>>   }
>>   static inline pte_t pte_mkpte(pte_t pte)
>> diff --git a/arch/powerpc/include/asm/cputable.h 
>> b/arch/powerpc/include/asm/cputable.h
>> index 29f49a35d6ee..a0395ccbbe9e 100644
>> --- a/arch/powerpc/include/asm/cputable.h
>> +++ b/arch/powerpc/include/asm/cputable.h
>> @@ -296,7 +296,7 @@ static inline void cpu_feature_keys_init(void) { }
>>   #define CPU_FTRS_PPC601    (CPU_FTR_COMMON | CPU_FTR_601 | \
>>       CPU_FTR_COHERENT_ICACHE | CPU_FTR_UNIFIED_ID_CACHE | 
>> CPU_FTR_USE_RTC)
>>   #define CPU_FTRS_603    (CPU_FTR_COMMON | CPU_FTR_MAYBE_CAN_DOZE | \
>> -        CPU_FTR_MAYBE_CAN_NAP | CPU_FTR_PPC_LE)
>> +        CPU_FTR_MAYBE_CAN_NAP | CPU_FTR_PPC_LE | CPU_FTR_NOEXECUTE)
>>   #define CPU_FTRS_604    (CPU_FTR_COMMON | CPU_FTR_PPC_LE)
>>   #define CPU_FTRS_740_NOTAU    (CPU_FTR_COMMON | \
>>           CPU_FTR_MAYBE_CAN_DOZE | CPU_FTR_L2CR | \
>> @@ -367,15 +367,15 @@ static inline void cpu_feature_keys_init(void) { }
>>           CPU_FTR_MAYBE_CAN_NAP | CPU_FTR_L2CR | CPU_FTR_ALTIVEC_COMP | \
>>           CPU_FTR_SPEC7450 | CPU_FTR_NAP_DISABLE_L2_PR | \
>>           CPU_FTR_PPC_LE | CPU_FTR_NEED_PAIRED_STWCX)
>> -#define CPU_FTRS_82XX    (CPU_FTR_COMMON | CPU_FTR_MAYBE_CAN_DOZE)
>> +#define CPU_FTRS_82XX    (CPU_FTR_COMMON | CPU_FTR_MAYBE_CAN_DOZE | 
>> CPU_FTR_NOEXECUTE)
>>   #define CPU_FTRS_G2_LE    (CPU_FTR_COMMON | CPU_FTR_MAYBE_CAN_DOZE | \
>>           CPU_FTR_MAYBE_CAN_NAP)
>>   #define CPU_FTRS_E300    (CPU_FTR_MAYBE_CAN_DOZE | \
>>           CPU_FTR_MAYBE_CAN_NAP | \
>> -        CPU_FTR_COMMON)
>> +        CPU_FTR_COMMON  | CPU_FTR_NOEXECUTE)
>>   #define CPU_FTRS_E300C2    (CPU_FTR_MAYBE_CAN_DOZE | \
>>           CPU_FTR_MAYBE_CAN_NAP | \
>> -        CPU_FTR_COMMON | CPU_FTR_FPU_UNAVAILABLE)
>> +        CPU_FTR_COMMON | CPU_FTR_FPU_UNAVAILABLE  | CPU_FTR_NOEXECUTE)
>>   #define CPU_FTRS_CLASSIC32    (CPU_FTR_COMMON)
>>   #define CPU_FTRS_8XX    (CPU_FTR_NOEXECUTE)
>>   #define CPU_FTRS_40X    (CPU_FTR_NODSISRALIGN | CPU_FTR_NOEXECUTE)
>> diff --git a/arch/powerpc/kernel/head_32.S 
>> b/arch/powerpc/kernel/head_32.S
>> index 61ca27929355..50e892763dbb 100644
>> --- a/arch/powerpc/kernel/head_32.S
>> +++ b/arch/powerpc/kernel/head_32.S
>> @@ -515,6 +515,8 @@ InstructionTLBMiss:
>>       lwz    r0,0(r2)        /* get linux-style pte */
>>       andc.    r1,r1,r0        /* check access & ~permission */
>>       bne-    InstructionAddressInvalid /* return if access not 
>> permitted */
>> +    andi.    r1,r0,_PAGE_EXEC
>> +    beq-    InstructionAddressInvalid /* return if not _PAGE_EXEC */
>>       ori    r0,r0,_PAGE_ACCESSED    /* set _PAGE_ACCESSED in pte */
> 
> Can we get a DataTLB miss and expect to map that in TLB with Exec 
> permission?

There are two independant sets for TLBs, one set for data accesses and 
one set for instruction fetches.

On a data TLB miss, a data TLB is loaded with tlbld instruction.
On an instruction TLB miss, a insn TLB is loaded with tlbli instruction.

So if I understand your question correctly, the answer is 'no'.


> 
>>       /*
>>        * NOTE! We are assuming this is not an SMP system, otherwise
>> diff --git a/arch/powerpc/mm/pgtable.c b/arch/powerpc/mm/pgtable.c
>> index 010e1c616cb2..3d86fe9d2ff4 100644
>> --- a/arch/powerpc/mm/pgtable.c
>> +++ b/arch/powerpc/mm/pgtable.c
>> @@ -74,7 +74,7 @@ static struct page *maybe_pte_to_page(pte_t pte)
>>    * support falls into the same category.
>>    */
>> -static pte_t set_pte_filter(pte_t pte)
>> +static pte_t set_pte_filter_hash(pte_t pte)
>>   {
>>       if (radix_enabled())
>>           return pte;
>> @@ -93,14 +93,12 @@ static pte_t set_pte_filter(pte_t pte)
>>       return pte;
>>   }
>> -static pte_t set_access_flags_filter(pte_t pte, struct vm_area_struct 
>> *vma,
>> -                     int dirty)
>> -{
>> -    return pte;
>> -}
>> -
>>   #else /* CONFIG_PPC_BOOK3S */
>> +static pte_t set_pte_filter_hash(pte_t pte) { return pte; }
>> +
>> +#endif /* CONFIG_PPC_BOOK3S */
>> +
>>   /* Embedded type MMU with HW exec support. This is a bit more 
>> complicated
>>    * as we don't have two bits to spare for _PAGE_EXEC and 
>> _PAGE_HWEXEC so
>>    * instead we "filter out" the exec permission for non clean pages.
>> @@ -109,6 +107,9 @@ static pte_t set_pte_filter(pte_t pte)
>>   {
>>       struct page *pg;
>> +    if (mmu_has_feature(MMU_FTR_HPTE_TABLE))
>> +        return set_pte_filter_hash(pte);
> 
> so 603 doesn't have a coherent icache?

That's right, see asm/cputable.h

> 
>> +
>>       /* No exec permission in the first place, move on */
>>       if (!pte_exec(pte) || !pte_looks_normal(pte))
>>           return pte;
>> @@ -138,6 +139,9 @@ static pte_t set_access_flags_filter(pte_t pte, 
>> struct vm_area_struct *vma,
>>   {
>>       struct page *pg;
>> +    if (mmu_has_feature(MMU_FTR_HPTE_TABLE))
>> +        return pte;
>> +
>>       /* So here, we only care about exec faults, as we use them
>>        * to recover lost _PAGE_EXEC and perform I$/D$ coherency
>>        * if necessary. Also if _PAGE_EXEC is already set, same deal,
>> @@ -172,8 +176,6 @@ static pte_t set_access_flags_filter(pte_t pte, 
>> struct vm_area_struct *vma,
>>       return pte_mkexec(pte);
>>   }
>> -#endif /* CONFIG_PPC_BOOK3S */
>> -
>>   /*
>>    * set_pte stores a linux PTE into the linux page table.
>>    */
>>
> 
> The code looks good from book3s 64 point. I am not familiar with 603 
> hardware.
> 
> Reviewed-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>

Thanks
Christophe

> 
> -aneesh
