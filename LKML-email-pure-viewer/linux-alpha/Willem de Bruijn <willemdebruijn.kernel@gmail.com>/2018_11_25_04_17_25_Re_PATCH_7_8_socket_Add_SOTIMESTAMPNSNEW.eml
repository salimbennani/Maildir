Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 25 Nov 2018 14:43:26 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id CD9B35803C2;
	Sat, 24 Nov 2018 20:18:18 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga003-1.jf.intel.com with ESMTP; 24 Nov 2018 20:18:18 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AzPDT9xYH9EJhbJZpYnG7TsT/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpcm6Zx7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyNOAo2+?=
 =?us-ascii?q?YIUPAeQPPvtWoZfhqFsVtRuzBxKhBP/zxjJSmnP6wbE23uYnHArb3AIgBdUOsH?=
 =?us-ascii?q?HModr1NacSVeS1w7fNzT7ecvxZxyr25ZXSchA8oPGMX7RwetfWxEghFgPFilGQ?=
 =?us-ascii?q?ppLgPzyIyOsCqHKb7/dhVeKtjW4rsQJxrSa1xscqlIbJgpkYyl/B9SpjwYY1Ic?=
 =?us-ascii?q?e0R1J8Yd6hCZZdsTyROYhuQs46XW1kpCI3xqcbtZO1YiQG0okryh3DZ/CdcoWF?=
 =?us-ascii?q?4ArvWPiNLTp8nn5oe7Kyiwys/US8yeDwTMi53VVMoyFYiNfDrGoN2AbW6sWfSv?=
 =?us-ascii?q?ty4EOh2TGX2gDN5eFLP1o0mbDYK5E/2L4wkIQcsUDZEi/xgkX2g7eadkQi+ue2?=
 =?us-ascii?q?9+TqeqvqqoOYOoNulw3zPLoiltaiDek7LgQCRWmW9Oak2L3m50L5QbFKjvMskq?=
 =?us-ascii?q?netZDXPcAbpq+/Aw9I3Ycv8hW/ACm80NQeg3YHKEtJeBWJjojvJV7OOuv1Demw?=
 =?us-ascii?q?g1uyijdn3fPGMaP7ApXLMHfDlK3tfbFn605T0AYz18xQ54pICrEdJ/L+QkvxtN?=
 =?us-ascii?q?3bDhAnKQC1zPvnBc551oMfX2KPH6CYPLnTsV+O+uIgPe2MaJUJtzb6Lvgv/+Tu?=
 =?us-ascii?q?gmMhmV8BYamp2oMaaHCiEfRnP0WWe33sjs0BEWcXpAU+SuPqhUaGUT5SYXayQq?=
 =?us-ascii?q?096is6CIKgEYfMWIStjKad0ye8G51cfnpGBUyUEXf0a4WEXO8BaCCVIsB/iDAE?=
 =?us-ascii?q?Vr+hS4kn1RGprwL6z7tnLuzJ+iwXr57j1d515/HNmhE27zB7E8Od02SVRWFugm?=
 =?us-ascii?q?wIXyM23Lx4oUFl0FiDyqh4g/tbFdBJ/fNGSAU6OIXYz+x7DdDyRw3Acs2ISFag?=
 =?us-ascii?q?XtWpHzUxQsgtzN8JZkZ3A8+igQzb3yq2H78VkKSGBJ8u/aLaxXTxI8d9xGzA1K?=
 =?us-ascii?q?kulFQmRspPNWu7hq9w7QTTBojJk1mHmKaub6gTwCnN9GKbx2qUoE5YSBJwUbnC?=
 =?us-ascii?q?XX0He0TZt8r56V3YQ7+uE7snNBBBxtCEKqdNbt3pjlBGRPP4NdTaYmKxnXqwBB?=
 =?us-ascii?q?mSyrONaorqZ3sS3CHHBEcYlAAT+G6MNRIiCSe5v2LeEDtuGErybEz27+lxtmm3?=
 =?us-ascii?q?Tk8uwAGMdE1uyby19wURhfydTfMTw70FtD0gqzVyAFaywdbWB8CcqApmeaVWec?=
 =?us-ascii?q?k970tf1WLFqwx9OYStL7xjhl4bdAR3o0Pu1hVtBoVci8Qqq2kqzA5zKaKe31NM?=
 =?us-ascii?q?bDeY3ZH2Or3KJWj+5hGva6jK2l7A1Naa4LsA6PM9q1/7pgGmClIi82l709lSy3?=
 =?us-ascii?q?aT/JHKAxQdUJ3vUkc77QN1p6zHbSYn4YPU1npsMbevvz/G2tIpAvYlyxm6c9de?=
 =?us-ascii?q?NqOECBH9E8kAC8eyL+wqnkCjbggYM+BK6K40I8SmeuOG2a62JupvgCiqjGVH4I?=
 =?us-ascii?q?9n1EKM+DFxSurJ35YD3vGZ0RGLVzb6jFe9rM/3nZpIai0VHmq60SLkHpJeZrVu?=
 =?us-ascii?q?fYYXDmejO9e3xtRiiJH3QX5X6VmjC0kA2MC3YxqSbkXx0hFK2kQTvHOohzG4zz?=
 =?us-ascii?q?tykzwyqqqf3SrOw/ntdRYdO25LQnVigknoIYSuk98aW02oZRAzlBS5/Ub627Rb?=
 =?us-ascii?q?pKNnImjTQEdEZSj3I3t5UqutsLqPeMpP6JIusSVKX+Wwe1GaSrjhoxQE1yPvBX?=
 =?us-ascii?q?dRxDc+dzuyoJX2gwR6iH6BLHZ0tHfZe9t/xQ3c5NzfQv5dxCEGSzN7iTnUB1i8?=
 =?us-ascii?q?Ocem/dOPmpfHs+C+UX+hV5JJfSnqy4OAqDW05WlwDRKjmPCzn8XtERIm3i/jy9?=
 =?us-ascii?q?lqSSLIoQ78Y4bx0KS2K+BnfkhuBFLn78p6G4d+kpY/hZ0K2HgagImV8mQDkWvp?=
 =?us-ascii?q?Ldpb3qf+ZmIXRTEX297V/BTl2Ep7I3KK3Y35V2+Rwst8Z9agZGMW1Tkw78RLCK?=
 =?us-ascii?q?eS8bxFkjF5olu+rQLNf/d9mi0Rxucp6H4fm+sJohYizj2BArAOGklVJSnslxWL?=
 =?us-ascii?q?79+ktqlWanigcaOs1EVgh9CuF6+NohtTWHvifpciHClw7thwMV7W0X3z7J3kd8?=
 =?us-ascii?q?fUbd4JqhKUlBLAhfBPKJ0tjvoKmTZnOWXlsH05zO47iAZi3JCgs4iBNmVt57m5?=
 =?us-ascii?q?Ah9DOz3xZsMT/CztjKlEksaX2YCvAotuGjERUJT0SvKoFSoYte77OAaWDD08tn?=
 =?us-ascii?q?CbFKLEEgCF70dmq2/PH4qvN3GKP3QZydRiRB+AJE1QmgwUXTM6noInGQCu3sDu?=
 =?us-ascii?q?bEB55jUJ7F7ithRM0v5oNwX4UmrHpgencDI0R4aELBZM8gFO/UTVMdGd7uJuGS?=
 =?us-ascii?q?FX5IahoReJKmyaYQRIEG4IVlaFB1DlIrmh+93A//KECeq5KvvEea+OpvBGV/eU?=
 =?us-ascii?q?2ZKv1ZNr/jaLNsWSJ3liEuc02kxZUXBiHMTZnToPRjcTlyLMac6buRi99jd2rs?=
 =?us-ascii?q?C57PTkRgbv6ZGTBLtVNNVl4wq2jrubN+6MmCZ5Li5V1pMSyn/Jy7gf318Shztt?=
 =?us-ascii?q?dzm3FrQAujDCTLjNmq9MFBMbbyJzNM1V76MzxAVNOMjbis/r2b58lPI6F1BFVV?=
 =?us-ascii?q?n5kMGzecMKO329NE/ABEuTLruGOCbEw9vpbqK8U7FQiORUuga0uTaaFU/jIzuC?=
 =?us-ascii?q?myPoVxCpLeFDkiWbMAZCt4G6dxZnEXLjQ87+ah2nLN93iiU7waE1hnPPL2ITLS?=
 =?us-ascii?q?JwfF9NrrKO6yNVmfF/G21H7np4IuiIgSeZ7+/EKpkItftnGDh7l+Vf4H4i0bta?=
 =?us-ascii?q?8DlEROBpmCvVttNvo0upku+KyjpmVhpBsjdKhIKRskVkNqXU7Z1AWXfC/BIQ4m?=
 =?us-ascii?q?ScERUKp915CtLxv6Bc0MTAlKX2KGQKz9WB0cYRH8GcBMOBOX8oNxuhTDLZARMM?=
 =?us-ascii?q?Cz2mL2fSg2RSlfiT8jueqZ1s+bb2n59bdb5fUFEwXv8XQm5/Ad0AJt8jQTIglb?=
 =?us-ascii?q?OegMMC/2e/rh+XR8hAuJ3Dfv2XCPTrbj2eiO8XNFMz3brkINFLZcXA0Et4Zww/?=
 =?us-ascii?q?xdySFg=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AbAABiIfpbh0O0hNFjHgEGBwaBUQkLA?=
 =?us-ascii?q?YNrFBODeYN7kByCDRSJCY4fgXMsEwGIWiI0CQ0BAwEBAQEBAQIBEwEBAQgNCQg?=
 =?us-ascii?q?pIwyCNiQBgmIBAgMBAiAdARsdAQMCCQEBBQULDQICJgICAx4BAREBBQEcBhMFg?=
 =?us-ascii?q?xyBaQEDFQWZSjyLDYESBQEXgncFhCwKGScNWoE3AgYSeYp+ghaEI4JWhSyCVwK?=
 =?us-ascii?q?LEYR/j0QuBwKOBIMrGIFZhQuKJCyOIYlUMIElgg1NI4EBgjuCGwwXg0qKcCEzg?=
 =?us-ascii?q?QUBAYxeAQE?=
X-IPAS-Result: =?us-ascii?q?A0AbAABiIfpbh0O0hNFjHgEGBwaBUQkLAYNrFBODeYN7kBy?=
 =?us-ascii?q?CDRSJCY4fgXMsEwGIWiI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmIBA?=
 =?us-ascii?q?gMBAiAdARsdAQMCCQEBBQULDQICJgICAx4BAREBBQEcBhMFgxyBaQEDFQWZSjy?=
 =?us-ascii?q?LDYESBQEXgncFhCwKGScNWoE3AgYSeYp+ghaEI4JWhSyCVwKLEYR/j0QuBwKOB?=
 =?us-ascii?q?IMrGIFZhQuKJCyOIYlUMIElgg1NI4EBgjuCGwwXg0qKcCEzgQUBAYxeAQE?=
X-IronPort-AV: E=Sophos;i="5.56,276,1539673200"; 
   d="scan'208";a="41415925"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 24 Nov 2018 20:18:16 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727195AbeKYPIO (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sun, 25 Nov 2018 10:08:14 -0500
Received: from mail-ed1-f68.google.com ([209.85.208.68]:46593 "EHLO
        mail-ed1-f68.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726573AbeKYPIN (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sun, 25 Nov 2018 10:08:13 -0500
Received: by mail-ed1-f68.google.com with SMTP id o10so13075230edt.13;
        Sat, 24 Nov 2018 20:18:03 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=peBHLQfMZprZ7Y8obIOHLEWYp3Ixk/YUySRgAo0Jafw=;
        b=NjorkavKui9Tc7buhACLon/lY1784aUUvSYflHH+QPFX8yqDS6zSJEeeIkPW/eqAb+
         /XTfFxzVG02YA3LbBnv8xXF2x3eQGCUgXH9G1rmR3PxMBOK7TRdTk0GMJfn5itImNOym
         Xp+alG1ykMs38TNqe1LlJKPdaVabnfpGDyROppKmXzTx4Wkp31ZbJ+kkuvIsXyq9umM0
         5rTL4qlsrJ8uOEOAPy3yFffyyIUlA5f3hJcHZbstrD5sx+H3yuhYo6E6uhok+p//g8+h
         EJhkJguTrr6l/8stGIAo8jxAmWHOFu9/Tjh+nEE/AFVG4KJK71Y6fHTSNhQe5tYauyCP
         Aunw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=peBHLQfMZprZ7Y8obIOHLEWYp3Ixk/YUySRgAo0Jafw=;
        b=twwbQd2L3HZyZjeJbVj3ZYBHanIwm91Dlk7zjmm8s4BPe0IincGuyDX8WVCdPjA4Hl
         l1nd/f6DUrqLTVYHqRBdq7dmeU1DLTDBii15MWdiXatyaQXgzBwR9NNfzQzDXBJ/rKZp
         IU5xQzmmhn/XxTPrFK2fR+sQZ1lSUo4uDcHyR7euKauc4N6Kda2ShdHWnuCHD5I+BaAj
         RYB2juSvtv8PiOqEHCVKavgUCXkGV6iGJdKd3i69lMjx8tIheE5BwvQGgSw08mKAyPaO
         q4Wxg94WlgCBnXIn9FyPeZDmSH9SOB5W7t53O8C8uSz3RliDxSLIyk+p4HWwmfzcbAQM
         LOzw==
X-Gm-Message-State: AA+aEWaZOd1qMLXSZOctKHVHogsFM0bEKXyB+lJYtPjlCJDhzrpDdgla
        HvTXBImyaUFo+gyoW4HdVRZK9rMYzRP80O9tRQc=
X-Google-Smtp-Source: AFSGD/WFxCqokbbTRO6Hk8K9wcilVroJIfm/Lok7h/4afEenadq1vGvymFhQe8/+ZimaS+/sLdCfXU8DeE36FK40u8M=
X-Received: by 2002:a50:b31c:: with SMTP id q28mr18322945edd.241.1543119482776;
 Sat, 24 Nov 2018 20:18:02 -0800 (PST)
MIME-Version: 1.0
References: <20181124022035.17519-1-deepa.kernel@gmail.com>
 <20181124022035.17519-8-deepa.kernel@gmail.com> <CAF=yD-K=ZLZ_S=Y6YnhvvkfKQS=21ujwiGd7+JB9yDMtiX_9hg@mail.gmail.com>
In-Reply-To: <CAF=yD-K=ZLZ_S=Y6YnhvvkfKQS=21ujwiGd7+JB9yDMtiX_9hg@mail.gmail.com>
From: Willem de Bruijn <willemdebruijn.kernel@gmail.com>
Date: Sat, 24 Nov 2018 23:17:25 -0500
Message-ID: <CAF=yD-K3Ga8qojSh5Epa6m4EYn-Lvdo=e38MnFqOKch1128VHw@mail.gmail.com>
Subject: Re: [PATCH 7/8] socket: Add SO_TIMESTAMP[NS]_NEW
To: Deepa Dinamani <deepa.kernel@gmail.com>
Cc: David Miller <davem@davemloft.net>,
        LKML <linux-kernel@vger.kernel.org>,
        Network Development <netdev@vger.kernel.org>,
        Al Viro <viro@zeniv.linux.org.uk>,
        Arnd Bergmann <arnd@arndb.de>,
        y2038 Mailman List <y2038@lists.linaro.org>,
        jejb@parisc-linux.org, ralf@linux-mips.org, rth@twiddle.net,
        linux-alpha@vger.kernel.org, linux-mips@linux-mips.org,
        linux-parisc@vger.kernel.org, linux-rdma@vger.kernel.org,
        sparclinux@vger.kernel.org
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Sat, Nov 24, 2018 at 10:59 PM Willem de Bruijn
<willemdebruijn.kernel@gmail.com> wrote:
>
> On Sat, Nov 24, 2018 at 3:58 AM Deepa Dinamani <deepa.kernel@gmail.com> wrote:
> >
> > Add SO_TIMESTAMP_NEW and SO_TIMESTAMPNS_NEW variants of
> > socket timestamp options.
> > These are the y2038 safe versions of the SO_TIMESTAMP_OLD
> > and SO_TIMESTAMPNS_OLD for all architectures.
> >
> > Note that the format of scm_timestamping.ts[0] is not changed
> > in this patch.
> >
> > Signed-off-by: Deepa Dinamani <deepa.kernel@gmail.com>
> > Cc: jejb@parisc-linux.org
> > Cc: ralf@linux-mips.org
> > Cc: rth@twiddle.net
> > Cc: linux-alpha@vger.kernel.org
> > Cc: linux-mips@linux-mips.org
> > Cc: linux-parisc@vger.kernel.org
> > Cc: linux-rdma@vger.kernel.org
> > Cc: netdev@vger.kernel.org
> > Cc: sparclinux@vger.kernel.org
> > ---
>
> > diff --git a/include/net/sock.h b/include/net/sock.h
> > index 8143c4c1a49d..9edf909dc176 100644
> > --- a/include/net/sock.h
> > +++ b/include/net/sock.h
> > @@ -801,6 +801,7 @@ enum sock_flags {
> >         SOCK_RCU_FREE, /* wait rcu grace period in sk_destruct() */
> >         SOCK_TXTIME,
> >         SOCK_XDP, /* XDP is attached */
> > +       SOCK_TSTAMP_NEW, /* Indicates 64 bit timestamps always */
>
> sk_flags is getting exhausted. Commit b9f40e21ef42 ("net-timestamp:
> move timestamp flags out of sk_flags") added a new u16 sk_tsflags
> specifically for timestamps. That may be a better choice here, too.
>
> > diff --git a/net/core/sock.c b/net/core/sock.c
> > index e60036618205..7b485dfaa400 100644
> > --- a/net/core/sock.c
> > +++ b/net/core/sock.c
> > @@ -652,15 +652,23 @@ static void setsockopt_timestamp(struct sock *sk, int type, int val)
> >         if (!val) {
> >                 sock_reset_flag(sk, SOCK_RCVTSTAMP);
> >                 sock_reset_flag(sk, SOCK_RCVTSTAMPNS);
> > +               sock_reset_flag(sk, SOCK_TSTAMP_NEW);
> >                 return;
> >         }
> >
> > +       if (type == SO_TIMESTAMP_NEW || type == SO_TIMESTAMPNS_NEW)
> > +               sock_set_flag(sk, SOCK_TSTAMP_NEW);
> > +       else
> > +               sock_reset_flag(sk, SOCK_TSTAMP_NEW);
> > +
>
> if adding a boolean whether the socket uses new or old-style
> timestamps, perhaps fail hard if a process tries to set a new-style
> option while an old-style is already set and vice versa. Also include
> SO_TIMESTAMPING_NEW as it toggles the same option.
>
> > diff --git a/net/socket.c b/net/socket.c
> > index d3defba55547..9abeb6bc9cfe 100644
> > --- a/net/socket.c
> > +++ b/net/socket.c
> > @@ -699,6 +699,38 @@ static void put_ts_pktinfo(struct msghdr *msg, struct sk_buff *skb)
> >                  sizeof(ts_pktinfo), &ts_pktinfo);
> >  }
> >
> > +static void sock_recv_sw_timestamp(struct msghdr *msg, struct sock *sk,
> > +                                  struct sk_buff *skb)
> > +{
> > +       if (sock_flag(sk, SOCK_TSTAMP_NEW)) {
> > +               if (!sock_flag(sk, SOCK_RCVTSTAMPNS)) {
> > +                       struct sock_timeval tv;
> > +
> > +                       skb_get_new_timestamp(skb, &tv);
> > +                       put_cmsg(msg, SOL_SOCKET, SO_TIMESTAMP_NEW,
> > +                                sizeof(tv), &tv);
> > +               } else {
> > +                       struct __kernel_timespec ts;
> > +
> > +                       skb_get_new_timestampns(skb, &ts);
> > +                       put_cmsg(msg, SOL_SOCKET, SO_TIMESTAMPNS_NEW,
> > +                                sizeof(ts), &ts);
> > +               }
> > +       }
> > +       if (!sock_flag(sk, SOCK_RCVTSTAMPNS)) {
> > +               struct __kernel_old_timeval tv;
> > +
> > +               skb_get_timestamp(skb, &tv);
> > +               put_cmsg(msg, SOL_SOCKET, SO_TIMESTAMP_OLD,
> > +                        sizeof(tv), &tv);
> > +       } else {
> > +               struct timespec ts;
> > +
> > +               skb_get_timestampns(skb, &ts);
> > +               put_cmsg(msg, SOL_SOCKET, SO_TIMESTAMPNS_OLD,
> > +                        sizeof(ts), &ts);
> > +       }
> > +}
> >  /*
> >   * called from sock_recv_timestamp() if sock_flag(sk, SOCK_RCVTSTAMP)
> >   * or sock_flag(sk, SOCK_RCVTSTAMPNS)
> > @@ -719,19 +751,8 @@ void __sock_recv_timestamp(struct msghdr *msg, struct sock *sk,
> >                 false_tstamp = 1;
> >         }
> > -       if (need_software_tstamp) {
>
> Considerably less code churn if adding __sock_recv_timestamp_2038 and
> calling that here:
>
>                    if (sock_flag(sk, SOCK_TSTAMP_NEW))
>                            __sock_recv_timestamp_2038(msg, sk, skb);
>                    else if ...
>
> Same for the tcp case above, really, and in the case of the next patch
> for SO_TIMESTAMPING_NEW

That naming convention, ..._2038, is not the nicest, of course. That
is not the relevant bit in the above comment.

Come to think of it, and related to my question in patch 2 why the
need to rename at all, could all new structs, constants and functions
be named consistently with 64 suffix? __sock_recv_timestamp64,
SO_TIMESTAMPING64 and timeval64 (instead of sock_timeval,
it isn't really a sock specific struct)?

I guess that there is a good reason for the renaming exercise and
conditional mapping of SO_TIMESTAMP onto old or new interface.
Please elucidate in the commit message.
