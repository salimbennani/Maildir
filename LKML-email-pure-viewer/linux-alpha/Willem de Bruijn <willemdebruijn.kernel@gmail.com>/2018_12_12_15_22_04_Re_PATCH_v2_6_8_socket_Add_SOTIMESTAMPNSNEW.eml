Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 08:51:49 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 0B30B580380;
	Wed, 12 Dec 2018 07:22:52 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 12 Dec 2018 07:22:51 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AJrsW/h0nF9Xgv9/HsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segTKv/xwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJOUcZfVSNPAo2y?=
 =?us-ascii?q?YYgSAeQfIelYtJH9qlkVoBuiGQWhHv/jxiNUinL026AxzuQvERvB3AwlB98BsH?=
 =?us-ascii?q?XUrNHxNKgMVOC+0bTHwiveZP5Lwzf99YnIchInofqRWr9xf8vRyU0rFwzbi1Wf?=
 =?us-ascii?q?tJLqMCiP1uQQsmib7exgWfisi2E5sQFxpCagxsM3h4nGg4Ia0FHE9SFjzIkpIt?=
 =?us-ascii?q?24TVd2bNi5G5VTryGXL5V6Tt8mTm1ypSo3xKMKtYSmcCUJ1Jgr3R/SZv6ff4SW?=
 =?us-ascii?q?/h7uUPydLDR4iX5/Zr6zmxW//VKhx+D/UMS/zUxEoTBfktbWs3AAzxzT5daDSv?=
 =?us-ascii?q?t65kqhxzmP2B7J6u1eIkA7i7DbK5g/zb40jJYTtl7DHiDulEX3iq+ZaFkk9/C2?=
 =?us-ascii?q?5+j7ZrjqvIKQOoFqhg3kL6gjmdCzDf45PwUMR2Sb/P6z1Lzn/U33WrVKifg2n7?=
 =?us-ascii?q?HdsJDbI8Qbu6G4DxZW0ok98Ra/CSmp0NABkXkAIlNFfgyIj5LyNlHQL/D3E+2/?=
 =?us-ascii?q?j06vkDh13fDGOKPuApHXInjEirfhcq5x61RAxwor0dBf+5VUB6kFIPLyWU/+qs?=
 =?us-ascii?q?bUDxAkMwGvx+bnCdN91p4RWG6VA6+ZNr/SvkGM5u41P+aMY4oVsi7nK/c5//7u?=
 =?us-ascii?q?kWM5mVgFcKmpx5QXaWy4Ee5hI0mDYXrsn80OEWEFvgclSOzqiVuCUSNcZnqoXq?=
 =?us-ascii?q?I84C07B5yiDYvZWo+th7mB1j+hHpJKfmBGFkyMEXDweoWGXPcDdjieIsxmkjwC?=
 =?us-ascii?q?U7ihTJQs1RWvtA/81rpmIfDY+iwetZL/ytd14/ffmg019TxxF86dyX2CT3lonm?=
 =?us-ascii?q?MUQD87xLpwoVd9yleE0qh0meZYGsZR5/5SVgc6NJjcz/F1CtzoWwLBeMuJR0ii?=
 =?us-ascii?q?Qtm8HT4xSdcxyccUY0lhA9WikgzD3y2yDr8WjbOLAoY48qbd33frIcZ9xG3L1K?=
 =?us-ascii?q?0gj1kgX8tOOneqhq959wjPGYHJl1+VmLqtdaQZxCTN7nuMzXKSvEFEVw59SbjK?=
 =?us-ascii?q?UmoBZkTIt9j55lnNT7m1Cbs5NAtNzsqCKqhPat3tllhGQPbjONLDY2O+gWuwBB?=
 =?us-ascii?q?CIxq+SY4ruYWkSwCLdCE0cmQAJ4XmGLRQ+Bjumo2/GETNhD0zvbF32/el+sny7?=
 =?us-ascii?q?SFQ0wB+Mb0B607q1+xgVheGTSv8J37IEvjshpCtwHFqnw93WDN+ArRJ7fKpAed?=
 =?us-ascii?q?M9/EtH1WXBugxhP5ygKqdihkIecwV3pU/uyw97CoJakcgurXMqygVyJLmc0FNA?=
 =?us-ascii?q?cTOYwJ/xNqfWKmn04BCgdarW1kvC39aR/6cF8O44pEn7vAG1Ckoi9G1q3MNR03?=
 =?us-ascii?q?SC6ZTFEgoTXYjqXUYq6hd1vbfaYio654PKznBsNai0sjnf29MmHuclyxCgf8tB?=
 =?us-ascii?q?P6OADgP9D8oaB822Iuwwh1epdg4EPPxV9KMsP8KmauGK17KxMOdhnDKpl2JH4I?=
 =?us-ascii?q?9m30KI9ip8TPPI3pkfz/GZ2AuHSynzjFO7vs/rnoBEYCkYHnCjxij8GI5Reqpy?=
 =?us-ascii?q?cJ4RCWevP8K43M9+iIPqW3JC8l6sGUkG2M6wdRWOdVP92RBf2loNoXygnyu11D?=
 =?us-ascii?q?h0kzAvrqqC0y3C2eXidBwbOmFVQGlul0vjIY+xj9oCRkincxAplAe55Ub936Va?=
 =?us-ascii?q?pKV/I3PTQEtSZCj2MmdiX7C0trqDZc5P9ZwpvT9WUOS6fVCVVLr9rwEG3CPkGm?=
 =?us-ascii?q?tU3Co7eC2yupXlgxx6j3qQLHRpo3rDesFwxhDf6MbHRfFL3ToGRyh4iT/JCVi6?=
 =?us-ascii?q?JNSp+dSUl5HesuGxTW6hV5tTcTX1woOErie0+WpqARinlfCphtLnCRQ60TP819?=
 =?us-ascii?q?RyVSTHthH8bpPp16S7N+JqZU1oBF7668pnFYByiIowhJcM2XcEgpWZ52YIkWD2?=
 =?us-ascii?q?Md9Dw6LxcGINRSIXw97S+AXl21dsLnOTy4L5S3WS2M1hZ9ahb2MS2yI96d1KCa?=
 =?us-ascii?q?iO4LxFmyt1vkS3rQbLbfdhmTcdzOMk6GQGjOERpAot0iKdD6gXHUlZPizjjQ6E?=
 =?us-ascii?q?7t6go6VMeGagb6Kw21FgktC7A7GPuQVcWHf/epc/Ei589MR/MFTQ0HLt7oHoYs?=
 =?us-ascii?q?XfbdUWtheMiRfPk/BVKI4tlvoNnSdnJWX9vXg/x+86lxNu24y6vJOcK2Vs56+5?=
 =?us-ascii?q?Bh9YNjvoZ8Ic4D3tjKBentqI0ICrBJluBjILXJ7wR/KyDD0SrejnNxqJEDAksX?=
 =?us-ascii?q?iUA73fHQuC6Et8q3LPDoumN3WWJHkf0NVjSwORJE1ZgAAIQjo6moQ1GRytxMzk?=
 =?us-ascii?q?aE15/Cwe5kbkqhtQzeJlLxv/XX3apAi2cTc4UoSfIABV7gFf5EfVLMqe4fhoHy?=
 =?us-ascii?q?xD+p2hrQqNKnGUZghSDGEJXFCECE7nPrW0+dbA9O2YDPKkL/TSebWOtfBeV/CQ?=
 =?us-ascii?q?yJOv1Ytm4i+MNtiVMXlkFfE7wU1DXXZ2G8nCnzUPSioXlz/CbsKBpRe8/DF3od?=
 =?us-ascii?q?678PjxRA3v4o6PAaNIMdpz4xC2nbuDN+mIiSZ5NzlY15AMxXzJyLQF314SkSZu?=
 =?us-ascii?q?dzazHrQaqC7NV7ndmqtWDx4ddiNyO9FE76M63glRJ8Hbjsn52aJ/jv4wE11FT0?=
 =?us-ascii?q?Dumtm1ZcwWJGGwLEnIBFuQO7ScOzLKw9v7Yae9SbBLiOVUthuwuSuUEkP5PzSD?=
 =?us-ascii?q?kSXpWA6rMe1WkC6bOxlespmnchlxEWjjUM7mahqjPd9rjD02xKc4iW/QOWEAMT?=
 =?us-ascii?q?hzbUVNo6aU7SNZhPV/BmNA4mBkLemChyaW8e3YJowKvvtsByR+j/ha72giy7tJ?=
 =?us-ascii?q?8CFEQ+R4mSvIod5oplGmk++PxSJmURpOsDlLgo2LsF5mOaXY8JlARHnF8AgM7W?=
 =?us-ascii?q?WWFxQFud9lBsfztKBXz9ic3J70fRtP/srdtecdAcHRIcSGeC4tPBfxEXjXARED?=
 =?us-ascii?q?QDqDOmTWhkgbm/aXoC67tJ8//6ftnJ4DT/dXWRQfDO4bCEItSMMDJJN6Wz8pm6?=
 =?us-ascii?q?SGjcwOo3mzth/cQO1Vu5nGUrSZBvC5e2XRtqVNexZdmeCwFo8ULICunhU6MlQ?=
 =?us-ascii?q?=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0CfAgDyJhFch0O0hNFkHQEBBQEHBQGBZ?=
 =?us-ascii?q?YNsFBODe4N7kDCCDRSJEJAiLBMBhz4iOBIBAwEBAQEBAQIBEwEBAQgNCQgpIwy?=
 =?us-ascii?q?CNiQBgmIBAgMBAiAEGQEbFgcBAwIJAQEFBQsNAgImAgIDHgEBEQEFARwGEwWDH?=
 =?us-ascii?q?IFpAQMVBZohPIsNfBYFAReCdwWEPwoZJw1dgTcCBhJ5izGCFoQjgleFLoJXAok?=
 =?us-ascii?q?ZgheFE5AbLgcCjieDMBiBXIUailAsjwGKAzCBPIF3TSOBAYI7ghsMF4NKinEhM?=
 =?us-ascii?q?4EFAQGMfAEB?=
X-IPAS-Result: =?us-ascii?q?A0CfAgDyJhFch0O0hNFkHQEBBQEHBQGBZYNsFBODe4N7kDC?=
 =?us-ascii?q?CDRSJEJAiLBMBhz4iOBIBAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmIBAgMBA?=
 =?us-ascii?q?iAEGQEbFgcBAwIJAQEFBQsNAgImAgIDHgEBEQEFARwGEwWDHIFpAQMVBZohPIs?=
 =?us-ascii?q?NfBYFAReCdwWEPwoZJw1dgTcCBhJ5izGCFoQjgleFLoJXAokZgheFE5AbLgcCj?=
 =?us-ascii?q?ieDMBiBXIUailAsjwGKAzCBPIF3TSOBAYI7ghsMF4NKinEhM4EFAQGMfAEB?=
X-IronPort-AV: E=Sophos;i="5.56,344,1539673200"; 
   d="scan'208";a="56050023"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 12 Dec 2018 07:22:49 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727815AbeLLPWq (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 12 Dec 2018 10:22:46 -0500
Received: from mail-ed1-f68.google.com ([209.85.208.68]:37760 "EHLO
        mail-ed1-f68.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726879AbeLLPWo (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 12 Dec 2018 10:22:44 -0500
Received: by mail-ed1-f68.google.com with SMTP id h15so15879717edb.4;
        Wed, 12 Dec 2018 07:22:42 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=pb6nsh9mQtsebl/A8ULqr+d08QVFd5jJ4arDtoQLm+E=;
        b=XX9SVF84w0E2nWYIaKdpu28NhQC2SHGavLEKa/ttJl4raX+HCV/bJ+8boNd0ncrwVS
         Acmh8S/gvvJsYkxB7exHFaTeLRfZzuCWleZCf8ZJVaC60iqeHmFH5curmcNaS5BdBN+N
         raiNFM9gYdQ47KWSBAXZNlnBaOEOL7ZlaWaiVjni0tsmDJjU2HoRw+euPYLhILxv4pOo
         SD0aJZs3vCde9Y4v6e+DptmPtP/VAoFAaZsL+9b77Z8eA2Duyi1IULbMdpODeuAshZ87
         TWAuIC+irfC2s1Gun983oQNwECMCav17MPWAAL926UZ8oojQYx9uTFOTwJD3QUQfwzbY
         RkGw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=pb6nsh9mQtsebl/A8ULqr+d08QVFd5jJ4arDtoQLm+E=;
        b=djSCLChI4fBUBnS7WfxI2MkixFPVyw+IbC826tHS7EiHoOtudDDgpz6hULUW/EDvMf
         YLF+KAuPc3YsBulJACutkgRL1XNpVS+tB4OhUXuwtCW9s8h2XpMEGVmxNO12qxO5uakK
         KVnEObux4cdMLB3A47qUDaDI9jcdiS74g548I5foc21dlPklzqA0hz0zxxknk3mxjd48
         r3S9EIAhifvInSDTE9DvcPUQQ7nED1skqE9izzYrwWMrZCJAPISOuD8ao/+NIa0z1IKX
         7LxZBLbo3X4l1+bYIMNwqBxwwEubCY9cmGNMAFAt9ZICX1yoxmUu2nvJu/6oSQB+no1/
         Z63Q==
X-Gm-Message-State: AA+aEWaZnyahaYCV/g2kOL/X6ZK8JtTRyc5PVr3q/i4WBjnFQHXT3Pn1
        pM1uT4xciCyfgUg3fRbGza4kKh+9Pq/Cx6iL0Kc=
X-Google-Smtp-Source: AFSGD/W2e52auBMplrqJ7beXavB75ytlRdlHniGY+Bb9xclojtze2ZzJFrTI5BsoeVB4swode+eAQgbtfogrLDGjpbM=
X-Received: by 2002:a50:b31c:: with SMTP id q28mr19169443edd.241.1544628161381;
 Wed, 12 Dec 2018 07:22:41 -0800 (PST)
MIME-Version: 1.0
References: <20181211202520.16799-1-deepa.kernel@gmail.com> <20181211202520.16799-7-deepa.kernel@gmail.com>
In-Reply-To: <20181211202520.16799-7-deepa.kernel@gmail.com>
From: Willem de Bruijn <willemdebruijn.kernel@gmail.com>
Date: Wed, 12 Dec 2018 10:22:04 -0500
Message-ID: <CAF=yD-LDWrjxK+XFv-KNAoyP7NCOZiL00n5PkzQ-5aEzq+eCLQ@mail.gmail.com>
Subject: Re: [PATCH v2 6/8] socket: Add SO_TIMESTAMP[NS]_NEW
To: Deepa Dinamani <deepa.kernel@gmail.com>
Cc: David Miller <davem@davemloft.net>,
        LKML <linux-kernel@vger.kernel.org>,
        Network Development <netdev@vger.kernel.org>,
        Arnd Bergmann <arnd@arndb.de>,
        y2038 Mailman List <y2038@lists.linaro.org>,
        jejb@parisc-linux.org, ralf@linux-mips.org, rth@twiddle.net,
        linux-alpha@vger.kernel.org, linux-mips@linux-mips.org,
        linux-parisc@vger.kernel.org, linux-rdma@vger.kernel.org,
        sparclinux@vger.kernel.org
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Tue, Dec 11, 2018 at 3:30 PM Deepa Dinamani <deepa.kernel@gmail.com> wrote:
>
> Add SO_TIMESTAMP_NEW and SO_TIMESTAMPNS_NEW variants of
> socket timestamp options.
> These are the y2038 safe versions of the SO_TIMESTAMP_OLD
> and SO_TIMESTAMPNS_OLD for all architectures.
>
> Note that the format of scm_timestamping.ts[0] is not changed
> in this patch.
>
> Signed-off-by: Deepa Dinamani <deepa.kernel@gmail.com>
> Cc: jejb@parisc-linux.org
> Cc: ralf@linux-mips.org
> Cc: rth@twiddle.net
> Cc: linux-alpha@vger.kernel.org
> Cc: linux-mips@linux-mips.org
> Cc: linux-parisc@vger.kernel.org
> Cc: linux-rdma@vger.kernel.org
> Cc: netdev@vger.kernel.org
> Cc: sparclinux@vger.kernel.org
> ---
>  arch/alpha/include/uapi/asm/socket.h  | 15 ++++++-
>  arch/mips/include/uapi/asm/socket.h   | 14 ++++++-
>  arch/parisc/include/uapi/asm/socket.h | 14 ++++++-
>  arch/sparc/include/uapi/asm/socket.h  | 14 ++++++-
>  include/linux/skbuff.h                | 18 +++++++++
>  include/net/sock.h                    |  1 +
>  include/uapi/asm-generic/socket.h     | 15 ++++++-
>  net/core/sock.c                       | 51 ++++++++++++++++++------
>  net/ipv4/tcp.c                        | 57 +++++++++++++++++++--------
>  net/rds/af_rds.c                      |  8 +++-
>  net/rds/recv.c                        | 16 +++++++-
>  net/socket.c                          | 47 ++++++++++++++++------
>  12 files changed, 216 insertions(+), 54 deletions(-)
>
> diff --git a/arch/alpha/include/uapi/asm/socket.h b/arch/alpha/include/uapi/asm/socket.h
> index 00e45c80e574..352e3dc0b3d9 100644
> --- a/arch/alpha/include/uapi/asm/socket.h
> +++ b/arch/alpha/include/uapi/asm/socket.h
> @@ -3,6 +3,7 @@
>  #define _UAPI_ASM_SOCKET_H
>
>  #include <asm/sockios.h>
> +#include <asm/bitsperlong.h>
>
>  /* For setsockopt(2) */
>  /*
> @@ -110,12 +111,22 @@
>
>  #define SO_TIMESTAMP_OLD         29
>  #define SO_TIMESTAMPNS_OLD       35
> +
>  #define SO_TIMESTAMPING_OLD      37
>
> +#define SO_TIMESTAMP_NEW         62
> +#define SO_TIMESTAMPNS_NEW       63
> +
>  #if !defined(__KERNEL__)
>
> -#define SO_TIMESTAMP           SO_TIMESTAMP_OLD
> -#define SO_TIMESTAMPNS         SO_TIMESTAMPNS_OLD
> +#if __BITS_PER_LONG == 64
> +#define SO_TIMESTAMP           SO_TIMESTAMP_OLD
> +#define SO_TIMESTAMPNS         SO_TIMESTAMPNS_OLD
> +#else
> +#define SO_TIMESTAMP (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMP_OLD : SO_TIMESTAMP_NEW)
> +#define SO_TIMESTAMPNS (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMPNS_OLD : SO_TIMESTAMPNS_NEW)
> +#endif
> +

This is not platform specific. Perhaps it can be deduplicated. The
interface expects callers to include <linux/socket.h>, not
<asm/socket.h> directly. So perhaps it can go there?

> -/* Similar to __sock_recv_timestamp, but does not require an skb */
> -static void tcp_recv_timestamp(struct msghdr *msg, const struct sock *sk,
> -                              struct scm_timestamping *tss)
> +static void tcp_recv_sw_timestamp(struct msghdr *msg, const struct sock *sk, struct timespec64 *ts)
>  {
> -       struct __kernel_old_timeval tv;
> -       bool has_timestamping = false;
> +       int new_tstamp = sock_flag(sk, SOCK_TSTAMP_NEW);
> +
> +       if (ts->tv_sec || ts->tv_nsec) {
> +               if (sock_flag(sk, SOCK_RCVTSTAMPNS)) {
> +                       if (new_tstamp) {
> +                               struct __kernel_timespec kts = {ts->tv_sec, ts->tv_nsec};
> +
> +                               put_cmsg(msg, SOL_SOCKET, SO_TIMESTAMPNS_NEW,
> +                                        sizeof(kts), &kts);
> +                       } else {
> +                               struct timespec ts_old = timespec64_to_timespec(*ts);
>
> -       if (tss->ts[0].tv_sec || tss->ts[0].tv_nsec) {
> -               if (sock_flag(sk, SOCK_RCVTSTAMP)) {
> -                       if (sock_flag(sk, SOCK_RCVTSTAMPNS)) {
>                                 put_cmsg(msg, SOL_SOCKET, SO_TIMESTAMPNS_OLD,
> -                                        sizeof(tss->ts[0]), &tss->ts[0]);
> +                                        sizeof(ts), &ts_old);
> +                       }
> +               } else if (sock_flag(sk, SOCK_RCVTSTAMP)) {
> +                       if (new_tstamp) {
> +                               struct __kernel_sock_timeval stv;
> +
> +                               stv.tv_sec = ts->tv_sec;
> +                               stv.tv_usec = ts->tv_nsec / 1000;
> +
> +                               put_cmsg(msg, SOL_SOCKET, SO_TIMESTAMP_NEW,
> +                                        sizeof(stv), &stv);
>                         } else {
> -                               tv.tv_sec = tss->ts[0].tv_sec;
> -                               tv.tv_usec = tss->ts[0].tv_nsec / 1000;
> +                               struct __kernel_old_timeval tv;
>
> +                               tv.tv_sec = ts->tv_sec;
> +                               tv.tv_usec = ts->tv_nsec / 1000;
>                                 put_cmsg(msg, SOL_SOCKET, SO_TIMESTAMP_OLD,
>                                          sizeof(tv), &tv);
>                         }
>                 }
> -
> -               if (sk->sk_tsflags & SOF_TIMESTAMPING_SOFTWARE)
> -                       has_timestamping = true;
> -               else
> -                       tss->ts[0] = (struct timespec) {0};
>         }
> +}
> +
> +/* Similar to __sock_recv_timestamp, but does not require an skb */
> +static void tcp_recv_timestamp(struct msghdr *msg, const struct sock *sk,
> +                              struct scm_timestamping *tss)
> +{
> +       bool has_timestamping = false;
> +       struct timespec64 ts = timespec_to_timespec64(tss->ts[0]);
> +
> +       tcp_recv_sw_timestamp(msg, sk, &ts);
> +
> +       if (sk->sk_tsflags & SOF_TIMESTAMPING_SOFTWARE)
> +               has_timestamping = true;
> +       else
> +               tss->ts[0] = (struct timespec) {0};
>
>         if (tss->ts[2].tv_sec || tss->ts[2].tv_nsec) {
>                 if (sk->sk_tsflags & SOF_TIMESTAMPING_RAW_HARDWARE)

This did not address yet the previous comments on consistency and
unnecessary code churn.

The existing logic to differentiate SO_TIMESTAMP from SO_TIMESTAMPNS
in both tcp_recv_timestamp and __sock_recv_timestamp is

  if (sock_flag(sk, SOCK_RCVTSTAMP)) {
      if (sock_flag(sk, SOCK_RCVTSTAMPNS))
          /* timespec case */
      else
          /* timeval case */
  }

A new level of nesting needs to be added to differentiate .._OLD from .._NEW.

Even if massively changing the original functions, please do so
consistently, either

  if (sock_flag(sk, SOCK_RCVTSTAMP)) {
      if (sock_flag(sk, SOCK_TSTAMP_NEW) {
          /* new code */
      } else {
          if (sock_flag(sk, SOCK_RCVTSTAMPNS))
              /* timespec case */
          else
              /* timeval case */
     }
  }

or

  if (sock_flag(sk, SOCK_RCVTSTAMP)) {
      if (sock_flag(sk, SOCK_TSTAMP_NEW) {
          if (sock_flag(sk, SOCK_RCVTSTAMPNS))
              /* new timespec case */
          else
              /* timespec case */
      } else {
           if (sock_flag(sk, SOCK_RCVTSTAMPNS))
               /* new timespec case */
           else
               /* timespec case */
      }
  }

But not one variant in one function and one in the other.

Deep nesting is hard to follow and, once again, massive code changes
(even indentations) make git blame harder to use. So where possible,
try to avoid both and just insert a branch to a new function for the
.._NEW cases instead:

  if (sock_flag(sk, SOCK_RCVTSTAMP)) {
+      if (sock_flag(sk, SOCK_TSTAMP_NEW)
+          __sock_recv_timestamp_new(..);
-      if (sock_flag(sk, SOCK_RCVTSTAMPNS))
+      else if (sock_flag(sk, SOCK_RCVTSTAMPNS))
          /* timespec case */
      else
          /* timeval case */
  }

and leave the rest of the function unmodified.

> +static void sock_recv_sw_timestamp(struct msghdr *msg, struct sock *sk,
> +                                  struct sk_buff *skb)
> +{
> +       if (sock_flag(sk, SOCK_TSTAMP_NEW)) {
> +               if (!sock_flag(sk, SOCK_RCVTSTAMPNS)) {
> +                       struct __kernel_sock_timeval tv;
> +
> +                       skb_get_new_timestamp(skb, &tv);
> +                       put_cmsg(msg, SOL_SOCKET, SO_TIMESTAMP_NEW,
> +                                sizeof(tv), &tv);
> +               } else {
> +                       struct __kernel_timespec ts;
> +
> +                       skb_get_new_timestampns(skb, &ts);
> +                       put_cmsg(msg, SOL_SOCKET, SO_TIMESTAMPNS_NEW,
> +                                sizeof(ts), &ts);
> +               }
> +       }

In relation to previous: note the different branching approach to
tcp_recv_timestamp.

> +       if (!sock_flag(sk, SOCK_RCVTSTAMPNS)) {
> +               struct __kernel_old_timeval tv;
> +
> +               skb_get_timestamp(skb, &tv);
> +               put_cmsg(msg, SOL_SOCKET, SO_TIMESTAMP_OLD,
> +                        sizeof(tv), &tv);
> +       } else {
> +               struct timespec ts;
> +
> +               skb_get_timestampns(skb, &ts);
> +               put_cmsg(msg, SOL_SOCKET, SO_TIMESTAMPNS_OLD,
> +                        sizeof(ts), &ts);
> +       }
> +}
>  /*
>   * called from sock_recv_timestamp() if sock_flag(sk, SOCK_RCVTSTAMP)
>   */
> @@ -718,19 +750,8 @@ void __sock_recv_timestamp(struct msghdr *msg, struct sock *sk,
>                 false_tstamp = 1;
>         }
>
> -       if (need_software_tstamp) {
> -               if (!sock_flag(sk, SOCK_RCVTSTAMPNS)) {
> -                       struct __kernel_old_timeval tv;
> -                       skb_get_timestamp(skb, &tv);
> -                       put_cmsg(msg, SOL_SOCKET, SO_TIMESTAMP_OLD,
> -                                sizeof(tv), &tv);
> -               } else {
> -                       struct timespec ts;
> -                       skb_get_timestampns(skb, &ts);
> -                       put_cmsg(msg, SOL_SOCKET, SO_TIMESTAMPNS_OLD,
> -                                sizeof(ts), &ts);
> -               }
> -       }
> +       if (need_software_tstamp)
> +               sock_recv_sw_timestamp(msg, sk, skb);
>
>         memset(&tss, 0, sizeof(tss));
>         if ((sk->sk_tsflags & SOF_TIMESTAMPING_SOFTWARE) &&
> --
> 2.17.1
>
