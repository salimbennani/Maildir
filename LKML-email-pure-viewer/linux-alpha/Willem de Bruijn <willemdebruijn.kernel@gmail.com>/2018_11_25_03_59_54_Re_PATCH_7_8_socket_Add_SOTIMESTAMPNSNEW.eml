Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 25 Nov 2018 14:43:24 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from FMSMGA003.fm.intel.com (fmsmga003.fm.intel.com [10.253.24.29])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 011255803C2;
	Sat, 24 Nov 2018 20:00:39 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by FMSMGA003-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 24 Nov 2018 20:00:39 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AWk3avB3qGfgw5nM7smDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segTKv/xwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJOUcZfVSNPAo2y?=
 =?us-ascii?q?YYgSAeQfIelYtJH9qlkVoBuiGQWhHv/jxiNUinL026AxzuQvERvB3AwlB98BsH?=
 =?us-ascii?q?XUrNHxNKgMVOC+0bTHwiveZP5Lwzf99YnIchInofqRWr9xf8vRyU0rFwzbi1Wf?=
 =?us-ascii?q?tJLqMCiP1uQQsmib7exgWfisi2E5sQFxpCagxsM3h4nGg4Ia0FHE9SFjzIkpIt?=
 =?us-ascii?q?24TVd2bNi5G5VTryGXL5V6Tt8mTm1ypSo3xKMKtYSmcCUJ1Jgr3R/SZv6ff4SW?=
 =?us-ascii?q?/h7uUPydLDR4iX5/Zr6zmxW//VKhx+D8UMS/zUxEoTBfktbWs3AAzxzT5daDSv?=
 =?us-ascii?q?t65kqhxzmP2B7J6u1eIkA7i7DbK5g/zb40jJYTtl7DHiDulEX3iq+ZaFkk9/C2?=
 =?us-ascii?q?5+j7ZrjqvIKQOoFqhg3kL6gjmdCzDf45PwUMR2Sb/P6z1Lzn/U33WrVKifg2n7?=
 =?us-ascii?q?HdsJDbI8Qbu6G4DxZW0ok98Ra/CSmp0NABkXkAIlNFfgyIj5LyNlHQL/D3E+2/?=
 =?us-ascii?q?j06vkDh13fDGOKPuApHXInjEirfhcq5x61RAxwor0dBf+5VUB6kFIPLyWU/+qs?=
 =?us-ascii?q?bUDxAkMwGvx+bnCdN91p4RWG6VA6+ZNr/SvkGM5u41P+aMY4oVsi7nK/c5//7u?=
 =?us-ascii?q?kWM5mVgFcKmpx5QXaWy4Ee5hI0mDYXrsn80OEWEFvgclSOzqiVuCUSNcZnqoXq?=
 =?us-ascii?q?I84C07B5yiDYvZWo+th7mB1j+hHpJKfmBGFkyMEXDweoWGXPcDdjieIsxmkjwC?=
 =?us-ascii?q?U7ihTJQs1RWvtA/81rpmIfDY+iwetZL/ytd14/ffmg019TxxF86dyX2CT3lonm?=
 =?us-ascii?q?MUQD87xLpwoVd9yleE0qh0meZYGsZR5/5SVgc6NJjcz/F1CtzoWwLBeMuJR0ii?=
 =?us-ascii?q?Qtm8HT4xSdcxyccUY0lhA9WikgzD3y2yDr8WjbOLAoY48qbd33frIcZ9xG3L1K?=
 =?us-ascii?q?0gj1kgX8tOOneqhq959wjPGYHJl1+VmLqtdaQZxCTN7nuMzXKSvEFEVw59SbjK?=
 =?us-ascii?q?UmoBZkTIt9j55lnNT7m1Cbs5NAtNzsqCKqhPat3tllhGQPbjONLDY2O+gWuwBB?=
 =?us-ascii?q?CIxq+SY4ruYWkSwCLdCE0cmQAJ4XmGLRQ+Bjumo2/GETNhD0zvbF32/el+sny7?=
 =?us-ascii?q?SFQ0wB+Mb0B607q1+xgVheGTSv8J37IEvjshpCtwHFqnw93WDN+ArRJ7fKpAed?=
 =?us-ascii?q?M9/EtH1WXBugxhP5ygKqdihkIecwV3pU/uyw97CoJakcgurXMqygVyJLmc0FNA?=
 =?us-ascii?q?cTOYwJ/xNqfWKmn04BCgdarW1kvC39aR/6cF8O44pEn7vAG1Ckoi9G1q3MNR03?=
 =?us-ascii?q?SC6ZTFEgoTXYjqXUYq6hd1vbfaYio654PKznBsNai0sjnf29MmHuclyxCgf8tB?=
 =?us-ascii?q?P6OADgP9D8oaB822Iuwwh1epdg4EPPxV9KMsP8KmauGK17KxMOdhnDKpl2JH4I?=
 =?us-ascii?q?9m30KI9ip8TPPI3pkfz/GZ2AuHSynzjFO7vs/rnoBEYCkYHnCjxij8GI5Reqpy?=
 =?us-ascii?q?cJ4RCWevP8K43M9+iIPqW3JC8l6sGUkG2M6wdRWOdVP92RBf2loNoXygnyu11D?=
 =?us-ascii?q?h0kzAvrqqC0y3C2eXidBwbOmFVQGlul0vjIY+xj9oCRkincxAplAe55Ub936Va?=
 =?us-ascii?q?pKV/I3PTQEtSZCj2MmdiX7C0trqDZc5P9ZwpvT9WUOS6fVCVVLr9rwEG3CPkGm?=
 =?us-ascii?q?tU3Co7eC2yupXlgxx6j3qQLHRpo3rDesFwxhDf6MbHRfFL3ToGRyh4iT/JCVi6?=
 =?us-ascii?q?JNSp+dSUl5HesuGxTW6hV5tTcTX1woOErie0+WpqARinlfCphtLnCRQ60TP819?=
 =?us-ascii?q?RyVSTHthH8bpPp16S7N+JqZU1oBF7668pnFYByiIowhJcM2XcEgpWZ52YIkWD2?=
 =?us-ascii?q?Md9Dw6LxcGINRSIXw97S+AXl21dsLnOTy4L5S3WS2M1hZ9ahb2MS2yI96d1KCa?=
 =?us-ascii?q?iO4LxFmyt1vkS3rQbLbfdhmTcdzOMk6GQGjOERpAot0iKdD6gXHUlZPizjjQ6E?=
 =?us-ascii?q?7t6go6VMeGagb6Kw21FgktC7A7GPuQVcWHf/epc/Ei589MR/MFTQ0HLt7oHoYs?=
 =?us-ascii?q?XfbdUWtheMiRfPk/BVKI4tlvoNnSdnJWX9vXg/x+86lxNu24y6vJOcK2Vs56+5?=
 =?us-ascii?q?Bh9YNjvoZ8Ic4D3tjKBentqI0ICrBJluBjILXJ7wR/KyDD0SrejnNxqJEDAksX?=
 =?us-ascii?q?iUA73fHQuC6Et8q3LPDoumN3WWJHkf0NVjSwORJE1ZgAAIQjo6moQ1GRytxMzk?=
 =?us-ascii?q?aE15/Cwe5kbkqhtQzeJlLxv/XX3apAi2cTc4UoSfIABV7gFf5EfVLMqe4fhoHy?=
 =?us-ascii?q?xD+p2hrQqNKnGUZghSDGEJXFCECE7nPrW0+dbA9O2YDPKkL/TSebWOtfBeV/CQ?=
 =?us-ascii?q?yJOv1Ytm4i+MNtiVMXlkFfE7wU1DXXZ2G8nCnzUPSioXlz/CbsKBpRe8/DF3od?=
 =?us-ascii?q?678PjxRA3v4o6PAaNIMdpz4xC2nbuDN+mIiSZ5NzlY15AMxXzJyLQF314SkSZu?=
 =?us-ascii?q?dzazHrQaqC7NV7ndmqtWDx4ddiNyO9FE76M63glRJ8Hbjsn52aJ/jv4wE11FT0?=
 =?us-ascii?q?Dumtm1ZcwWJGGwLEnIBFuQO7ScOzLKw9v7Yae9SbBLiOVUthuwuSuUEkP5PzSD?=
 =?us-ascii?q?kSXpWA6rMe1WkC6bOxlespmnchlxEWjjUM7mahqjPd9rjD02xKc4iW/QOWEAMT?=
 =?us-ascii?q?hzbUVNo6aU7SNZhPV/BmNA4mBkLemChyaW8e3YJowKvvtsByR+j/ha72giy7tJ?=
 =?us-ascii?q?8CFEQ+R4mSvIod5oplGmk++PxSJmURpOsDlLgo2LsF5mOaXY8JlARHnF8AgM7W?=
 =?us-ascii?q?WWFxQFud9lBsfztKBXz9ic3J70fRtP/srdtecdAcHRIcSGeC4tPBfxEXjXARED?=
 =?us-ascii?q?QDqDOmTWhkgbm/aXoC67tJ8//6ftnJ4DT/dXWRQfDO4bCEItSMMDJJN6Wz8pm6?=
 =?us-ascii?q?SGjcwOo3mzth/cQO1Vu5nGUrSZBvC5e2XRtqVNexZdmeCwFo8ULICunhU6MlQ?=
 =?us-ascii?q?=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AbAABjHfpbh0O0hNFjHgEGBwaBUQkLA?=
 =?us-ascii?q?YNrFBODeYN7kByCDRSJCY4fgXMsEwGIWiI0CQ0BAwEBAQEBAQIBEwEBAQgNCQg?=
 =?us-ascii?q?pIwyCNiQBgmEBAQEBAgEBAiAEGQEbHQEDAQEJAQEFBQsNAgImAgIDHgEBEQEFA?=
 =?us-ascii?q?RwGEwWDHIFpAQMNCAWZSDyLDXwWBQEXgncFhCwKGScNWoE3AgYSeYp+ghaEI4J?=
 =?us-ascii?q?WhSyCVwKLEYR/j0QuBwKOBIMrGJEILI4hiVQwgSWCDU0jgQGCO4IbDBeDSopwI?=
 =?us-ascii?q?TOBBQEBjF4BAQ?=
X-IPAS-Result: =?us-ascii?q?A0AbAABjHfpbh0O0hNFjHgEGBwaBUQkLAYNrFBODeYN7kBy?=
 =?us-ascii?q?CDRSJCY4fgXMsEwGIWiI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmEBA?=
 =?us-ascii?q?QEBAgEBAiAEGQEbHQEDAQEJAQEFBQsNAgImAgIDHgEBEQEFARwGEwWDHIFpAQM?=
 =?us-ascii?q?NCAWZSDyLDXwWBQEXgncFhCwKGScNWoE3AgYSeYp+ghaEI4JWhSyCVwKLEYR/j?=
 =?us-ascii?q?0QuBwKOBIMrGJEILI4hiVQwgSWCDU0jgQGCO4IbDBeDSopwITOBBQEBjF4BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,276,1539673200"; 
   d="scan'208";a="139431356"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 24 Nov 2018 20:00:37 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727224AbeKYOul (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sun, 25 Nov 2018 09:50:41 -0500
Received: from mail-ed1-f65.google.com ([209.85.208.65]:34267 "EHLO
        mail-ed1-f65.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726514AbeKYOuk (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sun, 25 Nov 2018 09:50:40 -0500
Received: by mail-ed1-f65.google.com with SMTP id b3so13125405ede.1;
        Sat, 24 Nov 2018 20:00:32 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=b0vV7/EObBCO4v9Rbbv3QtqSUcOg+1e5F/clF9P9EI4=;
        b=pIFLmXiOKG8nxFxCUFxvKfEsTNbZUHTZXYoKBOrkZPzuyKP3vZizA9/vXUEXNoK5Mj
         TyAUoBqlJFo76mnp9yIaolSyH/fqmtG9AIN3C3M3i4Z9YpQhcq2K4hozDjtKi1phO369
         6i+abB2q7vZ/H0ZRZW4GAbnOueijLaknYZj+0EL95O98J7N9IYCZCwkWSy6gPE2JR9js
         pEBQW81eY6TmwYFICsbHx5bpSlelLJVTjvHSXRYGB34x26GgALYs7dDRhyVUt1AJmmbD
         6cdec+Fwb5ff4sFOacX1Q0lCYJZ5/54aX+XcIhf3Mb7E0EddjR569wVT63ZtB/8Bx3wy
         FB2Q==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=b0vV7/EObBCO4v9Rbbv3QtqSUcOg+1e5F/clF9P9EI4=;
        b=jKzkmnymVsWHkbe0F4EKjQ7rQhl1ee9vjKDQcHVNZrItq9i15yMCQ0nobCZ6ZWQw2d
         EG/+TU0oqiYXjYGARp0p7L3ZlMooebjKcKqSlU0NGmF7XNaXFwSVeQ1cjSD5t/IOLTgO
         8P/KWebvoXGjS5Qjc/Zrd3bCD3l3tu+saspj7s9YZQO4iiAAm7mBZdnuOxee/Ki5v07m
         W70IK+mDiE8mEJV6IDSC6vqxbmTbdko6nqIF8T9iQal5tS536KnTYD8HxLFMLcVR0Htv
         OsVPp1r1Cmh++d0cfHQLROnzAeW2yUFSn16w+SZpE63hxm0D0apzlIAFDZVInRzdfvtC
         3Rhw==
X-Gm-Message-State: AA+aEWb9uKL0uMlAoAmyUskglbNgmvcwTguS1A2uKizjwD0gOEml9sZW
        6M0SCfYEEq53dA0+z2QHdLdUQdDruLEQRQ0dA/o=
X-Google-Smtp-Source: AFSGD/WI0FGh0FBBjGUts0gY68Rvm3EjIPfQ21X8KClomKghX3Yp59UWE2OWagkBa1JFLKtgiQKeCi/4MBNGoy50yM0=
X-Received: by 2002:a50:a517:: with SMTP id y23mr18600029edb.219.1543118431777;
 Sat, 24 Nov 2018 20:00:31 -0800 (PST)
MIME-Version: 1.0
References: <20181124022035.17519-1-deepa.kernel@gmail.com> <20181124022035.17519-8-deepa.kernel@gmail.com>
In-Reply-To: <20181124022035.17519-8-deepa.kernel@gmail.com>
From: Willem de Bruijn <willemdebruijn.kernel@gmail.com>
Date: Sat, 24 Nov 2018 22:59:54 -0500
Message-ID: <CAF=yD-K=ZLZ_S=Y6YnhvvkfKQS=21ujwiGd7+JB9yDMtiX_9hg@mail.gmail.com>
Subject: Re: [PATCH 7/8] socket: Add SO_TIMESTAMP[NS]_NEW
To: Deepa Dinamani <deepa.kernel@gmail.com>
Cc: David Miller <davem@davemloft.net>,
        LKML <linux-kernel@vger.kernel.org>,
        Network Development <netdev@vger.kernel.org>,
        Al Viro <viro@zeniv.linux.org.uk>,
        Arnd Bergmann <arnd@arndb.de>,
        y2038 Mailman List <y2038@lists.linaro.org>,
        jejb@parisc-linux.org, ralf@linux-mips.org, rth@twiddle.net,
        linux-alpha@vger.kernel.org, linux-mips@linux-mips.org,
        linux-parisc@vger.kernel.org, linux-rdma@vger.kernel.org,
        sparclinux@vger.kernel.org
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Sat, Nov 24, 2018 at 3:58 AM Deepa Dinamani <deepa.kernel@gmail.com> wrote:
>
> Add SO_TIMESTAMP_NEW and SO_TIMESTAMPNS_NEW variants of
> socket timestamp options.
> These are the y2038 safe versions of the SO_TIMESTAMP_OLD
> and SO_TIMESTAMPNS_OLD for all architectures.
>
> Note that the format of scm_timestamping.ts[0] is not changed
> in this patch.
>
> Signed-off-by: Deepa Dinamani <deepa.kernel@gmail.com>
> Cc: jejb@parisc-linux.org
> Cc: ralf@linux-mips.org
> Cc: rth@twiddle.net
> Cc: linux-alpha@vger.kernel.org
> Cc: linux-mips@linux-mips.org
> Cc: linux-parisc@vger.kernel.org
> Cc: linux-rdma@vger.kernel.org
> Cc: netdev@vger.kernel.org
> Cc: sparclinux@vger.kernel.org
> ---

> diff --git a/include/net/sock.h b/include/net/sock.h
> index 8143c4c1a49d..9edf909dc176 100644
> --- a/include/net/sock.h
> +++ b/include/net/sock.h
> @@ -801,6 +801,7 @@ enum sock_flags {
>         SOCK_RCU_FREE, /* wait rcu grace period in sk_destruct() */
>         SOCK_TXTIME,
>         SOCK_XDP, /* XDP is attached */
> +       SOCK_TSTAMP_NEW, /* Indicates 64 bit timestamps always */

sk_flags is getting exhausted. Commit b9f40e21ef42 ("net-timestamp:
move timestamp flags out of sk_flags") added a new u16 sk_tsflags
specifically for timestamps. That may be a better choice here, too.

> diff --git a/net/core/sock.c b/net/core/sock.c
> index e60036618205..7b485dfaa400 100644
> --- a/net/core/sock.c
> +++ b/net/core/sock.c
> @@ -652,15 +652,23 @@ static void setsockopt_timestamp(struct sock *sk, int type, int val)
>         if (!val) {
>                 sock_reset_flag(sk, SOCK_RCVTSTAMP);
>                 sock_reset_flag(sk, SOCK_RCVTSTAMPNS);
> +               sock_reset_flag(sk, SOCK_TSTAMP_NEW);
>                 return;
>         }
>
> +       if (type == SO_TIMESTAMP_NEW || type == SO_TIMESTAMPNS_NEW)
> +               sock_set_flag(sk, SOCK_TSTAMP_NEW);
> +       else
> +               sock_reset_flag(sk, SOCK_TSTAMP_NEW);
> +

if adding a boolean whether the socket uses new or old-style
timestamps, perhaps fail hard if a process tries to set a new-style
option while an old-style is already set and vice versa. Also include
SO_TIMESTAMPING_NEW as it toggles the same option.

> diff --git a/net/socket.c b/net/socket.c
> index d3defba55547..9abeb6bc9cfe 100644
> --- a/net/socket.c
> +++ b/net/socket.c
> @@ -699,6 +699,38 @@ static void put_ts_pktinfo(struct msghdr *msg, struct sk_buff *skb)
>                  sizeof(ts_pktinfo), &ts_pktinfo);
>  }
>
> +static void sock_recv_sw_timestamp(struct msghdr *msg, struct sock *sk,
> +                                  struct sk_buff *skb)
> +{
> +       if (sock_flag(sk, SOCK_TSTAMP_NEW)) {
> +               if (!sock_flag(sk, SOCK_RCVTSTAMPNS)) {
> +                       struct sock_timeval tv;
> +
> +                       skb_get_new_timestamp(skb, &tv);
> +                       put_cmsg(msg, SOL_SOCKET, SO_TIMESTAMP_NEW,
> +                                sizeof(tv), &tv);
> +               } else {
> +                       struct __kernel_timespec ts;
> +
> +                       skb_get_new_timestampns(skb, &ts);
> +                       put_cmsg(msg, SOL_SOCKET, SO_TIMESTAMPNS_NEW,
> +                                sizeof(ts), &ts);
> +               }
> +       }
> +       if (!sock_flag(sk, SOCK_RCVTSTAMPNS)) {
> +               struct __kernel_old_timeval tv;
> +
> +               skb_get_timestamp(skb, &tv);
> +               put_cmsg(msg, SOL_SOCKET, SO_TIMESTAMP_OLD,
> +                        sizeof(tv), &tv);
> +       } else {
> +               struct timespec ts;
> +
> +               skb_get_timestampns(skb, &ts);
> +               put_cmsg(msg, SOL_SOCKET, SO_TIMESTAMPNS_OLD,
> +                        sizeof(ts), &ts);
> +       }
> +}
>  /*
>   * called from sock_recv_timestamp() if sock_flag(sk, SOCK_RCVTSTAMP)
>   * or sock_flag(sk, SOCK_RCVTSTAMPNS)
> @@ -719,19 +751,8 @@ void __sock_recv_timestamp(struct msghdr *msg, struct sock *sk,
>                 false_tstamp = 1;
>         }
> -       if (need_software_tstamp) {

Considerably less code churn if adding __sock_recv_timestamp_2038 and
calling that here:

                   if (sock_flag(sk, SOCK_TSTAMP_NEW))
                           __sock_recv_timestamp_2038(msg, sk, skb);
                   else if ...

Same for the tcp case above, really, and in the case of the next patch
for SO_TIMESTAMPING_NEW


> -               if (!sock_flag(sk, SOCK_RCVTSTAMPNS)) {
> -                       struct __kernel_old_timeval tv;
> -                       skb_get_timestamp(skb, &tv);
> -                       put_cmsg(msg, SOL_SOCKET, SO_TIMESTAMP_OLD,
> -                                sizeof(tv), &tv);
> -               } else {
> -                       struct timespec ts;
> -                       skb_get_timestampns(skb, &ts);
> -                       put_cmsg(msg, SOL_SOCKET, SO_TIMESTAMPNS_OLD,
> -                                sizeof(ts), &ts);
> -               }
> -       }


> +       if (need_software_tstamp)
> +               sock_recv_sw_timestamp(msg, sk, skb);
>
>         memset(&tss, 0, sizeof(tss));
>         if ((sk->sk_tsflags & SOF_TIMESTAMPING_SOFTWARE) &&
> --
> 2.17.1
>
