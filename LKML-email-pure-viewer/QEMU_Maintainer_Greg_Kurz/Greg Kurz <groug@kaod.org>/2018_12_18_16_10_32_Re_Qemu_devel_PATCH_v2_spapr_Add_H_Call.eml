Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 08:39:59 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id A509F58055F
	for <like.xu@linux.intel.com>; Tue, 18 Dec 2018 08:11:11 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga003-1.jf.intel.com with ESMTP; 18 Dec 2018 08:11:11 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AV799KByg3rUkEyTXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?2u4eIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CS2RPXthfWS9DDYOy?=
 =?us-ascii?q?aIUAAPYOM+lFoYnlpVYArxSzCRSiCe/z1DBInWT73bE43uk7DQ3LxhAsE8wIvX?=
 =?us-ascii?q?/JrNv1LqASUeWtwafJ1zXMcfxW0ir45ojVaBAgoOyHULV/ccrLzkkvCgzFg06T?=
 =?us-ascii?q?qYP/ODOay/4Bs2+B7+pvTO+ijXMspQJpojW32MsglorEipgIxlzZ9ih12pg5KN?=
 =?us-ascii?q?O4RUJhfNKpEoNcuzyeOoZ2WM8uXXxktDggxrEYvZO3ZjUGxZUmyhPZdveJaZKH?=
 =?us-ascii?q?4gj5W+aUOTp4hGxqeLa4hxuq9Uigy/b8VtWv0FpQoSpFlMTMumoK1xzJ5ciLUv?=
 =?us-ascii?q?p9/kG/1jaTzw3f9P1ILEMumabGNpIswaQ8moQdvEnDBCP6hUf7gLeTdko+++io?=
 =?us-ascii?q?7+rnYq/hpp+ZL4J0kx/xMqEzmsCmHOs3LBYOUHaf+eilz7Lj+lD5QLNWgfIoia?=
 =?us-ascii?q?nVt5TaJcUYpqGnGQNU3Zsj5g67Dzen1tQYgHYGIEhEeBKBk4jmJVXOLOrkAve4?=
 =?us-ascii?q?hlShizFrx/fAPr3uBJXNM2LPkLD7fbZy80Jc0hY8zchD55JIDbEMOPbzWk7ytN?=
 =?us-ascii?q?PGFBM4PBG0zv3jCNV80IMeRG2ODrWYMKPUrV+H+OYvL/OQa48SvTauY8Uj/OPk?=
 =?us-ascii?q?2H8lhUcGL+7u2ZoMdGv+GPNgLEOEJ332jZAEGGYOuwM4C+vylFyFVyUUfnu3Qu?=
 =?us-ascii?q?cw6y82DNGbC5zeTNWoib2FwCDpB5BTeyVKB06BFTLyepyZVuwQQCSVJMBnj3oD?=
 =?us-ascii?q?T7f2UJIr1xylqFrnzaF6JPHf4CwSuMHf041R7vDJmBcuvQJ1EcWQySnZS391gG?=
 =?us-ascii?q?IFXRcs0ax/qFA7wVCGh/tWmftdQPNJ6vwBcRogJ9aIwPZ9Ft/aWQvGcpGOUlnw?=
 =?us-ascii?q?EYbuOi04Ut9km4xGWE16Adj3y0mbhyc=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BTAAAeGxlchxHrdtBkHQEBBQEHBQGBU?=
 =?us-ascii?q?gcBCwGBMIJijHSLG1IGgTV8iCeJOoR9gXMVGBSHHSI1CA0BAwEBAQEBAQIBEwE?=
 =?us-ascii?q?BAQoLCQgbDi+CNgUCAxoBBoJcAQICAQECJBMMCikDAgEBAgYBAQoOExMKCAMBC?=
 =?us-ascii?q?y4aBhMFgx2BdAUIAQMBqEozijGMPxd4gQeBEYJdNYRbhgUCkBmRCwmKUocCDBi?=
 =?us-ascii?q?BXY96LIodjyqBSAKCCjMaCCgIgyeCJxeOHnGBBAOLFFWBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0BTAAAeGxlchxHrdtBkHQEBBQEHBQGBUgcBCwGBMIJijHS?=
 =?us-ascii?q?LG1IGgTV8iCeJOoR9gXMVGBSHHSI1CA0BAwEBAQEBAQIBEwEBAQoLCQgbDi+CN?=
 =?us-ascii?q?gUCAxoBBoJcAQICAQECJBMMCikDAgEBAgYBAQoOExMKCAMBCy4aBhMFgx2BdAU?=
 =?us-ascii?q?IAQMBqEozijGMPxd4gQeBEYJdNYRbhgUCkBmRCwmKUocCDBiBXY96LIodjyqBS?=
 =?us-ascii?q?AKCCjMaCCgIgyeCJxeOHnGBBAOLFFWBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,368,1539673200"; 
   d="scan'208";a="57968066"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 18 Dec 2018 08:11:10 -0800
Received: from localhost ([::1]:54804 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gZHxe-0004JO-0w
	for like.xu@linux.intel.com; Tue, 18 Dec 2018 11:11:10 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:53496)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <groug@kaod.org>) id 1gZHxG-0004Ea-3r
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 11:10:52 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <groug@kaod.org>) id 1gZHxC-0000y5-5N
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 11:10:46 -0500
Received: from 10.mo68.mail-out.ovh.net ([46.105.79.203]:36852)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <groug@kaod.org>) id 1gZHxB-0000xG-TR
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 11:10:42 -0500
Received: from player731.ha.ovh.net (unknown [10.109.160.93])
	by mo68.mail-out.ovh.net (Postfix) with ESMTP id 4A26510667C
	for <qemu-devel@nongnu.org>; Tue, 18 Dec 2018 17:10:40 +0100 (CET)
Received: from kaod.org (deibp9eh1--blueice1n4.emea.ibm.com [195.212.29.166])
	(Authenticated sender: groug@kaod.org)
	by player731.ha.ovh.net (Postfix) with ESMTPSA id 65EC2DB28EF;
	Tue, 18 Dec 2018 16:10:34 +0000 (UTC)
Date: Tue, 18 Dec 2018 17:10:32 +0100
From: Greg Kurz <groug@kaod.org>
To: Laurent Vivier <lvivier@redhat.com>
Message-ID: <20181218171032.308026c5@bahia.lan>
In-Reply-To: <20181218131829.5135-1-lvivier@redhat.com>
References: <20181218131829.5135-1-lvivier@redhat.com>
X-Mailer: Claws Mail 3.16.0 (GTK+ 2.24.32; x86_64-redhat-linux-gnu)
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
X-Ovh-Tracer-Id: 2017612637041367334
X-VR-SPAMSTATE: OK
X-VR-SPAMSCORE: -100
X-VR-SPAMCAUSE: gggruggvucftvghtrhhoucdtuddrgedtkedrudeikedgfeegucetufdoteggodetrfdotffvucfrrhhofhhilhgvmecuqfggjfdpvefjgfevmfevgfenuceurghilhhouhhtmecuhedttdenucesvcftvggtihhpihgvnhhtshculddquddttddm
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 46.105.79.203
Subject: Re: [Qemu-devel] [PATCH v2] spapr: Add H-Call
 H_HOME_NODE_ASSOCIATIVITY
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: qemu-ppc@nongnu.org, qemu-devel@nongnu.org,
	David Gibson <david@gibson.dropbear.id.au>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Tue, 18 Dec 2018 14:18:29 +0100
Laurent Vivier <lvivier@redhat.com> wrote:

> H_HOME_NODE_ASSOCIATIVITY H-Call returns the associativity domain
> designation associated with the identifier input parameter
> 
> This fixes a crash when we try to hotplug a CPU in memory-less and
> CPU-less numa node. In this case, the kernel tries to online the
> node, but without the information provided by this h-call, the node id,
> it cannot and the CPU is started while the node is not onlined.
> 
> It also removes the warning message from the kernel:
>   VPHN is not supported. Disabling polling..
> 
> Signed-off-by: Laurent Vivier <lvivier@redhat.com>
> ---
> 
> Notes:
>     v2:
>       add hcall-vphn to ibm,hypertas-functions
>       correctly check flags
>       return H_FUNCTION rather than H_PARAMETER
>       update description
> 
>  hw/ppc/spapr.c         |  1 +
>  hw/ppc/spapr_hcall.c   | 39 +++++++++++++++++++++++++++++++++++++++
>  include/hw/ppc/spapr.h |  1 +
>  3 files changed, 41 insertions(+)
> 
> diff --git a/hw/ppc/spapr.c b/hw/ppc/spapr.c
> index 7a0ab2da54..d961272c8a 100644
> --- a/hw/ppc/spapr.c
> +++ b/hw/ppc/spapr.c
> @@ -1049,6 +1049,7 @@ static void spapr_dt_rtas(sPAPRMachineState *spapr, void *fdt)
>      add_str(hypertas, "hcall-sprg0");
>      add_str(hypertas, "hcall-copy");
>      add_str(hypertas, "hcall-debug");
> +    add_str(hypertas, "hcall-vphn");
>      add_str(qemu_hypertas, "hcall-memop1");
>  
>      if (!kvm_enabled() || kvmppc_spapr_use_multitce()) {
> diff --git a/hw/ppc/spapr_hcall.c b/hw/ppc/spapr_hcall.c
> index 78fecc8fe9..a48adb3cfb 100644
> --- a/hw/ppc/spapr_hcall.c
> +++ b/hw/ppc/spapr_hcall.c
> @@ -1663,6 +1663,41 @@ static target_ulong h_client_architecture_support(PowerPCCPU *cpu,
>      return H_SUCCESS;
>  }
>  
> +static target_ulong h_home_node_associativity(PowerPCCPU *cpu,
> +                                              sPAPRMachineState *spapr,
> +                                              target_ulong opcode,
> +                                              target_ulong *args)
> +{
> +    target_ulong flags = args[0];
> +    target_ulong procno = args[1];
> +    PowerPCCPU *tcpu;
> +    int idx;
> +
> +    /* only support procno from H_REGISTER_VPA */
> +    if (flags != 0x1) {
> +        return H_FUNCTION;
> +    }
> +
> +    tcpu = spapr_find_cpu(procno);
> +    if (tcpu == NULL) {
> +        return H_P2;
> +    }
> +
> +    /* sequence is the same as in the "ibm,associativity" property */
> +
> +    idx = 0;
> +#define ASSOCIATIVITY(a, b) (((uint64_t)a << 32) | ((uint64_t)b & 0xffffffff))

It would be safer to have parens around a and b.

> +    args[idx++] = ASSOCIATIVITY(0, 0);
> +    args[idx++] = ASSOCIATIVITY(0, tcpu->node_id);
> +    args[idx++] = ASSOCIATIVITY(procno, -1);

The returned values are supposed to be a stream of mixed 16-bit and 32-bit
values, _insanely_ encoded as follows:

The high order bit of each 2 byte field is a length specifier:
 1: The associativity domain number is contained in the low order 15 bits of the
    field,
 0: The associativity domain number is contained in the low order 15 bits of the
    current field concatenated with the 16 bits of the next sequential field)

ie, usable values are either 31-bit, either 15-bit.

I don't see such an encoding taking place in the code... this may cause
problems if node_id >= 0x80000000: the guest will only get bits 30:16,
and consider bits 15:0 to belong to the next field, which may in turn
be considered as a 15-bit value or combined with the top 16-bits of
procno to form a bogus 31-bit value... :-\

I guess it is okay to go with the "long" variant for everyone since you
only have 5 of them, but you could also use the "short" variant when
values are < 0x10000.

And in any case, it seems we have to limit node ids and vcpu ids to be
31 bits if we're to support this interface.

> +    for ( ; idx < 6; idx++) {
> +        args[idx] = -1;
> +    }
> +#undef ASSOCIATIVITY
> +
> +    return H_SUCCESS;
> +}
> +
>  static target_ulong h_get_cpu_characteristics(PowerPCCPU *cpu,
>                                                sPAPRMachineState *spapr,
>                                                target_ulong opcode,
> @@ -1864,6 +1899,10 @@ static void hypercall_register_types(void)
>      spapr_register_hypercall(KVMPPC_H_CAS, h_client_architecture_support);
>  
>      spapr_register_hypercall(KVMPPC_H_UPDATE_DT, h_update_dt);
> +
> +    /* Virtual Processor Home Node */
> +    spapr_register_hypercall(H_HOME_NODE_ASSOCIATIVITY,
> +                             h_home_node_associativity);
>  }
>  
>  type_init(hypercall_register_types)
> diff --git a/include/hw/ppc/spapr.h b/include/hw/ppc/spapr.h
> index b1a2515107..eb13e2b614 100644
> --- a/include/hw/ppc/spapr.h
> +++ b/include/hw/ppc/spapr.h
> @@ -447,6 +447,7 @@ struct sPAPRMachineState {
>  #define H_GET_EM_PARMS          0x2B8
>  #define H_SET_MPP               0x2D0
>  #define H_GET_MPP               0x2D4
> +#define H_HOME_NODE_ASSOCIATIVITY 0x2EC
>  #define H_XIRR_X                0x2FC
>  #define H_RANDOM                0x300
>  #define H_SET_MODE              0x31C


