Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 08:53:09 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id E1C89580380
	for <like.xu@linux.intel.com>; Wed, 12 Dec 2018 08:55:23 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga004-1.jf.intel.com with ESMTP; 12 Dec 2018 08:55:23 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AHi5pIx9V1RcjRf9uRHKM819IXTAuvvDOBiVQ1KB2?=
 =?us-ascii?q?2uscTK2v8tzYMVDF4r011RmVBdWds6oMotGVmpioYXYH75eFvSJKW713fDhBt/?=
 =?us-ascii?q?8rmRc9CtWOE0zxIa2iRSU7GMNfSA0tpCnjYgBaF8nkelLdvGC54yIMFRXjLwp1?=
 =?us-ascii?q?Ifn+FpLPg8it2O2+557ebx9UiDahfLh/MAi4oQLNu8cMnIBsMLwxyhzHontJf+?=
 =?us-ascii?q?RZ22ZlLk+Nkhj/+8m94odt/zxftPw9+cFAV776f7kjQrxDEDsmKWE169b1uhTF?=
 =?us-ascii?q?UACC+2ETUmQSkhpPHgjF8BT3VYr/vyfmquZw3jSRMNboRr4oRzut86ZrSAfpiC?=
 =?us-ascii?q?gZMT457HrXgdF0gK5CvR6tuwBzz4vSbYqINvRxY7ndcMsUS2RBQMhfVC5OAo27?=
 =?us-ascii?q?YYQAE+UPIP5Yoov/qVYBsBezCxWgC/30yjJTiX/6wbc33v47HA3awgAtGc8Fvn?=
 =?us-ascii?q?TOrNXyMacfSeG7zLPWwjXMcvhY3Cr96JLJcxs8pvyMUqhwcc3MyUkgDA7FjU+f?=
 =?us-ascii?q?qYv4MD+P0eQNqWeb4vNmWOmyhWAnrARxrSKuxscqkoTJiYMVykzE9SVk24k5P8?=
 =?us-ascii?q?G3SEl+YdOiDZBetDmaOpNoTs8+QGxkojs2xqAFtJKhYiQHxpQqywTCZ/GFa4SF?=
 =?us-ascii?q?4QzvWPyPLTp4in9pYqyziwqx/ES61OHxWcq53VBXpSRfiNbMrGoC1xnL58iHVP?=
 =?us-ascii?q?R9+kCh1C6L1wDS8eFEPVs0mbDUK54n3748jJ0TsV7MHiPumUX2irGZdlk89+S2?=
 =?us-ascii?q?9+jqYa/qqoKBO4J3kA3yLKojl8ylDeglMAUCR22b9v691L3n8035WrJKjvgun6?=
 =?us-ascii?q?nArp/aINkbqrekDABLzIYs9RK/Ay6939QfgHkHKk5Kdwycj4TuP1HOIfP4Auml?=
 =?us-ascii?q?j1WjjTdm3/TGPrznApXQIXnPirbhfbBh60FCzAo/18xQ55VRCrwaJvLzXUnxtN?=
 =?us-ascii?q?PeDh8kKQC0xPznCNpl2oMERW2PGrOZML/VsVKQ4uIvIuqMa5EPtDfyNvgo/Pru?=
 =?us-ascii?q?jX4/mV8Acqilx5oXaHakHvt4J0WVe2bjgtAEETRCgwwlUea/iEGeSSUBIDG2Xr?=
 =?us-ascii?q?kg/Xc9D4SpC5qFQZqix7mI3SO+F5sRYXhaC1eKCjDxeoCZHvsBdi+WcfJniSEO?=
 =?us-ascii?q?AL2oSos90kO3uQrnjrZqMOfQvzcVrI/uz8Rd4erVmhcvsztuAJOGzmuPQmpoy3?=
 =?us-ascii?q?4OXCI8x6tloEZwmWuEhIRxnf1UXfNS7ehOVE9uOZfCzuBSBNH4QQXHONuTT06s?=
 =?us-ascii?q?T9y8RzA9CNsslYwgeUF4Tvq4gx+L/DewEfdBmKaMGZMc8avb0z72PckrmCWO77?=
 =?us-ascii?q?Uok1RzGpgHDmahnKMqslGLX4M=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AjAAARPBFcmBHrdtBkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgTCBOYEpjBRfizNSBoE1iSGOMhSBYQEMBRgLCYQ7A4MAIjQJDQE?=
 =?us-ascii?q?DAQEBAQEBAgETAQEBAQEICwsGGw4jDII2BQIDGgEGglsBAQEBAgEBAiQfCikDA?=
 =?us-ascii?q?gEBAgYBAQoSBgkTCggDAQsuDA4GEwWDHAGBdAUIAQMBCqcaM4QtAYVvCgWCbYl?=
 =?us-ascii?q?PF3iBB4ERghR+gx4CgUqFcgKJOZdTCYcLikELGI5NgnmDBIsZiyKBRoIOMxoIK?=
 =?us-ascii?q?AiDJ4InFxKDOIpUcYEEA4sFgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AjAAARPBFcmBHrdtBkHAEBAQQBAQcEAQGBUQcBAQsBgTC?=
 =?us-ascii?q?BOYEpjBRfizNSBoE1iSGOMhSBYQEMBRgLCYQ7A4MAIjQJDQEDAQEBAQEBAgETA?=
 =?us-ascii?q?QEBAQEICwsGGw4jDII2BQIDGgEGglsBAQEBAgEBAiQfCikDAgEBAgYBAQoSBgk?=
 =?us-ascii?q?TCggDAQsuDA4GEwWDHAGBdAUIAQMBCqcaM4QtAYVvCgWCbYlPF3iBB4ERghR+g?=
 =?us-ascii?q?x4CgUqFcgKJOZdTCYcLikELGI5NgnmDBIsZiyKBRoIOMxoIKAiDJ4InFxKDOIp?=
 =?us-ascii?q?UcYEEA4sFgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,345,1539673200"; 
   d="scan'208";a="57188389"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 12 Dec 2018 08:55:22 -0800
Received: from localhost ([::1]:46107 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gX7n8-0007S9-8a
	for like.xu@linux.intel.com; Wed, 12 Dec 2018 11:55:22 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:52437)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <groug@kaod.org>) id 1gX7mx-0007PH-Bl
	for qemu-devel@nongnu.org; Wed, 12 Dec 2018 11:55:13 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <groug@kaod.org>) id 1gX7mp-0003Ee-Cr
	for qemu-devel@nongnu.org; Wed, 12 Dec 2018 11:55:08 -0500
Received: from 20.mo3.mail-out.ovh.net ([178.33.47.94]:55672)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <groug@kaod.org>) id 1gX7mj-0002oT-Iv
	for qemu-devel@nongnu.org; Wed, 12 Dec 2018 11:54:59 -0500
Received: from player799.ha.ovh.net (unknown [10.109.160.39])
	by mo3.mail-out.ovh.net (Postfix) with ESMTP id 2A8421ED0A6
	for <qemu-devel@nongnu.org>; Wed, 12 Dec 2018 17:54:49 +0100 (CET)
Received: from kaod.org (lns-bzn-46-82-253-208-248.adsl.proxad.net
	[82.253.208.248]) (Authenticated sender: groug@kaod.org)
	by player799.ha.ovh.net (Postfix) with ESMTPSA id 7C141C6D776;
	Wed, 12 Dec 2018 16:54:42 +0000 (UTC)
Date: Wed, 12 Dec 2018 17:54:41 +0100
From: Greg Kurz <groug@kaod.org>
To: David Gibson <david@gibson.dropbear.id.au>
Message-ID: <20181212175441.382f36f0@bahia.lab.toulouse-stg.fr.ibm.com>
In-Reply-To: <20181212002955.GD2719@umbus.fritz.box>
References: <20181108014406.29818-1-aik@ozlabs.ru>
	<20181111191047.7af39551@bahia.lan>
	<efc67974-4118-7877-6f8d-ce0a09cb9999@ozlabs.ru>
	<20181210062043.GS4261@umbus.fritz.box>
	<20181210103032.088de905@bahia.lab.toulouse-stg.fr.ibm.com>
	<d363fae5-d968-0bfb-0c27-adbbe427f642@ozlabs.ru>
	<20181211105559.76040a70@bahia.lab.toulouse-stg.fr.ibm.com>
	<20181212002955.GD2719@umbus.fritz.box>
X-Mailer: Claws Mail 3.16.0 (GTK+ 2.24.32; x86_64-redhat-linux-gnu)
MIME-Version: 1.0
Content-Type: multipart/signed; micalg=pgp-sha256;
	boundary="Sig_/u/PCgCC_taRl/0JJdq7gwq=";
	protocol="application/pgp-signature"
X-Ovh-Tracer-Id: 4420564511201270246
X-VR-SPAMSTATE: OK
X-VR-SPAMSCORE: -100
X-VR-SPAMCAUSE: gggruggvucftvghtrhhoucdtuddrgedtkedrudehtddgtddvucetufdoteggodetrfdotffvucfrrhhofhhilhgvmecuqfggjfdpvefjgfevmfevgfenuceurghilhhouhhtmecuhedttdenucesvcftvggtihhpihgvnhhtshculddquddttddm
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 178.33.47.94
Subject: Re: [Qemu-devel] [Qemu-ppc] [PATCH qemu] ppc/spapr: Receive and
 store device tree blob from SLOF
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Alexey Kardashevskiy <aik@ozlabs.ru>, qemu-ppc@nongnu.org,
	qemu-devel@nongnu.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

--Sig_/u/PCgCC_taRl/0JJdq7gwq=
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: quoted-printable

On Wed, 12 Dec 2018 11:29:55 +1100
David Gibson <david@gibson.dropbear.id.au> wrote:

> On Tue, Dec 11, 2018 at 10:55:59AM +0100, Greg Kurz wrote:
> > On Tue, 11 Dec 2018 14:53:32 +1100
> > Alexey Kardashevskiy <aik@ozlabs.ru> wrote:
> >  =20
> > > On 10/12/2018 20:30, Greg Kurz wrote: =20
> > > > On Mon, 10 Dec 2018 17:20:43 +1100
> > > > David Gibson <david@gibson.dropbear.id.au> wrote:
> > > >    =20
> > > >> On Mon, Nov 12, 2018 at 03:12:26PM +1100, Alexey Kardashevskiy wro=
te:   =20
> > > >>>
> > > >>>
> > > >>> On 12/11/2018 05:10, Greg Kurz wrote:     =20
> > > >>>> Hi Alexey,
> > > >>>>
> > > >>>> Just a few remarks. See below.
> > > >>>>
> > > >>>> On Thu,  8 Nov 2018 12:44:06 +1100
> > > >>>> Alexey Kardashevskiy <aik@ozlabs.ru> wrote:
> > > >>>>      =20
> > > >>>>> SLOF receives a device tree and updates it with various propert=
ies
> > > >>>>> before switching to the guest kernel and QEMU is not aware of a=
ny changes
> > > >>>>> made by SLOF. Since there is no real RTAS (QEMU implements it),=
 it makes
> > > >>>>> sense to pass the SLOF final device tree to QEMU to let it impl=
ement
> > > >>>>> RTAS related tasks better, such as PCI host bus adapter hotplug.
> > > >>>>>
> > > >>>>> Specifially, now QEMU can find out the actual XICS phandle (for=
 PHB
> > > >>>>> hotplug) and the RTAS linux,rtas-entry/base properties (for fir=
mware
> > > >>>>> assisted NMI - FWNMI).
> > > >>>>>
> > > >>>>> This stores the initial DT blob in the sPAPR machine and replac=
es it
> > > >>>>> in the KVMPPC_H_UPDATE_DT (new private hypercall) handler.
> > > >>>>>
> > > >>>>> This adds an @update_dt_enabled machine property to allow backw=
ard
> > > >>>>> migration.
> > > >>>>>
> > > >>>>> SLOF already has a hypercall since
> > > >>>>> https://github.com/aik/SLOF/commit/e6fc84652c9c0073f9183
> > > >>>>>
> > > >>>>> Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
> > > >>>>> ---
> > > >>>>>  include/hw/ppc/spapr.h |  7 ++++++-
> > > >>>>>  hw/ppc/spapr.c         | 29 ++++++++++++++++++++++++++++-
> > > >>>>>  hw/ppc/spapr_hcall.c   | 32 ++++++++++++++++++++++++++++++++
> > > >>>>>  hw/ppc/trace-events    |  2 ++
> > > >>>>>  4 files changed, 68 insertions(+), 2 deletions(-)
> > > >>>>>
> > > >>>>> diff --git a/include/hw/ppc/spapr.h b/include/hw/ppc/spapr.h
> > > >>>>> index ad4d7cfd97..f5dcaf44cb 100644
> > > >>>>> --- a/include/hw/ppc/spapr.h
> > > >>>>> +++ b/include/hw/ppc/spapr.h
> > > >>>>> @@ -100,6 +100,7 @@ struct sPAPRMachineClass {
> > > >>>>> =20
> > > >>>>>      /*< public >*/
> > > >>>>>      bool dr_lmb_enabled;       /* enable dynamic-reconfig/hotp=
lug of LMBs */
> > > >>>>> +    bool update_dt_enabled;    /* enable KVMPPC_H_UPDATE_DT */
> > > >>>>>      bool use_ohci_by_default;  /* use USB-OHCI instead of XHCI=
 */
> > > >>>>>      bool pre_2_10_has_unused_icps;
> > > >>>>>      bool legacy_irq_allocation;
> > > >>>>> @@ -136,6 +137,9 @@ struct sPAPRMachineState {
> > > >>>>>      int vrma_adjust;
> > > >>>>>      ssize_t rtas_size;
> > > >>>>>      void *rtas_blob;
> > > >>>>> +    uint32_t fdt_size;
> > > >>>>> +    uint32_t fdt_initial_size;     =20
> > > >>>>
> > > >>>> I don't quite see the purpose of fdt_initial_size... it seems to=
 be only
> > > >>>> used to print a trace.     =20
> > > >>>
> > > >>>
> > > >>> Ah, lost in rebase. The purpose was to test if the new device tre=
e has
> > > >>> not grown too much.
> > > >>>
> > > >>>
> > > >>>      =20
> > > >>>>      =20
> > > >>>>> +    void *fdt_blob;
> > > >>>>>      long kernel_size;
> > > >>>>>      bool kernel_le;
> > > >>>>>      uint32_t initrd_base;
> > > >>>>> @@ -462,7 +466,8 @@ struct sPAPRMachineState {
> > > >>>>>  #define KVMPPC_H_LOGICAL_MEMOP  (KVMPPC_HCALL_BASE + 0x1)
> > > >>>>>  /* Client Architecture support */
> > > >>>>>  #define KVMPPC_H_CAS            (KVMPPC_HCALL_BASE + 0x2)
> > > >>>>> -#define KVMPPC_HCALL_MAX        KVMPPC_H_CAS
> > > >>>>> +#define KVMPPC_H_UPDATE_DT      (KVMPPC_HCALL_BASE + 0x3)
> > > >>>>> +#define KVMPPC_HCALL_MAX        KVMPPC_H_UPDATE_DT
> > > >>>>> =20
> > > >>>>>  typedef struct sPAPRDeviceTreeUpdateHeader {
> > > >>>>>      uint32_t version_id;
> > > >>>>> diff --git a/hw/ppc/spapr.c b/hw/ppc/spapr.c
> > > >>>>> index c08130facb..5e2d4d211c 100644
> > > >>>>> --- a/hw/ppc/spapr.c
> > > >>>>> +++ b/hw/ppc/spapr.c
> > > >>>>> @@ -1633,7 +1633,10 @@ static void spapr_machine_reset(void)
> > > >>>>>      /* Load the fdt */
> > > >>>>>      qemu_fdt_dumpdtb(fdt, fdt_totalsize(fdt));
> > > >>>>>      cpu_physical_memory_write(fdt_addr, fdt, fdt_totalsize(fdt=
));
> > > >>>>> -    g_free(fdt);
> > > >>>>> +    g_free(spapr->fdt_blob);
> > > >>>>> +    spapr->fdt_size =3D fdt_totalsize(fdt);
> > > >>>>> +    spapr->fdt_initial_size =3D spapr->fdt_size;
> > > >>>>> +    spapr->fdt_blob =3D fdt;     =20
> > > >>>>
> > > >>>> Hmm... It looks weird to store state in a reset handler. I'd rat=
her zeroe
> > > >>>> both fdt_blob and fdt_size here.     =20
> > > >>>
> > > >>> The device tree is built from the reset handler and the idea is t=
hat we
> > > >>> want to always have some tree in the machine.     =20
> > > >>
> > > >> Yes, I think the approach here is fine.  Otherwise when we want to
> > > >> look up the current fdt state in RTAS calls or whatever we'd always
> > > >> have to do
> > > >> 	if (fdt_blob)
> > > >> 		look up that
> > > >> 	else
> > > >> 		look up qemu created fdt.
> > > >>   =20
> > > >=20
> > > > No. We only have one fdt blob: the initial one, I'd rather
> > > > call reset time one, or the updated one.   =20
> > >=20
> > > There is one fdt in the machine, always. Either initial or from cas. =
=20
> >=20
> > Yeah, reset time fdt is either the initial one, either cas... and I'm n=
ow
> > wandering what happens if migration occurs between cas that sets cas_re=
boot
> > and the corresponding reset. With the current code base, I have the imp=
ression
> > that the destination will redo the full cas+cas_reboot cycle after rest=
art or
> > am I missing something ? =20
>=20
> Yes, I believe that's correct.  It's kind of an edge case and that CAS
> cycle should still complete ok, it'll just take a little longer to
> boot, so I thought that was preferable to the complexity of migrating
> the CAS state.
>=20

You're probably right.

> > > >> Incidentally 'fdt' and 'fdt_blob' names do a terrible job of
> > > >> distinguishing what the difference is.  Renaming fdt to fdt_initial
> > > >> (to match fdt_initial_size) and fdt_blob to fdt should make that
> > > >> clearer.
> > > >>   =20
> > > >=20
> > > > As mentioned earlier in this thread, spapr->fdt_initial_size is onl=
y used
> > > > for tracing if the received fdt blob fails fdt_check_full()...
> > > >=20
> > > > $ git grep -H fdt_initial_size
> > > > hw/ppc/spapr.c:    spapr->fdt_initial_size =3D spapr->fdt_size;
> > > > hw/ppc/spapr.c:        VMSTATE_UINT32(fdt_initial_size, sPAPRMachin=
eState),
> > > > hw/ppc/spapr_hcall.c:        trace_spapr_update_dt_failed(spapr->fd=
t_initial_size, cb,
> > > > include/hw/ppc/spapr.h:    uint32_t fdt_initial_size;
> > > >=20
> > > > Not sure it is helpful, and anyway, it is expected to be the same i=
n source
> > > > and destination, so why put it in the migration stream ?   =20
> > >=20
> > >=20
> > > Well, we do build the fdt anyway even when receive migration but we do
> > > not have to and yes we can expect the fdt on the destination to be of
> > > the same size since it is the same command line, it is just guessing =
and
> > > expecting vs. knowing and I prefer the latter as the reset time fdt a=
nd
> > > migration source fdt might have different size because of
> > > host-model/host-serial/slot-label/similar properties. =20
> >=20
> > Right but I still don't see the usefulness of fdt_initial_size... =20
>=20
> So, it's there to address exactly the problem you pointed out elswhere
> in the thread: the idea was to disallow the guest resubmitting an fdt
> which is "too much" bigger than the original one, thereby consuming a
> bunch of qemu memory.  The thought was that this is a bit more robust
> that just checking against a fixed max size, especially if we need to
> increase that fixed size in future to handle really big partitions.
>=20

Yeah, I saw that with Alexey's new patch.

Thanks for the detailed clarification !

> > > > The only case where we want to migrate something is when h_update_d=
t() has
> > > > succeeded, ie, the guest passed a valid DT blob. This implies that =
its
> > > > size isn't 0, otherwise fdt_check_full() would return -FDT_ERR_TRUN=
CATED.
> > > >=20
> > > > I would suggest rather to:
> > > >=20
> > > > - completely drop spapr->fdt_initial_size
> > > > - clear spapr->fdt_size at machine reset
> > > > - migrate if spapr->fdt_size is not zero
> > > >=20
> > > > Also, I've just realized another problem... nothing prevents a mali=
cious
> > > > guest to pass an insanely great size to h_update_dt, which would ca=
use
> > > > g_malloc0() to abort... The passed size should be checked against
> > > > FDT_MAX_SIZE.   =20
> > >=20
> > > Good point. Just noticed - as posted, the checker actually checks the
> > > reset time tree, not the updated one, my bad :)
> > >=20
> > >=20
> > >  =20
> >  =20
>=20


--Sig_/u/PCgCC_taRl/0JJdq7gwq=
Content-Type: application/pgp-signature
Content-Description: OpenPGP digital signature

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEtIKLr5QxQM7yo0kQcdTV5YIvc9YFAlwRPVEACgkQcdTV5YIv
c9Za6w//fJ1ll5IKWxPk5vTncmhA8avYzFQ0HjdA1pPxQb1Xg+mtYGu1pxFuOLeF
4gOfgNNja3WPbG2R4oLYcQHmb8pY6Y6HvecADTkw4ljt8gs5HRitNaI1S7Ym9sN4
cCGKXhVQPe9EkDbqRSlCwHCUdHZiRXbB+3IGPnv1dViFWOU8zGwoOcAjVKeCyYr1
ZWL2t99eBZFqxhkZJh6FPgF8YH2H/QAnajiMxO4ERfFC6wvPN042+TC/humYgb2g
N/WXsNLsagrxmcrZivBFcil+oipKTSTenXsjHJCdYhZayaDOX/u6boDBXP14Gppa
64FOwjOYFk05Aqm11DW++YgT6ZT/yzGTHGAflJ0IgAnK9p+UR9TJSsT37OKwdb4I
t8EjvXlA0GAhf3pVPDZLF7O/3Sie3oDQSmWEK8o+kIE9Eh/tu8guTRTUGBsx5DoI
JwodAWcMmN1YsB8IYMw8nE7UVWFEvalbDPYDBDLtnCHITf+F6SNw0MZKu7YH5ezw
FsggGoRAntoFzv4sM6xvM6VonqH265l0cgv2U3+4Q0/kOSRGvknkrrt7AbkwBY4+
Fpat2Z3/wUNIRfNiI+2AvTxgo1k3d97bvBYXzq5LofSjJj6uAabmKz6zxonZxC+j
6w8Cqc205BQ5s//LpkYd9anWoepaqObUTjZooRtLtvqPlRCP/iU=
=cDLI
-----END PGP SIGNATURE-----

--Sig_/u/PCgCC_taRl/0JJdq7gwq=--

