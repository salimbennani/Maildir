Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 21:32:00 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 9C6995805F0;
	Wed, 19 Dec 2018 00:45:54 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 19 Dec 2018 00:45:54 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AnM3ApBE6iKBx3jVeP9jSNp1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75osy+bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjmk8qxlSgLniD?=
 =?us-ascii?q?0fOjAk8G/ZlNB/gqxYrh2uoBJxzJXUYJmXOfdlYqPQf8kXSXZbU8pNVSFMBJ63?=
 =?us-ascii?q?YYsVD+oGOOZVt5fwp1sPrRu4CgmnGeHhyiJSiX/w0q0xzuMsHh3G3AwhGdIOv2?=
 =?us-ascii?q?rYoMn6OaoRSu261rPIwivfYPxMwzvy9I/IchU7rfGQU7N9aMzcwlQsGQPdllic?=
 =?us-ascii?q?t5DpMjeP2ugQvWWX8fBsWf+shmI7sQ18ozqiyt8th4XVnI4Z1F/J+CZjzIs2Jt?=
 =?us-ascii?q?C0UlB3bcKgHZZWqiqULZF5Qtk4TGFtoCs6yqMJuZq8fCUS1pQnyADQa+adf4iL?=
 =?us-ascii?q?/B3jTuCRLil8hH5/f7K/nRmy/VChyu36SMa0zE5HojRZntTIrHwByhLe5tadRv?=
 =?us-ascii?q?dg/UqtxSyD2gHR5+1cJEA7j6vbK5ovwr4qkZoTtFzOHiv3mEXwka+XeVwo+uu2?=
 =?us-ascii?q?5OT9ZLXpuJucO5ZzigDwNKQhhNa/DP8mMggBQWeb4/6w1L798k3jRrVFkPk2nr?=
 =?us-ascii?q?PesJDAKsQXvrS5DBNN0oY/9xa/CC+r0NAZnXkEMl1JYh2Gj5XyNlHKIfD4C+q/?=
 =?us-ascii?q?glu2nDdqwfDGIqPuApHXInffl7fheK5361RAxwor0dBf+5VUB6kBIP3pW0/xqM?=
 =?us-ascii?q?bXDhgjPwy03uboEtN91owFVGKLA6+ZNr7SsFCS6uIuJemMeJEauDLnJ/c54P7u?=
 =?us-ascii?q?iGczmUUBcqmxwZsXdHe4E+xkI0Wef3XgmNQBEWAMvgo4S+znk1mCUT9VZ3avUK?=
 =?us-ascii?q?Mw/DA7CIS6DYjdQoChmqCO3CC+HpdOfGBJFkiMEWv0d4WDQ/oDcjmSIs9mkjwH?=
 =?us-ascii?q?T7ShUZUu1RO1uQ/+yrpnKPfU+yICuZLi0th1+/PclRUo+TNoCMSd1nmHT3tokW?=
 =?us-ascii?q?MQWz82wKd/rFR+yliZ16h0mfhYFd1J6PNPXQc3Lprcz+18C9DvVQPNZNaJSFC6?=
 =?us-ascii?q?Qtq4BTE9VM4+w9gLY0xlAdWtkgjD3za2A78Sj7GEGYY78rzC0HTrJ8Zy0XDG1L?=
 =?us-ascii?q?I/gFkgRcdPMW6mhqt79wXIA47JkkOZl7uldKgG3S7N8nuDwnSKvE1CTAFwVqDF?=
 =?us-ascii?q?V2gFZkTKtdT5+l/CT7i2BLs6KARB19CNJrFKatLzi1VGX+nsONLFbmK1mmewAw?=
 =?us-ascii?q?uIx7yWYIrrfWUdwDvSCEwenw8P+naGMBA0Bj29rGLGEDxuCVXvblvw8el/rXO7?=
 =?us-ascii?q?SVM0zwGKbkF7y7q54BkVheaYS/MS2LIEtzwsqzF1HFa7wtLXBMCMpwtnfKVAf9?=
 =?us-ascii?q?w95E1L2n7etwx4JpagNbxthkYCcwRruEPjzw94CoFensklsnwrzBB+JrmF0Fxc?=
 =?us-ascii?q?bTyY25PwOrrJKmTp+BCvaqjW2kzR0dqM+6cP7ug4pEvnvA2zCkUi9HBn2cFP03?=
 =?us-ascii?q?SA/pXKEBYSUZXpX0c36hh2va3VbjM85oPUz3JsN6a0vyTG29IoAusl1xmhc81e?=
 =?us-ascii?q?MKOCCA/9DckaC9KyJ+wtnlijdggEM/xK9K4oI8OmcOOL2LSqPOl8hj2ml3lI4I?=
 =?us-ascii?q?dn3kKK6SV8UO/I048ZzP6C2guISinzjE2mssDxgo1EYTASHmyiySnrHoJRZ6ty?=
 =?us-ascii?q?fZoVBmeqOcG42tJ+h5v1UX5C6FGjH08G2NOueReKb1393Bdc1EQNrXy8hCu4yS?=
 =?us-ascii?q?d5kzUorqqZwSzPzP7udBsBOm5XWmZiiU3gLpSzj9AfREKodRQmlAO55UbmwKhW?=
 =?us-ascii?q?vKZ/IHPJQUdLfCj2KHtuUrCqubqBYM5P6ZUovjtRUOmnZVCaS7j9owYV0i/5Hm?=
 =?us-ascii?q?tewiw7eC+uupnjgxN6j2edJm5prHXFYcFw2Qvf5NvESP9RxDUGQzN0iTvWBli6?=
 =?us-ascii?q?JNSp+dSUl5HesuGxTW6hV5tTcTX1woOErie0+WpqARinlfCphtLnCRQ60TP819?=
 =?us-ascii?q?RyViXHthf8bpPr16SnK+1neEZoCUT468p7HIF+j4QxiIsR2XgcmpWa434HnX3v?=
 =?us-ascii?q?PtVc3KL0dGANSiITw97J/Ajl31VuLneIx4L6THqR2MVgaMehYmMKxC099dtFB7?=
 =?us-ascii?q?mO7LxLhiZ1plu4rQTMYflyhDsdyP0u6GIEjOENogYi0iKdArUKF0lCISPsjwiI?=
 =?us-ascii?q?78y5rKhPeGavdr2w2FB/nN+7CrGCvxpcWG34epo5GS9w78N/ME/D0XHp64Hkfs?=
 =?us-ascii?q?XQYswXthGOjxjAiO1VIoorlvUWnSpnJX79vXo9xuEglxNu2pW6vJWdJ2Vp4aK0?=
 =?us-ascii?q?GRpYNjzzZ8MO9TDhl6densCK34+xGpVtACkEXJztTfiwCjIdqeznNxqSED07sn?=
 =?us-ascii?q?qbG6DQHQqB50d9tX7PD4qnN3KKJHka0NViQgOSJFdEjQAQXTU6mIM5Fw+wyMzg?=
 =?us-ascii?q?dkd5+i4e5lriphRQzeJoMgH1Un3Dqwewdjc0VJ+fIQJW7wFF+kfVKNGe4fh1Hy?=
 =?us-ascii?q?1C5Z2hqwqNKmOAagRMDGEJXFGEBl/5Mrmv49nA7/aXBu6kI/TSZrWOrPRUV+2U?=
 =?us-ascii?q?ypK3zotm4zGMO92PPnZ8Dv072UlDXXFjF8TagTUPTCMXmDzXb86Gvxex4Sl3rs?=
 =?us-ascii?q?G58PT2VwPj/4qPC71OMdpx/xC6m7uMN+mVhCxhMzZXyosMxWPUyLgYxFMdkTxu?=
 =?us-ascii?q?eCK3EbsetS/BVqbQmq5MAh4faiNzMtZI7q0m0glMP87bls361rpigvEpDFdFUE?=
 =?us-ascii?q?Trmtu1aswSP2G9KFTHCV6XNLSHID3H2d34bbmgRr1QkupUsQa9uTKaE0/lIzSC?=
 =?us-ascii?q?mCPlVxGpMeFQki6bOAZSt526chZoEWLjVs7pagWnMN9rij072b01iWnMNW4ZMD?=
 =?us-ascii?q?h8dVtCr7yQ7SxChPV/FHdM7n5kLemChiaY4PPUKpcQsft3HCt0k/hW72g9y7tQ?=
 =?us-ascii?q?v2l4Q6lwkTHOr9gou1y6n/OUxzxPVwBHoTJGwomMuAEqG6zc+4IGc3HY4BUI6W?=
 =?us-ascii?q?iBIzQDocBoDOXmobxWx8LUlKPrbjxF9pac+coaGtiRM8mcMVI/PhfzXj3ZFg0I?=
 =?us-ascii?q?SXisL26bz0hcluyCs36YtJ43rrDyl5cUDLxWTlo4ErUdEEs2MsYFJcJcXjIinv?=
 =?us-ascii?q?a7kccO6jLqpxnQQsoA5syXfvuIDP7mbj2eiP9YeE1bkvvDMY0PO9ijiARZYV5g?=
 =?us-ascii?q?kdGSFg=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A5BADSBBpch0O0hNFjHQEBBQEHBQGBZ?=
 =?us-ascii?q?YJtfyeDfZQVgiGDMY8ahiEDTBMBARgTAYcpIjgSAQMBAQEBAQECARMBAQEKCwk?=
 =?us-ascii?q?IKSMMgjYigmwCIAQZAQE3AQUJAiQCJgICAzEBBQEjEgWDHYIBAQWbETyKKXB8M?=
 =?us-ascii?q?4J2AQEFhysIEnmKGIEcghaMLIJXgSwBAQGOcDaQWwEGAgGBW06PUIFdiBkRh08?=
 =?us-ascii?q?siRuBBY8JAgQCBAUCBQ8hgTyBdzMaghGBToIbCQMXEoM4imAzMgGBBAEBjWABA?=
 =?us-ascii?q?Q?=
X-IPAS-Result: =?us-ascii?q?A0A5BADSBBpch0O0hNFjHQEBBQEHBQGBZYJtfyeDfZQVgiG?=
 =?us-ascii?q?DMY8ahiEDTBMBARgTAYcpIjgSAQMBAQEBAQECARMBAQEKCwkIKSMMgjYigmwCI?=
 =?us-ascii?q?AQZAQE3AQUJAiQCJgICAzEBBQEjEgWDHYIBAQWbETyKKXB8M4J2AQEFhysIEnm?=
 =?us-ascii?q?KGIEcghaMLIJXgSwBAQGOcDaQWwEGAgGBW06PUIFdiBkRh08siRuBBY8JAgQCB?=
 =?us-ascii?q?AUCBQ8hgTyBdzMaghGBToIbCQMXEoM4imAzMgGBBAEBjWABAQ?=
X-IronPort-AV: E=Sophos;i="5.56,372,1539673200"; 
   d="scan'208,223";a="55768561"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 19 Dec 2018 00:45:53 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728215AbeLSIpu (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 19 Dec 2018 03:45:50 -0500
Received: from mail-it1-f193.google.com ([209.85.166.193]:35580 "EHLO
        mail-it1-f193.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725298AbeLSIpu (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 19 Dec 2018 03:45:50 -0500
Received: by mail-it1-f193.google.com with SMTP id p197so8294950itp.0
        for <linux-kernel@vger.kernel.org>; Wed, 19 Dec 2018 00:45:49 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=areca-com-tw.20150623.gappssmtp.com; s=20150623;
        h=subject:from:to:cc:date:message-id:mime-version
         :content-transfer-encoding;
        bh=KPs1z8W9DxRbdbZ1U32ivf/6EzPqQhb6/E45VHEIBPo=;
        b=hgtiqqFRxYp/SgXIncNJvbCAAEGDgFM/yTs4p0VvNDJMcCoQ4obgLlht0KweIpcvtt
         Eb9y+Bxrbv9qahCAPQweWSi0/kl8q22X4r8czdYH9xtpejP/yWdttE+aaQIHduALHnWU
         XVjwRSlpbZF2s06tPxQe4V7X6OflzBQ1FzOoaFK00wuhmlg+cNGi79yqYnTNOJnl6ogO
         pGYA9xCRqoUYpRJaKGQD8j087yU8gxYuqZslGiyRCAqVxX982rB70W55+L5vckk8qX4A
         7ktaYAjP2h/XpPIIwn+92a2Crm05XMnPGdnCWZlMhyABXq6OWA4zedMzQFJH7AuHVs53
         JvEg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:subject:from:to:cc:date:message-id:mime-version
         :content-transfer-encoding;
        bh=KPs1z8W9DxRbdbZ1U32ivf/6EzPqQhb6/E45VHEIBPo=;
        b=PcUHf4ez3MYuCF9Psys8515005ywk8zQ65yYwJm+Bp624+0CzIgXYohZGd5KtiY5MB
         LJu/0zpl5rOrgtEdf6RQWNwp+qkQEd6Phc69cOKH65BPjDxkcdb/bjPCgxzqzvIHKerB
         5uxCM7jOMHT9LtgAHRh0kR3LIOJ/EhITLszXnM/nlHvIPBNHBKKavKLQaJzUsBF/7w04
         3vlbaJP124vfXJfga0fvzE3Arsdf9JfMODjvPqhWA9N9Cg0qjQCjdnW7tttXTSQxfUuC
         mKegenihRkbk1YQ1sV46hgkzvTSE0fYrzjrPg6sgdDGDIGiDd2AMp5oHW1C9RsB6PXwD
         8kow==
X-Gm-Message-State: AA+aEWYaT0RzWqhtfl1kgrVaKVkdkGpm9SnBEVpDx2u2kZ0O5ldIitvs
        wxow1US36XabA8te9EdDgrYDbQ==
X-Google-Smtp-Source: AFSGD/VFGJepoPdjx8afDt7UCcO0IZ0e1du3O3Bh5p/pvbeG/E0sSk7XSYD5NqUN6rhYCzlFy3BMJg==
X-Received: by 2002:a24:bc1:: with SMTP id 184mr6115613itd.50.1545209149213;
        Wed, 19 Dec 2018 00:45:49 -0800 (PST)
Received: from [192.168.0.130] (60-248-88-209.HINET-IP.hinet.net. [60.248.88.209])
        by smtp.gmail.com with ESMTPSA id b192sm2848377itb.12.2018.12.19.00.45.47
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Wed, 19 Dec 2018 00:45:48 -0800 (PST)
Subject: [PATCH 6/12] scsi: arcmsr: Update for ACB_ADAPTER_TYPE_B that ccb
 address can above 4GB
From: Ching Huang <ching2048@areca.com.tw>
To: martin.petersen@oracle.com, James.Bottomley@HansenPartnership.com,
        linux-scsi@vger.kernel.org, linux-kernel@vger.kernel.org
Cc: dan.carpenter@oracle.com, hch@infradead.org,
        colin.king@canonical.com
Content-Type: text/plain; charset="UTF-8"
Date: Wed, 19 Dec 2018 16:45:46 +0800
Message-ID: <1545209146.4457.32.camel@Centos6.3-64>
Mime-Version: 1.0
X-Mailer: Evolution 2.32.3 (2.32.3-37.el6) 
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From Ching Huang <ching2048@areca.com.tw>

Update for ACB_ADAPTER_TYPE_B that ccb address can above 4GB

Signed-off-by: Ching Huang <ching2048@areca.com.tw>
---

diff --git a/drivers/scsi/arcmsr/arcmsr_hba.c b/drivers/scsi/arcmsr/arcmsr_hba.c
index 2ff1c9a..3d2727c 100755
--- a/drivers/scsi/arcmsr/arcmsr_hba.c
+++ b/drivers/scsi/arcmsr/arcmsr_hba.c
@@ -1418,7 +1418,10 @@ static void arcmsr_done4abort_postqueue(struct AdapterControlBlock *acb)
 			flag_ccb = reg->done_qbuffer[i];
 			if (flag_ccb != 0) {
 				reg->done_qbuffer[i] = 0;
-				pARCMSR_CDB = (struct ARCMSR_CDB *)(acb->vir2phy_offset+(flag_ccb << 5));/*frame must be 32 bytes aligned*/
+				ccb_cdb_phy = (flag_ccb << 5) & 0xffffffff;
+				if (acb->cdb_phyadd_hipart)
+					ccb_cdb_phy = ccb_cdb_phy | acb->cdb_phyadd_hipart;
+				pARCMSR_CDB = (struct ARCMSR_CDB *)(acb->vir2phy_offset + ccb_cdb_phy);
 				pCCB = container_of(pARCMSR_CDB, struct CommandControlBlock, arcmsr_cdb);
 				error = (flag_ccb & ARCMSR_CCBREPLY_FLAG_ERROR_MODE0) ? true : false;
 				arcmsr_drain_donequeue(acb, pCCB, error);
@@ -2358,13 +2361,18 @@ static void arcmsr_hbaB_postqueue_isr(struct AdapterControlBlock *acb)
 	struct ARCMSR_CDB *pARCMSR_CDB;
 	struct CommandControlBlock *pCCB;
 	bool error;
+	unsigned long cdb_phy_addr;
+
 	index = reg->doneq_index;
 	while ((flag_ccb = reg->done_qbuffer[index]) != 0) {
-		reg->done_qbuffer[index] = 0;
-		pARCMSR_CDB = (struct ARCMSR_CDB *)(acb->vir2phy_offset+(flag_ccb << 5));/*frame must be 32 bytes aligned*/
+		cdb_phy_addr = (flag_ccb << 5) & 0xffffffff;
+		if (acb->cdb_phyadd_hipart)
+			cdb_phy_addr = cdb_phy_addr | acb->cdb_phyadd_hipart;
+		pARCMSR_CDB = (struct ARCMSR_CDB *)(acb->vir2phy_offset + cdb_phy_addr);
 		pCCB = container_of(pARCMSR_CDB, struct CommandControlBlock, arcmsr_cdb);
 		error = (flag_ccb & ARCMSR_CCBREPLY_FLAG_ERROR_MODE0) ? true : false;
 		arcmsr_drain_donequeue(acb, pCCB, error);
+		reg->done_qbuffer[index] = 0;
 		index++;
 		index %= ARCMSR_MAX_HBB_POSTQUEUE;
 		reg->doneq_index = index;
@@ -3329,8 +3337,9 @@ static int arcmsr_hbaB_polling_ccbdone(struct AdapterControlBlock *acb,
 	uint32_t flag_ccb, poll_ccb_done = 0, poll_count = 0;
 	int index, rtn;
 	bool error;
-	polling_hbb_ccb_retry:
+	unsigned long ccb_cdb_phy;
 
+polling_hbb_ccb_retry:
 	poll_count++;
 	/* clear doorbell interrupt */
 	writel(ARCMSR_DOORBELL_INT_CLEAR_PATTERN, reg->iop2drv_doorbell);
@@ -3356,7 +3365,10 @@ static int arcmsr_hbaB_polling_ccbdone(struct AdapterControlBlock *acb,
 		index %= ARCMSR_MAX_HBB_POSTQUEUE;
 		reg->doneq_index = index;
 		/* check if command done with no error*/
-		arcmsr_cdb = (struct ARCMSR_CDB *)(acb->vir2phy_offset + (flag_ccb << 5));
+		ccb_cdb_phy = (flag_ccb << 5) & 0xffffffff;
+		if (acb->cdb_phyadd_hipart)
+			ccb_cdb_phy = ccb_cdb_phy | acb->cdb_phyadd_hipart;
+		arcmsr_cdb = (struct ARCMSR_CDB *)(acb->vir2phy_offset + ccb_cdb_phy);
 		ccb = container_of(arcmsr_cdb, struct CommandControlBlock, arcmsr_cdb);
 		poll_ccb_done |= (ccb == poll_ccb) ? 1 : 0;
 		if ((ccb->acb != acb) || (ccb->startdone != ARCMSR_CCB_START)) {


