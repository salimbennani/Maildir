Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  16 Dec 2018 10:42:38 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 9A4D45805F0;
	Sat, 15 Dec 2018 09:12:21 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga002-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 15 Dec 2018 09:12:21 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Apl0CfBZQGUklk3gZ0K2WP2v/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpcm7YR7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTy9PDJ68?=
 =?us-ascii?q?YYURDeUBM/pXoYfyqFUJohW+HhGsCeH0xz9UhHH7x7E23v49HQzE2gErAtIAsG?=
 =?us-ascii?q?7TrNXwLKocVuG1w7XIzTrZcfxW3Sr25pDJch8/r/CUW7JwcczPxkk1CgjIiVGQ?=
 =?us-ascii?q?qY3jPzOI2eUAqG2b7+xhVe2xhW8nrB9+ojipxsgykInFnJ8axU7d+Ch/3Y07K9?=
 =?us-ascii?q?q4SEthbt6lFptdryKaOJVsQsMkXW5ovDw2yrocuZ60eiUB1ZcpxwbHZvCZb4SF?=
 =?us-ascii?q?5gjvWPufLDtmnn5pZbGyiwqo/UWhyODwTse53EtQoiZYkdTBtGoB2hjO5sSdSP?=
 =?us-ascii?q?Zw/UGs0iuV2Q/J8OFLO0U0mLLbK5E/xr4wkYIesVrMHiDogkX6lqyWeVs++uiu?=
 =?us-ascii?q?9evnZq/qppiGN497kg3+M6IuldKjAekgLAQCQ2yW9f6h2LDt40H1WqhGg/4qnq?=
 =?us-ascii?q?XDsZ3XJ9wXpqujDA9U1oYj5Qy/DzCj0NkAmXkHLVRFeA+IjoTwOFHBPur4DfGh?=
 =?us-ascii?q?jFSoiTtrwP7HPrv/DZXXNXXDjrjhcqhn60JGywo808pf55RKBbEFOv7zXVXxtN?=
 =?us-ascii?q?PAAh8jLwO02/rnCMl61o4GXWKPA6yZP73IvV6H++IiOO2MZI4TuDbgJPkp/f/u?=
 =?us-ascii?q?jXklmVADeamlx4cYaHe9Hv5+OUWWfWLsgssdEWcNpgc+TPbliFyeUTFJYHa+Ra?=
 =?us-ascii?q?I85iwhB4KgAofOXYStgL2H3CemEZxafGFGClaQEXj2c4WIQesDaCWXIsV5iDwL?=
 =?us-ascii?q?SaChS5M91RGprAL6yb1nIfTO9i0bspLj0t515+rImBE29Dx0Cdmd0m6XQ2F1mG?=
 =?us-ascii?q?MIWyE53KRlrUNhzVeD1LByg+ZEGtxL+/NJTgA6OIbGwOxhC9DyXQHBcs2TSFm8?=
 =?us-ascii?q?QNWrGjUxTtM3w98TbEdxAdSijhbf3yW0B78ZjaCEBJsx8qjExXj+O959y2ra1K?=
 =?us-ascii?q?kml1QmQdFANWu8iq579gjcHYjJk0qCmqaudKQc2jPN9WiZwWqPukFYTBB/UaHf?=
 =?us-ascii?q?UX8DYUvWqMzz5lneQL+2FbQnLgxBxNafJaRQdN3mk09KRPf5N9TYeGK+hWGwCR?=
 =?us-ascii?q?GMxrOPaYrqf34Q3CHcCEgCjgAS8myKNQk4Bie9vW3eCCZiGk7oY0Pp6eN+sm+0?=
 =?us-ascii?q?TlcozwGWaE1sz6e69QQLhfOCUf8T3qgLuCE6qzpqGlawxNbWC9uGpwp8c6RQe9?=
 =?us-ascii?q?I94FFb1W3HswxxJICvL6dnhlQGaQR4o1vu1wlrCoVHicUqsHIqzA91KaKE0FNA?=
 =?us-ascii?q?dymU3YzqNr3QMGny+BGva6jZ2lzF1NaW+6EP6Ok3qln5vQGpEFYi/Gtj09VPz3?=
 =?us-ascii?q?Sc4ZDKBhIIUZ3tSkY36wR6p7bCbyYn44Pby3JtPre0szPYwN0pGfYqxQymf9dc?=
 =?us-ascii?q?N6OEChT/E8kbB8ioNewrlEKlbhMCPOBO6qE0O9mqeOeB2K6uJOxghi6pjXxb4I?=
 =?us-ascii?q?Bh1UKB7yp9SvPS05kZ2f2Z3wuHWC36jFeuqc33nYFEZTcPHmuw0yTkBYhRZrFs?=
 =?us-ascii?q?coYPE2uhP8q3xtBmjZ73R3FY7EKjB08B2MKxYxqSbkDy0hdK1UsKpnyrgy24wC?=
 =?us-ascii?q?JukzEot6aQwDbBw+D/exUZIG5LQ29igEzoIYi1idAaQUepYxIolBuj+Ub12axb?=
 =?us-ascii?q?qL5jIGnUREdCZzL2IH16UqusqrqCZNZC6ZMpsSlNUOWwe0uaSqP7oxYB1yPjHm?=
 =?us-ascii?q?1exC00dj2wu5X5mQB6h3yZLHppsHXZfsRwzw/F5NPAXf5RwiYGRC5ghDnVHFe8?=
 =?us-ascii?q?Jdqp/daTl5vZqeCxTWGhVp5ScSnt04yAsjC25WlrAR25gvCylcfrEQk80S/nyd?=
 =?us-ascii?q?ZqUT/Eowr7Yonuz666K/5oflF0BF/g7Mp3AoF/nZE3hJ0K23gah5OV8GEDkWfy?=
 =?us-ascii?q?N9VbxK3/YGAMRT4N397a/gzl1Fd/IXKOwoLzTm+dzdd5Z9mmfmMW3Tow78NQB6?=
 =?us-ascii?q?eV9rBEnTZ1rUC+rQLeevV9mjYdyf0z6H8Vme0JuQwtzjmDDbAWB0VXISvslxGQ?=
 =?us-ascii?q?5dCksKpXfHqvcaS31EdmmNChDbKCrRtGVHf3ZJgiBjNw4dtlMF3XznLz8I7kdc?=
 =?us-ascii?q?LUbdISsB2UjhjBg/JUKJI3ivoFmy5nNXjhsn0izu4xlQZu0o2ivIibN2Vt+7q0?=
 =?us-ascii?q?AgJfNj3wfc8S+yvijaBDnsaNxICvH45sGjEKXJvuUPKpHygetfXhNwaSDjI8rm?=
 =?us-ascii?q?2XFqbYHQ+a8E1mtW7AE4i3N3GLI3kU1c5tSwOaJExbnQAYRjE6noMiGwCuxczh?=
 =?us-ascii?q?dlp55z8L6l75rBtM1vxnNx3lXmjDoweoby8+SIKDIxpO8gFC+0DVPNSc7u1pGi?=
 =?us-ascii?q?FX4IahoBaRKmCBZARIEGIJWlGCB1/5Jbmj/t3A8+meBuqjIPrCe7SOqepCV/iW?=
 =?us-ascii?q?wZKjyJdp/zGJNs+XJHltE+U72lZfXXB+A8nYmzIPSzEOlyLQdcGbog2w+jZwrs?=
 =?us-ascii?q?C5//TmQwbv5YqJC7tPPtRj4RG2gaGfN+GOgCZ1MypX1pQJxXXQ0rgQwEYSiz1y?=
 =?us-ascii?q?dzmqCbkAtTDCTKPTmq9UDh4XcSBzNNFP76IzwAZNI9Pbisju2758j/41DUpFVF?=
 =?us-ascii?q?P7lsGoY8wKP3+yNFfdCEmXM7SGICXBw9vrbqOkVb1QkOJUugWqtjaGCEDjJCqM?=
 =?us-ascii?q?ljnzWxCrMOFBlyWbPB1YuIGgfRdhE2njTNT6ahKlNN97lyE5wboxhnnSL24TLS?=
 =?us-ascii?q?B8c19Rrr2X9S5YnvR/G2lb4nV5N+WLhyaZ4PfeKpsNtftrAyJ0l/9V4XggyrtV?=
 =?us-ascii?q?6j1ES+JxmCfIstFupFSmmPGVyjV7SBpOtipLhIWTsERiI6rZ8JxAWXfC/B0V7G?=
 =?us-ascii?q?SQCw4Fp91qCtD0v6BQy97PlL/8KTtY8tLU+9ccCNbQKM6dLHUhNh/pS3boC14h?=
 =?us-ascii?q?SiOqLin0gEhZmeuevimRqYU7sZPrnJ4HULNzX1wvEfYbF0EjG8YNdsRZRDQhxJ?=
 =?us-ascii?q?uah84B6H72ihjcW1tauJ3dHqaWAPPyOB6ci7hJeBwFwbX1N8IfO9uoiARZdlBm?=
 =?us-ascii?q?kdGSSALrVtdXr3gkN1dsrQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AkAABmNRVch0O0hNFjGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBZYJqgQIng3xiiBaLGYINFJk3LAsIAYdHIjgSAQMBAQEBAQECARM?=
 =?us-ascii?q?BAQEKCwkIKSMMgjYkAYJhAQEBAQIBAQIgBAxGBQEJAQEKGAICJgICA1QGEwUWg?=
 =?us-ascii?q?wcBgXgIBAEKpHh8M4QtAYEThGeBC4lxgUIXPoFBgRGDEoMeBIRnglcCizaVDVY?=
 =?us-ascii?q?JgRaFd4plgV1NiACHKI4yjQ+BdzMiHBSDJwmCGwMXhiCCPoVAPzIBgQQBASGMc?=
 =?us-ascii?q?AEB?=
X-IPAS-Result: =?us-ascii?q?A0AkAABmNRVch0O0hNFjGgEBAQEBAgEBAQEHAgEBAQGBZYJ?=
 =?us-ascii?q?qgQIng3xiiBaLGYINFJk3LAsIAYdHIjgSAQMBAQEBAQECARMBAQEKCwkIKSMMg?=
 =?us-ascii?q?jYkAYJhAQEBAQIBAQIgBAxGBQEJAQEKGAICJgICA1QGEwUWgwcBgXgIBAEKpHh?=
 =?us-ascii?q?8M4QtAYEThGeBC4lxgUIXPoFBgRGDEoMeBIRnglcCizaVDVYJgRaFd4plgV1Ni?=
 =?us-ascii?q?ACHKI4yjQ+BdzMiHBSDJwmCGwMXhiCCPoVAPzIBgQQBASGMcAEB?=
X-IronPort-AV: E=Sophos;i="5.56,358,1539673200"; 
   d="scan'208";a="55321767"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 15 Dec 2018 09:12:20 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728877AbeLORME convert rfc822-to-8bit (ORCPT
        <rfc822;like.xu@linux.intel.com> + 23 others);
        Sat, 15 Dec 2018 12:12:04 -0500
Received: from sender-of-o53.zoho.com ([135.84.80.218]:21831 "EHLO
        sender-of-o53.zoho.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726298AbeLORMD (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sat, 15 Dec 2018 12:12:03 -0500
ARC-Seal: i=1; a=rsa-sha256; t=1544893898; cv=none; 
        d=zoho.com; s=zohoarc; 
        b=h3Ko5oTCaFix2V5B+/bkpHYx7ke7iQypFUP06mf8LGyHHHZR13TyqKjPJCdTM04RdLPogUdJdX8ZmymEGmhFUMyUuBhucILsC89cNn2Bnm9Ap/pNVN+zX73ogau82nRVSj1c7boAuzuGKb8eH5gMPHGekcLStwstTftHLN+9Bp8=
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=zoho.com; s=zohoarc; 
        t=1544893898; h=Content-Type:Content-Transfer-Encoding:Cc:Date:From:In-Reply-To:MIME-Version:Message-ID:References:Subject:To:ARC-Authentication-Results; 
        bh=fFdsYoE7qk2pEEa1OEYNRLPLsD9zhhV0eRvgc1ycnxU=; 
        b=Zq2yDvu3MtdBn+N2oynFpTUJhvJOD2vubrHzQAuRRufUIV+eJsoSSabSkHxtYv5e4fdQy0TPoLEzWOaWiVANENp6fG+vtXRqGrPSrVw9eu1Wdowe1uyIlc1i5lrqTI9w7VcGSQxIlSKcq57McILVttLGq79hSIOtGINDPXG4zNo=
ARC-Authentication-Results: i=1; mx.zoho.com;
        dkim=pass  header.i=mniewoehner.de;
        spf=pass  smtp.mailfrom=linux@mniewoehner.de;
        dmarc=pass header.from=<linux@mniewoehner.de> header.from=<linux@mniewoehner.de>
Received: from z3r0 (31.187.91.78 [31.187.91.78]) by mx.zohomail.com
        with SMTPS id 1544893895227384.15539478682865; Sat, 15 Dec 2018 09:11:35 -0800 (PST)
Message-ID: <bc8a550472c42e010a70090c1b1bc87c7a26627d.camel@mniewoehner.de>
Subject: Re: [PATCH] Allow hwrng to initialize crng.
From: Michael =?ISO-8859-1?Q?Niew=F6hner?= <linux@mniewoehner.de>
To: Louis Collard <louiscollard@chromium.org>
Cc: linux-integrity@vger.kernel.org, Arnd Bergmann <arnd@arndb.de>,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        linux-kernel@vger.kernel.org,
        Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>,
        Andrey Pronin <apronin@chromium.org>,
        Jason Gunthorpe <jgg@ziepe.ca>,
        "David R. Bild" <david.bild@xaptum.com>
In-Reply-To: <CAKNRAJVF5bf7LgyxQRkRFq3ihm9TmbGO8=wCo8i8NWds2yr2bg@mail.gmail.com>
References: <20180926032455.224600-1-louiscollard@chromium.org>
         <568ea3447a8116ef460d191bf3599e2761bca3a5.camel@mniewoehner.de>
         <CAKNRAJVF5bf7LgyxQRkRFq3ihm9TmbGO8=wCo8i8NWds2yr2bg@mail.gmail.com>
Content-Type: text/plain; charset="UTF-8"
Date: Sat, 15 Dec 2018 18:11:31 +0100
Mime-Version: 1.0
X-Mailer: Evolution 3.28.5 
Content-Transfer-Encoding: 8BIT
X-ZohoMailClient: External
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Thu, 2018-12-13 at 12:50 +0800, Louis Collard wrote:
> On Sun, Nov 18, 2018 at 4:15 AM Michael Niew√∂hner <linux@mniewoehner.de>
> wrote:
> > 
> > Hi Louis,
> > 
> > On Wed, 2018-09-26 at 11:24 +0800, Louis Collard wrote:
> > > Some systems, for example embedded systems, do not generate
> > > enough entropy on boot through interrupts, and boot may be blocked for
> > > several minutes waiting for a call to getrandom to complete.
> > > 
> > > Currently, random data is read from a hwrng when it is registered,
> > > and is loaded into primary_crng. This data is treated in the same
> > > way as data that is device-specific but otherwise unchanging, and
> > > so primary_crng cannot become initialized with the data from the
> > > hwrng.
> > > 
> > > This change causes the data initially read from the hwrng to be
> > > treated the same as subsequent data that is read from the hwrng if
> > > it's quality score is non-zero.
> > > 
> > > The implications of this are:
> > > 
> > > The data read from hwrng can cause primary_crng to become
> > > initialized, therefore avoiding problems of getrandom blocking
> > > on boot.
> > > 
> > > Calls to getrandom (with GRND_RANDOM) may be using entropy
> > > exclusively (or in practise, almost exclusively) from the hwrng.
> > > 
> > > Regarding the latter point; this behavior is the same as if a
> > > user specified a quality score of 1 (bit of entropy per 1024 bits)
> > > so hopefully this is not too scary a change to make.
> > > 
> > > This change is the result of the discussion here:
> > > https://patchwork.kernel.org/patch/10453893/
> > > 
> > > Signed-off-by: Louis Collard <louiscollard@chromium.org>
> > > Acked-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
> > > ---
> > >  drivers/char/hw_random/core.c | 9 +++++++--
> > >  1 file changed, 7 insertions(+), 2 deletions(-)
> > > 
> > > diff --git a/drivers/char/hw_random/core.c b/drivers/char/hw_random/core.c
> > > index aaf9e5afaad4..47f358aa0c3d 100644
> > > --- a/drivers/char/hw_random/core.c
> > > +++ b/drivers/char/hw_random/core.c
> > > @@ -24,6 +24,7 @@
> > >  #include <linux/sched.h>
> > >  #include <linux/slab.h>
> > >  #include <linux/uaccess.h>
> > > +#include <crypto/chacha20.h>
> > > 
> > >  #define RNG_MODULE_NAME              "hw_random"
> > > 
> > > @@ -64,13 +65,17 @@ static size_t rng_buffer_size(void)
> > >  static void add_early_randomness(struct hwrng *rng)
> > >  {
> > >       int bytes_read;
> > > -     size_t size = min_t(size_t, 16, rng_buffer_size());
> > > +     /* Read enough to initialize crng. */
> > > +     size_t size = 2*CHACHA20_KEY_SIZE;
> > > 
> > >       mutex_lock(&reading_mutex);
> > >       bytes_read = rng_get_data(rng, rng_buffer, size, 1);
> > >       mutex_unlock(&reading_mutex);
> > >       if (bytes_read > 0)
> > > -             add_device_randomness(rng_buffer, bytes_read);
> > > +             /* Allow crng to become initialized, but do not add
> > > +              * entropy to the pool.
> > > +              */
> > > +             add_hwgenerator_randomness(rng_buffer, bytes_read, 0);
> > >  }
> > > 
> > >  static inline void cleanup_rng(struct kref *kref)
> > 
> > I found your patch by chance, searching for a solution for crng init delay
> > on my
> > headless machine. Unfortunately it hardly makes any difference for me. With
> > the
> > patch the system hangs for about 80s instead of 120s until the "crng init
> > done"
> > message.In contrast, doing a `cat /dev/hwrng >/dev/random` or running rngd
> > initializes the crng instantly.
> > 
> > Isn't that delay the problem this patch tries to fix? Any idea what is wrong
> > here?
> > 
> > Thanks!
> > 
> > Best regards
> > Michael
> > 
> > 
> 
> Yes that is the problem this is trying to address. My guess would be
> rng_get_data() is not returning as much data as requested, so the
> delay is reduced but not eliminated. Looking at implementation of
> rng_get_data() it appears this could be caused by device support for
> read() vs data_read(). I don't have a good feel for whether looping to
> retrieve more data here would be acceptable, it is certainly a bigger
> change than currently proposed.
> 
> Thanks,
> Louis

Hi Louis,

that is what I thought first, too, but I was able to verify that 64 bytes are
read as expected.

It seems this is exactly what David noticed in your discussion about the quality
module parameter (https://patchwork.kernel.org/patch/10453893/#22130681):

> Interesting.
> 
> add_hwgenereator_randomness() will call crng_fast_load(), regardless
> of entropy estimate/quality, if crng_init is 0.  So initializing
> crng_init from the hwrng, regardless of quality, is already the
> intent.
> 
> But hw_random only calls add_hwgenerator_randomness() if
> current_quality > 0, via the hwrng_fillfn() kthread.
> 
> All that to say, I agree.  add_early_randomness() should (indirectly)
> call crng_fast_load(), like add_hwgenerator_randomness() does.

When I set rng_quality=1024, the crng does get initialized more or less
instantly.


dmesg with default rng_quality=0:

[    0.003831] ACPI: TPM2 0x000000009E0B7F70 000034 (v03 LENOVO TC-
S06   00001260 AMI  00000000)
[    0.161803] random: get_random_bytes called from start_kernel+0x8f/0x50e with
crng_init=0
[    3.590433] tpm_tis MSFT0101:00: 2.0 TPM (device-id 0xFE, rev-id 2)
[    3.644148] random: fast init done
[   85.183006] random: crng init done


dmesg with rng_quality patch:

[    0.003837] ACPI: TPM2 0x000000009E0B7F70 000034 (v03 LENOVO TC-
S06   00001260 AMI  00000000)
[    0.162136] random: get_random_bytes called from start_kernel+0x8f/0x50e with
crng_init=0
[    3.582675] tpm_tis MSFT0101:00: 2.0 TPM (device-id 0xFE, rev-id 2)
[    3.636408] random: fast init done
[    3.650355] random: crng init done


Test patch:

diff --git a/drivers/char/tpm/tpm_tis.c b/drivers/char/tpm/tpm_tis.c
index f08949a5f678..59e5a8753ba1 100644
--- a/drivers/char/tpm/tpm_tis.c
+++ b/drivers/char/tpm/tpm_tis.c
@@ -214,6 +214,8 @@ static int tpm_tis_init(struct device *dev, struct tpm_info
*tpm_info)
        if (itpm || is_itpm(ACPI_COMPANION(dev)))
                phy->priv.flags |= TPM_TIS_ITPM_WORKAROUND;
 
+       priv->rng_quality = 1;
+
        return tpm_tis_core_init(dev, &phy->priv, irq, &tpm_tcg,
                                 ACPI_HANDLE(dev));
 }



Thanks
Michael


