Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:55:17 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 4773758050C;
	Fri, 21 Dec 2018 13:03:59 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga008-1.jf.intel.com with ESMTP; 21 Dec 2018 13:03:59 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3APMJa6hPCCzzGEMg8Micl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KPj4p8bcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRshfWSxfDI2h?=
 =?us-ascii?q?bIUPAeUOMvpFoIb/qVQOtgO+CAu3CePz1jNFnGP60bEg3ukjFwzNwQwuH8gJsH?=
 =?us-ascii?q?TRtNj7M70dUfypzKnIzDXMdehW0ir45ofSbB8hofWMUq5zccXP1EIiEAbFjlaK?=
 =?us-ascii?q?poH+IzyV1v4Ns2+e7+phSOKvjnQrqwZrojig38ohjJTCiIENyl3c6yl13II4Kc?=
 =?us-ascii?q?elREN1f9KoCoZcuiKGO4dsQ84vQXlktDg7x7EYpZK2eTUGxZQ7yBPadfCLb5aE?=
 =?us-ascii?q?7xf+WOuUIzp1hGhqdbexiha88EWv1OjxWtep3FlXqydIltfBu3IC2hHV98OJUO?=
 =?us-ascii?q?Fy/l271jaKzw3T6v9LIUQzlafDNZ4hzaA/loAJvUTAACD2gkP2g7GSdkk+/eio?=
 =?us-ascii?q?8evnbq3npp+aKYB0lhnzProylsG7G+g0LwYDU3aB9eih17Dv4Vf1TbRIg/Eul6?=
 =?us-ascii?q?nWqpHaJcAVpq6jBA9V154u6xK+DzegzdQZkmALLFFbdxKdiYjmJVXOLOn/Dfax?=
 =?us-ascii?q?hVSjji1ryuvYPr3uHJrNNGLPkLT/crZn7U5T1g4zwcpY55JOBbENOOjzVVPptN?=
 =?us-ascii?q?zEEh85NBS5w+LmCNV+yIwSQ22OArKCPaPWsF+I4P8vIuaWaI8Uvjb9N+Yq5/r0?=
 =?us-ascii?q?gXAlnl8deLGj3YELZ3CgAvRmP0KZbGLsgtgbEGcKohAxTOvwhF2CTD5cfXCyX6?=
 =?us-ascii?q?0n6zE/CYKmC5rDR4+3jLyA2ie7AoNZZmRcBl+QFnfocp2OW+0QZyKKPs9hjjsE?=
 =?us-ascii?q?WKC7RI861RGuswz6x6B9LuXO+C0Vrpbj1Nlz5+3OmhA+7z10D8KB026TS2F4hH?=
 =?us-ascii?q?8HRzgz3Kpnu0xy1k+D0bRkg/xfDdFT5OlGUgEgOZ7Yzux1EdbyWg3ac9eNSVam?=
 =?us-ascii?q?RMimAD4rQtIwxd8Of1hyG9G4gh/f2CqqBqcfl6aXC5ws7qLcw3/xKt5gxHncyq?=
 =?us-ascii?q?kukUMqQstVOm2gna5w6Q7TC4nNk0Wakqaqcb8R3CrM9GeF0GqPs1tUUA92UaXZ?=
 =?us-ascii?q?Q38fYlHaosj+5kPHV7WuE6goMhNdyc6eLatHcsDmgk9YRPj9ItjeY3i+m2GrBR?=
 =?us-ascii?q?mWwLOBd47qe2Qb3CXAB0kIiQET/XCaNQcgAietuX7RDDtrFVj3eUPj7fF+qG+n?=
 =?us-ascii?q?Tk8z1wyKc0xh17+y+h4JhfydS+kf3q4etCcmsTV0GFe939TZC9ebowphfaNcYc?=
 =?us-ascii?q?4y4Vtd1GLZsRB9MYKkL6x4mlEedAF3tVv01xprEoVAjdQqrHQywQVoLaKXzlxA?=
 =?us-ascii?q?eC2Y3JzqIbLXN3T98wqpa67V3VHezs2b+qMO6PQ+tlXisxulFksk83V7zdZV12?=
 =?us-ascii?q?GQ6YnNDAoXSZjxSFo49wBmp7HGZSkw/4PV1WB2PaaoqDPD2tIpC/EjyhavZNpf?=
 =?us-ascii?q?NKKEFAnvE8wVHcSuKeoqm0S3YRIAJuxd6Kk0P8a+ffucxKGrJPpgnC6hjWlf+o?=
 =?us-ascii?q?B9016D+DBmSuHV2JYJ2feY0RWdVzf9lVuurtr4mYRZaj4MBGq/zi7kCZVVZq1z?=
 =?us-ascii?q?e4YLFGivL9e2xtV4m57iRXpY+ES/CFMB3c+jYQCSYEDl3Q1MyUQXpmSqmCu5zz?=
 =?us-ascii?q?BukzAltLGf3DHIw+n5cBoHO2hLRHRtjFv2IIi0icwaU1asbwQziBSl4kP6zbBB?=
 =?us-ascii?q?pKtjN2nTXVtIfy/uImFgSKSwrLmCY81I6J8yqiVYSue8YVObSr77vRQa1TjuH2?=
 =?us-ascii?q?9fxDA9ajGrtY/1nx18iGKBMnlzqGDVdt13xRfa/NbcX+Je3iIaRClkjjnaHli9?=
 =?us-ascii?q?MMOu/dmOlZfDs+a+WnmlVp1Sdynr0IyBuDG65W1sHR2wgfSzlsf7Hgg91C/xz8?=
 =?us-ascii?q?NqWjnQrBbgfonr0Ly3MeF9cUlpHlP869d6FZt4kos/n5wQ3XkahpOI/XsIi2vz?=
 =?us-ascii?q?MNNb2b7gY3oJXzIE39nV4A390k15Mn2J3575VmmawsZ5Ytm6Y2AW1Tgn48FEFq?=
 =?us-ascii?q?iU96BEkjVvolWjsw3Re/d9kywZyfsv7n4anu4ItBAsziWbHrAdA01YMTbwmBSP?=
 =?us-ascii?q?6tC0tL9Xa3q3cbisyEp+msisDK2FogFZQnr4e40tHSlt7sVkK1LM0Wb+6oXleN?=
 =?us-ascii?q?nWcNISuQeYkxbGj+hJNp0xkuAGijZgOWL4pXcl0fI0jQRy3ZGmu4iKM35i87i+?=
 =?us-ascii?q?Ah5cKz35fccT+iz2gKZan8aW2Z2vH5p7FjUKWpvoUeynEDYIufv7MAaOFSU2qm?=
 =?us-ascii?q?2HFrrHAQ+f9EBmomrNE5+xMnGYOmIZwc9+RBWHJ0xfnQMUXCg8npEjDQCn38jh?=
 =?us-ascii?q?cEZ/5jAM6V/0sBpMyuR0NxbhVmfTvhunajAxSJKHNhpZ8hlC51vJMcyZ9u9yHy?=
 =?us-ascii?q?ZY/oC4rAyQMGObYR5EDXoOWkyCCFDuJb2u5djG8+iFCeuyNfrOYbOSqeNAU/eE?=
 =?us-ascii?q?346g0oxj/zyULMWAImFiD+En2kpERX15G9rWmzQMSywUliLBdc2bpA27+i14sM?=
 =?us-ascii?q?+/6unrWBn06IuLCrtSN8hv+h+sjaeCMe6QmDh2KTJC2pwQwn/IzaAV3EQOhCF2?=
 =?us-ascii?q?azmtDbMAuDbXQ6LNgaBXFQAUaiNpOMtM7qIxxQ1NOc/ditPo2b90lP81C1FZVV?=
 =?us-ascii?q?P/nsGlf9AFI2a4NFnfHkaEKKyGJSHXw8Hwea68VbxQjOBOuxKsozqUD0/jMSqF?=
 =?us-ascii?q?lzTyUxCvMOdMjDyUPRBEuYG9dAptBnbnTN78dhK7N9p3hyUswbIonnPKKXIcMT?=
 =?us-ascii?q?9kfkJNtLKQ6yZYgvR5G2NZ73tlLfOLmyCW7+TDLpYWsP1rAjl7lu5A4XQ6zadV?=
 =?us-ascii?q?4z9ARPBvhCTSqdtu8BmalbyzwzxmQRMGhj9QzNaXsUx5Ea7e+pRJRGzD5htL6n?=
 =?us-ascii?q?+fXUckvdxgX/jmp7xQy9HU3IH6JTdG+NHZtZ8ZBMH8I8KdN38gLB+vHyTbWlhW?=
 =?us-ascii?q?BQW3PH3S0hQO2MqZ8WeY+91j8sDh?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAABLVB1ch0O0hNFkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGBMII7J4N9iBmOCRSJEI47gXMTAQEYEwGHMCI0CQ0?=
 =?us-ascii?q?BAwEBAQEBAQIBEwEBAQgNCQgpIwyCOikBgmYBAQEBAgEBAiAEGQEBNwEFCQEBC?=
 =?us-ascii?q?g4KAgIFIQICAwwFIAEFASITBYMdgXUFCAEEmj48iilwfDOCdgEBBYcoCBJ5ihi?=
 =?us-ascii?q?BHBeBQD+BEYJkLoR2gxMxgiaJQ4cfUpATCZFdDBiBYIgaN4cumXUGAgkHDyGBJ?=
 =?us-ascii?q?YIOTTAIgyeCGwkDF4hehWAfMoECAwEBIRONegEB?=
X-IPAS-Result: =?us-ascii?q?A0ABAABLVB1ch0O0hNFkGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGBMII7J4N9iBmOCRSJEI47gXMTAQEYEwGHMCI0CQ0BAwEBAQEBAQIBE?=
 =?us-ascii?q?wEBAQgNCQgpIwyCOikBgmYBAQEBAgEBAiAEGQEBNwEFCQEBCg4KAgIFIQICAww?=
 =?us-ascii?q?FIAEFASITBYMdgXUFCAEEmj48iilwfDOCdgEBBYcoCBJ5ihiBHBeBQD+BEYJkL?=
 =?us-ascii?q?oR2gxMxgiaJQ4cfUpATCZFdDBiBYIgaN4cumXUGAgkHDyGBJYIOTTAIgyeCGwk?=
 =?us-ascii?q?DF4hehWAfMoECAwEBIRONegEB?=
X-IronPort-AV: E=Sophos;i="5.56,382,1539673200"; 
   d="scan'208";a="45035675"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 21 Dec 2018 13:03:57 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2391889AbeLUU5z (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Fri, 21 Dec 2018 15:57:55 -0500
Received: from mail-pl1-f196.google.com ([209.85.214.196]:42184 "EHLO
        mail-pl1-f196.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S2390193AbeLUU5y (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 21 Dec 2018 15:57:54 -0500
Received: by mail-pl1-f196.google.com with SMTP id y1so2990745plp.9
        for <linux-kernel@vger.kernel.org>; Fri, 21 Dec 2018 12:57:54 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=chromium.org; s=google;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=0J1ePIzJh/GISEQqbG2+Sfbjz0YKVc0Ba882Oi2l5BY=;
        b=StE3PCMZSpLpihhHcYGbtAZ2zREm1TwoZi1WT36K9I1b4RYoCULJeGQYRj6LBFV6aF
         UiABKH/X212209FtgaivL4U64m4XwsLSPqBeEV/c1T7bZTLuMTBnX+1YBN4ygWMzU5w4
         sgplJz3UttebwRZXF4ARdqthQOR8gcGK/roe0=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:message-id:references
         :mime-version:content-disposition:in-reply-to:user-agent;
        bh=0J1ePIzJh/GISEQqbG2+Sfbjz0YKVc0Ba882Oi2l5BY=;
        b=V3AdhZbycTGhEsYfnw6hVE0Y/m0qtYfTS4G9G8cTWpNFvFQ1UlFxNQHl9nsAKiQLJ6
         UBfg1VGFSyM1EE5z2xS8QaXf9DdTIy1DGkhrbuI4AtXoIb5PLe/k/m5aA/zYnK+x1+Ly
         XOKYDCjX9/HDajcGythrxHhSMwYPiBfrbM6xmd2r5i1gushPF6j/G7dfKQ5LuCrcj+BT
         bBWyxg+zrAi+aepCnzr3e0ZUftiowI7qDilgd7uCWkkYmGHFSSyWTkb0OU/X8C7j9Eks
         yQCUt05KGizt3G/Z6WOALEHEX2A95FQqC1t2QIJczkK5YzkyTeUyz4r9JddUHtH4o7g2
         So9g==
X-Gm-Message-State: AJcUukcY9rq5VGLybdODj0FzE9P6Awu2sYSh4HbFa2Zxc35H1ChE6Bm/
        HSgn2KeUjFoOaRO9YQyb1+e1zg==
X-Google-Smtp-Source: ALg8bN7Fnjl/603cNfmcNHdrvj+eutyQEGxflWfavMupFokeuIy+Jh3N0laxM+mxrJW/ApAu8L/xUA==
X-Received: by 2002:a17:902:4222:: with SMTP id g31mr4038465pld.240.1545425873834;
        Fri, 21 Dec 2018 12:57:53 -0800 (PST)
Received: from localhost ([2620:15c:202:1:75a:3f6e:21d:9374])
        by smtp.gmail.com with ESMTPSA id h15sm31282111pgl.43.2018.12.21.12.57.52
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Fri, 21 Dec 2018 12:57:53 -0800 (PST)
Date: Fri, 21 Dec 2018 12:57:52 -0800
From: Matthias Kaehlcke <mka@chromium.org>
To: Taniya Das <tdas@codeaurora.org>
Cc: "Rafael J. Wysocki" <rjw@rjwysocki.net>,
        Viresh Kumar <viresh.kumar@linaro.org>,
        linux-kernel@vger.kernel.org, linux-pm@vger.kernel.org,
        Stephen Boyd <sboyd@kernel.org>,
        Rajendra Nayak <rnayak@codeaurora.org>,
        devicetree@vger.kernel.org, robh@kernel.org,
        skannan@codeaurora.org, linux-arm-msm@vger.kernel.org,
        amit.kucheria@linaro.org, evgreen@google.com
Subject: Re: [PATCH v1] cpufreq: qcom: Read voltage LUT and populate OPP
Message-ID: <20181221205752.GD261387@google.com>
References: <1545415608-15163-1-git-send-email-tdas@codeaurora.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
In-Reply-To: <1545415608-15163-1-git-send-email-tdas@codeaurora.org>
User-Agent: Mutt/1.10.1 (2018-07-13)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi Taniya,

On Fri, Dec 21, 2018 at 11:36:48PM +0530, Taniya Das wrote:
> Add support to read the voltage look up table and populate OPP for all
> corresponding CPUS.
> 
> Signed-off-by: Taniya Das <tdas@codeaurora.org>
> ---
>  drivers/cpufreq/qcom-cpufreq-hw.c | 32 ++++++++++++++++++++++++++++++--
>  1 file changed, 30 insertions(+), 2 deletions(-)
> 
> diff --git a/drivers/cpufreq/qcom-cpufreq-hw.c b/drivers/cpufreq/qcom-cpufreq-hw.c
> index d83939a..7559b87 100644
> --- a/drivers/cpufreq/qcom-cpufreq-hw.c
> +++ b/drivers/cpufreq/qcom-cpufreq-hw.c
> @@ -10,18 +10,21 @@
>  #include <linux/module.h>
>  #include <linux/of_address.h>
>  #include <linux/of_platform.h>
> +#include <linux/pm_opp.h>
>  #include <linux/slab.h>
> 
>  #define LUT_MAX_ENTRIES			40U
>  #define LUT_SRC				GENMASK(31, 30)
>  #define LUT_L_VAL			GENMASK(7, 0)
>  #define LUT_CORE_COUNT			GENMASK(18, 16)
> +#define LUT_VOLT			GENMASK(11, 0)
>  #define LUT_ROW_SIZE			32
>  #define CLK_HW_DIV			2
> 
>  /* Register offsets */
>  #define REG_ENABLE			0x0
> -#define REG_LUT_TABLE			0x110
> +#define REG_FREQ_LUT_TABLE		0x110
> +#define REG_VOLT_LUT_TABLE		0x114

The new names suggest that there is a LUT for frequencies and another
one for voltages. I don't have access to hardware documentation, but
from the code and offsets in this driver it seems there is a single
table at offset 0x110, with a 'row' of 32 bytes per OPP. Within this
row the frequency (and other values) is located at offset 0, the
voltage at offset 4.

I'd suggest to keep REG_LUT_TABLE, add a define LUT_OFFSET_VOLTAGE/MV
(or similar) and adjust the math in qcom_cpufreq_hw_read_lut() to use
REG_LUT_TABLE as base offset.

>  #define REG_PERF_STATE			0x920
> 
>  static unsigned long cpu_hw_rate, xo_rate;
> @@ -75,19 +78,26 @@ static int qcom_cpufreq_hw_read_lut(struct device *dev,
>  				    void __iomem *base)
>  {
>  	u32 data, src, lval, i, core_count, prev_cc = 0, prev_freq = 0, freq;
> +	u32 volt;
>  	unsigned int max_cores = cpumask_weight(policy->cpus);
>  	struct cpufreq_frequency_table	*table;
> +	unsigned long cpu_r;

nit: why 'cpu_r' and not just 'cpu'?

(if it is needed at all, see my comment below)

> 
>  	table = kcalloc(LUT_MAX_ENTRIES + 1, sizeof(*table), GFP_KERNEL);
>  	if (!table)
>  		return -ENOMEM;
> 
>  	for (i = 0; i < LUT_MAX_ENTRIES; i++) {
> -		data = readl_relaxed(base + REG_LUT_TABLE + i * LUT_ROW_SIZE);
> +		data = readl_relaxed(base + REG_FREQ_LUT_TABLE +
> +				      i * LUT_ROW_SIZE);
>  		src = FIELD_GET(LUT_SRC, data);
>  		lval = FIELD_GET(LUT_L_VAL, data);
>  		core_count = FIELD_GET(LUT_CORE_COUNT, data);
> 
> +		data = readl_relaxed(base + REG_VOLT_LUT_TABLE +
> +				      i * LUT_ROW_SIZE);
> +		volt = FIELD_GET(LUT_VOLT, data) * 1000;
> +
>  		if (src)
>  			freq = xo_rate * lval / 1000;
>  		else
> @@ -123,6 +133,10 @@ static int qcom_cpufreq_hw_read_lut(struct device *dev,
> 
>  		prev_cc = core_count;
>  		prev_freq = freq;
> +
> +		freq *= 1000;
> +		for_each_cpu(cpu_r, policy->cpus)
> +			dev_pm_opp_add(get_cpu_device(cpu_r), freq, volt);

Are you sure we want to duplicate the OPP entries for all CPUs in the
cluster? IIUC the frequencies of the cores in a cluster can't be
changed individually, hence the cores should have a shared table. I
think dev_pm_opp_get_sharing_cpus() does what you need.

You currently also add OPPs for invalid frequencies. From my SDM845
device:

cat /sys/devices/system/cpu/cpufreq/policy4/scaling_available_freq
  => 825600 902400 979200 1056000 1209600 1286400 1363200 1459200
  1536000 1612800 1689600 1766400 1843200 1920000 1996800 2092800
  2169600 2246400 2323200 2400000 2476800 2553600 2649600

cat /sys/devices/system/cpu/cpufreq/policy4/scaling_boost_frequencies
2803200

ls /sys/kernel/debug/opp/cpu4/
opp:1056000000  opp:1612800000  opp:2092800000  opp:2553600000  opp:825600000
opp:1209600000  opp:1689600000  opp:2169600000  opp:2649600000  opp:902400000
opp:1286400000  opp:1766400000  opp:2246400000  opp:2707200000  opp:979200000
opp:1363200000  opp:1843200000  opp:2323200000  opp:2764800000
opp:1459200000  opp:1920000000  opp:2400000000  opp:2784000000
opp:1536000000  opp:1996800000  opp:2476800000  opp:2803200000

There are OPP entries for 2707200000, 2764800000 and 2784000000 Hz,
however these frequencies appear neither in available_frequencies nor
boost_frequencies.

>  	}
> 
>  	table[i].frequency = CPUFREQ_TABLE_END;
> @@ -159,10 +173,18 @@ static int qcom_cpufreq_hw_cpu_init(struct cpufreq_policy *policy)
>  	struct device *dev = &global_pdev->dev;
>  	struct of_phandle_args args;
>  	struct device_node *cpu_np;
> +	struct device *cpu_dev;
>  	struct resource *res;
>  	void __iomem *base;
>  	int ret, index;
> 
> +	cpu_dev = get_cpu_device(policy->cpu);
> +	if (!cpu_dev) {
> +		pr_err("%s: failed to get cpu%d device\n", __func__,
> +		       policy->cpu);
> +		return -ENODEV;
> +	}
> +
>  	cpu_np = of_cpu_device_node_get(policy->cpu);
>  	if (!cpu_np)
>  		return -EINVAL;
> @@ -205,6 +227,12 @@ static int qcom_cpufreq_hw_cpu_init(struct cpufreq_policy *policy)
>  		goto error;
>  	}
> 
> +	ret = dev_pm_opp_get_opp_count(cpu_dev);
> +	if (ret <= 0) {
> +		dev_err(cpu_dev, "OPP table is not ready\n");
> +		goto error;
> +	}
> +
>  	policy->fast_switch_possible = true;
> 
>  	return 0;

I suppose we want to remove the OPPs when the cpufreq driver is
unloaded, looks like dev_pm_opp_cpumask_remove_table() should do the
trick.

Cheers

Matthias
