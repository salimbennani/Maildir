Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 22 Nov 2018 19:05:07 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 56AFE580332;
	Thu, 22 Nov 2018 02:11:42 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 22 Nov 2018 02:11:42 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AEsaVhRFApHeCYQdFJEoIy51GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75osq4bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7Ses8US2pfU8pITiBMH5mz?=
 =?us-ascii?q?YJYTAuUcO+ZWs5Xyp0UTohegGAKgAOPixiJNinLwwKY00fkuERve0QIgAdwArX?=
 =?us-ascii?q?raotbyOqgQX+C6w6bGzS7bb/5Uwjrx9IvFfwo9rfyWQb58bczcwlQvGQPfiVWQ?=
 =?us-ascii?q?rJToMTyT1uQXsmiU8/drWP+1hG4jrwF+vCSvydwrioLUh4Ie103K+jtjwIYvP9?=
 =?us-ascii?q?KzVUl2bsCiEJtKtiGVK5F6Tdg4TGFsvCY11KEGtoW8fCUR1JsnwBrfa/idfIeT?=
 =?us-ascii?q?5RLjTvyeLS1ki3JifbKynhC/+lWjxO3kTsS4zkpGoy5fntXRuH0ByQbf5tWER/?=
 =?us-ascii?q?dh5Eus2DSC2xjc5+xFO0w4i6TWJp47zrIuiJYes17PEjHolEj0iqKda18q9fKy?=
 =?us-ascii?q?6+v9Z7Xrvp+cOJFwigH5KqkuhMO/DvoiMgQUXGiU5/681Lv98k39WrlKiec2kq?=
 =?us-ascii?q?bBvJDbI8QUuLK5DhdL3oo/7xuzFSqq3doGkXUdMV5Iew6Lg5LoNlzMOPz4CO2w?=
 =?us-ascii?q?g1WokDdl3fDGObjhD43JLnjClrfhYLl851dfyAUt19Bf4YxbCrUYLPL0VE7xss?=
 =?us-ascii?q?LXDgUiPgyqzOboFs992pkdWW2RGK+ZNr3dsVuS6uIoOemMa5cZuCzhJPg9+/7u?=
 =?us-ascii?q?kXg5lEcZfamo3psYdmq0H/t7I0iCZXrsg9EBEXoFvwYkTezqjkGCXiBXZ3qoQ6?=
 =?us-ascii?q?084TQ7Apq8DYjfXoCtnKCB3CCjE51WfG9GC0yMHm3vd4meW/cMdTidIslukjEf?=
 =?us-ascii?q?UbihSokh1QyhtQPgyrpnKPbU9TMctZ75yNd14OjTnwko9TNoF8Sdz32NT2Zsk2?=
 =?us-ascii?q?MKQD85wrpzoU96yleF16h4hOdVFdhS5/NPTwc7OoTQz+18C9DuRA3Bes2FR0qh?=
 =?us-ascii?q?QtWjGTsxVM4+w8cSY0ZhHNWvlgrM3zGqA78SlLyHHoY0/bje33XqI8Z9ynDG1L?=
 =?us-ascii?q?QujlU8Q8tPM3GmibB79wTJG4HJlECZnb6wdasAxC7N6HuDzW2WsUFbSgFwV7/J?=
 =?us-ascii?q?XXQeZkTMq9T56VjPT7uvCbQhLwtAxtSOKqpMat31k1pGQO3vN8jZY2K0g22wHw?=
 =?us-ascii?q?qHxquQbIr2fGUQxDjSB1Iakw8N53qGNRIxBiG6o23ACjxiElbvY0Dp8el6s367?=
 =?us-ascii?q?Sk40zweXb0xuzba1+xgVheCCRPMXxL4LpCAhqzBsFlanw93WE8aApxZmfKhEfN?=
 =?us-ascii?q?wy+klH2nzDuwx9JJOgKbtiiUAYcwlsu0Pu1hN3CphPkMQwrXMqyhZyJryc0F9b?=
 =?us-ascii?q?azyY2pXwMKXNKmbu5BCvd7LW2lbG3daK+6cP7fM4q0njvACpDEYi729r095P03?=
 =?us-ascii?q?uY55XKCgUSXIn1UkY28Rh6ur7bbjM854PSyX1jL620viXe1NIuAesv0gygcMtH?=
 =?us-ascii?q?MKOYCA/yFNUXCNKqKOM0lFmmcBIFMPpJ+64pIsypbf2G2K2sPOZ+hz+miWVH4I?=
 =?us-ascii?q?Zg0kOD7SZ8S+jI34obzPGcxAeISzD8jFK5uMDthY9EfS0SHna4ySX8BI9Re7d+?=
 =?us-ascii?q?cpoRBWavI8243NN+h5H2Vn5c9V6jAU4G2cCzdRqTaVz9wRNf1UANrXO7niu4yi?=
 =?us-ascii?q?R+kys1oaqHwCzO3+PieQIdOm5KWGZtl03sLpWzj9wAWkincRIplBq86Unm3adb?=
 =?us-ascii?q?oLlwIHfJQUdPeSj7NGViUqq2trqfbM9D8pIosSNLUOuiZVCWUKLyoxwf0yn7BW?=
 =?us-ascii?q?tR2Cg7dy22upX+hxF7iGOdIGxzrXbDYsFw2BHf6cfYRf5Q2DoGWSZ5hSPWBli6?=
 =?us-ascii?q?I9mm49GUm43fveC5UmKrTodTfjXzzYOcqCu74nVnAR+lkPCpmd3nEg863TXg19?=
 =?us-ascii?q?ZwViXIrxf8Yo/12KS8Ku9nekhoBFnh68t1AI1+k40whI0O1ngenJma4X0HkWLr?=
 =?us-ascii?q?O9VBxa3+dGYNRSIMw9PN4AnqwkpjImiLx4L4UHWQ2c9hZ9i8YmML1SMx9cFKCK?=
 =?us-ascii?q?GI7LNamSt5uEa3rQXUYfJlhDcS1eMu6GIGg+EOoActzT+SArEIEUlYICzjjRKI?=
 =?us-ascii?q?79+loaVTZWavd6Ww1UVkkdCgCrGCvh9TWHLjdpg+Gi9w6911MEjQ333r9oHkZN?=
 =?us-ascii?q?7QYMoWth2VkBfPlfJZKZwvmfoRmSpoJ3j9smY7xO4hghxjxpW6vImBK2Vw86O1?=
 =?us-ascii?q?GB9YNjvpZ8wN/jHhl7pRnsGT34q3BJVuBi0LXIf0TfKvCD8SqfPnNwOUHDw9sH?=
 =?us-ascii?q?ibH6ffHRSE6EdntH/PF5GrN3eKJHgW19liRR+dJFBBjwAQRjk1gpk5FgWyzsz7?=
 =?us-ascii?q?bEh5/iwR5kL/qhZU0e1nLR7/UmPCpAuybjc0VYOSLB5X7gFE+kfUPtaS7uN1Hy?=
 =?us-ascii?q?FE4JKhqBaBJXCcZwRNFWsJQFCLB0j/Prmy4tnN6+qYCfC7L/TQerWCs/BeW+2L?=
 =?us-ascii?q?xZKy0Ytm4jCMOd+UPnR5C/0720xDXW12GsjDmjUPTTAXmDzJb8KBuBi8/Sh3pN?=
 =?us-ascii?q?il8Pv3QALv+ZePC7xKPNRv/BC2nL6DN/OKiyZ/MzpYzZQMxXnHyLUE2F4Siidu?=
 =?us-ascii?q?dySiELgatC7NSr7QlbFTDxIBdyxzM85I5bom3gZRIc7bls/11rlgg/41FVhFVF?=
 =?us-ascii?q?/hmsKoZcAQIGG9LlTHBEmVO7ScOD3L2Nr6Yae9Sb1WkeVVuAe8uTedE0//IDuD?=
 =?us-ascii?q?kyPlWAyoMeFJlCubJgBRuJmhchZxDmjuVMjpagCgP99tkzI3wac4hnfLNWMHNT?=
 =?us-ascii?q?h8ckVNrqCf7C9Cg/V/HXBB4WRhLeWehymZ6OzYII4MsfR3GiR0i/5a4HMixrtJ?=
 =?us-ascii?q?7SFEQeZ5lzfIotFyo1GpjO+PxyFjUBpPrDZLmY2KsV9jOaXf6plPR3LE8AgR4m?=
 =?us-ascii?q?WXDhQAv8FlBcH3u6BM1tjPk7r+KTdY/NLS+MscBs7UJ9qGMXohKxXpHjHUARAB?=
 =?us-ascii?q?TT6qM2HfmkNcnOuT9n2Tspg1tJzslIASRb9cUVxmXs8dX0BkGsESZY9ydi0rnK?=
 =?us-ascii?q?Tdj8MS43e66h7LS4ESpYrKfvGfG/PiLHCel7YXSQEPxObVK54SPcXR0khmZ0Vw?=
 =?us-ascii?q?m8zLU3HdR8pE6nlsaBU1qwNH+Xx6Q3E53GrubQep6XUUD/fylRkz3FgtKd8x/S?=
 =?us-ascii?q?vhtg9kbmHBozE9xQxtyNg=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AjAADJf/Zbh0O0hNFiHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBg2snikeBSYwBgiGXJoFzLBMBiFAiNAkNAQMBAQEBAQECARMBAQE?=
 =?us-ascii?q?IDQkIKS+CNiSCYwMDAQIkCwFGBgkBAT4SA1QHEgWDHIICBAGqeDOKJ4dehCuBV?=
 =?us-ascii?q?z+BEYdqChGFZgKgAgcCkSQjiWGHJ4dUkiKCDU0jgzyCJxcSjgs+M4EFAQGKXYJ?=
 =?us-ascii?q?MAQE?=
X-IPAS-Result: =?us-ascii?q?A0AjAADJf/Zbh0O0hNFiHAEBAQQBAQcEAQGBUQcBAQsBg2s?=
 =?us-ascii?q?nikeBSYwBgiGXJoFzLBMBiFAiNAkNAQMBAQEBAQECARMBAQEIDQkIKS+CNiSCY?=
 =?us-ascii?q?wMDAQIkCwFGBgkBAT4SA1QHEgWDHIICBAGqeDOKJ4dehCuBVz+BEYdqChGFZgK?=
 =?us-ascii?q?gAgcCkSQjiWGHJ4dUkiKCDU0jgzyCJxcSjgs+M4EFAQGKXYJMAQE?=
X-IronPort-AV: E=Sophos;i="5.56,265,1539673200"; 
   d="scan'208";a="53338104"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 22 Nov 2018 02:11:40 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2393923AbeKVUuS (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 22 Nov 2018 15:50:18 -0500
Received: from bhuna.collabora.co.uk ([46.235.227.227]:53720 "EHLO
        bhuna.collabora.co.uk" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S2390496AbeKVUuO (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 22 Nov 2018 15:50:14 -0500
Received: from [127.0.0.1] (localhost [127.0.0.1])
        (Authenticated sender: eballetbo)
        with ESMTPSA id AC3CE27E761
From: Enric Balletbo i Serra <enric.balletbo@collabora.com>
To: linux-pm@vger.kernel.org, sre@kernel.org
Cc: Sameer Nanda <snanda@chromium.org>, gwendal@chromium.org,
        linux-kernel@vger.kernel.org, groeck@chromium.org,
        Adam.Thomson.Opensource@diasemi.com, kernel@collabora.com,
        bleung@chromium.org
Subject: [PATCH v2 2/2] power: supply: cros: allow to set input voltage and current limit.
Date: Thu, 22 Nov 2018 11:11:19 +0100
Message-Id: <20181122101119.29194-2-enric.balletbo@collabora.com>
X-Mailer: git-send-email 2.19.1
In-Reply-To: <20181122101119.29194-1-enric.balletbo@collabora.com>
References: <20181122101119.29194-1-enric.balletbo@collabora.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This patch allows reading and writing the input voltage and current
limit through the POWER_SUPPLY_PROP_INPUT_VOLTAGE_LIMIT and
POWER_SUPPLY_PROP_INPUT_CURRENT_LIMIT sysfs properties. This allows
userspace to see current values and to re-configure these values at
runtime based on system-level knowledge or user input.

By default there is no limit, this is reported as a -1 when reading from
userspace. Writing a value will set the current or voltage limit in uA
or uV, and writing any negative value will remove that limit.

Signed-off-by: Enric Balletbo i Serra <enric.balletbo@collabora.com>
---

Changes in v2:
- Fix the upper limit that can be set.
- Remove unnecessary else.

 drivers/power/supply/cros_usbpd-charger.c | 116 ++++++++++++++++++++++
 1 file changed, 116 insertions(+)

diff --git a/drivers/power/supply/cros_usbpd-charger.c b/drivers/power/supply/cros_usbpd-charger.c
index 7e9c3984ef6a..3a9ea94c3de3 100644
--- a/drivers/power/supply/cros_usbpd-charger.c
+++ b/drivers/power/supply/cros_usbpd-charger.c
@@ -53,6 +53,8 @@ struct charger_data {
 };
 
 static enum power_supply_property cros_usbpd_charger_props[] = {
+	POWER_SUPPLY_PROP_INPUT_CURRENT_LIMIT,
+	POWER_SUPPLY_PROP_INPUT_VOLTAGE_LIMIT,
 	POWER_SUPPLY_PROP_ONLINE,
 	POWER_SUPPLY_PROP_STATUS,
 	POWER_SUPPLY_PROP_CURRENT_MAX,
@@ -80,6 +82,10 @@ static enum power_supply_usb_type cros_usbpd_charger_usb_types[] = {
 	POWER_SUPPLY_USB_TYPE_APPLE_BRICK_ID
 };
 
+/* Input voltage/current limit in mV/mA. Default to none. */
+static u16 input_voltage_limit = EC_POWER_LIMIT_NONE;
+static u16 input_current_limit = EC_POWER_LIMIT_NONE;
+
 static bool cros_usbpd_charger_port_is_dedicated(struct port_data *port)
 {
 	return port->port_number >= port->charger->num_usbpd_ports;
@@ -324,6 +330,26 @@ static int cros_usbpd_charger_get_port_status(struct port_data *port,
 	return ret;
 }
 
+static int cros_usbpd_charger_set_ext_power_limit(struct charger_data *charger,
+						  u16 current_lim,
+						  u16 voltage_lim)
+{
+	struct ec_params_external_power_limit_v1 req;
+	int ret;
+
+	req.current_lim = current_lim;
+	req.voltage_lim = voltage_lim;
+
+	ret = cros_usbpd_charger_ec_command(charger, 0,
+					    EC_CMD_EXTERNAL_POWER_LIMIT,
+					    &req, sizeof(req), NULL, 0);
+	if (ret < 0)
+		dev_err(charger->dev,
+			"Unable to set the 'External Power Limit': %d\n", ret);
+
+	return ret;
+}
+
 static void cros_usbpd_charger_power_changed(struct power_supply *psy)
 {
 	struct port_data *port = power_supply_get_drvdata(psy);
@@ -396,6 +422,18 @@ static int cros_usbpd_charger_get_prop(struct power_supply *psy,
 	case POWER_SUPPLY_PROP_USB_TYPE:
 		val->intval = port->psy_usb_type;
 		break;
+	case POWER_SUPPLY_PROP_INPUT_CURRENT_LIMIT:
+		if (input_current_limit == EC_POWER_LIMIT_NONE)
+			val->intval = -1;
+		else
+			val->intval = input_current_limit * 1000;
+		break;
+	case POWER_SUPPLY_PROP_INPUT_VOLTAGE_LIMIT:
+		if (input_voltage_limit == EC_POWER_LIMIT_NONE)
+			val->intval = -1;
+		else
+			val->intval = input_voltage_limit * 1000;
+		break;
 	case POWER_SUPPLY_PROP_MODEL_NAME:
 		val->strval = port->model_name;
 		break;
@@ -409,6 +447,81 @@ static int cros_usbpd_charger_get_prop(struct power_supply *psy,
 	return 0;
 }
 
+static int cros_usbpd_charger_set_prop(struct power_supply *psy,
+				       enum power_supply_property psp,
+				       const union power_supply_propval *val)
+{
+	struct port_data *port = power_supply_get_drvdata(psy);
+	struct charger_data *charger = port->charger;
+	struct device *dev = charger->dev;
+	u16 intval;
+	int ret;
+
+	/* U16_MAX in mV/mA is the maximum supported value */
+	if (val->intval >= U16_MAX * 1000)
+		return -EINVAL;
+	/* A negative number is used to clear the limit */
+	if (val->intval < 0)
+		intval = EC_POWER_LIMIT_NONE;
+	else	/* Convert from uA/uV to mA/mV */
+		intval = val->intval / 1000;
+
+	switch (psp) {
+	case POWER_SUPPLY_PROP_INPUT_CURRENT_LIMIT:
+		ret = cros_usbpd_charger_set_ext_power_limit(charger, intval,
+							input_voltage_limit);
+		if (ret < 0)
+			break;
+
+		input_current_limit = intval;
+		if (input_current_limit == EC_POWER_LIMIT_NONE)
+			dev_info(dev,
+			  "External Current Limit cleared for all ports\n");
+		else
+			dev_info(dev,
+			  "External Current Limit set to %dmA for all ports\n",
+			  input_current_limit);
+		break;
+	case POWER_SUPPLY_PROP_INPUT_VOLTAGE_LIMIT:
+		ret = cros_usbpd_charger_set_ext_power_limit(charger,
+							input_current_limit,
+							intval);
+		if (ret < 0)
+			break;
+
+		input_voltage_limit = intval;
+		if (input_voltage_limit == EC_POWER_LIMIT_NONE)
+			dev_info(dev,
+			  "External Voltage Limit cleared for all ports\n");
+		else
+			dev_info(dev,
+			  "External Voltage Limit set to %dmV for all ports\n",
+			  input_voltage_limit);
+		break;
+	default:
+		ret = -EINVAL;
+	}
+
+	return ret;
+}
+
+static int cros_usbpd_charger_property_is_writeable(struct power_supply *psy,
+						enum power_supply_property psp)
+{
+	int ret;
+
+	switch (psp) {
+	case POWER_SUPPLY_PROP_INPUT_CURRENT_LIMIT:
+	case POWER_SUPPLY_PROP_INPUT_VOLTAGE_LIMIT:
+		ret = 1;
+		break;
+	default:
+		ret = 0;
+	}
+
+	return ret;
+}
+
 static int cros_usbpd_charger_ec_event(struct notifier_block *nb,
 				       unsigned long queued_during_suspend,
 				       void *_notify)
@@ -525,6 +638,9 @@ static int cros_usbpd_charger_probe(struct platform_device *pd)
 
 		psy_desc = &port->psy_desc;
 		psy_desc->get_property = cros_usbpd_charger_get_prop;
+		psy_desc->set_property = cros_usbpd_charger_set_prop;
+		psy_desc->property_is_writeable =
+				cros_usbpd_charger_property_is_writeable;
 		psy_desc->external_power_changed =
 					cros_usbpd_charger_power_changed;
 		psy_cfg.drv_data = port;
-- 
2.19.1

