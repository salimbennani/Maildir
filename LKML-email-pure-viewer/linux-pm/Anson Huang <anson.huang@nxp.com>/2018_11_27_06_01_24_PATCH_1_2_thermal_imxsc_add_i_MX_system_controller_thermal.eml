Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 27 Nov 2018 14:24:52 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id AD982580322;
	Mon, 26 Nov 2018 22:01:37 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 26 Nov 2018 22:01:36 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AgP5rdRH9VcQwfVd9VGXdqJ1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75r8S7bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJVyJPHJ6y?=
 =?us-ascii?q?b5cBAeQCOuhYrpXyqVQBohulHQmhBvjiyiNRhnLswaE3yfgtHRzA0Qc9H9wOqn?=
 =?us-ascii?q?PUrNDtOaoOV+C1167IzTPeZP1UxDfy8o7Ich88qvyLR71wd9HRyU4pFw/fjlWQ?=
 =?us-ascii?q?tJbqPzWa1ukWtWia4PJgWfizhG4grgF8uz6izdovhInRno8Z1EzI+CFjzIooK9?=
 =?us-ascii?q?C0VlR3bcOnHZdMrS2XNol7Tts/T211vCs20LMLtYOhcCQXypkqyATTZv2GfoSQ?=
 =?us-ascii?q?7BLsSuWcLSt9iX9gYr2wmhiy/Eulx+3yWcS51EtFoy9YndbSrX8A2Bne58iER/?=
 =?us-ascii?q?tz40is3yuE2RrJ5eFeO080kLLWK54/zb40kZoeqVrDHiDol0XslqOWdVsr+vKu?=
 =?us-ascii?q?6+v5ZrXqvJicN5V7ig3mM6QunNKwAfggPwQQQ2SW/f6w2KDt8EHnWrlGk/47nr?=
 =?us-ascii?q?XDvJ3bJ8kXvqu5DBVU0oYn5Ra/FTCm0NEAkHkDLVJFfg+HjofwN1HNPv/4F/G/?=
 =?us-ascii?q?jEqokDtywPDHMLvhDYvXLnXYjrfhcqhy61RGxAow099f/ZRUBa8FIP7pXU/xrt?=
 =?us-ascii?q?PYAgcjMwOo2+bnFMl91oQGVGKLA6+ZM73dvUWH5+IyOOSMYI4VuDDgK/kq/fLu?=
 =?us-ascii?q?jHk5mUMDcqmtx5cYdHe4HvF+KUWDfXXsmssBEXsNvgcmTOzlklyCUSJJaHa1Ra?=
 =?us-ascii?q?485iw7B5igDYfMXY2thL2B3CGmHpxZfGxGC1aMEWv2eIWAQfsDdCWSIsp5mDwe?=
 =?us-ascii?q?SbehU5Mh1Q2ptALiybpnKfTb9jcbtZLk0th14erTmAo29Tx1CcSdzm6MQ3t1nm?=
 =?us-ascii?q?MOWz85wqR/rVZhxVeE1Khym+ZYGsBL5/NVTgc6MobRwPZhC9DyXQLBfc2FSEy8?=
 =?us-ascii?q?TdWkGjwxStMxw9kTY0dyAdmijxbD3za0DL8RjbCEGJs08qfE1XjrO8l902rG1L?=
 =?us-ascii?q?Umj1Q+QctAL2umirR79wjSHYHJlUqZmr2udaQd2i7N6WiCwXCPvEFeTA5/T6HF?=
 =?us-ascii?q?UWoDaUvRqNTz/lnCQKO2CbQ7LgtBztaPJbZQZd33k1pKXvfjN87YY2KqhWiwAx?=
 =?us-ascii?q?GExrePbIrvf2UQxyHdCEkCkwAO8neKLwk+BiG9o23ACDxiD07gY0Tp8eNmsnO0?=
 =?us-ascii?q?Ulc0zx2Wb01mz7e65wQaheKCRP8J3rILoiEhqy5qE1a7xN/WD9uApwx8fKRTe9?=
 =?us-ascii?q?894VFH1X7HuAx5JJCvM6dihlsGeQRto0zuzwl3CplHkcUysHMqzQ9yKaWE0FNB?=
 =?us-ascii?q?dzKUx4zwNqfQKmno+BCvaqjW2l7F3daS+6cP7uk4qlr5sAGoEEoi72to091P33?=
 =?us-ascii?q?SA4ZXKCRIYUYjtXUYv6xh6u7babzEn6IPQy3JtPre7sz/Y190yGesq1wyvf9Fc?=
 =?us-ascii?q?MKODCg//CMkaB8moKOw3lFmldBMEPOZO9KEqO8OqbeeJ2KmuPOx4hjKpkXxH4J?=
 =?us-ascii?q?xh0kKL7yd9SvPI04wZzP2C3wqHVy3zjFGuss3snYBEZDcSHnewyCT+BY5RYLFy?=
 =?us-ascii?q?cpgPCWu0P8K3wdB+jYb3W3FE7F6jG08G2MixdBqIblzywRdf1V4Krnyggye4yS?=
 =?us-ascii?q?J7kysorqaGwCPB2eDiewcZNW5RQ2lii0zhIYy1j9AcQUipYBIllBqj5Ubm2adb?=
 =?us-ascii?q?oL5zIHXUQUdNZyL2NX1tUrOstrqeZM5C8JMpsSRNXOW8e1yaUaP9ox0B3iPnHm?=
 =?us-ascii?q?tewi07dj6wtpX4mRx6lHySLHJpoHXFfsFwwA/V5MbASv5JwjoGWC54hCHVBlem?=
 =?us-ascii?q?Jdmp/taUl5DZvuClTW2hVZ5TcSjtzYyesiu2/mlqARy5n/CuldzrCwk60Snn19?=
 =?us-ascii?q?Z0USXEtgrzYo7u166iK+JoYlFoBEPg68p9Aox/kpE/hJYK1XgYh5WV+2EKkWPy?=
 =?us-ascii?q?MdVdxKL/Y2ABRT8Nw97J/gfl3FdvIW6Ox4L8Tn+d2NduZ8GmYmMK3SIw98NKB7?=
 =?us-ascii?q?2V7LBenSt1v0C3rQTeYfVmmjcdyP0u6GMVgu0TuQotyDmdDa4WHUVCISPskBGI?=
 =?us-ascii?q?5cikrKpLfGavbaSw1E1mkNCkDbGCoRtTVGz3e5g8Bi9w8ttwMEjX33Lt8IHkd8?=
 =?us-ascii?q?LdbdYSth2SjhfBgPJZKJM3lvoWmyVnPXjxsmEiy+4+lRZux421vJCbK2Vx+6K0?=
 =?us-ascii?q?GgJYNjrwZ88J+zDil6BentuN34C0H5VsATELXJruTfK1HzMer/XnNwCSEDIirn?=
 =?us-ascii?q?eXA6bQHQia6E1+tXLAD4irN22LJHke1dhtXwOSJEtbgAAJRjk6moM5GxuuxMzg?=
 =?us-ascii?q?dkd5+z8Q6kT5qhtK1uJnKR3/Xn3Dqwevbzc+UIKfIwZO7gFe+0fVNtST7uBpEC?=
 =?us-ascii?q?Fd4JKhtxaBKnCBawRLEGEJWVGEB1b5Mbm1/tTA9+mYBuyjL/rBe7mOqOpeV+uW?=
 =?us-ascii?q?ypKryIdp4zGMNsCXNHl4E/I7wlZDXWx+G8nBmzQPTDEXlzvQb8GBohew4DZ3rs?=
 =?us-ascii?q?e58PTkQw/v4YqPC71PMdRg4Ry2gKGDN/KOiyZ9MzpXypQMxXrQwrgFwFESkz1u?=
 =?us-ascii?q?dyWqEbkYtS7CUqPQmqxUDx4acS9zN9FI76Uz3gZTI87bl8j126V8jv40DVdFSF?=
 =?us-ascii?q?PgltuoZcwMP2GyKlfHCFyXO7SBID3B29v3br+kSb1MkOVUsAW9tiyGE0D4JDSM?=
 =?us-ascii?q?iTnoWwqrMeFNlyybOB1euIegchdiE2TjTdTmagGlP99zlzE53bo0hnbSP24GLT?=
 =?us-ascii?q?d8a19NrqGX7S5AnvV/GmlB4mB5IuWehymZ7/fXKpANvPtvAyR0kf9a4Xsgx7tU?=
 =?us-ascii?q?6iFEWOJ6mC/IotFypFGml/GFyiB7XxpWtjZLmIWLsF1iOKrD8JlAXHfE/BQV4m?=
 =?us-ascii?q?SRCxQFvd1lCtL0tqBUy9jPkr/zKThY/9LV+8scG9bbKMadPHU9NhrpHW2cMAxQ?=
 =?us-ascii?q?ByS2NCfNh0Vbn9mT8GGYqt4xrZ2m0M4UV74dRlw8EPwyC0J5EdhEK5ByCHds27?=
 =?us-ascii?q?OXkcQF92S3qDHeQcxbutbMUffYSaHiJCuTgKtabh8gzrbxLIBVPYr+jQgqIFVz?=
 =?us-ascii?q?moXHHwzUUMJGqytmRgs1pkxX9z55VGJ5kxbpYwWs7XtVEfOmlRcwjSN6YOIk7j?=
 =?us-ascii?q?Cq5E04cB6C7jE3mklylcnNgj2LdjP1aqCqUsseXzDzvUhyPo/TQAtvawC220t+?=
 =?us-ascii?q?O2GAD/hUhqFjM3p2lAvVv5dnEORZC6ZDZVVYkfSeffZuy0lAriyhyWdO/+6DAp?=
 =?us-ascii?q?xnwk9iO5qtqW9QnhpmRMA6KLaWJ6dTyFVUwKWUsWXgguQwxhIOYl4I2H2ddTRO?=
 =?us-ascii?q?u0ESMLQiYS2y8boooUaOliVCc2UQTfcniuxl+1l7OOmayS/klblZJQr5Y+CSMa?=
 =?us-ascii?q?KStnTamMOgXFw9zAULmlND8Lww1t0sJQ7cHUQuyqaBUhcEL8zPLSlLYMdIsnve?=
 =?us-ascii?q?ZyCDtaPK250/d9G5F+b1XaqNubwSj0aMAgkkBcIP494HE53q11vXe5TJNrkAnD?=
 =?us-ascii?q?wr/wPtbHWYBfJGMEaCliwApYe/0ZZx0qFbNilbCmJ4Z3bkro3LrxMn1aLQFOw9?=
 =?us-ascii?q?ZW0XC85dbio7?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0DUAACY3Pxbh0O0hNFkgheBMVBpcwQLJ?=
 =?us-ascii?q?wqHNgOQCEqCIZcpFIFfEwEYAxABgUuCdYQkIjQJDQEDAQEBAQEBAgETAQEBCA0?=
 =?us-ascii?q?JCCkjDII2JAGCaQIkGQEBNwEFCQIBAU4DLycEAQ0FBYMcAYIAAQECAppiAooHg?=
 =?us-ascii?q?WwzgnYBAQWBBAGGJwiHXoQrgVc/gRGHVR8jhVSJFggGhX1CgQOOYEYHAoIcBI8?=
 =?us-ascii?q?SFoFZhQuDJIcBLJAXh0sCBAIEBQINAQEFgUaCDTMaI4M8CYIeF4NKhEqFUjZyg?=
 =?us-ascii?q?QUBASGMIgGBHgEB?=
X-IPAS-Result: =?us-ascii?q?A0DUAACY3Pxbh0O0hNFkgheBMVBpcwQLJwqHNgOQCEqCIZc?=
 =?us-ascii?q?pFIFfEwEYAxABgUuCdYQkIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2JAGCa?=
 =?us-ascii?q?QIkGQEBNwEFCQIBAU4DLycEAQ0FBYMcAYIAAQECAppiAooHgWwzgnYBAQWBBAG?=
 =?us-ascii?q?GJwiHXoQrgVc/gRGHVR8jhVSJFggGhX1CgQOOYEYHAoIcBI8SFoFZhQuDJIcBL?=
 =?us-ascii?q?JAXh0sCBAIEBQINAQEFgUaCDTMaI4M8CYIeF4NKhEqFUjZygQUBASGMIgGBHgE?=
 =?us-ascii?q?B?=
X-IronPort-AV: E=Sophos;i="5.56,285,1539673200"; 
   d="scan'208";a="139693447"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 26 Nov 2018 22:01:34 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728113AbeK0Q6Q (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 27 Nov 2018 11:58:16 -0500
Received: from mail-eopbgr60076.outbound.protection.outlook.com ([40.107.6.76]:46928
        "EHLO EUR04-DB3-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726363AbeK0Q6Q (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 27 Nov 2018 11:58:16 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=nxp.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=vX54m5AIv9rjGDUBWzdd2ilpfc/wsaQLSEXWcYj9Sfs=;
 b=UWObrotcywj7i1f+asFEOeSXfG4PGyCR3juL1OGw7qjAnl8JpQW2ebDE0enMFfY+Utgcu53C9rFHtGRwJdVReVqdvfUoeyCm0XrqfN1t/WVNb8GCSQudF/SZp3BGKhQsL9hWtL6TMflIjwsq5VsNiFLqmMef/oowl5C5lm1CObA=
Received: from DB3PR0402MB3916.eurprd04.prod.outlook.com (52.134.72.18) by
 DB3PR0402MB3836.eurprd04.prod.outlook.com (52.134.71.139) with Microsoft SMTP
 Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1339.26; Tue, 27 Nov 2018 06:01:24 +0000
Received: from DB3PR0402MB3916.eurprd04.prod.outlook.com
 ([fe80::adf8:f49d:deb4:58fd]) by DB3PR0402MB3916.eurprd04.prod.outlook.com
 ([fe80::adf8:f49d:deb4:58fd%2]) with mapi id 15.20.1361.019; Tue, 27 Nov 2018
 06:01:24 +0000
From: Anson Huang <anson.huang@nxp.com>
To: "rui.zhang@intel.com" <rui.zhang@intel.com>,
        "edubezval@gmail.com" <edubezval@gmail.com>,
        "daniel.lezcano@linaro.org" <daniel.lezcano@linaro.org>,
        "robh+dt@kernel.org" <robh+dt@kernel.org>,
        "mark.rutland@arm.com" <mark.rutland@arm.com>,
        "linux-pm@vger.kernel.org" <linux-pm@vger.kernel.org>,
        "devicetree@vger.kernel.org" <devicetree@vger.kernel.org>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>
CC: dl-linux-imx <linux-imx@nxp.com>
Subject: [PATCH 1/2] thermal: imx_sc: add i.MX system controller thermal
 support
Thread-Topic: [PATCH 1/2] thermal: imx_sc: add i.MX system controller thermal
 support
Thread-Index: AQHUhhagjtJH9JhYt0KEkQzWYsiZig==
Date: Tue, 27 Nov 2018 06:01:24 +0000
Message-ID: <1543298147-8155-1-git-send-email-Anson.Huang@nxp.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-mailer: git-send-email 2.7.4
x-clientproxiedby: HK0PR01CA0066.apcprd01.prod.exchangelabs.com
 (2603:1096:203:a6::30) To DB3PR0402MB3916.eurprd04.prod.outlook.com
 (2603:10a6:8:10::18)
authentication-results: spf=none (sender IP is )
 smtp.mailfrom=anson.huang@nxp.com; 
x-ms-exchange-messagesentrepresentingtype: 1
x-originating-ip: [119.31.174.66]
x-ms-publictraffictype: Email
x-microsoft-exchange-diagnostics: 1;DB3PR0402MB3836;6:ZBNl38eE0wtzzk2EYlLEjuV7tXvS1pX8DSgAc1m5t9QlkoHzhczNEkFRgdHEqWsKejNqbKfAeylIv/XgMqp4YWOCylHhSYBalmMnuDhYNxlwZVlJ/HSB40DXNhy1kNO8qdU3KO4ViLzdb+I2cBsc07BmywvDclqpI5SME2lbbXX9GOrBYwWp2ue0+w2wsNnTkIeX7zscBIRv7bxKA1DOIDjK9A+V0Ki6bO9vG7zFNzMdqE6jKFjWRzZ0pRYjUsYZDPJfKKdhQ34vWLtUqrW3NQBR3qJCNLORsEFNjkX2i+hO9b2lH49oYbT9qD32RxKPpNZhKOEkoC246F9xHd2hwXljfxJ/mt5v9U2Igazx0DaB8ZhccqeSvmbfcGYtn4ZA3o3gW7n+U2VjWdNcI8QYCI0QNiywCwjkeYJtrB6fv/uDn7Jgritym7qePEq6EbmDaxaEmmDcoJpBvkLorkUFKg==;5:tmmOWcZA+2R3bMhzMAvtLxwMCnoNEkjKfX+LJuWieZcJdaK0LZu6dfhguC/rERw/j7rMsIdz48MFshHf3UWL3kwVYfByuemEfp3pdjeXj+d71MYUr3IboFO8YFZEGG/3CEMtBEqsB66lp5e9H6nA5Ftv2qXNA8pWdt7IAf9QKwI=;7:cKjUPmalZHudaPQA+vVYg7vr163fSNwRB8FSgka1PJGVn65OKOeupzI2fQSnxHjDAmjBnxpy7OkdQA74d2tg5q+CDUHiSx1bGbjzmW89tDfwvuKWsDYR4x5xiIDcNI3HRJ6ovdQLbdde2ngY/qypuw==
x-ms-office365-filtering-correlation-id: 4e244087-7cca-4478-a70a-08d6542dc2b7
x-ms-office365-filtering-ht: Tenant
x-microsoft-antispam: BCL:0;PCL:0;RULEID:(2390098)(7020095)(4652040)(8989299)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(5600074)(711020)(4618075)(2017052603328)(7153060)(7193020);SRVR:DB3PR0402MB3836;
x-ms-traffictypediagnostic: DB3PR0402MB3836:
x-microsoft-antispam-prvs: <DB3PR0402MB38361FDAFC95ECAA8F077548F5D00@DB3PR0402MB3836.eurprd04.prod.outlook.com>
x-ms-exchange-senderadcheck: 1
x-exchange-antispam-report-cfa-test: BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(8121501046)(5005006)(3231443)(944501410)(52105112)(93006095)(93001095)(10201501046)(3002001)(6055026)(148016)(149066)(150057)(6041310)(20161123560045)(20161123562045)(20161123558120)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123564045)(201708071742011)(7699051)(76991095);SRVR:DB3PR0402MB3836;BCL:0;PCL:0;RULEID:;SRVR:DB3PR0402MB3836;
x-forefront-prvs: 086943A159
x-forefront-antispam-report: SFV:NSPM;SFS:(10009020)(39860400002)(346002)(396003)(376002)(366004)(136003)(189003)(199004)(2201001)(39060400002)(71200400001)(71190400001)(110136005)(486006)(476003)(6486002)(8936002)(6436002)(478600001)(6116002)(3846002)(81166006)(97736004)(86362001)(8676002)(81156014)(50226002)(4326008)(105586002)(52116002)(99286004)(26005)(36756003)(106356001)(2616005)(68736007)(2906002)(14454004)(6512007)(7736002)(25786009)(66066001)(305945005)(53936002)(5660300001)(6506007)(186003)(102836004)(316002)(256004)(386003)(2501003)(2004002);DIR:OUT;SFP:1101;SCL:1;SRVR:DB3PR0402MB3836;H:DB3PR0402MB3916.eurprd04.prod.outlook.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;MX:1;A:1;
x-microsoft-antispam-message-info: Xy6+Xw8D474PIMrIFXeONgKXBUXZr+pC8psLHguWarvG98Vhl5xRQHRkfUNWYsvQlPnJ+6KKuAfa6CnGMJx8Pcjx3A71v6Ko2u50SGNF0O/8VE0LX8jcI4RWKX5qUB1FzYQhlvuaCYxdWFWAmxqIpPYXUdFsXgF46VuDkm/SjjqhrptdfIoGaQSBsJ8ko5SjTK6esw9kuC0M05CB+NQNkiklKwyhAQFftLTZ3FKhDZe8QgCgDZ/3DyVOr/OTg4tJbrLlEMCuxk0f7VM2n6RhJ5BXpuepnF4jkSjs2wsT5n5D8tWGUjBgWM/e9r4PGExCWlyJPHWBxBcCKiaH8Z7JRLGF6eIZr4eZlZFdZhsJ3KY=
spamdiagnosticoutput: 1:99
spamdiagnosticmetadata: NSPM
Content-Type: text/plain; charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
X-OriginatorOrg: nxp.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 4e244087-7cca-4478-a70a-08d6542dc2b7
X-MS-Exchange-CrossTenant-originalarrivaltime: 27 Nov 2018 06:01:24.2987
 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: 686ea1d3-bc2b-4c6f-a92c-d99c5c301635
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DB3PR0402MB3836
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

i.MX8QXP is an ARMv8 SoC which has a Cortex-M4 system controller
inside, the system controller is in charge of controlling power,
clock and thermal sensors etc..

This patch adds i.MX system controller thermal driver support,
Linux kernel has to communicate with system controller via MU
(message unit) IPC to get each thermal sensor's temperature,
it supports multiple sensors which are passed from device tree,
please see the binding doc for details.

Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
---
 drivers/thermal/Kconfig          |  11 ++
 drivers/thermal/Makefile         |   1 +
 drivers/thermal/imx_sc_thermal.c | 221 +++++++++++++++++++++++++++++++++++=
++++
 3 files changed, 233 insertions(+)
 create mode 100644 drivers/thermal/imx_sc_thermal.c

diff --git a/drivers/thermal/Kconfig b/drivers/thermal/Kconfig
index 0e69edc..84e850c 100644
--- a/drivers/thermal/Kconfig
+++ b/drivers/thermal/Kconfig
@@ -222,6 +222,17 @@ config IMX_THERMAL
 	  cpufreq is used as the cooling device to throttle CPUs when the
 	  passive trip is crossed.
=20
+config IMX_SC_THERMAL
+	tristate "Temperature sensor driver for NXP i.MX SoCs with System Control=
ler"
+	depends on ARCH_MXC || COMPILE_TEST
+	depends on OF
+	help
+	  Support for Temperature Monitor (TEMPMON) found on NXP i.MX SoCs with
+	  system controller inside, Linux kernel has to communicate with system
+	  controller via MU (message unit) IPC to get temperature from thermal
+	  sensor. It supports one critical trip point and one
+	  passive trip point for each thermal sensor.
+
 config MAX77620_THERMAL
 	tristate "Temperature sensor driver for Maxim MAX77620 PMIC"
 	depends on MFD_MAX77620
diff --git a/drivers/thermal/Makefile b/drivers/thermal/Makefile
index 610344e..1b13f6a 100644
--- a/drivers/thermal/Makefile
+++ b/drivers/thermal/Makefile
@@ -41,6 +41,7 @@ obj-$(CONFIG_DB8500_THERMAL)	+=3D db8500_thermal.o
 obj-$(CONFIG_ARMADA_THERMAL)	+=3D armada_thermal.o
 obj-$(CONFIG_TANGO_THERMAL)	+=3D tango_thermal.o
 obj-$(CONFIG_IMX_THERMAL)	+=3D imx_thermal.o
+obj-$(CONFIG_IMX_SC_THERMAL)	+=3D imx_sc_thermal.o
 obj-$(CONFIG_MAX77620_THERMAL)	+=3D max77620_thermal.o
 obj-$(CONFIG_QORIQ_THERMAL)	+=3D qoriq_thermal.o
 obj-$(CONFIG_DA9062_THERMAL)	+=3D da9062-thermal.o
diff --git a/drivers/thermal/imx_sc_thermal.c b/drivers/thermal/imx_sc_ther=
mal.c
new file mode 100644
index 0000000..2b34ce2
--- /dev/null
+++ b/drivers/thermal/imx_sc_thermal.c
@@ -0,0 +1,221 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright 2018 NXP.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ */
+
+#include <linux/err.h>
+#include <linux/firmware/imx/sci.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/platform_device.h>
+#include <linux/slab.h>
+#include <linux/thermal.h>
+
+#include "thermal_core.h"
+
+#define IMX_SC_MISC_FUNC_GET_TEMP	13
+#define IMX_SC_C_TEMP			0
+
+struct imx_sc_ipc *thermal_ipc_handle;
+
+struct imx_sc_sensor {
+	struct thermal_zone_device *tzd;
+	unsigned int resource_id;
+};
+
+struct imx_sc_thermal_data {
+	struct imx_sc_sensor *sensor;
+};
+
+struct imx_sc_msg_req_misc_get_temp {
+	struct imx_sc_rpc_msg hdr;
+	u16 resource_id;
+	u8 type;
+} __packed;
+
+struct imx_sc_msg_resp_misc_get_temp {
+	struct imx_sc_rpc_msg hdr;
+	u16 celsius;
+	u8 tenths;
+} __packed;
+
+static int imx_sc_thermal_get_temp(void *data, int *temp)
+{
+	struct imx_sc_msg_resp_misc_get_temp *resp;
+	struct imx_sc_msg_req_misc_get_temp msg;
+	struct imx_sc_rpc_msg *hdr =3D &msg.hdr;
+	struct imx_sc_sensor *sensor =3D data;
+	int ret;
+
+	msg.resource_id =3D sensor->resource_id;
+	msg.type =3D IMX_SC_C_TEMP;
+
+	hdr->ver =3D IMX_SC_RPC_VERSION;
+	hdr->svc =3D IMX_SC_RPC_SVC_MISC;
+	hdr->func =3D IMX_SC_MISC_FUNC_GET_TEMP;
+	hdr->size =3D 2;
+
+	ret =3D imx_scu_call_rpc(thermal_ipc_handle, &msg, true);
+	if (ret) {
+		pr_err("read temp sensor %d failed, ret %d\n",
+			sensor->resource_id, ret);
+		return ret;
+	}
+
+	resp =3D (struct imx_sc_msg_resp_misc_get_temp *)&msg;
+	*temp =3D resp->celsius * 1000 + resp->tenths * 100;
+
+	return 0;
+}
+
+static const struct thermal_zone_of_device_ops imx_sc_thermal_ops =3D {
+	.get_temp =3D imx_sc_thermal_get_temp,
+};
+
+static int imx_sc_thermal_register_sensor(struct platform_device *pdev,
+					  struct imx_sc_sensor *sensor)
+{
+	struct thermal_zone_device *tzd;
+
+	tzd =3D devm_thermal_zone_of_sensor_register(&pdev->dev,
+						   sensor->resource_id,
+						   sensor,
+						   &imx_sc_thermal_ops);
+	if (IS_ERR(tzd)) {
+		dev_err(&pdev->dev, "failed to register sensor: %d\n",
+			sensor->resource_id);
+		return -EINVAL;
+	}
+
+	sensor->tzd =3D tzd;
+
+	return 0;
+}
+
+static int imx_sc_thermal_get_sensor_id(struct device_node *sensor_np)
+{
+	struct of_phandle_args sensor_specs;
+	int ret;
+
+	ret =3D of_parse_phandle_with_args(sensor_np, "thermal-sensors",
+			"#thermal-sensor-cells",
+			0, &sensor_specs);
+	if (ret)
+		return ret;
+
+	if (sensor_specs.args_count >=3D 1) {
+		ret =3D sensor_specs.args[0];
+		WARN(sensor_specs.args_count > 1,
+				"%pOFn: too many cells in sensor specifier %d\n",
+				sensor_specs.np, sensor_specs.args_count);
+	} else {
+		ret =3D 0;
+	}
+
+	return ret;
+}
+
+static int imx_sc_thermal_probe(struct platform_device *pdev)
+{
+	struct device_node *np =3D pdev->dev.of_node;
+	struct device_node *sensor_np =3D NULL;
+	struct imx_sc_thermal_data *data;
+	struct imx_sc_sensor *sensors;
+	u32 sensor_num;
+	int ret, i;
+
+	ret =3D imx_scu_get_handle(&thermal_ipc_handle);
+	if (ret) {
+		if (ret =3D=3D -EPROBE_DEFER)
+			return ret;
+
+		dev_err(&pdev->dev, "failed to get ipc handle: %d!\n", ret);
+		return ret;
+	}
+
+	data =3D devm_kzalloc(&pdev->dev, sizeof(*data), GFP_KERNEL);
+	if (!data)
+		return -ENOMEM;
+
+	ret =3D of_property_read_u32(np, "tsens-num", &sensor_num);
+	if (ret || !sensor_num) {
+		dev_err(&pdev->dev, "failed to get valid temp sensor number!\n");
+		ret =3D -EINVAL;
+		goto free_data;
+	}
+
+	sensors =3D devm_kzalloc(&pdev->dev, sizeof(*data->sensor) * sensor_num,
+			       GFP_KERNEL);
+	if (!sensors) {
+		ret =3D -ENOMEM;
+		goto free_data;
+	}
+
+	data->sensor =3D sensors;
+
+	np =3D of_find_node_by_name(NULL, "thermal-zones");
+	if (!np) {
+		ret =3D -ENODEV;
+		goto free_sensors;
+	}
+
+	for (i =3D 0; i < sensor_num; i++) {
+		struct imx_sc_sensor *sensor =3D &data->sensor[i];
+
+		sensor_np =3D of_get_next_child(np, sensor_np);
+		sensor->resource_id =3D imx_sc_thermal_get_sensor_id(sensor_np);
+		if (sensor->resource_id < 0) {
+			dev_err(&pdev->dev, "invalid sensor resource id: %d\n",
+				sensor->resource_id);
+			ret =3D sensor->resource_id;
+			goto put_node;
+		}
+
+		ret =3D imx_sc_thermal_register_sensor(pdev, sensor);
+		if (ret) {
+			dev_err(&pdev->dev, "failed to register thermal sensor: %d\n",
+				ret);
+			goto put_node;
+		}
+	}
+
+	of_node_put(sensor_np);
+	of_node_put(np);
+
+	return 0;
+
+put_node:
+	of_node_put(np);
+	of_node_put(sensor_np);
+free_sensors:
+	kfree(sensors);
+free_data:
+	kfree(data);
+
+	return ret;
+}
+
+static const struct of_device_id imx_sc_thermal_table[] =3D {
+	{ .compatible =3D "nxp,imx8qxp-sc-thermal", },
+	{},
+};
+MODULE_DEVICE_TABLE(of, imx_sc_thermal_table);
+
+static struct platform_driver imx_sc_thermal_driver =3D {
+		.probe =3D imx_sc_thermal_probe,
+		.driver =3D {
+			.name =3D "imx-sc-thermal",
+			.of_match_table =3D imx_sc_thermal_table,
+		},
+};
+module_platform_driver(imx_sc_thermal_driver);
+
+MODULE_AUTHOR("Anson Huang <Anson.Huang@nxp.com>");
+MODULE_DESCRIPTION("Thermal driver for NXP i.MX SoCs with system controlle=
r");
+MODULE_LICENSE("GPL v2");
--=20
2.7.4

