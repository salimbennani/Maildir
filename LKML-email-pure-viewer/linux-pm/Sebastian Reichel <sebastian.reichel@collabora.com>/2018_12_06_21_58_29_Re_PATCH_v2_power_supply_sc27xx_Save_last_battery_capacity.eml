Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:54:30 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id CBE4C580375;
	Thu,  6 Dec 2018 14:01:40 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga001-1.jf.intel.com with ESMTP; 06 Dec 2018 14:01:40 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ANmUI5RAjD0sFTclMq53TUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7+p8WwAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95fWSJBHI2y?=
 =?us-ascii?q?cogBD+QOMulEsobypVUBrQCmBQSuH+7vxSNEimPs0KEmyektDwfL1xEgEdIUt3?=
 =?us-ascii?q?TUqc34OroMXu+u1qbI1inDb/JM1jf79YPGbg4uofCQUrJwb8XRzVQkGgTejlqO?=
 =?us-ascii?q?soPqJSiV1vgMs2eB6epsT/ivhHAmqw5tojig2MMsh5LViYISzlDE8T92z50yJd?=
 =?us-ascii?q?2iUkF3e8KrEJxVtyyDMYZ9X8AsQ3lwtSok1rELvYS3cDUExZg53RLTdv+Kf5SS?=
 =?us-ascii?q?7h/iVuudOTh1iXN/dL6hiRu/8VKsxvPiWsS2ylpGsDRJn9vKu3sQzRLc8NKHRe?=
 =?us-ascii?q?F4/kq52TaAyQTT6uZcLEAqmqrUNYQhzqQzlpUNq0TDGDH5mEHsgK+RbEUk9fCk?=
 =?us-ascii?q?6+XhYrr4up+RL5F4hh36P6g0h8CyD/o0PhITU2WY5eiwzrzu8E/hTLVPlPI2k6?=
 =?us-ascii?q?3ZsJ7AJcQco660GwtV0ocl6xaiADaqydcYkmcdLFJDZh2Hi5HlO1bAIfD+E/i/?=
 =?us-ascii?q?mU+hkClkx//YJL3tGJbNIWbZkLfnY7l971RQyA0pzdBQ/55UEK0OIOrvWk/ts9?=
 =?us-ascii?q?zVFhs5Mw23w+n5Etl82Z4eVHmLAq+YNqPSrFCJ6vguI+mKeI8apjL9J+I56P7p?=
 =?us-ascii?q?iH8zgUUdcrWx3ZsLdHC4GexrI0WDbnrtntcOC2AKshA+TOz3klKCVzFTam22X6?=
 =?us-ascii?q?I94DE7FY2nAZ3CRoCrnLyOwiO7EodKaWBBD1CGCW3oeJmcW/cQdCKSJddskj4D?=
 =?us-ascii?q?Vbe/UYMh1hautAn8y7pgNefU/iwYtZT+1Nl6/eHTlBcy9SBqAMSZyW2CU2Z0nm?=
 =?us-ascii?q?YQTT8swK9/uVB9ykuE0aVgmfNYDtxT5/RKUgsgL57T1e56Bsv2WgLAeNeJVVmn?=
 =?us-ascii?q?Ts+nATE3UtI+3dsOb1xhFNWlixDJxzCqDKMNl7yXGJw09brR33vrKMZ70XrG0K?=
 =?us-ascii?q?ghgEMgQstALmCmgq9/9w7OB4/GiUmZlqCqdbgC0y7J7muM0W2OvERAWg5qTarF?=
 =?us-ascii?q?RWwfZlfRrdnh+0zNVaGuBqo9PgtB08GCLLBKZcPvjVlBQPfjO9HeY2aqlme0BB?=
 =?us-ascii?q?aIwK6MbYXwd2Uc2iXdFFYLkwQJ8XmaMgg+Az+ro3jCAzx2CVLvf0Ts/PFjp3yh?=
 =?us-ascii?q?UE870RuGb0172Lqz4R4am/qcRugX3rIFvichtjp1EEy839LQF9qPuQ5hcL9Abt?=
 =?us-ascii?q?M65VdNzXjZuBBlPpy8M6BigUYTcxh2v0Pr0BV3FoVAkMgwoHM21gZyLriY0FdA?=
 =?us-ascii?q?dzOe0pD9IbnXKmj0/BCyZK/awFDe0NCK+qgR7PQ0sUnsvAasFkA66XVoz8FV02?=
 =?us-ascii?q?eA5pXNFAcdS5bxXVg49hdkp7DWeDIy557J2nJ2N6m0sTjC28wyCeshyxagecpf?=
 =?us-ascii?q?MayeGA/zFc0aG9ahKOgwl1e1aRIEOfhY9LQoMMO+a/uGxKmrMf5gnTK7l2hI/J?=
 =?us-ascii?q?px00OM9yVmTO7I0I0Iw/WZ3guBSjf9g02tssHxmYBYez4SGnCzxjTjBI5Ufqdy?=
 =?us-ascii?q?Z5oECX+yI82rwdVzn4TtW39E+1G5HVMJxcipdQCUb1Pjxw1Q1F0brmC9liu80j?=
 =?us-ascii?q?N7jSsprq2Z3CHVx+TidRwHOnNERWV4jFfsJ5S0gM4eXESycwcpkx6l717gx6dH?=
 =?us-ascii?q?vKR/M3XTQUBQcin2LmFuSKuxuqCZY85S7pMlqiFXUOW6YVCHRb/xuRoa0yX/H2?=
 =?us-ascii?q?RAwDA3bS2lupL8nxZikmKSMG5zrGbFecF33Rrf5sbTReRS3joFQyl0kyLXCUK/?=
 =?us-ascii?q?P9mq/NWUkYnMsualWmKlV51TdzTrzIyauCu6421qHQOwn/SpltL7Fgg61Dfx18?=
 =?us-ascii?q?N2WiXQsBb8fo7r2ry6MO19eUlkHl3868t8GoxlloswhZcQ2WUVh5mP/HoHl3vz?=
 =?us-ascii?q?Pstf2a7kcHUNQjsLycbP4Af5wE1jMm6Jx4XhW3We2MRhZsO2YmML2i0n6cBKB7?=
 =?us-ascii?q?yZ7LhFnStzv1q5ohjdYfl7njcB1/Qu7GQWjP0OuAoo1i+dGKwdHVFEPSzwkBSF?=
 =?us-ascii?q?99W+rKRUZGm1a7Sx2lRxncu9DL6cuAFTQ2j2eo0tHSJr6sV/MVTM0GD8643+ed?=
 =?us-ascii?q?nQa84TuQOQkxvak+dVL5cxnOIQhSV7IWL9oWEly+kjgBxy2pG6uZKLKmR386K/?=
 =?us-ascii?q?Hx5YLSb1Z8II9zHpjKZemNuW3o+1EpVgHDULQIXnTfayHD0OsvTnMh6EECcgpX?=
 =?us-ascii?q?eDBbrfAQif5V99oH3VFJCrM2yXKGMdzdV/XxSdIE1fgAYJXDQ1hJI5FwaqxND/?=
 =?us-ascii?q?f0d9/Dwe+ln4qh5UwOJyKxb/SnvfpBuvajosSpiQNh9W4R9Z50vPLcyS9OFzHz?=
 =?us-ascii?q?xb/p28qgyCMHebah9MDWEIXEyEGl/iMqOv5dnG7+iXGO6+I+HSbrWJrOxUT+2I?=
 =?us-ascii?q?yo630ot64zaMMd2CP3llD/0mw0pDQGp2G8LDlzUUTCwXkS3NYtWfpBe9/C13s8?=
 =?us-ascii?q?++/O7qWALp+YuAFb9SPc9z9BCxhKeJL/SQizphKTZEypMMwmfFyLgB014TiCFu?=
 =?us-ascii?q?dDitHa4DtS7XS6LQlbFYDwQGayNoL8ZI66M83g9QOc/UkN/117h4juIrBFdBT1?=
 =?us-ascii?q?DuhsapZckSKWGnKFzHHFqLNKiBJTDT2c73fLizSadOg+RUrRGwvTebHlTnPjSC?=
 =?us-ascii?q?kTnpSh+uPftNjCGdIBxRpoW9fgxxBmjkSdLscge7P8NvjT0q3b00gWvHNXIdMT?=
 =?us-ascii?q?h5aU9Csqec4j9YgvphHWxM9X5lLeiCmyaE4OjUMJcWsf13Aitqk+JW+mg1y7xQ?=
 =?us-ascii?q?7CtcXvx6hDPSrsJyo1GhiuSOyiBoUBxLqjZKgoKEpURjOaXD+ZlGVnbJ5xYN7W?=
 =?us-ascii?q?SWCxQXqNppENzvu6ZMytfRkKL/MitN89XR/ZhUO8+BAsuANHsneSXgHjGcWAEM?=
 =?us-ascii?q?SjqqMyfAjkpSuPWT8HSPqd49sJe6y7QUTboOb1E/H+gGC01jVOYPIZx3Uzdsxa?=
 =?us-ascii?q?WWhscT+Xu3ql/LScRRvp3DfvmVBfHmIjGDhP9PYB5ekuCwFpgaKoCugx8qUVJ9?=
 =?us-ascii?q?homfXhOIBd0=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAABsmwlch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBg2snjBOMD4INFJc6gXMCDR0TAYdXIjQJDQEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BCA0JCCkjDII2JAGCYQEBAQECAQECJFIFAQkBAQoVAwkTEgMMHSsGEwWDHAGBe?=
 =?us-ascii?q?QgEAadAM4ocD4JtiTKBVz+EI4RAChuFdwKJK4dYj1wHAoIgBI8XCxiBXIgWJoc?=
 =?us-ascii?q?eh3SSXl+BLjMaI4M8gicXi3eCJz4zgQUBAYdtgk0BAQ?=
X-IPAS-Result: =?us-ascii?q?A0ANAABsmwlch0O0hNFjHAEBAQQBAQcEAQGBUQcBAQsBg2s?=
 =?us-ascii?q?njBOMD4INFJc6gXMCDR0TAYdXIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2J?=
 =?us-ascii?q?AGCYQEBAQECAQECJFIFAQkBAQoVAwkTEgMMHSsGEwWDHAGBeQgEAadAM4ocD4J?=
 =?us-ascii?q?tiTKBVz+EI4RAChuFdwKJK4dYj1wHAoIgBI8XCxiBXIgWJoceh3SSXl+BLjMaI?=
 =?us-ascii?q?4M8gicXi3eCJz4zgQUBAYdtgk0BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,323,1539673200"; 
   d="asc'?scan'208";a="56444830"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 06 Dec 2018 14:01:38 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726043AbeLFV6f (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 6 Dec 2018 16:58:35 -0500
Received: from bhuna.collabora.co.uk ([46.235.227.227]:55572 "EHLO
        bhuna.collabora.co.uk" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725952AbeLFV6f (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 6 Dec 2018 16:58:35 -0500
Received: from [127.0.0.1] (localhost [127.0.0.1])
        (Authenticated sender: sre)
        with ESMTPSA id 0EAAD260441
Received: by earth.universe (Postfix, from userid 1000)
        id 47FE93C08D6; Thu,  6 Dec 2018 22:58:29 +0100 (CET)
Date: Thu, 6 Dec 2018 22:58:29 +0100
From: Sebastian Reichel <sebastian.reichel@collabora.com>
To: Baolin Wang <baolin.wang@linaro.org>
Cc: linux-pm@vger.kernel.org, linux-kernel@vger.kernel.org,
        yuanjiang.yu@unisoc.com, broonie@kernel.org, pavel@ucw.cz
Subject: Re: [PATCH v2] power: supply: sc27xx: Save last battery capacity
Message-ID: <20181206215829.kmykasyp2nurwpkt@earth.universe>
References: <271ebbae85bc544cbcb6925a10de30267f8eb3ee.1544066225.git.baolin.wang@linaro.org>
MIME-Version: 1.0
Content-Type: multipart/signed; micalg=pgp-sha512;
        protocol="application/pgp-signature"; boundary="bdvnz5ydqusftk5f"
Content-Disposition: inline
In-Reply-To: <271ebbae85bc544cbcb6925a10de30267f8eb3ee.1544066225.git.baolin.wang@linaro.org>
User-Agent: NeoMutt/20180716
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org


--bdvnz5ydqusftk5f
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable

Hi,

On Thu, Dec 06, 2018 at 11:20:39AM +0800, Baolin Wang wrote:
> From: Yuanjiang Yu <yuanjiang.yu@unisoc.com>
>=20
> Our charger manager can optimize the battery capacity periodically, so
> we can save last battery capacity into registers. Then next system
> power-on, we can read the last saved battery capacity as the initial
> battery capacity, which can make the battery capacity more accurate.
>=20
> Signed-off-by: Yuanjiang Yu <yuanjiang.yu@unisoc.com>
> Signed-off-by: Baolin Wang <baolin.wang@linaro.org>
> ---

Thanks, queued.

-- Sebastian

> Changes from v1:
>  - Simplify the logics for sc27xx_fgu_set_property() and
>    sc27xx_fgu_property_is_writeable().
> ---
>  drivers/power/supply/sc27xx_fuel_gauge.c |  135 ++++++++++++++++++++++++=
+++++-
>  1 file changed, 134 insertions(+), 1 deletion(-)
>=20
> diff --git a/drivers/power/supply/sc27xx_fuel_gauge.c b/drivers/power/sup=
ply/sc27xx_fuel_gauge.c
> index 8c52e29..76da189 100644
> --- a/drivers/power/supply/sc27xx_fuel_gauge.c
> +++ b/drivers/power/supply/sc27xx_fuel_gauge.c
> @@ -39,6 +39,9 @@
>  #define SC27XX_FGU_CLBCNT_VALH		0x68
>  #define SC27XX_FGU_CLBCNT_VALL		0x6c
>  #define SC27XX_FGU_CLBCNT_QMAXL		0x74
> +#define SC27XX_FGU_USER_AREA_SET	0xa0
> +#define SC27XX_FGU_USER_AREA_CLEAR	0xa4
> +#define SC27XX_FGU_USER_AREA_STATUS	0xa8
> =20
>  #define SC27XX_WRITE_SELCLB_EN		BIT(0)
>  #define SC27XX_FGU_CLBCNT_MASK		GENMASK(15, 0)
> @@ -49,6 +52,14 @@
>  #define SC27XX_FGU_LOW_OVERLOAD_INT	BIT(0)
>  #define SC27XX_FGU_CLBCNT_DELTA_INT	BIT(2)
> =20
> +#define SC27XX_FGU_MODE_AREA_MASK	GENMASK(15, 12)
> +#define SC27XX_FGU_CAP_AREA_MASK	GENMASK(11, 0)
> +#define SC27XX_FGU_MODE_AREA_SHIFT	12
> +
> +#define SC27XX_FGU_FIRST_POWERTON	GENMASK(3, 0)
> +#define SC27XX_FGU_DEFAULT_CAP		GENMASK(11, 0)
> +#define SC27XX_FGU_NORMAIL_POWERTON	0x5
> +
>  #define SC27XX_FGU_CUR_BASIC_ADC	8192
>  #define SC27XX_FGU_SAMPLE_HZ		2
> =20
> @@ -119,6 +130,80 @@ static int sc27xx_fgu_voltage_to_adc(struct sc27xx_f=
gu_data *data, int vol)
>  	return DIV_ROUND_CLOSEST(vol * data->vol_1000mv_adc, 1000);
>  }
> =20
> +static bool sc27xx_fgu_is_first_poweron(struct sc27xx_fgu_data *data)
> +{
> +	int ret, status, cap, mode;
> +
> +	ret =3D regmap_read(data->regmap,
> +			  data->base + SC27XX_FGU_USER_AREA_STATUS, &status);
> +	if (ret)
> +		return false;
> +
> +	/*
> +	 * We use low 4 bits to save the last battery capacity and high 12 bits
> +	 * to save the system boot mode.
> +	 */
> +	mode =3D (status & SC27XX_FGU_MODE_AREA_MASK) >> SC27XX_FGU_MODE_AREA_S=
HIFT;
> +	cap =3D status & SC27XX_FGU_CAP_AREA_MASK;
> +
> +	/*
> +	 * When FGU has been powered down, the user area registers became
> +	 * default value (0xffff), which can be used to valid if the system is
> +	 * first power on or not.
> +	 */
> +	if (mode =3D=3D SC27XX_FGU_FIRST_POWERTON || cap =3D=3D SC27XX_FGU_DEFA=
ULT_CAP)
> +		return true;
> +
> +	return false;
> +}
> +
> +static int sc27xx_fgu_save_boot_mode(struct sc27xx_fgu_data *data,
> +				     int boot_mode)
> +{
> +	int ret;
> +
> +	ret =3D regmap_update_bits(data->regmap,
> +				 data->base + SC27XX_FGU_USER_AREA_CLEAR,
> +				 SC27XX_FGU_MODE_AREA_MASK,
> +				 SC27XX_FGU_MODE_AREA_MASK);
> +	if (ret)
> +		return ret;
> +
> +	return regmap_update_bits(data->regmap,
> +				  data->base + SC27XX_FGU_USER_AREA_SET,
> +				  SC27XX_FGU_MODE_AREA_MASK,
> +				  boot_mode << SC27XX_FGU_MODE_AREA_SHIFT);
> +}
> +
> +static int sc27xx_fgu_save_last_cap(struct sc27xx_fgu_data *data, int ca=
p)
> +{
> +	int ret;
> +
> +	ret =3D regmap_update_bits(data->regmap,
> +				 data->base + SC27XX_FGU_USER_AREA_CLEAR,
> +				 SC27XX_FGU_CAP_AREA_MASK,
> +				 SC27XX_FGU_CAP_AREA_MASK);
> +	if (ret)
> +		return ret;
> +
> +	return regmap_update_bits(data->regmap,
> +				  data->base + SC27XX_FGU_USER_AREA_SET,
> +				  SC27XX_FGU_CAP_AREA_MASK, cap);
> +}
> +
> +static int sc27xx_fgu_read_last_cap(struct sc27xx_fgu_data *data, int *c=
ap)
> +{
> +	int ret, value;
> +
> +	ret =3D regmap_read(data->regmap,
> +			  data->base + SC27XX_FGU_USER_AREA_STATUS, &value);
> +	if (ret)
> +		return ret;
> +
> +	*cap =3D value & SC27XX_FGU_CAP_AREA_MASK;
> +	return 0;
> +}
> +
>  /*
>   * When system boots on, we can not read battery capacity from coulomb
>   * registers, since now the coulomb registers are invalid. So we should
> @@ -128,6 +213,20 @@ static int sc27xx_fgu_voltage_to_adc(struct sc27xx_f=
gu_data *data, int vol)
>  static int sc27xx_fgu_get_boot_capacity(struct sc27xx_fgu_data *data, in=
t *cap)
>  {
>  	int volt, cur, oci, ocv, ret;
> +	bool is_first_poweron =3D sc27xx_fgu_is_first_poweron(data);
> +
> +	/*
> +	 * If system is not the first power on, we should use the last saved
> +	 * battery capacity as the initial battery capacity. Otherwise we should
> +	 * re-calculate the initial battery capacity.
> +	 */
> +	if (!is_first_poweron) {
> +		ret =3D sc27xx_fgu_read_last_cap(data, cap);
> +		if (ret)
> +			return ret;
> +
> +		return sc27xx_fgu_save_boot_mode(data, SC27XX_FGU_NORMAIL_POWERTON);
> +	}
> =20
>  	/*
>  	 * After system booting on, the SC27XX_FGU_CLBCNT_QMAXL register saved
> @@ -160,7 +259,11 @@ static int sc27xx_fgu_get_boot_capacity(struct sc27x=
x_fgu_data *data, int *cap)
>  	*cap =3D power_supply_ocv2cap_simple(data->cap_table, data->table_len,
>  					   ocv);
> =20
> -	return 0;
> +	ret =3D sc27xx_fgu_save_last_cap(data, *cap);
> +	if (ret)
> +		return ret;
> +
> +	return sc27xx_fgu_save_boot_mode(data, SC27XX_FGU_NORMAIL_POWERTON);
>  }
> =20
>  static int sc27xx_fgu_set_clbcnt(struct sc27xx_fgu_data *data, int clbcn=
t)
> @@ -418,6 +521,28 @@ static int sc27xx_fgu_get_property(struct power_supp=
ly *psy,
>  	return ret;
>  }
> =20
> +static int sc27xx_fgu_set_property(struct power_supply *psy,
> +				   enum power_supply_property psp,
> +				   const union power_supply_propval *val)
> +{
> +	struct sc27xx_fgu_data *data =3D power_supply_get_drvdata(psy);
> +	int ret;
> +
> +	if (psp !=3D POWER_SUPPLY_PROP_CAPACITY)
> +		return -EINVAL;
> +
> +	mutex_lock(&data->lock);
> +
> +	ret =3D sc27xx_fgu_save_last_cap(data, val->intval);
> +
> +	mutex_unlock(&data->lock);
> +
> +	if (ret < 0)
> +		dev_err(data->dev, "failed to save battery capacity\n");
> +
> +	return ret;
> +}
> +
>  static void sc27xx_fgu_external_power_changed(struct power_supply *psy)
>  {
>  	struct sc27xx_fgu_data *data =3D power_supply_get_drvdata(psy);
> @@ -425,6 +550,12 @@ static void sc27xx_fgu_external_power_changed(struct=
 power_supply *psy)
>  	power_supply_changed(data->battery);
>  }
> =20
> +static int sc27xx_fgu_property_is_writeable(struct power_supply *psy,
> +					    enum power_supply_property psp)
> +{
> +	return psp =3D=3D POWER_SUPPLY_PROP_CAPACITY;
> +}
> +
>  static enum power_supply_property sc27xx_fgu_props[] =3D {
>  	POWER_SUPPLY_PROP_STATUS,
>  	POWER_SUPPLY_PROP_HEALTH,
> @@ -444,7 +575,9 @@ static void sc27xx_fgu_external_power_changed(struct =
power_supply *psy)
>  	.properties		=3D sc27xx_fgu_props,
>  	.num_properties		=3D ARRAY_SIZE(sc27xx_fgu_props),
>  	.get_property		=3D sc27xx_fgu_get_property,
> +	.set_property		=3D sc27xx_fgu_set_property,
>  	.external_power_changed	=3D sc27xx_fgu_external_power_changed,
> +	.property_is_writeable	=3D sc27xx_fgu_property_is_writeable,
>  };
> =20
>  static void sc27xx_fgu_adjust_cap(struct sc27xx_fgu_data *data, int cap)
> --=20
> 1.7.9.5
>=20

--bdvnz5ydqusftk5f
Content-Type: application/pgp-signature; name="signature.asc"

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEE72YNB0Y/i3JqeVQT2O7X88g7+poFAlwJm4EACgkQ2O7X88g7
+pqsTg//XzERU0vsmHPaaLAxmwNTJp1eqW/ZCnKLDwARY6I8W1+X5Ujz3w88RcNA
BWgKjXJSsQKFWkPch/QlI+iYS8NwDRfx1puB/MNEV5LHl8zISOxx01gnAGFo3jio
EknFjvsphZcKtGCO63EpERJD0GsPsTxM5nFwrO5yg5hAeg7m8wPH+38pKZMmTbRv
9PZx3lmDuIxc3awTIDVahN1zrsDxak+BEs7mDTxpnwaoAWoyHL8xLgHRioHozU6D
w4+92KJtwuESvm0W3x1IKjmrH7nYuoIuvt5DNy3CfnZD5+FERcsY6ZMBZpzaPevS
VFNHuwR5axUa/eBjuhvJndPAvG26kzxqLHLPs3hVLPsaMb+A9cwMTbOz4G9udAb6
yvNOjaMdzla0q7DcAnaiavkMyt8W3IzqNTeWDUzX+PaiWMzil5uRrpTytG8DfF8I
1GgKwdFgROeEIcuNhwp9X04nTP41xin7788u/j6243Z3LGomfY8noY+rHM2bsUjp
5QFqhm50hG0zfOodPTPu1wVPGjQizxXEiF50MlL8w5MBBH2c2wT49bRnOK2/2np3
ZjpBVdQIIczhtWpfmh7f6hmBi+P6xxV4cKPi2jMSrN2cTSAkYFRKTdTYrL/h+EgN
qc9YVCXWPQKoV+xk6/O7p9IlOyzjljxRrypD9WGv+SrcYONfaso=
=4h6q
-----END PGP SIGNATURE-----

--bdvnz5ydqusftk5f--
