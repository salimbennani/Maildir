Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:53:59 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 04648580522;
	Fri, 21 Dec 2018 10:10:14 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 21 Dec 2018 10:10:13 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AxRPZ8BWPyDpFlaaWwhVlt2l7UmTV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhGHu6dThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGoOy?=
 =?us-ascii?q?YZUSAeQPPuhWqJL9p0MMoBalGQWgGPnixiNSi3PqwaE31fkqHwHc3AwnGtIDqG?=
 =?us-ascii?q?rao8/zNKcTUeG61rTDwzvZYPNNxDzw75TIfQ07rvGXRr9/bc3RxlQxGAzfk1WQ?=
 =?us-ascii?q?s4vlPymP2egXtGib9eVgWPuphmU6qA9xuiCiytkwhoTNnI4Z117J+TtjzIooJt?=
 =?us-ascii?q?C0VFR3bN+mHZdIqi2WK4V7Ttk8T212vCs20KAKtJqhcCQXzJkqwQPUZeadfIiS?=
 =?us-ascii?q?+B3jUf6cITdmi3Jhf7Kynwiy8Ue+xe3mTMW000hFrjBDktbSsnABzRvT6tKISv?=
 =?us-ascii?q?dl/0eh3yiA1xzL5+1aPUw5kbDXJ4Mvz7IujJYfrEfOEjPslEj3jqKabkAk9fKp?=
 =?us-ascii?q?6+TjbLXmvJicN4pshwH6M6QunNG/AOshPggNQWeb4+K826Pn/UHgR7VLgPs2nb?=
 =?us-ascii?q?fDsJ3BO8QbqbC2AxVP3oYg9Rm/FTGm38ocnXUdK1JFYh2Hg5DzO17SOPD4Eeu/?=
 =?us-ascii?q?g1O0nTdvxvDGPaPuDo/CL3jei7rhebd960hByAs819xf5pRUCq0fL/L3QEP+qN?=
 =?us-ascii?q?vYDhohOQyu3+nnEMl91p8ZWW+XAq+WKqLSsUOS6eIoOeWMZJIVtyz7K/gq/PPu?=
 =?us-ascii?q?iX45mVkAfaimx5cXaXa4Huh4LEWde3bjntABEWIStAokUOPqkEGCUSJUZ3uqRa?=
 =?us-ascii?q?08/TE7CIWlDYvZXICimr6B0Ty/Hp1XYGBGF1+NHW3pd4WCR/cDdiaSLtV9nTwD?=
 =?us-ascii?q?ULirU5Uh2g22tA/m17pnKfLZ+i4CupLlztR14+zTmgs09Tx7FMmd12CNT2dpnm?=
 =?us-ascii?q?IHXTM23aZ/oVBjxVeHy6R3n/tYFdlL7fNTTgg6LYLcz/B9C93qRw3OZMmJR0i8?=
 =?us-ascii?q?TtWmGz4xSMkxzMEIY0p6H9WijRXD3y6xDr8RlryLAoE0863G03jwIcZ912jJ1K?=
 =?us-ascii?q?07g1Y6RctPMHWshrRj+AjLG47Jj0KZmr63eqsGwi7C6n2PzWqUs0FeSw5/T6PF?=
 =?us-ascii?q?UGsbZkvXq9T5+0zDQ6WvCbQhLgtO18qCJrFWZd3uiFVMXO3jN8jGY2Kth2ewAg?=
 =?us-ascii?q?6Fxq+NbIrvfGUdwCXdCUgenwAP53qGMhI+BiOgo2LYAzxjDlbvY0Lq8eljp3K3?=
 =?us-ascii?q?VE40zweWb0J/07q54AIahfuZS/kLxLILpD8hqyloHFa6x9/ZEd6AqBRufapCYd?=
 =?us-ascii?q?Ix+kxI1X/EuANnOJygLKdihkAFfgRzvkPu0Qh3C4pancgrqnMq0BR9KaaC3Fxd?=
 =?us-ascii?q?cDOY2Ij6OqfLJWnq4BCvd6nW10ne0daL4KsA9O40qlTjvA6zEEoi/G5q091U03?=
 =?us-ascii?q?ua+5XLAxAeUZP3UkYr6Rd6o6vWbTU654PRzXdsK7W7sife29I1A+so0gygf9ZD?=
 =?us-ascii?q?P6yeDg/9DsoaC9KoKOM0gVipbwsIM/xI+64wIsypaeGG2KmtPOt7mDKmjGJH4J?=
 =?us-ascii?q?1y006W9ip8TPLI0IgBw/2CwgSHUDL8hk+7ss/rgYBEeS0SHm2nxCnkBY5dfK1z?=
 =?us-ascii?q?cZwQCWezJc263dF+h5/rW35F+1+vHVIG2Mm1eRWMa1zxxxFf1UMSoXa/gyu30y?=
 =?us-ascii?q?R0ky01rqqYxCHOwf7tdAAEOm5IQ2lul0zsLpK3j9AZXUioaRYmlB2+6Eb+xqhb?=
 =?us-ascii?q?orl/LmbJTUdJeSj2M39tUq+qurWeZM5P7YsisT9LX+SkfVCaVrn9rgMa0iz5GG?=
 =?us-ascii?q?tS3jI7dzCsupjimxx6iWSdLGt8rXbDeMFwwwvf68LYRfJLwjUGQyx4gyHNBleg?=
 =?us-ascii?q?J9mp4cmUl5Dbv+C9TW2hV4dfcSn2zYyasiu76nZnARm+n/C1h93mHhI20S7919?=
 =?us-ascii?q?l2SyrIqAzwbZXs16S/KehnZFVnBEfg68pmHYFzio4whJAT2XcAnJmU82QIkXzv?=
 =?us-ascii?q?MdpFw6Lxd2QCRSQEw9PO5Ajl2UtjLm+Gxo7jV3WdxNdhaMe+Ym8Mxi096MVKAr?=
 =?us-ascii?q?+O7LNYhSt1vka4rQXJbPhhmTcdzOEi6X8AjOEPpQot1T6dArEJEElcPCzskQmI?=
 =?us-ascii?q?7t+koKVWYmavbaa/1E5kkd+9C7GCpxlWWGzldZc6AS9w8sJ/PUrX33Lp7YHkfM?=
 =?us-ascii?q?TQYcgXth2JiBrAi+lVKJQslvsFnyZnOGT9vWE7xO4/lxBhwZa6vI2fIWV34K25?=
 =?us-ascii?q?GgJYNiHyZ84L+DHil6NekdiN34y1ApVtADYLXIbrTfK1FjIdr+/nOh2KED09rH?=
 =?us-ascii?q?ebBLXeERWe6Edgs3LADZSrO2uLK3keyNVoXAOdK1BHgAAIQDU6mYY0FwCtxMz8?=
 =?us-ascii?q?aUd5+yoe5ljiphtXzeJoMRb/X3zbpAepbDc0VZeeIABX7gFE+0faL8ie4vhvEC?=
 =?us-ascii?q?Ff+52rtBaNJXCDZwRUEWEJXVSJB1D9Mbmv5tnA8OmYCvC9L/vUZrWOpvJRV+2V?=
 =?us-ascii?q?xZK0yYZm+zeMNsOSPnhtFfE720xDXWxnFMTdgTkAVysXlyfVZc6BuBi84jF3rt?=
 =?us-ascii?q?y48PnzQg3v+JCAC6FMPtRv4Ry2haaDOvWUhCZ4LzZYy5wNyWXJyLgZwF4dlSVu?=
 =?us-ascii?q?eyOxHrQHsC7HVLjQlbNPDx4HdyNzM9NF77493glII8LUlsn52aJ4jvErDVdITl?=
 =?us-ascii?q?jhmsCvZcwXLGCxLlLHBECXNLuYIT3H2d34YaS5SbdIluVbqwWwuSqHE0/kJjmC?=
 =?us-ascii?q?lyPmVxaqMeFNiiGUJB1fuIGnfRZrBmjuV9bmahy9MN9qgjw627w0hnXWNWECNT?=
 =?us-ascii?q?hwaV9CrrqV7XAQvvIqUVZI4HNoKaGm3W6m/vLfIZUX+7M/GCZrv/hY/2UhzLBW?=
 =?us-ascii?q?7WdCSeAj3GPsr8RjuFHusfSKwyAvBARPsDtQhMSIoEBrI43d959JQ3GC+wgCuy?=
 =?us-ascii?q?HYDxUMussgCdD1va1U4sbAmbi1KzpY9d/Qu8wGCIycLMOBLWpkKR/BBjHZFk0G?=
 =?us-ascii?q?QCStOGWZgFZS1Lmp6nCNrpU84rLriZZGHqRRU005PvAXEEJoGJoFOpghDR0+lr?=
 =?us-ascii?q?vOsMcO5Gu35DXYX40OopzOTdqZBvniISuDiqNNIRwSzuWrfswoKoTn1hk6ORFB?=
 =?us-ascii?q?l4PQFh+VBIgVrw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0B9AgDpKh1ch0O0hNFjHQIfBQeBTQKBf?=
 =?us-ascii?q?2mBAieMdY0/l0uBcxUYAxABhzAiNQgNAQMBAQEBAQECARMBAQEIDQkIKSMMgjo?=
 =?us-ascii?q?pAYJuAiQZAQE3AQUJAlADKTEBCggFgx0BggABBaU1gWwzgnYBAQWHKgiHfoMlg?=
 =?us-ascii?q?RwXgUA/gRGCZIUkhWqJQ4ceU49ISwmHEopZFoFgiBo3hy6JU5BJgUgCggozGgg?=
 =?us-ascii?q?oCIMnCYIeF4YzgiuFRzgygQUBAY4uAQE?=
X-IPAS-Result: =?us-ascii?q?A0B9AgDpKh1ch0O0hNFjHQIfBQeBTQKBf2mBAieMdY0/l0u?=
 =?us-ascii?q?BcxUYAxABhzAiNQgNAQMBAQEBAQECARMBAQEIDQkIKSMMgjopAYJuAiQZAQE3A?=
 =?us-ascii?q?QUJAlADKTEBCggFgx0BggABBaU1gWwzgnYBAQWHKgiHfoMlgRwXgUA/gRGCZIU?=
 =?us-ascii?q?khWqJQ4ceU49ISwmHEopZFoFgiBo3hy6JU5BJgUgCggozGggoCIMnCYIeF4Yzg?=
 =?us-ascii?q?iuFRzgygQUBAY4uAQE?=
X-IronPort-AV: E=Sophos;i="5.56,382,1539673200"; 
   d="scan'208";a="143115101"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 21 Dec 2018 10:10:11 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2391373AbeLUSHI (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Fri, 21 Dec 2018 13:07:08 -0500
Received: from smtp.codeaurora.org ([198.145.29.96]:39612 "EHLO
        smtp.codeaurora.org" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1730474AbeLUSHH (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 21 Dec 2018 13:07:07 -0500
Received: by smtp.codeaurora.org (Postfix, from userid 1000)
        id 3672C60854; Fri, 21 Dec 2018 18:07:05 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=codeaurora.org;
        s=default; t=1545415626;
        bh=/WA6Q5gKp/7qzvJSlDhMrcTXoB4k8h+TTmoeHc9B2j4=;
        h=From:To:Cc:Subject:Date:From;
        b=Zz0PT6+04scAawpMsvQkQa53tKyLq8oN74nCkE8MU8enP5N77LQPiM3+A9aJC6mEG
         m2OXMPO/4LN6C1mmzXq26sI9JSrZOn3rHq76VE9ZPw8DKIUgYGofvt77EcWMvlZUeU
         UQCqMGPzylYcMTtRG6vbifEdR5odpHRf3Ee/HL8c=
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
        pdx-caf-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-2.7 required=2.0 tests=ALL_TRUSTED,BAYES_00,
        DKIM_INVALID,DKIM_SIGNED autolearn=no autolearn_force=no version=3.4.0
Received: from tdas-linux.qualcomm.com (blr-c-bdr-fw-01_globalnat_allzones-outside.qualcomm.com [103.229.19.19])
        (using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
        (No client certificate requested)
        (Authenticated sender: tdas@smtp.codeaurora.org)
        by smtp.codeaurora.org (Postfix) with ESMTPSA id 0CA1E6053B;
        Fri, 21 Dec 2018 18:06:57 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=codeaurora.org;
        s=default; t=1545415622;
        bh=/WA6Q5gKp/7qzvJSlDhMrcTXoB4k8h+TTmoeHc9B2j4=;
        h=From:To:Cc:Subject:Date:From;
        b=VqQC4ESs/wYyt3m8silEJSJDN6M0K9lXCzpixmsNWyAKuyoqVb/nRDmEFJ1+OegG2
         hnpOsCGCCh3wqQfEKiM42lVHqq5CtB6Skzoek14nfJqsCMNWy1IdrTnFbBPdC064vr
         aocBAWCsMxGxSH88gHJISwuGdPgZ458zxFn9sggA=
DMARC-Filter: OpenDMARC Filter v1.3.2 smtp.codeaurora.org 0CA1E6053B
Authentication-Results: pdx-caf-mail.web.codeaurora.org; dmarc=none (p=none dis=none) header.from=codeaurora.org
Authentication-Results: pdx-caf-mail.web.codeaurora.org; spf=none smtp.mailfrom=tdas@codeaurora.org
From: Taniya Das <tdas@codeaurora.org>
To: "Rafael J. Wysocki" <rjw@rjwysocki.net>,
        Viresh Kumar <viresh.kumar@linaro.org>,
        linux-kernel@vger.kernel.org, linux-pm@vger.kernel.org,
        Stephen Boyd <sboyd@kernel.org>
Cc: Rajendra Nayak <rnayak@codeaurora.org>, devicetree@vger.kernel.org,
        robh@kernel.org, skannan@codeaurora.org,
        linux-arm-msm@vger.kernel.org, amit.kucheria@linaro.org,
        Matthias Kaehlcke <mka@chromium.org>, evgreen@google.com,
        Taniya Das <tdas@codeaurora.org>
Subject: [PATCH v1] cpufreq: qcom: Read voltage LUT and populate OPP
Date: Fri, 21 Dec 2018 23:36:48 +0530
Message-Id: <1545415608-15163-1-git-send-email-tdas@codeaurora.org>
X-Mailer: git-send-email 1.9.1
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Add support to read the voltage look up table and populate OPP for all
corresponding CPUS.

Signed-off-by: Taniya Das <tdas@codeaurora.org>
---
 drivers/cpufreq/qcom-cpufreq-hw.c | 32 ++++++++++++++++++++++++++++++--
 1 file changed, 30 insertions(+), 2 deletions(-)

diff --git a/drivers/cpufreq/qcom-cpufreq-hw.c b/drivers/cpufreq/qcom-cpufreq-hw.c
index d83939a..7559b87 100644
--- a/drivers/cpufreq/qcom-cpufreq-hw.c
+++ b/drivers/cpufreq/qcom-cpufreq-hw.c
@@ -10,18 +10,21 @@
 #include <linux/module.h>
 #include <linux/of_address.h>
 #include <linux/of_platform.h>
+#include <linux/pm_opp.h>
 #include <linux/slab.h>

 #define LUT_MAX_ENTRIES			40U
 #define LUT_SRC				GENMASK(31, 30)
 #define LUT_L_VAL			GENMASK(7, 0)
 #define LUT_CORE_COUNT			GENMASK(18, 16)
+#define LUT_VOLT			GENMASK(11, 0)
 #define LUT_ROW_SIZE			32
 #define CLK_HW_DIV			2

 /* Register offsets */
 #define REG_ENABLE			0x0
-#define REG_LUT_TABLE			0x110
+#define REG_FREQ_LUT_TABLE		0x110
+#define REG_VOLT_LUT_TABLE		0x114
 #define REG_PERF_STATE			0x920

 static unsigned long cpu_hw_rate, xo_rate;
@@ -75,19 +78,26 @@ static int qcom_cpufreq_hw_read_lut(struct device *dev,
 				    void __iomem *base)
 {
 	u32 data, src, lval, i, core_count, prev_cc = 0, prev_freq = 0, freq;
+	u32 volt;
 	unsigned int max_cores = cpumask_weight(policy->cpus);
 	struct cpufreq_frequency_table	*table;
+	unsigned long cpu_r;

 	table = kcalloc(LUT_MAX_ENTRIES + 1, sizeof(*table), GFP_KERNEL);
 	if (!table)
 		return -ENOMEM;

 	for (i = 0; i < LUT_MAX_ENTRIES; i++) {
-		data = readl_relaxed(base + REG_LUT_TABLE + i * LUT_ROW_SIZE);
+		data = readl_relaxed(base + REG_FREQ_LUT_TABLE +
+				      i * LUT_ROW_SIZE);
 		src = FIELD_GET(LUT_SRC, data);
 		lval = FIELD_GET(LUT_L_VAL, data);
 		core_count = FIELD_GET(LUT_CORE_COUNT, data);

+		data = readl_relaxed(base + REG_VOLT_LUT_TABLE +
+				      i * LUT_ROW_SIZE);
+		volt = FIELD_GET(LUT_VOLT, data) * 1000;
+
 		if (src)
 			freq = xo_rate * lval / 1000;
 		else
@@ -123,6 +133,10 @@ static int qcom_cpufreq_hw_read_lut(struct device *dev,

 		prev_cc = core_count;
 		prev_freq = freq;
+
+		freq *= 1000;
+		for_each_cpu(cpu_r, policy->cpus)
+			dev_pm_opp_add(get_cpu_device(cpu_r), freq, volt);
 	}

 	table[i].frequency = CPUFREQ_TABLE_END;
@@ -159,10 +173,18 @@ static int qcom_cpufreq_hw_cpu_init(struct cpufreq_policy *policy)
 	struct device *dev = &global_pdev->dev;
 	struct of_phandle_args args;
 	struct device_node *cpu_np;
+	struct device *cpu_dev;
 	struct resource *res;
 	void __iomem *base;
 	int ret, index;

+	cpu_dev = get_cpu_device(policy->cpu);
+	if (!cpu_dev) {
+		pr_err("%s: failed to get cpu%d device\n", __func__,
+		       policy->cpu);
+		return -ENODEV;
+	}
+
 	cpu_np = of_cpu_device_node_get(policy->cpu);
 	if (!cpu_np)
 		return -EINVAL;
@@ -205,6 +227,12 @@ static int qcom_cpufreq_hw_cpu_init(struct cpufreq_policy *policy)
 		goto error;
 	}

+	ret = dev_pm_opp_get_opp_count(cpu_dev);
+	if (ret <= 0) {
+		dev_err(cpu_dev, "OPP table is not ready\n");
+		goto error;
+	}
+
 	policy->fast_switch_possible = true;

 	return 0;
--
Qualcomm INDIA, on behalf of Qualcomm Innovation Center, Inc.is a member
of the Code Aurora Forum, hosted by the  Linux Foundation.

