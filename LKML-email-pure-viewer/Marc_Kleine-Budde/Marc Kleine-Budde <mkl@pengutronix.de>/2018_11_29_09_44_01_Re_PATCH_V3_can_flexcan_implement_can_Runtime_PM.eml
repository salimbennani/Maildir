Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 29 Nov 2018 18:19:01 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id F1AB85802E4;
	Thu, 29 Nov 2018 01:46:13 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 01:46:03 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A/chNtxwwDxnwDWXXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0ewUKfad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXXRPXshRWSJcAY2y?=
 =?us-ascii?q?YYUAAOUDMulEtIn9v1kDoACxBQWwHu7hzSNEi3H00KA8zu8vERvG3AslH98Wt3?=
 =?us-ascii?q?rbts/1O7sPWu6wyKnH0zTDb/VI1jvk9YXIbw0uruySUrltdsfRzEovFwfeg1WI?=
 =?us-ascii?q?t4PlOTyV1vkRs2iB6OpgU+OvimE9pw5svDei38EhgZTHiIISz1DL7yR5wIAtKN?=
 =?us-ascii?q?2gVkF7Z9GkEIZMtyGAMIt2RMIiQm5ytCkn1LILv4OwcisSyJk/2RLTd/iKf5KV?=
 =?us-ascii?q?7h/tSuqdOyp0iXF5dL6lhhu/81CsxvPmWcWo3ltHqyRFn9nPu3wR0hHe6cqKRe?=
 =?us-ascii?q?Bh8UqkxDmC2Bzf5v1BLE8qlafWKJ8sz7sqmZccv0nOHSr7lUTtg6CLbUop/+ao?=
 =?us-ascii?q?6+rpYrXooJKXKpV6hRvkMqs0n8yyGeQ4PRYKX2ic4em8yrLj8lPjQLlQjf05jL?=
 =?us-ascii?q?PZsJbEKsQfvKK5BBVV0ok75xa+CTepzsgYkGEZIF5ZfB+LlZXlNl/QLPziEPuy?=
 =?us-ascii?q?gEignC1qyv3EJrHhB4/CLnnHkLfvZ7Z97EtcxRI3zdBe4ZJUF74ALOvwWkDvrt?=
 =?us-ascii?q?zYCAE2Mwitz+bgBtR90J0RWXiUD6+HP6Pdr0WI6vgsI+aSfo8VvijyK/w/6/7p?=
 =?us-ascii?q?l385lkcRfbO10psPdHC4AvNmLl2dYXrtgdcOD30GvwUjTOHxjF2CUDhTZ2u9Xq?=
 =?us-ascii?q?4m5zE7Dp6mApnHRoy3nLOB2yK7FIVMZm9aElCMDWvod4KcVvcMci2SI9NhnSYD?=
 =?us-ascii?q?VbS7S48hyAuhtAn1y7d8KurU+ysYtY/s1dRv5u3Tkw0y+iJwD8iHz26NSGR0lH?=
 =?us-ascii?q?sSRzAqxKB/vVB9ylCb3Kh6hPxXC8Zf5/BOUgc8M57cyPd3C9TzWgLHY9eIR0yq?=
 =?us-ascii?q?QtSgATEtUN0xx8UCbFp6G9WnlhrDxTalA6cJl7yXA5w56rjT32PxJ8Z6yHbKzr?=
 =?us-ascii?q?MhgEMkQsZUMW2mh6h/9xXcBoLTkkWZkbqqeroY3CLX6GiDym+OtllCUAFsSaXF?=
 =?us-ascii?q?QWwfZkzOoNT6/EzCSaWiCbAmMgRbz86CJbBHatnojVVAWffiN87SY2O3m2esGx?=
 =?us-ascii?q?mIwqmAY5bte2UYxC/dElQLkxgP/XaaMggzHjqurHjADDNwD17vY1nj8e9lqHyl?=
 =?us-ascii?q?SE84yAWKb05k17qx4RMVgf2cS/UO3rMLoishqjN0HEqj0NLSEdaPuw1hfKBEa9?=
 =?us-ascii?q?Mn/FhHzX7ZtxB6PpG4Mq9tnEAefBpts0PuzRp3DJ5AntYsrH4xyApyKKSY0E5O?=
 =?us-ascii?q?dj+C3JDwPKHXJXf2/By1d6HW3VTe2s6M+qgT8PQ4t0njvAaxG0o+8nVn1t5V02?=
 =?us-ascii?q?ec5pTKFgYSTYj9UkEt9xh+prHaZCY96pjQ1X1tN6m0rzDD18goBOsj1havYdNf?=
 =?us-ascii?q?PLmYGw/1Fs0QH9KuJ/Aym1i1chIEO/hf+7QwP8y4ePqJxq6qMPx7kzK7kGtI+o?=
 =?us-ascii?q?Z90kGL9ypiUePI25cFw/eF3gqITTv8jVGhstzploBAfz0dAm2/yS38Do5LeqJy?=
 =?us-ascii?q?ZZoLCXupI8CvxtR+moThVGJC+F+iB1MJwsmpeRWJYlz53A1Q01kXoHO9lSu5yT?=
 =?us-ascii?q?x0jy8mrq6F0CPSxOTicQINOnRXS2l6kVfsPY+0gsgAXEipcwcmjgGl6lv9x6RB?=
 =?us-ascii?q?oqRwMXPTQUZRcyfqNW5iVra/uaSYY85I7pMlqiFXUOW6YVCHRb/xuRoa0yX/H2?=
 =?us-ascii?q?RAwDA3bS2lupL8nxZikmKSMG5zrGbFecF33Rre5N3cSeRR3zYcXyl4lD/XC0O4?=
 =?us-ascii?q?P9mo+9WUipjCvvq/V2KnSp1cby3rwZmcuyu84G1gGQe/kOyrmt37DQg61jf219?=
 =?us-ascii?q?twWiXSrxb8YY7r276hMe19fUloB17868xkFYF4iYYwgJAQ2X4HhpSa53YHkGHz?=
 =?us-ascii?q?MclF1qL6dnYCWTkLw9vN6gj/xEJjNm6Jx57+VniFwspufd66bnkU2iI86cBHE6?=
 =?us-ascii?q?OU7L1CnStorVu0twPRYf5hnjgDzfsi8mIVg+YMuAA11CWSHqgSHVVEPSzrjxmI?=
 =?us-ascii?q?7MqxrKRNaGavbLi/zkx+nd+6AbGGowFcXmv5e5g4ES9x6MV/LEzD0Hnp5o74f9?=
 =?us-ascii?q?nQaMoZtgeInBfYk+hVNJUxm+IPhSpmOmLyp2cpyuAlghx1wZG1opKHJH5z86Kj?=
 =?us-ascii?q?DR5VLTn1Z8IV+jHwgqdShMeW34azHpp/HjUHRofnTfWtEDgKr/ToKx6OECEgqn?=
 =?us-ascii?q?ecAbffAQif6EJ8o3POCZ+rMWyXJGICzdVjXxSdIE1fgAYJXDQ1hJI5FwaqxND/?=
 =?us-ascii?q?f0d9/Dwe+ln4qh5UwOJyKxb/SnvfpBuvajosU5eQNh1W7gVf50vPNcye8/l+Hy?=
 =?us-ascii?q?VZ/p2nsQyMJXaXZwVODWEVREOEA0rvMaWp5dnF6+KYHPaxL+PSYbWSruxTT/WI?=
 =?us-ascii?q?yoiq0oR45DaALNmPMmNhD/0m2UpDQHZ5FN7CmzgUTywXliTNb9OUpRum+y13qN?=
 =?us-ascii?q?y//+rvWA71+YSPDL5SO811+x+qmaeDK/KQhCFhJDdY0ZMM2GbIyKUF014UkS1u?=
 =?us-ascii?q?bD6tEbIPtSPWSKLQm6lXDwMUai9pNctI6b480RdJOcLBltz10bt4hOYvC1hZTV?=
 =?us-ascii?q?zhht2pZcsSLmG9KlzHBUWLNLeHJTHRwMH3e6S8SbJOg+VOqh2woi2WE0viPjSF?=
 =?us-ascii?q?ijnoWAqjMeBKjCGHIhNevJuxfQpqCWjmVNjmcAG0MMdrjT0qxr05nmnFNXMHPj?=
 =?us-ascii?q?hmbUxMrqec7SdZgvhkH2xB73xlLfSLmiqD7unYLIoWvuVvAihui+1a53E6waNP?=
 =?us-ascii?q?7C5YXPx1hDfSrtl2rlG6k+mPzyBrXwZUpjlXhIKEo0NiNL7d9plBX3bE4R0M4X?=
 =?us-ascii?q?+RCxQMu9tqFNnvt7pMxdjIkaL5MC1C/M7M/csAG8jUL9qKMXo7PhrvHT7UDQ0F?=
 =?us-ascii?q?QiaqNGHfnUNdlv6S+2aRrpg7rJjshZUPRqVaVFwzCvMVFEBlEMYeL5dwWzN32Y?=
 =?us-ascii?q?Kc2ewP7Hm/qVHjRMxcsdiTT/ObB/r2KTCWy6tEbh0H6bXoNcIYMYitnwQoblh8?=
 =?us-ascii?q?gZSPEEPWdc5CrzcnbQIupkhJtn9kQSd7j0bkbB69pXQaE9aqkRMszAhze+Ig8H?=
 =?us-ascii?q?Hr+VhhdXTQoy5ltUArkp3GhT2QdjO0Brq8UYweXy/3s2ApP5X0XhpvaguzjQpo?=
 =?us-ascii?q?OWGXFPpqk7J8eDUz20fnspxVFKsZFPUcbQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAABStP9bh0O0hNFeBxoBAQEBAQIBA?=
 =?us-ascii?q?QEBBwIBAQEBgVEFAQEBAQsBgTCBOYECJ4N5iBhfiymBYC0Uly6BcgQMBRgHDAG?=
 =?us-ascii?q?HcSI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmEBAQEBAgEBAiAEQBIFA?=
 =?us-ascii?q?QgBAQEKDgcDKgICAxg8BgEMBgIBAQEWgwYBgXQFCAEDAaY2fDOKHg8FgmiJKRe?=
 =?us-ascii?q?BQD+BESeCa4RlCYMXglcCiSuBboQNkH0JgRKDEIF0ixYegVqFEIJuCyuHDoh4j?=
 =?us-ascii?q?1SBRoINMxoIHBSDJwmCGwMXg32KIUAxgQUBASGKSimCJAEB?=
X-IPAS-Result: =?us-ascii?q?A0ABAABStP9bh0O0hNFeBxoBAQEBAQIBAQEBBwIBAQEBgVE?=
 =?us-ascii?q?FAQEBAQsBgTCBOYECJ4N5iBhfiymBYC0Uly6BcgQMBRgHDAGHcSI0CQ0BAwEBA?=
 =?us-ascii?q?QEBAQIBEwEBAQgNCQgpIwyCNiQBgmEBAQEBAgEBAiAEQBIFAQgBAQEKDgcDKgI?=
 =?us-ascii?q?CAxg8BgEMBgIBAQEWgwYBgXQFCAEDAaY2fDOKHg8FgmiJKReBQD+BESeCa4RlC?=
 =?us-ascii?q?YMXglcCiSuBboQNkH0JgRKDEIF0ixYegVqFEIJuCyuHDoh4j1SBRoINMxoIHBS?=
 =?us-ascii?q?DJwmCGwMXg32KIUAxgQUBASGKSimCJAEB?=
X-IronPort-AV: E=Sophos;i="5.56,294,1539673200"; 
   d="asc'?scan'208";a="42792220"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 01:44:36 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727514AbeK2Us4 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 29 Nov 2018 15:48:56 -0500
Received: from metis.ext.pengutronix.de ([85.220.165.71]:37691 "EHLO
        metis.ext.pengutronix.de" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726670AbeK2Us4 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 29 Nov 2018 15:48:56 -0500
Received: from gallifrey.ext.pengutronix.de ([2001:67c:670:201:5054:ff:fe8d:eefb] helo=bjornoya.blackshift.org)
        by metis.ext.pengutronix.de with esmtps (TLS1.2:ECDHE_RSA_AES_256_GCM_SHA384:256)
        (Exim 4.89)
        (envelope-from <mkl@pengutronix.de>)
        id 1gSIrd-0005PC-Tw; Thu, 29 Nov 2018 10:44:06 +0100
Received: from [IPv6:2a03:f580:87bc:d400:e586:a438:6bdb:ffff] (unknown [IPv6:2a03:f580:87bc:d400:e586:a438:6bdb:ffff])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits))
        (Client CN "mkl@blackshift.org", Issuer "StartCom Class 1 Client CA" (not verified))
        (Authenticated sender: mkl@blackshift.org)
        by smtp.blackshift.org (Postfix) with ESMTPSA id EB6C13985F2;
        Thu, 29 Nov 2018 09:44:04 +0000 (UTC)
To: Joakim Zhang <qiangqing.zhang@nxp.com>,
        "linux-can@vger.kernel.org" <linux-can@vger.kernel.org>
Cc: "wg@grandegger.com" <wg@grandegger.com>,
        "netdev@vger.kernel.org" <netdev@vger.kernel.org>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        dl-linux-imx <linux-imx@nxp.com>,
        Aisheng DONG <aisheng.dong@nxp.com>
References: <20181129080559.18572-1-qiangqing.zhang@nxp.com>
From: Marc Kleine-Budde <mkl@pengutronix.de>
Openpgp: preference=signencrypt
Autocrypt: addr=mkl@pengutronix.de; prefer-encrypt=mutual; keydata=
 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
Subject: Re: [PATCH V3] can: flexcan: implement can Runtime PM
Message-ID: <873ce967-5e94-28f0-608d-dc55d77ab182@pengutronix.de>
Date: Thu, 29 Nov 2018 10:44:01 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.3.0
MIME-Version: 1.0
In-Reply-To: <20181129080559.18572-1-qiangqing.zhang@nxp.com>
Content-Type: multipart/signed; micalg=pgp-sha512;
 protocol="application/pgp-signature";
 boundary="eqXyd9DatNZcUohgZbTVBk0GHt0yL0VCL"
X-SA-Exim-Connect-IP: 2001:67c:670:201:5054:ff:fe8d:eefb
X-SA-Exim-Mail-From: mkl@pengutronix.de
X-SA-Exim-Scanned: No (on metis.ext.pengutronix.de); SAEximRunCond expanded to false
X-PTX-Original-Recipient: linux-kernel@vger.kernel.org
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This is an OpenPGP/MIME signed message (RFC 4880 and 3156)
--eqXyd9DatNZcUohgZbTVBk0GHt0yL0VCL
Content-Type: multipart/mixed; boundary="kcbtWtVZ3zKs4iFYUjsEOJw0WgcVVf0uj";
 protected-headers="v1"
From: Marc Kleine-Budde <mkl@pengutronix.de>
To: Joakim Zhang <qiangqing.zhang@nxp.com>,
 "linux-can@vger.kernel.org" <linux-can@vger.kernel.org>
Cc: "wg@grandegger.com" <wg@grandegger.com>,
 "netdev@vger.kernel.org" <netdev@vger.kernel.org>,
 "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
 dl-linux-imx <linux-imx@nxp.com>, Aisheng DONG <aisheng.dong@nxp.com>
Message-ID: <873ce967-5e94-28f0-608d-dc55d77ab182@pengutronix.de>
Subject: Re: [PATCH V3] can: flexcan: implement can Runtime PM
References: <20181129080559.18572-1-qiangqing.zhang@nxp.com>
In-Reply-To: <20181129080559.18572-1-qiangqing.zhang@nxp.com>

--kcbtWtVZ3zKs4iFYUjsEOJw0WgcVVf0uj
Content-Type: text/plain; charset=utf-8
Content-Language: en-GB
Content-Transfer-Encoding: quoted-printable

On 11/29/18 9:08 AM, Joakim Zhang wrote:
> From: Aisheng Dong <aisheng.dong@nxp.com>
>=20
> Flexcan will be disabled during suspend if no wakeup function required =
and
> enabled after resume accordingly. During this period, we could explicit=
ly
> disable clocks.
> Since PM is optional, the clock is enabled at probe to guarante the
> clock is running when PM is not enabled in the kernel.
>=20
> Implement Runtime PM which will:
> 1) Without CONFIG_PM, clock is running whether Flexcan opened or closed=
=2E

ACK

> 2) With CONFIG_PM, clock enabled while Flexcan opened and disabled when=


=2E..when closed?

I think the sentence misses something at the end.

And it doesn't work:

> root@DistroKit:~ ifconfig can0
> can0      Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-00-00-00-00-00-00=
-00-00-00-00 =20
>           NOARP  MTU:16  Metric:1
>           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
>           TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
>           collisions:0 txqueuelen:10=20
>           RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
>           Interrupt:34=20
>=20
> root@DistroKit:~ grep can /sys/kernel/debug/clk/clk_summary=20
>                 can_root              1        1        0    30000000  =
        0     0  50000
>                    can2_serial        0        0        0    30000000  =
        0     0  50000
>                    can1_serial        1        1        0    30000000  =
        0     0  50000
>                             can2_ipg       0        0        0    66000=
000          0     0  50000
>                             can1_ipg       1        1        0    66000=
000          0     0  50000

can0 is down, while the can1_{serial,ipg} are enabled.

> 3) Regardless of CONFIG_PM enabled or not, Flexcan runtime status is
>    SUSPENDED during Flexcan closed and ACTIVE when Flexcan opened.
> 4) Make Power Domain framework be able to shutdown the corresponding po=
wer
>    domain of this device.
>=20
> Signed-off-by: Aisheng Dong <aisheng.dong@nxp.com>
> Signed-off-by: Joakim Zhang <qiangqing.zhang@nxp.com>
> ---
> ChangeLog:
> V1->V2:
> 	*rebased on patch "can: flexcan: add self wakeup support".
> V2->V3:
> 	*fix device fails to probe without CONFIG_PM.
> ---
>  drivers/net/can/flexcan.c | 107 +++++++++++++++++++++++++-------------=

>  1 file changed, 70 insertions(+), 37 deletions(-)
>=20
> diff --git a/drivers/net/can/flexcan.c b/drivers/net/can/flexcan.c
> index 0f36eafe3ac1..cc62a97237db 100644
> --- a/drivers/net/can/flexcan.c
> +++ b/drivers/net/can/flexcan.c
> @@ -24,6 +24,7 @@
>  #include <linux/of.h>
>  #include <linux/of_device.h>
>  #include <linux/platform_device.h>
> +#include <linux/pm_runtime.h>
>  #include <linux/regulator/consumer.h>
>  #include <linux/regmap.h>
> =20
> @@ -277,6 +278,7 @@ struct flexcan_priv {
>  	u32 reg_imask1_default;
>  	u32 reg_imask2_default;
> =20
> +	struct device *dev;
>  	struct clk *clk_ipg;
>  	struct clk *clk_per;
>  	const struct flexcan_devtype_data *devtype_data;
> @@ -444,6 +446,27 @@ static inline void flexcan_error_irq_disable(const=
 struct flexcan_priv *priv)
>  	priv->write(reg_ctrl, &regs->ctrl);
>  }
> =20
> +static int flexcan_clks_enable(const struct flexcan_priv *priv)
> +{
> +	int err;
> +
> +	err =3D clk_prepare_enable(priv->clk_ipg);
> +	if (err)
> +		return err;
> +
> +	err =3D clk_prepare_enable(priv->clk_per);
> +	if (err)
> +		clk_disable_unprepare(priv->clk_ipg);
> +
> +	return err;
> +}
> +
> +static void flexcan_clks_disable(const struct flexcan_priv *priv)
> +{
> +	clk_disable_unprepare(priv->clk_ipg);
> +	clk_disable_unprepare(priv->clk_per);
> +}
> +
>  static inline int flexcan_transceiver_enable(const struct flexcan_priv=
 *priv)
>  {
>  	if (!priv->reg_xceiver)
> @@ -570,19 +593,13 @@ static int flexcan_get_berr_counter(const struct =
net_device *dev,
>  	const struct flexcan_priv *priv =3D netdev_priv(dev);
>  	int err;
> =20
> -	err =3D clk_prepare_enable(priv->clk_ipg);
> -	if (err)
> +	err =3D pm_runtime_get_sync(priv->dev);
> +	if (err < 0)
>  		return err;
> =20
> -	err =3D clk_prepare_enable(priv->clk_per);
> -	if (err)
> -		goto out_disable_ipg;
> -
>  	err =3D __flexcan_get_berr_counter(dev, bec);
> =20
> -	clk_disable_unprepare(priv->clk_per);
> - out_disable_ipg:
> -	clk_disable_unprepare(priv->clk_ipg);
> +	pm_runtime_put(priv->dev);
> =20
>  	return err;
>  }
> @@ -1215,17 +1232,13 @@ static int flexcan_open(struct net_device *dev)=

>  	struct flexcan_priv *priv =3D netdev_priv(dev);
>  	int err;
> =20
> -	err =3D clk_prepare_enable(priv->clk_ipg);
> -	if (err)
> +	err =3D pm_runtime_get_sync(priv->dev);
> +	if (err < 0)
>  		return err;
> =20
> -	err =3D clk_prepare_enable(priv->clk_per);
> -	if (err)
> -		goto out_disable_ipg;
> -
>  	err =3D open_candev(dev);
>  	if (err)
> -		goto out_disable_per;
> +		goto out_disable_clks;
> =20
>  	err =3D request_irq(dev->irq, flexcan_irq, IRQF_SHARED, dev->name, de=
v);
>  	if (err)
> @@ -1288,10 +1301,8 @@ static int flexcan_open(struct net_device *dev)
>  	free_irq(dev->irq, dev);
>   out_close:
>  	close_candev(dev);
> - out_disable_per:
> -	clk_disable_unprepare(priv->clk_per);
> - out_disable_ipg:
> -	clk_disable_unprepare(priv->clk_ipg);
> + out_disable_clks:
> +	pm_runtime_put(priv->dev);
> =20
>  	return err;
>  }
> @@ -1306,10 +1317,9 @@ static int flexcan_close(struct net_device *dev)=

> =20
>  	can_rx_offload_del(&priv->offload);
>  	free_irq(dev->irq, dev);
> -	clk_disable_unprepare(priv->clk_per);
> -	clk_disable_unprepare(priv->clk_ipg);
> =20
>  	close_candev(dev);
> +	pm_runtime_put(priv->dev);
> =20
>  	can_led_event(dev, CAN_LED_EVENT_STOP);
> =20
> @@ -1349,18 +1359,14 @@ static int register_flexcandev(struct net_devic=
e *dev)
>  	struct flexcan_regs __iomem *regs =3D priv->regs;
>  	u32 reg, err;
> =20
> -	err =3D clk_prepare_enable(priv->clk_ipg);
> +	err =3D flexcan_clks_enable(priv);
>  	if (err)
>  		return err;
> =20
> -	err =3D clk_prepare_enable(priv->clk_per);
> -	if (err)
> -		goto out_disable_ipg;
> -
>  	/* select "bus clock", chip must be disabled */
>  	err =3D flexcan_chip_disable(priv);
>  	if (err)
> -		goto out_disable_per;
> +		goto out_disable_clks;
>  	reg =3D priv->read(&regs->ctrl);
>  	reg |=3D FLEXCAN_CTRL_CLK_SRC;
>  	priv->write(reg, &regs->ctrl);
> @@ -1389,13 +1395,12 @@ static int register_flexcandev(struct net_devic=
e *dev)
> =20
>  	err =3D register_candev(dev);
> =20
> -	/* disable core and turn off clocks */

Please disable the device, even if keeping the clocks on.

> +	return 0;
> +
>   out_chip_disable:
>  	flexcan_chip_disable(priv);
> - out_disable_per:
> -	clk_disable_unprepare(priv->clk_per);
> - out_disable_ipg:
> -	clk_disable_unprepare(priv->clk_ipg);
> + out_disable_clks:
> +	flexcan_clks_disable(priv);
> =20
>  	return err;
>  }
> @@ -1556,6 +1561,7 @@ static int flexcan_probe(struct platform_device *=
pdev)
>  		priv->write =3D flexcan_write_le;
>  	}
> =20
> +	priv->dev =3D &pdev->dev;
>  	priv->can.clock.freq =3D clock_freq;
>  	priv->can.bittiming_const =3D &flexcan_bittiming_const;
>  	priv->can.do_set_mode =3D flexcan_set_mode;
> @@ -1586,6 +1592,9 @@ static int flexcan_probe(struct platform_device *=
pdev)
>  	dev_info(&pdev->dev, "device registered (reg_base=3D%p, irq=3D%d)\n",=

>  		 priv->regs, dev->irq);
> =20
> +	pm_runtime_enable(&pdev->dev);
> +	pm_runtime_put(&pdev->dev);
> +
>  	return 0;
> =20
>   failed_register:
> @@ -1598,6 +1607,7 @@ static int flexcan_remove(struct platform_device =
*pdev)
>  	struct net_device *dev =3D platform_get_drvdata(pdev);
> =20
>  	unregister_flexcandev(dev);
> +	pm_runtime_disable(&pdev->dev);
>  	free_candev(dev);
> =20
>  	return 0;
> @@ -1607,7 +1617,7 @@ static int __maybe_unused flexcan_suspend(struct =
device *device)
>  {
>  	struct net_device *dev =3D dev_get_drvdata(device);
>  	struct flexcan_priv *priv =3D netdev_priv(dev);
> -	int err;
> +	int err =3D 0;
> =20
>  	if (netif_running(dev)) {
>  		/* if wakeup is enabled, enter stop mode
> @@ -1620,20 +1630,22 @@ static int __maybe_unused flexcan_suspend(struc=
t device *device)
>  			err =3D flexcan_chip_disable(priv);
>  			if (err)
>  				return err;
> +
> +			err =3D pm_runtime_force_suspend(device);
>  		}
>  		netif_stop_queue(dev);
>  		netif_device_detach(dev);
>  	}
>  	priv->can.state =3D CAN_STATE_SLEEPING;
> =20
> -	return 0;
> +	return err;
>  }
> =20
>  static int __maybe_unused flexcan_resume(struct device *device)
>  {
>  	struct net_device *dev =3D dev_get_drvdata(device);
>  	struct flexcan_priv *priv =3D netdev_priv(dev);
> -	int err;
> +	int err =3D 0;
> =20
>  	priv->can.state =3D CAN_STATE_ERROR_ACTIVE;
>  	if (netif_running(dev)) {
> @@ -1642,14 +1654,34 @@ static int __maybe_unused flexcan_resume(struct=
 device *device)
>  		if (device_may_wakeup(device)) {
>  			disable_irq_wake(dev->irq);
>  		} else {
> -			err =3D flexcan_chip_enable(priv);
> +			err =3D pm_runtime_force_resume(device);
>  			if (err)
>  				return err;
> +
> +			err =3D flexcan_chip_enable(priv);
>  		}
>  	}
> +	return err;
> +}
> +
> +static int __maybe_unused flexcan_runtime_suspend(struct device *devic=
e)
> +{
> +	struct net_device *dev =3D dev_get_drvdata(device);
> +	struct flexcan_priv *priv =3D netdev_priv(dev);
> +
> +	flexcan_clks_disable(priv);
> +
>  	return 0;
>  }
> =20
> +static int __maybe_unused flexcan_runtime_resume(struct device *device=
)
> +{
> +	struct net_device *dev =3D dev_get_drvdata(device);
> +	struct flexcan_priv *priv =3D netdev_priv(dev);
> +
> +	return flexcan_clks_enable(priv);
> +}
> +
>  static int __maybe_unused flexcan_noirq_suspend(struct device *device)=

>  {
>  	struct net_device *dev =3D dev_get_drvdata(device);
> @@ -1676,6 +1708,7 @@ static int __maybe_unused flexcan_noirq_resume(st=
ruct device *device)
> =20
>  static const struct dev_pm_ops flexcan_pm_ops =3D {
>  	SET_SYSTEM_SLEEP_PM_OPS(flexcan_suspend, flexcan_resume)
> +	SET_RUNTIME_PM_OPS(flexcan_runtime_suspend, flexcan_runtime_resume, N=
ULL)
>  	SET_NOIRQ_SYSTEM_SLEEP_PM_OPS(flexcan_noirq_suspend, flexcan_noirq_re=
sume)
>  };
> =20
>=20

Marc

--=20
Pengutronix e.K.                  | Marc Kleine-Budde           |
Industrial Linux Solutions        | Phone: +49-231-2826-924     |
Vertretung West/Dortmund          | Fax:   +49-5121-206917-5555 |
Amtsgericht Hildesheim, HRA 2686  | http://www.pengutronix.de   |


--kcbtWtVZ3zKs4iFYUjsEOJw0WgcVVf0uj--

--eqXyd9DatNZcUohgZbTVBk0GHt0yL0VCL
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: OpenPGP digital signature
Content-Disposition: attachment; filename="signature.asc"

-----BEGIN PGP SIGNATURE-----

iQEzBAEBCgAdFiEENrCndlB/VnAEWuH5k9IU1zQoZfEFAlv/tOEACgkQk9IU1zQo
ZfHHTAf/VMp+8c7dTVHHPNBgoENSzX1FNoNgq/50Tq/qn6S7vSj6e5sLKQVfu0Xx
xQiTjn1T9Oo4Bt3V2K7UmNsMlr7wMQapQxXgIG7330sXqHdSGw0xCs9lIOEFP1sr
1iasD5aOzE5gK+WqelSm+rTm6SFu8CNXSbeItYKNKphEIGuXzIM2BqQJYqjEEUtM
73HEQYlhQfkn1k5nzznagOvpjCB7Un2/RMGUQgL72wZThN1lpnOjLASwjg6KAl5E
sxJ6RB+13RFLfSL9+ee5n1UOeCPD04Si1Gerts4t6hC5A6NE83Sp0jQyiitK0lJy
tP8zWGqCN7g+81sqXGxIoCeGdFxBRw==
=i98g
-----END PGP SIGNATURE-----

--eqXyd9DatNZcUohgZbTVBk0GHt0yL0VCL--
