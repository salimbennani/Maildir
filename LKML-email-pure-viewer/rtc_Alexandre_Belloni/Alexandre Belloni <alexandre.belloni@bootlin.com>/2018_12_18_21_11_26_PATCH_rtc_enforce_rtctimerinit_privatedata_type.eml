Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 08:43:36 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 3F32C5805CF;
	Tue, 18 Dec 2018 13:11:50 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga005-1.jf.intel.com with ESMTP; 18 Dec 2018 13:11:50 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AKOryLh1uIVNwDt8bsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segSIvrxwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJBUMhPSiJPDICy?=
 =?us-ascii?q?YYwAAOQOJuZYt4vwqkASoRa9HwSgGPnixiNUinLwwKY00/4hEQbD3AE4A98OtG?=
 =?us-ascii?q?rbrdrvO6cUTO+11rfHxijeYvxI3Tf97I/IchYgofqRWr9/a87RxlcgFgzfiFWf?=
 =?us-ascii?q?tJblMC2P2usWrWeb6+5gVeWpi24msAx+uT+vxsAwionNh4IVzErI+jl+wIYwPN?=
 =?us-ascii?q?C1TlNwb928EJZIqS2WK497Ttk/T2xmpio20KAKtJ2ncCQQyZkqxQbTZv+GfoSS?=
 =?us-ascii?q?/B7uW+WcLS1liH9meb+znQu+/Euhx+D6S8K6ykxFrjBfndnJrn0N1wLc6syASv?=
 =?us-ascii?q?Zl4Eeh1iiA1xrJ5uFHP080j6zbJIAlwrIqkZoTq0vDEjf3mEXwkqCWal0p9va0?=
 =?us-ascii?q?5+njeLnqu5GRO5Fuhg3jMakihtazDOU6PwQWWmiU4+W81Lnt/U3jR7VKi+U7kq?=
 =?us-ascii?q?3YsJDcOMQaqbe1AwxL3YY57RawETOm3M0fnXgJKlJKZgiHgpP3O1HBPv/4F+2z?=
 =?us-ascii?q?g1eynzdxwfDJILnhDo/KLnjZn7ftZax95FJEyAov0dBf4IpZCrUAIPLwRED9rt?=
 =?us-ascii?q?PZDgIiPgywwubnDsh914wEVWKOBK+ZLL3dsVuS6u0zJOmMYZcfuCzhJPg9+/7u?=
 =?us-ascii?q?kXg5lEcdfaaz3JsXdGq3HvN8L0WZfHrjmNEBEWgRswo6TezqjkCCUDFJa3azWa?=
 =?us-ascii?q?I8+i80CIa8AYjfQYCthaSL3D2nEZ1OemBGFleMHG/qd4WDRfgAciGSIshnkjwC?=
 =?us-ascii?q?UrisUIsh1RCotA/nxLtrNOvU+isEtZ390Nh5/fHclRY39TZsFcSSz3mNT31onm?=
 =?us-ascii?q?MPXzI5xrt/oUx6yleAy6R4meZXFd5I6vNNUwc6M4PczuNgB9DzXALBYsmGSFK8?=
 =?us-ascii?q?Ttq6BjExS8o7w8USbEZlB9WikhfD0jKpA7APkbyHHpg08qPG0Hj3KMZw0HLG1K?=
 =?us-ascii?q?gnj1k7TcpDL2ymhqhj9wfNA47FiVmWl6Gvda4Exi7C6H+DzXaSvEFfSAN/TL/K?=
 =?us-ascii?q?XW4BaUfMrdT2/EXCT6SwBrQhNQdBzc2CKq5OatDyiVVGRfHjOMnRYm6rmmewAw?=
 =?us-ascii?q?qIya2IbIbwZ2od2yDdAlAekw8P5XaGKRQ+BiC5rm3DFjNuC0zgb1ns8eZkrnO7?=
 =?us-ascii?q?VVE7zweRYk1l1rq1/AMVhPOGR/MS2LIEpDkuqzFuEFmh2NLWDsKKpxB9c6VEfd?=
 =?us-ascii?q?M9/FBH2HrFtwx8O5ygKLxihl4ecghto0PizRJ3Cp9EkcgrqnMqwxF/KaaZ0FNH?=
 =?us-ascii?q?ajOZ0or8OrzRKmnu4h+vb7Ta1U3Z0NaT4q0P8ug3q03/vAG1EUov629o091L3H?=
 =?us-ascii?q?qT+JrLDBAeXonsUkkq7Rd6obLaYi4j547P0X1sMK+0siLN2t4zBeslzAqgcMlb?=
 =?us-ascii?q?MK+eCADyFMgaDdC0KOM2g1ipcg4EPOdK+a80IsOqbeeJ1LSqPeZghj2mi2tH7Z?=
 =?us-ascii?q?t50kKN8Sp8V+HJ04wEw/GewguISTP8gE29vcDwnIBOfSsSEXanySj4GI5RYbV/?=
 =?us-ascii?q?fZwKCWiyOcK33Mhxh5n3V35e6lGjHVIG1Na1dhWIa1zywBNf1V4QoXyhgia4yz?=
 =?us-ascii?q?10kzc0rquQxiDOwuLidAYZNW5PXmVtkVDsIY2shdAAQEeodxQplAei5Uvix6lb?=
 =?us-ascii?q?pb5zLmnJTUdTYij2KXpvUq+xtrqEfs5O54kksSRRUOSgf1+aTqTxrAcd0yPmB2?=
 =?us-ascii?q?Fe3iw0dym2upXlmBx3kGCdI2xprHraesFwwg3T5MfGSv5S3ToGRS94hifRBlWn?=
 =?us-ascii?q?O9mp/NOUl4rMs+ykVmKhUIFTfjfvzY+aqCS74mhqCwWln/+vgt3nDRQ60Sjj2t?=
 =?us-ascii?q?hqTyrIqwzwYovq16S8Ku9nekhoBFnh68t1AI1+k40whI0O1ngenJma4X0HkWLr?=
 =?us-ascii?q?O9VBxa3+dGYNRSIMw9PN4wjqwkxjImiJx4LkTHqdxMRhasK+YmMX3CI98s9LBL?=
 =?us-ascii?q?2V7LxCgSt6vF64oRjNbvh6mzcX0eEu52ICg+EVpAotyT2QArUTHUlbJyPgjRqJ?=
 =?us-ascii?q?4M6lrKVLemmva6O/21RkndCuF7yCpgBcWHDkepYtByNw78N/ME7S33338I3rZN?=
 =?us-ascii?q?7QbdcLvB2OjxjAl/RVKI42lvcSmSpnPmf9sWckyuEhixxuwIq6vJOGK2h2+KK5?=
 =?us-ascii?q?AxhYNiD6Zs8J+zHti7pekdiS34y1ApphHTALVoPyTf20CDISqejnNwGWHTInsH?=
 =?us-ascii?q?ibHr7fHRKF5EdisnLCCJSrN3CRJHkEwtRuXhidJEpDgA8KWDU2hII2FgevxMb5?=
 =?us-ascii?q?akd2+igR5kLkqhtL0u9oNQPwUmLBqwezcDs0VIKTLBlL7gFB+kfVN9aR7vloEi?=
 =?us-ascii?q?Fc/52hqhGNK2OBawRJC2EJRlKLB1T5Mray4tnA9vCSBvCiIPvWfbWOteteWu+I?=
 =?us-ascii?q?xJKoz4tm5iuMOd+JPnV4FP073UxDXX9iFsTdmjUPTTEXli3XY86aohe85jN4rs?=
 =?us-ascii?q?Sl/Pv3XwLv4JOFC6FOPtV35xC2naCDOvaQhClnKDZY1ZAMxX7SxLgcxl4SjC5u?=
 =?us-ascii?q?eCe3EbQdri7AV6bQmq5RDx4GZCJ/LspI76Qg3gZTPc7XkM/61rl9jvQtEVdKSU?=
 =?us-ascii?q?Thmt21ZcwNO2yyLk7HC12RNLuYJTzH2cX3YaKnRL1UjeVUsQCwuDmBH0/iODSD?=
 =?us-ascii?q?iyfmVxS1Pe5QiyGbOQRUuJuhfRZ1FWjjUNXmZwWnMN92iD0626E7imnWOm4cLz?=
 =?us-ascii?q?d8dVhArrmR7SNen/V+FHZN7ntjLemYhSmZ6/PUJYoRsftuGi50jf5V4Gwmy7tJ?=
 =?us-ascii?q?6yFJXPx0lzHUrt5rolGmlPGAyztnUBVUrDZLi5mGvUFjOaXf65lBVmzI/BML7W?=
 =?us-ascii?q?WMFRsKo8FpBcHou6BVmZDzk/f3KTFf45fO4cA0GcfZMoSEPWAnPB6vHyTbXyUf?=
 =?us-ascii?q?Sjv+HGXSl0VbnOufvleYqpw9rJmkzJMKR69SUlAvG7UQB0BhG9oDCJ1wWS8gkL?=
 =?us-ascii?q?jdh8kNsynt5CLNTdlX68iUHsmZBu/ifXPA1eFJ?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AdAACfYRlch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUwUBAQsBg2snjHWLHIIhl0aBcy0TAYcdIjYHDQEDAQEBAQEBAgETAQEBCgs?=
 =?us-ascii?q?JCCkvgjYkAYJpAiQLAUYGCQJQAylEBYMdggEEAagbM4oth36EQYFXP4R8igcCi?=
 =?us-ascii?q?UaXXgcCgiUEjyskkVYBLJsUBoIBMxojgzyCJxeOHj8ygQIDAQEhE40sAQE?=
X-IPAS-Result: =?us-ascii?q?A0AdAACfYRlch0O0hNFjHAEBAQQBAQcEAQGBUwUBAQsBg2s?=
 =?us-ascii?q?njHWLHIIhl0aBcy0TAYcdIjYHDQEDAQEBAQEBAgETAQEBCgsJCCkvgjYkAYJpA?=
 =?us-ascii?q?iQLAUYGCQJQAylEBYMdggEEAagbM4oth36EQYFXP4R8igcCiUaXXgcCgiUEjys?=
 =?us-ascii?q?kkVYBLJsUBoIBMxojgzyCJxeOHj8ygQIDAQEhE40sAQE?=
X-IronPort-AV: E=Sophos;i="5.56,370,1539673200"; 
   d="scan'208";a="58024142"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 18 Dec 2018 13:11:48 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726861AbeLRVLp (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 18 Dec 2018 16:11:45 -0500
Received: from mail.bootlin.com ([62.4.15.54]:43264 "EHLO mail.bootlin.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726570AbeLRVLp (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 18 Dec 2018 16:11:45 -0500
Received: by mail.bootlin.com (Postfix, from userid 110)
        id BE46F20824; Tue, 18 Dec 2018 22:11:41 +0100 (CET)
X-Spam-Checker-Version: SpamAssassin 3.4.2 (2018-09-13) on mail.bootlin.com
X-Spam-Level: 
X-Spam-Status: No, score=-1.0 required=5.0 tests=ALL_TRUSTED,SHORTCIRCUIT,
        URIBL_BLOCKED shortcircuit=ham autolearn=disabled version=3.4.2
Received: from localhost (lfbn-1-17122-186.w86-248.abo.wanadoo.fr [86.248.186.186])
        by mail.bootlin.com (Postfix) with ESMTPSA id 8F605207BE;
        Tue, 18 Dec 2018 22:11:31 +0100 (CET)
From: Alexandre Belloni <alexandre.belloni@bootlin.com>
To: linux-rtc@vger.kernel.org
Cc: linux-kernel@vger.kernel.org,
        Alexandre Belloni <alexandre.belloni@bootlin.com>,
        Arnd Bergmann <arnd@arndb.de>
Subject: [PATCH] rtc: enforce rtc_timer_init private_data type
Date: Tue, 18 Dec 2018 22:11:26 +0100
Message-Id: <20181218211126.12613-1-alexandre.belloni@bootlin.com>
X-Mailer: git-send-email 2.20.0
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

All the remaining users of rtc_timers are passing the rtc_device as private
data. Enforce that and rename private_data to rtc.

Suggested-by: Arnd Bergmann <arnd@arndb.de>
Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
---
 drivers/rtc/class.c     |  4 ++--
 drivers/rtc/interface.c | 19 +++++++++----------
 include/linux/rtc.h     | 14 ++++++++------
 3 files changed, 19 insertions(+), 18 deletions(-)

diff --git a/drivers/rtc/class.c b/drivers/rtc/class.c
index 6d364085bd86..8d9b65d54f4f 100644
--- a/drivers/rtc/class.c
+++ b/drivers/rtc/class.c
@@ -178,9 +178,9 @@ static struct rtc_device *rtc_allocate_device(void)
 	timerqueue_init_head(&rtc->timerqueue);
 	INIT_WORK(&rtc->irqwork, rtc_timer_do_work);
 	/* Init aie timer */
-	rtc_timer_init(&rtc->aie_timer, rtc_aie_update_irq, (void *)rtc);
+	rtc_timer_init(&rtc->aie_timer, rtc_aie_update_irq, rtc);
 	/* Init uie timer */
-	rtc_timer_init(&rtc->uie_rtctimer, rtc_uie_update_irq, (void *)rtc);
+	rtc_timer_init(&rtc->uie_rtctimer, rtc_uie_update_irq, rtc);
 	/* Init pie timer */
 	hrtimer_init(&rtc->pie_timer, CLOCK_MONOTONIC, HRTIMER_MODE_REL);
 	rtc->pie_timer.function = rtc_pie_update_irq;
diff --git a/drivers/rtc/interface.c b/drivers/rtc/interface.c
index e8d77b1eaeb2..98d9c87b0d1b 100644
--- a/drivers/rtc/interface.c
+++ b/drivers/rtc/interface.c
@@ -609,26 +609,24 @@ void rtc_handle_legacy_irq(struct rtc_device *rtc, int num, int mode)
 
 /**
  * rtc_aie_update_irq - AIE mode rtctimer hook
- * @private: pointer to the rtc_device
+ * @rtc: pointer to the rtc_device
  *
  * This functions is called when the aie_timer expires.
  */
-void rtc_aie_update_irq(void *private)
+void rtc_aie_update_irq(struct rtc_device *rtc)
 {
-	struct rtc_device *rtc = (struct rtc_device *)private;
 	rtc_handle_legacy_irq(rtc, 1, RTC_AF);
 }
 
 
 /**
  * rtc_uie_update_irq - UIE mode rtctimer hook
- * @private: pointer to the rtc_device
+ * @rtc: pointer to the rtc_device
  *
  * This functions is called when the uie_timer expires.
  */
-void rtc_uie_update_irq(void *private)
+void rtc_uie_update_irq(struct rtc_device *rtc)
 {
-	struct rtc_device *rtc = (struct rtc_device *)private;
 	rtc_handle_legacy_irq(rtc, 1,  RTC_UF);
 }
 
@@ -908,7 +906,7 @@ void rtc_timer_do_work(struct work_struct *work)
 		trace_rtc_timer_dequeue(timer);
 		timer->enabled = 0;
 		if (timer->func)
-			timer->func(timer->private_data);
+			timer->func(timer->rtc);
 
 		trace_rtc_timer_fired(timer);
 		/* Re-add/fwd periodic timers */
@@ -955,16 +953,17 @@ void rtc_timer_do_work(struct work_struct *work)
 /* rtc_timer_init - Initializes an rtc_timer
  * @timer: timer to be intiialized
  * @f: function pointer to be called when timer fires
- * @data: private data passed to function pointer
+ * @rtc: pointer to the rtc_device
  *
  * Kernel interface to initializing an rtc_timer.
  */
-void rtc_timer_init(struct rtc_timer *timer, void (*f)(void *p), void *data)
+void rtc_timer_init(struct rtc_timer *timer, void (*f)(struct rtc_device *r),
+		    struct rtc_device *rtc)
 {
 	timerqueue_init(&timer->node);
 	timer->enabled = 0;
 	timer->func = f;
-	timer->private_data = data;
+	timer->rtc = rtc;
 }
 
 /* rtc_timer_start - Sets an rtc_timer to fire in the future
diff --git a/include/linux/rtc.h b/include/linux/rtc.h
index 58147b057acd..c1089fe5344a 100644
--- a/include/linux/rtc.h
+++ b/include/linux/rtc.h
@@ -87,15 +87,16 @@ struct rtc_class_ops {
 	int (*set_offset)(struct device *, long offset);
 };
 
+struct rtc_device;
+
 struct rtc_timer {
 	struct timerqueue_node node;
 	ktime_t period;
-	void (*func)(void *private_data);
-	void *private_data;
+	void (*func)(struct rtc_device *rtc);
+	struct rtc_device *rtc;
 	int enabled;
 };
 
-
 /* flags */
 #define RTC_DEV_BUSY 0
 
@@ -197,11 +198,12 @@ extern int rtc_dev_update_irq_enable_emul(struct rtc_device *rtc,
 						unsigned int enabled);
 
 void rtc_handle_legacy_irq(struct rtc_device *rtc, int num, int mode);
-void rtc_aie_update_irq(void *private);
-void rtc_uie_update_irq(void *private);
+void rtc_aie_update_irq(struct rtc_device *rtc);
+void rtc_uie_update_irq(struct rtc_device *rtc);
 enum hrtimer_restart rtc_pie_update_irq(struct hrtimer *timer);
 
-void rtc_timer_init(struct rtc_timer *timer, void (*f)(void *p), void *data);
+void rtc_timer_init(struct rtc_timer *timer, void (*f)(struct rtc_device *r),
+		    struct rtc_device *rtc);
 int rtc_timer_start(struct rtc_device *rtc, struct rtc_timer *timer,
 		    ktime_t expires, ktime_t period);
 void rtc_timer_cancel(struct rtc_device *rtc, struct rtc_timer *timer);
-- 
2.20.0

