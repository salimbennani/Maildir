Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  12 Dec 2018 19:43:25 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 077B05803DC;
	Wed, 12 Dec 2018 01:30:21 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 12 Dec 2018 01:30:20 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A6DmwkhNOdzC8mhrDaCcl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KPj9osbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRshfWSxfDI2h?=
 =?us-ascii?q?bIUPAeUOMvpFoIb/vFsOtRmzCBKjBO/z0DJFnGP60bEk3+knDArI3BYgH9ULsH?=
 =?us-ascii?q?nMotn7OqISUeGpzKnSzTTIcvxZ1S3g44bObB8hv/CMXbR+fcHMzkQvEx7KjkuL?=
 =?us-ascii?q?pIP/OzOVyuANs2md7+p9WuOjkWknqxt+ojW2wMonl4rHhpoNx1za6Sl0xJw5Kc?=
 =?us-ascii?q?C2RUJle9KoDZhduz2AO4Z3QM4uW3xktSI1x7EcpJK3YCoHxI46yxPdcfCKc4qF?=
 =?us-ascii?q?7xT+X+iLOzh4nmhqeLenihay70egzur8W9Gq0FZFsCVFiMPAtnMT2BzJ7MiIVP?=
 =?us-ascii?q?998l2m2TaV2ADf8uBEIUYqmqrHM5Mt3KI8m54JvUjeECL6hl/6gLKVe0k44OSl?=
 =?us-ascii?q?6ubqbq3jppCGNo90jg/+Mr4pmsy6Gek4NgkOX26G+eWzzbHj/lP2QK9MjvIolq?=
 =?us-ascii?q?nVqZfaJModpqGnGQ9YyZgj6xmhADe8ytgYnmcILEhDeB2Zi4jlIVbOIOr3Dfun?=
 =?us-ascii?q?mVSjjC9rx+zaPr3mGpjNKnnDkLT/crpn5E9c1RE+zdRe55JSF7EAL+j/Wk73tN?=
 =?us-ascii?q?zEEBA5Nxa4zPrgCNV4zokeQ36AAreFMKPOtl+F/uIvLPONZI8Jojn9LOIp5/7z?=
 =?us-ascii?q?jXAjn18dcrKk3Z8WaHC+A/RnLF+VYXvqgtcdD2gKuhAyQ/DtiF2HSTRTfWq9X7?=
 =?us-ascii?q?og5jEnD4KrFYXDRoezj7Cb3ye7GZtWZmZBCl2XFXfodoOEW+oDaS6II89hlCAE?=
 =?us-ascii?q?WqalS4M7yR6uswr6waJ9LuXI4i0YqY7j1N9t6uLJjhEy9Tt0D8eH32GXVW50nH?=
 =?us-ascii?q?gFRzs33KB5vEx8xU2P0al+g/xEC9NT4+lFXRs9NZ7Z1+Z6Ecz9WhrdfteVT1ar?=
 =?us-ascii?q?WtamDis3Tt4rx98OYlxyG9Otjh3Y2yqqArkVl6GEBZAu86Lc2WTxKNh5y3rcyK?=
 =?us-ascii?q?YhiFwmSNNVNWK6nq5/6xTTB4nRnkqEjamqa7oT0DTN9GiZy2qOp19XUAh3XaXB?=
 =?us-ascii?q?XnAfY0/WoM/95kPDSb+uFLsmPhFAyc6ENqtFdNnpgU9aS/fkPdTUe3ixlHuoBR?=
 =?us-ascii?q?aU2rOMa5LndHgH0yXDFkcIiQAT8myANQglGCihpXnTDDhvFVLpfkPt/vNyqHK9?=
 =?us-ascii?q?Tk8o0Q6Ka1dt2Kay+h4QnfacUe8c3qoYuCc9rDV5BEq939PTC9qHuwphfKVdbc?=
 =?us-ascii?q?kh4Ftd0mLZrQh9Pp2mL6BtnVMedwV3v0Xz1xR4EIlAkM4qrG80wwp2M66XzFRB?=
 =?us-ascii?q?dzaA15DqJrLXMnXy/Ayoa6POwF7e1MiZ+6gR5/U4sVnspxypGVc4/HVh0NlV1G?=
 =?us-ascii?q?Wc647ODAoTV5LxT0k2+wJ7p7Hcfiky+YfU2WdwPqmztz/Iw8gpC/c9yha8Y9df?=
 =?us-ascii?q?N7uJFQ/vE8EAG8eiMu0rm1izYRICM+Bf76o0P8Kgd/ub16+nJudgnDS6jWtZ5I?=
 =?us-ascii?q?BxyF6D9y15SuTQxZYK3+mY3hebVzf7lFqhqMH3lpxeajEIA2W/zjLoBIhPaa1o?=
 =?us-ascii?q?fIYHEHuhLNezxtpjmZHtQXlY9Fi4ClMC2c+pfweSblPn0Q1R00QXvWKomS+iwz?=
 =?us-ascii?q?NolDEpq7KV3DbSzOT6aBoHJmlLSXFijFftO4S1j8oWXFO1bwgvjxal4Uf6x65G?=
 =?us-ascii?q?pKVwNWXTQEFIfzToIGFmSKe/qr2CY8tX4pMyrSpXSPi8YUydSrPloRsVyTnjH2?=
 =?us-ascii?q?hdxDA8bT2qoY/2nx95iGKcKnZ8snzZdNp0xRfe4tzcWPFQ0iAHRCl+lTnYGFy8?=
 =?us-ascii?q?M8O18tWTkpfJqvq+WH65Vp1PbSnrypuNtSuh6m1tGxG/nfGzmtv8HAg+0C/70c?=
 =?us-ascii?q?RqVCrSoBb9ZInry7q1MeZ9ckZ0A1/87tJwGptinYsomJEQxX8ai42W/XUdkGf/?=
 =?us-ascii?q?K9Vb2b/kY3oLSj4G2NrV4Anj2E1+IXOF3YP5VnOBwsR/Y9m2eH8Z2iU478pSEq?=
 =?us-ascii?q?eb8KREnTdpolq/tQ/RZPl9njQHxvc05n8VnfoJuBYzwSWHGb8dA1NYPSP3mhSM?=
 =?us-ascii?q?7tC+qrhXZWm1fbix0kp+gc6uDLWYrg5AX3b5f48oHTVs4cVnLFLMzHrz55n4eN?=
 =?us-ascii?q?nXaNIfrByVnA3Gj+hIM5IxjfsKiDFjOWL8u30l1uE6gQZv3ZG8oIiINWFt8Lil?=
 =?us-ascii?q?DR5fMz3/f9kT9S31jaZCgsaW2JiiEY57FTUMWJvoUOikEDYPtfn8MwaOETs8qm?=
 =?us-ascii?q?qUGLbFHA+f7ltmoGzLE5yxK36XI3wZx814RBaBPExfnBwUXDIik547DA+qwdLu?=
 =?us-ascii?q?cFxj6jAN/FL4qQZMyuF1Nxn5SGjfvxylajM1SJiZMRpX4RtO50bTMcyC8O1zGz?=
 =?us-ascii?q?tU8YGmrAyIMmabfRhHDXkVWkyYAFDuJrmv5d7d8+iBG+qxNf3Oba+VqexZUfeI?=
 =?us-ascii?q?yomi0o9n/zaKK8WOMWNuD/w92kpfQ395H97VlCkISywSjyjNddKUpA+g+i1rqc?=
 =?us-ascii?q?Cy6PTrVxzu5YuMCLtSMM9j+xOsgaeEOO6fmjx5KStD1p4XwX/Iyb4f3EMdii10?=
 =?us-ascii?q?djmtF6gAujDJTK7KhqBXCBsbYTtpNMRU96I8whVNOcnDh9zvy753leQ1BElFVF?=
 =?us-ascii?q?D7nsGpZNcHI2W8NFPBGUaKO66KJTzNw8Hrf6y8Tadcg/lTtx21oTybCVPsPiyf?=
 =?us-ascii?q?lzn1UBCiKf1MjCCePBBEpI6xaApiCWj9Q9LgcRC7NN53jTsrwbw7nH/KNGgcMS?=
 =?us-ascii?q?RifENJtLGf8SRYgvBnEWxb8nVlNfWEmzqe7+TAKpcZq/1rAiF1l+Jc+Hs7yrtV?=
 =?us-ascii?q?4ztCRPx6gybSqt9uo1e7kuiA0DZnURxOqipVi4KPp0ltJaLZ9pwTEUrDqT0A4H?=
 =?us-ascii?q?+MQykbu8doEN3otr5dzJCbm6/+Mitq99PS4NtZApaEK4SAKnV3YjTzHzuBRicA?=
 =?us-ascii?q?TCKxJCnhwQR5ne+T8Dfd+pw2tLDlnIYKS7lGRBoyDPxMWRctJ8ALPJoiBmBsqr?=
 =?us-ascii?q?WclsNdoCPm9BQ=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAAB71BBch0O0hNFjGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGDayeMFIwSgg0Ulz+BcwINHRMBhzoiNAkNAQMBAQE?=
 =?us-ascii?q?BAQECARMBAQEIDQkIKS+CNiQBgmIBAgMBAnYGCQEBChIGCSUDDBkEHQ4GEwWDH?=
 =?us-ascii?q?AGCAQQBpnmKIQ+CbYlPEQaBf4QjiDaCJgKJOYF1hRCQSQcCAopGgm2EFSORRJp?=
 =?us-ascii?q?/gg59CIMngicXjiA8ATKBBQEBjScBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ABAAB71BBch0O0hNFjGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGDayeMFIwSgg0Ulz+BcwINHRMBhzoiNAkNAQMBAQEBAQECARMBAQEID?=
 =?us-ascii?q?QkIKS+CNiQBgmIBAgMBAnYGCQEBChIGCSUDDBkEHQ4GEwWDHAGCAQQBpnmKIQ+?=
 =?us-ascii?q?CbYlPEQaBf4QjiDaCJgKJOYF1hRCQSQcCAopGgm2EFSORRJp/gg59CIMngicXj?=
 =?us-ascii?q?iA8ATKBBQEBjScBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,343,1539673200"; 
   d="asc'?scan'208";a="54846871"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 12 Dec 2018 01:30:19 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726832AbeLLJ1P (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 12 Dec 2018 04:27:15 -0500
Received: from vmicros1.altlinux.org ([194.107.17.57]:53086 "EHLO
        vmicros1.altlinux.org" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726643AbeLLJ1O (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 12 Dec 2018 04:27:14 -0500
Received: from mua.local.altlinux.org (mua.local.altlinux.org [192.168.1.14])
        by vmicros1.altlinux.org (Postfix) with ESMTP id EFEFB72CA56;
        Wed, 12 Dec 2018 12:27:12 +0300 (MSK)
Received: by mua.local.altlinux.org (Postfix, from userid 508)
        id E23457CFE6C; Wed, 12 Dec 2018 12:27:12 +0300 (MSK)
Date: Wed, 12 Dec 2018 12:27:12 +0300
From: "Dmitry V. Levin" <ldv@altlinux.org>
To: Geert Uytterhoeven <geert@linux-m68k.org>
Cc: Oleg Nesterov <oleg@redhat.com>, Andy Lutomirski <luto@kernel.org>,
        lineprinter@altlinux.org, Eugene Syromiatnikov <esyr@redhat.com>,
        linux-m68k <linux-m68k@lists.linux-m68k.org>,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>
Subject: Re: [PATCH v5 13/25] m68k: add asm/syscall.h
Message-ID: <20181212092712.GD13288@altlinux.org>
References: <20181210042352.GA6092@altlinux.org>
 <20181210043010.GM6131@altlinux.org>
 <CAMuHMdVYq_2P=gb_zbSGFkPWASTds6uSPTyyhyNAgp2Qm5+feQ@mail.gmail.com>
 <20181210124059.GA11942@altlinux.org>
 <CAMuHMdW8ejp4gm2Xh-8inSQngQ5zRQ9bfsg1SG+BAD8RFV8xcA@mail.gmail.com>
 <20181210133025.GG11942@altlinux.org>
 <20181212085516.GA13288@altlinux.org>
 <CAMuHMdXwX57AZuVPdcEt_HZw1LT7tFpczJsqjW6C0VgHkhJ7dw@mail.gmail.com>
MIME-Version: 1.0
Content-Type: multipart/signed; micalg=pgp-sha256;
        protocol="application/pgp-signature"; boundary="E/DnYTRukya0zdZ1"
Content-Disposition: inline
In-Reply-To: <CAMuHMdXwX57AZuVPdcEt_HZw1LT7tFpczJsqjW6C0VgHkhJ7dw@mail.gmail.com>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org


--E/DnYTRukya0zdZ1
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable

On Wed, Dec 12, 2018 at 10:01:29AM +0100, Geert Uytterhoeven wrote:
> Hi Dmitry,
>=20
> On Wed, Dec 12, 2018 at 9:55 AM Dmitry V. Levin <ldv@altlinux.org> wrote:
> > On Mon, Dec 10, 2018 at 04:30:25PM +0300, Dmitry V. Levin wrote:
> > > On Mon, Dec 10, 2018 at 02:06:28PM +0100, Geert Uytterhoeven wrote:
> > > > On Mon, Dec 10, 2018 at 1:41 PM Dmitry V. Levin <ldv@altlinux.org> =
wrote:
> > > > > On Mon, Dec 10, 2018 at 09:45:42AM +0100, Geert Uytterhoeven wrot=
e:
> > > > > > On Mon, Dec 10, 2018 at 5:30 AM Dmitry V. Levin <ldv@altlinux.o=
rg> wrote:
> > > > > > > syscall_get_* functions are required to be implemented on all
> > > > > > > architectures in order to extend the generic ptrace API with
> > > > > > > PTRACE_GET_SYSCALL_INFO request.
> > > > > > >
> > > > > > > This introduces asm/syscall.h on m68k implementing all 5 sysc=
all_get_*
> > > > > > > functions as documented in asm-generic/syscall.h: syscall_get=
_nr,
> > > > > > > syscall_get_arguments, syscall_get_error, syscall_get_return_=
value,
> > > > > > > and syscall_get_arch.
> > > > > > >
> > > > > > > Cc: Geert Uytterhoeven <geert@linux-m68k.org>
> > > > > > > Cc: Oleg Nesterov <oleg@redhat.com>
> > > > > > > Cc: Andy Lutomirski <luto@kernel.org>
> > > > > > > Cc: Elvira Khabirova <lineprinter@altlinux.org>
> > > > > > > Cc: Eugene Syromyatnikov <esyr@redhat.com>
> > > > > > > Cc: linux-m68k@lists.linux-m68k.org
> > > > > > > Signed-off-by: Dmitry V. Levin <ldv@altlinux.org>
> > > > > > > ---
> > > > > > >
> > > > > > > Notes:
> > > > > > >     v5: added syscall_get_nr, syscall_get_arguments, syscall_=
get_error,
> > > > > > >         and syscall_get_return_value
> > > > > > >     v1: added syscall_get_arch
> > > > > >
> > > > > > > --- /dev/null
> > > > > > > +++ b/arch/m68k/include/asm/syscall.h
> > > > > > > @@ -0,0 +1,39 @@
> > > > > >
> > > > > > > +static inline void
> > > > > > > +syscall_get_arguments(struct task_struct *task, struct pt_re=
gs *regs,
> > > > > > > +                     unsigned int i, unsigned int n, unsigne=
d long *args)
> > > > > > > +{
> > > > > > > +       BUG_ON(i + n > 6);
> > > > > >
> > > > > > Does this have to crash the kernel?
> > > > >
> > > > > This is what most of other architectures do, but we could choose
> > > > > a softer approach, e.g. use WARN_ON_ONCE instead.
> > > > >
> > > > > > Perhaps you can return an error code instead?
> > > > >
> > > > > That would be problematic given the signature of this function
> > > > > and the nature of the potential bug which would most likely be a =
usage error.
> > > >
> > > > Of course to handle that, the function's signature need to be chang=
ed.
> > > > Changing it has the advantage that the error handling can be done a=
t the
> > > > caller, in common code, instead of duplicating it for all
> > > > architectures, possibly
> > > > leading to different semantics.
> > >
> > > Given that *all* current users of syscall_get_arguments specify i =3D=
=3D 0
> > > (and there is an architecture that has BUG_ON(i)),
> > > it should be really a usage error to get into situation where i + n >=
 6,
> > > I wish a BUILD_BUG_ON could be used here instead.
> > >
> > > I don't think it worths pushing the change of API just to convert
> > > a "cannot happen" assertion into an error that would have to be dealt=
 with
> > > on the caller side.
> >
> > I suggest the following BUG_ON replacement for syscall_get_arguments:
> >
> > #define SYSCALL_MAX_ARGS 6
> >
> > static inline void
> > syscall_get_arguments(struct task_struct *task, struct pt_regs *regs,
> >                       unsigned int i, unsigned int n, unsigned long *ar=
gs)
> > {
> >         /*
> >          * Ideally there should have been
> >          * BUILD_BUG_ON(i + n > SYSCALL_MAX_ARGS);
> >          * instead of these checks.
> >          */
> >         if (unlikely(i > SYSCALL_MAX_ARGS)) {
> >                 WARN_ONCE(1, "i > SYSCALL_MAX_ARGS");
> >                 return;
>=20
> Does this have security implications, as args is an output parameter?
> I.e. if you don't fill the array, the caller will use whatever is on the =
stack.
> Can this ever be passed to userspace, leaking data?

In the current kernel code n is always less or equal to 6,
but in theory future changes can potentially break the assertion
and this could lead to leaking data to userspace.

Do you think we should rather be defensive and add some memsets, e.g.

	if (unlikely(i > SYSCALL_MAX_ARGS)) {
		WARN_ONCE(1, "i > SYSCALL_MAX_ARGS");
		memset(args, 0, n * sizeof(args[0]));
		return;
	}
	if (unlikely(n > SYSCALL_MAX_ARGS - i)) {
		unsigned int extra =3D n - (SYSCALL_MAX_ARGS - i);

		WARN_ONCE(1, "i + n > SYSCALL_MAX_ARGS");
		n =3D SYSCALL_MAX_ARGS - i;
		memset(&args[n], 0, extra * sizeof(args[0]));
	}
?


--=20
ldv

--E/DnYTRukya0zdZ1
Content-Type: application/pgp-signature; name="signature.asc"

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCAAGBQJcENRwAAoJEAVFT+BVnCUIk3sP/2rxHFN0Xx6tm1fFkvpKCh3m
OwDhOEyvdBBbU7X7hGUCENtUoSytf8bpEFjokpxYWUOhFcjIYf/FQnuPAScl19Zx
3JwAGTFEk5l5ClfW5KYfdJvO5xj/JqcvKE5OQzmF8mUVV2yrwmnGEaXZkvxViKQg
NEBa0lGH1wAUzXqwezMKtsALez/u9YM0eFNSBUkOOitPpxlUPRYqJ1RGSAPvQQNz
vtSxJFvZ22CB1jr20a/lbLaXQc+75q1tgVUYFxuebdBgk0urXDkWj79FBNFLQQbb
st7XMzWvf28cd6UFk7rQj3lS/tG7/aSqCuJM6Wke94rAfgVccaq13a4uL0b1uhJ+
vQjA2Kh37U4r+yNX0zSBukA3IfEJphrURYzOIYhy1TmVP6yG9bdf46sDGYAQ7KiP
Jo6XxZdYjVYGULHQN83NcXD5s8hMgbF3BbdOURKr1OlriQeZ5XknAw3ce6ww8QAZ
bCq2R60nDZjUe6CCAMEIvuy3Qubz2gbErNg7b+wXARxJw9XVli2CiAQqzfoiRmtX
6Uh/2oaedtBO4c/V8MuGhKyP3bnx0VamBx1qW/8Er4KojaXw6Oe39RyEbaeu4VIX
hJnx+SjIA0+I8IocjhUJiBZ4dCSss3zkVjEQVX8cn0/co8aimoVxbSgPLmG2529n
gpmQd64c57KB9aQwEd8n
=nTHl
-----END PGP SIGNATURE-----

--E/DnYTRukya0zdZ1--
