Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 08:49:56 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga008.fm.intel.com (fmsmga008.fm.intel.com [10.253.24.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id E0907580380;
	Wed, 12 Dec 2018 05:07:34 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga008-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 12 Dec 2018 05:07:34 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A92MUoRZ19vCmi1RvWiJzAHL/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpci8YR7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyJPDIOi?=
 =?us-ascii?q?YYUSDOQBM+lXoJXgqFQMthu+HQuhCfjgyjNUnHL7x7E23/g/HQzAwQcuH8gOsH?=
 =?us-ascii?q?PRrNjtOqscX+W1zKjUzTXZb/JdxDjy5JLVeR4nv/6MQ7NwcczfxUIyEA7Fikif?=
 =?us-ascii?q?qZL+MjyP0uQNr2yb7+tmVeKyhG8rsQZxoiKgxso1jITCm4Ebykjc+Cln3Io4Ic?=
 =?us-ascii?q?e0RFN1bNK6CpdcqiKXO5dsTs4jQWxkoDs2x7kJtJKhYSQG1JYqywTCZ/GFaYSF?=
 =?us-ascii?q?4hDuWeCMKjlinn1lYqiwhxOq/Eig1OL8Us603U5UripKjNbMrGoB1x/N5cidTP?=
 =?us-ascii?q?ty4EOh1SyI1wDJ5eFIOUE0lazFJJ492rM8iIYfvEDZEiPrlkj6krWaelgn9+S0?=
 =?us-ascii?q?8ejqY7frqoeZN4BuiwH+Nqoumta4AeQ9KgUOW2mb+eKh1Lzs5EH5Q6tFjucwkq?=
 =?us-ascii?q?bHtJDWPMMbp6C/AwBLyIYu8Ai/Dzi439QCh3UHL0xKeAiBj4f3P1HCOvf4De2w?=
 =?us-ascii?q?g1i0ijdk2+jGPqH9ApXKNnXDlLbhfbVj5EJGxwsz0MtS55ZVCrEHPfLyVVX9tN?=
 =?us-ascii?q?3eDh8lLQO0x/zrB8l61oMbQWiPGLOWMLvOsV+U4eIiO+mMa5UUuDbhMfcl4OTi?=
 =?us-ascii?q?jX8kmVAHe6mp0oAaaHS5HvRgPkWYbmDggtYHEWcWoAU+SPbmh0GFUT5Wf3yyRb?=
 =?us-ascii?q?4z5iknCIK6CofOXoKtgLuf0yuhHZ1WYWZGClaLEXrzc4WEWvEMaD+dI8N7kzwE?=
 =?us-ascii?q?U6ShRJEl1R20qAD6zL9nJPLO+iIErZLjyMR15+rLmB4o7jx0D8Od02KXQ2FuhG?=
 =?us-ascii?q?wIRSQ73KR+oUx711eC3rJ0g/1eFdxP+fxJVh02OoLbz+x/E9ryQB7Ofs+VSFa6?=
 =?us-ascii?q?RdWrGTIxQcg3w9MUZ0Z9Gs+tjhbM3yexB78VlrqLBIE7867G3njxIdp9xGjC1K?=
 =?us-ascii?q?U7k1YmRc5PP3W8hqFj7wjTG5LJk0KBmqm3b6scwjDC+H2DzWWUukFYSxB/UaPC?=
 =?us-ascii?q?UXAbZUvWqND561jGT7+vD7QnLwRAxdSDKqtMdt3mk1FGSO3/N9TZZmK7g32wCg?=
 =?us-ascii?q?qQxrOQcIrqfH0Q0zjHB0gajQ8f53aGOhI4Bie6vW3eCidjFVbuY0Pq7Ol/p2m3?=
 =?us-ascii?q?Tk4yzwGWcUJh06C59QIShfyZU/kTxK4LuD89qzVoG1awx87WC9uFpwpmYKVcYd?=
 =?us-ascii?q?M87E1b1W7DsAx9JJigL6Fkhl4RaAl3u0Lu1xNqCoRPi8QqrXUqzBZsJqKcyl9O?=
 =?us-ascii?q?azSY3ZXoML3NNmby5Ayva7LR2lzGytmW/rkA6fsmpFTjpg2mDVci/Gh93NlT0H?=
 =?us-ascii?q?uc4YvKAREWUZLwVEY36hd7q6vbYik7+4Pby3lsPbOovT/F3tIjHPElxQq4f9dD?=
 =?us-ascii?q?LKOEExf/Es0HB8S0NOMmgVmobhIeM+BU+645JMemd/qA2K62M+dshjOmjWJb4I?=
 =?us-ascii?q?9j1kKA7TZzSunN35wd2fGXwhOHVyvgjFemqs33g4FEai0IEWql1CfkA5RdZqts?=
 =?us-ascii?q?coYRCGeiOtG4yc96h5HwRXFY7lmjB1Ud1c+teBqSaUH93AJK2UQWp3ynhTW3zz?=
 =?us-ascii?q?hunz41qaqf2TTEw/7+exofJm5LWG5igE/sIIi1ldwbXFKkbxM0lBuj/kv6w6lb?=
 =?us-ascii?q?pKJiL2jcW0tIfi72L318Xau0rLaNf8lP6JYwuyVNTOu8eUyaSqL6oxYC0SPsBX?=
 =?us-ascii?q?FexDM4dzGtoJn5hAZ1iGGeLHZyqnrWZ8dwyAzb5NzdQ/5RwzUHSDN5iTnRGliz?=
 =?us-ascii?q?Id2p8c+ImJfEt+C0T3ihWYFLcSn30YOAszO25G1wDh24hfyzmNznEQ4h3C//1t?=
 =?us-ascii?q?lqUzjIrRnmbonq0aS6Lfxofk1yCFDg7Mp6H5l0kpEsi5EIxXgampKV8GIEkWjp?=
 =?us-ascii?q?MNVXw6L+bGcXSj4NzN7Y+wzl2ExlLnKUyIP1THSdws19Z9akZmMawD4y78dPCK?=
 =?us-ascii?q?2M9rxLgTN1okakrQLWefV9mzYdyfg053IAjeAGphEtzjmDDbAIBkZXIzbslxuT?=
 =?us-ascii?q?4tC6raVXYnuvcLeq2Ep/m9ChEK+NogVGVHnlfZciGDd67t9jP1LUzH3z9obkdc?=
 =?us-ascii?q?HMbdIUsx2YiRbBgPJTKJIsjfoKnitnNHn5vX0kze47kBNv0Yu7vIiBN2Vi4qa5?=
 =?us-ascii?q?DgREOT3yYsMZ4ivtgrpGnsaKw4CvGY1sFS4RU5vvSfKoDSgetfD6NwuVFD08q3?=
 =?us-ascii?q?GbGafQHAOF6UdmqW7PHI6vN32NOHYZytBiTgGHJENDmAAUQCk6npkhGwCo3sPh?=
 =?us-ascii?q?dVl25isL6l7ksBdMyf9oNxriUmfZvgiocSw5SJyeLBpQ8wFD6F3ZMc2Y7uJvAS?=
 =?us-ascii?q?5Y+oetoxCKKmyefw5IF30GWlSYB1D/Obmj/dnB8++FBuqnMvvBe7OOpfZFV/eP?=
 =?us-ascii?q?w5Kv3ZBr/zKNNsWJI3ljAOc32ktFXXBlBcvZny8DRDAQlyLId8Sbvguz+jVrrs?=
 =?us-ascii?q?Cj9/TmQALv6pWOC7tRMtVv+gq6gaSZN+6XiyZ2NyxY1o4XxXLTzLgf3VgSizxh?=
 =?us-ascii?q?djW3ELQAszLNQ7zUmqNNExEbbCZzPtNS760gxglNJdLbitTt27Fik/46EE1FWk?=
 =?us-ascii?q?Lhm82zYcwKInqwNFfGBEaNKbSHKifHw8DxYaOgV7JQiP9YuAG3uTaeC0XjJCiM?=
 =?us-ascii?q?lyH1VxCzNuFBlD2bPB1buI2nbhlhE3TsTNL4ZR29K9J3iTw2wbsphnLFL2IcMD?=
 =?us-ascii?q?58c19Tob2U9y9XnvJ/G2lZ5Hp/MeaEgzqZ7/XfKpsOsfpkGCJ0l+db4HQ807RU?=
 =?us-ascii?q?7SFES+ZzmCvdtdNup1Cmku+SyjtoShZOqzBLhJ6VskVmI6nW6p5AWXOXtC4KuE?=
 =?us-ascii?q?qdBg4W7+Z0FsHioaBXx8bCkuqnJzpP6c78+coaGtiRLZzXMzwmKxW/SxDOCw5Q?=
 =?us-ascii?q?BxKuNH3FlgRj1rm2+2OUqNJy/pzghrIHTqNfVVooBrUdEEszT49KG4t+Qj5xye?=
 =?us-ascii?q?3Tt8UP/3fr6UCJHMg=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAAD5BhFch0O0hNFjGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGDayeMFIwSgg0Ulz+BcwINHRMBhz0iNAkNAQMBAQE?=
 =?us-ascii?q?BAQECARMBAQEIDQkIKS+CNiQBgmEBAQEBAgEBAnYGCQEBChIGCSUDDBkEHQ4GE?=
 =?us-ascii?q?wWDHAGBeQgEAacIiiEPgm2JTxEGgX+EI4g2giYCiTmBd4UQkEwHAgKKSIJthBU?=
 =?us-ascii?q?jgVyFGopQmwWCDn0IgyeCJxeOIDwBMoEFAQGMfAEB?=
X-IPAS-Result: =?us-ascii?q?A0ABAAD5BhFch0O0hNFjGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGDayeMFIwSgg0Ulz+BcwINHRMBhz0iNAkNAQMBAQEBAQECARMBAQEID?=
 =?us-ascii?q?QkIKS+CNiQBgmEBAQEBAgEBAnYGCQEBChIGCSUDDBkEHQ4GEwWDHAGBeQgEAac?=
 =?us-ascii?q?IiiEPgm2JTxEGgX+EI4g2giYCiTmBd4UQkEwHAgKKSIJthBUjgVyFGopQmwWCD?=
 =?us-ascii?q?n0IgyeCJxeOIDwBMoEFAQGMfAEB?=
X-IronPort-AV: E=Sophos;i="5.56,344,1539673200"; 
   d="asc'?scan'208";a="54867328"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 12 Dec 2018 05:07:33 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727590AbeLLNHa (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 12 Dec 2018 08:07:30 -0500
Received: from vmicros1.altlinux.org ([194.107.17.57]:59904 "EHLO
        vmicros1.altlinux.org" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727544AbeLLNHN (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 12 Dec 2018 08:07:13 -0500
Received: from mua.local.altlinux.org (mua.local.altlinux.org [192.168.1.14])
        by vmicros1.altlinux.org (Postfix) with ESMTP id 7D3B372CA65;
        Wed, 12 Dec 2018 16:07:11 +0300 (MSK)
Received: by mua.local.altlinux.org (Postfix, from userid 508)
        id 71A907CFF89; Wed, 12 Dec 2018 16:07:11 +0300 (MSK)
Date: Wed, 12 Dec 2018 16:07:11 +0300
From: "Dmitry V. Levin" <ldv@altlinux.org>
To: Geert Uytterhoeven <geert@linux-m68k.org>
Cc: Oleg Nesterov <oleg@redhat.com>, Andy Lutomirski <luto@kernel.org>,
        lineprinter@altlinux.org, Eugene Syromiatnikov <esyr@redhat.com>,
        linux-m68k <linux-m68k@lists.linux-m68k.org>,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>
Subject: Re: [PATCH v5 13/25] m68k: add asm/syscall.h
Message-ID: <20181212130711.GB16479@altlinux.org>
References: <CAMuHMdW8ejp4gm2Xh-8inSQngQ5zRQ9bfsg1SG+BAD8RFV8xcA@mail.gmail.com>
 <20181210133025.GG11942@altlinux.org>
 <20181212085516.GA13288@altlinux.org>
 <CAMuHMdXwX57AZuVPdcEt_HZw1LT7tFpczJsqjW6C0VgHkhJ7dw@mail.gmail.com>
 <20181212092712.GD13288@altlinux.org>
 <CAMuHMdVvw3_3rm3v8J8u6ic6Wy3o70mOP1qaWQ=Ltf1XU=nnVQ@mail.gmail.com>
 <20181212120417.GC15561@altlinux.org>
 <CAMuHMdXqJeH0C8FHy=G=ycArdkvjYPy48+3LmACnyS9RuqV30g@mail.gmail.com>
 <20181212123730.GA16479@altlinux.org>
 <CAMuHMdVJGpLYJp7CfvOYOmboRjFauWh1joqk=-kpLw212Oj7aA@mail.gmail.com>
MIME-Version: 1.0
Content-Type: multipart/signed; micalg=pgp-sha256;
        protocol="application/pgp-signature"; boundary="1LKvkjL3sHcu1TtY"
Content-Disposition: inline
In-Reply-To: <CAMuHMdVJGpLYJp7CfvOYOmboRjFauWh1joqk=-kpLw212Oj7aA@mail.gmail.com>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org


--1LKvkjL3sHcu1TtY
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable

Hi Geert,

On Wed, Dec 12, 2018 at 01:54:05PM +0100, Geert Uytterhoeven wrote:
> On Wed, Dec 12, 2018 at 1:37 PM Dmitry V. Levin <ldv@altlinux.org> wrote:
> > On Wed, Dec 12, 2018 at 01:27:14PM +0100, Geert Uytterhoeven wrote:
> > > On Wed, Dec 12, 2018 at 1:04 PM Dmitry V. Levin <ldv@altlinux.org> wr=
ote:
> > > > On Wed, Dec 12, 2018 at 10:43:33AM +0100, Geert Uytterhoeven wrote:
> > > > > On Wed, Dec 12, 2018 at 10:27 AM Dmitry V. Levin <ldv@altlinux.or=
g> wrote:
> > > > > > On Wed, Dec 12, 2018 at 10:01:29AM +0100, Geert Uytterhoeven wr=
ote:
> > > > > > > On Wed, Dec 12, 2018 at 9:55 AM Dmitry V. Levin <ldv@altlinux=
=2Eorg> wrote:
> > > > > > > > On Mon, Dec 10, 2018 at 04:30:25PM +0300, Dmitry V. Levin w=
rote:
> > > > > > > > > On Mon, Dec 10, 2018 at 02:06:28PM +0100, Geert Uytterhoe=
ven wrote:
> > > > > > > > > > On Mon, Dec 10, 2018 at 1:41 PM Dmitry V. Levin <ldv@al=
tlinux.org> wrote:
> > > > > > > > > > > On Mon, Dec 10, 2018 at 09:45:42AM +0100, Geert Uytte=
rhoeven wrote:
> > > > > > > > > > > > On Mon, Dec 10, 2018 at 5:30 AM Dmitry V. Levin <ld=
v@altlinux.org> wrote:
> > > > > > > > > > > > > syscall_get_* functions are required to be implem=
ented on all
> > > > > > > > > > > > > architectures in order to extend the generic ptra=
ce API with
> > > > > > > > > > > > > PTRACE_GET_SYSCALL_INFO request.
> > > > > > > > > > > > >
> > > > > > > > > > > > > This introduces asm/syscall.h on m68k implementin=
g all 5 syscall_get_*
> > > > > > > > > > > > > functions as documented in asm-generic/syscall.h:=
 syscall_get_nr,
> > > > > > > > > > > > > syscall_get_arguments, syscall_get_error, syscall=
_get_return_value,
> > > > > > > > > > > > > and syscall_get_arch.
> > > > > > > > > > > > >
> > > > > > > > > > > > > Cc: Geert Uytterhoeven <geert@linux-m68k.org>
> > > > > > > > > > > > > Cc: Oleg Nesterov <oleg@redhat.com>
> > > > > > > > > > > > > Cc: Andy Lutomirski <luto@kernel.org>
> > > > > > > > > > > > > Cc: Elvira Khabirova <lineprinter@altlinux.org>
> > > > > > > > > > > > > Cc: Eugene Syromyatnikov <esyr@redhat.com>
> > > > > > > > > > > > > Cc: linux-m68k@lists.linux-m68k.org
> > > > > > > > > > > > > Signed-off-by: Dmitry V. Levin <ldv@altlinux.org>
> > > > > > > > > > > > > ---
> > > > > > > > > > > > >
> > > > > > > > > > > > > Notes:
> > > > > > > > > > > > >     v5: added syscall_get_nr, syscall_get_argumen=
ts, syscall_get_error,
> > > > > > > > > > > > >         and syscall_get_return_value
> > > > > > > > > > > > >     v1: added syscall_get_arch
> > > > > > > > > > > >
> > > > > > > > > > > > > --- /dev/null
> > > > > > > > > > > > > +++ b/arch/m68k/include/asm/syscall.h
> > > > > > > > > > > > > @@ -0,0 +1,39 @@
> > > > > > > > > > > >
> > > > > > > > > > > > > +static inline void
> > > > > > > > > > > > > +syscall_get_arguments(struct task_struct *task, =
struct pt_regs *regs,
> > > > > > > > > > > > > +                     unsigned int i, unsigned in=
t n, unsigned long *args)
> > > > > > > > > > > > > +{
> > > > > > > > > > > > > +       BUG_ON(i + n > 6);
> > > > > > > > > > > >
> > > > > > > > > > > > Does this have to crash the kernel?
> > > > > > > > > > >
> > > > > > > > > > > This is what most of other architectures do, but we c=
ould choose
> > > > > > > > > > > a softer approach, e.g. use WARN_ON_ONCE instead.
> > > > > > > > > > >
> > > > > > > > > > > > Perhaps you can return an error code instead?
> > > > > > > > > > >
> > > > > > > > > > > That would be problematic given the signature of this=
 function
> > > > > > > > > > > and the nature of the potential bug which would most =
likely be a usage error.
> > > > > > > > > >
> > > > > > > > > > Of course to handle that, the function's signature need=
 to be changed.
> > > > > > > > > > Changing it has the advantage that the error handling c=
an be done at the
> > > > > > > > > > caller, in common code, instead of duplicating it for a=
ll
> > > > > > > > > > architectures, possibly
> > > > > > > > > > leading to different semantics.
> > > > > > > > >
> > > > > > > > > Given that *all* current users of syscall_get_arguments s=
pecify i =3D=3D 0
> > > > > > > > > (and there is an architecture that has BUG_ON(i)),
> > > > > > > > > it should be really a usage error to get into situation w=
here i + n > 6,
> > > > > > > > > I wish a BUILD_BUG_ON could be used here instead.
> > > > > > > > >
> > > > > > > > > I don't think it worths pushing the change of API just to=
 convert
> > > > > > > > > a "cannot happen" assertion into an error that would have=
 to be dealt with
> > > > > > > > > on the caller side.
> > > > > > > >
> > > > > > > > I suggest the following BUG_ON replacement for syscall_get_=
arguments:
> > > > > > > >
> > > > > > > > #define SYSCALL_MAX_ARGS 6
> > > > > > > >
> > > > > > > > static inline void
> > > > > > > > syscall_get_arguments(struct task_struct *task, struct pt_r=
egs *regs,
> > > > > > > >                       unsigned int i, unsigned int n, unsig=
ned long *args)
> > > > > > > > {
> > > > > > > >         /*
> > > > > > > >          * Ideally there should have been
> > > > > > > >          * BUILD_BUG_ON(i + n > SYSCALL_MAX_ARGS);
> > > > > > > >          * instead of these checks.
> > > > > > > >          */
> > > > > > > >         if (unlikely(i > SYSCALL_MAX_ARGS)) {
> > > > > > > >                 WARN_ONCE(1, "i > SYSCALL_MAX_ARGS");
> > > > > > > >                 return;
> > > > > > >
> > > > > > > Does this have security implications, as args is an output pa=
rameter?
> > > > > > > I.e. if you don't fill the array, the caller will use whateve=
r is on the stack.
> > > > > > > Can this ever be passed to userspace, leaking data?
> > > > > >
> > > > > > In the current kernel code n is always less or equal to 6,
> > > > > > but in theory future changes can potentially break the assertion
> > > > > > and this could lead to leaking data to userspace.
> > > > >
> > > > > OK.
> > > > >
> > > > > > Do you think we should rather be defensive and add some memsets=
, e.g.
> > > > > >
> > > > > >         if (unlikely(i > SYSCALL_MAX_ARGS)) {
> > > > > >                 WARN_ONCE(1, "i > SYSCALL_MAX_ARGS");
> > > > > >                 memset(args, 0, n * sizeof(args[0]));
> > > > > >                 return;
> > > > > >         }
> > > > > >         if (unlikely(n > SYSCALL_MAX_ARGS - i)) {
> > > > > >                 unsigned int extra =3D n - (SYSCALL_MAX_ARGS - =
i);
> > > > > >
> > > > > >                 WARN_ONCE(1, "i + n > SYSCALL_MAX_ARGS");
> > > > > >                 n =3D SYSCALL_MAX_ARGS - i;
> > > > > >                 memset(&args[n], 0, extra * sizeof(args[0]));
> > > > > >         }
> > > > > > ?
> > > > >
> > > > > Yes please.
> > > > >
> > > > > But please handle all of that in the generic code, so it doesn't =
have to be
> > > > > replicated across all architectures.
> > > > >
> > > > > E.g. make syscall_get_arguments() a wrapper in generic code, call=
ing
> > > > > __syscall_get_arguments() in architecture-specific code.
> > > > >
> > > > > And make the latter return int, so it can indicate other failures.
> > > >
> > > > Other failures?  What syscall_get_arguments is expected to do
> > > > if __syscall_get_arguments returned, say, -1?
> > >
> > > Fail. Just like in case of other generic ill conditions it can detect=
 itself.
> >
> > Sorry, I don't quite follow.  syscall_get_arguments() has no return cod=
e,
>=20
> Which may be an indicator for a different problem.
> What is e.g. populate_seccomp_data() supposed to do if
> syscall_get_arguments() fails?

Well, syscall_get_arguments() is not supposed to fail if invoked properly.

Currently populate_seccomp_data() does this:
	struct task_struct *task =3D current;
	struct pt_regs *regs =3D task_pt_regs(task);
	unsigned long args[6];
	...
	syscall_get_arguments(task, regs, 0, 6, args);

I don't see how this could fail.

> > so all it can possibly do is to zero out args[], e.g.
> >
> >         if (unlikely(__syscall_get_arguments(task, regs, i, n, args) < =
0)) {
> >                 memset(args, 0, n * sizeof(args[0]));
> >                 return;
> >         }
> >
> > Do you mean this?
>=20
> Exactly.

OK, I'll prepare the change, thanks.


--=20
ldv

--1LKvkjL3sHcu1TtY
Content-Type: application/pgp-signature; name="signature.asc"

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCAAGBQJcEQf/AAoJEAVFT+BVnCUIlPgQAMGAtI7/42vOKKr/xEQt9okf
3l3K2+wmWCycpBuf1ikUE3qUtCNP2wZoY5AlvCI4MYOQ0AojM46Ijrvm/Uyflkyt
HY9W13ojdKnGnZ6Sj04YIhrmoDr0EIl5t4LqM8+C7ZXRw4nCKuUCPZTaAcWNTGF1
iSlgPuuBs+8wJkyaZX0flZV4RGQsXasVuxsKx+/hqW+cRBny9Jb5EmcDhf7vwmUR
O8r8SEve2ml3lXW6/1QKyt4VzpeXVALleMp9e+uyIz41cU+oD1YB8U6hrICopo/V
StDqgBgCSMyobyDXj6OXerv03swM5xV/rl5XT+p/C6uxjNqSOvnPv9N1Fy+YcYSj
65wIz9LXD3Z6mIZeQtoNLCXP1oSCr8Xz7RpbkECU5ecDv/C0ybqJ57wYTav0o6re
T3SFYQ/uJVG8Y17jmZVlp5ri7xX0BSdhaT7xdvOv2HGz/TIrcOh1T3YTlPiZtrie
qqWmw6AEVg4XgTXZ6GuZ9SHI41+8TohMUnZb/P4SX77WWkmX2zl6txyIH2E4tvRM
re7WOGFdTza7aqBDVSbXgfub7pI3xA1No75wYjvR494/HaBeX3ntceqYQqwNiOW2
Sm0w2RlD3qHfcmj0zINjeNCSX3VsPPFgUuIeAcekbt8LctEgRfWTKTl9k1X7B1lQ
cAedCEzz+vjkM62Zt5hO
=5oRj
-----END PGP SIGNATURE-----

--1LKvkjL3sHcu1TtY--
