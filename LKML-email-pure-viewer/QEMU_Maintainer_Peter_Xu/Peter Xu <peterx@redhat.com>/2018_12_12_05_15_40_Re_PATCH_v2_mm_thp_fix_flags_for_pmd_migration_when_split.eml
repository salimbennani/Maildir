Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  12 Dec 2018 19:41:37 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id DE10458079D;
	Tue, 11 Dec 2018 21:15:54 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by orsmga006-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 11 Dec 2018 21:15:54 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ASo3VxR+Jqnvx4v9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1+8VIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CS2RPXthfWTFCDIOy?=
 =?us-ascii?q?YIQAE/cOMuRWoInmv1sDrwCzBRWwCO711jNEmmX70K883u88EQ/GxgsgH9cWvX?=
 =?us-ascii?q?rOstr1KLkdUfqox6bJ0DXIcvRb2S/j54jUbB8hu/6NUKlqccXP1EYvFxnKjkmK?=
 =?us-ascii?q?pYP5ODOV0/0Avm6G5ORjTeKik3Arpx11rzS128shhJfFipgIxl3H6Sl12oc4KN?=
 =?us-ascii?q?+gREJlfdKpFIFcuzyUOodoWM8uXmJltSggxrEYupO2ejUBxo49yB7FcfOHdpCF?=
 =?us-ascii?q?4hL9W+aVJjd1nGxleL2hiBao60SgyfPzVtOy0FlUqipJiN7MtmoC1xDL68iHTO?=
 =?us-ascii?q?Vy/lu51DqRywze7vtILV06mKbFMZIt3709moYJvUnCHCL6gED2g7WXdkUg9Oio?=
 =?us-ascii?q?8ePnYrD+q5+YNo90jBz+M6s3lsy8H+s4KA4OUHaf+eil073i80v5T6tQjvAtjK?=
 =?us-ascii?q?nZv47VJd4Bqq66HQBVyIAj5Ai7Dzu819QYh3YHIEpfeB2bl4jpJ03OIPfgAPe7?=
 =?us-ascii?q?glSskylky+rJP738GZjNKnnDkLH8fbdy8UJcyQwzzcxB6JJQEL0OPPXzWkrpvt?=
 =?us-ascii?q?zCEhA5KxC0w/rgCNhl1oMRQ2OPArODP6PVq1OI5v8vLPOKZI8aozv9L/kl5/jz?=
 =?us-ascii?q?jX42g1MdfK+p3YcJZ3C8BPhpP0KZYX/0iNcbDWgKphY+TPDtiFCaUz5TYGi9U7?=
 =?us-ascii?q?g/5jE8DoKmC4DDS5upgLyA2ie7A5JXanpHClCKDXfnaYGEV+0QZyKVJ89riiYE?=
 =?us-ascii?q?WqS5S489yRGusxf3xKB8LurU/S0Ytojv1MJv6O3Rjhwy8T10D8KA02CCVW10n2?=
 =?us-ascii?q?UIRyMo06B7u0By1lCD0a1gifxCCdNT/+9JUhs9NZPEzOx1EdbyVhjFfteIUlmm?=
 =?us-ascii?q?RNqmDCo1TtIwxd8Ofkl8F8+jjhDFwyqlHbsVm6aXC5wz96LWx2LxKNply3bayK?=
 =?us-ascii?q?khiEErTdZVOm24mKFz7QjTCJTPk0WCiamqc6MQ3CrO9GeGyWqDp0VYUA92UaXY?=
 =?us-ascii?q?UnETfErWrdLl5kzcS7+iE6goMgxEycSaMKtFdsXpjUlaRPfkINnRfni+m3muCh?=
 =?us-ascii?q?qSxrODdozqe34D0yXbE0UElwET/XCbNQkxHCuhomTeDCBwGlLreU/j7e5+qHaj?=
 =?us-ascii?q?RE8u0w6Kd1Fh16ay+hMNmfycSvYT3rUYuCchqzR4Bkq908jRC9qaowphfaNcYd?=
 =?us-ascii?q?wm7VdD1GLZsRF9P5O6I6BjgF4ebxp4v0f02xprDYVAlNAgrGk2wwpqNaKYzFRB?=
 =?us-ascii?q?eiuC0pD0JLLWJXf9/RC1Z6HNx1HRzcyZ+qEM6PQ/tVXupwWpFksk83V63NhZyX?=
 =?us-ascii?q?qc5pPWDAUMVZL9SFo49x9/p7vCeCky+5vU1WFwMamzqjLD288pCPE5xRq6ftZf?=
 =?us-ascii?q?MLmLFAn9E8ABA8iuKeoqm0Wmbx4ePeBS8rI0MN2id/ecxKGrO+Ngliq8jWtb+I?=
 =?us-ascii?q?B9zl6M9y1kR+7S3pYK3+uX3hGaWDf7lluhtN74mZpFZT0LAmWw0yzkC5NPaa1o?=
 =?us-ascii?q?eoYLD3yjI8m2xtV4mp7sVGRU9F+lB1MaxsCpfQCeYED63Q1VzU4Xu2ComTOkzz?=
 =?us-ascii?q?xolDEktqqe3C3Uz+XibhYHIXNLRG95gFfoIIi0ic0aXUeyYwgokhul+Vj1x6xB?=
 =?us-ascii?q?qKtjKGnTRF9CfzLqIGF6Tquwqr2CbtZN6JwyqyVXU+e8YVeARr7muRQa0CDjH2?=
 =?us-ascii?q?pYxD8lcTGnoZH5nx18iGKAI3d/tnvZecdsxRjB4NzQX+Je3j0DRCNgkznYGkC8?=
 =?us-ascii?q?P8W1/dWTj5rCsvqxV2W7Wp1RcCnry5iNtC+65W1sHB2+kOq/mtzhEQgmzyD708?=
 =?us-ascii?q?NmWjnPrBb5eoPrzbi1Mfp7fkl0A1/x88l6FZt/kocqhJEQxGIVhpOa/XcclWfz?=
 =?us-ascii?q?MNNb2b/xbXYXRD4LxcLV7xbh2EF5Mn2JwIf5XG2HwsR9f9m6fn8W2iUl4sBPCa?=
 =?us-ascii?q?eU76ZLkTF7o1WmtgLRfeZyni0GxvQw8n4ajPoEuA4sziWbH7ATElNUPS3qlxSU?=
 =?us-ascii?q?8d++qL9ba3qocbi1zEB+h8yuDKmeogFAX3b0YosiHSh17sllMVPDynvz6pz/eN?=
 =?us-ascii?q?nLbNIerRmUkxbGj+hIJ5M9jPsKhSx7OW3juX0p0fI0jRtr3ZuipoiIN31t/L6l?=
 =?us-ascii?q?Ah5fLjD6fNkc+jbpjaZDhMqW252vE45lGjUKWpvoUP2pHCgTtfThKwaBDjk8pm?=
 =?us-ascii?q?2HFrrYGA+V8F1moG7XE5C3K3GXI2EUzdd4SxmYOkNfmxoYXCkgkp46CwCqx9Hh?=
 =?us-ascii?q?cEFj6TAK/VP4rhpMyuR1NxjwSGvfpQGoaisqR5ibNhZZ8gZC50LNO8yE8u1zBz?=
 =?us-ascii?q?1Y/oGmrAGVKm2bYBlIDXgUWkOeAVDvJKKu5d7G8+iXHee+K/rOYbOTqe1RTfuI?=
 =?us-ascii?q?xJSv0pd48DaILMmAIn5iD/gj0EpZQX95A9jZmykISyEPlyLCcc+bpBS/+i12tM?=
 =?us-ascii?q?y/8+7rWAXg5YSREbtSLM5v9guygaeCMe6QmSl4JSxZ1pMK2X/H1rwf0EQOhCFp?=
 =?us-ascii?q?cjmnCa4AujLVTKLMhq9XCAYWZDluNMRT9aIzwAlMNdTfitP0zbN4iv81C1FYVV?=
 =?us-ascii?q?3ugM2pZMoKI32jO1PDHkqEKLOGJTjTycHtfay8UaFQjPlTtxCopTabEkrjMi6f?=
 =?us-ascii?q?mDXzSx+vMf9DjCeAMRxauYG9dAttCGf5QNLnbB27LMF4jTkszbIogXPKMHYWMS?=
 =?us-ascii?q?JgfENVsr2Q8SRYj+1/GmNb6HplKOiEmyCB4OjZKpYZq/1rAitvmuJe4XQ6zaZV?=
 =?us-ascii?q?7S5eSPx0nivSssBho1W8nuaTzTpnVUkGljEep4WNpllrP7nY8NFjWXLJ9hQM7m?=
 =?us-ascii?q?KOQ0AJp99oANvuuKdO4snGkq7+OHJe/tvRu9EBUZv6MsWCZUIsLRfzUA7JRF8d?=
 =?us-ascii?q?QCKmL3H3nUFRkPiOsHaSq85p+dDXhJMSR+oDBxQOHfQABxEgRYRaLQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAACDmBBch0O0hNFlGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGDayeDe4gZX41AFIh/jj+BcxQYEwGHLiI0CQ0BAwE?=
 =?us-ascii?q?BAQEBAQIBEwEBAQgNCQgpL4I2JAGCYgECAwECIEkKAwYJAQEKGAICBSECAgMMB?=
 =?us-ascii?q?Q08CgkFgxyBagMVBaVogS+ICQ2CHIELizAXgUA/hCOCV4UuMYImAolnBoE+hRC?=
 =?us-ascii?q?PehguCQ2CGYt9gyUjCoFSiAw2hySPJIoQgUaCDnAVgyeCJxeOKjIBATEBAYEDA?=
 =?us-ascii?q?QEcizQBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ABAACDmBBch0O0hNFlGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGDayeDe4gZX41AFIh/jj+BcxQYEwGHLiI0CQ0BAwEBAQEBAQIBEwEBA?=
 =?us-ascii?q?QgNCQgpL4I2JAGCYgECAwECIEkKAwYJAQEKGAICBSECAgMMBQ08CgkFgxyBagM?=
 =?us-ascii?q?VBaVogS+ICQ2CHIELizAXgUA/hCOCV4UuMYImAolnBoE+hRCPehguCQ2CGYt9g?=
 =?us-ascii?q?yUjCoFSiAw2hySPJIoQgUaCDnAVgyeCJxeOKjIBATEBAYEDAQEcizQBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,343,1539673200"; 
   d="scan'208";a="56537823"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 11 Dec 2018 21:15:52 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726403AbeLLFPt (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 12 Dec 2018 00:15:49 -0500
Received: from mx1.redhat.com ([209.132.183.28]:43858 "EHLO mx1.redhat.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726218AbeLLFPt (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 12 Dec 2018 00:15:49 -0500
Received: from smtp.corp.redhat.com (int-mx02.intmail.prod.int.phx2.redhat.com [10.5.11.12])
        (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
        (No client certificate requested)
        by mx1.redhat.com (Postfix) with ESMTPS id 522CF307D857;
        Wed, 12 Dec 2018 05:15:48 +0000 (UTC)
Received: from xz-x1 (dhcp-14-128.nay.redhat.com [10.66.14.128])
        by smtp.corp.redhat.com (Postfix) with ESMTPS id 14F305FCA0;
        Wed, 12 Dec 2018 05:15:42 +0000 (UTC)
Date: Wed, 12 Dec 2018 13:15:40 +0800
From: Peter Xu <peterx@redhat.com>
To: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
Cc: linux-kernel@vger.kernel.org,
        Andrea Arcangeli <aarcange@redhat.com>,
        Andrew Morton <akpm@linux-foundation.org>,
        "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>,
        Matthew Wilcox <willy@infradead.org>,
        Michal Hocko <mhocko@suse.com>,
        Dave Jiang <dave.jiang@intel.com>,
        "Aneesh Kumar K.V" <aneesh.kumar@linux.vnet.ibm.com>,
        Souptick Joarder <jrdr.linux@gmail.com>, linux-mm@kvack.org
Subject: Re: [PATCH v2] mm: thp: fix flags for pmd migration when split
Message-ID: <20181212051540.GA8970@xz-x1>
References: <20181211051254.16633-1-peterx@redhat.com>
 <1fc103f7-3164-007d-bcfd-7ad7c60bb6ec@yandex-team.ru>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
In-Reply-To: <1fc103f7-3164-007d-bcfd-7ad7c60bb6ec@yandex-team.ru>
User-Agent: Mutt/1.10.1 (2018-07-13)
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.12
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16 (mx1.redhat.com [10.5.110.48]); Wed, 12 Dec 2018 05:15:48 +0000 (UTC)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Tue, Dec 11, 2018 at 11:21:44AM +0300, Konstantin Khlebnikov wrote:
> On 11.12.2018 8:12, Peter Xu wrote:
> > When splitting a huge migrating PMD, we'll transfer all the existing
> > PMD bits and apply them again onto the small PTEs.  However we are
> > fetching the bits unconditionally via pmd_soft_dirty(), pmd_write()
> > or pmd_yound() while actually they don't make sense at all when it's
> > a migration entry.  Fix them up by make it conditional.
> > 
> > Note that if my understanding is correct about the problem then if
> > without the patch there is chance to lose some of the dirty bits in
> > the migrating pmd pages (on x86_64 we're fetching bit 11 which is part
> > of swap offset instead of bit 2) and it could potentially corrupt the
> > memory of an userspace program which depends on the dirty bit.
> > 
> > CC: Andrea Arcangeli <aarcange@redhat.com>
> > CC: Andrew Morton <akpm@linux-foundation.org>
> > CC: "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>
> > CC: Matthew Wilcox <willy@infradead.org>
> > CC: Michal Hocko <mhocko@suse.com>
> > CC: Dave Jiang <dave.jiang@intel.com>
> > CC: "Aneesh Kumar K.V" <aneesh.kumar@linux.vnet.ibm.com>
> > CC: Souptick Joarder <jrdr.linux@gmail.com>
> > CC: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
> > CC: linux-mm@kvack.org
> > CC: linux-kernel@vger.kernel.org
> > Signed-off-by: Peter Xu <peterx@redhat.com>
> > ---
> > v2:
> > - fix it up for young/write/dirty bits too [Konstantin]
> > ---
> >   mm/huge_memory.c | 15 ++++++++++-----
> >   1 file changed, 10 insertions(+), 5 deletions(-)
> > 
> > diff --git a/mm/huge_memory.c b/mm/huge_memory.c
> > index f2d19e4fe854..b00941b3d342 100644
> > --- a/mm/huge_memory.c
> > +++ b/mm/huge_memory.c
> > @@ -2157,11 +2157,16 @@ static void __split_huge_pmd_locked(struct vm_area_struct *vma, pmd_t *pmd,
> >   		page = pmd_page(old_pmd);
> >   	VM_BUG_ON_PAGE(!page_count(page), page);
> >   	page_ref_add(page, HPAGE_PMD_NR - 1);
> > -	if (pmd_dirty(old_pmd))
> > -		SetPageDirty(page);
> > -	write = pmd_write(old_pmd);
> > -	young = pmd_young(old_pmd);
> > -	soft_dirty = pmd_soft_dirty(old_pmd);
> > +	if (unlikely(pmd_migration)) {
> > +		soft_dirty = pmd_swp_soft_dirty(old_pmd);
> > +		young = write = false;
> > +	} else {
> > +		if (pmd_dirty(old_pmd))
> > +			SetPageDirty(page);
> > +		write = pmd_write(old_pmd);
> > +		young = pmd_young(old_pmd);
> > +		soft_dirty = pmd_soft_dirty(old_pmd);
> > +	}
> 
> Write/read-only is encoded into migration entry.
> I suppose there should be something like this:
> 
> --- a/mm/huge_memory.c
> +++ b/mm/huge_memory.c
> @@ -2151,16 +2151,21 @@ static void __split_huge_pmd_locked(struct vm_area_struct *vma, pmd_t *pmd,
> 
>                 entry = pmd_to_swp_entry(old_pmd);
>                 page = pfn_to_page(swp_offset(entry));
> +               write = is_write_migration_entry(entry);
> +               young = false;
> +               soft_dirty = pmd_swp_soft_dirty(old_pmd);
>         } else
>  #endif
> +       {
>                 page = pmd_page(old_pmd);
> +               if (pmd_dirty(old_pmd))
> +                       SetPageDirty(page);
> +               write = pmd_write(old_pmd);
> +               young = pmd_young(old_pmd);
> +               soft_dirty = pmd_soft_dirty(old_pmd);
> +       }
>         VM_BUG_ON_PAGE(!page_count(page), page);
>         page_ref_add(page, HPAGE_PMD_NR - 1);
> -       if (pmd_dirty(old_pmd))
> -               SetPageDirty(page);
> -       write = pmd_write(old_pmd);
> -       young = pmd_young(old_pmd);
> -       soft_dirty = pmd_soft_dirty(old_pmd);
> 
>         /*
>          * Withdraw the table only after we mark the pmd entry invalid.
> 

Oops yes, I missed the write bit.  Thanks for pointing it out.

Should I repost with your authorship and your sign-off?  Or even I'll
consider to directly drop the CONFIG_ARCH_ENABLE_THP_MIGRATION if with
that since I don't see much gain to keep it:

diff --git a/mm/huge_memory.c b/mm/huge_memory.c
index f2d19e4fe854..aebade83cec9 100644
--- a/mm/huge_memory.c
+++ b/mm/huge_memory.c
@@ -2145,23 +2145,25 @@ static void __split_huge_pmd_locked(struct vm_area_struct *vma, pmd_t *pmd,                                                                                          
         */
        old_pmd = pmdp_invalidate(vma, haddr, pmd);

-#ifdef CONFIG_ARCH_ENABLE_THP_MIGRATION
        pmd_migration = is_pmd_migration_entry(old_pmd);
-       if (pmd_migration) {
+       if (unlikely(pmd_migration)) {
                swp_entry_t entry;

                entry = pmd_to_swp_entry(old_pmd);
                page = pfn_to_page(swp_offset(entry));
-       } else
-#endif
+               write = is_write_migration_entry(entry);
+               young = false;
+               soft_dirty = pmd_swp_soft_dirty(old_pmd);
+       } else {
                page = pmd_page(old_pmd);
+               if (pmd_dirty(old_pmd))
+                       SetPageDirty(page);
+               write = pmd_write(old_pmd);
+               young = pmd_young(old_pmd);
+               soft_dirty = pmd_soft_dirty(old_pmd);
+       }
        VM_BUG_ON_PAGE(!page_count(page), page);
        page_ref_add(page, HPAGE_PMD_NR - 1);
-       if (pmd_dirty(old_pmd))
-               SetPageDirty(page);
-       write = pmd_write(old_pmd);
-       young = pmd_young(old_pmd);
-       soft_dirty = pmd_soft_dirty(old_pmd);

        /*
         * Withdraw the table only after we mark the pmd entry invalid.

Thanks,

-- 
Peter Xu
