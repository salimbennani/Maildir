Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:53:32 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 04B0E5804F9;
	Thu,  6 Dec 2018 13:22:21 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga006-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 13:22:20 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AZBFNph1JkTiPQj1ssmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segVI/7xwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QLYpUjqg8qhrUgflhy?=
 =?us-ascii?q?gJNzE78G/ZhM9+gr9Frh29vBx/24zZbZqJNPZiZK7RYc8WSXZDU8tXSidPApm8?=
 =?us-ascii?q?b4wKD+cZIOhXsZPyp10TphS+HwasAuzvwSJPi3/tw6I1yeIhHRvI3QM6GdIOv2?=
 =?us-ascii?q?/ZrNbrO6cIV+C60q3IwS/Eb/NM1jfw8Y7FeQ0ir/GURb98b9bdxE01Gw/YgFic?=
 =?us-ascii?q?t5bpMy6W2+gRqWSW7uhtWfqxh2I7rwx9uDuiy8c2hoXUmI4YyUrI+Cp3zYszON?=
 =?us-ascii?q?a2UlR0YcS+H5tVryyaN5V5QsclQ2xwpiY6xaMJuYShcCgJ1psn3RjfZOKDc4SS?=
 =?us-ascii?q?5RLjTumRLS95hHJjZr2/mw6//Va8xuD4TMW4zVhHojRfntXRtX0Bywbf58mFR/?=
 =?us-ascii?q?dl+0euwzeP1wTd6uFeJkA0kLLWK5ogwr42i5oSvl3PHizol0Xsiq+ZaEEk9vGv?=
 =?us-ascii?q?6+XpZLXpuIWcOpRqigHxLKsugNazAecmPQgUWWiU5+C82Kfk/U3jT7VGluc2nb?=
 =?us-ascii?q?XBsJDGOcQboba0AwtU0oYg9RmzFTin0MkDkHkDLVJFfg+HjofzN1HPJvD4Eemw?=
 =?us-ascii?q?g1C2nDh3wPDGO6XrAo/RIXjbjLfhYbF95lZcyAUpzNBf+4hbCrYbLPLzR0/+rt?=
 =?us-ascii?q?rYDhAiPgywwubnDsh914wEVWKOBK+ZLL3dsVuS6u0zJOmMYZcfuCzhJPg9+/7u?=
 =?us-ascii?q?kXg5lEcffamuw5QbcnO4HvNgI0WfZnrhmdMBEWYMvgojQ+3mklyCUThPZ3msW6?=
 =?us-ascii?q?Iw/C00CIWjDY3bXICinKSB3DunHp1Rfm1JEEuMEXfvd4WHQfsMcjidIs16nzwA?=
 =?us-ascii?q?VLihTZIh1B60uA/7zbpnMvTb+ikCuZ3/09h14vXZlQsu+jxsE8Sdz2aNQnl3nm?=
 =?us-ascii?q?wSQT86xqR/oU1nxVeF3qh1mPhYFd1V5/NUXQY2L5/cz+pmC9/sXgLNZMuGSFGj?=
 =?us-ascii?q?Qt++GzE+Usoxw8MSY0Z6A9itkwrM3zS0DLMPl7yEHpo08rnC0Hj3IMp9z3XG1K?=
 =?us-ascii?q?wlj1Q9RstPNGumhrNw9gTJBo7JlVmZmLiudagGwCHN82KDx3KUvE5ESA5wTbnF?=
 =?us-ascii?q?XXcHa0TLt9v5+F3NQ6WuCbs9NAtB0tCNKq1RZ93tjFVGQurjOdvEb2KwnWewGQ?=
 =?us-ascii?q?iHxreWYIX2fGUd2T3XCFIYnAAL4XaGKQ8+Cz+9o2LfCTxuEk7vY0Ps8OVktHO3?=
 =?us-ascii?q?VEg0zxuOb01g0bq19QUYhfidS/MVw7IFtz0tqzRyHFahwd3WD8CMqBZmfKVZed?=
 =?us-ascii?q?k9+ktI1XrFtwxhOZytN7pthloAfAV4oUzv1w97BZ5dkcc3tnwqyglyKaWG0F5a?=
 =?us-ascii?q?czOY3JbwOqDYK2Xo/RCvbbLW1U/a0NqM5qgP7/E4oU35vA61Dkoi72ln095N3n?=
 =?us-ascii?q?qc+5XGFhYdXYjwU0Y37Rd6ob7abzI554PV031sLKa1viXD29IvGOsq1BKgc81D?=
 =?us-ascii?q?P6ODEQ/4C9caCNS2KOw2h1ipaQoJPPpT9KEoJcymbeaJ2KmxMOZmgj2ml2VH7J?=
 =?us-ascii?q?lh3U2W8ypzV/DH34wCw/GexQaHUzb8jFG8ssH4g4xEZDcSHnahxijgHoJeeqpy?=
 =?us-ascii?q?fYMTA2e0P8K33sl+h4LqW3NA9F+jBkkK2c+zdRqJclz92xZd1UAWoXyhhCu5wC?=
 =?us-ascii?q?Z4kzAvrqqDwiPOx/7uewYAOm5OXGNil0vjIZCoj9AGW0ildwopmwG/5Ub5xKhb?=
 =?us-ascii?q?o75zL3LJTkdLfCj2LmdiXbW2treZZ85P6ZUosThYUeimYFCaTKL9rAUe0y/5A2?=
 =?us-ascii?q?RewzU7fSmwuprlhxx6lH6dLHFroXvZY85wwg3T5N7dRf5XxTcGQCh4iT/KBlmz?=
 =?us-ascii?q?JdWp/NOUl4vdveC6TW6uSppTcSzzx4OaqCS7/XFqAQG4n/2rmd3oCwk63TX719?=
 =?us-ascii?q?l3TyrIqhn8b5Lv16S7N+JnY0ZpCEX968p8BoFxjI8wiIsM1ngdg5Wf5WAHnnvr?=
 =?us-ascii?q?MdVHxaL+a2IARTsKw97W+gfpwkNiIWySx4LlSHqd2NBuaMegYmMZwS8968FKCK?=
 =?us-ascii?q?GJ7L1Lhyd1o1y4rR7Pbvh5hDsS1fwu6HsCieETpAUt1jmdAqwVHURAISzskBGI?=
 =?us-ascii?q?48q/rapNYmavbKOw1FF/nd26CLGCowdcWGv2e5s4HC9w6Nl/P0zI0HHp9o7kf9?=
 =?us-ascii?q?zQZ8oJthKIixfAk/RVKJUpm/URnyVnPmb9vWA/x+4/kBxjxpW6vImBK2Vw86O1?=
 =?us-ascii?q?GB9YNjvpZ8wN/jHhl7pRnsGT34q3BJVuBi0LXIf0TfKvCD8St+7oNwOQHz0nsH?=
 =?us-ascii?q?ubBaDTHQyC6EdlsnLPFYqkN2qMKXkdzNViQgSdJUNFjAAVWjU6goA2FgSwyMP9?=
 =?us-ascii?q?d0d54ygb5kTkpRtU1uJoKx7/X3/fpQevdzc0UYWfIwBQ7g1Y/EfVNsqe7u1oEi?=
 =?us-ascii?q?Fc/52hqhGNK2OBawRJC2EJRlKLB1T5Mray4tnA9vCSBvCiIPvWfbWOteteWu+I?=
 =?us-ascii?q?xZ2x04tm/DWMNsSVMnlhFf073UVDUm5jG8TEgDUCUCgXlyPLb86Gqxaw4Cx3rs?=
 =?us-ascii?q?aj8Pv1XALj/5eAC7xXMd934RC5nb+DN/KMhCZ+MTtXzI4MymTSyLcB3F8ekSVu?=
 =?us-ascii?q?dzi2HLQEtC7NSr/Qm6BNAx4abSNzKNVH76Ym0gZRPs7bj8v/1qRkgf4tF1dFSV?=
 =?us-ascii?q?vhl9m1ZcwLJmGxLk/ICFyXO7SGOzLLxdr6Yae9Sb1WkeVVuAe8uTedE0//IDuD?=
 =?us-ascii?q?kyPlWAyoMeFJlCubJgBRuJmhchZxDmjuVNLnZQe9MN9yjD02x6U7h3LKNWEGNz?=
 =?us-ascii?q?h8fFhArrmR7SNen/V+FHZN7ntjLemYhSmZ6/PUJYoRsftuUWxIkLde53I1jbBV?=
 =?us-ascii?q?4SdLbPl4lCrbstNt5Vqhl7qh0D1iBSFDozADu4uNsg02IqjQ8N9fUHDL1BEA92?=
 =?us-ascii?q?OdD1INvdQzWY6ngLxZ1tWazPG7EzxF6d+BpcY=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A5AAB1kglch0O0hNFjHQEBBQEHBQGBU?=
 =?us-ascii?q?wYBCwGDayeDepQogg0UlzoUgV8UGBMBh1ciNgcNAQMBAQEBAQECARMBAQEIDQk?=
 =?us-ascii?q?IKSMMgjYigmQBAQEBAgEBAiAEGQEBNwEEAQkBAQoLDQICJgICAx8SAQUBHBkFg?=
 =?us-ascii?q?xyBeggFmnU8ih1wfDOCdgEBBYclCIELiXiBHIFXP4ERgxKERiODHIJXkDWQLAc?=
 =?us-ascii?q?CgiAEjyIYgVyIPIceLIlmjmsPIYErAYIGMxowQzEGgjWCGwwXiF6FYB8ygQUBA?=
 =?us-ascii?q?Yo6AQE?=
X-IPAS-Result: =?us-ascii?q?A0A5AAB1kglch0O0hNFjHQEBBQEHBQGBUwYBCwGDayeDepQ?=
 =?us-ascii?q?ogg0UlzoUgV8UGBMBh1ciNgcNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYigmQBA?=
 =?us-ascii?q?QEBAgEBAiAEGQEBNwEEAQkBAQoLDQICJgICAx8SAQUBHBkFgxyBeggFmnU8ih1?=
 =?us-ascii?q?wfDOCdgEBBYclCIELiXiBHIFXP4ERgxKERiODHIJXkDWQLAcCgiAEjyIYgVyIP?=
 =?us-ascii?q?IceLIlmjmsPIYErAYIGMxowQzEGgjWCGwwXiF6FYB8ygQUBAYo6AQE?=
X-IronPort-AV: E=Sophos;i="5.56,323,1539673200"; 
   d="scan'208";a="54885436"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 06 Dec 2018 13:22:18 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726058AbeLFVWR (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 6 Dec 2018 16:22:17 -0500
Received: from mail.kernel.org ([198.145.29.99]:41516 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1725916AbeLFVWQ (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 6 Dec 2018 16:22:16 -0500
Received: from mail-wm1-f43.google.com (mail-wm1-f43.google.com [209.85.128.43])
        (using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 1242E20989;
        Thu,  6 Dec 2018 21:22:14 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1544131334;
        bh=cZ6tmMowWci0xd5MI0B7S0zbMLSctTiSpwTaxd56MIY=;
        h=References:In-Reply-To:From:Date:Subject:To:Cc:From;
        b=hnGmv73ym9UfYGzNpNXSp0r+1tNkKv14olV6qIbPQ/QzjR6USdU7ebdaF4nLDwYnI
         ZDGQKK3OUYpc1lO8oFwx0nQSG6sAxdeFB8/ZcHXcisHbiJ4e7LkTND2rH+jAhuI+Ba
         nlrHGVlF+5ZJZis+jfcM93T92EA6m5lEdwpTh4yY=
Received: by mail-wm1-f43.google.com with SMTP id q26so2498019wmf.5;
        Thu, 06 Dec 2018 13:22:14 -0800 (PST)
X-Gm-Message-State: AA+aEWb2U4brznfZbrPTz/kKGDP5PG15a8reBkZQogg9bcpa5bunsf8E
        bAx2wbn6les6qDxmj7lfAOvQb/IxunMLTXSnNPs=
X-Google-Smtp-Source: AFSGD/WP6Kzo60zzqx9RuG8XhXZcgEWgfrN5aWBWsygE0wiFJ0WE2AckmvlCijH5iBzp0beqGctYRtOXojmbKFNRx1c=
X-Received: by 2002:a1c:e18a:: with SMTP id y132mr10063wmg.48.1544131332512;
 Thu, 06 Dec 2018 13:22:12 -0800 (PST)
MIME-Version: 1.0
References: <1543999380-7946-1-git-send-email-long.cheng@mediatek.com>
 <1543999380-7946-3-git-send-email-long.cheng@mediatek.com>
 <CAGp9LzqkOHPqVmAOR+YRotOb511BEDOpUWHc-YSjphF3Gpar=w@mail.gmail.com> <1544090140.28871.11.camel@mhfsdcap03>
In-Reply-To: <1544090140.28871.11.camel@mhfsdcap03>
From: Sean Wang <sean.wang@kernel.org>
Date: Thu, 6 Dec 2018 13:22:01 -0800
X-Gmail-Original-Message-ID: <CAGp9LzpVuhWHBgL3qoXQKqoGAhCWY8FS7b_xVi2V=JeDAOz+8g@mail.gmail.com>
Message-ID: <CAGp9LzpVuhWHBgL3qoXQKqoGAhCWY8FS7b_xVi2V=JeDAOz+8g@mail.gmail.com>
Subject: Re: [PATCH v2 2/4] dmaengine: mtk_uart_dma: add Mediatek uart DMA support
To: long.cheng@mediatek.com
Cc: vkoul@kernel.org, robh+dt@kernel.org, mark.rutland@arm.com,
        devicetree@vger.kernel.org, srv_heupstream@mediatek.com,
        gregkh@linuxfoundation.org, linux-kernel@vger.kernel.org,
        dmaengine@vger.kernel.org, linux-mediatek@lists.infradead.org,
        linux-serial@vger.kernel.org, jslaby@suse.com,
        Matthias Brugger <matthias.bgg@gmail.com>,
        yingjoe.chen@mediatek.com, dan.j.williams@intel.com,
        linux-arm-kernel@lists.infradead.org, yt.shen@mediatek.com
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Thu, Dec 6, 2018 at 1:55 AM Long Cheng <long.cheng@mediatek.com> wrote:
>
> On Wed, 2018-12-05 at 13:07 -0800, Sean Wang wrote:
> > .
> > On Wed, Dec 5, 2018 at 1:31 AM Long Cheng <long.cheng@mediatek.com> wrote:
> > >
> > > In DMA engine framework, add 8250 mtk dma to support it.
> > >
> > > Signed-off-by: Long Cheng <long.cheng@mediatek.com>
> > > ---
> > >  drivers/dma/mediatek/8250_mtk_dma.c |  894 +++++++++++++++++++++++++++++++++++
> > >  drivers/dma/mediatek/Kconfig        |   11 +
> > >  drivers/dma/mediatek/Makefile       |    1 +
> > >  3 files changed, 906 insertions(+)
> > >  create mode 100644 drivers/dma/mediatek/8250_mtk_dma.c
> > >
> > > diff --git a/drivers/dma/mediatek/8250_mtk_dma.c b/drivers/dma/mediatek/8250_mtk_dma.c
> > > new file mode 100644
> > > index 0000000..3454679
> > > --- /dev/null
> > > +++ b/drivers/dma/mediatek/8250_mtk_dma.c
> > > @@ -0,0 +1,894 @@
> > > +// SPDX-License-Identifier: GPL-2.0
> > > +/*
> > > + * Mediatek 8250 DMA driver.
> > > + *
> > > + * Copyright (c) 2018 MediaTek Inc.
> > > + * Author: Long Cheng <long.cheng@mediatek.com>
> > > + */
> > > +
> > > +#include <linux/clk.h>
> > > +#include <linux/dmaengine.h>
> > > +#include <linux/dma-mapping.h>
> > > +#include <linux/err.h>
> > > +#include <linux/init.h>
> > > +#include <linux/interrupt.h>
> > > +#include <linux/list.h>
> > > +#include <linux/module.h>
> > > +#include <linux/of_dma.h>
> > > +#include <linux/of_device.h>
> > > +#include <linux/platform_device.h>
> > > +#include <linux/slab.h>
> > > +#include <linux/spinlock.h>
> > > +#include <linux/pm_runtime.h>
> > > +#include <linux/iopoll.h>
> > > +
> > > +#include "../virt-dma.h"
> > > +
> > > +#define MTK_APDMA_DEFAULT_REQUESTS     127
> > > +#define MTK_APDMA_CHANNELS             (CONFIG_SERIAL_8250_NR_UARTS * 2)
> > > +
> > > +#define VFF_EN_B               BIT(0)
> > > +#define VFF_STOP_B             BIT(0)
> > > +#define VFF_FLUSH_B            BIT(0)
> > > +#define VFF_4G_SUPPORT_B       BIT(0)
> > > +#define VFF_RX_INT_EN0_B       BIT(0)  /*rx valid size >=  vff thre*/
> > > +#define VFF_RX_INT_EN1_B       BIT(1)
> > > +#define VFF_TX_INT_EN_B                BIT(0)  /*tx left size >= vff thre*/
> > > +#define VFF_WARM_RST_B         BIT(0)
> > > +#define VFF_RX_INT_FLAG_CLR_B  (BIT(0) | BIT(1))
> > > +#define VFF_TX_INT_FLAG_CLR_B  0
> > > +#define VFF_STOP_CLR_B         0
> > > +#define VFF_FLUSH_CLR_B                0
> > > +#define VFF_INT_EN_CLR_B       0
> > > +#define VFF_4G_SUPPORT_CLR_B   0
> > > +
> > > +/* interrupt trigger level for tx */
> > > +#define VFF_TX_THRE(n)         ((n) * 7 / 8)
> > > +/* interrupt trigger level for rx */
> > > +#define VFF_RX_THRE(n)         ((n) * 3 / 4)
> > > +
> > > +#define MTK_DMA_RING_SIZE      0xffffU
> > > +/* invert this bit when wrap ring head again*/
> > > +#define MTK_DMA_RING_WRAP      0x10000U
> > > +
> > > +#define VFF_INT_FLAG           0x00
> > > +#define VFF_INT_EN             0x04
> > > +#define VFF_EN                 0x08
> > > +#define VFF_RST                        0x0c
> > > +#define VFF_STOP               0x10
> > > +#define VFF_FLUSH              0x14
> > > +#define VFF_ADDR               0x1c
> > > +#define VFF_LEN                        0x24
> > > +#define VFF_THRE               0x28
> > > +#define VFF_WPT                        0x2c
> > > +#define VFF_RPT                        0x30
> > > +/*TX: the buffer size HW can read. RX: the buffer size SW can read.*/
> > > +#define VFF_VALID_SIZE         0x3c
> > > +/*TX: the buffer size SW can write. RX: the buffer size HW can write.*/
> > > +#define VFF_LEFT_SIZE          0x40
> > > +#define VFF_DEBUG_STATUS       0x50
> > > +#define VFF_4G_SUPPORT         0x54
> > > +
> > > +struct mtk_dmadev {
> > > +       struct dma_device ddev;
> > > +       void __iomem *mem_base[MTK_APDMA_CHANNELS];
> > > +       spinlock_t lock; /* dma dev lock */
> > > +       struct tasklet_struct task;
> > > +       struct list_head pending;
> > > +       struct clk *clk;
> > > +       unsigned int dma_requests;
> > > +       bool support_33bits;
> > > +       unsigned int dma_irq[MTK_APDMA_CHANNELS];
> > > +       struct mtk_chan *ch[MTK_APDMA_CHANNELS];
> > > +};
> > > +
> > > +struct mtk_chan {
> > > +       struct virt_dma_chan vc;
> > > +       struct list_head node;
> > > +       struct dma_slave_config cfg;
> > > +       void __iomem *base;
> > > +       struct mtk_dma_desc *desc;
> > > +
> > > +       bool stop;
> > > +       bool requested;
> > > +
> > > +       unsigned int dma_sig;
> >
> > the member can be removed as no real user would refer to it
> >
>
> Ok, i will remove it at next patch
>
> > > +       unsigned int dma_ch;
> >
> > a chan_id is already included in struct dma_chan, we can reuse it
> >
>
> chan_id is start from 0. but in this driver, dma info is stored to list.
> if use port1, in filter_fn function, will set dma_ch to 2, 3(tx, rx). So
> can't using chan_id
>

if you use of_dma_xlate_by_chan_id in of_dma_controller_register, the
client device still can get the right channel with the appropriate
chan_id expressed in dmas property in dts.

> > > +       unsigned int sgidx;
> >

[ ... ]

> ok, i will modify it
> > > +               wpt = mtk_dma_chan_read(c, VFF_WPT);
> > > +               wrap = wpt & MTK_DMA_RING_WRAP ? 0U : MTK_DMA_RING_WRAP;
> > > +
> > > +               if ((wpt & (len - 1U)) + send < len)
> > > +                       mtk_dma_chan_write(c, VFF_WPT, wpt + send);
> > > +               else
> > > +                       mtk_dma_chan_write(c, VFF_WPT,
> > > +                                          ((wpt + send) & (len - 1U))
> > > +                                          | wrap);
> > > +
> > > +               c->remain_size -= send;
> >
> > I'm curious why you don't need to set up the hardware from the
> > descriptor information
> >
>
> mtk_dma_chan_write is update the hardware. remain_size is length of TX
> data.

I thought it is not enough to be a full dmaengine. if the driver only
supports single continuous data moving for device_prep_slave_sg
callback.

We could try to turn each sg item information such as source or
destination address and data length to be one part of the descriptor.
When a descriptor is being issued, and then program VFF_ADDR/LEN and
issue the data move by other VFF_* registers rather than assuming the
data portion is always the fixed as the user assignment at
mtk_dma_slave_config.
