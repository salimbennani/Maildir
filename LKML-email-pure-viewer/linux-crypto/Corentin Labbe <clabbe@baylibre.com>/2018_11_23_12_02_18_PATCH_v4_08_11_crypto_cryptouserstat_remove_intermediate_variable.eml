Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 23 Nov 2018 23:34:47 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 0970158037D;
	Fri, 23 Nov 2018 04:03:08 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by orsmga001-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 23 Nov 2018 04:03:07 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AIf1g2RIVsBRDt9fL6tmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgULvv6rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0yRD+s7bpkSAXwhS?=
 =?us-ascii?q?kHKTA37W/ZhM93gq1ZrhKhvAR/zozPbY2JKPZzZL/RcMkGSWZdWMtaSixPApm7?=
 =?us-ascii?q?b4sKF+cMI+FYr5PjqFsIsRu+BA+sD/7pxDBSnXD5xrM12PkmHA7a2AwvBckBv2?=
 =?us-ascii?q?/Ko9juL6gdS+C0zK3JzTrYdfNZxy3x55TPchAkuPyBW697f8nJyUQ3CQ/JklGd?=
 =?us-ascii?q?pZb4Mz6byOgBqXWX4ul8We61imMqqRl9rziyyss2l4XEhpgZxk3F+Cll2oo5ON?=
 =?us-ascii?q?y1RUp9bNW5CpVfrTuaOJFzQs46Q2FnpiI6yroetJ6lcygF1o4nywTca/OZaYiI?=
 =?us-ascii?q?5AzsVOKLLTd/nnJld6qzhxe08Ue+1u3xTte43EpOoyZfj9XBuG4B2wbO5sWEVv?=
 =?us-ascii?q?dx5Eas1DSX2wDW8O5EIEQ0laTBK54mx749jp4TsUXFHi/rl0T6layWeVs++uiu?=
 =?us-ascii?q?9evnZqzqppiSNo9ylA7+KL8jmtKwAesmKAgCRWub9vqm1L3l40L5RK9Gjvoskq?=
 =?us-ascii?q?nWqJzaP9gUpralAw9J1YYu8xK/Dzal0NsGh3UGI09FdQmDj4joPVHOPf/5Ae2+?=
 =?us-ascii?q?g1SqjDdk2fTGMqf9DZXKK3jJiK3hcqpl605A1AozyshS55JOBbEAPPL8QEjxuM?=
 =?us-ascii?q?bYDh8kKQO0xennBc551oMfX2KPH6CYPLnTsV+O+uIgPe2MaJUJtzb6Lvgv/+Tu?=
 =?us-ascii?q?gmMhmV8BYamp2oMaaHK/Hvt4OUmZYn3sgtEHEWcNpQc+SO3qiFufUT9cfXqyXq?=
 =?us-ascii?q?Q85i0lB4KiF4vMWoetgLmZ1iehApJWfnxGCkyLEXrwbYqEQPcMaCWRIsN7iDwL?=
 =?us-ascii?q?T7qhRpQl1RGvsg/61rVmIvDV+i0eqZLsytx16/fPmhE18Dx+F96d3H2VT2Fogm?=
 =?us-ascii?q?MIQCc73KNlrkx70FuD1al4jOZeFdxc/P5JVgY6NZjBz+11EdzyWwTBfsuXR1ai?=
 =?us-ascii?q?WNmpHTYxTtcpyd8Uf0l9A8mijgzE3yeyHrAajaKLC4Iu/qLcxXfxId19xGjA1K?=
 =?us-ascii?q?Umi1kmQc5PNWm9i6579gjTAZPJkkqDm6arc6QcwDDC9GOZwWWSu0FYVRZ6Ub/Z?=
 =?us-ascii?q?UnAHekvWsdP561vfQLC0F7QoLBFNyc6YJatMcd3mk1NGSeznONTfZWKxhmixCQ?=
 =?us-ascii?q?yJxrOKcIrlZWEd0D/BB0gDlgAZ5WyGOhQmBie9v2LeCyRjFU7uY0Pp9ul+tHO7?=
 =?us-ascii?q?T08uwwGWdUFh0KC1+hoUhfyaRPMexbYEuCYnqzVpE1exxdPWC9ycpwV/eKVQe8?=
 =?us-ascii?q?8y4FBC1WjBrQxyIoSgL7x+hl4Zawl4pUfu2At4C4pekckmtmglzBdvJq2C1lNB?=
 =?us-ascii?q?dDSY3Y7rN73TK2ny+g2vaqHM1lHf1taW5rkA6PAip1r/uwGpE1Io82973NlNz3?=
 =?us-ascii?q?uc+pLKARISUJLsSEo46wJ2prDaYiYn4YPU2mZhMa21sj/ExtIoC/Epyhemf9dD?=
 =?us-ascii?q?LqyEEBX+HNEdB8irMOYqgUSmbgoYPOBO8645J9mmd/qa16GxJuZvgTWmgX5B4I?=
 =?us-ascii?q?9jyEKM9jNwRfLS0JYB3v6XwBGHVzD6jFq6tsD3mIZEZSwdH2alyCjkApJRabN2?=
 =?us-ascii?q?fYoRFWiuJMi3zM1kh5HxQ35Y6EKjB1Qe1c6peBqedVz80RdL1UQKp3yqgi+4zz?=
 =?us-ascii?q?1ykzE0oauTxi3Ow+L+dBUZPm5HXnVtjVDpIYKsldAVQFCobxQ1lBui/Uv6xbJU?=
 =?us-ascii?q?pL58L2nQRkdEZTP2IHthUquzt7qCZdBA6JUzvCVTUeS8Z02aS7Hnrxsb1SPjA3?=
 =?us-ascii?q?VRxDQhez62vZX5mgRwiHiBI3ZrsHrZZcZwyA/f5dPGQv5dxDgGRCh+iTTMAli8?=
 =?us-ascii?q?Pt+p/ciblpvZs+C+UX6hWYNXcSXx0YyAsy6773VwARKjh/CzhsHnEQ8i3C/4zd?=
 =?us-ascii?q?ZqVD/ErBbhYobx0aS6Pvlqfk1pBF/69sp7FZtykoo2hJEMx3cago+Z8mYAkWf2?=
 =?us-ascii?q?Kd9bw77xbGIRRT4XxN7Y+A3l2ExgLn2T3Y74WGuSwtB9Z9akeGMZwTwy79pFCK?=
 =?us-ascii?q?qP6LxEnC11oke3rA7LYPh9mCsdxuUq6HIAn+4Jvw8txD2HAr8OBUlYITDslxOQ?=
 =?us-ascii?q?4tCiq6VXYXyjcLmq20p4gNChF6qCogBHVXb9e5ciGzJw78plPFLN1n3z9p/reN?=
 =?us-ascii?q?3KYd0PsR2Ulg/Kj/JJJ5IpivoKmS1nNHrmsnI/zO47iQFu0Yu+vIiaMGht+KO5?=
 =?us-ascii?q?AhhFNjz6fc8T+zftjbpAkcaSxYygApJhGjATVpvyUf2oCC4StejgNwuWEj0zsH?=
 =?us-ascii?q?KbFqTEHQOF9EdqtXHPE42oN3GKInkW185iSQKZJExehgAUQTo7koQ4FgCs2Mzu?=
 =?us-ascii?q?bkN56ioN6V7/rxtG0vhoOAXnUmfDuAeobS85SZiYLBpL9wFC+l3aMcqE4uJoGC?=
 =?us-ascii?q?FY+JKhoReJKmyaYQRIEG4IVlaFB1DlIrmh+93A//KECeq5KvvEea+OpvBGV/eU?=
 =?us-ascii?q?2ZKv1ZNr/zaSOcWOPXliDPw71lBAXXBjHMTZlCsASzYKlyLWdMOboBa8+itqrs?=
 =?us-ascii?q?Gw6vjrWQTv5ZeRBLtWK9lg5xe2gaKbPe6KmCl5MSpY1o8LxXLQ0rcfwUUdiztw?=
 =?us-ascii?q?eDitC7gAsS/NQbnUmq9WCR4bdixyONFJ76I6wglCJ8rbhsnp2b5/i/4/E01FWk?=
 =?us-ascii?q?D5msG1ecwKJHmwNE/GBEaOLriJOSfHzN33YayiT71dl+FUtxy2uTaGHE7vJDWD?=
 =?us-ascii?q?lz/1Vx+xNeFAlj2UPBtbuIulaBZiFXDjTM76ah28KNJ2jSc5wbsxhnPLM24TKT?=
 =?us-ascii?q?l9c0NXob2W4iNVmfF/G21H7np4IuiIgSeZ7+/EKpkItftnGDh7l+Vf4Cdy97wA?=
 =?us-ascii?q?4ChaSfldlCLMo9tqpF+61O+C1n4vXRBPpTlGnpmjvkh4P6jdsJ5aVjKM/B8X52?=
 =?us-ascii?q?iKFzwFoN1pDcepsrhZzNGJk7j8bj5ft5rS/cwGAsHSAN6aIHY7MATkAnjfCw5W?=
 =?us-ascii?q?YySsMDT0gFZQlu2T8DWxp5Iwp9C4k54HQLVWfFY8B/cbAF5oWtcFJcEkDXsfjb?=
 =?us-ascii?q?eHgZtQtjKFpx7LSZACsw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AbAAAd7Pdbh0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUgYBAQsBg2snmA6CIZIwhHeBJANPDwEBGBMBiFciNQgNAQMBAQEBAQECARM?=
 =?us-ascii?q?BAQEIDQkIKSMMgjYigmUDAwECJBkBATcBBQkBAVADMQEFARwHEgWDHIICAwKbR?=
 =?us-ascii?q?TyKHYFsM4J2AQEFgQCGEggSh0yCaSaBHBeBQD+OfIklll8Jhj2KdBaJUYc3LJd?=
 =?us-ascii?q?dAgQCCQIFDyGBJwGCCjMaCBsVgyeCG4NtilJAMgGBAwEBATuLZgEB?=
X-IPAS-Result: =?us-ascii?q?A0AbAAAd7Pdbh0O0hNFjHAEBAQQBAQcEAQGBUgYBAQsBg2s?=
 =?us-ascii?q?nmA6CIZIwhHeBJANPDwEBGBMBiFciNQgNAQMBAQEBAQECARMBAQEIDQkIKSMMg?=
 =?us-ascii?q?jYigmUDAwECJBkBATcBBQkBAVADMQEFARwHEgWDHIICAwKbRTyKHYFsM4J2AQE?=
 =?us-ascii?q?FgQCGEggSh0yCaSaBHBeBQD+OfIklll8Jhj2KdBaJUYc3LJddAgQCCQIFDyGBJ?=
 =?us-ascii?q?wGCCjMaCBsVgyeCG4NtilJAMgGBAwEBATuLZgEB?=
X-IronPort-AV: E=Sophos;i="5.56,269,1539673200"; 
   d="scan'208";a="54051843"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 23 Nov 2018 04:02:51 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2504035AbeKWWqp (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 23 Nov 2018 17:46:45 -0500
Received: from mail-wm1-f65.google.com ([209.85.128.65]:35670 "EHLO
        mail-wm1-f65.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S2503997AbeKWWqo (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 23 Nov 2018 17:46:44 -0500
Received: by mail-wm1-f65.google.com with SMTP id c126so11734222wmh.0
        for <linux-kernel@vger.kernel.org>; Fri, 23 Nov 2018 04:02:46 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=baylibre-com.20150623.gappssmtp.com; s=20150623;
        h=from:to:cc:subject:date:message-id:in-reply-to:references;
        bh=dWXP8bfAb0arTsDj10OlXMvdF+qUKCfdBd1p6fv//0k=;
        b=loSDhPsLOmIPoz39gZqMSM2ZGKNFIcFBJACL+CY22halmm/sAwTiXcvBAbi6pH2rkg
         GbBBn0SCNCPDUgk47SRnEbGAAHyrJuz2BnAI6ymicgxZJlBnrC/a+fe0n6GaVIalRQ16
         Pb4/TLetM/isyMU2yUcM7LGiSwGRUETFbTqoByjw6Bg8C3sTaRx7978o39Z6WcMb2Xxp
         QGV7BjzElZEIyy6/mPN04solNzp/NVb3HKWj11SUbuHbMzzR4XdH0uFL+ZQzlHEelSV8
         7VEwel90SMBBL6MpY+7U4+oJn4+6dLjU8ZGaI3nOJhZLuopKqvnSutXZyeAvXJVVZFv9
         32Qw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references;
        bh=dWXP8bfAb0arTsDj10OlXMvdF+qUKCfdBd1p6fv//0k=;
        b=OOTmWkpsl8OxQyGET0Wo2chopnAos64j22jkdqFtUEzNrf2AaJ+Ogs/bIZ1ehWvu+8
         DSYjm9Q/a80/5KZdqTCqq/77S3HQw8Jjz6LUXgaQ84dBk32yoXlEe1E1PKQMTzye7p6O
         UCwKwFcu6dfUF0oPaTwdVmB4+4YhOQr6qSlWXbqAm0iIY4iS3z1ra8QR0t0kfwP/fF6v
         wg347ZSKlsnW72yS/0NSCxPxGGrMSJi4GdTvrENjIdbuKqo5Q1l1We1pfVUvqpry0Uez
         X7MhSdbJx4EzZUztlO0HTmlEQFTAepCeyxo6GmpRS+Rn4zEQl5yIxirWClEtEnXO94D8
         ey9Q==
X-Gm-Message-State: AA+aEWZn2vlWV7bvao0VDc9wmRtuy8KPHS4hn3C+6Kr42mUWdYLytiZp
        2XHInag3l58H1jKRjlBRLYfA6Q==
X-Google-Smtp-Source: AFSGD/V2qg62AzUZK7lxLl/uTW3dXjwKW9yR8+GimyTP0jGD6l6aZIOjUVGTyDBs5FsD+NIZQ8o7vg==
X-Received: by 2002:a1c:7209:: with SMTP id n9mr13022349wmc.5.1542974565191;
        Fri, 23 Nov 2018 04:02:45 -0800 (PST)
Received: from localhost.localdomain ([51.15.160.169])
        by smtp.googlemail.com with ESMTPSA id a18sm25164379wrp.13.2018.11.23.04.02.43
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-SHA bits=128/128);
        Fri, 23 Nov 2018 04:02:43 -0800 (PST)
From: Corentin Labbe <clabbe@baylibre.com>
To: davem@davemloft.net, ebiggers@kernel.org,
        herbert@gondor.apana.org.au, nhorman@tuxdriver.com
Cc: linux-crypto@vger.kernel.org, linux-kernel@vger.kernel.org,
        Corentin Labbe <clabbe@baylibre.com>
Subject: [PATCH v4 08/11] crypto: crypto_user_stat: remove intermediate variable
Date: Fri, 23 Nov 2018 12:02:18 +0000
Message-Id: <1542974541-23024-9-git-send-email-clabbe@baylibre.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1542974541-23024-1-git-send-email-clabbe@baylibre.com>
References: <1542974541-23024-1-git-send-email-clabbe@baylibre.com>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The use of the v64 intermediate variable is useless, and removing it
bring to much readable code.

Signed-off-by: Corentin Labbe <clabbe@baylibre.com>
---
 crypto/crypto_user_stat.c | 132 ++++++++++++--------------------------
 1 file changed, 41 insertions(+), 91 deletions(-)

diff --git a/crypto/crypto_user_stat.c b/crypto/crypto_user_stat.c
index 838123758423..7b668c659122 100644
--- a/crypto/crypto_user_stat.c
+++ b/crypto/crypto_user_stat.c
@@ -34,22 +34,16 @@ struct crypto_dump_info {
 static int crypto_report_aead(struct sk_buff *skb, struct crypto_alg *alg)
 {
 	struct crypto_stat_aead raead;
-	u64 v64;
 
 	memset(&raead, 0, sizeof(raead));
 
 	strscpy(raead.type, "aead", sizeof(raead.type));
 
-	v64 = atomic64_read(&alg->encrypt_cnt);
-	raead.stat_encrypt_cnt = v64;
-	v64 = atomic64_read(&alg->encrypt_tlen);
-	raead.stat_encrypt_tlen = v64;
-	v64 = atomic64_read(&alg->decrypt_cnt);
-	raead.stat_decrypt_cnt = v64;
-	v64 = atomic64_read(&alg->decrypt_tlen);
-	raead.stat_decrypt_tlen = v64;
-	v64 = atomic64_read(&alg->aead_err_cnt);
-	raead.stat_aead_err_cnt = v64;
+	raead.stat_encrypt_cnt = atomic64_read(&alg->encrypt_cnt);
+	raead.stat_encrypt_tlen = atomic64_read(&alg->encrypt_tlen);
+	raead.stat_decrypt_cnt = atomic64_read(&alg->decrypt_cnt);
+	raead.stat_decrypt_tlen = atomic64_read(&alg->decrypt_tlen);
+	raead.stat_aead_err_cnt = atomic64_read(&alg->aead_err_cnt);
 
 	return nla_put(skb, CRYPTOCFGA_STAT_AEAD, sizeof(raead), &raead);
 }
@@ -57,22 +51,16 @@ static int crypto_report_aead(struct sk_buff *skb, struct crypto_alg *alg)
 static int crypto_report_cipher(struct sk_buff *skb, struct crypto_alg *alg)
 {
 	struct crypto_stat_cipher rcipher;
-	u64 v64;
 
 	memset(&rcipher, 0, sizeof(rcipher));
 
 	strscpy(rcipher.type, "cipher", sizeof(rcipher.type));
 
-	v64 = atomic64_read(&alg->encrypt_cnt);
-	rcipher.stat_encrypt_cnt = v64;
-	v64 = atomic64_read(&alg->encrypt_tlen);
-	rcipher.stat_encrypt_tlen = v64;
-	v64 = atomic64_read(&alg->decrypt_cnt);
-	rcipher.stat_decrypt_cnt = v64;
-	v64 = atomic64_read(&alg->decrypt_tlen);
-	rcipher.stat_decrypt_tlen = v64;
-	v64 = atomic64_read(&alg->cipher_err_cnt);
-	rcipher.stat_cipher_err_cnt = v64;
+	rcipher.stat_encrypt_cnt = atomic64_read(&alg->encrypt_cnt);
+	rcipher.stat_encrypt_tlen = atomic64_read(&alg->encrypt_tlen);
+	rcipher.stat_decrypt_cnt =  atomic64_read(&alg->decrypt_cnt);
+	rcipher.stat_decrypt_tlen = atomic64_read(&alg->decrypt_tlen);
+	rcipher.stat_cipher_err_cnt =  atomic64_read(&alg->cipher_err_cnt);
 
 	return nla_put(skb, CRYPTOCFGA_STAT_CIPHER, sizeof(rcipher), &rcipher);
 }
@@ -80,21 +68,15 @@ static int crypto_report_cipher(struct sk_buff *skb, struct crypto_alg *alg)
 static int crypto_report_comp(struct sk_buff *skb, struct crypto_alg *alg)
 {
 	struct crypto_stat_compress rcomp;
-	u64 v64;
 
 	memset(&rcomp, 0, sizeof(rcomp));
 
 	strscpy(rcomp.type, "compression", sizeof(rcomp.type));
-	v64 = atomic64_read(&alg->compress_cnt);
-	rcomp.stat_compress_cnt = v64;
-	v64 = atomic64_read(&alg->compress_tlen);
-	rcomp.stat_compress_tlen = v64;
-	v64 = atomic64_read(&alg->decompress_cnt);
-	rcomp.stat_decompress_cnt = v64;
-	v64 = atomic64_read(&alg->decompress_tlen);
-	rcomp.stat_decompress_tlen = v64;
-	v64 = atomic64_read(&alg->compress_err_cnt);
-	rcomp.stat_compress_err_cnt = v64;
+	rcomp.stat_compress_cnt = atomic64_read(&alg->compress_cnt);
+	rcomp.stat_compress_tlen = atomic64_read(&alg->compress_tlen);
+	rcomp.stat_decompress_cnt = atomic64_read(&alg->decompress_cnt);
+	rcomp.stat_decompress_tlen = atomic64_read(&alg->decompress_tlen);
+	rcomp.stat_compress_err_cnt = atomic64_read(&alg->compress_err_cnt);
 
 	return nla_put(skb, CRYPTOCFGA_STAT_COMPRESS, sizeof(rcomp), &rcomp);
 }
@@ -102,21 +84,15 @@ static int crypto_report_comp(struct sk_buff *skb, struct crypto_alg *alg)
 static int crypto_report_acomp(struct sk_buff *skb, struct crypto_alg *alg)
 {
 	struct crypto_stat_compress racomp;
-	u64 v64;
 
 	memset(&racomp, 0, sizeof(racomp));
 
 	strscpy(racomp.type, "acomp", sizeof(racomp.type));
-	v64 = atomic64_read(&alg->compress_cnt);
-	racomp.stat_compress_cnt = v64;
-	v64 = atomic64_read(&alg->compress_tlen);
-	racomp.stat_compress_tlen = v64;
-	v64 = atomic64_read(&alg->decompress_cnt);
-	racomp.stat_decompress_cnt = v64;
-	v64 = atomic64_read(&alg->decompress_tlen);
-	racomp.stat_decompress_tlen = v64;
-	v64 = atomic64_read(&alg->compress_err_cnt);
-	racomp.stat_compress_err_cnt = v64;
+	racomp.stat_compress_cnt = atomic64_read(&alg->compress_cnt);
+	racomp.stat_compress_tlen = atomic64_read(&alg->compress_tlen);
+	racomp.stat_decompress_cnt =  atomic64_read(&alg->decompress_cnt);
+	racomp.stat_decompress_tlen = atomic64_read(&alg->decompress_tlen);
+	racomp.stat_compress_err_cnt = atomic64_read(&alg->compress_err_cnt);
 
 	return nla_put(skb, CRYPTOCFGA_STAT_ACOMP, sizeof(racomp), &racomp);
 }
@@ -124,25 +100,17 @@ static int crypto_report_acomp(struct sk_buff *skb, struct crypto_alg *alg)
 static int crypto_report_akcipher(struct sk_buff *skb, struct crypto_alg *alg)
 {
 	struct crypto_stat_akcipher rakcipher;
-	u64 v64;
 
 	memset(&rakcipher, 0, sizeof(rakcipher));
 
 	strscpy(rakcipher.type, "akcipher", sizeof(rakcipher.type));
-	v64 = atomic64_read(&alg->encrypt_cnt);
-	rakcipher.stat_encrypt_cnt = v64;
-	v64 = atomic64_read(&alg->encrypt_tlen);
-	rakcipher.stat_encrypt_tlen = v64;
-	v64 = atomic64_read(&alg->decrypt_cnt);
-	rakcipher.stat_decrypt_cnt = v64;
-	v64 = atomic64_read(&alg->decrypt_tlen);
-	rakcipher.stat_decrypt_tlen = v64;
-	v64 = atomic64_read(&alg->sign_cnt);
-	rakcipher.stat_sign_cnt = v64;
-	v64 = atomic64_read(&alg->verify_cnt);
-	rakcipher.stat_verify_cnt = v64;
-	v64 = atomic64_read(&alg->akcipher_err_cnt);
-	rakcipher.stat_akcipher_err_cnt = v64;
+	rakcipher.stat_encrypt_cnt = atomic64_read(&alg->encrypt_cnt);
+	rakcipher.stat_encrypt_tlen = atomic64_read(&alg->encrypt_tlen);
+	rakcipher.stat_decrypt_cnt = atomic64_read(&alg->decrypt_cnt);
+	rakcipher.stat_decrypt_tlen = atomic64_read(&alg->decrypt_tlen);
+	rakcipher.stat_sign_cnt = atomic64_read(&alg->sign_cnt);
+	rakcipher.stat_verify_cnt = atomic64_read(&alg->verify_cnt);
+	rakcipher.stat_akcipher_err_cnt = atomic64_read(&alg->akcipher_err_cnt);
 
 	return nla_put(skb, CRYPTOCFGA_STAT_AKCIPHER,
 		       sizeof(rakcipher), &rakcipher);
@@ -151,20 +119,15 @@ static int crypto_report_akcipher(struct sk_buff *skb, struct crypto_alg *alg)
 static int crypto_report_kpp(struct sk_buff *skb, struct crypto_alg *alg)
 {
 	struct crypto_stat_kpp rkpp;
-	u64 v;
 
 	memset(&rkpp, 0, sizeof(rkpp));
 
 	strscpy(rkpp.type, "kpp", sizeof(rkpp.type));
 
-	v = atomic64_read(&alg->setsecret_cnt);
-	rkpp.stat_setsecret_cnt = v;
-	v = atomic64_read(&alg->generate_public_key_cnt);
-	rkpp.stat_generate_public_key_cnt = v;
-	v = atomic64_read(&alg->compute_shared_secret_cnt);
-	rkpp.stat_compute_shared_secret_cnt = v;
-	v = atomic64_read(&alg->kpp_err_cnt);
-	rkpp.stat_kpp_err_cnt = v;
+	rkpp.stat_setsecret_cnt = atomic64_read(&alg->setsecret_cnt);
+	rkpp.stat_generate_public_key_cnt = atomic64_read(&alg->generate_public_key_cnt);
+	rkpp.stat_compute_shared_secret_cnt = atomic64_read(&alg->compute_shared_secret_cnt);
+	rkpp.stat_kpp_err_cnt = atomic64_read(&alg->kpp_err_cnt);
 
 	return nla_put(skb, CRYPTOCFGA_STAT_KPP, sizeof(rkpp), &rkpp);
 }
@@ -172,18 +135,14 @@ static int crypto_report_kpp(struct sk_buff *skb, struct crypto_alg *alg)
 static int crypto_report_ahash(struct sk_buff *skb, struct crypto_alg *alg)
 {
 	struct crypto_stat_hash rhash;
-	u64 v64;
 
 	memset(&rhash, 0, sizeof(rhash));
 
 	strscpy(rhash.type, "ahash", sizeof(rhash.type));
 
-	v64 = atomic64_read(&alg->hash_cnt);
-	rhash.stat_hash_cnt = v64;
-	v64 = atomic64_read(&alg->hash_tlen);
-	rhash.stat_hash_tlen = v64;
-	v64 = atomic64_read(&alg->hash_err_cnt);
-	rhash.stat_hash_err_cnt = v64;
+	rhash.stat_hash_cnt = atomic64_read(&alg->hash_cnt);
+	rhash.stat_hash_tlen = atomic64_read(&alg->hash_tlen);
+	rhash.stat_hash_err_cnt = atomic64_read(&alg->hash_err_cnt);
 
 	return nla_put(skb, CRYPTOCFGA_STAT_HASH, sizeof(rhash), &rhash);
 }
@@ -191,18 +150,14 @@ static int crypto_report_ahash(struct sk_buff *skb, struct crypto_alg *alg)
 static int crypto_report_shash(struct sk_buff *skb, struct crypto_alg *alg)
 {
 	struct crypto_stat_hash rhash;
-	u64 v64;
 
 	memset(&rhash, 0, sizeof(rhash));
 
 	strscpy(rhash.type, "shash", sizeof(rhash.type));
 
-	v64 = atomic64_read(&alg->hash_cnt);
-	rhash.stat_hash_cnt = v64;
-	v64 = atomic64_read(&alg->hash_tlen);
-	rhash.stat_hash_tlen = v64;
-	v64 = atomic64_read(&alg->hash_err_cnt);
-	rhash.stat_hash_err_cnt = v64;
+	rhash.stat_hash_cnt =  atomic64_read(&alg->hash_cnt);
+	rhash.stat_hash_tlen = atomic64_read(&alg->hash_tlen);
+	rhash.stat_hash_err_cnt = atomic64_read(&alg->hash_err_cnt);
 
 	return nla_put(skb, CRYPTOCFGA_STAT_HASH, sizeof(rhash), &rhash);
 }
@@ -210,20 +165,15 @@ static int crypto_report_shash(struct sk_buff *skb, struct crypto_alg *alg)
 static int crypto_report_rng(struct sk_buff *skb, struct crypto_alg *alg)
 {
 	struct crypto_stat_rng rrng;
-	u64 v64;
 
 	memset(&rrng, 0, sizeof(rrng));
 
 	strscpy(rrng.type, "rng", sizeof(rrng.type));
 
-	v64 = atomic64_read(&alg->generate_cnt);
-	rrng.stat_generate_cnt = v64;
-	v64 = atomic64_read(&alg->generate_tlen);
-	rrng.stat_generate_tlen = v64;
-	v64 = atomic64_read(&alg->seed_cnt);
-	rrng.stat_seed_cnt = v64;
-	v64 = atomic64_read(&alg->rng_err_cnt);
-	rrng.stat_rng_err_cnt = v64;
+	rrng.stat_generate_cnt = atomic64_read(&alg->generate_cnt);
+	rrng.stat_generate_tlen = atomic64_read(&alg->generate_tlen);
+	rrng.stat_seed_cnt = atomic64_read(&alg->seed_cnt);
+	rrng.stat_rng_err_cnt = atomic64_read(&alg->rng_err_cnt);
 
 	return nla_put(skb, CRYPTOCFGA_STAT_RNG, sizeof(rrng), &rrng);
 }
-- 
2.18.1

