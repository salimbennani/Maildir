Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  18 Dec 2018 18:09:39 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id E82F05805AD;
	Tue, 18 Dec 2018 01:12:16 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga004-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 18 Dec 2018 01:12:16 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AjUz1Jh2u7QCsxhIZsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segSLPzxwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJPUMhRSSJPH4Cy?=
 =?us-ascii?q?b4UAAOUdIOlXrYfyp0AWrRa8HgSsGP/jxyVUinPqx6A2zeIsGhzG0gw6GNIOtW?=
 =?us-ascii?q?zZotL0NKgOUeC61q3IxijBYfNRxTj964/IeQ0mrPGJXbJwdtbeyUooFw7ejVWf?=
 =?us-ascii?q?t5blPzWL2eQJqWSb6PBgVe22hmMhtgp/oSCvy98yhoXVgo8Z0E3I+CtnzIovON?=
 =?us-ascii?q?G1S1J3bcSlHZZSry2WKo97T8M4T211tis3yqcKtYClcCQW0pgr2R7SZvOBfoOV?=
 =?us-ascii?q?+BzsTvyRLi19hH99eLKwmRKy8U+4x+3iWcm7zkxKojBGktbSrHAN0QLc6sydRv?=
 =?us-ascii?q?t65Eeh1i6D1wHV6u5aPUA5jbTXJ4Ilz7Iqi5Yev1rPEjXrlEj1kKOabEQp9+qw?=
 =?us-ascii?q?5+TieLrmp5ucN4FuigH5N6Qjgsi/AeU+MggTUGmX4Oe826P5/U3/XrpKiuQ6kq?=
 =?us-ascii?q?7XsZDcO8sbvLW0AxFa0ok98RazFTSm38oCnXkBMl1FfAiLj4/zO1HBOPz4F+uw?=
 =?us-ascii?q?g0ywkDd3wPDLJrnhApTOLnfdirvgcqt95lVYyAoyy9Bf+p1VBqsAIPL1Rk/+qt?=
 =?us-ascii?q?jYAgUlPAyzxubtEM992Z8GWWKTHq+ZN7vfsV+S6eIuP+mDfogVtCz9K/g4/fHu?=
 =?us-ascii?q?i3A5lEQZfamo25sXdX+5Eu5nI0WffXrjnNMBHX0WsQo5SezgkEeCXiJLZ3auQ6?=
 =?us-ascii?q?I84Sk2CIChDYjdXIytg7uB3CG9Hp1RfW1GDlGMEXH1d4SLQfsMaSSSItN/nTwA?=
 =?us-ascii?q?T7SuV4gh1RS2vg/g17VnNvbU+jEftZ/7ztd1/O3TlRYx9TBuFcSSyWONQnpwnm?=
 =?us-ascii?q?MJQT82wa9+rVZ8yleFzah3nfhYGcZP6PNOVwcwLYTcwPBiC9DuRgLBec+ESFW8?=
 =?us-ascii?q?TdWgGz0xStMxzMUIY0ZyANiiihHD3yy3A74ajbCLBZo08r7C0Hj1Pcpy13HG1K?=
 =?us-ascii?q?w5hVk8XsRPLXGmhrJ49wXLGoHGiVuZmLiweaQcxiHN8nyDwnSIvE1fVA5wUqDF?=
 =?us-ascii?q?XXQEa0vSrNT54F7CTrC0BbQmNAtB1dCNKq9QZtL1ilVGQe/pOM7CbGKph2ewGR?=
 =?us-ascii?q?GIy6uRY4XwZWUSwj/RCEgenAAV5naJKw4+Czylo2LfCjxuCF3ub1nt8el4tHO0?=
 =?us-ascii?q?UEs0wxuWYE1m0rq/4gQViuCES/MPwrIEvz8sqyl1HFa42NLWF9qApgp7cKVAe9?=
 =?us-ascii?q?89501H1WbYtwx7MZytNKRihl8YcwRqsELizRR3CoNckcc0qHMm1hZ9KaWd0FlZ?=
 =?us-ascii?q?bTOXwYjwOqHLKmn15B2gcarW1U/R0dmI+qYD8u83q0j+sw6zEEoi8HJn08dO3n?=
 =?us-ascii?q?uY55XKChcSUJ3rXkY28Rh6u6/VYi0n64zI0n1sNLG+siXe1NIxGOsl1hGgcs9f?=
 =?us-ascii?q?MaOZDgP9D9cWBsmuKOMwnVipYQkJPORT9K4yIsOneOGK2K+tPOZ8gj2miX5L75?=
 =?us-ascii?q?x60kKJ7yB8UPLH344Zw/GE2QuKTy38jFa9vc/tg4BLeDYSEnC5ySf6Ho5RZ7R+?=
 =?us-ascii?q?cpoRBmeqPsK42M9+h5nrW3ND8F6jBlUG2NKmeBaIblz92xFQ2loToXC9hSS4yD?=
 =?us-ascii?q?l0mSkzrqWDxCzO3/jidB0fN29LRWlul1ftLZKvj9AHWkildAwplBqj5UbnyKlX?=
 =?us-ascii?q?vqV/L2/PQUhWeyj6NX1tUqy1trCaec5A9IsosTlLUOS7eV2aSKTyowEZ0yPgGG?=
 =?us-ascii?q?tS3is7eCupupX6nhx6jnySLHBooXrdeMFwwwrf5dPGSf5Q2DoGWDd3iT3NCleg?=
 =?us-ascii?q?ONmp+M2el43fveCmS2KhSppTfDHrzIyasyu3/29qARy5n/2ont3nEA460TL01t?=
 =?us-ascii?q?VwVCXIqgr8bZfv16igLe1neUxoDkfm68VmAoF+jpcwhJYI1HgZnJqV/GALkWfu?=
 =?us-ascii?q?MdpB36L+Y2EARToKw97T/Qjk11dvLnOPx4LlSHqdxtFtaMW9YmMTwig99dxFCL?=
 =?us-ascii?q?+I7LxYmit4ul+4rQPSYfdnhDscx+Uh6GUGg+4Xogoi1TuSAqodHURDOSzslhKI?=
 =?us-ascii?q?782xralNZWavd6Sw21R6ndy7EL6CpQRcUm7jepg+BS9w8tl/MFXU3X3v7YHkfc?=
 =?us-ascii?q?PcbNMJuR2SjhfAlPNVKJMqm/oOhCpnP3/9vHI/x+46ixxuwY+1vIydJ2px+6K5?=
 =?us-ascii?q?BwZSNifpaMML5jHtkaFek96N0I+1GZVhHigLUIHsTfK1Cz8SsfXnNwCTEDwzsH?=
 =?us-ascii?q?ubGLzfHROB50ditX7AD5erN3SPLnkD0dpiXAWdJFBYgA0MXjU1hJs5GR6xxMD7?=
 =?us-ascii?q?bEd1/DMR5kP7qhtRzOJnLQL/X3zbpAepbDc0VZeeIABX7gFE+0faL8ie4vhvEC?=
 =?us-ascii?q?Ff+52rtBaNJXCDZwRUEWEJXVSJBlDkPrmz/NnA7vKXBuykI/vVZrWOr+NeWuyM?=
 =?us-ascii?q?xZKu1Itm4jmNOt+OPnlkE/00xE5DUWplFMTenjUFUzYXmD7Vb86HuBe8/TV6rs?=
 =?us-ascii?q?Ch//TqWwLv5oqPB6FRMdV1/BC2jrmMN/SNhCZiMjtY0pIMxXnVyLkQxlISiidu?=
 =?us-ascii?q?dyWzHrQEryLCUKXQmqpPBR4BdyxzLNdI77473gRVI8Hbl8j61qRmgf81EVtFUV?=
 =?us-ascii?q?3hl9qtZcwLJWG9KVzGCFyKNLSAOT3E3cX3bbmgRr1XieVerwewtiqDE0//IjSD?=
 =?us-ascii?q?kCHkVwyuMeFJli2UIAZSt529chlzD2juV9bmahy9MN9qgjw627w0hnXWNWECNT?=
 =?us-ascii?q?hwaV9CrrqV7SlAmPVwB3RB7mZ5LemDgyuY7/PXKpATsftqBCR7j+Nb4HQgxLtT?=
 =?us-ascii?q?4yFJX/h1mCrUrt5zrFCqiOiPyjx7UBVQrjZHnp6EvUJnOfaRyp4VeXvF/xVFxm?=
 =?us-ascii?q?yKEAgHocAtXt3iuqNXjNPGjrnvJTFZ297Zu8oWAo7fL8fRY1Q7Nh+8PT/fDAIB?=
 =?us-ascii?q?BR6sPmLYzxhYkPaZ9Xq9rZUgrJXo3p0URekIBxQOCvoGBxE9T5Q5K5BtU2ZhyO?=
 =?us-ascii?q?bDgQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ACAAA1uRhch0O0hNFkGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUwIBAQEBAQsBg2uYNYINFJdGgjMBh18iNgcNAQMBAQEBAQE?=
 =?us-ascii?q?CARMBAQEKCwkIKS+CNiQBgmEBAQEBAgEBAjcNMgYJAQEKGAkTBwsDDAVJGIMdg?=
 =?us-ascii?q?XkIBAGpIoMqhxGMPxeBQD+BEYMShFuDX4ImAok0QIwZixQJkVMMGIoBh1Msmw8?=
 =?us-ascii?q?JgX4zGggoCIMogiYXEo4MP4E3AQGLLIJJAwEB?=
X-IPAS-Result: =?us-ascii?q?A0ACAAA1uRhch0O0hNFkGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUwIBAQEBAQsBg2uYNYINFJdGgjMBh18iNgcNAQMBAQEBAQECARMBAQEKCwkIK?=
 =?us-ascii?q?S+CNiQBgmEBAQEBAgEBAjcNMgYJAQEKGAkTBwsDDAVJGIMdgXkIBAGpIoMqhxG?=
 =?us-ascii?q?MPxeBQD+BEYMShFuDX4ImAok0QIwZixQJkVMMGIoBh1Msmw8JgX4zGggoCIMog?=
 =?us-ascii?q?iYXEo4MP4E3AQGLLIJJAwEB?=
X-IronPort-AV: E=Sophos;i="5.56,367,1539673200"; 
   d="scan'208";a="56791909"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 18 Dec 2018 01:12:15 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726441AbeLRJJM (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 18 Dec 2018 04:09:12 -0500
Received: from mx2.suse.de ([195.135.220.15]:49396 "EHLO mx1.suse.de"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726346AbeLRJJM (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 18 Dec 2018 04:09:12 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (unknown [195.135.220.254])
        by mx1.suse.de (Postfix) with ESMTP id CB914AC17;
        Tue, 18 Dec 2018 09:09:08 +0000 (UTC)
Date: Tue, 18 Dec 2018 10:09:07 +0100
From: Michal Hocko <mhocko@kernel.org>
To: Heiko Carstens <heiko.carstens@de.ibm.com>
Cc: Andrew Morton <akpm@linux-foundation.org>,
        Oscar Salvador <osalvador@suse.de>,
        Anshuman Khandual <anshuman.khandual@arm.com>,
        Stephen Rothwell <sfr@canb.auug.org.au>, linux-mm@kvack.org,
        linux-kernel@vger.kernel.org, linux-next@vger.kernel.org,
        linux-s390@vger.kernel.org
Subject: Re: [-next] lots of messages due to "mm, memory_hotplug: be more
 verbose for memory offline failures"
Message-ID: <20181218090907.GD30879@dhcp22.suse.cz>
References: <20181217155922.GC3560@osiris>
 <20181217160350.GV30879@dhcp22.suse.cz>
 <20181217163949.GX30879@dhcp22.suse.cz>
 <20181218075538.GA3590@osiris>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181218075538.GA3590@osiris>
User-Agent: Mutt/1.10.1 (2018-07-13)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Tue 18-12-18 08:55:38, Heiko Carstens wrote:
> On Mon, Dec 17, 2018 at 05:39:49PM +0100, Michal Hocko wrote:
> > On Mon 17-12-18 17:03:50, Michal Hocko wrote:
> > > On Mon 17-12-18 16:59:22, Heiko Carstens wrote:
> > > > Hi Michal,
> > > > 
> > > > with linux-next as of today on s390 I see tons of messages like
> > > > 
> > > > [   20.536664] page dumped because: has_unmovable_pages
> > > > [   20.536792] page:000003d081ff4080 count:1 mapcount:0 mapping:000000008ff88600 index:0x0 compound_mapcount: 0
> > > > [   20.536794] flags: 0x3fffe0000010200(slab|head)
> > > > [   20.536795] raw: 03fffe0000010200 0000000000000100 0000000000000200 000000008ff88600
> > > > [   20.536796] raw: 0000000000000000 0020004100000000 ffffffff00000001 0000000000000000
> > > > [   20.536797] page dumped because: has_unmovable_pages
> > > > [   20.536814] page:000003d0823b0000 count:1 mapcount:0 mapping:0000000000000000 index:0x0
> > > > [   20.536815] flags: 0x7fffe0000000000()
> > > > [   20.536817] raw: 07fffe0000000000 0000000000000100 0000000000000200 0000000000000000
> > > > [   20.536818] raw: 0000000000000000 0000000000000000 ffffffff00000001 0000000000000000
> > > > 
> > > > bisect points to b323c049a999 ("mm, memory_hotplug: be more verbose for memory offline failures")
> > > > which is the first commit with which the messages appear.
> > > 
> > > I would bet this is CMA allocator. How much is tons? Maybe we want a
> > > rate limit or the other user is not really interested in them at all?
> 
> Yes, the system in question has a 4NB CMA area. "tons" translates to several hundred.

OK, I guess these messages on their own without a wider context are not
that helpful. It is still surprising to see slab pages or non-movable
pages in the CMA area. The later might be an CMA allocation I guess but
slab pages shouldn't be there at all AFAIU.
 
> > In other words, this should silence those messages.
> 
> Yes, with the patch below applied the messages don't appear anymore.

OK, I will post an official patch. Even if CMA allocator decides to
report failures it can simply add the flag.

Thanks!

> > diff --git a/include/linux/page-isolation.h b/include/linux/page-isolation.h
> > index 4ae347cbc36d..4eb26d278046 100644
> > --- a/include/linux/page-isolation.h
> > +++ b/include/linux/page-isolation.h
> > @@ -30,8 +30,11 @@ static inline bool is_migrate_isolate(int migratetype)
> >  }
> >  #endif
> > 
> > +#define SKIP_HWPOISON	0x1
> > +#define REPORT_FAILURE	0x2
> > +
> >  bool has_unmovable_pages(struct zone *zone, struct page *page, int count,
> > -			 int migratetype, bool skip_hwpoisoned_pages);
> > +			 int migratetype, int flags);
> >  void set_pageblock_migratetype(struct page *page, int migratetype);
> >  int move_freepages_block(struct zone *zone, struct page *page,
> >  				int migratetype, int *num_movable);
> > @@ -44,10 +47,14 @@ int move_freepages_block(struct zone *zone, struct page *page,
> >   * For isolating all pages in the range finally, the caller have to
> >   * free all pages in the range. test_page_isolated() can be used for
> >   * test it.
> > + *
> > + * The following flags are allowed (they can be combined in a bit mask)
> > + * SKIP_HWPOISON - ignore hwpoison pages
> > + * REPORT_FAILURE - report details about the failure to isolate the range
> >   */
> >  int
> >  start_isolate_page_range(unsigned long start_pfn, unsigned long end_pfn,
> > -			 unsigned migratetype, bool skip_hwpoisoned_pages);
> > +			 unsigned migratetype, int flags);
> > 
> >  /*
> >   * Changes MIGRATE_ISOLATE to MIGRATE_MOVABLE.
> > diff --git a/mm/memory_hotplug.c b/mm/memory_hotplug.c
> > index c82193db4be6..8537429d33a6 100644
> > --- a/mm/memory_hotplug.c
> > +++ b/mm/memory_hotplug.c
> > @@ -1226,7 +1226,7 @@ static bool is_pageblock_removable_nolock(struct page *page)
> >  	if (!zone_spans_pfn(zone, pfn))
> >  		return false;
> > 
> > -	return !has_unmovable_pages(zone, page, 0, MIGRATE_MOVABLE, true);
> > +	return !has_unmovable_pages(zone, page, 0, MIGRATE_MOVABLE, SKIP_HWPOISON);
> >  }
> > 
> >  /* Checks if this range of memory is likely to be hot-removable. */
> > @@ -1577,7 +1577,8 @@ static int __ref __offline_pages(unsigned long start_pfn,
> > 
> >  	/* set above range as isolated */
> >  	ret = start_isolate_page_range(start_pfn, end_pfn,
> > -				       MIGRATE_MOVABLE, true);
> > +				       MIGRATE_MOVABLE,
> > +				       SKIP_HWPOISON | REPORT_FAILURE);
> >  	if (ret) {
> >  		mem_hotplug_done();
> >  		reason = "failure to isolate range";
> > diff --git a/mm/page_alloc.c b/mm/page_alloc.c
> > index ec2c7916dc2d..ee4043419791 100644
> > --- a/mm/page_alloc.c
> > +++ b/mm/page_alloc.c
> > @@ -7754,8 +7754,7 @@ void *__init alloc_large_system_hash(const char *tablename,
> >   * race condition. So you can't expect this function should be exact.
> >   */
> >  bool has_unmovable_pages(struct zone *zone, struct page *page, int count,
> > -			 int migratetype,
> > -			 bool skip_hwpoisoned_pages)
> > +			 int migratetype, int flags)
> >  {
> >  	unsigned long pfn, iter, found;
> > 
> > @@ -7818,7 +7817,7 @@ bool has_unmovable_pages(struct zone *zone, struct page *page, int count,
> >  		 * The HWPoisoned page may be not in buddy system, and
> >  		 * page_count() is not 0.
> >  		 */
> > -		if (skip_hwpoisoned_pages && PageHWPoison(page))
> > +		if ((flags & SKIP_HWPOISON) && PageHWPoison(page))
> >  			continue;
> > 
> >  		if (__PageMovable(page))
> > @@ -7845,7 +7844,8 @@ bool has_unmovable_pages(struct zone *zone, struct page *page, int count,
> >  	return false;
> >  unmovable:
> >  	WARN_ON_ONCE(zone_idx(zone) == ZONE_MOVABLE);
> > -	dump_page(pfn_to_page(pfn+iter), "unmovable page");
> > +	if (flags & REPORT_FAILURE)
> > +		dump_page(pfn_to_page(pfn+iter), "unmovable page");
> >  	return true;
> >  }
> > 
> > @@ -7972,8 +7972,7 @@ int alloc_contig_range(unsigned long start, unsigned long end,
> >  	 */
> > 
> >  	ret = start_isolate_page_range(pfn_max_align_down(start),
> > -				       pfn_max_align_up(end), migratetype,
> > -				       false);
> > +				       pfn_max_align_up(end), migratetype, 0);
> >  	if (ret)
> >  		return ret;
> > 
> > diff --git a/mm/page_isolation.c b/mm/page_isolation.c
> > index 43e085608846..ce323e56b34d 100644
> > --- a/mm/page_isolation.c
> > +++ b/mm/page_isolation.c
> > @@ -15,8 +15,7 @@
> >  #define CREATE_TRACE_POINTS
> >  #include <trace/events/page_isolation.h>
> > 
> > -static int set_migratetype_isolate(struct page *page, int migratetype,
> > -				bool skip_hwpoisoned_pages)
> > +static int set_migratetype_isolate(struct page *page, int migratetype, int isol_flags)
> >  {
> >  	struct zone *zone;
> >  	unsigned long flags, pfn;
> > @@ -60,8 +59,7 @@ static int set_migratetype_isolate(struct page *page, int migratetype,
> >  	 * FIXME: Now, memory hotplug doesn't call shrink_slab() by itself.
> >  	 * We just check MOVABLE pages.
> >  	 */
> > -	if (!has_unmovable_pages(zone, page, arg.pages_found, migratetype,
> > -				 skip_hwpoisoned_pages))
> > +	if (!has_unmovable_pages(zone, page, arg.pages_found, migratetype, flags))
> >  		ret = 0;
> > 
> >  	/*
> > @@ -185,7 +183,7 @@ __first_valid_page(unsigned long pfn, unsigned long nr_pages)
> >   * prevents two threads from simultaneously working on overlapping ranges.
> >   */
> >  int start_isolate_page_range(unsigned long start_pfn, unsigned long end_pfn,
> > -			     unsigned migratetype, bool skip_hwpoisoned_pages)
> > +			     unsigned migratetype, int flags)
> >  {
> >  	unsigned long pfn;
> >  	unsigned long undo_pfn;
> > @@ -199,7 +197,7 @@ int start_isolate_page_range(unsigned long start_pfn, unsigned long end_pfn,
> >  	     pfn += pageblock_nr_pages) {
> >  		page = __first_valid_page(pfn, pageblock_nr_pages);
> >  		if (page &&
> > -		    set_migratetype_isolate(page, migratetype, skip_hwpoisoned_pages)) {
> > +		    set_migratetype_isolate(page, migratetype, flags)) {
> >  			undo_pfn = pfn;
> >  			goto undo;
> >  		}
> > -- 
> > Michal Hocko
> > SUSE Labs
> > 

-- 
Michal Hocko
SUSE Labs
