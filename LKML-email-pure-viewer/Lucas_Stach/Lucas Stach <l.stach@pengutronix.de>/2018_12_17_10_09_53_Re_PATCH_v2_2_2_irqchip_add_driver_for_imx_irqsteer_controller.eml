Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  17 Dec 2018 18:15:51 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id B11025805FC;
	Mon, 17 Dec 2018 02:13:04 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga007-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 17 Dec 2018 02:13:03 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A6muNSRwSV6LJBgzXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e4eK/ad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWlPUNtRWSJfDI2z?=
 =?us-ascii?q?bYUPAPYGM+lXoIf9vEMOoBmlCAmwB+7i0CNEi2Xq0aA41ekqDAHI3BYnH9ILqH?=
 =?us-ascii?q?naqsj1O7sIXuCu0aLG0CnDYOlK1jf99YPFdRQhreuXXbJsa8Xe1UkvGhjdjlqO?=
 =?us-ascii?q?r4zlMC6V1vgXs2ic6epgVO2uh3Q6pA5vuzWiwNonhIrRho8N1FzI6SF0zJwoKd?=
 =?us-ascii?q?C2VkJ3e8OoHZhMuy2ANoZ7QNsuT390tCom17ELvJ+2cSoWx5kixhPSaeCLfo2V?=
 =?us-ascii?q?7h7/SOqcJCp0i29gdb+6mRq9606twfDmWMauylZFtC9Fn8HMtn8T0xzT7dCKSu?=
 =?us-ascii?q?Vy/ki/wzaDzQPT5f9eIUAyi6XbL4QtwrkqlpocqUjDHyn2l1vqjKKOaEko5uyl?=
 =?us-ascii?q?5/76brjouJOQLZJ4hwLiPqg0m8GyA/w0Mg0UUGia/eS82qfj/Ur8QLhSiv02k6?=
 =?us-ascii?q?/ZsI3VJMgCpa62HRVV0oA95Ba7Fjum19oZnX8ZI1JfYx+HkYfpNE/UIPziDvew?=
 =?us-ascii?q?nU6skDF1yPDCJLHhBY/NLnfbnLf7Ybl981JcyBY0zd1H45JUC7IBL+zpVk7+qd?=
 =?us-ascii?q?zVFRs5Mw2yw+b6B9RxzIIeWWSTAqCHNKPeq0OH5uUqI+OUfo8apC79K+Q55/7p?=
 =?us-ascii?q?lXI5mUUSfai13ZQNb3C0BPRmI1iDbnrqjdcMCmMKvgs4TOz3h1yOSz9TZ3CuX6?=
 =?us-ascii?q?0i4jE3Ep6pDYDGRoq1mryOwD+7HoFKZmBBEl2ME3DoeJueV/cPbyKSJMlhkjsf?=
 =?us-ascii?q?WLilSo8h0wyutQDgx7pmKOrU5jMXtZb52Ndp4O3TkAk49SZoAMSFz2GNU2Z0k3?=
 =?us-ascii?q?sSSD8t3KB/pk99xk2Z0adigfxVDthT5/JPUgcnOp/Q1e16C9buWg3feteFUkqp?=
 =?us-ascii?q?QtKjATspVNI+38cOY1phG9Wllh3D3DClA7kPm7yPBZw76KTc33fqKsZ5ynbG0r?=
 =?us-ascii?q?QhjlY8TstOM22mmrBw9wzJC4HVlEWZkr6gdb4A0y7V6GeD0W2OsVlFXwFqT6XK?=
 =?us-ascii?q?Q2oTZkvMotT//UPNUbmuBbMjMgtCzM6CLrBHatnojVVAWffiN87SY2O3m2esGx?=
 =?us-ascii?q?mIwqmAY5bte2UYxC/dElQLkxgP/XaaMggzHjqurHjADDNwD17vY1nj8e9lqHyl?=
 =?us-ascii?q?SE851AWKb0xn17qo9R8Zn/2cS/UP3r0avCctsSl7HFG439jOEdqPuxJhfLlAYd?=
 =?us-ascii?q?M6+FpHyWPZtwl6Ppy8L6BjhkQScxhts0PpzRV3DoRAkc4lrH4xyApyKKSY0E5O?=
 =?us-ascii?q?dj+C3JDwPKHXJXf2/By1d6HW3VTe2s6M+qgT8PQ4t0njvAaxG0U493VozdZU3G?=
 =?us-ascii?q?Wc55nQFwUSTI/+XVwx9xh5oLHafDIw54fV1X1qLKm1vSXO29MvBOs51Bmge81T?=
 =?us-ascii?q?P7+DFA/3C8caHdShKPQ2m1i1aRIJJOBT9LMuM8y6bfeH2a6rM/xmnDKplmlH5I?=
 =?us-ascii?q?F90kSR9ytzUOLI3pAFw+2G0QuDTTvzkFChssXvk4BeeT4SBna/yTTjBINJfK1y?=
 =?us-ascii?q?fJoEBn20I8KqwdVynZjtVGBC9F6iHl8JxNWmeR6PYFPjxw1Q0kIXrGejmSu5yT?=
 =?us-ascii?q?x0jj4oorCe3CzI3+Ttah4HNnRXS2lliFfmOZK0gMwCXEi0cwgpkwOo5Eb7x6RB?=
 =?us-ascii?q?pKVzNXLTQVpOfyXtK2FiU62wtqeNYsJV6ZMotzlXX/q4YVyAVrH9pB4a2Tv5H2?=
 =?us-ascii?q?RC3DA7ay2qupLhkhx4km2dNnVzrHneec1q3hfQ/t/cRf1Q3joAWiZ4jyLaBly9?=
 =?us-ascii?q?P9mv4NWVmI3PsuG4V2K9SJJTdTPnwp+HtCu+/WdqGwGwn+ivmt37Fgg3yS/62M?=
 =?us-ascii?q?NtVSnSrhb8Y4/r2r++MeJmeEloGVD959B7GoF4jos/mpUQ1WIGiZWS+HoNiX3z?=
 =?us-ascii?q?PslD2aLicHoNQiYGw93P7wjkwkFjLm+JyJj/VnWS2cZhY9i6YmUL2iMy9cxKCa?=
 =?us-ascii?q?GU7KBakitxuFa3sQXRYf1llDcH1fQu8GIag/0OuAc1yyWdA7MSElNCMS3iiRuI?=
 =?us-ascii?q?9My+o7tNZGm0b7ewzkV+kMulDLGDpAFcRXn4do0jHS928sVwLlbM3Gfv5YHjfd?=
 =?us-ascii?q?nadcgTuQGMkxfck+hVL4o8luYNhSpiI278vGcqy+gmjRx1xpG6vZOKK2Fs/KK/?=
 =?us-ascii?q?Hx5ZOSf5Z8IV+jHxk6lemtya0JyoHpVkAj8LRofnTeq0EDIOsvTqLx2BHyc7qn?=
 =?us-ascii?q?efBLrTBwuf6Fp9onLLEpCrMWyXJXYDwdVjQhmdOFJQgAQOUDommZ45ExigxNb9?=
 =?us-ascii?q?f0dh+jAR+ln4pwNOyu1yMhnwTHzfqB20ajsuS5ifMRlW7hxE50jPKsyT9eZzHy?=
 =?us-ascii?q?Be/p28ow2BMG2bZwJUDW4XXkyIHUzsPr6r5dPY6eiXGvK+L+fSYbWJseFfV/CI?=
 =?us-ascii?q?xY+20ot75TmMMN+DPmJlD/091UpORnR5G8XfmzUSRC0bjSPNb8iHpBii/i17tN?=
 =?us-ascii?q?yw8PPuWAj3/4uAF6NSMclz+xCxmaqDN/CfhCd6KTZb15MA33zIyKIY3F4dlS5u?=
 =?us-ascii?q?bSStEa8buC7JTaLQnLJXDhEBZyNyMstI87wz3g1XNcHHjdP106ZyjuQpBFddSV?=
 =?us-ascii?q?zhhsapaNQQLGGgL1zHHliENbScKT3PwsH6eqe8SbxWjOVJuBy8ozebE0n/Pjud?=
 =?us-ascii?q?kznlTQygMeZJjCuDJhxRpJm9cgpxCWjkVN/mdhy7MNptgTIq27E7mnPKOnAaMT?=
 =?us-ascii?q?Vnd0NNr7uQ7T5Xg/llGmxB6GZlIveAmyqD8+bYLZMWu+NxAitoj+Ja/Gg6y7xN?=
 =?us-ascii?q?4SBEXvN1ni7Srt9oo16+k+iPyiBoUBxBqjtQgIKLvENiObjW95VaWHbE+g4N4n?=
 =?us-ascii?q?uUCxgQu9RlDdjv6OhszY3qnbj4YAVT9d3V8NFUU83dMsnBImsnPhvkAhbdFg5D?=
 =?us-ascii?q?RjmuYzLxnUtYxdWP/XSO5qMmo5Ps0M4KDKRHXVc1PusXDEt4AMYFJpZnGD8px+?=
 =?us-ascii?q?3IxPUU7Gaz+UGCDP5RuYrKA7fLWa3i?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AUAABXdRdch0O0hNFjHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGBMII7J4N8iBmLdoINFJdEgXMsEwGBS4YJIjQJDQEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BCgsJCCkvgjYkAYJiAQIDAQIgBAsBRgYJAQEKGAICJgICA1QGEwWDHYIBAQMBp?=
 =?us-ascii?q?2l8M4VBhF2BC4szgVc/gRGDEogJglcCiTiHZI99BwKBFpBciX+HU5sqgg4zGiS?=
 =?us-ascii?q?DO4InF44ePzKBBQEBjW8BAQ?=
X-IPAS-Result: =?us-ascii?q?A0AUAABXdRdch0O0hNFjHQEBBQEHBQGBUQgBCwGBMII7J4N?=
 =?us-ascii?q?8iBmLdoINFJdEgXMsEwGBS4YJIjQJDQEDAQEBAQEBAgETAQEBCgsJCCkvgjYkA?=
 =?us-ascii?q?YJiAQIDAQIgBAsBRgYJAQEKGAICJgICA1QGEwWDHYIBAQMBp2l8M4VBhF2BC4s?=
 =?us-ascii?q?zgVc/gRGDEogJglcCiTiHZI99BwKBFpBciX+HU5sqgg4zGiSDO4InF44ePzKBB?=
 =?us-ascii?q?QEBjW8BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,364,1539673200"; 
   d="scan'208";a="67126500"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 17 Dec 2018 02:13:02 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726902AbeLQKJ6 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 17 Dec 2018 05:09:58 -0500
Received: from metis.ext.pengutronix.de ([85.220.165.71]:35841 "EHLO
        metis.ext.pengutronix.de" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726551AbeLQKJ6 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 17 Dec 2018 05:09:58 -0500
Received: from kresse.hi.pengutronix.de ([2001:67c:670:100:1d::2a])
        by metis.ext.pengutronix.de with esmtp (Exim 4.89)
        (envelope-from <l.stach@pengutronix.de>)
        id 1gYpqT-0000g7-PA; Mon, 17 Dec 2018 11:09:53 +0100
Message-ID: <1545041393.5874.1.camel@pengutronix.de>
Subject: Re: [PATCH v2 2/2] irqchip: add driver for imx-irqsteer controller
From: Lucas Stach <l.stach@pengutronix.de>
To: Marc Zyngier <marc.zyngier@arm.com>
Cc: Mark Rutland <mark.rutland@arm.com>, devicetree@vger.kernel.org,
        Jason Cooper <jason@lakedaemon.net>,
        linux-kernel@vger.kernel.org, patchwork-lst@pengutronix.de,
        Rob Herring <robh+dt@kernel.org>, kernel@pengutronix.de,
        Thomas Gleixner <tglx@linutronix.de>
Date: Mon, 17 Dec 2018 11:09:53 +0100
In-Reply-To: <86r2ejaztt.wl-marc.zyngier@arm.com>
References: <20181214102244.21509-1-l.stach@pengutronix.de>
         <20181214102244.21509-3-l.stach@pengutronix.de>
         <86r2ejaztt.wl-marc.zyngier@arm.com>
Content-Type: text/plain; charset="UTF-8"
X-Mailer: Evolution 3.22.6-1+deb9u1 
Mime-Version: 1.0
Content-Transfer-Encoding: 8bit
X-SA-Exim-Connect-IP: 2001:67c:670:100:1d::2a
X-SA-Exim-Mail-From: l.stach@pengutronix.de
X-SA-Exim-Scanned: No (on metis.ext.pengutronix.de); SAEximRunCond expanded to false
X-PTX-Original-Recipient: linux-kernel@vger.kernel.org
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi Marc,

Am Samstag, den 15.12.2018, 09:45 +0000 schrieb Marc Zyngier:
> Hi Lucas,
> 
> On Fri, 14 Dec 2018 10:22:44 +0000,
> > Lucas Stach <l.stach@pengutronix.de> wrote:
> > 
> > The irqsteer block is a interrupt multiplexer/remapper found on the
> > i.MX8 line of SoCs.
> > 
> > > > Signed-off-by: Fugang Duan <fugang.duan@nxp.com>
> > > > Signed-off-by: Lucas Stach <l.stach@pengutronix.de>
> > ---
> > v2:
> >  - use raw_spinlock
> >  - add proper clk error handling
> >  - align register offset calculation with reality
> >  - use correct SPDX identifier
> >  - simplify DT configuration
> > ---

[...]

> > +static const struct irq_domain_ops imx_irqsteer_domain_ops = {
> > > > > > +	.map		= imx_irqsteer_irq_map,
> > +	.xlate		= irq_domain_xlate_twocell,
> 
> I've tried to understand why you are using two cells, but couldn't
> find an explanation from the DT binding. As far as I can see, you only
> support LEVEL_HIGH signalling, meaning that you could perfectly
> encode this in a single cell. What am I missing?

Nothing. At this point I'm sure that the controller only support level-
high IRQs. Will switch to a single cell in the next spin.

[...]

> > +static int imx_irqsteer_probe(struct platform_device *pdev)
> > +{
> > > > +	struct device_node *np = pdev->dev.of_node;
> > > > +	struct irqsteer_data *data;
> > > > +	struct resource *res;
> > > > +	int ret;
> > +
> > > > +	data = devm_kzalloc(&pdev->dev, sizeof(*data), GFP_KERNEL);
> > > > +	if (!data)
> > > > +		return -ENOMEM;
> > +
> > > > +	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
> > > > +	data->regs = devm_ioremap_resource(&pdev->dev, res);
> > > > +	if (IS_ERR(data->regs)) {
> > > > +		dev_err(&pdev->dev, "failed to initialize reg\n");
> > > > +		return PTR_ERR(data->regs);
> > > > +	}
> > +
> > > > +	data->irq = platform_get_irq(pdev, 0);
> > > > +	if (data->irq <= 0) {
> > > > +		dev_err(&pdev->dev, "failed to get irq\n");
> > > > +		return -ENODEV;
> > > > +	}
> > +
> > > > +	data->ipg_clk = devm_clk_get(&pdev->dev, "ipg");
> > > > +	if (IS_ERR(data->ipg_clk)) {
> > > > +		ret = PTR_ERR(data->ipg_clk);
> > > > +		if (ret != -EPROBE_DEFER)
> > > > +			dev_err(&pdev->dev, "failed to get ipg clk: %d\n", ret);
> > > > +		return ret;
> > > > +	}
> > +
> > > > +	raw_spin_lock_init(&data->lock);
> > +
> > > > +	of_property_read_u32(np, "fsl,irq-groups", &data->irq_groups);
> > > > +	of_property_read_u32(np, "fsl,channel", &data->channel);
> > +
> > > > +	if (IS_ENABLED(CONFIG_PM_SLEEP)) {
> > > > +		data->saved_reg = devm_kzalloc(&pdev->dev,
> > > > +					sizeof(u32) * data->irq_groups * 2,
> > > > +					GFP_KERNEL);
> > > > +		if (!data->saved_reg)
> > > > +			return -ENOMEM;
> > > > +	}
> > +
> > > > +	ret = clk_prepare_enable(data->ipg_clk);
> > > > +	if (ret) {
> > > > +		dev_err(&pdev->dev, "failed to enable ipg clk: %d\n", ret);
> > > > +		return ret;
> > > > +	}
> > +
> > > > +	/* steer all IRQs into configured channel */
> > +	writel_relaxed(BIT(data->channel), data->regs + CHANCTRL);
> 
> Could you explain what this channel is exactly?

I've tired in the cover letter, but seems I still failed, so let me try
again. ;)

Each irqsteer instance can be connected to multiple upstream IRQ lines,
but only one of them can be used at runtime. This register controls
which output IRQ line will be used by this controller instance. With
multiple controller instances in the system it's a way to offload the
decision of the IRQ routing from the hardware to the software guys.

Let's try to add an example: Suppose there are 2 instances of the
irqsteer controller. Both are connected to upstream GIC IRQs 20 and 21.
The channel controls which of those IRQs are used by each instance, so
there are 2 valid DT configurations in this scenario:

This is valid:

irqsteer@0 {
	interrupts = <GIC_SPI 20 IRQ_TYPE_LEVEL_HIGH>
	fsl,channel = <0>;
};

irqsteer@1 {
	interrupts = <GIC_SPI 21 IRQ_TYPE_LEVEL_HIGH>
	fsl,channel = <1>;
};

As well as this:

irqsteer@0 {
	interrupts = <GIC_SPI 21 IRQ_TYPE_LEVEL_HIGH>
	fsl,channel = <1>;
};

irqsteer@1 {
	interrupts = <GIC_SPI 20 IRQ_TYPE_LEVEL_HIGH>
	fsl,channel = <0>;
};
	
[...]
> > +#ifdef CONFIG_PM_SLEEP
> > +static void imx_irqsteer_save_regs(struct irqsteer_data *data)
> > +{
> > > > +	int num;
> > +
> > > > +	for (num = 0; num < data->irq_groups; num++)
> > > > +		data->saved_reg[num + 1] = readl_relaxed(data->regs +
> > +						CHANMASK(num, data->irq_groups));
> 
> You seem to only use one u32 per IRQ group. Yet, you've allocated
> twice as much memory to that effect. Why? Also, you're avoiding to use
> index 0, which I find rather odd.
> 
> Given that the DT binding states that each group manages 64
> interrupts, I have the feeling that you're missing some interrupt
> enable state.

And you are right with this observation. I failed to properly rework
this part of the code when switching to the irq-group indexing.

Regards,
Lucas
