Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 08:50:39 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 518D958079D
	for <like.xu@linux.intel.com>; Wed, 12 Dec 2018 05:46:04 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga001-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 12 Dec 2018 05:46:04 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AQHwN2R+dBfdfMf9uRHKM819IXTAuvvDOBiVQ1KB3?=
 =?us-ascii?q?2uIcTK2v8tzYMVDF4r011RmVBdWds6oMotGVmpioYXYH75eFvSJKW713fDhBt/?=
 =?us-ascii?q?8rmRc9CtWOE0zxIa2iRSU7GMNfSA0tpCnjYgBaF8nkelLdvGC54yIMFRXjLwp1?=
 =?us-ascii?q?Ifn+FpLPg8it2O2+557ebx9UiDahfLh/MAi4oQLNu8cMnIBsMLwxyhzHontJf+?=
 =?us-ascii?q?RZ22ZlLk+Nkhj/+8m94odt/zxftPw9+cFAV776f7kjQrxDEDsmKWE169b1uhTF?=
 =?us-ascii?q?UACC+2ETUmQSkhpPHgjF8BT3VYr/vyfmquZw3jSRMMvrRr42RDui9b9mRh/2hi?=
 =?us-ascii?q?kJNDA28m/XhcN/gqxGuBKspR5xzoHJbIybKPZxYLjdcMgGSWpYRMtdSzBNDp+g?=
 =?us-ascii?q?Y4YJEuEPPfxYr474p1YWqBWxGxesBOLpyjRVhnD22qk60+o8GgzB3wwhEdUOsH?=
 =?us-ascii?q?DarNjuLqcdT/26zKnSwjXfdf9ZxTD96I3Rfx0nvPqCXqpwfNLPxUUzFA7JlEic?=
 =?us-ascii?q?pZHmMj+PyOgAvWiW4/B9We+tk2IrtR19rzy1yssxhITFmJgZxk3H+Ch32oo5O9?=
 =?us-ascii?q?61RUhmatC+CpRQrTuVN45uT8MiXW5ovCE6x6UCuZ66ZygK1I8nywTQa/yBboiE?=
 =?us-ascii?q?+BXjVPyeITtghXJlfqywhwqq/ES+1uHxVdO43EtXoidGiNXAqH4A2hzJ5sSaSP?=
 =?us-ascii?q?Zx5kKh1iyO1wDX5OFEO0c0la/DJp443LEwk4cTvV3eESDohkX5kquWelw/9eiv?=
 =?us-ascii?q?9uTnZKnpqYGHN4NzjgH+M6culdKlDeU3LwgDR2yb+eW61L3+8kz1WrRKjvsqkq?=
 =?us-ascii?q?bHtJDWP9gUpqm8AwJO1IYj7BC/Dzig0NQFh3UHK0hFeB2fg4jzJ17OOOz4Deu4?=
 =?us-ascii?q?g1m0lDdrxvPGMaP7DpTCM3jOi7Phfbd7605Bxws/19Ff55RICr4fJPL/QFP+tN?=
 =?us-ascii?q?vdDkxxDgqv3uyyCMlhzphMHiWLA7SFK+XUtlmH4P9pJPODI4ocuTL4Iv5i4Oby?=
 =?us-ascii?q?jHg/ghgEcKy0mJcadn28TclgOFiTNH/lg9MdFjUTsw8jCeDnllCGFCRefmu/RL?=
 =?us-ascii?q?4U4DY9B4S7S4DZSde2nbaD0SynS4BQfX1MEVuWEH3lJLmDDu4BbT/XKMtmmT8s?=
 =?us-ascii?q?U7+nRIk8kxa0u1zU0b1ie8nZ5Cwe/a3k0NY9s+7MkhU83SZ5A8SUzyeGSGQizT?=
 =?us-ascii?q?BAfCM/wK0q+R818VyEy6Ut2/E=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BTAACdEBFcmBHrdtBjHQEBBQEHBQGBU?=
 =?us-ascii?q?wYBCwGBMIJijHOLM4INkleEfBSBXxQYFIc+IjYHDQEDAQEBAQEBAgETAQEBAQE?=
 =?us-ascii?q?ICwsGGw4vgjYFAgMYCYJcAwMBAiQfCikDAwECBgEBHykIAwFTGQWDHIICAQSmX?=
 =?us-ascii?q?DOFQIRvjDwXgUA/gRGHe4VzAokZJJdPCZFMCxiBXIgNh10sigKPEYFNCYF+Mxo?=
 =?us-ascii?q?IGxWDJ4JQjgxAMYEHHIppgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0BTAACdEBFcmBHrdtBjHQEBBQEHBQGBUwYBCwGBMIJijHO?=
 =?us-ascii?q?LM4INkleEfBSBXxQYFIc+IjYHDQEDAQEBAQEBAgETAQEBAQEICwsGGw4vgjYFA?=
 =?us-ascii?q?gMYCYJcAwMBAiQfCikDAwECBgEBHykIAwFTGQWDHIICAQSmXDOFQIRvjDwXgUA?=
 =?us-ascii?q?/gRGHe4VzAokZJJdPCZFMCxiBXIgNh10sigKPEYFNCYF+MxoIGxWDJ4JQjgxAM?=
 =?us-ascii?q?YEHHIppgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,344,1539673200"; 
   d="scan'208";a="44651651"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 12 Dec 2018 05:46:03 -0800
Received: from localhost ([::1]:45003 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gX4pt-0000UE-66
	for like.xu@linux.intel.com; Wed, 12 Dec 2018 08:46:02 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:46879)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <kwolf@redhat.com>) id 1gX4ZM-0003bD-3z
	for qemu-devel@nongnu.org; Wed, 12 Dec 2018 08:28:57 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <kwolf@redhat.com>) id 1gX4ZK-0001sM-VE
	for qemu-devel@nongnu.org; Wed, 12 Dec 2018 08:28:56 -0500
Received: from mx1.redhat.com ([209.132.183.28]:52125)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <kwolf@redhat.com>)
	id 1gX4ZH-0001oY-RS; Wed, 12 Dec 2018 08:28:52 -0500
Received: from smtp.corp.redhat.com (int-mx02.intmail.prod.int.phx2.redhat.com
	[10.5.11.12])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 11FF9811D9;
	Wed, 12 Dec 2018 13:28:51 +0000 (UTC)
Received: from linux.fritz.box.com (ovpn-117-245.ams2.redhat.com
	[10.36.117.245])
	by smtp.corp.redhat.com (Postfix) with ESMTP id EA81260C44;
	Wed, 12 Dec 2018 13:28:49 +0000 (UTC)
From: Kevin Wolf <kwolf@redhat.com>
To: qemu-block@nongnu.org
Date: Wed, 12 Dec 2018 14:27:32 +0100
Message-Id: <20181212132735.16080-39-kwolf@redhat.com>
In-Reply-To: <20181212132735.16080-1-kwolf@redhat.com>
References: <20181212132735.16080-1-kwolf@redhat.com>
MIME-Version: 1.0
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.12
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.27]);
	Wed, 12 Dec 2018 13:28:51 +0000 (UTC)
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: [Qemu-devel] [PULL 38/41] block: Stop passing flags to
 bdrv_reopen_queue_child()
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: kwolf@redhat.com, peter.maydell@linaro.org, qemu-devel@nongnu.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

From: Alberto Garcia <berto@igalia.com>

Now that all callers are passing the new options using the QDict we no
longer need the 'flags' parameter.

This patch makes the following changes:

   1) The update_options_from_flags() call is no longer necessary
      so it can be removed.

   2) The update_flags_from_options() call is now used in all cases,
      and is moved down a few lines so it happens after the options
      QDict contains the final set of values.

   3) The flags parameter is removed. Now the flags are initialized
      using the current value (for the top-level node) or the parent
      flags (after inherit_options()). In both cases the initial
      values are updated to reflect the new options in the QDict. This
      happens in bdrv_reopen_queue_child() (as explained above) and in
      bdrv_reopen_prepare().

Signed-off-by: Alberto Garcia <berto@igalia.com>
Reviewed-by: Max Reitz <mreitz@redhat.com>
Signed-off-by: Kevin Wolf <kwolf@redhat.com>
---
 block.c | 48 +++++++++++++++++++-----------------------------
 1 file changed, 19 insertions(+), 29 deletions(-)

diff --git a/block.c b/block.c
index 800c341244..cb354438be 100644
--- a/block.c
+++ b/block.c
@@ -2931,7 +2931,6 @@ BlockDriverState *bdrv_open(const char *filename, c=
onst char *reference,
 static BlockReopenQueue *bdrv_reopen_queue_child(BlockReopenQueue *bs_qu=
eue,
                                                  BlockDriverState *bs,
                                                  QDict *options,
-                                                 int flags,
                                                  const BdrvChildRole *ro=
le,
                                                  QDict *parent_options,
                                                  int parent_flags)
@@ -2940,7 +2939,9 @@ static BlockReopenQueue *bdrv_reopen_queue_child(Bl=
ockReopenQueue *bs_queue,
=20
     BlockReopenQueueEntry *bs_entry;
     BdrvChild *child;
-    QDict *old_options, *explicit_options;
+    QDict *old_options, *explicit_options, *options_copy;
+    int flags;
+    QemuOpts *opts;
=20
     /* Make sure that the caller remembered to use a drained section. Th=
is is
      * important to avoid graph changes between the recursive queuing he=
re and
@@ -2966,22 +2967,11 @@ static BlockReopenQueue *bdrv_reopen_queue_child(=
BlockReopenQueue *bs_queue,
     /*
      * Precedence of options:
      * 1. Explicitly passed in options (highest)
-     * 2. Set in flags (only for top level)
-     * 3. Retained from explicitly set options of bs
-     * 4. Inherited from parent node
-     * 5. Retained from effective options of bs
+     * 2. Retained from explicitly set options of bs
+     * 3. Inherited from parent node
+     * 4. Retained from effective options of bs
      */
=20
-    if (!parent_options) {
-        /*
-         * Any setting represented by flags is always updated. If the
-         * corresponding QDict option is set, it takes precedence. Other=
wise
-         * the flag is translated into a QDict option. The old setting o=
f bs is
-         * not considered.
-         */
-        update_options_from_flags(options, flags);
-    }
-
     /* Old explicitly set values (don't overwrite by inherited value) */
     if (bs_entry) {
         old_options =3D qdict_clone_shallow(bs_entry->state.explicit_opt=
ions);
@@ -2995,16 +2985,10 @@ static BlockReopenQueue *bdrv_reopen_queue_child(=
BlockReopenQueue *bs_queue,
=20
     /* Inherit from parent node */
     if (parent_options) {
-        QemuOpts *opts;
-        QDict *options_copy;
-        assert(!flags);
+        flags =3D 0;
         role->inherit_options(&flags, options, parent_flags, parent_opti=
ons);
-        options_copy =3D qdict_clone_shallow(options);
-        opts =3D qemu_opts_create(&bdrv_runtime_opts, NULL, 0, &error_ab=
ort);
-        qemu_opts_absorb_qdict(opts, options_copy, NULL);
-        update_flags_from_options(&flags, opts);
-        qemu_opts_del(opts);
-        qobject_unref(options_copy);
+    } else {
+        flags =3D bdrv_get_flags(bs);
     }
=20
     /* Old values are used for options that aren't set yet */
@@ -3012,6 +2996,14 @@ static BlockReopenQueue *bdrv_reopen_queue_child(B=
lockReopenQueue *bs_queue,
     bdrv_join_options(bs, options, old_options);
     qobject_unref(old_options);
=20
+    /* We have the final set of options so let's update the flags */
+    options_copy =3D qdict_clone_shallow(options);
+    opts =3D qemu_opts_create(&bdrv_runtime_opts, NULL, 0, &error_abort)=
;
+    qemu_opts_absorb_qdict(opts, options_copy, NULL);
+    update_flags_from_options(&flags, opts);
+    qemu_opts_del(opts);
+    qobject_unref(options_copy);
+
     /* bdrv_open_inherit() sets and clears some additional flags interna=
lly */
     flags &=3D ~BDRV_O_PROTOCOL;
     if (flags & BDRV_O_RDWR) {
@@ -3051,7 +3043,7 @@ static BlockReopenQueue *bdrv_reopen_queue_child(Bl=
ockReopenQueue *bs_queue,
         qdict_extract_subqdict(options, &new_child_options, child_key_do=
t);
         g_free(child_key_dot);
=20
-        bdrv_reopen_queue_child(bs_queue, child->bs, new_child_options, =
0,
+        bdrv_reopen_queue_child(bs_queue, child->bs, new_child_options,
                                 child->role, options, flags);
     }
=20
@@ -3062,9 +3054,7 @@ BlockReopenQueue *bdrv_reopen_queue(BlockReopenQueu=
e *bs_queue,
                                     BlockDriverState *bs,
                                     QDict *options)
 {
-    int flags =3D bdrv_get_flags(bs);
-    return bdrv_reopen_queue_child(bs_queue, bs, options, flags,
-                                   NULL, NULL, 0);
+    return bdrv_reopen_queue_child(bs_queue, bs, options, NULL, NULL, 0)=
;
 }
=20
 /*
--=20
2.19.2


