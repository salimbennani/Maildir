Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 08:50:36 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 73FCF580380
	for <like.xu@linux.intel.com>; Wed, 12 Dec 2018 05:41:38 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by orsmga003-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 12 Dec 2018 05:41:38 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3Abp3oZxdTk+YD4W0yIQr9fr80lGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxcSzbB7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v6bpgRh31hy?=
 =?us-ascii?q?cdLzM38H/ZhMJzgq1ZrhKuqBNxzZPMYIyXNvRzcb7RcN0GSWVfRcZcTDBNApqm?=
 =?us-ascii?q?YocTE+YNIfpUoo/grFUOtxu+AgysCfvqxDBWmH/23Ks62PkhHgHB2AwgEc8FvX?=
 =?us-ascii?q?PXrNT7M6cSVe61wbLSzTrdcvxW2S3y6JTSfh89pvGMWKt9fMzMwkcsDwPIlkuc?=
 =?us-ascii?q?pZDmMj+Py+gBrmuW4/B+We+hi2MrsRx9rzq3yssyloXEgpgZxk3K+Cln2oo5ON?=
 =?us-ascii?q?61RUBhbdK6E5ZdsTyROZFsTcM4WW5ovT43yr0Ytp6/eygH0JAnxx/Ea/ybaIiE?=
 =?us-ascii?q?+B3jVOCMITtig3JlYr2/iw6z8Uim1OL8StG53EhWoidGiNXAq20B2h/J5sSZRP?=
 =?us-ascii?q?Zw/l2t1SuN2gzL7+FLO0E0la7VK547xb4wk4IesV3dES/zhUX6lbKZeVs6+ue2?=
 =?us-ascii?q?7+Tre67pppiBN49ylg7xLL8ulsu7AeQ5MQgBQXKX+Ouh1LD7+U35QbNKjuA5k6?=
 =?us-ascii?q?XDsZDaI9gbqbC9AwNPzokj7BO/Aiyg0NQfm3kHI1RFeA+dg4juIVHOL+j0De2j?=
 =?us-ascii?q?jFS0jDdr2/fGM6XlApXMLXjMjq3tfLlg60NHzAozzNZf549bC70bIfLzXFPxu8?=
 =?us-ascii?q?LcDhMjLwO0xOPnW51A0JgDUzePHrOBK/GV9luJ/f40Ze+LYoATpXD6Mfdi4vfv?=
 =?us-ascii?q?iXownxgaZbWo2p0ML2m1G+kjL0iHbH6/v9EaDG1fuwM/SPDt2kSPVCMWa3usUq?=
 =?us-ascii?q?Z5/DwiFY+9Ea/FQYaihqHH2z20SYZLbGJLAUzZDHHzao+fUO0NYi/BHsg0izEB?=
 =?us-ascii?q?SP2rT4gq1jmoswn1zachKfDbqQMCspe299Vr5uubqhY2+3QgDNua12+lVWx4nm?=
 =?us-ascii?q?oUATQx2fYs8gRG1l6f3P0g0LRjHttJ6qYRXw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AlAAD9DhFcmBHrdtBjHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGBMIJijBRfizOCDXyWV4FzFBgUhz4iNAkNAQMBAQEBAQECARMBAQEBAQg?=
 =?us-ascii?q?LCwYbDi+CNgUCAxgJglwDAwECJB8KKQMDAQIGAQEfKQgDAVMZBYMcggIBBKZcM?=
 =?us-ascii?q?4VAhHCMPBeBQD+BEYJdixECiT2XTwmRTAsYiWmHXZk/gUaCDjMaCBsVgyeCJxc?=
 =?us-ascii?q?SjgxAMYEHHIppgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AlAAD9DhFcmBHrdtBjHQEBBQEHBQGBUQgBCwGBMIJijBR?=
 =?us-ascii?q?fizOCDXyWV4FzFBgUhz4iNAkNAQMBAQEBAQECARMBAQEBAQgLCwYbDi+CNgUCA?=
 =?us-ascii?q?xgJglwDAwECJB8KKQMDAQIGAQEfKQgDAVMZBYMcggIBBKZcM4VAhHCMPBeBQD+?=
 =?us-ascii?q?BEYJdixECiT2XTwmRTAsYiWmHXZk/gUaCDjMaCBsVgyeCJxcSjgxAMYEHHIppg?=
 =?us-ascii?q?XcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,344,1539673200"; 
   d="scan'208";a="56585766"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 12 Dec 2018 05:41:37 -0800
Received: from localhost ([::1]:44973 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gX4lc-0004xX-Pg
	for like.xu@linux.intel.com; Wed, 12 Dec 2018 08:41:36 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:46118)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <kwolf@redhat.com>) id 1gX4Yb-0002RJ-MK
	for qemu-devel@nongnu.org; Wed, 12 Dec 2018 08:28:10 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <kwolf@redhat.com>) id 1gX4Ya-00014E-FJ
	for qemu-devel@nongnu.org; Wed, 12 Dec 2018 08:28:09 -0500
Received: from mx1.redhat.com ([209.132.183.28]:54316)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <kwolf@redhat.com>)
	id 1gX4YT-0000si-Lu; Wed, 12 Dec 2018 08:28:03 -0500
Received: from smtp.corp.redhat.com (int-mx02.intmail.prod.int.phx2.redhat.com
	[10.5.11.12])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id E53BE89AC6;
	Wed, 12 Dec 2018 13:27:59 +0000 (UTC)
Received: from linux.fritz.box.com (ovpn-117-245.ams2.redhat.com
	[10.36.117.245])
	by smtp.corp.redhat.com (Postfix) with ESMTP id CFF7360C44;
	Wed, 12 Dec 2018 13:27:58 +0000 (UTC)
From: Kevin Wolf <kwolf@redhat.com>
To: qemu-block@nongnu.org
Date: Wed, 12 Dec 2018 14:27:03 +0100
Message-Id: <20181212132735.16080-10-kwolf@redhat.com>
In-Reply-To: <20181212132735.16080-1-kwolf@redhat.com>
References: <20181212132735.16080-1-kwolf@redhat.com>
MIME-Version: 1.0
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.12
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.26]);
	Wed, 12 Dec 2018 13:27:59 +0000 (UTC)
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: [Qemu-devel] [PULL 09/41] qcow2: move decompression from
 qcow2-cluster.c to qcow2.c
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: kwolf@redhat.com, peter.maydell@linaro.org, qemu-devel@nongnu.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

From: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>

Compression is done in threads in qcow2.c. We want to do decompression
in the same way, so, firstly, move it to the same file.

The only change is braces around if-body in decompress_buffer, to
satisfy checkpatch.

Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Reviewed-by: Alberto Garcia <berto@igalia.com>
Signed-off-by: Kevin Wolf <kwolf@redhat.com>
---
 block/qcow2-cluster.c | 70 ------------------------------------------
 block/qcow2.c         | 71 +++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 71 insertions(+), 70 deletions(-)

diff --git a/block/qcow2-cluster.c b/block/qcow2-cluster.c
index d37fe08b3d..e2737429f5 100644
--- a/block/qcow2-cluster.c
+++ b/block/qcow2-cluster.c
@@ -1571,76 +1571,6 @@ again:
     return 0;
 }
=20
-static int decompress_buffer(uint8_t *out_buf, int out_buf_size,
-                             const uint8_t *buf, int buf_size)
-{
-    z_stream strm1, *strm =3D &strm1;
-    int ret, out_len;
-
-    memset(strm, 0, sizeof(*strm));
-
-    strm->next_in =3D (uint8_t *)buf;
-    strm->avail_in =3D buf_size;
-    strm->next_out =3D out_buf;
-    strm->avail_out =3D out_buf_size;
-
-    ret =3D inflateInit2(strm, -12);
-    if (ret !=3D Z_OK)
-        return -1;
-    ret =3D inflate(strm, Z_FINISH);
-    out_len =3D strm->next_out - out_buf;
-    if ((ret !=3D Z_STREAM_END && ret !=3D Z_BUF_ERROR) ||
-        out_len !=3D out_buf_size) {
-        inflateEnd(strm);
-        return -1;
-    }
-    inflateEnd(strm);
-    return 0;
-}
-
-int qcow2_decompress_cluster(BlockDriverState *bs, uint64_t cluster_offs=
et)
-{
-    BDRVQcow2State *s =3D bs->opaque;
-    int ret, csize, nb_csectors, sector_offset;
-    uint64_t coffset;
-
-    coffset =3D cluster_offset & s->cluster_offset_mask;
-    if (s->cluster_cache_offset !=3D coffset) {
-        nb_csectors =3D ((cluster_offset >> s->csize_shift) & s->csize_m=
ask) + 1;
-        sector_offset =3D coffset & 511;
-        csize =3D nb_csectors * 512 - sector_offset;
-
-        /* Allocate buffers on first decompress operation, most images a=
re
-         * uncompressed and the memory overhead can be avoided.  The buf=
fers
-         * are freed in .bdrv_close().
-         */
-        if (!s->cluster_data) {
-            /* one more sector for decompressed data alignment */
-            s->cluster_data =3D qemu_try_blockalign(bs->file->bs,
-                    QCOW_MAX_CRYPT_CLUSTERS * s->cluster_size + 512);
-            if (!s->cluster_data) {
-                return -ENOMEM;
-            }
-        }
-        if (!s->cluster_cache) {
-            s->cluster_cache =3D g_malloc(s->cluster_size);
-        }
-
-        BLKDBG_EVENT(bs->file, BLKDBG_READ_COMPRESSED);
-        ret =3D bdrv_read(bs->file, coffset >> 9, s->cluster_data,
-                        nb_csectors);
-        if (ret < 0) {
-            return ret;
-        }
-        if (decompress_buffer(s->cluster_cache, s->cluster_size,
-                              s->cluster_data + sector_offset, csize) < =
0) {
-            return -EIO;
-        }
-        s->cluster_cache_offset =3D coffset;
-    }
-    return 0;
-}
-
 /*
  * This discards as many clusters of nb_clusters as possible at once (i.=
e.
  * all clusters in the same L2 slice) and returns the number of discarde=
d
diff --git a/block/qcow2.c b/block/qcow2.c
index 0c1569f715..d4d141c495 100644
--- a/block/qcow2.c
+++ b/block/qcow2.c
@@ -3762,6 +3762,34 @@ static ssize_t qcow2_compress(void *dest, size_t d=
est_size,
     return ret;
 }
=20
+static int decompress_buffer(uint8_t *out_buf, int out_buf_size,
+                             const uint8_t *buf, int buf_size)
+{
+    z_stream strm1, *strm =3D &strm1;
+    int ret, out_len;
+
+    memset(strm, 0, sizeof(*strm));
+
+    strm->next_in =3D (uint8_t *)buf;
+    strm->avail_in =3D buf_size;
+    strm->next_out =3D out_buf;
+    strm->avail_out =3D out_buf_size;
+
+    ret =3D inflateInit2(strm, -12);
+    if (ret !=3D Z_OK) {
+        return -1;
+    }
+    ret =3D inflate(strm, Z_FINISH);
+    out_len =3D strm->next_out - out_buf;
+    if ((ret !=3D Z_STREAM_END && ret !=3D Z_BUF_ERROR) ||
+        out_len !=3D out_buf_size) {
+        inflateEnd(strm);
+        return -1;
+    }
+    inflateEnd(strm);
+    return 0;
+}
+
 #define MAX_COMPRESS_THREADS 4
=20
 typedef struct Qcow2CompressData {
@@ -3915,6 +3943,49 @@ fail:
     return ret;
 }
=20
+int qcow2_decompress_cluster(BlockDriverState *bs, uint64_t cluster_offs=
et)
+{
+    BDRVQcow2State *s =3D bs->opaque;
+    int ret, csize, nb_csectors, sector_offset;
+    uint64_t coffset;
+
+    coffset =3D cluster_offset & s->cluster_offset_mask;
+    if (s->cluster_cache_offset !=3D coffset) {
+        nb_csectors =3D ((cluster_offset >> s->csize_shift) & s->csize_m=
ask) + 1;
+        sector_offset =3D coffset & 511;
+        csize =3D nb_csectors * 512 - sector_offset;
+
+        /* Allocate buffers on first decompress operation, most images a=
re
+         * uncompressed and the memory overhead can be avoided.  The buf=
fers
+         * are freed in .bdrv_close().
+         */
+        if (!s->cluster_data) {
+            /* one more sector for decompressed data alignment */
+            s->cluster_data =3D qemu_try_blockalign(bs->file->bs,
+                    QCOW_MAX_CRYPT_CLUSTERS * s->cluster_size + 512);
+            if (!s->cluster_data) {
+                return -ENOMEM;
+            }
+        }
+        if (!s->cluster_cache) {
+            s->cluster_cache =3D g_malloc(s->cluster_size);
+        }
+
+        BLKDBG_EVENT(bs->file, BLKDBG_READ_COMPRESSED);
+        ret =3D bdrv_read(bs->file, coffset >> 9, s->cluster_data,
+                        nb_csectors);
+        if (ret < 0) {
+            return ret;
+        }
+        if (decompress_buffer(s->cluster_cache, s->cluster_size,
+                              s->cluster_data + sector_offset, csize) < =
0) {
+            return -EIO;
+        }
+        s->cluster_cache_offset =3D coffset;
+    }
+    return 0;
+}
+
 static int make_completely_empty(BlockDriverState *bs)
 {
     BDRVQcow2State *s =3D bs->opaque;
--=20
2.19.2


