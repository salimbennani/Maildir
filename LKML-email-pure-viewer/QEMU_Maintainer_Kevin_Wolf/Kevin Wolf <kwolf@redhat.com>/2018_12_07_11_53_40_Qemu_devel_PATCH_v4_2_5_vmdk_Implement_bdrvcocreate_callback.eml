Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 21:02:26 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from FMSMGA003.fm.intel.com (fmsmga003.fm.intel.com [10.253.24.29])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 66B815803E4
	for <like.xu@linux.intel.com>; Fri,  7 Dec 2018 03:54:40 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by FMSMGA003-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 07 Dec 2018 03:54:40 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A3XKAuB/+pkSn9v9uRHKM819IXTAuvvDOBiVQ1KB3?=
 =?us-ascii?q?2uIcTK2v8tzYMVDF4r011RmVBdWds6oMotGVmpioYXYH75eFvSJKW713fDhBt/?=
 =?us-ascii?q?8rmRc9CtWOE0zxIa2iRSU7GMNfSA0tpCnjYgBaF8nkelLdvGC54yIMFRXjLwp1?=
 =?us-ascii?q?Ifn+FpLPg8it2O2+557ebx9UiDahfLh/MAi4oQLNu8cMnIBsMLwxyhzHontJf+?=
 =?us-ascii?q?RZ22ZlLk+Nkhj/+8m94odt/zxftPw9+cFAV776f7kjQrxDEDsmKWE169b1uhTF?=
 =?us-ascii?q?UACC+2ETUmQSkhpPHgjF8BT3VYr/vyfmquZw3jSRMMvrRr42RDui9b9mRh/2hi?=
 =?us-ascii?q?kJNDA28m/XhcN/gqxGuBKspR5xzoHJbIybKPZxYLjdcMgGSWpYRMtdSzBNDp+g?=
 =?us-ascii?q?Y4YJEuEPPfxYr474p1YWqBWxGxesBOLpyjRVhnD22qk60+o8GgzB3wwhEdUOsH?=
 =?us-ascii?q?DarNjuLqcdT/26zKnSwjXfdf9ZxTD96I3Rfx0nvPqCXqpwfNLPxUUzFA7JlEic?=
 =?us-ascii?q?pZHmMj+PyOgAvWiW4/B9We+tk2IrtR19rzy1yssxhITFmJgZxk3H+Ch32oo5O9?=
 =?us-ascii?q?61RUhmatC+CpRQrTuVN45uT8MiXW5ovCE6x6UCuZ66ZygK1I8nywTQa/yBboiE?=
 =?us-ascii?q?+BXjVPyeITtghXJlfqywhwqq/ES+1uHxVdO43EtXoidGiNXAqH4A2hzJ5sSaSP?=
 =?us-ascii?q?Zx5kKh1iyO1wDX5OFEO0c0la/DJp443LEwk4cTvV3eESDohkX5kquWelw/9eiv?=
 =?us-ascii?q?9uTnZKnpqYGHN4NzjgH+M6culdKlDeU3LwgDR2yb+eW61L3+8kz1WrRKjvsqkq?=
 =?us-ascii?q?bHtJDWP9gUpqm8AwJO1IYj7BC/Dzig0NQFh3UHK0hFeB2fg4jzJ17OOOz4Deu4?=
 =?us-ascii?q?g1m0lDdrxvPGMaP7DpTCM3jOi7Phfbd7605Bxws/19Ff55RICr4fJPL/QFP+tN?=
 =?us-ascii?q?vdDkxxDgqv3uyyCMlhzphMHiWLA7SFK+XUtlmH4P9pJPODI4ocuTL4Iv5i4Oby?=
 =?us-ascii?q?jHg/ghgEcKy0mJcadn28TclgOFiTNH/lg9MdFjUTsw8jCeDnllCGFCRefmu/RL?=
 =?us-ascii?q?4U4DY9B4S7S4DZSde2nbaD0SynS4BQfX1MEVuWEH3lJLmDDu4BbT/XKMtmmT8s?=
 =?us-ascii?q?U7+nRIk8kxa0u1zU0b1ie8nZ5Cwe/a3k0NY9s+7MkhU83SZ5A8SUzyeGSGQizT?=
 =?us-ascii?q?BAfCM/wK0q+R818VyEy6Ut2/E=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AqAABhXgpcmBHrdtBjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUwUBAQsBgTCBOYEpjHKLMYINl0+BdxAYAxGHWyI2Bw0BAwEBAQEBAQIBEwE?=
 =?us-ascii?q?BAQEBCAsLBhsOIwyCNgUCAxgJglwDAwECFw0fCikDAwECBgEBHykIAwFTGQWDH?=
 =?us-ascii?q?AGCAQEEpXUzhUCEb4g1g2oXgUA/gRGNbgKJLQqGBIFMj2AJhwaDOYcBCxiBXIg?=
 =?us-ascii?q?HNocfLJhvgU0KgXwzGggbFTuCbAmCGwMXiS+Eb0AxgQcch1krKYF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0AqAABhXgpcmBHrdtBjHAEBAQQBAQcEAQGBUwUBAQsBgTC?=
 =?us-ascii?q?BOYEpjHKLMYINl0+BdxAYAxGHWyI2Bw0BAwEBAQEBAQIBEwEBAQEBCAsLBhsOI?=
 =?us-ascii?q?wyCNgUCAxgJglwDAwECFw0fCikDAwECBgEBHykIAwFTGQWDHAGCAQEEpXUzhUC?=
 =?us-ascii?q?Eb4g1g2oXgUA/gRGNbgKJLQqGBIFMj2AJhwaDOYcBCxiBXIgHNocfLJhvgU0Kg?=
 =?us-ascii?q?XwzGggbFTuCbAmCGwMXiS+Eb0AxgQcch1krKYF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,326,1539673200"; 
   d="scan'208";a="54245605"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 07 Dec 2018 03:54:39 -0800
Received: from localhost ([::1]:45559 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gVEiM-00078E-DQ
	for like.xu@linux.intel.com; Fri, 07 Dec 2018 06:54:38 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:51855)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <kwolf@redhat.com>) id 1gVEhs-00074r-DE
	for qemu-devel@nongnu.org; Fri, 07 Dec 2018 06:54:11 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <kwolf@redhat.com>) id 1gVEhn-0005NW-F6
	for qemu-devel@nongnu.org; Fri, 07 Dec 2018 06:54:06 -0500
Received: from mx1.redhat.com ([209.132.183.28]:49496)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <kwolf@redhat.com>)
	id 1gVEhg-0004aE-Od; Fri, 07 Dec 2018 06:53:56 -0500
Received: from smtp.corp.redhat.com (int-mx01.intmail.prod.int.phx2.redhat.com
	[10.5.11.11])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 12F34307DAB6;
	Fri,  7 Dec 2018 11:53:56 +0000 (UTC)
Received: from linux.fritz.box.com (ovpn-117-248.ams2.redhat.com
	[10.36.117.248])
	by smtp.corp.redhat.com (Postfix) with ESMTP id 03FAE6BC2F;
	Fri,  7 Dec 2018 11:53:52 +0000 (UTC)
From: Kevin Wolf <kwolf@redhat.com>
To: qemu-block@nongnu.org
Date: Fri,  7 Dec 2018 12:53:40 +0100
Message-Id: <20181207115343.6747-3-kwolf@redhat.com>
In-Reply-To: <20181207115343.6747-1-kwolf@redhat.com>
References: <20181207115343.6747-1-kwolf@redhat.com>
MIME-Version: 1.0
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.11
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.42]);
	Fri, 07 Dec 2018 11:53:56 +0000 (UTC)
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: [Qemu-devel] [PATCH v4 2/5] vmdk: Implement .bdrv_co_create callback
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: kwolf@redhat.com, qemu-devel@nongnu.org, armbru@redhat.com,
	mreitz@redhat.com
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

From: Fam Zheng <famz@redhat.com>

This makes VMDK support blockdev-create. The implementation reuses the
image creation code in vmdk_co_create_opts which now acceptes a callback
pointer to "retrieve" BlockBackend pointers from the caller. This way we
separate the logic between file/extent acquisition and initialization.

The QAPI command parameters are mostly the same as the old create_opts
except the dropped legacy @compat6 switch, which is redundant with
@hwversion.

Signed-off-by: Fam Zheng <famz@redhat.com>
Signed-off-by: Kevin Wolf <kwolf@redhat.com>
---
 qapi/block-core.json  |  70 +++++++
 qapi/qapi-schema.json |  16 +-
 block/vmdk.c          | 448 ++++++++++++++++++++++++++++++------------
 3 files changed, 400 insertions(+), 134 deletions(-)

diff --git a/qapi/block-core.json b/qapi/block-core.json
index d4fe710836..0793550cf2 100644
--- a/qapi/block-core.json
+++ b/qapi/block-core.json
@@ -4021,6 +4021,75 @@
             'size':             'size',
             '*cluster-size' :   'size' } }
=20
+##
+# @BlockdevVmdkSubformat:
+#
+# Subformat options for VMDK images
+#
+# @monolithicSparse:     Single file image with sparse cluster allocatio=
n
+#
+# @monolithicFlat:       Single flat data image and a descriptor file
+#
+# @twoGbMaxExtentSparse: Data is split into 2GB (per virtual LBA) sparse=
 extent
+#                        files, in addition to a descriptor file
+#
+# @twoGbMaxExtentFlat:   Data is split into 2GB (per virtual LBA) flat e=
xtent
+#                        files, in addition to a descriptor file
+#
+# @streamOptimized:      Single file image sparse cluster allocation, op=
timized
+#                        for streaming over network.
+#
+# Since: 4.0
+##
+{ 'enum': 'BlockdevVmdkSubformat',
+  'data': [ 'monolithicSparse', 'monolithicFlat', 'twoGbMaxExtentSparse'=
,
+            'twoGbMaxExtentFlat', 'streamOptimized'] }
+
+##
+# @BlockdevVmdkAdapterType:
+#
+# Adapter type info for VMDK images
+#
+# Since: 4.0
+##
+{ 'enum': 'BlockdevVmdkAdapterType',
+  'data': [ 'ide', 'buslogic', 'lsilogic', 'legacyESX'] }
+
+##
+# @BlockdevCreateOptionsVmdk:
+#
+# Driver specific image creation options for VMDK.
+#
+# @file         Where to store the new image file. This refers to the im=
age
+#               file for monolithcSparse and streamOptimized format, or =
the
+#               descriptor file for other formats.
+# @size         Size of the virtual disk in bytes
+# @extents      Where to store the data extents. Required for monolithcF=
lat,
+#               twoGbMaxExtentSparse and twoGbMaxExtentFlat formats. For
+#               monolithicFlat, only one entry is required; for
+#               twoGbMaxExtent* formats, the number of entries required =
is
+#               calculated as extent_number =3D virtual_size / 2GB.
+# @subformat    The subformat of the VMDK image. Default: "monolithicSpa=
rse".
+# @backing-file The path of backing file. Default: no backing file is us=
ed.
+# @adapter-type The adapter type used to fill in the descriptor. Default=
: ide.
+# @hwversion    Hardware version. The meaningful options are "4" or "6".
+#               Default: "4".
+# @zeroed-grain Whether to enable zeroed-grain feature for sparse subfor=
mats.
+#               Default: false.
+#
+# Since: 4.0
+##
+{ 'struct': 'BlockdevCreateOptionsVmdk',
+  'data': { 'file':             'BlockdevRef',
+            'size':             'size',
+            '*extents':          ['BlockdevRef'],
+            '*subformat':       'BlockdevVmdkSubformat',
+            '*backing-file':    'str',
+            '*adapter-type':    'BlockdevVmdkAdapterType',
+            '*hwversion':       'str',
+            '*zeroed-grain':    'bool' } }
+
+
 ##
 # @SheepdogRedundancyType:
 #
@@ -4215,6 +4284,7 @@
       'ssh':            'BlockdevCreateOptionsSsh',
       'vdi':            'BlockdevCreateOptionsVdi',
       'vhdx':           'BlockdevCreateOptionsVhdx',
+      'vmdk':           'BlockdevCreateOptionsVmdk',
       'vpc':            'BlockdevCreateOptionsVpc'
   } }
=20
diff --git a/qapi/qapi-schema.json b/qapi/qapi-schema.json
index 65b6dc2f6f..339f9b315b 100644
--- a/qapi/qapi-schema.json
+++ b/qapi/qapi-schema.json
@@ -63,13 +63,15 @@
         'query-tpm-types',
         'ringbuf-read' ],
     'name-case-whitelist': [
-        'ACPISlotType',         # DIMM, visible through query-acpi-ospm-=
status
-        'CpuInfoMIPS',          # PC, visible through query-cpu
-        'CpuInfoTricore',       # PC, visible through query-cpu
-        'QapiErrorClass',       # all members, visible through errors
-        'UuidInfo',             # UUID, visible through query-uuid
-        'X86CPURegister32',     # all members, visible indirectly throug=
h qom-get
-        'q_obj_CpuInfo-base'    # CPU, visible through query-cpu
+        'ACPISlotType',             # DIMM, visible through query-acpi-o=
spm-status
+        'CpuInfoMIPS',              # PC, visible through query-cpu
+        'CpuInfoTricore',           # PC, visible through query-cpu
+        'BlockdevVmdkSubformat',    # all members, to match VMDK spec sp=
ellings
+        'BlockdevVmdkAdapterType',  # legacyESX, to match VMDK spec spel=
lings
+        'QapiErrorClass',           # all members, visible through error=
s
+        'UuidInfo',                 # UUID, visible through query-uuid
+        'X86CPURegister32',         # all members, visible indirectly th=
rough qom-get
+        'q_obj_CpuInfo-base'        # CPU, visible through query-cpu
     ] } }
=20
 # Documentation generated with qapi-gen.py is in source order, with
diff --git a/block/vmdk.c b/block/vmdk.c
index 32fc2c84b3..5a162ee85c 100644
--- a/block/vmdk.c
+++ b/block/vmdk.c
@@ -1932,33 +1932,56 @@ static int filename_decompose(const char *filenam=
e, char *path, char *prefix,
     return VMDK_OK;
 }
=20
-static int coroutine_fn vmdk_co_create_opts(const char *filename, QemuOp=
ts *opts,
-                                            Error **errp)
+/*
+ * idx =3D=3D 0: get or create the descriptor file (also the image file =
if in a
+ *           non-split format.
+ * idx >=3D 1: get the n-th extent if in a split subformat
+ */
+typedef BlockBackend *(*vmdk_create_extent_fn)(int64_t size,
+                                               int idx,
+                                               bool flat,
+                                               bool split,
+                                               bool compress,
+                                               bool zeroed_grain,
+                                               void *opaque,
+                                               Error **errp);
+
+static void vmdk_desc_add_extent(GString *desc,
+                                 const char *extent_line_fmt,
+                                 int64_t size, const char *filename)
+{
+    char *basename =3D g_path_get_basename(filename);
+
+    g_string_append_printf(desc, extent_line_fmt,
+                           DIV_ROUND_UP(size, BDRV_SECTOR_SIZE), basenam=
e);
+    g_free(basename);
+}
+
+static int coroutine_fn vmdk_co_do_create(int64_t size,
+                                          BlockdevVmdkSubformat subforma=
t,
+                                          BlockdevVmdkAdapterType adapte=
r_type,
+                                          const char *backing_file,
+                                          const char *hw_version,
+                                          bool compat6,
+                                          bool zeroed_grain,
+                                          vmdk_create_extent_fn extent_f=
n,
+                                          void *opaque,
+                                          Error **errp)
 {
-    int idx =3D 0;
-    BlockBackend *new_blk =3D NULL;
+    int extent_idx;
+    BlockBackend *blk =3D NULL;
     Error *local_err =3D NULL;
     char *desc =3D NULL;
-    int64_t total_size =3D 0, filesize;
-    char *adapter_type =3D NULL;
-    char *backing_file =3D NULL;
-    char *hw_version =3D NULL;
-    char *fmt =3D NULL;
     int ret =3D 0;
     bool flat, split, compress;
     GString *ext_desc_lines;
-    char *path =3D g_malloc0(PATH_MAX);
-    char *prefix =3D g_malloc0(PATH_MAX);
-    char *postfix =3D g_malloc0(PATH_MAX);
-    char *desc_line =3D g_malloc0(BUF_SIZE);
-    char *ext_filename =3D g_malloc0(PATH_MAX);
-    char *desc_filename =3D g_malloc0(PATH_MAX);
     const int64_t split_size =3D 0x80000000;  /* VMDK has constant split=
 size */
-    const char *desc_extent_line;
+    int64_t extent_size;
+    int64_t created_size =3D 0;
+    const char *extent_line_fmt;
     char *parent_desc_line =3D g_malloc0(BUF_SIZE);
     uint32_t parent_cid =3D 0xffffffff;
     uint32_t number_heads =3D 16;
-    bool zeroed_grain =3D false;
     uint32_t desc_offset =3D 0, desc_len;
     const char desc_template[] =3D
         "# Disk DescriptorFile\n"
@@ -1982,71 +2005,35 @@ static int coroutine_fn vmdk_co_create_opts(const=
 char *filename, QemuOpts *opts
=20
     ext_desc_lines =3D g_string_new(NULL);
=20
-    if (filename_decompose(filename, path, prefix, postfix, PATH_MAX, er=
rp)) {
-        ret =3D -EINVAL;
-        goto exit;
-    }
     /* Read out options */
-    total_size =3D ROUND_UP(qemu_opt_get_size_del(opts, BLOCK_OPT_SIZE, =
0),
-                          BDRV_SECTOR_SIZE);
-    adapter_type =3D qemu_opt_get_del(opts, BLOCK_OPT_ADAPTER_TYPE);
-    backing_file =3D qemu_opt_get_del(opts, BLOCK_OPT_BACKING_FILE);
-    hw_version =3D qemu_opt_get_del(opts, BLOCK_OPT_HWVERSION);
-    if (qemu_opt_get_bool_del(opts, BLOCK_OPT_COMPAT6, false)) {
-        if (strcmp(hw_version, "undefined")) {
+    if (compat6) {
+        if (hw_version) {
             error_setg(errp,
                        "compat6 cannot be enabled with hwversion set");
             ret =3D -EINVAL;
             goto exit;
         }
-        g_free(hw_version);
-        hw_version =3D g_strdup("6");
-    }
-    if (strcmp(hw_version, "undefined") =3D=3D 0) {
-        g_free(hw_version);
-        hw_version =3D g_strdup("4");
+        hw_version =3D "6";
     }
-    fmt =3D qemu_opt_get_del(opts, BLOCK_OPT_SUBFMT);
-    if (qemu_opt_get_bool_del(opts, BLOCK_OPT_ZEROED_GRAIN, false)) {
-        zeroed_grain =3D true;
+    if (!hw_version) {
+        hw_version =3D "4";
     }
=20
-    if (!adapter_type) {
-        adapter_type =3D g_strdup("ide");
-    } else if (strcmp(adapter_type, "ide") &&
-               strcmp(adapter_type, "buslogic") &&
-               strcmp(adapter_type, "lsilogic") &&
-               strcmp(adapter_type, "legacyESX")) {
-        error_setg(errp, "Unknown adapter type: '%s'", adapter_type);
-        ret =3D -EINVAL;
-        goto exit;
-    }
-    if (strcmp(adapter_type, "ide") !=3D 0) {
+    if (adapter_type !=3D BLOCKDEV_VMDK_ADAPTER_TYPE_IDE) {
         /* that's the number of heads with which vmware operates when
            creating, exporting, etc. vmdk files with a non-ide adapter t=
ype */
         number_heads =3D 255;
     }
-    if (!fmt) {
-        /* Default format to monolithicSparse */
-        fmt =3D g_strdup("monolithicSparse");
-    } else if (strcmp(fmt, "monolithicFlat") &&
-               strcmp(fmt, "monolithicSparse") &&
-               strcmp(fmt, "twoGbMaxExtentSparse") &&
-               strcmp(fmt, "twoGbMaxExtentFlat") &&
-               strcmp(fmt, "streamOptimized")) {
-        error_setg(errp, "Unknown subformat: '%s'", fmt);
-        ret =3D -EINVAL;
-        goto exit;
-    }
-    split =3D !(strcmp(fmt, "twoGbMaxExtentFlat") &&
-              strcmp(fmt, "twoGbMaxExtentSparse"));
-    flat =3D !(strcmp(fmt, "monolithicFlat") &&
-             strcmp(fmt, "twoGbMaxExtentFlat"));
-    compress =3D !strcmp(fmt, "streamOptimized");
+    split =3D (subformat =3D=3D BLOCKDEV_VMDK_SUBFORMAT_TWOGBMAXEXTENTFL=
AT) ||
+            (subformat =3D=3D BLOCKDEV_VMDK_SUBFORMAT_TWOGBMAXEXTENTSPAR=
SE);
+    flat =3D (subformat =3D=3D BLOCKDEV_VMDK_SUBFORMAT_MONOLITHICFLAT) |=
|
+           (subformat =3D=3D BLOCKDEV_VMDK_SUBFORMAT_TWOGBMAXEXTENTFLAT)=
;
+    compress =3D subformat =3D=3D BLOCKDEV_VMDK_SUBFORMAT_STREAMOPTIMIZE=
D;
+
     if (flat) {
-        desc_extent_line =3D "RW %" PRId64 " FLAT \"%s\" 0\n";
+        extent_line_fmt =3D "RW %" PRId64 " FLAT \"%s\" 0\n";
     } else {
-        desc_extent_line =3D "RW %" PRId64 " SPARSE \"%s\"\n";
+        extent_line_fmt =3D "RW %" PRId64 " SPARSE \"%s\"\n";
     }
     if (flat && backing_file) {
         error_setg(errp, "Flat image can't have backing file");
@@ -2058,10 +2045,34 @@ static int coroutine_fn vmdk_co_create_opts(const=
 char *filename, QemuOpts *opts
         ret =3D -ENOTSUP;
         goto exit;
     }
+
+    /* Create extents */
+    if (split) {
+        extent_size =3D split_size;
+    } else {
+        extent_size =3D size;
+    }
+    if (!split && !flat) {
+        created_size =3D extent_size;
+    } else {
+        created_size =3D 0;
+    }
+    /* Get the descriptor file BDS */
+    blk =3D extent_fn(created_size, 0, flat, split, compress, zeroed_gra=
in,
+                    opaque, errp);
+    if (!blk) {
+        ret =3D -EIO;
+        goto exit;
+    }
+    if (!split && !flat) {
+        vmdk_desc_add_extent(ext_desc_lines, extent_line_fmt, created_si=
ze,
+                             blk_bs(blk)->filename);
+    }
+
     if (backing_file) {
-        BlockBackend *blk;
+        BlockBackend *backing;
         char *full_backing =3D g_new0(char, PATH_MAX);
-        bdrv_get_full_backing_filename_from_filename(filename, backing_f=
ile,
+        bdrv_get_full_backing_filename_from_filename(blk_bs(blk)->filena=
me, backing_file,
                                                      full_backing, PATH_=
MAX,
                                                      &local_err);
         if (local_err) {
@@ -2071,106 +2082,211 @@ static int coroutine_fn vmdk_co_create_opts(con=
st char *filename, QemuOpts *opts
             goto exit;
         }
=20
-        blk =3D blk_new_open(full_backing, NULL, NULL,
-                           BDRV_O_NO_BACKING, errp);
+        backing =3D blk_new_open(full_backing, NULL, NULL,
+                               BDRV_O_NO_BACKING, errp);
         g_free(full_backing);
-        if (blk =3D=3D NULL) {
+        if (backing =3D=3D NULL) {
             ret =3D -EIO;
             goto exit;
         }
-        if (strcmp(blk_bs(blk)->drv->format_name, "vmdk")) {
-            blk_unref(blk);
+        if (strcmp(blk_bs(backing)->drv->format_name, "vmdk")) {
+            error_setg(errp, "Invalid backing file format: %s. Must be v=
mdk",
+                       blk_bs(backing)->drv->format_name);
+            blk_unref(backing);
             ret =3D -EINVAL;
             goto exit;
         }
-        ret =3D vmdk_read_cid(blk_bs(blk), 0, &parent_cid);
-        blk_unref(blk);
+        ret =3D vmdk_read_cid(blk_bs(backing), 0, &parent_cid);
+        blk_unref(backing);
         if (ret) {
+            error_setg(errp, "Failed to read parent CID");
             goto exit;
         }
         snprintf(parent_desc_line, BUF_SIZE,
                 "parentFileNameHint=3D\"%s\"", backing_file);
     }
-
-    /* Create extents */
-    filesize =3D total_size;
-    while (filesize > 0) {
-        int64_t size =3D filesize;
-
-        if (split && size > split_size) {
-            size =3D split_size;
-        }
-        if (split) {
-            snprintf(desc_filename, PATH_MAX, "%s-%c%03d%s",
-                    prefix, flat ? 'f' : 's', ++idx, postfix);
-        } else if (flat) {
-            snprintf(desc_filename, PATH_MAX, "%s-flat%s", prefix, postf=
ix);
-        } else {
-            snprintf(desc_filename, PATH_MAX, "%s%s", prefix, postfix);
-        }
-        snprintf(ext_filename, PATH_MAX, "%s%s", path, desc_filename);
-
-        if (vmdk_create_extent(ext_filename, size,
-                               flat, compress, zeroed_grain, NULL, opts,=
 errp)) {
+    extent_idx =3D 1;
+    while (created_size < size) {
+        BlockBackend *extent_blk;
+        int64_t cur_size =3D MIN(size - created_size, extent_size);
+        extent_blk =3D extent_fn(cur_size, extent_idx, flat, split, comp=
ress,
+                               zeroed_grain, opaque, errp);
+        if (!extent_blk) {
             ret =3D -EINVAL;
             goto exit;
         }
-        filesize -=3D size;
-
-        /* Format description line */
-        snprintf(desc_line, BUF_SIZE,
-                    desc_extent_line, size / BDRV_SECTOR_SIZE, desc_file=
name);
-        g_string_append(ext_desc_lines, desc_line);
+        vmdk_desc_add_extent(ext_desc_lines, extent_line_fmt, cur_size,
+                             blk_bs(extent_blk)->filename);
+        created_size +=3D cur_size;
+        extent_idx++;
+        blk_unref(extent_blk);
     }
     /* generate descriptor file */
     desc =3D g_strdup_printf(desc_template,
                            g_random_int(),
                            parent_cid,
-                           fmt,
+                           BlockdevVmdkSubformat_str(subformat),
                            parent_desc_line,
                            ext_desc_lines->str,
                            hw_version,
-                           total_size /
+                           size /
                                (int64_t)(63 * number_heads * BDRV_SECTOR=
_SIZE),
                            number_heads,
-                           adapter_type);
+                           BlockdevVmdkAdapterType_str(adapter_type));
     desc_len =3D strlen(desc);
     /* the descriptor offset =3D 0x200 */
     if (!split && !flat) {
         desc_offset =3D 0x200;
-    } else {
-        ret =3D bdrv_create_file(filename, opts, &local_err);
+    }
+
+    ret =3D blk_pwrite(blk, desc_offset, desc, desc_len, 0);
+    if (ret < 0) {
+        error_setg_errno(errp, -ret, "Could not write description");
+        goto exit;
+    }
+    /* bdrv_pwrite write padding zeros to align to sector, we don't need=
 that
+     * for description file */
+    if (desc_offset =3D=3D 0) {
+        ret =3D blk_truncate(blk, desc_len, PREALLOC_MODE_OFF, errp);
         if (ret < 0) {
-            error_propagate(errp, local_err);
             goto exit;
         }
     }
+    ret =3D 0;
+exit:
+    if (blk) {
+        blk_unref(blk);
+    }
+    g_free(desc);
+    g_free(parent_desc_line);
+    g_string_free(ext_desc_lines, true);
+    return ret;
+}
=20
-    new_blk =3D blk_new_open(filename, NULL, NULL,
-                           BDRV_O_RDWR | BDRV_O_RESIZE | BDRV_O_PROTOCOL=
,
-                           &local_err);
-    if (new_blk =3D=3D NULL) {
-        error_propagate(errp, local_err);
-        ret =3D -EIO;
+typedef struct {
+    char *path;
+    char *prefix;
+    char *postfix;
+    QemuOpts *opts;
+} VMDKCreateOptsData;
+
+static BlockBackend *vmdk_co_create_opts_cb(int64_t size, int idx,
+                                            bool flat, bool split, bool =
compress,
+                                            bool zeroed_grain, void *opa=
que,
+                                            Error **errp)
+{
+    BlockBackend *blk =3D NULL;
+    BlockDriverState *bs =3D NULL;
+    VMDKCreateOptsData *data =3D opaque;
+    char *ext_filename =3D NULL;
+    char *rel_filename =3D NULL;
+
+    if (idx =3D=3D 0) {
+        rel_filename =3D g_strdup_printf("%s%s", data->prefix, data->pos=
tfix);
+    } else if (split) {
+        rel_filename =3D g_strdup_printf("%s-%c%03d%s",
+                                       data->prefix,
+                                       flat ? 'f' : 's', idx, data->post=
fix);
+    } else {
+        assert(idx =3D=3D 1);
+        rel_filename =3D g_strdup_printf("%s-flat%s", data->prefix, data=
->postfix);
+    }
+
+    ext_filename =3D g_strdup_printf("%s%s", data->path, rel_filename);
+    g_free(rel_filename);
+
+    if (vmdk_create_extent(ext_filename, size,
+                           flat, compress, zeroed_grain, &blk, data->opt=
s,
+                           errp)) {
         goto exit;
     }
+    bdrv_unref(bs);
+exit:
+    g_free(ext_filename);
+    return blk;
+}
=20
-    blk_set_allow_write_beyond_eof(new_blk, true);
+static int coroutine_fn vmdk_co_create_opts(const char *filename, QemuOp=
ts *opts,
+                                            Error **errp)
+{
+    Error *local_err =3D NULL;
+    char *desc =3D NULL;
+    int64_t total_size =3D 0;
+    char *adapter_type =3D NULL;
+    BlockdevVmdkAdapterType adapter_type_enum;
+    char *backing_file =3D NULL;
+    char *hw_version =3D NULL;
+    char *fmt =3D NULL;
+    BlockdevVmdkSubformat subformat;
+    int ret =3D 0;
+    char *path =3D g_malloc0(PATH_MAX);
+    char *prefix =3D g_malloc0(PATH_MAX);
+    char *postfix =3D g_malloc0(PATH_MAX);
+    char *desc_line =3D g_malloc0(BUF_SIZE);
+    char *ext_filename =3D g_malloc0(PATH_MAX);
+    char *desc_filename =3D g_malloc0(PATH_MAX);
+    char *parent_desc_line =3D g_malloc0(BUF_SIZE);
+    bool zeroed_grain;
+    bool compat6;
+    VMDKCreateOptsData data;
=20
-    ret =3D blk_pwrite(new_blk, desc_offset, desc, desc_len, 0);
-    if (ret < 0) {
-        error_setg_errno(errp, -ret, "Could not write description");
+    if (filename_decompose(filename, path, prefix, postfix, PATH_MAX, er=
rp)) {
+        ret =3D -EINVAL;
         goto exit;
     }
-    /* bdrv_pwrite write padding zeros to align to sector, we don't need=
 that
-     * for description file */
-    if (desc_offset =3D=3D 0) {
-        ret =3D blk_truncate(new_blk, desc_len, PREALLOC_MODE_OFF, errp)=
;
+    /* Read out options */
+    total_size =3D ROUND_UP(qemu_opt_get_size_del(opts, BLOCK_OPT_SIZE, =
0),
+                          BDRV_SECTOR_SIZE);
+    adapter_type =3D qemu_opt_get_del(opts, BLOCK_OPT_ADAPTER_TYPE);
+    backing_file =3D qemu_opt_get_del(opts, BLOCK_OPT_BACKING_FILE);
+    hw_version =3D qemu_opt_get_del(opts, BLOCK_OPT_HWVERSION);
+    compat6 =3D qemu_opt_get_bool_del(opts, BLOCK_OPT_COMPAT6, false);
+    if (strcmp(hw_version, "undefined") =3D=3D 0) {
+        g_free(hw_version);
+        hw_version =3D g_strdup("4");
     }
-exit:
-    if (new_blk) {
-        blk_unref(new_blk);
+    fmt =3D qemu_opt_get_del(opts, BLOCK_OPT_SUBFMT);
+    zeroed_grain =3D qemu_opt_get_bool_del(opts, BLOCK_OPT_ZEROED_GRAIN,=
 false);
+
+    if (adapter_type) {
+        adapter_type_enum =3D qapi_enum_parse(&BlockdevVmdkAdapterType_l=
ookup,
+                                            adapter_type,
+                                            BLOCKDEV_VMDK_ADAPTER_TYPE_I=
DE,
+                                            &local_err);
+        if (local_err) {
+            error_propagate(errp, local_err);
+            ret =3D -EINVAL;
+            goto exit;
+        }
+    } else {
+        adapter_type_enum =3D BLOCKDEV_VMDK_ADAPTER_TYPE_IDE;
     }
+
+    if (!fmt) {
+        /* Default format to monolithicSparse */
+        subformat =3D BLOCKDEV_VMDK_SUBFORMAT_MONOLITHICSPARSE;
+    } else {
+        subformat =3D qapi_enum_parse(&BlockdevVmdkSubformat_lookup,
+                                    fmt,
+                                    BLOCKDEV_VMDK_SUBFORMAT_MONOLITHICSP=
ARSE,
+                                    &local_err);
+        if (local_err) {
+            error_propagate(errp, local_err);
+            ret =3D -EINVAL;
+            goto exit;
+        }
+    }
+    data =3D (VMDKCreateOptsData){
+        .prefix =3D prefix,
+        .postfix =3D postfix,
+        .path =3D path,
+        .opts =3D opts,
+    };
+    ret =3D vmdk_co_do_create(total_size, subformat, adapter_type_enum,
+                            backing_file, hw_version, compat6, zeroed_gr=
ain,
+                            vmdk_co_create_opts_cb, &data, errp);
+
+exit:
     g_free(adapter_type);
     g_free(backing_file);
     g_free(hw_version);
@@ -2183,7 +2299,84 @@ exit:
     g_free(ext_filename);
     g_free(desc_filename);
     g_free(parent_desc_line);
-    g_string_free(ext_desc_lines, true);
+    return ret;
+}
+
+static BlockBackend *vmdk_co_create_cb(int64_t size, int idx,
+                                       bool flat, bool split, bool compr=
ess,
+                                       bool zeroed_grain, void *opaque,
+                                       Error **errp)
+{
+    int ret;
+    BlockDriverState *bs;
+    BlockBackend *blk;
+    BlockdevCreateOptionsVmdk *opts =3D opaque;
+
+    if (idx =3D=3D 0) {
+        bs =3D bdrv_open_blockdev_ref(opts->file, errp);
+    } else {
+        int i;
+        BlockdevRefList *list =3D opts->extents;
+        for (i =3D 1; i < idx; i++) {
+            if (!list || !list->next) {
+                error_setg(errp, "Extent [%d] not specified", i);
+                return NULL;
+            }
+            list =3D list->next;
+        }
+        if (!list) {
+            error_setg(errp, "Extent [%d] not specified", idx - 1);
+            return NULL;
+        }
+        bs =3D bdrv_open_blockdev_ref(list->value, errp);
+    }
+    if (!bs) {
+        return NULL;
+    }
+    blk =3D blk_new(BLK_PERM_CONSISTENT_READ | BLK_PERM_WRITE | BLK_PERM=
_RESIZE,
+                  BLK_PERM_ALL);
+    if (blk_insert_bs(blk, bs, errp)) {
+        bdrv_unref(bs);
+        return NULL;
+    }
+    blk_set_allow_write_beyond_eof(blk, true);
+    bdrv_unref(bs);
+
+    ret =3D vmdk_init_extent(blk, size, flat, compress, zeroed_grain, er=
rp);
+    if (ret) {
+        blk_unref(blk);
+        blk =3D NULL;
+    }
+    return blk;
+}
+
+static int coroutine_fn vmdk_co_create(BlockdevCreateOptions *create_opt=
ions,
+                                       Error **errp)
+{
+    int ret;
+    BlockdevCreateOptionsVmdk *opts;
+
+    opts =3D &create_options->u.vmdk;
+
+    /* Validate options */
+    if (!QEMU_IS_ALIGNED(opts->size, BDRV_SECTOR_SIZE)) {
+        error_setg(errp, "Image size must be a multiple of 512 bytes");
+        ret =3D -EINVAL;
+        goto out;
+    }
+
+    ret =3D vmdk_co_do_create(opts->size,
+                            opts->subformat,
+                            opts->adapter_type,
+                            opts->backing_file,
+                            opts->hwversion,
+                            false,
+                            opts->zeroed_grain,
+                            vmdk_co_create_cb,
+                            opts, errp);
+    return ret;
+
+out:
     return ret;
 }
=20
@@ -2451,6 +2644,7 @@ static BlockDriver bdrv_vmdk =3D {
     .bdrv_co_pwrite_zeroes        =3D vmdk_co_pwrite_zeroes,
     .bdrv_close                   =3D vmdk_close,
     .bdrv_co_create_opts          =3D vmdk_co_create_opts,
+    .bdrv_co_create               =3D vmdk_co_create,
     .bdrv_co_flush_to_disk        =3D vmdk_co_flush,
     .bdrv_co_block_status         =3D vmdk_co_block_status,
     .bdrv_get_allocated_file_size =3D vmdk_get_allocated_file_size,
--=20
2.19.2


