Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 26 Nov 2018 21:38:08 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id B0131580322
	for <like.xu@linux.intel.com>; Mon, 26 Nov 2018 04:34:47 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga003-1.jf.intel.com with ESMTP; 26 Nov 2018 04:34:47 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AV6gqfhZXYJRVlVezf1dh8/L/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZrsm7bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJWSJPAp2y?=
 =?us-ascii?q?YYgBD+UOIelXsovyqFUToxumBwSiBuzixiJGi3Pqw6I6yP8sEQ7a0AE6Bd8CrG?=
 =?us-ascii?q?7ZoMvzOawPUe611q7IzTDbYv1Txzj99onIchY8qv6MWrJwdcTRwlQoGgPGgFSQ?=
 =?us-ascii?q?rojlPz2O2+QXrWeU8upgWvizi2I9tw5xpT2vy94qh4LUhYwV0kjJ+TtlzIs2P9?=
 =?us-ascii?q?G0VVN3bN2+HJdOuSyXN5F6Tt4gTm1wpio21rkLtYSmcCUE1pgr3QPTZv+JfoSS?=
 =?us-ascii?q?/B7uV+CcKipiin1/YrKwnROy/FCgyuLiUsm0105Hri5EktnXqnANzAbf6seBSv?=
 =?us-ascii?q?tg5Euh3iyP1w/L5uFFJ0A7i7bbJoY/zrIslZcfq1nPEjL1lUnskqObeEUp9vK1?=
 =?us-ascii?q?5+nlernmo4WTN45wigHwKKQuncm/DPwhMgcQWmib5P2w26D98k3nXrpKiuQ6nb?=
 =?us-ascii?q?LesJDHI8QUurC2AxRS3oYn6ha/DCmp3M4XnHkaNF9FfBOHj470O1DBOvz4DPG/?=
 =?us-ascii?q?g0iynzdv3fzJIrrhApDWI3jFl7fhe7l960hByAYpytBf/Z1UBqkbIP3vQk/xqM?=
 =?us-ascii?q?DYDhghPgywwubnC8ty2pkRWGKSGaKZNKLSsVmV5uMgOeWMZYkVuCrjJPgh/fLh?=
 =?us-ascii?q?kXg5mVpONZSvxoYdPXCkAux9cQLeZXv3nsxHF2AMsQwjCuvwhxqHWD9XYn+0GK?=
 =?us-ascii?q?Uk+jA8DpnhFIrGW8WhjaKM2HSGGIZLbDVDA1GIDXC6boiBRrIAZTyfJop7nyUZ?=
 =?us-ascii?q?WKO9Y4km0x6oqUn90bUwNffe+CATqcf+0sNo7fbYjxA4+G9ICJG42nHFdWx1gn?=
 =?us-ascii?q?FAEzos0aFjs2Rnx1uD2LQ+iPtdQ499/fRMByQ3K5/ah9N9D966DgHeedOHYEyr?=
 =?us-ascii?q?TtWvHXc6SddnkIxGWFp0B9j31kOL5CGtGbJA0uXTXJE=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ADAAAE6PtbhxHrdtBjGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUgQBAQEBCwGBMIJPE4xwiyGCDZc8gXMCDQUYFIhjIjUIDQEDAQE?=
 =?us-ascii?q?BAQEBAgETAQEBCgsJCBsOL4I2BQIDGgEGglsBAQEBAgEBAiQfCikDAgEBAgYBA?=
 =?us-ascii?q?QoOCgkdCAMBCwVJEwUWgwYBgXkIAQSlezOKCg+CbYkcF4FAP4IogXuIM4ImAol?=
 =?us-ascii?q?RljEJhj2DbIZ7I4lRhzeYMIFIA4IIMxoIGxWDJ4InFxKOC0AxgQcciXeBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0ADAAAE6PtbhxHrdtBjGgEBAQEBAgEBAQEHAgEBAQGBUgQ?=
 =?us-ascii?q?BAQEBCwGBMIJPE4xwiyGCDZc8gXMCDQUYFIhjIjUIDQEDAQEBAQEBAgETAQEBC?=
 =?us-ascii?q?gsJCBsOL4I2BQIDGgEGglsBAQEBAgEBAiQfCikDAgEBAgYBAQoOCgkdCAMBCwV?=
 =?us-ascii?q?JEwUWgwYBgXkIAQSlezOKCg+CbYkcF4FAP4IogXuIM4ImAolRljEJhj2DbIZ7I?=
 =?us-ascii?q?4lRhzeYMIFIA4IIMxoIGxWDJ4InFxKOC0AxgQcciXeBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,282,1539673200"; 
   d="asc'?scan'208";a="54801086"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 26 Nov 2018 04:34:45 -0800
Received: from localhost ([::1]:35468 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gRG68-000249-KE
	for like.xu@linux.intel.com; Mon, 26 Nov 2018 07:34:44 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:46631)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <kwolf@redhat.com>) id 1gRG5g-000240-Lw
	for qemu-devel@nongnu.org; Mon, 26 Nov 2018 07:34:21 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <kwolf@redhat.com>) id 1gRG5a-0007KF-Qb
	for qemu-devel@nongnu.org; Mon, 26 Nov 2018 07:34:16 -0500
Received: from mx1.redhat.com ([209.132.183.28]:57168)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <kwolf@redhat.com>)
	id 1gRG5T-0007Fn-QC; Mon, 26 Nov 2018 07:34:04 -0500
Received: from smtp.corp.redhat.com (int-mx04.intmail.prod.int.phx2.redhat.com
	[10.5.11.14])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id E506B3001FDF;
	Mon, 26 Nov 2018 12:34:02 +0000 (UTC)
Received: from localhost.localdomain (ovpn-116-140.ams2.redhat.com
	[10.36.116.140])
	by smtp.corp.redhat.com (Postfix) with ESMTPS id DA93B5DD6C;
	Mon, 26 Nov 2018 12:34:00 +0000 (UTC)
Date: Mon, 26 Nov 2018 13:33:59 +0100
From: Kevin Wolf <kwolf@redhat.com>
To: Max Reitz <mreitz@redhat.com>
Message-ID: <20181126123359.GC6612@localhost.localdomain>
References: <20181126112828.23047-1-kwolf@redhat.com>
	<20181126112828.23047-2-kwolf@redhat.com>
	<7b3288b3-f7f8-b6cf-d4b1-b0540205e3df@redhat.com>
MIME-Version: 1.0
Content-Type: multipart/signed; micalg=pgp-sha1;
	protocol="application/pgp-signature"; boundary="+QahgC5+KEYLbs62"
Content-Disposition: inline
In-Reply-To: <7b3288b3-f7f8-b6cf-d4b1-b0540205e3df@redhat.com>
User-Agent: Mutt/1.10.1 (2018-07-13)
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.14
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.45]);
	Mon, 26 Nov 2018 12:34:02 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH for-3.1 1/2] block: Don't inactivate
 children before parents
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: qemu-devel@nongnu.org, qemu-block@nongnu.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>


--+QahgC5+KEYLbs62
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable

Am 26.11.2018 um 13:05 hat Max Reitz geschrieben:
> On 26.11.18 12:28, Kevin Wolf wrote:
> > bdrv_child_cb_inactivate() asserts that parents are already inactive
> > when children get inactivated. This precondition is necessary because
> > parents could still issue requests in their inactivation code.
> >=20
> > When block nodes are created individually with -blockdev, all of them
> > are monitor owned and will be returned by bdrv_next() in an undefined
> > order (in practice, in the order of their creation, which is usually
> > children before parents), which obviously fails the assertion.
> >=20
> > This patch fixes the ordering by skipping nodes with still active
> > parents in bdrv_inactivate_recurse() because we know that they will be
> > covered by recursion when the last active parent becomes inactive.
> >=20
> > Signed-off-by: Kevin Wolf <kwolf@redhat.com>
> > ---
> >  block.c | 22 ++++++++++++++++++++++
> >  1 file changed, 22 insertions(+)
> >=20
> > diff --git a/block.c b/block.c
> > index 5ba3435f8f..0569275e31 100644
> > --- a/block.c
> > +++ b/block.c
> > @@ -4612,6 +4612,22 @@ void bdrv_invalidate_cache_all(Error **errp)
> >      }
> >  }
> > =20
> > +static bool bdrv_has_active_bds_parent(BlockDriverState *bs)
> > +{
> > +    BdrvChild *parent;
> > +
> > +    QLIST_FOREACH(parent, &bs->parents, next_parent) {
> > +        if (parent->role->parent_is_bds) {
> > +            BlockDriverState *parent_bs =3D parent->opaque;
> > +            if (!(parent_bs->open_flags & BDRV_O_INACTIVE)) {
> > +                return true;
> > +            }
> > +        }
> > +    }
>=20
> Now I see why you say this might make sense as a permission.

You do? To be honest, now that I found this solution, I don't think a
permission makes much sense any more, because you would have the same
loop, and you would only be checking a different flag in the end.

> > +
> > +    return false;
> > +}
> > +
> >  static int bdrv_inactivate_recurse(BlockDriverState *bs,
> >                                     bool setting_flag)
> >  {
> > @@ -4622,6 +4638,12 @@ static int bdrv_inactivate_recurse(BlockDriverSt=
ate *bs,
> >          return -ENOMEDIUM;
> >      }
> > =20
> > +    /* Make sure that we don't inactivate a child before its parent.
> > +     * It will be covered by recursion from the yet active parent. */
> > +    if (bdrv_has_active_bds_parent(bs)) {
> > +        return 0;
> > +    }
> > +
>=20
> Hm.  Wouldn't it make more sense to always return early when there are
> any BDS parents?  Because if there are any BDS parents and none of them
> are active (anymore), then this child will have been inactivated
> already, and we can save ourselves the trouble of going through the rest
> of the function again.

I don't quite follow... If we always return early no matter whether
there is an active parent, who will have inactivated the child?

After trying to write up why you're wrong, I think there are two cases
and both of us have a point:

1. bdrv_next() enumerates the child node first and then the last BDS
   parent. This is what this patch fixes.

   It will inactivate the child exactly once, at the time that the last
   parent has become inactive (and recursively calls this function for
   each of its children). If you remove that one inactivation, too,
   children won't be inactivated at all.

2. bdrv_next() enumerates the last BDS parent first and then the child.
   This is unlikely and might even be impossible today, but once we
   expose bdrv_reopen() in QMP and let the user reconfigure the edges,
   it probably becomes possible.

   In this case, even after my patch we inactivate drivers twice. Maybe
   we should just return early if BDRV_O_INACTIVE is already set. What
   makes me kind of unsure is that we already test for this flag, but
   only for part of the function.

   Any ideas how to test this? Can we create such a situation today?

> Do drivers support multiple calls to .bdrv_in_activate() at all?

They were probably not designed for that... Not sure if there was ever a
commit where we used to call them multiple times without failing the
assertion first.

Kevin

--+QahgC5+KEYLbs62
Content-Type: application/pgp-signature; name="signature.asc"

-----BEGIN PGP SIGNATURE-----

iQIcBAEBAgAGBQJb++g3AAoJEH8JsnLIjy/WgYwQALsHGMFK7j8vakxa2CrtwoNq
qFhGpm6qpiXUuUIIraflz0YJIzZ2xGSrgqwpr8bpRbmk6u+x//hyOTobrVCqyJBA
f6io1pD4L/fulwpXby2gWvloPI8m3uzAdQb+HQRZ4SV+46QDNo6gCCBm4/E7Dsns
tIZVBEoVSf7S5824WA0E77732lss+UlLUqL08gG3AGuQ74pFTnayusHckn/bxSI3
C+23iM5wSfvBEn20ynTZuprKuUJ12CpXIHYYxQc0wdj8W8SiP94yNf6w8ZaZ2+fQ
/8FP6ziSX9EgzXxq9DMlRefF08b+CEUxo6g/4HuCzEjBUSsZ8IdtUqw+nHeJP/ud
vWgfWvwUrwP61BjnOASgipnPc/ROKZ2t7of0aVpqV97daJ+SBITuJ6TXWt8YK3D6
imjhoOqKPMSzqHesrMGV2wWUHKhk0E99Vref6+w/50kYrygbvjMPh/P/TN+BjxHb
R78lX1JyW1hKDvau2b9dOERuxc4lpSnu+qbhfj67AsKW6sEHp1p7hPcXG0LlGtY3
sxoCmIY4xOoZ7UsXNAvldr4ruRaeIlJ25ZPGZj81p2ug7Y/EVDf3TdZmHiNl6Tbd
QXM3X4I3aIPaJY09YMrrP6b1qTuAr3GGyC61dlFWAhSrf2MrC67YVC/8fj5ChUTR
rjyGKmQgX4yyd/ko6pNP
=rjMt
-----END PGP SIGNATURE-----

--+QahgC5+KEYLbs62--

