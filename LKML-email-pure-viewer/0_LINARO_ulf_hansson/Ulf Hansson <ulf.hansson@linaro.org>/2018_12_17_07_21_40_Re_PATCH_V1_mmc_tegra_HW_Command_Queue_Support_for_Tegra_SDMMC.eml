Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  17 Dec 2018 16:14:59 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 291A25805E2;
	Sun, 16 Dec 2018 23:22:46 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 16 Dec 2018 23:22:45 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A6iTumR2Ry+HcPbXWsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segTKvzxwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJOUcZfVSNPAo2y?=
 =?us-ascii?q?YYgSAeQfIelYtJH9qlkVoBuiGQWhHv/jxiNUinL026AxzuQvERvB3AwlB98Bvn?=
 =?us-ascii?q?DUrNvoP6kQS++1yrLIzS7Eb/NQxDzw75XIchQvof2WXbJ/a8zRyVI0FwPCiFWd?=
 =?us-ascii?q?sojlPzKT1usXqWib6PBsVeW1i24osgx8pCWkyMkrionMnI0Vy1bE+D19wIY2IN?=
 =?us-ascii?q?24TFR3Ydm+EJtfsSyRKoh4Qts6Tm12pCo3zqcKtYO1cSQU0pgr2h3SZ+Cdf4WJ?=
 =?us-ascii?q?4B/vTPidLSt8iX5/e7+yhwy+/Va9xuD+TMW50VZHoyxYmdfWrH8NzQbc6s2fR/?=
 =?us-ascii?q?t94Eih3TGP2hjN6uFLP080j7DXK50/zb4qkJocr0DDEjXxmEXsg6+abkQk+u62?=
 =?us-ascii?q?5OT7erjquIOQOotuhg3jPKkihNazDfk7PwQSRWSW+Oax2KXm/ULjQbVKivM2kr?=
 =?us-ascii?q?PesJDfPckboq+5AwlI0ocs8hq/DCmp0M4enXYZKFJJYRWHjobvO17QOvD1Fum/?=
 =?us-ascii?q?g1uynzdx3fzGPaPuAo/LLnfdlLftZ7F961RTyAYr19BQ+4pUCq0dIPL0QkLxsN?=
 =?us-ascii?q?3YDhwnPACuzOfnFc5w1ocfWWKJH6+YP7nesV6O5uIzPeaMYJUZtyr6K/gg//Tu?=
 =?us-ascii?q?l2M2mUcBfam12psacHC4Ee5nI0WFe3Xshc0NEWcXvgUkSuzqh0aPUTpSZ3a0Qq?=
 =?us-ascii?q?I96Ss3CIOgDYffWI+thKaN0zu8Hp1TfmpGEEyDEW/0d4WYXPcBcCCSIsh/nTAe?=
 =?us-ascii?q?VrihTIkh1ReptALhz7pnL+zU+jAXtJ751dh14fHTmg829TBuE8ud1GSNRXlunm?=
 =?us-ascii?q?wUXz82wLx/oUtlx1iZyqh4g/tYFd9J6/NTSAg6N4XRz+h7C9D0RwLAcc2FSFeg?=
 =?us-ascii?q?QtW6Hz4xSsg9zMMJY0Z4A9+ilAzM3zK2A78JkLyGHJ80/bja33TrI8Z9ymzJ1K?=
 =?us-ascii?q?8uj1Q9RstPNGumhrNw9gTJBo7JlVmZmLiudagGwCHN82KDx3KUvE5ESA5wTbnF?=
 =?us-ascii?q?XXcHa0TLt9v5+F3NQ6WuCbs9NAtB0tCNKq1NZt3tjlVGQfPjNc/aY2KwnWewGB?=
 =?us-ascii?q?mJyqmNbIrsZ2USwiHdBFIYnAAU+HaMLRI+CTu5o2LCEDxuEkribF72/ulgtny3?=
 =?us-ascii?q?VE80wBuMb016ybW1/AUYhfidS/MVw7IFtz0tqzRyHFahwd3WD8CMqBZmfKVZed?=
 =?us-ascii?q?k9+ktI1XrFtwxhOZytN7xihl8bcwRwo0Pu1xV2Bp9ckcQwq3Mq1g5yKaOe0FNO?=
 =?us-ascii?q?bD6Y2ZHwOrvKKmj95hyvaqjW2k3A39aS4KsA9PM4q1D7tgGzCkUi62ln08VS03?=
 =?us-ascii?q?aE/JrKCBQdUJ3vXUc37RR1vKzabTQn6IPS1n1sNre0vyTG29IoAusl1xmhc81e?=
 =?us-ascii?q?MKOCCA/9DckaC9KyJ+wtnlijdggEM/xK9K4oI8OmcOOL2a62POp6gD2ql2VG4I?=
 =?us-ascii?q?Bn3UKK+CpxUerI35cDw/GF0QqLTTb8jFG9ss/pnYBIfy0dHm26ySL8Ho5eerVy?=
 =?us-ascii?q?fZoXCWepO8C33NR+iIL3VH5C6VGjAEkK2Mm3dhqIblzxxBFf2l4ToXO6hyS41T?=
 =?us-ascii?q?t0kzcyo6qb3SzOxfnidRUdNm5KQmlikUnjIYyug98GW0ioahAjlAG56kbi26hb?=
 =?us-ascii?q?uKN/InHTQEdJZST3L3tuUrCttrqEeMNP7JIosSNKUOWze1yaS7j9owcE3CPnBW?=
 =?us-ascii?q?dR2Dc7dzSysJXjgxN6kH6dLGp0rHfBe8F/3w3f5N/fRf5WxDYGXzN3iTrUBli9?=
 =?us-ascii?q?Odmm49OUmozHsuC/UWKhS5JSfTPqzYOGqCu0+2lqDQejkPC0n93tCRI63jPj19?=
 =?us-ascii?q?l2SSXIqw7xY4nx2KS9K+5nfEhoBFnn5sp+G4F+lJYwhZ4K1XgbgJWV4WQIkWPp?=
 =?us-ascii?q?PdpH3qL+aWIHRSQXzN7N/AjlxEpjI2qKx43jV3WR2MthZ8SgbWMQ1SIw9MRKCK?=
 =?us-ascii?q?aS7LxZkip5uFu4rQTNYfdjmjcR0+ch6Hkfg+sRogoi0j2dAqwOHUlfJSHskhWI?=
 =?us-ascii?q?79Oko6lNamegb6Ow1FZgktC7F76NvBtcWHnid5cmHC9w6Nh/MV3W3H3y7IHkZM?=
 =?us-ascii?q?ffbdYJuhKIlBfAivBfKIgtmfoSmSpnJWX9sGU5y+48iBxix5C7s5KBK2Vw56K5?=
 =?us-ascii?q?GR9YOybxZ8MS/DHtkKlfktyX34CpApVuBDELUIH0QvKvFTIYre7nOBqWED0gtn?=
 =?us-ascii?q?ebHqLSEhSF50dhq3LPDoqnN3WKJHQCydViRR+dJFFQgQwOXTU6mII5GR6uxMD7?=
 =?us-ascii?q?bEh54TUR7EbiqhRQ0uJoKwX/UmDHqQeqcDg0TYaQLAFM4gFe/UvVMtGe7uFuHy?=
 =?us-ascii?q?Fe5JKhtxeAKmiaZwROEGEIVVaIB1HlPrmy+9bA9/KUCfa5L/vLeb+Os/BRV++U?=
 =?us-ascii?q?xZKz1Ytr5zaNNsKSPnl7Ev00wExDUWpiG8TenTUPRDcalybMb86duRe99Td7rs?=
 =?us-ascii?q?G58PT3Rg3v4ZGDBKdVMdVq4xq2m7uMN/aMhCZlLjZVzpMMymHJyLgc314Sijti?=
 =?us-ascii?q?dzq3EbQHui7CUrjQmrJMDxMAbyNzNc1I778z3wVXOM7bjM/12aB8jvIvF1hFUl?=
 =?us-ascii?q?nhkNmzZcMWO2G9KE/HBEGTObucOD3E2Nv3br28SLFKiOVUtga9uTKaE0/lIzSC?=
 =?us-ascii?q?mCPlVxGpMeFQki6bOAZSt526chZoEWLjVs7pagWnMN9rij072aE0hnLPNWIGLT?=
 =?us-ascii?q?dwaV9Crr2O4iNemfh/H21B7nx4LeiLgSqZ7u/YKooIvvtvGCh7i+Va4HEiwbtP?=
 =?us-ascii?q?8C5EXOB1mDfVrtN2o1CpiO+Pyj9mUBpIsjlKhYKLsl9kOaXW7ZRAXXfE/BQQ7W?=
 =?us-ascii?q?SfERgKpt1lCsHxtKBU0NTAiKXzKDIRu+7TqPAbGMrdLtOOeFkmNBP1GTjZCgpN?=
 =?us-ascii?q?GSWoMmTWm01bnfeT3nuLr5Q7o97nn59YGZFBU1lgK/cUQmRsGscZJ5E/Ci4gn/?=
 =?us-ascii?q?ibhcgT/n24hB3QQsxAudbATP3EUqanEyqQkbQRP0hA+rj/N4lGc9Sjg0E=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AYAACKThdch0O0hNFkHgEGBwaBUQkLA?=
 =?us-ascii?q?YJpgQIng3yUDoINFJdEgXMsBwwBh1EiNAkNAQMBAQEBAQECARMBAQEKCwkIKSM?=
 =?us-ascii?q?MgjYkAYJhAQEBAQIBAQIgBBkBATcBBQkBAQoLAwoCAiYCAgMfEgEFARwGCgkFg?=
 =?us-ascii?q?x0BgXgIBQqbejyKIHB8M4J2AQEFgTABhWcDBRJ5izOBVz+DdS6DBRkBhGqCV4l?=
 =?us-ascii?q?1gUOVYwcCgiQEhGWKTRiBXYUcilmNQxlWiyMwgSWCDk0wdAaCNR+BfAwXiF6FQ?=
 =?us-ascii?q?D4zgQUBAY1vAQE?=
X-IPAS-Result: =?us-ascii?q?A0AYAACKThdch0O0hNFkHgEGBwaBUQkLAYJpgQIng3yUDoI?=
 =?us-ascii?q?NFJdEgXMsBwwBh1EiNAkNAQMBAQEBAQECARMBAQEKCwkIKSMMgjYkAYJhAQEBA?=
 =?us-ascii?q?QIBAQIgBBkBATcBBQkBAQoLAwoCAiYCAgMfEgEFARwGCgkFgx0BgXgIBQqbejy?=
 =?us-ascii?q?KIHB8M4J2AQEFgTABhWcDBRJ5izOBVz+DdS6DBRkBhGqCV4l1gUOVYwcCgiQEh?=
 =?us-ascii?q?GWKTRiBXYUcilmNQxlWiyMwgSWCDk0wdAaCNR+BfAwXiF6FQD4zgQUBAY1vAQE?=
X-IronPort-AV: E=Sophos;i="5.56,364,1539673200"; 
   d="scan'208";a="56621723"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 16 Dec 2018 23:22:24 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1731445AbeLQHWV (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 17 Dec 2018 02:22:21 -0500
Received: from mail-vs1-f65.google.com ([209.85.217.65]:38792 "EHLO
        mail-vs1-f65.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1731372AbeLQHWU (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 17 Dec 2018 02:22:20 -0500
Received: by mail-vs1-f65.google.com with SMTP id x64so7098575vsa.5
        for <linux-kernel@vger.kernel.org>; Sun, 16 Dec 2018 23:22:19 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=hZw47SEGF4Gi++4s16HWfIRjbOkalduCKULhSiQ9q4E=;
        b=Vq+1Dl9KB1HyJRpWPBzxnqRxyoXuvvPqdVZ2JNSC/qiUtWAmHaVHWHp10ePVaGvGXY
         JrkBu/glQl9l23csPkRFuLmiOgR1b6ka8JO4IDcRx+QYRXxQbImvyv/g+4vnGgGadLFp
         a5XK22R+zbKH4X1fqpJzvfU/J4DBmeMpDJtR4=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=hZw47SEGF4Gi++4s16HWfIRjbOkalduCKULhSiQ9q4E=;
        b=bbah7dC4WtG1lAATsm+vknLVLwj48uzMGqa8sBlQfgON1uvkle1C8vcXFSM2szoPYU
         cznaR+kRxzsBqZFWnav5lNFxYr0hVAQbzqMQnB2QwlUFd7c9bRrtkqeYh5DYwDjtumrp
         l4myM6hrKeqtOokhnzmyEyq5za6xEYJXSboeLRFlXDKmMfRqbLLDHWQTDJRR2PA225oK
         eOL1l09lTRYHgPFFUuQps2OcPiVcegVRafgsm4gsCI6ivJhaJu/ZqE7hPXTDPi+iyPIM
         gMAP7+SAop11xxuJ73LVi0jAq1tj0IV9uRyaFeqhNVz8KGyHz9Qtv27kIeIa6qiqlqGC
         rjYg==
X-Gm-Message-State: AA+aEWbOd22EQhYmJ47ChyCntH5IoUN4EysAv5/3H9vGFZaG6tWGdgGb
        RikmFlL9iUlB8GwzbC6+8WL8/5yI3zIU0jdy2PpkDg==
X-Google-Smtp-Source: AFSGD/UN/litMxFsd9QZujJ4bSKW40F+uGSlizRbMtXhDjaBp2mMWdybvrjHIsVlGgeZs2dpcBNUF4F3pZaq92RqKoo=
X-Received: by 2002:a67:d00f:: with SMTP id r15mr5746387vsi.191.1545031338555;
 Sun, 16 Dec 2018 23:22:18 -0800 (PST)
MIME-Version: 1.0
References: <1544833340-5024-1-git-send-email-skomatineni@nvidia.com>
In-Reply-To: <1544833340-5024-1-git-send-email-skomatineni@nvidia.com>
From: Ulf Hansson <ulf.hansson@linaro.org>
Date: Mon, 17 Dec 2018 08:21:40 +0100
Message-ID: <CAPDyKFrsuRY5+EvPeGmAvi-qkLFD4nFoa=Tdq-m+iNcF7dB4Bw@mail.gmail.com>
Subject: Re: [PATCH V1] mmc: tegra: HW Command Queue Support for Tegra SDMMC
To: Sowjanya Komatineni <skomatineni@nvidia.com>
Cc: Adrian Hunter <adrian.hunter@intel.com>,
        "linux-mmc@vger.kernel.org" <linux-mmc@vger.kernel.org>,
        Thierry Reding <thierry.reding@gmail.com>,
        Jon Hunter <jonathanh@nvidia.com>, linux-tegra@vger.kernel.org,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Sat, 15 Dec 2018 at 01:22, Sowjanya Komatineni
<skomatineni@nvidia.com> wrote:
>
> This patch adds HW Command Queue for supported Tegra SDMMC
> controllers.
>
> Tegra SDHCI with Quirk SDHCI_QUIRK2_BROKEN_64_BIT_DMA disables the
> use of 64_BIT DMA to disable 64-bit addressing mode access to the
> system memory and sdhci_cqe_enable using flag SDHCI_USE_64_BIT_DMA
> for ADMA32/ADMA2 Vs ADMA64/ADMA3 DMA selection.
>
> CQE need to use ADMA3 as it need to fetch task descriptor along
> with transfer descriptor, so this patch forces DMA Select to be
> ADMA3 for CQE.
>
> Note that this patch depends on below patches
> [0] DMA Config prior to CQE
>     https://lkml.org/lkml/2018/12/14/1062
> [1] SDMMC address range
>     https://lkml.org/lkml/2018/12/14/1323
> [2] Fix sdhci_do_enable_v4_mode
>     https://lkml.org/lkml/2018/12/14/72

Can you please collect these into a series and while re-posting make
sure to also have a cover letter.

This makes 0-day builds build to pick up the decency, but also helps
when reviewing.

Kind regards
Uffe

>
> Signed-off-by: Sowjanya Komatineni <skomatineni@nvidia.com>
> ---
>  drivers/mmc/host/sdhci-tegra.c | 76 +++++++++++++++++++++++++++++++++++++++++-
>  drivers/mmc/host/sdhci.c       | 18 +++++++++-
>  drivers/mmc/host/sdhci.h       |  1 +
>  3 files changed, 93 insertions(+), 2 deletions(-)
>
> diff --git a/drivers/mmc/host/sdhci-tegra.c b/drivers/mmc/host/sdhci-tegra.c
> index 7b95d088fdef..eaebe5e22183 100644
> --- a/drivers/mmc/host/sdhci-tegra.c
> +++ b/drivers/mmc/host/sdhci-tegra.c
> @@ -33,6 +33,7 @@
>  #include <linux/ktime.h>
>
>  #include "sdhci-pltfm.h"
> +#include "cqhci.h"
>
>  /* Tegra SDHOST controller vendor register definitions */
>  #define SDHCI_TEGRA_VENDOR_CLOCK_CTRL                  0x100
> @@ -89,6 +90,10 @@
>  #define NVQUIRK_NEEDS_PAD_CONTROL                      BIT(7)
>  #define NVQUIRK_DIS_CARD_CLK_CONFIG_TAP                        BIT(8)
>
> +/* SDMMC CQE Base Address for Tegra Host Ver 4.1 and Higher */
> +#define SDHCI_TEGRA_CQE_BASE_ADDR                      0xF000
> +
> +
>  struct sdhci_tegra_soc_data {
>         const struct sdhci_pltfm_data *pdata;
>         u32 nvquirks;
> @@ -128,6 +133,7 @@ struct sdhci_tegra {
>         u32 default_tap;
>         u32 default_trim;
>         u32 dqs_trim;
> +       bool enable_hwcq;
>  };
>
>  static u16 tegra_sdhci_readw(struct sdhci_host *host, int reg)
> @@ -836,6 +842,17 @@ static void tegra_sdhci_voltage_switch(struct sdhci_host *host)
>                 tegra_host->pad_calib_required = true;
>  }
>
> +static void sdhci_tegra_dumpregs(struct mmc_host *mmc)
> +{
> +       sdhci_dumpregs(mmc_priv(mmc));
> +}
> +
> +static const struct cqhci_host_ops sdhci_tegra_cqhci_ops = {
> +       .enable = sdhci_cqe_enable,
> +       .disable = sdhci_cqe_disable,
> +       .dumpregs = sdhci_tegra_dumpregs,
> +};
> +
>  static const struct sdhci_ops tegra_sdhci_ops = {
>         .get_ro     = tegra_sdhci_get_ro,
>         .read_w     = tegra_sdhci_readw,
> @@ -989,6 +1006,7 @@ static const struct sdhci_ops tegra186_sdhci_ops = {
>         .set_uhs_signaling = tegra_sdhci_set_uhs_signaling,
>         .voltage_switch = tegra_sdhci_voltage_switch,
>         .get_max_clock = tegra_sdhci_get_max_clock,
> +       .irq = sdhci_cqhci_irq,
>  };
>
>  static const struct sdhci_pltfm_data sdhci_tegra186_pdata = {
> @@ -1030,6 +1048,55 @@ static const struct of_device_id sdhci_tegra_dt_match[] = {
>  };
>  MODULE_DEVICE_TABLE(of, sdhci_tegra_dt_match);
>
> +static int sdhci_tegra_add_host(struct sdhci_host *host)
> +{
> +       struct sdhci_pltfm_host *pltfm_host = sdhci_priv(host);
> +       struct sdhci_tegra *tegra_host = sdhci_pltfm_priv(pltfm_host);
> +       struct cqhci_host *cq_host;
> +       bool dma64;
> +       int ret;
> +
> +       if (!tegra_host->enable_hwcq)
> +               return sdhci_add_host(host);
> +
> +       host->v4_mode = true;
> +
> +       ret = sdhci_setup_host(host);
> +       if (ret)
> +               return ret;
> +
> +       host->mmc->caps2 |= MMC_CAP2_CQE | MMC_CAP2_CQE_DCMD;
> +
> +       cq_host = devm_kzalloc(host->mmc->parent,
> +                               sizeof(*cq_host), GFP_KERNEL);
> +       if (!cq_host) {
> +               ret = -ENOMEM;
> +               goto cleanup;
> +       }
> +
> +       cq_host->mmio = host->ioaddr + SDHCI_TEGRA_CQE_BASE_ADDR;
> +       cq_host->ops = &sdhci_tegra_cqhci_ops;
> +
> +       dma64 = host->flags & SDHCI_USE_64_BIT_DMA;
> +       if (dma64)
> +               cq_host->caps |= CQHCI_TASK_DESC_SZ_128;
> +
> +       ret = cqhci_init(cq_host, host->mmc, dma64);
> +       if (ret)
> +               goto cleanup;
> +
> +       ret = __sdhci_add_host(host);
> +       if (ret)
> +               goto cleanup;
> +
> +       return 0;
> +
> +cleanup:
> +       sdhci_cleanup_host(host);
> +       return ret;
> +
> +}
> +
>  static int sdhci_tegra_probe(struct platform_device *pdev)
>  {
>         const struct of_device_id *match;
> @@ -1039,6 +1106,7 @@ static int sdhci_tegra_probe(struct platform_device *pdev)
>         struct sdhci_tegra *tegra_host;
>         struct clk *clk;
>         int rc;
> +       struct resource *iomem;
>
>         match = of_match_device(sdhci_tegra_dt_match, &pdev->dev);
>         if (!match)
> @@ -1056,6 +1124,12 @@ static int sdhci_tegra_probe(struct platform_device *pdev)
>         tegra_host->pad_control_available = false;
>         tegra_host->soc_data = soc_data;
>
> +       iomem = platform_get_resource(pdev, IORESOURCE_MEM, 0);
> +       if (resource_size(iomem) > SDHCI_TEGRA_CQE_BASE_ADDR)
> +               tegra_host->enable_hwcq = true;
> +       else
> +               tegra_host->enable_hwcq = false;
> +
>         if (soc_data->nvquirks & NVQUIRK_NEEDS_PAD_CONTROL) {
>                 rc = tegra_sdhci_init_pinctrl_info(&pdev->dev, tegra_host);
>                 if (rc == 0)
> @@ -1117,7 +1191,7 @@ static int sdhci_tegra_probe(struct platform_device *pdev)
>
>         usleep_range(2000, 4000);
>
> -       rc = sdhci_add_host(host);
> +       rc = sdhci_tegra_add_host(host);
>         if (rc)
>                 goto err_add_host;
>
> diff --git a/drivers/mmc/host/sdhci.c b/drivers/mmc/host/sdhci.c
> index 99bdae53fa2e..8c03c7a3dab2 100644
> --- a/drivers/mmc/host/sdhci.c
> +++ b/drivers/mmc/host/sdhci.c
> @@ -36,6 +36,7 @@
>  #include <linux/mmc/slot-gpio.h>
>
>  #include "sdhci.h"
> +#include "cqhci.h"
>
>  #define DRIVER_NAME "sdhci"
>
> @@ -3308,7 +3309,8 @@ void sdhci_cqe_enable(struct mmc_host *mmc)
>
>         ctrl = sdhci_readb(host, SDHCI_HOST_CONTROL);
>         ctrl &= ~SDHCI_CTRL_DMA_MASK;
> -       if (host->flags & SDHCI_USE_64_BIT_DMA)
> +       if ((host->flags & SDHCI_USE_64_BIT_DMA) ||
> +                       (host->quirks2 & SDHCI_QUIRK2_BROKEN_64_BIT_DMA))
>                 ctrl |= SDHCI_CTRL_ADMA64;
>         else
>                 ctrl |= SDHCI_CTRL_ADMA32;
> @@ -3361,6 +3363,20 @@ void sdhci_cqe_disable(struct mmc_host *mmc, bool recovery)
>  }
>  EXPORT_SYMBOL_GPL(sdhci_cqe_disable);
>
> +u32 sdhci_cqhci_irq(struct sdhci_host *host, u32 intmask)
> +{
> +       int cmd_error = 0;
> +       int data_error = 0;
> +
> +       if (!sdhci_cqe_irq(host, intmask, &cmd_error, &data_error))
> +               return intmask;
> +
> +       cqhci_irq(host->mmc, intmask, cmd_error, data_error);
> +
> +       return 0;
> +}
> +EXPORT_SYMBOL_GPL(sdhci_cqhci_irq);
> +
>  bool sdhci_cqe_irq(struct sdhci_host *host, u32 intmask, int *cmd_error,
>                    int *data_error)
>  {
> diff --git a/drivers/mmc/host/sdhci.h b/drivers/mmc/host/sdhci.h
> index b001cf4d3d7e..9ff7a138270e 100644
> --- a/drivers/mmc/host/sdhci.h
> +++ b/drivers/mmc/host/sdhci.h
> @@ -777,6 +777,7 @@ void sdhci_cqe_enable(struct mmc_host *mmc);
>  void sdhci_cqe_disable(struct mmc_host *mmc, bool recovery);
>  bool sdhci_cqe_irq(struct sdhci_host *host, u32 intmask, int *cmd_error,
>                    int *data_error);
> +u32 sdhci_cqhci_irq(struct sdhci_host *host, u32 intmask);
>
>  void sdhci_dumpregs(struct sdhci_host *host);
>  void sdhci_enable_v4_mode(struct sdhci_host *host);
> --
> 2.7.4
>
