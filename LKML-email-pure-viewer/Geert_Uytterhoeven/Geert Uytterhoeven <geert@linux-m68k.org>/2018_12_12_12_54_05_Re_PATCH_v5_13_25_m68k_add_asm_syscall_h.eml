Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 08:49:52 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 3538F58079D;
	Wed, 12 Dec 2018 04:57:26 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by fmsmga002-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 12 Dec 2018 04:57:25 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AJDDwSBNP8AKZhLJ+eHgl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KPj8pMbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRsleVyJDDY28?=
 =?us-ascii?q?YYUBDPcPM/hEoInmv1sDrwCzBRWwCO711jNEmmP60K883u88EQ/GxgsgH9cWvX?=
 =?us-ascii?q?rVstr6Kr0SUfyox6bGzTTDc+9W1inn6IjIdRAuv++MUqx2ccHMzkQvGB3KgUuK?=
 =?us-ascii?q?qYz5JD6V0uUNs26G7+tvTO6vjm8qpgJyojS1wccskIbJi5sTx1vZ9it52J44Kc?=
 =?us-ascii?q?OkREN/e9KoDZVduz+AO4drQc4uX3tktSc4x7Eep5K3YCwHxI4kyhPfcfCLbZaE?=
 =?us-ascii?q?7gz5WOuQIjp1gm9udqiliBao60egz/XxVsmq31ZOqSpIisfMtn8T2BzJ8MSHSe?=
 =?us-ascii?q?Vy/l2n2TmR0wDf8OZEIVo7labDKp4hxKA/loYLvEjdAiP7nF/6gLKYe0k64OSk?=
 =?us-ascii?q?9ufqbqn8qpKdNYJ4kgT+Pb4vmsy7D+Q4KA8OX22D9OS41b3j+1D5QbpTgv01jK?=
 =?us-ascii?q?bZqpbaKtofpqKgBA9U3IAj5AilDzq9ztQYkmcILEhfdBKEkYfpIVfOL+78Dful?=
 =?us-ascii?q?hFSsijhry+jcPrL9GpXNMmTDkLD5cLZ56k5cyxQ8wcpQ5pJJEbwBJPPzWknstN?=
 =?us-ascii?q?3XFBM5Mgq0w/r5B9V5zI8RRWWPAqqBOqPIrVCI/v4vI/WLZIINuDbyMfkl5+L0?=
 =?us-ascii?q?gn8+g1MdfbSp0oERaHC3BflmJ0SZYXzxgtYOC2sKvww+TPD0h12GSzJce3GyX6?=
 =?us-ascii?q?ck7DEhFI2mFZvDRpyqgLGZ3ie7GYNZanpFClCLF3focYKEVuwIaCKTJM9hjzMF?=
 =?us-ascii?q?WaKgS48nyRGhqgv6x6B7IerT/y0SrYjj28Rt5+3PiREy8iR5AN6G02GNSGF0nX?=
 =?us-ascii?q?kERyUs06B9ukF9zlaD0a5lg/1XD9BT5vVJUhskOp7Y1eB1F9fyWgfZdNeTVFmm?=
 =?us-ascii?q?WsmmAS02Tt8pwN8BeUB9F8+mjhDCxSWqBbAVmqePBJw19KLcwnfwK9x8y3bAyK?=
 =?us-ascii?q?kukV0mTtFTOm2hg6517xLTCJLRk0WFi6aqcrwR0zPX+2ed02WCpkFYXxR2UaXe?=
 =?us-ascii?q?Q38fYEzardD65kPHS7+jErAnMgpHyc6fJapGcNzpjVNaRPj9PNTSeX6+m2C1BR?=
 =?us-ascii?q?yQ3LODcJLqe3kB3CXaEEULjhoc/WiYOgQkBieuuWTeDCdwGlLpeE7s9eh+qHWm?=
 =?us-ascii?q?Tk471Q2Kbkth16ar9R4Rn/CTV/QT3rccsic7tzp0BEq9387RC9eYuwphfaBcYd?=
 =?us-ascii?q?Qh4FdH1WPVrRB9MoanL6B4gl4ecgJ3v0z12hVzC4VAl9UqrXwwwApzL6KYzE1O?=
 =?us-ascii?q?dzeC0Z/sPb3XL3H4/AqzZK7OxlHezNGW978V5/Q8tVrisx+mF0o4/3p8ztlazm?=
 =?us-ascii?q?GT5pPJDAoVT5L8SUI39xl8p7HHbSgx/YLU1XtwMaaqtj/Owc4mBOwgyhy4ZddQ?=
 =?us-ascii?q?LLuEFBPuE80dH8WvKPEql0K1YR4ePeFS9LQ7P8Wpd/ad3K6rPeBgnC+pjGhd4Y?=
 =?us-ascii?q?B91F6M+DR4SuLSw5kFxPSY1BOdVzjglFehrtz3mYdcaDEIH2qw1TLrBJRMaa11?=
 =?us-ascii?q?Z4oLD3mhI9e2xtlnm5HiQXpY+0O9CFMc38+pfwGfb1j83Q1WyEQWrmarmSq+zz?=
 =?us-ascii?q?xojT4pqrCT0zDJw+TnbBAHIHJERHF+jVfwJoi5l9AbXEmyYwkpjhel/lv6x65A?=
 =?us-ascii?q?qaR7LmnTR1pIfifsI2FjVKuwqqSNY8pV5Jw0tiVXVfy2YUqGRb7lvxsazyTjEn?=
 =?us-ascii?q?NcxD8hbTGquZb5nxtghGKGNnlzr3nZecB2xRjB4tzRXvpR3jsARCllhjjbHFm8?=
 =?us-ascii?q?P9+1/dqKk5fPqPyxV2WkVpdLaynk0ZuAtDen5W1tGRC+n+q8mtr9HQg40C/70c?=
 =?us-ascii?q?JnVSHJrBb6f4nq2L62MeNhfkl0GlD879B2FZ15kos1nJsQw2QVho2J/Xoblmf+?=
 =?us-ascii?q?KdZb1rj/bHYXRT4L3sTa4A7q2EB4KnKJxoT5VmiSw8d7Ztm6ZH8W1Tw578xQFK?=
 =?us-ascii?q?iU67lElzNvolWktQLRfeR9njAFxPsr6X4agPsGtBAjzyqDGbASAVdXPTb3mBuW?=
 =?us-ascii?q?9dC+o75aZGKucbi2yUp/ksqtDLCEogFARnn5fo0uEjN37sV6KFjMymH86pn4eN?=
 =?us-ascii?q?nMatIergGUkxDFj+RPKZM+jPwKhTd8OWLmvH0o0Oo7jR1o3ZGns4mLMWRt/KSl?=
 =?us-ascii?q?AhFGMj35fd8c+jbojaxGhMaZw5ivHol9GjUMRJbnVuinEDUWtfT6LQqOFCA8p2?=
 =?us-ascii?q?yfGbreGw+f9Uhno2jOE5CtK3GYOn0Zwc9+SxmaIUxVmBoUUykinp4lCgCqw9Ts?=
 =?us-ascii?q?cEVj6TAU+FH4sQFAyv5yOxn8T2ffpxqoajEuR5iENxdW6gBC50HIMc2R9O5zHi?=
 =?us-ascii?q?dY/oG/owyJMGCUewNIDWQRUEyeG1/jJqWu5cXH8+WABuu+KObOYayTqeNEUfeE?=
 =?us-ascii?q?34mv0oxg/zaDLciPOnhiD/sm2ktMR3x5GsLZmykRRCwTjS7Cc8mbpBKk8C1tss?=
 =?us-ascii?q?+/6OjrWB7o5YaXC7tdL9Rv+xO1gaeCLeKQhzx5KTFX1pwS33/I1aMf0UUWiyFv?=
 =?us-ascii?q?cTmtDLsBuTTMTKLWhq9YERobZzlvO8tP6qI2xhNNNtLDitPpyr54ieY4BE1YVV?=
 =?us-ascii?q?P6gMGme8wLL3u5NFPGH0uLMLWGJTvWw8D4e6+8SLtQjPlKuB20ozqUD0jjPjGb?=
 =?us-ascii?q?nTnzSx+vKf1MjD2cPBFGpIG9cxNtBXL/Q978dhK7MMF4jTstzL0wh3PKM3McMD?=
 =?us-ascii?q?dmf0NMqL2Q8T1XgvFlF2Nd6XplKPGOmzyF4OnANpYWrfxrDzx0lu1A5nQ6zrpV?=
 =?us-ascii?q?7CdcS/10mCvdtNhuo169n+mLyzpnVgdOqzlRiIKKu0ViJbvW9p1aVXnY+xIN6D?=
 =?us-ascii?q?bYNxNf7fdgC8H1quhujJDrmbzyLn0Kp9bY4+MVA9TQKcSaIDwmKxW/SxDOCw5Q?=
 =?us-ascii?q?YjOmL32Xul1BjPyI9nqYsJU84szjlZcUVpdfVVooBrYfVBRmWtsYL8EkDXsfjb?=
 =?us-ascii?q?eHgZtQtjKFpx7LSZAf58ifWw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAABlBBFch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBg2sng3uIGYwSgg0Ulz+BcywTAYc9IjQJDQEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BCA0JCCkvgjYkAYJhAQEBAQIBAQIgVgUBCQEBCgsHBgICJgICAx8GDAEFAQ4OB?=
 =?us-ascii?q?hMFgxyBeggFmhY8iw2BL4owEnmLMReBf4QjiAWCVwKJOYF3lVwIAYIniCOCbYQ?=
 =?us-ascii?q?gGGB8hRqKUJkwMIElgg59CGwGgjWCJxeOHj4zgQUBAYx8AQE?=
X-IPAS-Result: =?us-ascii?q?A0ANAABlBBFch0O0hNFjHAEBAQQBAQcEAQGBUQcBAQsBg2s?=
 =?us-ascii?q?ng3uIGYwSgg0Ulz+BcywTAYc9IjQJDQEDAQEBAQEBAgETAQEBCA0JCCkvgjYkA?=
 =?us-ascii?q?YJhAQEBAQIBAQIgVgUBCQEBCgsHBgICJgICAx8GDAEFAQ4OBhMFgxyBeggFmhY?=
 =?us-ascii?q?8iw2BL4owEnmLMReBf4QjiAWCVwKJOYF3lVwIAYIniCOCbYQgGGB8hRqKUJkwM?=
 =?us-ascii?q?IElgg59CGwGgjWCJxeOHj4zgQUBAYx8AQE?=
X-IronPort-AV: E=Sophos;i="5.56,344,1539673200"; 
   d="scan'208";a="56580406"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 12 Dec 2018 04:57:24 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727491AbeLLMyU (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 12 Dec 2018 07:54:20 -0500
Received: from mail-ua1-f68.google.com ([209.85.222.68]:35005 "EHLO
        mail-ua1-f68.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727091AbeLLMyU (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 12 Dec 2018 07:54:20 -0500
Received: by mail-ua1-f68.google.com with SMTP id d2so6404329ual.2
        for <linux-kernel@vger.kernel.org>; Wed, 12 Dec 2018 04:54:19 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=xcTVrjv4NgMGmIe+Etq9yHJ+s3Tcd7QoaVhD9x40lp4=;
        b=dqdWJGA2ZSK1Cbe9+feoL9d7v5x5HtDLWDohUH30UxOusfBJ8cL92wORXzw+iWChAe
         n9t3pZyTBERXug4urRq9uSZji0k7Fhlh6cta5lED3CvRobNGp70hDbQn17+WKbnLQ/75
         +PZAT/+dGO2uGd3/BcNBOqy6RSAP8/f5SRqvuVWuzVANOV/oYBX0oKE4uwPGx3VNBjJz
         OKGgEfWqMzM3+3sY96Y1CmfM6BYHgydrue3I/gled6r9yJg0IPmq2wAngce/8RY47FRM
         +1K95XIlliy6/I7ImkE3+lnlwcFi+FlwrRrdd0RSwryeKaxc2PZLq5fVnvK9+e+dLA1b
         ZG8Q==
X-Gm-Message-State: AA+aEWbKbd5u0RpkH0KvmHIFxcEcyl02EA8ydQKB+TWXeng8AHWwM7T1
        pGkTa6tYdg5t9ATTxnLBUoPUbE2QilLjwdPniLQ=
X-Google-Smtp-Source: AFSGD/X7rkL4vk3K5qMwqDKd8/7mUKXEiPSO8SJ5erSQmq1lvn4CSIqddUyFilsTA2RqAA6IH8OfW6Ebo+080f/D1ts=
X-Received: by 2002:ab0:7251:: with SMTP id d17mr9799281uap.0.1544619258682;
 Wed, 12 Dec 2018 04:54:18 -0800 (PST)
MIME-Version: 1.0
References: <CAMuHMdVYq_2P=gb_zbSGFkPWASTds6uSPTyyhyNAgp2Qm5+feQ@mail.gmail.com>
 <20181210124059.GA11942@altlinux.org> <CAMuHMdW8ejp4gm2Xh-8inSQngQ5zRQ9bfsg1SG+BAD8RFV8xcA@mail.gmail.com>
 <20181210133025.GG11942@altlinux.org> <20181212085516.GA13288@altlinux.org>
 <CAMuHMdXwX57AZuVPdcEt_HZw1LT7tFpczJsqjW6C0VgHkhJ7dw@mail.gmail.com>
 <20181212092712.GD13288@altlinux.org> <CAMuHMdVvw3_3rm3v8J8u6ic6Wy3o70mOP1qaWQ=Ltf1XU=nnVQ@mail.gmail.com>
 <20181212120417.GC15561@altlinux.org> <CAMuHMdXqJeH0C8FHy=G=ycArdkvjYPy48+3LmACnyS9RuqV30g@mail.gmail.com>
 <20181212123730.GA16479@altlinux.org>
In-Reply-To: <20181212123730.GA16479@altlinux.org>
From: Geert Uytterhoeven <geert@linux-m68k.org>
Date: Wed, 12 Dec 2018 13:54:05 +0100
Message-ID: <CAMuHMdVJGpLYJp7CfvOYOmboRjFauWh1joqk=-kpLw212Oj7aA@mail.gmail.com>
Subject: Re: [PATCH v5 13/25] m68k: add asm/syscall.h
To: "Dmitry V. Levin" <ldv@altlinux.org>
Cc: Oleg Nesterov <oleg@redhat.com>, Andy Lutomirski <luto@kernel.org>,
        lineprinter@altlinux.org, Eugene Syromiatnikov <esyr@redhat.com>,
        linux-m68k <linux-m68k@lists.linux-m68k.org>,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi Dmitry,

On Wed, Dec 12, 2018 at 1:37 PM Dmitry V. Levin <ldv@altlinux.org> wrote:
> On Wed, Dec 12, 2018 at 01:27:14PM +0100, Geert Uytterhoeven wrote:
> > On Wed, Dec 12, 2018 at 1:04 PM Dmitry V. Levin <ldv@altlinux.org> wrote:
> > > On Wed, Dec 12, 2018 at 10:43:33AM +0100, Geert Uytterhoeven wrote:
> > > > On Wed, Dec 12, 2018 at 10:27 AM Dmitry V. Levin <ldv@altlinux.org> wrote:
> > > > > On Wed, Dec 12, 2018 at 10:01:29AM +0100, Geert Uytterhoeven wrote:
> > > > > > On Wed, Dec 12, 2018 at 9:55 AM Dmitry V. Levin <ldv@altlinux.org> wrote:
> > > > > > > On Mon, Dec 10, 2018 at 04:30:25PM +0300, Dmitry V. Levin wrote:
> > > > > > > > On Mon, Dec 10, 2018 at 02:06:28PM +0100, Geert Uytterhoeven wrote:
> > > > > > > > > On Mon, Dec 10, 2018 at 1:41 PM Dmitry V. Levin <ldv@altlinux.org> wrote:
> > > > > > > > > > On Mon, Dec 10, 2018 at 09:45:42AM +0100, Geert Uytterhoeven wrote:
> > > > > > > > > > > On Mon, Dec 10, 2018 at 5:30 AM Dmitry V. Levin <ldv@altlinux.org> wrote:
> > > > > > > > > > > > syscall_get_* functions are required to be implemented on all
> > > > > > > > > > > > architectures in order to extend the generic ptrace API with
> > > > > > > > > > > > PTRACE_GET_SYSCALL_INFO request.
> > > > > > > > > > > >
> > > > > > > > > > > > This introduces asm/syscall.h on m68k implementing all 5 syscall_get_*
> > > > > > > > > > > > functions as documented in asm-generic/syscall.h: syscall_get_nr,
> > > > > > > > > > > > syscall_get_arguments, syscall_get_error, syscall_get_return_value,
> > > > > > > > > > > > and syscall_get_arch.
> > > > > > > > > > > >
> > > > > > > > > > > > Cc: Geert Uytterhoeven <geert@linux-m68k.org>
> > > > > > > > > > > > Cc: Oleg Nesterov <oleg@redhat.com>
> > > > > > > > > > > > Cc: Andy Lutomirski <luto@kernel.org>
> > > > > > > > > > > > Cc: Elvira Khabirova <lineprinter@altlinux.org>
> > > > > > > > > > > > Cc: Eugene Syromyatnikov <esyr@redhat.com>
> > > > > > > > > > > > Cc: linux-m68k@lists.linux-m68k.org
> > > > > > > > > > > > Signed-off-by: Dmitry V. Levin <ldv@altlinux.org>
> > > > > > > > > > > > ---
> > > > > > > > > > > >
> > > > > > > > > > > > Notes:
> > > > > > > > > > > >     v5: added syscall_get_nr, syscall_get_arguments, syscall_get_error,
> > > > > > > > > > > >         and syscall_get_return_value
> > > > > > > > > > > >     v1: added syscall_get_arch
> > > > > > > > > > >
> > > > > > > > > > > > --- /dev/null
> > > > > > > > > > > > +++ b/arch/m68k/include/asm/syscall.h
> > > > > > > > > > > > @@ -0,0 +1,39 @@
> > > > > > > > > > >
> > > > > > > > > > > > +static inline void
> > > > > > > > > > > > +syscall_get_arguments(struct task_struct *task, struct pt_regs *regs,
> > > > > > > > > > > > +                     unsigned int i, unsigned int n, unsigned long *args)
> > > > > > > > > > > > +{
> > > > > > > > > > > > +       BUG_ON(i + n > 6);
> > > > > > > > > > >
> > > > > > > > > > > Does this have to crash the kernel?
> > > > > > > > > >
> > > > > > > > > > This is what most of other architectures do, but we could choose
> > > > > > > > > > a softer approach, e.g. use WARN_ON_ONCE instead.
> > > > > > > > > >
> > > > > > > > > > > Perhaps you can return an error code instead?
> > > > > > > > > >
> > > > > > > > > > That would be problematic given the signature of this function
> > > > > > > > > > and the nature of the potential bug which would most likely be a usage error.
> > > > > > > > >
> > > > > > > > > Of course to handle that, the function's signature need to be changed.
> > > > > > > > > Changing it has the advantage that the error handling can be done at the
> > > > > > > > > caller, in common code, instead of duplicating it for all
> > > > > > > > > architectures, possibly
> > > > > > > > > leading to different semantics.
> > > > > > > >
> > > > > > > > Given that *all* current users of syscall_get_arguments specify i == 0
> > > > > > > > (and there is an architecture that has BUG_ON(i)),
> > > > > > > > it should be really a usage error to get into situation where i + n > 6,
> > > > > > > > I wish a BUILD_BUG_ON could be used here instead.
> > > > > > > >
> > > > > > > > I don't think it worths pushing the change of API just to convert
> > > > > > > > a "cannot happen" assertion into an error that would have to be dealt with
> > > > > > > > on the caller side.
> > > > > > >
> > > > > > > I suggest the following BUG_ON replacement for syscall_get_arguments:
> > > > > > >
> > > > > > > #define SYSCALL_MAX_ARGS 6
> > > > > > >
> > > > > > > static inline void
> > > > > > > syscall_get_arguments(struct task_struct *task, struct pt_regs *regs,
> > > > > > >                       unsigned int i, unsigned int n, unsigned long *args)
> > > > > > > {
> > > > > > >         /*
> > > > > > >          * Ideally there should have been
> > > > > > >          * BUILD_BUG_ON(i + n > SYSCALL_MAX_ARGS);
> > > > > > >          * instead of these checks.
> > > > > > >          */
> > > > > > >         if (unlikely(i > SYSCALL_MAX_ARGS)) {
> > > > > > >                 WARN_ONCE(1, "i > SYSCALL_MAX_ARGS");
> > > > > > >                 return;
> > > > > >
> > > > > > Does this have security implications, as args is an output parameter?
> > > > > > I.e. if you don't fill the array, the caller will use whatever is on the stack.
> > > > > > Can this ever be passed to userspace, leaking data?
> > > > >
> > > > > In the current kernel code n is always less or equal to 6,
> > > > > but in theory future changes can potentially break the assertion
> > > > > and this could lead to leaking data to userspace.
> > > >
> > > > OK.
> > > >
> > > > > Do you think we should rather be defensive and add some memsets, e.g.
> > > > >
> > > > >         if (unlikely(i > SYSCALL_MAX_ARGS)) {
> > > > >                 WARN_ONCE(1, "i > SYSCALL_MAX_ARGS");
> > > > >                 memset(args, 0, n * sizeof(args[0]));
> > > > >                 return;
> > > > >         }
> > > > >         if (unlikely(n > SYSCALL_MAX_ARGS - i)) {
> > > > >                 unsigned int extra = n - (SYSCALL_MAX_ARGS - i);
> > > > >
> > > > >                 WARN_ONCE(1, "i + n > SYSCALL_MAX_ARGS");
> > > > >                 n = SYSCALL_MAX_ARGS - i;
> > > > >                 memset(&args[n], 0, extra * sizeof(args[0]));
> > > > >         }
> > > > > ?
> > > >
> > > > Yes please.
> > > >
> > > > But please handle all of that in the generic code, so it doesn't have to be
> > > > replicated across all architectures.
> > > >
> > > > E.g. make syscall_get_arguments() a wrapper in generic code, calling
> > > > __syscall_get_arguments() in architecture-specific code.
> > > >
> > > > And make the latter return int, so it can indicate other failures.
> > >
> > > Other failures?  What syscall_get_arguments is expected to do
> > > if __syscall_get_arguments returned, say, -1?
> >
> > Fail. Just like in case of other generic ill conditions it can detect itself.
>
> Sorry, I don't quite follow.  syscall_get_arguments() has no return code,

Which may be an indicator for a different problem.
What is e.g. populate_seccomp_data() supposed to do if
syscall_get_arguments() fails?

> so all it can possibly do is to zero out args[], e.g.
>
>         if (unlikely(__syscall_get_arguments(task, regs, i, n, args) < 0)) {
>                 memset(args, 0, n * sizeof(args[0]));
>                 return;
>         }
>
> Do you mean this?

Exactly.
And alternatively do the BUG() thing there.

Gr{oetje,eeting}s,

                        Geert

-- 
Geert Uytterhoeven -- There's lots of Linux beyond ia32 -- geert@linux-m68k.org

In personal conversations with technical people, I call myself a hacker. But
when I'm talking to journalists I just say "programmer" or something like that.
                                -- Linus Torvalds
