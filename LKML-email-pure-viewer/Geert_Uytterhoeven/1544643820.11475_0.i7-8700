Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  12 Dec 2018 19:43:40 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 3DF0358079D;
	Wed, 12 Dec 2018 01:43:53 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga006-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 12 Dec 2018 01:43:52 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3APXshyBZW9KE+BsUbD7Gi2KD/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpci9YR7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyNOAo2+?=
 =?us-ascii?q?YIUPAeQPPvtWoZfhqFsVtRuzBxKhBP/zxjJSmnP6wbE23uYnHArb3AIgBdUOsH?=
 =?us-ascii?q?HModv0KqgdT/q1zLXVxjrNb/JWxSv955bSchAhpvGDQ6xwftTXyUIyEA7FgUuf?=
 =?us-ascii?q?ppL/PzOJzekNt2mb7+x9VeOgkmInrgB8rzusxss2jYnJnI0Vx0nC+C5kw4g1Pc?=
 =?us-ascii?q?W1RFBnbdOgCpdcqi+XO5VsTs8/QGxkpDw2x7wEtJKjYiQG1JAqywTcZvGHaYSE?=
 =?us-ascii?q?/AzvWPuLLTtlgH9oeLSyjAuo/0e60O3zTMy03U5KriVbltnMsWgA1wLc6seZUP?=
 =?us-ascii?q?tx5ESh1iiV1wDV9O5EJVo4la3BK54u2rIwl5wTvlrfHiLuhkn6kKubel859uWm?=
 =?us-ascii?q?9ejreKjqq5yAO4NuiwzzMLwimsmlDuQ5NggOUXKb+eO51LD7+U35QbNKjuA5k6?=
 =?us-ascii?q?XAs5DVO94bpqinDA9Ry4oj7Bi+DzG439QChnQHMl1Fdwydj4TzOFHBPur4DfGh?=
 =?us-ascii?q?jFSoijtrwOrGPrL5DpXXMnfDiKvhfap660NEzAozzNNf6IxOBrAOPfL+QUvxtN?=
 =?us-ascii?q?3eDh8kPA242efnCNNh1owAXWKDGLOWMKTXsVWQ/OIgP/GMZJMJuDb6M/Ul5+Th?=
 =?us-ascii?q?jX4lmVAHeqmlx5sXaG2iEfRgLEWUen7sgtYHEWcXsQsyVu3qiFueUTFNY3a+Rb?=
 =?us-ascii?q?4z5jY+CIi+F4fMWpitgKCd3Ce8BpBWZGdGBU6WHXfrcIWEXfEMaCWJL89lkzwE?=
 =?us-ascii?q?U6WhSoA72RGvsg/616RoLu7O9iIEspLj0cB/5/fPmhEq6Tx0E8Od3nmXQGFvnm?=
 =?us-ascii?q?MIQDw20LploUNnyFeOyqx4g/1eFdxO6PJFSAY6NZjAz+NkD9D+QB7OftCMSFy+?=
 =?us-ascii?q?WNWpHSkxTs4tw98Je0t9GM+tjhbZ0yquAr8ajbqLBJMv/6LY3njxIdt9ynnc2K?=
 =?us-ascii?q?kgiVkmXtVANWm8iqFj8AjTApbDk1+FmKayaaQcwCnN+X+ewmWUokFXThR8UaXf?=
 =?us-ascii?q?UnAZfUvZs9L56kTGT7+tDLQnNhBMycqDKqtMd93ogk9KRPblONTCfW2xn328Cg?=
 =?us-ascii?q?qPxrOJdIDqYXkS3D3BCEgYlAAe5WuJOhIgBii/uW7eDCZhFVT0Y0zy9+lzs3e7?=
 =?us-ascii?q?Tk4yzwGXYExtzbu1+hgJhfOCT/MfxK4LuCAkqz9sBlayw8rWC8acpwpmZKhcfd?=
 =?us-ascii?q?I94FJA1WLFtwx8PoasL7x4il4ZaQR3u0Lu1xN4CohblcgqrXUqzBd9KK6C0VNB?=
 =?us-ascii?q?cS+Y0o70OrHNNmby+xWvYbbM2l7CyNaW5rsP6PMgplr5uAGmCEUj/Gtn0tVPyH?=
 =?us-ascii?q?Sc+4jFAxAUUZLyVUY36QN3p7XbYik7+oPV2mdgMaiysj/exd0pAPEpxQqnf9da?=
 =?us-ascii?q?KKmEDhP9E9UGB8iyL+wng1iobg8eMO9O7qI1PsOmeOGA2K6kJ+tgmDOmjWJa4I?=
 =?us-ascii?q?FyyE6M9ix8SvLW0JYB2f2XwgyHVzLkhle7rs/3gZxEZS0VHmen0yjkBZJeabdo?=
 =?us-ascii?q?fYkWDmeiOcu3yctkh57sQnJX6ESsB1cb18C3YxqSaFr90BZU1UQWp3ynhCS5wy?=
 =?us-ascii?q?Z1kzEvsqqQwijOz/7+exoAP25BXHNigkv0IYiok9AaW1ClbggolBe/5Uf23bNb?=
 =?us-ascii?q?pLl5L2TIRUdIfi72L3xtU6eqt7qCZdJP540ssSlNTOu8ZlWaQKbnoxQGyyPjA3?=
 =?us-ascii?q?dexDcjejGooJr5hR96iGGaLHppt3rWY8JwxRTe5NzaW/FR2CELRC15iTnRG1i9?=
 =?us-ascii?q?MMOl/dSSl5ffrO++U3itWYFUcSnu1YmArje05XV2AR2jmPC+gt3mHhI90SPh1d?=
 =?us-ascii?q?lqVCPIoQ34Yonq0aS6LO1mclNpBF/698p1BIV+npEsi5EX3HgQno+V8mYfkWfv?=
 =?us-ascii?q?LdVb3rrzbHkXSj4K2dLV4BXl11dlLnKG3I/5UnSdws18Z9i1eG8W2yQ979xUB6?=
 =?us-ascii?q?eQ9rBLgSx1ol+gpwLLffd9hisdyecp6HMChuEJuQktwT+HDrEcA0ZYJjDsmAqS?=
 =?us-ascii?q?79+lsqpXfmmvfKO01Ep/m9ChEb6DrhtdWHb/ZpctAytw4t9jP1LL1X358pvkd8?=
 =?us-ascii?q?XIbdIPqh2UlA/Nj/RSKJI0jPYLhDBoOWTgvX0+0O47jAdj3ZW7vIiBNmVs87i1?=
 =?us-ascii?q?Ah9eNj3pecwT/ivhgrpZnsaTx4qvBIluGi0XXJv0SvKlCCkduu7gNwaKDT0wsH?=
 =?us-ascii?q?ObGafEEA+b6UdmqW/PEp+xO3GWInkZ0cttRB2HKENDhwAUWS0wnoQlGQCy2Mzh?=
 =?us-ascii?q?bEB56ygT5lHirxtD1PloOwPjUmvFpweodzQ0SIWZLBVM9QFP/EPVMc2Y7uJuEC?=
 =?us-ascii?q?BU5JyhrAqRKmOFYwREF30GWkuBB1r7JLmh+cHA8/SEBuq5N/bPYbKOqfFHV/eV?=
 =?us-ascii?q?352v1JFq/y2LNsWJMXlvFPk72ktFXXBkFMXVgTQPSyoLly3Ta86Xvguz+ipyrs?=
 =?us-ascii?q?qn6vTkRBrv5ZeTC7tVKdhv+w65gaaAN+6ThSZ1MzVY1okLxX/H1rcfxkMSizp1?=
 =?us-ascii?q?ejmpELQAszPNTa3Klq9WCR4bdz18NM9S460g2QlNPNbRisnp2b5gkv41F1BFWE?=
 =?us-ascii?q?T7lcG0fsMKOX+yNVPdCEaPNbSLPjnLw8DxYaOhRrxcluRUtxusuTmFF0/vJCiM?=
 =?us-ascii?q?lz7sVxq3K+FDkDmbPABCuIG6ahttFWnjTNf8ZhKnKtN4kT02zqMyhn7RMW4cMD?=
 =?us-ascii?q?58c15Cr7GK7CNYhOl/FHJF7nZ/MeaEnCOZ5fHCKpkKqftrHjh0l+VC7XU60bRV?=
 =?us-ascii?q?6iRERP1zmCTKr99uo0upku+Ayjd8VBpOqzBLhJ+EvEl4OKXZ8IVAVmjA/B4X8W?=
 =?us-ascii?q?qQDBEK9JNZDYill6VR1sLe3Jy1YBNP7dPSt4NIA8TKAMuDLH4gNwf5XjnOA11W?=
 =?us-ascii?q?YySsMDTwikFHjLmv52GJo4I6rZXylZxGHrBWWUYpPvcbDFl1WdlccJQxWSkrx+?=
 =?us-ascii?q?3IxPUU7Gaz+UGCDP5RuYrKA7fLWa3i?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAADL1xBch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBg2sng3uIGYwSgg0Ulz+BcywTAYc6IjQJDQEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BCA0JCCkvgjYkAYJhAQEBAQIBAQIgVgUBCQEBCgsHBgICJgICAx8GDAEFAQ4OB?=
 =?us-ascii?q?hMFgxyBeggFmhE8iw2BL4owEnmLMReBf4QjiAWCVwKJOYF1ik6LCwgBgiaIIoJ?=
 =?us-ascii?q?thCAYYHyFGopOmSowgSWCDn0IbAaCNYInF44ePjOBBQEBjScBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ANAADL1xBch0O0hNFjHAEBAQQBAQcEAQGBUQcBAQsBg2s?=
 =?us-ascii?q?ng3uIGYwSgg0Ulz+BcywTAYc6IjQJDQEDAQEBAQEBAgETAQEBCA0JCCkvgjYkA?=
 =?us-ascii?q?YJhAQEBAQIBAQIgVgUBCQEBCgsHBgICJgICAx8GDAEFAQ4OBhMFgxyBeggFmhE?=
 =?us-ascii?q?8iw2BL4owEnmLMReBf4QjiAWCVwKJOYF1ik6LCwgBgiaIIoJthCAYYHyFGopOm?=
 =?us-ascii?q?SowgSWCDn0IbAaCNYInF44ePjOBBQEBjScBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,343,1539673200"; 
   d="scan'208";a="66448736"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 12 Dec 2018 01:43:51 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726902AbeLLJns (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 12 Dec 2018 04:43:48 -0500
Received: from mail-vk1-f195.google.com ([209.85.221.195]:45647 "EHLO
        mail-vk1-f195.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726646AbeLLJns (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 12 Dec 2018 04:43:48 -0500
Received: by mail-vk1-f195.google.com with SMTP id n126so4060737vke.12
        for <linux-kernel@vger.kernel.org>; Wed, 12 Dec 2018 01:43:47 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=bdLHCAfRE+sBCvf6vaPC8sAhl9WaqSS5fAni2sVkOYM=;
        b=frSES10eEKr/GXu7xLmiVd5vI4+dEtHEZiOW2VRQSBl/+xVgHkpcyg/rOGz4jJAEHC
         TTvT97nG/6/NeNC6xm9Uv4rNJT+FVD8uRVIT6Z9yRAYDJfosHt62txGt6WjhpbkTIhtW
         UwKMmghqhaonX3cImzRlBAeGwKKPulYH6rrInFzgflQBToDUGenvDdPD1YWkUugIJnhI
         iUE8dQnMd20eUrxitcqjPojE8P2XvEgumuXeI1KVagXYYAM1yjVQijBUsIKCl3UT/HHq
         bYjQ05CM2kzZJpWwMHFnmEppzafTn6frazwPe2yPD3GoijXrgBPHBTCxGJ+JxjexqSac
         HNjA==
X-Gm-Message-State: AA+aEWbSzCCPR9gf80XR9T0SwdoklU74rFHzkWxaI+X3q2Ds4c0+a/hs
        pINUUaDKXm3BCFRT0g9kK4rM30UWteDPUrv37xk=
X-Google-Smtp-Source: AFSGD/X8BaH7lXw0EhQHt2TQ4veBmGn3fNAEg7Wq9M4Sirq6zDOMYnwn3SZ0mAiGZpR4Yzd11X7B4D3JuNfTajMJ5a4=
X-Received: by 2002:a1f:91cb:: with SMTP id t194mr8930719vkd.74.1544607826192;
 Wed, 12 Dec 2018 01:43:46 -0800 (PST)
MIME-Version: 1.0
References: <20181210042352.GA6092@altlinux.org> <20181210043010.GM6131@altlinux.org>
 <CAMuHMdVYq_2P=gb_zbSGFkPWASTds6uSPTyyhyNAgp2Qm5+feQ@mail.gmail.com>
 <20181210124059.GA11942@altlinux.org> <CAMuHMdW8ejp4gm2Xh-8inSQngQ5zRQ9bfsg1SG+BAD8RFV8xcA@mail.gmail.com>
 <20181210133025.GG11942@altlinux.org> <20181212085516.GA13288@altlinux.org>
 <CAMuHMdXwX57AZuVPdcEt_HZw1LT7tFpczJsqjW6C0VgHkhJ7dw@mail.gmail.com> <20181212092712.GD13288@altlinux.org>
In-Reply-To: <20181212092712.GD13288@altlinux.org>
From: Geert Uytterhoeven <geert@linux-m68k.org>
Date: Wed, 12 Dec 2018 10:43:33 +0100
Message-ID: <CAMuHMdVvw3_3rm3v8J8u6ic6Wy3o70mOP1qaWQ=Ltf1XU=nnVQ@mail.gmail.com>
Subject: Re: [PATCH v5 13/25] m68k: add asm/syscall.h
To: "Dmitry V. Levin" <ldv@altlinux.org>
Cc: Oleg Nesterov <oleg@redhat.com>, Andy Lutomirski <luto@kernel.org>,
        lineprinter@altlinux.org, Eugene Syromiatnikov <esyr@redhat.com>,
        linux-m68k <linux-m68k@lists.linux-m68k.org>,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi Dmitry,

On Wed, Dec 12, 2018 at 10:27 AM Dmitry V. Levin <ldv@altlinux.org> wrote:
> On Wed, Dec 12, 2018 at 10:01:29AM +0100, Geert Uytterhoeven wrote:
> > On Wed, Dec 12, 2018 at 9:55 AM Dmitry V. Levin <ldv@altlinux.org> wrote:
> > > On Mon, Dec 10, 2018 at 04:30:25PM +0300, Dmitry V. Levin wrote:
> > > > On Mon, Dec 10, 2018 at 02:06:28PM +0100, Geert Uytterhoeven wrote:
> > > > > On Mon, Dec 10, 2018 at 1:41 PM Dmitry V. Levin <ldv@altlinux.org> wrote:
> > > > > > On Mon, Dec 10, 2018 at 09:45:42AM +0100, Geert Uytterhoeven wrote:
> > > > > > > On Mon, Dec 10, 2018 at 5:30 AM Dmitry V. Levin <ldv@altlinux.org> wrote:
> > > > > > > > syscall_get_* functions are required to be implemented on all
> > > > > > > > architectures in order to extend the generic ptrace API with
> > > > > > > > PTRACE_GET_SYSCALL_INFO request.
> > > > > > > >
> > > > > > > > This introduces asm/syscall.h on m68k implementing all 5 syscall_get_*
> > > > > > > > functions as documented in asm-generic/syscall.h: syscall_get_nr,
> > > > > > > > syscall_get_arguments, syscall_get_error, syscall_get_return_value,
> > > > > > > > and syscall_get_arch.
> > > > > > > >
> > > > > > > > Cc: Geert Uytterhoeven <geert@linux-m68k.org>
> > > > > > > > Cc: Oleg Nesterov <oleg@redhat.com>
> > > > > > > > Cc: Andy Lutomirski <luto@kernel.org>
> > > > > > > > Cc: Elvira Khabirova <lineprinter@altlinux.org>
> > > > > > > > Cc: Eugene Syromyatnikov <esyr@redhat.com>
> > > > > > > > Cc: linux-m68k@lists.linux-m68k.org
> > > > > > > > Signed-off-by: Dmitry V. Levin <ldv@altlinux.org>
> > > > > > > > ---
> > > > > > > >
> > > > > > > > Notes:
> > > > > > > >     v5: added syscall_get_nr, syscall_get_arguments, syscall_get_error,
> > > > > > > >         and syscall_get_return_value
> > > > > > > >     v1: added syscall_get_arch
> > > > > > >
> > > > > > > > --- /dev/null
> > > > > > > > +++ b/arch/m68k/include/asm/syscall.h
> > > > > > > > @@ -0,0 +1,39 @@
> > > > > > >
> > > > > > > > +static inline void
> > > > > > > > +syscall_get_arguments(struct task_struct *task, struct pt_regs *regs,
> > > > > > > > +                     unsigned int i, unsigned int n, unsigned long *args)
> > > > > > > > +{
> > > > > > > > +       BUG_ON(i + n > 6);
> > > > > > >
> > > > > > > Does this have to crash the kernel?
> > > > > >
> > > > > > This is what most of other architectures do, but we could choose
> > > > > > a softer approach, e.g. use WARN_ON_ONCE instead.
> > > > > >
> > > > > > > Perhaps you can return an error code instead?
> > > > > >
> > > > > > That would be problematic given the signature of this function
> > > > > > and the nature of the potential bug which would most likely be a usage error.
> > > > >
> > > > > Of course to handle that, the function's signature need to be changed.
> > > > > Changing it has the advantage that the error handling can be done at the
> > > > > caller, in common code, instead of duplicating it for all
> > > > > architectures, possibly
> > > > > leading to different semantics.
> > > >
> > > > Given that *all* current users of syscall_get_arguments specify i == 0
> > > > (and there is an architecture that has BUG_ON(i)),
> > > > it should be really a usage error to get into situation where i + n > 6,
> > > > I wish a BUILD_BUG_ON could be used here instead.
> > > >
> > > > I don't think it worths pushing the change of API just to convert
> > > > a "cannot happen" assertion into an error that would have to be dealt with
> > > > on the caller side.
> > >
> > > I suggest the following BUG_ON replacement for syscall_get_arguments:
> > >
> > > #define SYSCALL_MAX_ARGS 6
> > >
> > > static inline void
> > > syscall_get_arguments(struct task_struct *task, struct pt_regs *regs,
> > >                       unsigned int i, unsigned int n, unsigned long *args)
> > > {
> > >         /*
> > >          * Ideally there should have been
> > >          * BUILD_BUG_ON(i + n > SYSCALL_MAX_ARGS);
> > >          * instead of these checks.
> > >          */
> > >         if (unlikely(i > SYSCALL_MAX_ARGS)) {
> > >                 WARN_ONCE(1, "i > SYSCALL_MAX_ARGS");
> > >                 return;
> >
> > Does this have security implications, as args is an output parameter?
> > I.e. if you don't fill the array, the caller will use whatever is on the stack.
> > Can this ever be passed to userspace, leaking data?
>
> In the current kernel code n is always less or equal to 6,
> but in theory future changes can potentially break the assertion
> and this could lead to leaking data to userspace.

OK.

> Do you think we should rather be defensive and add some memsets, e.g.
>
>         if (unlikely(i > SYSCALL_MAX_ARGS)) {
>                 WARN_ONCE(1, "i > SYSCALL_MAX_ARGS");
>                 memset(args, 0, n * sizeof(args[0]));
>                 return;
>         }
>         if (unlikely(n > SYSCALL_MAX_ARGS - i)) {
>                 unsigned int extra = n - (SYSCALL_MAX_ARGS - i);
>
>                 WARN_ONCE(1, "i + n > SYSCALL_MAX_ARGS");
>                 n = SYSCALL_MAX_ARGS - i;
>                 memset(&args[n], 0, extra * sizeof(args[0]));
>         }
> ?

Yes please.

But please handle all of that in the generic code, so it doesn't have to be
replicated across all architectures.

E.g. make syscall_get_arguments() a wrapper in generic code, calling
__syscall_get_arguments() in architecture-specific code.

And make the latter return int, so it can indicate other failures.

Gr{oetje,eeting}s,

                        Geert

-- 
Geert Uytterhoeven -- There's lots of Linux beyond ia32 -- geert@linux-m68k.org

In personal conversations with technical people, I call myself a hacker. But
when I'm talking to journalists I just say "programmer" or something like that.
                                -- Linus Torvalds
