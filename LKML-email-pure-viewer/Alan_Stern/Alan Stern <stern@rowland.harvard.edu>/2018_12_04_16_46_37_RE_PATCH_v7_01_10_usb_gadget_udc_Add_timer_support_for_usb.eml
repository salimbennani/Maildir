Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 05 Dec 2018 08:41:40 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id C26E658014B;
	Tue,  4 Dec 2018 08:46:54 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga007-1.jf.intel.com with ESMTP; 04 Dec 2018 08:46:54 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AJFtMEhOdS+ZgQ+rryg0l6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KPn7r8bcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRshfWSxfDI2h?=
 =?us-ascii?q?bYQBDOUOMvpDr4nlpVYDtge+CRW2Ce/z1jNEmmH60Ksn2OohCwHG2wkgEsoSvX?=
 =?us-ascii?q?TQttr1MroZX/2pzKbW1zXDae5d1DDm6IjUbB8hu/eMUKlqccrWx0gvExnKjlON?=
 =?us-ascii?q?poD/PzOazP4Ns3aB4Op6SO2jkXAopBxsojW2wMonl4fHhoUQyl/e9CV5xp44Jd?=
 =?us-ascii?q?6mR05hZ96rDp9QuzudN4tsTcMvRXxjtiUiyrAep5K3YCwHxI46yxPRdfCLaZWE?=
 =?us-ascii?q?7xH/WOqLIDp1hmppdK+7ihqs60Ss1+PxWtSu3FpXsiZJjMPAu3AC2hHV98OJUO?=
 =?us-ascii?q?Fy/l271jaKzw3T6v9LIUQzlafDNZ4hzaA/loAJvUTAACD2gkP2g7GSdkk+/eio?=
 =?us-ascii?q?8evnbq3npp+aKYB0lhnzProylsG7G+g0LwYDU3aB9eih17Dv4Vf1TbRIg/Eul6?=
 =?us-ascii?q?nWqpHaJcAVpq6jBA9V154u6xK+DzegzdQZkmALLFFbdxKdiYjmJVXOLOn/Dfax?=
 =?us-ascii?q?hVSjji1ryuvYPr3uHJrNNGLPkLT/crZn7U5T1g4zwcpY55JOBbENOOjzVVPptN?=
 =?us-ascii?q?zEEh85NBS5w+LmCNV+yIwSQ22OArKCPaPWsF+I4P8vIuaWaI8Uvjb9N+Yq5/r0?=
 =?us-ascii?q?gXAlnl8deLGj3YELZ3CgAvRmP0KZbGLsgtgbEGcKohAxTOvwhF2CTD5cfXCyX6?=
 =?us-ascii?q?0n6zE/CYKmC5rDR4+3jLyA2ie7AoNZZmRcBl+QFnfocp2OW+0QZyKKPs9hjjsE?=
 =?us-ascii?q?WKCjS48myx6irgz6y71hLurS/S0Vrpbj1Nlz5+3OmhA+7z10D8KB026TS2F4hH?=
 =?us-ascii?q?8HRzgz3Kpnu0xy1k+D0bRkg/xfDdFc/ehJUgc9NZ7f1eB6Ecr9WgDac9eNSVam?=
 =?us-ascii?q?RMimAD4rQtIwxd8Of1hyG9G4gh/f2CqqBqcfl6aXC5ws7qLcw3/xKt5+y3nc0q?=
 =?us-ascii?q?ktlV0mQspVOm2gia5y7AzTB4/Pk0WEmKemb6Uc3CjR9GidyWqCpl1XUAl1Ua/d?=
 =?us-ascii?q?R3AQelPWrcjl5kPFV7KhFK4oMhVfxsKYKqtFcNvpjU5YS/flP9jeZ2Gxm2K0BR?=
 =?us-ascii?q?uTwrOMbYzqe3gS3SnHCUgElRwT8miCNQQkGiihpGfeBiR0FV3ze0Ps7fV+qHSj?=
 =?us-ascii?q?Q0Ap1Q6KcVNu26C1+hEPg/ycUO0c3rQftSclqjV0Gku93t3MB9qBoQphYLtTYd?=
 =?us-ascii?q?cn7Fhb0mLZshR3Poa8IKB6ml4ebwN3slvy1xV2D4VAltQqrHMqzQZoNaKUylRB?=
 =?us-ascii?q?dymc3ZDxPL3XJXL//BSua67Qx1Hf38ya+qYJ6PQktVrjuBulGVYl83Viy9NVyW?=
 =?us-ascii?q?eT5o3WDAoOVpL8Slw49xxkqLDVfCY855nY2mZxMaapqDDC3dEpBOw7yhu7e9df?=
 =?us-ascii?q?MaWEFBL9EsEABsiuLvAqlEatbh4eIO9S86s0Ndu8d/SawK6rIPpgnDW+gGVH/Y?=
 =?us-ascii?q?BxyF6D+zB9S+7IxZkFxf6Y0xCDVzf9ilehr8/2lZpFZTEUAmqw1yzkCJRNaa11?=
 =?us-ascii?q?eIYBEX2uLNGvxtVim57tXGZV9ESiB1wawsCpYwedb1vn0Q1Wy0sXu32nlTKkwD?=
 =?us-ascii?q?NulzEms7SQ3DbJw+TkbxcHPm9LRG9/jVbjO4S0jtYaXFS2YAgtjheq+UH6x61D?=
 =?us-ascii?q?rqRlM2bTWVtIfzTxL2x6Uqqwt6COYs5V5JMzrCVXVv+xYVSbSr77vhsb3DnvH2?=
 =?us-ascii?q?pYxDAnaT6qvo/1kAB9iGKYNHxztmbWedlsxRfD49zRXfxR0SAcRCl7ijnXAUKw?=
 =?us-ascii?q?P8Kz8tWXlJfDs+a+WHynVpBIdSnrzIWAtDa05GFwAB2/meyzlcPjEQQgzSD70N?=
 =?us-ascii?q?xqXz3SrBngeonry7i6MeV/c0hoHlD87NB2GoN/kos2n5wQ3XkahpOI/XsIi2vz?=
 =?us-ascii?q?MNNb2b7gY3oJXzIE39nV4A390k15Mn2J3575VmmawsZ5ZNm1eGIW1jg978BXEq?=
 =?us-ascii?q?iU6rNEkDBxolq5qwLRfPd8ki0cyfso9H4VneUJtBAxwSWaB7AYBVNYMjD0lxSU?=
 =?us-ascii?q?89C+q71aZGOucbizzkVyh96gA6+ZogFARnn5YIwtEjFq7sVwK1/M1Hzz6of5eN?=
 =?us-ascii?q?jfd94TtxuUkwvegOhRMp4+iv0KhS9/M2LnoXIl0/I7jQBp3ZyioIiHLGBt8Li4?=
 =?us-ascii?q?AxFCMD31etgT+irsjatFmsaW3oavHohuGzkRXZvoS+6oHywWtfj9KwmOFzg8oG?=
 =?us-ascii?q?+BGbXDBQ+f9Ftmr3XXHp+wLX6XI30Zzch4SBmZOUxSmwQUXDQ8np4kGQGm3s3h?=
 =?us-ascii?q?cEFl5j8P4l70sAdDyuVtNxPnSGfQuB+oaisoSJiYNBdW7BtN50LLPsyF9O5zAz?=
 =?us-ascii?q?tU/p68rAyON2ybYR5HDXoSV0yABlDjOKSu5Nba/+iZAOq+M+XBYbGUpeNCUPeI?=
 =?us-ascii?q?wIql0pF68DaUKsWPIn5iAuU720pEQHB5AtnZlC8JSyANjCLNaMibpBin9y1zr8?=
 =?us-ascii?q?C/9unrWQ316YuODbtSLctg+xSsjaifMO6QgT5zKSxE2ZMU2X/I1L8f0UYSiy5w?=
 =?us-ascii?q?djmtErcAtS/XQKLTgK9XCBEbZD1pNMtV9KIxxQ1NOc/ditPo2b90lP81C1FZVV?=
 =?us-ascii?q?P/nsGlf9AFI2a4NFnfHkaEKKyGJSHXw8Hwea6zU6BQg/5OtxKuuTeXCUvjPjWY?=
 =?us-ascii?q?mjntVhCvN/xMjS6BMBxfvoG9bghiCWz5QN36bR27Ncd9jScqzr0smnPKKWkcPC?=
 =?us-ascii?q?Bgc0NMq72c9z9Xju9jFGxB8HVlK/KJmyKY7+neN5YXvuFnAiVyl+JG/ns6z6FZ?=
 =?us-ascii?q?4z1DRPxwgCHStMJho0m6kumTzTpqSBpPpSxNhIKOvEViP73W95hAWXne+hIN4n?=
 =?us-ascii?q?6dCxALp9tjF93utLpcytnJlKLvNjhC98jY8tcbB8jRe4q7Ny8INwfzETGcLxYA?=
 =?us-ascii?q?RCTjC3zbhlddmbnG/3uItJE1qYXEiJsKS7lLElcyE6VJJF5iGYkrJJ5xFgg4nK?=
 =?us-ascii?q?SdxJoT+XekqjHLQ9pet5bLEPKbG+vmMjrfgLVZMUhbiYjkJJgeY9Wok3dpbUN3?=
 =?us-ascii?q?ycGTQxLd?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAAAbrwZch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgmmBAow5jXclFJc1gXMIJAsIAYFLhgEiNAkNAQMBAQEBAQECARM?=
 =?us-ascii?q?BAQEIDQkIKSMMgjYkAYJhAQECAgEBAjc/BgkCCkYDVAYKDhaDBgGBeQgFCqYwh?=
 =?us-ascii?q?C0BhC8HgUcFjB4XgX+BETOCX4FBAYMrhW8CiS2Bc4UPkBoJhwOKVoFbhRGKOo1?=
 =?us-ascii?q?ujE+CDTMaCB0TgyiCMohphV0hAYE3AQGIFQEDIoInAQE?=
X-IPAS-Result: =?us-ascii?q?A0ANAAAbrwZch0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBgmm?=
 =?us-ascii?q?BAow5jXclFJc1gXMIJAsIAYFLhgEiNAkNAQMBAQEBAQECARMBAQEIDQkIKSMMg?=
 =?us-ascii?q?jYkAYJhAQECAgEBAjc/BgkCCkYDVAYKDhaDBgGBeQgFCqYwhC0BhC8HgUcFjB4?=
 =?us-ascii?q?XgX+BETOCX4FBAYMrhW8CiS2Bc4UPkBoJhwOKVoFbhRGKOo1ujE+CDTMaCB0Tg?=
 =?us-ascii?q?yiCMohphV0hAYE3AQGIFQEDIoInAQE?=
X-IronPort-AV: E=Sophos;i="5.56,314,1539673200"; 
   d="scan'208";a="56040648"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 04 Dec 2018 08:46:52 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727193AbeLDQqj (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 4 Dec 2018 11:46:39 -0500
Received: from iolanthe.rowland.org ([192.131.102.54]:46636 "HELO
        iolanthe.rowland.org" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with SMTP id S1727169AbeLDQqi (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 4 Dec 2018 11:46:38 -0500
Received: (qmail 5537 invoked by uid 2102); 4 Dec 2018 11:46:37 -0500
Received: from localhost (sendmail-bs@127.0.0.1)
  by localhost with SMTP; 4 Dec 2018 11:46:37 -0500
Date: Tue, 4 Dec 2018 11:46:37 -0500 (EST)
From: Alan Stern <stern@rowland.harvard.edu>
X-X-Sender: stern@iolanthe.rowland.org
To: Anurag Kumar Vulisha <anuragku@xilinx.com>
cc: Felipe Balbi <balbi@kernel.org>,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        Shuah Khan <shuah@kernel.org>, Johan Hovold <johan@kernel.org>,
        Jaejoong Kim <climbbb.kim@gmail.com>,
        Benjamin Herrenschmidt <benh@kernel.crashing.org>,
        Roger Quadros <rogerq@ti.com>,
        Manu Gautam <mgautam@codeaurora.org>,
        "martin.petersen@oracle.com" <martin.petersen@oracle.com>,
        Bart Van Assche <bvanassche@acm.org>,
        Mike Christie <mchristi@redhat.com>,
        Matthew Wilcox <willy@infradead.org>,
        Colin Ian King <colin.king@canonical.com>,
        "linux-usb@vger.kernel.org" <linux-usb@vger.kernel.org>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        "v.anuragkumar@gmail.com" <v.anuragkumar@gmail.com>,
        Thinh Nguyen <thinhn@synopsys.com>,
        Tejas Joglekar <tejas.joglekar@synopsys.com>,
        Ajay Yugalkishore Pandey <APANDEY@xilinx.com>
Subject: RE: [PATCH v7 01/10] usb: gadget: udc: Add timer support for usb
 requests
In-Reply-To: <SN6PR02MB564841A6B40602168325B434A7AF0@SN6PR02MB5648.namprd02.prod.outlook.com>
Message-ID: <Pine.LNX.4.44L0.1812041138440.1537-100000@iolanthe.rowland.org>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Tue, 4 Dec 2018, Anurag Kumar Vulisha wrote:

> >> Yes the host can cancel the transfer. This issue originated from the endpoints using
> >bulk
> >> streaming protocol and may not occur with normal endpoints. AFAIK bulk streaming
> >is
> >> gadget driven, where the gadget is allowed to select which stream id transfer the
> >host
> >> should work on . Since the host doesn't have control on when the transfer would be
> >> selected by gadget, it may wait for longer timeouts before cancelling the transfer.
> >
> >You're missing the point.  Although the device selects which stream ID
> >gets transferred, the _host_ decides whether a stream transfer should
> >occur in the first place.  No matter how many ERDY packets the device
> >controller tries to send, no transfer will occur until the host wants
> >to do it.
> >
> >In this sense, stream transfers (like all other USB interactions except
> >wakeup requests) are host-driven.
> >
> 
> I agree with you that without host willing to transfer, the transfer wouldn't have
> started and also agree the host always has the capability of detecting the hang. But
> we are not sure on what host platform and operating system the gadget would be
> tested and also not sure whether the host software is capable of handling the deadlock.
> Even if the host has a timer , it would be very long and waiting for the timer to get
> timedout  would reduce the performance. In this patch we are giving the user the
> flexibility to opt the timeout value, so that the deadlock can be avoided without
> effecting the performance. So I think adding the timer in gadget is more easier solution
> than handling in host. I have seen this workaround working for both linux & windows.

Is there any way for the device controller driver to detect the problem 
without relying on a timeout?

In fact, is this problem a known bug in the existing device controller
hardware?  Have the controller manufacturers published a suggested
scheme for working around it?

> >> >> Since the gadget
> >> >> controller driver is aware that the controller is stuck , makes it responsible
> >> >> to recover the controller from hang condition by restarting the transfer (which
> >> >> triggers the controller FSM to issue ERDY to host).
> >> >
> >> >Isn't there a cleaner way to recover than by cancelling the request and
> >> >resubmitting it?
> >> >
> >>
> >> dequeuing the request issues the stop transfer command to the controller, which
> >> cleans all the hardware resource allocated for that endpoint. This also resets the
> >> hardware FSMs for that endpoint . So, when re-queuing of the transfer happens
> >> the controller starts allocating hardware resources again, thus avoiding the
> >probability
> >> of entering into the issue. I am not sure of other controllers, but for dwc3, issuing
> >> the stop transfer is the only way to handle this issue.
> >
> >Again you're missing the point.  Can't the controller driver issue the
> >Stop Transfer command but still consider the request to be in progress
> >(i.e., don't dequeue the request) so that the gadget driver's
> >completion callback isn't invoked and the request does not need to be
> >explicitly resubmitted?
> >
> 
> Yes , what you are saying is correct. My initial patches were following the
> same approach that you have suggested. We switched to the dequeue
> approach because there can be different gadgets which may enter into
> this issue and it would be better to follow a generic approach rather than
> having every controller driver implementing their own workaround.
> Please find the conservation in this link  https://patchwork.kernel.org/patch/10640145/

At this point, it seems that the generic approach will be messier than 
having every controller driver implement its own fix.  At least, that's 
how it appears to me.

> >> @Felipe:  Can you please provide your suggestion on this.
> >
> >> >How can the gadget driver know what timeout to use?  The host is
> >> >allowed to be as slow as it wants; the gadget driver doesn't have any
> >> >way to tell when the host wants to start the transfer.
> >>
> >> Yes , I agree with you that the timeout may vary from usage to usage. This timeout
> >> should be decided by the class driver which queues the request. As discussed above
> >> this issue was observed in streaming protocol , which  is very much faster than
> >normal
> >> BOT modes and it works on super speed .
> >
> >Although USB mass storage is currently the only user of the stream
> >protocol, that may not be true in the future.  You should think in more
> >general terms.  A timeout which is appropriate for mass storage may not
> >be appropriate for some other application.
> >
> 
> You are correct , this timeout may not be ideal. Since  I was not able to reproduce this issue
> on non-stream capable transfers , at  present the only user of usb_ep_queue_timeout() API
> is the streaming gadget.  As we are not aware of the optimal timeout value,  instead of
> hardcoding the timeout value we can add module_param() for it.  So that the user can configure
> timeout based on their use case. Please let me know your suggestion on this.

Ideally it would not be necessary to rely on a timeout at all.

Also, maintainers dislike module parameters.  It would be better not to 
add one.

Alan Stern

