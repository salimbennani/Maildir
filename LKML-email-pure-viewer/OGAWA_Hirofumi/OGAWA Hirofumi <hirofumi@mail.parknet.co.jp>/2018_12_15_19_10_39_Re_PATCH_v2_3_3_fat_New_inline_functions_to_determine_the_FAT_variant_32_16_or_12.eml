Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  16 Dec 2018 10:42:49 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id B600A5805FC;
	Sat, 15 Dec 2018 11:11:02 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 15 Dec 2018 11:11:02 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AcbYfvhCeALVzOu77f5wjUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7/r8WwAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95RWSJfH428?=
 =?us-ascii?q?YYUBAOgCM+lWoIbyu0AOrQO8CAS3GOPj1iVFimPq0aAgz+gsFxzN0gw6H9IJtX?=
 =?us-ascii?q?TZtMz7OqYOXO+10KTD0DfNb/JM2Tf65ojIbxUhofCRVr93ccrRyFMvFwTLjlWN?=
 =?us-ascii?q?rIzlPiiY1uEXvGia6+psT/qvhHQ9qwFypDig2NsshpPViYIS0FzE9z15zZ8zKN?=
 =?us-ascii?q?alS0B7ecapHIVMuyyeLYd6X80vT39ytConybAKpYS3cSkIxZg/2RLTduCLf5KV?=
 =?us-ascii?q?7h/hSeqdOyp0iXNmdb6liRu/9U6twfDmWMauylZFtC9Fn8HMtn8T0xzT7dCKSu?=
 =?us-ascii?q?Vy/ki/wzaDzQPT5f9eIUAyi6XbL4QtwrkqlpocqUjDHyn2l1vqjKKOaEko5uyl?=
 =?us-ascii?q?5/76brjouJOQLZJ4hwLiPqg0m8GyA/w0Mg0UUGia/eS82qfj/Ur8QLhSiv02k6?=
 =?us-ascii?q?/ZsI3VJMgCpa62HRVV0oA95Ba7Fjum19oZnX8ZI1JfYx+HkYfpNE/UIPziDvew?=
 =?us-ascii?q?nU6skDF1yPDCJLHhBY/NLnfbnLf7Ybl981JcyBY0zd1H45JUC7IBL+zpVk7+qd?=
 =?us-ascii?q?zVFRs5Mw2yw+b6B9RxzIIeWWSTAqCHNKPeq0OH5uUqI+OUfo8apC79K+Q55/7p?=
 =?us-ascii?q?lXI5mUUSfai13ZQNb3C0BPRmI1iDbnrqjdcMCmMKvgs4TOz3h1yOSz9TZ3CuX6?=
 =?us-ascii?q?0i4jE3Ep6pDYDGRoq1mryOwD+7HoFKZmBBEl2ME3DoeJueV/cPbyKSJMlhkjsf?=
 =?us-ascii?q?WLilSo8h0wyutQDgx7pmKOrU5jMXtZb52Ndp4O3TkAk49SZoAMSFz2GNU2Z0k3?=
 =?us-ascii?q?sSSD8t3KB/pk99xk2Z0adigfxVDthT5/JPUgcnOp/Q1e16C9buWg3feteFUkqp?=
 =?us-ascii?q?QtKjATspVNI+38cOY1phG9Wllh3D3DClA7kPm7yPBZw76KTc33fqKsZ5ynbG0r?=
 =?us-ascii?q?QhjlY8TstOM22mmrBw9wzJC4HVlEWZkr6gdb4A0y7V6GeD0W2OsVlFXwFqT6XK?=
 =?us-ascii?q?Q2oTZkvMotT//UPNUbmuBbMjMgtCzM6CLrBHatnojVVAWffiN87SY2O3m2esGx?=
 =?us-ascii?q?mIwqmAY5bte2UYxC/dElQLkxgP/XaaMggzHjqurHjADDNwD17vY1nj8e9lqHyl?=
 =?us-ascii?q?SE851AWKb0xn17qo9R8Zn/2cS/UP3r0avCctsSl7HFG439jOEdqPuxJhfLlAYd?=
 =?us-ascii?q?M6+FpHyWPZtwl6Ppy8L6BjhkQScxhts0PpzRV3DoRAkc4lrH4xyApyKKSY0E5O?=
 =?us-ascii?q?dj+C3JDwPKHXJXf2/By1d6HW3VTe2s6M+qgT8PQ4t0njvAaxG0U493VozdZU3G?=
 =?us-ascii?q?Wc55nQFwUSTI/+XVwx9xh5oLHafDIw54fV1X1qLKm1vSXO29MvBOs51Bmge81T?=
 =?us-ascii?q?P7+DFA/3C8caHdShKPQ2m1i1aRIJJOBT9LMuM8y6bfeH2a6rM/xmnDKplmlH5I?=
 =?us-ascii?q?F90kSR9ytzUOLI3pAFw+2G0QuDTTvzkFChssXvk4BeeT4SBna/yTTjBINJfK1y?=
 =?us-ascii?q?fJoEBn20I8KqwdVynZjtVGBC9F6iHl8JxNWmeR6PYFPjxw1Q0kIXrGejmSu5yT?=
 =?us-ascii?q?x0jj4oorCe3CzI3+Ttah4HNnRXS2lliFfmOZK0gMwCXEi0cwgpkwOo5Eb7x6RB?=
 =?us-ascii?q?pKVzNXLTQVpOfyXtK2FiU62wtqeNYsJV6ZMotzlXX/q4YVyAVrH9pB4a2Tv5H2?=
 =?us-ascii?q?RC3DA7ay2qupLhkhx4km2dNnVzrHneec1q3hfQ/t/cRf1Q3joAWiZ4jyLaBly9?=
 =?us-ascii?q?P9mv4NWVmI3PsuG4V2K9SJJTdTPnwp+HtCu+/WdqGwGwn+ivmt37Fgg3yS/62M?=
 =?us-ascii?q?NtVSnSrhb8Y4/r2r++MeJmeEloGVD959B7GoF4jos/mpUQ1WIGiZWS+HoNiX3z?=
 =?us-ascii?q?PslD2aLicHoNQiYGw93P7wjkwkFjLm+JyJj/VnWS2cZhY9i6YmUL2iMy9cxKCa?=
 =?us-ascii?q?GU7KBakitxuFa3sQXRYf1llDcH1fQu8GIag/0OuAc1yyWdA7MSElNCMS3iiRuI?=
 =?us-ascii?q?9My+o7tNZGm0b7ewzkV+kMulDLGDpAFcRXn4do0jHS928sVwLlbM3Gfv5YHjfd?=
 =?us-ascii?q?nadcgTuQGMkxfck+hVL4o8luYNhSpiI278vGcqy+gmjRx1xpG6vZOKK2Fs/KK/?=
 =?us-ascii?q?Hx5ZOSf5Z8IV+jHxk6lemtya0JyoHpVkAj8LRofnTeq0EDIOsvTqLx2BHyc7qn?=
 =?us-ascii?q?efBLrTBwuf6Fp9onLLEpCrMWyXJXYDwdVjQhmdOFJQgAQOUDommZ45ExigxNb9?=
 =?us-ascii?q?f0dh+jAR+ln4pwNOyu1yMhnwTHzfqB20ajsuS5ifMRlW7hxE50jPKsyT9eZzHy?=
 =?us-ascii?q?Be/p28ow2BMG2bZwJUDW4XXkyIHUzsPr6r5dPY6eiXGvK+L+fSYbWJseFfV/CI?=
 =?us-ascii?q?xY+20ot75TmMMN+DPmJlD/091UpORnR5G8XfmzUSRC0bjSPNb8iHpBii/i17tN?=
 =?us-ascii?q?yw8PPuWAj3/4uAF6NSMclz+xCxmaqDN/CfhCd6KTZb15MA33zIyKIY3F4dlS5u?=
 =?us-ascii?q?bSStEa8buC7JTaLQnLJXDhEBZyNyMstI87wz3g1XNcHHjdP106ZyjuQpBFddSV?=
 =?us-ascii?q?zhhsapaNQQLGGgL1zHHliENbScKT3PwsH6eqe8SbxWjOVJuBy8ozebE0n/Pjud?=
 =?us-ascii?q?kznlTQygMeZJjCuDJhxRpJm9cgpxCWjkVN/mdhy7MNptgTIq27E7mnPKOnAaMT?=
 =?us-ascii?q?Vnd0NNr7uQ7T5Xg/llGmxB6GZlIveAmyqD8+bYLZMWu+NxAitoj+Ja/Gg6y7xN?=
 =?us-ascii?q?4SBEXvN1ni7Srt9oo16+k+iPyiBoUBxBqjtQgIKLvENiObjW95VaWHbE+g4N4n?=
 =?us-ascii?q?uUCxgQu9RlDdjv6OhszY3knbj2JTNDu+7d+MoGT5zfIdiCPX4gdwbgHT/OJAQA?=
 =?us-ascii?q?RD+vc2rYghoOvuuV8yiygbEFg9DMmYAJRKJeVRRhFvIADUp4Gd0qJZ52WnU8mK?=
 =?us-ascii?q?SYisMUo3G56hvJEpYJ9qvbX+6fVK28YA2SiqNJMl5Rmev1?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BEAwBuURVch0O0hNFkHAMfBAeBTgKDa?=
 =?us-ascii?q?ieMdIsXAYINFIN3hQqOQ4FzEgEBGBMBh0ciNAkNAQMBAQEBAQECARMBAQEKCwk?=
 =?us-ascii?q?IKS+CNiQBgmIBAgIBAQIkUgUBCQEBCiEUEQMMAQQLAjwTBYMdgWkDDQcBBaVwM?=
 =?us-ascii?q?4d6DYIcjD4XgX+DdS6CV4IKAQGFfQKHLgeBaYcskCAvCRyODoMwGJFSj0SJeQI?=
 =?us-ascii?q?KBxSBRoIOTTiDJ4InFxKOGjEBMYEFAQGKUYI+AQE?=
X-IPAS-Result: =?us-ascii?q?A0BEAwBuURVch0O0hNFkHAMfBAeBTgKDaieMdIsXAYINFIN?=
 =?us-ascii?q?3hQqOQ4FzEgEBGBMBh0ciNAkNAQMBAQEBAQECARMBAQEKCwkIKS+CNiQBgmIBA?=
 =?us-ascii?q?gIBAQIkUgUBCQEBCiEUEQMMAQQLAjwTBYMdgWkDDQcBBaVwM4d6DYIcjD4XgX+?=
 =?us-ascii?q?DdS6CV4IKAQGFfQKHLgeBaYcskCAvCRyODoMwGJFSj0SJeQIKBxSBRoIOTTiDJ?=
 =?us-ascii?q?4InFxKOGjEBMYEFAQGKUYI+AQE?=
X-IronPort-AV: E=Sophos;i="5.56,358,1539673200"; 
   d="scan'208";a="57043534"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 15 Dec 2018 11:10:44 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729017AbeLOTKm (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sat, 15 Dec 2018 14:10:42 -0500
Received: from mail.parknet.co.jp ([210.171.160.6]:42934 "EHLO
        mail.parknet.co.jp" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726533AbeLOTKm (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sat, 15 Dec 2018 14:10:42 -0500
Received: from ibmpc.myhome.or.jp (server.parknet.ne.jp [210.171.168.39])
        by mail.parknet.co.jp (Postfix) with ESMTPSA id 28AFF161689;
        Sun, 16 Dec 2018 04:10:41 +0900 (JST)
Received: from devron.myhome.or.jp (foobar@devron.myhome.or.jp [192.168.0.3])
        by ibmpc.myhome.or.jp (8.15.2/8.15.2/Debian-12) with ESMTPS id wBFJAdK9011623
        (version=TLSv1.3 cipher=TLS_AES_256_GCM_SHA384 bits=256 verify=NOT);
        Sun, 16 Dec 2018 04:10:40 +0900
Received: from devron.myhome.or.jp (foobar@localhost [127.0.0.1])
        by devron.myhome.or.jp (8.15.2/8.15.2/Debian-12) with ESMTPS id wBFJAdfO024023
        (version=TLSv1.3 cipher=TLS_AES_256_GCM_SHA384 bits=256 verify=NOT);
        Sun, 16 Dec 2018 04:10:39 +0900
Received: (from hirofumi@localhost)
        by devron.myhome.or.jp (8.15.2/8.15.2/Submit) id wBFJAdIG024022;
        Sun, 16 Dec 2018 04:10:39 +0900
From: OGAWA Hirofumi <hirofumi@mail.parknet.co.jp>
To: Carmeli Tamir <carmeli.tamir@gmail.com>
Cc: linux-kernel@vger.kernel.org, jthumshirn@suse.de,
        sergey.senozhatsky@gmail.com, akpm@linux-foundation.org,
        bvanassche@acm.org, axboe@kernel.dk, martin.petersen@oracle.com,
        sfr@canb.auug.org.au
Subject: Re: [PATCH v2 3/3] fat: New inline functions to determine the FAT variant (32, 16 or 12)
References: <1544879072-4251-1-git-send-email-carmeli.tamir@gmail.com>
        <1544879072-4251-4-git-send-email-carmeli.tamir@gmail.com>
Date: Sun, 16 Dec 2018 04:10:39 +0900
In-Reply-To: <1544879072-4251-4-git-send-email-carmeli.tamir@gmail.com>
        (Carmeli Tamir's message of "Sat, 15 Dec 2018 08:04:32 -0500")
Message-ID: <87y38qbo7k.fsf@mail.parknet.co.jp>
User-Agent: Gnus/5.13 (Gnus v5.13) Emacs/27.0.50 (gnu/linux)
MIME-Version: 1.0
Content-Type: text/plain
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Carmeli Tamir <carmeli.tamir@gmail.com> writes:

> This patch introduces 3 new inline functions - IS_FAT12, IS_FAT16 and
> IS_FAT32, and replaces every occurrence in the code in which the FS 
> variant (whether this is FAT12, FAT16 or FAT32) was previously checked 
> using msdos_sb_info->fat_bits.

Could you use lower case chars for inline functions?

> Signed-off-by: Carmeli Tamir <carmeli.tamir@gmail.com>
> ---
>  fs/fat/cache.c  |  2 +-
>  fs/fat/dir.c    |  4 ++--
>  fs/fat/fat.h    | 25 ++++++++++++++++++++++---
>  fs/fat/fatent.c | 16 +++++++---------
>  fs/fat/inode.c  | 12 ++++++------
>  fs/fat/misc.c   |  2 +-
>  6 files changed, 39 insertions(+), 22 deletions(-)
>
> diff --git a/fs/fat/cache.c b/fs/fat/cache.c
> index 78d501c..30c51b9 100644
> --- a/fs/fat/cache.c
> +++ b/fs/fat/cache.c
> @@ -363,7 +363,7 @@ int fat_bmap(struct inode *inode, sector_t sector, sector_t *phys,
>  
>  	*phys = 0;
>  	*mapped_blocks = 0;
> -	if ((sbi->fat_bits != 32) && (inode->i_ino == MSDOS_ROOT_INO)) {
> +	if (!IS_FAT32(sbi) && (inode->i_ino == MSDOS_ROOT_INO)) {
>  		if (sector < (sbi->dir_entries >> sbi->dir_per_block_bits)) {
>  			*phys = sector + sbi->dir_start;
>  			*mapped_blocks = 1;
> diff --git a/fs/fat/dir.c b/fs/fat/dir.c
> index c8366cb..b0b8f44 100644
> --- a/fs/fat/dir.c
> +++ b/fs/fat/dir.c
> @@ -57,7 +57,7 @@ static inline void fat_dir_readahead(struct inode *dir, sector_t iblock,
>  	if ((iblock & (sbi->sec_per_clus - 1)) || sbi->sec_per_clus == 1)
>  		return;
>  	/* root dir of FAT12/FAT16 */
> -	if ((sbi->fat_bits != 32) && (dir->i_ino == MSDOS_ROOT_INO))
> +	if (!IS_FAT32(sbi) && (dir->i_ino == MSDOS_ROOT_INO))
>  		return;
>  
>  	bh = sb_find_get_block(sb, phys);
> @@ -1313,7 +1313,7 @@ int fat_add_entries(struct inode *dir, void *slots, int nr_slots,
>  		}
>  	}
>  	if (dir->i_ino == MSDOS_ROOT_INO) {
> -		if (sbi->fat_bits != 32)
> +		if (!IS_FAT32(sbi))
>  			goto error;
>  	} else if (MSDOS_I(dir)->i_start == 0) {
>  		fat_msg(sb, KERN_ERR, "Corrupted directory (i_pos %lld)",
> diff --git a/fs/fat/fat.h b/fs/fat/fat.h
> index 11bc4a2..5b6f1c8 100644
> --- a/fs/fat/fat.h
> +++ b/fs/fat/fat.h
> @@ -142,13 +142,32 @@ static inline struct msdos_sb_info *MSDOS_SB(struct super_block *sb)
>  	return sb->s_fs_info;
>  }
>  
> +/*
> + * Functions that determine the variant of the FAT file system (i.e.,
> + * whether this is FAT12, FAT16 or FAT32.
> + */
> +static inline bool IS_FAT12(const struct msdos_sb_info *sbi)
> +{
> +	return sbi->fat_bits == 12;
> +}
> +
> +static inline bool IS_FAT16(const struct msdos_sb_info *sbi)
> +{
> +	return sbi->fat_bits == 16;
> +}
> +
> +static inline bool IS_FAT32(const struct msdos_sb_info *sbi)
> +{
> +	return sbi->fat_bits == 32;
> +}
> +
>  /* Maximum number of clusters */
>  static inline u32 MAX_FAT(struct super_block *sb)
>  {
>  	struct msdos_sb_info *sbi = MSDOS_SB(sb);
>  
> -	return sbi->fat_bits == 32 ? MAX_FAT32 :
> -		sbi->fat_bits == 16 ? MAX_FAT16 : MAX_FAT12;
> +	return IS_FAT32(sbi) ? MAX_FAT32 :
> +		IS_FAT16(sbi) ? MAX_FAT16 : MAX_FAT12;
>  }
>  
>  static inline struct msdos_inode_info *MSDOS_I(struct inode *inode)
> @@ -266,7 +285,7 @@ static inline int fat_get_start(const struct msdos_sb_info *sbi,
>  				const struct msdos_dir_entry *de)
>  {
>  	int cluster = le16_to_cpu(de->start);
> -	if (sbi->fat_bits == 32)
> +	if (IS_FAT32(sbi))
>  		cluster |= (le16_to_cpu(de->starthi) << 16);
>  	return cluster;
>  }
> diff --git a/fs/fat/fatent.c b/fs/fat/fatent.c
> index f58c0ca..9166d96 100644
> --- a/fs/fat/fatent.c
> +++ b/fs/fat/fatent.c
> @@ -290,19 +290,17 @@ void fat_ent_access_init(struct super_block *sb)
>  
>  	mutex_init(&sbi->fat_lock);
>  
> -	switch (sbi->fat_bits) {
> -	case 32:
> +	if (IS_FAT32(sbi)) {
>  		sbi->fatent_shift = 2;
>  		sbi->fatent_ops = &fat32_ops;
> -		break;
> -	case 16:
> +	} else if (IS_FAT16(sbi)) {
>  		sbi->fatent_shift = 1;
>  		sbi->fatent_ops = &fat16_ops;
> -		break;
> -	case 12:
> +	} else if (IS_FAT12(sbi)) {
>  		sbi->fatent_shift = -1;
>  		sbi->fatent_ops = &fat12_ops;
> -		break;
> +	} else {
> +		fat_fs_error(sb, "invalid FAT variant, %u bits", sbi->fat_bits);
>  	}
>  }
>  
> @@ -310,7 +308,7 @@ static void mark_fsinfo_dirty(struct super_block *sb)
>  {
>  	struct msdos_sb_info *sbi = MSDOS_SB(sb);
>  
> -	if (sb_rdonly(sb) || sbi->fat_bits != 32)
> +	if (sb_rdonly(sb) || !IS_FAT32(sbi))
>  		return;
>  
>  	__mark_inode_dirty(sbi->fsinfo_inode, I_DIRTY_SYNC);
> @@ -327,7 +325,7 @@ static inline int fat_ent_update_ptr(struct super_block *sb,
>  	/* Is this fatent's blocks including this entry? */
>  	if (!fatent->nr_bhs || bhs[0]->b_blocknr != blocknr)
>  		return 0;
> -	if (sbi->fat_bits == 12) {
> +	if (IS_FAT12(sbi)) {
>  		if ((offset + 1) < sb->s_blocksize) {
>  			/* This entry is on bhs[0]. */
>  			if (fatent->nr_bhs == 2) {
> diff --git a/fs/fat/inode.c b/fs/fat/inode.c
> index 708de6d..a84b61b 100644
> --- a/fs/fat/inode.c
> +++ b/fs/fat/inode.c
> @@ -686,7 +686,7 @@ static void fat_set_state(struct super_block *sb,
>  
>  	b = (struct fat_boot_sector *) bh->b_data;
>  
> -	if (sbi->fat_bits == 32) {
> +	if (IS_FAT32(sbi)) {
>  		if (set)
>  			b->fat32.state |= FAT_STATE_DIRTY;
>  		else
> @@ -1397,7 +1397,7 @@ static int fat_read_root(struct inode *inode)
>  	inode->i_mode = fat_make_mode(sbi, ATTR_DIR, S_IRWXUGO);
>  	inode->i_op = sbi->dir_ops;
>  	inode->i_fop = &fat_dir_operations;
> -	if (sbi->fat_bits == 32) {
> +	if (IS_FAT32(sbi)) {
>  		MSDOS_I(inode)->i_start = sbi->root_cluster;
>  		error = fat_calc_dir_size(inode);
>  		if (error < 0)
> @@ -1424,7 +1424,7 @@ static unsigned long calc_fat_clusters(struct super_block *sb)
>  	struct msdos_sb_info *sbi = MSDOS_SB(sb);
>  
>  	/* Divide first to avoid overflow */
> -	if (sbi->fat_bits != 12) {
> +	if (!IS_FAT12(sbi)) {
>  		unsigned long ent_per_sec = sb->s_blocksize * 8 / sbi->fat_bits;
>  		return ent_per_sec * sbi->fat_length;
>  	}
> @@ -1744,7 +1744,7 @@ int fat_fill_super(struct super_block *sb, void *data, int silent, int isvfat,
>  	}
>  
>  	/* interpret volume ID as a little endian 32 bit integer */
> -	if (sbi->fat_bits == 32)
> +	if (IS_FAT32(sbi))
>  		sbi->vol_id = bpb.fat32_vol_id;
>  	else /* fat 16 or 12 */
>  		sbi->vol_id = bpb.fat16_vol_id;
> @@ -1770,11 +1770,11 @@ int fat_fill_super(struct super_block *sb, void *data, int silent, int isvfat,
>  
>  	total_clusters = (total_sectors - sbi->data_start) / sbi->sec_per_clus;
>  
> -	if (sbi->fat_bits != 32)
> +	if (!IS_FAT32(sbi))
>  		sbi->fat_bits = (total_clusters > MAX_FAT12) ? 16 : 12;
>  
>  	/* some OSes set FAT_STATE_DIRTY and clean it on unmount. */
> -	if (sbi->fat_bits == 32)
> +	if (IS_FAT32(sbi))
>  		sbi->dirty = bpb.fat32_state & FAT_STATE_DIRTY;
>  	else /* fat 16 or 12 */
>  		sbi->dirty = bpb.fat16_state & FAT_STATE_DIRTY;
> diff --git a/fs/fat/misc.c b/fs/fat/misc.c
> index fce0a76..5368c6a 100644
> --- a/fs/fat/misc.c
> +++ b/fs/fat/misc.c
> @@ -64,7 +64,7 @@ int fat_clusters_flush(struct super_block *sb)
>  	struct buffer_head *bh;
>  	struct fat_boot_fsinfo *fsinfo;
>  
> -	if (sbi->fat_bits != 32)
> +	if (!IS_FAT32(sbi))
>  		return 0;
>  
>  	bh = sb_bread(sb, sbi->fsinfo_sector);

-- 
OGAWA Hirofumi <hirofumi@mail.parknet.co.jp>
