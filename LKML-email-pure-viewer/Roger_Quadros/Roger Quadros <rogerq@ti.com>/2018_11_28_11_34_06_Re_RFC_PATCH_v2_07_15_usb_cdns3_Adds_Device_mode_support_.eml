Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 28 Nov 2018 21:42:22 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 9A1105802E4;
	Wed, 28 Nov 2018 03:34:27 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by fmsmga006-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 28 Nov 2018 03:34:26 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AnjGc5BbsrsBtFySeu+PhWKH/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpcm6Yx7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTzFPDJ2y?=
 =?us-ascii?q?b4UPDOQPM+hXoIb/qFQSohW+HhGsCeH0xz9UhHL5x7E23/gvHAzG2gErAtIAsG?=
 =?us-ascii?q?7TrNXwLKocTee1zKbWwjXZcvhYwir955LVfRA7pvGMRq97fM3LyUkoGAPKkE+Q?=
 =?us-ascii?q?qZX+MjOJ1+QBqXSU7+1lVe+2jWMstgJ/oiC3y8syloXEgpgZxk3K+Cln2oo5ON?=
 =?us-ascii?q?61RFJhbdOlEpZcrzyWOot0T884Xm1lujo2xqcbtZO5YCQG0okrywLDZ/GBboOG?=
 =?us-ascii?q?+AjsVPyLLjd9nH9leKywhxK18UW41O38Wde70ExQoipGjNbMrHYN2ALX6sSdTf?=
 =?us-ascii?q?t95Eih1S6O1wDV9O5EPVg5mbTHJ5Ml2LI8i5QevVrZEiPrm0j6kLWae0Qm9+Sw?=
 =?us-ascii?q?7uToeLTmppuSN49ujQH+N7wjmsi+AeQ+LwgPUHGX+eei2735+032XrFKguQxkq?=
 =?us-ascii?q?jXtpDVO94bq7WnAw9azIkj8QyzDzS439QCm3kIMlZFdAiAj4jzNFHCOOr4Auun?=
 =?us-ascii?q?g1SwjDdrwOjLPrngApXOMHfPirjgfatm5k5YyQozy81f5p1OBrEAJvLzRlH+tN?=
 =?us-ascii?q?jCAhAlNAy0xv7tCM9h2YMGRWKPHqiZPbvSsVCS5+IvP/ODZIgPtDb9Nvgq/fju?=
 =?us-ascii?q?jXAilF8ZfKmp24YXaX+iEvRnJUWZfWTjgtMbHWgWuQo+SfTgiEeeXj5Le3ayQ6?=
 =?us-ascii?q?U86yk5CIKhE4jPXIOtgLuH3Ce9GZ1bfWRGClGKEXf1eISIQfYMaCSOIsB/ljwI?=
 =?us-ascii?q?T6SuS4gk1Ru2rg/116JnLvbI+i0frZ/szsN15+3UlREx7zB0Fd6S02OWQmFwn2?=
 =?us-ascii?q?MIQSI23a9lrUx8zFeDzbZ3g/hCGdNP4PNJVx8wNYTAwOxiF9DyRgXBc8+KSFm8?=
 =?us-ascii?q?RNWqGzUxTtMrzN8IbEZwANGijhHF3yq3DL4Zjb2LBJoo8q3C23j9Pdpyy3HD1K?=
 =?us-ascii?q?M5lVkpXtNPNXG6hq547wXcGpTGk1uHmKqwdaQTxijN9HydwmqIu01YVA1wUaDB?=
 =?us-ascii?q?XX0EYkvWrNL55l7NTrO0CLQnNBdBxtCGKqdQdtLpilBGTu/5ONvCe2Kxh3uwBR?=
 =?us-ascii?q?GQy7yRdoXqZXsS0D/dCEcelQAT5miJNQ4lCyelomLeCiFuFF31b0Pt9+l+tG20?=
 =?us-ascii?q?Tksuww6WaE1h0qK/+gQJivyEV/MTwrUEtT89qzV1GVa92M7WC9qApgZ7YKVQe9?=
 =?us-ascii?q?Q94E1D1WLYsQx9MYetL6Rjhl4YbgR2sFni1xRxCoVcj8cqqGkmwxZ1KaKdyFlB?=
 =?us-ascii?q?bS+X3YjsOr3LLWn/5Aqga6rI1VDRztmX+r0D5+8lq1r+pg6pEEki83J509RO13?=
 =?us-ascii?q?uc55PKDBcdUJ7rU0Y38QR6qK/eYiUn+4zU0nhsO7GusjDew9IpGPclyhG4ctZf?=
 =?us-ascii?q?LaOIDhP9H9cbBsiuMuMqnVepYwkAPOBT8q40Isyne+GH2K6tIOZvgjamgX5b74?=
 =?us-ascii?q?B610KG7zB8RfLQ35YZ3/GY2ROKVy39jFi9qM/3g51LZTYIEmq51yfkHo9RarRu?=
 =?us-ascii?q?cokRDWehPtO4xs95h57rQHNY8F+jB1Ub2M6mYxaSblr93RFO2kQTu3CohSy4zz?=
 =?us-ascii?q?lsmTEzsqWfxDDOw/jldBcfOm9LRXNujFf2LYivktAaWlOlbwwolBuj+Eb7yLJX?=
 =?us-ascii?q?pKV5L2nPX0hIezL6IH1lUqu1rrCCedJA6Is0sSVLV+SxeVKaRaTnoxsZ0CPjGH?=
 =?us-ascii?q?FSxCsheDGpuZX5nhp6h3ybLHtoqHrZeMdwxQrQ5dDGRP5R2CYGSzd8iTXNGle8?=
 =?us-ascii?q?ONyp982Ol5jfquC+S36hVppLfCjr14yAszG35W9rAR25hP2zntznEQ4n0S70zd?=
 =?us-ascii?q?VqVCPIrAribYnvzai1LeVnfkxwDl/m98V6Ap1+kpc3hJwI2ngVnJSV8WAHkWfu?=
 =?us-ascii?q?K9pb363+YWEJRT4Kxd7V/Qfk1FdiLnKP24L2SHGdztF9aNm9Z2Mcwjg94NxSCK?=
 =?us-ascii?q?eI8LxEmjN4ol+5rQLSe/dxhDkcxuU16H4Gne4JohEiwTuHArAdBkRYOS3slxKV?=
 =?us-ascii?q?79GxtqlXZWCvcaSu20p6h9yuELaCogREUnbjZpgiBTNw7tl4MF/UzH3z7YTkdM?=
 =?us-ascii?q?PRbN0JsB2UjgzAj/NUKJ8qkvoKhCxnOX/yvHE/yu47iwBu0o++vISdN2pt+6e5?=
 =?us-ascii?q?CAZCNjLpf8MT5i3tjaFGk8mNxY+vGZFhGigRUJvsUPKlCzYStfXhNwaTHzwwsH?=
 =?us-ascii?q?abGbzDHQCB7EdqtW7AE5euN3uPPnkW0c1iRAWBJExYmA0UXi81npsnGQCx3sDh?=
 =?us-ascii?q?bF115jMM5l77txtMzPhnNwLkX2fbpQeobCo0SZeFIBpX6AFC+1naMciE4u1vGC?=
 =?us-ascii?q?FY+4WrrBaRJWyDewRIEWYJV1SEBlDkI7mu/MTA/PKeBuakNPvOZrOOqeNFWveM?=
 =?us-ascii?q?xJKv1JZm/jmWOsWOOHliE+M02k5ZUX9lHMTZni0FSzYLmCLVc86buBC89zV3rs?=
 =?us-ascii?q?+h8fTrWwHv5YqVB7tRK9Vv/B+2jrmZN+6NnyZ0MjJY1pIKxX/Vx7kTxl8Siydy?=
 =?us-ascii?q?dzazFbQMrzLCTKXVmqVPFR4UdztzNNdU76I7xgRCI9Pbhcjv1rFmjv85EVNFVV?=
 =?us-ascii?q?36l8GtZMwKJXy9NVzdCEaKMrSGOSPEw8XtbaygTr1Qif1etwestjaDD0/jIjOD?=
 =?us-ascii?q?miH1VxCuNOFAlj2UMAZCt4G9bBltD3PuTNbnah29Ld92gic6wbwyhnPWK2EcNS?=
 =?us-ascii?q?JwfF9Krr2V9SlYmOlwG3Rd7np5KumJgyaY4PPeKpYTsPtrBDx7luNa4HsgzbtV?=
 =?us-ascii?q?4zpJRPh0mCvUs95vrEuqkuiJyjp7ThVOrixHi56MvUVnau3l8cx4UGnJ+Fop5H?=
 =?us-ascii?q?6CAAYDpJMxEtTwtqRU4tPGmK/1IzoE+NXRq49UU8TZNsOMPWY7PBfBBjHZFk0G?=
 =?us-ascii?q?QCStOGWZgFZSxrXa2HCRr4A34rLlnJAPAutRXVg/F9sZB15jEdhEJ414CGAKi7?=
 =?us-ascii?q?me2fQP6nek5CDMTclAuYuPAuiVDvj1MR6FjP9PYB5ekuCwFpgaKoCugx8qUVJ9?=
 =?us-ascii?q?homfXhOIBd0=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AcAAAbfP5bh0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgVqBDwN/J4wRjAmCDRRolkYUgWMOAQEYAxABgUuGHyI0CQ0BAwE?=
 =?us-ascii?q?BAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmIBAgMBAhcNGQEBNgEBBQkBAQoYCRYPA?=
 =?us-ascii?q?wYDAgECAUUGAQwBBQIBAQGDHAGCAQWlN4FsM4J2AQEFgkOEfwiMFReBQD+BEYJ?=
 =?us-ascii?q?dNYRGBIYSiSEGNYE9hA1DgQSEWgWKUQmCIIRdikyBWk2EQ4J+JocHgnqFfIwfg?=
 =?us-ascii?q?wwCAgICBAUCFIFGgg0zGggbFTuCbAmCEgwXfwEOgjyEUYYEcIEFAQGKLCmCJAE?=
 =?us-ascii?q?B?=
X-IPAS-Result: =?us-ascii?q?A0AcAAAbfP5bh0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBgVq?=
 =?us-ascii?q?BDwN/J4wRjAmCDRRolkYUgWMOAQEYAxABgUuGHyI0CQ0BAwEBAQEBAQIBEwEBA?=
 =?us-ascii?q?QgNCQgpIwyCNiQBgmIBAgMBAhcNGQEBNgEBBQkBAQoYCRYPAwYDAgECAUUGAQw?=
 =?us-ascii?q?BBQIBAQGDHAGCAQWlN4FsM4J2AQEFgkOEfwiMFReBQD+BEYJdNYRGBIYSiSEGN?=
 =?us-ascii?q?YE9hA1DgQSEWgWKUQmCIIRdikyBWk2EQ4J+JocHgnqFfIwfgwwCAgICBAUCFIF?=
 =?us-ascii?q?Ggg0zGggbFTuCbAmCEgwXfwEOgjyEUYYEcIEFAQGKLCmCJAEB?=
X-IronPort-AV: E=Sophos;i="5.56,290,1539673200"; 
   d="scan'208";a="42613263"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 28 Nov 2018 03:34:25 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728253AbeK1Wfj (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 28 Nov 2018 17:35:39 -0500
Received: from fllv0016.ext.ti.com ([198.47.19.142]:45742 "EHLO
        fllv0016.ext.ti.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727673AbeK1Wfi (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 28 Nov 2018 17:35:38 -0500
Received: from fllv0034.itg.ti.com ([10.64.40.246])
        by fllv0016.ext.ti.com (8.15.2/8.15.2) with ESMTP id wASBYAg2064624;
        Wed, 28 Nov 2018 05:34:10 -0600
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=ti.com;
        s=ti-com-17Q1; t=1543404850;
        bh=17Y8UiWEuQkFJE3aNBiS1u5lA1A4pMFg6zjLpNMJtT4=;
        h=Subject:To:References:CC:From:Date:In-Reply-To;
        b=bb4cl1ZIj7ZXJzSSdOTV4EXbAvYXSHkfCW7HwR8BhKvwumhZKpCXzgsal+U1Xs1Fw
         YzJLSfoxWXUmqUGWl9Nzu17xvUNVRLzYvsQhSEGk/YRvlcTNn7M6dI96aWdLtc6dP+
         TuKkUKHSsJ4M1ZGT6gGdvMOBI5CCbZvTYnpoeACM=
Received: from DLEE109.ent.ti.com (dlee109.ent.ti.com [157.170.170.41])
        by fllv0034.itg.ti.com (8.15.2/8.15.2) with ESMTPS id wASBYA6v010881
        (version=TLSv1.2 cipher=AES256-GCM-SHA384 bits=256 verify=FAIL);
        Wed, 28 Nov 2018 05:34:10 -0600
Received: from DLEE114.ent.ti.com (157.170.170.25) by DLEE109.ent.ti.com
 (157.170.170.41) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256_P256) id 15.1.1591.10; Wed, 28
 Nov 2018 05:34:10 -0600
Received: from dlep32.itg.ti.com (157.170.170.100) by DLEE114.ent.ti.com
 (157.170.170.25) with Microsoft SMTP Server (version=TLS1_0,
 cipher=TLS_RSA_WITH_AES_256_CBC_SHA) id 15.1.1591.10 via Frontend Transport;
 Wed, 28 Nov 2018 05:34:10 -0600
Received: from [192.168.2.6] (ileax41-snat.itg.ti.com [10.172.224.153])
        by dlep32.itg.ti.com (8.14.3/8.13.8) with ESMTP id wASBY6IJ018558;
        Wed, 28 Nov 2018 05:34:07 -0600
Subject: Re: [RFC PATCH v2 07/15] usb:cdns3: Adds Device mode support -
 initialization.
To: Pawel Laszczak <pawell@cadence.com>, <devicetree@vger.kernel.org>,
        Felipe Balbi <balbi@kernel.org>
References: <1542535751-16079-1-git-send-email-pawell@cadence.com>
 <1542535751-16079-8-git-send-email-pawell@cadence.com>
CC: <gregkh@linuxfoundation.org>, <linux-usb@vger.kernel.org>,
        <linux-kernel@vger.kernel.org>, <adouglas@cadence.com>,
        <jbergsagel@ti.com>, <nsekhar@ti.com>, <nm@ti.com>,
        <sureshp@cadence.com>, <peter.chen@nxp.com>, <pjez@cadence.com>,
        <kurahul@cadence.com>
From: Roger Quadros <rogerq@ti.com>
Message-ID: <5BFE7D2E.7030702@ti.com>
Date: Wed, 28 Nov 2018 13:34:06 +0200
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:38.0) Gecko/20100101
 Thunderbird/38.6.0
MIME-Version: 1.0
In-Reply-To: <1542535751-16079-8-git-send-email-pawell@cadence.com>
Content-Type: text/plain; charset="windows-1252"
Content-Transfer-Encoding: 7bit
X-EXCLAIMER-MD-CONFIG: e1e8a2fd-e40a-4ac6-ac9b-f7e9cc9ee180
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

+Felipe.

Pawel,

Please copy Felipe Balbi as he maintains the USB gadget stack.

On 18/11/18 12:09, Pawel Laszczak wrote:
> Patch implements a set of functions responsible for initialization,
> configuration, starting and stopping device mode.
> This patch also adds new ep0.c that holds all functions related
> to endpoint 0.
> 
> Signed-off-by: Pawel Laszczak <pawell@cadence.com>
> ---
>  drivers/usb/cdns3/Kconfig         |  10 +
>  drivers/usb/cdns3/Makefile        |   1 +
>  drivers/usb/cdns3/core.c          |   5 +-
>  drivers/usb/cdns3/ep0.c           | 105 ++++++++
>  drivers/usb/cdns3/gadget-export.h |  27 +++
>  drivers/usb/cdns3/gadget.c        | 390 ++++++++++++++++++++++++++++++
>  drivers/usb/cdns3/gadget.h        |   4 +
>  7 files changed, 541 insertions(+), 1 deletion(-)
>  create mode 100644 drivers/usb/cdns3/ep0.c
>  create mode 100644 drivers/usb/cdns3/gadget-export.h
>  create mode 100644 drivers/usb/cdns3/gadget.c
> 
> diff --git a/drivers/usb/cdns3/Kconfig b/drivers/usb/cdns3/Kconfig
> index d92bc3d68eb0..b7d71b5c4f60 100644
> --- a/drivers/usb/cdns3/Kconfig
> +++ b/drivers/usb/cdns3/Kconfig
> @@ -10,6 +10,16 @@ config USB_CDNS3
>  
>  if USB_CDNS3
>  
> +config USB_CDNS3_GADGET
> +        bool "Cadence USB3 device controller"
> +        depends on USB_GADGET
> +        help
> +          Say Y here to enable device controller functionality of the
> +          cadence USBSS-DEV driver.
> +
> +          This controller support FF, HS and SS mode. It doeasn't support

s/support/supports
s/doeasn't/doesn't

> +          LS and SSP mode
> +
>  config USB_CDNS3_HOST
>          bool "Cadence USB3 host controller"
>          depends on USB_XHCI_HCD
> diff --git a/drivers/usb/cdns3/Makefile b/drivers/usb/cdns3/Makefile
> index 976117ba67ff..bea6173bf37f 100644
> --- a/drivers/usb/cdns3/Makefile
> +++ b/drivers/usb/cdns3/Makefile
> @@ -2,5 +2,6 @@ obj-$(CONFIG_USB_CDNS3)			+= cdns3.o
>  obj-$(CONFIG_USB_CDNS3_PCI_WRAP)	+= cdns3-pci.o
>  
>  cdns3-y					:= core.o drd.o
> +cdns3-$(CONFIG_USB_CDNS3_GADGET)	+= gadget.o ep0.o
>  cdns3-$(CONFIG_USB_CDNS3_HOST)          += host.o
>  cdns3-pci-y		 		:= cdns3-pci-wrap.o
> diff --git a/drivers/usb/cdns3/core.c b/drivers/usb/cdns3/core.c
> index 4cb820be9ff3..1fa233415901 100644
> --- a/drivers/usb/cdns3/core.c
> +++ b/drivers/usb/cdns3/core.c
> @@ -18,6 +18,7 @@
>  #include "gadget.h"
>  #include "core.h"
>  #include "host-export.h"
> +#include "gadget-export.h"
>  #include "drd.h"
>  
>  static inline struct cdns3_role_driver *cdns3_get_current_role_driver(struct cdns3 *cdns)
> @@ -104,7 +105,8 @@ static int cdns3_core_init_role(struct cdns3 *cdns)
>  	}
>  
>  	if (dr_mode == USB_DR_MODE_OTG || dr_mode == USB_DR_MODE_PERIPHERAL) {
> -		//TODO: implements device initialization
> +		if (cdns3_gadget_init(cdns))
> +			dev_info(dev, "doesn't support gadget\n");

dev_err() and we should should error out with error code returned by cdns3_gadget_init().

>  	}
>  
>  	if (!cdns->roles[CDNS3_ROLE_HOST] && !cdns->roles[CDNS3_ROLE_GADGET]) {
> @@ -144,6 +146,7 @@ static irqreturn_t cdns3_irq(int irq, void *data)
>  
>  static void cdns3_remove_roles(struct cdns3 *cdns)
>  {

if (dr_mode == USB_DR_MODE_OTG || dr_mode == USB_DR_MODE_PERIPHERAL)

> +	cdns3_gadget_remove(cdns);
>  	cdns3_host_remove(cdns);
>  }
>  
> diff --git a/drivers/usb/cdns3/ep0.c b/drivers/usb/cdns3/ep0.c
> new file mode 100644
> index 000000000000..c08d02665f9d
> --- /dev/null
> +++ b/drivers/usb/cdns3/ep0.c
> @@ -0,0 +1,105 @@
> +// SPDX-License-Identifier: GPL-2.0
> +/*
> + * Cadence USBSS DRD Driver - gadget side.
> + *
> + * Copyright (C) 2018 Cadence Design Systems.
> + * Copyright (C) 2017 NXP
> + *
> + * Authors: Pawel Jez <pjez@cadence.com>,
> + *          Pawel Laszczak <pawell@cadence.com>
> + *	    Peter Chen <peter.chen@nxp.com>
> + */
> +
> +#include "gadget.h"
> +
> +static struct usb_endpoint_descriptor cdns3_gadget_ep0_desc = {
> +	.bLength = USB_DT_ENDPOINT_SIZE,
> +	.bDescriptorType = USB_DT_ENDPOINT,
> +	.bmAttributes =	USB_ENDPOINT_XFER_CONTROL,
> +};
> +
> +static void cdns3_prepare_setup_packet(struct cdns3_device *priv_dev)
> +{
> +	//TODO: Implements this function
> +}
> +
> +/**
> + * cdns3_ep0_config - Configures default endpoint
> + * @priv_dev: extended gadget object
> + *
> + * Functions sets parameters: maximal packet size and enables interrupts
> + */
> +void cdns3_ep0_config(struct cdns3_device *priv_dev)
> +{
> +	struct cdns3_usb_regs __iomem *regs;
> +	u32 max_packet_size = 64;
> +
> +	regs = priv_dev->regs;
> +
> +	if (priv_dev->gadget.speed == USB_SPEED_SUPER)
> +		max_packet_size = 512;

is gadget.speed known at this point? I think it will only be known after a connection
is made.

> +
> +	if (priv_dev->ep0_request) {
> +		list_del_init(&priv_dev->ep0_request->list);
> +		priv_dev->ep0_request = NULL;
> +	}
> +
> +	priv_dev->gadget.ep0->maxpacket = max_packet_size;
> +	cdns3_gadget_ep0_desc.wMaxPacketSize = cpu_to_le16(max_packet_size);
> +
> +	/* init ep out */
> +	cdns3_select_ep(priv_dev, USB_DIR_OUT);
> +
> +	writel(EP_CFG_ENABLE | EP_CFG_MAXPKTSIZE(max_packet_size),
> +	       &regs->ep_cfg);
> +
> +	writel(EP_STS_EN_SETUPEN | EP_STS_EN_DESCMISEN | EP_STS_EN_TRBERREN,
> +	       &regs->ep_sts_en);
> +
> +	/* init ep in */
> +	cdns3_select_ep(priv_dev, USB_DIR_IN);
> +
> +	writel(EP_CFG_ENABLE | EP_CFG_MAXPKTSIZE(max_packet_size),
> +	       &regs->ep_cfg);
> +
> +	writel(EP_STS_EN_SETUPEN | EP_STS_EN_TRBERREN, &regs->ep_sts_en);
> +
> +	cdns3_set_register_bit(&regs->usb_conf, USB_CONF_U1DS | USB_CONF_U2DS);
> +	cdns3_prepare_setup_packet(priv_dev);

What happens if gadget.speed is USB_SPEED_SUPER, but was connected to a high-speed host?
Are you updating the max_packet_size on connection done?

> +}
> +
> +/**
> + * cdns3_init_ep0 Initializes software endpoint 0 of gadget
> + * @cdns3: extended gadget object
> + *
> + * Returns 0 on success, error code elsewhere
> + */
> +int cdns3_init_ep0(struct cdns3_device *priv_dev)
> +{
> +	struct cdns3_endpoint *ep0;
> +
> +	ep0 = devm_kzalloc(&priv_dev->dev, sizeof(struct cdns3_endpoint),
> +			   GFP_KERNEL);
> +
> +	if (!ep0)
> +		return -ENOMEM;
> +
> +	ep0->cdns3_dev = priv_dev;
> +	sprintf(ep0->name, "ep0");
> +
> +	/* fill linux fields */
> +	//TODO: implements cdns3_gadget_ep0_ops object
> +	//ep0->endpoint.ops = &cdns3_gadget_ep0_ops;
> +	ep0->endpoint.maxburst = 1;
> +	usb_ep_set_maxpacket_limit(&ep0->endpoint, ENDPOINT0_MAX_PACKET_LIMIT);
> +	ep0->endpoint.address = 0;
> +	ep0->endpoint.caps.type_control = 1;
> +	ep0->endpoint.caps.dir_in = 1;
> +	ep0->endpoint.caps.dir_out = 1;
> +	ep0->endpoint.name = ep0->name;
> +	ep0->endpoint.desc = &cdns3_gadget_ep0_desc;
> +	priv_dev->gadget.ep0 = &ep0->endpoint;
> +	INIT_LIST_HEAD(&ep0->request_list);
> +
> +	return 0;
> +}
> diff --git a/drivers/usb/cdns3/gadget-export.h b/drivers/usb/cdns3/gadget-export.h
> new file mode 100644
> index 000000000000..257e5e0eef31
> --- /dev/null
> +++ b/drivers/usb/cdns3/gadget-export.h
> @@ -0,0 +1,27 @@
> +/* SPDX-License-Identifier: GPL-2.0 */
> +/*
> + * Cadence USBSS DRD Driver -Gadget Export APIs
> + *
> + * Copyright (C) 2017 NXP
> + *
> + * Authors: Peter Chen <peter.chen@nxp.com>
> + */
> +#ifndef __LINUX_CDNS3_GADGET_EXPORT
> +#define __LINUX_CDNS3_GADGET_EXPORT
> +
> +#ifdef CONFIG_USB_CDNS3_GADGET
> +
> +int cdns3_gadget_init(struct cdns3 *cdns);
> +void cdns3_gadget_remove(struct cdns3 *cdns);
> +#else
> +
> +static inline int cdns3_gadget_init(struct cdns3 *cdns)
> +{
> +	return -ENXIO;
> +}
> +
> +static inline void cdns3_gadget_remove(struct cdns3 *cdns) { }
> +
> +#endif
> +
> +#endif /* __LINUX_CDNS3_GADGET_EXPORT */
> diff --git a/drivers/usb/cdns3/gadget.c b/drivers/usb/cdns3/gadget.c
> new file mode 100644
> index 000000000000..376b68b13d1b
> --- /dev/null
> +++ b/drivers/usb/cdns3/gadget.c
> @@ -0,0 +1,390 @@
> +// SPDX-License-Identifier: GPL-2.0
> +/*
> + * Cadence USBSS DRD Driver - gadget side.
> + *
> + * Copyright (C) 2018 Cadence Design Systems.
> + * Copyright (C) 2017 NXP
> + *
> + * Authors: Pawel Jez <pjez@cadence.com>,
> + *          Pawel Laszczak <pawell@cadence.com>
> + *	    Peter Chen <peter.chen@nxp.com>
> + */
> +
> +#include <linux/dma-mapping.h>
> +#include <linux/usb/gadget.h>
> +
> +#include "core.h"
> +#include "gadget-export.h"
> +#include "gadget.h"
> +
> +/**
> + * cdns3_set_register_bit - set bit in given register.
> + * @ptr: address of device controller register to be read and changed
> + * @mask: bits requested to set
> + */
> +void cdns3_set_register_bit(void __iomem *ptr, u32 mask)
> +{
> +	mask = readl(ptr) | mask;
> +	writel(mask, ptr);
> +}

static inline?
I'd get rid of this function if possible. You are using it only once
and it is easier to read code if setting the bitmask is done plainly
instead of hiding it behind a function.

> +
> +/**
> + * select_ep - selects endpoint
> + * @priv_dev:  extended gadget object
> + * @ep: endpoint address
> + */
> +void cdns3_select_ep(struct cdns3_device *priv_dev, u32 ep)
> +{
> +	if (priv_dev->selected_ep == ep)
> +		return;

I didn't understand the purpose of this function. You can only select the EP once?

> +
> +	dev_dbg(&priv_dev->dev, "Ep sel: 0x%02x\n", ep);

You should move to use trace-points instead of dev_dbg.

> +	priv_dev->selected_ep = ep;
> +	writel(ep, &priv_dev->regs->ep_sel);
> +}
> +
> +/**
> + * cdns3_irq_handler - irq line interrupt handler
> + * @cdns: cdns3 instance
> + *
> + * Returns IRQ_HANDLED when interrupt raised by USBSS_DEV,
> + * IRQ_NONE when interrupt raised by other device connected
> + * to the irq line
> + */
> +static irqreturn_t cdns3_irq_handler_thread(struct cdns3 *cdns)
> +{
> +	irqreturn_t ret = IRQ_NONE;
> +	//TODO: implements this function
> +	return ret;
> +}
> +
> +static void cdns3_gadget_config(struct cdns3_device *priv_dev)
> +{
> +	struct cdns3_usb_regs __iomem *regs = priv_dev->regs;
> +
> +	cdns3_ep0_config(priv_dev);
> +
> +	/* enable interrupts for endpoint 0 (in and out) */
> +	writel(EP_IEN_EP_OUT0 | EP_IEN_EP_IN0, &regs->ep_ien);
> +
> +	/* enable generic interrupt*/
> +	writel(USB_IEN_INIT, &regs->usb_ien);
> +	writel(USB_CONF_CLK2OFFDS | USB_CONF_L1DS, &regs->usb_conf);
> +	writel(USB_CONF_DMULT, &regs->usb_conf);
> +	writel(USB_CONF_DEVEN, &regs->usb_conf);

If you are enabling interrupts in this patch you should handle them in the ISR.

> +}
> +
> +/**
> + * cdns3_init_ep Initializes software endpoints of gadget
> + * @cdns3: extended gadget object
> + *
> + * Returns 0 on success, error code elsewhere
> + */
> +static int cdns3_init_ep(struct cdns3_device *priv_dev)
> +{
> +	u32 ep_enabled_reg, iso_ep_reg;
> +	struct cdns3_endpoint *priv_ep;
> +	int found_endpoints = 0;
> +	int ep_dir, ep_number;
> +	u32 ep_mask;
> +	int i;
> +
> +	/* Read it from USB_CAP3 to USB_CAP5 */
> +	ep_enabled_reg = readl(&priv_dev->regs->usb_cap3);
> +	iso_ep_reg = readl(&priv_dev->regs->usb_cap4);
> +
> +	dev_dbg(&priv_dev->dev, "Initializing non-zero endpoints\n");
> +
> +	for (i = 0; i < USB_SS_ENDPOINTS_MAX_COUNT; i++) {

CDNS3_USB_SS_ENDPOINTS_MAX_COUNT

> +		ep_number = (i / 2) + 1;
> +		ep_dir = i % 2;
> +		ep_mask = BIT((16 * ep_dir) + ep_number);
> +
> +		if (!(ep_enabled_reg & ep_mask))
> +			continue;
> +
> +		priv_ep = devm_kzalloc(&priv_dev->dev, sizeof(*priv_ep),
> +				       GFP_KERNEL);
> +		if (!priv_ep)
> +			return -ENOMEM;
> +
> +		/* set parent of endpoint object */
> +		priv_ep->cdns3_dev = priv_dev;
> +		priv_dev->eps[found_endpoints++] = priv_ep;
> +
> +		snprintf(priv_ep->name, sizeof(priv_ep->name), "ep%d%s",
> +			 ep_number, !!ep_dir ? "in" : "out");
> +		priv_ep->endpoint.name = priv_ep->name;
> +
> +		usb_ep_set_maxpacket_limit(&priv_ep->endpoint,
> +					   ENDPOINT_MAX_PACKET_LIMIT);

CDNS3_ENDPOINT_MAX_PACKET_LIMIT

> +		priv_ep->endpoint.max_streams = ENDPOINT_MAX_STREAMS;

CDNS3_ENDPOINT_MAX_STREAMS

> +		//TODO: Add implementation of cdns3_gadget_ep_ops
> +		//priv_ep->endpoint.ops = &cdns3_gadget_ep_ops;
> +		if (ep_dir)
> +			priv_ep->endpoint.caps.dir_in = 1;
> +		else
> +			priv_ep->endpoint.caps.dir_out = 1;
> +
> +		if (iso_ep_reg & ep_mask)
> +			priv_ep->endpoint.caps.type_iso = 1;
> +
> +		priv_ep->endpoint.caps.type_bulk = 1;
> +		priv_ep->endpoint.caps.type_int = 1;
> +		priv_ep->endpoint.maxburst = CDNS3_EP_BUF_SIZE - 1;
> +
> +		priv_ep->flags = 0;
> +
> +		dev_info(&priv_dev->dev, "Initialized  %s support: %s %s\n",
> +			 priv_ep->name,
> +			 priv_ep->endpoint.caps.type_bulk ? "BULK, INT" : "",
> +			 priv_ep->endpoint.caps.type_iso ? "ISO" : "");
> +
> +		list_add_tail(&priv_ep->endpoint.ep_list,
> +			      &priv_dev->gadget.ep_list);
> +		INIT_LIST_HEAD(&priv_ep->request_list);
> +		INIT_LIST_HEAD(&priv_ep->ep_match_pending_list);
> +	}
> +
> +	priv_dev->ep_nums = found_endpoints;
> +	return 0;
> +}
> +
> +static void cdns3_gadget_release(struct device *dev)
> +{
> +	struct cdns3_device *priv_dev;
> +
> +	priv_dev = container_of(dev, struct cdns3_device, dev);
> +	kfree(priv_dev);
> +}
> +
> +static int __cdns3_gadget_init(struct cdns3 *cdns)
> +{
> +	struct cdns3_device *priv_dev;
> +	struct device *dev;
> +	int ret;
> +
> +	priv_dev = kzalloc(sizeof(*priv_dev), GFP_KERNEL);
> +	if (!priv_dev)
> +		return -ENOMEM;
> +
> +	dev = &priv_dev->dev;
> +	dev->release = cdns3_gadget_release;
> +	dev->parent = cdns->dev;
> +	dev_set_name(dev, "gadget-cdns3");
> +	cdns->gadget_dev = dev;
> +
> +	priv_dev->sysdev = cdns->dev;
> +	ret = device_register(dev);

Why do you need to create this dummy device? you could just use cdns3->dev.

> +	if (ret)
> +		goto err1;
> +
> +	priv_dev->regs = cdns->dev_regs;
> +
> +	/* fill gadget fields */
> +	priv_dev->gadget.max_speed = USB_SPEED_SUPER;
> +	priv_dev->gadget.speed = USB_SPEED_UNKNOWN;
> +	//TODO: Add implementation of cdns3_gadget_ops
> +	//priv_dev->gadget.ops = &cdns3_gadget_ops;
> +	priv_dev->gadget.name = "usb-ss-gadget";
> +	priv_dev->gadget.sg_supported = 1;
> +	priv_dev->is_connected = 0;
> +
> +	spin_lock_init(&priv_dev->lock);
> +
> +	priv_dev->in_standby_mode = 1;
> +
> +	/* initialize endpoint container */
> +	INIT_LIST_HEAD(&priv_dev->gadget.ep_list);
> +	INIT_LIST_HEAD(&priv_dev->ep_match_list);
> +
> +	ret = cdns3_init_ep0(priv_dev);
> +	if (ret) {
> +		dev_err(dev, "Failed to create endpoint 0\n");
> +		ret = -ENOMEM;

why not just use the ret as is.

> +		goto err2;
> +	}
> +
> +	ret = cdns3_init_ep(priv_dev);
> +	if (ret) {
> +		dev_err(dev, "Failed to create non zero endpoints\n");
> +		ret = -ENOMEM;

here too

> +		goto err2;
> +	}
> +
> +	/* allocate memory for default endpoint TRB */
> +	priv_dev->trb_ep0 = dma_alloc_coherent(priv_dev->sysdev, 24,

what is 24?
In error path you are using TRB_SIZE * 2. Should we be using that here too?


> +					       &priv_dev->trb_ep0_dma, GFP_DMA);
> +	if (!priv_dev->trb_ep0) {
> +		dev_err(dev, "Failed to allocate memory for ep0 TRB\n");
> +		ret = -ENOMEM;
> +		goto err2;
> +	}
> +
> +	/* allocate memory for setup packet buffer */
> +	priv_dev->setup = dma_alloc_coherent(priv_dev->sysdev, 8,

is 8 enough for all use cases? What about vendor specific setup requests?

> +					     &priv_dev->setup_dma, GFP_DMA);
> +	if (!priv_dev->setup) {
> +		dev_err(dev, "Failed to allocate memory for SETUP buffer\n");
> +		ret = -ENOMEM;
> +		goto err3;
> +	}
> +
> +	dev_dbg(dev, "Device Controller version: %08x\n",
> +		readl(&priv_dev->regs->usb_cap6));
> +	dev_dbg(dev, "USB Capabilities:: %08x\n",
> +		readl(&priv_dev->regs->usb_cap1));
> +	dev_dbg(dev, "On-Chip memory cnfiguration: %08x\n",
> +		readl(&priv_dev->regs->usb_cap2));
> +
> +	/* add USB gadget device */
> +	ret = usb_add_gadget_udc(&priv_dev->dev, &priv_dev->gadget);
> +	if (ret < 0) {
> +		dev_err(dev, "Failed to register USB device controller\n");
> +		goto err4;
> +	}
> +
> +	priv_dev->zlp_buf = kzalloc(ENDPOINT_ZLP_BUF_SIZE, GFP_KERNEL);
> +	if (!priv_dev->zlp_buf) {
> +		ret = -ENOMEM;
> +		goto err4;
> +	}

how about allocating zlp_buf before usb_add_gadget_udc()?

> +
> +	return 0;
> +err4:
> +	dma_free_coherent(priv_dev->sysdev, 8, priv_dev->setup,
> +			  priv_dev->setup_dma);
> +err3:
> +	dma_free_coherent(priv_dev->sysdev, TRB_SIZE * 2, priv_dev->trb_ep0,
> +			  priv_dev->trb_ep0_dma);
> +err2:
> +	device_del(dev);
> +err1:
> +	put_device(dev);
> +	cdns->gadget_dev = NULL;
> +	return ret;
> +}
> +
> +/**
> + * cdns3_gadget_remove: parent must call this to remove UDC
> + *
> + * cdns: cdns3 instance
> + */
> +void cdns3_gadget_remove(struct cdns3 *cdns)

how about calling this cdns3_gadget_exit() to complememnt cdns3_gadget_init()

> +{
> +	struct cdns3_device *priv_dev;
> +
> +	if (!cdns->roles[CDNS3_ROLE_GADGET])
> +		return;

why this check? It will lead to an unbalanced exit() and future init().

> +
> +	priv_dev = container_of(cdns->gadget_dev, struct cdns3_device, dev);
> +	usb_del_gadget_udc(&priv_dev->gadget);
> +	dma_free_coherent(priv_dev->sysdev, 8, priv_dev->setup,
> +			  priv_dev->setup_dma);
> +	dma_free_coherent(priv_dev->sysdev, TRB_SIZE * 2, priv_dev->trb_ep0,
> +			  priv_dev->trb_ep0_dma);

You need to free all memory allocation done in cdns3_init_ep0() and cdns3_init_ep()
else we eat memory on every role switch if we plan on getting rid of the dummy gadget_dev.

> +	device_unregister(cdns->gadget_dev);
> +	cdns->gadget_dev = NULL;
> +	kfree(priv_dev->zlp_buf);
> +}
> +
> +static int cdns3_gadget_start(struct cdns3 *cdns)
> +{
> +	struct cdns3_device *priv_dev = container_of(cdns->gadget_dev,
> +			struct cdns3_device, dev);
> +	unsigned long flags;
> +
> +	pm_runtime_get_sync(cdns->dev);

This is another reason why we shouldn't be creating a dummy gadget_dev.
PM is tied to cdns->dev.

> +	spin_lock_irqsave(&priv_dev->lock, flags);
> +	priv_dev->start_gadget = 1;
> +
> +	if (!priv_dev->gadget_driver) {
> +		spin_unlock_irqrestore(&priv_dev->lock, flags);
> +		return 0;
> +	}
> +
> +	cdns3_gadget_config(priv_dev);
> +	priv_dev->in_standby_mode = 0;
> +	spin_unlock_irqrestore(&priv_dev->lock, flags);
> +	return 0;
> +}
> +
> +static void __cdns3_gadget_stop(struct cdns3 *cdns)
> +{
> +	struct cdns3_device *priv_dev;
> +	unsigned long flags;
> +
> +	priv_dev = container_of(cdns->gadget_dev, struct cdns3_device, dev);
> +
> +	if (priv_dev->gadget_driver)
> +		priv_dev->gadget_driver->disconnect(&priv_dev->gadget);
> +
> +	usb_gadget_disconnect(&priv_dev->gadget);
> +	spin_lock_irqsave(&priv_dev->lock, flags);
> +	priv_dev->gadget.speed = USB_SPEED_UNKNOWN;
> +
> +	/* disable interrupt for device */
> +	writel(0, &priv_dev->regs->usb_ien);
> +	writel(USB_CONF_DEVDS, &priv_dev->regs->usb_conf);
> +	priv_dev->start_gadget = 0;
> +	spin_unlock_irqrestore(&priv_dev->lock, flags);
> +}
> +
> +static void cdns3_gadget_stop(struct cdns3 *cdns)
> +{
> +	if (cdns->role == CDNS3_ROLE_GADGET)
> +		__cdns3_gadget_stop(cdns);

Why worry about role here? That should be job of core/drd driver.

> +
> +	pm_runtime_mark_last_busy(cdns->dev);
> +	pm_runtime_put_autosuspend(cdns->dev);
> +}
> +
> +static int cdns3_gadget_suspend(struct cdns3 *cdns, bool do_wakeup)
> +{
> +	__cdns3_gadget_stop(cdns);
> +	return 0;
> +}
> +
> +static int cdns3_gadget_resume(struct cdns3 *cdns, bool hibernated)
> +{
> +	struct cdns3_device *priv_dev;
> +	unsigned long flags;
> +
> +	priv_dev = container_of(cdns->gadget_dev, struct cdns3_device, dev);
> +	spin_lock_irqsave(&priv_dev->lock, flags);
> +	priv_dev->start_gadget = 1;

who is using this start_gadget flag?

> +	if (!priv_dev->gadget_driver) {
> +		spin_unlock_irqrestore(&priv_dev->lock, flags);
> +		return 0;
> +	}
> +
> +	cdns3_gadget_config(priv_dev);
> +	priv_dev->in_standby_mode = 0;
> +	spin_unlock_irqrestore(&priv_dev->lock, flags);
> +	return 0;
> +}
> +
> +/**
> + * cdns3_gadget_init - initialize device structure
> + *
> + * cdns: cdns3 instance
> + *
> + * This function initializes the gadget.
> + */
> +int cdns3_gadget_init(struct cdns3 *cdns)
> +{
> +	struct cdns3_role_driver *rdrv;
> +
> +	rdrv = devm_kzalloc(cdns->dev, sizeof(*rdrv), GFP_KERNEL);
> +	if (!rdrv)
> +		return -ENOMEM;
> +
> +	rdrv->start	= cdns3_gadget_start;
> +	rdrv->stop	= cdns3_gadget_stop;

Why not use gadget_init()/gadget_exit() here? That sounds much cleaner
as you won't have ISR's active after a role stop.

> +	rdrv->suspend	= cdns3_gadget_suspend;
> +	rdrv->resume	= cdns3_gadget_resume;
> +	rdrv->irq	= cdns3_irq_handler_thread;
> +	rdrv->name	= "gadget";
> +	cdns->roles[CDNS3_ROLE_GADGET] = rdrv;
> +	return __cdns3_gadget_init(cdns);
> +}
> diff --git a/drivers/usb/cdns3/gadget.h b/drivers/usb/cdns3/gadget.h
> index 75ca6214e79a..3b0d4d2e4831 100644
> --- a/drivers/usb/cdns3/gadget.h
> +++ b/drivers/usb/cdns3/gadget.h
> @@ -1068,4 +1068,8 @@ struct cdns3_device {
>  	struct usb_request		*pending_status_request;
>  };
>  
> +void cdns3_set_register_bit(void __iomem *ptr, u32 mask);
> +int cdns3_init_ep0(struct cdns3_device *priv_dev);
> +void cdns3_ep0_config(struct cdns3_device *priv_dev);
> +void cdns3_select_ep(struct cdns3_device *priv_dev, u32 ep);
>  #endif /* __LINUX_CDNS3_GADGET */
> 

cheers,
-roger

-- 
Texas Instruments Finland Oy, Porkkalankatu 22, 00180 Helsinki.
Y-tunnus/Business ID: 0615521-4. Kotipaikka/Domicile: Helsinki
