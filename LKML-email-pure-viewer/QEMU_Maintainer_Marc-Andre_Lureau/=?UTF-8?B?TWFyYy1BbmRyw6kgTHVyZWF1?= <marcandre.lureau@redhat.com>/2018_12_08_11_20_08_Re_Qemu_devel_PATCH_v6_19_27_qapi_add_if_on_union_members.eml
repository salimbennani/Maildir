Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 09 Dec 2018 18:55:41 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 699A55803E4
	for <like.xu@linux.intel.com>; Sat,  8 Dec 2018 03:38:32 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga007-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 08 Dec 2018 03:38:32 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AjilfqR/Rp2MWZ/9uRHKM819IXTAuvvDOBiVQ1KB+?=
 =?us-ascii?q?0+8WIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CSmVBUMReWSxPDI2/?=
 =?us-ascii?q?cYUAE+UPM/tAr4T/pVUDogayCAewCOzx0T9FnWP23bQg3ug9DQ3KwA4tEtQTu3?=
 =?us-ascii?q?rUttX1M6ISXPiywqbS1zXMc+pa1Cv76IfVaBAmu+yHU7RtccrL10YgDR7FhUiX?=
 =?us-ascii?q?pIzgJTyVzPgCvHKd7+V9T+KglXQrqwVsoji12MgjkJTJi5kPyl/a6Cp5wJw6Jc?=
 =?us-ascii?q?GiREFnZt6kFYJduieHPIV4RcMiRntnuCc8yrAepZ66fDAKx4o9yx7ZcfOHdpaH?=
 =?us-ascii?q?7xT+X+iSOTd1nGxpdK68ihqo7ESs1+7xWtOq3FtEridJiMTAu3IV2xDN9sSKTu?=
 =?us-ascii?q?Fx80Sh1DqVygze6/1ILVopmaffK5MsxKM7mIAJvkTZBCD2nV37jK+IeUUg/eil?=
 =?us-ascii?q?8+DnYrT9pp+ALI94kA7+MqIzmsClBuQ4KAcOU3Ca+eS6yrLj4VX0TKtWgvA1iK?=
 =?us-ascii?q?XVrY3WKMcBqqKnDQJY0pwv5wu9Aju+1dQXh3gHLFZLeBKdiIjpPknDIOnmAve6?=
 =?us-ascii?q?nlSgiSpkyO7YPrL/BpXBN2PMkLD8fbZ790FT1hEzwddb55JVCbEOPuj/W0DstN?=
 =?us-ascii?q?HACh85Mgq0w/voCdln14MeX36PDbGdMK/IrVCI4ecvLvKKZI8Svjb9JP4l5+P0?=
 =?us-ascii?q?gX8+g18dcrGl3YELZ3CgAvRmP0KZbGLogtcAEmcFoBAyTeP3iFCZVT5TZnCyX7?=
 =?us-ascii?q?8z5z0hCYKmC5vDSZ6pgLCbwCi7GZhWNSh7DEuRGyLoa5mcQKVLLyaTOdN61DoD?=
 =?us-ascii?q?U7enVskmzx7psQb7z79uKK3T4jEZspT4k8F44vCWmRws+DgnMsKGzmvYSmh1mn?=
 =?us-ascii?q?8PFSY72b06rUFjx1PGy6VhnvFDCfRV4PVGVBp8MoTTmPdnAdL/UR6UY9GSVVy9?=
 =?us-ascii?q?Sc+nCzxictVkifYUZkxnBs6+gwqHlw+jGbwIjPbDUJUu96jGwlDrKsp9wmqA36?=
 =?us-ascii?q?4k2QoIWMxKYEivnKU63g7fHQ+Bt1iDmq+3PfAZ1TTG/WGP12fIuFxCXQdteb/I?=
 =?us-ascii?q?UXAWeg3dqtGvtRCKdKOnFblyalgJ8sWFMKYfL4Sx1Vg=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AWAAAyrAtcmBHrdtBkHQEBBQEHBQGBU?=
 =?us-ascii?q?wYBCwGBMIE5gRYTg3qIeIsxgg2Hd4IRjUmBcxQYAxGEQIMdIjYHDQEDAQEBAQE?=
 =?us-ascii?q?BAgETAQEBAQEICwsGGw4jDII2BQIDGgEGglsBAQEBAgEBAiAEHwopAwMBAgYBA?=
 =?us-ascii?q?QoLDQICIgQCAgMBHhIBBQEcBhMFA4MZAYF5CAEEmzc8iw18M4kjgQ4SeYcsg2q?=
 =?us-ascii?q?CFoERgxKFAYMEglcCjz16kD4HAocIikcYgimPFJE0h20PIYEsAoIFMxojUDEGg?=
 =?us-ascii?q?jUJilCBFIRzPDGBB4lRgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AWAAAyrAtcmBHrdtBkHQEBBQEHBQGBUwYBCwGBMIE5gRY?=
 =?us-ascii?q?Tg3qIeIsxgg2Hd4IRjUmBcxQYAxGEQIMdIjYHDQEDAQEBAQEBAgETAQEBAQEIC?=
 =?us-ascii?q?wsGGw4jDII2BQIDGgEGglsBAQEBAgEBAiAEHwopAwMBAgYBAQoLDQICIgQCAgM?=
 =?us-ascii?q?BHhIBBQEcBhMFA4MZAYF5CAEEmzc8iw18M4kjgQ4SeYcsg2qCFoERgxKFAYMEg?=
 =?us-ascii?q?lcCjz16kD4HAocIikcYgimPFJE0h20PIYEsAoIFMxojUDEGgjUJilCBFIRzPDG?=
 =?us-ascii?q?BB4lRgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,330,1539673200"; 
   d="scan'208";a="55084673"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 08 Dec 2018 03:38:31 -0800
Received: from localhost ([::1]:50453 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gVawI-00080E-Dy
	for like.xu@linux.intel.com; Sat, 08 Dec 2018 06:38:30 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:60737)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <mlureau@redhat.com>) id 1gVaeq-0000Me-3S
	for qemu-devel@nongnu.org; Sat, 08 Dec 2018 06:20:29 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <mlureau@redhat.com>) id 1gVaei-0005U5-Sa
	for qemu-devel@nongnu.org; Sat, 08 Dec 2018 06:20:26 -0500
Received: from mail-qt1-f195.google.com ([209.85.160.195]:34574)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <mlureau@redhat.com>) id 1gVaei-0005Tn-N4
	for qemu-devel@nongnu.org; Sat, 08 Dec 2018 06:20:20 -0500
Received: by mail-qt1-f195.google.com with SMTP id r14so7469753qtp.1
	for <qemu-devel@nongnu.org>; Sat, 08 Dec 2018 03:20:20 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:mime-version:references:in-reply-to:from:date
	:message-id:subject:to:cc:content-transfer-encoding;
	bh=c1QyAEVCdizLDs1dw6xuMWgm6/gN1PGCSmOOuuAY8pg=;
	b=jxTmWpNKKDQF+DueqGt8NDYawTtjjzRJ+FNZy1vmNqTyzwM2j5RefTLo7JbTbzlwsG
	bbPDk27P1htcvSmhi75+EbLE6nKDNEDgYdTJe7yeSb1upTV1LjpB0Ply9/k63roWRMsF
	dX0nn/UkbZgGpH9WKqHVt8nAbFCkn/XkN+f5NbKkSBIl9WRfb8Q9/86mm0CwxB5XceFb
	wPxaJx3cuLoD2zG98Sxwrt0wSW4kvZwL28fKESFXl3c21/cBWf3DguZ8dIlcvPCOLdiR
	gkogpz1sN6J9/qiG45UxwXKKNGfyVjHgwInrGJSlVzytdO43izGifEy9I5dcL/PSbaBc
	m7xw==
X-Gm-Message-State: AA+aEWZebUGnGay7kKG/ratxnbWRbBPNN4EuCLN0kET0y/F7fxhETJPD
	SsY6f1fgqs0lbbWtj7GtZ0n5r+rsbfpOm7c7u80AXo45
X-Google-Smtp-Source: AFSGD/UTYTbUcI9OftpMuTp4QZlbRAT1v7Ivf6bjZ98ACu5ml0JLaonvXuLAaObSjA92Y8I0u5SuZpSGpNBIP97XCjI=
X-Received: by 2002:ac8:6bc5:: with SMTP id b5mr5255334qtt.182.1544268020071; 
	Sat, 08 Dec 2018 03:20:20 -0800 (PST)
MIME-Version: 1.0
References: <20180706105753.26700-1-marcandre.lureau@redhat.com>
	<20180706105753.26700-20-marcandre.lureau@redhat.com>
	<87efaua9wu.fsf@dusky.pond.sub.org>
In-Reply-To: <87efaua9wu.fsf@dusky.pond.sub.org>
From: =?UTF-8?B?TWFyYy1BbmRyw6kgTHVyZWF1?= <marcandre.lureau@redhat.com>
Date: Sat, 8 Dec 2018 15:20:08 +0400
Message-ID: <CAMxuvazcRTvbL-eF49F_grkyaHwjsta5qCb6i1tKNZT8H5O3bQ@mail.gmail.com>
To: "Armbruster, Markus" <armbru@redhat.com>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.85.160.195
Subject: Re: [Qemu-devel] [PATCH v6 19/27] qapi: add 'if' on union members
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: qemu-devel <qemu-devel@nongnu.org>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Hi
On Thu, Dec 6, 2018 at 8:37 PM Markus Armbruster <armbru@redhat.com> wrote:
>
> In the subject, s/ on / to /.
>
> Marc-Andr=C3=A9 Lureau <marcandre.lureau@redhat.com> writes:
>
> > Add 'if' key to union members:
> >
> > { 'union': 'TestIfUnion', 'data':
> >     'mem': { 'type': 'str', 'if': 'COND'} }
> >
> > Generated code is not changed by this patch but with "qapi: add #if
> > conditions to generated code".
>
> My suggestion on PATCH 13's commit message applies.

ok

>
> > Signed-off-by: Marc-Andr=C3=A9 Lureau <marcandre.lureau@redhat.com>
> > ---
> >  scripts/qapi/common.py                  | 17 +++++++++--------
> >  tests/qapi-schema/qapi-schema-test.json |  7 ++++++-
> >  tests/qapi-schema/qapi-schema-test.out  | 10 ++++++++++
> >  tests/qapi-schema/test-qapi.py          |  1 +
> >  4 files changed, 26 insertions(+), 9 deletions(-)
> >
> > diff --git a/scripts/qapi/common.py b/scripts/qapi/common.py
> > index 13fbb28493..e1bd9a22ba 100644
> > --- a/scripts/qapi/common.py
> > +++ b/scripts/qapi/common.py
> > @@ -813,7 +813,7 @@ def check_union(expr, info):
> >      for (key, value) in members.items():
> >          check_name(info, "Member of union '%s'" % name, key)
> >          source =3D "member '%s' of union '%s'" % (key, name)
> > -        check_known_keys(info, source, value, ['type'], [])
> > +        check_known_keys(info, source, value, ['type'], ['if'])
> >          typ =3D value['type']
> >
> >          # Each value must name a known type
> > @@ -1496,8 +1496,8 @@ class QAPISchemaObjectTypeVariants(object):
> >  class QAPISchemaObjectTypeVariant(QAPISchemaObjectTypeMember):
> >      role =3D 'branch'
> >
> > -    def __init__(self, name, typ):
> > -        QAPISchemaObjectTypeMember.__init__(self, name, typ, False)
> > +    def __init__(self, name, typ, ifcond=3DNone):
> > +        QAPISchemaObjectTypeMember.__init__(self, name, typ, False, if=
cond)
> >
> >
> >  class QAPISchemaAlternateType(QAPISchemaType):
> > @@ -1777,14 +1777,14 @@ class QAPISchema(object):
> >      def _make_variant(self, case, typ):
> >          return QAPISchemaObjectTypeVariant(case, typ)
> >
> > -    def _make_simple_variant(self, case, typ, info):
> > +    def _make_simple_variant(self, case, typ, ifcond, info):
> >          if isinstance(typ, list):
> >              assert len(typ) =3D=3D 1
> >              typ =3D self._make_array_type(typ[0], info)
> >          typ =3D self._make_implicit_object_type(
> >              typ, info, None, self.lookup_type(typ),
> >              'wrapper', [self._make_member('data', typ, None, info)])
> > -        return QAPISchemaObjectTypeVariant(case, typ)
> > +        return QAPISchemaObjectTypeVariant(case, typ, ifcond)
> >
> >      def _def_union_type(self, expr, info, doc):
> >          name =3D expr['union']
> > @@ -1802,10 +1802,11 @@ class QAPISchema(object):
> >                          for (key, value) in data.items()]
> >              members =3D []
> >          else:
> > -            variants =3D [self._make_simple_variant(key, value['type']=
, info)
> > +            variants =3D [self._make_simple_variant(key, value['type']=
,
> > +                                                  value.get('if'), inf=
o)
> >                          for (key, value) in data.items()]
> > -            typ =3D self._make_implicit_enum_type(name, info, ifcond,
> > -                                                [v.name for v in varia=
nts])
> > +            enum =3D [{'name': v.name, 'if': v.ifcond} for v in varian=
ts]
> > +            typ =3D self._make_implicit_enum_type(name, info, ifcond, =
enum)
> >              tag_member =3D QAPISchemaObjectTypeMember('type', typ, Fal=
se)
> >              members =3D [tag_member]
> >          self._def_entity(
> > diff --git a/tests/qapi-schema/qapi-schema-test.json b/tests/qapi-schem=
a/qapi-schema-test.json
> > index 3bf440aab4..6d3c6c0b53 100644
> > --- a/tests/qapi-schema/qapi-schema-test.json
> > +++ b/tests/qapi-schema/qapi-schema-test.json
> > @@ -208,9 +208,14 @@
> >    [ 'foo', { 'name' : 'bar', 'if': 'defined(TEST_IF_ENUM_BAR)' } ],
> >    'if': 'defined(TEST_IF_ENUM)' }
> >
> > -{ 'union': 'TestIfUnion', 'data': { 'foo': 'TestStruct' },
> > +{ 'union': 'TestIfUnion', 'data':
> > +  { 'foo': 'TestStruct',
> > +    'union_bar': { 'type': 'str', 'if': 'defined(TEST_IF_UNION_BAR)'} =
},
>
> "Union Bar" sounds like a cocktail lounge in northeast US :)
>
> Back to serious: this is a simple union.  I'd prefer to test flat
> unions.  Changing TestIfUnion accordingly could be done either before
> this patch, or on top of this series, the latter not necessarily by
> you.  Your choice.

I prefer to defer

>
> >    'if': 'defined(TEST_IF_UNION) && defined(TEST_IF_STRUCT)' }
> >
> > +{ 'command': 'TestIfUnionCmd', 'data': { 'union_cmd_arg': 'TestIfUnion=
' },
> > +  'if': 'defined(TEST_IF_UNION)' }
> > +
>
> I'm feeling dense... why does this change belong to this patch?

Hmm, no strong reason, I'll make it a separate commit.
>
> >  { 'alternate': 'TestIfAlternate', 'data': { 'foo': 'int', 'bar': 'Test=
Struct' },
> >    'if': 'defined(TEST_IF_ALT) && defined(TEST_IF_STRUCT)' }
> >
> > diff --git a/tests/qapi-schema/qapi-schema-test.out b/tests/qapi-schema=
/qapi-schema-test.out
> > index 71b84878c7..ac1069cf1f 100644
> > --- a/tests/qapi-schema/qapi-schema-test.out
> > +++ b/tests/qapi-schema/qapi-schema-test.out
> > @@ -278,12 +278,22 @@ object q_obj_TestStruct-wrapper
> >      member data: TestStruct optional=3DFalse
> >  enum TestIfUnionKind
> >      member foo
> > +    member union_bar
> > +        if ['defined(TEST_IF_UNION_BAR)']
> >      if ['defined(TEST_IF_UNION) && defined(TEST_IF_STRUCT)']
> >  object TestIfUnion
> >      member type: TestIfUnionKind optional=3DFalse
> >      tag type
> >      case foo: q_obj_TestStruct-wrapper
> > +    case union_bar: q_obj_str-wrapper
> > +        if ['defined(TEST_IF_UNION_BAR)']
> >      if ['defined(TEST_IF_UNION) && defined(TEST_IF_STRUCT)']
> > +object q_obj_TestIfUnionCmd-arg
> > +    member union_cmd_arg: TestIfUnion optional=3DFalse
> > +    if ['defined(TEST_IF_UNION)']
> > +command TestIfUnionCmd q_obj_TestIfUnionCmd-arg -> None
> > +   gen=3DTrue success_response=3DTrue boxed=3DFalse oob=3DFalse precon=
fig=3DFalse
> > +    if ['defined(TEST_IF_UNION)']
> >  alternate TestIfAlternate
> >      tag type
> >      case foo: int
> > diff --git a/tests/qapi-schema/test-qapi.py b/tests/qapi-schema/test-qa=
pi.py
> > index 69e40d87d2..d977e936c7 100644
> > --- a/tests/qapi-schema/test-qapi.py
> > +++ b/tests/qapi-schema/test-qapi.py
> > @@ -68,6 +68,7 @@ class QAPISchemaTestVisitor(QAPISchemaVisitor):
> >              print('    tag %s' % variants.tag_member.name)
> >              for v in variants.variants:
> >                  print('    case %s: %s' % (v.name, v.type.name))
> > +                QAPISchemaTestVisitor._print_if(v.ifcond, 8)
> >
> >      @staticmethod
> >      def _print_if(ifcond, indent=3D4):

