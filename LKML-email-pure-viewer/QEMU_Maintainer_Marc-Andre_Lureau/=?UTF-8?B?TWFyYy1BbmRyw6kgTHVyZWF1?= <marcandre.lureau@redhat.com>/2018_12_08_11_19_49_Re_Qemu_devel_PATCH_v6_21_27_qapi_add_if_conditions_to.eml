Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 09 Dec 2018 18:55:43 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 8CBE75803E4
	for <like.xu@linux.intel.com>; Sat,  8 Dec 2018 03:42:24 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga005-1.jf.intel.com with ESMTP; 08 Dec 2018 03:42:24 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AlyFHrxbxWJJXhs+/Tk51jOX/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpsy9Zh7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyNOAo2+?=
 =?us-ascii?q?YIUPAeQPPvhWoJXyqVUTtRuzBwuiCezyxjJGmnP5w7Y63v89EQHfxgEsA84CvG?=
 =?us-ascii?q?jWodjzKawcUfq1zK7NzTjbaP1Zwy3955TRfh09p/GDQKhwdtDMwkcpCgPFlEuf?=
 =?us-ascii?q?ppb4PziI0ekNtnKU7/B8Wu21jW4othtxrSa1yscol4nJnJwaxUrZ9Shi2oY6O8?=
 =?us-ascii?q?C3SE5hbt64CpdfqyaaN45vT84kXmpmtiE6yrgctp66eigH0Jsnxx/Da/yHboiH?=
 =?us-ascii?q?+QjvW/qWITd9nH5lZLK+hw6s/kS6zO3zTMy030hMoyFYkdfMrmgA2wLP5sWEUP?=
 =?us-ascii?q?dx41qt1DWV2wzN5OxJIVo4mbfZJpI53LI8ip4evV7AEyL2gkn6ka6belk+9uS1?=
 =?us-ascii?q?7+nqbLPrrYKGOYBukAHxKKEul9S/AesmNggOWHCW+eC91L344U35W69GjvIwkq?=
 =?us-ascii?q?nEqpzaIt4bpqGhDw9U1IYs9Qq/Ai+43NgEnnQLNk9JdA+EgoTzJV3DLvD1Ae2i?=
 =?us-ascii?q?j1muiDtrwurJPrzlApXDNHjDl7LhcK5k60FCzQoz0MlT6I9KBbEfPv3zXlb9u8?=
 =?us-ascii?q?ffDh8kNQy73/joCM562oMaWGKPAbGWPLndsF+V/u8vJ+iMZIkIuDfyMfQl5vju?=
 =?us-ascii?q?jWMnll8ZZ6WmwZwXaHWjE/RgJEWZZ3XsgtEcEWsQuQo+VuPqhEWYUTFPf3ayQ7?=
 =?us-ascii?q?485jYjBYKiDIfDRZ6ijKaO3SemBZBWYmFGClaREXbnbYmEWvEMaD6MLc9liDAL?=
 =?us-ascii?q?Sb+hS4pynSyorxLwnrp7MvLPqGpfsZP4yMMz4erVmhcvsztuAIOY2mCJSmhy2W?=
 =?us-ascii?q?QQWz4x2rs4uEF41xKP3LZ1h69lE8dO7aZMWwY+KZmO1uF/FpX+VxzMepKTRU+7?=
 =?us-ascii?q?T866KTc2SN033pkJeUkqAMiojB3Iw3+3BaQInaeAHp0+//Hg2C27Dtx4wWzbz7?=
 =?us-ascii?q?UslR1uZ8JVNnC9zOYr/hLWDZTUu1+Um6ajaeIX2yubp0mZym/bmUhCW0tZV6nf?=
 =?us-ascii?q?3Dg7e1HbpMmxskbLVbSnD7g9P01F1NSPI7ZicNDljVxaAvzkPYKNMCqKh26sCE?=
 =?us-ascii?q?PQlfu3Z43wdjBYhX2FBQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ALAACgrQtcmBHrdtBkHgEGBwaBUQkLA?=
 =?us-ascii?q?YEwgTmBFhODeoh4izGCDYd3ghGNSYFzFBgHDYRAgx0iNAkNAQMBAQEBAQECARM?=
 =?us-ascii?q?BAQEBAQgLCwYbDiMMgjYFAgMaAQaCXAECAwECIAQfCikDAwECBgEBCgsNAgIiB?=
 =?us-ascii?q?AICAwEeEgEFARwGEwUDgxkBggEBBAqbHDyLDXwziSOBDhJ5ixaCFoQjgx4CgWG?=
 =?us-ascii?q?DBIJXAo89eo9pVQcChwiKRxiCKY8UixGDBIMfh20PIYElgg4zGiOBAQaCNQmCH?=
 =?us-ascii?q?hcSgziEUYEUhHM8MYEHiVGBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0ALAACgrQtcmBHrdtBkHgEGBwaBUQkLAYEwgTmBFhODeoh?=
 =?us-ascii?q?4izGCDYd3ghGNSYFzFBgHDYRAgx0iNAkNAQMBAQEBAQECARMBAQEBAQgLCwYbD?=
 =?us-ascii?q?iMMgjYFAgMaAQaCXAECAwECIAQfCikDAwECBgEBCgsNAgIiBAICAwEeEgEFARw?=
 =?us-ascii?q?GEwUDgxkBggEBBAqbHDyLDXwziSOBDhJ5ixaCFoQjgx4CgWGDBIJXAo89eo9pV?=
 =?us-ascii?q?QcChwiKRxiCKY8UixGDBIMfh20PIYElgg4zGiOBAQaCNQmCHhcSgziEUYEUhHM?=
 =?us-ascii?q?8MYEHiVGBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,330,1539673200"; 
   d="scan'208";a="43265688"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 08 Dec 2018 03:42:04 -0800
Received: from localhost ([::1]:50477 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gVazj-0002bf-Gz
	for like.xu@linux.intel.com; Sat, 08 Dec 2018 06:42:03 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:60600)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <mlureau@redhat.com>) id 1gVaeT-0008RZ-UW
	for qemu-devel@nongnu.org; Sat, 08 Dec 2018 06:20:07 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <mlureau@redhat.com>) id 1gVaeQ-0005BG-6C
	for qemu-devel@nongnu.org; Sat, 08 Dec 2018 06:20:05 -0500
Received: from mail-qt1-f193.google.com ([209.85.160.193]:43067)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <mlureau@redhat.com>) id 1gVaeP-0005Ax-VQ
	for qemu-devel@nongnu.org; Sat, 08 Dec 2018 06:20:02 -0500
Received: by mail-qt1-f193.google.com with SMTP id i7so7404551qtj.10
	for <qemu-devel@nongnu.org>; Sat, 08 Dec 2018 03:20:01 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:mime-version:references:in-reply-to:from:date
	:message-id:subject:to:cc:content-transfer-encoding;
	bh=vrGNpb/5JDoi5SMXPxo+/AZ0kyJaBJw32wFEp/UXBQg=;
	b=NI3LwFx5bJ9YrqbN02z4ZE6wWRj5I9eCa1jxcbOCBuPt94sQJep74tSIDcnOlN9iZT
	hvsizEwrbwaeHgNk0a56pVl/KgQ49J95uK2SFTPqvJdKLPWtarKgwYFa6vyjcQLReJEI
	QRcJ4Ii8uIc2ZQdqqzin+zzkdwKssBmG32YtBN6Av8Wvr07mUi/gFawOFig3wwaUUgX8
	Omp5I6IiOBpePLkSEKtLb5I8ernNQ8S0Whsg1l1Gvjucy41t13BaTlSET3KLbLmMK6fb
	GLs8p8fO6AuT2tY1H3o2fks/BwzR0zs0MOmtHUHhM/DS1IsO6PeydlWPBRXzP5er17OW
	NVhQ==
X-Gm-Message-State: AA+aEWbo/NMxixJfpn5UUu3hmeIjOzJxndhonh3pLcUbe9In6ZjYbQjU
	vXVbYASIS4oUqiw11zVHdPu6FUXZ7zrgLgxjwzpYTg==
X-Google-Smtp-Source: AFSGD/XIDCkVAwwvIGiNCwlSWnM30KFMDcthFm47FDTew4EG9HG/rn/7TjoDrAA3lAtseMvPspjXztyyVbOJgwhta9w=
X-Received: by 2002:ac8:3312:: with SMTP id t18mr5349288qta.225.1544268001540; 
	Sat, 08 Dec 2018 03:20:01 -0800 (PST)
MIME-Version: 1.0
References: <20180706105753.26700-1-marcandre.lureau@redhat.com>
	<20180706105753.26700-22-marcandre.lureau@redhat.com>
	<87bm5y8sce.fsf@dusky.pond.sub.org>
In-Reply-To: <87bm5y8sce.fsf@dusky.pond.sub.org>
From: =?UTF-8?B?TWFyYy1BbmRyw6kgTHVyZWF1?= <marcandre.lureau@redhat.com>
Date: Sat, 8 Dec 2018 15:19:49 +0400
Message-ID: <CAMxuvaz6zpraY=1U0UJ6jvneTENk9HzvoGtztvbjQJWon0CuaA@mail.gmail.com>
To: "Armbruster, Markus" <armbru@redhat.com>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.85.160.193
Subject: Re: [Qemu-devel] [PATCH v6 21/27] qapi: add #if conditions to
 generated code members
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: qemu-devel <qemu-devel@nongnu.org>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Hi
On Thu, Dec 6, 2018 at 9:42 PM Markus Armbruster <armbru@redhat.com> wrote:
>
> Marc-Andr=C3=A9 Lureau <marcandre.lureau@redhat.com> writes:
>
> > Wrap generated enum/struct members and code with #if/#endif, using the
>
> enum and struct members

ok

>
> > .ifcond members added in the previous patches.
> >
> > Some types generate both enum and struct members for example, so a
> > step-by-step is unnecessarily complicated to deal with (it would
> > easily generate invalid intermediary code).
>
> Can you give an example of a schema definition that would lead to
> complications?
>

Honestly, I don't remember well (it's been a while I wrote that code).
It must be related to implicit enums, such as union kind... If there
is no strong need to split this patch, I would rather not do that
extra work.

> >
> > Signed-off-by: Marc-Andr=C3=A9 Lureau <marcandre.lureau@redhat.com>
> > ---
> >  scripts/qapi/common.py     |  4 ++++
> >  scripts/qapi/introspect.py | 13 +++++++++----
> >  scripts/qapi/types.py      |  4 ++++
> >  scripts/qapi/visit.py      |  6 ++++++
> >  4 files changed, 23 insertions(+), 4 deletions(-)
> >
> > diff --git a/scripts/qapi/common.py b/scripts/qapi/common.py
> > index b3b64a60bf..a66c035b91 100644
> > --- a/scripts/qapi/common.py
> > +++ b/scripts/qapi/common.py
> > @@ -2098,11 +2098,13 @@ const QEnumLookup %(c_name)s_lookup =3D {
> >  ''',
> >                  c_name=3Dc_name(name))
> >      for m in members:
> > +        ret +=3D gen_if(m.ifcond)
> >          index =3D c_enum_const(name, m.name, prefix)
> >          ret +=3D mcgen('''
> >          [%(index)s] =3D "%(name)s",
> >  ''',
> >                       index=3Dindex, name=3Dm.name)
> > +        ret +=3D gen_endif(m.ifcond)
> >
> >      ret +=3D mcgen('''
> >      },
> > @@ -2124,10 +2126,12 @@ typedef enum %(c_name)s {
> >                  c_name=3Dc_name(name))
> >
> >      for m in enum_members:
> > +        ret +=3D gen_if(m.ifcond)
> >          ret +=3D mcgen('''
> >      %(c_enum)s,
> >  ''',
> >                       c_enum=3Dc_enum_const(name, m.name, prefix))
> > +        ret +=3D gen_endif(m.ifcond)
> >
> >      ret +=3D mcgen('''
> >  } %(c_name)s;
> > diff --git a/scripts/qapi/introspect.py b/scripts/qapi/introspect.py
> > index 3f1ca99f6d..bf5db51f4a 100644
> > --- a/scripts/qapi/introspect.py
> > +++ b/scripts/qapi/introspect.py
> > @@ -148,6 +148,8 @@ const QLitObject %(c_name)s =3D %(c_string)s;
> >          ret =3D {'name': member.name, 'type': self._use_type(member.ty=
pe)}
> >          if member.optional:
> >              ret['default'] =3D None
> > +        if member.ifcond:
> > +            ret =3D (ret, member.ifcond)
> >          return ret
> >
> >      def _gen_variants(self, tag_name, variants):
> > @@ -155,14 +157,16 @@ const QLitObject %(c_name)s =3D %(c_string)s;
> >                  'variants': [self._gen_variant(v) for v in variants]}
> >
> >      def _gen_variant(self, variant):
> > -        return {'case': variant.name, 'type': self._use_type(variant.t=
ype)}
> > +        return ({'case': variant.name, 'type': self._use_type(variant.=
type)},
> > +                variant.ifcond)
>
> Looks different in your rebased version at
> https://github.com/elmarco/qemu.git branch qapi-if.  I'm only skimming
> this version.
>
> Note to self: always creates the tuple form, even when there's no
> if-condition.  Differs from _gen_qlit(), which creates a tuple only when
> there's a if-condition.  Not wrong, just a bit inconsistent.
>
> >
> >      def visit_builtin_type(self, name, info, json_type):
> >          self._gen_qlit(name, 'builtin', {'json-type': json_type}, [])
> >
> >      def visit_enum_type(self, name, info, ifcond, members, prefix):
> >          self._gen_qlit(name, 'enum',
> > -                       {'values': [m.name for m in members]}, ifcond)
> > +                       {'values': [(m.name, m.ifcond) for m in members=
]},
> > +                       ifcond)
>
> Likewise.
>
> >
> >      def visit_array_type(self, name, info, ifcond, element_type):
> >          element =3D self._use_type(element_type)
> > @@ -178,8 +182,9 @@ const QLitObject %(c_name)s =3D %(c_string)s;
> >
> >      def visit_alternate_type(self, name, info, ifcond, variants):
> >          self._gen_qlit(name, 'alternate',
> > -                       {'members': [{'type': self._use_type(m.type)}
> > -                                    for m in variants.variants]}, ifco=
nd)
> > +                       {'members': [
> > +                           ({'type': self._use_type(m.type)}, m.ifcond=
)
> > +                           for m in variants.variants]}, ifcond)
>
> Likewise.
>
> >
> >      def visit_command(self, name, info, ifcond, arg_type, ret_type, ge=
n,
> >                        success_response, boxed, allow_oob, allow_precon=
fig):
> > diff --git a/scripts/qapi/types.py b/scripts/qapi/types.py
> > index 2d4a70f810..7d9eef6320 100644
> > --- a/scripts/qapi/types.py
> > +++ b/scripts/qapi/types.py
> > @@ -43,6 +43,7 @@ struct %(c_name)s {
> >  def gen_struct_members(members):
> >      ret =3D ''
> >      for memb in members:
> > +        ret +=3D gen_if(memb.ifcond)
> >          if memb.optional:
> >              ret +=3D mcgen('''
> >      bool has_%(c_name)s;
> > @@ -52,6 +53,7 @@ def gen_struct_members(members):
> >      %(c_type)s %(c_name)s;
> >  ''',
> >                       c_type=3Dmemb.type.c_type(), c_name=3Dc_name(memb=
.name))
> > +        ret +=3D gen_endif(memb.ifcond)
> >      return ret
> >
> >
> > @@ -131,11 +133,13 @@ def gen_variants(variants):
> >      for var in variants.variants:
> >          if var.type.name =3D=3D 'q_empty':
> >              continue
> > +        ret +=3D gen_if(var.ifcond)
> >          ret +=3D mcgen('''
> >          %(c_type)s %(c_name)s;
> >  ''',
> >                       c_type=3Dvar.type.c_unboxed_type(),
> >                       c_name=3Dc_name(var.name))
> > +        ret +=3D gen_endif(var.ifcond)
> >
> >      ret +=3D mcgen('''
> >      } u;
> > diff --git a/scripts/qapi/visit.py b/scripts/qapi/visit.py
> > index 24f85a2e85..82eab72b21 100644
> > --- a/scripts/qapi/visit.py
> > +++ b/scripts/qapi/visit.py
> > @@ -54,6 +54,7 @@ void visit_type_%(c_name)s_members(Visitor *v, %(c_na=
me)s *obj, Error **errp)
> >                       c_type=3Dbase.c_name())
> >
> >      for memb in members:
> > +        ret +=3D gen_if(memb.ifcond)
> >          if memb.optional:
> >              ret +=3D mcgen('''
> >      if (visit_optional(v, "%(name)s", &obj->has_%(c_name)s)) {
> > @@ -73,6 +74,7 @@ void visit_type_%(c_name)s_members(Visitor *v, %(c_na=
me)s *obj, Error **errp)
> >              ret +=3D mcgen('''
> >      }
> >  ''')
> > +        ret +=3D gen_endif(memb.ifcond)
> >
> >      if variants:
> >          ret +=3D mcgen('''
> > @@ -84,6 +86,7 @@ void visit_type_%(c_name)s_members(Visitor *v, %(c_na=
me)s *obj, Error **errp)
> >              case_str =3D c_enum_const(variants.tag_member.type.name,
> >                                      var.name,
> >                                      variants.tag_member.type.prefix)
> > +            ret +=3D gen_if(var.ifcond)
> >              if var.type.name =3D=3D 'q_empty':
> >                  # valid variant and nothing to do
> >                  ret +=3D mcgen('''
> > @@ -100,6 +103,7 @@ void visit_type_%(c_name)s_members(Visitor *v, %(c_=
name)s *obj, Error **errp)
> >                               case=3Dcase_str,
> >                               c_type=3Dvar.type.c_name(), c_name=3Dc_na=
me(var.name))
> >
> > +            ret +=3D gen_endif(var.ifcond)
> >          ret +=3D mcgen('''
> >      default:
> >          abort();
> > @@ -190,6 +194,7 @@ void visit_type_%(c_name)s(Visitor *v, const char *=
name, %(c_name)s **obj, Error
> >                  c_name=3Dc_name(name))
> >
> >      for var in variants.variants:
> > +        ret +=3D gen_if(var.ifcond)
> >          ret +=3D mcgen('''
> >      case %(case)s:
> >  ''',
> > @@ -217,6 +222,7 @@ void visit_type_%(c_name)s(Visitor *v, const char *=
name, %(c_name)s **obj, Error
> >          ret +=3D mcgen('''
> >          break;
> >  ''')
> > +        ret +=3D gen_endif(var.ifcond)
> >
> >      ret +=3D mcgen('''
> >      case QTYPE_NONE:

thanks

