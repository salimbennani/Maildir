Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 26 Nov 2018 21:53:40 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id C83B1580322
	for <like.xu@linux.intel.com>; Mon, 26 Nov 2018 05:45:03 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 26 Nov 2018 05:45:03 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A4P2BuxN+ZXRHtQgxCtkl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0K/z6rsbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRsleVyJDDY28?=
 =?us-ascii?q?YYUBDPQPMvpXoYfgv1sDrxmwCAaxCO7h1jNHmGT20LYm0+Q4CwzKwBAsE84MvX?=
 =?us-ascii?q?nSsd77NL0SUeewzKTQyjvMdelW1ivk5IXUdBAuvOuMWqhtesTX1EkvDR3KgU+N?=
 =?us-ascii?q?qYf4OD6V0/4Cs3KH4OV6U+KglnQnpB9rrjir28cskJfGiZgIyl3f7yV23ps6Jd?=
 =?us-ascii?q?2iR05ne9KrDJxQtySDOoZwX8gsQHlotT4kxrEaupO3ZjUGxIkkyhLFdfCKfYiF?=
 =?us-ascii?q?7gj+WOuTOTt0mm5pdbalixux8UWs0PDwW8io3FpQsyZIltbBu3YQ3BLJ8MeHUO?=
 =?us-ascii?q?Fy/kK51DaPyQ/T7uZELFgwlaraMJ4h3qUwmoAcsUTFAy/6gkL2jLWZdkk8++io?=
 =?us-ascii?q?7froYqn+q5OCK4N5iRvyPrkzlsG8G+g0LAYDUmiB9eih1rDv5Uj5T69Ljv0ynK?=
 =?us-ascii?q?nZqpfaJcEDq66gHQBV15sj5w+iADi4ztQXg30HIEtedxKAkojpPU3BL+7jDfu4?=
 =?us-ascii?q?h1SskTRryO7cMrzuH5XANnzDkLbnfbZg5E9Q0gszzdZD551KDrENOu78Wkj0tN?=
 =?us-ascii?q?HDCB85NAq0w+nhCNVgzI8eXniPAqCBPKPIrVCI/v4vI/WLZIINvDb9Kvsl6OD0?=
 =?us-ascii?q?gX42hF8QZq2p3ZoRaHClEfVqOUSZYXzwgtgfFWcGpBYxTOvviA7KbDhIenznX7?=
 =?us-ascii?q?4g/ippT8WiDJzfXcarh7qO2jr9GYdZIWVPC1SJGHGvcJ2YWvAKc2WLL8p81zAJ?=
 =?us-ascii?q?S7WlGLInzgyk4Qrzyr57KbjN9ygF8J7uytVxovfejAw/7iBcCcOb3GeQCWZukT?=
 =?us-ascii?q?QTWjU00atj9FF70UqJyqNigvZVRuBUstpTTgo/fabd1OVgBtbxXUqVd82VRVPg?=
 =?us-ascii?q?QZO+ACo4VN83wNgmbEN0GtHkhRfGiXmEGbgQwpmCHpdx26TQxfm5A9tnxn/bnP?=
 =?us-ascii?q?0khkMtS81DL2DggrNl+gHOL5TEn0WQi+ChcqFKj32Fz3uK0Wfb5BIQawV3S6iQ?=
 =?us-ascii?q?GClHPkY=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0C+AQCV9/tbhxHrdtBigheBMSqCOIN5i?=
 =?us-ascii?q?HeLIYINh3GBG3aNOhSBXxQYFIRAhCMiNAkNAQMBAQEBAQECARMBAQEKCwkIGw4?=
 =?us-ascii?q?vgjYFAgMaAQaCXAECAwECIAQfCikDAwECBgEBCgsNAgIREQQCAgMBHQESAQUBH?=
 =?us-ascii?q?AYTBYJRS4FqAxUBBJlfPIsNfDOHcw2BC4EOEnmKfoIWgRGDEoJWgWNFP4JFglc?=
 =?us-ascii?q?CkA2PRy4HAo4EgysYkQiOTYlUDyGBJYINMxojgQEGgjWCJxcSbQECjR88MQGBB?=
 =?us-ascii?q?ooTgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0C+AQCV9/tbhxHrdtBigheBMSqCOIN5iHeLIYINh3GBG3a?=
 =?us-ascii?q?NOhSBXxQYFIRAhCMiNAkNAQMBAQEBAQECARMBAQEKCwkIGw4vgjYFAgMaAQaCX?=
 =?us-ascii?q?AECAwECIAQfCikDAwECBgEBCgsNAgIREQQCAgMBHQESAQUBHAYTBYJRS4FqAxU?=
 =?us-ascii?q?BBJlfPIsNfDOHcw2BC4EOEnmKfoIWgRGDEoJWgWNFP4JFglcCkA2PRy4HAo4Eg?=
 =?us-ascii?q?ysYkQiOTYlUDyGBJYINMxojgQEGgjWCJxcSbQECjR88MQGBBooTgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,282,1539673200"; 
   d="scan'208";a="54304716"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 26 Nov 2018 05:45:02 -0800
Received: from localhost ([::1]:36033 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gRHC9-0003WL-T6
	for like.xu@linux.intel.com; Mon, 26 Nov 2018 08:45:01 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:37937)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <mlureau@redhat.com>) id 1gRHA1-0001cW-CP
	for qemu-devel@nongnu.org; Mon, 26 Nov 2018 08:42:50 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <mlureau@redhat.com>) id 1gRH9y-0001Ji-2o
	for qemu-devel@nongnu.org; Mon, 26 Nov 2018 08:42:49 -0500
Received: from mail-qt1-f194.google.com ([209.85.160.194]:36203)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <mlureau@redhat.com>) id 1gRH9x-0001JT-T5
	for qemu-devel@nongnu.org; Mon, 26 Nov 2018 08:42:46 -0500
Received: by mail-qt1-f194.google.com with SMTP id t13so17503966qtn.3
	for <qemu-devel@nongnu.org>; Mon, 26 Nov 2018 05:42:45 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:mime-version:references:in-reply-to:from:date
	:message-id:subject:to:cc:content-transfer-encoding;
	bh=hJPZ3g06i9vwIqZNEzpbFQlwR4xd+2bdlWIP1dmKCsc=;
	b=t4nutpaD+Wu0gQE0XTYs5zCkorGNi+PaewI+gvddyOXK9haNc7E/RC3Ex28uCeQmrq
	SBWVHSdSZA/YVjDCjPln5O3+LyS9VImZ/wl/qSkLHx9ut4h4CQ7OIUpsnEdrlcNvX1P/
	GUBJlLy9nvtIXxGK1kJmpvbN7aF6BEByUZ+7s7C+I5T0VhPU1GoIVcKs7PmRmwPJiDer
	oSfzJswXKLvs+eARDCnKTk98lAGyY1HxdwPpHWw/ldeW0e41Bux37tvirV0zg+aOBS0j
	Mn5BOKMGh2P40YqVUdXIuIjDIYOcqNO6s7buMyr1AJ9bD8fEmZrxfrFMSzlMYLuFTMM4
	dV7A==
X-Gm-Message-State: AGRZ1gL/ApEKU9Zjkad5OIXXT3Rz1aAB7t5qO52pWjPUYG6DDFTuAZET
	GoXEmGz7pvOtamw0U5rc10Hq3H/mJ0MdNeIOoP0Zrw==
X-Google-Smtp-Source: AJdET5ffhHr/Wb829OaxeQ1ryyKPe5BAMTZoU7R1F3dluo7QxzP+yUFK45Tvxso4hu97evxe+jZHc+2jWlrvv/HEfdQ=
X-Received: by 2002:aed:2921:: with SMTP id s30mr25816856qtd.346.1543239765090;
	Mon, 26 Nov 2018 05:42:45 -0800 (PST)
MIME-Version: 1.0
References: <cover.1541507990.git.artem.k.pisarenko@gmail.com>
	<7dde6abbd21682857f8294644013173c0b9949b3.1541507990.git.artem.k.pisarenko@gmail.com>
In-Reply-To: <7dde6abbd21682857f8294644013173c0b9949b3.1541507990.git.artem.k.pisarenko@gmail.com>
From: =?UTF-8?B?TWFyYy1BbmRyw6kgTHVyZWF1?= <marcandre.lureau@redhat.com>
Date: Mon, 26 Nov 2018 17:42:33 +0400
Message-ID: <CAMxuvaz8aMnTP2w72BQ3fML-OVfv0=cNGvmnpdFM3VwU-KH8ag@mail.gmail.com>
To: Artem Pisarenko <artem.k.pisarenko@gmail.com>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.85.160.194
Subject: Re: [Qemu-devel] [PATCH v3 1/2] chardev: fix mess in OPENED/CLOSED
 events when muxed
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: "Bonzini, Paolo" <pbonzini@redhat.com>, qemu-devel <qemu-devel@nongnu.org>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Tue, Nov 6, 2018 at 4:41 PM Artem Pisarenko
<artem.k.pisarenko@gmail.com> wrote:
>
> When chardev is multiplexed (mux=3Don) there are a lot of cases where
> CHR_EVENT_OPENED/CHR_EVENT_CLOSED events pairing (expected from
> frontend side) is broken. There are either generation of multiple
> repeated or extra CHR_EVENT_OPENED events, or CHR_EVENT_CLOSED just
> isn't generated at all.
> This is mostly because 'qemu_chr_fe_set_handlers()' function makes its
> own (and often wrong) implicit decision on updated frontend state and
> invokes 'fd_event' callback with 'CHR_EVENT_OPENED'. And even worse,
> it doesn't do symmetric action in opposite direction, as someone may
> expect (i.e. it doesn't invoke previously set 'fd_event' with
> 'CHR_EVENT_CLOSED'). Muxed chardev uses trick by calling this function
> again to replace callback handlers with its own ones, but it doesn't
> account for such side effect.
> Fix that using extended version of this function with added argument
> for disabling side effect and keep original function for compatibility
> with lots of frontends already using this interface and being
> "tolerant" to its side effects.
> One more source of event duplication is just line of code in
> char-mux.c, which does far more than comment above says (obvious fix).
>
> Signed-off-by: Artem Pisarenko <artem.k.pisarenko@gmail.com>

Reviewed-by: Marc-Andr=C3=A9 Lureau <marcandre.lureau@redhat.com>

> ---
>
> Notes:
>     v3:
>      - extended and improved commit message with 'why' and 'how' explanat=
ion
>
>  chardev/char-fe.c         | 33 ++++++++++++++++++++++++---------
>  chardev/char-mux.c        | 16 ++++++++--------
>  include/chardev/char-fe.h | 18 +++++++++++++++++-
>  3 files changed, 49 insertions(+), 18 deletions(-)
>
> diff --git a/chardev/char-fe.c b/chardev/char-fe.c
> index a8931f7..b7bcbd5 100644
> --- a/chardev/char-fe.c
> +++ b/chardev/char-fe.c
> @@ -246,14 +246,15 @@ void qemu_chr_fe_deinit(CharBackend *b, bool del)
>      }
>  }
>
> -void qemu_chr_fe_set_handlers(CharBackend *b,
> -                              IOCanReadHandler *fd_can_read,
> -                              IOReadHandler *fd_read,
> -                              IOEventHandler *fd_event,
> -                              BackendChangeHandler *be_change,
> -                              void *opaque,
> -                              GMainContext *context,
> -                              bool set_open)
> +void qemu_chr_fe_set_handlers_full(CharBackend *b,
> +                                   IOCanReadHandler *fd_can_read,
> +                                   IOReadHandler *fd_read,
> +                                   IOEventHandler *fd_event,
> +                                   BackendChangeHandler *be_change,
> +                                   void *opaque,
> +                                   GMainContext *context,
> +                                   bool set_open,
> +                                   bool sync_state)
>  {
>      Chardev *s;
>      int fe_open;
> @@ -285,7 +286,7 @@ void qemu_chr_fe_set_handlers(CharBackend *b,
>          qemu_chr_fe_take_focus(b);
>          /* We're connecting to an already opened device, so let's make s=
ure we
>             also get the open event */
> -        if (s->be_open) {
> +        if (sync_state && s->be_open) {
>              qemu_chr_be_event(s, CHR_EVENT_OPENED);
>          }
>      }
> @@ -295,6 +296,20 @@ void qemu_chr_fe_set_handlers(CharBackend *b,
>      }
>  }
>
> +void qemu_chr_fe_set_handlers(CharBackend *b,
> +                              IOCanReadHandler *fd_can_read,
> +                              IOReadHandler *fd_read,
> +                              IOEventHandler *fd_event,
> +                              BackendChangeHandler *be_change,
> +                              void *opaque,
> +                              GMainContext *context,
> +                              bool set_open)
> +{
> +    qemu_chr_fe_set_handlers_full(b, fd_can_read, fd_read, fd_event, be_=
change,
> +                                  opaque, context, set_open,
> +                                  true);
> +}
> +
>  void qemu_chr_fe_take_focus(CharBackend *b)
>  {
>      if (!b->chr) {
> diff --git a/chardev/char-mux.c b/chardev/char-mux.c
> index 6055e76..1199d32 100644
> --- a/chardev/char-mux.c
> +++ b/chardev/char-mux.c
> @@ -283,13 +283,13 @@ void mux_chr_set_handlers(Chardev *chr, GMainContex=
t *context)
>      MuxChardev *d =3D MUX_CHARDEV(chr);
>
>      /* Fix up the real driver with mux routines */
> -    qemu_chr_fe_set_handlers(&d->chr,
> -                             mux_chr_can_read,
> -                             mux_chr_read,
> -                             mux_chr_event,
> -                             NULL,
> -                             chr,
> -                             context, true);
> +    qemu_chr_fe_set_handlers_full(&d->chr,
> +                                  mux_chr_can_read,
> +                                  mux_chr_read,
> +                                  mux_chr_event,
> +                                  NULL,
> +                                  chr,
> +                                  context, true, false);
>  }
>
>  void mux_set_focus(Chardev *chr, int focus)
> @@ -367,7 +367,7 @@ static int open_muxes(Chardev *chr)
>       * mark mux as OPENED so any new FEs will immediately receive
>       * OPENED event
>       */
> -    qemu_chr_be_event(chr, CHR_EVENT_OPENED);
> +    chr->be_open =3D 1;
>
>      return 0;
>  }
> diff --git a/include/chardev/char-fe.h b/include/chardev/char-fe.h
> index 46c997d..c1b7fd9 100644
> --- a/include/chardev/char-fe.h
> +++ b/include/chardev/char-fe.h
> @@ -67,7 +67,7 @@ bool qemu_chr_fe_backend_connected(CharBackend *be);
>  bool qemu_chr_fe_backend_open(CharBackend *be);
>
>  /**
> - * qemu_chr_fe_set_handlers:
> + * qemu_chr_fe_set_handlers_full:
>   * @b: a CharBackend
>   * @fd_can_read: callback to get the amount of data the frontend may
>   *               receive
> @@ -79,12 +79,28 @@ bool qemu_chr_fe_backend_open(CharBackend *be);
>   * @context: a main loop context or NULL for the default
>   * @set_open: whether to call qemu_chr_fe_set_open() implicitely when
>   * any of the handler is non-NULL
> + * @sync_state: whether to issue event callback with updated state
>   *
>   * Set the front end char handlers. The front end takes the focus if
>   * any of the handler is non-NULL.
>   *
>   * Without associated Chardev, nothing is changed.
>   */
> +void qemu_chr_fe_set_handlers_full(CharBackend *b,
> +                                   IOCanReadHandler *fd_can_read,
> +                                   IOReadHandler *fd_read,
> +                                   IOEventHandler *fd_event,
> +                                   BackendChangeHandler *be_change,
> +                                   void *opaque,
> +                                   GMainContext *context,
> +                                   bool set_open,
> +                                   bool sync_state);
> +
> +/**
> + * qemu_chr_fe_set_handlers:
> + *
> + * Version of qemu_chr_fe_set_handlers_full() with sync_state =3D true.
> + */
>  void qemu_chr_fe_set_handlers(CharBackend *b,
>                                IOCanReadHandler *fd_can_read,
>                                IOReadHandler *fd_read,
> --
> 2.7.4
>

