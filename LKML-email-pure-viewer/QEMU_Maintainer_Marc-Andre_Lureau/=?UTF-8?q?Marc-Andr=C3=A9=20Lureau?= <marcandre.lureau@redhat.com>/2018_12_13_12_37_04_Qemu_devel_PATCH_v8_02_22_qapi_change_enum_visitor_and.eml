Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 21:23:52 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id C26CA58079D
	for <like.xu@linux.intel.com>; Thu, 13 Dec 2018 04:40:04 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga004-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 13 Dec 2018 04:40:04 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3ACmfckRSIVpnIB+PxTkLXdG3tmtpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa6zYRCN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4qF2QxHqlS?=
 =?us-ascii?q?gHLSY0/mHJhMJ+j6xUohyhqBNjzIDbfY+VLPhzcKHScN8HS2dNQtheVzdaD4Og?=
 =?us-ascii?q?dosCFfYNMfpEo4T/oVYFsBuwBROrBOPq0jJGgWX53bcm3Og4DQzG2hEvH8gUt3?=
 =?us-ascii?q?/Jqtv1Kb0SXv6vw6nV0D7OaPZW1i3n6IfUaB8hp+yDXahufsbLzUkvChnFgUuK?=
 =?us-ascii?q?poz4JD6VzPoCvHWb7+V6SeKjkXIoqwZ0ojW2wMonl4rHhpoNx1za6Sl0w5w5Kc?=
 =?us-ascii?q?ClREN4e9KoDpVduiGAO4drQM4uW39ktDo+x7EcpJK2cjYGxI46yxPcZfGLaZaE?=
 =?us-ascii?q?7xHlWe2MOzl3nmhld6i6hxuq8Uiv1On8Vs6s3VZOrypFicXMtmsX2xzc7MiHV+?=
 =?us-ascii?q?Fx/kC72TaAzwzT6+dELl4olafDNZIt3r09moAOvUjeHSL6glv6gaGWe0k+5+Sl?=
 =?us-ascii?q?6fzrYrD8qZ+dM490hBv+MqMrmsGnGOQ3LA0OX3WC9euhyrLj41P2QLFTgvItla?=
 =?us-ascii?q?nZrZbaKtgFqa6iBANV1ocj6xWhADu839UYgGEKLFZEeBKBkojoNEvCIPH+Dfej?=
 =?us-ascii?q?nVuslC1nyOzBPr3kGZjNKH/DkLHufbZ79k5Q0g0zzcpQ555MELEOPOrzWlPttN?=
 =?us-ascii?q?zfFhI5Nw20w+X5B9ln2YIeRHmCAquYMKPUrF+J6fgjI+iKZI8Jpjn9L+Ip6OLp?=
 =?us-ascii?q?jX88yhcge7K0184XdGygBaYhZEGYemb3xNEGF2gMo0w5VuOtjVSDVTtaYTG1R7?=
 =?us-ascii?q?494TcgT5urCJqGSo2zjbjS4SGgA5cDY2lHDkyLQ27lcpjBV/oSZSbXOMJ4jzEf?=
 =?us-ascii?q?SZCnTIku0wzosxX1nKF6JOjZ8TFNqJT4ydJu7PfSnxxhyTshFsmYziSBQn95mk?=
 =?us-ascii?q?sOQDk52r05plZymXmZ1q0tpvVCHpl64f9T008eKITRxvEyX9X7QAnIeNuTRRCi?=
 =?us-ascii?q?X8+rCCwZVN89w9YSJU16HoPx3Vj4wyO2DupNxPSwD5su//eE0g=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ChAACzUhJcmBHrdtBjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBVAQBAQsBgTCBOYEpg3yIeI48jUaEFYZwFBgDEYdEIjcGDQEDAQEBAQEBAgE?=
 =?us-ascii?q?TAQEBAQEICwsGGw4jDII2BQIDGAmCXAMDAQIgIwopAwMBAgYBASQCIgQCAgMBU?=
 =?us-ascii?q?xkFgxwBggABBKZ1gS+EQUA/g2SBDYELizGCFoERgl2Eb4NLglcCiT+GCHuQTQc?=
 =?us-ascii?q?Chw2KQQsYgimHQ4deLIpyhi2HfoFcgXgzGiODPAmCR4gJgRSEczwxgQccijWBd?=
 =?us-ascii?q?wEB?=
X-IPAS-Result: =?us-ascii?q?A0ChAACzUhJcmBHrdtBjHAEBAQQBAQcEAQGBVAQBAQsBgTC?=
 =?us-ascii?q?BOYEpg3yIeI48jUaEFYZwFBgDEYdEIjcGDQEDAQEBAQEBAgETAQEBAQEICwsGG?=
 =?us-ascii?q?w4jDII2BQIDGAmCXAMDAQIgIwopAwMBAgYBASQCIgQCAgMBUxkFgxwBggABBKZ?=
 =?us-ascii?q?1gS+EQUA/g2SBDYELizGCFoERgl2Eb4NLglcCiT+GCHuQTQcChw2KQQsYgimHQ?=
 =?us-ascii?q?4deLIpyhi2HfoFcgXgzGiODPAmCR4gJgRSEczwxgQccijWBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,349,1539673200"; 
   d="scan'208";a="66659439"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mga01b.intel.com with ESMTP/TLS/AES256-SHA; 13 Dec 2018 04:40:04 -0800
Received: from localhost ([::1]:52130 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gXQHb-0001hK-5X
	for like.xu@linux.intel.com; Thu, 13 Dec 2018 07:40:03 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:46749)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <marcandre.lureau@redhat.com>) id 1gXQFJ-0008NN-TQ
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 07:37:43 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <marcandre.lureau@redhat.com>) id 1gXQFI-0004lC-EJ
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 07:37:41 -0500
Received: from mx1.redhat.com ([209.132.183.28]:60202)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <marcandre.lureau@redhat.com>)
	id 1gXQFI-0004k1-6a
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 07:37:40 -0500
Received: from smtp.corp.redhat.com (int-mx08.intmail.prod.int.phx2.redhat.com
	[10.5.11.23])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 8BFEB312E9D1
	for <qemu-devel@nongnu.org>; Thu, 13 Dec 2018 12:37:39 +0000 (UTC)
Received: from localhost (ovpn-112-51.ams2.redhat.com [10.36.112.51])
	by smtp.corp.redhat.com (Postfix) with ESMTP id EBBB8194BA;
	Thu, 13 Dec 2018 12:37:37 +0000 (UTC)
From: =?UTF-8?q?Marc-Andr=C3=A9=20Lureau?= <marcandre.lureau@redhat.com>
To: qemu-devel@nongnu.org
Date: Thu, 13 Dec 2018 16:37:04 +0400
Message-Id: <20181213123724.4866-3-marcandre.lureau@redhat.com>
In-Reply-To: <20181213123724.4866-1-marcandre.lureau@redhat.com>
References: <20181213123724.4866-1-marcandre.lureau@redhat.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
X-Scanned-By: MIMEDefang 2.84 on 10.5.11.23
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.40]);
	Thu, 13 Dec 2018 12:37:39 +0000 (UTC)
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: [Qemu-devel] [PATCH v8 02/22] qapi: change enum visitor and
 gen_enum* to take QAPISchemaMember
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: armbru@redhat.com
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

This will allow to add and access more properties associated with enum
values/members, like the associated 'if' condition. We may want to
have a specialized type QAPISchemaEnumMember, for now this will do.

Modify gen_enum() and gen_enum_lookup() for the same reason.

Suggested-by: Markus Armbruster <armbru@redhat.com>
Signed-off-by: Marc-Andr=C3=A9 Lureau <marcandre.lureau@redhat.com>
Reviewed-by: Markus Armbruster <armbru@redhat.com>
---
 scripts/qapi/common.py         | 22 +++++++++++-----------
 scripts/qapi/doc.py            |  2 +-
 scripts/qapi/events.py         | 13 +++++++------
 scripts/qapi/introspect.py     |  5 +++--
 scripts/qapi/types.py          |  6 +++---
 scripts/qapi/visit.py          |  2 +-
 tests/qapi-schema/test-qapi.py |  4 ++--
 7 files changed, 28 insertions(+), 26 deletions(-)

diff --git a/scripts/qapi/common.py b/scripts/qapi/common.py
index 55c914ec44..1fa2f79990 100644
--- a/scripts/qapi/common.py
+++ b/scripts/qapi/common.py
@@ -1063,7 +1063,7 @@ class QAPISchemaVisitor(object):
     def visit_builtin_type(self, name, info, json_type):
         pass
=20
-    def visit_enum_type(self, name, info, ifcond, values, prefix):
+    def visit_enum_type(self, name, info, ifcond, members, prefix):
         pass
=20
     def visit_array_type(self, name, info, ifcond, element_type):
@@ -1193,7 +1193,7 @@ class QAPISchemaEnumType(QAPISchemaType):
=20
     def visit(self, visitor):
         visitor.visit_enum_type(self.name, self.info, self.ifcond,
-                                self.member_names(), self.prefix)
+                                self.members, self.prefix)
=20
=20
 class QAPISchemaArrayType(QAPISchemaType):
@@ -2012,19 +2012,19 @@ def _wrap_ifcond(ifcond, before, after):
     return out
=20
=20
-def gen_enum_lookup(name, values, prefix=3DNone):
+def gen_enum_lookup(name, members, prefix=3DNone):
     ret =3D mcgen('''
=20
 const QEnumLookup %(c_name)s_lookup =3D {
     .array =3D (const char *const[]) {
 ''',
                 c_name=3Dc_name(name))
-    for value in values:
-        index =3D c_enum_const(name, value, prefix)
+    for m in members:
+        index =3D c_enum_const(name, m.name, prefix)
         ret +=3D mcgen('''
-        [%(index)s] =3D "%(value)s",
+        [%(index)s] =3D "%(name)s",
 ''',
-                     index=3Dindex, value=3Dvalue)
+                     index=3Dindex, name=3Dm.name)
=20
     ret +=3D mcgen('''
     },
@@ -2035,9 +2035,9 @@ const QEnumLookup %(c_name)s_lookup =3D {
     return ret
=20
=20
-def gen_enum(name, values, prefix=3DNone):
+def gen_enum(name, members, prefix=3DNone):
     # append automatically generated _MAX value
-    enum_values =3D values + ['_MAX']
+    enum_members =3D members + [QAPISchemaMember('_MAX')]
=20
     ret =3D mcgen('''
=20
@@ -2045,11 +2045,11 @@ typedef enum %(c_name)s {
 ''',
                 c_name=3Dc_name(name))
=20
-    for value in enum_values:
+    for m in enum_members:
         ret +=3D mcgen('''
     %(c_enum)s,
 ''',
-                     c_enum=3Dc_enum_const(name, value, prefix))
+                     c_enum=3Dc_enum_const(name, m.name, prefix))
=20
     ret +=3D mcgen('''
 } %(c_name)s;
diff --git a/scripts/qapi/doc.py b/scripts/qapi/doc.py
index 987fd3c943..76cb186ff9 100755
--- a/scripts/qapi/doc.py
+++ b/scripts/qapi/doc.py
@@ -206,7 +206,7 @@ class QAPISchemaGenDocVisitor(qapi.common.QAPISchemaV=
isitor):
     def write(self, output_dir):
         self._gen.write(output_dir, self._prefix + 'qapi-doc.texi')
=20
-    def visit_enum_type(self, name, info, ifcond, values, prefix):
+    def visit_enum_type(self, name, info, ifcond, members, prefix):
         doc =3D self.cur_doc
         self._gen.add(TYPE_FMT(type=3D'Enum',
                                name=3Ddoc.symbol,
diff --git a/scripts/qapi/events.py b/scripts/qapi/events.py
index 2ed7902424..f1b88d8786 100644
--- a/scripts/qapi/events.py
+++ b/scripts/qapi/events.py
@@ -143,8 +143,8 @@ class QAPISchemaGenEventVisitor(QAPISchemaModularCVis=
itor):
         QAPISchemaModularCVisitor.__init__(
             self, prefix, 'qapi-events',
             ' * Schema-defined QAPI/QMP events', __doc__)
-        self._enum_name =3D c_name(prefix + 'QAPIEvent', protect=3DFalse=
)
-        self._event_names =3D []
+        self._event_enum_name =3D c_name(prefix + 'QAPIEvent', protect=3D=
False)
+        self._event_enum_members =3D []
=20
     def _begin_module(self, name):
         types =3D self._module_basename('qapi-types', name)
@@ -170,15 +170,16 @@ class QAPISchemaGenEventVisitor(QAPISchemaModularCV=
isitor):
=20
     def visit_end(self):
         (genc, genh) =3D self._module[self._main_module]
-        genh.add(gen_enum(self._enum_name, self._event_names))
-        genc.add(gen_enum_lookup(self._enum_name, self._event_names))
+        genh.add(gen_enum(self._event_enum_name, self._event_enum_member=
s))
+        genc.add(gen_enum_lookup(self._event_enum_name,
+                                 self._event_enum_members))
=20
     def visit_event(self, name, info, ifcond, arg_type, boxed):
         with ifcontext(ifcond, self._genh, self._genc):
             self._genh.add(gen_event_send_decl(name, arg_type, boxed))
             self._genc.add(gen_event_send(name, arg_type, boxed,
-                                          self._enum_name))
-        self._event_names.append(name)
+                                          self._event_enum_name))
+        self._event_enum_members.append(QAPISchemaMember(name))
=20
=20
 def gen_events(schema, output_dir, prefix):
diff --git a/scripts/qapi/introspect.py b/scripts/qapi/introspect.py
index 67d6106f77..417625d54b 100644
--- a/scripts/qapi/introspect.py
+++ b/scripts/qapi/introspect.py
@@ -174,8 +174,9 @@ const QLitObject %(c_name)s =3D %(c_string)s;
     def visit_builtin_type(self, name, info, json_type):
         self._gen_qlit(name, 'builtin', {'json-type': json_type}, [])
=20
-    def visit_enum_type(self, name, info, ifcond, values, prefix):
-        self._gen_qlit(name, 'enum', {'values': values}, ifcond)
+    def visit_enum_type(self, name, info, ifcond, members, prefix):
+        self._gen_qlit(name, 'enum',
+                       {'values': [m.name for m in members]}, ifcond)
=20
     def visit_array_type(self, name, info, ifcond, element_type):
         element =3D self._use_type(element_type)
diff --git a/scripts/qapi/types.py b/scripts/qapi/types.py
index fd7808103c..e8d22c5081 100644
--- a/scripts/qapi/types.py
+++ b/scripts/qapi/types.py
@@ -212,10 +212,10 @@ class QAPISchemaGenTypeVisitor(QAPISchemaModularCVi=
sitor):
         self._genh.add(gen_type_cleanup_decl(name))
         self._genc.add(gen_type_cleanup(name))
=20
-    def visit_enum_type(self, name, info, ifcond, values, prefix):
+    def visit_enum_type(self, name, info, ifcond, members, prefix):
         with ifcontext(ifcond, self._genh, self._genc):
-            self._genh.preamble_add(gen_enum(name, values, prefix))
-            self._genc.add(gen_enum_lookup(name, values, prefix))
+            self._genh.preamble_add(gen_enum(name, members, prefix))
+            self._genc.add(gen_enum_lookup(name, members, prefix))
=20
     def visit_array_type(self, name, info, ifcond, element_type):
         with ifcontext(ifcond, self._genh, self._genc):
diff --git a/scripts/qapi/visit.py b/scripts/qapi/visit.py
index 460cf12989..24f85a2e85 100644
--- a/scripts/qapi/visit.py
+++ b/scripts/qapi/visit.py
@@ -310,7 +310,7 @@ class QAPISchemaGenVisitVisitor(QAPISchemaModularCVis=
itor):
 ''',
                                       types=3Dtypes))
=20
-    def visit_enum_type(self, name, info, ifcond, values, prefix):
+    def visit_enum_type(self, name, info, ifcond, members, prefix):
         with ifcontext(ifcond, self._genh, self._genc):
             self._genh.add(gen_visit_decl(name, scalar=3DTrue))
             self._genc.add(gen_visit_enum(name))
diff --git a/tests/qapi-schema/test-qapi.py b/tests/qapi-schema/test-qapi=
.py
index cea21c773a..27f776693e 100644
--- a/tests/qapi-schema/test-qapi.py
+++ b/tests/qapi-schema/test-qapi.py
@@ -23,8 +23,8 @@ class QAPISchemaTestVisitor(QAPISchemaVisitor):
     def visit_include(self, name, info):
         print('include %s' % name)
=20
-    def visit_enum_type(self, name, info, ifcond, values, prefix):
-        print('enum %s %s' % (name, values))
+    def visit_enum_type(self, name, info, ifcond, members, prefix):
+        print('enum %s %s' % (name, [m.name for m in members]))
         if prefix:
             print('    prefix %s' % prefix)
         self._print_if(ifcond)
--=20
2.20.0


