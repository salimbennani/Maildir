Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 21 Nov 2018 00:39:05 -0000
Received: from icoremail.net (unknown [209.85.210.182])
	by mail-app4 (Coremail) with SMTP id cS_KCgDXv7qJ8_NbhGPfAQ--.57512S3;
	Tue, 20 Nov 2018 19:44:10 +0800 (CST)
Received: from mail-pf1-f182.google.com (unknown [209.85.210.182])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwCHbUmG8_Nb1PBdAA--.326S3;
	Tue, 20 Nov 2018 19:44:06 +0800 (CST)
Received: by mail-pf1-f182.google.com with SMTP id w73so872517pfk.10
        for <xuliker@zju.edu.cn>; Tue, 20 Nov 2018 03:44:06 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-original-authentication-results:x-gm-message-state:delivered-to
         :date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent:sender:precedence
         :list-id;
        bh=t31kYru/XZa6cbM+Vs8VZ7SeEZ98rYlEmG+hMBQS82s=;
        b=XzMiBMpIdf2xxHNALWHtxZHZ85TJVVbZ3il4Aerpl8MM/xM0osAFSws+CWcdgm4LeD
         cfT9pfoYEEB7u5sD72OpDaJzZHrTFDgiYwtsc2sxWFCNXunykXf/MRKrt7ZD6rtyx/Tk
         ae70/WK9xGFJwXZT1NIJb9GqclExhS0FXjU4PkCETZBCcEx765sr86vgnsMYgJllQ1PI
         KbDkr78iuZe9ooSaw+DtN/t1ijgCe7CaJDfk52pXO+tEisyNmwFBaE3njRZtlQwxU15x
         FytxouGFCzyS8ITLLGtTci65GSnlLHvChqYgYlWxYYmcX+qpgnWfbnvhR1pouCyzeR5n
         q3vg==
X-Original-Authentication-Results: mx.google.com;       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;       dmarc=fail (p=NONE sp=NONE dis=NONE) header.from=kernel.org
X-Gm-Message-State: AA+aEWYd5Q6+Ovq79/yyHpZi1ZuWTXQVzHZhTDIqGygDdquzRcivT0rd
	irt+IbY8bz8+V2zhWn09zuDwto7M0Affc0T0CeGPsPsNLNKwkC4=
X-Received: by 2002:a63:3c44:: with SMTP id i4mr1566925pgn.286.1542714245914;
        Tue, 20 Nov 2018 03:44:05 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:d106:0:0:0:0 with SMTP id l6-v6csp493872pju;
        Tue, 20 Nov 2018 03:44:04 -0800 (PST)
X-Google-Smtp-Source: AFSGD/W4jMd4HIcqrD68Bc8q3WzyQyi3tVTOdjrehKaxSFF+QXjZcHjudHrqRwrT2Wk40Ij7E5mK
X-Received: by 2002:a17:902:b701:: with SMTP id d1-v6mr1777228pls.29.1542714244823;
        Tue, 20 Nov 2018 03:44:04 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542714244; cv=none;
        d=google.com; s=arc-20160816;
        b=ORgMryh61Cfe6rLnI8pcxn590uYR66JteDxxr7+RtIk+5o1ilLc+XMKGZgnmiIieIb
         hj3zViPKzjNIXI3OKVyqN80Szq/HKDILnHjT/UUr3fM+ShmlPTQje8ZaYueZzgBTy8uv
         IT8xXdmcHPfytlR9LudQCjdx7DXQtHcmUkQwexyvdyRl+MeZDiDR/xk3WKKtYnBIR+CW
         wrcqVaGLL9Rk7JStgYjQB2PRJDTB8Qmp5lxkZ9Qxxk32GVjI6JkWVPpsvg7bzCgHuPOw
         MhMS8NL3YP75qbaXwlcN7wyj9oK0tB4SaJ/S+9UNR9Yvla4ayDj60S0SVZYgOLm253Px
         Ya0g==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:user-agent:in-reply-to
         :content-disposition:mime-version:references:message-id:subject:cc
         :to:from:date;
        bh=t31kYru/XZa6cbM+Vs8VZ7SeEZ98rYlEmG+hMBQS82s=;
        b=xfLJCyj15GLXDsyQ7jJYDpMFt/S42TntMewEYBpr589dshdJ2Mopx8IRr50A5s0qO0
         5LVPIaFHk1ThcpWIHIHA73CQ1Zvq7AyGaGllOk60i0FUauynyMLTE6gCxdLOW69KEeGF
         NeF+/K24CWTFXQsFsElK272FJ1RTAy1zyTgNa406z0dq+T5ui0HAn2rmY+qSA4GGuNX7
         fLrwm3uJdTWjdusR6Cpty36vmQHUgeIoQBKGB8fjK0qQ/I8ihlK8zcD5jJqZoIcYOCuJ
         3ro2AQDhiASHqye0oJzjHltM73L7DmUKIDGRDMlZY7T8hMH8dhTFZk+hA61VqFHGLW+q
         Wu9w==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;
       dmarc=fail (p=NONE sp=NONE dis=NONE) header.from=kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id 82si28580476pfa.115.2018.11.20.03.43.50;
        Tue, 20 Nov 2018 03:44:04 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729442AbeKTWKx (ORCPT <rfc822;yv9200@gmail.com> + 99 others);
        Tue, 20 Nov 2018 17:10:53 -0500
Received: from mx2.suse.de ([195.135.220.15]:33092 "EHLO mx1.suse.de"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1728997AbeKTWKx (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 20 Nov 2018 17:10:53 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (unknown [195.135.220.254])
        by mx1.suse.de (Postfix) with ESMTP id C9B45AE85;
        Tue, 20 Nov 2018 11:42:07 +0000 (UTC)
Date: Tue, 20 Nov 2018 12:42:07 +0100
From: Michal Hocko <mhocko@kernel.org>
To: linux-api@vger.kernel.org
Cc: Andrew Morton <akpm@linux-foundation.org>,
        Alexey Dobriyan <adobriyan@gmail.com>, linux-mm@kvack.org,
        LKML <linux-kernel@vger.kernel.org>,
        David Rientjes <rientjes@google.com>
Subject: Re: [RFC PATCH 2/3] mm, thp, proc: report THP eligibility for each
 vma
Message-ID: <20181120114207.GF22247@dhcp22.suse.cz>
References: <20181120103515.25280-1-mhocko@kernel.org>
 <20181120103515.25280-3-mhocko@kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181120103515.25280-3-mhocko@kernel.org>
User-Agent: Mutt/1.10.1 (2018-07-13)
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwCHbUmG8_Nb1PBdAA--.326S3
Authentication-Results: mail-app4; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoWxtw18Ar4UCFykWr4UKr1kAFb_yoWxtry3pF
	Z5GF1UArWUtrnakr4xZw4DCryFvws5KFW7Gryfu3Z5Xwn8t3sY9F18Krn0v3WFyr1kua13
	Za12vF1Du3yUXrJanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUU9Cb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Ar0_tr1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1l84ACjcxK6I8E
	87Iv67AKxVW0oVCq3wA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_GcCE3s1le2I262IYc4CY6c
	8Ij28IcVAaY2xG8wAqx4xG64xvF2IEw4CE5I8CrVC2j2WlYx0E2Ix0cI8IcVAFwI0_Jr0_
	Jr4lYx0Ex4A2jsIE14v26F4j6r4UJwAm72CE4IkC6x0Yz7v_Jr0_Gr1lF7xvr2IY64vIr4
	1l7I0Y6sxI4wCY1x0264kExVAvwVAq07x20xylc2xSY4AK6IIF6r4kMxkI7II2jI8vz4vE
	wIxGrwCYIxAIcVC0I7IYx2IY67AKxVW5JVW7JwCYIxAIcVC0I7IYx2IY6xkF7I0E14v26r
	4j6F4UMxvI42IY6I8E87Iv67AKxVW0oVCq3wCYIxAIcVC2z280aVCY1x0267AKxVW0oVCq
	3wCF04k20xvY0x0EwIxGrwCF04k20xvEw4C26cxK6c8Ij28IcwCF72vE77IF4wCFx2IqxV
	CFs4IE7xkEbVWUJVW8JwC20s026c02F40E14v26r1j6r18MI8I3I0E7480Y4vE14v26r10
	6r1rMI8E67AF67kF1VAFwI0_JF0_Jw1lIxkGc2Ij64vIr41lIxAIcVCF04k26cxKx2IYs7
	xG6r4j6FyUYxBIdaVFxhVjvjDU0xZFpf9x07bg-B_UUUUU=

Damn, David somehow didn't make it to the CC list. Sorry about that.

On Tue 20-11-18 11:35:14, Michal Hocko wrote:
> From: Michal Hocko <mhocko@suse.com>
> 
> Userspace falls short when trying to find out whether a specific memory
> range is eligible for THP. There are usecases that would like to know
> that
> http://lkml.kernel.org/r/alpine.DEB.2.21.1809251248450.50347@chino.kir.corp.google.com
> : This is used to identify heap mappings that should be able to fault thp
> : but do not, and they normally point to a low-on-memory or fragmentation
> : issue.
> 
> The only way to deduce this now is to query for hg resp. nh flags and
> confronting the state with the global setting. Except that there is
> also PR_SET_THP_DISABLE that might change the picture. So the final
> logic is not trivial. Moreover the eligibility of the vma depends on
> the type of VMA as well. In the past we have supported only anononymous
> memory VMAs but things have changed and shmem based vmas are supported
> as well these days and the query logic gets even more complicated
> because the eligibility depends on the mount option and another global
> configuration knob.
> 
> Simplify the current state and report the THP eligibility in
> /proc/<pid>/smaps for each existing vma. Reuse transparent_hugepage_enabled
> for this purpose. The original implementation of this function assumes
> that the caller knows that the vma itself is supported for THP so make
> the core checks into __transparent_hugepage_enabled and use it for
> existing callers. __show_smap just use the new transparent_hugepage_enabled
> which also checks the vma support status (please note that this one has
> to be out of line due to include dependency issues).
> 
> Signed-off-by: Michal Hocko <mhocko@suse.com>
> ---
>  Documentation/filesystems/proc.txt |  3 +++
>  fs/proc/task_mmu.c                 |  2 ++
>  include/linux/huge_mm.h            | 13 ++++++++++++-
>  mm/huge_memory.c                   | 12 +++++++++++-
>  mm/memory.c                        |  4 ++--
>  5 files changed, 30 insertions(+), 4 deletions(-)
> 
> diff --git a/Documentation/filesystems/proc.txt b/Documentation/filesystems/proc.txt
> index b1fda309f067..06562bab509a 100644
> --- a/Documentation/filesystems/proc.txt
> +++ b/Documentation/filesystems/proc.txt
> @@ -425,6 +425,7 @@ SwapPss:               0 kB
>  KernelPageSize:        4 kB
>  MMUPageSize:           4 kB
>  Locked:                0 kB
> +THPeligible:           0
>  VmFlags: rd ex mr mw me dw
>  
>  the first of these lines shows the same information as is displayed for the
> @@ -462,6 +463,8 @@ replaced by copy-on-write) part of the underlying shmem object out on swap.
>  "SwapPss" shows proportional swap share of this mapping. Unlike "Swap", this
>  does not take into account swapped out page of underlying shmem objects.
>  "Locked" indicates whether the mapping is locked in memory or not.
> +"THPeligible" indicates whether the mapping is eligible for THP pages - 1 if
> +true, 0 otherwise.
>  
>  "VmFlags" field deserves a separate description. This member represents the kernel
>  flags associated with the particular virtual memory area in two letter encoded
> diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c
> index 47c3764c469b..c9f160eb9fbc 100644
> --- a/fs/proc/task_mmu.c
> +++ b/fs/proc/task_mmu.c
> @@ -790,6 +790,8 @@ static int show_smap(struct seq_file *m, void *v)
>  
>  	__show_smap(m, &mss);
>  
> +	seq_printf(m, "THPeligible:    %d\n", transparent_hugepage_enabled(vma));
> +
>  	if (arch_pkeys_enabled())
>  		seq_printf(m, "ProtectionKey:  %8u\n", vma_pkey(vma));
>  	show_smap_vma_flags(m, vma);
> diff --git a/include/linux/huge_mm.h b/include/linux/huge_mm.h
> index 4663ee96cf59..381e872bfde0 100644
> --- a/include/linux/huge_mm.h
> +++ b/include/linux/huge_mm.h
> @@ -93,7 +93,11 @@ extern bool is_vma_temporary_stack(struct vm_area_struct *vma);
>  
>  extern unsigned long transparent_hugepage_flags;
>  
> -static inline bool transparent_hugepage_enabled(struct vm_area_struct *vma)
> +/*
> + * to be used on vmas which are known to support THP.
> + * Use transparent_hugepage_enabled otherwise
> + */
> +static inline bool __transparent_hugepage_enabled(struct vm_area_struct *vma)
>  {
>  	if (vma->vm_flags & VM_NOHUGEPAGE)
>  		return false;
> @@ -117,6 +121,8 @@ static inline bool transparent_hugepage_enabled(struct vm_area_struct *vma)
>  	return false;
>  }
>  
> +bool transparent_hugepage_enabled(struct vm_area_struct *vma);
> +
>  #define transparent_hugepage_use_zero_page()				\
>  	(transparent_hugepage_flags &					\
>  	 (1<<TRANSPARENT_HUGEPAGE_USE_ZERO_PAGE_FLAG))
> @@ -257,6 +263,11 @@ static inline bool thp_migration_supported(void)
>  
>  #define hpage_nr_pages(x) 1
>  
> +static inline bool __transparent_hugepage_enabled(struct vm_area_struct *vma)
> +{
> +	return false;
> +}
> +
>  static inline bool transparent_hugepage_enabled(struct vm_area_struct *vma)
>  {
>  	return false;
> diff --git a/mm/huge_memory.c b/mm/huge_memory.c
> index 55478ab3c83b..f64733c23067 100644
> --- a/mm/huge_memory.c
> +++ b/mm/huge_memory.c
> @@ -62,6 +62,16 @@ static struct shrinker deferred_split_shrinker;
>  static atomic_t huge_zero_refcount;
>  struct page *huge_zero_page __read_mostly;
>  
> +bool transparent_hugepage_enabled(struct vm_area_struct *vma)
> +{
> +	if (vma_is_anonymous(vma))
> +		return __transparent_hugepage_enabled(vma);
> +	if (shmem_mapping(vma->vm_file->f_mapping) && shmem_huge_enabled(vma))
> +		return __transparent_hugepage_enabled(vma);
> +
> +	return false;
> +}
> +
>  static struct page *get_huge_zero_page(void)
>  {
>  	struct page *zero_page;
> @@ -1303,7 +1313,7 @@ vm_fault_t do_huge_pmd_wp_page(struct vm_fault *vmf, pmd_t orig_pmd)
>  	get_page(page);
>  	spin_unlock(vmf->ptl);
>  alloc:
> -	if (transparent_hugepage_enabled(vma) &&
> +	if (__transparent_hugepage_enabled(vma) &&
>  	    !transparent_hugepage_debug_cow()) {
>  		huge_gfp = alloc_hugepage_direct_gfpmask(vma, haddr);
>  		new_page = alloc_pages_vma(huge_gfp, HPAGE_PMD_ORDER, vma,
> diff --git a/mm/memory.c b/mm/memory.c
> index 4ad2d293ddc2..3c2716ec7fbd 100644
> --- a/mm/memory.c
> +++ b/mm/memory.c
> @@ -3830,7 +3830,7 @@ static vm_fault_t __handle_mm_fault(struct vm_area_struct *vma,
>  	vmf.pud = pud_alloc(mm, p4d, address);
>  	if (!vmf.pud)
>  		return VM_FAULT_OOM;
> -	if (pud_none(*vmf.pud) && transparent_hugepage_enabled(vma)) {
> +	if (pud_none(*vmf.pud) && __transparent_hugepage_enabled(vma)) {
>  		ret = create_huge_pud(&vmf);
>  		if (!(ret & VM_FAULT_FALLBACK))
>  			return ret;
> @@ -3856,7 +3856,7 @@ static vm_fault_t __handle_mm_fault(struct vm_area_struct *vma,
>  	vmf.pmd = pmd_alloc(mm, vmf.pud, address);
>  	if (!vmf.pmd)
>  		return VM_FAULT_OOM;
> -	if (pmd_none(*vmf.pmd) && transparent_hugepage_enabled(vma)) {
> +	if (pmd_none(*vmf.pmd) && __transparent_hugepage_enabled(vma)) {
>  		ret = create_huge_pmd(&vmf);
>  		if (!(ret & VM_FAULT_FALLBACK))
>  			return ret;
> -- 
> 2.19.1

-- 
Michal Hocko
SUSE Labs
