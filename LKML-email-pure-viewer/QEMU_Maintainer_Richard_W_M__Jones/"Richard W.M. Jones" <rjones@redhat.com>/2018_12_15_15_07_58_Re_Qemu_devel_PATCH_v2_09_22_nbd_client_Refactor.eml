Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  16 Dec 2018 10:42:14 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 5E5B75805FC
	for <like.xu@linux.intel.com>; Sat, 15 Dec 2018 07:13:54 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 15 Dec 2018 07:13:54 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AXpa6pBAXNK9tkM49HopWUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP36pcywAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6zaYN0aWHFBXt5PWCNdHoOy?=
 =?us-ascii?q?YYwPD+8bMuZZqYn2ul8CoBS6CAWpAu7k1z1GiWLs3aAi3eovER/I0g8uH90BrH?=
 =?us-ascii?q?vbsdf6O6kPX+CtzqTGzzrOY+5Y1Dvh9ofIaQssoe2QUb9qbcbd1VMiGx3Dg16N?=
 =?us-ascii?q?qYLlJTSV1uEVvmSV8+RgVP6gi249pAFrvzek28cjhpPOiI4P11vK8SJ5wIArKt?=
 =?us-ascii?q?2jRkJwfNmpEIFStyGdMYt5XNgiTnpyuCkk17IGuYS0fDQQxJs7wB7fbuWKfo6V?=
 =?us-ascii?q?6RztU+aRJC13hHNjeL+nnRa971Wvyu3mWcmoylpFsi1FktzUunAJ1hzc8ceHSu?=
 =?us-ascii?q?Zj8Ue6xTaP2RvT5vtDIUAumqrXM5AgwrkqlpUOqUTDBDH5mF7tjKOMakok/e2o?=
 =?us-ascii?q?5uL6abvlvp+RL5F4hh39P6g0h8CzHOc1PhIQU2WV+emwzqDv8E/hTLlUkvE7lr?=
 =?us-ascii?q?PVvI3UKMgFvKK1HgxY34g55xqhDDqr1skTk2MdI1JfYh2HipDkO1HQL/D8Cvey?=
 =?us-ascii?q?m1CskDZwx/DaJb3tGJrNLn7ekLv7erZ98UFcxBIyzdBZ+Z1UFqkMLOzvVkLyrt?=
 =?us-ascii?q?DUEwI1Pg+uz+r5Bthw1pkSVX+ND6OBNaPdq16I5uYhI+mWY48VvS7wK+E76P7r?=
 =?us-ascii?q?kH81gEIScre33ZQJbHC0B+9pI0KEYXrqntgOD3wKsg06TOzri12NTyRfZnmvX6?=
 =?us-ascii?q?8k4jE7CYSmDZrMR4y3gbyB2ju7EYNSZmxcFl+MFnLoep6CW/cLbiKSLclhkiEe?=
 =?us-ascii?q?WbimUY8h2gmitBXmxLp/MurU5ioYuIrn1Nh05O3ciws+9DNpD8mG12GNTmd0nn?=
 =?us-ascii?q?4HRjMs3aB/p1B9xUmH0aRin/NYEtlTtLt0VBwnP8vc0/BiEIK1HQbAZcuSDlCh?=
 =?us-ascii?q?RNqgHHc2VN12xtYPZ0N0HZKllgzC2CyxRKYYkqHOCJEq/6aP4n7qOswozn/H0L?=
 =?us-ascii?q?Um3UArR9YKOWC4i6o67QXKGoPSj22fkKClc7la2zTCo3yex2iDt10NTQhrTK/e?=
 =?us-ascii?q?VmoebEaFkdOsy1nDRPeEDb0kP0MVxMSGI6hHQsfkgVVPWLHoP9GIMEyrnGLlTy?=
 =?us-ascii?q?yJzbOFdoaiRCM4mm3/D04JiEpbqWyEMg4zHQ+7rm7eBSAoHlXqNRC/udJioW+2?=
 =?us-ascii?q?GxdnhzqBaFdsgv/ooxM=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AxAAAaGRVchxHrdtBkFgMBAQEBAQEBA?=
 =?us-ascii?q?QEBAQEHAQEBAQEBgWWBMSqBD4EWE4x0ixmCDXyRX4ZzERgLCYdHIjgSAQMBAQE?=
 =?us-ascii?q?BAQECARMBAQEKCwkIGw4jDII2BQIDGgeCXAECAwECNwwKKQMDAQIGAQEKDgoJH?=
 =?us-ascii?q?QgDAQsFMhcTBYMdAYIAAQQKpiiDQYF/hG2IUoNsEQaBQD+BEYJdNYIQgQ4DgTo?=
 =?us-ascii?q?QAoVzAok4Cg+FfIFPhGyLEQcCAocLikILGIFdTYdJN4coLIESgkiKLIJ3iDuBX?=
 =?us-ascii?q?YF3cBU7gmwJgh4XfwEJgkGFFIU/QTEBgQYciilVgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AxAAAaGRVchxHrdtBkFgMBAQEBAQEBAQEBAQEHAQEBAQE?=
 =?us-ascii?q?BgWWBMSqBD4EWE4x0ixmCDXyRX4ZzERgLCYdHIjgSAQMBAQEBAQECARMBAQEKC?=
 =?us-ascii?q?wkIGw4jDII2BQIDGgeCXAECAwECNwwKKQMDAQIGAQEKDgoJHQgDAQsFMhcTBYM?=
 =?us-ascii?q?dAYIAAQQKpiiDQYF/hG2IUoNsEQaBQD+BEYJdNYIQgQ4DgToQAoVzAok4Cg+Ff?=
 =?us-ascii?q?IFPhGyLEQcCAocLikILGIFdTYdJN4coLIESgkiKLIJ3iDuBXYF3cBU7gmwJgh4?=
 =?us-ascii?q?XfwEJgkGFFIU/QTEBgQYciilVgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,357,1539673200"; 
   d="scan'208";a="142261710"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 15 Dec 2018 07:13:52 -0800
Received: from localhost ([::1]:39392 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gYBdY-0005wW-9a
	for like.xu@linux.intel.com; Sat, 15 Dec 2018 10:13:52 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:51655)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <rjones@redhat.com>) id 1gYBcz-0005o9-Pu
	for qemu-devel@nongnu.org; Sat, 15 Dec 2018 10:13:21 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <rjones@redhat.com>) id 1gYBY2-0005DB-8V
	for qemu-devel@nongnu.org; Sat, 15 Dec 2018 10:08:11 -0500
Received: from mx1.redhat.com ([209.132.183.28]:42438)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <rjones@redhat.com>)
	id 1gYBXx-0004k3-9L; Sat, 15 Dec 2018 10:08:05 -0500
Received: from smtp.corp.redhat.com (int-mx08.intmail.prod.int.phx2.redhat.com
	[10.5.11.23])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id E218F4E92A;
	Sat, 15 Dec 2018 15:08:03 +0000 (UTC)
Received: from localhost (ovpn-116-21.ams2.redhat.com [10.36.116.21])
	by smtp.corp.redhat.com (Postfix) with ESMTP id 35E2457B7;
	Sat, 15 Dec 2018 15:07:59 +0000 (UTC)
Date: Sat, 15 Dec 2018 15:07:58 +0000
From: "Richard W.M. Jones" <rjones@redhat.com>
To: Eric Blake <eblake@redhat.com>
Message-ID: <20181215150758.GW27120@redhat.com>
References: <20181215135324.152629-1-eblake@redhat.com>
	<20181215135324.152629-10-eblake@redhat.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181215135324.152629-10-eblake@redhat.com>
User-Agent: Mutt/1.5.21 (2010-09-15)
X-Scanned-By: MIMEDefang 2.84 on 10.5.11.23
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.38]);
	Sat, 15 Dec 2018 15:08:03 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH v2 09/22] nbd/client: Refactor
 nbd_receive_list()
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: nsoffer@redhat.com, vsementsov@virtuozzo.com, jsnow@redhat.com,
	qemu-devel@nongnu.org, qemu-block@nongnu.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Sat, Dec 15, 2018 at 07:53:11AM -0600, Eric Blake wrote:
> Right now, nbd_receive_list() is only called by
> nbd_receive_query_exports(), which in turn is only called if the
> server lacks NBD_OPT_GO but has working option negotiation, and is
> merely used as a quality-of-implementation trick since servers
> can't give decent errors for NBD_OPT_EXPORT_NAME.  However, servers
> that lack NBD_OPT_GO are becoming increasingly rare (nbdkit was a
> latecomer, in Aug 2018, but qemu has been such a server since commit
> f37708f6 in July 2017 and released in 2.10), so it no longer makes
> sense to micro-optimize that function for performance.
> 
> Furthermore, when debugging a server's implementation, tracing the
> full reply (both names and descriptions) is useful, not to mention
> that upcoming patches adding 'qemu-nbd --list' will want to collect
> that data.  And when you consider that a server can send an export
> name up to the NBD protocol length limit of 4k; but our current
> NBD_MAX_NAME_SIZE is only 256, we can't trace all valid server
> names without more storage, but 4k is large enough that the heap
> is better than the stack for long names.
> 
> Thus, I'm changing the division of labor, with nbd_receive_list()
> now always malloc'ing a result on success (the malloc is bounded
> by the fact that we reject servers with a reply length larger
> than 32M), and moving the comparison to 'wantname' to the caller.
> 
> There is a minor change in behavior where a server with 0 exports
> (an immediate NBD_REP_ACK reply) is now no longer distinguished
> from a server without LIST support (NBD_REP_ERR_UNSUP); this
> information could be preserved with a complication to the calling
> contract to provide a bit more information, but I didn't see the
> point.  After all, the worst that can happen if our guess at a
> match is wrong is that the caller will get a cryptic disconnect
> when NBD_OPT_EXPORT_NAME fails (which is no different from what
> would happen if we had not tried LIST), while treating an empty
> list as immediate failure would prevent connecting to really old
> servers that really did lack LIST.  Besides, NBD servers with 0
> exports are rare (qemu can do it when using QMP nbd-server-start
> without nbd-server-add - but qemu understands NBD_OPT_GO and
> thus won't tickle this change in behavior).
> 
> Signed-off-by: Eric Blake <eblake@redhat.com>
> 
> ---
> v2: Rewrite in a different manner (move the comparison to the
> caller)
> Fix free to g_free [Vladimir]
> ---
>  nbd/client.c     | 89 +++++++++++++++++++++++++++++++-----------------
>  nbd/trace-events |  1 +
>  2 files changed, 58 insertions(+), 32 deletions(-)
> 
> diff --git a/nbd/client.c b/nbd/client.c
> index 1a3a620fb6d..28f5a286cba 100644
> --- a/nbd/client.c
> +++ b/nbd/client.c
> @@ -232,18 +232,24 @@ static int nbd_handle_reply_err(QIOChannel *ioc, NBDOptionReply *reply,
>      return result;
>  }
> 
> -/* Process another portion of the NBD_OPT_LIST reply.  Set *@match if
> - * the current reply matches @want or if the server does not support
> - * NBD_OPT_LIST, otherwise leave @match alone.  Return 0 if iteration
> - * is complete, positive if more replies are expected, or negative
> - * with @errp set if an unrecoverable error occurred. */
> -static int nbd_receive_list(QIOChannel *ioc, const char *want, bool *match,
> +/* nbd_receive_list:
> + * Process another portion of the NBD_OPT_LIST reply, populating any
> + * name received into *@name. If @description is non-NULL, and the
> + * server provided a description, that is also populated. The caller
> + * must eventually call g_free() on success.
> + * Returns 1 if a name was received and iteration must continue,
> + *         0 if iteration is complete,
> + *         -1 with @errp set if an unrecoverable error occurred.
> + */
> +static int nbd_receive_list(QIOChannel *ioc, char **name, char **description,
>                              Error **errp)
>  {
> +    int ret = -1;
>      NBDOptionReply reply;
>      uint32_t len;
>      uint32_t namelen;
> -    char name[NBD_MAX_NAME_SIZE + 1];
> +    char *local_name = NULL;
> +    char *local_desc = NULL;
>      int error;
> 
>      if (nbd_receive_option_reply(ioc, NBD_OPT_LIST, &reply, errp) < 0) {
> @@ -251,9 +257,6 @@ static int nbd_receive_list(QIOChannel *ioc, const char *want, bool *match,
>      }
>      error = nbd_handle_reply_err(ioc, &reply, errp);
>      if (error <= 0) {
> -        /* The server did not support NBD_OPT_LIST, so set *match on
> -         * the assumption that any name will be accepted.  */
> -        *match = true;
>          return error;
>      }
>      len = reply.length;
> @@ -290,33 +293,38 @@ static int nbd_receive_list(QIOChannel *ioc, const char *want, bool *match,
>          nbd_send_opt_abort(ioc);
>          return -1;
>      }
> -    if (namelen != strlen(want)) {
> -        if (nbd_drop(ioc, len, errp) < 0) {
> -            error_prepend(errp,
> -                          "failed to skip export name with wrong length: ");
> -            nbd_send_opt_abort(ioc);
> -            return -1;
> -        }
> -        return 1;
> -    }
> 
> -    assert(namelen < sizeof(name));
> -    if (nbd_read(ioc, name, namelen, errp) < 0) {
> +    local_name = g_malloc(namelen + 1);
> +    if (nbd_read(ioc, local_name, namelen, errp) < 0) {
>          error_prepend(errp, "failed to read export name: ");
>          nbd_send_opt_abort(ioc);
> -        return -1;
> +        goto out;
>      }
> -    name[namelen] = '\0';
> +    local_name[namelen] = '\0';
>      len -= namelen;
> -    if (nbd_drop(ioc, len, errp) < 0) {
> -        error_prepend(errp, "failed to read export description: ");
> -        nbd_send_opt_abort(ioc);
> -        return -1;
> +    if (len) {
> +        local_desc = g_malloc(len + 1);
> +        if (nbd_read(ioc, local_desc, len, errp) < 0) {
> +            error_prepend(errp, "failed to read export description: ");
> +            nbd_send_opt_abort(ioc);
> +            goto out;
> +        }
> +        local_desc[len] = '\0';
>      }
> -    if (!strcmp(name, want)) {
> -        *match = true;
> +
> +    trace_nbd_receive_list(local_name, local_desc ?: "");
> +    *name = local_name;
> +    local_name = NULL;
> +    if (description) {
> +        *description = local_desc;
> +        local_desc = NULL;
>      }
> -    return 1;
> +    ret = 1;
> +
> + out:
> +    g_free(local_name);
> +    g_free(local_desc);
> +    return ret;
>  }
> 
> 
> @@ -491,6 +499,7 @@ static int nbd_receive_query_exports(QIOChannel *ioc,
>                                       const char *wantname,
>                                       Error **errp)
>  {
> +    bool listEmpty = true;
>      bool foundExport = false;
> 
>      trace_nbd_receive_query_exports_start(wantname);
> @@ -499,14 +508,25 @@ static int nbd_receive_query_exports(QIOChannel *ioc,
>      }
> 
>      while (1) {
> -        int ret = nbd_receive_list(ioc, wantname, &foundExport, errp);
> +        char *name;
> +        int ret = nbd_receive_list(ioc, &name, NULL, errp);
> 
>          if (ret < 0) {
>              /* Server gave unexpected reply */
>              return -1;
>          } else if (ret == 0) {
>              /* Done iterating. */
> -            if (!foundExport) {
> +            if (listEmpty) {
> +                /*
> +                 * We don't have enough context to tell a server that
> +                 * sent an empty list apart from a server that does
> +                 * not support the list command; but as this function
> +                 * is just used to trigger a nicer error message
> +                 * before trying NBD_OPT_EXPORT_NAME, assume the
> +                 * export is available.
> +                 */
> +                return 0;
> +            } else if (!foundExport) {
>                  error_setg(errp, "No export with name '%s' available",
>                             wantname);
>                  nbd_send_opt_abort(ioc);
> @@ -515,6 +535,11 @@ static int nbd_receive_query_exports(QIOChannel *ioc,
>              trace_nbd_receive_query_exports_success(wantname);
>              return 0;
>          }
> +        listEmpty = false;
> +        if (!strcmp(name, wantname)) {
> +            foundExport = true;
> +        }
> +        g_free(name);
>      }
>  }
> 
> diff --git a/nbd/trace-events b/nbd/trace-events
> index 5e1d4afe8e6..8e9fc024c28 100644
> --- a/nbd/trace-events
> +++ b/nbd/trace-events
> @@ -2,6 +2,7 @@
>  nbd_send_option_request(uint32_t opt, const char *name, uint32_t len) "Sending option request %" PRIu32" (%s), len %" PRIu32
>  nbd_receive_option_reply(uint32_t option, const char *optname, uint32_t type, const char *typename, uint32_t length) "Received option reply %" PRIu32" (%s), type %" PRIu32" (%s), len %" PRIu32
>  nbd_reply_err_unsup(uint32_t option, const char *name) "server doesn't understand request %" PRIu32 " (%s), attempting fallback"
> +nbd_receive_list(const char *name, const char *desc) "export list includes '%s', description '%s'"
>  nbd_opt_go_start(const char *name) "Attempting NBD_OPT_GO for export '%s'"
>  nbd_opt_go_success(void) "Export is good to go"
>  nbd_opt_go_info_unknown(int info, const char *name) "Ignoring unknown info %d (%s)"
> -- 
> 2.17.2

I agree that moving the wantname functionality into the parent greatly
simplifies this refactoring.

Reviewed-by: Richard W.M. Jones <rjones@redhat.com>

Rich.

-- 
Richard Jones, Virtualization Group, Red Hat http://people.redhat.com/~rjones
Read my programming and virtualization blog: http://rwmj.wordpress.com
virt-builder quickly builds VMs from scratch
http://libguestfs.org/virt-builder.1.html

