Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  16 Dec 2018 10:42:25 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 00ED05805FC
	for <like.xu@linux.intel.com>; Sat, 15 Dec 2018 07:44:52 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by fmsmga001-1.fm.intel.com with ESMTP; 15 Dec 2018 07:44:52 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3ALcG2ehAyiIWMuVvOEhOvUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP37rs6wAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6zaYN0aWHFBXt5PWCNdHoOy?=
 =?us-ascii?q?YYwPD+8bMuZZqYn2ul8CoBS6CAWpAu7k1z1GiWLs3aAi3eovER/I0g8uH90BrH?=
 =?us-ascii?q?vbsdf6O6kdX+6o1KnFzzfNYvxL1Trz9ITHbAshrOqQXbJpa8fd1VUjGhnHg1iW?=
 =?us-ascii?q?tIfrPymV1uMIs2WD4eZuSeOvhHInqw5ruDig29onhYnTiowS0FzP6CF3wIEzJd?=
 =?us-ascii?q?KmU053b8OvHZxKtyGYMIt2RN0tQ3pztSYg1LIJpJ67czIWyJg92xHfbPmHfpGO?=
 =?us-ascii?q?7xn+WuiRJjJ4i2hkeLK5nxuy61avxfD8VsauzFZGtDZKkt7JtnwV2R3T7dKHRe?=
 =?us-ascii?q?Zl/ke7xzmPzBvT5vtYLkAzkKrWLYMqzL0olpcLr0jPAiz7lF/rgKOLdUgo4Pak?=
 =?us-ascii?q?5urnb7n8u5ORNZd4hh/iPqkqgMCzHOo1PhYUU2SG+umx2qfv8VP6TbhMk/Y4iL?=
 =?us-ascii?q?PWsIrAKsQevqO5AxFa0oIk6xunCzem0c8YnWUcLF5fdxKHiZXpN0vJIPDiAvez?=
 =?us-ascii?q?m1WskDF1yPDaJrDtHInBI3vZnLv8YLpw6FRQxBQ9wN1f/Z5YF7MMLOr2WkDrtd?=
 =?us-ascii?q?zYChE5Mxazw+biENh9z50RWWeSAqOALazdr0GI6fwrI+WVf4AVvyv9K/456PHw?=
 =?us-ascii?q?ln81nlsdfaiq3ZQJcny5EelmLl2dYXrthNcBDGgLshA/TOzslF2NTzpTa2yuUK?=
 =?us-ascii?q?I74zE2E4SmDYDFRoCihryBwT23HppMZmBJElyMC2vnd52YW/cQbyKfOsthkj0H?=
 =?us-ascii?q?Vbe/UYMg2gyuuRT+y7pmKOrU5yIZuYji1Nhz++3cixUy+SZoAMSa1mHeB1xyhX?=
 =?us-ascii?q?4CEj8qwLhk8ws6zlaYzbM+hfteGtpOofRTXUA/PJ/YyuV8TNfqRgPGeMzOUVuj?=
 =?us-ascii?q?X5CqDC88SoEMxcQTaRN4EtSmkheRxievHvoZmqKGANku/7vB0mPtD8B6zXnAye?=
 =?us-ascii?q?8mlVZxWdZFN2Ctmvti8RPODZXCiUSTmvWWcvExxi/GvE2HxGmD9BVVWgp5Uqjt?=
 =?us-ascii?q?R30TZkLK69/+4xWRYaWpDOFtCApKyceYJuN1LPivxXdBQvr4cpyKeWC2nWqrLQ?=
 =?us-ascii?q?yFyrOFcMzhfGBLj3aVM1QNjw1GpSXODgM5HCr05j+HAQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AWAADoIBVchxHrdtBkFgQBAQEBAQIBA?=
 =?us-ascii?q?QEBBwIBAQEBgVQCAQEBAQsBAYEvgTmBFhODfIh4ixmCDZJbhRGBYhEYCwmBS4J?=
 =?us-ascii?q?1gwciNwYNAQMBAQEBAQECARMBAQEKCwkIGw4jDEIBDgGBZAUCAxoHglwBAgMBA?=
 =?us-ascii?q?iAEHwopAwMBAgYBAQoOCgICBR0EAgIDAQsFMhcTBYMdAYIAAQQKpHt8M4VAhG2?=
 =?us-ascii?q?BC4szEQaBQD+BEYMSghCCNhQBEBaDCDGCJgKJMIYdhjuLEQcCAocLg0CHAgsYg?=
 =?us-ascii?q?V1Nh0k3hygsgRKCSIosgneFSIJzgVyBeHAVO4JsCYIeF4NKilNBMYEHHIE1iHM?=
 =?us-ascii?q?BAQUfBymBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0AWAADoIBVchxHrdtBkFgQBAQEBAQIBAQEBBwIBAQEBgVQ?=
 =?us-ascii?q?CAQEBAQsBAYEvgTmBFhODfIh4ixmCDZJbhRGBYhEYCwmBS4J1gwciNwYNAQMBA?=
 =?us-ascii?q?QEBAQECARMBAQEKCwkIGw4jDEIBDgGBZAUCAxoHglwBAgMBAiAEHwopAwMBAgY?=
 =?us-ascii?q?BAQoOCgICBR0EAgIDAQsFMhcTBYMdAYIAAQQKpHt8M4VAhG2BC4szEQaBQD+BE?=
 =?us-ascii?q?YMSghCCNhQBEBaDCDGCJgKJMIYdhjuLEQcCAocLg0CHAgsYgV1Nh0k3hygsgRK?=
 =?us-ascii?q?CSIosgneFSIJzgVyBeHAVO4JsCYIeF4NKilNBMYEHHIE1iHMBAQUfBymBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,357,1539673200"; 
   d="scan'208";a="57614421"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 15 Dec 2018 07:44:50 -0800
Received: from localhost ([::1]:39464 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gYC7W-0005Uj-QP
	for like.xu@linux.intel.com; Sat, 15 Dec 2018 10:44:50 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:56794)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <rjones@redhat.com>) id 1gYC75-0005Tv-Tj
	for qemu-devel@nongnu.org; Sat, 15 Dec 2018 10:44:27 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <rjones@redhat.com>) id 1gYC5Q-0004RR-Dc
	for qemu-devel@nongnu.org; Sat, 15 Dec 2018 10:42:42 -0500
Received: from mx1.redhat.com ([209.132.183.28]:57484)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <rjones@redhat.com>)
	id 1gYC5L-0004F7-VQ; Sat, 15 Dec 2018 10:42:36 -0500
Received: from smtp.corp.redhat.com (int-mx07.intmail.prod.int.phx2.redhat.com
	[10.5.11.22])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 16DB9C058CB1;
	Sat, 15 Dec 2018 15:42:35 +0000 (UTC)
Received: from localhost (ovpn-116-21.ams2.redhat.com [10.36.116.21])
	by smtp.corp.redhat.com (Postfix) with ESMTP id 2FC36101E597;
	Sat, 15 Dec 2018 15:42:32 +0000 (UTC)
Date: Sat, 15 Dec 2018 15:42:31 +0000
From: "Richard W.M. Jones" <rjones@redhat.com>
To: Eric Blake <eblake@redhat.com>
Message-ID: <20181215154231.GC27120@redhat.com>
References: <20181215135324.152629-1-eblake@redhat.com>
	<20181215135324.152629-19-eblake@redhat.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
In-Reply-To: <20181215135324.152629-19-eblake@redhat.com>
User-Agent: Mutt/1.5.21 (2010-09-15)
X-Scanned-By: MIMEDefang 2.84 on 10.5.11.22
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.32]);
	Sat, 15 Dec 2018 15:42:35 +0000 (UTC)
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH v2 18/22] nbd/client: Add
 nbd_receive_export_list()
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Kevin Wolf <kwolf@redhat.com>, vsementsov@virtuozzo.com,
	qemu-block@nongnu.org, qemu-devel@nongnu.org,
	Max Reitz <mreitz@redhat.com>, nsoffer@redhat.com, jsnow@redhat.com
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Sat, Dec 15, 2018 at 07:53:20AM -0600, Eric Blake wrote:
> We want to be able to detect whether a given qemu NBD server is
> exposing the right export(s) and dirty bitmaps, at least for
> regression testing.  We could use 'nbd-client -l' from the upstream
> NBD project to list exports, but it's annoying to rely on
> out-of-tree binaries; furthermore, nbd-client doesn't necessarily
> know about all of the qemu NBD extensions.  Thus, we plan on adding
> a new mode to qemu-nbd that merely sniffs all possible information
> from the server during handshake phase, then disconnects and dumps
> the information.
>=20
> This patch adds the low-level client code for grabbing the list
> of exports.  It benefits from the recent refactoring patches, as
> well as a minor tweak of changing nbd_opt_go() to nbd_opt_info_or_go(),
> in order to share as much code as possible when it comes to doing
> validation of server replies.  The resulting information is stored
> in an array of NBDExportInfo which has been expanded to any
> description string, along with a convenience function for freeing
> the list.
>=20
> Signed-off-by: Eric Blake <eblake@redhat.com>
>=20
> ---
> v2: split out oldstyle size computation into earlier patch [Vladimir]
> rename nbd_opt_info_or_go [Rich]
> split out collection of meta context collection into later patch
> ---
>  include/block/nbd.h |  15 ++++-
>  nbd/client.c        | 138 ++++++++++++++++++++++++++++++++++++++++++--
>  nbd/trace-events    |   2 +-
>  3 files changed, 146 insertions(+), 9 deletions(-)
>=20
> diff --git a/include/block/nbd.h b/include/block/nbd.h
> index ae5fe28f486..09d2157efe0 100644
> --- a/include/block/nbd.h
> +++ b/include/block/nbd.h
> @@ -1,5 +1,5 @@
>  /*
> - *  Copyright (C) 2016-2017 Red Hat, Inc.
> + *  Copyright (C) 2016-2018 Red Hat, Inc.
>   *  Copyright (C) 2005  Anthony Liguori <anthony@codemonkey.ws>
>   *
>   *  Network Block Device
> @@ -262,6 +262,9 @@ struct NBDExportInfo {
>      /* Set by client before nbd_receive_negotiate() */
>      bool request_sizes;
>      char *x_dirty_bitmap;
> +
> +    /* Set by client before nbd_receive_negotiate(), or by server resu=
lts
> +     * during nbd_receive_export_list() */
>      char *name; /* must be non-NULL */
>=20
>      /* In-out fields, set by client before nbd_receive_negotiate() and
> @@ -269,7 +272,8 @@ struct NBDExportInfo {
>      bool structured_reply;
>      bool base_allocation; /* base:allocation context for NBD_CMD_BLOCK=
_STATUS */
>=20
> -    /* Set by server results during nbd_receive_negotiate() */
> +    /* Set by server results during nbd_receive_negotiate() and
> +     * nbd_receive_export_list() */
>      uint64_t size;
>      uint16_t flags;
>      uint32_t min_block;
> @@ -277,12 +281,19 @@ struct NBDExportInfo {
>      uint32_t max_block;
>=20
>      uint32_t context_id;
> +
> +    /* Set by server results during nbd_receive_export_list() */
> +    char *description;
>  };
>  typedef struct NBDExportInfo NBDExportInfo;
>=20
>  int nbd_receive_negotiate(QIOChannel *ioc, QCryptoTLSCreds *tlscreds,
>                            const char *hostname, QIOChannel **outioc,
>                            NBDExportInfo *info, Error **errp);
> +void nbd_free_export_list(NBDExportInfo *info, int count);
> +int nbd_receive_export_list(QIOChannel *ioc, QCryptoTLSCreds *tlscreds=
,
> +                            const char *hostname, NBDExportInfo **info=
,
> +                            Error **errp);
>  int nbd_init(int fd, QIOChannelSocket *sioc, NBDExportInfo *info,
>               Error **errp);
>  int nbd_send_request(QIOChannel *ioc, NBDRequest *request);
> diff --git a/nbd/client.c b/nbd/client.c
> index 4bdfba43068..0e6c575ccad 100644
> --- a/nbd/client.c
> +++ b/nbd/client.c
> @@ -332,7 +332,8 @@ static int nbd_receive_list(QIOChannel *ioc, char *=
*name, char **description,
>   * used, 0 if NBD_OPT_GO is unsupported (fall back to NBD_OPT_LIST and
>   * NBD_OPT_EXPORT_NAME in that case), and > 0 if the export is good to
>   * go (with the rest of @info populated). */
> -static int nbd_opt_go(QIOChannel *ioc, NBDExportInfo *info, Error **er=
rp)
> +static int nbd_opt_info_or_go(QIOChannel *ioc, uint32_t opt,
> +                              NBDExportInfo *info, Error **errp)
>  {
>      NBDOptionReply reply;
>      uint32_t len =3D strlen(info->name);
> @@ -345,7 +346,8 @@ static int nbd_opt_go(QIOChannel *ioc, NBDExportInf=
o *info, Error **errp)
>       * flags still 0 is a witness of a broken server. */
>      info->flags =3D 0;
>=20
> -    trace_nbd_opt_go_start(info->name);
> +    assert(opt =3D=3D NBD_OPT_GO || opt =3D=3D NBD_OPT_INFO);
> +    trace_nbd_opt_go_start(nbd_opt_lookup(opt), info->name);
>      buf =3D g_malloc(4 + len + 2 + 2 * info->request_sizes + 1);
>      stl_be_p(buf, len);
>      memcpy(buf + 4, info->name, len);
> @@ -354,7 +356,7 @@ static int nbd_opt_go(QIOChannel *ioc, NBDExportInf=
o *info, Error **errp)
>      if (info->request_sizes) {
>          stw_be_p(buf + 4 + len + 2, NBD_INFO_BLOCK_SIZE);
>      }
> -    error =3D nbd_send_option_request(ioc, NBD_OPT_GO,
> +    error =3D nbd_send_option_request(ioc, opt,
>                                      4 + len + 2 + 2 * info->request_si=
zes,
>                                      buf, errp);
>      g_free(buf);
> @@ -363,7 +365,7 @@ static int nbd_opt_go(QIOChannel *ioc, NBDExportInf=
o *info, Error **errp)
>      }
>=20
>      while (1) {
> -        if (nbd_receive_option_reply(ioc, NBD_OPT_GO, &reply, errp) < =
0) {
> +        if (nbd_receive_option_reply(ioc, opt, &reply, errp) < 0) {
>              return -1;
>          }
>          error =3D nbd_handle_reply_err(ioc, &reply, errp);
> @@ -868,7 +870,9 @@ static int nbd_start_negotiate(QIOChannel *ioc, QCr=
yptoTLSCreds *tlscreds,
>              clientflags |=3D NBD_FLAG_C_FIXED_NEWSTYLE;
>          }
>          if (globalflags & NBD_FLAG_NO_ZEROES) {
> -            *zeroes =3D false;
> +            if (zeroes) {
> +                *zeroes =3D false;
> +            }
>              clientflags |=3D NBD_FLAG_C_NO_ZEROES;
>          }
>          /* client requested flags */
> @@ -989,7 +993,7 @@ int nbd_receive_negotiate(QIOChannel *ioc, QCryptoT=
LSCreds *tlscreds,
>           * TLS).  If it is not available, fall back to
>           * NBD_OPT_LIST for nicer error messages about a missing
>           * export, then use NBD_OPT_EXPORT_NAME.  */
> -        result =3D nbd_opt_go(ioc, info, errp);
> +        result =3D nbd_opt_info_or_go(ioc, NBD_OPT_GO, info, errp);
>          if (result < 0) {
>              return -EINVAL;
>          }
> @@ -1047,6 +1051,128 @@ int nbd_receive_negotiate(QIOChannel *ioc, QCry=
ptoTLSCreds *tlscreds,
>      return 0;
>  }
>=20
> +/* Clean up result of nbd_receive_export_list */
> +void nbd_free_export_list(NBDExportInfo *info, int count)
> +{
> +    int i;
> +
> +    if (!info) {
> +        return;
> +    }
> +
> +    for (i =3D 0; i < count; i++) {
> +        g_free(info[i].name);
> +        g_free(info[i].description);
> +    }
> +    g_free(info);
> +}
> +
> +/*
> + * nbd_receive_export_list:
> + * Query details about a server's exports, then disconnect without
> + * going into transmission phase. Return a count of the exports listed
> + * in @info by the server, or -1 on error. Caller must free @info usin=
g
> + * nbd_free_export_list().
> + */
> +int nbd_receive_export_list(QIOChannel *ioc, QCryptoTLSCreds *tlscreds=
,
> +                            const char *hostname, NBDExportInfo **info=
,
> +                            Error **errp)
> +{
> +    int result;
> +    int count =3D 0;
> +    int i;
> +    int rc;
> +    int ret =3D -1;
> +    NBDExportInfo *array =3D NULL;
> +    QIOChannel *sioc =3D NULL;
> +
> +    *info =3D NULL;
> +    result =3D nbd_start_negotiate(ioc, tlscreds, hostname, &sioc, tru=
e, NULL,
> +                                 errp);
> +    if (tlscreds && sioc) {
> +        ioc =3D sioc;
> +    }
> +
> +    switch (result) {
> +    case 2:
> +    case 3:
> +        /* newstyle - use NBD_OPT_LIST to populate array, then try
> +         * NBD_OPT_INFO on each array member. If structured replies
> +         * are enabled, also try NBD_OPT_LIST_META_CONTEXT. */
> +        if (nbd_send_option_request(ioc, NBD_OPT_LIST, 0, NULL, errp) =
< 0) {
> +            goto out;
> +        }
> +        while (1) {
> +            char *name;
> +            char *desc;
> +
> +            rc =3D nbd_receive_list(ioc, &name, &desc, errp);
> +            if (rc < 0) {
> +                goto out;
> +            } else if (rc =3D=3D 0) {
> +                break;
> +            }
> +            array =3D g_renew(NBDExportInfo, array, ++count);
> +            memset(&array[count - 1], 0, sizeof(*array));
> +            array[count - 1].name =3D name;
> +            array[count - 1].description =3D desc;
> +            array[count - 1].structured_reply =3D result =3D=3D 3;
> +        }

Do we care about limiting =E2=80=98count=E2=80=99 to some reasonable valu=
e here?

I tried to look at the protocol document to see if there's a limit on
the number of exports that a server can have, but if there is I cannot
find it.  I don't know how much we care about malicious NBD servers --
mostly I'm interested in malicious NBD clients :-)

> +        for (i =3D 0; i < count; i++) {
> +            array[i].request_sizes =3D true;
> +            rc =3D nbd_opt_info_or_go(ioc, NBD_OPT_INFO, &array[i], er=
rp);
> +            if (rc < 0) {
> +                goto out;
> +            } else if (rc =3D=3D 0) {
> +                /* Pointless to try rest of loop. If OPT_INFO doesn't =
work,
> +                 * it's unlikely that meta contexts work either */
> +                break;
> +            }
> +
> +            /* TODO: Grab meta contexts */
> +        }
> +
> +        /* Send NBD_OPT_ABORT as a courtesy before hanging up */
> +        nbd_send_opt_abort(ioc);
> +        break;
> +    case 1: /* newstyle, but limited to EXPORT_NAME */
> +        error_setg(errp, "Server does not support export lists");
> +        /* We can't even send NBD_OPT_ABORT, so merely hang up */
> +        goto out;
> +    case 0: /* oldstyle, parse length and flags */
> +        array =3D g_new0(NBDExportInfo, 1);
> +        array->name =3D g_strdup("");
> +        count =3D 1;
> +
> +        if (nbd_negotiate_finish_oldstyle(ioc, array, errp) < 0) {
> +            return -EINVAL;
> +        }
> +
> +        /* Send NBD_CMD_DISC as a courtesy to the server, but ignore a=
ll
> +         * errors now that we have the information we wanted. */
> +        if (nbd_drop(ioc, 124, NULL) =3D=3D 0) {
> +            NBDRequest request =3D { .type =3D NBD_CMD_DISC };
> +
> +            nbd_send_request(ioc, &request);
> +        }
> +        break;
> +    default:
> +        goto out;
> +    }
> +
> +    *info =3D array;
> +    array =3D NULL;
> +    ret =3D count;
> +
> + out:
> +    qio_channel_shutdown(ioc, QIO_CHANNEL_SHUTDOWN_BOTH, NULL);
> +    qio_channel_close(ioc, NULL);
> +    object_unref(OBJECT(sioc));
> +    nbd_free_export_list(array, count);
> +    return ret;
> +}
> +
>  #ifdef __linux__
>  int nbd_init(int fd, QIOChannelSocket *sioc, NBDExportInfo *info,
>               Error **errp)
> diff --git a/nbd/trace-events b/nbd/trace-events
> index 922b36d1843..a66bf891cc9 100644
> --- a/nbd/trace-events
> +++ b/nbd/trace-events
> @@ -3,7 +3,7 @@ nbd_send_option_request(uint32_t opt, const char *name,=
 uint32_t len) "Sending o
>  nbd_receive_option_reply(uint32_t option, const char *optname, uint32_=
t type, const char *typename, uint32_t length) "Received option reply %" =
PRIu32" (%s), type %" PRIu32" (%s), len %" PRIu32
>  nbd_reply_err_unsup(uint32_t option, const char *name) "server doesn't=
 understand request %" PRIu32 " (%s), attempting fallback"
>  nbd_receive_list(const char *name, const char *desc) "export list incl=
udes '%s', description '%s'"
> -nbd_opt_go_start(const char *name) "Attempting NBD_OPT_GO for export '=
%s'"
> +nbd_opt_go_start(const char *opt, const char *name) "Attempting %s for=
 export '%s'"
>  nbd_opt_go_success(void) "Export is good to go"
>  nbd_opt_go_info_unknown(int info, const char *name) "Ignoring unknown =
info %d (%s)"
>  nbd_opt_go_info_block_size(uint32_t minimum, uint32_t preferred, uint3=
2_t maximum) "Block sizes are 0x%" PRIx32 ", 0x%" PRIx32 ", 0x%" PRIx32

Anyway looks good, so:

Reviewed-by: Richard W.M. Jones <rjones@redhat.com>

Rich.

--=20
Richard Jones, Virtualization Group, Red Hat http://people.redhat.com/~rj=
ones
Read my programming and virtualization blog: http://rwmj.wordpress.com
virt-df lists disk usage of guests without needing to install any
software inside the virtual machine.  Supports Linux and Windows.
http://people.redhat.com/~rjones/virt-df/

