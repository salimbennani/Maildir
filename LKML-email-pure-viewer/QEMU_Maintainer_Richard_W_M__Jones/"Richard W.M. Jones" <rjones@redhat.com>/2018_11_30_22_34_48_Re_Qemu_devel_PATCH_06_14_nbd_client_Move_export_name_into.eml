Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:24:08 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id CB35B58054E
	for <like.xu@linux.intel.com>; Fri, 30 Nov 2018 14:35:16 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga006-1.jf.intel.com with ESMTP; 30 Nov 2018 14:35:16 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A0QTApB3hAJM6kSSEsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?sesXKPrxwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfV5Y63dYMgaRXJfUclNSyxPDIS8?=
 =?us-ascii?q?b44VAOoAO+ZTso3xqlQKoBe7AwSnGeHhxSJShnLu06M00/ovHwLI3AMvA90BrX?=
 =?us-ascii?q?bbo9voOqcKU+27zqbFwSjNYv9Kxzj985PFcgw9rfyWQb58bdDcxVcpGgjYjluQ?=
 =?us-ascii?q?s4vlPzaN2+gDr2ab7vZvVeK1hG49tg56vzigyt0rhIXTm4kbzlfE9SNnz4YuK9?=
 =?us-ascii?q?GzVUl2YcSmEJtXsSGVKZB2T9g4Q252pSk6yqcJuYKhcCcWz5QnwgfSZvqaeIaG?=
 =?us-ascii?q?5RLjUfyeITZ+hH99YrKwmQu98Ui6xe3gTMW7zFFKri9dntnCqH8CyhvT6tKdRf?=
 =?us-ascii?q?tl5Eeh3jSP2B7P5eFYO0w0krDbK5E5zr8+kZoTq1nMHjfsmErol6+WbV8o9fSv?=
 =?us-ascii?q?6+TiZLjtu5ySN5dshw3gLqgjmdazDfklPgUNRWSX5+qx2b358UHkQrhGluM6nr?=
 =?us-ascii?q?XdvZzAOMgWqLC1DxVI3osg5RuzFSmq3dcekHIaNlxKYgiHgJLsO1zWIPD3E/O/?=
 =?us-ascii?q?g1O0nTdvxvDGJaHhAo7XInjMlrfhYKxx60lGyAo81dxf5pRUBa8dIP/rREP9qN?=
 =?us-ascii?q?/VAgUkPwCpwOvrEstx240eVG6VH6OUMrvesVqS6eIuJ+mMapUVuDH4K/U9/v7h?=
 =?us-ascii?q?k3o5mUIEcaa0w5QXdm63HvB/L0qCZnrsn9EBHnsUsQolS+DqjFyCUT1NaHqoUK?=
 =?us-ascii?q?M8+yk2CIanDYfFW4Csj6aN3Ca9Hp1KeG9GDkqAHmvvd4WBQPoMbiWSIslukjwC?=
 =?us-ascii?q?SLitUYgh1QuhtAPi0bpoMvLU+jEEtZLkzNV14+zTlRIs+jBuAMWdznqAT2V1nm?=
 =?us-ascii?q?MOWj8307pzoU17ylefz6d4h+ZUGsBU5/NMAU8HM4XBxbl6F8zqQVCGOdOIU0q9?=
 =?us-ascii?q?BNOhBz43U5Q22dBJZk98H9CriFfExzarBLkO0KWGAYFx/q/C0nyiGsBm1nyT0a?=
 =?us-ascii?q?Agi0UhENJCMHDjiqNh+gyWHYPQjkiCi46scqIT2jOL832MmnGTtkNVWxIlTKPe?=
 =?us-ascii?q?QHoEbVHXp9mq2kSXYqWvAvwNNgJCxIbWJ6FOY97kpU9LSPfqJJLVZGfnyEmqAh?=
 =?us-ascii?q?PdjImNZ4rjYWlV42P4TgAmlAYe5jzOYRI8ASGsuErEATBuHE6paETpp7ot4Ein?=
 =?us-ascii?q?R1M5mlnZJ3Zq0KC4r1tI3PE=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A2AADLugFchxHrdtBjFgQBAQEBAQIBA?=
 =?us-ascii?q?QEBBwIBAQEBgWWBMYE5gRYTjHCNOXyYQhEYBw2HdiI4EgEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BCgsJCBsOIwyCNgUCAxoHglwBAgMBAiQTDAopAwMBAgYBAQoOCgkdCAMBCwU1A?=
 =?us-ascii?q?RMTBYMcAYIBAQQKp28zhUCEbYgxg2kRBoFAP4ERgl01ghCCW4NLgiYCiSMKhX2?=
 =?us-ascii?q?BTIRiil0HAgKGfYotCxiBW02HMTaHEIE4gjiJb4JViCmBXYF2cBU7gmwJgh4Xg?=
 =?us-ascii?q?0qEUUOFP0ExgQcciy2BdwEB?=
X-IPAS-Result: =?us-ascii?q?A0A2AADLugFchxHrdtBjFgQBAQEBAQIBAQEBBwIBAQEBgWW?=
 =?us-ascii?q?BMYE5gRYTjHCNOXyYQhEYBw2HdiI4EgEDAQEBAQEBAgETAQEBCgsJCBsOIwyCN?=
 =?us-ascii?q?gUCAxoHglwBAgMBAiQTDAopAwMBAgYBAQoOCgkdCAMBCwU1ARMTBYMcAYIBAQQ?=
 =?us-ascii?q?Kp28zhUCEbYgxg2kRBoFAP4ERgl01ghCCW4NLgiYCiSMKhX2BTIRiil0HAgKGf?=
 =?us-ascii?q?YotCxiBW02HMTaHEIE4gjiJb4JViCmBXYF2cBU7gmwJgh4Xg0qEUUOFP0ExgQc?=
 =?us-ascii?q?ciy2BdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,300,1539673200"; 
   d="scan'208";a="42313110"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 30 Nov 2018 14:35:15 -0800
Received: from localhost ([::1]:34972 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gSrNT-0003WX-0G
	for like.xu@linux.intel.com; Fri, 30 Nov 2018 17:35:15 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:36862)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <rjones@redhat.com>) id 1gSrNE-0003SI-Bg
	for qemu-devel@nongnu.org; Fri, 30 Nov 2018 17:35:01 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <rjones@redhat.com>) id 1gSrNC-0001v8-T2
	for qemu-devel@nongnu.org; Fri, 30 Nov 2018 17:35:00 -0500
Received: from mx1.redhat.com ([209.132.183.28]:32998)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <rjones@redhat.com>)
	id 1gSrN6-0001UI-3m; Fri, 30 Nov 2018 17:34:52 -0500
Received: from smtp.corp.redhat.com (int-mx03.intmail.prod.int.phx2.redhat.com
	[10.5.11.13])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 5EADE58E2A;
	Fri, 30 Nov 2018 22:34:51 +0000 (UTC)
Received: from localhost (ovpn-116-21.ams2.redhat.com [10.36.116.21])
	by smtp.corp.redhat.com (Postfix) with ESMTP id C85DB18C5A;
	Fri, 30 Nov 2018 22:34:48 +0000 (UTC)
Date: Fri, 30 Nov 2018 22:34:48 +0000
From: "Richard W.M. Jones" <rjones@redhat.com>
To: Eric Blake <eblake@redhat.com>
Message-ID: <20181130223448.GD27120@redhat.com>
References: <20181130220344.3350618-1-eblake@redhat.com>
	<20181130220344.3350618-7-eblake@redhat.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181130220344.3350618-7-eblake@redhat.com>
User-Agent: Mutt/1.5.21 (2010-09-15)
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.13
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.39]);
	Fri, 30 Nov 2018 22:34:51 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH 06/14] nbd/client: Move export name into
 NBDExportInfo
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Kevin Wolf <kwolf@redhat.com>, vsementsov@virtuozzo.com,
	qemu-block@nongnu.org, qemu-devel@nongnu.org,
	Max Reitz <mreitz@redhat.com>, nsoffer@redhat.com, jsnow@redhat.com
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Fri, Nov 30, 2018 at 04:03:35PM -0600, Eric Blake wrote:
> Refactor the 'name' parameter of nbd_receive_negotiate() from
> being a separate parameter into being part of the in-out 'info'.
> This also spills over to a simplification of nbd_opt_go().
> 
> The main driver for this refactoring is that an upcoming patch
> would like to add support to qemu-nbd to list information about
> all exports available on a server, where the name(s) will be
> provided by the server instead of the client.  But another benefit
> is that we can now allow the client to explicitly specify the
> empty export name "" even when connecting to an oldstyle server
> (even if qemu is no longer such a server after commit 7f7dfe2a).
> 
> Signed-off-by: Eric Blake <eblake@redhat.com>
> ---
>  include/block/nbd.h |  8 ++++----
>  block/nbd-client.c  |  5 +++--
>  nbd/client.c        | 39 ++++++++++++++++++---------------------
>  qemu-nbd.c          |  6 ++++--
>  nbd/trace-events    |  2 +-
>  5 files changed, 30 insertions(+), 30 deletions(-)
> 
> diff --git a/include/block/nbd.h b/include/block/nbd.h
> index 6a5bfe5d559..65feff8ba96 100644
> --- a/include/block/nbd.h
> +++ b/include/block/nbd.h
> @@ -262,6 +262,7 @@ struct NBDExportInfo {
>      /* Set by client before nbd_receive_negotiate() */
>      bool request_sizes;
>      char *x_dirty_bitmap;
> +    char *name; /* must be non-NULL */
> 
>      /* In-out fields, set by client before nbd_receive_negotiate() and
>       * updated by server results during nbd_receive_negotiate() */
> @@ -279,10 +280,9 @@ struct NBDExportInfo {
>  };
>  typedef struct NBDExportInfo NBDExportInfo;
> 
> -int nbd_receive_negotiate(QIOChannel *ioc, const char *name,
> -                          QCryptoTLSCreds *tlscreds, const char *hostname,
> -                          QIOChannel **outioc, NBDExportInfo *info,
> -                          Error **errp);
> +int nbd_receive_negotiate(QIOChannel *ioc, QCryptoTLSCreds *tlscreds,
> +                          const char *hostname, QIOChannel **outioc,
> +                          NBDExportInfo *info, Error **errp);
>  int nbd_init(int fd, QIOChannelSocket *sioc, NBDExportInfo *info,
>               Error **errp);
>  int nbd_send_request(QIOChannel *ioc, NBDRequest *request);
> diff --git a/block/nbd-client.c b/block/nbd-client.c
> index fc5b7eda8ee..417971d8b05 100644
> --- a/block/nbd-client.c
> +++ b/block/nbd-client.c
> @@ -984,10 +984,11 @@ int nbd_client_init(BlockDriverState *bs,
>      client->info.structured_reply = true;
>      client->info.base_allocation = true;
>      client->info.x_dirty_bitmap = g_strdup(x_dirty_bitmap);
> -    ret = nbd_receive_negotiate(QIO_CHANNEL(sioc), export,
> -                                tlscreds, hostname,
> +    client->info.name = g_strdup(export ?: "");
> +    ret = nbd_receive_negotiate(QIO_CHANNEL(sioc), tlscreds, hostname,
>                                  &client->ioc, &client->info, errp);
>      g_free(client->info.x_dirty_bitmap);
> +    g_free(client->info.name);
>      if (ret < 0) {
>          logout("Failed to negotiate with the NBD server\n");
>          return ret;
> diff --git a/nbd/client.c b/nbd/client.c
> index 17ee24492a4..b5818a99d21 100644
> --- a/nbd/client.c
> +++ b/nbd/client.c
> @@ -320,15 +320,14 @@ static int nbd_receive_list(QIOChannel *ioc, const char *want, bool *match,
>  }
> 
> 
> -/* Returns -1 if NBD_OPT_GO proves the export @wantname cannot be
> +/* Returns -1 if NBD_OPT_GO proves the export @info->name cannot be
>   * used, 0 if NBD_OPT_GO is unsupported (fall back to NBD_OPT_LIST and
>   * NBD_OPT_EXPORT_NAME in that case), and > 0 if the export is good to
> - * go (with @info populated). */
> -static int nbd_opt_go(QIOChannel *ioc, const char *wantname,
> -                      NBDExportInfo *info, Error **errp)
> + * go (with the rest of @info populated). */
> +static int nbd_opt_go(QIOChannel *ioc, NBDExportInfo *info, Error **errp)
>  {
>      NBDOptionReply reply;
> -    uint32_t len = strlen(wantname);
> +    uint32_t len = strlen(info->name);
>      uint16_t type;
>      int error;
>      char *buf;
> @@ -338,10 +337,10 @@ static int nbd_opt_go(QIOChannel *ioc, const char *wantname,
>       * flags still 0 is a witness of a broken server. */
>      info->flags = 0;
> 
> -    trace_nbd_opt_go_start(wantname);
> +    trace_nbd_opt_go_start(info->name);
>      buf = g_malloc(4 + len + 2 + 2 * info->request_sizes + 1);
>      stl_be_p(buf, len);
> -    memcpy(buf + 4, wantname, len);
> +    memcpy(buf + 4, info->name, len);
>      /* At most one request, everything else up to server */
>      stw_be_p(buf + 4 + len, info->request_sizes);
>      if (info->request_sizes) {
> @@ -726,10 +725,9 @@ static int nbd_negotiate_simple_meta_context(QIOChannel *ioc,
>      return 0;
>  }
> 
> -int nbd_receive_negotiate(QIOChannel *ioc, const char *name,
> -                          QCryptoTLSCreds *tlscreds, const char *hostname,
> -                          QIOChannel **outioc, NBDExportInfo *info,
> -                          Error **errp)
> +int nbd_receive_negotiate(QIOChannel *ioc, QCryptoTLSCreds *tlscreds,
> +                          const char *hostname, QIOChannel **outioc,
> +                          NBDExportInfo *info, Error **errp)
>  {
>      uint64_t magic;
>      int rc;
> @@ -739,6 +737,8 @@ int nbd_receive_negotiate(QIOChannel *ioc, const char *name,
> 
>      trace_nbd_receive_negotiate(tlscreds, hostname ? hostname : "<null>");
> 
> +    assert(info->name);
> +    trace_nbd_receive_negotiate_name(info->name);
>      info->structured_reply = false;
>      info->base_allocation = false;
>      rc = -EINVAL;
> @@ -807,10 +807,6 @@ int nbd_receive_negotiate(QIOChannel *ioc, const char *name,
>                  goto fail;
>              }
>          }
> -        if (!name) {
> -            trace_nbd_receive_negotiate_default_name();
> -            name = "";
> -        }
>          if (fixedNewStyle) {
>              int result;
> 
> @@ -826,7 +822,8 @@ int nbd_receive_negotiate(QIOChannel *ioc, const char *name,
> 
>              if (info->structured_reply && base_allocation) {
>                  result = nbd_negotiate_simple_meta_context(
> -                        ioc, name, info->x_dirty_bitmap ?: "base:allocation",
> +                        ioc, info->name,
> +                        info->x_dirty_bitmap ?: "base:allocation",
>                          &info->meta_base_allocation_id, errp);
>                  if (result < 0) {
>                      goto fail;
> @@ -839,7 +836,7 @@ int nbd_receive_negotiate(QIOChannel *ioc, const char *name,
>               * TLS).  If it is not available, fall back to
>               * NBD_OPT_LIST for nicer error messages about a missing
>               * export, then use NBD_OPT_EXPORT_NAME.  */
> -            result = nbd_opt_go(ioc, name, info, errp);
> +            result = nbd_opt_go(ioc, info, errp);
>              if (result < 0) {
>                  goto fail;
>              }
> @@ -852,12 +849,12 @@ int nbd_receive_negotiate(QIOChannel *ioc, const char *name,
>               * query gives us better error reporting if the
>               * export name is not available.
>               */
> -            if (nbd_receive_query_exports(ioc, name, errp) < 0) {
> +            if (nbd_receive_query_exports(ioc, info->name, errp) < 0) {
>                  goto fail;
>              }
>          }
>          /* write the export name request */
> -        if (nbd_send_option_request(ioc, NBD_OPT_EXPORT_NAME, -1, name,
> +        if (nbd_send_option_request(ioc, NBD_OPT_EXPORT_NAME, -1, info->name,
>                                      errp) < 0) {
>              goto fail;
>          }
> @@ -877,8 +874,8 @@ int nbd_receive_negotiate(QIOChannel *ioc, const char *name,
>      } else if (magic == NBD_CLIENT_MAGIC) {
>          uint32_t oldflags;
> 
> -        if (name) {
> -            error_setg(errp, "Server does not support export names");
> +        if (*info->name) {
> +            error_setg(errp, "Server does not support non-empty export names");
>              goto fail;
>          }
>          if (tlscreds) {
> diff --git a/qemu-nbd.c b/qemu-nbd.c
> index 866e64779f1..c57053a0795 100644
> --- a/qemu-nbd.c
> +++ b/qemu-nbd.c
> @@ -263,7 +263,7 @@ static void *show_parts(void *arg)
>  static void *nbd_client_thread(void *arg)
>  {
>      char *device = arg;
> -    NBDExportInfo info = { .request_sizes = false, };
> +    NBDExportInfo info = { .request_sizes = false, .name = g_strdup("") };
>      QIOChannelSocket *sioc;
>      int fd;
>      int ret;
> @@ -278,7 +278,7 @@ static void *nbd_client_thread(void *arg)
>          goto out;
>      }
> 
> -    ret = nbd_receive_negotiate(QIO_CHANNEL(sioc), NULL,
> +    ret = nbd_receive_negotiate(QIO_CHANNEL(sioc),
>                                  NULL, NULL, NULL, &info, &local_error);
>      if (ret < 0) {
>          if (local_error) {
> @@ -317,6 +317,7 @@ static void *nbd_client_thread(void *arg)
>      }
>      close(fd);
>      object_unref(OBJECT(sioc));
> +    free(info.name);
>      kill(getpid(), SIGTERM);
>      return (void *) EXIT_SUCCESS;
> 
> @@ -325,6 +326,7 @@ out_fd:
>  out_socket:
>      object_unref(OBJECT(sioc));
>  out:
> +    free(info.name);
>      kill(getpid(), SIGTERM);
>      return (void *) EXIT_FAILURE;
>  }
> diff --git a/nbd/trace-events b/nbd/trace-events
> index 5e1d4afe8e6..289337d0dc3 100644
> --- a/nbd/trace-events
> +++ b/nbd/trace-events
> @@ -15,7 +15,7 @@ nbd_opt_meta_reply(const char *context, uint32_t id) "Received mapping of contex
>  nbd_receive_negotiate(void *tlscreds, const char *hostname) "Receiving negotiation tlscreds=%p hostname=%s"
>  nbd_receive_negotiate_magic(uint64_t magic) "Magic is 0x%" PRIx64
>  nbd_receive_negotiate_server_flags(uint32_t globalflags) "Global flags are 0x%" PRIx32
> -nbd_receive_negotiate_default_name(void) "Using default NBD export name \"\""
> +nbd_receive_negotiate_name(const char *name) "Requesting NBD export name \"%s\""
>  nbd_receive_negotiate_size_flags(uint64_t size, uint16_t flags) "Size is %" PRIu64 ", export flags 0x%" PRIx16
>  nbd_init_set_socket(void) "Setting NBD socket"
>  nbd_init_set_block_size(unsigned long block_size) "Setting block size to %lu"

Simple parameter refactoring, so:

Reviewed-by: Richard W.M. Jones <rjones@redhat.com>

Rich.

-- 
Richard Jones, Virtualization Group, Red Hat http://people.redhat.com/~rjones
Read my programming and virtualization blog: http://rwmj.wordpress.com
Fedora Windows cross-compiler. Compile Windows programs, test, and
build Windows installers. Over 100 libraries supported.
http://fedoraproject.org/wiki/MinGW

