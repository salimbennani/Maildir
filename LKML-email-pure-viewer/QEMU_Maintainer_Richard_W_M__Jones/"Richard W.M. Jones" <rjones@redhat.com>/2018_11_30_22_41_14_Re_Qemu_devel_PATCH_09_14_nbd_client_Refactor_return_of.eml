Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:24:11 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 2E3A6580479
	for <like.xu@linux.intel.com>; Fri, 30 Nov 2018 14:42:04 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 30 Nov 2018 14:42:03 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AILL+sxYwXVMaJHSRFh4Jyzf/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpsyzZB7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQctQHS2pcRcZRTzJODZ+g?=
 =?us-ascii?q?b4UBCOoBOPxXr4j7p1ATqRezCg2hCObpxzRVhHH5wLc63vwvHw/GwgIuHNwOv3?=
 =?us-ascii?q?vIo9roNqgdX/27zLHKwDvBYP5axDnw5JTWfRA6uvyMQa58fNDNxUUzDQ7JkFOd?=
 =?us-ascii?q?opHlMTOP0eQNtnCW4+R8W+Kul2Enqxt+oiKyycwxiobFnIUbxkrZ/it9x4Y1I8?=
 =?us-ascii?q?O3SFV1bdW5F5ZQrSOaN4xwQsw8WGFlozw6xaMbtp67ZicK1I4ryALYa/yCaoWF?=
 =?us-ascii?q?5A/oWuiWITd9nn1lebS/ig6o8Ue+1+L8VtO70EpQoiVZldnMs2gB1hLU6sidV/?=
 =?us-ascii?q?R95l2h1iiU1wDI8O1LPUc0la/dJpU8wbAwjoIevVrfEiL1gkn6kbKae0Y+9uS2?=
 =?us-ascii?q?5enqYq/qqoKeOoNslA3yLqAjltaiDek2LAQCRXWX9Oey2bH540H0Q7NHheAsnK?=
 =?us-ascii?q?bDqpDVP8Ebq7a5AwBL1oYj7A6yDzOn0NQDgXkHN0hJeB2Bj4j0IV3OJ+r4Dfin?=
 =?us-ascii?q?j1Stljdk2ezGM6X/DpnRLXXPiqrtcat+5kJG1gY+w9BS64hJBrwDOP7zX1X+tN?=
 =?us-ascii?q?3cDh83KQy0xOPnBc1k1owAXGKPH7aVP77Mvl+W+O0vJ/CAa5QSuDbgLfgq++Dh?=
 =?us-ascii?q?jWQ+lV8ZfKmp3oUYZGq3H/R7O0iZZXvsgtEcEWYFpAY+TerqiEGcXj5XfXq9Q6?=
 =?us-ascii?q?U85jQgBYKgCofDQI+tgLqc3CuhGZ1WfG9GBkiWEXj0b4WER+sMaCWKL89lkzwE?=
 =?us-ascii?q?VqauR5Uu1BGzrwL6z7tnLuzJ+iwXr57j1d515/HNmhE27zB7E8Od02TeB1xyhX?=
 =?us-ascii?q?4CEj8qwLhk8ws6zlaYzbM+hfteGtpOofRTXUA/PJ/YyuV8TNfqRgPGeMzOUVuj?=
 =?us-ascii?q?X5CqDC88SoEMxcQTaRN4EtSmkheRxievHvoZmqKGANku/7vB0mPtD8B6zXnAye?=
 =?us-ascii?q?8mlVZxWdZFN2Ctmvti8RPODZXCiUSTmvWWcvExxi/GvE2HxGmD9BVVWgp5Uqjt?=
 =?us-ascii?q?R30TZkLK69/+4xWRYaWpDOFtCApKyceYJuN1LPivxXdBQvr4cpyKeWC2nWqrLQ?=
 =?us-ascii?q?yFyrOFcMzhfGBLj3aVM1QNjw1GpSXODgM5HCr05j+HAQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A2AAA1vAFchxHrdtBjFgQBAQEBAQIBA?=
 =?us-ascii?q?QEBBwIBAQEBgWWBMYE5gRYTjHCNOZJPhmwUGAsJgUuGKyI4EgEDAQEBAQEBAgE?=
 =?us-ascii?q?TAQEBCgsJCBsOIwyCNgUCAxoHglwBAgMBAiQTDAopAwMBAgYBAQoOCgkdCAMBC?=
 =?us-ascii?q?wVJEwWDHAGCAQEECqdsM4VAhG2MGhEGgUA/gRGDEoIQgluDS4ImAokjCoV9gUy?=
 =?us-ascii?q?EYopdBwIChn2KLQsYgVtNhzE2hxAsgQyCOIlvglWIKYFdgXZwFYMnCYJHgziKU?=
 =?us-ascii?q?0ExgQcciy2BdwEB?=
X-IPAS-Result: =?us-ascii?q?A0A2AAA1vAFchxHrdtBjFgQBAQEBAQIBAQEBBwIBAQEBgWW?=
 =?us-ascii?q?BMYE5gRYTjHCNOZJPhmwUGAsJgUuGKyI4EgEDAQEBAQEBAgETAQEBCgsJCBsOI?=
 =?us-ascii?q?wyCNgUCAxoHglwBAgMBAiQTDAopAwMBAgYBAQoOCgkdCAMBCwVJEwWDHAGCAQE?=
 =?us-ascii?q?ECqdsM4VAhG2MGhEGgUA/gRGDEoIQgluDS4ImAokjCoV9gUyEYopdBwIChn2KL?=
 =?us-ascii?q?QsYgVtNhzE2hxAsgQyCOIlvglWIKYFdgXZwFYMnCYJHgziKU0ExgQcciy2BdwE?=
 =?us-ascii?q?B?=
X-IronPort-AV: E=Sophos;i="5.56,300,1539673200"; 
   d="scan'208";a="55086852"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 30 Nov 2018 14:42:02 -0800
Received: from localhost ([::1]:34994 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gSrU2-0006eE-7x
	for like.xu@linux.intel.com; Fri, 30 Nov 2018 17:42:02 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:39158)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <rjones@redhat.com>) id 1gSrTp-0006dv-6d
	for qemu-devel@nongnu.org; Fri, 30 Nov 2018 17:41:50 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <rjones@redhat.com>) id 1gSrTk-0005T7-Af
	for qemu-devel@nongnu.org; Fri, 30 Nov 2018 17:41:48 -0500
Received: from mx1.redhat.com ([209.132.183.28]:39154)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <rjones@redhat.com>)
	id 1gSrTW-00053H-5q; Fri, 30 Nov 2018 17:41:30 -0500
Received: from smtp.corp.redhat.com (int-mx03.intmail.prod.int.phx2.redhat.com
	[10.5.11.13])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 1250A461F8;
	Fri, 30 Nov 2018 22:41:29 +0000 (UTC)
Received: from localhost (ovpn-116-21.ams2.redhat.com [10.36.116.21])
	by smtp.corp.redhat.com (Postfix) with ESMTP id 5D8E07C82E;
	Fri, 30 Nov 2018 22:41:14 +0000 (UTC)
Date: Fri, 30 Nov 2018 22:41:14 +0000
From: "Richard W.M. Jones" <rjones@redhat.com>
To: Eric Blake <eblake@redhat.com>
Message-ID: <20181130224114.GE27120@redhat.com>
References: <20181130220344.3350618-1-eblake@redhat.com>
	<20181130220344.3350618-10-eblake@redhat.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181130220344.3350618-10-eblake@redhat.com>
User-Agent: Mutt/1.5.21 (2010-09-15)
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.13
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.29]);
	Fri, 30 Nov 2018 22:41:29 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH 09/14] nbd/client: Refactor return of
 nbd_receive_negotiate()
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: nsoffer@redhat.com, vsementsov@virtuozzo.com, jsnow@redhat.com,
	qemu-devel@nongnu.org, qemu-block@nongnu.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Fri, Nov 30, 2018 at 04:03:38PM -0600, Eric Blake wrote:
> The function could only ever return 0 or -EINVAL; make this
> clearer by dropping a useless 'fail:' label.
> 
> Signed-off-by: Eric Blake <eblake@redhat.com>
> ---
>  nbd/client.c | 51 +++++++++++++++++++++++----------------------------
>  1 file changed, 23 insertions(+), 28 deletions(-)
> 
> diff --git a/nbd/client.c b/nbd/client.c
> index 27785c55d0a..1ed5009642e 100644
> --- a/nbd/client.c
> +++ b/nbd/client.c
> @@ -773,7 +773,6 @@ int nbd_receive_negotiate(QIOChannel *ioc, QCryptoTLSCreds *tlscreds,
>                            NBDExportInfo *info, Error **errp)
>  {
>      uint64_t magic;
> -    int rc;
>      bool zeroes = true;
>      bool structured_reply = info->structured_reply;
>      bool base_allocation = info->base_allocation;
> @@ -784,31 +783,30 @@ int nbd_receive_negotiate(QIOChannel *ioc, QCryptoTLSCreds *tlscreds,
>      trace_nbd_receive_negotiate_name(info->name);
>      info->structured_reply = false;
>      info->base_allocation = false;
> -    rc = -EINVAL;
> 
>      if (outioc) {
>          *outioc = NULL;
>      }
>      if (tlscreds && !outioc) {
>          error_setg(errp, "Output I/O channel required for TLS");
> -        goto fail;
> +        return -EINVAL;
>      }
> 
>      if (nbd_read(ioc, &magic, sizeof(magic), errp) < 0) {
>          error_prepend(errp, "Failed to read data: ");
> -        goto fail;
> +        return -EINVAL;
>      }
>      magic = be64_to_cpu(magic);
>      trace_nbd_receive_negotiate_magic(magic);
> 
>      if (magic != NBD_INIT_MAGIC) {
>          error_setg(errp, "Invalid magic received");
> -        goto fail;
> +        return -EINVAL;
>      }
> 
>      if (nbd_read(ioc, &magic, sizeof(magic), errp) < 0) {
>          error_prepend(errp, "Failed to read magic: ");
> -        goto fail;
> +        return -EINVAL;
>      }
>      magic = be64_to_cpu(magic);
>      trace_nbd_receive_negotiate_magic(magic);
> @@ -820,7 +818,7 @@ int nbd_receive_negotiate(QIOChannel *ioc, QCryptoTLSCreds *tlscreds,
> 
>          if (nbd_read(ioc, &globalflags, sizeof(globalflags), errp) < 0) {
>              error_prepend(errp, "Failed to read server flags: ");
> -            goto fail;
> +            return -EINVAL;
>          }
>          globalflags = be16_to_cpu(globalflags);
>          trace_nbd_receive_negotiate_server_flags(globalflags);
> @@ -836,18 +834,18 @@ int nbd_receive_negotiate(QIOChannel *ioc, QCryptoTLSCreds *tlscreds,
>          clientflags = cpu_to_be32(clientflags);
>          if (nbd_write(ioc, &clientflags, sizeof(clientflags), errp) < 0) {
>              error_prepend(errp, "Failed to send clientflags field: ");
> -            goto fail;
> +            return -EINVAL;
>          }
>          if (tlscreds) {
>              if (fixedNewStyle) {
>                  *outioc = nbd_receive_starttls(ioc, tlscreds, hostname, errp);
>                  if (!*outioc) {
> -                    goto fail;
> +                    return -EINVAL;
>                  }
>                  ioc = *outioc;
>              } else {
>                  error_setg(errp, "Server does not support STARTTLS");
> -                goto fail;
> +                return -EINVAL;
>              }
>          }
>          if (fixedNewStyle) {
> @@ -858,7 +856,7 @@ int nbd_receive_negotiate(QIOChannel *ioc, QCryptoTLSCreds *tlscreds,
>                                                     NBD_OPT_STRUCTURED_REPLY,
>                                                     errp);
>                  if (result < 0) {
> -                    goto fail;
> +                    return -EINVAL;
>                  }
>                  info->structured_reply = result == 1;
>              }
> @@ -869,7 +867,7 @@ int nbd_receive_negotiate(QIOChannel *ioc, QCryptoTLSCreds *tlscreds,
>                          info->x_dirty_bitmap ?: "base:allocation",
>                          info, errp);
>                  if (result < 0) {
> -                    goto fail;
> +                    return -EINVAL;
>                  }
>                  info->base_allocation = result == 1;
>              }
> @@ -881,7 +879,7 @@ int nbd_receive_negotiate(QIOChannel *ioc, QCryptoTLSCreds *tlscreds,
>               * export, then use NBD_OPT_EXPORT_NAME.  */
>              result = nbd_opt_go(ioc, info, errp);
>              if (result < 0) {
> -                goto fail;
> +                return -EINVAL;
>              }
>              if (result > 0) {
>                  return 0;
> @@ -893,25 +891,25 @@ int nbd_receive_negotiate(QIOChannel *ioc, QCryptoTLSCreds *tlscreds,
>               * export name is not available.
>               */
>              if (nbd_receive_query_exports(ioc, info->name, errp) < 0) {
> -                goto fail;
> +                return -EINVAL;
>              }
>          }
>          /* write the export name request */
>          if (nbd_send_option_request(ioc, NBD_OPT_EXPORT_NAME, -1, info->name,
>                                      errp) < 0) {
> -            goto fail;
> +            return -EINVAL;
>          }
> 
>          /* Read the response */
>          if (nbd_read(ioc, &info->size, sizeof(info->size), errp) < 0) {
>              error_prepend(errp, "Failed to read export length: ");
> -            goto fail;
> +            return -EINVAL;
>          }
>          info->size = be64_to_cpu(info->size);
> 
>          if (nbd_read(ioc, &info->flags, sizeof(info->flags), errp) < 0) {
>              error_prepend(errp, "Failed to read export flags: ");
> -            goto fail;
> +            return -EINVAL;
>          }
>          info->flags = be16_to_cpu(info->flags);
>      } else if (magic == NBD_CLIENT_MAGIC) {
> @@ -919,43 +917,40 @@ int nbd_receive_negotiate(QIOChannel *ioc, QCryptoTLSCreds *tlscreds,
> 
>          if (*info->name) {
>              error_setg(errp, "Server does not support non-empty export names");
> -            goto fail;
> +            return -EINVAL;
>          }
>          if (tlscreds) {
>              error_setg(errp, "Server does not support STARTTLS");
> -            goto fail;
> +            return -EINVAL;
>          }
> 
>          if (nbd_read(ioc, &info->size, sizeof(info->size), errp) < 0) {
>              error_prepend(errp, "Failed to read export length: ");
> -            goto fail;
> +            return -EINVAL;
>          }
>          info->size = be64_to_cpu(info->size);
> 
>          if (nbd_read(ioc, &oldflags, sizeof(oldflags), errp) < 0) {
>              error_prepend(errp, "Failed to read export flags: ");
> -            goto fail;
> +            return -EINVAL;
>          }
>          oldflags = be32_to_cpu(oldflags);
>          if (oldflags & ~0xffff) {
>              error_setg(errp, "Unexpected export flags %0x" PRIx32, oldflags);
> -            goto fail;
> +            return -EINVAL;
>          }
>          info->flags = oldflags;
>      } else {
>          error_setg(errp, "Bad magic received");
> -        goto fail;
> +        return -EINVAL;
>      }
> 
>      trace_nbd_receive_negotiate_size_flags(info->size, info->flags);
>      if (zeroes && nbd_drop(ioc, 124, errp) < 0) {
>          error_prepend(errp, "Failed to read reserved block: ");
> -        goto fail;
> +        return -EINVAL;
>      }
> -    rc = 0;
> -
> -fail:
> -    return rc;
> +    return 0;
>  }
> 

Simple refactoring:

Reviewed-by: Richard W.M. Jones <rjones@redhat.com>

Rich.

-- 
Richard Jones, Virtualization Group, Red Hat http://people.redhat.com/~rjones
Read my programming and virtualization blog: http://rwmj.wordpress.com
virt-df lists disk usage of guests without needing to install any
software inside the virtual machine.  Supports Linux and Windows.
http://people.redhat.com/~rjones/virt-df/

