Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:57:18 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 7671C58049E;
	Sat, 22 Dec 2018 08:55:01 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga006-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 22 Dec 2018 08:55:01 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AH6U++hYUyKn9fY/Jl7+HDBz/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpci6Yh7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v6bpgRh31hy?=
 =?us-ascii?q?cdLzM38H/ZhNF+gqxYpxyupRJ/zIHbboGOLPpzfLjQcc8ZSGdbQspcTTBNDp+6?=
 =?us-ascii?q?YoASD+QBJ+FYr4zlqlUTsRuxGxGsBOPxxT9Om3T7wKo60uQ8Hgrb2wEgBNwPv2?=
 =?us-ascii?q?/TrNT1KagfSvy6zKnSzTXEavNW2Cr96I3SfhAmu/GMUqt9fMzMwkchEAPFi0+f?=
 =?us-ascii?q?qY3jPz6N1eQCrXKb7+x+WuKrkWInrBtxojepy8wxiYfJnpoYxk7Y+Sh92oo5ON?=
 =?us-ascii?q?O1RFBhbdK5E5ZcqzuWOop0T886XW1luTg2xqEDtJKmfCUF1JEqywDDZ/CZdoWE?=
 =?us-ascii?q?/xfuVOiLLjp4in9ofbCyihSz/EWgz+DxVsq53EhRoSdAkdTAqGsC2hjV58OaUP?=
 =?us-ascii?q?Vy5F2h1iyK1w3L6uFLP0Q0la3DJp4/zb4/iIATvV7AHiDogkX2irGZdkE+9uiv?=
 =?us-ascii?q?8eTnba3qpp6aN4BqlgHzKroiltC7DOgiLwQDUXaX9f6h2LDg4UH1WrRHg/8unq?=
 =?us-ascii?q?ncqp/aJMAbpqCjAw9S14Yu8xK/Dzag0NQFkngLNVFFdwydj4jvJV7OJOn0DfCx?=
 =?us-ascii?q?glSqjjhr3evLPqPuAprTNHjPirThcqhn605a1gUzycpT55VOCrEOOP7zQFP+tM?=
 =?us-ascii?q?TEDh8lNAy52+LnCNR+1owAQ26ODbKZPbjWsV+J4OIvPuaNaJUUuDb7N/gq+fru?=
 =?us-ascii?q?gWUlll8aeKmjxYEXZ2ygHvR6P0WZZmLhgtcbHmcLogoxVuvqhEeCUT5OfXmyWa?=
 =?us-ascii?q?086yo/CIKnC4fDW4+sjKaA3Ce9Ap1ZeGRGBkqQHnfvcoWOQ+0MZz6KIs99jjwE?=
 =?us-ascii?q?UqCsRJU61RGusw/6yKBrLvDO9S0arp/j0Nl15+vOlRA97zB0DsKd032TQGFwhG?=
 =?us-ascii?q?8HWzg23KVnq0xn1liDybR4g+BfFdFL5PNGSAE6OYTYz+x7Ed/yXA3Bc8yNSFan?=
 =?us-ascii?q?RNWmHD4wQsgww98If0ZyBdGiggrf0CqtBr8fj6aLC4As8qLAw3jxIN5wxGvc26?=
 =?us-ascii?q?k/kVYqWMtPOneghq5k6QfTAYnFk0Gal6avcaQRxyrN9GaFzWqTs0BUSg9wUaPZ?=
 =?us-ascii?q?XX8BYkvat8j25kTHT7W2E7QoLhNBydKeKqtNctDmkE9JROn9N9jEY2K+gWGwBQ?=
 =?us-ascii?q?2WybOKd4fqf2Qd3CPACEkLiQwT/HCGNRQgCSeluW7REDtuFVf3aUP27eZ+sG+7?=
 =?us-ascii?q?TlMzzwySc01h1r+1+hkJhfycS/IfxK4EtD0mqzVuGFa93tTWC9WbqgplfaVcZ8?=
 =?us-ascii?q?494Vhd2WLYsQx9IoKvL6R4ilECdAR3ulvk1w9rBYVYjcgqsHQqwRJoJqKczlxA?=
 =?us-ascii?q?eC2X3JDqNrLMN2n94Qqga6jV2lHZztab4aMP6PU+q1X+swClDEsi83N709ZL13?=
 =?us-ascii?q?uQ/InFDA0XUZjpSEY46wB6p63GYik6/47V1WBsPbOovTPY2tMpBPEqyhCvf9pE?=
 =?us-ascii?q?NKOEFQnyE9AVBsS0KewqnUSpYQwAPOxI6KE0OMamfeOc2KG3JOZggC6mjWNf7Y?=
 =?us-ascii?q?Bn00KD6zBzSvTV0JYC2f2Y2BWIVy39jFu4rs/4g4REaiwMEWqlzijkApVcZqlz?=
 =?us-ascii?q?fYYNFGevLNe7xtR4h57xRXFY8ESvCE8B2M+sYRCSdUDy3RVM1UQLpnyqgSu5zz?=
 =?us-ascii?q?1unzAptKafxzHOw+L5eRoDO25LQnRijFj2LYi1idAaQFanbwwzmBS54kb6wrBR?=
 =?us-ascii?q?pL5jIGnLXUdIYy/2InlgUqSqrLqCYM1P6JQyvSVMSuu8YlOaSr/7oxQE1SPuBG?=
 =?us-ascii?q?9exDE9dzG3tZT1hR16iGSBLHltqHrVY91/xRDa5NbEX/5ewiIGRDVkiTnQHlW9?=
 =?us-ascii?q?P8Om/dKOm5fBs+C+UXmsVplScSnt0IOBuzG35WxsAR2jgf+znsfrHhQ90S/+z9?=
 =?us-ascii?q?NqTznHrA7gYon30KS3KeFncVNpBFPm68p6B5txko0/hJwL3Xgah5OV/WcIkGvp?=
 =?us-ascii?q?MNVb377+Y2QJRTIR39HV5w3l0lV5Ln2V34L5Smmdwsx5atm/Y2MW2Tgy49pECa?=
 =?us-ascii?q?iK97xEgTV6okCjog3Pe/h9kSwQyf8v6H4cnuEItxAhziSbArAOA0ZYOTbgmAiP?=
 =?us-ascii?q?79C7tK9XfnqgcaCs1EpimtCsFK2CogZZWHrje5YtBylw7thkMFLX0X3+8YXkeN?=
 =?us-ascii?q?jWbdIOuRyYiRbAj+5JKJ0vkvoGnzZoOWX4vXc90e40kQRu3Y2mvIiAM2hi57i2?=
 =?us-ascii?q?AhlcNj3ofc8T/iztgL1ansaX2YCvA5pgFi8KXJvuUfKnDjYSue77OAaJFT02sm?=
 =?us-ascii?q?2bFqbHHQ+D9EdmqGrCE5KxOHGSOnYZ1s9uRAWHKExcnQAUXyg6npgjGQCx38Hh?=
 =?us-ascii?q?dEZ55jYM5l/3sBdMy+RoNwXhXWfbvgundjA0SJ2HJhpM8g5C/1vVMdCZ7u9rHy?=
 =?us-ascii?q?BY+YChrBWQKmOBYQREF3oJWkuCB1DsJbSu4djA8+6FBuuxNffOYLOOqfBAWPeM?=
 =?us-ascii?q?356gzoxm/zOUPMWVInZiF+E72lZEXX1hG8TWhTQPSy8UlyLMdcKbpw28+ip4rs?=
 =?us-ascii?q?+h6vTrRRnv6JCLC7tTN9Vv5h+3jb2CN+6WmCZ2NzJY2okQyn/PzbgVxEQShD12?=
 =?us-ascii?q?dzmxDbQAsjbAQ7jNmqBMFR4UdSNyONFM76I9xQRNPc/bitXo1r93lPI1ClFFVU?=
 =?us-ascii?q?D/lcGtf8AFP2a9NFbfDkaRKLuGPSHLw93wYa6kVb1QjeBUuwestjqBD0DjPiqM?=
 =?us-ascii?q?lz/yWhCrMOFMijybPRNEtIG8dBZtFXbsTNb8ZhKnN993iCU8wacoiXPSKW4cLT?=
 =?us-ascii?q?98fltNr7KK6yNYh/R/G2pZ4XtkLemLgSCZ7+bDJ5YSsPtrBDl0lu1A7HQ7zbtV?=
 =?us-ascii?q?8D9LRPhvlCTOqd5upgLuru7a0D1tUDJNpyxNiYbNul9taovD8ZwVYmrJ5BIA6y?=
 =?us-ascii?q?26DAUG749+Fdfoqqx4wdjVk6fyNTIE9Mjbq5hPT/PIId6KZSJyeSHiHyTZWVMI?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ARAABEax5ch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgTCBOYECJ4wXjgkUklGEfoFzEwEBGA0GAYcwIjQJDQEDAQEBAQE?=
 =?us-ascii?q?BAgETAQEBCgsJCCkjDII6IoJuAQECAgEBAiQLAQ0BATcBBAEJAQEiLgMxAQUBH?=
 =?us-ascii?q?BkFgx0BgXkIAQQKmhc8iimBbDOCdgEBBYEwAYVwAwUSh2yDJYEcF4F/g26LFYl?=
 =?us-ascii?q?PhhaBAJBoCYcSikskgWCFIYJ6h2oBLY4tiygCBAIEBQIFDyGBJW2BITMaCCgIO?=
 =?us-ascii?q?4JsE4IIDBeIXoVgHzIBAQEBgQEBAY1wAQE?=
X-IPAS-Result: =?us-ascii?q?A0ARAABEax5ch0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBgTC?=
 =?us-ascii?q?BOYECJ4wXjgkUklGEfoFzEwEBGA0GAYcwIjQJDQEDAQEBAQEBAgETAQEBCgsJC?=
 =?us-ascii?q?CkjDII6IoJuAQECAgEBAiQLAQ0BATcBBAEJAQEiLgMxAQUBHBkFgx0BgXkIAQQ?=
 =?us-ascii?q?Kmhc8iimBbDOCdgEBBYEwAYVwAwUSh2yDJYEcF4F/g26LFYlPhhaBAJBoCYcSi?=
 =?us-ascii?q?kskgWCFIYJ6h2oBLY4tiygCBAIEBQIFDyGBJW2BITMaCCgIO4JsE4IIDBeIXoV?=
 =?us-ascii?q?gHzIBAQEBgQEBAY1wAQE?=
X-IronPort-AV: E=Sophos;i="5.56,384,1539673200"; 
   d="scan'208";a="67997058"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 22 Dec 2018 08:54:59 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2392168AbeLVQy4 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Sat, 22 Dec 2018 11:54:56 -0500
Received: from mail-pl1-f193.google.com ([209.85.214.193]:34723 "EHLO
        mail-pl1-f193.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1732861AbeLVQy4 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sat, 22 Dec 2018 11:54:56 -0500
Received: by mail-pl1-f193.google.com with SMTP id w4so3908324plz.1
        for <linux-kernel@vger.kernel.org>; Sat, 22 Dec 2018 08:54:54 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=chromium.org; s=google;
        h=from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding;
        bh=Am2wUODHH0JsEj7SXIZCLf5E3+sl55uz+ynr3m0M9Nw=;
        b=gnmed0EEX62vcIGeZntu9yWGS9IcOPbrLKx2pElcsezpP9VBv9RlKrHI7LsRlewzkj
         TioKp5ipzJvBiJICtlAFHtI3XjL+j9WVA/BRSLqvxmnWCq/ZeMFpa2pZB+pIjN4cH+Jc
         m7TCbrbgFHnm6TtC+LqzMUPj9bD21l1hd4zx4=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=Am2wUODHH0JsEj7SXIZCLf5E3+sl55uz+ynr3m0M9Nw=;
        b=jjey6xa1A2MEl2SCDsDLUHDDvtjUc3aA37jWF97n5tqk275b2eWt+UukzlHf8hAwJl
         Wn/eQvciyxKjdo2LglO4qVxT9P8hhh1HAW0WiIhhn3CrF3w5LiE7uoBHTAht6/yAsyXs
         Y6vysuUsODdbibibcsJMy4dpz3miB5fKQD/JlB8JqURu9ehw0+j7TEyZsESsEb3Ax7TC
         Px6xivj+h9oQM5+PkV9b8Jw/M1OX8AP3vURLAgS05G7YLKtMRdv9WQ/sSFeO23IyfHoY
         gVOBpL6UhltuqGjXOyHyKTvGEVTAfD+ByFn+xUgmE/ycUIB1ENcjLIeE37DhAMP99Yzi
         cr1Q==
X-Gm-Message-State: AJcUukcoSQr71q6qtmzju4l5bkCECnEbYBiNn21Bpq0hLRc86yStKtYd
        pb9so/jCrkK+hKVz9MoJN0fDmf7n+wswZA==
X-Google-Smtp-Source: ALg8bN4FuIBvdD6+z/okD6bFYs9tJf1Y1GhHqzXObzUinfzP3bwU67uQDiPmHbo6oLTZ7FDpWdxKEA==
X-Received: by 2002:a17:902:161:: with SMTP id 88mr5694497plb.306.1545463494906;
        Fri, 21 Dec 2018 23:24:54 -0800 (PST)
Received: from smtp.gmail.com ([2620:15c:202:1:fa53:7765:582b:82b9])
        by smtp.gmail.com with ESMTPSA id 186sm53825350pga.36.2018.12.21.23.24.53
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Fri, 21 Dec 2018 23:24:54 -0800 (PST)
From: Stephen Boyd <swboyd@chromium.org>
To: robh@kernel.org
Cc: a.hajda@samsung.com, andy.shevchenko@gmail.com,
        b.zolnierkie@samsung.com, broonie@kernel.org,
        gregkh@linuxfoundation.org, javierm@redhat.com,
        linux-arm-kernel@lists.infradead.org, linux-kernel@vger.kernel.org,
        linux@armlinux.org.uk, m.szyprowski@samsung.com, rafael@kernel.org
Subject: [PATCH] driver core: platform: Add an error message to platform_get_irq*()
Date: Fri, 21 Dec 2018 23:24:52 -0800
Message-Id: <20181222072452.186726-1-swboyd@chromium.org>
X-Mailer: git-send-email 2.20.1.415.g653613c723-goog
In-Reply-To: <CABGGisxcHWwhUcQML7XmriK_DLFGjmud3cKt8yp+K4G2CAL=9Q@mail.gmail.com>
References: <CABGGisxcHWwhUcQML7XmriK_DLFGjmud3cKt8yp+K4G2CAL=9Q@mail.gmail.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

A grep of the kernel shows that many drivers print an error message if
they fail to get the irq they're looking for. Furthermore, those drivers
all decide to print the device name, or not, and the irq they were
requesting, or not, etc. Let's consolidate all these error messages into
the API itself, allowing us to get rid of the error messages in each
driver.

Signed-off-by: Stephen Boyd <swboyd@chromium.org>
---

Rob Herring wrote:
> Shouldn't platform_get_irq (or what it calls) print the error message
> (like we do for kmalloc), rather than every driver? We could get rid
> of lots of error strings that way. I guess there are cases where no
> irq is not an error and we wouldn't want to always print an error. In
> some cases like that, we have 2 versions of the function.

Yes it should. Just by coincidence, I got around to implementing this
patch yesterday after I bemoaned this on the list a few months ago[1].

> Not what you're addressing here exactly, but what I'd like to see is
> the ability to print the exact locations generating errors in the
> first place. That would require wrapping all the error code
> assignments and returns (or at least the common sources). 

That could be done with some macro magic to add __line__ and __FILE__
into a definition of the "important" functions. In that sense nothing
would really need to change besides the implementation, right?

I also started working on a cocci script to fix up the call sites to
drop the extra prints, but I'm really bad at writing semantic patches so
please help improve the below. My simple grep shows that we can remove
~500 error prints out of the 1500 places the platform_get_irq()
functions are called.

	@@
	expression ret;
	struct platform_device *E;
	@@

	ret =
	(
	platform_get_irq(E, ...)
	|
	platform_get_irq_byname(E, ...)
	);

	if ( \( ret < 0 \| ret <= 0 \) )
	{
	(
	-if (ret != -EPROBE_DEFER)
	-{ ...
	-dev_err(...);
	-... }
	|
	...
	-dev_err(...);
	)
	...
	}

[1] https://lkml.kernel.org/r/153911433511.119890.17831207059115471972@swboyd.mtv.corp.google.com

 drivers/base/platform.c | 52 +++++++++++++++++++++++++++--------------
 1 file changed, 35 insertions(+), 17 deletions(-)

diff --git a/drivers/base/platform.c b/drivers/base/platform.c
index 1c958eb33ef4..75ceda9f452a 100644
--- a/drivers/base/platform.c
+++ b/drivers/base/platform.c
@@ -79,23 +79,18 @@ struct resource *platform_get_resource(struct platform_device *dev,
 }
 EXPORT_SYMBOL_GPL(platform_get_resource);
 
-/**
- * platform_get_irq - get an IRQ for a device
- * @dev: platform device
- * @num: IRQ number index
- */
-int platform_get_irq(struct platform_device *dev, unsigned int num)
+static int __platform_get_irq(struct platform_device *dev, unsigned int num, bool warn)
 {
+	int ret = -ENXIO;
+
 #ifdef CONFIG_SPARC
 	/* sparc does not have irqs represented as IORESOURCE_IRQ resources */
 	if (!dev || num >= dev->archdata.num_irqs)
-		return -ENXIO;
+		goto error;
 	return dev->archdata.irqs[num];
 #else
 	struct resource *r;
 	if (IS_ENABLED(CONFIG_OF_IRQ) && dev->dev.of_node) {
-		int ret;
-
 		ret = of_irq_get(dev->dev.of_node, num);
 		if (ret > 0 || ret == -EPROBE_DEFER)
 			return ret;
@@ -104,11 +99,11 @@ int platform_get_irq(struct platform_device *dev, unsigned int num)
 	r = platform_get_resource(dev, IORESOURCE_IRQ, num);
 	if (has_acpi_companion(&dev->dev)) {
 		if (r && r->flags & IORESOURCE_DISABLED) {
-			int ret;
-
 			ret = acpi_irq_get(ACPI_HANDLE(&dev->dev), num, r);
-			if (ret)
+			if (ret > 0 || ret == -EPROBE_DEFER)
 				return ret;
+			if (ret)
+				goto error;
 		}
 	}
 
@@ -122,13 +117,32 @@ int platform_get_irq(struct platform_device *dev, unsigned int num)
 		struct irq_data *irqd;
 
 		irqd = irq_get_irq_data(r->start);
-		if (!irqd)
-			return -ENXIO;
+		if (!irqd) {
+			ret = -ENXIO;
+			goto error;
+		}
+
 		irqd_set_trigger_type(irqd, r->flags & IORESOURCE_BITS);
 	}
 
-	return r ? r->start : -ENXIO;
+	if (r)
+		return r->start;
 #endif
+error:
+	if (warn)
+		dev_err(&dev->dev, "IRQ%d not found\n", num);
+
+	return ret;
+}
+
+/**
+ * platform_get_irq - get an IRQ for a device
+ * @dev: platform device
+ * @num: IRQ number index
+ */
+int platform_get_irq(struct platform_device *dev, unsigned int num)
+{
+	return __platform_get_irq(dev, num, true);
 }
 EXPORT_SYMBOL_GPL(platform_get_irq);
 
@@ -142,7 +156,7 @@ int platform_irq_count(struct platform_device *dev)
 {
 	int ret, nr = 0;
 
-	while ((ret = platform_get_irq(dev, nr)) >= 0)
+	while ((ret = __platform_get_irq(dev, nr, false)) >= 0)
 		nr++;
 
 	if (ret == -EPROBE_DEFER)
@@ -195,7 +209,11 @@ int platform_get_irq_byname(struct platform_device *dev, const char *name)
 	}
 
 	r = platform_get_resource_byname(dev, IORESOURCE_IRQ, name);
-	return r ? r->start : -ENXIO;
+	if (r)
+		return r->start;
+
+	dev_err(&dev->dev, "IRQ %s not found\n", name);
+	return -ENXIO;
 }
 EXPORT_SYMBOL_GPL(platform_get_irq_byname);
 
-- 
Sent by a computer through tubes

