Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:28:10 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 3B01D580460;
	Sat,  1 Dec 2018 22:16:08 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by fmsmga006-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 01 Dec 2018 22:16:07 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ANvaX1hK8G5xFtlNl9tmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgUI/v5rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0yRD+s7bpkSAXwhS?=
 =?us-ascii?q?kJNzA37nzZhM9/g61HvR2uqQd/w5bWbYyOKPpyYrnQcc8GSWdbQMpcUTFKDIOm?=
 =?us-ascii?q?b4sICuoMJftWr47gp1sWsRu+BBWjBODywTFMgX/5x7c63Pk/HgHcwQctGNAOsG?=
 =?us-ascii?q?7Jo9XvLqsSVeG1zK/VzTTMdP5W1jL955LJchAlu/2DQbVwcc/IxEQpCgjLjU2Q?=
 =?us-ascii?q?pJT7Mz+J0ukBqXWX4uR+We61lmIqqB19riKuy8oukoXFm54Zx17e+Sln3oo4J8?=
 =?us-ascii?q?e0RUp/bNK+DZdduCKXOo1rSc04WW5oojw1yrgetJ67YicKzJMnygbBa/yIbYeI?=
 =?us-ascii?q?+AjvVOWPLjdignJqZra/iwy18Ui6xe3wTsi00FBUoSpZitTAqGwB2hjJ5sSaRP?=
 =?us-ascii?q?Zx4F2t1SuM2gzP8O1JIEI5mbLeK5E7w74wkpQTsV7EHi/zgEj2iK6WdkM5+umn?=
 =?us-ascii?q?8ujnYavppoWaN4BqjgHyK6Mum8K5AesmKAgDRHab+eui273550H5Q6tFjucwkq?=
 =?us-ascii?q?bHtJDWP8MbprS2AwNNyIYs9w6/Dyu60NQfhXQHKFNFeBGZgITzNFDOPev1DfO+?=
 =?us-ascii?q?g1SqjTdqyOrKPrznApXRMHfDlK3tcqp6605Z0AAz18xQ54pICrEdJ/L+Qk/xu8?=
 =?us-ascii?q?bZDh8lKQO0xPzrCNVg1owEX2KPDbSUMKfTsV+O++IuLPOAZI4TuDbhNfcl4+Ti?=
 =?us-ascii?q?gmM+mV8YZaOpx4cYaGikHvR6JEWUeXjsgtAfHmsQvQo+S+rqiFuFUTNIY3ayXq?=
 =?us-ascii?q?Q85iw0CY68DIfDQJytj6KF3CuhApJWYWVGAEiWEXj0b4WER+sMaCWKL8B7iTwE?=
 =?us-ascii?q?Vb+hS4w72RG0rgD6yaFqLu7V+i0eqJLi28J55+zVlREu6zN0C96R3H2KT2Fxhm?=
 =?us-ascii?q?kIXSM53LhjoUxhzVeOyat4jOZeFdBJ4/NJUx01NZjTz+FhD9DyWwTBfsqGSVq8?=
 =?us-ascii?q?Q9WmBy0xQcw1w9MUf0l9HNCihAjZ3yW2G78Vi6CLBJss/63BxXfxOdhyx2zG1K?=
 =?us-ascii?q?Y7iVkmWdVANWuhiq579AjTAorJnl6dl6arc6QcwSHM+H2CzWqIoEFXTgpwXb/Z?=
 =?us-ascii?q?UnAYY0vctc756V/aT7+yFbQnNRNMxtOYJatUdNLll1VGS+3lONTFfW2xnXy9BR?=
 =?us-ascii?q?KJxrOKcYrrdH8R3CTbCEgYjQ8T+WyKOhQ5Bieku2jeFiBhFUrzY0Pw9ulzsG+7?=
 =?us-ascii?q?Tk4xzwGNc01h17q09gQJhfCGTPMTxLYEuCYnqzV7B1u929PWC9ydpwtuZqlcYN?=
 =?us-ascii?q?U94EtZ2mLdrQByIpugL6V6jF4Ebwt3p1/u1wlwCohYi8cqqG0lzQVsJqOYyl9O?=
 =?us-ascii?q?bC6Y0o3qNb3RKWny+w6vZrXS2lHf1taW56gO5O45q1XloAGmCE4i/2973NlS1n?=
 =?us-ascii?q?uW/o/KAxYKUZLtTkY38AB3prHHYiUn+4zYz3xtMamuvT/E1NIkH+8lyhemf9dC?=
 =?us-ascii?q?P6KIDg7yE8sGB8ewLOwmgUSmbhUBPOpK7q47I9umd+ea2K6sJOtghjOmgnhd74?=
 =?us-ascii?q?Bnz02M8DBwSujW0JYfwvGUxxeIWC34jFi8rM/3g4dEZTcJE2q7yCjkApNRZ6Jo?=
 =?us-ascii?q?cYYKD2euP9O4xtFki5HxXH5Y8UapB0ka18+xZRqSc1v90BVQ1EQWu3CmmTG0zy?=
 =?us-ascii?q?dpkzEvtaef2C3Ow+L/dBsIIGJLRW9ijUvyLoiwldwVQE+obw0xnhu/+Un637Rb?=
 =?us-ascii?q?pLh4L2TLQ0dHZTL2L2JhUqu3rLaCeNRA6JArsSVWVuSzf1aaR6X5oxsb1SPjAm?=
 =?us-ascii?q?RfyCo6dzGsppX2gRh6hHiBI3Z0qXrTYdtwygvH5NzAWf5R2SILRSlihjnQHFS8?=
 =?us-ascii?q?Pdip/dOPmpfHs+C+UX+hV5JJfSnqy4OAqDW05WlwDRKjmPCzn8XtERIm3i/jy9?=
 =?us-ascii?q?lqSSLIoQ7/Yobx1qS2K+JnflRyC1/65Mp3AYV+koo2hJEN1nkWnJSV/XwbkWjt?=
 =?us-ascii?q?NdVXw77xbH0IRTQT2d7a/BDl2FF/LnKO34/5U3Sdwsh7aNWgbGIZxDk979xUB6?=
 =?us-ascii?q?eO97NLgzF1olWjoALVYPh9mCodyPQ05H4bheEJpBQiziGHDr8OGklYODTmlw6U?=
 =?us-ascii?q?4NCmsKVXeGGvfKCs1Ep5mNCtFrCDrRtaWHbkYZciBi5w4957MFLN1n3z947ldM?=
 =?us-ascii?q?PRbdIVqh2bjRPAg/JJJ5I2k/oAnTBnNn7lvX051+47igRj0oqgs4iAL2Vt4bi1?=
 =?us-ascii?q?AhpFNjDuY8MT+zftjbtRn8qM3oCvGIlhFSsPXJfyUf2oFzcSv+z9NwmSCD08tm?=
 =?us-ascii?q?ubGb3HEA+d8khmqmzAE4uxO3GLPnUZzshiRBqAJExZmg8URy43npo4FgCs2czg?=
 =?us-ascii?q?f1115jEX5l7ktBRMzvhkOAX4UmfavA2ocCs7SICDLBpK6QFP/0fUMcuD7uJqAi?=
 =?us-ascii?q?FX5JuhoBaWKmycYQRIAnoEWkiFB1DlI7mv6sPM8+meBuqiMfTOZa+CpvBZV/eN?=
 =?us-ascii?q?3ZivyJdp/y6QNsWTOXlvF/071VRCXXB6GMTZmi8DSy8NlyLKYM6Uug28+jBsrs?=
 =?us-ascii?q?2k9PTrWQTv5ZaACrdIMNVv/Qy2jrmHN+KKmCl5LjNY3IsWxXDU0LgfwEISiyZ2?=
 =?us-ascii?q?eja3DLQPrjTNQ7zQm6NNCx4bajh+NM9J76I6wwlMNtTXitLz1r5kkPE1D01JWk?=
 =?us-ascii?q?DmmsGsfcYKOX2yNEvbBEaXM7SLPSHLw8DyYa+mVbJclvlbtx2utjadCELjOjWD?=
 =?us-ascii?q?lz/0VxGgK+1MjSebPABAt4G5aBpiFW/jTNf+YB2hLNB3lSE2waEzhn7SNW8TKz?=
 =?us-ascii?q?58c0ZMrr2W9SxZg/V/FHZH7npqNuSEnyeZ7+/FKpcZq/drAyJ0l/5E73Q+0bda?=
 =?us-ascii?q?8CZERPkm0BfV+9dtu1SOluiJ1yoiXh1TrDpCmIOMuwNlI6qdvoZBXXLV1BML43?=
 =?us-ascii?q?+ZBxkDq51iENKr86VQzdPMk4roNSxPtdnT+I9UBMnOKcaDdmEhLAbkHTnKJA8E?=
 =?us-ascii?q?SyO7c2DZm0FZ1vqV8zndsJIzoJvlsIETUbIdX05xXukbB0BNB8EYOpZ6WnUvlr?=
 =?us-ascii?q?vfxNUG/1K1pR/bAsxHo5+BUeidR/zybH6DlaFYTx8Jx67oa5oVO5G92kZnLFJ9?=
 =?us-ascii?q?mcCCA0fMUMpfiixnYBU9rEhE/D55VGJ3k0bkbB69yHYJEPq1mAMmzAxkbqIw93?=
 =?us-ascii?q?Ok+VA9J1yMoTYqiEkgsdz/hHaadzu1ZKa5WINRDCzvsE93MZL+awJ6YEu5mkkg?=
 =?us-ascii?q?fCveSr5QibRIc35qhA7V/5BIHLoUTqBJexQXwvK/bPUy1lFdtyDhwlVIoaPAT4?=
 =?us-ascii?q?BwhRMwdoG3rHNowAtmd8MzKurbI68NhkNMi6yHuDWAzb0rnkkfIQMH/XmWeShO?=
 =?us-ascii?q?tEFMfrkkLAKy+edvrAeCmiNYPmMLUr5iov9r9UQVIOKcwinglbJObgi4NvabLq?=
 =?us-ascii?q?6Vk2zBk9OYBFI9kgsPk0RG5rFw3d0UekyYTV00zLCRGhIKMuLPMQhQKcFV8Tyb?=
 =?us-ascii?q?fyGUts2dy4NpMp77EfrnCaeWvbkZhmqjBw0oFodK5cMEWtGvwVzeIsLmKvgdwA?=
 =?us-ascii?q?8uzB/iIU6YCvsPcxWO1H8CqMGyzJZ99YpQPDcQBSN6KyrzrrzQvA4xxv2YQM0x?=
 =?us-ascii?q?fGwZT6MDLHs9XMD8kClc+zxCAyOwyfkx0xWZ4nn3oSGDIiP7ao9YY+qMeRJnC5?=
 =?us-ascii?q?mU/jwl/6WswQrV6JnEYWX7M8lyktDK4OIe4Z2ADqUHHvFGr07AltwAFDSRWGnV?=
 =?us-ascii?q?HIvtKg=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AgAADKdwNch0O0hNFjGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBVAMBAQELAYFagQOBDieYGVIGgUmJCwOQGRIBARgTAYQ8AoM4IjcGDQE?=
 =?us-ascii?q?DAQEBAQEBAgETAQEBCgsJCCkjDII2IoJsAiQTBgEbHQEDAgkCBSYlAwwFDQIRA?=
 =?us-ascii?q?QUBIwoIBYMcgWkBAwgMAQWXWDyMCRYFAReCdwWBBQGDKAoZJw1dgTcCBhKKboE?=
 =?us-ascii?q?cgQ+BB4NugwyFX4ImApApj2kuBwKODoMjIwyJT4dLLIhYhXCJUgIEAgkCBQ8hg?=
 =?us-ascii?q?TuBdzMaI4M8ghsMF38BAoJIihw/ODKBBQEBIQ+MagEB?=
X-IPAS-Result: =?us-ascii?q?A0AgAADKdwNch0O0hNFjGwEBAQEDAQEBBwMBAQGBVAMBAQE?=
 =?us-ascii?q?LAYFagQOBDieYGVIGgUmJCwOQGRIBARgTAYQ8AoM4IjcGDQEDAQEBAQEBAgETA?=
 =?us-ascii?q?QEBCgsJCCkjDII2IoJsAiQTBgEbHQEDAgkCBSYlAwwFDQIRAQUBIwoIBYMcgWk?=
 =?us-ascii?q?BAwgMAQWXWDyMCRYFAReCdwWBBQGDKAoZJw1dgTcCBhKKboEcgQ+BB4NugwyFX?=
 =?us-ascii?q?4ImApApj2kuBwKODoMjIwyJT4dLLIhYhXCJUgIEAgkCBQ8hgTuBdzMaI4M8ghs?=
 =?us-ascii?q?MF38BAoJIihw/ODKBBQEBIQ+MagEB?=
X-IronPort-AV: E=Sophos;i="5.56,305,1539673200"; 
   d="scan'208";a="55172091"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 01 Dec 2018 22:16:06 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1725784AbeLBGQF (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sun, 2 Dec 2018 01:16:05 -0500
Received: from mail-pf1-f195.google.com ([209.85.210.195]:44038 "EHLO
        mail-pf1-f195.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725355AbeLBGQE (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sun, 2 Dec 2018 01:16:04 -0500
Received: by mail-pf1-f195.google.com with SMTP id u6so4771869pfh.11;
        Sat, 01 Dec 2018 22:16:01 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=date:from:to:cc:subject:message-id:mime-version:content-disposition
         :user-agent;
        bh=zpuGNdUnpdN5wTEIRBOxYuxj5rUfCCVuWQ25gpRoE6s=;
        b=bWk6uLkFrct4pezrRVHDS3fxAfnzuH30JJU4oMJOz2yuRc6qGON0LS3euO9PI18qCG
         ZWCJ/La6wnc++Nb6Jl5M7htxappQkoe07uJn+Tgm2gzZrUpW4u6sFMq4hhElyN39p+9v
         zz1vE8r8mohE3kP3S+LsBxTj9Y9QmOvTxyr+xuNsnDmySrcEt7Zz/1uqxJRqxgRQTFTW
         h/SSYR9cuTSYigG5l+TwSwbmOvd7pT/sHv8kYvijQHX0gOgpzngqpuzQWss+3SjvQuvP
         Q74IyFtYvg1IFgMLRPd0NLO+dpLsHbzDcBnYYIMyHZbKylIA5otr3Lj2UWKVL3p/SPpM
         lv9w==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:message-id:mime-version
         :content-disposition:user-agent;
        bh=zpuGNdUnpdN5wTEIRBOxYuxj5rUfCCVuWQ25gpRoE6s=;
        b=THyyVfz6zTLvQGp7SMSVu2jOPk97szapGbUrak6GHW1mwqg0XsSZzBuPgarGoVF3sU
         QSoYsRlXxWtzxRapNVXjhUlibGIMEmByPRuQOKZK///zhdfwYnHPd4GtK4WPBqFS/h7U
         jLcZ0TZxXvbyGTNGbX6Y0UtPAw5Lb6WF42aKwZx+WHkNvzk/eZsKHRWOKQDyA3x3XWvN
         MRdmmyFH6VkzuW6rKcHZV+gieaoncELGowoTkESpkg/CShEDXkOrDRwPXXB/2IIcJ3T6
         teVk9dHeVYVow0CdTeS9BHz28FDyjh43taIFBfGDfudLWBjo9LxdaS2VDPOnuPnRQoEY
         yGdw==
X-Gm-Message-State: AA+aEWbxiS6sqz9JtaQX6X0AUxeOzD0SwcmmSe1k50qSoFQCoPb1PTsp
        YdI8GPvzUt33SizQgDQzxa/zyVHk
X-Google-Smtp-Source: AFSGD/UBkP9uRpZkSu5Rmi17UiqjfK/g8dHm6TgDXv94eGr1l1iC6bkXVyD45WRhl9f9OjSvEy60DQ==
X-Received: by 2002:a63:4c4e:: with SMTP id m14mr9689461pgl.173.1543731360563;
        Sat, 01 Dec 2018 22:16:00 -0800 (PST)
Received: from jordon-HP-15-Notebook-PC ([103.227.99.148])
        by smtp.gmail.com with ESMTPSA id v14sm16952190pgf.3.2018.12.01.22.15.58
        (version=TLS1 cipher=ECDHE-RSA-AES128-SHA bits=128/128);
        Sat, 01 Dec 2018 22:15:59 -0800 (PST)
Date: Sun, 2 Dec 2018 11:49:44 +0530
From: Souptick Joarder <jrdr.linux@gmail.com>
To: akpm@linux-foundation.org, willy@infradead.org, mhocko@suse.com,
        kirill.shutemov@linux.intel.com, vbabka@suse.cz, riel@surriel.com,
        sfr@canb.auug.org.au, rppt@linux.vnet.ibm.com,
        peterz@infradead.org, linux@armlinux.org.uk, robin.murphy@arm.com,
        iamjoonsoo.kim@lge.com, treding@nvidia.com, keescook@chromium.org,
        m.szyprowski@samsung.com, stefanr@s5r6.in-berlin.de,
        hjc@rock-chips.com, heiko@sntech.de, airlied@linux.ie,
        oleksandr_andrushchenko@epam.com, joro@8bytes.org,
        pawel@osciak.com, kyungmin.park@samsung.com, mchehab@kernel.org,
        boris.ostrovsky@oracle.com, jgross@suse.com
Cc: linux-kernel@vger.kernel.org, linux-mm@kvack.org,
        linux-arm-kernel@lists.infradead.org,
        linux1394-devel@lists.sourceforge.net,
        dri-devel@lists.freedesktop.org,
        linux-rockchip@lists.infradead.org, xen-devel@lists.xen.org,
        iommu@lists.linux-foundation.org, linux-media@vger.kernel.org
Subject: [PATCH v2 1/9] mm: Introduce new vm_insert_range API
Message-ID: <20181202061944.GA3094@jordon-HP-15-Notebook-PC>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: Mutt/1.5.21 (2010-09-15)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Previouly drivers have their own way of mapping range of
kernel pages/memory into user vma and this was done by
invoking vm_insert_page() within a loop.

As this pattern is common across different drivers, it can
be generalized by creating a new function and use it across
the drivers.

vm_insert_range is the new API which will be used to map a
range of kernel memory/pages to user vma.

This API is tested by Heiko for Rockchip drm driver, on rk3188,
rk3288, rk3328 and rk3399 with graphics.

Signed-off-by: Souptick Joarder <jrdr.linux@gmail.com>
Reviewed-by: Matthew Wilcox <willy@infradead.org>
Tested-by: Heiko Stuebner <heiko@sntech.de>
---
 include/linux/mm_types.h |  3 +++
 mm/memory.c              | 38 ++++++++++++++++++++++++++++++++++++++
 mm/nommu.c               |  7 +++++++
 3 files changed, 48 insertions(+)

diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h
index 5ed8f62..15ae24f 100644
--- a/include/linux/mm_types.h
+++ b/include/linux/mm_types.h
@@ -523,6 +523,9 @@ extern void tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm,
 extern void tlb_finish_mmu(struct mmu_gather *tlb,
 				unsigned long start, unsigned long end);
 
+int vm_insert_range(struct vm_area_struct *vma, unsigned long addr,
+			struct page **pages, unsigned long page_count);
+
 static inline void init_tlb_flush_pending(struct mm_struct *mm)
 {
 	atomic_set(&mm->tlb_flush_pending, 0);
diff --git a/mm/memory.c b/mm/memory.c
index 15c417e..84ea46c 100644
--- a/mm/memory.c
+++ b/mm/memory.c
@@ -1478,6 +1478,44 @@ static int insert_page(struct vm_area_struct *vma, unsigned long addr,
 }
 
 /**
+ * vm_insert_range - insert range of kernel pages into user vma
+ * @vma: user vma to map to
+ * @addr: target user address of this page
+ * @pages: pointer to array of source kernel pages
+ * @page_count: number of pages need to insert into user vma
+ *
+ * This allows drivers to insert range of kernel pages they've allocated
+ * into a user vma. This is a generic function which drivers can use
+ * rather than using their own way of mapping range of kernel pages into
+ * user vma.
+ *
+ * If we fail to insert any page into the vma, the function will return
+ * immediately leaving any previously-inserted pages present.  Callers
+ * from the mmap handler may immediately return the error as their caller
+ * will destroy the vma, removing any successfully-inserted pages. Other
+ * callers should make their own arrangements for calling unmap_region().
+ *
+ * Context: Process context. Called by mmap handlers.
+ * Return: 0 on success and error code otherwise
+ */
+int vm_insert_range(struct vm_area_struct *vma, unsigned long addr,
+			struct page **pages, unsigned long page_count)
+{
+	unsigned long uaddr = addr;
+	int ret = 0, i;
+
+	for (i = 0; i < page_count; i++) {
+		ret = vm_insert_page(vma, uaddr, pages[i]);
+		if (ret < 0)
+			return ret;
+		uaddr += PAGE_SIZE;
+	}
+
+	return ret;
+}
+EXPORT_SYMBOL(vm_insert_range);
+
+/**
  * vm_insert_page - insert single page into user vma
  * @vma: user vma to map to
  * @addr: target user address of this page
diff --git a/mm/nommu.c b/mm/nommu.c
index 749276b..d6ef5c7 100644
--- a/mm/nommu.c
+++ b/mm/nommu.c
@@ -473,6 +473,13 @@ int vm_insert_page(struct vm_area_struct *vma, unsigned long addr,
 }
 EXPORT_SYMBOL(vm_insert_page);
 
+int vm_insert_range(struct vm_area_struct *vma, unsigned long addr,
+			struct page **pages, unsigned long page_count)
+{
+	return -EINVAL;
+}
+EXPORT_SYMBOL(vm_insert_range);
+
 /*
  *  sys_brk() for the most part doesn't need the global kernel
  *  lock, except when an application is doing something nasty
-- 
1.9.1

