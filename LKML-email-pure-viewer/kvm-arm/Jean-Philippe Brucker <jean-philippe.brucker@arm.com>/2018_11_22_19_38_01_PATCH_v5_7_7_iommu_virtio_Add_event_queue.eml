Return-Path: <virtualization-bounces@lists.linux-foundation.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 23 Nov 2018 23:34:17 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 71AFD58040F
	for <like.xu@linux.intel.com>; Fri, 23 Nov 2018 02:55:10 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 23 Nov 2018 02:55:10 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A2J6EcxOVYhY3XCwuRn4l6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0K/7+pcbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Xymp4aV2Rx/ykC?=
 =?us-ascii?q?oJNyA3/nzZhMJzi6xUohyhqBNnw4PWYo+YO+dyc63BcdwGSmRBRdheWjddAo6+?=
 =?us-ascii?q?dYYDE/AMMfpGo4T7ulAArQG+BQ6pBO73zjFHmGX53asj3+o7EQHG3QggH9MWsH?=
 =?us-ascii?q?TMstr+KbofUfqozKbUzjXMcelW0ir65YjKbB8uu/eMUatoccrRyEkvEwLFjk2I?=
 =?us-ascii?q?qYP7JT+azf4Ns3WH4OpjS+2vkXUqpBtrojiq3Msjlo7JhocMx13C6C53zoE1Jd?=
 =?us-ascii?q?iiR056Z96pCJ9QtyCcN4trTcIiTWZouDs8yrIbo5G7YCkKyJMhxxLFbPyHaYeI?=
 =?us-ascii?q?7xT+X+iSOTd1nG9pdb2jixqo70Ss1/DwWtOp3FtLqidJiMTAum4V2xDN98SKSO?=
 =?us-ascii?q?Fx8lqu1DqTzQzf9/1ILV0umafZN5IsxKM7mIAJvkTZBCD2nV37jK+IeUUg/eil?=
 =?us-ascii?q?8+Hnba/npp+YLYN0jgD+MqIzms2wD+Q4NRUOX26G9uumyL3j/Er5QLNQgv0xiK?=
 =?us-ascii?q?nZv4jWJcUdpqGnHw9Yypsv5hmjAzu8ztgUgGQLIEhYdB+Gi4XlIUzCLO7gAfe6?=
 =?us-ascii?q?mVuskTNrx/7cPr3mB5XANmbDkLb7fbZh9k5T0g4zzdFe5p1OFrEBIfXzWknouN?=
 =?us-ascii?q?PDCR85Lgq0zPr5B9VmzY4eXWOPArSFMKPJq1OI4uMvI++RZI4aoTr9Jf8l5+Po?=
 =?us-ascii?q?jXAkg1AdYaip3ZwRaHyiGfRmOUqZbWL2gtgdCWcKohY+TOvyhV2GUD5TZGi9U7?=
 =?us-ascii?q?gz5zEmE4+mCYbDRoawgL2Oxiu7H5tWZnxYBVCIC3vna4KEW/JfIB+UOdJrxzwY?=
 =?us-ascii?q?SaC6Gchm0RC1qBS8z7thM/ra/TAeuZv/1d9zoerJmlY3/D1wCs2blGaVU2BzmH?=
 =?us-ascii?q?hPWT4swL12pU1vw0uC1q4rvvpDCNYG4vpIVhs9Z4Dd1fBnAtTzSAvdf9CPDUyr?=
 =?us-ascii?q?W8irGi0ZStMq38RIZ0d7BsXngBfe2SajH74SkfqMHpNj6b/W3XX6O5NgzW3b3r?=
 =?us-ascii?q?IqlVgsT5hzMjingat66iDXBpXViAOdlqC3ZeES2zPL+G6fzG2I+kZCX0o4VaTD?=
 =?us-ascii?q?QGBafkDXhcr261mETLK0D7kjdAxbxorKJqZUa9bkkU9LSd/9N9nEJWG8gWG9AV?=
 =?us-ascii?q?CP3LzIJJTrYXkA1SHcGkEYkgcV1XKHLhQlQCOgpX/OSTJpCFTjal/t9u84r2m0?=
 =?us-ascii?q?CgcqzhuWbkok27er0hoUnuCHDfQaxbMf/SA5pjMyG0yym5rUDMCHj1prbblRep?=
 =?us-ascii?q?U6+lgDnWfCqyRnM5CgJrwkjVkbICptuEa79Rh+DMB4kckurWsywUJYM7+T015b?=
 =?us-ascii?q?P2ea0Jn2f6XXK23z5AiiLaTMx1rd3cy+870Krv8/rgOw70mSCkM+/iA/gJFu2H?=
 =?us-ascii?q?yG68CSAQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ARAADO2/dbhwyp04xiHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgVqBD4EpjBFfix6DK5YdgXMUGAsJg3qEWyI0CQ0BAwEBAQEBAQI?=
 =?us-ascii?q?BEwEBAQoLCQgpIwyCNgUCAxgJglwBAgMBAQEkEwwKHgsDAwECBgEBQAQECAMBI?=
 =?us-ascii?q?wEvBxIFglFLAYIBBAEKqAczihIFh16EK4IWgRGGLQEEhzkCjxlDj2BGBwKGfIY?=
 =?us-ascii?q?YhBAjiU+HOY1Dim2BRoINTSNQgmyCJxeIXoU+PwEBMYEHiiqBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0ARAADO2/dbhwyp04xiHAEBAQQBAQcEAQGBUQcBAQsBgVq?=
 =?us-ascii?q?BD4EpjBFfix6DK5YdgXMUGAsJg3qEWyI0CQ0BAwEBAQEBAQIBEwEBAQoLCQgpI?=
 =?us-ascii?q?wyCNgUCAxgJglwBAgMBAQEkEwwKHgsDAwECBgEBQAQECAMBIwEvBxIFglFLAYI?=
 =?us-ascii?q?BBAEKqAczihIFh16EK4IWgRGGLQEEhzkCjxlDj2BGBwKGfIYYhBAjiU+HOY1Di?=
 =?us-ascii?q?m2BRoINTSNQgmyCJxeIXoU+PwEBMYEHiiqBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,269,1539673200"; 
   d="scan'208";a="139303845"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from mail.linuxfoundation.org ([140.211.169.12])
  by mtab.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 23 Nov 2018 02:55:09 -0800
Received: from mail.linux-foundation.org (localhost [127.0.0.1])
	by mail.linuxfoundation.org (Postfix) with ESMTP id DC2C4D4D;
	Thu, 22 Nov 2018 19:40:00 +0000 (UTC)
X-Original-To: virtualization@lists.linux-foundation.org
Delivered-To: virtualization@mail.linuxfoundation.org
Received: from smtp1.linuxfoundation.org (smtp1.linux-foundation.org
	[172.17.192.35])
	by mail.linuxfoundation.org (Postfix) with ESMTPS id 516AAD28;
	Thu, 22 Nov 2018 19:39:56 +0000 (UTC)
X-Greylist: domain auto-whitelisted by SQLgrey-1.7.6
X-Greylist: domain auto-whitelisted by SQLgrey-1.7.6
Received: from foss.arm.com (foss.arm.com [217.140.101.70])
	by smtp1.linuxfoundation.org (Postfix) with ESMTP id C3FFD76F;
	Thu, 22 Nov 2018 19:39:55 +0000 (UTC)
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.72.51.249])
	by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id 946562F27;
	Thu, 22 Nov 2018 11:39:55 -0800 (PST)
Received: from ostrya.cambridge.arm.com (ostrya.cambridge.arm.com
	[10.1.196.78])
	by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPA id 364CD3F575; 
	Thu, 22 Nov 2018 11:39:52 -0800 (PST)
From: Jean-Philippe Brucker <jean-philippe.brucker@arm.com>
To: iommu@lists.linux-foundation.org, linux-pci@vger.kernel.org,
	devicetree@vger.kernel.org, virtualization@lists.linux-foundation.org,
	virtio-dev@lists.oasis-open.org, joro@8bytes.org, mst@redhat.com
Subject: [PATCH v5 7/7] iommu/virtio: Add event queue
Date: Thu, 22 Nov 2018 19:38:01 +0000
Message-Id: <20181122193801.50510-8-jean-philippe.brucker@arm.com>
X-Mailer: git-send-email 2.19.1
In-Reply-To: <20181122193801.50510-1-jean-philippe.brucker@arm.com>
References: <20181122193801.50510-1-jean-philippe.brucker@arm.com>
MIME-Version: 1.0
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	smtp1.linux-foundation.org
Cc: mark.rutland@arm.com, lorenzo.pieralisi@arm.com,
	tnowicki@caviumnetworks.com, marc.zyngier@arm.com,
	robin.murphy@arm.com, will.deacon@arm.com, eric.auger@redhat.com,
	robh+dt@kernel.org, bhelgaas@google.com, kvmarm@lists.cs.columbia.edu
X-BeenThere: virtualization@lists.linux-foundation.org
X-Mailman-Version: 2.1.12
Precedence: list
List-Id: Linux virtualization <virtualization.lists.linux-foundation.org>
List-Unsubscribe: <https://lists.linuxfoundation.org/mailman/options/virtualization>,
	<mailto:virtualization-request@lists.linux-foundation.org?subject=unsubscribe>
List-Archive: <http://lists.linuxfoundation.org/pipermail/virtualization/>
List-Post: <mailto:virtualization@lists.linux-foundation.org>
List-Help: <mailto:virtualization-request@lists.linux-foundation.org?subject=help>
List-Subscribe: <https://lists.linuxfoundation.org/mailman/listinfo/virtualization>,
	<mailto:virtualization-request@lists.linux-foundation.org?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Sender: virtualization-bounces@lists.linux-foundation.org
Errors-To: virtualization-bounces@lists.linux-foundation.org

The event queue offers a way for the device to report access faults from
endpoints. It is implemented on virtqueue #1. Whenever the host needs to
signal a fault, it fills one of the buffers offered by the guest and
interrupts it.

Reviewed-by: Eric Auger <eric.auger@redhat.com>
Signed-off-by: Jean-Philippe Brucker <jean-philippe.brucker@arm.com>
---
 drivers/iommu/virtio-iommu.c      | 115 +++++++++++++++++++++++++++---
 include/uapi/linux/virtio_iommu.h |  19 +++++
 2 files changed, 125 insertions(+), 9 deletions(-)

diff --git a/drivers/iommu/virtio-iommu.c b/drivers/iommu/virtio-iommu.c
index 0c7a7fa2628d..e6ff515d41c0 100644
--- a/drivers/iommu/virtio-iommu.c
+++ b/drivers/iommu/virtio-iommu.c
@@ -29,7 +29,8 @@
 #define MSI_IOVA_LENGTH			0x100000
 
 #define VIOMMU_REQUEST_VQ		0
-#define VIOMMU_NR_VQS			1
+#define VIOMMU_EVENT_VQ			1
+#define VIOMMU_NR_VQS			2
 
 struct viommu_dev {
 	struct iommu_device		iommu;
@@ -41,6 +42,7 @@ struct viommu_dev {
 	struct virtqueue		*vqs[VIOMMU_NR_VQS];
 	spinlock_t			request_lock;
 	struct list_head		requests;
+	void				*evts;
 
 	/* Device configuration */
 	struct iommu_domain_geometry	geometry;
@@ -82,6 +84,15 @@ struct viommu_request {
 	char				buf[];
 };
 
+#define VIOMMU_FAULT_RESV_MASK		0xffffff00
+
+struct viommu_event {
+	union {
+		u32			head;
+		struct virtio_iommu_fault fault;
+	};
+};
+
 #define to_viommu_domain(domain)	\
 	container_of(domain, struct viommu_domain, domain)
 
@@ -503,6 +514,68 @@ static int viommu_probe_endpoint(struct viommu_dev *viommu, struct device *dev)
 	return ret;
 }
 
+static int viommu_fault_handler(struct viommu_dev *viommu,
+				struct virtio_iommu_fault *fault)
+{
+	char *reason_str;
+
+	u8 reason	= fault->reason;
+	u32 flags	= le32_to_cpu(fault->flags);
+	u32 endpoint	= le32_to_cpu(fault->endpoint);
+	u64 address	= le64_to_cpu(fault->address);
+
+	switch (reason) {
+	case VIRTIO_IOMMU_FAULT_R_DOMAIN:
+		reason_str = "domain";
+		break;
+	case VIRTIO_IOMMU_FAULT_R_MAPPING:
+		reason_str = "page";
+		break;
+	case VIRTIO_IOMMU_FAULT_R_UNKNOWN:
+	default:
+		reason_str = "unknown";
+		break;
+	}
+
+	/* TODO: find EP by ID and report_iommu_fault */
+	if (flags & VIRTIO_IOMMU_FAULT_F_ADDRESS)
+		dev_err_ratelimited(viommu->dev, "%s fault from EP %u at %#llx [%s%s%s]\n",
+				    reason_str, endpoint, address,
+				    flags & VIRTIO_IOMMU_FAULT_F_READ ? "R" : "",
+				    flags & VIRTIO_IOMMU_FAULT_F_WRITE ? "W" : "",
+				    flags & VIRTIO_IOMMU_FAULT_F_EXEC ? "X" : "");
+	else
+		dev_err_ratelimited(viommu->dev, "%s fault from EP %u\n",
+				    reason_str, endpoint);
+	return 0;
+}
+
+static void viommu_event_handler(struct virtqueue *vq)
+{
+	int ret;
+	unsigned int len;
+	struct scatterlist sg[1];
+	struct viommu_event *evt;
+	struct viommu_dev *viommu = vq->vdev->priv;
+
+	while ((evt = virtqueue_get_buf(vq, &len)) != NULL) {
+		if (len > sizeof(*evt)) {
+			dev_err(viommu->dev,
+				"invalid event buffer (len %u != %zu)\n",
+				len, sizeof(*evt));
+		} else if (!(evt->head & VIOMMU_FAULT_RESV_MASK)) {
+			viommu_fault_handler(viommu, &evt->fault);
+		}
+
+		sg_init_one(sg, evt, sizeof(*evt));
+		ret = virtqueue_add_inbuf(vq, sg, 1, evt, GFP_ATOMIC);
+		if (ret)
+			dev_err(viommu->dev, "could not add event buffer\n");
+	}
+
+	virtqueue_kick(vq);
+}
+
 /* IOMMU API */
 
 static struct iommu_domain *viommu_domain_alloc(unsigned type)
@@ -885,16 +958,35 @@ static struct iommu_ops viommu_ops = {
 static int viommu_init_vqs(struct viommu_dev *viommu)
 {
 	struct virtio_device *vdev = dev_to_virtio(viommu->dev);
-	const char *name = "request";
-	void *ret;
+	const char *names[] = { "request", "event" };
+	vq_callback_t *callbacks[] = {
+		NULL, /* No async requests */
+		viommu_event_handler,
+	};
 
-	ret = virtio_find_single_vq(vdev, NULL, name);
-	if (IS_ERR(ret)) {
-		dev_err(viommu->dev, "cannot find VQ\n");
-		return PTR_ERR(ret);
-	}
+	return virtio_find_vqs(vdev, VIOMMU_NR_VQS, viommu->vqs, callbacks,
+			       names, NULL);
+}
 
-	viommu->vqs[VIOMMU_REQUEST_VQ] = ret;
+static int viommu_fill_evtq(struct viommu_dev *viommu)
+{
+	int i, ret;
+	struct scatterlist sg[1];
+	struct viommu_event *evts;
+	struct virtqueue *vq = viommu->vqs[VIOMMU_EVENT_VQ];
+	size_t nr_evts = vq->num_free;
+
+	viommu->evts = evts = devm_kmalloc_array(viommu->dev, nr_evts,
+						 sizeof(*evts), GFP_KERNEL);
+	if (!evts)
+		return -ENOMEM;
+
+	for (i = 0; i < nr_evts; i++) {
+		sg_init_one(sg, &evts[i], sizeof(*evts));
+		ret = virtqueue_add_inbuf(vq, sg, 1, &evts[i], GFP_KERNEL);
+		if (ret)
+			return ret;
+	}
 
 	return 0;
 }
@@ -963,6 +1055,11 @@ static int viommu_probe(struct virtio_device *vdev)
 
 	virtio_device_ready(vdev);
 
+	/* Populate the event queue with buffers */
+	ret = viommu_fill_evtq(viommu);
+	if (ret)
+		goto err_free_vqs;
+
 	ret = iommu_device_sysfs_add(&viommu->iommu, dev, NULL, "%s",
 				     virtio_bus_name(vdev));
 	if (ret)
diff --git a/include/uapi/linux/virtio_iommu.h b/include/uapi/linux/virtio_iommu.h
index ae6145cf5928..ba1b460c9944 100644
--- a/include/uapi/linux/virtio_iommu.h
+++ b/include/uapi/linux/virtio_iommu.h
@@ -139,4 +139,23 @@ struct virtio_iommu_req_probe {
 	 */
 };
 
+/* Fault types */
+#define VIRTIO_IOMMU_FAULT_R_UNKNOWN		0
+#define VIRTIO_IOMMU_FAULT_R_DOMAIN		1
+#define VIRTIO_IOMMU_FAULT_R_MAPPING		2
+
+#define VIRTIO_IOMMU_FAULT_F_READ		(1 << 0)
+#define VIRTIO_IOMMU_FAULT_F_WRITE		(1 << 1)
+#define VIRTIO_IOMMU_FAULT_F_EXEC		(1 << 2)
+#define VIRTIO_IOMMU_FAULT_F_ADDRESS		(1 << 8)
+
+struct virtio_iommu_fault {
+	__u8					reason;
+	__u8					reserved[3];
+	__le32					flags;
+	__le32					endpoint;
+	__u8					reserved2[4];
+	__le64					address;
+};
+
 #endif
-- 
2.19.1

_______________________________________________
Virtualization mailing list
Virtualization@lists.linux-foundation.org
https://lists.linuxfoundation.org/mailman/listinfo/virtualization
