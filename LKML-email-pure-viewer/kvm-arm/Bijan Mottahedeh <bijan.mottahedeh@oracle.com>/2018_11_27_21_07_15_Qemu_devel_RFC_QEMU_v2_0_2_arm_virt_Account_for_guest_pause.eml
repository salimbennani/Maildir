Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 28 Nov 2018 08:49:53 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id E5572580322
	for <like.xu@linux.intel.com>; Tue, 27 Nov 2018 13:16:02 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by fmsmga005-1.fm.intel.com with ESMTP; 27 Nov 2018 13:16:02 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A2e04lhPBoCmH4HfI30kl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0I/j4rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0yRD+s7bpkSAXwhS?=
 =?us-ascii?q?kHKTA3/mLZhMttgqJDoh+vpRNyz5PabY2JKvV+ZbjQcc8GSWdbQspcTTBNDp+6?=
 =?us-ascii?q?YoASD+QBJ+FYr4zlqlYTrBu+BxOjBOXywTFPgX/2wbE63P4hEQ7YwQMvAdIOu2?=
 =?us-ascii?q?nTodruNacSU/q6zK/SwTXGaPNWxSv955LIch8/vP6DQ7JwfNHWyUk1DQzKklGQ?=
 =?us-ascii?q?ppL/MzyJ0eQNtnGW4ux9Xuysk24qsx99riSsy8s2l4XFm4EYxkra+Sh3wIs5P8?=
 =?us-ascii?q?C0RUxjbdK5H5ZcqjuWO5Z5T84jWW1kpTs2x7wctZKmfSUHzoksyQTFZPydaYeI?=
 =?us-ascii?q?5wruVOaPLjd8g3JoYLa/hxep8Ui80e3wTMa00FBXriZfldnMrH8N2wTS6siBVP?=
 =?us-ascii?q?R94l+s1SiT2w3Q8O1IPF04mKnBJ5I/zLM9loAfvVnBEyPunUX5lq6WdkEq+uiy?=
 =?us-ascii?q?7OTnZ63rpoaCOI9xlwHyK7khldKhAesmNggCRnOU+eOh1L3l4UL2Xq5Kgvoykq?=
 =?us-ascii?q?nYs5DVO94Xp6GkAwJN1oYj6hC/Dyqp0dgCnHkHKk5FdwyDj4TzJ17OJ/X4AOy5?=
 =?us-ascii?q?g1SrljdryPbGPqD7DpXKNHjDn6/tfaxh5E5E1Aoz0ddf6opQCrEAI/L8RFX9td?=
 =?us-ascii?q?PFDhIiNwy0wuDnCMhy148EWGKPBLOZP73WsVOS+u0vJOyMN8covi3gIa0l++L2?=
 =?us-ascii?q?li1+3lscZrWym50Qbn++A7JhOUreZHPthtIIFyANphY/S+rxz0SPVCMWa3usUq?=
 =?us-ascii?q?Zv2zcgFYjzCI7CQpyq0qWM2Tr+EpBIa2QDEF2VDHrza62CXPEDbj/UJdVuxScZ?=
 =?us-ascii?q?X7qsQJN0yBe1qQXhwKBmJOeHxipNrJ/myZ156vPekTk08jp7Cdnb1HuCHE9umW?=
 =?us-ascii?q?ZdbT401aY3hEth1l6D3KR1g7QMH91R7vUPVwAmKZfcwuB3C/j1QAvKetrPQ1Gj?=
 =?us-ascii?q?FIb1SQotR848loddK312HM+v20jO?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AIAACvsv1bhxHrdtBkGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUQYBAQELAYEwJYI9jBFfiymDCZZEFIFfEgEBGBSHWiI0CQ0BAwEBAQE?=
 =?us-ascii?q?BAQIBEwEBAQoLCQgbDiMMgjYFAgMYCYJfBAIkGQEBBAopAQIDAQIGAjcRCAMBc?=
 =?us-ascii?q?YMcggIBAwGlSoFsM4J2AQEFgkOEbgiHYoQrgVc/gRGCXYRxLlaFHIkXhgt3j3U?=
 =?us-ascii?q?HAoIcBIgJhwcCFoFZiC+HA5gQAgQCBAUCEwGBRoINUR+DPIIbDBcfgyuKdFGBB?=
 =?us-ascii?q?4o5KS2BdwEB?=
X-IPAS-Result: =?us-ascii?q?A0AIAACvsv1bhxHrdtBkGwEBAQEDAQEBBwMBAQGBUQYBAQE?=
 =?us-ascii?q?LAYEwJYI9jBFfiymDCZZEFIFfEgEBGBSHWiI0CQ0BAwEBAQEBAQIBEwEBAQoLC?=
 =?us-ascii?q?QgbDiMMgjYFAgMYCYJfBAIkGQEBBAopAQIDAQIGAjcRCAMBcYMcggIBAwGlSoF?=
 =?us-ascii?q?sM4J2AQEFgkOEbgiHYoQrgVc/gRGCXYRxLlaFHIkXhgt3j3UHAoIcBIgJhwcCF?=
 =?us-ascii?q?oFZiC+HA5gQAgQCBAUCEwGBRoINUR+DPIIbDBcfgyuKdFGBB4o5KS2BdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,287,1539673200"; 
   d="scan'208";a="41804863"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 27 Nov 2018 13:16:02 -0800
Received: from localhost ([::1]:44520 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gRki9-0003wB-A4
	for like.xu@linux.intel.com; Tue, 27 Nov 2018 16:16:01 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:36063)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <bijan.mottahedeh@oracle.com>) id 1gRkZw-0003N3-1o
	for qemu-devel@nongnu.org; Tue, 27 Nov 2018 16:07:33 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <bijan.mottahedeh@oracle.com>) id 1gRkZs-0003lP-Rn
	for qemu-devel@nongnu.org; Tue, 27 Nov 2018 16:07:32 -0500
Received: from userp2130.oracle.com ([156.151.31.86]:43594)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <bijan.mottahedeh@oracle.com>)
	id 1gRkZs-0003kh-Iq
	for qemu-devel@nongnu.org; Tue, 27 Nov 2018 16:07:28 -0500
Received: from pps.filterd (userp2130.oracle.com [127.0.0.1])
	by userp2130.oracle.com (8.16.0.22/8.16.0.22) with SMTP id
	wARL4MFF145974; Tue, 27 Nov 2018 21:07:24 GMT
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=oracle.com;
	h=from : to : cc :
	subject : date : message-id; s=corp-2018-07-02;
	bh=TZX0QvYUJEtXGlQw7AxD+ggW1hSfK64gmEGoISNfrmk=;
	b=0TBLvEGjmEAO8OlCa1RMXTlgCvZuVxuT8QKlA5RfNQV7+59vhs3rbUZuddVpivjkL3Ol
	HTxPwb5yiscTrb016HVPDoXs/D0zfaPCYe60uVFHnVXhPBN5zn0lrpRWQ1oQJXt7TidF
	i1Idbf36a9n+yc9AIm0TBm7Ygk0rLm3tQOqulXx/Ani9qLg/vW3SmyM7SWtjCq0F1grw
	4jqrCTGCrhdpMR0e+kj1ZcIr2OHhXbMzG/gCDtTjM8h4hvKg1jJLHYaQyS0B/PUVZggK
	yGx0LVjf+Fp+M0NcNhw1y/c/WuP9zre4/rc9PhpXw195st1uQQOgXsXv01EOq06FykQx
	FA== 
Received: from aserv0021.oracle.com (aserv0021.oracle.com [141.146.126.233])
	by userp2130.oracle.com with ESMTP id 2nxx2u6m80-1
	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=OK);
	Tue, 27 Nov 2018 21:07:24 +0000
Received: from aserv0122.oracle.com (aserv0122.oracle.com [141.146.126.236])
	by aserv0021.oracle.com (8.14.4/8.14.4) with ESMTP id wARL7NtP019374
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256
	verify=OK); Tue, 27 Nov 2018 21:07:23 GMT
Received: from abhmp0010.oracle.com (abhmp0010.oracle.com [141.146.116.16])
	by aserv0122.oracle.com (8.14.4/8.14.4) with ESMTP id wARL7Nog017233;
	Tue, 27 Nov 2018 21:07:23 GMT
Received: from ca-ldom147.us.oracle.com (/10.129.68.131)
	by default (Oracle Beehive Gateway v4.0)
	with ESMTP ; Tue, 27 Nov 2018 13:07:22 -0800
From: Bijan Mottahedeh <bijan.mottahedeh@oracle.com>
To: qemu-devel@nongnu.org
Date: Tue, 27 Nov 2018 13:07:15 -0800
Message-Id: <1543352837-21529-1-git-send-email-bijan.mottahedeh@oracle.com>
X-Mailer: git-send-email 1.8.3.1
X-Proofpoint-Virus-Version: vendor=nai engine=5900 definitions=9090
	signatures=668685
X-Proofpoint-Spam-Details: rule=notspam policy=default score=0 suspectscore=1
	malwarescore=0
	phishscore=0 bulkscore=0 spamscore=0 mlxscore=0 mlxlogscore=999
	adultscore=0 classifier=spam adjust=0 reason=mlx scancount=1
	engine=8.0.1-1810050000 definitions=main-1811270178
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 3.x [generic] [fuzzy]
X-Received-From: 156.151.31.86
Subject: [Qemu-devel] [RFC QEMU v2 0/2] arm/virt: Account for guest pause
 time
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: kvmarm@lists.cs.columbia.edu
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

v1 -> v2:

- Call the asm code only for kvm and always use the default value for TCG.

This patch series address two Qemu issues:

  - improper system clock frequency initialization
  - lack of pause (virtsh suspend) time accounting

A simple test to reproduce the problem executes one or more instances
of the following command in the guest:

dd if=/dev/zero of=/dev/null &

and then pauses and resumes the guest after a certain delay:

virsh suspend <guest>        # pauses the guest
sleep 120
virsh resume <guest>

After the guest is resumed, there are soft lockup warning messages
displayed on the console.

A comparison with x86 shows that hwclock and date values diverge after
the above pause and resume sequence for x86 but remain the same for Arm.

Patch 1 intializes the system clock frequency in Qemu similar to the
kernel.

Patch 2 accumulates the total guest pause time in QEMU and adjusts the
virtual offset counter accordingly before the guest is resumed.

The patches have been tested on an Ampere system.  With the patches the
time behavior is the same as x86 and the soft lockup messages go away.


Clock Frequency Initialization
==============================

Arm v8 provides the virtual counter (cntvct), virtual counter offset
(cntvoff), and counter frequency (cntfrq) registers for guest time
management.

Linux Arm platform code initializes the system clock frequency from
cntrfq_el0 register and sets the value into a statically created device
tree (DT) node.  It is not clear why the timer device node is created
with TIMER_OF_DECLARE().  The DT passed from Qemu to the kernel does not
contain a timer node.

drivers/clocksource/arm_arch_timer.c:

static inline u32 arch_timer_get_cntfrq(void)
{
        return read_sysreg(cntfrq_el0);
}

rate = arch_timer_get_cntfrq();
arch_timer_of_configure_rate(rate, np);

/*
 * For historical reasons, when probing with DT we use whichever (non-zero)
 * rate was probed first, and don't verify that others match. If the first node
 * probed has a clock-frequency property, this overrides the HW register.
 */
static void arch_timer_of_configure_rate(u32 rate, struct device_node *np)
{
...
   if (of_property_read_u32(np, "clock-frequency", &arch_timer_rate)) {
          arch_timer_rate = rate;
...
}

TIMER_OF_DECLARE(armv7_arch_timer, "arm,armv7-timer", arch_timer_of_init);
TIMER_OF_DECLARE(armv8_arch_timer, "arm,armv8-timer", arch_timer_of_init);


Linux then initializes the clock frequency to 50MHZ.

Qemu however hard codes the clock frequency to 62.5MHZ.

target/arm/cpu.h:

/* Scale factor for generic timers, ie number of ns per tick.
 * This gives a 62.5MHz timer.
 */
#define GTIMER_SCALE 16

The suggested fix is to follow the kernel's arch_timer_get_cntfrq()
approach in order to set system_clock_scale to match the kernel's idea
of clock-frequency, rather than using a hard-coded value.

Ultimately, it seems that Qemu should construct the timer DT node and
pass the actual clock frequency value to the kernel that way but that
brings up an interface and backward compatibility considerations.
Furthermore, the implications for ACPI method of probing is not clear.


Pause Time Accounting
=====================

Linux registers two clock sources, a platform-independent jiffies
clocksource and a Arm-specific arch_sys_counter; the read interface
for the latter reads the virtual counter register:

static struct clocksource clocksource_jiffies = {
        .name           = "jiffies",
        .rating         = 1, /* lowest valid rating*/
        .read           = jiffies_read,
        .mask           = CLOCKSOURCE_MASK(32),
        .mult           = TICK_NSEC << JIFFIES_SHIFT, /* details above */
        .shift          = JIFFIES_SHIFT,
        .max_cycles     = 10,
};

static struct clocksource clocksource_counter = {
        .name   = "arch_sys_counter",
        .rating = 400,
        .read   = arch_counter_read,
        .mask   = CLOCKSOURCE_MASK(56),
        .flags  = CLOCK_SOURCE_IS_CONTINUOUS,
};

arch_counter_read()
-> arch_timer_read_counter()
   -> arch_counter_get_cntvct()
      -> arch_timer_reg_read_stable(cntvct_el0)

The virtual counter offset register is set from:

kvm_timer_vcpu_load()
-> set_cntvoff()

The counter is zeroed from:

kvm_timer_vcpu_put()
-> set_cntvoff()

        /*
         * The kernel may decide to run userspace after calling vcpu_put, so
         * we reset cntvoff to 0 to ensure a consistent read between user
         * accesses to the virtual counter and kernel access to the physical
         * counter of non-VHE case. For VHE, the virtual counter uses a fixed
         * virtual offset of zero, so no need to zero CNTVOFF_EL2 register.
         */
        if (!has_vhe())
                set_cntvoff(0);

The virtual counter offset is not modified anywhere however to account
for pause time.  The suggested fix is to add pause time accounting to
Qemu.

One potential issue is whether modifying the virtual counter offset
breaks any assumptions, e.g., see the kvm_timer_vcpu_put() comment above.


hwclock vs. date
================

The hwclock on the ends up in drivers/rtc/rtc-pl031.c

Real Time Clock interface for ARM AMBA PrimeCell 031 RTC

ioctl("/dev/rtc", RTC_RD_TIME, ...)
-> rtc_dev_ioctl()
   -> rtc_read_time()
      -> __rtc_read_time()
         -> pl031_read_time()


The date command reads time from from a vdso page updated as follows:

irq_enter()
-> tick_irq_enter()
   -> tick_nohz_irq_enter()
      -> tick_nohz_update_jiffies()
         -> tick_do_update_jiffies64()
            -> tick_do_update_jiffies64()
               -> update_wall_time()
                  -> timekeeping_advance()
                     -> timekeeping_update()
                        -> update_vsyscall(struct timekeepr *tk)

The struct timekeeper uses the Arm platform clocksource_counter noted above:

(gdb) p tk->tkr_mono
$4 = {clock = 0xffff0000097ddad0 <clocksource_counter>,
  mask = 72057594037927935, cycle_last = 271809294296, mult = 335544320,
  shift = 24, xtime_nsec = 3456106496000000, base = 5435795172160,
  base_real = 1539126455000000000}

This would explain why without any pause time accounting, the both
hwclock and date command show the same time after the guest is resume
from a pause, e.g. with the following sequence:

virsh suspend <guest>
sleep <seconds>
virsh resume <guest>

Bijan Mottahedeh (2):
  arm/virt: Initialize generic timer scale factor dynamically
  arm/virt: Account for guest pause time

 hw/arm/virt.c           | 17 +++++++++++++++++
 hw/intc/arm_gicv3_kvm.c | 39 +++++++++++++++++++++++++++++++++++++++
 target/arm/cpu.h        |  3 +++
 target/arm/helper.c     | 19 ++++++++++++++++---
 target/arm/internals.h  |  8 ++++++--
 target/arm/kvm64.c      |  1 +
 6 files changed, 82 insertions(+), 5 deletions(-)

-- 
1.8.3.1


