Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  18 Dec 2018 08:48:09 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 0F4C95805FC;
	Mon, 17 Dec 2018 10:25:15 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga007-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 17 Dec 2018 10:25:14 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AD348PxJSlo8Pdg3tvNmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgULvn6rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZUMhfVzJPDJ6/?=
 =?us-ascii?q?YYQNAeoBOuFWoIbhqFUBthu+HQuhCfjzyjJLnHL6wbc33/g/HQzAwQcuH8gOsH?=
 =?us-ascii?q?PRrNjtMKkSVua1w7PUzTXDdfxW3yr25ZbPchA7uv6DQ65wetfWxEYzEAPFlE6f?=
 =?us-ascii?q?ppL5Pz6O0uQMvW6b4/BmVe2xl24qsgd8qSWsyMc0koTFmJ4Zx1Te+Slkzos5O8?=
 =?us-ascii?q?e0RFN4bNK4CpddtiOXO5N5T84iWW1luiI3xqcFtJO4ZiQG1pcqyhjCYPKdaYeI?=
 =?us-ascii?q?+AjsVOOJLDd4mn1lfLW/ig6s8Uiv1OL8TNO40FVUoSpflNnDqHQN2wbU6sidRf?=
 =?us-ascii?q?tx5kah2TCR2ADP8uxIP1w4mK7BJ5I8zLM8iIAfvVnAEyPqgkn7ja2bel0h+uey?=
 =?us-ascii?q?6uTnZrvmpoWbN49xkgz+NqUumsqiAeU3KwQOXHaU+f661LL9+U31WbJKj/Mwkq?=
 =?us-ascii?q?bHqpDXPtobpqGnDA9PyIoj6AiwDy2g0NsGmXkLNlVFeAiIj4TxIVHBPOj4Deuj?=
 =?us-ascii?q?g1SriDprw/HGPr7/DZnXIXnDjazsfbJ8605a1QoywspT55NSCrEdPv3zXlX9u8?=
 =?us-ascii?q?DfDh88Kwa02froCM1h1oMCXmKCGq+ZP7nTsV+U/O0vJPOAZI8IuDnnLfgl6OXj?=
 =?us-ascii?q?jXs4mV8bYKmo0oEbaHG+HvR6PUqZZWDgjcsGEWcPpgA+VvDliEWeUT5PYHa/R6?=
 =?us-ascii?q?A85jYlB468DofDQYatgLqG3CqgGp1WZ2ZGCk2DEHvydoWEXesMZzyWIsN7jjME?=
 =?us-ascii?q?Ur2hQZc71R6yrA/616ZnLu3M9yICrpLj1N915+7JmREo7zN0Dd+Q02WMT2Fyg2?=
 =?us-ascii?q?MJSCU63KF5oUxh1FiD1bJ0jOBfFdxW//lJSBs1NYbAz+xmDND/QgHBcc2PSFq8?=
 =?us-ascii?q?RtWmACs+TtQ+w9IVZ0Z9GtOijg3M3iawAr8VkaCLC4Iw8q7Gw3fxIMN9wW7c1K?=
 =?us-ascii?q?Y9l1kmXtdPNWq+i6Fi7QfTGZDGn1+Zl6mwc6QcxzDC9GGEwWqKv0FYVQpwXL7B?=
 =?us-ascii?q?XXAeYEvWsNv46lnDT7+oFbQoLA9BxdSeJatNb93jlU9GS+v7ONTCf2KxnH+9Cg?=
 =?us-ascii?q?uSybOScoXmYWUd0z/bCEgfjQ8T+22LNQw/BienvmLfAyZiFVPpY0Pw7+Z+rGm3?=
 =?us-ascii?q?QVMzzwGPd0dhzaa6+gYJhfyATPMexq4EuCYkqzVzAFa939LXB8CcpwZ7e6Vce9?=
 =?us-ascii?q?c94FZB1WLWrAF9Op2gL6Z/hl8RaQh3vkXu1wlpBYVEi8QlsHQqzA9qI6KCzFxB?=
 =?us-ascii?q?by+Y3Yz3OrDPMGby+A6gaqHI1VDeytqZ4boP5+kipFXlvwGpEVQi/m5j09lU1X?=
 =?us-ascii?q?uc+5rLABATUZL3TkY46Rx6q6vGbSk64oPezWdsPrWssj/ex9IpA/Moyxa9f9tF?=
 =?us-ascii?q?LKyIDg7zE80ACMioJ+wngFypbhMCPOBP+684JcKmd/2a2KG1OOZshi6pjWNC4I?=
 =?us-ascii?q?plyEKD6zJ8SvLU35YC2/yYxAqHWCvmg1e7r8/3nppIZTcMEWqlyCjoHZJeabd2?=
 =?us-ascii?q?fYkWF2iuOcq3xtNlip7pWn5Y8kOjBlwc1M+ofxqSc0Ly3QlK2UsLpnynnDOyzy?=
 =?us-ascii?q?ZonDExsqqfwCvOzvzidRoGIGJKRHNujUzxIYiylN0aWEmobw40lBqq/0r6xq5b?=
 =?us-ascii?q?pLhhIGnXW0tHYy/2L2R6WKuqqrWCe9JP6I8vsShPUuSze0qaSr3+oxsdyS/jBH?=
 =?us-ascii?q?FRxDM4dzGrvJX2gRp6hXmZLHZyqnrZZM5xyQ3e5NzaWf5ewD4GSDNkhjnQA1i2?=
 =?us-ascii?q?J8Op8smMl5ffruC+UHqsV51Jfins14+Atiq75WtxDB27nvCznMDnEAcg3S/60d?=
 =?us-ascii?q?lqSTvHrBLmbob30KS6NPptflN0C1/k98p6BoZ+n5MzhJ4K2HgWnJWV/Wcdnmf1?=
 =?us-ascii?q?PtVWwqb+bHsLRT4WzN/Z+gnl2Et/Ln2Xw4L1TGmSwsxkZ9OieGMZxjo979xWCK?=
 =?us-ascii?q?eT9LFEmCp1olmiog7Lb/lygCwdyecw534AmO4GphAtziqGD7AWHElYOzHslhuS?=
 =?us-ascii?q?49C/qqVXeHigcbyq2EVimtChCamIohtAV3bhZpciAShw491jMFLL1X3/8IDld8?=
 =?us-ascii?q?PWbdIOrR2UiBbAgvNRKJIwkPoKmCVmNXj8vX0j1+40kxhu0Yums4iALmVn5Li5?=
 =?us-ascii?q?DQJANj3pe8MT/Snggr1EkcaR24CvA49tGjEWXJbzSfKoETQStenoNgqUET08rG?=
 =?us-ascii?q?ubFqTbHQOF9EhmqHfPGYixN36LPHkZ0cliRB6FKUxdmg8UWSs1noUjGgC23sDh?=
 =?us-ascii?q?c1p55jMM5l7+sBRM0fllNx3+UmfZuQepZS04SJmZLBpK8A5C413ZPtCZ7uJ2By?=
 =?us-ascii?q?tY5IGurBSRKmyHYARFFWEIWkuZB1D6I7mh/9/A//KDBuq5KfvObq6DqehfV/eO?=
 =?us-ascii?q?2JKu3ZFq/zeKNsWTIHZiC+c31VZEXXB8A87ZgSkASzQLlyLRaM6WvBe89TN2rs?=
 =?us-ascii?q?C88/TrWRjj5YiVC7tVPtVg5Qq2gbqYN+OLgCZ5KDBY1o4DxHPSybgf2kIShD9q?=
 =?us-ascii?q?dzW3DbsAsivNRrrKmqBLFx4bdz9zNMxQ4q0mwwlCItTbhc3117Jiiv41CkxIVV?=
 =?us-ascii?q?jgmsGveMwLLHuxNFLBBEaXKruGISfHzN3wYaO5UbdQlvlbtwWsuTaHFE/uJiiD?=
 =?us-ascii?q?lzjsVxy1Le5Alj2UPBxAt4G7aRttDWnjTNT7ahy0KtN3jDs2waEqiXPOL2ITLT?=
 =?us-ascii?q?98c0ZVpL2K8SxYmul/G3BG7nd9LeiLgSCZ7+zZKpYQqfRqAyR0mPhc4HQ10LZV?=
 =?us-ascii?q?6CBERPpomCrdtNJuolemkvWRxTpjShZBtjFLhIfY9XllbJnZ8YNbRXvCtDYA4G?=
 =?us-ascii?q?CQFhUR749hC9vyq4hUx9XKlL/yM3FD9dzTq5gyHc/RfeCANnM9MRPvUBXTFgEI?=
 =?us-ascii?q?UXb/PmbFjUFBuPWN8DuTo4Rs+cuko4YHVrIODA99LfgdEEkwWYVaeJo=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AHAAA66Rdch0O0hNFdBhsBAQEBAwEBA?=
 =?us-ascii?q?QcDAQEBgVIFAQEBCwGBWoIRJ5gNgg0UaJZcgXMUGBMBhECDFiI1CA0BAwEBAQE?=
 =?us-ascii?q?BAQIBEwEBAQoLCQgpL4I2JAGCYgECAgEBAi8BBz8FAQkBAQoOEyUDDEgGEwWCU?=
 =?us-ascii?q?kuBeQgFqWuFQIRjjD4XgX+BEYJdNYRhAQEQDoVfAolChgt+j3hWCYZNiwIjgV2?=
 =?us-ascii?q?ITYcomWSBRwGCDDMaCCYKO4JsgicXEo4rHwEygQUBAYsxgj4BAQ?=
X-IPAS-Result: =?us-ascii?q?A0AHAAA66Rdch0O0hNFdBhsBAQEBAwEBAQcDAQEBgVIFAQE?=
 =?us-ascii?q?BCwGBWoIRJ5gNgg0UaJZcgXMUGBMBhECDFiI1CA0BAwEBAQEBAQIBEwEBAQoLC?=
 =?us-ascii?q?QgpL4I2JAGCYgECAgEBAi8BBz8FAQkBAQoOEyUDDEgGEwWCUkuBeQgFqWuFQIR?=
 =?us-ascii?q?jjD4XgX+BEYJdNYRhAQEQDoVfAolChgt+j3hWCYZNiwIjgV2ITYcomWSBRwGCD?=
 =?us-ascii?q?DMaCCYKO4JsgicXEo4rHwEygQUBAYsxgj4BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,366,1539673200"; 
   d="scan'208";a="56241875"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 17 Dec 2018 10:25:10 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2388879AbeLQSYv (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 17 Dec 2018 13:24:51 -0500
Received: from ms.lwn.net ([45.79.88.28]:54094 "EHLO ms.lwn.net"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S2388838AbeLQSYv (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 17 Dec 2018 13:24:51 -0500
Received: from localhost.localdomain (localhost [127.0.0.1])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by ms.lwn.net (Postfix) with ESMTPSA id F1CF6739;
        Mon, 17 Dec 2018 18:24:48 +0000 (UTC)
Date: Mon, 17 Dec 2018 11:24:37 -0700
From: Jonathan Corbet <corbet@lwn.net>
To: Thorsten Leemhuis <linux@leemhuis.info>
Cc: linux-doc@vger.kernel.org,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>
Subject: Re: [PATCH 0/1] RFC: Revamp admin-guide/tainted-kernels.rst to make
 it more comprehensible
Message-ID: <20181217112437.5fe868eb@lwn.net>
In-Reply-To: <20181217152043.9989-1-linux@leemhuis.info>
References: <20181217152043.9989-1-linux@leemhuis.info>
Organization: LWN.net
X-Mailer: Claws Mail 3.17.1 (GTK+ 2.24.32; x86_64-redhat-linux-gnu)
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Mon, 17 Dec 2018 16:20:42 +0100
Thorsten Leemhuis <linux@leemhuis.info> wrote:

> Hi! Find my first contribution to the kernel documentation in the reply to this
> mail. Hopefully a lot more will follow.

Hopefully!  Looking forward to it.

> Sorry for using the simple table format for the table. I only noticed the
> list table format is preferred after creating the table. Shall I convert
> it for the next submission? Sounds like a downside to me, as for a table
> this small the simple table format seems way easier to parse when reading
> the plain text file.

The thing that matters is readability in the plain-text format.  Your
table here is fine, no reason to redo it.

With regard to the patch itself:

> diff --git a/Documentation/admin-guide/tainted-kernels.rst b/Documentation/admin-guide/tainted-kernels.rst
> index 28a869c509a0..aabd307a178a 100644
> --- a/Documentation/admin-guide/tainted-kernels.rst
> +++ b/Documentation/admin-guide/tainted-kernels.rst
> @@ -1,10 +1,102 @@
>  Tainted kernels
>  ---------------
>  
> -Some oops reports contain the string **'Tainted: '** after the program
> -counter. This indicates that the kernel has been tainted by some
> -mechanism.  The string is followed by a series of position-sensitive
> -characters, each representing a particular tainted value.
> +The kernel will mark itself as 'tainted' when something occurs that
> +might be relevant later when investigating problems. Don't worry
> +yourself too much about this, most of the time it's not a problem to run

s/yourself//

> +a tainted kernel; the information is mainly of interest once someone
> +wants to investigate some problem, as its real cause might be the event
> +that got the kernel tainted. 

While this is true, an oops with a taint flag will often be ignored by
developers.  It's worth saying that, if at all possible, a problem needs
to be reproduced on an untainted kernel.

> That's why the kernel will remain tainted
> +even after you undo what caused the taint (i.e. unload a proprietary
> +kernel module), to indicate the kernel remains not trustworthy. That's
> +also why the kernel will print the tainted state when it noticed
> +ainternal problem (a 'kernel bug'), a recoverable error ('kernel oops')
> +or a nonrecoverable error ('kernel panic') and writes debug information
> +about this to the logs ``dmesg`` outputs. It's also possible to check
> +the tainted state at runtime through a file in ``/proc/``.
> +
> +
> +Tainted flag in bugs, oops or panics messages
> +~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
> +
> +You find the tainted state near the top after the list of loaded
> +modules.  The state is part of the line that begins with mentioning CPU
> +('CPU:'), Process ID ('PID:'), and a shorted name of the executed
> +command ('Comm:') that triggered the event. 

This seems like a good place for an example.

> When followed by **'Not
> +tainted: '** the kernel was not tainted at the time of the event; if it
> +was, then it will print **'Tainted: '** and characters either letters or
> +blanks. The meaning of those characters is explained in below table. The
> +output for example might state '``Tainted: P   WO``' when the kernel got
> +tainted earlier because a proprietary Module (``P``) was loaded, a
> +warning occurred (``W``), and an externally-built module was loaded
> +(``O``). To decode other letters use below table.
> +
> +
> +Decoding tainted state at runtime
> +~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
> +
> +At runtime, you can query the tainted state by reading
> +``/proc/sys/kernel/tainted``. If that returns ``0``, the kernel is not
> +tainted; any other number indicates the reasons why it is. You might
> +find that number in below table if there was only one reason that got
> +the kernel tainted. If there were multiple reasons you need to decode
> +the number, as it is a bitfield, where each bit indicates the absence or
> +presence of a particular type of taint. You can use the following python
> +command to decode::

Here's an idea if you feel like improving this: rather than putting an
inscrutable program inline, add a taint_status script to scripts/ that
prints out the status in fully human-readable form, with the explanation
for every set bit.

> +
> +	$ python3 -c 'from pprint import pprint; from itertools import zip_longest; pprint(list(zip_longest(range(1,17), reversed(bin(int(open("/proc/sys/kernel/tainted").read()))[2:]),fillvalue="0")))'
> +	[(1, '1'),
> +	 (2, '0'),
> +	 (3, '0'),
> +	 (4, '0'),
> +	 (5, '0'),
> +	 (6, '0'),
> +	 (7, '0'),
> +	 (8, '0'),
> +	 (9, '0'),
> +	 (10, '1'),
> +	 (11, '0'),
> +	 (12, '0'),
> +	 (13, '1'),
> +	 (14, '0'),
> +	 (15, '0'),
> +	 (16, '0')]
> +
> +In this case ``/proc/sys/kernel/tainted`` contained ``4609``, as the
> +kernel got tainted because a proprietary Module (Bit 1) got loaded, a
> +warning occurred (Bit 10), and an externally-built module got loaded
> +(Bit 13). To decode other bits use below table.
> +
> +
> +Table for decoding tainted state
> +~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

As noted before, this table is entirely readable and need not be messed
with. 

> +===  ===  ======  ========================================================
> +Bit  Log     Int  Reason that got the kernel tainted
> +===  ===  ======  ========================================================
> + 1)  G/P       0  proprietary module got loaded

I'd s/got/was/ throughout.  Also, this is the kernel, we start counting at
zero! :)

> + 2)  _/F       2  module was force loaded
> + 3)  _/S       4  SMP kernel oops on a officially SMP incapable processor
> + 4)  _/R       8  module was force unloaded
> + 5)  _/M      16  processor reported a Machine Check Exception (MCE)
> + 6)  _/B      32  bad page referenced or some unexpected page flags
> + 7)  _/U      64  taint requested by userspace application
> + 8)  _/D     128  kernel died recently, i.e. there was an OOPS or BUG
> + 9)  _/A     256  ACPI table overridden by user
> +10)  _/W     512  kernel issued warning
> +11)  _/C    1024  staging driver got loaded
> +12)  _/I    2048  workaround for bug in platform firmware in use
> +13)  _/O    4096  externally-built ("out-of-tree") module got loaded
> +14)  _/E    8192  unsigned module was loaded
> +15)  _/L   16384  soft lockup occurred
> +16)  _/K   32768  Kernel live patched

A look at kernel.h shows two more flags.  TAINT_AUX doesn't seem to be
used, but TAINT_RANDSTRUCT is.

> +===  ===  ======  ========================================================
> +
> +Note: To make reading easier ``_`` is representing a blank in this
> +table.
> +
> +More detailed explanation for tainting
> +~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
>  
>   1)  ``G`` if all modules loaded have a GPL or compatible license, ``P`` if
>       any proprietary module has been loaded.  Modules without a
> @@ -52,8 +144,3 @@ characters, each representing a particular tainted value.
>  
>   16) ``K`` if the kernel has been live patched.
>  
> -The primary reason for the **'Tainted: '** string is to tell kernel
> -debuggers if this is a clean kernel or if anything unusual has
> -occurred.  Tainting is permanent: even if an offending module is
> -unloaded, the tainted value remains to indicate that the kernel is not
> -trustworthy.
> -- 
> 2.18.1

Thanks,

jon
