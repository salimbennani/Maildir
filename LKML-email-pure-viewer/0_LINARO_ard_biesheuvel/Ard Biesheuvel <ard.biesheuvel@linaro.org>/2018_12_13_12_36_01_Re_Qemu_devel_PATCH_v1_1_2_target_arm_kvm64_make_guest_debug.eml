Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 21:23:49 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga008.fm.intel.com (fmsmga008.fm.intel.com [10.253.24.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id D08C558061F
	for <like.xu@linux.intel.com>; Thu, 13 Dec 2018 04:37:34 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by fmsmga008-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 13 Dec 2018 04:37:34 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3ACOpTpx9+2NQjHv9uRHKM819IXTAuvvDOBiVQ1KB+?=
 =?us-ascii?q?0+sXIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CSmVBUMReWSxPDI2/?=
 =?us-ascii?q?cYUAE+UPM/tAr4T/pVUDogayCAewCOzx0T9FnWP23bQg3ug9DQ3KwA4tEtQTu3?=
 =?us-ascii?q?rUttX1M6ISXPipwanS0DrIcu5b2Tbj54jTchAuv+yMXaxufsrV1EIiEBnKjk+N?=
 =?us-ascii?q?poD/JDyV1/oCs3Ob7+V+SOKvlXAoqwVqrzirx8csjJPGhpgSylze8iV52ok1KM?=
 =?us-ascii?q?S+RUVmYtCkCINduz+GO4Z1WM8uXnxktSUgxrEYt5O2fDIGxIklyhLHdfCKcpSE?=
 =?us-ascii?q?7xDmWeafIjp3n25pdbewihux8EWtxejxWteo3FtPqydJj9bBum0L2hfO8MaIUO?=
 =?us-ascii?q?F98V2k2TuX1wDc9OVEIUcsmKrfKp4h2aIwloEJvUTMGC/2hV/6jKiMdkUr4uSo?=
 =?us-ascii?q?6uLnbav6ppKEKYN4lgLzPr4zlsCiAuk0KBYCUmab9OimybHu/1X1QLBQgf03lq?=
 =?us-ascii?q?nZvoraJcMepqOhGg9azIMj6wumAzi7ztsYg2cILFZcdB2ciIjpJlfOL+zmAvek?=
 =?us-ascii?q?hFislDZrx/PYMbH7DZTNM2DOkLPgfbZ79k5dxxA/zdFZ55JIFL4BJOj/VVP2tN?=
 =?us-ascii?q?zdFRI5NQu0w+DoCNV7y4MSQ2WPArWWMK/Kq1+H+vovI/WQZI8SoDv9L/kl5/3w?=
 =?us-ascii?q?gnMjll4dYLKk3Z8WaHC+A/RnLF+VYXvqgtcdD2gKuhAyQ/DtiF2HAnZuYW2vVf?=
 =?us-ascii?q?c8+i0jE9DhSoPCXZy2xrqG2ii9A9tRfG8BD1mNFXLhccKDQ+sNbySJZdZslyFB?=
 =?us-ascii?q?WbW/Roty6Be1qQWvzrNmKvbTqDQVsI+m2NVr6umWjxwr6DFvE+yb1GeCSXwymX?=
 =?us-ascii?q?kHECQr1qJyqlAo11GYzKJjiOZZH9EA2/QcewM3Jdb2wup8it26DgvFc8fPQlug?=
 =?us-ascii?q?RNirKTUwSNsrxJkJeUkrSPu4iRWW9jCmS5UUmqeLCYEq/6aUi3HrK4B3ynvd1K?=
 =?us-ascii?q?Q8kVQias9OM2S8geh47QeFVN2BqFmQi6v/LfdU5yXK7mrWiDPW5Ew=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ClAADDURJcmBHrdtBjHgEGBwaBVAYLA?=
 =?us-ascii?q?YEwgk8Tg3yIeI1AfJhJFhgUgUuCdYMEIjcGDQEDAQEBAQEBAgETAQEBAQEICws?=
 =?us-ascii?q?GGw4jDII2BQIDGgEGglsBAQEBAgEBAiAEGQEBBAopAQICAQECBgEBCgsNAgIiB?=
 =?us-ascii?q?AICAwEeEgEFARwGEwWDHIF5CAEEmzA8ih1wfDOCdgEBBYcsCBJ5izGBVz+BEYJ?=
 =?us-ascii?q?dNYUBgwSCV6ERBwKCJASPMRiRSpk6DyGBO4F4fXQGgjWCGzWITIVAQDGBB4l7K?=
 =?us-ascii?q?iyBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0ClAADDURJcmBHrdtBjHgEGBwaBVAYLAYEwgk8Tg3yIeI1?=
 =?us-ascii?q?AfJhJFhgUgUuCdYMEIjcGDQEDAQEBAQEBAgETAQEBAQEICwsGGw4jDII2BQIDG?=
 =?us-ascii?q?gEGglsBAQEBAgEBAiAEGQEBBAopAQICAQECBgEBCgsNAgIiBAICAwEeEgEFARw?=
 =?us-ascii?q?GEwWDHIF5CAEEmzA8ih1wfDOCdgEBBYcsCBJ5izGBVz+BEYJdNYUBgwSCV6ERB?=
 =?us-ascii?q?wKCJASPMRiRSpk6DyGBO4F4fXQGgjWCGzWITIVAQDGBB4l7KiyBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,349,1539673200"; 
   d="scan'208";a="56744252"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 13 Dec 2018 04:37:33 -0800
Received: from localhost ([::1]:52119 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gXQFB-00088e-8x
	for like.xu@linux.intel.com; Thu, 13 Dec 2018 07:37:33 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:46238)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <ard.biesheuvel@linaro.org>) id 1gXQDw-0007bK-A1
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 07:36:17 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <ard.biesheuvel@linaro.org>) id 1gXQDv-0001CF-2X
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 07:36:16 -0500
Received: from mail-it1-x141.google.com ([2607:f8b0:4864:20::141]:38964)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <ard.biesheuvel@linaro.org>)
	id 1gXQDu-00017p-Ki
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 07:36:14 -0500
Received: by mail-it1-x141.google.com with SMTP id a6so3544642itl.4
	for <qemu-devel@nongnu.org>; Thu, 13 Dec 2018 04:36:14 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linaro.org; s=google;
	h=mime-version:references:in-reply-to:from:date:message-id:subject:to
	:cc:content-transfer-encoding;
	bh=fhJrvIYzzakGURzet1wpM1pTqERVcavcxSiESFbLCSU=;
	b=FR5T2lMlwc2iTxmV4gFmxFKwzWXgt3RXeYYACPgIoWlkexCMsbVeyOPBf7q1UwuLyR
	0LqokX9GwotfiX6N2x/ipOaSqSEBqlQ5MkkJEep3eiNevI6Cu/tdmII+zArXpiyqnLbq
	bMiVfwDN+Vxl74tAufQH0ebEUV2/NU5tQ4pBI=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:mime-version:references:in-reply-to:from:date
	:message-id:subject:to:cc:content-transfer-encoding;
	bh=fhJrvIYzzakGURzet1wpM1pTqERVcavcxSiESFbLCSU=;
	b=axm5G6U+jd7z8/TGfT754+YTt/6GPjTntp3NrbmUgb+gema+NgqUY2fF9sXJTuZt6c
	LckxteRuRy6Sz8z60OurF0cbTz199rDHyVfciRyCWjR0eI30GkceNvxWXYnntRte0Slt
	N+pr/HokcOCDYwRx227D/mXKpiFIEjg/Quw0YmGy+d43V0o66kPcFv4lAc9jMrLYO5aK
	aZif/CZv8ESUeOVXHweIaag1AooHcWvbuPmz6OhWOOgJHECGk7B2U9SmZrblr4Vprg3X
	eDK5zLZNJQCwtAYczNLC8i57f8uojNplnbFUUbB3KcyfpUQTMaqowH+IZqkpQO9OHoif
	MKIg==
X-Gm-Message-State: AA+aEWbbxcnke+YwX4veupLRTtHYpEKzE8y6ZwySiQ40iNTWdXN+h6cH
	tUX7ogdXePQ2nZI2RNGsNr1ZST+MwaKbdQOKa0+P+w==
X-Google-Smtp-Source: AFSGD/WvejXXsBG4BxCierua5lOQw1dTOBs8jo/IjWPJu7SDf98+QoppDW0bnqN8/6BaHjbpPdF/nLBIOvWQaPOh7sY=
X-Received: by 2002:a24:710:: with SMTP id f16mr8431451itf.121.1544704573418; 
	Thu, 13 Dec 2018 04:36:13 -0800 (PST)
MIME-Version: 1.0
References: <20181213115503.24188-1-alex.bennee@linaro.org>
	<20181213115503.24188-2-alex.bennee@linaro.org>
In-Reply-To: <20181213115503.24188-2-alex.bennee@linaro.org>
From: Ard Biesheuvel <ard.biesheuvel@linaro.org>
Date: Thu, 13 Dec 2018 13:36:01 +0100
Message-ID: <CAKv+Gu_C78f-a1MdsdXHi6u_gyhRh3djbzM3_vZ3K=AtWzqXGg@mail.gmail.com>
To: =?UTF-8?B?QWxleCBCZW5uw6ll?= <alex.bennee@linaro.org>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 2607:f8b0:4864:20::141
Subject: Re: [Qemu-devel] [PATCH v1 1/2] target/arm: kvm64 make guest debug
 AA32 break point aware
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Mark Rutland <mark.rutland@arm.com>,
	Peter Maydell <peter.maydell@linaro.org>, qemu-arm <qemu-arm@nongnu.org>,
	QEMU Developers <qemu-devel@nongnu.org>, omair.javaid@linaro.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Hi Alex,

Thanks again for looking into this.

On Thu, 13 Dec 2018 at 12:55, Alex Benn=C3=A9e <alex.bennee@linaro.org> wro=
te:
>
> When supported by the hardware we can run AA32 guests or even AA64 EL1
> code with AA32 EL0 mode code. Inserting a AA64 break point into AA32
> code tends to break things. This is especially acute with gdb as it
> inserts temporary breakpoints when stepping through code.
>
> The heuristic of checking the current mode works but it's not perfect.
> A user could be placing a break point in code after a mode switch and
> that will still fail. However there doesn't seem to be a way to force
> a hbreak by default. According to "set breakpoint auto-hw on":
>
>   This is the default behavior. When GDB sets a breakpoint, it will try
>   to use the target memory map to decide if software or hardware
>   breakpoint must be used.
>
> Reported-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
> Signed-off-by: Alex Benn=C3=A9e <alex.bennee@linaro.org>
> Cc: Omair Javaid <omair.javaid@linaro.org>
> ---
>  target/arm/kvm64.c | 13 ++++++++++---
>  1 file changed, 10 insertions(+), 3 deletions(-)
>
> diff --git a/target/arm/kvm64.c b/target/arm/kvm64.c
> index 0a502091e7..dd564a59b7 100644
> --- a/target/arm/kvm64.c
> +++ b/target/arm/kvm64.c
> @@ -989,14 +989,20 @@ int kvm_arch_get_registers(CPUState *cs)
>      return ret;
>  }
>
> -/* C6.6.29 BRK instruction */
> +/* BRK (A64) and BKPT (A32) instructions */
>  static const uint32_t brk_insn =3D 0xd4200000;
> +static const uint32_t bkpt_insn =3D 0xe1200070;

We'll need to cheat here, and use an opcode that is a BKPT instruction
in both ARM and Thumb modes, i.e., 0xe120be70 (where the lower 16 bits
constitute a T1 bkpt opcode with imm=3D0x70)

>
>  int kvm_arch_insert_sw_breakpoint(CPUState *cs, struct kvm_sw_breakpoint=
 *bp)
>  {
> +    CPUARMState *env =3D &ARM_CPU(cs)->env;
> +    int el =3D arm_current_el(env);
> +    bool is_aa64 =3D arm_el_is_aa64(env, el);
> +    const uint32_t *bpi =3D is_aa64 ? &brk_insn : &bkpt_insn;
> +
>      if (have_guest_debug) {
>          if (cpu_memory_rw_debug(cs, bp->pc, (uint8_t *)&bp->saved_insn, =
4, 0) ||
> -            cpu_memory_rw_debug(cs, bp->pc, (uint8_t *)&brk_insn, 4, 1))=
 {
> +            cpu_memory_rw_debug(cs, bp->pc, (uint8_t *)bpi, 4, 1)) {

Should we be dealing with endianness here?

>              return -EINVAL;
>          }
>          return 0;
> @@ -1012,7 +1018,7 @@ int kvm_arch_remove_sw_breakpoint(CPUState *cs, str=
uct kvm_sw_breakpoint *bp)
>
>      if (have_guest_debug) {
>          if (cpu_memory_rw_debug(cs, bp->pc, (uint8_t *)&brk, 4, 0) ||
> -            brk !=3D brk_insn ||
> +            !(brk =3D=3D brk_insn || brk =3D=3D bkpt_insn) ||
>              cpu_memory_rw_debug(cs, bp->pc, (uint8_t *)&bp->saved_insn, =
4, 1)) {
>              return -EINVAL;
>          }
> @@ -1055,6 +1061,7 @@ bool kvm_arm_handle_debug(CPUState *cs, struct kvm_=
debug_exit_arch *debug_exit)
>              return false;
>          }
>          break;
> +    case EC_AA32_BKPT:
>      case EC_AA64_BKPT:
>          if (kvm_find_sw_breakpoint(cs, env->pc)) {
>              return true;
> --
> 2.17.1
>

