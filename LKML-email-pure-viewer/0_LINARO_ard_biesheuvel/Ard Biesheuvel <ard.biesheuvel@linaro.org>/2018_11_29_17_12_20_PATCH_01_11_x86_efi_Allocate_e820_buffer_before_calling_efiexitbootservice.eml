Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 08:48:43 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 826EF5802E4;
	Thu, 29 Nov 2018 09:13:15 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga004-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 09:13:14 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A/LuYsxH4fROjCqbyyhbj951GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75osS9bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJVyJPHJ6y?=
 =?us-ascii?q?YYUMAeQGP+lYoYbyqVQVrRumBwShH//jxzxSi3Pqx6A2z/gtHAfb1wIgBdIOt3?=
 =?us-ascii?q?HUoc3pOacITO++0bTFzTTdYPNN2Tfy9pXIcg4/rvGIQLl9dtDeyVMyGA/flVqQ?=
 =?us-ascii?q?qJLqPyiV1usTrmib8fRvVea0hm4jqgFxpCKgxt0rioXTgYIV0F/E+Dx/zY0oJt?=
 =?us-ascii?q?O4UFZ2bcC4HJZUrS2WKoV7Tt04T211uys21qcKtJ+5cSQS1pgo3QLTZ+GCfoeU?=
 =?us-ascii?q?+R3vSfueLDJliH54Zr6yghe/8Ua8xuHgU8S03kpGoyhZntTJq38ByRPe5tSCR/?=
 =?us-ascii?q?Zz40utxyiA2gXX5+FKJU05kazWIIM7zLEqjJocq0HDEzf2mEroiK+WcV0p+van?=
 =?us-ascii?q?6+v5eLXqvJycOJFuigH4LKsuntazAeMiMggBR2Sb+OK826P//UDhXrlGkvk7nr?=
 =?us-ascii?q?PEvJ3UO8gXvLO1DgxJ3oo56huyDS+q0NECknkGKFJFdgiHj4/sO1zWJPD4DPG/?=
 =?us-ascii?q?g0mjkTtyxPDJIKfhApPTIXjHibvherh860hCxwop1t1f+Z1UBa8bIP7pWU/+qs?=
 =?us-ascii?q?bYDhknPAyw2ernD8991owGVWKVHqCZKL/SsUOP5u83J+mMZYwVtyjnJ/kq+v7j?=
 =?us-ascii?q?lns5mV4bfam00pobcnG4HvJ6I0qHZXrgmMsOEWAPvgAmVuzllEWCUSJPZ3a1R6?=
 =?us-ascii?q?885is0CIO6DYjZQYChmryB3DqhEZ1QaWBLEVSMEXbud4WZVPYAciOSIsl9kjMa?=
 =?us-ascii?q?UbitUZMu1RartAXi0bpoMvLU+jEEtZLkzNV15erTmg8o+Tx3CMSd1WeNT2Zvk2?=
 =?us-ascii?q?MMRj822r1/oENnxleC16h4n+JXFdhJ6/xVVQc6MIbWz/ZmBNDqRgLBYtCJRU68?=
 =?us-ascii?q?TdW9ATExSdExz8UUY0lnGdWvlRTD3yusA78ImL2HHp008qTA33fvI8Zx0WrJ1K?=
 =?us-ascii?q?4kj1M+WMtAKXWmhrJj9wjUH4PJkF+Wl6CweaQY3S7C7mGDzWWVsUFcUQ5wV7jF?=
 =?us-ascii?q?XH8FakvXq9T5+l3NT7u0Bbs7NQtBzNaIKrFWZd3xkVVGWPDjNczDbG2rhWe/Gw?=
 =?us-ascii?q?yExrOWY4rsYGUSwiPdBE8AkwAQ+HaGMRMzBiOgo2LYETxvGkjjY0Lq8elitny7?=
 =?us-ascii?q?SlU4wB2Nb01kz7C14AIaheSAS/MP2bIJoDoupC9qHFmjxd7WC8CPpwx6fKpCZ9?=
 =?us-ascii?q?Mw+1NH1WPftwxgMZ2sNaFihlgCcwtpu0PizQl4CoJFkcIytnMl0BJyKb6E0FNG?=
 =?us-ascii?q?bz6YwZHwOrjQKmnu/BCua7Ta2k3E3NaR4KcP7PU4q1PsvAyyEkoi8nNn08Ra0n?=
 =?us-ascii?q?eG55XKChYSXoz1Ukot6xd6oLTaaDEn54zIzX1sLbW0sjja1t0zAOsq1BmhcMlf?=
 =?us-ascii?q?Ma+eDwDyDtAVCNKoKOwpnFipcAkJPORT9K4yIsOneOGK2K+tPOZ8gj2miX5L75?=
 =?us-ascii?q?x60kKJ7yB8UPLH344Zw/GE2QuKTzf9jEq7vs/rg4xFZDESEXC5ySjrH4NRYqxy?=
 =?us-ascii?q?fYAWCWahOcG3x9N+h4LzVH5c7lKsG1QG2MqxcxqIc1P9xRFQ1VgQoXG/gyu4zi?=
 =?us-ascii?q?B7nCszrqWC2yzC2eLiewQdOm5KXWVtkU3jIYypgN8ERkioaA4pmQCh5Ub7wahb?=
 =?us-ascii?q?uat+I3PSQUdOYyj5MWViXrGsubqFZs5F8IkovjlPUOSgfVCaTabwohsb0y/5H2?=
 =?us-ascii?q?pS3is7dyysupjimxx6iWSdLGt8rXbDeMFwwwvf68LYRfJLwjUGQyx4gyHNBleg?=
 =?us-ascii?q?J9mp4cmUl5Dbv+C8TW2hTJ5TcSrszY+aryu0/25qAR6+n/C1hNLnFxM30Sv619?=
 =?us-ascii?q?lsSCXJowzwYojt16SmL+1nelNkC0P768p/Aot+iJc/hIkM2XgGgZWY5XoGnn30?=
 =?us-ascii?q?MdlB26L+bXwNSCUPw97U5gjlxUJiImiIx4L/SnWS3M9ha8OmbWMR3yI399pKB7?=
 =?us-ascii?q?uM7LxYgSt1pUK1rQHLbvh8hDsdyeYu52Qcg+EGowctyiSdArYPHUhXJyDslhKI?=
 =?us-ascii?q?78ygo6VTfmqgbb+w1E9ml9C7EL6Cuh1cWGr+epo6GC9w78Z/P0jW3Hz99I7kY8?=
 =?us-ascii?q?XQYswJthKPjRjAledVJYk1lvoLgypnJG38sWcky+49kRxhw5W6sJKbJGVq+aKz?=
 =?us-ascii?q?GgRYOSHtZ8MP5jHtir5TntqR34CqBJlgGy8EXJ31TfKzCzIStO/qNwKPED06t3?=
 =?us-ascii?q?eaFqDTHQ6Z6Ed6sX3PF4qnOG2QJHkc1d9iXgWSJFRDgAAIWzU3hoU2GRqtxMzl?=
 =?us-ascii?q?bUd1/DQR5kPjpxtIy+JoMQT/U2jFqAepbDc0VIaQLB5M4g5e4EfVNNSU7vhvEC?=
 =?us-ascii?q?FA4p2hsAuNJ3SZZwtSCGEGRFeEC0r/PrW05tnA7uuYBve4L/TUerWDsuheV/aO?=
 =?us-ascii?q?xZKy3Ypq5TeMNsOTPnZ8C/03wFZMXXd8G87BgTUAVzQXlz7Rb86cvBq9+ip3rt?=
 =?us-ascii?q?2m8PT2Qg3v45GDC6BVMdVp9BC7mqODN++WhCZkJjdUzJIMxXnUyLcB2F4ekT1h?=
 =?us-ascii?q?dz6oEb4Yry7CULrQmrNLDx4ccy5zNNVH76M/3glOOM7XkND11qR/jv46FVhFT0?=
 =?us-ascii?q?HhmtqyaMwOImG9Mk7HBUmROLSHIz3L39/4YaemRbJMi+VUsgW6uSyHHE/7IjSD?=
 =?us-ascii?q?iz7pWgi1PuFRly6bJgJRuYGnfhZpCGjuV9bmahy9MN9qgjw627w0hnXWNWECNT?=
 =?us-ascii?q?hwaV9CrrqV7SlAmPVwB3RB7mZ5LemDgyuZ8+jYKpMMvfR3GCh7i+Ja72o8y7ZO?=
 =?us-ascii?q?6CFERfp1mDbdr9J0olGmlPWPxSRjUBZUtjlLg4eLt114OarF7plARWrE/BUV4G?=
 =?us-ascii?q?SQERsKod5lCtzpu69Iy9nPlLj8KDFN89/P+cscBs7UKN+IMXY7MBrpHiLUAxUB?=
 =?us-ascii?q?TTKxKW7fgEldw7mu8SiRr54nut3hlpsmVLBWTho2G+kcB0AjG8YNZN9WWDwj2Z?=
 =?us-ascii?q?uciMgB/zLqqRjXS8JyvZ3dUP+WR/L1J2DdxYVEYB4B2vvXKYkSJov2wQQ2dlZ+?=
 =?us-ascii?q?jKzOGkzNQcpKpCxxKAM59hZj6n97G0Qp1wrPaw624HIOC/Ow1ko/kAc4a+Ug7z?=
 =?us-ascii?q?fh/kk6InLOpS05ik53ns/q12PCOAXtJbu9CNkFQxH/sFI8Z9aiG154?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AYAADDHQBch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUgYBAQsBgTCCOyeYGYINFJI4hHgUgV8SAQEYEwGHdCI1CA0BAwEBAQEBAQI?=
 =?us-ascii?q?BEwEBAQgNCQgpIwyCNiQBgmIDAwECJAsBDQEBNwEFCQEBHzEDMQEFAQIaBgESB?=
 =?us-ascii?q?YMcggIBBJp9PIodgWwzgnYBAQWHKAgSh1mDD4EcgVc/gRGHWCOFc4kpBIFuhB6?=
 =?us-ascii?q?GAYprBwKCHQSPBgsYiViBWIVsLIhMjy8CBAIEBQIFDyGBJgGCC32DL4IbDBeIX?=
 =?us-ascii?q?oVAPzKBBAEBASCNGgEB?=
X-IPAS-Result: =?us-ascii?q?A0AYAADDHQBch0O0hNFkHAEBAQQBAQcEAQGBUgYBAQsBgTC?=
 =?us-ascii?q?COyeYGYINFJI4hHgUgV8SAQEYEwGHdCI1CA0BAwEBAQEBAQIBEwEBAQgNCQgpI?=
 =?us-ascii?q?wyCNiQBgmIDAwECJAsBDQEBNwEFCQEBHzEDMQEFAQIaBgESBYMcggIBBJp9PIo?=
 =?us-ascii?q?dgWwzgnYBAQWHKAgSh1mDD4EcgVc/gRGHWCOFc4kpBIFuhB6GAYprBwKCHQSPB?=
 =?us-ascii?q?gsYiViBWIVsLIhMjy8CBAIEBQIFDyGBJgGCC32DL4IbDBeIXoVAPzKBBAEBASC?=
 =?us-ascii?q?NGgEB?=
X-IronPort-AV: E=Sophos;i="5.56,295,1539673200"; 
   d="scan'208";a="140121781"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 09:12:56 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730467AbeK3ES4 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 29 Nov 2018 23:18:56 -0500
Received: from mail-wr1-f66.google.com ([209.85.221.66]:34606 "EHLO
        mail-wr1-f66.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1728157AbeK3ESz (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 29 Nov 2018 23:18:55 -0500
Received: by mail-wr1-f66.google.com with SMTP id j2so2695273wrw.1
        for <linux-kernel@vger.kernel.org>; Thu, 29 Nov 2018 09:12:49 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding;
        bh=XsSaaAOivGZ+SMEV1HNl9ikqQLGcv3idzYmN9Jqzt5c=;
        b=dcC5p86oeYdf0PuJPXvTl+IxGk6KAwIaDC40VblPUnrv10ctKWv/QPjA56MPMCwhOv
         hU199FHB3jis9/WVya/WmQqBCO4nYRQ0d2+pgQaDLnMuyyFK65YmLI6S88u29mjMQv0v
         U/k1IirkxTFV43Pui5b9993IyZqHYQTQnwNGo=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=XsSaaAOivGZ+SMEV1HNl9ikqQLGcv3idzYmN9Jqzt5c=;
        b=pfEsFMj8AOPug4reYWcDmezZSJQz1leSA7xgFe/g/DAEj1QBfTmEgQ2jYE6MBixP4o
         bg5fZPOhqC6rZi9vfij49ow7Zrsi2qt9oERPlunWI9DXdB3dIQGD2/5EXw2q+7zqJZLa
         fjLejl4cEYYNMLD33FDy+whKNhXEzUJBH9+RbjSUvnic56Ms8E5gfjEsTzA3bc0xECvM
         V6qb/4keZXAe4KJsmNhyE6CYEgQOhO6Ws/soq/FYLtlr28DErfT8OCI7HCOjuWJpts/x
         sTF7073zIo9xrf7LfRoEF6oDai1+aNTjcQepPtubKr2chw/VwJVtboaxvKMCSp2QryxE
         Ev5w==
X-Gm-Message-State: AA+aEWZY0KUhrIAGNovzSZaNv8PnI2xFpC6XUI4VbEu8UOgwkQult45q
        EGi43M5wX7jswav9ngierv1cAA==
X-Google-Smtp-Source: AFSGD/X1jDhdQr43eGz+cQ9IOtvDpCobJJuO5C5jlYLNe+j8axw6bEloe9zFHnffEgJX+frMrPm+8A==
X-Received: by 2002:adf:d0c9:: with SMTP id z9mr2063343wrh.317.1543511568971;
        Thu, 29 Nov 2018 09:12:48 -0800 (PST)
Received: from harold.home ([2a01:cb1d:112:6f00:f070:d240:312e:9f99])
        by smtp.gmail.com with ESMTPSA id y185sm1593882wmg.34.2018.11.29.09.12.47
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Thu, 29 Nov 2018 09:12:48 -0800 (PST)
From: Ard Biesheuvel <ard.biesheuvel@linaro.org>
To: linux-efi@vger.kernel.org, Ingo Molnar <mingo@kernel.org>,
        Thomas Gleixner <tglx@linutronix.de>
Cc: Ard Biesheuvel <ard.biesheuvel@linaro.org>,
        linux-kernel@vger.kernel.org, Andy Lutomirski <luto@kernel.org>,
        Arend van Spriel <arend.vanspriel@broadcom.com>,
        Bhupesh Sharma <bhsharma@redhat.com>,
        Borislav Petkov <bp@alien8.de>,
        Dave Hansen <dave.hansen@intel.com>,
        Eric Snowberg <eric.snowberg@oracle.com>,
        Hans de Goede <hdegoede@redhat.com>,
        Joe Perches <joe@perches.com>,
        Jon Hunter <jonathanh@nvidia.com>,
        Julien Thierry <julien.thierry@arm.com>,
        Marc Zyngier <marc.zyngier@arm.com>,
        Nathan Chancellor <natechancellor@gmail.com>,
        Peter Zijlstra <peterz@infradead.org>,
        Sai Praneeth Prakhya <sai.praneeth.prakhya@intel.com>,
        Sedat Dilek <sedat.dilek@gmail.com>,
        YiFei Zhu <zhuyifei1999@gmail.com>
Subject: [PATCH 01/11] x86/efi: Allocate e820 buffer before calling efi_exit_boot_service
Date: Thu, 29 Nov 2018 18:12:20 +0100
Message-Id: <20181129171230.18699-2-ard.biesheuvel@linaro.org>
X-Mailer: git-send-email 2.19.1
In-Reply-To: <20181129171230.18699-1-ard.biesheuvel@linaro.org>
References: <20181129171230.18699-1-ard.biesheuvel@linaro.org>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From: Eric Snowberg <eric.snowberg@oracle.com>

Commit d64934019f6c ("x86/efi: Use efi_exit_boot_services()")
introduced a regression on systems with large memory maps
causing them to hang on boot. The first "goto get_map" that was removed
from exit_boot insured there was enough room for the memory map when
efi_call_early(exit_boot_services) was called. This happens when
(nr_desc > ARRAY_SIZE(params->e820_table).

Chain of events:
  exit_boot()
    efi_exit_boot_services()
      efi_get_memory_map <- at this point the mm can't grow over 8 desc
      priv_func()
        exit_boot_func()
          allocate_e820ext() <- new mm grows over 8 desc from e820 alloc
      efi_call_early(exit_boot_services) <- mm key doesn't match so retry
      efi_call_early(get_memory_map) <- not enough room for new mm
      system hangs

This patch allocates the e820 buffer before calling efi_exit_boot_services
and fixes the regression.

Signed-off-by: Eric Snowberg <eric.snowberg@oracle.com>
Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
---
 arch/x86/boot/compressed/eboot.c | 65 ++++++++++++++++++++------------
 1 file changed, 41 insertions(+), 24 deletions(-)

diff --git a/arch/x86/boot/compressed/eboot.c b/arch/x86/boot/compressed/eboot.c
index 8b4c5e001157..f7bad07bb251 100644
--- a/arch/x86/boot/compressed/eboot.c
+++ b/arch/x86/boot/compressed/eboot.c
@@ -1,3 +1,4 @@
+
 /* -----------------------------------------------------------------------
  *
  *   Copyright 2011 Intel Corporation; author Matt Fleming
@@ -634,37 +635,54 @@ static efi_status_t alloc_e820ext(u32 nr_desc, struct setup_data **e820ext,
 	return status;
 }
 
+static efi_status_t allocate_e820(struct boot_params *params,
+				  struct setup_data **e820ext,
+				  u32 *e820ext_size)
+{
+	unsigned long map_size, desc_size, buff_size;
+	struct efi_boot_memmap boot_map;
+	efi_memory_desc_t *map;
+	efi_status_t status;
+	__u32 nr_desc;
+
+	boot_map.map =		&map;
+	boot_map.map_size =	&map_size;
+	boot_map.desc_size =	&desc_size;
+	boot_map.desc_ver =	NULL;
+	boot_map.key_ptr =	NULL;
+	boot_map.buff_size =	&buff_size;
+
+	status = efi_get_memory_map(sys_table, &boot_map);
+	if (status != EFI_SUCCESS)
+		return status;
+
+	nr_desc = buff_size / desc_size;
+
+	if (nr_desc > ARRAY_SIZE(params->e820_table)) {
+		u32 nr_e820ext = nr_desc - ARRAY_SIZE(params->e820_table);
+
+		status = alloc_e820ext(nr_e820ext, e820ext, e820ext_size);
+		if (status != EFI_SUCCESS)
+			return status;
+	}
+
+	return EFI_SUCCESS;
+}
+
 struct exit_boot_struct {
 	struct boot_params	*boot_params;
 	struct efi_info		*efi;
-	struct setup_data	*e820ext;
-	__u32			e820ext_size;
 };
 
 static efi_status_t exit_boot_func(efi_system_table_t *sys_table_arg,
 				   struct efi_boot_memmap *map,
 				   void *priv)
 {
-	static bool first = true;
 	const char *signature;
 	__u32 nr_desc;
 	efi_status_t status;
 	struct exit_boot_struct *p = priv;
 
-	if (first) {
-		nr_desc = *map->buff_size / *map->desc_size;
-		if (nr_desc > ARRAY_SIZE(p->boot_params->e820_table)) {
-			u32 nr_e820ext = nr_desc -
-					ARRAY_SIZE(p->boot_params->e820_table);
-
-			status = alloc_e820ext(nr_e820ext, &p->e820ext,
-					       &p->e820ext_size);
-			if (status != EFI_SUCCESS)
-				return status;
-		}
-		first = false;
-	}
-
 	signature = efi_is_64bit() ? EFI64_LOADER_SIGNATURE
 				   : EFI32_LOADER_SIGNATURE;
 	memcpy(&p->efi->efi_loader_signature, signature, sizeof(__u32));
@@ -687,8 +705,8 @@ static efi_status_t exit_boot(struct boot_params *boot_params, void *handle)
 {
 	unsigned long map_sz, key, desc_size, buff_size;
 	efi_memory_desc_t *mem_map;
-	struct setup_data *e820ext;
-	__u32 e820ext_size;
+	struct setup_data *e820ext = NULL;
+	__u32 e820ext_size = 0;
 	efi_status_t status;
 	__u32 desc_version;
 	struct efi_boot_memmap map;
@@ -702,8 +720,10 @@ static efi_status_t exit_boot(struct boot_params *boot_params, void *handle)
 	map.buff_size		= &buff_size;
 	priv.boot_params	= boot_params;
 	priv.efi		= &boot_params->efi_info;
-	priv.e820ext		= NULL;
-	priv.e820ext_size	= 0;
+
+	status = allocate_e820(boot_params, &e820ext, &e820ext_size);
+	if (status != EFI_SUCCESS)
+		return status;
 
 	/* Might as well exit boot services now */
 	status = efi_exit_boot_services(sys_table, handle, &map, &priv,
@@ -711,9 +731,6 @@ static efi_status_t exit_boot(struct boot_params *boot_params, void *handle)
 	if (status != EFI_SUCCESS)
 		return status;
 
-	e820ext			= priv.e820ext;
-	e820ext_size		= priv.e820ext_size;
-
 	/* Historic? */
 	boot_params->alt_mem_k	= 32 * 1024;
 
-- 
2.19.1

