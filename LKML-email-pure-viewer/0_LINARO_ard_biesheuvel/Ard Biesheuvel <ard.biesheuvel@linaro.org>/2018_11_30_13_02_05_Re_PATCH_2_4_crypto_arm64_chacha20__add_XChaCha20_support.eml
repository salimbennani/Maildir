Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:17:46 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga007.fm.intel.com (fmsmga007.fm.intel.com [10.253.24.52])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 24BC5580213;
	Fri, 30 Nov 2018 05:02:24 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by fmsmga007-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 30 Nov 2018 05:02:23 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AaoU4oRSOkiNApL6b4z2BtXmRhdpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64YReDt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZDYy8?=
 =?us-ascii?q?YYkAAeoPM+hbsofzuUcBrQCmBQSuH+7v1iNEi2Xq0aEmz+gsEwfL1xEgEdIUt3?=
 =?us-ascii?q?TUqc34ObsIUe+o0aLF0DTDYO1N2Tf99ofIbw4hru+IXbltdsfe01MvGB7fglqL?=
 =?us-ascii?q?qIzqISiV1uQTvGiG8epvS+avhnUjqwFwpDig3N0sio7TioIS0FDE+jx0zYAoLt?=
 =?us-ascii?q?O2T057ZMSrEJpWtyyCK4R2QtktTH1ouCkg1LEKpYe3fC4Ux5QgwR7TcuCIc4+S?=
 =?us-ascii?q?4h39TuqROix3iXR4c7y8nxa/6VasxvH4W8WuzVpHoDRJnsPRun0OyxDf8MmKR/?=
 =?us-ascii?q?ll8ku/xTqC0xrf5+JELEwuiKbWKp8szqQxm5cSt0nIAzX4l1/sjKCMc0Up4uio?=
 =?us-ascii?q?5PrjYrXhvpKcKYB0hR/kMqg0mcywH/44Mg4QUGif4+i806fj/ULhTLVLiP05jL?=
 =?us-ascii?q?XZvYjEKcgHoqO1GRJZ34g95xqlEjur08gUkWMGIV9HYB6HipLmO1DKIPD2F/e/?=
 =?us-ascii?q?hFGsnS9vx/DHOL3hH5rMImHAkLj/Z7Z97VBTyA4qwdBY6ZNUDK8OIOjoV0/vu9?=
 =?us-ascii?q?zXEAU5Pxa3w+n5EtV90J0RWWaVDq+eKqPSvkeE5vgzLOmUeI8VpDH9JuAh5/7v?=
 =?us-ascii?q?jn82h0URfKa03ZYMbHC4H/JmI1iWYHb2g9cBF3sKsRQ6TODwlFKCVjtTbW6oX6?=
 =?us-ascii?q?0g/jE7FJ6mDYDbS4CtmrOB3Tu7EYdRZmxcClCMDG3nd4OLW/oXbCKSI8lhkiEL?=
 =?us-ascii?q?VLS7So8h0w2uuxH+y7Z9MuXU/SgYv4r51Ndp/+3TiQ0y9TtsAsSf1GGCUXt4nm?=
 =?us-ascii?q?APRz8w2qB/pldwylOC0ah+nvxZGsZf5/JPUgcmK5Hcy/Z2BMz1WgLEZt2JUkqp?=
 =?us-ascii?q?Qs26ATEtSdI828UBY119G9WljRDPxTCqDKUXl7GQAJw086Tc32X+JspnynbG0r?=
 =?us-ascii?q?UhgEciQsdVKWKmgat//RDJB4HVi0WZi7qqdaME0S7O7miDy3CCvEVZUAFqV6XF?=
 =?us-ascii?q?UmsSZk/XrdT/+0PDQKWiCbUhMgtd18GCLrFGZcHujVVDXP3jIsjRY3qtm2esAh?=
 =?us-ascii?q?aF3q6DY5D0e2oDxindCFILkwYI/XmYMwgyASOho2HbDDxqDl/vZ0Ls8e9jqHK0?=
 =?us-ascii?q?VEM0zgeKb1F/2Lqx4BIamfucS/YL1LIepCghsyl0HEq639/OFtWPvRRhc7tGbd?=
 =?us-ascii?q?M9+lhH03nZuBJ7PpG7K6Bih1gecxl4vk/01hV3DJlAntYurH8w0AVyLqeY2ktb?=
 =?us-ascii?q?dzyExZDwJqHXKm7q8RCzaq7W31be0MqW+qYP8vg4t0/vvAazFkom8nVn1dZV3m?=
 =?us-ascii?q?CY5pXLCgoSTJ3wXlw29xh8u7HVfC0965nI2n1rNKm+qiXC1M4xBOs51hageM9S?=
 =?us-ascii?q?P7mAFADsHMwVGcivJPYxlFi0cx0LJuZS9K0zP8O4bPaG3K+rPOB9nDOpl2hH4Y?=
 =?us-ascii?q?Z90l6S+Cp4UOLHw5EFw/SA1AudSzj8lEuhstzwmY1cZTASA3CzxjT+CI9QZq19?=
 =?us-ascii?q?Z4ALCWi1Ls2zx9V+gYPtWnFC+F6iAVMGxNGmeR6IY1Ph2g1Q0FwdoWa7liug0z?=
 =?us-ascii?q?x0jzYpo7KF3CzP3+vtbgAHNXNMRGV4i1fjP5K0j9EDUEe0dQcpkAaq6ljgx6hc?=
 =?us-ascii?q?oqRyNG3TQUZOfyjrIGBuSKqwtryeY8FR7JMkqzlYUOO5YVqCUL7yvwMa0z//H2?=
 =?us-ascii?q?tZ3D06dzCqto/5nhBgk2KdMXBzoWHdecFxwxff+dPdSeRQ3joAWCl3lz3XCkKg?=
 =?us-ascii?q?MNmu+NWej43DvfymV2K9Sp1TdjHmzYGauyuh5m1qAhq/k+qomtL9Egg60i7719?=
 =?us-ascii?q?90WiXOtxv8Zojr16KnMeNoZEVoBVn869ZkFYF6iIc/mJYQ2X0CjJWP4XUHiXvz?=
 =?us-ascii?q?Mclc2a/mbHsCXzkLz8TX4Ajk3k1uNXaJx4P/VnWAzcptfdi6YmUK2i0j68BGEr?=
 =?us-ascii?q?ub7LtBnSFtuFq3sRrRYeRhnjca0fYu62QVg+ATtAot0yWSGLYSHUZDMCzolhSI?=
 =?us-ascii?q?6c2+rapNaGaud7iwyFRxndS7AL6epQFcXW7zeo0+Ei9o8sV/LFXM3WX26oHle9?=
 =?us-ascii?q?nfd8gftxOKnBfbk+haNogxmeEUiip9NmLwpnkly+89jRxz0pC2pomHK2Nx/K2n?=
 =?us-ascii?q?Bh5ULCH6Z8QW+jv1l6ZRgt6W35yzHpVmAjgLQJzoTfeyHDMTr/vnMRuOECYnqn?=
 =?us-ascii?q?eaArffGQ6f6EF7r3PACZyrNneXJGUHwtVmXhWSOEtfgAUMVjUggpE5DhyqxNDm?=
 =?us-ascii?q?cEph/T8e/Fn4qh9Ryu5yMxn/T3zSpAOpajcyVZieIwBa7gBE50fJL8Oe6vh/ED?=
 =?us-ascii?q?1f/p2ktAaNMHCUZxxUDWEVXUyJH1LjMaOr5dbe6OiUHPa+I+HNYbWTquxeSvGI?=
 =?us-ascii?q?yoi00oZ9+zaMN8OPPmRtDvEh20pDW2x5FNrdmzkVVyMXkCfNZdaBpBig4i13st?=
 =?us-ascii?q?y/8PPzVQPv4ouPFqJSMch19BCwm6uDLOmQhCB2KTtD0pMMxHnIyKUQ3VIIiiFu?=
 =?us-ascii?q?cSWtHqoEtSLXUK3QnapXBQYBayxvLMtI87483g5VNM7blNz11714jv00C1tfVl?=
 =?us-ascii?q?zhgMapZcMULGGnKVPHH12GNLCHJT3N3sH2brmwSbxWjOVIqRKwvSyXHFPkPjSG?=
 =?us-ascii?q?jzPpTQygMflQjCGHOxxToJuycgt2Bmj5Ut3nage3MNt2jTAtxb00h3XKNXMTMD?=
 =?us-ascii?q?RmckNNqKGQ4j1cgvllB2NB6X9lJ/GemymF9+nYNooWsfxzDyRoluJa5W42xKdP?=
 =?us-ascii?q?4C5YRPx6hi3So8Vqo1GnlOmP1zVmXABPqjZNmIKEo0FiNb/F+ZlHXHbO5AgN4n?=
 =?us-ascii?q?mICxQWu9tlDcXiuqBKxdjJkaLzKTFC/MrV/MscHcfULs2HPWElMRroHj7UEQQE?=
 =?us-ascii?q?QSSqNWHZm0xSjvWS+meJoZg9r5i/0KYJH5JBVVd9PPIVBUl/B5RWLZ12UTwpi6?=
 =?us-ascii?q?Wzj8MS43e66h7LS5MJkIrAU6e7G/mnAjeUlrlJegUFxfusJJ4fcIf61ldiZ0Rk?=
 =?us-ascii?q?kYDiH0vWVMpK5Cp7YVln8w127HFiQzhriAreYQS37SpWTKbskw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAAD0MwFch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgmmBAieDeYgYjAiCDRSXNIEkA08pAxABh3UiNAkNAQMBAQEBAQE?=
 =?us-ascii?q?CARMBAQEIDQkIKSMMgjYkAYJhAQEBAQMBAiAEGQEBNwEFCQEBCgsDBwMCAiYCA?=
 =?us-ascii?q?gMfEgEFARwGEwWDHAGCAQWbFTyKHXB8M4J2AQEFhygIEnmJToEkHoFXP4ERgxK?=
 =?us-ascii?q?IBYJXix2VFgcCgh4EjxUYgVuFEIo0gnmNaYdpMIElbIEhfXQGgjUJghIJAxeII?=
 =?us-ascii?q?T2FQD4zgQUBAY4bAQE?=
X-IPAS-Result: =?us-ascii?q?A0ANAAD0MwFch0O0hNFjHAEBAQQBAQcEAQGBUQcBAQsBgmm?=
 =?us-ascii?q?BAieDeYgYjAiCDRSXNIEkA08pAxABh3UiNAkNAQMBAQEBAQECARMBAQEIDQkIK?=
 =?us-ascii?q?SMMgjYkAYJhAQEBAQMBAiAEGQEBNwEFCQEBCgsDBwMCAiYCAgMfEgEFARwGEwW?=
 =?us-ascii?q?DHAGCAQWbFTyKHXB8M4J2AQEFhygIEnmJToEkHoFXP4ERgxKIBYJXix2VFgcCg?=
 =?us-ascii?q?h4EjxUYgVuFEIo0gnmNaYdpMIElbIEhfXQGgjUJghIJAxeIIT2FQD4zgQUBAY4?=
 =?us-ascii?q?bAQE?=
X-IronPort-AV: E=Sophos;i="5.56,298,1539673200"; 
   d="scan'208";a="140250725"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 30 Nov 2018 05:02:22 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726848AbeLAALd (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 30 Nov 2018 19:11:33 -0500
Received: from mail-io1-f66.google.com ([209.85.166.66]:46694 "EHLO
        mail-io1-f66.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726340AbeLAALc (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 30 Nov 2018 19:11:32 -0500
Received: by mail-io1-f66.google.com with SMTP id v10so4406501ios.13
        for <linux-kernel@vger.kernel.org>; Fri, 30 Nov 2018 05:02:17 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=316GarZrE48fTWC2o3KKVf8ffb1bhJGHRl5+FXEI3Fk=;
        b=F+0XGl/RBYzvZ1YbpLioD7HNEODvZbFU1ydA9d/Los2sXu2IGWaYqf6LidGlRuyDiH
         NEZQV9LZlnLufQdIaMg6lVj0Y6M2RYxabf6sx3lC2BdUHT+UjDpuotd545Y9OaxELpQ3
         tSbXzDsUZzO6lAbitQgxr9DVmg3xeq3hCdxe8=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=316GarZrE48fTWC2o3KKVf8ffb1bhJGHRl5+FXEI3Fk=;
        b=ig5yEXWwHqLzacefLvKCxmWk4xcfnRGRCagHm3MbA0FB2t4dWOAOT86Smc3KhOx3Nl
         ln3irS9afR2ezHIw9NmoEVdK36FrxwfAONvA8rJKxSrJXx9IjMeE14rwiecJGSMN/GB2
         F+YrUHseOmUi2tJwkhN6aczlvnmpnSsavWaneXcHF6KOEIMj88k1PCnTnKG/yy29a0CK
         L1P4JYhu2dB6ZrctQhu7KjUYP8uvRmhPa8icNRNWB1wWR3ukp3h+0J10/6YwnBbYGlyq
         KYgmnUs7X30AmXrXuvYPBwlpkl9I/QAJ+HTaNTLvrVHbxpqYAilP8ZwrwaqmrtYjaMWl
         UqmA==
X-Gm-Message-State: AA+aEWbDTNE6ywZjpEHPQqCUwKbYbpMp1OhA0n34DGZTeFfA4exiy9l3
        06X3RlX25+TkihxJRl5T52Fbl0//6t4liFQiL+XOZg==
X-Google-Smtp-Source: AFSGD/WR+vzzc7n+Ta1aenfHMfsxcSZiH7L1GB/CDHECllpT3UQZUWaImj/t2RriJqQ2UtVJQ6m+YoU4Qt4JcGQBE3k=
X-Received: by 2002:a6b:7a46:: with SMTP id k6mr4845504iop.60.1543582937305;
 Fri, 30 Nov 2018 05:02:17 -0800 (PST)
MIME-Version: 1.0
References: <20181129063422.24307-1-ebiggers@kernel.org> <20181129063422.24307-3-ebiggers@kernel.org>
In-Reply-To: <20181129063422.24307-3-ebiggers@kernel.org>
From: Ard Biesheuvel <ard.biesheuvel@linaro.org>
Date: Fri, 30 Nov 2018 14:02:05 +0100
Message-ID: <CAKv+Gu_NqwJV4JTaTS3WR-ex2gGaO_Ji2T+W6T6UKa8UQvvuyw@mail.gmail.com>
Subject: Re: [PATCH 2/4] crypto: arm64/chacha20 - add XChaCha20 support
To: Eric Biggers <ebiggers@kernel.org>
Cc: "open list:HARDWARE RANDOM NUMBER GENERATOR CORE" 
        <linux-crypto@vger.kernel.org>,
        Paul Crowley <paulcrowley@google.com>,
        "Jason A. Donenfeld" <Jason@zx2c4.com>,
        linux-arm-kernel <linux-arm-kernel@lists.infradead.org>,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Thu, 29 Nov 2018 at 07:35, Eric Biggers <ebiggers@kernel.org> wrote:
>
> From: Eric Biggers <ebiggers@google.com>
>
> Add an XChaCha20 implementation that is hooked up to the ARM64 NEON
> implementation of ChaCha20.  This can be used by Adiantum.
>
> A NEON implementation of single-block HChaCha20 is also added so that
> XChaCha20 can use it rather than the generic implementation.  This
> required refactoring the ChaCha permutation into its own function.
>
> Signed-off-by: Eric Biggers <ebiggers@google.com>
> ---
>  arch/arm64/crypto/Kconfig              |   2 +-
>  arch/arm64/crypto/chacha20-neon-core.S |  62 ++++++++++-----
>  arch/arm64/crypto/chacha20-neon-glue.c | 101 +++++++++++++++++++------
>  3 files changed, 121 insertions(+), 44 deletions(-)
>
> diff --git a/arch/arm64/crypto/Kconfig b/arch/arm64/crypto/Kconfig
> index 3f5aeb786192b..d54ddb8468ef5 100644
> --- a/arch/arm64/crypto/Kconfig
> +++ b/arch/arm64/crypto/Kconfig
> @@ -101,7 +101,7 @@ config CRYPTO_AES_ARM64_NEON_BLK
>         select CRYPTO_SIMD
>
>  config CRYPTO_CHACHA20_NEON
> -       tristate "NEON accelerated ChaCha20 symmetric cipher"
> +       tristate "ChaCha20 and XChaCha20 stream ciphers using NEON instructions"
>         depends on KERNEL_MODE_NEON
>         select CRYPTO_BLKCIPHER
>         select CRYPTO_CHACHA20
> diff --git a/arch/arm64/crypto/chacha20-neon-core.S b/arch/arm64/crypto/chacha20-neon-core.S
> index 13c85e272c2a1..378850505c0ae 100644
> --- a/arch/arm64/crypto/chacha20-neon-core.S
> +++ b/arch/arm64/crypto/chacha20-neon-core.S
> @@ -23,25 +23,20 @@
>         .text
>         .align          6
>
> -ENTRY(chacha20_block_xor_neon)
> -       // x0: Input state matrix, s
> -       // x1: 1 data block output, o
> -       // x2: 1 data block input, i
> -
> -       //
> -       // This function encrypts one ChaCha20 block by loading the state matrix
> -       // in four NEON registers. It performs matrix operation on four words in
> -       // parallel, but requires shuffling to rearrange the words after each
> -       // round.
> -       //
> -
> -       // x0..3 = s0..3
> -       adr             x3, ROT8
> -       ld1             {v0.4s-v3.4s}, [x0]
> -       ld1             {v8.4s-v11.4s}, [x0]
> -       ld1             {v12.4s}, [x3]
> +/*
> + * chacha20_permute - permute one block
> + *
> + * Permute one 64-byte block where the state matrix is stored in the four NEON
> + * registers v0-v3.  It performs matrix operations on four words in parallel,
> + * but requires shuffling to rearrange the words after each round.
> + *
> + * Clobbers: x3, x10, v4, v12
> + */
> +chacha20_permute:
>
>         mov             x3, #10
> +       adr             x10, ROT8
> +       ld1             {v12.4s}, [x10]
>
>  .Ldoubleround:
>         // x0 += x1, x3 = rotl32(x3 ^ x0, 16)
> @@ -105,6 +100,22 @@ ENTRY(chacha20_block_xor_neon)
>         subs            x3, x3, #1
>         b.ne            .Ldoubleround
>
> +       ret
> +ENDPROC(chacha20_permute)
> +
> +ENTRY(chacha20_block_xor_neon)
> +       // x0: Input state matrix, s
> +       // x1: 1 data block output, o
> +       // x2: 1 data block input, i
> +
> +       mov             x9, lr

please use x30 not lr. The latter is not supported by all assemblers

Also, I'd prefer it if we could create a full stack frame here, i.e.,

stp x29, x30, [sp, #-16]!
mov x29, sp

(same for the other caller)

Otherwise, this will look like a tail call to the unwinder,
potentially creating problems with features that need reliable
backtraces, such as livepatch.

> +
> +       // x0..3 = s0..3
> +       ld1             {v0.4s-v3.4s}, [x0]
> +       ld1             {v8.4s-v11.4s}, [x0]
> +
> +       bl              chacha20_permute
> +
>         ld1             {v4.16b-v7.16b}, [x2]
>
>         // o0 = i0 ^ (x0 + s0)
> @@ -125,9 +136,24 @@ ENTRY(chacha20_block_xor_neon)
>
>         st1             {v0.16b-v3.16b}, [x1]
>
> -       ret
> +       ret             x9
>  ENDPROC(chacha20_block_xor_neon)
>
> +ENTRY(hchacha20_block_neon)
> +       // x0: Input state matrix, s
> +       // x1: output (8 32-bit words)
> +       mov             x9, lr
> +
> +       ld1             {v0.4s-v3.4s}, [x0]
> +
> +       bl              chacha20_permute
> +
> +       st1             {v0.16b}, [x1], #16
> +       st1             {v3.16b}, [x1]
> +
> +       ret             x9
> +ENDPROC(hchacha20_block_neon)
> +
>         .align          6
>  ENTRY(chacha20_4block_xor_neon)
>         // x0: Input state matrix, s
> diff --git a/arch/arm64/crypto/chacha20-neon-glue.c b/arch/arm64/crypto/chacha20-neon-glue.c
> index 96e0cfb8c3f5b..a5b9cbc0c4de4 100644
> --- a/arch/arm64/crypto/chacha20-neon-glue.c
> +++ b/arch/arm64/crypto/chacha20-neon-glue.c
> @@ -30,6 +30,7 @@
>
>  asmlinkage void chacha20_block_xor_neon(u32 *state, u8 *dst, const u8 *src);
>  asmlinkage void chacha20_4block_xor_neon(u32 *state, u8 *dst, const u8 *src);
> +asmlinkage void hchacha20_block_neon(const u32 *state, u32 *out);
>
>  static void chacha20_doneon(u32 *state, u8 *dst, const u8 *src,
>                             unsigned int bytes)
> @@ -65,20 +66,16 @@ static void chacha20_doneon(u32 *state, u8 *dst, const u8 *src,
>         kernel_neon_end();
>  }
>
> -static int chacha20_neon(struct skcipher_request *req)
> +static int chacha20_neon_stream_xor(struct skcipher_request *req,
> +                                   struct chacha_ctx *ctx, u8 *iv)
>  {
> -       struct crypto_skcipher *tfm = crypto_skcipher_reqtfm(req);
> -       struct chacha_ctx *ctx = crypto_skcipher_ctx(tfm);
>         struct skcipher_walk walk;
>         u32 state[16];
>         int err;
>
> -       if (!may_use_simd() || req->cryptlen <= CHACHA_BLOCK_SIZE)
> -               return crypto_chacha_crypt(req);
> -
>         err = skcipher_walk_virt(&walk, req, false);
>
> -       crypto_chacha_init(state, ctx, walk.iv);
> +       crypto_chacha_init(state, ctx, iv);
>
>         while (walk.nbytes > 0) {
>                 unsigned int nbytes = walk.nbytes;
> @@ -94,22 +91,73 @@ static int chacha20_neon(struct skcipher_request *req)
>         return err;
>  }
>
> -static struct skcipher_alg alg = {
> -       .base.cra_name          = "chacha20",
> -       .base.cra_driver_name   = "chacha20-neon",
> -       .base.cra_priority      = 300,
> -       .base.cra_blocksize     = 1,
> -       .base.cra_ctxsize       = sizeof(struct chacha_ctx),
> -       .base.cra_module        = THIS_MODULE,
> -
> -       .min_keysize            = CHACHA_KEY_SIZE,
> -       .max_keysize            = CHACHA_KEY_SIZE,
> -       .ivsize                 = CHACHA_IV_SIZE,
> -       .chunksize              = CHACHA_BLOCK_SIZE,
> -       .walksize               = 4 * CHACHA_BLOCK_SIZE,
> -       .setkey                 = crypto_chacha20_setkey,
> -       .encrypt                = chacha20_neon,
> -       .decrypt                = chacha20_neon,
> +static int chacha20_neon(struct skcipher_request *req)
> +{
> +       struct crypto_skcipher *tfm = crypto_skcipher_reqtfm(req);
> +       struct chacha_ctx *ctx = crypto_skcipher_ctx(tfm);
> +
> +       if (req->cryptlen <= CHACHA_BLOCK_SIZE || !may_use_simd())
> +               return crypto_chacha_crypt(req);
> +
> +       return chacha20_neon_stream_xor(req, ctx, req->iv);
> +}
> +
> +static int xchacha20_neon(struct skcipher_request *req)
> +{
> +       struct crypto_skcipher *tfm = crypto_skcipher_reqtfm(req);
> +       struct chacha_ctx *ctx = crypto_skcipher_ctx(tfm);
> +       struct chacha_ctx subctx;
> +       u32 state[16];
> +       u8 real_iv[16];
> +
> +       if (req->cryptlen <= CHACHA_BLOCK_SIZE || !may_use_simd())
> +               return crypto_xchacha_crypt(req);
> +
> +       crypto_chacha_init(state, ctx, req->iv);
> +
> +       kernel_neon_begin();
> +       hchacha20_block_neon(state, subctx.key);
> +       kernel_neon_end();
> +
> +       memcpy(&real_iv[0], req->iv + 24, 8);
> +       memcpy(&real_iv[8], req->iv + 16, 8);
> +       return chacha20_neon_stream_xor(req, &subctx, real_iv);
> +}
> +
> +static struct skcipher_alg algs[] = {
> +       {
> +               .base.cra_name          = "chacha20",
> +               .base.cra_driver_name   = "chacha20-neon",
> +               .base.cra_priority      = 300,
> +               .base.cra_blocksize     = 1,
> +               .base.cra_ctxsize       = sizeof(struct chacha_ctx),
> +               .base.cra_module        = THIS_MODULE,
> +
> +               .min_keysize            = CHACHA_KEY_SIZE,
> +               .max_keysize            = CHACHA_KEY_SIZE,
> +               .ivsize                 = CHACHA_IV_SIZE,
> +               .chunksize              = CHACHA_BLOCK_SIZE,
> +               .walksize               = 4 * CHACHA_BLOCK_SIZE,
> +               .setkey                 = crypto_chacha20_setkey,
> +               .encrypt                = chacha20_neon,
> +               .decrypt                = chacha20_neon,
> +       }, {
> +               .base.cra_name          = "xchacha20",
> +               .base.cra_driver_name   = "xchacha20-neon",
> +               .base.cra_priority      = 300,
> +               .base.cra_blocksize     = 1,
> +               .base.cra_ctxsize       = sizeof(struct chacha_ctx),
> +               .base.cra_module        = THIS_MODULE,
> +
> +               .min_keysize            = CHACHA_KEY_SIZE,
> +               .max_keysize            = CHACHA_KEY_SIZE,
> +               .ivsize                 = XCHACHA_IV_SIZE,
> +               .chunksize              = CHACHA_BLOCK_SIZE,
> +               .walksize               = 4 * CHACHA_BLOCK_SIZE,
> +               .setkey                 = crypto_chacha20_setkey,
> +               .encrypt                = xchacha20_neon,
> +               .decrypt                = xchacha20_neon,
> +       }
>  };
>
>  static int __init chacha20_simd_mod_init(void)
> @@ -117,12 +165,12 @@ static int __init chacha20_simd_mod_init(void)
>         if (!(elf_hwcap & HWCAP_ASIMD))
>                 return -ENODEV;
>
> -       return crypto_register_skcipher(&alg);
> +       return crypto_register_skciphers(algs, ARRAY_SIZE(algs));
>  }
>
>  static void __exit chacha20_simd_mod_fini(void)
>  {
> -       crypto_unregister_skcipher(&alg);
> +       crypto_unregister_skciphers(algs, ARRAY_SIZE(algs));
>  }
>
>  module_init(chacha20_simd_mod_init);
> @@ -131,3 +179,6 @@ module_exit(chacha20_simd_mod_fini);
>  MODULE_AUTHOR("Ard Biesheuvel <ard.biesheuvel@linaro.org>");
>  MODULE_LICENSE("GPL v2");
>  MODULE_ALIAS_CRYPTO("chacha20");
> +MODULE_ALIAS_CRYPTO("chacha20-neon");
> +MODULE_ALIAS_CRYPTO("xchacha20");
> +MODULE_ALIAS_CRYPTO("xchacha20-neon");
> --
> 2.19.2
>
