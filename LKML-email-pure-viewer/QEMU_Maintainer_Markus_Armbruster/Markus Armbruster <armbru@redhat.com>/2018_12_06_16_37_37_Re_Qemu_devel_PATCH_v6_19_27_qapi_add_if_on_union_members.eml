Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:50:20 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 8167558042F
	for <like.xu@linux.intel.com>; Thu,  6 Dec 2018 08:38:15 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by fmsmga004-1.fm.intel.com with ESMTP; 06 Dec 2018 08:38:15 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AtU3r2RbRoTx/E5wrk4Gm1Rj/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpsy4bR7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyxPDJ2y?=
 =?us-ascii?q?b4UBDeUPPuhXoIbhqFUBsBW+HQuhCuHgxzNViHL6wbM10/86HAHaxQwtBc4CvG?=
 =?us-ascii?q?jOodj3MqoZTOC7zLPPzTXGd/5Y3i3y6JLLchA8uvGHQK59cdDUyUY0DQPFk06Q?=
 =?us-ascii?q?qZD7MDOPy+8AtHKU7/BlVe20kW4nthp8oiKxycgxionGnJ4VxkrY+iV+xYY4PN?=
 =?us-ascii?q?u1Q1N1b96jFZtfrSCaN41uT8M+Q2BooDg1xqcAuZGheSgF1pIqzAPcZfyfa4WE?=
 =?us-ascii?q?/A7vWeWLLTtlmX5oe6iziwi8/EWg0OHwS8u53E5UoiZZltTArG0B2hLN5sSdV/?=
 =?us-ascii?q?dw/Ums1SyR2w3Q7OxPPFo6mrDBK5E7x749jpoTvlrHHi/xgEj2iK6Wdl44+uiz?=
 =?us-ascii?q?8ejnbbPmpoKGO49zkAH+Pbwims25AesmLggDR3aX9fi/2bH54EH1XbZHguconq?=
 =?us-ascii?q?TXsJ3WP9kXq6yhDw9QyIkj6hK/Dzm80NQfmHkKNEtFdwyCj4j0Il3BPe73Demh?=
 =?us-ascii?q?jFSoiTtk3PfGPqDnAprRMHfDi7DtfbJ8605f1gU/199e549MB7EFIfLzXFLxtd?=
 =?us-ascii?q?PCAh84NQy03/joCNFn2owCXmKPB7SUMKXVsV+O6eIvJfSMaJUSuDbnJPgp/+Tu?=
 =?us-ascii?q?gmMhmV8BYamp2oMaaHS5HvRlPUqVe3XtgsoaHGcOvwo+SvHqiVKYXT5SYXayQ7?=
 =?us-ascii?q?wz5jUhBI26CofDQ9PlvbqawS3uHoFKfnsUTReIEGz0bMOCXPEDbj/UJdVu1TkN?=
 =?us-ascii?q?VLykQolm0gmytQj80P1+I+/JvyEVq5/nh+Vz/PDZwBQ79DhoCJaE3mSQCm15gG?=
 =?us-ascii?q?4MAiU7xb1yulBVzFCF3q5lxftCGotI+vlLXwwmYIPa1PFwENvoWwjMLeuOHXOv?=
 =?us-ascii?q?WN7jKDc9VFN558IUbk9gU4GnhwrI1iymGbJTk6GRCZUp2rjR03j4O4B2zHOQh4?=
 =?us-ascii?q?c7iFxzZ8JVNnC9zodl8gLJGpXVnl/Rw6+wcK4GwQbX+WuDxHbIt0ZdBl0jGZ7Z?=
 =?us-ascii?q?VGwSMxOF5e/y4VnPGvr3Uewq?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AtAADZTwlcmBHrdtBjHgEGBwaBUwcLA?=
 =?us-ascii?q?YEwgTmBFhODeoh4iy+CDYkgji6BcxQYAxGEQIMXIjYHDQEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BAQEICwsGGw4jDII2BQIDGgEGglwBAgIBAQIgBB8KKQMCAQECBgEBChoCBR0EA?=
 =?us-ascii?q?gIDAQsBBBgxEwWDHAGBdAUIAQSmDnwziiiBC4cqg2oXgX+BEYMShQGDBIJXAo8?=
 =?us-ascii?q?3kSgJhwSKQhiCKYc5h1SREod6gU0BggVwFTuCbAmKUIEUhG9AMYEHHIgngXcBA?=
 =?us-ascii?q?Q?=
X-IPAS-Result: =?us-ascii?q?A0AtAADZTwlcmBHrdtBjHgEGBwaBUwcLAYEwgTmBFhODeoh?=
 =?us-ascii?q?4iy+CDYkgji6BcxQYAxGEQIMXIjYHDQEDAQEBAQEBAgETAQEBAQEICwsGGw4jD?=
 =?us-ascii?q?II2BQIDGgEGglwBAgIBAQIgBB8KKQMCAQECBgEBChoCBR0EAgIDAQsBBBgxEwW?=
 =?us-ascii?q?DHAGBdAUIAQSmDnwziiiBC4cqg2oXgX+BEYMShQGDBIJXAo83kSgJhwSKQhiCK?=
 =?us-ascii?q?Yc5h1SREod6gU0BggVwFTuCbAmKUIEUhG9AMYEHHIgngXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,323,1539673200"; 
   d="scan'208";a="56390455"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 06 Dec 2018 08:38:14 -0800
Received: from localhost ([::1]:41861 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gUwfF-0004Dy-Ir
	for like.xu@linux.intel.com; Thu, 06 Dec 2018 11:38:13 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:44672)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <armbru@redhat.com>) id 1gUwew-0003qO-27
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 11:37:58 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <armbru@redhat.com>) id 1gUwes-0006Pn-2f
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 11:37:54 -0500
Received: from mx1.redhat.com ([209.132.183.28]:49476)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <armbru@redhat.com>) id 1gUweq-0006Et-1W
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 11:37:49 -0500
Received: from smtp.corp.redhat.com (int-mx01.intmail.prod.int.phx2.redhat.com
	[10.5.11.11])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 4AF1688E65
	for <qemu-devel@nongnu.org>; Thu,  6 Dec 2018 16:37:41 +0000 (UTC)
Received: from blackfin.pond.sub.org (ovpn-116-56.ams2.redhat.com
	[10.36.116.56])
	by smtp.corp.redhat.com (Postfix) with ESMTPS id 9745087AE;
	Thu,  6 Dec 2018 16:37:38 +0000 (UTC)
Received: by blackfin.pond.sub.org (Postfix, from userid 1000)
	id 2B15E113860E; Thu,  6 Dec 2018 17:37:37 +0100 (CET)
From: Markus Armbruster <armbru@redhat.com>
To: =?utf-8?Q?Marc-Andr=C3=A9?= Lureau <marcandre.lureau@redhat.com>
References: <20180706105753.26700-1-marcandre.lureau@redhat.com>
	<20180706105753.26700-20-marcandre.lureau@redhat.com>
Date: Thu, 06 Dec 2018 17:37:37 +0100
In-Reply-To: <20180706105753.26700-20-marcandre.lureau@redhat.com>
	(=?utf-8?Q?=22Marc-Andr=C3=A9?= Lureau"'s message of "Fri, 6 Jul 2018
	12:57:45 +0200")
Message-ID: <87efaua9wu.fsf@dusky.pond.sub.org>
User-Agent: Gnus/5.13 (Gnus v5.13) Emacs/26.1 (gnu/linux)
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.11
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.25]);
	Thu, 06 Dec 2018 16:37:41 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH v6 19/27] qapi: add 'if' on union members
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: qemu-devel@nongnu.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

In the subject, s/ on / to /.

Marc-Andr=C3=A9 Lureau <marcandre.lureau@redhat.com> writes:

> Add 'if' key to union members:
>
> { 'union': 'TestIfUnion', 'data':
>     'mem': { 'type': 'str', 'if': 'COND'} }
>
> Generated code is not changed by this patch but with "qapi: add #if
> conditions to generated code".

My suggestion on PATCH 13's commit message applies.

> Signed-off-by: Marc-Andr=C3=A9 Lureau <marcandre.lureau@redhat.com>
> ---
>  scripts/qapi/common.py                  | 17 +++++++++--------
>  tests/qapi-schema/qapi-schema-test.json |  7 ++++++-
>  tests/qapi-schema/qapi-schema-test.out  | 10 ++++++++++
>  tests/qapi-schema/test-qapi.py          |  1 +
>  4 files changed, 26 insertions(+), 9 deletions(-)
>
> diff --git a/scripts/qapi/common.py b/scripts/qapi/common.py
> index 13fbb28493..e1bd9a22ba 100644
> --- a/scripts/qapi/common.py
> +++ b/scripts/qapi/common.py
> @@ -813,7 +813,7 @@ def check_union(expr, info):
>      for (key, value) in members.items():
>          check_name(info, "Member of union '%s'" % name, key)
>          source =3D "member '%s' of union '%s'" % (key, name)
> -        check_known_keys(info, source, value, ['type'], [])
> +        check_known_keys(info, source, value, ['type'], ['if'])
>          typ =3D value['type']
>=20=20
>          # Each value must name a known type
> @@ -1496,8 +1496,8 @@ class QAPISchemaObjectTypeVariants(object):
>  class QAPISchemaObjectTypeVariant(QAPISchemaObjectTypeMember):
>      role =3D 'branch'
>=20=20
> -    def __init__(self, name, typ):
> -        QAPISchemaObjectTypeMember.__init__(self, name, typ, False)
> +    def __init__(self, name, typ, ifcond=3DNone):
> +        QAPISchemaObjectTypeMember.__init__(self, name, typ, False, ifco=
nd)
>=20=20
>=20=20
>  class QAPISchemaAlternateType(QAPISchemaType):
> @@ -1777,14 +1777,14 @@ class QAPISchema(object):
>      def _make_variant(self, case, typ):
>          return QAPISchemaObjectTypeVariant(case, typ)
>=20=20
> -    def _make_simple_variant(self, case, typ, info):
> +    def _make_simple_variant(self, case, typ, ifcond, info):
>          if isinstance(typ, list):
>              assert len(typ) =3D=3D 1
>              typ =3D self._make_array_type(typ[0], info)
>          typ =3D self._make_implicit_object_type(
>              typ, info, None, self.lookup_type(typ),
>              'wrapper', [self._make_member('data', typ, None, info)])
> -        return QAPISchemaObjectTypeVariant(case, typ)
> +        return QAPISchemaObjectTypeVariant(case, typ, ifcond)
>=20=20
>      def _def_union_type(self, expr, info, doc):
>          name =3D expr['union']
> @@ -1802,10 +1802,11 @@ class QAPISchema(object):
>                          for (key, value) in data.items()]
>              members =3D []
>          else:
> -            variants =3D [self._make_simple_variant(key, value['type'], =
info)
> +            variants =3D [self._make_simple_variant(key, value['type'],
> +                                                  value.get('if'), info)
>                          for (key, value) in data.items()]
> -            typ =3D self._make_implicit_enum_type(name, info, ifcond,
> -                                                [v.name for v in variant=
s])
> +            enum =3D [{'name': v.name, 'if': v.ifcond} for v in variants]
> +            typ =3D self._make_implicit_enum_type(name, info, ifcond, en=
um)
>              tag_member =3D QAPISchemaObjectTypeMember('type', typ, False)
>              members =3D [tag_member]
>          self._def_entity(
> diff --git a/tests/qapi-schema/qapi-schema-test.json b/tests/qapi-schema/=
qapi-schema-test.json
> index 3bf440aab4..6d3c6c0b53 100644
> --- a/tests/qapi-schema/qapi-schema-test.json
> +++ b/tests/qapi-schema/qapi-schema-test.json
> @@ -208,9 +208,14 @@
>    [ 'foo', { 'name' : 'bar', 'if': 'defined(TEST_IF_ENUM_BAR)' } ],
>    'if': 'defined(TEST_IF_ENUM)' }
>=20=20
> -{ 'union': 'TestIfUnion', 'data': { 'foo': 'TestStruct' },
> +{ 'union': 'TestIfUnion', 'data':
> +  { 'foo': 'TestStruct',
> +    'union_bar': { 'type': 'str', 'if': 'defined(TEST_IF_UNION_BAR)'} },

"Union Bar" sounds like a cocktail lounge in northeast US :)

Back to serious: this is a simple union.  I'd prefer to test flat
unions.  Changing TestIfUnion accordingly could be done either before
this patch, or on top of this series, the latter not necessarily by
you.  Your choice.

>    'if': 'defined(TEST_IF_UNION) && defined(TEST_IF_STRUCT)' }
>=20=20
> +{ 'command': 'TestIfUnionCmd', 'data': { 'union_cmd_arg': 'TestIfUnion' =
},
> +  'if': 'defined(TEST_IF_UNION)' }
> +

I'm feeling dense... why does this change belong to this patch?

>  { 'alternate': 'TestIfAlternate', 'data': { 'foo': 'int', 'bar': 'TestSt=
ruct' },
>    'if': 'defined(TEST_IF_ALT) && defined(TEST_IF_STRUCT)' }
>=20=20
> diff --git a/tests/qapi-schema/qapi-schema-test.out b/tests/qapi-schema/q=
api-schema-test.out
> index 71b84878c7..ac1069cf1f 100644
> --- a/tests/qapi-schema/qapi-schema-test.out
> +++ b/tests/qapi-schema/qapi-schema-test.out
> @@ -278,12 +278,22 @@ object q_obj_TestStruct-wrapper
>      member data: TestStruct optional=3DFalse
>  enum TestIfUnionKind
>      member foo
> +    member union_bar
> +        if ['defined(TEST_IF_UNION_BAR)']
>      if ['defined(TEST_IF_UNION) && defined(TEST_IF_STRUCT)']
>  object TestIfUnion
>      member type: TestIfUnionKind optional=3DFalse
>      tag type
>      case foo: q_obj_TestStruct-wrapper
> +    case union_bar: q_obj_str-wrapper
> +        if ['defined(TEST_IF_UNION_BAR)']
>      if ['defined(TEST_IF_UNION) && defined(TEST_IF_STRUCT)']
> +object q_obj_TestIfUnionCmd-arg
> +    member union_cmd_arg: TestIfUnion optional=3DFalse
> +    if ['defined(TEST_IF_UNION)']
> +command TestIfUnionCmd q_obj_TestIfUnionCmd-arg -> None
> +   gen=3DTrue success_response=3DTrue boxed=3DFalse oob=3DFalse preconfi=
g=3DFalse
> +    if ['defined(TEST_IF_UNION)']
>  alternate TestIfAlternate
>      tag type
>      case foo: int
> diff --git a/tests/qapi-schema/test-qapi.py b/tests/qapi-schema/test-qapi=
.py
> index 69e40d87d2..d977e936c7 100644
> --- a/tests/qapi-schema/test-qapi.py
> +++ b/tests/qapi-schema/test-qapi.py
> @@ -68,6 +68,7 @@ class QAPISchemaTestVisitor(QAPISchemaVisitor):
>              print('    tag %s' % variants.tag_member.name)
>              for v in variants.variants:
>                  print('    case %s: %s' % (v.name, v.type.name))
> +                QAPISchemaTestVisitor._print_if(v.ifcond, 8)
>=20=20
>      @staticmethod
>      def _print_if(ifcond, indent=3D4):

