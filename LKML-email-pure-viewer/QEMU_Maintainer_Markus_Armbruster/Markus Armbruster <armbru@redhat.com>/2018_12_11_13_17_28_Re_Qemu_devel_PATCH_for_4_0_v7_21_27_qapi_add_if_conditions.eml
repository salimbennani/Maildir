Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 12 Dec 2018 08:46:16 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 6D5FA580380
	for <like.xu@linux.intel.com>; Tue, 11 Dec 2018 05:18:03 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 11 Dec 2018 05:18:03 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AU5UQWBHg4wKPIgIlPc3/bp1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ76p86zbnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJVyJPHI28?=
 =?us-ascii?q?YYUNAOQCM+lXoJXyqVQToxumBwSiBuzixiJGi3Pqw6I6yP8sER3f3AE6A94CrG?=
 =?us-ascii?q?7ZodfzOawPUe611q7IzTDbYv1Rwzj98ovIcg06ofqRQb9wa8/RxlI1FwPYlVWQ?=
 =?us-ascii?q?tZLqPymI3ekKqWeb9e9gWvm1i246sAxxuCagydosiobTmoIZ0EzL9SJ8wIssI9?=
 =?us-ascii?q?CzVUB1YdmhEJRKtiGaMZN7Qt8iQmFwpik20LsGtoS+fCcUzpks2h3Ra+SffoSW?=
 =?us-ascii?q?/h7uV/ydLSpliH9mYr6zmRi//Ei6xuHhVMS4yEhGojZBn9XWq3wA2QLf5tKaRv?=
 =?us-ascii?q?Z+8EqtwyiD2gPV5+pZO047j7DbJIQkwrMolpocr0DDHijulUXyja+WbVkk+vOy?=
 =?us-ascii?q?5+ToZLXmu4WQN4huigHxKqgum8q/DvokMgUWQWSX5eex2Kf+8UHkQ7hGlOM6n6?=
 =?us-ascii?q?fZvZzAOMgWpLa1AwpP3YYi7xa/AS2m0NMdnXQfNVJKZheHj5XwN17TPv/4E+mw?=
 =?us-ascii?q?g1C1nDhwwPDGI7vhDYnTIXjYl7vhebd9601CxwYpwtFf+opZCrUAIPL1R0/wu8?=
 =?us-ascii?q?bUDh4/Mwyo3ennDM9x2Z8ZWWKKGaKZNqTSsVmH5uIpPumAfogVuCzyK/Q9/f7h?=
 =?us-ascii?q?kWc5mUMBfamuxZYXbHG4Hvd4LEmDbnvsn8wMEWMLvgo4Uezrh0eOUT9VZ3auQa?=
 =?us-ascii?q?084is3B56hDYfGFciQhqec1nK7AoFOfTIBTVSNCmvzMYODXfgKdWSVOMAmlzUF?=
 =?us-ascii?q?Ub2oTcgmzQ2vswnhjKNqK/eR9iAGuJaw6d5u+ueGkBgz8SBzXd2Q1nzIQ2xqk2?=
 =?us-ascii?q?dNXTIvwa1kvWR7zVGM17U+hOZXQsdO7fFEWRtvKJjH0uZhAMrzUA+SQtDcbV+8?=
 =?us-ascii?q?SZCPBz0rz5oV3sUDals1T9CrlBvK2SawDvkRiqaGDYEc6K/Q33HtYc16ziCV+r?=
 =?us-ascii?q?MmigwDS9FMKHbur7R6/RLOHJLEiQ3Nnryvf74B9DTA+GeK0SyFu0QOA104arnM?=
 =?us-ascii?q?QX1KPhielt/+/E6XCub2Ubk=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0C6AACvuA9cmBHrdtBlHgEGBwaBVAYLA?=
 =?us-ascii?q?YEwgTmBFhODe4h4izGCDYkhkCQUGAMRhECDLCI3Bg0BAwEBAQEBAQIBEwEBAQE?=
 =?us-ascii?q?BCAsLBhsOIwyCNgUCAxoBBoJcAQICAQECIAQfCikDAgEBAgYBAQoaAgUdBAICA?=
 =?us-ascii?q?wELAQQYMRMFgxwBgXQFCAEEpRd8M4osgQuLMBeBf4QjhQGDBIJXAo8/kGdVCYc?=
 =?us-ascii?q?JikgYgimHPYdaixKGJYd8gVyBeHAVgycJgh4XEogJgRSEb0AxgQcciE6BdwEB?=
X-IPAS-Result: =?us-ascii?q?A0C6AACvuA9cmBHrdtBlHgEGBwaBVAYLAYEwgTmBFhODe4h?=
 =?us-ascii?q?4izGCDYkhkCQUGAMRhECDLCI3Bg0BAwEBAQEBAQIBEwEBAQEBCAsLBhsOIwyCN?=
 =?us-ascii?q?gUCAxoBBoJcAQICAQECIAQfCikDAgEBAgYBAQoaAgUdBAICAwELAQQYMRMFgxw?=
 =?us-ascii?q?BgXQFCAEEpRd8M4osgQuLMBeBf4QjhQGDBIJXAo8/kGdVCYcJikgYgimHPYdai?=
 =?us-ascii?q?xKGJYd8gVyBeHAVgycJgh4XEogJgRSEb0AxgQcciE6BdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,342,1539673200"; 
   d="scan'208";a="55414059"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 11 Dec 2018 05:18:02 -0800
Received: from localhost ([::1]:38114 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gWhvF-0000Wr-5J
	for like.xu@linux.intel.com; Tue, 11 Dec 2018 08:18:01 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:44861)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <armbru@redhat.com>) id 1gWhv3-0000P9-QY
	for qemu-devel@nongnu.org; Tue, 11 Dec 2018 08:17:51 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <armbru@redhat.com>) id 1gWhv0-0007oO-JK
	for qemu-devel@nongnu.org; Tue, 11 Dec 2018 08:17:49 -0500
Received: from mx1.redhat.com ([209.132.183.28]:50448)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <armbru@redhat.com>) id 1gWhv0-0007jK-B6
	for qemu-devel@nongnu.org; Tue, 11 Dec 2018 08:17:46 -0500
Received: from smtp.corp.redhat.com (int-mx08.intmail.prod.int.phx2.redhat.com
	[10.5.11.23])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id EDE6781F12;
	Tue, 11 Dec 2018 13:17:31 +0000 (UTC)
Received: from blackfin.pond.sub.org (ovpn-116-56.ams2.redhat.com
	[10.36.116.56])
	by smtp.corp.redhat.com (Postfix) with ESMTPS id 8BE7B19743;
	Tue, 11 Dec 2018 13:17:29 +0000 (UTC)
Received: by blackfin.pond.sub.org (Postfix, from userid 1000)
	id 19249113860E; Tue, 11 Dec 2018 14:17:28 +0100 (CET)
From: Markus Armbruster <armbru@redhat.com>
To: =?utf-8?Q?Marc-Andr=C3=A9?= Lureau <marcandre.lureau@redhat.com>
References: <20181208111606.8505-1-marcandre.lureau@redhat.com>
	<20181208111606.8505-22-marcandre.lureau@redhat.com>
Date: Tue, 11 Dec 2018 14:17:28 +0100
In-Reply-To: <20181208111606.8505-22-marcandre.lureau@redhat.com>
	(=?utf-8?Q?=22Marc-Andr=C3=A9?=
	Lureau"'s message of "Sat, 8 Dec 2018 15:16:00 +0400")
Message-ID: <87h8fkqk2f.fsf@dusky.pond.sub.org>
User-Agent: Gnus/5.13 (Gnus v5.13) Emacs/26.1 (gnu/linux)
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable
X-Scanned-By: MIMEDefang 2.84 on 10.5.11.23
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.25]);
	Tue, 11 Dec 2018 13:17:32 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH for-4.0 v7 21/27] qapi: add #if conditions
 to generated code members
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: qemu-devel@nongnu.org, Michael Roth <mdroth@linux.vnet.ibm.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Marc-Andr=C3=A9 Lureau <marcandre.lureau@redhat.com> writes:

> Wrap generated enum/struct members and code with #if/#endif, using the
> .ifcond members added in the previous patches.
>
> Some types generate both enum and struct members for example, so a
> step-by-step is unnecessarily complicated to deal with (it would
> easily generate invalid intermediary code).
>
> Signed-off-by: Marc-Andr=C3=A9 Lureau <marcandre.lureau@redhat.com>

We've since agreed to tweak the commit message:

    qapi: Add #if conditions to generated code members

    Wrap generated enum and struct members and their supporting code with
    #if/#endif, using the .ifcond members added in the previous patches.

    We do enum and struct in a single patch because union tag enum and the
    associated variants tie them together, and dealing with that to split
    the patch doesn't seem worthwhile.

> ---
>  scripts/qapi/common.py     |  4 ++++
>  scripts/qapi/introspect.py | 13 +++++++++----
>  scripts/qapi/types.py      |  4 ++++
>  scripts/qapi/visit.py      |  6 ++++++
>  4 files changed, 23 insertions(+), 4 deletions(-)
>
> diff --git a/scripts/qapi/common.py b/scripts/qapi/common.py
> index a70d6dec3b..3a29812ef2 100644
> --- a/scripts/qapi/common.py
> +++ b/scripts/qapi/common.py
> @@ -2108,11 +2108,13 @@ const QEnumLookup %(c_name)s_lookup =3D {
>  ''',
>                  c_name=3Dc_name(name))
>      for m in members:
> +        ret +=3D gen_if(m.ifcond)
>          index =3D c_enum_const(name, m.name, prefix)
>          ret +=3D mcgen('''
>          [%(index)s] =3D "%(name)s",
>  ''',
>                       index=3Dindex, name=3Dm.name)
> +        ret +=3D gen_endif(m.ifcond)
>=20=20
>      ret +=3D mcgen('''
>      },
> @@ -2134,10 +2136,12 @@ typedef enum %(c_name)s {
>                  c_name=3Dc_name(name))
>=20=20
>      for m in enum_members:
> +        ret +=3D gen_if(m.ifcond)
>          ret +=3D mcgen('''
>      %(c_enum)s,
>  ''',
>                       c_enum=3Dc_enum_const(name, m.name, prefix))
> +        ret +=3D gen_endif(m.ifcond)
>=20=20
>      ret +=3D mcgen('''
>  } %(c_name)s;
> diff --git a/scripts/qapi/introspect.py b/scripts/qapi/introspect.py
> index 417625d54b..77087f629b 100644
> --- a/scripts/qapi/introspect.py
> +++ b/scripts/qapi/introspect.py
> @@ -162,6 +162,8 @@ const QLitObject %(c_name)s =3D %(c_string)s;
>          ret =3D {'name': member.name, 'type': self._use_type(member.type=
)}
>          if member.optional:
>              ret['default'] =3D None
> +        if member.ifcond:
> +            ret =3D (ret, {'if': member.ifcond})
>          return ret
>=20=20
>      def _gen_variants(self, tag_name, variants):
> @@ -169,14 +171,16 @@ const QLitObject %(c_name)s =3D %(c_string)s;
>                  'variants': [self._gen_variant(v) for v in variants]}
>=20=20
>      def _gen_variant(self, variant):
> -        return {'case': variant.name, 'type': self._use_type(variant.typ=
e)}
> +        return ({'case': variant.name, 'type': self._use_type(variant.ty=
pe)},
> +                {'if': variant.ifcond})
>=20=20
>      def visit_builtin_type(self, name, info, json_type):
>          self._gen_qlit(name, 'builtin', {'json-type': json_type}, [])
>=20=20
>      def visit_enum_type(self, name, info, ifcond, members, prefix):
>          self._gen_qlit(name, 'enum',
> -                       {'values': [m.name for m in members]}, ifcond)
> +                       {'values': [(m.name, {'if': m.ifcond}) for m in m=
embers]},
> +                       ifcond)
>=20=20
>      def visit_array_type(self, name, info, ifcond, element_type):
>          element =3D self._use_type(element_type)
> @@ -192,8 +196,9 @@ const QLitObject %(c_name)s =3D %(c_string)s;
>=20=20
>      def visit_alternate_type(self, name, info, ifcond, variants):
>          self._gen_qlit(name, 'alternate',
> -                       {'members': [{'type': self._use_type(m.type)}
> -                                    for m in variants.variants]}, ifcond)
> +                       {'members': [
> +                           ({'type': self._use_type(m.type)}, {'if': m.i=
fcond})

Long line.  I'll feed the series to pycodestyle and pylint.

> +                           for m in variants.variants]}, ifcond)
>=20=20
>      def visit_command(self, name, info, ifcond, arg_type, ret_type, gen,
>                        success_response, boxed, allow_oob, allow_preconfi=
g):
> diff --git a/scripts/qapi/types.py b/scripts/qapi/types.py
> index 0404710bbd..e2ee9f3b72 100644
> --- a/scripts/qapi/types.py
> +++ b/scripts/qapi/types.py
> @@ -43,6 +43,7 @@ struct %(c_name)s {
>  def gen_struct_members(members):
>      ret =3D ''
>      for memb in members:
> +        ret +=3D gen_if(memb.ifcond)
>          if memb.optional:
>              ret +=3D mcgen('''
>      bool has_%(c_name)s;
> @@ -52,6 +53,7 @@ def gen_struct_members(members):
>      %(c_type)s %(c_name)s;
>  ''',
>                       c_type=3Dmemb.type.c_type(), c_name=3Dc_name(memb.n=
ame))
> +        ret +=3D gen_endif(memb.ifcond)
>      return ret
>=20=20
>=20=20
> @@ -131,11 +133,13 @@ def gen_variants(variants):
>      for var in variants.variants:
>          if var.type.name =3D=3D 'q_empty':
>              continue
> +        ret +=3D gen_if(var.ifcond)
>          ret +=3D mcgen('''
>          %(c_type)s %(c_name)s;
>  ''',
>                       c_type=3Dvar.type.c_unboxed_type(),
>                       c_name=3Dc_name(var.name))
> +        ret +=3D gen_endif(var.ifcond)
>=20=20
>      ret +=3D mcgen('''
>      } u;
> diff --git a/scripts/qapi/visit.py b/scripts/qapi/visit.py
> index 24f85a2e85..82eab72b21 100644
> --- a/scripts/qapi/visit.py
> +++ b/scripts/qapi/visit.py
> @@ -54,6 +54,7 @@ void visit_type_%(c_name)s_members(Visitor *v, %(c_name=
)s *obj, Error **errp)
>                       c_type=3Dbase.c_name())
>=20=20
>      for memb in members:
> +        ret +=3D gen_if(memb.ifcond)
>          if memb.optional:
>              ret +=3D mcgen('''
>      if (visit_optional(v, "%(name)s", &obj->has_%(c_name)s)) {
> @@ -73,6 +74,7 @@ void visit_type_%(c_name)s_members(Visitor *v, %(c_name=
)s *obj, Error **errp)
>              ret +=3D mcgen('''
>      }
>  ''')
> +        ret +=3D gen_endif(memb.ifcond)
>=20=20
>      if variants:
>          ret +=3D mcgen('''
> @@ -84,6 +86,7 @@ void visit_type_%(c_name)s_members(Visitor *v, %(c_name=
)s *obj, Error **errp)
>              case_str =3D c_enum_const(variants.tag_member.type.name,
>                                      var.name,
>                                      variants.tag_member.type.prefix)
> +            ret +=3D gen_if(var.ifcond)
>              if var.type.name =3D=3D 'q_empty':
>                  # valid variant and nothing to do
>                  ret +=3D mcgen('''
> @@ -100,6 +103,7 @@ void visit_type_%(c_name)s_members(Visitor *v, %(c_na=
me)s *obj, Error **errp)
>                               case=3Dcase_str,
>                               c_type=3Dvar.type.c_name(), c_name=3Dc_name=
(var.name))
>=20=20
> +            ret +=3D gen_endif(var.ifcond)
>          ret +=3D mcgen('''
>      default:
>          abort();
> @@ -190,6 +194,7 @@ void visit_type_%(c_name)s(Visitor *v, const char *na=
me, %(c_name)s **obj, Error
>                  c_name=3Dc_name(name))
>=20=20
>      for var in variants.variants:
> +        ret +=3D gen_if(var.ifcond)
>          ret +=3D mcgen('''
>      case %(case)s:
>  ''',
> @@ -217,6 +222,7 @@ void visit_type_%(c_name)s(Visitor *v, const char *na=
me, %(c_name)s **obj, Error
>          ret +=3D mcgen('''
>          break;
>  ''')
> +        ret +=3D gen_endif(var.ifcond)
>=20=20
>      ret +=3D mcgen('''
>      case QTYPE_NONE:

With the tweaked commit message:
Reviewed-by: Markus Armbruster <armbru@redhat.com>

