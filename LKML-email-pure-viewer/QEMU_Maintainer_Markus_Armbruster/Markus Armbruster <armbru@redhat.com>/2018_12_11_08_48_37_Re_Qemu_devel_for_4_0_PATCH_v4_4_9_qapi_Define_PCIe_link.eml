Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 11 Dec 2018 19:47:48 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 5F4055807A2
	for <like.xu@linux.intel.com>; Tue, 11 Dec 2018 00:49:06 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 11 Dec 2018 00:49:06 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3Ax4C8chHPm4uSu52WeglKO51GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ7yoMiwAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95RWSJfDIOy?=
 =?us-ascii?q?YYkAAekPMulXs4bzukMOoBm8CwSjGe/ixCNEiWHt3aAhz+QtDRvL0BA8E98UrH?=
 =?us-ascii?q?jZqsj+OqcIUeCyyanF1TLNYOlM2Tf+9YjIaQ0qrO2WXbJ1asXR01QvFxjZjlqO?=
 =?us-ascii?q?s4zuIjSY2f4Xs2ie9OVgT/+vhnU9qw5vvzevxt0jipXTio0JzVDE8Dx0zYAoLt?=
 =?us-ascii?q?O7UE52ecCoHIdTui2AKod6X8AvT3t2tCs0yrAKo4O3cSoSxJg52xLSb+aLf5WG?=
 =?us-ascii?q?7x79TuqdPDR1iXx/dL6hhBu/91WrxPfmWcmuyllKqzJIktnSuXAJ0Bze8syHSv?=
 =?us-ascii?q?pm/ke9wjaDzQ/T6udZIUwukqrbMZEhzqYxlpoVr0vDAjf7lFvqgKKVbEko5/Wk?=
 =?us-ascii?q?5uf9brn4qJKRN5V4hhz8P6g2n8ywG+U4MgwAX2iB/uS80aXu/VTnT7VPk/06i7?=
 =?us-ascii?q?TWv47EJcsFoq61GhRa0oE+6xa5Ezipzs8YkX4DLFJEexKIkZLlOl7TIP3gCfe/?=
 =?us-ascii?q?glKskCpkxvzcP73hBInNIWbHkLv7Ybl97EtcxRE1zdBY4ZJUBbcBIO/pVk/2rt?=
 =?us-ascii?q?zYAQc1MxaozOb/FNV9yoQeVHqLAq+YM6Pdr0WE5+0yI+SXYI8VuTD9K+Uq5vL0?=
 =?us-ascii?q?jH85n0Mdcret3ZcNdH+4GfFmcA2kZ2HxiIIBDXsSpVh5C+jrk0GZFzhUYXm0Qu?=
 =?us-ascii?q?Q7/D58DYunCYLKQMeqmKCA2yGgWYRbY30DBl2SHHO7SoOfRv1ZbSuTJtNmwCUJ?=
 =?us-ascii?q?UKXkR4I/2BXrrgLj1rd8MsLS/SsXs4+l08J6sPbOnxM//iAhEsKGzmuWRHt1lG?=
 =?us-ascii?q?5bezhj8bp+qgRXzl6A3OAsjvZcHN9ez+lEXgczKdjXyOksWP7oXQeUW96TS0u9?=
 =?us-ascii?q?Cvy8BDsrU8ktzsVGN09nHt+4kzjZ0iaqCqNTnLuOUs9nupnA1mT8cp4ug03N07?=
 =?us-ascii?q?Ms2hx/GpNC?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A1AgC3eA9cmBHrdtBkHQEBBQEHBQGBZ?=
 =?us-ascii?q?YExgk8TjHOLMYINiSGQJBQYFId4IjgSAQMBAQEBAQECARMBAQEBAQgLCwYbDi+?=
 =?us-ascii?q?CNgUCAxoBBoJbAQEBAQIBAQIkHwopAwIBAQIGAQEKDgoJHQgDAQsBBBgxEwWDH?=
 =?us-ascii?q?IF1BQgBBKYpM4otjDoXgX+BEYMSilwCiRaGKIY3iwIJkVAYiWaHWZkzgV2Bd3A?=
 =?us-ascii?q?VgyeCJxcSjgxAMYEHHIhRgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0A1AgC3eA9cmBHrdtBkHQEBBQEHBQGBZYExgk8TjHOLMYI?=
 =?us-ascii?q?NiSGQJBQYFId4IjgSAQMBAQEBAQECARMBAQEBAQgLCwYbDi+CNgUCAxoBBoJbA?=
 =?us-ascii?q?QEBAQIBAQIkHwopAwIBAQIGAQEKDgoJHQgDAQsBBBgxEwWDHIF1BQgBBKYpM4o?=
 =?us-ascii?q?tjDoXgX+BEYMSilwCiRaGKIY3iwIJkVAYiWaHWZkzgV2Bd3AVgyeCJxcSjgxAM?=
 =?us-ascii?q?YEHHIhRgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,341,1539673200"; 
   d="scan'208";a="66246683"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mga01b.intel.com with ESMTP/TLS/AES256-SHA; 11 Dec 2018 00:49:04 -0800
Received: from localhost ([::1]:36590 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gWdix-0008PA-Oj
	for like.xu@linux.intel.com; Tue, 11 Dec 2018 03:49:03 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:49790)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <armbru@redhat.com>) id 1gWdig-0008P3-DF
	for qemu-devel@nongnu.org; Tue, 11 Dec 2018 03:48:47 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <armbru@redhat.com>) id 1gWdid-00083E-4C
	for qemu-devel@nongnu.org; Tue, 11 Dec 2018 03:48:46 -0500
Received: from mx1.redhat.com ([209.132.183.28]:44860)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <armbru@redhat.com>) id 1gWdic-00081W-SM
	for qemu-devel@nongnu.org; Tue, 11 Dec 2018 03:48:43 -0500
Received: from smtp.corp.redhat.com (int-mx01.intmail.prod.int.phx2.redhat.com
	[10.5.11.11])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id EA555811D6;
	Tue, 11 Dec 2018 08:48:41 +0000 (UTC)
Received: from blackfin.pond.sub.org (ovpn-116-56.ams2.redhat.com
	[10.36.116.56])
	by smtp.corp.redhat.com (Postfix) with ESMTPS id 6C82C600D6;
	Tue, 11 Dec 2018 08:48:39 +0000 (UTC)
Received: by blackfin.pond.sub.org (Postfix, from userid 1000)
	id F0ABD113860E; Tue, 11 Dec 2018 09:48:37 +0100 (CET)
From: Markus Armbruster <armbru@redhat.com>
To: Eric Blake <eblake@redhat.com>
References: <154419994154.27028.14774494243513273923.stgit@gimli.home>
	<154420088248.27028.3919592169648338038.stgit@gimli.home>
	<16f2e753-4e80-0acc-d35a-75c6eb5a8f54@redhat.com>
Date: Tue, 11 Dec 2018 09:48:37 +0100
In-Reply-To: <16f2e753-4e80-0acc-d35a-75c6eb5a8f54@redhat.com> (Eric Blake's
	message of "Mon, 10 Dec 2018 16:00:57 -0600")
Message-ID: <878t0wbg9m.fsf@dusky.pond.sub.org>
User-Agent: Gnus/5.13 (Gnus v5.13) Emacs/26.1 (gnu/linux)
MIME-Version: 1.0
Content-Type: text/plain
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.11
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.27]);
	Tue, 11 Dec 2018 08:48:41 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [for-4.0 PATCH v4 4/9] qapi: Define PCIe link
 speed and width properties
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Geoffrey McRae <geoff@hostfission.com>,
	Alex Williamson <alex.williamson@redhat.com>,
	qemu-devel@nongnu.org, Markus Armbruster <armbru@redhat.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Eric Blake <eblake@redhat.com> writes:

> On 12/7/18 10:41 AM, Alex Williamson wrote:
>> Create properties to be able to define speeds and widths for PCIe
>> links.  The only tricky bit here is that our get and set callbacks
>> translate from the fixed QAPI automagic enums to those we define
>> in PCI code to represent the actual register segment value.
>>
>> Cc: Eric Blake <eblake@redhat.com>
>> Tested-by: Geoffrey McRae <geoff@hostfission.com>
>> Reviewed-by: Markus Armbruster <armbru@redhat.com>
>> Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
>> ---
>>   hw/core/qdev-properties.c    |  178 ++++++++++++++++++++++++++++++++++++++++++
>>   include/hw/qdev-properties.h |    8 ++
>>   qapi/common.json             |   42 ++++++++++
>>   3 files changed, 228 insertions(+)
>>
>> diff --git a/hw/core/qdev-properties.c b/hw/core/qdev-properties.c
>> index 35072dec1ecf..f5ca5b821a79 100644
>> --- a/hw/core/qdev-properties.c
>> +++ b/hw/core/qdev-properties.c
>> @@ -1327,3 +1327,181 @@ const PropertyInfo qdev_prop_off_auto_pcibar = {
>>       .set = set_enum,
>>       .set_default_value = set_default_value_enum,
>>   };
>> +
>> +/* --- PCIELinkSpeed 2_5/5/8/16 -- */
>> +
>> +static void get_prop_pcielinkspeed(Object *obj, Visitor *v, const char *name,
>> +                                   void *opaque, Error **errp)
>> +{
>> +    DeviceState *dev = DEVICE(obj);
>> +    Property *prop = opaque;
>> +    PCIExpLinkSpeed *p = qdev_get_prop_ptr(dev, prop);
>> +    PCIELinkSpeed speed;
>
> C does not guarantee what width 'speed' has,...

Correct.  The enumeration constants have type int, but the enumeration
type's compatible integer type is implementation-defined, see C99
6.7.2.2.

>> +
>> +    switch (*p) {
>> +    case QEMU_PCI_EXP_LNK_2_5GT:
>> +        speed = PCIE_LINK_SPEED_2_5;
>> +        break;
>> +    case QEMU_PCI_EXP_LNK_5GT:
>> +        speed = PCIE_LINK_SPEED_5;
>> +        break;
>> +    case QEMU_PCI_EXP_LNK_8GT:
>> +        speed = PCIE_LINK_SPEED_8;
>> +        break;
>> +    case QEMU_PCI_EXP_LNK_16GT:
>> +        speed = PCIE_LINK_SPEED_16;
>> +        break;
>> +    default:
>> +        /* Unreachable */
>> +        abort();
>> +    }
>> +
>> +    visit_type_enum(v, prop->name, (int *)&speed, prop->info->enum_table, errp);
>
> ...making this cast to (int*) not be very kosher. I _think_ we're okay
> here, but I'd be a LOT happier if you just used 'int speed' to avoid
> the cast.

Good catch!

"The GNU Compiler Collection" section C Implementation-Defined Behavior
/ Structures, Unions, Enumerations, and Bit-Fields documents:

   * 'The integer type compatible with each enumerated type (C90
     6.5.2.2, C99 and C11 6.7.2.2).'

     Normally, the type is 'unsigned int' if there are no negative
     values in the enumeration, otherwise 'int'.  If '-fshort-enums' is
     specified, then if there are negative values it is the first of
     'signed char', 'short' and 'int' that can represent all the values,
     otherwise it is the first of 'unsigned char', 'unsigned short' and
     'unsigned int' that can represent all the values.

     On some targets, '-fshort-enums' is the default; this is determined
     by the ABI.

We don't pass -fshort-enums, because we can well do without opening that
can of worms.

That leaves the dependence on the ABI.  As far as I know, the ABIs we
care about don't have short enums.

Still, it's unclean without a real need.

>
>> +}
>> +
>> +static void set_prop_pcielinkspeed(Object *obj, Visitor *v, const char *name,
>> +                                   void *opaque, Error **errp)
>> +{
>> +    DeviceState *dev = DEVICE(obj);
>> +    Property *prop = opaque;
>> +    PCIExpLinkSpeed *p = qdev_get_prop_ptr(dev, prop);
>> +    PCIELinkSpeed speed;
>> +    Error *local_err = NULL;
>> +
>> +    if (dev->realized) {
>> +        qdev_prop_set_after_realize(dev, name, errp);
>> +        return;
>> +    }
>> +
>> +    visit_type_enum(v, prop->name, (int *)&speed,
>
> And again.
>
>> +                    prop->info->enum_table, &local_err);
>> +    if (local_err) {
>> +        error_propagate(errp, local_err);
>> +        return;
>> +    }
>> +
>> +    switch (speed) {
>> +    case PCIE_LINK_SPEED_2_5:
>> +        *p = QEMU_PCI_EXP_LNK_2_5GT;
>> +        break;
>> +    case PCIE_LINK_SPEED_5:
>> +        *p = QEMU_PCI_EXP_LNK_5GT;
>> +        break;
>> +    case PCIE_LINK_SPEED_8:
>> +        *p = QEMU_PCI_EXP_LNK_8GT;
>> +        break;
>> +    case PCIE_LINK_SPEED_16:
>> +        *p = QEMU_PCI_EXP_LNK_16GT;
>> +        break;
>> +    default:
>> +        /* Unreachable */
>> +        abort();
>> +    }
>> +}
>> +
>
>> +static void get_prop_pcielinkwidth(Object *obj, Visitor *v, const char *name,
>> +                                   void *opaque, Error **errp)
>> +{
>> +    DeviceState *dev = DEVICE(obj);
>> +    Property *prop = opaque;
>> +    PCIExpLinkWidth *p = qdev_get_prop_ptr(dev, prop);
>> +    PCIELinkWidth width;
>> +
>> +    switch (*p) {
>
>> +    visit_type_enum(v, prop->name, (int *)&width, prop->info->enum_table, errp);
>> +}
>> +
>> +static void set_prop_pcielinkwidth(Object *obj, Visitor *v, const char *name,
>> +                                   void *opaque, Error **errp)
>> +{
>> +    DeviceState *dev = DEVICE(obj);
>> +    Property *prop = opaque;
>> +    PCIExpLinkWidth *p = qdev_get_prop_ptr(dev, prop);
>> +    PCIELinkWidth width;
>> +    Error *local_err = NULL;
>> +
>> +    if (dev->realized) {
>> +        qdev_prop_set_after_realize(dev, name, errp);
>> +        return;
>> +    }
>> +
>> +    visit_type_enum(v, prop->name, (int *)&width,
>
> And two more spots.

[...]

