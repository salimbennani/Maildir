Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 06 Dec 2018 08:57:36 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 030E85804C1
	for <like.xu@linux.intel.com>; Wed,  5 Dec 2018 10:38:46 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 05 Dec 2018 10:38:46 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AB47yUhaunDMXg/zAKwbbj5f/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZrsW5bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJVyJPHI28?=
 =?us-ascii?q?YYUNAOQCM+lXoJXyqVQToxumBwSiBuzixiJGi3Pqw6I6yP8sER3f3AE6A94CrG?=
 =?us-ascii?q?7ZodfzOawPUe611q7IzTDbYv1Rwzj98ovIcg06ofqRQb9wa8/RxlI1FwPYlVWQ?=
 =?us-ascii?q?tZLqPymI3ekKqWeb9e9gWvm1i246sAxxuCagydosiobTmoIZ0EzL9SJ8wIssI9?=
 =?us-ascii?q?CzVU11Yca8HZdOqy2XNJF6Tt4/T2xroio21LMLtJ6hcCQXypkr3wDTZ+CDfoSS?=
 =?us-ascii?q?/x7uWvidLS1liH9mdr+znQi+/Eumx+bhTMe7ykxKoTBAktTUtnACyRjT6s+fR/?=
 =?us-ascii?q?t5/0ehwiqP1xvJ5uFLJ0A0iLDXK5k7wr4/jpYTsELDETHqmEjukqOaakYp9vK1?=
 =?us-ascii?q?5+j6YbjqvIGQOoF0hw3kL6gjmNSzAeEiPQgPW2ib9/681Lrm/UDhWbVFkPg2kr?=
 =?us-ascii?q?TAvJ/HO8sbuLC2AwtM3ok47Ba/EjGm38gGknkcK15FfBOHj4v3NF3UL/H4EO+y?=
 =?us-ascii?q?g1CtkDdt2vDHMaftApTLLnjfjrjheaxx5FJbyAo21t1f4ZVUCrcOIPL1R0/9rt?=
 =?us-ascii?q?vYDgU2MwCs2eboFM191p8CWWKIGqKZNKLSsVyW6e41LOiMeZQYuDL8K/gj+v7v?=
 =?us-ascii?q?gmU1mV4bfam1w5QXbGq0EehhI0WcMjLRhMwcGzIKohYmV76tz1mDSiJIIXC1Wa?=
 =?us-ascii?q?06+3c8Eo3hCI7CQoWkhvuGxDu6GZtNIXlLD03JHXr2eoHXZvEXdSjHJ8ZgliAD?=
 =?us-ascii?q?B6GsTpJk2RywuQu/0bd+M+fP5gUespTs0sUz4Pfcwgov/z55BNjIzmeWUmtvlX?=
 =?us-ascii?q?kJTTJl4KcqhEVnwRKq16RiArR8CMZe7u4BBgIzL5XVyeBgBpb2RxjMd8qhUluq?=
 =?us-ascii?q?Qty6Rzo2S4Ri7cUJZhNYEs+hkwuL9jCvCaUIjKCGHtRg+7jZ1WLsD9xwx3bPyO?=
 =?us-ascii?q?8qiFxwEZgHDnGvmqMqr1ubPIXOiUjM0v/yLak=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A5AAD8EghchxHrdtBkHQEBBQEHBQGBU?=
 =?us-ascii?q?gcBCwGBMIE5gRYTg3mIeIsvgg2JII4sgXMUGAMRhECDEyI1CA0BAwEBAQEBAQI?=
 =?us-ascii?q?BEwEBAQoLCQgbDiMMgjYFAgMaAQaCXAECAgEBAiAEHwocDQMCAQECBgEBChoCB?=
 =?us-ascii?q?R0EAgIDAQsBBBgxEwWDHAGBdAUIAQSmD3wziiuBC4sTF4F/g241hQGDBIJXAo8?=
 =?us-ascii?q?1kSEJhwOKPxiCKIc4h0+YfoFHAYILcBU7gmwJgh4XiBuBFIRvQDGBBxyISYF3A?=
 =?us-ascii?q?QE?=
X-IPAS-Result: =?us-ascii?q?A0A5AAD8EghchxHrdtBkHQEBBQEHBQGBUgcBCwGBMIE5gRY?=
 =?us-ascii?q?Tg3mIeIsvgg2JII4sgXMUGAMRhECDEyI1CA0BAwEBAQEBAQIBEwEBAQoLCQgbD?=
 =?us-ascii?q?iMMgjYFAgMaAQaCXAECAgEBAiAEHwocDQMCAQECBgEBChoCBR0EAgIDAQsBBBg?=
 =?us-ascii?q?xEwWDHAGBdAUIAQSmD3wziiuBC4sTF4F/g241hQGDBIJXAo81kSEJhwOKPxiCK?=
 =?us-ascii?q?Ic4h0+YfoFHAYILcBU7gmwJgh4XiBuBFIRvQDGBBxyISYF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,319,1539673200"; 
   d="scan'208";a="55068198"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 05 Dec 2018 10:38:45 -0800
Received: from localhost ([::1]:36190 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gUc4L-0001pv-0u
	for like.xu@linux.intel.com; Wed, 05 Dec 2018 13:38:45 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:39712)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <armbru@redhat.com>) id 1gUc3t-0000Yk-Bx
	for qemu-devel@nongnu.org; Wed, 05 Dec 2018 13:38:20 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <armbru@redhat.com>) id 1gUbvG-0001bh-6j
	for qemu-devel@nongnu.org; Wed, 05 Dec 2018 13:29:25 -0500
Received: from mx1.redhat.com ([209.132.183.28]:34538)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <armbru@redhat.com>) id 1gUbvF-0001TO-Rq
	for qemu-devel@nongnu.org; Wed, 05 Dec 2018 13:29:22 -0500
Received: from smtp.corp.redhat.com (int-mx01.intmail.prod.int.phx2.redhat.com
	[10.5.11.11])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id A2486307D865
	for <qemu-devel@nongnu.org>; Wed,  5 Dec 2018 18:29:20 +0000 (UTC)
Received: from blackfin.pond.sub.org (ovpn-116-56.ams2.redhat.com
	[10.36.116.56])
	by smtp.corp.redhat.com (Postfix) with ESMTPS id 6994A60565;
	Wed,  5 Dec 2018 18:29:17 +0000 (UTC)
Received: by blackfin.pond.sub.org (Postfix, from userid 1000)
	id C939D113860E; Wed,  5 Dec 2018 19:29:10 +0100 (CET)
From: Markus Armbruster <armbru@redhat.com>
To: =?utf-8?Q?Marc-Andr=C3=A9?= Lureau <marcandre.lureau@redhat.com>
References: <20180706105753.26700-1-marcandre.lureau@redhat.com>
	<20180706105753.26700-14-marcandre.lureau@redhat.com>
Date: Wed, 05 Dec 2018 19:29:10 +0100
In-Reply-To: <20180706105753.26700-14-marcandre.lureau@redhat.com>
	(=?utf-8?Q?=22Marc-Andr=C3=A9?= Lureau"'s message of "Fri, 6 Jul 2018
	12:57:39 +0200")
Message-ID: <87tvjromix.fsf@dusky.pond.sub.org>
User-Agent: Gnus/5.13 (Gnus v5.13) Emacs/26.1 (gnu/linux)
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.11
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.48]);
	Wed, 05 Dec 2018 18:29:20 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH v6 13/27] qapi: add 'if' to enum members
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: qemu-devel@nongnu.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Marc-Andr=C3=A9 Lureau <marcandre.lureau@redhat.com> writes:

> QAPISchemaMember gains .ifcond for enum members: inherited classes,
> such as QAPISchemaObjectTypeMember, will thus have an ifcond member
> after this (those different types will also use the .ifcond to store
> the condition and generate conditional code in the following patches).
>
> Generated code is not changed by this patch, but with "qapi: add #if
> conditions to generated code" patch.

It's actually "qapi: add #if conditions to generated code members".  I'd
sidestep this like you did in commit 967c885108f

    The generated code is for now *unconditional*. Later patches generate
    the conditionals.

except I'd say "The generated code remains unconditional for now."

> Signed-off-by: Marc-Andr=C3=A9 Lureau <marcandre.lureau@redhat.com>
> ---
>  scripts/qapi/common.py                         | 10 +++++++---
>  tests/Makefile.include                         |  1 +
>  tests/qapi-schema/enum-dict-member-unknown.err |  2 +-
>  tests/qapi-schema/enum-if-invalid.err          |  1 +
>  tests/qapi-schema/enum-if-invalid.exit         |  1 +
>  tests/qapi-schema/enum-if-invalid.json         |  3 +++
>  tests/qapi-schema/enum-if-invalid.out          |  0
>  tests/qapi-schema/qapi-schema-test.json        |  5 +++--
>  tests/qapi-schema/qapi-schema-test.out         |  2 ++
>  tests/qapi-schema/test-qapi.py                 |  1 +
>  10 files changed, 20 insertions(+), 6 deletions(-)
>  create mode 100644 tests/qapi-schema/enum-if-invalid.err
>  create mode 100644 tests/qapi-schema/enum-if-invalid.exit
>  create mode 100644 tests/qapi-schema/enum-if-invalid.json
>  create mode 100644 tests/qapi-schema/enum-if-invalid.out
>
> diff --git a/scripts/qapi/common.py b/scripts/qapi/common.py
> index e9fb736d46..95b7cd74ee 100644
> --- a/scripts/qapi/common.py
> +++ b/scripts/qapi/common.py
> @@ -877,7 +877,8 @@ def check_enum(expr, info):
>=20=20
>      for member in members:
>          source =3D "dictionary member of enum '%s'" % name
> -        check_known_keys(info, source, member, ['name'], [])
> +        check_known_keys(info, source, member, ['name'], ['if'])
> +        check_if(member, info)
>          check_name(info, "Member of enum '%s'" % name, member['name'],
>                     enum_member=3DTrue)
>=20=20
> @@ -1357,9 +1358,10 @@ class QAPISchemaObjectType(QAPISchemaType):
>  class QAPISchemaMember(object):
>      role =3D 'member'
>=20=20
> -    def __init__(self, name):
> +    def __init__(self, name, ifcond=3DNone):
>          assert isinstance(name, str)
>          self.name =3D name
> +        self.ifcond =3D listify_cond(ifcond)
>          self.owner =3D None
>=20=20
>      def set_owner(self, name):
> @@ -1670,9 +1672,11 @@ class QAPISchema(object):
>          for v in values:
>              if isinstance(v, dict):
>                  name =3D v['name']
> +                ifcond =3D v.get('if')
>              else:
>                  name =3D v
> -            enum.append(QAPISchemaMember(name))
> +                ifcond =3D None
> +            enum.append(QAPISchemaMember(name, ifcond))
>          return enum
>=20=20
>      def _make_implicit_enum_type(self, name, info, ifcond, values):
> diff --git a/tests/Makefile.include b/tests/Makefile.include
> index 8e1b122cf2..3ba9097892 100644
> --- a/tests/Makefile.include
> +++ b/tests/Makefile.include
> @@ -487,6 +487,7 @@ qapi-schema +=3D enum-bad-name.json
>  qapi-schema +=3D enum-bad-prefix.json
>  qapi-schema +=3D enum-clash-member.json
>  qapi-schema +=3D enum-dict-member-unknown.json
> +qapi-schema +=3D enum-if-invalid.json
>  qapi-schema +=3D enum-int-member.json
>  qapi-schema +=3D enum-member-case.json
>  qapi-schema +=3D enum-missing-data.json
> diff --git a/tests/qapi-schema/enum-dict-member-unknown.err b/tests/qapi-=
schema/enum-dict-member-unknown.err
> index 76bd0471db..2aae618be0 100644
> --- a/tests/qapi-schema/enum-dict-member-unknown.err
> +++ b/tests/qapi-schema/enum-dict-member-unknown.err
> @@ -1,2 +1,2 @@
>  tests/qapi-schema/enum-dict-member-unknown.json:2: Unknown key 'bad-key'=
 in dictionary member of enum 'MyEnum'
> -Valid keys are 'name'.
> +Valid keys are 'if', 'name'.
> diff --git a/tests/qapi-schema/enum-if-invalid.err b/tests/qapi-schema/en=
um-if-invalid.err
> new file mode 100644
> index 0000000000..54c3cf887b
> --- /dev/null
> +++ b/tests/qapi-schema/enum-if-invalid.err
> @@ -0,0 +1 @@
> +tests/qapi-schema/enum-if-invalid.json:2: 'if' condition must be a strin=
g or a list of strings
> diff --git a/tests/qapi-schema/enum-if-invalid.exit b/tests/qapi-schema/e=
num-if-invalid.exit
> new file mode 100644
> index 0000000000..d00491fd7e
> --- /dev/null
> +++ b/tests/qapi-schema/enum-if-invalid.exit
> @@ -0,0 +1 @@
> +1
> diff --git a/tests/qapi-schema/enum-if-invalid.json b/tests/qapi-schema/e=
num-if-invalid.json
> new file mode 100644
> index 0000000000..60bd0ef1d7
> --- /dev/null
> +++ b/tests/qapi-schema/enum-if-invalid.json
> @@ -0,0 +1,3 @@
> +# check invalid 'if' type
> +{ 'enum': 'TestIfEnum', 'data':
> +  [ 'foo', { 'name' : 'bar', 'if': { 'val': 'foo' } } ] }
> diff --git a/tests/qapi-schema/enum-if-invalid.out b/tests/qapi-schema/en=
um-if-invalid.out
> new file mode 100644
> index 0000000000..e69de29bb2
> diff --git a/tests/qapi-schema/qapi-schema-test.json b/tests/qapi-schema/=
qapi-schema-test.json
> index 11aa4c8f8d..35ca94d991 100644
> --- a/tests/qapi-schema/qapi-schema-test.json
> +++ b/tests/qapi-schema/qapi-schema-test.json
> @@ -202,7 +202,8 @@
>  { 'struct': 'TestIfStruct', 'data': { 'foo': 'int' },
>    'if': 'defined(TEST_IF_STRUCT)' }
>=20=20
> -{ 'enum': 'TestIfEnum', 'data': [ 'foo', 'bar' ],
> +{ 'enum': 'TestIfEnum', 'data':
> +  [ 'foo', { 'name' : 'bar', 'if': 'defined(TEST_IF_ENUM_BAR)' } ],
>    'if': 'defined(TEST_IF_ENUM)' }
>=20=20
>  { 'union': 'TestIfUnion', 'data': { 'foo': 'TestStruct' },
> @@ -211,7 +212,7 @@
>  { 'alternate': 'TestIfAlternate', 'data': { 'foo': 'int', 'bar': 'TestSt=
ruct' },
>    'if': 'defined(TEST_IF_ALT) && defined(TEST_IF_STRUCT)' }
>=20=20
> -{ 'command': 'TestIfCmd', 'data': { 'foo': 'TestIfStruct' },
> +{ 'command': 'TestIfCmd', 'data': { 'foo': 'TestIfStruct', 'bar': 'TestI=
fEnum' },
>    'returns': 'UserDefThree',
>    'if': ['defined(TEST_IF_CMD)', 'defined(TEST_IF_STRUCT)'] }
>=20=20
> diff --git a/tests/qapi-schema/qapi-schema-test.out b/tests/qapi-schema/q=
api-schema-test.out
> index edd22bc306..1fb33f302c 100644
> --- a/tests/qapi-schema/qapi-schema-test.out
> +++ b/tests/qapi-schema/qapi-schema-test.out
> @@ -270,6 +270,7 @@ object TestIfStruct
>  enum TestIfEnum
>      member foo
>      member bar
> +        if ['defined(TEST_IF_ENUM_BAR)']
>      if ['defined(TEST_IF_ENUM)']
>  object q_obj_TestStruct-wrapper
>      member data: TestStruct optional=3DFalse
> @@ -288,6 +289,7 @@ alternate TestIfAlternate
>      if ['defined(TEST_IF_ALT) && defined(TEST_IF_STRUCT)']
>  object q_obj_TestIfCmd-arg
>      member foo: TestIfStruct optional=3DFalse
> +    member bar: TestIfEnum optional=3DFalse
>      if ['defined(TEST_IF_CMD)', 'defined(TEST_IF_STRUCT)']
>  command TestIfCmd q_obj_TestIfCmd-arg -> UserDefThree
>     gen=3DTrue success_response=3DTrue boxed=3DFalse oob=3DFalse preconfi=
g=3DFalse
> diff --git a/tests/qapi-schema/test-qapi.py b/tests/qapi-schema/test-qapi=
.py
> index 641a18f06d..b2f4ce6134 100644
> --- a/tests/qapi-schema/test-qapi.py
> +++ b/tests/qapi-schema/test-qapi.py
> @@ -29,6 +29,7 @@ class QAPISchemaTestVisitor(QAPISchemaVisitor):
>              print('    prefix %s' % prefix)
>          for m in members:
>              print('    member %s' % m.name)
> +            self._print_if(m.ifcond, 8)

Could write indent=3D8.  Your choice.

>          self._print_if(ifcond)
>=20=20
>      def visit_object_type(self, name, info, ifcond, base, members, varia=
nts):

Preferably with a tweaked commit message:
Reviewed-by: Markus Armbruster <armbru@redhat.com>

