Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 08:41:19 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 266A15802E4
	for <like.xu@linux.intel.com>; Thu, 29 Nov 2018 04:44:55 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by fmsmga006-1.fm.intel.com with ESMTP; 29 Nov 2018 04:44:54 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A7Ep3NBRhA02wuUz8KHPazWf3bNpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa67ZBaCt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZAo2y?=
 =?us-ascii?q?cYUPAeQDMuhboYbyqEcBowamBQSuBu3ixSJEi3Hq0aIkyOQsCh3G0BA6Et4SrH?=
 =?us-ascii?q?jZtsn5OaEPWu611qnIyjDDYutR1zjn8ojIcQ0hoeqRVr9sa8rRzFIgFxnYjlWL?=
 =?us-ascii?q?tYzqISmV3fkKvmeB9epgUPmgi3Q6qwxquDig2NojionTiYIJ0FzL6SJ5wIMsKN?=
 =?us-ascii?q?C+VUV1b9mkEJ5KuCGbMYt7WsAiTH9ouSog17IJo4K7czIMxZ86xBDfc+SKf5aU?=
 =?us-ascii?q?7h/gTuqdPCp0iXF/dL6hiRu/8VKsxvD+W8WszlpGsi5InsPRun0DyRDf8NWLR/?=
 =?us-ascii?q?hz80u7xzqC1Abe4fxeL08uj6rUMZshz6YwlpUNtUTDGTf7mEH3jK+NakUk4fKk?=
 =?us-ascii?q?6+vhYrX7vJOcMJV0ig7mPqQvnMywH/g4PxAQU2SH+umwzqDv8VD6TblQkPE7nK?=
 =?us-ascii?q?nUvIrHKckZvqK5BhVa0ocn6xaxFTem19EYkGEeLF1bfRKHkpHlNEzQL/DmE/i/?=
 =?us-ascii?q?h02gnyxsx/DbOL3uHovCLmPEnLflfLZ96FBTxBA8zNBC/59UDrABIPTuWk7+rt?=
 =?us-ascii?q?DYDxk5MxCqzObjEtlyyoQeWWeUD6+fN6PSt1CI5uQyI+WWY48Vojn9J+A/5/Hy?=
 =?us-ascii?q?lX85hUMdfa6x0JsTaXC4HeppL1+WYHrxmdoBFWYKvgwjTO3lklGCUDhTZ2qsUK?=
 =?us-ascii?q?I4/D00FIWmDYKQDr2rm6GLiSenAoVNNCcBDlGXDWyucYKCVPERLiWILYhkmz0A?=
 =?us-ascii?q?ULGnDIg5yRCpshS90rdiM6/Y9zMVscHe0sNo7bjWnBA26TsmFsmYziSBQn95mi?=
 =?us-ascii?q?YSSiYr0btjiUp6zFiFzO5/mfMPDsFZ5f5CTlInM4XBxfdxEdH4V1H9eYKlQVCn?=
 =?us-ascii?q?T9HuITw3VNMo3tJGSU9nEdKwh1iX0yOsArIRl7bXXccc/afV3ny3LMF4nSXozq?=
 =?us-ascii?q?4k2nwvWMhSLiWPnKt17RXIG4PT2xGQjaOgb7k0xiPB9G6fi2GJuRcLA0ZLTazZ?=
 =?us-ascii?q?UCVHNQPtptPj6xaHFuf2BA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AnAADz3f9bhxHrdtBdBx0BAQUBBwUBg?=
 =?us-ascii?q?VEIAQsBgTAqgVpejBFfiylQAQEGgTV8iBQOjiSBdhEYFIdzIjQJDQEDAQEBAQE?=
 =?us-ascii?q?BAgETAQEBCgsJCBsOL4I2BQIDGgEGglwBAgIBAQIkHwopAwIBAQIGAQEKIRoDC?=
 =?us-ascii?q?AMBCwEEDQsxEwWCUUuBagMIBQgBBKZ7M4gEDYIcjBYXeIEHgRGCXTWCV4IXhW4?=
 =?us-ascii?q?CiSeWTi4JjgaDLBiBWoUQgm6HRCyONolqgUaCDXAVgyeCJxcSjgxAMQGBBhyKT?=
 =?us-ascii?q?wciLYF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0AnAADz3f9bhxHrdtBdBx0BAQUBBwUBgVEIAQsBgTAqgVp?=
 =?us-ascii?q?ejBFfiylQAQEGgTV8iBQOjiSBdhEYFIdzIjQJDQEDAQEBAQEBAgETAQEBCgsJC?=
 =?us-ascii?q?BsOL4I2BQIDGgEGglwBAgIBAQIkHwopAwIBAQIGAQEKIRoDCAMBCwEEDQsxEwW?=
 =?us-ascii?q?CUUuBagMIBQgBBKZ7M4gEDYIcjBYXeIEHgRGCXTWCV4IXhW4CiSeWTi4JjgaDL?=
 =?us-ascii?q?BiBWoUQgm6HRCyONolqgUaCDXAVgyeCJxcSjgxAMQGBBhyKTwciLYF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,294,1539673200"; 
   d="scan'208";a="42058620"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 29 Nov 2018 04:44:53 -0800
Received: from localhost ([::1]:53810 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gSLgb-0000kd-56
	for like.xu@linux.intel.com; Thu, 29 Nov 2018 07:44:53 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:40179)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <armbru@redhat.com>) id 1gSLg6-0000b5-13
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 07:44:27 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <armbru@redhat.com>) id 1gSLRO-0000xc-86
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 07:29:14 -0500
Received: from mx1.redhat.com ([209.132.183.28]:58374)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <armbru@redhat.com>) id 1gSLRN-0000xM-WC
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 07:29:10 -0500
Received: from smtp.corp.redhat.com (int-mx08.intmail.prod.int.phx2.redhat.com
	[10.5.11.23])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 29AC5308624A;
	Thu, 29 Nov 2018 12:29:09 +0000 (UTC)
Received: from blackfin.pond.sub.org (ovpn-116-104.ams2.redhat.com
	[10.36.116.104])
	by smtp.corp.redhat.com (Postfix) with ESMTPS id 49E4B1948E;
	Thu, 29 Nov 2018 12:29:06 +0000 (UTC)
Received: by blackfin.pond.sub.org (Postfix, from userid 1000)
	id D345E1132928; Thu, 29 Nov 2018 13:29:04 +0100 (CET)
From: Markus Armbruster <armbru@redhat.com>
To: Daniel Henrique Barboza <danielhb413@gmail.com>
References: <20181109173309.25212-1-danielhb413@gmail.com>
	<20181109173309.25212-4-danielhb413@gmail.com>
Date: Thu, 29 Nov 2018 13:29:04 +0100
In-Reply-To: <20181109173309.25212-4-danielhb413@gmail.com> (Daniel Henrique
	Barboza's message of "Fri, 9 Nov 2018 15:33:09 -0200")
Message-ID: <87bm689ien.fsf@dusky.pond.sub.org>
User-Agent: Gnus/5.13 (Gnus v5.13) Emacs/26.1 (gnu/linux)
MIME-Version: 1.0
Content-Type: text/plain
X-Scanned-By: MIMEDefang 2.84 on 10.5.11.23
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.49]);
	Thu, 29 Nov 2018 12:29:09 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH for-3.2 v10 3/3] qmp hmp: Make
 system_wakeup check wake-up support and run state
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: ehabkost@redhat.com, mst@redhat.com, qemu-devel@nongnu.org,
	mdroth@linux.vnet.ibm.com, armbru@redhat.com, imammedo@redhat.com
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Daniel Henrique Barboza <danielhb413@gmail.com> writes:

> The qmp/hmp command 'system_wakeup' is simply a direct call to
> 'qemu_system_wakeup_request' from vl.c. This function verifies if
> runstate is SUSPENDED and if the wake up reason is valid before
> proceeding. However, no error or warning is thrown if any of those
> pre-requirements isn't met. There is no way for the caller to
> differentiate between a successful wakeup or an error state caused
> when trying to wake up a guest that wasn't suspended.
>
> This means that system_wakeup is silently failing, which can be
> considered a bug. Adding error handling isn't an API break in this
> case - applications that didn't check the result will remain broken,
> the ones that check it will have a chance to deal with it.
>
> Adding to that, the commit before previous created a new QMP API called
> query-current-machine, with a new flag called wakeup-suspend-support,
> that indicates if the guest has the capability of waking up from suspended
> state. Although such guest will never reach SUSPENDED state and erroring
> it out in this scenario would suffice, it is more informative for the user
> to differentiate between a failure because the guest isn't suspended versus
> a failure because the guest does not have support for wake up at all.
>
> All this considered, this patch changes qmp_system_wakeup to check if
> the guest is capable of waking up from suspend, and if it is suspended.
> After this patch, this is the output of system_wakeup in a guest that
> does not have wake-up from suspend support (ppc64):
>
> (qemu) system_wakeup
> wake-up from suspend is not supported by this guest
> (qemu)
>
> And this is the output of system_wakeup in a x86 guest that has the
> support but isn't suspended:
>
> (qemu) system_wakeup
> Unable to wake up: guest is not in suspended state
> (qemu)
>
> Reported-by: Balamuruhan S <bala24@linux.vnet.ibm.com>
> Signed-off-by: Daniel Henrique Barboza <danielhb413@gmail.com>
> ---
>  hmp.c                   |  5 ++++-
>  hw/acpi/core.c          |  4 +++-
>  hw/char/serial.c        |  3 ++-
>  hw/input/ps2.c          |  9 ++++++---
>  hw/timer/mc146818rtc.c  |  3 ++-
>  include/sysemu/sysemu.h |  3 ++-
>  migration/migration.c   |  7 +++++--
>  qapi/misc.json          |  8 +++++++-
>  qmp.c                   | 13 ++++++++++++-
>  vl.c                    |  6 ++++--
>  10 files changed, 47 insertions(+), 14 deletions(-)
>
> diff --git a/hmp.c b/hmp.c
> index 7828f93a39..0f5d943413 100644
> --- a/hmp.c
> +++ b/hmp.c
> @@ -1220,7 +1220,10 @@ void hmp_cont(Monitor *mon, const QDict *qdict)
>  
>  void hmp_system_wakeup(Monitor *mon, const QDict *qdict)
>  {
> -    qmp_system_wakeup(NULL);
> +    Error *err = NULL;
> +
> +    qmp_system_wakeup(&err);
> +    hmp_handle_error(mon, &err);
>  }
>  
>  void hmp_nmi(Monitor *mon, const QDict *qdict)
> diff --git a/hw/acpi/core.c b/hw/acpi/core.c
> index 52e18d7810..a7073dd435 100644
> --- a/hw/acpi/core.c
> +++ b/hw/acpi/core.c
> @@ -514,7 +514,9 @@ static uint32_t acpi_pm_tmr_get(ACPIREGS *ar)
>  static void acpi_pm_tmr_timer(void *opaque)
>  {
>      ACPIREGS *ar = opaque;
> -    qemu_system_wakeup_request(QEMU_WAKEUP_REASON_PMTIMER);
> +    Error *err = NULL;
> +
> +    qemu_system_wakeup_request(QEMU_WAKEUP_REASON_PMTIMER, &err);
>      ar->tmr.update_sci(ar);
>  }
>  
> diff --git a/hw/char/serial.c b/hw/char/serial.c
> index 02463e3388..23c5d2870c 100644
> --- a/hw/char/serial.c
> +++ b/hw/char/serial.c
> @@ -609,9 +609,10 @@ static int serial_can_receive1(void *opaque)
>  static void serial_receive1(void *opaque, const uint8_t *buf, int size)
>  {
>      SerialState *s = opaque;
> +    Error *err = NULL;
>  
>      if (s->wakeup) {
> -        qemu_system_wakeup_request(QEMU_WAKEUP_REASON_OTHER);
> +        qemu_system_wakeup_request(QEMU_WAKEUP_REASON_OTHER, &err);
>      }
>      if(s->fcr & UART_FCR_FE) {
>          int i;
> diff --git a/hw/input/ps2.c b/hw/input/ps2.c
> index 6c43fc2912..fc742b0061 100644
> --- a/hw/input/ps2.c
> +++ b/hw/input/ps2.c
> @@ -253,9 +253,10 @@ void ps2_queue_4(PS2State *s, int b1, int b2, int b3, int b4)
>  static void ps2_put_keycode(void *opaque, int keycode)
>  {
>      PS2KbdState *s = opaque;
> +    Error *err = NULL;
>  
>      trace_ps2_put_keycode(opaque, keycode);
> -    qemu_system_wakeup_request(QEMU_WAKEUP_REASON_OTHER);
> +    qemu_system_wakeup_request(QEMU_WAKEUP_REASON_OTHER, &err);
>  
>      if (s->translate) {
>          if (keycode == 0xf0) {
> @@ -276,6 +277,7 @@ static void ps2_keyboard_event(DeviceState *dev, QemuConsole *src,
>  {
>      PS2KbdState *s = (PS2KbdState *)dev;
>      InputKeyEvent *key = evt->u.key.data;
> +    Error *err = NULL;
>      int qcode;
>      uint16_t keycode = 0;
>      int mod;
> @@ -285,7 +287,7 @@ static void ps2_keyboard_event(DeviceState *dev, QemuConsole *src,
>          return;
>      }
>  
> -    qemu_system_wakeup_request(QEMU_WAKEUP_REASON_OTHER);
> +    qemu_system_wakeup_request(QEMU_WAKEUP_REASON_OTHER, &err);
>      assert(evt->type == INPUT_EVENT_KIND_KEY);
>      qcode = qemu_input_key_value_to_qcode(key->key);
>  
> @@ -741,6 +743,7 @@ static void ps2_mouse_event(DeviceState *dev, QemuConsole *src,
>  static void ps2_mouse_sync(DeviceState *dev)
>  {
>      PS2MouseState *s = (PS2MouseState *)dev;
> +    Error *err = NULL;
>  
>      /* do not sync while disabled to prevent stream corruption */
>      if (!(s->mouse_status & MOUSE_STATUS_ENABLED)) {
> @@ -748,7 +751,7 @@ static void ps2_mouse_sync(DeviceState *dev)
>      }
>  
>      if (s->mouse_buttons) {
> -        qemu_system_wakeup_request(QEMU_WAKEUP_REASON_OTHER);
> +        qemu_system_wakeup_request(QEMU_WAKEUP_REASON_OTHER, &err);
>      }
>      if (!(s->mouse_status & MOUSE_STATUS_REMOTE)) {
>          /* if not remote, send event. Multiple events are sent if
> diff --git a/hw/timer/mc146818rtc.c b/hw/timer/mc146818rtc.c
> index e4e4de8b8a..e65962cdb4 100644
> --- a/hw/timer/mc146818rtc.c
> +++ b/hw/timer/mc146818rtc.c
> @@ -443,6 +443,7 @@ static uint64_t get_next_alarm(RTCState *s)
>  static void rtc_update_timer(void *opaque)
>  {
>      RTCState *s = opaque;
> +    Error *err = NULL;
>      int32_t irqs = REG_C_UF;
>      int32_t new_irqs;
>  
> @@ -455,7 +456,7 @@ static void rtc_update_timer(void *opaque)
>      if (qemu_clock_get_ns(rtc_clock) >= s->next_alarm_time) {
>          irqs |= REG_C_AF;
>          if (s->cmos_data[RTC_REG_B] & REG_B_AIE) {
> -            qemu_system_wakeup_request(QEMU_WAKEUP_REASON_RTC);
> +            qemu_system_wakeup_request(QEMU_WAKEUP_REASON_RTC, &err);
>          }
>      }
>  
> diff --git a/include/sysemu/sysemu.h b/include/sysemu/sysemu.h
> index 0446adacc6..162c4b16d9 100644
> --- a/include/sysemu/sysemu.h
> +++ b/include/sysemu/sysemu.h
> @@ -74,7 +74,8 @@ void qemu_exit_preconfig_request(void);
>  void qemu_system_reset_request(ShutdownCause reason);
>  void qemu_system_suspend_request(void);
>  void qemu_register_suspend_notifier(Notifier *notifier);
> -void qemu_system_wakeup_request(WakeupReason reason);
> +bool qemu_wakeup_suspend_enabled(void);
> +void qemu_system_wakeup_request(WakeupReason reason, Error **errp);
>  void qemu_system_wakeup_enable(WakeupReason reason, bool enabled);
>  void qemu_register_wakeup_notifier(Notifier *notifier);
>  void qemu_register_wakeup_support(void);
> diff --git a/migration/migration.c b/migration/migration.c
> index b261c1e4ce..8e9b4af71c 100644
> --- a/migration/migration.c
> +++ b/migration/migration.c
> @@ -2390,6 +2390,8 @@ static int postcopy_start(MigrationState *ms)
>      int64_t bandwidth = migrate_max_postcopy_bandwidth();
>      bool restart_block = false;
>      int cur_state = MIGRATION_STATUS_ACTIVE;
> +    Error *err = NULL;
> +
>      if (!migrate_pause_before_switchover()) {
>          migrate_set_state(&ms->state, MIGRATION_STATUS_ACTIVE,
>                            MIGRATION_STATUS_POSTCOPY_ACTIVE);
> @@ -2399,7 +2401,7 @@ static int postcopy_start(MigrationState *ms)
>      qemu_mutex_lock_iothread();
>      trace_postcopy_start_set_run();
>  
> -    qemu_system_wakeup_request(QEMU_WAKEUP_REASON_OTHER);
> +    qemu_system_wakeup_request(QEMU_WAKEUP_REASON_OTHER, &err);
>      global_state_store();
>      ret = vm_stop_force_state(RUN_STATE_FINISH_MIGRATE);
>      if (ret < 0) {
> @@ -2597,13 +2599,14 @@ static int migration_maybe_pause(MigrationState *s,
>   */
>  static void migration_completion(MigrationState *s)
>  {
> +    Error *err = NULL;
>      int ret;
>      int current_active_state = s->state;
>  
>      if (s->state == MIGRATION_STATUS_ACTIVE) {
>          qemu_mutex_lock_iothread();
>          s->downtime_start = qemu_clock_get_ms(QEMU_CLOCK_REALTIME);
> -        qemu_system_wakeup_request(QEMU_WAKEUP_REASON_OTHER);
> +        qemu_system_wakeup_request(QEMU_WAKEUP_REASON_OTHER, &err);
>          s->vm_was_running = runstate_is_running();
>          ret = global_state_store();
>  
> diff --git a/qapi/misc.json b/qapi/misc.json
> index 9b86576e61..471f6e680c 100644
> --- a/qapi/misc.json
> +++ b/qapi/misc.json
> @@ -1235,12 +1235,18 @@
>  ##
>  # @system_wakeup:
>  #
> -# Wakeup guest from suspend.  Does nothing in case the guest isn't suspended.
> +# Wake-up guest from suspend. If the guest has wake-up from suspend
> +# support enabled (wakeup-suspend-support flag from
> +# query-current-machine), wake-up guest from suspend if the guest is

"wake up guest", because wake-up is the noun, the verb is spelled wake
up.

> +# in SUSPENDED state. Returns an error otherwise.

Imperative mood, please: "Return an error".

>  #
>  # Since:  1.1
>  #
>  # Returns:  nothing.
>  #
> +# Note: prior to 3.2, this command does nothing in case the guest
> +# isn't suspended.

The next relase will be 4.0.

> +#
>  # Example:
>  #
>  # -> { "execute": "system_wakeup" }
> diff --git a/qmp.c b/qmp.c
> index e7c0a2fd60..2265aa48b9 100644
> --- a/qmp.c
> +++ b/qmp.c
> @@ -183,7 +183,18 @@ void qmp_cont(Error **errp)
>  
>  void qmp_system_wakeup(Error **errp)
>  {
> -    qemu_system_wakeup_request(QEMU_WAKEUP_REASON_OTHER);
> +    Error *local_err = NULL;
> +
> +    if (!qemu_wakeup_suspend_enabled()) {
> +        error_setg(errp,
> +                   "wake-up from suspend is not supported by this guest");
> +        return;
> +    }
> +
> +    qemu_system_wakeup_request(QEMU_WAKEUP_REASON_OTHER, &local_err);
> +    if (local_err) {
> +        error_propagate(errp, local_err);
> +    }

Make that

       qemu_system_wakeup_request(QEMU_WAKEUP_REASON_OTHER, errp);

See error.h's big comment:

 * Receive an error and pass it on to the caller:
 *     Error *err = NULL;
 *     foo(arg, &err);
 *     if (err) {
 *         handle the error...
 *         error_propagate(errp, err);
 *     }
 * where Error **errp is a parameter, by convention the last one.
[...]
 * But when all you do with the error is pass it on, please use
 *     foo(arg, errp);
 * for readability.

>  }
>  
>  ObjectPropertyInfoList *qmp_qom_list(const char *path, Error **errp)
> diff --git a/vl.c b/vl.c
> index 5813a8785f..b057796e48 100644
> --- a/vl.c
> +++ b/vl.c
> @@ -1754,11 +1754,13 @@ void qemu_register_suspend_notifier(Notifier *notifier)
>      notifier_list_add(&suspend_notifiers, notifier);
>  }
>  
> -void qemu_system_wakeup_request(WakeupReason reason)
> +void qemu_system_wakeup_request(WakeupReason reason, Error **errp)
>  {
>      trace_system_wakeup_request(reason);
>  
>      if (!runstate_check(RUN_STATE_SUSPENDED)) {
> +        error_setg(errp,
> +                   "Unable to wake up: guest is not in suspended state");
>          return;
>      }
>      if (!(wakeup_reason_mask & (1 << reason))) {
> @@ -1788,7 +1790,7 @@ void qemu_register_wakeup_support(void)
>      wakeup_suspend_enabled = true;
>  }
>  
> -static bool qemu_wakeup_suspend_enabled(void)
> +bool qemu_wakeup_suspend_enabled(void)
>  {
>      return wakeup_suspend_enabled;
>  }

