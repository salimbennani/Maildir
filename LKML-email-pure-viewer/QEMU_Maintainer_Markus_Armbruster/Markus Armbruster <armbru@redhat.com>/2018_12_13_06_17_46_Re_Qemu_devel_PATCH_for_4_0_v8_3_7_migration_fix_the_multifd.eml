Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 21:20:15 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id D629A580380
	for <like.xu@linux.intel.com>; Wed, 12 Dec 2018 22:18:12 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga002-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 12 Dec 2018 22:18:12 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AAR9FEx3TuCY4omy4smDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?seMQL/ad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWpPUNhfVyJPAIyy?=
 =?us-ascii?q?bIUAAOUdMuhFt4nwpVkAoBSjCQSiGO/g1CRIi2Tq3aEmyektDR3K0RY8E98IrX?=
 =?us-ascii?q?/arM/1NKAXUe2ty6fH1y/Db/BL2Tfm9YPFbgohofSXUrJqbMrR0lUvGB3fjl6N?=
 =?us-ascii?q?roHqJSmV1uEWvGiB8uptTvivhHA6pAFxuDev2t0ghZXOhoIQ013J8zhyzoUtJd?=
 =?us-ascii?q?CgVkJ3fd2pHIFNuy2HNIZ6WN0uTm9otSog17ELu4a3cDYWxJkj3RLTdvKKf5aS?=
 =?us-ascii?q?7h7+V+ucLy10iGxmdb+5mh2861KvyvfmWcmxyFtKrjRKkt3Ltn0V0xzT69OHSu?=
 =?us-ascii?q?dm/ku71jaP0R3T5vtDIUAumqrXM58hwrgumZoPqUnPADP6lUbsgKOLa0kp+fKk?=
 =?us-ascii?q?5/rpb7jmvJOQKo15hhn7Mqs0m8y/Beo4MhIJX2ie4em8zaPs/UjkQLlTk/I5jL?=
 =?us-ascii?q?fZv47eJcgCvaG5BBJV0oA/5BmhFDeq19AYnXgELF1bYh6GgJXpNknKIPD5C/e/?=
 =?us-ascii?q?nlutnC1qx/DAIr3uHJHNImLfn7fmeLZw8EhcyA01zdBQ4ZJUF6sNIPXpWk/+rN?=
 =?us-ascii?q?DYFAM2MxSow+b7D9VwzoceWWOMAqCHKq/TvkKI6/krI+mNYo8VpTn8J+Ik5/7o?=
 =?us-ascii?q?kX82h1sdcbO10psQbXDrVslgOFiTNHrwns8aQyBNugslUPesjlqEXjhOIXGoUO?=
 =?us-ascii?q?U57zA/DYugSoDbWoGqhqfGxSq+A9haa35LDgOxF2z1fdCBUvYIdCXAO8Jkj3kI?=
 =?us-ascii?q?WKasT8o72AizuRTm47xgKOXS52sfr520z8V/5eDYiUQv8ydpBd+WyWCHQjJImT?=
 =?us-ascii?q?YmSj5++KE39UJ5y3+YzLN1xfdfEIoAyelOV1IfPITf0vcyIsr3UBjcZcuEUh7y?=
 =?us-ascii?q?S8+jCyssZsg8z98HfwB2HND03UOL5DajH7JAz+/DP5cz6K+JmiGpf8s=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0CYAAAG+RFcmBHrdtBjHQEBBQEHBQGBU?=
 =?us-ascii?q?wYBCwGBMIJijHSLM1IGgTWJIY4ygXMUGBSHQCI2Bw0BAwEBAQEBAQIBEwEBAQE?=
 =?us-ascii?q?BCAsLBhsOL4I2BQIDGgEGglwBAgIBAQIkHwopAwIBAQIGAQEKDhMaAwgDAQsBB?=
 =?us-ascii?q?BgxEwWDHIF0BQgBBKgFM4o2jDwXeIEHgRGDEopcAokzhhKBT494CZFXGIFchRq?=
 =?us-ascii?q?Cc4ddii6PEYFNCoF9cBWDJ4InFxKODEAxgQccikeBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0CYAAAG+RFcmBHrdtBjHQEBBQEHBQGBUwYBCwGBMIJijHS?=
 =?us-ascii?q?LM1IGgTWJIY4ygXMUGBSHQCI2Bw0BAwEBAQEBAQIBEwEBAQEBCAsLBhsOL4I2B?=
 =?us-ascii?q?QIDGgEGglwBAgIBAQIkHwopAwIBAQIGAQEKDhMaAwgDAQsBBBgxEwWDHIF0BQg?=
 =?us-ascii?q?BBKgFM4o2jDwXeIEHgRGDEopcAokzhhKBT494CZFXGIFchRqCc4ddii6PEYFNC?=
 =?us-ascii?q?oF9cBWDJ4InFxKODEAxgQccikeBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,347,1539673200"; 
   d="scan'208";a="56154949"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 12 Dec 2018 22:18:11 -0800
Received: from localhost ([::1]:50803 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gXKK2-00056F-8b
	for like.xu@linux.intel.com; Thu, 13 Dec 2018 01:18:10 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:42380)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <armbru@redhat.com>) id 1gXKJr-00055c-1b
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 01:18:00 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <armbru@redhat.com>) id 1gXKJl-0005aI-H1
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 01:17:57 -0500
Received: from mx1.redhat.com ([209.132.183.28]:55412)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <armbru@redhat.com>) id 1gXKJj-0005WF-CD
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 01:17:53 -0500
Received: from smtp.corp.redhat.com (int-mx06.intmail.prod.int.phx2.redhat.com
	[10.5.11.16])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 5ACC4307DAB2;
	Thu, 13 Dec 2018 06:17:48 +0000 (UTC)
Received: from blackfin.pond.sub.org (ovpn-116-56.ams2.redhat.com
	[10.36.116.56])
	by smtp.corp.redhat.com (Postfix) with ESMTPS id 00CEC5C6A6;
	Thu, 13 Dec 2018 06:17:47 +0000 (UTC)
Received: by blackfin.pond.sub.org (Postfix, from userid 1000)
	id 6E4CC113860E; Thu, 13 Dec 2018 07:17:46 +0100 (CET)
From: Markus Armbruster <armbru@redhat.com>
To: Fei Li <fli@suse.com>
References: <20181211095057.14623-1-fli@suse.com>
	<20181211095057.14623-4-fli@suse.com>
Date: Thu, 13 Dec 2018 07:17:46 +0100
In-Reply-To: <20181211095057.14623-4-fli@suse.com> (Fei Li's message of "Tue, 
	11 Dec 2018 17:50:53 +0800")
Message-ID: <87wooec5md.fsf@dusky.pond.sub.org>
User-Agent: Gnus/5.13 (Gnus v5.13) Emacs/26.1 (gnu/linux)
MIME-Version: 1.0
Content-Type: text/plain
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.16
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.42]);
	Thu, 13 Dec 2018 06:17:48 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH for-4.0 v8 3/7] migration: fix the multifd
 code when receiving less channels
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: qemu-devel@nongnu.org, "Dr . David Alan Gilbert" <dgilbert@redhat.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Fei Li <fli@suse.com> writes:

> In our current code, when multifd is used during migration, if there
> is an error before the destination receives all new channels, the
> source keeps running, however the destination does not exit but keeps
> waiting until the source is killed deliberately.
>
> Fix this by dumping the specific error and let users decide whether
> to quit from the destination side when failing to receive packet via
> some channel.
>
> Cc: Dr. David Alan Gilbert <dgilbert@redhat.com>
> Signed-off-by: Fei Li <fli@suse.com>
> Reviewed-by: Peter Xu <peterx@redhat.com>
> ---
>  migration/channel.c   | 11 ++++++-----
>  migration/migration.c |  9 +++++++--
>  migration/migration.h |  2 +-
>  migration/ram.c       | 10 ++++++++--
>  migration/ram.h       |  2 +-
>  5 files changed, 23 insertions(+), 11 deletions(-)
>
> diff --git a/migration/channel.c b/migration/channel.c
> index 33e0e9b82f..20e4c8e2dc 100644
> --- a/migration/channel.c
> +++ b/migration/channel.c
> @@ -30,6 +30,7 @@
>  void migration_channel_process_incoming(QIOChannel *ioc)
>  {
>      MigrationState *s = migrate_get_current();
> +    Error *local_err = NULL;
>  
>      trace_migration_set_incoming_channel(
>          ioc, object_get_typename(OBJECT(ioc)));
> @@ -38,13 +39,13 @@ void migration_channel_process_incoming(QIOChannel *ioc)
>          *s->parameters.tls_creds &&
>          !object_dynamic_cast(OBJECT(ioc),
>                               TYPE_QIO_CHANNEL_TLS)) {
> -        Error *local_err = NULL;
>          migration_tls_channel_process_incoming(s, ioc, &local_err);
> -        if (local_err) {
> -            error_report_err(local_err);
> -        }
>      } else {
> -        migration_ioc_process_incoming(ioc);
> +        migration_ioc_process_incoming(ioc, &local_err);
> +    }
> +
> +    if (local_err) {
> +        error_report_err(local_err);
>      }
>  }
>  
> diff --git a/migration/migration.c b/migration/migration.c
> index 49ffb9997a..72106bddf0 100644
> --- a/migration/migration.c
> +++ b/migration/migration.c
> @@ -541,7 +541,7 @@ void migration_fd_process_incoming(QEMUFile *f)
>      migration_incoming_process();
>  }
>  
> -void migration_ioc_process_incoming(QIOChannel *ioc)
> +void migration_ioc_process_incoming(QIOChannel *ioc, Error **errp)
>  {
>      MigrationIncomingState *mis = migration_incoming_get_current();
>      bool start_migration;
> @@ -563,9 +563,14 @@ void migration_ioc_process_incoming(QIOChannel *ioc)
>           */
>          start_migration = !migrate_use_multifd();
>      } else {
> +        Error *local_err = NULL;
>          /* Multiple connections */
>          assert(migrate_use_multifd());
> -        start_migration = multifd_recv_new_channel(ioc);
> +        start_migration = multifd_recv_new_channel(ioc, &local_err);
> +        if (local_err) {
> +            error_propagate(errp, local_err);
> +            return;
> +        }
>      }
>  
>      if (start_migration) {
> diff --git a/migration/migration.h b/migration/migration.h
> index e413d4d8b6..02b7304610 100644
> --- a/migration/migration.h
> +++ b/migration/migration.h
> @@ -229,7 +229,7 @@ struct MigrationState
>  void migrate_set_state(int *state, int old_state, int new_state);
>  
>  void migration_fd_process_incoming(QEMUFile *f);
> -void migration_ioc_process_incoming(QIOChannel *ioc);
> +void migration_ioc_process_incoming(QIOChannel *ioc, Error **errp);
>  void migration_incoming_process(void);
>  
>  bool  migration_has_all_channels(void);
> diff --git a/migration/ram.c b/migration/ram.c
> index 7e7deec4d8..c7e3d6b0fd 100644
> --- a/migration/ram.c
> +++ b/migration/ram.c
> @@ -1323,7 +1323,7 @@ bool multifd_recv_all_channels_created(void)
>  }
>  
>  /* Return true if multifd is ready for the migration, otherwise false */
> -bool multifd_recv_new_channel(QIOChannel *ioc)
> +bool multifd_recv_new_channel(QIOChannel *ioc, Error **errp)
>  {
>      MultiFDRecvParams *p;
>      Error *local_err = NULL;
> @@ -1331,6 +1331,10 @@ bool multifd_recv_new_channel(QIOChannel *ioc)
>  
>      id = multifd_recv_initial_packet(ioc, &local_err);
>      if (id < 0) {
> +        error_propagate_prepend(errp, local_err,
> +                                "failed to receive packet"
> +                                " via multifd channel %d: ",
> +                                atomic_read(&multifd_recv_state->count));
>          multifd_recv_terminate_threads(local_err);
>          return false;

Here, we return false without setting an error.

>      }
> @@ -1340,6 +1344,7 @@ bool multifd_recv_new_channel(QIOChannel *ioc)
>          error_setg(&local_err, "multifd: received id '%d' already setup'",
>                     id);
>          multifd_recv_terminate_threads(local_err);
> +        error_propagate(errp, local_err);
>          return false;

Here, we return false with setting an error.

>      }
>      p->c = ioc;
> @@ -1351,7 +1356,8 @@ bool multifd_recv_new_channel(QIOChannel *ioc)
>      qemu_thread_create(&p->thread, p->name, multifd_recv_thread, p,
>                         QEMU_THREAD_JOINABLE);
>      atomic_inc(&multifd_recv_state->count);
> -    return multifd_recv_state->count == migrate_multifd_channels();
> +    return atomic_read(&multifd_recv_state->count) ==
> +           migrate_multifd_channels();

Here, we return either true of false without setting an error.

Taken together, there are three cases:

1. Succeed and return true

2. Succeed and return false

3. Fail (set an error) and return false.

Assuming that's what we want: please update the function comment to
spell them out.

>  }
>  
>  /**
> diff --git a/migration/ram.h b/migration/ram.h
> index 83ff1bc11a..046d3074be 100644
> --- a/migration/ram.h
> +++ b/migration/ram.h
> @@ -47,7 +47,7 @@ int multifd_save_cleanup(Error **errp);
>  int multifd_load_setup(void);
>  int multifd_load_cleanup(Error **errp);
>  bool multifd_recv_all_channels_created(void);
> -bool multifd_recv_new_channel(QIOChannel *ioc);
> +bool multifd_recv_new_channel(QIOChannel *ioc, Error **errp);
>  
>  uint64_t ram_pagesize_summary(void);
>  int ram_save_queue_pages(const char *rbname, ram_addr_t start, ram_addr_t len);

