Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 06 Dec 2018 08:53:30 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 10A0C5804C1
	for <like.xu@linux.intel.com>; Wed,  5 Dec 2018 06:03:51 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 05 Dec 2018 06:03:50 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AKcs5OR8Gsg1jhP9uRHKM819IXTAuvvDOBiVQ1KB2?=
 =?us-ascii?q?2ukcTK2v8tzYMVDF4r011RmVBdWds6oMotGVmpioYXYH75eFvSJKW713fDhBt/?=
 =?us-ascii?q?8rmRc9CtWOE0zxIa2iRSU7GMNfSA0tpCnjYgBaF8nkelLdvGC54yIMFRXjLwp1?=
 =?us-ascii?q?Ifn+FpLPg8it2O2+557ebx9UiDahfLh/MAi4oQLNu8cMnIBsMLwxyhzHontJf+?=
 =?us-ascii?q?RZ22ZlLk+Nkhj/+8m94odt/zxftPw9+cFAV776f7kjQrxDEDsmKWE169b1uhTF?=
 =?us-ascii?q?UACC+2ETUmQSkhpPHgjF8BT3VYr/vyfmquZw3jSRMNboRr4oRzut86ZrSAfpiC?=
 =?us-ascii?q?gZMT457HrXgdF0gK5CvR6tuwBzz4vSbYqINvRxY7ndcMsaS2RfUMZfWS5ODICy?=
 =?us-ascii?q?YIQAE+UPMvtWr5H/qlUMohayGAehCP/xxT9TnXL2wbQ63v49HQ3axgEtHdQDu2?=
 =?us-ascii?q?nUotXvM6cSVPi4wq7SwjXZbPNWxCz945XUfxA7pPGDRqhwcdfKyUkzCQzFlEib?=
 =?us-ascii?q?pIv/MDOP0+QCqHKb7/d7WOK1lWEotgFxrSKzxss2lobJgYcVx0nC+C5kw4g1Pc?=
 =?us-ascii?q?W1RFBnbdOnCpdcqjyWOohsTs88TWxluDw2xqAEtJKjYiQG1JAqywTCZ/GJbYSE?=
 =?us-ascii?q?+A/vWeWfLDtimn5oe7SyjAuo/0e60O3zTMy03U5KriVbltnMsWgA1xjS6sicVv?=
 =?us-ascii?q?t95V2t2TmJ1wDO8O1EJlo0laXDJ54gxL4/iIYTvFzdEiPqm0j6lrKaelgn9+Sy?=
 =?us-ascii?q?9ejqbLXrqoWBO4J2kg3+N74hms27AeQ2KAgOWG2b9Pyl1LL9+E35XaxGgeAona?=
 =?us-ascii?q?nHrp/aId0XqbW+Aw9I1IYs9wiwDyyh3NQcnHkHL0xKdAiIjoj0I1zOJPH4DfGi?=
 =?us-ascii?q?g1WjijtrxvbGPqH/DZXJNHTMjLDhfbNm5k5azwozy99f55RJCr0bJ/LzQEDxuM?=
 =?us-ascii?q?TCDhAlKwy03/rnCNJl24MaWGKPAbGWPLndsF+V/e8vJ+iMZIkIuDfyMfQl5vju?=
 =?us-ascii?q?jWMnll8ZZ6WmwZwXaHXrVslgOFiTNHrwns8aQyBNugslUPesjlqEXjhOIXGoUO?=
 =?us-ascii?q?U57zA/DYugSoDbWoGqhqfGxSq+A9haa35LDgOxF2z1fdCBUvYIdCXAO8Jkj3kI?=
 =?us-ascii?q?WKasT8o72AizuRTm47xgKOXS52sfr520z8V/5eDYiUQv8ydpBd+WyWCHQjJImT?=
 =?us-ascii?q?YtTiU9mYl5rVb8gnOey6VxnrQMENVJ7PpPXh03c5rB1eFzFvjoVw7Bd8vPQ1Gj?=
 =?us-ascii?q?FIaIGzY0G/c42dwTeA5UAdColA3YwyewS+scjbmBHoEc6K/Q33HtYc16ziCVh+?=
 =?us-ascii?q?Eak1A6T54XZiWdjall+l2WXtaRng=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BJAABL2QdchxHrdtBkHQEBBQEHBQGBU?=
 =?us-ascii?q?gcBCwGBMIE5gRYTg3mIeIsvgg2JIIUhhBKEeYFzFBgDEYRAgxIiNQgNAQMBAQE?=
 =?us-ascii?q?BAQECARMBAQEKCwkIGw4jDII2BQIDGgEGglwBAgIBAQIgIwopAwIBAQIGAQEKG?=
 =?us-ascii?q?gIFHQQCAgMBCwEEGDETBYMcAYF0BQgBBKRzgS+EQUCFKIELixMXgX+DbjWEOke?=
 =?us-ascii?q?DBIJXAokzhgKGNIptCYcDij8YgiiHOIdPLIpKhg+HeYFIAoIJcBWDJwmCHhcSi?=
 =?us-ascii?q?AmBFIRvQDGBBxyJCoF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0BJAABL2QdchxHrdtBkHQEBBQEHBQGBUgcBCwGBMIE5gRY?=
 =?us-ascii?q?Tg3mIeIsvgg2JIIUhhBKEeYFzFBgDEYRAgxIiNQgNAQMBAQEBAQECARMBAQEKC?=
 =?us-ascii?q?wkIGw4jDII2BQIDGgEGglwBAgIBAQIgIwopAwIBAQIGAQEKGgIFHQQCAgMBCwE?=
 =?us-ascii?q?EGDETBYMcAYF0BQgBBKRzgS+EQUCFKIELixMXgX+DbjWEOkeDBIJXAokzhgKGN?=
 =?us-ascii?q?IptCYcDij8YgiiHOIdPLIpKhg+HeYFIAoIJcBWDJwmCHhcSiAmBFIRvQDGBBxy?=
 =?us-ascii?q?JCoF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,317,1539673200"; 
   d="scan'208";a="55014728"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 05 Dec 2018 06:03:49 -0800
Received: from localhost ([::1]:34738 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gUXmE-0004mO-Bk
	for like.xu@linux.intel.com; Wed, 05 Dec 2018 09:03:46 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:58917)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <armbru@redhat.com>) id 1gUXlb-000421-48
	for qemu-devel@nongnu.org; Wed, 05 Dec 2018 09:03:15 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <armbru@redhat.com>) id 1gUXlR-00086p-Kr
	for qemu-devel@nongnu.org; Wed, 05 Dec 2018 09:03:05 -0500
Received: from mx1.redhat.com ([209.132.183.28]:56842)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <armbru@redhat.com>) id 1gUXlR-00085e-CS
	for qemu-devel@nongnu.org; Wed, 05 Dec 2018 09:02:57 -0500
Received: from smtp.corp.redhat.com (int-mx03.intmail.prod.int.phx2.redhat.com
	[10.5.11.13])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id AA0053002315
	for <qemu-devel@nongnu.org>; Wed,  5 Dec 2018 14:02:56 +0000 (UTC)
Received: from blackfin.pond.sub.org (ovpn-116-56.ams2.redhat.com
	[10.36.116.56])
	by smtp.corp.redhat.com (Postfix) with ESMTPS id 557BF648AA;
	Wed,  5 Dec 2018 14:02:54 +0000 (UTC)
Received: by blackfin.pond.sub.org (Postfix, from userid 1000)
	id DD039113860E; Wed,  5 Dec 2018 15:02:52 +0100 (CET)
From: Markus Armbruster <armbru@redhat.com>
To: =?utf-8?Q?Marc-Andr=C3=A9?= Lureau <marcandre.lureau@redhat.com>
References: <20180706105753.26700-1-marcandre.lureau@redhat.com>
	<20180706105753.26700-9-marcandre.lureau@redhat.com>
Date: Wed, 05 Dec 2018 15:02:52 +0100
In-Reply-To: <20180706105753.26700-9-marcandre.lureau@redhat.com>
	(=?utf-8?Q?=22Marc-Andr=C3=A9?=
	Lureau"'s message of "Fri, 6 Jul 2018 12:57:34 +0200")
Message-ID: <87va48rrzn.fsf@dusky.pond.sub.org>
User-Agent: Gnus/5.13 (Gnus v5.13) Emacs/26.1 (gnu/linux)
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.13
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.43]);
	Wed, 05 Dec 2018 14:02:56 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH v6 08/27] qapi: change enum visitor and
 gen_enum* to take QAPISchemaMember
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: qemu-devel@nongnu.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Marc-Andr=C3=A9 Lureau <marcandre.lureau@redhat.com> writes:

> This will allow to add and access more properties associated with enum
> values/members, like the associated 'if' condition. We may want to
> have a specialized type QAPISchemaEnumMember, for now this will do.

Well, we can add all we want without this patch.  The patch is about
enabling access in visit_enum_type() and ...

> While at it, also modify gen_enum() and gen_enum_lookup() for the
> same reason.

... these two helpers.  Worthwhile if later patches need such access.
We'll see.

> Suggested-by: Markus Armbruster <armbru@redhat.com>
> Signed-off-by: Marc-Andr=C3=A9 Lureau <marcandre.lureau@redhat.com>
> ---
>  scripts/qapi/common.py         | 22 +++++++++++-----------
>  scripts/qapi/doc.py            |  2 +-
>  scripts/qapi/events.py         |  2 +-
>  scripts/qapi/introspect.py     |  5 +++--
>  scripts/qapi/types.py          |  6 +++---
>  scripts/qapi/visit.py          |  2 +-
>  tests/qapi-schema/test-qapi.py |  4 ++--
>  7 files changed, 22 insertions(+), 21 deletions(-)
>
> diff --git a/scripts/qapi/common.py b/scripts/qapi/common.py
> index 7020b88abc..a353670079 100644
> --- a/scripts/qapi/common.py
> +++ b/scripts/qapi/common.py
> @@ -1063,7 +1063,7 @@ class QAPISchemaVisitor(object):
>      def visit_builtin_type(self, name, info, json_type):
>          pass
>=20=20
> -    def visit_enum_type(self, name, info, ifcond, values, prefix):
> +    def visit_enum_type(self, name, info, ifcond, members, prefix):
>          pass
>=20=20
>      def visit_array_type(self, name, info, ifcond, element_type):
> @@ -1193,7 +1193,7 @@ class QAPISchemaEnumType(QAPISchemaType):
>=20=20
>      def visit(self, visitor):
>          visitor.visit_enum_type(self.name, self.info, self.ifcond,
> -                                self.member_names(), self.prefix)
> +                                self.members, self.prefix)
>=20=20
>=20=20

Just two uses of QAPISchemaType.member_names() left.  See also below.

>  class QAPISchemaArrayType(QAPISchemaType):
> @@ -2012,19 +2012,19 @@ def _wrap_ifcond(ifcond, before, after):
>      return out
>=20=20
>=20=20
> -def gen_enum_lookup(name, values, prefix=3DNone):
> +def gen_enum_lookup(name, members, prefix=3DNone):
>      ret =3D mcgen('''
>=20=20
>  const QEnumLookup %(c_name)s_lookup =3D {
>      .array =3D (const char *const[]) {
>  ''',
>                  c_name=3Dc_name(name))
> -    for value in values:
> -        index =3D c_enum_const(name, value, prefix)
> +    for m in members:
> +        index =3D c_enum_const(name, m.name, prefix)
>          ret +=3D mcgen('''
> -        [%(index)s] =3D "%(value)s",
> +        [%(index)s] =3D "%(name)s",
>  ''',
> -                     index=3Dindex, value=3Dvalue)
> +                     index=3Dindex, name=3Dm.name)
>=20=20
>      ret +=3D mcgen('''
>      },
> @@ -2035,9 +2035,9 @@ const QEnumLookup %(c_name)s_lookup =3D {
>      return ret
>=20=20
>=20=20
> -def gen_enum(name, values, prefix=3DNone):
> +def gen_enum(name, members, prefix=3DNone):
>      # append automatically generated _MAX value
> -    enum_values =3D values + ['_MAX']
> +    enum_members =3D members + [QAPISchemaMember('_MAX')]
>=20=20
>      ret =3D mcgen('''
>=20=20
> @@ -2045,11 +2045,11 @@ typedef enum %(c_name)s {
>  ''',
>                  c_name=3Dc_name(name))
>=20=20
> -    for value in enum_values:
> +    for m in enum_members:
>          ret +=3D mcgen('''
>      %(c_enum)s,
>  ''',
> -                     c_enum=3Dc_enum_const(name, value, prefix))
> +                     c_enum=3Dc_enum_const(name, m.name, prefix))
>=20=20
>      ret +=3D mcgen('''
>  } %(c_name)s;
> diff --git a/scripts/qapi/doc.py b/scripts/qapi/doc.py
> index 987fd3c943..76cb186ff9 100755
> --- a/scripts/qapi/doc.py
> +++ b/scripts/qapi/doc.py
> @@ -206,7 +206,7 @@ class QAPISchemaGenDocVisitor(qapi.common.QAPISchemaV=
isitor):
>      def write(self, output_dir):
>          self._gen.write(output_dir, self._prefix + 'qapi-doc.texi')
>=20=20
> -    def visit_enum_type(self, name, info, ifcond, values, prefix):
> +    def visit_enum_type(self, name, info, ifcond, members, prefix):
>          doc =3D self.cur_doc
>          self._gen.add(TYPE_FMT(type=3D'Enum',
>                                 name=3Ddoc.symbol,
> diff --git a/scripts/qapi/events.py b/scripts/qapi/events.py
> index 764ef177ab..ea4dac6a05 100644
> --- a/scripts/qapi/events.py
> +++ b/scripts/qapi/events.py
> @@ -189,7 +189,7 @@ class QAPISchemaGenEventVisitor(QAPISchemaModularCVis=
itor):
>              self._genh.add(gen_event_send_decl(name, arg_type, boxed))
>              self._genc.add(gen_event_send(name, arg_type, boxed,
>                                            self._enum_name))
> -        self._event_names.append(name)
> +        self._event_names.append(QAPISchemaMember(name))
>=20=20
>=20=20

Rename ._event_names to ._event_enum_members?

May want to rename .enum_name to ._event_enum_name then.

>  def gen_events(schema, output_dir, prefix):
> diff --git a/scripts/qapi/introspect.py b/scripts/qapi/introspect.py
> index 71d4a779ce..3f1ca99f6d 100644
> --- a/scripts/qapi/introspect.py
> +++ b/scripts/qapi/introspect.py
> @@ -160,8 +160,9 @@ const QLitObject %(c_name)s =3D %(c_string)s;
>      def visit_builtin_type(self, name, info, json_type):
>          self._gen_qlit(name, 'builtin', {'json-type': json_type}, [])
>=20=20
> -    def visit_enum_type(self, name, info, ifcond, values, prefix):
> -        self._gen_qlit(name, 'enum', {'values': values}, ifcond)
> +    def visit_enum_type(self, name, info, ifcond, members, prefix):
> +        self._gen_qlit(name, 'enum',
> +                       {'values': [m.name for m in members]}, ifcond)

Can't use QAPISchemaEnumType.member_names() here, since we don't have
the QAPISchemaEnumType, only its .members.

>=20=20
>      def visit_array_type(self, name, info, ifcond, element_type):
>          element =3D self._use_type(element_type)
> diff --git a/scripts/qapi/types.py b/scripts/qapi/types.py
> index 91f87d0b8f..2d4a70f810 100644
> --- a/scripts/qapi/types.py
> +++ b/scripts/qapi/types.py
> @@ -213,10 +213,10 @@ class QAPISchemaGenTypeVisitor(QAPISchemaModularCVi=
sitor):
>          self._genh.add(gen_type_cleanup_decl(name))
>          self._genc.add(gen_type_cleanup(name))
>=20=20
> -    def visit_enum_type(self, name, info, ifcond, values, prefix):
> +    def visit_enum_type(self, name, info, ifcond, members, prefix):
>          with ifcontext(ifcond, self._genh, self._genc):
> -            self._genh.preamble_add(gen_enum(name, values, prefix))
> -            self._genc.add(gen_enum_lookup(name, values, prefix))
> +            self._genh.preamble_add(gen_enum(name, members, prefix))
> +            self._genc.add(gen_enum_lookup(name, members, prefix))
>=20=20
>      def visit_array_type(self, name, info, ifcond, element_type):
>          with ifcontext(ifcond, self._genh, self._genc):
> diff --git a/scripts/qapi/visit.py b/scripts/qapi/visit.py
> index 460cf12989..24f85a2e85 100644
> --- a/scripts/qapi/visit.py
> +++ b/scripts/qapi/visit.py
> @@ -310,7 +310,7 @@ class QAPISchemaGenVisitVisitor(QAPISchemaModularCVis=
itor):
>  ''',
>                                        types=3Dtypes))
>=20=20
> -    def visit_enum_type(self, name, info, ifcond, values, prefix):
> +    def visit_enum_type(self, name, info, ifcond, members, prefix):
>          with ifcontext(ifcond, self._genh, self._genc):
>              self._genh.add(gen_visit_decl(name, scalar=3DTrue))
>              self._genc.add(gen_visit_enum(name))
> diff --git a/tests/qapi-schema/test-qapi.py b/tests/qapi-schema/test-qapi=
.py
> index cea21c773a..27f776693e 100644
> --- a/tests/qapi-schema/test-qapi.py
> +++ b/tests/qapi-schema/test-qapi.py
> @@ -23,8 +23,8 @@ class QAPISchemaTestVisitor(QAPISchemaVisitor):
>      def visit_include(self, name, info):
>          print('include %s' % name)
>=20=20
> -    def visit_enum_type(self, name, info, ifcond, values, prefix):
> -        print('enum %s %s' % (name, values))
> +    def visit_enum_type(self, name, info, ifcond, members, prefix):
> +        print('enum %s %s' % (name, [m.name for m in members]))
>          if prefix:
>              print('    prefix %s' % prefix)
>          self._print_if(ifcond)

Likewise.

Perhaps we can get rid of .member_names().  Not this patch's business,
of course.

Assuming later patches make use of this:
Reviewed-by: Markus Armbruster <armbru@redhat.com>

