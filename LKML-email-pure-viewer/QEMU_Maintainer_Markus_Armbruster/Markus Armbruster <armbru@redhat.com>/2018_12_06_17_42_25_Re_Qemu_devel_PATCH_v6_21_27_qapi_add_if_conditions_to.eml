Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:51:11 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 3D243580375
	for <like.xu@linux.intel.com>; Thu,  6 Dec 2018 09:43:43 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by orsmga007-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 09:43:41 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A5d8OgBd6itntOLcByy3n3+2SlGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc26YRWN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRBDI2i?=
 =?us-ascii?q?YYsBAegOM+VWoIbyu1QAogawBRGuCe3txTJEm3H70bEk3OQ6CgzGwBUgEsgSvH?=
 =?us-ascii?q?jIttj4NqEfWv21wqnSyjXDautb1zDn54jScRAhvOqMVq9sfMrLzEkgDBnFjkiL?=
 =?us-ascii?q?qYz5ITyVzPkGvm+B4Op6UOKgkHQnqxxqrzi12Mgjl4nJiZgJylze6Sp5x4M1KM?=
 =?us-ascii?q?S+RUVmb9CkF55QuDubN4twWs4iTGBouDo6yr0bopG3ZjQFyJMixxLHd/yGc5CI?=
 =?us-ascii?q?7Qz5WOaXOzh4gWxqdbSijBix6Uit0vPwWtW33VpQsyZJj9rBumoT2xHd6sWLUO?=
 =?us-ascii?q?Zx80W51TqRywze7vtILV06mKbFMZIt3709m5QJvUjdHSL7nlj9grWMeUU+4Oeo?=
 =?us-ascii?q?7vzqYrX4qZ+YMI95kgX+MqU1msyjGuQ0KAcOX26G+eim073j50L5TK1Ljv0wjK?=
 =?us-ascii?q?bZrIjXKdoHqqO6GQNZz5sv5hWlAzu43tkVnWMLIE9HdR6fiojmIVDOIPT2Dfel?=
 =?us-ascii?q?hFSslS9mx+nYMb3kH5XBN2XMn6n/fblj705Q0RE8zddC55JSFr4OPunzVkj1tN?=
 =?us-ascii?q?zZDR82LRa4wun6CNhl0oMeWGSPArKWMa/IsF+I4P4vLPeIZIMPpDn9LP0l6uXo?=
 =?us-ascii?q?jX8+n18dcq+p3YYNZHC/BPRmLF2VYWDwjdcZDWcKog0+QfTuiF2DUj5ceWy+Xq?=
 =?us-ascii?q?0h5jwgDIKmDIHDRp2igbCb3Se7GIFWaX5CClyWDXjocICECL8xbjmPKJphjiAc?=
 =?us-ascii?q?TurmDIsgzg218gn9zbVhM6zT4CJfsJvi0N184arUjQ0z8jpvSN2Q1nzIQ2xqk2?=
 =?us-ascii?q?dbejktwaoqpEV8zkuEg7F1huEdGdFN6vcMSAojKJPH08R8DNb9XB+Hec2GH027?=
 =?us-ascii?q?SNerCi1kU9Qq3tUVaFx8EdjxsheW+iOwCPo8kbCRhdQQ77jR1mW5c8N00X3P0q?=
 =?us-ascii?q?U7gh8iX9FCPHCOnKNz9wHPQYXOlhPKubytcPE51TTO6XzL5HCLtltFSxJ9S+2R?=
 =?us-ascii?q?VGoabFHLhc706kPLU/mlDrFxYVgJ8tKLNqYfMo6htl5BXvq2fY2GO28=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AUAABoXglcmBHrdtBkHgEGBwaBUQkLA?=
 =?us-ascii?q?YEwgTmBFhODeoh4izCCDYkgji6BcxQYBw2EQIMXIjQJDQEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BAQEICwsGGw4jDII2BQIDGgEGglwBAgIBAQIgBB8KKQMCAQECBgEBChoCBR0EA?=
 =?us-ascii?q?gIDAQsBBBgxEwWDHAGBdAUIAQQKpgN8M4oqgQuLFBeBf4Qjgx4CgWGDBIJXAo8?=
 =?us-ascii?q?3hjWKHlUJhwSKQhiCKYc5h1SKfIJ+gxiHeoFGgg1wFYMnCYIeFxKDOIRRgRSEb?=
 =?us-ascii?q?0AxgQcciCeBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0AUAABoXglcmBHrdtBkHgEGBwaBUQkLAYEwgTmBFhODeoh?=
 =?us-ascii?q?4izCCDYkgji6BcxQYBw2EQIMXIjQJDQEDAQEBAQEBAgETAQEBAQEICwsGGw4jD?=
 =?us-ascii?q?II2BQIDGgEGglwBAgIBAQIgBB8KKQMCAQECBgEBChoCBR0EAgIDAQsBBBgxEwW?=
 =?us-ascii?q?DHAGBdAUIAQQKpgN8M4oqgQuLFBeBf4Qjgx4CgWGDBIJXAo83hjWKHlUJhwSKQ?=
 =?us-ascii?q?hiCKYc5h1SKfIJ+gxiHeoFGgg1wFYMnCYIeFxKDOIRRgRSEb0AxgQcciCeBdwE?=
 =?us-ascii?q?B?=
X-IronPort-AV: E=Sophos;i="5.56,323,1539673200"; 
   d="scan'208";a="55839423"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 06 Dec 2018 09:43:41 -0800
Received: from localhost ([::1]:42320 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gUxga-0004jH-Ow
	for like.xu@linux.intel.com; Thu, 06 Dec 2018 12:43:40 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:40253)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <armbru@redhat.com>) id 1gUxgJ-0004hK-PK
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 12:43:29 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <armbru@redhat.com>) id 1gUxg7-0001ky-HS
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 12:43:19 -0500
Received: from mx1.redhat.com ([209.132.183.28]:47996)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <armbru@redhat.com>) id 1gUxg5-0008No-EK
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 12:43:09 -0500
Received: from smtp.corp.redhat.com (int-mx07.intmail.prod.int.phx2.redhat.com
	[10.5.11.22])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id AD7163003BDB
	for <qemu-devel@nongnu.org>; Thu,  6 Dec 2018 17:42:45 +0000 (UTC)
Received: from blackfin.pond.sub.org (ovpn-116-56.ams2.redhat.com
	[10.36.116.56])
	by smtp.corp.redhat.com (Postfix) with ESMTPS id 077251057074;
	Thu,  6 Dec 2018 17:42:26 +0000 (UTC)
Received: by blackfin.pond.sub.org (Postfix, from userid 1000)
	id 7DF85113860E; Thu,  6 Dec 2018 18:42:25 +0100 (CET)
From: Markus Armbruster <armbru@redhat.com>
To: =?utf-8?Q?Marc-Andr=C3=A9?= Lureau <marcandre.lureau@redhat.com>
References: <20180706105753.26700-1-marcandre.lureau@redhat.com>
	<20180706105753.26700-22-marcandre.lureau@redhat.com>
Date: Thu, 06 Dec 2018 18:42:25 +0100
In-Reply-To: <20180706105753.26700-22-marcandre.lureau@redhat.com>
	(=?utf-8?Q?=22Marc-Andr=C3=A9?= Lureau"'s message of "Fri, 6 Jul 2018
	12:57:47 +0200")
Message-ID: <87bm5y8sce.fsf@dusky.pond.sub.org>
User-Agent: Gnus/5.13 (Gnus v5.13) Emacs/26.1 (gnu/linux)
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable
X-Scanned-By: MIMEDefang 2.84 on 10.5.11.22
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.40]);
	Thu, 06 Dec 2018 17:42:45 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH v6 21/27] qapi: add #if conditions to
 generated code members
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: qemu-devel@nongnu.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Marc-Andr=C3=A9 Lureau <marcandre.lureau@redhat.com> writes:

> Wrap generated enum/struct members and code with #if/#endif, using the

enum and struct members

> .ifcond members added in the previous patches.
>
> Some types generate both enum and struct members for example, so a
> step-by-step is unnecessarily complicated to deal with (it would
> easily generate invalid intermediary code).

Can you give an example of a schema definition that would lead to
complications?

>
> Signed-off-by: Marc-Andr=C3=A9 Lureau <marcandre.lureau@redhat.com>
> ---
>  scripts/qapi/common.py     |  4 ++++
>  scripts/qapi/introspect.py | 13 +++++++++----
>  scripts/qapi/types.py      |  4 ++++
>  scripts/qapi/visit.py      |  6 ++++++
>  4 files changed, 23 insertions(+), 4 deletions(-)
>
> diff --git a/scripts/qapi/common.py b/scripts/qapi/common.py
> index b3b64a60bf..a66c035b91 100644
> --- a/scripts/qapi/common.py
> +++ b/scripts/qapi/common.py
> @@ -2098,11 +2098,13 @@ const QEnumLookup %(c_name)s_lookup =3D {
>  ''',
>                  c_name=3Dc_name(name))
>      for m in members:
> +        ret +=3D gen_if(m.ifcond)
>          index =3D c_enum_const(name, m.name, prefix)
>          ret +=3D mcgen('''
>          [%(index)s] =3D "%(name)s",
>  ''',
>                       index=3Dindex, name=3Dm.name)
> +        ret +=3D gen_endif(m.ifcond)
>=20=20
>      ret +=3D mcgen('''
>      },
> @@ -2124,10 +2126,12 @@ typedef enum %(c_name)s {
>                  c_name=3Dc_name(name))
>=20=20
>      for m in enum_members:
> +        ret +=3D gen_if(m.ifcond)
>          ret +=3D mcgen('''
>      %(c_enum)s,
>  ''',
>                       c_enum=3Dc_enum_const(name, m.name, prefix))
> +        ret +=3D gen_endif(m.ifcond)
>=20=20
>      ret +=3D mcgen('''
>  } %(c_name)s;
> diff --git a/scripts/qapi/introspect.py b/scripts/qapi/introspect.py
> index 3f1ca99f6d..bf5db51f4a 100644
> --- a/scripts/qapi/introspect.py
> +++ b/scripts/qapi/introspect.py
> @@ -148,6 +148,8 @@ const QLitObject %(c_name)s =3D %(c_string)s;
>          ret =3D {'name': member.name, 'type': self._use_type(member.type=
)}
>          if member.optional:
>              ret['default'] =3D None
> +        if member.ifcond:
> +            ret =3D (ret, member.ifcond)
>          return ret
>=20=20
>      def _gen_variants(self, tag_name, variants):
> @@ -155,14 +157,16 @@ const QLitObject %(c_name)s =3D %(c_string)s;
>                  'variants': [self._gen_variant(v) for v in variants]}
>=20=20
>      def _gen_variant(self, variant):
> -        return {'case': variant.name, 'type': self._use_type(variant.typ=
e)}
> +        return ({'case': variant.name, 'type': self._use_type(variant.ty=
pe)},
> +                variant.ifcond)

Looks different in your rebased version at
https://github.com/elmarco/qemu.git branch qapi-if.  I'm only skimming
this version.

Note to self: always creates the tuple form, even when there's no
if-condition.  Differs from _gen_qlit(), which creates a tuple only when
there's a if-condition.  Not wrong, just a bit inconsistent.

>=20=20
>      def visit_builtin_type(self, name, info, json_type):
>          self._gen_qlit(name, 'builtin', {'json-type': json_type}, [])
>=20=20
>      def visit_enum_type(self, name, info, ifcond, members, prefix):
>          self._gen_qlit(name, 'enum',
> -                       {'values': [m.name for m in members]}, ifcond)
> +                       {'values': [(m.name, m.ifcond) for m in members]},
> +                       ifcond)

Likewise.

>=20=20
>      def visit_array_type(self, name, info, ifcond, element_type):
>          element =3D self._use_type(element_type)
> @@ -178,8 +182,9 @@ const QLitObject %(c_name)s =3D %(c_string)s;
>=20=20
>      def visit_alternate_type(self, name, info, ifcond, variants):
>          self._gen_qlit(name, 'alternate',
> -                       {'members': [{'type': self._use_type(m.type)}
> -                                    for m in variants.variants]}, ifcond)
> +                       {'members': [
> +                           ({'type': self._use_type(m.type)}, m.ifcond)
> +                           for m in variants.variants]}, ifcond)

Likewise.

>=20=20
>      def visit_command(self, name, info, ifcond, arg_type, ret_type, gen,
>                        success_response, boxed, allow_oob, allow_preconfi=
g):
> diff --git a/scripts/qapi/types.py b/scripts/qapi/types.py
> index 2d4a70f810..7d9eef6320 100644
> --- a/scripts/qapi/types.py
> +++ b/scripts/qapi/types.py
> @@ -43,6 +43,7 @@ struct %(c_name)s {
>  def gen_struct_members(members):
>      ret =3D ''
>      for memb in members:
> +        ret +=3D gen_if(memb.ifcond)
>          if memb.optional:
>              ret +=3D mcgen('''
>      bool has_%(c_name)s;
> @@ -52,6 +53,7 @@ def gen_struct_members(members):
>      %(c_type)s %(c_name)s;
>  ''',
>                       c_type=3Dmemb.type.c_type(), c_name=3Dc_name(memb.n=
ame))
> +        ret +=3D gen_endif(memb.ifcond)
>      return ret
>=20=20
>=20=20
> @@ -131,11 +133,13 @@ def gen_variants(variants):
>      for var in variants.variants:
>          if var.type.name =3D=3D 'q_empty':
>              continue
> +        ret +=3D gen_if(var.ifcond)
>          ret +=3D mcgen('''
>          %(c_type)s %(c_name)s;
>  ''',
>                       c_type=3Dvar.type.c_unboxed_type(),
>                       c_name=3Dc_name(var.name))
> +        ret +=3D gen_endif(var.ifcond)
>=20=20
>      ret +=3D mcgen('''
>      } u;
> diff --git a/scripts/qapi/visit.py b/scripts/qapi/visit.py
> index 24f85a2e85..82eab72b21 100644
> --- a/scripts/qapi/visit.py
> +++ b/scripts/qapi/visit.py
> @@ -54,6 +54,7 @@ void visit_type_%(c_name)s_members(Visitor *v, %(c_name=
)s *obj, Error **errp)
>                       c_type=3Dbase.c_name())
>=20=20
>      for memb in members:
> +        ret +=3D gen_if(memb.ifcond)
>          if memb.optional:
>              ret +=3D mcgen('''
>      if (visit_optional(v, "%(name)s", &obj->has_%(c_name)s)) {
> @@ -73,6 +74,7 @@ void visit_type_%(c_name)s_members(Visitor *v, %(c_name=
)s *obj, Error **errp)
>              ret +=3D mcgen('''
>      }
>  ''')
> +        ret +=3D gen_endif(memb.ifcond)
>=20=20
>      if variants:
>          ret +=3D mcgen('''
> @@ -84,6 +86,7 @@ void visit_type_%(c_name)s_members(Visitor *v, %(c_name=
)s *obj, Error **errp)
>              case_str =3D c_enum_const(variants.tag_member.type.name,
>                                      var.name,
>                                      variants.tag_member.type.prefix)
> +            ret +=3D gen_if(var.ifcond)
>              if var.type.name =3D=3D 'q_empty':
>                  # valid variant and nothing to do
>                  ret +=3D mcgen('''
> @@ -100,6 +103,7 @@ void visit_type_%(c_name)s_members(Visitor *v, %(c_na=
me)s *obj, Error **errp)
>                               case=3Dcase_str,
>                               c_type=3Dvar.type.c_name(), c_name=3Dc_name=
(var.name))
>=20=20
> +            ret +=3D gen_endif(var.ifcond)
>          ret +=3D mcgen('''
>      default:
>          abort();
> @@ -190,6 +194,7 @@ void visit_type_%(c_name)s(Visitor *v, const char *na=
me, %(c_name)s **obj, Error
>                  c_name=3Dc_name(name))
>=20=20
>      for var in variants.variants:
> +        ret +=3D gen_if(var.ifcond)
>          ret +=3D mcgen('''
>      case %(case)s:
>  ''',
> @@ -217,6 +222,7 @@ void visit_type_%(c_name)s(Visitor *v, const char *na=
me, %(c_name)s **obj, Error
>          ret +=3D mcgen('''
>          break;
>  ''')
> +        ret +=3D gen_endif(var.ifcond)
>=20=20
>      ret +=3D mcgen('''
>      case QTYPE_NONE:

