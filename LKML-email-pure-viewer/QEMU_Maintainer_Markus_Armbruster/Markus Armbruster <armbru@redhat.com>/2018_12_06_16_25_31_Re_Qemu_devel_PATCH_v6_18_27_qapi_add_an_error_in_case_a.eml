Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:50:13 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id DA9F158042F
	for <like.xu@linux.intel.com>; Thu,  6 Dec 2018 08:25:52 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga006-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 08:25:52 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AKDzaVRXIPzgD4ajuShcJTW4YrkbV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYbR2Et8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZAo2y?=
 =?us-ascii?q?cYUPAeQDMuhboYbyqEcBoxSjCwm0Bu7hyDBFimL40KEmzeshChrL3BA5H98UrH?=
 =?us-ascii?q?jYsM/4OaUUXOuozKfI1zLDb/ZO1Dn68ofIaBMhoeyXXbltbcfR00wvGBjfjlWN?=
 =?us-ascii?q?sozlIy2a1v4QuGWc9eVgT+evhHU9qwFsuTWv3NkjhZTJho0P1lDI7zl2wIEwJd?=
 =?us-ascii?q?ChTkNwfN2qEINIui2EK4d7QdkuT3x1tCs50LEKp5C2cSgQxJg6xRPTc+KLf5SM?=
 =?us-ascii?q?7x75SeqcLyl0iGh4dL+8iRu+61asx+76W8KpylhFtDBFncPJtn0V1xzc9MyHSv?=
 =?us-ascii?q?xl80el2DaPzBzT6vpeLUA7k6rbNoQtwrkqlpocqUjDHyn2l1vqjKKOaEko5uul?=
 =?us-ascii?q?5/76brn7pZKQLZF4hw/+P6g0h8CyA/w0Mg0UUGia/eS82qfj/Ur8QLhSl/05jK?=
 =?us-ascii?q?zZsI3DKcsGuKG5HRFa0oI65xmkCDemzdIYkmUZI1Jefx6Hi4npO1LQL/ziAva/?=
 =?us-ascii?q?nkyhkDNqx/DAI73gDY/BLnnFkLf9Y7l971RQxxY0zdBa/J9UDLYBIPT8Wk/3qd?=
 =?us-ascii?q?zUFBg5Mxa7w+r/EtVyypseWX6TAq+eKK7StV6I5uExLOWWa44VpS3wK/wk5/7o?=
 =?us-ascii?q?kH84lkURfaiv3ZsLdn+4Gu5qLFmeYXrp0Z88F3wXtF8+UPDykw/FFjpSfGqpGa?=
 =?us-ascii?q?Q74D49FcShF4iEQ4mshLmI2mC8BoFXYWZdTUmBFGqte4iaVvNfVSSJP8U0lzUF?=
 =?us-ascii?q?UaSmGZYs0AzruALkxr4iNOfN5yADqbrl09564fCVkgs9oidpBcaQ2H3YUmdvg2?=
 =?us-ascii?q?kTTCU31q0snUso716Z2u1RhfBClJR3+ulEWxpyYZvV1edzDdzoV0TFY82EQUuO?=
 =?us-ascii?q?WNiqATgtCNk2xoldTVx6HoCHhwrAwjHiKqUQnaaWH4A56OqI1mL0Ldxg42zL2K?=
 =?us-ascii?q?kokx8tRc4ZZj7uvbJ26wWGX92BqE6ejav/MP1EhCM=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AUAACATAlcmBHrdtBjHgEGBwaBUQkLA?=
 =?us-ascii?q?YEwgTmBFhODeoh4iy+CDYkgji6BcxQYAxGEQIMXIjQJDQEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BAQEICwsGGw4jDII2BQIDGgEGglwBAgIBAQIgIwopAwIBAQIGAQEKGgIFHQQCA?=
 =?us-ascii?q?gMBCwEEGDETBYMcAYF0BQgBBKYRgS+KKIELixQXgX+EI4UBgwSCVwKPN5EoCYc?=
 =?us-ascii?q?EikIYgimHOYdUmQyBRoINcBWDJwmCR4kdhG9AMYEHHIgngXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AUAACATAlcmBHrdtBjHgEGBwaBUQkLAYEwgTmBFhODeoh?=
 =?us-ascii?q?4iy+CDYkgji6BcxQYAxGEQIMXIjQJDQEDAQEBAQEBAgETAQEBAQEICwsGGw4jD?=
 =?us-ascii?q?II2BQIDGgEGglwBAgIBAQIgIwopAwIBAQIGAQEKGgIFHQQCAgMBCwEEGDETBYM?=
 =?us-ascii?q?cAYF0BQgBBKYRgS+KKIELixQXgX+EI4UBgwSCVwKPN5EoCYcEikIYgimHOYdUm?=
 =?us-ascii?q?QyBRoINcBWDJwmCR4kdhG9AMYEHHIgngXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,323,1539673200"; 
   d="scan'208";a="43861712"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 06 Dec 2018 08:25:52 -0800
Received: from localhost ([::1]:41805 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gUwTH-0000sj-EW
	for like.xu@linux.intel.com; Thu, 06 Dec 2018 11:25:51 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:40416)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <armbru@redhat.com>) id 1gUwT7-0000re-Ua
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 11:25:42 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <armbru@redhat.com>) id 1gUwT4-00022l-Gz
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 11:25:41 -0500
Received: from mx1.redhat.com ([209.132.183.28]:57756)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <armbru@redhat.com>) id 1gUwT4-000220-6u
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 11:25:38 -0500
Received: from smtp.corp.redhat.com (int-mx06.intmail.prod.int.phx2.redhat.com
	[10.5.11.16])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 0E0A637E66
	for <qemu-devel@nongnu.org>; Thu,  6 Dec 2018 16:25:37 +0000 (UTC)
Received: from blackfin.pond.sub.org (ovpn-116-56.ams2.redhat.com
	[10.36.116.56])
	by smtp.corp.redhat.com (Postfix) with ESMTPS id 52CED1822F;
	Thu,  6 Dec 2018 16:25:33 +0000 (UTC)
Received: by blackfin.pond.sub.org (Postfix, from userid 1000)
	id DACA7113860E; Thu,  6 Dec 2018 17:25:31 +0100 (CET)
From: Markus Armbruster <armbru@redhat.com>
To: =?utf-8?Q?Marc-Andr=C3=A9?= Lureau <marcandre.lureau@redhat.com>
References: <20180706105753.26700-1-marcandre.lureau@redhat.com>
	<20180706105753.26700-19-marcandre.lureau@redhat.com>
Date: Thu, 06 Dec 2018 17:25:31 +0100
In-Reply-To: <20180706105753.26700-19-marcandre.lureau@redhat.com>
	(=?utf-8?Q?=22Marc-Andr=C3=A9?= Lureau"'s message of "Fri, 6 Jul 2018
	12:57:44 +0200")
Message-ID: <871s6ubp1g.fsf@dusky.pond.sub.org>
User-Agent: Gnus/5.13 (Gnus v5.13) Emacs/26.1 (gnu/linux)
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.16
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.29]);
	Thu, 06 Dec 2018 16:25:37 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH v6 18/27] qapi: add an error in case a
 discriminator is conditionnal
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: qemu-devel@nongnu.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Marc-Andr=C3=A9 Lureau <marcandre.lureau@redhat.com> writes:

> Making a discriminator conditonal doesn't make much sense.

Good point (so easy to overlook!), but why first add the 'if' feature
broken that way in PATCH 16, then fix it up in PATCH 18?

>                                                            Instead,
> the union could be made conditional.

What do you mean by that?

> Signed-off-by: Marc-Andr=C3=A9 Lureau <marcandre.lureau@redhat.com>
> ---
>  scripts/qapi/common.py                          | 11 +++++++++--
>  tests/Makefile.include                          |  1 +
>  .../flat-union-invalid-if-discriminator.err     |  1 +
>  .../flat-union-invalid-if-discriminator.exit    |  1 +
>  .../flat-union-invalid-if-discriminator.json    | 17 +++++++++++++++++
>  .../flat-union-invalid-if-discriminator.out     |  0
>  6 files changed, 29 insertions(+), 2 deletions(-)
>  create mode 100644 tests/qapi-schema/flat-union-invalid-if-discriminator=
.err
>  create mode 100644 tests/qapi-schema/flat-union-invalid-if-discriminator=
.exit
>  create mode 100644 tests/qapi-schema/flat-union-invalid-if-discriminator=
.json
>  create mode 100644 tests/qapi-schema/flat-union-invalid-if-discriminator=
.out
>
> diff --git a/scripts/qapi/common.py b/scripts/qapi/common.py
> index 9b95f8cfe9..13fbb28493 100644
> --- a/scripts/qapi/common.py
> +++ b/scripts/qapi/common.py
> @@ -577,7 +577,8 @@ def find_alternate_member_qtype(qapi_type):
>=20=20
>  # Return the discriminator enum define if discriminator is specified as =
an
>  # enum type, otherwise return None.
> -def discriminator_find_enum_define(expr):
> +def discriminator_find_enum_define(expr, info):
> +    name =3D expr['union']
>      base =3D expr.get('base')
>      discriminator =3D expr.get('discriminator')
>=20=20
> @@ -592,6 +593,11 @@ def discriminator_find_enum_define(expr):
>      if not discriminator_member:
>          return None
>=20=20
> +    if discriminator_member.get('if'):
> +        raise QAPISemError(info, 'The discriminator %s.%s for union %s '
> +                           'must not be conditional' %
> +                           (base, discriminator, name))
> +
>      return enum_types.get(discriminator_member['type'])
>=20=20
>=20=20

I'm afraid this isn't the proper place to check.  It's an accessor
function for @struct_types and @enum_types.  The check should go into
check_union(), like this:

diff --git a/scripts/qapi/common.py b/scripts/qapi/common.py
index 0cf39df404..c1bc9e9c29 100644
--- a/scripts/qapi/common.py
+++ b/scripts/qapi/common.py
@@ -799,6 +794,11 @@ def check_union(expr, info):
                                "Discriminator '%s' is not a member of base=
 "
                                "struct '%s'"
                                % (discriminator, base))
+        if discriminator_member.get('if'):
+            raise QAPISemError(info, 'The discriminator %s.%s for union %s=
 '
+                               'must not be conditional' %
+                               (base, discriminator, name))
+
         enum_define =3D enum_types.get(discriminator_member['type'])
         allow_metas =3D ['struct']
         # Do not allow string discriminator

> @@ -1020,7 +1026,8 @@ def check_exprs(exprs):
>=20=20
>          if 'include' in expr:
>              continue
> -        if 'union' in expr and not discriminator_find_enum_define(expr):
> +        info =3D expr_elem['info']
> +        if 'union' in expr and not discriminator_find_enum_define(expr, =
info):
>              name =3D '%sKind' % expr['union']
>          elif 'alternate' in expr:
>              name =3D '%sKind' % expr['alternate']
> diff --git a/tests/Makefile.include b/tests/Makefile.include
> index 43e100a6cd..abc3fdf764 100644
> --- a/tests/Makefile.include
> +++ b/tests/Makefile.include
> @@ -510,6 +510,7 @@ qapi-schema +=3D flat-union-inline.json
>  qapi-schema +=3D flat-union-int-branch.json
>  qapi-schema +=3D flat-union-invalid-branch-key.json
>  qapi-schema +=3D flat-union-invalid-discriminator.json
> +qapi-schema +=3D flat-union-invalid-if-discriminator.json
>  qapi-schema +=3D flat-union-no-base.json
>  qapi-schema +=3D flat-union-optional-discriminator.json
>  qapi-schema +=3D flat-union-string-discriminator.json
> diff --git a/tests/qapi-schema/flat-union-invalid-if-discriminator.err b/=
tests/qapi-schema/flat-union-invalid-if-discriminator.err
> new file mode 100644
> index 0000000000..0c94c9860d
> --- /dev/null
> +++ b/tests/qapi-schema/flat-union-invalid-if-discriminator.err
> @@ -0,0 +1 @@
> +tests/qapi-schema/flat-union-invalid-if-discriminator.json:13: The discr=
iminator TestBase.enum1 for union TestUnion must not be conditional
> diff --git a/tests/qapi-schema/flat-union-invalid-if-discriminator.exit b=
/tests/qapi-schema/flat-union-invalid-if-discriminator.exit
> new file mode 100644
> index 0000000000..d00491fd7e
> --- /dev/null
> +++ b/tests/qapi-schema/flat-union-invalid-if-discriminator.exit
> @@ -0,0 +1 @@
> +1
> diff --git a/tests/qapi-schema/flat-union-invalid-if-discriminator.json b=
/tests/qapi-schema/flat-union-invalid-if-discriminator.json
> new file mode 100644
> index 0000000000..618ec36396
> --- /dev/null
> +++ b/tests/qapi-schema/flat-union-invalid-if-discriminator.json
> @@ -0,0 +1,17 @@
> +{ 'enum': 'TestEnum',
> +  'data': [ 'value1', 'value2' ] }
> +
> +{ 'struct': 'TestBase',
> +  'data': { 'enum1': { 'type': 'TestEnum', 'if': 'FOO' } } }
> +
> +{ 'struct': 'TestTypeA',
> +  'data': { 'string': 'str' } }
> +
> +{ 'struct': 'TestTypeB',
> +  'data': { 'integer': 'int' } }
> +
> +{ 'union': 'TestUnion',
> +  'base': 'TestBase',
> +  'discriminator': 'enum1',
> +  'data': { 'value1': 'TestTypeA',
> +            'value2': 'TestTypeB' } }
> diff --git a/tests/qapi-schema/flat-union-invalid-if-discriminator.out b/=
tests/qapi-schema/flat-union-invalid-if-discriminator.out
> new file mode 100644
> index 0000000000..e69de29bb2

