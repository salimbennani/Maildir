Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  18 Dec 2018 08:44:42 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id CD9985805AD
	for <like.xu@linux.intel.com>; Mon, 17 Dec 2018 06:13:39 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga003-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 17 Dec 2018 06:13:39 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AviP8ORVmYJsmYNzF9Zf5Pi+EAWDV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZRSCvqdThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGp2y?=
 =?us-ascii?q?b4UPAeQCM+hXoYbyqFkSohWxGAesHOHixD1Hi3Pr06A2z/ouERrd0Qw8Hd8Dqm?=
 =?us-ascii?q?jYoMn7OaoQV+2+0anGzS/Eb/NTwTry6JLHchEnof6SR7J7bNfeyU40FwjYk1uf?=
 =?us-ascii?q?s4rlPy+S1uQWrmOV6O1gVfmzhG4ntQ5xviSvyd0xgYTOiIMa0FHE9SNnz4YvPt?=
 =?us-ascii?q?24TVV2YcS6H5RNtyGVLZd2Ttk+TGFvvSY307sLsoO4cigS0Jkr2QLTZv+df4SV?=
 =?us-ascii?q?/x7uV/ydLSl2iX9lYr6zmhS//VC+xuHgUsS4yktGoyRbntXWq3wA1BLe5tKZRv?=
 =?us-ascii?q?Z++EqqxCyB2BrJ6u5eJEA5jarbJIAlwr43jpcTtUXDHjTqmEXtlqOWeUMk+vWy?=
 =?us-ascii?q?5+TgeLXmqYeQN45yig7gLqQjgtKzDfg7PwQUQmSX5Oex2Kf98UD3QLhGlOA6n6?=
 =?us-ascii?q?vBvJDfP8sbp6q5AwFP0oYk7hayFy6m38odnXkaNV5KZQyIj5b3NFHKOfz3FvC/?=
 =?us-ascii?q?g0mqkDh32f/GJbrtApHMLnjAjrjtZ7l861NExQo3zNBf4Y9UC74bLPLyXE/xqM?=
 =?us-ascii?q?LXDhsjPwOoxObnDc5w1oUZWWKJDa+ZNr7SvUWP5uI1LOmAfJUVtyrlK/g5+/7u?=
 =?us-ascii?q?imc0mVscfamqw5Qbcn+5Hul9LkWdYHrshMoBEGgQsgo/SuzqlEONUTpJa3muWK?=
 =?us-ascii?q?I842JzNYS9EI2WRpyxmKfTm2C/H4ZKfSZADVaDF2qucJ+LHPIFaSaXK8kmlSQY?=
 =?us-ascii?q?VL+nUMg42BSz8QP31bdjfdfS4TAS4Jfq1dxp4L/KmBQvsDB5EcmZlnuAVnx5hX?=
 =?us-ascii?q?8gQTgw06Zi50tnxQCYzKJ6jvdEQMFV/O5DSQwgNJTRnNB9XurzUQLIZNvBaFug?=
 =?us-ascii?q?Tti8GjY3BoYrwtQOalxxXdWviBzOxTGtBZcRlrqCHpty9bjTiTy5Pst41jPK2b?=
 =?us-ascii?q?csi3EgRc1AM3DggbRwpCbJAIucrEyYkauwPagbx2b2/WGfynHGmUZDWw59TbnM?=
 =?us-ascii?q?FSQAb0rQoM7i42vYQrOuAKhhOQxEn53RYpBWY8Hk2A0VDMzoP87TNifowz+9?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0B+AACcrhdchxHrdtBkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBVAQBAQsBgTCCYoN8iHiLF4FgCCV8mE8UGBSHVSI3Bg0BAwEBAQEBAQIBEwE?=
 =?us-ascii?q?BAQoLCQgbDi+CNgUCAxoBBoJbAQEBAQIBAQIgBBEOCikDAwECBgEBChgCAiIEA?=
 =?us-ascii?q?gIDAVMGAQwGAgEBAYMdgXkIAQSoF3wzhUCEXoELizMXgX+BEScMgio1gUuGPoJ?=
 =?us-ascii?q?XAolChlKRBQmGTYsHBhiBXYgWN4coiTyQKIFcgXhNIxWDJ4InF441KTGBBxyLX?=
 =?us-ascii?q?IF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0B+AACcrhdchxHrdtBkHAEBAQQBAQcEAQGBVAQBAQsBgTC?=
 =?us-ascii?q?CYoN8iHiLF4FgCCV8mE8UGBSHVSI3Bg0BAwEBAQEBAQIBEwEBAQoLCQgbDi+CN?=
 =?us-ascii?q?gUCAxoBBoJbAQEBAQIBAQIgBBEOCikDAwECBgEBChgCAiIEAgIDAVMGAQwGAgE?=
 =?us-ascii?q?BAYMdgXkIAQSoF3wzhUCEXoELizMXgX+BEScMgio1gUuGPoJXAolChlKRBQmGT?=
 =?us-ascii?q?YsHBhiBXYgWN4coiTyQKIFcgXhNIxWDJ4InF441KTGBBxyLXIF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,365,1539673200"; 
   d="scan'208";a="56662407"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 17 Dec 2018 06:13:15 -0800
Received: from localhost ([::1]:47086 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gYtdz-0004Nj-2m
	for like.xu@linux.intel.com; Mon, 17 Dec 2018 09:13:15 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:40180)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <wainersm@redhat.com>) id 1gYtdT-0004A2-PM
	for qemu-devel@nongnu.org; Mon, 17 Dec 2018 09:12:44 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <wainersm@redhat.com>) id 1gYtdO-0004qY-Mk
	for qemu-devel@nongnu.org; Mon, 17 Dec 2018 09:12:43 -0500
Received: from mx1.redhat.com ([209.132.183.28]:43374)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <wainersm@redhat.com>) id 1gYtdO-0004mK-Cc
	for qemu-devel@nongnu.org; Mon, 17 Dec 2018 09:12:38 -0500
Received: from smtp.corp.redhat.com (int-mx01.intmail.prod.int.phx2.redhat.com
	[10.5.11.11])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 1760A80F8D;
	Mon, 17 Dec 2018 14:12:34 +0000 (UTC)
Received: from localhost.localdomain (ovpn-121-175.rdu2.redhat.com
	[10.10.121.175])
	by smtp.corp.redhat.com (Postfix) with ESMTP id B5B2F6012D;
	Mon, 17 Dec 2018 14:12:31 +0000 (UTC)
To: Richard Henderson <richard.henderson@linaro.org>, qemu-devel@nongnu.org
References: <20181217035816.21777-1-richard.henderson@linaro.org>
From: Wainer dos Santos Moschetta <wainersm@redhat.com>
Message-ID: <24582c74-a00d-4949-0e91-8dec793d02bc@redhat.com>
Date: Mon, 17 Dec 2018 12:12:30 -0200
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101
	Thunderbird/52.5.2
MIME-Version: 1.0
In-Reply-To: <20181217035816.21777-1-richard.henderson@linaro.org>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 7bit
Content-Language: en-US
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.11
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.27]);
	Mon, 17 Dec 2018 14:12:34 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH] tests: Exit boot-serial-test loop if child
 dies
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Laurent Vivier <lvivier@redhat.com>, Paolo Bonzini <pbonzini@redhat.com>,
	Thomas Huth <thuth@redhat.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>


On 12/17/2018 01:58 AM, Richard Henderson wrote:
> There's no point in waiting 5 full minutes when there will be
> no more output.  Compute timeout based on elapsed wall clock
> time instead of N * delays, as the delay is a minimum sleep time.
>
> Cc: Thomas Huth <thuth@redhat.com>
> Cc: Laurent Vivier <lvivier@redhat.com>
> Cc: Paolo Bonzini <pbonzini@redhat.com>
> Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
> ---
>   tests/libqtest.h         |  8 +++++
>   tests/boot-serial-test.c | 16 +++++++--
>   tests/libqtest.c         | 70 +++++++++++++++++++++++++---------------
>   3 files changed, 65 insertions(+), 29 deletions(-)

Reviewed-by: Wainer dos Santos Moschetta <wainersm@redhat.com>

>
> diff --git a/tests/libqtest.h b/tests/libqtest.h
> index 96a6c01352..9758c51be6 100644
> --- a/tests/libqtest.h
> +++ b/tests/libqtest.h
> @@ -1011,4 +1011,12 @@ bool qmp_rsp_is_err(QDict *rsp);
>    */
>   void qmp_assert_error_class(QDict *rsp, const char *class);
>   
> +/**
> + * qtest_probe_child:
> + * @s: QTestState instance to operate on.
> + *
> + * Returns: true if the child is still alive.
> + */
> +bool qtest_probe_child(QTestState *s);
> +
>   #endif
> diff --git a/tests/boot-serial-test.c b/tests/boot-serial-test.c
> index 8ec6aed35d..54b9347325 100644
> --- a/tests/boot-serial-test.c
> +++ b/tests/boot-serial-test.c
> @@ -130,11 +130,12 @@ static testdef_t tests[] = {
>   
>   static bool check_guest_output(const testdef_t *test, int fd)
>   {
> -    int i, nbr = 0, pos = 0, ccnt;
> +    int nbr = 0, pos = 0, ccnt;
> +    time_t now, start = time(NULL);
>       char ch;
>   
> -    /* Poll serial output... Wait at most 360 seconds */
> -    for (i = 0; i < 36000; ++i) {
> +    /* Poll serial output... */
> +    while (1) {
>           ccnt = 0;
>           while (ccnt++ < 512 && (nbr = read(fd, &ch, 1)) == 1) {
>               if (ch == test->expect[pos]) {
> @@ -148,6 +149,15 @@ static bool check_guest_output(const testdef_t *test, int fd)
>               }
>           }
>           g_assert(nbr >= 0);
> +        /* Wait only if the child is still alive.  */
> +        if (!qtest_probe_child(global_qtest)) {
> +            break;
> +        }
> +        /* Wait at most 360 seconds.  */
> +        now = time(NULL);
> +        if (now - start >= 360) {
> +            break;
> +        }
>           g_usleep(10000);
>       }
>   
> diff --git a/tests/libqtest.c b/tests/libqtest.c
> index 43be078518..1d75d3c936 100644
> --- a/tests/libqtest.c
> +++ b/tests/libqtest.c
> @@ -39,10 +39,11 @@ struct QTestState
>   {
>       int fd;
>       int qmp_fd;
> +    pid_t qemu_pid;  /* our child QEMU process */
> +    int wstatus;
> +    bool big_endian;
>       bool irq_level[MAX_IRQ];
>       GString *rx;
> -    pid_t qemu_pid;  /* our child QEMU process */
> -    bool big_endian;
>   };
>   
>   static GHookList abrt_hooks;
> @@ -96,36 +97,52 @@ static int socket_accept(int sock)
>       return ret;
>   }
>   
> +bool qtest_probe_child(QTestState *s)
> +{
> +    pid_t pid = s->qemu_pid;
> +
> +    if (pid != -1) {
> +        pid = waitpid(pid, &s->wstatus, WNOHANG);
> +        if (pid == 0) {
> +            return true;
> +        }
> +        s->qemu_pid = -1;
> +    }
> +    return false;
> +}
> +
>   static void kill_qemu(QTestState *s)
>   {
> -    if (s->qemu_pid != -1) {
> -        int wstatus = 0;
> -        pid_t pid;
> -
> -        kill(s->qemu_pid, SIGTERM);
> -        TFR(pid = waitpid(s->qemu_pid, &wstatus, 0));
> +    pid_t pid = s->qemu_pid;
> +    int wstatus;
>   
> +    /* Skip wait if qtest_probe_child already reaped.  */
> +    if (pid != -1) {
> +        kill(pid, SIGTERM);
> +        TFR(pid = waitpid(s->qemu_pid, &s->wstatus, 0));
>           assert(pid == s->qemu_pid);
> -        /*
> -         * We expect qemu to exit with status 0; anything else is
> -         * fishy and should be logged with as much detail as possible.
> -         */
> -        if (wstatus) {
> -            if (WIFEXITED(wstatus)) {
> -                fprintf(stderr, "%s:%d: kill_qemu() tried to terminate QEMU "
> -                        "process but encountered exit status %d\n",
> -                        __FILE__, __LINE__, WEXITSTATUS(wstatus));
> -            } else if (WIFSIGNALED(wstatus)) {
> -                int sig = WTERMSIG(wstatus);
> -                const char *signame = strsignal(sig) ?: "unknown ???";
> -                const char *dump = WCOREDUMP(wstatus) ? " (core dumped)" : "";
> +    }
>   
> -                fprintf(stderr, "%s:%d: kill_qemu() detected QEMU death "
> -                        "from signal %d (%s)%s\n",
> -                        __FILE__, __LINE__, sig, signame, dump);
> -            }
> -            abort();
> +    /*
> +     * We expect qemu to exit with status 0; anything else is
> +     * fishy and should be logged with as much detail as possible.
> +     */
> +    wstatus = s->wstatus;
> +    if (wstatus) {
> +        if (WIFEXITED(wstatus)) {
> +            fprintf(stderr, "%s:%d: kill_qemu() tried to terminate QEMU "
> +                    "process but encountered exit status %d\n",
> +                    __FILE__, __LINE__, WEXITSTATUS(wstatus));
> +        } else if (WIFSIGNALED(wstatus)) {
> +            int sig = WTERMSIG(wstatus);
> +            const char *signame = strsignal(sig) ?: "unknown ???";
> +            const char *dump = WCOREDUMP(wstatus) ? " (core dumped)" : "";
> +
> +            fprintf(stderr, "%s:%d: kill_qemu() detected QEMU death "
> +                    "from signal %d (%s)%s\n",
> +                    __FILE__, __LINE__, sig, signame, dump);
>           }
> +        abort();
>       }
>   }
>   
> @@ -228,6 +245,7 @@ QTestState *qtest_init_without_qmp_handshake(const char *extra_args)
>   
>       g_test_message("starting QEMU: %s", command);
>   
> +    s->wstatus = 0;
>       s->qemu_pid = fork();
>       if (s->qemu_pid == 0) {
>           setenv("QEMU_AUDIO_DRV", "none", true);


