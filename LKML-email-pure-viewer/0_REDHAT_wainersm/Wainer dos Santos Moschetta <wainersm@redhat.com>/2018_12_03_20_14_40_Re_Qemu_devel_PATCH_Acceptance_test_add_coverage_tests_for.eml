Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 04 Dec 2018 08:57:35 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 4CFAD580578
	for <like.xu@linux.intel.com>; Mon,  3 Dec 2018 12:15:14 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 03 Dec 2018 12:15:14 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3Ama83dh0BdyAR0CNhsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?sesWK/XxwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJfUMZfVyJPAY2y?=
 =?us-ascii?q?YIUAAOUDIelWoJTzp0MMoBW8CgSgGe3ixiNWiX/txqA6z+YsHBva0AA8Ed8Dsn?=
 =?us-ascii?q?LZp8j1OqcIVuC1ybHFwjXZYPNX3zfy9pLIeQ08rvGLRrJ7bNffxlMpFwPZiVWQ?=
 =?us-ascii?q?spHuMTSS1uQWr2eb7/RvVf6zi2E9tgp8pTauyd0tionPmI0V0EvE9SBizYYvO9?=
 =?us-ascii?q?K3VU57bsS4EJdKqy6aMI52T9okTmp1uyg60qULtYCncCUJ0pgr2gPTZv+df4SW?=
 =?us-ascii?q?7B/uVPydLSp6iX59Zr6zmxK//VK9xuDySMW4yktGoylLn9XWqHwA1Bre4dWdRP?=
 =?us-ascii?q?Rn5EeuwzOP2hjT6u5aJUA0krLWK5ogwr4ripoTql7PHiDwmEXrlqOWcV8k+uew?=
 =?us-ascii?q?5+TmZLXpuIOcOpdqhg3iMakigNGzDfk7PwQUQWSW9+Sx2Kf+8UD7WLlKi+c5kq?=
 =?us-ascii?q?jdsJDUP8Qboau5DhdM0ok97ha/Ei6q38kGknkZMl1FfAuLgJPuO1HTJvD3Eemw?=
 =?us-ascii?q?g0+rnDdvxvDGPaPuDo/CL3jeiLrhebd960hByAs819xf5pRUCq0fL/L3QEP+qN?=
 =?us-ascii?q?vYDhoiPgyyxObnDtp91oUDWW6VBa+ZKqzSvUeS5u0zO+mMeJMVuDHlJvgh5v7u?=
 =?us-ascii?q?jmE2lUUSfKm0xpYXbHG4HvJ7I0SWe3bsg9EBEXsUsQo6VuDllFqCUTsAL0u0RL?=
 =?us-ascii?q?82szEnFJq9X8CEQoG2nKfH2iC9EZtLIGdcBReJGHbscoyCHPAUdCOVJNQmizEB?=
 =?us-ascii?q?SP2tRpEs0UKTshTnwe9iJ+vQ5ipKrJ/myZ156vPekVQo+CVpAt+B+2eKSW5ygy?=
 =?us-ascii?q?UPXTBhx711o0F21gKe17NliedTD91Z6qB1VVIXOYPV1eB9Q/D7UAHGZcvBHFum?=
 =?us-ascii?q?S9+lBiotZsg8z98HfwB2HND03T7Z2C//PLYUkbGRTJAz6ern1n7tIN017nHd36?=
 =?us-ascii?q?ksk0UvCp9QPGygi7Rk8iDJCoLJmlnfnKGvI/dPlBXR/XuOmDLd9HpTVxR9BOCc?=
 =?us-ascii?q?BSgS?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A4AACLjgVchxHrdtBiGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBZYExgTmBFhODeYh3jQ0tfJZggWIRGAcNiAkiOBIBAwEBAQE?=
 =?us-ascii?q?BAQIBEwEBAQoLCQgbDi+CNgUCAxoBBoJcAQIDAQIgFQ4KKQMDAQIGAQEKDgoCA?=
 =?us-ascii?q?iIEAgIDAVMGDQYCAQEBgxwBggEBBKYygS+FQIRrgQuHJ4NqF4F/gREngjY1gUu?=
 =?us-ascii?q?Ce4M/glcCj3SQTAmGQT+KNgYYiVuHS4Fglw2BXYF2TSMVgycJkGopMYEHHIhHg?=
 =?us-ascii?q?XcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0A4AACLjgVchxHrdtBiGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BZYExgTmBFhODeYh3jQ0tfJZggWIRGAcNiAkiOBIBAwEBAQEBAQIBEwEBAQoLC?=
 =?us-ascii?q?QgbDi+CNgUCAxoBBoJcAQIDAQIgFQ4KKQMDAQIGAQEKDgoCAiIEAgIDAVMGDQY?=
 =?us-ascii?q?CAQEBgxwBggEBBKYygS+FQIRrgQuHJ4NqF4F/gREngjY1gUuCe4M/glcCj3SQT?=
 =?us-ascii?q?AmGQT+KNgYYiVuHS4Fglw2BXYF2TSMVgycJkGopMYEHHIhHgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,311,1539673200"; 
   d="scan'208";a="43352584"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 03 Dec 2018 12:15:13 -0800
Received: from localhost ([::1]:51665 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gTucZ-0000yw-N3
	for like.xu@linux.intel.com; Mon, 03 Dec 2018 15:15:11 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:55410)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <wainersm@redhat.com>) id 1gTucO-0000yN-Kj
	for qemu-devel@nongnu.org; Mon, 03 Dec 2018 15:15:03 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <wainersm@redhat.com>) id 1gTucK-0004x1-Q6
	for qemu-devel@nongnu.org; Mon, 03 Dec 2018 15:15:00 -0500
Received: from mx1.redhat.com ([209.132.183.28]:41292)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <wainersm@redhat.com>) id 1gTucH-0004tL-Ql
	for qemu-devel@nongnu.org; Mon, 03 Dec 2018 15:14:54 -0500
Received: from smtp.corp.redhat.com (int-mx08.intmail.prod.int.phx2.redhat.com
	[10.5.11.23])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 484D481DE9
	for <qemu-devel@nongnu.org>; Mon,  3 Dec 2018 20:14:51 +0000 (UTC)
Received: from localhost.localdomain (ovpn-120-195.rdu2.redhat.com
	[10.10.120.195])
	by smtp.corp.redhat.com (Postfix) with ESMTP id 642FA194AE;
	Mon,  3 Dec 2018 20:14:42 +0000 (UTC)
To: Eduardo Habkost <ehabkost@redhat.com>
References: <20181109195800.19071-1-wainersm@redhat.com>
	<20181112163140.GM12503@habkost.net>
From: Wainer dos Santos Moschetta <wainersm@redhat.com>
Message-ID: <ab7dc94b-074d-682a-b1d4-1d5e462bec9a@redhat.com>
Date: Mon, 3 Dec 2018 18:14:40 -0200
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101
	Thunderbird/52.5.2
MIME-Version: 1.0
In-Reply-To: <20181112163140.GM12503@habkost.net>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 7bit
Content-Language: en-US
X-Scanned-By: MIMEDefang 2.84 on 10.5.11.23
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.25]);
	Mon, 03 Dec 2018 20:14:51 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH] Acceptance test: add coverage tests for
 -smp option
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: crosa@redhat.com, philmd@redhat.com, qemu-devel@nongnu.org,
	ccarrara@redhat.com
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>


On 11/12/2018 02:31 PM, Eduardo Habkost wrote:
> On Fri, Nov 09, 2018 at 02:58:00PM -0500, Wainer dos Santos Moschetta wrote:
>> This adds tests for SMP option, by passing -smp with
>> various combinations of cpus, cores, threads, and sockets
>> values it checks that invalid topologies are not accepted
>> as well as missing values are correctly calculated.
>>
>> Signed-off-by: Wainer dos Santos Moschetta <wainersm@redhat.com>
> The test code looks nice to me, but: how exactly do you expect
> this to be executed?
>
> Do we have a test runner or multiplexer configuration already
> able to generate the cores/threads/sockets/cpus parameters?

NACK

I'm convinced these tests aren't so useful. Instead I'm working on other 
tests for smp that I expect worth to catch regressions.

- Wainer

>
>
>> ---
>>   tests/acceptance/smp_option_coverage.py | 218 ++++++++++++++++++++++++
>>   1 file changed, 218 insertions(+)
>>   create mode 100644 tests/acceptance/smp_option_coverage.py
>>
>> diff --git a/tests/acceptance/smp_option_coverage.py b/tests/acceptance/smp_option_coverage.py
>> new file mode 100644
>> index 0000000000..ab68d1a67d
>> --- /dev/null
>> +++ b/tests/acceptance/smp_option_coverage.py
>> @@ -0,0 +1,218 @@
>> +# QEMU -smp option coverage test.
>> +#
>> +# Copyright (c) 2018 Red Hat, Inc.
>> +#
>> +# Author:
>> +#  Wainer dos Santos Moschetta <wainersm@redhat.com>
>> +#
>> +# This work is licensed under the terms of the GNU GPL, version 2 or
>> +# later.  See the COPYING file in the top-level directory.
>> +
>> +from functools import reduce
>> +from avocado.utils.process import run
>> +
>> +from avocado_qemu import Test
>> +
>> +
>> +class SmpOption(Test):
>> +    """
>> +    Launches QEMU with various cpus, cores, threads, sockets, and maxcpus
>> +    combination through -smp option, to check it does not accept invalid SMP
>> +    topologies as well as it is able to calculate correctly any missing values.
>> +
>> +    :avocado: enable
>> +    :avocado: tags=slow,coverage
>> +    """
>> +    def setUp(self):
>> +        super().setUp()
>> +        self.cores = self.params.get('cores', default=2)
>> +        self.threads = self.params.get('threads', default=2)
>> +        self.sockets = self.params.get('sockets', default=2)
>> +        self.cpus = self.params.get('cpus', default=8)
>> +
>> +    def get_smp_topology(self):
>> +        """
>> +        Returns a dict with the id of cores, threads and sockets.
>> +        """
>> +        res = self.vm.qmp('query-hotpluggable-cpus')['return']
>> +        cpus = [x['props'] for x in res]
>> +
>> +        return reduce(lambda x, y: {'core-id': x['core-id'].union([y['core-id']]),
>> +                                    'thread-id': x['thread-id'].union([y['thread-id']]),
>> +                                    'socket-id': x['socket-id'].union([y['socket-id']])},
>> +                      cpus, {'core-id': set(), 'thread-id': set(), 'socket-id': set()})
>> +
>> +    @staticmethod
>> +    def build_option(**kwargs):
>> +        """
>> +        Builds string for the -smp option.
>> +        Use cpus, cores, threads, sockets, maxcpus keys.
>> +        """
>> +        option_list = []
>> +        if kwargs.get('cpus', None) is not None:
>> +            option_list.append(str(kwargs.get('cpus')))
>> +        for key, val in kwargs.items():
>> +            if key == 'cpus':
>> +                continue
>> +            option_list.append('%s=%s' % (key, val))
>> +
>> +        return ",".join(option_list)
>> +
>> +    def launch_and_check(self, expect_cores=1, expect_threads=1,
>> +                         expect_sockets=1, **kwargs):
>> +        """
>> +        Launches VM and check its SMP topology was correctly set.
>> +        Use cpus, cores, threads, sockets, and maxcpus keys to specify the
>> +        topology.
>> +        """
>> +        option = self.build_option(**{key: val for key, val in kwargs.items()
>> +                                      if key in ['cpus', 'cores', 'threads',
>> +                                                 'sockets', 'maxcpus']})
>> +        self.vm.add_args('-smp', option)
>> +        self.vm.launch()
>> +        smp = self.get_smp_topology()
>> +        self.assertEqual(smp['core-id'], set(range(0, expect_cores)))
>> +        self.assertEqual(smp['thread-id'], set(range(0, expect_threads)))
>> +        self.assertEqual(smp['socket-id'], set(range(0, expect_sockets)))
>> +
>> +    def launch_and_check_fail(self, **kwargs):
>> +        """
>> +        Launches VM and check the process exits with expected error code, for
>> +        cases where the topology is expected not valid.
>> +        """
>> +        option = self.build_option(**kwargs)
>> +        res = run("%s -smp %s" % (self.qemu_bin, option), timeout=10,
>> +                  ignore_status=True)
>> +        self.assertNotEqual(res.exit_status, 0)
>> +
>> +    # Passing cpus and maxcpus only.
>> +    #
>> +
>> +    def test_cpus_eq_maxcpus(self):
>> +        self.launch_and_check(cpus=self.cpus,
>> +                              maxcpus=self.cpus,
>> +                              expect_sockets=self.cpus)
>> +
>> +    def test_cpus_lt_maxcpus(self):
>> +        maxcpus = self.cpus * 2
>> +        self.launch_and_check(cpus=self.cpus,
>> +                              maxcpus=maxcpus,
>> +                              expect_sockets=maxcpus)
>> +
>> +    def test_cpus_gt_maxcpus(self):
>> +        self.launch_and_check_fail(cpus=self.cpus,
>> +                                   maxcpus=self.cpus // 2)
>> +
>> +    # Passing a combination of cores, threads and sockets only.
>> +    #
>> +
>> +    def test_no_cores_no_threads_no_sockets(self):
>> +        self.launch_and_check(cpus=self.cpus,
>> +                              expect_sockets=self.cpus)
>> +
>> +    def test_no_cores_no_threads_sockets(self):
>> +        self.launch_and_check(sockets=self.sockets,
>> +                              expect_sockets=self.sockets)
>> +
>> +    def test_no_cores_threads_no_sockets(self):
>> +        self.launch_and_check(threads=self.threads,
>> +                              expect_threads=self.threads)
>> +
>> +    def test_no_cores_threads_sockets(self):
>> +        self.launch_and_check(threads=self.threads,
>> +                              sockets=self.sockets,
>> +                              expect_threads=self.threads,
>> +                              expect_sockets=self.sockets)
>> +
>> +    def test_cores_no_threads_no_sockets(self):
>> +        self.launch_and_check(cores=self.cores,
>> +                              expect_cores=self.cores)
>> +
>> +    def test_cores_no_threads_sockets(self):
>> +        self.launch_and_check(cores=self.cores,
>> +                              sockets=self.sockets,
>> +                              expect_cores=self.cores,
>> +                              expect_sockets=self.sockets)
>> +
>> +    def test_cores_threads_no_sockets(self):
>> +        self.launch_and_check(cores=self.cores,
>> +                              threads=self.threads,
>> +                              expect_cores=self.cores,
>> +                              expect_threads=self.threads)
>> +
>> +    def test_cores_threads_sockets(self):
>> +        self.launch_and_check(cores=self.cores,
>> +                              threads=self.threads,
>> +                              sockets=self.sockets,
>> +                              expect_cores=self.cores,
>> +                              expect_threads=self.threads,
>> +                              expect_sockets=self.sockets)
>> +
>> +    # Passing cpus always and a combination of cores, threads and sockets.
>> +    #
>> +
>> +    def test_cpus_no_cores_no_threads_sockets(self):
>> +        self.launch_and_check(cpus=self.cpus,
>> +                              sockets=self.sockets,
>> +                              expect_cores=self.cpus // self.sockets,
>> +                              expect_sockets=self.sockets)
>> +
>> +    def test_cpus_no_cores_threads_no_sockets(self):
>> +        self.launch_and_check(cpus=self.cpus,
>> +                              threads=self.threads,
>> +                              expect_threads=self.threads,
>> +                              expect_sockets=self.cpus // self.threads)
>> +
>> +    def test_cpus_no_cores_threads_sockets(self):
>> +        self.launch_and_check(cpus=self.cpus,
>> +                              threads=self.threads,
>> +                              sockets=self.sockets,
>> +                              expect_threads=self.threads,
>> +                              expect_sockets=self.sockets,
>> +                              expect_cores=self.cpus // (self.threads * self.sockets))
>> +
>> +    def test_cpus_cores_no_threads_no_sockets(self):
>> +        self.launch_and_check(cpus=self.cpus,
>> +                              cores=self.cores,
>> +                              expect_cores=self.cores,
>> +                              expect_sockets=self.cpus // self.cores)
>> +
>> +    def test_cpus_cores_no_threads_sockets(self):
>> +        self.launch_and_check(cpus=self.cpus,
>> +                              cores=self.cores,
>> +                              sockets=self.sockets,
>> +                              expect_cores=self.cores,
>> +                              expect_sockets=self.sockets,
>> +                              expect_threads=self.cpus // (self.cores * self.sockets))
>> +
>> +    def test_cpus_cores_threads_no_sockets(self):
>> +        self.launch_and_check(cpus=self.cpus,
>> +                              cores=self.cores,
>> +                              threads=self.threads,
>> +                              expect_cores=self.cores,
>> +                              expect_threads=self.threads,
>> +                              expect_sockets=self.cpus // (self.cores * self.threads))
>> +
>> +    def test_cpus_cores_threads_sockets(self):
>> +        self.launch_and_check(cpus=self.cores * self.threads * self.sockets,
>> +                              cores=self.cores,
>> +                              threads=self.threads,
>> +                              sockets=self.sockets,
>> +                              expect_cores=self.cores,
>> +                              expect_threads=self.threads,
>> +                              expect_sockets=self.sockets)
>> +
>> +    # Passing cpus less (or greater) than cores, threads and sockets.
>> +    #
>> +
>> +    def test_cpus_lt_cores_threads_sockets(self):
>> +        self.launch_and_check_fail(cpus=(self.cores * self.threads * self.sockets) // 2,
>> +                                   cores=self.cores,
>> +                                   threads=self.threads,
>> +                                   sockets=self.sockets,)
>> +
>> +    def test_cpus_gt_cores_threads_sockets(self):
>> +        self.launch_and_check_fail(cpus=self.cores * self.threads * self.sockets * 2,
>> +                                   cores=self.cores,
>> +                                   threads=self.threads,
>> +                                   sockets=self.sockets)
>> -- 
>> 2.17.2
>>


