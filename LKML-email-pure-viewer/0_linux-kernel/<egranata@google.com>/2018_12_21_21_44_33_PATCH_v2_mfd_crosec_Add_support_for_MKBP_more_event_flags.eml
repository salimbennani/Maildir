Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:55:34 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id D382F580522;
	Fri, 21 Dec 2018 13:44:43 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by fmsmga006-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 21 Dec 2018 13:44:43 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A97sj8R/D+QTJyf9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1+4QIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CS2ROXMVfWCNPAo27?=
 =?us-ascii?q?coUBD/QPMvpDr4nlpVYDtge+CRW2Ce/z0DJEmn370Ksn2OohCwHG2wkgEsoJvX?=
 =?us-ascii?q?vKo9X1Lr0dUeavw6nU1zrOdPxW2TD66IjHdhAuv+uAUq53ccrU0EQiER7OgFaI?=
 =?us-ascii?q?qYH9IT+ZyuAAv3KG4+duS+6jkXMrpgJtrjS1x8ohiJHFipwJxl3A7yl0w4Y4Kc?=
 =?us-ascii?q?elREN6fdKoCoVcuz2EO4ZwX8gsWXtnuDwgxb0DoZO7fDYFyJAgxxPHdfyHfJaH?=
 =?us-ascii?q?4gj5WOaSPzh4nnRld6y7hxqo9kig0OL8WtG10FZMsCVFjsHBum4R2xHX8MSLV/?=
 =?us-ascii?q?Vw8lm71TqS1A3f9vtILEE2mKbDLp4u2L8wlp4dsUTZGS/2nV37jKuXdkUi5+ip?=
 =?us-ascii?q?5P3rYrb4qZ+GMY97lAX+Pr0pms2xB+Q3LBIOUnOF+eSzyrLj51f1QLZUgf0slK?=
 =?us-ascii?q?nWrpTaKd4cpq6jDA9Zypwj5AqnDze6zNQYmmEKLFZEeBKEkYflIV7PIO3jAPe7?=
 =?us-ascii?q?glSsliprxv/cMr3gBJXNMmbMkLP7cblh7E5czRI5zcpD6JJMFrEBPPXzV1fxtN?=
 =?us-ascii?q?PCDx85Lxa7w+H9BNV9y4MRQ2SPAqCCPaPWsF+I4P8vIuaWaI8Uvjb9N+Yq5/r0?=
 =?us-ascii?q?gXAlnl8deLGj3YELZ3CgAvRmP0KZbGL2jdcaEWcKuQk+QPbwiFKYUz5efHKyX6?=
 =?us-ascii?q?M65jEmB4OqF4bDRoaxgLOf2Ce3BIFZZmdDClqUC3fna52EW+sQaCKVOsJhkSYL?=
 =?us-ascii?q?Vb67R48l1BGhrgn6y7V8I+rQ+y0Ys4/j1ddv6+3SkxEy6SJ7D8CH326RSGF0m3?=
 =?us-ascii?q?sCRyUq06BnvUx91lCD3LBljPNCC9xc+elFUgcgOp7a1Ox1FdbyVgXFfteKTVam?=
 =?us-ascii?q?Rs6rATUwTtI33t8PbFxxG9SkjhDfwSWqB6UZmKCMBJwx6qjcxWT+J95hy3ba06?=
 =?us-ascii?q?ksl0QpTdFRNWK4nKJ/9xLcB4jSk0qHkaanbqAc3C/L9GeewmuCpkBYUAhsUarb?=
 =?us-ascii?q?WXATfFfZrdP85knaVb+hFawnMhddyc6FMqZKdtzpjVBBRPf/ONTfY3i9m3uqCR?=
 =?us-ascii?q?aP3LOMaIvqe2MS3CjGDEgEkgYT/WuJNAQkByehpX7eAyJqFV71f0zs9ux+omuh?=
 =?us-ascii?q?TkAo1wGKc1Fh172t9xEPgfyTVfwS0awEuSs7sDp0AUuy0MjQC9qDoAphYr5RYd?=
 =?us-ascii?q?c84FdByGLYuBZxPp2mL6B+mFEedx57sF/p1xVyEo9Ai9QlrGs2zApuLqKVyFNA?=
 =?us-ascii?q?dy6C0Z/sILHWK2ny8wqpa67ZwVze1NeW+qES6PU3sVnjvQepFlY8/HVjydVaz3?=
 =?us-ascii?q?yc5pDSBgoITZ3xSlo39wR9p7zCeCk95p/b2md2MaaptT/OwdQpC/U/yhahZttQ?=
 =?us-ascii?q?LLmLFAvvHMIEHciuL+oqlkOtbhIFOuBS6aE1M9mnd/uAxK6kIuJgkCi6gmRA5Y?=
 =?us-ascii?q?B3yliM+DZkSu7Uw5YFxOmV3wuGVzvmjFatqNv3mZ1CZTwJGmq/yC7kBJNeZ6Fo?=
 =?us-ascii?q?fIYLD3uuLNOzxtlkm5HtXHtY/ka5B1wawM+pZQaSb1vl0A1Sz0sXu3+nmSi/zz?=
 =?us-ascii?q?BuiDEmtKmf3C/Pw+TkahUHPHVGRG1jjVfqPIi1gMoWXEmubwg1ihSl4Vz2yLRc?=
 =?us-ascii?q?pKR6N2PTW1tHfzDqL2F+Vau9rrqDbNRI6J8ysyVXUeK8bEueSr78pRsaziziE3?=
 =?us-ascii?q?FfxDA9azGlpJH5kwZmh2KaKXZ5tGDZdt1oxRfD+NzcQuZc3jkcSyl5kzXXBkW8?=
 =?us-ascii?q?MMOv/dWbjJrDtuG+V2S8VpxcayXrzIWAtDel6m1uGxGwg/ezmtj/GwggzSD7z8?=
 =?us-ascii?q?VqVTnPrBvkZ4nr1qe6Pvh9ckhmGlD88NZ6FZ9kkoQrmp4Qw3cai46R/XoGl2fz?=
 =?us-ascii?q?LNpa1bj/bHoLWT4E3drV7BL5101kK3KD35j5WWmFwst9e9m6ZXsb2j4678BPEq?=
 =?us-ascii?q?uV7aZLnS1oolqjtgLRYONwnjMcyfso9X4bjPsFuAsrziWBHL8SGVNUMjDrlxSN?=
 =?us-ascii?q?99q+trlYZH6zcbis00pzhcuuA6uFogFYRXb1YJMiHTJr48V7MVLM1mDz647+dN?=
 =?us-ascii?q?nRa9ITqgObkxPag+dJL5Ixk+IAhTB7NmLloX0l1+k7gARs3Z6guYiINX5t8Lil?=
 =?us-ascii?q?AhJCNT31esAT+izrjalEhcabxISvHpRnGjUWU5rkV/OoEDQOtfv5MwaCCiEzqn?=
 =?us-ascii?q?CeGbDHBw+Q9F9mr27TE5CsL3yWJH4Zzch7RBmAPkNfhhoYXC49np4/GQCn38jh?=
 =?us-ascii?q?cEZ/5jAM6V/0sBpMyuR0NxbhVmfTvhunajAxSJKHNhpZ8hlC51vJMcyZ9u9zHz?=
 =?us-ascii?q?9X/pyirAyOK2yXfQdIDXsOWkyLGV/jJKSu5cLb/uicB+q+KebOYLqUpexfUfeI?=
 =?us-ascii?q?2Yyg0o988zmQMcWPO2FoD+cn1UpbQXB5B8PZli0VRCwKjC3NddCUpRem9i1zr8?=
 =?us-ascii?q?Cy6/DrWAPp5YuSBLpeK9Rv+xaqgaidM+6cnjp2KTFd1pkU33/H1KAf3EIOiyFp?=
 =?us-ascii?q?bzStDbUAtSvXQK3MgKNYEx4bZD11NMZT66I83w9NOdPUi9/v1754iOI1BElBVV?=
 =?us-ascii?q?D7hs6pYskKKXmnNFzbHEaLKKiGJTrTzsD3e6y8T7hQjORStxKouDebE1XsPjKM?=
 =?us-ascii?q?lzTyUxCvMOdMjDyUPRBEuYG9dAptBnbnTN78dhK7N9p33nUKxugQi36CF2kaPC?=
 =?us-ascii?q?M0J0dAo/uS6iVVmd17GmpI9H0jKvOLzWLRxeTeMZEQ+d9mHyJ737ZQ5HknzbR9?=
 =?us-ascii?q?5yFeQ/l0hS6UqcRh9RXute2IxHJFVxpHrC1Qg4TD6UJmPqvx8phQXnOC+h8Ruy?=
 =?us-ascii?q?HYDxUMussgCdD1va1U4sbAmbi1KzpY9d/Qu8wGCJv6MsWCZS4sPgDgHjfIBSMK?=
 =?us-ascii?q?SjmkMWyZjEtYxqLBvkaJp4Q3/8C/0KEFTaVWARlsTqsX?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AHAACAXR1ch0O0hNFdBxsBAQEBAwEBA?=
 =?us-ascii?q?QcDAQEBgVIFAQEBCwGBWoIRJ4N9liIUl0uBJANMLRMBhDwCAoJwIjUIDQEDAQE?=
 =?us-ascii?q?BAQEBAgETAQEBCA0JCCkjDII6KQGCZwMDAQIgBBkBATcBBQkBAR8FAiYCAgMxA?=
 =?us-ascii?q?QUBCxEGAQkJBYJSS4ICBZpIPIopcHwzgnYBAQWHJggSeYZzhEEXgX+BEYJkg0w?=
 =?us-ascii?q?CgU4wgmuCV4lNhxWQZQmFQowbJJFfLIknkDowgSYBggxwFYMnghsJAxeDSop0H?=
 =?us-ascii?q?jOBBQEBi2EpgiQBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AHAACAXR1ch0O0hNFdBxsBAQEBAwEBAQcDAQEBgVIFAQE?=
 =?us-ascii?q?BCwGBWoIRJ4N9liIUl0uBJANMLRMBhDwCAoJwIjUIDQEDAQEBAQEBAgETAQEBC?=
 =?us-ascii?q?A0JCCkjDII6KQGCZwMDAQIgBBkBATcBBQkBAR8FAiYCAgMxAQUBCxEGAQkJBYJ?=
 =?us-ascii?q?SS4ICBZpIPIopcHwzgnYBAQWHJggSeYZzhEEXgX+BEYJkg0wCgU4wgmuCV4lNh?=
 =?us-ascii?q?xWQZQmFQowbJJFfLIknkDowgSYBggxwFYMnghsJAxeDSop0HjOBBQEBi2EpgiQ?=
 =?us-ascii?q?BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,383,1539673200"; 
   d="scan'208";a="67927909"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 21 Dec 2018 13:44:42 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2390644AbeLUVoj (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Fri, 21 Dec 2018 16:44:39 -0500
Received: from mail-qt1-f202.google.com ([209.85.160.202]:33787 "EHLO
        mail-qt1-f202.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S2388783AbeLUVoj (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 21 Dec 2018 16:44:39 -0500
Received: by mail-qt1-f202.google.com with SMTP id k90so7356877qte.0
        for <linux-kernel@vger.kernel.org>; Fri, 21 Dec 2018 13:44:38 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=date:in-reply-to:message-id:mime-version:references:subject:from:to
         :cc;
        bh=3M95R2lYj1eiHAOwr1QaEJcZfmF9z6ovRwKgy9mSvwc=;
        b=PyEaJUCGwECfYVUpPhTcL6VqyTwmbLSeFy7KdlLJs3LlwEcjs8j7f1RPXA8xQDtK5M
         tFavruw+u9qOpBpkjEdOKhtbKV7qBVdqD1JfKyeUfQvLYUP8ilOI+Y9LvNh/V6S9ACKH
         1EddF5juwNy4DWV7Yaii9GkUu9xDx6KArHTdEe7uqtD2l8ZWtilIX0fpy+4VKyiCZWsc
         OBiC3aRd6j7nepVzsIeQ8t2LbuQoh2y5+GfEIqrtbrXnanEb/Z4rtOFt9O8eaJJxf//y
         5bVJ+kcqI+QqdEoHusKVeFt+2dU0iIKt3LbVyWtkTShvgo4UyxA0OC+dnwMo+euQ4VAs
         1NYg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:in-reply-to:message-id:mime-version
         :references:subject:from:to:cc;
        bh=3M95R2lYj1eiHAOwr1QaEJcZfmF9z6ovRwKgy9mSvwc=;
        b=NbU274Ubgtk/gF8npxcSlB3V5urNXlHae8SDGMPknk92YmY3LYZBNnQo3lKoGcHB2h
         amzUZbr88kgkfalvWv1cv5l3p34cq2A+9F8bYpi2XB5Mg6IdPU9UlBlVY+/4ekjbY9uz
         mm5+RCPMzi/MUmzMkemEGdeLT472TV5z4nuldjdJpjwuF3K4dWPcV5DsBmBD04wsvFp1
         ayntEE6v5cK1tpDL7kqvD4MkY2LVbDQDKFq+BNOYruZvy85+nNhGmNEUGHBSIQNTj/i2
         kiZQt/efPJPB/S3BDnw8SEw4hWqbPoj00n5wJ9IsxAq1h7ZJnVzHEpu6Ns2tqVtHG/dR
         65KA==
X-Gm-Message-State: AJcUukdATKA8piSVlZjGfqjv08KtZg70GLBZcN6iHeUxqf+5KQsmm4aP
        w1kne9IWBVIa1whhVfKunRyyBYuYuTL8ag==
X-Google-Smtp-Source: ALg8bN5acLn+CLiyArj42/fiMhnUMWAjKXnAH7f91Ga8ig/o6Sltt3RBLy1pAAfLplxsqrGqCFiCFfu1135B9g==
X-Received: by 2002:a37:12e1:: with SMTP id 94mr2738085qks.25.1545428677545;
 Fri, 21 Dec 2018 13:44:37 -0800 (PST)
Date: Fri, 21 Dec 2018 13:44:33 -0800
In-Reply-To: <20181207222223.GA240898@google.com>
Message-Id: <20181221214433.256656-1-egranata@chromium.org>
Mime-Version: 1.0
References: <20181207222223.GA240898@google.com>
X-Mailer: git-send-email 2.20.1.415.g653613c723-goog
Subject: [PATCH v2] mfd: cros_ec: Add support for MKBP more event flags
From: <egranata@google.com>
To: Lee Jones <lee.jones@linaro.org>,
        Benson Leung <bleung@chromium.org>,
        Olof Johansson <olof@lixom.net>, linux-kernel@vger.kernel.org
Cc: Gwendal Grignou <gwendal@google.com>,
        Brian Norris <briannorris@google.com>,
        Enrico Granata <egranata@google.com>,
        Enrico Granata <egranata@chromium.org>
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From: Enrico Granata <egranata@chromium.org>

The ChromeOS EC has support for signaling to the host that
a single IRQ can serve multiple MKBP events.

Doing this serves an optimization purpose, as it minimizes the
number of round-trips into the interrupt handling machinery, and
it proves beneficial to sensor timestamping as it keeps the desired
synchronization of event times between the two processors.

This patch adds kernel support for this EC feature, allowing the
ec_irq to loop until all events have been served.

ChangeLog:
  - Cleanup incorrect comment in cros_ec.h

Signed-off-by: Enrico Granata <egranata@chromium.org>
---
 drivers/mfd/cros_ec.c                   | 20 +++++++++++++--
 drivers/platform/chrome/cros_ec_proto.c | 33 +++++++++++--------------
 include/linux/mfd/cros_ec.h             |  7 ++++--
 include/linux/mfd/cros_ec_commands.h    | 15 +++++++++++
 4 files changed, 53 insertions(+), 22 deletions(-)

diff --git a/drivers/mfd/cros_ec.c b/drivers/mfd/cros_ec.c
index fe6f83766144f..17903a378aa1a 100644
--- a/drivers/mfd/cros_ec.c
+++ b/drivers/mfd/cros_ec.c
@@ -51,13 +51,16 @@ static const struct mfd_cell ec_pd_cell = {
 	.pdata_size = sizeof(pd_p),
 };
 
-static irqreturn_t ec_irq_thread(int irq, void *data)
+static bool ec_handle_event(struct cros_ec_device *ec_dev)
 {
-	struct cros_ec_device *ec_dev = data;
 	bool wake_event = true;
 	int ret;
+	bool ec_has_more_events = false;
 
 	ret = cros_ec_get_next_event(ec_dev, &wake_event);
+	if (ret > 0)
+		ec_has_more_events =
+			ec_dev->event_data.event_type & EC_MKBP_HAS_MORE_EVENTS;
 
 	/*
 	 * Signal only if wake host events or any interrupt if
@@ -70,6 +73,19 @@ static irqreturn_t ec_irq_thread(int irq, void *data)
 	if (ret > 0)
 		blocking_notifier_call_chain(&ec_dev->event_notifier,
 					     0, ec_dev);
+
+	return ec_has_more_events;
+}
+
+static irqreturn_t ec_irq_thread(int irq, void *data)
+{
+	struct cros_ec_device *ec_dev = data;
+	bool ec_has_more_events;
+
+	do {
+		ec_has_more_events = ec_handle_event(ec_dev);
+	} while (ec_has_more_events);
+
 	return IRQ_HANDLED;
 }
 
diff --git a/drivers/platform/chrome/cros_ec_proto.c b/drivers/platform/chrome/cros_ec_proto.c
index b6fd4838f60f3..bb126d95b2fd4 100644
--- a/drivers/platform/chrome/cros_ec_proto.c
+++ b/drivers/platform/chrome/cros_ec_proto.c
@@ -420,10 +420,14 @@ int cros_ec_query_all(struct cros_ec_device *ec_dev)
 	ret = cros_ec_get_host_command_version_mask(ec_dev,
 						    EC_CMD_GET_NEXT_EVENT,
 						    &ver_mask);
-	if (ret < 0 || ver_mask == 0)
+	if (ret < 0 || ver_mask == 0) {
 		ec_dev->mkbp_event_supported = 0;
-	else
-		ec_dev->mkbp_event_supported = 1;
+		dev_info(ec_dev->dev, "MKBP not supported\n");
+	} else {
+		ec_dev->mkbp_event_supported = fls(ver_mask);
+		dev_info(ec_dev->dev, "MKBP support version %u\n",
+			ec_dev->mkbp_event_supported - 1);
+	}
 
 	/*
 	 * Get host event wake mask, assume all events are wake events
@@ -530,28 +534,19 @@ static int get_next_event(struct cros_ec_device *ec_dev)
 {
 	u8 buffer[sizeof(struct cros_ec_command) + sizeof(ec_dev->event_data)];
 	struct cros_ec_command *msg = (struct cros_ec_command *)&buffer;
-	static int cmd_version = 1;
-	int ret;
+	const int cmd_version = ec_dev->mkbp_event_supported - 1;
 
 	if (ec_dev->suspended) {
 		dev_dbg(ec_dev->dev, "Device suspended.\n");
 		return -EHOSTDOWN;
 	}
 
-	if (cmd_version == 1) {
-		ret = get_next_event_xfer(ec_dev, msg, cmd_version,
-				sizeof(struct ec_response_get_next_event_v1));
-		if (ret < 0 || msg->result != EC_RES_INVALID_VERSION)
-			return ret;
-
-		/* Fallback to version 0 for future send attempts */
-		cmd_version = 0;
-	}
-
-	ret = get_next_event_xfer(ec_dev, msg, cmd_version,
+	if (cmd_version == 0)
+		return get_next_event_xfer(ec_dev, msg, 0,
 				  sizeof(struct ec_response_get_next_event));
 
-	return ret;
+	return get_next_event_xfer(ec_dev, msg, cmd_version,
+				sizeof(struct ec_response_get_next_event_v1));
 }
 
 static int get_keyboard_state_event(struct cros_ec_device *ec_dev)
@@ -607,11 +602,13 @@ EXPORT_SYMBOL(cros_ec_get_next_event);
 
 u32 cros_ec_get_host_event(struct cros_ec_device *ec_dev)
 {
+	u32 event_type =
+		ec_dev->event_data.event_type & EC_MKBP_EVENT_TYPE_MASK;
 	u32 host_event;
 
 	BUG_ON(!ec_dev->mkbp_event_supported);
 
-	if (ec_dev->event_data.event_type != EC_MKBP_EVENT_HOST_EVENT)
+	if (event_type != EC_MKBP_EVENT_HOST_EVENT)
 		return 0;
 
 	if (ec_dev->event_size != sizeof(host_event)) {
diff --git a/include/linux/mfd/cros_ec.h b/include/linux/mfd/cros_ec.h
index e44e3ec8a9c7d..cb07ee95a6eb8 100644
--- a/include/linux/mfd/cros_ec.h
+++ b/include/linux/mfd/cros_ec.h
@@ -119,7 +119,9 @@ struct cros_ec_command {
  *            code.
  * @pkt_xfer: Send packet to EC and get response.
  * @lock: One transaction at a time.
- * @mkbp_event_supported: True if this EC supports the MKBP event protocol.
+ * @mkbp_event_supported: 0 if MKBP not supported. Otherwise its value is
+ *                        the maximum supported version of the MKBP host event
+ *                        command + 1.
  * @event_notifier: Interrupt event notifier for transport devices.
  * @event_data: Raw payload transferred with the MKBP event.
  * @event_size: Size in bytes of the event data.
@@ -152,7 +154,8 @@ struct cros_ec_device {
 	int (*pkt_xfer)(struct cros_ec_device *ec,
 			struct cros_ec_command *msg);
 	struct mutex lock;
-	bool mkbp_event_supported;
+	/* 0 == not supported, otherwise it supports version x - 1 */
+	u8 mkbp_event_supported;
 	struct blocking_notifier_head event_notifier;
 
 	struct ec_response_get_next_event_v1 event_data;
diff --git a/include/linux/mfd/cros_ec_commands.h b/include/linux/mfd/cros_ec_commands.h
index 9a9631f0559e2..3f013593d0107 100644
--- a/include/linux/mfd/cros_ec_commands.h
+++ b/include/linux/mfd/cros_ec_commands.h
@@ -2146,6 +2146,14 @@ struct ec_result_keyscan_seq_ctrl {
  */
 #define EC_CMD_GET_NEXT_EVENT 0x67
 
+#define EC_MKBP_HAS_MORE_EVENTS_SHIFT 7
+
+/* EC can provide more MKBP events to host */
+#define EC_MKBP_HAS_MORE_EVENTS (1 << EC_MKBP_HAS_MORE_EVENTS_SHIFT)
+
+/* The mask to apply to get the raw event type */
+#define EC_MKBP_EVENT_TYPE_MASK ((1 << EC_MKBP_HAS_MORE_EVENTS_SHIFT) - 1)
+
 enum ec_mkbp_event {
 	/* Keyboard matrix changed. The event data is the new matrix state. */
 	EC_MKBP_EVENT_KEY_MATRIX = 0,
@@ -2173,6 +2181,13 @@ enum ec_mkbp_event {
 
 	/* Number of MKBP events */
 	EC_MKBP_EVENT_COUNT,
+
+	/*
+	 * Maximum possible event type
+	 * The most significant bit of event type is used to indicate that
+	 * the EC has multiple events for the AP to serve
+	 */
+	EC_MKBP_EVENT_MAX_TYPE = EC_MKBP_EVENT_TYPE_MASK,
 };
 
 union ec_response_get_next_data {
-- 
2.20.1.415.g653613c723-goog

