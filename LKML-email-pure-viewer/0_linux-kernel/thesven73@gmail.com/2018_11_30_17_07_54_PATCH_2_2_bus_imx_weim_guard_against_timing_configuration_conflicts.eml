Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:20:52 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 77EF1580213;
	Fri, 30 Nov 2018 09:08:10 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by fmsmga006-1.fm.intel.com with ESMTP; 30 Nov 2018 09:08:09 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AC3uPNRHX/W2p9Yf+moSaMp1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75os6/bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJVyJPHJ6y?=
 =?us-ascii?q?YYUMAeQGP+lYoZL9p0MMoBalGQWgGPnixiNSi3PqwaE31fkqHwHc3AwnGtIDqG?=
 =?us-ascii?q?jUrNXrO6cJT+C60q/IwDfNYv5N1jf97ZLHchElof2WQb1wds/RxE8yHA3GllWd?=
 =?us-ascii?q?sZLpMy+R2+gXrmSW4fRsWfiyh2Mktw19uDmiy8U0hoXUgo8YyUrI+CVnzIovON?=
 =?us-ascii?q?G1S052bcS6HJdOtSyXMZZ9TNk4TGFyoik6z6ULuZ6lcygOz5Qq3wDfa/OZfIiS?=
 =?us-ascii?q?+B7jV/ieIS1+hH17fLKznRGy8VKvyuHkV8m01khFrjZdn9XSqnwA0wbf5tWJR/?=
 =?us-ascii?q?dj5EutxDWC2xzJ5uxFI004ja/bJIQgwr40mJoTq0PDHirulUXyja+WcFgk++ex?=
 =?us-ascii?q?5+TkfLrmvJmcOJFwig3nNaQvlMq/DvoiMgUVQWib9vqz1Kf58U36XrpKlPs2nb?=
 =?us-ascii?q?fdsJzAIsQbvKG5DxdP0ok/8xa/Eyum0NMAkHkDLVJFewyIg5LmOlHTO/34Cfa/?=
 =?us-ascii?q?g1KxkDZk3fzGP7vhAonTIXjHirvuYbF960tEwgop0d9f/45UCq0GIP/rWk/+rt?=
 =?us-ascii?q?3YDgMjPAyz2ernCMh92ZkYWWKAGaKZNKLSsVmV5uMgOeWMZYkVuCrjJPgh/fLh?=
 =?us-ascii?q?kXg5mVoFd6mzwZQXcGy4HuhhI0iBY3rshckOHX0Jvgo5SuzqjlqCXCVXZ3azWa?=
 =?us-ascii?q?I8+z46BJinDYfFWoCinriB0D2nEZ1RY2BMEkqMHmvwd4WYR/cMbzqfLdV6kjwE?=
 =?us-ascii?q?UrihSJUt1Qu0uw/40LdnKuvU+isFtZPsztR15uvTlQ0s+jxwFciSz2aNT2RslG?=
 =?us-ascii?q?MSWzA2xLx/oVB6ylqb0qh3mfpYGcZX5/NISAg6M5Hcwvd+C9DzXALBY9iIREyn?=
 =?us-ascii?q?QtWgHTE+UNYxz8USbEZ6HtWolgrD0DayA78Ji7yLA4Q5/b/G0HjvOclx0XbG27?=
 =?us-ascii?q?Mnj1k9XMRPM2qqhqp89wjWA47EiEGZl6esdaQB0y/B7maDzWySvE5GVA58S7nK?=
 =?us-ascii?q?XXcaZkHOt9T2+lvCT6OyCbQgKgZO1NSNKrVUZdHzjVVJXvHjOM/AbGK3gGqwAR?=
 =?us-ascii?q?eIxrWRbIvlYWkd3SPdCFQanAAX53qJKQ8+BiK5qWLEEDNuDU7vY1/r8eRmtHO7?=
 =?us-ascii?q?T0o0zwaWb01h17u54AIVieabS/MJ2rIEuSEhqzpvEVa53tLWDceApgV7cKVdZ9?=
 =?us-ascii?q?M9/ElI1WbDuwNhOZygKrhohkQCfARvo0PuyxJ3B51ansgusnwrwxR9KKKC3Fxa?=
 =?us-ascii?q?ajOXwIr/OrvUKmn14hCicKrW2lDY0NaL9aYD8vU4q1P/vA63Ekou6Wlo095Q03?=
 =?us-ascii?q?GE/JXFEBISUY7tUkYw7xV7p6zabjMh6I/O1HxsMbO7sjnN298yAOslyxCgf8pQ?=
 =?us-ascii?q?Ma+eFQ/yFdEaCNaqKOAwh1epaRcENvhI9KEoJ8Oma+eG2KmzMeZ6nTKpkX5I4J?=
 =?us-ascii?q?pg3UKL7SZ8TPDH34wEw/2BwgSITTP8g0q/vcDtnoBEYyofHm6+ySjiGY5Qabd+?=
 =?us-ascii?q?fYcNCWeyPcK3ws9yiILqW35d7FSjHU8J2Ne1eRqOaFzwxQ1R1UUNrX2ngye41C?=
 =?us-ascii?q?F0kzcyo6qb3SzOxfnidRUdNm5KQmlikUnjIYyug98GW0ioahAjlAG56kbi26hb?=
 =?us-ascii?q?uKN/InHRQUhSZSj2LGJiUqyqurqZecFP65AosSRRUOuiZ1CXUbr9oxoc0yP+EG?=
 =?us-ascii?q?pS3jE7dze2uprnmxx2kn6SLHF2rHDBY8F/2Q/f5MDARf5WxjcHRDN3iT7NCli+?=
 =?us-ascii?q?Ptmp+86Zl5PCsuC4SmKgWYdfcSjtzYOcqiS74XdmDgG4n/C2gtfnCxQ10Tfn19?=
 =?us-ascii?q?l2UiXFtBX8bZPq16igMeJnY1NnBFnz68dhHoF+k40whIwf2HQAh5WV+2YHnnn3?=
 =?us-ascii?q?MdlBxa3+a38NTyYRw9HJ+AjlxFFjLnWRyoL8V3WdwdFua8O0Y2wIwSI9895FCL?=
 =?us-ascii?q?2P47Nahyt1rUG1rQbQYfh7gzccxuEi6H8cg+EVpgUtyj+RDawVHUldJSbsjQiH?=
 =?us-ascii?q?78iirKVLY2aiaaSw1E17ndy7DbCNuAdcWGviepc5HC999cF/MFPK0H3u5YDoYt?=
 =?us-ascii?q?jQbdQPthKKlxfMlfRaKJU0lvASnypoJXr9vWE5y+48lRFhxou1vI+DK2Vw5q65?=
 =?us-ascii?q?BgNYOybxZ8MS/DHtkKlfktyX34CpApVuBDELUIH0QvKvFTIYre7nOBqWED0gtn?=
 =?us-ascii?q?ebHqLSHQ2F50djsX3PCIqnN22NKHka0NViRwSdJEpFjwAPRzg6mp85Fga3xM3u?=
 =?us-ascii?q?akt55zYR5kLmpRtI0O5nKx7/UmLHrgeydjg0UISfLAZR7gxa50bVNtGe7vtuHy?=
 =?us-ascii?q?5C+J2ttheNKmudZwRHFmwJXk2EB1b+Prih/9XA8u6YBvagIPvKe7mBteteV/KQ?=
 =?us-ascii?q?z5K1zoRm5yqMNtmIPnR6D/00xEtDXXN6G8TYgTkPSDYXlyXCb8GFvhe85zZ3o9?=
 =?us-ascii?q?u78PTqXgLv+ISOB6FTMdVp5xC5n6ODO/SMiyZ+LDZSzokMymPQyLgDwF4SjDlj?=
 =?us-ascii?q?eCOwEbsbry7CUqLRlrVTDx4acC5zMMpI76Qh3ghCI8Lbi9X11qJmgf4xEVtKSV?=
 =?us-ascii?q?vhmsSxb8wQP269LE/HBFqMNLmeOT3LwsT3bbmgRrFKkOpUtwO/uTCAHk/nPzSD?=
 =?us-ascii?q?kSTpVh+1PeFNiiGbIAJRuIWnfhlxDmjjScrsagenP99vkT023bo0i2vKNGEGNz?=
 =?us-ascii?q?h8dkJNrruI4iJZgvVwAWpB7nV+IOmAmiaZ6fTYK5kMvftqBCR0i/xV4HAgx7RJ?=
 =?us-ascii?q?6yFEQa89pCyHkt5jmE+rlLbU4jVgVxVKpzNChYbNtkJnfe3i9pBfXz7r4RVFuX?=
 =?us-ascii?q?6QAgsMqMZiIt7ioaZdzp7Ijq2lbH9h/t/PteAbAMucfMGKPWEqNh3qMDXUFgwA?=
 =?us-ascii?q?TCOuc2bFiBoZ2MuV/DW1o4Igq57j0M4UTbVbfF84DPUXDgJiBtNUZN9eRDUo2Z?=
 =?us-ascii?q?SWlsEN7Hy45E3YXsNWlpndUP6YR/nifmW3l75BMgcIzKjmIIJMbaX03kVjbh9x?=
 =?us-ascii?q?m4GZSALrQdlRr3g5PUcPq0JX/S07FzVr1g=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A4AABNbQFch0O0hNFjHQEBBQEHBQGBU?=
 =?us-ascii?q?wYBCwGDayeYG4INFIhqJG6NOIFzEgEBGBMBh3YiNgcNAQMBAQEBAQECARMBAQE?=
 =?us-ascii?q?IDQkIKSMMgjYkAYJiAwMBAiQZARsdAQMCCQEBBRoxAyARAQUBHAYBEgWDHIFpA?=
 =?us-ascii?q?QMVBZpvPIwJFgUBF4J3BYEBgzwKGScNXROBJAIGEodagWqBKIEcghaBEYVpiAU?=
 =?us-ascii?q?CgSoBAYd3hwNQjz4BBgIBgVOEbYpsI4lZh0aIe487AgQCBAUCBQ8hgSsBggZwg?=
 =?us-ascii?q?QFtgU6CGwwXg0qKcSIygQQBAQE7jQ4BAQ?=
X-IPAS-Result: =?us-ascii?q?A0A4AABNbQFch0O0hNFjHQEBBQEHBQGBUwYBCwGDayeYG4I?=
 =?us-ascii?q?NFIhqJG6NOIFzEgEBGBMBh3YiNgcNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkA?=
 =?us-ascii?q?YJiAwMBAiQZARsdAQMCCQEBBRoxAyARAQUBHAYBEgWDHIFpAQMVBZpvPIwJFgU?=
 =?us-ascii?q?BF4J3BYEBgzwKGScNXROBJAIGEodagWqBKIEcghaBEYVpiAUCgSoBAYd3hwNQj?=
 =?us-ascii?q?z4BBgIBgVOEbYpsI4lZh0aIe487AgQCBAUCBQ8hgSsBggZwgQFtgU6CGwwXg0q?=
 =?us-ascii?q?KcSIygQQBAQE7jQ4BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,299,1539673200"; 
   d="scan'208";a="42265857"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 30 Nov 2018 09:08:08 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727751AbeLAESC (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 30 Nov 2018 23:18:02 -0500
Received: from mail-it1-f195.google.com ([209.85.166.195]:33728 "EHLO
        mail-it1-f195.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727669AbeLAESA (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 30 Nov 2018 23:18:00 -0500
Received: by mail-it1-f195.google.com with SMTP id m8so2438398itk.0
        for <linux-kernel@vger.kernel.org>; Fri, 30 Nov 2018 09:08:03 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=from:to:cc:subject:date:message-id:in-reply-to:references;
        bh=Pkkhki6gOw8na4aLzcjKwCRPB4mHo2I09YZSWHEShAA=;
        b=Vy/evIQhFHTxXtmT1GrpIk+f15L2ffu7raGxmXLyznJ97xd7OTwSGnJAFFX+uRkwA4
         uwN1XdUCR2VZQXBNz8QRNsbml8zb/rDSo534jymsRbkgVE+FU4wwDS629OP3j8GuF8K3
         2Cklkw7iarnakGVEMiuZ4d0k8+FmT8mrbfNisiTsDezXx3F2IWi/SgoQZpB7exdlLlsD
         6BLrRp3kcwRV1eB5Fjp73Iz9GvB0om+aoVYRI44rHJp83603OPgidFms0SXbmmXIzAvm
         IiwM8udIKza60NT80MMyJU69X056tIIxVlSjk8hxI7lcFp0YcgFeFPLJIrGt6p4dM1Gy
         /lHQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references;
        bh=Pkkhki6gOw8na4aLzcjKwCRPB4mHo2I09YZSWHEShAA=;
        b=LAgmHqlFtDw7PvvdiKGVPKNAD+Bvf0s2LUSaBgVeh9OwpN1wTotfujgNUJKxCAjYAt
         nKmUll2SHlPEfx7yaP+XS7BkWTUjpePP5iqtW3c3wwHzJVfYqP+pBOhfcJhjJckenrmd
         dp1gdBW07QO3864lCEJMH2lkA2/d6yZEMddFL5kY27wTM5lbBLPdpYZvZh9pN+dJywi+
         /NGdAH7x3SN+VnKOh5p0+aPGC0gmSAJhyT3reA3ESTdUIQAl6vwM6tkipuCSqFKDzAYy
         hrFmi5BHqDp+F4ao0nflqLITmmnhElRooQW/DU7nZVPYlZkEkADiwQ5gk6kbEkdr+/he
         lYFg==
X-Gm-Message-State: AA+aEWaTArGeLy+xS03LYWmZ+V3RxFqLiKoHN4SC+9f1AvaWBiO+3/p0
        osj1HenroHkce5UASUbEDeQ=
X-Google-Smtp-Source: AFSGD/VQMggFAhEpwbZ93hE177TGK5/CrwBSEO/MK9tOg9CiQLKBP0JEdWSeEvtfc8dSY/v2yKxBlw==
X-Received: by 2002:a02:8ca8:: with SMTP id f37mr6067381jak.80.1543597682784;
        Fri, 30 Nov 2018 09:08:02 -0800 (PST)
Received: from localhost.localdomain ([198.52.185.227])
        by smtp.gmail.com with ESMTPSA id u26sm2143387iob.31.2018.11.30.09.08.01
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Fri, 30 Nov 2018 09:08:02 -0800 (PST)
From: thesven73@gmail.com
X-Google-Original-From: TheSven73@googlemail.com
To: TheSven73@googlemail.com, Shawn Guo <shawnguo@kernel.org>,
        Kees Cook <keescook@chromium.org>,
        Rob Herring <robh@kernel.org>, Arnd Bergmann <arnd@arndb.de>
Cc: linux-kernel@vger.kernel.org
Subject: [PATCH 2/2] bus: imx-weim: guard against timing configuration conflicts
Date: Fri, 30 Nov 2018 12:07:54 -0500
Message-Id: <20181130170754.346-3-TheSven73@googlemail.com>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20181130170754.346-1-TheSven73@googlemail.com>
References: <20181130170754.346-1-TheSven73@googlemail.com>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From: Sven Van Asbroeck <TheSven73@googlemail.com>

When adding weim child devices, there is a risk that the developer will
(by mistake) specify more than one timing setting for the same chip select.

The driver cannot support such a configuration.

In case of conflict, this patch will print a warning to the log,
and will ignore the child node in question.

In this example, node acme@1 will be ignored, as it tries to modify
timing settings for CS0:

&weim {
	acme@0 {
		compatible = "acme,whatever";
		reg = <0 0 0x100>;
		fsl,weim-cs-timing = <something>;
	};
	acme@1 {
		compatible = "acme,whatnot";
		reg = <0 0x500 0x100>;
		fsl,weim-cs-timing = <something else>;
	};
};

However in this example, the driver will be happy:

&weim {
        acme@0 {
                compatible = "acme,whatever";
                reg = <0 0 0x100>;
                fsl,weim-cs-timing = <something>;
        };
        acme@1 {
                compatible = "acme,whatnot";
                reg = <0 0x500 0x100>;
                fsl,weim-cs-timing = <something>;
        };
};

Signed-off-by: Sven Van Asbroeck <TheSven73@googlemail.com>
---
 drivers/bus/imx-weim.c | 33 ++++++++++++++++++++++++++++++---
 1 file changed, 30 insertions(+), 3 deletions(-)

diff --git a/drivers/bus/imx-weim.c b/drivers/bus/imx-weim.c
index 24f22285395d..114e503ec785 100644
--- a/drivers/bus/imx-weim.c
+++ b/drivers/bus/imx-weim.c
@@ -46,8 +46,18 @@ static const struct imx_weim_devtype imx51_weim_devtype = {
 };
 
 #define MAX_CS_REGS_COUNT	6
+#define MAX_CS_REGS		6
 #define OF_REG_SIZE		3
 
+struct cs_timing {
+	bool is_applied;
+	u32 regs[MAX_CS_REGS_COUNT];
+};
+
+struct cs_timing_state {
+	struct cs_timing cs[MAX_CS_REGS];
+};
+
 static const struct of_device_id weim_id_table[] = {
 	/* i.MX1/21 */
 	{ .compatible = "fsl,imx1-weim", .data = &imx1_weim_devtype, },
@@ -112,11 +122,14 @@ static int __init imx_weim_gpr_setup(struct platform_device *pdev)
 }
 
 /* Parse and set the timing for this device. */
-static int __init weim_timing_setup(struct device_node *np, void __iomem *base,
-				    const struct imx_weim_devtype *devtype)
+static int __init weim_timing_setup(struct device *dev,
+				    struct device_node *np, void __iomem *base,
+				    const struct imx_weim_devtype *devtype,
+				    struct cs_timing_state *ts)
 {
 	u32 cs_idx, value[MAX_CS_REGS_COUNT];
 	int i, ret, reg_idx, num_regs;
+	struct cs_timing *cst;
 
 	if (WARN_ON(devtype->cs_regs_count > MAX_CS_REGS_COUNT))
 		return -EINVAL;
@@ -145,10 +158,23 @@ static int __init weim_timing_setup(struct device_node *np, void __iomem *base,
 		if (cs_idx >= devtype->cs_count)
 			return -EINVAL;
 
+		/* prevent re-configuring a CS that's already been configured */
+		cst = &ts->cs[cs_idx];
+		if (cst->is_applied && memcmp(value, cst->regs,
+					devtype->cs_regs_count*sizeof(u32))) {
+			dev_err(dev, "fsl,weim-cs-timing conflict on %pOF", np);
+			return -EINVAL;
+		}
+
 		/* set the timing for WEIM */
 		for (i = 0; i < devtype->cs_regs_count; i++)
 			writel(value[i],
 				base + cs_idx * devtype->cs_stride + i * 4);
+		if (!cst->is_applied) {
+			cst->is_applied = true;
+			memcpy(cst->regs, value,
+				devtype->cs_regs_count*sizeof(u32));
+		}
 	}
 
 	return 0;
@@ -165,6 +191,7 @@ static int __init weim_parse_dt(struct platform_device *pdev,
 	const struct imx_weim_devtype *devtype = of_id->data;
 	struct device_node *child;
 	int ret, have_child = 0;
+	struct cs_timing_state ts = {};
 
 	if (devtype == &imx50_weim_devtype) {
 		ret = imx_weim_gpr_setup(pdev);
@@ -179,7 +206,7 @@ static int __init weim_parse_dt(struct platform_device *pdev,
 	}
 
 	for_each_available_child_of_node(pdev->dev.of_node, child) {
-		ret = weim_timing_setup(child, base, devtype);
+		ret = weim_timing_setup(&pdev->dev, child, base, devtype, &ts);
 		if (ret)
 			dev_warn(&pdev->dev, "%pOF set timing failed.\n",
 				child);
-- 
2.17.1

