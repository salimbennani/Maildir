Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 23 Nov 2018 12:22:57 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 65E33580460;
	Thu, 22 Nov 2018 19:14:57 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga004-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 22 Nov 2018 19:14:57 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AlDVBoxLs7LkoxekVw9mcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgUL/38rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZUMhfVzJPDJ6/?=
 =?us-ascii?q?YYsBAOUOIftXoIvzqFsVtRuzBxKhBP/zxjJSmnP6wbc33/onHArb3AIgBdUOsH?=
 =?us-ascii?q?HModvxM6cdT+S1x7TIwzrddfNW3y3y6I7VfR8/uvGHQLV9ccjWyUYxEwPIlVeQ?=
 =?us-ascii?q?qYv7MDOR2OQCrXKb7+x6WuKplmEotRpxriKoxsc2hYnEn4QYwU3H+yVh2Is5O8?=
 =?us-ascii?q?G0RUphbdK5HpZcqTuWO5Z1T88+WW1luSQ3xqUYtZO6YiQG1JEqywLaZvCab4SE?=
 =?us-ascii?q?/g7vWeOMLTp5mH5pZbeyihio/ke+xO3xU8e53EtFoypLl9TDrXQA2ALJ5cWCSf?=
 =?us-ascii?q?Zw/UOs2TiJ2gvO8O9LO1o0mrDeK5M5wr4/iJ4TsUPbEy/ol0X5krWWel8n+ue2?=
 =?us-ascii?q?8eTnZKvpppuGO49zkAH+Pbwims25AesmLggDR3aX9fi42bH54EH0TqtGgucrnq?=
 =?us-ascii?q?TarJzWP8UWq6yhDw9QyIkj6hK/Dzm80NQfmHkKNFZFeBOBj4j0NFDCOfP4Auml?=
 =?us-ascii?q?g1Sqjjhrw+nKPrrvA5XLMHfDiqzsfahy60FC0go/19Nf6IxOCrEHPv3zXlX9tN?=
 =?us-ascii?q?vCDh82KwC02froCM1h1oMCXmKCGquZMKLRsVCW/O4uLPSMaZQRuDb8Lfgl+vHv?=
 =?us-ascii?q?gWU4mV8bYammw58XZGqkEfRhJkWTeWDsjcsZEWcWogo+S/TniF2YXj5Se3a9Ra?=
 =?us-ascii?q?U86is7CIK7F4jDQI+tjaeF3Ce6GJ1We29HBkqNEXfua4WLRfMMZDiOLc9mlzwO?=
 =?us-ascii?q?TaKhRJM51RGyqA/6zKJqLujT+iIGr57j19915+vVlRE17jF0C8Wd02eQT2B7hG?=
 =?us-ascii?q?8IRjk23Lxhrkx50FuMza94g/lAH9xJ+/xJShs6NYLbz+FiEd/yQQLBftCKSFq8?=
 =?us-ascii?q?WNWpGzMxQ8k1w98PZUZ9BtqjggrC3yqsH78aibiLCIYo/aLb2nj7P9x9xGre1K?=
 =?us-ascii?q?k9k1kmRdNCNW68ia557QTTA4/JnF+fl6albqkc2C/N9GGezWuBpk1YUQhwUbnb?=
 =?us-ascii?q?UnAbfEfZsdP55kbaRb+0FbsnKhdBydKFKqZSd9Lml0tGS+n5NNTeeW2xnXywCg?=
 =?us-ascii?q?iOxr+LaIrqeGAd3CHGBUgAkgAT+2uGNAckCiegpWLeECJhFVb1b0zw9ul+rWux?=
 =?us-ascii?q?TlUowAGSc01hy7219wYIivOGVfMcwKgIuCc7pDVyB1aywdTWBsGEpwpgeqVcfN?=
 =?us-ascii?q?w87E1G1WLfqwxyIJigI7p+iV4ZdgR9p1nu2AlvCoVcjcgqq2snzBZzKaKd11NB?=
 =?us-ascii?q?azOY3JDqNr3LMGXy+wqva6rX2lHY39ab4aMP6PU+q1X+swClDEsi83N709ZL13?=
 =?us-ascii?q?uQ/InFDA0XUZjpSEY46wB6p63GYik6/47bz3lsPre7szDc29MlHvAqygu9cNhF?=
 =?us-ascii?q?NqOEFwjyE9MBCsiqKewqnUWpbx0eMOBT8q40I92pd/+c1KG3O+ZgmSqsjX5b74?=
 =?us-ascii?q?BlzkKM6y18R/bI3pYY2f2XwhGLVjb8jFi7tMD3lptJZTUTHmq51CjlC5RdZqx0?=
 =?us-ascii?q?fYYXF2iuJ9e7ycl5h57oQ3RY7kKsB0sa2M+1fhqfd0b93QxM2ksNu3yohCy4wy?=
 =?us-ascii?q?Zykz43tKqf3TXCzPj4exoDJ2FEWnNijVDqIYWvi9AaXU6obxUmlRe/5Eb6wbRb?=
 =?us-ascii?q?q7p7L2XJXUhIeC32JXl4UqSsrrqCf9JP6JQwvCRXUeSwe1CbRqTmoxsH1SPuBG?=
 =?us-ascii?q?9exDE9dzG3tZT1hR16iGSBLHltqHrVY91/xRDa5NbEX/5ewiIGRDVkiTnQHlW8?=
 =?us-ascii?q?PcOm/c+Xl5fAteCyTXmhWYdQcSnozIOAsjW05WtxDB27nvCznMDnEAcg3S/60d?=
 =?us-ascii?q?lqSTvHrBLmbob30KS6NPptflN0C1/k98p6BoZ+n5MwhZ4K3ngWnJeV/XsBkWro?=
 =?us-ascii?q?NdVb2KT+bGcCRDIRwt7V5hTl11NnLn6T2435UXCdyNN7Z9amemMWxj4978dSBa?=
 =?us-ascii?q?eX9rNEnDF5olqlrQ3LZ/h9kSwQyf8v6H4cnuEItxAhziSbArAOA0ZYOTbgmAiP?=
 =?us-ascii?q?79C7tK9XfnqgcaCs1EpimtCsFLSCogBfWHnjYJsjEzF/7t5jMF3Syn388Z/reM?=
 =?us-ascii?q?Pfbd8Ish2UkhHAj/VaKZ4rl/oKgzZnNnz5vXE/1+E7ihlu14mgvIebM2Vt4L65?=
 =?us-ascii?q?AhlAOz3pYMMT/yvhjKdEkcaQwoCvBY5hGjQQUZvsTPKoFi8StPv9OwaPFj08tm?=
 =?us-ascii?q?mUGb7FEQCD70dmqmrFE4q3OHGPOHkZ0dJiSQGGK0NFhwAUWCg6koQ9FgC338Hh?=
 =?us-ascii?q?dEZ55jYM5l/3sBdMy+RoNwXhXWfbvgundjA0SJ2HJhpM8g5C/1vVMdCZ7u9rHS?=
 =?us-ascii?q?FX5JihoxKWKmCBewREF2IJWlGHB1D+OLmh/8LA/vOcBuq/KfvOfLqPpfZfV/eO?=
 =?us-ascii?q?2ZKgzI9m8yyQOcWIO3loF+c71VZbXXBlB8TZnC0CSiwQlyLQds6buQ2z+ittos?=
 =?us-ascii?q?Ck9/TrXg3v6JCLC7tTN9Vv5h+3jb2CN+6WmCZ2NzJY2okQyn/PzbgVxEQShD12?=
 =?us-ascii?q?dzmxDbQAsjbATKLOla9WDB4baCJzONFL76Im2QlNNtDUisno1r5jlfM1D1ZFVV?=
 =?us-ascii?q?r8msCmf8AKIme9NE/ZC0aPLriJOTrLw8Tva6OmVbJQlPlUtwG3uTuDCUDjIy+M?=
 =?us-ascii?q?lyP3WBGvK+1MiCCbMQdauIG8dBZtFGfiQMjnah29LN94kzk2zacoiXPNMG4WKS?=
 =?us-ascii?q?J8fF9Vrr2M8SNYhe1yG3BA7npgN+WLhzyV4PXYKpkIt/tmGSB0l+Nc4HQnxLpZ?=
 =?us-ascii?q?9iBERPppmCTMqt5iuU2pku6KyjB/ShpBti5LhJ6XvUVlIajY9oNPWXDB/BIM62?=
 =?us-ascii?q?WfExULp9t/Bd3ptKBd0dzPlKP1KDdf/NPY58ocB87IKM2ZNHotKwbmGDnRDFhN?=
 =?us-ascii?q?cTn+Dn3SmUFb2MuV7WGYooRy/oLrg4YDRqNzW1syGvYbEQJiBtNUc7ltWTZxs7?=
 =?us-ascii?q?mWiIYm6GC4pR/dSd4S6pLAW/a6A/LiLDiUl79NYRcF2vX/N4tFZd6z4FBrdlQv?=
 =?us-ascii?q?xNeCIEHXR90Y53Q5NgI=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAAC0b/dbh0O0hNFiGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGBMII7J4wRjgwUkjCEd4FzEgEBGBMBiFIiNAkNAQM?=
 =?us-ascii?q?BAQEBAQECARMBAQEIDQkIKSMMgjYkAYJhAQEBAQIBAQIkEwYBATcBBQkBAQoVA?=
 =?us-ascii?q?wklAwwFIAEFASITBYMcgXoIAQSbfDyKHYFsM4J2AQEFhxQIEopbgRwXPoFBhCO?=
 =?us-ascii?q?IM4ImiSWBboR/j3IJgiCPBAsYX4hyhzcsl10GAgkHDyGBJYINTTAIgyeCGwwXi?=
 =?us-ascii?q?F6FXx8ygQIDAQEhE4whAQE?=
X-IPAS-Result: =?us-ascii?q?A0ABAAC0b/dbh0O0hNFiGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGBMII7J4wRjgwUkjCEd4FzEgEBGBMBiFIiNAkNAQMBAQEBAQECARMBA?=
 =?us-ascii?q?QEIDQkIKSMMgjYkAYJhAQEBAQIBAQIkEwYBATcBBQkBAQoVAwklAwwFIAEFASI?=
 =?us-ascii?q?TBYMcgXoIAQSbfDyKHYFsM4J2AQEFhxQIEopbgRwXPoFBhCOIM4ImiSWBboR/j?=
 =?us-ascii?q?3IJgiCPBAsYX4hyhzcsl10GAgkHDyGBJYINTTAIgyeCGwwXiF6FXx8ygQIDAQE?=
 =?us-ascii?q?hE4whAQE?=
X-IronPort-AV: E=Sophos;i="5.56,268,1539673200"; 
   d="scan'208";a="41942685"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 22 Nov 2018 19:13:55 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2393118AbeKWN4D (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 23 Nov 2018 08:56:03 -0500
Received: from mail-pl1-f193.google.com ([209.85.214.193]:37600 "EHLO
        mail-pl1-f193.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1731997AbeKWN4D (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 23 Nov 2018 08:56:03 -0500
Received: by mail-pl1-f193.google.com with SMTP id b5so10006624plr.4
        for <linux-kernel@vger.kernel.org>; Thu, 22 Nov 2018 19:13:41 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=joelfernandes.org; s=google;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=wF4q3yj07SrQPATIMm5bK+qV58UjTXSShJS7quSLwJc=;
        b=Y8tOPr0X0i8z/tlJGKTWAHY7EtfizSw/tPu/6gAV5N6SfkjL5t0yGeaEZRCnCD/c4g
         ihhXquz1SqpAYikYjHwlsbo38LHrYaW7n1e24zN50Cw199dfUIeeC2fkSHOXCRlnmXZH
         bFgYxZpKBNp+HG/zVIk3ZjQr4tPJ1Xaz6K+2c=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:message-id:references
         :mime-version:content-disposition:in-reply-to:user-agent;
        bh=wF4q3yj07SrQPATIMm5bK+qV58UjTXSShJS7quSLwJc=;
        b=L1GTLCLDWEMj5B0J238VER9X1QQdOicLZF1vQiHP4wkSgIE0Hr1XM2/fu+3iKzpWNh
         u9ly2JsMtXnfVjN4bnRmoBYIh1bL9mBkqjFr5T7SzgDeSuPrVP4IqE9GIE1E71Xn2mgx
         KFmWu5Z2YSnSUPh17FKrXP9NLP4kKXBT5TUcYn6r7KfEz/Wz8TnE5YKlO3T7IsaWjwoc
         n+pEMksZiMsx6XsblRWTNm/MR2Vy8wXP3iujGfjArsgaQfJtydUyBCllJd8op6ZUe7Ip
         518j0X3iSH21tJql3WodIPdEqAsQlMA5SdVCP1rSXwtqzHmL4J0i8sWlxRzoL+vU9gOA
         p4HA==
X-Gm-Message-State: AA+aEWbRiluCbbdlb84o6gdySgngTomVLnF3qr/rNaFoRewpGBElr8Oy
        9MQXpFJM+3LvLrsrA156w/msx2aNj7Y=
X-Google-Smtp-Source: AFSGD/W4PX/ShhpbUVtsCT1/Bb6fgJwlCk04csDAcWYDTqr9nLvRnB26N/mB+HxUZesYGUAjV1yAjg==
X-Received: by 2002:a17:902:b406:: with SMTP id x6mr7795503plr.329.1542942821282;
        Thu, 22 Nov 2018 19:13:41 -0800 (PST)
Received: from localhost ([2620:0:1000:1601:3aef:314f:b9ea:889f])
        by smtp.gmail.com with ESMTPSA id h74sm2726162pfd.35.2018.11.22.19.13.39
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Thu, 22 Nov 2018 19:13:39 -0800 (PST)
Date: Thu, 22 Nov 2018 19:13:38 -0800
From: Joel Fernandes <joel@joelfernandes.org>
To: Steven Rostedt <rostedt@goodmis.org>
Cc: linux-kernel@vger.kernel.org, Ingo Molnar <mingo@kernel.org>,
        Andrew Morton <akpm@linux-foundation.org>,
        Thomas Gleixner <tglx@linutronix.de>,
        Peter Zijlstra <peterz@infradead.org>,
        Masami Hiramatsu <mhiramat@kernel.org>,
        Josh Poimboeuf <jpoimboe@redhat.com>,
        Frederic Weisbecker <frederic@kernel.org>,
        Andy Lutomirski <luto@kernel.org>,
        Mark Rutland <mark.rutland@arm.com>
Subject: Re: [RFC][PATCH 09/14] function_graph: Move ftrace_graph_get_addr()
 to fgraph.c
Message-ID: <20181123031338.GC17060@google.com>
References: <20181122012708.491151844@goodmis.org>
 <20181122012803.843285508@goodmis.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181122012803.843285508@goodmis.org>
User-Agent: Mutt/1.10.1 (2018-07-13)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Wed, Nov 21, 2018 at 08:27:17PM -0500, Steven Rostedt wrote:
> From: "Steven Rostedt (VMware)" <rostedt@goodmis.org>
> 
> Move the function function_graph_get_addr() to fgraph.c, as the management
> of the curr_ret_stack is going to change, and all the accesses to ret_stack
> needs to be done in fgraph.c.

s/ftrace_graph_get_addr/ftrace_graph_ret_addr/

thanks,

 - Joel

> 
> Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
> ---
>  kernel/trace/fgraph.c                | 55 ++++++++++++++++++++++++++++
>  kernel/trace/trace_functions_graph.c | 55 ----------------------------
>  2 files changed, 55 insertions(+), 55 deletions(-)
> 
> diff --git a/kernel/trace/fgraph.c b/kernel/trace/fgraph.c
> index f3a89ecac671..c7d612897e33 100644
> --- a/kernel/trace/fgraph.c
> +++ b/kernel/trace/fgraph.c
> @@ -233,6 +233,61 @@ unsigned long ftrace_return_to_handler(unsigned long frame_pointer)
>  	return ret;
>  }
>  
> +/**
> + * ftrace_graph_ret_addr - convert a potentially modified stack return address
> + *			   to its original value
> + *
> + * This function can be called by stack unwinding code to convert a found stack
> + * return address ('ret') to its original value, in case the function graph
> + * tracer has modified it to be 'return_to_handler'.  If the address hasn't
> + * been modified, the unchanged value of 'ret' is returned.
> + *
> + * 'idx' is a state variable which should be initialized by the caller to zero
> + * before the first call.
> + *
> + * 'retp' is a pointer to the return address on the stack.  It's ignored if
> + * the arch doesn't have HAVE_FUNCTION_GRAPH_RET_ADDR_PTR defined.
> + */
> +#ifdef HAVE_FUNCTION_GRAPH_RET_ADDR_PTR
> +unsigned long ftrace_graph_ret_addr(struct task_struct *task, int *idx,
> +				    unsigned long ret, unsigned long *retp)
> +{
> +	int index = task->curr_ret_stack;
> +	int i;
> +
> +	if (ret != (unsigned long)return_to_handler)
> +		return ret;
> +
> +	if (index < 0)
> +		return ret;
> +
> +	for (i = 0; i <= index; i++)
> +		if (task->ret_stack[i].retp == retp)
> +			return task->ret_stack[i].ret;
> +
> +	return ret;
> +}
> +#else /* !HAVE_FUNCTION_GRAPH_RET_ADDR_PTR */
> +unsigned long ftrace_graph_ret_addr(struct task_struct *task, int *idx,
> +				    unsigned long ret, unsigned long *retp)
> +{
> +	int task_idx;
> +
> +	if (ret != (unsigned long)return_to_handler)
> +		return ret;
> +
> +	task_idx = task->curr_ret_stack;
> +
> +	if (!task->ret_stack || task_idx < *idx)
> +		return ret;
> +
> +	task_idx -= *idx;
> +	(*idx)++;
> +
> +	return task->ret_stack[task_idx].ret;
> +}
> +#endif /* HAVE_FUNCTION_GRAPH_RET_ADDR_PTR */
> +
>  static struct ftrace_ops graph_ops = {
>  	.func			= ftrace_stub,
>  	.flags			= FTRACE_OPS_FL_RECURSION_SAFE |
> diff --git a/kernel/trace/trace_functions_graph.c b/kernel/trace/trace_functions_graph.c
> index 7c7fd13d2373..0f9cbc30645d 100644
> --- a/kernel/trace/trace_functions_graph.c
> +++ b/kernel/trace/trace_functions_graph.c
> @@ -90,61 +90,6 @@ static void
>  print_graph_duration(struct trace_array *tr, unsigned long long duration,
>  		     struct trace_seq *s, u32 flags);
>  
> -/**
> - * ftrace_graph_ret_addr - convert a potentially modified stack return address
> - *			   to its original value
> - *
> - * This function can be called by stack unwinding code to convert a found stack
> - * return address ('ret') to its original value, in case the function graph
> - * tracer has modified it to be 'return_to_handler'.  If the address hasn't
> - * been modified, the unchanged value of 'ret' is returned.
> - *
> - * 'idx' is a state variable which should be initialized by the caller to zero
> - * before the first call.
> - *
> - * 'retp' is a pointer to the return address on the stack.  It's ignored if
> - * the arch doesn't have HAVE_FUNCTION_GRAPH_RET_ADDR_PTR defined.
> - */
> -#ifdef HAVE_FUNCTION_GRAPH_RET_ADDR_PTR
> -unsigned long ftrace_graph_ret_addr(struct task_struct *task, int *idx,
> -				    unsigned long ret, unsigned long *retp)
> -{
> -	int index = task->curr_ret_stack;
> -	int i;
> -
> -	if (ret != (unsigned long)return_to_handler)
> -		return ret;
> -
> -	if (index < 0)
> -		return ret;
> -
> -	for (i = 0; i <= index; i++)
> -		if (task->ret_stack[i].retp == retp)
> -			return task->ret_stack[i].ret;
> -
> -	return ret;
> -}
> -#else /* !HAVE_FUNCTION_GRAPH_RET_ADDR_PTR */
> -unsigned long ftrace_graph_ret_addr(struct task_struct *task, int *idx,
> -				    unsigned long ret, unsigned long *retp)
> -{
> -	int task_idx;
> -
> -	if (ret != (unsigned long)return_to_handler)
> -		return ret;
> -
> -	task_idx = task->curr_ret_stack;
> -
> -	if (!task->ret_stack || task_idx < *idx)
> -		return ret;
> -
> -	task_idx -= *idx;
> -	(*idx)++;
> -
> -	return task->ret_stack[task_idx].ret;
> -}
> -#endif /* HAVE_FUNCTION_GRAPH_RET_ADDR_PTR */
> -
>  int __trace_graph_entry(struct trace_array *tr,
>  				struct ftrace_graph_ent *trace,
>  				unsigned long flags,
> -- 
> 2.19.1
> 
> 
