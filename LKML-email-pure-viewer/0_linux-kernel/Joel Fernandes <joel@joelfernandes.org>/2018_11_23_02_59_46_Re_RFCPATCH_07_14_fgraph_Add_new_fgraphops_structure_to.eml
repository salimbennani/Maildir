Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 23 Nov 2018 12:22:51 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id EBD5058037D;
	Thu, 22 Nov 2018 18:59:54 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga006-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 22 Nov 2018 18:59:54 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A6W3lXxAiVQ1VoFWhnul1UyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7+psuwAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95fWSJBHI2y?=
 =?us-ascii?q?cogBD+QOMulEsobypVUBrQCmBQSuH+7v1iNEi2Xq0aEmyektDwfL1xEgEdIUt3?=
 =?us-ascii?q?TUqc34OqMVUe+ryKnD0DXNYO1M2Tf78ofIdA0uru+XXbltdsfRy04vGB3BjliL?=
 =?us-ascii?q?q4zlOC2a1uADs2eF9epgU/igi2g6pA5vuTij3MAsipPGho8MzF3P6CZ3wJ4tKN?=
 =?us-ascii?q?GmVEJ2ZcSoHIZeui2ELYd6X8AvT31ytCs7yLAKoYC3cSkUxJg7whPTd/mKf5WU?=
 =?us-ascii?q?7h7/SOqcJCp0iXN5dL6ighu//1KvxfPyVsSx3ltGsyVIktfJu38W0xHc9NKIR/?=
 =?us-ascii?q?5+80qi3TuP2Qbe4fxeL08uj6rUMZshz6YwlpUNtUTDGTf7mFv5jKCIbEUo4Ouo?=
 =?us-ascii?q?5Pr9YrXguJCcM5V4igbkMqQhgsC/AOI4PRYSX2WD5+iwyLnu8VfkTLhEkPE6iL?=
 =?us-ascii?q?TVvZPGKcgBp6O0ARdZ0oM55Ba+Czem3s4YnX4CLF9dfBKHjo7pO0zBIfzhDvew?=
 =?us-ascii?q?nU6skDF1yPDCJ7HhBZvMLn7dn7f7Zrt99UFcxxQpzdxF5JJbFKsBIPTtVU/1rt?=
 =?us-ascii?q?DYCQU5MwOsz+b9FNp9zp8eWX6IAqKBNKPSsFyI6fw1L+iDeY8YozL9K/kj5/7z?=
 =?us-ascii?q?gn41g14dfa+13ZQJbHC0BOhpI0KcYXD0mNcODX8KvhYiTOztkFCCUSRcZ3euX6?=
 =?us-ascii?q?0m4TE3EoKmDZrZSYCrj7yMxyO7HpxQZmBbBVGAC3bod4OYW/gSbCKeONNukjsB?=
 =?us-ascii?q?VbK5UY8uyQmutBPmy7pgNufU+CoYuoz52Nh24O3Tkxcy9TtvAsSZ0mGNSXx0n2?=
 =?us-ascii?q?wSSz832qB/vVJyylOZ3adkhPxYEMRZ5+lVXQciKZ7c0+t6BsjoVQLafteJT1Wm?=
 =?us-ascii?q?Ts+8AT4rTNI82NsOY0d7G9W/gRHPxSuqA7kJl7OVAJw46L7T33/0J8xl0XbJyL?=
 =?us-ascii?q?Ehj0U6QstILWCmhbRw9w7JC47NkkWWjaCqdasH0S7J9WeDy3eOvU5CXA5xV6XF?=
 =?us-ascii?q?QW4QZk/Modvl4UPCSqekCa47PQtZ1c6CNqxKZ8X0glpcWvfsJs7SY2KrlGe2Hh?=
 =?us-ascii?q?aH2LWMYI3ue2Ue2SXdDFMJkwQS/XaAKAg/CT2to2PYDDxyC13vZ1ng/vV5qHO+?=
 =?us-ascii?q?VkU01R2Fb1V917qp/R4YneGTROkN3r0aoishqy97HFCm393IDdqNvA5hfKRaYd?=
 =?us-ascii?q?Mg71ZLz2PZtwphPpO+K6BunEIRcwNyv0n2zRV4Fp1AkdQ2rHMt1AdyNaOY0FZG?=
 =?us-ascii?q?dzOE3ZDxOqfbKnXo8BCoca7W3lDe0NCZ+qoU7PQ4qlPjvBymF0Y48nVn1cVV3G?=
 =?us-ascii?q?WY5pnQEAUSVpfxWF4t9xdmv7HafjU954TM2HJ2Nam7rDDD1MwpBec/0RmgYspQ?=
 =?us-ascii?q?P7mCFA/xFM0aGdOjKOgrm1ivcxIFM/pe9K8yP8O6afSG3LSnM/pnnDKjlW5H+p?=
 =?us-ascii?q?xy0lqQ9ypgTe7Fx5YEw+yC0gSbTTv9jVehvdrxmYBLfjwSGmu/yS75BI9efKFy?=
 =?us-ascii?q?fIALCXuwLM2z3Nlxm5ntW3tA/l65G1wGwNOpeQaVb1Hlxw1Q1FgYrma9mSSlyD?=
 =?us-ascii?q?x4iTcpobSF3CzP2ujtaAAIOmpWS2Z8l1fsJo60gsseXEipaQgpiRSk6Vz7x6hd?=
 =?us-ascii?q?uKRwMW3TTV1UcCjxKmFoSrGwuaaaY85T9JMotj1aUeS9YVyASr/xuQAa0z7lH2?=
 =?us-ascii?q?ZFwDA7djequoj2nhBgiWKdKmpzo2Tdec1q2Rjf49ncT+ZL3jUaXCl4lSXXBl+k?=
 =?us-ascii?q?Mtmr59qUjZTDsuO5V267TZ1cayrrzYCBtCu9+2JqBwayn/Symt3hDAg73jX319?=
 =?us-ascii?q?hsVSXUshn8ZpPn2Li9MeJiZkNoHkPz69JmGoFilYs9nJER1mIdhpmP/3oHkGHz?=
 =?us-ascii?q?PM5f2aL/anoNWDEKz8TU4AjjxE1sMHaJy5jlWXWax8trf8O6bX8O2iIh88BKD7?=
 =?us-ascii?q?+Z7L9ekit0uFa4rR/RbuJ7njcS0vYu7H8ag+cUuAsi1CmdA7YSHVVGMizojRiH?=
 =?us-ascii?q?89e+rKBPbma1bbewzFZ+ncymDLyapwFcWXX5dY04ES5+8Mp/K07M32Pp6o7/Zt?=
 =?us-ascii?q?bQd90TuwaQkxfBiehVNZ0wmuALhSphJWLyo3klx/Qnghxp2JGwpJKHJHl1/KKl?=
 =?us-ascii?q?Hh5YMSX4Z98U+jHol6pfn9yZ34ayHpV6ATULXYDlTfapEDIUqPTmOByCEDw6qn?=
 =?us-ascii?q?eHB7XfGRWT51thr3LKC5qrLW2YJGEFzdV+QxmQPFdQjxoTXDU+g541DASqxNH6?=
 =?us-ascii?q?fUd95zAR4EP4qxRWxuJpMRn/TnnQpAOyZjgoT5ifKQJc7hte6EfNLcye8uVzEj?=
 =?us-ascii?q?la/pK7qQyCNHebax5UDW0TWUyEGlPjPqSo5dba6OiVHe6+L/rIYbWTpu1STfaI?=
 =?us-ascii?q?xZSz0oR4+zaALNmAPn5nD/cjwEpMQWh5G9jFmzUIUyEWlyXNb9OCpBeh4CJ3qN?=
 =?us-ascii?q?qz8O/sWALp6ouCEL9SMdRp+xCrjqaPLe+QhCBlKTlG0pMA32PHyL8a3FQKkSFh?=
 =?us-ascii?q?ayGtEagctS7KVK/QmrFYDx8YayNwNctE9aE83hNKOc7UlNz1zKN4juUuBldBVF?=
 =?us-ascii?q?zhnNypZMMQL2G8MlPHGFiENLCcKTLXxMH3ZLu2SadMg+VMqx2wpTGbHlf5MTSe?=
 =?us-ascii?q?jDbpTQ6gMOFWgCGfPRxTo4W9chdrCWj+Q9PqcBy7MNlrjTIoxb04nG/FNWkZMT?=
 =?us-ascii?q?JkaUNCsqWQ7T9EgvV4A2FB8ntlLeyelymF9eXXNpYWvuVtAilvk+Ja4XI6y6Za?=
 =?us-ascii?q?7S1eRfx1njfSocBqo128juaPzT9nWgJUqjlXnIKLoVliOaLB+5hAQ3nE+hcN7W?=
 =?us-ascii?q?SWCxsSptplCsfgu6ZfytXUkKLzKTFC88/b/McGBsjULt6HP2QlMRbzBDHUCw4F?=
 =?us-ascii?q?HnaXMjTkm0FDnffazHqOspU2ttC4gp0VVrJXSHQ6EfQWD0V+WtsYL8EkcCkjlO?=
 =?us-ascii?q?u5i8MMrVSzth/YQslXpdiTVPWfBd3tLzudg7ReYRIOzb7ja4MJOduoiARZdlBm?=
 =?us-ascii?q?kdGSSALrVtdXr3gkN1dsrQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ACAABtbPdbh0O0hNFiGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUgQBAQEBCwGBMII7J5odFJcngXMSAQEYEwGIUiI1CA0BAwEBAQE?=
 =?us-ascii?q?BAQIBEwEBAQgNCQgpIwyCNiQBgmEBAQEBAwECJBMGAQE3AQUJAQEKFQMJJQMMB?=
 =?us-ascii?q?SABBQEiEwWDHIICAQSbfjyKHYFsM4J2AQEFhxQIEopbgRwXPoFBhCOIM4ImiSG?=
 =?us-ascii?q?BcoR/j3IJgiCPBAsYX3qHeIc3LIlBjhwGAgkHDyGBJwGCCk0wCIMnghsMFxKIT?=
 =?us-ascii?q?IVfHzKBAgMBASETjCEBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ACAABtbPdbh0O0hNFiGgEBAQEBAgEBAQEHAgEBAQGBUgQ?=
 =?us-ascii?q?BAQEBCwGBMII7J5odFJcngXMSAQEYEwGIUiI1CA0BAwEBAQEBAQIBEwEBAQgNC?=
 =?us-ascii?q?QgpIwyCNiQBgmEBAQEBAwECJBMGAQE3AQUJAQEKFQMJJQMMBSABBQEiEwWDHII?=
 =?us-ascii?q?CAQSbfjyKHYFsM4J2AQEFhxQIEopbgRwXPoFBhCOIM4ImiSGBcoR/j3IJgiCPB?=
 =?us-ascii?q?AsYX3qHeIc3LIlBjhwGAgkHDyGBJwGCCk0wCIMnghsMFxKITIVfHzKBAgMBASE?=
 =?us-ascii?q?TjCEBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,268,1539673200"; 
   d="scan'208";a="53033738"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 22 Nov 2018 18:59:52 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2501925AbeKWNmI (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 23 Nov 2018 08:42:08 -0500
Received: from mail-pg1-f193.google.com ([209.85.215.193]:36994 "EHLO
        mail-pg1-f193.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S2393000AbeKWNmI (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 23 Nov 2018 08:42:08 -0500
Received: by mail-pg1-f193.google.com with SMTP id 80so2437804pge.4
        for <linux-kernel@vger.kernel.org>; Thu, 22 Nov 2018 18:59:49 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=joelfernandes.org; s=google;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=wl3342N9sJb6az68nzZEct4OmKXInJjpFEHqKdC8Kck=;
        b=ocMuEycv1O4Y8TTvxuBoutksamJieAh1q7FeWhhfz5qXftxTJ9iqU3gHF0fDN7qCX8
         OnDGWHmzFQJeb/HSOlpeKopgKy+J3jFrebgTEfJ8riB5BW6H24tEuLYA+db3uyiNJevS
         kHWaecaK9gGiN2TZapnuALeWhWF6v14FdjEyw=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:message-id:references
         :mime-version:content-disposition:in-reply-to:user-agent;
        bh=wl3342N9sJb6az68nzZEct4OmKXInJjpFEHqKdC8Kck=;
        b=tk1Gr0qhLXPMKn4/xc+V/k+VJlzHJjKU9j/8aZGE92Kl5nIYT86qdd9JEDUyNLxkdy
         0LdLE3rDRCiEtJ1oad+5WB/bi00fOJtQbEY37941H1tpegnWDmJ8tmMnCslZR3Fioo8K
         eUtccbKUHPHSiTa4o96bPXvRXMaiu1liBEtlMgrkydlEDaL4mACgf57nBT6WBb5WGP+W
         I0Paokjo8DDTFhsaNr7msQIPfJXNf8Cwd8y4s9rHdWFzVMRT28nSYAyaVNHVT2mMylV7
         ua4jsPdH93deefgDn/y+eRhmmnb+PSsPtnfzLYrYCs52FciozXxEPw2qq7NDdfOvoRIZ
         yq4Q==
X-Gm-Message-State: AGRZ1gKMJJ0nOIslSp3Vn74P4XXZZGbGNpGPsXBGMRUTNUS9HFA4vQ9v
        nIGpXrjimwh9IHjIQjEnIVrx+Q==
X-Google-Smtp-Source: AJdET5f8JZqA44I0lTY7+Qx2CmstVFOV+VvfnASIGHhpCp7PviFv4I4J/F0deqya696/fRvHTc/LIQ==
X-Received: by 2002:a62:81c1:: with SMTP id t184mr14074666pfd.246.1542941988545;
        Thu, 22 Nov 2018 18:59:48 -0800 (PST)
Received: from localhost ([2620:0:1000:1601:3aef:314f:b9ea:889f])
        by smtp.gmail.com with ESMTPSA id y1sm16212134pfe.9.2018.11.22.18.59.47
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Thu, 22 Nov 2018 18:59:47 -0800 (PST)
Date: Thu, 22 Nov 2018 18:59:46 -0800
From: Joel Fernandes <joel@joelfernandes.org>
To: Steven Rostedt <rostedt@goodmis.org>
Cc: linux-kernel@vger.kernel.org, Ingo Molnar <mingo@kernel.org>,
        Andrew Morton <akpm@linux-foundation.org>,
        Thomas Gleixner <tglx@linutronix.de>,
        Peter Zijlstra <peterz@infradead.org>,
        Masami Hiramatsu <mhiramat@kernel.org>,
        Josh Poimboeuf <jpoimboe@redhat.com>,
        Frederic Weisbecker <frederic@kernel.org>,
        Andy Lutomirski <luto@kernel.org>,
        Mark Rutland <mark.rutland@arm.com>
Subject: Re: [RFC][PATCH 07/14] fgraph: Add new fgraph_ops structure to
 enable function graph hooks
Message-ID: <20181123025946.GB17060@google.com>
References: <20181122012708.491151844@goodmis.org>
 <20181122012803.576692300@goodmis.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181122012803.576692300@goodmis.org>
User-Agent: Mutt/1.10.1 (2018-07-13)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Wed, Nov 21, 2018 at 08:27:15PM -0500, Steven Rostedt wrote:
> From: "Steven Rostedt (VMware)" <rostedt@goodmis.org>
> 
> Currently the registering of function graph is to pass in a entry and return
> function. We need to have a way to associate those functions together where
> the entry can determine to run the return hook. Having a structure that
> contains both functions will facilitate the process of converting the code
> to be able to do such.
> 
> This is similar to the way function hooks are enabled (it passes in
> ftrace_ops). Instead of passing in the functions to use, a single structure
> is passed in to the registering function.
> 
> The unregister function is now passed in the fgraph_ops handle. When we
> allow more than one callback to the function graph hooks, this will let the
> system know which one to remove.
> 
> Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
> ---
>  include/linux/ftrace.h               | 24 +++++++++++++++++-------
>  kernel/trace/fgraph.c                |  9 ++++-----
>  kernel/trace/ftrace.c                | 10 +++++++---
>  kernel/trace/trace_functions_graph.c | 21 ++++++++++++++++-----
>  kernel/trace/trace_irqsoff.c         | 10 +++++++---
>  kernel/trace/trace_sched_wakeup.c    | 10 +++++++---
>  kernel/trace/trace_selftest.c        |  8 ++++++--
>  7 files changed, 64 insertions(+), 28 deletions(-)
> 
> diff --git a/include/linux/ftrace.h b/include/linux/ftrace.h
> index f98063e273e5..477ff9412d26 100644
> --- a/include/linux/ftrace.h
> +++ b/include/linux/ftrace.h
> @@ -749,6 +749,18 @@ typedef int (*trace_func_graph_ent_t)(struct ftrace_graph_ent *); /* entry */
>  
>  #ifdef CONFIG_FUNCTION_GRAPH_TRACER
>  
> +struct fgraph_ops {
> +	trace_func_graph_ent_t		entryfunc;
> +	trace_func_graph_ret_t		retfunc;
> +	struct fgraph_ops __rcu		*next;
> +	unsigned long			flags;
> +	void				*private;
> +#ifdef CONFIG_DYNAMIC_FTRACE
> +	struct ftrace_ops_hash		local_hash;
> +	struct ftrace_ops_hash		*func_hash;
> +#endif
> +};
> +
>  /*
>   * Stack of return addresses for functions
>   * of a thread.
> @@ -792,8 +804,9 @@ unsigned long ftrace_graph_ret_addr(struct task_struct *task, int *idx,
>  
>  #define FTRACE_RETFUNC_DEPTH 50
>  #define FTRACE_RETSTACK_ALLOC_SIZE 32
> -extern int register_ftrace_graph(trace_func_graph_ret_t retfunc,
> -				trace_func_graph_ent_t entryfunc);
> +
> +extern int register_ftrace_graph(struct fgraph_ops *ops);
> +extern void unregister_ftrace_graph(struct fgraph_ops *ops);
>  
>  extern bool ftrace_graph_is_dead(void);
>  extern void ftrace_graph_stop(void);
> @@ -802,8 +815,6 @@ extern void ftrace_graph_stop(void);
>  extern trace_func_graph_ret_t ftrace_graph_return;
>  extern trace_func_graph_ent_t ftrace_graph_entry;
>  
> -extern void unregister_ftrace_graph(void);
> -
>  extern void ftrace_graph_init_task(struct task_struct *t);
>  extern void ftrace_graph_exit_task(struct task_struct *t);
>  extern void ftrace_graph_init_idle_task(struct task_struct *t, int cpu);
> @@ -830,12 +841,11 @@ static inline void ftrace_graph_init_task(struct task_struct *t) { }
>  static inline void ftrace_graph_exit_task(struct task_struct *t) { }
>  static inline void ftrace_graph_init_idle_task(struct task_struct *t, int cpu) { }
>  
> -static inline int register_ftrace_graph(trace_func_graph_ret_t retfunc,
> -			  trace_func_graph_ent_t entryfunc)
> +static inline int register_ftrace_graph(struct fgraph_ops *ops);
>  {
>  	return -1;
>  }
> -static inline void unregister_ftrace_graph(void) { }
> +static inline void unregister_ftrace_graph(struct fgraph_ops *ops) { }
>  
>  static inline int task_curr_ret_stack(struct task_struct *tsk)
>  {
> diff --git a/kernel/trace/fgraph.c b/kernel/trace/fgraph.c
> index b9c7dbbbdd96..f3a89ecac671 100644
> --- a/kernel/trace/fgraph.c
> +++ b/kernel/trace/fgraph.c
> @@ -491,8 +491,7 @@ static int start_graph_tracing(void)
>  	return ret;
>  }
>  
> -int register_ftrace_graph(trace_func_graph_ret_t retfunc,
> -			trace_func_graph_ent_t entryfunc)
> +int register_ftrace_graph(struct fgraph_ops *gops)
>  {
>  	int ret = 0;
>  
> @@ -513,7 +512,7 @@ int register_ftrace_graph(trace_func_graph_ret_t retfunc,
>  		goto out;
>  	}
>  
> -	ftrace_graph_return = retfunc;
> +	ftrace_graph_return = gops->retfunc;
>  
>  	/*
>  	 * Update the indirect function to the entryfunc, and the
> @@ -521,7 +520,7 @@ int register_ftrace_graph(trace_func_graph_ret_t retfunc,
>  	 * call the update fgraph entry function to determine if
>  	 * the entryfunc should be called directly or not.
>  	 */
> -	__ftrace_graph_entry = entryfunc;
> +	__ftrace_graph_entry = gops->entryfunc;
>  	ftrace_graph_entry = ftrace_graph_entry_test;
>  	update_function_graph_func();
>  
> @@ -531,7 +530,7 @@ int register_ftrace_graph(trace_func_graph_ret_t retfunc,
>  	return ret;
>  }
>  
> -void unregister_ftrace_graph(void)
> +void unregister_ftrace_graph(struct fgraph_ops *gops)
>  {
>  	mutex_lock(&ftrace_lock);
>  
> diff --git a/kernel/trace/ftrace.c b/kernel/trace/ftrace.c
> index 64e635994648..d057dde081e7 100644
> --- a/kernel/trace/ftrace.c
> +++ b/kernel/trace/ftrace.c
> @@ -849,15 +849,19 @@ static void profile_graph_return(struct ftrace_graph_ret *trace)
>  	local_irq_restore(flags);
>  }
>  
> +static struct fgraph_ops fprofiler_ops = {
> +	.entryfunc = &profile_graph_entry,
> +	.retfunc = &profile_graph_return,
> +};
> +
>  static int register_ftrace_profiler(void)
>  {
> -	return register_ftrace_graph(&profile_graph_return,
> -				     &profile_graph_entry);
> +	return register_ftrace_graph(&fprofiler_ops);
>  }
>  
>  static void unregister_ftrace_profiler(void)
>  {
> -	unregister_ftrace_graph();
> +	unregister_ftrace_graph(&fprofiler_ops);
>  }
>  #else
>  static struct ftrace_ops ftrace_profile_ops __read_mostly = {
> diff --git a/kernel/trace/trace_functions_graph.c b/kernel/trace/trace_functions_graph.c
> index 0e0ff08357cf..7c7fd13d2373 100644
> --- a/kernel/trace/trace_functions_graph.c
> +++ b/kernel/trace/trace_functions_graph.c
> @@ -336,17 +336,25 @@ static void trace_graph_thresh_return(struct ftrace_graph_ret *trace)
>  		trace_graph_return(trace);
>  }
>  
> +static struct fgraph_ops funcgraph_threash_ops = {

minor nit: should be funcgraph_thresh_ops ?

thanks,

 - Joel

