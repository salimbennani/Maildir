Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 25 Nov 2018 14:41:26 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id D860D5803EB;
	Fri, 23 Nov 2018 21:31:56 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga001-1.jf.intel.com with ESMTP; 23 Nov 2018 21:31:56 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AAyAaDx8aGMwj7P9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1usRIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CS2RPXthfWTFCDIOy?=
 =?us-ascii?q?YIQAE/cOMuRWoInmv1sDrwCzBRWwCO711jNEmmX70bM83u88EQ/GxgsgH9cWvX?=
 =?us-ascii?q?rQq9X6KqMSWv21wqbW1zXDaelZ2THg54fWaRAqvPaBXbB3ccXPzUkiDAHFjlKO?=
 =?us-ascii?q?pozhMTOayP4Ns26B4OpmSO2glXUnpxt2oji1ycchk4/EjZ8WxFDc7Sh13po5KN?=
 =?us-ascii?q?miREJmb9OoDoFcuzyZOodqWM8vQmNltD4kxrAHp5K3YC0HxIgiyhLCd/CLb5SE?=
 =?us-ascii?q?7xf+WOuQPTt0mXdodbyliBms/0itz+PxWtS73VZEqydKid3BuW4X2BHW6cWKSf?=
 =?us-ascii?q?9w/kmn1D2SzQ7c8PtELloxlafDK54u3Lowlp0LvETdES/5hl/2gLWVdko64Oio?=
 =?us-ascii?q?7froYrH8qp+bLY90hRnyMqUomsOhHeQ1KhYCU3Sf9OimybHu81P1TK9XgvA1jq?=
 =?us-ascii?q?XVqpHXKMYDqq68GQBV04Ij6xilDzeh1dQVhX0HLFNDeBKagInlIlLOL+7iDfe5?=
 =?us-ascii?q?nVuslC5nx/fIP73nHJrNNGPOkKnufblj8U5Q0gkzws5F55JSFL4BJOj/WkjrtN?=
 =?us-ascii?q?zXFhM5KRC7w/77CNVh0YMTQWaPAq6aMKzMq1OJ6f8vLvKIZI8Uvjb9Nvck6+Tv?=
 =?us-ascii?q?jX8/hV8SY62p0YELZ3C/G/RsO1+Zbmb0gtcdDWcKuRIzTOzwh12DTT5cfXGyU7?=
 =?us-ascii?q?g85jEmEo2mC4jDS5upgLyA2ie7A5JXanpHClCKDXfnaYGEV+0QZyKVJ89riiYE?=
 =?us-ascii?q?WqS5S489yRGusxf3y7hgLuXK4CEYtpXj1N5z5+3Ujhwy8T10D8KA02CCVW10n2?=
 =?us-ascii?q?UIRyMo06B7u0By1lCD0a1gifxCCdNT/+9JUhs9NZPE1eN6ENDyWgXCftuTUlap?=
 =?us-ascii?q?WNemDCo1TtIwxd8Ofkl8F8+jjhDFwyqlHbsVm6aXC5wz96LWx2LxKNply3bayK?=
 =?us-ascii?q?khiEErQshVOm2gnKJ/8wnTCJTPk0WWjKuqcaUc3CjQ9GaM12aOvUdYUBJuXqXB?=
 =?us-ascii?q?R3wQekzWrdHh7EPYU7CuEagnMhdGycOaN6RFcMPpgktcSPfjItveZXmxlHm2BR?=
 =?us-ascii?q?qPwrOMb4/qe2EG0SXZCUgElR0T/HmcOQg/ACehv3zRDDh0GV3zZEPs9PF0qGmn?=
 =?us-ascii?q?QU8s0wGKc0ph2qKo9REPm/yTVekf3rIetycnsDV7AlC90snSC9qBoQphYapdbc?=
 =?us-ascii?q?k84FdByWLWqQh9Moa8IKBlg14Uax53sF/21xVrFoVAltAnrG8rzAp3LqKYzFNB?=
 =?us-ascii?q?djOC0ZDsILHXLXPy/BSua67Q1VHTy9KW+qYJ6PQlpFTvpgCpFkw+83p519lZyW?=
 =?us-ascii?q?eT5pLPDAAKS5L+Tl439wRmp7HdeiQy/YfU2mNjMKaqsj7OwckmBPY4xRm6eddf?=
 =?us-ascii?q?M6SEFBHpHs0eBsiuLvEqmlezYhIFOuBS6LA7P8e8e/Sa366rOf5qnCi6gmRf/I?=
 =?us-ascii?q?B9zkWM+jJ8S+7VxZoK3+uU3wqHVzjmilehvdv6mYRFZTEUA2q+xjLoBI9XZq1u?=
 =?us-ascii?q?Y4kLDX2iLNGwxtV7n5TtQWJX9Ea/B1Ma38+kYQCSb13h0gJKz0QYvHunlTG+zz?=
 =?us-ascii?q?NqiTEpr7OT0zDUzOTmaRUIJHRLRG5kjVr3JYi0jtYaXFWnbgQzlRul41r6yLZf?=
 =?us-ascii?q?pKhlM2bTRkJIdTDsL25+SquwqqaCY8lX5ZIosCVbSuS9bUqBSr7gpRsXyCfjH2?=
 =?us-ascii?q?pYxDAmeDCmoJT5nxpmiG2DKHZ/tmbWecZ1xR3H/tzTWeZR3iYaRCl/kTTXBEKz?=
 =?us-ascii?q?P8Oq/dWXkJfPqPu+WHiiVp1QcCnry52PtC2g6G1uAB2/me2zm9L9HQg71y/7y8?=
 =?us-ascii?q?dlVSHSoBngZYnr0rywMfh7cUlwGF/89816F5l+k4Qqg5Ecw3oahpST/XcclWfz?=
 =?us-ascii?q?MNNb2b/xbXYXRD4LxcLV7xbh2EF5Mn2JwIf5XG2HwsR9f9m6fn8W2iUl4sBJEq?=
 =?us-ascii?q?iU7aZInStoolWiqwLRbuNwnjMcyfso9X4bjPsFuAsrziWBHL8SGVNUMjDrlxSN?=
 =?us-ascii?q?99q+trlYZH6zcbis00pzhdWhDLCBog5GQnr4dIktHTRs7sphKlLDy2P86pvreN?=
 =?us-ascii?q?TLadITtxuUkwrPjuRPKZIxkOYKijRjOW7noXIlzOs7hwR03Z6mpIiHN3lt/KWh?=
 =?us-ascii?q?Dx5EMT31Ytkf+zD3gqZYg8aWxJuvHpR6FzUPXZvoS++oET0IufTmMQaODCMzqn?=
 =?us-ascii?q?OBFbXDGg+f7V9sr2jTHJCzK3GXOH4ZwM15SxaHI0xfhB0UUC8+np4kDQ2qwM3h?=
 =?us-ascii?q?cEFk5jEe/FL4qx1Myv52OBn7SGvQuACoajIsQpiFMBVW9h1C51vSMcGG7OJ8BS?=
 =?us-ascii?q?RY8YO6rACXNmyXfQdIDXwKWkyZAVDsJKKu6MLE8+iZAOq+MvTPba+PqexYS/eH?=
 =?us-ascii?q?25av3pF68DaLM8WFJmNiAOEj2kpfQXB5HNzUmjUISywKjiLNctSUpBGm9i1sqc?=
 =?us-ascii?q?C/9vvrVRnr5YuODbtSLNpu9wq3gaeFK+6fmiJ5JSxE2ZMLwH/C0KIf00IKiyFy?=
 =?us-ascii?q?azmtFqwNtS7TQ6LRma9XDB8bZzlwNMtS6KI80RdCOdTGitPuzbN4iv81C1FYVV?=
 =?us-ascii?q?3ugM2pZMoKI32jO1PDHkqEKLOGJTjTycHtfay8UaFQjPlTtxCoozmbDlTsPi6d?=
 =?us-ascii?q?mDjpTRyvNeBMgTqfPBxfvoG9bxlsBXLiTNLgdh20Ltt3gScqzr0zg3PALXQcPi?=
 =?us-ascii?q?Rkc0NRsr2Q6jtVgul+G2xE9HZqMfOIlDqZ7+bGLJYbqv9rAiVyl+JH73U20bpV?=
 =?us-ascii?q?7CdYRPNrnCvetMJho1ajkuOX0DpoTAJOqipXhIKMpUhjOb/W9p9FWXbF+hIC9W?=
 =?us-ascii?q?SRCxQQqNtjBd3ioKRQytnJlKLuJzZO6dPU/c0AB8fKLMKLKmYuMR3sGG2cMAxQ?=
 =?us-ascii?q?diKmK2zZz3Zai+2f+mHd+oI9sYThlIYmRbhcWFk0DbUdEEszT/IYJ5IifDQplf?=
 =?us-ascii?q?a1gdQO7HyyoQKZEMdds5TvVPWfBfviMjCQi7VJfF0P27yuftdbDZHyx0E3Mgoy?=
 =?us-ascii?q?p4/NAUeFGIkV+iA=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAAD54Phbh0O0hNFjGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBgTCCOyeMEY4OFJcogXMSAQEYEwGIWiI0CQ0?=
 =?us-ascii?q?BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmEBAQEBAwECJBMGAQE3AQUJAQEKF?=
 =?us-ascii?q?QMJJQMMBSABBQEiEwWDHIICAQSaZzyKHYFsM4J2AQEFhxgIEopbgRwXPoFBgRG?=
 =?us-ascii?q?DEogzgiaJIQSBboR/j3IJgiCICYZ7CxhfiHKHNyyXXQYCCQcPIYElbIEhTTAIO?=
 =?us-ascii?q?4JsghsJAxeIXoVfHzKBAgMBASETi2oBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ABAAD54Phbh0O0hNFjGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBgTCCOyeMEY4OFJcogXMSAQEYEwGIWiI0CQ0BAwEBAQEBAQIBE?=
 =?us-ascii?q?wEBAQgNCQgpIwyCNiQBgmEBAQEBAwECJBMGAQE3AQUJAQEKFQMJJQMMBSABBQE?=
 =?us-ascii?q?iEwWDHIICAQSaZzyKHYFsM4J2AQEFhxgIEopbgRwXPoFBgRGDEogzgiaJIQSBb?=
 =?us-ascii?q?oR/j3IJgiCICYZ7CxhfiHKHNyyXXQYCCQcPIYElbIEhTTAIO4JsghsJAxeIXoV?=
 =?us-ascii?q?fHzKBAgMBASETi2oBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,272,1539673200"; 
   d="scan'208";a="41357676"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 23 Nov 2018 21:31:55 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1731781AbeKXQSs (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sat, 24 Nov 2018 11:18:48 -0500
Received: from mail-pf1-f195.google.com ([209.85.210.195]:40496 "EHLO
        mail-pf1-f195.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1731742AbeKXQSr (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sat, 24 Nov 2018 11:18:47 -0500
Received: by mail-pf1-f195.google.com with SMTP id i12so4152326pfo.7
        for <linux-kernel@vger.kernel.org>; Fri, 23 Nov 2018 21:31:41 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=joelfernandes.org; s=google;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=fEWvlp75wwrnJ3SWqSETifLgJNJ31uZinO57+4jrsYU=;
        b=bYbribNZMhhrwMvCmKphpzS+AutlZwfWgfusTVAyQZkzirteMV4FeUpa0V6BRTZgBT
         +VI2dL6di4GM+3/AfyLbr10FO5VHhhI/rQQqK0cNW96ItuBdw2/amcLxILNkIKCVEmHq
         K7VxgogtNhcyHJmZe8Fm8sjEIAlA49IezlFPU=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:message-id:references
         :mime-version:content-disposition:in-reply-to:user-agent;
        bh=fEWvlp75wwrnJ3SWqSETifLgJNJ31uZinO57+4jrsYU=;
        b=b7cKIi4a4DF1McNA3fW8gjvNGU2Mf5M1MHlpGEUUZpg0V3JpCCP3MEI7wJ6A6v49fq
         aTvQjqmUXZsBaOTUWS7MqLbakx/7rnOjeA2r4NuaYBx8PTBYP0VvrtXGCU19Mdr/oYix
         pEu70zV7JggirlTA2yZD3hVNB3fleCLmwL2vpdot0pGHbNsp60JfdtIltsQguYAb8S0S
         A8g54oV7m2vZiLxO2iVcpvAb/j+0BUomDM/xrdpSnLdKKxpQKgz4LgfNP6ASd8TV6r9F
         YXNFgRf32nFETcCiYs4jHIG7KjWfttJmQH7Dy5634U5SzNOVuuBQlBi6VYbc2yWMTT3k
         SHKQ==
X-Gm-Message-State: AGRZ1gKEEgryYTdT4izPvZKS4eoIKtE1M2ZVf7RSNof6SCs+yMWBN1zk
        utycGrmB4OymdZMcNBiv3/qeKg==
X-Google-Smtp-Source: AJdET5d9GKSfmUdPsPPwd7HWijlJxu6bdV0hSbZ+XCkA9bwyiZf7N+VKH+b5M8fEz3D+Xbsdg6mplA==
X-Received: by 2002:a62:6881:: with SMTP id d123-v6mr19555491pfc.195.1543037500807;
        Fri, 23 Nov 2018 21:31:40 -0800 (PST)
Received: from localhost ([2620:0:1000:1601:3aef:314f:b9ea:889f])
        by smtp.gmail.com with ESMTPSA id j185sm30840856pge.72.2018.11.23.21.31.39
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Fri, 23 Nov 2018 21:31:39 -0800 (PST)
Date: Fri, 23 Nov 2018 21:31:38 -0800
From: Joel Fernandes <joel@joelfernandes.org>
To: Steven Rostedt <rostedt@goodmis.org>
Cc: linux-kernel@vger.kernel.org, Ingo Molnar <mingo@kernel.org>,
        Andrew Morton <akpm@linux-foundation.org>,
        Thomas Gleixner <tglx@linutronix.de>,
        Peter Zijlstra <peterz@infradead.org>,
        Masami Hiramatsu <mhiramat@kernel.org>,
        Josh Poimboeuf <jpoimboe@redhat.com>,
        Frederic Weisbecker <frederic@kernel.org>,
        Andy Lutomirski <luto@kernel.org>,
        Mark Rutland <mark.rutland@arm.com>
Subject: Re: [RFC][PATCH 11/14] function_graph: Convert ret_stack to a series
 of longs
Message-ID: <20181124053138.GA242510@google.com>
References: <20181122012708.491151844@goodmis.org>
 <20181122012804.122411256@goodmis.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181122012804.122411256@goodmis.org>
User-Agent: Mutt/1.10.1 (2018-07-13)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Wed, Nov 21, 2018 at 08:27:19PM -0500, Steven Rostedt wrote:
> From: "Steven Rostedt (VMware)" <rostedt@goodmis.org>
> 
> In order to make it possible to have multiple callbacks registered with the
> function_graph tracer, the retstack needs to be converted from an array of
> ftrace_ret_stack structures to an array of longs. This will allow to store
> the list of callbacks on the stack for the return side of the functions.
> 
> [ Note, this currently breaks architectures that access the ret_stack of a
>   task to handle unwinding when 'return_to_handler' is on the stack ]
> 
> Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
> ---
>  include/linux/sched.h |   2 +-
>  kernel/trace/fgraph.c | 123 +++++++++++++++++++++++-------------------
>  2 files changed, 70 insertions(+), 55 deletions(-)
> 
> diff --git a/include/linux/sched.h b/include/linux/sched.h
> index d6183a55e8eb..71a084a300da 100644
> --- a/include/linux/sched.h
> +++ b/include/linux/sched.h
> @@ -1119,7 +1119,7 @@ struct task_struct {
>  	int				curr_ret_depth;
>  
>  	/* Stack of return addresses for return function tracing: */
> -	struct ftrace_ret_stack		*ret_stack;
> +	unsigned long			*ret_stack;
>  
>  	/* Timestamp for last schedule: */
>  	unsigned long long		ftrace_timestamp;
> diff --git a/kernel/trace/fgraph.c b/kernel/trace/fgraph.c
> index 9b85638ecded..1389fe39f64c 100644
> --- a/kernel/trace/fgraph.c
> +++ b/kernel/trace/fgraph.c
> @@ -23,6 +23,17 @@
>  #define ASSIGN_OPS_HASH(opsname, val)
>  #endif
>  
> +#define FGRAPH_RET_SIZE (sizeof(struct ftrace_ret_stack))
> +#define FGRAPH_RET_INDEX (ALIGN(FGRAPH_RET_SIZE, sizeof(long)) / sizeof(long))
> +#define SHADOW_STACK_SIZE (FTRACE_RETFUNC_DEPTH * FGRAPH_RET_SIZE)
> +#define SHADOW_STACK_INDEX			\
> +	(ALIGN(SHADOW_STACK_SIZE, sizeof(long)) / sizeof(long))
> +#define SHADOW_STACK_MAX_INDEX (SHADOW_STACK_INDEX - FGRAPH_RET_INDEX)
> +
> +#define RET_STACK(t, index) ((struct ftrace_ret_stack *)(&(t)->ret_stack[index]))
> +#define RET_STACK_INC(c) ({ c += FGRAPH_RET_INDEX; })
> +#define RET_STACK_DEC(c) ({ c -= FGRAPH_RET_INDEX; })
> +
[...]
> @@ -514,7 +531,7 @@ void ftrace_graph_init_task(struct task_struct *t)
>  
>  void ftrace_graph_exit_task(struct task_struct *t)
>  {
> -	struct ftrace_ret_stack	*ret_stack = t->ret_stack;
> +	unsigned long *ret_stack = t->ret_stack;
>  
>  	t->ret_stack = NULL;
>  	/* NULL must become visible to IRQs before we free it: */
> @@ -526,12 +543,10 @@ void ftrace_graph_exit_task(struct task_struct *t)
>  /* Allocate a return stack for each task */
>  static int start_graph_tracing(void)
>  {
> -	struct ftrace_ret_stack **ret_stack_list;
> +	unsigned long **ret_stack_list;
>  	int ret, cpu;
>  
> -	ret_stack_list = kmalloc_array(FTRACE_RETSTACK_ALLOC_SIZE,
> -				       sizeof(struct ftrace_ret_stack *),
> -				       GFP_KERNEL);
> +	ret_stack_list = kmalloc(SHADOW_STACK_SIZE, GFP_KERNEL);
>  

I had dumped the fgraph size related macros to understand the patch better, I
got:
[    0.909528] val of FGRAPH_RET_SIZE is 40
[    0.910250] val of FGRAPH_RET_INDEX is 5
[    0.910866] val of FGRAPH_ARRAY_SIZE is 16
[    0.911488] val of FGRAPH_ARRAY_MASK is 255
[    0.912134] val of FGRAPH_MAX_INDEX is 16
[    0.912751] val of FGRAPH_INDEX_SHIFT is 8
[    0.913382] val of FGRAPH_FRAME_SIZE is 168
[    0.914033] val of FGRAPH_FRAME_INDEX is 21
                      FTRACE_RETFUNC_DEPTH is 50
[    0.914686] val of SHADOW_STACK_SIZE is 8400

I had a concern about memory overhead per-task. It seems the total memory
needed per task for the stack is 8400 bytes (with my configuration with
FUNCTION_PROFILE
turned off).

Where as before it would be 32 * 40 = 1280 bytes. That looks like ~7 times
more than before.

On my system with ~4000 threads, that becomes ~32MB which seems a bit
wasteful especially if there was only one or 2 function graph callbacks
registered and most of the callback array in the stack isn't used.

Could we make the array size configurable at compile time and start it with a
small number like 4 or 6?

Also for patches 1 through 10:
Reviewed-by: Joel Fernandes (Google) <joel@joelfernandes.org>

thanks,

 - Joel

