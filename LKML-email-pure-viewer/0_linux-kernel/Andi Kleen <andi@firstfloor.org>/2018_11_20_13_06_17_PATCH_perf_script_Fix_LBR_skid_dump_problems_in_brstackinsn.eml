Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 20 Nov 2018 07:59:06 -0000
Received: from icoremail.net (unknown [209.85.210.176])
	by mail-app4 (Coremail) with SMTP id cS_KCgDXvyacl_NbWxbdAQ--.36347S3;
	Tue, 20 Nov 2018 13:11:57 +0800 (CST)
Received: from mail-pf1-f176.google.com (unknown [209.85.210.176])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwAnDUlnlvNb9RlcAA--.167S3;
	Tue, 20 Nov 2018 13:06:47 +0800 (CST)
Received: by mail-pf1-f176.google.com with SMTP id b7so390038pfi.8
        for <xuliker@zju.edu.cn>; Mon, 19 Nov 2018 21:06:47 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-original-authentication-results:x-gm-message-state:delivered-to
         :from:to:cc:subject:date:message-id:sender:precedence:list-id;
        bh=6jXwUrVUZkgjQ+mWqKz0HHXdVB6/n1ueqP+Vc8qQ78E=;
        b=LrTIMbOsATL4e7BbHMv4OzR98sAVzKbFBYkr2HQ10ipw71qxcPYm6IJF58TymWfuMr
         5Jo0LvTMZmLAn7cj9IVPuML9gR7JYcIq3CNwU2iqZhO6fwAIVx6lpxUCqc2JQWq4A6Fw
         XwONDc3SfqnERpkFYYbzpXilmlrwfBYBBNImwUQUUc4wFdFI7+63mkcyDhnNPBq6MySc
         kBhWduT7xawl63M41vwHR02sexjyI/RywkXAMtpG9tctmMp22xQkJY8M7hj/m3wjCPDL
         HRDjvsKDwWYPP0DBeYMQHboMjXe/Ma55iRN0eGdouEuB6hQjAntbnuEX7iammSJZf3xA
         Gzfg==
X-Original-Authentication-Results: mx.google.com;       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
X-Gm-Message-State: AA+aEWbcBknXnCu7/QwYXBlWdy5r7s+4quIXymr+H7IijYOMZ5LM7aAp
	cinKEAYCUqTggjNbT4YQxlBBsxPLYJDlrz7nl0jp0zCA1t/8FhI=
X-Received: by 2002:a63:cd17:: with SMTP id i23mr598814pgg.13.1542690407435;
        Mon, 19 Nov 2018 21:06:47 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:d106:0:0:0:0 with SMTP id l6-v6csp159757pju;
        Mon, 19 Nov 2018 21:06:46 -0800 (PST)
X-Google-Smtp-Source: AJdET5ctNVwFyB4JX0so28kBik0YeULfHedJjNPwL00F1v6R700RthwisBdN7TI8DgxNWcIQ7j7e
X-Received: by 2002:a62:8893:: with SMTP id l141mr699160pfd.1.1542690406236;
        Mon, 19 Nov 2018 21:06:46 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542690406; cv=none;
        d=google.com; s=arc-20160816;
        b=0RbEjk+F/Ucedh61bEhUyjrF3C8nh1VTjuTRNXncXx7MUHMHU/n9Jeb6L8vQ7u54PS
         IqBMqQdtgcKWQfwjR2Y9wxJSW7PgPwojezRmGuYSr7fp7Itqc7e4MvQ7zSgQyJ7oDwlL
         y9YBnHdncn5QKciAfYba1cvQOfQXNZW54AsTmyt6WYUq0VJ4Zpo+EusOZegmLf0mwjj7
         W5wo1jKiOgoJJapnyL7zHKE2neM1sbT5PtxjVJiC0xeE5iZkYC9SQqgnxLzWiIljbN8L
         68f0cCjPzvzjwuIVgVy+JMsol/mkRpoPswuI4U7cEHafhjmEw2mSylxTxCoaPvuYMfqz
         RDJw==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:message-id:date:subject:cc:to:from;
        bh=6jXwUrVUZkgjQ+mWqKz0HHXdVB6/n1ueqP+Vc8qQ78E=;
        b=zEPyQvNw6EMuVlRBtVnd+4DSKUyCLvvCoTWwkCpMN28zeIiyUFT+OK+M4cYCSefPJp
         iaRrOpIf1rzRaIQ1zmW5cSU9jzf/1qsq5t6ReGCvLrCBm0qL78gLafNWXQTS842I/4jy
         322VaSbGJk7w4+0nTxwusuCJXRnDRRtMZP9d8RFPfWA11nIvv3BeaDL17RWnrCmhv8N0
         8HIhVf/EKMeFe3wlJuop+Zh74QFkhwWJpFNcPwXvg29JRSWrzz/icevBQwuxTqSc8L87
         T/xhHqSoAM225Vnv9yOKSTjfzglu+qu4NquisKJpsC1mucdYQiaYOmOTR4yYklnUReHq
         LWBw==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id b8si2785847pge.384.2018.11.19.21.06.30;
        Mon, 19 Nov 2018 21:06:46 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1731723AbeKTPdg (ORCPT <rfc822;pengtsinv@gmail.com> + 99 others);
        Tue, 20 Nov 2018 10:33:36 -0500
Received: from mga12.intel.com ([192.55.52.136]:52748 "EHLO mga12.intel.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1730962AbeKTPdg (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 20 Nov 2018 10:33:36 -0500
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from fmsmga008.fm.intel.com ([10.253.24.58])
  by fmsmga106.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 19 Nov 2018 21:06:24 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,255,1539673200"; 
   d="scan'208";a="87760804"
Received: from tassilo.jf.intel.com (HELO tassilo.localdomain) ([10.7.201.126])
  by fmsmga008.fm.intel.com with ESMTP; 19 Nov 2018 21:06:24 -0800
Received: by tassilo.localdomain (Postfix, from userid 1000)
        id 5833C3018C4; Mon, 19 Nov 2018 21:06:24 -0800 (PST)
From: Andi Kleen <andi@firstfloor.org>
To: acme@kernel.org
Cc: linux-kernel@vger.kernel.org, jolsa@kernel.org,
        Andi Kleen <ak@linux.intel.com>, milian.wolff@kdab.com,
        adrian.hunter@intel.com
Subject: [PATCH] perf script: Fix LBR skid dump problems in brstackinsn
Date: Mon, 19 Nov 2018 21:06:17 -0800
Message-Id: <20181120050617.4119-1-andi@firstfloor.org>
X-Mailer: git-send-email 2.17.2
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwAnDUlnlvNb9RlcAA--.167S3
Authentication-Results: mail-app4; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoWxJw1UXFWkuF1UAF45Ary8Grg_yoW7Gr4Dpr
	ZxC3yfJws8uF1Sqr1ayF4ruFW5Gws2qFySk34ft3ykAwn3urs7tFWxKF1YgFWUWw1Iq3Wa
	vryqkFWUWrWxJaUanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUPFb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Xr0_Ar1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1l84ACjcxK6I8E
	87Iv67AKxVW0oVCq3wA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_GcCE3s1le2I262IYc4CY6c
	8Ij28IcVAaY2xG8wAqx4xG64xvF2IEw4CE5I8CrVC2j2WlYx0E2Ix0cI8IcVAFwI0_Jr0_
	Jr4lYx0Ex4A2jsIE14v26r4j6F4UMcvjeVCFs4IE7xkEbVWUJVW8JwACjcxG0xvY0x0EwI
	xGrwCjxxvEa2IrMxkF7I0Ew4C26cxK6c8Ij28IcwCY1Ik26cxK6xAEc7vF6xCjj44lc2xS
	Y4AK6IIF6r4rMxkI7II2jI8vz4vEwIxGrwCYIxAIcVC0I7IYx2IY67AKxVWUCVW8JwCYIx
	AIcVC0I7IYx2IY6xkF7I0E14v26r1j6r4UMxvI42IY6I8E87Iv67AKxVW0oVCq3wCYIxAI
	cVC2z280aVCY1x0267AKxVW0oVCq3wCF04k20xvY0x0EwIxGrwCF04k20xvEw4C26cxK6c
	8Ij28IcwCF72vE77IF4wCFx2IqxVCFs4IE7xkEbVWUJVW8JwC20s026c02F40E14v26r1j
	6r18MI8I3I0E7480Y4vE14v26r106r1rMI8E67AF67kF1VAFwI0_JF0_Jw1lIxkGc2Ij64
	vIr41lIxAIcVCF04k26cxKx2IYs7xG6Fyj6rWUJbIYCTnIWIevJa73UjIFyTuYvjxUHFAp
	DUUUU

From: Andi Kleen <ak@linux.intel.com>

This is a fix for another instance of the skid problem Milian
recently found [1]

The LBRs don't freeze at the exact same time as the PMI is triggered.
The perf script brstackinsn code that dumps LBR assembler
assumes that the last branch in the LBR leads to the sample point.
But with skid it's possible that the CPU executes one or more branches
before the sample, but which do not appear in the LBR.

What happens then is either that the sample point is before
the last LBR branch. In this case the dumper sees a negative
length and ignores it. Or it the sample point is long after
the last branch. Then the dumper sees a very long block and dumps
it upto its block limit (16k bytes), which is noise in the output.

On typical sample session this can happen regularly.

This patch tries to detect and handle the situation. On the last
block that is dumped by the LBR dumper we always stop on the first
branch. If the block length is negative just scan forward to the
first branch. Otherwise scan until a branch is found.

The PT decoder already has a function that uses the instruction
decoder to detect branches, so we can just reuse it here.

Then when a terminating branch is found print an indication
and stop dumping. This might miss a few instructions, but at least
shows no runaway blocks.

Cc: milian.wolff@kdab.com
Cc: adrian.hunter@intel.com
Signed-off-by: Andi Kleen <ak@linux.intel.com>
---
 tools/perf/builtin-script.c                    | 18 +++++++++++++++++-
 tools/perf/util/dump-insn.c                    |  8 ++++++++
 tools/perf/util/dump-insn.h                    |  2 ++
 .../intel-pt-decoder/intel-pt-insn-decoder.c   |  8 ++++++++
 4 files changed, 35 insertions(+), 1 deletion(-)

diff --git a/tools/perf/builtin-script.c b/tools/perf/builtin-script.c
index 4da5e32b9e03..11868bf39e66 100644
--- a/tools/perf/builtin-script.c
+++ b/tools/perf/builtin-script.c
@@ -1049,9 +1049,18 @@ static int perf_sample__fprintf_brstackinsn(struct perf_sample *sample,
 
 	/*
 	 * Print final block upto sample
+	 *
+	 * Due to pipeline delays the LBRs might be missing a branch
+	 * or two, which can result in very large or negative blocks
+	 * between final branch and sample. When this happens just
+	 * continue walking after the last TO until we hit a branch.
 	 */
 	start = br->entries[0].to;
 	end = sample->ip;
+	if (end < start) {
+		/* Missing jump. Scan 128 bytes for the next branch */
+		end = start + 128;
+	}
 	len = grab_bb(buffer, start, end, machine, thread, &x.is64bit, &x.cpumode, true);
 	printed += ip__fprintf_sym(start, thread, x.cpumode, x.cpu, &lastsym, attr, fp);
 	if (len <= 0) {
@@ -1060,7 +1069,6 @@ static int perf_sample__fprintf_brstackinsn(struct perf_sample *sample,
 			      machine, thread, &x.is64bit, &x.cpumode, false);
 		if (len <= 0)
 			goto out;
-
 		printed += fprintf(fp, "\t%016" PRIx64 "\t%s\n", sample->ip,
 			dump_insn(&x, sample->ip, buffer, len, NULL));
 		goto out;
@@ -1070,6 +1078,14 @@ static int perf_sample__fprintf_brstackinsn(struct perf_sample *sample,
 				   dump_insn(&x, start + off, buffer + off, len - off, &ilen));
 		if (ilen == 0)
 			break;
+		if (arch_is_branch(buffer + off, len - off, x.is64bit) &&
+			start + off != sample->ip) {
+			/*
+			 * Hit a missing branch. Just stop.
+			 */
+			printed += fprintf(fp, "\t... not reaching sample ...\n");
+			break;
+		}
 	}
 out:
 	return printed;
diff --git a/tools/perf/util/dump-insn.c b/tools/perf/util/dump-insn.c
index 10988d3de7ce..2bd8585db93c 100644
--- a/tools/perf/util/dump-insn.c
+++ b/tools/perf/util/dump-insn.c
@@ -13,3 +13,11 @@ const char *dump_insn(struct perf_insn *x __maybe_unused,
 		*lenp = 0;
 	return "?";
 }
+
+__weak
+int arch_is_branch(const unsigned char *buf __maybe_unused,
+		   size_t len __maybe_unused,
+		   int x86_64 __maybe_unused)
+{
+	return 0;
+}
diff --git a/tools/perf/util/dump-insn.h b/tools/perf/util/dump-insn.h
index 0e06280a8860..650125061530 100644
--- a/tools/perf/util/dump-insn.h
+++ b/tools/perf/util/dump-insn.h
@@ -20,4 +20,6 @@ struct perf_insn {
 
 const char *dump_insn(struct perf_insn *x, u64 ip,
 		      u8 *inbuf, int inlen, int *lenp);
+int arch_is_branch(const unsigned char *buf, size_t len, int x86_64);
+
 #endif
diff --git a/tools/perf/util/intel-pt-decoder/intel-pt-insn-decoder.c b/tools/perf/util/intel-pt-decoder/intel-pt-insn-decoder.c
index 54818828023b..1c0e289f01e6 100644
--- a/tools/perf/util/intel-pt-decoder/intel-pt-insn-decoder.c
+++ b/tools/perf/util/intel-pt-decoder/intel-pt-insn-decoder.c
@@ -180,6 +180,14 @@ int intel_pt_get_insn(const unsigned char *buf, size_t len, int x86_64,
 	return 0;
 }
 
+int arch_is_branch(const unsigned char *buf, size_t len, int x86_64)
+{
+	struct intel_pt_insn in;
+	if (intel_pt_get_insn(buf, len, x86_64, &in) < 0)
+		return -1;
+	return in.branch != INTEL_PT_BR_NO_BRANCH;
+}
+
 const char *dump_insn(struct perf_insn *x, uint64_t ip __maybe_unused,
 		      u8 *inbuf, int inlen, int *lenp)
 {
-- 
2.17.2
