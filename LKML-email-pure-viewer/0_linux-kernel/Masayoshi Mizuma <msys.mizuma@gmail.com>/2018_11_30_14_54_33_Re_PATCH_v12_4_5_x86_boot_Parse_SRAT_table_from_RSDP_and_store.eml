Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:19:10 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from FMSMGA003.fm.intel.com (fmsmga003.fm.intel.com [10.253.24.29])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 23E56580213;
	Fri, 30 Nov 2018 06:54:46 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by FMSMGA003-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 30 Nov 2018 06:54:45 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Aida50x+BsE1u5/9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1+kSIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDwULs6Wymt771zRRHmiC?=
 =?us-ascii?q?kJKSM3/mLZisN/kK1UvRCuqBJkw47MYoyYL+Z+cr/HcN8GWWZMRNhdWipcCY28?=
 =?us-ascii?q?dYsPCO8BMP5foYbnvFsBtxu/BQ63BOPvyz9Dm3j43aw70uQ8FAHJxhErEtULsH?=
 =?us-ascii?q?TPrNT1L70eUeW0zKjJ0DXDaulZ1Czy6IjNaB8hoPWMUahsfsrWzEkiDgXIhUiT?=
 =?us-ascii?q?p4z9Jz6ZyPgBvmyB4+Z9W++jlXQrpxxyrzSz3Mshi4vEipoUx13F7yl13YU4KN?=
 =?us-ascii?q?+iREJlb9OpHoFcuz+GO4Z3RM4pXntmtzwgyrIcvJ62ZCgKx4ojxx7Yc/GHbYeI?=
 =?us-ascii?q?7Qz5VOqLIjd3mmhleLShiBa260Sgzff8Vsas3FZLqCpKjMXMu2gT2xDP7sWLUO?=
 =?us-ascii?q?Zx80m/1TqVygze6f1ILVo1mKfZM5Ihx6Q/lpsXsUTNBC/2n0D2gbeSdkUl/Oio?=
 =?us-ascii?q?9uvmbqzlppCCLY90jB/xMqA3lsy4D+U4NBYBX3KA9OSi273s41f5TK9JjvIoiK?=
 =?us-ascii?q?nZto7VJcABqq6+GQ9V3Z4v6wyjADe+zNQYgX4HIUpBeBKGjIjmJUvCIf/lDfqk?=
 =?us-ascii?q?h1SskTFrx+3JP7H7A5XNKGTDn6nlfbpn90Fczw8zx8hF551IErEBPO7zWkjpud?=
 =?us-ascii?q?zYFBA5MhC0zPzgCNln1oMeRHiAAqmWMK7JtV+I5+QvI/SDZYMPuTb9LeQl6ODq?=
 =?us-ascii?q?jXMjhVAdeqyp14MNaH+kBvRmP1mZYX30j9cDFmcFoBAyTO/tiF2EVz5TYG2/X6?=
 =?us-ascii?q?Y95jE9FYKnAp3PRoGrgLydwii7GodaaXxBClCJCX3obZmLW+8QaCKOJc9siiYL?=
 =?us-ascii?q?VaOhS48m1hGirhX6xKBlLufP/i0YtJTj1MV65uHJlBEy8yB0ANqZ022XU250mW?=
 =?us-ascii?q?YITScs3K9juUx91kuD0a9gjvxbD9NT4elFUgM7NZHGyex6BMv/WgbAftePVVan?=
 =?us-ascii?q?Tc+qATA3TtIt3dAOZ1xxFMmljhDGxyCqGaMal6SXBJwo9aLRx2X+KNxjy3nYzq?=
 =?us-ascii?q?Uhj0MpQs1UNWK4gK5z8AzTB43Mk0WdjKuqcaUc3CjQ9GaM12aOvUdYUBJuXqXB?=
 =?us-ascii?q?R3wQekzWrdHh7EPYU7CuEagnMhdGycOaN6RFcMPpgktcSPfjItveZXmxlHm2BR?=
 =?us-ascii?q?uTwrOMbYzqe3gS3SnHCUgElRwT8miCNQQkGiihpGfeBiR0FV3ze0Ps7fV+qHSj?=
 =?us-ascii?q?Q08ozgGKakph16a1+h8Vn/CcV+kf3rUeuCclqjV0Glm90snSC9qBoQphYapdbc?=
 =?us-ascii?q?k84FdByWLWqQh9Moa8IKBlg14Uax53sF/21xVrFoVAltAno2kuzAVsJqOXzlNA?=
 =?us-ascii?q?eymD0pDtJ7LYMG/y/BOoa67IwVze1NeW+qES6PU3sVnjvQepFlY8/HVjydVaz3?=
 =?us-ascii?q?yc5pDSBgoITZ3xSlo39wR9p7zCYig9+pnY2mF2Pai1sj/NwdQpBOQ+xxakftdf?=
 =?us-ascii?q?Nr6EFQDoH80bAciuNPIlm1yzYh0YO+BS8bY+P9m6ePuexK6rIOFgkSq8jWRG/I?=
 =?us-ascii?q?9yyFiM+Dd7SuLS2ZYK3euY3gqeWzjgllihtt34lp5eZTEVGGqy0izkBI9XZq1v?=
 =?us-ascii?q?cocHE2auI8urxtpgg57hQWJX9FmmB1kews+mZQKSb0Dh3Q1XzUkWoX2nlTG4zj?=
 =?us-ascii?q?BuiDEps6yf0TfKw+TjchoHJ2FKSHNjjVfqPYi7kdQaUFK0YAgukRuv/Vz6yLRD?=
 =?us-ascii?q?pKRjM2nTRl9FfyrsIGF4Uauwtb2Cb9RU6JwysiVXU+W8YVaERb77uBYa1yLjH2?=
 =?us-ascii?q?1DxDE0bT2qu5P5nwBkh2KZNnp8sH3ZecRozxfF+NPcXeJR3iYBRCRgiTjYHF+8?=
 =?us-ascii?q?M8Or/dWVkZfOqeS+V2OnVp1Ofijn14KAtC2n5WJ0BR2zhey8mtriEQIiyy/0y8?=
 =?us-ascii?q?FqVTnUrBb7eoTr1L61MeN9ckloGV/z8cx6Go5ln4s0hZEQ32Uah5qP8XoGl2fz?=
 =?us-ascii?q?LctU2abkYHURQj4Lxsbf4BL51017MnKJ24X5W22YwstgZNm1eHka2ywj4MBRFK?=
 =?us-ascii?q?eb8qZEkjBrrVqiogLcevx9njYbyfsz538WmeAJuAwxziqDBrAeB1VXPSvplx6Q?=
 =?us-ascii?q?9dCxsL1XZHqzcbi3zEd+gdehDLSYrgBdQnn5fIoiHTRr7sV+K1/M1Hzz6of5eN?=
 =?us-ascii?q?jfd94TtxuUkwvegOhRMp4+iv0KhS9/M2LnoXIl0/I7jQBp3Zyip4eIMWJt/Kak?=
 =?us-ascii?q?AhJCMj31etge+jXsjaZYg8aX0JqjHpRnGjUXQpToSeikHy4VtfTiLwyOCiEzqm?=
 =?us-ascii?q?+HGbrDGg+S8EVmoGjKE5+1LHGbPmUZwc9hRBmAJ0xfnQYUUy8hnpMiEgCqxcrh?=
 =?us-ascii?q?cFp25zwL5174rAdMxfxsNxXlTmjfowKoYC8uSJeDNBpW8h1C50DNPM2e6eJzAj?=
 =?us-ascii?q?hY/oC7owyLMGCbfANIDWcGWkGfA1DjP7+u5cTP8uSCB+q+KefObquKqeBES/iI?=
 =?us-ascii?q?wpev2JN8/zmQLsWPImViD/oj10pDQ395GsfZmzYOSyANlCLNdcmbpBii9S1ts8?=
 =?us-ascii?q?C/6+/mWAbu5YuJFrtTPs9j+xGwgaefKeGQgDx1Jipf1pMJ3XXI0qQQ3EYOiyFy?=
 =?us-ascii?q?cDmgCa4PtTPWQ6LKhKBWDwQXaydyNMZT66I83w9NOdPUi9/v1754iOI1BElBVV?=
 =?us-ascii?q?D7hs6pYskKKXmnNFzbHEaLKKiGJTrTzsHrYKO8TKdcg/lOuxKsuTaUDUnjMy+H?=
 =?us-ascii?q?lznoURCvLO5NgDuaPBxYpIGybBJtBXL/Q9Lhbx2xKMV3giEuwb0omnPKMnYRMD?=
 =?us-ascii?q?hmfENLq72Q7CVYje1+GmxB9HVlK+aElj2d7+nZLJYWrPRqDj51l+Jc/HQ11b9V?=
 =?us-ascii?q?4DtYS/xynSuB5uJp9nqmm+7H5DNhGE5AozBAwoyNpllKMqOf+IRCWGrf4VQG6m?=
 =?us-ascii?q?DGWDoQoN4wL9T0srFX0djO3IfyOipH+pqA+NANHI7RKdCaNXMJPh/gGTqSBwwA?=
 =?us-ascii?q?G234fVrDjlBQxanBvkaeqYI3/8Dh?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ARAACwTgFch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBg2snjBFfiymCDRSJfIN6iT6Bdg8BARgTAYd2IjQJDQEDAQEBAQE?=
 =?us-ascii?q?BAgETAQEBCA0JCCkjDII2IoJlAQIDAQIkEwYBGx0BAwIJAQEFBRgJJQMMFBEBB?=
 =?us-ascii?q?QEBGwYTBYMcgWkBAxUFmk08jAkWBQEXgncFhD8KGScNXYE3AgYSEIpcgRyCFoE?=
 =?us-ascii?q?RgmQuilwCiQmHHZAPBwKRLCMKiU+HRpg2BgIJBw8hgSWCDTMaI4M8ghsMFxKDO?=
 =?us-ascii?q?IpxIjIBgQEDAQEhEwsBjQkBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ARAACwTgFch0O0hNFjHAEBAQQBAQcEAQGBUQcBAQsBg2s?=
 =?us-ascii?q?njBFfiymCDRSJfIN6iT6Bdg8BARgTAYd2IjQJDQEDAQEBAQEBAgETAQEBCA0JC?=
 =?us-ascii?q?CkjDII2IoJlAQIDAQIkEwYBGx0BAwIJAQEFBRgJJQMMFBEBBQEBGwYTBYMcgWk?=
 =?us-ascii?q?BAxUFmk08jAkWBQEXgncFhD8KGScNXYE3AgYSEIpcgRyCFoERgmQuilwCiQmHH?=
 =?us-ascii?q?ZAPBwKRLCMKiU+HRpg2BgIJBw8hgSWCDTMaI4M8ghsMFxKDOIpxIjIBgQEDAQE?=
 =?us-ascii?q?hEwsBjQkBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,298,1539673200"; 
   d="scan'208";a="64755021"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 30 Nov 2018 06:54:44 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726679AbeLACEP (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 30 Nov 2018 21:04:15 -0500
Received: from mail-qt1-f196.google.com ([209.85.160.196]:40906 "EHLO
        mail-qt1-f196.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726519AbeLACEP (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 30 Nov 2018 21:04:15 -0500
Received: by mail-qt1-f196.google.com with SMTP id k12so6148455qtf.7
        for <linux-kernel@vger.kernel.org>; Fri, 30 Nov 2018 06:54:40 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=sWrbsAAdWe5zay0NeuUtXZzvRoSNQY2GhOPZGMQsli4=;
        b=DyeTK5px+GiJweb24MuGV9NXv5zNj9FfnT+10O8sudbdJoGgykLKcG7+HdIzbxw0Qo
         dKaBBbO0yLkJWoGOYePeOHZYjLyiHvL3C6++krMSw5VV2OTmrl2lithk5vAXw1jr2ax9
         sI1z2Lk/B2HXXLSTg9L3P9584Kto/ufwugwXpbC2Xv9JKbUTr3XIPLR1l5k44eVb69CR
         Mfv+WluoSjcC40IH1nUQimnMKm/aSWI38d76svIoE/OExu8MT9WasDvFqpuqq1OQjJdv
         XeZkzkkkZ6F2k1l5kPaO1JTWpxCQ9UUH2u1rlphu76LTHvFIP+dGP6YUmS3ou88Co9E+
         dtcg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:message-id:references
         :mime-version:content-disposition:in-reply-to:user-agent;
        bh=sWrbsAAdWe5zay0NeuUtXZzvRoSNQY2GhOPZGMQsli4=;
        b=fx/nFG69V7JQ+Mp+e2DcMssQHWSsaCeblW/5AYF7cvZB83lIHYz5pkno/8UxEMeRYy
         h97jWuCFuZK8iTl/CYuoEPzeDARe9Op2n1cEByezCkJwEkDv7yFAboSttulaesE37X/V
         RRpiyDdRTLa9SMyfrUSAlp3EnKqCOJbC/cQ6EANk0rS2m6bxjI66ybLwrRv2g4gCRGko
         D5ocLDzvkouxYgEowVR/LfHWWm+9GLo9eMkxd1pctNRKsgM4ZtPUUIAVI4aXHHccsYar
         5HGxadXYobdyEay/1Ag2xG9jRU4sgIUmxcSzHaIM8+g6Wh05RAF5dMGKhld79YOBeS8+
         3qqw==
X-Gm-Message-State: AA+aEWYJ4TAASGw0bp1lvMUZeoJ3rt8o1yun2MHbWPtU3jD3UnYBjK8M
        IvHUroUtjyndI2zeGy9jwQ==
X-Google-Smtp-Source: AFSGD/Va2L9hBE69yHO36130UAhT1B/ISJSdl6NThh2Y7O110xFeAQ9WB+QQgc9S2m/scW0n5grguQ==
X-Received: by 2002:a0c:a1c6:: with SMTP id e64mr5836966qva.196.1543589679757;
        Fri, 30 Nov 2018 06:54:39 -0800 (PST)
Received: from gabell (nat-pool-bos-t.redhat.com. [66.187.233.206])
        by smtp.gmail.com with ESMTPSA id o27sm3756835qkh.35.2018.11.30.06.54.38
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Fri, 30 Nov 2018 06:54:39 -0800 (PST)
Date: Fri, 30 Nov 2018 09:54:33 -0500
From: Masayoshi Mizuma <msys.mizuma@gmail.com>
To: Chao Fan <fanc.fnst@cn.fujitsu.com>
Cc: linux-kernel@vger.kernel.org, x86@kernel.org, bp@alien8.de,
        tglx@linutronix.de, mingo@redhat.com, hpa@zytor.com,
        keescook@chromium.org, bhe@redhat.com, indou.takao@jp.fujitsu.com,
        caoj.fnst@cn.fujitsu.com
Subject: Re: [PATCH v12 4/5] x86/boot: Parse SRAT table from RSDP and store
 immovable memory
Message-ID: <20181130145432.j2iwbglwrtj5xdus@gabell>
References: <20181129081631.11139-1-fanc.fnst@cn.fujitsu.com>
 <20181129081631.11139-5-fanc.fnst@cn.fujitsu.com>
 <20181129175520.xcmj3bv4yhdr7kk3@gabell>
 <20181130012454.GB1527@localhost.localdomain>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181130012454.GB1527@localhost.localdomain>
User-Agent: NeoMutt/20180716
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Fri, Nov 30, 2018 at 09:24:54AM +0800, Chao Fan wrote:
> On Thu, Nov 29, 2018 at 12:55:21PM -0500, Masayoshi Mizuma wrote:
> >On Thu, Nov 29, 2018 at 04:16:30PM +0800, Chao Fan wrote:
> >> To fix the conflict between KASLR and memory-hotremove, SRAT table
> >> should be parsed by RSDP pointer, then find the immovable
> >> memory regions and store them in an array called immovable_mem[].
> >> The array called immovable_mem[] will extern to KASLR, then
> >> KASLR will avoid to extract kernel to these regions.
> >> 
> >> Add 'CONFIG_EARLY_PARSE_RSDP' which depends on RANDOMIZE_BASE &&
> >> MEMORY_HOTREMOVE, cause only when both KASLR and memory-hotremove
> >> are enabled, RSDP needs to be parsed in compressed period.
> >> 
> >> Signed-off-by: Chao Fan <fanc.fnst@cn.fujitsu.com>
> >> ---
> >>  arch/x86/Kconfig                  |  10 +++
> >>  arch/x86/boot/compressed/Makefile |   2 +
> >>  arch/x86/boot/compressed/acpitb.c | 125 ++++++++++++++++++++++++++++++
> >>  arch/x86/boot/compressed/kaslr.c  |   4 -
> >>  arch/x86/boot/compressed/misc.h   |  20 +++++
> >>  5 files changed, 157 insertions(+), 4 deletions(-)
> >> 
> >> diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig
> >> index a29d49ef4d56..bc775968557b 100644
> >> --- a/arch/x86/Kconfig
> >> +++ b/arch/x86/Kconfig
> >> @@ -2146,6 +2146,16 @@ config X86_NEED_RELOCS
> >>  	def_bool y
> >>  	depends on RANDOMIZE_BASE || (X86_32 && RELOCATABLE)
> >>  
> >
> >> +config CONFIG_EARLY_PARSE_RSDP
> >
> >config EARLY_PARSE_RSDP
> >
> >> +	bool "Parse RSDP pointer on compressed period for KASLR"
> >> +	def_bool n
> >
> >Should be def_bool y?
> 
> I will change it to y.
> 
> >It is better to enable EARLY_PARSE_RSDP by default if 
> >RANDOMIZE_BASE and MEMORY_HOTREMOVE are enabled.
> >
> >> +	depends on RANDOMIZE_BASE && MEMORY_HOTREMOVE
> >> +	help
> >> +	  This option parses RSDP pointer in compressed period. Works
> >> +	  for KASLR to get memory information by SRAT table and choose
> >> +	  immovable memory to extract kernel.
> >> +	  Say Y if you want to use both KASLR and memory-hotremove.
> >> +
> >>  config PHYSICAL_ALIGN
> >>  	hex "Alignment value to which kernel should be aligned"
> >>  	default "0x200000"
> >> diff --git a/arch/x86/boot/compressed/Makefile b/arch/x86/boot/compressed/Makefile
> >> index 466f66c8a7f8..4cbfb58bf083 100644
> >> --- a/arch/x86/boot/compressed/Makefile
> >> +++ b/arch/x86/boot/compressed/Makefile
> >> @@ -84,6 +84,8 @@ ifdef CONFIG_X86_64
> >>  	vmlinux-objs-y += $(obj)/pgtable_64.o
> >>  endif
> >>  
> >> +vmlinux-objs-$(CONFIG_EARLY_PARSE_RSDP) += $(obj)/acpitb.o
> >> +
> >>  $(obj)/eboot.o: KBUILD_CFLAGS += -fshort-wchar -mno-red-zone
> >>  
> >>  vmlinux-objs-$(CONFIG_EFI_STUB) += $(obj)/eboot.o $(obj)/efi_stub_$(BITS).o \
> >> diff --git a/arch/x86/boot/compressed/acpitb.c b/arch/x86/boot/compressed/acpitb.c
> >> index 82d27c4b8978..023b33d0cd3b 100644
> >> --- a/arch/x86/boot/compressed/acpitb.c
> >> +++ b/arch/x86/boot/compressed/acpitb.c
> >> @@ -195,3 +195,128 @@ static acpi_physical_address bios_get_rsdp_addr(void)
> >>  		return (acpi_physical_address)address;
> >>  	}
> >>  }
> >> +
> >> +/* Used to determine RSDP table, based on acpi_os_get_root_pointer(). */
> >> +static acpi_physical_address get_rsdp_addr(void)
> >> +{
> >> +	acpi_physical_address pa = 0;
> >> +
> >> +	pa = get_acpi_rsdp();
> >> +
> >> +	if (!pa)
> >> +		pa = efi_get_rsdp_addr();
> >> +
> >> +	if (!pa)
> >> +		pa = bios_get_rsdp_addr();
> >> +
> >> +	return pa;
> >> +}
> >> +
> >> +/* Compute SRAT table from RSDP. */
> >> +static struct acpi_table_header *get_acpi_srat_table(void)
> >> +{
> >> +	acpi_physical_address acpi_table;
> >> +	acpi_physical_address root_table;
> >> +	struct acpi_table_header *header;
> >> +	struct acpi_table_rsdp *rsdp;
> >> +	int num_entries;
> >> +	char arg[10];
> >> +	u8 *entry;
> >> +	u32 size;
> >> +	u32 len;
> >> +
> >> +	rsdp = (struct acpi_table_rsdp *)get_rsdp_addr();
> >> +	if (!rsdp)
> >> +		return NULL;
> >> +
> >> +	/* Get RSDT or XSDT from RSDP. */
> >
> >> +	if (!(cmdline_find_option("acpi", arg, sizeof(arg)) == 4 &&
> >> +	    !strncmp(arg, "rsdt", 4)) &&
> >> +	    rsdp->xsdt_physical_address &&
> >> +	    rsdp->revision > 1) {
> >> +		root_table = rsdp->xsdt_physical_address;
> >> +		size = ACPI_XSDT_ENTRY_SIZE;
> >> +	} else {
> >> +		root_table = rsdp->rsdt_physical_address;
> >> +		size = ACPI_RSDT_ENTRY_SIZE;
> >> +	}
> >> +
> >> +	/* Get ACPI root table from RSDT or XSDT.*/
> >> +	header = (struct acpi_table_header *)root_table;
> >> +	if (!header)
> >> +		return NULL;
> >> +
> >> +	len = header->length;
> >> +	num_entries = (u32)((len - sizeof(struct acpi_table_header)) / size);
> >
> >> +	if (num_entries > MAX_ACPI_SIG)
> >> +		return NULL;
> >
> >I think this check isn't needed...
> >
> >> +
> >> +	entry = ACPI_ADD_PTR(u8, header, sizeof(struct acpi_table_header));
> >> +
> >> +	while (num_entries--) {
> >> +		u64 address64;
> >> +
> >> +		if (size == ACPI_RSDT_ENTRY_SIZE)
> >> +			acpi_table = ((acpi_physical_address)
> >> +				      (*ACPI_CAST_PTR(u32, entry)));
> >> +		else {
> >> +			*(u64 *)(void *)&address64 = *(u64 *)(void *)entry;
> >> +			acpi_table = (acpi_physical_address) address64;
> >> +		}
> >> +
> >> +		if (acpi_table) {
> >> +			header = (struct acpi_table_header *)acpi_table;
> >> +
> >> +			if (ACPI_COMPARE_NAME(header->signature, ACPI_SIG_SRAT))
> >> +				return header;
> >> +		}
> >> +		entry += size;
> >> +	}
> >> +	return NULL;
> >> +}
> >> +
> >> +/*
> >> + * According to ACPI table, filter the immovable memory regions
> >> + * and store them in immovable_mem[].
> >> + */
> >> +void get_immovable_mem(void)
> >> +{
> >> +	struct acpi_table_header *table_header;
> >> +	struct acpi_subtable_header *table;
> >> +	struct acpi_srat_mem_affinity *ma;
> >> +	unsigned long table_end;
> >> +	char arg[10];
> >> +	int i = 0;
> >> +
> >> +	if (cmdline_find_option("acpi", arg, sizeof(arg)) == 3 &&
> >> +	    !strncmp(arg, "off", 3))
> >> +		return;
> >> +
> >> +	table_header = get_acpi_srat_table();
> >> +	if (!table_header)
> >> +		return;
> >> +
> >> +	table_end = (unsigned long)table_header + table_header->length;
> >> +	table = (struct acpi_subtable_header *)
> >> +		((unsigned long)table_header + sizeof(struct acpi_table_srat));
> >> +
> >> +	while (((unsigned long)table) +
> >> +		       sizeof(struct acpi_subtable_header) < table_end) {
> >> +		if (table->type == ACPI_SRAT_TYPE_MEMORY_AFFINITY) {
> >> +			ma = (struct acpi_srat_mem_affinity *)table;
> >> +			if (!(ma->flags & ACPI_SRAT_MEM_HOT_PLUGGABLE)) {
> >> +				immovable_mem[i].start = ma->base_address;
> >> +				immovable_mem[i].size = ma->length;
> >> +				i++;
> >> +			}
> >> +
> >> +			if (i >= MAX_NUMNODES*2) {
> >> +				debug_putstr("Too many immovable memory regions, aborting.\n");
> >> +				return;
> >> +			}
> >> +		}
> >> +		table = (struct acpi_subtable_header *)
> >> +			((unsigned long)table + table->length);
> >> +	}
> >> +	num_immovable_mem = i;
> >> +}
> >> diff --git a/arch/x86/boot/compressed/kaslr.c b/arch/x86/boot/compressed/kaslr.c
> >> index 9ed9709d9947..b251572e77af 100644
> >> --- a/arch/x86/boot/compressed/kaslr.c
> >> +++ b/arch/x86/boot/compressed/kaslr.c
> >> @@ -87,10 +87,6 @@ static unsigned long get_boot_seed(void)
> >>  #define KASLR_COMPRESSED_BOOT
> >>  #include "../../lib/kaslr.c"
> >>  
> >> -struct mem_vector {
> >> -	unsigned long long start;
> >> -	unsigned long long size;
> >> -};
> >>  
> >>  /* Only supporting at most 4 unusable memmap regions with kaslr */
> >>  #define MAX_MEMMAP_REGIONS	4
> >> diff --git a/arch/x86/boot/compressed/misc.h b/arch/x86/boot/compressed/misc.h
> >> index 809c31effa4b..d94e2a419c13 100644
> >> --- a/arch/x86/boot/compressed/misc.h
> >> +++ b/arch/x86/boot/compressed/misc.h
> >> @@ -77,6 +77,11 @@ void choose_random_location(unsigned long input,
> >>  			    unsigned long *output,
> >>  			    unsigned long output_size,
> >>  			    unsigned long *virt_addr);
> >> +struct mem_vector {
> >> +	unsigned long long start;
> >> +	unsigned long long size;
> >> +};
> >> +
> >>  /* cpuflags.c */
> >>  bool has_cpuflag(int flag);
> >>  #else
> >> @@ -118,5 +123,20 @@ void set_sev_encryption_mask(void);
> >>  #endif
> >>  
> >>  /* acpitb.c */
> >> +#ifdef CONFIG_RANDOMIZE_BASE
> >> +/* Store the amount of immovable memory regions */
> >> +int num_immovable_mem;
> >> +#endif
> >> +
> >> +#ifdef CONFIG_EARLY_PARSE_RSDP
> >> +void get_immovable_mem(void);
> >
> >> +/* There are 72 kinds of ACPI_SIG in head file of ACPI. */
> >> +#define MAX_ACPI_SIG	72
> >
> >The 72 isn't the specification of ACPI, right? So the number
> 
> Yes, it's from  ACPI code, include/acpi/actbl*h.
> Boris said there should be a check for the num_entries,
> I didn't get a good idea, so I use the max number to check it.
> So do you have some advice?

Ah, got it. How about adding the check for len to prevent the wrap?
Like as:

	len = header->length;
	if (len <= sizeof(struct acpi_table_header))
		return NULL;
 	num_entries = (u32)((len - sizeof(struct acpi_table_header)) / size);

Thanks,
Masa
