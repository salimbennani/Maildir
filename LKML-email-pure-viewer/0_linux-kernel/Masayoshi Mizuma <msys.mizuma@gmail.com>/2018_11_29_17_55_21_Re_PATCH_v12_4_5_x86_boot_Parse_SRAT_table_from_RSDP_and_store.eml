Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 08:49:27 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 5FF635802E4;
	Thu, 29 Nov 2018 09:55:31 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 09:55:29 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AgA0/+BxDr+5C+yfXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e4VLvad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7S60/Vza/4KdxUBLmhi?=
 =?us-ascii?q?cJOSAk/m/UhMx/g75Urw+jqBNx2I7UeIOYOeFifq/BZ94WWXZNU9xPWyFHH4iy?=
 =?us-ascii?q?b5EPD+0EPetAqIfyvUAOogG+BAmrH+Pvyj5IjWLx06070uUhDATG0xY9FN8JtX?=
 =?us-ascii?q?TUt9X0NLwIXeCwzanJzCjDb/ZM1jrm54jIdwouofCIXb5qbcXRzkwvGhrDg16N?=
 =?us-ascii?q?qoLlJyuY2voRv2Wf9eZsSOyih3A9pw1soTWj2t0gh4jLi44Ny13J9D91zJs2KN?=
 =?us-ascii?q?C6UkJ3f9CpHZVKuy2EK4d7Q8UvSHxytikg0L0Jo5u7cTAKyJs5wx7fbOSKc5aH?=
 =?us-ascii?q?4h39TuadOzR4i2x/eLK5mRmy9VKsyurmVsm7yFpKryxFncfQtn0VyRDf9syKRu?=
 =?us-ascii?q?Fg8kqvxzqDzR3f5+JYLUwulKfWKYYtwrsqmZoStUTDEDX2mELzjKKOckUk++6o?=
 =?us-ascii?q?6/noY7n/pZ+TKZV0igfgPaQqg8C/Buo5Mg4QUGiB4um8yrLj8lPjQLlQjf05jL?=
 =?us-ascii?q?PZsJbEKsQfvKK5BBVV0ok75xalEzimyMgYnWUALF9dfBKHjovpNE/ULPH3EPey?=
 =?us-ascii?q?mFCskDZtx/DbMbztGJTNLn7fkLj/ebZx8VJTyA02zdpH/ZJbFqkBIO7vWk/2rN?=
 =?us-ascii?q?HYDgU2Mw2ow+n9D9VxzIMeWX+VDa+fP6PfqluI5uMpI+mRa44Zojf9K/455/Hw?=
 =?us-ascii?q?iX81g0MSfa6s3ZEPcnC3AuxmI1mFYXrrmtoBE2AKsRQkQOzpj12CVzhTZ3GpUq?=
 =?us-ascii?q?I45zE7Dp+mDIjZSoCshryBwDm0HplMam9aDVCMFG/id5+YVPcUdCKSPshhnyQe?=
 =?us-ascii?q?Wri6S48h0hKuuBXgy7V9LOrZ4SkYtZPl1Nho6OzfjxAy9TpoD8uD12GBVX17nm?=
 =?us-ascii?q?QNRzUuxqBwvVR9ykuf0ah/m/FYFsZc5/VTXgc+NJ7T1ep6C9/pVwLFf9eJTkum?=
 =?us-ascii?q?Q9q8DTEwSNIx38EBY0JnF9q+iRDD2jKgA6UJmLyTGJw07qXc0mDsKMln1XbJyr?=
 =?us-ascii?q?Mtj1k8TctJLm2pmKh/+w/XB47KlkWZk72ndaAd3C7L6WeCwnCCvEBeUA5sT6rF?=
 =?us-ascii?q?WWoTaVfRrdT8/knCVaOhCaw7Mgtdzs6PMrZFZcf3jVpYXvvjOM7RY2Sqm2iuAx?=
 =?us-ascii?q?aF3beMbIvse2UA0yTREkkEkwYP/XmYMQgyHDuuo2XbDDZ2D1Lgf1vs8fViqHO8?=
 =?us-ascii?q?VkI00wCKb0hm17qp+h4UheaQS+8J0rIDoichrzR0HFCy39/ND9qApgxhfLhTYN?=
 =?us-ascii?q?8n4VdH037ZuBJ5PpC6M69igVseeRxtv0zyzxV3FplAkc8yoXwwyAp9N62Z301B?=
 =?us-ascii?q?dj+Cxp/wJ6DYJXP0/BCsbK7WxErT0NKX+qcJ9fQ5pE/vvACvFko+7Xpn18NZ3G?=
 =?us-ascii?q?eb5pXPFAASS47+Ul4r9xhmoLHXeik8557O2XJwK6W1sz/C1MgvBOsq0Ruge9Zf?=
 =?us-ascii?q?MKWZFA79CcEaBs6uKPA0lFitdB4LIOdS9KssNcO8a/SGwLKrPPpnnD++l2RH4Z?=
 =?us-ascii?q?xy3ViW9yVhTe7ExZAFzO+C3guGTjvzkE2ussTqlo9afzESGWy/xDPgBI5QYK1y?=
 =?us-ascii?q?YIkKBX2vI82x2tVxmZrtV2RE+16kAlMMwNWpdgaKb1zhwQ1Q0lwaoHymmSeizz?=
 =?us-ascii?q?14iSoprreZ3CHVx+TidRwHOnNERWV4jFfsJ5S0gM4eXESycwcpkx6l717gx6dH?=
 =?us-ascii?q?vKR/M3XTQUBQcij0NW5iSKiwtrmFY8JV85MnqyZXUOe9YVCcVLH9pQAX0yfiH2?=
 =?us-ascii?q?tY2TA6eCumupT/nxxmlm2dKGx/o2beecF13R3f/sDTReZN3joaQyl1kTnWCUK7?=
 =?us-ascii?q?P9Wz/9WUlpHDv/u6V2KgUJ1TbCbqwZmBtCu9+W1lHxm/k+qvld3gFAgwyTX72M?=
 =?us-ascii?q?VyVSXUsBb8ZZHm16egPuJmZEVoBEL85NB8GoFxiYYwgJAQ2X4HhpSa53YHkGHz?=
 =?us-ascii?q?MclF1qL6dnYCWTkLw9vN6gj/xEJjNm6Jx57+VniFx8thZtq6bXkM1iMz8c9KE7?=
 =?us-ascii?q?uU46JenSRuvFW4tw3RbON5njccz/su9XEbj/sIuAor0iWSHLQSEVNEMizrkhSC?=
 =?us-ascii?q?98q+o7lPZGazbbiw01JzncymDLGHuA1dWWz2epE/HS9r9cV/MUnB0Hny6oHiZd?=
 =?us-ascii?q?nRYsgfthySkxfckedVLIg9meYNhSpiIWj9p2Eqy/YnjRxy2pG3pJOIJH9q/KK9?=
 =?us-ascii?q?Hx5ULDn1Z94I9zHpjKZemNuW3o+1EpVgHDULQIXnTfayHD0OsvTnMh6EECcgpX?=
 =?us-ascii?q?eDBbrfAQif5V9kr33VFpCkKWqXKGMFzdl4RxmdOU9fgB0SXDoghZ40DQSqxM3n?=
 =?us-ascii?q?cEdk6TEd/F/4qh1Qyu12MxnzSHvQpACtaj0sUpiQMAJW7h1e50fSKcGf7uVzHz?=
 =?us-ascii?q?xB/p28tgONLHaXZx9PDWEPVUyJHFTjPrio5dnd/OmUHOu+L/3SYbqQrexSTeuH?=
 =?us-ascii?q?xZWq0oF+5TaDKt2PPmV+D/08wkdDXW52G8XamzUMSiwbjSHNb9ScpBez5CJ3tN?=
 =?us-ascii?q?2/8O/wVQLr5IuPDaZSMNp19xC3h6eDK/CfhCJjJTlE0ZMMwGfCyKID014KlyFu?=
 =?us-ascii?q?az6tHKwaui7QV63QgLFYDh4BZyN3NctF9KY83ghLOc7GhdL5zL94jvgpC1hbUV?=
 =?us-ascii?q?ztgN2mZcsPI2ulLlPIGF6LNKiaJT3M28z3faK8SbhKgOpIrRG/pTabHFHlPjmY?=
 =?us-ascii?q?kznpVhavMfxDjS2BPRxevp29fQhpCWT5UN3mbRi7OsdtjTIq2b00mm/KNWkEPD?=
 =?us-ascii?q?l8aUxNqLiQ7SJegvpnGm1B7mBqLe+LmyuC6+nYK5AWseZkAyhuluJa5mg6xKVR?=
 =?us-ascii?q?7C1eWPN1ny7S/ZZSpASNkuCIghRuVlIapD9Nj8SFu15+Ea7fsJddW3fY5w9L5m?=
 =?us-ascii?q?KVXUckvdxgX/jmoKlBzcPPlerWKSVf9tucqc4HFtOSLcOVLX8oGRXsET/QSgAC?=
 =?us-ascii?q?SGj4Zinkm0VBnaTKpTWupZ8gp820lQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ADAADXJgBch0O0hNFkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGDayeMEV+LKYINFIkNboN5iTyBcxIBARgTAYd0IjQ?=
 =?us-ascii?q?JDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2IoJlAQIDAQIkEwYBGx0BAwIJAQEFB?=
 =?us-ascii?q?RgJJQMMFBEBBQEBGwYTBYMcgWkBAxUFmzM8jAkWBQEXgncFhD4KGScNXYE3AgY?=
 =?us-ascii?q?SEIpYgRyCFoERgmQuilwCiQeHF5AFBwKRJyMKiU6HRJgnBgIJBw8hgSWCDTMaI?=
 =?us-ascii?q?4M8ghsMFxKDOIpxIjIBgQEDAQEhEwsBjHoBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ADAADXJgBch0O0hNFkGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGDayeMEV+LKYINFIkNboN5iTyBcxIBARgTAYd0IjQJDQEDAQEBAQEBA?=
 =?us-ascii?q?gETAQEBCA0JCCkjDII2IoJlAQIDAQIkEwYBGx0BAwIJAQEFBRgJJQMMFBEBBQE?=
 =?us-ascii?q?BGwYTBYMcgWkBAxUFmzM8jAkWBQEXgncFhD4KGScNXYE3AgYSEIpYgRyCFoERg?=
 =?us-ascii?q?mQuilwCiQeHF5AFBwKRJyMKiU6HRJgnBgIJBw8hgSWCDTMaI4M8ghsMFxKDOIp?=
 =?us-ascii?q?xIjIBgQEDAQEhEwsBjHoBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,295,1539673200"; 
   d="scan'208";a="64607889"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 29 Nov 2018 09:55:28 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726310AbeK3FBh (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 30 Nov 2018 00:01:37 -0500
Received: from mail-qt1-f193.google.com ([209.85.160.193]:36770 "EHLO
        mail-qt1-f193.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726190AbeK3FBg (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 30 Nov 2018 00:01:36 -0500
Received: by mail-qt1-f193.google.com with SMTP id t13so2976034qtn.3
        for <linux-kernel@vger.kernel.org>; Thu, 29 Nov 2018 09:55:24 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=bIrb+1cPZtYc5UGklcZt5k9ONQODYb3CUv1UGFlIJPM=;
        b=REsFysyWNIfEsY8fb4s6u5AMGSAPFHJcEaB3+oKvUkO6DsUusyBciUg1dJeUF7uCPb
         5T3EuPtNFQKiuC32x8sdSTKiC8znvpk9QEXwJcd7iCzmrtC21yvfFk/Sk5g/YlD1NE7B
         lkMZvh9gUCuPRkl8jolXnYw2jX/d5Bu1gwopNeQY+4gTQEbyAzCs+Jivrx0XMFV7mFVr
         uls70fHZexZs/KpI7UKPfQCbq5PG7IByiYgX5/yyV1lr713Klck9tzWPOD0fIXAfUuEb
         y/oghtJmb3GoqcFbTlcpgytF0EDMHaHQaiSHCBibW68B/uHGTlX5POW8cp2YdKK+UrnG
         xH3g==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:message-id:references
         :mime-version:content-disposition:in-reply-to:user-agent;
        bh=bIrb+1cPZtYc5UGklcZt5k9ONQODYb3CUv1UGFlIJPM=;
        b=RcztLg7o8LJf9lCFr+zF3CNT7JXpZCi58u2iB8/rQ2o+9BE+vVAA7w/uM8SwQ0CZQ0
         C8+IrhW6PHhMZX7Q8NlUmlapnfBMYz+HioxmvgeKEg99f7vlJCWO+lObGWhoAx0L0RL2
         J0U2etHBQLQjsA84rvkKjjdzn0usoaX23XW1Gn1xs2UeDImTzAFnuZLZa+vpXeMtzBsD
         AGMQYLTd1t6H7daK0xS9hr6eeikJCm8IwTi67DFEzE7QyfQ9l7cEPC3XG6ZDdi43H1Ms
         GuGpsVx28ZPoe4HP0fnf/B/EW6H7a60UkVdjrguzVUBYpFKSVt4uajGyfvHQbX/T2dZM
         r2bw==
X-Gm-Message-State: AA+aEWY8OQBjfw/F0SGltPPpHekeVzD0sQ1MMVrgtXjFcMi4efvaPfs8
        9Id+9TTOxDKhTC7ezX9OuQ==
X-Google-Smtp-Source: AFSGD/VpyyffQDt7xhnga1BUDEt8kOCJXAaa2UwLXJWzgyXrVFbtz3DmQBpUTp87Y+KduNDD5F4JMQ==
X-Received: by 2002:ac8:17f0:: with SMTP id r45mr2358936qtk.206.1543514124295;
        Thu, 29 Nov 2018 09:55:24 -0800 (PST)
Received: from gabell (nat-pool-bos-t.redhat.com. [66.187.233.206])
        by smtp.gmail.com with ESMTPSA id a3sm1519149qta.21.2018.11.29.09.55.23
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Thu, 29 Nov 2018 09:55:23 -0800 (PST)
Date: Thu, 29 Nov 2018 12:55:21 -0500
From: Masayoshi Mizuma <msys.mizuma@gmail.com>
To: Chao Fan <fanc.fnst@cn.fujitsu.com>
Cc: linux-kernel@vger.kernel.org, x86@kernel.org, bp@alien8.de,
        tglx@linutronix.de, mingo@redhat.com, hpa@zytor.com,
        keescook@chromium.org, bhe@redhat.com, indou.takao@jp.fujitsu.com,
        caoj.fnst@cn.fujitsu.com
Subject: Re: [PATCH v12 4/5] x86/boot: Parse SRAT table from RSDP and store
 immovable memory
Message-ID: <20181129175520.xcmj3bv4yhdr7kk3@gabell>
References: <20181129081631.11139-1-fanc.fnst@cn.fujitsu.com>
 <20181129081631.11139-5-fanc.fnst@cn.fujitsu.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181129081631.11139-5-fanc.fnst@cn.fujitsu.com>
User-Agent: NeoMutt/20180716
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Thu, Nov 29, 2018 at 04:16:30PM +0800, Chao Fan wrote:
> To fix the conflict between KASLR and memory-hotremove, SRAT table
> should be parsed by RSDP pointer, then find the immovable
> memory regions and store them in an array called immovable_mem[].
> The array called immovable_mem[] will extern to KASLR, then
> KASLR will avoid to extract kernel to these regions.
> 
> Add 'CONFIG_EARLY_PARSE_RSDP' which depends on RANDOMIZE_BASE &&
> MEMORY_HOTREMOVE, cause only when both KASLR and memory-hotremove
> are enabled, RSDP needs to be parsed in compressed period.
> 
> Signed-off-by: Chao Fan <fanc.fnst@cn.fujitsu.com>
> ---
>  arch/x86/Kconfig                  |  10 +++
>  arch/x86/boot/compressed/Makefile |   2 +
>  arch/x86/boot/compressed/acpitb.c | 125 ++++++++++++++++++++++++++++++
>  arch/x86/boot/compressed/kaslr.c  |   4 -
>  arch/x86/boot/compressed/misc.h   |  20 +++++
>  5 files changed, 157 insertions(+), 4 deletions(-)
> 
> diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig
> index a29d49ef4d56..bc775968557b 100644
> --- a/arch/x86/Kconfig
> +++ b/arch/x86/Kconfig
> @@ -2146,6 +2146,16 @@ config X86_NEED_RELOCS
>  	def_bool y
>  	depends on RANDOMIZE_BASE || (X86_32 && RELOCATABLE)
>  

> +config CONFIG_EARLY_PARSE_RSDP

config EARLY_PARSE_RSDP

> +	bool "Parse RSDP pointer on compressed period for KASLR"
> +	def_bool n

Should be def_bool y?
It is better to enable EARLY_PARSE_RSDP by default if 
RANDOMIZE_BASE and MEMORY_HOTREMOVE are enabled.

> +	depends on RANDOMIZE_BASE && MEMORY_HOTREMOVE
> +	help
> +	  This option parses RSDP pointer in compressed period. Works
> +	  for KASLR to get memory information by SRAT table and choose
> +	  immovable memory to extract kernel.
> +	  Say Y if you want to use both KASLR and memory-hotremove.
> +
>  config PHYSICAL_ALIGN
>  	hex "Alignment value to which kernel should be aligned"
>  	default "0x200000"
> diff --git a/arch/x86/boot/compressed/Makefile b/arch/x86/boot/compressed/Makefile
> index 466f66c8a7f8..4cbfb58bf083 100644
> --- a/arch/x86/boot/compressed/Makefile
> +++ b/arch/x86/boot/compressed/Makefile
> @@ -84,6 +84,8 @@ ifdef CONFIG_X86_64
>  	vmlinux-objs-y += $(obj)/pgtable_64.o
>  endif
>  
> +vmlinux-objs-$(CONFIG_EARLY_PARSE_RSDP) += $(obj)/acpitb.o
> +
>  $(obj)/eboot.o: KBUILD_CFLAGS += -fshort-wchar -mno-red-zone
>  
>  vmlinux-objs-$(CONFIG_EFI_STUB) += $(obj)/eboot.o $(obj)/efi_stub_$(BITS).o \
> diff --git a/arch/x86/boot/compressed/acpitb.c b/arch/x86/boot/compressed/acpitb.c
> index 82d27c4b8978..023b33d0cd3b 100644
> --- a/arch/x86/boot/compressed/acpitb.c
> +++ b/arch/x86/boot/compressed/acpitb.c
> @@ -195,3 +195,128 @@ static acpi_physical_address bios_get_rsdp_addr(void)
>  		return (acpi_physical_address)address;
>  	}
>  }
> +
> +/* Used to determine RSDP table, based on acpi_os_get_root_pointer(). */
> +static acpi_physical_address get_rsdp_addr(void)
> +{
> +	acpi_physical_address pa = 0;
> +
> +	pa = get_acpi_rsdp();
> +
> +	if (!pa)
> +		pa = efi_get_rsdp_addr();
> +
> +	if (!pa)
> +		pa = bios_get_rsdp_addr();
> +
> +	return pa;
> +}
> +
> +/* Compute SRAT table from RSDP. */
> +static struct acpi_table_header *get_acpi_srat_table(void)
> +{
> +	acpi_physical_address acpi_table;
> +	acpi_physical_address root_table;
> +	struct acpi_table_header *header;
> +	struct acpi_table_rsdp *rsdp;
> +	int num_entries;
> +	char arg[10];
> +	u8 *entry;
> +	u32 size;
> +	u32 len;
> +
> +	rsdp = (struct acpi_table_rsdp *)get_rsdp_addr();
> +	if (!rsdp)
> +		return NULL;
> +
> +	/* Get RSDT or XSDT from RSDP. */

> +	if (!(cmdline_find_option("acpi", arg, sizeof(arg)) == 4 &&
> +	    !strncmp(arg, "rsdt", 4)) &&
> +	    rsdp->xsdt_physical_address &&
> +	    rsdp->revision > 1) {
> +		root_table = rsdp->xsdt_physical_address;
> +		size = ACPI_XSDT_ENTRY_SIZE;
> +	} else {
> +		root_table = rsdp->rsdt_physical_address;
> +		size = ACPI_RSDT_ENTRY_SIZE;
> +	}
> +
> +	/* Get ACPI root table from RSDT or XSDT.*/
> +	header = (struct acpi_table_header *)root_table;
> +	if (!header)
> +		return NULL;
> +
> +	len = header->length;
> +	num_entries = (u32)((len - sizeof(struct acpi_table_header)) / size);

> +	if (num_entries > MAX_ACPI_SIG)
> +		return NULL;

I think this check isn't needed...

> +
> +	entry = ACPI_ADD_PTR(u8, header, sizeof(struct acpi_table_header));
> +
> +	while (num_entries--) {
> +		u64 address64;
> +
> +		if (size == ACPI_RSDT_ENTRY_SIZE)
> +			acpi_table = ((acpi_physical_address)
> +				      (*ACPI_CAST_PTR(u32, entry)));
> +		else {
> +			*(u64 *)(void *)&address64 = *(u64 *)(void *)entry;
> +			acpi_table = (acpi_physical_address) address64;
> +		}
> +
> +		if (acpi_table) {
> +			header = (struct acpi_table_header *)acpi_table;
> +
> +			if (ACPI_COMPARE_NAME(header->signature, ACPI_SIG_SRAT))
> +				return header;
> +		}
> +		entry += size;
> +	}
> +	return NULL;
> +}
> +
> +/*
> + * According to ACPI table, filter the immovable memory regions
> + * and store them in immovable_mem[].
> + */
> +void get_immovable_mem(void)
> +{
> +	struct acpi_table_header *table_header;
> +	struct acpi_subtable_header *table;
> +	struct acpi_srat_mem_affinity *ma;
> +	unsigned long table_end;
> +	char arg[10];
> +	int i = 0;
> +
> +	if (cmdline_find_option("acpi", arg, sizeof(arg)) == 3 &&
> +	    !strncmp(arg, "off", 3))
> +		return;
> +
> +	table_header = get_acpi_srat_table();
> +	if (!table_header)
> +		return;
> +
> +	table_end = (unsigned long)table_header + table_header->length;
> +	table = (struct acpi_subtable_header *)
> +		((unsigned long)table_header + sizeof(struct acpi_table_srat));
> +
> +	while (((unsigned long)table) +
> +		       sizeof(struct acpi_subtable_header) < table_end) {
> +		if (table->type == ACPI_SRAT_TYPE_MEMORY_AFFINITY) {
> +			ma = (struct acpi_srat_mem_affinity *)table;
> +			if (!(ma->flags & ACPI_SRAT_MEM_HOT_PLUGGABLE)) {
> +				immovable_mem[i].start = ma->base_address;
> +				immovable_mem[i].size = ma->length;
> +				i++;
> +			}
> +
> +			if (i >= MAX_NUMNODES*2) {
> +				debug_putstr("Too many immovable memory regions, aborting.\n");
> +				return;
> +			}
> +		}
> +		table = (struct acpi_subtable_header *)
> +			((unsigned long)table + table->length);
> +	}
> +	num_immovable_mem = i;
> +}
> diff --git a/arch/x86/boot/compressed/kaslr.c b/arch/x86/boot/compressed/kaslr.c
> index 9ed9709d9947..b251572e77af 100644
> --- a/arch/x86/boot/compressed/kaslr.c
> +++ b/arch/x86/boot/compressed/kaslr.c
> @@ -87,10 +87,6 @@ static unsigned long get_boot_seed(void)
>  #define KASLR_COMPRESSED_BOOT
>  #include "../../lib/kaslr.c"
>  
> -struct mem_vector {
> -	unsigned long long start;
> -	unsigned long long size;
> -};
>  
>  /* Only supporting at most 4 unusable memmap regions with kaslr */
>  #define MAX_MEMMAP_REGIONS	4
> diff --git a/arch/x86/boot/compressed/misc.h b/arch/x86/boot/compressed/misc.h
> index 809c31effa4b..d94e2a419c13 100644
> --- a/arch/x86/boot/compressed/misc.h
> +++ b/arch/x86/boot/compressed/misc.h
> @@ -77,6 +77,11 @@ void choose_random_location(unsigned long input,
>  			    unsigned long *output,
>  			    unsigned long output_size,
>  			    unsigned long *virt_addr);
> +struct mem_vector {
> +	unsigned long long start;
> +	unsigned long long size;
> +};
> +
>  /* cpuflags.c */
>  bool has_cpuflag(int flag);
>  #else
> @@ -118,5 +123,20 @@ void set_sev_encryption_mask(void);
>  #endif
>  
>  /* acpitb.c */
> +#ifdef CONFIG_RANDOMIZE_BASE
> +/* Store the amount of immovable memory regions */
> +int num_immovable_mem;
> +#endif
> +
> +#ifdef CONFIG_EARLY_PARSE_RSDP
> +void get_immovable_mem(void);

> +/* There are 72 kinds of ACPI_SIG in head file of ACPI. */
> +#define MAX_ACPI_SIG	72

The 72 isn't the specification of ACPI, right? So the number
of SIG may increase and decrease in the future.
This macro and the check I commented above isn't needed...

Thanks,
Masa

> +#else
> +static void get_immovable_mem(void)
> +{
> +}
> +#endif
> +
>  #define BOOT_STRING
>  extern int kstrtoull(const char *s, unsigned int base, unsigned long long *res);
> -- 
> 2.19.1
> 
> 
> 
