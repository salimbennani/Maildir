Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 21:31:18 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id B1A825805F0;
	Tue, 18 Dec 2018 23:29:46 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by fmsmga006-1.fm.intel.com with ESMTP; 18 Dec 2018 23:29:45 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Al1wvxxzjbJaOMUrXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0ewUKPad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWRPUMZPWSJcAY2z?=
 =?us-ascii?q?YJcAAPcPMuZZtIn9v1kDoACiBQWwGO/j1iNEi2Xo0aA8zu8vERvG3AslH98WrH?=
 =?us-ascii?q?nUqsj6NL0MXu+v0aLF0C/Mb+lX2Tfm8ofIdBEhquyLUL1qd8re1FMvGB3fgViL?=
 =?us-ascii?q?qIzlOS2V2foXs2iA8eVgTfigi3Inqw1rvjevwcIsh5DPi4kIxF7E8iB5z5w0Jd?=
 =?us-ascii?q?2+UEN7YNikEIVOuCGALIt5XNsiTHt0uCY60LEJpZm7fC0SxJQp3hLfcOKIfJSV?=
 =?us-ascii?q?4hL5SumdOyt3hHVgeL+5mh288lCgx/XiWsWo1FtGtDdJn9fSunwXyhDe6dSLRu?=
 =?us-ascii?q?F880qjwTqDyhzf5vtZLU0wiKbXMZ0szqQtmpccsUnPBjL6lUH4gaOMa0ko5/Sk?=
 =?us-ascii?q?5/76brn6pZKQLZF4hh34P68zgMKwG/44PRILX2WD+eSzyrnj/UrhTbVUgf05jL?=
 =?us-ascii?q?PZvIrZJcsFvK65BRFa0oI55xa4FTem38wUnXgBLF1bZBKKl5blN03KLfziEPuy?=
 =?us-ascii?q?jUqgnC12y/3FIrHtGJTAI3rbnLfkZ7l96kpcyAQpzdBY4pJZErUBIPP1Wk/su9?=
 =?us-ascii?q?3UFxw5PBKuw+bhFtp90poSWWWBA6+fLqzSq0SF5vwgI+aSfo8ZojX9JOY/5/7o?=
 =?us-ascii?q?k3A5nUURfa6z3ZsYcHy4BOhpI12FYXrwhdcMCWMKvgs9TOP0klGDXiNTam22X6?=
 =?us-ascii?q?I94DE7FY2nAZ3CRoCrnLyOwiO7EodKaWBBD1CGCW3oeJmcW/cQdCKSJddskjwe?=
 =?us-ascii?q?WrigV48uzxauuBX6y7p6NOXU/CIYuInn1Nh04e3TiB4z+SZ1D8Sbz2GCUWV0kn?=
 =?us-ascii?q?kUSD8x2aB1uVZ9xUub0ahkn/xYEsRe5/FOUggkL5LczOt6C9b0WgLGZdqJTFem?=
 =?us-ascii?q?QtO7ATA+VN4xwtkOY1pjFNWmlBzMwy2qA7oNnbyRGJM06r7c32T2J8tl0XnGz6?=
 =?us-ascii?q?khj14lQsdVL22pnKx/+hPXB47IlUWZiqmreb4d3C7L6GeM026OsFtEXw53VKXP?=
 =?us-ascii?q?RWofaVfOrdTl+kPCSKejCbc9PQtH08KCLqpKZcfvjVVJX/rjPNXeY2Ssm2a/Hx?=
 =?us-ascii?q?qIx7WMbJb0dGUZxinSFE8EkwUL93acKQc+Hjuho37ZDDF2CF3geV3s/vdkpHO7?=
 =?us-ascii?q?VEA0yRqKYFNn17ay/h4VhvmcS/cI07IAuSchrSh0HVmn09LXDdqAuxRufKFGbd?=
 =?us-ascii?q?wh51dH0HrTtxZhMZy4M6BimlkefhxqsEz0yRV4FJ9Mkcgwo3Ms1wp9N6SY3UhF?=
 =?us-ascii?q?dzOZ25DwJ7LWJnPz/BCpd67ZxFXe3MyK9acI7fQys0/jsx2xFko+73Vn1MFY02?=
 =?us-ascii?q?ed5pXPCwoSTZLxU0Yt+xhmvb3aZTM954fV1X1qPqm5qTvC29MvBOs4xResZdZf?=
 =?us-ascii?q?MKWYFADsF80WHdShKOsvm1KxdBILIPhS9LIoP8Ohb/aJwqqrM/hvnT24jWVL+p?=
 =?us-ascii?q?ty0l+R+CVmTO7I3JEFw++D0wuDVjf8ikqhs8/tlYBFYzESAnSwySz+CIFNYa1y?=
 =?us-ascii?q?eJ4BCX2yLM2v2tV+m5ntVmZY9V6+HV8JxNWleBuSb1Pn2w1Q2l8aoXimmSu+0j?=
 =?us-ascii?q?x1nCslrquZ3CzS3evicAALNXJMRGlnlV3sO5S7j8gGXEi0aAgkjAGl5UfmyKdB?=
 =?us-ascii?q?vqRwMm7TTV1OfyfoNWFiU7K8uaaYbM5L9Zwnrz9XUOO6YV2BTr79oh0a0z7sHm?=
 =?us-ascii?q?dExTA7cS2qtYv9nxBglG2dK3NzpmLDec5s3Rff+MDcRflJ0zsGRSl0kznWCkKn?=
 =?us-ascii?q?P9m0+9WZjJPDsuG4V2K8WZxfayjrzYWctCSl4W1mGwGwn/e2mtf/Cwg1zTf718?=
 =?us-ascii?q?V2VSXPtBv8YJPk1765MeJkeUlkHkT85NB5GoF9k4swgo8f2X4Bi5WR/HoHl3rz?=
 =?us-ascii?q?MNpB1aL/anoNWSAEw9rP7Af5301jK2qDx5jlWXWF3sthe966b3sW2y0n6MBGEq?=
 =?us-ascii?q?WU7L1CnSZuplq4rATRYeVynzsHyPsu7mIajP8NuAY30iqdBbUSF1FCPSPwjxSI?=
 =?us-ascii?q?88y+rKJPaWasa7ew1VByndC8DL6YpAFcV230epMjHS9288V+P0jA0Hz16oH4Zt?=
 =?us-ascii?q?bQacgfuQGTkxfFl+JVMo4+luIWhSp7PmLwpXgly+84jRN0x527spaIK35x/K2n?=
 =?us-ascii?q?GB5XLSP6Z9kc+jz2iaZen8CW352gH5l7GzULWofoQuysED4IqfvnMAOOGiUmqn?=
 =?us-ascii?q?iHAbrfAROf6EB+onLTFJCrMmubJXgDwtVkWRmdP1dfgAEPUTU+n545EB2qxcP7?=
 =?us-ascii?q?fEd44DAR+kD3qh9Wxu10MBn/V3/VpB20ZTcsVJifMB1W4xlZ6EjPNsye6v9zEz?=
 =?us-ascii?q?tc/p28twGNLm2bZwJVDWAGQECEBlbjPqWw6tnE6eSXGu2+L/7Wa7WUteNeT+uI?=
 =?us-ascii?q?xY6o0oZ+/TaDLMCPMWd5D/EhxkpPR3N5G9namzUSTSwYjTnNYtWfpBe9/C13s8?=
 =?us-ascii?q?++/O7qWALp+YuAFb9SPc9z9BCxhKeJL/SQizphKTZEypMMwmfFybgY3F4PkiFu?=
 =?us-ascii?q?aiOiEbIauS7WS6LQnKBXAgUfayNyMstI8q090hNMOc7dltP6yLp4guQpBFdCUF?=
 =?us-ascii?q?zrgtupatASI2GhKFPHA16GNLSYKj3KwMH3YqK8RadTjOVOsB2wtiiUE1X+PjSY?=
 =?us-ascii?q?jDTpUxGvMedRjCCUJhBeuYe9cgpzBmjnVt7pdhq7MNpvhz0s3bI0nm/KNXIbMT?=
 =?us-ascii?q?VkaUxNs6af7TlGjfR/AWBB6ntlIPKAmyaY6enYN5kXveFqAiRyi+JV/nA6x6FJ?=
 =?us-ascii?q?4yFDQfx/gDHSocJ2o1G6jumPzSJqUAZPqjZOno6EoV9uNrnZ9pZeX3bJ5xYN7W?=
 =?us-ascii?q?SWCxQXqNppENzvu6ZMytfRkKL/MitN89XR/cEEHcjbNNqHMGY9MRruADPVDBEK?=
 =?us-ascii?q?TTiuNWHegUxSiPCT9n2PoZg8pZjhg54OSr5dVFwoGfIWEEVlHNoeIJhpWjMoi6?=
 =?us-ascii?q?KUjMkN5Sn2kB6Ef99buJHZX+naIvzpJD+WhKVAblNc2qn5K4UNP5a92EVkZlB1?=
 =?us-ascii?q?lZjOEmLUXNZEuConaRU79gEFpHx/SHAjnkHocAWg5FcNGvOu2B07kA1zZaIq7j?=
 =?us-ascii?q?i6sHktIV+fjS08ikQ40f/smzGKeTjwZPO5W41MBiPctk4vP4ngTh58cQ30lkth?=
 =?us-ascii?q?YmSXD4lNhqdtIDg4wDTXvoFCTLsFFfVJ?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AgAAA48xlch0O0hNElKA4IGgEBAQEBA?=
 =?us-ascii?q?gEBAQEHAgEBAQGBZYJqgQInCoxrix2CIZdcgV8TAQEYBwwBgUuDQwmCESI4EgE?=
 =?us-ascii?q?DAQEBAQEBAgETAQEBCgsJCCkjDII2JAGCaQIkEz8GCQIrCgIJBQsDDAVJAQ0FB?=
 =?us-ascii?q?YMdAYIBBAGnRDOKMYw/F4F/gRGHTgIeZIJ6giYCiUSXawmCKYRmikYMGGB9iFC?=
 =?us-ascii?q?HKYlHh0dgh2cCBAIJAhSBXYF3TSMVgycJghsDFxINgyuESoYKPgEBMQx5AQGMQ?=
 =?us-ascii?q?YEfAQE?=
X-IPAS-Result: =?us-ascii?q?A0AgAAA48xlch0O0hNElKA4IGgEBAQEBAgEBAQEHAgEBAQG?=
 =?us-ascii?q?BZYJqgQInCoxrix2CIZdcgV8TAQEYBwwBgUuDQwmCESI4EgEDAQEBAQEBAgETA?=
 =?us-ascii?q?QEBCgsJCCkjDII2JAGCaQIkEz8GCQIrCgIJBQsDDAVJAQ0FBYMdAYIBBAGnRDO?=
 =?us-ascii?q?KMYw/F4F/gRGHTgIeZIJ6giYCiUSXawmCKYRmikYMGGB9iFCHKYlHh0dgh2cCB?=
 =?us-ascii?q?AIJAhSBXYF3TSMVgycJghsDFxINgyuESoYKPgEBMQx5AQGMQYEfAQE?=
X-IronPort-AV: E=Sophos;i="5.56,371,1539673200"; 
   d="scan'208";a="58082976"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 18 Dec 2018 23:29:45 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727818AbeLSH3l (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 19 Dec 2018 02:29:41 -0500
Received: from helmsgmaster01.f-secure.com ([193.110.108.20]:37218 "EHLO
        helmsgmaster01.f-secure.com" rhost-flags-OK-OK-OK-OK)
        by vger.kernel.org with ESMTP id S1725290AbeLSH3k (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 19 Dec 2018 02:29:40 -0500
Received: from pps.filterd (helmsgmaster01.f-secure.com [127.0.0.1])
        by helmsgmaster01.f-secure.com (8.16.0.27/8.16.0.27) with SMTP id wBJ6tDoG009798;
        Wed, 19 Dec 2018 08:59:45 +0200
Received: from helex02.fi.f-secure.com ([10.190.48.73])
        by helmsgmaster01.f-secure.com with ESMTP id 2pfe6205b2-1
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-SHA384 bits=256 verify=NOT);
        Wed, 19 Dec 2018 08:59:45 +0200
Received: from lambda.inversepath.com (10.191.8.145) by
 helex01.FI.F-Secure.com (10.190.48.70) with Microsoft SMTP Server (TLS) id
 15.0.1395.4; Wed, 19 Dec 2018 08:58:29 +0200
Received: from lambda.inversepath.com (localhost [127.0.0.1])
        by lambda.inversepath.com (OpenSMTPD) with ESMTP id 2747125d;
        Wed, 19 Dec 2018 06:58:28 +0000 (UTC)
Date: Wed, 19 Dec 2018 07:58:28 +0100
From: Andrea Barisani <andrea@inversepath.com>
To: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>,
        <linux-kernel@vger.kernel.org>
CC: Philipp Zabel <p.zabel@pengutronix.de>
Subject: [PATCH v4.14 1/1]: nvmem: imx-ocotp: account for addressing gaps to
 ensure consistent read/write on i.MX SoCs
Message-ID: <20181219065828.GD2843@lambda.inversepath.com>
MIME-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Content-Disposition: inline
X-GPG-Key: 0x864C9B9E
X-GPG-Fingerprint: 0A76 074A 02CD E989 CE7F  AC3F DA47 578E 864C 9B9E
User-Agent: Mutt/1.11.1 (2018-12-01)
X-Originating-IP: [10.191.8.145]
X-ClientProxiedBy: helex01.FI.F-Secure.com (10.190.48.70) To
 helex01.FI.F-Secure.com (10.190.48.70)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org


The nvmem-imx-ocotp driver does not currently handle addressing gaps between
OTP banks which can be present in i.MX System-on-Chip part numbers.

This leads to inconsistencies between the interpretation of the offset
argument in read and write operations, not only requiring specific
workarounds but also resulting in the impossibility of reading the entire OTP
bank.

Additionally this inconsistency violates the NVMEM subsystem principle of
exposing a userspace binary interface for read/write operations against a
pseudo-file.

This patch accounts for addressing gaps, depending on the specific i.MX model
being addressed.

Signed-off-by: Andrea Barisani <andrea@inversepath.com>

---
 drivers/nvmem/imx-ocotp.c |   49 ++++++++++++++++++++++++++++++------
 1 file changed, 41 insertions(+), 8 deletions(-)

--- linux-4.14.89/drivers/nvmem/imx-ocotp.c.orig	2018-12-18 10:30:49.363322853 +0100
+++ linux-4.14.89/drivers/nvmem/imx-ocotp.c	2018-12-18 10:31:18.143778980 +0100
@@ -114,6 +114,8 @@ static int imx_ocotp_read(void *context,
 {
 	struct ocotp_priv *priv = context;
 	unsigned int count;
+	unsigned int base_offset;
+	const char *compat;
 	u32 *buf = val;
 	int i, ret;
 	u32 index;
@@ -139,11 +141,42 @@ static int imx_ocotp_read(void *context,
 		goto read_end;
 	}
 
+	compat = of_get_property(priv->dev->of_node, "compatible", NULL);
+
 	for (i = index; i < (index + count); i++) {
-		*buf++ = readl(priv->base + IMX_OCOTP_OFFSET_B0W0 +
-			       i * IMX_OCOTP_OFFSET_PER_WORD);
+		/*
+		 * On specific i.MX P/Ns there are addressing gaps between
+		 * contiguous OTP banks which must be accounted for when
+		 * reading OTP banks from mapped memory.
+		 *
+		 * This is necessary to make the imx_ocotp_read() offset
+		 * interpretation consistent with imx_ocotp_write(), which
+		 * does not require to account for gaps as it uses the offset
+		 * value to derive the bank index and pass it directly to the
+		 * OCOTP controller (rather than being used for mapped memory
+		 * addressing).
+		 */
+		base_offset = IMX_OCOTP_OFFSET_B0W0 + i * IMX_OCOTP_OFFSET_PER_WORD;
+
+		if (strcmp(compat, "fsl,imx6sx-ocotp")) {
+			/* 44.5.43 [IMX6SXRM]
+			 * 256 bytes gap between Bank5 Word7 (21B_C6F0h, offset 0x6f0) and
+			 * Bank10 Word1 (21B_CA10h, offset 0xa10)
+			 */
+			if (base_offset > 0x6f0)
+				base_offset += 0x100;
+		} else if (strcmp(compat, "fsl,imx6ul-ocotp")) {
+			/* 35.5.59 [IMX6ULRM]
+			 * 256 bytes gap between Bank5 Word7 (21B_C6F0h, offset 0x6f0) and
+			 * Bank6 Word0 (21B_C800h, offset 0x800)
+			 */
+			if (base_offset > 0x6f0)
+				base_offset += 0x100;
+		}
+
+		*buf++ = readl(priv->base + base_offset);
 
-		/* 47.3.1.2
+		/* 47.3.1.2 [IMX6SDLRM]
 		 * For "read locked" registers 0xBADABADA will be returned and
 		 * HW_OCOTP_CTRL[ERROR] will be set. It must be cleared by
 		 * software before any new write, read or reload access can be
@@ -205,7 +238,7 @@ static int imx_ocotp_write(void *context
 
 	writel(timing, priv->base + IMX_OCOTP_ADDR_TIMING);
 
-	/* 47.3.1.3.2
+	/* 47.3.1.3.2 [IMX6SDLRM]
 	 * Check that HW_OCOTP_CTRL[BUSY] and HW_OCOTP_CTRL[ERROR] are clear.
 	 * Overlapped accesses are not supported by the controller. Any pending
 	 * write or reload must be completed before a write access can be
@@ -217,7 +250,7 @@ static int imx_ocotp_write(void *context
 		goto write_end;
 	}
 
-	/* 47.3.1.3.3
+	/* 47.3.1.3.3 [IMX6SDLRM]
 	 * Write the requested address to HW_OCOTP_CTRL[ADDR] and program the
 	 * unlock code into HW_OCOTP_CTRL[WR_UNLOCK]. This must be programmed
 	 * for each write access. The lock code is documented in the register
@@ -234,7 +267,7 @@ static int imx_ocotp_write(void *context
 
 	writel(ctrl, priv->base + IMX_OCOTP_ADDR_CTRL);
 
-	/* 47.3.1.3.4
+	/* 47.3.1.3.4 [IMX6SDLRM]
 	 * Write the data to the HW_OCOTP_DATA register. This will automatically
 	 * set HW_OCOTP_CTRL[BUSY] and clear HW_OCOTP_CTRL[WR_UNLOCK]. To
 	 * protect programming same OTP bit twice, before program OCOTP will
@@ -254,7 +287,7 @@ static int imx_ocotp_write(void *context
 	 */
 	writel(*buf, priv->base + IMX_OCOTP_ADDR_DATA);
 
-	/* 47.4.1.4.5
+	/* 47.4.1.4.5 [IMX6SDLRM]
 	 * Once complete, the controller will clear BUSY. A write request to a
 	 * protected or locked region will result in no OTP access and no
 	 * setting of HW_OCOTP_CTRL[BUSY]. In addition HW_OCOTP_CTRL[ERROR] will
@@ -272,7 +305,7 @@ static int imx_ocotp_write(void *context
 		goto write_end;
 	}
 
-	/* 47.3.1.4
+	/* 47.3.1.4 [IMX6SDLRM]
 	 * Write Postamble: Due to internal electrical characteristics of the
 	 * OTP during writes, all OTP operations following a write must be
 	 * separated by 2 us after the clearing of HW_OCOTP_CTRL_BUSY following

-- 
Andrea Barisani     Head of Hardware Security |     F-Secure
                                      Founder | Inverse Path

https://www.f-secure.com             https://inversepath.com
0x864C9B9E 0A76 074A 02CD E989 CE7F AC3F DA47 578E 864C 9B9E
       "Pluralitas non est ponenda sine necessitate"
