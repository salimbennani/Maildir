Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 25 Nov 2018 14:43:10 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id B77C55803C2;
	Sat, 24 Nov 2018 17:09:42 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by fmsmga006-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 24 Nov 2018 17:09:42 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AGHXHBhPmFaOl+i1aArcl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KPj+r8bcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Xymp4aV2Rx/ykC?=
 =?us-ascii?q?oJOT43/n/KhMJzjq1brh2uqABwzY7PeIGYNuFzfr/fcN4AWWZNQtpdWzJHD4ih?=
 =?us-ascii?q?b4UPFe0BPeNAoofyo1sOsxq+BRO2C+jyzzFIhmX50rY70+Q7FgHGwhYvFM8JvX?=
 =?us-ascii?q?TQrdX1MrkdUfivzKnJyzXDc+1Z2S3m5YfSdhAhvfWMXbN2ccrMxkgjDQTFjk+f?=
 =?us-ascii?q?qYH8OT6ey+cDs3CD4uZ+Se6ij3Qrpxx/rzSx3Msgl4rEip4Pxl3F9yh12Ik4KN?=
 =?us-ascii?q?yiREJmYtOpE4FcuzyaOodsX88vTG5ltSAnwbMco5G7ZjIFyJE/yh7fdfOHd4+I?=
 =?us-ascii?q?7wr9VOaePzh4nmhpeLGhiBao90iv1On8WtOz0FZQoSpJitjMtnYT2BzP8sWLVO?=
 =?us-ascii?q?dx80O71TqS2Q3f9PtILV03mKbHMZIsw7w9moIWsUvZHy/2nEv2jLWRdkUh4uWo?=
 =?us-ascii?q?7+XnYrP7pp6TLoN0iR/xMr4omsOhBeQ0Kw8OXmad+euizr3u5lP5QLpUgf0siK?=
 =?us-ascii?q?XZs47VJd4dpqGnBw9ZyIEj6wywDzu+ytQXgWEHLE5ZeBKAl4XpP1DOIPPmAvul?=
 =?us-ascii?q?jFWsjSxmx/THPr3nH5XMIWLPkLbnfbZh9UFczBA/wsxY55JRErsBOu78WlfttN?=
 =?us-ascii?q?zECR80Kwy0zPzmCNVhzIweXniDAq+EMKzIt1+I6fkiI+2NZI8TpTb8JOIp5//o?=
 =?us-ascii?q?jX8lh1AdebOl0ocQaHC9Bv5mOVmWYWLwgtcdFmcHpgg+TOv0h1GYUj5TYHCyX6?=
 =?us-ascii?q?Q75jwgDIKmDIHDRp2igbCb3Se7GIFWaX5CClyWDXjocICEUe8WaC2OOs9hjiAE?=
 =?us-ascii?q?Vb+5RoA7zhGutAj6y7l9IurO4CIYt4nu1Nx05+3ViBEz+iZ4D8Wb02GRUW50mn?=
 =?us-ascii?q?kESCMx3KB6uUZ90EuM0bBkg/xEEtxe//BJXR08NZLGy+x6Csr9WgTOftqSTFam?=
 =?us-ascii?q?Q9OmASw+T94rwt8OZVp9FMumjhzZwyWqBLoVnaSRBJMo6qLcw2TxJ8Flxnnbzq?=
 =?us-ascii?q?YhkUcpTtFPNWK8gK5/7BbcB4jOn0WdlKaqcKAc0TXJ9GeCy2qOoU5ZXBRxUaXD?=
 =?us-ascii?q?QXAQeE/Woc7l6UPFSr+kEa4nPRdZyc6eNqtKbcXkgkhcS/f9JtvSeWKxlH22BR?=
 =?us-ascii?q?aT2LyMapHne2Ec3CXbFUgFnBof/XeANQgiGCihp3jSAyBpFVLqe0ns6/VxqGun?=
 =?us-ascii?q?Tk8oyAGHd1Fh17uw+h4SmfycS/MS0qgYuCs7rDV0BlK939PQC9qPvAdheKRcYd?=
 =?us-ascii?q?Ug4FZIz27Ztgp9PoC+IKBmnFIRbwN3v0b23RVtFopAidQqrG8tzAdqM62Y1E1O?=
 =?us-ascii?q?djyG0pHwILHYMXTy8w21ZK7Q2VHe18iW97wL6PQ5rVXjoQ6oGlAj83Vhz9lazX?=
 =?us-ascii?q?+c6o/WAwoVVJL7Slw3+ARip7HGfik94JvZ1H1xMaWurjDOwdMoBOs/xRamcNdS?=
 =?us-ascii?q?K6eEFA70E80HCMmiMu0qm161bh0aOOBe7rI7P8Sjd/Gewq6kIP5gnC66jWRA+I?=
 =?us-ascii?q?19yEOM+DZmRe7SwpkFxOuU3g2ZWDfmjVetq9z4lppAZT4PAGW/0y/kBIhKa612?=
 =?us-ascii?q?fIYLD3quIsKtytV/gZ7tR2BX9Fq5C1wa38+pfAKYb0bh0g1IyUQXvXunlDO4zj?=
 =?us-ascii?q?x1iT0orrCT3DfTw+TkbxcHPm9LRG9/jVbjO4S0jtYaXFS2YAgtjheq+UH6x61D?=
 =?us-ascii?q?rqRlM2bTWVtIfzTxL2x6UKu/rKCCY81M6JMvqylXS/6zYVOZSr78pRsVzSXjEn?=
 =?us-ascii?q?BaxDA6cTGqp5r4kwZ7iGKbMHZ8sn7ZddtsyhfY4dzWXeRR0SYeRClklTnXAUCx?=
 =?us-ascii?q?Ptmz8tWTjZvDsOG+V2S6W51XcCnry56AtSSh6W1rBx2/g+68mtn9HQcm1i/70s?=
 =?us-ascii?q?FgVT/Uoxbkfonry6O6PPpkfkZyBV/w8cp6GpxknYs2i5EdwnwahpST/Xoanmb/?=
 =?us-ascii?q?K9Rb2aTibHUTQT4H2cLa4A/g2Ed7NHKG25r5VmmBwstmf9S6Z2IW2iEn4MxQBq?=
 =?us-ascii?q?ab8qdEnTdrrVqitg3ef+J9njgGxPsq6X4ahfwJuQU3wiWcBLASAVdXPSj2mxuU?=
 =?us-ascii?q?6NC+qb1dZHyzfrioyEp+gdehAameogFbXXb1YJYjEjV27sViK1LMy3zz55rgeN?=
 =?us-ascii?q?nRa9ITqxKVnw3Bj+hTNJI+iP4KiTB7NmL6uH0v0/Q7ggB23ZGmoIiHLH1g87mj?=
 =?us-ascii?q?DR5fMj31etkf+jXwjatFmsaW3oavHohuGzkRXZvoS+6oHywWtfj9KwmOFzg8oG?=
 =?us-ascii?q?+BGbXDBQ+f9Ftmr3XXHpCpLX6XIWcWzc54SBmBPkBfgx0UXDYnnp4/DA+q39fs?=
 =?us-ascii?q?cEN45jAX+175pQFAyuNuNxnjTGjfoB2kZSszSJiaNBBW9B1N51/JMcyC6eJ+By?=
 =?us-ascii?q?FZ/pq8rAyUN2yUfQJIAXsSWkyDAVDjMaKj5d3B8+ieG+q/IOHCYbSIqexCSfiI?=
 =?us-ascii?q?wYij3Zdh/zaJLs+PJGVtD+Un2kpfWnB0A8TZlCsOSywUlCLNbtSXpBSm+i1woc?=
 =?us-ascii?q?Cw7u7rWB/05YaUD7tSMNNv+w25gKuZNu6Qgjp5Jihc1p8W2XDIz70f1kYIiy5y?=
 =?us-ascii?q?bzmtDagAtSnVQa3Kh69YFAQbZD1zNcdS66I83xJAOcraitPzy755geQ5C1ZDVV?=
 =?us-ascii?q?z9hM6pYdYGLH26NFPCHEyLLqiJJSXXw8HrZqOxUaFQjORRtxGqpTmXCVPsPjSd?=
 =?us-ascii?q?mDnvTB2vNeBMjCeGPB1Roo29cxBtCXT9Q9LicBG0LNh3jTguy70umnzKLXIcMS?=
 =?us-ascii?q?R7c05Vrryf9yVYgvB+G2xH9nVkLOmElDyf7+nXMZsWtfprAiJpl+NV+ng6yr1V?=
 =?us-ascii?q?7D1aS/xxgifdstluo1T12tWInz1jXRVmsDtHhIuX+05lPOGR7J5bRXvI4DoC6m?=
 =?us-ascii?q?KcDhUR4dx/BZmnvqFWxd/njq//KD5etdnT+JgyHc/Rfe+DLns7OFLKGDfeDREC?=
 =?us-ascii?q?UzfjYWXegUFFivCU6nCPhpE+tpztnoceDLhBWwpmRbshFk15EYlac99MVTQ+nO?=
 =?us-ascii?q?vDgQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AFAADk9Plbh0O0hNFiGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUQYBAQELAYFaghEnjBFfiyFSBoFJiQaEaoRBhHeBcS4TAYhaIjQJDQE?=
 =?us-ascii?q?DAQEBAQEBAgETAQEBCA0JCCkvgjYigmUDAwECJBM/BgkBASslAwwdKwcSBYJRS?=
 =?us-ascii?q?4F1DQQBpTMzihqMCRd4gQeOfAKPXJAmCZEkIwqKL4ZPLJlKgg1NMIMvgicXEo4?=
 =?us-ascii?q?LPzKBAgMBASETjCoBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AFAADk9Plbh0O0hNFiGwEBAQEDAQEBBwMBAQGBUQYBAQE?=
 =?us-ascii?q?LAYFaghEnjBFfiyFSBoFJiQaEaoRBhHeBcS4TAYhaIjQJDQEDAQEBAQEBAgETA?=
 =?us-ascii?q?QEBCA0JCCkvgjYigmUDAwECJBM/BgkBASslAwwdKwcSBYJRS4F1DQQBpTMzihq?=
 =?us-ascii?q?MCRd4gQeOfAKPXJAmCZEkIwqKL4ZPLJlKgg1NMIMvgicXEo4LPzKBAgMBASETj?=
 =?us-ascii?q?CoBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,276,1539673200"; 
   d="scan'208";a="63811294"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 24 Nov 2018 17:09:41 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727003AbeKYL7Z (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sun, 25 Nov 2018 06:59:25 -0500
Received: from air.basealt.ru ([194.107.17.39]:59392 "EHLO air.basealt.ru"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726400AbeKYL7Y (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Sun, 25 Nov 2018 06:59:24 -0500
Received: by air.basealt.ru (Postfix, from userid 490)
        id 27488589AE9; Sun, 25 Nov 2018 01:09:35 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.4.1 (2015-04-28) on
        sa.local.altlinux.org
X-Spam-Level: 
X-Spam-Status: No, score=-2.9 required=5.0 tests=ALL_TRUSTED,BAYES_00
        autolearn=ham autolearn_force=no version=3.4.1
Received: from akathisia (broadband-46-188-15-144.2com.net [46.188.15.144])
        by air.basealt.ru (Postfix) with ESMTPSA id 49FE0589AE8;
        Sun, 25 Nov 2018 01:09:33 +0000 (UTC)
Date: Sun, 25 Nov 2018 02:09:32 +0100
From: Elvira Khabirova <lineprinter@altlinux.org>
To: oleg@redhat.com, rostedt@goodmis.org, mingo@redhat.com
Cc: linux-kernel@vger.kernel.org, ldv@altlinux.org, esyr@redhat.com,
        luto@kernel.org, strace-devel@lists.strace.io
Subject: [RFC PATCH v3 3/3] ptrace: add PTRACE_EVENT_SECCOMP support to
 PTRACE_GET_SYSCALL_INFO
Message-ID: <20181125020932.054e05a6@akathisia>
In-Reply-To: <20181125020659.785c7b29@akathisia>
References: <20181125020659.785c7b29@akathisia>
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Extend PTRACE_GET_SYSCALL_INFO to support PTRACE_EVENT_SECCOMP stops.
The information returned is the same as for syscall-enter-stops.

Signed-off-by: Elvira Khabirova <lineprinter@altlinux.org>
Signed-off-by: Dmitry V. Levin <ldv@altlinux.org>
---
 include/linux/ptrace.h    | 1 +
 include/linux/sched.h     | 1 +
 include/linux/tracehook.h | 1 +
 kernel/ptrace.c           | 7 +++++--
 4 files changed, 8 insertions(+), 2 deletions(-)

diff --git a/include/linux/ptrace.h b/include/linux/ptrace.h
index 6c2ffed907f5..a993d0fde865 100644
--- a/include/linux/ptrace.h
+++ b/include/linux/ptrace.h
@@ -166,6 +166,7 @@ static inline void ptrace_event(int event, unsigned long message)
 {
 	if (unlikely(ptrace_event_enabled(current, event))) {
 		current->ptrace_message = message;
+		current->ptrace_event = event;
 		ptrace_notify((event << 8) | SIGTRAP);
 	} else if (event == PTRACE_EVENT_EXEC) {
 		/* legacy EXEC report via SIGTRAP */
diff --git a/include/linux/sched.h b/include/linux/sched.h
index a51c13c2b1a0..86215fb654d6 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -964,6 +964,7 @@ struct task_struct {
 
 	/* Ptrace state: */
 	unsigned long			ptrace_message;
+	int				ptrace_event;
 	kernel_siginfo_t		*last_siginfo;
 
 	struct task_io_accounting	ioac;
diff --git a/include/linux/tracehook.h b/include/linux/tracehook.h
index 633a83fe7051..5d2e5aa07a5c 100644
--- a/include/linux/tracehook.h
+++ b/include/linux/tracehook.h
@@ -66,6 +66,7 @@ static inline int ptrace_report_syscall(struct pt_regs *regs,
 		return 0;
 
 	current->ptrace_message = message;
+	current->ptrace_event = 0;
 	ptrace_notify(SIGTRAP | ((ptrace & PT_TRACESYSGOOD) ? 0x80 : 0));
 
 	/*
diff --git a/kernel/ptrace.c b/kernel/ptrace.c
index 92c47cd5ad84..74a37e74c7f1 100644
--- a/kernel/ptrace.c
+++ b/kernel/ptrace.c
@@ -904,7 +904,9 @@ static int ptrace_get_syscall(struct task_struct *child,
 	unsigned long actual_size;
 	unsigned long write_size;
 
-	if (child->ptrace_message == PTRACE_EVENTMSG_SYSCALL_ENTRY) {
+	if ((child->ptrace_event == 0 &&
+	     child->ptrace_message == PTRACE_EVENTMSG_SYSCALL_ENTRY) ||
+	    child->ptrace_event == PTRACE_EVENT_SECCOMP) {
 		int i;
 
 		info.op = PTRACE_SYSCALL_INFO_ENTRY;
@@ -917,7 +919,8 @@ static int ptrace_get_syscall(struct task_struct *child,
 		for (i = 0; i < ARRAY_SIZE(args); i++)
 			info.entry.args[i] = args[i];
 		actual_size = offsetofend(struct ptrace_syscall_info, entry);
-	} else if (child->ptrace_message == PTRACE_EVENTMSG_SYSCALL_EXIT) {
+	} else if (child->ptrace_event == 0 &&
+		   child->ptrace_message == PTRACE_EVENTMSG_SYSCALL_EXIT) {
 		info.op = PTRACE_SYSCALL_INFO_EXIT;
 		info.arch = syscall_get_arch(child);
 		info.exit.rval = syscall_get_error(child, regs);
-- 
2.19.1

