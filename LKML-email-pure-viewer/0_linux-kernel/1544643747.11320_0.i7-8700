Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  12 Dec 2018 19:42:27 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id E214B5803DC;
	Wed, 12 Dec 2018 00:11:04 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga006-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 12 Dec 2018 00:11:04 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AI2AyGxGPz9MrU6A3FDTgCJ1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75o8S4bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJWSJPAp2y?=
 =?us-ascii?q?YZYMAeoPMulXs5TyqFkAohu/HgmsHOHixyRUhnPqx6A2z/gtHBvY0AEmAtkAsG?=
 =?us-ascii?q?7UrNLwNKoKT+21zLPHzTLeZP1Wwzj97pXDfxcvof6WW7J/bdDdyUcpFwPeklWd?=
 =?us-ascii?q?spDqPzWP2uQDrmib7etgVf60i246sQ1+vj+vxsI1h4TPm4kbyUjE+D1nzIopId?=
 =?us-ascii?q?C0UlN3bNC6HJdKqi2XNJd6TtkjTmxqoCo216EKtYSmcCULypkr3QDTZ+KHfoSS?=
 =?us-ascii?q?4h/uVf6dLSp7iX9rYr6ygwu+/VK9xuD8VcS4yktGoyRbntTKq3sDzQbc6tKdRf?=
 =?us-ascii?q?t45kqh2SiA1wTU6uxcP0A0mrTUK4Q7zr4ziJUTq0LDETHymEnsi6+WbEok9vCp?=
 =?us-ascii?q?6+ThfLrmuoeRO5Fohgz6KKgih8KyDfoiPgQTXGWX5f6w2bzh8EHhRbVFlPw2kq?=
 =?us-ascii?q?3XsJDAIsQbo7a0AwtU0oYl9ha+AC6q0NcGknkdKlJKZhaHg5HuO1DAJvD3E+2/?=
 =?us-ascii?q?jk+ykDdk2f/GJKftApbTIXjZlrfuY7J951RbyAopwtBT/4hUBa0ZIPLvRk/xs8?=
 =?us-ascii?q?TVDhs4Mwy33enrEtp81p4FVGKLA6+ZNr7SsFCS6uIuJemMeJEauDLnJ/c54P7u?=
 =?us-ascii?q?iGczmUUBcqmxwZsXdHe4E+xmI0qDYHrsns0OEWAQsgo+UezlkluCUTFIana2Xq?=
 =?us-ascii?q?I84Cw7CY28AYfCQICtnKKO3COhEpJKYWBGD0iGEW30eIWcR/cMdCWSL9djkjwD?=
 =?us-ascii?q?S7etUYwh1RaotA/8zLpqNe7U+iwetZL+29l5/ezTlRcu9TNqC8SRyX2CT2Zxnm?=
 =?us-ascii?q?kQXT85wLh/oVBhyleEyaV3medYFdxU5/NKSAs6L4TTz+5hBtD2WwLBeMqJSVm8?=
 =?us-ascii?q?TtWnBzExUsw+w9sUb0lhHNWiiwjJ3zC2DL8Ni7yLGJs0/7rf33frIcZx0XLG1K?=
 =?us-ascii?q?g7gFkgTctCLmmmhq959wjOCI/FiUSZl6C2dasC2C7B7nuMzW2LvEtASg5/Tb3F?=
 =?us-ascii?q?XWwDZkvRtdn2+1nNT6GwBrg9MgtO08iCKrBUZd3villGQPTjONHaY2+qn2ewBB?=
 =?us-ascii?q?CIxq6DbYbwemUd2jndB1YAkwwJ4XmGMg0+DD+7o23CFDxuCU7vY0T0/OZjsny7?=
 =?us-ascii?q?UFE7wxuKb0J70bq14QAahfqHRvMX37IEvjohqjpuEFa82dLWF8SPpw57cKpAZt?=
 =?us-ascii?q?M95U9N1XjFuAxlIpygM6dii0YCcwR2ukPu0Al3CoVAkMQwsHMm1g1yKbic0FNA?=
 =?us-ascii?q?cTOY0ov9OrnWKmn04RCuZLTa2lDY0NaK5KgP7O40pEnkvAGsDkAi6Wlo08FJ03?=
 =?us-ascii?q?uA4ZXHFBAdUZbvXUc46Rd7p6vWbTIg54zJz3JsN6q0sjjc298yAOslyxCgf8pQ?=
 =?us-ascii?q?Ma+eFQ/yFdEaCNaqKOAwh1epaRcENvhI9KEoJ8Oma+eG2KmzMedggTKql3hI7J?=
 =?us-ascii?q?p800KM7SV8TOHI0o0Bw/GZ2AuHSjj9gE2gssDxhYBLezUSEnCjxijjAY5bfrdy?=
 =?us-ascii?q?cpoTCWeyP823wc1zh4TsW3FE7lGjHU4J2MizdRqUcVP9xwxQ2V0LrnO9nSu30i?=
 =?us-ascii?q?J7kysurqqZxyHOx+XidBwaOm9EXmVijFHsIZSqgNAeRkSncw8plB6970bg26db?=
 =?us-ascii?q?vLh/L3XUQUpQfyn2LntuU6uqurqZfs5P7oglsSFWUOS6fFCbRaTxoxoc0yP/AW?=
 =?us-ascii?q?RewCo3eC2tupX8hxZ6kn6SLG5vrHrFfsF93RXf68bGRf5S3ToGQzN0iSLNCVi/?=
 =?us-ascii?q?PNmp/NOUmInFsu2lU2KhV5tTcTTkzI+atSu743FqDgO7n/yphtLnFg062zfh19?=
 =?us-ascii?q?Z2TSXIsAr8Yo7z2qW6K+1neVNkBF3968p8AYx+loowhJcN2XkVnJmV/HwHkXvt?=
 =?us-ascii?q?PtVfw67xcH0NRTsTyd7P/AflwFFjLm6Ox4/hVXWS2Mpha8O6YmMLwC096c9KBb?=
 =?us-ascii?q?yQ7LxFmyt1v1W5oRjQYfh7gjcS1/8u5GQGjOEOvQon1j+dDawKHUlEISzskAyF?=
 =?us-ascii?q?79W/rKVUfmmja7ax21RlndC9Er6CuBpTV2jjepctBiJw6sR/MFTR0Hz88I3ked?=
 =?us-ascii?q?/Qbc4NuR2QiRvPk+9VKJcpnPoQmSVnIX79vWEiy+MjkRxu2pS6sJKGKmp3+qK5?=
 =?us-ascii?q?HwVYNib0Z84I/jHtjKBentuZ3oy1H5VhHCkLU4XsTf6yDD0SsvHnPR6UEDIgsn?=
 =?us-ascii?q?ebBabfHQiH5Uh9tX3PFJSrN2yNKHkd0NVvXx2dJE1ZgAAJUzQ2hJ85Fga2xMP/?=
 =?us-ascii?q?dEd1/Cwe5ln9qhFU0OJnKwH/UnvDpAevcjo0SoKQLB9I4QFZ/UvVLdaS7uFuHy?=
 =?us-ascii?q?Fb452hqhaCKneAagRMDGEJXFGEBl/5Mrmv49nA7/aXBu6kI/TSZrWOrPRUV+2U?=
 =?us-ascii?q?ypK3zotm4zGMO92PP3llEv07w1dDUmp/G8jDgDUPTCoXly3WYs6fpRe8/DB3r8?=
 =?us-ascii?q?+l/PTqXgLv+ZWAC79IPdpz/BC2hL+JN/SMiyZhNTZYypQMyGfIyLcB3V4SiCJu?=
 =?us-ascii?q?dzi3HbQDry7NS63QlbFNDx4GcCN+L89I76M63glQNs/XkNL11rhkjvErD1dJT0?=
 =?us-ascii?q?DumsasZcYSOWGyKEvHBFqXNLSBPTDE2dz3brimSbJOjORYrRmwuTeAHk/nPzSD?=
 =?us-ascii?q?kSTpVh+1PeFNiiGbIAJRuIWnfhlxDmjjScrsagenP99vkT023bo0i2vWNW4dND?=
 =?us-ascii?q?hwaV9CoqeM4iNYnPp/HXdM7n5kLemChiaY4PPUKpcQsft3HCt0k/hW72g9y7tQ?=
 =?us-ascii?q?9CtEXuB6mDPOrt5ypFGriumOxSBhUBpLqzZLgpqEvERiOarD8JlAVm3J/BYM7W?=
 =?us-ascii?q?WWFhQLqMFpCtzpu6BM1NfPkLj/JytF89LRroMgAJ3+IcWeLXMneTrkUGreDAYt?=
 =?us-ascii?q?VzOnNWjDwUdalafB2GeSq80RqpHr0LQHTPcPWlUzHbUUDF95NNcEZplqXDI4iq?=
 =?us-ascii?q?Pdh8kNsynt5CLNTdlX68iUHsmZBu/ifXPA1eFJ?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ACAADZwRBch0O0hNFkGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUwIBAQEBAQsBg1kSJwqYHIINFGiWV4FzFBgTAYc4IjYHDQE?=
 =?us-ascii?q?DAQEBAQEBAgETAQEBCA0JCCkvgjYkAYJhAQEBAQIBAQI3PwYJAQEKDgoJFRADD?=
 =?us-ascii?q?AVJDgUFgxyBegcBBacGGgKKFIJ+iT6CFoERgXBtNYg2giYCiy6FEpBHBwKGSos?=
 =?us-ascii?q?AI4oNA4c0LJkNgU0CggUzGiODPIJQjhgyAQExAYEEAQGMCIEfAQE?=
X-IPAS-Result: =?us-ascii?q?A0ACAADZwRBch0O0hNFkGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUwIBAQEBAQsBg1kSJwqYHIINFGiWV4FzFBgTAYc4IjYHDQEDAQEBAQEBAgETA?=
 =?us-ascii?q?QEBCA0JCCkvgjYkAYJhAQEBAQIBAQI3PwYJAQEKDgoJFRADDAVJDgUFgxyBegc?=
 =?us-ascii?q?BBacGGgKKFIJ+iT6CFoERgXBtNYg2giYCiy6FEpBHBwKGSosAI4oNA4c0LJkNg?=
 =?us-ascii?q?U0CggUzGiODPIJQjhgyAQExAYEEAQGMCIEfAQE?=
X-IronPort-AV: E=Sophos;i="5.56,343,1539673200"; 
   d="scan'208";a="56002323"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 12 Dec 2018 00:11:03 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726711AbeLLILA (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 12 Dec 2018 03:11:00 -0500
Received: from mail.cn.fujitsu.com ([183.91.158.132]:14882 "EHLO
        heian.cn.fujitsu.com" rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org
        with ESMTP id S1726007AbeLLIK7 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 12 Dec 2018 03:10:59 -0500
X-IronPort-AV: E=Sophos;i="5.56,343,1539619200"; 
   d="scan'208";a="49588356"
Received: from unknown (HELO cn.fujitsu.com) ([10.167.33.5])
  by heian.cn.fujitsu.com with ESMTP; 12 Dec 2018 16:10:57 +0800
Received: from G08CNEXCHPEKD01.g08.fujitsu.local (unknown [10.167.33.80])
        by cn.fujitsu.com (Postfix) with ESMTP id 06C704B734D9;
        Wed, 12 Dec 2018 16:10:58 +0800 (CST)
Received: from localhost.localdomain (10.167.225.56) by
 G08CNEXCHPEKD01.g08.fujitsu.local (10.167.33.89) with Microsoft SMTP Server
 (TLS) id 14.3.408.0; Wed, 12 Dec 2018 16:11:03 +0800
Date: Wed, 12 Dec 2018 16:10:32 +0800
From: Chao Fan <fanc.fnst@cn.fujitsu.com>
To: Baoquan He <bhe@redhat.com>
CC: <linux-kernel@vger.kernel.org>, <x86@kernel.org>, <bp@alien8.de>,
        <tglx@linutronix.de>, <mingo@redhat.com>, <hpa@zytor.com>,
        <keescook@chromium.org>, <msys.mizuma@gmail.com>,
        <indou.takao@jp.fujitsu.com>, <caoj.fnst@cn.fujitsu.com>
Subject: Re: [PATCH v13 1/6] x86/boot: Introduce kstrtoull() to boot
 directory instead of simple_strtoull()
Message-ID: <20181212081032.GA24409@localhost.localdomain>
References: <20181212031053.1815-1-fanc.fnst@cn.fujitsu.com>
 <20181212031053.1815-2-fanc.fnst@cn.fujitsu.com>
 <20181212074615.GO17340@MiWiFi-R3L-srv>
MIME-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Content-Disposition: inline
In-Reply-To: <20181212074615.GO17340@MiWiFi-R3L-srv>
User-Agent: Mutt/1.10.1 (2018-07-13)
X-Originating-IP: [10.167.225.56]
X-yoursite-MailScanner-ID: 06C704B734D9.AC9C6
X-yoursite-MailScanner: Found to be clean
X-yoursite-MailScanner-From: fanc.fnst@cn.fujitsu.com
X-Spam-Status: No
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Wed, Dec 12, 2018 at 03:46:15PM +0800, Baoquan He wrote:
>On 12/12/18 at 11:10am, Chao Fan wrote:
>> Introduce kstrtoull() from lib/kstrtox.c to boot directory so that code
>
>It's not introducing kstrtoull(), just copying kstrtoull() from
>lib/kstrtox.c to boot.

Oops, maybe I misunderstand 'introduce'.

Thanks,
Chao Fan

>
>> in boot/ can use kstrtoull() and the old simple_strtoull() can be
>> replaced.
>> 
>> Signed-off-by: Chao Fan <fanc.fnst@cn.fujitsu.com>
>> ---
>>  arch/x86/boot/string.c | 137 +++++++++++++++++++++++++++++++++++++++++
>>  arch/x86/boot/string.h |   2 +
>>  2 files changed, 139 insertions(+)
>> 
>> diff --git a/arch/x86/boot/string.c b/arch/x86/boot/string.c
>> index c4428a176973..e02405f20f98 100644
>> --- a/arch/x86/boot/string.c
>> +++ b/arch/x86/boot/string.c
>> @@ -12,7 +12,10 @@
>>   * Very basic string functions
>>   */
>>  
>> +#define _LINUX_CTYPE_H
>>  #include <linux/types.h>
>> +#include <linux/kernel.h>
>> +#include <linux/errno.h>
>>  #include <asm/asm.h>
>>  #include "ctype.h"
>>  #include "string.h"
>> @@ -187,3 +190,137 @@ char *strchr(const char *s, int c)
>>  			return NULL;
>>  	return (char *)s;
>>  }
>> +
>> +static inline u64 div_u64_rem(u64 dividend, u32 divisor, u32 *remainder)
>> +{
>> +	union {
>> +		u64 v64;
>> +		u32 v32[2];
>> +	} d = { dividend };
>> +	u32 upper;
>> +
>> +	upper = d.v32[1];
>> +	d.v32[1] = 0;
>> +	if (upper >= divisor) {
>> +		d.v32[1] = upper / divisor;
>> +		upper %= divisor;
>> +	}
>> +	asm ("divl %2" : "=a" (d.v32[0]), "=d" (*remainder) :
>> +		"rm" (divisor), "0" (d.v32[0]), "1" (upper));
>> +	return d.v64;
>> +}
>> +
>> +static inline u64 div_u64(u64 dividend, u32 divisor)
>> +{
>> +	u32 remainder;
>> +	return div_u64_rem(dividend, divisor, &remainder);
>> +}
>> +
>> +static inline char _tolower(const char c)
>> +{
>> +	return c | 0x20;
>> +}
>> +
>> +const char *_parse_integer_fixup_radix(const char *s, unsigned int *base)
>> +{
>> +	if (*base == 0) {
>> +		if (s[0] == '0') {
>> +			if (_tolower(s[1]) == 'x' && isxdigit(s[2]))
>> +				*base = 16;
>> +			else
>> +				*base = 8;
>> +		} else
>> +			*base = 10;
>> +	}
>> +	if (*base == 16 && s[0] == '0' && _tolower(s[1]) == 'x')
>> +		s += 2;
>> +	return s;
>> +}
>> +
>> +/*
>> + * Convert non-negative integer string representation in explicitly given radix
>> + * to an integer.
>> + * Return number of characters consumed maybe or-ed with overflow bit.
>> + * If overflow occurs, result integer (incorrect) is still returned.
>> + *
>> + * Don't you dare use this function.
>> + */
>> +unsigned int _parse_integer(const char *s, unsigned int base, unsigned long long *p)
>> +{
>> +	unsigned long long res;
>> +	unsigned int rv;
>> +
>> +	res = 0;
>> +	rv = 0;
>> +	while (1) {
>> +		unsigned int c = *s;
>> +		unsigned int lc = c | 0x20; /* don't tolower() this line */
>> +		unsigned int val;
>> +
>> +		if ('0' <= c && c <= '9')
>> +			val = c - '0';
>> +		else if ('a' <= lc && lc <= 'f')
>> +			val = lc - 'a' + 10;
>> +		else
>> +			break;
>> +
>> +		if (val >= base)
>> +			break;
>> +		/*
>> +		 * Check for overflow only if we are within range of
>> +		 * it in the max base we support (16)
>> +		 */
>> +		if (unlikely(res & (~0ull << 60))) {
>> +			if (res > div_u64(ULLONG_MAX - val, base))
>> +				rv |= KSTRTOX_OVERFLOW;
>> +		}
>> +		res = res * base + val;
>> +		rv++;
>> +		s++;
>> +	}
>> +	*p = res;
>> +	return rv;
>> +}
>> +
>> +static int _kstrtoull(const char *s, unsigned int base, unsigned long long *res)
>> +{
>> +	unsigned long long _res;
>> +	unsigned int rv;
>> +
>> +	s = _parse_integer_fixup_radix(s, &base);
>> +	rv = _parse_integer(s, base, &_res);
>> +	if (rv & KSTRTOX_OVERFLOW)
>> +		return -ERANGE;
>> +	if (rv == 0)
>> +		return -EINVAL;
>> +	s += rv;
>> +	if (*s == '\n')
>> +		s++;
>> +	if (*s)
>> +		return -EINVAL;
>> +	*res = _res;
>> +	return 0;
>> +}
>> +
>> +/**
>> + * kstrtoull - convert a string to an unsigned long long
>> + * @s: The start of the string. The string must be null-terminated, and may also
>> + *  include a single newline before its terminating null. The first character
>> + *  may also be a plus sign, but not a minus sign.
>> + * @base: The number base to use. The maximum supported base is 16. If base is
>> + *  given as 0, then the base of the string is automatically detected with the
>> + *  conventional semantics - If it begins with 0x the number will be parsed as a
>> + *  hexadecimal (case insensitive), if it otherwise begins with 0, it will be
>> + *  parsed as an octal number. Otherwise it will be parsed as a decimal.
>> + * @res: Where to write the result of the conversion on success.
>> + *
>> + * Returns 0 on success, -ERANGE on overflow and -EINVAL on parsing error.
>> + * Used as a replacement for the obsolete simple_strtoull. Return code must
>> + * be checked.
>> + */
>> +int kstrtoull(const char *s, unsigned int base, unsigned long long *res)
>> +{
>> +	if (s[0] == '+')
>> +		s++;
>> +	return _kstrtoull(s, base, res);
>> +}
>> diff --git a/arch/x86/boot/string.h b/arch/x86/boot/string.h
>> index 3d78e27077f4..171007c99acc 100644
>> --- a/arch/x86/boot/string.h
>> +++ b/arch/x86/boot/string.h
>> @@ -29,4 +29,6 @@ extern unsigned int atou(const char *s);
>>  extern unsigned long long simple_strtoull(const char *cp, char **endp,
>>  					  unsigned int base);
>>  
>> +int kstrtoull(const char *s, unsigned int base, unsigned long long *res);
>> +#define KSTRTOX_OVERFLOW       (1U << 31)
>>  #endif /* BOOT_STRING_H */
>> -- 
>> 2.19.2
>> 
>> 
>> 
>
>


