Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:44:03 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga008.fm.intel.com (fmsmga008.fm.intel.com [10.253.24.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id DE08958014B;
	Thu,  6 Dec 2018 02:37:54 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by fmsmga008-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 02:37:54 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AWq4mFhYIlw1M3GEdsSyBmHb/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpciyYR7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyJPDIOi?=
 =?us-ascii?q?YYUSDOQBM+lXoJXgqFQMoxS+BBKsBPvtxzJTmn/6wbc33/g9HQzcwgAtGc8Fvn?=
 =?us-ascii?q?TOrNXyMacfSf64zKnSwjXEcvhY2S3y6I7VeR0mr/GDR7RwftbLxUkhEQPFlUmQ?=
 =?us-ascii?q?pJf5MDOTzOgNvXWb7+hhVeKzkG4ntht9rSSoxscpk4TEgJ8exFPc9Shh3oo5Od?=
 =?us-ascii?q?m1RFRmbdOqDpdcrTyWOohqTs84Qmxluj42xqAatZKhYSQHyZYqywTBZ/CZc4WE?=
 =?us-ascii?q?+BLuWeeJLTtlh39odqizihKv/US61+HxVsq53ExXoidLjNXBsG0G2QbJ5cidUP?=
 =?us-ascii?q?R9+1+s2TaR2ADX7eFJOV40laXFJJ472LIwlYQcsV7FHiDonEX6lqiWdl8r+uSw?=
 =?us-ascii?q?6uTnZKvppoOEOoNqlg3zNr4iltGxDOgmKAQCQmuW9fim2LDi/0D1WLBKgec3kq?=
 =?us-ascii?q?ndvpDaP8MbpquhDg9R04Yj7Qu/Dji/3NQbg3YHNlRFdwyDj4TwPFHPLvb4Auml?=
 =?us-ascii?q?g1m3jjdryO7JPqf7DpXOMHfDirHhcqh560JGzwoz199f64pOCr4dOPLzRlPxtN?=
 =?us-ascii?q?vAAx89Mgy0wPjoBM9y14MDQm+PBq6ZMKXPsV6H/O4vIu+MZJMLtzb5MfQq+/nu?=
 =?us-ascii?q?jXohk18HYaapxYcXaGy/Hvl+I0WWe3vsgssbHmcNpAY+TPHqh0eEUT5cfHuyW6?=
 =?us-ascii?q?M85jcmCIOpF4vDR4atgKCf0ye/BJFZemdGClWUG3fya4qEQ+sMaD6VIsJ5kDwE?=
 =?us-ascii?q?UqauR5Ui1RGpsg/6zb1nI/HQ+i0Zs5Ljydd06/fSlRE06Tx7EcCd33uRQGFzm2?=
 =?us-ascii?q?MCXyU207xnoUxh1leD1rB1jOZDFdxT4PNJUR02NYTGwOx4EN3yXgPBftGUSFep?=
 =?us-ascii?q?WNmmADcxTs4vzN8KeUpyB9KijhXb1SqwH7AVj6CLBIAz8q/E3Hj+PcB9x2zC1K?=
 =?us-ascii?q?kglVYmRMRPOHaihq5+8QjTGoHIn1+Yl6asaaQTwirN+H2fwmqJuUFSSBRwXrnd?=
 =?us-ascii?q?XXADekvWqsz06V7YQL+wF7srKAtBxtSEKqtRdNLpi1JKRPPgONTbZ2K8gGOwBR?=
 =?us-ascii?q?eOxrORY4vmYWQd3CPBCEcalwAf52qJNQ87Bi25uWLRECRuFU7zY0Pr6eRxtWm0?=
 =?us-ascii?q?TlEqwA2Qb01uzby1+gULivyaUP4T2rMEuCE8qzR7Blq93tTWC8aeqAplZqlTfd?=
 =?us-ascii?q?Q94FJf32LDqwN9JoCgL7xlhlMGbwR3vkbu1xJrCoVAkckmtm8qwBB1KaKC1FNB?=
 =?us-ascii?q?djWY3Z/rN73TK2ny+g2vaqHM1lHf1taW5rkA6PAip1r/uwGpE1Io82973NlNz3?=
 =?us-ascii?q?uc+pLKARIIXpL1TEk2+AZ1prHAbiYm+oPbyGdjMa+3sj/FxdIkH+8lyhemf9dC?=
 =?us-ascii?q?P6KIDg7yE8sGB8ewLOwmgUSmbhUBPOpK7q47I9umd+ea2K6sJOthnC+mgX5b74?=
 =?us-ascii?q?xn00OM9zBzSujH35sex/GY3w2HVyrzjVu7s8D3n5xEai8WHmal1SfkA4tRbLVo?=
 =?us-ascii?q?fYkXEWeuP9G3xtJmip73Wn5X6ESsB0kb18+uYxaSaULy3RdR1UgOvXOogy+4wC?=
 =?us-ascii?q?FqnDEzqaqf2jfDw+DjdBoBJ25KS3NujVbqIYiokd8aWFKkYBQulBug/Uz63bRU?=
 =?us-ascii?q?pLxjL2nPRkdFZyj3L2B4XqqwrLaCeNNP6JUzvCVTUeS8Z02aS7Hnrxsb1SPjA3?=
 =?us-ascii?q?VRxDQhez62vZX5mgRwiHiBI3ZrsHrZZcZwyA/d5NPGX/5R3TkGRC5ihTnMHFe8?=
 =?us-ascii?q?PNqp/dSSl5jdtOCzTGahVpxVcSn2woKMriq75Wt2ARKhm/C/gMHoEQ8/0SXjzd?=
 =?us-ascii?q?llST3IrArgYonsz6m7Mfhofk5yCF/+6sp6HJpzko8xhJEWxHgbiY+Z/XsBkWfv?=
 =?us-ascii?q?L9pb3bjyY2YKRT4O29TV+hTq2FV/LnKVwIL0TnadzdFgZ9WgYmMWxzgy78ZFCK?=
 =?us-ascii?q?qP6LxEnC11oke3rA7LYPh9mCsdxuUq6HIAn+4Jvw8txD2HAr8OBUlYITDslxOQ?=
 =?us-ascii?q?4tC7raVXZ3ygfaK+1UVghtChEK+NohtHV3nnYJciEjR97sF+MFLKzX3y5ZvoeN?=
 =?us-ascii?q?jWbdIPqBKUlw3MgPRSKJI0jvAKnzZoOXrhvX05zO42lQBu3Za/vISdKmRi5qS5?=
 =?us-ascii?q?AgNDNj3uZsMe4TXtjadYnsaL0IGjBJRhGjMXXJT2SfKkCi4dtfPiNwyWCj0ztm?=
 =?us-ascii?q?+bGabDHQ+Y8EpptGjAE5evN3GKPnUZychiSQKZJExehgAUQTo7koQ4FgCs2Mzu?=
 =?us-ascii?q?bkN56ioN6V7/rxtG0vhoOAXnUmfDuAeobS85SJqFIxpT8A5C/F3ZMdCE4uJwAi?=
 =?us-ascii?q?FY/YChrAqXJWyAfAlICWAJWkqZB1HsJLWu5N/A8/SGCeq6NffBfbKOqelGXfeS?=
 =?us-ascii?q?2Z2vypdm/yqLNsiXPnhiCOA72lNeXX9jHcTVgS4PSysRlyLCdMOboBa8+itqrs?=
 =?us-ascii?q?Gw6vjrWQTv5ZeRBLtWK9lg5xe2gaKbPe6KmCl5MSpY1o8LxXLQyLgQwl8SiyJt?=
 =?us-ascii?q?dzmsC7gAtjTNTKXfmqBJFR4bdjhzOdBM76I92AlNJMHahsn01r5+kv46FVNFWU?=
 =?us-ascii?q?b9lcGuYMwAO3u9O0/fBEaXKLSGIiXGzNvqYaynU71fkuVVuwe0uTaaCELjOjWD?=
 =?us-ascii?q?lz/0VxGgK+1MjSebPABAt4G5aBpiFW/jTNf+YB2hLNB3lSE2waEzhn7SKW4cMD?=
 =?us-ascii?q?18f1lRobGK8SxYgutwG2pa43phLOmEnTuZ7ubCJpYXt/trHjp7l+ZA7HsmzLtV?=
 =?us-ascii?q?6TlOROZplyvKst5uv1amn/GPyzV9VhpOrzdLhISTskRjOaXW7J9AWXnf8RIJ7G?=
 =?us-ascii?q?WQDQkKptR/Bt3uvaBQ1sbAlKbpJDhe9NLU+JhUO8+BAsWdMWElOAShIDPIDwwb?=
 =?us-ascii?q?BWqhLUnWg01QlqHU+nDD/bYgrZ25s5oHTfd1XVp9Qv0TDE8jEtoZPL98WHUqjL?=
 =?us-ascii?q?yakNUVo3G5qU+CF41hopnbW6fKUr3UIzGDgOwBPkNQzA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ADAAAA+whch0O0hNFkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUwMBAQEBCwGDazGaN2iWUoIHKwGHViI2Bw0BAwEBAQEBAQIBEwE?=
 =?us-ascii?q?BAQgNCQgpL4I2JAGCYgMDAQI3PwYJAQEKDhMVEAMMBUkOCoMcggEBBacEGgKKD?=
 =?us-ascii?q?4J+iSCCFoERgXBtNYg2giYCiySFDpAtBwKGRIp3I4oFA4ctLJhfgUwBZYEhMxo?=
 =?us-ascii?q?jgz2CT44YMgEBgTYBAYlIgRwDAQE?=
X-IPAS-Result: =?us-ascii?q?A0ADAAAA+whch0O0hNFkGgEBAQEBAgEBAQEHAgEBAQGBUwM?=
 =?us-ascii?q?BAQEBCwGDazGaN2iWUoIHKwGHViI2Bw0BAwEBAQEBAQIBEwEBAQgNCQgpL4I2J?=
 =?us-ascii?q?AGCYgMDAQI3PwYJAQEKDhMVEAMMBUkOCoMcggEBBacEGgKKD4J+iSCCFoERgXB?=
 =?us-ascii?q?tNYg2giYCiySFDpAtBwKGRIp3I4oFA4ctLJhfgUwBZYEhMxojgz2CT44YMgEBg?=
 =?us-ascii?q?TYBAYlIgRwDAQE?=
X-IronPort-AV: E=Sophos;i="5.56,322,1539673200"; 
   d="scan'208";a="54784604"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 06 Dec 2018 02:37:53 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729500AbeLFKht (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 6 Dec 2018 05:37:49 -0500
Received: from mail.cn.fujitsu.com ([183.91.158.132]:23319 "EHLO
        heian.cn.fujitsu.com" rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org
        with ESMTP id S1727763AbeLFKhs (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 6 Dec 2018 05:37:48 -0500
X-IronPort-AV: E=Sophos;i="5.56,321,1539619200"; 
   d="scan'208";a="49118429"
Received: from unknown (HELO cn.fujitsu.com) ([10.167.33.5])
  by heian.cn.fujitsu.com with ESMTP; 06 Dec 2018 18:37:47 +0800
Received: from G08CNEXCHPEKD01.g08.fujitsu.local (unknown [10.167.33.80])
        by cn.fujitsu.com (Postfix) with ESMTP id C7E3B4B7349C;
        Thu,  6 Dec 2018 18:37:47 +0800 (CST)
Received: from localhost.localdomain (10.167.225.56) by
 G08CNEXCHPEKD01.g08.fujitsu.local (10.167.33.89) with Microsoft SMTP Server
 (TLS) id 14.3.408.0; Thu, 6 Dec 2018 18:37:54 +0800
Date: Thu, 6 Dec 2018 18:37:20 +0800
From: Chao Fan <fanc.fnst@cn.fujitsu.com>
To: Borislav Petkov <bp@alien8.de>
CC: Masayoshi Mizuma <msys.mizuma@gmail.com>,
        <linux-kernel@vger.kernel.org>, <x86@kernel.org>,
        <tglx@linutronix.de>, <mingo@redhat.com>, <hpa@zytor.com>,
        <keescook@chromium.org>, <bhe@redhat.com>,
        <indou.takao@jp.fujitsu.com>, <caoj.fnst@cn.fujitsu.com>
Subject: Re: [PATCH v12 1/5] x86/boot: Add get_acpi_rsdp() to parse RSDP in
 cmdline from KEXEC
Message-ID: <20181206103720.GA2046@localhost.localdomain>
References: <20181129081631.11139-1-fanc.fnst@cn.fujitsu.com>
 <20181129081631.11139-2-fanc.fnst@cn.fujitsu.com>
 <20181129211003.saxfvyboxpsn5mdr@gabell>
 <20181130024346.GB30941@localhost.localdomain>
 <20181130173515.6zx5wvs52s5aqnge@gabell>
 <20181201060539.GD30941@localhost.localdomain>
 <20181204184220.GC16705@zn.tnic>
MIME-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Content-Disposition: inline
In-Reply-To: <20181204184220.GC16705@zn.tnic>
User-Agent: Mutt/1.10.1 (2018-07-13)
X-Originating-IP: [10.167.225.56]
X-yoursite-MailScanner-ID: C7E3B4B7349C.ACA7B
X-yoursite-MailScanner: Found to be clean
X-yoursite-MailScanner-From: fanc.fnst@cn.fujitsu.com
X-Spam-Status: No
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi Boris, Baoquan and Masa,

When copying kstrtoull() and functions needed to arch/x86/boot/string.c,
I got an error in LD period:

  LD      arch/x86/boot/setup.elf
ld: arch/x86/boot/string.o: in function `div_u64_rem':
/home/cfan/code/tip/./include/linux/math64.h:28: undefined reference to `__udivdi3'
make[1]: *** [arch/x86/boot/Makefile:105: arch/x86/boot/setup.elf] Error 1
make: *** [arch/x86/Makefile:289: bzImage] Error 2

I google it and the key problem is div_u64(ULLONG_MAX - val, base))
when dividend is u64 and divisor is u32, the dividend must be a variable,
since the result will be stored in the first variable.
So here when I changed it to ((ULLONG_MAX - val) / base), I got the
same error.
But what puzzled me is, why the cdoe in lib/kstrtox.c works well.
And in old version PATCHSET, I ever copy the code to
arch/x86/boot/compressed/misc.c, it also worked well.

So I wonder if there are some options I miss or some problems.
The patch is below.

Thanks,
Chao Fan


diff --git a/arch/x86/boot/string.c b/arch/x86/boot/string.c
index c4428a176973..62ffe0437c8e 100644
--- a/arch/x86/boot/string.c
+++ b/arch/x86/boot/string.c
@@ -13,6 +13,9 @@
  */

 #include <linux/types.h>
+#include <linux/errno.h>
+#include <linux/kernel.h>
+#include <linux/math64.h>
 #include <asm/asm.h>
 #include "ctype.h"
 #include "string.h"
@@ -187,3 +190,112 @@ char *strchr(const char *s, int c)
                        return NULL;
        return (char *)s;
 }
+
+static inline char _tolower(const char c)
+{
+       return c | 0x20;
+}
+
+const char *_parse_integer_fixup_radix(const char *s, unsigned int *base)
+{
+       if (*base == 0) {
+               if (s[0] == '0') {
+                       if (_tolower(s[1]) == 'x' && isxdigit(s[2]))
+                               *base = 16;
+                       else
+                               *base = 8;
+               } else
+                       *base = 10;
+       }
+       if (*base == 16 && s[0] == '0' && _tolower(s[1]) == 'x')
+               s += 2;
+       return s;
+}
+
+/*
+ * Convert non-negative integer string representation in explicitly given radix
+ * to an integer.
+ * Return number of characters consumed maybe or-ed with overflow bit.
+ * If overflow occurs, result integer (incorrect) is still returned.
+ *
+ * Don't you dare use this function.
+ */
+unsigned int _parse_integer(const char *s, unsigned int base, unsigned long long *p)
+{
+       unsigned long long res;
+       unsigned int rv;
+
+       res = 0;
+       rv = 0;
+       while (1) {
+               unsigned int c = *s;
+               unsigned int lc = c | 0x20; /* don't tolower() this line */
+               unsigned int val;
+
+               if ('0' <= c && c <= '9')
+                       val = c - '0';
+               else if ('a' <= lc && lc <= 'f')
+                       val = lc - 'a' + 10;
+               else
+                       break;
+
+               if (val >= base)
+                       break;
+               /*
+                * Check for overflow only if we are within range of
+                * it in the max base we support (16)
+                */
+               if (unlikely(res & (~0ull << 60))) {
+                       if (res > div_u64(ULLONG_MAX - val, base))
+                               rv |= KSTRTOX_OVERFLOW;
+               }
+               res = res * base + val;
+               rv++;
+               s++;
+       }
+       *p = res;
+       return rv;
+}
+
+static int _kstrtoull(const char *s, unsigned int base, unsigned long long *res)
+{
+       unsigned long long _res;
+       unsigned int rv;
+
+       s = _parse_integer_fixup_radix(s, &base);
+       rv = _parse_integer(s, base, &_res);
+       if (rv & KSTRTOX_OVERFLOW)
+               return -ERANGE;
+       if (rv == 0)
+               return -EINVAL;
+       s += rv;
+       if (*s == '\n')
+               s++;
+       if (*s)
+               return -EINVAL;
+       *res = _res;
+       return 0;
+}
+
+/**
+ * kstrtoull - convert a string to an unsigned long long
+ * @s: The start of the string. The string must be null-terminated, and may also
+ *  include a single newline before its terminating null. The first character
+ *  may also be a plus sign, but not a minus sign.
+ * @base: The number base to use. The maximum supported base is 16. If base is
+ *  given as 0, then the base of the string is automatically detected with the
+ *  conventional semantics - If it begins with 0x the number will be parsed as a
+ *  hexadecimal (case insensitive), if it otherwise begins with 0, it will be
+ *  parsed as an octal number. Otherwise it will be parsed as a decimal.
+ * @res: Where to write the result of the conversion on success.
+ *
+ * Returns 0 on success, -ERANGE on overflow and -EINVAL on parsing error.
+ * Used as a replacement for the obsolete simple_strtoull. Return code must
+ * be checked.
+ */
+int kstrtoull(const char *s, unsigned int base, unsigned long long *res)
+{
+       if (s[0] == '+')
+               s++;
+       return _kstrtoull(s, base, res);
+}
diff --git a/arch/x86/boot/string.h b/arch/x86/boot/string.h
index 3d78e27077f4..9619c8990d95 100644
--- a/arch/x86/boot/string.h
+++ b/arch/x86/boot/string.h
@@ -29,4 +29,6 @@ extern unsigned int atou(const char *s);
 extern unsigned long long simple_strtoull(const char *cp, char **endp,
                                          unsigned int base);

+#define KSTRTOX_OVERFLOW       (1U << 31)
+
 #endif /* BOOT_STRING_H */


