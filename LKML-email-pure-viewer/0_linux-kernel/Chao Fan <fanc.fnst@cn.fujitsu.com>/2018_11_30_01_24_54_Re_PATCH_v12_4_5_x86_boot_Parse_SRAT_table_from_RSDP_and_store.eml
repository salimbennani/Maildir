Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 09:29:54 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 20B12580213;
	Thu, 29 Nov 2018 17:25:16 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by fmsmga001-1.fm.intel.com with ESMTP; 29 Nov 2018 17:25:15 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AODoK+BzlnatX0T7XCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e4fL/ad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWRPUMZPWSJcAY28?=
 =?us-ascii?q?YYQAAPYcMulaoYb9pkAOrQO8CAS3GOPj1iVFimPq0aAgzegsFxzN0gw6H9IJtX?=
 =?us-ascii?q?TZtMv4NKcIXuCy0aLGzS/Mb/VL0jr65ojHaBYhru2WUbJ+d8rR0lUvGhjZgVWW?=
 =?us-ascii?q?s4DlMS6V1uYMs2iH9OpgSPijhHIgqwF0uzWiwNonhIrRho8N1FzI6SF0zJwoKd?=
 =?us-ascii?q?C2VkJ3e8OoHZhMuy2ANoZ7QNsuT3x0tCog17ELuJy2cDIUxJg5xxPTcfyKfomQ?=
 =?us-ascii?q?7h7+V+ucLy10iXZ4dL6lmhq/8UutxvfhWsS6zlpHqDdOnMPWuXAXzRPT79CKSv?=
 =?us-ascii?q?tj8Uel3jaCzx7T6u5aLkAuj6bbKIAuwqQ2lpUNtUTPBCj2mF/5jKOOd0Uk/Pan?=
 =?us-ascii?q?6/j/b7n4upORM5V4hhzwP6gwgMCzHOc1PhQUU2Wa++mwzLjj8lf4QLVOgP02iK?=
 =?us-ascii?q?7ZsJXCKMQfp665BRJV04k65xa8ETimytIYkmcDLF5cfxKGgY7pNE/UIP3jE/e/?=
 =?us-ascii?q?jEqjkC1xy/DFILLhGJPNIWbHkLv7erZ98UFcxBIpzd9D/5JUFq0BIPXrV0/1td?=
 =?us-ascii?q?zYDQE2Pxa7wub6E9h90oIeWWSSAq6WKq/SsFmI5v4xLOmIfoMapDH9K/097f70?=
 =?us-ascii?q?kXA5gUMdfbWu3ZYPaHC3BPVmI1mDbnrrmNsBEXoKsRA4TOzlk1CCVT9TZ3CvX6?=
 =?us-ascii?q?Mz/D07CYSmDZvdSYCpmrCOwCC7HphObGBcFl+MCWvod5mDW/oUaiKSJdFuniYH?=
 =?us-ascii?q?VbimTY8h0xauuRT+y7pmKOrU5yIZuYji1Nhz++3cixUy+SZoAMSa1mGHV3t0kX?=
 =?us-ascii?q?8QRz8qwKB/plRwxU2Y0ah4hPxYFsZf5+lTXQc4LpPcy+16C9bvWgPOZNuJSVCm?=
 =?us-ascii?q?Qsm4DjE1VN4+39gOY0NlEdW4kh/DxzaqA6MSl7GTB5w76KTc02L1J8Z80XnG0q?=
 =?us-ascii?q?YhgkIiQstOM22mm6F++xLSB47Pj0WWiaKqeb4A0y7K8WeJ1XCOs11AUA5sTaXF?=
 =?us-ascii?q?WmgSaVbMotTn+EzOVb+uBq4hMgta18GCLKxGatnqjVVDQPfuI9DeY2O3m2etCh?=
 =?us-ascii?q?eE3LKMbIz2e2oD2CXRElQLkwcW/XyeLwgxGj+ho37CDDxpDV/gflnj8fdgp3+h?=
 =?us-ascii?q?Tk871QeKb1Z/2Lqz4RMVgf2cS/UO3rMLoishqjN0HEqj0NLSEdaPuw1hfKBEa9?=
 =?us-ascii?q?Mn/FhHzX7ZtxB6PpG4M6Bih1secwNrv0Pu1xR7EJlAndItrHMwyApyKKSY0Fxa?=
 =?us-ascii?q?ejOc3JDwPKDXK2bo8BCuba7Wxk/R0NKM9qgT7/Q4rk3pvBu1GUo673Vnz95V3m?=
 =?us-ascii?q?OG6ZXOEgUTXoz+U0Yt+xdhurHVfzMy54XX1X1rL6m5qTvC29MvBOs4xResZdZf?=
 =?us-ascii?q?MKWYFADsF80WHdShKOsvm1KxdBILIPhS9LIoP8Ohb/aH2LOrMPx8kz68jGVH4J?=
 =?us-ascii?q?py0kSD9ydnTu7I3pAFw+yX3wedVjf8ikuhvd7zmYxeeT4SGW+/wzD+BIFNfq1y?=
 =?us-ascii?q?YZoLCWC2Ls2tx9Vxm4TiW2RF+16kHV8G3tGmeQCTb1DkwQJfz0AXrmG5liuiyD?=
 =?us-ascii?q?x0lSokrq6e3CzI3uTjewALOm9NRGl+k1jsJZK4gMwdXEitdwIpjgeq5V7mx6hH?=
 =?us-ascii?q?o6RyN2nSQUZScyn2NW1iSbawtryZbs5L6ZMotzhXUeumbVCbTL79vwUV0yf5E2?=
 =?us-ascii?q?RCwzA7cimguo/lkBxilGKdMHFzoWLbec5q3xff59/cRflL0jodXiZ4ijrXBlm6?=
 =?us-ascii?q?P9a3+9WZjJPDsuG4V2K8WZxfayjrzYWctCSl4W1mGwGwn/e2mtf/Cwg1zTf718?=
 =?us-ascii?q?V2VSXPtBv9YpPk16OgPeJlf0loAkTx6857GoF4j4sxi4sc2XkchpWJ43UHlX3/?=
 =?us-ascii?q?Pslc2aL7dHANXyIEw8bJ4Aj5301uNnGJyJj4VnmHwsthesO1YmUZ2i8m68BKCa?=
 =?us-ascii?q?GU7KFLnCdvo1q4qx7RbuZ5njsH1fQu73saifkTuAUx1iWdHqwSHU5AMCzplhSI?=
 =?us-ascii?q?7MqxoL9ZZWmxariwyFRxncq6A76cuAFcV230epMjHS9288V+P0jA0Hz16oH4Zt?=
 =?us-ascii?q?bQacgfuQGTkxfFl+JVMo4+luIWhSp7PmLwpWEly+k+jRB03JC1po6HK3h2/KKi?=
 =?us-ascii?q?Ax5VLTn1Z8IV+jHwgqdShMeW34azHpp/HjUHRofnTfWtEDgKr/ToKx6OECEgqn?=
 =?us-ascii?q?ecAbfQBhWQ6EBir3LSCZyrM2yXKWIdzdVjQhmdOUNejBoVXDU8gp42CASqyNb9?=
 =?us-ascii?q?f0d+4zAb/kT4pQdUyuJ0Kxn/VX/SpAWyZTcxVpefNwBa7h1Y60fWLMye7f9zHy?=
 =?us-ascii?q?dC8Z26twGNLm2bZwJVDWAGQECEBlbjPqWw6tnE6eSXGu2+L/7Wa7WUteNeT+uI?=
 =?us-ascii?q?xY6o0oZ+/zeMMdiPPmB/D/Ih3EpPR2t5G8PfmzUAUCEXkyPNb8iGpBaz4CF3r8?=
 =?us-ascii?q?a/8Oj1VwLr/4eAF7xSMdB38RCsnaiDL/KQhDp+KTtA1pMD237IyLsc3F4TkS1u?=
 =?us-ascii?q?dCOtEbMPtSHTVqLQh7RXAgUfayNyMstI8q090hNMOc7dltP6yLp4guQpBFdCUF?=
 =?us-ascii?q?zrgtupatASI2GhKFPHA16GO66bJTLQ2cH4f6O9RadUjOVVrBCwvTebE0n+PjWM?=
 =?us-ascii?q?jTXpVhavMf1SgyGfJhBRpIa9chN1A2j5UN3mcgG7MMNwjTAu3b00h3bKOXQAPj?=
 =?us-ascii?q?Rmb0xNrqOf7SVDj/V7GmxB6GdlLOaelyaY6enYNogZsf9xDitokOJa5Wwwy6FJ?=
 =?us-ascii?q?4yFcWPx1hCzSo8Zuol68lOmPzztnUBxWpTdKhIKEp0NiOarC+5lEWHbE+g8N7G?=
 =?us-ascii?q?qKBxQLodtlFsPgu6RKxtfTk6LzLWQKz9WB2MIHDtnTM8KGeF8gIwfsEXaACRAU?=
 =?us-ascii?q?VniuNHPCgkV1n/Sb93nTpZ8//MvCgp0LH5RbXVt9OPocQhBrFdoJZplxRS8Mmr?=
 =?us-ascii?q?jdgtMK5GalsV/aQ8AM7cOPbe6bHfi6cGXRtrJDfRZdhOqgdYk=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAACFkABch0O0hNFlGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBg1kSJwqMB4wJgg0UlzCBdhEYEwGHdCI0CQ0?=
 =?us-ascii?q?BAwEBAQEBAQIBEwEBAQgNCQgpL4I2JAGCYgECAwECJBM/BgkBAQoOCgkVEAMMB?=
 =?us-ascii?q?UkOBQWDHIIBAQWpbzMaAooUgn6JGIIWgRGBcHQuiDaCJgKJB4IShQSFLYpZBwK?=
 =?us-ascii?q?GP4poI4l8A4cdmE6BRoINMxojgzyCJxcSjhgyAQExAYEEAQGMGoEfAQE?=
X-IPAS-Result: =?us-ascii?q?A0ABAACFkABch0O0hNFlGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBg1kSJwqMB4wJgg0UlzCBdhEYEwGHdCI0CQ0BAwEBAQEBAQIBE?=
 =?us-ascii?q?wEBAQgNCQgpL4I2JAGCYgECAwECJBM/BgkBAQoOCgkVEAMMBUkOBQWDHIIBAQW?=
 =?us-ascii?q?pbzMaAooUgn6JGIIWgRGBcHQuiDaCJgKJB4IShQSFLYpZBwKGP4poI4l8A4cdm?=
 =?us-ascii?q?E6BRoINMxojgzyCJxcSjhgyAQExAYEEAQGMGoEfAQE?=
X-IronPort-AV: E=Sophos;i="5.56,296,1539673200"; 
   d="scan'208";a="42182586"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 17:25:13 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727158AbeK3Mcl (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 30 Nov 2018 07:32:41 -0500
Received: from mail.cn.fujitsu.com ([183.91.158.132]:1821 "EHLO
        heian.cn.fujitsu.com" rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org
        with ESMTP id S1726393AbeK3Mcl (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 30 Nov 2018 07:32:41 -0500
X-IronPort-AV: E=Sophos;i="5.56,296,1539619200"; 
   d="scan'208";a="48850056"
Received: from unknown (HELO cn.fujitsu.com) ([10.167.33.5])
  by heian.cn.fujitsu.com with ESMTP; 30 Nov 2018 09:25:08 +0800
Received: from G08CNEXCHPEKD01.g08.fujitsu.local (unknown [10.167.33.80])
        by cn.fujitsu.com (Postfix) with ESMTP id D599B4B734A7;
        Fri, 30 Nov 2018 09:25:08 +0800 (CST)
Received: from localhost.localdomain (10.167.225.56) by
 G08CNEXCHPEKD01.g08.fujitsu.local (10.167.33.89) with Microsoft SMTP Server
 (TLS) id 14.3.408.0; Fri, 30 Nov 2018 09:25:09 +0800
Date: Fri, 30 Nov 2018 09:24:54 +0800
From: Chao Fan <fanc.fnst@cn.fujitsu.com>
To: Masayoshi Mizuma <msys.mizuma@gmail.com>
CC: <linux-kernel@vger.kernel.org>, <x86@kernel.org>, <bp@alien8.de>,
        <tglx@linutronix.de>, <mingo@redhat.com>, <hpa@zytor.com>,
        <keescook@chromium.org>, <bhe@redhat.com>,
        <indou.takao@jp.fujitsu.com>, <caoj.fnst@cn.fujitsu.com>
Subject: Re: [PATCH v12 4/5] x86/boot: Parse SRAT table from RSDP and store
 immovable memory
Message-ID: <20181130012454.GB1527@localhost.localdomain>
References: <20181129081631.11139-1-fanc.fnst@cn.fujitsu.com>
 <20181129081631.11139-5-fanc.fnst@cn.fujitsu.com>
 <20181129175520.xcmj3bv4yhdr7kk3@gabell>
MIME-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Content-Disposition: inline
In-Reply-To: <20181129175520.xcmj3bv4yhdr7kk3@gabell>
User-Agent: Mutt/1.10.1 (2018-07-13)
X-Originating-IP: [10.167.225.56]
X-yoursite-MailScanner-ID: D599B4B734A7.ACE76
X-yoursite-MailScanner: Found to be clean
X-yoursite-MailScanner-From: fanc.fnst@cn.fujitsu.com
X-Spam-Status: No
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Thu, Nov 29, 2018 at 12:55:21PM -0500, Masayoshi Mizuma wrote:
>On Thu, Nov 29, 2018 at 04:16:30PM +0800, Chao Fan wrote:
>> To fix the conflict between KASLR and memory-hotremove, SRAT table
>> should be parsed by RSDP pointer, then find the immovable
>> memory regions and store them in an array called immovable_mem[].
>> The array called immovable_mem[] will extern to KASLR, then
>> KASLR will avoid to extract kernel to these regions.
>> 
>> Add 'CONFIG_EARLY_PARSE_RSDP' which depends on RANDOMIZE_BASE &&
>> MEMORY_HOTREMOVE, cause only when both KASLR and memory-hotremove
>> are enabled, RSDP needs to be parsed in compressed period.
>> 
>> Signed-off-by: Chao Fan <fanc.fnst@cn.fujitsu.com>
>> ---
>>  arch/x86/Kconfig                  |  10 +++
>>  arch/x86/boot/compressed/Makefile |   2 +
>>  arch/x86/boot/compressed/acpitb.c | 125 ++++++++++++++++++++++++++++++
>>  arch/x86/boot/compressed/kaslr.c  |   4 -
>>  arch/x86/boot/compressed/misc.h   |  20 +++++
>>  5 files changed, 157 insertions(+), 4 deletions(-)
>> 
>> diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig
>> index a29d49ef4d56..bc775968557b 100644
>> --- a/arch/x86/Kconfig
>> +++ b/arch/x86/Kconfig
>> @@ -2146,6 +2146,16 @@ config X86_NEED_RELOCS
>>  	def_bool y
>>  	depends on RANDOMIZE_BASE || (X86_32 && RELOCATABLE)
>>  
>
>> +config CONFIG_EARLY_PARSE_RSDP
>
>config EARLY_PARSE_RSDP
>
>> +	bool "Parse RSDP pointer on compressed period for KASLR"
>> +	def_bool n
>
>Should be def_bool y?

I will change it to y.

>It is better to enable EARLY_PARSE_RSDP by default if 
>RANDOMIZE_BASE and MEMORY_HOTREMOVE are enabled.
>
>> +	depends on RANDOMIZE_BASE && MEMORY_HOTREMOVE
>> +	help
>> +	  This option parses RSDP pointer in compressed period. Works
>> +	  for KASLR to get memory information by SRAT table and choose
>> +	  immovable memory to extract kernel.
>> +	  Say Y if you want to use both KASLR and memory-hotremove.
>> +
>>  config PHYSICAL_ALIGN
>>  	hex "Alignment value to which kernel should be aligned"
>>  	default "0x200000"
>> diff --git a/arch/x86/boot/compressed/Makefile b/arch/x86/boot/compressed/Makefile
>> index 466f66c8a7f8..4cbfb58bf083 100644
>> --- a/arch/x86/boot/compressed/Makefile
>> +++ b/arch/x86/boot/compressed/Makefile
>> @@ -84,6 +84,8 @@ ifdef CONFIG_X86_64
>>  	vmlinux-objs-y += $(obj)/pgtable_64.o
>>  endif
>>  
>> +vmlinux-objs-$(CONFIG_EARLY_PARSE_RSDP) += $(obj)/acpitb.o
>> +
>>  $(obj)/eboot.o: KBUILD_CFLAGS += -fshort-wchar -mno-red-zone
>>  
>>  vmlinux-objs-$(CONFIG_EFI_STUB) += $(obj)/eboot.o $(obj)/efi_stub_$(BITS).o \
>> diff --git a/arch/x86/boot/compressed/acpitb.c b/arch/x86/boot/compressed/acpitb.c
>> index 82d27c4b8978..023b33d0cd3b 100644
>> --- a/arch/x86/boot/compressed/acpitb.c
>> +++ b/arch/x86/boot/compressed/acpitb.c
>> @@ -195,3 +195,128 @@ static acpi_physical_address bios_get_rsdp_addr(void)
>>  		return (acpi_physical_address)address;
>>  	}
>>  }
>> +
>> +/* Used to determine RSDP table, based on acpi_os_get_root_pointer(). */
>> +static acpi_physical_address get_rsdp_addr(void)
>> +{
>> +	acpi_physical_address pa = 0;
>> +
>> +	pa = get_acpi_rsdp();
>> +
>> +	if (!pa)
>> +		pa = efi_get_rsdp_addr();
>> +
>> +	if (!pa)
>> +		pa = bios_get_rsdp_addr();
>> +
>> +	return pa;
>> +}
>> +
>> +/* Compute SRAT table from RSDP. */
>> +static struct acpi_table_header *get_acpi_srat_table(void)
>> +{
>> +	acpi_physical_address acpi_table;
>> +	acpi_physical_address root_table;
>> +	struct acpi_table_header *header;
>> +	struct acpi_table_rsdp *rsdp;
>> +	int num_entries;
>> +	char arg[10];
>> +	u8 *entry;
>> +	u32 size;
>> +	u32 len;
>> +
>> +	rsdp = (struct acpi_table_rsdp *)get_rsdp_addr();
>> +	if (!rsdp)
>> +		return NULL;
>> +
>> +	/* Get RSDT or XSDT from RSDP. */
>
>> +	if (!(cmdline_find_option("acpi", arg, sizeof(arg)) == 4 &&
>> +	    !strncmp(arg, "rsdt", 4)) &&
>> +	    rsdp->xsdt_physical_address &&
>> +	    rsdp->revision > 1) {
>> +		root_table = rsdp->xsdt_physical_address;
>> +		size = ACPI_XSDT_ENTRY_SIZE;
>> +	} else {
>> +		root_table = rsdp->rsdt_physical_address;
>> +		size = ACPI_RSDT_ENTRY_SIZE;
>> +	}
>> +
>> +	/* Get ACPI root table from RSDT or XSDT.*/
>> +	header = (struct acpi_table_header *)root_table;
>> +	if (!header)
>> +		return NULL;
>> +
>> +	len = header->length;
>> +	num_entries = (u32)((len - sizeof(struct acpi_table_header)) / size);
>
>> +	if (num_entries > MAX_ACPI_SIG)
>> +		return NULL;
>
>I think this check isn't needed...
>
>> +
>> +	entry = ACPI_ADD_PTR(u8, header, sizeof(struct acpi_table_header));
>> +
>> +	while (num_entries--) {
>> +		u64 address64;
>> +
>> +		if (size == ACPI_RSDT_ENTRY_SIZE)
>> +			acpi_table = ((acpi_physical_address)
>> +				      (*ACPI_CAST_PTR(u32, entry)));
>> +		else {
>> +			*(u64 *)(void *)&address64 = *(u64 *)(void *)entry;
>> +			acpi_table = (acpi_physical_address) address64;
>> +		}
>> +
>> +		if (acpi_table) {
>> +			header = (struct acpi_table_header *)acpi_table;
>> +
>> +			if (ACPI_COMPARE_NAME(header->signature, ACPI_SIG_SRAT))
>> +				return header;
>> +		}
>> +		entry += size;
>> +	}
>> +	return NULL;
>> +}
>> +
>> +/*
>> + * According to ACPI table, filter the immovable memory regions
>> + * and store them in immovable_mem[].
>> + */
>> +void get_immovable_mem(void)
>> +{
>> +	struct acpi_table_header *table_header;
>> +	struct acpi_subtable_header *table;
>> +	struct acpi_srat_mem_affinity *ma;
>> +	unsigned long table_end;
>> +	char arg[10];
>> +	int i = 0;
>> +
>> +	if (cmdline_find_option("acpi", arg, sizeof(arg)) == 3 &&
>> +	    !strncmp(arg, "off", 3))
>> +		return;
>> +
>> +	table_header = get_acpi_srat_table();
>> +	if (!table_header)
>> +		return;
>> +
>> +	table_end = (unsigned long)table_header + table_header->length;
>> +	table = (struct acpi_subtable_header *)
>> +		((unsigned long)table_header + sizeof(struct acpi_table_srat));
>> +
>> +	while (((unsigned long)table) +
>> +		       sizeof(struct acpi_subtable_header) < table_end) {
>> +		if (table->type == ACPI_SRAT_TYPE_MEMORY_AFFINITY) {
>> +			ma = (struct acpi_srat_mem_affinity *)table;
>> +			if (!(ma->flags & ACPI_SRAT_MEM_HOT_PLUGGABLE)) {
>> +				immovable_mem[i].start = ma->base_address;
>> +				immovable_mem[i].size = ma->length;
>> +				i++;
>> +			}
>> +
>> +			if (i >= MAX_NUMNODES*2) {
>> +				debug_putstr("Too many immovable memory regions, aborting.\n");
>> +				return;
>> +			}
>> +		}
>> +		table = (struct acpi_subtable_header *)
>> +			((unsigned long)table + table->length);
>> +	}
>> +	num_immovable_mem = i;
>> +}
>> diff --git a/arch/x86/boot/compressed/kaslr.c b/arch/x86/boot/compressed/kaslr.c
>> index 9ed9709d9947..b251572e77af 100644
>> --- a/arch/x86/boot/compressed/kaslr.c
>> +++ b/arch/x86/boot/compressed/kaslr.c
>> @@ -87,10 +87,6 @@ static unsigned long get_boot_seed(void)
>>  #define KASLR_COMPRESSED_BOOT
>>  #include "../../lib/kaslr.c"
>>  
>> -struct mem_vector {
>> -	unsigned long long start;
>> -	unsigned long long size;
>> -};
>>  
>>  /* Only supporting at most 4 unusable memmap regions with kaslr */
>>  #define MAX_MEMMAP_REGIONS	4
>> diff --git a/arch/x86/boot/compressed/misc.h b/arch/x86/boot/compressed/misc.h
>> index 809c31effa4b..d94e2a419c13 100644
>> --- a/arch/x86/boot/compressed/misc.h
>> +++ b/arch/x86/boot/compressed/misc.h
>> @@ -77,6 +77,11 @@ void choose_random_location(unsigned long input,
>>  			    unsigned long *output,
>>  			    unsigned long output_size,
>>  			    unsigned long *virt_addr);
>> +struct mem_vector {
>> +	unsigned long long start;
>> +	unsigned long long size;
>> +};
>> +
>>  /* cpuflags.c */
>>  bool has_cpuflag(int flag);
>>  #else
>> @@ -118,5 +123,20 @@ void set_sev_encryption_mask(void);
>>  #endif
>>  
>>  /* acpitb.c */
>> +#ifdef CONFIG_RANDOMIZE_BASE
>> +/* Store the amount of immovable memory regions */
>> +int num_immovable_mem;
>> +#endif
>> +
>> +#ifdef CONFIG_EARLY_PARSE_RSDP
>> +void get_immovable_mem(void);
>
>> +/* There are 72 kinds of ACPI_SIG in head file of ACPI. */
>> +#define MAX_ACPI_SIG	72
>
>The 72 isn't the specification of ACPI, right? So the number

Yes, it's from  ACPI code, include/acpi/actbl*h.
Boris said there should be a check for the num_entries,
I didn't get a good idea, so I use the max number to check it.
So do you have some advice?

Thanks,
Chao Fan

>of SIG may increase and decrease in the future.
>This macro and the check I commented above isn't needed...
>
>Thanks,
>Masa
>
>> +#else
>> +static void get_immovable_mem(void)
>> +{
>> +}
>> +#endif
>> +
>>  #define BOOT_STRING
>>  extern int kstrtoull(const char *s, unsigned int base, unsigned long long *res);
>> -- 
>> 2.19.1
>> 
>> 
>> 
>
>


