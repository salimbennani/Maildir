Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 22 Nov 2018 19:04:52 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 4373D58046A;
	Thu, 22 Nov 2018 01:48:53 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by orsmga003-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 22 Nov 2018 01:48:52 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Ajxu8bxEIzwRElExy2vDwaJ1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75o8m6bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJVyJPHJ6y?=
 =?us-ascii?q?YYUMAeQGP+lYoZL9p0MMoBalGQWgGPnixiNSi3PqwaE31fkqHwHc3AwnGtIDqG?=
 =?us-ascii?q?rarNLwNKwPTO210bPIzTbZYPNMxTf29Y/FcgwmofGJRr9/a9fRyVI0Fwzbklqc?=
 =?us-ascii?q?s5DqPzSQ1ukUtWWQ8uluVfq3hmI5tw18piKjytoih4XXnI4Z11PJ+TljzIs0J9?=
 =?us-ascii?q?C0UFN3bcO4HJdKqS2WKpF6T8I/T21ypio3zrsLsoOhcicQ0pQo3RvfZuSHc4eW?=
 =?us-ascii?q?5hLjU/6cISl3hH17YrKznRWy/la6yu36SMa01ExGri1fktnDrnwN1hrT5dabSv?=
 =?us-ascii?q?Zl4EutxTKC2xrO5uxKP0w4j7fXJp09zrIql5ces1zPHirsl0X3iK+WeF8k+u+t?=
 =?us-ascii?q?6+n/ZrXmp5mcN5J7iw3nMaQhhNa/AeImPQgKRmSb/uq91Lv98k3jW7hKkPI2nb?=
 =?us-ascii?q?fDsJzAJsQUuLS5AwlL3YYn8Rq/CC2m0NsAkXkdMF1FYA6Hj5TuO1zWJPD4DPS/?=
 =?us-ascii?q?jEq2nDZk2vDLJbnhApTLLnjen7btZ7d960hAyAUtydBT/Y5bCrYEIPjrQE/+qM?=
 =?us-ascii?q?TYDgMlMwyz2+vnCM9y1oICWW2VBa+VKqPSsUKS6eIpLOmBf4sVuDf7K/g46P/i?=
 =?us-ascii?q?l345mVkBfaa32Zsbcmy3HvNjI0+Be3rjns8BEXsWvgo5VOHqilqCXiBJa3axWK?=
 =?us-ascii?q?I84Dc7CIW9AIfHR4CthqGB3SihEp1XYGBGFk6DEXPye4qYXPcMbTqYItV9nTwc?=
 =?us-ascii?q?SbihV4gh2Am0uw/hy7pnKenU9jcCtZ351th4/OnTlRA09TxpAMWRyWCNT2donm?=
 =?us-ascii?q?wWQz86xrxwoUt4yl2by6h3n+RYFcBP5/NOSgo6NoTTz+pgB9D2WwLOZNGJSFm9?=
 =?us-ascii?q?T9WiADExSM8xwtAUb0Z8HdWikg7M3y6wD7AJkLyLAYQ+8rjA0HjpO8Z913HG2b?=
 =?us-ascii?q?E8gFY8XMtAK3eqhq5l+AjVHI7GjUOZm6GudaQf2S7N8HyOzW6PvEFeTQ5xXr/J?=
 =?us-ascii?q?XXEZZkvKs9v54lnOQKOpCbQiKgFB09KNKrNWat31ilVLXOrsN87AY22vgWuwBQ?=
 =?us-ascii?q?yHxrWXbIX0fWUQxyHdCEkCkwAO8neKLwk+BiG9o23ACDxiD07gY0Tp8eNmsnO0?=
 =?us-ascii?q?Ulc0zx2Wb01mz7e15h8VhfmbS/MP3rIFuD0tqyluEFa6xdLWD9uApwxufKhHZd?=
 =?us-ascii?q?M94VFH1X/WtgBnP5ygKbxiiUAacwhto0zu0BB3AJ1akcc2tHMq0BZyKaWA3Vxb?=
 =?us-ascii?q?czOXw5/xNaPXK2Xo5x+vdrPZ1UvY0NaV/acP9u81q1HivAGvC0oj/G9r09hT03?=
 =?us-ascii?q?uA+JrKCBAeXo72UkYy7xJ6va3VYjEh54PI0n1hKam1siLY1901HuckyxagcM1Z?=
 =?us-ascii?q?MKOLDwLyF8waB86zKO0lgVSpbxQEPPxM+64wJc+pa/yG2KuzNuZ6gD2mlXhH4J?=
 =?us-ascii?q?x60k+U7Sp8S/LH0Iwfw/6F2QuLTTH8g0m7ssD2gIxLeSsdHm6ixif6Ho5RYaty?=
 =?us-ascii?q?cJ0PCWevJc2329p/i4TsW35e6F6sGVcG1NW1dhqValz3xRdQ2lgPoXy7hSu4yC?=
 =?us-ascii?q?R5kjEorqaF3C3C2f/idAcBOmNQQGlijFHsIZW7jtwAXUioaRQpmwWh5Urg26db?=
 =?us-ascii?q?o6F/JXHJQUhUZyj2M31iUqyou7qAecFP8pAosSZQUOimelCVUL39oxgb0yPlAW?=
 =?us-ascii?q?Rewis2dzWrupX/ghx7h3iRLHd1rHrFZ85wwQ3T68DbRf5UxjAGXjV3iSHLBlig?=
 =?us-ascii?q?ONmk5dWVmI3EsuykVWKhV5tTfDLvzYOBsiu7+GJrDQe+n/C1ht3oDww63TXn2N?=
 =?us-ascii?q?ltUCXCtAz8bZXz16SmLeJneVFlBFzm5Mp7AI1+kpYwi4sW2XgVnZiV+XsHkWHu?=
 =?us-ascii?q?MdRUw67+bXwNRSIVzN7R+gTqxEpjLneRzYLjSnqd2tdhZ8W9Ym4O3yI97sNKB7?=
 =?us-ascii?q?2O4L1KgyR1uUa4ohzLYfdmgDgd0/Qu5WUeg+EIvgot0yqcDqoTHUleISzjiRCI?=
 =?us-ascii?q?48qio6VQYWalaaKw21ZmndC9ELGCpRlRWGr+epcnByNx799wMFTR0H3o8YHkec?=
 =?us-ascii?q?LdbdYSth2SjhfBgPJZKJM3lvoWmyVnPXjxsmEiy+4+lRZux421vJCbK2Vx+6K0?=
 =?us-ascii?q?GgVXOSfyZ8MX5zHhl6JentuN0oCrH5VhHCgLXZTyQfKpFjISqeroNwKUHDIgrX?=
 =?us-ascii?q?ebHKLVHRWD50d+s3LPD5erOmmVJHYDyNVtWgKdKFZDgAwOXzU6g505Fh2sxMP7?=
 =?us-ascii?q?a0d0/TQR5l/+qhtRxeNkLRj/UmHDpAi2bjc4UoSQLB1T7gta/UfaLdSe7v5vHy?=
 =?us-ascii?q?Ff5pCgrAuNKnGCZwRVF24JXFaIB0vkPrmo6tnN6OyYBuu4L/vTbrSCs+1eV/GU?=
 =?us-ascii?q?xZ2x1otq5SqDNsKKPnN6Ff00xlJDXWxlG8TegzgPSzIYlyPOb86YpRew4C53rt?=
 =?us-ascii?q?q48PTkRg3v/5aPC6BJPNVr+hC2h7qDNuGKiCZ4LzZYyo0DxXvSxLcD214Sjjlk?=
 =?us-ascii?q?dyOxHrQYqS7NUKXQl7dNAB4GcCxzLtVH7qIm0glJOM7Wkdf11r9+jv4oBFZJT1?=
 =?us-ascii?q?3hmse1ZcMUJ2GxLk/IBEGONL6ePz3E39n3Yb+gSb1XlOhUqxywuTOBH0D/JDiM?=
 =?us-ascii?q?iznpWA6pMexXiCGbPRpeuJyycxp3CGjjSs7mZQO/MNNtkTI2xrg0jGvQNWEAKT?=
 =?us-ascii?q?h8b19NrrqI4CJYmPp/HWlB7ntjLeacmieZ7/PXKpAZsfZwBiR0luRa4Gk1yrdP?=
 =?us-ascii?q?7SFEQuB1lzXWrtJ0v16mleyPmXJbV09qqzBWlMqIsF9kNKGR85BBXXfC81oJ7H?=
 =?us-ascii?q?6MQ0AOpt14GpjstrpWx9zniq3+MnFB/sjS8M9aANLbfpGpKn0kZCbuHXb+EREG?=
 =?us-ascii?q?RCS3fTXDgEl1meyJ7XCe6JM9r86/y9I1VrZHWQltRbshAUN/EYlHec8vUw=3D?=
 =?us-ascii?q?=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ATAACKevZbh0O0hNFiHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGDayeMEF+LIoIhlyaBcxIBARgTAYhQIjQJDQEDAQEBAQEBAgETAQEBCA0?=
 =?us-ascii?q?JCCkjDII2JAGCYgMDAQIkGQEBNwEFCQEBPhIDVAYTBYMcggEBBakXgWwzgnYBA?=
 =?us-ascii?q?QWCQ4RfCIdegw+BHBeBf4ERjWuJGwqHO48kCYIgjwQLGJEImAkCBAsCFIFGgg1?=
 =?us-ascii?q?NIxU7gmyCGwwXg0qKZiwygQUBAY0pAQE?=
X-IPAS-Result: =?us-ascii?q?A0ATAACKevZbh0O0hNFiHQEBBQEHBQGBUQgBCwGDayeMEF+?=
 =?us-ascii?q?LIoIhlyaBcxIBARgTAYhQIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2JAGCY?=
 =?us-ascii?q?gMDAQIkGQEBNwEFCQEBPhIDVAYTBYMcggEBBakXgWwzgnYBAQWCQ4RfCIdegw+?=
 =?us-ascii?q?BHBeBf4ERjWuJGwqHO48kCYIgjwQLGJEImAkCBAsCFIFGgg1NIxU7gmyCGwwXg?=
 =?us-ascii?q?0qKZiwygQUBAY0pAQE?=
X-IronPort-AV: E=Sophos;i="5.56,265,1539673200"; 
   d="scan'208";a="53937980"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 22 Nov 2018 01:48:51 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2393590AbeKVU13 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 22 Nov 2018 15:27:29 -0500
Received: from csm1.csm-office.com.au ([165.228.118.109]:34208 "EHLO
        sleepy.aussec.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1731614AbeKVU13 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 22 Nov 2018 15:27:29 -0500
X-Virus-Scanned: amavisd-new at aussec.com
Received: from hpdv6.aussec.com.com (c110-21-61-29.farfl4.nsw.optusnet.com.au [110.21.61.29])
        (authenticated bits=0)
        by sleepy.aussec.com (8.15.2/8.15.2) with ESMTPSA id wAM9mAdi030201
        (version=TLSv1.2 cipher=DHE-RSA-AES128-SHA bits=128 verify=NO);
        Thu, 22 Nov 2018 20:48:32 +1100
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=aussec.com; s=2016;
        t=1542880113; bh=fgLGcidoKj4KpkQHdhPi7Dm0b4yBsxfkO0iYRa/odNA=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References;
        b=AfyMr4oOK+jPaFlWqQ2BMznYO1c0y4h4VxM0SvCepcAlRmgNEjN99aMLJAa2vSpsW
         03IvM/nU4nKRsaZkywGccDP5OjwaRBSRpTD4Nn2v+8U2RyL9hdvgUTz2rqzj77EtYT
         rKBU4iG7PpD377DRIuf3ChEEg049CQOOqbkMUX6EMVYSTinGUzIr8pg6rAiGfxT+Ry
         8CbMl1cAC5tuQ3B6U0T7WU2o4Iig/FTHIyEjNFwaaOy6m61ZW2n6TW3ZHclMHl0ivy
         norLHStnbrJBCWJPPN0cXJxW4/NDMTs1qyK8cFvOh451iAh6Tddgva7mA/pOBynzmP
         qelbvPDJNZWEg==
From: Tom Burkart <tom@aussec.com>
To: Linux kernel mailing list <linux-kernel@vger.kernel.org>
Cc: Tom Burkart <tom@aussec.com>
Subject: [PATCH v9 2/4] pps: descriptor-based gpio, capture-clear addition
Date: Thu, 22 Nov 2018 20:46:00 +1100
Message-Id: <20181122094602.5156-3-tom@aussec.com>
X-Mailer: git-send-email 2.12.3
In-Reply-To: <20181122094602.5156-2-tom@aussec.com>
References: <20181122094602.5156-1-tom@aussec.com>
 <20181122094602.5156-2-tom@aussec.com>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This patch changes the GPIO access for the pps-gpio driver from the
integer based ABI to the descriptor based ABI.  It also adds the
extraction of the device tree capture-clear option.

Signed-off-by: Tom Burkart <tom@aussec.com>
---
 drivers/pps/clients/pps-gpio.c | 80 +++++++++++++++++++++---------------------
 include/linux/pps-gpio.h       |  3 +-
 2 files changed, 41 insertions(+), 42 deletions(-)

diff --git a/drivers/pps/clients/pps-gpio.c b/drivers/pps/clients/pps-gpio.c
index 333ad7d5b45b..d2fbc91dc8fc 100644
--- a/drivers/pps/clients/pps-gpio.c
+++ b/drivers/pps/clients/pps-gpio.c
@@ -31,7 +31,7 @@
 #include <linux/slab.h>
 #include <linux/pps_kernel.h>
 #include <linux/pps-gpio.h>
-#include <linux/gpio.h>
+#include <linux/gpio/consumer.h>
 #include <linux/list.h>
 #include <linux/of_device.h>
 #include <linux/of_gpio.h>
@@ -41,9 +41,9 @@ struct pps_gpio_device_data {
 	int irq;			/* IRQ used as PPS source */
 	struct pps_device *pps;		/* PPS source device */
 	struct pps_source_info info;	/* PPS source information */
+	struct gpio_desc *gpio_pin;	/* GPIO port descriptors */
 	bool assert_falling_edge;
 	bool capture_clear;
-	unsigned int gpio_pin;
 };
 
 /*
@@ -61,18 +61,49 @@ static irqreturn_t pps_gpio_irq_handler(int irq, void *data)
 
 	info = data;
 
-	rising_edge = gpio_get_value(info->gpio_pin);
+	rising_edge = gpiod_get_value(info->gpio_pin);
 	if ((rising_edge && !info->assert_falling_edge) ||
 			(!rising_edge && info->assert_falling_edge))
 		pps_event(info->pps, &ts, PPS_CAPTUREASSERT, NULL);
 	else if (info->capture_clear &&
 			((rising_edge && info->assert_falling_edge) ||
-			 (!rising_edge && !info->assert_falling_edge)))
+			(!rising_edge && !info->assert_falling_edge)))
 		pps_event(info->pps, &ts, PPS_CAPTURECLEAR, NULL);
 
 	return IRQ_HANDLED;
 }
 
+static int pps_gpio_setup(struct platform_device *pdev)
+{
+	struct pps_gpio_device_data *data = platform_get_drvdata(pdev);
+	const struct pps_gpio_platform_data *pdata = pdev->dev.platform_data;
+	struct device_node *np = pdev->dev.of_node;
+	int ret;
+
+	if (pdata) {
+		data->gpio_pin = pdata->gpio_pin;
+
+		data->assert_falling_edge = pdata->assert_falling_edge;
+		data->capture_clear = pdata->capture_clear;
+	} else {
+		data->gpio_pin = devm_gpiod_get(&pdev->dev,
+			NULL,	/* request "gpios" */
+			GPIOD_IN);
+		if (IS_ERR(data->gpio_pin)) {
+			dev_err(&pdev->dev,
+				"failed to request PPS GPIO\n");
+			return PTR_ERR(data->gpio_pin);
+		}
+
+		if (of_get_property(np, "assert-falling-edge", NULL))
+			data->assert_falling_edge = true;
+
+		if (of_get_property(np, "capture-clear", NULL))
+			data->capture_clear = true;
+	}
+	return 0;
+}
+
 static unsigned long
 get_irqf_trigger_flags(const struct pps_gpio_device_data *data)
 {
@@ -90,53 +121,23 @@ get_irqf_trigger_flags(const struct pps_gpio_device_data *data)
 static int pps_gpio_probe(struct platform_device *pdev)
 {
 	struct pps_gpio_device_data *data;
-	const char *gpio_label;
 	int ret;
 	int pps_default_params;
-	const struct pps_gpio_platform_data *pdata = pdev->dev.platform_data;
-	struct device_node *np = pdev->dev.of_node;
 
 	/* allocate space for device info */
 	data = devm_kzalloc(&pdev->dev, sizeof(struct pps_gpio_device_data),
 			GFP_KERNEL);
 	if (!data)
 		return -ENOMEM;
-
-	if (pdata) {
-		data->gpio_pin = pdata->gpio_pin;
-		gpio_label = pdata->gpio_label;
-
-		data->assert_falling_edge = pdata->assert_falling_edge;
-		data->capture_clear = pdata->capture_clear;
-	} else {
-		ret = of_get_gpio(np, 0);
-		if (ret < 0) {
-			dev_err(&pdev->dev, "failed to get GPIO from device tree\n");
-			return ret;
-		}
-		data->gpio_pin = ret;
-		gpio_label = PPS_GPIO_NAME;
-
-		if (of_get_property(np, "assert-falling-edge", NULL))
-			data->assert_falling_edge = true;
-	}
+	platform_set_drvdata(pdev, data);
 
 	/* GPIO setup */
-	ret = devm_gpio_request(&pdev->dev, data->gpio_pin, gpio_label);
-	if (ret) {
-		dev_err(&pdev->dev, "failed to request GPIO %u\n",
-			data->gpio_pin);
-		return ret;
-	}
-
-	ret = gpio_direction_input(data->gpio_pin);
-	if (ret) {
-		dev_err(&pdev->dev, "failed to set pin direction\n");
+	ret = pps_gpio_setup(pdev);
+	if (ret)
 		return -EINVAL;
-	}
 
 	/* IRQ setup */
-	ret = gpio_to_irq(data->gpio_pin);
+	ret = gpiod_to_irq(data->gpio_pin);
 	if (ret < 0) {
 		dev_err(&pdev->dev, "failed to map GPIO to IRQ: %d\n", ret);
 		return -EINVAL;
@@ -173,7 +174,6 @@ static int pps_gpio_probe(struct platform_device *pdev)
 		return -EINVAL;
 	}
 
-	platform_set_drvdata(pdev, data);
 	dev_info(data->pps->dev, "Registered IRQ %d as PPS source\n",
 		 data->irq);
 
@@ -209,4 +209,4 @@ MODULE_AUTHOR("Ricardo Martins <rasm@fe.up.pt>");
 MODULE_AUTHOR("James Nuss <jamesnuss@nanometrics.ca>");
 MODULE_DESCRIPTION("Use GPIO pin as PPS source");
 MODULE_LICENSE("GPL");
-MODULE_VERSION("1.0.0");
+MODULE_VERSION("1.1.0");
diff --git a/include/linux/pps-gpio.h b/include/linux/pps-gpio.h
index 56f35dd3d01d..f028d2cda6f5 100644
--- a/include/linux/pps-gpio.h
+++ b/include/linux/pps-gpio.h
@@ -23,10 +23,9 @@
 #define _PPS_GPIO_H
 
 struct pps_gpio_platform_data {
+	struct gpio_desc *gpio_pin;
 	bool assert_falling_edge;
 	bool capture_clear;
-	unsigned int gpio_pin;
-	const char *gpio_label;
 };
 
 #endif /* _PPS_GPIO_H */
-- 
2.12.3

