Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 28 Nov 2018 12:09:42 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 7E78D580460;
	Tue, 27 Nov 2018 17:22:13 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga007-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 27 Nov 2018 17:22:12 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AiOAG3R2qQqHK0u3hsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segTKP/xwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJPUMhRSSJPH4Cy?=
 =?us-ascii?q?b4UAAOUdIOlXrYfyp0AWrRa8HgSsGP/jxyVUinPqx6A2zeIsGhzG0gw6GNIOtW?=
 =?us-ascii?q?zZoszwNKgIS+C+0bTGwi/Fb/xL3jf99pLHchQ8qvyLWrJwatDeyU8yGAPCkFWd?=
 =?us-ascii?q?sovlPyiP2eQLrmeb6PRgWfizhG4grgF8uz6izdoihInOg4Ia0FHE9SNhzYYxJt?=
 =?us-ascii?q?24TUp7bcSjEJtKuCGXMZZ9TMA6Q2xwpio21rkLtYSmcCUE1pgr3QPTZv+bf4SS?=
 =?us-ascii?q?4x/uVv6dLSl5iX57ZL6yggu+/VS9xeD5Ssa4zFJHojZAn9XSqnwByxne582HR/?=
 =?us-ascii?q?Z4/EqtxC2A2B3V5+pZO047j7DbJIQkwrMolpocr0DDHijulUXog6+ZaF8k9vKr?=
 =?us-ascii?q?6+v5eLXmoIGTN4tuhgH5KKQuldSzAeU+MgcQQ2iW4fqw2KHn8EHjXblHgOM6nr?=
 =?us-ascii?q?PEvJ3ZOcgXvK+0Dg1N3oYm8Rm/DjOm0NoCnXkAKVJIYBaHj4nvO1HTL/H0FPS/?=
 =?us-ascii?q?jEq2kDdt2f/GOqTtApLDL3jFjrjhZ61w61BTyAUt19BT/ZFUBa8bIPL1REDxsM?=
 =?us-ascii?q?bUDhgjMwy72+rnEsly1psCWWKTBa+UKKfSsV6L5u0xOeWNa5IVtS35K/gk4f7u?=
 =?us-ascii?q?kHA4lUUcfamvwZsYdnS4Eu56LEWeZHrmms0BHnsSvgoiUOzqj0WPUT5JaHazQ6?=
 =?us-ascii?q?Iz/DY7BJimDYfeXI+thrOB0Ty/Hp1XYGBGF1+NHW3pd4WCR/cDdiaSLtV9nTwD?=
 =?us-ascii?q?ULirU5Uh2g22tA/m17pnKfLZ+i8ftZ39ztR15OrTlRc09TxzFMmd12CNT2dpnm?=
 =?us-ascii?q?IHXTM23aZ/oVBjxVeHy6R3n/tYFdlL7fNTTgg6LYLcz/B9C93qQA3BZdeJSFGl?=
 =?us-ascii?q?Qtm8GzE+VNAxzsQKY0Z8HdWikx/C0zCrA78Ti7yEGpg0/rjA0Hj2IsZ302zG27?=
 =?us-ascii?q?U5j1k6XstPMnWrhq1l+AjVHYLJl0SZmLysdaQTxyPN8GaDzWyTvEBXSgJwUKPF?=
 =?us-ascii?q?XWwBaUvSt9j2+kTCT7q2A7Q9LgRB0dKCKrdNatDxkFpJXunjN8rEb2KxgWiwAw?=
 =?us-ascii?q?2Iya2KbIbtf2Ud3yDdCEwfngAX/HaGMxU+Byi7r2LfCjxuCUzgY0f2/eZir3O7?=
 =?us-ascii?q?S1c+zxuWYE15y7q15hkViOSBRPwJwLILpj0tqzVuE1a7xNLZFdyAqhFlfKVdZ9?=
 =?us-ascii?q?M9/VhG2XjYtwx7IpyvMaRiikQCfARwukPkzw93BZlYkcg2sHMqyxJ/Kb6Z0FNE?=
 =?us-ascii?q?cDOYwZDwO73NJmnu5hyvbLTW2lXf0NaQ9acC8/A4q1TlvAG0GUsu6XRn099J03?=
 =?us-ascii?q?SC4pXGFhYdUZX0Ukwv7Rh1u6naYjUh54PTzXBjK620vSHN2t03BOop0A2vf8pC?=
 =?us-ascii?q?P6yeEg/yEMoaB9a1JewumlipaA8EPe9I+K41OcOma+WJ2KqxMOl8mzKmiHxN4J?=
 =?us-ascii?q?ph3UKU6yp8VunI0o4FwvGFxAeISy3wjVahss/tn4BEaiofHm6+ySjiGY5Qabd+?=
 =?us-ascii?q?fYcNCWeyPcK3ws9yiILqW35d7FSjHU8J2Ne1eRqOaFzwxRdQ1UULrnO9gyu30j?=
 =?us-ascii?q?t0nysvrqWBxizOwv3uewYdNW5PWWZtk03sIY+yj90BWEiobg4plAaq5Ergxqhb?=
 =?us-ascii?q?orh/IHfXQUtSYyf2KGRiWLOqtrWee85P9I8osSJPXeW8YFCWUL78rwEB0yP+GW?=
 =?us-ascii?q?tT3zQ7dzCsupXkkB12kmOdLHBvrHXHfcF83wvQ5NvZRfRJxDoJWDF4iSXLBli7?=
 =?us-ascii?q?J9Sp/8+bl43AsuC9UGKtTIZTfjPozYODtSu743NlARukkvC3m93nFxU60CDh29?=
 =?us-ascii?q?lrUyXIsAjzYo3x26umNuJne1FiBEXg5MpiBoF+jowwiYkQ2HcAgZWZ53gHkWb1?=
 =?us-ascii?q?MdhA3aL+bXwNRSMEwtLP4Qjl3lFjIWyNx47jSnqdxc5hbcGgYmwKwiI989xKCK?=
 =?us-ascii?q?CM4bxHhyR1o0C0rQLMYfdnmDcdxuAj6Hobg+EPpQoswT+RArEUHUlEIyPskw6E?=
 =?us-ascii?q?4My5rKVSfGyva6S/1FJindC9C7GPugRcWHf6epg4ByNx4NtwMEnQ0HLt8IHrY8?=
 =?us-ascii?q?ffbcgcthCPlxfAju5VKI8+l/YQhCpnP379smMhy+IhkRNu2pS6tpCdK2px5KK5?=
 =?us-ascii?q?HgJYNjrtasMP/THtiLxSn8eM0ICpA5VhAS4LXJrzQPKsETISs+nnNgmUHD09rH?=
 =?us-ascii?q?ebBaTQHQuF5Eh6qHLPFoihN2uLK3kB0dViWB6dKVREjw8OWzU6moM5GhquxMz8?=
 =?us-ascii?q?a0p54jER5ljlqhpD0O5oNh//UnvBqwescDs7VJ+fLB9O5AFY+0jVKdCe7v50Hy?=
 =?us-ascii?q?xA/J2utgmNJXKAZwhSEWEFQE+EB03gPrmz49nP6fOYC/G6L/vPZ7WOtONfW+2J?=
 =?us-ascii?q?xZKpzotp4TKMOt+TMXllCv0xwlBDUmxhG8TFhzUPTDQaliLKb86GvRe85zd4rs?=
 =?us-ascii?q?al/PTwXwLv44SPBqBWMdVu/RC2nKiCO/SRhCZ/NTZXyJcMyWXUx7gY2V4Ykztu?=
 =?us-ascii?q?eCW1EbQcqS7NS7rdmq9JAB4aaCNzN8pI47g/3glXPs7bhc361qRljv4uEFpFUV?=
 =?us-ascii?q?3hmse0Zc0FOW29NVXHBFqVO7SCPzHE38b3YaakQ71KkOpUrwGwuSqcE0L7JDuD?=
 =?us-ascii?q?iiLmVwqxPuBMli2bOB1etZq5chZsD2jjUd3nZge6MN9xkT0537k0imnWOm4bND?=
 =?us-ascii?q?h2a1lNoaGI7SNEnvV/HHRM7mZkLemBgSqW8/PUJYoWsfR1BCR5jOZa4HU8y7tI?=
 =?us-ascii?q?4yBIXv11mC3OrtFwp1GqiPWAyj1iUBBWsDZEmJqLvVl+OaXe7pRBWWzL/BQI7W?=
 =?us-ascii?q?WRDRQFv9pkCt31tKBWxdjCj6bzKDZE89LJ8soQHcnUKMSbMHU/NRrlAiLbDAwA?=
 =?us-ascii?q?TW3jCWaKvFBQjvyUvkaUtYQzsJWkzIESR6FWUhouF+gGA15oNNsYKZxzU3Uvlr?=
 =?us-ascii?q?vN3+AS4n/rixzYXo1ht5bLUeybBb27Ly2Qi7VDeTMP2rr+IYMNcIb83hoxORFB?=
 =?us-ascii?q?gI3WFh+IDph2qSp7Y1px+R0V/Q=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ADAADs7P1bh0O0hNFkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGBMIE5gQInjBGOFRSJCYRqiTmBJANMEgEBGAcMAYd?=
 =?us-ascii?q?aIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2JAGCYQEBAQECAQECNwYBATcBB?=
 =?us-ascii?q?AEJAQEKFQMJJQMMBSABBQEBIRMFgxwBgXQFCAEECpsBPIodgh+CdgEBBYEwAYY?=
 =?us-ascii?q?OAwUSEIpPgRwXPoECP4ERgxJbgioZAYErEYYBkBmFKIpNCYZ9gy2GfCMKiUiHO?=
 =?us-ascii?q?Y1HikoGAgkHDyGBJYINTSMVgycfgXwJGoNKhRSFYB8yAYEBAwEBIRMLAYlKASW?=
 =?us-ascii?q?CJwEB?=
X-IPAS-Result: =?us-ascii?q?A0ADAADs7P1bh0O0hNFkGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGBMIE5gQInjBGOFRSJCYRqiTmBJANMEgEBGAcMAYdaIjQJDQEDAQEBA?=
 =?us-ascii?q?QEBAgETAQEBCA0JCCkjDII2JAGCYQEBAQECAQECNwYBATcBBAEJAQEKFQMJJQM?=
 =?us-ascii?q?MBSABBQEBIRMFgxwBgXQFCAEECpsBPIodgh+CdgEBBYEwAYYOAwUSEIpPgRwXP?=
 =?us-ascii?q?oECP4ERgxJbgioZAYErEYYBkBmFKIpNCYZ9gy2GfCMKiUiHOY1HikoGAgkHDyG?=
 =?us-ascii?q?BJYINTSMVgycfgXwJGoNKhRSFYB8yAYEBAwEBIRMLAYlKASWCJwEB?=
X-IronPort-AV: E=Sophos;i="5.56,288,1539673200"; 
   d="scan'208";a="53598001"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 27 Nov 2018 17:22:11 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727166AbeK1MSy (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 28 Nov 2018 07:18:54 -0500
Received: from mail-pl1-f193.google.com ([209.85.214.193]:45850 "EHLO
        mail-pl1-f193.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726539AbeK1MSx (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 28 Nov 2018 07:18:53 -0500
Received: by mail-pl1-f193.google.com with SMTP id a14so16484066plm.12
        for <linux-kernel@vger.kernel.org>; Tue, 27 Nov 2018 17:19:07 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=osandov-com.20150623.gappssmtp.com; s=20150623;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=BpfgkUNrRroczuw1GG3+bTnZzaoQRodz65Oal2/wuys=;
        b=nZFZzKRzCqT2wl+PXKM+ZP0a7tdSxxXdlZfFeGVEokdMKNWwAWT3qwshqD0Ci62h9b
         BdlZYjJXCrZ7tzKv1bQ+bXXF+dCQrbvhA9kVdnaafJe6BWPJ7GfJYFyDYPB4hwMgu2jP
         pN+NwdocPwugGi39rCa58oKzEMb0hkzs1NOo1p6dTKTzcupFYylpMMveHRj36RTjQKRW
         /mCeNHkzTTkmaXHVMMJtNe9I+s2xuaL4DMJ3Kd1ibaJmODDxHWslsuBRPfAJVzJ7M6Du
         phV+3c8yEbF6uIXheiYYZOvkU6H+xZ70chh8FRf9+I9G1QIXwW10bhSzY5wxeLk0ILc5
         2ijg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:message-id:references
         :mime-version:content-disposition:in-reply-to:user-agent;
        bh=BpfgkUNrRroczuw1GG3+bTnZzaoQRodz65Oal2/wuys=;
        b=lLv6WsHQ40SoNhu8+VuwAZt6YXolWXZAQWrz41tRTMZrLzefkXkd8MH1PykcsfCWvN
         SgstfyTb3lXg4deghMQ0+15QD4kiHS6jvdSTUmyUl63GJfjR77LFFyWwSh7h+TZNEI6s
         eHz/jC6luYyccCQDoHBTSFXtQG8ebxxorbW4Nw4kpIcI9VXNMfNEqeKwVQWzPFg2jC65
         Ez1Q+2WVV8ucXmT9jfFk6ZWVy9nAZpWrwZZb2ZDwC8FFiZZfcLWZAQ/P6JeXyXu9TISL
         cjE3g6m+N0ftOULLoWqqQDxJ/A9DfsbtBCDc1+/YCiS/7jMsR9ZtoR4EnSRQZW4Xi8zJ
         GcWg==
X-Gm-Message-State: AA+aEWZRJtDXrFauqrfsEpL5TRsI2UFjhVMo69xFxfD1V+1yVFuKfs4C
        0Ko/B8iAphTwAcwB7Cld07Y9KQ==
X-Google-Smtp-Source: AFSGD/V3qjtyn+cqBIilSlUGzty/nw5c4DXhfM8qteCVdIWCzKi2Jwe/cJwYcME84kJctlvqXGjJ0A==
X-Received: by 2002:a17:902:ab84:: with SMTP id f4mr34108149plr.207.1543367946884;
        Tue, 27 Nov 2018 17:19:06 -0800 (PST)
Received: from vader ([2620:10d:c090:200::5:71bd])
        by smtp.gmail.com with ESMTPSA id m67sm12842680pfb.25.2018.11.27.17.19.05
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Tue, 27 Nov 2018 17:19:06 -0800 (PST)
Date: Tue, 27 Nov 2018 17:19:04 -0800
From: Omar Sandoval <osandov@osandov.com>
To: Steven Sistare <steven.sistare@oracle.com>
Cc: mingo@redhat.com, peterz@infradead.org, subhra.mazumdar@oracle.com,
        dhaval.giani@oracle.com, daniel.m.jordan@oracle.com,
        pavel.tatashin@microsoft.com, matt@codeblueprint.co.uk,
        umgwanakikbuti@gmail.com, riel@redhat.com, jbacik@fb.com,
        juri.lelli@redhat.com, valentin.schneider@arm.com,
        vincent.guittot@linaro.org, quentin.perret@arm.com,
        linux-kernel@vger.kernel.org, Jens Axboe <axboe@fb.com>
Subject: Re: [PATCH v3 01/10] sched: Provide sparsemask, a reduced contention
 bitmap
Message-ID: <20181128011904.GR846@vader>
References: <1541767840-93588-1-git-send-email-steven.sistare@oracle.com>
 <1541767840-93588-2-git-send-email-steven.sistare@oracle.com>
 <7a3e87ac-db63-27c5-8490-2330637e59b1@oracle.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <7a3e87ac-db63-27c5-8490-2330637e59b1@oracle.com>
User-Agent: Mutt/1.11.0 (2018-11-25)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Tue, Nov 27, 2018 at 10:16:56AM -0500, Steven Sistare wrote:
> On 11/9/2018 7:50 AM, Steve Sistare wrote:
> > From: Steve Sistare <steve.sistare@oracle.com>
> > 
> > Provide struct sparsemask and functions to manipulate it.  A sparsemask is
> > a sparse bitmap.  It reduces cache contention vs the usual bitmap when many
> > threads concurrently set, clear, and visit elements, by reducing the number
> > of significant bits per cacheline.  For each 64 byte chunk of the mask,
> > only the first K bits of the first word are used, and the remaining bits
> > are ignored, where K is a creation time parameter.  Thus a sparsemask that
> > can represent a set of N elements is approximately (N/K * 64) bytes in
> > size.
> > 
> > Signed-off-by: Steve Sistare <steven.sistare@oracle.com>
> > ---
> >  include/linux/sparsemask.h | 260 +++++++++++++++++++++++++++++++++++++++++++++
> >  lib/Makefile               |   2 +-
> >  lib/sparsemask.c           | 142 +++++++++++++++++++++++++
> >  3 files changed, 403 insertions(+), 1 deletion(-)
> >  create mode 100644 include/linux/sparsemask.h
> >  create mode 100644 lib/sparsemask.c
> 
> Hi Peter and Ingo,
>   I need your opinion: would you prefer that I keep the new sparsemask type, 
> or fold it into the existing sbitmap type?  There is some overlap between the 
> two, but mostly in trivial one line functions. The main differences are:

Adding Jens and myself.

>   * sparsemask defines iterators that allow an inline loop body, like cpumask,
>   whereas the sbitmap iterator forces us to define a callback function for
>   the body, which is awkward.
>
>   * sparsemask is slightly more efficient.  The struct and variable length
>   bitmap are allocated contiguously,

That just means you have the pointer indirection elsewhere :) The users
of sbitmap embed it in whatever structure they have.

>   and sbitmap uses an extra field "depth"
>   per bitmap cacheline.

The depth field is memory which would otherwise be unused, and it's only
used for sbitmap_get(), so it doesn't have any cost if you're using it
like a cpumask.

>   * The order of arguments is different for the sparsemask accessors and
>   sbitmap accessors.  sparsemask mimics cpumask which is used extensively
>   in the sched code.
> 
>   * Much of the sbitmap code supports queueing, sleeping, and waking on bit
>   allocation, which is N/A for scheduler load load balancing.  However, we
>   can call the basic functions which do not use queueing.
> 
> I could add the sparsemask iterators to sbitmap (90 lines), and define
> a thin layer to change the argument order to mimic cpumask, but that
> essentially recreates sparsemask.

We only use sbitmap_for_each_set() in a few places. Maybe a for_each()
style macro would be cleaner for those users, too, in which case I
wouldn't be opposed to changing it. The cpumask argument order thing is
a annoying, though.

> Also, pushing sparsemask into sbitmap would limit our freedom to evolve the
> type to meet the future needs of sched, as sbitmap has its own maintainer,
> and is used by drivers, so changes to its API and ABI will be frowned upon.

It's a generic data structure, so of course Jens and I have no problem
with changing it to meet more needs :) Personally, I'd prefer to only
have one datastructure for this, but I suppose it depends on whether
Peter and Ingo think the argument order is important enough.

> FWIW, here is the amount of code involved:
> 
> include/linux/sbitmap.h
>   250 lines basic operations
>   284 lines for queueing
>   ---
>   534 lines total
> 
> lib/sbitmap.c
>   201 lines basic operations
>   380 lines for queueing
>   ---
>   581 lines total
> 
> include/linux/sparsemask.h
>   260 lines total
>   https://lkml.org/lkml/2018/11/9/1176
> 
> lib/sparsemask.c
>   142 lines total
>   https://lkml.org/lkml/2018/11/9/1176
> 
> - Steve
