Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 05 Dec 2018 08:45:10 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 596D1580375;
	Tue,  4 Dec 2018 14:17:47 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga007-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 04 Dec 2018 14:17:46 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A80jsdBMHRfPBkaxeb44l6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KPj5osbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRsleVyJDDY28?=
 =?us-ascii?q?YYUBDPcPM/hEoInmv1sDrwCzBRWwCO711jNEmmP60K883u88EQ/GxgsgH9cWvX?=
 =?us-ascii?q?rJq9X1MqgSWv2zwqnJ0DXIcvRb2TP86IjVaBwhuvaMXbR/ccbL00YjCQ3Ig06f?=
 =?us-ascii?q?qYzgJTyV1+ANv3KH4OpnUOKikmgqoBxyrDi33soglJXFi4YPxlzZ+yh13pw5Kc?=
 =?us-ascii?q?C7RUJne9KpEZlduzmEO4dqRs4uWWJltSYgxrEbuJO3YDIGxIkjyhPRbfGMbpKG?=
 =?us-ascii?q?7Qj5VOmLJDd1nHJld6y7hxa16UWg1OL8Wdeu0FpQrSpKjMPMtnYT2BzX8MSHTe?=
 =?us-ascii?q?F9/ki51TaO0QDc9P1ELFgqmabHL5Mt2KM8m5QNvUjZAyP7m1n6gLWXe0gm4uSo?=
 =?us-ascii?q?7v7oYrTipp+SLY90jQT+P7wqmsy+B+Q4LwcPU3GY+euizr3j+1P2QLFTgv0xnK?=
 =?us-ascii?q?jZto7VJd4Aq66nDA9azJwj5wy8Dzi4ytQYm2cILFZfdBKAlYjpNEnCIOrkAven?=
 =?us-ascii?q?n1SsjDBryujCPr3gAZXCMGLPkbj8fbtm705cyQwzzc1Q5p5OC7EBJu7zVVH1tN?=
 =?us-ascii?q?DCEhA5NAm0yf79CNphzoMeRX6PAqiBPaPSq1CI5/4vLPOLZIMPuDb9NuIq5/jh?=
 =?us-ascii?q?jXIinV8dfK+p3YYYaXyiH/RmJVmZbmTogtsbDWgKuQ8+RvTwiFKeST5Te2qyX6?=
 =?us-ascii?q?Uk6zE5D4KpE53PRoOqgLyH2ie7GYZbZmRHClCKDHfpeJ+IW/YKaCKOPMBhliYI?=
 =?us-ascii?q?WqSmS48kzRuurhP1y6J7LurI/S0VrYjs1MN15+3UlhE+7yZ0AN6f02yWS2F0n2?=
 =?us-ascii?q?UIRyI53axloEx9zEuD3rZ8g/BCCdNT4PZJWB8gNZHA1+x6F8zyWgXZc9eKUlmm?=
 =?us-ascii?q?RM+qATUwTt0rxd8ObF1wG9GjjhDFwiqrDKUZl72NBJwo7K3c22L9KNp6y3bDzK?=
 =?us-ascii?q?MhlUUpQtNTNW26ga5y7xXcCJTXk0qHjaqqdb4T3CjW9Gidy2qCu0VYUA11UaXB?=
 =?us-ascii?q?Rn0fYkrWrdLk5kLNVbOuCLInMhdfxs6GMKdFdtrpjVBeTvf5JNvee36xm3u3BR?=
 =?us-ascii?q?uQ27yDdpTqdHsH0CXdEkcElRsT8miANQUlAiehomTeDCFhFF71YkPs9/V+p22/?=
 =?us-ascii?q?TkMu0w6KaEhh3aKv+hEJnfycV+8T3rUctSc9qjV0GVG9387WC9uAvQZhYL9QYd?=
 =?us-ascii?q?Qn4FdD1GLZsQN9M4ekL6BjgF4ebgt2s1nv1xVxFoVPj8wqoGk2wwp1LKKSyElB?=
 =?us-ascii?q?eC+A3ZDsJr3XLXH/8wqra6HI1VDRztaX9r0U5/QltlrspgepFkkl83V5yNRV13?=
 =?us-ascii?q?qc5pPXDAsdS57xU0A39wRkqLHeeCUy+4TU1Xh0O6murjDCw84pBPciyhu4f9Zf?=
 =?us-ascii?q?LbmIGxPoH8wbB8ihMuoqm1eyYxIAPeBS8rM0Psy8e/uH3q6rIPhvnDa8gWtb54?=
 =?us-ascii?q?B911qG9zBgRe7Qw5YF3/aY0xOdVzf9kFiuqNr3lp1DZT0IGGqw1zLkBI9IaqJu?=
 =?us-ascii?q?Z4kLDXqhLNOtxtV5gZ7gQHpY9F+lB1Mb186lYxuSb1rh3QJO0UQbu2ComSy9zz?=
 =?us-ascii?q?ZsiTEmsrKf3DDSw+TlbBcGOm9LSHNijFv2Ooi0ktYaUVOsbwgokhul+En7y7Ja?=
 =?us-ascii?q?pKR5M2ncX0NIczLqIGFlV6u6rqCCbNJX6JM0rSVXV/yxYVKARb7noBsa0CTjE3?=
 =?us-ascii?q?FFxD8hdDGquZT5nxpkh2KbN3tzqHvZecdtxRbQ/tDcRPhR3iYYSyl8kzXYGl+8?=
 =?us-ascii?q?P9yx99WOi5jDqvy+V36mVpBLcSjk14SAuDG55W1rBx2yhPSzmtzhEQgn3i73zd?=
 =?us-ascii?q?hqVSPUrBniZonnzbi1MeVifkNwHl/z99J6Gp1ikos3nJwQ2mIVhpSP8XoHjGf8?=
 =?us-ascii?q?K9Nb2a3lYXoJRD4LxcPV4Qf/1E1iKHKJ25z2VnGHzsR9YNm6Z3sc2jgh4MBSFK?=
 =?us-ascii?q?eU8LtEkDNwolq5rgLee+JxnzkDxvs19H4VnfsJtxEzwSWHDbAfBk1YPS3qlxSV?=
 =?us-ascii?q?4NGytqRXZGCzcbeu0Epyh8yuDLaHogtEQnb2Zo8iHTNs7sV4KF/MzHrz6oT+dN?=
 =?us-ascii?q?jRd90TsACUkwzbj+hUM58xkvsKhSx6OWPyp3Elyug7jQBw0pG+poSIN2Jt/Keh?=
 =?us-ascii?q?CB5CKjL1f98T+i3qjatGhcmZxYevHpF8GjkRWJvoUOmlEDYTtfThKgaPHycwqn?=
 =?us-ascii?q?adGbrDAwCf7F1qoG7IE5CuL3uXPmUWzc1+RBmBI0xSmAIUUy8/npEnDQCm3tDh?=
 =?us-ascii?q?fF165jAM5V74tx1MxfhzNxTkVmffpQGoaio7SZSFLRpW6B1C6FnRMcCE8u1zGC?=
 =?us-ascii?q?RY9IW7rAORMmybexhIDWYRV02EAFDjI6Cu5cTa/OieHOa+NPzOYbOBqeFFU/eI?=
 =?us-ascii?q?xJSv0pZp/jqWN8WPOGViAOM/2kZZQX95HMHZkS0VSyMLjyLNc9KbpBCk9y13sM?=
 =?us-ascii?q?+/8ffrWAHu5YeVCLtSK9Jv+x+ojqeZKu6Qnz10KTJZ1pMK2H/Jx6IT3F8UiyFy?=
 =?us-ascii?q?aTatFa4MujLKTKLVgqVXFQIUaztvNMtU6KIxxhNCOdPAhdPvyLF5juQ5C1NEVV?=
 =?us-ascii?q?H6nsGpZMoKI3yyNV/dBUaLMqiGKiPPw83tfay8TrhQhv1OtxKsoTabD1PjPjOb?=
 =?us-ascii?q?mjn1VhCvNPtAgz2BMBNCuIGybBBtBHPnTNLnbB27LdB2gSc3wb0ymnPFK2ocPS?=
 =?us-ascii?q?JgfENKq72a9TlYjelnG2xd8nplKvGJmiaD4OneL5YWsP1rDTx1luJa+ns6zbRV?=
 =?us-ascii?q?4TpARPx0nivSs9Fvr0unkumJ1jpoTh5OpixXi4KMuEUxcZneo5xKVV7K9lQG6m?=
 =?us-ascii?q?DDJQ4Noo5eDdvg84RR15CbkKPubixF9d2S9JFHL8fRIcODdnEmNEy6S3bvEAIZ?=
 =?us-ascii?q?QGvzZinkjEtHnaTXryXNow=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AGAwBQ/AZch0O0hNFkHgEGBwaBVAYLA?=
 =?us-ascii?q?YFaghEng3mDe5AsKYFkFGiIAoESjygwEwGHTCI3Bg0BAwEBAQEBAQIBEwEBAQg?=
 =?us-ascii?q?NCQgpIwyCNiQBgmIBAgMBAiAEGQEbHQEDAgkBAQUFCw0CAiYCAgMfAREBBQEcG?=
 =?us-ascii?q?QWCUUuBaQEDFQWZeDyLDXwWBQEXgncFhEQKGScNXYE3AgYSeYsTeoEcgRGCXTW?=
 =?us-ascii?q?IBYI1IgKBKgEBh3sKhgF9UI51VAEGAQEBgVWPbBiRJphoMIE7gXczGiOBAW2BT?=
 =?us-ascii?q?oIbDBeDSop0HjOBBQEBimEBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AGAwBQ/AZch0O0hNFkHgEGBwaBVAYLAYFaghEng3mDe5A?=
 =?us-ascii?q?sKYFkFGiIAoESjygwEwGHTCI3Bg0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBg?=
 =?us-ascii?q?mIBAgMBAiAEGQEbHQEDAgkBAQUFCw0CAiYCAgMfAREBBQEcGQWCUUuBaQEDFQW?=
 =?us-ascii?q?ZeDyLDXwWBQEXgncFhEQKGScNXYE3AgYSeYsTeoEcgRGCXTWIBYI1IgKBKgEBh?=
 =?us-ascii?q?3sKhgF9UI51VAEGAQEBgVWPbBiRJphoMIE7gXczGiOBAW2BToIbDBeDSop0HjO?=
 =?us-ascii?q?BBQEBimEBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,315,1539673200"; 
   d="scan'208";a="140782987"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 04 Dec 2018 14:17:44 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726273AbeLDWRl (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 4 Dec 2018 17:17:41 -0500
Received: from mail-qt1-f193.google.com ([209.85.160.193]:34031 "EHLO
        mail-qt1-f193.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725875AbeLDWRl (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 4 Dec 2018 17:17:41 -0500
Received: by mail-qt1-f193.google.com with SMTP id r14so20110403qtp.1
        for <linux-kernel@vger.kernel.org>; Tue, 04 Dec 2018 14:17:38 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=IUpIVK4rV0KznLNOMeYnzUDTS1gvk86peyvDqC5jh3k=;
        b=bQQ2AwMv5wP3l9ZBAWyBhWIxJo5IU+DOvq5pqYUb6IRkvK5w1gn5mgvfjHbxD6Xpy6
         rKt+iPY2L1mM3l9TZj4Vb2XI+T9Qyy/uRDYDG9epOaCBrtX2srmIjYdJyQTpKQAcyIRb
         oNZRE4z64g/rIeXuSPVi+2vAmiL8GPH9Z0q24Dq5iQQijj3BQusjScnXWOCrtpIQQ4OC
         zBedClpdrtvr/9y7/E5wu1QCyKModZydeKp4rLgKZHcQAE2/TJT2Fpr6dnrYn7nIAa8H
         bc5Im5txa7Cn2QZCenB+s3KZdRWYc6wYhUkerWnO7e+Mnq9Nz5U36Y5RYLfhRXl6ETlm
         0vyQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=IUpIVK4rV0KznLNOMeYnzUDTS1gvk86peyvDqC5jh3k=;
        b=KrQZzxNE/KwfjESl8Pj5jO+vSowt8j09X6y8sANqpnN5aIekc3wuOcKt/JSEnRIvH6
         p33Zp+cgL7H7d2H1SJUw5XgXaoMSjUYY9cM0F+SQuUgF4RbkaD8Pk4fMaFpixd8MPxUf
         3sKTkrzSbBaj3n2lgHwYYtjphanq2fg0wbm709EBsUATl+FC2fJ7Jv14HAyUOYnVvOTZ
         OfdIu/qrC9LfYWm67B53N+XkM80QW+MWuP/LAFIGrQcgPO6GV8o1hWC3/0boeq1gARUj
         oN+AbPQya6fbgXz8b75db3DJk37uSHj4IrSBN+ZXIxSsyK7OKMK9FrDSxlGWti026kAC
         4Msw==
X-Gm-Message-State: AA+aEWZSXcsbNnCt80XwzdsM+JTqLKUy7WYt8d688oQsD/DBhztBfgXT
        GLw3U8WxaaZRjJZhHuzCYtGQ7Y8FZhvab0hFn7NU4mla
X-Google-Smtp-Source: AFSGD/XUQQ9j2seAK5NTP3k0ScbSZIBOAgjlygiIuTHHA8RWh6N+ES0oKZpi9Ed5jZrVjl4jszhsTj+LtA7L0QUjTvI=
X-Received: by 2002:a0c:9384:: with SMTP id f4mr21891887qvf.239.1543961857520;
 Tue, 04 Dec 2018 14:17:37 -0800 (PST)
MIME-Version: 1.0
References: <20181204203420.1683114-1-mbd@fb.com>
In-Reply-To: <20181204203420.1683114-1-mbd@fb.com>
From: Song Liu <liu.song.a23@gmail.com>
Date: Tue, 4 Dec 2018 14:17:25 -0800
Message-ID: <CAPhsuW4qE3dtbvA1E=CGJ6XXMq4ykz=PR-vpww0zxJPgjw+n5Q@mail.gmail.com>
Subject: Re: [PATCH] perf: allow specifying proc-map-timeout in config file
To: mbd@fb.com
Cc: Peter Zijlstra <peterz@infradead.org>, mingo@redhat.com,
        acme@kernel.org, alexander.shishkin@linux.intel.com,
        jolsa@redhat.com, namhyung@kernel.org,
        open list <linux-kernel@vger.kernel.org>
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Tue, Dec 4, 2018 at 12:36 PM Mark Drayton <mbd@fb.com> wrote:
>
> The default timeout of 500ms for parsing /proc/<pid>/maps files is too
> short for profiling many of our services. This can be overridden by
> passing --proc-map-timeout to the relevant command but it'd be nice to
> globally increase our default value. This patch permits setting a
> different default with the core.proc-map-timeout config file parameter.
>
> Signed-off-by: Mark Drayton <mbd@fb.com>
Looks good to me.

Acked-by: Song Liu <songliubraving@fb.com>

> ---
>  tools/perf/Documentation/perf-config.txt |  6 +++++
>  tools/perf/builtin-kvm.c                 |  6 ++---
>  tools/perf/builtin-record.c              |  8 +++---
>  tools/perf/builtin-top.c                 |  4 +--
>  tools/perf/builtin-trace.c               |  5 ++--
>  tools/perf/perf.h                        |  1 -
>  tools/perf/tests/code-reading.c          |  2 +-
>  tools/perf/tests/dwarf-unwind.c          |  2 +-
>  tools/perf/tests/mmap-thread-lookup.c    |  4 +--
>  tools/perf/util/config.c                 |  4 +++
>  tools/perf/util/event.c                  | 32 ++++++++++--------------
>  tools/perf/util/event.h                  |  8 +++---
>  tools/perf/util/machine.c                |  4 +--
>  tools/perf/util/machine.h                |  3 ---
>  14 files changed, 39 insertions(+), 50 deletions(-)
>
> diff --git a/tools/perf/Documentation/perf-config.txt b/tools/perf/Documentation/perf-config.txt
> index 32f4a898e3f2..661b1fb3f8ba 100644
> --- a/tools/perf/Documentation/perf-config.txt
> +++ b/tools/perf/Documentation/perf-config.txt
> @@ -199,6 +199,12 @@ colors.*::
>                 Colors for headers in the output of a sub-commands (top, report).
>                 Default values are 'white', 'blue'.
>
> +core.*::
> +       core.proc-map-timeout::
> +               Sets a timeout (in milliseconds) for parsing /proc/<pid>/maps files.
> +               Can be overridden by the --proc-map-timeout option on supported
> +               subcommands. The default timeout is 500ms.
> +
>  tui.*, gtk.*::
>         Subcommands that can be configured here are 'top', 'report' and 'annotate'.
>         These values are booleans, for example:
> diff --git a/tools/perf/builtin-kvm.c b/tools/perf/builtin-kvm.c
> index 2b1ef704169f..3d4cbc4e87c7 100644
> --- a/tools/perf/builtin-kvm.c
> +++ b/tools/perf/builtin-kvm.c
> @@ -1364,7 +1364,7 @@ static int kvm_events_live(struct perf_kvm_stat *kvm,
>                         "show events other than"
>                         " HLT (x86 only) or Wait state (s390 only)"
>                         " that take longer than duration usecs"),
> -               OPT_UINTEGER(0, "proc-map-timeout", &kvm->opts.proc_map_timeout,
> +               OPT_UINTEGER(0, "proc-map-timeout", &proc_map_timeout,
>                                 "per thread proc mmap processing timeout in ms"),
>                 OPT_END()
>         };
> @@ -1394,7 +1394,6 @@ static int kvm_events_live(struct perf_kvm_stat *kvm,
>         kvm->opts.target.uses_mmap = false;
>         kvm->opts.target.uid_str = NULL;
>         kvm->opts.target.uid = UINT_MAX;
> -       kvm->opts.proc_map_timeout = 500;
>
>         symbol__init(NULL);
>         disable_buildid_cache();
> @@ -1453,8 +1452,7 @@ static int kvm_events_live(struct perf_kvm_stat *kvm,
>         perf_session__set_id_hdr_size(kvm->session);
>         ordered_events__set_copy_on_queue(&kvm->session->ordered_events, true);
>         machine__synthesize_threads(&kvm->session->machines.host, &kvm->opts.target,
> -                                   kvm->evlist->threads, false,
> -                                   kvm->opts.proc_map_timeout, 1);
> +                                   kvm->evlist->threads, false, 1);
>         err = kvm_live_open_events(kvm);
>         if (err)
>                 goto out;
> diff --git a/tools/perf/builtin-record.c b/tools/perf/builtin-record.c
> index 488779bc4c8d..ebb8922d436b 100644
> --- a/tools/perf/builtin-record.c
> +++ b/tools/perf/builtin-record.c
> @@ -641,8 +641,7 @@ static int record__synthesize_workload(struct record *rec, bool tail)
>         err = perf_event__synthesize_thread_map(&rec->tool, thread_map,
>                                                  process_synthesized_event,
>                                                  &rec->session->machines.host,
> -                                                rec->opts.sample_address,
> -                                                rec->opts.proc_map_timeout);
> +                                                rec->opts.sample_address);
>         thread_map__put(thread_map);
>         return err;
>  }
> @@ -857,7 +856,7 @@ static int record__synthesize(struct record *rec, bool tail)
>
>         err = __machine__synthesize_threads(machine, tool, &opts->target, rec->evlist->threads,
>                                             process_synthesized_event, opts->sample_address,
> -                                           opts->proc_map_timeout, 1);
> +                                           1);
>  out:
>         return err;
>  }
> @@ -1546,7 +1545,6 @@ static struct record record = {
>                         .uses_mmap   = true,
>                         .default_per_cpu = true,
>                 },
> -               .proc_map_timeout     = 500,
>         },
>         .tool = {
>                 .sample         = process_sample_event,
> @@ -1676,7 +1674,7 @@ static struct option __record_options[] = {
>         parse_clockid),
>         OPT_STRING_OPTARG('S', "snapshot", &record.opts.auxtrace_snapshot_opts,
>                           "opts", "AUX area tracing Snapshot Mode", ""),
> -       OPT_UINTEGER(0, "proc-map-timeout", &record.opts.proc_map_timeout,
> +       OPT_UINTEGER(0, "proc-map-timeout", &proc_map_timeout,
>                         "per thread proc mmap processing timeout in ms"),
>         OPT_BOOLEAN(0, "namespaces", &record.opts.record_namespaces,
>                     "Record namespaces events"),
> diff --git a/tools/perf/builtin-top.c b/tools/perf/builtin-top.c
> index aa0c73e57924..a8e48dbd5b66 100644
> --- a/tools/perf/builtin-top.c
> +++ b/tools/perf/builtin-top.c
> @@ -1096,7 +1096,6 @@ static int __cmd_top(struct perf_top *top)
>
>         machine__synthesize_threads(&top->session->machines.host, &opts->target,
>                                     top->evlist->threads, false,
> -                                   opts->proc_map_timeout,
>                                     top->nr_threads_synthesize);
>
>         if (top->nr_threads_synthesize > 1)
> @@ -1256,7 +1255,6 @@ int cmd_top(int argc, const char **argv)
>                         .target         = {
>                                 .uses_mmap   = true,
>                         },
> -                       .proc_map_timeout    = 500,
>                         /*
>                          * FIXME: This will lose PERF_RECORD_MMAP and other metadata
>                          * when we pause, fix that and reenable. Probably using a
> @@ -1367,7 +1365,7 @@ int cmd_top(int argc, const char **argv)
>         OPT_STRING('w', "column-widths", &symbol_conf.col_width_list_str,
>                    "width[,width...]",
>                    "don't try to adjust column width, use these fixed values"),
> -       OPT_UINTEGER(0, "proc-map-timeout", &opts->proc_map_timeout,
> +       OPT_UINTEGER(0, "proc-map-timeout", &proc_map_timeout,
>                         "per thread proc mmap processing timeout in ms"),
>         OPT_CALLBACK_NOOPT('b', "branch-any", &opts->branch_stack,
>                      "branch any", "sample any taken branches",
> diff --git a/tools/perf/builtin-trace.c b/tools/perf/builtin-trace.c
> index 8e3c3f74a3a4..414780649987 100644
> --- a/tools/perf/builtin-trace.c
> +++ b/tools/perf/builtin-trace.c
> @@ -1264,7 +1264,7 @@ static int trace__symbols_init(struct trace *trace, struct perf_evlist *evlist)
>
>         err = __machine__synthesize_threads(trace->host, &trace->tool, &trace->opts.target,
>                                             evlist->threads, trace__tool_process, false,
> -                                           trace->opts.proc_map_timeout, 1);
> +                                           1);
>  out:
>         if (err)
>                 symbol__exit();
> @@ -3393,7 +3393,6 @@ int cmd_trace(int argc, const char **argv)
>                         .user_interval = ULLONG_MAX,
>                         .no_buffering  = true,
>                         .mmap_pages    = UINT_MAX,
> -                       .proc_map_timeout  = 500,
>                 },
>                 .output = stderr,
>                 .show_comm = true,
> @@ -3464,7 +3463,7 @@ int cmd_trace(int argc, const char **argv)
>                      "Default: kernel.perf_event_max_stack or " __stringify(PERF_MAX_STACK_DEPTH)),
>         OPT_BOOLEAN(0, "print-sample", &trace.print_sample,
>                         "print the PERF_RECORD_SAMPLE PERF_SAMPLE_ info, for debugging"),
> -       OPT_UINTEGER(0, "proc-map-timeout", &trace.opts.proc_map_timeout,
> +       OPT_UINTEGER(0, "proc-map-timeout", &proc_map_timeout,
>                         "per thread proc mmap processing timeout in ms"),
>         OPT_CALLBACK('G', "cgroup", &trace, "name", "monitor event in cgroup name only",
>                      trace__parse_cgroups),
> diff --git a/tools/perf/perf.h b/tools/perf/perf.h
> index 0ed4a34c74c4..3bac760fa872 100644
> --- a/tools/perf/perf.h
> +++ b/tools/perf/perf.h
> @@ -82,7 +82,6 @@ struct record_opts {
>         bool         use_clockid;
>         clockid_t    clockid;
>         u64          clockid_res_ns;
> -       unsigned int proc_map_timeout;
>  };
>
>  struct option;
> diff --git a/tools/perf/tests/code-reading.c b/tools/perf/tests/code-reading.c
> index 6b049f3f5cf4..dbf2c69944d2 100644
> --- a/tools/perf/tests/code-reading.c
> +++ b/tools/perf/tests/code-reading.c
> @@ -599,7 +599,7 @@ static int do_test_code_reading(bool try_kcore)
>         }
>
>         ret = perf_event__synthesize_thread_map(NULL, threads,
> -                                               perf_event__process, machine, false, 500);
> +                                               perf_event__process, machine, false);
>         if (ret < 0) {
>                 pr_debug("perf_event__synthesize_thread_map failed\n");
>                 goto out_err;
> diff --git a/tools/perf/tests/dwarf-unwind.c b/tools/perf/tests/dwarf-unwind.c
> index 2f008067d989..7c8d2e422401 100644
> --- a/tools/perf/tests/dwarf-unwind.c
> +++ b/tools/perf/tests/dwarf-unwind.c
> @@ -34,7 +34,7 @@ static int init_live_machine(struct machine *machine)
>         pid_t pid = getpid();
>
>         return perf_event__synthesize_mmap_events(NULL, &event, pid, pid,
> -                                                 mmap_handler, machine, true, 500);
> +                                                 mmap_handler, machine, true);
>  }
>
>  /*
> diff --git a/tools/perf/tests/mmap-thread-lookup.c b/tools/perf/tests/mmap-thread-lookup.c
> index b1af2499a3c9..5ede9b561d32 100644
> --- a/tools/perf/tests/mmap-thread-lookup.c
> +++ b/tools/perf/tests/mmap-thread-lookup.c
> @@ -132,7 +132,7 @@ static int synth_all(struct machine *machine)
>  {
>         return perf_event__synthesize_threads(NULL,
>                                               perf_event__process,
> -                                             machine, 0, 500, 1);
> +                                             machine, 0, 1);
>  }
>
>  static int synth_process(struct machine *machine)
> @@ -144,7 +144,7 @@ static int synth_process(struct machine *machine)
>
>         err = perf_event__synthesize_thread_map(NULL, map,
>                                                 perf_event__process,
> -                                               machine, 0, 500);
> +                                               machine, 0);
>
>         thread_map__put(map);
>         return err;
> diff --git a/tools/perf/util/config.c b/tools/perf/util/config.c
> index 5ac157056cdf..3beb4cf44c31 100644
> --- a/tools/perf/util/config.c
> +++ b/tools/perf/util/config.c
> @@ -14,6 +14,7 @@
>  #include "util.h"
>  #include "cache.h"
>  #include <subcmd/exec-cmd.h>
> +#include "util/event.h"  /* proc_map_timeout */
>  #include "util/hist.h"  /* perf_hist_config */
>  #include "util/llvm-utils.h"   /* perf_llvm_config */
>  #include "config.h"
> @@ -419,6 +420,9 @@ static int perf_buildid_config(const char *var, const char *value)
>  static int perf_default_core_config(const char *var __maybe_unused,
>                                     const char *value __maybe_unused)
>  {
> +       if (!strcmp(var, "core.proc-map-timeout"))
> +               proc_map_timeout = strtoul(value, NULL, 10);
> +
>         /* Add other config variables here. */
>         return 0;
>  }
> diff --git a/tools/perf/util/event.c b/tools/perf/util/event.c
> index e9c108a6b1c3..552b4d127121 100644
> --- a/tools/perf/util/event.c
> +++ b/tools/perf/util/event.c
> @@ -25,6 +25,8 @@
>  #include "asm/bug.h"
>  #include "stat.h"
>
> +#define DEFAULT_PROC_MAP_PARSE_TIMEOUT 500
> +
>  static const char *perf_event__names[] = {
>         [0]                                     = "TOTAL",
>         [PERF_RECORD_MMAP]                      = "MMAP",
> @@ -72,6 +74,8 @@ static const char *perf_ns__names[] = {
>         [CGROUP_NS_INDEX]       = "cgroup",
>  };
>
> +unsigned int proc_map_timeout = DEFAULT_PROC_MAP_PARSE_TIMEOUT;
> +
>  const char *perf_event__name(unsigned int id)
>  {
>         if (id >= ARRAY_SIZE(perf_event__names))
> @@ -323,8 +327,7 @@ int perf_event__synthesize_mmap_events(struct perf_tool *tool,
>                                        pid_t pid, pid_t tgid,
>                                        perf_event__handler_t process,
>                                        struct machine *machine,
> -                                      bool mmap_data,
> -                                      unsigned int proc_map_timeout)
> +                                      bool mmap_data)
>  {
>         char filename[PATH_MAX];
>         FILE *fp;
> @@ -521,8 +524,7 @@ static int __event__synthesize_thread(union perf_event *comm_event,
>                                       perf_event__handler_t process,
>                                       struct perf_tool *tool,
>                                       struct machine *machine,
> -                                     bool mmap_data,
> -                                     unsigned int proc_map_timeout)
> +                                     bool mmap_data)
>  {
>         char filename[PATH_MAX];
>         DIR *tasks;
> @@ -548,8 +550,7 @@ static int __event__synthesize_thread(union perf_event *comm_event,
>                  */
>                 if (pid == tgid &&
>                     perf_event__synthesize_mmap_events(tool, mmap_event, pid, tgid,
> -                                                      process, machine, mmap_data,
> -                                                      proc_map_timeout))
> +                                                      process, machine, mmap_data))
>                         return -1;
>
>                 return 0;
> @@ -598,7 +599,7 @@ static int __event__synthesize_thread(union perf_event *comm_event,
>                 if (_pid == pid) {
>                         /* process the parent's maps too */
>                         rc = perf_event__synthesize_mmap_events(tool, mmap_event, pid, tgid,
> -                                               process, machine, mmap_data, proc_map_timeout);
> +                                               process, machine, mmap_data);
>                         if (rc)
>                                 break;
>                 }
> @@ -612,8 +613,7 @@ int perf_event__synthesize_thread_map(struct perf_tool *tool,
>                                       struct thread_map *threads,
>                                       perf_event__handler_t process,
>                                       struct machine *machine,
> -                                     bool mmap_data,
> -                                     unsigned int proc_map_timeout)
> +                                     bool mmap_data)
>  {
>         union perf_event *comm_event, *mmap_event, *fork_event;
>         union perf_event *namespaces_event;
> @@ -643,7 +643,7 @@ int perf_event__synthesize_thread_map(struct perf_tool *tool,
>                                                fork_event, namespaces_event,
>                                                thread_map__pid(threads, thread), 0,
>                                                process, tool, machine,
> -                                              mmap_data, proc_map_timeout)) {
> +                                              mmap_data)) {
>                         err = -1;
>                         break;
>                 }
> @@ -669,7 +669,7 @@ int perf_event__synthesize_thread_map(struct perf_tool *tool,
>                                                        fork_event, namespaces_event,
>                                                        comm_event->comm.pid, 0,
>                                                        process, tool, machine,
> -                                                      mmap_data, proc_map_timeout)) {
> +                                                      mmap_data)) {
>                                 err = -1;
>                                 break;
>                         }
> @@ -690,7 +690,6 @@ static int __perf_event__synthesize_threads(struct perf_tool *tool,
>                                             perf_event__handler_t process,
>                                             struct machine *machine,
>                                             bool mmap_data,
> -                                           unsigned int proc_map_timeout,
>                                             struct dirent **dirent,
>                                             int start,
>                                             int num)
> @@ -734,8 +733,7 @@ static int __perf_event__synthesize_threads(struct perf_tool *tool,
>                  */
>                 __event__synthesize_thread(comm_event, mmap_event, fork_event,
>                                            namespaces_event, pid, 1, process,
> -                                          tool, machine, mmap_data,
> -                                          proc_map_timeout);
> +                                          tool, machine, mmap_data);
>         }
>         err = 0;
>
> @@ -755,7 +753,6 @@ struct synthesize_threads_arg {
>         perf_event__handler_t process;
>         struct machine *machine;
>         bool mmap_data;
> -       unsigned int proc_map_timeout;
>         struct dirent **dirent;
>         int num;
>         int start;
> @@ -767,7 +764,7 @@ static void *synthesize_threads_worker(void *arg)
>
>         __perf_event__synthesize_threads(args->tool, args->process,
>                                          args->machine, args->mmap_data,
> -                                        args->proc_map_timeout, args->dirent,
> +                                        args->dirent,
>                                          args->start, args->num);
>         return NULL;
>  }
> @@ -776,7 +773,6 @@ int perf_event__synthesize_threads(struct perf_tool *tool,
>                                    perf_event__handler_t process,
>                                    struct machine *machine,
>                                    bool mmap_data,
> -                                  unsigned int proc_map_timeout,
>                                    unsigned int nr_threads_synthesize)
>  {
>         struct synthesize_threads_arg *args = NULL;
> @@ -806,7 +802,6 @@ int perf_event__synthesize_threads(struct perf_tool *tool,
>         if (thread_nr <= 1) {
>                 err = __perf_event__synthesize_threads(tool, process,
>                                                        machine, mmap_data,
> -                                                      proc_map_timeout,
>                                                        dirent, base, n);
>                 goto free_dirent;
>         }
> @@ -828,7 +823,6 @@ int perf_event__synthesize_threads(struct perf_tool *tool,
>                 args[i].process = process;
>                 args[i].machine = machine;
>                 args[i].mmap_data = mmap_data;
> -               args[i].proc_map_timeout = proc_map_timeout;
>                 args[i].dirent = dirent;
>         }
>         for (i = 0; i < m; i++) {
> diff --git a/tools/perf/util/event.h b/tools/perf/util/event.h
> index bfa60bcafbde..eb95f3384958 100644
> --- a/tools/perf/util/event.h
> +++ b/tools/perf/util/event.h
> @@ -669,8 +669,7 @@ typedef int (*perf_event__handler_t)(struct perf_tool *tool,
>  int perf_event__synthesize_thread_map(struct perf_tool *tool,
>                                       struct thread_map *threads,
>                                       perf_event__handler_t process,
> -                                     struct machine *machine, bool mmap_data,
> -                                     unsigned int proc_map_timeout);
> +                                     struct machine *machine, bool mmap_data);
>  int perf_event__synthesize_thread_map2(struct perf_tool *tool,
>                                       struct thread_map *threads,
>                                       perf_event__handler_t process,
> @@ -682,7 +681,6 @@ int perf_event__synthesize_cpu_map(struct perf_tool *tool,
>  int perf_event__synthesize_threads(struct perf_tool *tool,
>                                    perf_event__handler_t process,
>                                    struct machine *machine, bool mmap_data,
> -                                  unsigned int proc_map_timeout,
>                                    unsigned int nr_threads_synthesize);
>  int perf_event__synthesize_kernel_mmap(struct perf_tool *tool,
>                                        perf_event__handler_t process,
> @@ -797,8 +795,7 @@ int perf_event__synthesize_mmap_events(struct perf_tool *tool,
>                                        pid_t pid, pid_t tgid,
>                                        perf_event__handler_t process,
>                                        struct machine *machine,
> -                                      bool mmap_data,
> -                                      unsigned int proc_map_timeout);
> +                                      bool mmap_data);
>
>  int perf_event__synthesize_extra_kmaps(struct perf_tool *tool,
>                                        perf_event__handler_t process,
> @@ -829,5 +826,6 @@ int perf_event_paranoid(void);
>
>  extern int sysctl_perf_event_max_stack;
>  extern int sysctl_perf_event_max_contexts_per_stack;
> +extern unsigned int proc_map_timeout;
>
>  #endif /* __PERF_RECORD_H */
> diff --git a/tools/perf/util/machine.c b/tools/perf/util/machine.c
> index 8f36ce813bc5..8551b3e75bb2 100644
> --- a/tools/perf/util/machine.c
> +++ b/tools/perf/util/machine.c
> @@ -2493,15 +2493,13 @@ int machines__for_each_thread(struct machines *machines,
>  int __machine__synthesize_threads(struct machine *machine, struct perf_tool *tool,
>                                   struct target *target, struct thread_map *threads,
>                                   perf_event__handler_t process, bool data_mmap,
> -                                 unsigned int proc_map_timeout,
>                                   unsigned int nr_threads_synthesize)
>  {
>         if (target__has_task(target))
> -               return perf_event__synthesize_thread_map(tool, threads, process, machine, data_mmap, proc_map_timeout);
> +               return perf_event__synthesize_thread_map(tool, threads, process, machine, data_mmap);
>         else if (target__has_cpu(target))
>                 return perf_event__synthesize_threads(tool, process,
>                                                       machine, data_mmap,
> -                                                     proc_map_timeout,
>                                                       nr_threads_synthesize);
>         /* command specified */
>         return 0;
> diff --git a/tools/perf/util/machine.h b/tools/perf/util/machine.h
> index d856b85862e2..688d84ba823a 100644
> --- a/tools/perf/util/machine.h
> +++ b/tools/perf/util/machine.h
> @@ -247,17 +247,14 @@ int machines__for_each_thread(struct machines *machines,
>  int __machine__synthesize_threads(struct machine *machine, struct perf_tool *tool,
>                                   struct target *target, struct thread_map *threads,
>                                   perf_event__handler_t process, bool data_mmap,
> -                                 unsigned int proc_map_timeout,
>                                   unsigned int nr_threads_synthesize);
>  static inline
>  int machine__synthesize_threads(struct machine *machine, struct target *target,
>                                 struct thread_map *threads, bool data_mmap,
> -                               unsigned int proc_map_timeout,
>                                 unsigned int nr_threads_synthesize)
>  {
>         return __machine__synthesize_threads(machine, NULL, target, threads,
>                                              perf_event__process, data_mmap,
> -                                            proc_map_timeout,
>                                              nr_threads_synthesize);
>  }
>
> --
> 2.17.1
>
