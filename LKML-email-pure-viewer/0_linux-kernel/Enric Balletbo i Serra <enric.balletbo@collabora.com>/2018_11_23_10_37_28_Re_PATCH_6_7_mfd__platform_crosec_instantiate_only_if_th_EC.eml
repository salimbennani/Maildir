Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 23 Nov 2018 23:34:01 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga008.fm.intel.com (fmsmga008.fm.intel.com [10.253.24.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id C96E458040F;
	Fri, 23 Nov 2018 02:37:37 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by fmsmga008-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 23 Nov 2018 02:37:37 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Aj00f1BDTwMIILr5SUGtxUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7+osSwAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6zaYd0URXRMUt9IWyFcGIyz?=
 =?us-ascii?q?cpcCAPcHPehEs4b9uUYBoQWjDgWoBO7j1zpEi3nr1qM4zushCxnL0hE+EdIAsH?=
 =?us-ascii?q?rar9v7O6kdXu+30KbGwi7Db+tU1Drm9IjFcAosre2QUb9+c8fcz1QkGQPfjlWX?=
 =?us-ascii?q?rIzoJzyb1uIXs2ia8+VrSP+ihHQjqwF1vDev2twjio7UjYIU11vK6Dt2wJwvJd?=
 =?us-ascii?q?KiVUV2ZsCrEJ1KtyGbK4R6WNgtTHtsuCY+1LIGpYW0fC8RxZs7wB7fb/iHfJKT?=
 =?us-ascii?q?7RLkTuaeOy10i25ieLK6nhu/91WrxO7kVsSszlpGsi5InsPRun0DyRDf8NWLR/?=
 =?us-ascii?q?hh8ku72DuC1Rjf5+5FLEwui6bWJZ4szqQumpYNs0nPBDH6lFv0gaKQa04q4PKn?=
 =?us-ascii?q?6/79bbXjvpKcN5F7igX5Mqk2hMy/Dvo3MhIUU2iY5+u8zrvj8lP9QLlQif02iK?=
 =?us-ascii?q?bZvIjbJcQduKG5HxdY3pg/5xu7FTuqzdoVkWcdIF5Yex+Lk5LlNlDMLfzgCPew?=
 =?us-ascii?q?mVWskDNlx/DcOb3hB43ALnzCkLfnYLZ85FdQyAktwtBF4ZJbFLUBLOv0Wk7/st?=
 =?us-ascii?q?zXEAU5Pheqw+boFtp9zJkSWWGRDa+DNqPdr1uI6vgoI+mWa48ZoCz9JOQ95/7y?=
 =?us-ascii?q?kX85nkcQfa2o3ZsUdn+0BPtnI1iCbHrog9cBF3oKvwUkQOzrjl2CTSBcZ3KoU6?=
 =?us-ascii?q?0g4TE7DZqsDZ3fSYC1nLyBwCC7E4VWZm9cC1CMDW3nd4KeV/cMdSKdOMlhkjMf?=
 =?us-ascii?q?WLilSo8h0wyutQDgx7pmKOrU5jMXtZb52Ndp4O3TkAk49SZoAMSFz2GNU2Z0k3?=
 =?us-ascii?q?sKRz8xwq9zu099ylCF0ah+hPxVDthT5/JPUgcnOp/Q1e16C9buWg3feteFUkqp?=
 =?us-ascii?q?QtKjATspVNI+38cOY1phG9Wllh3MxTGqA78Sl7yIHpA06LjT33rqKsZ5ynbG0r?=
 =?us-ascii?q?QhjlY8TstOM22mmrBw9wzJC4HVlEWZkr6gdb4A0y7V6GeD0W2OsVlbUAFqV6XJ?=
 =?us-ascii?q?R3QfZkrMotT/6UPPVLuuCbUhMgtcxs+OMKpKatv1jVpYQPfvIsjRY2W0m22oHx?=
 =?us-ascii?q?aH2quMbJb2e2UaxCjSFVILkx4N8nqcNQgxHCGho3nAAzxoEl7vZ0Ds8ex6qH6g?=
 =?us-ascii?q?Sk80zgeKb1Bu1rav+x4Vg+CcRO0X3r4epCghrDB0Fk6n393KE9qAuxZhfKJEbN?=
 =?us-ascii?q?wg+lhHy3zWuxZ9PpO6KaBinUARcwJsskPq1hV3DJhAkMcwoHMrygpyNbyX0Fdb?=
 =?us-ascii?q?ezyE2pDwP6XdKnPu8xC3d67Wxlbe3c6K+qcO7fQ4rEnjvAGpF0Y473Vryd5V02?=
 =?us-ascii?q?GY5pXLCgoSXon8UkI29xh8urHbbTMx54LS1X1wL6a0tiXO1M4uBOsg0hygZctQ?=
 =?us-ascii?q?MLuYFA/uFM0XH9KhKOg0lFmmcB0FPPpe+7UpP8y7bfSG3q2rPOF+nD+9iWRH4Y?=
 =?us-ascii?q?Z90l+D9iZmS+7I2YoFzO+c3gedSzj8i1KhuNjtmY9YfTESAna/yS/8CY9Re61+?=
 =?us-ascii?q?Z5oEBX2vIs233Np+gZHtVmVc9F6iAVMGxcCodQCTb1z7wQ1fy0AXrWa7liu/yj?=
 =?us-ascii?q?x+iyspobaH3CzS3+TicwIKOnRKRGZ+l1jsO5W7j9cAUEiucQcpjhql6V/myKdB?=
 =?us-ascii?q?oKRwMnfcQV1PfyjwNGxiVqqwtryfY89A8p8osCNXUPiiblCeULLyvxwa0yb7FW?=
 =?us-ascii?q?tE2D87by2quon+nxFiiGOdLWx/rXrDdcFr2Bff4sfRRfpQ3joAWSl5hiPbBlm6?=
 =?us-ascii?q?P9m149qUk43Pvfy5V2KkTpdTazXkzZuctCun4m1nGR+/kOqpmt3kEgg61jX318?=
 =?us-ascii?q?JwWiXLrxb8Y4/r2Lq8Me98ekloBVn869d1G41kk4swgo0Q1mYehpmP4XUHlmLz?=
 =?us-ascii?q?O81B2a3idHoNWSILw9nN7QnlwkJjKWiFx4D4VnWb2cZhY9i6YmUL2iMy9cxKCa?=
 =?us-ascii?q?GU7KBakitxuFa3sQXRYf1llDcH1fQu8GIag/0OuAc1zSWSGLESEVNYPSzxjRuI?=
 =?us-ascii?q?6d++ob5TZGaud7iwyUV/kcqgDLGEvgFTRnL5do0+Ei9368V1KEjM32Hr6oH4ZN?=
 =?us-ascii?q?nQasoethiVkxfDledZMpwwmeQRhSp7J239p2YqxPAhjRxhxpy6uImHK2Nw/KO2?=
 =?us-ascii?q?GBJYNzv1Z98N9THpl6pRgsGW34W3FJV7BjoLRIfoTe6vED8KqfTnMAOOHCc9q3?=
 =?us-ascii?q?iBH7rfABSf6Fxnr3/UF5CrNneXJGQWzNl4RRmdIlBfjx4QXDkggpE5EQWqztT7?=
 =?us-ascii?q?cEhl/jAR+kL4qhxUx+1zLRb/VWPfpBqyZjcwVZiSNx5W7gBE50fIPs2S9ONzHy?=
 =?us-ascii?q?dE/pK/qAyBMHCUZwNNDWsRQEyLG0jjPqWy5dnH6+WYBPCxL/7QbrWVs+BeS+2E?=
 =?us-ascii?q?xZGy0otl4jaMMN+APmJ5Av0/20pDW215GsvDlzUOTSwXizzCb8qBqBig/S13q9?=
 =?us-ascii?q?i18O73VwL3+YuPF7xSPM1v+hCxnKeDLvOQizx/KTpCzZMMwnnIyLcE0V4WiiFu?=
 =?us-ascii?q?cSStELsauS7MSqLQhrFYDxoBZyxvM8tI6ro23hNRNs7DltP1yrl4g+Y1C1hbVF?=
 =?us-ascii?q?zhmcKpZc0QL2G+LlPHA0mLO6qcJT3W2MH6eqe8SbxWjOVJuBy8ozebE0n/Pjud?=
 =?us-ascii?q?kznlTQygMeZJjCuDJhxRpJm9cgpxCWjkVN/pcAC7P8RtjTIowbw4nHfKNW8HPD?=
 =?us-ascii?q?h4ckNNqKCQ7CxCjvV+HWxB8mRqLe2elymF6OnYL44cseF3DSRsi+Ja/HM6xqNJ?=
 =?us-ascii?q?7CFFQfx5gjfdosRyrFGmjOaPzCFqUB5PqjZNmYKKsl9uOaTf9plcR3nE+AgB4n?=
 =?us-ascii?q?mXCxQPv9FlEMHgu7hMytjTk6L+MDdD/MjS/csZBsjULtqIMXshMRXzHj7UAxAI?=
 =?us-ascii?q?TTqqNWHZmkxcn+ue9nyTrpgmtJfsnIACRaNcVFwwRbsmDRFKAdEEPJptFgkjnL?=
 =?us-ascii?q?WYxJoM5HyjvDHLQ8hRvdXaTbSUDOm5exiDirwRSh0SwLiwB40XMoDn0UsqaxFB?=
 =?us-ascii?q?kZ7QEgKEUNZXoyYnZAYwpEhR+n9WRWo330vvbRmkpnQUEKjnzVYNlgJibLF1p3?=
 =?us-ascii?q?/X6FAtKw+P+Ho9?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0APAAAa1/dbh0O0hNFiHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBg2sng3mIGIt9gWAtFJcngXMsEwGIVSI0CQ0BAwEBAQEBAQIBEwE?=
 =?us-ascii?q?BAQgNCQgpL4I2JIJjAQIDAQIgBFIGCQEBCg4KAgIYDgICA1QGDQYCAQEBgxyCA?=
 =?us-ascii?q?gQBpxd8M4VAhFeBC4p+gVc/gREngmuIAoJXAokIEQqFdkOBAoRYikwHApEpHol?=
 =?us-ascii?q?hhycsiWePY2yBIU0jgzyCUI4LPjOBBQEBjCEBAQ?=
X-IPAS-Result: =?us-ascii?q?A0APAAAa1/dbh0O0hNFiHAEBAQQBAQcEAQGBUQcBAQsBg2s?=
 =?us-ascii?q?ng3mIGIt9gWAtFJcngXMsEwGIVSI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpL4I2J?=
 =?us-ascii?q?IJjAQIDAQIgBFIGCQEBCg4KAgIYDgICA1QGDQYCAQEBgxyCAgQBpxd8M4VAhFe?=
 =?us-ascii?q?BC4p+gVc/gREngmuIAoJXAokIEQqFdkOBAoRYikwHApEpHolhhycsiWePY2yBI?=
 =?us-ascii?q?U0jgzyCUI4LPjOBBQEBjCEBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,269,1539673200"; 
   d="scan'208";a="139302635"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 23 Nov 2018 02:37:36 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2503356AbeKWVVQ (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 23 Nov 2018 16:21:16 -0500
Received: from bhuna.collabora.co.uk ([46.235.227.227]:58882 "EHLO
        bhuna.collabora.co.uk" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S2390259AbeKWVVQ (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 23 Nov 2018 16:21:16 -0500
Received: from [127.0.0.1] (localhost [127.0.0.1])
        (Authenticated sender: eballetbo)
        with ESMTPSA id 2108C27DBCD
Subject: Re: [PATCH 6/7] mfd / platform: cros_ec: instantiate only if th EC
 has a VBC NVRAM.
To: Guenter Roeck <linux@roeck-us.net>
Cc: lee.jones@linaro.org, gwendal@chromium.org, drinkcat@chromium.org,
        linux-kernel@vger.kernel.org, groeck@chromium.org,
        kernel@collabora.com, bleung@chromium.org,
        Olof Johansson <olof@lixom.net>
References: <20181122113356.23610-1-enric.balletbo@collabora.com>
 <20181122113356.23610-7-enric.balletbo@collabora.com>
 <20181122191401.GA2106@roeck-us.net>
From: Enric Balletbo i Serra <enric.balletbo@collabora.com>
Message-ID: <54b2aa27-2dba-7eba-d414-c7406e80a8c9@collabora.com>
Date: Fri, 23 Nov 2018 11:37:28 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.3.0
MIME-Version: 1.0
In-Reply-To: <20181122191401.GA2106@roeck-us.net>
Content-Type: text/plain; charset=utf-8
Content-Language: en-GB
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi Guenter,

On 22/11/18 20:14, Guenter Roeck wrote:
> On Thu, Nov 22, 2018 at 12:33:55PM +0100, Enric Balletbo i Serra wrote:
>> The cros-ec-vbc driver is DT-only and there is a DT property that
>> indicates if the EC has the VCB NVRAM, in such case instantiate the
>> driver but don't instantiate on the other cases.
>>
>> To do this move the check code to its parent instead of play with the
>> attribute group visibility. This changes a bit the actual behaviour.
>> Before the patch if an EC doesn't have a VBC NVRAM an empty vbc folder
>> is created in /sys/class/chromeos/<ec device>, after the patch the empty
>> folder is not created, so, the folder is only created if the vbc is set.
>>
>> Signed-off-by: Enric Balletbo i Serra <enric.balletbo@collabora.com>
>> ---
>>
>>  drivers/mfd/cros_ec_dev.c             | 24 +++++++++++++++++++++++-
>>  drivers/platform/chrome/cros_ec_vbc.c | 16 ----------------
>>  2 files changed, 23 insertions(+), 17 deletions(-)
>>
>> diff --git a/drivers/mfd/cros_ec_dev.c b/drivers/mfd/cros_ec_dev.c
>> index fc235af6da65..a63588953760 100644
>> --- a/drivers/mfd/cros_ec_dev.c
>> +++ b/drivers/mfd/cros_ec_dev.c
>> @@ -21,6 +21,7 @@
>>  #include <linux/mfd/core.h>
>>  #include <linux/module.h>
>>  #include <linux/mod_devicetable.h>
>> +#include <linux/of_platform.h>
>>  #include <linux/platform_device.h>
>>  #include <linux/pm.h>
>>  #include <linux/slab.h>
>> @@ -400,7 +401,10 @@ static const struct mfd_cell cros_ec_platform_cells[] = {
>>  	{ .name = "cros-ec-debugfs" },
>>  	{ .name = "cros-ec-lightbar" },
>>  	{ .name = "cros-ec-sysfs" },
>> -	{ .name = "cros-ec-vbc" },
>> +};
>> +
>> +static const struct mfd_cell cros_ec_vbc_cells[] = {
>> +	{ .name = "cros-ec-vbc" }
>>  };
>>  
>>  static int ec_device_probe(struct platform_device *pdev)
>> @@ -409,6 +413,7 @@ static int ec_device_probe(struct platform_device *pdev)
>>  	struct device *dev = &pdev->dev;
>>  	struct cros_ec_platform *ec_platform = dev_get_platdata(dev);
>>  	struct cros_ec_dev *ec = devm_kzalloc(dev, sizeof(*ec), GFP_KERNEL);
>> +	struct device_node *node;
>>  
>>  	if (!ec)
>>  		return retval;
>> @@ -492,6 +497,23 @@ static int ec_device_probe(struct platform_device *pdev)
>>  		dev_err(ec->dev,
>>  			"failed to add cros-ec platform devices: %d\n", retval);
>>  
>> +	/* Check whether this EC instance has a VBC NVRAM */
>> +	node = ec->ec_dev->dev->of_node;
>> +	if (IS_ENABLED(CONFIG_OF) && node) {
> 
> Is IS_ENABLED() necessary here ? Seems to me node should always be NULL
> in this case.
> 
>> +		if (of_property_read_bool(node, "google,has-vbc-nvram")) {
>> +			dev_err(dev, "device VBC found.\n");
> 
> dev_err ?
> 

Ups, I added this message only for debugging puposes, I think doesn't make sense
here so I'll remove.

>> +			retval = devm_mfd_add_devices(ec->dev,
>> +					PLATFORM_DEVID_AUTO,
>> +					cros_ec_vbc_cells,
>> +					ARRAY_SIZE(cros_ec_vbc_cells),
>> +					NULL, 0, NULL);
>> +			if (retval)
>> +				dev_err(ec->dev,
>> +					"failed to add VBC devices: %d\n",
>> +					retval);
> 
> Since the error is ignored, maybe better dev_warn() ?
> 

Done in next version.

>> +		}
>> +	}
>> +
>>  	return 0;
>>  
>>  failed:
>> diff --git a/drivers/platform/chrome/cros_ec_vbc.c b/drivers/platform/chrome/cros_ec_vbc.c
>> index 374153e3dc13..b7b81fe0fb25 100644
>> --- a/drivers/platform/chrome/cros_ec_vbc.c
>> +++ b/drivers/platform/chrome/cros_ec_vbc.c
>> @@ -108,21 +108,6 @@ static ssize_t vboot_context_write(struct file *filp, struct kobject *kobj,
>>  	return data_sz;
>>  }
>>  
>> -static umode_t cros_ec_vbc_is_visible(struct kobject *kobj,
>> -				      struct bin_attribute *a, int n)
>> -{
>> -	struct device *dev = container_of(kobj, struct device, kobj);
>> -	struct cros_ec_dev *ec = to_cros_ec_dev(dev);
>> -	struct device_node *np = ec->ec_dev->dev->of_node;
>> -
>> -	if (IS_ENABLED(CONFIG_OF) && np) {
>> -		if (of_property_read_bool(np, "google,has-vbc-nvram"))
>> -			return a->attr.mode;
>> -	}
>> -
>> -	return 0;
>> -}
>> -
>>  static BIN_ATTR_RW(vboot_context, 16);
>>  
>>  static struct bin_attribute *cros_ec_vbc_bin_attrs[] = {
>> @@ -133,7 +118,6 @@ static struct bin_attribute *cros_ec_vbc_bin_attrs[] = {
>>  struct attribute_group cros_ec_vbc_attr_group = {
>>  	.name = "vbc",
>>  	.bin_attrs = cros_ec_vbc_bin_attrs,
>> -	.is_bin_visible = cros_ec_vbc_is_visible,
>>  };
>>  
>>  static int cros_ec_vbc_probe(struct platform_device *pd)
