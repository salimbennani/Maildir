Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  17 Dec 2018 08:32:27 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 168165805CF;
	Sun, 16 Dec 2018 12:06:07 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 16 Dec 2018 12:06:06 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AJyuBqRWD+MQd3pqSJX0gLcvJSQHV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhCAuqdThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGoyz?=
 =?us-ascii?q?b4UNAOQBM+hWrJTzqUUSohulHQmhBvjiyiNUinLswaE2z/gtHAPA0Qc9H9wOqn?=
 =?us-ascii?q?PUrNDtOakMS++1yajIzS/eZP5Iwzj98o3IfQ4lofGNQLl9dtbexlM1FwPAkFqQ?=
 =?us-ascii?q?rY3lMymJ1usXtmib7vBgWPmgi24isQ5xozyvyt0whYnOg4IY01bJ/jh6zoYtPd?=
 =?us-ascii?q?C0VlJ3bNq+HJdNuSyWKZF6Tt4hTm10oio3y78LtYalcCQWzJkr3R3SZvydf4SW?=
 =?us-ascii?q?/x7vSPydLSp8iX9qfr+0mgy8/lK6yuLmU8m5yFZKoTRBktnLrn0NyRPT5dadSv?=
 =?us-ascii?q?dn/UeuxyyP1wbN5eFAO0w0krDbK5E5zr4xkJocr1jDEzfolEnqiKKabFgo9+a2?=
 =?us-ascii?q?5+j9f7nrpYOQO5V1hwz8Kqgun9awAeU8MggARWib/uG82aXn/U34RrVKk/I3nr?=
 =?us-ascii?q?DasJ/EP8QboLC2AwtM3oYk5Re/CSmp0M4DkHkZI1JKZgiHg5LqO17QOvD4C+mw?=
 =?us-ascii?q?g1C2nDds3fDGMaXtAo/RIXjbjLfhYbF95lZYyAoyztBQ+YhYC74cIP/oXk/xtd?=
 =?us-ascii?q?rYDgI2MgCuwubnDsl92Z0aWW6VHqCZN6bSu0eS5u0zO+mMeJMVuDHlJvgl/fHu?=
 =?us-ascii?q?jGM5lkUafaWz3ZsXdWq3HvJpI0iCZXrsg9EBEXoFvwYkTezqjkGCXiBXZ3qoQ6?=
 =?us-ascii?q?084TQ7Apq8DYjfXoCtnKCB3CCjE51UYWBJFEqAEXTvd4WCXfcMbzmfIstgkjwC?=
 =?us-ascii?q?SLigRJUt1RCotA/m1bVnKvDY9TEftZLmzNJ1/fHclQku9TxoCMSQy3uCT3p0nm?=
 =?us-ascii?q?MPRD86xrp/rlZ/ylqY1ah4gvpYFcFc5v9TUwc6M4LcwPJ+C9zoRg3BedKJQk68?=
 =?us-ascii?q?Qtq6GTExUs4xw9gWbkZ+AdqiiArP3y6rA7APkbyLC4c58qbd33j3OsZ8xGzK1K?=
 =?us-ascii?q?gnj1k6XMRPMXeqibJ49wjWH4TJiVmWl762daQA2y7A7HqMwnCQvE5GSgJwUb/K?=
 =?us-ascii?q?XXYEZkTIq9T14UfCT7yrCbQjKQZBzc+CKq1Xatzml1lGRfHjOMjAbGK1gWu/GR?=
 =?us-ascii?q?GIxraUZorwZ2odxDndCFQDkw0L4HmJLxY+CTm7r2LeFjNuE0nvbF3q8eRlrHO7?=
 =?us-ascii?q?T0k0zxyFbkF71rq1/AIViuKYS/8Jwr0EvyIhoS1uHFmhx9LWF8aApw15caVAYN?=
 =?us-ascii?q?M95VBH1X7Ztw19JJCgM7puhlkEcwRzvkPu0Rp3B55EkcgrqnMq0QVzJbiZ0FNH?=
 =?us-ascii?q?azOXw5TwNqfLJWn1+RClc7TW1U3G0NaK5qcP7+w1pE/nvA63GUst7XVm38NO3H?=
 =?us-ascii?q?uB+5rFFgwSUZH2UkYp7BV6o7DaYi8g54Lbz3FsMK+0siPc1NItHucq1hGgf9JH?=
 =?us-ascii?q?OqOeCADyC9EaB9SpKOEym1mpcwgIM/xI+K81P8Opbf2G2KGwMeZknTKmi3lH4Y?=
 =?us-ascii?q?9n3kKN8Sp8VvDH35Ifz/6E2QuHUi/2jE29vcDvhYBEeTYSE3KlySjlGIFefLdy?=
 =?us-ascii?q?cpsMCWu0Jc242M9+h5/0V3FE7lGjA04J19GzeRqVaVzwxglQ1UURoXy6liq01T?=
 =?us-ascii?q?10kzc1rqWB2CzC2fjtdB0COmRTXmltkU/sIZSoj9AdREWpbwkpmAGl5Erg3Khb?=
 =?us-ascii?q?uaJ/InLXQUdJeSj2Mm5jXrGxtrqEf85A9pcovT9LX+S7ZFCQUqT9rAcC0yP/A2?=
 =?us-ascii?q?tewyg2dzOwtZXjnBx6i2WdIGxorHXDesFwxhbf5NrCSv5XxTcGQCh4iT/KBlmz?=
 =?us-ascii?q?JdWp/NOUl4vdveC6TW6uSppTcSzzx4OaqCS7/XFqAQG4n/2rmtzoCw863TX519?=
 =?us-ascii?q?lrUyXFtxL8Yojt16SnPuNrZEhoBFng68VkHoFyiJc/hJYV2XICnJWa4WIHkXvv?=
 =?us-ascii?q?MdVcwa/+b2ACRT8Rz97V/QjqwktjLn2SyoL9V3WdxNZhZtagbmMX3CI9895FCK?=
 =?us-ascii?q?OO4LNYmit1p0KyrRjNbvhlgjcd1fwu5WYfg+EIuwoi1D+RA74MEklDISzjiQ6I?=
 =?us-ascii?q?4Mugo6VNa2aiaryw1Et4ndC8A7COuABcWHDlepg8GS989NlwMFXJ0Hfr8IHrZM?=
 =?us-ascii?q?HQbc4Pth2TixrAk+9VKJcrmvsLnyVnP3/9vWY+y+46lhFu2ZC6vI6aK2Ri5q65?=
 =?us-ascii?q?AxhYNiHraMMX4D3ikaFensOO1YC1ApphAikLXIfvTf+wCz0dr/PnNwKTEDEmrn?=
 =?us-ascii?q?ebBKHSHQue6EdgsnLOHIqnN3CRJHkF09piQAORK1BYgAARRD86hII2Fhi2xMz9?=
 =?us-ascii?q?d0d0/jIR6UT9qhRS0eJkLQX/Xn3cpAe1aTc0VZ6fIwBN7gxZ40fVMMqe7v98Hi?=
 =?us-ascii?q?1C/52hqhCNJXKfZwhSEW4JXUmEDUj5Pray/dnA7/SYBu2mIvrOZrWOtPVeV+qS?=
 =?us-ascii?q?ypKpyIdm5DGMNsOAPnR5C/0720xDXW12GsjDmjUPTTAXmDzJb8KBuBi8/Sh3pN?=
 =?us-ascii?q?il8Pv3QALv+ZePC7xKPNVv5R+2gKSDN+2RhCpjKjZYzJQMxXDWx7gFwV4SkDpj?=
 =?us-ascii?q?dz2sEbQGqC7MQ7jcmq5RDx4HdSxzMNFE4L473glIIcTbkM/61qZkjv4pDFdITU?=
 =?us-ascii?q?bumtyyaswQPW68NEnLBEKKNLmdIT3Lwsf3Yb6zSLFKjeVUsQGwtiifE0P5IjuD?=
 =?us-ascii?q?kDzpXQi1Me5QlCGbIABeuIalfxZxCGjjScjqZQGhPNBrjT0537s0i2jONW4dNz?=
 =?us-ascii?q?h8bkxMoqeR7SNenvVwBWhB4mB5IumDniaT9/PYJYoOsft3HiR0kPpX4XQgxLtT?=
 =?us-ascii?q?6SFERfp1lzPTr95uuV6mlOaPxyFjUBpPrDZLmY2KsV9jOaXf6plPR3LE8AgR4m?=
 =?us-ascii?q?WXDhRZ7+diX/rAkp95gvjOjqX9NTJDu4bU/NEbCdXRKeqCOXsldwLgAj3SARdD?=
 =?us-ascii?q?RjntN3mJ1GJHl/THynSQr4JygZH2nZcKS/cPX1UvE/4eCwJ5FdkDOr94Wzollf?=
 =?us-ascii?q?iQi8tetin2lwXYWMgP5sOPbfmVG/i6bW/B1bQ=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AmAAA6rxZch0O0hNFjHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGDayeDfIN7hB6LdYINFIkSjjKBcywTAYdHIjQJDQEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BCgsJCCkjDII2JAGCYgECAwECIAQZARsdAQMCCQEBBQULDQICJgICAx4BAREBB?=
 =?us-ascii?q?QEcBhMFgx2BaAEDFQWZRzyLEHwWBQEXgncFhC0KGScNXYE3AgYSeYszghaDdS6?=
 =?us-ascii?q?CV4IKAQGDJoJXAokel0wvBwKOKoMwGF+Qc49EihEwgSWCDjMaI4EBgjuCGwwXE?=
 =?us-ascii?q?oM4ilU9M4EFAQGLMYI+AQE?=
X-IPAS-Result: =?us-ascii?q?A0AmAAA6rxZch0O0hNFjHQEBBQEHBQGBUQgBCwGDayeDfIN?=
 =?us-ascii?q?7hB6LdYINFIkSjjKBcywTAYdHIjQJDQEDAQEBAQEBAgETAQEBCgsJCCkjDII2J?=
 =?us-ascii?q?AGCYgECAwECIAQZARsdAQMCCQEBBQULDQICJgICAx4BAREBBQEcBhMFgx2BaAE?=
 =?us-ascii?q?DFQWZRzyLEHwWBQEXgncFhC0KGScNXYE3AgYSeYszghaDdS6CV4IKAQGDJoJXA?=
 =?us-ascii?q?okel0wvBwKOKoMwGF+Qc49EihEwgSWCDjMaI4EBgjuCGwwXEoM4ilU9M4EFAQG?=
 =?us-ascii?q?LMYI+AQE?=
X-IronPort-AV: E=Sophos;i="5.56,361,1539673200"; 
   d="scan'208";a="57111878"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 16 Dec 2018 12:06:05 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730857AbeLPUGD (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sun, 16 Dec 2018 15:06:03 -0500
Received: from mail-pf1-f194.google.com ([209.85.210.194]:44065 "EHLO
        mail-pf1-f194.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1730746AbeLPUGC (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sun, 16 Dec 2018 15:06:02 -0500
Received: by mail-pf1-f194.google.com with SMTP id u6so5268343pfh.11
        for <linux-kernel@vger.kernel.org>; Sun, 16 Dec 2018 12:06:02 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=+OxlBzAUm8KeZ1NfcFonsjitiYkavWAVTGD4jLz7Qk0=;
        b=QGVUk96hYrghzU5kpJJ5CAk6zGD1FBICbamz/soU9A+vlQCxHM98jEXsP0b9ilIR0T
         dnaXZV/Q5t1LAGJA3QyomYPpmDmR6ff1eOAm3nTfXS42HT6CWCfMIzFbRv1YGCvpMNpH
         WDN78FpVR6xBCJRng2VnoAza+QfAQF51WPLfuoCRmKjXTpNDx4zMmrQaCJHfsWIh3jic
         /5gLKH4srsx31QafrYmgBFhHZbHUsJAyLxzkV/meRQsYBx9jR/vXfuQI64dTELrozk1t
         8AXDHlILcMBRHKoaZzYvrfJFYxPD6sGtrOiqU3WkW8pY61515ouDUwydos4PfNZHzkTz
         laKw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=+OxlBzAUm8KeZ1NfcFonsjitiYkavWAVTGD4jLz7Qk0=;
        b=OCOoQfFSUcP14gECGcvsczUvyJrgMlG6Th6YiWahNTjItzDKoDQd1AVa7+xmN+kxSQ
         Iwo0Qrkm99W4vV73tzAoqruayaqhg94Q+oHwpeG/c1bKbZtdoIk786w3hIfe8snm2yqC
         VGhRxThHn8hEiwrdlIGxHl/snoZga7twyciwR2JAFRB6i+iB4GwU3MGI6jEz3hxXOPch
         2SMaanOcXw+6nDLWhu/9lXdPBCYbahWQyy9ejuak/JXehz0L98WIfL0LCipXtQI3Fo1v
         4T7xAgd3ZKW9uoDwRm9pJRpgWEwMKjET+iuhzVUXVbJeGDTa+0fWunGTGV7N0TsToFtt
         KSRg==
X-Gm-Message-State: AA+aEWaGKIUHv85IOxoEVQDgTX538TOnGusffOStg8xssBr3ek3Ichx0
        qF+OyfU3kh8qBKBYqHpmf1T5w2jy4DO0aHPuR8g=
X-Google-Smtp-Source: AFSGD/Xgql/Mbq+AfjtyLSgIwpGOXa/Ad7Ak/wnwj1z0QslKjBYdRUhEqp1xamcbMAFdvZRpKaIR56kUuLWnXAPg9ok=
X-Received: by 2002:a62:6dc7:: with SMTP id i190mr10345590pfc.166.1544990761776;
 Sun, 16 Dec 2018 12:06:01 -0800 (PST)
MIME-Version: 1.0
References: <1544879072-4251-1-git-send-email-carmeli.tamir@gmail.com>
 <1544879072-4251-4-git-send-email-carmeli.tamir@gmail.com> <87y38qbo7k.fsf@mail.parknet.co.jp>
In-Reply-To: <87y38qbo7k.fsf@mail.parknet.co.jp>
From: Tamir Carmeli <carmeli.tamir@gmail.com>
Date: Sun, 16 Dec 2018 22:05:28 +0200
Message-ID: <CAKxm1-GqB=K5mnwj1GAK0jWG6J0rHjbwsmSvpvaOVVDcoUR+Kw@mail.gmail.com>
Subject: Re: [PATCH v2 3/3] fat: New inline functions to determine the FAT
 variant (32, 16 or 12)
To: OGAWA Hirofumi <hirofumi@mail.parknet.co.jp>
Cc: linux-kernel@vger.kernel.org, jthumshirn@suse.de,
        Sergey Senozhatsky <sergey.senozhatsky@gmail.com>,
        akpm@linux-foundation.org, bvanassche@acm.org, axboe@kernel.dk,
        martin.petersen@oracle.com, Stephen Rothwell <sfr@canb.auug.org.au>
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Sure. Published v3 with lower case chars. Fixed in both relevant patches.

On Sat, Dec 15, 2018 at 9:10 PM OGAWA Hirofumi
<hirofumi@mail.parknet.co.jp> wrote:
>
> Carmeli Tamir <carmeli.tamir@gmail.com> writes:
>
> > This patch introduces 3 new inline functions - IS_FAT12, IS_FAT16 and
> > IS_FAT32, and replaces every occurrence in the code in which the FS
> > variant (whether this is FAT12, FAT16 or FAT32) was previously checked
> > using msdos_sb_info->fat_bits.
>
> Could you use lower case chars for inline functions?
>
> > Signed-off-by: Carmeli Tamir <carmeli.tamir@gmail.com>
> > ---
> >  fs/fat/cache.c  |  2 +-
> >  fs/fat/dir.c    |  4 ++--
> >  fs/fat/fat.h    | 25 ++++++++++++++++++++++---
> >  fs/fat/fatent.c | 16 +++++++---------
> >  fs/fat/inode.c  | 12 ++++++------
> >  fs/fat/misc.c   |  2 +-
> >  6 files changed, 39 insertions(+), 22 deletions(-)
> >
> > diff --git a/fs/fat/cache.c b/fs/fat/cache.c
> > index 78d501c..30c51b9 100644
> > --- a/fs/fat/cache.c
> > +++ b/fs/fat/cache.c
> > @@ -363,7 +363,7 @@ int fat_bmap(struct inode *inode, sector_t sector, sector_t *phys,
> >
> >       *phys = 0;
> >       *mapped_blocks = 0;
> > -     if ((sbi->fat_bits != 32) && (inode->i_ino == MSDOS_ROOT_INO)) {
> > +     if (!IS_FAT32(sbi) && (inode->i_ino == MSDOS_ROOT_INO)) {
> >               if (sector < (sbi->dir_entries >> sbi->dir_per_block_bits)) {
> >                       *phys = sector + sbi->dir_start;
> >                       *mapped_blocks = 1;
> > diff --git a/fs/fat/dir.c b/fs/fat/dir.c
> > index c8366cb..b0b8f44 100644
> > --- a/fs/fat/dir.c
> > +++ b/fs/fat/dir.c
> > @@ -57,7 +57,7 @@ static inline void fat_dir_readahead(struct inode *dir, sector_t iblock,
> >       if ((iblock & (sbi->sec_per_clus - 1)) || sbi->sec_per_clus == 1)
> >               return;
> >       /* root dir of FAT12/FAT16 */
> > -     if ((sbi->fat_bits != 32) && (dir->i_ino == MSDOS_ROOT_INO))
> > +     if (!IS_FAT32(sbi) && (dir->i_ino == MSDOS_ROOT_INO))
> >               return;
> >
> >       bh = sb_find_get_block(sb, phys);
> > @@ -1313,7 +1313,7 @@ int fat_add_entries(struct inode *dir, void *slots, int nr_slots,
> >               }
> >       }
> >       if (dir->i_ino == MSDOS_ROOT_INO) {
> > -             if (sbi->fat_bits != 32)
> > +             if (!IS_FAT32(sbi))
> >                       goto error;
> >       } else if (MSDOS_I(dir)->i_start == 0) {
> >               fat_msg(sb, KERN_ERR, "Corrupted directory (i_pos %lld)",
> > diff --git a/fs/fat/fat.h b/fs/fat/fat.h
> > index 11bc4a2..5b6f1c8 100644
> > --- a/fs/fat/fat.h
> > +++ b/fs/fat/fat.h
> > @@ -142,13 +142,32 @@ static inline struct msdos_sb_info *MSDOS_SB(struct super_block *sb)
> >       return sb->s_fs_info;
> >  }
> >
> > +/*
> > + * Functions that determine the variant of the FAT file system (i.e.,
> > + * whether this is FAT12, FAT16 or FAT32.
> > + */
> > +static inline bool IS_FAT12(const struct msdos_sb_info *sbi)
> > +{
> > +     return sbi->fat_bits == 12;
> > +}
> > +
> > +static inline bool IS_FAT16(const struct msdos_sb_info *sbi)
> > +{
> > +     return sbi->fat_bits == 16;
> > +}
> > +
> > +static inline bool IS_FAT32(const struct msdos_sb_info *sbi)
> > +{
> > +     return sbi->fat_bits == 32;
> > +}
> > +
> >  /* Maximum number of clusters */
> >  static inline u32 MAX_FAT(struct super_block *sb)
> >  {
> >       struct msdos_sb_info *sbi = MSDOS_SB(sb);
> >
> > -     return sbi->fat_bits == 32 ? MAX_FAT32 :
> > -             sbi->fat_bits == 16 ? MAX_FAT16 : MAX_FAT12;
> > +     return IS_FAT32(sbi) ? MAX_FAT32 :
> > +             IS_FAT16(sbi) ? MAX_FAT16 : MAX_FAT12;
> >  }
> >
> >  static inline struct msdos_inode_info *MSDOS_I(struct inode *inode)
> > @@ -266,7 +285,7 @@ static inline int fat_get_start(const struct msdos_sb_info *sbi,
> >                               const struct msdos_dir_entry *de)
> >  {
> >       int cluster = le16_to_cpu(de->start);
> > -     if (sbi->fat_bits == 32)
> > +     if (IS_FAT32(sbi))
> >               cluster |= (le16_to_cpu(de->starthi) << 16);
> >       return cluster;
> >  }
> > diff --git a/fs/fat/fatent.c b/fs/fat/fatent.c
> > index f58c0ca..9166d96 100644
> > --- a/fs/fat/fatent.c
> > +++ b/fs/fat/fatent.c
> > @@ -290,19 +290,17 @@ void fat_ent_access_init(struct super_block *sb)
> >
> >       mutex_init(&sbi->fat_lock);
> >
> > -     switch (sbi->fat_bits) {
> > -     case 32:
> > +     if (IS_FAT32(sbi)) {
> >               sbi->fatent_shift = 2;
> >               sbi->fatent_ops = &fat32_ops;
> > -             break;
> > -     case 16:
> > +     } else if (IS_FAT16(sbi)) {
> >               sbi->fatent_shift = 1;
> >               sbi->fatent_ops = &fat16_ops;
> > -             break;
> > -     case 12:
> > +     } else if (IS_FAT12(sbi)) {
> >               sbi->fatent_shift = -1;
> >               sbi->fatent_ops = &fat12_ops;
> > -             break;
> > +     } else {
> > +             fat_fs_error(sb, "invalid FAT variant, %u bits", sbi->fat_bits);
> >       }
> >  }
> >
> > @@ -310,7 +308,7 @@ static void mark_fsinfo_dirty(struct super_block *sb)
> >  {
> >       struct msdos_sb_info *sbi = MSDOS_SB(sb);
> >
> > -     if (sb_rdonly(sb) || sbi->fat_bits != 32)
> > +     if (sb_rdonly(sb) || !IS_FAT32(sbi))
> >               return;
> >
> >       __mark_inode_dirty(sbi->fsinfo_inode, I_DIRTY_SYNC);
> > @@ -327,7 +325,7 @@ static inline int fat_ent_update_ptr(struct super_block *sb,
> >       /* Is this fatent's blocks including this entry? */
> >       if (!fatent->nr_bhs || bhs[0]->b_blocknr != blocknr)
> >               return 0;
> > -     if (sbi->fat_bits == 12) {
> > +     if (IS_FAT12(sbi)) {
> >               if ((offset + 1) < sb->s_blocksize) {
> >                       /* This entry is on bhs[0]. */
> >                       if (fatent->nr_bhs == 2) {
> > diff --git a/fs/fat/inode.c b/fs/fat/inode.c
> > index 708de6d..a84b61b 100644
> > --- a/fs/fat/inode.c
> > +++ b/fs/fat/inode.c
> > @@ -686,7 +686,7 @@ static void fat_set_state(struct super_block *sb,
> >
> >       b = (struct fat_boot_sector *) bh->b_data;
> >
> > -     if (sbi->fat_bits == 32) {
> > +     if (IS_FAT32(sbi)) {
> >               if (set)
> >                       b->fat32.state |= FAT_STATE_DIRTY;
> >               else
> > @@ -1397,7 +1397,7 @@ static int fat_read_root(struct inode *inode)
> >       inode->i_mode = fat_make_mode(sbi, ATTR_DIR, S_IRWXUGO);
> >       inode->i_op = sbi->dir_ops;
> >       inode->i_fop = &fat_dir_operations;
> > -     if (sbi->fat_bits == 32) {
> > +     if (IS_FAT32(sbi)) {
> >               MSDOS_I(inode)->i_start = sbi->root_cluster;
> >               error = fat_calc_dir_size(inode);
> >               if (error < 0)
> > @@ -1424,7 +1424,7 @@ static unsigned long calc_fat_clusters(struct super_block *sb)
> >       struct msdos_sb_info *sbi = MSDOS_SB(sb);
> >
> >       /* Divide first to avoid overflow */
> > -     if (sbi->fat_bits != 12) {
> > +     if (!IS_FAT12(sbi)) {
> >               unsigned long ent_per_sec = sb->s_blocksize * 8 / sbi->fat_bits;
> >               return ent_per_sec * sbi->fat_length;
> >       }
> > @@ -1744,7 +1744,7 @@ int fat_fill_super(struct super_block *sb, void *data, int silent, int isvfat,
> >       }
> >
> >       /* interpret volume ID as a little endian 32 bit integer */
> > -     if (sbi->fat_bits == 32)
> > +     if (IS_FAT32(sbi))
> >               sbi->vol_id = bpb.fat32_vol_id;
> >       else /* fat 16 or 12 */
> >               sbi->vol_id = bpb.fat16_vol_id;
> > @@ -1770,11 +1770,11 @@ int fat_fill_super(struct super_block *sb, void *data, int silent, int isvfat,
> >
> >       total_clusters = (total_sectors - sbi->data_start) / sbi->sec_per_clus;
> >
> > -     if (sbi->fat_bits != 32)
> > +     if (!IS_FAT32(sbi))
> >               sbi->fat_bits = (total_clusters > MAX_FAT12) ? 16 : 12;
> >
> >       /* some OSes set FAT_STATE_DIRTY and clean it on unmount. */
> > -     if (sbi->fat_bits == 32)
> > +     if (IS_FAT32(sbi))
> >               sbi->dirty = bpb.fat32_state & FAT_STATE_DIRTY;
> >       else /* fat 16 or 12 */
> >               sbi->dirty = bpb.fat16_state & FAT_STATE_DIRTY;
> > diff --git a/fs/fat/misc.c b/fs/fat/misc.c
> > index fce0a76..5368c6a 100644
> > --- a/fs/fat/misc.c
> > +++ b/fs/fat/misc.c
> > @@ -64,7 +64,7 @@ int fat_clusters_flush(struct super_block *sb)
> >       struct buffer_head *bh;
> >       struct fat_boot_fsinfo *fsinfo;
> >
> > -     if (sbi->fat_bits != 32)
> > +     if (!IS_FAT32(sbi))
> >               return 0;
> >
> >       bh = sb_bread(sb, sbi->fsinfo_sector);
>
> --
> OGAWA Hirofumi <hirofumi@mail.parknet.co.jp>
