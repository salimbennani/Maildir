Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 08:56:52 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 49D8258079D;
	Wed, 12 Dec 2018 15:13:32 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga001-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 12 Dec 2018 15:13:32 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A8x+feB8xIW7h4v9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1+0VIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CRWRPQNtfVzBPDI2/?=
 =?us-ascii?q?YYsADesBMvpXoYbyvFsOtRmzCBKwBO3tzjJEmmP60bEk3+knDArI3BYgH9ULsH?=
 =?us-ascii?q?nMotn7NrkdXfiox6TVyjXPYe5d1DDm54jPaBwhoe+DUKlxccrX1UkgCQfFgk+M?=
 =?us-ascii?q?poziOjOYz+IAuHWY4ep4Te+jlXIrpgVrrjSyyMoglJPFip8Wx1zY7yl0wYQ4Kc?=
 =?us-ascii?q?WlREJne9KoDpVduiWAO4drXM8vQXtktSkmxrEepJK2fSwHxI45yxPfZPGLaYiF?=
 =?us-ascii?q?7gj9WOqNLzp1gm9udqiliBao60egz/XxVsmq31ZOqSpIisfMtn8T2BzJ8MSHSe?=
 =?us-ascii?q?Vy/l2n2TmR0wDf8OZEIVo7labDKp4hxKA/loYLvEjdAiP7nF/6gLKYe0k64OSk?=
 =?us-ascii?q?9ufqbqn8qpKdNYJ4kgT+Pb4vmsy7D+Q4KA8OX22D9OS41b3j+1D5QbpTgv01jK?=
 =?us-ascii?q?bZqpbaKtofpqKgBA9U3IAj5AilDzq9ztQYkmcILEhfdBKEkYfpIVfOL+78Dful?=
 =?us-ascii?q?hFSsijhry+jcPrL9GpXNMmTDkLD5cLZ56k5cyxQ8wcpQ5pJJEbwBJPPzWknstN?=
 =?us-ascii?q?3XFBM5Mgq0w/r5B9V5zI8RRWWPAqqBOqPIrVCI/v4vI/WLZIINuDbyMfkl5+L0?=
 =?us-ascii?q?gn8+g1MdfbSp0oERaHC3BflmJ0SZYXzxgtYOC2sKvww+TPD0h12GSzJce3GyX6?=
 =?us-ascii?q?ck7DEhFI2mFZvDRpyqgLGZ3ie7GYNZanpFClCLF3focYKEVuwIaCKTJM9hjzMF?=
 =?us-ascii?q?WaKgS48nyRGhqgv6x6B7IerT/y0SrYjj28Rt5+3PiREy8iR5AN6G02GNSGF0nX?=
 =?us-ascii?q?kERyUs06B9ukF9zlaD0a5lg/1XD9BT5vVJUhskOp7Y1eB1F9fyWgfZdNeTVFmm?=
 =?us-ascii?q?WsmmAS02Tt8pwN8BeUB9F8+mjhDCxSWqBbAVmqePBJw19KLcwnfwK9x8y3bAyK?=
 =?us-ascii?q?kukV0mTtFTOm2hg6517xLTCJLRk0WFi6aqcrwR0zPX+2ed02WCpkFYXxR2UaXe?=
 =?us-ascii?q?Q38fYEzardD65kPHS7+jErAnMgpHyc6fJapGcNzpjVNaRPj9PNTSeX6+m2C1BR?=
 =?us-ascii?q?yQ3LODcJLqe3kB3CXaEEULjhoc/WiYOgQkBieuuWTeDCdwGlLpeE7s9eh+qHWm?=
 =?us-ascii?q?Tk471Q2Kbkth16ar9R4Rn/CTV/QT3rccsic7tzp0BEq9387RC9eYuwphfaBcYd?=
 =?us-ascii?q?Qh4FdH1WPVrRB9MoanL6B4gl4ecgJ3v0z12hVzC4VAl9UqrXwwwApzL6KYzE1O?=
 =?us-ascii?q?dzeC0Z/sPb3XL3H4/AqzZK7OxlHezNGW978V5/Q8tVrisx+mF0o4/3p8ztlazm?=
 =?us-ascii?q?GT5pPJDAoVT5L8SUI39xl8p7HHbSgx/YLU1XtwMaaqtj/Owc4mBOwgyhy4ZddQ?=
 =?us-ascii?q?LLuEFBPuE80dH8WvKPEql0K1YR4ePeFS9LQ7P8Wpd/ad3K6rPeBgnC+pjGhd4Y?=
 =?us-ascii?q?B91F6M+DR4SuLSw5kFxPSY1BOdVzjglFehrtz3mYdcaDEIH2qw1TLrBJRMaa11?=
 =?us-ascii?q?Z4oLD3mhI9e2xtlnm5HiQXpY+0O9CFMc38+pfwGfb1j83Q1WyEQWrmarmSq+zz?=
 =?us-ascii?q?xojT4pqrCT0zDJw+TnbBAHIHJERHF+jVfwJoi5l9AbXEmyYwkpjhel/lv6x65A?=
 =?us-ascii?q?qaR7LmnTR1pIfifsI2FjVKuwqqSNY8pV5Jw0tiVXVfy2YUqGRb7lvxsazyTjEn?=
 =?us-ascii?q?NcxD8hbTGquZb5nxtghGKGNnlzr3nZecB2xRjB4tzRXvpR3jsARCllhjjbHFm8?=
 =?us-ascii?q?P9+1/dqKk5fPqPyxV2WkVpdLaynk0ZuAtDen5W1tGRC+n+q8mtr9HQg40C/70c?=
 =?us-ascii?q?JnVSHJrBb6f4nq2L62MeNhfkl0GlD879B2FZ15kos1nJsQw2QVho2J/Xoblmf+?=
 =?us-ascii?q?KdZb1rj/bHYXRT4L3sTa4A7q2EB4KnKJxoT5VmiSw8d7Ztm6ZH8W1Tw578xQFK?=
 =?us-ascii?q?iU67lElzNvolWktQLRfeR9njAFxPsr6X4agPsGtBAjzyqDGbASAVdXPTb3mBuW?=
 =?us-ascii?q?9dC+o75aZGKucbi2yUp/ksqtDLCEogFARnn5fo0uEjN37sV6KFjMymH86pn4eN?=
 =?us-ascii?q?nMatIergGUkxDFj+RPKZM+jPwKhTd8OWLmvH0o0Oo7jR1o3ZGns4mLMWRt/KSl?=
 =?us-ascii?q?AhFGMj35fd8c+jbojaxGhMaZw5ivHol9GjUMRJbnVuinEDUWtfT6LQqOFCA8p2?=
 =?us-ascii?q?yfGbreGw+f9Uhno2jOE5CtK3GYOn0Zwc9+SxmaIUxVmBoUUykinp4lCgCqw9Ts?=
 =?us-ascii?q?cEVj6TAU+FH4sQFAyv5yOxn8T2ffpxqoajEuR5iENxdW6gBC50HIMc2R9O5zHi?=
 =?us-ascii?q?dY/oG/owyJMGCUewNIDWQRUEyeG1/jJqWu5cXH8+WABuu+KObOYayTqeNEUfeE?=
 =?us-ascii?q?34mv0oxg/zaDLciPOnhiD/sm2ktMR3x5GsLZmykRRCwTjS7Cc8mbpBKk8C1tss?=
 =?us-ascii?q?+/6OjrWB7o5YaXC7tdL9Rv+xO1gaeCLeKQhzx5KTFX1pwS33/I1aMf0UUWiyFv?=
 =?us-ascii?q?cTmtDLsBuTTMTKLWhq9YERobZzlvO8tP6qI2xhNNNtLDitPpyr54ieY4BE1YVV?=
 =?us-ascii?q?P6gMGme8wLL3u5NFPGH0uLMLWGJTvWw8D4e6+8SLtQjPlKuB20ozqUD0jjPjGb?=
 =?us-ascii?q?nTnzSx+vKf1MjD2cPBFGpIG9cxNtBXL/Q978dhK7MMF4jTstzL0wh3PKM3McMD?=
 =?us-ascii?q?dmf0NMqL2Q8T1XgvFlF2Nd6XplKPGOmzyF4OnANpYWrfxrDzx0lu1A5nQ6zrpV?=
 =?us-ascii?q?7CdcS/10mCvdtNhuo169n+mLyzpnVgdOqzlRiIKKu0ViJbvW9p1aVXnY+xIN6D?=
 =?us-ascii?q?bYNxNf7cNsF9nqsKN4ztnJibK1KT1HtdnT+IFUU9DdNcaCO3kJNRvvBS6SDQEA?=
 =?us-ascii?q?CzWsMDeMqVZalaTY1nDR5rI94NC4kp1ISrJzVVopG/dcAUNgSo9RaKxrVy8pxO?=
 =?us-ascii?q?bIxPUD4mCz+VyIHJ1X?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAAAwlRFch0O0hNFkGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBg2snCowLjBKCDRSIf45AgXMUGBMBhEACgnw?=
 =?us-ascii?q?iNAkNAQMBAQEBAQECARMBAQEIDQkIKSQLgjYkAYJhAQEBAQMBAiQMBz8GBgMBA?=
 =?us-ascii?q?QEBCBEDAQEBAQoUEAMeER0IAgQOBQUDgxmBagMVBagCM4gCDYIcjDyBWD6BV4J?=
 =?us-ascii?q?MgleFX4ImAokzCoFzhBWBT48jJy4HAgKNaD2DSIFcI4R3ilAsiH2GBIoSgUaCD?=
 =?us-ascii?q?nBdDYJSgicXjh0/AQExAYEEAQGLTIEfAQE?=
X-IPAS-Result: =?us-ascii?q?A0ABAAAwlRFch0O0hNFkGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBg2snCowLjBKCDRSIf45AgXMUGBMBhEACgnwiNAkNAQMBAQEBA?=
 =?us-ascii?q?QECARMBAQEIDQkIKSQLgjYkAYJhAQEBAQMBAiQMBz8GBgMBAQEBCBEDAQEBAQo?=
 =?us-ascii?q?UEAMeER0IAgQOBQUDgxmBagMVBagCM4gCDYIcjDyBWD6BV4JMgleFX4ImAokzC?=
 =?us-ascii?q?oFzhBWBT48jJy4HAgKNaD2DSIFcI4R3ilAsiH2GBIoSgUaCDnBdDYJSgicXjh0?=
 =?us-ascii?q?/AQExAYEEAQGLTIEfAQE?=
X-IronPort-AV: E=Sophos;i="5.56,346,1539673200"; 
   d="scan'208";a="56123555"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 12 Dec 2018 15:13:30 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728461AbeLLXN1 convert rfc822-to-8bit (ORCPT
        <rfc822;like.xu@linux.intel.com> + 23 others);
        Wed, 12 Dec 2018 18:13:27 -0500
Received: from mga14.intel.com ([192.55.52.115]:6236 "EHLO mga14.intel.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726253AbeLLXN0 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 12 Dec 2018 18:13:26 -0500
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from fmsmga001.fm.intel.com ([10.253.24.23])
  by fmsmga103.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 12 Dec 2018 15:13:25 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,346,1539673200"; 
   d="scan'208";a="129455958"
Received: from fmsmsx105.amr.corp.intel.com ([10.18.124.203])
  by fmsmga001.fm.intel.com with ESMTP; 12 Dec 2018 15:13:25 -0800
Received: from fmsmsx123.amr.corp.intel.com (10.18.125.38) by
 FMSMSX105.amr.corp.intel.com (10.18.124.203) with Microsoft SMTP Server (TLS)
 id 14.3.408.0; Wed, 12 Dec 2018 15:13:25 -0800
Received: from shsmsx102.ccr.corp.intel.com (10.239.4.154) by
 fmsmsx123.amr.corp.intel.com (10.18.125.38) with Microsoft SMTP Server (TLS)
 id 14.3.408.0; Wed, 12 Dec 2018 15:13:24 -0800
Received: from shsmsx104.ccr.corp.intel.com ([169.254.5.203]) by
 shsmsx102.ccr.corp.intel.com ([169.254.2.182]) with mapi id 14.03.0415.000;
 Thu, 13 Dec 2018 07:13:22 +0800
From: "He, Bo" <bo.he@intel.com>
To: "paulmck@linux.ibm.com" <paulmck@linux.ibm.com>
CC: Steven Rostedt <rostedt@goodmis.org>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        "josh@joshtriplett.org" <josh@joshtriplett.org>,
        "mathieu.desnoyers@efficios.com" <mathieu.desnoyers@efficios.com>,
        "jiangshanlai@gmail.com" <jiangshanlai@gmail.com>,
        "Zhang, Jun" <jun.zhang@intel.com>,
        "Xiao, Jin" <jin.xiao@intel.com>,
        "Zhang, Yanmin" <yanmin.zhang@intel.com>,
        "Bai, Jie A" <jie.a.bai@intel.com>,
        "Sun, Yi J" <yi.j.sun@intel.com>
Subject: RE: rcu_preempt caused oom
Thread-Topic: rcu_preempt caused oom
Thread-Index: AdSHvQIr70OYynHSTxKgLAvVXX+0Zv//yKOAgAAWeAD//li4UIADPhuAgAAJSYD//3lRYIAAoJ4A//tcRfABJU8zAP/+T9Nw//xa4AD/91m7QP/uoBSA/9vB3nD/t3F+AP9tcGAw/tr6woD9snCZgPtjpC6Q9sakFQDtjQLogNsYI6iwtjC+vgDsYEklwNjA58YAsYF15gDjAkI/QA==
Date: Wed, 12 Dec 2018 23:13:22 +0000
Message-ID: <CD6925E8781EFD4D8E11882D20FC406D52A193C3@SHSMSX104.ccr.corp.intel.com>
References: <CD6925E8781EFD4D8E11882D20FC406D52A180C5@SHSMSX104.ccr.corp.intel.com>
 <20181207141131.GP4170@linux.ibm.com> <20181209195601.GA7854@linux.ibm.com>
 <CD6925E8781EFD4D8E11882D20FC406D52A186D0@SHSMSX104.ccr.corp.intel.com>
 <20181211003838.GD4170@linux.ibm.com> <20181211044631.GA19942@linux.ibm.com>
 <CD6925E8781EFD4D8E11882D20FC406D52A18E53@SHSMSX104.ccr.corp.intel.com>
 <20181212022446.GV4170@linux.ibm.com>
 <CD6925E8781EFD4D8E11882D20FC406D52A192C3@SHSMSX104.ccr.corp.intel.com>
 <20181212154224.GX4170@linux.ibm.com> <20181212210316.GA14777@linux.ibm.com>
In-Reply-To: <20181212210316.GA14777@linux.ibm.com>
Accept-Language: zh-CN, en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-ctpclassification: CTP_NT
x-titus-metadata-40: eyJDYXRlZ29yeUxhYmVscyI6IiIsIk1ldGFkYXRhIjp7Im5zIjoiaHR0cDpcL1wvd3d3LnRpdHVzLmNvbVwvbnNcL0ludGVsMyIsImlkIjoiNDljZWMzYzYtYjljOS00ZTkxLTk0ZDItNzM4N2Q4NTA2MDMwIiwicHJvcHMiOlt7Im4iOiJDVFBDbGFzc2lmaWNhdGlvbiIsInZhbHMiOlt7InZhbHVlIjoiQ1RQX05UIn1dfV19LCJTdWJqZWN0TGFiZWxzIjpbXSwiVE1DVmVyc2lvbiI6IjE3LjEwLjE4MDQuNDkiLCJUcnVzdGVkTGFiZWxIYXNoIjoiT2Q4azJTMktDNEMwSzNUNW5oeDR4SEhrczhiMXEySWhoeWlvUEtVNGVUbktQZmprelFCVHNtb1A3MFd4Tm5iMSJ9
dlp-product: dlpe-windows
dlp-version: 11.0.400.15
dlp-reaction: no-action
x-originating-ip: [10.239.127.40]
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 8BIT
MIME-Version: 1.0
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

I don't see the rcutree.sysrq_rcu parameter in v4.19 kernel, I also checked the latest kernel and the latest tag v4.20-rc6, not see the sysrq_rcu.
Please correct me if I have something wrong.

-----Original Message-----
From: Paul E. McKenney <paulmck@linux.ibm.com> 
Sent: Thursday, December 13, 2018 5:03 AM
To: He, Bo <bo.he@intel.com>
Cc: Steven Rostedt <rostedt@goodmis.org>; linux-kernel@vger.kernel.org; josh@joshtriplett.org; mathieu.desnoyers@efficios.com; jiangshanlai@gmail.com; Zhang, Jun <jun.zhang@intel.com>; Xiao, Jin <jin.xiao@intel.com>; Zhang, Yanmin <yanmin.zhang@intel.com>; Bai, Jie A <jie.a.bai@intel.com>
Subject: Re: rcu_preempt caused oom

On Wed, Dec 12, 2018 at 07:42:24AM -0800, Paul E. McKenney wrote:
> On Wed, Dec 12, 2018 at 01:21:33PM +0000, He, Bo wrote:
> > we reproduce on two boards, but I still not see the show_rcu_gp_kthreads() dump logs, it seems the patch can't catch the scenario.
> > I double confirmed the CONFIG_PROVE_RCU=y is enabled in the config as it's extracted from the /proc/config.gz.
> 
> Strange.
> 
> Are the systems responsive to sysrq keys once failure occurs?  If so, 
> I will provide you a sysrq-R or some such to dump out the RCU state.

Or, as it turns out, sysrq-y if booting with rcutree.sysrq_rcu=1 using the patch below.  Only lightly tested.

							Thanx, Paul

------------------------------------------------------------------------

commit adfc7dff659495a3433d5084256be59eee0ac6df
Author: Paul E. McKenney <paulmck@linux.ibm.com>
Date:   Mon Dec 10 16:33:59 2018 -0800

    rcu: Improve diagnostics for failed RCU grace-period start
    
    Backported from v4.21/v5.0
    
    If a grace period fails to start (for example, because you commented
    out the last two lines of rcu_accelerate_cbs_unlocked()), rcu_core()
    will invoke rcu_check_gp_start_stall(), which will notice and complain.
    However, this complaint is lacking crucial debugging information such
    as when the last wakeup executed and what the value of ->gp_seq was at
    that time.  This commit therefore removes the current pr_alert() from
    rcu_check_gp_start_stall(), instead invoking show_rcu_gp_kthreads(),
    which has been updated to print the needed information, which is collected
    by rcu_gp_kthread_wake().
    
    Signed-off-by: Paul E. McKenney <paulmck@linux.ibm.com>

diff --git a/kernel/rcu/tree.c b/kernel/rcu/tree.c index 0b760c1369f7..4bcd8753e293 100644
--- a/kernel/rcu/tree.c
+++ b/kernel/rcu/tree.c
@@ -626,25 +626,57 @@ void rcu_sched_force_quiescent_state(void)
 }
 EXPORT_SYMBOL_GPL(rcu_sched_force_quiescent_state);
 
+/*
+ * Convert a ->gp_state value to a character string.
+ */
+static const char *gp_state_getname(short gs) {
+	if (gs < 0 || gs >= ARRAY_SIZE(gp_state_names))
+		return "???";
+	return gp_state_names[gs];
+}
+
+/*
+ * Return the root node of the specified rcu_state structure.
+ */
+static struct rcu_node *rcu_get_root(struct rcu_state *rsp) {
+	return &rsp->node[0];
+}
+
 /*
  * Show the state of the grace-period kthreads.
  */
 void show_rcu_gp_kthreads(void)
 {
 	int cpu;
+	unsigned long j;
+	unsigned long ja;
+	unsigned long jr;
+	unsigned long jw;
 	struct rcu_data *rdp;
 	struct rcu_node *rnp;
 	struct rcu_state *rsp;
 
+	j = jiffies;
 	for_each_rcu_flavor(rsp) {
-		pr_info("%s: wait state: %d ->state: %#lx\n",
-			rsp->name, rsp->gp_state, rsp->gp_kthread->state);
+		ja = j - READ_ONCE(rsp->gp_activity);
+		jr = j - READ_ONCE(rsp->gp_req_activity);
+		jw = j - READ_ONCE(rsp->gp_wake_time);
+		pr_info("%s: wait state: %s(%d) ->state: %#lx delta ->gp_activity %lu ->gp_req_activity %lu ->gp_wake_time %lu ->gp_wake_seq %ld ->gp_seq %ld ->gp_seq_needed %ld ->gp_flags %#x\n",
+			rsp->name, gp_state_getname(rsp->gp_state),
+			rsp->gp_state,
+			rsp->gp_kthread ? rsp->gp_kthread->state : 0x1ffffL,
+			ja, jr, jw, (long)READ_ONCE(rsp->gp_wake_seq),
+			(long)READ_ONCE(rsp->gp_seq),
+			(long)READ_ONCE(rcu_get_root(rsp)->gp_seq_needed),
+			READ_ONCE(rsp->gp_flags));
 		rcu_for_each_node_breadth_first(rsp, rnp) {
 			if (ULONG_CMP_GE(rsp->gp_seq, rnp->gp_seq_needed))
 				continue;
-			pr_info("\trcu_node %d:%d ->gp_seq %lu ->gp_seq_needed %lu\n",
-				rnp->grplo, rnp->grphi, rnp->gp_seq,
-				rnp->gp_seq_needed);
+			pr_info("\trcu_node %d:%d ->gp_seq %ld ->gp_seq_needed %ld\n",
+				rnp->grplo, rnp->grphi, (long)rnp->gp_seq,
+				(long)rnp->gp_seq_needed);
 			if (!rcu_is_leaf_node(rnp))
 				continue;
 			for_each_leaf_node_possible_cpu(rnp, cpu) { @@ -653,8 +685,8 @@ void show_rcu_gp_kthreads(void)
 				    ULONG_CMP_GE(rsp->gp_seq,
 						 rdp->gp_seq_needed))
 					continue;
-				pr_info("\tcpu %d ->gp_seq_needed %lu\n",
-					cpu, rdp->gp_seq_needed);
+				pr_info("\tcpu %d ->gp_seq_needed %ld\n",
+					cpu, (long)rdp->gp_seq_needed);
 			}
 		}
 		/* sched_show_task(rsp->gp_kthread); */ @@ -690,14 +722,6 @@ void rcutorture_get_gp_data(enum rcutorture_type test_type, int *flags,  }  EXPORT_SYMBOL_GPL(rcutorture_get_gp_data);
 
-/*
- * Return the root node of the specified rcu_state structure.
- */
-static struct rcu_node *rcu_get_root(struct rcu_state *rsp) -{
-	return &rsp->node[0];
-}
-
 /*
  * Enter an RCU extended quiescent state, which can be either the
  * idle loop or adaptive-tickless usermode execution.
@@ -1285,16 +1309,6 @@ static void record_gp_stall_check_time(struct rcu_state *rsp)
 	rsp->n_force_qs_gpstart = READ_ONCE(rsp->n_force_qs);  }
 
-/*
- * Convert a ->gp_state value to a character string.
- */
-static const char *gp_state_getname(short gs) -{
-	if (gs < 0 || gs >= ARRAY_SIZE(gp_state_names))
-		return "???";
-	return gp_state_names[gs];
-}
-
 /*
  * Complain about starvation of grace-period kthread.
  */
@@ -1693,7 +1707,8 @@ static bool rcu_future_gp_cleanup(struct rcu_state *rsp, struct rcu_node *rnp)
  * Don't do a self-awaken, and don't bother awakening when there is
  * nothing for the grace-period kthread to do (as in several CPUs
  * raced to awaken, and we lost), and finally don't try to awaken
- * a kthread that has not yet been created.
+ * a kthread that has not yet been created.  If all those checks are
+ * passed, track some debug information and awaken.
  */
 static void rcu_gp_kthread_wake(struct rcu_state *rsp)  { @@ -1701,6 +1716,8 @@ static void rcu_gp_kthread_wake(struct rcu_state *rsp)
 	    !READ_ONCE(rsp->gp_flags) ||
 	    !rsp->gp_kthread)
 		return;
+	WRITE_ONCE(rsp->gp_wake_time, jiffies);
+	WRITE_ONCE(rsp->gp_wake_seq, READ_ONCE(rsp->gp_seq));
 	swake_up_one(&rsp->gp_wq);
 }
 
@@ -2802,16 +2819,11 @@ rcu_check_gp_start_stall(struct rcu_state *rsp, struct rcu_node *rnp,
 		raw_spin_unlock_irqrestore_rcu_node(rnp, flags);
 		return;
 	}
-	pr_alert("%s: g%ld->%ld gar:%lu ga:%lu f%#x gs:%d %s->state:%#lx\n",
-		 __func__, (long)READ_ONCE(rsp->gp_seq),
-		 (long)READ_ONCE(rnp_root->gp_seq_needed),
-		 j - rsp->gp_req_activity, j - rsp->gp_activity,
-		 rsp->gp_flags, rsp->gp_state, rsp->name,
-		 rsp->gp_kthread ? rsp->gp_kthread->state : 0x1ffffL);
 	WARN_ON(1);
 	if (rnp_root != rnp)
 		raw_spin_unlock_rcu_node(rnp_root);
 	raw_spin_unlock_irqrestore_rcu_node(rnp, flags);
+	show_rcu_gp_kthreads();
 }
 
 /*
diff --git a/kernel/rcu/tree.h b/kernel/rcu/tree.h index 4e74df768c57..0e051d9b5f1a 100644
--- a/kernel/rcu/tree.h
+++ b/kernel/rcu/tree.h
@@ -327,6 +327,8 @@ struct rcu_state {
 	struct swait_queue_head gp_wq;		/* Where GP task waits. */
 	short gp_flags;				/* Commands for GP task. */
 	short gp_state;				/* GP kthread sleep state. */
+	unsigned long gp_wake_time;		/* Last GP kthread wake. */
+	unsigned long gp_wake_seq;		/* ->gp_seq at ^^^. */
 
 	/* End of fields guarded by root rcu_node's lock. */
 

