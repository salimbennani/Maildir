Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 24 Nov 2018 12:38:14 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 4EB6858037D;
	Fri, 23 Nov 2018 19:01:51 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 23 Nov 2018 19:01:50 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A+TPAhBN3UdMv2Pm52FEl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KPj6oMbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRtpeWCNcDI28?=
 =?us-ascii?q?bYQBAeUPM+VWr4fjoFUOtgO+CAu3CePzyDFIg2P63a0m3+g/FwzNwQwuH8gJsH?=
 =?us-ascii?q?TRtNj7L6YSXvqzzKLV0zjMdfJW0ir65YfUaB8hoOqBXb11ccve00UvChjFg0yW?=
 =?us-ascii?q?pIf4PD2VzvwAv3aH4+dkT+6jlmAqpx9rrjSyxcoglpPFi4MXx1zc8Sh0w5w5Kc?=
 =?us-ascii?q?ClREN4e9KoDphduzuHO4dqTM4vRXxjtjwgxb0co5G7eTAHyJQ5yB7bbPyKa5aI?=
 =?us-ascii?q?4h39W+aLOzt4h2xqeKi5hxms9Uis0Or8VtO70FpSrypFlMfDtmwV2hDN9sSKTu?=
 =?us-ascii?q?Fx8lqv1DqRzQzf9+JJLVwumafaKZMt2rswmYASsUTHEC/2gkL2jKqOe0Ug++io?=
 =?us-ascii?q?7fnnY7r/qp+fKYB0kAf+PboqmsCmBuQ5PA4OUHaB+emnyr3j8lP2QK9Qgv01jK?=
 =?us-ascii?q?bZqpbaKtofpqKjBA9VyIkj5w6lDzi6yNQYgWUHLFVddRKDjojpOE/BLOr3DPei?=
 =?us-ascii?q?mFmslDZrx/bbPrzuGJnNL37DkKv/crZ58UJT1A0zzdVH7ZJOFr4BOO7zWlP2tN?=
 =?us-ascii?q?HADh82KQ20w/r9B9V6zI8eWX+PDbWfMKPdqlKI4uMvI++RZI4aojr9Kv4l5+Lw?=
 =?us-ascii?q?gn89g1MSYa6p3Z4PYnCiAvtmO1mZYWbrgtoZE2cKuRQxQPbpiF2FVz5TYXGyUr?=
 =?us-ascii?q?k45jE6DoKmEIjCSpqsgLyHwCe0AJlWanpaBVCLFHfib5+EVOsUaCKOPs9hlSQJ?=
 =?us-ascii?q?WqK6S48h0hGutxX2y6B9IerW4SAYsZPj1N5o5+zcjx0y9Dp0D9iD3GGJVW17gm?=
 =?us-ascii?q?QIRzou1qBlvUN90kuD0bR/g/FAFtxc/fVJXh0+NZ7d1eN6Dd/yVxnFfteITlam?=
 =?us-ascii?q?X9qnDSswTtI3398BfUJ9F8++gRDE2iqgG6UVmKCTBJwo7qLc2GD8KNtnxHbYyq?=
 =?us-ascii?q?YtlVkmTdFJNW29mKF/8Q/fB4rKk0Wck6anbqAc3C/L9GeewmuCpkBYUAhsUarb?=
 =?us-ascii?q?WXATfFfZrdP85knaVb+hFawnMhddyc6FMqZFd8fmjUtYS/v5ONTReWSxm3yuCh?=
 =?us-ascii?q?aO3b6MaIvqe2MA3CTSEkQEkgYT/WqYOgg6HCuuv2XeDDl2H1L1f0zs6fV+qG+8?=
 =?us-ascii?q?TkIs0wGKbkhh172p+h4Vhf2QUe8T0qgDuCc7rzV0HVC9393NBtqEpgpherhcYN?=
 =?us-ascii?q?wn7FdG02LZqxJyPpi6I69+gV4edhx9v1ny2BVvFoVAjc8qoWswwwp2N62Z301O?=
 =?us-ascii?q?djOC0Z/rJ73YN3P9/Basa67RxFHTy9KW+qYJ6PQlpFTvpgCpFkw+83p519lZyW?=
 =?us-ascii?q?eT5pLPDAAKS5L+Tl439wRmp7HdeiQ8557U2WdwPqWusz7C28gmBO0qyhu7e9df?=
 =?us-ascii?q?MaWEFBL9EsEABsiuLvAqlEatbh4eIO9S86s0Ndu8d/SawK6rIPpgnDW+gGRd4Y?=
 =?us-ascii?q?ByzliD9zBhRe7PxZoFxe+X3hGGVzvlkFiuqMT3lp1aajEIGWq/zzPpBIpQZq10?=
 =?us-ascii?q?YIYKBn2iI8yxxtVimZHtX2RU+0KkB1MDwMWpYwadb0Th3Q1M0kQauXymmSqiwz?=
 =?us-ascii?q?10iT0ptbef3CrVzuTmdRoHPHNLRWZ4gVftJ4i0k84VXEyyYwc1kxul4F7wx7JH?=
 =?us-ascii?q?q6RnM2nTXUBIcjD0L254SKuwtbmCY8lV5JMzqypXU+e8YVGcSrHjpRsXyCfjH2?=
 =?us-ascii?q?pYxDAmeDCmoJT5nxpmiG2DKHZ/tmbWecZ1xR3H/tzTWeZR3iYaRCl/kTTWBkKz?=
 =?us-ascii?q?P96z8dWWlpfDtPuzV2agVp1VbCnqwpmMtCq95W12HxK/m+q/lcHgEQg/ySX7zc?=
 =?us-ascii?q?VlVT3UrBbgZYnmz6e6PvhmfkVyBF/89tB1GodxkoYrgJEQ2H4ahoia/HYdkGfz?=
 =?us-ascii?q?N8lb1rz6bHYXWTELxNvV6hD/2EJ/NnKJ2575VnKFz8tkZtm6YXkZ1jgz7s9UE6?=
 =?us-ascii?q?eU8KJLnTFurVWmtwLRbuNwnjMcyfso9X4bjPsFuAsrziWBHL8SGVNUMjDrlxSN?=
 =?us-ascii?q?99q+trlYZH6zcbis00pzhcyhDLaHog1GWXf2YJEiHTJr7sVkMVLBy3nz6oDieN?=
 =?us-ascii?q?nNYtMfrByUkxHcj+dLLJI9jOYFhS1iOWjlp30q1/Y7jQBy3ZG9pIWIMH9i/KW9?=
 =?us-ascii?q?Ah5FLDH1Y94T9yrpjaZfmMaWwo+uEo9gGjUNQJvnU/aoHCgOuvTgMgaECCc8pW?=
 =?us-ascii?q?uDGbrDAQ+f719rr3DVHJCuKX6XP2MVzcl4SBmeOUxfgx0UXDMgkZ4iDQ2qwM3h?=
 =?us-ascii?q?cEFk5jEe/FL4qx1Myv52OBn7SGvQuACoajIsQpiFMBVW9h1C51vSMcGG7uNzGD?=
 =?us-ascii?q?xY/oS8rAOXLGyXfR9IDWYPWkyLHF3jOriu5d/d8+mXHOa+Lv3OYamQpuxaTfuH?=
 =?us-ascii?q?2ZWv0o5+9TaWKsqPJmViD+E82kdbXXB2BcXZmzYMSywWjS7NbNSbpBCz+iJptM?=
 =?us-ascii?q?C/7e/rVRnr5YuODbtSLNpu9wq3gaeFK+6fmiJ5JSxE2ZMLwH/C0KIf00IKiyFy?=
 =?us-ascii?q?azmtFqwNujTQTK3LgK9YER4aZzl3NMtJ9K882ghNOcjGitL6zLJ4j/g1C0tbWl?=
 =?us-ascii?q?zlgM2mecsKI2SlPlPdGEmLLKiGJSHMw8zvfaO8SLhQgP9IuBGqpTmbE1HsPjKY?=
 =?us-ascii?q?mjntVhCvN/xMjS6BMBxfvoG9bghiCWz5QN36bR27Ncd9jScqzr0smnPKKWkcPC?=
 =?us-ascii?q?B8ckxXqL2Q6CJYgvNnFG1A7npqN++EmymC4uncK5YWt+ZrAytum+Jb5nQ616Va?=
 =?us-ascii?q?7CVeSPNpnyvSq40mn1bzrumIzzN8GDVKpzdbgo+R9RF+NqHJ3p1BX2vY5hUL7H?=
 =?us-ascii?q?XWBxlc9PV/Ddi6gqFZzJDknaO7fDxL8vrb+NtaGtOCe5HPC2YoLRe8QG2cNwAC?=
 =?us-ascii?q?VzP+cDiH30E=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0DrBwDvvfhbh0O0hNFjHQEBBQEHBQGBZ?=
 =?us-ascii?q?YJtfyeYEYINFIkJkBIsEwGIWiI4EgEDAQEBAQEBAgETAQEBCA0JCCkvgjYkAYJ?=
 =?us-ascii?q?hAQEBAQIBAQIwBz8FAQkBAQoOCi4DVAYTBYMcgWkBEAgEAZs9jDyHKgGCcIwJF?=
 =?us-ascii?q?4F/gTgfgkyIM4ImAolRhj+PHVUJgSmQGAaJYYcnlS6EX4F2MxoILQNlAYJBPoF?=
 =?us-ascii?q?pF446IjKBBQEBjCEBAQ?=
X-IPAS-Result: =?us-ascii?q?A0DrBwDvvfhbh0O0hNFjHQEBBQEHBQGBZYJtfyeYEYINFIk?=
 =?us-ascii?q?JkBIsEwGIWiI4EgEDAQEBAQEBAgETAQEBCA0JCCkvgjYkAYJhAQEBAQIBAQIwB?=
 =?us-ascii?q?z8FAQkBAQoOCi4DVAYTBYMcgWkBEAgEAZs9jDyHKgGCcIwJF4F/gTgfgkyIM4I?=
 =?us-ascii?q?mAolRhj+PHVUJgSmQGAaJYYcnlS6EX4F2MxoILQNlAYJBPoFpF446IjKBBQEBj?=
 =?us-ascii?q?CEBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,272,1539673200"; 
   d="scan'208";a="53510053"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 23 Nov 2018 19:01:48 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730082AbeKXNs1 convert rfc822-to-8bit (ORCPT
        <rfc822;like.xu@linux.intel.com> + 23 others);
        Sat, 24 Nov 2018 08:48:27 -0500
Received: from mout.gmx.net ([212.227.15.19]:48949 "EHLO mout.gmx.net"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1729519AbeKXNs1 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Sat, 24 Nov 2018 08:48:27 -0500
Received: from [192.168.1.153] ([98.118.28.103]) by mail.gmx.com (mrgmx003
 [212.227.17.184]) with ESMTPSA (Nemesis) id 0MdKkd-1g9gIB2VJz-00IWBS; Sat, 24
 Nov 2018 04:01:24 +0100
Content-Type: text/plain;
        charset=us-ascii
Mime-Version: 1.0 (Mac OS X Mail 12.1 \(3445.101.1\))
Subject: Re: [PATCH v4] debugobjects: scale the static pool size
From: Qian Cai <cai@gmx.us>
In-Reply-To: <alpine.DEB.2.21.1811222238270.1665@nanos.tec.linutronix.de>
Date: Fri, 23 Nov 2018 22:01:20 -0500
Cc: Andrew Morton <akpm@linux-foundation.org>,
        Waiman Long <longman@redhat.com>,
        Yang Shi <yang.shi@linux.alibaba.com>, arnd@arndb.de,
        linux kernel <linux-kernel@vger.kernel.org>
Content-Transfer-Encoding: 8BIT
Message-Id: <EAB01918-727E-4E6F-AC7F-0417CA469D5A@gmx.us>
References: <20181120232810.2503-1-cai@gmx.us>
 <20181121021157.3061-1-cai@gmx.us>
 <alpine.DEB.2.21.1811222238270.1665@nanos.tec.linutronix.de>
To: Thomas Gleixner <tglx@linutronix.de>
X-Mailer: Apple Mail (2.3445.101.1)
X-Provags-ID: V03:K1:hUBchp+F7xE/uK3swm/ZNd2CGJ4HQsL4HUMWDf2LaEV0fY5h9dN
 mjmP3ZfPmwi05G+kCtyMO4miHzYfM/PFm/p4AuFxt/FcK8I/z6V31Xy2qqrst2h5aGie9ON
 18nXLpr1CjJfeM262TEyXNDeVkJBbxFi/5xNeDdZNPS13fF1V4eX4PVgI2hTZBXMVBpxgNX
 t0l08llJk117S2AuM/vVg==
X-Spam-Flag: NO
X-UI-Out-Filterresults: notjunk:1;V03:K0:tx8qpXHwCXo=:RO9bgdjIqqgw0qp2TT6zeA
 WiJGydAsrqphp5lWrAS3kpyc1s15wCjFxH0qxtJzEXwGJHoFoZF6azf5jfUyWg0chtw7jZOUX
 DScF1+F6NO1qgAYK9FSvtfDxx5+rfUEIHAU89jjDcBalvV2XyoX3JZakYaU6k5TfSjGrPEfDh
 fa3U4aZBgT3Y+7XzL3vxV9vfx4cQnYLl4znD8E1ZvqJdgXiJQSsG0I5m2CoOChuwsx+8Dq5Z7
 HEgG04G8LfBD1kdaq4FLVcSrtSAxev0Gc5ysh+VyjhgajSOegeMNS6gOedwMH2I+hZ7cO9/Da
 xM3jrrGduhkCrdpFDTJjg9m5IdZjjHpjBFwzzl9e8cbSSDNwUrklToTbZ3zpFN9nO5VhHA9QZ
 R20533U262cM27BDenE2WuueJ18/xHdPKYTAUpU+9ecClfPvN+sXfcV9tmztSuiRSxYLnf69B
 OdEkQHMuu5HDesaQaENodZt25A7/v9xlBU4h/jnltk2VUR5Jj+38kGA+tsy5gw+ZQd3GhqmEN
 o8kVHf8FnfR1bXa2KFPUOX8PuhxDqm/j5bSnh+O0vr8NKZniL8x/Ge02KJYHJ5QHy7xT+mQbl
 Y84+ACytMaDsDy9K9XXLD2UoAI7duAFiG4CduCHUvAJKp6HBHLZXUFXsTUOR/NhE2u9Ob37Mv
 otfS79qmOqHW3IUfTVc+UZG7QTHRoOYhviigHUz6buKS42OCGlXY1UgmfbKLpxgoS5cGNmrDv
 fBzLouPya5RveCCIYkMizxRk/pCA5H5e1yiV3Okpr1sw7RIIF3PnURopxY9hzVFUHxIUuDL7Y
 +f9ulkAtZ4vqaY/IyHZScUlp9XXlsoUSzjqFBmHF/ut4HNpLRdVcLeRKjeOE3xPrOkeW3GI9/
 U09JXV/KCJU+pBAlsEBDoIgPb3TEyOlBsYGv/IlN8=
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org



> On Nov 22, 2018, at 4:56 PM, Thomas Gleixner <tglx@linutronix.de> wrote:
> 
> On Tue, 20 Nov 2018, Qian Cai wrote:
> 
> Looking deeper at that.
> 
>> diff --git a/lib/debugobjects.c b/lib/debugobjects.c
>> index 70935ed91125..140571aa483c 100644
>> --- a/lib/debugobjects.c
>> +++ b/lib/debugobjects.c
>> @@ -23,9 +23,81 @@
>> #define ODEBUG_HASH_BITS	14
>> #define ODEBUG_HASH_SIZE	(1 << ODEBUG_HASH_BITS)
>> 
>> -#define ODEBUG_POOL_SIZE	1024
>> +#define ODEBUG_DEFAULT_POOL	512
>> #define ODEBUG_POOL_MIN_LEVEL	256
>> 
>> +/*
>> + * Some debug objects are allocated during the early boot. Enabling some options
>> + * like timers or workqueue objects may increase the size required significantly
>> + * with large number of CPUs. For example (as today, 20 Nov. 2018),
>> + *
>> + * No. CPUs x 2 (worker pool) objects:
>> + *
>> + * start_kernel
>> + *   workqueue_init_early
>> + *     init_worker_pool
>> + *       init_timer_key
>> + *         debug_object_init
>> + *
>> + * No. CPUs objects (CONFIG_HIGH_RES_TIMERS):
>> + *
>> + * sched_init
>> + *   hrtick_rq_init
>> + *     hrtimer_init
>> + *
>> + * CONFIG_DEBUG_OBJECTS_WORK:
>> + * No. CPUs x 6 (workqueue) objects:
>> + *
>> + * workqueue_init_early
>> + *   alloc_workqueue
>> + *     __alloc_workqueue_key
>> + *       alloc_and_link_pwqs
>> + *         init_pwq
>> + *
>> + * Also, plus No. CPUs objects:
>> + *
>> + * perf_event_init
>> + *    __init_srcu_struct
>> + *      init_srcu_struct_fields
>> + *        init_srcu_struct_nodes
>> + *          __init_work
> 
> None of the things are actually used or required _BEFORE_
> debug_objects_mem_init() is invoked.
> 
> The reason why the call is at this place in start_kernel() is
> historical. It's because back in the days when debugobjects were added the
> memory allocator was enabled way later than today. So we can just move the
> debug_objects_mem_init() call right before sched_init() I think.

Well, now that kmemleak_init() seems complains that debug_objects_mem_init()
is called before it.

[    0.078805] kmemleak: Cannot insert 0xc000000dff930000 into the object search tree (overlaps existing)
[    0.078860] CPU: 0 PID: 0 Comm: swapper/0 Not tainted 4.20.0-rc3+ #3
[    0.078883] Call Trace:
[    0.078904] [c000000001c8fcd0] [c000000000c96b34] dump_stack+0xe8/0x164 (unreliable)
[    0.078935] [c000000001c8fd20] [c000000000486e84] create_object+0x344/0x380
[    0.078962] [c000000001c8fde0] [c000000000489544] early_alloc+0x108/0x1f8
[    0.078989] [c000000001c8fe20] [c00000000109738c] kmemleak_init+0x1d8/0x3d4
[    0.079016] [c000000001c8ff00] [c000000001054028] start_kernel+0x5c0/0x6f8
[    0.079043] [c000000001c8ff90] [c00000000000ae7c] start_here_common+0x1c/0x520
[    0.079070] kmemleak: Kernel memory leak detector disabled
[    0.079091] kmemleak: Object 0xc000000ffd587b68 (size 40):
[    0.079112] kmemleak:   comm "swapper/0", pid 0, jiffies 4294937299
[    0.079135] kmemleak:   min_count = -1
[    0.079153] kmemleak:   count = 0
[    0.079170] kmemleak:   flags = 0x5
[    0.079188] kmemleak:   checksum = 0
[    0.079206] kmemleak:   backtrace:
[    0.079227]      __debug_object_init+0x688/0x700
[    0.079250]      debug_object_activate+0x1e0/0x350
[    0.079272]      __call_rcu+0x60/0x430
[    0.079292]      put_object+0x60/0x80
[    0.079311]      kmemleak_init+0x2cc/0x3d4
[    0.079331]      start_kernel+0x5c0/0x6f8
[    0.079351]      start_here_common+0x1c/0x520
[    0.079380] kmemleak: Early log backtrace:
[    0.079399]    memblock_alloc_try_nid_raw+0x90/0xcc
[    0.079421]    sparse_init_nid+0x144/0x51c
[    0.079440]    sparse_init+0x1a0/0x238
[    0.079459]    initmem_init+0x1d8/0x25c
[    0.079498]    setup_arch+0x3e0/0x464
[    0.079517]    start_kernel+0xa4/0x6f8
[    0.079536]    start_here_common+0x1c/0x520

