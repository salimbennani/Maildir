Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 26 Nov 2018 08:51:49 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 65A855803C2;
	Sun, 25 Nov 2018 12:45:39 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by fmsmga005-1.fm.intel.com with ESMTP; 25 Nov 2018 12:45:38 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AGuUw6ROHJZdyUlWP4bUl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KPjzocbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzcaTAc9MHXmpBRtheWDBdAo2y?=
 =?us-ascii?q?aIsPCvAOPeder4Lgo1cDoh+zCQyqCejyyDFHm2X20LUn3eohDw/G0g8uEdwAv3?=
 =?us-ascii?q?vbrtr6KKgcUfutzKTK1jjDc/Fb1C3h5ITUfB0so/eBVq9wf8rLzkkvEhvIgE6R?=
 =?us-ascii?q?qYP/OTOey/oAvHKa7+F9Uu+gl3QoqwBqrzigw8cthZPFhp8Oyl3d8yhy3Yg7Jd?=
 =?us-ascii?q?q9SEFhYN6kFoNdty6dN4txWM8iTGVotSAnwbMFoZ62ZDYGxIgjyhLFdvCKfZaE?=
 =?us-ascii?q?7gj+WOuSPTt0nnNodbCnixu28kWs0PDwWtS33VpQsCZIkcPAum0R2xHd7MWMV+?=
 =?us-ascii?q?Fz8V272TmV0gDe8uFELl4wlarcM5Mh3LEwmYQJsUjZHS/5hl/2jKmIeUUg4OSo?=
 =?us-ascii?q?7P7nYrr+qp+dMY97lB3+P7wwlsCjBek0KBUCUmaF9eimybHu/lH1TK9Lg/A0iq?=
 =?us-ascii?q?XZtYrVJcUfpq63GQ9V1YMj5g67Dzen1tQYgHYGIEtGeB2ZlYjpPU/BIPThAfe4?=
 =?us-ascii?q?jVWslilkx+rdM73/DZXCMGLDnK3ifblj8U5czhQ8zdRF65JTELEBL+r/WlXtu9?=
 =?us-ascii?q?zAEh85Lwu0zv7jCNV81YMRR3iDA6CEMK7JtV+I5+QvI/SDZYMPuTb9LeQl6ODq?=
 =?us-ascii?q?jXMjhVAdeqyp14MNaH+kBvRmP1mZYX30j9cBC2gKvxY+Q/btiFGYUT5Temy9X6?=
 =?us-ascii?q?Qz5jwgDIKmDIHDRp2igbCb3Se7GIFWaX5CClyWDXjocICEUe8WaC2OOs9hjiAE?=
 =?us-ascii?q?Vb+5Ro8j0hGhqhX2y7lgLurS/C0Ysonu1Nx05+3ViBEz+iZ4D8Wb02GRUW50mn?=
 =?us-ascii?q?kESCMx3KB6uUZ90EuM0bBkg/xEEtxe/+lGUhw6NZ7bzOx2EcryVRjDftqSTFam?=
 =?us-ascii?q?Q9OmASw+T94rwt8OZVp9FMumjhzZwyWqBLoVnaSRBJMo6qLcw2TxJ8FlxnbFzq?=
 =?us-ascii?q?YhiUMqQs9ONWK8gK5/+BPeB4rIk0Wfiqarer4Q3C/L9Gef02WOuFtUXxJ3UaXA?=
 =?us-ascii?q?RXoffFfZrczl5kPeSL+jEakoPRFfycGcMKdKasfmjVNdRPj9PtTSZGaxm2S1BR?=
 =?us-ascii?q?aM3b6MaIvqe2MA3CTSEkQEkgYT/WqYOgg6HCuuv2XeDDl2H1L1f0zs6fV+qG+8?=
 =?us-ascii?q?TkIs0g6FdVNh2KSv9h4Vn/OcTegT0awCuCo6rzV0HVC938/ZCtaapgpherlcbs?=
 =?us-ascii?q?054FtdyW3ZsAl9NIS6L69+nl4ebxh3v0T22hVrC4VAlM8qrG8qzAtyM66YzElN?=
 =?us-ascii?q?dzSC3ZD0O73XLGby8Qura67X3FHezdmX9r0O6PQ+t1XsogWpGlA+/HVg1tlfy2?=
 =?us-ascii?q?Gc6YnSDAoOTZLxVV46+AJ+p77EbSgy+YPV2Wd3PqmprzDNwdQpBOgiyha+ZNpf?=
 =?us-ascii?q?NKKEFAnvE8wVHcSuKeoqm0S3YRIAJuxd6Kk0P8a+ffucxKGrJPpgnC6hjWlf4I?=
 =?us-ascii?q?F9z1iA+DZmRu/J35YK2feY3gScWjf4jVehtN33mI9eaTETGGq/1TbrBIpLaqJu?=
 =?us-ascii?q?eoYLDH+kI9erydVmm57tR3lY+Ua5B1MHxMCmYwCSYEH63QFK00QYv2anmSqhwz?=
 =?us-ascii?q?NoiT4pqreQ0zLUw+TlchoKIWpLRGhkjVfxLom4ldEaXE60bwc3kBup/1r1x69e?=
 =?us-ascii?q?pK5nNWncXV9IfzTqL2FlSqaxtruCb9RP6Z8yqiVXTeK8bEueSr78pRsaziziE3?=
 =?us-ascii?q?FfxDA9azGlpJH5kwZmh2KaKXZ5tGDZdt1oxRfD+NzcQuZc3jgcSyliijnXBV+8?=
 =?us-ascii?q?M8Oy/dqOlJfDseG+V2S/WZ1VaiTryYKAtC2m5WxlGxG/nvazmsH5Hgg+yyP0y9?=
 =?us-ascii?q?5qVSDQphbmfobrz7i6Mf5gfkRwBF7z8c16Fpt8kosxgpEdwnwahpST/Xoanmb/?=
 =?us-ascii?q?K9Rb2aTibHUTQT4H2cLa4A/g2Ed7NHKG25r5VmmBwstmf9S6YXkZ2iMn48BKFa?=
 =?us-ascii?q?eb9rpEnSRur1q8rALRZ+V9nzgHxfsv7n4an/8GuA43wiqBBbASGFFSPTbwmBSQ?=
 =?us-ascii?q?89C+sKJXaX6qcbix10pxh8qtDb+crQFHRHb2ZI0iEjRu4cVlP1LBy3nz6oDieN?=
 =?us-ascii?q?nNYtMfrByUkxHcj+dLLJI9jOYFhS1iOWjlp30q1/Y7jQBy3ZG9pIWHN2Jt/Kej?=
 =?us-ascii?q?Dh9ZLDL1Yd4T+ir2jaZfhcuW24GvHpN8GjQERpfoTPSoEC4MuvTjLQqBDDo8qn?=
 =?us-ascii?q?KDE7rFAQCf8Ftmr27IE52zLH6YPn4ZzdF/RBWHIExfnRsZXDE7np4/CwCry9bt?=
 =?us-ascii?q?cEZ/5jAN+FH4rgFAxf5vNxn6Sm3fvhunai8oSJiDKxpb9gNC6F3QMcOA9eJ/BT?=
 =?us-ascii?q?1Y8oeirAyQKWybegJIAnsSWkGfA1DjP7+u5cTP8uSCB+q+KefObquKqeBES/iI?=
 =?us-ascii?q?wpev2JN8/zmQLsWPImViD/oj10tDWnB5Bt3ZmygVRCwRjS7NdMmbpBGz+iBsqs?=
 =?us-ascii?q?C/8fLrWB/g5IeVCrtSN8lv9A6ygauZK+GQgyN5Iy5C1pwQ3X/I1KQf3FkKhiFu?=
 =?us-ascii?q?aTatELcAtS3MTK7Kma9XFRkbayxtO8tS8qI8xRJAOcraitPzy755geQ5C1ZDVV?=
 =?us-ascii?q?z9hM6pYdYGLH26NFPCHEyLLqiJJSXXw8HrZqOxUadfjPhPuB2qpzmaE1XvPjCC?=
 =?us-ascii?q?lzTyUxCvMOdMjDyUPRBEuYG9dAptBnbnTN78dhK7N9p3hyUswbIonnPKKXIcMT?=
 =?us-ascii?q?9kfkNRr72Q6DlUjellF2Nd7npqM++Elj2d7+nZLJYWrPRqDj51l+Jc/HQ11b9V?=
 =?us-ascii?q?4DtYS/xynSvYtsRurE2+kumT1jpnVwJDqzZRi4KNuEViOKPZ+YFBWHbE5h0N62?=
 =?us-ascii?q?qQBg8Op9tkDN3vpq9RxsLOlKL1NDdN7dbU8dEACMjTLcLUeEYmZCbpHzvdF0Mq?=
 =?us-ascii?q?STOqJWfSnQQJjP6W5lWRr54ntoLrnpseDLNWAg8bDPQfX31kFdpKC552FmcvmL?=
 =?us-ascii?q?+zg8sYo2el+kqCDP5Gt4zKA6rBSc7kLyyU2PwZPhY=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BrAgAKCftbh0O0hNFhHQEBBQEHBQGBZ?=
 =?us-ascii?q?YJqgQIng3mDe5AbgWAtFJkbLAMQAYhaIjgSAQMBAQEBAQECARMBAQEIDQkIKSM?=
 =?us-ascii?q?MgjYkgmMBAgMBAiAVQQYJAQEKDgoCAiYCAgNUBg0GAgEBAYMcAYFoARgEAZpbi?=
 =?us-ascii?q?w2BL4QtAYJ4AYJrBYELin4XgX+BOIJrgxsChGWCVwKIf1KBQIRLNI8dVQmBKYV?=
 =?us-ascii?q?Tgy2HAB6RCI1DjEqBdjMaCC0DgycfgggXhTKJCCIyGAEBawEBjEoBAQ?=
X-IPAS-Result: =?us-ascii?q?A0BrAgAKCftbh0O0hNFhHQEBBQEHBQGBZYJqgQIng3mDe5A?=
 =?us-ascii?q?bgWAtFJkbLAMQAYhaIjgSAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkgmMBAgMBA?=
 =?us-ascii?q?iAVQQYJAQEKDgoCAiYCAgNUBg0GAgEBAYMcAYFoARgEAZpbiw2BL4QtAYJ4AYJ?=
 =?us-ascii?q?rBYELin4XgX+BOIJrgxsChGWCVwKIf1KBQIRLNI8dVQmBKYVTgy2HAB6RCI1Dj?=
 =?us-ascii?q?EqBdjMaCC0DgycfgggXhTKJCCIyGAEBawEBjEoBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,279,1539673200"; 
   d="scan'208";a="54720249"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 25 Nov 2018 12:45:37 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726509AbeKZHe0 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 26 Nov 2018 02:34:26 -0500
Received: from mout.gmx.net ([212.227.15.15]:53045 "EHLO mout.gmx.net"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1725863AbeKZHe0 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 26 Nov 2018 02:34:26 -0500
Received: from ovpn-120-100.rdu2.redhat.com ([98.118.28.103]) by mail.gmx.com
 (mrgmx003 [212.227.17.184]) with ESMTPSA (Nemesis) id
 0MJBRC-1gOGLN3G7m-002m3A; Sun, 25 Nov 2018 21:42:16 +0100
Subject: Re: [PATCH v4] debugobjects: scale the static pool size
From: Qian Cai <cai@gmx.us>
To: Thomas Gleixner <tglx@linutronix.de>
Cc: Andrew Morton <akpm@linux-foundation.org>,
        Waiman Long <longman@redhat.com>,
        Yang Shi <yang.shi@linux.alibaba.com>, arnd@arndb.de,
        linux kernel <linux-kernel@vger.kernel.org>,
        Catalin Marinas <catalin.marinas@arm.com>
References: <20181120232810.2503-1-cai@gmx.us>
 <20181121021157.3061-1-cai@gmx.us>
 <alpine.DEB.2.21.1811222238270.1665@nanos.tec.linutronix.de>
 <EAB01918-727E-4E6F-AC7F-0417CA469D5A@gmx.us>
Message-ID: <211af3b2-bc56-2d1b-c6c2-f6853797a7a1@gmx.us>
Date: Sun, 25 Nov 2018 15:42:12 -0500
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:60.0)
 Gecko/20100101 Thunderbird/60.3.1
MIME-Version: 1.0
In-Reply-To: <EAB01918-727E-4E6F-AC7F-0417CA469D5A@gmx.us>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Language: en-US
Content-Transfer-Encoding: 7bit
X-Provags-ID: V03:K1:oeVEs8J40g5GIZC7zQOsuXWiCI+bgUXEbwtzsxgM5qTVCnNCawU
 myiNjo2yZBZItcbMp/jK1zXswN/f5gERVZj0Ka2/oN1TbbqBu9KUd5fRoGxdUpFUznLEV6D
 cLz3fxIhUB1PaiMKnwwj9l3Rx87P7uqut5tR/9FoZMEfQZAaG7nGUmuwKLkoW75iiCppPDD
 juYpf4Kgr/B+o8UM3D+rg==
X-Spam-Flag: NO
X-UI-Out-Filterresults: notjunk:1;V03:K0:sNHUuEzOiNs=:2Cb0G8D3klR7emIY2jfLHg
 pve4B6NoFgC5K6NW/ByhVL0vyTvKNhCR3qrmJ9/CIhC2uzDFa598d6DT+TG2sSd/Q2IXhso+N
 kOE5urxk2gPWwYDp1eDjJGtQ7OsKtYqDav/0Yn0ZBE4jPrpjy5ofj5q2Rtp5AMSs8Z2EabSxY
 l/TS8eZAhDWzmhEDbRpiXvXHGckoL1n95yryOGfuzyGura3j9rIH0P9S1dBoNQITsXMjyn3YF
 R+NccaqgLMkcmhXyJjrOlGaRqFCRnZw3zA0iqRj2BAglro9d/JfxFuoQbetXVZ9Cg3ldafxwa
 S7LnSgRtsL6+CO+vGTsz09FmV+4ehMn94WD4x8C8TdEryjJYIETeRxVeB0CmUnNcjFyRJ6R9a
 0dW10nsrFljxeiG+JgNV081WCwAsKuwmq3yZoqyEDgrP4kFOVmypQHqJ014FLy2g3ZDzHQ6Ih
 6eWGm3DLt0jce0cpyxvGVdieub15PXr0d3Y5kw3PqPTxH3zBAuPC6eCA4CKEc7Yjpzy/V6tTe
 lOYV0OlpiCh2GqyYWzNHqQ/hmXhMLP5yTroS7PgNqgrykjhw5gHo3ktgsbNWPUcxwvNO1OuRv
 zDL83I9i+3/yMh2HOlE16H82QbfLzBu0XfaXE0ZckPzgAMkkrS4D9SdUQjwA0ixWXO3ZkF9NM
 Ua9x9bzRZ15LbffYTHIi+28YGUf7A/2Eb+46f5RFmFkSgIM9/xUKMWpSQjio9xwT1XJ4Ng3Ck
 y1I/miC4dmfM8gwqPBsFrtkVP9j4DBiThntbaQwe/BK43zzyquLZzBT1N+RlD4W2DfKlqC1bZ
 ogVWkUUWTao95FnDn+lAWme69IrT5bLIX3gFrcjFANB1NhkE8UkVLAEsJtIIBtpFw7COMu1vR
 GWPI57ynV4De+CwCLdi/j8/itAZOHRFbgefGrwlwg=
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org



On 11/23/18 10:01 PM, Qian Cai wrote:
> 
> 
>> On Nov 22, 2018, at 4:56 PM, Thomas Gleixner <tglx@linutronix.de> wrote:
>>
>> On Tue, 20 Nov 2018, Qian Cai wrote:
>>
>> Looking deeper at that.
>>
>>> diff --git a/lib/debugobjects.c b/lib/debugobjects.c
>>> index 70935ed91125..140571aa483c 100644
>>> --- a/lib/debugobjects.c
>>> +++ b/lib/debugobjects.c
>>> @@ -23,9 +23,81 @@
>>> #define ODEBUG_HASH_BITS	14
>>> #define ODEBUG_HASH_SIZE	(1 << ODEBUG_HASH_BITS)
>>>
>>> -#define ODEBUG_POOL_SIZE	1024
>>> +#define ODEBUG_DEFAULT_POOL	512
>>> #define ODEBUG_POOL_MIN_LEVEL	256
>>>
>>> +/*
>>> + * Some debug objects are allocated during the early boot. Enabling some options
>>> + * like timers or workqueue objects may increase the size required significantly
>>> + * with large number of CPUs. For example (as today, 20 Nov. 2018),
>>> + *
>>> + * No. CPUs x 2 (worker pool) objects:
>>> + *
>>> + * start_kernel
>>> + *   workqueue_init_early
>>> + *     init_worker_pool
>>> + *       init_timer_key
>>> + *         debug_object_init
>>> + *
>>> + * No. CPUs objects (CONFIG_HIGH_RES_TIMERS):
>>> + *
>>> + * sched_init
>>> + *   hrtick_rq_init
>>> + *     hrtimer_init
>>> + *
>>> + * CONFIG_DEBUG_OBJECTS_WORK:
>>> + * No. CPUs x 6 (workqueue) objects:
>>> + *
>>> + * workqueue_init_early
>>> + *   alloc_workqueue
>>> + *     __alloc_workqueue_key
>>> + *       alloc_and_link_pwqs
>>> + *         init_pwq
>>> + *
>>> + * Also, plus No. CPUs objects:
>>> + *
>>> + * perf_event_init
>>> + *    __init_srcu_struct
>>> + *      init_srcu_struct_fields
>>> + *        init_srcu_struct_nodes
>>> + *          __init_work
>>
>> None of the things are actually used or required _BEFORE_
>> debug_objects_mem_init() is invoked.
>>
>> The reason why the call is at this place in start_kernel() is
>> historical. It's because back in the days when debugobjects were added the
>> memory allocator was enabled way later than today. So we can just move the
>> debug_objects_mem_init() call right before sched_init() I think.
> 
> Well, now that kmemleak_init() seems complains that debug_objects_mem_init()
> is called before it.
> 
> [    0.078805] kmemleak: Cannot insert 0xc000000dff930000 into the object search tree (overlaps existing)
> [    0.078860] CPU: 0 PID: 0 Comm: swapper/0 Not tainted 4.20.0-rc3+ #3
> [    0.078883] Call Trace:
> [    0.078904] [c000000001c8fcd0] [c000000000c96b34] dump_stack+0xe8/0x164 (unreliable)
> [    0.078935] [c000000001c8fd20] [c000000000486e84] create_object+0x344/0x380
> [    0.078962] [c000000001c8fde0] [c000000000489544] early_alloc+0x108/0x1f8
> [    0.078989] [c000000001c8fe20] [c00000000109738c] kmemleak_init+0x1d8/0x3d4
> [    0.079016] [c000000001c8ff00] [c000000001054028] start_kernel+0x5c0/0x6f8
> [    0.079043] [c000000001c8ff90] [c00000000000ae7c] start_here_common+0x1c/0x520
> [    0.079070] kmemleak: Kernel memory leak detector disabled
> [    0.079091] kmemleak: Object 0xc000000ffd587b68 (size 40):
> [    0.079112] kmemleak:   comm "swapper/0", pid 0, jiffies 4294937299
> [    0.079135] kmemleak:   min_count = -1
> [    0.079153] kmemleak:   count = 0
> [    0.079170] kmemleak:   flags = 0x5
> [    0.079188] kmemleak:   checksum = 0
> [    0.079206] kmemleak:   backtrace:
> [    0.079227]      __debug_object_init+0x688/0x700
> [    0.079250]      debug_object_activate+0x1e0/0x350
> [    0.079272]      __call_rcu+0x60/0x430
> [    0.079292]      put_object+0x60/0x80
> [    0.079311]      kmemleak_init+0x2cc/0x3d4
> [    0.079331]      start_kernel+0x5c0/0x6f8
> [    0.079351]      start_here_common+0x1c/0x520
> [    0.079380] kmemleak: Early log backtrace:
> [    0.079399]    memblock_alloc_try_nid_raw+0x90/0xcc
> [    0.079421]    sparse_init_nid+0x144/0x51c
> [    0.079440]    sparse_init+0x1a0/0x238
> [    0.079459]    initmem_init+0x1d8/0x25c
> [    0.079498]    setup_arch+0x3e0/0x464
> [    0.079517]    start_kernel+0xa4/0x6f8
> [    0.079536]    start_here_common+0x1c/0x520
> 

So this is an chicken-egg problem. Debug objects need kmemleak_init() first, so 
it can make use of kmemleak_ignore() for all debug objects in order to avoid the 
overlapping like the above.

while (obj_pool_free < debug_objects_pool_min_level) {

	new = kmem_cache_zalloc(obj_cache, gfp);
	if (!new)
		return;

	kmemleak_ignore(new);

However, there seems no way to move kmemleak_init() together this early in 
start_kernel() just before vmalloc_init() [1] because it looks like it depends 
on things like workqueue (schedule_work(&cleanup_work)) and rcu. Hence, it needs 
to be after workqueue_init_early() and rcu_init()

Given that, maybe the best outcome is to stick to the alternative approach that 
works [1] rather messing up with the order of debug_objects_mem_init() in 
start_kernel() which seems tricky. What do you think?

[1] https://goo.gl/18N78g
[2] https://goo.gl/My6ig6
