Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 05 Dec 2018 08:39:05 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id BEA81580443;
	Tue,  4 Dec 2018 05:40:02 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga001-1.jf.intel.com with ESMTP; 04 Dec 2018 05:40:02 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AGt7TeR9fO0zuS/9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1+8WIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CS2RPXthfWTFCDIOy?=
 =?us-ascii?q?YIQAE/cOMuRWoInmv1sDrwCzBRWwCO711jNEmmX70bM83u88EQ/GxgsgH9cWvX?=
 =?us-ascii?q?vUrdX1MKMSUOCox6fW1zrDdelW1inn54jVbxsspv+NUKltfcvf1UkjDR3KjkiJ?=
 =?us-ascii?q?pIHjIjib2OMNs22B4OphU+Kik3InqwFvrTS13ccsjY/EjZ8WxFDc7Sh13po5KN?=
 =?us-ascii?q?miREJmb9OoDoFcuzyZOodqWM8vQmNltD47x7EYo5K3YjUGxIo9yxLCdvCKfJKE?=
 =?us-ascii?q?7xP/WOuXPDx2nmhqeKiliBa36UWgyvPzVs2z0FtSsCpFncfDtmoX2xzQ9MeHUP?=
 =?us-ascii?q?198Vml2TqV0ADT8O5ELVg1lardNZEh3qY9moQPvUnHBCP6hUv7gLGMekk5+eWk?=
 =?us-ascii?q?9/7rb7Tkq5OEMo97kAD+MqAgmsylBuQ4NxADX2ya+eS6yb3i8lT1QLZUgf0slK?=
 =?us-ascii?q?nWrpTaKd0cpq+3BQ9azJwj5g2hDzepztsYh2MLLFFbdxKdiYjmJVXOLOr/Dfel?=
 =?us-ascii?q?jFSgiC1ryOzePr39HpXNKWDOkLPgfbZ+9UFQ0gUyzc1E6pJQC7EBJu/zW0DruN?=
 =?us-ascii?q?zZCB85LxK7w+L9BNph0YMeXHqFArWFP6PKrV+I+uUvLvGMZIAPuTb9N+Iq5/n0?=
 =?us-ascii?q?gX85hF8SZ6+p3ZQMZXC8H/RmJViZYHX2jtcAF2cKohQxTOjwhFKeVj5TYm64X7?=
 =?us-ascii?q?gg6TEjFIKmEYDDS5ivgLyGwii3BJ5WZmdAClCKFnflbIGEW/YKaCKPLc5tiD0E?=
 =?us-ascii?q?Vb69S4A/0RGirhP1y71iLuDM4C0XqYrj1MRp5+3UjRw97yd0D8Sa02GOVW10hH?=
 =?us-ascii?q?kHRz0t0aB7oEx9zEqD0Kdij/xZE9xT++1GUgMgOZHAyOx6Dsj4WhjdcdeRVFam?=
 =?us-ascii?q?XtKmDCkyTt0rxd8CeUJ9G9S4gRDF0CqnGLsVl72NBJwp/aPQxXnxJ8Bhy3nY0K?=
 =?us-ascii?q?ktlUUpQsxKNWe+nK5w6xDTB5LVk0Wej6ulaL4T3DDT+2uZzWqBpkdYUBVuXqXD?=
 =?us-ascii?q?WnwfYkjWrdH95k7ZS7+uCLInMhZOyMKYK6tKbMHpgktCRPv5JNveZGexkX+qBR?=
 =?us-ascii?q?mU3rOMcJbqe2IF0SrAEkcEjR4c8WyGNQckACehuHzRDDp1GFLrYkPs9/R+qXyh?=
 =?us-ascii?q?Qk81yQGKc1Nu176v9hEJgvycTusZ3qgYtyc5tzV0AFG90srKC9qBogphe7lcYd?=
 =?us-ascii?q?M94VtdyWLVrQt9PoakL6BjgF4efB96v0fv1xVxF4VBntImrHIszApuN62Y1ElN?=
 =?us-ascii?q?eC+f3ZD1IrfXMHX9/Aiza67K3VHTyMyZ+qMR5/U3tVrivBulGVE/83p6ydZV1X?=
 =?us-ascii?q?ic5pLUDAcJVZLxU0A39wV1pr3AYyk94Z/U2mNoMaWurjDC3NcpDvM/yhm8Z9df?=
 =?us-ascii?q?LL+EFAjqHswaGsiiMvAll0KobxIEJu9S8qE0Mtiid/uH3q6rIelhkCinjWRB/I?=
 =?us-ascii?q?ByzEaM+zBgRe7P2pYP2+uY0RefVzfgkFehtdj6mZpFZT4OBGW/0zXrBIlLaq10?=
 =?us-ascii?q?Y4kLE2auL9Srydpkg57iRmBX9ESkB1MAw8KpfRuSb1rg3Qxfz0gXoHqnmTemwD?=
 =?us-ascii?q?xwiT0msq2f3CnWyeT4aBUHInJLRHVljVr0IYm0jsoWXUiyYwgyiRul4133x6xa?=
 =?us-ascii?q?pKR5MmnSTl1EfynwL2F+TKSwsqCObNJI6JMtqS9XSvizYUiGSr7hpBsXyyHjEH?=
 =?us-ascii?q?FExDA4dDGqvY/1nwdgh2KeL3ZzrXzZdt92xRrE4NzcRPhR3icJRSViiDnXAES8?=
 =?us-ascii?q?MMet/dmOi5jDteW+XXq7VpJPaSnr0Z+AtCyj6GxqGxK/mOq/mt/mEQg8yiL709?=
 =?us-ascii?q?hqVSPVrBfzeIXr1qK6Mf55cUlsHlPz9816GoRmmIsqmJ4QwWQahomS/Xcfkmf8?=
 =?us-ascii?q?K9Rb1bj+bHoQXzELxdHV7RPh2E1iKHKJ2o34Wm+cwstne9m1fGcW1jgh4MBNDa?=
 =?us-ascii?q?ee9KZEkjdtolqksQLRZuBwnjIcyfst8nEWme8ItxQ2ziWBHL8SB1JXMjL2lxSH?=
 =?us-ascii?q?9N2+qKRXZGCycbm/zkZ+nNahDK2crQFYQnr2ZpAiHSpo5MVlLF3MyGHz6p3jeN?=
 =?us-ascii?q?TIcdITsRiUnw3BjudPLpIxi+EKhTFmOW/muX0lyug7jQFh3J2gvYiHLXlt87y9?=
 =?us-ascii?q?AhJCKjL1YMYT8Cn3jalChsaWw5yvHpJ5FzoQRpToSvaoEC8IufTjKgaDCzk8qn?=
 =?us-ascii?q?adGbrCEg6T8kZmr3TTE5+1M3GbPmUWzdJnRBOFPkxQnBgUXCkmnp4+Dg2qxtbu?=
 =?us-ascii?q?cEJn6TAK/FL4tgFAyuF1Nxn8T2ffoh2naiwvRZibLRpW6BxC5kjPPcyf6OJzAz?=
 =?us-ascii?q?9X/pm7oAORLWybYhxCDXsVVUycG1DjIr6u6MHA8uifG+q+NubObq+IqeBETPeI?=
 =?us-ascii?q?wpSv0oR98jaIN8WPOGRiDvIh1kpCW3B5B9rWmzEVRyMLkCLNataRpA2g9S1vss?=
 =?us-ascii?q?C/7PPrVRrv5YSRCrtSMtZv+xGsjaeALe6Qgyl5JihC1pMR3n/F07wf3F8UiyFz?=
 =?us-ascii?q?eDihC7UAtSjRTK3Onq9bFQIUayR2NMFQ9aIzwhFNOdLHitPyzrN3lOM1BExfVV?=
 =?us-ascii?q?P/msClf8gKI2CmOVPDBUaLMqmGJDLRz8H2Z6O8VaNfjOFOuxKsvjabFlfpPi6f?=
 =?us-ascii?q?mDnxSxCvLeZMgTmHPBxfvYGxaApiBXL/Q9LmdBK7NsR6jTk3wb0ym3PLOnQQMT?=
 =?us-ascii?q?l6c0NRsLKQ6TlUjel4G2xE9nBlN/WLmz6F7+nELZYbqftqDT5yl+Jf4XQ6zaNa?=
 =?us-ascii?q?7SBERPNvnivSocVjo1WnkumJ1zpmXwBCqjdNhIKXo0piPb/V+YVHWXbBr1ox6j?=
 =?us-ascii?q?CxDRsN7/5iDtvmoegEz9nJm6XbKzpY9d/Qu8wGCJ6HBtiANS8eMB7tCXboBREf?=
 =?us-ascii?q?QDe2fTXArxVCjLef6yvG/dABtpHwlc9WGfdgX1svG6ZfUxw9EQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAABGgwZch0O0hNFjGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUwQBAQELAQGBWYFaN5hHgg0UaJZNgjIBiBEiNgcNAQMBAQEBAQECARM?=
 =?us-ascii?q?BAQEKCwkIKS9CARABgWIkAYJhAQEBAQIBAQI3PwUBCQEBCg4KCRMSAwwFSRgWg?=
 =?us-ascii?q?waBeggEAaV3ijOMHoIWgRGCFEk1hFoBg1uCJgKPMZBBVQmJeoc8I4FbiDaHFZp?=
 =?us-ascii?q?CAoIEMxomgzqDPAEJjRU+gTcBAQGFbIJZASWCJwEB?=
X-IPAS-Result: =?us-ascii?q?A0ANAABGgwZch0O0hNFjGwEBAQEDAQEBBwMBAQGBUwQBAQE?=
 =?us-ascii?q?LAQGBWYFaN5hHgg0UaJZNgjIBiBEiNgcNAQMBAQEBAQECARMBAQEKCwkIKS9CA?=
 =?us-ascii?q?RABgWIkAYJhAQEBAQIBAQI3PwUBCQEBCg4KCRMSAwwFSRgWgwaBeggEAaV3ijO?=
 =?us-ascii?q?MHoIWgRGCFEk1hFoBg1uCJgKPMZBBVQmJeoc8I4FbiDaHFZpCAoIEMxomgzqDP?=
 =?us-ascii?q?AEJjRU+gTcBAQGFbIJZASWCJwEB?=
X-IronPort-AV: E=Sophos;i="5.56,314,1539673200"; 
   d="scan'208";a="42663434"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 04 Dec 2018 05:40:01 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726430AbeLDNj6 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 4 Dec 2018 08:39:58 -0500
Received: from wtarreau.pck.nerim.net ([62.212.114.60]:52671 "EHLO 1wt.eu"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1725770AbeLDNj6 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 4 Dec 2018 08:39:58 -0500
Received: (from willy@localhost)
        by pcw.home.local (8.15.2/8.15.2/Submit) id wB4DcHoR008733;
        Tue, 4 Dec 2018 14:38:17 +0100
Date: Tue, 4 Dec 2018 14:38:17 +0100
From: Willy Tarreau <w@1wt.eu>
To: Ingo Molnar <mingo@kernel.org>
Cc: "Paul E. McKenney" <paulmck@linux.ibm.com>,
        Arnaldo Carvalho de Melo <acme@infradead.org>,
        Linus Torvalds <torvalds@linux-foundation.org>,
        "H. Peter Anvin" <hpa@zytor.com>, linux-kernel@vger.kernel.org,
        danymadden@us.ibm.com, Dennis.Krein@netapp.com, joe@perches.com,
        joel@joelfernandes.org, ldr709@gmail.com,
        pierceagriffiths@gmail.com, rdunlap@infradead.org,
        zhouzhouyi@gmail.com, connor.shu@gmail.com
Subject: Re: [GIT PULL rcu/next] RCU commits for 4.21/5.0
Message-ID: <20181204133817.GB8714@1wt.eu>
References: <20181203225405.GA21856@linux.ibm.com>
 <20181204080837.GA67285@gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181204080837.GA67285@gmail.com>
User-Agent: Mutt/1.6.1 (2016-04-27)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi Ingo,

On Tue, Dec 04, 2018 at 09:08:37AM +0100, Ingo Molnar wrote:
> I noticed this bit from Willy:
> 
> >  tools/testing/selftests/rcutorture/bin/nolibc.h    | 2197 ++++++++++++++++++++
> 
> So <nolibc.h> is a rather large header and it comes with very little 
> documentation - but once you read through the header it's obvious what it 
> does, the code is clean and it's pretty cool all around, and in hindsight 
> the name is a strong hint about what the header does as well. ;)

Thanks for the positive comment, as it was initially not designed to be
merged into the kernel and was just a local home project. I figured it
could be a perfect solution to Paul's executable size issues and offered
some help to get it in relatively quickly, but surely we can do much better!

> Still it would be nice to at least add a top level description to the 
> header to make people (like me) who are reading the code before the 
> changelogs wonder less. For tooling headers we require a similar 
> self-explanatory, feel-fuzzy structure as for kernel headers.

I'm fine with doing this. I even wrote the very small header at the last
minute, without knowing if there was any chance it survives a review :-)

> Beyond adding a bit more documentation it would also be useful to factor 
> nolibc.h out into tools/include/nolibc/ or so, no reason to hide it in 
> rcutorture, I bet there's a number of other testcases and smaller 
> utilities in tools/ that could make good use of it.

Fine as well. It's important however to keep in mind that I only covered
the few architectures I could test (i386/x86_64/arm/arm64/mips), and even
there the coverage is still limited. I don't want it to become too much of
a pain to use for other utilities just by lack of initial coverage. However
I agree that better exposure will help contributions come in.

> My long term hope would be that eventually we could even create a minimal 
> klibc from it (a minimal libc provided by the kernel itself), giving 
> minimalist binaries a mechanism to link against klibc.so:
> 
> - klibc would be an explicit opt-in mechanism, i.e. binaries that are 
>   coupled with the kernel anyway (and initrd executables certainly are) 
>   could use this.

In fact it's very similar to my goal. I'm using it in initramfs and initrds
that do very little stuff and where it's acceptable to have a few #ifdef to
adapt to this or that libc. However I found it extremely convenient *not* to
require any external symbol, thus not to have to link against anything. But
I'm well aware that this position cannot last forever and that at some
point if we want to go further we'll possibly have a few layers (naked
syscalls returning -errno, decorated syscalls making use of an explicit
errno, libc-specific stuff like string functions). Possibly that in this
case only the naked version would remain in the .h and that the rest will
require linking with the .so/.a.

> - We could also add a way for the kernel to provide (non-swappable) 
>   binaries via an automatic /klib/ mount point or so. This would allow 
>   features like a minimal, console based rescue/debug shell that doesn't 
>   rely on any filesystem state or external library dependencies, other 
>   than the initial kernel+initrd image.

This could be convenient indeed, I never thought about this. I'm currently
doing something comparable using initramfs, so maybe in the end we don't
need the kernel to create anything beyond this, but instead just let the
user choose in the configuration what utilities should be added to the
initramfs sources.

(...)
> - klibc would also eventually allow deeper integration with the vDSO 
>   proper: for example on klibc based embedded systems we could link klibc
>   and the vDSO into a single vDSO library, further simplifying and 
>   optimizing it.

I already looked how to implement vDSO. I figured it was not very difficult
but will require that I maintain variables with the AUXV, then I thought
that it went beyond the scope of this minimalist implementaiton and
postponed this.

> - klibc would also allow faster feature propagation from kernel to libc 
>   as well, as we could prototype, test and benchmark new system calls and 
>   new features on klibc - i.e. klibc integration and testcases could be a
>   requirement for new system calls.

This actually is a good idea. There was already a discussion in another
thread about exposing syscalls better in the kernel for better interactions
with the libc, but it could start this way with test cases. It also increases
the likeliness that an awkward API is detected early when the person starts
to write his/her own part of the libc side.

> - There's no upper limit to how such a minimal kernel-shell (root only) 
>   environment would look like, beyond a minimal shell in principle it 
>   could include bits like:
(...)

That's more or less what the preinit present in my initramfs provides. I
just need a kernel and nothing else to start to manually find and mount
my rootfs while debugging, it's quite convenient. It's very limited
though. But I 100% agree with the benefits of such basic recovery
utilities shipped with the kernel images!

(...)
>     - a minimal version of 3D Tetris (just kidding)

I thought you were already kidding when talking about 3D in fact but
apparently not! I think you really mean GPU-based acceleration rather
than 3D since I hardly see how 3D stuff may improve my debugging
abilities :-)

> - ... all of which would allow a fully integrated, self-contained (!) 
>   solution with no external dependencies other than the build environment 
>   to build the binaries, that allows the debugging of a system and the 
>   eventual extraction of debug information, without having to interact 
>   with the local filesystem or even the local X-window state for these 
>   apps to run.

In my case I also ship the modules within the kernel image. It's extremely
convenient to have the choice of a number of kernels for a given rootfs.
You never have to wonder if the modules are present on the roofs or not,
you never have to prepare any initrd, you just select the kernel you want
and you're done. For development, when combined with the preinit I'm
talking about, it's awesome, because you just want something which barely
boots to the preinit prompt, then you can start to investigate.

> - I.e. a minimal Linux distribution done right, optimized for kernel 
>   development, system bootstrap, rescue enviroment, etc. - far more 
>   usable than a kdb session.

The distro I'm using was initially not made for this but to design
reliable minimalist systems, and it turned out extremely effective for
kernel development for these reasons. The whole rootfs is an initrd
which contains all the tools I need, so I can only confirm the comfort
it brings!

> Anyway, back to <nolibc.h>: wanted to ask Linus's and Arnaldo's opinion 
> about the merge of it, we can still re-base and re-try if there's any 
> objections.

I'm fine with this as well. I just want to be sure we don't postpone the
coverage of Paul's rcutorture needs because it started for this initially.
If we see the discussion going too far, we could also at least cover just
rcutorture first which would buy us time to decide how it should be done
better, then remove it once we can port rcutorture to the newly designed
solution.

Thanks,
Willy
