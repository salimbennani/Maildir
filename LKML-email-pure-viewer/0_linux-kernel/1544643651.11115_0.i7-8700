Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  12 Dec 2018 19:40:51 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 6FF0D5803DC;
	Tue, 11 Dec 2018 17:40:25 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga001-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 11 Dec 2018 17:40:24 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ARvkefRc2ABFKXvSN2t1Rc+XrlGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc6/bRSN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRPDI28?=
 =?us-ascii?q?cYUBEukPPehXoIbhulQBrxWxBRK0BO7t0TJImmP60Lcm3+g9CwzKwgotFM8Ovn?=
 =?us-ascii?q?TOq9X1Mb8fX+SyzKbWyTXIcvNY1inn6IjOaB8hp+yDUqxrccHMzkQvFQTFgUuU?=
 =?us-ascii?q?qYH+PTOV0foCs2yV7+V+T+KvjXQoqwdsrTex3ccgkI7Jhpgayl3d8yhy3Yg7Jd?=
 =?us-ascii?q?q9SEFhYN6kFoNdtyWbN4twX8MjTHlouCInyr0DopG0YjIKyI87yB7YbfyHfZKE?=
 =?us-ascii?q?4hX5VOaeJzpzmXFreKqnihqs7UStzvfwWtS63VpUtCZJj9rBumwX2xHS6MWLUu?=
 =?us-ascii?q?Vx80a/1TqT0g3f9uRJLV0omabHN5Isx6M8m5sPvUjeGyL7ll/5g7GYdkgh9OWk?=
 =?us-ascii?q?9uvqYrvjq5CHM4J7lBvxP6Etl8G8Bek4PA4DVHWB9+umzr3s50j5Ta1KjvIolq?=
 =?us-ascii?q?nZt4jXJdoUpqGnGQ9ZyIUj5AilDzegztsYmWMLLFVfeBKIl4TpOlfOL+7kDfqn?=
 =?us-ascii?q?nVigjDNmy+rbMrDvHJnBNGXPnbT9cbpn6kNRyhI/zdVF6JJVDrEBLujzWkj0tN?=
 =?us-ascii?q?HACh85Mgq0w/voCdlk1YMRR3iPAqmHP6PWqFOI4ewuI++Sa48Pozv9Nfcl6OD0?=
 =?us-ascii?q?jXMjml8SY7Op3Z0JZ3C8BPhmJF+ZYXX0jtcbDWgKphY+TPDtiFCaVT5TZnWyUL?=
 =?us-ascii?q?wm6jA0FYKrFoPDRoGrgLyc0ya3BJxWZmZaCl+SFXfkbZmLW/AJaCiKOM9ujiQE?=
 =?us-ascii?q?VaS9S48mzRyutBX1y7t7LuXO/S0Ur5Lj1MVv6O3VmhE/7jh0D8Wb02GQQGB4hG?=
 =?us-ascii?q?IIRzkq3K9hpUxx0EuM0a99g/ZAD9xc++tJUhsmNZ7b1+F6CdfyVRzbcteKT1am?=
 =?us-ascii?q?RNOmATYqQ9I1wt8OZVt9Gtq4ghDC2SqqH6Eal7iRCJMo9aLc2mD7J9xhxHbeyK?=
 =?us-ascii?q?khk14mT9NVOm29hq5/8AvTC5TTk0qDlaanbqAc3C/L9GeewmuCpkBYUAhsUarb?=
 =?us-ascii?q?WXATfFfZrdP85knaVb+hFawnMhddyc6FMqZKacfmjVNcSPfnOdTReWSxm2irCB?=
 =?us-ascii?q?aMx7OMapfqemoH0CXcDkgEjx4c/XKcOQciASehpnrUDCZyGlL3f0Ps7e5+pWum?=
 =?us-ascii?q?QUAu0QGFcVdt17qv9R4TnvyTVfUT0rUAuCcirjV0GE2w39bXC9qGugpgc79QYd?=
 =?us-ascii?q?I74Fdby23ZsxZxMYCnL6BnnlQeaRh4v1vy1xVrDYVNidUlo2k0zAVsM66Y0ElO?=
 =?us-ascii?q?dzWD3Z/uPL3aMW3y/BGpa67L1VDSyteW+qET6Psmr1Xvph2mFk0n839/ydlaz2?=
 =?us-ascii?q?Oc5onWDAoVSZ/xTkc39x19p7HGYik855nY1WF2PamzqD/C39MpBO0qyhu7e9df?=
 =?us-ascii?q?MaWEFBL9EsEABsiuLvAqlEatbh4eIO9S86s0Ndu8d/SawK6rIPpgnDW+gGtd5I?=
 =?us-ascii?q?ByzE2N+DR8S+LSxJkF3uyX0RGBVzf/i1ehrNv6mYRFZTEUA2q+xjLoBI9XZq1u?=
 =?us-ascii?q?Y4kLDX2iLNGwxtV7n5TtQWJX9Ea/B1Ma38+kYRqTb0Hn0QJMz0gWoHynljG+zz?=
 =?us-ascii?q?x7iDwpqquf3CrTw+XtbhYHO2hLRHV8glfoO4S7k9caXE2wZQgziBSl/Vr6x7Rc?=
 =?us-ascii?q?pKlnNWnTQFtHcDLsL25/Vau8rLyCbNBV6JMpqClYTP6zYVSHRbHjuRsa1CXjEn?=
 =?us-ascii?q?BaxDA6cTGqp5r4kwZ7iGKbMHZ8sn7ZddtsyhfY4dzWXeRR0SYeRClklTnXAUCx?=
 =?us-ascii?q?Ptmo/dmOl5bPqPu+V3+nVpBIdSnrzIWAtDa05GFwAB2/meyzlcPjEQQgzSD70N?=
 =?us-ascii?q?xqXz3SrBngeonry7i6MeV/c0lqHlD88cl6GoJ5kocqn5Efw3sahpaU/XoBj2jz?=
 =?us-ascii?q?N85W2ab/bHoLWD4KzMTZ4Anj2E1/MH2Jw5j1WWmawstkf9O6eH8Z2joh78BWD6?=
 =?us-ascii?q?eZ9LxFkjFyolairwLRYP59kywZyfsv7n4anu4ItBAsziWbHrAdA01YMTbwmBSP?=
 =?us-ascii?q?6tC0tL9Xa3q3cbisyEp+msisDLKYrQFdQnr5eooiEjV27sVwK1/M1Hzz6of5eN?=
 =?us-ascii?q?jfd94TtxuUkwvegOhRMp4+iv0KhS9/M2LnoXIl0/I7jQBp3ZyiuYiHKmZt87ij?=
 =?us-ascii?q?Dh9WKDL1fN8T9S/3jalFgMmWxY+vE45lGjUKWpvoUP2pHCgTtfThKwaBDjk8pm?=
 =?us-ascii?q?2HFrrYGA+V8F1moG7XE5C3K3GXI2EUzcllRBmYPkBegRobXDMnnp4iDQCqxdfs?=
 =?us-ascii?q?cEN45jAX+175pQFAyuNuNxnjTGjfoB2kZSszSJiaNBBW9B1N51/JMcyC6eJ+Bz?=
 =?us-ascii?q?pX8YemrAyJN2yXfQBIDXwSV0yABlDjOKSu5Nba/+iZAOq+M+XBYbGUpeNCUPeI?=
 =?us-ascii?q?wIql0pF68DaUKsWPIn5iAuU52kVZWHB2Bd/Zly8TSyANlCLNcs2bpAq6+iJttc?=
 =?us-ascii?q?Cy6/DrWAPp5YuSBLpeK9Rv+xaqgaidM+6cnjp2KTFd1pkU33/H1KAf3EIOiyFp?=
 =?us-ascii?q?bzSsEbMAtTPUTKLNgKBXCQQXazh0NMtO4KIxxQ1NOc/ditPo2b90lP81C1FZVV?=
 =?us-ascii?q?P/nsGlf9AFI2a4NFnfHkaEKKyGJSHXw8Hwea68SaNfjORXtx2zuDaXCUzjPi6E?=
 =?us-ascii?q?lznmSR+vK/xMjDqAMRxauYG9dAttCGf5QNLnbB27LMF4jTkszbIogXPKMHYWMS?=
 =?us-ascii?q?JgfENVsr2Q8SRYj+1lFGxc9XVlN/eLmiaD4+ncK5Ybqv9rAiVyl+JH73U20bpV?=
 =?us-ascii?q?7CdYRPNrnCvetMJho1ajkuOX0DpoTAJOqipXhIKMpUhiJaTZ9pxaVXnY5h4C8W?=
 =?us-ascii?q?WQBAoMp9Z+Dt3vuqZQysXAla7pKTdC9c7U8tUYB8TONM2HN38hOwLzGDHIFAsF?=
 =?us-ascii?q?USKrNWbHik1div6S8HiVrpk8qpf0mZsOSqVUVFo6Fv4BDkRlHdoCIIp4Xz8+kL?=
 =?us-ascii?q?6bitII6mS6rBXLWMpauZXHBbquBqDUJTyQlqVFbh1A6LX0N5YeNMXA2kF9a15g?=
 =?us-ascii?q?1NDAGkXdVMtciilgaBIoukJL8Wg4QmBliGz/bQb4wngeEbaakwQwgw1ybP9loD?=
 =?us-ascii?q?Xr7lMfJF3HoCU9ik84n9nomnaWajGnf/T4Zp1fFyeh7xt5CZj8WQsgKFTqxUE?=
 =?us-ascii?q?=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ADAAAGZhBch0O0hNFlGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUgMBAQEBAQsBgTAqgQ+BAieYJoINFJJChHyBcxIBARgNBgG?=
 =?us-ascii?q?HLiI1CA0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmIBAgECAQIkEwYBATcBB?=
 =?us-ascii?q?QkBAQoYCSUDDAUgAQUBIhMFglFLAYIBAQQKmjQ8ih2BbDOCdgEBBYEwAYV6AwU?=
 =?us-ascii?q?Siw2BHBc+gUGBEAGDEoMeAQKFFYImiT2BcIURkD8JgiaEY4o9CxhgiQaHWiyNa?=
 =?us-ascii?q?op2BgIJBw8hgSYBggxNMAiDJ4IbDBeIXoVgHzKBAgMBASETijABAQ?=
X-IPAS-Result: =?us-ascii?q?A0ADAAAGZhBch0O0hNFlGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUgMBAQEBAQsBgTAqgQ+BAieYJoINFJJChHyBcxIBARgNBgGHLiI1CA0BAwEBA?=
 =?us-ascii?q?QEBAQIBEwEBAQgNCQgpIwyCNiQBgmIBAgECAQIkEwYBATcBBQkBAQoYCSUDDAU?=
 =?us-ascii?q?gAQUBIhMFglFLAYIBAQQKmjQ8ih2BbDOCdgEBBYEwAYV6AwUSiw2BHBc+gUGBE?=
 =?us-ascii?q?AGDEoMeAQKFFYImiT2BcIURkD8JgiaEY4o9CxhgiQaHWiyNaop2BgIJBw8hgSY?=
 =?us-ascii?q?BggxNMAiDJ4IbDBeIXoVgHzKBAgMBASETijABAQ?=
X-IronPort-AV: E=Sophos;i="5.56,343,1539673200"; 
   d="scan'208";a="141752861"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 11 Dec 2018 17:40:22 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726273AbeLLBkU (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 11 Dec 2018 20:40:20 -0500
Received: from mail-pl1-f196.google.com ([209.85.214.196]:46798 "EHLO
        mail-pl1-f196.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726201AbeLLBkT (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 11 Dec 2018 20:40:19 -0500
Received: by mail-pl1-f196.google.com with SMTP id t13so7770637ply.13
        for <linux-kernel@vger.kernel.org>; Tue, 11 Dec 2018 17:40:19 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=joelfernandes.org; s=google;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=P5/KXUM8JqSr+FPMlXyBwhrj0Qk66bpPQbKuSMv7TXk=;
        b=i4Vd1mbVmy1G+y0vBHPeFPVt4VaPNI06LuCf0xbss+oHbDf3eWBYlBNIyLLhqiBBf0
         ebjMyh892NASk/uQPcoK4y7uBMsod6imrAtUkR0G9uIEals7Br5B2yodKCmsiGyKYrLL
         sNrlYMErj/2JlzVMko+tLqMinuaBAIuGdmhQk=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:message-id:references
         :mime-version:content-disposition:in-reply-to:user-agent;
        bh=P5/KXUM8JqSr+FPMlXyBwhrj0Qk66bpPQbKuSMv7TXk=;
        b=c8Y1NgcsuBdXxCf8ejxMyqh5f4ruqxtTAQWg7eCAz1GxIOPRhQ4JDlReWm9lwKAqcw
         n7RQdywoLfHRn3fPxXyegAdW86rWq/YLT6cUAQpP2lLhcxmpgwxb6cGUrfoowy0qEv7H
         21ErgIo/SVjdjuj4MMm5ObxZFg3Xx1/YbzLa5KFEuqAgOfpUsrOkC1Cg1rUW4qPCI67I
         GKXRYgfrlg1Mohljt7GNZSRuHNI2t4nv7u8kNJejXzB28OsbHoBhWJ3cJkDsRyndD2ES
         uUoJw0tsZcBynyR1gQpmubMJ95eQCkduMID4fuaqKCfNKmZIig4zoanqXwhBLzT7j4I/
         8hhA==
X-Gm-Message-State: AA+aEWbWQ+MbLXCbxvqi7hGWOFg2k5PIBFsfnWIo3yHQilrH9jW17VqI
        zZOPwE2Crqi2nYjNuRqt94LVoQ==
X-Google-Smtp-Source: AFSGD/Xc8quvId+6zMTaJwmTPP9V/Zx/6Th9pxEsn5ZML9gqWT1FC1wDlog7p3oA/o+Ihv872ivWIw==
X-Received: by 2002:a17:902:aa82:: with SMTP id d2mr18172034plr.153.1544578818078;
        Tue, 11 Dec 2018 17:40:18 -0800 (PST)
Received: from localhost ([2620:0:1000:1601:3aef:314f:b9ea:889f])
        by smtp.gmail.com with ESMTPSA id v62sm30190327pfd.163.2018.12.11.17.40.16
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Tue, 11 Dec 2018 17:40:16 -0800 (PST)
Date: Tue, 11 Dec 2018 17:40:16 -0800
From: Joel Fernandes <joel@joelfernandes.org>
To: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Cc: linux-kernel@vger.kernel.org,
        Lai Jiangshan <jiangshanlai@gmail.com>,
        "Paul E. McKenney" <paulmck@linux.ibm.com>,
        Josh Triplett <josh@joshtriplett.org>,
        Steven Rostedt <rostedt@goodmis.org>,
        Mathieu Desnoyers <mathieu.desnoyers@efficios.com>,
        tglx@linutronix.de, boqun.feng@gmail.com
Subject: Re: [PATCH] srcu: Remove srcu_queue_delayed_work_on()
Message-ID: <20181212014016.GA97542@google.com>
References: <20181211111238.13474-1-bigeasy@linutronix.de>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181211111238.13474-1-bigeasy@linutronix.de>
User-Agent: Mutt/1.10.1 (2018-07-13)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Tue, Dec 11, 2018 at 12:12:38PM +0100, Sebastian Andrzej Siewior wrote:
> srcu_queue_delayed_work_on() disables preemption (and therefore CPU
> hotplug in RCU's case) and then checks based on its own accounting if a
> CPU is online. If the CPU is online it uses queue_delayed_work_on()
> otherwise it fallbacks to queue_delayed_work().
> The problem here is that queue_work() on -RT does not work with disabled
> preemption.
> 
> queue_work_on() works also on an offlined CPU. queue_delayed_work_on()
> has the problem that it is possible to program a timer on an offlined
> CPU. This timer will fire once the CPU is online again. But until then,
> the timer remains programmed and nothing will happen.
> Add a local timer which will fire (as requested per delay) on the local
> CPU and then enqueue the work on the specific CPU.
> 
> RCUtorture testing with SRCU-P for 24h showed no problems.
> 
> Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
> ---
>  include/linux/srcutree.h |  3 ++-
>  kernel/rcu/srcutree.c    | 57 ++++++++++++++++++----------------------
>  kernel/rcu/tree.c        |  4 ---
>  kernel/rcu/tree.h        |  8 ------
>  4 files changed, 27 insertions(+), 45 deletions(-)
> 
> diff --git a/include/linux/srcutree.h b/include/linux/srcutree.h
> index 6f292bd3e7db7..0faa978c98807 100644
> --- a/include/linux/srcutree.h
> +++ b/include/linux/srcutree.h
> @@ -45,7 +45,8 @@ struct srcu_data {
>  	unsigned long srcu_gp_seq_needed;	/* Furthest future GP needed. */
>  	unsigned long srcu_gp_seq_needed_exp;	/* Furthest future exp GP. */
>  	bool srcu_cblist_invoking;		/* Invoking these CBs? */
> -	struct delayed_work work;		/* Context for CB invoking. */
> +	struct timer_list delay_work;		/* Delay for CB invoking */
> +	struct work_struct work;		/* Context for CB invoking. */
>  	struct rcu_head srcu_barrier_head;	/* For srcu_barrier() use. */
>  	struct srcu_node *mynode;		/* Leaf srcu_node. */
>  	unsigned long grpmask;			/* Mask for leaf srcu_node */
> diff --git a/kernel/rcu/srcutree.c b/kernel/rcu/srcutree.c
> index 3600d88d8956b..7f041f2435df9 100644
> --- a/kernel/rcu/srcutree.c
> +++ b/kernel/rcu/srcutree.c
> @@ -58,6 +58,7 @@ static bool __read_mostly srcu_init_done;
>  static void srcu_invoke_callbacks(struct work_struct *work);
>  static void srcu_reschedule(struct srcu_struct *ssp, unsigned long delay);
>  static void process_srcu(struct work_struct *work);
> +static void srcu_delay_timer(struct timer_list *t);
>  
>  /* Wrappers for lock acquisition and release, see raw_spin_lock_rcu_node(). */
>  #define spin_lock_rcu_node(p)					\
> @@ -156,7 +157,8 @@ static void init_srcu_struct_nodes(struct srcu_struct *ssp, bool is_static)
>  			snp->grphi = cpu;
>  		}
>  		sdp->cpu = cpu;
> -		INIT_DELAYED_WORK(&sdp->work, srcu_invoke_callbacks);
> +		INIT_WORK(&sdp->work, srcu_invoke_callbacks);
> +		timer_setup(&sdp->delay_work, srcu_delay_timer, 0);
>  		sdp->ssp = ssp;
>  		sdp->grpmask = 1 << (cpu - sdp->mynode->grplo);
>  		if (is_static)
> @@ -386,13 +388,19 @@ void _cleanup_srcu_struct(struct srcu_struct *ssp, bool quiesced)
>  	} else {
>  		flush_delayed_work(&ssp->work);
>  	}
> -	for_each_possible_cpu(cpu)
> +	for_each_possible_cpu(cpu) {
> +		struct srcu_data *sdp = per_cpu_ptr(ssp->sda, cpu);
> +
>  		if (quiesced) {
> -			if (WARN_ON(delayed_work_pending(&per_cpu_ptr(ssp->sda, cpu)->work)))
> +			if (WARN_ON(timer_pending(&sdp->delay_work)))
> +				return; /* Just leak it! */
> +			if (WARN_ON(work_pending(&sdp->work)))
>  				return; /* Just leak it! */
>  		} else {
> -			flush_delayed_work(&per_cpu_ptr(ssp->sda, cpu)->work);
> +			del_timer_sync(&sdp->delay_work);
> +			flush_work(&sdp->work);
>  		}
> +	}
>  	if (WARN_ON(rcu_seq_state(READ_ONCE(ssp->srcu_gp_seq)) != SRCU_STATE_IDLE) ||
>  	    WARN_ON(srcu_readers_active(ssp))) {
>  		pr_info("%s: Active srcu_struct %p state: %d\n",
> @@ -463,39 +471,23 @@ static void srcu_gp_start(struct srcu_struct *ssp)
>  	WARN_ON_ONCE(state != SRCU_STATE_SCAN1);
>  }
>  
> -/*
> - * Track online CPUs to guide callback workqueue placement.
> - */
> -DEFINE_PER_CPU(bool, srcu_online);
>  
> -void srcu_online_cpu(unsigned int cpu)
> +static void srcu_delay_timer(struct timer_list *t)
>  {
> -	WRITE_ONCE(per_cpu(srcu_online, cpu), true);
> +	struct srcu_data *sdp = container_of(t, struct srcu_data, delay_work);
> +
> +	queue_work_on(sdp->cpu, rcu_gp_wq, &sdp->work);
>  }
>  
> -void srcu_offline_cpu(unsigned int cpu)
> -{
> -	WRITE_ONCE(per_cpu(srcu_online, cpu), false);
> -}
> -
> -/*
> - * Place the workqueue handler on the specified CPU if online, otherwise
> - * just run it whereever.  This is useful for placing workqueue handlers
> - * that are to invoke the specified CPU's callbacks.
> - */
> -static bool srcu_queue_delayed_work_on(int cpu, struct workqueue_struct *wq,
> -				       struct delayed_work *dwork,
> +static void srcu_queue_delayed_work_on(struct srcu_data *sdp,
>  				       unsigned long delay)
>  {
> -	bool ret;
> +	if (!delay) {
> +		queue_work_on(sdp->cpu, rcu_gp_wq, &sdp->work);
> +		return;
> +	}
>  
> -	preempt_disable();
> -	if (READ_ONCE(per_cpu(srcu_online, cpu)))
> -		ret = queue_delayed_work_on(cpu, wq, dwork, delay);
> -	else
> -		ret = queue_delayed_work(wq, dwork, delay);
> -	preempt_enable();

The deleted code looks like 'cpu' could be offlined.

Question for my clarification: According to sync_rcu_exp_select_cpus, we have
to disable preemption before calling queue_work_on to ensure the CPU is online.

Also same is said in Boqun's presentation on the topic:
https://linuxplumbersconf.org/event/2/contributions/158/attachments/68/79/workqueue_and_cpu_hotplug.pdf

Calling queue_work_on on an offline CPU sounds like could be problematic. So
in your patch, don't you still need to disable preemption around
queue_work_on, or the very least check if said CPU is online before calling
queue_work_on?

thanks,

 - Joel

