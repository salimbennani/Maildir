Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 16:02:33 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id E311158049E;
	Sun, 23 Dec 2018 18:44:16 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 23 Dec 2018 18:44:16 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3An4+n2RD2HddqNANQyFxCUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7/pc+wAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VDK/5KlpVRDokj?=
 =?us-ascii?q?8KOT4n/m/KhMJ+j6VVoAm5pxF92IPYfJ2ZOeBicq7HYd8WWWxMVdtRWSxbBYO8?=
 =?us-ascii?q?apMCAewAPe1Fs4f9oF0OrRSlCwmtAuPvxSJDi3jy3a07yeQhFgfG3AM5H9IPtn?=
 =?us-ascii?q?TUo874O7wIXuC00abI0C/PYO9R2Tf48YXFdA0qr/KUXb9ob8bd1U0iGxnYglie?=
 =?us-ascii?q?t4DpJS6Z2+cRv2SB7udtV/qjhm86pw1rvzSiyMchhpPUio8UyV3I7zh1zYgrKd?=
 =?us-ascii?q?C+VUV1e8SrEIFKuCGfL4Z2Qt0tQ2VvuCsi1L0GtoC0fDIQxJQk2RHfcfqHfJaM?=
 =?us-ascii?q?4h75U+aROzh4iGpkeLK5mRmy7VCtxvPgWsSwylpGsyRInsfWunwQ1BHf9tKLR/?=
 =?us-ascii?q?p/80u53DaAzQHT6uVKIUAukqrbLoYswroxlpoVrETCETb6mEbog6+McEUr5Oyo?=
 =?us-ascii?q?5/3gYrTooJ+TKZV0hxrgMqQhhMO/G/40MgsQUGiB/+Szyrnj8Vf+QLVQgf06ir?=
 =?us-ascii?q?PZv4zCJcQHuq65BBdY0oIi6xa8ETiqytsZnWQcIVJBeRKHiZXpOl7ULPD5C/e/?=
 =?us-ascii?q?n0qjkDNxy//aOb3hB43HLmLfn7f5YbZ990lcxRIzzd9F5pJUFqsOIPXpVk/xqd?=
 =?us-ascii?q?zXFBk5MwOvzubjCdV90J4eWG2VDq+YNqPSrUGH5uY1L+aQY48VvS73K+I56P72?=
 =?us-ascii?q?kX85hVgdcLGz0psMaHC4GfdmL1+DYXX2gNcMCmMKvgs4TOz3h1yOSz9TZ3CuX6?=
 =?us-ascii?q?0i4jE3Ep6pDYDGRoq1mryOwD+7HoFKZmBBEl2MEm3nd4OeV/cIaSKdOMlhkjMf?=
 =?us-ascii?q?WLilSo8h0wyutQDgx7pmKOrU5jMXtZb52Ndp4O3TkAk49SZoAMSFz2GNU2Z0k3?=
 =?us-ascii?q?sVSDAswqBwv1ZxyleZ3qh+mPxXC9pT6/RNUgc5MJ7cy/d3C9TzWgLHY9eIR0yq?=
 =?us-ascii?q?QtSgATEtUN0xx8UCbFp6G9WnlhrDxTalA6cJl7yXA5w56r/T0GLvJ8lj0XrG1L?=
 =?us-ascii?q?Muj189QsRRM22rnap/9wnVB47UnESVjaeqdaIA3CHT8GeP13aBvEZdUARoS6XK?=
 =?us-ascii?q?QWgfZlfKrdT+/k7CU76uCbEgMgtdyc6DKrFGasHzgVVBXvfjPNXeY2S+m2qrAR?=
 =?us-ascii?q?aIx7WMbJflemkH3SXdDlQEnB4X/XqcKQc+ASKhqXrEDDNyDVLvf1/s8e5mpXyh?=
 =?us-ascii?q?Sk870Q6LYFNh1rav4REVmOGTROkV3rIHvychtS55HFK839LQFtqBqBBtfKRaYd?=
 =?us-ascii?q?Mh/lhH0XjVuBB6PpylN6pinEIRcxxrv0Py0BV6EoVBkdUwoHw21gZzKKKY30lH?=
 =?us-ascii?q?dzOXxp3wPrzXKm/v/BGgcaLW21fe0MqI9acL8vg3t1LjvASxHEo473pny8VV02?=
 =?us-ascii?q?eb5pjSFgoSUI7+XVwt9xdnoLHWeC896J3O1X1tKKW7riXN29Y0C+Q70BageNFf?=
 =?us-ascii?q?PbiAFA/zFc0aGsevJPYrm1ivchILIuRS+LQoMMOhcvuMwLSrM/p4nDK6kWRH55?=
 =?us-ascii?q?hw00KN9yZmSu/ExY0Fw+ye3gacUzf8jVGhst34mIxeZDESGHa/xjbgBIJLeqJy?=
 =?us-ascii?q?eoMLA3+0I8Kr3tV+m4LtW3lA+V6hHVwGwsypeRmVb1Dnxg1fz0cXoX+mmSu+0T?=
 =?us-ascii?q?N0lSokrq6e3CzI3uTjewALOm9NRGl+k1jsJZK4gMwdXEitdwIpjgeq5V7mx6hH?=
 =?us-ascii?q?o6RyN2nSTl1PfyTsLWFiU62wu6GGY85O7pMorCpWXP69YVCcVr7yvR8a3zn/EG?=
 =?us-ascii?q?tZwTAxbyuqtYnhnxxmlGKdK25+rHnDdsFx3xvf5MHcSuRX3joJXyR4jTjXBl6h?=
 =?us-ascii?q?P9im59mUlpHDsvygWGKlTJFcbS7rzYaYviuh+WJqGQG/n+y0mtD/FAg60Cz72M?=
 =?us-ascii?q?NwWSTGshn8eZXr2LqgMe18YEZoHlD85tF+GoF/lIswmZ4R1WIbhpWT4XoIj2Pz?=
 =?us-ascii?q?Pc9H1qL5aXoHXSQLzMLN4Aj5xE1jKWqEx57+VnWY2MdgZsO1YmUL2iIm9MBKCb?=
 =?us-ascii?q?yZ7LhFnStzv1q5ohjdYfl7njcB1/Qu7GQWjP0OuAoo1i+dGKwdHVFEPSzwkBSF?=
 =?us-ascii?q?98uxo79QZGarbLi8zk5+nc26AbGGowFcXmv5e5g4ES9x6MV/LEzD0Hnp5o74f9?=
 =?us-ascii?q?nQaMoZtgeInBfYk+hVNJUxm+IIhSV9PGLyo2Ylx/QnjRB03pG6oYuHK3hr/K2j?=
 =?us-ascii?q?GR5VLTn1Z8IV+jHwgqdShMeW34azHpp/HjUHRofnTfWtEDgKr/ToKx6OECEgqn?=
 =?us-ascii?q?ecAbfeHQif6Fp/r3LSCZ+rMWubJGIezdVkSxmQP0hfgAESXDUnkZ81DAGqxMr9?=
 =?us-ascii?q?cEhn4jAd/EL3qhxJyuhwLRnwTn/fpBu0ajczUJWfLARZ7gBB50fWMMyS9OFzHz?=
 =?us-ascii?q?tf/p2usgONMHGbZx9TAGENW0yEAU3jP7a06dnB9eiYGvSxL//UbbqSruxeUu+C?=
 =?us-ascii?q?xYiz3Yt+4zaMKsKPM2F4AP0mwUVDR252GsTDlzULSiwajCbNb8+dpBeh9Sx7tM?=
 =?us-ascii?q?G/8PL3WA3x4YuDEaddMdJq+xqum6eMK/aQhDplKTZfzp4M2X7IyL0F0FEOkS1h?=
 =?us-ascii?q?azmtHqoGtSPWSKLQm6lXDwMUai9pNctI6b480RdJOcLBltz10bt4hOYvC1hZTV?=
 =?us-ascii?q?zhht2pZcsSLmC9LlzHAkOLNLWAJTLTwsD3YbmzSbtfjOhPsx2wuDCbE1LsPziZ?=
 =?us-ascii?q?ljnpUQyvPv9IjC2BIBNev4S9IV5RDj3nTdT7eli4PcVxgDke37I5nDXJOHQaPD?=
 =?us-ascii?q?w6dFlC6vWS9idRiORXAHFa4zxuKuzA0ymD4ubbKr4SsP12EipziuRW6Wg7zL0T?=
 =?us-ascii?q?6ztLALR6myzSqt9GqFaqn+CS0D19WVxJsDkPzIuPtENKPaTf64kGWHDY8RZL5m?=
 =?us-ascii?q?KVWDoQoN4wLtyngadWxeHOkq27fDND6dXS8tIdAcf8IsuGPGdnOh3sTm2HRDAZ?=
 =?us-ascii?q?RCKmYDmMz3dWl+ufoyWY?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0B8AQC1RyBch0O0hNFaCIIXg2wnjHaLG?=
 =?us-ascii?q?oIhaJZngXMtEwGHMCI0CQ0BAwEBAQEBAQIBEwEBAQoLCQgpL4I6IoJ2AiQ5Hwk?=
 =?us-ascii?q?CUANbEgWDHYIBAQWnLTOKHYd+hEEXgUA/gRGCXYURhgQCkGKQaQmCKY9AAhaRZ?=
 =?us-ascii?q?QEtiSySFoIOcIM8gicXjioyATKBBQEBjWUBAQ?=
X-IPAS-Result: =?us-ascii?q?A0B8AQC1RyBch0O0hNFaCIIXg2wnjHaLGoIhaJZngXMtEwG?=
 =?us-ascii?q?HMCI0CQ0BAwEBAQEBAQIBEwEBAQoLCQgpL4I6IoJ2AiQ5HwkCUANbEgWDHYIBA?=
 =?us-ascii?q?QWnLTOKHYd+hEEXgUA/gRGCXYURhgQCkGKQaQmCKY9AAhaRZQEtiSySFoIOcIM?=
 =?us-ascii?q?8gicXjioyATKBBQEBjWUBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,390,1539673200"; 
   d="scan'208";a="46185782"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 23 Dec 2018 18:44:15 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726664AbeLXCoG (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Sun, 23 Dec 2018 21:44:06 -0500
Received: from mx132-tc.baidu.com ([61.135.168.132]:23179 "EHLO
        tc-sys-mailedm05.tc.baidu.com" rhost-flags-OK-OK-OK-FAIL)
        by vger.kernel.org with ESMTP id S1726493AbeLXCoG (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sun, 23 Dec 2018 21:44:06 -0500
Received: from localhost (cp01-cos-dev01.cp01.baidu.com [10.92.119.46])
        by tc-sys-mailedm05.tc.baidu.com (Postfix) with ESMTP id 3E5851EBA002;
        Mon, 24 Dec 2018 10:43:52 +0800 (CST)
From: Li RongQing <lirongqing@baidu.com>
To: linux-kernel@vger.kernel.org, jslaby@suse.com,
        gregkh@linuxfoundation.org, gkohli@codeaurora.org,
        alan@linux.intel.com
Subject: [PATCH][v2] tty: fix race between flush_to_ldisc and tty_open
Date: Mon, 24 Dec 2018 10:43:52 +0800
Message-Id: <1545619432-8875-1-git-send-email-lirongqing@baidu.com>
X-Mailer: git-send-email 1.7.1
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

There still is a race window after the commit b027e2298bd588
("tty: fix data race between tty_init_dev and flush of buf"),
if receive_buf call comes before tty initialization completes
in n_tty_open and tty->driver_data may be NULL.

CPU0                             CPU1
----                             ----
                                 n_tty_open
                                   tty_init_dev
                                     tty_ldisc_unlock
                                       schedule
flush_to_ldisc
  n_tty_receive_buf
    uart_flush_chars
      uart_start
      /*tty->driver_data is NULL*/
                                   tty->ops->open
                                   /*init tty->driver_data*/

Extending ldisc semaphore lock in tty_init_dev to driver_data
initialized completely after tty->ops->open().

Signed-off-by: Zhang Yu <zhangyu31@baidu.com>
Signed-off-by: Li RongQing <lirongqing@baidu.com>
---
 drivers/staging/speakup/spk_ttyio.c |  1 +
 drivers/tty/pty.c                   |  2 ++
 drivers/tty/serdev/serdev-ttyport.c |  2 ++
 drivers/tty/tty_io.c                | 14 +++++++++++---
 drivers/tty/tty_ldisc.c             |  1 +
 5 files changed, 17 insertions(+), 3 deletions(-)

diff --git a/drivers/staging/speakup/spk_ttyio.c b/drivers/staging/speakup/spk_ttyio.c
index 979e3ae249c1..c31f08c98383 100644
--- a/drivers/staging/speakup/spk_ttyio.c
+++ b/drivers/staging/speakup/spk_ttyio.c
@@ -155,6 +155,7 @@ static int spk_ttyio_initialise_ldisc(struct spk_synth *synth)
 	else
 		ret = -ENODEV;
 
+	tty_ldisc_unlock(tty);
 	if (ret) {
 		tty_unlock(tty);
 		return ret;
diff --git a/drivers/tty/pty.c b/drivers/tty/pty.c
index 00099a8439d2..1b9684d4f718 100644
--- a/drivers/tty/pty.c
+++ b/drivers/tty/pty.c
@@ -873,9 +873,11 @@ static int ptmx_open(struct inode *inode, struct file *filp)
 
 	tty_debug_hangup(tty, "opening (count=%d)\n", tty->count);
 
+	tty_ldisc_unlock(tty);
 	tty_unlock(tty);
 	return 0;
 err_release:
+	tty_ldisc_unlock(tty);
 	tty_unlock(tty);
 	// This will also put-ref the fsi
 	tty_release(inode, filp);
diff --git a/drivers/tty/serdev/serdev-ttyport.c b/drivers/tty/serdev/serdev-ttyport.c
index fa1672993b4c..ce16cb303e28 100644
--- a/drivers/tty/serdev/serdev-ttyport.c
+++ b/drivers/tty/serdev/serdev-ttyport.c
@@ -123,6 +123,7 @@ static int ttyport_open(struct serdev_controller *ctrl)
 	if (ret)
 		goto err_close;
 
+	tty_ldisc_unlock(tty);
 	tty_unlock(serport->tty);
 
 	/* Bring the UART into a known 8 bits no parity hw fc state */
@@ -145,6 +146,7 @@ static int ttyport_open(struct serdev_controller *ctrl)
 err_close:
 	tty->ops->close(tty, NULL);
 err_unlock:
+	tty_ldisc_unlock(tty);
 	tty_unlock(tty);
 	tty_release_struct(tty, serport->tty_idx);
 
diff --git a/drivers/tty/tty_io.c b/drivers/tty/tty_io.c
index 687250ec8032..199f45e2e1b1 100644
--- a/drivers/tty/tty_io.c
+++ b/drivers/tty/tty_io.c
@@ -1351,7 +1351,6 @@ struct tty_struct *tty_init_dev(struct tty_driver *driver, int idx)
 	retval = tty_ldisc_setup(tty, tty->link);
 	if (retval)
 		goto err_release_tty;
-	tty_ldisc_unlock(tty);
 	/* Return the tty locked so that it cannot vanish under the caller */
 	return tty;
 
@@ -1926,7 +1925,7 @@ EXPORT_SYMBOL_GPL(tty_kopen);
  *	  - concurrent tty removal from driver table
  */
 static struct tty_struct *tty_open_by_driver(dev_t device, struct inode *inode,
-					     struct file *filp)
+					     struct file *filp, bool *unlock)
 {
 	struct tty_struct *tty;
 	struct tty_driver *driver = NULL;
@@ -1970,6 +1969,7 @@ static struct tty_struct *tty_open_by_driver(dev_t device, struct inode *inode,
 		}
 	} else { /* Returns with the tty_lock held for now */
 		tty = tty_init_dev(driver, index);
+		*unlock = true;
 		mutex_unlock(&tty_mutex);
 	}
 out:
@@ -2007,6 +2007,7 @@ static int tty_open(struct inode *inode, struct file *filp)
 	int noctty, retval;
 	dev_t device = inode->i_rdev;
 	unsigned saved_flags = filp->f_flags;
+	bool unlock = false;
 
 	nonseekable_open(inode, filp);
 
@@ -2017,7 +2018,7 @@ static int tty_open(struct inode *inode, struct file *filp)
 
 	tty = tty_open_current_tty(device, filp);
 	if (!tty)
-		tty = tty_open_by_driver(device, inode, filp);
+		tty = tty_open_by_driver(device, inode, filp, &unlock);
 
 	if (IS_ERR(tty)) {
 		tty_free_file(filp);
@@ -2042,6 +2043,10 @@ static int tty_open(struct inode *inode, struct file *filp)
 	if (retval) {
 		tty_debug_hangup(tty, "open error %d, releasing\n", retval);
 
+		if (unlock) {
+			unlock = false;
+			tty_ldisc_unlock(tty);
+		}
 		tty_unlock(tty); /* need to call tty_release without BTM */
 		tty_release(inode, filp);
 		if (retval != -ERESTARTSYS)
@@ -2067,6 +2072,9 @@ static int tty_open(struct inode *inode, struct file *filp)
 		  tty->driver->subtype == PTY_TYPE_MASTER);
 	if (!noctty)
 		tty_open_proc_set_tty(filp, tty);
+
+	if (unlock)
+		tty_ldisc_unlock(tty);
 	tty_unlock(tty);
 	return 0;
 }
diff --git a/drivers/tty/tty_ldisc.c b/drivers/tty/tty_ldisc.c
index fc4c97cae01e..dd9b41f66c18 100644
--- a/drivers/tty/tty_ldisc.c
+++ b/drivers/tty/tty_ldisc.c
@@ -339,6 +339,7 @@ void tty_ldisc_unlock(struct tty_struct *tty)
 	clear_bit(TTY_LDISC_HALTED, &tty->flags);
 	__tty_ldisc_unlock(tty);
 }
+EXPORT_SYMBOL_GPL(tty_ldisc_unlock);
 
 static int
 tty_ldisc_lock_pair_timeout(struct tty_struct *tty, struct tty_struct *tty2,
-- 
2.16.2

