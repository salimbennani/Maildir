Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  15 Dec 2018 13:05:28 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga007.fm.intel.com (fmsmga007.fm.intel.com [10.253.24.52])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id A2D2558061F;
	Fri, 14 Dec 2018 06:16:36 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga007-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 14 Dec 2018 06:16:36 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AAvkVvxY5psYgXj+5mcbVfAD/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpciyZh7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyxPDJ2h?=
 =?us-ascii?q?YYUBDOQPOulXoJXyqVsVtRuzBxKhBP/sxzJSmnP7x7E23uYnHArb3AIgBdUOsH?=
 =?us-ascii?q?HModr0NacdS+e1zajIzTXEcvNdxDHz6InVchs8pvyMWbNwcdfeyEkuDQzFiVSR?=
 =?us-ascii?q?qYziPzOIzekCqGia7/Z+Wu2ykWEnrR1+rSa1ysgwjYnJg5sYx1bZ/it62IY4Pc?=
 =?us-ascii?q?O0RFJ/bNK+DZdduT+WO5FrTs4hX21koic3x78etZKmYiQG1o4rywPQZvCdbYSF?=
 =?us-ascii?q?7Q/vWPyMLTtkgH9ofq+0iQyo/ki60OL8U9G50FZUoSpBldnBrm4N1xPN5cidUP?=
 =?us-ascii?q?d9/Vmu2SyJ1w/N7uFIO0c0lbDUK5I5w74wkIQcsVjbEyPohEn7iLWaelgq9+S2?=
 =?us-ascii?q?8ejrf7brqoOGO4J1iAzyKqEulda+AeQ8PAgORW+b+eGk2b3n/E35RqhKj/Ivnq?=
 =?us-ascii?q?narp/aP8IbqbC9AwNM1YYi5RC/ACm80NkDg3kHI0xKeAidg4jqJV7OOvb4Aum7?=
 =?us-ascii?q?g1i2lzdr3f/GMqX7AprRNnjDjKvhfbFl5k5YyQozzs5Q64hbC7EcO//zXk7xtN?=
 =?us-ascii?q?rFDh42KQC0wuDnCMlj2YMaQ26AHqiZMKbKu1+S+u0vO/WMZJMSuDvlK/gq/f/u?=
 =?us-ascii?q?jWMjll8aZ6Wp3YYXZ2q+HvRpOEiZZXvsgtEcEWYFpAY+TerqiEGcXj5XfXq9Q6?=
 =?us-ascii?q?U85jQjAoK8EYjDXpytgKCG3CqjHJ1WYX5JBkqPEXfvcYWEXfAMZTmWIs9glDwE?=
 =?us-ascii?q?SLegR5Ug1RGoqA/11b5nIvDI9S0fsJLpzMJ16PHLlREu6Tx0CNyQ3HuWT2F0mW?=
 =?us-ascii?q?MIRCU63Lplrkx/0VqD1al4g/pFFd1c/f9JUwE6NYLCwOx+Edz9RgXBftKRQla8?=
 =?us-ascii?q?XtqmGS0xTs42w9IWYEZyAdOiggrH3yqrGbAVkbOLCYcw8qLd2XjxOsl8x2zH1K?=
 =?us-ascii?q?knk1kpXM9POXe6ia548gjZH5TJnFmBl6a2aaQc2zbA+3qZwmqQok5USg5wXr/D?=
 =?us-ascii?q?XXAEeETWq9P15kfBT7+rDbQqKQ9Byc+EKqtXZdzll1RGRPH/ONvAZ2K9gXu/BR?=
 =?us-ascii?q?GNxrmUdorlZ30d3DnBCEgDiw0c4GyJNRYgCSu7o2LRFjpuFUnxbEPq6uR+rHK7?=
 =?us-ascii?q?TkkpzwCFdUFh1ry1+gILivyYUf8cwrUEuCI5oTVuAFm9x87WC8aHpwd5YKVcYN?=
 =?us-ascii?q?Y94FBb1WLZtw1xJICgI7plhl4EdwR3vkXu1xpsB4VEkMgqqm4qzQVoJaKZ1lNB?=
 =?us-ascii?q?ay2X3ZTqNrLLLWny+Qila7TK1VHGzNaW5qAP5ewipFXnog6oGVQt8nV939ZOzn?=
 =?us-ascii?q?uT+4/FDAwRUZL2TEY67Bx6p7DcYikg6ILYz3xsMa+osjDc39IlHvcqyhGlf91H?=
 =?us-ascii?q?KqOLCBfyE9EGB8ipMOErm0WpYggYM+xI9a80P9mpd/2J2KOwOOZgnTSmjXlI4Y?=
 =?us-ascii?q?xn00KM8TZ8RfDM35of3/6Y2Q6HXS/mjFi9qsD3hZxEZTYKE2qlyCjrGJReZrdv?=
 =?us-ascii?q?coYME2uuJdO4xs9/h5L0R3FX7lqjCE4Y18+zfhqSaUfw3QlR1UQRvHymljG0zz?=
 =?us-ascii?q?1ykzE1sKWf2DbCzPjldBoCImRLXnVtjU/wIYioiNAXREipbwkzmBql/0r63LVb?=
 =?us-ascii?q?pKJkImnXQEdIeTX2Lm54XquxsLqCf9BA6JcyvSpLV+S8ZEiQSqThrBsCzyPjA2?=
 =?us-ascii?q?xeySg5dz6woJX5nB96iGWHIHZotnXZesJwxRbZ5NPCQ/5cxT4GRCh+iTnKCVmw?=
 =?us-ascii?q?Jdip/dOIl5jdtuCyTX6uVppWcSPz14OPqDO75XF2AR24h/2ymsfoEQ8g3S/51t?=
 =?us-ascii?q?lqUz7FrBL9YontyqS7PvhrfkhuBF/g9cV6HptynZc3hJEVwXIanIma/WIbkWfv?=
 =?us-ascii?q?NtVWwaH+Y2AMRTIRw97V/RLq2EtsLn+Sw4L5V3OdwtZuZtWgY2MW3D494N5OCK?=
 =?us-ascii?q?uO8LNEmi51qEKirQ3Nefh9gisdyfw25X4fguEJuxAiwj+TA78MBklYITLjlw6T?=
 =?us-ascii?q?4N+gtqVXa32icbyx1Ep4gNCgA6uOogBaWHblZJgiGTV84dl4MFLJyHfz8J3reM?=
 =?us-ascii?q?HMbdIPsR2ZiwvAj+9QKJ4rl/sFnyxnOX/mvX0+yu42lhhu3ZC8vIiaJGRh5qO5?=
 =?us-ascii?q?AhhENjLrY8Mf4C3ijaFbnsyOxYCgAo1hGikXXJvvVf+nCygdtfPjNwaTCjE8rm?=
 =?us-ascii?q?qbFKHbHQ+e7kdmsn3OH4qqN3GROHkW09FiSAOBK0xYhQAeRC86kYIhFgC22Mzh?=
 =?us-ascii?q?d1905jIL6V79tBRM0fhkNwXlXmfcuQeoaSo0SJ6FIxpN9QxC40bVMcqD7uN8BS?=
 =?us-ascii?q?1Y/5uhrBCTJWyffQhHEWYJWkmcDVD5Irau/cXA8/SfBuemL/rOZqiOqfVDV/iS?=
 =?us-ascii?q?w5KjyJBm/zGKNsWAJXRiC/w72kxeXXF2AcjZmjMPSzAJmCLJdcKUuBC8+ihvpM?=
 =?us-ascii?q?Cl7PvrQB7v5ZeIC7ZKMdVg5RG2gaSAN+6Rnip5KixY1pQDxXDW0rgfwUUShjpq?=
 =?us-ascii?q?dzmsF7QAqCHMQLjRmq9REx4UdSdzONFU4KI72wlHIdTbhc/t1r5kkv41DE9IWk?=
 =?us-ascii?q?b8ms6yf8wFPWG8OEnDBEaKL7mGITzLw8fqYaKzU7FQjeNUtwGutjafCUPsIjOD?=
 =?us-ascii?q?lzzxXRC1Le5MlD2bPABZuIylbhZtCG3jQMj6ZRGhLNB3jSM5wbsvi3PONG4cNy?=
 =?us-ascii?q?V8ckxXor2R6yNYnutwG2hb4nV5KumEnj6T7/PEJZYOrftrHiN0mvpa4XsgzbtV?=
 =?us-ascii?q?6SBERPptlyrTrt5huVemkuaUxzpjURpOrCtLhY2RsUVjP6XZ6odPWXLe8B0R6m?=
 =?us-ascii?q?WQDkdCm9wwL9zgpq1Ugv/Nma76YGNH8t3J8M9aAMrZJMvBK3MnPR3vGSX8Aw4M?=
 =?us-ascii?q?TDrtPmba0R9zivaXo02Up58oqp/x0L4PV/cPUF0oBvITDVZlG8EqKoZrUz8tl7?=
 =?us-ascii?q?WWysUP4Czt/1HqWMxGs8WfBbqpCvL1JWPc1OEcag=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AeAAAtuhNch0O0hNFkHgEGBwaBUwcLA?=
 =?us-ascii?q?YNrJ4N8ljGXQ4EkAwJKEgEBGBMBh0ciNgcNAQMBAQEBAQECARMBAQEIDQkIKSM?=
 =?us-ascii?q?MgjYkAYJpAiAPAQ0BAR4ZAQUJAiQCJgICAzEBBQEiEwWDHIIAAQWaGjyKH3CBL?=
 =?us-ascii?q?4J2AQEFhykIEnmGcoMlgRwXgX+Dbog8gleJICSBdIQWfZBPCZFPI4FdiBaHX4p?=
 =?us-ascii?q?AjnoCBAIEBQIFDyGBLARigSEzGiODPIIbg22KYDMyAYEEAQGNNwEB?=
X-IPAS-Result: =?us-ascii?q?A0AeAAAtuhNch0O0hNFkHgEGBwaBUwcLAYNrJ4N8ljGXQ4E?=
 =?us-ascii?q?kAwJKEgEBGBMBh0ciNgcNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkAYJpAiAPA?=
 =?us-ascii?q?Q0BAR4ZAQUJAiQCJgICAzEBBQEiEwWDHIIAAQWaGjyKH3CBL4J2AQEFhykIEnm?=
 =?us-ascii?q?GcoMlgRwXgX+Dbog8gleJICSBdIQWfZBPCZFPI4FdiBaHX4pAjnoCBAIEBQIFD?=
 =?us-ascii?q?yGBLARigSEzGiODPIIbg22KYDMyAYEEAQGNNwEB?=
X-IronPort-AV: E=Sophos;i="5.56,353,1539673200"; 
   d="scan'208";a="55196795"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 14 Dec 2018 06:16:34 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730110AbeLNOQb (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 14 Dec 2018 09:16:31 -0500
Received: from mail-pf1-f193.google.com ([209.85.210.193]:36538 "EHLO
        mail-pf1-f193.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726554AbeLNOQb (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 14 Dec 2018 09:16:31 -0500
Received: by mail-pf1-f193.google.com with SMTP id b85so2915082pfc.3
        for <linux-kernel@vger.kernel.org>; Fri, 14 Dec 2018 06:16:30 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=bytedance-com.20150623.gappssmtp.com; s=20150623;
        h=from:to:cc:subject:date:message-id:mime-version
         :content-transfer-encoding;
        bh=FtWilRGInAcb/NUhcDtH7YAZJfSIOGwgW3nzbl0W9IQ=;
        b=AayBWhx++Id141XiJ1IRtNF9YuU3agBHdXxOd/3mOX9QI5Ixe/HgEdjR4+SlOnKkXY
         +WDDlWrGdSxw+eFCqbIIudDT1/TRbHsj5Wxs463ESrzam65sJ/qC8qeQKonGRmydjIrn
         p8uwLJCPKAQzfyEP/c58CwnRfDMnzxGZTLrUpTsNC/zaQz714nS3entYsTi/3wAGjUNC
         V0niZMkIlV25xdb32l/SnuK1ASUrMgBaUWQXFchI8jhSMAJx6g8m6CVKGd9EFi+apb0w
         5YeGhODEsObV9Y2yFQOSb9LlroItQZwyPidfiv9HqGx3B0I1c9PLg7Q3Ko8WWDk5iIFj
         ZaxA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:mime-version
         :content-transfer-encoding;
        bh=FtWilRGInAcb/NUhcDtH7YAZJfSIOGwgW3nzbl0W9IQ=;
        b=VN3CbWL4W1KhRPgVIJC9M8oUuhWiIbdGPFkRbryNyh0GJV8oHzXbtgYIK0UPXda0/j
         iUlsgRxznpfNK/3xU2pcCHWqQVwXt5o2tRAm6XUbPM3j0OkUFoqEiCtWt3WUG2mFeGJM
         vxYDShw92VtPYPgseU5cJiUo8KY6EQTnEj5hEnYW3+GDrvcrd2cCwv/ieuiQC22WLNPv
         PcooqdRvw8DUf/BoShLJTDRXeE7jUy1F0eHvaDFaOM8owsnU7VviuO7Sa4pi5if+GuJN
         eiKTJMxUvkKh0ObDPwpyxUH3Z1/gIwOCUkE4oBLr/xI3S6v6QT4LpuI8bRyB6lxpnyG5
         EcSA==
X-Gm-Message-State: AA+aEWaSbWG5WcEkOK1nC+Mcy7ciAqI+syScBtfH86yfmCh0C6QURe2k
        CMCvm48OXuPHKXGP7gjpt6qj0Q==
X-Google-Smtp-Source: AFSGD/VnPa7Ilyi4kELEkXmfJKFhQuKG28lsBk2a1kq2ePcVpNkxNhrwRr5S56tE2s4SiysKSVkyTg==
X-Received: by 2002:a62:da5a:: with SMTP id w26mr3026717pfl.106.1544796989893;
        Fri, 14 Dec 2018 06:16:29 -0800 (PST)
Received: from n3-021-216.byted.org ([122.14.241.109])
        by smtp.gmail.com with ESMTPSA id d6sm6199939pgc.89.2018.12.14.06.16.25
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Fri, 14 Dec 2018 06:16:29 -0800 (PST)
From: Xiaozhou Liu <liuxiaozhou@bytedance.com>
To: Miguel Ojeda <miguel.ojeda.sandonis@gmail.com>
Cc: Linus Torvalds <torvalds@linux-foundation.org>,
        Xiaozhou Liu <liuxiaozhou@bytedance.com>,
        "ndesaulniers@google.com" <ndesaulniers@google.com>,
        Luc Van Oostenryck <luc.vanoostenryck@gmail.com>,
        Masahiro Yamada <yamada.masahiro@socionext.com>,
        Paul Burton <paul.burton@mips.com>,
        Kees Cook <keescook@chromium.org>,
        Arnd Bergmann <arnd@arndb.de>, linux-kernel@vger.kernel.org
Subject: [PATCH v3] Compiler Attributes: don't pollute userspace with macro definitions
Date: Fri, 14 Dec 2018 22:14:31 +0800
Message-Id: <20181214141433.466991-1-liuxiaozhou@bytedance.com>
X-Mailer: git-send-email 2.11.0
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Macros 'inline' and '__gnu_inline' used to be defined in compiler-gcc.h,
which was (and is) included entirely in (__KERNEL__ && !__ASSEMBLY__).
Commit 815f0ddb346c ("include/linux/compiler*.h: make compiler-*.h mutually
exclusive") had those macros exposed to userspace, unintentionally.

Then commit a3f8a30f3f00 ("Compiler Attributes: use feature checks
instead of version checks") moved '__gnu_inline' back into
(__KERNEL__ && !__ASSEMBLY__) and 'inline' was left behind. Since 'inline'
depends on '__gnu_inline', compiling error showing "unknown type name
‘__gnu_inline’" will pop up, if userspace somehow includes
<linux/compiler.h>.

Other macros like __must_check, notrace, etc. are in a similar situation.
So just move all these macros back into (__KERNEL__ && !__ASSEMBLY__).

Note:
  1. This patch only affects what userspace sees.
  2. __must_check (when !CONFIG_ENABLE_MUST_CHECK) and noinline_for_stack
     were once defined in __KERNEL__ only, but we believe that they can
     be put into !__ASSEMBLY__ too.

Acked-by: Nick Desaulniers <ndesaulniers@google.com>
Signed-off-by: Xiaozhou Liu <liuxiaozhou@bytedance.com>
---

v3: move macros into !__ASSEMBLY__ too. (Miguel Ojeda)
v2: update commit message.

 include/linux/compiler_types.h | 108 ++++++++++++++++++++---------------------
 1 file changed, 54 insertions(+), 54 deletions(-)

diff --git a/include/linux/compiler_types.h b/include/linux/compiler_types.h
index 4a3f9c09c92d..ba814f18cb4c 100644
--- a/include/linux/compiler_types.h
+++ b/include/linux/compiler_types.h
@@ -104,6 +104,60 @@ struct ftrace_likely_data {
 	unsigned long			constant;
 };
 
+#ifdef CONFIG_ENABLE_MUST_CHECK
+#define __must_check		__attribute__((__warn_unused_result__))
+#else
+#define __must_check
+#endif
+
+#if defined(CC_USING_HOTPATCH)
+#define notrace			__attribute__((hotpatch(0, 0)))
+#else
+#define notrace			__attribute__((__no_instrument_function__))
+#endif
+
+/*
+ * it doesn't make sense on ARM (currently the only user of __naked)
+ * to trace naked functions because then mcount is called without
+ * stack and frame pointer being set up and there is no chance to
+ * restore the lr register to the value before mcount was called.
+ */
+#define __naked			__attribute__((__naked__)) notrace
+
+#define __compiler_offsetof(a, b)	__builtin_offsetof(a, b)
+
+/*
+ * Force always-inline if the user requests it so via the .config.
+ * GCC does not warn about unused static inline functions for
+ * -Wunused-function.  This turns out to avoid the need for complex #ifdef
+ * directives.  Suppress the warning in clang as well by using "unused"
+ * function attribute, which is redundant but not harmful for gcc.
+ * Prefer gnu_inline, so that extern inline functions do not emit an
+ * externally visible function. This makes extern inline behave as per gnu89
+ * semantics rather than c99. This prevents multiple symbol definition errors
+ * of extern inline functions at link time.
+ * A lot of inline functions can cause havoc with function tracing.
+ * Do not use __always_inline here, since currently it expands to inline again
+ * (which would break users of __always_inline).
+ */
+#if !defined(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || \
+	!defined(CONFIG_OPTIMIZE_INLINING)
+#define inline inline __attribute__((__always_inline__)) __gnu_inline \
+	__maybe_unused notrace
+#else
+#define inline inline                                    __gnu_inline \
+	__maybe_unused notrace
+#endif
+
+#define __inline__ inline
+#define __inline   inline
+
+/*
+ * Rather then using noinline to prevent stack consumption, use
+ * noinline_for_stack instead.  For documentation reasons.
+ */
+#define noinline_for_stack noinline
+
 #endif /* __KERNEL__ */
 
 #endif /* __ASSEMBLY__ */
@@ -161,58 +215,4 @@ struct ftrace_likely_data {
 #define __diag_error(compiler, version, option, comment) \
 	__diag_ ## compiler(version, error, option)
 
-#ifdef CONFIG_ENABLE_MUST_CHECK
-#define __must_check		__attribute__((__warn_unused_result__))
-#else
-#define __must_check
-#endif
-
-#if defined(CC_USING_HOTPATCH)
-#define notrace			__attribute__((hotpatch(0, 0)))
-#else
-#define notrace			__attribute__((__no_instrument_function__))
-#endif
-
-/*
- * it doesn't make sense on ARM (currently the only user of __naked)
- * to trace naked functions because then mcount is called without
- * stack and frame pointer being set up and there is no chance to
- * restore the lr register to the value before mcount was called.
- */
-#define __naked			__attribute__((__naked__)) notrace
-
-#define __compiler_offsetof(a, b)	__builtin_offsetof(a, b)
-
-/*
- * Force always-inline if the user requests it so via the .config.
- * GCC does not warn about unused static inline functions for
- * -Wunused-function.  This turns out to avoid the need for complex #ifdef
- * directives.  Suppress the warning in clang as well by using "unused"
- * function attribute, which is redundant but not harmful for gcc.
- * Prefer gnu_inline, so that extern inline functions do not emit an
- * externally visible function. This makes extern inline behave as per gnu89
- * semantics rather than c99. This prevents multiple symbol definition errors
- * of extern inline functions at link time.
- * A lot of inline functions can cause havoc with function tracing.
- * Do not use __always_inline here, since currently it expands to inline again
- * (which would break users of __always_inline).
- */
-#if !defined(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || \
-	!defined(CONFIG_OPTIMIZE_INLINING)
-#define inline inline __attribute__((__always_inline__)) __gnu_inline \
-	__maybe_unused notrace
-#else
-#define inline inline                                    __gnu_inline \
-	__maybe_unused notrace
-#endif
-
-#define __inline__ inline
-#define __inline   inline
-
-/*
- * Rather then using noinline to prevent stack consumption, use
- * noinline_for_stack instead.  For documentation reasons.
- */
-#define noinline_for_stack noinline
-
 #endif /* __LINUX_COMPILER_TYPES_H */
-- 
2.11.0

