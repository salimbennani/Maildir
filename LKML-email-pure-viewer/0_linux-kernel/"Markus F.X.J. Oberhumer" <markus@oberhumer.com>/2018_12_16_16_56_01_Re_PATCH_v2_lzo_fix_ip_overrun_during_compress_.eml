Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  17 Dec 2018 08:32:04 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id B49E95805CF;
	Sun, 16 Dec 2018 08:56:12 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by fmsmga006-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 16 Dec 2018 08:56:12 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A8rrvTBFCOOKaGObasBHw251GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75oc2/bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJSiJPHI28?=
 =?us-ascii?q?YYsID+QCM+hXoYbyqFkSohWxHgmsHOHixyRUhnL0x6I2z/gtHA/E0QEmAtkAsG?=
 =?us-ascii?q?7UrNLwNKoKX+y7y7PHzS/Ab/NLwjf29YjGfgogrv2WWbx8a9fax1A0GAzblFWQ?=
 =?us-ascii?q?qZHlPzaL2eQXvWSQ8u1tVee1hG49qAFxvyOvy9wriobSmI0V0FDE9Th8wIkrP9?=
 =?us-ascii?q?20UlJ0YdmhEJZJsSyRKoV4QsQnQ25yuSY6zKULuZmgcycU0pQnxwPfa/mZfIiS?=
 =?us-ascii?q?+B7sSOGRITJ+iXl4e7y/nw6//Va8xuD4TMW4zVhHojRfntXRtX0Bywbf58mFR/?=
 =?us-ascii?q?dl/UqtxCyD2x3P5u1eP0w4i6nWJ4Q8zrIulZcet1nIEDXsl0XslqCWc10p+ui2?=
 =?us-ascii?q?5OTjZbXrvoGcN4BqhQHkKKgumdKwAf4+MgcQW2iX4+O81Kfs/UHhQbVKiOM5kr?=
 =?us-ascii?q?XBvZzEOcgWorS1DxJb34o98RqzEjSr3MgCkXQGLl9JYBeHgJLoO1HKLvD4F/C/?=
 =?us-ascii?q?g1G0nTdvxvDGOKDhA5rUInjAjrjhZ7B95FBYyAYqytBe6ZRUBa8bIP/oRE/xu8?=
 =?us-ascii?q?LXDgUjPwy33ennEtN92Z0aWW6VBa+ZKqzSvUeS5u0zO+mMeJMVuDHlJvgh5v7u?=
 =?us-ascii?q?jmE2lUUSfKm0xpYXbHG4HvJ7I0SWe3bsg9EBEXsUsQo6VuDllFqCUTtLbXaoQ6?=
 =?us-ascii?q?08/i07CJ6hDYrbRoCimr2B3DuhEZ1RfGxGCk2MHm3ud4WLQPoMbCOSIsl8kj0L?=
 =?us-ascii?q?T7ShSokh1Q2wuw/+0bZoMu3U+igAv5L5yNd1//HTlQ019TFsDcSd1H+CQ3t3nm?=
 =?us-ascii?q?MPQT822qd/rFd5yleC16h4nvNZGcZS5/NPTgc1K5rcw/ZmBND1XwLLZs2JR0q+?=
 =?us-ascii?q?QtW6HTExSco8zMUVY0Z9HNWijQrP3zCwDL8XjLGLAJ008qTB33n+Pcp9ynDG1L?=
 =?us-ascii?q?U/gFkiWMdAKWqmhqtn/QjJG4HJi1mZl7qtdakE3y7C7mGDwXCKvEFZSgFwV6rF?=
 =?us-ascii?q?UGsbZkvXq9T5+0zDQ6WvCbQhLgtO18qCJrFWZd3uiFVMXO3jN8jGY2Kth2ewAg?=
 =?us-ascii?q?6Fya6WY4r0ZWoRxiXdB1ICkwAI43mGMw8yBiOio2LbCDxjDlbvY0Lq8eljp3K3?=
 =?us-ascii?q?VE40zweWb0J/07q54AIahfuZS/kLxLILpD8hqyloHFa6x9/ZFsCPpxR/c6lGYd?=
 =?us-ascii?q?My+lFH1XnHuAx7JZGgK6FihlgDcwV4pU/u1hN3Cplensgutn8l0A1yKaeA2lNb?=
 =?us-ascii?q?azyYxYzwOqHQKmTq4BCvaqvW2lbC0NaW+qYD8ug4p0/kvAGzEkoi8nNn09ZO3n?=
 =?us-ascii?q?uY55XKChcSUJ3rXkY28Rh6u6/VYi0n64zI0n1sNLG+siXe1NIxGOsl1hGgcs9F?=
 =?us-ascii?q?P6OACgDzHNMVBsi0JOMxhlimcwgLPOZR9K4zIcOrbP+G2K+tPOZ9kzOql2VH4I?=
 =?us-ascii?q?Zh0k2S8ypwUPLH35EAw/uAxAuISy/8jEu9ssDwgY1FZSwSEnCjxiT+BY9RZrd9?=
 =?us-ascii?q?fYAECWq1J823x9N+h4PiWnJC9V6jAU8G19GteRaIc1P92ghQ31wNoXO7gSu40y?=
 =?us-ascii?q?B0kzYxo6qF3SzB3/7tdAAaNW5MXmVii0njIZK1j9wDQEendQwpmwa76kbgwKhb?=
 =?us-ascii?q?or9yL23SQUdOYij3IHtuUqq2trqefcFP7IkkvjlQUOS5eVqaUKLyowMG0yP/GG?=
 =?us-ascii?q?tT3DA6dzCwtpT5hRB6k3+dLHBooXrdeMFwwwrf5dPGSf5Q2DoGWDd3iT3NCleg?=
 =?us-ascii?q?ONmp+M2el43fveCmS2KhSppTfDHpzYyariu75m5qARqlk/CogNLnEgs60S7919?=
 =?us-ascii?q?Z0UyXFtxL8Yojt16SnPuNrZEhoBFng68VkHoFyiJc/hJYV2XICnJWa4WIHkXvv?=
 =?us-ascii?q?MdVcwa//bGACRTkRz97X4Qjl3lZuLnaIx4L/S3WczdFtZ9i8YmMKxC0969pGB7?=
 =?us-ascii?q?uT7LxBhSF1uEa3rRrNYfhhmTcQ0fgu52Qbg+0TuAot0z+SArYdHURDOSzslhKI?=
 =?us-ascii?q?782xralNZWavd6Sw21R6ndy7EL6CpQRcUm7jepg+BS9w8tl/MFXU3X3264Hke8?=
 =?us-ascii?q?PfYcgdtxKKiBfAk/ZaKIgqmfUUnypnNnnwvXkky+49kBxv0ou2vImBK2Vx4q25?=
 =?us-ascii?q?BgRUOSHyZ8MW4jvtl7pRnt6K34CzGZVsAikLXJztTf6yETMdr/LnNxuVED0nq3?=
 =?us-ascii?q?eWAr7fHQ6Z6Ed7oHPDCZGrN3eLJHYHydVuXgWSJEtagAoMRjU1goY5Fhy2xMzm?=
 =?us-ascii?q?aEp2/Soe5ln8qhtR0O5oMwT/X3zbpAepbDc0VZeeIABX7gFE+0faL8ie4vhvEC?=
 =?us-ascii?q?Ff+52rtBaNJXCDZwRUEWEJXVSJB1L5Mbmr+9bA6PKUBvakI/vNfLWOqvFeV/GS?=
 =?us-ascii?q?ypK0yYZm+zeMNsOSPnhtFfE720xDXWxnFMTdgTkAVysXlyfVZc6BuBi84jF3rt?=
 =?us-ascii?q?y48PnzWAPv4paPC6JPMdp1/RC6m7yDN+mWhCZ2MjtY0pIMxXnVyLkQxlISiidu?=
 =?us-ascii?q?dyWzHrQEryLCUKXQmqpPBR4BdyxzLNdI77473gRVOc7UlNL11r17jv40EVtFVk?=
 =?us-ascii?q?bhmsamZcMUOWG9KUjHCV2PNLSHIz3L3s72bbm9Sb1WkOVbqRmwtSyHHE/kOzSJ?=
 =?us-ascii?q?jyPpWAy3MeFQkCGbOwRTt5ugchl2E2jsUtLnZge/MN92ljA2xbw0hnXXNW8TKz?=
 =?us-ascii?q?R8ckVNrqGO4iNcmPlwB2tB7n99J+mehymZ9/XYKooRsfZzHiR0luda7G4mxLdP?=
 =?us-ascii?q?8C5EROJ6mC3Jo95qolGmlPSPyzV9XBpPrDZLmJyEvUF4NarF8ZlAXG7O/AgR4m?=
 =?us-ascii?q?WIFxQKu9xlB8Xvuq9KzNjPkaPzKDFa/NPV/csTHc7UKM2cPXolMBrpHiPUDQQf?=
 =?us-ascii?q?QT6qM2Hfm1JSkPWI+nKJqZg6r8ukpJ1babJWTxQeEfQZQhBmEdEZK5BwXRsvka?=
 =?us-ascii?q?Scic8V4Dy5thaHAI1Av5vHX+ieSbD1N3PRkrRFYREF27z1N8xHLIzw20V4Zh9l?=
 =?us-ascii?q?kYXMEUfKUt1XiiJkZw4w5k5K9S46Bmkyyl/oewKF5H4NGLi/mRtlpBF5ZLFn0T?=
 =?us-ascii?q?724EosbnSMlG0S1gEWk9j/gS2UfSS7ZPO1VJtVFjHcsEI8KJPmRgtvKwa1mBo3?=
 =?us-ascii?q?Z3//W7tNgu44JihQgwjGtM4KQKYEQA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AOAAC0ghZch0O0hNFbCBwBAQEEAQEHB?=
 =?us-ascii?q?AEBgVEHAQELAYJpA38ng3yIGY4DFIkBjkOBcywHDAGHRyI0CQ0BAwEBAQEBAQI?=
 =?us-ascii?q?BEwEBAQoLCQgpIwyCNiQBgmIBAgMBAiAdAQE2AQEFCQEBCgcRAgIFFgsCAgMGA?=
 =?us-ascii?q?wIBAgEPNgYBDAYCAQEBgx0BgWgDFQQBo3pwgSEOgnYBAQWCQ4I0DYIUCIELizM?=
 =?us-ascii?q?RBoF/gRGDEoJXggWDLYJXiXCBSIQWSJA0Ii8HAgKOKINIgV2FHIMLh06JPIYIi?=
 =?us-ascii?q?0Yggg5wFYMnCYISDBeDSopUPwExgQUBAY1qAQE?=
X-IPAS-Result: =?us-ascii?q?A0AOAAC0ghZch0O0hNFbCBwBAQEEAQEHBAEBgVEHAQELAYJ?=
 =?us-ascii?q?pA38ng3yIGY4DFIkBjkOBcywHDAGHRyI0CQ0BAwEBAQEBAQIBEwEBAQoLCQgpI?=
 =?us-ascii?q?wyCNiQBgmIBAgMBAiAdAQE2AQEFCQEBCgcRAgIFFgsCAgMGAwIBAgEPNgYBDAY?=
 =?us-ascii?q?CAQEBgx0BgWgDFQQBo3pwgSEOgnYBAQWCQ4I0DYIUCIELizMRBoF/gRGDEoJXg?=
 =?us-ascii?q?gWDLYJXiXCBSIQWSJA0Ii8HAgKOKINIgV2FHIMLh06JPIYIi0Yggg5wFYMnCYI?=
 =?us-ascii?q?SDBeDSopUPwExgQUBAY1qAQE?=
X-IronPort-AV: E=Sophos;i="5.56,361,1539673200"; 
   d="scan'208";a="142334374"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 16 Dec 2018 08:56:09 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730708AbeLPQ4I (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sun, 16 Dec 2018 11:56:08 -0500
Received: from mail.servus.at ([193.170.194.20]:35104 "EHLO mail.servus.at"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1730496AbeLPQ4H (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Sun, 16 Dec 2018 11:56:07 -0500
Received: from localhost (localhost [127.0.0.1])
        by mail.servus.at (Postfix) with ESMTP id 317BF3000693;
        Sun, 16 Dec 2018 17:56:05 +0100 (CET)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=oberhumer.com; h=
        content-transfer-encoding:content-type:content-type:in-reply-to
        :mime-version:user-agent:date:date:message-id:organization:from
        :from:references:subject:subject:received:received; s=main; t=
        1544979362; x=1546793763; bh=3Pyvics3o3VhhTjjHSU/4QOpNhTjCJH6oFL
        h4o3O8II=; b=Un1Mu1IsIFowgjKg3+kyzqqk0E9sFhhzGKOPvVGG3JM3tyD/RLv
        6wsmgKVlXXwiGg7fn7VXjprc2kyLLjgdO0OjtZwMKYkt5nhO4tFxU3VhvHaOqh0z
        H8d72KYZFm39KDpAF3+x6ktrXL5tp/0IN7ZFIkJtq5ACUL2mnGOisYO0=
X-Virus-Scanned: amavisd-new at servus.at
Received: from mail.servus.at ([127.0.0.1])
        by localhost (mail.servus.at [127.0.0.1]) (amavisd-new, port 10024)
        with ESMTP id 63IB2ePR_oTp; Sun, 16 Dec 2018 17:56:02 +0100 (CET)
Received: from [192.168.216.53] (unknown [81.10.228.128])
        (Authenticated sender: oh_markus)
        by mail.servus.at (Postfix) with ESMTPSA id 669E73000690;
        Sun, 16 Dec 2018 17:56:01 +0100 (CET)
Subject: Re: [PATCH v2] lzo: fix ip overrun during compress.
To: Kees Cook <keescook@chromium.org>,
        richard -rw- weinberger <richard.weinberger@gmail.com>,
        liyueyi@live.com
References: <BLUPR13MB0289EFEB79833470EE62F48EDFD10@BLUPR13MB0289.namprd13.prod.outlook.com>
 <20181128135242.gy3avmbp2pdmjaka@twin.jikos.cz>
 <5C0654EE.5040001@oberhumer.com>
 <SN1PR13MB030484F09EE8A00DB094CDFADFA80@SN1PR13MB0304.namprd13.prod.outlook.com>
 <5C093A30.4020705@oberhumer.com>
 <BLUPR13MB0289EC81589A10E95912675FDFA70@BLUPR13MB0289.namprd13.prod.outlook.com>
 <5C110083.8060502@oberhumer.com>
 <CAFLxGvzj=P2FY6w7CBYztsUjJ5Td53zCzGa_FUjrfxA94cmSgA@mail.gmail.com>
 <CAGXu5jLR06ti_xhC8OODbF8m+Tsf6a0ebJLBe8KLcC+csG_i=w@mail.gmail.com>
Cc: dsterba@suse.cz, Greg KH <gregkh@linuxfoundation.org>,
        Willy Tarreau <w@1wt.eu>, Don Bailey <donb@securitymouse.com>,
        Jiri Kosina <jikos@kernel.org>,
        LKML <linux-kernel@vger.kernel.org>
From: "Markus F.X.J. Oberhumer" <markus@oberhumer.com>
Organization: oberhumer.com
Message-ID: <5C1683A1.5090803@oberhumer.com>
Date: Sun, 16 Dec 2018 17:56:01 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:38.0) Gecko/20100101
 Thunderbird/38.3.0
MIME-Version: 1.0
In-Reply-To: <CAGXu5jLR06ti_xhC8OODbF8m+Tsf6a0ebJLBe8KLcC+csG_i=w@mail.gmail.com>
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Yueyi,

if ASLR does indeed exclude the last page (like it should), how do
you get the invalid (0xfffffffffffff000, 4096) mapping then?

~Markus


On 2018-12-14 17:46, Kees Cook wrote:
> On Fri, Dec 14, 2018 at 5:56 AM Richard Weinberger
> <richard.weinberger@gmail.com> wrote:
>>
>> [CC'ing Kees]
>>
>> On Wed, Dec 12, 2018 at 1:37 PM Markus F.X.J. Oberhumer
>> <markus@oberhumer.com> wrote:
>>>
>>> I still claim that (0xfffffffffffff000, 4096) is not a valid C "pointer
>>> to an object" according to the C standard - please see my reply below.
>>>
>>> And I thought ASLR was introduced to improve security and not to create
>>> new security problems - someone from the ASLR team has to comment on this.
>>>
>>> Cheers,
>>> Markus
>>>
>>>
>>> On 2018-12-12 06:21, Yueyi Li wrote:
>>>> Hi Markus,
>>>>
>>>> OK, thanks. I`ll change it in v3.
>>>>
>>>> Thanks,
>>>> Yueyi
>>>>
>>>> On 2018/12/6 23:03, Markus F.X.J. Oberhumer wrote:
>>>>> Hi Yueyi,
>>>>>
>>>>> yes, my LZO patch works for all cases.
>>>>>
>>>>> The reason behind the issue in the first place is that if KASLR
>>>>> includes the very last page 0xfffffffffffff000 then we do not have a
>>>>> valid C "pointer to an object" anymore because of address wraparound.
>>>>>
>>>>> Unrelated to my patch I'd argue that KASLR should *NOT* include the
>>>>> very last page - indeed that might cause similar wraparound problems
>>>>> in lots of code.
>>>>>
>>>>> Eg, look at this simple clear_memory() implementation:
>>>>>
>>>>> void clear_memory(char *p, size_t len) {
>>>>>          char *end = p + len;
>>>>>          while (p < end)
>>>>>                  *p++= 0;
>>>>> }
>>>>>
>>>>> Valid code like this will fail horribly when (p, len) is the very
>>>>> last virtual page (because end will be the NULL pointer in this case).
>>>>>
>>>>> Cheers,
>>>>> Markus
>>>>>
>>>>>
>>>>>
>>>>> On 2018-12-05 04:07, Yueyi Li wrote:
>>>>>> Hi Markus,
>>>>>>
>>>>>> Thanks for your review.
>>>>>>
>>>>>> On 2018/12/4 18:20, Markus F.X.J. Oberhumer wrote:
>>>>>>> Hi,
>>>>>>>
>>>>>>> I don't think that address space wraparound is legal in C, but I
>>>>>>> understand that we are in kernel land and if you really want to
>>>>>>> compress the last virtual page 0xfffffffffffff000 the following
>>>>>>> small patch should fix that dubious case.
>>>>>> I guess the VA 0xfffffffffffff000 is available because KASLR be
>>>>>> enabled. For this case we can see:
> 
> This is a weird case: I would expect the top 4k to be unmapped to
> leave room of ERR_PTR, etc.
> 
>>>>>>
>>>>>> crash> kmem 0xfffffffffffff000
>>>>>>         PAGE               PHYSICAL      MAPPING       INDEX CNT FLAGS
>>>>>> ffffffbfffffffc0        1fffff000 ffffffff1655ecb9  7181fd5  2
>>>>>> 8000000000064209 locked,uptodate,owner_priv_1,writeback,reclaim,swapbacked
>>>>>>
>>>>>>> This also avoids slowing down the the hot path of the compression
>>>>>>> core function.
>>>>>>>
>>>>>>> Cheers,
>>>>>>> Markus
>>>>>>>
>>>>>>>
>>>>>>>
>>>>>>> diff --git a/lib/lzo/lzo1x_compress.c b/lib/lzo/lzo1x_compress.c
>>>>>>> index 236eb21167b5..959dec45f6fe 100644
>>>>>>> --- a/lib/lzo/lzo1x_compress.c
>>>>>>> +++ b/lib/lzo/lzo1x_compress.c
>>>>>>> @@ -224,8 +224,8 @@ int lzo1x_1_compress(const unsigned char *in, size_t in_len,
>>>>>>>
>>>>>>>           while (l > 20) {
>>>>>>>                   size_t ll = l <= (M4_MAX_OFFSET + 1) ? l : (M4_MAX_OFFSET + 1);
>>>>>>> -               uintptr_t ll_end = (uintptr_t) ip + ll;
>>>>>>> -               if ((ll_end + ((t + ll) >> 5)) <= ll_end)
>>>>>>> +               // check for address space wraparound
>>>>>>> +               if (((uintptr_t) ip + ll + ((t + ll) >> 5)) <= (uintptr_t) ip)
>>>>>>>                           break;
> 
> Please just use the standard add overflow checks from the kernel. See
> include/linux/overflow.h
> 
> Specifically, check_add_overflow(operand1, operand2, &result). I
> assume something like:
> 
> if (check_add_overflow(ip, ll, &ll_end))
>    freak_out();
> 
> ?
> 
>>>>>>>                   BUILD_BUG_ON(D_SIZE * sizeof(lzo_dict_t) > LZO1X_1_MEM_COMPRESS);
>>>>>>>                   memset(wrkmem, 0, D_SIZE * sizeof(lzo_dict_t));
>>>>>> I parsed panic ramdump and loaded CPU register values,  can see:
>>>>>>
>>>>>> -000|lzo1x_1_do_compress(
>>>>>>       |    in = 0xFFFFFFFFFFFFF000,
>>>>>>       |  ?,
>>>>>>       |    out = 0xFFFFFFFF2E2EE000,
>>>>>>       |    out_len = 0xFFFFFF801CAA3510,
>>>>>>       |  ?,
>>>>>>       |    wrkmem = 0xFFFFFFFF4EBC0000)
>>>>>>       |  dict = 0xFFFFFFFF4EBC0000
>>>>>>       |  op = 0x1
>>>>>>       |  ip = 0x9
>>>>>>       |  ii = 0x9
>>>>>>       |  in_end = 0x0
>>>>>>       |  ip_end = 0xFFFFFFFFFFFFFFEC
>>>>>>       |  m_len = 0
>>>>>>       |  m_off = 1922
>>>>>> -001|lzo1x_1_compress(
>>>>>>       |    in = 0xFFFFFFFFFFFFF000,
>>>>>>       |    in_len = 0,
>>>>>>       |    out = 0xFFFFFFFF2E2EE000,
>>>>>>       |    out_len = 0x00000001616FB7D0,
>>>>>>       |    wrkmem = 0xFFFFFFFF4EBC0000)
>>>>>>       |  ip = 0xFFFFFFFFFFFFF000
>>>>>>       |  op = 0xFFFFFFFF2E2EE000
>>>>>>       |  l = 4096
>>>>>>       |  t = 0
>>>>>>       |  ll = 4096
>>>>>>
>>>>>> ll = l = in_len = 4096 in lzo1x_1_compress,  so your patch is working
>>>>>> for this panic case, but, I`m
>>>>>> not sure, is it possible that in = 0xFFFFFFFFFFFFF000 and  in_len < 4096?
>>>>>>
>>>>>>
>>>>>> Thanks,
>>>>>> Yueyi
>>>>>>
>>>>
>>>>
>>>
>>> --
>>> Markus Oberhumer, <markus@oberhumer.com>, http://www.oberhumer.com/
>>
>>
>>
>> --
>> Thanks,
>> //richard
> 
> 
> 

-- 
Markus Oberhumer, <markus@oberhumer.com>, http://www.oberhumer.com/
