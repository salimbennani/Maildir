Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:44:35 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 89CA75805F0;
	Thu, 20 Dec 2018 17:42:01 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 20 Dec 2018 17:42:00 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Al2j93Rb4fB0uG1hnD3BEhl7/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpc+4Yh7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v6bpgRh31hy?=
 =?us-ascii?q?cdLzM38H/ZhNF+gqxYrx2vqAd/w5bWbYyOKPZzfbnQcc8GSWZdQspcUTFKDIOm?=
 =?us-ascii?q?b4sICuoMJeNWoJP8p1sUsBu+BBSnCv7oyj9OiX/9wKo30+c7HgHd2wwgGd0OvW?=
 =?us-ascii?q?/OrNrrKagSUfq6zLXSwTrfaPNW3C7w5Y7VeR4iufGBRax8fdbVxEU1Cg/IgEuc?=
 =?us-ascii?q?pZb4Mz6WyugBqWmW4uh4We6xl2Iqrxt9riWhy8sykIXFm4EYx17e+Slnw4s4I8?=
 =?us-ascii?q?CzRlRhbt6+CpRQsjmXN4toTcMmRGFloDg6yrIYtp6hZiQKy4ooxwTZa/OZd4iE?=
 =?us-ascii?q?+BXjVPyeITtghXJlfqywhwqq/ES+1uHxUtO43EtEoyZbiNXAq3MA2wDJ5sWGSP?=
 =?us-ascii?q?Zx5kKh1iyO1wDX5OFEO0c0la/DJp4lw74wkIcTsEvaEi/1hkr2lqmWeVsg+uSx?=
 =?us-ascii?q?7OTmbLPmqYGGN4JvlAH+PbohmtalDeQ7LAcORW6b9vq41LH5+k35WrpKguUskq?=
 =?us-ascii?q?bFqJDaOdgbpqmhDg9R04Yj6AiwAy2p0dQFhnQHKFNFeBSaj4nmIV3OIfb4Deuh?=
 =?us-ascii?q?jFSoijtk2/fGPrj5CJXXMnfDiKvhfap660NEyAo819Ff545OBbEGOv7zWlLxu8?=
 =?us-ascii?q?beDh82KAG0x+fnCNNg1oIRQ26PA6mZML/Mvl+M/O4gP+6MZIoNsjbnN/cl/+Lu?=
 =?us-ascii?q?jWM+mVIFZ6apxpsXaHe7Hvh8OUWWe3jsj8wFEWcLuAo+UePrhEeDUT5Ve3a9Qa?=
 =?us-ascii?q?Y86isnB4KhCIfJXpqtj6CZ3CenAp1WYXhLClOWHnfubYmEX/YMZziUIs9uiTEE?=
 =?us-ascii?q?UbmhS4k81RChrgP6yrxnLvbK9S0cr57syN915+jLnxEo6TN0F9id032KT2xsg2?=
 =?us-ascii?q?wHXSE2075lrUx90FiD17N4jOJeFdBU4/NJUQI6NZrHwux+CtDyXB/Bf9iTRFan?=
 =?us-ascii?q?RNWmHS8+TtYrz9ASZEZ9Hs2ojgrf0CqyH78Vi7uLCYQp/a3GwXj+Odxxy3bc26?=
 =?us-ascii?q?knlFkpXM1POHaihq5+8QjTGoHIn1+Yl6asaaQTwirN+H2fwmqJuUFSSBRwXrnd?=
 =?us-ascii?q?XXADekvWqsz05l/DT7+rDrQnLgtByM6YJqtWcNHpik9GRPPiONTYbGK8gGOwBR?=
 =?us-ascii?q?eOxrORY4vmYWQd3CPBCEcalwAf52qJNQ87Bi25uWLRECRuFU7zY0Pr6eRxsne7?=
 =?us-ascii?q?QVE7zg6Ub0xtzaG6+gMIivOGTfMT3bUEuDk6pjVwHVa92c/WCtWaqwpgeqVcfc?=
 =?us-ascii?q?0y4FNd2W3FsAx9O4SqL7p+iV4GbwR3o0Tu2g13C4Vdi8QlsGkmzQtyKa2C1lNB?=
 =?us-ascii?q?eCiV3ZTxOr3RN2nz8wqja6/Q2lHCztmW/r0D5+g/q1XmpAupDFYt821709lJ1H?=
 =?us-ascii?q?uR/o/KDAsOXp3rSEY46h96q6vcYiYj/YPU1GRgPrWuvT/Gxt0mGvElyhGmf9pE?=
 =?us-ascii?q?NKOEFQnyE9AVBsS0KewqnUSpYQwAPOxI6KE0OMamfeOc2KG3JOZggC6mjWNf7Y?=
 =?us-ascii?q?F900KA7Sp9RvTT35YYxfGVxQ+HVzb6jFe8vcH7g4FEZTcOHmWhzSjoHpJeZqp3?=
 =?us-ascii?q?fYwTE2ehP9W3xslih57qQ3NY9kSsB0kF2M+qfhqedUf90hdT1UQUoHynnzW3zz?=
 =?us-ascii?q?pvnjEtr6qf2jHOwuv4eBoGPG5LWHdtjVP2LYeoiNAaWVCibxI1mxu9+Ub6269b?=
 =?us-ascii?q?qbx/LmbJRkdEZSr2L2BkUqarsrqCYshP6I4nsClNUeS8Z0yaRaD5oxcAzyzjGG?=
 =?us-ascii?q?5ezighdz62opX5gwB6iGWFIXZwtnXZeNt8xRfC5NPGQ/5R0SELRC15iTnRG1i9?=
 =?us-ascii?q?MMOl/dSSl5ffrO++U3itWYFUcSnu1YmArje05XV2AR2jmPC+gtjnEQk50SDhzd?=
 =?us-ascii?q?VrWzvHrA3gYob1zaS1KvxoflNnBFLn78p6G4d+kpY/hZ0K2HgagImV8mQDkWvp?=
 =?us-ascii?q?Ldpb3qf+ZmIXRTEX297V/BTl2Ep7I3KVwIL5U2+Rw8p7aNm8f2MWwTk978FRBa?=
 =?us-ascii?q?eQ7bxEmzZ1o1WioQLQZ/h9gikSyf805HEGhOEJvRInzj+BDbAKAUlYISvsmgyT?=
 =?us-ascii?q?4N+kq6VXYHuvfaK01Epjht2hCLCCogdBWHf2YJsiHClw7tlhP1LIynH89obkeN?=
 =?us-ascii?q?zIZ9IJqhKUiwvAj/RSKJ8plPoFny9nNnzmvXE/1+43lx9u3Yy5vIiaLWVi5rm5?=
 =?us-ascii?q?DwVcNj30YcMT5z7sgbxfnsaQw4CgAJFhFi8XU5vvSPKiCCgSuuj/NwaSDD08rW?=
 =?us-ascii?q?+WGLrYHQ+C8UdmsmjAE5axO3GMI3kZy9piSQKZJExehgAUQTo7koQ4FgCs2Mzu?=
 =?us-ascii?q?bkN56ioN6V7/rxtG0vhoOAXnUmfDuAeobS85SJiBIxpX7QFC5EbVPdad7uJpGC?=
 =?us-ascii?q?FY8YOurBaQKmyAfAlICWAJWkqZB1HsJLWu5N/A8/SGCeq6NffBfbKOqelGXfeS?=
 =?us-ascii?q?2Z2vypdm/yqLNsiXJHZiEuY02lBdUnF5AcjZnzQPRjcTlyLMac6buRi99jd2rs?=
 =?us-ascii?q?C57PTkRgbv6ZGTBLtVNNVl4wq2jrubN+6MmCZ5Li5V1o8NxX/N0rQQwEQehD1u?=
 =?us-ascii?q?dzazF7QNrirNTKPWmq9KAB8XcSJzNM1U760i2glBI9LUitTw1rRglP46F09FVU?=
 =?us-ascii?q?D9msGufcELI3uyNFXCBEaKMrSJPTzKw8HtbqO6Rr1dl+FUtxy2uTaGHE7vJDWD?=
 =?us-ascii?q?lz/1Vx+xNeFAlj2UPBtbuNL1ThE4DWnlUcKjaRChNtJzpSM5zKdyhX7QM2MYdz?=
 =?us-ascii?q?9mfBBjtLqVuABRg+9iGiR66XxqZb2Hkj2e6ebwMJsasfJ3RC9zkrQJszwB17JJ?=
 =?us-ascii?q?4XQcF7ROkyzIo4s2rg=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BPAABORBxch0O0hNFkHgEGBwaBUQkLA?=
 =?us-ascii?q?QGDaieMdYscgiGXSYFzFRgTAYcuIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkvQgE?=
 =?us-ascii?q?OAQYBgV0igmwCJAsBRgYJAlADbQWDHYICBagVM4owjD8XgUA/gRGNcgKQWpBjC?=
 =?us-ascii?q?ZFZDBiBX4gZN4cumg2BRoIOMxoIGxU7gmyCJxeOKjIBATGBBQEBHHiGXoVuAQE?=
X-IPAS-Result: =?us-ascii?q?A0BPAABORBxch0O0hNFkHgEGBwaBUQkLAQGDaieMdYscgiG?=
 =?us-ascii?q?XSYFzFRgTAYcuIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkvQgEOAQYBgV0igmwCJ?=
 =?us-ascii?q?AsBRgYJAlADbQWDHYICBagVM4owjD8XgUA/gRGNcgKQWpBjCZFZDBiBX4gZN4c?=
 =?us-ascii?q?umg2BRoIOMxoIGxU7gmyCJxeOKjIBATGBBQEBHHiGXoVuAQE?=
X-IronPort-AV: E=Sophos;i="5.56,379,1539673200"; 
   d="scan'208";a="56796573"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 20 Dec 2018 17:41:59 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2388813AbeLUBiv (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Thu, 20 Dec 2018 20:38:51 -0500
Received: from mx1.redhat.com ([209.132.183.28]:33322 "EHLO mx1.redhat.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1730104AbeLUBiu (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 20 Dec 2018 20:38:50 -0500
Received: from smtp.corp.redhat.com (int-mx01.intmail.prod.int.phx2.redhat.com [10.5.11.11])
        (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
        (No client certificate requested)
        by mx1.redhat.com (Postfix) with ESMTPS id 000F034CB;
        Fri, 21 Dec 2018 01:38:49 +0000 (UTC)
Received: from kasong-desktop-nay-redhat-com.nay.redhat.com (unknown [10.66.128.41])
        by smtp.corp.redhat.com (Postfix) with ESMTP id CD4D1600C1;
        Fri, 21 Dec 2018 01:38:42 +0000 (UTC)
From: Kairui Song <kasong@redhat.com>
To: linux-kernel@vger.kernel.org
Cc: tglx@linutronix.de, bp@alien8.de, mingo@redhat.com, hpa@zytor.com,
        jbohac@suse.cz, adobriyan@gmail.com, akpm@linux-foundation.org,
        osandov@fb.com, bhsharma@redhat.com, kasong@redhat.com,
        bhe@redhat.com, dyoung@redhat.com
Subject: [PATCH 1/1] x86/gart/kcore: Exclude GART aperture from kcore
Date: Fri, 21 Dec 2018 09:38:12 +0800
Message-Id: <20181221013812.22790-1-kasong@redhat.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.11
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16 (mx1.redhat.com [10.5.110.29]); Fri, 21 Dec 2018 01:38:50 +0000 (UTC)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On machines where the GART aperture is mapped over physical RAM,
/proc/kcore contains the GART aperture range and reading it may lead
to kernel panic.

In 'commit 2a3e83c6f96c ("x86/gart: Exclude GART aperture from vmcore")',
a special workaround is applied for vmcore to let /proc/vmcore return
zeroes when attempting to read the aperture region, as vmcore and kcore
have the same issue, and after 'commit 707d4eefbdb3 ("Revert "[PATCH]
Insert GART region into resource map"")', userspace tools can't detect and
exclude GART region.

This patch applies the same workaround for kcore. Let /proc/kcore return
zeroes too when trying to read the aperture region to fix the issue that
reading GART region may raise unexpected exceptions.

This applies to both first and second kernels as GART may get
initialized in the first and second kernels.

To get the same workaround work for kcore, this patch implement a hook
infrastructure for kcore which is same as the hook infrastructure for
vmcore introduced in 'commit 997c136f518c ("fs/proc/vmcore.c: add hook
to read_from_oldmem() to check for non-ram pages")'', and reuses the
checking function gart_oldmem_pfn_is_ram introduced in
'commit 2a3e83c6f96c ("x86/gart: Exclude GART aperture from vmcore"),'
as the hook function, but rename to gart_mem_pfn_is_ram as now it's
for a more generic use.

Suggested-by: Baoquan He <bhe@redhat.com>
Signed-off-by: Kairui Song <kasong@redhat.com>
---
 arch/x86/kernel/aperture_64.c |  6 ++++--
 fs/proc/kcore.c               | 34 ++++++++++++++++++++++++++++++++++
 include/linux/kcore.h         |  3 +++
 3 files changed, 41 insertions(+), 2 deletions(-)

diff --git a/arch/x86/kernel/aperture_64.c b/arch/x86/kernel/aperture_64.c
index 2c4d5ece7456..e2e45ae63309 100644
--- a/arch/x86/kernel/aperture_64.c
+++ b/arch/x86/kernel/aperture_64.c
@@ -14,6 +14,7 @@
 #define pr_fmt(fmt) "AGP: " fmt
 
 #include <linux/kernel.h>
+#include <linux/kcore.h>
 #include <linux/types.h>
 #include <linux/init.h>
 #include <linux/memblock.h>
@@ -66,7 +67,7 @@ int fix_aperture __initdata = 1;
  */
 static unsigned long aperture_pfn_start, aperture_page_count;
 
-static int gart_oldmem_pfn_is_ram(unsigned long pfn)
+static int gart_mem_pfn_is_ram(unsigned long pfn)
 {
 	return likely((pfn < aperture_pfn_start) ||
 		      (pfn >= aperture_pfn_start + aperture_page_count));
@@ -76,7 +77,8 @@ static void exclude_from_vmcore(u64 aper_base, u32 aper_order)
 {
 	aperture_pfn_start = aper_base >> PAGE_SHIFT;
 	aperture_page_count = (32 * 1024 * 1024) << aper_order >> PAGE_SHIFT;
-	WARN_ON(register_oldmem_pfn_is_ram(&gart_oldmem_pfn_is_ram));
+	WARN_ON(register_oldmem_pfn_is_ram(&gart_mem_pfn_is_ram));
+	WARN_ON(register_mem_pfn_is_ram(&gart_mem_pfn_is_ram));
 }
 #else
 static void exclude_from_vmcore(u64 aper_base, u32 aper_order)
diff --git a/fs/proc/kcore.c b/fs/proc/kcore.c
index bbcc185062bb..24e13fcc31ea 100644
--- a/fs/proc/kcore.c
+++ b/fs/proc/kcore.c
@@ -54,6 +54,35 @@ static LIST_HEAD(kclist_head);
 static DECLARE_RWSEM(kclist_lock);
 static int kcore_need_update = 1;
 
+static int (*mem_pfn_is_ram)(unsigned long pfn);
+
+int register_mem_pfn_is_ram(int (*fn)(unsigned long pfn))
+{
+	if (mem_pfn_is_ram)
+		return -EBUSY;
+	mem_pfn_is_ram = fn;
+	return 0;
+}
+
+void unregister_mem_pfn_is_ram(void)
+{
+	mem_pfn_is_ram = NULL;
+	wmb();
+}
+
+static int pfn_is_ram(unsigned long pfn)
+{
+	int (*fn)(unsigned long pfn);
+	/* pfn is ram unless fn() checks pagetype */
+	int ret = 1;
+
+	fn = mem_pfn_is_ram;
+	if (fn)
+		ret = fn(pfn);
+
+	return ret;
+}
+
 /* This doesn't grab kclist_lock, so it should only be used at init time. */
 void __init kclist_add(struct kcore_list *new, void *addr, size_t size,
 		       int type)
@@ -465,6 +494,11 @@ read_kcore(struct file *file, char __user *buffer, size_t buflen, loff_t *fpos)
 				goto out;
 			}
 			m = NULL;	/* skip the list anchor */
+		} else if (!pfn_is_ram(__pa(start) >> PAGE_SHIFT)) {
+			if (clear_user(buffer, tsz)) {
+				ret = -EFAULT;
+				goto out;
+			}
 		} else if (m->type == KCORE_VMALLOC) {
 			vread(buf, (char *)start, tsz);
 			/* we have to zero-fill user buffer even if no read */
diff --git a/include/linux/kcore.h b/include/linux/kcore.h
index 8c3f8c14eeaa..6818156fe520 100644
--- a/include/linux/kcore.h
+++ b/include/linux/kcore.h
@@ -56,4 +56,7 @@ void kclist_add_remap(struct kcore_list *m, void *addr, void *vaddr, size_t sz)
 }
 #endif
 
+extern int register_mem_pfn_is_ram(int (*fn)(unsigned long pfn));
+extern void unregister_mem_pfn_is_ram(void);
+
 #endif /* _LINUX_KCORE_H */
-- 
2.19.1

