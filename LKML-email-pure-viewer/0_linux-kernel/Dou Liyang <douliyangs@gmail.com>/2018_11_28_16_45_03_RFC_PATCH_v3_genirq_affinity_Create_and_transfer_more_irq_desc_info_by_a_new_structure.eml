Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 29 Nov 2018 08:38:38 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 405EF5802E4;
	Wed, 28 Nov 2018 08:45:24 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga006-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 28 Nov 2018 08:45:24 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Agp/WLRfjo9bGuHNsblpvSAUBlGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc6+ZxSN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4qF2QxHqlS?=
 =?us-ascii?q?gHLSY0/mHJhMJtgqxVoxWvpwdnw4PWe4yZKOZyc7nBcd4AWWZNQsBcXDFBDIOm?=
 =?us-ascii?q?aIsPCvIMM+hfr4ngulAAqxq+BAm2C+PpxT9Dm3j70rA90+Q8FQHG3QwhEMgIsH?=
 =?us-ascii?q?Tbt9X4L6gSUeWvw6nJyTXPde9Z2TD46IXRdB0qvP+CXbV1ccXLyEkvERvIjlGT?=
 =?us-ascii?q?qYzgOzOZzOMNs3KU7+dmSOmhiHYnphlvrjSzwsogkJTFi4wLxlze6Cl0w5o5Kc?=
 =?us-ascii?q?e5RUN5edKoDYdcui6AO4doTM4vQHtktDs7x7Eao5K2fyYHxZI6zBDFcfOHaZKH?=
 =?us-ascii?q?4hf7WeaRPzh4gHVldaqhhxa970eg0PfwVsqq31ZQqCpKjN3MumoK1xzJ5ciLUv?=
 =?us-ascii?q?p9/kG/1jaTzw3f9P1ILEQumabGJZMt3KQ8mocQvEjfBCP7mUf7gLeTdko+++io?=
 =?us-ascii?q?7+rnYq/hpp+ZL4J0jgD+MqIzms2wGOg4MRYBX3Kd+eui0L3v5Er5QbtMjvIoiK?=
 =?us-ascii?q?nUq47aJcsFqa6jGQNV0Zgs6wy5Dzi41NQUh34HLEhKeB6flYjmJ0nOIOzkDfe4?=
 =?us-ascii?q?m1mslDZrx/PYMbH7DZTNM2POkLPgfbZ79k5dxxA/zdFZ55JIFL4BJOj/VVP2tN?=
 =?us-ascii?q?zdFhU5KRC7w/77CNVh0YMTQWKPDbWYMKPOq1CI4fgjI+mRZIAPvjb9JOMo5/rv?=
 =?us-ascii?q?jX8/hF8ccrOl3ZoRaHCkAPtmJ1+VbmbrgtcECW0KpBYxTPT2iF2eVj5ef3SyX6?=
 =?us-ascii?q?Ui6T0hC4KmCoHDRoaqgLGa2Ce7H5tWZn1JC1yWEHfocZmEVOkIaC6IPsBhlTkE?=
 =?us-ascii?q?X6C7S4A9zRGuqBP6y71/I+XO4S0YtZXj1Ntv6+3Jjx4y9yd5D8Cc02GLUmF1kX?=
 =?us-ascii?q?kERz4w3KBjv0N9zk2P3rR/g/xdDdZT/e9GUh8mNZ7AyOx3E9PyVRjHftuTTFam?=
 =?us-ascii?q?Q8+pATc+Tt8qx98OYkB9G8itjxzZ3iqqBaMVmKKPBJAu7q3c2H3xLd5ny3nazK?=
 =?us-ascii?q?khk0UmQsxXOGK7nKF/6RbcC5TJk0qDkaaqbroT3CjK+GeHzmqOuUVYXRV0UaXE?=
 =?us-ascii?q?W3Afe0TXoc745kPEU7+hF7AnPhFdxs6FL6tAcsfpgkleRPf/JNTeZHq8lHqqCh?=
 =?us-ascii?q?aW2LyAdorqdH8b3CXGFkcElRse/XKHNQg4GyegrHjSDD1oFVLzfUzs9fNyp2+8?=
 =?us-ascii?q?Tk8x1wuKdVFu16Kp+h4JgvyRU+8T3rMBuCcmtzV0HFa808jKC9aaoAphZqFcYd?=
 =?us-ascii?q?I74FdIzm/Zsw19Ppq9L6FtnFIecgJ3v1/w2BVzEIlPjc8qrHYyxgpoNa2YyE9B?=
 =?us-ascii?q?dy+f3Z3oILLXLnf9/R+xZK/WwF3Ry8uW9boV5/Q+qFXjux+pG1Em83Vm1dlVzn?=
 =?us-ascii?q?Sd6o/LDAoUTZL+TEI3+wJmqLHdZyk3/5nU2mF0Mamorj/C3MokBes4yhq6Y9hT?=
 =?us-ascii?q?KqKFFA/oHM0cCMijM+gqm1mvbhIZM+Fe7q80P8W6d/SY3K6nJvpvnDWjjW5f+o?=
 =?us-ascii?q?ByzlqM9zZgSu7Px5sF2fCY0RedWDfmkVihtdr7mYZaajEIH2qz0DTrC5RVZqJv?=
 =?us-ascii?q?Y4kLE2CuI8usy9V6hp7tXWNY9VG5C1MH3s+pZQSdb1jn0QJM0kQXpGStmTGkwD?=
 =?us-ascii?q?xsjzEpsq2f0TTOwuTjbhYGOnRHRHJ/jVfqOoW0i9EaXE61bwkmjhel5ED6x7RF?=
 =?us-ascii?q?q6R7NWXcXUBIfy3uJWF4TqSwrqaCY9JI6J4wsyVYSv68YVOZSr76uRcayDnsH2?=
 =?us-ascii?q?hdxDA6cTGlpJP5kgd+iGKcKnZzsXXYddtxxRfZ+NzTW/pR0iAaSyl/jDndHkK8?=
 =?us-ascii?q?MMWx/dWIi5fDtfizVmK7WZ1UayXrz4KAtC2g6G1uAB2/me2zm9L9HQg71y/7y8?=
 =?us-ascii?q?dlVSHSoBngZYnr0rywMfh7cUlwGF/89816F5l9koQqhZEcw3gahoiP8noBnmf+?=
 =?us-ascii?q?KtFb2aP4bHoQSj8H2d/V4A752EJ9KnKF3Z72VnKYwsF5fdm1fnsW2j4h78BNEK?=
 =?us-ascii?q?qU6b1EnShvrVaiowPef+N9nisDxvs083EVnfsJuAU2wyWZA7ASG1RYPCP2mxSJ?=
 =?us-ascii?q?6dC+sLtYZGK1fbes00p+mMirDKuerQFERHb5ZpAiEDds7sV4NVLAynzy5ZvieN?=
 =?us-ascii?q?nNdtITrRyUngzEj+hULpIxi/ULiTBmOWL7oX0q1eo7gQZy0pG9uYiNM39t876h?=
 =?us-ascii?q?Ah5EKj31YNse9Sr3gqZZmsaWwpqjHpF8GjgQWJvoTPSoEC8dtPj9NgaOFiE8pW?=
 =?us-ascii?q?mfGbbFAQCf70JmpWrVE5+3L3GXOGUZzdJ6SRmfPkNfhR4bXC4gkp4lDAyqx9Hh?=
 =?us-ascii?q?cERk5jAX/FH4sQBByuZpNxn5T2feqx2kajYySJiDMhVW6htO6FvSMcyb9uhzBT?=
 =?us-ascii?q?1X/oW9rAyRLWyWfwRJDWYUWkydGlDsJL+u6cPb8+ifAOq+IODDYbGPqexYSveJ?=
 =?us-ascii?q?yoij0opg/zaQKMqPOmNuAOE82kpGRXp5AdjWmy0TSywLkCLAd86bqwm9+i10rc?=
 =?us-ascii?q?C/8e7nWAH15YuIBLtdL89v+w2tgaqYM+6QhSB5KStX158WxH/IzqQf00AWiy10?=
 =?us-ascii?q?azatFrEAvzbXTK3Mgq9XEwIbayRrOcRS8qIzxRNNNtDbi9/v0r54j+U4C1NEVV?=
 =?us-ascii?q?znh8GoatYGI2C7NFPbGkmLMK6KKiHMw8Hyeam8U6FfjP1Itx2svjaWC1PjPjWG?=
 =?us-ascii?q?lzXzSx+jK/1DjCGFMxxYo4y9dhdtCW7+TNPpcBG7Mdl3jSEozr0wnH/FKWkcMT?=
 =?us-ascii?q?1keUNXsrKQ9T9Ygul4G2FZ7ntqN++EmyOY7+neMpkXsPtrDT5yl+JV+3k6z7pV?=
 =?us-ascii?q?7CdZRP16gifSr9huo024nemL0DZoTB1OqjMYzL6M6EFjP7jJs5pNQ3DJ+DoT4m?=
 =?us-ascii?q?iKTRcHvd1oDpvooa8D5MLIkfffLyoK19PF9M0TT5zYL9+DMWsoNxXyMDHRBQoB?=
 =?us-ascii?q?CzWsMDeM1ARmjPiO+yjN/dABoZ/2lc9WRw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AZAADTxP5bh0O0hNFjHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGCaYECJ4wRjAiCIWiWRoFvFgEBGAcMAYduIjQJDQEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BCA0JCCkjDII2IoJsAiQZARsdAQMCCQIFEDsDHgIRAQUBLAkFgxwBgWgBAxUFC?=
 =?us-ascii?q?pscPIwJFgUBF4J3BYEBMAGDEwoZJw1dgTcCAQUSh1lFgkqBHBeBf4ERgl0HgwU?=
 =?us-ascii?q?uh1cCiR8KhnFRjwIuCYIghB4/hwiDIQsYiViHPY1UgQuJQgYCCQcPIYElgg1NI?=
 =?us-ascii?q?1AxgjsfgXwMFxKDOIUUhUwzMoEEAQEBO4otK4IgAQE?=
X-IPAS-Result: =?us-ascii?q?A0AZAADTxP5bh0O0hNFjHQEBBQEHBQGBUQgBCwGCaYECJ4w?=
 =?us-ascii?q?RjAiCIWiWRoFvFgEBGAcMAYduIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2I?=
 =?us-ascii?q?oJsAiQZARsdAQMCCQIFEDsDHgIRAQUBLAkFgxwBgWgBAxUFCpscPIwJFgUBF4J?=
 =?us-ascii?q?3BYEBMAGDEwoZJw1dgTcCAQUSh1lFgkqBHBeBf4ERgl0HgwUuh1cCiR8KhnFRj?=
 =?us-ascii?q?wIuCYIghB4/hwiDIQsYiViHPY1UgQuJQgYCCQcPIYElgg1NI1AxgjsfgXwMFxK?=
 =?us-ascii?q?DOIUUhUwzMoEEAQEBO4otK4IgAQE?=
X-IronPort-AV: E=Sophos;i="5.56,291,1539673200"; 
   d="scan'208";a="42665238"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 28 Nov 2018 08:45:22 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729114AbeK2Drd (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 28 Nov 2018 22:47:33 -0500
Received: from mail-pf1-f194.google.com ([209.85.210.194]:44543 "EHLO
        mail-pf1-f194.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1729083AbeK2Drc (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 28 Nov 2018 22:47:32 -0500
Received: by mail-pf1-f194.google.com with SMTP id u6so10426577pfh.11
        for <linux-kernel@vger.kernel.org>; Wed, 28 Nov 2018 08:45:16 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=from:to:cc:subject:date:message-id;
        bh=VoOGS6K8TakGWSgPYDwA2nFzylXKKle3zslLGm7lz7M=;
        b=UsL/LPC0ctn1a6IU5vEoIDLmxkm+vGT4dOwWt/fi8BQjiEYaXm0/HQARKQbqpn8lLv
         GdjoRAFBEaYjXbQ515hGAwoptiOl5S1+U2lIzs8879giptDdMpOsyxrZShmIzvbrOMHL
         k2g2f/mSKnZyp0EKeezeDYeKwQGhj4nfyVcD0u5X1Mpi3TLuiBVQz7Q+EM2F1RuQFhVp
         g1UGzgfH0ZhQdSbOanHydIxSIuL2gbWLzm9B1e4tGqwYKu5kijIjpmXRc0LumRXRo00M
         23hO39U+nyFgcAE+xjUU2gN+cO1AOFB90MH2dCHisAsHNk3jrOl3xWhv5z5WdXw2OiVf
         GMeQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id;
        bh=VoOGS6K8TakGWSgPYDwA2nFzylXKKle3zslLGm7lz7M=;
        b=m3/ajix1WIlT56dfUtwOOpep1/aadqSOiadCJVYLIqANYXq8Ijd+QSzwtkDxC8tRwT
         qeKwGUhBMwX9knf1gGxFixCtmcI5YBkr8kMTsgtVOlNkmNJXzh54jxx6pXGaX2rHkUUb
         CGsv6EGMgXy3AcmJbaJ5Cpy673PcpVDAph98zB6c+D/Jpy1sRh3ESYHoMz8HXIU/SQBh
         Z0ktHOg+QXH4UVTPguKtRDzGALnih6F82o+5CroHpoPmY4NUZ60sPJiJM10ahYC2ntMa
         fZLxE0tDa2NWCTtKKkdnnFsahka0xlt/YcMHKkXKarDceBajRFdkTMTK9pfwf8Nqul0D
         f7UQ==
X-Gm-Message-State: AA+aEWY1UkEeLDLKURt6voIDSo8eX7yA0vSTnlSZnQnv3SQMuVIvYSu3
        t7e9R6uoNFtEsvCLmGFFIcuk5gCHoGY=
X-Google-Smtp-Source: AFSGD/Vtyo7U+kY+5+TINdRrkkeD3EIwA0aJ8Zj+LsaseyVtVhpCiidF+QT/OIbqNYyLW0z5dHqJOQ==
X-Received: by 2002:a63:5d14:: with SMTP id r20mr34069507pgb.329.1543423515750;
        Wed, 28 Nov 2018 08:45:15 -0800 (PST)
Received: from localhost.localdomain ([104.238.160.83])
        by smtp.gmail.com with ESMTPSA id z8sm15152721pgg.62.2018.11.28.08.45.09
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Wed, 28 Nov 2018 08:45:15 -0800 (PST)
From: Dou Liyang <douliyangs@gmail.com>
To: linux-kernel@vger.kernel.org
Cc: tglx@linutronix.de, kashyap.desai@broadcom.com,
        shivasharan.srikanteshwara@broadcom.com, sumit.saxena@broadcom.com,
        ming.lei@redhat.com, hch@lst.de, bhelgaas@google.com,
        Dou Liyang <douliyangs@gmail.com>
Subject: [RFC PATCH v3] genirq/affinity: Create and transfer more irq desc info by a new structure
Date: Thu, 29 Nov 2018 00:45:03 +0800
Message-Id: <20181128164503.6194-1-douliyangs@gmail.com>
X-Mailer: git-send-email 2.17.2
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Now, Linux just spread the irq affinity to irqdesc core by a cpumask pointer.
if an Vector's affinity is not NULL, it will be marked as managed.

But, as Kashyap and Sumit reported, in MSI/-x subsystem, the pre/post vectors
may be used to some extra reply queues for performance. their affinities are
not NULL, but, they should be mapped as unmanaged interrupts. So, only
transfering the irq affinity assignments is not enough

Create a new structure named irq_affinity_desc, which include both the irq
affinity masks and flags. Replace the cpumask pointer with a irq_affinity_desc
pointer which allows to expand this in the future without touching all the
functions ever again, just modify the data irq_affinity_desc structure.

Reported-by: Kashyap Desai <kashyap.desai@broadcom.com>
Reported-by: Sumit Saxena <sumit.saxena@broadcom.com>
Suggested-by: Thomas Gleixner <tglx@linutronix.de>
Signed-off-by: Dou Liyang <douliyangs@gmail.com>
---
Changelog:
  v2 --> v3
  - Create a new irq_affinity_desc pointer to transfer the info
    suggested by tglx
  - rebase to the tip irq/core branch

  v1 --> v2
  - Add a bitmap for marking if an interrupt is managed or not.
  the size of bitmap is runtime allocation.

  - Need more tests, Just test this patch in QEmu.

  - v1: https://lkml.org/lkml/2018/9/13/366

 drivers/pci/msi.c         | 29 ++++++++++++++--------------
 include/linux/interrupt.h | 19 ++++++++++++++++---
 include/linux/irq.h       |  3 ++-
 include/linux/irqdomain.h |  7 ++++---
 include/linux/msi.h       |  4 ++--
 kernel/irq/affinity.c     | 40 +++++++++++++++++++++++++++++++++++++--
 kernel/irq/devres.c       | 23 ++++++++++++++++++++--
 kernel/irq/irqdesc.c      | 32 +++++++++++++++++++------------
 kernel/irq/irqdomain.c    | 14 +++++++-------
 kernel/irq/msi.c          | 21 ++++++++++----------
 10 files changed, 135 insertions(+), 57 deletions(-)

diff --git a/drivers/pci/msi.c b/drivers/pci/msi.c
index 265ed3e4c920..431449163316 100644
--- a/drivers/pci/msi.c
+++ b/drivers/pci/msi.c
@@ -534,16 +534,15 @@ static int populate_msi_sysfs(struct pci_dev *pdev)
 static struct msi_desc *
 msi_setup_entry(struct pci_dev *dev, int nvec, const struct irq_affinity *affd)
 {
-	struct cpumask *masks = NULL;
+	struct irq_affinity_desc *affi_desc = NULL;
 	struct msi_desc *entry;
 	u16 control;
 
 	if (affd)
-		masks = irq_create_affinity_masks(nvec, affd);
-
+		affi_desc = irq_create_affinity_desc(nvec, affd);
 
 	/* MSI Entry Initialization */
-	entry = alloc_msi_entry(&dev->dev, nvec, masks);
+	entry = alloc_msi_entry(&dev->dev, nvec, affi_desc);
 	if (!entry)
 		goto out;
 
@@ -567,7 +566,7 @@ msi_setup_entry(struct pci_dev *dev, int nvec, const struct irq_affinity *affd)
 		pci_read_config_dword(dev, entry->mask_pos, &entry->masked);
 
 out:
-	kfree(masks);
+	kfree(affi_desc);
 	return entry;
 }
 
@@ -672,15 +671,15 @@ static int msix_setup_entries(struct pci_dev *dev, void __iomem *base,
 			      struct msix_entry *entries, int nvec,
 			      const struct irq_affinity *affd)
 {
-	struct cpumask *curmsk, *masks = NULL;
+	struct irq_affinity_desc *cur_affi_desc, *affi_desc = NULL;
 	struct msi_desc *entry;
 	int ret, i;
 
 	if (affd)
-		masks = irq_create_affinity_masks(nvec, affd);
+		affi_desc = irq_create_affinity_desc(nvec, affd);
 
-	for (i = 0, curmsk = masks; i < nvec; i++) {
-		entry = alloc_msi_entry(&dev->dev, 1, curmsk);
+	for (i = 0, cur_affi_desc = affi_desc; i < nvec; i++) {
+		entry = alloc_msi_entry(&dev->dev, 1, cur_affi_desc);
 		if (!entry) {
 			if (!i)
 				iounmap(base);
@@ -701,12 +700,12 @@ static int msix_setup_entries(struct pci_dev *dev, void __iomem *base,
 		entry->mask_base		= base;
 
 		list_add_tail(&entry->list, dev_to_msi_list(&dev->dev));
-		if (masks)
-			curmsk++;
+		if (affi_desc)
+			cur_affi_desc++;
 	}
 	ret = 0;
 out:
-	kfree(masks);
+	kfree(affi_desc);
 	return ret;
 }
 
@@ -1264,7 +1263,7 @@ const struct cpumask *pci_irq_get_affinity(struct pci_dev *dev, int nr)
 
 		for_each_pci_msi_entry(entry, dev) {
 			if (i == nr)
-				return entry->affinity;
+				return &entry->affi_desc->masks;
 			i++;
 		}
 		WARN_ON_ONCE(1);
@@ -1272,11 +1271,11 @@ const struct cpumask *pci_irq_get_affinity(struct pci_dev *dev, int nr)
 	} else if (dev->msi_enabled) {
 		struct msi_desc *entry = first_pci_msi_entry(dev);
 
-		if (WARN_ON_ONCE(!entry || !entry->affinity ||
+		if (WARN_ON_ONCE(!entry || !entry->affi_desc ||
 				 nr >= entry->nvec_used))
 			return NULL;
 
-		return &entry->affinity[nr];
+		return &entry->affi_desc[nr].masks;
 	} else {
 		return cpu_possible_mask;
 	}
diff --git a/include/linux/interrupt.h b/include/linux/interrupt.h
index ca397ff40836..fec342eeca06 100644
--- a/include/linux/interrupt.h
+++ b/include/linux/interrupt.h
@@ -257,6 +257,18 @@ struct irq_affinity {
 	int	*sets;
 };
 
+/**
+ * struct irq_affinity_desc - Description for kinds of irq assignements
+ *		which will be transferred to irqdesc core 
+ * @masks:	cpumask of automatic irq affinity assignments
+ * @flags:	flags to differentiate between managed and
+ *		unmanaged interrupts
+ */
+struct irq_affinity_desc {
+	struct cpumask masks;
+	unsigned int	flags;
+};
+
 #if defined(CONFIG_SMP)
 
 extern cpumask_var_t irq_default_affinity;
@@ -303,7 +315,8 @@ extern int irq_set_affinity_hint(unsigned int irq, const struct cpumask *m);
 extern int
 irq_set_affinity_notifier(unsigned int irq, struct irq_affinity_notify *notify);
 
-struct cpumask *irq_create_affinity_masks(int nvec, const struct irq_affinity *affd);
+struct irq_affinity_desc *
+irq_create_affinity_desc(int nvec, const struct irq_affinity *affd);
 int irq_calc_affinity_vectors(int minvec, int maxvec, const struct irq_affinity *affd);
 
 #else /* CONFIG_SMP */
@@ -337,8 +350,8 @@ irq_set_affinity_notifier(unsigned int irq, struct irq_affinity_notify *notify)
 	return 0;
 }
 
-static inline struct cpumask *
-irq_create_affinity_masks(int nvec, const struct irq_affinity *affd)
+static inline struct irq_affinity_desc *
+irq_create_affinity_desc(int nvec, const struct irq_affinity *affd)
 {
 	return NULL;
 }
diff --git a/include/linux/irq.h b/include/linux/irq.h
index c9bffda04a45..b5b992a1b825 100644
--- a/include/linux/irq.h
+++ b/include/linux/irq.h
@@ -27,6 +27,7 @@
 struct seq_file;
 struct module;
 struct msi_msg;
+struct irq_affinity_desc;
 enum irqchip_irq_state;
 
 /*
@@ -834,7 +835,7 @@ struct cpumask *irq_data_get_effective_affinity_mask(struct irq_data *d)
 unsigned int arch_dynirq_lower_bound(unsigned int from);
 
 int __irq_alloc_descs(int irq, unsigned int from, unsigned int cnt, int node,
-		      struct module *owner, const struct cpumask *affinity);
+		struct module *owner, const struct irq_affinity_desc *affi_desc);
 
 int __devm_irq_alloc_descs(struct device *dev, int irq, unsigned int from,
 			   unsigned int cnt, int node, struct module *owner,
diff --git a/include/linux/irqdomain.h b/include/linux/irqdomain.h
index 068aa46f0d55..1e181a01342b 100644
--- a/include/linux/irqdomain.h
+++ b/include/linux/irqdomain.h
@@ -43,6 +43,7 @@ struct irq_chip;
 struct irq_data;
 struct cpumask;
 struct seq_file;
+struct irq_affinity_desc;
 
 /* Number of irqs reserved for a legacy isa controller */
 #define NUM_ISA_INTERRUPTS	16
@@ -266,7 +267,7 @@ extern bool irq_domain_check_msi_remap(void);
 extern void irq_set_default_host(struct irq_domain *host);
 extern int irq_domain_alloc_descs(int virq, unsigned int nr_irqs,
 				  irq_hw_number_t hwirq, int node,
-				  const struct cpumask *affinity);
+				  const struct irq_affinity_desc *affi_desc);
 
 static inline struct fwnode_handle *of_node_to_fwnode(struct device_node *node)
 {
@@ -448,8 +449,8 @@ static inline struct irq_domain *irq_domain_add_hierarchy(struct irq_domain *par
 }
 
 extern int __irq_domain_alloc_irqs(struct irq_domain *domain, int irq_base,
-				   unsigned int nr_irqs, int node, void *arg,
-				   bool realloc, const struct cpumask *affinity);
+			unsigned int nr_irqs, int node, void *arg,
+			bool realloc, const struct irq_affinity_desc *affi_desc);
 extern void irq_domain_free_irqs(unsigned int virq, unsigned int nr_irqs);
 extern int irq_domain_activate_irq(struct irq_data *irq_data, bool early);
 extern void irq_domain_deactivate_irq(struct irq_data *irq_data);
diff --git a/include/linux/msi.h b/include/linux/msi.h
index 0e9c50052ff3..5dfcc4ec137d 100644
--- a/include/linux/msi.h
+++ b/include/linux/msi.h
@@ -76,7 +76,7 @@ struct msi_desc {
 	unsigned int			nvec_used;
 	struct device			*dev;
 	struct msi_msg			msg;
-	struct cpumask			*affinity;
+	struct irq_affinity_desc 	*affi_desc;
 
 	union {
 		/* PCI MSI/X specific data */
@@ -136,7 +136,7 @@ static inline void pci_write_msi_msg(unsigned int irq, struct msi_msg *msg)
 #endif /* CONFIG_PCI_MSI */
 
 struct msi_desc *alloc_msi_entry(struct device *dev, int nvec,
-				 const struct cpumask *affinity);
+				 const struct irq_affinity_desc *affi_desc);
 void free_msi_entry(struct msi_desc *entry);
 void __pci_read_msi_msg(struct msi_desc *entry, struct msi_msg *msg);
 void __pci_write_msi_msg(struct msi_desc *entry, struct msi_msg *msg);
diff --git a/kernel/irq/affinity.c b/kernel/irq/affinity.c
index 08c904eb7279..67c44438bd97 100644
--- a/kernel/irq/affinity.c
+++ b/kernel/irq/affinity.c
@@ -221,14 +221,14 @@ static int irq_build_affinity_masks(const struct irq_affinity *affd,
 	return ret;
 }
 
-/**
+/*
  * irq_create_affinity_masks - Create affinity masks for multiqueue spreading
  * @nvecs:	The total number of vectors
  * @affd:	Description of the affinity requirements
  *
  * Returns the masks pointer or NULL if allocation failed.
  */
-struct cpumask *
+static struct cpumask *
 irq_create_affinity_masks(int nvecs, const struct irq_affinity *affd)
 {
 	int affvecs = nvecs - affd->pre_vectors - affd->post_vectors;
@@ -292,6 +292,42 @@ irq_create_affinity_masks(int nvecs, const struct irq_affinity *affd)
 	return masks;
 }
 
+/**
+ * irq_create_affinity_desc - Create affinity desc for multiqueue spreading
+ * @nvec:	The total number of vectors
+ * @affd:	Description of the affinity requirements
+ *
+ * Returns the irq_affinity_desc pointer or NULL if allocation failed.
+ */
+struct irq_affinity_desc *
+irq_create_affinity_desc(int nvec, const struct irq_affinity *affd)
+{
+	struct irq_affinity_desc *cur_affi_desc, *affi_desc = NULL;
+	struct cpumask *curmask, *masks = NULL;
+	int i;
+
+	masks = irq_create_affinity_masks(nvec, affd);
+	if (masks) {
+		affi_desc = kcalloc(nvec, sizeof(*affi_desc), GFP_KERNEL);
+		if (!affi_desc)
+			return NULL;
+
+		curmask = masks;
+		cur_affi_desc = affi_desc;
+		for (i = 0; i < nvec; i++) {
+			cpumask_copy(&cur_affi_desc->masks, curmask);
+			if (i >= affd->pre_vectors &&
+					i < nvec - affd->post_vectors)
+				cur_affi_desc->flags = 1;
+			curmask++;
+			cur_affi_desc++;
+		}
+		kfree(masks);
+	}
+
+	return affi_desc;
+}
+
 /**
  * irq_calc_affinity_vectors - Calculate the optimal number of vectors
  * @minvec:	The minimum number of vectors available
diff --git a/kernel/irq/devres.c b/kernel/irq/devres.c
index 6a682c229e10..2335b89d9bde 100644
--- a/kernel/irq/devres.c
+++ b/kernel/irq/devres.c
@@ -181,14 +181,33 @@ int __devm_irq_alloc_descs(struct device *dev, int irq, unsigned int from,
 			   unsigned int cnt, int node, struct module *owner,
 			   const struct cpumask *affinity)
 {
+	struct irq_affinity_desc *cur_affi_desc, *affi_desc = NULL;
+	const struct cpumask *curmask;
 	struct irq_desc_devres *dr;
-	int base;
+	int base, i;
 
 	dr = devres_alloc(devm_irq_desc_release, sizeof(*dr), GFP_KERNEL);
 	if (!dr)
 		return -ENOMEM;
 
-	base = __irq_alloc_descs(irq, from, cnt, node, owner, affinity);
+	if (affinity) {
+		affi_desc = kcalloc(cnt, sizeof(*affi_desc), GFP_KERNEL);
+		if (!affi_desc)
+			return -ENOMEM;
+
+		curmask = affinity;
+		cur_affi_desc = affi_desc;
+		for (i = 0; i < cnt; i++) {
+			cpumask_copy(&cur_affi_desc->masks, curmask);
+			cur_affi_desc->flags = 1;
+			curmask++;
+			cur_affi_desc++;
+		}
+	}
+
+	base = __irq_alloc_descs(irq, from, cnt, node, owner, affi_desc);
+	kfree(affi_desc);
+
 	if (base < 0) {
 		devres_free(dr);
 		return base;
diff --git a/kernel/irq/irqdesc.c b/kernel/irq/irqdesc.c
index 578d0e5f1b5b..c554958c547a 100644
--- a/kernel/irq/irqdesc.c
+++ b/kernel/irq/irqdesc.c
@@ -449,29 +449,37 @@ static void free_desc(unsigned int irq)
 }
 
 static int alloc_descs(unsigned int start, unsigned int cnt, int node,
-		       const struct cpumask *affinity, struct module *owner)
+		const struct irq_affinity_desc *affi_desc, struct module *owner)
 {
+	const struct irq_affinity_desc *cur_affi_desc = affi_desc;
 	const struct cpumask *mask = NULL;
 	struct irq_desc *desc;
 	unsigned int flags;
 	int i;
 
 	/* Validate affinity mask(s) */
-	if (affinity) {
-		for (i = 0, mask = affinity; i < cnt; i++, mask++) {
+	if (affi_desc) {
+		for (i = 0; i < cnt; i++) {
+			mask = &cur_affi_desc->masks;
 			if (cpumask_empty(mask))
 				return -EINVAL;
+			cur_affi_desc++;
 		}
 	}
 
-	flags = affinity ? IRQD_AFFINITY_MANAGED | IRQD_MANAGED_SHUTDOWN : 0;
 	mask = NULL;
 
 	for (i = 0; i < cnt; i++) {
-		if (affinity) {
-			node = cpu_to_node(cpumask_first(affinity));
-			mask = affinity;
-			affinity++;
+		if (affi_desc && affi_desc->flags) {
+			flags =  IRQD_AFFINITY_MANAGED |
+				IRQD_MANAGED_SHUTDOWN;
+		} else
+			flags = 0;
+
+		if (affi_desc) {
+			mask = &affi_desc->masks;
+			node = cpu_to_node(cpumask_first(mask));
+			affi_desc++;
 		}
 		desc = alloc_desc(start + i, node, flags, mask, owner);
 		if (!desc)
@@ -575,7 +583,7 @@ static void free_desc(unsigned int irq)
 }
 
 static inline int alloc_descs(unsigned int start, unsigned int cnt, int node,
-			      const struct cpumask *affinity,
+			      const struct irq_affinity_desc *affi_desc,
 			      struct module *owner)
 {
 	u32 i;
@@ -697,7 +705,7 @@ EXPORT_SYMBOL_GPL(irq_free_descs);
  * @cnt:	Number of consecutive irqs to allocate.
  * @node:	Preferred node on which the irq descriptor should be allocated
  * @owner:	Owning module (can be NULL)
- * @affinity:	Optional pointer to an affinity mask array of size @cnt which
+ * @affi_desc:	Optional pointer to an affinity desc array of size @cnt which
  *		hints where the irq descriptors should be allocated and which
  *		default affinities to use
  *
@@ -705,7 +713,7 @@ EXPORT_SYMBOL_GPL(irq_free_descs);
  */
 int __ref
 __irq_alloc_descs(int irq, unsigned int from, unsigned int cnt, int node,
-		  struct module *owner, const struct cpumask *affinity)
+		struct module *owner, const struct irq_affinity_desc *affi_desc)
 {
 	int start, ret;
 
@@ -738,7 +746,7 @@ __irq_alloc_descs(int irq, unsigned int from, unsigned int cnt, int node,
 		if (ret)
 			goto unlock;
 	}
-	ret = alloc_descs(start, cnt, node, affinity, owner);
+	ret = alloc_descs(start, cnt, node, affi_desc, owner);
 unlock:
 	mutex_unlock(&sparse_irq_lock);
 	return ret;
diff --git a/kernel/irq/irqdomain.c b/kernel/irq/irqdomain.c
index 3366d11c3e02..6fdfe835a96f 100644
--- a/kernel/irq/irqdomain.c
+++ b/kernel/irq/irqdomain.c
@@ -969,22 +969,22 @@ const struct irq_domain_ops irq_domain_simple_ops = {
 EXPORT_SYMBOL_GPL(irq_domain_simple_ops);
 
 int irq_domain_alloc_descs(int virq, unsigned int cnt, irq_hw_number_t hwirq,
-			   int node, const struct cpumask *affinity)
+			   int node, const struct irq_affinity_desc *affi_desc)
 {
 	unsigned int hint;
 
 	if (virq >= 0) {
 		virq = __irq_alloc_descs(virq, virq, cnt, node, THIS_MODULE,
-					 affinity);
+					 affi_desc);
 	} else {
 		hint = hwirq % nr_irqs;
 		if (hint == 0)
 			hint++;
 		virq = __irq_alloc_descs(-1, hint, cnt, node, THIS_MODULE,
-					 affinity);
+					 affi_desc);
 		if (virq <= 0 && hint > 1) {
 			virq = __irq_alloc_descs(-1, 1, cnt, node, THIS_MODULE,
-						 affinity);
+						 affi_desc);
 		}
 	}
 
@@ -1265,7 +1265,7 @@ int irq_domain_alloc_irqs_hierarchy(struct irq_domain *domain,
  * @node:	NUMA node id for memory allocation
  * @arg:	domain specific argument
  * @realloc:	IRQ descriptors have already been allocated if true
- * @affinity:	Optional irq affinity mask for multiqueue devices
+ * @affi_desc:	Optional irq affinity desc for multiqueue devices
  *
  * Allocate IRQ numbers and initialized all data structures to support
  * hierarchy IRQ domains.
@@ -1281,7 +1281,7 @@ int irq_domain_alloc_irqs_hierarchy(struct irq_domain *domain,
  */
 int __irq_domain_alloc_irqs(struct irq_domain *domain, int irq_base,
 			    unsigned int nr_irqs, int node, void *arg,
-			    bool realloc, const struct cpumask *affinity)
+			    bool realloc, const struct irq_affinity_desc *affi_desc)
 {
 	int i, ret, virq;
 
@@ -1300,7 +1300,7 @@ int __irq_domain_alloc_irqs(struct irq_domain *domain, int irq_base,
 		virq = irq_base;
 	} else {
 		virq = irq_domain_alloc_descs(irq_base, nr_irqs, 0, node,
-					      affinity);
+					      affi_desc);
 		if (virq < 0) {
 			pr_debug("cannot allocate IRQ(base %d, count %d)\n",
 				 irq_base, nr_irqs);
diff --git a/kernel/irq/msi.c b/kernel/irq/msi.c
index 4ca2fd46645d..bdc96e59b503 100644
--- a/kernel/irq/msi.c
+++ b/kernel/irq/msi.c
@@ -21,13 +21,14 @@
  * alloc_msi_entry - Allocate an initialize msi_entry
  * @dev:	Pointer to the device for which this is allocated
  * @nvec:	The number of vectors used in this entry
- * @affinity:	Optional pointer to an affinity mask array size of @nvec
+ * @affi_desc:	Optional pointer to an affinity desc array size of @nvec
  *
- * If @affinity is not NULL then a an affinity array[@nvec] is allocated
- * and the affinity masks from @affinity are copied.
+ * If @affinity is not NULL then an affinity desc array[@nvec] is allocated
+ * and the affinity masks from @affi_desc are copied.
  */
 struct msi_desc *
-alloc_msi_entry(struct device *dev, int nvec, const struct cpumask *affinity)
+alloc_msi_entry(struct device *dev, int nvec,
+				const struct irq_affinity_desc *affi_desc)
 {
 	struct msi_desc *desc;
 
@@ -38,10 +39,10 @@ alloc_msi_entry(struct device *dev, int nvec, const struct cpumask *affinity)
 	INIT_LIST_HEAD(&desc->list);
 	desc->dev = dev;
 	desc->nvec_used = nvec;
-	if (affinity) {
-		desc->affinity = kmemdup(affinity,
-			nvec * sizeof(*desc->affinity), GFP_KERNEL);
-		if (!desc->affinity) {
+	if (affi_desc) {
+		desc->affi_desc = kmemdup(affi_desc,
+			nvec * sizeof(*desc->affi_desc), GFP_KERNEL);
+		if (!desc->affi_desc) {
 			kfree(desc);
 			return NULL;
 		}
@@ -52,7 +53,7 @@ alloc_msi_entry(struct device *dev, int nvec, const struct cpumask *affinity)
 
 void free_msi_entry(struct msi_desc *entry)
 {
-	kfree(entry->affinity);
+	kfree(entry->affi_desc);
 	kfree(entry);
 }
 
@@ -416,7 +417,7 @@ int msi_domain_alloc_irqs(struct irq_domain *domain, struct device *dev,
 
 		virq = __irq_domain_alloc_irqs(domain, -1, desc->nvec_used,
 					       dev_to_node(dev), &arg, false,
-					       desc->affinity);
+					       desc->affi_desc);
 		if (virq < 0) {
 			ret = -ENOSPC;
 			if (ops->handle_error)
-- 
2.17.2

