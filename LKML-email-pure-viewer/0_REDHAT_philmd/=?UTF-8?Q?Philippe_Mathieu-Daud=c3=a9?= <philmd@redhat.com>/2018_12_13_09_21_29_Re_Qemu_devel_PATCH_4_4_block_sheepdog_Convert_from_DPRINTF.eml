Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 21:21:44 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 724AC580380
	for <like.xu@linux.intel.com>; Thu, 13 Dec 2018 01:22:05 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 13 Dec 2018 01:22:04 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AriK8vBy8o/8WxCnXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0uoXLfad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXXRPXshRWSJCDI2z?=
 =?us-ascii?q?YYQAAOgdMuhXsof9v1kDoxmxCAWxCu7j1iFHhmTt0K0m0OksCx3K0BAuEt8Mtn?=
 =?us-ascii?q?nfsdX7NL0VUeCw1KTG1zXDb/JS2Tf88IjIag4urumLU71qbcrRyUgvGB3YjlmJ?=
 =?us-ascii?q?p4LqJS6V2fkXtGOG6OdgTeKvi28jqwF0vzei3d0shZfUiYIV0F/E6T91z5oyJd?=
 =?us-ascii?q?29UUN2Z8OvHphItyyCKYd6XsAvT3t1tConybAKo4C3cSYKxZg92hLSaeSLfouL?=
 =?us-ascii?q?7x75SuqdPC10iGx5dL6hnRq+7EqtxvP6W8KpylhFtDBFncPJtn0V1xzc9MyHSv?=
 =?us-ascii?q?xl80el2DaPzBzT6vpeLUA7k6rbNoQtwrkqlpocqUjDHyn2l1vqjKKOaEko5uul?=
 =?us-ascii?q?5/76brn7pZKQLZF4hw/+P6g0h8CyA/w0Mg0UUGia/eS82qfj/Ur8QLhSl/05jK?=
 =?us-ascii?q?zZsI3DKcsGuKG5HRFa0oI65xmkCDemzdIYkmUZI1Jefx6Hi4npO1LQL/ziAva/?=
 =?us-ascii?q?nkyhkDNqx/DAI73gDY/BLnnFkLf9Y7l971RQxxY0zdBa/J9UDLYBIPT8Wk/3qd?=
 =?us-ascii?q?zUFBg5Mxa7w+r/EtVyypseWX6TAq+eKK7StV6I5uExLOWWa44VpS3wK/wk5/7o?=
 =?us-ascii?q?kH84lkURfaiv3ZsLdn+4Gu5qLFmeYXrp0Z88F3wXtF8+UPDykw/FFjpSfGqpGa?=
 =?us-ascii?q?Q74D49FcShF4iEQ4mshLmI2mC8BoFXYWZdTUmBFGqte4iaVvNfVSSJP8U0lzUF?=
 =?us-ascii?q?UaSmGZYs0AzruALkxr4iNOfN5yADqbrl09564fCVkgs9oidpBcaQ2H3YUmdvg2?=
 =?us-ascii?q?kTTCU31q0snUso7l6ey6V+n7RmFMJS6ukBBgMkNIDdwvZSEd3+WgvdONyOTQDi?=
 =?us-ascii?q?CsyrBCx0Qt8vztsmZUF7FNO/yBfZ0HmEGbgQwoSLBZg16rrR6F34O8Z8xmuD+K?=
 =?us-ascii?q?A8g9huFtNPNGmjioZl+gTTDpKPmEKcwfX5PZ8A1TLAoT/QhVGFu1tVBUspCf3I?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AgAAB2IxJcmBHrdtBjGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUgUBAQELAQGBL4E8gRMTg3yIeI0TLZdUgXMSAQEYFIdDIjUIDQEDAQE?=
 =?us-ascii?q?BAQEBAgETAQEBAQEICwsGGw4vQgEOAYFkBQIDGgEGglwBAgMBAiAECwETCikDA?=
 =?us-ascii?q?wECBgEBCg4KAgIiBAICAwEwAQUBHAYBDAYCAQEBgxyBdA0BAwGbEjyLDXwziSi?=
 =?us-ascii?q?BDRJ5izEXgX+BESeCa4RrgxqCVwKJGySBc4QVhjmLDwmRUwYYgVyIEBCHTokug?=
 =?us-ascii?q?QWObwIEAgQFAgUPIYEnAoIKMyIbFYMngicXEo4McYEHgyOHN4F3AQE?=
X-IPAS-Result: =?us-ascii?q?A0AgAAB2IxJcmBHrdtBjGwEBAQEDAQEBBwMBAQGBUgUBAQE?=
 =?us-ascii?q?LAQGBL4E8gRMTg3yIeI0TLZdUgXMSAQEYFIdDIjUIDQEDAQEBAQEBAgETAQEBA?=
 =?us-ascii?q?QEICwsGGw4vQgEOAYFkBQIDGgEGglwBAgMBAiAECwETCikDAwECBgEBCg4KAgI?=
 =?us-ascii?q?iBAICAwEwAQUBHAYBDAYCAQEBgxyBdA0BAwGbEjyLDXwziSiBDRJ5izEXgX+BE?=
 =?us-ascii?q?SeCa4RrgxqCVwKJGySBc4QVhjmLDwmRUwYYgVyIEBCHTokugQWObwIEAgQFAgU?=
 =?us-ascii?q?PIYEnAoIKMyIbFYMngicXEo4McYEHgyOHN4F3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,348,1539673200"; 
   d="scan'208";a="44794884"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 13 Dec 2018 01:22:03 -0800
Received: from localhost ([::1]:51299 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gXNBx-0003NH-JF
	for like.xu@linux.intel.com; Thu, 13 Dec 2018 04:22:01 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:54394)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <philmd@redhat.com>) id 1gXNBe-0003Iq-SB
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 04:21:45 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <philmd@redhat.com>) id 1gXNBZ-0002p8-6E
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 04:21:42 -0500
Received: from mail-wm1-f43.google.com ([209.85.128.43]:36556)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <philmd@redhat.com>) id 1gXNBY-0002iu-SV
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 04:21:37 -0500
Received: by mail-wm1-f43.google.com with SMTP id a18so1588374wmj.1
	for <qemu-devel@nongnu.org>; Thu, 13 Dec 2018 01:21:33 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:subject:to:cc:references:from:openpgp:message-id
	:date:user-agent:mime-version:in-reply-to:content-language
	:content-transfer-encoding;
	bh=urVWsU9g4PhELm5xUsyCuPCsxOIMcBd70f5inHn05rQ=;
	b=pUBLMfOhdgMNpxOm1UbbzXcAyWJubIhicmyjXMIbk2KqrURZsfgRS/hOObeDj4jHU3
	EPRiHJNVA6XKWhCOMNJ8vRzQSVRLSiQ8CWxQBiIBtdSSMMm07kuHa5BowRNi1nQByxNv
	amkdsJRX7m7vJWOfgBuo1pByhrp0DJ+74+bH/1Y67/ZwQRuhrY/Wzn9GAbuDvjfQPynJ
	INKdoCjglO+gWDbByUlXA9ZJXzYdp6XOI0iEIa5fGiwi2VyOdSqHuOXMk24yM00z00HY
	4UME80Wgmrep/D43WS5HOpUnT1ez0+RSy5SUL73gCYqFuVq9S3ZZm3n7iv6SsaZz+HWr
	3Y8A==
X-Gm-Message-State: AA+aEWZtouhScXhq3uxqvD+cZk1batrbu21EnIzzBTuEQdqP/j3ugU+p
	hM9PNL92wvjl9AZCdvUp+WcCrg==
X-Google-Smtp-Source: AFSGD/Xt0MgDoCeCod6JklqvsFByfK4L9k8jGYeE/epdOpUknJaSs4rU3E4uAI8MY6tNrsX5B7LgVg==
X-Received: by 2002:a7b:cb0a:: with SMTP id u10mr9847073wmj.0.1544692891794;
	Thu, 13 Dec 2018 01:21:31 -0800 (PST)
Received: from [192.168.1.34] (172.red-88-21-202.staticip.rima-tde.net.
	[88.21.202.172]) by smtp.gmail.com with ESMTPSA id
	e27sm1235492wra.67.2018.12.13.01.21.30
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Thu, 13 Dec 2018 01:21:31 -0800 (PST)
To: Laurent Vivier <lvivier@redhat.com>, qemu-devel@nongnu.org
References: <20181212194009.2951-1-lvivier@redhat.com>
	<20181212194009.2951-5-lvivier@redhat.com>
From: =?UTF-8?Q?Philippe_Mathieu-Daud=c3=a9?= <philmd@redhat.com>
Openpgp: id=89C1E78F601EE86C867495CBA2A3FD6EDEADC0DE;
	url=http://pgp.mit.edu/pks/lookup?op=get&search=0xA2A3FD6EDEADC0DE
Message-ID: <270fb776-d977-77df-36c9-f77088b2ad04@redhat.com>
Date: Thu, 13 Dec 2018 10:21:29 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
	Thunderbird/60.3.1
MIME-Version: 1.0
In-Reply-To: <20181212194009.2951-5-lvivier@redhat.com>
Content-Type: text/plain; charset=utf-8
Content-Language: en-US
Content-Transfer-Encoding: 8bit
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.85.128.43
Subject: Re: [Qemu-devel] [PATCH 4/4] block/sheepdog: Convert from DPRINTF()
 macro to trace events
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Kevin Wolf <kwolf@redhat.com>, qemu-block@nongnu.org,
	qemu-trivial@nongnu.org, "Richard W.M. Jones" <rjones@redhat.com>,
	=?UTF-8?Q?Philippe_Mathieu-Daud=c3=a9?= <f4bug@amsat.org>,
	Liu Yuan <namei.unix@gmail.com>, Max Reitz <mreitz@redhat.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Hi Laurent,

On 12/12/18 8:40 PM, Laurent Vivier wrote:
> Signed-off-by: Laurent Vivier <lvivier@redhat.com>
> ---
>  block/sheepdog.c   | 47 +++++++++++++++++-----------------------------
>  block/trace-events | 14 ++++++++++++++
>  2 files changed, 31 insertions(+), 30 deletions(-)
> 
> diff --git a/block/sheepdog.c b/block/sheepdog.c
> index 0125df9d49..a5000d271b 100644
> --- a/block/sheepdog.c
> +++ b/block/sheepdog.c
> @@ -28,6 +28,7 @@
>  #include "sysemu/block-backend.h"
>  #include "qemu/bitops.h"
>  #include "qemu/cutils.h"
> +#include "trace.h"
>  
>  #define SD_PROTO_VER 0x01
>  
> @@ -299,19 +300,6 @@ static inline size_t count_data_objs(const struct SheepdogInode *inode)
>                          (1UL << inode->block_size_shift));
>  }
>  
> -#undef DPRINTF
> -#ifdef DEBUG_SDOG
> -#define DEBUG_SDOG_PRINT 1
> -#else
> -#define DEBUG_SDOG_PRINT 0
> -#endif
> -#define DPRINTF(fmt, args...)                                           \
> -    do {                                                                \
> -        if (DEBUG_SDOG_PRINT) {                                         \
> -            fprintf(stderr, "%s %d: " fmt, __func__, __LINE__, ##args); \
> -        }                                                               \
> -    } while (0)
> -
>  typedef struct SheepdogAIOCB SheepdogAIOCB;
>  typedef struct BDRVSheepdogState BDRVSheepdogState;
>  
> @@ -750,7 +738,7 @@ static coroutine_fn void reconnect_to_sdog(void *opaque)
>          Error *local_err = NULL;
>          s->fd = get_sheep_fd(s, &local_err);
>          if (s->fd < 0) {
> -            DPRINTF("Wait for connection to be established\n");
> +            trace_sd_reconnect_to_sdog();
>              error_report_err(local_err);
>              qemu_co_sleep_ns(QEMU_CLOCK_REALTIME, 1000000000ULL);
>          }
> @@ -847,7 +835,7 @@ static void coroutine_fn aio_read_response(void *opaque)
>          break;
>      case AIOCB_FLUSH_CACHE:
>          if (rsp.result == SD_RES_INVALID_PARMS) {
> -            DPRINTF("disable cache since the server doesn't support it\n");
> +            trace_sd_aio_read_response();
>              s->cache_flags = SD_FLAG_CMD_DIRECT;
>              rsp.result = SD_RES_SUCCESS;
>          }
> @@ -1639,7 +1627,7 @@ static int sd_open(BlockDriverState *bs, QDict *options, int flags,
>      s->discard_supported = true;
>  
>      if (snap_id || tag[0]) {
> -        DPRINTF("%" PRIx32 " snapshot inode was open.\n", vid);
> +        trace_sd_open(vid);
>          s->is_snapshot = true;
>      }
>  
> @@ -2252,7 +2240,7 @@ static void sd_close(BlockDriverState *bs)
>      unsigned int wlen, rlen = 0;
>      int fd, ret;
>  
> -    DPRINTF("%s\n", s->name);
> +    trace_sd_close(s->name);
>  
>      fd = connect_to_sdog(s, &local_err);
>      if (fd < 0) {
> @@ -2429,7 +2417,7 @@ static int sd_create_branch(BDRVSheepdogState *s)
>      char *buf;
>      bool deleted;
>  
> -    DPRINTF("%" PRIx32 " is snapshot.\n", s->inode.vdi_id);
> +    trace_sd_create_branch_snapshot(s->inode.vdi_id);
>  
>      buf = g_malloc(SD_INODE_SIZE);
>  
> @@ -2445,7 +2433,7 @@ static int sd_create_branch(BDRVSheepdogState *s)
>          goto out;
>      }
>  
> -    DPRINTF("%" PRIx32 " is created.\n", vid);
> +    trace_sd_create_branch_created(vid);
>  
>      fd = connect_to_sdog(s, &local_err);
>      if (fd < 0) {
> @@ -2467,7 +2455,7 @@ static int sd_create_branch(BDRVSheepdogState *s)
>  
>      s->is_snapshot = false;
>      ret = 0;
> -    DPRINTF("%" PRIx32 " was newly created.\n", s->inode.vdi_id);
> +    trace_sd_create_branch_new(s->inode.vdi_id);
>  
>  out:
>      g_free(buf);
> @@ -2561,11 +2549,11 @@ static void coroutine_fn sd_co_rw_vector(SheepdogAIOCB *acb)
>          }
>  
>          if (create) {
> -            DPRINTF("update ino (%" PRIu32 ") %" PRIu64 " %" PRIu64 " %ld\n",
> -                    inode->vdi_id, oid,
> -                    vid_to_data_oid(inode->data_vdi_id[idx], idx), idx);
> +            trace_sd_co_rw_vector_update(inode->vdi_id, oid,
> +                                  vid_to_data_oid(inode->data_vdi_id[idx], idx),
> +                                  idx);
>              oid = vid_to_data_oid(inode->vdi_id, idx);
> -            DPRINTF("new oid %" PRIx64 "\n", oid);
> +            trace_sd_co_rw_vector_new(oid);
>          }
>  
>          aio_req = alloc_aio_req(s, acb, oid, len, offset, flags, create,
> @@ -2670,9 +2658,8 @@ static int sd_snapshot_create(BlockDriverState *bs, QEMUSnapshotInfo *sn_info)
>      SheepdogInode *inode;
>      unsigned int datalen;
>  
> -    DPRINTF("sn_info: name %s id_str %s s: name %s vm_state_size %" PRId64 " "
> -            "is_snapshot %d\n", sn_info->name, sn_info->id_str,
> -            s->name, sn_info->vm_state_size, s->is_snapshot);
> +    trace_sd_snapshot_create_info(sn_info->name, sn_info->id_str, s->name,
> +                                  sn_info->vm_state_size, s->is_snapshot);
>  
>      if (s->is_snapshot) {
>          error_report("You can't create a snapshot of a snapshot VDI, "
> @@ -2681,7 +2668,7 @@ static int sd_snapshot_create(BlockDriverState *bs, QEMUSnapshotInfo *sn_info)
>          return -EINVAL;
>      }
>  
> -    DPRINTF("%s %s\n", sn_info->name, sn_info->id_str);
> +    trace_sd_snapshot_create(sn_info->name, sn_info->id_str);
>  
>      s->inode.vm_state_size = sn_info->vm_state_size;
>      s->inode.vm_clock_nsec = sn_info->vm_clock_nsec;
> @@ -2726,8 +2713,8 @@ static int sd_snapshot_create(BlockDriverState *bs, QEMUSnapshotInfo *sn_info)
>      }
>  
>      memcpy(&s->inode, inode, datalen);
> -    DPRINTF("s->inode: name %s snap_id %x oid %x\n",
> -            s->inode.name, s->inode.snap_id, s->inode.vdi_id);
> +    trace_sd_snapshot_create_inode(s->inode.name, s->inode.snap_id,
> +                                   s->inode.vdi_id);
>  
>  cleanup:
>      g_free(inode);
> diff --git a/block/trace-events b/block/trace-events
> index 49f31966e7..7a92d7b3db 100644
> --- a/block/trace-events
> +++ b/block/trace-events
> @@ -189,3 +189,17 @@ file_xfs_discard(const char* error) "cannot punch hole (%s)"
>  file_FindEjectableOpticalMedia(const char *media) "Matching using %s"
>  file_setup_cdrom(const char *partition) "Using %s as optical disc"
>  file_hdev_is_sg(int type, int version) "SG device found: type=%d, version=%d"
> +
> +# block/sheepdog.c
> +sd_reconnect_to_sdog(void) "Wait for connection to be established"

Can you use the 'sheepdog' prefix to avoid clashing with the 'sd' subsystem?

> +sd_aio_read_response(void) "disable cache since the server doesn't support it"
> +sd_open(uint32_t vid) "0x%" PRIx32 " snapshot inode was open."

We can drop the trailing dots.

> +sd_close(const char *name) "%s"
> +sd_create_branch_snapshot(uint32_t vdi) "0x%" PRIx32 " is snapshot."
> +sd_create_branch_created(uint32_t vdi) "0x%" PRIx32 " is created."
> +sd_create_branch_new(uint32_t vdi) "0x%" PRIx32 " was newly created."
> +sd_co_rw_vector_update(uint32_t vdi, uint64_t oid, uint64_t data, long idx) "update ino (%" PRIu32 ") %" PRIu64 " %" PRIu64 " %ld"
> +sd_co_rw_vector_new(uint64_t oid) "new oid 0x%" PRIx64
> +sd_snapshot_create_info(const char *sn_name, const char *id, const char *name, int64_t size, int is_snapshot) "sn_info: name %s id_str %s s: name %s vm_state_size %" PRId64 " " "is_snapshot %d"
> +sd_snapshot_create(const char *sn_name, const char *id) "%s %s"
> +sd_snapshot_create_inode(const char *name, uint32_t snap, uint32_t vdi) "s->inode: name %s snap_id 0x%x vdi 0x%x"
> 

With 'sheepdog' prefix:
Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>

