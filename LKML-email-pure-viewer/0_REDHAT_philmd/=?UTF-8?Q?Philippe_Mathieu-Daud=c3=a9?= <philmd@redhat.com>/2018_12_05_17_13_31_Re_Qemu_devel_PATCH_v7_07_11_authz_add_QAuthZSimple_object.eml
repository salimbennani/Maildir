Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 06 Dec 2018 08:56:23 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 3CF515804C1
	for <like.xu@linux.intel.com>; Wed,  5 Dec 2018 09:14:36 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga001-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 05 Dec 2018 09:14:35 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3Ah102KB99RNvAE/9uRHKM819IXTAuvvDOBiVQ1KB+?=
 =?us-ascii?q?0+IUIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CW2RBUMZfWS9PDIyy?=
 =?us-ascii?q?YIQADfYOM+lFoYnlpVYArxSzCRSiCe/z1DBInWT73bE53uk7DQ3KwAItEtAIvX?=
 =?us-ascii?q?/JrNv1LqASUeWtwafSzTXDbvdW2Tbl6IjQbB8uufaCUqhsccrRyEkgCR7Fgkye?=
 =?us-ascii?q?p4P/IjOay/4KuHWc4up4VeKvimonqwRsrTW03McjlJTGhoIPxVDY7yl23IE1Jd?=
 =?us-ascii?q?ihRUN9fNWqHpxQtySAOIt3RMMvW39nuSkgxb0DoZ67eDYFxI47yB7YbvyLa4eI?=
 =?us-ascii?q?4hT+VOqLJjd4nn1ldbSijBix6Uit0vPwWtW33VpQsyZJj9rBumoT2xHd6sWLUO?=
 =?us-ascii?q?Zx80W51TqS0w3e6vtILV01mKfaMZIt36A8m5gJvUjdAyP6hEP7h7KMeEo+4Oin?=
 =?us-ascii?q?8eHnb63mppCCM490jRnzMqAvmsykHeQ4KRICX2ed+eShzrHj+lf5QLpSgv03lK?=
 =?us-ascii?q?nWrozaKNwFqqKlAAJZyJsv5wu8Aju8ztgVk3kKIEhYdB+Fl4TpPkvBIPH8Dfex?=
 =?us-ascii?q?mVSslzJryujfPrL/B5XNM2HPn6r/crZj9UFczBM/wstY55JJDLEOPOz8WlT2uN?=
 =?us-ascii?q?zcDx85MBK7z/zoCdVgzo4eXWOPAqmEMKLdq1OI5+QvI/WSa48RojryN/8l5/v1?=
 =?us-ascii?q?gH8/nl8de6ap3Z0KaHyiGfRmOUqZbWL2gtgdCWcKohY+TOvyhV2GUD5TZGi9U7?=
 =?us-ascii?q?gz5zEmE4+mCYbDRoawgL2Oxiu7H5tWZnxYBVCIC3vna4KEW/JfIB+UOdJrxzwY?=
 =?us-ascii?q?SaC6Gchm0RC1qBS8zb1hIezJvCoCutXm3dlx4uTV0hYq6T1zCd/aymyIUiR4k3?=
 =?us-ascii?q?0FQ2wL2rtiqxl4w1aHza8qmvFdCJlf6u1EVkIgOIfBwvdmI9b1XA3HY5GOUlnx?=
 =?us-ascii?q?WcisAzw6UocsxcQTaV12AdSog0P/2H+GCrkUmri8PNoD2K/GxXH3KEc1n3zLzr?=
 =?us-ascii?q?MoiVYratFCOW2vmuh08A2FQ8bQnkCE0qqna6kY9CjK8miF0CyJpk4LfhR3VPD9?=
 =?us-ascii?q?XXEbZ1POoOPc71/CTrKzTJguLwfAgZqaKqpOb9HBl1hKRP7/ft/ZZjTiyC+LGR?=
 =?us-ascii?q?+Uy+bUP8LRcGIH0XCYURBcng=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AOAAD4BghchxHrdtBbCRsBAQEBAwEBA?=
 =?us-ascii?q?QcDAQEBgVIFAQEBCwGBMIE5gRYTg3mIeIsvgWAtl0wUgVgZAQEYBw2BS4YIIjU?=
 =?us-ascii?q?IDQEDAQEBAQEBAgETAQEBCgsJCBsOIwyCNgUCAxoBBoJcAQIDAQIgBAsBEwopA?=
 =?us-ascii?q?wMBAgYBAQoYAgIfAwQCAgMBMAEFARwGAQwGAgEBAQSDGAGBdA0BAwGaPTyLDXw?=
 =?us-ascii?q?ziRyBDRJ5hymCKIFCF4F/gREngmuDE4EzEQcPgxiCVwKJIYYUhjSKJ0YJkTwGG?=
 =?us-ascii?q?IlgEIc/iQmHSYgFAgQCBAUCBQ8hgScBggozIhsVgycJgh4XEohMhUBxgQeIEAE?=
 =?us-ascii?q?kBymBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0AOAAD4BghchxHrdtBbCRsBAQEBAwEBAQcDAQEBgVIFAQE?=
 =?us-ascii?q?BCwGBMIE5gRYTg3mIeIsvgWAtl0wUgVgZAQEYBw2BS4YIIjUIDQEDAQEBAQEBA?=
 =?us-ascii?q?gETAQEBCgsJCBsOIwyCNgUCAxoBBoJcAQIDAQIgBAsBEwopAwMBAgYBAQoYAgI?=
 =?us-ascii?q?fAwQCAgMBMAEFARwGAQwGAgEBAQSDGAGBdA0BAwGaPTyLDXwziRyBDRJ5hymCK?=
 =?us-ascii?q?IFCF4F/gREngmuDE4EzEQcPgxiCVwKJIYYUhjSKJ0YJkTwGGIlgEIc/iQmHSYg?=
 =?us-ascii?q?FAgQCBAUCBQ8hgScBggozIhsVgycJgh4XEohMhUBxgQeIEAEkBymBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,318,1539673200"; 
   d="scan'208";a="54668351"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 05 Dec 2018 09:14:34 -0800
Received: from localhost ([::1]:35776 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gUakr-0006ZQ-GX
	for like.xu@linux.intel.com; Wed, 05 Dec 2018 12:14:33 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:39446)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <philmd@redhat.com>) id 1gUakR-0006Wq-IV
	for qemu-devel@nongnu.org; Wed, 05 Dec 2018 12:14:12 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <philmd@redhat.com>) id 1gUajw-0007jv-SW
	for qemu-devel@nongnu.org; Wed, 05 Dec 2018 12:13:41 -0500
Received: from mail-wm1-f67.google.com ([209.85.128.67]:36769)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <philmd@redhat.com>) id 1gUajw-0007dQ-LC
	for qemu-devel@nongnu.org; Wed, 05 Dec 2018 12:13:36 -0500
Received: by mail-wm1-f67.google.com with SMTP id a18so13764932wmj.1
	for <qemu-devel@nongnu.org>; Wed, 05 Dec 2018 09:13:35 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:subject:to:cc:references:from:openpgp:message-id
	:date:user-agent:mime-version:in-reply-to:content-language
	:content-transfer-encoding;
	bh=UXgxNhZyDewbVrrfh0LrH3xh/LksEHpr4vNFYniscsY=;
	b=j3pqWdLzYftuu0JNGRDzXjfYb3+GUS8LTPdRva4DfLl66VK/5FHrY3z41YF771ji6Q
	mo9Yqb9JVoBjBp4jw9wUJKcIIET4G26niO/ijvRwIDEI3eNxCFa+62WKPl5JZYV66FNj
	9TBLFApsAFLlTFjiCeLLw43vQ+5mwf8RITzNstC+U7fu9h4vBLUkrLRtN5ami2aVaMDq
	xAnwIHCLzWLkUVuEFB2X8PBFXnKDZ9ARqsnQDjeR4WhjnP5ezEZPw5wIzjcTMWWFTxEF
	sCAUndlcVy32/Tzk/CTZHvkPwFXHYaaOBcF7Ok131OuZE9hZxRGDDw9YwlM9xAyVM181
	y9QA==
X-Gm-Message-State: AA+aEWZ3NPLVIWlWLsscwBVqbrJJ7jgZARa0x6cuETh+jIEaNDmVn/wn
	d+ZyU9GBPMH7p8mnZNL+ZHIeEw==
X-Google-Smtp-Source: AFSGD/WZB206hAM8dApk3yEAz50MkfN15w0IzsVPD9tJQTL0u0oDISHMsALP63K0Grytt7p/JCi0Ow==
X-Received: by 2002:a1c:ee5b:: with SMTP id m88mr15415630wmh.12.1544030014854; 
	Wed, 05 Dec 2018 09:13:34 -0800 (PST)
Received: from [10.201.33.118] ([195.166.127.210])
	by smtp.gmail.com with ESMTPSA id w8sm26136334wrv.7.2018.12.05.09.13.32
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Wed, 05 Dec 2018 09:13:33 -0800 (PST)
To: =?UTF-8?Q?Daniel_P=2e_Berrang=c3=a9?= <berrange@redhat.com>,
	qemu-devel@nongnu.org
References: <20181130140615.19937-1-berrange@redhat.com>
	<20181130140615.19937-8-berrange@redhat.com>
From: =?UTF-8?Q?Philippe_Mathieu-Daud=c3=a9?= <philmd@redhat.com>
Openpgp: id=89C1E78F601EE86C867495CBA2A3FD6EDEADC0DE;
	url=http://pgp.mit.edu/pks/lookup?op=get&search=0xA2A3FD6EDEADC0DE
Message-ID: <8d878987-844a-7f95-e44a-84e8044146c7@redhat.com>
Date: Wed, 5 Dec 2018 18:13:31 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
	Thunderbird/60.3.1
MIME-Version: 1.0
In-Reply-To: <20181130140615.19937-8-berrange@redhat.com>
Content-Type: text/plain; charset=utf-8
Content-Language: en-US
Content-Transfer-Encoding: 8bit
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.85.128.67
Subject: Re: [Qemu-devel] [PATCH v7 07/11] authz: add QAuthZSimple object
 type for easy whitelist auth checks
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: =?UTF-8?Q?Marc-Andr=c3=a9_Lureau?= <marcandre.lureau@redhat.com>,
	Markus Armbruster <armbru@redhat.com>, Gerd Hoffmann <kraxel@redhat.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Hi Daniel,

On 11/30/18 3:06 PM, Daniel P. BerrangÃ© wrote:
> In many cases a single VM will just need to whilelist a single identity
> as the allowed user of network services. This is especially the case for
> TLS live migration (optionally with NBD storage) where we just need to
> whitelist the x509 certificate distinguished name of the source QEMU
> host.
> 
> Via QMP this can be configured with:
> 
>   {
>     "execute": "object-add",
>     "arguments": {
>       "qom-type": "authz-simple",
>       "id": "authz0",
>       "parameters": {

This example should be "parameters" -> "props"

>         "identity": "fred"
>       }
>     }
>   }
> 
> Or via the command line
> 
>   -object authz-simple,id=authz0,identity=fred
> 
> Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
> ---
>  authz/Makefile.objs       |   1 +
>  authz/simple.c            | 115 ++++++++++++++++++++++++++++++++++++++
>  authz/trace-events        |   3 +
>  include/authz/simple.h    |  84 ++++++++++++++++++++++++++++
>  qemu-options.hx           |  24 ++++++++
>  tests/Makefile.include    |   3 +
>  tests/test-authz-simple.c |  50 +++++++++++++++++
>  7 files changed, 280 insertions(+)
>  create mode 100644 authz/simple.c
>  create mode 100644 include/authz/simple.h
>  create mode 100644 tests/test-authz-simple.c
> 
> diff --git a/authz/Makefile.objs b/authz/Makefile.objs
> index 12597c9528..2a75d53840 100644
> --- a/authz/Makefile.objs
> +++ b/authz/Makefile.objs
> @@ -1 +1,2 @@
>  authz-obj-y += base.o
> +authz-obj-y += simple.o
> diff --git a/authz/simple.c b/authz/simple.c
> new file mode 100644
> index 0000000000..8ab718803e
> --- /dev/null
> +++ b/authz/simple.c
> @@ -0,0 +1,115 @@
> +/*
> + * QEMU simple authorization driver
> + *
> + * Copyright (c) 2018 Red Hat, Inc.
> + *
> + * This library is free software; you can redistribute it and/or
> + * modify it under the terms of the GNU Lesser General Public
> + * License as published by the Free Software Foundation; either
> + * version 2 of the License, or (at your option) any later version.
> + *
> + * This library is distributed in the hope that it will be useful,
> + * but WITHOUT ANY WARRANTY; without even the implied warranty of
> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
> + * Lesser General Public License for more details.
> + *
> + * You should have received a copy of the GNU Lesser General Public
> + * License along with this library; if not, see <http://www.gnu.org/licenses/>.
> + *
> + */
> +
> +#include "qemu/osdep.h"
> +#include "authz/simple.h"
> +#include "authz/trace.h"
> +#include "qom/object_interfaces.h"
> +
> +static bool qauthz_simple_is_allowed(QAuthZ *authz,
> +                                     const char *identity,
> +                                     Error **errp)
> +{
> +    QAuthZSimple *sauthz = QAUTHZ_SIMPLE(authz);
> +
> +    trace_qauthz_simple_is_allowed(authz, sauthz->identity, identity);
> +    return g_str_equal(identity, sauthz->identity);
> +}
> +
> +static void
> +qauthz_simple_prop_set_identity(Object *obj,
> +                                const char *value,
> +                                Error **errp G_GNUC_UNUSED)
> +{
> +    QAuthZSimple *sauthz = QAUTHZ_SIMPLE(obj);
> +
> +    g_free(sauthz->identity);
> +    sauthz->identity = g_strdup(value);
> +}
> +
> +
> +static char *
> +qauthz_simple_prop_get_identity(Object *obj,
> +                                Error **errp G_GNUC_UNUSED)
> +{
> +    QAuthZSimple *sauthz = QAUTHZ_SIMPLE(obj);
> +
> +    return g_strdup(sauthz->identity);
> +}
> +
> +
> +static void
> +qauthz_simple_finalize(Object *obj)
> +{
> +    QAuthZSimple *sauthz = QAUTHZ_SIMPLE(obj);
> +
> +    g_free(sauthz->identity);
> +}
> +
> +
> +static void
> +qauthz_simple_class_init(ObjectClass *oc, void *data)
> +{
> +    QAuthZClass *authz = QAUTHZ_CLASS(oc);
> +
> +    authz->is_allowed = qauthz_simple_is_allowed;
> +
> +    object_class_property_add_str(oc, "identity",
> +                                  qauthz_simple_prop_get_identity,
> +                                  qauthz_simple_prop_set_identity,
> +                                  NULL);
> +}
> +
> +
> +QAuthZSimple *qauthz_simple_new(const char *id,
> +                                const char *identity,
> +                                Error **errp)
> +{
> +    return QAUTHZ_SIMPLE(
> +        object_new_with_props(TYPE_QAUTHZ_SIMPLE,
> +                              object_get_objects_root(),
> +                              id, errp,
> +                              "identity", identity,
> +                              NULL));
> +}
> +
> +
> +static const TypeInfo qauthz_simple_info = {
> +    .parent = TYPE_QAUTHZ,
> +    .name = TYPE_QAUTHZ_SIMPLE,
> +    .instance_size = sizeof(QAuthZSimple),
> +    .instance_finalize = qauthz_simple_finalize,
> +    .class_size = sizeof(QAuthZSimpleClass),
> +    .class_init = qauthz_simple_class_init,
> +    .interfaces = (InterfaceInfo[]) {
> +        { TYPE_USER_CREATABLE },
> +        { }
> +    }
> +};
> +
> +
> +static void
> +qauthz_simple_register_types(void)
> +{
> +    type_register_static(&qauthz_simple_info);
> +}
> +
> +
> +type_init(qauthz_simple_register_types);
> diff --git a/authz/trace-events b/authz/trace-events
> index 481c90f511..1ef796c1e1 100644
> --- a/authz/trace-events
> +++ b/authz/trace-events
> @@ -2,3 +2,6 @@
>  
>  # authz/base.c
>  qauthz_is_allowed(void *authz, const char *identity, bool allowed) "AuthZ %p check identity=%s allowed=%d"
> +
> +# auth/simple.c
> +qauthz_simple_is_allowed(void *authz, const char *wantidentity, const char *gotidentity) "AuthZ simple %p check want identity=%s got identity=%s"
> diff --git a/include/authz/simple.h b/include/authz/simple.h
> new file mode 100644
> index 0000000000..4686e7676d
> --- /dev/null
> +++ b/include/authz/simple.h
> @@ -0,0 +1,84 @@
> +/*
> + * QEMU simple authorization driver
> + *
> + * Copyright (c) 2018 Red Hat, Inc.
> + *
> + * This library is free software; you can redistribute it and/or
> + * modify it under the terms of the GNU Lesser General Public
> + * License as published by the Free Software Foundation; either
> + * version 2 of the License, or (at your option) any later version.
> + *
> + * This library is distributed in the hope that it will be useful,
> + * but WITHOUT ANY WARRANTY; without even the implied warranty of
> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
> + * Lesser General Public License for more details.
> + *
> + * You should have received a copy of the GNU Lesser General Public
> + * License along with this library; if not, see <http://www.gnu.org/licenses/>.
> + *
> + */
> +
> +#ifndef QAUTHZ_SIMPLE_H__
> +#define QAUTHZ_SIMPLE_H__
> +
> +#include "authz/base.h"
> +
> +#define TYPE_QAUTHZ_SIMPLE "authz-simple"
> +
> +#define QAUTHZ_SIMPLE_CLASS(klass)                        \
> +    OBJECT_CLASS_CHECK(QAuthZSimpleClass, (klass),        \
> +                       TYPE_QAUTHZ_SIMPLE)
> +#define QAUTHZ_SIMPLE_GET_CLASS(obj)              \
> +    OBJECT_GET_CLASS(QAuthZSimpleClass, (obj),    \
> +                      TYPE_QAUTHZ_SIMPLE)
> +#define QAUTHZ_SIMPLE(obj) \
> +    INTERFACE_CHECK(QAuthZSimple, (obj),          \
> +                    TYPE_QAUTHZ_SIMPLE)
> +
> +typedef struct QAuthZSimple QAuthZSimple;
> +typedef struct QAuthZSimpleClass QAuthZSimpleClass;
> +
> +
> +/**
> + * QAuthZSimple:
> + *
> + * This authorization driver provides a simple mechanism
> + * for granting access based on an exact matched username.
> + *
> + * To create an instance of this class via QMP:
> + *
> + *  {
> + *    "execute": "object-add",
> + *    "arguments": {
> + *      "qom-type": "authz-simple",
> + *      "id": "authz0",
> + *      "parameters": {

Ditto.

> + *        "identity": "fred"
> + *      }
> + *    }
> + *  }
> + *
> + * Or via the command line
> + *
> + *   -object authz-simple,id=authz0,identity=fred
> + *
> + */
> +struct QAuthZSimple {
> +    QAuthZ parent_obj;
> +
> +    char *identity;
> +};
> +
> +
> +struct QAuthZSimpleClass {
> +    QAuthZClass parent_class;
> +};
> +
> +
> +QAuthZSimple *qauthz_simple_new(const char *id,
> +                                const char *identity,
> +                                Error **errp);
> +
> +
> +#endif /* QAUTHZ_SIMPLE_H__ */
> +
> diff --git a/qemu-options.hx b/qemu-options.hx
> index 269eda7a5d..7732881e7a 100644
> --- a/qemu-options.hx
> +++ b/qemu-options.hx
> @@ -4403,6 +4403,30 @@ e.g to launch a SEV guest
>       .....
>  
>  @end example
> +
> +
> +@item -object authz-simple,id=@var{id},identity=@var{string}
> +
> +Create an authorization object that will control access to network services.
> +
> +The @option{identity} parameter is identifies the user and its format
> +depends on the network service that authorization object is associated
> +with. For authorizing based on TLS x509 certificates, the identity must
> +be the x509 distinguished name. Note that care must be taken to escape
> +any commas in the distinguished name.
> +
> +An example authorization object to validate a x509 distinguished name
> +would look like:
> +@example
> + # $QEMU \
> +     ...
> +     -object 'authz-simple,id=auth0,identity=CN=laptop.example.com,,O=Example Org,,L=London,,ST=London,,C=GB' \
> +     ...
> +@end example
> +
> +Note the use of quotes due to the x509 distinguished name containing
> +whitespace, and escaping of ','.
> +
>  @end table
>  
>  ETEXI
> diff --git a/tests/Makefile.include b/tests/Makefile.include
> index e339287021..6dda623607 100644
> --- a/tests/Makefile.include
> +++ b/tests/Makefile.include
> @@ -112,6 +112,7 @@ endif
>  check-unit-y += tests/test-timed-average$(EXESUF)
>  check-unit-$(CONFIG_INOTIFY1) += tests/test-util-filemonitor$(EXESUF)
>  check-unit-y += tests/test-util-sockets$(EXESUF)
> +check-unit-y += tests/test-authz-simple$(EXESUF)
>  check-unit-y += tests/test-io-task$(EXESUF)
>  check-unit-y += tests/test-io-channel-socket$(EXESUF)
>  check-unit-y += tests/test-io-channel-file$(EXESUF)
> @@ -516,6 +517,7 @@ test-qapi-obj-y = tests/test-qapi-visit.o tests/test-qapi-types.o \
>  benchmark-crypto-obj-y = $(crypto-obj-y) $(test-qom-obj-y)
>  test-crypto-obj-y = $(crypto-obj-y) $(test-qom-obj-y)
>  test-io-obj-y = $(io-obj-y) $(test-crypto-obj-y)
> +test-authz-obj-y = $(test-qom-obj-y) $(authz-obj-y)
>  test-block-obj-y = $(block-obj-y) $(test-io-obj-y) tests/iothread.o
>  
>  tests/check-qnum$(EXESUF): tests/check-qnum.o $(test-util-obj-y)
> @@ -641,6 +643,7 @@ tests/test-util-filemonitor$(EXESUF): tests/test-util-filemonitor.o \
>  	$(test-util-obj-y)
>  tests/test-util-sockets$(EXESUF): tests/test-util-sockets.o \
>  	tests/socket-helpers.o $(test-util-obj-y)
> +tests/test-authz-simple$(EXESUF): tests/test-authz-simple.o $(test-authz-obj-y)
>  tests/test-io-task$(EXESUF): tests/test-io-task.o $(test-io-obj-y)
>  tests/test-io-channel-socket$(EXESUF): tests/test-io-channel-socket.o \
>          tests/io-channel-helpers.o tests/socket-helpers.o $(test-io-obj-y)
> diff --git a/tests/test-authz-simple.c b/tests/test-authz-simple.c
> new file mode 100644
> index 0000000000..2cf14fb87e
> --- /dev/null
> +++ b/tests/test-authz-simple.c
> @@ -0,0 +1,50 @@
> +/*
> + * QEMU simple authorization object testing
> + *
> + * Copyright (c) 2018 Red Hat, Inc.
> + *
> + * This library is free software; you can redistribute it and/or
> + * modify it under the terms of the GNU Lesser General Public
> + * License as published by the Free Software Foundation; either
> + * version 2 of the License, or (at your option) any later version.
> + *
> + * This library is distributed in the hope that it will be useful,
> + * but WITHOUT ANY WARRANTY; without even the implied warranty of
> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
> + * Lesser General Public License for more details.
> + *
> + * You should have received a copy of the GNU Lesser General Public
> + * License along with this library; if not, see <http://www.gnu.org/licenses/>.
> + *
> + */
> +
> +#include "qemu/osdep.h"
> +#include "qapi/error.h"
> +
> +#include "authz/simple.h"
> +
> +
> +static void test_authz_simple(void)
> +{
> +    QAuthZSimple *authz = qauthz_simple_new("authz0",
> +                                            "cthulu",
> +                                            &error_abort);
> +
> +    g_assert(!qauthz_is_allowed(QAUTHZ(authz), "cthul", &error_abort));
> +    g_assert(qauthz_is_allowed(QAUTHZ(authz), "cthulu", &error_abort));
> +    g_assert(!qauthz_is_allowed(QAUTHZ(authz), "cthuluu", &error_abort));
> +    g_assert(!qauthz_is_allowed(QAUTHZ(authz), "fred", &error_abort));
> +
> +    object_unparent(OBJECT(authz));
> +}
> +
> +
> +int main(int argc, char **argv)
> +{
> +    g_test_init(&argc, &argv, NULL);
> +    module_call_init(MODULE_INIT_QOM);
> +
> +    g_test_add_func("/authz/simple", test_authz_simple);
> +
> +    return g_test_run();
> +}
> 

Reviewed-by: Philippe Mathieu-DaudÃ© <philmd@redhat.com>
Tested-by: Philippe Mathieu-DaudÃ© <philmd@redhat.com>

