Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 20 Nov 2018 00:31:54 -0000
Received: from icoremail.net (unknown [209.85.210.181])
	by mail-app2 (Coremail) with SMTP id by_KCgC3f_mk5vJbQ2q6AQ--.54958S3;
	Tue, 20 Nov 2018 00:36:58 +0800 (CST)
Received: from mail-pf1-f181.google.com (unknown [209.85.210.181])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwBXPEig5vJbrF5ZAA--.5597S3;
	Tue, 20 Nov 2018 00:36:48 +0800 (CST)
Received: by mail-pf1-f181.google.com with SMTP id w73so5778806pfk.10
        for <xuliker@zju.edu.cn>; Mon, 19 Nov 2018 08:36:48 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:from:to:cc:subject
         :date:message-id:in-reply-to:references:user-agent:mime-version
         :content-transfer-encoding:sender:precedence:list-id;
        bh=Ozw8pIC1+itX1M7MbQDXAoJpcVkfuGFgcmeJ9tl/3Eo=;
        b=YqjTgC27JaP6rz/0nN8eL6ISSAh9OuU2f/sZVrdCFl0RF7THicF/cBQec63EoQma8W
         7ySPD0KUfZDSTMmwvU/9OVPCXX4k65vFyEpK+Bp/4s0XUx9WAXvzRooSAuJDyymj5LIR
         EE7IrpbpbM6aVZzOEQhyEyo91fpLYHGJVgK7Wl4FeJg0Z3vN4tkBOKC1oiXMyQOcGyH2
         EWTP+Dq3+e9mKXOTwG35Nv3f3HloC+bTuhiRvUnEYNzxa/Qe8iiPDlZWPwLBccZhJ3n2
         c4izfrqYwl3Z7XDOUx/XEy9/cI23VKItQxQXNGcp2zJSWRrTDBVPNZ7UTtRbA0/LYI+E
         4C8g==
X-Gm-Message-State: AGRZ1gI9MWiRyxt494GAYczcZIsrjW9+wo6OsvR7TCtHsEl6jhWlvyz/
	LcaZ5fpaoK5S3gGrEy/Fe2tvVPXSSTLQEqK7qFZWhTEwYUSkLv0=
X-Received: by 2002:a63:3c44:: with SMTP id i4mr20430233pgn.286.1542645408038;
        Mon, 19 Nov 2018 08:36:48 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:d106:0:0:0:0 with SMTP id l6-v6csp2884609pju;
        Mon, 19 Nov 2018 08:36:47 -0800 (PST)
X-Google-Smtp-Source: AJdET5fwQO7U6Sh0fxOEFMctYHyJiiyvuTs5CmMoKyMiD9A3LGkzAeL32QfLCsuKurZYH17BoOFH
X-Received: by 2002:a62:4105:: with SMTP id o5-v6mr23167887pfa.85.1542645407136;
        Mon, 19 Nov 2018 08:36:47 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542645407; cv=none;
        d=google.com; s=arc-20160816;
        b=YieoqlaOPAwl9KZgvFggnipWZNBw33nJBkd/SWwAHJHM3o0xpAPNjP0T+w0pyBxGDS
         yT1kLr+lCUbvumjZJ7QWXwaqxkXCdwxFC6Yl9WDlopw4IDrrDd0DtcDGoiXtKrDF+a7y
         kB00q1SUMyDbs+HalCWt8TswBo4bLjFBt8wrOBzU5lpEJyzSmsLe7khWQMomy/awUl9h
         gVvGvUOL+P+95kOHOqWb0YzRK5xIj74ZXPua0COkLOKYb82Tze5tl/6Hy2+itMjTpY/z
         EtyMoeKzTxcMws6sCLY7VFPC7CSJ182trAVQBwcuJDNlPomTW1KDN05pvvYRrFLfyO+Q
         HJfA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:content-transfer-encoding:mime-version
         :user-agent:references:in-reply-to:message-id:date:subject:cc:to
         :from:dkim-signature;
        bh=Ozw8pIC1+itX1M7MbQDXAoJpcVkfuGFgcmeJ9tl/3Eo=;
        b=ZwSMAD+VFVL0drXSWOBpc0piSr8YCVhjjB8+bfDHajMA05V20XyMniz4bnX28JNi6e
         1n/ParKaEZSK8zR+XNu8UhOb0anoZocuE1qZETazlC0N1QkD6QUpifP1sXf2vyA4O3UI
         Y8sTjd46h39wfR5btyv1XOlJUPlPZgs2SScUa+WUoqQI4dj/sYeMGJmPKpJMw8ly4odA
         g8KQImDRSga+kk8lIp6EZNonv6v0U/JBwO2SwCSXdhOgbwU9D60rq+YDAocnsuK5CBbt
         nAJ08YJJ3NqWEKfR97+QRrQxLXdei/nBE34IH3lXyMG3283Sj5wHT4RuVba3dhrwbITg
         Kw1Q==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@kernel.org header.s=default header.b="0fLy/LkB";
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id 19si37120585pgq.215.2018.11.19.08.36.32;
        Mon, 19 Nov 2018 08:36:47 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1731700AbeKTC7n (ORCPT <rfc822;nullbytes00@gmail.com>
        + 99 others); Mon, 19 Nov 2018 21:59:43 -0500
Received: from mail.kernel.org ([198.145.29.99]:59254 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1730350AbeKTC7n (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 19 Nov 2018 21:59:43 -0500
Received: from localhost (5356596B.cm-6-7b.dynamic.ziggo.nl [83.86.89.107])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id C190B20989;
        Mon, 19 Nov 2018 16:35:33 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1542645334;
        bh=5RmWss2svd/hVniwv37FTp0eTGSCqZmtgdBgXskEbyM=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=0fLy/LkB1Jk0Zq8mVTwcS4Qv5b7Z0Or+Qp/Mk8aLV0Tvqmw46fJMpM0cBU/IEeJJ5
         iN/hlVPGVDjWPg1dqflaW3zIKTmdgTUQg/bRXGjDZqXnwyg3ggbwzIw7AK6dBu+CEt
         jx8kG7jPgH1jhkUr/RDd0Bfthk6Xm1xAx5PxV6Ng=
From: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
To: linux-kernel@vger.kernel.org
Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        stable@vger.kernel.org, Josef Bacik <josef@toxicpanda.com>,
        Filipe Manana <fdmanana@suse.com>,
        David Sterba <dsterba@suse.com>
Subject: [PATCH 4.19 124/205] Btrfs: fix missing data checksums after a ranged fsync (msync)
Date: Mon, 19 Nov 2018 17:27:11 +0100
Message-Id: <20181119162636.426695453@linuxfoundation.org>
X-Mailer: git-send-email 2.19.1
In-Reply-To: <20181119162616.586062722@linuxfoundation.org>
References: <20181119162616.586062722@linuxfoundation.org>
User-Agent: quilt/0.65
X-stable: review
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwBXPEig5vJbrF5ZAA--.5597S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoWxtF17uryUWr1xtr18ur17KFg_yoW7GF1xpF
	4akw43Gr1kJw4xG3srt3y8W34rGwn5Jr43Zr1vyryUGay5Zr90yryayr4Y9r95ZrZYqrW2
	vFsYv34jk3Z8AFJanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUPGb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_tr0E3s1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr1j6F4UJwA2z4x0Y4vE
	x4A2jsIE14v26r4UJVWxJr1l84ACjcxK6I8E87Iv6xkF7I0E14v26r4UJVWxJr1le2I262
	IYc4CY6c8Ij28IcVAaY2xG8wAqx4xG64xvF2IEw4CE5I8CrVC2j2WlYx0E2Ix0cI8IcVAF
	wI0_Jrv_JF1lYx0Ex4A2jsIE14v26r1j6r4UMcvjeVCFs4IE7xkEbVWUJVW8JwACjcxG0x
	vY0x0EwIxGrwCjxxvEa2IrMxkF7I0Ew4C26cxK6c8Ij28IcwCY1Ik26cxK6xAEc7vF6xCj
	j44lc2xSY4AK6IIF6r1lc2IjII80xcxEwVAKI48JMxvI42IY6xIIjxv20xvE14v26w1j6s
	0DMxvI42IY6xIIjxv20xvEc7CjxVAFwI0_Cr0_Gr1UMxvI42IY6I8E87Iv67AKxVW8Jr0_
	Cr1UMxvI42IY6I8E87Iv6xkF7I0E14v26r4UJVWxJr1l42xK82IYc2Ij64vIr41l42xK82
	IY64kExVAvwVAq07x20xyl4x8a6x804xWl4I8I3I0E4IkC6x0Yz7v_Jr0_Gr1lx2IqxVAq
	x4xG67AKxVWUJVWUGwC20s026x8GjcxK67AKxVWUGVWUWwC2zVAF1VAY17CE14v26r126r
	1DMIIYrxkI7VAKI48JMIIF0xvE42xK8VAvwI8IcIk0rVWUJVWUCbIYCTnIWIevJa73UjIF
	yTuYvjxUHebkDUUUU

4.19-stable review patch.  If anyone has any objections, please let me know.

------------------

From: Filipe Manana <fdmanana@suse.com>

commit 008c6753f7e070c77c70d708a6bf0255b4381763 upstream.

Recently we got a massive simplification for fsync, where for the fast
path we no longer log new extents while their respective ordered extents
are still running.

However that simplification introduced a subtle regression for the case
where we use a ranged fsync (msync). Consider the following example:

               CPU 0                                    CPU 1

                                            mmap write to range [2Mb, 4Mb[
  mmap write to range [512Kb, 1Mb[
  msync range [512K, 1Mb[
    --> triggers fast fsync
        (BTRFS_INODE_NEEDS_FULL_SYNC
         not set)
    --> creates extent map A for this
        range and adds it to list of
        modified extents
    --> starts ordered extent A for
        this range
    --> waits for it to complete

                                            writeback triggered for range
                                            [2Mb, 4Mb[
                                              --> create extent map B and
                                                  adds it to the list of
                                                  modified extents
                                              --> creates ordered extent B

    --> start looking for and logging
        modified extents
    --> logs extent maps A and B
    --> finds checksums for extent A
        in the csum tree, but not for
        extent B
  fsync (msync) finishes

                                              --> ordered extent B
                                                  finishes and its
                                                  checksums are added
                                                  to the csum tree

                                <power cut>

After replaying the log, we have the extent covering the range [2Mb, 4Mb[
but do not have the data checksum items covering that file range.

This happens because at the very beginning of an fsync (btrfs_sync_file())
we start and wait for IO in the given range [512Kb, 1Mb[ and therefore
wait for any ordered extents in that range to complete before we start
logging the extents. However if right before we start logging the extent
in our range [512Kb, 1Mb[, writeback is started for any other dirty range,
such as the range [2Mb, 4Mb[ due to memory pressure or a concurrent fsync
or msync (btrfs_sync_file() starts writeback before acquiring the inode's
lock), an ordered extent is created for that other range and a new extent
map is created to represent that range and added to the inode's list of
modified extents.

That means that we will see that other extent in that list when collecting
extents for logging (done at btrfs_log_changed_extents()) and log the
extent before the respective ordered extent finishes - namely before the
checksum items are added to the checksums tree, which is where
log_extent_csums() looks for the checksums, therefore making us log an
extent without logging its checksums. Before that massive simplification
of fsync, this wasn't a problem because besides looking for checkums in
the checksums tree, we also looked for them in any ordered extent still
running.

The consequence of data checksums missing for a file range is that users
attempting to read the affected file range will get -EIO errors and dmesg
reports the following:

 [10188.358136] BTRFS info (device sdc): no csum found for inode 297 start 57344
 [10188.359278] BTRFS warning (device sdc): csum failed root 5 ino 297 off 57344 csum 0x98f94189 expected csum 0x00000000 mirror 1

So fix this by skipping extents outside of our logging range at
btrfs_log_changed_extents() and leaving them on the list of modified
extents so that any subsequent ranged fsync may collect them if needed.
Also, if we find a hole extent outside of the range still log it, just
to prevent having gaps between extent items after replaying the log,
otherwise fsck will complain when we are not using the NO_HOLES feature
(fstest btrfs/056 triggers such case).

Fixes: e7175a692765 ("btrfs: remove the wait ordered logic in the log_one_extent path")
CC: stable@vger.kernel.org # 4.19+
Reviewed-by: Josef Bacik <josef@toxicpanda.com>
Signed-off-by: Filipe Manana <fdmanana@suse.com>
Signed-off-by: David Sterba <dsterba@suse.com>
Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

---
 fs/btrfs/tree-log.c |   17 +++++++++++++++++
 1 file changed, 17 insertions(+)

--- a/fs/btrfs/tree-log.c
+++ b/fs/btrfs/tree-log.c
@@ -4399,6 +4399,23 @@ static int btrfs_log_changed_extents(str
 	logged_end = end;
 
 	list_for_each_entry_safe(em, n, &tree->modified_extents, list) {
+		/*
+		 * Skip extents outside our logging range. It's important to do
+		 * it for correctness because if we don't ignore them, we may
+		 * log them before their ordered extent completes, and therefore
+		 * we could log them without logging their respective checksums
+		 * (the checksum items are added to the csum tree at the very
+		 * end of btrfs_finish_ordered_io()). Also leave such extents
+		 * outside of our range in the list, since we may have another
+		 * ranged fsync in the near future that needs them. If an extent
+		 * outside our range corresponds to a hole, log it to avoid
+		 * leaving gaps between extents (fsck will complain when we are
+		 * not using the NO_HOLES feature).
+		 */
+		if ((em->start > end || em->start + em->len <= start) &&
+		    em->block_start != EXTENT_MAP_HOLE)
+			continue;
+
 		list_del_init(&em->list);
 		/*
 		 * Just an arbitrary number, this can be really CPU intensive

