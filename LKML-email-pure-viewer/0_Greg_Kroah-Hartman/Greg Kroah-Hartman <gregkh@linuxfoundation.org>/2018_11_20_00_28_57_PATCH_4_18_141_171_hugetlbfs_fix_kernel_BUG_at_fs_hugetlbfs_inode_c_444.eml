Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 20 Nov 2018 00:34:21 -0000
Received: from icoremail.net (unknown [209.85.210.172])
	by mail-app2 (Coremail) with SMTP id by_KCgCn35hl9_JbG826AQ--.55096S3;
	Tue, 20 Nov 2018 01:48:22 +0800 (CST)
Received: from mail-pf1-f172.google.com (unknown [209.85.210.172])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwCHb0tj9_JbYpNZAA--.11493S3;
	Tue, 20 Nov 2018 01:48:19 +0800 (CST)
Received: by mail-pf1-f172.google.com with SMTP id g62so11936340pfd.12
        for <xuliker@zju.edu.cn>; Mon, 19 Nov 2018 09:48:19 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:from:to:cc:subject
         :date:message-id:in-reply-to:references:user-agent:mime-version
         :content-transfer-encoding:sender:precedence:list-id;
        bh=oxnTmrme8i+FyiMnE0FzKEpS6Kmvw2Ry/g/bQ/yUGeI=;
        b=sgFs/6KcRksFfZ0qlmjYSMC0QLNmPmJLK+D3N0uzo393OAsVaN/0XI9l6E5XJItP1P
         4dMpLdMZIoeCrJjhloVPRKT2e98ZrkgTt5hNQbeIk+9FgJfNEobSo3xlO0NX9vuP6wQk
         UG6aKHUJYXps7S3tfD5tvB0ruLqDOiZwNE/+cLzSdeOLLApKrOWiS5+h2Q79AJFyvfiT
         QKSEpFo3KgrKxHcJ6QRIoSBDssHsEz9OyF1YvB702j0iySnxVLrd/5VsDjLSVVUt3UTr
         JeVFB5ksi9CFhPeBsO1/KYFoRR2N2R91JxPEsI4cz5Ubw2YkVzwdvvMVjTTYscXF9Cx7
         S7GA==
X-Gm-Message-State: AGRZ1gIIUQdZREYbNFUYBpdFu1sr1AXwsVY7oipUj3kQOEAAqQOKLAEO
	UWFZ41ZudPwuwzgmiktbSymN2b0qvxtCUnUZwzmj0FC1xeLYASg=
X-Received: by 2002:a63:fd53:: with SMTP id m19mr21395545pgj.340.1542649698896;
        Mon, 19 Nov 2018 09:48:18 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:d106:0:0:0:0 with SMTP id l6-v6csp2971612pju;
        Mon, 19 Nov 2018 09:48:18 -0800 (PST)
X-Google-Smtp-Source: AJdET5cMtApLjxHfNGdLbpdY3PC7Y9iD7gJCli6rP7rmhrDdVYEUjDdbg67WtmWVR8lY9/N70W7w
X-Received: by 2002:a17:902:9a02:: with SMTP id v2mr14693922plp.180.1542649697943;
        Mon, 19 Nov 2018 09:48:17 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542649697; cv=none;
        d=google.com; s=arc-20160816;
        b=AEMFA9WukDEBIkkoU6WsOXC9hNiq0C7ws2bDMTfrOQPJBNFchxYpjsE2vRf/akl5RN
         jd8pmwxiTcm1tnR6byM7rQHQUQ+6mUvwKrylP2vwXGt1wf1RhTODEp2ZaiXcMCvig4Ba
         Sw3N3zdHacAZqphydUZz2FFNMNL2fBhNtQ9BIUFM3kORVu4H4Rzjtd60azay1rxOprz7
         yl1Ol0ZOLqIcls6o/ar1oPVX3568EWlTozISbwavbJSClzmZbgVcTVuk2WIWLj21qyn8
         1H9guwg6teYg4ZC7kOqzB+ToJpcrmlTXwLkh+Y6BTok+jTyV1WQ6Yd49R/BOyhB+7F/+
         3a5g==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:content-transfer-encoding:mime-version
         :user-agent:references:in-reply-to:message-id:date:subject:cc:to
         :from:dkim-signature;
        bh=oxnTmrme8i+FyiMnE0FzKEpS6Kmvw2Ry/g/bQ/yUGeI=;
        b=oKuGthQMkLIWHeTBYlMSoM55rsU8HYN7rrjMYUGd3pKo2nFn/dz0UuVNc+ioAzfmaT
         VBi19vGFDn+ortaVjdQPd1iWTxQD/12WQMG2J5yGVoCH5V1UyuuIrZZA2N2vyHWbcTHy
         1pu7b6uEVljmlJa4mBNtOlifCrZ+vPNpVr6ybefWr5JIGfF4tShbRALQS+2zaa4AVTYg
         lg51bTn8ByL4KrL3llMpQ1Fs5HTYXPMEm2bq9JrLGvOKWqWoMDmy5rylwpTfcs1bB2cD
         HoLpV4jU+Rqf88AwESNB3DrPBeAkr+fQmDTKU0EQIG04n1ENC0IpwHMESWGeoqfROBig
         sqlw==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@kernel.org header.s=default header.b=Mo13jqA0;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id v5si38128331pgg.1.2018.11.19.09.47.59;
        Mon, 19 Nov 2018 09:48:17 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2388553AbeKTDJj (ORCPT <rfc822;nullbytes00@gmail.com>
        + 99 others); Mon, 19 Nov 2018 22:09:39 -0500
Received: from mail.kernel.org ([198.145.29.99]:44740 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S2387628AbeKTDJh (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 19 Nov 2018 22:09:37 -0500
Received: from localhost (5356596B.cm-6-7b.dynamic.ziggo.nl [83.86.89.107])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 18910214C4;
        Mon, 19 Nov 2018 16:45:25 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1542645925;
        bh=W3s7+45qjm3OinKuLZDNPfPd/LdRO57y2CCDAasMZ0U=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=Mo13jqA0RKHOtszlZZVf4g017ys/LBH7S15h5ZJo1srBOGrxJGQuwfKpbTAjMX8Q6
         C60E74Bi4XMv24UopwJuk0/ag5ZaFs27tFHdxbCk7XHff7gqLiHzft25z3tEEnF2ze
         L+5Ctezh0OGQ4Ge1hG8GDRvF+xcPiyoK8wPwQTng=
From: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
To: linux-kernel@vger.kernel.org
Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        stable@vger.kernel.org, Mike Kravetz <mike.kravetz@oracle.com>,
        Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>,
        Michal Hocko <mhocko@kernel.org>,
        Hugh Dickins <hughd@google.com>,
        Andrea Arcangeli <aarcange@redhat.com>,
        "Kirill A . Shutemov" <kirill.shutemov@linux.intel.com>,
        Davidlohr Bueso <dave@stgolabs.net>,
        Prakash Sangappa <prakash.sangappa@oracle.com>,
        Andrew Morton <akpm@linux-foundation.org>,
        Linus Torvalds <torvalds@linux-foundation.org>
Subject: [PATCH 4.18 141/171] hugetlbfs: fix kernel BUG at fs/hugetlbfs/inode.c:444!
Date: Mon, 19 Nov 2018 17:28:57 +0100
Message-Id: <20181119162638.911124048@linuxfoundation.org>
X-Mailer: git-send-email 2.19.1
In-Reply-To: <20181119162618.909354448@linuxfoundation.org>
References: <20181119162618.909354448@linuxfoundation.org>
User-Agent: quilt/0.65
X-stable: review
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwCHb0tj9_JbYpNZAA--.11493S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoW3WF4xtr4xKF1xZFy5JF47Arb_yoW7GFyfpF
	yfGF13Xw4kC398Kr97Xw40yrWruws3W3yxJr93Gw4rAw13Zw1FgF1IgFyfWayrCrZ3GayU
	Zr42qaykGw13XaDanT9S1TB71UUUUjUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUmYb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_tr0E3s1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Cr0_Gr1UM28EF7xvwVC2
	z280aVAFwI0_GcCE3s1l84ACjcxK6I8E87Iv6xkF7I0E14v26rxl6s0DM2kKe7AKxVWUXV
	WUAwAS0I0E0xvYzxvE52x082IY62kv0487Mc02F40EFcxC0VAKzVAqx4xG6I80ewAv7VC0
	I7IYx2IY67AKxVWUGVWUXwAv7VC2z280aVAFwI0_Gr0_Cr1lOx8S6xCaFVCjc4AY6r1j6r
	4UM4x0Y48IcxkI7VAKI48JMx02cVCv0xWlc7CjxVAKzI0EY4vE52x082I5MxkFs20EY4vE
	44CYbxCE4x80FwCY02Avz4vEIxC_GwCY0x0Ix7I2Y4AK64vIr41lcIIF0xvE2Ix0cI8IcV
	AFwI0_Ar0_tr1lcIIF0xvE2Ix0cI8IcVCY1x0267AKxVWxJVW8Jr1lcIIF0xvEx4A2jsIE
	14v26F4UJVW0owCYIxAIcVC2z280aVCY1x0267AKxVWxJr0_GcWl42xK82IYc2Ij64vIr4
	1l42xK82IY64kExVAvwVAq07x20xyl4x8a6x804xWl4I8I3I0E4IkC6x0Yz7v_Jr0_Gr1l
	x2IqxVAqx4xG67AKxVWUJVWUGwC20s026x8GjcxK67AKxVWUGVWUWwC2zVAF1VAY17CE14
	v26r1q6r43MIIYrxkI7VAKI48JMIIF0xvE42xK8VAvwI8IcIk0rVW8JVW3JbIYCTnIWIev
	Ja73UjIFyTuYvjxUQKhFDUUUU

4.18-stable review patch.  If anyone has any objections, please let me know.

------------------

From: Mike Kravetz <mike.kravetz@oracle.com>

commit 5e41540c8a0f0e98c337dda8b391e5dda0cde7cf upstream.

This bug has been experienced several times by the Oracle DB team.  The
BUG is in remove_inode_hugepages() as follows:

	/*
	 * If page is mapped, it was faulted in after being
	 * unmapped in caller.  Unmap (again) now after taking
	 * the fault mutex.  The mutex will prevent faults
	 * until we finish removing the page.
	 *
	 * This race can only happen in the hole punch case.
	 * Getting here in a truncate operation is a bug.
	 */
	if (unlikely(page_mapped(page))) {
		BUG_ON(truncate_op);

In this case, the elevated map count is not the result of a race.
Rather it was incorrectly incremented as the result of a bug in the huge
pmd sharing code.  Consider the following:

 - Process A maps a hugetlbfs file of sufficient size and alignment
   (PUD_SIZE) that a pmd page could be shared.

 - Process B maps the same hugetlbfs file with the same size and
   alignment such that a pmd page is shared.

 - Process B then calls mprotect() to change protections for the mapping
   with the shared pmd. As a result, the pmd is 'unshared'.

 - Process B then calls mprotect() again to chage protections for the
   mapping back to their original value. pmd remains unshared.

 - Process B then forks and process C is created. During the fork
   process, we do dup_mm -> dup_mmap -> copy_page_range to copy page
   tables. Copying page tables for hugetlb mappings is done in the
   routine copy_hugetlb_page_range.

In copy_hugetlb_page_range(), the destination pte is obtained by:

	dst_pte = huge_pte_alloc(dst, addr, sz);

If pmd sharing is possible, the returned pointer will be to a pte in an
existing page table.  In the situation above, process C could share with
either process A or process B.  Since process A is first in the list,
the returned pte is a pointer to a pte in process A's page table.

However, the check for pmd sharing in copy_hugetlb_page_range is:

	/* If the pagetables are shared don't copy or take references */
	if (dst_pte == src_pte)
		continue;

Since process C is sharing with process A instead of process B, the
above test fails.  The code in copy_hugetlb_page_range which follows
assumes dst_pte points to a huge_pte_none pte.  It copies the pte entry
from src_pte to dst_pte and increments this map count of the associated
page.  This is how we end up with an elevated map count.

To solve, check the dst_pte entry for huge_pte_none.  If !none, this
implies PMD sharing so do not copy.

Link: http://lkml.kernel.org/r/20181105212315.14125-1-mike.kravetz@oracle.com
Fixes: c5c99429fa57 ("fix hugepages leak due to pagetable page sharing")
Signed-off-by: Mike Kravetz <mike.kravetz@oracle.com>
Reviewed-by: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
Cc: Michal Hocko <mhocko@kernel.org>
Cc: Hugh Dickins <hughd@google.com>
Cc: Andrea Arcangeli <aarcange@redhat.com>
Cc: "Kirill A . Shutemov" <kirill.shutemov@linux.intel.com>
Cc: Davidlohr Bueso <dave@stgolabs.net>
Cc: Prakash Sangappa <prakash.sangappa@oracle.com>
Cc: <stable@vger.kernel.org>
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

---
 mm/hugetlb.c |   23 +++++++++++++++++++----
 1 file changed, 19 insertions(+), 4 deletions(-)

--- a/mm/hugetlb.c
+++ b/mm/hugetlb.c
@@ -3240,7 +3240,7 @@ static int is_hugetlb_entry_hwpoisoned(p
 int copy_hugetlb_page_range(struct mm_struct *dst, struct mm_struct *src,
 			    struct vm_area_struct *vma)
 {
-	pte_t *src_pte, *dst_pte, entry;
+	pte_t *src_pte, *dst_pte, entry, dst_entry;
 	struct page *ptepage;
 	unsigned long addr;
 	int cow;
@@ -3268,15 +3268,30 @@ int copy_hugetlb_page_range(struct mm_st
 			break;
 		}
 
-		/* If the pagetables are shared don't copy or take references */
-		if (dst_pte == src_pte)
+		/*
+		 * If the pagetables are shared don't copy or take references.
+		 * dst_pte == src_pte is the common case of src/dest sharing.
+		 *
+		 * However, src could have 'unshared' and dst shares with
+		 * another vma.  If dst_pte !none, this implies sharing.
+		 * Check here before taking page table lock, and once again
+		 * after taking the lock below.
+		 */
+		dst_entry = huge_ptep_get(dst_pte);
+		if ((dst_pte == src_pte) || !huge_pte_none(dst_entry))
 			continue;
 
 		dst_ptl = huge_pte_lock(h, dst, dst_pte);
 		src_ptl = huge_pte_lockptr(h, src, src_pte);
 		spin_lock_nested(src_ptl, SINGLE_DEPTH_NESTING);
 		entry = huge_ptep_get(src_pte);
-		if (huge_pte_none(entry)) { /* skip none entry */
+		dst_entry = huge_ptep_get(dst_pte);
+		if (huge_pte_none(entry) || !huge_pte_none(dst_entry)) {
+			/*
+			 * Skip if src entry none.  Also, skip in the
+			 * unlikely case dst entry !none as this implies
+			 * sharing with another vma.
+			 */
 			;
 		} else if (unlikely(is_hugetlb_entry_migration(entry) ||
 				    is_hugetlb_entry_hwpoisoned(entry))) {

