Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  15 Dec 2018 13:11:14 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id BD84B5805FC;
	Fri, 14 Dec 2018 15:24:50 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by fmsmga006-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 14 Dec 2018 15:24:50 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AX/RUQBMVyjPedMwcIVcl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KPnzrsbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs7Xims77pwSB/wli?=
 =?us-ascii?q?gIKyI5/m/Qisx1lq1boRShrAF7z4PbZIyZMfxzdb7fc9wHX2pMRshfWSxfDI2h?=
 =?us-ascii?q?bIUAAPYOMvtWoInmv1sDrwCzBQawCO710DJEmmX70bM83u88EQ/GxgsgH9cWvX?=
 =?us-ascii?q?rOttr1KrkdUeSox6fP1zrMc/NW1in+6IPVdR0hueuDXaxufsrV0kQvCh/Kj1uK?=
 =?us-ascii?q?pYP5PjKYz+IAuHWV4epnUOKgkW8nqwdprzirx8cslJfGhoASylDZ7yV5xpw6Jd?=
 =?us-ascii?q?miREFnZt6kFYNcuD2HN4twQ8MuWX1nuSc8x7YbupC7ZDAHxIo7yxPbcfCLboaF?=
 =?us-ascii?q?7gz5WOqMIjp0mGhpdbO9ihqq7EStzu3xWtOp3FpXoCdJiMfAu3EX2xDO7sWKRP?=
 =?us-ascii?q?1w9Vq71zmVzQDc8ORELFg0laXFL54hxaY9loQcsUvdBC/6gkb2g7GMdkUi5Oeo?=
 =?us-ascii?q?7/7rYrL8pp+TL4N0iwf+PboymsGnH+g0LgwDU3KG9emyyrHv51D1TbZWgvEsk6?=
 =?us-ascii?q?TUsojWJcEBqa64Bw9V3Jwj6xG6Dzq+1NQYnH8HLE9KeR6ejIjmJUvOIPbmAve7?=
 =?us-ascii?q?mlislzlqx/bYMb37GZjNMHfDn6n7fbpn6E5T1hAzzdZB6JJQEL0BJ+jzWkDpuN?=
 =?us-ascii?q?zCEhA5KxC0w/rgCNhl0oMeWGGPDbGDPKLdrF+F/eYvI+iKZI8ItzfxMfkl5/jy?=
 =?us-ascii?q?jXAnnV8RZ7Wm3ZwSaHqgBPRpP12ZYWbwgtcGCWoKvhAxTO32iFKYVj5ffXayX7?=
 =?us-ascii?q?8m6TE9B4KrFoPDRoGrgLyc0ya3BJxWZmZaCl+SFXfkbZmLW/AJaCiKOM9ujiQE?=
 =?us-ascii?q?VaS9S48mzRyutgj6xKR9IurX/S0Ys5Tj1N9u6u3XlBEy8yF0DsuH32GMSWF0gn?=
 =?us-ascii?q?0HRzss0K9jpkx9z0+J0bJkjPxACdxT+/RJXx8gOp7Hz+x6DNPyVhjbftiTSlar?=
 =?us-ascii?q?WdGmATA3TtIszN4CeUd9G9O+jh/d2yqmGaMal7uOBJYs6KLTw2DxJ9phy3bBzK?=
 =?us-ascii?q?QhjEMpQs1VOW2ih65w7Q7TB4HSnkWdlqaqc7kc3SHX+GeCy2qOoF9XUApqXarZ?=
 =?us-ascii?q?WnAfY1Pcrc7l6UPaU7+uFbMnPxNcxsGYNKtFdMfljVVcS/flI9TRfWSxl2C0BR?=
 =?us-ascii?q?aLw7OMaJHne2Ec3CXbFUgFnBof/XeANQgiGCihp3jSAyBpFVLqe0ns6/VxqGun?=
 =?us-ascii?q?Tk8oyAGHd1Bu2KCr+hELn/CcS+kc3rQfuCg/rTV5B1K939PQC9qdqAttZqRcYd?=
 =?us-ascii?q?Uh4FhZ0WLVrRByPpulL6p6nF4Rbxx3v1/y1xVwEohAjckqrHYtzApuKaKZ0ElN?=
 =?us-ascii?q?dy+C0ZD3IL3XLmjy/Baga6PN3lHe0dCW+roA6fgiqlXjuh2pGVQm83l9z9ZV1H?=
 =?us-ascii?q?6c7I3QDAUOSZLxTlo39x9iqr7AZiky+YzV2mNsMKWuqTDCxs8mC/EjyhajeNdf?=
 =?us-ascii?q?LriJFAvzE80cGsivJ/Ymm1mvbhIYIu9S8LQ4MN+hd/uDwKSrJvpvnCq6jWRb54?=
 =?us-ascii?q?BwykKN9zdmRuHUxZoEwvGY0RGBVzfzl1qhtsH3mYZZZTAdBGa/yC7kBJJPaa12?=
 =?us-ascii?q?Z4oEFWCuI8ivzNVkm5HtQ2JY9EKkB14ews+peAadYEbn3QJN0kQbu3qnljWizz?=
 =?us-ascii?q?x1ij0msrCQ3CjTzOv8bhoHPWhLSXJmjVftJ4i0kt8bUFKpbwgviBuq+0L6y7JH?=
 =?us-ascii?q?q6R4KmnZWV1IcDTuL2F+TquwsaKPYs5O6J8ysSRbSv+8YU2cSrPmpxsa0iXjH3?=
 =?us-ascii?q?ZRxTwhdjGqvIn5kAJ+iG6HMHlzq3/Zc9lqxRjD/NzcWeJR3j0eSSl6kzbXHFu8?=
 =?us-ascii?q?P9qu/dmOjJfMqOO+V2GgVp1Vbybry5iNtC+65W1sHB2+kOq/mtzhEQgmzyD708?=
 =?us-ascii?q?NmWjnPrBb5eoPrzbi1Mfp7fkl0A1/x88p7FZt5kocqhpEQ2H4ai46R/XoGl2fz?=
 =?us-ascii?q?LNpa1bj/bHoLWT4E3drV7BL5101kK3KD35j5WWmFwst9e9m6ZXsb2iEn4MBLEq?=
 =?us-ascii?q?uU7KFEkjFzolq3tg/RZfl9njEAyfoh8nIagucJuBYzwSWZGLwdAU5YPSn0nRSS?=
 =?us-ascii?q?89++tLlXZHqocbWo0Up+nNOhA6uYrgBSRnn5YYsiEjFq7spkLl3MynLz55rgeN?=
 =?us-ascii?q?nRa9ITqxKVnw3Bj+hTNJI+iP4KiTB7NmL6uH0v0/Q7ggB23ZGmoIiHLH1g/L6+?=
 =?us-ascii?q?Ah5dLDH0Ztkc+jfwjaZFhcaW3puiHpFgGjUNQZvpQuikEDMUtfT7KQmOFCcwpW?=
 =?us-ascii?q?ucGbraBQWf8ltpr2rTE5C3MHGaPGIWws9lRBmZOUxTmgQUXCghk549FwCqwtHh?=
 =?us-ascii?q?cUhj6jAQ4F74tgVDyuZyOxbjVWffoR+iai0oR5iHMBpW8gZC6l/XMcOE6+J8AT?=
 =?us-ascii?q?pY8oe9rACXKWybegdIDXwPWkOeHFDuJb2u5djG8+iFCeuyNfrOYbOSqeNAU/eE?=
 =?us-ascii?q?346g0oxj/zyULMWAImFiD+En2kpERX14G8PZmygWSywKjS3NadSXpAy7+i1xoc?=
 =?us-ascii?q?Cy6/DrWAPp5YuSBLpeK9Rv+xaqgaidM+6cnjp2KTFd1pkU33/H1KAf3EIOiyFp?=
 =?us-ascii?q?bzStEaoPtS/OTKLTm69bFR0bazl0NMtH8a08xBRNOdXAh9Px1754iOM1ClhfWV?=
 =?us-ascii?q?zgnMGpedIFI2WnOFzbA0aLMayMJSfXzMHvfaO8VbpQgf1OuB2tojmbCVHsPzSZ?=
 =?us-ascii?q?mzntVhCiKuVMjCCdPBxDt4CxaBdtCW7/TN34bh23KsN4jTozwbcsnHPFKXYcMS?=
 =?us-ascii?q?Rgc0NKtrCQ8SJYgvBlF2Nd9HZqMemElDif7+TDLpYWsP1rAjl7lu5A4XQ6zadV?=
 =?us-ascii?q?4z9ARPBvhCTSqdtuqUm8kuaT0jpnTAZOqjFTiYOLp0piP6DZ9phGWXnc/RMN7X?=
 =?us-ascii?q?+fCxIFp9Z+Dt3vuqZQysXAla7pKTdC9c7U8tUYB8TONM2HN38hYlLVH2vXARED?=
 =?us-ascii?q?QDrjMWDEmwQJlPCU623QrZUgrJXosIQBR6UdV1EvEP4eTEN/E4pGaJV2XTQ/ua?=
 =?us-ascii?q?WGl8NO7mj65AfWRtlXtZDvTe+JDLPkOnLRibhCegtNwLXgMJg7KIL2wQphZ0N8?=
 =?us-ascii?q?kYCMHFDfGZhBpyx9dB5yvEJX93t+SXMb1Efsawfr63gWRtCumRtjsgJgbOBl0T?=
 =?us-ascii?q?7n41o0bg7SrTU9lGEsksqjiiLHI225F7u5QYwDU3m8jEM2KJ6uH1d4?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AtAABMOxRch0O0hNFkFggBBgcGgVEJC?=
 =?us-ascii?q?wGBWoEPgQIniQGPDIIhjXs0iRQUgVkGDx0LCAGBS4V8IjQJDQEDAQEBAQEBAgE?=
 =?us-ascii?q?TAQEBCA0JCCkjDII2DIMCAiRYCQIrJQMMBRgxARIFFII9SwGCAAQBCqRVgiEzi?=
 =?us-ascii?q?FKBSg+CbYlRF4F/hzYLA4Ejg3SCJgKJHiAEl1YJgiiEZYpCIwpWgUqPKIMIhjO?=
 =?us-ascii?q?Edox2gg4zGggwgycJgh4Xg0ooiiw+MwEBgQMBAY0+AQE?=
X-IPAS-Result: =?us-ascii?q?A0AtAABMOxRch0O0hNFkFggBBgcGgVEJCwGBWoEPgQIniQG?=
 =?us-ascii?q?PDIIhjXs0iRQUgVkGDx0LCAGBS4V8IjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjD?=
 =?us-ascii?q?II2DIMCAiRYCQIrJQMMBRgxARIFFII9SwGCAAQBCqRVgiEziFKBSg+CbYlRF4F?=
 =?us-ascii?q?/hzYLA4Ejg3SCJgKJHiAEl1YJgiiEZYpCIwpWgUqPKIMIhjOEdox2gg4zGggwg?=
 =?us-ascii?q?ycJgh4Xg0ooiiw+MwEBgQMBAY0+AQE?=
X-IronPort-AV: E=Sophos;i="5.56,354,1539673200"; 
   d="asc'?scan'208";a="56983339"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 14 Dec 2018 15:24:49 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729519AbeLNXYm (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 14 Dec 2018 18:24:42 -0500
Received: from atrey.karlin.mff.cuni.cz ([195.113.26.193]:58433 "EHLO
        atrey.karlin.mff.cuni.cz" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726423AbeLNXYm (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 14 Dec 2018 18:24:42 -0500
Received: by atrey.karlin.mff.cuni.cz (Postfix, from userid 512)
        id 40B3B80935; Sat, 15 Dec 2018 00:24:34 +0100 (CET)
Date: Sat, 15 Dec 2018 00:24:37 +0100
From: Pavel Machek <pavel@ucw.cz>
To: kernel list <linux-kernel@vger.kernel.org>, jikos@suse.cz,
        vojtech@suse.cz, linux-input@vger.kernel.org,
        dmitry.torokhov@gmail.com
Subject: [rfd] saving old mice -- button glitching/debouncing
Message-ID: <20181214232437.GA8310@amd>
MIME-Version: 1.0
Content-Type: multipart/signed; micalg=pgp-sha1;
        protocol="application/pgp-signature"; boundary="2fHTh5uZTiUOsy+g"
Content-Disposition: inline
User-Agent: Mutt/1.5.23 (2014-03-12)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org


--2fHTh5uZTiUOsy+g
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable


I believe I have hardware problem, but I'm kind of hoping software
could help me...?

Mouse wheel on my machine started glitching on my machine, generating
double-clicks when I click it once. Which unfortunately is quite
annoying: texts are pasted twice, two tabs are closed instead of one,
=2E...

Event: time 1544733054.903129, type 4 (EV_MSC), code 4 (MSC_SCAN), value 90=
003
Event: time 1544733054.903129, type 1 (EV_KEY), code 274 (BTN_MIDDLE), valu=
e 1
Event: time 1544733054.903129, -------------- EV_SYN ------------
            1544733054.967251, type 4 (EV_MSC), code 4 (MSC_SCAN), value 90=
003
Event: time 1544733054.967251, type 1 (EV_KEY), code 274 (BTN_MIDDLE), valu=
e 0
Event: time 1544733054.967251, -------------- EV_SYN ------------
Event: time 1544733054.975144, type 4 (EV_MSC), code 4 (MSC_SCAN), value 90=
003
Event: time 1544733054.975144, type 1 (EV_KEY), code 274 (BTN_MIDDLE), valu=
e 1
Event: time 1544733054.975144, -------------- EV_SYN ------------
     : time 1544733065.127190, type 4 (EV_MSC), code 4 (MSC_SCAN), value 90=
003
Event: time 1544733065.127190, type 1 (EV_KEY), code 274 (BTN_MIDDLE), valu=
e 0
Event: time 1544733065.127190, -------------- EV_SYN ------------

Now, I could just buy a new mouse, but it seems that most optical mice
die like this... so maybe it would be nice to have an option to
debounce the buttons, so that the useful life of mice is extended a
bit?

(So... I have two mice with that fault -- cheap to replace, but button
in thinkpad X220 started doing that, too. That one will not be so
cheap to fix :-( ).

It is possible that some X versions already do something like this.

Patch is obviously not ready; but:

a) would it be useful to people

b) would it be acceptable if done properly? (cmd line option to
enable, avoiding duplicate/wrong events?)

Thanks,
								Pavel
Signed-off-by: Pavel Machek <pavel@ucw.cz>

diff --git a/drivers/input/input.c b/drivers/input/input.c
index 3304aaa..ce0d081 100644
--- a/drivers/input/input.c
+++ b/drivers/input/input.c
@@ -40,6 +40,11 @@ static DEFINE_IDA(input_ida);
 static LIST_HEAD(input_dev_list);
 static LIST_HEAD(input_handler_list);
=20
+static void input_repeat_key(struct timer_list *t);
+static void input_debounce_key(struct timer_list *t);
+
+static int debounce =3D 20;
+
 /*
  * input_mutex protects access to both input_dev_list and input_handler_li=
st.
  * This also causes input_[un]register_device and input_[un]register_handl=
er
@@ -77,6 +82,7 @@ static void input_start_autorepeat(struct input_dev *dev,=
 int code)
 	if (test_bit(EV_REP, dev->evbit) &&
 	    dev->rep[REP_PERIOD] && dev->rep[REP_DELAY] &&
 	    dev->timer.function) {
+		dev->timer.function =3D input_repeat_key;
 		dev->repeat_key =3D code;
 		mod_timer(&dev->timer,
 			  jiffies + msecs_to_jiffies(dev->rep[REP_DELAY]));
@@ -88,18 +94,42 @@ static void input_stop_autorepeat(struct input_dev *dev)
 	del_timer(&dev->timer);
 }
=20
+static void input_start_debounce(struct input_dev *dev, int code)
+{
+	dev->timer.function =3D input_debounce_key;
+	dev->debounce_key =3D code;
+	mod_timer(&dev->timer,
+		  jiffies + msecs_to_jiffies(debounce));
+}
+
+static void input_stop_debounce(struct input_dev *dev)
+{
+	del_timer(&dev->timer);
+	dev->debounce_key =3D -1;
+}
+
 /*
  * Pass event first through all filters and then, if event has not been
  * filtered out, through all open handles. This function is called with
  * dev->event_lock held and interrupts disabled.
  */
-static unsigned int input_to_handler(struct input_handle *handle,
+static unsigned int input_to_handler(struct input_dev *dev, struct input_h=
andle *handle,
 			struct input_value *vals, unsigned int count)
 {
 	struct input_handler *handler =3D handle->handler;
 	struct input_value *end =3D vals;
 	struct input_value *v;
=20
+	if (!test_bit(EV_REP, dev->evbit) && test_bit(EV_KEY, dev->evbit) && debo=
unce)
+		for (v =3D vals; v !=3D vals + count; v++) {
+			if (v->type =3D=3D EV_KEY && v->value =3D=3D 0 && dev->debounce_key =3D=
=3D -1) {
+				input_start_debounce(dev, v->code);
+				v->code =3D -2;
+			}
+			if (v->type =3D=3D EV_KEY && v->value =3D=3D 1 && dev->debounce_key =3D=
=3D v->code)
+				input_stop_debounce(dev);
+		}
+
 	if (handler->filter) {
 		for (v =3D vals; v !=3D vals + count; v++) {
 			if (handler->filter(handle, v->type, v->code, v->value))
@@ -117,8 +147,9 @@ static unsigned int input_to_handler(struct input_handl=
e *handle,
 	if (handler->events)
 		handler->events(handle, vals, count);
 	else if (handler->event)
-		for (v =3D vals; v !=3D vals + count; v++)
+		for (v =3D vals; v !=3D vals + count; v++) {
 			handler->event(handle, v->type, v->code, v->value);
+		}
=20
 	return count;
 }
@@ -141,11 +172,11 @@ static void input_pass_values(struct input_dev *dev,
=20
 	handle =3D rcu_dereference(dev->grab);
 	if (handle) {
-		count =3D input_to_handler(handle, vals, count);
+		count =3D input_to_handler(dev, handle, vals, count);
 	} else {
 		list_for_each_entry_rcu(handle, &dev->h_list, d_node)
 			if (handle->open) {
-				count =3D input_to_handler(handle, vals, count);
+				count =3D input_to_handler(dev, handle, vals, count);
 				if (!count)
 					break;
 			}
@@ -203,6 +234,27 @@ static void input_repeat_key(struct timer_list *t)
 	spin_unlock_irqrestore(&dev->event_lock, flags);
 }
=20
+/*
+ * Generate software autorepeat event. Note that we take
+ * dev->event_lock here to avoid racing with input_event
+ * which may cause keys get "stuck".
+ */
+static void input_debounce_key(struct timer_list *t)
+{
+	struct input_dev *dev =3D from_timer(dev, t, timer);
+	unsigned long flags;
+
+	struct input_value vals[] =3D  {
+		{ EV_KEY, dev->debounce_key, 0 },
+		input_value_sync
+	};
+
+	spin_lock_irqsave(&dev->event_lock, flags);
+	input_pass_values(dev, vals, ARRAY_SIZE(vals));
+	input_stop_debounce(dev);
+	spin_unlock_irqrestore(&dev->event_lock, flags);
+}
+
 #define INPUT_IGNORE_EVENT	0
 #define INPUT_PASS_TO_HANDLERS	1
 #define INPUT_PASS_TO_DEVICE	2
@@ -2109,6 +2161,8 @@ int input_register_device(struct input_dev *dev)
 	/* Every input device generates EV_SYN/SYN_REPORT events. */
 	__set_bit(EV_SYN, dev->evbit);
=20
+	dev->debounce_key =3D -1;
+
 	/* KEY_RESERVED is not supposed to be transmitted to userspace. */
 	__clear_bit(KEY_RESERVED, dev->keybit);
=20
diff --git a/include/linux/input.h b/include/linux/input.h
index 7c7516e..b2458b2 100644
--- a/include/linux/input.h
+++ b/include/linux/input.h
@@ -150,6 +150,7 @@ struct input_dev {
=20
 	struct ff_device *ff;
=20
+	int debounce_key;
 	unsigned int repeat_key;
 	struct timer_list timer;
=20


--=20
(english) http://www.livejournal.com/~pavelmachek
(cesky, pictures) http://atrey.karlin.mff.cuni.cz/~pavel/picture/horses/blo=
g.html

--2fHTh5uZTiUOsy+g
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: Digital signature

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iEYEARECAAYFAlwUO7UACgkQMOfwapXb+vKRVACeL0xsqlOvtXPbv2fwmMY6SLEW
HWMAnixQC3dPZJPjQ68BsERor4JfQ2ss
=h2fb
-----END PGP SIGNATURE-----

--2fHTh5uZTiUOsy+g--
