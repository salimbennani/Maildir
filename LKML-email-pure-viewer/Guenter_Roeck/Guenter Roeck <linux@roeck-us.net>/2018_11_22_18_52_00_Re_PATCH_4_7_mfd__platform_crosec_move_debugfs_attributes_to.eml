Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 23 Nov 2018 08:30:54 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 8638D58037D;
	Thu, 22 Nov 2018 10:52:11 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 22 Nov 2018 10:52:10 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AR7qqgxFIEFkCBSW99gsX9p1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75os6/bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJWSJPAp2y?=
 =?us-ascii?q?YZYMAeoPMulXs5TyqFkAohulHQmhBvjiyiNUinLswaE2z/4sHR/A0Qc9H9wOqn?=
 =?us-ascii?q?PUrNDtOakTTOC60q/IzSndYPNMxDzz9I/IfQ49rvGPQLl9ds7RyUgpFwPYgVSd?=
 =?us-ascii?q?spblPzSL2esRsGiX9vdgVfm1h24htQ5xviGiy8ExgYfKnoIY0k7I+Tl9zYovON?=
 =?us-ascii?q?G1RlB3bcS5HJZTqy2WLYp7T8E6T212uSs21qEKtJumcCUI1Jgr2xvSZOKJfoSW?=
 =?us-ascii?q?/x7uUeecLSl2hH55fb+yiQi+/Ey8xeD5SMW53lhKriRAn9nCqH8CyRLe582DR/?=
 =?us-ascii?q?Rg/EquxTCC3B3J5O5eO0A7j6/bJoYhwrEukpoTtlzOHjH5mErolq+abEYk9fay?=
 =?us-ascii?q?6+ThfLrmooWQN4huigHxKqgum8q/DvokMgUWQWSX5eCx2Kf+8UD3XrlGlOA6n6?=
 =?us-ascii?q?rFvJzAJMkWpLa1AwpP3YYi7xa/AS2m0NMdnXQfKFJFeRSHj5XmOl3XI/D3E+2/?=
 =?us-ascii?q?g1Kynzdv3vzGObPgApPTIXjZi7rhY7l95FBGyAYpztBQ+YhUCrcfL/L3QEPxs8?=
 =?us-ascii?q?bYDhAhPwyu3+nnEMl91p8ZWW+XBq+ZMaDSvkGS6uMgPumBf4sVuDf7K/g46P/i?=
 =?us-ascii?q?l345mVkBfaa32Zsbcmy3HvNjI0+Be3rjns8BEXsWvgo5VOHqiEeNUT9PZ3moWK?=
 =?us-ascii?q?Iw/DE7CJ+8AofFSYCgm7iB3Ca9Hp1LaWFKEFGMEXH0d4qaX/cAcj6dIshkkjYc?=
 =?us-ascii?q?T7iuV5ch1Q2ytA/907dnLO3U9TMCuZLg09h14evTlRYp+DxwDsSd1XyNTm5ukm?=
 =?us-ascii?q?MJQT82wL5woUhnxlif1qh4huRSFcZP6PNRTgc6KZncwvRgBNDpWgLBedSJREy8?=
 =?us-ascii?q?Qtq8AzE8VdYxw94IY0ZgFNSulBHD3yy2A7ALk7yHHoA78qXZ33LpPcZy127G1L?=
 =?us-ascii?q?U9j1khWsZPNnephqhl+wjXBo7GiUOZl6mxeKQY3S7N8nqDzGWUsEFZVg5wTbvK?=
 =?us-ascii?q?XXQFakTKqtT541vIT6WyBrQ/LgtB1cmCJ7NXZdLzk1VJWu3vONTEbGK3gGe/Gx?=
 =?us-ascii?q?CIyrSIbIrpfmUd2D7QCEwFkwAV4HaHOhIyBiano2LCEjNuEUjjbF/r8el7sHm7?=
 =?us-ascii?q?VFM7zxmWb0190Lq44gMaiuaCS/wNxL4EuD0uqzNvHFmj2dLbEN6ApwtnfKVBbt?=
 =?us-ascii?q?Ix+lZH1WTFtwNjOpysNbxthlkbcw5vpUPhyw13CplckcgttH4q0AtyKaef0FNd?=
 =?us-ascii?q?dzOZ3Yr8OqHNJmn15hCvb6/W2lfR0NuN/qcP6fI4q0jsvQ2zF0oi9Wln3MdR03?=
 =?us-ascii?q?eG+prKCw8SW4rrUkkr7xh6u63aYi4l6ozO0X1jL6a1vSHC2t4zH+Ql1wuvcM1Z?=
 =?us-ascii?q?MKOHEw/yDdYXB8yvKOwshlioYQgIPOFU9K4oIcymc+GK17KsPOZlhDiml3hI4J?=
 =?us-ascii?q?hh0kKQ8CpxUu7J34sfz/6ExAeGVjf8g02nssD4go1EYTASHmyiySnrHoJRZ6ty?=
 =?us-ascii?q?fZoVBmeqOcG42tJ+h5v1UX5C6FGjH08G2NOueReKdVz93BFf2l4NoXO6niu01T?=
 =?us-ascii?q?p0nC8zrqqexSDB3/7tdB4aNWFVXmliilHsLJOwj9AbWkiocgcomAGk5Ub826hU?=
 =?us-ascii?q?uqB/I3PPTkdPeij8N3tiXbeotrqef85P74slsCVWUOimYVGWUKX9owYc0y74G2?=
 =?us-ascii?q?texTY7dyylu5njnhx6jn6dI2h3rHbDZc5wwhLf7sTGRfFNxjoGWDV4iT7PC1i+?=
 =?us-ascii?q?Jdap59aUl5TEsuykTGKuTJ5TcSrqzYOGqiS743ZnARm+n/C1h93mHhI20S7919?=
 =?us-ascii?q?l2SyrIqAzwbZXs16S/KehnZFVnBEfg68pmHYFziosxi4sX2XQAhJWV/HwHnHz3?=
 =?us-ascii?q?MdVa36L+cXUMSSQKw97T/AjqxkljImiVyIL+U3WX2tFhaMWiYmMKxiI96NhHCK?=
 =?us-ascii?q?SO47xFhyd1oke4ohjXYfhyhTodzfou6HgHg+AGogYtzyOdAqwMEklcJyDjixOI?=
 =?us-ascii?q?79WmpqVNeGmvaaSw1FZ5nd25CbGCowJcV2zjdpYsAyBw9dl/P0zW0HLo9I7kYt?=
 =?us-ascii?q?bQYMkXth2VlRfAkudUJIgwlvoMmSpoJ2b9sWc5xO48iBxkxYu6s5SfK2Vx4KK5?=
 =?us-ascii?q?BQZVNiHyZ8MW4D3sjLxRnsCL34C0BZVhGy4GXJ/pTfKuDTITuu7rNweIED0gtH?=
 =?us-ascii?q?ibHaDTEhOY6Edjt3jPCYykN2mLJHkFytVvXAKSK1ZYgAAQQTU2hJo5Fh2xyczl?=
 =?us-ascii?q?cUd54C0R51HiphtNzOJoKwfwUmPFqAi0bTc0TYCVLABK4QFa+0fVLcue4/pxHy?=
 =?us-ascii?q?5C+52usheNJnaHZwhSDmEJR0+EB03lPra0/tnN6OyYBuu4L/vTbrSCs+1eV/GU?=
 =?us-ascii?q?xZ2x1otq5SqDNsKKPnN6Ff00xlJDXWxlG8TegzgOSysXlz/Ub86Gvhi8/Dd7rt?=
 =?us-ascii?q?u48PTtVwLi/o+PC7pUMdVy9BG6m6aDN+iMhClnLTZUzI8DxXjNyLIHxl4dlzlu?=
 =?us-ascii?q?dyWxEbQHrSPNTLzfmq5UDx4YaiN/LshI77g73glCJ8HbkM711qVjg/4xCldFU0?=
 =?us-ascii?q?Hhm86zacwLJWG9KE3IBEKROLuaIj3Lxtn9YbmgRr1IkOVUqxqwtC6BHE/+JTuD?=
 =?us-ascii?q?jSfmVhC1PeFIjSGWJxheuIC7chZwBmnvVtPmahunMNBpiT0626E7hnTPNWQEKz?=
 =?us-ascii?q?hzb1tNrqGM7SNfmvh/B21B7n9/IeaYgSqW8+nYJYgQsfZwBiR0luRa4Gk1yrdP?=
 =?us-ascii?q?7SFEQuB1lzXWrtJ0v16mleyPwCJ9UBVSsjZLmJ6LvUJ6NKTZ7JZAX3PE/BML7W?=
 =?us-ascii?q?qIChUKp8FqCtvgu61LztjPlaTzKCpN8t7O/MscAdTUJ9yDMHY7LRXpHzvUX0M5?=
 =?us-ascii?q?SmuGM3vejAR3mfWW+2GfqdA74qPhgoAHAutWUkY0HbUQA0BhEcAIJ798WTcgmL?=
 =?us-ascii?q?SclsdO7n27+kr/XsJf67/aW/SODO+nEjGUhroMMx8Jx67oBZ4UO4b4nlF5LF93?=
 =?us-ascii?q?gNKZSALrQdlRr3g5PUcPq0JX/S07FzVr1g=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAAD3+fZbh0O0hNFiGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGBMII7J4wQjACCDRSXJoF2DwEBGBMBiFIiNAkNAQM?=
 =?us-ascii?q?BAQEBAQECARMBAQEIDQkIKSMMgjYkAYJhAQEBAQIBAQIkEwYBOAEDAgkBAQUFG?=
 =?us-ascii?q?AklAwwFIAEFASITBYMcgWoDDQgBBJ1YPIwJM4J3BYR8DYIRAgYSiluBHBeBf4Q?=
 =?us-ascii?q?jiDOCJgKJGQqFdndOjyQJkSQjiVGHNyyXXQIEAgQFAgUPIYElgg0zGggmCoMng?=
 =?us-ascii?q?hsMFxKDOIpzHzKBAgMBASETiVMEJYIkAQE?=
X-IPAS-Result: =?us-ascii?q?A0ABAAD3+fZbh0O0hNFiGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGBMII7J4wQjACCDRSXJoF2DwEBGBMBiFIiNAkNAQMBAQEBAQECARMBA?=
 =?us-ascii?q?QEIDQkIKSMMgjYkAYJhAQEBAQIBAQIkEwYBOAEDAgkBAQUFGAklAwwFIAEFASI?=
 =?us-ascii?q?TBYMcgWoDDQgBBJ1YPIwJM4J3BYR8DYIRAgYSiluBHBeBf4QjiDOCJgKJGQqFd?=
 =?us-ascii?q?ndOjyQJkSQjiVGHNyyXXQIEAgQFAgUPIYElgg0zGggmCoMnghsMFxKDOIpzHzK?=
 =?us-ascii?q?BAgMBASETiVMEJYIkAQE?=
X-IronPort-AV: E=Sophos;i="5.56,266,1539673200"; 
   d="scan'208";a="53384482"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 22 Nov 2018 10:52:08 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2406569AbeKWFcm (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 23 Nov 2018 00:32:42 -0500
Received: from mail-pf1-f193.google.com ([209.85.210.193]:39072 "EHLO
        mail-pf1-f193.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S2404536AbeKWFcm (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 23 Nov 2018 00:32:42 -0500
Received: by mail-pf1-f193.google.com with SMTP id c72so2279832pfc.6
        for <linux-kernel@vger.kernel.org>; Thu, 22 Nov 2018 10:52:03 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=sender:date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=O0vfx+uyRQqAcdBqfEuTqQctH1f5rEonNvzSVKeNXKo=;
        b=CrS+LEnZKxJq0lekl2KIGTyI04LfSGEbHmK54YFOx/vuqsGyS3GPXjZVotvA1sFXo4
         7WoMhY7u0Q9m/Wc77bQVAGGJarLKnRX1+QDJiS6HGokyNh6ybXlFKQsnvD8O8plNVtMl
         RGeJTWoFK88FNcvr+zXmnuujzVmMHzhgCceQTH9EiuyRAiUIlfTSLeqaskG+m08y+lY2
         xNILgBp7KANCNUJczPefhO6E2R76ynEmHVTxDiaFSPSntPXEo9/Nt1T1rV1j7rSvnaLr
         LmKcLWJNrXLIOu1UwVcjYZ4uvaT1wEZl8QPYvl0qM2kRsQ/ZyrrLm9AwsLWBbjrw5WdT
         h3Cg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:sender:date:from:to:cc:subject:message-id
         :references:mime-version:content-disposition:in-reply-to:user-agent;
        bh=O0vfx+uyRQqAcdBqfEuTqQctH1f5rEonNvzSVKeNXKo=;
        b=SAWHhGCf7OBE0WxlrPJx80Tb9Gh1beDy8NoatY+sdIgTNqWCPbd7qg5xDSeAHIyZx4
         4bLBVvr1lQ0K+qCt4k/Oy2iKuo0GPUNdluvzSR+Lgtk17NFmOQeUBxY48HcC+Lp3sFFI
         XMX/6KbNJN4xZAUYGeg3joMmMRS1rPHgwUfNJoVEXqYCchJ3qlAyzntt4bf1pZ+mWNTs
         5OfbZobENw9373a0K/5b+P9INihUTLCFfzrs5g0ZSTDULeXBkLzoTON58FltRRyOtG7t
         w6VucRSKRHZhvIXHabg+FYPlz8fEYBMNOlnr/tEIGDLtBsp6cC7jbzL0mrMWlO7Ru6EH
         o5ZA==
X-Gm-Message-State: AA+aEWZ6/qnQpq1u1lTKO0PlJ2XQ7OvqfRoyu+VYFVMmIQNizEyF9mbM
        JySHENg/yjtN9xBrSRb+spc=
X-Google-Smtp-Source: AFSGD/U3qGba1lAXmM55a23sTczXbxoHBb+m/0La8MMsiEpQy1L+fY/TvoHYuo46dATUqMB8WrJesw==
X-Received: by 2002:a63:d818:: with SMTP id b24mr10882985pgh.174.1542912723318;
        Thu, 22 Nov 2018 10:52:03 -0800 (PST)
Received: from localhost ([2600:1700:e321:62f0:329c:23ff:fee3:9d7c])
        by smtp.gmail.com with ESMTPSA id l87sm47098358pfj.179.2018.11.22.10.52.01
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Thu, 22 Nov 2018 10:52:02 -0800 (PST)
Date: Thu, 22 Nov 2018 10:52:00 -0800
From: Guenter Roeck <linux@roeck-us.net>
To: Enric Balletbo i Serra <enric.balletbo@collabora.com>
Cc: lee.jones@linaro.org, gwendal@chromium.org, drinkcat@chromium.org,
        linux-kernel@vger.kernel.org, groeck@chromium.org,
        kernel@collabora.com, bleung@chromium.org,
        Olof Johansson <olof@lixom.net>
Subject: Re: [PATCH 4/7] mfd / platform: cros_ec: move debugfs attributes to
 its own driver.
Message-ID: <20181122185200.GA809@roeck-us.net>
References: <20181122113356.23610-1-enric.balletbo@collabora.com>
 <20181122113356.23610-5-enric.balletbo@collabora.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181122113356.23610-5-enric.balletbo@collabora.com>
User-Agent: Mutt/1.5.24 (2015-08-30)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Thu, Nov 22, 2018 at 12:33:53PM +0100, Enric Balletbo i Serra wrote:
> The entire way how cros debugfs attibutes are created is broken.
> cros_ec_debugfs should be its own driver and its attributes should be
> associated with a debugfs driver not the mfd driver.
> 
> Signed-off-by: Enric Balletbo i Serra <enric.balletbo@collabora.com>
> ---
> 
>  drivers/mfd/cros_ec_dev.c                 | 41 +------------------
>  drivers/platform/chrome/Kconfig           | 10 +++++
>  drivers/platform/chrome/Makefile          |  4 +-
>  drivers/platform/chrome/cros_ec_debugfs.c | 49 ++++++++++++++++++-----
>  include/linux/mfd/cros_ec.h               |  6 ---
>  5 files changed, 53 insertions(+), 57 deletions(-)
> 
> diff --git a/drivers/mfd/cros_ec_dev.c b/drivers/mfd/cros_ec_dev.c
> index 790dc28b93f0..8c7ee2a0b50a 100644
> --- a/drivers/mfd/cros_ec_dev.c
> +++ b/drivers/mfd/cros_ec_dev.c
> @@ -403,6 +403,7 @@ static const struct mfd_cell cros_usbpd_charger_cells[] = {
>  };
>  
>  static const struct mfd_cell cros_ec_platform_cells[] = {
> +	{ .name = "cros-ec-debugfs" },
>  	{ .name = "cros-ec-lightbar" },
>  	{ .name = "cros-ec-vbc" },
>  };
> @@ -496,9 +497,6 @@ static int ec_device_probe(struct platform_device *pdev)
>  		dev_err(ec->dev,
>  			"failed to add cros-ec platform devices: %d\n", retval);
>  
> -	if (cros_ec_debugfs_init(ec))
> -		dev_warn(dev, "failed to create debugfs directory\n");
> -
>  	return 0;
>  
>  failed:
> @@ -510,61 +508,24 @@ static int ec_device_remove(struct platform_device *pdev)
>  {
>  	struct cros_ec_dev *ec = dev_get_drvdata(&pdev->dev);
>  
> -	cros_ec_debugfs_remove(ec);
> -
>  	cdev_del(&ec->cdev);
>  	device_unregister(&ec->class_dev);
>  	return 0;
>  }
>  
> -static void ec_device_shutdown(struct platform_device *pdev)
> -{
> -	struct cros_ec_dev *ec = dev_get_drvdata(&pdev->dev);
> -
> -	/* Be sure to clear up debugfs delayed works */
> -	cros_ec_debugfs_remove(ec);
> -}
> -
>  static const struct platform_device_id cros_ec_id[] = {
>  	{ DRV_NAME, 0 },
>  	{ /* sentinel */ }
>  };
>  MODULE_DEVICE_TABLE(platform, cros_ec_id);
>  
> -static __maybe_unused int ec_device_suspend(struct device *dev)
> -{
> -	struct cros_ec_dev *ec = dev_get_drvdata(dev);
> -
> -	cros_ec_debugfs_suspend(ec);
> -
> -	return 0;
> -}
> -
> -static __maybe_unused int ec_device_resume(struct device *dev)
> -{
> -	struct cros_ec_dev *ec = dev_get_drvdata(dev);
> -
> -	cros_ec_debugfs_resume(ec);
> -
> -	return 0;
> -}
> -
> -static const struct dev_pm_ops cros_ec_dev_pm_ops = {
> -#ifdef CONFIG_PM_SLEEP
> -	.suspend = ec_device_suspend,
> -	.resume = ec_device_resume,
> -#endif
> -};
> -
>  static struct platform_driver cros_ec_dev_driver = {
>  	.driver = {
>  		.name = DRV_NAME,
> -		.pm = &cros_ec_dev_pm_ops,
>  	},
>  	.id_table = cros_ec_id,
>  	.probe = ec_device_probe,
>  	.remove = ec_device_remove,
> -	.shutdown = ec_device_shutdown,
>  };
>  
>  static int __init cros_ec_dev_init(void)
> diff --git a/drivers/platform/chrome/Kconfig b/drivers/platform/chrome/Kconfig
> index 29bd9837d520..a1239d48c46f 100644
> --- a/drivers/platform/chrome/Kconfig
> +++ b/drivers/platform/chrome/Kconfig
> @@ -131,4 +131,14 @@ config CROS_EC_VBC
>  	  To compile this driver as a module, choose M here: the
>  	  module will be called cros_ec_vbc.
>  
> +config CROS_EC_DEBUGFS
> +	tristate "Export ChromeOS EC internals in DebugFS"
> +	depends on MFD_CROS_EC_CHARDEV && DEBUG_FS

Maybe "default MFD_CROS_EC_CHARDEV" ?

> +	help
> +	  This option exposes the ChromeOS EC device internals to
> +	  userspace.
> +
> +	  To compile this driver as a module, choose M here: the
> +	  module will be called cros_ec_debugfs.
> +
>  endif # CHROMEOS_PLATFORMS
> diff --git a/drivers/platform/chrome/Makefile b/drivers/platform/chrome/Makefile
> index 4081b7179df7..12a5c4d18c17 100644
> --- a/drivers/platform/chrome/Makefile
> +++ b/drivers/platform/chrome/Makefile
> @@ -3,8 +3,7 @@
>  obj-$(CONFIG_CHROMEOS_LAPTOP)		+= chromeos_laptop.o
>  obj-$(CONFIG_CHROMEOS_PSTORE)		+= chromeos_pstore.o
>  obj-$(CONFIG_CHROMEOS_TBMC)		+= chromeos_tbmc.o
> -cros_ec_ctl-objs			:= cros_ec_sysfs.o \
> -					   cros_ec_debugfs.o
> +cros_ec_ctl-objs			:= cros_ec_sysfs.o
>  obj-$(CONFIG_CROS_EC_CTL)		+= cros_ec_ctl.o
>  obj-$(CONFIG_CROS_EC_I2C)		+= cros_ec_i2c.o
>  obj-$(CONFIG_CROS_EC_SPI)		+= cros_ec_spi.o
> @@ -15,3 +14,4 @@ obj-$(CONFIG_CROS_EC_PROTO)		+= cros_ec_proto.o
>  obj-$(CONFIG_CROS_KBD_LED_BACKLIGHT)	+= cros_kbd_led_backlight.o
>  obj-$(CONFIG_CROS_EC_LIGHTBAR)		+= cros_ec_lightbar.o
>  obj-$(CONFIG_CROS_EC_VBC)		+= cros_ec_vbc.o
> +obj-$(CONFIG_CROS_EC_DEBUGFS)		+= cros_ec_debugfs.o
> diff --git a/drivers/platform/chrome/cros_ec_debugfs.c b/drivers/platform/chrome/cros_ec_debugfs.c
> index c62ee8e610a0..2ae385a27a1d 100644
> --- a/drivers/platform/chrome/cros_ec_debugfs.c
> +++ b/drivers/platform/chrome/cros_ec_debugfs.c
> @@ -23,12 +23,16 @@
>  #include <linux/fs.h>
>  #include <linux/mfd/cros_ec.h>
>  #include <linux/mfd/cros_ec_commands.h>
> +#include <linux/module.h>
>  #include <linux/mutex.h>
> +#include <linux/platform_device.h>
>  #include <linux/poll.h>
>  #include <linux/sched.h>
>  #include <linux/slab.h>
>  #include <linux/wait.h>
>  
> +#define DRV_NAME "cros-ec-debugfs"
> +
>  #define LOG_SHIFT		14
>  #define LOG_SIZE		(1 << LOG_SHIFT)
>  #define LOG_POLL_SEC		10
> @@ -423,8 +427,9 @@ static int cros_ec_create_pdinfo(struct cros_ec_debugfs *debug_info)
>  	return 0;
>  }
>  
> -int cros_ec_debugfs_init(struct cros_ec_dev *ec)
> +static int cros_ec_debugfs_probe(struct platform_device *pd)
>  {
> +	struct cros_ec_dev *ec = dev_get_drvdata(pd->dev.parent);
>  	struct cros_ec_platform *ec_platform = dev_get_platdata(ec->dev);
>  	const char *name = ec_platform->ec_name;
>  	struct cros_ec_debugfs *debug_info;
> @@ -459,20 +464,24 @@ int cros_ec_debugfs_init(struct cros_ec_dev *ec)
>  	debugfs_remove_recursive(debug_info->dir);
>  	return ret;
>  }
> -EXPORT_SYMBOL(cros_ec_debugfs_init);
>  
> -void cros_ec_debugfs_remove(struct cros_ec_dev *ec)
> +static int cros_ec_debugfs_remove(struct platform_device *pd)
>  {
> +	struct cros_ec_dev *ec = dev_get_drvdata(pd->dev.parent);
> +
>  	if (!ec->debug_info)
> -		return;
> +		return 0;

This should no long be necessary.

>  
>  	debugfs_remove_recursive(ec->debug_info->dir);
>  	cros_ec_cleanup_console_log(ec->debug_info);
> +
> +	return 0;
>  }
> -EXPORT_SYMBOL(cros_ec_debugfs_remove);
>  
> -void cros_ec_debugfs_suspend(struct cros_ec_dev *ec)
> +static int __maybe_unused cros_ec_debugfs_suspend(struct device *dev)
>  {
> +	struct cros_ec_dev *ec = dev_get_drvdata(dev);
> +
>  	/*
>  	 * cros_ec_debugfs_init() failures are non-fatal; it's also possible
>  	 * that we initted things but decided that console log wasn't supported.

The above comment no longer applies. Also, since this is now its own driver,
the if statement should not be necessary anymore.

> @@ -481,12 +490,34 @@ void cros_ec_debugfs_suspend(struct cros_ec_dev *ec)
>  	 */
>  	if (ec->debug_info && ec->debug_info->log_buffer.buf)
>  		cancel_delayed_work_sync(&ec->debug_info->log_poll_work);
> +
> +	return 0;
>  }
> -EXPORT_SYMBOL(cros_ec_debugfs_suspend);
>  
> -void cros_ec_debugfs_resume(struct cros_ec_dev *ec)
> +static int __maybe_unused cros_ec_debugfs_resume(struct device *dev)
>  {
> +	struct cros_ec_dev *ec = dev_get_drvdata(dev);
> +
>  	if (ec->debug_info && ec->debug_info->log_buffer.buf)
>  		schedule_delayed_work(&ec->debug_info->log_poll_work, 0);

As aabove, the if statement should not be necessary anymore.

> +
> +	return 0;
>  }
> -EXPORT_SYMBOL(cros_ec_debugfs_resume);
> +
> +static SIMPLE_DEV_PM_OPS(cros_ec_debugfs_pm_ops,
> +			 cros_ec_debugfs_suspend, cros_ec_debugfs_resume);
> +
> +static struct platform_driver cros_ec_debugfs_driver = {
> +	.driver = {
> +		.name = DRV_NAME,
> +		.pm = &cros_ec_debugfs_pm_ops,
> +	},
> +	.probe = cros_ec_debugfs_probe,
> +	.remove = cros_ec_debugfs_remove,
> +};
> +
> +module_platform_driver(cros_ec_debugfs_driver);
> +
> +MODULE_LICENSE("GPL");
> +MODULE_DESCRIPTION("Debug logs for ChromeOS EC");
> +MODULE_ALIAS("platform:" DRV_NAME);
> diff --git a/include/linux/mfd/cros_ec.h b/include/linux/mfd/cros_ec.h
> index ddbb7e18a530..1722c2c26143 100644
> --- a/include/linux/mfd/cros_ec.h
> +++ b/include/linux/mfd/cros_ec.h
> @@ -336,12 +336,6 @@ u32 cros_ec_get_host_event(struct cros_ec_device *ec_dev);
>  /* sysfs stuff */
>  extern struct attribute_group cros_ec_attr_group;
>  
> -/* debugfs stuff */
> -int cros_ec_debugfs_init(struct cros_ec_dev *ec);
> -void cros_ec_debugfs_remove(struct cros_ec_dev *ec);
> -void cros_ec_debugfs_suspend(struct cros_ec_dev *ec);
> -void cros_ec_debugfs_resume(struct cros_ec_dev *ec);
> -
>  /* Attach/detach attributes to the cros_class */
>  extern int cros_ec_attach_attribute_group(struct cros_ec_dev *ec,
>  					  struct attribute_group *attrs);
