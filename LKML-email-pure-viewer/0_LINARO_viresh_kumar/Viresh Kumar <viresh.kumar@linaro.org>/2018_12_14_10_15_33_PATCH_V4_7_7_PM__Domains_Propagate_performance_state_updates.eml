Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  14 Dec 2018 20:26:47 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 1B1D05807A2;
	Fri, 14 Dec 2018 02:16:09 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 14 Dec 2018 02:16:08 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AK9MQRRLZ3Z/fZIbWCNmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgUL/T+rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZXshfSTFPDI2/?=
 =?us-ascii?q?YYUIDeUBM+lXoYbmp1sWrxazHhWgCeD1xzNUnHL6wbE23uI8Gg/GxgwgGNcOvW?=
 =?us-ascii?q?zbo9X0LqcdT/u1zKnVxjvGcvNW3C3y6JLVeR0mv/GMXKhwftTKyUkvDQ/FjUiQ?=
 =?us-ascii?q?qYn/MDOPzekNt2mb7+x6WuK1jG4rsQZxoiKgxso1jITCm4Ebykjc+Cln3Io4Ic?=
 =?us-ascii?q?e0RFN1bNK6CpdcqiKXO5dsTs4jQWxkoDs2xqMYtZKhYSQHyoorywTBZ/GJaYSE?=
 =?us-ascii?q?/BbuWeCMKjlinn1lYqiwhxOq/Eig1OL8Us603U5UripKjNbMrGoB1x/N5cidTP?=
 =?us-ascii?q?ty4EOh1SyI1wDJ5eFIOUE0lazFJJ492rM8iIYfvEDZEiPrlkj6krWaelgn9+S0?=
 =?us-ascii?q?8ejqY7frqoeZN4BuiwH+Nqoumta4AeQ9KgUOW2mb+eKh1Lzs5EH5Q6tFjucwkq?=
 =?us-ascii?q?bHtJDWPMMbp6C/AwBLyIYu8Ai/Dzi439QCh3UHL0xKeAiBj4f3P1HCOvf4De2w?=
 =?us-ascii?q?g1i0ijdk2+jGPqH9ApXKNnXDlLbhfbVj5EJGxwsz0MtS55ZVCrEHPfLyVVX9tN?=
 =?us-ascii?q?3eDh8lLQO0x/zrB8l61oMbQWiPGLOWMLvOsV+U4eIiO+mMa5UUuDbhMfcl4OTi?=
 =?us-ascii?q?jX8kmVAHe6mp0oAaaHS5HvRgPkWYbmDggtYHEWcWoAU+SPbmh0GFUT5Wf3yyRb?=
 =?us-ascii?q?4z5iknCIK6CofOXoKtgLuf0yuhHZ1WYWZGClaLEXrzc4WEWvEMaD+dI8N7kzwE?=
 =?us-ascii?q?U6ShRJEl1R20qAD6zL9nJPLO+iIErZLjyMR15+rLmB4o7jx0D8Od02KXQ2FuhG?=
 =?us-ascii?q?wIRSQ73KR+oUx711eC3rJ0g/1eFdxP+fxJVh02OoLbz+x/E9ryQB7Ofs+VSFa6?=
 =?us-ascii?q?RdWrGTIxQcg3w9MUZ0Z9Gs+tjhbM3yexB78VlrqLBIE7867G3njxIdp9xGjC1K?=
 =?us-ascii?q?U7k1YmRc5PP3W8hqFj7wjTG5LJk0KBmqm3b6scwjDC+H2DzWWUukFYSxB/UaPC?=
 =?us-ascii?q?UXAbZUvWqND561jGT7+vD7QnLwRAxdSDKqtMdt3mk1FGSO3/N9TZZmK7g32wCg?=
 =?us-ascii?q?qQxrOQcIrqfH0Q0zjHB0gajQ8f53aGOhI4Bie6vW3eCidjFVbuY0Pq7Ol/p2m3?=
 =?us-ascii?q?Tk4yzwGWcUJh06C59QIShfyZU/kTxK4LuD89qzVoG1awx87WC9uFpwpmYKVcYd?=
 =?us-ascii?q?M87E1b1W7DsAx9JJigL6Fkhl4RaAl3u0Lu1xNqCoRPi8QqrXUqzBZsJqKcyl9O?=
 =?us-ascii?q?azSY3ZXoML3NNmby5Ayva7LR2lzGytmW/rkA6fsmpFTjpg2mDVci/Gh93NlT0H?=
 =?us-ascii?q?uc4YvKAREWUZLwVEY36hd7q6vbYik7+4Pby3lsPbOovT/F3tIjHPElxQq4f9dD?=
 =?us-ascii?q?LKOEExf/Es0HB8S0NOMmgVmobhIeM+BU+645JMemd/qA2K62M+dshjOmjWJb4I?=
 =?us-ascii?q?9j1kKA7TZzSunN35wd2fGXwhOHVyvgjFemqs33g4FEai0IEWql1CfkA5RdZqts?=
 =?us-ascii?q?coYRCGeiOtG4yc96h5HwRXFY7lmjB1Ud1c+teBqSaUH93AJK2UQWp3ynhTW3zz?=
 =?us-ascii?q?hunz41qaqf2TTEw/7+exofJm5LWG5igE/sIIi1ldwbXFKkbxM0lBuj/kv6w6lb?=
 =?us-ascii?q?pKJiL2jcW0tIfi72L318Xau0rLaNf8lP6JYwuyVNTOu8eUyaSqL6oxYC0SPsBX?=
 =?us-ascii?q?FexDM4dzGtoJn5hAZ1iGGeLHZyqnrWZ8dwyAzb5NzdQ/5RwzUHSDN5iTnRGliz?=
 =?us-ascii?q?Id2p8c+ImJfEt+C0T3ihWYFLcSn30YOAszO25G1wDh24hfyzmNznEQ4h3C//1t?=
 =?us-ascii?q?lqUzjIrRnmbonq0aS6Lfxofk1yCFDg7Mp6H5l0kpEsi5EIxXgampKV8GIEkWjp?=
 =?us-ascii?q?MNVXw6L+bGcXSj4NzN7Y+wzl2ExlLnKUyIP1THSdws19Z9akZmMawD4y78dPCK?=
 =?us-ascii?q?2M9rxLgTN1okakrQLWefV9mzYdyfg053IAjeAGphEtzjmDDbAIBkZXIzbslxuT?=
 =?us-ascii?q?4tC6raVXYnuvcLeq2Ep/m9ChEK+NogVGVHnlfZciGDd67t9jP1LUzH3z9obkdc?=
 =?us-ascii?q?HMbdIUsx2YiRbBgPJTKJIsjfoKnitnNHn5vX0kze47kBNv0Yu7vIiBN2Vi4qa5?=
 =?us-ascii?q?DgREOT3yYsMZ4ivtgrpGnsaKw4CvGY1sFS4RU5vvSfKoDSgetfD6NwuVFD08q3?=
 =?us-ascii?q?GbGafQHAOF6UdmqW7PHI6vN32NOHYZytBiTgGHJENDmAAUQCk6npkhGwCo3sPh?=
 =?us-ascii?q?dVl25isL6l7ksBdMyf9oNxriUmfZvgiocSw5SJyeLBpQ8wFD6F3ZMc2Y7uJvAS?=
 =?us-ascii?q?5Y+oetoxCKKmyefw5IF30GWlSYB1D/Obmj/dnB8++FBuqnMvvBe7OOpfZFV/eP?=
 =?us-ascii?q?w5Kv3ZBr/zKNNsWJI3ljAOc32ktFXXBlBcvZny8DRDAQlyLId8Sbvguz+jVrrs?=
 =?us-ascii?q?Cj9/TmQALv6pWOC7tRMtVv+gq6gaSZN+6XiyZ2NyxY1o4XxXLTzLgf3VgSizxh?=
 =?us-ascii?q?djW3ELQAszLNQ7zUmqNNExEbbCZzPtNS760gxglNJdLbitTt27Fik/46EE1FWk?=
 =?us-ascii?q?Lhm82zYcwKInqwNFfGBEaNKbSHKifHw8DxYaOgV7JQiP9YuAG3uTaeC0XjJCiM?=
 =?us-ascii?q?lyH1VxCzNuFBlD2bPB1buI2nbhlhE3TsTNL4ZR29K9J3iTw2wbsphnLFL2IcMD?=
 =?us-ascii?q?58c19Tob2U9y9XnvJ/G2lZ5Hp/MeaEgzqZ7/XfKpsOsfpkGCJ0l+db4HQ807RU?=
 =?us-ascii?q?7SFES+ZzmCvdtdNup1Cmku+SyjtoShZOqzBLhJ6VskVmI6nW6p5AWXOXtC4KuH?=
 =?us-ascii?q?iUBVIKrt1+Edrpk6RRzNHVk+T0MjgGu+jd88IRA4DrOdmAO3kgeU7zGiH8Fgka?=
 =?us-ascii?q?XCWsPmLewUpQjKfWvl6YsJk84rjtnJ8HTPcPV1w0EvYTDGxmEcYELZMxWSkrx/?=
 =?us-ascii?q?rTqMMOrVCkqwbXDJFes5aBXOiVHvPHKTCFgL0CbBwNl/ewFY0NO4mz/kVpalR5?=
 =?us-ascii?q?1NDSElTdWfhQqTInZR1i82tX930rcGwp1lnlIiCw5XYJXaqqnwQ7kQs4Yvko/S?=
 =?us-ascii?q?3E51YxL0DN4iwqnx9iyp3enTmNfWupf++LVoZMBn+x7hBpPw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AYAAB4ghNch0O0hNFjHgEGBwaBUQkLA?=
 =?us-ascii?q?YNrJ5gngWg5l0EUgV8SAQEYEwGHRyI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwy?=
 =?us-ascii?q?CNiQBgmIDAwECJAsBDQEBNwEFCQEBNxkDMQEFARwGAQoIBYMcggABBZo3PIofg?=
 =?us-ascii?q?WwzgnYBAQWHKggSh2uDJYEcgVc/gUSHGylbhRyJOgaGDn1Sj30HAoIkBI8yGIl?=
 =?us-ascii?q?vh16JM49+AgQCBAUCBQ8hgSWCDjMaMIMvghuJAYVHODKBAgMBASETiVUqgiMBA?=
 =?us-ascii?q?Q?=
X-IPAS-Result: =?us-ascii?q?A0AYAAB4ghNch0O0hNFjHgEGBwaBUQkLAYNrJ5gngWg5l0E?=
 =?us-ascii?q?UgV8SAQEYEwGHRyI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmIDAwECJ?=
 =?us-ascii?q?AsBDQEBNwEFCQEBNxkDMQEFARwGAQoIBYMcggABBZo3PIofgWwzgnYBAQWHKgg?=
 =?us-ascii?q?Sh2uDJYEcgVc/gUSHGylbhRyJOgaGDn1Sj30HAoIkBI8yGIlvh16JM49+AgQCB?=
 =?us-ascii?q?AUCBQ8hgSWCDjMaMIMvghuJAYVHODKBAgMBASETiVUqgiMBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,352,1539673200"; 
   d="scan'208";a="56345341"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 14 Dec 2018 02:16:05 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729654AbeLNKQC (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 14 Dec 2018 05:16:02 -0500
Received: from mail-pg1-f194.google.com ([209.85.215.194]:32856 "EHLO
        mail-pg1-f194.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1729624AbeLNKP7 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 14 Dec 2018 05:15:59 -0500
Received: by mail-pg1-f194.google.com with SMTP id z11so2516759pgu.0
        for <linux-kernel@vger.kernel.org>; Fri, 14 Dec 2018 02:15:59 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding;
        bh=GuwS/J0VRMUUsTtu4AOCAiCLWgTA0AmO9JSD70SaiQk=;
        b=VU1LNQg12XoWRQsPmxfL2kqW9a5aUSOuaM2mQcAPorUuaHGO6YvNZVCmjqU9i/eIIt
         fs03GzcarocK5NeZkre3RGce7WeMcgRK0kk7eibnfwWd94CwOM0f1wrqf7d+AERTsp20
         9EoLFoKTwcEyNhvJThmwovtYTS3qutHGRdjTM=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=GuwS/J0VRMUUsTtu4AOCAiCLWgTA0AmO9JSD70SaiQk=;
        b=EJ0BKhvesBgFFbLZ4hmMe9ksnf6wTnhe7+EYpr96v8zWDTauu/udctmBta8/T+E/2K
         F3cq3uVm8Fv6yF+atgAbb4c3D1sOg64Ja8q9HqFbgt30/eRavLRbjK7V9KlNPIRHArvM
         9mwovIA4F54xqZMueAiaOsp4hOeaIpVr4QC44oytEcWylZLm3RHwU37vt1VkYRwzF6Pt
         5D8mzA7wK4QKMVk17wFW3rrgkeHR+kFACuvxYuxhVCXcw7rZLljt/7VSmSW36EXtwxe8
         EI7+gTq4oxzEtd/LgvSf7C7qFB6zVQopq1VCu2WkpsIZ+KgIm77YdBebO7rk75A9BiTg
         1PMQ==
X-Gm-Message-State: AA+aEWYKeKK2cXw9fnV4MII7Mkk4dz9V1HsRkSYV86IMJFyB5zvxgrIC
        Prnbp3j2b/VrfrGUOeX9fd/ik3Grb+A=
X-Google-Smtp-Source: AFSGD/W0mCDLMeH1N1KDnqDvAnn7s7SrtmmEmfIpwJ5rtQND3cc8+wWrqUqluNVBFSs48cCSfiUUbw==
X-Received: by 2002:a65:4142:: with SMTP id x2mr2117023pgp.356.1544782559125;
        Fri, 14 Dec 2018 02:15:59 -0800 (PST)
Received: from localhost ([122.172.23.29])
        by smtp.gmail.com with ESMTPSA id b4sm4870265pgq.65.2018.12.14.02.15.58
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Fri, 14 Dec 2018 02:15:58 -0800 (PST)
From: Viresh Kumar <viresh.kumar@linaro.org>
To: ulf.hansson@linaro.org, Rafael Wysocki <rjw@rjwysocki.net>,
        Kevin Hilman <khilman@kernel.org>,
        Len Brown <len.brown@intel.com>, Pavel Machek <pavel@ucw.cz>
Cc: Viresh Kumar <viresh.kumar@linaro.org>, linux-pm@vger.kernel.org,
        Vincent Guittot <vincent.guittot@linaro.org>,
        Stephen Boyd <sboyd@kernel.org>, Nishanth Menon <nm@ti.com>,
        rnayak@codeaurora.org, niklas.cassel@linaro.org,
        linux-kernel@vger.kernel.org
Subject: [PATCH V4 7/7] PM / Domains: Propagate performance state updates
Date: Fri, 14 Dec 2018 15:45:33 +0530
Message-Id: <0c7ef1300e212f0ae06ccf10398f8c9453c064a5.1544782279.git.viresh.kumar@linaro.org>
X-Mailer: git-send-email 2.19.1.568.g152ad8e3369a
In-Reply-To: <cover.1544782279.git.viresh.kumar@linaro.org>
References: <cover.1544782279.git.viresh.kumar@linaro.org>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Currently a genpd only handles the performance state requirements from
the devices under its control. This commit extends that to also handle
the performance state requirement(s) put on the master genpd by its
sub-domains. There is a separate value required for each master that
the genpd has and so a new field is added to the struct gpd_link
(link->performance_state), which represents the link between a genpd and
its master. The struct gpd_link also got another field
prev_performance_state, which is used by genpd core as a temporary
variable during transitions.

On a call to dev_pm_genpd_set_performance_state(), the genpd core first
updates the performance state of the masters of the device's genpd and
then updates the performance state of the genpd. The masters do the same
and propagate performance state updates to their masters before updating
their own. The performance state transition from genpd to its master is
done with the help of dev_pm_opp_xlate_performance_state(), which looks
at the OPP tables of both the domains to translate the state.

Tested-by: Rajendra Nayak <rnayak@codeaurora.org>
Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
---
 drivers/base/power/domain.c | 93 ++++++++++++++++++++++++++++++++-----
 include/linux/pm_domain.h   |  4 ++
 2 files changed, 86 insertions(+), 11 deletions(-)

diff --git a/drivers/base/power/domain.c b/drivers/base/power/domain.c
index 808ba41b6580..611c0ccbad5f 100644
--- a/drivers/base/power/domain.c
+++ b/drivers/base/power/domain.c
@@ -244,6 +244,7 @@ static int _genpd_reeval_performance_state(struct generic_pm_domain *genpd,
 {
 	struct generic_pm_domain_data *pd_data;
 	struct pm_domain_data *pdd;
+	struct gpd_link *link;
 
 	/* New requested state is same as Max requested state */
 	if (state == genpd->performance_state)
@@ -262,31 +263,101 @@ static int _genpd_reeval_performance_state(struct generic_pm_domain *genpd,
 	}
 
 	/*
-	 * We aren't propagating performance state changes of a subdomain to its
-	 * masters as we don't have hardware that needs it. Over that, the
-	 * performance states of subdomain and its masters may not have
-	 * one-to-one mapping and would require additional information. We can
-	 * get back to this once we have hardware that needs it. For that
-	 * reason, we don't have to consider performance state of the subdomains
-	 * of genpd here.
+	 * Traverse all sub-domains within the domain. This can be
+	 * done without any additional locking as the link->performance_state
+	 * field is protected by the master genpd->lock, which is already taken.
+	 *
+	 * Also note that link->performance_state (subdomain's performance state
+	 * requirement to master domain) is different from
+	 * link->slave->performance_state (current performance state requirement
+	 * of the devices/sub-domains of the subdomain) and so can have a
+	 * different value.
+	 *
+	 * Note that we also take vote from powered-off sub-domains into account
+	 * as the same is done for devices right now.
 	 */
+	list_for_each_entry(link, &genpd->master_links, master_node) {
+		if (link->performance_state > state)
+			state = link->performance_state;
+	}
+
 	return state;
 }
 
 static int _genpd_set_performance_state(struct generic_pm_domain *genpd,
-					unsigned int state)
+					unsigned int state, int depth)
 {
-	int ret;
+	struct generic_pm_domain *master;
+	struct gpd_link *link;
+	int master_state, ret;
 
 	if (state == genpd->performance_state)
 		return 0;
 
+	/* Propagate to masters of genpd */
+	list_for_each_entry(link, &genpd->slave_links, slave_node) {
+		master = link->master;
+
+		if (!master->set_performance_state)
+			continue;
+
+		/* Find master's performance state */
+		ret = dev_pm_opp_xlate_performance_state(genpd->opp_table,
+							 master->opp_table,
+							 state);
+		if (unlikely(ret < 0))
+			goto err;
+
+		master_state = ret;
+
+		genpd_lock_nested(master, depth + 1);
+
+		link->prev_performance_state = link->performance_state;
+		link->performance_state = master_state;
+		master_state = _genpd_reeval_performance_state(master,
+						master_state);
+		ret = _genpd_set_performance_state(master, master_state, depth + 1);
+		if (ret)
+			link->performance_state = link->prev_performance_state;
+
+		genpd_unlock(master);
+
+		if (ret)
+			goto err;
+	}
+
 	ret = genpd->set_performance_state(genpd, state);
 	if (ret)
-		return ret;
+		goto err;
 
 	genpd->performance_state = state;
 	return 0;
+
+err:
+	/* Encountered an error, lets rollback */
+	list_for_each_entry_continue_reverse(link, &genpd->slave_links,
+					     slave_node) {
+		master = link->master;
+
+		if (!master->set_performance_state)
+			continue;
+
+		genpd_lock_nested(master, depth + 1);
+
+		master_state = link->prev_performance_state;
+		link->performance_state = master_state;
+
+		master_state = _genpd_reeval_performance_state(master,
+						master_state);
+		if (_genpd_set_performance_state(master, master_state, depth + 1)) {
+			pr_err("%s: Failed to roll back to %d performance state\n",
+			       master->name, master_state);
+		}
+
+		genpd_unlock(master);
+	}
+
+	return ret;
 }
 
 /**
@@ -331,7 +402,7 @@ int dev_pm_genpd_set_performance_state(struct device *dev, unsigned int state)
 	gpd_data->performance_state = state;
 
 	state = _genpd_reeval_performance_state(genpd, state);
-	ret = _genpd_set_performance_state(genpd, state);
+	ret = _genpd_set_performance_state(genpd, state, 0);
 	if (ret)
 		gpd_data->performance_state = prev;
 
diff --git a/include/linux/pm_domain.h b/include/linux/pm_domain.h
index 9ad101362aef..dd364abb649a 100644
--- a/include/linux/pm_domain.h
+++ b/include/linux/pm_domain.h
@@ -136,6 +136,10 @@ struct gpd_link {
 	struct list_head master_node;
 	struct generic_pm_domain *slave;
 	struct list_head slave_node;
+
+	/* Sub-domain's per-master domain performance state */
+	unsigned int performance_state;
+	unsigned int prev_performance_state;
 };
 
 struct gpd_timing_data {
-- 
2.19.1.568.g152ad8e3369a

