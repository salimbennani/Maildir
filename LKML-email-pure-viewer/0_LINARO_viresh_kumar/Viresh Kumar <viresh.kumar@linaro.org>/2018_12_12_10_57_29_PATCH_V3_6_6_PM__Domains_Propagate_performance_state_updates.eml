Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  12 Dec 2018 19:44:56 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga007.fm.intel.com (fmsmga007.fm.intel.com [10.253.24.52])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id ECC2058079D;
	Wed, 12 Dec 2018 02:58:17 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by fmsmga007-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 12 Dec 2018 02:58:17 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A/CV6LhWbDBaYV5p93O8Hi6iqdb7V8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhGPuKdThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGoOy?=
 =?us-ascii?q?YZUSAeQPPuhWqIvyp1UBohWxHgmsHOHixyRUinL1x6A2z/4sHR3a0AEmAtkAsG?=
 =?us-ascii?q?7UrNLwNKoKXu+1zbPIwivYb/NWxDzz7ZXIchU7rvGWQLl9dtTRyUg1FwzblVWQ?=
 =?us-ascii?q?qZbpPzCI1uQIqWeb9fFtVeaui24hsQ5xuD+vyt0rionTiYIY01bJ/jh6zoYtPd?=
 =?us-ascii?q?C0VlJ3bNq+HJdNuSyWKZF6Tt4hTm10oio3y78LtYamcCQU1pgr3QPTZv6Zf4SS?=
 =?us-ascii?q?/B7uWvydLSl8iX9jZbmxnQy98VK6xe35TsS00EhFri5CktTUqHAN2ALc6tKdRv?=
 =?us-ascii?q?t+4EihwzCP2B7X6u1eJkA0j6XbJ4Ygwr42iJUTrVzOEjHqlEjylqOaa0sp9vay?=
 =?us-ascii?q?5+j6YbjquoWQOo52hw3mN6QhgM2/AeA2MggUWGib/Pyx1Lni/U3/XbVLgeQ6kq?=
 =?us-ascii?q?rHv5DAI8QUuKq5DxZS0oct7RawES2m3c8GnXkIMl1FYgiLj4v3NFHUJvD3E/O/?=
 =?us-ascii?q?j06rkDdxyPDKJqfhDYnVLnjfjLfheq5w60pdyAow099T/Z1VCqwaLfL3W0/xss?=
 =?us-ascii?q?HYDxAjPwy1xebnFMty1ocEVW2TBa+ZNbvYsUWU6eI3P+mMeIgVtS79K/c/5v7u?=
 =?us-ascii?q?kWU2mVgHcampwJsYcna4Hvt9LkWdYHrshMoBEGgQsgo/SuzqlEONUTpJa3muWK?=
 =?us-ascii?q?I84ykxCJi6AofbWoCtnLuB0T+5Hp1ReG9KEFOMEXDud4WCXPcBcyaSIs5nkjwZ?=
 =?us-ascii?q?WrmtUY4h1ReytADkz7prNPbb+iodtZj7zth6+/XTlQ0u9TxzF8mSyXqNT2Fznm?=
 =?us-ascii?q?MLXTM2xrpwoU5mx1eH0Kh4heFYFNNJ6/NIVAc6KYDTz+hgB9/uXQLBe8+DSEy6?=
 =?us-ascii?q?TdW+HTExUtUxzscNY0lnHdWulBTD3yuwDL8TmLyGH5g08qPa33jsKMdx0XfG1K?=
 =?us-ascii?q?89j1Y4RstDL3Gphql69wLLHY7Gj12Zl7q2daQbxCPC6X2MzXSQs01CUA5/S6PF?=
 =?us-ascii?q?XWsBaUvQqtj54kDCT7qqCbk8NgtByMiCKrZFa9HzjFVGQuvjN8raY26rh2iwAh?=
 =?us-ascii?q?OIzKuWbIX2Y2UdwDndCE8cng8O53mGKxYxCj2ho23ECjxuDkzgY0X3/Ol6qXO7?=
 =?us-ascii?q?SFI0zg6QY01g0bq15gAahfiGR/wP2bIEvT8rqy9oE1alw9LWF92AqhJ9fKVdZN?=
 =?us-ascii?q?M950tH1WLZtgBnIpysNadihkQacwR2uUPu2A56CoFBkcgssXMrwxB+KaOe0FNd?=
 =?us-ascii?q?aTyY2Yr8NaHQKmn35BqvcbLZ2knC0NaK/acC8O43q1H9swCmCEUj829r3MJI03?=
 =?us-ascii?q?SB/JrKCgkSUZXvUkss8xh6prfaYjQy5o/O1H1sN7W0vSHG294zGOQlzROgdc9F?=
 =?us-ascii?q?MKyYDA/yD9EaB8+2Je0qhlildA4LMPpT9a40JcymcfSG1bWvPOZhmjKmkGtG7J?=
 =?us-ascii?q?p80kKK6ypzVOrI04wZzPGf2wuNTy38g0u5ssDrhYBEYikfHnC+ySf4HoFRfLB9?=
 =?us-ascii?q?fYERBWeoPcK33NR+i4fxVHFC8F6sGk0J2NWueRqUdFH92QxQ1UIKoX2ogye4zj?=
 =?us-ascii?q?p0ky03oaqbxiDB3+PidB8fMG5RWGZilUvsIZSzj90CXEmobhIllRu/6Ubh2qhb?=
 =?us-ascii?q?or9yL23SQUdOYij3IHtuUqq2trqefcFP7IkkvjlQUOS5eVqaUKLyowMG0yP/GG?=
 =?us-ascii?q?tT3DI7eCuwupX6nBx6j3iRLG1po3raesFwxBHf68LaRfNK2joGRS94iSTYB1Sm?=
 =?us-ascii?q?Ptmp+8mUmInHsuykS22hUZhTezHxzYycrCu7+XFqARqnkvGzgNLnFhI20S3619?=
 =?us-ascii?q?lsTijIqBf8Yo/216W1K+5nf09oBEPi5Mp+AI1xjowwhJQI03gAmpqV5WYHkXv0?=
 =?us-ascii?q?MdhD2qLxdnsNSSQLw97I+gfl3kJjI2mNx4L4UHWd38Rga8O7YmMQxiIy8cRKBL?=
 =?us-ascii?q?2I47xDmCt/ukC4oh7JYfhhgjcdzuMj6Hsbg+EKogUh1CucDa4JHUlEIyPsjQ+H?=
 =?us-ascii?q?4M6krKVYf2uvdbmw1ExjndGuFr2CowdcWGrndZcmByN/8sJ/MFfU2n3p9o7kYM?=
 =?us-ascii?q?XQbc4UthCMjxfAiO1VJIgwl/UQgypnJHn9vWYky+MgiRxu3Je6vJWIKml3/aK5?=
 =?us-ascii?q?BAJYOSPxZ88J5j7tiqNelN6M34+zBpVhBikLXJzwQP2zCj0SsvDnNxuUHD04t3?=
 =?us-ascii?q?eWAr7fHQ6Z6Ed7oHPDCZGrN3eLJHYHydVuXgWSJEtagAoMRjU1goY5Fhy2xMzm?=
 =?us-ascii?q?aEp55Coe5lvmpRtX0O5oKwPzUmTCpAerdzc0ToKQLAFN4wFG5kfVN9Ge7+1pEy?=
 =?us-ascii?q?FZ+J2hsBKCKmiBawtUCmEJX1SOB0r/Mbm2+dnA7++YC/K+LvvJfLWOsPFeWO2O?=
 =?us-ascii?q?xZ61yYtm+DCMNsqUM3lmDv073FdDXH9jF8TYnTUPVzIYlybXY8GHoxe8/zV9rt?=
 =?us-ascii?q?qj//TzRALv+YyPBqNSMdpx+hC2gqSDN++KiCZ6MzZY0ZwMymHSyLgCx14fkCVu?=
 =?us-ascii?q?dzirEbQdui/BVqPQmqlLDxEFbyN/LtdH76U53gNVI87Ulsv11qJkjv4yE1pKT0?=
 =?us-ascii?q?HhldqzZcMUI2CxLlfHBEeQObSCJD3Lxdz3YKymRb1RiuVUqwO/uTKBH0D/OTSD?=
 =?us-ascii?q?kiHjVwqzPuFUkCGbIBtetZmhchZsDGjvVs7pZgenP993kzI2x6Y5hnfLNW4aLD?=
 =?us-ascii?q?h9fFlBrryW7SNEnPp/H3ZN4WZiLemBgyyZ9fXXKo4Ksft3BSR5j+Jb7248y7tQ?=
 =?us-ascii?q?7SFEQuR6mSrSrtF0pVGmnfKCyj5mUBpItzZKi5iHvURkOaXF6JZAXWzI8w4K7W?=
 =?us-ascii?q?WVWFw2oI54DtOpu6lW0cPIkor3KTFL6dWS+tETQ4DuIcyOPX5pDgvyHzXXDUNR?=
 =?us-ascii?q?Vzy0HXvdmF1Gl/qR9zuTo4Rs7tDPlYQPTPd7VVgwH/VSXkdlHdgHKZFfXT4+l7?=
 =?us-ascii?q?OfyskS6iz65CHYWshe9rXOXfKfAr27MD+HgL1sehAXh7jqe8BbEoD9k2Z4bUZ8?=
 =?us-ascii?q?1NDOFkyWV8pKvStJbwkorUEL+397GD4dwUXgPz2s+nIIFbaXgxs/kEMqf+U3+S?=
 =?us-ascii?q?zspVQqI1PQjC8xlkArnpPimz/HI225F7u5QYwDU3m8jEM2KJ6uBl8tNQA=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ATAABw6RBch0O0hNFjHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGDayeMFIwSgWg5lz8UgV8SAQEYEwGHOyI0CQ0BAwEBAQEBAQIBEwEBAQg?=
 =?us-ascii?q?NCQgpIwyCNiQBgmIDAwECJAsBDQEBNwEFCQEBNxkDMQEFARwGAQoIBYMcggEBB?=
 =?us-ascii?q?ZoWPIodgWwzgnYBAQWHKwgSh2uDI4EcgVc/gUSHGylbhRyJNQaGCn1Sj3UHAoI?=
 =?us-ascii?q?iBI8vGIlph1uJJo9sAgQCBAUCBQ8hgSWCDjMaMIMvghsMF4hehUc4MoECAwEBI?=
 =?us-ascii?q?ROKJiqCIwEB?=
X-IPAS-Result: =?us-ascii?q?A0ATAABw6RBch0O0hNFjHQEBBQEHBQGBUQgBCwGDayeMFIw?=
 =?us-ascii?q?SgWg5lz8UgV8SAQEYEwGHOyI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBg?=
 =?us-ascii?q?mIDAwECJAsBDQEBNwEFCQEBNxkDMQEFARwGAQoIBYMcggEBBZoWPIodgWwzgnY?=
 =?us-ascii?q?BAQWHKwgSh2uDI4EcgVc/gUSHGylbhRyJNQaGCn1Sj3UHAoIiBI8vGIlph1uJJ?=
 =?us-ascii?q?o9sAgQCBAUCBQ8hgSWCDjMaMIMvghsMF4hehUc4MoECAwEBIROKJiqCIwEB?=
X-IronPort-AV: E=Sophos;i="5.56,344,1539673200"; 
   d="scan'208";a="56568732"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 12 Dec 2018 02:58:16 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727345AbeLLK6I (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 12 Dec 2018 05:58:08 -0500
Received: from mail-pl1-f194.google.com ([209.85.214.194]:34136 "EHLO
        mail-pl1-f194.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727302AbeLLK6G (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 12 Dec 2018 05:58:06 -0500
Received: by mail-pl1-f194.google.com with SMTP id w4so8456103plz.1
        for <linux-kernel@vger.kernel.org>; Wed, 12 Dec 2018 02:58:06 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding;
        bh=o6OdClubF4RfL9e05GmhHLx7Ei4hstJaBiTl97uuPI8=;
        b=h+iqgxNa/x6wXA7miuOUX5zrFMVjNFZHOu6qUD0o9RpqbtK3QJ9oiEDppegHtytORq
         +BGsVThazgEY3qtWaySy/zDbYm19yrGzsdaGz9FLAVUr7yr4kDHkxsnrbkFw37ugvk2i
         /uLGZPIpanZscY37gu7l2Hcdh8uxyXQ9tOSc4=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=o6OdClubF4RfL9e05GmhHLx7Ei4hstJaBiTl97uuPI8=;
        b=DArA1Dkm1DHya4qdfmOrcixbFKS/13UVHWsarZUIW2Cawhx8EcKhABDe8N+fJDE2zR
         bMqssk1DeOP/27Cf2kzZOnGJtQznaU1qxoywGMxdUY8Vz0b9OFTDK6RFgm/Jv9bVksji
         rs36iWKmKf+7B++8FHcdHU5ADn4FLyhHr3DxEocXsmUIjLyPYXOAWjwr9Uy5QohYjXba
         P5Kfq+vLekVvc0HqJbY7nDDSENQW0Z8VNQHEbr9NbMUeRLRUjro7M/89aNGbVakMIWW/
         v0ALi+xQxXQJxsEY6p6pUmrAn5ePM6VR77B5pmsnQk+cDOx3h8tJ8kMgowzGoAC/Rqrf
         eFFQ==
X-Gm-Message-State: AA+aEWZCpRK+O8GKLipl/EOEMYT9Zs86yzw1a/f4PYaEdGuDqalukinZ
        wSpVBUC8XC33r/+5C6IMNO1EqA==
X-Google-Smtp-Source: AFSGD/Wg5MGoKCFRCowogPXSmxgLcyW0Wh6r6zTmwaQVGEMiMmwjuz4Cw6KfZ0EuxrwXc19ylLaSfQ==
X-Received: by 2002:a17:902:2aaa:: with SMTP id j39mr19893330plb.335.1544612286046;
        Wed, 12 Dec 2018 02:58:06 -0800 (PST)
Received: from localhost ([122.172.23.29])
        by smtp.gmail.com with ESMTPSA id 69sm31751751pgg.86.2018.12.12.02.58.04
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Wed, 12 Dec 2018 02:58:05 -0800 (PST)
From: Viresh Kumar <viresh.kumar@linaro.org>
To: ulf.hansson@linaro.org, Rafael Wysocki <rjw@rjwysocki.net>,
        Kevin Hilman <khilman@kernel.org>, Pavel Machek <pavel@ucw.cz>,
        Len Brown <len.brown@intel.com>
Cc: Viresh Kumar <viresh.kumar@linaro.org>, linux-pm@vger.kernel.org,
        Vincent Guittot <vincent.guittot@linaro.org>,
        Stephen Boyd <sboyd@kernel.org>, Nishanth Menon <nm@ti.com>,
        rnayak@codeaurora.org, niklas.cassel@linaro.org,
        linux-kernel@vger.kernel.org
Subject: [PATCH V3 6/6] PM / Domains: Propagate performance state updates
Date: Wed, 12 Dec 2018 16:27:29 +0530
Message-Id: <d138bd45d0eacc11ff90e27f83d8b47d692877ef.1544611890.git.viresh.kumar@linaro.org>
X-Mailer: git-send-email 2.19.1.568.g152ad8e3369a
In-Reply-To: <cover.1544611890.git.viresh.kumar@linaro.org>
References: <cover.1544611890.git.viresh.kumar@linaro.org>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This commit updates genpd core to start propagating performance state
updates to master domains that have their set_performance_state()
callback set.

Currently a genpd only handles the performance state requirements from
the devices under its control. This commit extends that to also handle
the performance state requirement(s) put on the master genpd by its
sub-domains. There is a separate value required for each master that
the genpd has and so a new field is added to the struct gpd_link
(link->performance_state), which represents the link between a genpd and
its master. The struct gpd_link also got another field
prev_performance_state, which is used by genpd core as a temporary
variable during transitions.

Tested-by: Rajendra Nayak <rnayak@codeaurora.org>
Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
---
 drivers/base/power/domain.c | 105 ++++++++++++++++++++++++++++++------
 include/linux/pm_domain.h   |   4 ++
 2 files changed, 94 insertions(+), 15 deletions(-)

diff --git a/drivers/base/power/domain.c b/drivers/base/power/domain.c
index 32ecbefbd191..5e0479b2e976 100644
--- a/drivers/base/power/domain.c
+++ b/drivers/base/power/domain.c
@@ -239,24 +239,90 @@ static void genpd_update_accounting(struct generic_pm_domain *genpd)
 static inline void genpd_update_accounting(struct generic_pm_domain *genpd) {}
 #endif
 
+static int _genpd_reeval_performance_state(struct generic_pm_domain *genpd,
+					   unsigned int state, int depth);
+
 static int _genpd_set_performance_state(struct generic_pm_domain *genpd,
-					unsigned int state)
+					unsigned int state, int depth)
 {
+	struct generic_pm_domain *master;
+	struct gpd_link *link;
+	unsigned int master_state;
 	int ret;
 
+	/* Propagate to masters of genpd */
+	list_for_each_entry(link, &genpd->slave_links, slave_node) {
+		master = link->master;
+
+		if (!master->set_performance_state)
+			continue;
+
+		if (unlikely(!state)) {
+			master_state = 0;
+		} else {
+			/* Find master's performance state */
+			master_state = dev_pm_opp_xlate_performance_state(genpd->opp_table,
+						master->opp_table, state);
+			if (unlikely(!master_state)) {
+				ret = -EINVAL;
+				goto err;
+			}
+		}
+
+		genpd_lock_nested(master, depth + 1);
+
+		link->prev_performance_state = link->performance_state;
+		link->performance_state = master_state;
+		ret = _genpd_reeval_performance_state(master, master_state,
+						      depth + 1);
+		if (ret)
+			link->performance_state = link->prev_performance_state;
+
+		genpd_unlock(master);
+
+		if (ret)
+			goto err;
+	}
+
 	ret = genpd->set_performance_state(genpd, state);
 	if (ret)
-		return ret;
+		goto err;
 
 	genpd->performance_state = state;
 	return 0;
+
+err:
+	/* Encountered an error, lets rollback */
+	list_for_each_entry_continue_reverse(link, &genpd->slave_links,
+					     slave_node) {
+		master = link->master;
+
+		if (!master->set_performance_state)
+			continue;
+
+		genpd_lock_nested(master, depth + 1);
+
+		master_state = link->prev_performance_state;
+		link->performance_state = master_state;
+
+		if (_genpd_reeval_performance_state(master, master_state,
+						    depth + 1)) {
+			pr_err("%s: Failed to roll back to %d performance state\n",
+			       master->name, master_state);
+		}
+
+		genpd_unlock(master);
+	}
+
+	return ret;
 }
 
 static int _genpd_reeval_performance_state(struct generic_pm_domain *genpd,
-					   unsigned int state)
+					   unsigned int state, int depth)
 {
 	struct generic_pm_domain_data *pd_data;
 	struct pm_domain_data *pdd;
+	struct gpd_link *link;
 
 	/* New requested state is same as Max requested state */
 	if (state == genpd->performance_state)
@@ -274,21 +340,30 @@ static int _genpd_reeval_performance_state(struct generic_pm_domain *genpd,
 			state = pd_data->performance_state;
 	}
 
-	if (state == genpd->performance_state)
-		return 0;
-
 	/*
-	 * We aren't propagating performance state changes of a subdomain to its
-	 * masters as we don't have hardware that needs it. Over that, the
-	 * performance states of subdomain and its masters may not have
-	 * one-to-one mapping and would require additional information. We can
-	 * get back to this once we have hardware that needs it. For that
-	 * reason, we don't have to consider performance state of the subdomains
-	 * of genpd here.
+	 * Traverse all sub-domains within the domain. This can be
+	 * done without any additional locking as the link->performance_state
+	 * field is protected by the master genpd->lock, which is already taken.
+	 *
+	 * Also note that link->performance_state (subdomain's performance state
+	 * requirement to master domain) is different from
+	 * link->slave->performance_state (current performance state requirement
+	 * of the devices/sub-domains of the subdomain) and so can have a
+	 * different value.
+	 *
+	 * Note that we also take vote from powered-off sub-domains into account
+	 * as the same is done for devices right now.
 	 */
+	list_for_each_entry(link, &genpd->master_links, master_node) {
+		if (link->performance_state > state)
+			state = link->performance_state;
+	}
+
+	if (state == genpd->performance_state)
+		return 0;
 
 update_state:
-	return _genpd_set_performance_state(genpd, state);
+	return _genpd_set_performance_state(genpd, state, depth);
 }
 
 /**
@@ -332,7 +407,7 @@ int dev_pm_genpd_set_performance_state(struct device *dev, unsigned int state)
 	prev = gpd_data->performance_state;
 	gpd_data->performance_state = state;
 
-	ret = _genpd_reeval_performance_state(genpd, state);
+	ret = _genpd_reeval_performance_state(genpd, state, 0);
 	if (ret)
 		gpd_data->performance_state = prev;
 
diff --git a/include/linux/pm_domain.h b/include/linux/pm_domain.h
index 9ad101362aef..dd364abb649a 100644
--- a/include/linux/pm_domain.h
+++ b/include/linux/pm_domain.h
@@ -136,6 +136,10 @@ struct gpd_link {
 	struct list_head master_node;
 	struct generic_pm_domain *slave;
 	struct list_head slave_node;
+
+	/* Sub-domain's per-master domain performance state */
+	unsigned int performance_state;
+	unsigned int prev_performance_state;
 };
 
 struct gpd_timing_data {
-- 
2.19.1.568.g152ad8e3369a

