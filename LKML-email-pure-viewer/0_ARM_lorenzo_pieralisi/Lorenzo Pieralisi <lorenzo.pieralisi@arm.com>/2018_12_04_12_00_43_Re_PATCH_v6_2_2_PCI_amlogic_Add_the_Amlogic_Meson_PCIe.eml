Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 04 Dec 2018 20:38:08 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 77D17580443;
	Tue,  4 Dec 2018 04:04:01 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga008-1.jf.intel.com with ESMTP; 04 Dec 2018 04:04:01 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ActS6Ehfio9/uoPWhUSzQ5V7olGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc6+bRSN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRPDI28?=
 =?us-ascii?q?cYUBEukPPehXoIbhulQBrxWxBRK0BO7t0TJImmP60Lcm3+g9CwzKwgotFM8Ovn?=
 =?us-ascii?q?TOq9X1Mb8fX+ayzKnS0zrDafJX2TDg44bScxAuv+uMUqh0ccrQ0kkvFh7Og1KU?=
 =?us-ascii?q?qYziJTOayOINsmmc7+Z6TeKvinAoqxtrrTirx8cskYjJi5kPxVDe8CV12po6Jd?=
 =?us-ascii?q?q9SENiZ9OvDZhetzmCOodoXs8vR3tktDs0x7EYo5K3YSsHxIg9yxPeafGLa5aE?=
 =?us-ascii?q?7g/hWeqLPDt1i25pdKiiixqu7ESs0O/xWtWy3V1XtCRKiMPMuWoI1xHL6siIVP?=
 =?us-ascii?q?99/kC51DaR2ADc9PtELVo3laXFMZ4hxKA/lp4JvUTEBC/2l136jK6Qdko65uil?=
 =?us-ascii?q?8/rrbqniq5OGKoN5hB/yPr4zlsG8Heg0KAkDUmqD9eS5zrLj/En5QLtQjv0xl6?=
 =?us-ascii?q?nUqJTaJcUdpq6kDA5Zy4Uj5AilDzegztsYmWALLFVLeRKBkYfpIUrDIO73Dfih?=
 =?us-ascii?q?mVSgijRryO7cPr3nHJrNKmLPkLD7fbZy80Jc0hY8zchD55JIDbEMOPbzWk7ytN?=
 =?us-ascii?q?PGFBM4PBG0zv3jCNV80IMeRG2ODrWYMKPUrV+H+OYvL/OQa48SvTb3M+Il6OL2?=
 =?us-ascii?q?jX8lhV8derGk3ZsNZ3C5AvRpOUKZbWDsgtccC2gKuAU+QffuiF2DVz5TenmzU7?=
 =?us-ascii?q?g95jE9FIKpE4PDSpqxj7yG2SexBodWaXxeClCQDXfocJ2JW/ULaC2MOMNhkTsE?=
 =?us-ascii?q?Vb6nS48mzhyusA76y7x6Luvb4CEYtJTj1MRr6O3Xjx096Tt0D8GF2WGXU250hn?=
 =?us-ascii?q?8IRyMx3K1nu0N90VeD0a97g/BCD9xc/fFJXxw+NZ7dyex6Ft/zVhjAftePVFap?=
 =?us-ascii?q?XNGmDSstQdI2xt8Ee1x9FMm6jhDfwyqqBKcYl7+RC5wy6K7c23nxKNx7y3bJz6?=
 =?us-ascii?q?Qhi1gmQs1SNWypnKJ/9g7TB5LXnEWdjaqlaaMc3CvV/meZ0WWOpF1YUBJ3Uajd?=
 =?us-ascii?q?QH8QfFXWosrj6kPCVbCuD68nPRVHycKFLqtKadjpjVFdSffnOdTeZX+xmmiqCR?=
 =?us-ascii?q?aJwLOMcJTle2EH0CrBD0gElhgZ/WyaOggmGiehv2XeASRzGl31fUPj7/NyqHOh?=
 =?us-ascii?q?QU8y1AGFcUth2qGx+h4Ug/ycVvwS0qgFuCcntzV7AlK908jKBNqHogprZL9cbs?=
 =?us-ascii?q?8l4FdbyWLZsBRwPoChL6BngV4ebwR3vkP02xVrEIlAltIqrHcrzAp0JqKVy1dB?=
 =?us-ascii?q?dzKe3ZDtNbzbMGjy/Baza6HI3lHSysqZ+qAK6P4gsVXsoBmpFlY+83Vgy9RayX?=
 =?us-ascii?q?+c6YvFDQUMUZP9SF049wVnqL7AZCk95ITU1WN3PKmwsz/C3c8pBeQ/xhaheddf?=
 =?us-ascii?q?LL2LFAvoH8IGAMiuLfQgm0K1YRIcIOBS6Kk0MtumdvubwqKkIPxsnTOmjWtd5o?=
 =?us-ascii?q?B93VmB9y59Su7OwpYEzOuU3gqBVzfgklihttr7lpxDZTEXBmC/0zTrBJZNZq1u?=
 =?us-ascii?q?eoYGEX2uI8yrydpknZ7iRnlY+ESlB1wYws+peAOeYEDn0g1UyEsYv2anmSy+zz?=
 =?us-ascii?q?FvlzEpr6yf3DHBwuj4dRoHPHJLS3dmjVv2PYe0iNUaVlCybwc1jBul+Vr6x69D?=
 =?us-ascii?q?qaV/LmnfW0dJczLtL2F/VKu9rb6CY89J6JM1viRbSuW8YVaGSrHjpxsWyT/sH2?=
 =?us-ascii?q?xbxDojbTGlpo35nwBmiGKaNHtzrmDWedtzxRfc49zQX+VR0SAFRCl7iDnXAEaz?=
 =?us-ascii?q?P9+y8NWQlpfDtP2+Vm27Wp1Sdynr0Z2PtC+h6WJ2Bh2/mui5msf7HggizS/7y9?=
 =?us-ascii?q?5qWD3IrRnmZYnnzaa6MeNhfkRzAF/86sx6Gpxxk4cqhZEQ32QaiYuR/XYdjWjz?=
 =?us-ascii?q?NtBb07rkbHURXT4L38LV4A/91U1gNH2Jxpj1VnWAwsR7Ydm6bXgb2iY878BMFa?=
 =?us-ascii?q?eV46ZInSpzolqksw3RZeJxkSsayfsr8HQamf0GuBIxziWBBbAfBUxYPS3vlxuS?=
 =?us-ascii?q?9dy/ortYZH2zcbeuzkpxhs6uDKuNogxHXHb5e5EiHTJ/78llMVLM1mHz5Z/geN?=
 =?us-ascii?q?XKcd0TsRiUmQ/aj+dJMJIxiuYKhS1/NGLhun0lzvQ3jB100pG8oYiHMH5t/KOi?=
 =?us-ascii?q?Dx5cNz31Yd4T+z73gaZfmMaWw56gHpF7FjoXW5voSOqiECgOuvT/KwaODDo8p2?=
 =?us-ascii?q?+AFrXFGg+f7Fpmo2jLE5C2LHyXIHgZzdN/RBiSPkBfgQYUXCkkkZ49DAyl2Mvh?=
 =?us-ascii?q?cEJh7DAL+lH4sgdMyv5vNxTnUGfQvgKoZSkvSJSFMBpa9AJC51rWMcyD6OJ8BT?=
 =?us-ascii?q?pY84alrAyMLGybegtJAXsIWkyCG1DsIL2u6cPc/OifA+q0N+HObqmWqexCS/eI?=
 =?us-ascii?q?woqi04th/zaRL8WPI2NtD/sh1kpYWnB5HcvZli4LSywWkSLNcsGaqA29+i1xss?=
 =?us-ascii?q?Cw7vDrVBjz6ouIDrtYKc9v9AyugaefK+6Qgz50KTZG2ZMNxn/Iy7kf0EQRiyF0?=
 =?us-ascii?q?cDmtHqoPtTTQTKLLgaJXCx8bayVuNMpH9a483w9NOdLFhdPxzLJ3kvk1C1JdX1?=
 =?us-ascii?q?z7hs6pfdAKI326NF7fHkmLKa+JJSfVzMD3e6+8TbxQgf5Qtx2xvzabDkDiMi6C?=
 =?us-ascii?q?lznvSxCgL+VMgDuHMxxZvYG3agxtBnT7TNL6dh27N8d6jSE3wb0xnH/FKXQQPi?=
 =?us-ascii?q?R8c0xTqL2d9idYgvR5G2xc4XtpN+iEmyCF7+bGLpYaq+dkAiNxl+hC+nQ116NV?=
 =?us-ascii?q?7D1YRPxygCbTrsRho1ejkumOzDpoSBtPqjZRi4KNskVvIqHZ9phGWXbZ8xMB92?=
 =?us-ascii?q?SQCxIWp9R7Dt3jobxfyt/KlPG7FDAX09vS/8oRT+zVLorTMHMnMxvkXjrVCiMM?=
 =?us-ascii?q?SDqsOmDUwUdalafB2GeSq80erYLhnogJAodaWUY8EvIBCwwxGNsYLZFlWXU8kL?=
 =?us-ascii?q?OBhcoJ/nuWpQPUAs5du8aUBbqpHfzzJWPB3vF/bBwSzOa9dNxLOw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAADtawZch0O0hNFZChkBAQEBAQEBA?=
 =?us-ascii?q?QEBAQEHAQEBAQEBgVEEAQEBAQELAYNrjDmMDoINFJc1gjIBgUuGRiI0CQ0BAwE?=
 =?us-ascii?q?BAQEBAQIBEwEBAQoLCQgpL4I2JAGCYQEBAQECAQECJBMtEgUBCQEBChgJJQMMB?=
 =?us-ascii?q?UkYgxyBeggEAaU0M4o0jB6BVz+EI4RWg2CCJgKJJwaBc4VehGaKYwcCgiAEjxI?=
 =?us-ascii?q?jgVuINocVmjuCDU0jgz2CIwMXjh0/AQGBNgEBiw8DAQE?=
X-IPAS-Result: =?us-ascii?q?A0ABAADtawZch0O0hNFZChkBAQEBAQEBAQEBAQEHAQEBAQE?=
 =?us-ascii?q?BgVEEAQEBAQELAYNrjDmMDoINFJc1gjIBgUuGRiI0CQ0BAwEBAQEBAQIBEwEBA?=
 =?us-ascii?q?QoLCQgpL4I2JAGCYQEBAQECAQECJBMtEgUBCQEBChgJJQMMBUkYgxyBeggEAaU?=
 =?us-ascii?q?0M4o0jB6BVz+EI4RWg2CCJgKJJwaBc4VehGaKYwcCgiAEjxIjgVuINocVmjuCD?=
 =?us-ascii?q?U0jgz2CIwMXjh0/AQGBNgEBiw8DAQE?=
X-IronPort-AV: E=Sophos;i="5.56,313,1539673200"; 
   d="scan'208";a="42653047"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 04 Dec 2018 04:03:59 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726165AbeLDMA4 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 4 Dec 2018 07:00:56 -0500
Received: from foss.arm.com ([217.140.101.70]:58984 "EHLO foss.arm.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1725902AbeLDMAz (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 4 Dec 2018 07:00:55 -0500
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.72.51.249])
        by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id 69A0B80D;
        Tue,  4 Dec 2018 04:00:55 -0800 (PST)
Received: from e107981-ln.cambridge.arm.com (e107981-ln.cambridge.arm.com [10.1.197.40])
        by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPSA id 5310E3F59C;
        Tue,  4 Dec 2018 04:00:52 -0800 (PST)
Date: Tue, 4 Dec 2018 12:00:43 +0000
From: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
To: Hanjie Lin <hanjie.lin@amlogic.com>
Cc: Bjorn Helgaas <helgaas@kernel.org>, Rob Herring <robh@kernel.org>,
        Jianxin Pan <jianxin.pan@amlogic.com>,
        Kevin Hilman <khilman@baylibre.com>,
        Shawn Lin <shawn.lin@rock-chips.com>,
        Philippe Ombredanne <pombredanne@nexb.com>,
        linux-pci@vger.kernel.org, linux-kernel@vger.kernel.org,
        Yue Wang <yue.wang@amlogic.com>,
        Qiufang Dai <qiufang.dai@amlogic.com>,
        Jian Hu <jian.hu@amlogic.com>,
        Liang Yang <liang.yang@amlogic.com>,
        Cyrille Pitchen <cyrille.pitchen@free-electrons.com>,
        Gustavo Pimentel <gustavo.pimentel@synopsys.com>,
        Carlo Caione <carlo@caione.org>,
        linux-amlogic@lists.infradead.org,
        linux-arm-kernel@lists.infradead.org,
        Jerome Brunet <jbrunet@baylibre.com>
Subject: Re: [PATCH v6 2/2] PCI: amlogic: Add the Amlogic Meson PCIe
 controller driver
Message-ID: <20181204120034.GA25842@e107981-ln.cambridge.arm.com>
References: <1542876836-191355-1-git-send-email-hanjie.lin@amlogic.com>
 <1542876836-191355-3-git-send-email-hanjie.lin@amlogic.com>
 <20181203164150.GA11855@e107981-ln.cambridge.arm.com>
 <20181203225731.GE207198@google.com>
 <1bc8f5bd-6f69-4867-89ca-e5a611da9136@amlogic.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <1bc8f5bd-6f69-4867-89ca-e5a611da9136@amlogic.com>
User-Agent: Mutt/1.5.24 (2015-08-30)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Tue, Dec 04, 2018 at 06:40:55PM +0800, Hanjie Lin wrote:
> 
> 
> On 2018/12/4 6:57, Bjorn Helgaas wrote:
> > On Mon, Dec 03, 2018 at 04:41:50PM +0000, Lorenzo Pieralisi wrote:
> >> On Thu, Nov 22, 2018 at 04:53:54PM +0800, Hanjie Lin wrote:
> >>
> >> [...]
> >>
> >>> +static int meson_pcie_rd_own_conf(struct pcie_port *pp, int where, int size,
> >>> +				  u32 *val)
> >>> +{
> >>> +	struct dw_pcie *pci = to_dw_pcie_from_pp(pp);
> >>> +
> >>> +	/*
> >>> +	 * there is a bug of MESON AXG pcie controller that software can not
> >>> +	 * programe PCI_CLASS_DEVICE register, so we must return a fake right
> >>> +	 * value to ensure driver could probe successfully.
> >>> +	 */
> >>> +	if (where == PCI_CLASS_REVISION) {
> >>> +		*val = readl(pci->dbi_base + PCI_CLASS_REVISION);
> >>> +		/* keep revision id */
> >>> +		*val &= PCI_CLASS_REVISION_MASK;
> >>> +		*val |= PCI_CLASS_BRIDGE_PCI << 16;
> >>> +		return PCIBIOS_SUCCESSFUL;
> >>> +	}
> >>
> >> As I said before, this looks broken. If this code (or other drivers with
> >> the same broken assumptions, eg dwc/pcie-qcom.c) carries out a, say,
> >> byte sized config access of eg PCI_CLASS_DEVICE you will get junk out of
> >> it according to your comment above.
> >>
> >> I would like to pick Bjorn's brain on this to see what we can really do
> >> to fix this (and other) drivers.
> > 
> >   - Check to see whether you're reading anything in the 32-bit dword at
> >     offset 0x08.
> > 
> >   - Do the 32-bit readl().
> > 
> >   - Insert the correct Sub-Class and Base Class code (you also throw
> >     away the Programming Interface; not sure why that is)
> > 
> >   - If you're reading something smaller than 32 bits, mask & shift as
> >     needed.  pci_bridge_emul_conf_read() does something similar that
> >     you might be able to copy.
> > 
> > Out of curiosity, what code depends on PCI_CLASS_BRIDGE_PCI?  There
> > are several places in the kernel that currently depend on it, but I
> > think several of them *should* be checking dev->hdr_type to identify a
> > type 1 header instead.
> > 
> > Bjorn
> > 
> > .
> > 
> 
> Yes, it would be broken in particular scenes(eg: read 1 or 2 bytes from 0xa/PCI_CLASS_DEVICE)
> that I didn't considered.
>  
> As your suggestion, I consider some code below may help this issue:
> 1, First call dw_pcie_read() help to read 1/2/4 bytes from register,
>    request all other *size* bytes will return error and dw_pcie_read()
>    will also check register alignment.
>  
> 2, If dw_pcie_read() return success and *where* is 0x8/PCI_CLASS_DEVICE or 0xa/PCI_CLASS_REVISION,
>    we may need to correct class code.
>    As PCI_CLASS_REVISION is two-bytes register, so only when read 4 bytes from 0x8/PCI_CLASS_DEVICE
>    or read 2 bytes from 0xa/PCI_CLASS_REVISION we should correct the class code.
>  
> ps: read 1 byte from 0xa/PCI_CLASS_REVISION or 0xb will get incorrect value.

You can fix this too.

> static int meson_pcie_rd_own_conf(struct pcie_port *pp, int where, int size,
>                 u32 *val)
> {
>         struct dw_pcie *pci = to_dw_pcie_from_pp(pp);
>         int ret;
> 
>         ret = dw_pcie_read(pci->dbi_base + where, size, val);
>         if (ret != PCIBIOS_SUCCESSFUL)
>                 return ret;
> 
>         /*
>         * there is a bug of MESON AXG pcie controller that software can not
>         * programe PCI_CLASS_DEVICE register, so we must return a fake right

"There is a bug in the MESON AXG pcie controller whereby software cannot
programme the PCI_CLASS_DEVICE register, so we must fabricate the return
value in the config accessors."

>         * value to ensure driver could probe successfully.
>         */
>         if (where == PCI_CLASS_REVISION && size == 4)
>                 *val = (PCI_CLASS_BRIDGE_PCI << 16) | (*val & 0xffff);
>         else if (where == PCI_CLASS_DEVICE && size == 2)
>                 *val = PCI_CLASS_BRIDGE_PCI;

You can further filter it with (where & 0x1) == PCI_CLASS_DEVICE
and handle the size accordingly, so that even a byte access would
work, for completeness.

Lorenzo

>         return PCIBIOS_SUCCESSFUL;
> }
> 
> 3, We must ensure class is PCI_CLASS_BRIDGE_PCI except right hdr_type,
>    or pci_setup_device() will get failed: 
> 
>    ...
>    class = pci_class(dev);
>    dev->revision = class & 0xff;
>    dev->class = class >> 8; /* upper 3 bytes */ 
>    ....
>    switch (dev->hdr_type) { /* header type */
>    ... 
>    case PCI_HEADER_TYPE_BRIDGE: /* bridge header */
>       if (class != PCI_CLASS_BRIDGE_PCI)  /* class must be PCI_CLASS_BRIDGE_PCI  */
>          goto bad; 
> 
> 
> thanks.
> 
> hanjie
