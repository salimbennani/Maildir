Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  18 Dec 2018 18:08:24 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 470A05805FC;
	Mon, 17 Dec 2018 23:35:29 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga007-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 17 Dec 2018 23:35:28 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AfyHyrx+PvNYe8P9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1+8TIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDwULs6Wymt771zRRHoli?=
 =?us-ascii?q?kJKjA3/mLQhMNygqJUrw6upwdnw4PWe4yVKOZyc7nBcd4AWWZNQsBcXDFBDIOm?=
 =?us-ascii?q?aIsPCvIMMuZGoIn8ulAAtRq+DhSrCeLhzD9Ih2T73ask0+QgDA7G3RYvE8gSv3?=
 =?us-ascii?q?TTqdX4LaEfWv22wqnQ1TjPce9a1DPn5ITVfB0tv+uAUa9zfMbN00UiFgHIgk2O?=
 =?us-ascii?q?pYD4Pj6ZzPoBv3aY4uZ6SO6jlXMrpxtwrzWvwMonl5PHiZgPyl/e8CV02IY1Ks?=
 =?us-ascii?q?O8SE58edOkDpRQuD+AN4dsQcMtXXtouCAkxb0Co5K7ezIKyJs/yx7ebfyIbZSI?=
 =?us-ascii?q?7wr9WOqNJTp0nm9pdbyhixqo7EStyfHwWtO13VtItiZFl8PDtnEJ1xzd8MiHTf?=
 =?us-ascii?q?5981+l2TaO0QDT9+5FLVk3laXFMZ4hxKA/lp4KvUTEEC72nlv5jLWNe0U69ein?=
 =?us-ascii?q?9f7nbq/lppCCLY90jB/xMqA0lsy4G+Q4PRACX3KH9uSkyL3j4Ur5Ta1Ojv03ka?=
 =?us-ascii?q?nWrorWJMsGpqOiBw9V04Aj6wuwDju80dQYm2UHI0xBeB6dk4fpPFTOKujiDfij?=
 =?us-ascii?q?m1SsjCtrx/feM73hGJrNL2TDn63mfbpn605c1RA8zdZQ559PDrEBIfTzWlL+td?=
 =?us-ascii?q?DCDx85NRC0zPjjCNlnyoweXmePCLeDMKzOqV+I+v4vI+6UaY8XvzbyNeIp5/3p?=
 =?us-ascii?q?jX8/n18derKk3Z8WaHC+A/RnLF+VYXvqgtcdD2gKuhAyQ/DtiF2HSTRTfWq9X7?=
 =?us-ascii?q?og5jEnD4KrFZ3MRputgLyG3ye3BIdWaXpECl2XFXfodoOEW+oDaS6II89hlCAE?=
 =?us-ascii?q?WqalS4M7yR6uswr6waJ9LuXI4i0YqY7j1N9t6u3Qjx4y8yZ4D8Cc026XSWF0kX?=
 =?us-ascii?q?gFRzs33KB5vEx8xU2P0al+g/xEC9NT4+lFXRs9NZ7Z1+Z6Ecz9WhrdfteVT1ar?=
 =?us-ascii?q?WsipDisvTt0v2dMOY1xyG9O5jh/d2SqmBLsVl7+OBJww6a/c23nxJ8Bgy3fJzq?=
 =?us-ascii?q?Uhjl8mQtdROm2inKJw6w/TB4vRmUWDi6mqbbgc3DLK9Gqb0GWBpl9YXxBqXaXF?=
 =?us-ascii?q?R38fYFDWosr/5k7ZS7+uCLInMhZOyMKYK6tKbMHpgktCRPv5JNveZGexkX+qBR?=
 =?us-ascii?q?mU3rOMcJbqe2IF0SXBCUgElgcT/WqGNQk+HCuhv3jSDDt0FVLrYkPs9+Z+pWi/?=
 =?us-ascii?q?Tk81yQGKckJg26C0+h4TmfyTVfcT0qgYtycmrjV+BEy90M7OC9qcuwphe71Rbs?=
 =?us-ascii?q?k54FhZ2mPWqQx8Moa7IKB/m1ERaQJ3v0Dp1xVpEYhAlckqrHU3zAt9M66Y0VVB?=
 =?us-ascii?q?dy+G0pD0ILHYNm7y/BW3Ya7Mxl7eyMqW+rsI6Pkgq1TjoRulGVY4/3Rm09layX?=
 =?us-ascii?q?2c5prRAQoWUJLxVFs39hdgq7HbZCk9+53b1Xl2PaaotT/C3sojBPE5xRa4Y9df?=
 =?us-ascii?q?LKSEGRfoE80bG8ehMvYqlEWubh4eOuBd6rQ0P8K/e/SawqGrOPtvkyy8jWRA5o?=
 =?us-ascii?q?BwyUaM9yt6Su7V0JcJ2fCY3g2bVzjiiFetqNz4mYdBZTsKBGqw1TDkBJJNZq11?=
 =?us-ascii?q?ZYsKCWauL9e3x9lknJ7tRnhY+UWnB1MH3s+pZBWTY0b83Q1WyUQYv3inlTGkwD?=
 =?us-ascii?q?xzljEjtrCf0zDWw+T+aBoHPXZGRGt4glf2Ioi0jNcaUFKzbwczlxul5kf6x65F?=
 =?us-ascii?q?q6R5NGTTRUZIfy7rL2BtSKewt7yCY9JR55MsqylYTOO8YVWCQL7nvxQayz/jH3?=
 =?us-ascii?q?dZxD0jdzCloJL5kwZ4iGKcKnZ+t37ZecB2xRfC693QX/9R3jwaRCZmjTnbHESz?=
 =?us-ascii?q?P96s/d+MjZfMrvi+V369Vp1UaSTrzpmPtCqh6W1qHB2whfazmtL8HAg+0C/70c?=
 =?us-ascii?q?RqVCrSoBb9ZInry7q1MeZ9ckZ0A1/87tJwGptinYsomJEQxX8ai42Q/XoGkmf8?=
 =?us-ascii?q?K89X2KzgY3oWWT4E3cTV7xP71015IXKE3Ib5VnSbwst8aNi2eGIW2iQh789UDK?=
 =?us-ascii?q?eY9qBLnSxwolCgtwLefeB9nisByfsp8HMan+YJuA83wiScGL8SG1RYPTf3lxSJ?=
 =?us-ascii?q?9N2+qKRXZGCycbm/zkZ+nNahDK2crQFYQnr2ZpAiHSpo5MVlLF3MyGHz6p3jeN?=
 =?us-ascii?q?TIdt0crBqUkxPdj+RPLJIxi+EHhS5mOWL7oH0kxPQ3jR1o3ZGmooeHL39h876+?=
 =?us-ascii?q?Ah5dLjf1fd8c+inxjaZCmcabx4KvEY9kGjoVR5vkV+6oHCgRtfT6NAaODTs8pW?=
 =?us-ascii?q?2AGbfEGQ+f6UFmr2/AEpyxNnGXImUZwstmRBWHOENfhwUUVi0gnpElDgCq2NDh?=
 =?us-ascii?q?cEBh6zER4V74twJMyv9yOBn5SGvfvwCoajE7SJWEKBpW7wdC51raMMCE7+JzGT?=
 =?us-ascii?q?1Y8YOlrACXNmObYAFIB3kTWkOYH1DjIqWu5d7Y/uiYGOW+LvjOYbaPqeBEVPeI?=
 =?us-ascii?q?35Wv0oR48DaWK8WPJWJvD/k62kpFQHB4FN7VmzQJSywLiS3Na9SXqwu7+i1yts?=
 =?us-ascii?q?q/6ujkWBrz5YuTDLtfKc9g+w2tjqeZKeGRhDx1KTJZ1p4XwX/Iyb4f3EMdii10?=
 =?us-ascii?q?djmtF6gAujDJTK7KhqBXCBsbYTtpNMRU96I8whVNOcnDh9Pp1754i+Q5BEtfWV?=
 =?us-ascii?q?P9msGme8oKLnq5NFPGAkaLKbuHKSfKw8HxfaOzV7lQgP9IuB23vDaRC1XjMSib?=
 =?us-ascii?q?lzn1SxCvNvlBjSGBMxxYvYG9cxBtBnDiTdLmcBK7NtB3gCYywb01gHPKKGEdPS?=
 =?us-ascii?q?J9c0NLsr2f8ydYju9jFGxG63o2ZdWDznKF7+jVMIwH9+FmDiVymMpV5X07z/1e?=
 =?us-ascii?q?6yQSALQhlCLUr9Nq5VWrgOKGzD1PVBtIoyxMwoWRshMmcfHU+oRKVGTa9RYl4m?=
 =?us-ascii?q?CZChBMrNxgXJmn76RRzMXf0b7+Jy1L28zb8NFaBMXOLs+Ddn07Pky6NiTTCV46?=
 =?us-ascii?q?QD/jE2CX01NbkdmU6HyZr5F8oZ/pzsldAoRHXUA4Q6tJQn9uG8YPdc96?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AQAAC0oRhch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgVqCESeMFYt5giGXRhSBXxUYEwGHXiI0CQ0BAwEBAQEBAQIBEwE?=
 =?us-ascii?q?BAQoLCQgpIwyCNiKCZQMDAQIkGQEBLgkBBQkBAVADVAYBDQUFglJLggEFpweBb?=
 =?us-ascii?q?DOCdgEBBYc2CId+gyWBHBeBQD+BEYdYhhqJSIF0hBcRbJBTCQ2RUgIWkVSJQZA?=
 =?us-ascii?q?tgUaCDnAVgyeCGwwXg0qKYDMBMYEFAQGNeAEB?=
X-IPAS-Result: =?us-ascii?q?A0AQAAC0oRhch0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBgVq?=
 =?us-ascii?q?CESeMFYt5giGXRhSBXxUYEwGHXiI0CQ0BAwEBAQEBAQIBEwEBAQoLCQgpIwyCN?=
 =?us-ascii?q?iKCZQMDAQIkGQEBLgkBBQkBAVADVAYBDQUFglJLggEFpweBbDOCdgEBBYc2CId?=
 =?us-ascii?q?+gyWBHBeBQD+BEYdYhhqJSIF0hBcRbJBTCQ2RUgIWkVSJQZAtgUaCDnAVgyeCG?=
 =?us-ascii?q?wwXg0qKYDMBMYEFAQGNeAEB?=
X-IronPort-AV: E=Sophos;i="5.56,367,1539673200"; 
   d="scan'208";a="67278584"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 17 Dec 2018 23:35:26 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726667AbeLRHfY (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 18 Dec 2018 02:35:24 -0500
Received: from hqemgate16.nvidia.com ([216.228.121.65]:7754 "EHLO
        hqemgate16.nvidia.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726652AbeLRHfW (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 18 Dec 2018 02:35:22 -0500
Received: from hqpgpgate102.nvidia.com (Not Verified[216.228.121.13]) by hqemgate16.nvidia.com (using TLS: TLSv1.2, DES-CBC3-SHA)
        id <B5c18a3300000>; Mon, 17 Dec 2018 23:35:12 -0800
Received: from hqmail.nvidia.com ([172.20.161.6])
  by hqpgpgate102.nvidia.com (PGP Universal service);
  Mon, 17 Dec 2018 23:35:20 -0800
X-PGP-Universal: processed;
        by hqpgpgate102.nvidia.com on Mon, 17 Dec 2018 23:35:20 -0800
Received: from HQMAIL108.nvidia.com (172.18.146.13) by HQMAIL105.nvidia.com
 (172.20.187.12) with Microsoft SMTP Server (TLS) id 15.0.1395.4; Tue, 18 Dec
 2018 07:35:19 +0000
Received: from hqnvemgw01.nvidia.com (172.20.150.20) by HQMAIL108.nvidia.com
 (172.18.146.13) with Microsoft SMTP Server (TLS) id 15.0.1395.4 via Frontend
 Transport; Tue, 18 Dec 2018 07:35:19 +0000
Received: from niwei-ubuntu.nvidia.com (Not Verified[10.19.225.182]) by hqnvemgw01.nvidia.com with Trustwave SEG (v7,5,8,10121)
        id <B5c18a3360000>; Mon, 17 Dec 2018 23:35:19 -0800
From: Wei Ni <wni@nvidia.com>
To: <thierry.reding@gmail.com>, <daniel.lezcano@linaro.org>,
        <edubezval@gmail.com>, <linux-tegra@vger.kernel.org>
CC: <rui.zhang@intel.com>, <srikars@nvidia.com>,
        <linux-kernel@vger.kernel.org>, <devicetree@vger.kernel.org>,
        Wei Ni <wni@nvidia.com>
Subject: [PATCH v1 05/12] thermal: tegra: add support for gpu hw-throttle
Date: Tue, 18 Dec 2018 15:34:37 +0800
Message-ID: <1545118484-23641-7-git-send-email-wni@nvidia.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1545118484-23641-1-git-send-email-wni@nvidia.com>
References: <1545118484-23641-1-git-send-email-wni@nvidia.com>
X-NVConfidentiality: public
MIME-Version: 1.0
Content-Type: text/plain
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=nvidia.com; s=n1;
        t=1545118512; bh=Qxs6VPYSkw7e1bqFfbSaW12o9f78qSEo3/nEY67lpAY=;
        h=X-PGP-Universal:From:To:CC:Subject:Date:Message-ID:X-Mailer:
         In-Reply-To:References:X-NVConfidentiality:MIME-Version:
         Content-Type;
        b=ZNzEzdUF5eM7Xv/fYb7IdmedWTNl1JpeQD1ZrcXoXVJIdRX8rnbiQMgXzk16su05d
         7bhoa5+5IsLs4RvPrwziG51F0vG3AyH7CyY640Xe1eB+CqhUFZvZKzedQJnnxRRI9+
         LKerNeahZmI0BtKoIkbZ5MuEd9j9gOe9Zos/6VWpnqCU0fC43zn02hOWwA2Lu+mmg2
         6zYgPsJiOAw49zBaCUbmg7HmBTuyg/ylMjC2OdsWR1ZQ3Zhz1vwC7981iQNuv9MW2b
         XBkag3uFcD6PE691OX4B5d7NqW4TIGOrAYvOPLF6MX9kuUERuKuNaSkAQF5E/jPLjY
         B3eJgM5rJd+XA==
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Add support to trigger pulse skippers on the GPU
when a HOT trip point is triggered. The pulse skippers
can be signalled to throttle at low, medium and high
depths\levels.

Signed-off-by: Wei Ni <wni@nvidia.com>
---
 drivers/thermal/tegra/soctherm.c | 118 ++++++++++++++++++++++++++++-----------
 1 file changed, 85 insertions(+), 33 deletions(-)

diff --git a/drivers/thermal/tegra/soctherm.c b/drivers/thermal/tegra/soctherm.c
index 673c3ffa9001..d3cef88a3f22 100644
--- a/drivers/thermal/tegra/soctherm.c
+++ b/drivers/thermal/tegra/soctherm.c
@@ -1,5 +1,6 @@
+// SPDX-License-Identifier: GPL-2.0
 /*
- * Copyright (c) 2014, NVIDIA CORPORATION.  All rights reserved.
+ * Copyright (c) 2014 - 2018, NVIDIA CORPORATION.  All rights reserved.
  *
  * Author:
  *	Mikko Perttunen <mperttunen@nvidia.com>
@@ -160,6 +161,15 @@
 /* get dividend from the depth */
 #define THROT_DEPTH_DIVIDEND(depth)	((256 * (100 - (depth)) / 100) - 1)
 
+/* gk20a nv_therm interface N:3 Mapping. Levels defined in tegra124-sochterm.h
+ * level	vector
+ * NONE		3'b000
+ * LOW		3'b001
+ * MED		3'b011
+ * HIGH		3'b111
+ */
+#define THROT_LEVEL_TO_DEPTH(level)	((0x1 << (level)) - 1)
+
 /* get THROT_PSKIP_xxx offset per LIGHT/HEAVY throt and CPU/GPU dev */
 #define THROT_OFFSET			0x30
 #define THROT_PSKIP_CTRL(throt, dev)	(THROT_PSKIP_CTRL_LITE_CPU + \
@@ -219,6 +229,7 @@ struct soctherm_throt_cfg {
 	u8 priority;
 	u8 cpu_throt_level;
 	u32 cpu_throt_depth;
+	u32 gpu_throt_level;
 	struct thermal_cooling_device *cdev;
 	bool init;
 };
@@ -974,6 +985,50 @@ static int soctherm_thermtrips_parse(struct platform_device *pdev)
 	return 0;
 }
 
+static int soctherm_throt_cfg_parse(struct device *dev,
+				    struct device_node *np,
+				    struct soctherm_throt_cfg *stc)
+{
+	struct tegra_soctherm *ts = dev_get_drvdata(dev);
+	int ret;
+	u32 val;
+
+	ret = of_property_read_u32(np, "nvidia,priority", &val);
+	if (ret) {
+		dev_err(dev, "throttle-cfg: %s: invalid priority\n", stc->name);
+		return -EINVAL;
+	}
+	stc->priority = val;
+
+	ret = of_property_read_u32(np, ts->soc->use_ccroc ?
+				   "nvidia,cpu-throt-level" :
+				   "nvidia,cpu-throt-percent", &val);
+	if (!ret) {
+		if (ts->soc->use_ccroc &&
+		    val <= TEGRA_SOCTHERM_THROT_LEVEL_HIGH)
+			stc->cpu_throt_level = val;
+		else if (!ts->soc->use_ccroc && val <= 100)
+			stc->cpu_throt_depth = val;
+		else
+			goto err;
+	} else {
+		goto err;
+	}
+
+	ret = of_property_read_u32(np, "nvidia,gpu-throt-level", &val);
+	if (!ret && val <= TEGRA_SOCTHERM_THROT_LEVEL_HIGH)
+		stc->gpu_throt_level = val;
+	else
+		goto err;
+
+	return 0;
+
+err:
+	dev_err(dev, "throttle-cfg: %s: no throt prop or invalid prop\n",
+		stc->name);
+	return -EINVAL;
+}
+
 /**
  * soctherm_init_hw_throt_cdev() - Parse the HW throttle configurations
  * and register them as cooling devices.
@@ -984,8 +1039,7 @@ static void soctherm_init_hw_throt_cdev(struct platform_device *pdev)
 	struct tegra_soctherm *ts = dev_get_drvdata(dev);
 	struct device_node *np_stc, *np_stcc;
 	const char *name;
-	u32 val;
-	int i, r;
+	int i;
 
 	for (i = 0; i < THROTTLE_SIZE; i++) {
 		ts->throt_cfgs[i].name = throt_names[i];
@@ -1003,6 +1057,7 @@ static void soctherm_init_hw_throt_cdev(struct platform_device *pdev)
 	for_each_child_of_node(np_stc, np_stcc) {
 		struct soctherm_throt_cfg *stc;
 		struct thermal_cooling_device *tcd;
+		int err;
 
 		name = np_stcc->name;
 		stc = find_throttle_cfg_by_name(ts, name);
@@ -1012,37 +1067,10 @@ static void soctherm_init_hw_throt_cdev(struct platform_device *pdev)
 			continue;
 		}
 
-		r = of_property_read_u32(np_stcc, "nvidia,priority", &val);
-		if (r) {
-			dev_info(dev,
-				 "throttle-cfg: %s: missing priority\n", name);
+
+		err = soctherm_throt_cfg_parse(dev, np_stcc, stc);
+		if (err)
 			continue;
-		}
-		stc->priority = val;
-
-		if (ts->soc->use_ccroc) {
-			r = of_property_read_u32(np_stcc,
-						 "nvidia,cpu-throt-level",
-						 &val);
-			if (r) {
-				dev_info(dev,
-					 "throttle-cfg: %s: missing cpu-throt-level\n",
-					 name);
-				continue;
-			}
-			stc->cpu_throt_level = val;
-		} else {
-			r = of_property_read_u32(np_stcc,
-						 "nvidia,cpu-throt-percent",
-						 &val);
-			if (r) {
-				dev_info(dev,
-					 "throttle-cfg: %s: missing cpu-throt-percent\n",
-					 name);
-				continue;
-			}
-			stc->cpu_throt_depth = val;
-		}
 
 		tcd = thermal_of_cooling_device_register(np_stcc,
 							 (char *)name, ts,
@@ -1186,6 +1214,28 @@ static void throttlectl_cpu_mn(struct tegra_soctherm *ts,
 }
 
 /**
+ * throttlectl_gpu_level_select() - selects throttling level for GPU
+ * @throt: the LIGHT/HEAVY of throttle event id
+ *
+ * This function programs soctherm's interface to GK20a NV_THERM to select
+ * pre-configured "Low", "Medium" or "Heavy" throttle levels.
+ *
+ * Return: boolean true if HW was programmed
+ */
+static void throttlectl_gpu_level_select(struct tegra_soctherm *ts,
+					 enum soctherm_throttle_id throt)
+{
+	u32 r, level, throt_vect;
+
+	level = ts->throt_cfgs[throt].gpu_throt_level;
+	throt_vect = THROT_LEVEL_TO_DEPTH(level);
+	r = readl(ts->regs + THROT_PSKIP_CTRL(throt, THROTTLE_DEV_GPU));
+	r = REG_SET_MASK(r, THROT_PSKIP_CTRL_ENABLE_MASK, 1);
+	r = REG_SET_MASK(r, THROT_PSKIP_CTRL_VECT_GPU_MASK, throt_vect);
+	writel(r, ts->regs + THROT_PSKIP_CTRL(throt, THROTTLE_DEV_GPU));
+}
+
+/**
  * soctherm_throttle_program() - programs pulse skippers' configuration
  * @throt: the LIGHT/HEAVY of the throttle event id.
  *
@@ -1207,6 +1257,8 @@ static void soctherm_throttle_program(struct tegra_soctherm *ts,
 	else
 		throttlectl_cpu_mn(ts, throt);
 
+	throttlectl_gpu_level_select(ts, throt);
+
 	r = REG_SET_MASK(0, THROT_PRIORITY_LITE_PRIO_MASK, stc.priority);
 	writel(r, ts->regs + THROT_PRIORITY_CTRL(throt));
 
-- 
2.7.4

