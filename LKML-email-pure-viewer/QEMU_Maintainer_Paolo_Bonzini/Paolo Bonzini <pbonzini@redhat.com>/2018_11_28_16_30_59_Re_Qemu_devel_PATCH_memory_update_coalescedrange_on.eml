Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 29 Nov 2018 08:38:52 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga008.fm.intel.com (fmsmga008.fm.intel.com [10.253.24.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 46C445802E4
	for <like.xu@linux.intel.com>; Wed, 28 Nov 2018 09:04:41 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by fmsmga008-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 28 Nov 2018 09:04:41 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3ALKUF9BVGyxGjZ925J3QJ/uGbUFbV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZRSHvqdThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGp2y?=
 =?us-ascii?q?b4UPAeQCM+hXoYbyqFkSohWjHQmhBuHhxzBVinL4waE1zf8hHBrD3AA8Bd8Dqm?=
 =?us-ascii?q?jYodv3OaoUTOu7zLPIzTLGb/5Owzny8o/IchQmofqRQL9wdszRyEguFwPDj1Wb?=
 =?us-ascii?q?tIvoPyuO2eQKtWia7utgVeSui2M8sQF+vCWgxsc2hYnVnI4a1lfE9SBgzYszON?=
 =?us-ascii?q?a2S1Z7bMa6HJdMtCyWLZZ6Tt4hTm1ypio3xL0LtYSmcCUI0Jgr2QLTZvidf4SV?=
 =?us-ascii?q?7B/vSvydLSp7iX9rYr6zmRW//E69wePmTMa0ykxFri9dn9nMqH8N0xvT59CDSv?=
 =?us-ascii?q?t85UehxS2P2xrc6uFCPEA4j63bK4QuwrIol5oTt1rMHjPulUnokKObdV8o9vW1?=
 =?us-ascii?q?5+nkeLnquJGROo9uhg3jMKkigsm/Dv45MggKUWib4+O81Lj78E3gXrpKi+A2nr?=
 =?us-ascii?q?DEv5/EO8QUuKq5DxZO3YYk9ha/CSup38oDnXUAKFJFeRGHgJbzN1DBPfD1FfO/?=
 =?us-ascii?q?g1WqkDd2yPHKJLzhApPRLnfdlLftZ6py60lZyAcoy9Bf4JRUCr4HIPLuQEPxs8?=
 =?us-ascii?q?bYDhAhPwyu3+nnEMl91p8ZWW+XBq+ZMaDSvkGS6uMgPumBf4sVuDf7K/g46P/i?=
 =?us-ascii?q?l345mVkBfaa32Zsbcmy3HvNjIxbRXHz3n91UEXsWphFsC6vuiUaeSnhVYHC9Wb?=
 =?us-ascii?q?964Ss0T4evDIPGT4bqh6Sd3SC9BdpPa2VbT1yBD3rsJLiCQOoGPSebI8t9lW4d?=
 =?us-ascii?q?WL28DoMsyxyq8RX30qdqNfb8/CoeupT+kt9v6LrIiBsw+DdoWtmbyHyHVGpun2?=
 =?us-ascii?q?kFFAMxiYljulFmylbL96V9hOBfXYha++hUSQc7c5jRyutmDPjpXRjNONyODlS+?=
 =?us-ascii?q?FJHuGDw0U5c9zsEDZ257HNOtiA2F2DClUJEPkLnePJUz9qWU9X/3Ncd7yj6SzK?=
 =?us-ascii?q?MmiUsnRMpnL2CqhqdjsQPUAtiawA2ii6+2ePFEj2b2/2CZwD/L5RkAXQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BwAgBJyv5bhxHrdtBjHQEBBQEHBQGBZ?=
 =?us-ascii?q?YExgmKDeYh3iymBYAglkkuGahQYFIduIjgSAQMBAQEBAQECARMBAQEKCwkIGw4?=
 =?us-ascii?q?vgjYFAgMaAQaCWwEBAQECAQECIAQfCiwCAQECBgEBChgmBAICAwFTBgEMBgIBA?=
 =?us-ascii?q?QGDHAGBeQgBBKZ0fDOKJA+MFheBQD+BEScMgl+IBYJXAqAbCYQhgXSLFgYYgVq?=
 =?us-ascii?q?HfhCHLSyISoEDjk+BXYF2MxoIGxWDJ4InF44eQDGBBxyLIIF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0BwAgBJyv5bhxHrdtBjHQEBBQEHBQGBZYExgmKDeYh3iym?=
 =?us-ascii?q?BYAglkkuGahQYFIduIjgSAQMBAQEBAQECARMBAQEKCwkIGw4vgjYFAgMaAQaCW?=
 =?us-ascii?q?wEBAQECAQECIAQfCiwCAQECBgEBChgmBAICAwFTBgEMBgIBAQGDHAGBeQgBBKZ?=
 =?us-ascii?q?0fDOKJA+MFheBQD+BEScMgl+IBYJXAqAbCYQhgXSLFgYYgVqHfhCHLSyISoEDj?=
 =?us-ascii?q?k+BXYF2MxoIGxWDJ4InF44eQDGBBxyLIIF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,291,1539673200"; 
   d="scan'208";a="64389807"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mga01b.intel.com with ESMTP/TLS/AES256-SHA; 28 Nov 2018 09:04:40 -0800
Received: from localhost ([::1]:48789 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gS3GR-0002fD-91
	for like.xu@linux.intel.com; Wed, 28 Nov 2018 12:04:39 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:47233)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <pbonzini@redhat.com>) id 1gS3Cx-00083O-99
	for qemu-devel@nongnu.org; Wed, 28 Nov 2018 12:01:05 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <pbonzini@redhat.com>) id 1gS3Cs-0006cv-0S
	for qemu-devel@nongnu.org; Wed, 28 Nov 2018 12:01:03 -0500
Received: from mx1.redhat.com ([209.132.183.28]:42983)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <pbonzini@redhat.com>) id 1gS2jy-00080y-Rt
	for qemu-devel@nongnu.org; Wed, 28 Nov 2018 11:31:07 -0500
Received: from smtp.corp.redhat.com (int-mx07.intmail.prod.int.phx2.redhat.com
	[10.5.11.22])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id F0BB05AFF5;
	Wed, 28 Nov 2018 16:31:05 +0000 (UTC)
Received: from [10.36.112.30] (ovpn-112-30.ams2.redhat.com [10.36.112.30])
	by smtp.corp.redhat.com (Postfix) with ESMTPS id EE8691001914;
	Wed, 28 Nov 2018 16:31:04 +0000 (UTC)
To: Atsushi Nemoto <atsushi.nemoto@sord.co.jp>, qemu-devel@nongnu.org
References: <20181128.181700.1038782556965887223.atsushi.nemoto@sord.co.jp>
From: Paolo Bonzini <pbonzini@redhat.com>
Openpgp: preference=signencrypt
Autocrypt: addr=pbonzini@redhat.com; prefer-encrypt=mutual; keydata=
	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
Message-ID: <7329ea70-1ae9-4084-0f65-b5ad252348bb@redhat.com>
Date: Wed, 28 Nov 2018 17:30:59 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
	Thunderbird/60.3.0
MIME-Version: 1.0
In-Reply-To: <20181128.181700.1038782556965887223.atsushi.nemoto@sord.co.jp>
Content-Type: multipart/mixed; boundary="------------45188A601B16F00B79E75142"
Content-Language: en-US
X-Scanned-By: MIMEDefang 2.84 on 10.5.11.22
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.39]);
	Wed, 28 Nov 2018 16:31:06 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH] memory: update coalesced_range on
 transaction_commit
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

This is a multi-part message in MIME format.
--------------45188A601B16F00B79E75142
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable

On 28/11/18 10:17, Atsushi Nemoto wrote:
> The e1000 driver calls memory_region_add_coalescing but
> kvm_coalesce_mmio_region never been called for those regions.
>=20
> Update coalesced_range on memory_region_transaction_commit to fix this.
>=20
> It seems very old bug since memory region API
> was merged on commit 093bc2cd885e ("Hierarchical memory region API").
>=20
> Signed-off-by: Atsushi Nemoto <atsushi.nemoto@sord.co.jp>

I attach the patch I came up with.  What do you think?

Thanks,

Paolo

>  memory.c | 7 +++++--
>  1 file changed, 5 insertions(+), 2 deletions(-)
>=20
> diff --git a/memory.c b/memory.c
> index d14c6dec1d..f773b0be50 100644
> --- a/memory.c
> +++ b/memory.c
> @@ -1021,6 +1021,8 @@ void memory_region_transaction_begin(void)
>      ++memory_region_transaction_depth;
>  }
> =20
> +static void memory_region_update_coalesced_range_as(MemoryRegion *mr, =
AddressSpace *as);
> +
>  void memory_region_transaction_commit(void)
>  {
>      AddressSpace *as;
> @@ -1038,6 +1040,7 @@ void memory_region_transaction_commit(void)
>              QTAILQ_FOREACH(as, &address_spaces, address_spaces_link) {
>                  address_space_set_flatview(as);
>                  address_space_update_ioeventfds(as);
> +                memory_region_update_coalesced_range_as(NULL, as);
>              }
>              memory_region_update_pending =3D false;
>              ioeventfd_update_pending =3D false;
> @@ -2142,7 +2145,7 @@ static void memory_region_update_coalesced_range_=
as(MemoryRegion *mr, AddressSpa
> =20
>      view =3D address_space_get_flatview(as);
>      FOR_EACH_FLAT_RANGE(fr, view) {
> -        if (fr->mr =3D=3D mr) {
> +        if (fr->mr =3D=3D mr || (!mr && !QTAILQ_EMPTY(&fr->mr->coalesc=
ed))) {
>              section =3D (MemoryRegionSection) {
>                  .fv =3D view,
>                  .offset_within_address_space =3D int128_get64(fr->addr=
.start),
> @@ -2152,7 +2155,7 @@ static void memory_region_update_coalesced_range_=
as(MemoryRegion *mr, AddressSpa
>              MEMORY_LISTENER_CALL(as, coalesced_io_del, Reverse, &secti=
on,
>                                   int128_get64(fr->addr.start),
>                                   int128_get64(fr->addr.size));
> -            QTAILQ_FOREACH(cmr, &mr->coalesced, link) {
> +            QTAILQ_FOREACH(cmr, &fr->mr->coalesced, link) {
>                  tmp =3D addrrange_shift(cmr->addr,
>                                        int128_sub(fr->addr.start,
>                                                   int128_make64(fr->off=
set_in_region)));
>=20


--------------45188A601B16F00B79E75142
Content-Type: text/x-patch;
 name="coalesce.patch"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: attachment;
 filename="coalesce.patch"

diff --git a/memory.c b/memory.c
index d14c6dec1d..5759f74034 100644
--- a/memory.c
+++ b/memory.c
@@ -217,6 +217,7 @@ struct FlatRange {
     bool romd_mode;
     bool readonly;
     bool nonvolatile;
+    int has_coalesced_range;
 };
=20
 #define FOR_EACH_FLAT_RANGE(var, view)          \
@@ -650,6 +651,7 @@ static void render_memory_region(FlatView *view,
     fr.romd_mode =3D mr->romd_mode;
     fr.readonly =3D readonly;
     fr.nonvolatile =3D nonvolatile;
+    fr.has_coalesced_range =3D 0;
=20
     /* Render the region itself into any gaps left by the current view. =
*/
     for (i =3D 0; i < view->nr && int128_nz(remain); ++i) {
@@ -850,6 +852,49 @@ static void address_space_update_ioeventfds(AddressS=
pace *as)
     flatview_unref(view);
 }
=20
+static void flat_range_coalesced_io_del(FlatRange *fr, AddressSpace *as)=

+{
+    if (!fr->has_coalesced_range) {
+        return;
+    }
+
+    if (--fr->has_coalesced_range > 0) {
+        return;
+    }
+
+    MEMORY_LISTENER_UPDATE_REGION(fr, as, Reverse, coalesced_io_del,
+                                  int128_get64(fr->addr.start),
+                                  int128_get64(fr->addr.size));
+}
+
+static void flat_range_coalesced_io_add(FlatRange *fr, AddressSpace *as)=

+{
+    MemoryRegion *mr =3D fr->mr;
+    CoalescedMemoryRange *cmr;
+    AddrRange tmp;
+
+    if (QTAILQ_EMPTY(&mr->coalesced)) {
+        return;
+    }
+
+    if (fr->has_coalesced_range++) {
+        return;
+    }
+
+    QTAILQ_FOREACH(cmr, &mr->coalesced, link) {
+        tmp =3D addrrange_shift(cmr->addr,
+                              int128_sub(fr->addr.start,
+                                         int128_make64(fr->offset_in_reg=
ion)));
+        if (!addrrange_intersects(tmp, fr->addr)) {
+            continue;
+        }
+        tmp =3D addrrange_intersection(tmp, fr->addr);
+        MEMORY_LISTENER_UPDATE_REGION(fr, as, Forward, coalesced_io_add,=

+                                      int128_get64(tmp.start),
+                                      int128_get64(tmp.size));
+    }
+}
+
 static void address_space_update_topology_pass(AddressSpace *as,
                                                const FlatView *old_view,=

                                                const FlatView *new_view,=

@@ -882,6 +927,7 @@ static void address_space_update_topology_pass(Addres=
sSpace *as,
             /* In old but not in new, or in both but attributes changed.=
 */
=20
             if (!adding) {
+                flat_range_coalesced_io_del(frold, as);
                 MEMORY_LISTENER_UPDATE_REGION(frold, as, Reverse, region=
_del);
             }
=20
@@ -889,7 +935,9 @@ static void address_space_update_topology_pass(Addres=
sSpace *as,
         } else if (frold && frnew && flatrange_equal(frold, frnew)) {
             /* In both and unchanged (except logging may have changed) *=
/
=20
-            if (adding) {
+            if (!adding) {
+                flat_range_coalesced_io_del(frold, as);
+            } else {
                 MEMORY_LISTENER_UPDATE_REGION(frnew, as, Forward, region=
_nop);
                 if (frnew->dirty_log_mask & ~frold->dirty_log_mask) {
                     MEMORY_LISTENER_UPDATE_REGION(frnew, as, Forward, lo=
g_start,
@@ -901,6 +949,7 @@ static void address_space_update_topology_pass(Addres=
sSpace *as,
                                                   frold->dirty_log_mask,=

                                                   frnew->dirty_log_mask)=
;
                 }
+                flat_range_coalesced_io_add(frnew, as);
             }
=20
             ++iold;
@@ -910,6 +959,7 @@ static void address_space_update_topology_pass(Addres=
sSpace *as,
=20
             if (adding) {
                 MEMORY_LISTENER_UPDATE_REGION(frnew, as, Forward, region=
_add);
+                flat_range_coalesced_io_add(frnew, as);
             }
=20
             ++inew;
@@ -2136,34 +2186,12 @@ static void memory_region_update_coalesced_range_=
as(MemoryRegion *mr, AddressSpa
 {
     FlatView *view;
     FlatRange *fr;
-    CoalescedMemoryRange *cmr;
-    AddrRange tmp;
-    MemoryRegionSection section;
=20
     view =3D address_space_get_flatview(as);
     FOR_EACH_FLAT_RANGE(fr, view) {
         if (fr->mr =3D=3D mr) {
-            section =3D (MemoryRegionSection) {
-                .fv =3D view,
-                .offset_within_address_space =3D int128_get64(fr->addr.s=
tart),
-                .size =3D fr->addr.size,
-            };
-
-            MEMORY_LISTENER_CALL(as, coalesced_io_del, Reverse, &section=
,
-                                 int128_get64(fr->addr.start),
-                                 int128_get64(fr->addr.size));
-            QTAILQ_FOREACH(cmr, &mr->coalesced, link) {
-                tmp =3D addrrange_shift(cmr->addr,
-                                      int128_sub(fr->addr.start,
-                                                 int128_make64(fr->offse=
t_in_region)));
-                if (!addrrange_intersects(tmp, fr->addr)) {
-                    continue;
-                }
-                tmp =3D addrrange_intersection(tmp, fr->addr);
-                MEMORY_LISTENER_CALL(as, coalesced_io_add, Forward, &sec=
tion,
-                                     int128_get64(tmp.start),
-                                     int128_get64(tmp.size));
-            }
+            flat_range_coalesced_io_del(fr, as);
+            flat_range_coalesced_io_add(fr, as);
         }
     }
     flatview_unref(view);


--------------45188A601B16F00B79E75142--

