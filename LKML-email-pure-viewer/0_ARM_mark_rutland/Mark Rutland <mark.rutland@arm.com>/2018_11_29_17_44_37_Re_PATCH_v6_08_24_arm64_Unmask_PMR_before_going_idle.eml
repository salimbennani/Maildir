Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 08:49:07 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id C59DF5802E4;
	Thu, 29 Nov 2018 09:44:53 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by fmsmga001-1.fm.intel.com with ESMTP; 29 Nov 2018 09:44:53 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AKB/e4RFfoVKuMdTDICEoXZ1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75o8W8bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJWSJPAp2y?=
 =?us-ascii?q?YZYMAeoPMulXs5TyqFkAohulHQmhBvjiyiNUinLswaE2z/4sHR/A0Qc9H9wOqn?=
 =?us-ascii?q?PUrNDtOakVS++11qrIxijfYfNLxTf97JLHchY8rvqRWr9wdNDeyVMsFw/flFWQ?=
 =?us-ascii?q?tJDlPzeP2eQLrmeW9PBvVfiqi2I9tw5xpT2vy94qh4LUiIwVzVXE+j94wIYzPd?=
 =?us-ascii?q?C4UFR7Ydm4H5dKrCGVLI17Sd4hTWFwoCs21KEKtJqhcCQXxpkr2QTTZ+GEfoSU?=
 =?us-ascii?q?+B7uVeScLS9miH54er+znQu+/Ee8xuHmS8W4zEtGojBHn9XQsH0Gygbd5dKdSv?=
 =?us-ascii?q?Rn+0eswTaP2B7X6uFDOU00i6XbJIA7wrIqlZocr17DHinol0XylqOWcV8k+uew?=
 =?us-ascii?q?5+TmZLXpuIOcOpdqhg3iNqkigNGzDOomPgQUQmSW+viw2Kfi8ED7WLlKi+c5kq?=
 =?us-ascii?q?jdsJDUP8Qboau5DhdR0oYi7Ra/Ejin3M0bnXYZNlJFfgyIj4zwN1HJLvH4C+mw?=
 =?us-ascii?q?g063nTd1yPDJIKfhDo/OLnfdirfhe6hy60pGxAo019Bf6IpYCqsdL/LrRk/xqN?=
 =?us-ascii?q?vYAwc9Mwy1wOboFs9x14wDWW+UBq+ZMaXSsUKH5+41IumMYpMVtyj5K/Q/+/Hu?=
 =?us-ascii?q?ino5k0cHfaa1xZsXdGy4HvN+LkWZe3Xsg8sBHn0NvgYkTOzqlUeNUThcZ3upW6?=
 =?us-ascii?q?I85zc7CJ+pDIvZR4CthqCB0zm/HpFMem9GDVWMG2/yd4qYQ/cMdD6SIsh5nzwG?=
 =?us-ascii?q?UriuVZUt1RKptA/8zbpnKfHZ+ikZtZLlydh06PfflRA09TxoEcud13uBQH1znm?=
 =?us-ascii?q?MNXzU2xrxwoVRhylef1qh1m+ZXFcdT5/NOUQc2L4TcwPZ4C93pXgLBf9GJSEup?=
 =?us-ascii?q?Q9m8ADExSM4xzMEKY0pnB9qiiRXD1TKwA7AJj7yLGIA08qXE0njyPcl9zWzK1K?=
 =?us-ascii?q?0gj1Y8RMtPOnarhqp+9wjVGo7InF+Vl6esdaQAwiHN8H2PwnaJvEFdSARwS7nK?=
 =?us-ascii?q?XWgDZkvKqtT0/l7NQKWwCbs5KAdBydSNKq1RatL3i1VKQ/PjONfbY2K1gGqwAR?=
 =?us-ascii?q?eIxrWRbIvlYWkd3SPdCFQanAAX53qJKQ8+BiK5qWLEEDNuDU7vY1/r8eRmtXy0?=
 =?us-ascii?q?VFE0wB+QY01hzbW1/AUViuKaS/4I2rIEuSEhqyh7HVqn3tLWDcaAqBRlfKlGfd?=
 =?us-ascii?q?w951JH33rDtwNhJpygM7xihlkGfgRrvkPu0hJ3CplAkckqtn8q0BB+KaWC0FNF?=
 =?us-ascii?q?djOY25/wN6bTKmnz+hCvdqHX1kvf0NaQ5qcA9vA4p0//swGuE0oo629n3MVN03?=
 =?us-ascii?q?uA+pXKCxIfXoj1Ukkp+Bl1ubHbbjMm6IPJyHJjK6+0sjzF29I3H+Ylzhegf9FC?=
 =?us-ascii?q?MKKLDgPyEssaB9SwJ+wugVSmchUEPOVK/q4uI8ymb+eG2LKsPOt4nDOmkH5L75?=
 =?us-ascii?q?xn3kON9ypzUOjI35kezvGc3wuHUSr8jVi7vsD2n4BEeS8dHm6lxSf4A45RY7V4?=
 =?us-ascii?q?fZwXBme2P8232tJ+iob3W35Z6FGsHUkG19KueRaIaVzywxdQ1UUOrXO7gyS4yy?=
 =?us-ascii?q?F7nC8zrqqY2izD2ODidBsBOm5WS2hul1bsIY6oj98EWEikdRQmlByg5Uzi3ahU?=
 =?us-ascii?q?uLx/L3XPQUdPZyX3L2BiXrGwt7aYeM5P9ZUovD5TUOS9Z1CaV7H8rwEb0yPlA2?=
 =?us-ascii?q?tR2jQ7eyu2tZX+mhxwkHidI2prrHrFZcFwwg/S5N7GSv5L3ToGRy54hSPMBlem?=
 =?us-ascii?q?PNmp/tSUl5HdveC4TG+hUpxTcS/2zYKPrie75GtqAQGhkPC3gNHoDQ860Srj3d?=
 =?us-ascii?q?lwSSrItAr8YpXs16miMeNoZE5oCEX+68p7HIFziY8whJAW2XgHiZSZ53sHkWHv?=
 =?us-ascii?q?MdpF3aLydmYCRTkOw9TN+gjqxFVjLm6Vx4L+TnidwdFuZ9igbmMWxyIy9cZKCK?=
 =?us-ascii?q?iP4bxAnCt1pEe4rA3Lbfh8mDcd1eUh6HoAj+4Vvwotyz2XAqoOEklAISzsixOI?=
 =?us-ascii?q?4si7rKVWZ2aga6K81URgktC6ELGNvBtcV23ndZc4Ei999cF/MFPK0H3u5YDoYt?=
 =?us-ascii?q?jQbdQPthKKlxfMlfRaKJU0lvASnypoJXr9vWE5y+48lRFuwZa6vI2dJ2Rs5q25?=
 =?us-ascii?q?BANYNibuZ8MS4TztiadensCL34GgBJlhGzMLXIf2QvKsCj4dqfPnNwOWGj0mtn?=
 =?us-ascii?q?ibAabfHROY6Ep+tH3ACZerN3WKJHUDydViWQKQJEhegAASQTU7kYQ1FgGsxMz9?=
 =?us-ascii?q?bkh54iod6UL/qhtJ0uhoLQXwUn/DpAe0bTc5UJqfIwBT7g5c/EfZK9Ce4vhwHy?=
 =?us-ascii?q?FF/Z2hsQqNJXaAZwlTCWEJW0qEB03sP7W05NnA9fSYCfS6L/fUfbqOruleXe+S?=
 =?us-ascii?q?xZ2zyotm4yqMNsKXM3hiCP07x1NDXW1jFMTfgTkPUCsXlyTCb8OAoBe8+yt3rt?=
 =?us-ascii?q?2w8fjxWQLv45ePBKVWMdl15x+2hqKDPfaKhCllMTZYyo8MxXjQxbgfwlESiiJu?=
 =?us-ascii?q?dzqsEbgati7NVqXQmqBJAB4BdiNzL9BF76Y93glLJM7ahcn51r9+jv4pFVhFUU?=
 =?us-ascii?q?btld2uZcwPO2u9Lk/IBF6XNLSaIj3G29v4Yb6nRr1KkupVtwe8uTKaE0L4OjSD?=
 =?us-ascii?q?lj/pVw2gMO1WjSGbOgBet5+5chp3FWfjS9fmYAWhMNBrlT023aE0hnTSOG4AMD?=
 =?us-ascii?q?h8dllBoaGK4SxEgvVwBWpB42FhLemFnSaZ8ubZJowXsfttHiR7ieZa7G4mxLtS?=
 =?us-ascii?q?6SFOXOZ1lzfKrt5yv1GmlfGCyzp9XxpIrzZLhYSLsl1jOKXZ7JZAX3nE8QkJ7W?=
 =?us-ascii?q?WRDRQKutRkBsfuu6BW1tjAiqbzJC1e/NLT+MtPT/TTfeCaNHssN1LVGD/ZFhEU?=
 =?us-ascii?q?BWqpKGXeikobjPGT+2ePv7AzsJ2qk50LHOx1TlswQ9YTEEctJsEeJJ5xUntwlL?=
 =?us-ascii?q?eBj4gS+Ga6pR/dbMxAu9bMUffEUqanEyqQkbQRP0hA+rj/N4lGc9Sjg0E=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAACfJABch0O0hNFkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGBWoIRFBOMEV+LKYINFJcwgXMsEwGHdCI0CQ0BAwE?=
 =?us-ascii?q?BAQEBAQIBEwEBAQgNCQgpL4I2JAGCYQEBAQECAQECJBM/BQEJAQEKGAklAwxIB?=
 =?us-ascii?q?hMFgxyBeggEAadqM4otjBaBVz+BEYMShGWFdwKgIwcCgh0EjwYjgVqPQol7kBm?=
 =?us-ascii?q?CDTMaI4M8gicXfwEHjRY/AQExgQUBAY06AQE?=
X-IPAS-Result: =?us-ascii?q?A0ABAACfJABch0O0hNFkGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGBWoIRFBOMEV+LKYINFJcwgXMsEwGHdCI0CQ0BAwEBAQEBAQIBEwEBA?=
 =?us-ascii?q?QgNCQgpL4I2JAGCYQEBAQECAQECJBM/BQEJAQEKGAklAwxIBhMFgxyBeggEAad?=
 =?us-ascii?q?qM4otjBaBVz+BEYMShGWFdwKgIwcCgh0EjwYjgVqPQol7kBmCDTMaI4M8gicXf?=
 =?us-ascii?q?wEHjRY/AQExgQUBAY06AQE?=
X-IronPort-AV: E=Sophos;i="5.56,295,1539673200"; 
   d="scan'208";a="42115135"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 09:44:51 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730710AbeK3Euv (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 29 Nov 2018 23:50:51 -0500
Received: from foss.arm.com ([217.140.101.70]:41362 "EHLO foss.arm.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1730453AbeK3Euu (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 29 Nov 2018 23:50:50 -0500
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.72.51.249])
        by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id 4FDA580D;
        Thu, 29 Nov 2018 09:44:41 -0800 (PST)
Received: from lakrids.cambridge.arm.com (usa-sjc-imap-foss1.foss.arm.com [10.72.51.249])
        by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPSA id 82A783F575;
        Thu, 29 Nov 2018 09:44:39 -0800 (PST)
Date: Thu, 29 Nov 2018 17:44:37 +0000
From: Mark Rutland <mark.rutland@arm.com>
To: Julien Thierry <julien.thierry@arm.com>
Cc: linux-arm-kernel@lists.infradead.org, linux-kernel@vger.kernel.org,
        daniel.thompson@linaro.org, joel@joelfernandes.org,
        marc.zyngier@arm.com, christoffer.dall@arm.com,
        james.morse@arm.com, catalin.marinas@arm.com, will.deacon@arm.com
Subject: Re: [PATCH v6 08/24] arm64: Unmask PMR before going idle
Message-ID: <20181129174436.avqjydyzvv6ubnjd@lakrids.cambridge.arm.com>
References: <1542023835-21446-1-git-send-email-julien.thierry@arm.com>
 <1542023835-21446-9-git-send-email-julien.thierry@arm.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <1542023835-21446-9-git-send-email-julien.thierry@arm.com>
User-Agent: NeoMutt/20170113 (1.7.2)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Mon, Nov 12, 2018 at 11:56:59AM +0000, Julien Thierry wrote:
> CPU does not received signals for interrupts with a priority masked by
> ICC_PMR_EL1. This means the CPU might not come back from a WFI
> instruction.
> 
> Make sure ICC_PMR_EL1 does not mask interrupts when doing a WFI.
> 
> Signed-off-by: Julien Thierry <julien.thierry@arm.com>
> Suggested-by: Daniel Thompson <daniel.thompson@linaro.org>
> Cc: Catalin Marinas <catalin.marinas@arm.com>
> Cc: Will Deacon <will.deacon@arm.com>
> ---
>  arch/arm64/mm/proc.S | 18 ++++++++++++++++++
>  1 file changed, 18 insertions(+)
> 
> diff --git a/arch/arm64/mm/proc.S b/arch/arm64/mm/proc.S
> index 2c75b0b..3c7064c 100644
> --- a/arch/arm64/mm/proc.S
> +++ b/arch/arm64/mm/proc.S
> @@ -20,6 +20,7 @@
>  
>  #include <linux/init.h>
>  #include <linux/linkage.h>
> +#include <linux/irqchip/arm-gic-v3.h>
>  #include <asm/assembler.h>
>  #include <asm/asm-offsets.h>
>  #include <asm/hwcap.h>
> @@ -53,10 +54,27 @@
>   *	cpu_do_idle()
>   *
>   *	Idle the processor (wait for interrupt).
> + *
> + *	If the CPU supports priority masking we must do additional work to
> + *	ensure that interrupts are not masked at the PMR (because the core will
> + *	not wake up if we block the wake up signal in the interrupt controller).
>   */
>  ENTRY(cpu_do_idle)
> +alternative_if_not ARM64_HAS_IRQ_PRIO_MASKING
> +	dsb	sy				// WFI may enter a low-power mode
> +	wfi
> +	ret
> +alternative_else
> +	mrs	x0, daif			// save I bit
> +	msr	daifset, #2			// set I bit
> +	mrs_s	x1, SYS_ICC_PMR_EL1		// save PMR
> +alternative_endif
> +	mov	x2, #GIC_PRIO_IRQON
> +	msr_s	SYS_ICC_PMR_EL1, x2		// unmask PMR
>  	dsb	sy				// WFI may enter a low-power mode

Is the DSB SY sufficient and necessary to synchronise the update of
SYS_ICC_PMR_EL1? We don't need an ISB too?

>  	wfi
> +	msr_s	SYS_ICC_PMR_EL1, x1		// restore PMR

Likewise, we don't need any barriers here before we poke DAIF?

> +	msr	daif, x0			// restore I bit
>  	ret
>  ENDPROC(cpu_do_idle)

If we build without CONFIG_ARM64_PSEUDO_NMI surely we don't want to emit
the alternative?

How about we move this to C, and have something like the below?

For the !CONFIG_ARM64_PSEUDO_NMI case it generates identical assembly to the
existing cpu_do_idle(). Note that I've assumed we don't need barriers, which
(as above) I'm not certain of.

Thanks,
Mark.

---->8----
diff --git a/arch/arm64/kernel/process.c b/arch/arm64/kernel/process.c
index 7f1628effe6d..ccd2ad8c5e2f 100644
--- a/arch/arm64/kernel/process.c
+++ b/arch/arm64/kernel/process.c
@@ -73,6 +73,40 @@ EXPORT_SYMBOL_GPL(pm_power_off);
 
 void (*arm_pm_restart)(enum reboot_mode reboot_mode, const char *cmd);
 
+static inline void __cpu_do_idle(void)
+{
+       /* WFI may enter a low-power mode */
+       dsb(sy);
+       wfi();
+}
+
+/*
+ * When using priority masking we need to take extra care, etc.
+ */
+static inline void __cpu_do_idle_irqprio(void)
+{
+       unsigned long flags = arch_local_irq_save();
+       unsigned long pmr = gic_read_pmr();
+
+       gic_write_pmr(GIC_PRIO_IRQON);
+
+       __cpu_do_idle();
+
+       gic_write_pmr(pmr);
+       arch_local_irq_enable();
+}
+
+/*
+ * Idle the processor (wait for interrupt).
+ */
+void cpu_do_idle(void)
+{
+       if (system_uses_irq_prio_masking())
+               __cpu_do_idle_irqprio();
+       else
+               __cpu_do_idle();
+}
+
 /*
  * This is our default idle handler.
  */
diff --git a/arch/arm64/mm/proc.S b/arch/arm64/mm/proc.S
index 03646e6a2ef4..38c0171e52e2 100644
--- a/arch/arm64/mm/proc.S
+++ b/arch/arm64/mm/proc.S
@@ -49,17 +49,6 @@
 
 #define MAIR(attr, mt) ((attr) << ((mt) * 8))
 
-/*
- *     cpu_do_idle()
- *
- *     Idle the processor (wait for interrupt).
- */
-ENTRY(cpu_do_idle)
-       dsb     sy                              // WFI may enter a low-power mode
-       wfi
-       ret
-ENDPROC(cpu_do_idle)
-
 #ifdef CONFIG_CPU_PM
 /**
  * cpu_do_suspend - save CPU registers context
 
