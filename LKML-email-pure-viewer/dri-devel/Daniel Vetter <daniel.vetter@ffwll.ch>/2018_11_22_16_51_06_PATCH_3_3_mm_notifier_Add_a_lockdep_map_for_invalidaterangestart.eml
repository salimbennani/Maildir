Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 23 Nov 2018 08:29:45 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 6F92D58037D;
	Thu, 22 Nov 2018 08:51:24 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga004-1.jf.intel.com with ESMTP; 22 Nov 2018 08:51:24 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A86mr2xAzbaAZFqD5jN3FUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7+ps2wAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95RWSJfH42y?=
 =?us-ascii?q?YYgBAe0DMuZWoIbyu1QArQCmBQSuH+7v1jxFi2Xq0aAgz+gsEwfL1xEgEdIUt3?=
 =?us-ascii?q?TUqc34OqkIXuCzzanH0zHDZO5Z1jjj9IjIbg4uoeuRVr93bMXe008vFwLbgVWU?=
 =?us-ascii?q?s4DlIS2a1vgRs2eF9eptTuyvi2ApqgF1pjij3NsjionQi48T11vK9j15zZ4rKd?=
 =?us-ascii?q?GkTEN3e8OoHZVOuy2AKod7Qd8uT3tptSs40rEKp4S0cDQUxJki2hLSav+Kfo2I?=
 =?us-ascii?q?7x/iUOuePzJ1iG5gdb+xmhq+7Umtx+jhWcS13ltHrC9IncTOu3wT2RHe79aIR/?=
 =?us-ascii?q?h980qh3zuEyhrd5fteIU8ukKrWM54hzaA0lpoUqUnDACD2l1vsjKOMdUUr5PKo?=
 =?us-ascii?q?6+L5bbXivJOcMJV0ig7mPqQvnMywH/g4PxAQU2SH/emwzqDv8EPnTLlQk/E7kb?=
 =?us-ascii?q?XVvIrbKMkZvqK5BhVa0ocn6xaxFTem19EYkGEDLFJEfhKHkofoN0jNIP/mF/e/?=
 =?us-ascii?q?hUqjkDNyy/DBMLzhBIvCLmLYnbf/crZy9VRcxBAwzd9B/ZJUDK8OIPbpVk/2rt?=
 =?us-ascii?q?zYAQc1MxaozOb/FNV9yoQeVHqLAq+YM6Pdr0WE5+0yI+SXYI8VuTD9K+Uq5vL0?=
 =?us-ascii?q?jH85n0Mdcret3ZcNdH+4GfFmKV2DYXXwmtcBDXsKvg0mQezqklKCUCJTaGy1X6?=
 =?us-ascii?q?4m5jE7FZipDYHMRo22hLyB3SG7HoBZZ2xcC1CMF2voeJuAW/sWdC2SJcphmCQe?=
 =?us-ascii?q?Vbe9U48hyQ2utAjixrplKerb5DcUtZHk1Nhz4e3Tkgo/9Th1D8SbzmGMQHt4nm?=
 =?us-ascii?q?IORz8qwq9/pVZxxUuE0ah9m/ZYD8Bc5+tVUgcmMp7R1/Z1C8vyWgLGfdeFUkym?=
 =?us-ascii?q?Tc+kATwqStIxwtkOY1tyGtm4jxDD2TaqDKERl7CRGJM09afc1WDrJ8lh03bGyL?=
 =?us-ascii?q?Uhj14+T8tML2KmgLRz9wzSB4HTlUWZmL2ndaAd3C7L6WeCwnCCvEBeUA5sT6rF?=
 =?us-ascii?q?WWoTaVfRrdT8/knCVaOhCaw7Mgtdzs6PMrZFZcf3jVpYXvvjOM7RY2Sqm2iuAx?=
 =?us-ascii?q?aEwbeMbInve2UZxyjdDEkEkwYO/XeJLwQ+ByGho37AAzxqD17gf0Ts8exmonOh?=
 =?us-ascii?q?UkA01x2Kb1Fm17et5xEan+KcRO0J0rIEoighrS50E0i739/ND9qApgxhfLhTYN?=
 =?us-ascii?q?8n4VdH037ZuBJ5PpC6M69igVseeRxtv0zyzxV3FplAkc8yoXM2zQpyLKWY0E9B?=
 =?us-ascii?q?dzKYx5zwJqfbKm7o/BCraq7W3F7e3c2S+qcO7vQ4tlrisBuoFkok73Vozd1V32?=
 =?us-ascii?q?GA6ZXNCQoYSYjxXVov9xhmu7HaZTEw6JnQ1XJyPqi7rD/D18gyC+s41xmvZdFf?=
 =?us-ascii?q?MKCDFA/sCMAaA8muKOo3m1mmdB4EPeZS9LIqMMOibfeJxKmrPON4ljK8kWtH+J?=
 =?us-ascii?q?x90l6L9ydkSu/IwowJzO2C0gqGVzfzllGhss/slIBAZDESGHe/yCf+CI5QYK1y?=
 =?us-ascii?q?YZgECWO0L8KrwdV+gobnW2RE+167G1MGxMipdAKIb1z8wQJfz14XrmGgmSeiyT?=
 =?us-ascii?q?x7jSsprquG0CPS2evicAcINXBRRGlli1fhOoy0j9EcXEi1YAkljhql5UDmx6dF?=
 =?us-ascii?q?oKRzNXXcQUBNfyLuNWFtTrOwtqaeY85I8J4psSRXXP68YFyAUb79vh0a3jjnH2?=
 =?us-ascii?q?tfwjA7aj6rto/4nxx8lGKSMnJzoGDFdsF3wBfV/MbcSuJJ3joaWCl4jiHaBlqm?=
 =?us-ascii?q?MNmz/tWUlJDDvvqlV227VZ1TcijrzYWeuyu9/mBqBRy/n/aumtzoCwQ60Cn718?=
 =?us-ascii?q?V0WiXMthrzfo7r16GiO+J9YkZoHEP869Z9Goxmkoo/npYQ1WIYhpWU+3oKimPz?=
 =?us-ascii?q?MdRd2aLjY3sBXz8Lw9jJ4Af73E1vNG6Gx4X8Vn+F2Mtue8G6Yn8K2iI6981KC7?=
 =?us-ascii?q?2b7L1ekSt1v1q3twTRYfdmkzcZyPsu7mMagu4TtAosyCWdHq4dHU1CMSPwkBSI?=
 =?us-ascii?q?6si0rL9La2a3bbiwyE1+kMikDLGDoQFTQmz1e5k8Ei9r8sVwLkjM32bt5YH+d9?=
 =?us-ascii?q?nddtYTthySkxfdgOlZMpMxlvwWhSV5PWLxp2Eqy+k+jRZ2x5G1oJCHK3lx/KK+?=
 =?us-ascii?q?GhNYKjr1Z8YJ9jDsl6lemNuW35u0HpVgATgLWJroTfS1EDMdr/jnNgCOECEipX?=
 =?us-ascii?q?efA7bQAQif6EJ+pXLVD5+rL22XJGUezdh6XxaSPktfgAQJXDkgmp45CxunxMjg?=
 =?us-ascii?q?cEd/+zAQ6UT0qhpKyuJ0KRb/Vn3TqxuvajcxUJKfNgZZ7hle50fJNsyT9uBzED?=
 =?us-ascii?q?td/pK/twyBMHCbax5LDWEUWUyEGlbjMaO15dTb9+iYB+y+L+bBYLmUqOxeUeuI?=
 =?us-ascii?q?yoyr0od84zmMMcCPNGF4D/InwkpDQWx5G8PBljQPTCwXijvNb9OBqxe64CF3tc?=
 =?us-ascii?q?e/8PLkWA/04YuPCr1SMchg+hysgKeDMfKQizh9KTpCypwMwnrIwqAF3FEOkyFu?=
 =?us-ascii?q?ayWtEbMYuC7NUq3Qm6xXDx0aay9pN8tI9aU83gZTNs7Bl9P1zaV1jvo0C1dDSF?=
 =?us-ascii?q?zgldulZc0MI2GhKlzHAFyHO6iBJT3O28v3e7+zSaVMjOVIsB29oSyUE1L4MTSZ?=
 =?us-ascii?q?iTboVwqjMeVNjCyAOBxeuYe9cgtiCGT5TdLmbAG7P8FzjTEs3bI0gXbKP3YGMT?=
 =?us-ascii?q?dga0NNsqGQ7SRAj/VjGmxB62BpIvWelymF7+nXNJAWvOBvAiR1keJa/Xs7x6FU?=
 =?us-ascii?q?7CFCWPx6hi/SosRyrFGhl+mF0iBnXwZWqjZXmIKLul1vOKXD+ZlGXHbE/RQN4n?=
 =?us-ascii?q?2RChQKvdRlDNLvtrtUytjOkqLzNThD/8jV/csaG8jbNsaHPGA9PhruHT6HRDcC?=
 =?us-ascii?q?GBqIEEWX00hcluyCs36YtJ43rrDyl5cUDLxWTlo4ErUdEEszT/IYJ5IicjoikL?=
 =?us-ascii?q?OfxPAF+WaztlGFSMxcv53DEOyfHeniMh6Xg6ZAY10DweWrfswoKoTn1hk6ORFB?=
 =?us-ascii?q?l4PQFh+VBIgVrw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AUAAC+3fZbh0O0hNFiHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgTCCOyeDOT+IGIwBgiGSL4R3gSQDTBIBARgTAYhSIjQJDQEDAQE?=
 =?us-ascii?q?BAQEBAgETAQEBCA0JCCkjDII2JAGCYgMDAQIJFwQLAQ0BATcBBQkBAQgcAiYCA?=
 =?us-ascii?q?gMxAQUBHAYTBYMcggIBBI1VkAc8ih1wfDOCdgEBBYYzZwgSeYZTgw+BHIFXP4E?=
 =?us-ascii?q?RgXCJJIJXixOECJAjPAoHAoERgQsEjwQLGIlRhzcsl10CBAIEBQIFDyGBJWyBI?=
 =?us-ascii?q?TMag1+CGwwXgyKKez8yAYEEAQGMVAEB?=
X-IPAS-Result: =?us-ascii?q?A0AUAAC+3fZbh0O0hNFiHAEBAQQBAQcEAQGBUQcBAQsBgTC?=
 =?us-ascii?q?COyeDOT+IGIwBgiGSL4R3gSQDTBIBARgTAYhSIjQJDQEDAQEBAQEBAgETAQEBC?=
 =?us-ascii?q?A0JCCkjDII2JAGCYgMDAQIJFwQLAQ0BATcBBQkBAQgcAiYCAgMxAQUBHAYTBYM?=
 =?us-ascii?q?cggIBBI1VkAc8ih1wfDOCdgEBBYYzZwgSeYZTgw+BHIFXP4ERgXCJJIJXixOEC?=
 =?us-ascii?q?JAjPAoHAoERgQsEjwQLGIlRhzcsl10CBAIEBQIFDyGBJWyBITMag1+CGwwXgyK?=
 =?us-ascii?q?Kez8yAYEEAQGMVAEB?=
X-IronPort-AV: E=Sophos;i="5.56,266,1539673200"; 
   d="scan'208";a="54443896"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 22 Nov 2018 08:51:22 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2406051AbeKWDba (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 22 Nov 2018 22:31:30 -0500
Received: from mail-ed1-f66.google.com ([209.85.208.66]:43935 "EHLO
        mail-ed1-f66.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1730624AbeKWDb3 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 22 Nov 2018 22:31:29 -0500
Received: by mail-ed1-f66.google.com with SMTP id f4so8199520edq.10
        for <linux-kernel@vger.kernel.org>; Thu, 22 Nov 2018 08:51:17 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=ffwll.ch; s=google;
        h=from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding;
        bh=IqCNVNv0Y8aoRKucGwKEjdCDvF336AuZYaELjzjP6Ls=;
        b=MMzYO6/waCjCYerQTkvOeF8GBYcFu0U7oI6tc9TyEKstlXpVLz2o7sa6oi3lFZfhPG
         v38/v1GFssxWyCYmgz0LqI9Sm+APanFajOvvvpBoCT/nfxyAUye3LZpj1po5QpUN12NU
         adNcLC9JNMKYMy36LmWpSDW8/uY5Z48mR9P1w=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=IqCNVNv0Y8aoRKucGwKEjdCDvF336AuZYaELjzjP6Ls=;
        b=gpT1tHhXCctHZGihc/tfYwd733Y6npspdCFOGVb+hgxX8RE/vRUe+GWYDezPdEliKe
         8112X3DT0OoaUNelD6qt7HZ/tdyqIiFTvOjn+lYkgjhR28yg5Uo5WBAYVGdL8AsTkdjn
         RnGcu5RabHNk9Ph4Ey52uelE/D6/9kqbQ6hyevTTgg3cbxmrzAbQQwvJxqpW4G2c8Nvv
         8dGafgIyrerZ+8YIU4X+6zRF4D2Zi7srPMdU8+l9ma3MTGbxybXV9wI3kqg7k0fHovx9
         HWEZUXT1CJAhRhi6fBFDQyb2FQKivpcmqE69tBtjhXKO0qFSu8doYwZwPg1WEumZ4Bb7
         7GtA==
X-Gm-Message-State: AA+aEWbOOysnaurxPFXigJNerLKhgAQ2I3ztpXA85bhJPNPXD0y/c4cz
        PBPPaUFpZnTjis7GFnkTTCZBapOgHzI=
X-Google-Smtp-Source: AFSGD/X3yt1n8EIDxKFM/dx7WPreYbLdq5CVYlgu9XO9dTU/ze5Lq/MSqa8fCcbBo2dSkl61aed9Sg==
X-Received: by 2002:a50:fd0e:: with SMTP id i14mr9994539eds.98.1542905476815;
        Thu, 22 Nov 2018 08:51:16 -0800 (PST)
Received: from phenom.ffwll.local ([2a02:168:569e:0:3106:d637:d723:e855])
        by smtp.gmail.com with ESMTPSA id s12sm12914780edb.43.2018.11.22.08.51.15
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Thu, 22 Nov 2018 08:51:16 -0800 (PST)
From: Daniel Vetter <daniel.vetter@ffwll.ch>
To: LKML <linux-kernel@vger.kernel.org>
Cc: Linux MM <linux-mm@kvack.org>,
        Intel Graphics Development <intel-gfx@lists.freedesktop.org>,
        DRI Development <dri-devel@lists.freedesktop.org>,
        Daniel Vetter <daniel.vetter@ffwll.ch>,
        Andrew Morton <akpm@linux-foundation.org>,
        David Rientjes <rientjes@google.com>,
        =?UTF-8?q?J=C3=A9r=C3=B4me=20Glisse?= <jglisse@redhat.com>,
        Michal Hocko <mhocko@suse.com>,
        =?UTF-8?q?Christian=20K=C3=B6nig?= <christian.koenig@amd.com>,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        Mike Rapoport <rppt@linux.vnet.ibm.com>,
        Daniel Vetter <daniel.vetter@intel.com>
Subject: [PATCH 3/3] mm, notifier: Add a lockdep map for invalidate_range_start
Date: Thu, 22 Nov 2018 17:51:06 +0100
Message-Id: <20181122165106.18238-4-daniel.vetter@ffwll.ch>
X-Mailer: git-send-email 2.19.1
In-Reply-To: <20181122165106.18238-1-daniel.vetter@ffwll.ch>
References: <20181122165106.18238-1-daniel.vetter@ffwll.ch>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This is a similar idea to the fs_reclaim fake lockdep lock. It's
fairly easy to provoke a specific notifier to be run on a specific
range: Just prep it, and then munmap() it.

A bit harder, but still doable, is to provoke the mmu notifiers for
all the various callchains that might lead to them. But both at the
same time is really hard to reliable hit, especially when you want to
exercise paths like direct reclaim or compaction, where it's not
easy to control what exactly will be unmapped.

By introducing a lockdep map to tie them all together we allow lockdep
to see a lot more dependencies, without having to actually hit them
in a single challchain while testing.

Aside: Since I typed this to test i915 mmu notifiers I've only rolled
this out for the invaliate_range_start callback. If there's
interest, we should probably roll this out to all of them. But my
undestanding of core mm is seriously lacking, and I'm not clear on
whether we need a lockdep map for each callback, or whether some can
be shared.

Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: David Rientjes <rientjes@google.com>
Cc: "Jérôme Glisse" <jglisse@redhat.com>
Cc: Michal Hocko <mhocko@suse.com>
Cc: "Christian König" <christian.koenig@amd.com>
Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
Cc: Mike Rapoport <rppt@linux.vnet.ibm.com>
Cc: linux-mm@kvack.org
Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>
---
 include/linux/mmu_notifier.h | 7 +++++++
 mm/mmu_notifier.c            | 7 +++++++
 2 files changed, 14 insertions(+)

diff --git a/include/linux/mmu_notifier.h b/include/linux/mmu_notifier.h
index 9893a6432adf..a39ba218dbbe 100644
--- a/include/linux/mmu_notifier.h
+++ b/include/linux/mmu_notifier.h
@@ -12,6 +12,10 @@ struct mmu_notifier_ops;
 
 #ifdef CONFIG_MMU_NOTIFIER
 
+#ifdef CONFIG_LOCKDEP
+extern struct lockdep_map __mmu_notifier_invalidate_range_start_map;
+#endif
+
 /*
  * The mmu notifier_mm structure is allocated and installed in
  * mm->mmu_notifier_mm inside the mm_take_all_locks() protected
@@ -267,8 +271,11 @@ static inline void mmu_notifier_change_pte(struct mm_struct *mm,
 static inline void mmu_notifier_invalidate_range_start(struct mm_struct *mm,
 				  unsigned long start, unsigned long end)
 {
+	mutex_acquire(&__mmu_notifier_invalidate_range_start_map, 0, 0,
+		      _RET_IP_);
 	if (mm_has_notifiers(mm))
 		__mmu_notifier_invalidate_range_start(mm, start, end, true);
+	mutex_release(&__mmu_notifier_invalidate_range_start_map, 1, _RET_IP_);
 }
 
 static inline int mmu_notifier_invalidate_range_start_nonblock(struct mm_struct *mm,
diff --git a/mm/mmu_notifier.c b/mm/mmu_notifier.c
index 4d282cfb296e..c6e797927376 100644
--- a/mm/mmu_notifier.c
+++ b/mm/mmu_notifier.c
@@ -23,6 +23,13 @@
 /* global SRCU for all MMs */
 DEFINE_STATIC_SRCU(srcu);
 
+#ifdef CONFIG_LOCKDEP
+struct lockdep_map __mmu_notifier_invalidate_range_start_map = {
+	.name = "mmu_notifier_invalidate_range_start"
+};
+EXPORT_SYMBOL_GPL(__mmu_notifier_invalidate_range_start_map);
+#endif
+
 /*
  * This function allows mmu_notifier::release callback to delay a call to
  * a function that will free appropriate resources. The function must be
-- 
2.19.1

