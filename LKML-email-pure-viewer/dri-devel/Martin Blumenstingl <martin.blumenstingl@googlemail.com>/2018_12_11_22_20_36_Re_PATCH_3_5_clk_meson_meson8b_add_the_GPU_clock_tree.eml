Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 12 Dec 2018 08:56:59 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id B8F99580380;
	Tue, 11 Dec 2018 14:21:29 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 11 Dec 2018 14:21:29 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Apcc90RXM5MUYRXU3Gs1UydEsIerV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhGBvadThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGoyz?=
 =?us-ascii?q?b4UNAOQBM+hWrJTzqUUSohulHQmhBvjiyiNUinLswaE2z/gtHAPA0Qc9H9wOqn?=
 =?us-ascii?q?PUrNDtOakVS++11rXIzTTFb/hLxDr97JXIchU/rvGKRrJwbcvRyU8gFwPBk16d?=
 =?us-ascii?q?ronlMCmP1uQRsmib6fBsWvmri246rgF+vD6vxtwwionIgIIVxVTE+D52wIYyIt?=
 =?us-ascii?q?24R0p7bsChEJRKtiGaM5F6Td8lQ2FtoSs3zKANt5C8fCgP0psnxhjfZuSIc4iJ?=
 =?us-ascii?q?/hLjVPuRLixiiH15f7K/ghC/+lWjxO3kTsS4zkpGoy5fntXRuH0ByQbf5tWER/?=
 =?us-ascii?q?dh5Eus2DSC2xjN5u1YJU04j6nWJp47zrIui5YfrV7PEy71lUjwkaSYbF8r+vKy?=
 =?us-ascii?q?5OTierjmpoGTN4tzigzmLKQuldKwAf4iPggNQWeb4+K826Pn/UHjR7VKlPI2nr?=
 =?us-ascii?q?HYsJDcO8sbura0DxFJ3osn8RqzEjmr3MoCkXUaL19JZAiLgonrNl3WJfD3F/a/?=
 =?us-ascii?q?g1CikDdxwPDGO6XsApHMLnjFjbfgcq9x601Cxwopy9BQ+ZZUBqgGIPP9XE/+qs?=
 =?us-ascii?q?bYAwQnMwy73ennEs9x1oAAVmKVBK+WLqfSvUWP5uI1LOmAfJUVtyrlK/g5+/7u?=
 =?us-ascii?q?imc0mVscfamqw5Qbcn+5Hul9LkWdYHrshMoBEGgQsgo/SuzqlEONUTpJa3muWK?=
 =?us-ascii?q?I84ykxCJi6AofbWoCtnLuB0T+7HpJMZ2BGFkqDEXDye4WERvcDciSSIsB6nzwA?=
 =?us-ascii?q?VLihTZIh1B60uA/7zbpnMvTb+ikCuZ3/09h14vXZlQsu+jxsE8Sdz2aNQnl2nm?=
 =?us-ascii?q?MPWTA6xqN/oUt7yleF1qh1mPhYFd1V5/NUXQY2L5/cz+pmC9/sXgLNZMuGSFGj?=
 =?us-ascii?q?Qt++GzE+Usoxw8MSY0Z6A9itlAvD3yqtA78WjbCLHoY78qDH0nj1JsZ9zWvG1a?=
 =?us-ascii?q?Y7g1knRMtPKXOphqpl+wfPAI7Jll2Tl7y2eqQEwC7N6GCDwHKNvE5CVg58S6HF?=
 =?us-ascii?q?XXEFaUvQotT0/UfCT76oCbQ6PQpN08+CKq1WatL3iVVKXuvsONPbY2ipgWe/GQ?=
 =?us-ascii?q?6Ixq+QbIrtY2gSwT/SCFYanAwJ/XaJLw4+Bjy/rGLYCzBuEVHvY0bo8eRlrHO7?=
 =?us-ascii?q?T0k0zxyFbkF71rq1/AIViuKYS/8Jwr0EvyIhoS1uHFmhx9LWF8aApw15capBe9?=
 =?us-ascii?q?w9/klI2XjZtwNnOJygNL5thlgFfgRzvkPu0Qh3C4pancgrqnMq0BR9KaaC3Fxd?=
 =?us-ascii?q?cDOY2Ij6OqfLJWnq4BCvd6nW10nC0NaX/6cP7+g4q1XjvQ2zCkou6XJn08NR03?=
 =?us-ascii?q?ud4JXKAxEfUZbwUkYx6hh7qKvWYig754PIy3JsNbO4vSPF29IsHOEl0Aqvf89D?=
 =?us-ascii?q?MKOYEw//C9cVB8ywJ+0lhVeobggIM/tP9KEpJcymcfiG2Km1POt7mDKmjGJH4J?=
 =?us-ascii?q?1y006W9ip8TPLI0IgBw/2CwgSHUDL8hk+7ss/rgYBEeS0SHm2nxCnkGY5dfLF9?=
 =?us-ascii?q?cZwKCGeuOcK3wNp+ioXpW35Z8l6jGlwH1NWoeRqUc1zywwlQ2V4LrnygnCuy1y?=
 =?us-ascii?q?Z0nC0xrqqDwCzOxPzvdAAGOmFXXmZil0rjIY+ug9AcQkeodQkpmAK56kngw6hU?=
 =?us-ascii?q?ubpwL3PUQUdOZCX2K2BiUq2ttruNecJP6ZUosTlJX+S4e1yVVrn9ox4C2SP5A2?=
 =?us-ascii?q?Re3Cw7dy2tupjhnx16iXiRLXZpoHrCZMFwwwzS5NjdRf5XwzoHSzN0iTjRBlig?=
 =?us-ascii?q?Idap+c+YmIvEsuC7T2ihTIFccTH3zYOcsyu2/W9qDgeln/Cwmd3nFhI20TTh2N?=
 =?us-ascii?q?lpViXIrRD8bZft16mhNeJnf09oBELz6sZgG4F+lJcwi48U2XQAmpqV+n8Hm3/p?=
 =?us-ascii?q?MdpHwaL+cGYNRTkTzt/V+gfl31dvLnCIx4L/TXidxsphZ9+nYmIZwC497sZKCL?=
 =?us-ascii?q?uK47xAhyd6vl24rQfJa/hngjgd0ecu6GIdg+wRuwoi1CSdDqoSHUlFJyPskRuI?=
 =?us-ascii?q?4su6rKVWYmavbLex2FB/ndCnELGNvAVcVGzldZclGC969t9/P07U0H3v9oHkf8?=
 =?us-ascii?q?HdbdcSth2XiRjMleZUJ4wqlvoWmyVnI3nysmM/y+40lhFu2ZC6vI6aK2Ri5q65?=
 =?us-ascii?q?AxhYNiHraMMX4D3ikaFensOO1YC1ApphAikLXIfvTf+wDDISsvHnOxyPETImrH?=
 =?us-ascii?q?ebBKHfHRSe6Ep9q3LPEparN2yYJXUDzNViQgWdK1JbgAwOQDo6mZs5HBiwxMP9?=
 =?us-ascii?q?aEd5+iwR5lngpxRX0O1oMB3/UnrFqAesdzc5U5yfLBtQ7gFf6EbZK82e7uRvHy?=
 =?us-ascii?q?5G+p2tthCCKmueZw5QF2EGRlSEB0z/Prmp/dTA8fKXBu+gIPvVe7mOtfZSV/SV?=
 =?us-ascii?q?xZKsz4tm+SyDNt6UM3lmDv073FdDXH9jF8TYnTUPVzIYlybXY8GHoxe8/zV9rt?=
 =?us-ascii?q?qj//TzRALv+YyPBqNSMNVo5hC2mLqDOPSWhCpjMjZY0ZUMxXDTxbgb3V4SjTxu?=
 =?us-ascii?q?dja3HbQBsy7NULzfmqtNAxEHbCNzMdNC77gg0QlVJc7bltT126Z4jvErCldFVl?=
 =?us-ascii?q?/hmsCzacwJOWG9M1zHC1iRNLSbPj3G2MX3YaK6Sb1Ng+RYrRywuTCHE0D9OjSP?=
 =?us-ascii?q?jSXmVxeqMetUliGUIAReuJ2hchZqEWXsVs/mZQahMNBpjTw627k0hnLROG4YMD?=
 =?us-ascii?q?h8dV5Nr7KK4SNZhPV/B3JO7n5/IeaYnCaZ6vHSKowKvvtzHiR0i+Va7Wwmy7tU?=
 =?us-ascii?q?6SFIXuB6lDHOod5uvV6mlPKCyj5mUBpItzZKi5iHvURkOaXF6JZAXWzI8w4K7W?=
 =?us-ascii?q?WVEx4KvcdqCsXzu6BMzdjCjKLyJy1E89LR/MscAdDbKcOHMHU7NxrpFyXZDA8E?=
 =?us-ascii?q?TT6tKGHeiFZRkPCU9n2JsJc6roLgl4YJSr9eBxQJEaY8B0VhVPUYJYxrRDQinv?=
 =?us-ascii?q?bPiscS4GGith7XS+1Qt4HDV/iIDLPkLzPP3pdeYB5d5LriMYUVfqf/xklvbEJm?=
 =?us-ascii?q?nYLFHwKEWNlXvixnKAUwvUBA9mNiT2s832rqbQSi5HIWHP+w2BUxj10tMqwW6D?=
 =?us-ascii?q?7w7gJvdRLxrywqnRx0wI29jA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A5AABYNxBch0O0hNFlHgEGBwaBUQkLA?=
 =?us-ascii?q?YFVgRSBAieDe4N7kDCCDRSXPoF2KQYNAYcuIjQJDQEDAQEBAQEBAgETAQEBCA0?=
 =?us-ascii?q?JCCkjDII2JAGCYQEBAQECAQECIB0BOAEDAQEJAQEFBQsDCgICJgICAx8SAQUBH?=
 =?us-ascii?q?AYTBYMcAYFoAQMNCAUKmi08iw2BCSaCdwWBMQGDDgpADYIUAgEFEnmLMIFXP4E?=
 =?us-ascii?q?RgReBe4JXRwEBAoEYEIM7glcCjz+RPAcCgiIEhGOKSBiRQI4Wiw4wgSWCDjQ8g?=
 =?us-ascii?q?QGCO4Ibg22KVD4zCnsBAYgXgk0BAQ?=
X-IPAS-Result: =?us-ascii?q?A0A5AABYNxBch0O0hNFlHgEGBwaBUQkLAYFVgRSBAieDe4N?=
 =?us-ascii?q?7kDCCDRSXPoF2KQYNAYcuIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2JAGCY?=
 =?us-ascii?q?QEBAQECAQECIB0BOAEDAQEJAQEFBQsDCgICJgICAx8SAQUBHAYTBYMcAYFoAQM?=
 =?us-ascii?q?NCAUKmi08iw2BCSaCdwWBMQGDDgpADYIUAgEFEnmLMIFXP4ERgReBe4JXRwEBA?=
 =?us-ascii?q?oEYEIM7glcCjz+RPAcCgiIEhGOKSBiRQI4Wiw4wgSWCDjQ8gQGCO4Ibg22KVD4?=
 =?us-ascii?q?zCnsBAYgXgk0BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,343,1539673200"; 
   d="scan'208";a="44567066"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 11 Dec 2018 14:20:56 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726281AbeLKWUt (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 11 Dec 2018 17:20:49 -0500
Received: from mail-ot1-f68.google.com ([209.85.210.68]:35605 "EHLO
        mail-ot1-f68.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726209AbeLKWUt (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 11 Dec 2018 17:20:49 -0500
Received: by mail-ot1-f68.google.com with SMTP id 81so15731207otj.2;
        Tue, 11 Dec 2018 14:20:48 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=googlemail.com; s=20161025;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=P9a11awUfFqdRCRlsiMdMfxUKo4+WuSnI5J0mWUVE0I=;
        b=dCZeUkrmfE5hCPFIEfLxextyNAFYumyrItKcLIm/6AXacSIqyjD8miZ5nCYdL5fTpN
         51F43RoQIUIIJqVWMHV5pZcC+7h0M+vQFHwFaGlIPkbuXUFwVPIhcNiDWvAShVLqawze
         6fo0vYlzQzdSBshO/lvo/SkXCW80ueWG58CbS3OHNpWcMQSCEgjZyz29yCyBY2fJ3TUA
         x5rWXDe/ZOuIDnAxdg9TVZ9ml4/lQXVdkd2WCex+RLcQ6e/3D5SNYL80TZYLzdTbnRkq
         5HOYtsthu8POJeh1qDQgKChgE/44jJ8A4W67P3k+/sOdHvB7DENuGS7qgG4KOsE0GL+d
         ZdbA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=P9a11awUfFqdRCRlsiMdMfxUKo4+WuSnI5J0mWUVE0I=;
        b=D3PSXD+MXGLKxxNaLb/EjonUs6FxfHvJib0NQai3aeUtoR9xWJ2mz+5Use8BTjY8rO
         6yu5yGCdvKb5TH5pNnLGlrrDiQb6cjzaBcFamV4weUwYcuzqIj8acRmEjtdGxwErJ3CM
         fWTYtoo8ER0LiP6umVSgFVqDdiyXx1YQboGn5nr+zogSlArD8SQA76E+3F2HCaQ6bxmE
         hK04VOVCNsOL3GHWSjEzkAVji7X78HfZl0Tsb3L6O9KhuIR2O2WtlxtPVxHkJQD5hgFC
         vhhDTFUiTL9Io70MOTj2a3nba6gnE478es8uffTrqeuVrNqx04Q3f8hXc4p1PjU1H8ff
         jyLw==
X-Gm-Message-State: AA+aEWYi2w/cc6Y3JI75t41y+V76hH+4wz6d6B4CREpzCzeHubl2o6op
        duTlmFFrE8NZOxVjI5XhMTVo3nM0M/zfvpFoFGI=
X-Google-Smtp-Source: AFSGD/UlGbcwYWT5VWH3PcFpAjNgEObsSZ4VLLCE5Bpl12tJ4bYs0UfGyIQmlSa7JC9L5dGa1b6UkPXvYF4XSsDkDII=
X-Received: by 2002:a9d:715d:: with SMTP id y29mr13001891otj.148.1544566848196;
 Tue, 11 Dec 2018 14:20:48 -0800 (PST)
MIME-Version: 1.0
References: <20181208171247.22238-1-martin.blumenstingl@googlemail.com>
 <20181208171247.22238-4-martin.blumenstingl@googlemail.com> <7345cb90-b63d-5461-d97c-89ef563dc421@baylibre.com>
In-Reply-To: <7345cb90-b63d-5461-d97c-89ef563dc421@baylibre.com>
From: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date: Tue, 11 Dec 2018 23:20:36 +0100
Message-ID: <CAFBinCABGbMu--+dr68CHoTcbis-TsUE3sA8QHhQofgv3eJs5w@mail.gmail.com>
Subject: Re: [PATCH 3/5] clk: meson: meson8b: add the GPU clock tree
To: Neil Armstrong <narmstrong@baylibre.com>
Cc: linux-amlogic@lists.infradead.org, linux-clk@vger.kernel.org,
        jbrunet@baylibre.com, khilman@baylibre.com, robh+dt@kernel.org,
        linux-arm-kernel@lists.infradead.org, linux-kernel@vger.kernel.org,
        devicetree@vger.kernel.org, dri-devel@lists.freedesktop.org,
        sboyd@kernel.org, mturquette@baylibre.com
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi Neil,

On Tue, Dec 11, 2018 at 10:21 AM Neil Armstrong <narmstrong@baylibre.com> wrote:
>
> On 08/12/2018 18:12, Martin Blumenstingl wrote:
> > Add the GPU clock tree on Meson8, Meson8b and Meson8m2.
> >
> > The GPU clock tree on Meson8b and Meson8m2 is almost identical to the
> > one one GXBB:
> > - there's a glitch-free mux at HHI_MALI_CLK_CNTL[31]
> > - there are two identical parents for this mux: mali_0 and mali_1, each
> >   with a gate, divider and mux
> > - the parents of mali_0_sel and mali_1_sel are identical to GXBB except
> >   there's no GP0_PLL on these 32-bit SoCs
> >
> > Meson8 is different because it does not have the glitch-free mux.
> > Instead if only has the mali_0 clock tree. The parents of mali_0_sel are
> > identical to the ones on Meson8b and Meson8m2.
> >
> > Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
> > ---
> >  drivers/clk/meson/meson8b.c | 146 ++++++++++++++++++++++++++++++++++++
> >  drivers/clk/meson/meson8b.h |   9 ++-
> >  2 files changed, 154 insertions(+), 1 deletion(-)
> >
> > diff --git a/drivers/clk/meson/meson8b.c b/drivers/clk/meson/meson8b.c
> > index 0b9353d8d4fd..748552c5f6c8 100644
> > --- a/drivers/clk/meson/meson8b.c
> > +++ b/drivers/clk/meson/meson8b.c
> > @@ -1573,6 +1573,135 @@ static struct clk_regmap meson8b_hdmi_sys = {
> >       },
> >  };
> >
> > +/*
> > + * The MALI IP is clocked by two identical clocks (mali_0 and mali_1)
> > + * muxed by a glitch-free switch on Meson8b and Meson8m2. Meson8 only
> > + * has mali_0 and no glitch-free mux.
> > + */
> > +static const char * const meson8b_mali_0_1_parent_names[] = {
> > +     "xtal", "mpll2", "mpll1", "fclk_div7", "fclk_div4", "fclk_div3",
> > +     "fclk_div5"
> > +};
> > +
> > +static u32 meson8b_mali_0_1_mux_table[] = { 0, 2, 3, 4, 5, 6, 7 };
> > +
> > +static struct clk_regmap meson8b_mali_0_sel = {
> > +     .data = &(struct clk_regmap_mux_data){
> > +             .offset = HHI_MALI_CLK_CNTL,
> > +             .mask = 0x7,
> > +             .shift = 9,
> > +             .table = meson8b_mali_0_1_mux_table,
> > +     },
> > +     .hw.init = &(struct clk_init_data){
> > +             .name = "mali_0_sel",
> > +             .ops = &clk_regmap_mux_ops,
> > +             .parent_names = meson8b_mali_0_1_parent_names,
> > +             .num_parents = ARRAY_SIZE(meson8b_mali_0_1_parent_names),
> > +             /*
> > +              * Don't propagate rate changes up because the only changeable
> > +              * parents are mpll1 and mpll2 but we need those for audio and
> > +              * RGMII (Ethernet). We don't want to change the audio or
> > +              * Ethernet clocks when setting the GPU frequency.
> > +              */
> > +             .flags = 0,
> > +     },
> > +};
> > +
> > +static struct clk_regmap meson8b_mali_0_div = {
> > +     .data = &(struct clk_regmap_div_data){
> > +             .offset = HHI_MALI_CLK_CNTL,
> > +             .shift = 0,
> > +             .width = 7,
> > +     },
> > +     .hw.init = &(struct clk_init_data){
> > +             .name = "mali_0_div",
> > +             .ops = &clk_regmap_divider_ops,
> > +             .parent_names = (const char *[]){ "mali_0_sel" },
> > +             .num_parents = 1,
> > +             .flags = CLK_SET_RATE_PARENT,
> > +     },
> > +};
> > +
> > +static struct clk_regmap meson8b_mali_0 = {
> > +     .data = &(struct clk_regmap_gate_data){
> > +             .offset = HHI_MALI_CLK_CNTL,
> > +             .bit_idx = 8,
> > +     },
> > +     .hw.init = &(struct clk_init_data){
> > +             .name = "mali_0",
> > +             .ops = &clk_regmap_gate_ops,
> > +             .parent_names = (const char *[]){ "mali_0_div" },
> > +             .num_parents = 1,
> > +             .flags = CLK_SET_RATE_PARENT,
> > +     },
> > +};
> > +
> > +static struct clk_regmap meson8b_mali_1_sel = {
> > +     .data = &(struct clk_regmap_mux_data){
> > +             .offset = HHI_MALI_CLK_CNTL,
> > +             .mask = 0x7,
> > +             .shift = 25,
> > +             .table = meson8b_mali_0_1_mux_table,
> > +     },
> > +     .hw.init = &(struct clk_init_data){
> > +             .name = "mali_1_sel",
> > +             .ops = &clk_regmap_mux_ops,
> > +             .parent_names = meson8b_mali_0_1_parent_names,
> > +             .num_parents = ARRAY_SIZE(meson8b_mali_0_1_parent_names),
> > +             /*
> > +              * Don't propagate rate changes up because the only changeable
> > +              * parents are mpll1 and mpll2 but we need those for audio and
> > +              * RGMII (Ethernet). We don't want to change the audio or
> > +              * Ethernet clocks when setting the GPU frequency.
> > +              */
> > +             .flags = 0,
> > +     },
> > +};
> > +
> > +static struct clk_regmap meson8b_mali_1_div = {
> > +     .data = &(struct clk_regmap_div_data){
> > +             .offset = HHI_MALI_CLK_CNTL,
> > +             .shift = 16,
> > +             .width = 7,
> > +     },
> > +     .hw.init = &(struct clk_init_data){
> > +             .name = "mali_1_div",
> > +             .ops = &clk_regmap_divider_ops,
> > +             .parent_names = (const char *[]){ "mali_1_sel" },
> > +             .num_parents = 1,
> > +             .flags = CLK_SET_RATE_PARENT,
> > +     },
> > +};
> > +
> > +static struct clk_regmap meson8b_mali_1 = {
> > +     .data = &(struct clk_regmap_gate_data){
> > +             .offset = HHI_MALI_CLK_CNTL,
> > +             .bit_idx = 24,
> > +     },
> > +     .hw.init = &(struct clk_init_data){
> > +             .name = "mali_1",
> > +             .ops = &clk_regmap_gate_ops,
> > +             .parent_names = (const char *[]){ "mali_1_div" },
> > +             .num_parents = 1,
> > +             .flags = CLK_SET_RATE_PARENT,
> > +     },
> > +};
> > +
> > +static struct clk_regmap meson8b_mali = {
> > +     .data = &(struct clk_regmap_mux_data){
> > +             .offset = HHI_MALI_CLK_CNTL,
> > +             .mask = 1,
> > +             .shift = 31,
> > +     },
> > +     .hw.init = &(struct clk_init_data){
> > +             .name = "mali",
> > +             .ops = &clk_regmap_mux_ops,
> > +             .parent_names = (const char *[]){ "mali_0", "mali_1" },
> > +             .num_parents = 2,
> > +             .flags = CLK_SET_RATE_PARENT,
> > +     },
> > +};
> > +
> >  /* Everything Else (EE) domain gates */
> >
> >  static MESON_GATE(meson8b_ddr, HHI_GCLK_MPEG0, 0);
> > @@ -1833,6 +1962,9 @@ static struct clk_hw_onecell_data meson8_hw_onecell_data = {
> >               [CLKID_HDMI_SYS_SEL]        = &meson8b_hdmi_sys_sel.hw,
> >               [CLKID_HDMI_SYS_DIV]        = &meson8b_hdmi_sys_div.hw,
> >               [CLKID_HDMI_SYS]            = &meson8b_hdmi_sys.hw,
> > +             [CLKID_MALI_0_SEL]          = &meson8b_mali_0_sel.hw,
> > +             [CLKID_MALI_0_DIV]          = &meson8b_mali_0_div.hw,
> > +             [CLKID_MALI]                = &meson8b_mali_0.hw,
> >               [CLK_NR_CLKS]               = NULL,
> >       },
> >       .num = CLK_NR_CLKS,
> > @@ -2012,6 +2144,13 @@ static struct clk_hw_onecell_data meson8b_hw_onecell_data = {
> >               [CLKID_HDMI_SYS_SEL]        = &meson8b_hdmi_sys_sel.hw,
> >               [CLKID_HDMI_SYS_DIV]        = &meson8b_hdmi_sys_div.hw,
> >               [CLKID_HDMI_SYS]            = &meson8b_hdmi_sys.hw,
> > +             [CLKID_MALI_0_SEL]          = &meson8b_mali_0_sel.hw,
> > +             [CLKID_MALI_0_DIV]          = &meson8b_mali_0_div.hw,
> > +             [CLKID_MALI_0]              = &meson8b_mali_0.hw,
> > +             [CLKID_MALI_1_SEL]          = &meson8b_mali_1_sel.hw,
> > +             [CLKID_MALI_1_DIV]          = &meson8b_mali_1_div.hw,
> > +             [CLKID_MALI_1]              = &meson8b_mali_1.hw,
> > +             [CLKID_MALI]                = &meson8b_mali.hw,
> >               [CLK_NR_CLKS]               = NULL,
> >       },
> >       .num = CLK_NR_CLKS,
> > @@ -2167,6 +2306,13 @@ static struct clk_regmap *const meson8b_clk_regmaps[] = {
> >       &meson8b_hdmi_sys_sel,
> >       &meson8b_hdmi_sys_div,
> >       &meson8b_hdmi_sys,
> > +     &meson8b_mali_0_sel,
> > +     &meson8b_mali_0_div,
> > +     &meson8b_mali_0,
> > +     &meson8b_mali_1_sel,
> > +     &meson8b_mali_1_div,
> > +     &meson8b_mali_1,
> > +     &meson8b_mali,
> >  };
> >
> >  static const struct meson8b_clk_reset_line {
> > diff --git a/drivers/clk/meson/meson8b.h b/drivers/clk/meson/meson8b.h
> > index 87fba739af81..f212e2304ff5 100644
> > --- a/drivers/clk/meson/meson8b.h
> > +++ b/drivers/clk/meson/meson8b.h
> > @@ -33,6 +33,7 @@
> >  #define HHI_VID_CLK_CNTL2            0x194 /* 0x65 offset in data sheet */
> >  #define HHI_VID_DIVIDER_CNTL         0x198 /* 0x66 offset in data sheet */
> >  #define HHI_SYS_CPU_CLK_CNTL0                0x19c /* 0x67 offset in data sheet */
> > +#define HHI_MALI_CLK_CNTL            0x1b0 /* 0x6c offset in data sheet */
> >  #define HHI_HDMI_CLK_CNTL            0x1cc /* 0x73 offset in data sheet */
> >  #define HHI_NAND_CLK_CNTL            0x25c /* 0x97 offset in data sheet */
> >  #define HHI_MPLL_CNTL                        0x280 /* 0xa0 offset in data sheet */
> > @@ -139,8 +140,14 @@
> >  #define CLKID_HDMI_SYS_SEL   172
> >  #define CLKID_HDMI_SYS_DIV   173
> >  #define CLKID_HDMI_SYS               174
> > +#define CLKID_MALI_0_SEL     175
> > +#define CLKID_MALI_0_DIV     176
> > +#define CLKID_MALI_0         177
> > +#define CLKID_MALI_1_SEL     178
> > +#define CLKID_MALI_1_DIV     179
> > +#define CLKID_MALI_1         180
> >
> > -#define CLK_NR_CLKS          175
> > +#define CLK_NR_CLKS          181
> >
> >  /*
> >   * include the CLKID and RESETID that have
> >
>
> Reviewed-by: Neil Armstrong <narmstrong@baylibre.com>
thank you for reviewing this!

> Changing mali clock for Meson8 will be fun aswell !
> How amlogic does that ? the only change the divider ?
I'm not sure how it works in practice, but the sequence is:
- spin_lock_irqsave (from mali_clock_critical)
- disable the clock
- change the divider and mux
- enable the clock again
- spin_unlock_irqrestore
(this is identical to the glitch-free mux setup except there's an
additional step for changing the mux before disabling the mali_0 clock
and after enabling the mali_0 clock again)

I learned the hard way that we can't access the Mali registers if the
clock is disabled.
so we need to be careful with this. my plan is to check the progress
of the lima driver from time to time - once there's frequency scaling
code I'll test it to see whether it works (or what I have to adjust)


Regards
Martin


[0] https://github.com/endlessm/linux-meson/blob/cd4096c3ff4eb5b8a8a5581bb46508601c5470dc/drivers/amlogic/gpu/mali/platform/mali_clock.c#L54
