Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:20:27 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 52E30580213;
	Fri, 30 Nov 2018 08:11:36 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga006-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 30 Nov 2018 08:11:35 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Ay0aU6h8cZYX1n/9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1useIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CRWRPQNtfWSJCDI27?=
 =?us-ascii?q?YIQBAPEBPf5aooTmu1cDrgGzCRW2Ce/z1jNFgGL9060g0+QmFAHLxBYuEMgTsH?=
 =?us-ascii?q?TQsd77MaASXvy0zKbSyTXDbPRW2Dnm6IjLcxAqvPaBXapqfsrMzUkjDQDFjlKM?=
 =?us-ascii?q?pozkJTyV0ucNs2+V7up7VuKvinUqpBp2ojio2scsjojJhoQPxl/Y8iV5xZ84KN?=
 =?us-ascii?q?ulQ0B4ed6pCIVcuz2eOodsX88vTX9ktDwnxrAFpZK3ZikHxZY/yxPbd/CLaYuF?=
 =?us-ascii?q?7xH5WOqMIjp0nm9pdbK8ihu07EOu0PfzVtOu31ZPtidFksfDtnQK1xHL9MiHRe?=
 =?us-ascii?q?Vy/l271TaMyQ/T8OdELl4wlabBLJ4h2LEwmoISsUTFACD2hF37gLGKekgg4OSk?=
 =?us-ascii?q?9urqbqv8qpOBNIJ4lhvyP6Usl8CnBOQ3KAkOX2yV+eSm073j+FX0QLFLjv0wj6?=
 =?us-ascii?q?nYv4nWJccFqa6jBQ9azIIj5w+4Dzao1tQXg2MHIUlbeBKIkYfpIUvCIPPmAvel?=
 =?us-ascii?q?hVSjjjNry+rBPr37DZXBNmLDn6v5fbZh905czxI+zdRe55JXFL4NOv3yWlLqud?=
 =?us-ascii?q?zcDx85NRG0wun9BNV80IMeRXyAAquDPKzOtl+I4/olI/OQa48NpDb9N/8l6ubu?=
 =?us-ascii?q?jXAjmF8dYbOm3ZwNZHC4A/RpOUOZYXX3j9cFEGcKuBc+TePwhF2DVz5Te2i9X6?=
 =?us-ascii?q?Ym6j4nD4KmCJ/JRpqxj7yZwCe7AppWa3hEClCLD3jkbYaEW/AKaCKUJc9siTgE?=
 =?us-ascii?q?VbmnS4882hCirg76y7x7LuXK/i0Ur47s1N9w5+fLjxE96SR0D9iB02GKV2x7hH?=
 =?us-ascii?q?gIRz8x3KB8u0B90E2M0apjjvxcFNxT4e5JUwggOZ7dyex6F879WgbbctiVT1am?=
 =?us-ascii?q?R82sASstQdIp398Of0F9Fs2hjh/Z2SqmGbsVl72RC5wy/aLRxHzxJ8d7y3bb26?=
 =?us-ascii?q?gtlVgmQs1TNWK4gq5z7RTcB4nMk0+Bjaalabwc3DLR9GeE1WeBoVtXUBBuXqnf?=
 =?us-ascii?q?XXAQfE3Wrc/n6UPESLOuDbcnMg5FycOZLqtKa9vpjUhJRfv5OdTeZX6xlHm0BR?=
 =?us-ascii?q?qS2ryMa4/qcX0H3CrBEEgEjxwT/XGeOAcjHCihvXzRACZuFV31ZUPs6vdxqHWg?=
 =?us-ascii?q?Q08wzgGKaVBh1rWv9h4Ug/ycV+0c3rYetCg9rDV0GU6338jKBNqYuwphYKJcbM?=
 =?us-ascii?q?sh4FdG0GLZsBB9PpygLqx4ml4SaQN3v1nq1xV2DIVAntMnrHcrzAp0NKKZ30lN?=
 =?us-ascii?q?dzKe3ZDsJLLXLnP+8wyoa67TwlveysqZ+r8T6PQkrFXupBumFk48/HRozdZU02?=
 =?us-ascii?q?GQ6Y7XDAUPS53xVEU39x9kp7zBZik95oXU1WBjMKWusz/C3c4pC/Uhyhq6Y9hf?=
 =?us-ascii?q?N6aEHhfoE8IGH8iuNPAqm1+xYxMEIeBe7rI7M9mndvuGwqGrOulgkSmijWRG5o?=
 =?us-ascii?q?B9z02N+zB9Su7Ow5YK3fWY0hGbWDf7iVerqtr3lpxcZTEOAmq/zjDpBJRQZqJu?=
 =?us-ascii?q?Z4kLE3qhI8qtytV4mZHtQX9Y+Ee/CFwc3M+mZASdb0b63Q1WzkkXpX2nmS2lzz?=
 =?us-ascii?q?17iT0pr6yf3DDQzOTmbhYIJmlLRGx6h1f2PYe0l8waXFSvbwUxlBql5Fz2xqhB?=
 =?us-ascii?q?qKRkMmnTR1xFfyz3L2FkT6uxuaCOY89J6JM0rypXVP6wbkydSr74uxEayT/sH3?=
 =?us-ascii?q?NCxDAncDGnopf5kAZgiGKeL3Zzq2DVedpqyhfc59zcRPhR0SQARCRjjTnXB168?=
 =?us-ascii?q?P8Sm/NmOlpfDtPy+WHylVpFJbSbryoaAvjOh5WJ2GR2/g+yzmtr/HAk6yyD70M?=
 =?us-ascii?q?NmVSfJrBb6eYTr06W6MeR6fkhnHlP86sx6Gp1gnYs0np0fxX8ahpCN93odjWjz?=
 =?us-ascii?q?Kclb2b75bHcVRj4E2d/V7BLl2E1+NH2JwY35W26ZwstgYdm6f2wX1jg878BMFK?=
 =?us-ascii?q?eb8rhEkTFprVq/qALbeeJ9kSsFyfsy9H4ahPkEuA8sziWeGL8eB0dZMjL3lxSU?=
 =?us-ascii?q?8d++tr5Ya3i1cbi/z0d+mdGhDLefogBTQnr5e5EiHTNu4cV7Kl7DzHrz6oT8ct?=
 =?us-ascii?q?nKcd0TrgGUkwvHj+VNNJIxkf8KiTBmOG3nu30l1vU7jQdv3ZyhuIiHKmNt/L+2?=
 =?us-ascii?q?AxJCNz31Yd8T9S/pjapEgsmW2IWvFI17GjoXRJvoUe6oEDUKuPv8LQmOFzk8qm?=
 =?us-ascii?q?qBFbrbAA+S80Nmr3PJE5C2OHCbPngZzdN+RBaDIExTmhwbXDI/npQhDACl2NTh?=
 =?us-ascii?q?cFtl5jAW/lP4qAFDyud2OBnkSGvfuB2kajQpSJicMRpW6BtN51zOPMya7+JzGT?=
 =?us-ascii?q?xY/5K7oAyMLGybexpHDWUTVkOYAFDjO6Gk5cPc/OiAGuq+M/zObK2OqOxZSveI?=
 =?us-ascii?q?3I+v3ZFg/zqWLcWPOX9iD/Ig10pHXHB5HdnZmjoVRywWkSLNc9CUpBOm9iJrqc?=
 =?us-ascii?q?C/9ezhWBjz6ouXF7tSLdJv9gi2gaidNu6QhyV5KTdC2pMP33/Iz7cf00AIiyFz?=
 =?us-ascii?q?bDmgCrAAtS/LTKLNla5bFR8bayVvNMRW66IwxBVCOcneitntzL53kuY1C0tZVV?=
 =?us-ascii?q?zmgsymf9EKLHqnNFzZBEeHLrCGJTzQzsHzYKO8T6BQjepOux2xvzabD1HsPjCZ?=
 =?us-ascii?q?mzb1UBCvNPlGjDuHMxxGpIG9bhFtBHD/TNLnbx23KsN4gScqzr00mHzKM3URMT?=
 =?us-ascii?q?x9c0NLs72R4jlUgvR5G2xd8HVlKfOIlDqe7+ndMpwWq+dkAjxol+JG53Q307tU?=
 =?us-ascii?q?4ztCRPxwmSvSqMZholCmkuaVzDpnXwFDqjJKhIKNoEVjNr/V9phGWXbY4h0N6X?=
 =?us-ascii?q?+cBAgNp9tgWZXTvPVc0NmKmK/tJTNq99PP4dBaCdLZJc6KK3k9NgKvHyTbSEMB?=
 =?us-ascii?q?TDi2JSTcilZbnfW66HKYtN45p4LqlZ5ITaVUB3IvEfZPMk14GJQhJ5x2Vzcnlq?=
 =?us-ascii?q?GAj89AsWK3sR2XR8JRv5nDVfWNGvbuADyeiqVAZh1OyrT9e9dAfrbn0lBvPwEp?=
 =?us-ascii?q?1L/BHFDdCJUU+nVs?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAADUYAFch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBg2snjBFfiyqCIZc0gXMsEwGHdiI0CQ0BAwEBAQEBAQIBEwEBAQg?=
 =?us-ascii?q?NCQgpL4I2JAGCaQIkCwEtGQYJAlADKTISBYMcggIEAac0M4N9hjCHbIQugVc/i?=
 =?us-ascii?q?G0bhXcCiVOBSYVajz8HAoIeBIQeg26GfiOBW4g0hxCIe5Eogg1wgzyCJxeOHj8?=
 =?us-ascii?q?ygQQBAQE7ikGCTQEB?=
X-IPAS-Result: =?us-ascii?q?A0ANAADUYAFch0O0hNFjHAEBAQQBAQcEAQGBUQcBAQsBg2s?=
 =?us-ascii?q?njBFfiyqCIZc0gXMsEwGHdiI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpL4I2JAGCa?=
 =?us-ascii?q?QIkCwEtGQYJAlADKTISBYMcggIEAac0M4N9hjCHbIQugVc/iG0bhXcCiVOBSYV?=
 =?us-ascii?q?ajz8HAoIeBIQeg26GfiOBW4g0hxCIe5Eogg1wgzyCJxeOHj8ygQQBAQE7ikGCT?=
 =?us-ascii?q?QEB?=
X-IronPort-AV: E=Sophos;i="5.56,299,1539673200"; 
   d="scan'208";a="54030574"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 30 Nov 2018 08:11:32 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727486AbeLADVR (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 30 Nov 2018 22:21:17 -0500
Received: from mail.bootlin.com ([62.4.15.54]:59512 "EHLO mail.bootlin.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726659AbeLADVR (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 30 Nov 2018 22:21:17 -0500
Received: by mail.bootlin.com (Postfix, from userid 110)
        id 4BEEC20701; Fri, 30 Nov 2018 17:11:27 +0100 (CET)
X-Spam-Checker-Version: SpamAssassin 3.4.2 (2018-09-13) on mail.bootlin.com
X-Spam-Level: 
X-Spam-Status: No, score=-1.0 required=5.0 tests=ALL_TRUSTED,SHORTCIRCUIT
        shortcircuit=ham autolearn=disabled version=3.4.2
Received: from localhost.localdomain (aaubervilliers-681-1-63-158.w90-88.abo.wanadoo.fr [90.88.18.158])
        by mail.bootlin.com (Postfix) with ESMTPSA id E1E1D206D8;
        Fri, 30 Nov 2018 17:11:26 +0100 (CET)
From: Paul Kocialkowski <paul.kocialkowski@bootlin.com>
To: dri-devel@lists.freedesktop.org, linux-kernel@vger.kernel.org
Cc: Eric Anholt <eric@anholt.net>, David Airlie <airlied@linux.ie>,
        Maxime Ripard <maxime.ripard@bootlin.com>,
        Thomas Petazzoni <thomas.petazzoni@bootlin.com>,
        Boris Brezillon <boris.brezillon@bootlin.com>,
        Paul Kocialkowski <paul.kocialkowski@bootlin.com>
Subject: [PATCH v2] drm/vc4: Add a debugfs entry to disable/enable the load tracker
Date: Fri, 30 Nov 2018 17:11:04 +0100
Message-Id: <20181130161104.16352-1-paul.kocialkowski@bootlin.com>
X-Mailer: git-send-email 2.19.1
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

In order to test whether the load tracker is working as expected, we
need the ability to compare the commit result with the underrun
indication. With the load tracker always enabled, commits that are
expected to trigger an underrun are always rejected, so userspace
cannot get the actual underrun indication from the hardware.

Add a debugfs entry to disable/enable the load tracker, so that a DRM
commit expected to trigger an underrun can go through with the load
tracker disabled. The underrun indication is then available to
userspace and can be checked against the commit result with the load
tracker enabled.

Signed-off-by: Paul Kocialkowski <paul.kocialkowski@bootlin.com>
---

Changes since v1:
* Moved all the debugfs-related functions and structure to vc4_debugfs.c.

 drivers/gpu/drm/vc4/vc4_debugfs.c | 58 +++++++++++++++++++++++++++++++
 drivers/gpu/drm/vc4/vc4_drv.c     |  2 ++
 drivers/gpu/drm/vc4/vc4_drv.h     |  2 ++
 drivers/gpu/drm/vc4/vc4_kms.c     |  6 +++-
 4 files changed, 67 insertions(+), 1 deletion(-)

diff --git a/drivers/gpu/drm/vc4/vc4_debugfs.c b/drivers/gpu/drm/vc4/vc4_debugfs.c
index 7a0003de71ab..8f4d7fadb226 100644
--- a/drivers/gpu/drm/vc4/vc4_debugfs.c
+++ b/drivers/gpu/drm/vc4/vc4_debugfs.c
@@ -32,9 +32,67 @@ static const struct drm_info_list vc4_debugfs_list[] = {
 
 #define VC4_DEBUGFS_ENTRIES ARRAY_SIZE(vc4_debugfs_list)
 
+static int vc4_debugfs_load_tracker_get(struct seq_file *m, void *data)
+{
+	struct drm_device *dev = m->private;
+	struct vc4_dev *vc4 = to_vc4_dev(dev);
+
+	if (vc4->load_tracker_enabled)
+		seq_printf(m, "enabled\n");
+	else
+		seq_printf(m, "disabled\n");
+
+	return 0;
+}
+
+static ssize_t vc4_debugfs_load_tracker_set(struct file *file,
+					    const char __user *ubuf,
+					    size_t len, loff_t *offp)
+{
+	struct seq_file *m = file->private_data;
+	struct drm_device *dev = m->private;
+	struct vc4_dev *vc4 = to_vc4_dev(dev);
+	char buf[32] = {};
+
+	if (len >= sizeof(buf))
+		return -EINVAL;
+
+	if (copy_from_user(buf, ubuf, len))
+		return -EFAULT;
+
+	if (!strncasecmp(buf, "enable", 6))
+		vc4->load_tracker_enabled = true;
+	else if (!strncasecmp(buf, "disable", 7))
+		vc4->load_tracker_enabled = false;
+	else
+		return -EINVAL;
+
+	return len;
+}
+
+static int vc4_debugfs_load_tracker_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, vc4_debugfs_load_tracker_get, inode->i_private);
+}
+
+static const struct file_operations vc4_debugfs_load_tracker_fops = {
+	.owner = THIS_MODULE,
+	.open = vc4_debugfs_load_tracker_open,
+	.read = seq_read,
+	.write = vc4_debugfs_load_tracker_set,
+};
+
 int
 vc4_debugfs_init(struct drm_minor *minor)
 {
+	struct dentry *dentry;
+
+	dentry = debugfs_create_file("load_tracker", S_IRUGO | S_IWUSR,
+				     minor->debugfs_root, minor->dev,
+				     &vc4_debugfs_load_tracker_fops);
+	if (!dentry)
+		return -ENOMEM;
+
 	return drm_debugfs_create_files(vc4_debugfs_list, VC4_DEBUGFS_ENTRIES,
 					minor->debugfs_root, minor);
 }
diff --git a/drivers/gpu/drm/vc4/vc4_drv.c b/drivers/gpu/drm/vc4/vc4_drv.c
index 7195a0bcceb3..12ac971d24d6 100644
--- a/drivers/gpu/drm/vc4/vc4_drv.c
+++ b/drivers/gpu/drm/vc4/vc4_drv.c
@@ -290,6 +290,8 @@ static int vc4_drm_bind(struct device *dev)
 
 	drm_fbdev_generic_setup(drm, 32);
 
+	vc4->load_tracker_enabled = true;
+
 	return 0;
 
 unbind_all:
diff --git a/drivers/gpu/drm/vc4/vc4_drv.h b/drivers/gpu/drm/vc4/vc4_drv.h
index 11369da944b6..8d0f2f16a9e8 100644
--- a/drivers/gpu/drm/vc4/vc4_drv.h
+++ b/drivers/gpu/drm/vc4/vc4_drv.h
@@ -188,6 +188,8 @@ struct vc4_dev {
 
 	int power_refcount;
 
+	bool load_tracker_enabled;
+
 	/* Mutex controlling the power refcount. */
 	struct mutex power_lock;
 
diff --git a/drivers/gpu/drm/vc4/vc4_kms.c b/drivers/gpu/drm/vc4/vc4_kms.c
index b905a19c1470..4b2509b1b8ed 100644
--- a/drivers/gpu/drm/vc4/vc4_kms.c
+++ b/drivers/gpu/drm/vc4/vc4_kms.c
@@ -473,6 +473,7 @@ static const struct drm_private_state_funcs vc4_load_tracker_state_funcs = {
 static int
 vc4_atomic_check(struct drm_device *dev, struct drm_atomic_state *state)
 {
+	struct vc4_dev *vc4 = to_vc4_dev(dev);
 	int ret;
 
 	ret = vc4_ctm_atomic_check(dev, state);
@@ -483,7 +484,10 @@ vc4_atomic_check(struct drm_device *dev, struct drm_atomic_state *state)
 	if (ret)
 		return ret;
 
-	return vc4_load_tracker_atomic_check(state);
+	if (vc4->load_tracker_enabled)
+		return vc4_load_tracker_atomic_check(state);
+
+	return 0;
 }
 
 static const struct drm_mode_config_funcs vc4_mode_funcs = {
-- 
2.19.1

