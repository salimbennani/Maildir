Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 09 Dec 2018 18:51:30 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id B0DAA5804F7;
	Fri,  7 Dec 2018 09:07:07 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga003-1.jf.intel.com with ESMTP; 07 Dec 2018 09:07:07 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ANts47xGn5qHGQ5oMKjGGzZ1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75o828bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjmk8qxlSgLniD?=
 =?us-ascii?q?0fOjA57m/Zl8J+gqFcrhK6vxxywZXZbJ2JOPdkYq/QZ88WSXZHU81MVyJBGIS8?=
 =?us-ascii?q?b44XAuQFOuZYtZTyqEEIrRCjGwSsHuTvyiJThnDowKY31OYhHh3c3AwnAtIOq2?=
 =?us-ascii?q?rboc7pO6cVTO+60rPHzSjZb/NRwzfy8pLEchc7ofGDRL99d9fax0o3Fw7dkFmc?=
 =?us-ascii?q?tYjoMymI2ukDrWSX9fdsWOGzh2I9qgx8oCCjytooh4TNnI4Z10zI+CRjzIooOd?=
 =?us-ascii?q?G1RlR3bcCkHZZfsSyRKpF4Tdk4Q25yvSY30r0GtoC/fCgN0Jkn2RHfZOKdc4SS?=
 =?us-ascii?q?4RLsSvyRITFmi3JhYr6/gAyy8Ue4xu39UMm7zkpKozJbntXQsn0BzQHf58aZRv?=
 =?us-ascii?q?dn40us2iqD2xrS5+xGOUw0kLDUK58lwr4+jJoTtkHDEzfymEX3iq+Wa0ol9vGr?=
 =?us-ascii?q?6+v5eLXmoIGTN4tthgH5PKUunNKwAf4jPwgQUGiU5/682Kfg/ULnWrVKiOM5kq?=
 =?us-ascii?q?3DvJDdP8Qbqba1AxVJ3YY79xa/EzCm3cwcnXkGL1JKZgiLjof0O1zVJPD4DPG/?=
 =?us-ascii?q?g0mjkTtxxvDGOKHhDYvJLnTZjLjherN94VZGyAUv1dBf+45UCrYZLfLzQEDxtc?=
 =?us-ascii?q?DYAQU+MwCuw+bnFc9y1oURWW+UBq+ZMaXSsUKH5+41IumMYpMVtyj5K/Q/+/Hu?=
 =?us-ascii?q?ino5k0cHfaa1xZsXdGy4HvN+LkWbZnrjnM0NEWQNvgo4Suzqj0aPUTpSZ3a0Qq?=
 =?us-ascii?q?I96Ss3CIOgDYffWI+thKaN0zu8Hp1TfmpGEEyDEW/0d4WYXPcBcDidItRhkjwD?=
 =?us-ascii?q?VritUZUh2gustALhz7pnL+zU+jAXtJ751dh14fHTmg829TBuE8ud1GSNRXlunm?=
 =?us-ascii?q?wUXz82wLx/oUtlx1eAy6d4heZUFdhS5/xTVAc6OoXRz+h7C9D0RwLAcc2FSFeg?=
 =?us-ascii?q?QtW6Hz4xSsg9zMMJY0Z4A9+ilAzM3zK2A78JkLyGHIE7/bjC33fvPcp9y2zJ1K?=
 =?us-ascii?q?86j1Y4RMtDMmmmhq169wjXHIPJl0SZl6C3daUTxiLN9WGDzXaQs0FcSgJ/TaLF?=
 =?us-ascii?q?XXUHbEvMsdv5/l/CT6OpCbk/LwRO09CCJbVQZt3pl1pGQuzjN8rYY2+qn2ewBB?=
 =?us-ascii?q?CIxq6DbYbwemUd2jndB1YAkwwJ4XmGMg0+DD+7o23CFDxuCU7vY0T0/OliqXO7?=
 =?us-ascii?q?S0g0zx2Kb0xhzba15gQZhfuGS/MX37IEvighpi5wHFa82dLWFtWBqxBgfKVafd?=
 =?us-ascii?q?My/lNH2XjFuAx6O5yqN7piiUIGcwRro0Pu0A16BZ9Ekcc0o3Il0gpzJbiD31Nc?=
 =?us-ascii?q?ajyXx5bwOr7QKmns5x2vb6/W2lfD0NeZ4KsP6fI4q0n9swGtDEYt73Jn09xN2X?=
 =?us-ascii?q?uG+prKFBYSUY72Uksv9xl6uqvWbTUn64LV1X1jK6+0sjDZ1tItBeslzAugfthF?=
 =?us-ascii?q?PKOFEg/yD9MVB8y0JOM2nFipawoOPPpO+64sI8Oma/yG1baxPOZhgD2pl35H75?=
 =?us-ascii?q?160k6W8SpzVPTI35ccz/6ExASHUyrzg0m7ssDwn4BJfjUSHmu5ySj5C49dfKxy?=
 =?us-ascii?q?fYAXCWiwJ8273Mlxh5noW3RA7l6sG0sG2NO1eRqVd1H83QxQ2V4XoHC9giu40j?=
 =?us-ascii?q?p0niotrqqe2izO3uvjeAAGOm5NWGltk1PsLZKogNAdWUiidxIpmwe95Ubm26hb?=
 =?us-ascii?q?o7xyL2vJTkdSfCj2LGZiXrGrtrWYYM5P65IosSNJX+S6el2aTr/9ox0H0yLsBW?=
 =?us-ascii?q?dexTY7dy20tZX9hRB1lGWdLHNrpnrDZc5w3Qvf5MDbRfNJ3jsJXi54hSPVBli9?=
 =?us-ascii?q?Odmk5tGUl5bFsuCjWGOtTJxTcS/3zYyesCu3/3FlARq6n/qrgN3oDRA60TPn19?=
 =?us-ascii?q?ltTSjIrwzzYojx26S6LOJoZE9oBFDn5sp+G4F+lJYwhZ4K1XgbgJWV4WQIkWPp?=
 =?us-ascii?q?PdpH3qL+aWIHRSQXzN7N/AjlxEpjI2qMx4L4VXWS2NFtZtekbWMNxiIy8dpKB7?=
 =?us-ascii?q?yK47xekit4uV64rQPXYfhgkTYR0/ou6HgGg+4XvAoh1DmSArcXHUNAJyzjiwyI?=
 =?us-ascii?q?78yirKVQfGuvbb+w1E9kkdGgFr6CpBxcWG3iepcjBiJw6sR/MFTR0Hz88I3ked?=
 =?us-ascii?q?/Qbc4NuR2QiRvPk+9VKJcpnPoQmSVnIX79vWEiy+MjlhNhx5a6vIyaK2l3+KK5?=
 =?us-ascii?q?HwVVNjn0Z8MV5zHsgrxSnseQ34CzAJphHi8HU4fvTfKtCDgSr+joNx6SED0grX?=
 =?us-ascii?q?eWAbjfEhWa6Eh4tHLDCYyrO2uUJHkEztViWR+dK1ZEgA0PWDU6n5g5Fh2lxcD7?=
 =?us-ascii?q?cUd54CwR6UD8qhdW1u1oMBz/WH/FpAi0cjc0VISfLB1O4wBC4EfVLNWe7v9pEC?=
 =?us-ascii?q?Fe5JGhtwuNKmqUZwlTCWEJW0qEB03sP7W05NnA9fSYCfS6L/fUfbqOruleXe+S?=
 =?us-ascii?q?xZ2zyotm4yqMNsKXM3liEfI720lDXXN4G8jDmDUPUSsXly3TYM6BuRe84TZ6rs?=
 =?us-ascii?q?S+8PTtRQLu6pGDC7pUMdVz5R+2hb2POPKXhCZ8MTxYzI8DxWfUyLgD214fkzth?=
 =?us-ascii?q?dyS2HrQaqyHMTLjcmqtWDxMAbyNzNc1I778z3wVXOM7bjM/12aB8jvIvF1hFUl?=
 =?us-ascii?q?nhkNmzZcMWO2G9KE/HBEGTObSaJD3Lxtv7br+mRbJMjOVbqRuwtC2fE0/iODSD?=
 =?us-ascii?q?ijboWwquMeFKkCGUIhhetJuhfRZqDGjpVMjmZQGjMN9rkT02xqU5h3PQOm4aND?=
 =?us-ascii?q?h8ckVNoaWR7CNYmPp/HWNB42FhLemFnSaZ8ubZJowXsfttHiR7ieZa7G4mxLtS?=
 =?us-ascii?q?6SEXDMByzSXIo9NiuVyglcGLyyF7S1xAsDtGiI+QvlllIePe7JYTd2zD+Ucv6n?=
 =?us-ascii?q?+cAhJCjMFiF8bi8/RSwcLIibn+ADxF/9/d4NEbHcGSL9iIZilyeSH1ESLZWVNW?=
 =?us-ascii?q?BQWgMnvS0hRQ?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AeAADepwpch0O0hNFjHgEGBwaBUQkLA?=
 =?us-ascii?q?YIAgWsnjHKLMoIhlzsUgV8UGBMBh10iNAkNAQMBAQEBAQECARMBAQEIDQkIKSM?=
 =?us-ascii?q?MgjYigmwCJBkBATcBBQkCUAMpRAWDHIICBaR5gWwzgnYBAQWHKQiHc4MTgRwXg?=
 =?us-ascii?q?UA/gRGCZIR0Eg0BhXaQOY9qRgmRQCOJY4dUAZkbgUaCDTMaCCgIgyeCGwwXiF6?=
 =?us-ascii?q?FXyAygQUBAYgZgkwBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AeAADepwpch0O0hNFjHgEGBwaBUQkLAYIAgWsnjHKLMoI?=
 =?us-ascii?q?hlzsUgV8UGBMBh10iNAkNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYigmwCJBkBA?=
 =?us-ascii?q?TcBBQkCUAMpRAWDHIICBaR5gWwzgnYBAQWHKQiHc4MTgRwXgUA/gRGCZIR0Eg0?=
 =?us-ascii?q?BhXaQOY9qRgmRQCOJY4dUAZkbgUaCDTMaCCgIgyeCGwwXiF6FXyAygQUBAYgZg?=
 =?us-ascii?q?kwBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,326,1539673200"; 
   d="scan'208";a="43184283"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 07 Dec 2018 09:07:05 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726159AbeLGRHC (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 7 Dec 2018 12:07:02 -0500
Received: from smtp.codeaurora.org ([198.145.29.96]:44376 "EHLO
        smtp.codeaurora.org" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726045AbeLGRHB (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 7 Dec 2018 12:07:01 -0500
Received: by smtp.codeaurora.org (Postfix, from userid 1000)
        id 6EADC609F3; Fri,  7 Dec 2018 17:07:00 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=codeaurora.org;
        s=default; t=1544202420;
        bh=ctGa3E2FImQ/l5c/QYJfD6LwEaRRe8nR8VQJ3p8Aesw=;
        h=From:To:Cc:Subject:Date:From;
        b=gCh8xvlVRClxKD2Exvcr44dLMyr3BkVbbYE+OIEwFUUClcMyd6XGOVPNfA4pdEpr8
         QYt36hl7G1DMFvnznfXb+zNm4QPxHRbh7ThEI3hfHQXjw3hYm2ypMa0A4m//Sr6sEW
         W3V6Yfidnhqz+AFqj0MDxr4X3SQIKyr5WF3wdUE4=
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
        pdx-caf-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-2.7 required=2.0 tests=ALL_TRUSTED,BAYES_00,
        DKIM_INVALID,DKIM_SIGNED autolearn=no autolearn_force=no version=3.4.0
Received: from jcrouse-lnx.qualcomm.com (i-global254.qualcomm.com [199.106.103.254])
        (using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
        (No client certificate requested)
        (Authenticated sender: jcrouse@smtp.codeaurora.org)
        by smtp.codeaurora.org (Postfix) with ESMTPSA id E640D6063A;
        Fri,  7 Dec 2018 17:06:58 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=codeaurora.org;
        s=default; t=1544202419;
        bh=ctGa3E2FImQ/l5c/QYJfD6LwEaRRe8nR8VQJ3p8Aesw=;
        h=From:To:Cc:Subject:Date:From;
        b=fSCus484AruRjOiHKSQeQHP3SC5u8vl5USGgnultqGJ2wu1Bc9MGGfobc2/3krPhQ
         Kkf/r1puGUEIzfbDUr2HBsmQryIfBYvLOzf9MDt7iIvgbvvVntHO0FMobrTuLX/wAz
         EO6SIUZAJzZl0Y0YMNWYXsopOc4dnOJEKHACIRnM=
DMARC-Filter: OpenDMARC Filter v1.3.2 smtp.codeaurora.org E640D6063A
Authentication-Results: pdx-caf-mail.web.codeaurora.org; dmarc=none (p=none dis=none) header.from=codeaurora.org
Authentication-Results: pdx-caf-mail.web.codeaurora.org; spf=none smtp.mailfrom=jcrouse@codeaurora.org
From: Jordan Crouse <jcrouse@codeaurora.org>
To: freedreno@lists.freedesktop.org
Cc: linux-kernel@vger.kernel.org, linux-arm-kernel@lists.infradead.org,
        linux-arm-msm@vger.kernel.org, dri-devel@lists.freedesktop.org,
        georgi.djakov@linaro.org, dianders@chromium.org
Subject: [PATCH] drm/msm/a6xx: Add support for an interconnect path
Date: Fri,  7 Dec 2018 10:06:56 -0700
Message-Id: <20181207170656.13208-1-jcrouse@codeaurora.org>
X-Mailer: git-send-email 2.18.0
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Try to get the interconnect path for the GPU and vote for the maximum
bandwidth to support all frequencies. This is needed for performance.
Later we will want to scale the bandwidth based on the frequency to
also optimize for power but that will require some device tree
infrastructure that does not yet exist.

v3: Use macros and change port string per Georgi Djakov

Signed-off-by: Jordan Crouse <jcrouse@codeaurora.org>
---
 drivers/gpu/drm/msm/Kconfig             |  1 +
 drivers/gpu/drm/msm/adreno/a6xx_gmu.c   | 20 ++++++++++++++++++++
 drivers/gpu/drm/msm/adreno/adreno_gpu.c |  9 +++++++++
 drivers/gpu/drm/msm/msm_gpu.h           |  3 +++
 4 files changed, 33 insertions(+)

diff --git a/drivers/gpu/drm/msm/Kconfig b/drivers/gpu/drm/msm/Kconfig
index 843a9d40c05e..990c4350f0c4 100644
--- a/drivers/gpu/drm/msm/Kconfig
+++ b/drivers/gpu/drm/msm/Kconfig
@@ -5,6 +5,7 @@ config DRM_MSM
 	depends on ARCH_QCOM || (ARM && COMPILE_TEST)
 	depends on OF && COMMON_CLK
 	depends on MMU
+	depends on INTERCONNECT || !INTERCONNECT
 	select QCOM_MDT_LOADER if ARCH_QCOM
 	select REGULATOR
 	select DRM_KMS_HELPER
diff --git a/drivers/gpu/drm/msm/adreno/a6xx_gmu.c b/drivers/gpu/drm/msm/adreno/a6xx_gmu.c
index 546599a7ab05..f37a9bfe5c30 100644
--- a/drivers/gpu/drm/msm/adreno/a6xx_gmu.c
+++ b/drivers/gpu/drm/msm/adreno/a6xx_gmu.c
@@ -2,6 +2,7 @@
 /* Copyright (c) 2017-2018 The Linux Foundation. All rights reserved. */
 
 #include <linux/clk.h>
+#include <linux/interconnect.h>
 #include <linux/pm_opp.h>
 #include <soc/qcom/cmd-db.h>
 
@@ -63,6 +64,9 @@ static bool a6xx_gmu_gx_is_on(struct a6xx_gmu *gmu)
 
 static void __a6xx_gmu_set_freq(struct a6xx_gmu *gmu, int index)
 {
+	struct a6xx_gpu *a6xx_gpu = container_of(gmu, struct a6xx_gpu, gmu);
+	struct adreno_gpu *adreno_gpu = &a6xx_gpu->base;
+	struct msm_gpu *gpu = &adreno_gpu->base;
 	int ret;
 
 	gmu_write(gmu, REG_A6XX_GMU_DCVS_ACK_OPTION, 0);
@@ -85,6 +89,12 @@ static void __a6xx_gmu_set_freq(struct a6xx_gmu *gmu, int index)
 		dev_err(gmu->dev, "GMU set GPU frequency error: %d\n", ret);
 
 	gmu->freq = gmu->gpu_freqs[index];
+
+	/*
+	 * Eventually we will want to scale the path vote with the frequency but
+	 * for now leave it at max so that the performance is nominal.
+	 */
+	icc_set(gpu->icc_path, 0, MBps_to_icc(7216));
 }
 
 void a6xx_gmu_set_freq(struct msm_gpu *gpu, unsigned long freq)
@@ -680,6 +690,8 @@ int a6xx_gmu_reset(struct a6xx_gpu *a6xx_gpu)
 
 int a6xx_gmu_resume(struct a6xx_gpu *a6xx_gpu)
 {
+	struct adreno_gpu *adreno_gpu = &a6xx_gpu->base;
+	struct msm_gpu *gpu = &adreno_gpu->base;
 	struct a6xx_gmu *gmu = &a6xx_gpu->gmu;
 	int status, ret;
 
@@ -695,6 +707,9 @@ int a6xx_gmu_resume(struct a6xx_gpu *a6xx_gpu)
 	if (ret)
 		goto out;
 
+	/* Set the bus quota to a reasonable value for boot */
+	icc_set(gpu->icc_path, 0, MBps_to_icc(3072));
+
 	a6xx_gmu_irq_enable(gmu);
 
 	/* Check to see if we are doing a cold or warm boot */
@@ -735,6 +750,8 @@ bool a6xx_gmu_isidle(struct a6xx_gmu *gmu)
 
 int a6xx_gmu_stop(struct a6xx_gpu *a6xx_gpu)
 {
+	struct adreno_gpu *adreno_gpu = &a6xx_gpu->base;
+	struct msm_gpu *gpu = &adreno_gpu->base;
 	struct a6xx_gmu *gmu = &a6xx_gpu->gmu;
 	u32 val;
 
@@ -781,6 +798,9 @@ int a6xx_gmu_stop(struct a6xx_gpu *a6xx_gpu)
 	/* Tell RPMh to power off the GPU */
 	a6xx_rpmh_stop(gmu);
 
+	/* Remove the bus vote */
+	icc_set(gpu->icc_path, 0, 0);
+
 	clk_bulk_disable_unprepare(gmu->nr_clocks, gmu->clocks);
 
 	pm_runtime_put_sync(gmu->dev);
diff --git a/drivers/gpu/drm/msm/adreno/adreno_gpu.c b/drivers/gpu/drm/msm/adreno/adreno_gpu.c
index 93d70f4a2154..7403ade9aabc 100644
--- a/drivers/gpu/drm/msm/adreno/adreno_gpu.c
+++ b/drivers/gpu/drm/msm/adreno/adreno_gpu.c
@@ -18,6 +18,7 @@
  */
 
 #include <linux/ascii85.h>
+#include <linux/interconnect.h>
 #include <linux/kernel.h>
 #include <linux/pm_opp.h>
 #include <linux/slab.h>
@@ -695,6 +696,11 @@ static int adreno_get_pwrlevels(struct device *dev,
 
 	DBG("fast_rate=%u, slow_rate=27000000", gpu->fast_rate);
 
+	/* Check for an interconnect path for the bus */
+	gpu->icc_path = of_icc_get(dev, "gfx-mem");
+	if (IS_ERR(gpu->icc_path))
+		gpu->icc_path = NULL;
+
 	return 0;
 }
 
@@ -733,10 +739,13 @@ int adreno_gpu_init(struct drm_device *drm, struct platform_device *pdev,
 
 void adreno_gpu_cleanup(struct adreno_gpu *adreno_gpu)
 {
+	struct msm_gpu *gpu = &adreno_gpu->base;
 	unsigned int i;
 
 	for (i = 0; i < ARRAY_SIZE(adreno_gpu->info->fw); i++)
 		release_firmware(adreno_gpu->fw[i]);
 
+	icc_put(gpu->icc_path);
+
 	msm_gpu_cleanup(&adreno_gpu->base);
 }
diff --git a/drivers/gpu/drm/msm/msm_gpu.h b/drivers/gpu/drm/msm/msm_gpu.h
index f82bac086666..12fc5b1cb39d 100644
--- a/drivers/gpu/drm/msm/msm_gpu.h
+++ b/drivers/gpu/drm/msm/msm_gpu.h
@@ -19,6 +19,7 @@
 #define __MSM_GPU_H__
 
 #include <linux/clk.h>
+#include <linux/interconnect.h>
 #include <linux/regulator/consumer.h>
 
 #include "msm_drv.h"
@@ -119,6 +120,8 @@ struct msm_gpu {
 	struct clk *ebi1_clk, *core_clk, *rbbmtimer_clk;
 	uint32_t fast_rate;
 
+	struct icc_path *icc_path;
+
 	/* Hang and Inactivity Detection:
 	 */
 #define DRM_MSM_INACTIVE_PERIOD   66 /* in ms (roughly four frames) */
-- 
2.18.0

