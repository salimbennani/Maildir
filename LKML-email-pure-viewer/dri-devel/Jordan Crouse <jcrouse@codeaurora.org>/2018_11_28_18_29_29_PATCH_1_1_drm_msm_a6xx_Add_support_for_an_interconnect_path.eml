Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 29 Nov 2018 08:39:50 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 34C215803ED;
	Wed, 28 Nov 2018 10:32:44 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 28 Nov 2018 10:32:43 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3APtCDGByM0ogDdHrXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e4XKfad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7S60/Vza/4KdxUBLmiD?=
 =?us-ascii?q?kJOSM3/m/UjcJ/jqxboAm5pxF92IPYfJ2ZOeBicq7HYd8WWWxMVdtRWSxbBYO8?=
 =?us-ascii?q?apMCAe4GPeZCsobyvV0OpgagCAm2A+Pv1yRIiWHr1qA90eQuDRvG3As9H9IVrn?=
 =?us-ascii?q?vZt8n6NKAPXu+r1qbI0C/Db/RM2Tjn8oTIdQohof6VUL92bMHfylEvGhvbglmM?=
 =?us-ascii?q?rYHpJS6Z2+oTv2SB8uZtVv6jh3QmpgxzujSj28Mhh43Tio4I1lzJ9D91zJspKd?=
 =?us-ascii?q?C2UkJ3f96pHZRWuiqHLYV5WNkiTHttuCsiyr0Jp5q7fC8SxZQ5yB7QdeaHf5KL?=
 =?us-ascii?q?4h39TuaRJyl3hHZ/dLK4nRay/lCsyuz6VsaqzFZHtjRJnsXIu3wXyhDe5NaLRu?=
 =?us-ascii?q?Fg8kqixTqDzQHe5+NcLUAxj6XbKpohwrAqlpoUtETOBiv2mETwjK+LeUQo4+uo?=
 =?us-ascii?q?5Pr9YrXguJCcM5Z4igbwM6QohMO/G/81MhYBX2eF4+Swzr7j8lPjQLVMkPI2lr?=
 =?us-ascii?q?PVsJfAJcQUvqK5GRNa0p4/6xajCDeryNAYnXgELF1bYh6GgJXpNkrKIPD5C/e/?=
 =?us-ascii?q?nlutnC1qx/DAIr3uHJHNImLfn7fmeLZ381RcxxYrzdBD+5JUDakMIPLpVU/wqN?=
 =?us-ascii?q?zXFBg5Pxa0w+b6Etp90IweVHmLAq+YNqPSrFCJ6vguI+mKeI8apjL9J+I56P7p?=
 =?us-ascii?q?iH8zgUUdcrWx3ZsLdHC4GexrI0eeYXXymNsBEmAKvgw4TOztk1CCVT9TZ3CvX6?=
 =?us-ascii?q?Mz/D07CYSmDZvdSYCpmrCOwCC7HphObGBcFl+MCWvod5mDW/oUci2SOc9hkjsH?=
 =?us-ascii?q?VbS7UY8uzxOuuRT+y7pmKOrU5yIZuYji1Nhz++3cixUy+SZoAMSa1mGHV3t0kX?=
 =?us-ascii?q?8QRz8qwKB/plRwylSZ3qh+mfBYEd1T6OlPUgc1LpPcy+16C9bvWgPOZNuJSVCm?=
 =?us-ascii?q?Qsm4DjE1VN4+39gOY0NlEdW4kh/DxzaqA6MSl7GTGZM76Lzc0GbrK8Z90XnG0r?=
 =?us-ascii?q?IhgEcgQsdIMW2mhat/9wzICo7NkkWZkbuqdKsG0C7M8meD0XSBvEVCXAFsVqXF?=
 =?us-ascii?q?WGgVZlHKotTh+kPCU7iuBKw6PQRb186NNLFGat3zglVAX/fsJtLebnm1m2exAx?=
 =?us-ascii?q?aI27yNYJDre2UbwCXSFkwEnxoP8naBMAg0Hj2hrH7GDDxyCVLvZFvh8fV/qHO+?=
 =?us-ascii?q?SU800wGKbk1727qp4BIVguacS/cS3rICtycssDF0HFe739LLBNuMvQthfKNAYd?=
 =?us-ascii?q?wj5FdLz37Wtwt4Ppa4NaBtmkYecxhrv0Ppzxh4EIFAntYlrXw0zAt+M7mX0E5c?=
 =?us-ascii?q?eDyC25DwObrXKnfp8RCraq7W3Eze0dmM9qcO7vQ4t0vsvAWzGkU+9HVn1sFf02?=
 =?us-ascii?q?GA6ZXSEAoSTZXxX1439hhnvb3VfjMx5oLU1XJ2N6m0vSTP29YoBOsj1xahcM1T?=
 =?us-ascii?q?MKKCFA/uDcIaA9KiJ/Atm1isdhgEJvxd9LYoP8O6cPuLwLSrPOd8kz28l2RI/Y?=
 =?us-ascii?q?d93liK9yViUO7I3o8JzO2C0QuDSjjzkk2hssfxmY1fYTESH2y/yTXrBYJLZ61y?=
 =?us-ascii?q?e5oLBnmqI8Gt2tp+gJvtUWZC9FG/H1MGxNOpeR2KYl393A1cz0QWrWa8mSulyT?=
 =?us-ascii?q?x5iDUprquZ3CzTzOXubhsHOmhXRGZ8iVfgO5S7j9cfXEKwdQgmiAOl5Vrmx6hc?=
 =?us-ascii?q?vKl/LXPcQV1Lfyj1KGFuSLCwuaCBY85M6ZMotztYUOKnbFCeS779pQYa0iz5E2?=
 =?us-ascii?q?tfwjA7ay+lupHjkxNmj2KdKW55rGDFdsFo2Rff+NvcSOZR3zUcQyl0kzvXBlm6?=
 =?us-ascii?q?P9Sy+dWUlpHDsv2xVm67V51TdzXrwp2EtCeh+WJqBhi/leipmtL7CQg6zTP719?=
 =?us-ascii?q?5yWCXLthn8Y5Pn16SnMe19eEloC0Tx6857GoF4j4sxi4sc2XkchpWJ43UHlX3/?=
 =?us-ascii?q?Pslc2aL7dHANXyIEw8bJ4Aj5301uNneJx4P6VnqH2Mdgace1YngK2i0j9cBFE7?=
 =?us-ascii?q?mb7KZLnSZuplq4rATRYeVynzsHyPsu7mIajP8NuAY30iqdBbUSF1FCPSPwjxSI?=
 =?us-ascii?q?88y+rKJPaWazdriw0VBynNG7A7GEvwFcQ235epY5EC9078V/Nk/M0XLp5oHlft?=
 =?us-ascii?q?nQccwcthmOnxjciOhVLYo7luAWiip/JWL9oXolxvYgghN02pG6uJWHJ39p/KKk?=
 =?us-ascii?q?GRNYMjz1Z8UO+jDil6pen8CW35yxEZVlADkEQJzoTfewGjIIqfvnLxqOECE7qn?=
 =?us-ascii?q?qDG7rQBwqf51l9r37VD5CnLXKXJGQazdV/QhmSPldfjRsQXDU7mJ45Cw+ryNbg?=
 =?us-ascii?q?cEd/+jAe+Fr4pgFQxeJvMhn1Sn3fqxuwajcoVJifKwJb7wFF50fIKMye8/h8Hy?=
 =?us-ascii?q?dC8p26qwyNLGObah9MDWEIXEyEGl/iMqOv5dnG7+iXGO6+I+HSbrWJrOxUT+2I?=
 =?us-ascii?q?yo630ot64zaMMd2CPnl8AP062UpDXnF5F97amzUVTCwXmDzCb9SGpBen4SB3qs?=
 =?us-ascii?q?G/8PL2WAPg/4ePCr1SMclx9BCym6uMK+mQhCNhIzZCypwM3WPIyKQY3FMKkS5u?=
 =?us-ascii?q?aiKiEa4eui/NVq7Qnq5XAgUfayNyMstI8q090hNMOc7dltP6yLp4guQpBFdCUF?=
 =?us-ascii?q?zrgtupatASI2GhKFPHA16GNKiHJT3O2c34fbmwRqFQjOpKsR29ojKbE07lPjSe?=
 =?us-ascii?q?mDjlTRGvMedQjC6FOBxSop2ychFoCWL7VtLpdgW7MMNrjT0x2bA1hmnFNWgZMT?=
 =?us-ascii?q?h9dUNCtryR7SNCjfV5FGxM9X5lLeiCmyaE4OjUMJcWsf13Aitqk+JW+mg1y7xQ?=
 =?us-ascii?q?7HIMePsglybVtNFv5V2km+qI1BJjURxHsDENg5iE7mt4PqCM1J5aVX/CtDkX6n?=
 =?us-ascii?q?iLBlxepdB/DcD0tohbzdTCnb/pLy1LtdXO8p1PVIDvNMubPS95YlLSEznOAV5d?=
 =?us-ascii?q?QA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AZAABI3v5bh0O0hNFkHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGCAIFrJ4wRX4spgiGXLoFzFBgTAYduIjQJDQEDAQEBAQEBAgETAQEBCA0?=
 =?us-ascii?q?JCCkjDII2IoJlAwMBAiQZAQE3AQUJAQFQAykrGQWDHIICBaYigWwzgnYBAQWHK?=
 =?us-ascii?q?wiHa4MPgRwXgUA/gRGCZIUGDQGFdpAdkAAJkSYjiViHPZhIgUaCDTMaCCgIgye?=
 =?us-ascii?q?CGwwXiF6FXyAygQUBAYpngkwBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AZAABI3v5bh0O0hNFkHQEBBQEHBQGBUQgBCwGCAIFrJ4w?=
 =?us-ascii?q?RX4spgiGXLoFzFBgTAYduIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2IoJlA?=
 =?us-ascii?q?wMBAiQZAQE3AQUJAQFQAykrGQWDHIICBaYigWwzgnYBAQWHKwiHa4MPgRwXgUA?=
 =?us-ascii?q?/gRGCZIUGDQGFdpAdkAAJkSYjiViHPZhIgUaCDTMaCCgIgyeCGwwXiF6FXyAyg?=
 =?us-ascii?q?QUBAYpngkwBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,291,1539673200"; 
   d="scan'208";a="54109059"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 28 Nov 2018 10:32:42 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727805AbeK2FcL (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 29 Nov 2018 00:32:11 -0500
Received: from smtp.codeaurora.org ([198.145.29.96]:52952 "EHLO
        smtp.codeaurora.org" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725779AbeK2FcJ (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 29 Nov 2018 00:32:09 -0500
Received: by smtp.codeaurora.org (Postfix, from userid 1000)
        id C6D0660B11; Wed, 28 Nov 2018 18:29:35 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=codeaurora.org;
        s=default; t=1543429775;
        bh=LS8lLOxG5EVr0vseojn5J/B7cuX070la6g3XCeaX5TA=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=iNdWF4QuCTPQDaoYUyj1IJvXw2CA/LhdOZ1Vx6MZLtYIvCmjVUkjqCc3oW0G9C/AA
         Ly2Gtpcj0Y1ActxzIGs7LwWDXN8tbRFXlpI5ODAaQRaDECE9AGX2xEfJgw01Nj1rKS
         RSHXKyAgUdxypvE9/ClaUR3YFIA7Xa+x2k+YfN1w=
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
        pdx-caf-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-2.7 required=2.0 tests=ALL_TRUSTED,BAYES_00,
        DKIM_INVALID,DKIM_SIGNED autolearn=no autolearn_force=no version=3.4.0
Received: from jcrouse-lnx.qualcomm.com (i-global254.qualcomm.com [199.106.103.254])
        (using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
        (No client certificate requested)
        (Authenticated sender: jcrouse@smtp.codeaurora.org)
        by smtp.codeaurora.org (Postfix) with ESMTPSA id CF66B60312;
        Wed, 28 Nov 2018 18:29:34 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=codeaurora.org;
        s=default; t=1543429775;
        bh=LS8lLOxG5EVr0vseojn5J/B7cuX070la6g3XCeaX5TA=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=iNdWF4QuCTPQDaoYUyj1IJvXw2CA/LhdOZ1Vx6MZLtYIvCmjVUkjqCc3oW0G9C/AA
         Ly2Gtpcj0Y1ActxzIGs7LwWDXN8tbRFXlpI5ODAaQRaDECE9AGX2xEfJgw01Nj1rKS
         RSHXKyAgUdxypvE9/ClaUR3YFIA7Xa+x2k+YfN1w=
DMARC-Filter: OpenDMARC Filter v1.3.2 smtp.codeaurora.org CF66B60312
Authentication-Results: pdx-caf-mail.web.codeaurora.org; dmarc=none (p=none dis=none) header.from=codeaurora.org
Authentication-Results: pdx-caf-mail.web.codeaurora.org; spf=none smtp.mailfrom=jcrouse@codeaurora.org
From: Jordan Crouse <jcrouse@codeaurora.org>
To: georgi.djakov@linaro.org
Cc: linux-kernel@vger.kernel.org, linux-arm-kernel@lists.infradead.org,
        linux-arm-msm@vger.kernel.org, dri-devel@lists.freedesktop.org,
        freedreno@lists.freedesktop.org
Subject: [PATCH 1/1] drm/msm/a6xx: Add support for an interconnect path
Date: Wed, 28 Nov 2018 11:29:29 -0700
Message-Id: <20181128182929.19925-2-jcrouse@codeaurora.org>
X-Mailer: git-send-email 2.18.0
In-Reply-To: <20181128182929.19925-1-jcrouse@codeaurora.org>
References: <20181128182929.19925-1-jcrouse@codeaurora.org>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Try to get the interconnect path for the GPU and vote for the maximum
bandwidth to support all frequencies. This is needed for performance.
Later we will want to scale the bandwidth based on the frequency to
also optimize for power but that will require some device tree
infrastructure that does not yet exist.

Signed-off-by: Jordan Crouse <jcrouse@codeaurora.org>
---
 drivers/gpu/drm/msm/adreno/a6xx_gmu.c   | 20 ++++++++++++++++++++
 drivers/gpu/drm/msm/adreno/adreno_gpu.c |  9 +++++++++
 drivers/gpu/drm/msm/msm_gpu.h           |  3 +++
 3 files changed, 32 insertions(+)

diff --git a/drivers/gpu/drm/msm/adreno/a6xx_gmu.c b/drivers/gpu/drm/msm/adreno/a6xx_gmu.c
index 546599a7ab05..b96ae2ab04bb 100644
--- a/drivers/gpu/drm/msm/adreno/a6xx_gmu.c
+++ b/drivers/gpu/drm/msm/adreno/a6xx_gmu.c
@@ -3,6 +3,7 @@
 
 #include <linux/clk.h>
 #include <linux/pm_opp.h>
+#include <linux/interconnect.h>
 #include <soc/qcom/cmd-db.h>
 
 #include "a6xx_gpu.h"
@@ -63,6 +64,9 @@ static bool a6xx_gmu_gx_is_on(struct a6xx_gmu *gmu)
 
 static void __a6xx_gmu_set_freq(struct a6xx_gmu *gmu, int index)
 {
+	struct a6xx_gpu *a6xx_gpu = container_of(gmu, struct a6xx_gpu, gmu);
+	struct adreno_gpu *adreno_gpu = &a6xx_gpu->base;
+	struct msm_gpu *gpu = &adreno_gpu->base;
 	int ret;
 
 	gmu_write(gmu, REG_A6XX_GMU_DCVS_ACK_OPTION, 0);
@@ -85,6 +89,12 @@ static void __a6xx_gmu_set_freq(struct a6xx_gmu *gmu, int index)
 		dev_err(gmu->dev, "GMU set GPU frequency error: %d\n", ret);
 
 	gmu->freq = gmu->gpu_freqs[index];
+
+	/*
+	 * Eventually we will want to scale the path vote with the frequency but
+	 * for now leave it t at max so that the performance is nominal.
+	 */
+	icc_set(gpu->icc_path, 0, 7216000000);
 }
 
 void a6xx_gmu_set_freq(struct msm_gpu *gpu, unsigned long freq)
@@ -680,6 +690,8 @@ int a6xx_gmu_reset(struct a6xx_gpu *a6xx_gpu)
 
 int a6xx_gmu_resume(struct a6xx_gpu *a6xx_gpu)
 {
+	struct adreno_gpu *adreno_gpu = &a6xx_gpu->base;
+	struct msm_gpu *gpu = &adreno_gpu->base;
 	struct a6xx_gmu *gmu = &a6xx_gpu->gmu;
 	int status, ret;
 
@@ -695,6 +707,9 @@ int a6xx_gmu_resume(struct a6xx_gpu *a6xx_gpu)
 	if (ret)
 		goto out;
 
+	/* Set the bus quota to a reasonable value for boot */
+	icc_set(gpu->icc_path, 0, 3072000000);
+
 	a6xx_gmu_irq_enable(gmu);
 
 	/* Check to see if we are doing a cold or warm boot */
@@ -735,6 +750,8 @@ bool a6xx_gmu_isidle(struct a6xx_gmu *gmu)
 
 int a6xx_gmu_stop(struct a6xx_gpu *a6xx_gpu)
 {
+	struct adreno_gpu *adreno_gpu = &a6xx_gpu->base;
+	struct msm_gpu *gpu = &adreno_gpu->base;
 	struct a6xx_gmu *gmu = &a6xx_gpu->gmu;
 	u32 val;
 
@@ -781,6 +798,9 @@ int a6xx_gmu_stop(struct a6xx_gpu *a6xx_gpu)
 	/* Tell RPMh to power off the GPU */
 	a6xx_rpmh_stop(gmu);
 
+	/* Remove the bus vote */
+	icc_set(gpu->icc_path, 0, 0);
+
 	clk_bulk_disable_unprepare(gmu->nr_clocks, gmu->clocks);
 
 	pm_runtime_put_sync(gmu->dev);
diff --git a/drivers/gpu/drm/msm/adreno/adreno_gpu.c b/drivers/gpu/drm/msm/adreno/adreno_gpu.c
index 93d70f4a2154..9bab491912cf 100644
--- a/drivers/gpu/drm/msm/adreno/adreno_gpu.c
+++ b/drivers/gpu/drm/msm/adreno/adreno_gpu.c
@@ -21,6 +21,7 @@
 #include <linux/kernel.h>
 #include <linux/pm_opp.h>
 #include <linux/slab.h>
+#include <linux/interconnect.h>
 #include "adreno_gpu.h"
 #include "msm_gem.h"
 #include "msm_mmu.h"
@@ -695,6 +696,11 @@ static int adreno_get_pwrlevels(struct device *dev,
 
 	DBG("fast_rate=%u, slow_rate=27000000", gpu->fast_rate);
 
+	/* Check for an interconnect path for the bus */
+	gpu->icc_path = of_icc_get(dev, "port0");
+	if (IS_ERR(gpu->icc_path))
+		gpu->icc_path = NULL;
+
 	return 0;
 }
 
@@ -733,10 +739,13 @@ int adreno_gpu_init(struct drm_device *drm, struct platform_device *pdev,
 
 void adreno_gpu_cleanup(struct adreno_gpu *adreno_gpu)
 {
+	struct msm_gpu *gpu = &adreno_gpu->base;
 	unsigned int i;
 
 	for (i = 0; i < ARRAY_SIZE(adreno_gpu->info->fw); i++)
 		release_firmware(adreno_gpu->fw[i]);
 
+	icc_put(gpu->icc_path);
+
 	msm_gpu_cleanup(&adreno_gpu->base);
 }
diff --git a/drivers/gpu/drm/msm/msm_gpu.h b/drivers/gpu/drm/msm/msm_gpu.h
index f82bac086666..7b04d1665555 100644
--- a/drivers/gpu/drm/msm/msm_gpu.h
+++ b/drivers/gpu/drm/msm/msm_gpu.h
@@ -20,6 +20,7 @@
 
 #include <linux/clk.h>
 #include <linux/regulator/consumer.h>
+#include <linux/interconnect.h>
 
 #include "msm_drv.h"
 #include "msm_fence.h"
@@ -119,6 +120,8 @@ struct msm_gpu {
 	struct clk *ebi1_clk, *core_clk, *rbbmtimer_clk;
 	uint32_t fast_rate;
 
+	struct icc_path *icc_path;
+
 	/* Hang and Inactivity Detection:
 	 */
 #define DRM_MSM_INACTIVE_PERIOD   66 /* in ms (roughly four frames) */
-- 
2.18.0

