Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  15 Dec 2018 13:06:31 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 9BBDD58061F;
	Fri, 14 Dec 2018 07:32:33 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 14 Dec 2018 07:32:32 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AcLQhdxQtf+tDYpm2ZrhUtJUy49psv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64YBOBt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZDI2y?=
 =?us-ascii?q?b5UBAfcCM+ZWoIbyu0YBohmwCgm3HOPiyCRFhmPq0aAgz+gtDRvL0BImEtkTsH?=
 =?us-ascii?q?rUttL1NKIKXO6xy6nI1yjMYOlQ2Tzg9oXIaBchoeyXXb1ubMHczksvGB/fjlWX?=
 =?us-ascii?q?tIzlJC2a2/8RvGic8uVvS/igi3M9qwF2uDig3N0gio7ThoIa013J8zhyzoUtJd?=
 =?us-ascii?q?CgVkJ3fdqpHIFNuyyUKYd6WN4uTmJ0tCogy7ALu4a3cDUOxZkj3RLTduCLfomS?=
 =?us-ascii?q?7h7+SOqcLy10iGxldb+wgRu57FKuxffmVsau1VZHtipFncfItnAKzxHT9MeHRe?=
 =?us-ascii?q?Vn/ku72jaAyRrT6udaLkAwj6bbLIQhwrEompoSt0TMADP2lV3ogKOKckgo4PWk?=
 =?us-ascii?q?5ur5brn8u5ORNJN4hhv/P6ksgsC/BP43MgkKX2iV4+S807jj8FX9QLVLiP02j6?=
 =?us-ascii?q?bYvInZJcsFvK65BRFa0oI65xa4ATam1soXnWMcIVJbdxKIkZLpN0vNIP/mF/e/?=
 =?us-ascii?q?hUqjkDNxy/DBJL3hDY3BLmLfn7f5YbZ990lcxRI3zdBe5JJbFKsNIf3uWkLqsN?=
 =?us-ascii?q?zYDxk5MxG7wur9CdV90J8eVnyLAqODLKzStlqI7Po1I+aQfI8VpCr9K/896v7u?=
 =?us-ascii?q?l3A5mEMdcrOu3ZcNaHC4A+5pI0OWYXf3htcBEGEKvhcxTeDwiV2CVyJTaGi2X6?=
 =?us-ascii?q?4m+j47D4emB5/ZRo+xmLyBwDu7HppOa2BEDVCDD23kd4aDW/cKbiKSJdRskjgF?=
 =?us-ascii?q?VbinVo8g2guitA78y7p7MOXU/jcUuo7k1Nhw/+fTjw099SRoD8SB1GGAV3t7nn?=
 =?us-ascii?q?gIRz8x36Bzu1Z9xU2B0aVjh/xYFNpT5+5GUwsgNJ7cyfB6BM72Wg7bYtiJT1Om?=
 =?us-ascii?q?SM28AT4tVtIx38MOY0FlFtWhlB/D2TCmA7sUl7ORApw0/bnR33zwJ8Z71nbH27?=
 =?us-ascii?q?Mtj1ggQstTK2KmgrRz+BTUB47Mi0+ZjbqldbwA3C7R82eO1XeBs1tGUAFuS6nF?=
 =?us-ascii?q?XWoQZk3Nrdvn4EPOSLuuCbciMgtF0sOCLqpKatv0jVRJXvvjOdLeY36vlGe0Hx?=
 =?us-ascii?q?qH2rSMbI/ycWUHwCrdEFQEkxwU/XueKAcxHDmhrHzEADxuD13vZVjs/vd4qH6g?=
 =?us-ascii?q?Sk80zgeKb1Bu1rav+x4Vg+CcRO0X3r4epCghrDB0Fk6n393KE9qAuxZhfKJEbN?=
 =?us-ascii?q?Mh4VdH0GXZtxB9Pp2gNaximkQScwNtv0Pq1hV3DIpAnNMurHMrygpyNK2Z3ElA?=
 =?us-ascii?q?dzOewZD/JLnXJnPu8xCobq7cwkve38qO+qcT9PQ4rE3usxutFkU8/HRozdlU32?=
 =?us-ascii?q?GH6ZXXEQUdS5TxUkUw9xhkvLzaZig954XJ1XxjK6W0sznC2843C+sh0BqvY9Bf?=
 =?us-ascii?q?MKacHg/oD8IaH9SuKPAtm1WxbhMEIfpe+7IuM8Knd/uJwqirPOl7kTKijGRH5p?=
 =?us-ascii?q?19002W+yp9TO7Iw4gKw/WC0gSbUDf8iU+rstrrloBceTESAm2/xDD+BI5QeqJ9?=
 =?us-ascii?q?Z5wLBnqpI8GtwNVxmYTtW39B+FG/HVwG3NKmdgSIb1z62w1dzkAXoX2hmSulwD?=
 =?us-ascii?q?14iTAprqyD3CPQx+TubgYIOmlORGN6l1fjPZC0j8wGXEivdwUolBql6Vz6xqRB?=
 =?us-ascii?q?v6R/Mm/TTFxMfyj3KWFiT6SxuqCDY85J9JMnryFXXP6gblCdT773uwEa3D/7H2?=
 =?us-ascii?q?tC2DA7cCmnupfjkBxgi2KdL3FzoGDCec5qxhff593cRfhP0ToAXyR4jTjXBl6h?=
 =?us-ascii?q?P9im59mUlpHDsvygWGKlTJFcbS7rzYaYviuh+WJqGQG/n+y0mtD/EQk1yyj728?=
 =?us-ascii?q?NoVSXJqhbxeY3r16W8MeJ6cUhkHl7868xmGo5glos8no0f2X8fhp+N53oIjX/z?=
 =?us-ascii?q?MclH2aL5dHcNRiQEw9/P7AjlxU1sNHSJx43iW3WZw8thYcS6Y2wM1iI86cBKFL?=
 =?us-ascii?q?mb7LhekSRppVq4qBrbYeJhkTcF1fsu9HkajvkMuAoszSWSGKoeHEdGMiz3ixSH?=
 =?us-ascii?q?8cq+o75Ja2a1fri9z05+ndGnDLGfrQBQQnf5epE+HSBu6sVzKk7D0Hr26ov8Yt?=
 =?us-ascii?q?nfccoTtgGIkxfHl+VVNJUxlv8QiStmI239u2Aly/UgjRxvxpy6uImHK2Nw/KO2?=
 =?us-ascii?q?GBJYNzv1Z98N9THpl6pRgsGW34W3FJV7BjoLRIfoTe6vED8KrvvoLQGOEDkhqn?=
 =?us-ascii?q?uBHbrfABSS6ENnr3LJDpCqOGubJHgfzdV+WhadIFZTjxwTXDU/hpQ5DBylxNT9?=
 =?us-ascii?q?cEdl4TAc/lz4pQFJyu12LBnzSHvfqB2rajcpS5ifMRxW4RtZ50rONcye7+RzHz?=
 =?us-ascii?q?xX/5G7rQyNLHCbaBpMDW0TRkOEAFXjNKG05dbc6+iYGva+L/zWbLSOruxeSu6I?=
 =?us-ascii?q?xY+13Ytg5TqMLcKPPn9tD/Ag3kpDXHZ5G9nWmjkVSiwXkT7NYNCfpBum5iJ3qc?=
 =?us-ascii?q?W/+uzxWA3z/YuPF6dSMdJ39hC2n6iDNu2QhCV4KTpC1ZMM33jIyLcB014IliFu?=
 =?us-ascii?q?bCKgEbABtS7LUaLRlbVbDx8dayNvKsRI67gw0RVKOc7ektn1zKJ3juYpC1dZUl?=
 =?us-ascii?q?zsgtumZdERLGGnKlzGBFyHNLCHJTDQx8H3YKW8SaBfjelOth2wvyqbHFHnPjiZ?=
 =?us-ascii?q?izbpUBWvO/lWjC6HJBxepJ29chF1BGj/TdLmbwe3P8NtgTIqwb07mHXKOHUYMT?=
 =?us-ascii?q?h9dUNNs7KR4TlZgvV5B2xO8H5lIfOYlCae6unSMowWvudzAiRoi+Ja52w3yrtP?=
 =?us-ascii?q?4yFCQfx1mS3SocZvolGmiOaPzDVnXQFKqjZKgoKLoEpjNb/Y9plGRXbL4hYN4X?=
 =?us-ascii?q?+MBBQNots2QuHo7oJZ29HJiOrIKDpB89vOtZ8eHMjZK8KOKlIqNhbkESPOCxEM?=
 =?us-ascii?q?CzmxOjeMqVZalaSw8WeZp55ygYLrhYEDAutZX0YyC+gXIk9iENELPY1wRDpilq?=
 =?us-ascii?q?SU2p1brUGipQXcEZ0J9qvMUeifVLC2cG6U?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ACAACHzBNch0O0hNFlGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUgQBAQEBCwGCAIFrFBOMdI0mFJdDgXMUGBMBh0ciNQgNAQMBAQE?=
 =?us-ascii?q?BAQECARMBAQEIDQkIKSMMgjYkAYJhAQEBAQIBAQIkEwYBATcBBAEJAQEKDgoJJ?=
 =?us-ascii?q?QMMBRgxEwWDHIF5CAWkb4FsM4J2AQEFhycIiyKBHBeBQD+BEYMSiDiCJolABIc?=
 =?us-ascii?q?Ij3gPRwmRTyOJc4dfmWGBSAOCCTMaCCgIgyeCGwwXiF6FXyAygQUBAY03AQE?=
X-IPAS-Result: =?us-ascii?q?A0ACAACHzBNch0O0hNFlGgEBAQEBAgEBAQEHAgEBAQGBUgQ?=
 =?us-ascii?q?BAQEBCwGCAIFrFBOMdI0mFJdDgXMUGBMBh0ciNQgNAQMBAQEBAQECARMBAQEID?=
 =?us-ascii?q?QkIKSMMgjYkAYJhAQEBAQIBAQIkEwYBATcBBAEJAQEKDgoJJQMMBRgxEwWDHIF?=
 =?us-ascii?q?5CAWkb4FsM4J2AQEFhycIiyKBHBeBQD+BEYMSiDiCJolABIcIj3gPRwmRTyOJc?=
 =?us-ascii?q?4dfmWGBSAOCCTMaCCgIgyeCGwwXiF6FXyAygQUBAY03AQE?=
X-IronPort-AV: E=Sophos;i="5.56,353,1539673200"; 
   d="scan'208";a="44995118"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 14 Dec 2018 07:32:30 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728829AbeLNPcW (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 14 Dec 2018 10:32:22 -0500
Received: from smtp.codeaurora.org ([198.145.29.96]:35294 "EHLO
        smtp.codeaurora.org" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726494AbeLNPcW (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 14 Dec 2018 10:32:22 -0500
Received: by smtp.codeaurora.org (Postfix, from userid 1000)
        id 213F760779; Fri, 14 Dec 2018 15:32:21 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=codeaurora.org;
        s=default; t=1544801541;
        bh=OZBZ4pBR/w/wahCbosI0e4qsADs4/Qs3UYYjaMumFU0=;
        h=Date:From:To:Cc:Subject:References:In-Reply-To:From;
        b=enAhfLxQOt0aACbLYAbLqr2ywwRNO6qveshc04ON92bZNSztjFa64LimpVZGWCPuz
         50OQ2h+qmaJ3Nuu+myCjmPnwdUcYTpkDyh1VDKmaXWJxgnAWBGc3HTl2yOzKUJ71lO
         93w78tTdXK7SPRSmCXJK0JYO+N0numYJOHYIylao=
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
        pdx-caf-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-2.7 required=2.0 tests=ALL_TRUSTED,BAYES_00,
        DKIM_INVALID,DKIM_SIGNED autolearn=no autolearn_force=no version=3.4.0
Received: from jcrouse-lnx.qualcomm.com (i-global254.qualcomm.com [199.106.103.254])
        (using TLSv1.2 with cipher DHE-RSA-AES128-SHA (128/128 bits))
        (No client certificate requested)
        (Authenticated sender: jcrouse@smtp.codeaurora.org)
        by smtp.codeaurora.org (Postfix) with ESMTPSA id 53FC06071B;
        Fri, 14 Dec 2018 15:32:19 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=codeaurora.org;
        s=default; t=1544801540;
        bh=OZBZ4pBR/w/wahCbosI0e4qsADs4/Qs3UYYjaMumFU0=;
        h=Date:From:To:Cc:Subject:References:In-Reply-To:From;
        b=LQ2h2gPokG2f8TkcRzH8KTMh6/aK1EzygHhcFfbZiyyRuRZaPqSFGfNKSwpfHvo/z
         EoyKWFzbPW5JYxGYFjkpGZ8OeDRSQG4OwRnvwFNFd3b80ZAg9ig0sj+cDdLWyCmdNy
         bvpPW2BKHY8H3ZIEgACRlc9+bmGNhNCjDLSjyjsQ=
DMARC-Filter: OpenDMARC Filter v1.3.2 smtp.codeaurora.org 53FC06071B
Authentication-Results: pdx-caf-mail.web.codeaurora.org; dmarc=none (p=none dis=none) header.from=codeaurora.org
Authentication-Results: pdx-caf-mail.web.codeaurora.org; spf=none smtp.mailfrom=jcrouse@codeaurora.org
Date: Fri, 14 Dec 2018 08:32:17 -0700
From: Jordan Crouse <jcrouse@codeaurora.org>
To: Jayant Shekhar <jshekhar@codeaurora.org>
Cc: dri-devel@lists.freedesktop.org, linux-arm-msm@vger.kernel.org,
        freedreno@lists.freedesktop.org, devicetree@vger.kernel.org,
        linux-kernel@vger.kernel.org, abhinavk@codeaurora.org,
        robdclark@gmail.com, nganji@codeaurora.org, seanpaul@chromium.org,
        hoegsberg@chromium.org, jsanka@codeaurora.org,
        chandanu@codeaurora.org
Subject: Re: [Freedreno] [DPU PATCH] drm/msm/dpu: Clean up dpu hw interrupts
Message-ID: <20181214153217.GC29770@jcrouse-lnx.qualcomm.com>
Mail-Followup-To: Jayant Shekhar <jshekhar@codeaurora.org>,
        dri-devel@lists.freedesktop.org, linux-arm-msm@vger.kernel.org,
        freedreno@lists.freedesktop.org, devicetree@vger.kernel.org,
        linux-kernel@vger.kernel.org, abhinavk@codeaurora.org,
        robdclark@gmail.com, nganji@codeaurora.org, seanpaul@chromium.org,
        hoegsberg@chromium.org, jsanka@codeaurora.org,
        chandanu@codeaurora.org
References: <1544777352-11455-1-git-send-email-jshekhar@codeaurora.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <1544777352-11455-1-git-send-email-jshekhar@codeaurora.org>
User-Agent: Mutt/1.5.21 (2010-09-15)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Fri, Dec 14, 2018 at 02:19:12PM +0530, Jayant Shekhar wrote:
> Remove unused functions and macros from dpu hw interrupts
> file.
> 
> Signed-off-by: Jayant Shekhar <jshekhar@codeaurora.org>
> ---
>  drivers/gpu/drm/msm/disp/dpu1/dpu_hw_interrupts.c | 30 --------------------
>  drivers/gpu/drm/msm/disp/dpu1/dpu_hw_interrupts.h | 34 -----------------------
>  2 files changed, 64 deletions(-)
> 
> diff --git a/drivers/gpu/drm/msm/disp/dpu1/dpu_hw_interrupts.c b/drivers/gpu/drm/msm/disp/dpu1/dpu_hw_interrupts.c
> index c0b7f00..0f70cee 100644
> --- a/drivers/gpu/drm/msm/disp/dpu1/dpu_hw_interrupts.c
> +++ b/drivers/gpu/drm/msm/disp/dpu1/dpu_hw_interrupts.c
> @@ -170,10 +170,6 @@
>  /**
>   * AD4 interrupt status bit definitions
>   */
> -#define DPU_INTR_BRIGHTPR_UPDATED BIT(4)
> -#define DPU_INTR_DARKENH_UPDATED BIT(3)
> -#define DPU_INTR_STREN_OUTROI_UPDATED BIT(2)
> -#define DPU_INTR_STREN_INROI_UPDATED BIT(1)
>  #define DPU_INTR_BACKLIGHT_UPDATED BIT(0)
>  /**
>   * struct dpu_intr_reg - array of DPU register sets
> @@ -782,18 +778,6 @@ static int dpu_hw_intr_irqidx_lookup(enum dpu_intr_type intr_type,
>  	return -EINVAL;
>  }
>  
> -static void dpu_hw_intr_set_mask(struct dpu_hw_intr *intr, uint32_t reg_off,
> -		uint32_t mask)
> -{
> -	if (!intr)
> -		return;
> -
> -	DPU_REG_WRITE(&intr->hw, reg_off, mask);
> -
> -	/* ensure register writes go through */
> -	wmb();
> -}
> -
>  static void dpu_hw_intr_dispatch_irq(struct dpu_hw_intr *intr,
>  		void (*cbfunc)(void *, int),
>  		void *arg)
> @@ -1004,18 +988,6 @@ static int dpu_hw_intr_disable_irqs(struct dpu_hw_intr *intr)
>  	return 0;
>  }
>  
> -static int dpu_hw_intr_get_valid_interrupts(struct dpu_hw_intr *intr,
> -		uint32_t *mask)
> -{
> -	if (!intr || !mask)
> -		return -EINVAL;
> -
> -	*mask = IRQ_SOURCE_MDP | IRQ_SOURCE_DSI0 | IRQ_SOURCE_DSI1
> -		| IRQ_SOURCE_HDMI | IRQ_SOURCE_EDP;
> -
> -	return 0;
> -}
> -
>  static void dpu_hw_intr_get_interrupt_statuses(struct dpu_hw_intr *intr)
>  {
>  	int i;
> @@ -1113,14 +1085,12 @@ static u32 dpu_hw_intr_get_interrupt_status(struct dpu_hw_intr *intr,
>  
>  static void __setup_intr_ops(struct dpu_hw_intr_ops *ops)
>  {
> -	ops->set_mask = dpu_hw_intr_set_mask;
>  	ops->irq_idx_lookup = dpu_hw_intr_irqidx_lookup;
>  	ops->enable_irq = dpu_hw_intr_enable_irq;
>  	ops->disable_irq = dpu_hw_intr_disable_irq;
>  	ops->dispatch_irqs = dpu_hw_intr_dispatch_irq;
>  	ops->clear_all_irqs = dpu_hw_intr_clear_irqs;
>  	ops->disable_all_irqs = dpu_hw_intr_disable_irqs;
> -	ops->get_valid_interrupts = dpu_hw_intr_get_valid_interrupts;
>  	ops->get_interrupt_statuses = dpu_hw_intr_get_interrupt_statuses;
>  	ops->clear_interrupt_status = dpu_hw_intr_clear_interrupt_status;

I think you can zap clear_interrupt_status too.  Other than that, this looks
real good. Lots of nice negative lines.


>  	ops->clear_intr_status_nolock = dpu_hw_intr_clear_intr_status_nolock;
> diff --git a/drivers/gpu/drm/msm/disp/dpu1/dpu_hw_interrupts.h b/drivers/gpu/drm/msm/disp/dpu1/dpu_hw_interrupts.h
> index 61e4cba..985f873 100644
> --- a/drivers/gpu/drm/msm/disp/dpu1/dpu_hw_interrupts.h
> +++ b/drivers/gpu/drm/msm/disp/dpu1/dpu_hw_interrupts.h
> @@ -20,13 +20,6 @@
>  #include "dpu_hw_util.h"
>  #include "dpu_hw_mdss.h"
>  
> -#define IRQ_SOURCE_MDP		BIT(0)
> -#define IRQ_SOURCE_DSI0		BIT(4)
> -#define IRQ_SOURCE_DSI1		BIT(5)
> -#define IRQ_SOURCE_HDMI		BIT(8)
> -#define IRQ_SOURCE_EDP		BIT(12)
> -#define IRQ_SOURCE_MHL		BIT(16)
> -
>  /**
>   * dpu_intr_type - HW Interrupt Type
>   * @DPU_IRQ_TYPE_WB_ROT_COMP:		WB rotator done
> @@ -96,18 +89,6 @@ enum dpu_intr_type {
>   */
>  struct dpu_hw_intr_ops {
>  	/**
> -	 * set_mask - Programs the given interrupt register with the
> -	 *            given interrupt mask. Register value will get overwritten.
> -	 * @intr:	HW interrupt handle
> -	 * @reg_off:	MDSS HW register offset
> -	 * @irqmask:	IRQ mask value
> -	 */
> -	void (*set_mask)(
> -			struct dpu_hw_intr *intr,
> -			uint32_t reg,
> -			uint32_t irqmask);
> -
> -	/**
>  	 * irq_idx_lookup - Lookup IRQ index on the HW interrupt type
>  	 *                 Used for all irq related ops
>  	 * @intr_type:		Interrupt type defined in dpu_intr_type
> @@ -206,21 +187,6 @@ struct dpu_hw_intr_ops {
>  			struct dpu_hw_intr *intr,
>  			int irq_idx,
>  			bool clear);
> -
> -	/**
> -	 * get_valid_interrupts - Gets a mask of all valid interrupt sources
> -	 *                        within DPU. These are actually status bits
> -	 *                        within interrupt registers that specify the
> -	 *                        source of the interrupt in IRQs. For example,
> -	 *                        valid interrupt sources can be MDP, DSI,
> -	 *                        HDMI etc.
> -	 * @intr:	HW interrupt handle
> -	 * @mask:	Returning the interrupt source MASK
> -	 * @return:	0 for success, otherwise failure
> -	 */
> -	int (*get_valid_interrupts)(
> -			struct dpu_hw_intr *intr,
> -			uint32_t *mask);
>  };
>  
>  /**

-- 
The Qualcomm Innovation Center, Inc. is a member of Code Aurora Forum,
a Linux Foundation Collaborative Project
