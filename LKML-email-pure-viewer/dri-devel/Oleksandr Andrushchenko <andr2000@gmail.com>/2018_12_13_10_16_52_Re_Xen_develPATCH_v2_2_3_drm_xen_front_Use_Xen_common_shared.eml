Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 21:22:17 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga007.fm.intel.com (fmsmga007.fm.intel.com [10.253.24.52])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id CDF2C58079C;
	Thu, 13 Dec 2018 02:17:05 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by fmsmga007-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 13 Dec 2018 02:17:05 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AAuzTaxbmZ6Fb7fl3/Qt0L/3/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpciybB7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTzFPDIOi?=
 =?us-ascii?q?YYsBDOQPM+hXoIb/qFQSohW+HhGsCeH0xz9UhXL7x7E23/gvHAzE2gErAtIAsG?=
 =?us-ascii?q?7TrNXwLKocSOS1w7fLzTXYdfxW3yry6JLVeR09p/GDQKhwcdfKyUkvCwzFjkuf?=
 =?us-ascii?q?qYrmPzOSy+8AtHKU7+x9WuK1lWIrtx19riS0y8cjj4nGnIMVylTe+Splx4Y1IM?=
 =?us-ascii?q?S1RUhmatCnCJtdrz+WO5dyT884Xm1ltjg2xqcbtZO4YCQG0pUqyhzHZ/GEc4WE?=
 =?us-ascii?q?+AzvWPifLDtimn5pZLayiwys/US+zOD3S9O630xQriVfl9nBrnAN2ALX6siAUv?=
 =?us-ascii?q?Z94Eih1iiV1wzJ6eFLP1o0lazFJJ4l2LIwkYATsUvbEi/3nkX5krOWe1069uS0?=
 =?us-ascii?q?7+nreKjqq5GCO4Nulw3zMbgilta+DOk6KgQOWnKU+eW41L3t5035R7BKg+Uykq?=
 =?us-ascii?q?nYtpDaOMsaqre6AwBLyIYj7QiwDzO/3NQfk3gHKkxKeAicgoj3NFHBPur4Ae28?=
 =?us-ascii?q?g1uyijdrwe7JPrn7DpXKNHjDn6/tfaxh5E5E1Aoz0ddf6opQCrEAI/L8RFX9td?=
 =?us-ascii?q?PFDhIiNwy0wuDnCMhy148EWGKPBLOZP73WsVOS+u0vJOyMbpcPuDnhM/gl++Lu?=
 =?us-ascii?q?jXghlF8dZ6ap3IcXZ2q/Hvh8I0WZfGDjgtEOEWoRugo+TerqiECNUDJJZnayWb?=
 =?us-ascii?q?486S8/CI68EYjDQYWtiqSb3CinBp1WenxGCleUHHfqcIWLRe0AaCGVIs9nlDwE?=
 =?us-ascii?q?UqOsS4sg1RGoqQ/7xKBrLuvS+i0Eq53j0MJ56PHUlRE37TZ0FdiS03mRT2FomW?=
 =?us-ascii?q?MFXyU53Lt/oUx6yVePy7J4jOZaFdFI4/NJUwE6NYPTzuBgCtDyXB7BccmNSFq8?=
 =?us-ascii?q?XtqmBjQxRMorw9ASe0Z9B8mijhfb0iqpGbAVkaaHBJg18q3G2XjxKN1wy3LH1K?=
 =?us-ascii?q?knklknTdFDNWyghq5j6QfTA5TFnFmel6avba4cxjLC9H+fzWqSu0FVSBN/Xr/b?=
 =?us-ascii?q?XX8BfEfWrc725kXZT7CwD7QrNQ9Byc2HKqtOcdDpiVRGRPH+ONXReW6xmmGwBQ?=
 =?us-ascii?q?qWybOIdoblZ2Id3CDFAkgejw8T5WqGNRQ5Biq5vm3RFiJuGkz1b0Ps6+Z+rmi7?=
 =?us-ascii?q?QVEyzwyRa01h1ry1+gMahPCGSvMT2K4EtzklqzluAFm92NfWAcKapwV9ZKVcfc?=
 =?us-ascii?q?894FBf2GLFtgx9O5ugL7xihl8eaQh3o1ni1xJtCoVEkMgqqnwqwRF2KaKZ1lNB?=
 =?us-ascii?q?ajyZ0YrxOr3RNmn94hSvZ7TK1VHZ1dac4r0P5+ggq1X/oAGpEVIv/G9j09ZL3H?=
 =?us-ascii?q?qT+JXLABAJXpLsT0k47R56p7LdYikj/I7U0XxsMa+psj7Nwd4pBe0lygq+cNdb?=
 =?us-ascii?q?Kq+LCAjyE8gCDci0NOMqg0Spbg4DPO1K9K80ItmqeOec1K+qPOZvhjSmjWtc7Y?=
 =?us-ascii?q?B500KM8Td8S+HS05YExfGYwhWIVzPmgFi9tcD3nJhOZSsOEWqn1SjkGIlRa7Vo?=
 =?us-ascii?q?fYYKFWihOde3ych5h5L3XX5X6kSjB1If1MC1YxWSa0Hy0hNK1UQQp3yqgi+4zz?=
 =?us-ascii?q?1ykzE0oauTxi3Ow+L+dBUZPm5HXnVtjVDpIYKsldAVQFCobxQ1lBui/Uv7x6lb?=
 =?us-ascii?q?qL5/LmXJWkdIYi72InpmUquxsLqCfsFO5IkpsSVRTOSzf1SaRqThrBsd1iPpB3?=
 =?us-ascii?q?FeyywjdzG2ppX5mAR3iGCHI3Zpr3rZesZwyQ3E5NPGRv5R3TsGRC9mhjnRHVW8?=
 =?us-ascii?q?O9ip/dOJl5bMqOy+VmShVoFNfinv14+PqCy75WhyCx2lg/+zgsHnERQ90SLj19?=
 =?us-ascii?q?hlTyLIoAz+Yonq0aS3KuZnfkhuBF/h5Mt2AIB+ko0shJ4O3XgWnIma/X0CkW3r?=
 =?us-ascii?q?K9VUxbr+bGYRRT4M29PV4xLq2Ex5InKJ2oL2THOdwsR6atm+Y2MW3D897s9QBK?=
 =?us-ascii?q?eV6rxEgTV6ol6ioQ3NZvh9my8XyeEy534Cn+EJpA0twz2YArATHklXJzbglhqW?=
 =?us-ascii?q?4NClsKVYenyvfqOu20pkktCsF7WCogBaWHbkdZYuBy5w7sNjMF3S1H3/8J3reN?=
 =?us-ascii?q?7VbdgLrB2bjw/Aj/RJKJI2jvcKmS1nOWfnsXwk0eE7iwFu3YqhvIiGMGht+KO5?=
 =?us-ascii?q?AhhFNjz6fc8T+zftjbpAkcaSxYygApJhGjATVpvyUf2oCC4StejgNwuWCzIzsH?=
 =?us-ascii?q?CbGb7CHQOF7EdmsmnCE5SqN3GROXkYws9uRBibJExDng8UWC82kYI+FgCv3Mbh?=
 =?us-ascii?q?alt25igN5l7krRtB0uBoOAP6UmjBvwekcCs0RIKcLBpL7QFC+kHVPtaF7u9oGy?=
 =?us-ascii?q?FY/5uhrBGCK2CBZgRIC30JVVKAB1z5Irau4tzA+fCCBuWiN/vOfamOqetGWvaI?=
 =?us-ascii?q?wpKvz5Jm/yuWOcWJJHViFPo72kxMXX1iH8TZmjMPSzEYli7Xbs6bogu89TNzrs?=
 =?us-ascii?q?yl7PvrXwfv75OVC7ROKdVv5wy2gaCbOu6Qmil5KDVY1pANxXPSy7gfxlkSiy5w?=
 =?us-ascii?q?eDm3DLQArjXATKbRmq9REh4aZDl/NMpO76IgwAZNPdTXhc/y1r59lvQ1EUtKVU?=
 =?us-ascii?q?T9msG1YswHO3uyNE7cC0aRKruHJSfHw8X2Ya6nTb1QjeNUtwC/uDqBEk/jOCiD?=
 =?us-ascii?q?mCftVxy1Le5MiySbNgREuI6hahZtFXTjTNX+Zx2nMd93iCc6zqEuinzWNW4TLz?=
 =?us-ascii?q?58flhJrr2R6yNYn/p+F3ZA7npjMemLhSKZ4/PEJZYRtPthGj50mP5C4HQm17tV?=
 =?us-ascii?q?6zlJRfxvlyvUq95uolemnfGOyzpnShVOrDlLiZmPvUVjP6XZ65ZBVWzF/BIL8W?=
 =?us-ascii?q?WfFRAKq8F5Bd3ovqADguTIwY76LjZP95rq8NcACtKcfM6ONnssNVz3FSLIAREt?=
 =?us-ascii?q?QzC0MWWZjEwLw9+I8XjAiZw3qYPlnpYUApZdWEYoDfMRCkljH9tKdJ5xUil+ye?=
 =?us-ascii?q?bDpMEN7Hu66hLWQZMJ7dj8SvuODKC3e36ihr5eak5NmOugIA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AEAADRMBJch0O0hNFjGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGCXYEOJ4N8g3uEHoxiAQEGgQgIJRRoiAQhCGmNQhS?=
 =?us-ascii?q?BYw4BARgTAYRAgwMiNAkNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkAYJhAQEBA?=
 =?us-ascii?q?QMBAhcJBAsBBQgBGx0BAwIJAQEFAwILCgMCAiYCAgMgEQEFARwGDQYCAQEBgxy?=
 =?us-ascii?q?BaAEDCA0EAYsEkAc8iw18FgUBF4J3BYRGChknDV1QZwIGEnmKFYEcgQ+BB4ERJ?=
 =?us-ascii?q?wyCKjWERjuDBIJXAoEqAQEBiAgGBIdXj3gBBgIBgVYFj3gGGIFchRyCdBAmhyi?=
 =?us-ascii?q?WV4JLAgQCBAUCBQ8hgSWCDnBQMW2BToIbDBcSgziKVT4ygQUBAYxRAQE?=
X-IPAS-Result: =?us-ascii?q?A0AEAADRMBJch0O0hNFjGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGCXYEOJ4N8g3uEHoxiAQEGgQgIJRRoiAQhCGmNQhSBYw4BARgTAYRAg?=
 =?us-ascii?q?wMiNAkNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkAYJhAQEBAQMBAhcJBAsBBQg?=
 =?us-ascii?q?BGx0BAwIJAQEFAwILCgMCAiYCAgMgEQEFARwGDQYCAQEBgxyBaAEDCA0EAYsEk?=
 =?us-ascii?q?Ac8iw18FgUBF4J3BYRGChknDV1QZwIGEnmKFYEcgQ+BB4ERJwyCKjWERjuDBIJ?=
 =?us-ascii?q?XAoEqAQEBiAgGBIdXj3gBBgIBgVYFj3gGGIFchRyCdBAmhyiWV4JLAgQCBAUCB?=
 =?us-ascii?q?Q8hgSWCDnBQMW2BToIbDBcSgziKVT4ygQUBAYxRAQE?=
X-IronPort-AV: E=Sophos;i="5.56,348,1539673200"; 
   d="scan'208";a="56732485"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 13 Dec 2018 02:17:03 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728171AbeLMKRA (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 13 Dec 2018 05:17:00 -0500
Received: from mail-lj1-f193.google.com ([209.85.208.193]:34638 "EHLO
        mail-lj1-f193.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727991AbeLMKRA (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 13 Dec 2018 05:17:00 -0500
Received: by mail-lj1-f193.google.com with SMTP id u6-v6so1294896ljd.1
        for <linux-kernel@vger.kernel.org>; Thu, 13 Dec 2018 02:16:56 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=subject:from:to:cc:references:message-id:date:user-agent
         :mime-version:in-reply-to:content-transfer-encoding:content-language;
        bh=12Z5Ye4CSFcoUec9aRHmkE4BwAzVYrZVzk1V/J8URjw=;
        b=TO8h9/ZypOSETP9tZ2YcoCKBVH2Ph6TNGdQiSULejdyM70N7NLR2eiJYD1xA9DojpP
         /MfemPJLWFMwhxrre0XVdDQLjZq9dVj6eSzIojg/9mSAB5tgxIUzfri4Yge5TswVo3w8
         boRMlJsZp1QSo/0+vhzBJD4DBTO99Q9oQY4LaOJfx34zj5fvqftk6GRPwhra5DKtD8Kl
         lxE/yC/SW7+UYQXc+YOj4tLbd6pIm+rs1njCvpbnVTw/ua2D7TTLgqKkxGrtTGFDWuza
         36WPF32mgp1EhbR7iP4JDr26GxEVsTBi3Gskpl9YqV1qPpi+FQM0bjKw+dxe1m2WzEYz
         JMzA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:subject:from:to:cc:references:message-id:date
         :user-agent:mime-version:in-reply-to:content-transfer-encoding
         :content-language;
        bh=12Z5Ye4CSFcoUec9aRHmkE4BwAzVYrZVzk1V/J8URjw=;
        b=sPlurPWqtcORKwWAxmjzGCvMZ+/ny99U5xxWt9jIt2+p+JjnOej6KUrSP2DJ3Nvphc
         TSg6B6c5Dv5VPm+pSnWozxHbRS5xXPR+3gBx16Rz5GLwRzaX6lx0+Xx7+ny/tEDB8hc2
         nIDYC1vvUal+ovWTKrqygzuEiWy6VXTyIsrg4G1x4CFSg2SeGSNpyUUWGuhC3Htjlcmv
         SH4cnFAac2BNo8wafOgIVwm4iqbnelSkSPk1UInBszU+Z3eRMEMp1Gmk8k2XA26IbWu/
         ZShy7z5ksIYLfwN+Ak0WwczBymuW8IL9hzUgUFVcZ/h7JvMK8PiHsUzeg69KMvh0YdLt
         5v6A==
X-Gm-Message-State: AA+aEWZNC2lrIqHPiIHzV46C2L4C+w/tYPQTwC6NuGLjlHNGfZTQK9JT
        ryzFvIUwdhevQpKC9cu7150=
X-Google-Smtp-Source: AFSGD/VsgM/p8I+Vvk4I1MLmmh034J0g9ugaMWtX4G/hpRC9Ww2vGEV15PLWyjsOqYvMJZDOO6OtDA==
X-Received: by 2002:a2e:80d3:: with SMTP id r19-v6mr14385625ljg.151.1544696214868;
        Thu, 13 Dec 2018 02:16:54 -0800 (PST)
Received: from [10.17.182.20] (ll-22.209.223.85.sovam.net.ua. [85.223.209.22])
        by smtp.gmail.com with ESMTPSA id g17sm260702lfg.78.2018.12.13.02.16.53
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Thu, 13 Dec 2018 02:16:54 -0800 (PST)
Subject: Re: [Xen-devel][PATCH v2 2/3] drm/xen-front: Use Xen common shared
 buffer implementation
From: Oleksandr Andrushchenko <andr2000@gmail.com>
To: Daniel Vetter <daniel.vetter@ffwll.ch>
Cc: xen-devel@lists.xenproject.org, linux-kernel@vger.kernel.org,
        dri-devel@lists.freedesktop.org, alsa-devel@alsa-project.org,
        jgross@suse.com, boris.ostrovsky@oracle.com,
        Oleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>
References: <20181130074205.20496-1-andr2000@gmail.com>
 <20181130074205.20496-2-andr2000@gmail.com>
 <3c69d924-11e1-7037-bfa5-276d22b245fe@gmail.com>
Message-ID: <27491aa5-3548-4c39-13a2-132c738fae14@gmail.com>
Date: Thu, 13 Dec 2018 12:16:52 +0200
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.2.1
MIME-Version: 1.0
In-Reply-To: <3c69d924-11e1-7037-bfa5-276d22b245fe@gmail.com>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 8bit
Content-Language: en-US
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

bump

On 12/5/18 10:20 AM, Oleksandr Andrushchenko wrote:
> Hello, Daniel!
>
> Could you please ack/nack the patch, so either we can merge the
>
> series or I can address your comments if any
>
> Thank you,
>
> Oleksandr
>
> On 11/30/18 9:42 AM, Oleksandr Andrushchenko wrote:
>> From: Oleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>
>>
>> Use page directory based shared buffer implementation
>> now available as common code for Xen frontend drivers.
>>
>> Remove flushing of shared buffer on page flip as this
>> workaround needs a proper fix.
>>
>> Signed-off-by: Oleksandr Andrushchenko 
>> <oleksandr_andrushchenko@epam.com>
>> ---
>>   drivers/gpu/drm/xen/Kconfig               |   1 +
>>   drivers/gpu/drm/xen/Makefile              |   1 -
>>   drivers/gpu/drm/xen/xen_drm_front.c       |  65 ++--
>>   drivers/gpu/drm/xen/xen_drm_front_gem.c   |   1 -
>>   drivers/gpu/drm/xen/xen_drm_front_shbuf.c | 414 ----------------------
>>   drivers/gpu/drm/xen/xen_drm_front_shbuf.h |  64 ----
>>   6 files changed, 26 insertions(+), 520 deletions(-)
>>   delete mode 100644 drivers/gpu/drm/xen/xen_drm_front_shbuf.c
>>   delete mode 100644 drivers/gpu/drm/xen/xen_drm_front_shbuf.h
>>
>> diff --git a/drivers/gpu/drm/xen/Kconfig b/drivers/gpu/drm/xen/Kconfig
>> index 4cca160782ab..f969d486855d 100644
>> --- a/drivers/gpu/drm/xen/Kconfig
>> +++ b/drivers/gpu/drm/xen/Kconfig
>> @@ -12,6 +12,7 @@ config DRM_XEN_FRONTEND
>>       select DRM_KMS_HELPER
>>       select VIDEOMODE_HELPERS
>>       select XEN_XENBUS_FRONTEND
>> +    select XEN_FRONT_PGDIR_SHBUF
>>       help
>>         Choose this option if you want to enable a para-virtualized
>>         frontend DRM/KMS driver for Xen guest OSes.
>> diff --git a/drivers/gpu/drm/xen/Makefile b/drivers/gpu/drm/xen/Makefile
>> index 712afff5ffc3..825905f67faa 100644
>> --- a/drivers/gpu/drm/xen/Makefile
>> +++ b/drivers/gpu/drm/xen/Makefile
>> @@ -4,7 +4,6 @@ drm_xen_front-objs := xen_drm_front.o \
>>                 xen_drm_front_kms.o \
>>                 xen_drm_front_conn.o \
>>                 xen_drm_front_evtchnl.o \
>> -              xen_drm_front_shbuf.o \
>>                 xen_drm_front_cfg.o \
>>                 xen_drm_front_gem.o
>>   diff --git a/drivers/gpu/drm/xen/xen_drm_front.c 
>> b/drivers/gpu/drm/xen/xen_drm_front.c
>> index 6b6d5ab82ec3..4d3d36fc3a5d 100644
>> --- a/drivers/gpu/drm/xen/xen_drm_front.c
>> +++ b/drivers/gpu/drm/xen/xen_drm_front.c
>> @@ -19,6 +19,7 @@
>>   #include <xen/xen.h>
>>   #include <xen/xenbus.h>
>>   +#include <xen/xen-front-pgdir-shbuf.h>
>>   #include <xen/interface/io/displif.h>
>>     #include "xen_drm_front.h"
>> @@ -26,28 +27,20 @@
>>   #include "xen_drm_front_evtchnl.h"
>>   #include "xen_drm_front_gem.h"
>>   #include "xen_drm_front_kms.h"
>> -#include "xen_drm_front_shbuf.h"
>>     struct xen_drm_front_dbuf {
>>       struct list_head list;
>>       u64 dbuf_cookie;
>>       u64 fb_cookie;
>> -    struct xen_drm_front_shbuf *shbuf;
>> +
>> +    struct xen_front_pgdir_shbuf shbuf;
>>   };
>>   -static int dbuf_add_to_list(struct xen_drm_front_info *front_info,
>> -                struct xen_drm_front_shbuf *shbuf, u64 dbuf_cookie)
>> +static void dbuf_add_to_list(struct xen_drm_front_info *front_info,
>> +                 struct xen_drm_front_dbuf *dbuf, u64 dbuf_cookie)
>>   {
>> -    struct xen_drm_front_dbuf *dbuf;
>> -
>> -    dbuf = kzalloc(sizeof(*dbuf), GFP_KERNEL);
>> -    if (!dbuf)
>> -        return -ENOMEM;
>> -
>>       dbuf->dbuf_cookie = dbuf_cookie;
>> -    dbuf->shbuf = shbuf;
>>       list_add(&dbuf->list, &front_info->dbuf_list);
>> -    return 0;
>>   }
>>     static struct xen_drm_front_dbuf *dbuf_get(struct list_head 
>> *dbuf_list,
>> @@ -62,15 +55,6 @@ static struct xen_drm_front_dbuf *dbuf_get(struct 
>> list_head *dbuf_list,
>>       return NULL;
>>   }
>>   -static void dbuf_flush_fb(struct list_head *dbuf_list, u64 fb_cookie)
>> -{
>> -    struct xen_drm_front_dbuf *buf, *q;
>> -
>> -    list_for_each_entry_safe(buf, q, dbuf_list, list)
>> -        if (buf->fb_cookie == fb_cookie)
>> -            xen_drm_front_shbuf_flush(buf->shbuf);
>> -}
>> -
>>   static void dbuf_free(struct list_head *dbuf_list, u64 dbuf_cookie)
>>   {
>>       struct xen_drm_front_dbuf *buf, *q;
>> @@ -78,8 +62,8 @@ static void dbuf_free(struct list_head *dbuf_list, 
>> u64 dbuf_cookie)
>>       list_for_each_entry_safe(buf, q, dbuf_list, list)
>>           if (buf->dbuf_cookie == dbuf_cookie) {
>>               list_del(&buf->list);
>> -            xen_drm_front_shbuf_unmap(buf->shbuf);
>> -            xen_drm_front_shbuf_free(buf->shbuf);
>> +            xen_front_pgdir_shbuf_unmap(&buf->shbuf);
>> +            xen_front_pgdir_shbuf_free(&buf->shbuf);
>>               kfree(buf);
>>               break;
>>           }
>> @@ -91,8 +75,8 @@ static void dbuf_free_all(struct list_head *dbuf_list)
>>         list_for_each_entry_safe(buf, q, dbuf_list, list) {
>>           list_del(&buf->list);
>> -        xen_drm_front_shbuf_unmap(buf->shbuf);
>> -        xen_drm_front_shbuf_free(buf->shbuf);
>> +        xen_front_pgdir_shbuf_unmap(&buf->shbuf);
>> +        xen_front_pgdir_shbuf_free(&buf->shbuf);
>>           kfree(buf);
>>       }
>>   }
>> @@ -171,9 +155,9 @@ int xen_drm_front_dbuf_create(struct 
>> xen_drm_front_info *front_info,
>>                     u32 bpp, u64 size, struct page **pages)
>>   {
>>       struct xen_drm_front_evtchnl *evtchnl;
>> -    struct xen_drm_front_shbuf *shbuf;
>> +    struct xen_drm_front_dbuf *dbuf;
>>       struct xendispl_req *req;
>> -    struct xen_drm_front_shbuf_cfg buf_cfg;
>> +    struct xen_front_pgdir_shbuf_cfg buf_cfg;
>>       unsigned long flags;
>>       int ret;
>>   @@ -181,28 +165,29 @@ int xen_drm_front_dbuf_create(struct 
>> xen_drm_front_info *front_info,
>>       if (unlikely(!evtchnl))
>>           return -EIO;
>>   +    dbuf = kzalloc(sizeof(*dbuf), GFP_KERNEL);
>> +    if (!dbuf)
>> +        return -ENOMEM;
>> +
>> +    dbuf_add_to_list(front_info, dbuf, dbuf_cookie);
>> +
>>       memset(&buf_cfg, 0, sizeof(buf_cfg));
>>       buf_cfg.xb_dev = front_info->xb_dev;
>> +    buf_cfg.num_pages = DIV_ROUND_UP(size, PAGE_SIZE);
>>       buf_cfg.pages = pages;
>> -    buf_cfg.size = size;
>> +    buf_cfg.pgdir = &dbuf->shbuf;
>>       buf_cfg.be_alloc = front_info->cfg.be_alloc;
>>   -    shbuf = xen_drm_front_shbuf_alloc(&buf_cfg);
>> -    if (IS_ERR(shbuf))
>> -        return PTR_ERR(shbuf);
>> -
>> -    ret = dbuf_add_to_list(front_info, shbuf, dbuf_cookie);
>> -    if (ret < 0) {
>> -        xen_drm_front_shbuf_free(shbuf);
>> -        return ret;
>> -    }
>> +    ret = xen_front_pgdir_shbuf_alloc(&buf_cfg);
>> +    if (ret < 0)
>> +        goto fail_shbuf_alloc;
>>         mutex_lock(&evtchnl->u.req.req_io_lock);
>>         spin_lock_irqsave(&front_info->io_lock, flags);
>>       req = be_prepare_req(evtchnl, XENDISPL_OP_DBUF_CREATE);
>>       req->op.dbuf_create.gref_directory =
>> -            xen_drm_front_shbuf_get_dir_start(shbuf);
>> + xen_front_pgdir_shbuf_get_dir_start(&dbuf->shbuf);
>>       req->op.dbuf_create.buffer_sz = size;
>>       req->op.dbuf_create.dbuf_cookie = dbuf_cookie;
>>       req->op.dbuf_create.width = width;
>> @@ -221,7 +206,7 @@ int xen_drm_front_dbuf_create(struct 
>> xen_drm_front_info *front_info,
>>       if (ret < 0)
>>           goto fail;
>>   -    ret = xen_drm_front_shbuf_map(shbuf);
>> +    ret = xen_front_pgdir_shbuf_map(&dbuf->shbuf);
>>       if (ret < 0)
>>           goto fail;
>>   @@ -230,6 +215,7 @@ int xen_drm_front_dbuf_create(struct 
>> xen_drm_front_info *front_info,
>>     fail:
>>       mutex_unlock(&evtchnl->u.req.req_io_lock);
>> +fail_shbuf_alloc:
>>       dbuf_free(&front_info->dbuf_list, dbuf_cookie);
>>       return ret;
>>   }
>> @@ -358,7 +344,6 @@ int xen_drm_front_page_flip(struct 
>> xen_drm_front_info *front_info,
>>       if (unlikely(conn_idx >= front_info->num_evt_pairs))
>>           return -EINVAL;
>>   -    dbuf_flush_fb(&front_info->dbuf_list, fb_cookie);
>>       evtchnl = &front_info->evt_pairs[conn_idx].req;
>>         mutex_lock(&evtchnl->u.req.req_io_lock);
>> diff --git a/drivers/gpu/drm/xen/xen_drm_front_gem.c 
>> b/drivers/gpu/drm/xen/xen_drm_front_gem.c
>> index c85bfe7571cb..53be4c7dc0a4 100644
>> --- a/drivers/gpu/drm/xen/xen_drm_front_gem.c
>> +++ b/drivers/gpu/drm/xen/xen_drm_front_gem.c
>> @@ -22,7 +22,6 @@
>>   #include <xen/balloon.h>
>>     #include "xen_drm_front.h"
>> -#include "xen_drm_front_shbuf.h"
>>     struct xen_gem_object {
>>       struct drm_gem_object base;
>> diff --git a/drivers/gpu/drm/xen/xen_drm_front_shbuf.c 
>> b/drivers/gpu/drm/xen/xen_drm_front_shbuf.c
>> deleted file mode 100644
>> index d333b67cc1a0..000000000000
>> --- a/drivers/gpu/drm/xen/xen_drm_front_shbuf.c
>> +++ /dev/null
>> @@ -1,414 +0,0 @@
>> -// SPDX-License-Identifier: GPL-2.0 OR MIT
>> -
>> -/*
>> - *  Xen para-virtual DRM device
>> - *
>> - * Copyright (C) 2016-2018 EPAM Systems Inc.
>> - *
>> - * Author: Oleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>
>> - */
>> -
>> -#include <drm/drmP.h>
>> -
>> -#if defined(CONFIG_X86)
>> -#include <drm/drm_cache.h>
>> -#endif
>> -#include <linux/errno.h>
>> -#include <linux/mm.h>
>> -
>> -#include <asm/xen/hypervisor.h>
>> -#include <xen/balloon.h>
>> -#include <xen/xen.h>
>> -#include <xen/xenbus.h>
>> -#include <xen/interface/io/ring.h>
>> -#include <xen/interface/io/displif.h>
>> -
>> -#include "xen_drm_front.h"
>> -#include "xen_drm_front_shbuf.h"
>> -
>> -struct xen_drm_front_shbuf_ops {
>> -    /*
>> -     * Calculate number of grefs required to handle this buffer,
>> -     * e.g. if grefs are required for page directory only or the buffer
>> -     * pages as well.
>> -     */
>> -    void (*calc_num_grefs)(struct xen_drm_front_shbuf *buf);
>> -    /* Fill page directory according to para-virtual display 
>> protocol. */
>> -    void (*fill_page_dir)(struct xen_drm_front_shbuf *buf);
>> -    /* Claim grant references for the pages of the buffer. */
>> -    int (*grant_refs_for_buffer)(struct xen_drm_front_shbuf *buf,
>> -                     grant_ref_t *priv_gref_head, int gref_idx);
>> -    /* Map grant references of the buffer. */
>> -    int (*map)(struct xen_drm_front_shbuf *buf);
>> -    /* Unmap grant references of the buffer. */
>> -    int (*unmap)(struct xen_drm_front_shbuf *buf);
>> -};
>> -
>> -grant_ref_t xen_drm_front_shbuf_get_dir_start(struct 
>> xen_drm_front_shbuf *buf)
>> -{
>> -    if (!buf->grefs)
>> -        return GRANT_INVALID_REF;
>> -
>> -    return buf->grefs[0];
>> -}
>> -
>> -int xen_drm_front_shbuf_map(struct xen_drm_front_shbuf *buf)
>> -{
>> -    if (buf->ops->map)
>> -        return buf->ops->map(buf);
>> -
>> -    /* no need to map own grant references */
>> -    return 0;
>> -}
>> -
>> -int xen_drm_front_shbuf_unmap(struct xen_drm_front_shbuf *buf)
>> -{
>> -    if (buf->ops->unmap)
>> -        return buf->ops->unmap(buf);
>> -
>> -    /* no need to unmap own grant references */
>> -    return 0;
>> -}
>> -
>> -void xen_drm_front_shbuf_flush(struct xen_drm_front_shbuf *buf)
>> -{
>> -#if defined(CONFIG_X86)
>> -    drm_clflush_pages(buf->pages, buf->num_pages);
>> -#endif
>> -}
>> -
>> -void xen_drm_front_shbuf_free(struct xen_drm_front_shbuf *buf)
>> -{
>> -    if (buf->grefs) {
>> -        int i;
>> -
>> -        for (i = 0; i < buf->num_grefs; i++)
>> -            if (buf->grefs[i] != GRANT_INVALID_REF)
>> -                gnttab_end_foreign_access(buf->grefs[i],
>> -                              0, 0UL);
>> -    }
>> -    kfree(buf->grefs);
>> -    kfree(buf->directory);
>> -    kfree(buf);
>> -}
>> -
>> -/*
>> - * number of grefs a page can hold with respect to the
>> - * struct xendispl_page_directory header
>> - */
>> -#define XEN_DRM_NUM_GREFS_PER_PAGE ((PAGE_SIZE - \
>> -        offsetof(struct xendispl_page_directory, gref)) / \
>> -        sizeof(grant_ref_t))
>> -
>> -static int get_num_pages_dir(struct xen_drm_front_shbuf *buf)
>> -{
>> -    /* number of pages the page directory consumes itself */
>> -    return DIV_ROUND_UP(buf->num_pages, XEN_DRM_NUM_GREFS_PER_PAGE);
>> -}
>> -
>> -static void backend_calc_num_grefs(struct xen_drm_front_shbuf *buf)
>> -{
>> -    /* only for pages the page directory consumes itself */
>> -    buf->num_grefs = get_num_pages_dir(buf);
>> -}
>> -
>> -static void guest_calc_num_grefs(struct xen_drm_front_shbuf *buf)
>> -{
>> -    /*
>> -     * number of pages the page directory consumes itself
>> -     * plus grefs for the buffer pages
>> -     */
>> -    buf->num_grefs = get_num_pages_dir(buf) + buf->num_pages;
>> -}
>> -
>> -#define xen_page_to_vaddr(page) \
>> -        ((uintptr_t)pfn_to_kaddr(page_to_xen_pfn(page)))
>> -
>> -static int backend_unmap(struct xen_drm_front_shbuf *buf)
>> -{
>> -    struct gnttab_unmap_grant_ref *unmap_ops;
>> -    int i, ret;
>> -
>> -    if (!buf->pages || !buf->backend_map_handles || !buf->grefs)
>> -        return 0;
>> -
>> -    unmap_ops = kcalloc(buf->num_pages, sizeof(*unmap_ops),
>> -                GFP_KERNEL);
>> -    if (!unmap_ops) {
>> -        DRM_ERROR("Failed to get memory while unmapping\n");
>> -        return -ENOMEM;
>> -    }
>> -
>> -    for (i = 0; i < buf->num_pages; i++) {
>> -        phys_addr_t addr;
>> -
>> -        addr = xen_page_to_vaddr(buf->pages[i]);
>> -        gnttab_set_unmap_op(&unmap_ops[i], addr, GNTMAP_host_map,
>> -                    buf->backend_map_handles[i]);
>> -    }
>> -
>> -    ret = gnttab_unmap_refs(unmap_ops, NULL, buf->pages,
>> -                buf->num_pages);
>> -
>> -    for (i = 0; i < buf->num_pages; i++) {
>> -        if (unlikely(unmap_ops[i].status != GNTST_okay))
>> -            DRM_ERROR("Failed to unmap page %d: %d\n",
>> -                  i, unmap_ops[i].status);
>> -    }
>> -
>> -    if (ret)
>> -        DRM_ERROR("Failed to unmap grant references, ret %d", ret);
>> -
>> -    kfree(unmap_ops);
>> -    kfree(buf->backend_map_handles);
>> -    buf->backend_map_handles = NULL;
>> -    return ret;
>> -}
>> -
>> -static int backend_map(struct xen_drm_front_shbuf *buf)
>> -{
>> -    struct gnttab_map_grant_ref *map_ops = NULL;
>> -    unsigned char *ptr;
>> -    int ret, cur_gref, cur_dir_page, cur_page, grefs_left;
>> -
>> -    map_ops = kcalloc(buf->num_pages, sizeof(*map_ops), GFP_KERNEL);
>> -    if (!map_ops)
>> -        return -ENOMEM;
>> -
>> -    buf->backend_map_handles = kcalloc(buf->num_pages,
>> -                       sizeof(*buf->backend_map_handles),
>> -                       GFP_KERNEL);
>> -    if (!buf->backend_map_handles) {
>> -        kfree(map_ops);
>> -        return -ENOMEM;
>> -    }
>> -
>> -    /*
>> -     * read page directory to get grefs from the backend: for external
>> -     * buffer we only allocate buf->grefs for the page directory,
>> -     * so buf->num_grefs has number of pages in the page directory 
>> itself
>> -     */
>> -    ptr = buf->directory;
>> -    grefs_left = buf->num_pages;
>> -    cur_page = 0;
>> -    for (cur_dir_page = 0; cur_dir_page < buf->num_grefs; 
>> cur_dir_page++) {
>> -        struct xendispl_page_directory *page_dir =
>> -                (struct xendispl_page_directory *)ptr;
>> -        int to_copy = XEN_DRM_NUM_GREFS_PER_PAGE;
>> -
>> -        if (to_copy > grefs_left)
>> -            to_copy = grefs_left;
>> -
>> -        for (cur_gref = 0; cur_gref < to_copy; cur_gref++) {
>> -            phys_addr_t addr;
>> -
>> -            addr = xen_page_to_vaddr(buf->pages[cur_page]);
>> -            gnttab_set_map_op(&map_ops[cur_page], addr,
>> -                      GNTMAP_host_map,
>> -                      page_dir->gref[cur_gref],
>> -                      buf->xb_dev->otherend_id);
>> -            cur_page++;
>> -        }
>> -
>> -        grefs_left -= to_copy;
>> -        ptr += PAGE_SIZE;
>> -    }
>> -    ret = gnttab_map_refs(map_ops, NULL, buf->pages, buf->num_pages);
>> -
>> -    /* save handles even if error, so we can unmap */
>> -    for (cur_page = 0; cur_page < buf->num_pages; cur_page++) {
>> -        buf->backend_map_handles[cur_page] = map_ops[cur_page].handle;
>> -        if (unlikely(map_ops[cur_page].status != GNTST_okay))
>> -            DRM_ERROR("Failed to map page %d: %d\n",
>> -                  cur_page, map_ops[cur_page].status);
>> -    }
>> -
>> -    if (ret) {
>> -        DRM_ERROR("Failed to map grant references, ret %d", ret);
>> -        backend_unmap(buf);
>> -    }
>> -
>> -    kfree(map_ops);
>> -    return ret;
>> -}
>> -
>> -static void backend_fill_page_dir(struct xen_drm_front_shbuf *buf)
>> -{
>> -    struct xendispl_page_directory *page_dir;
>> -    unsigned char *ptr;
>> -    int i, num_pages_dir;
>> -
>> -    ptr = buf->directory;
>> -    num_pages_dir = get_num_pages_dir(buf);
>> -
>> -    /* fill only grefs for the page directory itself */
>> -    for (i = 0; i < num_pages_dir - 1; i++) {
>> -        page_dir = (struct xendispl_page_directory *)ptr;
>> -
>> -        page_dir->gref_dir_next_page = buf->grefs[i + 1];
>> -        ptr += PAGE_SIZE;
>> -    }
>> -    /* last page must say there is no more pages */
>> -    page_dir = (struct xendispl_page_directory *)ptr;
>> -    page_dir->gref_dir_next_page = GRANT_INVALID_REF;
>> -}
>> -
>> -static void guest_fill_page_dir(struct xen_drm_front_shbuf *buf)
>> -{
>> -    unsigned char *ptr;
>> -    int cur_gref, grefs_left, to_copy, i, num_pages_dir;
>> -
>> -    ptr = buf->directory;
>> -    num_pages_dir = get_num_pages_dir(buf);
>> -
>> -    /*
>> -     * while copying, skip grefs at start, they are for pages
>> -     * granted for the page directory itself
>> -     */
>> -    cur_gref = num_pages_dir;
>> -    grefs_left = buf->num_pages;
>> -    for (i = 0; i < num_pages_dir; i++) {
>> -        struct xendispl_page_directory *page_dir =
>> -                (struct xendispl_page_directory *)ptr;
>> -
>> -        if (grefs_left <= XEN_DRM_NUM_GREFS_PER_PAGE) {
>> -            to_copy = grefs_left;
>> -            page_dir->gref_dir_next_page = GRANT_INVALID_REF;
>> -        } else {
>> -            to_copy = XEN_DRM_NUM_GREFS_PER_PAGE;
>> -            page_dir->gref_dir_next_page = buf->grefs[i + 1];
>> -        }
>> -        memcpy(&page_dir->gref, &buf->grefs[cur_gref],
>> -               to_copy * sizeof(grant_ref_t));
>> -        ptr += PAGE_SIZE;
>> -        grefs_left -= to_copy;
>> -        cur_gref += to_copy;
>> -    }
>> -}
>> -
>> -static int guest_grant_refs_for_buffer(struct xen_drm_front_shbuf *buf,
>> -                       grant_ref_t *priv_gref_head,
>> -                       int gref_idx)
>> -{
>> -    int i, cur_ref, otherend_id;
>> -
>> -    otherend_id = buf->xb_dev->otherend_id;
>> -    for (i = 0; i < buf->num_pages; i++) {
>> -        cur_ref = gnttab_claim_grant_reference(priv_gref_head);
>> -        if (cur_ref < 0)
>> -            return cur_ref;
>> -
>> -        gnttab_grant_foreign_access_ref(cur_ref, otherend_id,
>> -                        xen_page_to_gfn(buf->pages[i]),
>> -                        0);
>> -        buf->grefs[gref_idx++] = cur_ref;
>> -    }
>> -    return 0;
>> -}
>> -
>> -static int grant_references(struct xen_drm_front_shbuf *buf)
>> -{
>> -    grant_ref_t priv_gref_head;
>> -    int ret, i, j, cur_ref;
>> -    int otherend_id, num_pages_dir;
>> -
>> -    ret = gnttab_alloc_grant_references(buf->num_grefs, 
>> &priv_gref_head);
>> -    if (ret < 0) {
>> -        DRM_ERROR("Cannot allocate grant references\n");
>> -        return ret;
>> -    }
>> -
>> -    otherend_id = buf->xb_dev->otherend_id;
>> -    j = 0;
>> -    num_pages_dir = get_num_pages_dir(buf);
>> -    for (i = 0; i < num_pages_dir; i++) {
>> -        unsigned long frame;
>> -
>> -        cur_ref = gnttab_claim_grant_reference(&priv_gref_head);
>> -        if (cur_ref < 0)
>> -            return cur_ref;
>> -
>> -        frame = xen_page_to_gfn(virt_to_page(buf->directory +
>> -                    PAGE_SIZE * i));
>> -        gnttab_grant_foreign_access_ref(cur_ref, otherend_id, frame, 
>> 0);
>> -        buf->grefs[j++] = cur_ref;
>> -    }
>> -
>> -    if (buf->ops->grant_refs_for_buffer) {
>> -        ret = buf->ops->grant_refs_for_buffer(buf, &priv_gref_head, j);
>> -        if (ret)
>> -            return ret;
>> -    }
>> -
>> -    gnttab_free_grant_references(priv_gref_head);
>> -    return 0;
>> -}
>> -
>> -static int alloc_storage(struct xen_drm_front_shbuf *buf)
>> -{
>> -    buf->grefs = kcalloc(buf->num_grefs, sizeof(*buf->grefs), 
>> GFP_KERNEL);
>> -    if (!buf->grefs)
>> -        return -ENOMEM;
>> -
>> -    buf->directory = kcalloc(get_num_pages_dir(buf), PAGE_SIZE, 
>> GFP_KERNEL);
>> -    if (!buf->directory)
>> -        return -ENOMEM;
>> -
>> -    return 0;
>> -}
>> -
>> -/*
>> - * For be allocated buffers we don't need grant_refs_for_buffer as 
>> those
>> - * grant references are allocated at backend side
>> - */
>> -static const struct xen_drm_front_shbuf_ops backend_ops = {
>> -    .calc_num_grefs = backend_calc_num_grefs,
>> -    .fill_page_dir = backend_fill_page_dir,
>> -    .map = backend_map,
>> -    .unmap = backend_unmap
>> -};
>> -
>> -/* For locally granted references we do not need to map/unmap the 
>> references */
>> -static const struct xen_drm_front_shbuf_ops local_ops = {
>> -    .calc_num_grefs = guest_calc_num_grefs,
>> -    .fill_page_dir = guest_fill_page_dir,
>> -    .grant_refs_for_buffer = guest_grant_refs_for_buffer,
>> -};
>> -
>> -struct xen_drm_front_shbuf *
>> -xen_drm_front_shbuf_alloc(struct xen_drm_front_shbuf_cfg *cfg)
>> -{
>> -    struct xen_drm_front_shbuf *buf;
>> -    int ret;
>> -
>> -    buf = kzalloc(sizeof(*buf), GFP_KERNEL);
>> -    if (!buf)
>> -        return ERR_PTR(-ENOMEM);
>> -
>> -    if (cfg->be_alloc)
>> -        buf->ops = &backend_ops;
>> -    else
>> -        buf->ops = &local_ops;
>> -
>> -    buf->xb_dev = cfg->xb_dev;
>> -    buf->num_pages = DIV_ROUND_UP(cfg->size, PAGE_SIZE);
>> -    buf->pages = cfg->pages;
>> -
>> -    buf->ops->calc_num_grefs(buf);
>> -
>> -    ret = alloc_storage(buf);
>> -    if (ret)
>> -        goto fail;
>> -
>> -    ret = grant_references(buf);
>> -    if (ret)
>> -        goto fail;
>> -
>> -    buf->ops->fill_page_dir(buf);
>> -
>> -    return buf;
>> -
>> -fail:
>> -    xen_drm_front_shbuf_free(buf);
>> -    return ERR_PTR(ret);
>> -}
>> diff --git a/drivers/gpu/drm/xen/xen_drm_front_shbuf.h 
>> b/drivers/gpu/drm/xen/xen_drm_front_shbuf.h
>> deleted file mode 100644
>> index 7545c692539e..000000000000
>> --- a/drivers/gpu/drm/xen/xen_drm_front_shbuf.h
>> +++ /dev/null
>> @@ -1,64 +0,0 @@
>> -/* SPDX-License-Identifier: GPL-2.0 OR MIT */
>> -
>> -/*
>> - *  Xen para-virtual DRM device
>> - *
>> - * Copyright (C) 2016-2018 EPAM Systems Inc.
>> - *
>> - * Author: Oleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>
>> - */
>> -
>> -#ifndef __XEN_DRM_FRONT_SHBUF_H_
>> -#define __XEN_DRM_FRONT_SHBUF_H_
>> -
>> -#include <linux/kernel.h>
>> -#include <linux/scatterlist.h>
>> -
>> -#include <xen/grant_table.h>
>> -
>> -struct xen_drm_front_shbuf {
>> -    /*
>> -     * number of references granted for the backend use:
>> -     *  - for allocated/imported dma-buf's this holds number of grant
>> -     *    references for the page directory and pages of the buffer
>> -     *  - for the buffer provided by the backend this holds number of
>> -     *    grant references for the page directory as grant 
>> references for
>> -     *    the buffer will be provided by the backend
>> -     */
>> -    int num_grefs;
>> -    grant_ref_t *grefs;
>> -    unsigned char *directory;
>> -
>> -    int num_pages;
>> -    struct page **pages;
>> -
>> -    struct xenbus_device *xb_dev;
>> -
>> -    /* these are the ops used internally depending on be_alloc mode */
>> -    const struct xen_drm_front_shbuf_ops *ops;
>> -
>> -    /* Xen map handles for the buffer allocated by the backend */
>> -    grant_handle_t *backend_map_handles;
>> -};
>> -
>> -struct xen_drm_front_shbuf_cfg {
>> -    struct xenbus_device *xb_dev;
>> -    size_t size;
>> -    struct page **pages;
>> -    bool be_alloc;
>> -};
>> -
>> -struct xen_drm_front_shbuf *
>> -xen_drm_front_shbuf_alloc(struct xen_drm_front_shbuf_cfg *cfg);
>> -
>> -grant_ref_t xen_drm_front_shbuf_get_dir_start(struct 
>> xen_drm_front_shbuf *buf);
>> -
>> -int xen_drm_front_shbuf_map(struct xen_drm_front_shbuf *buf);
>> -
>> -int xen_drm_front_shbuf_unmap(struct xen_drm_front_shbuf *buf);
>> -
>> -void xen_drm_front_shbuf_flush(struct xen_drm_front_shbuf *buf);
>> -
>> -void xen_drm_front_shbuf_free(struct xen_drm_front_shbuf *buf);
>> -
>> -#endif /* __XEN_DRM_FRONT_SHBUF_H_ */
