Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  18 Dec 2018 08:41:48 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 7FF025805FC;
	Mon, 17 Dec 2018 02:19:57 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by orsmga003-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 17 Dec 2018 02:19:56 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AHAvdlRBg0r+MG0E1Q4syUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7/rs+wAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95MWSJBHI28?=
 =?us-ascii?q?YYgBAeQPMulXrYbyu1QArQCmBQSuH+7v1jxFi2Xq0aEm3eksEwfL1xEgEdIUt3?=
 =?us-ascii?q?TUqc34Or4WUe+rz6nI1i/Mb/VL1jfn9YPFbhYhruyWXbJtasrRyVUgFwPbgVWW?=
 =?us-ascii?q?qozlOC6e2+MXvGid8uVgT/yjh3I7pw1tuTWvycIshZPIhoIR0FzL6SJ5wIMsKN?=
 =?us-ascii?q?C+VUV1YsakHYNOuy2GM4Z6WN4uTm92tCog17ELuoK3cDILxZkl3xLSaPyKf5KW?=
 =?us-ascii?q?7h79WuudOyl0iG5hdb6lmRq+706twfDmWMauylZFtC9Fn8HMtn8T0xzT7dCKSu?=
 =?us-ascii?q?Vy/ki/wzaDzQPT5f9eIUAyi6XbL4QtwrkqlpocqUjDHyn2l1vqjKKOaEko5uyl?=
 =?us-ascii?q?5/76brjouJOQLZJ4hwLiPqg0m8GyA/w0Mg0UUGia/eS82qfj/Ur8QLhSiv02k6?=
 =?us-ascii?q?/ZsI3VJMgCpa62HRVV0oA95Ba7Fjum19oZnX8ZI1JfYx+HkYfpNE/UIPziDvew?=
 =?us-ascii?q?nU6skDF1yPDCJLHhBY/NLnfbnLf7Ybl981JcyBY0zd1H45JUC7IBL+zpVk7+qd?=
 =?us-ascii?q?zVFRs5Mw2yw+b6B9RxzIIeWWSTAqCHNKPeq0OH5uUqI+OUfo8apC79K+Q55/7p?=
 =?us-ascii?q?lXI5mUUSfai13ZQNb3C0BPRmI1iDbnrqjdcMCmMKvgs4TOz3h1yOSz9TZ3CuX6?=
 =?us-ascii?q?0i4jE3Ep6pDYDGRoq1mryOwD+7HoFKZmBBEl2ME3DoeJueV/cPbyKSJMlhkjsf?=
 =?us-ascii?q?WLilSo8h0wyutQDgx7pmKOrU5jMXtZb52Ndp4O3TkAk49SZoAMSFz2GNU2Z0k3?=
 =?us-ascii?q?sSSD8t3KB/pk99xk2Z0adigfxVDthT5/JPUgcnOp/Q1e16C9buWg3feteFUkqp?=
 =?us-ascii?q?QtKjATspVNI+38cOY1phG9Wllh3D3DClA7kPm7yPBZw76KTc33fqKsZ5ynbG0r?=
 =?us-ascii?q?QhjlY8TstOM22mmrBw9wzJC4HVlEWZkr6gdb4A0y7V6GeD0W2OsVlFXwFqT6XK?=
 =?us-ascii?q?Q2oTZkvMotT//UPNUbmuBbMjMgtCzM6CLrBHatnojVVAWffiN87SY2O3m2esGx?=
 =?us-ascii?q?mIwqmAY5bte2UYxC/dElQLkxgP/XaaMggzHjqurHjADDNwD17vY1nj8e9lqHyl?=
 =?us-ascii?q?SE851AWKb0xn17qo9R8Zn/2cS/UP3r0avCctsSl7HFG439jOEdqPuxJhfLlAYd?=
 =?us-ascii?q?M6+FpHyWPZtwl6Ppy8L6BjhkQScxhts0PpzRV3DoRAkc4lrH4xyApyKKSY0E5O?=
 =?us-ascii?q?dj+C3JDwPKHXJXf2/By1d6HW3VTe2s6M+qgT8PQ4t0njvAaxG0U493VozdZU3G?=
 =?us-ascii?q?Wc55nQFwUSTI/+XVwx9xh5oLHafDIw54fV1X1qLKm1vSXO29MvBOs51Bmge81T?=
 =?us-ascii?q?P7+DFA/3C8caHdShKPQ2m1i1aRIJJOBT9LMuM8y6bfeH2a6rM/xmnDKplmlH5I?=
 =?us-ascii?q?F90kSR9ytzUOLI3pAFw+2G0QuDTTvzkFChssXvk4BeeT4SBna/yTTjBINJfK1y?=
 =?us-ascii?q?fJoEBn20I8KqwdVynZjtVGBC9F6iHl8JxNWmeR6PYFPjxw1Q0kIXrGejmSu5yT?=
 =?us-ascii?q?x0jj4oorCe3CzI3+Ttah4HNnRXS2lliFfmOZK0gMwCXEi0cwgpkwOo5Eb7x6RB?=
 =?us-ascii?q?pKVzNXLTQVpOfyXtK2FiU62wtqeNYsJV6ZMotzlXX/q4YVyAVrH9pB4a2Tv5H2?=
 =?us-ascii?q?RC3DA7ay2qupLhkhx4km2dNnVzrHneec1q3hfQ/t/cRf1Q3joAWiZ4jyLaBly9?=
 =?us-ascii?q?P9mv4NWVmI3PsuG4V2K9SJJTdTPnwp+HtCu+/WdqGwGwn+ivmt37Fgg3yS/62M?=
 =?us-ascii?q?NtVSnSrhb8Y4/r2r++MeJmeEloGVD959B7GoF4jos/mpUQ1WIGiZWS+HoNiX3z?=
 =?us-ascii?q?PslD2aLicHoNQiYGw93P7wjkwkFjLm+JyJj/VnWS2cZhY9i6YmUL2iMy9cxKCa?=
 =?us-ascii?q?GU7KBakitxuFa3sQXRYf1llDcH1fQu8GIag/0OuAc1yyWdA7MSElNCMS3iiRuI?=
 =?us-ascii?q?9My+o7tNZGm0b7ewzkV+kMulDLGDpAFcRXn4do0jHS928sVwLlbM3Gfv5YHjfd?=
 =?us-ascii?q?nadcgTuQGMkxfck+hVL4o8luYNhSpiI278vGcqy+gmjRx1xpG6vZOKK2Fs/KK/?=
 =?us-ascii?q?Hx5ZOSf5Z8IV+jHxk6lemtya0JyoHpVkAj8LRofnTeq0EDIOsvTqLx2BHyc7qn?=
 =?us-ascii?q?efBLrTBwuf6Fp9onLLEpCrMWyXJXYDwdVjQhmdOFJQgAQOUDommZ45ExigxNb9?=
 =?us-ascii?q?f0dh+jAR+ln4pwNOyu1yMhnwTHzfqB20ajsuS5ifMRlW7hxE50jPKsyT9eZzHy?=
 =?us-ascii?q?Be/p28ow2BMG2bZwJUDW4XXkyIHUzsPr6r5dPY6eiXGvK+L+fSYbWJseFfV/CI?=
 =?us-ascii?q?xY+20ot75TmMMN+DPmJlD/091UpORnR5G8XfmzUSRC0bjSPNb8iHpBii/i17tN?=
 =?us-ascii?q?yw8PPuWAj3/4uAF6NSMclz+xCxmaqDN/CfhCd6KTZb15MA33zIyKIY3F4dlS5u?=
 =?us-ascii?q?bSStEa8buC7JTaLQnLJXDhEBZyNyMstI87wz3g1XNcHHjdP106ZyjuQpBFddSV?=
 =?us-ascii?q?zhhsapaNQQLGGgL1zHHliENbScKT3PwsH6eqe8SbxWjOVJuBy8ozebE0n/Pjud?=
 =?us-ascii?q?kznlTQygMeZJjCuDJhxRpJm9cgpxCWjkVN/mdhy7MNptgTIq27E7mnPKOnAaMT?=
 =?us-ascii?q?Vnd0NNr7uQ7T5Xg/llGmxB6GZlIveAmyqD8+bYLZMWu+NxAitoj+Ja/Gg6y7xN?=
 =?us-ascii?q?4SBEXvN1ni7Srt9oo16+k+iPyiBoUBxBqjtQgIKLvENiObjW95VaWHbE+g4N4n?=
 =?us-ascii?q?uUCxgQu9RlDdjv6OhszY3Nm7j0Myxq6M/P8I0XAM2QYMiAKns6dx3yBCTTEhAG?=
 =?us-ascii?q?XBasL2jUg0Ebm/aXpVOPqZ1vjZzhm4EHTLNBHHUzGukHEURuHNEEI5A/Cjoina?=
 =?us-ascii?q?TB1JZQzXW7pRjVAs5du8aUBbqpHfzzJWPB3vF/bBwSzOa9dNxLOw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AOAADndxdch0O0hNFkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGCXYEOJ4N8g3uEHot2UAEBBoEICCUUaIgGIQhpjUQ?=
 =?us-ascii?q?UgWMOAQEYEwGEQIMUIjQJDQEDAQEBAQEBAgETAQEBCgsJCCkjDII2JAGCYQEBA?=
 =?us-ascii?q?QEDAQIXCQQLAQUIARsdAQMCCQEBBQMCCwoDAgImAgIDIBEBBQEcBwwGAgEBAYM?=
 =?us-ascii?q?dgWgBAwgNBAGMF5AHPIsQfBYFAReCdwWELwoZJw1dUGcCBhJ5iheBHIEPgQeBE?=
 =?us-ascii?q?ScMgio1hEY7gwiCVwKBKgEBAYgLBgSHWo98AQYCAYFWBY95BgIWgV2FHIJ6ESa?=
 =?us-ascii?q?HKIk8jTWCTAIEAgQFAgUPIYElgg5wUDFtgU6CGwwXEoM4ilU+MoEFAQGNbwEB?=
X-IPAS-Result: =?us-ascii?q?A0AOAADndxdch0O0hNFkGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGCXYEOJ4N8g3uEHot2UAEBBoEICCUUaIgGIQhpjUQUgWMOAQEYEwGEQ?=
 =?us-ascii?q?IMUIjQJDQEDAQEBAQEBAgETAQEBCgsJCCkjDII2JAGCYQEBAQEDAQIXCQQLAQU?=
 =?us-ascii?q?IARsdAQMCCQEBBQMCCwoDAgImAgIDIBEBBQEcBwwGAgEBAYMdgWgBAwgNBAGMF?=
 =?us-ascii?q?5AHPIsQfBYFAReCdwWELwoZJw1dUGcCBhJ5iheBHIEPgQeBEScMgio1hEY7gwi?=
 =?us-ascii?q?CVwKBKgEBAYgLBgSHWo98AQYCAYFWBY95BgIWgV2FHIJ6ESaHKIk8jTWCTAIEA?=
 =?us-ascii?q?gQFAgUPIYElgg5wUDFtgU6CGwwXEoM4ilU+MoEFAQGNbwEB?=
X-IronPort-AV: E=Sophos;i="5.56,365,1539673200"; 
   d="scan'208";a="57168875"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 17 Dec 2018 02:19:34 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1731789AbeLQKTb (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 17 Dec 2018 05:19:31 -0500
Received: from mail-lj1-f193.google.com ([209.85.208.193]:43247 "EHLO
        mail-lj1-f193.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726831AbeLQKTb (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 17 Dec 2018 05:19:31 -0500
Received: by mail-lj1-f193.google.com with SMTP id 83-v6so10435606ljf.10
        for <linux-kernel@vger.kernel.org>; Mon, 17 Dec 2018 02:19:27 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=subject:from:to:cc:references:message-id:date:user-agent
         :mime-version:in-reply-to:content-transfer-encoding:content-language;
        bh=YliEj6tBXVlWRUVdtqebcpTzu/bv0zdcpsV2FqyDu68=;
        b=s6RjLzEV5nVQv8zBZrTG0CJ3BB45MjQRTlTX3FmtqXuK2F19k4KqMzxmODmYCnWkm2
         DS3SBQJBe1kFTa31LYFSWlKNeuYjwwhGnz/8ul//9w9ACfw4X2b0grod16+cVC54cTZb
         99uy5mLhb6OSxhjYffDlr2THh2rW+nJfCeWGVV+dNv7j7GlZ2qawJORqesccFZ5IjcMk
         2ci6CRvzNF//LdmC1etiXEtb4+JGiK2TF6j8ZEIzucPOhCqGH94ijLO+mout+MKd+Ty1
         YCwvE23fOP5z/oF3DfyfRnVIcgSn6eoE0y5RQq6FTKSeew4mOddEIeKCwH+Yd1tgup3q
         mDZQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:subject:from:to:cc:references:message-id:date
         :user-agent:mime-version:in-reply-to:content-transfer-encoding
         :content-language;
        bh=YliEj6tBXVlWRUVdtqebcpTzu/bv0zdcpsV2FqyDu68=;
        b=KBbhZR3jhwUg2APuyh3u4H9Cevnwanccojdq0wPGggL3Ze2gww2df2Wc5xugOv4A7f
         9w5bKmz3m7QnwYtZFcb37BPQHNzEZsehWAuiEYoPIwOHRJPOv0ZN9WeDHdwgVvq6/qkf
         tjQNQRbLjY5N7WyFCQ/CAo/PViQJqMRxlhu/8L3UZnnX+559/uCMTW7b45ILtG1D6EKQ
         274E06IibVj5sUtwWrsfZ/e125wH02Nl1hB7W3AF8mEbHxVDW2M9XqvUAXREjS/jLX1u
         e0LvBv/tHWLnpYq92QDVKebNqmygUamfuQi6TK5K4ICUxk7iHmgGMNLEb0ugB9DE7Z7t
         8xyg==
X-Gm-Message-State: AA+aEWZ/COjjC8iJ1UShiIuNIkuspzysDB14lOnaYTU5Cz1bDSU6zyPb
        Ky4idtxEueDaKgAGB95T1ZQ=
X-Google-Smtp-Source: AFSGD/UcH1GusiuLGIBR+q12r+1wg6f+2IldpVtf2uSeWG6HbJbgrPtxCSKjWpDe3blmmZcnHggbGA==
X-Received: by 2002:a2e:917:: with SMTP id 23-v6mr6707970ljj.1.1545041965819;
        Mon, 17 Dec 2018 02:19:25 -0800 (PST)
Received: from [10.17.182.20] (ll-22.209.223.85.sovam.net.ua. [85.223.209.22])
        by smtp.gmail.com with ESMTPSA id h203sm2597815lfe.44.2018.12.17.02.19.24
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Mon, 17 Dec 2018 02:19:24 -0800 (PST)
Subject: Re: [Xen-devel][PATCH v2 2/3] drm/xen-front: Use Xen common shared
 buffer implementation
From: Oleksandr Andrushchenko <andr2000@gmail.com>
To: jgross@suse.com, boris.ostrovsky@oracle.com
Cc: Daniel Vetter <daniel.vetter@ffwll.ch>,
        xen-devel@lists.xenproject.org, linux-kernel@vger.kernel.org,
        dri-devel@lists.freedesktop.org, alsa-devel@alsa-project.org,
        Oleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>
References: <20181130074205.20496-1-andr2000@gmail.com>
 <20181130074205.20496-2-andr2000@gmail.com>
 <3c69d924-11e1-7037-bfa5-276d22b245fe@gmail.com>
 <27491aa5-3548-4c39-13a2-132c738fae14@gmail.com>
Message-ID: <71920419-f0ef-8489-35ff-ff8375cb7361@gmail.com>
Date: Mon, 17 Dec 2018 12:19:23 +0200
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.2.1
MIME-Version: 1.0
In-Reply-To: <27491aa5-3548-4c39-13a2-132c738fae14@gmail.com>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 8bit
Content-Language: en-US
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hello, Juergen, Boris!

As this DRM part of the series is the only one which needs ack/nack

(and it might take quite some time to complete) could we please

merge the patches 1 and 3 now that already have ack/r-b?

Thank you,

Oleksandr

On 12/13/18 12:16 PM, Oleksandr Andrushchenko wrote:
> bump
>
> On 12/5/18 10:20 AM, Oleksandr Andrushchenko wrote:
>> Hello, Daniel!
>>
>> Could you please ack/nack the patch, so either we can merge the
>>
>> series or I can address your comments if any
>>
>> Thank you,
>>
>> Oleksandr
>>
>> On 11/30/18 9:42 AM, Oleksandr Andrushchenko wrote:
>>> From: Oleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>
>>>
>>> Use page directory based shared buffer implementation
>>> now available as common code for Xen frontend drivers.
>>>
>>> Remove flushing of shared buffer on page flip as this
>>> workaround needs a proper fix.
>>>
>>> Signed-off-by: Oleksandr Andrushchenko 
>>> <oleksandr_andrushchenko@epam.com>
>>> ---
>>>   drivers/gpu/drm/xen/Kconfig               |   1 +
>>>   drivers/gpu/drm/xen/Makefile              |   1 -
>>>   drivers/gpu/drm/xen/xen_drm_front.c       |  65 ++--
>>>   drivers/gpu/drm/xen/xen_drm_front_gem.c   |   1 -
>>>   drivers/gpu/drm/xen/xen_drm_front_shbuf.c | 414 
>>> ----------------------
>>>   drivers/gpu/drm/xen/xen_drm_front_shbuf.h |  64 ----
>>>   6 files changed, 26 insertions(+), 520 deletions(-)
>>>   delete mode 100644 drivers/gpu/drm/xen/xen_drm_front_shbuf.c
>>>   delete mode 100644 drivers/gpu/drm/xen/xen_drm_front_shbuf.h
>>>
>>> diff --git a/drivers/gpu/drm/xen/Kconfig b/drivers/gpu/drm/xen/Kconfig
>>> index 4cca160782ab..f969d486855d 100644
>>> --- a/drivers/gpu/drm/xen/Kconfig
>>> +++ b/drivers/gpu/drm/xen/Kconfig
>>> @@ -12,6 +12,7 @@ config DRM_XEN_FRONTEND
>>>       select DRM_KMS_HELPER
>>>       select VIDEOMODE_HELPERS
>>>       select XEN_XENBUS_FRONTEND
>>> +    select XEN_FRONT_PGDIR_SHBUF
>>>       help
>>>         Choose this option if you want to enable a para-virtualized
>>>         frontend DRM/KMS driver for Xen guest OSes.
>>> diff --git a/drivers/gpu/drm/xen/Makefile 
>>> b/drivers/gpu/drm/xen/Makefile
>>> index 712afff5ffc3..825905f67faa 100644
>>> --- a/drivers/gpu/drm/xen/Makefile
>>> +++ b/drivers/gpu/drm/xen/Makefile
>>> @@ -4,7 +4,6 @@ drm_xen_front-objs := xen_drm_front.o \
>>>                 xen_drm_front_kms.o \
>>>                 xen_drm_front_conn.o \
>>>                 xen_drm_front_evtchnl.o \
>>> -              xen_drm_front_shbuf.o \
>>>                 xen_drm_front_cfg.o \
>>>                 xen_drm_front_gem.o
>>>   diff --git a/drivers/gpu/drm/xen/xen_drm_front.c 
>>> b/drivers/gpu/drm/xen/xen_drm_front.c
>>> index 6b6d5ab82ec3..4d3d36fc3a5d 100644
>>> --- a/drivers/gpu/drm/xen/xen_drm_front.c
>>> +++ b/drivers/gpu/drm/xen/xen_drm_front.c
>>> @@ -19,6 +19,7 @@
>>>   #include <xen/xen.h>
>>>   #include <xen/xenbus.h>
>>>   +#include <xen/xen-front-pgdir-shbuf.h>
>>>   #include <xen/interface/io/displif.h>
>>>     #include "xen_drm_front.h"
>>> @@ -26,28 +27,20 @@
>>>   #include "xen_drm_front_evtchnl.h"
>>>   #include "xen_drm_front_gem.h"
>>>   #include "xen_drm_front_kms.h"
>>> -#include "xen_drm_front_shbuf.h"
>>>     struct xen_drm_front_dbuf {
>>>       struct list_head list;
>>>       u64 dbuf_cookie;
>>>       u64 fb_cookie;
>>> -    struct xen_drm_front_shbuf *shbuf;
>>> +
>>> +    struct xen_front_pgdir_shbuf shbuf;
>>>   };
>>>   -static int dbuf_add_to_list(struct xen_drm_front_info *front_info,
>>> -                struct xen_drm_front_shbuf *shbuf, u64 dbuf_cookie)
>>> +static void dbuf_add_to_list(struct xen_drm_front_info *front_info,
>>> +                 struct xen_drm_front_dbuf *dbuf, u64 dbuf_cookie)
>>>   {
>>> -    struct xen_drm_front_dbuf *dbuf;
>>> -
>>> -    dbuf = kzalloc(sizeof(*dbuf), GFP_KERNEL);
>>> -    if (!dbuf)
>>> -        return -ENOMEM;
>>> -
>>>       dbuf->dbuf_cookie = dbuf_cookie;
>>> -    dbuf->shbuf = shbuf;
>>>       list_add(&dbuf->list, &front_info->dbuf_list);
>>> -    return 0;
>>>   }
>>>     static struct xen_drm_front_dbuf *dbuf_get(struct list_head 
>>> *dbuf_list,
>>> @@ -62,15 +55,6 @@ static struct xen_drm_front_dbuf *dbuf_get(struct 
>>> list_head *dbuf_list,
>>>       return NULL;
>>>   }
>>>   -static void dbuf_flush_fb(struct list_head *dbuf_list, u64 
>>> fb_cookie)
>>> -{
>>> -    struct xen_drm_front_dbuf *buf, *q;
>>> -
>>> -    list_for_each_entry_safe(buf, q, dbuf_list, list)
>>> -        if (buf->fb_cookie == fb_cookie)
>>> -            xen_drm_front_shbuf_flush(buf->shbuf);
>>> -}
>>> -
>>>   static void dbuf_free(struct list_head *dbuf_list, u64 dbuf_cookie)
>>>   {
>>>       struct xen_drm_front_dbuf *buf, *q;
>>> @@ -78,8 +62,8 @@ static void dbuf_free(struct list_head *dbuf_list, 
>>> u64 dbuf_cookie)
>>>       list_for_each_entry_safe(buf, q, dbuf_list, list)
>>>           if (buf->dbuf_cookie == dbuf_cookie) {
>>>               list_del(&buf->list);
>>> -            xen_drm_front_shbuf_unmap(buf->shbuf);
>>> -            xen_drm_front_shbuf_free(buf->shbuf);
>>> +            xen_front_pgdir_shbuf_unmap(&buf->shbuf);
>>> +            xen_front_pgdir_shbuf_free(&buf->shbuf);
>>>               kfree(buf);
>>>               break;
>>>           }
>>> @@ -91,8 +75,8 @@ static void dbuf_free_all(struct list_head 
>>> *dbuf_list)
>>>         list_for_each_entry_safe(buf, q, dbuf_list, list) {
>>>           list_del(&buf->list);
>>> -        xen_drm_front_shbuf_unmap(buf->shbuf);
>>> -        xen_drm_front_shbuf_free(buf->shbuf);
>>> +        xen_front_pgdir_shbuf_unmap(&buf->shbuf);
>>> +        xen_front_pgdir_shbuf_free(&buf->shbuf);
>>>           kfree(buf);
>>>       }
>>>   }
>>> @@ -171,9 +155,9 @@ int xen_drm_front_dbuf_create(struct 
>>> xen_drm_front_info *front_info,
>>>                     u32 bpp, u64 size, struct page **pages)
>>>   {
>>>       struct xen_drm_front_evtchnl *evtchnl;
>>> -    struct xen_drm_front_shbuf *shbuf;
>>> +    struct xen_drm_front_dbuf *dbuf;
>>>       struct xendispl_req *req;
>>> -    struct xen_drm_front_shbuf_cfg buf_cfg;
>>> +    struct xen_front_pgdir_shbuf_cfg buf_cfg;
>>>       unsigned long flags;
>>>       int ret;
>>>   @@ -181,28 +165,29 @@ int xen_drm_front_dbuf_create(struct 
>>> xen_drm_front_info *front_info,
>>>       if (unlikely(!evtchnl))
>>>           return -EIO;
>>>   +    dbuf = kzalloc(sizeof(*dbuf), GFP_KERNEL);
>>> +    if (!dbuf)
>>> +        return -ENOMEM;
>>> +
>>> +    dbuf_add_to_list(front_info, dbuf, dbuf_cookie);
>>> +
>>>       memset(&buf_cfg, 0, sizeof(buf_cfg));
>>>       buf_cfg.xb_dev = front_info->xb_dev;
>>> +    buf_cfg.num_pages = DIV_ROUND_UP(size, PAGE_SIZE);
>>>       buf_cfg.pages = pages;
>>> -    buf_cfg.size = size;
>>> +    buf_cfg.pgdir = &dbuf->shbuf;
>>>       buf_cfg.be_alloc = front_info->cfg.be_alloc;
>>>   -    shbuf = xen_drm_front_shbuf_alloc(&buf_cfg);
>>> -    if (IS_ERR(shbuf))
>>> -        return PTR_ERR(shbuf);
>>> -
>>> -    ret = dbuf_add_to_list(front_info, shbuf, dbuf_cookie);
>>> -    if (ret < 0) {
>>> -        xen_drm_front_shbuf_free(shbuf);
>>> -        return ret;
>>> -    }
>>> +    ret = xen_front_pgdir_shbuf_alloc(&buf_cfg);
>>> +    if (ret < 0)
>>> +        goto fail_shbuf_alloc;
>>>         mutex_lock(&evtchnl->u.req.req_io_lock);
>>>         spin_lock_irqsave(&front_info->io_lock, flags);
>>>       req = be_prepare_req(evtchnl, XENDISPL_OP_DBUF_CREATE);
>>>       req->op.dbuf_create.gref_directory =
>>> -            xen_drm_front_shbuf_get_dir_start(shbuf);
>>> + xen_front_pgdir_shbuf_get_dir_start(&dbuf->shbuf);
>>>       req->op.dbuf_create.buffer_sz = size;
>>>       req->op.dbuf_create.dbuf_cookie = dbuf_cookie;
>>>       req->op.dbuf_create.width = width;
>>> @@ -221,7 +206,7 @@ int xen_drm_front_dbuf_create(struct 
>>> xen_drm_front_info *front_info,
>>>       if (ret < 0)
>>>           goto fail;
>>>   -    ret = xen_drm_front_shbuf_map(shbuf);
>>> +    ret = xen_front_pgdir_shbuf_map(&dbuf->shbuf);
>>>       if (ret < 0)
>>>           goto fail;
>>>   @@ -230,6 +215,7 @@ int xen_drm_front_dbuf_create(struct 
>>> xen_drm_front_info *front_info,
>>>     fail:
>>>       mutex_unlock(&evtchnl->u.req.req_io_lock);
>>> +fail_shbuf_alloc:
>>>       dbuf_free(&front_info->dbuf_list, dbuf_cookie);
>>>       return ret;
>>>   }
>>> @@ -358,7 +344,6 @@ int xen_drm_front_page_flip(struct 
>>> xen_drm_front_info *front_info,
>>>       if (unlikely(conn_idx >= front_info->num_evt_pairs))
>>>           return -EINVAL;
>>>   -    dbuf_flush_fb(&front_info->dbuf_list, fb_cookie);
>>>       evtchnl = &front_info->evt_pairs[conn_idx].req;
>>>         mutex_lock(&evtchnl->u.req.req_io_lock);
>>> diff --git a/drivers/gpu/drm/xen/xen_drm_front_gem.c 
>>> b/drivers/gpu/drm/xen/xen_drm_front_gem.c
>>> index c85bfe7571cb..53be4c7dc0a4 100644
>>> --- a/drivers/gpu/drm/xen/xen_drm_front_gem.c
>>> +++ b/drivers/gpu/drm/xen/xen_drm_front_gem.c
>>> @@ -22,7 +22,6 @@
>>>   #include <xen/balloon.h>
>>>     #include "xen_drm_front.h"
>>> -#include "xen_drm_front_shbuf.h"
>>>     struct xen_gem_object {
>>>       struct drm_gem_object base;
>>> diff --git a/drivers/gpu/drm/xen/xen_drm_front_shbuf.c 
>>> b/drivers/gpu/drm/xen/xen_drm_front_shbuf.c
>>> deleted file mode 100644
>>> index d333b67cc1a0..000000000000
>>> --- a/drivers/gpu/drm/xen/xen_drm_front_shbuf.c
>>> +++ /dev/null
>>> @@ -1,414 +0,0 @@
>>> -// SPDX-License-Identifier: GPL-2.0 OR MIT
>>> -
>>> -/*
>>> - *  Xen para-virtual DRM device
>>> - *
>>> - * Copyright (C) 2016-2018 EPAM Systems Inc.
>>> - *
>>> - * Author: Oleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>
>>> - */
>>> -
>>> -#include <drm/drmP.h>
>>> -
>>> -#if defined(CONFIG_X86)
>>> -#include <drm/drm_cache.h>
>>> -#endif
>>> -#include <linux/errno.h>
>>> -#include <linux/mm.h>
>>> -
>>> -#include <asm/xen/hypervisor.h>
>>> -#include <xen/balloon.h>
>>> -#include <xen/xen.h>
>>> -#include <xen/xenbus.h>
>>> -#include <xen/interface/io/ring.h>
>>> -#include <xen/interface/io/displif.h>
>>> -
>>> -#include "xen_drm_front.h"
>>> -#include "xen_drm_front_shbuf.h"
>>> -
>>> -struct xen_drm_front_shbuf_ops {
>>> -    /*
>>> -     * Calculate number of grefs required to handle this buffer,
>>> -     * e.g. if grefs are required for page directory only or the 
>>> buffer
>>> -     * pages as well.
>>> -     */
>>> -    void (*calc_num_grefs)(struct xen_drm_front_shbuf *buf);
>>> -    /* Fill page directory according to para-virtual display 
>>> protocol. */
>>> -    void (*fill_page_dir)(struct xen_drm_front_shbuf *buf);
>>> -    /* Claim grant references for the pages of the buffer. */
>>> -    int (*grant_refs_for_buffer)(struct xen_drm_front_shbuf *buf,
>>> -                     grant_ref_t *priv_gref_head, int gref_idx);
>>> -    /* Map grant references of the buffer. */
>>> -    int (*map)(struct xen_drm_front_shbuf *buf);
>>> -    /* Unmap grant references of the buffer. */
>>> -    int (*unmap)(struct xen_drm_front_shbuf *buf);
>>> -};
>>> -
>>> -grant_ref_t xen_drm_front_shbuf_get_dir_start(struct 
>>> xen_drm_front_shbuf *buf)
>>> -{
>>> -    if (!buf->grefs)
>>> -        return GRANT_INVALID_REF;
>>> -
>>> -    return buf->grefs[0];
>>> -}
>>> -
>>> -int xen_drm_front_shbuf_map(struct xen_drm_front_shbuf *buf)
>>> -{
>>> -    if (buf->ops->map)
>>> -        return buf->ops->map(buf);
>>> -
>>> -    /* no need to map own grant references */
>>> -    return 0;
>>> -}
>>> -
>>> -int xen_drm_front_shbuf_unmap(struct xen_drm_front_shbuf *buf)
>>> -{
>>> -    if (buf->ops->unmap)
>>> -        return buf->ops->unmap(buf);
>>> -
>>> -    /* no need to unmap own grant references */
>>> -    return 0;
>>> -}
>>> -
>>> -void xen_drm_front_shbuf_flush(struct xen_drm_front_shbuf *buf)
>>> -{
>>> -#if defined(CONFIG_X86)
>>> -    drm_clflush_pages(buf->pages, buf->num_pages);
>>> -#endif
>>> -}
>>> -
>>> -void xen_drm_front_shbuf_free(struct xen_drm_front_shbuf *buf)
>>> -{
>>> -    if (buf->grefs) {
>>> -        int i;
>>> -
>>> -        for (i = 0; i < buf->num_grefs; i++)
>>> -            if (buf->grefs[i] != GRANT_INVALID_REF)
>>> -                gnttab_end_foreign_access(buf->grefs[i],
>>> -                              0, 0UL);
>>> -    }
>>> -    kfree(buf->grefs);
>>> -    kfree(buf->directory);
>>> -    kfree(buf);
>>> -}
>>> -
>>> -/*
>>> - * number of grefs a page can hold with respect to the
>>> - * struct xendispl_page_directory header
>>> - */
>>> -#define XEN_DRM_NUM_GREFS_PER_PAGE ((PAGE_SIZE - \
>>> -        offsetof(struct xendispl_page_directory, gref)) / \
>>> -        sizeof(grant_ref_t))
>>> -
>>> -static int get_num_pages_dir(struct xen_drm_front_shbuf *buf)
>>> -{
>>> -    /* number of pages the page directory consumes itself */
>>> -    return DIV_ROUND_UP(buf->num_pages, XEN_DRM_NUM_GREFS_PER_PAGE);
>>> -}
>>> -
>>> -static void backend_calc_num_grefs(struct xen_drm_front_shbuf *buf)
>>> -{
>>> -    /* only for pages the page directory consumes itself */
>>> -    buf->num_grefs = get_num_pages_dir(buf);
>>> -}
>>> -
>>> -static void guest_calc_num_grefs(struct xen_drm_front_shbuf *buf)
>>> -{
>>> -    /*
>>> -     * number of pages the page directory consumes itself
>>> -     * plus grefs for the buffer pages
>>> -     */
>>> -    buf->num_grefs = get_num_pages_dir(buf) + buf->num_pages;
>>> -}
>>> -
>>> -#define xen_page_to_vaddr(page) \
>>> -        ((uintptr_t)pfn_to_kaddr(page_to_xen_pfn(page)))
>>> -
>>> -static int backend_unmap(struct xen_drm_front_shbuf *buf)
>>> -{
>>> -    struct gnttab_unmap_grant_ref *unmap_ops;
>>> -    int i, ret;
>>> -
>>> -    if (!buf->pages || !buf->backend_map_handles || !buf->grefs)
>>> -        return 0;
>>> -
>>> -    unmap_ops = kcalloc(buf->num_pages, sizeof(*unmap_ops),
>>> -                GFP_KERNEL);
>>> -    if (!unmap_ops) {
>>> -        DRM_ERROR("Failed to get memory while unmapping\n");
>>> -        return -ENOMEM;
>>> -    }
>>> -
>>> -    for (i = 0; i < buf->num_pages; i++) {
>>> -        phys_addr_t addr;
>>> -
>>> -        addr = xen_page_to_vaddr(buf->pages[i]);
>>> -        gnttab_set_unmap_op(&unmap_ops[i], addr, GNTMAP_host_map,
>>> -                    buf->backend_map_handles[i]);
>>> -    }
>>> -
>>> -    ret = gnttab_unmap_refs(unmap_ops, NULL, buf->pages,
>>> -                buf->num_pages);
>>> -
>>> -    for (i = 0; i < buf->num_pages; i++) {
>>> -        if (unlikely(unmap_ops[i].status != GNTST_okay))
>>> -            DRM_ERROR("Failed to unmap page %d: %d\n",
>>> -                  i, unmap_ops[i].status);
>>> -    }
>>> -
>>> -    if (ret)
>>> -        DRM_ERROR("Failed to unmap grant references, ret %d", ret);
>>> -
>>> -    kfree(unmap_ops);
>>> -    kfree(buf->backend_map_handles);
>>> -    buf->backend_map_handles = NULL;
>>> -    return ret;
>>> -}
>>> -
>>> -static int backend_map(struct xen_drm_front_shbuf *buf)
>>> -{
>>> -    struct gnttab_map_grant_ref *map_ops = NULL;
>>> -    unsigned char *ptr;
>>> -    int ret, cur_gref, cur_dir_page, cur_page, grefs_left;
>>> -
>>> -    map_ops = kcalloc(buf->num_pages, sizeof(*map_ops), GFP_KERNEL);
>>> -    if (!map_ops)
>>> -        return -ENOMEM;
>>> -
>>> -    buf->backend_map_handles = kcalloc(buf->num_pages,
>>> -                       sizeof(*buf->backend_map_handles),
>>> -                       GFP_KERNEL);
>>> -    if (!buf->backend_map_handles) {
>>> -        kfree(map_ops);
>>> -        return -ENOMEM;
>>> -    }
>>> -
>>> -    /*
>>> -     * read page directory to get grefs from the backend: for external
>>> -     * buffer we only allocate buf->grefs for the page directory,
>>> -     * so buf->num_grefs has number of pages in the page directory 
>>> itself
>>> -     */
>>> -    ptr = buf->directory;
>>> -    grefs_left = buf->num_pages;
>>> -    cur_page = 0;
>>> -    for (cur_dir_page = 0; cur_dir_page < buf->num_grefs; 
>>> cur_dir_page++) {
>>> -        struct xendispl_page_directory *page_dir =
>>> -                (struct xendispl_page_directory *)ptr;
>>> -        int to_copy = XEN_DRM_NUM_GREFS_PER_PAGE;
>>> -
>>> -        if (to_copy > grefs_left)
>>> -            to_copy = grefs_left;
>>> -
>>> -        for (cur_gref = 0; cur_gref < to_copy; cur_gref++) {
>>> -            phys_addr_t addr;
>>> -
>>> -            addr = xen_page_to_vaddr(buf->pages[cur_page]);
>>> -            gnttab_set_map_op(&map_ops[cur_page], addr,
>>> -                      GNTMAP_host_map,
>>> -                      page_dir->gref[cur_gref],
>>> -                      buf->xb_dev->otherend_id);
>>> -            cur_page++;
>>> -        }
>>> -
>>> -        grefs_left -= to_copy;
>>> -        ptr += PAGE_SIZE;
>>> -    }
>>> -    ret = gnttab_map_refs(map_ops, NULL, buf->pages, buf->num_pages);
>>> -
>>> -    /* save handles even if error, so we can unmap */
>>> -    for (cur_page = 0; cur_page < buf->num_pages; cur_page++) {
>>> -        buf->backend_map_handles[cur_page] = map_ops[cur_page].handle;
>>> -        if (unlikely(map_ops[cur_page].status != GNTST_okay))
>>> -            DRM_ERROR("Failed to map page %d: %d\n",
>>> -                  cur_page, map_ops[cur_page].status);
>>> -    }
>>> -
>>> -    if (ret) {
>>> -        DRM_ERROR("Failed to map grant references, ret %d", ret);
>>> -        backend_unmap(buf);
>>> -    }
>>> -
>>> -    kfree(map_ops);
>>> -    return ret;
>>> -}
>>> -
>>> -static void backend_fill_page_dir(struct xen_drm_front_shbuf *buf)
>>> -{
>>> -    struct xendispl_page_directory *page_dir;
>>> -    unsigned char *ptr;
>>> -    int i, num_pages_dir;
>>> -
>>> -    ptr = buf->directory;
>>> -    num_pages_dir = get_num_pages_dir(buf);
>>> -
>>> -    /* fill only grefs for the page directory itself */
>>> -    for (i = 0; i < num_pages_dir - 1; i++) {
>>> -        page_dir = (struct xendispl_page_directory *)ptr;
>>> -
>>> -        page_dir->gref_dir_next_page = buf->grefs[i + 1];
>>> -        ptr += PAGE_SIZE;
>>> -    }
>>> -    /* last page must say there is no more pages */
>>> -    page_dir = (struct xendispl_page_directory *)ptr;
>>> -    page_dir->gref_dir_next_page = GRANT_INVALID_REF;
>>> -}
>>> -
>>> -static void guest_fill_page_dir(struct xen_drm_front_shbuf *buf)
>>> -{
>>> -    unsigned char *ptr;
>>> -    int cur_gref, grefs_left, to_copy, i, num_pages_dir;
>>> -
>>> -    ptr = buf->directory;
>>> -    num_pages_dir = get_num_pages_dir(buf);
>>> -
>>> -    /*
>>> -     * while copying, skip grefs at start, they are for pages
>>> -     * granted for the page directory itself
>>> -     */
>>> -    cur_gref = num_pages_dir;
>>> -    grefs_left = buf->num_pages;
>>> -    for (i = 0; i < num_pages_dir; i++) {
>>> -        struct xendispl_page_directory *page_dir =
>>> -                (struct xendispl_page_directory *)ptr;
>>> -
>>> -        if (grefs_left <= XEN_DRM_NUM_GREFS_PER_PAGE) {
>>> -            to_copy = grefs_left;
>>> -            page_dir->gref_dir_next_page = GRANT_INVALID_REF;
>>> -        } else {
>>> -            to_copy = XEN_DRM_NUM_GREFS_PER_PAGE;
>>> -            page_dir->gref_dir_next_page = buf->grefs[i + 1];
>>> -        }
>>> -        memcpy(&page_dir->gref, &buf->grefs[cur_gref],
>>> -               to_copy * sizeof(grant_ref_t));
>>> -        ptr += PAGE_SIZE;
>>> -        grefs_left -= to_copy;
>>> -        cur_gref += to_copy;
>>> -    }
>>> -}
>>> -
>>> -static int guest_grant_refs_for_buffer(struct xen_drm_front_shbuf 
>>> *buf,
>>> -                       grant_ref_t *priv_gref_head,
>>> -                       int gref_idx)
>>> -{
>>> -    int i, cur_ref, otherend_id;
>>> -
>>> -    otherend_id = buf->xb_dev->otherend_id;
>>> -    for (i = 0; i < buf->num_pages; i++) {
>>> -        cur_ref = gnttab_claim_grant_reference(priv_gref_head);
>>> -        if (cur_ref < 0)
>>> -            return cur_ref;
>>> -
>>> -        gnttab_grant_foreign_access_ref(cur_ref, otherend_id,
>>> -                        xen_page_to_gfn(buf->pages[i]),
>>> -                        0);
>>> -        buf->grefs[gref_idx++] = cur_ref;
>>> -    }
>>> -    return 0;
>>> -}
>>> -
>>> -static int grant_references(struct xen_drm_front_shbuf *buf)
>>> -{
>>> -    grant_ref_t priv_gref_head;
>>> -    int ret, i, j, cur_ref;
>>> -    int otherend_id, num_pages_dir;
>>> -
>>> -    ret = gnttab_alloc_grant_references(buf->num_grefs, 
>>> &priv_gref_head);
>>> -    if (ret < 0) {
>>> -        DRM_ERROR("Cannot allocate grant references\n");
>>> -        return ret;
>>> -    }
>>> -
>>> -    otherend_id = buf->xb_dev->otherend_id;
>>> -    j = 0;
>>> -    num_pages_dir = get_num_pages_dir(buf);
>>> -    for (i = 0; i < num_pages_dir; i++) {
>>> -        unsigned long frame;
>>> -
>>> -        cur_ref = gnttab_claim_grant_reference(&priv_gref_head);
>>> -        if (cur_ref < 0)
>>> -            return cur_ref;
>>> -
>>> -        frame = xen_page_to_gfn(virt_to_page(buf->directory +
>>> -                    PAGE_SIZE * i));
>>> -        gnttab_grant_foreign_access_ref(cur_ref, otherend_id, 
>>> frame, 0);
>>> -        buf->grefs[j++] = cur_ref;
>>> -    }
>>> -
>>> -    if (buf->ops->grant_refs_for_buffer) {
>>> -        ret = buf->ops->grant_refs_for_buffer(buf, &priv_gref_head, 
>>> j);
>>> -        if (ret)
>>> -            return ret;
>>> -    }
>>> -
>>> -    gnttab_free_grant_references(priv_gref_head);
>>> -    return 0;
>>> -}
>>> -
>>> -static int alloc_storage(struct xen_drm_front_shbuf *buf)
>>> -{
>>> -    buf->grefs = kcalloc(buf->num_grefs, sizeof(*buf->grefs), 
>>> GFP_KERNEL);
>>> -    if (!buf->grefs)
>>> -        return -ENOMEM;
>>> -
>>> -    buf->directory = kcalloc(get_num_pages_dir(buf), PAGE_SIZE, 
>>> GFP_KERNEL);
>>> -    if (!buf->directory)
>>> -        return -ENOMEM;
>>> -
>>> -    return 0;
>>> -}
>>> -
>>> -/*
>>> - * For be allocated buffers we don't need grant_refs_for_buffer as 
>>> those
>>> - * grant references are allocated at backend side
>>> - */
>>> -static const struct xen_drm_front_shbuf_ops backend_ops = {
>>> -    .calc_num_grefs = backend_calc_num_grefs,
>>> -    .fill_page_dir = backend_fill_page_dir,
>>> -    .map = backend_map,
>>> -    .unmap = backend_unmap
>>> -};
>>> -
>>> -/* For locally granted references we do not need to map/unmap the 
>>> references */
>>> -static const struct xen_drm_front_shbuf_ops local_ops = {
>>> -    .calc_num_grefs = guest_calc_num_grefs,
>>> -    .fill_page_dir = guest_fill_page_dir,
>>> -    .grant_refs_for_buffer = guest_grant_refs_for_buffer,
>>> -};
>>> -
>>> -struct xen_drm_front_shbuf *
>>> -xen_drm_front_shbuf_alloc(struct xen_drm_front_shbuf_cfg *cfg)
>>> -{
>>> -    struct xen_drm_front_shbuf *buf;
>>> -    int ret;
>>> -
>>> -    buf = kzalloc(sizeof(*buf), GFP_KERNEL);
>>> -    if (!buf)
>>> -        return ERR_PTR(-ENOMEM);
>>> -
>>> -    if (cfg->be_alloc)
>>> -        buf->ops = &backend_ops;
>>> -    else
>>> -        buf->ops = &local_ops;
>>> -
>>> -    buf->xb_dev = cfg->xb_dev;
>>> -    buf->num_pages = DIV_ROUND_UP(cfg->size, PAGE_SIZE);
>>> -    buf->pages = cfg->pages;
>>> -
>>> -    buf->ops->calc_num_grefs(buf);
>>> -
>>> -    ret = alloc_storage(buf);
>>> -    if (ret)
>>> -        goto fail;
>>> -
>>> -    ret = grant_references(buf);
>>> -    if (ret)
>>> -        goto fail;
>>> -
>>> -    buf->ops->fill_page_dir(buf);
>>> -
>>> -    return buf;
>>> -
>>> -fail:
>>> -    xen_drm_front_shbuf_free(buf);
>>> -    return ERR_PTR(ret);
>>> -}
>>> diff --git a/drivers/gpu/drm/xen/xen_drm_front_shbuf.h 
>>> b/drivers/gpu/drm/xen/xen_drm_front_shbuf.h
>>> deleted file mode 100644
>>> index 7545c692539e..000000000000
>>> --- a/drivers/gpu/drm/xen/xen_drm_front_shbuf.h
>>> +++ /dev/null
>>> @@ -1,64 +0,0 @@
>>> -/* SPDX-License-Identifier: GPL-2.0 OR MIT */
>>> -
>>> -/*
>>> - *  Xen para-virtual DRM device
>>> - *
>>> - * Copyright (C) 2016-2018 EPAM Systems Inc.
>>> - *
>>> - * Author: Oleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>
>>> - */
>>> -
>>> -#ifndef __XEN_DRM_FRONT_SHBUF_H_
>>> -#define __XEN_DRM_FRONT_SHBUF_H_
>>> -
>>> -#include <linux/kernel.h>
>>> -#include <linux/scatterlist.h>
>>> -
>>> -#include <xen/grant_table.h>
>>> -
>>> -struct xen_drm_front_shbuf {
>>> -    /*
>>> -     * number of references granted for the backend use:
>>> -     *  - for allocated/imported dma-buf's this holds number of grant
>>> -     *    references for the page directory and pages of the buffer
>>> -     *  - for the buffer provided by the backend this holds number of
>>> -     *    grant references for the page directory as grant 
>>> references for
>>> -     *    the buffer will be provided by the backend
>>> -     */
>>> -    int num_grefs;
>>> -    grant_ref_t *grefs;
>>> -    unsigned char *directory;
>>> -
>>> -    int num_pages;
>>> -    struct page **pages;
>>> -
>>> -    struct xenbus_device *xb_dev;
>>> -
>>> -    /* these are the ops used internally depending on be_alloc mode */
>>> -    const struct xen_drm_front_shbuf_ops *ops;
>>> -
>>> -    /* Xen map handles for the buffer allocated by the backend */
>>> -    grant_handle_t *backend_map_handles;
>>> -};
>>> -
>>> -struct xen_drm_front_shbuf_cfg {
>>> -    struct xenbus_device *xb_dev;
>>> -    size_t size;
>>> -    struct page **pages;
>>> -    bool be_alloc;
>>> -};
>>> -
>>> -struct xen_drm_front_shbuf *
>>> -xen_drm_front_shbuf_alloc(struct xen_drm_front_shbuf_cfg *cfg);
>>> -
>>> -grant_ref_t xen_drm_front_shbuf_get_dir_start(struct 
>>> xen_drm_front_shbuf *buf);
>>> -
>>> -int xen_drm_front_shbuf_map(struct xen_drm_front_shbuf *buf);
>>> -
>>> -int xen_drm_front_shbuf_unmap(struct xen_drm_front_shbuf *buf);
>>> -
>>> -void xen_drm_front_shbuf_flush(struct xen_drm_front_shbuf *buf);
>>> -
>>> -void xen_drm_front_shbuf_free(struct xen_drm_front_shbuf *buf);
>>> -
>>> -#endif /* __XEN_DRM_FRONT_SHBUF_H_ */
