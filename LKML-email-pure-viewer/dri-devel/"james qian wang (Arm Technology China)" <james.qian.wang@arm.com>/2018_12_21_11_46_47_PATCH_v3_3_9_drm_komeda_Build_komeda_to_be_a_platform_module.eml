Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:49:46 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 6D7AC580522;
	Fri, 21 Dec 2018 03:47:00 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 21 Dec 2018 03:46:59 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A+mN6PhGNSuyPKMoODwzyZ51GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75osq/bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJVyJPHJ6y?=
 =?us-ascii?q?b5cBAeQCPOZXs4bzqFQVrRumBwShH//vyiZSi3PqwaE2z/ktHAfb1wIgBdIOt3?=
 =?us-ascii?q?HUoc37OKcQS++1ybfHzS7eZPNP2Dfy8o7IeQ0voP6WW7JwftfaxU0zGgPfi1Wb?=
 =?us-ascii?q?tJLrMC2J2eQNtWib6O5gVeWgi28ntgp8vDivxsYqiobTg44ZxE3P+CJ7wIkvIN?=
 =?us-ascii?q?23VlV7bcS9EJtRrS6aMZF6Q804TGFutyY30acJuYS+fCQQ1JsnwBvfZuWBfoOV?=
 =?us-ascii?q?7BzjU+ORLi15hHJjYL+/nhey/lKmyuHmWMi7ylBKriVDn9LRtX4NzwTe5tabRv?=
 =?us-ascii?q?Z55EutxDiC2x7J5u1ZIk04ibDXJp8jz7Ioi5YfrErOEjXolEjylqObdUYp9vKq?=
 =?us-ascii?q?5uj/bLXpuJyRO5Nxhwz7L6ghh8K/Aeo9PwUBUWWW9uq82bjj8ED9XLlHjvg7n6?=
 =?us-ascii?q?bZvZ/HPssWoLOyDRVP3YY58Rm/Ci+r0NQGknkDK1JIYAyHj4f3NFHUOvz4Dumw?=
 =?us-ascii?q?g06qkDh1w/DKJLrhAo/CLnTbkbfhe6hy61JExQYt0dxS44hYBqwPLf7tQEP9qd?=
 =?us-ascii?q?/VAgMjPwG1wevrENB92ZkfWWKLDK+ZKqTSsVqQ6+IrIumMYpIVuTnkJ/gm+fHu?=
 =?us-ascii?q?l3k5lkEZfaWw2psWZna4Eep8I0iCf3rsjckOEX0Qsgo9UuPqkluCXiBXZ3qoWK?=
 =?us-ascii?q?I8/D47BJq8DYjfXoCtnKCB3CCjE51SZ2BGCU6DHW3ndoWZQPoMbCOSIsl8kj0L?=
 =?us-ascii?q?T7ShSokh1Q2wuw/+0bZoMu3U+igAv5L5yNd1//HTlQ019TFsD8SSyWCNT31ukW?=
 =?us-ascii?q?MPXTM23L1/rlZ7yleMyqV4h/1YFdpO5/JGSAs6NJjcz/BkBND2QA7OYtCJSFO+?=
 =?us-ascii?q?SNW8HT4xVs4xw8MJY0tlAdqilRDD3y2pA7MPjbyEHp40/7nY33jwIcZ91nnH2L?=
 =?us-ascii?q?Mgj1kgXstAK2mmirRj+AjUAo7Di1+ZmLqydaQAwC7N83+OzWmUs0FeSgJwVaTF?=
 =?us-ascii?q?UmoZZkvZttn54kLCT7mzCbUoKAdByMiCKrdUZd3tl1lJWPDjONHGaWKrh2iwHQ?=
 =?us-ascii?q?qIxq+LbIfyZmoSxjvdB1YenwAT53mGMxM+CTmno27ZCDxuFlfvY0f3/Ol6qXO7?=
 =?us-ascii?q?SFI0zg6QY01g0bq15gAahfiGR/wP2bIEvT8rqy9oE1alw9LWF92AqhJ8c6pGf9?=
 =?us-ascii?q?My/k1L1WLDuAx7JZyvMaZii0UacwR2uUPuyhp2Bp9BkcgssHMl0g5yJbiE31NG?=
 =?us-ascii?q?cjOSxYrwNaHPKmnu4BCvbLbb2k3f0NaT/acP9PQ4qlX5sAG1DEYi9G9n091U03?=
 =?us-ascii?q?ua6ZXHFw4SUZP3UkYq+Bl2vbDaYi8h54zK0X1gK7W7sjjH29gxHusq1g6gf8tD?=
 =?us-ascii?q?MKODDAL9CckaCNahKeM0m1mldAkLPP1P+6EuOcOmdPyG2LCwMeZknTKmi3lH4Y?=
 =?us-ascii?q?9n3kKN8Sp8VvDH35Ifz/6E2QuHUi/2jE29vcDvhYBEeTYSE3K/yCj5HoJeerd+?=
 =?us-ascii?q?fIcLCWi0Jc23yc5zh5rsW35e6V6iCEkK2M6veRqOcVP92Rdc2lgQoXyigSG41S?=
 =?us-ascii?q?B7kyk1rqqD2yzD2/7idBsbNWFRXmltkFDsLZKyj98ERkiobhElmwe/6kb+2qdU?=
 =?us-ascii?q?ur5/L27VQUpTeyj2LmdiUra/t7aYYs5P7o8ovjtTUOimfV+aTbv9qQMA0yz/B2?=
 =?us-ascii?q?te2Cw7dzayt5T5nhx2kmKcIGxorHrEf8F93hPf5N3aRf5M0TsKXih4iT/LBlei?=
 =?us-ascii?q?O9ml58mbl5DGsuqmTWKuSoVTcTX3zYOHrCa753dlAQe8n/Cwnd3rCxM63jX419?=
 =?us-ascii?q?lpVCXIqgjzYo/w2qS+MOJneFRoBVDm58p7HIF+jpU/hJUK1XcGgZWV+GINkX3v?=
 =?us-ascii?q?PtVDxaL+cH0NSCYLwtHP5wjpwk9jLnOPx4/iUnWdw81hZ8S1Y28M2yI96dxKB7?=
 =?us-ascii?q?mQ7LBegSR1pV+4pxrLYfdhhjcd1ecu6HkCjuEKogUtzz+RArAPHUZCOyzsmA+F?=
 =?us-ascii?q?79S/rKVReWaufqK81Et4ndC9Er6CphtQV2r+epcnBSVw9NlwMErQ0H3v7YHpYN?=
 =?us-ascii?q?zQbdMQthKOiRvBgfZaKIktlvUUnypoInzyvWcqy+MgiRxu3Je6vJWIKml3/aK5?=
 =?us-ascii?q?BAJYOSPxZ88J5j7tiqNelN6M34+zBpVhBikLXJzwQPK0FzISsO7rNgeUHz06t3?=
 =?us-ascii?q?ebAqHfHQ6E5UdirnLPFY2rNn6NKHkYy9ViWAeSJEhFjA8IWzU6m4YzFhq2y8z5?=
 =?us-ascii?q?bEd5+jcR60bjpRRWzeJoMwT/Xn3bpAe1cTo0TJmfLBxL7gBN/UvVMMqe7v5tEC?=
 =?us-ascii?q?Fc5JGusAuNKmmDbQRSEW4JQlCEB0zkPrS259nP6e2YCfSlL/fUfbWCs+9eV+qL?=
 =?us-ascii?q?xZKy1Itp5S2MO96LPnljCf07x0VCUWp4G8TfhzUAVSgXmzjRYM6coRe24jd3od?=
 =?us-ascii?q?yn8PT3RALv4pOCCrtVMdVy4hC2nL2MN+iKiCZiLjZY0JwMyGTMyLge2l4Sli5v?=
 =?us-ascii?q?eyOsEbQGqS7CUqbQlrVLAB4cbiN5LNFI4L4k3glRJc7bjcv41r5mgf40CFdFVl?=
 =?us-ascii?q?3hltuqZcwQJGG9O03IBFyWNLSdPjDLx8D3YaWhSbxflulUthuwuSqFHE/nJDiM?=
 =?us-ascii?q?iz7pVxW3O+FWkC6bJABeuJ26cht1E2fjUcnpagelP953lzE2xbw0i2jONW4dNz?=
 =?us-ascii?q?h8bkxMoqeR7SNenvVwBWhB4mB5IumDniaT9/PYJYoOsft3HiR0kPpX4Gg7y7tQ?=
 =?us-ascii?q?9i1LWOZ5lzfSrtFwpVGrie2PyjthUBpTpTdHnoOLvUN+OarH8plMQ2rL/BUI7W?=
 =?us-ascii?q?+IERQFu8NlCsHzu6BX0tXOlLj8KDFH89LV+8sTH8nVKMKdP3onPhrkAzrUDAoD?=
 =?us-ascii?q?TT62OmDTnU1dkPeO9nKLqpg2sITjmJ0LSuwTaFtgMvIEC1ktMMEOKYo/Chclj7?=
 =?us-ascii?q?+GyuIV6XOjhBDLQYNRuZWRBdyIBvC6YjSQiLRfLwIJyLWwMo0VOcW78lZnImV3?=
 =?us-ascii?q?l4TMHE7XUsEFiS1gaAZ16g0Z8nF7Q3Z1wkPsbEWy6XkcPfeum1g9jQ4oMrdlzy?=
 =?us-ascii?q?vl/1pifgmCnyA3ikRk3Iy92T0=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AvAACp0Rxch0O0hNFZCh0BAQUBBwUBg?=
 =?us-ascii?q?VEIAQsBgTBQaXMECxQTCoc6A4RPizJKKYE/OWiJdIxvFIEQA0wUARgDEAGHLyI?=
 =?us-ascii?q?0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCOikBgm4CJBkBATcBBQkCAQFOAy8nB?=
 =?us-ascii?q?A4FBYMdAYFpAxQBAQICmwUCihOBbDOCdgEBBYUPGIIKCIw/VSWBHIERM4IqB4R?=
 =?us-ascii?q?0BAwEhgaLRYQdSJEdBwICgxqDdopLJIItjzKZdQIEAgQFAg0BAQWBRoIOcIM8C?=
 =?us-ascii?q?YISDBeDSoVCgmuCJnIBgQQBASGLIYEuAYEeAQE?=
X-IPAS-Result: =?us-ascii?q?A0AvAACp0Rxch0O0hNFZCh0BAQUBBwUBgVEIAQsBgTBQaXM?=
 =?us-ascii?q?ECxQTCoc6A4RPizJKKYE/OWiJdIxvFIEQA0wUARgDEAGHLyI0CQ0BAwEBAQEBA?=
 =?us-ascii?q?QIBEwEBAQgNCQgpIwyCOikBgm4CJBkBATcBBQkCAQFOAy8nBA4FBYMdAYFpAxQ?=
 =?us-ascii?q?BAQICmwUCihOBbDOCdgEBBYUPGIIKCIw/VSWBHIERM4IqB4R0BAwEhgaLRYQdS?=
 =?us-ascii?q?JEdBwICgxqDdopLJIItjzKZdQIEAgQFAg0BAQWBRoIOcIM8CYISDBeDSoVCgmu?=
 =?us-ascii?q?CJnIBgQQBASGLIYEuAYEeAQE?=
X-IronPort-AV: E=Sophos;i="5.56,381,1539673200"; 
   d="scan'208";a="57323391"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 21 Dec 2018 03:46:57 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2390130AbeLULqz (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Fri, 21 Dec 2018 06:46:55 -0500
Received: from mail-eopbgr40080.outbound.protection.outlook.com ([40.107.4.80]:41504
        "EHLO EUR03-DB5-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1730988AbeLULqz (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 21 Dec 2018 06:46:55 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=armh.onmicrosoft.com;
 s=selector1-arm-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=IcrUt87fG7TrmQvydeR3vlBYG5JEwi4G9k25iDhH6Zc=;
 b=cIY01oBVdx1RoB1dlPCv2LcNdjrK2EEXJ0j0yX1MrLs12ZeIAbtiwKBx57EShix6TvF0cgOjv9KiQq+PtV/wiLLceES0JFrU6n3a5XY3emlrXpbyQ+qouBxkeipJLjHWg4hcAuLqG7+xVfJ7qvbh1UtJjjSsN7pRG30rZ13h7a8=
Received: from AM0PR08MB4483.eurprd08.prod.outlook.com (20.179.35.149) by
 AM0PR08MB3107.eurprd08.prod.outlook.com (52.134.93.32) with Microsoft SMTP
 Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1446.17; Fri, 21 Dec 2018 11:46:48 +0000
Received: from AM0PR08MB4483.eurprd08.prod.outlook.com
 ([fe80::1dff:434f:5905:45db]) by AM0PR08MB4483.eurprd08.prod.outlook.com
 ([fe80::1dff:434f:5905:45db%5]) with mapi id 15.20.1446.020; Fri, 21 Dec 2018
 11:46:47 +0000
From: "james qian wang (Arm Technology China)" <james.qian.wang@arm.com>
To: Liviu Dudau <Liviu.Dudau@arm.com>
CC: "Jonathan Chai (Arm Technology China)" <Jonathan.Chai@arm.com>,
        Brian Starkey <Brian.Starkey@arm.com>,
        "Julien Yin (Arm Technology China)" <Julien.Yin@arm.com>,
        "thomas Sun (Arm Technology China)" <thomas.Sun@arm.com>,
        Alexandru-Cosmin Gheorghe <Alexandru-Cosmin.Gheorghe@arm.com>,
        "Lowry Li (Arm Technology China)" <Lowry.Li@arm.com>,
        Ayan Halder <Ayan.Halder@arm.com>,
        "Tiannan Zhu (Arm Technology China)" <Tiannan.Zhu@arm.com>,
        "Jin Gao (Arm Technology China)" <Jin.Gao@arm.com>,
        "Yiqi Kang (Arm Technology China)" <Yiqi.Kang@arm.com>,
        nd <nd@arm.com>, "malidp@foss.arm.com" <malidp@foss.arm.com>,
        "maarten.lankhorst@linux.intel.com" 
        <maarten.lankhorst@linux.intel.com>,
        "maxime.ripard@bootlin.com" <maxime.ripard@bootlin.com>,
        "sean@poorly.run" <sean@poorly.run>,
        "corbet@lwn.net" <corbet@lwn.net>,
        "linux-doc@vger.kernel.org" <linux-doc@vger.kernel.org>,
        "rdunlap@infradead.org" <rdunlap@infradead.org>,
        "mchehab+samsung@kernel.org" <mchehab+samsung@kernel.org>,
        "davem@davemloft.net" <davem@davemloft.net>,
        "gregkh@linuxfoundation.org" <gregkh@linuxfoundation.org>,
        "akpm@linux-foundation.org" <akpm@linux-foundation.org>,
        "nicolas.ferre@microchip.com" <nicolas.ferre@microchip.com>,
        "arnd@arndb.de" <arnd@arndb.de>,
        "robh+dt@kernel.org" <robh+dt@kernel.org>,
        Mark Rutland <Mark.Rutland@arm.com>,
        "devicetree@vger.kernel.org" <devicetree@vger.kernel.org>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        "dri-devel@lists.freedesktop.org" <dri-devel@lists.freedesktop.org>,
        "airlied@linux.ie" <airlied@linux.ie>,
        "yamada.masahiro@socionext.com" <yamada.masahiro@socionext.com>,
        "james qian wang (Arm Technology China)" <james.qian.wang@arm.com>
Subject: [PATCH v3 3/9] drm/komeda: Build komeda to be a platform module
Thread-Topic: [PATCH v3 3/9] drm/komeda: Build komeda to be a platform module
Thread-Index: AQHUmSLaluX9lxHyLUKjEu1aqixEmQ==
Date: Fri, 21 Dec 2018 11:46:47 +0000
Message-ID: <20181221114611.25011-1-james.qian.wang@arm.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-originating-ip: [113.29.88.7]
x-clientproxiedby: SYBPR01CA0141.ausprd01.prod.outlook.com
 (2603:10c6:10:5::33) To AM0PR08MB4483.eurprd08.prod.outlook.com
 (2603:10a6:208:145::21)
authentication-results: spf=none (sender IP is )
 smtp.mailfrom=james.qian.wang@arm.com; 
x-ms-exchange-messagesentrepresentingtype: 1
x-ms-publictraffictype: Email
x-microsoft-exchange-diagnostics: 1;AM0PR08MB3107;6:6SrFI/pn9LarhN81aBHwvo4Ip8+fm6lW+x0yU4kreOO1sxPqlXvhtRRcmJ40N19gRMCS3ghP+shsBhRghCJzFObpwlaWXLFvZkbm1ottmE6mvVX9Lu1fvHf2NZE+WKaDaMoAZefsD7Sr4iIu/wBQyvOkKuOsDwJh18uD1+G73AMLYOy16Lo5M2dlFFjmw02Wnv8L4eu4usIerClRUwTOY74tAbwPCMd2Un1WFKieTVnFHgy9fnsQffXZef+XDtiw/jUAnP2i4a7/gFz14TRiGVEjpy0sstxGBGMbQxyHHiC6iodNE5ic3YxFrUuJvA67zUxlRRjUYCycILWvu7FUP43saHDilse4Tw5Du6cb52M+csfVemYVgOzS7ratcdkJVKtKmpIp4xgVYQ4lfC3hetBBjFtiLMv9dDt7rULQyX1nsfav3YQlSzbYhltLRXAlPqBEPOEF+OZLnEnuOxlJ1Q==;5:7Ur5KksGSF+M1loLOz6UN2w5Xxw74U4I8Qna4djhEVuaOo24GtPQavXpDcQomQ5rpo+vtCb7ThSYs3R5nNcLR032HB3/gKFfgjDqw0WeBPferDjDXKQDxIMKyT+dwpWZUyoY+1COZunTTFTmOrVAeu0XDaeL1yprO1iKCNrk8Es=;7:Tb+SEPODulnb4furUqUkmG0Xm2ykgUDsVlFdZ5EZ9AaQlGrDH3jgKzFu8u9LIEnDOR6w0getSPpH7TUXneGWMwK2fMkyNFt9Y6XUwSP+0oNbRowEqZcfWUlsjaWoAoEd9nLBJ7Qr9nDK9ZhOdpaljw==
x-ms-office365-filtering-correlation-id: 8d9efc0e-34d9-4f49-c56b-08d66739fcd2
x-ms-office365-filtering-ht: Tenant
x-microsoft-antispam: BCL:0;PCL:0;RULEID:(2390118)(7020095)(4652040)(8989299)(4534185)(7168020)(4627221)(201703031133081)(201702281549075)(8990200)(5600074)(711020)(4618075)(2017052603328)(7153060)(7193020);SRVR:AM0PR08MB3107;
x-ms-traffictypediagnostic: AM0PR08MB3107:
nodisclaimer: True
x-microsoft-antispam-prvs: <AM0PR08MB3107937109BD88F4A734E6D6B3B80@AM0PR08MB3107.eurprd08.prod.outlook.com>
x-ms-exchange-senderadcheck: 1
x-exchange-antispam-report-cfa-test: BCL:0;PCL:0;RULEID:(8211001083)(3230021)(999002)(5005026)(6040522)(2401047)(8121501046)(3002001)(10201501046)(93006095)(93001095)(3231475)(944501520)(52105112)(6055026)(149066)(150057)(6041310)(20161123558120)(20161123564045)(20161123562045)(20161123560045)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(201708071742011)(7699051)(76991095);SRVR:AM0PR08MB3107;BCL:0;PCL:0;RULEID:;SRVR:AM0PR08MB3107;
x-forefront-prvs: 0893636978
x-forefront-antispam-report: SFV:NSPM;SFS:(10009020)(136003)(376002)(39860400002)(396003)(366004)(346002)(189003)(199004)(26005)(97736004)(7416002)(5660300001)(25786009)(186003)(68736007)(316002)(52116002)(14454004)(486006)(478600001)(102836004)(66066001)(6636002)(71190400001)(71200400001)(105586002)(476003)(2616005)(55236004)(386003)(6506007)(7736002)(106356001)(6512007)(6486002)(53936002)(36756003)(99286004)(575784001)(86362001)(1076003)(3846002)(6116002)(256004)(81156014)(81166006)(4326008)(8676002)(54906003)(6862004)(14444005)(103116003)(37006003)(8936002)(6436002)(305945005)(2906002)(21314003);DIR:OUT;SFP:1101;SCL:1;SRVR:AM0PR08MB3107;H:AM0PR08MB4483.eurprd08.prod.outlook.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;MX:1;A:1;
x-microsoft-antispam-message-info: Na5qj6lxam6n/EUech3mWKHNWT9Wjdfv7AM5/0LLyC/5KeA3AxmqY9RTPr79oe1Gpqs0fSoZrecnO1zUPNPWR8xzd31sxAWVxtv8lxEEUXCMurg08Pi9UD3l+1s+TzL/eCOL9L+BM4sJiabpqzKggTBPOTwofe09jGdRxXDZ9bW5r3N+wFZcGaBZme58Dt3b1zhl3DSGswXNsvnxc4HU+UVWVe/AsqI6pEHiur7JTXikz2Y/xQ6pMyXABIlTe2cRdZxY3/kYMC+XB0LHfoh47G/8NzXXwB4J2YYAWLFMVUT7eg1LOyZ9wCktKrf5a4Pw
spamdiagnosticoutput: 1:99
spamdiagnosticmetadata: NSPM
Content-Type: text/plain; charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
X-OriginatorOrg: arm.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 8d9efc0e-34d9-4f49-c56b-08d66739fcd2
X-MS-Exchange-CrossTenant-originalarrivaltime: 21 Dec 2018 11:46:47.8536
 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: f34e5979-57d9-4aaa-ad4d-b122a662184d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: AM0PR08MB3107
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Implement a simple wrapper for platform module to build komeda to module,
Also add a very simple D71 layer code to show how to discover a product.
Komeda driver direct bind the product ENTRY function xxx_identity to DT
compatible name like:

d71_product =3D {
	.product_id =3D MALIDP_D71_PRODUCT_ID,
	.identify =3D d71_identify,
},

const struct of_device_id komeda_of_match[] =3D {
	{ .compatible =3D "arm,mali-d71", .data =3D &d71_product, },
	{},
};

Then when linux found a matched DT node and call driver to probe, we can
easily get the of data, and call into the product to do the identify:

komeda_bind()
{
    ...
    product =3D of_device_get_match_data(dev);

    product->identify();
    ...
}

Changes in v3:
- Fixed style problem found by checkpatch.pl --strict.

Signed-off-by: James (Qian) Wang <james.qian.wang@arm.com>
---
 .../gpu/drm/arm/display/include/malidp_io.h   |  42 ++++++
 drivers/gpu/drm/arm/display/komeda/Makefile   |   6 +-
 .../gpu/drm/arm/display/komeda/d71/d71_dev.c  |  33 +++++
 .../gpu/drm/arm/display/komeda/komeda_dev.h   |   3 +
 .../gpu/drm/arm/display/komeda/komeda_drv.c   | 132 ++++++++++++++++++
 5 files changed, 215 insertions(+), 1 deletion(-)
 create mode 100644 drivers/gpu/drm/arm/display/include/malidp_io.h
 create mode 100644 drivers/gpu/drm/arm/display/komeda/d71/d71_dev.c
 create mode 100644 drivers/gpu/drm/arm/display/komeda/komeda_drv.c

diff --git a/drivers/gpu/drm/arm/display/include/malidp_io.h b/drivers/gpu/=
drm/arm/display/include/malidp_io.h
new file mode 100644
index 000000000000..4fb3caf864ce
--- /dev/null
+++ b/drivers/gpu/drm/arm/display/include/malidp_io.h
@@ -0,0 +1,42 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * (C) COPYRIGHT 2018 ARM Limited. All rights reserved.
+ * Author: James.Qian.Wang <james.qian.wang@arm.com>
+ *
+ */
+#ifndef _MALIDP_IO_H_
+#define _MALIDP_IO_H_
+
+#include <linux/io.h>
+
+static inline u32
+malidp_read32(u32 __iomem *base, u32 offset)
+{
+	return readl((base + (offset >> 2)));
+}
+
+static inline void
+malidp_write32(u32 __iomem *base, u32 offset, u32 v)
+{
+	writel(v, (base + (offset >> 2)));
+}
+
+static inline void
+malidp_write32_mask(u32 __iomem *base, u32 offset, u32 m, u32 v)
+{
+	u32 tmp =3D malidp_read32(base, offset);
+
+	tmp &=3D (~m);
+	malidp_write32(base, offset, v | tmp);
+}
+
+static inline void
+malidp_write_group(u32 __iomem *base, u32 offset, int num, const u32 *valu=
es)
+{
+	int i;
+
+	for (i =3D 0; i < num; i++)
+		malidp_write32(base, offset + i * 4, values[i]);
+}
+
+#endif /*_MALIDP_IO_H_*/
diff --git a/drivers/gpu/drm/arm/display/komeda/Makefile b/drivers/gpu/drm/=
arm/display/komeda/Makefile
index 5b44e36509b1..c03d6876ef75 100644
--- a/drivers/gpu/drm/arm/display/komeda/Makefile
+++ b/drivers/gpu/drm/arm/display/komeda/Makefile
@@ -5,7 +5,11 @@ ccflags-y :=3D \
 	-I$(src)
=20
 komeda-y :=3D \
+	komeda_drv.o \
 	komeda_dev.o \
-	komeda_pipeline.o \
+	komeda_pipeline.o
+
+komeda-y +=3D \
+	d71/d71_dev.o
=20
 obj-$(CONFIG_DRM_KOMEDA) +=3D komeda.o
diff --git a/drivers/gpu/drm/arm/display/komeda/d71/d71_dev.c b/drivers/gpu=
/drm/arm/display/komeda/d71/d71_dev.c
new file mode 100644
index 000000000000..af3dabb499cd
--- /dev/null
+++ b/drivers/gpu/drm/arm/display/komeda/d71/d71_dev.c
@@ -0,0 +1,33 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * (C) COPYRIGHT 2018 ARM Limited. All rights reserved.
+ * Author: James.Qian.Wang <james.qian.wang@arm.com>
+ *
+ */
+#include "malidp_io.h"
+#include "komeda_dev.h"
+
+static int d71_enum_resources(struct komeda_dev *mdev)
+{
+	/* TODO add enum resources */
+	return -1;
+}
+
+static struct komeda_dev_funcs d71_chip_funcs =3D {
+	.enum_resources	=3D d71_enum_resources,
+	.cleanup	=3D NULL,
+};
+
+#define GLB_ARCH_ID		0x000
+#define GLB_CORE_ID		0x004
+#define GLB_CORE_INFO		0x008
+
+struct komeda_dev_funcs *
+d71_identify(u32 __iomem *reg_base, struct komeda_chip_info *chip)
+{
+	chip->arch_id	=3D malidp_read32(reg_base, GLB_ARCH_ID);
+	chip->core_id	=3D malidp_read32(reg_base, GLB_CORE_ID);
+	chip->core_info	=3D malidp_read32(reg_base, GLB_CORE_INFO);
+
+	return &d71_chip_funcs;
+}
diff --git a/drivers/gpu/drm/arm/display/komeda/komeda_dev.h b/drivers/gpu/=
drm/arm/display/komeda/komeda_dev.h
index ad8fa160eff9..680e3e2cf100 100644
--- a/drivers/gpu/drm/arm/display/komeda/komeda_dev.h
+++ b/drivers/gpu/drm/arm/display/komeda/komeda_dev.h
@@ -92,6 +92,9 @@ komeda_product_match(struct komeda_dev *mdev, u32 target)
 	return MALIDP_CORE_ID_PRODUCT_ID(mdev->chip.core_id) =3D=3D target;
 }
=20
+struct komeda_dev_funcs *
+d71_identify(u32 __iomem *reg, struct komeda_chip_info *chip);
+
 struct komeda_dev *komeda_dev_create(struct device *dev);
 void komeda_dev_destroy(struct komeda_dev *mdev);
=20
diff --git a/drivers/gpu/drm/arm/display/komeda/komeda_drv.c b/drivers/gpu/=
drm/arm/display/komeda/komeda_drv.c
new file mode 100644
index 000000000000..326ae264481f
--- /dev/null
+++ b/drivers/gpu/drm/arm/display/komeda/komeda_drv.c
@@ -0,0 +1,132 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * (C) COPYRIGHT 2018 ARM Limited. All rights reserved.
+ * Author: James.Qian.Wang <james.qian.wang@arm.com>
+ *
+ */
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/platform_device.h>
+#include <linux/component.h>
+#include <drm/drm_of.h>
+#include "komeda_dev.h"
+
+struct komeda_drv {
+	struct komeda_dev *mdev;
+};
+
+static void komeda_unbind(struct device *dev)
+{
+	struct komeda_drv *mdrv =3D dev_get_drvdata(dev);
+
+	dev_set_drvdata(dev, NULL);
+
+	if (!mdrv)
+		return;
+
+	komeda_dev_destroy(mdrv->mdev);
+	kfree(mdrv);
+}
+
+static int komeda_bind(struct device *dev)
+{
+	struct komeda_drv *mdrv;
+	int err;
+
+	mdrv =3D kzalloc(sizeof(*mdrv), GFP_KERNEL);
+	if (!mdrv)
+		return -ENOMEM;
+
+	mdrv->mdev =3D komeda_dev_create(dev);
+	if (IS_ERR(mdrv->mdev)) {
+		err =3D PTR_ERR(mdrv->mdev);
+		goto free_mdrv;
+	}
+
+	dev_set_drvdata(dev, mdrv);
+
+	return 0;
+
+free_mdrv:
+	kfree(mdrv);
+	return err;
+}
+
+static const struct component_master_ops komeda_master_ops =3D {
+	.bind	=3D komeda_bind,
+	.unbind	=3D komeda_unbind,
+};
+
+static int compare_of(struct device *dev, void *data)
+{
+	return dev->of_node =3D=3D data;
+}
+
+static void komeda_add_slave(struct device *master,
+			     struct component_match **match,
+			     struct device_node *np, int port)
+{
+	struct device_node *remote;
+
+	remote =3D of_graph_get_remote_node(np, port, 0);
+	if (remote) {
+		drm_of_component_match_add(master, match, compare_of, remote);
+		of_node_put(remote);
+	}
+}
+
+static int komeda_platform_probe(struct platform_device *pdev)
+{
+	struct device *dev =3D &pdev->dev;
+	struct component_match *match =3D NULL;
+	struct device_node *child;
+
+	if (!dev->of_node)
+		return -ENODEV;
+
+	for_each_available_child_of_node(dev->of_node, child) {
+		if (of_node_cmp(child->name, "pipeline") !=3D 0)
+			continue;
+
+		/* add connector */
+		komeda_add_slave(dev, &match, child, KOMEDA_OF_PORT_OUTPUT);
+	}
+
+	return component_master_add_with_match(dev, &komeda_master_ops, match);
+}
+
+static int komeda_platform_remove(struct platform_device *pdev)
+{
+	component_master_del(&pdev->dev, &komeda_master_ops);
+	return 0;
+}
+
+static const struct komeda_product_data komeda_products[] =3D {
+	[MALI_D71] =3D {
+		.product_id =3D MALIDP_D71_PRODUCT_ID,
+		.identify =3D d71_identify,
+	},
+};
+
+const struct of_device_id komeda_of_match[] =3D {
+	{ .compatible =3D "arm,mali-d71", .data =3D &komeda_products[MALI_D71], }=
,
+	{},
+};
+
+MODULE_DEVICE_TABLE(of, komeda_of_match);
+
+static struct platform_driver komeda_platform_driver =3D {
+	.probe	=3D komeda_platform_probe,
+	.remove	=3D komeda_platform_remove,
+	.driver	=3D {
+		.name =3D "komeda",
+		.of_match_table	=3D komeda_of_match,
+		.pm =3D NULL,
+	},
+};
+
+module_platform_driver(komeda_platform_driver);
+
+MODULE_AUTHOR("James.Qian.Wang <james.qian.wang@arm.com>");
+MODULE_DESCRIPTION("Komeda KMS driver");
+MODULE_LICENSE("GPL v2");
--=20
2.17.1

