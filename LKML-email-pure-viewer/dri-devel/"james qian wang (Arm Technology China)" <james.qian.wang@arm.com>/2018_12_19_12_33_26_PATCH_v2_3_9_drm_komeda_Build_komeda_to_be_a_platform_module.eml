Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 21:34:23 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 9E99A580261;
	Wed, 19 Dec 2018 04:33:40 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 19 Dec 2018 04:33:40 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AOZJNqh8Tj2Lbbv9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1ekTIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CRWRPQNtfVzBPDI2/?=
 =?us-ascii?q?YYsADesBMvpXoYbyvFsOtRmzCBKwBOP20DJEmmP60bEn3+knDArI3BYgH9ULsH?=
 =?us-ascii?q?nMotn1Nr0dUeWrw6nT0D7DdvJW1i376IPVfBEuu/eMXb1tesbV1UQvDQbFhUiO?=
 =?us-ascii?q?p4P7IzyV1uINs2+f7+pnWuKui3Msph9xojiuwMcjkIzFiowIwV3D9yV22oM1Ks?=
 =?us-ascii?q?OjSEJheN6kEYFftyeAO4p4WMwiRW5otT0gxb0cvJ63ZjQFyJMixxPGbfGMboaG?=
 =?us-ascii?q?4hXmVOmLIDd4gmpoeKu+hxmo90is0OP9WdOy0FZFqCdOj9rCtmgV2hDN9sSKTu?=
 =?us-ascii?q?Fx8lqv1DqRzQzf9+JJLVwumafaKZMt2qM8mocdvEjZACP7nF/6gayVe0k++OWk?=
 =?us-ascii?q?8+rnbavlq5OAMoJ5jxzyPbkgmsyxBOk1PQYDUmeV+em51LDu+VH1TbVPg/A5kq?=
 =?us-ascii?q?TWrYvVKMIGraCjGQBVyJws6xOnAjemztsYmX4HIUpbeBKIkYfpIUvCIPPmAvel?=
 =?us-ascii?q?hVSjjjNry+rBPr37DZXBNnnDkLH/crZh80NQ1hY/wNRF655JBLwNPuj/VlLyud?=
 =?us-ascii?q?DEFBM0Mg65z/7iCNpn14MeXWyPArWeMKPXqVKI4uMvI++RZI4aoTr9KOYq5+To?=
 =?us-ascii?q?jXAnnV8RZK6p3JURaH+mBPRrOFuZYXXyjdcbC2sKvRQxTPbsiFKcVT5ffXGyX7?=
 =?us-ascii?q?gz5j0jEoKpEZ/DRpyxgLyGxCq7GpxWZmNYBVyWHnboap6JW/MNaCKUP89gnSYI?=
 =?us-ascii?q?VbmnS489yx6usBX2xKZgLurR4icYr47s1MBp5+3PkhE/7Tx0AN6c02GRVW50mX?=
 =?us-ascii?q?kERz8r3K9lp0x9xUyO0ax5g/xeCNxS6OlFUgY8NZ7A0eN6D8r+VR7GfteMUFym?=
 =?us-ascii?q?WMmpASktTtItxN8De0R9G9K8gRzZ3CqqBLkVl7qMBJEv9qLc3n7xJ9tyynrc1a?=
 =?us-ascii?q?khiUUmTdVLNWG8mqF/8A3TDZbTk0qFj6aqabgc3CnV+WiZ1mqOvEZYUA1qXaXf?=
 =?us-ascii?q?R38fZFDbrdD45kPEUr+vBq4rMgpHyc6eNKRKbsflgklBRPfmIN7eeX6+m3+sBR?=
 =?us-ascii?q?aUwbOBdInqdH8b3CnHDEgEkhoc/XCJNQUlAiehomTeDCFhFF71YkPs9/V+p22/?=
 =?us-ascii?q?TkMu0w6KaEhh3aKv+hEJnfycV+8T3rUctSg8sTp0Akiy08jWC9WaoQphZ7tTYd?=
 =?us-ascii?q?U67FdD1mLZsgh9M4ekL6BjgF4ebgt2s1nv1xVxFoVPj8wqoGk2wwp1LKKSyElB?=
 =?us-ascii?q?eC+A3ZDsJr3XLXH/8w21ZK7IxF7SytaW9b0J6PQjtVrjuhqkFk4j83VhztlU3G?=
 =?us-ascii?q?GQ5pTMDAoOT53xVlw7+AR9p7HfeiM9/Z/b1WVwMamotT/Pw84pBOogyhanY9df?=
 =?us-ascii?q?MKOFGBXuE8EAAMiuMugqm1mvbhILJ+1S8K80P8W7d/qJwqKrPeBgnC64gmRD+o?=
 =?us-ascii?q?xyzkWM9y9kQO7Sw5kF2+2Y3heAVzrkllihtt74mI9aajASBGaw0jXkC5NLaa10?=
 =?us-ascii?q?foYLDnmuLtazxtV/gZ7tRnFZ+ESiB1MAxM+mZx6SY0bh0g1X0EQduWanljegzz?=
 =?us-ascii?q?xojzEpqbKS3SzTw+j4aBULIG9KRGl4glfqLoi5lNQaXEmubwg0mxqp/0f6x65H?=
 =?us-ascii?q?pKthK2nfW1tHfy/zL2t6SKu/qqKCY9JT6JMvqShXSuW8bkyARb7nvhQa1DnvH2?=
 =?us-ascii?q?1AyzAhdjGmo4n2kAZ+iG2AMnlztn3ZecdryBfb5dzcQ+NR3zUcSCl5jznXGkaz?=
 =?us-ascii?q?P92z8dqIkJfDt/i0V3i9WZ1LbSnr0YSAuTO75G1rGxG+n+q/msb6EQg8yiL709?=
 =?us-ascii?q?hqVSPVrBfzeIXr1qK6Mf55cUlsHlPz9816GoRmmIsqmJ4QwWQahomS/Xcfk2f8?=
 =?us-ascii?q?K89b2aH9bHoKXzIL2MTa4Avm2E1iKHKG2YT5W26ZwstgYdm6f2wX1jg878BMFK?=
 =?us-ascii?q?eb8rhEkTFprVq/qALbeeJ9kSsFyfsy9H4ahPkEuQo3wSWaGLwSH0hYPSr3mhSM?=
 =?us-ascii?q?7tC+qrhXZWm1fbix0kp+gc6uDLWYrg5AX3b5f48oHTVs4cVnLFLMzHrz55nneN?=
 =?us-ascii?q?bKbNIfrB2UkwragOhTJ5I8jf4KhSthOWLgsnwp0e87jRpy3Z6kuIiLMXli/KW8?=
 =?us-ascii?q?AhRALD36e9sT+i3xjaZZhsuW2oGvHpZ7FTkRUprnU+moEC4MuvT9LAmBDic8qn?=
 =?us-ascii?q?iAFLrbHA+f7lpmrn3VH5CqMXGXOGcWzdF4SBaBI0xfhRgeXC8mkZ4hCgCq2Mvh?=
 =?us-ascii?q?fV9l5jAW4170sBpNxfhuNxniSWffvwaoZywwSJieKhpW8w5D613UMcyY8uJ8AS?=
 =?us-ascii?q?VY8oe9owyKL2yRfx5IAn0RWkyYG1DjOaGj6sLa/OifAuq+MuHCYbGTqeFFU/eI?=
 =?us-ascii?q?xJSv0pZp/jqWN8WPOGViAOM/2kZZQX95HMHZkS0VSyMLjyLNc9KbpBCk9y11tM?=
 =?us-ascii?q?+/9erkWBn16YuTEbdSMshv+xOrgaeFLeGQnz10KTJZ1pMK2H/Jx6IT3F8UiyFy?=
 =?us-ascii?q?aTatFa4MujLKTKLVgqVXFQIUaztvNMtU6KIxxglMOcnGitPsy753lPg1B01eVV?=
 =?us-ascii?q?zmnMGpatcHI2W8NFPBGUaKO66KJTzNw8Hrf6y8Tadcg/lTtx21oTybCVPsPiyf?=
 =?us-ascii?q?lzn1UBCiKeFMgz+aPBxdu4G9cwxhCWv5TNLhZR20LsV3jSAtwbAvgnPKNGgcMS?=
 =?us-ascii?q?Vzck9Xr72Q6z9Yjet7G2Bb8nVlKuyEkT6D7+bEMpYWredrAiNsmu1A/XQ10KFV?=
 =?us-ascii?q?4z9ERfBvnCvSr8Vjo1WnkumJ1zpmXwBCqjdNhIKXo0piPb/V+YVHWXbB5BgN93?=
 =?us-ascii?q?mfCwwWp9t5Dd3io7xQytnKlK7pNDhO6c7b/csCCMjSM8+HNHshMRz0GD/bFgcF?=
 =?us-ascii?q?TDirNX3BiExZiv2d6nqVrp0ioJj2hJUOUqNbVEAyFv4CCkVqBtoCIJJ2XjMiib?=
 =?us-ascii?q?Gajc4I6mC4rBneX8haupHHVvSPAfTgMjqZjL9EZwcWzrP8N4gcKor720kxImV9?=
 =?us-ascii?q?yaDLBUvNFfxQriR8JlsQoVtM7T5SU2E6xmrscAbr63gWQ62ahBkz30F8aOEg73?=
 =?us-ascii?q?/14l4xbkXDoiR40GArnJ3ZjDuRdjn1K6ihFapWCiz99gJ5ZpHyRgtuKxSzlEoi?=
 =?us-ascii?q?Kz7CSJpYlb4mfmdu3lyP8aBTEOJRGPUXKCQbwuuaMrBxiQxR?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AxAADQORpch0O0hNFaCh0BAQUBBwUBg?=
 =?us-ascii?q?VEIAQsBgTBQaXMECxQTCoc6A4RPizJKKYE/OWiJc4xuFIEQA0wUARgDEAGHKyI?=
 =?us-ascii?q?0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmIDAwECJBkBATcBBQkBAQEBT?=
 =?us-ascii?q?gMvJQIEDgUFgx0BgWkDFAEBAgKcTAKKE4FsM4J2AQEFhQgYggoIjD9VJYEcgRE?=
 =?us-ascii?q?zgioHhHQQBIYGi0GEGUaRFgcCAoMZg3WKRiSCK48umVsCBAIEBQINAQEFgUaCD?=
 =?us-ascii?q?nCDPAmCEgwXg0qILYImcgGBBAEBIYpygS4BgR4BAQ?=
X-IPAS-Result: =?us-ascii?q?A0AxAADQORpch0O0hNFaCh0BAQUBBwUBgVEIAQsBgTBQaXM?=
 =?us-ascii?q?ECxQTCoc6A4RPizJKKYE/OWiJc4xuFIEQA0wUARgDEAGHKyI0CQ0BAwEBAQEBA?=
 =?us-ascii?q?QIBEwEBAQgNCQgpIwyCNiQBgmIDAwECJBkBATcBBQkBAQEBTgMvJQIEDgUFgx0?=
 =?us-ascii?q?BgWkDFAEBAgKcTAKKE4FsM4J2AQEFhQgYggoIjD9VJYEcgREzgioHhHQQBIYGi?=
 =?us-ascii?q?0GEGUaRFgcCAoMZg3WKRiSCK48umVsCBAIEBQINAQEFgUaCDnCDPAmCEgwXg0q?=
 =?us-ascii?q?ILYImcgGBBAEBIYpygS4BgR4BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,372,1539673200"; 
   d="scan'208";a="56522883"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 19 Dec 2018 04:33:38 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729472AbeLSMdg (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 19 Dec 2018 07:33:36 -0500
Received: from mail-eopbgr10051.outbound.protection.outlook.com ([40.107.1.51]:23328
        "EHLO EUR02-HE1-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1728408AbeLSMdg (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 19 Dec 2018 07:33:36 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=armh.onmicrosoft.com;
 s=selector1-arm-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=gStoIeGg9KCeTEMF/++TJASYI0MC3+wny6CkaEvbqxU=;
 b=mGk9ldL2mfK/IH75v28ybSoRcT9TvU/YIELOBkgD09CraxnoVMmccmR7qZqWkqDl0MFjrz4DZXdqD/5/MHOTAcqKAdum002huCI1KlOAMMsuZeKct4NQDrzM/2bMdhfyyp+8TSbQUxIobhkEW02ZEyOppEasT1n0XoeEvfT88WM=
Received: from AM0PR08MB4483.eurprd08.prod.outlook.com (20.179.35.149) by
 AM0PR08MB3924.eurprd08.prod.outlook.com (20.178.118.142) with Microsoft SMTP
 Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1425.19; Wed, 19 Dec 2018 12:33:26 +0000
Received: from AM0PR08MB4483.eurprd08.prod.outlook.com
 ([fe80::1dff:434f:5905:45db]) by AM0PR08MB4483.eurprd08.prod.outlook.com
 ([fe80::1dff:434f:5905:45db%5]) with mapi id 15.20.1446.018; Wed, 19 Dec 2018
 12:33:26 +0000
From: "james qian wang (Arm Technology China)" <james.qian.wang@arm.com>
To: Liviu Dudau <Liviu.Dudau@arm.com>
CC: "Jonathan Chai (Arm Technology China)" <Jonathan.Chai@arm.com>,
        Brian Starkey <Brian.Starkey@arm.com>,
        "Julien Yin (Arm Technology China)" <Julien.Yin@arm.com>,
        "thomas Sun (Arm Technology China)" <thomas.Sun@arm.com>,
        Alexandru-Cosmin Gheorghe <Alexandru-Cosmin.Gheorghe@arm.com>,
        "Lowry Li (Arm Technology China)" <Lowry.Li@arm.com>,
        Ayan Halder <Ayan.Halder@arm.com>,
        "Tiannan Zhu (Arm Technology China)" <Tiannan.Zhu@arm.com>,
        "Jin Gao (Arm Technology China)" <Jin.Gao@arm.com>,
        "Yiqi Kang (Arm Technology China)" <Yiqi.Kang@arm.com>,
        nd <nd@arm.com>, "malidp@foss.arm.com" <malidp@foss.arm.com>,
        "maarten.lankhorst@linux.intel.com" 
        <maarten.lankhorst@linux.intel.com>,
        "maxime.ripard@bootlin.com" <maxime.ripard@bootlin.com>,
        "sean@poorly.run" <sean@poorly.run>,
        "corbet@lwn.net" <corbet@lwn.net>,
        "linux-doc@vger.kernel.org" <linux-doc@vger.kernel.org>,
        "rdunlap@infradead.org" <rdunlap@infradead.org>,
        "mchehab+samsung@kernel.org" <mchehab+samsung@kernel.org>,
        "davem@davemloft.net" <davem@davemloft.net>,
        "gregkh@linuxfoundation.org" <gregkh@linuxfoundation.org>,
        "akpm@linux-foundation.org" <akpm@linux-foundation.org>,
        "nicolas.ferre@microchip.com" <nicolas.ferre@microchip.com>,
        "arnd@arndb.de" <arnd@arndb.de>,
        "robh+dt@kernel.org" <robh+dt@kernel.org>,
        Mark Rutland <Mark.Rutland@arm.com>,
        "devicetree@vger.kernel.org" <devicetree@vger.kernel.org>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        "dri-devel@lists.freedesktop.org" <dri-devel@lists.freedesktop.org>,
        "airlied@linux.ie" <airlied@linux.ie>,
        "yamada.masahiro@socionext.com" <yamada.masahiro@socionext.com>,
        "james qian wang (Arm Technology China)" <james.qian.wang@arm.com>
Subject: [PATCH v2 3/9] drm/komeda: Build komeda to be a platform module
Thread-Topic: [PATCH v2 3/9] drm/komeda: Build komeda to be a platform module
Thread-Index: AQHUl5cKZzRqrCwt8EOLSMI+kFCkBw==
Date: Wed, 19 Dec 2018 12:33:26 +0000
Message-ID: <20181219123147.16090-4-james.qian.wang@arm.com>
References: <20181219123147.16090-1-james.qian.wang@arm.com>
In-Reply-To: <20181219123147.16090-1-james.qian.wang@arm.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-originating-ip: [113.29.88.7]
x-clientproxiedby: SYBPR01CA0132.ausprd01.prod.outlook.com
 (2603:10c6:10:5::24) To AM0PR08MB4483.eurprd08.prod.outlook.com
 (2603:10a6:208:145::21)
authentication-results: spf=none (sender IP is )
 smtp.mailfrom=james.qian.wang@arm.com; 
x-ms-exchange-messagesentrepresentingtype: 1
x-ms-publictraffictype: Email
x-microsoft-exchange-diagnostics: 1;AM0PR08MB3924;6:WZVkXpjLwvROQ1175cA5uaqifybNquO5YsFUXH0Us/xjaN3yZNkUY2KyxrrnAYqtG4J1sL1qk/qwlXjGqknWB5jF0S9R9GpcxYgvBUHc/KmXEIuxKyx21L26D8VrFd4S/Q1aEXQaGfKobWtR0k+VmseDzHtvZFER8y5iujbvH58Bx1RjROqzLYzDIkxFxkaBMOhMWz5NSvGLzQiev5vDhxr8NkCEWbfaTJx/Hdzvv5j5H+eI0RuJZ/g9cUPC0kkMvRk2k5Od5o9DClyHqbizzxMFtDSPc/md4YRAWwy/9XA+ufavQB+qpHnpFaAaEQgpJCBriRDCJsZkV1UonqfuBhHmppMzdu5A42LLfXllwIF5eZ7koaiHw3/SEcTlFCK/xuP7En7/bweHII8WknM9KvuDZCD9/uMotyWw6o08TQNkJhDFixQ5XiwZU5SgtJfA+5sFVfbptmAhxiKP2JgtlQ==;5:gnOvcKByq6AN/vMmBSXyPAtTTGvg/m/DOxMN/8D5Ur1k1o11taIm6tbhlaysv3cE5/rYYDp8SOwPmoD8BnUUHaebgiu7umFfWCxupl5h6zFIIUiuZCoqjlKYap1O5h5BoPTNrZcOuJ5YhkKF7niU4lu+Cinlp0TYWABIjxb9agA=;7:5EBCqxxPTwW5UrnzzJTX4siVqXK+O9Zlu5YiyjR97ZjiaHhrEpCbLsmniWbR8wf+9AqAqHbmJMHqkcYoPg/N2UJjG07maeXpv14iwI9ARk3+N5dGQ+22vwaZfVJcvkPXS1SWwEK/bBR6WnvtNNFB+A==
x-ms-office365-filtering-correlation-id: a6922a6b-eafb-4c1e-2898-08d665ae2c72
x-ms-office365-filtering-ht: Tenant
x-microsoft-antispam: BCL:0;PCL:0;RULEID:(2390118)(7020095)(4652040)(8989299)(4534185)(7168020)(4627221)(201703031133081)(201702281549075)(8990200)(5600074)(711020)(4618075)(2017052603328)(7153060)(7193020);SRVR:AM0PR08MB3924;
x-ms-traffictypediagnostic: AM0PR08MB3924:
nodisclaimer: True
x-microsoft-antispam-prvs: <AM0PR08MB3924C36D1013EDA70707708AB3BE0@AM0PR08MB3924.eurprd08.prod.outlook.com>
x-ms-exchange-senderadcheck: 1
x-exchange-antispam-report-cfa-test: BCL:0;PCL:0;RULEID:(8211001083)(3230021)(999002)(6040522)(2401047)(8121501046)(5005006)(3002001)(10201501046)(93006095)(93001095)(3231475)(944501520)(52105112)(6055026)(148016)(149066)(150057)(6041310)(20161123560045)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123558120)(20161123564045)(20161123562045)(201708071742011)(7699051)(76991095);SRVR:AM0PR08MB3924;BCL:0;PCL:0;RULEID:;SRVR:AM0PR08MB3924;
x-forefront-prvs: 0891BC3F3D
x-forefront-antispam-report: SFV:NSPM;SFS:(10009020)(136003)(396003)(346002)(39860400002)(366004)(376002)(199004)(189003)(316002)(8936002)(103116003)(37006003)(1076003)(71190400001)(81166006)(81156014)(11346002)(446003)(97736004)(36756003)(54906003)(256004)(2616005)(486006)(6636002)(99286004)(71200400001)(476003)(575784001)(86362001)(8676002)(106356001)(105586002)(5660300001)(3846002)(7416002)(6116002)(14454004)(68736007)(6512007)(2906002)(4326008)(25786009)(6486002)(76176011)(52116002)(53936002)(186003)(55236004)(102836004)(26005)(6862004)(6436002)(305945005)(478600001)(6506007)(66066001)(386003)(7736002)(21314003);DIR:OUT;SFP:1101;SCL:1;SRVR:AM0PR08MB3924;H:AM0PR08MB4483.eurprd08.prod.outlook.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;A:1;MX:1;
x-microsoft-antispam-message-info: KEccncioqT6ImzVnK8uxjlkTHqij61LFmWaGk4JXF7SRf2DZeXWPFj6ITOSK4QBUV/YZnGsApwzg+szw1CfzPyhX99xF6olAK2xL2I6JZKDClk7W1Cq8BRM2VLRDBIimy87k0Yj5j9GZNIZUEN3j6XBl1YjcReIe2uwjK0ebINvPeU5hV1zWTrMFkGTsrQ9/thBHXlExQ/chPjEsFgaKHduuQtEQtovxAtrEnstEfkohj0Q0a1sq8uqgfYaF69TFpMGpcfpLorgG4fny3OfB89F3/Or2/QYbfbxbteXvpDsFjqivWi3sNyJtOB/4hbNJ
spamdiagnosticoutput: 1:99
spamdiagnosticmetadata: NSPM
Content-Type: text/plain; charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
X-OriginatorOrg: arm.com
X-MS-Exchange-CrossTenant-Network-Message-Id: a6922a6b-eafb-4c1e-2898-08d665ae2c72
X-MS-Exchange-CrossTenant-originalarrivaltime: 19 Dec 2018 12:33:26.7440
 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: f34e5979-57d9-4aaa-ad4d-b122a662184d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: AM0PR08MB3924
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Implement a simple wrapper for platform module to build komeda to module,
Also add a very simple D71 layer code to show how to discover a product.
Komeda driver direct bind the product ENTRY function xxx_identity to DT
compatible name like:

d71_product =3D {
	.product_id =3D MALIDP_D71_PRODUCT_ID,
	.identify =3D d71_identify,
},

const struct of_device_id komeda_of_match[] =3D {
	{ .compatible =3D "arm,mali-d71", .data =3D &d71_product, },
	{},
};

Then when linux found a matched DT node and call driver to probe, we can
easily get the of data, and call into the product to do the identify:

komeda_bind()
{
    ...
    product =3D of_device_get_match_data(dev);

    product->identify();
    ...
}

Signed-off-by: James (Qian) Wang <james.qian.wang@arm.com>
---
 .../gpu/drm/arm/display/include/malidp_io.h   |  42 ++++++
 drivers/gpu/drm/arm/display/komeda/Makefile   |   6 +-
 .../gpu/drm/arm/display/komeda/d71/d71_dev.c  |  33 +++++
 .../gpu/drm/arm/display/komeda/komeda_dev.h   |   4 +-
 .../gpu/drm/arm/display/komeda/komeda_drv.c   | 132 ++++++++++++++++++
 5 files changed, 215 insertions(+), 2 deletions(-)
 create mode 100644 drivers/gpu/drm/arm/display/include/malidp_io.h
 create mode 100644 drivers/gpu/drm/arm/display/komeda/d71/d71_dev.c
 create mode 100644 drivers/gpu/drm/arm/display/komeda/komeda_drv.c

diff --git a/drivers/gpu/drm/arm/display/include/malidp_io.h b/drivers/gpu/=
drm/arm/display/include/malidp_io.h
new file mode 100644
index 000000000000..4fb3caf864ce
--- /dev/null
+++ b/drivers/gpu/drm/arm/display/include/malidp_io.h
@@ -0,0 +1,42 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * (C) COPYRIGHT 2018 ARM Limited. All rights reserved.
+ * Author: James.Qian.Wang <james.qian.wang@arm.com>
+ *
+ */
+#ifndef _MALIDP_IO_H_
+#define _MALIDP_IO_H_
+
+#include <linux/io.h>
+
+static inline u32
+malidp_read32(u32 __iomem *base, u32 offset)
+{
+	return readl((base + (offset >> 2)));
+}
+
+static inline void
+malidp_write32(u32 __iomem *base, u32 offset, u32 v)
+{
+	writel(v, (base + (offset >> 2)));
+}
+
+static inline void
+malidp_write32_mask(u32 __iomem *base, u32 offset, u32 m, u32 v)
+{
+	u32 tmp =3D malidp_read32(base, offset);
+
+	tmp &=3D (~m);
+	malidp_write32(base, offset, v | tmp);
+}
+
+static inline void
+malidp_write_group(u32 __iomem *base, u32 offset, int num, const u32 *valu=
es)
+{
+	int i;
+
+	for (i =3D 0; i < num; i++)
+		malidp_write32(base, offset + i * 4, values[i]);
+}
+
+#endif /*_MALIDP_IO_H_*/
diff --git a/drivers/gpu/drm/arm/display/komeda/Makefile b/drivers/gpu/drm/=
arm/display/komeda/Makefile
index 07b5965f3808..4efcce0cdce8 100644
--- a/drivers/gpu/drm/arm/display/komeda/Makefile
+++ b/drivers/gpu/drm/arm/display/komeda/Makefile
@@ -5,7 +5,11 @@ ccflags-y :=3D \
 	-I$(src)
=20
 komeda-y :=3D \
+	komeda_drv.o \
 	komeda_dev.o \
-	komeda_pipeline.o \
+	komeda_pipeline.o
+
+komeda-y +=3D \
+	d71/d71_dev.o
=20
 obj-$(CONFIG_DRM_KOMEDA) +=3D komeda.o
\ No newline at end of file
diff --git a/drivers/gpu/drm/arm/display/komeda/d71/d71_dev.c b/drivers/gpu=
/drm/arm/display/komeda/d71/d71_dev.c
new file mode 100644
index 000000000000..af3dabb499cd
--- /dev/null
+++ b/drivers/gpu/drm/arm/display/komeda/d71/d71_dev.c
@@ -0,0 +1,33 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * (C) COPYRIGHT 2018 ARM Limited. All rights reserved.
+ * Author: James.Qian.Wang <james.qian.wang@arm.com>
+ *
+ */
+#include "malidp_io.h"
+#include "komeda_dev.h"
+
+static int d71_enum_resources(struct komeda_dev *mdev)
+{
+	/* TODO add enum resources */
+	return -1;
+}
+
+static struct komeda_dev_funcs d71_chip_funcs =3D {
+	.enum_resources	=3D d71_enum_resources,
+	.cleanup	=3D NULL,
+};
+
+#define GLB_ARCH_ID		0x000
+#define GLB_CORE_ID		0x004
+#define GLB_CORE_INFO		0x008
+
+struct komeda_dev_funcs *
+d71_identify(u32 __iomem *reg_base, struct komeda_chip_info *chip)
+{
+	chip->arch_id	=3D malidp_read32(reg_base, GLB_ARCH_ID);
+	chip->core_id	=3D malidp_read32(reg_base, GLB_CORE_ID);
+	chip->core_info	=3D malidp_read32(reg_base, GLB_CORE_INFO);
+
+	return &d71_chip_funcs;
+}
diff --git a/drivers/gpu/drm/arm/display/komeda/komeda_dev.h b/drivers/gpu/=
drm/arm/display/komeda/komeda_dev.h
index 25c79528dac4..680e3e2cf100 100644
--- a/drivers/gpu/drm/arm/display/komeda/komeda_dev.h
+++ b/drivers/gpu/drm/arm/display/komeda/komeda_dev.h
@@ -12,7 +12,6 @@
 #include "komeda_pipeline.h"
 #include "malidp_product.h"
=20
-
 /* malidp device id */
 enum {
 	MALI_D71 =3D 0,
@@ -93,6 +92,9 @@ komeda_product_match(struct komeda_dev *mdev, u32 target)
 	return MALIDP_CORE_ID_PRODUCT_ID(mdev->chip.core_id) =3D=3D target;
 }
=20
+struct komeda_dev_funcs *
+d71_identify(u32 __iomem *reg, struct komeda_chip_info *chip);
+
 struct komeda_dev *komeda_dev_create(struct device *dev);
 void komeda_dev_destroy(struct komeda_dev *mdev);
=20
diff --git a/drivers/gpu/drm/arm/display/komeda/komeda_drv.c b/drivers/gpu/=
drm/arm/display/komeda/komeda_drv.c
new file mode 100644
index 000000000000..bf32d334d20d
--- /dev/null
+++ b/drivers/gpu/drm/arm/display/komeda/komeda_drv.c
@@ -0,0 +1,132 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * (C) COPYRIGHT 2018 ARM Limited. All rights reserved.
+ * Author: James.Qian.Wang <james.qian.wang@arm.com>
+ *
+ */
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/platform_device.h>
+#include <linux/component.h>
+#include <drm/drm_of.h>
+#include "komeda_dev.h"
+
+struct komeda_drv {
+	struct komeda_dev *mdev;
+};
+
+static void komeda_unbind(struct device *dev)
+{
+	struct komeda_drv *mdrv =3D dev_get_drvdata(dev);
+
+	dev_set_drvdata(dev, NULL);
+
+	if (mdrv =3D=3D NULL)
+		return;
+
+	komeda_dev_destroy(mdrv->mdev);
+	kfree(mdrv);
+}
+
+static int komeda_bind(struct device *dev)
+{
+	struct komeda_drv *mdrv;
+	int err;
+
+	mdrv =3D kzalloc(sizeof(*mdrv), GFP_KERNEL);
+	if (mdrv =3D=3D NULL)
+		return -ENOMEM;
+
+	mdrv->mdev =3D komeda_dev_create(dev);
+	if (IS_ERR(mdrv->mdev)) {
+		err =3D PTR_ERR(mdrv->mdev);
+		goto free_mdrv;
+	}
+
+	dev_set_drvdata(dev, mdrv);
+
+	return 0;
+
+free_mdrv:
+	kfree(mdrv);
+	return err;
+}
+
+static const struct component_master_ops komeda_master_ops =3D {
+	.bind	=3D komeda_bind,
+	.unbind	=3D komeda_unbind,
+};
+
+static int compare_of(struct device *dev, void *data)
+{
+	return dev->of_node =3D=3D data;
+}
+
+static void komeda_add_slave(struct device *master,
+			     struct component_match **match,
+			     struct device_node *np, int port)
+{
+	struct device_node *remote;
+
+	remote =3D of_graph_get_remote_node(np, port, 0);
+	if (remote !=3D NULL) {
+		drm_of_component_match_add(master, match, compare_of, remote);
+		of_node_put(remote);
+	}
+}
+
+static int komeda_platform_probe(struct platform_device *pdev)
+{
+	struct device *dev =3D &pdev->dev;
+	struct component_match *match =3D NULL;
+	struct device_node *child;
+
+	if (dev->of_node =3D=3D NULL)
+		return -ENODEV;
+
+	for_each_available_child_of_node(dev->of_node, child) {
+		if (of_node_cmp(child->name, "pipeline") !=3D 0)
+			continue;
+
+		/* add connector */
+		komeda_add_slave(dev, &match, child, KOMEDA_OF_PORT_OUTPUT);
+	}
+
+	return component_master_add_with_match(dev, &komeda_master_ops, match);
+}
+
+static int komeda_platform_remove(struct platform_device *pdev)
+{
+	component_master_del(&pdev->dev, &komeda_master_ops);
+	return 0;
+}
+
+static const struct komeda_product_data komeda_products[] =3D {
+	[MALI_D71] =3D {
+		.product_id =3D MALIDP_D71_PRODUCT_ID,
+		.identify =3D d71_identify,
+	},
+};
+
+const struct of_device_id komeda_of_match[] =3D {
+	{ .compatible =3D "arm,mali-d71", .data =3D &komeda_products[MALI_D71], }=
,
+	{},
+};
+
+MODULE_DEVICE_TABLE(of, komeda_of_match);
+
+static struct platform_driver komeda_platform_driver =3D {
+	.probe	=3D komeda_platform_probe,
+	.remove	=3D komeda_platform_remove,
+	.driver	=3D {
+		.name =3D "komeda",
+		.of_match_table	=3D komeda_of_match,
+		.pm =3D NULL,
+	},
+};
+
+module_platform_driver(komeda_platform_driver);
+
+MODULE_AUTHOR("James.Qian.Wang <james.qian.wang@arm.com>");
+MODULE_DESCRIPTION("Komeda KMS driver");
+MODULE_LICENSE("GPL v2");
--=20
2.17.1

