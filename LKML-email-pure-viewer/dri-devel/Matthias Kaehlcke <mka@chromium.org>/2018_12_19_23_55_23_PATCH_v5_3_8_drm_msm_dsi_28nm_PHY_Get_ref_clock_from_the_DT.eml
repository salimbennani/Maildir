Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  20 Dec 2018 08:44:10 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga008.fm.intel.com (fmsmga008.fm.intel.com [10.253.24.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 764905805F0;
	Wed, 19 Dec 2018 15:59:26 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga008-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 19 Dec 2018 15:59:27 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AbqQmSB1TwxPTDou7smDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segQKvnxwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJBUMhPSiJPDICy?=
 =?us-ascii?q?YYwNAOoPMulWoJL9p0MMoBalGQWhB/nixiNSi3PqwaE31fkqHwHc3AwnGtIDqH?=
 =?us-ascii?q?Pao8/pNKcOUeC1zbPHzS7eZP1Twzjy9ojIchQ9rvGPQ717bM3cyUwsFwzflVif?=
 =?us-ascii?q?tYzlPymS1uQIsmib8u9gWfioi249pAF8uz6izdovhInRno8Z1EzI+CFjzIooK9?=
 =?us-ascii?q?C0VlR3bcOnHZdMrS2XNol7Tts8T2xppio21rgLtYO7cScWzZkr2QLTZ+KCfoSV?=
 =?us-ascii?q?5x/uVuacLi19iX9rdrKyhgi9/E2+xuHhS8a51VJHoyRHn9TDsH0Gygbd5dKdSv?=
 =?us-ascii?q?Rn+0eswTaP2B7X6uFDOU00i6XbJIA7wrIqlZocr17DHinol0XylqOWcV8k+uew?=
 =?us-ascii?q?5+TmZLXpuIOcOpdqhg3iNqkigNGzDOomPgQUQmSW+viw2Kfi8ED7WLlKi+c5kq?=
 =?us-ascii?q?jdsJDUP8Qboau5DhdR0oYi7Ra/Ejin3M0bnXYZNlJFfgyIj4zwN1HJLvH4C+mw?=
 =?us-ascii?q?g063nTd1yPDJIKfhDo/OLnfdirfhe6hy60pGxAo019Bf6IpYCqsdL/LrRk/xqN?=
 =?us-ascii?q?vYAwc9Mwy1wOboFs9x14wDWW+UBq+ZMaXSsUKH5+41IumMYpMVtyj5K/Q/+/Hu?=
 =?us-ascii?q?ino5k0cHfaa1xZsXdGy4HvN+LkWZe3Xsg8sBHn0NvgYkTOzqlUeNUThcZ3upW6?=
 =?us-ascii?q?I85zc7CJ+pDIvZR4CthqCB0zm/HpFMem9GDVWMG2/yd4qYQ/cMdD6SIsh5nzMe?=
 =?us-ascii?q?TrihS4gh1RK0uA/g0bVnLPHZ+ikZtZLlydh06PfflRA09TxoEcud13uBQH1znm?=
 =?us-ascii?q?MNXzU2xrxwoVRhylef1qh1m/9YGsZV5/9TVgc6NITTz+p1C93pXgLBf9GJSEup?=
 =?us-ascii?q?Q9m8ADExSM4xzMEKY0pnB9qiiRXD1TKwA7AJj7yLGIA08qXE0nfsPcl91WjJ2L?=
 =?us-ascii?q?Mhj1Y8RMtPLnOphqh4+wjXBI7JlkGZmr2udaQd2i7N6WiCwXCPvEFeTA5/T6HF?=
 =?us-ascii?q?UWoDaUvRqNTz/lnCQKO2CbQ7LgtBztaPJbZQZd33k1pKXvfjN87YY2KqhWiwAw?=
 =?us-ascii?q?2FxreNbIrsZmUc0z/RCEkCkwAP43mGMRIyCTumo2LbFDZuD07gY1vw8elir3O2?=
 =?us-ascii?q?VlM0zwCPb01my7q1+h4UieaAS/8J2bIEoiMhqzRyHFayxN/WD9uApwx8fKRTe9?=
 =?us-ascii?q?894VFH1X7HuAx5JJCvM6dihlsGeQRto0zuzwl3CplHkcUytnwqyBR9KK2G31JB?=
 =?us-ascii?q?bT+Xxo3wNaDNJWn0/xCvbLDW10ra0NaX/KcP9fs5p0/ivAGvCkot7XFn38NJ3H?=
 =?us-ascii?q?ub45XAFBASXo7pUkYr6xh6oKnXYykg54/OyXJgK6i1sj/Y1NIvC+so0RKgf9ZZ?=
 =?us-ascii?q?MKOZGw7+CcwaB86yKOM0n1ildA4LPOdX9KQsJcOpa+OG2LK3POZnhD+ml2VH75?=
 =?us-ascii?q?xn3UKW6iV8TfTE35AbzPGC3wuLTivzg02lss/qh49EfzYSHmykxCjgBY5RYLBy?=
 =?us-ascii?q?fIkRBWevJc232stxh5r3V3FE816jAksM2NW1dhqKc1z9wQpQ2FwXoHymgye5zy?=
 =?us-ascii?q?Z4kyo0rqqZxyHOx+XidBwaOm9EXmVijFHsIZSqgNAeRkSncw8plB6970bg26db?=
 =?us-ascii?q?vLh/L3XUQUpQfSj5NXtiUqiztrqFecJP84knsSZUUOS9Z1CVVLj9rgAe0yPiGW?=
 =?us-ascii?q?te2T86eyurupX/gxx1lmadIGxvo3refMF63Q3f68DERf5NwjoGQzF1iDnNCVi7?=
 =?us-ascii?q?JdWp/9SUl5HYv+C6VmKhUIBTcCbxwYOBsiu7+XNlARmlk/+vnd3nFBAw0TXn2N?=
 =?us-ascii?q?lySSXIsBH8b5Ho16ugMOJrZEloBELm5Mp8FYFziY8whJAW2XgHiZSZ53sHkWHv?=
 =?us-ascii?q?MdpF3aLydmYCRTkOw9TN+gjqxFVjLm6Vx4L+Tnidx8phZ9qgbW8M1CMy8dtKCL?=
 =?us-ascii?q?uK47xehiR6vEC4rQ3KbPh5nzcdz+Yu6XEAj+EIvgot0juSArQIEUZEOizskgyC?=
 =?us-ascii?q?78qio6VPeGavbb+w2VJindCmCbGOuABdV2z/epc/Bi9w9cR/PUnI0H3y7IHkZd?=
 =?us-ascii?q?bRYcgSth2SjxfPkexVJIgtmfoNgCptIXj9smE9y+4nkRxu2om3s5OdJGVq+KK5?=
 =?us-ascii?q?HwRUNjnoZ84I/jHtjKBentuZ3oy1H5VhHCkLU4XsTf6yDD0SsvHnPR6UEDIgsn?=
 =?us-ascii?q?ebBabfHQiH5UdktX3PFo6kN2qNKHkF19liRwSdJE9CgAASRjo6hYU0FgSrxMzn?=
 =?us-ascii?q?bUd46Sod5l/+qhtQ1O1oMwPzXXvYpAetcj00UoSQLAJK7gFe4EfYKcyf7uVuHy?=
 =?us-ascii?q?FB452utgqNJnaAZwRPC2EJVVeJB1TiPrmo+NnB/PKUBuu4L/vSf7qOrfZSWOuP?=
 =?us-ascii?q?xZKqyoFm5SqDNt2TPnl+CP02wkpDUm54G8TamDUPSjYblyHXb86cqxez5Dd3rt?=
 =?us-ascii?q?2k8PnwXALv5I2PC6ZdMNl1+hC2h7uDOPCUhCpjNTlY0ZYMz2fSyLcDxF4Slz1u?=
 =?us-ascii?q?dz61HLsaqC7CV7jQlbFXDhIBbyNzNdBF76Y93glLJM7ahcn51r9+jv4pFVhFUU?=
 =?us-ascii?q?btld2uZcwPO2u9Lk/IBF6XNLSaIj3G2933YaK5SbFKkOpYrQG/uTaFHE/lJTmD?=
 =?us-ascii?q?kzjpVxayMeBDli2bPRpeuJ2jfRZpE2TsUNXmahijOt9tkTI22aE0hm/NNWMEMT?=
 =?us-ascii?q?lzaUVNrriR7SNemvp+GmxB4WBjLemLgCuZ6+jYKpALsfpkGCh0luRa4GgkxLtR?=
 =?us-ascii?q?9i1LWPt1mC6B5uJp9muhmKGkzjN9U1IasDFBiImPtF9hEarc/5hEH33D+URJpU?=
 =?us-ascii?q?mZFRUG7/JkENnutugEw9nVkKP+JB9G8tTJ7Y0dCp6QYPiAOjIBPADzGTjbRF8f?=
 =?us-ascii?q?SjSrdm3Dr09Qivef8juStJds7tDJkYANAoVGSFg8EP9SXkFsBt9EOoprWjoinZ?=
 =?us-ascii?q?aSlstO7n27+l2ZbcNWr9joTPWJGr27ITCVnP9LfRwT2pv8LIIaLIq93FZtPB0y?=
 =?us-ascii?q?sI3UGkaYd8pKvSspOgM9vkRBtnJkSXI180bkbAq35zkUD/HizTAsjQ4rRO0x6D?=
 =?us-ascii?q?ft6kx/BVPHpC87k0R5zdDmiBiacCT2KaatWMdRESWi5Bt5CY/yXwsgNV76pkdj?=
 =?us-ascii?q?LjqRAusJ17Y=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A1AABk2hpch0O0hNFkHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwEBgS+COyeMFo4diQ+OOoFzEwEBGBMBhy0iNAkNAQMBAQEBAQECARMBAQE?=
 =?us-ascii?q?IDQkIKS9CFgGBXSQBgmIDAwECJAsBRgYJAQFQAzEBBQEcBgESBYMdgXUNAQScL?=
 =?us-ascii?q?DyMFTOKLxKHbIRBF4FAP4ERgmSLDgKJP4IAhBl+UZANCZFWJIl3h2KJSJATAgQ?=
 =?us-ascii?q?CBAUCBQ8hgSWCDk0wCIMngicXjj4fMoEFAQGHd4VpAQE?=
X-IPAS-Result: =?us-ascii?q?A0A1AABk2hpch0O0hNFkHQEBBQEHBQGBUQgBCwEBgS+COye?=
 =?us-ascii?q?MFo4diQ+OOoFzEwEBGBMBhy0iNAkNAQMBAQEBAQECARMBAQEIDQkIKS9CFgGBX?=
 =?us-ascii?q?SQBgmIDAwECJAsBRgYJAQFQAzEBBQEcBgESBYMdgXUNAQScLDyMFTOKLxKHbIR?=
 =?us-ascii?q?BF4FAP4ERgmSLDgKJP4IAhBl+UZANCZFWJIl3h2KJSJATAgQCBAUCBQ8hgSWCD?=
 =?us-ascii?q?k0wCIMngicXjj4fMoEFAQGHd4VpAQE?=
X-IronPort-AV: E=Sophos;i="5.56,374,1539673200"; 
   d="scan'208";a="55892361"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 19 Dec 2018 15:59:25 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730328AbeLSX4W (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Wed, 19 Dec 2018 18:56:22 -0500
Received: from mail-pf1-f195.google.com ([209.85.210.195]:38123 "EHLO
        mail-pf1-f195.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1730156AbeLSXzs (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 19 Dec 2018 18:55:48 -0500
Received: by mail-pf1-f195.google.com with SMTP id q1so10582577pfi.5
        for <linux-kernel@vger.kernel.org>; Wed, 19 Dec 2018 15:55:47 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=m6RABKy+RQ632Gx1r+iOUpX5DYoCMTAL7f9pkUnDO08=;
        b=sIgmaYgzyAQ/hX0sEtH50UocUVa1V2eTZExlEgBJYAO79ydAfYEJnuk75uDYv17Qje
         71LSqP7Mwwjfldz/ebT9H1Mj7HM3RArGpft0f5EsG7Du7qM8wlM+RtFX/uWuwq2oJbTN
         QEcijHV4GqaG8nKK/YIHyks6UCdzZ5+rfgA+gsx8yygkmJWQ8prDd7/FoLeayuGOpExT
         TO1jZoRqpJzM6ynSAMgfSTb5AAZbIQ8KrGJ4cZu/COMdlT8JyQGXYnob5ioyK3QV8VnV
         7reprSyyqcpWqiQ0Dd8iwMvUtKYJihfgMqyB3mT80V/hOZrUynH9USEmze94crBO1vDM
         fCdA==
X-Gm-Message-State: AA+aEWYa5BLu8mNZ+1Uuk/fE7jvWLW48zmQQhbw3uBD9yxRPL1krruqi
        dmzNneJpymW/kVGyqw5WRDqE3g==
X-Google-Smtp-Source: AFSGD/U7yU7mtMYGDjHOX2SIgraf8zZLQl+pRmkfSvSAfj/zF3zY+r65MK8X0u7O1NgajwaLTjwdSA==
X-Received: by 2002:aa7:868f:: with SMTP id d15mr21992413pfo.225.1545263746732;
        Wed, 19 Dec 2018 15:55:46 -0800 (PST)
Received: from mka.mtv.corp.google.com ([2620:15c:202:1:75a:3f6e:21d:9374])
        by smtp.gmail.com with ESMTPSA id t67sm37045048pfd.90.2018.12.19.15.55.44
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Wed, 19 Dec 2018 15:55:45 -0800 (PST)
From: Matthias Kaehlcke <mka@chromium.org>
To: Rob Clark <robdclark@gmail.com>, David Airlie <airlied@linux.ie>,
        Rob Herring <robh+dt@kernel.org>,
        Mark Rutland <mark.rutland@arm.com>,
        Andy Gross <andy.gross@linaro.org>,
        David Brown <david.brown@linaro.org>
Cc: linux-arm-msm@vger.kernel.org, dri-devel@lists.freedesktop.org,
        freedreno@lists.freedesktop.org, devicetree@vger.kernel.org,
        linux-kernel@vger.kernel.org,
        Archit Taneja <architt@codeaurora.org>,
        Sean Paul <seanpaul@chromium.org>,
        Rajesh Yadav <ryadav@codeaurora.org>,
        Douglas Anderson <dianders@chromium.org>,
        Stephen Boyd <swboyd@chromium.org>,
        Jeykumar Sankaran <jsanka@codeaurora.org>,
        Matthias Kaehlcke <mka@chromium.org>
Subject: [PATCH v5 3/8] drm/msm/dsi: 28nm PHY: Get ref clock from the DT
Date: Wed, 19 Dec 2018 15:55:23 -0800
Message-Id: <20181219235528.114830-4-mka@chromium.org>
X-Mailer: git-send-email 2.20.1.415.g653613c723-goog
In-Reply-To: <20181219235528.114830-1-mka@chromium.org>
References: <20181219235528.114830-1-mka@chromium.org>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Get the ref clock of the PHY from the device tree instead of
hardcoding its name and rate.

Signed-off-by: Matthias Kaehlcke <mka@chromium.org>
Reviewed-by: Stephen Boyd <swboyd@chromium.org> tag
---
Changes in v5:
- added missing return keyword in msm_dsi_pll_28nm_init()
- added "Reviewed-by: Stephen Boyd <swboyd@chromium.org>" tag

Changes in v4:
- always use parent rate in dsi_pll_28nm_clk_set_rate() and
   dsi_pll_28nm_clk_recalc_rate()
- pass name of VCO ref clock to pll_28nm_register() instead of
  storing it in a struct field
- updated commit message

Changes in v3:
- use default name and rate if the ref clock is not specified
  in the DT
- store vco_ref_clk_name instead of vco_ref_clk
- dsi_pll_28nm_clk_set_rate: changed data type of ref_clk_rate to
  unsigned long
- fixed check for EPROBE_DEFER
- renamed VCO_REF_CLK_RATE to VCO_REF_CLK_DEFAULT_RATE

Changes in v2:
- patch added to the series
---
 drivers/gpu/drm/msm/dsi/pll/dsi_pll_28nm.c | 36 +++++++++++++++-------
 1 file changed, 25 insertions(+), 11 deletions(-)

diff --git a/drivers/gpu/drm/msm/dsi/pll/dsi_pll_28nm.c b/drivers/gpu/drm/msm/dsi/pll/dsi_pll_28nm.c
index 26e3a01a99c2b..c839464741927 100644
--- a/drivers/gpu/drm/msm/dsi/pll/dsi_pll_28nm.c
+++ b/drivers/gpu/drm/msm/dsi/pll/dsi_pll_28nm.c
@@ -40,7 +40,6 @@
 
 #define NUM_PROVIDED_CLKS		2
 
-#define VCO_REF_CLK_RATE		19200000
 #define VCO_MIN_RATE			350000000
 #define VCO_MAX_RATE			750000000
 
@@ -166,17 +165,17 @@ static int dsi_pll_28nm_clk_set_rate(struct clk_hw *hw, unsigned long rate,
 	pll_write(base + REG_DSI_28nm_PHY_PLL_LPFC1_CFG, 0x70);
 	pll_write(base + REG_DSI_28nm_PHY_PLL_LPFC2_CFG, 0x15);
 
-	rem = rate % VCO_REF_CLK_RATE;
+	rem = rate % parent_rate;
 	if (rem) {
 		refclk_cfg = DSI_28nm_PHY_PLL_REFCLK_CFG_DBLR;
 		frac_n_mode = 1;
-		div_fbx1000 = rate / (VCO_REF_CLK_RATE / 500);
-		gen_vco_clk = div_fbx1000 * (VCO_REF_CLK_RATE / 500);
+		div_fbx1000 = rate / (parent_rate / 500);
+		gen_vco_clk = div_fbx1000 * (parent_rate / 500);
 	} else {
 		refclk_cfg = 0x0;
 		frac_n_mode = 0;
-		div_fbx1000 = rate / (VCO_REF_CLK_RATE / 1000);
-		gen_vco_clk = div_fbx1000 * (VCO_REF_CLK_RATE / 1000);
+		div_fbx1000 = rate / (parent_rate / 1000);
+		gen_vco_clk = div_fbx1000 * (parent_rate / 1000);
 	}
 
 	DBG("refclk_cfg = %d", refclk_cfg);
@@ -265,7 +264,7 @@ static unsigned long dsi_pll_28nm_clk_recalc_rate(struct clk_hw *hw,
 	void __iomem *base = pll_28nm->mmio;
 	u32 sdm0, doubler, sdm_byp_div;
 	u32 sdm_dc_off, sdm_freq_seed, sdm2, sdm3;
-	u32 ref_clk = VCO_REF_CLK_RATE;
+	u32 ref_clk = parent_rate;
 	unsigned long vco_rate;
 
 	VERB("parent_rate=%lu", parent_rate);
@@ -273,7 +272,7 @@ static unsigned long dsi_pll_28nm_clk_recalc_rate(struct clk_hw *hw,
 	/* Check to see if the ref clk doubler is enabled */
 	doubler = pll_read(base + REG_DSI_28nm_PHY_PLL_REFCLK_CFG) &
 			DSI_28nm_PHY_PLL_REFCLK_CFG_DBLR;
-	ref_clk += (doubler * VCO_REF_CLK_RATE);
+	ref_clk += (doubler * ref_clk);
 
 	/* see if it is integer mode or sdm mode */
 	sdm0 = pll_read(base + REG_DSI_28nm_PHY_PLL_SDM_CFG0);
@@ -514,11 +513,12 @@ static void dsi_pll_28nm_destroy(struct msm_dsi_pll *pll)
 	pll_28nm->clk_data.clk_num = 0;
 }
 
-static int pll_28nm_register(struct dsi_pll_28nm *pll_28nm)
+static int pll_28nm_register(struct dsi_pll_28nm *pll_28nm,
+			     const char *ref_clk_name)
 {
 	char clk_name[32], parent1[32], parent2[32], vco_name[32];
 	struct clk_init_data vco_init = {
-		.parent_names = (const char *[]){ "xo" },
+		.parent_names = &ref_clk_name,
 		.num_parents = 1,
 		.name = vco_name,
 		.flags = CLK_IGNORE_UNUSED,
@@ -593,6 +593,8 @@ struct msm_dsi_pll *msm_dsi_pll_28nm_init(struct platform_device *pdev,
 {
 	struct dsi_pll_28nm *pll_28nm;
 	struct msm_dsi_pll *pll;
+	struct clk *vco_ref_clk;
+	const char *vco_ref_clk_name;
 	int ret;
 
 	if (!pdev)
@@ -605,6 +607,18 @@ struct msm_dsi_pll *msm_dsi_pll_28nm_init(struct platform_device *pdev,
 	pll_28nm->pdev = pdev;
 	pll_28nm->id = id;
 
+	vco_ref_clk = devm_clk_get(&pdev->dev, "ref");
+	if (!IS_ERR(vco_ref_clk)) {
+		vco_ref_clk_name = __clk_get_name(vco_ref_clk);
+	} else {
+		ret = PTR_ERR(vco_ref_clk);
+		if (ret == -EPROBE_DEFER)
+			return ERR_PTR(ret);
+
+		dev_warn(&pdev->dev, "'ref' clock is not specified, using default name\n");
+		vco_ref_clk_name = "xo";
+	}
+
 	pll_28nm->mmio = msm_ioremap(pdev, "dsi_pll", "DSI_PLL");
 	if (IS_ERR_OR_NULL(pll_28nm->mmio)) {
 		dev_err(&pdev->dev, "%s: failed to map pll base\n", __func__);
@@ -637,7 +651,7 @@ struct msm_dsi_pll *msm_dsi_pll_28nm_init(struct platform_device *pdev,
 		return ERR_PTR(-EINVAL);
 	}
 
-	ret = pll_28nm_register(pll_28nm);
+	ret = pll_28nm_register(pll_28nm, vco_ref_clk_name);
 	if (ret) {
 		dev_err(&pdev->dev, "failed to register PLL: %d\n", ret);
 		return ERR_PTR(ret);
-- 
2.20.1.415.g653613c723-goog

