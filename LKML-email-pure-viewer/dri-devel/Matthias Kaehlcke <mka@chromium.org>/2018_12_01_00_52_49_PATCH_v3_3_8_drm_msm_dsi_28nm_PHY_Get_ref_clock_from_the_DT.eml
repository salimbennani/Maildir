Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:24:49 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from mta-temp.ostc.intel.com (mta-temp.ostc.intel.com [10.54.63.100])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 48D3E580665;
	Sat,  1 Dec 2018 18:20:32 -0800 (PST)
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by mta-temp.ostc.intel.com (Postfix) with ESMTPS id 896CF60ED2;
	Fri, 30 Nov 2018 16:54:30 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga004-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 30 Nov 2018 16:54:04 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AMzdHfB9PQWm4o/9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1e0VIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CRWRPQNtfWSJCDI27?=
 =?us-ascii?q?bYQPAeUOM+lDr4nlpVYDtgeyCAq2Ce/z0DJEmmP60Ksn2OohCwHG2wkgEsoJvn?=
 =?us-ascii?q?vOsNX1KKcSUeGvw6nT0D7NaulZ1in96IjMbh8hou+DVq93fMrUykkgDRjIgUmQ?=
 =?us-ascii?q?qYz/ODOV0+UNs3We7+Z6UuKvkWEnphh3rzOyxckskpHEipwJxl3A7yl13Yg4Kc?=
 =?us-ascii?q?OiREJmYtOoDIFcuiCYOoduXM8vQn9ktDo/x7EbuZO0YC0HxIo7yxLBbvGLbo2F?=
 =?us-ascii?q?7QniWemLLzd1gXxldbG/ihu370ev1+zxWdWx3VlQsiVIk8PDu3YQ3BLJ8MeHUO?=
 =?us-ascii?q?Fy/kK51DaPyQ/T7uZELFgqlarUNZEh2KQ8lpkNvkTZGC/5hkH2gLWRdkU+9eik?=
 =?us-ascii?q?8+XnYrP4qZ+AL4J4lB3yP6A0lsCiD+k0LBICU3WY9OigzrHu/E/0TK1PjvIsk6?=
 =?us-ascii?q?nZtJ7aJd4cpq68GwJV1ocj6xCiDzapydgYnmcILEhDeB2Zi4jlIlbOIf7+Dfih?=
 =?us-ascii?q?mVShiylrx//YMb37GJnNLWbMkK3nfblj705Q0g0zzcpQ555MELEOPOrzWlPttN?=
 =?us-ascii?q?zfFhI5Nw20w+X5B9ln2YIeRHmCAquYMKPUrF+J6fgjI+iKZI8Jpjn9L+Ip6OLp?=
 =?us-ascii?q?jX88gVUdZ7Wm3YMLaHCkGfRrO0WZbmDtgtcdC2gKuRAyTOz3iFKYVz5TaG2/X6?=
 =?us-ascii?q?Y95jE9FYKnAp3PRoGrgLydwii7GodaaXxBClCJCX3obZmLW+8QaCKOJc9sij4E?=
 =?us-ascii?q?Vb+/RIM71hGuswn6y7xgLufP/i0YtJTj1MV65uHJlBEy8yB0ANqZ022XU250mW?=
 =?us-ascii?q?YITScs3K9juUx91kuD0a9gjvNCDtxT5/RJUgQgOZ7G1eN6Ccv/WgbAftePVVan?=
 =?us-ascii?q?Tc+qATA3TtIt3dAOZ1xxFMmljhDGxyCqGaMal6SXBJwo9aLRx3vxKNx7y3rc0K?=
 =?us-ascii?q?khjkMpQs1ANWC9gq5/9g7TB5PGkkmDlqaqc7gc0zDJ9GuZ0WWOu0RYWhZqUarZ?=
 =?us-ascii?q?RXAfelfWrdPh60zfVbCuF6ooPhFBycGYLKtKccPmjVNBSPfnO9TeZmaxlny0BR?=
 =?us-ascii?q?aJwLOMcYXrd38c3CXbFEgLjQQT8WyaOgg5Ayeru3jeAyB2FVLzf0Ps9vFzp26h?=
 =?us-ascii?q?QU8q0Q6GdU1h2KCz+h4Om/OcTege3rYFuCcntjV1E0yx39PQC9qcuQVheL9Qbs?=
 =?us-ascii?q?864FdCzWjZrRByPoS8L6B+gV4Taxh3v0Lr1xVwFoVAkcgroGk2zAZoLqKYyldB?=
 =?us-ascii?q?dzKe3ZD/IbDXLmjy/Baya6/ZwF3e0dCW+rsR5/Q8sVnsoAapFk86+XV9z9ZVy2?=
 =?us-ascii?q?ec5onNDAcKS53xVlg49hdkqLDaeCUy/J7U2mB2PqmysT/C3MwpCfAhyhaheddf?=
 =?us-ascii?q?LayFGBXzE80cG8ihNugql0K1YRIDOeBY7LQ0MN++d/uaxK6rO/5tnTK7jWhd/I?=
 =?us-ascii?q?9xyEON9ypmRe7O0JYI2PWY3gqBVzfhg1atqMH3mYZYZT4MGmqz0zTrBIlUZqdq?=
 =?us-ascii?q?Z4YEFX+uI9GrxtV5n5PtQX9Y+0K5CFMcxcCpfgCeb1rj0g1K1EQbuGColjG8zz?=
 =?us-ascii?q?NpjT4ptK2f3CrVzuTmdRoHPHNLRWZ4gVftJ4i0k84VXEyyYwc1kxul4F7wx7JH?=
 =?us-ascii?q?q6RnM2nTXUBIcjD2LmFjSKextqCOY9VS6JMuqihXVOW8YVaHSr/yuRca0iXjH3?=
 =?us-ascii?q?dAyzA/bT2lppL5nxligmKHMHlztGbZed13xRrH5tzTX+RR3jkFRCl/kzXXHUKz?=
 =?us-ascii?q?P9qq/dWVkZfMrOa+WnmlVp1Sdynr0IyBuDG65W1sHR2wgfSzlsf7Hgg91C/xz8?=
 =?us-ascii?q?NqWjnQrBbgfonr0Ly3MOJ9cUlvHlP86ct6Godln4s0hZEQ32Uah5qP8XoGl2fz?=
 =?us-ascii?q?LctU2abkYHURQj4Lxsbf4BL51017MnKJ24X5W22ewsR7Ztm2eGMW2j8n4MBMB6?=
 =?us-ascii?q?eZ97hEnSpzolqlogPde/l9njEByfQw7H4Wmf0GuA0ozi+FGLAdAVFYPTDwlxSP?=
 =?us-ascii?q?992+qaRXZGW1frSq2ktxg8uhDK2crQFGQ3n2ZI0iHSBr48V7MVLM1mDz647+dN?=
 =?us-ascii?q?nRa9ITqgObkxPag+dJL5Ixk+IAhTB7NmLloX0l1+k7gARy3ZG9uYiLMWRs87i/?=
 =?us-ascii?q?Ah5FLT31fMIT9yrpjaZfmMaWwo+uEo9gGjUNQJvnU/aoHCgOuvTgMgaECCc8pW?=
 =?us-ascii?q?uDGbrDAQ+f719roGnVHJCsM3GXOWMVzdF/RBSGIExfgQYUXCg1n5IjFwCqwtDh?=
 =?us-ascii?q?f1l95jwL+lH4rR5MwPpyNxbjSmffuBuoajAsRZidNhVW6x9N51zPPcyC9O5zHD?=
 =?us-ascii?q?xY/p68rAyLMGObfB9FDWUIWkyCGlDiMaOi5djG8+iEGOW+K+HCbqmJqexbT/2I?=
 =?us-ascii?q?346g0pN6/zaQMcWCJnljD/om2kpaQHB2AcLZly8USywQkSLNYNWWpBO9+i1xs8?=
 =?us-ascii?q?C+/+7nWAPp5YuTFbRSNc9j9AyxgaeGL+SQnjp2KS5E1pMQwn/F0Lgf00ATiyFt?=
 =?us-ascii?q?dDmtEK4MtS3XTKLXla9YEQQbaz5oNMZT66I83w9NOdPUi9/v1754iOI1BElBVV?=
 =?us-ascii?q?D7hs6pYskKKXmnNFzbHEaLKKiGJTrTzs7tfKOzUqdQg/tUthGqvTabElTuPjCC?=
 =?us-ascii?q?lznvShCuPvtAjCCdPBxCpo69dgxhBnTkTNLjche7KsN4jSUqwb0ogXPHLXIcMT?=
 =?us-ascii?q?l5c09XsrKc9z9XgvVhFGxH9XdlKeiEmyCE7+jXMJoWsP1rAjhqmOJe+ng117xV?=
 =?us-ascii?q?7CRcTvxvhCTStsJuo02hkuSXyjtoShxOqjNKhIKNpUpjOKXZ+YNGWXbL5x8N6W?=
 =?us-ascii?q?SQCxIXp9pqENHvuqZQysTRm6L3MjtN79XU/c5PT/TTffiAOjIKNRPzG3aAFgwP?=
 =?us-ascii?q?QTWvPHvcr0NYmfCWsHaSq85+4rTlhpsCApZaTlg0G7tOA0V/GN0PLL9zXzU5gf?=
 =?us-ascii?q?iagZhMrUC5plHxSd9Av5bIHqaIBv/vazqFpbpJfR0FxfX/N4tFcsXe0lZhImNn?=
 =?us-ascii?q?gIDDHUaYCdVEuC4ndBIopExL/FB3VGh10EXgPEflyXkfBLabhBktkUMqaOIh5X?=
 =?us-ascii?q?Hj+VAsPXLOpS05ik53ns/q13TZXDfvLav4d5tRFCy840Q4LJL3BQxvahK0tUhl?=
 =?us-ascii?q?Mj7eQPRWlbQ2Jk5xjwqJnJJTBf5dRLYMQxYdxfWcZPhghVFfow2sxVVA4OrYDN?=
 =?us-ascii?q?1ljgR8Is3klG5Jxw82NI19HqfXPqcciwEI3q8=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ALAAB62gFch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgTCCOyeMEY4siQuOKYFzEgEBGBMBh3YiNAkNAQMBAQEBAQECARM?=
 =?us-ascii?q?BAQEIDQkIKSMMgjYkAYJiAwMBAiQLAQ0BATcBBQkBAVADMQEFARwGARIFgxyBd?=
 =?us-ascii?q?Q0BBJptPIodgWwzgnYBAQWHKggSh1qDEoEcF4FAP4ERgmSLCoklgXmEDnxQjz8?=
 =?us-ascii?q?JkSwjiVmHRoh7jzsCBAIEBQIFDyGBJYINTTAIgyeCGwwXiF6FYB8ygQUBAY1cA?=
 =?us-ascii?q?QE?=
X-IPAS-Result: =?us-ascii?q?A0ALAAB62gFch0O0hNFjHAEBAQQBAQcEAQGBUQcBAQsBgTC?=
 =?us-ascii?q?COyeMEY4siQuOKYFzEgEBGBMBh3YiNAkNAQMBAQEBAQECARMBAQEIDQkIKSMMg?=
 =?us-ascii?q?jYkAYJiAwMBAiQLAQ0BATcBBQkBAVADMQEFARwGARIFgxyBdQ0BBJptPIodgWw?=
 =?us-ascii?q?zgnYBAQWHKggSh1qDEoEcF4FAP4ERgmSLCoklgXmEDnxQjz8JkSwjiVmHRoh7j?=
 =?us-ascii?q?zsCBAIEBQIFDyGBJYINTTAIgyeCGwwXiF6FYB8ygQUBAY1cAQE?=
X-IronPort-AV: E=Sophos;i="5.56,300,1539673200"; 
   d="scan'208";a="64835263"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 30 Nov 2018 16:54:02 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726789AbeLAMEk (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sat, 1 Dec 2018 07:04:40 -0500
Received: from mail-pl1-f193.google.com ([209.85.214.193]:44630 "EHLO
        mail-pl1-f193.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726759AbeLAMEk (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sat, 1 Dec 2018 07:04:40 -0500
Received: by mail-pl1-f193.google.com with SMTP id k8so3578456pls.11
        for <linux-kernel@vger.kernel.org>; Fri, 30 Nov 2018 16:53:28 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=chromium.org; s=google;
        h=from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding;
        bh=ob9vpSU1+1nD+bwLCyctkKfXPK21XNBnKf3G59AN/2s=;
        b=Yq+XJ2loJ4NwndoutH7UWBG5NADYr5m4oS/Cxl0NZgaxgrgDPmwkHvTpCZ68s9wsRt
         Pi/gvFfYPeCuM5gxJNQj//1FGBq/GD6cNf2S1hr3mOK87kpqsv2t9U5kjxpsyg0govC9
         QUCSHIlW8fRGhg/5SkePOOTBj1YtFYd0yTjjg=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=ob9vpSU1+1nD+bwLCyctkKfXPK21XNBnKf3G59AN/2s=;
        b=bTgTAxA70mbECm8f2gwMo9CHVys3x7ZgGwbzLmIedEdxiZGcVaRzIFsHr8Jr3Mz62Q
         N9syzxif/McKpLAs9Hpwtcnu90IyJvbydDyqep8kg+MVeKGedjxZ4WlfKnJfyNtMEgri
         0nQ+mZ1cxRS5TLCA3VjTPImwa698AFj3qvNOPbtfFeRtmllA1bfu87eccD6uoCDkegLx
         iZrPeW5Q/KmkTAYvXDyD7pzH36yt0R2hv9JqTQw17GVyJNveU41QN3X0J2QuAiX59jlE
         5CpXEMY+5WKoFPK9ugONBErBmXoddr42gOVmq/5W0yV1mRwQHcuXnzGuGwfT92ESG3js
         Ew0A==
X-Gm-Message-State: AA+aEWYHFPFBtDhLcca7IRzsnPLB/SoHFP8xhvvScfwKPgRYvEZOf63T
        2pABh5qwonWhnY5Qopv0ytbmBw==
X-Google-Smtp-Source: AFSGD/WtbMF0k4XF3B4vC1zfgQMAbMscvD5azipj2OxsD80IfS1cZ8H+DgsYI+kdKY6i9S/A1JAA3Q==
X-Received: by 2002:a17:902:bcc7:: with SMTP id o7mr7849325pls.281.1543625608053;
        Fri, 30 Nov 2018 16:53:28 -0800 (PST)
Received: from mka.mtv.corp.google.com ([2620:15c:202:1:b6af:f85:ed6c:ac6a])
        by smtp.gmail.com with ESMTPSA id z8sm16518566pgz.53.2018.11.30.16.53.26
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Fri, 30 Nov 2018 16:53:27 -0800 (PST)
From: Matthias Kaehlcke <mka@chromium.org>
To: Rob Clark <robdclark@gmail.com>, David Airlie <airlied@linux.ie>,
        Rob Herring <robh+dt@kernel.org>,
        Mark Rutland <mark.rutland@arm.com>,
        Andy Gross <andy.gross@linaro.org>,
        David Brown <david.brown@linaro.org>
Cc: Archit Taneja <architt@codeaurora.org>,
        Sean Paul <seanpaul@chromium.org>,
        Rajesh Yadav <ryadav@codeaurora.org>,
        Douglas Anderson <dianders@chromium.org>,
        Stephen Boyd <swboyd@chromium.org>,
        Jeykumar Sankaran <jsanka@codeaurora.org>,
        linux-arm-msm@vger.kernel.org, dri-devel@lists.freedesktop.org,
        freedreno@lists.freedesktop.org, devicetree@vger.kernel.org,
        linux-kernel@vger.kernel.org, Matthias Kaehlcke <mka@chromium.org>
Subject: [PATCH v3 3/8] drm/msm/dsi: 28nm PHY: Get ref clock from the DT
Date: Fri, 30 Nov 2018 16:52:49 -0800
Message-Id: <20181201005254.139908-4-mka@chromium.org>
X-Mailer: git-send-email 2.20.0.rc1.387.gf8505762e3-goog
In-Reply-To: <20181201005254.139908-1-mka@chromium.org>
References: <20181201005254.139908-1-mka@chromium.org>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Get the ref clock of the PHY from the device tree instead of
hardcoding its name and rate. Use default values if the ref
clock is not specified.

Signed-off-by: Matthias Kaehlcke <mka@chromium.org>
---
Changes in v3:
- use default name and rate if the ref clock is not specified
  in the DT
- store vco_ref_clk_name instead of vco_ref_clk
- dsi_pll_28nm_clk_set_rate: changed data type of ref_clk_rate to
  unsigned long
- fixed check for EPROBE_DEFER
- renamed VCO_REF_CLK_RATE to VCO_REF_CLK_DEFAULT_RATE

Changes in v2:
- patch added to the series
---
 drivers/gpu/drm/msm/dsi/pll/dsi_pll_28nm.c | 35 ++++++++++++++++------
 1 file changed, 26 insertions(+), 9 deletions(-)

diff --git a/drivers/gpu/drm/msm/dsi/pll/dsi_pll_28nm.c b/drivers/gpu/drm/msm/dsi/pll/dsi_pll_28nm.c
index 26e3a01a99c2b..4a84c69ca0b2b 100644
--- a/drivers/gpu/drm/msm/dsi/pll/dsi_pll_28nm.c
+++ b/drivers/gpu/drm/msm/dsi/pll/dsi_pll_28nm.c
@@ -40,7 +40,7 @@
 
 #define NUM_PROVIDED_CLKS		2
 
-#define VCO_REF_CLK_RATE		19200000
+#define VCO_REF_CLK_DEFAULT_RATE	19200000
 #define VCO_MIN_RATE			350000000
 #define VCO_MAX_RATE			750000000
 
@@ -81,6 +81,7 @@ struct dsi_pll_28nm {
 	struct platform_device *pdev;
 	void __iomem *mmio;
 
+	const char *vco_ref_clk_name;
 	int vco_delay;
 
 	/* private clocks: */
@@ -139,6 +140,8 @@ static int dsi_pll_28nm_clk_set_rate(struct clk_hw *hw, unsigned long rate,
 	struct dsi_pll_28nm *pll_28nm = to_pll_28nm(pll);
 	struct device *dev = &pll_28nm->pdev->dev;
 	void __iomem *base = pll_28nm->mmio;
+	unsigned long ref_clk_rate = parent_rate ?
+		parent_rate : VCO_REF_CLK_DEFAULT_RATE;
 	unsigned long div_fbx1000, gen_vco_clk;
 	u32 refclk_cfg, frac_n_mode, frac_n_value;
 	u32 sdm_cfg0, sdm_cfg1, sdm_cfg2, sdm_cfg3;
@@ -166,17 +169,17 @@ static int dsi_pll_28nm_clk_set_rate(struct clk_hw *hw, unsigned long rate,
 	pll_write(base + REG_DSI_28nm_PHY_PLL_LPFC1_CFG, 0x70);
 	pll_write(base + REG_DSI_28nm_PHY_PLL_LPFC2_CFG, 0x15);
 
-	rem = rate % VCO_REF_CLK_RATE;
+	rem = rate % ref_clk_rate;
 	if (rem) {
 		refclk_cfg = DSI_28nm_PHY_PLL_REFCLK_CFG_DBLR;
 		frac_n_mode = 1;
-		div_fbx1000 = rate / (VCO_REF_CLK_RATE / 500);
-		gen_vco_clk = div_fbx1000 * (VCO_REF_CLK_RATE / 500);
+		div_fbx1000 = rate / (ref_clk_rate / 500);
+		gen_vco_clk = div_fbx1000 * (ref_clk_rate / 500);
 	} else {
 		refclk_cfg = 0x0;
 		frac_n_mode = 0;
-		div_fbx1000 = rate / (VCO_REF_CLK_RATE / 1000);
-		gen_vco_clk = div_fbx1000 * (VCO_REF_CLK_RATE / 1000);
+		div_fbx1000 = rate / (ref_clk_rate / 1000);
+		gen_vco_clk = div_fbx1000 * (ref_clk_rate / 1000);
 	}
 
 	DBG("refclk_cfg = %d", refclk_cfg);
@@ -265,7 +268,8 @@ static unsigned long dsi_pll_28nm_clk_recalc_rate(struct clk_hw *hw,
 	void __iomem *base = pll_28nm->mmio;
 	u32 sdm0, doubler, sdm_byp_div;
 	u32 sdm_dc_off, sdm_freq_seed, sdm2, sdm3;
-	u32 ref_clk = VCO_REF_CLK_RATE;
+	u32 ref_clk = parent_rate ?
+		parent_rate : VCO_REF_CLK_DEFAULT_RATE;
 	unsigned long vco_rate;
 
 	VERB("parent_rate=%lu", parent_rate);
@@ -273,7 +277,7 @@ static unsigned long dsi_pll_28nm_clk_recalc_rate(struct clk_hw *hw,
 	/* Check to see if the ref clk doubler is enabled */
 	doubler = pll_read(base + REG_DSI_28nm_PHY_PLL_REFCLK_CFG) &
 			DSI_28nm_PHY_PLL_REFCLK_CFG_DBLR;
-	ref_clk += (doubler * VCO_REF_CLK_RATE);
+	ref_clk += (doubler * ref_clk);
 
 	/* see if it is integer mode or sdm mode */
 	sdm0 = pll_read(base + REG_DSI_28nm_PHY_PLL_SDM_CFG0);
@@ -518,7 +522,7 @@ static int pll_28nm_register(struct dsi_pll_28nm *pll_28nm)
 {
 	char clk_name[32], parent1[32], parent2[32], vco_name[32];
 	struct clk_init_data vco_init = {
-		.parent_names = (const char *[]){ "xo" },
+		.parent_names = &pll_28nm->vco_ref_clk_name,
 		.num_parents = 1,
 		.name = vco_name,
 		.flags = CLK_IGNORE_UNUSED,
@@ -593,6 +597,7 @@ struct msm_dsi_pll *msm_dsi_pll_28nm_init(struct platform_device *pdev,
 {
 	struct dsi_pll_28nm *pll_28nm;
 	struct msm_dsi_pll *pll;
+	struct clk *vco_ref_clk;
 	int ret;
 
 	if (!pdev)
@@ -605,6 +610,18 @@ struct msm_dsi_pll *msm_dsi_pll_28nm_init(struct platform_device *pdev,
 	pll_28nm->pdev = pdev;
 	pll_28nm->id = id;
 
+	vco_ref_clk = devm_clk_get(&pdev->dev, "ref");
+	if (!IS_ERR(vco_ref_clk)) {
+		pll_28nm->vco_ref_clk_name = __clk_get_name(vco_ref_clk);
+	} else {
+		ret = PTR_ERR(vco_ref_clk);
+		if (ret == -EPROBE_DEFER)
+			ERR_PTR(ret);
+
+		dev_warn(&pdev->dev, "'ref' clock is not specified, using default name\n");
+		pll_28nm->vco_ref_clk_name = "xo";
+	}
+
 	pll_28nm->mmio = msm_ioremap(pdev, "dsi_pll", "DSI_PLL");
 	if (IS_ERR_OR_NULL(pll_28nm->mmio)) {
 		dev_err(&pdev->dev, "%s: failed to map pll base\n", __func__);
-- 
2.20.0.rc1.387.gf8505762e3-goog

