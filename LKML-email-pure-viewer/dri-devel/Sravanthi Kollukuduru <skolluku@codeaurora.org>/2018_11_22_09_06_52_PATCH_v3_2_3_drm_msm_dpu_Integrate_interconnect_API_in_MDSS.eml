Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 22 Nov 2018 19:04:41 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id E926B58046A;
	Thu, 22 Nov 2018 01:10:21 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by fmsmga006-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 22 Nov 2018 01:10:21 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AfVNckx287saVqSClsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segTKfnxwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QLYpUjqg8qhrUgflhi?=
 =?us-ascii?q?cZOTAk/m/Zict+g6BVoBK6vxxywZXZbJ2JOPdkYq/QZ88WSXZHU81MVyJBGIS8?=
 =?us-ascii?q?b44XAuQcJ+ZXtZf9qEEIrRuiBQmsBf7kxDpPhn/y2a06zuchERzb0ww9BdIOrW?=
 =?us-ascii?q?nfodLuNKcRVuC1yK3IzSjAb/NLwjry9I/IfQ0/rv6WQLJwa83RyVM1GA/fiVWQ?=
 =?us-ascii?q?s4PlMiqT2+8QsGab9/JtWfyzh2MjsQ19vzaiytk2hoXUhY8Z1krI+CR7zYotON?=
 =?us-ascii?q?G0VEB2bcS6HJdOsyyWLZZ6T8c4T211vCs3zKANt4ShcygQ0psnwgbSa/yZfIiM?=
 =?us-ascii?q?5RLuTPiRIThmi3J/Yr6/hAi98VKmyuLiUsm4ylFKrjBKktXUt3AN0QLc6tSfR/?=
 =?us-ascii?q?dj4kus3SyD2x3d5+1aO0w4iKnWJ4I7zrMxlJcfqUHDETX3mEXygq+WbEIk+u2w?=
 =?us-ascii?q?5uTjY7XmoIKcNoBthgH9LKsugMq/Dvo8MgQXWGia9+K826P5/UDiXrVKgeM5kr?=
 =?us-ascii?q?PDvJDZO8sbvKi5DBFR0oo57Ba/FTim3MwCnXYbNFJFZA6Hj4/xNlHKIfD4Dumw?=
 =?us-ascii?q?j06jkTd23P3GOrzhApPQLnnMirvhfLB961JCxwo319xQ+5VUCrQZKvLpRkDxrM?=
 =?us-ascii?q?DYDgM+MwGsw+boEtR91p8EVmKIGKOZML7SvkWO5uIgOOSMYI4VuDDgK/kq/fLu?=
 =?us-ascii?q?jHk5mUMDcqmtx5cYdHe4HvF+KUWDfXXsmssBEXsNvgcmTuzqj0ONXSRQZ3a1Wa?=
 =?us-ascii?q?I84DY7BZmiDYfCQICtnbOA0D26Hp1QemBJFFSMHW30eIWDXvcGcDiSLdN5kjwY?=
 =?us-ascii?q?SbihTJcs2gu1tA/6zLpnLfDY+jcCupLhz9V14+zTlRcv9T17Fcid0meNT31qkW?=
 =?us-ascii?q?MMXTM5wKd/oUllwFeZzad4m+BYFcBU5/5RUQc1L5jcw/Z+C9DzQA3BeNiJRU2i?=
 =?us-ascii?q?QtWnBzExU90wz8UPY0Z7B9WtkBTD0zC2DL8SkryBHIY0/b7E33jtO8Z9zG7L27?=
 =?us-ascii?q?Q7gFk4XMRDL22mibR59wjIGYHJlUKVl6KpdaQZ2C7A72ODzWuIvEFFXw98S6TF?=
 =?us-ascii?q?XXYDZkTIqdT1/F/NT7irCb4/KAtO1daCKrdWat3ulVhJWe3sOMrAbG6rm2e/Hx?=
 =?us-ascii?q?CIxqiSY4rsYGgd2CTdCE4ZkwEc53qGNA4+Bju/rGLaFjBhCVXvY0b0++lktHy7?=
 =?us-ascii?q?VlM0zx2Nb0B5y7q1+xsVhfuAS/MT3rMIojshpy9zHFan29LWCtyApwV6caVYYN?=
 =?us-ascii?q?M95kpH1G3Duwx8OJygM75thloEfwtruEPu0g19Cp9cnsgysHMq0A1yJLqC31NF?=
 =?us-ascii?q?aTyZ0o7/O73NJmbp4RCgdrTZ2lfd0NaR5KcC8/A4q1TlvAG0GUsu6XRn099J03?=
 =?us-ascii?q?SC4pXGFhYdUZX0Ukwv7Rh1u6naYjUh54PTzXBtMbS0viXe1N4zBeolygyvf9FQ?=
 =?us-ascii?q?MK6fEA/yEssaB9WhKeAwmlipaA4EM/5W9KIuI8ymcP6G0raxPOl8hDKmkXhH4I?=
 =?us-ascii?q?dl30KW9ipzVvTH34wYzPGfxAeHUSnzjE2gsszuhY9LfzUSEXehxij+A45RYLZ/?=
 =?us-ascii?q?fYIKCWeoPs22yc9yh5/rW35E6lGjA0kK19OueRqXd1b9xxFf1VwLoXy7niu11z?=
 =?us-ascii?q?x1kzAzoqufxiDO2PnidBwcN25PRWlii0rsIIeug9AbWkiocxYmlB+/6UnmwKhb?=
 =?us-ascii?q?obx1L3PPTkdQYyj2M2ZiX7OytrWYec5P65AosSJNXOSne1+aSb39oxoc0yz9GW?=
 =?us-ascii?q?tT3zQ7dzCsupXkkB12kmOdLHBvrHXHfcF83wvQ5NvZRfRJxDoJWDF4iSXLBli7?=
 =?us-ascii?q?J9So/c+bl5DZvuC8VmKhUIZecS3qzYOGqSu66ndmARy5n/CvhNLnFRI23jP819?=
 =?us-ascii?q?lvTS/ItgrzYpH316SmNuJqZkpoC0X968ZgGoF+j5E/hJcf2XUBgpWV/HwHkXr8?=
 =?us-ascii?q?MNlB2KL+amYNSiAPw9LP/Afl30hjJGqTx43lTnWd3tdhZ96ib2MT2yI97NpFBL?=
 =?us-ascii?q?2a7bNahit1vkS3rRjKbvdjhDcdxuAj6Hobg+EPpQoswT+RArEUHUlEIyPskw6E?=
 =?us-ascii?q?4My5rKVSfGyva6S/1FJindC9C7GPuh1cWHH8eps4HC5/9MN/ME/X0H3o64HpY9?=
 =?us-ascii?q?3QbdMVth2JnBbMlelVKJQtlvUUgSprI37yvXogy+QjlxxhwYm6vJSbK2Vq5K+2?=
 =?us-ascii?q?GQRXNjrxZ8MO4D3tibtek92S34CuGJVhBzoKUIHpTfKuDDIdq/DnOxySHz07r3?=
 =?us-ascii?q?eRAaDfEhOH6Ed6s3LPFIimN3ONK3kc09piXwORJFBFjAAXQTU6nYM5Fgawy8z6?=
 =?us-ascii?q?a0p54jER5ljlqhpD0O5oNh//UnvBqwescDs7VJ+fLB9O5AFY+0jVKdCe7v50Hy?=
 =?us-ascii?q?xA/pyhqxGNKnWGZwtSC2EFQFeEB1flPrmh/tTA9+mYBuyjL/rBe7mOqOpeV+uW?=
 =?us-ascii?q?ypKryIdp4zGMNsCXNHl4E/I7wlZDXWx+G8nBmzUAVS0XlyHOb86avhu8+Td3rs?=
 =?us-ascii?q?ew8Pv1QgLv+JCPBqBWMdVu/RC2nKiCO/SRhCZ/NTZXyJcMyWXUx7gY2V4Ykztu?=
 =?us-ascii?q?eCW1EbQcqS7NS7rdlbVKDxEAcSN8KstJ47g43glMIsPbjtL11rhljv86EVtFVF?=
 =?us-ascii?q?rhmt23aswOOW2yKFTHBEOTPrScOTLL2933Yb+7SbBIkOVUthiwtSyHHEP5IjuD?=
 =?us-ascii?q?lyfmVxa0POFIjSGbOgFeuY6nfhZsD2jjUMzpahmhPNBrij02xKU+hmnWOm4ELT?=
 =?us-ascii?q?h8b0RNo6WQ7CxChPV/Hm1B7nx9IuiFmyaW9e/YKpkNvPtvAyR0kf9a4Xsgx7tU?=
 =?us-ascii?q?6iFEWOJ6mC/IotFypFGml7rH9j0yXABP7zpGmo+PlUFjIrnCsJdaVHvI8QkO8W?=
 =?us-ascii?q?KITRMQqJ8tDtzpprAVw8LK0afoLR9c/N/Ou8gRHc7ZLISAKnVleRTzFTPYFgYD?=
 =?us-ascii?q?ShavNHrDnApTivyf+nCOrYQ9st7rgpVKArNWSl0+G+8AB0lNAtMPOtF0UykinL?=
 =?us-ascii?q?rdi9QHtlSkqxyEf99ToJnBSvKTSdboLDKEjqRIegEViefjLoMXMpD4xmRpbVV3?=
 =?us-ascii?q?lZnQHFDZG9dXrXsyPUcPvExR/S0mHSUI0EX/Z1b17Q=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AjAAD9cfZbh0O0hNFiHgEGBwaBUggLA?=
 =?us-ascii?q?YIAgWsnjG+LIoIhiQSOIoFzFBgTAYhOIjUIDQEDAQEBAQEBAgETAQEBCA0JCCk?=
 =?us-ascii?q?jDII2IoJlAwMBAiQZAQE3AQUJAQFQAykrBwoIBYMcgXUMAQWpMIFsM4J2AQEFh?=
 =?us-ascii?q?yIIh16DD4EcF4FAP4ERjWuJG4YAdk+OXkYJkSQjiVGHN5gwgUgBggp9CIMnghs?=
 =?us-ascii?q?MF4hehUY4MoEFAQGNHAEB?=
X-IPAS-Result: =?us-ascii?q?A0AjAAD9cfZbh0O0hNFiHgEGBwaBUggLAYIAgWsnjG+LIoI?=
 =?us-ascii?q?hiQSOIoFzFBgTAYhOIjUIDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2IoJlAwMBA?=
 =?us-ascii?q?iQZAQE3AQUJAQFQAykrBwoIBYMcgXUMAQWpMIFsM4J2AQEFhyIIh16DD4EcF4F?=
 =?us-ascii?q?AP4ERjWuJG4YAdk+OXkYJkSQjiVGHN5gwgUgBggp9CIMnghsMF4hehUY4MoEFA?=
 =?us-ascii?q?QGNHAEB?=
X-IronPort-AV: E=Sophos;i="5.56,265,1539673200"; 
   d="scan'208";a="63548557"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 22 Nov 2018 01:10:20 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2393386AbeKVTpw (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 22 Nov 2018 14:45:52 -0500
Received: from smtp.codeaurora.org ([198.145.29.96]:35400 "EHLO
        smtp.codeaurora.org" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1730412AbeKVTpv (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 22 Nov 2018 14:45:51 -0500
Received: by smtp.codeaurora.org (Postfix, from userid 1000)
        id C794F60C48; Thu, 22 Nov 2018 09:07:15 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=codeaurora.org;
        s=default; t=1542877635;
        bh=Pq9fhDDJ782dlNY7ozcU47fIMtNoEuYEpKheVJ0L94w=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=hTGWmmJeebBbzsLIbSvEpYsQqe6szFmBNr7hNgrAE6FvfHMLnZZYKHA4lQYejEMyN
         XWpA10NCo13x381UpcCqHx90IMx4HAsj6ESC0cB9VMv7bRCbMAT2fhPljzYpEyVR6q
         6ZesfmSkhNW0oAPFTlLoN5vXDgjc5JmQaE5YbHOA=
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
        pdx-caf-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-2.7 required=2.0 tests=ALL_TRUSTED,BAYES_00,
        DKIM_INVALID,DKIM_SIGNED autolearn=no autolearn_force=no version=3.4.0
Received: from skolluku-linux.qualcomm.com (blr-c-bdr-fw-01_globalnat_allzones-outside.qualcomm.com [103.229.19.19])
        (using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
        (No client certificate requested)
        (Authenticated sender: skolluku@smtp.codeaurora.org)
        by smtp.codeaurora.org (Postfix) with ESMTPSA id 22D6B60722;
        Thu, 22 Nov 2018 09:07:10 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=codeaurora.org;
        s=default; t=1542877634;
        bh=Pq9fhDDJ782dlNY7ozcU47fIMtNoEuYEpKheVJ0L94w=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=iEAbJPug/9yODpZL2AgM1XK13cmrWF02v1kUyp099hbLUk7Wd2lu3xDJtXWf7j8oC
         wPNTfm2XWesDyybEB8arZn5nbiFwYSKJTYP+8cWZoBqSLCYD8aPlcu2fza1uwgBZPT
         y0lrz7EOmPaJgPEuudwAY1welHlmYtfB+w773TOA=
DMARC-Filter: OpenDMARC Filter v1.3.2 smtp.codeaurora.org 22D6B60722
Authentication-Results: pdx-caf-mail.web.codeaurora.org; dmarc=none (p=none dis=none) header.from=codeaurora.org
Authentication-Results: pdx-caf-mail.web.codeaurora.org; spf=none smtp.mailfrom=skolluku@codeaurora.org
From: Sravanthi Kollukuduru <skolluku@codeaurora.org>
To: dri-devel@lists.freedesktop.org, linux-arm-msm@vger.kernel.org,
        freedreno@lists.freedesktop.org, devicetree@vger.kernel.org
Cc: Sravanthi Kollukuduru <skolluku@codeaurora.org>,
        linux-kernel@vger.kernel.org, robdclark@gmail.com,
        seanpaul@chromium.org, sean@poorly.run
Subject: [PATCH v3 2/3] drm/msm/dpu: Integrate interconnect API in MDSS
Date: Thu, 22 Nov 2018 14:36:52 +0530
Message-Id: <20181122090653.3523-3-skolluku@codeaurora.org>
X-Mailer: git-send-email 2.16.4
In-Reply-To: <20181122090653.3523-1-skolluku@codeaurora.org>
References: <20181122090653.3523-1-skolluku@codeaurora.org>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The interconnect framework is designed to provide a
standard kernel interface to control the settings of
the interconnects on a SoC.

The interconnect API uses a consumer/provider-based model,
where the providers are the interconnect buses and the
consumers could be various drivers.

MDSS is one of the interconnect consumers which uses the
interconnect APIs to get the path between endpoints and
set its bandwidth/latency/QoS requirements for the given
interconnected path.

Changes in v2:
	- Remove error log and unnecessary check (Jordan Crouse)

Changes in v3:
	- Code clean involving variable name change, removal
	  of extra paranthesis and variables (Matthias Kaehlcke)

Signed-off-by: Sravanthi Kollukuduru <skolluku@codeaurora.org>
---
 drivers/gpu/drm/msm/disp/dpu1/dpu_mdss.c | 49 ++++++++++++++++++++++++++++----
 1 file changed, 44 insertions(+), 5 deletions(-)

diff --git a/drivers/gpu/drm/msm/disp/dpu1/dpu_mdss.c b/drivers/gpu/drm/msm/disp/dpu1/dpu_mdss.c
index 38576f8b90b6..1387a6b1b39e 100644
--- a/drivers/gpu/drm/msm/disp/dpu1/dpu_mdss.c
+++ b/drivers/gpu/drm/msm/disp/dpu1/dpu_mdss.c
@@ -4,10 +4,12 @@
  */
 
 #include "dpu_kms.h"
+#include <linux/interconnect.h>
 
 #define to_dpu_mdss(x) container_of(x, struct dpu_mdss, base)
 
-#define HW_INTR_STATUS			0x0010
+#define HW_INTR_STATUS	0x0010
+#define MAX_BW		6800000
 
 struct dpu_mdss {
 	struct msm_mdss base;
@@ -16,8 +18,30 @@ struct dpu_mdss {
 	u32 hwversion;
 	struct dss_module_power mp;
 	struct dpu_irq_controller irq_controller;
+	struct icc_path *path[2];
+	u32 num_paths;
 };
 
+static int dpu_mdss_parse_data_bus_icc_path(
+		struct drm_device *dev, struct dpu_mdss *dpu_mdss)
+{
+	struct icc_path *path0 = of_icc_get(dev->dev, "port0");
+	struct icc_path *path1 = of_icc_get(dev->dev, "port1");
+
+	if (IS_ERR(path0))
+		return PTR_ERR(path0);
+
+	dpu_mdss->path[0] = path0;
+	dpu_mdss->num_paths = 1;
+
+	if (!IS_ERR(path1)) {
+		dpu_mdss->path[1] = path1;
+		dpu_mdss->num_paths++;
+	}
+
+	return 0;
+}
+
 static irqreturn_t dpu_mdss_irq(int irq, void *arg)
 {
 	struct dpu_mdss *dpu_mdss = arg;
@@ -127,7 +151,11 @@ static int dpu_mdss_enable(struct msm_mdss *mdss)
 {
 	struct dpu_mdss *dpu_mdss = to_dpu_mdss(mdss);
 	struct dss_module_power *mp = &dpu_mdss->mp;
-	int ret;
+	int ret, i;
+	u64 avg_bw = dpu_mdss->num_paths ? MAX_BW/dpu_mdss->num_paths : 0;
+
+	for (i = 0; i < dpu_mdss->num_paths; i++)
+		icc_set(dpu_mdss->path[i], avg_bw, MAX_BW);
 
 	ret = msm_dss_enable_clk(mp->clk_config, mp->num_clk, true);
 	if (ret)
@@ -140,12 +168,15 @@ static int dpu_mdss_disable(struct msm_mdss *mdss)
 {
 	struct dpu_mdss *dpu_mdss = to_dpu_mdss(mdss);
 	struct dss_module_power *mp = &dpu_mdss->mp;
-	int ret;
+	int ret, i;
 
 	ret = msm_dss_enable_clk(mp->clk_config, mp->num_clk, false);
 	if (ret)
 		DPU_ERROR("clock disable failed, ret:%d\n", ret);
 
+	for (i = 0; i < dpu_mdss->num_paths; i++)
+		icc_set(dpu_mdss->path[i], 0, 0);
+
 	return ret;
 }
 
@@ -155,6 +186,7 @@ static void dpu_mdss_destroy(struct drm_device *dev)
 	struct msm_drm_private *priv = dev->dev_private;
 	struct dpu_mdss *dpu_mdss = to_dpu_mdss(priv->mdss);
 	struct dss_module_power *mp = &dpu_mdss->mp;
+	int i;
 
 	pm_runtime_disable(dev->dev);
 	_dpu_mdss_irq_domain_fini(dpu_mdss);
@@ -162,6 +194,9 @@ static void dpu_mdss_destroy(struct drm_device *dev)
 	msm_dss_put_clk(mp->clk_config, mp->num_clk);
 	devm_kfree(&pdev->dev, mp->clk_config);
 
+	for (i = 0; i < dpu_mdss->num_paths; i++)
+		icc_put(dpu_mdss->path[i]);
+
 	if (dpu_mdss->mmio)
 		devm_iounmap(&pdev->dev, dpu_mdss->mmio);
 	dpu_mdss->mmio = NULL;
@@ -200,6 +235,10 @@ int dpu_mdss_init(struct drm_device *dev)
 	}
 	dpu_mdss->mmio_len = resource_size(res);
 
+	ret = dpu_mdss_parse_data_bus_icc_path(dev, dpu_mdss);
+	if (ret)
+		return ret;
+
 	mp = &dpu_mdss->mp;
 	ret = msm_dss_parse_clock(pdev, mp);
 	if (ret) {
@@ -221,14 +260,14 @@ int dpu_mdss_init(struct drm_device *dev)
 		goto irq_error;
 	}
 
+	priv->mdss = &dpu_mdss->base;
+
 	pm_runtime_enable(dev->dev);
 
 	pm_runtime_get_sync(dev->dev);
 	dpu_mdss->hwversion = readl_relaxed(dpu_mdss->mmio);
 	pm_runtime_put_sync(dev->dev);
 
-	priv->mdss = &dpu_mdss->base;
-
 	return ret;
 
 irq_error:
-- 
The Qualcomm Innovation Center, Inc. is a member of the Code Aurora Forum,
a Linux Foundation Collaborative Project

