Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  18 Dec 2018 21:10:07 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 3CA3A5805F0;
	Tue, 18 Dec 2018 03:36:10 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 18 Dec 2018 03:36:09 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AD64ZUBDWUrfFgLkF2r6lUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7+psywAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VDK/5KlpVRDokj?=
 =?us-ascii?q?8KOT4n/m/KhMJ+j6VVoAm5pxF92IPYfJ2ZOeBicq7HYd8WWWxMVdtRWSxbBYO8?=
 =?us-ascii?q?apMCAe4bMudYtYb9oUcOpgajCwmsGuzvyT9IiWXs3aYn1OkhExrG3Aw+ENINsH?=
 =?us-ascii?q?Tbts/1ObwOXuCy0abH0y/Mb+5M2Tf68ojHaAotofaWXbJ/aMfcz1QkGQDdjliI?=
 =?us-ascii?q?t4DpIzeY2v4Qv2WV8eZsT/+jhm07pw1rozWixN8ghpTVio8b0FzI6zt1zYIvKd?=
 =?us-ascii?q?GlTEN3e8OoHZ9WuiqHLYV5WNkiTHttuCsiyr0Jp5q7fC8SxZQ5yB7QdeaHf5KL?=
 =?us-ascii?q?4h39TuaRJyl3hHZ/dLK4nRay/lCsyuz6VsaqzFZHtjRJnsXIu3wXyhDe5NaLRu?=
 =?us-ascii?q?Fg8kqixTqDzQHe5+NcLUAxj6XbKpohwrAqlpoUtETOBiv2mETwjK+LeUQo4+uo?=
 =?us-ascii?q?5Pr9YrXguJCcM5Z4igbwM6QohMO/G/81MhYBX2eF4+Swzr7j8lPjQLVMkPI2lr?=
 =?us-ascii?q?PVsJfAJcQUvqK5GRNa0p4/6xajCDeryNAYnXgELF1bYh6GgJXpNkrKIPD5C/e/?=
 =?us-ascii?q?nlutnC1qx/DAIr3uHJHNImLfn7fmeLZ381RcxxYrzdBD+5JUDakMIPLpVU/wqN?=
 =?us-ascii?q?zXFBg5Pxa0w+b6Etp90IweVHmLAq+YNqPSrFCJ6vguI+mKeI8apjL9J+I56P7p?=
 =?us-ascii?q?iH8zgUUdcrWx3ZsLdHC4GexrI0eeYXXymNsBEmAKvgw4TOztk1CCVT9TZ3CvX6?=
 =?us-ascii?q?Mz/D07CYSmDZvdSYCpmrCOwCC7HphObGBcFl+MCWvod5mDW/oUci2SOc9hkjsH?=
 =?us-ascii?q?VbS7UY8uzxOuuRT+y7pmKOrU5yIZuYji1Nhz++3cixUy+SZoAMSa1mGHV3t0kX?=
 =?us-ascii?q?8QRz8qwKB/plRwylSZ3qh+mfBYEd1T6OlPUgc1LpPcy+16C9bvWgPOZNuJSVCm?=
 =?us-ascii?q?Qsm4DjE1VN4+39gOY0NlEdW4kh/DxzaqA6MSl7GTGZM76Lzc0GbrK8Z90XnG0r?=
 =?us-ascii?q?IhgEcgQsdIMW2mhat/9wzICo7NkkWZkbuqdKsG0C7M8meD0XSBvEVCXAFsVqXF?=
 =?us-ascii?q?WGgVZlHKotTh+kPCU7iuBKw6PQRb186NNLFGat3zglVAX/fsJtLebnm1m2exAx?=
 =?us-ascii?q?aI27yNYJDre2UbwCXSFkwEnxoP8naBMAg0Hj2hrH7GDDxyCVLvZFvh8fV/qHO+?=
 =?us-ascii?q?SU800wGKbk1727qp4BIVguacS/cS3rICtycssDF0HFe739LLBNuMvQthfKNAYd?=
 =?us-ascii?q?wj5FdLz37Wtwt4Ppa4NaBtmkYecxhrv0Ppzxh4EIFAntYlrXw0zAt+M7mX0E5c?=
 =?us-ascii?q?eDyC25DwObrXKnfp8RCraq7W3Eze0dmM9qcO7vQ4t0vsvAWzGkU+9HVn1sFf02?=
 =?us-ascii?q?GA6ZXSEAoSTZXxX1439hhnvb3VfjMx5oLU1XJ2N6m0vSTP29YoBOsj1xahcM1T?=
 =?us-ascii?q?MKKCFA/uDcIaA9KiJ/Atm1isdhgEJvxd9LYoP8O6cPuLwLSrPOd8kz28l2RI/Y?=
 =?us-ascii?q?d93liK9yViUO7I3o8JzO2C0QuDSjjzkk2hssfxmY1fYTESH2y/yTXrBYJLZ61y?=
 =?us-ascii?q?e5oLBnmqI8Gt2tp+gJvtUWZC9FG/H1MGxNOpeR2KYl393A1cz0QWrWa8mSulyT?=
 =?us-ascii?q?x5iDUprquZ3CzTzOXubhsHOmhXRGZ8iVfgO5S7j9cfXEKwdQgmiAOl5Vrmx6hc?=
 =?us-ascii?q?vKl/LXPcQV1Lfyj1KGFuSLCwuaCBY85M6ZMotztYUOKnbFCeS779pQYa0iz5E2?=
 =?us-ascii?q?tfwjA7ay+lupHjkxNmj2KdKW55rGDFdsFo2Rff+NvcSOZR3zUcQyl0kzvXBlm6?=
 =?us-ascii?q?P9Sy+dWUlpHDsv2xVm67V51TdzXrwp2EtCeh+WJqBhi/leipmtL7CQg6zTP719?=
 =?us-ascii?q?5yWCXLthn8Y5Pn16SnMe19eEloC0Tx6857GoF4j4sxi4sc2XkchpWJ43UHlX3/?=
 =?us-ascii?q?Pslc2aL7dHANXyIEw8bJ4Aj5301uNneJx4P6VnqH2Mdgace1YngK2i0j9cBFE7?=
 =?us-ascii?q?mb7KZLnSZuplq4rATRYeVynzsHyPsu7mIajP8NuAY30iqdBbUSF1FCPSPwjxSI?=
 =?us-ascii?q?88y+rKJPaWazdriw0VBynNG7A7GEvwFcQ235epY5EC9078V/Nk/M0XLp5oHlft?=
 =?us-ascii?q?nQccwcthmOnxjciOhVLYo7luAWiip/JWL9oXolxvYgghN02pG6uJWHJ39p/KKk?=
 =?us-ascii?q?GRNYMjz1Z8UO+jDil6pen8CW35yxEZVlADkEQJzoTfewGjIIqfvnLxqOECE7qn?=
 =?us-ascii?q?qDG7rQBwqf51l9r37VD5CnLXKXJGQazdV/QhmSPldfjRsQXDU7mJ45Cw+ryNbg?=
 =?us-ascii?q?cEd/+jAe+Fr4pgFQxeJvMhn1Sn3fqxuwajcoVJifKwJb7wFF50fIKMye8/h8Hy?=
 =?us-ascii?q?dC8p26qwyNLGObah9MDWEIXEyEGl/iMqOv5dnG7+iXGO6+I+HSbrWJrOxUT+2I?=
 =?us-ascii?q?yo630ot64zaMMd2CPnl8AP062UpDXnF5F97amzUVTCwXmDzCb9SGpBen4SB3qs?=
 =?us-ascii?q?G/8PL2WAPg/4ePCr1SMclx9BCym6uMK+mQhCNhIzZCypwM3WPIyKQY3FMKkS5u?=
 =?us-ascii?q?aiKiEa4eui/NVq7Qnq5XAgUfayNyMstI8q090hNMOc7dltP6yLp4guQpBFdCUF?=
 =?us-ascii?q?zrgtupatASI2GhKFPHA16GNKiHJT3O2c34fbmwRqFQjOpKsR29ojKbE07lPjSe?=
 =?us-ascii?q?mDjlTRGvMedQjC6FOBxSop2ychFoCWL7VtLpdgW7MMNrjT0x2bA1hmnFNWgZMT?=
 =?us-ascii?q?h9dUNCtryR7SNCjfV5FGxM9X5lLeiCmyaE4OjUMJcWsf13Aitqk+JW+mg1y7xQ?=
 =?us-ascii?q?7HIMePsglDHT69JjvVyiuu2O0SZ8FhRUpztHiZmIoUJ6f6LD+d0IXXfC4QJI5H?=
 =?us-ascii?q?+VThERovN7BdD1/aNd0N7CkOT0MjgGu9zO8MYQHcXSL+qDMWE9KlznAjPZAAYe?=
 =?us-ascii?q?TiKsLSfYnUMZ2P2f6Hyeo4Qgp5XEhpUDUPlYWUYzG/dcDV5qT/IYJ5IifDo1mL?=
 =?us-ascii?q?iHxPUI6Hm+pQOZEMdBvp3EVvuIKf7oJDuQkKNDfRJOxqn3e9dAfrbn0lBvPwEp?=
 =?us-ascii?q?1L/BHFDdCIhA?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BTAgB62hhch0O0hNFkhBiBayeMdIsag?=
 =?us-ascii?q?iGXWoFfFRgTAYdfIjgSAQMBAQEBAQECARMBAQEKCwkIKSMMgjYigmwCJBkBATc?=
 =?us-ascii?q?BBQkCUAMpMgoIBYMdggABBaZagWwzgnYBAQWHNwiHfoMlgRwXgUA/gRGHe4V3i?=
 =?us-ascii?q?UQEhwmPfg9ICZFiFol2h2GJRJAvgV2BdzMaCCgIgyeCJxeIXoVHODKBBQEBjXM?=
 =?us-ascii?q?BAQ?=
X-IPAS-Result: =?us-ascii?q?A0BTAgB62hhch0O0hNFkhBiBayeMdIsagiGXWoFfFRgTAYd?=
 =?us-ascii?q?fIjgSAQMBAQEBAQECARMBAQEKCwkIKSMMgjYigmwCJBkBATcBBQkCUAMpMgoIB?=
 =?us-ascii?q?YMdggABBaZagWwzgnYBAQWHNwiHfoMlgRwXgUA/gRGHe4V3iUQEhwmPfg9ICZF?=
 =?us-ascii?q?iFol2h2GJRJAvgV2BdzMaCCgIgyeCJxeIXoVHODKBBQEBjXMBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,367,1539673200"; 
   d="scan'208";a="45420721"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 18 Dec 2018 03:36:07 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726732AbeLRLgD (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 18 Dec 2018 06:36:03 -0500
Received: from smtp.codeaurora.org ([198.145.29.96]:33980 "EHLO
        smtp.codeaurora.org" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726395AbeLRLgC (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 18 Dec 2018 06:36:02 -0500
Received: by smtp.codeaurora.org (Postfix, from userid 1000)
        id A509260A43; Tue, 18 Dec 2018 11:36:01 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=codeaurora.org;
        s=default; t=1545132961;
        bh=USb75eDXNfcvqvp05qisI4Mmqi/YjfsStN03YbSaYFM=;
        h=From:To:Cc:Subject:Date:From;
        b=hnSFo2RfAGlRHMV7fZFIW6c/wmg9DJ7dbXSaaSTANnUDe3i0sL4lBUc2bU8CUVRbx
         xzJeIxUveZabUyHJZjBvmawEwx2yzeG8KjEUdyX5+ZiAzErj7gLbMselNm3nYXQqyJ
         WR+vVfImYJA4ioSdeHoJTdd28X1NGu1rkxa3Gwz4=
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
        pdx-caf-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-2.7 required=2.0 tests=ALL_TRUSTED,BAYES_00,
        DKIM_INVALID,DKIM_SIGNED autolearn=no autolearn_force=no version=3.4.0
Received: from jshekhar-linux.qualcomm.com (blr-c-bdr-fw-01_globalnat_allzones-outside.qualcomm.com [103.229.19.19])
        (using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
        (No client certificate requested)
        (Authenticated sender: jshekhar@smtp.codeaurora.org)
        by smtp.codeaurora.org (Postfix) with ESMTPSA id D9888608CE;
        Tue, 18 Dec 2018 11:35:55 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=codeaurora.org;
        s=default; t=1545132959;
        bh=USb75eDXNfcvqvp05qisI4Mmqi/YjfsStN03YbSaYFM=;
        h=From:To:Cc:Subject:Date:From;
        b=SdUHWXCOiZFdgibqkmvSDhYO9oWnecXLo1D2YzGSkPjnjm2k9fXwCxnduLKI30MNI
         RXgtw//rP//fynYQHX3Ie2+fVWnfCgeu+y7pLhJmt18aYdodIHJ6rjd9Ik142B5CcZ
         wgf5FVPCJbdlVJa9+jM/j2KHcCmDAtQwghG7rmRA=
DMARC-Filter: OpenDMARC Filter v1.3.2 smtp.codeaurora.org D9888608CE
Authentication-Results: pdx-caf-mail.web.codeaurora.org; dmarc=none (p=none dis=none) header.from=codeaurora.org
Authentication-Results: pdx-caf-mail.web.codeaurora.org; spf=none smtp.mailfrom=jshekhar@codeaurora.org
From: Jayant Shekhar <jshekhar@codeaurora.org>
To: dri-devel@lists.freedesktop.org, linux-arm-msm@vger.kernel.org,
        freedreno@lists.freedesktop.org, devicetree@vger.kernel.org
Cc: Jayant Shekhar <jshekhar@codeaurora.org>,
        linux-kernel@vger.kernel.org, robdclark@gmail.com,
        seanpaul@chromium.org, hoegsberg@chromium.org,
        abhinavk@codeaurora.org, jsanka@codeaurora.org,
        chandanu@codeaurora.org, nganji@codeaurora.org
Subject: [v3] drm/msm/dpu: Clean up dpu hw interrupts
Date: Tue, 18 Dec 2018 17:05:48 +0530
Message-Id: <1545132948-20833-1-git-send-email-jshekhar@codeaurora.org>
X-Mailer: git-send-email 1.9.1
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Remove unused functions and macros from files handling
dpu hardware interrupts.

changes in v2:
  Removed clear_interrupt_status (Jordan Crouse)
changes in v3:
  Changed commit text

Signed-off-by: Jayant Shekhar <jshekhar@codeaurora.org>
---
 drivers/gpu/drm/msm/disp/dpu1/dpu_hw_interrupts.c | 44 -----------------------
 drivers/gpu/drm/msm/disp/dpu1/dpu_hw_interrupts.h | 44 -----------------------
 2 files changed, 88 deletions(-)

diff --git a/drivers/gpu/drm/msm/disp/dpu1/dpu_hw_interrupts.c b/drivers/gpu/drm/msm/disp/dpu1/dpu_hw_interrupts.c
index c0b7f00..8a28a03 100644
--- a/drivers/gpu/drm/msm/disp/dpu1/dpu_hw_interrupts.c
+++ b/drivers/gpu/drm/msm/disp/dpu1/dpu_hw_interrupts.c
@@ -170,10 +170,6 @@
 /**
  * AD4 interrupt status bit definitions
  */
-#define DPU_INTR_BRIGHTPR_UPDATED BIT(4)
-#define DPU_INTR_DARKENH_UPDATED BIT(3)
-#define DPU_INTR_STREN_OUTROI_UPDATED BIT(2)
-#define DPU_INTR_STREN_INROI_UPDATED BIT(1)
 #define DPU_INTR_BACKLIGHT_UPDATED BIT(0)
 /**
  * struct dpu_intr_reg - array of DPU register sets
@@ -782,18 +778,6 @@ static int dpu_hw_intr_irqidx_lookup(enum dpu_intr_type intr_type,
 	return -EINVAL;
 }
 
-static void dpu_hw_intr_set_mask(struct dpu_hw_intr *intr, uint32_t reg_off,
-		uint32_t mask)
-{
-	if (!intr)
-		return;
-
-	DPU_REG_WRITE(&intr->hw, reg_off, mask);
-
-	/* ensure register writes go through */
-	wmb();
-}
-
 static void dpu_hw_intr_dispatch_irq(struct dpu_hw_intr *intr,
 		void (*cbfunc)(void *, int),
 		void *arg)
@@ -1004,18 +988,6 @@ static int dpu_hw_intr_disable_irqs(struct dpu_hw_intr *intr)
 	return 0;
 }
 
-static int dpu_hw_intr_get_valid_interrupts(struct dpu_hw_intr *intr,
-		uint32_t *mask)
-{
-	if (!intr || !mask)
-		return -EINVAL;
-
-	*mask = IRQ_SOURCE_MDP | IRQ_SOURCE_DSI0 | IRQ_SOURCE_DSI1
-		| IRQ_SOURCE_HDMI | IRQ_SOURCE_EDP;
-
-	return 0;
-}
-
 static void dpu_hw_intr_get_interrupt_statuses(struct dpu_hw_intr *intr)
 {
 	int i;
@@ -1065,19 +1037,6 @@ static void dpu_hw_intr_clear_intr_status_nolock(struct dpu_hw_intr *intr,
 	wmb();
 }
 
-static void dpu_hw_intr_clear_interrupt_status(struct dpu_hw_intr *intr,
-		int irq_idx)
-{
-	unsigned long irq_flags;
-
-	if (!intr)
-		return;
-
-	spin_lock_irqsave(&intr->irq_lock, irq_flags);
-	dpu_hw_intr_clear_intr_status_nolock(intr, irq_idx);
-	spin_unlock_irqrestore(&intr->irq_lock, irq_flags);
-}
-
 static u32 dpu_hw_intr_get_interrupt_status(struct dpu_hw_intr *intr,
 		int irq_idx, bool clear)
 {
@@ -1113,16 +1072,13 @@ static u32 dpu_hw_intr_get_interrupt_status(struct dpu_hw_intr *intr,
 
 static void __setup_intr_ops(struct dpu_hw_intr_ops *ops)
 {
-	ops->set_mask = dpu_hw_intr_set_mask;
 	ops->irq_idx_lookup = dpu_hw_intr_irqidx_lookup;
 	ops->enable_irq = dpu_hw_intr_enable_irq;
 	ops->disable_irq = dpu_hw_intr_disable_irq;
 	ops->dispatch_irqs = dpu_hw_intr_dispatch_irq;
 	ops->clear_all_irqs = dpu_hw_intr_clear_irqs;
 	ops->disable_all_irqs = dpu_hw_intr_disable_irqs;
-	ops->get_valid_interrupts = dpu_hw_intr_get_valid_interrupts;
 	ops->get_interrupt_statuses = dpu_hw_intr_get_interrupt_statuses;
-	ops->clear_interrupt_status = dpu_hw_intr_clear_interrupt_status;
 	ops->clear_intr_status_nolock = dpu_hw_intr_clear_intr_status_nolock;
 	ops->get_interrupt_status = dpu_hw_intr_get_interrupt_status;
 }
diff --git a/drivers/gpu/drm/msm/disp/dpu1/dpu_hw_interrupts.h b/drivers/gpu/drm/msm/disp/dpu1/dpu_hw_interrupts.h
index 61e4cba..4d7a1c7 100644
--- a/drivers/gpu/drm/msm/disp/dpu1/dpu_hw_interrupts.h
+++ b/drivers/gpu/drm/msm/disp/dpu1/dpu_hw_interrupts.h
@@ -20,13 +20,6 @@
 #include "dpu_hw_util.h"
 #include "dpu_hw_mdss.h"
 
-#define IRQ_SOURCE_MDP		BIT(0)
-#define IRQ_SOURCE_DSI0		BIT(4)
-#define IRQ_SOURCE_DSI1		BIT(5)
-#define IRQ_SOURCE_HDMI		BIT(8)
-#define IRQ_SOURCE_EDP		BIT(12)
-#define IRQ_SOURCE_MHL		BIT(16)
-
 /**
  * dpu_intr_type - HW Interrupt Type
  * @DPU_IRQ_TYPE_WB_ROT_COMP:		WB rotator done
@@ -96,18 +89,6 @@ enum dpu_intr_type {
  */
 struct dpu_hw_intr_ops {
 	/**
-	 * set_mask - Programs the given interrupt register with the
-	 *            given interrupt mask. Register value will get overwritten.
-	 * @intr:	HW interrupt handle
-	 * @reg_off:	MDSS HW register offset
-	 * @irqmask:	IRQ mask value
-	 */
-	void (*set_mask)(
-			struct dpu_hw_intr *intr,
-			uint32_t reg,
-			uint32_t irqmask);
-
-	/**
 	 * irq_idx_lookup - Lookup IRQ index on the HW interrupt type
 	 *                 Used for all irq related ops
 	 * @intr_type:		Interrupt type defined in dpu_intr_type
@@ -177,16 +158,6 @@ struct dpu_hw_intr_ops {
 			struct dpu_hw_intr *intr);
 
 	/**
-	 * clear_interrupt_status - Clears HW interrupt status based on given
-	 *                          lookup IRQ index.
-	 * @intr:	HW interrupt handle
-	 * @irq_idx:	Lookup irq index return from irq_idx_lookup
-	 */
-	void (*clear_interrupt_status)(
-			struct dpu_hw_intr *intr,
-			int irq_idx);
-
-	/**
 	 * clear_intr_status_nolock() - clears the HW interrupts without lock
 	 * @intr:	HW interrupt handle
 	 * @irq_idx:	Lookup irq index return from irq_idx_lookup
@@ -206,21 +177,6 @@ struct dpu_hw_intr_ops {
 			struct dpu_hw_intr *intr,
 			int irq_idx,
 			bool clear);
-
-	/**
-	 * get_valid_interrupts - Gets a mask of all valid interrupt sources
-	 *                        within DPU. These are actually status bits
-	 *                        within interrupt registers that specify the
-	 *                        source of the interrupt in IRQs. For example,
-	 *                        valid interrupt sources can be MDP, DSI,
-	 *                        HDMI etc.
-	 * @intr:	HW interrupt handle
-	 * @mask:	Returning the interrupt source MASK
-	 * @return:	0 for success, otherwise failure
-	 */
-	int (*get_valid_interrupts)(
-			struct dpu_hw_intr *intr,
-			uint32_t *mask);
 };
 
 /**
-- 
The Qualcomm Innovation Center, Inc. is a member of the Code Aurora Forum,
a Linux Foundation Collaborative Project

