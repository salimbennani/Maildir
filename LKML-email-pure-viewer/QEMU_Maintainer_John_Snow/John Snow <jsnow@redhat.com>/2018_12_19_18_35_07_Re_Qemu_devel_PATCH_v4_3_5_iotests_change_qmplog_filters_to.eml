Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  20 Dec 2018 08:41:36 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga008.fm.intel.com (fmsmga008.fm.intel.com [10.253.24.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id A622B580522
	for <like.xu@linux.intel.com>; Wed, 19 Dec 2018 10:36:00 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga008-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 19 Dec 2018 10:36:00 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AqV9ltxTZ3/1uiKiOVAIg1mlvRtpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa67ZBOFt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZHI28?=
 =?us-ascii?q?YYsBAekPM+lWoIbypUcBoxSjCwm0Bu7hyDBFimL40KEmzeshChrL3BA5H98UrH?=
 =?us-ascii?q?jYsNv4OaUUXOuozKfI1zLDb/ZO1Dn574jIchYhquyRU7J2dsrQx1QkGgTHjlWL?=
 =?us-ascii?q?r4zlOD2U2/8Xs2eF8uVgVfigi3I9pw5tpTivw94hh4/UjYwW0lDJ7Tt1zJo2KN?=
 =?us-ascii?q?GiVUJ3fN2pHIFOuyyUN4Z6WN4uTmNwtCok1rELvYS3cDUExZg53RLTdv+KfoaS?=
 =?us-ascii?q?7h79V+ucJypzimh/d7KlnRmy9FCtyu3iWcmw11ZHti5FktjXtnARzBzf8MeHSv?=
 =?us-ascii?q?1g/ku73jaPzQ/T5vlFIUAyi6XbN4YszqAsmpcQq0jPAzL6lUbsgKOIeEgp+vKk?=
 =?us-ascii?q?5/nlb7n+o5+TLY50igXwMqQ0ncy/BPw1MhEQUGie5OSwzaDs8lPnQLpUiv06i7?=
 =?us-ascii?q?LWsJfHJcQduqG2HRRV3oEn6xa+DDepzs4UnHYaLF9dfBKHjo7pO0zBIfziDPe/?=
 =?us-ascii?q?hUisnylvx/zcIrLhBZDNI2PFkLfme7Z95EhcyBcpwdBY/ZJUBakNIOjvVU/pqN?=
 =?us-ascii?q?zYEhg5PhSww+bmC9VyyJkSWG2SAqKCNKPSsFmI5v8gIuWWZY8Vvir9JOYh5/L0?=
 =?us-ascii?q?kXA5nlodLuGU24AKYiW4Auh+OBfeJn7tmcsaV2ENuAU4UartklLFVDdSY3O7We?=
 =?us-ascii?q?U7/i06D4S9Sp7OQ53ojLGf0SPoI5tNe2oTD1mNFWvvJZyJXupJZC+ML8skiDEd?=
 =?us-ascii?q?SLW6V6cn0hehshK8zKBoefHJ8C8Vvo62yd5u+ufIngsz/zEnM8PI7WWEQ2Bxn3?=
 =?us-ascii?q?lAfDIz0aZjuktjj3CM0KVmmP9ZBJQH+ehEVwo8KYXb0cRkCsruRwXTbNDPQ1Gj?=
 =?us-ascii?q?FJHuSyg8S890z9IQbkJVHdKkgRbemS2wDPVdw6WGAYFx/q/C0nzZIcF7xHDbkq?=
 =?us-ascii?q?47gA9iCoFWOGi7w6R78APQL4jOlUqfiuCtb6tWlHrU+WKeiGCKu0pbeAh3V6rD?=
 =?us-ascii?q?QDYYfESA/vrj4UaXbbiuD/wcNAxegZqAMa1NdfXzgFlGTeulM9PbNTHi01ysDA?=
 =?us-ascii?q?qFk+vfJLHhfH8QiWCEUBAJ?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0B1AAA1jxpchxHrdtBkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBVAQBAQsBgTAqgQ+BKYN9iHiLHYFgLZlQCwoYAxGEQIJtIjcGDQEDAQEBAQE?=
 =?us-ascii?q?BAgETAQEBCgsJCBsOIwyCNgUCAxoBBoJbAQEBAQIBAQIgIwopAwIBAQIGAQEKG?=
 =?us-ascii?q?AICIgQCAgMBUwYBDAgBAQGCUksBgXkIAQSmaQGBPIEvijE0V4s0F4FAP4E4gmu?=
 =?us-ascii?q?FAYMIglcCkFaFQYsdCYcQg0SHCAYYgiuHTBGHUSyJHJA6gVyBeDMaCBsVO4JsC?=
 =?us-ascii?q?YIeFxKJHYUMIzGBBxyLTYF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0B1AAA1jxpchxHrdtBkHAEBAQQBAQcEAQGBVAQBAQsBgTA?=
 =?us-ascii?q?qgQ+BKYN9iHiLHYFgLZlQCwoYAxGEQIJtIjcGDQEDAQEBAQEBAgETAQEBCgsJC?=
 =?us-ascii?q?BsOIwyCNgUCAxoBBoJbAQEBAQIBAQIgIwopAwIBAQIGAQEKGAICIgQCAgMBUwY?=
 =?us-ascii?q?BDAgBAQGCUksBgXkIAQSmaQGBPIEvijE0V4s0F4FAP4E4gmuFAYMIglcCkFaFQ?=
 =?us-ascii?q?YsdCYcQg0SHCAYYgiuHTBGHUSyJHJA6gVyBeDMaCBsVO4JsCYIeFxKJHYUMIzG?=
 =?us-ascii?q?BBxyLTYF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,373,1539673200"; 
   d="scan'208";a="55853310"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 19 Dec 2018 10:35:59 -0800
Received: from localhost ([::1]:33534 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gZghL-0002eb-6D
	for like.xu@linux.intel.com; Wed, 19 Dec 2018 13:35:59 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:35728)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <jsnow@redhat.com>) id 1gZggr-0002dj-Dj
	for qemu-devel@nongnu.org; Wed, 19 Dec 2018 13:35:31 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <jsnow@redhat.com>) id 1gZggo-0005Tx-8T
	for qemu-devel@nongnu.org; Wed, 19 Dec 2018 13:35:29 -0500
Received: from mx1.redhat.com ([209.132.183.28]:60068)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <jsnow@redhat.com>)
	id 1gZggd-0005OE-N8; Wed, 19 Dec 2018 13:35:16 -0500
Received: from smtp.corp.redhat.com (int-mx01.intmail.prod.int.phx2.redhat.com
	[10.5.11.11])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 9B7C3A7E1;
	Wed, 19 Dec 2018 18:35:11 +0000 (UTC)
Received: from [10.10.124.24] (ovpn-124-24.rdu2.redhat.com [10.10.124.24])
	by smtp.corp.redhat.com (Postfix) with ESMTP id 51919600C2;
	Wed, 19 Dec 2018 18:35:08 +0000 (UTC)
To: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>,
	"qemu-devel@nongnu.org" <qemu-devel@nongnu.org>,
	"qemu-block@nongnu.org" <qemu-block@nongnu.org>
References: <20181219015230.18652-1-jsnow@redhat.com>
	<20181219015230.18652-4-jsnow@redhat.com>
	<0de4bd2b-c78f-f293-4d43-20c8bcd168c6@virtuozzo.com>
From: John Snow <jsnow@redhat.com>
Openpgp: preference=signencrypt
Autocrypt: addr=jsnow@redhat.com; prefer-encrypt=mutual; keydata=
	mQINBFTKefwBEAChvwqYC6saTzawbih87LqBYq0d5A8jXYXaiFMV/EvMSDqqY4EY6whXliNO
	IYzhgrPEe7ZmPxbCSe4iMykjhwMh5byIHDoPGDU+FsQty2KXuoxto+ZdrP9gymAgmyqdk3aV
	vzzmCa3cOppcqKvA0Kqr10UeX/z4OMVV390V+DVWUvzXpda45/Sxup57pk+hyY52wxxjIqef
	rj8u5BN93s5uCVTus0oiVA6W+iXYzTvVDStMFVqnTxSxlpZoH5RGKvmoWV3uutByQyBPHW2U
	1Y6n6iEZ9MlP3hcDqlo0S8jeP03HaD4gOqCuqLceWF5+2WyHzNfylpNMFVi+Hp0H/nSDtCvQ
	ua7j+6Pt7q5rvqgHvRipkDDVsjqwasuNc3wyoHexrBeLU/iJBuDld5iLy+dHXoYMB3HmjMxj
	3K5/8XhGrDx6BDFeO3HIpi3u2z1jniB7RtyVEtdupED6lqsDj0oSz9NxaOFZrS3Jf6z/kHIf
	h42mM9Sx7+s4c07N2LieUxcfqhFTaa/voRibF4cmkBVUhOD1AKXNfhEsTvmcz9NbUchCkcvA
	T9119CrsxfVsE7bXiGvdXnzyGLXdsoosjzwacKdOrVaDmN3Uy+SHiQXo6TlkSdV0XH2PUxTM
	LsBFIO9qXO43Ai6J6iPAP/01l8fuZfpJE0/L/c25yyaND7xA3wARAQABtCpKb2huIFNub3cg
	KEpvaG4gSHVzdG9uKSA8anNub3dAcmVkaGF0LmNvbT6JAj0EEwECACcCGwMCHgECF4AFCwkI
	BwMFFQoJCAsFFgIDAQAFAlid5ikFCQeV0y0ACgkQiKkGTRg1YesAOw/8DLxVyLbPecXUbxLs
	+TRhmkoxO5UHReTvmMefyBJxflKSNQQEV49rw0aQe5S4cfOh97K5XHMh2O3tJZS3+zwrRxaK
	ZMdQrfeJ20acsOKkYuFYKCZuib4tAClf/lk/uF6TVdyDeY1AWf9lXWfwLnBetNpHVqY0C312
	K9FC/l42+QEyDXHa2l0j0re1B1D8zScS5tHt9vj43t/VJTjJWHrlE3IAde6mNvM/wbvuFfYG
	SuaxpRRbFuIDUVW9DinUGtawjtkvttTWUe4+XCtT5u48P4QXvtlgNlc8eEL4+SL3ABB8oepE
	2J2LcMDn6QG7o3pKIqJrKvmKKH5BHzi02c0b+u0BrzsNhNSlxUB0cpHyfzlFpJGlaxdsvwC7
	CQ85KMaCB8WsQIgwgFHRldCszr9LXU52V8Tib1tnxgvwBVDYaDQEWjTZB1725FooHuRJaCVU
	+lthkjYoileOG0sNzTPHMXSTsKrNK9aVjg3Cs+D2hU2xi9BlG0Nzf4FqcHVxJg3tOI2f/EeR
	Dc9UB88GH3yPLouCshz6tG3ftimTtpf5FH0IRTSupmBO3n2JnReyIJcYbmYgo1PucmDWQVgc
	t+bXdgvRY8QB5EbTO1Etn5CXk3be0iUY7OE4XPRWbnEY8d9m6E4U/p083sW1kdki935XML17
	WSHh0ChaSX07jREm3qS5Ag0EVMp5/AEQAMG4T+OQRHf8wDAT1dnZNlsCMCkUilCxJT95F6XL
	og1mEKG91Dg1FKgpTvt2l1UZ3WjZmV/Vm8xmHsVaN+Y/glQQhq9w5VPAC/aadykN0iYoVnA3
	ndS0plH/LUvtdHepnRsQ6oJ3fzllNteIrL4YFmbWRjDP14+3MeaRESIj/o6ruz09XIm3H3BC
	oT42HcldUJy7SjRq04P1DCmi/qpFgVCP/LgaGtBy7DR+t217EbTQBvMOqhu4ornmGVCFynOC
	ByDVILqmECVXUnvrvG9jeVzYQ0hFIXZahWK2ib1+nU48TE1uZc1Rtio87XxK0TUlJrtoHs28
	NfwldM7Z4jigwO5pEIulCFA0YeC8UZuZn5Xyogsg0C+j/48RwcRb/rCII7i63zYSAtad8/a7
	wofonQFSYLR7WJfKehgFaxfuMUFds2R+ObYJh6NvkibCz412bVlbFgDaXqV53rMmm1rTQFeK
	kAe/0nwu+82cLFV9DjmNkHPoqIZl6PFOw4F1Q4Jf0f+UIH55b9P96znTLemT8uSya/A/SyZn
	D9Eb1/fI8qATn9OkPULRMCbDSwjgqNiyjS+9QzY2a51xMI1B+ugl4kVw2wyqa7e9QYkk4rZB
	YRhlPPFwra6fEfcgK1z3+DDfsDWAY30+ytvYFk88bfQ2ECLxH+vaGQ+Weah2BqdN9RPdABEB
	AAGJAiUEGAECAA8CGwwFAlTKiksFCQPCd00ACgkQiKkGTRg1YessJA//TdJTJDK/G+oBOo2I
	niVnVKeBrd3WbKRKZFyRV2lsxulMs8VTdq+FwXwkHox9W/8aJcPWgGmd5VG3axky9w74XPLP
	Z17r/N55/PZF93bcBjXlaR9Y6W6UFkfkZYaKsaxL6AYx4haydW+Zfb4dubhgKXkdKlfdM8lp
	TRzQVfssj/l9DEwbHweQZPCECZG7qrUoQmMCqiKkDMajxfwR9MYxVvRE3+Cnm6UlUZ30FFy8
	fok9CzgsWKmConTrz3+84yMCnW88oG15tCgfsqmmGByNqITD73XeFmE2hI1DSAUJo0jB4urq
	8mw+muq2+cPxhrJu5RvvUDaMstFCh4AWID5O11s5rDunn2ZTAFUI5AbGfQwG8a8flVie3cQm
	TqRcS8jlCKCI0eBVQICRW9n7CJezb6dguoao7MDwJEaLtp8BCnHYctx+/5TxnIMgKOuXKGce
	Vck/xfu8poWzaPUEnqwCR80N2ZFhXoyc9M6VJ0bNNH7vmshSmcs+0OAeVgkOPiDDyROaphWX
	oI5/IhU3QJ7z95f3PU5sFRjs0anR9qXAzDFrYnMXhZZ3Cr+rAJgXYcoF2O6p26j2Ge8ckYPz
	ssv8YkXne7L8YZq8UEV/juy9WNG0B87YtiKK+m1Gl8YLGOo36tGJBaL8ZHFNxmwhBR4yulcM
	xwh+WlGQdSwtPFpMf7KJAiUEGAECAA8CGwwFAlid5kgFCQeV00wACgkQiKkGTRg1YesKXg//
	VY/yAWFlhQulEDYWagbOnok+gl57C5GH8p6s41mZsir4zN3wUE7KAYSV7O9rCXZQothIwG0u
	bpssiFqKStjcykf0Mac/3x8GSZyciu6rXi+3+bGlOH0kJI/qJ1nUCQ1vwjVcqYYscQRw7zhK
	DtivZAk4dCHNE5WDWyVvZh3Sw7EIEvXFLDPdWlAPL6BleI2LI/LJcA3biiJFGVvXhYh75e1N
	R+cVyi11URVxnWjRL9QcXvM/srVzi1+YWIP8c/6ftgq/vicjovNvF5E34Rj2IW/fCKyU4ma0
	0HOlXaCO4H2ngZuyRpOYPXVt/Iohvzu8daKVRotOnCE1LsJ4MLN2Oi76Rw9UXHLCJ7eqw3A9
	MhGOuRSgA5d/8rn3iy8SvhIIPJDCJDFwCwSX5i3E+AyH21Qf4Go3cz427PgE0HotDi2GEH8a
	nxH/tkXn4i+sG9gyJGCzKobXi1g2xCWdrMBkbl0J6HfdOG3IDIrVDO3LgUp2J3oZT9NlYewP
	d5wOERgtgqY8XvqXNpDv9c/FgPnfrmD4A1wlUtbCr+UukOD0Ky3iW/0Ij2DJlw+KUFCKxwWh
	EmSAxTi2NAg5f5e5A5d/clCwVeB3DXes5H6tdez4f/ai1eAB+FtItxT37i2KpUvUAdic37Io
	NRhibLIrSP2g5nqXONyQrFxb1HtVaoR+Nrm5Ag0EVMqKZQEQAMNsn6lDkzhAExaRpYiZGPtz
	n3zEhnfugozqsZpKe4HVJVvtgKsKLYxPBBytCxwDaObzQ7xUWpaT79ewSnrZ23LjsZXBJ90a
	N7/fO/dVMfYqE4Io6reg8/lldZivPZ3ZadO/H76jqVTscscMQLc0Ytg0uQvWXJXEuGeG9wzG
	R/UQYDUNugRwyCcms0HWkY/bvDBxJ+93I8ax5X6pllryS5WIOBrWjGadgPEUowYvGsKWoetG
	3yB5AvVaPkoUzmEW0ZMrh1rmU+fAY13r8Ig0x4JPYBZljnJLPv+1Jl7kXba8+9Vkag+BCJxh
	Z01zdqnv7sgo/zok2OZ5z/1ElzOO+tiMl2KoFWV1ei7vYK0PJ0pUtVIq/xzbAEMmCFhmK19g
	hovxxO9B9QdFhN+jSfkopJ5zxWi+MO7GZ1s5QED5KRHGqad4/k7Eahn3ZW6yvBYKOvLwdGw1
	1H7ZP4KUMI7pamKG7hXcI+RDBPJ4K4wc8BPSRrmlpPAuudkjGx1+eNRr3pPXS/OZCADGltuJ
	ou+Aonz7vo490OeF13LF3aV1h/BGQXk8QaDeapmdgo00G3CO9fj1IC+ARNC8vNDwgpWBlLSb
	jP2oce+1zUGxCcV974sk4WPNmvsKsM0kyqTUlMdixKLYlw3e9jfZYx7NdJDRPN4wriR2dyVJ
	DKn+HbcZah3lABEBAAGJBEQEGAECAA8FAlTKimUCGwIFCQPCZwACKQkQiKkGTRg1YevBXSAE
	GQECAAYFAlTKimUACgkQfe+BBqr8OQ4iaBAAi5rokavYn7zoeQ8gRcEUu4LwNeA7BkJ4Jgue
	xM1dBBXHzF1YtY1+TrcFMlHtAM+a+pR8shw7A7CKSygZVq2Ani6VIUUd6MtfNU+1Dcb7oxhX
	k5M7ywDqOh7N2/Fr/QEYPu2nEWJEETWO5NBiCemGc9ePbUckSgMv70o7GgfS7dDTndcH9hED
	CsEVRC8CQ8tAGsxp/tD0T+wbmtmG7cWgZoQQQ29rT6cJ/FPcXXJAeFZX7fZXFjbAv9fBovW6
	Y3fRUm3R/7DlCPt06FmBDXqE+CD9PcJ+hJIFmiUt5wFDfzDsnDXo9ouGIctsAw0iskwJ1ZEk
	kqF5PrSvdR36raJGw2pwfHWj/iuS4KIlh8431s7MQNoyorCOGAho62EM08hjk+j+rukhHqBM
	ddPOuQf83PP7zedJJ3HY2M9p2mnCAxCkDWZZxi7BpKQm35n3Yt2YOL7lijXVq9MBlMw1HKal
	tMv5VF52vurskEoV+XuCQ9lD7n/VgEPR7YEgJGg3eDtSNieNbJXnj82TlQdw5mIMvhAkSSeZ
	8N4oXcaYHMv795X3CWqosgr9Dxfiv4Ejr8IR+wm1agEZqbU+8oYcahXWmFqNmdpLLisqCkkT
	BQl0GOaGnLk5sjyE+EkxclEBXqkglg7pvzRTaEioZiLcNk3fuFUiR0oUVW4N/SjRT2e5l2Cj
	9Q//aYoxAPlwYnET5XZBWi8ZLRdmwUNsAou5iuuSj60bTHRv74r5ivqepcq+WicmMkxDCOtN
	XTyO/dBCF6QhCgaLhDr5KPGiefWjDDYpGF1Y0JLmhElWX8jz5XxLaxneQf8yrwYT98FdbSSG
	oGqLWloKT5QzwbmP2SS60m3jWd9OuaplPS+WTlNdJX8ku1Z/orYJyKfqtOL5JHYviSx4Bjcb
	cN8NtFD0NvT2nd3oSHo76tZ5Qfau6pILGCcCn053Crv6zWNVg52GZHt6ddzq0ytMzkePkvle
	+VxwO8f+NsqoZDL97BLe0HRSkQTXpu/NCZGflxKSQkPHNo5tSAV6hyUKwzoiAxc3/7CLkFxc
	Ov2IhpI8ZYdyDfkzTMGjCKDcAsSNlOQZVvZsuOapchMQKN3LFS5L5GOGxVi65qg1Ni5dlYFq
	cmCyKm2R/0A0Va6UuTVqnzEf3C8oz49SjE2nnQPMPtnSAUO2mMUifzrYRwXtrx34FY+WBn9A
	uAoP4vp025MhCls8S9bKkfrMHFTJ2cc/YpXeWkoEnVQ5B/Wlr9TBncIeN9bv8YrFxis7fHlt
	t6ft5A88lZRCTnBBAIKi+L+2rUSZBRb5yz0zmO2bSTMYc+WQ6w1rJ5py8nYaBTaJYKm/RBC/
	x5Q6BnOKA6AR4xn5uPi3oJnBjti5MQARiFpUkTGJBEQEGAECAA8CGwIFAlid5kgFCQeVwuMC
	KcFdIAQZAQIABgUCVMqKZQAKCRB974EGqvw5DiJoEACLmuiRq9ifvOh5DyBFwRS7gvA14DsG
	QngmC57EzV0EFcfMXVi1jX5OtwUyUe0Az5r6lHyyHDsDsIpLKBlWrYCeLpUhRR3oy181T7UN
	xvujGFeTkzvLAOo6Hs3b8Wv9ARg+7acRYkQRNY7k0GIJ6YZz149tRyRKAy/vSjsaB9Lt0NOd
	1wf2EQMKwRVELwJDy0AazGn+0PRP7Bua2YbtxaBmhBBDb2tPpwn8U9xdckB4Vlft9lcWNsC/
	18Gi9bpjd9FSbdH/sOUI+3ToWYENeoT4IP09wn6EkgWaJS3nAUN/MOycNej2i4Yhy2wDDSKy
	TAnVkSSSoXk+tK91HfqtokbDanB8daP+K5LgoiWHzjfWzsxA2jKisI4YCGjrYQzTyGOT6P6u
	6SEeoEx10865B/zc8/vN50kncdjYz2naacIDEKQNZlnGLsGkpCbfmfdi3Zg4vuWKNdWr0wGU
	zDUcpqW0y/lUXna+6uyQShX5e4JD2UPuf9WAQ9HtgSAkaDd4O1I2J41sleePzZOVB3DmYgy+
	ECRJJ5nw3ihdxpgcy/v3lfcJaqiyCv0PF+K/gSOvwhH7CbVqARmptT7yhhxqFdaYWo2Z2ksu
	KyoKSRMFCXQY5oacuTmyPIT4STFyUQFeqSCWDum/NFNoSKhmItw2Td+4VSJHShRVbg39KNFP
	Z7mXYAkQiKkGTRg1YeseURAAg8fqW8yI6TX9JgSE7JJe1dt2xtyMgL1sYil5qNd3u1AfYLb4
	LD8AcHxgYGAt/WoJxiFaYGghhiU4jpJCyeRbJFzvvrxZaWaD+TrmyMcDELFKZDZ0HgEmUB1N
	CvIAXdt8WFUJ4DcteAB78ZU1Vpdpt68HccaFaFkl1Eo4Y9pKKXTLtN7d/Ni5qrXbMDp/gla0
	DhC1TSPP6JbQoZGxbbcVK2OMyIgSACWEtHy3/mLOCOTvYCVprHhuf9Vl+Oj2rshCmpFqbbM4
	kXaQ6mlfr+S8bcbU3EcKuss149Em1WbNCHrOjrvyEuvs3lrWNxGvg8uEFBp0oJSTlXNlLzXh
	Iz/inLt5fhvePFndnQidAatGClPJLqm+AZ45ujgkuoOTNV6BCCQb/8V4P8JOzcFhQOWyzgSK
	dz/f1hULiOeVg0zRWG8GPYZ1+FwOmrvq6xcZnxufiAajs75+oHSV7262DTWZPj0bP6CgKz/O
	qM/aLTlfa47abtOIBejLyWBko2dgnAKYyIrroDPBZSO4DU5aJR64N6rer9AmmgY2QT2yfK58
	VTVJOn0bgEhPTqYgBMJGJrnPrw1u+WgpRcjxoS2PkZ2nz1UcV0kKqD3Z5rZ5cSOUM6T2ORDI
	WuKlC0SovkOk1ilgX6t1zppoZbYTNHZGUFGl7/fPtaxuvJeIthhjv8Hwl3I=
Message-ID: <38592dbf-e2e2-1de5-2cc6-62d5541b43dc@redhat.com>
Date: Wed, 19 Dec 2018 13:35:07 -0500
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
	Thunderbird/60.3.1
MIME-Version: 1.0
In-Reply-To: <0de4bd2b-c78f-f293-4d43-20c8bcd168c6@virtuozzo.com>
Content-Type: text/plain; charset=utf-8
Content-Language: en-US
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.11
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.29]);
	Wed, 19 Dec 2018 18:35:11 +0000 (UTC)
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH v4 3/5] iotests: change qmp_log filters to
 expect QMP objects only
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Kevin Wolf <kwolf@redhat.com>, Markus Armbruster <armbru@redhat.com>,
	Max Reitz <mreitz@redhat.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>



On 12/19/18 6:07 AM, Vladimir Sementsov-Ogievskiy wrote:
> 19.12.2018 4:52, John Snow wrote:
>> log() treats filters as if they can always filter its primary argument=
.
>> qmp_log treats filters as if they're always text.
>>
>> Change qmp_log to treat filters as if they're always qmp object filter=
s,
>> then change the logging call to rely on log()'s ability to serialize Q=
MP
>> objects, so we're not duplicating that effort.
>=20
> As I understand, there still no use for qmp-object based filters (even =
after the
> series), do we really need them? I'm afraid it's premature complication=
.
>=20

There are callers of log() that use qmp filters. Those callers can now
migrate over to qmp_log to get both the call and response.

There ARE users of QMP filters.

Look at `git grep 'log(vm'` for callers that are passing rich QMP
objects. The ones that pass filters are usually passing filter_qmp_event.

Now, if we choose, we can move them over to using qmp_log and amend the
logging output to get both the outgoing and returning message.

-- hmm, maybe, if you want, and I am NOT suggesting I will do this
before the holiday break (and therefore not in this series) -- what we
can do is this:

log(txt, filters=3D[]) -- Takes text and text filters only.

log_qmp(obj, tfilters=3D[], qfilters=3D[]) -- Logs a QMP object, takes QM=
P
filters for pre-filtering and tfilters for post-filtering. Contains the
json.dumps call. Simply passes tfilters down to log().

vm.qmp(log=3D1, tfilters=3D[], qfilters=3D[], ...) -- Perform the actual =
QMP
call and response, logging the outgoing and incoming objects via log_qmp.

I can use this patchset as a starting point to do that. It will involve
amending a lot of existing tests and test outputs, so I won't do this
unless there appears to be some support for that API in advance.

> Why not to keep all filters text based? If we need to filter some concr=
ete fields,
> not the whole thing, I doubt that recursion and defining functions insi=
de
> functions is a true way for it. Instead in concrete case, like in you t=
est, it's
> better to select fields that should be in output, and output only them.
>=20
>>
>> Because kwargs have been sorted already, the order is preserved.
>>
>> Edit the only caller who uses filters on qmp_log to use a qmp version,
>> also added in this patch.
>> ---
>>   tests/qemu-iotests/206        |  4 ++--
>>   tests/qemu-iotests/iotests.py | 24 +++++++++++++++++++++---
>>   2 files changed, 23 insertions(+), 5 deletions(-)
>>
>> diff --git a/tests/qemu-iotests/206 b/tests/qemu-iotests/206
>> index e92550fa59..5bb738bf23 100755
>> --- a/tests/qemu-iotests/206
>> +++ b/tests/qemu-iotests/206
>> @@ -27,7 +27,7 @@ iotests.verify_image_format(supported_fmts=3D['qcow2=
'])
>>  =20
>>   def blockdev_create(vm, options):
>>       result =3D vm.qmp_log('blockdev-create',
>> -                        filters=3D[iotests.filter_testfiles],
>> +                        filters=3D[iotests.filter_qmp_testfiles],
>>                           job_id=3D'job0', options=3Doptions)
>>  =20
>>       if 'return' in result:
>> @@ -55,7 +55,7 @@ with iotests.FilePath('t.qcow2') as disk_path, \
>>                             'size': 0 })
>>  =20
>>       vm.qmp_log('blockdev-add',
>> -               filters=3D[iotests.filter_testfiles],
>> +               filters=3D[iotests.filter_qmp_testfiles],
>>                  driver=3D'file', filename=3Ddisk_path,
>>                  node_name=3D'imgfile')
>>  =20
>> diff --git a/tests/qemu-iotests/iotests.py b/tests/qemu-iotests/iotest=
s.py
>> index 55fb60e039..812302538d 100644
>> --- a/tests/qemu-iotests/iotests.py
>> +++ b/tests/qemu-iotests/iotests.py
>> @@ -246,10 +246,29 @@ def filter_qmp_event(event):
>>           event['timestamp']['microseconds'] =3D 'USECS'
>>       return event
>>  =20
>> +def filter_qmp(qmsg, filter_fn):
>> +    '''Given a string filter, filter a QMP object's values.
>> +    filter_fn takes a (key, value) pair.'''
>> +    for key in qmsg:
>> +        if isinstance(qmsg[key], list):
>> +            qmsg[key] =3D [filter_qmp(atom, filter_fn) for atom in qm=
sg[key]]
>> +        elif isinstance(qmsg[key], dict):
>> +            qmsg[key] =3D filter_qmp(qmsg[key], filter_fn)
>> +        else:
>> +            qmsg[key] =3D filter_fn(key, qmsg[key])
>> +    return qmsg
>> +
>>   def filter_testfiles(msg):
>>       prefix =3D os.path.join(test_dir, "%s-" % (os.getpid()))
>>       return msg.replace(prefix, 'TEST_DIR/PID-')
>>  =20
>> +def filter_qmp_testfiles(qmsg):
>> +    def _filter(key, value):
>> +        if key =3D=3D 'filename' or key =3D=3D 'backing-file':
>> +            return filter_testfiles(value)
>> +        return value
>> +    return filter_qmp(qmsg, _filter)
>> +
>>   def filter_generated_node_ids(msg):
>>       return re.sub("#block[0-9]+", "NODE_NAME", msg)
>>  =20
>> @@ -462,10 +481,9 @@ class VM(qtest.QEMUQtestMachine):
>>       def qmp_log(self, cmd, filters=3D[], **kwargs):
>>           full_cmd =3D OrderedDict({"execute": cmd,
>>                                   "arguments": ordered_kwargs(kwargs)}=
)
>> -        logmsg =3D json.dumps(full_cmd)
>> -        log(logmsg, filters)
>> +        log(full_cmd, filters)
>>           result =3D self.qmp(cmd, **kwargs)
>> -        log(json.dumps(result, sort_keys=3DTrue), filters)
>> +        log(result, filters)
>>           return result
>>  =20
>>       def run_job(self, job, auto_finalize=3DTrue, auto_dismiss=3DFals=
e):
>>
>=20
>=20

--=20
=E2=80=94js

