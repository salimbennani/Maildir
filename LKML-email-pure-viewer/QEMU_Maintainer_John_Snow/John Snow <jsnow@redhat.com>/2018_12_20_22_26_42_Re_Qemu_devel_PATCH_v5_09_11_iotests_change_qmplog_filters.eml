Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:43:31 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 3581258050C
	for <like.xu@linux.intel.com>; Thu, 20 Dec 2018 14:27:26 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by fmsmga001-1.fm.intel.com with ESMTP; 20 Dec 2018 14:27:25 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AInYlUhL9TiYF1GnFI9mcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgXKvv5rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZQMhRWSxPDICy?=
 =?us-ascii?q?YYQBAOUOP/pXoYbgqVsWrxawBwahCP7hxzNUmHD2xrY30/gjHAzcwAAsA9wDvX?=
 =?us-ascii?q?bSod7oNKkSS+e1zKzQwDvHaPNW2TH945XVfBAnpvGNU697fM3TyUk0EQPFiVuR?=
 =?us-ascii?q?pJf/PzyLy+sNs3KU7/Z6We2zjG4nrhh8rz6yzckvkonEnpwZxkzH+Clj3Yo5ON?=
 =?us-ascii?q?61RFRlbdOqEJZcrTyWOoluTs88X21lvDw2xqAItJKlZiQG1ZcqyhDFZ/CZcIWF?=
 =?us-ascii?q?5A/oWvyLLjdinn1lfaqyhxas/kikze3xTs200FdRripZidnArH8N1xrO6sSdTf?=
 =?us-ascii?q?t95Eih1S6O1wDV9O5EPVg5mbTHJ5Mi2LI8i4cfvEfZEiPolkj7jLWaelgm9+Sw?=
 =?us-ascii?q?7uToeLTmppuSN49ujQH+N7wjmtWhDuQ9LwgCRnWU9vqi1LL9+U31Wa5Fjvorkq?=
 =?us-ascii?q?nfrJ/VO98bqqm9Aw9U0YYs9QyzDji70NkAmXkHLVRFeA+IjoTzOlHOJuz4Aum7?=
 =?us-ascii?q?g1i2jDhrwPXGM6bnApXKKHjDn7Hhfatn505b0gozwshT54hIBbEZPPLzRkjxuc?=
 =?us-ascii?q?TcDh84MAy73fzrCdpg1o4FXWKPA6mZML7dsFOS5+IvJfWMa5ERuDrnN/cl4Pvu?=
 =?us-ascii?q?3jcEn0QAd/ypwYcPcyL/WfBnOFmCJ3zrhNgHDCENpAV5SeXrjFiLV3lUf2qzWK?=
 =?us-ascii?q?QnoSg2DZ/jAYrdS4T+vbqawS3uG5RXYnxBWEmBFGqte4iaVvNJci+LP8J6jhQC?=
 =?us-ascii?q?Ur6uTZJn0guh4xTnwbhqJfaB5ysDqJj438J07eCAqRZnyzh9A8WY0nvFdGxxk2?=
 =?us-ascii?q?UUXDgomYdwoEFj0VSCwOAsnedVENFV++hOTC8kNITA0utoGde0UQXEKJPBAk+r?=
 =?us-ascii?q?R8jjDTwvQ9YZxdgIbEBgXdK4gVqLizOnBqJQm7GVCZgc9KXa0H7sYcFnxCCCnO?=
 =?us-ascii?q?M4glw7B8FLMmalrqh48QfVGsjOiUrT3/KzeKEBmSTJ82yA5WyJuk5eTUh3S6qT?=
 =?us-ascii?q?Dl4FYU6Dj9P54Av5SbixQeAlKQ1G1uaYJ6dKY8GvhlJDEqSwcO/Can68zj/jTS?=
 =?us-ascii?q?2DwamBOc+zIz0Q?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0COAAAzFhxchxHrdtBkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBVAQBAQsBgTAqgQ+BKYN9iHiLHYFgLZlQFRgDEYcuIjcGDQEDAQEBAQEBAgE?=
 =?us-ascii?q?TAQEBCgsJCBsOIwyCNgUCAxoBBoJbAQEBAQIBAQIgIwopAwIBAQIGAQEKGAICI?=
 =?us-ascii?q?gQCAgMBUwYBDAYCAQEBglJLAYF5CAEEp1uBL4osgQuLNBeBQD+BOIJriAmCVwK?=
 =?us-ascii?q?QJDeQYgmHEYpOBhiCLIdMEYdULIkhkECBXIF4MxoIGxU7gmwJgh4XEokdhQwjM?=
 =?us-ascii?q?YEHHItNgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0COAAAzFhxchxHrdtBkHAEBAQQBAQcEAQGBVAQBAQsBgTA?=
 =?us-ascii?q?qgQ+BKYN9iHiLHYFgLZlQFRgDEYcuIjcGDQEDAQEBAQEBAgETAQEBCgsJCBsOI?=
 =?us-ascii?q?wyCNgUCAxoBBoJbAQEBAQIBAQIgIwopAwIBAQIGAQEKGAICIgQCAgMBUwYBDAY?=
 =?us-ascii?q?CAQEBglJLAYF5CAEEp1uBL4osgQuLNBeBQD+BOIJriAmCVwKQJDeQYgmHEYpOB?=
 =?us-ascii?q?hiCLIdMEYdULIkhkECBXIF4MxoIGxU7gmwJgh4XEokdhQwjMYEHHItNgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,379,1539673200"; 
   d="scan'208";a="44910011"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 20 Dec 2018 14:27:25 -0800
Received: from localhost ([::1]:41024 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1ga6mq-00067j-IW
	for like.xu@linux.intel.com; Thu, 20 Dec 2018 17:27:24 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:53387)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <jsnow@redhat.com>) id 1ga6mW-000664-8L
	for qemu-devel@nongnu.org; Thu, 20 Dec 2018 17:27:05 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <jsnow@redhat.com>) id 1ga6mV-0007j9-8l
	for qemu-devel@nongnu.org; Thu, 20 Dec 2018 17:27:04 -0500
Received: from mx1.redhat.com ([209.132.183.28]:41680)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <jsnow@redhat.com>)
	id 1ga6mE-0007QE-Qp; Thu, 20 Dec 2018 17:26:50 -0500
Received: from smtp.corp.redhat.com (int-mx08.intmail.prod.int.phx2.redhat.com
	[10.5.11.23])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 1EE2D3B3C2;
	Thu, 20 Dec 2018 22:26:45 +0000 (UTC)
Received: from [10.10.121.225] (ovpn-121-225.rdu2.redhat.com [10.10.121.225])
	by smtp.corp.redhat.com (Postfix) with ESMTP id 8B5941F2;
	Thu, 20 Dec 2018 22:26:43 +0000 (UTC)
To: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>,
	"qemu-devel@nongnu.org" <qemu-devel@nongnu.org>,
	"qemu-block@nongnu.org" <qemu-block@nongnu.org>
References: <20181220022952.20493-1-jsnow@redhat.com>
	<20181220022952.20493-10-jsnow@redhat.com>
	<06e3594c-b4f9-9c3a-2a44-fadf36cf4b89@virtuozzo.com>
From: John Snow <jsnow@redhat.com>
Openpgp: preference=signencrypt
Autocrypt: addr=jsnow@redhat.com; prefer-encrypt=mutual; keydata=
	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
Message-ID: <1448f5f6-c521-956f-e646-3b93efeb6945@redhat.com>
Date: Thu, 20 Dec 2018 17:26:42 -0500
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
	Thunderbird/60.3.1
MIME-Version: 1.0
In-Reply-To: <06e3594c-b4f9-9c3a-2a44-fadf36cf4b89@virtuozzo.com>
Content-Type: text/plain; charset=utf-8
Content-Language: en-US
Content-Transfer-Encoding: 7bit
X-Scanned-By: MIMEDefang 2.84 on 10.5.11.23
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.26]);
	Thu, 20 Dec 2018 22:26:45 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH v5 09/11] iotests: change qmp_log filters
 to expect QMP objects only
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Kevin Wolf <kwolf@redhat.com>, Fam Zheng <fam@euphon.net>,
	Markus Armbruster <armbru@redhat.com>, Max Reitz <mreitz@redhat.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>



On 12/20/18 6:21 AM, Vladimir Sementsov-Ogievskiy wrote:
> 20.12.2018 5:29, John Snow wrote:
>> As laid out in the previous commit's message:
>>
>> ```
>> Several places in iotests deal with serializing objects into JSON
>> strings, but to add pretty-printing it seems desireable to localize
>> all of those cases.
>>
>> log() seems like a good candidate for that centralized behavior.
>> log() can already serialize json objects, but when it does so,
>> it assumes filters=[] operates on QMP objects, not strings.
>>
>> qmp_log currently operates by dumping outgoing and incoming QMP
>> objects into strings and filtering them assuming that filters=[]
>> are string filters.
>> ```
>>
>> Therefore:
>>
>> Change qmp_log to treat filters as if they're always qmp object filters,
>> then change the logging call to rely on log()'s ability to serialize QMP
>> objects, so we're not duplicating that effort.
>>
>> Add a qmp version of filter_testfiles and adjust the only caller using
>> it for qmp_log to use the qmp version.
>>
>> Signed-off-by: John Snow  <jsnow@redhat.com>
>> Signed-off-by: John Snow <jsnow@redhat.com>
>> ---
>>   tests/qemu-iotests/206        |  4 ++--
>>   tests/qemu-iotests/iotests.py | 24 +++++++++++++++++++++---
>>   2 files changed, 23 insertions(+), 5 deletions(-)
>>
>> diff --git a/tests/qemu-iotests/206 b/tests/qemu-iotests/206
>> index e92550fa59..5bb738bf23 100755
>> --- a/tests/qemu-iotests/206
>> +++ b/tests/qemu-iotests/206
>> @@ -27,7 +27,7 @@ iotests.verify_image_format(supported_fmts=['qcow2'])
>>   
>>   def blockdev_create(vm, options):
>>       result = vm.qmp_log('blockdev-create',
>> -                        filters=[iotests.filter_testfiles],
>> +                        filters=[iotests.filter_qmp_testfiles],
>>                           job_id='job0', options=options)
>>   
>>       if 'return' in result:
>> @@ -55,7 +55,7 @@ with iotests.FilePath('t.qcow2') as disk_path, \
>>                             'size': 0 })
>>   
>>       vm.qmp_log('blockdev-add',
>> -               filters=[iotests.filter_testfiles],
>> +               filters=[iotests.filter_qmp_testfiles],
>>                  driver='file', filename=disk_path,
>>                  node_name='imgfile')
>>   
>> diff --git a/tests/qemu-iotests/iotests.py b/tests/qemu-iotests/iotests.py
>> index 57fe20db45..dcd0c6f71d 100644
>> --- a/tests/qemu-iotests/iotests.py
>> +++ b/tests/qemu-iotests/iotests.py
>> @@ -246,10 +246,29 @@ def filter_qmp_event(event):
>>           event['timestamp']['microseconds'] = 'USECS'
>>       return event
>>   
>> +def filter_qmp(qmsg, filter_fn):
>> +    '''Given a string filter, filter a QMP object's values.
>> +    filter_fn takes a (key, value) pair.'''
> 
> hm, I decided to look into PEP8, which in turn refers to PEP257,
> which asks:
>   - For consistency, always use """triple double quotes""" around docstring
>   - Unless the entire docstring fits on a line, place the closing quotes on a line by themselves
> 
> Unfortunately, iotests.py prefers to be in opposition.. And consistency within the file is more
> important. May be we'll fix it one day..
> 
> 
>> +    for key in qmsg:
> 
> and here again we can benefit (or all right-value qmsg[key]) of using qmsg.items()
> 
>> +        if isinstance(qmsg[key], list):
>> +            qmsg[key] = [filter_qmp(atom, filter_fn) for atom in qmsg[key]]
> 
> hmm, stop. filter_qmp() assumes that its argument is dict. but atom may not be dict.
> 

Oh, good catch. Will fix.

> so, to fit into the concept of fn(key, value) filtering function, we should do something like
> this:
> 
> for i in len(qmsg[key]):
>    if isinstance(qmsg[key], dict):
>      qmsg[key][i] = filter_qmp(qmsg[key][i], filter_fn)
> 
> qmsg[key] = filter_fn(key, qmsg[key])
> 
> ---
> or, we may want to apply filter_fn only to lists of non-dicts, and filter only list of dicts,
> assuming that we don't have mixed lists.
> 
> 
>> +        elif isinstance(qmsg[key], dict):
>> +            qmsg[key] = filter_qmp(qmsg[key], filter_fn)
>> +        else:
>> +            qmsg[key] = filter_fn(key, qmsg[key]) > +    return qmsg
>> +
>>   def filter_testfiles(msg):
>>       prefix = os.path.join(test_dir, "%s-" % (os.getpid()))
>>       return msg.replace(prefix, 'TEST_DIR/PID-')
>>   
>> +def filter_qmp_testfiles(qmsg):
>> +    def _filter(key, value):
>> +        if key == 'filename' or key == 'backing-file':
>> +            return filter_testfiles(value)
>> +        return value
>> +    return filter_qmp(qmsg, _filter)
>> +
>>   def filter_generated_node_ids(msg):
>>       return re.sub("#block[0-9]+", "NODE_NAME", msg)
>>   
>> @@ -465,10 +484,9 @@ class VM(qtest.QEMUQtestMachine):
>>               ("execute", cmd),
>>               ("arguments", ordered_kwargs(kwargs))
>>           ))
>> -        logmsg = json.dumps(full_cmd)
>> -        log(logmsg, filters)
>> +        log(full_cmd, filters)
>>           result = self.qmp(cmd, **kwargs)
>> -        log(json.dumps(result, sort_keys=True), filters)
>> +        log(result, filters)
>>           return result
>>   
>>       def run_job(self, job, auto_finalize=True, auto_dismiss=False):
>>
> 
> 

