Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  14 Dec 2018 08:37:25 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id E9EF658079D;
	Thu, 13 Dec 2018 06:29:02 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga002-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 13 Dec 2018 06:29:01 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AoTF9RRHXM6WrtIBPksdWi51GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75os6/bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJWSJPAp2y?=
 =?us-ascii?q?YZYMAeUDM+ZYqI7zqFQSohWxBAmsH/vvxz1Ti3/q36A33fgtHBva0AA+Gd8FrX?=
 =?us-ascii?q?TarM/yNKcXSe27yK7IzTPZYPNK2Tfy8o7IeQ0/rP6WWLJ/b9DRyU4pFwjYiVie?=
 =?us-ascii?q?rYvlPzWP2eQRs2iU9exgWfixhmE9rgF+vCKvxsAqioTShoIV10rL9Ctnz4Y0P9?=
 =?us-ascii?q?G3VEl7Ydu9HZZWqiqUNJN2T9s8T210vCs20KAKtJClcCQQ1ZgqxALTZ+aGfoWK?=
 =?us-ascii?q?+h7vSfqdLS1miH55eb+znRm//Eu6xuHhS8W50E5GoyVFn9XWqHwA2Bje5tKZRv?=
 =?us-ascii?q?dg4EutwyuD2gTO5uxCPEs6j7DUK4Q7zb41jpcTsVrMHivxmEjukq+WeVsr+vKy?=
 =?us-ascii?q?5+TkfLrmvJmcOJFwig3kNaQugMO/Dfw5MggIQWeb5fyx2KP/8UD9WrlGk/M7nr?=
 =?us-ascii?q?fDvJzHJskXurS1Dg5X34o77hawFTam0NAWnXkdK1JFfQqKj4zoO1HIPfD5Au6z?=
 =?us-ascii?q?g1eynzdxwfDJILnhDozKLnnNlrfuY6x95lVCyAo8099f/YhYCrIfL/LpXE/+qt?=
 =?us-ascii?q?jYAgU+MwyuzObrEM992Z8GWWKTHq+ZN7vfsVuJ5uIsPeaAfoAUuCvmJvgh5v7u?=
 =?us-ascii?q?i2I5mFAHcamo25sXdG63HvB8L0qFZnrsh88LEX0WsQomUOzqlFqCXCZTZ3moXq?=
 =?us-ascii?q?I8+is0CIW8AYfDW4CimrqB3CigE51SZ2BGDE2MEHjye4WFXfcMdDydIst7njMY?=
 =?us-ascii?q?UrihTpcr1Quyuw/i17pnMu3U9zUatZLkytd5/e7TlRY09TxyCMSQyGWNT2Bynm?=
 =?us-ascii?q?MVSD46xqF/oUphylid1ah0meBXFdtW5/lRSAc1KYbcz/BmC9D1Qg/OZMyJSFah?=
 =?us-ascii?q?QtWlGz0xVMg+w90VbkZ5GtWiiA3D3iWwD78UkbyLGII78qbG03ftIMZ9zm7M1L?=
 =?us-ascii?q?M9gFk+XstPKWqmi7Z89wfJAY7FiUGZl6eweqQa0y7A72ODzWuIvEFFXw98S6TF?=
 =?us-ascii?q?XXYDZkTIqdT1/F/NT7irCb4/KAtO1daCKrdWat3ulVhJWe3sOMrAbG6rm2e/Hx?=
 =?us-ascii?q?CIxqiSY4rsfGkd2CbdCE0Akw0I+XaGNA4+Bjquom7EDTxuE07vbF3o8eVktHy7?=
 =?us-ascii?q?SUo0xRmQb0J9z7q15gIVhfuERvwOxL0Epjkupy90HFmn2dLWEMSPpwx6caVYYN?=
 =?us-ascii?q?M95kpH1G3Duwx8OJygM75thloEfwtruEPu0g19Cp9cnsgysHMq0A1yJLqE0FNA?=
 =?us-ascii?q?cjOY2ozwOr3XK2Xo4BCjcanW2kva0NaX/KcP5+81q1HivAGvC0oj/G9r09hT03?=
 =?us-ascii?q?uA+JrKCBAeXo72UkYy7xJ6va3VYjEh54PI0n1hKbO7sjvc1NMmGuQkygyscMxC?=
 =?us-ascii?q?MKyZDgDyFc4aB8+wKOExn1ipbxQEPP1d9aIuPsOmceeG17CvPOp6gD2mimFH6p?=
 =?us-ascii?q?hn0k2Q7yp8VvLI35EdzvCYwwuLTSvzgE2gs8D3g49EYz4SE3G7ySjlAo5Re6Jz?=
 =?us-ascii?q?cZwKCWeoP8242NF+i4TxVH5f8V6pH0kG19OxeRqOc1z92hVd1V4WoXO7gyS41S?=
 =?us-ascii?q?F7kzYzoqqZwiPO2eXieAMbNWFRQGltkEnjIZKzj9AcR0WoawkplB245Uf13aRb?=
 =?us-ascii?q?paJ/L3XNTkdMZST5M2ZiUq6ovLqYf8FP8I8osTlQUOmkYVGaS6TxohsA3yP4Am?=
 =?us-ascii?q?tewis2dzWrupX/ghx7h3iRLHd1rHrFZ85wwQ3T68DbRf5UxjAGXjV3iSHLBlig?=
 =?us-ascii?q?ONmk5deUmI3ZsuC9VGKhUYdfcTLxwoODtyu75GtqDgO5n/2ont3nEA460TL01t?=
 =?us-ascii?q?VwVCXIqgr8bZfv16igLe1neUxoDkfm68VmAoF+jpcwhJYI1HkanJqV+mALkWXy?=
 =?us-ascii?q?MdVdwq/+aHsNRTgWw9/a+gTl2UtjLm6XyIL9THmS3sxhZ9yiaGMMxi0999xKCL?=
 =?us-ascii?q?uT7LFcnit6uFu4oRjRYfhghDgdz/Qu5WUeg+EIvgot0yqcDqoTHUleISzjiRCI?=
 =?us-ascii?q?48qio6VQYWalaaKw21ZmndC9ELGCpRlRWHP4epchByB89Mt+P0zX0H3v9I7kYs?=
 =?us-ascii?q?LfYswJth2biBrAi+lVKJQslvsFnyZnOGT9vWE7xO4/lxBhwZa6vI2fIWV34K25?=
 =?us-ascii?q?GgJYNiHyZ84L5jHtiqNektyX3o+1GJVhBy4LXIDpTf+zFDIStPLnNxuBETEmq3?=
 =?us-ascii?q?ebH6bfEhGb6Et8s33PFJWrPWmNJHYF1dViWAWdJEtHjQ8PRjo6mZo5Fh2wyMzl?=
 =?us-ascii?q?bUd0/TQR5l/+qhtRxeNkLRj/UmHDpAi2bjc4UoSQLB1T7gta/UfaLdSe7v5vHy?=
 =?us-ascii?q?Ff5pChrhaCKmmFaARTF20JRlaIB1P+Prmt+NnA9fKXBvGlIvvKYLWOr/FeVviS?=
 =?us-ascii?q?yZKu1Itm4yiDNsGVMnZ+CP0731JJXWplFMTBhzUPVysXmjrNbs6cuRe84zB3od?=
 =?us-ascii?q?q58PjxQwLv4o2PC7RJPNVr+hC2h7qDNuGKiCZ4LzZYyo0DxXvSxLcD214Sjjlk?=
 =?us-ascii?q?dyOxHrQYqS7NUKXQl7dXDxEFaiNzN8hI76Mm0glOI87bjdz12aBijv4oEFdITl?=
 =?us-ascii?q?jhmsCvZcwXLGCxLlLHBECXNLuYIT3H2d34YaS5SbdIluVbqwWwuSqHE0/kJjmM?=
 =?us-ascii?q?jSTpWAu1Me5SjCCXJhheuICmfxZpCGjjSs/maxKhPN92iz023aM7hnfQOWEANj?=
 =?us-ascii?q?h8dltHrqeM4iNAnvV/B2tB42J5LemFniaV9fXXJowKvvtrHCt0kflX4HA7y7tT?=
 =?us-ascii?q?8SFFS+Z5mCrUrt5yvV6mlvODxSZgUBpLsjxLnp6EvV1+OaXF8ZlNQXbF8wgL7W?=
 =?us-ascii?q?WVChQKocNqC9zvu69KzNjPm7n+KDND89LS4MsdCNLYKMOBMHo9LxXpHCTYAxcC?=
 =?us-ascii?q?TT6uZinjgBlnl/uT8DWws4IiqomkzIAJQL5dElkoDOsaG2xsBtlEK5ByCGAKi7?=
 =?us-ascii?q?me2ewP43OirBDXDO5Tu53dUfTaVdfoLj+FjbBCITABxL7iKoI7NpDyxEFjLFJ9?=
 =?us-ascii?q?mdKZSALrQdlRr3g5PUcPq0JX/S07FzVr1g=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AHAAAVbBJch0O0hNFjGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUgUBAQELAYNrJwqaKhSXQIFzLBMBgUuFeSI1CA0BAwEBAQEBAQIBEwE?=
 =?us-ascii?q?BAQgNCQgpL4I2JAGCYQEBAQECAQECNxkmBQEJAQEKGAklAwxIBg4FBYMcgXkIB?=
 =?us-ascii?q?aglijCMPIFXP4ERgxKKXAKJOwuBbIRckQEHAoIojyYLGJFKmxECggozGiNQgmy?=
 =?us-ascii?q?CJxeOHT8BATGBBAEBAQ6LG4EfAQE?=
X-IPAS-Result: =?us-ascii?q?A0AHAAAVbBJch0O0hNFjGwEBAQEDAQEBBwMBAQGBUgUBAQE?=
 =?us-ascii?q?LAYNrJwqaKhSXQIFzLBMBgUuFeSI1CA0BAwEBAQEBAQIBEwEBAQgNCQgpL4I2J?=
 =?us-ascii?q?AGCYQEBAQECAQECNxkmBQEJAQEKGAklAwxIBg4FBYMcgXkIBaglijCMPIFXP4E?=
 =?us-ascii?q?RgxKKXAKJOwuBbIRckQEHAoIojyYLGJFKmxECggozGiNQgmyCJxeOHT8BATGBB?=
 =?us-ascii?q?AEBAQ6LG4EfAQE?=
X-IronPort-AV: E=Sophos;i="5.56,349,1539673200"; 
   d="scan'208";a="56204462"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 13 Dec 2018 06:29:00 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728787AbeLMOZ5 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 13 Dec 2018 09:25:57 -0500
Received: from szxga05-in.huawei.com ([45.249.212.191]:16124 "EHLO huawei.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1727707AbeLMOZ4 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 13 Dec 2018 09:25:56 -0500
Received: from DGGEMS414-HUB.china.huawei.com (unknown [172.30.72.60])
        by Forcepoint Email with ESMTP id 1A514F950B82D;
        Thu, 13 Dec 2018 22:25:49 +0800 (CST)
Received: from localhost (10.206.48.115) by DGGEMS414-HUB.china.huawei.com
 (10.3.19.214) with Microsoft SMTP Server id 14.3.408.0; Thu, 13 Dec 2018
 22:25:47 +0800
Date: Thu, 13 Dec 2018 14:25:37 +0000
From: Jonathan Cameron <Jonathan.Cameron@huawei.com>
To: Robin Murphy <robin.murphy@arm.com>
CC: <will.deacon@arm.com>, <catalin.marinas@arm.com>,
        <linux-arm-kernel@lists.infradead.org>,
        <linux-kernel@vger.kernel.org>, <cyrilc@xilinx.com>,
        <james.morse@arm.com>, <anshuman.khandual@arm.com>,
        <linux-mm@kvack.org>
Subject: Re: [PATCH v2] arm64: Add memory hotplug support
Message-ID: <20181213142537.00003095@huawei.com>
In-Reply-To: <0dc6de46-0b9f-9b0b-f967-e29804279631@arm.com>
References: <331db1485b4c8c3466217e16a1e1f05618e9bae8.1544553902.git.robin.murphy@arm.com>
        <20181212114236.000030c9@huawei.com>
        <0dc6de46-0b9f-9b0b-f967-e29804279631@arm.com>
Organization: Huawei
X-Mailer: Claws Mail 3.16.0 (GTK+ 2.24.32; i686-w64-mingw32)
MIME-Version: 1.0
Content-Type: text/plain; charset="US-ASCII"
Content-Transfer-Encoding: 7bit
X-Originating-IP: [10.206.48.115]
X-CFilter-Loop: Reflected
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Wed, 12 Dec 2018 11:49:23 +0000
Robin Murphy <robin.murphy@arm.com> wrote:

> On 12/12/2018 11:42, Jonathan Cameron wrote:
> > On Tue, 11 Dec 2018 18:48:48 +0000
> > Robin Murphy <robin.murphy@arm.com> wrote:
> >   
> >> Wire up the basic support for hot-adding memory. Since memory hotplug
> >> is fairly tightly coupled to sparsemem, we tweak pfn_valid() to also
> >> cross-check the presence of a section in the manner of the generic
> >> implementation, before falling back to memblock to check for no-map
> >> regions within a present section as before. By having arch_add_memory(()
> >> create the linear mapping first, this then makes everything work in the
> >> way that __add_section() expects.
> >>
> >> We expect hotplug to be ACPI-driven, so the swapper_pg_dir updates
> >> should be safe from races by virtue of the global device hotplug lock.
> >>
> >> Signed-off-by: Robin Murphy <robin.murphy@arm.com>  
> > Hi Robin,
> > 
> > What tree is this against?
> > 
> > rodata_full doesn't seem be exist for me on 4.20-rc6.  
> 
> Sorry, this is now based on the arm64 for-next/core branch - I was 
> similarly confused when Will first mentioned rodata_full on v1 ;)
> 
> > With v1 I did the 'new node' test and it looked good except for an
> > old cgroups warning that has always been there (and has been on my list
> > to track down for a long time).  
> 
> Great, thanks for testing!
>
Hi Robin,
 
For physical memory hotplug (well sort of as I'm not really pulling
modules in and out of the machine, test is purely on the software).

Tested-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>

There is still an issue with a warning from the cpuset cgroups
controller I reported a while back but haven't followed up on.
That has nothing to do with this set though.

Tested with adding memory to proximity nodes that already have
memory in them and nodes that don't.  NUMA node support is just the
x86 code ripped out to a common location and appropriate SRAT.

We are looking at the virtualization usecases but that will take
a while longer.

If we can sneak this in this cycle that would be great!

Thanks,

Jonathan

> Robin.
> 
> > 
> > Jonathan  
> >> ---
> >>
> >> v2: Handle page-mappings-only cases appropriately
> >>
> >>   arch/arm64/Kconfig   |  3 +++
> >>   arch/arm64/mm/init.c |  8 ++++++++
> >>   arch/arm64/mm/mmu.c  | 17 +++++++++++++++++
> >>   arch/arm64/mm/numa.c | 10 ++++++++++
> >>   4 files changed, 38 insertions(+)
> >>
> >> diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig
> >> index 4dbef530cf58..be423fda5cec 100644
> >> --- a/arch/arm64/Kconfig
> >> +++ b/arch/arm64/Kconfig
> >> @@ -261,6 +261,9 @@ config ZONE_DMA32
> >>   config HAVE_GENERIC_GUP
> >>   	def_bool y
> >>   
> >> +config ARCH_ENABLE_MEMORY_HOTPLUG
> >> +	def_bool y
> >> +
> >>   config SMP
> >>   	def_bool y
> >>   
> >> diff --git a/arch/arm64/mm/init.c b/arch/arm64/mm/init.c
> >> index 6cde00554e9b..4bfe0fc9edac 100644
> >> --- a/arch/arm64/mm/init.c
> >> +++ b/arch/arm64/mm/init.c
> >> @@ -291,6 +291,14 @@ int pfn_valid(unsigned long pfn)
> >>   
> >>   	if ((addr >> PAGE_SHIFT) != pfn)
> >>   		return 0;
> >> +
> >> +#ifdef CONFIG_SPARSEMEM
> >> +	if (pfn_to_section_nr(pfn) >= NR_MEM_SECTIONS)
> >> +		return 0;
> >> +
> >> +	if (!valid_section(__nr_to_section(pfn_to_section_nr(pfn))))
> >> +		return 0;
> >> +#endif
> >>   	return memblock_is_map_memory(addr);
> >>   }
> >>   EXPORT_SYMBOL(pfn_valid);
> >> diff --git a/arch/arm64/mm/mmu.c b/arch/arm64/mm/mmu.c
> >> index 674c409a8ce4..da513a1facf4 100644
> >> --- a/arch/arm64/mm/mmu.c
> >> +++ b/arch/arm64/mm/mmu.c
> >> @@ -1046,3 +1046,20 @@ int pud_free_pmd_page(pud_t *pudp, unsigned long addr)
> >>   	pmd_free(NULL, table);
> >>   	return 1;
> >>   }
> >> +
> >> +#ifdef CONFIG_MEMORY_HOTPLUG
> >> +int arch_add_memory(int nid, u64 start, u64 size, struct vmem_altmap *altmap,
> >> +		    bool want_memblock)
> >> +{
> >> +	int flags = 0;
> >> +
> >> +	if (rodata_full || debug_pagealloc_enabled())
> >> +		flags = NO_BLOCK_MAPPINGS | NO_CONT_MAPPINGS;
> >> +
> >> +	__create_pgd_mapping(swapper_pg_dir, start, __phys_to_virt(start),
> >> +			     size, PAGE_KERNEL, pgd_pgtable_alloc, flags);
> >> +
> >> +	return __add_pages(nid, start >> PAGE_SHIFT, size >> PAGE_SHIFT,
> >> +			   altmap, want_memblock);
> >> +}
> >> +#endif
> >> diff --git a/arch/arm64/mm/numa.c b/arch/arm64/mm/numa.c
> >> index 27a31efd9e8e..ae34e3a1cef1 100644
> >> --- a/arch/arm64/mm/numa.c
> >> +++ b/arch/arm64/mm/numa.c
> >> @@ -466,3 +466,13 @@ void __init arm64_numa_init(void)
> >>   
> >>   	numa_init(dummy_numa_init);
> >>   }
> >> +
> >> +/*
> >> + * We hope that we will be hotplugging memory on nodes we already know about,
> >> + * such that acpi_get_node() succeeds and we never fall back to this...
> >> + */
> >> +int memory_add_physaddr_to_nid(u64 addr)
> >> +{
> >> +	pr_warn("Unknown node for memory at 0x%llx, assuming node 0\n", addr);
> >> +	return 0;
> >> +}  
> > 
> >   


