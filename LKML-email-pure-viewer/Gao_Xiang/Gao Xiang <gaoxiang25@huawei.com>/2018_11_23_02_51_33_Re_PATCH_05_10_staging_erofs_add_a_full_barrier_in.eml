Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 23 Nov 2018 12:22:50 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 7F57258037D;
	Thu, 22 Nov 2018 18:52:52 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by fmsmga001-1.fm.intel.com with ESMTP; 22 Nov 2018 18:52:51 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AFZ3IoBGsCNYSI6lTejEKFp1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75o8W9bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJSiJPHI28?=
 =?us-ascii?q?YYsMAeQPM+lXoIvyqEcBoxu/HgmsHOHixyRUhnL0x6A2z/gtHA/E0QEmAtkAsG?=
 =?us-ascii?q?7UrNLwNKoKUO661q7IxijCYPNXwzj97ofIeQ0mrPGDR71wdsXQyUg1GAPDgVWc?=
 =?us-ascii?q?t4zoMiiV1uQQqWea4fRvVeO1h2E7rAFxpyGiy8ExgYfKnoIY0k7I+Tl9zYovON?=
 =?us-ascii?q?G1RlB3bcS5HJZTqy2WLYp7T8E6T211pCo20KAKtJ6mcCQQ1pgqyQTTZ+GFfoWJ?=
 =?us-ascii?q?+h7uW+acLS1miH9qfL+znQi+/VW+xuHmS8W51EpGoyxYmdfWrH8NzQbc6s2fR/?=
 =?us-ascii?q?t94Eih3TGP2hjN6uFLP080j7DXK50/zb4qkJocr0DDEjXxmEXsg6+abkQk+u62?=
 =?us-ascii?q?5OT7erjquIOQOotuhg3jPKkihNazDfk7PwQSRWSW+Oax2KXm/ULjQbVKivM2kr?=
 =?us-ascii?q?PesJDfPckboq+5AwlI0ocs8hq/DCmp0M4enXYZKFJJYRWHjobvO17QOvD1Fum/?=
 =?us-ascii?q?g1uynzdx3fzGPaPuAo/LLnfdlLftZ7F961RTyAYr19BQ+4pUCq0dIPL0QkLxsN?=
 =?us-ascii?q?3YDhwnPACuzOfnFc5w1ocfWWKJH6+YP7nesV6O5uIzPeaMYJUZtyr6K/gg//Tu?=
 =?us-ascii?q?l2M2mUcBfam12psacHC4Ee5nI0WFe3Xshc0NEWcXvgUkSuzqh0aPUTpSZ3a0Qq?=
 =?us-ascii?q?I96Ss3CIOgDYffWI+thKaN0zu8Hp1TfmpGEEyDEW/0d4WYXPcBcCCSIsh/nTAe?=
 =?us-ascii?q?VrihTIkh1ReptALhz7pnL+zU+jAXtJ751dh14fHTmg829TBuE8ud1GSNRXlunm?=
 =?us-ascii?q?wUXz82wLx/oUtlx1iZyqh4g/tYFd9J6/NTSAg6N4XRz+h7C9D0RwLAcc2FSFeg?=
 =?us-ascii?q?QtW6Hz4xSsg9zMMJY0Z4A9+ilAzM3zK2A78JkLyGHJ80/bja33TrI8Z9ymzJ1K?=
 =?us-ascii?q?8uj1Q9RstPNGumhrNw9gTJBo7JlVmZmLiudagGwCHN82KDx3KUvE5ESA5wTbnF?=
 =?us-ascii?q?XXcHa0TLt9v5+F3NQ6WuCbs9NAtB0tCNKq1NZt3tjlVGQfPjNc/aY2KwnWewGB?=
 =?us-ascii?q?mJyqmNbIrsZ2USwiHdBFIYnAAU+HaMLRI+CTu5o2LCEDxuEkribF72/ulgtny3?=
 =?us-ascii?q?VE80wBuMb016ybW1/AUYhfidS/MVw7IFtz0tqzRyHFahwd3WD8CMqBZmfKVZed?=
 =?us-ascii?q?k9+ktI1XrFtwxhOZytN7xihl8bcwRwo0Pu1xV2Bp9ckcQwq3Mq1g5yKaOe0FNO?=
 =?us-ascii?q?bD6Y2ZHwOrvKKmj95hyvaqjW2k3A39aS4KsA9PM4q1D7tgGzCkUi62ln08VS03?=
 =?us-ascii?q?aE/JrKCBQdUJ3vXUc37RR1vKzabTQn6IPS1n1sNre0vyTG29IoAusl1xmhc81e?=
 =?us-ascii?q?MKOCCA/9DckaC9KyJ+wtnlijdggEM/xK9K4oI8OmcOOL2a62POp6gD2ql2VG4I?=
 =?us-ascii?q?Bn3UKK+CpxUerI35cDw/GF0QqLTTb8jFG9ss/pnYBIfy0dHm26ySL8Ho5eerVy?=
 =?us-ascii?q?fZoXCWepO8C33NR+iIL3VH5C6VGjAEkK2Mm3dhqIblzxxBFf2l4ToXO6hyS41T?=
 =?us-ascii?q?t0kzcyo6qb3SzOxfnidRUdNm5KQmlikUnjIYyug98GW0ioahAjlAG56kbi26hb?=
 =?us-ascii?q?uKN/InHTQEdJZST3L3tuUrCttrqEeMNP7JIosSNKUOWze1yaS7j9owcE3CPnBW?=
 =?us-ascii?q?dR2Dc7dzSysJXjgxN6kH6dLGp0rHfBe8F/3w3f5N/fRf5WxDYGXzN3iTrUBli9?=
 =?us-ascii?q?Odmm49OUmozHsuC/UWKhS5JSfTPqzYOGqCu0+2lqDQejkPC0n93tCRI63jPj19?=
 =?us-ascii?q?l2SSXIqw7xY4nx2KS9K+5nfEhoBFnn5sp+G4F+lJYwhZ4K1XgbgJWV4WQIkWPp?=
 =?us-ascii?q?PdpH3qL+aWIHRSQXzN7N/AjlxEpjI2qKx43jV3WR2MthZ8SgbWMQ1SIw9MRKCK?=
 =?us-ascii?q?aS7LxZkip5uFu4rQTNYfdjmjcR0+ch6Hkfg+sRogoi0j2dAqwOHUlfJSHskhWI?=
 =?us-ascii?q?79Oko6lNamegb6Ow1FZgktC7F76NvBtcWHnid5cmHC9w6Nh/MV3W3H3y7IHkZM?=
 =?us-ascii?q?ffbdYJuhKIlBfAivBfKIgtmfoSmSpnJWX9sGU5y+48iBxix5C7s5KBK2Vw56K5?=
 =?us-ascii?q?GR9YOybxZ8MS/DHtkKlfktyX34CpApVuBDELUIH0QvKvFTIYre7nOBqWED0gtn?=
 =?us-ascii?q?ebHqLSEhSF50dhq3LPDoqnN3WKJHQCydViRR+dJFFQgQwOXTU6mII5GR6uxMD7?=
 =?us-ascii?q?bEh54TUR7EbiqhRQ0uJoKwX/UmDHqQeqcDg0TYaQLAFM4gFe/UvVMtGe7uFuHy?=
 =?us-ascii?q?Fe5JKhtxeAKmiaZwROEGEIVVaIB1HlPrmy+9bA9/KUCfa5L/vLeb+Os/BRV++U?=
 =?us-ascii?q?xZKz1Ytr5zaNNsKSPnl7Ev00wExDUWpiG8TenTUPRDcalybMb86duRe99Td7rs?=
 =?us-ascii?q?G58PT3Rg3v4ZGDBKdVMdVq4xq2m7uMN/aMhCZlLjZVzpMMymHJyLgc314Sijti?=
 =?us-ascii?q?dzq3EbQHui7CUrjQmrJMDxMAbyNzNc1I778z3wVXOM7bjM/12aB8jvIvF1hFUl?=
 =?us-ascii?q?nhkNmzZcMWO2G9KE/HBEGTObucOD3E2Nv3br28SLFKiOVUtga9uTKaE0/lIzSC?=
 =?us-ascii?q?mCPlVxGpMeFQki6bOAZSt526chZoEWLjVs7pagWnMN9rij072aE0hnLPNWIGLT?=
 =?us-ascii?q?dwaV9Crr2O4iNemfh/H21B7nx4LeiLgSqZ7u/YKooIvvtvGCh7i+Va4HEiwbtP?=
 =?us-ascii?q?8C5EXOB1mDfVrtN2o1CpiO+Pyj9mUBpIsjlKhYKLsl9kOaXW7ZRAXXfE/BQQ7W?=
 =?us-ascii?q?SfERgKpt1lCsHxtKBU0NTAiKXzKDIRu+7TqOIaC9LZIYq/OWA7MFK9ETjYFgYM?=
 =?us-ascii?q?CyaiL3ver0VYmeuP8nSOqZwntpnrnoFIQbheAg8bDPQfX2tsG5QyIZ5xUXtwnr?=
 =?us-ascii?q?ecnM8B43Xk8THRWcxFs5GBXfWXV6a8YA2FhKVJMkNbiYjzKp4eY8iigxRv?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAABSavdbh0O0hNFiHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgmmBAicKg2+IGI4MFJIwgU+DKIFxFhgDEAGIUiI0CQ0BAwEBAQE?=
 =?us-ascii?q?BAQIBEwEBAQgNCQgpIwyCNiQBgmEBAQEBAgEBAiAEUgYJAQEKGAICJgICA0QQB?=
 =?us-ascii?q?g0BBwEBAYMcAYF5CAWnSXwzhUCEWYELin6CFoERJ4JriAKCVwKBKgEBiWWESzO?=
 =?us-ascii?q?PcgEGAgGBVkqEXIotBhiBWU2EPoJtEIcnLJEjhmGBRoINTSOBboFOCYJHiHqFH?=
 =?us-ascii?q?TIBATGBBAEBAQ6LKIEfAQE?=
X-IPAS-Result: =?us-ascii?q?A0ANAABSavdbh0O0hNFiHAEBAQQBAQcEAQGBUQcBAQsBgmm?=
 =?us-ascii?q?BAicKg2+IGI4MFJIwgU+DKIFxFhgDEAGIUiI0CQ0BAwEBAQEBAQIBEwEBAQgNC?=
 =?us-ascii?q?QgpIwyCNiQBgmEBAQEBAgEBAiAEUgYJAQEKGAICJgICA0QQBg0BBwEBAYMcAYF?=
 =?us-ascii?q?5CAWnSXwzhUCEWYELin6CFoERJ4JriAKCVwKBKgEBiWWESzOPcgEGAgGBVkqEX?=
 =?us-ascii?q?IotBhiBWU2EPoJtEIcnLJEjhmGBRoINTSOBboFOCYJHiHqFHTIBATGBBAEBAQ6?=
 =?us-ascii?q?LKIEfAQE?=
X-IronPort-AV: E=Sophos;i="5.56,268,1539673200"; 
   d="scan'208";a="41254664"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 22 Nov 2018 18:51:50 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2501905AbeKWNeF (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 23 Nov 2018 08:34:05 -0500
Received: from szxga04-in.huawei.com ([45.249.212.190]:15581 "EHLO huawei.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S2392981AbeKWNeF (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 23 Nov 2018 08:34:05 -0500
Received: from DGGEMS411-HUB.china.huawei.com (unknown [172.30.72.59])
        by Forcepoint Email with ESMTP id 4A75238FC0DC;
        Fri, 23 Nov 2018 10:51:44 +0800 (CST)
Received: from [10.151.23.176] (10.151.23.176) by smtp.huawei.com
 (10.3.19.211) with Microsoft SMTP Server (TLS) id 14.3.408.0; Fri, 23 Nov
 2018 10:51:38 +0800
Subject: Re: [PATCH 05/10] staging: erofs: add a full barrier in
 erofs_workgroup_unfreeze
To: Andrea Parri <andrea.parri@amarulasolutions.com>
CC: Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        <devel@driverdev.osuosl.org>, <linux-erofs@lists.ozlabs.org>,
        Chao Yu <yuchao0@huawei.com>,
        LKML <linux-kernel@vger.kernel.org>, <weidu.du@huawei.com>,
        Miao Xie <miaoxie@huawei.com>
References: <20181120143425.43637-1-gaoxiang25@huawei.com>
 <20181120143425.43637-6-gaoxiang25@huawei.com>
 <20181122102230.GF3189@kroah.com>
 <1d1fd688-0cb5-cbac-9213-f56f7e356bca@huawei.com>
 <20181122185058.GA3466@andrea>
From: Gao Xiang <gaoxiang25@huawei.com>
Message-ID: <b2f367c5-a54c-9edf-42ad-d256bc725cf7@huawei.com>
Date: Fri, 23 Nov 2018 10:51:33 +0800
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:52.0) Gecko/20100101
 Thunderbird/52.3.0
MIME-Version: 1.0
In-Reply-To: <20181122185058.GA3466@andrea>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
X-Originating-IP: [10.151.23.176]
X-CFilter-Loop: Reflected
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi Andrea,

On 2018/11/23 2:50, Andrea Parri wrote:
> On Thu, Nov 22, 2018 at 06:56:32PM +0800, Gao Xiang wrote:
>> Hi Greg,
>>
>> On 2018/11/22 18:22, Greg Kroah-Hartman wrote:
>>> Please document this memory barrier.  It does not make much sense to
>>> me...
>>
>> Because we need to make the other observers noticing the latest values modified
>> in this locking period before unfreezing the whole workgroup, one way is to use
>> a memory barrier and the other way is to use ACQUIRE and RELEASE. we selected
>> the first one.
>>
>> Hmmm...ok, I will add a simple message to explain this, but I think that is
>> plain enough for a lock...
> 
> Sympathizing with Greg's request, let me add some specific suggestions:
> 
>   1. It wouldn't hurt to indicate a pair of memory accesses which are
>      intended to be "ordered" by the memory barrier in question (yes,
>      this pair might not be unique, but you should be able to provide
>      an example).
> 
>   2. Memory barriers always come matched by other memory barriers, or
>      dependencies (it really does not make sense to talk about a full
>      barrier "in isolation"): please also indicate (an instance of) a
>      matching barrier or the matching barriers.
> 
>   3. How do the hardware threads communicate?  In the acquire/release
>      pattern you mentioned above, the load-acquire *reads from* a/the
>      previous store-release, a memory access that follows the acquire
>      somehow communicate with a memory access preceding the release...
> 
>   4. It is a good practice to include the above information within an
>      (inline) comment accompanying the added memory barrier (in fact,
>      IIRC, checkpatch.pl gives you a "memory barrier without comment"
>      warning when you omit to do so); not just in the commit message.
> 
> Hope this helps.  Please let me know if something I wrote is unclear,

Thanks for taking time on the detailed explanation. I think it is helpful for me. :)
And you are right, barriers should be in pairs, and I think I need to explain more:

255 static inline bool erofs_workgroup_get(struct erofs_workgroup *grp, int *ocnt)
256 {
257         int o;
258
259 repeat:
260         o = erofs_wait_on_workgroup_freezed(grp);
261
262         if (unlikely(o <= 0))
263                 return -1;
264
265         if (unlikely(atomic_cmpxchg(&grp->refcount, o, o + 1) != o)) <- *
266                 goto repeat;
            imply a memory barrier here
267
268         *ocnt = o;
269         return 0;
270 }

I think atomic_cmpxchg implies a memory barrier semantics when the value comparison (*) succeeds...

I don't know whether my understanding is correct, If I am wrong..please correct me, or
I need to add more detailed code comments to explain in the code?

Thanks,
Gao Xiang


> 
>   Andrea
> 
> 
>>
>> Thanks,
>> Gao Xiang
>>
>>>
>>> thanks,
>>>
>>> greg k-h
