Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 16:18:30 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 5157D58042F;
	Thu,  6 Dec 2018 22:31:10 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 22:31:09 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AOy9prRP1dRzw9vlYzzQl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KPr7pcbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzcaTBc90aW2dNR99dWS5cDYOm?=
 =?us-ascii?q?docBEvcBPf1Ar4bju1QOsQKyBQ2rBOLh1zREgn/70ag83usmDQ/I3BItE8sXvH?=
 =?us-ascii?q?rWsdr1Lr4eX/2ozKnT1TXMce9Z2Svg44TMbBwtvfSAULRtesTT1EYvDRvIgFWO?=
 =?us-ascii?q?p4L4MT2b1eMDvGqV7+ViW+KvkHYnpgNqrzSz2sshkJXFi5gJxlzY8yhy3YY7Jc?=
 =?us-ascii?q?e/SE5+edOrEZpQtyeHPIVwRcMiRW5oszs9x70CpJ60YCkKx4ohxxLFZP2Hco6I?=
 =?us-ascii?q?7wnsVOaUOzh4hXZldKijiBa19Eit0+vxXdS33lZStidJjMXAu3QX2xDO5MWLVO?=
 =?us-ascii?q?Fx8lqi1DqTzQze6+NJLVgqmabHL5Mt2KM8m5QNvUjZAyP7m0b7gLWVe0k4/OWj?=
 =?us-ascii?q?9v7pba/8ppCGMo95kgH+Pboqmsy4Gek4LAcOUHaB+eim173s41f5QLNUgf0yiK?=
 =?us-ascii?q?XZt4raJcsDqq64BQ9azJoj5g6hAzu61NkUh2QLIVxbdB6dkoTkOE3CLOr5APq9?=
 =?us-ascii?q?m1islS1kx/HCPr3vGJXNKX3Dna/lfbZ87U5c1QUywclc551KELEBJuz8WkvouN?=
 =?us-ascii?q?zfAB45NRK7w/z8BdVj2YMRR3iPDrWaMKzMq1+I4PwgI+2WaI8Sojb9JOAp5+Ty?=
 =?us-ascii?q?gn8hhV8dYa6p0IMTaHC5HfRpPV+VYHXxgtoaFWcKvww+TPHliVGYUD5TYWqyUL?=
 =?us-ascii?q?w45j0hFI2mCoLDTJi3gLOdxCe7AoFWZmdeB1CMC3jodpmEVO0LaC6IIs9hjyYL?=
 =?us-ascii?q?Vb6uS4I60RGutQn6y6doL+bO+y0Ys47j28Zx5+HJiR4y8jl0BdyH026RV2F0gn?=
 =?us-ascii?q?8IRzgu0aB9pkxy1E2P0at/g/xeE9xT4OhEUgM7NZ7a0ux7BMr+WgPHfteVVlmm?=
 =?us-ascii?q?Rs+qDi02TtI029UOeVpyG82+jhDf2CqnG6Ual6eLBJwz8aLQxWLxKNx/y3vd0K?=
 =?us-ascii?q?khjl8mQtZANGG8h65/8RTTCJDNk0mDi6mqcqEc1jbX9Gif1WqOoF1YUAloXKXG?=
 =?us-ascii?q?R38fYFHardD45kzYSb+uBq8qMg9Ayc6EN6tLZcfljVRARPf/JtveZ3i9lHu3BR?=
 =?us-ascii?q?aN3rmMdpble30B3CXBD0gJix0c8myYNQcgHCuho3jRDDp1FV3xZUPg9u1+qHC+?=
 =?us-ascii?q?Tk8w1AyKa0xh17yo+h8an/CcSvUT3q4atyclsTl7AFG939fOAdqauwVhZLlcYc?=
 =?us-ascii?q?864FpfyG3WrRJ9MYK6I6BinFEedR93sF3o1xhsDoVAkM4qrG4lzQZoKKKY1k9B?=
 =?us-ascii?q?eC2c3ZzqJrLXLWzy9gi1a6HKwlHezMqW+qAX5fQkqlXjuQapFlYi83RnydVVz2?=
 =?us-ascii?q?GQ5pLQDAoWUJLxVEk3+gN+p7HbZCk9+ozV2WdtMamyrj/NxdYpCPE5xRanetdV?=
 =?us-ascii?q?KLmEGxPqE80GG8iuL/QnlEKtbh0aM+Fd6q41M9m9ePubxaGkJuBgnDGhjWRZ+4?=
 =?us-ascii?q?191kOM9yxhSu/HxZoFwveY3heZWDf4lluursf3mYVcbzEIAmW/0TTkBJJWZqBq?=
 =?us-ascii?q?fYcLFH2iLNGtytR/h57iQXhY9FG4ClMC2c+pfweSblPn0Q1R00QXvWKomS+iwz?=
 =?us-ascii?q?NolDEpq7KV3DbSzOT6aBoHJmlLSXF4jVftPYe7lcoaU1WvbwQzkhuq+1z6x6lC?=
 =?us-ascii?q?qKtjNWbTRVpHcDbsL2FlVKu9rb6CY89J6JM1viRbSuW8YVaGSrHjpxsWyT/sH2?=
 =?us-ascii?q?xbxDojbTGlpo35nwBmiGKaNHtyrHvZddtwxBvF/9zcWPhR0yECRCl5jznXG1e9?=
 =?us-ascii?q?M8Oo/dWSi5fMrOS+W3i9WZ1UdCnh1ZmAuzej5W12HR2/mOi+mt/9Hggg0i/71N?=
 =?us-ascii?q?5qWT/TrBnmYYnr1KW6MeR5cUluH1L878t6Godjkoo/np0Q2H4ahomL8noDi2v8?=
 =?us-ascii?q?LdJb2afmZnoXWTEL28LV4BTi2EB7LnOG3YX5Wm+fwstgYdm3eWcW2iM778BXB6?=
 =?us-ascii?q?aY9r1EnS1polWmqQLde+RynjAYyfE28n4Vn/kJuBYxziWaGr0SHlNXPS32mxSI?=
 =?us-ascii?q?8tCxtqNXZGm0fLi01Up+m82hDb6YrgFdXnb5ZoktHStq4spjN1LM1WX56pv4d9?=
 =?us-ascii?q?nIcdITqhqUng/Fj+hUK5I+jOAGhCR5NmLmoX0q1fQ7ggdw0pGgs4iKMGFt/KO/?=
 =?us-ascii?q?Ah5FOTz5fcIT+jfxjalAmsaaxZygHpJkGj8TRpvnUeqoEC4OtfTgLwuODDo8qn?=
 =?us-ascii?q?KBFbveBwCf7lpmr2nUE5CqLHyXIHgZzdN/RBiSPkBfgQYUXCkkkZ49DAyl2Mvh?=
 =?us-ascii?q?cEJh7DAL+lH4sgdMyv5vNxTnSWjQvgCoajMpSJSFKBpW8xpP50PUMcyY8+JyED?=
 =?us-ascii?q?tU/pynrAyRNGObYx5EAn0OWkyBH1rjJKWh5cHc8+iEAeqzN/nObq+LqeNATPeE?=
 =?us-ascii?q?346v3pFl/zaRNcWPI39iAOcg2kdYWXB5GsLZmygASiANliLNadKbqwm4+iFtss?=
 =?us-ascii?q?+/9/HrUhr15YSTE7tSLclv+xeujKaDMO6QmT95KStC2ZMK33PI078f3Fgdiyx1?=
 =?us-ascii?q?czmtELIAtTPCTa7Km69XCQIbZD13NMdS86082QxNM9bBitzpzr54kuI1C1BdWF?=
 =?us-ascii?q?zhhM6pZM8KI2K8NF/dB0aLLrOGJTLVzMHtfKO8UqZdjOFVtx22pDaaHFXvPjWF?=
 =?us-ascii?q?lzn1SR+vNftAgz2cPBxboIu9aApiCXD/TNL6bR22KMV4jSAtzr0umHzLNXQQMT?=
 =?us-ascii?q?x9c05Wqr2Q7CVYguhwGmBb73plK/WElDid7+XCNpkWtv5rCDxul+1G+HQ616dV?=
 =?us-ascii?q?7CZcSfxpmSvSq8RirE28nuaTyjpoThxOpy1PhIKKu0ViJKrY+oNBWXbC4BIC82?=
 =?us-ascii?q?GQBw4WqNtiD93lo7pQxcTXlKLvNDdC9MrZ/MsGCMjSLcKHMXwhPgLoGT7UFgQF?=
 =?us-ascii?q?SzGrOHrbh0xclvGS63KUooI7qpjqhJoBVLtbWEYpGfMdD0Q2VOAFdZN2WC401L?=
 =?us-ascii?q?2WlsgF4VKgoxTLAsZXpJbKUrSVG/qrYDCUkaZDfRhAzb7mZdAVO5H31lJKdFZ3?=
 =?us-ascii?q?hsLJFlDWUNQLpTduOEt8pERL7Wg7VWYvw2r7ZQ63pnweD/i5mlgxkAQtT/4q8W?=
 =?us-ascii?q?Lc4lF/Al3Mq2NklFQ6mNjjxyCQdhb+Ka6xWcddDC+i5Bt5CY/yXwsgNV76pkdj?=
 =?us-ascii?q?LjqRAu0Mgg=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AEAABBEwpch0O0hNFjGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUQYBAQELAYNrJ4wTjXg5aIgniTKEeoFzEgEBGBMBh1kiNAkNAQMBAQE?=
 =?us-ascii?q?BAQECARMBAQEIDQkIKSMMgjYkgmMDAwECJBkBGx0BAwIJAQEFEDsDHgIRAQUBH?=
 =?us-ascii?q?AYBEgWDHIFpAQMVBZoTPIwJFgUBF4J3BYRBChknDV2BNwIGEodegxOBHIIWgRE?=
 =?us-ascii?q?zgiqDDIgFAoslhQ+QAC4HAo4cgy4YiWKHVCyIY4V/iWUCBAIEBQIFDyGBJYINT?=
 =?us-ascii?q?SOBAYI7ghsMF4NKiFKCDjMygQIDAQEhE4oLAQE?=
X-IPAS-Result: =?us-ascii?q?A0AEAABBEwpch0O0hNFjGwEBAQEDAQEBBwMBAQGBUQYBAQE?=
 =?us-ascii?q?LAYNrJ4wTjXg5aIgniTKEeoFzEgEBGBMBh1kiNAkNAQMBAQEBAQECARMBAQEID?=
 =?us-ascii?q?QkIKSMMgjYkgmMDAwECJBkBGx0BAwIJAQEFEDsDHgIRAQUBHAYBEgWDHIFpAQM?=
 =?us-ascii?q?VBZoTPIwJFgUBF4J3BYRBChknDV2BNwIGEodegxOBHIIWgREzgiqDDIgFAoslh?=
 =?us-ascii?q?Q+QAC4HAo4cgy4YiWKHVCyIY4V/iWUCBAIEBQIFDyGBJYINTSOBAYI7ghsMF4N?=
 =?us-ascii?q?KiFKCDjMygQIDAQEhE4oLAQE?=
X-IronPort-AV: E=Sophos;i="5.56,324,1539673200"; 
   d="scan'208";a="55924439"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 06 Dec 2018 22:31:08 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726117AbeLGGbB (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 7 Dec 2018 01:31:01 -0500
Received: from mail-pf1-f196.google.com ([209.85.210.196]:35348 "EHLO
        mail-pf1-f196.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725948AbeLGGbB (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 7 Dec 2018 01:31:01 -0500
Received: by mail-pf1-f196.google.com with SMTP id z9so1450211pfi.2;
        Thu, 06 Dec 2018 22:31:00 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=from:to:cc:subject:date:message-id:in-reply-to:references
         :in-reply-to:references;
        bh=7MfUEQQkpsvuhuLJsGgSUDCmSQkbYrqMmWgv/EsP3fo=;
        b=PXGgMFcUw1JOXrkayVkXHCuO5iRRzyw6IyZ5NZvlfVGIUhWArFEagsY7lLgmpfta/F
         PbanvNRZaiOJN7FbpXO4afRzVLGob3YO6WUiIjvNEBNnv2O0NQs7NQF4DpK6OwWz6EmT
         BuF35RIvowKq23f5S9XXJJdavt+Qu/jMdS776xMpKqrtMX4zX135xDPaHP5oQ1TiP/wA
         sIu4LQqCC8UQYobTW7iqoz8Iwa89AJlIeyj0/miAP9EAdviYVH/s5syGE2cvW3sC+G7v
         tF9bZ5ZZn/SQYtwk4INh2IsYjKaryZ1975yfSNKwUQaWpXgl/a3a0cqr2qIyWmoAjqgp
         2stA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:in-reply-to:references;
        bh=7MfUEQQkpsvuhuLJsGgSUDCmSQkbYrqMmWgv/EsP3fo=;
        b=W81O2ouly4/J1Q5/rYF34bW1wVS9E8oUTWkQ0Wjf0qsxfUT25rKJ9YK61IWE7/h9lf
         plLfP21qB2VI0vCQSGYkWbvrrI6ZKH6TLPYIXsbVe+Eu4RN/Uv3wcmCi2uK6nBixtWIu
         hP0d6JBGkhUdsXk5Dam7Dxby7/Ob4AQrY9D+/orTp7T0B4OujKl1EfJkM21FzmeitECf
         1o777QSRGRJyt2JAg9UJdOgChv6aKjYUfMoXA0xJTu7NsaaaXvuq42O1PWmoCgN9YDkG
         IswlU1G+eP5GuSnDCEwXFgjscI1tcxN5AHrB8QSWXB9WHTZHgEsEeIUIYS/oI13xAJgN
         uBug==
X-Gm-Message-State: AA+aEWZ2PgmRirStVdq9ybXx2D/P/xDmX5TedtVMvUg54Dd5qE5LwdVo
        VysyNoqLgAuhuRsZ4MlaPE2vaQG4eEk=
X-Google-Smtp-Source: AFSGD/XSCMCNgLFp+tsuuzvWlt+tYiPsiEQ5MeKt9KqQ/bJeo23CCsN7K9d9ZYfpJEfqekLrlTzMVQ==
X-Received: by 2002:a62:cf84:: with SMTP id b126mr1054017pfg.98.1544164259934;
        Thu, 06 Dec 2018 22:30:59 -0800 (PST)
Received: from localhost ([209.132.188.80])
        by smtp.gmail.com with ESMTPSA id 84sm4719553pfk.134.2018.12.06.22.30.59
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Thu, 06 Dec 2018 22:30:59 -0800 (PST)
From: Xin Long <lucien.xin@gmail.com>
To: linux-kernel@vger.kernel.org, network dev <netdev@vger.kernel.org>,
        linux-sctp@vger.kernel.org
Cc: davem@davemloft.net,
        Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>,
        Neil Horman <nhorman@tuxdriver.com>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        David Rientjes <rientjes@google.com>,
        Eric Paris <eparis@redhat.com>,
        Konstantin Khorenko <khorenko@virtuozzo.com>
Subject: [PATCHv2 net 2/3] flex_array: support flex_array_resize
Date: Fri,  7 Dec 2018 14:30:34 +0800
Message-Id: <9122685dd16d04613de02594325acf79b2d04a3d.1544163962.git.lucien.xin@gmail.com>
X-Mailer: git-send-email 2.1.0
In-Reply-To: <a4474a5886807d13146dc67e2d214b7ba3029d32.1544163962.git.lucien.xin@gmail.com>
References: <cover.1544163962.git.lucien.xin@gmail.com>
 <a4474a5886807d13146dc67e2d214b7ba3029d32.1544163962.git.lucien.xin@gmail.com>
In-Reply-To: <cover.1544163962.git.lucien.xin@gmail.com>
References: <cover.1544163962.git.lucien.xin@gmail.com>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This function can dynamically change total_nr_elements of a flex_array,
and keep the old elements of the same memory. Returns 0 if it succeeds.

Note that it won't do any memory allocation or shrinking for elements,
which should be only done by flex_array_prealloc and flex_array_shrink.

Suggested-by: Neil Horman <nhorman@tuxdriver.com>
Signed-off-by: Xin Long <lucien.xin@gmail.com>
Acked-by: Neil Horman <nhorman@tuxdriver.com>
---
 include/linux/flex_array.h | 11 +++++++++
 lib/flex_array.c           | 58 ++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 69 insertions(+)

diff --git a/include/linux/flex_array.h b/include/linux/flex_array.h
index 29ad65f..19ff58d 100644
--- a/include/linux/flex_array.h
+++ b/include/linux/flex_array.h
@@ -130,6 +130,17 @@ void *flex_array_get(struct flex_array *fa, unsigned int element_nr);
  */
 int flex_array_shrink(struct flex_array *fa);
 
+/**
+ * flex_array_resize() - Resize without the old elements memory changed
+ * @fa:		array to resize
+ * @total:	total number of elements that this would change to
+ * @flags:	page allocation flags to use for base array
+ *
+ * Return:	Returns 0 if it succeeds.
+ *
+ */
+int flex_array_resize(struct flex_array *fa, unsigned int total, gfp_t flags);
+
 #define flex_array_put_ptr(fa, nr, src, gfp) \
 	flex_array_put(fa, nr, (void *)&(src), gfp)
 
diff --git a/lib/flex_array.c b/lib/flex_array.c
index 8c0b9b6..2f913e7 100644
--- a/lib/flex_array.c
+++ b/lib/flex_array.c
@@ -405,3 +405,61 @@ int flex_array_shrink(struct flex_array *fa)
 	return ret;
 }
 EXPORT_SYMBOL(flex_array_shrink);
+
+/**
+ * flex_array_resize - resize without the old elements memory changed
+ * @fa:		the flex array to resize
+ * @total:	total number of elements that this would change to
+ * @flags:	page allocation flags to use for base array
+ *
+ * This function can dynamically change total_nr_elements of a flex_array,
+ * and keep the old elements of the same memory. Returns 0 if it succeeds.
+ * Note that it won't do any memory allocation or shrinking for elements,
+ * which should be only done by flex_array_prealloc and flex_array_shrink.
+ *
+ * Locking must be provided by the caller.
+ */
+int flex_array_resize(struct flex_array *fa, unsigned int total, gfp_t flags)
+{
+	int nr;
+
+	if (total > FLEX_ARRAY_NR_BASE_PTRS * fa->elems_per_part)
+		return -EINVAL;
+
+	if (elements_fit_in_base(fa)) {
+		struct flex_array_part_p *part_p;
+
+		nr = fa->total_nr_elements;
+		fa->total_nr_elements = total;
+		if (elements_fit_in_base(fa))
+			return 0;
+
+		part_p = kzalloc(sizeof(*part_p), flags);
+		if (!part_p) {
+			fa->total_nr_elements = nr;
+			return -ENOMEM;
+		}
+
+		part_p->p_part[0] = (struct flex_array_part *)&fa->parts[0];
+		fa->part_p = part_p;
+	} else {
+		struct flex_array_part *part;
+
+		fa->total_nr_elements = total;
+		if (!elements_fit_in_base(fa))
+			return 0;
+
+		for (nr = 1; nr < FLEX_ARRAY_NR_BASE_PTRS; nr++) {
+			part = fa->parts[nr];
+			if (part) {
+				fa->parts[nr] = NULL;
+				kfree(part);
+			}
+		}
+
+		fa->part_p = (struct flex_array_part_p *)fa->parts[0];
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL(flex_array_resize);
-- 
2.1.0

