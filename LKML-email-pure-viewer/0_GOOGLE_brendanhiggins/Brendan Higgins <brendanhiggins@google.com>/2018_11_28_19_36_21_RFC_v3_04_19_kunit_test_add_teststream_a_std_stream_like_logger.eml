Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 29 Nov 2018 08:40:23 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from FMSMGA003.fm.intel.com (fmsmga003.fm.intel.com [10.253.24.29])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 78D31580322;
	Wed, 28 Nov 2018 11:38:01 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by FMSMGA003-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 28 Nov 2018 11:38:01 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AZuuHnRDD77/D7I/eKYzSUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7/r8SwAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VDK/5KlpVRDokj?=
 =?us-ascii?q?8KOTA7/2/UhcNwgqVVrg+hqRJh34HUe5mVOfhlc6PBYd8XX3ZNU9xNWyFDBI63?=
 =?us-ascii?q?cosBD/AGPeZdt4TwukEOogW4BQaxHuzvzCJDiH333a013OQhEAfG3Bc9FN8Jq3?=
 =?us-ascii?q?vUtsv6NKEPXu+vyqnIzTTDb/xZ2Tf87ojIaQssof6LXbJ3fsrRzVcgGxnZgVWX?=
 =?us-ascii?q?rIzoJjWY3fkOvWiD9+dsS/6jhmo9pw1srDWj2N0ghpTKi44J0FzJ9Cd0zJ4rKd?=
 =?us-ascii?q?GkTEN3e92pHZtKuy2EKod6XtkuTmNntSs817YIo4S0fDIQx5Qi3xPfa+KIc4yP?=
 =?us-ascii?q?4h/7SuaRLil3hGh/dLK8mRmy606gxfP4VsWu11ZKtCVFnsHNtnALyRPT9tCKRu?=
 =?us-ascii?q?Vh8kqlwzqDyg7e5v9eLUwplqfXN4Qtz78ym5YLtETMBC72mEH4jK+McUUk//Cl?=
 =?us-ascii?q?6+DmYrXgu5+dOJZ4igLgPaQ0nMywH+A4PhEJX2mV/+Szyqfj8FbnQLVFkPI2iL?=
 =?us-ascii?q?PVsJPEKsQBoK62HQtV3pwk6xalADeqyM4YkmUfLFJZZBKHiJDkO1XPIPD7E/iz?=
 =?us-ascii?q?mVutkCpwyvDCP73hBIjNL3fZnLfge7Z991BTyA4pwd9D4JJUD6kLIOjvVU/pqN?=
 =?us-ascii?q?zYEhg5PhS0w+n9CdV9ypkRWWWVDq+ZLaPdq1mI5u00LumIZY8Vviv9Kvc/6/7v?=
 =?us-ascii?q?i385hUESfa2z0ZQLb3C4G+xsI1+Fbnr0ntcBDWAKsxI8TOztllKOSz1TZ3G0X6?=
 =?us-ascii?q?I64TE2E4amDYbFRoCwj72Nxia7HptKZm9YDlCAC2vnd4KBW/0UciKdPtdhkiAY?=
 =?us-ascii?q?VbimU4IuzwqutA/9y7pkNObU4DcXtZD42dhx5u3Tkwwy9DNuA8Sc1WGNU397nm?=
 =?us-ascii?q?cSSzAq26B/pFR3yk2f3qhgn/xYCdtT6utKUgggM57Q1eh6C9HoVQLHcdeEU1Km?=
 =?us-ascii?q?QtSgATEsQdM92d4OY0BhG9q8ihDPxTalA7gQl7aTHpw77rrc32TtJ8Z603vJyb?=
 =?us-ascii?q?Muj0c4TcdVNW2pnKh/9xPNCI7PlEmZk6WqdaEY3CPW8GeDzGyOvFxXUQJqUKXF?=
 =?us-ascii?q?W2wfaVXSrdjj+kzCSLquA6w9MgRd0c6CNrdKatrxgFpbXvjjJsrRb3ixm2iqAx?=
 =?us-ascii?q?aI3a2DbIzxdmUZ3SXdDlUEkg8J8XaHMwg+Gjmuo2bEADNyElLvZlvm8fNip3Oj?=
 =?us-ascii?q?Uk800waKYlV917q0/x4VguCcS/MT374epCctsTJ0HEy539LXDdqAqBFsfKFdYd?=
 =?us-ascii?q?M7/VdG2njVtw17Ppy8Ma9igkQSfBhwv0Przx93EJlPkdA2rHM2ywp/MbiX0Fdf?=
 =?us-ascii?q?eDKXw5/xOqfbJXLv/B+ycaHW3FLe0NGI+qoU7PQ4qlPjvBymF0Y48nVn1cVV3G?=
 =?us-ascii?q?WY5pnQEAUSVpfxWF4t9xdmv7HafjU954TM2HxsLKm4qCPN18goBesl0Bmgedhf?=
 =?us-ascii?q?PbiAFA/zFc0aGsevJPYrm1ivchILIuRS+LQoMMOhcvuMwLSrM/p4nDK6kWRH55?=
 =?us-ascii?q?hw0liN9yVgUOHIxYsKw/aC0guBSTj8llahvtnrlo9eYTEdA3SwyTLjBI5XfaBy?=
 =?us-ascii?q?eYcLCWGzI8y43Nl+hpjtW2JG+16nHV8JxMipeR+KZVznwQJQzVgXoWCgmSagzz?=
 =?us-ascii?q?10kislr6qF0CzV3uTicgEKOmpKRGlkkFftLpK4j9EcXEi0cQcpkAGp6lr9x6he?=
 =?us-ascii?q?vK5/NXXcQV9UfyjqKGFvSqmwuaCYY85M65Motj9bUP+mblCZSb79oh0a3D3lH2?=
 =?us-ascii?q?ZFwDA7djequoj2nhBgiWKdKmpzo2Tdec1q2Rjf49ncT+ZL3jUaXCl4lSXXBl+k?=
 =?us-ascii?q?Mtip59qUkI3PsuK/V2KnTZBTdSjrzYWdtCq0/2FqABu/n+ytld3jCwQ1zSj719?=
 =?us-ascii?q?xyXyXSsBn8epXr17i9Me9/fUlnHl7859B6GoFjiIQwgp4Q1GMehpWU+3oHjGjy?=
 =?us-ascii?q?Pc9a2aL4cHoCWzoLz8TJ7wji3U1pNmiJyJ7hVnWB3sthYMG3YmYX2iI+9c9GEq?=
 =?us-ascii?q?mV46JfnStpvFW4txnebuZnnjcS0vYu7H8ag+cUuAsi1CmdA7YSHVVGMizojRiH?=
 =?us-ascii?q?89e+rKBPbma1bbewzFZ+ncymDLyavgFcX3P5do0jHCBq6MV/LUnM0Gby6oz/fN?=
 =?us-ascii?q?nQbNQTtgCbkhvajuhVLo4xmeQOhSZ9JW39unglwfYhjRNyxZG6oJSHK2J18a2i?=
 =?us-ascii?q?GBFYMTn1Z94J9jHpkKZThcKW34GpHpV8FTQHRproTfS0ED0MsfTrLRqBEDo5qn?=
 =?us-ascii?q?2DA7rQARef6Ft6r3LIC52rNWuYJHwHwtV5XhWdOFZTgAMJXDU5g545EBqlxNf6?=
 =?us-ascii?q?fUd95zAR4EP4qxRWxuJpMRn/TnnQpAOyZjgoT5ifKQJc7hte6EfNLcye8uVzEj?=
 =?us-ascii?q?lY/52msQyNM3GbaB5ODW0TQUyEAFbjPra16NnE8uiYAPe+LvTUbbWPr+xeS+mH?=
 =?us-ascii?q?xZa13oR6+DaMM92FPmN+AP0jxkpDQXd5FtzZmzoRSiwXlCHNb8+BqBe/4C13qc?=
 =?us-ascii?q?+//+rxWALy/ouCEL9SMdRp+xCrjqaPLe+QhCBlKTlG0pMA32PHyL8a3FQKkSFh?=
 =?us-ascii?q?ayGtEagctS7KVK/fgLJXAAUBayxtNMpE9aY83ghWNM7fi9P10KN4j/EvB1dEU1?=
 =?us-ascii?q?zhht+mZcgQL26hM1PHAV6BNK6aKj3T38H3faS8RKVMjOVVsh28oyqUH1X/MTSD?=
 =?us-ascii?q?iTbpUQuiMeVNjCGdIRxft5uxchdrCWj/Ut3mbge3P8NwjT0z2bc0nG/FNXYAMT?=
 =?us-ascii?q?hgdENAtr2R4jlegvV6GmxB6GJqLOiEmymD6enYJY0bsf9qAiRyiuJb7242y7pT?=
 =?us-ascii?q?7CFYWvN1nDHeocJpo1GjwaGzzW9oShdBqTZjgIONoFVsPrjf+pBcWHHCuhUX4i?=
 =?us-ascii?q?HYCBkHvNBiDd7HtKdXxdzC0qn0LXMK9tnb58wSL8vZMsSKNDwmKxWtUCXUEQIF?=
 =?us-ascii?q?ZT2mL2fSgwpaiv7B2GeSq80QsJXqlJMIAp9aW1M0EOhSXk5/EdoOKZF3XzwrkL?=
 =?us-ascii?q?iApMEP4nW6oV/aQ8AM7cOPbe6bHfi6cGXRtrJDfRZdmb4=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AYAADG7f5bh0O0hNFjHQIFCAWBUggMA?=
 =?us-ascii?q?YNrJ4N5iBiMCIIhly4UgRADTCwTAYQ8AoMwIjQJDQEDAQEBAQEBAgETAQEBCA0?=
 =?us-ascii?q?JCCkjDII2IoJlAwMBAiAEGQEBNwEFCQEBJAImAgIDMQEFARwHEgWDHIICBZtjP?=
 =?us-ascii?q?IodcHwzgnYBAQWCRIRlCBJ5hmCEKxeBQD+BEYRdgVMCgSYEgzuCV4khhgV3UI8?=
 =?us-ascii?q?wCYIggxKLdAsYkRUsiEqPQzCBJWyBITMaI4M8gicXg0qKdB4zgQUBAYsWgk0BA?=
 =?us-ascii?q?Q?=
X-IPAS-Result: =?us-ascii?q?A0AYAADG7f5bh0O0hNFjHQIFCAWBUggMAYNrJ4N5iBiMCII?=
 =?us-ascii?q?hly4UgRADTCwTAYQ8AoMwIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2IoJlA?=
 =?us-ascii?q?wMBAiAEGQEBNwEFCQEBJAImAgIDMQEFARwHEgWDHIICBZtjPIodcHwzgnYBAQW?=
 =?us-ascii?q?CRIRlCBJ5hmCEKxeBQD+BEYRdgVMCgSYEgzuCV4khhgV3UI8wCYIggxKLdAsYk?=
 =?us-ascii?q?RUsiEqPQzCBJWyBITMaI4M8gicXg0qKdB4zgQUBAYsWgk0BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,291,1539673200"; 
   d="scan'208";a="53042000"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 28 Nov 2018 11:37:59 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729312AbeK2Gkk (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 29 Nov 2018 01:40:40 -0500
Received: from mail-ot1-f74.google.com ([209.85.210.74]:45579 "EHLO
        mail-ot1-f74.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1729291AbeK2Gki (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 29 Nov 2018 01:40:38 -0500
Received: by mail-ot1-f74.google.com with SMTP id s12so12385701otc.12
        for <linux-kernel@vger.kernel.org>; Wed, 28 Nov 2018 11:37:54 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=date:in-reply-to:message-id:mime-version:references:subject:from:to
         :cc;
        bh=kYyv/RTHzJjGNg9RbFN3NZsq45WeoGrJwFQsspAHU+g=;
        b=Ob6JecNpave3zhvIzALx2WdTG2Xf/wGlI/aOCikKVn7jzvpI2ltvh23barswRa5c14
         3tqzjK0a9Vpy6Zbhov5vaM+si1RPqBkT/9MgrerDKynQXSQzUxuznSJSHNPUNyHZT48H
         59hgN9IqUhaCcN9V18TPDmKbCQ5vEQqLm6tNYBGrgtT9a1KCVXvHLEazCzr/yUXaJttV
         cl7gzvJIN/tCmINTta3CLCiYXRylhaU6LSgdi+Lfvphl7XAdvF6sS19eKGA0Z2iVRRwz
         VOgxRJFZc/EFRhs7HF2PqZRVu9yzsTNA6j8cbGWZz5o4izuKO5PcRWTp5xKeBioj4jzC
         KBkQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:in-reply-to:message-id:mime-version
         :references:subject:from:to:cc;
        bh=kYyv/RTHzJjGNg9RbFN3NZsq45WeoGrJwFQsspAHU+g=;
        b=WfRwt6LfxQh3pWDbwpXxUrDiHzcoMiTvmf7Hg5Cp1XwPIPqSnZJKvlqRDZVHqSVoJa
         nSHUJDiFH+4oV0JQb3CegcQf7pf3HtmktXQQU3gtKZcU66tIlPEgFZyH9N+BWngn3+8J
         j+kMC7kaRhBGYdE2E9neRIJnsV2o9aSAOZhL6QnuZI8Mmk69rlwej1tZ3zwGvtAf5XM4
         C4Jaqm68QhkxA9+I2ZlFEZwgvKlPJR+lZhxipRmi7gtxVnJM/B1gLZV7s8J/Zz9lYUOj
         jzW4LYBqBQn0+2v25i7AkmcEbjvCx6o25G9bPUSp36+W6Oyu3fJCUnbDo2ZZOQVN9MWc
         Apdw==
X-Gm-Message-State: AA+aEWa1GtOepeenaYIoPooj3M2pNyjptdYhdlZkC04wzDrZqSWjGTP7
        0KBORvovaWo1ZleEKeo9RP3jsRB6V14TUDWCkAcUWQ==
X-Google-Smtp-Source: AFSGD/VmjDGXZv/Qf9wHBL015DQW6wWAWy/xIyPqNqjwxASmV1d+01uM7VvOaizuli4IdMjUSTMMhsj0NyLNeOs4RvhTsw==
X-Received: by 2002:aca:c255:: with SMTP id s82-v6mr4424965oif.50.1543433873527;
 Wed, 28 Nov 2018 11:37:53 -0800 (PST)
Date: Wed, 28 Nov 2018 11:36:21 -0800
In-Reply-To: <20181128193636.254378-1-brendanhiggins@google.com>
Message-Id: <20181128193636.254378-5-brendanhiggins@google.com>
Mime-Version: 1.0
References: <20181128193636.254378-1-brendanhiggins@google.com>
X-Mailer: git-send-email 2.20.0.rc0.387.gc7a69e6b6c-goog
Subject: [RFC v3 04/19] kunit: test: add test_stream a std::stream like logger
From: Brendan Higgins <brendanhiggins@google.com>
To: gregkh@linuxfoundation.org, keescook@google.com, mcgrof@kernel.org,
        shuah@kernel.org
Cc: joel@jms.id.au, mpe@ellerman.id.au, joe@perches.com, brakmo@fb.com,
        rostedt@goodmis.org, Tim.Bird@sony.com, khilman@baylibre.com,
        julia.lawall@lip6.fr, linux-kselftest@vger.kernel.org,
        kunit-dev@googlegroups.com, linux-kernel@vger.kernel.org,
        jdike@addtoit.com, richard@nod.at, linux-um@lists.infradead.org,
        daniel@ffwll.ch, dri-devel@lists.freedesktop.org, robh@kernel.org,
        dan.j.williams@intel.com, linux-nvdimm@lists.01.org,
        kieran.bingham@ideasonboard.com, frowand.list@gmail.com,
        knut.omang@oracle.com, Brendan Higgins <brendanhiggins@google.com>
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

A lot of the expectation and assertion infrastructure prints out fairly
complicated test failure messages, so add a C++ style log library for
for logging test results.

Signed-off-by: Brendan Higgins <brendanhiggins@google.com>
---
 include/kunit/kunit-stream.h |  50 ++++++++++++
 include/kunit/test.h         |   2 +
 kunit/Makefile               |   3 +-
 kunit/kunit-stream.c         | 153 +++++++++++++++++++++++++++++++++++
 kunit/test.c                 |   8 ++
 5 files changed, 215 insertions(+), 1 deletion(-)
 create mode 100644 include/kunit/kunit-stream.h
 create mode 100644 kunit/kunit-stream.c

diff --git a/include/kunit/kunit-stream.h b/include/kunit/kunit-stream.h
new file mode 100644
index 0000000000000..3b3119450be3f
--- /dev/null
+++ b/include/kunit/kunit-stream.h
@@ -0,0 +1,50 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * C++ stream style string formatter and printer used in KUnit for outputting
+ * KUnit messages.
+ *
+ * Copyright (C) 2018, Google LLC.
+ * Author: Brendan Higgins <brendanhiggins@google.com>
+ */
+
+#ifndef _KUNIT_KUNIT_STREAM_H
+#define _KUNIT_KUNIT_STREAM_H
+
+#include <linux/types.h>
+#include <kunit/string-stream.h>
+
+struct kunit;
+
+/**
+ * struct kunit_stream - a std::stream style string builder.
+ * @set_level: sets the level that this string should be printed at.
+ * @add: adds the formatted input to the internal buffer.
+ * @append: adds the contents of other to this.
+ * @commit: prints out the internal buffer to the user.
+ * @clear: clears the internal buffer.
+ *
+ * A std::stream style string builder. Allows messages to be built up and
+ * printed all at once.
+ */
+struct kunit_stream {
+	void (*set_level)(struct kunit_stream *this, const char *level);
+	void (*add)(struct kunit_stream *this, const char *fmt, ...);
+	void (*append)(struct kunit_stream *this, struct kunit_stream *other);
+	void (*commit)(struct kunit_stream *this);
+	void (*clear)(struct kunit_stream *this);
+	/* private: internal use only. */
+	struct kunit *test;
+	spinlock_t lock; /* Guards level. */
+	const char *level;
+	struct string_stream *internal_stream;
+};
+
+/**
+ * kunit_new_stream() - constructs a new &struct kunit_stream.
+ * @test: The test context object.
+ *
+ * Constructs a new test managed &struct kunit_stream.
+ */
+struct kunit_stream *kunit_new_stream(struct kunit *test);
+
+#endif /* _KUNIT_KUNIT_STREAM_H */
diff --git a/include/kunit/test.h b/include/kunit/test.h
index 583840e24ffda..ea424095e4fb4 100644
--- a/include/kunit/test.h
+++ b/include/kunit/test.h
@@ -11,6 +11,7 @@
 
 #include <linux/types.h>
 #include <linux/slab.h>
+#include <kunit/kunit-stream.h>
 
 struct kunit_resource;
 
@@ -171,6 +172,7 @@ struct kunit {
 	void (*vprintk)(const struct kunit *test,
 			const char *level,
 			struct va_format *vaf);
+	void (*fail)(struct kunit *test, struct kunit_stream *stream);
 };
 
 int kunit_init_test(struct kunit *test, const char *name);
diff --git a/kunit/Makefile b/kunit/Makefile
index 275b565a0e81f..6ddc622ee6b1c 100644
--- a/kunit/Makefile
+++ b/kunit/Makefile
@@ -1,2 +1,3 @@
 obj-$(CONFIG_KUNIT) +=			test.o \
-					string-stream.o
+					string-stream.o \
+					kunit-stream.o
diff --git a/kunit/kunit-stream.c b/kunit/kunit-stream.c
new file mode 100644
index 0000000000000..70f5182245e0b
--- /dev/null
+++ b/kunit/kunit-stream.c
@@ -0,0 +1,153 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * C++ stream style string formatter and printer used in KUnit for outputting
+ * KUnit messages.
+ *
+ * Copyright (C) 2018, Google LLC.
+ * Author: Brendan Higgins <brendanhiggins@google.com>
+ */
+
+#include <kunit/test.h>
+#include <kunit/kunit-stream.h>
+#include <kunit/string-stream.h>
+
+static const char *kunit_stream_get_level(struct kunit_stream *this)
+{
+	unsigned long flags;
+	const char *level;
+
+	spin_lock_irqsave(&this->lock, flags);
+	level = this->level;
+	spin_unlock_irqrestore(&this->lock, flags);
+
+	return level;
+}
+
+static void kunit_stream_set_level(struct kunit_stream *this, const char *level)
+{
+	unsigned long flags;
+
+	spin_lock_irqsave(&this->lock, flags);
+	this->level = level;
+	spin_unlock_irqrestore(&this->lock, flags);
+}
+
+static void kunit_stream_add(struct kunit_stream *this, const char *fmt, ...)
+{
+	va_list args;
+	struct string_stream *stream = this->internal_stream;
+
+	va_start(args, fmt);
+	if (stream->vadd(stream, fmt, args) < 0)
+		kunit_err(this->test, "Failed to allocate fragment: %s", fmt);
+
+	va_end(args);
+}
+
+static void kunit_stream_append(struct kunit_stream *this,
+				struct kunit_stream *other)
+{
+	struct string_stream *other_stream = other->internal_stream;
+	const char *other_content;
+
+	other_content = other_stream->get_string(other_stream);
+
+	if (!other_content) {
+		kunit_err(this->test,
+			  "Failed to get string from second argument for appending.");
+		return;
+	}
+
+	this->add(this, other_content);
+}
+
+static void kunit_stream_clear(struct kunit_stream *this)
+{
+	this->internal_stream->clear(this->internal_stream);
+}
+
+static void kunit_stream_commit(struct kunit_stream *this)
+{
+	struct string_stream *stream = this->internal_stream;
+	struct string_stream_fragment *fragment;
+	const char *level;
+	char *buf;
+
+	level = kunit_stream_get_level(this);
+	if (!level) {
+		kunit_err(this->test,
+			  "Stream was committed without a specified log level.");
+		level = KERN_ERR;
+		this->set_level(this, level);
+	}
+
+	buf = stream->get_string(stream);
+	if (!buf) {
+		kunit_err(this->test,
+			 "Could not allocate buffer, dumping stream:");
+		list_for_each_entry(fragment, &stream->fragments, node) {
+			kunit_err(this->test, fragment->fragment);
+		}
+		goto cleanup;
+	}
+
+	kunit_printk(level, this->test, buf);
+	kfree(buf);
+
+cleanup:
+	this->clear(this);
+}
+
+static int kunit_stream_init(struct kunit_resource *res, void *context)
+{
+	struct kunit *test = context;
+	struct kunit_stream *stream;
+
+	stream = kzalloc(sizeof(*stream), GFP_KERNEL);
+	if (!stream)
+		return -ENOMEM;
+	res->allocation = stream;
+	stream->test = test;
+	spin_lock_init(&stream->lock);
+	stream->internal_stream = new_string_stream();
+
+	if (!stream->internal_stream)
+		return -ENOMEM;
+
+	stream->set_level = kunit_stream_set_level;
+	stream->add = kunit_stream_add;
+	stream->append = kunit_stream_append;
+	stream->commit = kunit_stream_commit;
+	stream->clear = kunit_stream_clear;
+
+	return 0;
+}
+
+static void kunit_stream_free(struct kunit_resource *res)
+{
+	struct kunit_stream *stream = res->allocation;
+
+	if (!stream->internal_stream->is_empty(stream->internal_stream)) {
+		kunit_err(stream->test,
+			 "End of test case reached with uncommitted stream entries.");
+		stream->commit(stream);
+	}
+
+	destroy_string_stream(stream->internal_stream);
+	kfree(stream);
+}
+
+struct kunit_stream *kunit_new_stream(struct kunit *test)
+{
+	struct kunit_resource *res;
+
+	res = kunit_alloc_resource(test,
+				   kunit_stream_init,
+				   kunit_stream_free,
+				   test);
+
+	if (res)
+		return res->allocation;
+	else
+		return NULL;
+}
diff --git a/kunit/test.c b/kunit/test.c
index fb1a786e4c94f..abeb939dc7fa2 100644
--- a/kunit/test.c
+++ b/kunit/test.c
@@ -63,12 +63,20 @@ static void kunit_vprintk(const struct kunit *test,
 			  "kunit %s: %pV", test->name, vaf);
 }
 
+static void kunit_fail(struct kunit *test, struct kunit_stream *stream)
+{
+	kunit_set_success(test, false);
+	stream->set_level(stream, KERN_ERR);
+	stream->commit(stream);
+}
+
 int kunit_init_test(struct kunit *test, const char *name)
 {
 	spin_lock_init(&test->lock);
 	INIT_LIST_HEAD(&test->resources);
 	test->name = name;
 	test->vprintk = kunit_vprintk;
+	test->fail = kunit_fail;
 
 	return 0;
 }
-- 
2.20.0.rc0.387.gc7a69e6b6c-goog

