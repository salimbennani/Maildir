Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 27 Nov 2018 12:18:26 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id C597A5802E4;
	Mon, 26 Nov 2018 17:41:56 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 26 Nov 2018 17:41:56 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A7WjP5xEa6pFkhmhdvvbAUJ1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75ocy9bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJWCNBDIGz?=
 =?us-ascii?q?YYsBAeQCIOhWsZXyp0AWrRa8HgSsGP/jxyVUinPqwaE30eIsGhzG0gw6GNIOtW?=
 =?us-ascii?q?zZocjvNKgMV+C60bPHzTPeZP1U2Df954fIchEnofGXQLl9dtHeyVMxGAPDk1qf?=
 =?us-ascii?q?s4rlPzOU1uQCvGib7uxgVfm0hm4orAFxpTevxsMyhYXTmo0VzVXE+Dx/zY0oK9?=
 =?us-ascii?q?O4T0t7bsSlEJtWryyaOIp2Qt8iQ2F1oyk20KEJuZm+fCQSz5Qn3QTQZOCDc4eW?=
 =?us-ascii?q?+B7sSOGRITJgiHJhebK/gQuy8Eeuyu37S8m01ktFoTBZktnNsXAN0Qbf6s+dSv?=
 =?us-ascii?q?ty5kuh3TiO1wbJ5uFCP080ibLXK4Mgwr43jJYTt0PDEynrk0v1lK+bblso9vSs?=
 =?us-ascii?q?5uj9f7nrqIGQO5Vphgz9LqgigM2yDOYgPgQQQ2SW/f6w2b7j8EHjXrlGk+E6nr?=
 =?us-ascii?q?PYvZ3ZI8kQu7S3DBVP0ok57hayFzem38ocnXkANF9FZh2HgJbzO13UI/D3E+2/?=
 =?us-ascii?q?g1Kynzdv3fzGOafhAprVInjClrfuY6p95lZCxAYvyd1T/Y9YB78fLP7pR0P8t8?=
 =?us-ascii?q?DUAgU4PgG22+rnDc9y1oIaWWKBGK+ZN6bSvEeM5uIuJemMeYAUtC/+K/c7/f7u?=
 =?us-ascii?q?i2E2mVsEcamu05oXbm63Hu59LkWHbnrjnM0BHX0JvgUgVuzqjkONUTpJa3a1Ra?=
 =?us-ascii?q?I86Sk3CJi6AofbWoCtnLuB0T+/Hp1XZWBJFEqAEHj1d4ifX/cMaSSSItJukzAe?=
 =?us-ascii?q?VLihTZMh2g+qtAPg17VnKe/U8DUCtZ3/zNh1+/HTlRYq+Dx0Fcud0n2NQHtznm?=
 =?us-ascii?q?8SRz82wbpwoUpyylqY1ah4gvpYFcFc5v9TUwc6M4LcwPJ+C9zoRg3BedKJQk68?=
 =?us-ascii?q?Qtq6GTExUs4xw9gWbkZ/HNWtkArP3ymtA78TkbyLA4c58qbd33j3OsZ8xGzK1K?=
 =?us-ascii?q?gnj1k6XMRPMXeqibJ49wjWH4TJiVmWl762daQA2y7A7H2MzXGOvEFfUw58S7/F?=
 =?us-ascii?q?UmodZkbNqdT550XCT6KhCLg9MwtBz9KCJbVOatHzkVpGQ/LjMszEY22tg2ewGQ?=
 =?us-ascii?q?qIxrSUYYrpYWod2j/RCEwFkw8J+3aGOhMzBiOgo2LYETxvGkjjY0Lq8elitny7?=
 =?us-ascii?q?SlU4wB2Nb01kz7C14AIaheSAS/MP2bIJoDoupC9qHFmjxd7WC8CPpwx6fKpCZ9?=
 =?us-ascii?q?Mx51NH1WHctwx5JZGgK6FihlgDcwV4pU/u1hN3Cplensgutn8l0A1yKaeA2lNb?=
 =?us-ascii?q?azyYxYzwOqHQKmTq4R+gcbDW1U/E3NaW4KgP7u84pEvlvAyyEkoi8nNn08Ra0n?=
 =?us-ascii?q?eG55XKChYSXoz1Ukot6xd6oLTaaDEn54zIzX1sLbW0sjja1tI1BeslzxGgf8tf?=
 =?us-ascii?q?MKKEDgPyD9cWB8+0KOwumlipaB0EMftW9K41OcOmavSH1LSqPOZmgDKpk2BH7J?=
 =?us-ascii?q?ph3UKL8ip2UvTI0Iodw/GEwguHUC/xg02lss/ploFLezETEnCkxij5GYFefKty?=
 =?us-ascii?q?fYUMCWewOMC3wtR+h5jwW39X7lKjBlUG2NO3dhqWdVDywQpQ1UEPq3y9hSS41y?=
 =?us-ascii?q?B0ky0urqeH3C3O3v7uewYdNm9KRGltl1HsIYevgtAeXUioaRUplRS/6Ub7wahb?=
 =?us-ascii?q?uLpwL23JTUhUeCj2KnloUrGsubqaf85P9JQovD1NUOS9fV+VUKT9rAYd0y/5GW?=
 =?us-ascii?q?tR2io7dzCztprlhRN6jH+SI2hprHref8F93hPf5N3aRf5M0TsKXih4iT/LBlei?=
 =?us-ascii?q?O9ml58mbl5DGsuqmTWKuSoVTcTX3zYOHrCa65WxqDQe/nvypgd3nDA463DT/19?=
 =?us-ascii?q?lrUyXIsRn9bpPq16S8LeJoYE1oCEXg5Mp9H4F0ipEwi40I2XgGmpWV+mIKkWXp?=
 =?us-ascii?q?PtVB2qL+b30NSSQQw9HP4wjl20xjLnSXyIL/TXidxsphZ9+nYmIZwC497sZKCL?=
 =?us-ascii?q?uK47xAhyd6vl24rQfJa/hngjgd0ecu6GIdg+wRuAsi1CKdDqoQHUlZOyzhjBCI?=
 =?us-ascii?q?79G4rKVKa2eja7mw1Exind+/CLGOuB1TWHH8ep06By9/8t1/ME7Q0H308ozke8?=
 =?us-ascii?q?PfbdMJuh2UjhfPle5VKJ0qm/oOhCpnP3/9vHI/x+46ixxuwY+1vIydJ2px+6K5?=
 =?us-ascii?q?BwZSNifpaMML5jHtkaFek96T34CuHZVuAC8HXZX2QvKzDDIdq+7nOB2QHz0mpX?=
 =?us-ascii?q?eWAr7fHQ6Z6Ed7oHPDCZGrN3eLJHYHydVuXgWSJEtagAoMRjU1goY5Fhy2xMzm?=
 =?us-ascii?q?aEp5+jcR5lviphpN0O1oMQT/UnzEpAepcTo0TJmfLBxL7gBN/UvVMMqe7v5tEC?=
 =?us-ascii?q?Fc5JGusAuNKmmDbQRSEW4JQlCEB0zkPrS2/tbP6e+YBu6jL/fUZbWOtPdTV/OJ?=
 =?us-ascii?q?xZKpz4tn8CyANsSJPnl+EfI73lBPUmx+G8Tcgz8PUTAYlzrRb86Hoxex4i93od?=
 =?us-ascii?q?q68Pv1QwLj/5ePB6FRMdVy+BC2nKGDOPSLhCtiLTZY15UMxWLHybQF3V4SjT1u?=
 =?us-ascii?q?eCepEbgaqSHNS6fQkLdNDxEHcyNzKNdI76Uk0whNPs7bl8r11qNigf4zEVtFTl?=
 =?us-ascii?q?vhmsemZcERJ2G9NVXHBFuENbicJD3Lxd33br24SbFKkOpUsBiwsy6BE0D/JjSD?=
 =?us-ascii?q?iyXpVxe3POFMki6bPR9euIK8chp3CmjjVtXmahKlP99tkD022qY5hnfLNW4aLD?=
 =?us-ascii?q?h9fFlBrryW7SNEnPp/H3ZN4WZiLemBgyyZ9fXXKo4Ksft3BSR5j/hV4GkhxLtP?=
 =?us-ascii?q?8i5FROZ5mC/TrtN1p1Gmk++PyidoURZUqzZLgp6LsltmOanD6pZAXnPE9goX7W?=
 =?us-ascii?q?qMExQKu8dlCtr3tqBMy9jPkbj/JytY/93I/csTGc7UJdmDMHogNxrpBTHVABEE?=
 =?us-ascii?q?TT6tKWHQmUhdnOuO+X2Sq5gwsoLsl4YWSr9HSFw1EesXC0R/E9wEJZd3XzUknq?=
 =?us-ascii?q?aajc4I/3W+qhbRSd5evpDGUPKSHPruJCyYjblCexsH37f4IZ4POY383kwxImV9?=
 =?us-ascii?q?yafMBlaYetVEpCIpOgwyvVkL9313SGIb3FjsYQegpnQUEKjnsAQxj15Ue+kr+D?=
 =?us-ascii?q?7qq3c2KVXLojB4xEMrlNPpiDaRcTH+LaGrdY5RDCXwug46NZatEFU9VhG7gUEx?=
 =?us-ascii?q?bGSMfLlWlbY1MDkz0AI=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BAAAC0oPxbh0O0hNFjFgYBAQEEAQEHB?=
 =?us-ascii?q?AEBgVQEAQELAYJpgQIng3mTbII9FJM3hRUDTCwPBAGEPAKEJSI3Bg0BAwEBAQE?=
 =?us-ascii?q?BAQIBEwEBAQgNCQgpIwyCNiQBgmEBAQEBAQEBAQIgHQEBNwEEAQkBAQoLDQICJ?=
 =?us-ascii?q?gICAx8SAQUBHAYTBQ+DDQFBgTgIBQqaHDyKHXCBL4J2AQEFgTABCwEKDysDhSQ?=
 =?us-ascii?q?IEnmKfheBQD+DJUk1gjZMDgsBAQEBhGOCV48bd490CYIggxKBSoozGIImjmKNG?=
 =?us-ascii?q?CyKXjCBO4F3MxojgQEGgjUJFoF8NYM4hFkYI4VfHjMBEnIBAY0WAQE?=
X-IPAS-Result: =?us-ascii?q?A0BAAAC0oPxbh0O0hNFjFgYBAQEEAQEHBAEBgVQEAQELAYJ?=
 =?us-ascii?q?pgQIng3mTbII9FJM3hRUDTCwPBAGEPAKEJSI3Bg0BAwEBAQEBAQIBEwEBAQgNC?=
 =?us-ascii?q?QgpIwyCNiQBgmEBAQEBAQEBAQIgHQEBNwEEAQkBAQoLDQICJgICAx8SAQUBHAY?=
 =?us-ascii?q?TBQ+DDQFBgTgIBQqaHDyKHXCBL4J2AQEFgTABCwEKDysDhSQIEnmKfheBQD+DJ?=
 =?us-ascii?q?Uk1gjZMDgsBAQEBhGOCV48bd490CYIggxKBSoozGIImjmKNGCyKXjCBO4F3Mxo?=
 =?us-ascii?q?jgQEGgjUJFoF8NYM4hFkYI4VfHjMBEnIBAY0WAQE?=
X-IronPort-AV: E=Sophos;i="5.56,284,1539673200"; 
   d="scan'208";a="139675452"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 26 Nov 2018 17:41:36 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727953AbeK0Mhl (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 27 Nov 2018 07:37:41 -0500
Received: from mail-ot1-f68.google.com ([209.85.210.68]:39288 "EHLO
        mail-ot1-f68.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727523AbeK0Mhk (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 27 Nov 2018 07:37:40 -0500
Received: by mail-ot1-f68.google.com with SMTP id g27so18645429oth.6
        for <linux-kernel@vger.kernel.org>; Mon, 26 Nov 2018 17:41:31 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=o5RnrTMKKxcHKxat3En3dRHQKj3rXNQfdF6ztUbQ3rI=;
        b=h/yvZ/odo+70dB7p2OPAIq6ORBwji0oRNm3DabapKWkGWAQHNVlYlMcvBZr9hOoXn2
         7ZtNzcyByoxsciqMDy/5BBSYp0dYBnix90+HhDvUsVTNFUSmjK9dtCYX3tkhzU1z/kuP
         hmz9Gsp0VpFdmbTyRolI1CWPieDsctbbTNeYfMm37D/QGbK9EE2HHbnm3yeXOUUG37kT
         UTinrtTR0W5QfhujxejwGyh8d74xgaMmlk1TaB/vNg5nLkhh8QIeoqPJ5ld78JH4YUB6
         Hcy9aRjXhQmOxY8S2yCjLGZ1q70HTpTEqJhK1+Oh0SZjcKWHfUp3DfCz0TJCbfNHgnNP
         YI6g==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=o5RnrTMKKxcHKxat3En3dRHQKj3rXNQfdF6ztUbQ3rI=;
        b=WLO1vg+jGK+9W0V3HwZfRHu48Q+MU+m/7X6DvKFSTLxp7DAGCkpNS9BA/2kt+kGLwl
         ptf3jPxkf889+a5R/LD+Dq9OQjf7t7384UxtjtbFmzf6jMjmr4TbY4QXHmeWXHasWqpL
         HD6X66oE6kdRk8llr7iccq7HQ8w+4Tb2a8Hm8YrLznTKDXmIpSjNOnxRl4GShmxRlV1B
         vJnjdukl7qx2F3cAbI3ptzZNw5CArUQQxCqSdJ3/mbTIX2D/sCVH+zSYuy9pKgs3TJwp
         xVUA1iqtIkssUzkMXOq02VsLg1q2O4SdU55CtR64iYxkVlDuEzC5o12RUHxpOsHbCCty
         ZrqQ==
X-Gm-Message-State: AA+aEWb/HQ4oiyGQmA01m2ll0pGPC3Y19TRjqAjTyyoP77Jowq0urFU0
        /894W6b9oBVHAdW/JDEehtT6rLixRkIs5z9fKY+E7g==
X-Google-Smtp-Source: AFSGD/VI114OAvjTxXpV72u+CNG5XLRtY7PaIBQBQmMwXtUb8jVPzdWoResMHdR460ML8ZkPPwBW1HmuoflURVhOTqY=
X-Received: by 2002:a9d:65c8:: with SMTP id z8mr17227030oth.338.1543282890976;
 Mon, 26 Nov 2018 17:41:30 -0800 (PST)
MIME-Version: 1.0
References: <20181023235750.103146-1-brendanhiggins@google.com> <1543036529.4680.655.camel@oracle.com>
In-Reply-To: <1543036529.4680.655.camel@oracle.com>
From: Brendan Higgins <brendanhiggins@google.com>
Date: Mon, 26 Nov 2018 17:41:19 -0800
Message-ID: <CAFd5g45oPSp870hJLDSHiMfU7Mh-EvpYcFdAaOQxecXNde5PSw@mail.gmail.com>
Subject: Re: [RFC v2 00/14] kunit: introduce KUnit, the Linux kernel unit
 testing framework
To: Knut Omang <knut.omang@oracle.com>
Cc: Greg KH <gregkh@linuxfoundation.org>,
        Kees Cook <keescook@google.com>, mcgrof@kernel.org,
        shuah@kernel.org, brakmo@fb.com, richard@nod.at,
        dri-devel@lists.freedesktop.org, linux-nvdimm@lists.01.org,
        mpe@ellerman.id.au, Tim.Bird@sony.com,
        linux-um@lists.infradead.org,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>,
        rostedt@goodmis.org, kieran.bingham@ideasonboard.com,
        Julia Lawall <julia.lawall@lip6.fr>,
        Joel Stanley <joel@jms.id.au>, linux-kselftest@vger.kernel.org,
        khilman@baylibre.com, joe@perches.com, dan.j.williams@intel.com,
        jdike@addtoit.com, kunit-dev@googlegroups.com,
        hidenori.yamaji@sony.com, alan.maguire@oracle.com
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Fri, Nov 23, 2018 at 9:15 PM Knut Omang <knut.omang@oracle.com> wrote:
>
> On Tue, 2018-10-23 at 16:57 -0700, Brendan Higgins wrote:
<snip>
>
> Brendan, I regret you weren't at this year's testing and fuzzing workshop at
> LPC last week so we could have continued our discussions from last year there!

Likewise! Unfortunately, I could not make it. So it goes.

>
> I hope we can work on this for a while longer before anything gets merged.
> Maybe it can be topic for a longer session in a future test related workshop?

I don't see why we cannot just discuss it here as we are already
doing. Besides, you are mostly interested in out of tree testing,
right? I don't see how this precludes anything that you are trying to
do with KTF.

I think the best way to develop something like what I am trying to do
with KUnit is gradually, in tree, and with the active input and
participation of the Linux kernel community.

>
> Links to more info about KTF:
> ------
> Git repo: https://github.com/oracle/ktf
> Formatted docs: http://heim.ifi.uio.no/~knuto/ktf/
>
> LWN mention from my presentation at LPC'17: https://lwn.net/Articles/735034/
> Oracle blog post: https://blogs.oracle.com/linux/oracles-new-kernel-test-framework-for-linux-v2
> OSS'18 presentation slides: https://events.linuxfoundation.org/wp-content/uploads/2017/12/Test-Driven-Kernel-Development-Knut-Omang-Oracle.pdf
>
> In the documentation (see http://heim.ifi.uio.no/~knuto/ktf/introduction.html)
> we present some more motivation for choices made with KTF.
> As described in that introduction, we believe in a more pragmatic approach
> to unit testing for the kernel than the classical "mock everything" approach,
> except for typical heavily algorithmic components that has interfaces simple to mock,
> such as container implementations, or components like page table traversal
> algorithms or memory allocators, where the benefit of being able to "listen"
> on the mock interfaces needed pays handsomely off.

I am not advocating that we mock everything. Using as much real code
dependencies as possible for code under test is a pretty common
position, and one which I adhere to myself.

>
> We also used strategies to compile kernel code in user mode,
> for parts of the code which seemed easy enough to mock interfaces for.
> I also looked at UML back then, but dismissed it in favor of the
> more lightweight approach of just compiling the code under test
> directly in user mode, with a minimal partly hand crafted, flat mock layer.

Is this new? When I tried your code out, I had to install the kernel
objects into my host kernel. Indeed, your documentation references
having to install kernel modules on the host:
http://heim.ifi.uio.no/~knuto/ktf/installation.html

>
> > KUnit is heavily inspired by JUnit, Python's unittest.mock, and
> > Googletest/Googlemock for C++. KUnit provides facilities for defining
> > unit test cases, grouping related test cases into test suites, providing
> > common infrastructure for running tests, mocking, spying, and much more.
>
> I am curious, with the intention of only running in user mode anyway,

I made it possible to "port" KUnit to other architectures.
Nevertheless, I believe all unit tests should be able to run without
depending on hardware or some special test harness. If I see a unit
test, I should not need to know anything about it just to run it.
Since there is no way to have all possible hardware configurations a
priori, all tests must be able to be run in a place that doesn't
depend in hardware; hence they should all be runnable as just normal
plane old user space programs with no dependency on a host kernel or
host hardware.

> why not try to build upon Googletest/Googlemock (or a similar C unit
> test framework if C is desired), instead of "reinventing"
> specific kernel macros for the tests?

I would love to reuse Googletest/Googlemock if it were possible; I
have used it a lot on other projects that I have worked on and think
it is great, but I need something I can check into the Linux kernel;
this requirement rules out Googletest/Googlemock since it depends on
C++. There are existing frameworks for C, true, but we then need to
check that into the Linux kernel or have the kernel depend on that; to
me that seemed like a lot more work than just reimplementing what we
need, which isn't much. Most of the hard parts are specific to the
kernel anyway.

>
> > A unit test is supposed to test a single unit of code in isolation,
> > hence the name. There should be no dependencies outside the control of
> > the test; this means no external dependencies, which makes tests orders
> > of magnitudes faster. Likewise, since there are no external dependencies,
> > there are no hoops to jump through to run the tests. Additionally, this
> > makes unit tests deterministic: a failing unit test always indicates a
> > problem. Finally, because unit tests necessarily have finer granularity,
> > they are able to test all code paths easily solving the classic problem
> > of difficulty in exercising error handling code.
>
> I think it is clearly a trade-off here: Tests run in an isolated, mocked
> environment are subject to fewer external components. But the more complex
> the mock environment gets, the more likely it also is to be a source of errors,
> nondeterminism and capacity limits itself, also the mock code would typically be
> less well tested than the mocked parts of the kernel, so it is by no means any
> silver bullet, precise testing with a real kernel on real hardware is still
> often necessary and desired.

I think you are misunderstand me. By isolation, I just mean no code
under test should depend on anything outside of the control of the
test environment. As I mention above, reusing real code for test
dependencies is highly encouraged.

As for running against hardware, yes, we need tests for that too, but
that falls under integration testing; it is possible to use what I
have here as a basis for that, but for right now, I just want to focus
on the problem of unit testing: I think this patchset is large enough
as it is.

>
> If the code under test is fairly standalone and complex enough, building a mock
> environment for it and test it independently may be worth it, but pragmatically,
> if the same functionality can be relatively easily exercised within the kernel,
> that would be my first choice.
>
> I like to think about all sorts of testing and assertion making as adding more
> redundancy. When errors surface you can never be sure whether it is a problem
> with the test, the test framework, the environment, or an actual error, and
> all places have to be fixed before the test can pass.

Yep, I totally agree, but this is why I think test isolation is so
important. If one test, or one piece of code is running that doesn't
need to be, it makes debugging tests that much more complicated.

Cheers!
