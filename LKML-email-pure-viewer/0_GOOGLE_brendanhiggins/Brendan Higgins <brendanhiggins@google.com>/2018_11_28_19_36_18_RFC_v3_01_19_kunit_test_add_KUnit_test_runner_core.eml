Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 29 Nov 2018 08:40:33 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 855005803ED;
	Wed, 28 Nov 2018 11:41:26 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga001-1.jf.intel.com with ESMTP; 28 Nov 2018 11:41:26 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A58M96xzIjPe6y6TXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e4fKvad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7S60/Vza/4KdxUBLmhi?=
 =?us-ascii?q?UIOT02/2HZjcJ+kaJVrgy9qBxk247ZYpqYNOZicq7HYd8XX3ZNU8RXWidcAo28?=
 =?us-ascii?q?dYwPD+8ZMOtFtYnyuV0OogakCgmqGejhyD5IhnD53a071eQhChzN0Qs7ENIUrn?=
 =?us-ascii?q?vUqsj6O70UUeC1zanIwjrDb/JQ2Tfm84XIfRchofaDXbJ0b8Xd01UgFwTAjliJ?=
 =?us-ascii?q?r4HuIjCb1vwVvmSF8+ZtUfijh3Mppg1vuDSj28QhhpXTio8UyF3I7Tt1zJoxKN?=
 =?us-ascii?q?GiS0N2YcSoHIVOuy2ELYd6XN8uT39utS0n0LMJo4S7czIPyJk/xx7QdfiHc4+Q?=
 =?us-ascii?q?7xL9W+aePy14iGhmeL2hnRay91avyunmWsmzylZKoTJJktjKtn8Tyxze8taLRu?=
 =?us-ascii?q?d580u7xDqC2R7f5vtZLU03iabXMZ8sz7wompoWq0vDHyv2mEvsjK+Rc0Up4uyo?=
 =?us-ascii?q?6+XhYrX7qZ6QLox0hR/kMqQohMO/Bf00Mg8AXmid5+u8zqbu/VP2QLpUlP06iK?=
 =?us-ascii?q?rZv47AJcQduKG5BxVZ0oE56xawFzumysgXnWEbLFJZfxKKl4zpO1DNIP/mF/u+?=
 =?us-ascii?q?jEmsnSxvx/DHOL3hH5rMImLCkLfnYbZy9UpcxBAvwtBY4pJeEqsBL+7rWk/tqN?=
 =?us-ascii?q?zYCQc0MwyuzObmFNVyzIQeVXiPAq+EKqzSt1CI6/krI+mNYo8VpTn8J+Ik5/7o?=
 =?us-ascii?q?kX82h1sdcbO10psQbXCyBu5mLFmBYXrwntcBFn8Hvgg5TOP0klGCUjlTZ3C0X6?=
 =?us-ascii?q?I7/Tw7DIOmDYHeRoGimrCB3SG7HoFIaWBCEFyDDXDod4CcUfcWdC2SOtNhkiAD?=
 =?us-ascii?q?VbW5UYAhzhGutAj5y7Z9NOrb4C8YuInn1Nh04e3TiB4z+SZ1D8Sbz2GCUWV0kn?=
 =?us-ascii?q?kUSD8x2aB1uVZ9xUub0ahkn/xYEsRe5/BTXQc8L5Lcy+16BMr0WgLOZdqJTFem?=
 =?us-ascii?q?QtO7ATA+VN4xwtkOY1pjFNWmlBzMwy2qA7oNnbyRGJM06r7c32T2J8tl1nnJzr?=
 =?us-ascii?q?chgEc8TstPL2KmgLV/+BbVB4LOl0WZlKOqdaAH0S7J9WeDy3eOvU5CXA5xV6XF?=
 =?us-ascii?q?QW4QZk/Modvl4UPCSqekCa47PQtZ1c6CNqxKZ8X0glpcWvfsJs7SY2KrlGe2Hh?=
 =?us-ascii?q?aH2LWMYZHue2Uc2iXdFUcFnxoS/XaAKQgxGCOhr3jCAzxpEFLle1ns/vVmqHOn?=
 =?us-ascii?q?Uk80yBmHb1Fg17qw/R4VmfycSvMJ0rIYoishrC90HFK839LQBNqNvA5hfKRaYd?=
 =?us-ascii?q?Mg71ZLz2PZtwphPpO+K6BunEIRcwNyv0n2zRV4Fp1AkdQ2rHMt1Ad9M6aY301O?=
 =?us-ascii?q?djyG3ZH8IKbYKnTv8x+1ba7W2Vbe0MiN96cL6fQ4rUjjvQ6zGkoj9XVnz8da03?=
 =?us-ascii?q?+G6prWCwoSVIr7Ulwr+Bhiu7Hafi496pvU1H1xK6W7riXO2tMpBOQ/zBagcMxS?=
 =?us-ascii?q?MKeFFA/0Ds0bCNKiKO0sm1i1cB0EOPpe+7IzP8Ojb/GGwrKkPP58nDK6imRK+J?=
 =?us-ascii?q?p90kOQ+CVmUO7HwpEFz+ue3gSZTTf8jU6tvdztloBAeD4dAHC/yS/iBINKYq1y?=
 =?us-ascii?q?fIALCXqhIsGtx9V+gYLtVGBc9FK5G1wG38qpcwKIb1PhxQ1QyVgXoXu/lCq4zj?=
 =?us-ascii?q?x4iTEoorCE3CzTxeTvbx4HOm9NRGl/glbgO4m0j9YGXEe2awgljgeq5UH/x6JD?=
 =?us-ascii?q?vqRwM3HTQVtUfyjxN2xiULG/tqCBY85M75Mkqz5XX/6/YVCZS779pQUV0yX4Em?=
 =?us-ascii?q?taxTA7cSyqu5rjkxx7jmKdMGh8rH7Ddc5swhff4cTWReRN0ToeWCl4lT7XC0C8?=
 =?us-ascii?q?Ptaz+tWYjZXDsuG4V2+6Up1TcC/rzZ6PtSeh5G1qBwG/kO63mtH9DQc61ir73c?=
 =?us-ascii?q?FwVSrUtBb8fpXr16OiPOJkZEZoBUXw68pnGo5klIswi4od2XwbhpWT4HoGnn3/?=
 =?us-ascii?q?MdRd2aLicnUNQSQHzMLS4AjgwEdjNG6Gx5rlVnWBxctsf9y6YmIV2i0n9cxLBr?=
 =?us-ascii?q?mb7KdYnSRruFq3thzeYeJynjoGzfsu6Xgag/wGuQY3zyWdBKwSEldcPSD2ixuI?=
 =?us-ascii?q?6NW+pr1NZGmzabiwyFZ+nde5AbGepQFcXWz1e5Y4Ei9288V/K0nM0Hzo54Hged?=
 =?us-ascii?q?nQa88TtxKOnxfBiehVNIw+lv4QiSV7PmL9uGUvy/Qnghx2wZG6oI+HJn12862j?=
 =?us-ascii?q?BR5YMiD1a9kX+jHwlqtemseW34ayHpRuADkLXZ3oTe62HzIWr/joKwGOEDgkoH?=
 =?us-ascii?q?eBBbXfBROf6Fthr3/XEZCkLXSXK2cCzdl4WBmRPk9fgB0XXDUnmJ42DBuqydfl?=
 =?us-ascii?q?cEd44DAR+1H5pgFNyuJuKxnwTGPfqB20ZTczTZiVNABW4R1a50fJLcye6fp+Hi?=
 =?us-ascii?q?Ff/p28tQyNN3aUZwJSAWESXUyEAV/jM6Kq5dnB9eiYG+W/I+HPYbWItexRSfOI?=
 =?us-ascii?q?yYiz3Yth+jaGLt+PMWV6D/0nxkpDWmh0G8THlDUOSCwXlCPNY9SYpBem/S13od?=
 =?us-ascii?q?6w8O72WAL0/oaPD7pSMdNy+xG5m6uDNuiQhDpnJjZczJ8D2XjIyL0H1l4Ily5u?=
 =?us-ascii?q?byWtEagHtSPVVq3Qh7RYDwQFZCJzLsdI66M80xJJOc7ajNP1y7F5guQ0C1dDSV?=
 =?us-ascii?q?zuhMWpadYWLGG6MVPNHFyLO6ieJT3X38H3ZruxSaFRjOVRrRG/pSyXHFPjPjud?=
 =?us-ascii?q?kTnkTBSvMeBKjCGGMx1SooC9chBxCWf9SNLqcAG0MNhyjTcu2707mmvKNXIAMT?=
 =?us-ascii?q?h7a05Mrqef7SVdgvV+HWxO9ntkLemelCaf4OnVMZIWsfptAiRpmONW+nU6y71J?=
 =?us-ascii?q?7C5aQPx5gjfdrtlrowLuru7axSBqXxlOgjJKgp+bs0J/P6nQ6phHXzDD5h1JpW?=
 =?us-ascii?q?adBg8BoNxmItLovK9Ux57Ek6e3YDJJ/MjT8+MfCtLSJcbBN2AudVLyGCPdDCMG?=
 =?us-ascii?q?QCStOGWZgFZSw9+I8XjAhII3rJTlntIuS7BUVVouXqcQEEljENUEIJZ4UTIiip?=
 =?us-ascii?q?aUi8kH4Xf4px7UEpYJ9qvbX+6fVK28YA2SiqNJMkMF?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AYAACD7v5bh0O0hNFjHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGCaYECJ4N5iBiMCIIhaJZGFIEQA08pAxABhDwCgzAiNAkNAQMBAQEBAQE?=
 =?us-ascii?q?CARMBAQEIDQkIKSMMgjYigmUDAwECIAQZAQE3AQUJAQEkAiYCAgMxAQUBHAcSB?=
 =?us-ascii?q?YMcAYIBBZtlPIodcHwzgnYBAQWCRIRlCBJ5hmBFg2YXgUA/gRGCXYIAgVMCgSa?=
 =?us-ascii?q?DP4JXiSGGBXdQjzAJgiCDEoFLiikLGIFahRCDJIcHiHaPQzCBJWyBITMaI4M8C?=
 =?us-ascii?q?YISDBeDSogEgnAeM4EFAQGLGCuCIAEB?=
X-IPAS-Result: =?us-ascii?q?A0AYAACD7v5bh0O0hNFjHQEBBQEHBQGBUQgBCwGCaYECJ4N?=
 =?us-ascii?q?5iBiMCIIhaJZGFIEQA08pAxABhDwCgzAiNAkNAQMBAQEBAQECARMBAQEIDQkIK?=
 =?us-ascii?q?SMMgjYigmUDAwECIAQZAQE3AQUJAQEkAiYCAgMxAQUBHAcSBYMcAYIBBZtlPIo?=
 =?us-ascii?q?dcHwzgnYBAQWCRIRlCBJ5hmBFg2YXgUA/gRGCXYIAgVMCgSaDP4JXiSGGBXdQj?=
 =?us-ascii?q?zAJgiCDEoFLiikLGIFahRCDJIcHiHaPQzCBJWyBITMaI4M8CYISDBeDSogEgnA?=
 =?us-ascii?q?eM4EFAQGLGCuCIAEB?=
X-IronPort-AV: E=Sophos;i="5.56,291,1539673200"; 
   d="scan'208";a="41963521"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 28 Nov 2018 11:40:51 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729222AbeK2Gkc (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 29 Nov 2018 01:40:32 -0500
Received: from mail-qk1-f202.google.com ([209.85.222.202]:49640 "EHLO
        mail-qk1-f202.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725994AbeK2Gkc (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 29 Nov 2018 01:40:32 -0500
Received: by mail-qk1-f202.google.com with SMTP id c7so27374041qkg.16
        for <linux-kernel@vger.kernel.org>; Wed, 28 Nov 2018 11:37:47 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=date:in-reply-to:message-id:mime-version:references:subject:from:to
         :cc;
        bh=9/WTV2LtiPKgAVLKUxd/xyVXjHr+yAYWaxXCoSQgwdw=;
        b=CBghUETxoLN2VHsU7NKROcuFcSSuVV+YHCYeK3mzsQVTNZkkzKyCeUcorOe6DkMoUL
         zTF24VV0MvJXbGy3zizTVpdFe1tCyjIgk1sF2xPkih3vGffi4LyNxgbqVnROB/cr3SDB
         ePvb+ezvtllkKUKEJAUHNm2KxZ5+WhsTvhUgIUEzSQ3m5zvMJEZwNuaIhbjAWaZk3szx
         /KC7ICEA71CPctJOeowZPrWgDMnJ2H+nbsGXN01rKQWuF9o/yTw02Pb7RI618RgNpFSV
         SbboS40dedNE2VRgkC9lf8qxzYsaczbzNRkNBbE+jrLjsOZqU+UZNpGL0WmI8bo33kRJ
         B0uQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:in-reply-to:message-id:mime-version
         :references:subject:from:to:cc;
        bh=9/WTV2LtiPKgAVLKUxd/xyVXjHr+yAYWaxXCoSQgwdw=;
        b=cenB6kSK7BWUykPn7b84k44GIiaJTr8DV/A/zOMOoB2vDHMdt3veYrrKsr++AJcryW
         X7gYlAhbZ+zcsHEwt2uXccnK8drwaM+TK88qbd+KSEvwg/vjLdAGUS6sQS+mQxVJRtKa
         XHZTH/GUi7Q818dm7+9TLPch022poZsVnK0BXggz4TKnLFTU6KnCq9mQ/d5KHcBgYbQB
         /B0KM5upidAcYPeqoFre9qs7oelYC9KLK1L6W2PUBjVeDF8gzjQG0F47bB9zYdzVDEeB
         rf81f47th+Ptu5FAlls3JZaYScJNsrqei4MZGcbl76o43ZfC/7RNaIELgMur12OpYtKy
         hqUg==
X-Gm-Message-State: AA+aEWYSsCCG7/7R9U4LUqAVTIdZ8qzYW4fTdyOeyTuKxH0WcGbuqKlT
        fG/53+1aFUVEL/pymtVqTBvAQEwXPExZyOnmpNPmYg==
X-Google-Smtp-Source: AFSGD/V71K6ZQXog2F4hTikvKyu/+E/ak95SHNLypykzWzMJ7uagRuIhXDfJruhzkRT+hEubIHzADxxHlhV7URlGJaMfOA==
X-Received: by 2002:a37:5246:: with SMTP id g67mr4482868qkb.40.1543433866700;
 Wed, 28 Nov 2018 11:37:46 -0800 (PST)
Date: Wed, 28 Nov 2018 11:36:18 -0800
In-Reply-To: <20181128193636.254378-1-brendanhiggins@google.com>
Message-Id: <20181128193636.254378-2-brendanhiggins@google.com>
Mime-Version: 1.0
References: <20181128193636.254378-1-brendanhiggins@google.com>
X-Mailer: git-send-email 2.20.0.rc0.387.gc7a69e6b6c-goog
Subject: [RFC v3 01/19] kunit: test: add KUnit test runner core
From: Brendan Higgins <brendanhiggins@google.com>
To: gregkh@linuxfoundation.org, keescook@google.com, mcgrof@kernel.org,
        shuah@kernel.org
Cc: joel@jms.id.au, mpe@ellerman.id.au, joe@perches.com, brakmo@fb.com,
        rostedt@goodmis.org, Tim.Bird@sony.com, khilman@baylibre.com,
        julia.lawall@lip6.fr, linux-kselftest@vger.kernel.org,
        kunit-dev@googlegroups.com, linux-kernel@vger.kernel.org,
        jdike@addtoit.com, richard@nod.at, linux-um@lists.infradead.org,
        daniel@ffwll.ch, dri-devel@lists.freedesktop.org, robh@kernel.org,
        dan.j.williams@intel.com, linux-nvdimm@lists.01.org,
        kieran.bingham@ideasonboard.com, frowand.list@gmail.com,
        knut.omang@oracle.com, Brendan Higgins <brendanhiggins@google.com>
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Add core facilities for defining unit tests; this provides a common way
to define test cases, functions that execute code which is under test
and determine whether the code under test behaves as expected; this also
provides a way to group together related test cases in test suites (here
we call them test_modules).

Just define test cases and how to execute them for now; setting
expectations on code will be defined later.

Signed-off-by: Brendan Higgins <brendanhiggins@google.com>
---
 include/kunit/test.h | 165 ++++++++++++++++++++++++++++++++++++++++++
 kunit/Kconfig        |  17 +++++
 kunit/Makefile       |   1 +
 kunit/test.c         | 168 +++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 351 insertions(+)
 create mode 100644 include/kunit/test.h
 create mode 100644 kunit/Kconfig
 create mode 100644 kunit/Makefile
 create mode 100644 kunit/test.c

diff --git a/include/kunit/test.h b/include/kunit/test.h
new file mode 100644
index 0000000000000..ffe66bb355d63
--- /dev/null
+++ b/include/kunit/test.h
@@ -0,0 +1,165 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Base unit test (KUnit) API.
+ *
+ * Copyright (C) 2018, Google LLC.
+ * Author: Brendan Higgins <brendanhiggins@google.com>
+ */
+
+#ifndef _KUNIT_TEST_H
+#define _KUNIT_TEST_H
+
+#include <linux/types.h>
+#include <linux/slab.h>
+
+struct kunit;
+
+/**
+ * struct kunit_case - represents an individual test case.
+ * @run_case: the function representing the actual test case.
+ * @name: the name of the test case.
+ *
+ * A test case is a function with the signature, ``void (*)(struct kunit *)``
+ * that makes expectations (see KUNIT_EXPECT_TRUE()) about code under test. Each
+ * test case is associated with a &struct kunit_module and will be run after the
+ * module's init function and followed by the module's exit function.
+ *
+ * A test case should be static and should only be created with the KUNIT_CASE()
+ * macro; additionally, every array of test cases should be terminated with an
+ * empty test case.
+ *
+ * Example:
+ *
+ * .. code-block:: c
+ *
+ *	void add_test_basic(struct kunit *test)
+ *	{
+ *		KUNIT_EXPECT_EQ(test, 1, add(1, 0));
+ *		KUNIT_EXPECT_EQ(test, 2, add(1, 1));
+ *		KUNIT_EXPECT_EQ(test, 0, add(-1, 1));
+ *		KUNIT_EXPECT_EQ(test, INT_MAX, add(0, INT_MAX));
+ *		KUNIT_EXPECT_EQ(test, -1, add(INT_MAX, INT_MIN));
+ *	}
+ *
+ *	static struct kunit_case example_test_cases[] = {
+ *		KUNIT_CASE(add_test_basic),
+ *		{},
+ *	};
+ *
+ */
+struct kunit_case {
+	void (*run_case)(struct kunit *test);
+	const char name[256];
+
+	/* private: internal use only. */
+	bool success;
+};
+
+/**
+ * KUNIT_CASE - A helper for creating a &struct kunit_case
+ * @test_name: a reference to a test case function.
+ *
+ * Takes a symbol for a function representing a test case and creates a
+ * &struct kunit_case object from it. See the documentation for
+ * &struct kunit_case for an example on how to use it.
+ */
+#define KUNIT_CASE(test_name) { .run_case = test_name, .name = #test_name }
+
+/**
+ * struct kunit_module - describes a related collection of &struct kunit_case s.
+ * @name: the name of the test. Purely informational.
+ * @init: called before every test case.
+ * @exit: called after every test case.
+ * @test_cases: a null terminated array of test cases.
+ *
+ * A kunit_module is a collection of related &struct kunit_case s, such that
+ * @init is called before every test case and @exit is called after every test
+ * case, similar to the notion of a *test fixture* or a *test class* in other
+ * unit testing frameworks like JUnit or Googletest.
+ *
+ * Every &struct kunit_case must be associated with a kunit_module for KUnit to
+ * run it.
+ */
+struct kunit_module {
+	const char name[256];
+	int (*init)(struct kunit *test);
+	void (*exit)(struct kunit *test);
+	struct kunit_case *test_cases;
+};
+
+/**
+ * struct kunit - represents a running instance of a test.
+ * @priv: for user to store arbitrary data. Commonly used to pass data created
+ * in the init function (see &struct kunit_module).
+ *
+ * Used to store information about the current context under which the test is
+ * running. Most of this data is private and should only be accessed indirectly
+ * via public functions; the one exception is @priv which can be used by the
+ * test writer to store arbitrary data.
+ */
+struct kunit {
+	void *priv;
+
+	/* private: internal use only. */
+	const char *name; /* Read only after initialization! */
+	spinlock_t lock; /* Gaurds all mutable test state. */
+	bool success; /* Protected by lock. */
+	void (*vprintk)(const struct kunit *test,
+			const char *level,
+			struct va_format *vaf);
+};
+
+int kunit_init_test(struct kunit *test, const char *name);
+
+int kunit_run_tests(struct kunit_module *module);
+
+/**
+ * module_test() - used to register a &struct kunit_module with KUnit.
+ * @module: a statically allocated &struct kunit_module.
+ *
+ * Registers @module with the test framework. See &struct kunit_module for more
+ * information.
+ */
+#define module_test(module) \
+		static int module_kunit_init##module(void) \
+		{ \
+			return kunit_run_tests(&module); \
+		} \
+		late_initcall(module_kunit_init##module)
+
+void __printf(3, 4) kunit_printk(const char *level,
+				 const struct kunit *test,
+				 const char *fmt, ...);
+
+/**
+ * kunit_info() - Prints an INFO level message associated with the current test.
+ * @test: The test context object.
+ * @fmt: A printk() style format string.
+ *
+ * Prints an info level message associated with the test module being run. Takes
+ * a variable number of format parameters just like printk().
+ */
+#define kunit_info(test, fmt, ...) \
+		kunit_printk(KERN_INFO, test, fmt, ##__VA_ARGS__)
+
+/**
+ * kunit_warn() - Prints a WARN level message associated with the current test.
+ * @test: The test context object.
+ * @fmt: A printk() style format string.
+ *
+ * See kunit_info().
+ */
+#define kunit_warn(test, fmt, ...) \
+		kunit_printk(KERN_WARNING, test, fmt, ##__VA_ARGS__)
+
+/**
+ * kunit_err() - Prints an ERROR level message associated with the current test.
+ * @test: The test context object.
+ * @fmt: A printk() style format string.
+ *
+ * See kunit_info().
+ */
+#define kunit_err(test, fmt, ...) \
+		kunit_printk(KERN_ERR, test, fmt, ##__VA_ARGS__)
+
+#endif /* _KUNIT_TEST_H */
diff --git a/kunit/Kconfig b/kunit/Kconfig
new file mode 100644
index 0000000000000..49b44c4f6630a
--- /dev/null
+++ b/kunit/Kconfig
@@ -0,0 +1,17 @@
+#
+# KUnit base configuration
+#
+
+menu "KUnit support"
+
+config KUNIT
+	bool "Enable support for unit tests (KUnit)"
+	depends on UML
+	help
+	  Enables support for kernel unit tests (KUnit), a lightweight unit
+	  testing and mocking framework for the Linux kernel. These tests are
+	  able to be run locally on a developer's workstation without a VM or
+	  special hardware. For more information, please see
+	  Documentation/kunit/
+
+endmenu
diff --git a/kunit/Makefile b/kunit/Makefile
new file mode 100644
index 0000000000000..5efdc4dea2c08
--- /dev/null
+++ b/kunit/Makefile
@@ -0,0 +1 @@
+obj-$(CONFIG_KUNIT) +=			test.o
diff --git a/kunit/test.c b/kunit/test.c
new file mode 100644
index 0000000000000..26d3d6d260e6c
--- /dev/null
+++ b/kunit/test.c
@@ -0,0 +1,168 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Base unit test (KUnit) API.
+ *
+ * Copyright (C) 2018, Google LLC.
+ * Author: Brendan Higgins <brendanhiggins@google.com>
+ */
+
+#include <linux/sched.h>
+#include <linux/sched/debug.h>
+#include <os.h>
+#include <kunit/test.h>
+
+static bool kunit_get_success(struct kunit *test)
+{
+	unsigned long flags;
+	bool success;
+
+	spin_lock_irqsave(&test->lock, flags);
+	success = test->success;
+	spin_unlock_irqrestore(&test->lock, flags);
+
+	return success;
+}
+
+static void kunit_set_success(struct kunit *test, bool success)
+{
+	unsigned long flags;
+
+	spin_lock_irqsave(&test->lock, flags);
+	test->success = success;
+	spin_unlock_irqrestore(&test->lock, flags);
+}
+
+static int kunit_vprintk_emit(const struct kunit *test,
+			      int level,
+			      const char *fmt,
+			      va_list args)
+{
+	return vprintk_emit(0, level, NULL, 0, fmt, args);
+}
+
+static int kunit_printk_emit(const struct kunit *test,
+			     int level,
+			     const char *fmt, ...)
+{
+	va_list args;
+	int ret;
+
+	va_start(args, fmt);
+	ret = kunit_vprintk_emit(test, level, fmt, args);
+	va_end(args);
+
+	return ret;
+}
+
+static void kunit_vprintk(const struct kunit *test,
+			  const char *level,
+			  struct va_format *vaf)
+{
+	kunit_printk_emit(test,
+			  level[1] - '0',
+			  "kunit %s: %pV", test->name, vaf);
+}
+
+int kunit_init_test(struct kunit *test, const char *name)
+{
+	spin_lock_init(&test->lock);
+	test->name = name;
+	test->vprintk = kunit_vprintk;
+
+	return 0;
+}
+
+/*
+ * Initializes and runs test case. Does not clean up or do post validations.
+ */
+static void kunit_run_case_internal(struct kunit *test,
+				    struct kunit_module *module,
+				    struct kunit_case *test_case)
+{
+	int ret;
+
+	if (module->init) {
+		ret = module->init(test);
+		if (ret) {
+			kunit_err(test, "failed to initialize: %d", ret);
+			kunit_set_success(test, false);
+			return;
+		}
+	}
+
+	test_case->run_case(test);
+}
+
+/*
+ * Performs post validations and cleanup after a test case was run.
+ * XXX: Should ONLY BE CALLED AFTER kunit_run_case_internal!
+ */
+static void kunit_run_case_cleanup(struct kunit *test,
+				   struct kunit_module *module,
+				   struct kunit_case *test_case)
+{
+	if (module->exit)
+		module->exit(test);
+}
+
+/*
+ * Performs all logic to run a test case.
+ */
+static bool kunit_run_case(struct kunit *test,
+			   struct kunit_module *module,
+			   struct kunit_case *test_case)
+{
+	kunit_set_success(test, true);
+
+	kunit_run_case_internal(test, module, test_case);
+	kunit_run_case_cleanup(test, module, test_case);
+
+	return kunit_get_success(test);
+}
+
+int kunit_run_tests(struct kunit_module *module)
+{
+	bool all_passed = true, success;
+	struct kunit_case *test_case;
+	struct kunit test;
+	int ret;
+
+	ret = kunit_init_test(&test, module->name);
+	if (ret)
+		return ret;
+
+	for (test_case = module->test_cases; test_case->run_case; test_case++) {
+		success = kunit_run_case(&test, module, test_case);
+		if (!success)
+			all_passed = false;
+
+		kunit_info(&test,
+			  "%s %s",
+			  test_case->name,
+			  success ? "passed" : "failed");
+	}
+
+	if (all_passed)
+		kunit_info(&test, "all tests passed");
+	else
+		kunit_info(&test, "one or more tests failed");
+
+	return 0;
+}
+
+void kunit_printk(const char *level,
+		  const struct kunit *test,
+		  const char *fmt, ...)
+{
+	struct va_format vaf;
+	va_list args;
+
+	va_start(args, fmt);
+
+	vaf.fmt = fmt;
+	vaf.va = &args;
+
+	test->vprintk(test, level, &vaf);
+
+	va_end(args);
+}
-- 
2.20.0.rc0.387.gc7a69e6b6c-goog

