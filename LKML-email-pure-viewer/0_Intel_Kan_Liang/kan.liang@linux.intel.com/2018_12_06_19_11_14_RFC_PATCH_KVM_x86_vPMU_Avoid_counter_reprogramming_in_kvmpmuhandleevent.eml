Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:52:14 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id C3B61580375;
	Thu,  6 Dec 2018 11:12:20 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by orsmga004-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 11:12:20 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3At6+ptBfhM9Llc4gIeFCpdy89lGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc6/ZRSN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRBDI2i?=
 =?us-ascii?q?coUBAekPM+FDr4nlpVYDtgeyCRW2Ce/z0DJEmmP60Ksn2OohCwHG2wkgEsoNsH?=
 =?us-ascii?q?vOqtX5LqMSUeGvw6nOwjXOdPdW2Tb76IjVfREtu/CMXbRsccXPzUkjDR/KjlKV?=
 =?us-ascii?q?qYHjIjib1fwNvnCF4+Z8Ue+jkXMrpg9vrjS128shiZXFipgUx13G7Sl13YI4Kc?=
 =?us-ascii?q?OiREN7YdOoCptduz+AO4ZyTM4vRXxjtjwgxb0co5G7eTAHyJQ5yB7bbPyKa5aI?=
 =?us-ascii?q?4h39W+aLOzt4h2xqeKi5hxms9Uis0Or8VtO70FpSrypFlMfDtmwV2hDN9sSKTu?=
 =?us-ascii?q?Fx8lqv1DqRzQzf9+JJLVwumafaKZMt2rswmYASsUTHEC/2gkL2jKqOe0Ug++io?=
 =?us-ascii?q?7fnnY7r/qp+fKYB0kAf+PboqmsCmBuQ5PA4OUHaB+emnyr3j8lP2QK9Qgv01jK?=
 =?us-ascii?q?bZqpbaKtofpqKjBA9VyIkj5w6lDzi6yNQYgWUHLFVddRKDjojpOE/BLOr3DPei?=
 =?us-ascii?q?mFmslDZrx/bbPrzuGJnNL37DkKv/crZ58UJT1A0zzdVH7ZJOFr4BOO7zWlP2tN?=
 =?us-ascii?q?HADh82KQ20w/r9B9V6zI8eWX+PDbWfMKPdqlKI4uMvI++RZI4aojr9Kv4l5+Lw?=
 =?us-ascii?q?gn89g1MSYa6p3Z4PYnCiAvtmO1mZYWbrgtoZE2cKuRQxQPbpiF2FVz5TYXGyUr?=
 =?us-ascii?q?k45jE6DoKmEIjCSpqsgLyHwCe0AJlWanpaBVCLFHfib5+EVOsUaCKOPs9hlSQJ?=
 =?us-ascii?q?WqK6S48h0hGutxX2y6B9IerW4SAYsZPj1N5o5+zcjx0y9Dp0D9iD3GGJVW17gm?=
 =?us-ascii?q?QIRzou1qBlvUN90kuD0bR/g/FAFtxc/fVJXh0+NZ7d1eN6Dd/yVxnFfteITlam?=
 =?us-ascii?q?X9qnDSswTtI3398BfUJ9F8++gRDE2iqgG6UVmKCTBJwo7qLc2GD8KNtnxHbYyq?=
 =?us-ascii?q?YtlVkmTdFJNW29mKF/8Q/fB4rKk0Wck6anbqAc3C/L9GeewmuCpkBYUAhsUarb?=
 =?us-ascii?q?WXATfFfZrdP85knaVb+hFawnMhddyc6FMqZFd8fmjUtYS/v5ONTReWSxm3yuCh?=
 =?us-ascii?q?aO3b6MaIvqe2MA3CTSEkQEkgYT/WqYOgg6HCuuv2XeDDl2H1L1f0zs6fV+qG+8?=
 =?us-ascii?q?TkIs0wGKbkhh172p+h4Vhf2QUe8T0qgDuCc7rzV0HVC9393NBtqEpgpherhcYN?=
 =?us-ascii?q?wn7FdG02LZqxJyPpi6I69+gV4edhx9v1ny2BVvFoVAjc8qoWswwwp2N62Z301O?=
 =?us-ascii?q?djOC0Z/rJ73YN3P9/Basa67RxFHTy9KW+qYJ6PQlpFTvpgCpFkw+83p519lZyW?=
 =?us-ascii?q?eT5pLPDAAKS5L+Tl439wRmp7HdeiQ8557U2WdwPqWusz7C28gmBO0qyhu7e9df?=
 =?us-ascii?q?MaWEFBL9EsEABsiuLvAqlEatbh4eIO9S86s0Ndu8d/SawK6rIPpgnDW+gGRd4Y?=
 =?us-ascii?q?ByzliD9zBhRe7PxZoFxe+X3hGGVzvlkFiuqMT3lp1aajEIGWq/zzPpBIpQZq10?=
 =?us-ascii?q?YIYKBn2iI8yxxtVimZHtX2RU+0KkB1MDwMWpYwadb0Th3Q1M0kQauXymmSqiwz?=
 =?us-ascii?q?10iT0ptbef3CrVzuTmdRoHPHNLRWZ4gVftJ4i0k84VXEyyYwc1kxul4F7wx7JH?=
 =?us-ascii?q?q6RnM2nTXUBIcjD0L254SKuwtbmCY8lV5JMzqypXU+e8YVGcSrHjpRsXyCfjH2?=
 =?us-ascii?q?pYxDAmeDCmoJT5nxpmiG2DKHZ/tmbWecZ1xR3H/tzTWeZR3iYaRCl/kTTWBkKz?=
 =?us-ascii?q?P96z8dWWlpfDtPuzV2agVp1VbCnqwpmMtCq95W12HxK/m+q/lcHgEQg/ySX7zc?=
 =?us-ascii?q?VlVT3UrBbgZYnmz6e6PvhmfkVyBF/89tB1GodxkoYrgJEQ2H4ahoia/HYdkGfz?=
 =?us-ascii?q?N8lb1rz6bHYXWTELxNvV6hD/2EJ/NnKJ2575VnKFz8tkZtm6YXkZ1jgz7s9UE6?=
 =?us-ascii?q?eU8KJLnTFurVWmtwLRbuNwnjMcyfso9X4bjPsFuAsrziWBHL8SGVNUMjDrlxSN?=
 =?us-ascii?q?99q+trlYZH6zcbis00pzhcyhDLaHog1GWXf2YJEiHTJr7sVkMVLBy3nz6oDieN?=
 =?us-ascii?q?nNYtMfrByUkxHcj+dLLJI9jOYFhS1iOWjlp30q1/Y7jQBy3ZG9pIWIMH9i/KW9?=
 =?us-ascii?q?Ah5FLDH1Y94T9yrpjaZfmMaWwo+uEo9gGjUNQJvnU/aoHCgOuvTgMgaECCc8pW?=
 =?us-ascii?q?uDGbrDAQ+f719rr3DVHJCuKX6XP2MVzcl4SBmeOUxfgx0UXDMgkZ4iDQ2qwM3h?=
 =?us-ascii?q?cEFk5jEe/FL4qx1Myv52OBn7SGvQuACoajIsQpiFMBVW9h1C51vSMcGG7uNzGD?=
 =?us-ascii?q?xY/oS8rAOXLGyXfR9IDWYPWkyLHF3jOriu5d/d8+mXHOa+Lv3OYamQpuxaTfuH?=
 =?us-ascii?q?2ZWv0o5+9TaWKsqPJmViD+E82kdbXXB2BcXZmzYMSywWjS7NbNSbpBCz+iJptM?=
 =?us-ascii?q?C/7e/rVRnr5YuODbtSLNpu9wq3gaeFK+6fmiJ5JSxE2ZMLwH/C0KIf00IKiyFy?=
 =?us-ascii?q?azmtFqwNujTQTK3LgK9YER4aZzl3NMtJ9K882ghNOcjGitL6zLJ4j/g1C0tbWl?=
 =?us-ascii?q?zlgM2mecsKI2SlPlPdGEmLLKiGJSHMw8zvfaO8SLhQgP9IuBGqpTmbE1HsPjKY?=
 =?us-ascii?q?mjntVhCvN/xMjS6BMBxfvoG9bghiCWz5QN36bR27Ncd9jScqzr0smnPKKWkcPC?=
 =?us-ascii?q?B8ckxXqL2Q6CJYgvNnFG1A7npqN++EmymC4uncK5YWt+ZrAytum+Jb5nQ616Va?=
 =?us-ascii?q?7CVeSPNpnyvSq40mn1bziOqVwT9uSjJUpzpLjZ7NtkJnfe3B+4VNQ2Ts/RQD92?=
 =?us-ascii?q?ycBh0G4dx/BZmnp69U2vDLlaTuNC1F9dPEu8cRQ4DRKcSIN1I7PBbpESKSBwwA?=
 =?us-ascii?q?CXaoK2T3mUNQireR+2eTo5x8rYLj3NIKS7lGRBk2G+kcB0BNAtMPOtF0UykinL?=
 =?us-ascii?q?rdi9QHtlSkqxyER8xc+JTGX/SdKfHuLiuJy7hCexYMh7j/KNdAfrbn0lBvPwEp?=
 =?us-ascii?q?1L/BHFDdCJUU+nVs?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AFAADHcwlch0O0hNFkGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUQYBAQELAYFaghEnjBOMDoIhkkGEeYFxFhgTAYdXIjQJDQEDAQEBAQE?=
 =?us-ascii?q?BAgETAQEBCA0JCCkvgjYkAYJpAiRSBgkCHzEDWxIFglFLggIFpn0ziHqBLIdwg?=
 =?us-ascii?q?WuCRIIWgRGHXIYSAokRhyKQLAcCkUYCFpE1ASyIYo9+gUaCDXCDPIInF44+HgE?=
 =?us-ascii?q?BMQGBBAEBh22CTQEB?=
X-IPAS-Result: =?us-ascii?q?A0AFAADHcwlch0O0hNFkGwEBAQEDAQEBBwMBAQGBUQYBAQE?=
 =?us-ascii?q?LAYFaghEnjBOMDoIhkkGEeYFxFhgTAYdXIjQJDQEDAQEBAQEBAgETAQEBCA0JC?=
 =?us-ascii?q?CkvgjYkAYJpAiRSBgkCHzEDWxIFglFLggIFpn0ziHqBLIdwgWuCRIIWgRGHXIY?=
 =?us-ascii?q?SAokRhyKQLAcCkUYCFpE1ASyIYo9+gUaCDXCDPIInF44+HgEBMQGBBAEBh22CT?=
 =?us-ascii?q?QEB?=
X-IronPort-AV: E=Sophos;i="5.56,323,1539673200"; 
   d="scan'208";a="55854616"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 06 Dec 2018 11:12:18 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1725987AbeLFTMQ (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 6 Dec 2018 14:12:16 -0500
Received: from mga11.intel.com ([192.55.52.93]:10038 "EHLO mga11.intel.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1725908AbeLFTMP (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 6 Dec 2018 14:12:15 -0500
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from orsmga006.jf.intel.com ([10.7.209.51])
  by fmsmga102.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 11:12:15 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,323,1539673200"; 
   d="scan'208";a="98660756"
Received: from otc-lr-04.jf.intel.com ([10.54.39.129])
  by orsmga006.jf.intel.com with ESMTP; 06 Dec 2018 11:12:14 -0800
From: kan.liang@linux.intel.com
To: rkrcmar@redhat.com, peterz@infradead.org, tglx@linutronix.de,
        mingo@redhat.com, kvm@vger.kernel.org, linux-kernel@vger.kernel.org
Cc: ak@linux.intel.com, wei.w.wang@intel.com, like.xu@intel.com,
        Kan Liang <kan.liang@linux.intel.com>
Subject: [RFC PATCH] KVM/x86/vPMU: Avoid counter reprogramming in kvm_pmu_handle_event
Date: Thu,  6 Dec 2018 11:11:14 -0800
Message-Id: <1544123474-4909-1-git-send-email-kan.liang@linux.intel.com>
X-Mailer: git-send-email 2.7.4
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From: Kan Liang <kan.liang@linux.intel.com>

In the process of handling a guest overflow, KVM unconditionally
reprograms perf counters before entering guest. The reprogramming brings
very high overhead. For common case, (e.g. vCPU still runs on the same
CPU), it's unnecessary.

Here is current process of handling an overflow triggered by guest.
The patch intends to avoid the reprogramming in step 2.

PERF (HOST)                   KVM                          PERF (GUEST)

1. intel_pmu_handle_irq():
     Disable the counter
     ...
     overflow callback
                          overflow_intr():
                            request KVM_REQ_PMU
                            inject PMI to guest
                          overflow_intr() exit
     Enable the counter
   intel_pmu_handle_irq() exit
   ...

2.                        vcpu_enter_guest():
                            kvm_pmu_handle_event():
                              reprogram_counter():
                                pmc_stop_counter():
   Close the counter
                                pmc_reprogram_counter():
   Create a new counter
                            ...

3.                                             intel_pmu_handle_irq():
                                                  Disable all counters
                          pmc_stop_counter():
   Close the counter
                                                         ...
                                                  Enable all counters
                          pmc_reprogram_counter():
   Create a new counter
                                               intel_pmu_handle_irq exit

Only when the vcpu moves to another CPU before Step 2, the counter needs
to be reprogrammed for new CPU.
Otherwise, the reprogramming should be avoided. Because there is nothing
changed for perf event. The perf sub-system can take care of the
assigned counter.

The patch doesn't impact the counter value. Because the counter doesn't
count in host anyway.

The patch doesn't impact the behavior of step 3 (guest PMI handler). The
intel_pmu_handle_irq() is just an example. It could be any PMI handler.

The average duration of kvm_pmu_handle_event() is 85,282,765ns on
a 4 socket SKX with one guest which has perf sampling single event.
With the patch, the average duration is only 97ns.

Signed-off-by: Kan Liang <kan.liang@linux.intel.com>
---
 arch/x86/kvm/pmu.c | 12 +++++++++++-
 1 file changed, 11 insertions(+), 1 deletion(-)

diff --git a/arch/x86/kvm/pmu.c b/arch/x86/kvm/pmu.c
index 58ead7d..8436f32 100644
--- a/arch/x86/kvm/pmu.c
+++ b/arch/x86/kvm/pmu.c
@@ -221,8 +221,8 @@ EXPORT_SYMBOL_GPL(reprogram_counter);
 void kvm_pmu_handle_event(struct kvm_vcpu *vcpu)
 {
 	struct kvm_pmu *pmu = vcpu_to_pmu(vcpu);
+	int bit, event_cpu;
 	u64 bitmask;
-	int bit;
 
 	bitmask = pmu->reprogram_pmi;
 
@@ -234,6 +234,16 @@ void kvm_pmu_handle_event(struct kvm_vcpu *vcpu)
 			continue;
 		}
 
+		/*
+		 * It doesn't need to reprogram the counters unless
+		 * the CPU which vcpu runs on has changed.
+		 */
+		event_cpu = READ_ONCE(pmc->perf_event->oncpu);
+		if (event_cpu == vcpu->cpu) {
+			clear_bit(bit, (unsigned long *)&pmu->reprogram_pmi);
+			continue;
+		}
+
 		reprogram_counter(pmu, bit);
 	}
 }
-- 
2.7.4

