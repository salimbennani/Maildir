Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 06 Dec 2018 08:56:27 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 0EC85580375
	for <like.xu@linux.intel.com>; Wed,  5 Dec 2018 09:20:11 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by fmsmga006-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 05 Dec 2018 09:20:10 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AgCvSRxaia4qV1qLZgX8SQH//LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZps2zZx7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyJPDIOi?=
 =?us-ascii?q?YYUMAeoOMvpXoJT/qFQAsBW+HQuhCuHgxzNViHL6wbc63Po6EQzdwAwsA8gDvG?=
 =?us-ascii?q?jIoNjvNqofV/2+wqnSzTXEavNbwTnz55LOchAgv/6MWa97f9DLxUIyCg7KkE+Q?=
 =?us-ascii?q?qZb/MDOT2eQKqXWQ4u17Wu2xkW4nsRt+oj6gxsgykYTJnJwaxU3E9Spj3IY5P8?=
 =?us-ascii?q?G3SEl+YdO9FpZbqi+UN4xzQsw4QmFovj43xaYYtp6hZigF0pInxxHBZPCdb4eI?=
 =?us-ascii?q?5RfjWP6fITd8hXJqZLG/hwyo/Ue8ze38U9G40FJLriVejNnMt2oN1wDJ5siAUP?=
 =?us-ascii?q?t98V+t1iiJ1wDP8O5EJ080la7FJJI42r4wlp0TsVjEHiPsn0X2lqCWel0l+uiu?=
 =?us-ascii?q?8OTnfq/pppCGN4BujwHyKLghmsu6Aek+LwMAXHCb9Pyi2LH//kD1WqhGguA1n6?=
 =?us-ascii?q?XDrpzXK8QWqrSkDwJXyoov9QqzAjO83NgFk3QLMkhJdA+EgoXnIV3CPvP1APGi?=
 =?us-ascii?q?iFq2ijhr3erJPrj5D5XNMHfDlLDhcK55605d0woz0ctf64hbCrEHPfL/QEjxtM?=
 =?us-ascii?q?bXDhMhMgy0xfjoCMll248ARW6CAbWVPL7PvVKL/O4jPeeBaY8PtDrgKfUp//vu?=
 =?us-ascii?q?gmU4mV8Zc6mpx5wXaHWgE/R/PUqZZGfsjs4cHmgUoAoxUujqhESZXj5UenayWb?=
 =?us-ascii?q?4z6S8gCI6hCYfDR4Otj6Kb0Ca0A51bfmRGClGKEXf1eISIQfYMaCSOIsB/ljwI?=
 =?us-ascii?q?T6SuS4gk1Ry1sg/6zLxnLuXS+i0Fr57j08J15+LLmREo6TN0F9id032KT2xsmm?=
 =?us-ascii?q?MIRjw2075lrU1y11eOyqx4g/1eFdxO6PJFSAY6NZjAz+NkD9D+QB7OftCMSAXu?=
 =?us-ascii?q?f9O9HDtkTs4t28RcJAF5Gs6+lVbF2CylBaJTkKaEQ5k986bZ1n62IN5hynHAz+?=
 =?us-ascii?q?44glw7B8dCK2Ci1ZN57BXZUovAkkGFkPSzeKEBmSLA6mqHiHCDpVxVSxJYV6LD?=
 =?us-ascii?q?UnYCIEzMooPi+0nAQrSyXKkhKRZL0sWYK6FHOeHu2G5PQfruOJz8fmirkmH4UQ?=
 =?us-ascii?q?2Bw76BbKLmcnQb3TWbA08BxVMp8G6CJDQ5UwuopWPTCHRWUxrFbln2+O9xKTvv?=
 =?us-ascii?q?REIu1QiMYEBJzbe5+hcJw/ebTqVA8KgDvXINojN1EVL155SeIdeavQNncyQUNd?=
 =?us-ascii?q?kw+k1O023UnxZwMpypM+ZpgVtIIFc/hF/nyxgiUtYIqsMttn5/iVMqca8=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ACAADnBwhchxHrdtBkGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUgMBAQEBAQsBgTAlgRSBKYN5iHiLL4INfIZ7ghGNRIFzFBg?=
 =?us-ascii?q?HDYdTIjUIDQEDAQEBAQEBAgETAQEBCgsJCBsOIwyCNgUCAxoBBoJbAQEBAQIBA?=
 =?us-ascii?q?QIgIwoiBwMCAQECBgEBChUDAgIFHQQCAgMBCwUpIBMFgxwBgXkIAQQKpX6BL4U?=
 =?us-ascii?q?xD4NbgQkFgQuLExEGcoENgRGCXQcugx4ChGUxgiYCiSkGMocgj1UHAocDijQLG?=
 =?us-ascii?q?Ilgh0+YfoFHAYILcBWCCIEfglCDOIUUhT9BMYEHHId1KymBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0ACAADnBwhchxHrdtBkGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUgMBAQEBAQsBgTAlgRSBKYN5iHiLL4INfIZ7ghGNRIFzFBgHDYdTIjUIDQEDA?=
 =?us-ascii?q?QEBAQEBAgETAQEBCgsJCBsOIwyCNgUCAxoBBoJbAQEBAQIBAQIgIwoiBwMCAQE?=
 =?us-ascii?q?CBgEBChUDAgIFHQQCAgMBCwUpIBMFgxwBgXkIAQQKpX6BL4UxD4NbgQkFgQuLE?=
 =?us-ascii?q?xEGcoENgRGCXQcugx4ChGUxgiYCiSkGMocgj1UHAocDijQLGIlgh0+YfoFHAYI?=
 =?us-ascii?q?LcBWCCIEfglCDOIUUhT9BMYEHHId1KymBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,318,1539673200"; 
   d="scan'208";a="54669498"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 05 Dec 2018 09:20:08 -0800
Received: from localhost ([::1]:35817 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gUaqF-0003P4-Oy
	for like.xu@linux.intel.com; Wed, 05 Dec 2018 12:20:07 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:41781)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <berrange@redhat.com>) id 1gUaor-0002UI-T2
	for qemu-devel@nongnu.org; Wed, 05 Dec 2018 12:18:43 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <berrange@redhat.com>) id 1gUaol-0006yO-No
	for qemu-devel@nongnu.org; Wed, 05 Dec 2018 12:18:40 -0500
Received: from mx1.redhat.com ([209.132.183.28]:48278)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <berrange@redhat.com>) id 1gUaol-0006ka-7f
	for qemu-devel@nongnu.org; Wed, 05 Dec 2018 12:18:35 -0500
Received: from smtp.corp.redhat.com (int-mx01.intmail.prod.int.phx2.redhat.com
	[10.5.11.11])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 3625731256C4;
	Wed,  5 Dec 2018 17:18:30 +0000 (UTC)
Received: from redhat.com (ovpn-112-32.ams2.redhat.com [10.36.112.32])
	by smtp.corp.redhat.com (Postfix) with ESMTPS id 6CC1287B4;
	Wed,  5 Dec 2018 17:18:21 +0000 (UTC)
Date: Wed, 5 Dec 2018 17:18:18 +0000
From: Daniel =?utf-8?B?UC4gQmVycmFuZ8Op?= <berrange@redhat.com>
To: Sameeh Jubran <sameeh@daynix.com>
Message-ID: <20181205171818.GA1136@redhat.com>
References: <20181025140631.634922-1-sameeh@daynix.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
In-Reply-To: <20181025140631.634922-1-sameeh@daynix.com>
User-Agent: Mutt/1.10.1 (2018-07-13)
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.11
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.46]);
	Wed, 05 Dec 2018 17:18:30 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [RFC 0/2] Attempt to implement the standby feature
 for assigned network devices
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Reply-To: Daniel =?utf-8?B?UC4gQmVycmFuZ8Op?= <berrange@redhat.com>
Cc: Yan Vugenfirer <yan@daynix.com>, Jason Wang <jasowang@redhat.com>,
	"Michael S . Tsirkin" <mst@redhat.com>, qemu-devel@nongnu.org,
	Eduardo Habkost <ehabkost@redhat.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Thu, Oct 25, 2018 at 05:06:29PM +0300, Sameeh Jubran wrote:
> From: Sameeh Jubran <sjubran@redhat.com>
> 
> Hi all,
> 
> Background:
> 
> There has been a few attempts to implement the standby feature for vfio
> assigned devices which aims to enable the migration of such devices. This
> is another attempt.
> 
> The series implements an infrastructure for hiding devices from the bus
> upon boot. What it does is the following:
> 
> * In the first patch the infrastructure for hiding the device is added
>   for the qbus and qdev APIs. A "hidden" boolean is added to the device
>   state and it is set based on a callback to the standby device which
>   registers itself for handling the assessment: "should the primary device
>   be hidden?" by cross validating the ids of the devices.
> 
> * In the second patch the virtio-net uses the API to hide the vfio
>   device and unhides it when the feature is acked.

IIUC, the general idea is that we want to provide a pair of associated NIC
devices to the guest, one emulated, one physical PCI device. The guest would
put them in a bonded pair. Before migration the PCI device is unplugged & a
new PCI device plugged on target after migration. The guest traffic continues
without interuption due to the emulate device.

This kind of conceptual approach can already be implemented today by management
apps. The only hard problem that exists today is how the guest OS can figure
out that a particular pair of devices it has are intended to be used together. 

With this series, IIUC, the virtio-net device is getting a given property which
defines the qdev ID of the associated VFIO device. When the guest OS activates
the virtio-net device and acknowledges the STANDBY feature bit, qdev then
unhides the associated VFIO device.

AFAICT the guest has to infer that the device which suddenly appears is the one
associated with the virtio-net device it just initialized, for purposes of
setting up the NIC bonding. There doesn't appear to be any explicit assocation
between the devices exposed to the guest.

This feels pretty fragile for a guest needing to match up devices when there
are many pairs of devices exposed to a single guest.

Unless I'm mis-reading the patches, it looks like the VFIO device always has
to be available at the time QEMU is started. There's no way to boot a guest
and then later hotplug a VFIO device to accelerate the existing virtio-net NIC.
Or similarly after migration there might not be any VFIO device available
initially when QEMU is started to accept the incoming migration. So it might
need to run in degraded mode for an extended period of time until one becomes
available for hotplugging. The use of qdev IDs makes this troublesome, as the
qdev ID of the future VFIO device would need to be decided upfront before it
even exists.

So overall I'm not really a fan of the dynamic hiding/unhiding of devices. I
would much prefer to see some way to expose an explicit relationship between
the devices to the guest.

> Disclaimers:
> 
> * I have only scratch tested this and from qemu side, it seems to be
>   working.
> * This is an RFC so it lacks some proper error handling in few cases
>   and proper resource freeing. I wanted to get some feedback first
>   before it is finalized.
> 
> Command line example:
> 
> /home/sameeh/Builds/failover/qemu/x86_64-softmmu/qemu-system-x86_64 \
> -netdev tap,id=hostnet0,script=world_bridge_standalone.sh,downscript=no,ifname=cc1_71 \
> -netdev tap,vhost=on,id=hostnet1,script=world_bridge_standalone.sh,downscript=no,ifname=cc1_72,queues=4 \
> -device virtio-net,host_mtu=1500,netdev=hostnet1,id=cc1_72,vectors=10,mq=on,primary=cc1_71 \
> -device e1000,netdev=hostnet0,id=cc1_71,standby=cc1_72 \
> 
> Migration support:
> 
> Pre migration or during setup phase of the migration we should send an
> unplug request to the guest to unplug the primary device. I haven't had
> the chance to implement that part yet but should do soon. Do you know
> what's the best approach to do so? I wanted to have a callback to the
> virtio-net device which tries to send an unplug request to the guest and
> if succeeds then the migration continues. It needs to handle the case where
> the migration fails and then it has to replug the primary device back.

Having QEMU do this internally gets into a world of pain when you have
multiple devices in the guest.

Consider if we have 2 pairs of devices. We unplug one VFIO device, but
unplugging the second VFIO device fails, thus we try to replug the first
VFIO device but this now fails too. We don't even get as far as starting
the migration before we have to return an error.

The mgmt app will just see that the migration failed, but it will not
be sure which devices are now actually exposed to the guest OS correctly.

The similar problem hits if we started the migration data stream, but
then had to abort and so need to tear try to replug in the source but
failed for some reasons.

Doing the VFIO device plugging/unplugging explicitly from the mgmt app
gives that mgmt app direct information about which devices have been
successfully made available to the guest at all time, becuase the mgmt
app can see the errors from each step of the process.  Trying to do
this inside QEMU doesn't achieve anything the mgmt app can't already
do, but it obscures what happens during failures.  The same applies at
the libvirt level too, which is why mgmt apps today will do the VFIO
unplug/replug either side of migration themselves.


Regards,
Daniel
-- 
|: https://berrange.com      -o-    https://www.flickr.com/photos/dberrange :|
|: https://libvirt.org         -o-            https://fstop138.berrange.com :|
|: https://entangle-photo.org    -o-    https://www.instagram.com/dberrange :|

