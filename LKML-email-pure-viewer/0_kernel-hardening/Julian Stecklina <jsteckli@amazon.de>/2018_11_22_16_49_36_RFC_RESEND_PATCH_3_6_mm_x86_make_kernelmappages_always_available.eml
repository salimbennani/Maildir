Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 23 Nov 2018 08:29:43 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id CCA9858037D;
	Thu, 22 Nov 2018 08:50:34 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga006-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 22 Nov 2018 08:50:34 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A5lhiQBXt1k7GdNE5aJPyIwbztnLV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhGBvKdThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXSm1dUMhRSSFNG5qw?=
 =?us-ascii?q?YYkSAOobJOpWspT9p0AWrRSgGQasGPrjyjtPhn74wKY21+QsHQTA0QMnA9wAsG?=
 =?us-ascii?q?rZoMzsOKkQTO+11rDEwyjeb/NNwTfy9pTHcgw8qv2IQ758bc/dxE8yHA3Hk1qQ?=
 =?us-ascii?q?s5ToMTOL2OoQvWaV7O1uWuChi2ElpQFxuSCvy8U3h4XVmo4Y0EzI+D9lzIopI9?=
 =?us-ascii?q?CzVU51YcSjEJtVryyUM5Z2QscjQ25yviYx16AIuYKlcycWy5Qnwx/fa/qdfIOV?=
 =?us-ascii?q?5R/jVv2RIStmi315e7K/gxey/FO6xe35TMa10VFKrixfntbRqH8Azhre4dWERP?=
 =?us-ascii?q?tl5kqtxyqD2gTJ5u1ZL004i7DXJ4Miz7IsjJYesEbOEjfolEnqjqKabFgo9+q1?=
 =?us-ascii?q?5+j9f7nrpZCRO5Vqhgz+NKklh9axDv4iMgcUWmiW4eS826Pn/U3+WLhKkPI2nb?=
 =?us-ascii?q?fDsJzAJsQUuLS5AwlL3YYn8Rq/CC2m0NsAkXkGKlJKZg6HgpD3N13SJP30F+qz?=
 =?us-ascii?q?jlqynDtx2vzLPaHtDo/MI3XBiLvheKxy609YyAo919Bf4JdUB6kFIPLyXE/xqd?=
 =?us-ascii?q?PZAgY6MwOq2ebnDsty1ocHVWKIDK6ZNr3dsUWT6+IxLOmDepUVtCz+K/c7/f7u?=
 =?us-ascii?q?i2E2mVsHcamux5sXZ2i0Hu56LEWBfXrsntABHH8Ovgo/T+zllkeOUDFOZ3upW6?=
 =?us-ascii?q?I85zc7CJ+pDIvZR4CthqCB0zm/HpFMem9GDVWMG2/yd4qYQ/cMdD6SIsh5nzwE?=
 =?us-ascii?q?T7ehSpMh2guptAPgy7pnM/Db+isXtZ/40Nh15uvTlQw99DBuDsSd1X2NQH9wnm?=
 =?us-ascii?q?8SWzA226V/q1Rnylifyah4n+BYFdtL6vNLVQc1K4TQz+99C9D0XALBecyESFKn?=
 =?us-ascii?q?QtWgHDEwQcg9w94IY0ZhBdqiigrP0DatA78Qj7aLHoA78rrA33jtIMZw02zJ1L?=
 =?us-ascii?q?Ihj1khQctDL3emibR99wXIA47JkkOZl7uldKgG3S7N8nuDwnSKvE1CTAFwVqDF?=
 =?us-ascii?q?V2gFZkTKtdT5+l/CT7i2BLQkKARBz9SOKq9LatLzi1VGS+zuONDfY2K3hmexCg?=
 =?us-ascii?q?yExrKKbIr2ZWod2D/RB1QDkwAW5XyGLxQxBj+9o2LCCzxjDU/gbFny8eZgsn+7?=
 =?us-ascii?q?TlU7zweRb0J/0bq5/RoVhf+ZS/MXxb8EvCYhqzNpHFeyxd7WCtyApxZ/c6VYe9?=
 =?us-ascii?q?8y/FBH1WfBvQxnIpOgN7xihkIZcwlvokzhzQt3BZtancgqtnwqyhFyJrye0F5a?=
 =?us-ascii?q?czOY3JbwOqDYK2Xo/RCvbbLW1U/a0NqM5qgP7/E4oU35vA61Dkoi72ln095N3n?=
 =?us-ascii?q?uA55XKCQ0SUY7xUkc37RR6u6vWYi4n54PQ1H1sN6a0vyTG29IoAusl1xmhc81e?=
 =?us-ascii?q?MKOCCA/9DckaC9KyJ+wtnlijdggEM/xK9K4oI8OmcOOL17SvPOl+kzOpk2RG7J?=
 =?us-ascii?q?pm3UKR6iVzUOjI35UCw/GGxQaHUzb8jFG8ssH4g4xEZDcSHnahxijgHoJeeqpy?=
 =?us-ascii?q?fYMTA2e0P8K33sl+h4LqW3NA9F+jGkkK19OzdRuTb1zyxwtQ1UsMrHyjmCu4yS?=
 =?us-ascii?q?F0kj4zoqqe2izO3/rtdB4dNmFXQ2liiE/mIZKogNACQEiocw8pmQO/5Ub726dU?=
 =?us-ascii?q?vr5/IHTUQUtSeSj5MXtiUqqpurWeecFP7I4nvjtNUOS7Z1CXUbr9oxoc0yP+EG?=
 =?us-ascii?q?pS3jE7dze2uprnmxx2kn6SLHF2rHDBY8F/2Q/f5MDARf5WxjcHRCh4hSPXB1Sm?=
 =?us-ascii?q?JNmp4NOUmozHsuC/UWKhS5JSfTPqzYOGqCu0+2lqDQejkPC0n93tCRI63jPj19?=
 =?us-ascii?q?l2SSXIqw7xYovx2KSgMuJnfU5oCEXn68VgGYF+kYowhJcO1ngcnZiV+XsHkWHu?=
 =?us-ascii?q?MdRUw67+bXwNRSIVzN7R+gTqxEpjLneRzYLjSnqd2tdhZ8W9Ym4O2iMy9cdKBL?=
 =?us-ascii?q?2W7LxFmyt4uV64rQPXYfhgkTYR0/ou6HgGg+4XvAoh1DmSArcXHUNAJyzjiwyI?=
 =?us-ascii?q?78yirKVQfGuvcqK/1EtkkdChEbGNuAdcWHnid5cmHC9w6Nh/MV3W3H3y7IHkZM?=
 =?us-ascii?q?ffbdYJuhKIlBfAivBfKIgtmfoSmSpnJWX9sGUgy+46jhxhx4u2vYaZJGV24KK2?=
 =?us-ascii?q?HARYOSbraMMJ9THglqJenseQ34CyEZRtADQLXJ30Tf22FDIer+joNwGLEDcksH?=
 =?us-ascii?q?eUBaLfHROD6Edht3/PD5erN3SNKHgY19piQgSdJFdEgAAVRzg6mp85Fga3xM3u?=
 =?us-ascii?q?akt55zYR5kLmpRtI0O5nKx7/UmLHrgeydjg0UISfLAZR7gxa/EjaK8ue7uZuHy?=
 =?us-ascii?q?1C+p2hsReAKmiaZwROEGEIVVaIB1HlPrmy+9bA9/KUCfa5L/vLeb+Os/BRV++U?=
 =?us-ascii?q?xZKz1Ytr5zSMOd+KPnZ8FP03wFZDUWp6G8TEmDUPVioXmDjWb8OAoBe8+yt3rt?=
 =?us-ascii?q?2w8fjxWQLv45ePBKVWMdl15x+2hqKDPfaKhCllMTZYyo8MxXjQxbkf214Sljhu?=
 =?us-ascii?q?dyS3HrQGryLNV6XQmqlYDxMAbyNzNc1I778z3wVXOM7bjM/12aB8jvIvF1hFUl?=
 =?us-ascii?q?nhkNmzZcMWO2G9KE/HBEGTObSGOzLLwsL3YaC9SbFKj+VUrRqwuTmFHE/5IzSD?=
 =?us-ascii?q?jCLkVxSuMeFKkSGaMwZSuIC7chZxF2fjSMjqZQG8MN9ylTc226E7hmvWNW4ANj?=
 =?us-ascii?q?hxa1lCrqCL4iNCnPp+G3ZN7n5kLeSfnyaZ7u/YKosZsPdxAyR0kf5a72o+y7dP?=
 =?us-ascii?q?8C5EQ/l1kjPIrtFyu1GmjvWPyj1/XRpSqzZLgZiHsll4NarF9plPR3DE8QkJ7W?=
 =?us-ascii?q?WRDRQKutRkBsfuu6BW1tjAiqbzJC1e/NLT+MsWH9LUJ96fMHo9LRrpHybZDQsf?=
 =?us-ascii?q?Qj6tMGHfhkpdn+mT932VtJc6rJfslYEKSr9aUlw1C/wbBl5kHNwEPJd4QDckna?=
 =?us-ascii?q?SHg84P4Hrt5CXWEcZXpJbKUreSCO/jJTCYi7ZsYxoT3ai+KpweMJLy30gkYV5/?=
 =?us-ascii?q?z6rQHE+Ff81JoyRnJjQorU5O9Hl4RyVn2Vn5Zwiu5H47HPu9jBkwzAdzN7d+vA?=
 =?us-ascii?q?zw6ks6cwKZ7BA7l1M8zJC63D0=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BdAwAF3fZbh0O0hNFigheDWhInjG+LI?=
 =?us-ascii?q?QGBaDmJBIkrhHeBbhcBARgTAYhSIjUIDQEDAQEBAQEBAgETAQEBCA0JCCkjDII?=
 =?us-ascii?q?2JIJjAwMBAg4vAQE3AQUJAQFQA1QZBYMcgXUNBZJSAQGJDgGMT4IfgnYBAQWHG?=
 =?us-ascii?q?giHXoMPgRwXgUA/gUSFegKCLoUOixOUcQkddJAeGIlRhzcsl10CBAsCEwGBSAO?=
 =?us-ascii?q?CCE0kFIMngicXg32KID4BATGBBQEBjFQBAQ?=
X-IPAS-Result: =?us-ascii?q?A0BdAwAF3fZbh0O0hNFigheDWhInjG+LIQGBaDmJBIkrhHe?=
 =?us-ascii?q?BbhcBARgTAYhSIjUIDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2JIJjAwMBAg4vA?=
 =?us-ascii?q?QE3AQUJAQFQA1QZBYMcgXUNBZJSAQGJDgGMT4IfgnYBAQWHGgiHXoMPgRwXgUA?=
 =?us-ascii?q?/gUSFegKCLoUOixOUcQkddJAeGIlRhzcsl10CBAsCEwGBSAOCCE0kFIMngicXg?=
 =?us-ascii?q?32KID4BATGBBQEBjFQBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,266,1539673200"; 
   d="scan'208";a="52302539"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 22 Nov 2018 08:50:32 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2406008AbeKWDak (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 22 Nov 2018 22:30:40 -0500
Received: from smtp-fw-9101.amazon.com ([207.171.184.25]:39541 "EHLO
        smtp-fw-9101.amazon.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S2403983AbeKWDaQ (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 22 Nov 2018 22:30:16 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
  d=amazon.de; i=@amazon.de; q=dns/txt; s=amazon201209;
  t=1542905406; x=1574441406;
  h=from:to:cc:subject:date:message-id;
  bh=9HidV9vq6uOAZbu35DoYVQSDNjcPhgv67SSbRGZ00Ns=;
  b=ifTLsn5t56gaQSleYI6wXr8h/FY56HMBnNVk6NIpmarebakomnUfVvfu
   ukv1K03CjWYOZSxpper44g0qShh+SRQhnm8q09bJpHwIAYLPzrKAj3S0w
   ++icyckuCxrswg4RIAqpe2X8NlBHSKscdjjNXiz/8MFFv43ftVZcWmKD5
   E=;
X-IronPort-AV: E=Sophos;i="5.56,253,1539648000"; 
   d="scan'208";a="771919550"
Received: from sea3-co-svc-lb6-vlan3.sea.amazon.com (HELO email-inbound-relay-2a-69849ee2.us-west-2.amazon.com) ([10.47.22.38])
  by smtp-border-fw-out-9101.sea19.amazon.com with ESMTP/TLS/DHE-RSA-AES256-SHA; 22 Nov 2018 16:50:03 +0000
Received: from u54ee758033e858cfa736.ant.amazon.com (pdx2-ws-svc-lb17-vlan3.amazon.com [10.247.140.70])
        by email-inbound-relay-2a-69849ee2.us-west-2.amazon.com (8.14.7/8.14.7) with ESMTP id wAMGnxNH100567
        (version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NO);
        Thu, 22 Nov 2018 16:50:01 GMT
Received: from u54ee758033e858cfa736.ant.amazon.com (localhost [127.0.0.1])
        by u54ee758033e858cfa736.ant.amazon.com (8.15.2/8.15.2/Debian-3) with ESMTP id wAMGnwbI008114;
        Thu, 22 Nov 2018 17:49:58 +0100
Received: (from jsteckli@localhost)
        by u54ee758033e858cfa736.ant.amazon.com (8.15.2/8.15.2/Submit) id wAMGnwRd008113;
        Thu, 22 Nov 2018 17:49:58 +0100
From: Julian Stecklina <jsteckli@amazon.de>
To: kernel-hardening@lists.openwall.com
Cc: Julian Stecklina <jsteckli@amazon.de>,
        Liran Alon <liran.alon@oracle.com>,
        Tycho Andersen <tycho@tycho.ws>,
        Jonathan Adams <jwadams@google.com>,
        David Woodhouse <dwmw2@infradead.org>,
        LKML <linux-kernel@vger.kernel.org>
Subject: [RFC RESEND PATCH 3/6] mm, x86: make __kernel_map_pages always available
Date: Thu, 22 Nov 2018 17:49:36 +0100
Message-Id: <0ba5f3c6d7fc0078d091c507cda980ef5cd710b2.1542905228.git.jsteckli@amazon.de>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <cover.1542905228.git.jsteckli@amazon.de>
References: <cover.1542905228.git.jsteckli@amazon.de>
In-Reply-To: <cover.1542905228.git.jsteckli@amazon.de>
References: <cover.1542905228.git.jsteckli@amazon.de>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

__kernel_map_pages is currently only enabled when CONFIG_DEBUG_PAGEALLOC
is defined. Enable it unconditionally instead.

Signed-off-by: Julian Stecklina <jsteckli@amazon.de>
---
 arch/x86/mm/pageattr.c | 3 +--
 include/linux/mm.h     | 3 ++-
 2 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/arch/x86/mm/pageattr.c b/arch/x86/mm/pageattr.c
index 51a5a69ecac9..bd3b194400c1 100644
--- a/arch/x86/mm/pageattr.c
+++ b/arch/x86/mm/pageattr.c
@@ -2025,8 +2025,6 @@ int set_pages_rw(struct page *page, int numpages)
 	return set_memory_rw(addr, numpages);
 }
 
-#ifdef CONFIG_DEBUG_PAGEALLOC
-
 static int __set_pages_p(struct page *page, int numpages)
 {
 	unsigned long tempaddr = (unsigned long) page_address(page);
@@ -2093,6 +2091,7 @@ void __kernel_map_pages(struct page *page, int numpages, int enable)
 	arch_flush_lazy_mmu_mode();
 }
 
+#ifdef CONFIG_DEBUG_PAGEALLOC
 #ifdef CONFIG_HIBERNATION
 
 bool kernel_page_present(struct page *page)
diff --git a/include/linux/mm.h b/include/linux/mm.h
index a61ebe8ad4ca..a0b9feefebb1 100644
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@ -2589,9 +2589,10 @@ static inline void kernel_poison_pages(struct page *page, int numpages,
 					int enable) { }
 #endif
 
+extern void __kernel_map_pages(struct page *page, int numpages, int enable);
+
 #ifdef CONFIG_DEBUG_PAGEALLOC
 extern bool _debug_pagealloc_enabled;
-extern void __kernel_map_pages(struct page *page, int numpages, int enable);
 
 static inline bool debug_pagealloc_enabled(void)
 {
-- 
2.17.1

