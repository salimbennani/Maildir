Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 05 Dec 2018 08:45:43 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 68BFB580375;
	Tue,  4 Dec 2018 15:27:44 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by fmsmga002-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 04 Dec 2018 15:27:44 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A6aV5BBBRFi/Zc6Ywxh4bUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7+psiwAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95NWCNOH42y?=
 =?us-ascii?q?b4wBAOgPM+hXrIf9qUUArQCmBQSuH+7v1iZIhnrq0a06z+gsEwfL1xEgEdIUt3?=
 =?us-ascii?q?TUqc34ObsUUe+ozKjD0DPNb+5K2Tf67YjIcwohoeqPXbJxbMHczk0vFx7ZjlWX?=
 =?us-ascii?q?soHqJTaV2f4RvGeB9+pgVP6vhHQjqw1rpDig2Nssh5DPi4kIyV7E7T10zJgpKd?=
 =?us-ascii?q?C8UkJ3fNCpHIVKuy2HNIZ6XtkuTmBqtSoi1LELuIK3cDQPxZg62xLTduCLfo2T?=
 =?us-ascii?q?7R7/VOueOzJ1iXx7d7+8iRa/9FSvxfD9W8S01VtHoS5InsTMu30IyRPc8MuKRe?=
 =?us-ascii?q?Z480evwjmAzRvc5+dZKk4uj6XbMYQuwrsom5oTr0vDGij2lV3ojK+ZaEok4PKk?=
 =?us-ascii?q?6+f5bbX8oJ+TKYt0hhv5MqQ0lcyzGeU4Mg4QUGiH4emwyqHv8EnjTLlXgPA6jL?=
 =?us-ascii?q?PVvI3ZKMgHvKK0Ag1Y3p4m6xmlDjem1NoYnWMALFJAYB+Hi4npO1fTIPH3FPu/?=
 =?us-ascii?q?gEqjkC1tx//YOr3tG5LNL3bFkLj/Z7Zw8FBcyAUtwtBF/Z5UCa8OIOj1WkDvsN?=
 =?us-ascii?q?zUFBg5Mxa7w+r/EtVyypseWX6TAq+eKK7StV6I5uExLOWWa44VpS3wK/wk5/7o?=
 =?us-ascii?q?kH84lkURfaiv3ZsLdn+4Gu5qLFmeYXrpmt0BC3sFvhIiTOz2j12PST5TaGyzX6?=
 =?us-ascii?q?Ig/D47D5iqDYfeRo+3hryB0zy2HplXZmBAF1CNHm3kd4SCW/cQdi2SJtVtnSAD?=
 =?us-ascii?q?VbikU4Uhzw2htBfmy7p7KerZ4i8YtZX929Rv5O3Tkhcy9TpzD8mG12GNTmd0nn?=
 =?us-ascii?q?4HRjMs3aB/p1B9xUmH0aRin/NYEtlT7etTUggmLZ7c0/B6C9fqVw3bZdeJSFGm?=
 =?us-ascii?q?Qta8DTErVN0xwcQDY0J8G9WkkxDC0DCmA74Tl7yXGpM09rjQ0GT2J8Z403zGzr?=
 =?us-ascii?q?Uuj0E6QstTMm2rnq1/+BLVB4LTl0WZlryldaIT3CPW8GeDzGyOvFxXUQJqUKXF?=
 =?us-ascii?q?W2wfaVXSrdjj+kzCSLquA6w9MgRd0c6CNrdKatrxgFpbXvjjJsrRb3ixm2iqAx?=
 =?us-ascii?q?aI3a2DbIztd2UZ3yXdDUwEnhsX/XaHMwg+Gyigr3jfDDxoCVLgfUfs/fNip3O8?=
 =?us-ascii?q?S08+1xuKYFF517qp5h4VguSRRO4J0bIapigtsTV0E0y739LNFdWAoRFsfKFdYd?=
 =?us-ascii?q?M7/VdG2njVtw17Ppy8Ma9igkQSfBhwv0Przx93EJlPkdA2rHM2ywp/Mb6Y0FJE?=
 =?us-ascii?q?dzOfwZDwOr3WJnPu/By1bK7WwFXe0NeQ+qcA8/k4r1TjvAe0Fkst6Xln0t9V02?=
 =?us-ascii?q?eC6ZXOFgYdTZXxUkMv/Rhgu77aejU955/T1XB0K6a0tiHN2t03C+ol0BqvZMpf?=
 =?us-ascii?q?P76eGw/0EM0aANauJfcum1ioaBIEIe9T+LQ1P8Oga/uJxqqrMPx8kzKhiGRN+J?=
 =?us-ascii?q?p93V6U9ypgVu7I2I4IwvGF3gedSzjwllagssDtloBCajEfBW6/ySniBI5Maax+?=
 =?us-ascii?q?Z4cLCWGyI8KpwtVynYLiW3ld9FS7HVMJxNepeQaOb1z6xQBQz0UXrmC9liui0j?=
 =?us-ascii?q?N0lCslrqyB0yzUwuTubQYINXRPRGZ/k1jsO4+0j9YBUUisbggpkgal5Engy6ha?=
 =?us-ascii?q?oqR/M3fcQUNScyfqKGFiV7O6tqCebM5X9JMorSJXXfy8YFCbULL8owEW0zj+H2?=
 =?us-ascii?q?tY3z07czCqupPknx11km6dLXBzrGbHdsF03xvQ+NvcRftJ1DocWCZ4kSXXBkS7?=
 =?us-ascii?q?P9Sx/9WbjY3DsuO9V2KmTJFTajPkzYCDtCu6421lHxu/kuu3mt3mFwg6zCD628?=
 =?us-ascii?q?NrVSXOsBbzfI3r276mPuJge0liHEX85NZiGoFijoswg4kd2HgAiZWS53YHk2bz?=
 =?us-ascii?q?MdNA1KL6bXoNQyMLwtHP7Ajk3k1jMmyGx4bjWnqBxcthYsGwYnkK1SIl88BKFK?=
 =?us-ascii?q?CU4aRHnSRvo1q0twLRYeVnkTcbxvsj83oag+APuAowwSSRGLESHU9EPSPykxSE?=
 =?us-ascii?q?9cyxrKJSZGy3a7i/yFJ+ncy9DLGFugxcXXf5epQ4EiNq4MRwLknM0GHt5YH+Y9?=
 =?us-ascii?q?bfc8gTthKPnhfEjuhVLo8xl/UQiSpmP2L9oWMqy+ohgRNy2pG6uZCNK39x86Kh?=
 =?us-ascii?q?Hh5YKjr1atsP+jHqiKZShMeX0JqpHpV8ATULR5roQOmsEDITs/TnKgmPHCc9qn?=
 =?us-ascii?q?edBbrQAwuf5F16oHLIFpChL2uXK2UBzdV+WBmdI1RSjxsOUzU9mp45CxqmxMj8?=
 =?us-ascii?q?cEpi4jAR51j4qgZDy+5yNhn/VHvfqxmsajsuVJefKx9W5BlY50jJKcye8v5zHy?=
 =?us-ascii?q?ZA852jtgONL3KUZx9SAWEVQECEBE3jPrqz5dnG6eeYHfGzL//PYbWItOxfWO2E?=
 =?us-ascii?q?xZOp0ot64TmMMt+DMWVlD/0+wkBDR2x2G9zFmzUTTCwajyLMb8mGpBel5y14tM?=
 =?us-ascii?q?a//O7wWALo44uPBKBfMdFu+xCwnKeCOPSchCd/KTZEyJwMwWXEx6QY3F4Xkytu?=
 =?us-ascii?q?bSWiEawctS7RS6Ldgq9XAAAaayNwN8tI7rgw3gpXOc7chdP6yKR4juMuC1peUV?=
 =?us-ascii?q?zhm8epZdEFIm2nNVPHAlqLO6qCJTHR3873Zqa8Q6VKjOpIrx2wpSqbE0j7MzuZ?=
 =?us-ascii?q?ijnmTAqvPv9MjS2BOBxeuZqwchJsCWjlUdLnZQe3MN5xjT0q37I0gmnGOnIbMT?=
 =?us-ascii?q?h5a0lNtKGf7TtEgvVjHGxM9mZlLeiBmyqD8+bUMIoZsft1DSRyjO9a5HU6y71I?=
 =?us-ascii?q?7CBLXvB1mS3SrsJwrFGiiOWA1j1nUB9WoDZRmI2LpVliObne9pRYWXfL5hQN7W?=
 =?us-ascii?q?CRCxQMv9RkC93vtLpWytjAj6/zLDZC89TJ/coTHcTUKcSHMGY/PhrtAjLbEAwF?=
 =?us-ascii?q?TTv4fV3Y0mpUnPiMvlSQr4Ry/p7llJMQDLZeVUAdGfYTC0AjF9sHdsRZRDQhxJ?=
 =?us-ascii?q?edgN9AwWeiqxzQXt5Zv9iTUu+OBt3mLT+ShKFFexIMh7X1MdJAZcXAx0V+Zwwi?=
 =?us-ascii?q?z8zxEE3KUIUI+3U5Yw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BvAACpDAdch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBVAQBAQsBgTCCOyeDeZQnUgaBNRSIfQ6OPoEQA0wSAQEYEwGEQIMMIjcGDQE?=
 =?us-ascii?q?DAQEBAQEBAgETAQEBCA0JCCkjDII2JAGCYQEBAQECAQECIB0BATcBBQkBAQoYA?=
 =?us-ascii?q?gImAgIDHhMBBQEcBhMFFoMGgWoDCAUIAQSZZzyKHXCBL4J2AQEFhQsNghQIEnm?=
 =?us-ascii?q?LExd4gQeBEScfgh4ugleCExeDBDGCJosihQ+PbC4JjhODRoFbiAA2hxWKCYRxh?=
 =?us-ascii?q?nmCXQIEAgQFAgUPIYE7gXd7CjsqAYJBPoFdDBeDSop0HzIBgQQBASGKOwUBAQ?=
X-IPAS-Result: =?us-ascii?q?A0BvAACpDAdch0O0hNFkHAEBAQQBAQcEAQGBVAQBAQsBgTC?=
 =?us-ascii?q?COyeDeZQnUgaBNRSIfQ6OPoEQA0wSAQEYEwGEQIMMIjcGDQEDAQEBAQEBAgETA?=
 =?us-ascii?q?QEBCA0JCCkjDII2JAGCYQEBAQECAQECIB0BATcBBQkBAQoYAgImAgIDHhMBBQE?=
 =?us-ascii?q?cBhMFFoMGgWoDCAUIAQSZZzyKHXCBL4J2AQEFhQsNghQIEnmLExd4gQeBEScfg?=
 =?us-ascii?q?h4ugleCExeDBDGCJosihQ+PbC4JjhODRoFbiAA2hxWKCYRxhnmCXQIEAgQFAgU?=
 =?us-ascii?q?PIYE7gXd7CjsqAYJBPoFdDBeDSop0HzIBgQQBASGKOwUBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,316,1539673200"; 
   d="scan'208";a="140790206"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 04 Dec 2018 15:27:42 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726467AbeLDX1j (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 4 Dec 2018 18:27:39 -0500
Received: from mail-pg1-f193.google.com ([209.85.215.193]:41871 "EHLO
        mail-pg1-f193.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725904AbeLDX1j (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 4 Dec 2018 18:27:39 -0500
Received: by mail-pg1-f193.google.com with SMTP id 70so8080295pgh.8
        for <linux-kernel@vger.kernel.org>; Tue, 04 Dec 2018 15:27:38 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=amacapital-net.20150623.gappssmtp.com; s=20150623;
        h=mime-version:subject:from:in-reply-to:date:cc
         :content-transfer-encoding:message-id:references:to;
        bh=k4gRrwf0vwBfra6ZEDTewPtpNHK5kwzpNqTQwIAEL2Q=;
        b=2M99FNvRaGGgZI1h3vp7GB2gd23fTl8jYf4soLuY1MGKWwr3pz0ZVVhLfFXQ4FnoQu
         QM2mQtuvzp5G7vdzb57yjxGD2RPXO82//r7ezuZkHwySXR9kL65gg2fzIsKprBUeKbhF
         2+mbdArVxne11lu8S1bM04Xw0AOgOhmwYr5bGcrNXWDxVHfa2rjLztK6aaivy+wUhWGA
         gvMLR+D/n235o0fP951cgmf6Ajnf9ZBBJAoMqk/CjsWTzV0+FNtJpdp1CuRF+aNdc01U
         K+zGwsWQVgTRdtFDNUAOEOH30EtOtE83qMiDIBygSf2bULOvKKPqc4cabW0JL0g0UlmT
         P0nA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:subject:from:in-reply-to:date:cc
         :content-transfer-encoding:message-id:references:to;
        bh=k4gRrwf0vwBfra6ZEDTewPtpNHK5kwzpNqTQwIAEL2Q=;
        b=COcX7QfnWD2I7936GjjUuWbTsEWzdm2g9DFpbI4XXmeeGFv3FS5ootGM4aigVdo2XS
         qyEjjQw8CuGKgMCZrnVGswid1I041JCEonFDkjUbzjdpuDofL4OXbBPpi2PpS2TtntfF
         8KUvTxfaBulzhqtSIEI+6FrMBZ9k6C3hgJUakAFZ4J015E2rRGMBTba6Wzt67V0noUi7
         Dr3J9N1FGKsYwONIMDf0ewERR2t0ESRDB9sfAbtdewoSLX923hK3abEN51xCY8bAgTS9
         ISIotqRvrdlcCKJ6PnZbko1PhPxWXTA/eLSFJO7wLvv7HwOUJO7FgjCPGdJhQWIYy5K1
         RrKQ==
X-Gm-Message-State: AA+aEWZeBdMJwZVbj8mmjbGsiNlTT0aMWZ1U6eDJJ+iwHjiN/VGenDkd
        cmVvpHTOSwx9QhEJdv7IE+4M3A==
X-Google-Smtp-Source: AFSGD/V+EY5LtwKfhmo1xEQYNRIU5jd9BdwJH58X7DHf8+7Gl1/G8q/cMLO5/BTr+bh3ThaZTg3HQA==
X-Received: by 2002:a63:3546:: with SMTP id c67mr18807821pga.284.1543966058294;
        Tue, 04 Dec 2018 15:27:38 -0800 (PST)
Received: from ?IPv6:2600:1010:b05a:3e8f:cd65:4915:ea8d:fbab? ([2600:1010:b05a:3e8f:cd65:4915:ea8d:fbab])
        by smtp.gmail.com with ESMTPSA id m67sm31736273pfb.25.2018.12.04.15.27.36
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Tue, 04 Dec 2018 15:27:36 -0800 (PST)
Content-Type: text/plain;
        charset=utf-8
Mime-Version: 1.0 (1.0)
Subject: Re: [PATCH 1/2] vmalloc: New flag for flush before releasing pages
From: Andy Lutomirski <luto@amacapital.net>
X-Mailer: iPhone Mail (16B92)
In-Reply-To: <20CC2F71-308D-42E2-8C54-F64D7CC3863F@gmail.com>
Date: Tue, 4 Dec 2018 15:27:35 -0800
Cc: Andy Lutomirski <luto@kernel.org>,
        Rick Edgecombe <rick.p.edgecombe@intel.com>,
        Andrew Morton <akpm@linux-foundation.org>,
        Will Deacon <will.deacon@arm.com>,
        Linux-MM <linux-mm@kvack.org>,
        LKML <linux-kernel@vger.kernel.org>,
        Kernel Hardening <kernel-hardening@lists.openwall.com>,
        "Naveen N . Rao" <naveen.n.rao@linux.vnet.ibm.com>,
        Anil S Keshavamurthy <anil.s.keshavamurthy@intel.com>,
        "David S. Miller" <davem@davemloft.net>,
        Masami Hiramatsu <mhiramat@kernel.org>,
        Steven Rostedt <rostedt@goodmis.org>,
        Ingo Molnar <mingo@redhat.com>,
        Alexei Starovoitov <ast@kernel.org>,
        Daniel Borkmann <daniel@iogearbox.net>, jeyu@kernel.org,
        Network Development <netdev@vger.kernel.org>,
        Ard Biesheuvel <ard.biesheuvel@linaro.org>,
        Jann Horn <jannh@google.com>,
        Kristen Carlson Accardi <kristen@linux.intel.com>,
        Dave Hansen <dave.hansen@intel.com>,
        "Dock, Deneen T" <deneen.t.dock@intel.com>,
        Peter Zijlstra <peterz@infradead.org>
Content-Transfer-Encoding: quoted-printable
Message-Id: <C658F765-F38B-44DF-9FCE-B5ECB5DD9A86@amacapital.net>
References: <20181128000754.18056-1-rick.p.edgecombe@intel.com> <20181128000754.18056-2-rick.p.edgecombe@intel.com> <4883FED1-D0EC-41B0-A90F-1A697756D41D@gmail.com> <CALCETrXvddt148fncMJqpjK98uatiK-44knYFWU0-ytf8X+iog@mail.gmail.com> <08141F66-F3E6-4CC5-AF91-1ED5F101A54C@gmail.com> <CALCETrXLrsKDBzDkN7sc9HYPWe9aV3NQzf4vMvM+FD8j6aA6AQ@mail.gmail.com> <20CC2F71-308D-42E2-8C54-F64D7CC3863F@gmail.com>
To: Nadav Amit <nadav.amit@gmail.com>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org




On Dec 4, 2018, at 2:48 PM, Nadav Amit <nadav.amit@gmail.com> wrote:

>> On Dec 4, 2018, at 11:48 AM, Andy Lutomirski <luto@kernel.org> wrote:
>>=20
>> On Tue, Dec 4, 2018 at 11:45 AM Nadav Amit <nadav.amit@gmail.com> wrote:
>>>> On Dec 4, 2018, at 10:56 AM, Andy Lutomirski <luto@kernel.org> wrote:
>>>>=20
>>>> On Mon, Dec 3, 2018 at 5:43 PM Nadav Amit <nadav.amit@gmail.com> wrote:=

>>>>>> On Nov 27, 2018, at 4:07 PM, Rick Edgecombe <rick.p.edgecombe@intel.c=
om> wrote:
>>>>>>=20
>>>>>> Since vfree will lazily flush the TLB, but not lazily free the underl=
ying pages,
>>>>>> it often leaves stale TLB entries to freed pages that could get re-us=
ed. This is
>>>>>> undesirable for cases where the memory being freed has special permis=
sions such
>>>>>> as executable.
>>>>>=20
>>>>> So I am trying to finish my patch-set for preventing transient W+X map=
pings
>>>>> from taking space, by handling kprobes & ftrace that I missed (thanks a=
gain for
>>>>> pointing it out).
>>>>>=20
>>>>> But all of the sudden, I don=E2=80=99t understand why we have the prob=
lem that this
>>>>> (your) patch-set deals with at all. We already change the mappings to m=
ake
>>>>> the memory writable before freeing the memory, so why can=E2=80=99t we=
 make it
>>>>> non-executable at the same time? Actually, why do we make the module m=
emory,
>>>>> including its data executable before freeing it???
>>>>=20
>>>> All the code you're looking at is IMO a very awkward and possibly
>>>> incorrect of doing what's actually necessary: putting the direct map
>>>> the way it wants to be.
>>>>=20
>>>> Can't we shove this entirely mess into vunmap?  Have a flag (as part
>>>> of vmalloc like in Rick's patch or as a flag passed to a vfree variant
>>>> directly) that makes the vunmap code that frees the underlying pages
>>>> also reset their permissions?
>>>>=20
>>>> Right now, we muck with set_memory_rw() and set_memory_nx(), which
>>>> both have very awkward (and inconsistent with each other!) semantics
>>>> when called on vmalloc memory.  And they have their own flushes, which
>>>> is inefficient.  Maybe the right solution is for vunmap to remove the
>>>> vmap area PTEs, call into a function like set_memory_rw() that resets
>>>> the direct maps to their default permissions *without* flushing, and
>>>> then to do a single flush for everything.  Or, even better, to cause
>>>> the change_page_attr code to do the flush and also to flush the vmap
>>>> area all at once so that very small free operations can flush single
>>>> pages instead of flushing globally.
>>>=20
>>> Thanks for the explanation. I read it just after I realized that indeed t=
he
>>> whole purpose of this code is to get cpa_process_alias()
>>> update the corresponding direct mapping.
>>>=20
>>> This thing (pageattr.c) indeed seems over-engineered and very unintuitiv=
e.
>>> Right now I have a list of patch-sets that I owe, so I don=E2=80=99t hav=
e the time
>>> to deal with it.
>>>=20
>>> But, I still think that disable_ro_nx() should not call set_memory_x().
>>> IIUC, this breaks W+X of the direct-mapping which correspond with the mo=
dule
>>> memory. Does it ever stop being W+X?? I=E2=80=99ll have another look.
>>=20
>> Dunno.  I did once chase down a bug where some memory got freed while
>> it was still read-only, and the results were hilarious and hard to
>> debug, since the explosion happened long after the buggy code
>> finished.
>=20
> This piece of code causes me pain and misery.
>=20
> So, it turns out that the direct map is *not* changed if you just change
> the NX-bit. See change_page_attr_set_clr():
>=20
>        /* No alias checking for _NX bit modifications */
>        checkalias =3D (pgprot_val(mask_set) | pgprot_val(mask_clr)) !=3D _=
PAGE_NX;
>=20
> How many levels of abstraction are broken in the way? What would happen
> if somebody tries to change the NX-bit and some other bit in the PTE?
> Luckily, I don=E2=80=99t think someone does=E2=80=A6 at least for now.
>=20
> So, again, I think the change I proposed makes sense. nios2 does not have
> set_memory_x() and it will not be affected.
>=20
> [ I can add a comment, although I don=E2=80=99t have know if nios2 has an N=
X bit,
> and I don=E2=80=99t find any code that defines PTEs. Actually where is pte=
_present()
> of nios2 being defined? Whatever. ]
>=20

At least rename the function, then. The last thing we need is for disable_ro=
_nx to *enable* NX.=
