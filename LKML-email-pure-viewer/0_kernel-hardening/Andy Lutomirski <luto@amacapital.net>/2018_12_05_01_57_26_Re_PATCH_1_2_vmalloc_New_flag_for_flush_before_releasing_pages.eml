Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 05 Dec 2018 14:28:21 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from FMSMGA003.fm.intel.com (fmsmga003.fm.intel.com [10.253.24.29])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id ED054580375;
	Tue,  4 Dec 2018 17:57:33 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by FMSMGA003-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 04 Dec 2018 17:57:33 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3At7T0sRTlcxGmOiBhzCqVUb6mL9psv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64YRaOt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZHoyz?=
 =?us-ascii?q?YJYBAeoGM+laoYfzqFgArRWgCwm3HOPiyCRFhmPv3a0/z+ghER3K0Q4mEtkTsH?=
 =?us-ascii?q?rUttL1NKIKXO2pyqnH0DXCZO5Q1zfg9IjIdRUhofCWXbJrcsrRyFQkGgTBjlWN?=
 =?us-ascii?q?tYzlOCiY2f4Is2eB8+VvT/qvi287qw5rpjij3MEshZfVho8MzF3P6CZ3wJ4tKN?=
 =?us-ascii?q?GmVEJ2ZcSoHIZeui2ELYd6X8AvT31ytCs7yLAKoYC3cSkWxJg7whPTduCLf5WU?=
 =?us-ascii?q?7h/mT+mdPTd1i2hgdb+xmRm/8kagx+jgWcap0VtHri9In9bIu3wQ1xHe79aIRe?=
 =?us-ascii?q?F+80i83DuP2Rvc5ftfLk0yiKHVMYQuwqQqmZoWqUnDHjH5mEHxjKKOaEUk9fan?=
 =?us-ascii?q?6/79brXluJCcLYl0hR/6Mqg0ncy/G+s4PhAPX2id5+u8yKXu8VPlTLhOlPE6j6?=
 =?us-ascii?q?fUvI7AKcgGpaO1HxVZ34ch5hqnCjepytUYnX0JLFJffxKHipDkO1XPIPD+EPe+?=
 =?us-ascii?q?jE2gkDR1yPDcOL3uHJHNImHEkLbve7Zy9VRcxREtzdBQ+Z1UEKsNIPHtVU/rst?=
 =?us-ascii?q?zXEBs5Pxazw+b9B9VxzpkeVn6XAq+FLKPStkeF5uYuI+mPeoAZojn8K+U+6v7q?=
 =?us-ascii?q?jH85n0IdfKaz0ZsWbnC4AuppI0GDbXXwhdcBFH8AvhAiQ+zylF2CTTlTam6yX6?=
 =?us-ascii?q?0m5zE7FJipDYDZSoCtnbyOxiG7HpJNa2BCC1CMF2rodoqeV/cNbiKSPtFukjge?=
 =?us-ascii?q?Wbe9TI8h0AmktBXmxLp/MurU5ioYuIrh1Nhy+eLfjxIy9TtyD8Sb1GGAVGV0nm?=
 =?us-ascii?q?IORz8r06Fzu019ylGf0admh/xUD8Bc5/RMUg0iL57T0/R6C8zuWgLGZtqGUk2m?=
 =?us-ascii?q?QtWhATEyVN4x2cUBY0RmFtWmjxDD2TeqArAPm7yKApw07rzT33zrK8lhzHbG0b?=
 =?us-ascii?q?Erj0M6TctXKW2mmql/+hDQB4HTlUWVjaKqdaUG0y7L+2eO1m6OvEBeUA5tXqTJ?=
 =?us-ascii?q?R3EfZk3Krdvn4kPOVaOhCbMiMgFZ086NNrNKasH1jVVBXPrsJc7RY3yvlGuqBR?=
 =?us-ascii?q?aH3LWMbJH0dGUb2yndDEsEkwUX/XudMQg+ByGho3/RDTB0FFLvZV/s/vd6qH+h?=
 =?us-ascii?q?UkA0yASKZVV717Wp4h4VmeCcS/QL070ZoightSt7EEy9393MDdqAvBRufKNHbN?=
 =?us-ascii?q?M54VdH03/ZtgNnMpyhKaBimkARcwBts0zy0BV3D51KkdI2o3My0ApyNaWY3Utd?=
 =?us-ascii?q?dzOZ2JDwPaHXKmny/Ry1d67awFbe0MyS+qcO7vQ4pE7uvAWoFkok7nVm3MNZ03?=
 =?us-ascii?q?qa5pXWEgUSVYj9XVow9xh/v7vaeDUy55vI1X1wNqm5qiXN29Y3C+oq1Bmhf81T?=
 =?us-ascii?q?P7iZFADvCcIaAcuuKOs0m1WyahIEPeZS9LM7Ps+8dvuG3rKrM/hknD68kWtH54?=
 =?us-ascii?q?V92FqW9yVgUu7Iw4oFw/aA0wqHSjfwlkuuvtr2mIBEfz4SGGW/xDPgBI5QYK1y?=
 =?us-ascii?q?YIkKBX2vI82x2tVxmZrtV2RE+16kAlMMwNWpdgaKb1zhwQ1Q0lwaoWammSSk1T?=
 =?us-ascii?q?N0iSwmrq2F0CzI3evibhsHNndXS2Z4iVfjPJa7j8odXEiudAUpkBql5UDnx6lU?=
 =?us-ascii?q?vqh/Lm/TQVtWcCjyNW1tTqywtr+aac5V9JwoqTlXUPi7YV2CSr/9ogEW0iP5E2?=
 =?us-ascii?q?tF2TA7cSqnupH4nxx8lWKcI2x/rHvfecFs2xjf4MbQSuJW3joDXCN4kyXYBkCg?=
 =?us-ascii?q?P9m1+tWZj5XDvfqkV2KiVZ1TdjPnzZiauyu45m1qABu/kO61mtD8FQg60Cn718?=
 =?us-ascii?q?RlVCnSrRb8ZJXr2Lq+Me59YkZoA1r84dJgGo5iioswmI0Q2X8Ci5SV53UHln3/?=
 =?us-ascii?q?Mdda2aL4d3cNQT8Lw9jI4AnqwkFjL3SJx57nWXWZ2Mdue966YmYO0CIn889KEL?=
 =?us-ascii?q?uU7KBDnSZtoVq3twPRbeJ9njcA0/Qu7nEajvoNuAosyCWdH78TEVNZPSzqixSH?=
 =?us-ascii?q?8dS+oL9La2aodLi6zFB+ksy5DLGevgFcX270epIjHS9z9MpzKlzN32Po6oH4Zt?=
 =?us-ascii?q?bQd8kcuQOOkxfPlOVVLJMxlvwXhStoI279vHsly/Ilghxqx521oI+HK2B19qKj?=
 =?us-ascii?q?HhFYLiH1Z98U+jz1kaZemcOW05quH5p7HDULQYDoTempED8JsfTnNgCOECAzq3?=
 =?us-ascii?q?uBGLrfGxOf51lir37VD5+rMHSXLmEDzdp+XBmdOFBfgAcMUTohhJE5EQSqxNH7?=
 =?us-ascii?q?fEd9+zAc/Vr4qhpKyuJ1OBjzSGbfpAG0ajgqTJiTNgZZ7gZH503NK8yR8vpzHz?=
 =?us-ascii?q?1E/p2mtAGNKHaUZwFWAmESQECEG0rvPrqz5dnD7uiYAPCxL+DVbLWKqOxeUeqI?=
 =?us-ascii?q?xJ213otn+TaMKtuAPn14A/In3UpDWGhzG97FlDUXVywXiyXNYtabpRe75y13t9?=
 =?us-ascii?q?2//+7tWA71/ouPDL1SMdp09hCygKeDMfOQhSljJTZZ0JMM2WHHyLwF0FEOjCFu?=
 =?us-ascii?q?ciGnEa4cui7VUKLQhqhXAgYbayxtNctI7KE83ghXNc7YkNP10bF4geAvC1dYTl?=
 =?us-ascii?q?zsgcWpZc0MI2GgO1LLHkeLNLKaJTLVx8H7e7+zSbpVjO9MrR2/pS6bE1P/PjSE?=
 =?us-ascii?q?jzTmTQ2vPvpWjC6FPB1SooW9chd2BGjnTdLmbAC7MdBtgT03x700mm3FNWoGPT?=
 =?us-ascii?q?dgdENNq6Wa7TlEjfVnB2xB8n1lIPGYmyaY6unUMIoZveF3DSR0ie1a5m83y79U?=
 =?us-ascii?q?7CFCWfx0lzHert9oo1G6jOaPziBrXwZJqjZOnIiLp1ltOb3F9plcXnbJ5BIM4n?=
 =?us-ascii?q?+WCxQPpttlDMXguqFQytfVkqLzJyxP89bV/csaGsjVJ9iLMHsnMRr1BjHUCBEJ?=
 =?us-ascii?q?QiKsNWHa1ARhl6TY23Gao5M9r5Lh3NI0S7RYHGR/XqcAC09mWsRELZt4UzgjlL?=
 =?us-ascii?q?SWpM8O+Xe66hLWQZMJkIrAU6e7B/n+YBKEkb5BZgETwrKweYAOKorT0klrYVBi?=
 =?us-ascii?q?nZjDHwzWUMwb8X4pVRM9vEgYqCs2dWY0wU+wL1r1uHI=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BEAAAJMAdch0O0hNFkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBZYExgjsng3mUJ1IGgTUUiQyPTQNMEgEBGBMBhECDDCI4EgEDAQE?=
 =?us-ascii?q?BAQEBAgETAQEBCA0JCCkjDII2JAGCYQEBAQECAQECIB0BATcBBAEJAQEKGAICJ?=
 =?us-ascii?q?gICAzEBBQEcBhMFFoMGgXUFCAEEmVg8ih1wgS+CdgEBBYcoCBJ5ixMXeIEHgTg?=
 =?us-ascii?q?fgh4uhQGDBDGCJosihQ6QGgmRWYlbh0uVcoJdAgQCBAUCBQ8hgTyBdnsKOyoBg?=
 =?us-ascii?q?kE+gV0MF4NKinQfMgGBBAEBIYsBAQE?=
X-IPAS-Result: =?us-ascii?q?A0BEAAAJMAdch0O0hNFkGgEBAQEBAgEBAQEHAgEBAQGBZYE?=
 =?us-ascii?q?xgjsng3mUJ1IGgTUUiQyPTQNMEgEBGBMBhECDDCI4EgEDAQEBAQEBAgETAQEBC?=
 =?us-ascii?q?A0JCCkjDII2JAGCYQEBAQECAQECIB0BATcBBAEJAQEKGAICJgICAzEBBQEcBhM?=
 =?us-ascii?q?FFoMGgXUFCAEEmVg8ih1wgS+CdgEBBYcoCBJ5ixMXeIEHgTgfgh4uhQGDBDGCJ?=
 =?us-ascii?q?osihQ6QGgmRWYlbh0uVcoJdAgQCBAUCBQ8hgTyBdnsKOyoBgkE+gV0MF4NKinQ?=
 =?us-ascii?q?fMgGBBAEBIYsBAQE?=
X-IronPort-AV: E=Sophos;i="5.56,316,1539673200"; 
   d="scan'208";a="54561840"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 04 Dec 2018 17:57:32 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726703AbeLEB5a (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 4 Dec 2018 20:57:30 -0500
Received: from mail-pf1-f172.google.com ([209.85.210.172]:39685 "EHLO
        mail-pf1-f172.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725834AbeLEB53 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 4 Dec 2018 20:57:29 -0500
Received: by mail-pf1-f172.google.com with SMTP id c72so9166117pfc.6
        for <linux-kernel@vger.kernel.org>; Tue, 04 Dec 2018 17:57:29 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=amacapital-net.20150623.gappssmtp.com; s=20150623;
        h=mime-version:subject:from:in-reply-to:date:cc
         :content-transfer-encoding:message-id:references:to;
        bh=fNOZUy8yIZfGQzBreGA8wjx1LGZ7WUerRPF713cS4cw=;
        b=svmqsThE6dvMqYlgi8W+FxGrGBZiy/bSrk7+aV2rnf0ZL+mGhhYNg3Tv6swb+YWR/j
         zpsiHp4twTeWRV/i6bm5E9XI5GfL9ooPYL4P4Yewq5zm3u0sh7orMHX7HpITjTTQi+w5
         cYSU7lfACUKMCEC6VFQo6XRhNq6UkGCyw6+OXNbnZNs7DcisV5JkxSz1OAv9YDoKH+Bp
         WgCOeGmLn+dJYx9iV1CgoGH2k5yHDBL1N14Oyp9ow3A853OJnDIsXAbgS+1Gxg1Hi9Gm
         68GEKu1S+kGNln5APCYJfhftmNK8NZmG3ccxHSVlsWO89M2q3k1DJ91FAj+M3NxpMfNm
         xKCA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:subject:from:in-reply-to:date:cc
         :content-transfer-encoding:message-id:references:to;
        bh=fNOZUy8yIZfGQzBreGA8wjx1LGZ7WUerRPF713cS4cw=;
        b=JkiZaJCTPgyB5t0h1ilMaWoFic1JCq8b2TLXvBg4mWEcPHaOxvi/DvBjIzHt9GbRWK
         9lV42j30WvhGVZelwWYHg1hLLVdWVaFg2d1Pf0Oz3UoGG4Ss0bId8oZquOQEA0l/H3uX
         QxMYNPWo2cwx+Uj/wAl09BSRnsUI1VOepwlIGa+ZQ9Vdpmdnl6611Xhf0nppYo0HYZky
         IU3dZvaXiVFJkiFjRzMvSUyIFSB53mWxte1bNXcYdB5w0IJYCAzJpaGzAv1gsuiY9/kh
         /op8mYf/7XNBr+K50ZXNj6qqRrafXVa6IEIV3lLr29BtaW4/gpLShNc/JK+azYV71ccm
         104Q==
X-Gm-Message-State: AA+aEWa3ndYhBRPZ49ZssSiXhE6X+reQMAsvdhqUfAdlj5Jf+wn9H5UZ
        +cnZbMRFCy8SNiH9Elsa5hzQ3A==
X-Google-Smtp-Source: AFSGD/UH4Vusu8cNyw0o8NGUzQdoUciYhZMBekE1J/nrDTw71NuFEhSTVwXIDHIhVrufvh3a5QCtmA==
X-Received: by 2002:a63:e20a:: with SMTP id q10mr17147279pgh.206.1543975048555;
        Tue, 04 Dec 2018 17:57:28 -0800 (PST)
Received: from ?IPv6:2600:1010:b05a:3e8f:cd65:4915:ea8d:fbab? ([2600:1010:b05a:3e8f:cd65:4915:ea8d:fbab])
        by smtp.gmail.com with ESMTPSA id g3sm45387367pfe.37.2018.12.04.17.57.27
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Tue, 04 Dec 2018 17:57:27 -0800 (PST)
Content-Type: text/plain;
        charset=utf-8
Mime-Version: 1.0 (1.0)
Subject: Re: [PATCH 1/2] vmalloc: New flag for flush before releasing pages
From: Andy Lutomirski <luto@amacapital.net>
X-Mailer: iPhone Mail (16B92)
In-Reply-To: <58a3b01c78b6c299f76c156f96211ff22ec28751.camel@intel.com>
Date: Tue, 4 Dec 2018 17:57:26 -0800
Cc: "luto@kernel.org" <luto@kernel.org>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        "daniel@iogearbox.net" <daniel@iogearbox.net>,
        "ard.biesheuvel@linaro.org" <ard.biesheuvel@linaro.org>,
        "jeyu@kernel.org" <jeyu@kernel.org>,
        "rostedt@goodmis.org" <rostedt@goodmis.org>,
        "ast@kernel.org" <ast@kernel.org>,
        "linux-mm@kvack.org" <linux-mm@kvack.org>,
        "nadav.amit@gmail.com" <nadav.amit@gmail.com>,
        "Dock, Deneen T" <deneen.t.dock@intel.com>,
        "jannh@google.com" <jannh@google.com>,
        "kristen@linux.intel.com" <kristen@linux.intel.com>,
        "akpm@linux-foundation.org" <akpm@linux-foundation.org>,
        "peterz@infradead.org" <peterz@infradead.org>,
        "will.deacon@arm.com" <will.deacon@arm.com>,
        "mingo@redhat.com" <mingo@redhat.com>,
        "Keshavamurthy, Anil S" <anil.s.keshavamurthy@intel.com>,
        "kernel-hardening@lists.openwall.com" 
        <kernel-hardening@lists.openwall.com>,
        "mhiramat@kernel.org" <mhiramat@kernel.org>,
        "naveen.n.rao@linux.vnet.ibm.com" <naveen.n.rao@linux.vnet.ibm.com>,
        "davem@davemloft.net" <davem@davemloft.net>,
        "netdev@vger.kernel.org" <netdev@vger.kernel.org>,
        "Hansen, Dave" <dave.hansen@intel.com>
Content-Transfer-Encoding: quoted-printable
Message-Id: <1913CD9F-B912-490A-8DEC-8C24CFF0F6D6@amacapital.net>
References: <20181128000754.18056-1-rick.p.edgecombe@intel.com> <20181128000754.18056-2-rick.p.edgecombe@intel.com> <4883FED1-D0EC-41B0-A90F-1A697756D41D@gmail.com> <20181204160304.GB7195@arm.com> <51281e69a3722014f718a6840f43b2e6773eed90.camel@intel.com> <CALCETrUiEWkSjnruCbBSi8WsDm071YiU5WEqoPhZbjezS0CrFw@mail.gmail.com> <58a3b01c78b6c299f76c156f96211ff22ec28751.camel@intel.com>
To: "Edgecombe, Rick P" <rick.p.edgecombe@intel.com>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org



> On Dec 4, 2018, at 3:52 PM, Edgecombe, Rick P <rick.p.edgecombe@intel.com>=
 wrote:
>=20
>> On Tue, 2018-12-04 at 12:09 -0800, Andy Lutomirski wrote:
>> On Tue, Dec 4, 2018 at 12:02 PM Edgecombe, Rick P
>> <rick.p.edgecombe@intel.com> wrote:
>>>=20
>>>> On Tue, 2018-12-04 at 16:03 +0000, Will Deacon wrote:
>>>> On Mon, Dec 03, 2018 at 05:43:11PM -0800, Nadav Amit wrote:
>>>>>> On Nov 27, 2018, at 4:07 PM, Rick Edgecombe <
>>>>>> rick.p.edgecombe@intel.com>
>>>>>> wrote:
>>>>>>=20
>>>>>> Since vfree will lazily flush the TLB, but not lazily free the
>>>>>> underlying
>>>>>> pages,
>>>>>> it often leaves stale TLB entries to freed pages that could get re-
>>>>>> used.
>>>>>> This is
>>>>>> undesirable for cases where the memory being freed has special
>>>>>> permissions
>>>>>> such
>>>>>> as executable.
>>>>>=20
>>>>> So I am trying to finish my patch-set for preventing transient W+X
>>>>> mappings
>>>>> from taking space, by handling kprobes & ftrace that I missed (thanks
>>>>> again
>>>>> for
>>>>> pointing it out).
>>>>>=20
>>>>> But all of the sudden, I don=E2=80=99t understand why we have the prob=
lem that
>>>>> this
>>>>> (your) patch-set deals with at all. We already change the mappings to
>>>>> make
>>>>> the memory writable before freeing the memory, so why can=E2=80=99t we=
 make it
>>>>> non-executable at the same time? Actually, why do we make the module
>>>>> memory,
>>>>> including its data executable before freeing it???
>>>>=20
>>>> Yeah, this is really confusing, but I have a suspicion it's a combinati=
on
>>>> of the various different configurations and hysterical raisins. We can'=
t
>>>> rely on module_alloc() allocating from the vmalloc area (see nios2) nor=

>>>> can we rely on disable_ro_nx() being available at build time.
>>>>=20
>>>> If we *could* rely on module allocations always using vmalloc(), then
>>>> we could pass in Rick's new flag and drop disable_ro_nx() altogether
>>>> afaict -- who cares about the memory attributes of a mapping that's abo=
ut
>>>> to disappear anyway?
>>>>=20
>>>> Is it just nios2 that does something different?
>>>>=20
>>>> Will
>>>=20
>>> Yea it is really intertwined. I think for x86, set_memory_nx everywhere
>>> would
>>> solve it as well, in fact that was what I first thought the solution sho=
uld
>>> be
>>> until this was suggested. It's interesting that from the other thread Ma=
sami
>>> Hiramatsu referenced, set_memory_nx was suggested last year and would ha=
ve
>>> inadvertently blocked this on x86. But, on the other architectures I hav=
e
>>> since
>>> learned it is a bit different.
>>>=20
>>> It looks like actually most arch's don't re-define set_memory_*, and so a=
ll
>>> of
>>> the frob_* functions are actually just noops. In which case allocating R=
WX
>>> is
>>> needed to make it work at all, because that is what the allocation is go=
ing
>>> to
>>> stay at. So in these archs, set_memory_nx won't solve it because it will=
 do
>>> nothing.
>>>=20
>>> On x86 I think you cannot get rid of disable_ro_nx fully because there i=
s
>>> the
>>> changing of the permissions on the directmap as well. You don't want som=
e
>>> other
>>> caller getting a page that was left RO when freed and then trying to wri=
te
>>> to
>>> it, if I understand this.
>>>=20
>>=20
>> Exactly.
>>=20
>> After slightly more thought, I suggest renaming VM_IMMEDIATE_UNMAP to
>> VM_MAY_ADJUST_PERMS or similar.  It would have the semantics you want,
>> but it would also call some arch hooks to put back the direct map
>> permissions before the flush.  Does that seem reasonable?  It would
>> need to be hooked up that implement set_memory_ro(), but that should
>> be quite easy.  If nothing else, it could fall back to set_memory_ro()
>> in the absence of a better implementation.
>=20
> With arch hooks, I guess we could remove disable_ro_nx then. I think you w=
ould
> still have to flush twice on x86 to really have no W^X violating window fr=
om the
> direct map (I think x86 is the only one that sets permissions there?). But=
 this
> could be down from sometimes 3. You could also directly vfree non exec RO m=
emory
> without set_memory_, like in BPF.=20

Just one flush if you=E2=80=99re careful. Set the memory not-present in the d=
irect map and zap it from the vmap area, then flush, then set it RW in the=20=


>=20
> The vfree deferred list would need to be moved since it then couldn't reus=
e the
> allocations since now the vfreed memory might be RO. It could kmalloc, or l=
ookup
> the vm_struct. So would probably be a little slower in the interrupt case.=
 Is
> this ok?

I=E2=80=99m fine with that. For eBPF, we should really have a lookaside list=
 for small allocations.

