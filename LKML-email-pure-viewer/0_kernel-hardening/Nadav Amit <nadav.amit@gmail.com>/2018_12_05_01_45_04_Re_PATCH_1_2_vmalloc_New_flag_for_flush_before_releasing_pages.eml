Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 05 Dec 2018 14:28:17 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 381D558014B;
	Tue,  4 Dec 2018 17:45:14 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga001-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 04 Dec 2018 17:45:14 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AMqzwBBUCfkkaB149Tq0yG6a1ocjV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhCCtKdThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGp+z?=
 =?us-ascii?q?YIQSAeQBP+lWoYbzqVgArRWgAgesH/vvxz1Ti3/qxK061vgtEQHa0AEiGd8FrX?=
 =?us-ascii?q?TarM/yNKcXSe271LPHwijZYPNIxDzw9I3IchE9ofqRWr9wd9DexlQ1GAPblFmf?=
 =?us-ascii?q?s4nlPzKJ1ukWvGib6vBvVeOri2I9tw5xpT2vy94qh4LUhYwV0kjJ+TtlzIsxP9?=
 =?us-ascii?q?G0VUB2bcC+HJdNtCyWK5F6T8IgTm1wpio21r4LtYS/cSQX0pgr2QTTZ+GBfoOV?=
 =?us-ascii?q?+BzsTvyRLi19hH99eLKwmRKy8U+4x+3iWcm7zkxKojBGktbSrHAN0QLc6sydRv?=
 =?us-ascii?q?t65Eeh1i6D1wHV6u5aPUA5jbTXJ4Ilz7Iqi5Yev1rPEjXrlEj1kKOabEQp9+qw?=
 =?us-ascii?q?5+TieLrmp5ucN4FuigH5N6Qjgsi/AeU+MggTUGmX4Oe826P5/U3/XrpKiuQ6kq?=
 =?us-ascii?q?7XsZDcO8sbvLW0AxFa0ok98RazFTSm38oCnXkBMl1FfAiLj4/zO1HBOPz4F+uw?=
 =?us-ascii?q?g0ywkDd3wPDLJrnhApTOLnfdirvgcqt95lVYyAoyy9Bf+p1VBqsAIPL1Rk/+qt?=
 =?us-ascii?q?jYAgUlPAyzxubtEM992Z8GWWKTHq+ZN7vfsV+S6eIuP+mDfogVtCz9K/g4/fHu?=
 =?us-ascii?q?i3A5lEQZfamo25sXdX+5Eu5nI0WffXrjnNMBHX0WsQo5SezgkEeCXiJLZ3auQ6?=
 =?us-ascii?q?I84Sk2CIChDYjdXIytg7uB3CG9Hp1RfW1GDlGMEXH1d4SLQfsMaSSSItN/nTwA?=
 =?us-ascii?q?T7SuV4gh1RS2vg/g17VnNvbU+jEftZ/7ztd1/O3TlRYx9TBuFcSSyWONQnpwnm?=
 =?us-ascii?q?MJQT82wa9+rVZ8yleFzah3nfhYGcZP6PNOVwcwLYTcwPBiC9DuRgLBec+ESFW8?=
 =?us-ascii?q?TdWgGz0xStMxzMUIY0ZyANiiihHD3yy3A74ajbCLBZo08r7C0Hj1Pcpy13HG1K?=
 =?us-ascii?q?w5hVk8XsRPLXGmhrJ49wXLGoHGiVuZmLiweaQcxiHN8nyDwnSIvE1fVA5wUqDF?=
 =?us-ascii?q?XXQEa0vSrNT54F7CTrC0BbQmNAtB1dCNKq9QZtL1ilVGQe/pOM7CbGKph2ewGR?=
 =?us-ascii?q?GIy6uRY4XwZWUSwj/RCEgenAAV5naJKw4+Czylo2LfCjxuCF3ub1nt8el4tHO0?=
 =?us-ascii?q?UEs0wxuWYE1m0rq/4gQViuCES/MPwrIEvz8sqyl1HFa42NLWF9qApgp7cKVAe9?=
 =?us-ascii?q?89501H1WbYtwx7MZytNKRihl8YcwRqsELizRR3CoNckcc0qHMm1hZ9KaWd0FlZ?=
 =?us-ascii?q?bTOXwYjwOqHLKmn15B2gcarW1U/R0dmI+qYD8u83q0j+sw6zEEoi8HJn08dO3n?=
 =?us-ascii?q?uY55XKChcSUJ3rXkY28Rh6u6/VYi0n64zI0n1sNLG+siXe1NIxGOsl1hGgcs9f?=
 =?us-ascii?q?MaOZDgP9D9cWBsmuKOMwnVipYQkJPORT9K4yIsOneOGK2K+tPOZ8gj2miX5L75?=
 =?us-ascii?q?x60kKJ7yB8UPLH344Zw/GE2QuKTy38jFa9vc/tg4BLeDYSEnC5ySf6Ho5RZ7R+?=
 =?us-ascii?q?cpoRBmeqPsK42M9+h5nrW3ND8F6jBlUG2NKmeBaIblz92xFQ2loToXC9hSS4yD?=
 =?us-ascii?q?l0mSkzrqWDxCzO3/jidB0fN29LRWlul1ftLZKvj9AHWkildAwplBqj5UbnyKlX?=
 =?us-ascii?q?vqV/L2/PQUhWeyj6NX1tUqy1trCaec5A9IsosTlLUOS7eV2aSKTyowEZ0yPgGG?=
 =?us-ascii?q?tS3is7eCupupX6nhx6jnySLHBooXrdeMFwwwrf5dPGSf5Q2DoGWDd3iT3NCleg?=
 =?us-ascii?q?ONmp+M2el43fveCmS2KhSppTfDHrzIyasyu3/29qARy5n/2ont3nEA460TL01t?=
 =?us-ascii?q?VwVCXIqgr8bZfv16igLe1neUxoDkfm68VmAoF+jpcwhJYI1HgZnJqV/GALkWfu?=
 =?us-ascii?q?MdpB36L+Y2EARToKw97T/Qjk11dvLnOPx4LlSHqdxtFtaMW9YmMTwig99dxFCL?=
 =?us-ascii?q?+I7LxYmit4ul+4rQPSYfdnhDscx+Uh6GUGg+4Xogoi1TuSAqodHURDOSzslhKI?=
 =?us-ascii?q?782xralNZWavd6Sw21R6ndy7EL6CpQRcUm7jepg+BS9w8tl/MFXU3X3v7YHkfc?=
 =?us-ascii?q?PcbNMJuR2SjhfAlPNVKJMqm/oOhCpnP3/9vHI/x+46ixxuwY+1vIydJ2px+6K5?=
 =?us-ascii?q?BwZSNifpaMML5jHtkaFek96N0I+1GZVhHigLUIHsTfK1Cz8SsfXnNwCTEDwzsH?=
 =?us-ascii?q?ubGLzfHROB50ditX7AD5erN3SPLnkD0dpiXAWdJFBYgA0MXjU1hJs5GR6xxMD7?=
 =?us-ascii?q?bEd1/DMR5kP7qhtRzOJnLQL/X3zbpAepbDc0VZeeIABX7gFE+0faL8ie4vhvEC?=
 =?us-ascii?q?Ff+52rtBaNJXCDZwRUEWEJXVSJBlDkPrmz/NnA7vKXBuykI/vVZrWOr+NeWuyM?=
 =?us-ascii?q?xZKu1Itm4jmNOt+OPnlkE/00xE5DUWplFMTenjUFUzYXmD7Vb86HuBe8/TV6rs?=
 =?us-ascii?q?Ch//TqWwLv5oqPB6FRMdV1/BC2jrmMN/SNhCZiMjtY0pIMxXnVyLkQxlISiidu?=
 =?us-ascii?q?dyWzHrQEryLCUKXQmqpPBR4BdyxzLNdI77473gRVI8Hbl8j61qRmgf81EVtFUV?=
 =?us-ascii?q?3hl9qtZcwLJWG9KVzGCFyKNLSAOT3E3cX3bbmgRr1XieVerwewtiqDE0//IjSD?=
 =?us-ascii?q?kCHkVwyuMeFJli2UIAZSt529chlzD2juV9bmahy9MN9qgjw627w0hnXWNWECNT?=
 =?us-ascii?q?hwaV9CrrqV7SlAmPVwB3RB7mZ5LemDgyuY7/PXKpATsftqBCR7j+Nb4HQgxLtT?=
 =?us-ascii?q?4yFJX/h1mCrUrt5zrFCqiOiPyjx7UBVQrjZHnp6EvUJnOfaRyp4VE1vI8x8G6m?=
 =?us-ascii?q?CaBlBCndpuCZXX8egE0NnEl+TrbjpO/N/f+s4WCuDVLt6KNDwqNh+/SxDOCw5Q?=
 =?us-ascii?q?azenPH+XrklcjLnG8HSZp4Z8o53thLIBT7ZaUBo+EfZMWRctJ8ALPJoiBmBsqr?=
 =?us-ascii?q?WclsNdoCPm9BQ=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BDAAC3LAdch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBVAQBAQsBg2sng3mUJ4FoJRSJD446gV8SAQEYEwGEQIMMIjcGDQEDAQEBAQE?=
 =?us-ascii?q?BAgETAQEBCA0JCCkjDII2JAGCYQEBAQECAQECIB0BGx0BAwEBCQEBBQULDQICJ?=
 =?us-ascii?q?gICAx4CEQEFARwGEwUWgwaBaQEDDQgFmV08iw2BEgUBF4J3BYQ+ChknDV2BNwI?=
 =?us-ascii?q?GEnmLE4FXP4ERJwwTgh4ugleCExeDBDGCJgKLIIUOj2wuBwKCIASLb4MuGIFbi?=
 =?us-ascii?q?AAQJocVigmEcYZ4gl0CBAIEBQIFDyGBO4F3MxojUCoBBoI7PoFdDBeDSop0HzI?=
 =?us-ascii?q?BgQQBAYsdBQEB?=
X-IPAS-Result: =?us-ascii?q?A0BDAAC3LAdch0O0hNFkHAEBAQQBAQcEAQGBVAQBAQsBg2s?=
 =?us-ascii?q?ng3mUJ4FoJRSJD446gV8SAQEYEwGEQIMMIjcGDQEDAQEBAQEBAgETAQEBCA0JC?=
 =?us-ascii?q?CkjDII2JAGCYQEBAQECAQECIB0BGx0BAwEBCQEBBQULDQICJgICAx4CEQEFARw?=
 =?us-ascii?q?GEwUWgwaBaQEDDQgFmV08iw2BEgUBF4J3BYQ+ChknDV2BNwIGEnmLE4FXP4ERJ?=
 =?us-ascii?q?wwTgh4ugleCExeDBDGCJgKLIIUOj2wuBwKCIASLb4MuGIFbiAAQJocVigmEcYZ?=
 =?us-ascii?q?4gl0CBAIEBQIFDyGBO4F3MxojUCoBBoI7PoFdDBeDSop0HzIBgQQBAYsdBQEB?=
X-IronPort-AV: E=Sophos;i="5.56,316,1539673200"; 
   d="scan'208";a="43587412"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 04 Dec 2018 17:45:12 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726840AbeLEBpJ (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 4 Dec 2018 20:45:09 -0500
Received: from mail-pg1-f179.google.com ([209.85.215.179]:33154 "EHLO
        mail-pg1-f179.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726092AbeLEBpJ (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 4 Dec 2018 20:45:09 -0500
Received: by mail-pg1-f179.google.com with SMTP id z11so8244907pgu.0;
        Tue, 04 Dec 2018 17:45:08 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:subject:from:in-reply-to:date:cc
         :content-transfer-encoding:message-id:references:to;
        bh=IEbxTq5/NJcA2hpgMt7+0lllopevnpygJwYQ5Cpw9UA=;
        b=skQMxdcnaJRIhuFhQE6SQjWl++NargdRD8Tjw7LXWNgmHeQP9yORHiCa14AxNyBSwg
         MhZuqF9Yibq/FlMM25vgFto+XytzFiO+HkPWaXZ4L3uZdIMG42NJjjvq1SicdYfEkkuR
         QsFz+tg+D9AqhxR3FHu01/cE0n4kI7Pd1iw1HTxV9dlGWBUe4TH0w26g8haHaK2zkJ5h
         56OXDnngXH9y3CRfPh+WmHKZPcjpo1+cZ8mMSx6l/LtSGK2EcooLWUn2Qpkr9MqWjfzz
         /+0LaBkmym4bsTY1UQmy/uSDWeNRuYeE8HiOngo02Unkmc9hpDI1J2Wv3fPbw689Q638
         yZvQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:subject:from:in-reply-to:date:cc
         :content-transfer-encoding:message-id:references:to;
        bh=IEbxTq5/NJcA2hpgMt7+0lllopevnpygJwYQ5Cpw9UA=;
        b=fi+LcQAVpDEaztvKhQd1yAAFGsv8YbJKyfm5EfaAiDgEE3bHWaHKNOPwPWea0samQ+
         FOVnnefLJWKMlOVfyfx1cFKQkSdcN6An98oOm96HApyYCwPFEWBM+cHBZr/C0ZxxsHGN
         VBox86uAyXhlgO0SePzxHnye47+Va8SKPUSojgVJtDCF+W3sxsH4Jpd0zylU9QnevnIf
         5xslCMCVCR5KQ2HDwpaCenrAOpztRrJZRxM8u8USk6ubh5E/1SuVvJX1gZSEAzQvXrku
         OziHpyIa0eRzr1L85XCP8xldgG3Q8qgh2vGomlmN1+DbqYuOmjl8Zu3y4IqeaA0ZwhSU
         oZ1A==
X-Gm-Message-State: AA+aEWZqa6D6MgpkExN0afOVV48e754VrW/TytKAicuSVPM19PqDo8dK
        5AxY3lv/noZDy5tuEMkEmGI=
X-Google-Smtp-Source: AFSGD/WovANz+G+bYGDMYFF/heTHBlSnnuoUNpseRGB+Igcd6KdMvTlqo2PZVaihtJKMT4LSLiz/5Q==
X-Received: by 2002:a62:109b:: with SMTP id 27mr21928622pfq.227.1543974307771;
        Tue, 04 Dec 2018 17:45:07 -0800 (PST)
Received: from [10.2.19.70] ([208.91.2.1])
        by smtp.gmail.com with ESMTPSA id a18sm20440293pgj.30.2018.12.04.17.45.05
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Tue, 04 Dec 2018 17:45:06 -0800 (PST)
Content-Type: text/plain;
        charset=utf-8
Mime-Version: 1.0 (Mac OS X Mail 12.1 \(3445.101.1\))
Subject: Re: [PATCH 1/2] vmalloc: New flag for flush before releasing pages
From: Nadav Amit <nadav.amit@gmail.com>
In-Reply-To: <3c217322e990eba0269cc5ffea761cc1a5b17f4e.camel@intel.com>
Date: Tue, 4 Dec 2018 17:45:04 -0800
Cc: "luto@kernel.org" <luto@kernel.org>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        "daniel@iogearbox.net" <daniel@iogearbox.net>,
        "jeyu@kernel.org" <jeyu@kernel.org>,
        "rostedt@goodmis.org" <rostedt@goodmis.org>,
        "ast@kernel.org" <ast@kernel.org>,
        "ard.biesheuvel@linaro.org" <ard.biesheuvel@linaro.org>,
        "linux-mm@kvack.org" <linux-mm@kvack.org>,
        "jannh@google.com" <jannh@google.com>,
        "Dock, Deneen T" <deneen.t.dock@intel.com>,
        "peterz@infradead.org" <peterz@infradead.org>,
        "kristen@linux.intel.com" <kristen@linux.intel.com>,
        "akpm@linux-foundation.org" <akpm@linux-foundation.org>,
        "will.deacon@arm.com" <will.deacon@arm.com>,
        "mingo@redhat.com" <mingo@redhat.com>,
        "kernel-hardening@lists.openwall.com" 
        <kernel-hardening@lists.openwall.com>,
        "Keshavamurthy, Anil S" <anil.s.keshavamurthy@intel.com>,
        "mhiramat@kernel.org" <mhiramat@kernel.org>,
        "naveen.n.rao@linux.vnet.ibm.com" <naveen.n.rao@linux.vnet.ibm.com>,
        "davem@davemloft.net" <davem@davemloft.net>,
        "netdev@vger.kernel.org" <netdev@vger.kernel.org>,
        "Hansen, Dave" <dave.hansen@intel.com>
Content-Transfer-Encoding: quoted-printable
Message-Id: <BA406CD6-1938-439B-A723-008AF84BFEF3@gmail.com>
References: <20181128000754.18056-1-rick.p.edgecombe@intel.com>
 <20181128000754.18056-2-rick.p.edgecombe@intel.com>
 <4883FED1-D0EC-41B0-A90F-1A697756D41D@gmail.com>
 <CALCETrXvddt148fncMJqpjK98uatiK-44knYFWU0-ytf8X+iog@mail.gmail.com>
 <08141F66-F3E6-4CC5-AF91-1ED5F101A54C@gmail.com>
 <CALCETrXLrsKDBzDkN7sc9HYPWe9aV3NQzf4vMvM+FD8j6aA6AQ@mail.gmail.com>
 <20CC2F71-308D-42E2-8C54-F64D7CC3863F@gmail.com>
 <3c217322e990eba0269cc5ffea761cc1a5b17f4e.camel@intel.com>
To: "Edgecombe, Rick P" <rick.p.edgecombe@intel.com>
X-Mailer: Apple Mail (2.3445.101.1)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

> On Dec 4, 2018, at 5:09 PM, Edgecombe, Rick P =
<rick.p.edgecombe@intel.com> wrote:
>=20
> On Tue, 2018-12-04 at 14:48 -0800, Nadav Amit wrote:
>>> On Dec 4, 2018, at 11:48 AM, Andy Lutomirski <luto@kernel.org> =
wrote:
>>>=20
>>> On Tue, Dec 4, 2018 at 11:45 AM Nadav Amit <nadav.amit@gmail.com> =
wrote:
>>>>> On Dec 4, 2018, at 10:56 AM, Andy Lutomirski <luto@kernel.org> =
wrote:
>>>>>=20
>>>>> On Mon, Dec 3, 2018 at 5:43 PM Nadav Amit <nadav.amit@gmail.com> =
wrote:
>>>>>>> On Nov 27, 2018, at 4:07 PM, Rick Edgecombe <
>>>>>>> rick.p.edgecombe@intel.com> wrote:
>>>>>>>=20
>>>>>>> Since vfree will lazily flush the TLB, but not lazily free the
>>>>>>> underlying pages,
>>>>>>> it often leaves stale TLB entries to freed pages that could get =
re-
>>>>>>> used. This is
>>>>>>> undesirable for cases where the memory being freed has special
>>>>>>> permissions such
>>>>>>> as executable.
>>>>>>=20
>>>>>> So I am trying to finish my patch-set for preventing transient =
W+X
>>>>>> mappings
>>>>>> from taking space, by handling kprobes & ftrace that I missed =
(thanks
>>>>>> again for
>>>>>> pointing it out).
>>>>>>=20
>>>>>> But all of the sudden, I don=E2=80=99t understand why we have the =
problem that
>>>>>> this
>>>>>> (your) patch-set deals with at all. We already change the =
mappings to
>>>>>> make
>>>>>> the memory writable before freeing the memory, so why can=E2=80=99t=
 we make it
>>>>>> non-executable at the same time? Actually, why do we make the =
module
>>>>>> memory,
>>>>>> including its data executable before freeing it???
>>>>>=20
>>>>> All the code you're looking at is IMO a very awkward and possibly
>>>>> incorrect of doing what's actually necessary: putting the direct =
map
>>>>> the way it wants to be.
>>>>>=20
>>>>> Can't we shove this entirely mess into vunmap?  Have a flag (as =
part
>>>>> of vmalloc like in Rick's patch or as a flag passed to a vfree =
variant
>>>>> directly) that makes the vunmap code that frees the underlying =
pages
>>>>> also reset their permissions?
>>>>>=20
>>>>> Right now, we muck with set_memory_rw() and set_memory_nx(), which
>>>>> both have very awkward (and inconsistent with each other!) =
semantics
>>>>> when called on vmalloc memory.  And they have their own flushes, =
which
>>>>> is inefficient.  Maybe the right solution is for vunmap to remove =
the
>>>>> vmap area PTEs, call into a function like set_memory_rw() that =
resets
>>>>> the direct maps to their default permissions *without* flushing, =
and
>>>>> then to do a single flush for everything.  Or, even better, to =
cause
>>>>> the change_page_attr code to do the flush and also to flush the =
vmap
>>>>> area all at once so that very small free operations can flush =
single
>>>>> pages instead of flushing globally.
>>>>=20
>>>> Thanks for the explanation. I read it just after I realized that =
indeed
>>>> the
>>>> whole purpose of this code is to get cpa_process_alias()
>>>> update the corresponding direct mapping.
>>>>=20
>>>> This thing (pageattr.c) indeed seems over-engineered and very =
unintuitive.
>>>> Right now I have a list of patch-sets that I owe, so I don=E2=80=99t =
have the time
>>>> to deal with it.
>>>>=20
>>>> But, I still think that disable_ro_nx() should not call =
set_memory_x().
>>>> IIUC, this breaks W+X of the direct-mapping which correspond with =
the
>>>> module
>>>> memory. Does it ever stop being W+X?? I=E2=80=99ll have another =
look.
>>>=20
>>> Dunno.  I did once chase down a bug where some memory got freed =
while
>>> it was still read-only, and the results were hilarious and hard to
>>> debug, since the explosion happened long after the buggy code
>>> finished.
>>=20
>> This piece of code causes me pain and misery.
>>=20
>> So, it turns out that the direct map is *not* changed if you just =
change
>> the NX-bit. See change_page_attr_set_clr():
>>=20
>>        /* No alias checking for _NX bit modifications */
>>        checkalias =3D (pgprot_val(mask_set) | pgprot_val(mask_clr)) =
!=3D
>> _PAGE_NX;
>>=20
>> How many levels of abstraction are broken in the way? What would =
happen
>> if somebody tries to change the NX-bit and some other bit in the PTE?
>> Luckily, I don=E2=80=99t think someone does=E2=80=A6 at least for =
now.
>>=20
>> So, again, I think the change I proposed makes sense. nios2 does not =
have
>> set_memory_x() and it will not be affected.
> Hold on...so on architectures that don't have set_memory_ but do have =
something
> like NX, wont the executable stale TLB continue to live to re-used =
pages, and so
> it doesn't fix the problem this patch is trying to address generally? =
I see at
> least a couple archs use vmalloc and have an exec bit, but don't =
define
> set_memory_*.

Again, this does not come instead of your patch (the one in this =
thread).
And if you follow Andy=E2=80=99s suggestion, the patch I propose will =
not be needed.
However, in the meantime - I see no reason to mark data as executable, =
even
for a brief period of time.

