Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 05 Dec 2018 14:28:26 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from FMSMGA003.fm.intel.com (fmsmga003.fm.intel.com [10.253.24.29])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 79CCC58014B;
	Tue,  4 Dec 2018 18:09:13 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by FMSMGA003-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 04 Dec 2018 18:09:13 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AoXNH0RSxTyy7E+2MWhfj+kvw8Npsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64YRWCt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZHoyz?=
 =?us-ascii?q?YJYBAeoDMuhWoIfzpFUOowW5Cwm3HOPiyCRFhmPv3a0/z+ghER3K0Q4mEtkTsH?=
 =?us-ascii?q?rUttL1NKIKXO6t1qbH0C/Mb+1L0jrh7YjIcwwhquyLULJ2a8Xe1FMgFx3fglqK?=
 =?us-ascii?q?rIzlPi+V2/8Cs2ie9eVgVOavh3Q7pAF2pzii38EhgZTHiIISz1DL7yR5wIAtKN?=
 =?us-ascii?q?28S057ZNqkHIFXtyGAOIt6WsAiTH9yuCY81LIGvYS3fC8QyJQowRPUdv+Jc5CQ?=
 =?us-ascii?q?7x79SOqcJS10iG9rdb6hnRq+7EutxvHmWsS10ltGtjRJnsXPu3wX0xHf99KLRu?=
 =?us-ascii?q?Vn8ku83zuEyhrd5fteIU8ukKrWM54hzaA0lpoUqUnDACD2l1vsjKOMdUUr5PKo?=
 =?us-ascii?q?6+L5bbXivJOcMJV0ig7mPqQvnMywH/g4PxAQU2SH/emwzqDv8EPnTLlQk/E7kb?=
 =?us-ascii?q?XVvIrbKMkZvqK5BhVa0ocn6xaxFTem19EYkGEDLFJEfhKHkofoN0jNIP/mF/e/?=
 =?us-ascii?q?hUqjkDNyy/DBMLzhBIvCLmLYnbf/crZy9VRcxBAwzd9B/ZJUDK8OIPbpVk/2rt?=
 =?us-ascii?q?zYAQc1MxaozOb/FNV9yoQeVHqLAq+YM6Pdr0WE5+0yI+SXYI8VuTD9K+Uq5vL0?=
 =?us-ascii?q?jH85n0Mdcret3ZcNdH+4GfFmKV2DYXXwmtcBDXsKvg0mQezqklKCUCJTaGy1X6?=
 =?us-ascii?q?4m5jE7FZipDYHMRo22hLyB3SG7HoBZZ2xcC1CMF2voeJuAW/sWdC2SJcphmCQe?=
 =?us-ascii?q?Vbe9U48hyQ2utAjixrplKerb5DcUtZHk1Nhz4e3Tkgo/9Th1D8SbzmGMQHt4nm?=
 =?us-ascii?q?IORz8qwq9/pVZxxUuE0ah9m/ZYD8Bc5+tVUgcmMp7R1/Z1C8vyWgLGfdeFUkym?=
 =?us-ascii?q?Tc+kATwqStIxwtkOY1tyGtm4jxDD2TaqDKERl7CRGJM09afc1WDrJ8lh03bGyL?=
 =?us-ascii?q?Uhj14+T8tML2KmgLRz9wzSB4HTlUWZmL2ndaAd3C7L6WeCwnCCvEBeUA5sT6rF?=
 =?us-ascii?q?WWoTaVfRrdT8/knCVaOhCaw7Mgtdzs6PMrZFZcf3jVpYXvvjOM7RY2Sqm2iuAx?=
 =?us-ascii?q?aEwbeMbInve2UZxyjdDEkEkwYO/XeJLwQ+ByGho37AAzxqD17gf0Ts8exmonOh?=
 =?us-ascii?q?UkA01x2Kb1Fm17et5xEan+KcRO0J0rIEoighrS50E0i739/ND9qApgxhfLhTYN?=
 =?us-ascii?q?8n4VdH037ZuBJ5PpC6M69igVseeRxtv0zyzxV3FplAkc8yoXM2zQpyLKWY0E9B?=
 =?us-ascii?q?dzKYx5zwJqfbKm7o/BCraq7W3F7e3c2S+qcO7vQ4tlrisBuoFkok73Vozd1V32?=
 =?us-ascii?q?GA6ZXNCQoYSYjxXVov9xhmu7HaZTEw6JnQ1XJyPqi7rD/D18gyC+s41xmvZdFf?=
 =?us-ascii?q?MKCDFA/sCMAaA8muKOo3m1mmdB4EPeZS9LIqMMOibfeJxKmrPON4ljK8kWtH+J?=
 =?us-ascii?q?x90l6L9ydkSu/IwowJzO2C0gqGVzfzllGhss/slIBAZDESGHe/yCf+CI5QYK1y?=
 =?us-ascii?q?YZgECWO0L8KrwdV+gobnW2RE+167G1MGxMipdAKIb1z8wQJfz14XrmGgmSeiyT?=
 =?us-ascii?q?x7jSsprquG0CPS2evicAcINXBRRGlli1fhOoy0j9EcXEi1YAkljhql5UDmx6dF?=
 =?us-ascii?q?oKRzNXXcQUBNfyLuNWFtTrOwtqaeY85I8J4psSRXXP68YFyAUb79vh0a3jjnH2?=
 =?us-ascii?q?tfwjA7aj6rto/4nxx8lGKSMnJzoGDFdsF3wBfV/MbcSuJJ3joaWCl4jiHaBlqm?=
 =?us-ascii?q?MNmz/tWUlJDDvvqlV227VZ1TcijrzYWeuyu9/mBqBRy/n/aumtzoCwQ60Cn718?=
 =?us-ascii?q?V0WiXMthrzfo7r16GiO+J9YkZoHEP869Z9Goxmkoo/npYQ1WIYhpWU+3oKimPz?=
 =?us-ascii?q?MdRd2aLjY3sBXz8Lw9jJ4Af73E1vNG6Gx4X8Vn+F2Mtue8G6Yn8K2iI6981KC7?=
 =?us-ascii?q?2b7L1ekSt1v1q3twTRYfdmkzcZyPsu7mMagu4TtAosyCWdHq4dHU1CMSPwkBSI?=
 =?us-ascii?q?6si0rL9La2a3bbiwyE1+kMikDLGDoQFTQmz1e5k8Ei9r8sVwLkjM32bt5YH+d9?=
 =?us-ascii?q?nddtYTthySkxfdgOlZMpMxlvwWhSV5PWLxp2Eqy+k+jRZ2x5G1oJCHK3lx/KK+?=
 =?us-ascii?q?GhNYKjr1Z8YJ9jDsl6lemNuW35u0HpVgATgLWJroTfS1EDMdr/jnNgCOECEipX?=
 =?us-ascii?q?efA7bQAQif6EJ+pXLVD5+rL22XJGUezdh6XxaSPktfgAQJXDkgmp45CxunxMjg?=
 =?us-ascii?q?cEd/+zAQ6UT0qhpKyuJ0KRb/Vn3TqxuvajcxUJKfNgZZ7hle50fJNsyT9uBzED?=
 =?us-ascii?q?td/pK/twyBMHCbax5LDWEUWUyEGlbjMaO15dTb9+iYB+y+L+bBYLmUqOxeUeuI?=
 =?us-ascii?q?yoyr0od84zmMMcCPNGF4D/InwkpDQWx5G8PBljQPTCwXijvNb9OBqxe64CF3tc?=
 =?us-ascii?q?e/8PLkWA/04YuPCr1SMchg+hysgKeDMfKQizh9KTpCypwMwnrIwqAF3FEOkyFu?=
 =?us-ascii?q?ayWtEbMYuC7NUq3Qm6xXDx0aay9pN8tI9aU83gZTNs7Bl9P1zaV1jvo0C1dDSF?=
 =?us-ascii?q?zgldulZc0MI2GhKlzHAFyHO6iBJT3O28v3e7+zSaVMjOVIsB29oSyUE1L4MTSZ?=
 =?us-ascii?q?iTboVwqjMeVNjCyAOBxeuYe9cgtiCGT5TdLmbAG7P8FzjTEs3bI0gXbKP3YGMT?=
 =?us-ascii?q?dga0NNsqGQ7SRAj/VjGmxB62BpIvWelymF7+nXNJAWvOBvAiR1keJa/Xs7x6FU?=
 =?us-ascii?q?7CFCWPx6hi/SosRyrFGhl+mF0iBnXwZWqjZXmIKLul1vOKXD+ZlGXHbE/RQN4n?=
 =?us-ascii?q?2RChQKvdRlDNLvtrtUytjOkqLzNThD/8jV/csaG8jbNsaHPGA9PhruHT6HRDcC?=
 =?us-ascii?q?GHSGOW7SjEtYmvzWvkeUpZtyktKkzIAPQbwdTBo4GvwXAUNgFtEqIZFrUzdimr?=
 =?us-ascii?q?me2p0m/327+T/YSMxE9rnCV+7aVfPmJD+Hy7BBZgcgzrbxLIBVPYr+jR8xImJm?=
 =?us-ascii?q?lZjHThKDFetGpTdsO0pt+B1A?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BbAABRMgdch0O0hNFkGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBZYJqgQIng3mUJ4FoJRSJfY1MgWIPAQEYCwgBhECDDCI4EgEDAQEBAQE?=
 =?us-ascii?q?BAgETAQEBCA0JCCkjDII2JAGCYQEBAQECAQECIB0BGxgFAQMBAQkBAQUFCw0CA?=
 =?us-ascii?q?iYCAgMgEQEFARwGEwUWgwYBgWgBAw0IBQqZRzyLDYESBQEXgncFgTEBgwwKGSc?=
 =?us-ascii?q?NXYE3AgEFEnmLE4FXP4E4DBOCHi6DBRkBA4FHGIMEMYImAosghQ6PRVUHAoIgB?=
 =?us-ascii?q?IRfij4YgVuFEYJvEIc7jW6IBIJdAgQCBAUCBQ8hgTyBdjMaI3oBBoI7Hx+BXQs?=
 =?us-ascii?q?BF4NKhRSFYB8yAYEEAQGLIgEB?=
X-IPAS-Result: =?us-ascii?q?A0BbAABRMgdch0O0hNFkGwEBAQEDAQEBBwMBAQGBZYJqgQI?=
 =?us-ascii?q?ng3mUJ4FoJRSJfY1MgWIPAQEYCwgBhECDDCI4EgEDAQEBAQEBAgETAQEBCA0JC?=
 =?us-ascii?q?CkjDII2JAGCYQEBAQECAQECIB0BGxgFAQMBAQkBAQUFCw0CAiYCAgMgEQEFARw?=
 =?us-ascii?q?GEwUWgwYBgWgBAw0IBQqZRzyLDYESBQEXgncFgTEBgwwKGScNXYE3AgEFEnmLE?=
 =?us-ascii?q?4FXP4E4DBOCHi6DBRkBA4FHGIMEMYImAosghQ6PRVUHAoIgBIRfij4YgVuFEYJ?=
 =?us-ascii?q?vEIc7jW6IBIJdAgQCBAUCBQ8hgTyBdjMaI3oBBoI7Hx+BXQsBF4NKhRSFYB8yA?=
 =?us-ascii?q?YEEAQGLIgEB?=
X-IronPort-AV: E=Sophos;i="5.56,316,1539673200"; 
   d="scan'208";a="55559933"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 04 Dec 2018 18:09:11 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726687AbeLECJJ (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 4 Dec 2018 21:09:09 -0500
Received: from mail-pg1-f193.google.com ([209.85.215.193]:41134 "EHLO
        mail-pg1-f193.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725841AbeLECJI (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 4 Dec 2018 21:09:08 -0500
Received: by mail-pg1-f193.google.com with SMTP id 70so8252051pgh.8;
        Tue, 04 Dec 2018 18:09:08 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:subject:from:in-reply-to:date:cc
         :content-transfer-encoding:message-id:references:to;
        bh=1HTqcRg109yBoRBf4IlllOM7oZ1nGlmIjYuYTvL83eo=;
        b=t19vjbZkc2FVvZ4LL5zrnknNRVEVWzLaDyft2GOa07+HJGxeBo2zkXcxoYbQnhfisT
         uLJGGuHAXej8UYqmgGFa/dzn6U+pbcbFyc4JGbAnnIWXp6Yu3a0Z8uokMtT+wiva2reM
         0p6dWlFnzVaHZ37x+KLSXNr7Jxprq42EuG3gUM6YcuOpVer288q4YXeiwQI888H6woHH
         e09idV3cRX147FP+N83bHZUUn5eRHnJtX6j1X770ThliXIt5sKxTaG6ULigj+s8RIFal
         9EQIQtOmwLQIGu5NVGmaG1yGWxcEl7/DR+D8MXx4CP9VlKZpXLtDb3KXdLPI3SSBxPr5
         7u0g==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:subject:from:in-reply-to:date:cc
         :content-transfer-encoding:message-id:references:to;
        bh=1HTqcRg109yBoRBf4IlllOM7oZ1nGlmIjYuYTvL83eo=;
        b=L9i882/mgHVVSFqA1EtFLySaIEM7FS7qmq4ri/UjnDWgbBHgtVkcPtTNX8kKMituXK
         HmZrJphVUc3Nv9QnThj+6NHGfAsVgTGRP0x7/gJIkWUuizfdfBsIXMzzYq84yewdVhr9
         vLg/h8vv7rAouN9K+pXSpPo2rdKv4Oiq9o0BFTr4iMsv/k5AfrwZ2HDnlxGi/uJu2YaX
         +UJ7B5THpT9YfiE4YgaEb3OUKRuns2BF/Gd23OPEvO4oakuWASAIkLjBeDqKScfrpUAt
         AWDaIiWdv+F1Xa6TkYsY5j5gXs/4ucGmrA0LzVwdvEhtQyOnVzZ7O0xdgMzJ+wO2IMkD
         ZFsg==
X-Gm-Message-State: AA+aEWabdicR5nlcHxJYr/JDcqzQpRFAMBlB37YJu+raAW6H08Exv+jn
        mg1xsqxT1185wx7V4iErtEY=
X-Google-Smtp-Source: AFSGD/UP4Ku//vShIZ6zgNW9ho8rFICUJFs5qNaJYNt808JHvZ+gM8oXkQTkS+qn4unJTpp5cDMR5g==
X-Received: by 2002:a62:5003:: with SMTP id e3mr23198919pfb.23.1543975747295;
        Tue, 04 Dec 2018 18:09:07 -0800 (PST)
Received: from [10.2.19.70] ([208.91.2.1])
        by smtp.gmail.com with ESMTPSA id i62sm21264149pge.44.2018.12.04.18.09.05
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Tue, 04 Dec 2018 18:09:06 -0800 (PST)
Content-Type: text/plain;
        charset=utf-8
Mime-Version: 1.0 (Mac OS X Mail 12.1 \(3445.101.1\))
Subject: Re: [PATCH 1/2] vmalloc: New flag for flush before releasing pages
From: Nadav Amit <nadav.amit@gmail.com>
In-Reply-To: <b82861c1c335056169d28e8d451b60a9e96af706.camel@intel.com>
Date: Tue, 4 Dec 2018 18:09:04 -0800
Cc: "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        "daniel@iogearbox.net" <daniel@iogearbox.net>,
        "ard.biesheuvel@linaro.org" <ard.biesheuvel@linaro.org>,
        "jeyu@kernel.org" <jeyu@kernel.org>,
        "rostedt@goodmis.org" <rostedt@goodmis.org>,
        "linux-mm@kvack.org" <linux-mm@kvack.org>,
        "jannh@google.com" <jannh@google.com>,
        "ast@kernel.org" <ast@kernel.org>,
        "Dock, Deneen T" <deneen.t.dock@intel.com>,
        "peterz@infradead.org" <peterz@infradead.org>,
        "kristen@linux.intel.com" <kristen@linux.intel.com>,
        "akpm@linux-foundation.org" <akpm@linux-foundation.org>,
        "will.deacon@arm.com" <will.deacon@arm.com>,
        "mingo@redhat.com" <mingo@redhat.com>,
        "luto@kernel.org" <luto@kernel.org>,
        "Keshavamurthy, Anil S" <anil.s.keshavamurthy@intel.com>,
        "kernel-hardening@lists.openwall.com" 
        <kernel-hardening@lists.openwall.com>,
        "mhiramat@kernel.org" <mhiramat@kernel.org>,
        "naveen.n.rao@linux.vnet.ibm.com" <naveen.n.rao@linux.vnet.ibm.com>,
        "davem@davemloft.net" <davem@davemloft.net>,
        "netdev@vger.kernel.org" <netdev@vger.kernel.org>,
        "Hansen, Dave" <dave.hansen@intel.com>
Content-Transfer-Encoding: quoted-printable
Message-Id: <453CE980-0EB6-47B1-9973-9761A14B0B0D@gmail.com>
References: <20181128000754.18056-1-rick.p.edgecombe@intel.com>
 <20181128000754.18056-2-rick.p.edgecombe@intel.com>
 <4883FED1-D0EC-41B0-A90F-1A697756D41D@gmail.com>
 <20181204160304.GB7195@arm.com>
 <51281e69a3722014f718a6840f43b2e6773eed90.camel@intel.com>
 <A5ABCA50-12F0-4A19-B499-3927D59BF589@gmail.com>
 <e70c618d10ddbb834b7a3bbdd6e2bebed0f8719d.camel@intel.com>
 <843E4326-3426-4AEC-B0F7-2DC398A6E59A@gmail.com>
 <3dc0492f209c630e40e93e9c657722041da0ed29.camel@intel.com>
 <D092D8BE-711E-4BB4-B179-E897A8354120@gmail.com>
 <b82861c1c335056169d28e8d451b60a9e96af706.camel@intel.com>
To: "Edgecombe, Rick P" <rick.p.edgecombe@intel.com>
X-Mailer: Apple Mail (2.3445.101.1)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

> On Dec 4, 2018, at 5:45 PM, Edgecombe, Rick P =
<rick.p.edgecombe@intel.com> wrote:
>=20
> On Tue, 2018-12-04 at 16:53 -0800, Nadav Amit wrote:
>>> On Dec 4, 2018, at 4:29 PM, Edgecombe, Rick P =
<rick.p.edgecombe@intel.com>
>>> wrote:
>>>=20
>>> On Tue, 2018-12-04 at 16:01 -0800, Nadav Amit wrote:
>>>>> On Dec 4, 2018, at 3:51 PM, Edgecombe, Rick P <
>>>>> rick.p.edgecombe@intel.com>
>>>>> wrote:
>>>>>=20
>>>>> On Tue, 2018-12-04 at 12:36 -0800, Nadav Amit wrote:
>>>>>>> On Dec 4, 2018, at 12:02 PM, Edgecombe, Rick P <
>>>>>>> rick.p.edgecombe@intel.com>
>>>>>>> wrote:
>>>>>>>=20
>>>>>>> On Tue, 2018-12-04 at 16:03 +0000, Will Deacon wrote:
>>>>>>>> On Mon, Dec 03, 2018 at 05:43:11PM -0800, Nadav Amit wrote:
>>>>>>>>>> On Nov 27, 2018, at 4:07 PM, Rick Edgecombe <
>>>>>>>>>> rick.p.edgecombe@intel.com>
>>>>>>>>>> wrote:
>>>>>>>>>>=20
>>>>>>>>>> Since vfree will lazily flush the TLB, but not lazily free =
the
>>>>>>>>>> underlying
>>>>>>>>>> pages,
>>>>>>>>>> it often leaves stale TLB entries to freed pages that could
>>>>>>>>>> get
>>>>>>>>>> re-
>>>>>>>>>> used.
>>>>>>>>>> This is
>>>>>>>>>> undesirable for cases where the memory being freed has =
special
>>>>>>>>>> permissions
>>>>>>>>>> such
>>>>>>>>>> as executable.
>>>>>>>>>=20
>>>>>>>>> So I am trying to finish my patch-set for preventing transient
>>>>>>>>> W+X
>>>>>>>>> mappings
>>>>>>>>> from taking space, by handling kprobes & ftrace that I missed
>>>>>>>>> (thanks
>>>>>>>>> again
>>>>>>>>> for
>>>>>>>>> pointing it out).
>>>>>>>>>=20
>>>>>>>>> But all of the sudden, I don=E2=80=99t understand why we have =
the
>>>>>>>>> problem
>>>>>>>>> that
>>>>>>>>> this
>>>>>>>>> (your) patch-set deals with at all. We already change the
>>>>>>>>> mappings
>>>>>>>>> to
>>>>>>>>> make
>>>>>>>>> the memory writable before freeing the memory, so why can=E2=80=99=
t we
>>>>>>>>> make
>>>>>>>>> it
>>>>>>>>> non-executable at the same time? Actually, why do we make the
>>>>>>>>> module
>>>>>>>>> memory,
>>>>>>>>> including its data executable before freeing it???
>>>>>>>>=20
>>>>>>>> Yeah, this is really confusing, but I have a suspicion it's a
>>>>>>>> combination
>>>>>>>> of the various different configurations and hysterical raisins. =
We
>>>>>>>> can't
>>>>>>>> rely on module_alloc() allocating from the vmalloc area (see
>>>>>>>> nios2)
>>>>>>>> nor
>>>>>>>> can we rely on disable_ro_nx() being available at build time.
>>>>>>>>=20
>>>>>>>> If we *could* rely on module allocations always using =
vmalloc(),
>>>>>>>> then
>>>>>>>> we could pass in Rick's new flag and drop disable_ro_nx()
>>>>>>>> altogether
>>>>>>>> afaict -- who cares about the memory attributes of a mapping
>>>>>>>> that's
>>>>>>>> about
>>>>>>>> to disappear anyway?
>>>>>>>>=20
>>>>>>>> Is it just nios2 that does something different?
>>>>>>>>=20
>>>>>>>> Will
>>>>>>>=20
>>>>>>> Yea it is really intertwined. I think for x86, set_memory_nx
>>>>>>> everywhere
>>>>>>> would
>>>>>>> solve it as well, in fact that was what I first thought the =
solution
>>>>>>> should
>>>>>>> be
>>>>>>> until this was suggested. It's interesting that from the other
>>>>>>> thread
>>>>>>> Masami
>>>>>>> Hiramatsu referenced, set_memory_nx was suggested last year and
>>>>>>> would
>>>>>>> have
>>>>>>> inadvertently blocked this on x86. But, on the other =
architectures I
>>>>>>> have
>>>>>>> since
>>>>>>> learned it is a bit different.
>>>>>>>=20
>>>>>>> It looks like actually most arch's don't re-define set_memory_*, =
and
>>>>>>> so
>>>>>>> all
>>>>>>> of
>>>>>>> the frob_* functions are actually just noops. In which case
>>>>>>> allocating
>>>>>>> RWX
>>>>>>> is
>>>>>>> needed to make it work at all, because that is what the =
allocation
>>>>>>> is
>>>>>>> going
>>>>>>> to
>>>>>>> stay at. So in these archs, set_memory_nx won't solve it because =
it
>>>>>>> will
>>>>>>> do
>>>>>>> nothing.
>>>>>>>=20
>>>>>>> On x86 I think you cannot get rid of disable_ro_nx fully because
>>>>>>> there
>>>>>>> is
>>>>>>> the
>>>>>>> changing of the permissions on the directmap as well. You don't =
want
>>>>>>> some
>>>>>>> other
>>>>>>> caller getting a page that was left RO when freed and then =
trying to
>>>>>>> write
>>>>>>> to
>>>>>>> it, if I understand this.
>>>>>>>=20
>>>>>>> The other reasoning was that calling set_memory_nx isn't doing =
what
>>>>>>> we
>>>>>>> are
>>>>>>> actually trying to do which is prevent the pages from getting
>>>>>>> released
>>>>>>> too
>>>>>>> early.
>>>>>>>=20
>>>>>>> A more clear solution for all of this might involve refactoring =
some
>>>>>>> of
>>>>>>> the
>>>>>>> set_memory_ de-allocation logic out into __weak functions in =
either
>>>>>>> modules
>>>>>>> or
>>>>>>> vmalloc. As Jessica points out in the other thread though, =
modules
>>>>>>> does
>>>>>>> a
>>>>>>> lot
>>>>>>> more stuff there than the other module_alloc callers. I think it =
may
>>>>>>> take
>>>>>>> some
>>>>>>> thought to centralize AND make it optimal for every
>>>>>>> module_alloc/vmalloc_exec
>>>>>>> user and arch.
>>>>>>>=20
>>>>>>> But for now with the change in vmalloc, we can block the =
executable
>>>>>>> mapping
>>>>>>> freed page re-use issue in a cross platform way.
>>>>>>=20
>>>>>> Please understand me correctly - I didn=E2=80=99t mean that your =
patches are
>>>>>> not
>>>>>> needed.
>>>>>=20
>>>>> Ok, I think I understand. I have been pondering these same things =
after
>>>>> Masami
>>>>> Hiramatsu's comments on this thread the other day.
>>>>>=20
>>>>>> All I did is asking - how come the PTEs are executable when they =
are
>>>>>> cleared
>>>>>> they are executable, when in fact we manipulate them when the =
module
>>>>>> is
>>>>>> removed.
>>>>>=20
>>>>> I think the directmap used to be RWX so maybe historically its =
trying to
>>>>> return
>>>>> it to its default state? Not sure.
>>>>>=20
>>>>>> I think I try to deal with a similar problem to the one you =
encounter
>>>>>> -
>>>>>> broken W^X. The only thing that bothered me in regard to your =
patches
>>>>>> (and
>>>>>> only after I played with the code) is that there is still a time-
>>>>>> window in
>>>>>> which W^X is broken due to disable_ro_nx().
>>>>>=20
>>>>> Totally agree there is overlap in the fixes and we should sync.
>>>>>=20
>>>>> What do you think about Andy's suggestion for doing the vfree =
cleanup in
>>>>> vmalloc
>>>>> with arch hooks? So the allocation goes into vfree fully setup and
>>>>> vmalloc
>>>>> frees
>>>>> it and on x86 resets the direct map.
>>>>=20
>>>> As long as you do it, I have no problem ;-)
>>>>=20
>>>> You would need to consider all the callers of module_memfree(), and
>>>> probably
>>>> to untangle at least part of the mess in pageattr.c . If you are up =
to it,
>>>> just say so, and I=E2=80=99ll drop this patch. All I can say is =
=E2=80=9Cgood luck with
>>>> all
>>>> that=E2=80=9D.
>>>=20
>>> I thought you were trying to prevent having any memory that at any =
time was
>>> W+X,
>>> how does vfree help with the module load time issues, where it =
starts WRX on
>>> x86?
>>=20
>> I didn=E2=80=99t say it does. The patch I submitted before [1] should =
deal with the
>> issue of module loading, and I still think it is required. I also =
addressed
>> the kprobe and ftrace issues that you raised.
>>=20
>> Perhaps it makes more sense that I will include the patch I proposed =
for
>> module cleanup to make the patch-set =E2=80=9Ccomplete=E2=80=9D. If =
you finish the changes
>> you propose before the patch is applied, it could be dropped. I just =
want to
>> get rid of this series, as it keeps collecting more and more patches.
>>=20
>> I suspect it will not be the last version anyhow.
>>=20
>> [1] https://lkml.org/lkml/2018/11/21/305
>=20
> That seems fine.
>=20
> And not to make it any more complicated, but how much different is a =
W+X mapping
> from a RW mapping that is about to turn X? Can't an attacker with the =
ability to
> write to the module space just write and wait a short time? If that is =
the
> threat model, I think there may still be additional work to do here =
even after
> you found all the W+X cases.

I agree that a complete solution may require to block any direct write =
onto
a code-page. When I say =E2=80=9Ccomplete=E2=80=9D, I mean for a threat =
model in which
dangling pointers are used to inject code, but not to run existing =
ROP/JOP
gadgets. (I didn=E2=80=99t think too deeply on the threat-model, so =
perhaps it needs
to be further refined).

I think the first stage is to make everybody go through a unified =
interface
(text_poke() and text_poke_early()). ftrace, for example, uses an
independent mechanism to change the code.

Eventually, after boot text_poke_early() should not be used, and =
text_poke()
(or something similar) should be used instead. Alternatively, when =
module
text is loaded, a hash value can be computed and calculated over it.

Since Igor Stoppa wants to use the infrastructure that is included in =
the
first patches, and since I didn=E2=80=99t intend this patch-set to be a =
full
solution for W^X (I was pushed there by tglx+Andy [1]), it may be enough
as a first step.

[1] https://lore.kernel.org/patchwork/patch/1006293/#1191341

