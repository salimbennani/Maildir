Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 11 Dec 2018 19:49:04 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id F05865803DC;
	Tue, 11 Dec 2018 02:26:58 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 11 Dec 2018 02:26:58 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AckskUB3Z7WsfixdEsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segSI/vxwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJcUMhRSSJBDICy?=
 =?us-ascii?q?YYUBAOUOP+lXs4bzp0AWrRa8HgSsGOHixyVUinPq06A30eIsGhzG0gw6GNIOtW?=
 =?us-ascii?q?zZosvrO6cOSuC10a7IxijBYfxM3zfy9ZLHeQ0mrPGUQ71wd8XRyVQuFwPDl1mQ?=
 =?us-ascii?q?qpLqPymT1usTt2iW9OtgWfuri24gtQF+vCKjxtw2hYnKm4IV0ErL+T9/wIkrP9?=
 =?us-ascii?q?G4SlZ7bMeiHZBNtC+aL5N7Tt0+T2xsoio217MLtYChcCQXy5kr2wTTZv2FfoSQ?=
 =?us-ascii?q?/x7vSuecLS1liH57eb+znQu+/Emux+HmWMS50VBHpTdfnNbWrHACzRnT59CHSv?=
 =?us-ascii?q?Rj+keh3i6C1x7c6u5aO0A4j6nbJIA7wr42iJUTtV7PHijsmEX5lKOWd0Mk9fa0?=
 =?us-ascii?q?6+n/fLnqupuRO5VphgzwLKgigNGzDOckPgQUXmWW+/yw1Lj58k34RLVKgOc2kq?=
 =?us-ascii?q?7csJ3CIcQbp6i5AxJa04o66BawES2m0NIGknkDNV5FfxyGj473NFHUO/34E/i/?=
 =?us-ascii?q?jEq2kDtxxPDJIKfhApPTIXjHirvheqx960FExAop0d9f/45UCq0GIP/rXk/xtd?=
 =?us-ascii?q?/YAQEjPw273ubqE9F91oIYWWKSDa6VKqLSsVmU5u0xJ+mAfpMauDH4K/I9/f7h?=
 =?us-ascii?q?kWc5mUMBfamuxZYXaGq3HvV6I0qDZnrgmNcBEXoQsQo4Q+znk1mCUT9VZ3avUK?=
 =?us-ascii?q?Mw/DA7CIS6DYjdQoChmqCO3CC+HpdOfGBJFkiMEWv0d4WDQ/oMaiWSLdF7njwH?=
 =?us-ascii?q?UrihTYkh1Ra1uQ/+yrpnKPfU+yICuZLi0th1+/PclRUo+TNoCMSd1nmHT3tokW?=
 =?us-ascii?q?MQWz82wKd/rFRnxVeY0ah4hP9YGcZJ5/xTUAc3Lprcz+18C9DvVQPNZNaJSFC6?=
 =?us-ascii?q?Qtq4BTE9VM4+w9gLY0xlAdWtkgjD3za2A78Sj7GLB4Y78qTG03j1JsZy0XDG1K?=
 =?us-ascii?q?Y6glkiQ8tPM3Cmh6Fl+wjSAY7Jj1uWl6KweasA2y7N8X+JzXCSs0FATA5wTaLF?=
 =?us-ascii?q?UGgCaUTMs9T2+FnOT7+0BrQhKQtO18iCJqxOat3qiFVGQOzuONDfY2K3hmexCg?=
 =?us-ascii?q?yExrKKbIr2ZWod2D/RB1QDkwAW5XyGLxQxBj+9o2LCCzxjDU/gbFny8eZgsn+7?=
 =?us-ascii?q?TlU7zweRb0J/0bq44RoVhf2aS/MO0bMIoiYhqzNoHFmj29LaEcaPpw1kfK9Ee9?=
 =?us-ascii?q?My/E9H1X7Ftwx6JpGgM6FihlsZcwRrv0Pv1w97CplancgttnMqyAtyKaSX0F5a?=
 =?us-ascii?q?czOY3JbwOqDYK2Xo/RCvbbLW1U/a0NqM5qgP7/E4oU35vA61Dkoi72ln095N3n?=
 =?us-ascii?q?SG4pXFEgUTXozxU0ot7Bd6uqzVbTM754PX0n1sL7K5sjvD29IvGeskxQysf9ZZ?=
 =?us-ascii?q?MKOYCgDyF9cWCNSpKOwvg1KpdA4LPPhO9K4oOMOrb/uH2LOxMOl8hj6njGRH75?=
 =?us-ascii?q?p70kKD7Cd8Tu/I35AYw/CXxAeHVjH8jEu/vcDzg4xLeTYSHm+nwyj+GIFRfrFy?=
 =?us-ascii?q?fZoMCWq2Oc23x8lxiIT3W3FF816vHVUG19GzeRqTdlDywRdf1UAKrnO5gyu4yD?=
 =?us-ascii?q?p0niotrqqe2izO3uvjeAAGOm5NWGltk1PsLZKogNAdWUiidxIpmwe95Ubm26hb?=
 =?us-ascii?q?o7xyLmnSQUtSfyn6NXpiUra2treZZ85P6ZUosThYUeimYFCaTKL9rAUe0y/5A2?=
 =?us-ascii?q?RewzU7fSmwuprlhxx6lH6dLHFroXrbY85w3xTf5N/bRfJLxToJXip4iTrWBli6?=
 =?us-ascii?q?Idap+86Zl5PCsuC4SmKgWYdfcSjtzYOcqiS74XdmDgG4n/C2gtfnCxQ10Tfn19?=
 =?us-ascii?q?l2UiXFtBb9bZPs16igM+Jnf09oCUT468p7HIF+j4QxiIsR2XgcmpWa434HnX3v?=
 =?us-ascii?q?PtVc3KL0dGANSiITw97J/Ajl31VuLnGTyIL4THmdwtZhaMO8YmMZwS8968FKCK?=
 =?us-ascii?q?GJ7L1Lhyd1o1y4rR7Pbvh5hDsS1fwu6HsCieETpAUt1jmdAqwVHURAOCzslheI?=
 =?us-ascii?q?4MqkoKRZemmvaqSw21Rknd+6Er6CuA5cVW39epcjGy9w88p+PEjN0H319oHrZt?=
 =?us-ascii?q?3QYcgPuR2TlhfKl/JVJ44plvoWmSpnPnrwvWEiy+4+lxBv3Iu1vI6aK2V256K5?=
 =?us-ascii?q?AwVVNjn0Z8MV5zHsgrxSnseQ34CzAJphHi8HU4fvTfKtCDgSr+joNx6SED0grX?=
 =?us-ascii?q?eWAaHQEhWY6EdisnLDCZSrN2yMKXkdzNViQgSdJUNFjAAVWjU6goA2FgSwyMP9?=
 =?us-ascii?q?d0d54ygb5kTkpRtU1uJoKx7/X3/dpAiybzc7VoOfIABK7g1Y5EfVLM+e7v91Hy?=
 =?us-ascii?q?5C5Z2stwiNKm2dZwRVAmAFQE2EB1b/Praw4dnM6fSXBu27L/HWe7WBtfReV+uU?=
 =?us-ascii?q?xZKoyoZn/zGMNtiWPnl/FfI73FBPXWt+G8TflDUCUCgXlyPLb86Gqxaw4Cx3rs?=
 =?us-ascii?q?aj8Pv1XALj/5eAC7xXMd934RC5nb+DN/KMhCZ+MTtY1o0DxX7LyLgc3V4ekSJu?=
 =?us-ascii?q?dyOqEbQPqyHNVr/QmrRMAh4faiNzMtZI7q0m0glMP87bls361rpigvEpDFdFUE?=
 =?us-ascii?q?Trmtu1aswSP2G9KFTHCV6RO7SbPjLL2d/4YKOmRb1UjeVZrBmwuTedE0/+MTWP?=
 =?us-ascii?q?jTjpVxazMe5SiCGXJgBRuIa4chx1E2jsUMrmagGnMN9wlTA23bw0hnbQOWEAKz?=
 =?us-ascii?q?Rzb0NNoaOW7S5DhvV/GmpB7mdqLOWemiaZ6fXYJYgSsfdxHit0kOda6mwgy7RJ?=
 =?us-ascii?q?9CFEWOB1mCzKo99uuV6mlOyPyjthUBVWqzdLhJiEvUNtOajC8plAWHDE/A8C7G?=
 =?us-ascii?q?mKChQKocdlBcPru6xK1tfPk6fze39+9Ifs8NcGT+3QIc6KMzJ1KR/tETLZDyMe?=
 =?us-ascii?q?UCWmc2rYghoOvuuV8yipo4Qht5+kuJMIRrYTAEQ4EPwHC0IgH9EYJppzdjJhlb?=
 =?us-ascii?q?mFgYgT7HmjthCXQsgcvIiRBaHaOunmNDvM1eoMXBAP276taN1LboA=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ApAACjkA9ch0O0hNFkGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBVAMBAQELAYJsfyeDe5QpUAEBBoEILRSJDZAkEgEBGBMBh3kiNwYNAQM?=
 =?us-ascii?q?BAQEBAQECARMBAQEIDQkIKS+CNiQBgmEBAQEBAwECIARSBgkBAQoOAwMBAgMCJ?=
 =?us-ascii?q?gICA0wIBg0GAgEBAYMcgXUMAQWlLHwzii2BC4svgQ+BB4E4gmuIBYJXAocoB4N?=
 =?us-ascii?q?7hFo2kD0JkUoeiXaHSZJKhkICERSBXIF4MxqDX4IkAxeOLGOBBQEBimQBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ApAACjkA9ch0O0hNFkGwEBAQEDAQEBBwMBAQGBVAMBAQE?=
 =?us-ascii?q?LAYJsfyeDe5QpUAEBBoEILRSJDZAkEgEBGBMBh3kiNwYNAQMBAQEBAQECARMBA?=
 =?us-ascii?q?QEIDQkIKS+CNiQBgmEBAQEBAwECIARSBgkBAQoOAwMBAgMCJgICA0wIBg0GAgE?=
 =?us-ascii?q?BAYMcgXUMAQWlLHwzii2BC4svgQ+BB4E4gmuIBYJXAocoB4N7hFo2kD0JkUoei?=
 =?us-ascii?q?XaHSZJKhkICERSBXIF4MxqDX4IkAxeOLGOBBQEBimQBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,342,1539673200"; 
   d="scan'208,223";a="44448032"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 11 Dec 2018 02:26:54 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726431AbeLKK0w (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 11 Dec 2018 05:26:52 -0500
Received: from www262.sakura.ne.jp ([202.181.97.72]:24243 "EHLO
        www262.sakura.ne.jp" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726134AbeLKK0v (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 11 Dec 2018 05:26:51 -0500
Received: from fsav403.sakura.ne.jp (fsav403.sakura.ne.jp [133.242.250.102])
        by www262.sakura.ne.jp (8.15.2/8.15.2) with ESMTP id wBBAQnm7069524;
        Tue, 11 Dec 2018 19:26:49 +0900 (JST)
        (envelope-from penguin-kernel@i-love.sakura.ne.jp)
Received: from www262.sakura.ne.jp (202.181.97.72)
 by fsav403.sakura.ne.jp (F-Secure/fsigk_smtp/530/fsav403.sakura.ne.jp);
 Tue, 11 Dec 2018 19:26:49 +0900 (JST)
X-Virus-Status: clean(F-Secure/fsigk_smtp/530/fsav403.sakura.ne.jp)
Received: from [192.168.1.8] (softbank126126163036.bbtec.net [126.126.163.36])
        (authenticated bits=0)
        by www262.sakura.ne.jp (8.15.2/8.15.2) with ESMTPSA id wBBAQnkU069519
        (version=TLSv1.2 cipher=AES256-SHA bits=256 verify=NO);
        Tue, 11 Dec 2018 19:26:49 +0900 (JST)
        (envelope-from penguin-kernel@i-love.sakura.ne.jp)
Subject: Re: [PATCH] printk: Add caller information to printk() output.
From: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>
To: Petr Mladek <pmladek@suse.com>
Cc: Dmitry Vyukov <dvyukov@google.com>,
        Sergey Senozhatsky <sergey.senozhatsky.work@gmail.com>,
        Sergey Senozhatsky <sergey.senozhatsky@gmail.com>,
        Steven Rostedt <rostedt@goodmis.org>,
        Linus Torvalds <torvalds@linux-foundation.org>,
        Andrew Morton <akpm@linux-foundation.org>,
        LKML <linux-kernel@vger.kernel.org>,
        syzkaller <syzkaller@googlegroups.com>
References: <1543045075-3008-1-git-send-email-penguin-kernel@I-love.SAKURA.ne.jp>
 <20181130154024.ls3mntfdr4zvluub@pathway.suse.cz>
 <f224bd68-7394-ff70-cad6-d3fbbb3b5f7d@i-love.sakura.ne.jp>
 <20181203150603.cdqii263e4kmmibo@pathway.suse.cz>
 <b38c6957-c3c1-54fc-781e-06d7eed6a9b1@i-love.sakura.ne.jp>
 <20181204152724.ypk44mi4a56nrud4@pathway.suse.cz>
 <459018db-763b-9520-ead2-2c0d5975fbf3@i-love.sakura.ne.jp>
 <20181210130930.bas4fozjhe3dc5nu@pathway.suse.cz>
 <c5b5d660-d217-35f0-c4f1-7252367934d1@i-love.sakura.ne.jp>
Message-ID: <e3f69846-ef08-c8f5-368f-4dada13c9970@i-love.sakura.ne.jp>
Date: Tue, 11 Dec 2018 19:26:48 +0900
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64; rv:60.0) Gecko/20100101
 Thunderbird/60.3.3
MIME-Version: 1.0
In-Reply-To: <c5b5d660-d217-35f0-c4f1-7252367934d1@i-love.sakura.ne.jp>
Content-Type: text/plain; charset=utf-8
Content-Language: en-US
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From bdb80508390694456f3f864f9651d047ded109bf Mon Sep 17 00:00:00 2001
From: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date: Tue, 11 Dec 2018 19:23:30 +0900
Subject: [PATCH v4] printk: Add caller information to printk() output.

Sometimes we want to print a series of printk() messages to consoles
without being disturbed by concurrent printk() from interrupts and/or
other threads. But we can't enforce printk() callers to use their local
buffers because we need to ask them to make too much changes. Also, even
buffering up to one line inside printk() might cause failing to emit
an important clue under critical situation.

Therefore, instead of trying to help buffering, let's try to help
reconstructing messages by saving caller information as of calling
log_store() and adding it as "[T$thread_id]" or "[C$processor_id]"
upon printing to consoles.

Some examples for console output:

  [    1.222773][    T1] x86: Booting SMP configuration:
  [    2.779635][    T1] pci 0000:00:01.0: PCI bridge to [bus 01]
  [    5.069193][  T268] Fusion MPT base driver 3.04.20
  [    9.316504][    C2] random: fast init done
  [   13.413336][ T3355] Initialized host personality

Some examples for /dev/kmsg output:

  6,496,1222773,-,from=T1;x86: Booting SMP configuration:
  6,968,2779635,-,from=T1;pci 0000:00:01.0: PCI bridge to [bus 01]
   SUBSYSTEM=pci
   DEVICE=+pci:0000:00:01.0
  6,1353,5069193,-,from=T268;Fusion MPT base driver 3.04.20
  5,1526,9316504,-,from=C2;random: fast init done
  6,1575,13413336,-,from=T3355;Initialized host personality

Note that this patch changes max length of messages which can be printed
by printk() or written to /dev/kmsg interface from 992 bytes to 976 bytes,
based on an assumption that userspace won't try to write messages hitting
that border line to /dev/kmsg interface.

Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
---
 kernel/printk/printk.c | 50 ++++++++++++++++++++++++++++++++++++++++++++++----
 lib/Kconfig.debug      | 17 +++++++++++++++++
 2 files changed, 63 insertions(+), 4 deletions(-)

diff --git a/kernel/printk/printk.c b/kernel/printk/printk.c
index 1306fe0..84e5425 100644
--- a/kernel/printk/printk.c
+++ b/kernel/printk/printk.c
@@ -356,6 +356,9 @@ struct printk_log {
 	u8 facility;		/* syslog facility */
 	u8 flags:5;		/* internal record flags */
 	u8 level:3;		/* syslog level */
+#ifdef CONFIG_PRINTK_FROM
+	u32 from_id;            /* thread id or processor id */
+#endif
 }
 #ifdef CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS
 __packed __aligned(4)
@@ -422,7 +425,11 @@ __packed __aligned(4)
 static u64 clear_seq;
 static u32 clear_idx;
 
+#ifdef CONFIG_PRINTK_FROM
+#define PREFIX_MAX		48
+#else
 #define PREFIX_MAX		32
+#endif
 #define LOG_LINE_MAX		(1024 - PREFIX_MAX)
 
 #define LOG_LEVEL(v)		((v) & 0x07)
@@ -625,6 +632,12 @@ static int log_store(int facility, int level,
 		msg->ts_nsec = ts_nsec;
 	else
 		msg->ts_nsec = local_clock();
+#ifdef CONFIG_PRINTK_FROM
+	if (in_task())
+		msg->from_id = task_pid_nr(current);
+	else
+		msg->from_id = 0x80000000 + raw_smp_processor_id();
+#endif
 	memset(log_dict(msg) + dict_len, 0, pad_len);
 	msg->len = size;
 
@@ -688,12 +701,21 @@ static ssize_t msg_print_ext_header(char *buf, size_t size,
 				    struct printk_log *msg, u64 seq)
 {
 	u64 ts_usec = msg->ts_nsec;
+	char from[18];
+#ifdef CONFIG_PRINTK_FROM
+	u32 id = msg->from_id;
+
+	snprintf(from, sizeof(from), ",from=%c%u",
+		 id & 0x80000000 ? 'C' : 'T', id & ~0x80000000);
+#else
+	from[0] = '\0';
+#endif
 
 	do_div(ts_usec, 1000);
 
-	return scnprintf(buf, size, "%u,%llu,%llu,%c;",
-		       (msg->facility << 3) | msg->level, seq, ts_usec,
-		       msg->flags & LOG_CONT ? 'c' : '-');
+	return scnprintf(buf, size, "%u,%llu,%llu,%c%s;",
+			 (msg->facility << 3) | msg->level, seq, ts_usec,
+			 msg->flags & LOG_CONT ? 'c' : '-', from);
 }
 
 static ssize_t msg_print_ext_body(char *buf, size_t size,
@@ -1038,6 +1060,9 @@ void log_buf_vmcoreinfo_setup(void)
 	VMCOREINFO_OFFSET(printk_log, len);
 	VMCOREINFO_OFFSET(printk_log, text_len);
 	VMCOREINFO_OFFSET(printk_log, dict_len);
+#ifdef CONFIG_PRINTK_FROM
+	VMCOREINFO_OFFSET(printk_log, from_id);
+#endif
 }
 #endif
 
@@ -1236,10 +1261,21 @@ static size_t print_time(u64 ts, char *buf)
 {
 	unsigned long rem_nsec = do_div(ts, 1000000000);
 
-	return sprintf(buf, "[%5lu.%06lu] ",
+	return sprintf(buf, "[%5lu.%06lu]",
 		       (unsigned long)ts, rem_nsec / 1000);
 }
 
+#ifdef CONFIG_PRINTK_FROM
+static size_t print_from(u32 id, char *buf)
+{
+	char from[12];
+
+	snprintf(from, sizeof(from), "%c%u",
+		 id & 0x80000000 ? 'C' : 'T', id & ~0x80000000);
+	return sprintf(buf, "[%6s]", from);
+}
+#endif
+
 static size_t print_prefix(const struct printk_log *msg, bool syslog,
 			   bool time, char *buf)
 {
@@ -1249,6 +1285,12 @@ static size_t print_prefix(const struct printk_log *msg, bool syslog,
 		len = print_syslog((msg->facility << 3) | msg->level, buf);
 	if (time)
 		len += print_time(msg->ts_nsec, buf + len);
+#ifdef CONFIG_PRINTK_FROM
+	len += print_from(msg->from_id, buf + len);
+#endif
+	if (IS_ENABLED(CONFIG_PRINTK_FROM) || time)
+		buf[len++] = ' ';
+	buf[len] = '\0'; /* For safety in case of accessed as a string. */
 	return len;
 }
 
diff --git a/lib/Kconfig.debug b/lib/Kconfig.debug
index d312188..e626bd7 100644
--- a/lib/Kconfig.debug
+++ b/lib/Kconfig.debug
@@ -17,6 +17,23 @@ config PRINTK_TIME
 	  The behavior is also controlled by the kernel command line
 	  parameter printk.time=1. See Documentation/admin-guide/kernel-parameters.rst
 
+config PRINTK_FROM
+	bool "Show caller information on printks"
+	depends on PRINTK
+	help
+	  Selecting this option causes "thread id" (if in task context) or
+	  "processor id" (if not in task context) of the printk() messages
+	  to be added.
+
+	  This option is intended for environments where multiple threads
+	  concurrently call printk() for many times, for it is difficult to
+	  interpret without knowing where these lines (or sometimes individual
+	  line which was divided into multiple lines due to race) came from.
+
+	  Since toggling after boot makes the code racy, currently there is
+	  no option to enable/disable at the kernel command line parameter or
+	  sysfs interface.
+
 config CONSOLE_LOGLEVEL_DEFAULT
 	int "Default console loglevel (1-15)"
 	range 1 15
-- 
1.8.3.1


