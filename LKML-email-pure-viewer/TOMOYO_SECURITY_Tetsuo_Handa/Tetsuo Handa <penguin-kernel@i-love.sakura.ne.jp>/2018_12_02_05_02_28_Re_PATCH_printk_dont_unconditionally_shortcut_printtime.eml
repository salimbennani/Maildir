Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:28:09 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id C16A858014B;
	Sat,  1 Dec 2018 21:03:01 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga004-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 01 Dec 2018 21:03:01 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AogwDyRX+HAiT9xRcGcnv76JhDbDV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhGPu6dThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGp6y?=
 =?us-ascii?q?YYsRAeoPPuhWoYfyqFQMohSiCgesH/vvxz1Ti3/q36A3yfgtHR3I0QEiGd8FrX?=
 =?us-ascii?q?TarM/yNKcXSe270rfHzSnYb/NL3jf29YrGfQonof6RR717bM3cyVExGAPDgVWQ?=
 =?us-ascii?q?tI3lPzWM2uQOrWeb9exgWvyri2M8qgF9uzyvxsAyiobXnI4V0UrL9SZkwIYvP9?=
 =?us-ascii?q?K0Ukh7bsC+HJtSryGXLo17Sd4hTWFwoCs21KEKtJqhcCQXxpkr2QTTZ+GEfoSU?=
 =?us-ascii?q?+B7uVeScLS9liH57eb+znQu+/Vahx+HmS8W50VhHojBLn9TNsH0Gygbd5dKdSv?=
 =?us-ascii?q?Rn+0eswTaP2B7X6uFDOU00i6XbJIA7wrIqlZocr17DHinol0XylqOWcV8k+uew?=
 =?us-ascii?q?5+TmZLXpuIOcOpdqhg3iNqkigNGzDOomPgQUQmSW+viw2Kfi8ED7WLlKi+c5kq?=
 =?us-ascii?q?jdsJDUP8Qboau5DhdR0oYi7Ra/Ejin3M0bnXYZNlJFfgyIj4zwN1HJLvH4C+mw?=
 =?us-ascii?q?g063nTd1yPDJIKfhDo/OLnfdirfhe6hy60pGxAo019Bf6IpYCqsdL/LrRk/xqN?=
 =?us-ascii?q?vYAwc9Mwy1wOboFs9x14wDWW+UBq+ZMaXSsUKH5+41IumMYpMVtyj5K/Q/+/Hu?=
 =?us-ascii?q?ino5k0cHfaa1xZsXdGy4HvN+LkWZe3Xsg8sBHn0NvgYkTOzqlUeNUThcZ3upW6?=
 =?us-ascii?q?I85zc7CJ+pDIvZR4CthqCB0zm/HpFMem9GDVWMG2/yd4qYQ/cMdD6SIsh5nzwG?=
 =?us-ascii?q?UriuVZUt1RKptA/8zbpnKfHZ+ikZtZLlydh06PfflRA09TxoEcud13uBQH1znm?=
 =?us-ascii?q?MNXzU2xrxwoVRhylef1qh1m+ZXFcdT5/NOUQc2L4TcwPZ4C93pXgLBf9GJSEup?=
 =?us-ascii?q?Q9m8ADExSM4xzMEKY0pnB9qiiRXD1TKwA7AJj7yLGIA08qXE0njyPcl9zWzK1K?=
 =?us-ascii?q?0gj1Y8RMtPOnarhqp+9wjVGo7InF+Vl6esdaQAwiHN8H2PwnaJvEFdSARwS7nK?=
 =?us-ascii?q?XWgDZkvKqtT0/l7NQKWwCbs5KAdBydSNKq1RatL3i1VKQ/PjONfbY2K1gGqwAR?=
 =?us-ascii?q?eIxrWRbIvlYWkd3SPdCFQanAAX53qJKQ8+BiK5qWLEEDNuDU7vY1/r8eRmtXy0?=
 =?us-ascii?q?VFE0wB+QY01hzbW1/AUViuKaS/4I2rIEuSEhqyh7HVqn3tLWDcaAqBRlfKlGfd?=
 =?us-ascii?q?w951JH33rDtwNhJpygM7xihlkGfgRrvkPu0hJ3CplAkckqtn8q0BB+KaWC0FNF?=
 =?us-ascii?q?djOY25/wN6bTKmnz+hCvdqHX1kvf0NaQ5qcA9vA4p0//swGuE0oo629n3MVN03?=
 =?us-ascii?q?uA+pXKCxIfXoj1Ukkp+Bl1ubHbbjMm6IPJyHJjK6+0sjzF29I3H+Ylzhegf9FC?=
 =?us-ascii?q?MKKLDgPyEssaB9SwJ+wugVSmchUEPOVK/q4uI8ymb+eG2LKsPOt4nDOmkH5L75?=
 =?us-ascii?q?xn3kON9ypzUOjI35kezvGc3wuHUSr8jVi7vsD2n4BEeS8dHm6lxSf4A45RY7V4?=
 =?us-ascii?q?fZwXBme2P8232tJ+iob3W35Z6FGsHUkG19KueRaIaVzywxdQ1UUOrXO7gyS4yy?=
 =?us-ascii?q?F7nC8zrqqY2izD2ODidBsBOm5WS2hul1bsIY6oj98EWEikdRQmlByg5Uzi3ahU?=
 =?us-ascii?q?uLx/L3XPQUdPZyX3L2BiXrGwt7aYeM5P9ZUovD5TUOS9Z1CaV7H8rwEb0yPlA2?=
 =?us-ascii?q?tR2jQ7eyu2tZX+mhxwkHidI2prrHrFZcFwwg/S5N7GSv5L3ToGRy54hSPMBlem?=
 =?us-ascii?q?PNmp/tSUl5HdveC4TG+hUpxTcS/2zYKPrie75GtqAQGhkPC3gNHoDQ860Srj3d?=
 =?us-ascii?q?lwSSrItAr8YpXs16miMeNoZE5oCEX+68p7HIFziY8whJAW2XgHiZSZ53sHkWHv?=
 =?us-ascii?q?MdpF3aLydmYCRTkOw9TN+gjqxFVjLm6Vx4L+TnidwdFuZ9igbmMWxyIy9cZKCK?=
 =?us-ascii?q?iP4bxAnCt1pEe4rA3Lbfh8mDcd1eUh6HoAj+4Vvwotyz2XAqoOEklAISzsixOI?=
 =?us-ascii?q?4si7rKVWZ2aga6K81URgktC6ELGNvBtcV23ndZc4Ei999cF/MFPK0H3u5YDoYt?=
 =?us-ascii?q?jQbdQPthKKlxfMlfRaKJU0lvASnypoJXr9vWE5y+48lRFuwZa6vI2dJ2Rs5q25?=
 =?us-ascii?q?BANYNibuZ8MS4TztiadensCL34GgBJlhGzMLXIf2QvKsCj4dqfPnNwOWGj0mtn?=
 =?us-ascii?q?ibAabfHROY6Ep+tH3ACZerN3WKJHUDydViWQKQJEhegAASQTU7kYQ1FgGsxMz9?=
 =?us-ascii?q?bkh54iod6UL/qhtJ0uhoLQXwUn/DpAe0bTc5UJqfIwBT7g5c/EfZK9Ce4vhwHy?=
 =?us-ascii?q?FF/Z2hsQqNJXaAZwlTCWEJW0qEB03sP7W05NnA9fSYCfS6L/fUfbqOruleXe+S?=
 =?us-ascii?q?xZ2zyotm4yqMNsKXM3hiCP07x1NDXW1jFMTfgTkPUCsXlyTCb8OAoBe8+yt3rt?=
 =?us-ascii?q?2w8fjxWQLv45ePBKVWMdl15x+2hqKDPfaKhCllMTZYyo8MxXjQxbgfwlESiiJu?=
 =?us-ascii?q?dzqsEbgati7NVqXQmqBJAB4BdiNzL9BF76Y93glLJM7ahcn51r9+jv4pFVhFUU?=
 =?us-ascii?q?btld2uZcwPO2u9Lk/IBF6XNLSaIj3G29v4Yb6nRr1KkupVtwe8uTKaE0L4OjSD?=
 =?us-ascii?q?lj/pVw2gMO1WjSGbOgBet5+5chp3FWfjS9fmYAWhMNBrlT023aE0hnTSOG4AMD?=
 =?us-ascii?q?h8dllBoaGK4SxEgvVwBWpB42FhLemFnSaZ8ubZJowXsfttHiR7ieZa7G4mxLtS?=
 =?us-ascii?q?6SFOXOZ1lzfKrt5yv1GmlfGCyzp9XxpIrzZLhYSLsl1jOKXZ7JZAX3nE8QkJ7W?=
 =?us-ascii?q?WRDRQKutRkBsfuu6BW1tjAiqbzJC1e/NLT+MtPT/TTffqKLGBpFB7gFDPXRF8d?=
 =?us-ascii?q?SDqiOWzcr1dAi/zU/XqQ+NxykZX2l5cfAoRWUlsnFvoGEUd0VIgZLY14UyJiir?=
 =?us-ascii?q?Odi9wI7Galrwj5S8BTv5SBXfWXV7GnEyqUk7RCLyEP2q/1IZhbYpf8wFBvZkVS?=
 =?us-ascii?q?k4PNF0/RRpZKuCI3PSEup0AYzHViVXA0k2LsbA+kqCsLGPi7gx8wzwhze+Ig8B?=
 =?us-ascii?q?/tplMwOFeMvyIzjVM439PoxzKJJm2iZJysVJ1bXnKn/3M6NYn2FkMsNVW/?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AKAABrZgNch0O0hNFjGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUwMBAQEBCwGCbH8ng3mUIFIGgQgIJRRoiCOOKYF2DwEBGBMBhEA?=
 =?us-ascii?q?CgzQiNgcNAQMBAQEBAQECARMBAQEKCwkIKS+CNiQBgmEBAQEBAwECIARSBgkBA?=
 =?us-ascii?q?QoOAwMBAgECAiYCAgNMCAYBDAYCAQEBgxyBdQwBBaM+fDOKHIELixGBD4EHgRE?=
 =?us-ascii?q?nDIIqNYgFglcChyEHggiGRDWQFwmRNh6Ja4c7LIhYiQGDNIMNAhEUgU0EggIzG?=
 =?us-ascii?q?oNfgiQDF44sY4EFAQGNGgEB?=
X-IPAS-Result: =?us-ascii?q?A0AKAABrZgNch0O0hNFjGgEBAQEBAgEBAQEHAgEBAQGBUwM?=
 =?us-ascii?q?BAQEBCwGCbH8ng3mUIFIGgQgIJRRoiCOOKYF2DwEBGBMBhEACgzQiNgcNAQMBA?=
 =?us-ascii?q?QEBAQECARMBAQEKCwkIKS+CNiQBgmEBAQEBAwECIARSBgkBAQoOAwMBAgECAiY?=
 =?us-ascii?q?CAgNMCAYBDAYCAQEBgxyBdQwBBaM+fDOKHIELixGBD4EHgREnDIIqNYgFglcCh?=
 =?us-ascii?q?yEHggiGRDWQFwmRNh6Ja4c7LIhYiQGDNIMNAhEUgU0EggIzGoNfgiQDF44sY4E?=
 =?us-ascii?q?FAQGNGgEB?=
X-IronPort-AV: E=Sophos;i="5.56,305,1539673200"; 
   d="scan'208";a="140409905"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 01 Dec 2018 21:02:59 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1725769AbeLBFC5 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sun, 2 Dec 2018 00:02:57 -0500
Received: from www262.sakura.ne.jp ([202.181.97.72]:31856 "EHLO
        www262.sakura.ne.jp" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725372AbeLBFC5 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sun, 2 Dec 2018 00:02:57 -0500
Received: from fsav402.sakura.ne.jp (fsav402.sakura.ne.jp [133.242.250.101])
        by www262.sakura.ne.jp (8.15.2/8.15.2) with ESMTP id wB252YjJ065610;
        Sun, 2 Dec 2018 14:02:34 +0900 (JST)
        (envelope-from penguin-kernel@i-love.sakura.ne.jp)
Received: from www262.sakura.ne.jp (202.181.97.72)
 by fsav402.sakura.ne.jp (F-Secure/fsigk_smtp/530/fsav402.sakura.ne.jp);
 Sun, 02 Dec 2018 14:02:34 +0900 (JST)
X-Virus-Status: clean(F-Secure/fsigk_smtp/530/fsav402.sakura.ne.jp)
Received: from [192.168.1.8] (softbank126126163036.bbtec.net [126.126.163.36])
        (authenticated bits=0)
        by www262.sakura.ne.jp (8.15.2/8.15.2) with ESMTPSA id wB252T7l065513
        (version=TLSv1.2 cipher=AES256-SHA bits=256 verify=NO);
        Sun, 2 Dec 2018 14:02:34 +0900 (JST)
        (envelope-from penguin-kernel@i-love.sakura.ne.jp)
Subject: Re: [PATCH] printk: don't unconditionally shortcut print_time()
From: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>
To: Petr Mladek <pmladek@suse.com>,
        Sergey Senozhatsky <sergey.senozhatsky@gmail.com>,
        Steven Rostedt <rostedt@goodmis.org>
Cc: linux-kernel@vger.kernel.org
References: <1543056613-4779-1-git-send-email-penguin-kernel@I-love.SAKURA.ne.jp>
 <20181129141921.djeumz723fr7pasn@pathway.suse.cz>
 <201811300226.wAU2Q2JG060388@www262.sakura.ne.jp>
 <20181130123027.cyqfi2k34nh2gjmx@pathway.suse.cz>
 <02b4ce85-c1e5-6601-e3a7-cecfbd5298dc@i-love.sakura.ne.jp>
 <8634f952-7a14-055d-943c-d219ab5d8c1b@i-love.sakura.ne.jp>
Message-ID: <1c1de4f8-f08e-37e5-2438-47ab985d476e@i-love.sakura.ne.jp>
Date: Sun, 2 Dec 2018 14:02:28 +0900
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64; rv:60.0) Gecko/20100101
 Thunderbird/60.3.2
MIME-Version: 1.0
In-Reply-To: <8634f952-7a14-055d-943c-d219ab5d8c1b@i-love.sakura.ne.jp>
Content-Type: text/plain; charset=utf-8
Content-Language: en-US
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 2018/12/02 8:49, kbuild test robot wrote:
>> kernel/printk/printk.c:2396:5: error: 'printk_time' undeclared (first use in this function)
        ^~~~~~~~~~~
Thanks. printk_time depends on CONFIG_PRINTK=y. Added a dummy definition.



From f903b9fa36159472a207f93e2405e45e3999f650 Mon Sep 17 00:00:00 2001
From: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date: Sun, 2 Dec 2018 13:57:01 +0900
Subject: [PATCH v2] printk: fix printk_time race.

Since printk_time can be toggled via /sys/module/printk/parameters/time ,
it is not safe to assume that output length does not change across
multiple msg_print_text() calls. If we hit this race, we can observe
failures such as SYSLOG_ACTION_READ_ALL writes more bytes than userspace
has supplied, SYSLOG_ACTION_SIZE_UNREAD returns -EFAULT when succeeded,
SYSLOG_ACTION_READ reads garbage memory or even triggers an kernel oops
at _copy_to_user() due to integer overflow.

To close this race, get a snapshot value of printk_time and pass it to
SYSLOG_ACTION_READ, SYSLOG_ACTION_READ_ALL, SYSLOG_ACTION_SIZE_UNREAD and
kmsg_dump_get_buffer().

Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Signed-off-by: Petr Mladek <pmladek@suse.com>
---
 kernel/printk/printk.c | 69 +++++++++++++++++++++++++++-----------------------
 1 file changed, 38 insertions(+), 31 deletions(-)

diff --git a/kernel/printk/printk.c b/kernel/printk/printk.c
index 5c2079d..0b47e34 100644
--- a/kernel/printk/printk.c
+++ b/kernel/printk/printk.c
@@ -403,6 +403,7 @@ __packed __aligned(4)
 static u64 syslog_seq;
 static u32 syslog_idx;
 static size_t syslog_partial;
+static bool syslog_time;
 
 /* index and sequence number of the first record stored in the buffer */
 static u64 log_first_seq;
@@ -1228,12 +1229,7 @@ static inline void boot_delay_msec(int level)
 
 static size_t print_time(u64 ts, char *buf)
 {
-	unsigned long rem_nsec;
-
-	if (!printk_time)
-		return 0;
-
-	rem_nsec = do_div(ts, 1000000000);
+	unsigned long rem_nsec = do_div(ts, 1000000000);
 
 	if (!buf)
 		return snprintf(NULL, 0, "[%5lu.000000] ", (unsigned long)ts);
@@ -1242,7 +1238,8 @@ static size_t print_time(u64 ts, char *buf)
 		       (unsigned long)ts, rem_nsec / 1000);
 }
 
-static size_t print_prefix(const struct printk_log *msg, bool syslog, char *buf)
+static size_t print_prefix(const struct printk_log *msg, bool syslog,
+			   bool time, char *buf)
 {
 	size_t len = 0;
 	unsigned int prefix = (msg->facility << 3) | msg->level;
@@ -1261,11 +1258,13 @@ static size_t print_prefix(const struct printk_log *msg, bool syslog, char *buf)
 		}
 	}
 
-	len += print_time(msg->ts_nsec, buf ? buf + len : NULL);
+	if (time)
+		len += print_time(msg->ts_nsec, buf ? buf + len : NULL);
 	return len;
 }
 
-static size_t msg_print_text(const struct printk_log *msg, bool syslog, char *buf, size_t size)
+static size_t msg_print_text(const struct printk_log *msg, bool syslog,
+			     bool time, char *buf, size_t size)
 {
 	const char *text = log_text(msg);
 	size_t text_size = msg->text_len;
@@ -1284,17 +1283,17 @@ static size_t msg_print_text(const struct printk_log *msg, bool syslog, char *bu
 		}
 
 		if (buf) {
-			if (print_prefix(msg, syslog, NULL) +
+			if (print_prefix(msg, syslog, time, NULL) +
 			    text_len + 1 >= size - len)
 				break;
 
-			len += print_prefix(msg, syslog, buf + len);
+			len += print_prefix(msg, syslog, time, buf + len);
 			memcpy(buf + len, text, text_len);
 			len += text_len;
 			buf[len++] = '\n';
 		} else {
 			/* SYSLOG_ACTION_* buffer size only calculation */
-			len += print_prefix(msg, syslog, NULL);
+			len += print_prefix(msg, syslog, time, NULL);
 			len += text_len;
 			len++;
 		}
@@ -1331,9 +1330,17 @@ static int syslog_print(char __user *buf, int size)
 			break;
 		}
 
+		/*
+		 * To keep reading/counting partial line consistent,
+		 * use printk_time value as of the biginning of a line.
+		 */
+		if (!syslog_partial)
+			syslog_time = printk_time;
+
 		skip = syslog_partial;
 		msg = log_from_idx(syslog_idx);
-		n = msg_print_text(msg, true, text, LOG_LINE_MAX + PREFIX_MAX);
+		n = msg_print_text(msg, true, syslog_time, text,
+				   LOG_LINE_MAX + PREFIX_MAX);
 		if (n - syslog_partial <= size) {
 			/* message fits into buffer, move forward */
 			syslog_idx = log_next(syslog_idx);
@@ -1373,11 +1380,13 @@ static int syslog_print_all(char __user *buf, int size, bool clear)
 	u64 next_seq;
 	u64 seq;
 	u32 idx;
+	bool time;
 
 	text = kmalloc(LOG_LINE_MAX + PREFIX_MAX, GFP_KERNEL);
 	if (!text)
 		return -ENOMEM;
 
+	time = printk_time;
 	logbuf_lock_irq();
 	/*
 	 * Find first record that fits, including all following records,
@@ -1388,7 +1397,7 @@ static int syslog_print_all(char __user *buf, int size, bool clear)
 	while (seq < log_next_seq) {
 		struct printk_log *msg = log_from_idx(idx);
 
-		len += msg_print_text(msg, true, NULL, 0);
+		len += msg_print_text(msg, true, time, NULL, 0);
 		idx = log_next(idx);
 		seq++;
 	}
@@ -1399,7 +1408,7 @@ static int syslog_print_all(char __user *buf, int size, bool clear)
 	while (len > size && seq < log_next_seq) {
 		struct printk_log *msg = log_from_idx(idx);
 
-		len -= msg_print_text(msg, true, NULL, 0);
+		len -= msg_print_text(msg, true, time, NULL, 0);
 		idx = log_next(idx);
 		seq++;
 	}
@@ -1410,14 +1419,9 @@ static int syslog_print_all(char __user *buf, int size, bool clear)
 	len = 0;
 	while (len >= 0 && seq < next_seq) {
 		struct printk_log *msg = log_from_idx(idx);
-		int textlen;
+		int textlen = msg_print_text(msg, true, time, text,
+					     LOG_LINE_MAX + PREFIX_MAX);
 
-		textlen = msg_print_text(msg, true, text,
-					 LOG_LINE_MAX + PREFIX_MAX);
-		if (textlen < 0) {
-			len = textlen;
-			break;
-		}
 		idx = log_next(idx);
 		seq++;
 
@@ -1541,11 +1545,13 @@ int do_syslog(int type, char __user *buf, int len, int source)
 		} else {
 			u64 seq = syslog_seq;
 			u32 idx = syslog_idx;
+			bool f = syslog_partial ? syslog_time : printk_time;
 
 			while (seq < log_next_seq) {
 				struct printk_log *msg = log_from_idx(idx);
 
-				error += msg_print_text(msg, true, NULL, 0);
+				error += msg_print_text(msg, true, f, NULL, 0);
+				f = printk_time;
 				idx = log_next(idx);
 				seq++;
 			}
@@ -2003,6 +2009,7 @@ asmlinkage __visible int printk(const char *fmt, ...)
 
 #define LOG_LINE_MAX		0
 #define PREFIX_MAX		0
+#define printk_time		false
 
 static u64 syslog_seq;
 static u32 syslog_idx;
@@ -2026,8 +2033,8 @@ static void console_lock_spinning_enable(void) { }
 static int console_lock_spinning_disable_and_check(void) { return 0; }
 static void call_console_drivers(const char *ext_text, size_t ext_len,
 				 const char *text, size_t len) {}
-static size_t msg_print_text(const struct printk_log *msg,
-			     bool syslog, char *buf, size_t size) { return 0; }
+static size_t msg_print_text(const struct printk_log *msg, bool syslog,
+			     bool time, char *buf, size_t size) { return 0; }
 static bool suppress_message_printing(int level) { return false; }
 
 #endif /* CONFIG_PRINTK */
@@ -2385,8 +2392,7 @@ void console_unlock(void)
 
 		len += msg_print_text(msg,
 				console_msg_format & MSG_FORMAT_SYSLOG,
-				text + len,
-				sizeof(text) - len);
+				printk_time, text + len, sizeof(text) - len);
 		if (nr_ext_console_drivers) {
 			ext_len = msg_print_ext_header(ext_text,
 						sizeof(ext_text),
@@ -3110,7 +3116,7 @@ bool kmsg_dump_get_line_nolock(struct kmsg_dumper *dumper, bool syslog,
 		goto out;
 
 	msg = log_from_idx(dumper->cur_idx);
-	l = msg_print_text(msg, syslog, line, size);
+	l = msg_print_text(msg, syslog, printk_time, line, size);
 
 	dumper->cur_idx = log_next(dumper->cur_idx);
 	dumper->cur_seq++;
@@ -3181,6 +3187,7 @@ bool kmsg_dump_get_buffer(struct kmsg_dumper *dumper, bool syslog,
 	u32 next_idx;
 	size_t l = 0;
 	bool ret = false;
+	bool time = printk_time;
 
 	if (!dumper->active)
 		goto out;
@@ -3204,7 +3211,7 @@ bool kmsg_dump_get_buffer(struct kmsg_dumper *dumper, bool syslog,
 	while (seq < dumper->next_seq) {
 		struct printk_log *msg = log_from_idx(idx);
 
-		l += msg_print_text(msg, true, NULL, 0);
+		l += msg_print_text(msg, true, time, NULL, 0);
 		idx = log_next(idx);
 		seq++;
 	}
@@ -3215,7 +3222,7 @@ bool kmsg_dump_get_buffer(struct kmsg_dumper *dumper, bool syslog,
 	while (l > size && seq < dumper->next_seq) {
 		struct printk_log *msg = log_from_idx(idx);
 
-		l -= msg_print_text(msg, true, NULL, 0);
+		l -= msg_print_text(msg, true, time, NULL, 0);
 		idx = log_next(idx);
 		seq++;
 	}
@@ -3228,7 +3235,7 @@ bool kmsg_dump_get_buffer(struct kmsg_dumper *dumper, bool syslog,
 	while (seq < dumper->next_seq) {
 		struct printk_log *msg = log_from_idx(idx);
 
-		l += msg_print_text(msg, syslog, buf + l, size - l);
+		l += msg_print_text(msg, syslog, time, buf + l, size - l);
 		idx = log_next(idx);
 		seq++;
 	}
-- 
1.8.3.1


