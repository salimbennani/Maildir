Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  14 Dec 2018 20:25:01 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id E661C5803DC;
	Thu, 13 Dec 2018 22:43:17 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga004-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 13 Dec 2018 22:43:17 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AVNJwxR/4e5FMHf9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1+wRIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CRWRPQNtfWSJCDI27?=
 =?us-ascii?q?bYQPAfEBPf5aooTmu1cCsQGzCRW2Ce/z1jNFgGL9060g0+QmFAHLxAIgH8gJsH?=
 =?us-ascii?q?Xattr1MrodXfqxzKnJ1jXDc+hb2Tj46IfScxAhpeuAUq53ccrUz0QkCgDLjk2I?=
 =?us-ascii?q?pID7Iz+Y0v4Bv3WV4uZ+T+6jlm0qpx1rrjWuxMogkpfFi40Pxl3F7yl13YI4Kc?=
 =?us-ascii?q?OiREN7fdKpFoZbuTuAOItsWMwiRnlluCYkxb0Cvp62ZDYKyJs5yB7FcfCHcJaH?=
 =?us-ascii?q?4gjlVOmPJTd0nnVleKiwhxqq8EigzPPzVtWs3VpUsiZIlsPAum0D2hDN8MSLV/?=
 =?us-ascii?q?hw8lu71TuO1Q3f8uRELlo1larfJZ4h2Lkwlp8LvETHHy/2nlj2jaCPekUn5Oeo?=
 =?us-ascii?q?8eLnbavippOFMI91hAf+Pbo0msGkH+Q4PRYBX3KB9eS/yrLj50v5T6tOjvEsla?=
 =?us-ascii?q?nZqp/aKdwBpqGlGw9Vzpoj6xGnAjei0dQYnmcIIEhKeRKalIXpP1DOIPblDfaw?=
 =?us-ascii?q?mViskTFrx+zYMb3lGJnCMn/DkLL5d7Zn90Fc0BYzzcxY559MCrEOOvPzWlPru9?=
 =?us-ascii?q?zfFBM5MxG0zPzhCNVyzY4eXWOPAqmEMKLdq1OI5+QvI/WSa48RojryN/8l5/v2?=
 =?us-ascii?q?h38jhVAdZbWp3YcQaH2gHPRmJFuWbWDvgtcGF2cKuA0+QffuiF2DVz5TenmzU7?=
 =?us-ascii?q?g95jE9FIKpE4PDSpqxj7yG2SexBodWaXxeClCQDXfocJ2JVO0XaCKSJc9hkSYI?=
 =?us-ascii?q?VaK7RI8jzhyusA76y7x6Luvb4CEYtJTj1MRr6O3Xjx096Tt0D8GF2WGXU250hn?=
 =?us-ascii?q?8IRyMx3K1nokxy0FGD3bJ8g/xZD9NT4fxJXxw+NZ7dyex6Ft/zVhjAftePVFap?=
 =?us-ascii?q?XNGmDSstQdI2xt8Ee1x9FMm6jhDfwyqqBKcYmKGRC5wq7K3QxXjxKNx7y3bdyq?=
 =?us-ascii?q?YhiV4qQs9MNW2jgq5y7AzTB4/Pk0WEmKemb6Uc3CjR9GidyWqCpl1XUAl1Ua/d?=
 =?us-ascii?q?R3AQelPWrcjl5kPFV7KhFK4oMhVfxsKYKqtFcNvpjU5YS/flI9neZ2Oxm2GtBR?=
 =?us-ascii?q?eH3L+MbYzqe3kD0yXZEkQLjwcT/XOePwgkGiihu37eDCBpFV/3f0Ps8Ox+qHSn?=
 =?us-ascii?q?Tk80zwCGdVFh26Cy+h4PgfycSvUT3r0ftSclqjV0Gku93t3MB9qBoQphYLtTYd?=
 =?us-ascii?q?cn7Fhb0mLZshR3Poa8IKB6ml4ebwN3slv02BVzFIpBntYlrXMwwAVpNKKXzUlO?=
 =?us-ascii?q?dzWb3ZD3JL3aMW3y/BGpa67L1VDSyteW+qET6Psmr1Xvph2mFk0n839/ydlaz2?=
 =?us-ascii?q?Oc5onWDAoVSZ/wUls3+wJmqL3AYyg955nb1XtjMaSvtj/C2tQpBPYqyxq6ftdf?=
 =?us-ascii?q?Nr+EGxH2E8EAG8euL+kqkUCzbh0YJOBS6LI0P8S+evuc2a6kIPxvnCi7gmRA+o?=
 =?us-ascii?q?x91FyD9zB9SuLRw5kK2fWY0RaZWDfmi1ehtNv6mYRFZTEUA2q+xjLoBI9XZq1u?=
 =?us-ascii?q?Y4kLDX2iLNGwxtV7n5TtQWJX9Ea/B1Ma38+kYRqTb13n0QxQz0gXumGnmS2jwj?=
 =?us-ascii?q?xwkjEpqLef3SPUz+TjchoHJnBERG14gVjwJoi0isgQXFK0YAgxiBul+UH6yrBZ?=
 =?us-ascii?q?pKtlNWnTQkRIfy/sI2F5SKSwtbmCY89J6Jw2tyVaS+C8YVGcSr7grBoWySLjH2?=
 =?us-ascii?q?1CxD8lczGmoIn2nxt/iGiFNnZ8sGLZed1sxRfY/NHdReRe3j0cSCl6iDnXAEOx?=
 =?us-ascii?q?P92o/dWSipfCvfqyV2OnVp1PbybryZmMuze85W1vGRe/hey8msX7EQgm1i/2z9?=
 =?us-ascii?q?pqWj/JrBrmYonryr61MeRofkRzAF/86sx6Gpxxk4cqhZEQ32QaiYuR/XYdjWjz?=
 =?us-ascii?q?NtBb07rkbHURXT4L38LV4A/91U1mL3KJxJj2Wm+Tw8R/fNm6fn0Z2jgm4M9UEq?=
 =?us-ascii?q?eU46dJnS90olq+sALQbuJxnjYbyfsy9nEah/sFtxYqziWYGroSB1VXPTTwlxSU?=
 =?us-ascii?q?6NCztLlXZGGqcbSq1Utxh9ahDKyZogFHWXb0YZMiHS527sViP1PAynzz6of4eN?=
 =?us-ascii?q?bOadIfrAGbkxDFj+JNMpI+iuIKhTZ7OWL6pXAq0PQ0jRtq3ZGnpoSHL3ht8bm9?=
 =?us-ascii?q?Ah5ZMD31eswS9ivsjaZYgsaZwYSvEo99FTUMWZviVeioHy4KtfT7KwaOFyUxqn?=
 =?us-ascii?q?WBFrraAwCf811qr27VH5CoKnGXJ2QZzdN4SxmGP0FfhAEUXDMnnp82DAyqxcrh?=
 =?us-ascii?q?cFtn6TAV/FL3thxMyudwPRnlTmjfvBuoaiszSJWHLBtW6RxC517IMcOE6OJ/BT?=
 =?us-ascii?q?pY/pqnrAyCMWGbYwVIDWcUWk2LHVzjP7+u5cXe/OicHOaxM/zOYbCWo+xES/iI?=
 =?us-ascii?q?3Y6v0pdh/zuUNsWAIHhiD/442kpCR3x5GN7ZmzIASyMJjSLNctWbqQy4+i12qM?=
 =?us-ascii?q?C/7fvqVBju5YuJF7tdL9Fv9wqqjqeEMu6anDx5JipA1pMQ2X/Iz6AS00QPiy51?=
 =?us-ascii?q?bTmiD7QBuTTJTKLRgaJXCx8bayVuNMpH9a483w9NOdLFhdPxzLJ3kvk1C1JdX1?=
 =?us-ascii?q?z7hs6pfdAKI326NF7fGEaLNbGGKSfXzM3tfay8SaNfjONPuh20uDabFVLjPzuZ?=
 =?us-ascii?q?mznoURCvLf9DjCWBMBNCv4G9dw5nCXL/Q9L+dh27LNh3gCU2wLIugHPKMG8cMT?=
 =?us-ascii?q?5kfEJMrr2f9yVYgvpkFmxF73plK/SEmimD4+nZLJYWreVkAiBum+1G53Q6zugd?=
 =?us-ascii?q?0CYRXvt/mGjesvZtrkugn+3JzSBoFFJrqz1LjY+P9W94OKPW85BGXz6Q+Q0HxW?=
 =?us-ascii?q?GRDQka4cVjB8GpuqpVjNPIkfS3YDND9c/E5dMXQsTZNuqDMWE9KlzuCjrdBhBD?=
 =?us-ascii?q?SiSkZk/FgEkInuuV6XSTot4+q4PwsJULQ75fElcyE6BJQn95FcAPdc8kFggvlq?=
 =?us-ascii?q?SW2YtRvSKz?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ACAABOUBNch0O0hNFjGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBg2snjBVfizKCDRSJEW6IRYR9FIFdFAEBGBM?=
 =?us-ascii?q?Bh0UiNAkNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkAYJiAwMBAiQZARsdAQMCC?=
 =?us-ascii?q?QEBBRAKMQMgEQEFARwGARIFgxyBaAEDFQWbGTyMCRYFAReCdwWBAYM/ChknDV0?=
 =?us-ascii?q?TgSQCBhKHa4F9gSiBHIIWgRGHXB+FcwKJPYcKhSqLIgcChk2LDAIWiW2BXYYBL?=
 =?us-ascii?q?IJXhi2PeQIEAgkCBQ8hgSWCDh9RgQGCO4IbDBeDSop0HzIBgQMBAQE7iV2CTQE?=
 =?us-ascii?q?B?=
X-IPAS-Result: =?us-ascii?q?A0ACAABOUBNch0O0hNFjGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBg2snjBVfizKCDRSJEW6IRYR9FIFdFAEBGBMBh0UiNAkNAQMBA?=
 =?us-ascii?q?QEBAQECARMBAQEIDQkIKSMMgjYkAYJiAwMBAiQZARsdAQMCCQEBBRAKMQMgEQE?=
 =?us-ascii?q?FARwGARIFgxyBaAEDFQWbGTyMCRYFAReCdwWBAYM/ChknDV0TgSQCBhKHa4F9g?=
 =?us-ascii?q?SiBHIIWgRGHXB+FcwKJPYcKhSqLIgcChk2LDAIWiW2BXYYBLIJXhi2PeQIEAgk?=
 =?us-ascii?q?CBQ8hgSWCDh9RgQGCO4IbDBeDSop0HzIBgQMBAQE7iV2CTQEB?=
X-IronPort-AV: E=Sophos;i="5.56,351,1539673200"; 
   d="scan'208";a="66805235"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 13 Dec 2018 22:43:16 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727314AbeLNGnM (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 14 Dec 2018 01:43:12 -0500
Received: from mail-pf1-f194.google.com ([209.85.210.194]:45665 "EHLO
        mail-pf1-f194.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727179AbeLNGnK (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 14 Dec 2018 01:43:10 -0500
Received: by mail-pf1-f194.google.com with SMTP id g62so2331789pfd.12;
        Thu, 13 Dec 2018 22:43:10 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=from:to:cc:subject:date:message-id:in-reply-to:references;
        bh=Cf9GacyXSfcSYQD1hrpRVZxNJit6THuob2xtfEuPnDI=;
        b=BfR4psKlef8o1v7MrtDWgkZZzDExJYmy4mI4dQpM+NCUPR36QJKUy4unCEA57QnUUA
         Sps7DfOJ1jBmEfYhhCSRvMGVHvGYFb/NaYX9J5SEqeGEnOHBlNihiicX61pVD+T28TYs
         4TNWbdVHqBicWWAIW/nkNhKqkqf1ldlMJ3WLyFWQB8MMWXMvSDs+reYLEKwrD0iVMTcq
         iSFJl0s30i76WyP/6mhp07Mw064q9uUVCjDzThKZd0Fh2H18oehZFVr+8s/f4SFm4zmT
         GWYzHI8o7MaYkIaXx7SA6AVW/SQ25KY8g9zbGr8eNhj7Onp5dm5QoOw031wSS8HFGDrj
         bdvQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references;
        bh=Cf9GacyXSfcSYQD1hrpRVZxNJit6THuob2xtfEuPnDI=;
        b=lkcXb/HpWzrzw4i5yM2F42hXtXhq/s/lnCxaeD8oPOnHCjPuSp8DuARPxKVkvERh4V
         7YAYg2Ejj1mdZwg+L3TVkczxyrWP84y4y/NwSTPmGYxArO685pFz4l2LV/NF+QmOzK/A
         4hYdjZ6EL5A8XT1pQdxvCFBkQLOwW6uES9ar2R8ejueFISGqFitBU/1hbjC0sDZLz2Be
         ctm8GrJ44NWDyp4JZQA4RyUJoB8FNPPpINsCcy6Eq+25co11NYl2+zCI4BV8yvDpwwyu
         auOUSC4cW5RYdefFD4EeqLQLsI8tl7aVLB4EBzB2/OO+2pd6z1bOpzY+0EFF46m1xtiz
         wPUw==
X-Gm-Message-State: AA+aEWbY/QZwKn3a2JJ8LQaHyzoWShyp+FmRTJQCe4JbWKh7oT5ALit2
        n8Pwhze3R4cO3YYqirJQneM=
X-Google-Smtp-Source: AFSGD/Vg2CvhlVmp4b//gn5A/j1f42Ky3SwA3E9gurSpJOgfuPyLKwTNxjQsnapNqgIr3rq+9M+qEA==
X-Received: by 2002:a63:9501:: with SMTP id p1mr1676451pgd.149.1544769790012;
        Thu, 13 Dec 2018 22:43:10 -0800 (PST)
Received: from localhost.localdomain (c-24-6-192-50.hsd1.ca.comcast.net. [24.6.192.50])
        by smtp.gmail.com with ESMTPSA id e16sm5132645pfn.46.2018.12.13.22.43.08
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-SHA bits=128/128);
        Thu, 13 Dec 2018 22:43:09 -0800 (PST)
From: frowand.list@gmail.com
To: robh+dt@kernel.org, Michael Bringmann <mwb@linux.vnet.ibm.com>,
        linuxppc-dev@lists.ozlabs.org
Cc: Michael Ellerman <mpe@ellerman.id.au>,
        Tyrel Datwyler <tyreld@linux.vnet.ibm.com>,
        Thomas Falcon <tlfalcon@linux.vnet.ibm.com>,
        Juliet Kim <minkim@us.ibm.com>, devicetree@vger.kernel.org,
        linux-kernel@vger.kernel.org
Subject: [PATCH 2/2] of: __of_detach_node() - remove node from phandle cache
Date: Thu, 13 Dec 2018 22:42:51 -0800
Message-Id: <1544769771-5468-3-git-send-email-frowand.list@gmail.com>
X-Mailer: git-send-email 1.9.1
In-Reply-To: <1544769771-5468-1-git-send-email-frowand.list@gmail.com>
References: <1544769771-5468-1-git-send-email-frowand.list@gmail.com>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From: Frank Rowand <frank.rowand@sony.com>

Non-overlay dynamic devicetree node removal may leave the node in
the phandle cache.  Subsequent calls to of_find_node_by_phandle()
will incorrectly find the stale entry.  Remove the node from the
cache.

Add paranoia checks in of_find_node_by_phandle() as a second level
of defense (do not return cached node if detached, do not add node
to cache if detached).

Reported-by: Michael Bringmann <mwb@linux.vnet.ibm.com>
Signed-off-by: Frank Rowand <frank.rowand@sony.com>
---
 drivers/of/base.c       | 29 ++++++++++++++++++++++++++++-
 drivers/of/dynamic.c    |  3 +++
 drivers/of/of_private.h |  4 ++++
 3 files changed, 35 insertions(+), 1 deletion(-)

diff --git a/drivers/of/base.c b/drivers/of/base.c
index d599367cb92a..34a5125713c8 100644
--- a/drivers/of/base.c
+++ b/drivers/of/base.c
@@ -162,6 +162,27 @@ int of_free_phandle_cache(void)
 late_initcall_sync(of_free_phandle_cache);
 #endif
 
+/*
+ * Caller must hold devtree_lock.
+ */
+void __of_free_phandle_cache_entry(phandle handle)
+{
+	phandle masked_handle;
+
+	if (!handle)
+		return;
+
+	masked_handle = handle & phandle_cache_mask;
+
+	if (phandle_cache) {
+		if (phandle_cache[masked_handle] &&
+		    handle == phandle_cache[masked_handle]->phandle) {
+			of_node_put(phandle_cache[masked_handle]);
+			phandle_cache[masked_handle] = NULL;
+		}
+	}
+}
+
 void of_populate_phandle_cache(void)
 {
 	unsigned long flags;
@@ -1209,11 +1230,17 @@ struct device_node *of_find_node_by_phandle(phandle handle)
 		if (phandle_cache[masked_handle] &&
 		    handle == phandle_cache[masked_handle]->phandle)
 			np = phandle_cache[masked_handle];
+		if (np && of_node_check_flag(np, OF_DETACHED)) {
+			of_node_put(np);
+			phandle_cache[masked_handle] = NULL;
+			np = NULL;
+		}
 	}
 
 	if (!np) {
 		for_each_of_allnodes(np)
-			if (np->phandle == handle) {
+			if (np->phandle == handle &&
+			    !of_node_check_flag(np, OF_DETACHED)) {
 				if (phandle_cache) {
 					/* will put when removed from cache */
 					of_node_get(np);
diff --git a/drivers/of/dynamic.c b/drivers/of/dynamic.c
index f4f8ed9b5454..ecea92f68c87 100644
--- a/drivers/of/dynamic.c
+++ b/drivers/of/dynamic.c
@@ -268,6 +268,9 @@ void __of_detach_node(struct device_node *np)
 	}
 
 	of_node_set_flag(np, OF_DETACHED);
+
+	/* race with of_find_node_by_phandle() prevented by devtree_lock */
+	__of_free_phandle_cache_entry(np->phandle);
 }
 
 /**
diff --git a/drivers/of/of_private.h b/drivers/of/of_private.h
index 5d1567025358..24786818e32e 100644
--- a/drivers/of/of_private.h
+++ b/drivers/of/of_private.h
@@ -84,6 +84,10 @@ static inline void __of_detach_node_sysfs(struct device_node *np) {}
 int of_resolve_phandles(struct device_node *tree);
 #endif
 
+#if defined(CONFIG_OF_DYNAMIC)
+void __of_free_phandle_cache_entry(phandle handle);
+#endif
+
 #if defined(CONFIG_OF_OVERLAY)
 void of_overlay_mutex_lock(void);
 void of_overlay_mutex_unlock(void);
-- 
Frank Rowand <frank.rowand@sony.com>

