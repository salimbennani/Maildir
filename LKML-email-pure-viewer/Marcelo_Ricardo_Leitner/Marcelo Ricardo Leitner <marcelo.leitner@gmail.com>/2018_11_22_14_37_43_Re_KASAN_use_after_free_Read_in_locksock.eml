Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 22 Nov 2018 22:45:37 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 16D5F58040F;
	Thu, 22 Nov 2018 06:43:53 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga001-1.jf.intel.com with ESMTP; 22 Nov 2018 06:43:52 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AXWU9KxzGFK5yL6/XCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0ewWK/ad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYO/1jcKPAZtMaXXROUdpNVyJPBYO8?=
 =?us-ascii?q?apEAD+sHPe1Fq4XwqF8DoR64CAKxBu3g1yVIi2f406M6zeovDALI3AIvEN0SrX?=
 =?us-ascii?q?vbrtv6NLwKUe2316TI0SnPY+9K1Tvh8oXEbBYsquyMU7JqdsrRzFEiGQTfgVWK?=
 =?us-ascii?q?tYPqITeV1uMQuGaH7upvSfigi3Q6pAF2vzOhwNkjiojVhoIT1F/E7zhyzYEwJd?=
 =?us-ascii?q?KiUk50fcCrEJ9Xty2AM4t5XMIiQ31uuCkk0L0LopG7fC0Qx5Qmwx7TceCIc4+N?=
 =?us-ascii?q?4h/6UuuaPDl2hHVgeL2lhhay91CtxfbmWcmvzllGtDFFktrUun8XzxzT8tOHSu?=
 =?us-ascii?q?N6/ke9wzqAywfT6uRCLEsplqTbM4YszqAsmpcXq0jPAyH7lFvsgKOLdUgo5vKk?=
 =?us-ascii?q?5uXlb7n+u5ORNox5hhvjPqkqlcGzG/k0PwkSU2SB5Oix1KPv8EvkS7tQlPI2iL?=
 =?us-ascii?q?PWsJXCKMQbuKG5BwhV35496xawETimys4UnXoZI1JffhKIkYzpN0vJIPDiAvez?=
 =?us-ascii?q?m1WskDF1yPDaJrDtHInBI3zZnLv8c7tx9VRQxBcwwNxD/Z5ZC7MMLOr2WkDrtd?=
 =?us-ascii?q?zYChE5Mxazw+biENh90oIeWWSSAq6WKa/SskGH5vgpI+aSYI8ZoTH9KvYj5/Hw?=
 =?us-ascii?q?l380gkEdfaa30psNcny4HeppI1+fYXXyhtcNC2AKvhAxTODykl2NTSZTZ2quX6?=
 =?us-ascii?q?I7/jw7DIOmDYTdSYy3j72BwTy2HplXZmBAF1CNHm3kd4SCW/cQdi2SJtVtnSAD?=
 =?us-ascii?q?VbikU4Uhzw2htBfmy7p7KerZ4i0Yuoji1Nhp/eLTkgs+9TxpD8uH1WGNQHp5nm?=
 =?us-ascii?q?cJRz8wwaB+rlZxylaF0ahknfNYEcZf6O9OUgc/LZTc1fB1C8juWgLdedeEUFSm?=
 =?us-ascii?q?QtK4Dj0rTdIxxNkOY0B6G9i5ihDD3iyqA6IalrCRBZw09L7c0Gb1J8pn13nG06?=
 =?us-ascii?q?whhUE8QsRTLW2mmrJ/9w/LCoHTiEWZl6GqdacG0C7X7miDz3GDvEVZUA52TKXE?=
 =?us-ascii?q?UmoTZkrQrdTl+EzCS6WiBqggMgtE0cSCMLdFasX1jVVaQ/fuINfebHi3m2uqAR?=
 =?us-ascii?q?aIx6mDbIzle2gG2CXdCU4Ekx0c/HqcNAg+ADuhrHzaDDB0CV3vZEbs+/FkqHyn?=
 =?us-ascii?q?Vk800x2Kb0p52rWo4BEVm+KTR+kT3r0evichsCt7HFC609LSCNqAog5hcb5YYd?=
 =?us-ascii?q?M85ldHyG3YuxZ8PpymM6BtmFoefx5rsEPp0hV9Ep9AntQyrHM20ApyLrqV305b?=
 =?us-ascii?q?eDOGw5/8IL3XJXP0/BC0daHW3ErT0NKX+qcJ9fQ5pE/vvACvFko+7Xpn18NZ3G?=
 =?us-ascii?q?eb5pXPFAASS47+Ul4r9xhmoLHXejU954LR1X1rLam0sj/D18g1BOc/zRagZdNf?=
 =?us-ascii?q?MKKCFA/9CMAaA8muKOo3m1mmdB4EPeZS9LIqMMOibfeJxKmrPON4ljK8kWtH+J?=
 =?us-ascii?q?x90l6L9ydkUOHI24gKwv6G0QqHTTvzl0qhvd3tloBCZjESGXS/xDPgBI5QYK1y?=
 =?us-ascii?q?YIkKBX2vI82x2tVxmZrtV2RE+16kAlMMwNWpdgaKb1zhwQ1Q0lwaoHy6mSei0z?=
 =?us-ascii?q?N4iTAorqqF0yzIzOTvbx4HOm9NRGl/glbgO4m0j9YGXEe2awgljgeq5UH/x6JD?=
 =?us-ascii?q?vqRwM3HTQVtUfyjxN2xiSKqwuaaYbM5V9Zwotj9bUOKiblCAS77xugcV3DnnH2?=
 =?us-ascii?q?RD2j87bTaqupPikhx+iWKdKmtzrXXDdcFxwxff+MLTRfpL0jUaQyl4jCHdBkKg?=
 =?us-ascii?q?MNmx4dWUi5DDv/i+VmKgTJFScTPnzZidtCu9/mBqBRy/n/aumtzoCwQ60Cn718?=
 =?us-ascii?q?V0WiXMthrzfo7r16GiO+J9YkZoHEP869Z9GoxmkIs/nosQ2XsZhpWS53YHin38?=
 =?us-ascii?q?MdZY2aL/anoCWzgLzsXR4Ajk3k1jM32Iy5j4VnWb3stued26bnkK1SI66sBAEL?=
 =?us-ascii?q?2U46BcnStpvlq4qhrcYPhnkTca0/cu6n8ag+cStQopzyWdBK0SHEZCMSztkRSI?=
 =?us-ascii?q?886xrKFNaGmzdriw0VJ0ncq9A7GavgFcRHH5d48hHSBq78VzKlLM0GDp5YHid9?=
 =?us-ascii?q?nddtYTthySkxfdgOlZMpMxlvwWhSV5PWLxp2Eqy+k+jRZ2x5G1oJCHK3lx/KK+?=
 =?us-ascii?q?GhNYMzz1Z8AJ9T33g6dRgN2W35yxEZV7AToEQoHoTf2zHTIWtPTnMRuOETImpn?=
 =?us-ascii?q?eaH7rfARGQ6EN8o33TFJCrMmmdJGMFwtV6WBmdOEtfjRgIXDU9m541DAGry9bn?=
 =?us-ascii?q?cEdk/TAR/V/4pwBIyuJpMRn/T2jeqB2pajcyVJiQMh5W4hte6EfSNMyU9vhzED?=
 =?us-ascii?q?1A/p29sAyNLXSWaB9SAmEOXkyEGkrvPr2z5dTb9+iYB+y+L+bBYLmUqOxeUeuI?=
 =?us-ascii?q?yoyr0od84zmMMcCPNGF4D/InwkpDQWx5G8PBljUNUSMXkjzCb9WBqBeg4CF3rd?=
 =?us-ascii?q?2/8Pf2WALp/4SPEKBfMdFu+xCwnKeCOPSchCd/KTZEyJwMwWXEx6QY3F4Xkytu?=
 =?us-ascii?q?bSWiEawctS7RS6Ldgq9WDxkGayNqKctH9aQ80hNWOc7cjNP12aV1jvo0C1dDSF?=
 =?us-ascii?q?zgldulZc0MI2GhKlzHAFyHO6iBJT3O28v3e7+zSaVMjOVIsB29oTabHFHiPjSA?=
 =?us-ascii?q?lDnpVgqjMeJWjCGcMxxRppu9cgt2CWX4SNLmaxu7MMJ4jDEswL00gG/KOnAYMT?=
 =?us-ascii?q?Rmb0xNqbiQ5ztCgvpjA2xB8mZlLe6climD8unXMYwWvuVrAyhuk+Ja4W83y79U?=
 =?us-ascii?q?7CFCWfx0lzHert9oo1G6jOaPziBrXwZJqjZOnIiLp1ltOb3F9plcXnbJ5A4N7W?=
 =?us-ascii?q?SVCxgQu9RpEMHgu6BOxdjJj6/zLDZC89TJ/coTHcTUKcSHMGY/PhrtAjLbEAwF?=
 =?us-ascii?q?TTuzP2HFm0NdiO2S9mGSrpUiqpnjgpwOSrpaVFwzDvwbC0RlE8YEIJd4RT4klb?=
 =?us-ascii?q?+bjMgV5XuxthXRRcNavozZWfKWG/ngNDGZjbwXLycPlIP5K8w3MYv0kxhmd1J7?=
 =?us-ascii?q?kYKMC0vWdd9IqyxlKAQzpRMe3mJ5SzgW0ljuZweqqEUSHveukhl+rgZ/feIg7n?=
 =?us-ascii?q?+45l4tLVfOo200nUgtn9j/qT+UeT/1aqy3WNcFWGLPq0EtP8ajEE5OZgqokBkh?=
 =?us-ascii?q?aW7J?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAABRwPZbh0O0hNFiEwEBBAEBAQEBA?=
 =?us-ascii?q?QEBAQEBAQcBAQEBAQGBUQQBAQEBAQsBgmmBAhQTjBCMAYINFJcmgXMSAQEYCwg?=
 =?us-ascii?q?BiFIiNAkNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkgmIBAQEBAgEBAiQTBgEbH?=
 =?us-ascii?q?QEDAQEJAQEFBQ4KCSUDDAUNAgkIAQUBIhMFgxwBgWgBAw0IBQqeDDyMCRYFARe?=
 =?us-ascii?q?CdwWBAYM4ChknDVqBNwIBBRKKW4EcgVc/gRGDEoJWRQQYhHyCJgKIf4IShAiQO?=
 =?us-ascii?q?y4HAoY9P4cIgyAjgVmFCwWCaDaHASyNF4EKiTwGAgkHDyGBJWyBITMaI4M8ghs?=
 =?us-ascii?q?JAxeDSopqKDIBgQMBAQE7jBkBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ABAABRwPZbh0O0hNFiEwEBBAEBAQEBAQEBAQEBAQcBAQE?=
 =?us-ascii?q?BAQGBUQQBAQEBAQsBgmmBAhQTjBCMAYINFJcmgXMSAQEYCwgBiFIiNAkNAQMBA?=
 =?us-ascii?q?QEBAQECARMBAQEIDQkIKSMMgjYkgmIBAQEBAgEBAiQTBgEbHQEDAQEJAQEFBQ4?=
 =?us-ascii?q?KCSUDDAUNAgkIAQUBIhMFgxwBgWgBAw0IBQqeDDyMCRYFAReCdwWBAYM4ChknD?=
 =?us-ascii?q?VqBNwIBBRKKW4EcgVc/gRGDEoJWRQQYhHyCJgKIf4IShAiQOy4HAoY9P4cIgyA?=
 =?us-ascii?q?jgVmFCwWCaDaHASyNF4EKiTwGAgkHDyGBJWyBITMaI4M8ghsJAxeDSopqKDIBg?=
 =?us-ascii?q?QMBAQE7jBkBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,266,1539673200"; 
   d="scan'208";a="41198600"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 22 Nov 2018 06:43:51 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2404369AbeKWBR2 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 22 Nov 2018 20:17:28 -0500
Received: from mail-qt1-f195.google.com ([209.85.160.195]:34022 "EHLO
        mail-qt1-f195.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1730718AbeKWBR1 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 22 Nov 2018 20:17:27 -0500
Received: by mail-qt1-f195.google.com with SMTP id r14so7632198qtp.1;
        Thu, 22 Nov 2018 06:37:48 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=0M+LttlhlEKW7lTEt0z0x64h8C5T97YZoUafZU92Z10=;
        b=lravK+qnAmnID7D3sXmY/uzm0oZ0EhmY0SQ9ZGxf8RKVrpKOtxTr1lQ1KE79lyV5ZM
         58cF9mlZ48x53mI3sy2K9jC4vUfjY0zTgfYwHSGsnX2wiPyfYtFrKtbwlzlRpn0+ScNY
         ObDYKKpWF2t7hHqoAeC5KEaKtsXM2UsYou8kv6GiSQReF91rVGW8QerWMkgnL/eWcndS
         MNydfG9t86fYLHfp9M70Y9cGnDQyo1PfLXAL6xsMC8jpleQb2AgmNSYQfbc2zRnm6CYm
         Wl12wW+ma0KAgKDTUu0vGhxoCBWdgolyfnriBS8PvVBmR/IUMYATJJLt1iAtJenFv3B/
         Vq1A==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:message-id:references
         :mime-version:content-disposition:in-reply-to:user-agent;
        bh=0M+LttlhlEKW7lTEt0z0x64h8C5T97YZoUafZU92Z10=;
        b=T6aLkw/k4Fezk7dc1kB2DobhuctBEbVtXzmnX3W0Wn/CSo7TGzPwsRRjsYgU3xFBY2
         CFEDUsn5wG6VZAW5sYhQYmzj56VbBf2/GCD8NfFeGFBW0+g+hDwp2h963DMJ4izWmeyO
         xixZfJei8EB+McLZykK+4lMH7FiV48Xz7DisGwVxTGfc1Bye2Os5RrWg/As7LRXMxhXn
         gJUuz8OEPmjvIhdXCMKJcvnkGtRk2xGRVa+S2SENLkg+VRfowmep3s8eFhmggQe07ilV
         3UikNXXR/bJj0IU8juvljb3UHjdEZX79GCKmuefCaIPKTwKDbBv983SmOMxpRNSwdu+j
         VEYQ==
X-Gm-Message-State: AGRZ1gJ2DSx5vUST8wnNcF7It5oraHBUQMyig9L7tZhgUgg1Q93I2dLQ
        c5Nd+wQgqi+XVduaXgVpf30=
X-Google-Smtp-Source: AFSGD/XLXdcjTL09YtVVDNxevwmb2UaeMhBwc7CjLo+HSysSLU8h2WY31TEkuooVcZ/JZchln396OA==
X-Received: by 2002:ac8:88:: with SMTP id c8mr10545277qtg.218.1542897467973;
        Thu, 22 Nov 2018 06:37:47 -0800 (PST)
Received: from localhost.localdomain ([168.194.160.152])
        by smtp.gmail.com with ESMTPSA id q184sm21634688qkb.23.2018.11.22.06.37.45
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Thu, 22 Nov 2018 06:37:46 -0800 (PST)
Received: by localhost.localdomain (Postfix, from userid 1000)
        id 59C0A180E13; Thu, 22 Nov 2018 12:37:43 -0200 (-02)
Date: Thu, 22 Nov 2018 12:37:43 -0200
From: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
To: Xin Long <lucien.xin@gmail.com>
Cc: syzbot+9276d76e83e3bcde6c99@syzkaller.appspotmail.com,
        davem <davem@davemloft.net>, LKML <linux-kernel@vger.kernel.org>,
        linux-sctp@vger.kernel.org, network dev <netdev@vger.kernel.org>,
        Neil Horman <nhorman@tuxdriver.com>,
        syzkaller-bugs@googlegroups.com,
        Vlad Yasevich <vyasevich@gmail.com>
Subject: Re: KASAN: use-after-free Read in __lock_sock
Message-ID: <20181122143743.GE31918@localhost.localdomain>
References: <000000000000b98a67057ad7158a@google.com>
 <CADvbK_f3CpK=qJFngBGmO3VXFLsJm9=qqZVtxYOeBS8rwE=9Ew@mail.gmail.com>
 <20181122131344.GD31918@localhost.localdomain>
 <CADvbK_f0n64K==prdcM0KzU0S3pbo1oMW3HhE8zMngCUZp3-iQ@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <CADvbK_f0n64K==prdcM0KzU0S3pbo1oMW3HhE8zMngCUZp3-iQ@mail.gmail.com>
User-Agent: Mutt/1.10.1 (2018-07-13)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Thu, Nov 22, 2018 at 10:44:16PM +0900, Xin Long wrote:
> On Thu, Nov 22, 2018 at 10:13 PM Marcelo Ricardo Leitner
> <marcelo.leitner@gmail.com> wrote:
> >
> > On Mon, Nov 19, 2018 at 05:57:33PM +0900, Xin Long wrote:
> > > On Sat, Nov 17, 2018 at 4:18 PM syzbot
> > > <syzbot+9276d76e83e3bcde6c99@syzkaller.appspotmail.com> wrote:
> > > >
> > > > Hello,
> > > >
> > > > syzbot found the following crash on:
> > > >
> > > > HEAD commit:    ccda4af0f4b9 Linux 4.20-rc2
> > > > git tree:       upstream
> > > > console output: https://syzkaller.appspot.com/x/log.txt?x=156cd533400000
> > > > kernel config:  https://syzkaller.appspot.com/x/.config?x=4a0a89f12ca9b0f5
> > > > dashboard link: https://syzkaller.appspot.com/bug?extid=9276d76e83e3bcde6c99
> > > > compiler:       gcc (GCC) 8.0.1 20180413 (experimental)
> > > >
> > > > Unfortunately, I don't have any reproducer for this crash yet.
> > > >
> > > > IMPORTANT: if you fix the bug, please add the following tag to the commit:
> > > > Reported-by: syzbot+9276d76e83e3bcde6c99@syzkaller.appspotmail.com
> > > >
> > > > netlink: 5 bytes leftover after parsing attributes in process
> > > > `syz-executor5'.
> > > > ==================================================================
> > > > BUG: KASAN: use-after-free in __lock_acquire+0x36d9/0x4c20
> > > > kernel/locking/lockdep.c:3218
> > > > Read of size 8 at addr ffff8881d26d60e0 by task syz-executor1/13725
> > > >
> > > > CPU: 0 PID: 13725 Comm: syz-executor1 Not tainted 4.20.0-rc2+ #333
> > > > Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS
> > > > Google 01/01/2011
> > > > Call Trace:
> > > >   __dump_stack lib/dump_stack.c:77 [inline]
> > > >   dump_stack+0x244/0x39d lib/dump_stack.c:113
> > > >   print_address_description.cold.7+0x9/0x1ff mm/kasan/report.c:256
> > > >   kasan_report_error mm/kasan/report.c:354 [inline]
> > > >   kasan_report.cold.8+0x242/0x309 mm/kasan/report.c:412
> > > >   __asan_report_load8_noabort+0x14/0x20 mm/kasan/report.c:433
> > > >   __lock_acquire+0x36d9/0x4c20 kernel/locking/lockdep.c:3218
> > > >   lock_acquire+0x1ed/0x520 kernel/locking/lockdep.c:3844
> > > >   __raw_spin_lock_bh include/linux/spinlock_api_smp.h:135 [inline]
> > > >   _raw_spin_lock_bh+0x31/0x40 kernel/locking/spinlock.c:168
> > > >   spin_lock_bh include/linux/spinlock.h:334 [inline]
> > > >   __lock_sock+0x203/0x350 net/core/sock.c:2253
> > > >   lock_sock_nested+0xfe/0x120 net/core/sock.c:2774
> > > >   lock_sock include/net/sock.h:1492 [inline]
> > > >   sctp_sock_dump+0x122/0xb20 net/sctp/diag.c:324
> > >
> > > static int sctp_sock_dump(struct sctp_transport *tsp, void *p)
> > > {
> > >         struct sctp_endpoint *ep = tsp->asoc->ep;
> > >         struct sctp_comm_param *commp = p;
> > >         struct sock *sk = ep->base.sk; <--- [1]
> > > ...
> > >         int err = 0;
> > >
> > >         lock_sock(sk);  <--- [2]
> > >
> > > Between [1] and [2], an asoc peeloff may happen, still thinking
> > > how to avoid this.
> >
> > This race cannot happen more than once for an asoc, so something
> > like this may be doable:
> >
> >         struct sctp_comm_param *commp = p;
> >         struct sctp_endpoint *ep;
> >         struct sock *sk;
> > ...
> >         int err = 0;
> >
> > again:
> >         ep = tsp->asoc->ep;
> >         sk = ep->base.sk; <---[3]
> >         lock_sock(sk);  <--- [2]
> if peel-off happens between [3] and [2], and sk is freed
> somewhere, it will panic on [2] when trying to get the
> sk->lock, no?

Not sure what protects it, but this construct is also used in BH processing at
sctp_rcv():
...
        bh_lock_sock(sk); [4]

        if (sk != rcvr->sk) {
                /* Our cached sk is different from the rcvr->sk.  This is
                 * because migrate()/accept() may have moved the association
                 * to a new socket and released all the sockets.  So now we
                 * are holding a lock on the old socket while the user may
                 * be doing something with the new socket.  Switch our veiw
                 * of the current sk.
                 */
                bh_unlock_sock(sk);
                sk = rcvr->sk;
                bh_lock_sock(sk);
        }
...

If it is not safe, then we have an issue there too.
And by [4] that copy on sk is pretty old already.

> 
> >         if (sk != tsp->asoc->ep->base.sk) {
> >                 /* Asoc was peeloff'd */
> >                 unlock_sock(sk);
> >                 goto again;
> >         }
> >
> > Similarly to what we did on cea0cc80a677 ("sctp: use the right sk
> > after waking up from wait_buf sleep").
