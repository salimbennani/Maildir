Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 28 Nov 2018 08:46:10 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 9DEF458041B;
	Tue, 27 Nov 2018 07:18:33 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga004-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 27 Nov 2018 07:18:32 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Ak+eJNhcuI3YDw6YNBHjh+Wy/lGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc6+bRWN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRODYOy?=
 =?us-ascii?q?bYQBD+QPM+VFoYfju1QAogC+BRGuCe701j9In2X70bEm3+g9EwzL2hErEdIUsH?=
 =?us-ascii?q?TTqdX4LLkfUeSvy6nN0zrDae9W0irn5o/SaBAhpveMVq93fMrJ10YvDQTFjlOK?=
 =?us-ascii?q?pYP5OzOayOENvnOU7+plT+2vimonpxttrTiow8chk4/EjZ8bxFDD8CV22oc1Jd?=
 =?us-ascii?q?ugRUFmYN6kH5pQtyKEOIp2WM8tX2ZouCM8x7YbupC7ZDAHxIo7yxPbcfCLboaF?=
 =?us-ascii?q?7gz5WOqMIjp0mGhpdbO9ihqq70Ss1unxWtO33VtKtCZJj9jBum0X2xHS68WKTO?=
 =?us-ascii?q?Z28F271jaVzQ/T7/lJIUAqmqrfLJ4s2qAwlpUNvkTZBCP2m1v5jLWQdko6/uik?=
 =?us-ascii?q?8ePnYq/pppOENo90jB/xMrg2l8ChHeg1NhICU3WV9OiizrHv4E70TKlQgvA3kK?=
 =?us-ascii?q?TVqJXaKt4apq69DQ9VyIEj6xOnAjei0dQYm2QHLV1cdBKEkYfpIVfOL+78Dfum?=
 =?us-ascii?q?hFStnjFryO7cPrD6HJXNIWbMkK37cbZ+9UFc0gwzws5b555ODbEBOv3zVlfrtN?=
 =?us-ascii?q?PEFh85LxC0w+H/BdV514MeWnyADrWWMaPPqlKI4uMvI++RZI4aojr9Kv4l5+Lw?=
 =?us-ascii?q?gn89g1MSYa6p3Z4PYnCiAvtmO1mZYWbrgtoZEWcFpAs+TPDwh12FSzJTZ2uyUL?=
 =?us-ascii?q?g65jE0E4+mCYbDRoawgL2Oxiu7H5tWZnxYBVCIC3vna4KEW/IUYiKIPsBhiiAE?=
 =?us-ascii?q?VaSmS4I51xGusxH1x6BkLurT/C0Ys5Xj2cNx5+3SkxEy6DN1A96c02GLU2F7gG?=
 =?us-ascii?q?cISyUq06B4pEx30k2D3rRgg/xECdxT4OtEXR0hNZ7cyOx6CMr+WhjbcdeLU1um?=
 =?us-ascii?q?RtSmATcsTtM+2dMOYkB9G8m8gRDHxSalH7gVl7mTDpwu7q3cx2TxJ9p6y3ve16?=
 =?us-ascii?q?kulV8mTtFLNW2nnKF/8QfTCpXNk0WYkaaqaKsd0DTM9GeF0WqBokVYXBRsXqXC?=
 =?us-ascii?q?WHAVflHWosjh5kPeU7+uDqwqPRZbxs6cNKRGcN3pgk9ARPf4JtveZWW9m2OzBR?=
 =?us-ascii?q?aNwrOBd47qe2Qb3CXAB0kIiQET/XCaNQcgAietuX7RDDtrFVj3eUPj7fF+qG+n?=
 =?us-ascii?q?Tk8z1wyFcldu16Sr9RIPhfyTUfUT3qkatycnsDh0GFe939TLC9uPvQZhfaNcYc?=
 =?us-ascii?q?8j71dDz27Wqwt9Ppm4JaB4mlEeaxh3v1/p1xhvFoVAkM0qrHQ2zApyKaOUyk9B?=
 =?us-ascii?q?eymf3ZDqPr3XK2/y/B+0Zq7S21He1suW+6gV5PQ5rVXjoB+mFk44/3p71NlV1m?=
 =?us-ascii?q?OW5o/WAwoKTZLxTkE3+gBgqLHefCY86J3b1H12Paavrz/NxsgmBO0myhanYddS?=
 =?us-ascii?q?K6eEFA70E80HCMmiMu0qm161bh0aOOBe7rI7P8Sjd/Gewq6kIP5gnC66jWRA+I?=
 =?us-ascii?q?180l+M+zBgReLS3pcFw+uX3g2IVzrniFehs8b3mZ1LZD0IH2q/zzTkC5BVZqFo?=
 =?us-ascii?q?YYkLDmKuKdWtxtpin57tR2JY9Fm7ClMc2c+mZQCdb0bg0g1Xz0gXp2KomTG5zz?=
 =?us-ascii?q?Btjz4mtK6f0zHQzOT4cxoHPHVGRG1jjVfqPIi1gMoWXEmubwg1ihSl4Vz2yLRc?=
 =?us-ascii?q?pKR6N2PTW1tHfzDqL2F+Vau9rrqDY89V5JIoqylXS/m8YVaBR775ohsa1T7jHm?=
 =?us-ascii?q?REyDA6cTGqpov2nxhghG2BK3ZzqWLTedtsyhfH+NzcWflR0yIERCZikznXBVu8?=
 =?us-ascii?q?P96z8dWPjZjDseO+V2OnVpJNdynm1oeAtCq95W13DhyzhfGzmtv7EQck1S/3zc?=
 =?us-ascii?q?VlVSLNrBzkeInky7y6Mf57fklvHFL969B1GoZknosyhZEQ32MXhpGU/XoBjGfy?=
 =?us-ascii?q?Ps9X2aP4bHoRWzELx8TZ7xTi2E1mNniJ3Z72Vm2Bwst9YNm3emAW1Tg878xQCK?=
 =?us-ascii?q?eU8aZLnS16olejqQLRYP59nioSyPc06X4ahf0JtxQpzimHHr8SGkxYNzT2lxuU?=
 =?us-ascii?q?99C+sLlXZGG3fLi11Up+nsquAKuMow5CQ3b5ZoktHTVr4cphKlLM32b+6oXleN?=
 =?us-ascii?q?nWcNISuQeYkxbGj+hJNp0xkuAGijZgOWL4pXcl0fI0jQRy3ZGmu4iKM3lt/KW8?=
 =?us-ascii?q?AhJCNzz6fcUT+iz2jaZFn8abxISvHpRnGjUWU5rkV/OoEDQOtfv5MwaCCiEzqn?=
 =?us-ascii?q?CeGbDHBw+Q9F9mr27TE5CsL3yYP2MWzdJmRBmAPkBfhB0UUS4+np44EACq2cPg?=
 =?us-ascii?q?fF145jAX+l73tB9Mxvh0OBn4V2fVvB2oZSssSJiDMBpW6RlP50XPPsyb8O1zBD?=
 =?us-ascii?q?tU/oG7oAyON2ybZBlIDWcTVUyfHF3jOriu5d/d8+mXHOa+Lv3OYamQpuxaTfuH?=
 =?us-ascii?q?2ZWv0o5+9TaWKsqPJmViD+E82kdbXXF5HNnZmywSSyMNkSLBddWbpBC6+i14tc?=
 =?us-ascii?q?2/9PXrWATy5YqAEbdSMNNv+wyojqeHLeKfmCF5KTNA3JMW2XDI0KQf3EIViyx2?=
 =?us-ascii?q?dzmiD7UAtS3OTKLRgKNXDAQbayR8NMRW9aI8wxJNNNXfitP00L54k/E0B01EVV?=
 =?us-ascii?q?znhsGme8gKL3uhO1PAAUaBLK6GKiHTw8HrfaO8TqVdg/9JtxKrozaUDU/iMi6H?=
 =?us-ascii?q?lznoTB2vNeBMjCeGPB1Roo29cxBtCXT9Q9LicBG0LNh3jTguy70umnzKLXIcMS?=
 =?us-ascii?q?R7c05Vsr2Q7CZYju9jFGBb8nVlLfeLmyCC4uncK5YWt+ZrAytum+Jb5nQ616Va?=
 =?us-ascii?q?7CVeSPNpnyvSq8Zko0u6nemX1jpnTB1Opy5LhY2Ru0ViPKTZ9p9YVnfF/BIC92?=
 =?us-ascii?q?OQCxsRqtthC93vvb1Qy9fVmKLyLjdC78zb/c8GC8fIL8KHNSlpDR28FiTVAQcI?=
 =?us-ascii?q?V3iwPmHFiklFntmR8XuJtJ887JThy7QUTboOf1i0E/4cFgxdncYFJt8jRj4+lr?=
 =?us-ascii?q?jdh8oF4FKxqRDQQINRuZWRBaHaOunmNDvM1eoMXBAP276taN1LboA=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BsAADVX/1bh0O0hNFkHgEGBwaBUQkLA?=
 =?us-ascii?q?QGCaIECJ4N5g3uQJYINFGiGeIIRCY0yFIFfLA0GAYRAhDoiNAkNAQMBAQEBAQE?=
 =?us-ascii?q?CARMBAQEIDQkIKSMMQhYBgV0kAYJhAQEBAQEBAQECIAQZARsdAQMCCQEBBQULD?=
 =?us-ascii?q?QICJgICAx8BEQEFARwZBYMcAYFoAQMNCAUKmSk8iw18FgUBF4J3BYExAQMDgwI?=
 =?us-ascii?q?KGScNXTGBBgIBBRJ5iwKCFoERgl0HLoMFGQMBAYEjBAYxgwSCVwKJA4YdhiSKS?=
 =?us-ascii?q?AcChnyDLYcHGIFZiC+HA41Ghz6DJDCBJYINcIEBgjuCGwkDF4NKilQ+MwEBgQM?=
 =?us-ascii?q?BAYl6SAElgicBAQ?=
X-IPAS-Result: =?us-ascii?q?A0BsAADVX/1bh0O0hNFkHgEGBwaBUQkLAQGCaIECJ4N5g3u?=
 =?us-ascii?q?QJYINFGiGeIIRCY0yFIFfLA0GAYRAhDoiNAkNAQMBAQEBAQECARMBAQEIDQkIK?=
 =?us-ascii?q?SMMQhYBgV0kAYJhAQEBAQEBAQECIAQZARsdAQMCCQEBBQULDQICJgICAx8BEQE?=
 =?us-ascii?q?FARwZBYMcAYFoAQMNCAUKmSk8iw18FgUBF4J3BYExAQMDgwIKGScNXTGBBgIBB?=
 =?us-ascii?q?RJ5iwKCFoERgl0HLoMFGQMBAYEjBAYxgwSCVwKJA4YdhiSKSAcChnyDLYcHGIF?=
 =?us-ascii?q?ZiC+HA41Ghz6DJDCBJYINcIEBgjuCGwkDF4NKilQ+MwEBgQMBAYl6SAElgicBA?=
 =?us-ascii?q?Q?=
X-IronPort-AV: E=Sophos;i="5.56,287,1539673200"; 
   d="scan'208";a="139754956"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 27 Nov 2018 07:18:31 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729472AbeK1CQk (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 27 Nov 2018 21:16:40 -0500
Received: from mail-yw1-f66.google.com ([209.85.161.66]:35534 "EHLO
        mail-yw1-f66.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1729435AbeK1CQk (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 27 Nov 2018 21:16:40 -0500
Received: by mail-yw1-f66.google.com with SMTP id h32so9275990ywk.2
        for <linux-kernel@vger.kernel.org>; Tue, 27 Nov 2018 07:18:26 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc:content-transfer-encoding;
        bh=NI0FI+W7obTLsIAPJIOakZw1Hfc06ORhpjTSf3vPlJQ=;
        b=H+RVBr96Dmi01JtYQSlQHy8ugG82ecP8YkDtmOB66mCloQN4u8vtR4i32VCus2k06Y
         gRvHIzbws77xjn/gey4Bj6DHIRAAwM+EWQW3xeTlY50loHdtBIv4Rmr0LOtJsSHhYUeU
         aHQWvhA7LJequtebVhzW/HR5hRs01RYjUpMctNcbnmeVuKWuAA2rWoeTGNPCAyiyijVF
         jP2Y7CutygrDzH1kV47pfFy9TXQi1C81F6cap0n1nTT7gYnROpqlUz7boOpvArYwvL3H
         UbGfPy/k0Bz0Mt1D1QH6C9/aVUBO4yTT2vSSGAHUOmsg8Ca1+ru3+mxizM72Mvs8FV0j
         E/uw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc:content-transfer-encoding;
        bh=NI0FI+W7obTLsIAPJIOakZw1Hfc06ORhpjTSf3vPlJQ=;
        b=rFF6jr0AT/fJcnOI5jR4jea51uK4cYTQeRqUdUAMJ60jX9fUxL98ntLNhmTxEe261W
         dIQWCcr1nmP1tXtYwiFYP6rYsxsCNl9WVYLC6j4l+rBdwncUUdlsxY0AbkEnbnEvDTan
         8BSC9hYYZay4KwhnW8xGQ+x0062i3PT/Hg4712D6g1/pw2rhVovOXV5Gh6kdQHh4U8oj
         RWU6DScUP67kZmMi+R3D2TmRrkEHOSzDs+sX6I9olX8rqK75M5nDZ6fCZwCviVGOqdpm
         Xx0F6cbQlqo4qvrCpiU83XI1CUgEQUJoX7mR9Cih60nvoHuOaJx+R2huxO0WyJBvfJCk
         n9bg==
X-Gm-Message-State: AGRZ1gKp92J7/mQLAA/0S19Aos1jA37ePQvH2z/FVYpYxAJ+Gwh9wVme
        ibZhL+Ha40rtWjf4uDulD3CujCnwEuAuI6tDj/BaRcpJQVA=
X-Google-Smtp-Source: AJdET5d8Yp6U42pwWTg/CFuZfx3EhT36NIseqDlBNbRTcycqTM1Q6fHZSE6nq/IkjoE2+1HZccCZL5qsX0zfcwSxjNw=
X-Received: by 2002:a81:5089:: with SMTP id e131mr34577410ywb.392.1543331905451;
 Tue, 27 Nov 2018 07:18:25 -0800 (PST)
MIME-Version: 1.0
References: <1541665796-21092-1-git-send-email-frieder.schrempf@kontron.de> <0fc1f198-0e87-01af-5a0e-3d21613c39f3@kontron.de>
In-Reply-To: <0fc1f198-0e87-01af-5a0e-3d21613c39f3@kontron.de>
From: =?UTF-8?B?Q2zDqW1lbnQgUMOpcm9u?= <peron.clem@gmail.com>
Date: Tue, 27 Nov 2018 16:18:14 +0100
Message-ID: <CAJiuCceD=qyasCUPqjyGQso3JGoxz4g_yg3uj18wP-2CKY9wyg@mail.gmail.com>
Subject: Re: [PATCH] mtd: nand: spi: Add initial support for Toshiba TC58CVG2S0H
To: frieder.schrempf@kontron.de
Cc: Boris Brezillon <boris.brezillon@bootlin.com>,
        Miquel Raynal <miquel.raynal@bootlin.com>, richard@nod.at,
        dwmw2@infradead.org, computersforpeace@gmail.com,
        marek.vasut@gmail.com, linux-kernel@vger.kernel.org,
        linux-mtd@lists.infradead.org
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi Frieder,

On Tue, 27 Nov 2018 at 16:08, Schrempf Frieder
<frieder.schrempf@kontron.de> wrote:
>
> +Cl=C3=A9ment P=C3=A9ron
>
> Hi Cl=C3=A9ment,
>
> FYI, this has already been merged to nand/next.
Just want to point the difference that I made when I try to introduce my dr=
iver.
The datasheet I used is this one :
https://media.digikey.com/pdf/Data%20Sheets/Toshiba%20PDFs/TC58CVG2S0HxAIx_=
Rev1.1_2016-11-08.pdf

>
> Regards,
> Frieder
>
> On 08.11.18 09:29, Frieder Schrempf wrote:
> > Add minimal support for the Toshiba TC58CVG2S0H SPI NAND chip.
> >
> > Signed-off-by: Frieder Schrempf <frieder.schrempf@kontron.de>
> > ---
> >   drivers/mtd/nand/spi/Makefile  |   2 +-
> >   drivers/mtd/nand/spi/core.c    |   1 +
> >   drivers/mtd/nand/spi/toshiba.c | 136 ++++++++++++++++++++++++++++++++=
++++
> >   include/linux/mtd/spinand.h    |   1 +
> >   4 files changed, 139 insertions(+), 1 deletion(-)
> >
> > diff --git a/drivers/mtd/nand/spi/Makefile b/drivers/mtd/nand/spi/Makef=
ile
> > index b74e074..be5f735 100644
> > --- a/drivers/mtd/nand/spi/Makefile
> > +++ b/drivers/mtd/nand/spi/Makefile
> > @@ -1,3 +1,3 @@
> >   # SPDX-License-Identifier: GPL-2.0
> > -spinand-objs :=3D core.o macronix.o micron.o winbond.o
> > +spinand-objs :=3D core.o macronix.o micron.o toshiba.o winbond.o
> >   obj-$(CONFIG_MTD_SPI_NAND) +=3D spinand.o
> > diff --git a/drivers/mtd/nand/spi/core.c b/drivers/mtd/nand/spi/core.c
> > index 30f8364..87bdf2a 100644
> > --- a/drivers/mtd/nand/spi/core.c
> > +++ b/drivers/mtd/nand/spi/core.c
> > @@ -766,6 +766,7 @@ static const struct nand_ops spinand_ops =3D {
> >   static const struct spinand_manufacturer *spinand_manufacturers[] =3D=
 {
> >       &macronix_spinand_manufacturer,
> >       &micron_spinand_manufacturer,
> > +     &toshiba_spinand_manufacturer,
> >       &winbond_spinand_manufacturer,
> >   };
> >
> > diff --git a/drivers/mtd/nand/spi/toshiba.c b/drivers/mtd/nand/spi/tosh=
iba.c
> > new file mode 100644
> > index 0000000..294bcf6
> > --- /dev/null
> > +++ b/drivers/mtd/nand/spi/toshiba.c
> > @@ -0,0 +1,136 @@
> > +// SPDX-License-Identifier: GPL-2.0
> > +/*
> > + * Copyright (c) 2018 exceet electronics GmbH
> > + * Copyright (c) 2018 Kontron Electronics GmbH
> > + *
> > + * Author: Frieder Schrempf <frieder.schrempf@kontron.de>
> > + */
> > +
> > +#include <linux/device.h>
> > +#include <linux/kernel.h>
> > +#include <linux/mtd/spinand.h>
> > +
> > +#define SPINAND_MFR_TOSHIBA          0x98
> > +
> > +static SPINAND_OP_VARIANTS(read_cache_variants,
> > +             SPINAND_PAGE_READ_FROM_CACHE_X4_OP(0, 1, NULL, 0),
> > +             SPINAND_PAGE_READ_FROM_CACHE_X2_OP(0, 1, NULL, 0),
> > +             SPINAND_PAGE_READ_FROM_CACHE_OP(true, 0, 1, NULL, 0),
> > +             SPINAND_PAGE_READ_FROM_CACHE_OP(false, 0, 1, NULL, 0));
> > +
> > +static SPINAND_OP_VARIANTS(write_cache_variants,
> > +             SPINAND_PROG_LOAD(true, 0, NULL, 0));
> > +
> > +static SPINAND_OP_VARIANTS(update_cache_variants,
> > +             SPINAND_PROG_LOAD(false, 0, NULL, 0));
> > +
> > +static int tc58cvg2s0h_ooblayout_ecc(struct mtd_info *mtd, int section=
,
> > +                                  struct mtd_oob_region *region)
> > +{
> > +     if (section > 7)
> > +             return -ERANGE;
> > +
> > +     region->offset =3D 128 + 16 * section;
> > +     region->length =3D 16;

Here you expose the ECC bits has 8 sections of 16 bytes.
But regarding the datasheet this should not be accessed page 32.
"The ECC parity code generated by internal ECC is stored in column
addresses 4224-4351 and the users cannot access to these specific
addresses when internal ECC is enabled."

> > +
> > +
> > +     return 0;
> > +}
> > +
> > +static int tc58cvg2s0h_ooblayout_free(struct mtd_info *mtd, int sectio=
n,
> > +                                   struct mtd_oob_region *region)
> > +{
> > +     if (section > 7)
> > +             return -ERANGE;
> > +
> > +     region->offset =3D 2 + 16 * section;
> > +     region->length =3D 14;

This reserved 2 bytes for BBM for each section.
But maybe we could declare this as 1 section of 128bytes:

if (section)
         return -ERANGE;

region->offset =3D 2;
region->length =3D 126;


> > +
> > +
> > +     return 0;
> > +}
> > +
> > +static const struct mtd_ooblayout_ops tc58cvg2s0h_ooblayout =3D {
> > +     .ecc =3D tc58cvg2s0h_ooblayout_ecc,
> > +     .free =3D tc58cvg2s0h_ooblayout_free,
> > +};
> > +
> > +static int tc58cvg2s0h_ecc_get_status(struct spinand_device *spinand,
> > +                                   u8 status)
> > +{
> > +     struct nand_device *nand =3D spinand_to_nand(spinand);
> > +     u8 mbf =3D 0;
> > +     struct spi_mem_op op =3D SPINAND_GET_FEATURE_OP(0x30, &mbf);
> > +
> > +     switch (status & STATUS_ECC_MASK) {
> > +     case STATUS_ECC_NO_BITFLIPS:
> > +             return 0;
> > +
> > +     case STATUS_ECC_UNCOR_ERROR:
> > +             return -EBADMSG;
> > +
> > +     case STATUS_ECC_HAS_BITFLIPS:
> > +             /*
> > +              * Let's try to retrieve the real maximum number of bitfl=
ips
> > +              * in order to avoid forcing the wear-leveling layer to m=
ove
> > +              * data around if it's not necessary.
> > +              */
> > +             if (spi_mem_exec_op(spinand->spimem, &op))
> > +                     return nand->eccreq.strength;
> > +
> > +             mbf >>=3D 4;
> > +
> > +             if (WARN_ON(mbf > nand->eccreq.strength || !mbf))
> > +                     return nand->eccreq.strength;
> > +
> > +             return mbf;
> > +

These take take care of 0, 0x1 and 0x2 but not 0x3 which is valid
page 26 of the datasheet :

ECC status bits indicate the status of internal ECC operation
00b: No bit flips were detected in previous page read.
01b: Bit flips were detected and corrected. Bit flip count did not
exceed the bit flip detection threshold. The threshold is set by bits
[7:4] in address 10h in the feature table.
10b: Multiple bit flips were detected and not corrected.
11b: Bit flips were detected and corrected. Bit flip count exceeded
the bit flip detection threshold. The threshold is set by bits [7:4]
in address 10h in the feature table

Regards,
Clement

> > +     default:
> > +             break;
> > +     }
> > +
> > +     return -EINVAL;
> > +}
> > +
> > +static const struct spinand_info toshiba_spinand_table[] =3D {
> > +     SPINAND_INFO("TC58CVG2S0H", 0xCD,
> > +                  NAND_MEMORG(1, 4096, 256, 64, 2048, 1, 1, 1),
> > +                  NAND_ECCREQ(8, 512),
> > +                  SPINAND_INFO_OP_VARIANTS(&read_cache_variants,
> > +                                           &write_cache_variants,
> > +                                           &update_cache_variants),
> > +                  SPINAND_HAS_QE_BIT,
> > +                  SPINAND_ECCINFO(&tc58cvg2s0h_ooblayout,
> > +                                  tc58cvg2s0h_ecc_get_status)),
> > +};
> > +
> > +static int toshiba_spinand_detect(struct spinand_device *spinand)
> > +{
> > +     u8 *id =3D spinand->id.data;
> > +     int ret;
> > +
> > +     /*
> > +      * Toshiba SPI NAND read ID needs a dummy byte,
> > +      * so the first byte in id is garbage.
> > +      */
> > +     if (id[1] !=3D SPINAND_MFR_TOSHIBA)
> > +             return 0;
> > +
> > +     ret =3D spinand_match_and_init(spinand, toshiba_spinand_table,
> > +                                  ARRAY_SIZE(toshiba_spinand_table),
> > +                                  id[2]);
> > +     if (ret)
> > +             return ret;
> > +
> > +     return 1;
> > +}
> > +
> > +static const struct spinand_manufacturer_ops toshiba_spinand_manuf_ops=
 =3D {
> > +     .detect =3D toshiba_spinand_detect,
> > +};
> > +
> > +const struct spinand_manufacturer toshiba_spinand_manufacturer =3D {
> > +     .id =3D SPINAND_MFR_TOSHIBA,
> > +     .name =3D "Toshiba",
> > +     .ops =3D &toshiba_spinand_manuf_ops,
> > +};
> > diff --git a/include/linux/mtd/spinand.h b/include/linux/mtd/spinand.h
> > index 088ff96..816c4b0 100644
> > --- a/include/linux/mtd/spinand.h
> > +++ b/include/linux/mtd/spinand.h
> > @@ -196,6 +196,7 @@ struct spinand_manufacturer {
> >   /* SPI NAND manufacturers */
> >   extern const struct spinand_manufacturer macronix_spinand_manufacture=
r;
> >   extern const struct spinand_manufacturer micron_spinand_manufacturer;
> > +extern const struct spinand_manufacturer toshiba_spinand_manufacturer;
> >   extern const struct spinand_manufacturer winbond_spinand_manufacturer=
;
> >
> >   /**
> >
