Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 08:48:06 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 90DB9580213;
	Thu, 29 Nov 2018 08:42:58 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga008-1.jf.intel.com with ESMTP; 29 Nov 2018 08:42:58 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ADZT54xIjHPjf3vCIuNmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgULPj5rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0yRD+s7bpkSAXwhS?=
 =?us-ascii?q?kHKTA37W/ZhM93gq1ZrhKuqABww4/PYIGNNvdzZb/dcc8ASGZdRMtdSzBND4Wh?=
 =?us-ascii?q?ZIUPFeoBOuNYopHjqlsOtxu+BBKsBP/oyj9Qhn/5w7Ax3eE/HgHcwgMgG9YOsH?=
 =?us-ascii?q?PJp9jyKKgSUfq1zKjTzTXfaPNWwTf955bSfhAiv/6MR6x/cc7VyUkoDA7FlUmQ?=
 =?us-ascii?q?pZb5MDOS0+QAqm6W5PdjW+K3k2MrtR19rzy1yssxhITFmJgZxk3H+Cll2oo4JN?=
 =?us-ascii?q?+1RFZmbdK4CpddtSGXO5FrTs88QWxkoik3x74etZKmfSUHx44rywPBZ/GDaYSE?=
 =?us-ascii?q?/BzuWPqLLTp8gn9uZaixiAyo8Ue6z+3xTsm030hOripCitTMqH8N2ALJ6sSdSf?=
 =?us-ascii?q?ty4F2h2TCR2ADX8O1EJlo0laXDJ54gxL4/iIYTvFzdEiPqnEj6lrKae0s69uSy?=
 =?us-ascii?q?9ujqYanqqoWdOoJ2kg3+N74hms27AeQ2KAgOWG2b9Py41L3i+035XbpLguQ1kq?=
 =?us-ascii?q?bHqpDaI9oUpqqgDw9S3Icj7QiwDy293dQGknkIMkhFdAiEj4f3IVHOJu73DfOl?=
 =?us-ascii?q?j1SrijdryOjKPqf9DZXVMnjDjLDhcK55605dywo808pT5p1JCrwaJPLzW0nxtM?=
 =?us-ascii?q?HXDxMjMgy0xfrnB8t51o8ERW2PBaqZOrvIsVCU/uIvP/WMZIgNtTb9Mfcl5uLu?=
 =?us-ascii?q?gmU+mVMHfampwIEYaHa3Hvl9J0WZYHzsgsoOEGsQvwo+SvDqh0OGUTJJe3myWK?=
 =?us-ascii?q?c87CkhCI26FYfDWpytgLuZ0Se5GZ1ZeHpKClOLEXfucYWEXOwBaCaTIs9njzwF?=
 =?us-ascii?q?WqKtS44n1RGyqgD6z6BrIfbT+i0drZjjzsR65/XPlREu8jx5F96S03qNT2FznW?=
 =?us-ascii?q?MEXSU207p9oUFmzleD0K54g+FXFNBJ5vNJVBs6OoDYz+BgF9/yXQfBdM+TSFm6?=
 =?us-ascii?q?WtWmHS0xTtUpzt8NeUl9Hc+ujhTC3yWwBb8VmKeGBJg18qLawnjwKNxxy3fA1K?=
 =?us-ascii?q?k9kVYmRtFDOnGhhq567wLTHZLGk12Fl6a2cqQRxDPC+32dzWWQpk1YUBR/UaPe?=
 =?us-ascii?q?XX8BYEvaqtD55kDHT7+qErknNgpBycifKqpFcNHpjFNGROv9N9TaeW6+h2CwBR?=
 =?us-ascii?q?OQzLOWcIXqY3kd3DnaCEUcjg8c52iGOhYkCiehuW3eCiduGkzpY0739el+qXW7?=
 =?us-ascii?q?TlI7zg2Qbk1h0aa19QARhfCGV/wT2bcEsj87qzpoBFa9w87WC92Yqgp9faVcZN?=
 =?us-ascii?q?Q94EtH1WPZrQB9IoasL6d4hl4acgR3uUzu2g5zCoVBl8gqsXwrwBBzKaKezFNO?=
 =?us-ascii?q?aTeY0YrsNb3QL2n45AqvZLLO2lHCzNaW/b8C5+48q1r9swCmCEoj/2983NlIzn?=
 =?us-ascii?q?ST/JPKDAkVUZLvSUs38xl6p7fHYigy/Y/U1HtsMbWqvT/Gwd4mGOwlyhO4dddF?=
 =?us-ascii?q?LKyEDBPyE9EdB8W2KO0qhkKlYQ4eMOFT9K47JcWmd/Sd1a6vPeZgmi+mjGtd7I?=
 =?us-ascii?q?B81EKM6zRzSurS05kZxPGY2xONVy3gg1e5rsD3hYdEaCkIHmq+1SfrHpRRabB1?=
 =?us-ascii?q?fYoRD2ehPde3xtRni5HxQXFY8EOsCE0c2M+ufxqfdFj93QxW1UQKrn2rgyq4zz?=
 =?us-ascii?q?pokz43qqqTxjDBw+PndBAfIG5EWHFijUvwIYizl90bXEmoYxIplRe//kb62q5b?=
 =?us-ascii?q?qb97L2nSR0dIYif3I3tjUqu2qrqNfcpP5Ik0viVQVeS2eUqaRaLloxsGzyPjGH?=
 =?us-ascii?q?NTxDIheDGwuZX5nBt6hHiGLHlpr3rZesBwxRHB69zaXvNR2jsGRC9liTjYHFS8?=
 =?us-ascii?q?Pt+p/cmKmJfHqOyxS2WhVphLeynx0YyArDe75XFtARCnn/G8gNrnHRI40S/60d?=
 =?us-ascii?q?lnTiHIrBf6Yon22KW2K+Nnfk90BFDi78p2AJ1xkow1hJsIw3gVmo2V/WYbkWf0?=
 =?us-ascii?q?Kdhb2rjxbHsXST4L3t7a+g7l2EJ4I3KNxoL5UGidw8R7a9m7ZGMWxjwy78RQBK?=
 =?us-ascii?q?iI67xEmDN/okCkogLJffh9gjAdxOMr6H4bgOEGohAhzyuDDbAJAUlXIzbsmA+W?=
 =?us-ascii?q?4NCko6Vaf2Kvcbm21EpjktGtFrCCogdAWHnnfpcuBzN/7sJ6MFjUyn389pnkeM?=
 =?us-ascii?q?XMbdIUrhCUjxDAj+1PJJMwjPUKgzdnOXnmvX0k0OM7iR1u3ZenvImIMWlt/aS5?=
 =?us-ascii?q?AgJGOT3xfc8c5jbtjaNGlMaMw4+vBolhGikMXJbwVv2nCjUStfD6NwqUFD08t2?=
 =?us-ascii?q?yWGb7eHQ+Z9UdnoGjDE5GtN3GLOnYZyc9uSwWaJExamAoURik1noYlFgC2w8zs?=
 =?us-ascii?q?aEV56SoU5lHmsRtA0P5oOwP8UmfCpweodzE0R4KELBdN6gFC5kHVMdGR7+5pHi?=
 =?us-ascii?q?FY+IGhoxKJKmCBewtICmQJUFSeB1//Jrmu+cXA8++AC+u+KPvOfKyOqfFEWPeO?=
 =?us-ascii?q?356vyYxm/zCDNsiUOnliDvs72ldMXHxjGsTZnSkPRDITly7Xc8GboxK88DVtrs?=
 =?us-ascii?q?+j6PTrRB7v5YyXBrtSL9pv+hO2gaSCN+KKhyZ5MzFY1pwSyn/S1bgfx0UfiyVv?=
 =?us-ascii?q?dzmrDLQBujTBTKPWmq9LEREbbzl/O9dP76I5xgNNI9LUisvp1r5kif44E01KVU?=
 =?us-ascii?q?H6lcGze8MLI3uxNFfGBEuQMLSGJDvLw9z4YK+mSL1QivlUuAO0uTqBD0DjOTGD?=
 =?us-ascii?q?nSHzVx+zKeFMkD2bPBtGtYGhcxZtDHLvQ878ZhKnMN94kzs2zKYwhnPLM24cLD?=
 =?us-ascii?q?d9f1lMrr2W8SNXnPF/F3Zd4XpiKOmOgzyZ4PXAKpYKrftrBTx5luJA73Q8zrtV?=
 =?us-ascii?q?7SdES+R0mSvStNFupV6mn/KLyjpmVhpOtzlKiJiKvUVkJaXW6J1AVWzY8xIK6G?=
 =?us-ascii?q?XDQygN8o9vDcfuoOZa0NXdlab3LzFq+dXT4c8dAY7fL8fRdDJ1NBvwBTPQShEM?=
 =?us-ascii?q?XDiiMUnVgEtBlPCUsHaSq85+4sz2mZEOQ6VXfFoyGrUTFhIhVIgOP5JoBBsll7?=
 =?us-ascii?q?CBhcIF7Hb4qwPeEoES6pvAU+qPHfj1Mziel6FJbhAF6bz9JIUXcIb83homIg1/?=
 =?us-ascii?q?lZ7HGAzOVMtQvgVuawY1pANG930oCiVnwUXvakCh/FcQGOSykxpwjRFxN6BloD?=
 =?us-ascii?q?Ll+VRxPEfWoCI2nGE4g9CjijeUJm3fNqC1CKpWESvvq08pMp6zYAtvYAm2mgQw?=
 =?us-ascii?q?PzfeRqlNiKNgeCZohRXRvZ9IMeVAC6ZDZUlDlrmse/w03AEE+W2czkhd6L6dBA?=
 =?us-ascii?q?=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ARAADJFQBch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBg2snCowHX4spgiGXMBSBWBkBARgTAYd0IjQJDQEDAQEBAQEBAgE?=
 =?us-ascii?q?TAQEBCA0JCCkvgjYigmUCAQMBAg8VUgYJAQFQA1QGAQ0FBR2Cf4ICBAGbfYlYA?=
 =?us-ascii?q?QEBgWozhAIBhiiHa4QrgVc/gRGHfIVyAokhgXiFVY81BwKCHQSPExaBWog0hw4?=
 =?us-ascii?q?siEyPLwIEAgkCFIFGgg1NI4M8giQDF41mASEWQDGBBQEBjBuBHwEB?=
X-IPAS-Result: =?us-ascii?q?A0ARAADJFQBch0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBg2s?=
 =?us-ascii?q?nCowHX4spgiGXMBSBWBkBARgTAYd0IjQJDQEDAQEBAQEBAgETAQEBCA0JCCkvg?=
 =?us-ascii?q?jYigmUCAQMBAg8VUgYJAQFQA1QGAQ0FBR2Cf4ICBAGbfYlYAQEBgWozhAIBhii?=
 =?us-ascii?q?Ha4QrgVc/gRGHfIVyAokhgXiFVY81BwKCHQSPExaBWog0hw4siEyPLwIEAgkCF?=
 =?us-ascii?q?IFGgg1NI4M8giQDF41mASEWQDGBBQEBjBuBHwEB?=
X-IronPort-AV: E=Sophos;i="5.56,295,1539673200"; 
   d="scan'208";a="55398062"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 08:42:56 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729746AbeK3DsO (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 29 Nov 2018 22:48:14 -0500
Received: from mx07-00178001.pphosted.com ([62.209.51.94]:5480 "EHLO
        mx07-00178001.pphosted.com" rhost-flags-OK-OK-OK-OK)
        by vger.kernel.org with ESMTP id S1729530AbeK3DsN (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 29 Nov 2018 22:48:13 -0500
Received: from pps.filterd (m0046668.ppops.net [127.0.0.1])
        by mx07-.pphosted.com (8.16.0.21/8.16.0.21) with SMTP id wATGdauL010760;
        Thu, 29 Nov 2018 17:41:29 +0100
Received: from beta.dmz-eu.st.com (beta.dmz-eu.st.com [164.129.1.35])
        by mx07-00178001.pphosted.com with ESMTP id 2nxw02vtaw-1
        (version=TLSv1 cipher=ECDHE-RSA-AES256-SHA bits=256 verify=NOT);
        Thu, 29 Nov 2018 17:41:29 +0100
Received: from zeta.dmz-eu.st.com (zeta.dmz-eu.st.com [164.129.230.9])
        by beta.dmz-eu.st.com (STMicroelectronics) with ESMTP id 6B2B5116;
        Thu, 29 Nov 2018 17:40:59 +0000 (GMT)
Received: from Webmail-eu.st.com (sfhdag6node2.st.com [10.75.127.17])
        by zeta.dmz-eu.st.com (STMicroelectronics) with ESMTP id 6127F51C7;
        Thu, 29 Nov 2018 16:41:28 +0000 (GMT)
Received: from localhost (10.75.127.48) by SFHDAG6NODE2.st.com (10.75.127.17)
 with Microsoft SMTP Server (TLS) id 15.0.1347.2; Thu, 29 Nov 2018 17:41:27
 +0100
From: Christophe Kerello <christophe.kerello@st.com>
To: <boris.brezillon@bootlin.com>, <miquel.raynal@bootlin.com>,
        <richard@nod.at>, <dwmw2@infradead.org>,
        <computersforpeace@gmail.com>, <marek.vasut@gmail.com>,
        <robh+dt@kernel.org>, <mark.rutland@arm.com>
CC: <linux-mtd@lists.infradead.org>, <linux-kernel@vger.kernel.org>,
        <devicetree@vger.kernel.org>,
        <linux-stm32@st-md-mailman.stormreply.com>,
        Christophe Kerello <christophe.kerello@st.com>
Subject: [ v3 3/3] mtd: rawnand: stm32_fmc2: add manual mode
Date: Thu, 29 Nov 2018 17:41:03 +0100
Message-ID: <1543509663-26128-4-git-send-email-christophe.kerello@st.com>
X-Mailer: git-send-email 1.9.1
In-Reply-To: <1543509663-26128-1-git-send-email-christophe.kerello@st.com>
References: <1543509663-26128-1-git-send-email-christophe.kerello@st.com>
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [10.75.127.48]
X-ClientProxiedBy: SFHDAG8NODE3.st.com (10.75.127.24) To SFHDAG6NODE2.st.com
 (10.75.127.17)
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10434:,, definitions=2018-11-29_10:,,
 signatures=0
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This patch adds the manual mode, a basic mode that do not need
any DMA channels. This mode is also useful for debug purpose.

Signed-off-by: Christophe Kerello <christophe.kerello@st.com>
---
 drivers/mtd/nand/raw/stm32_fmc2_nand.c | 329 +++++++++++++++++++++++++++++----
 1 file changed, 297 insertions(+), 32 deletions(-)

diff --git a/drivers/mtd/nand/raw/stm32_fmc2_nand.c b/drivers/mtd/nand/raw/stm32_fmc2_nand.c
index b62b052..9b8bb8f 100644
--- a/drivers/mtd/nand/raw/stm32_fmc2_nand.c
+++ b/drivers/mtd/nand/raw/stm32_fmc2_nand.c
@@ -207,6 +207,12 @@ enum stm32_fmc2_ecc {
 	FMC2_ECC_BCH8 = 8
 };
 
+enum stm32_fmc2_irq_state {
+	FMC2_IRQ_UNKNOWN = 0,
+	FMC2_IRQ_BCH,
+	FMC2_IRQ_SEQ
+};
+
 struct stm32_fmc2_timings {
 	u8 tclr;
 	u8 tar;
@@ -241,6 +247,7 @@ struct stm32_fmc2_nfc {
 	phys_addr_t io_phys_addr;
 	phys_addr_t data_phys_addr[FMC2_MAX_CE];
 	struct clk *clk;
+	u8 irq_state;
 
 	struct dma_chan *dma_tx_ch;
 	struct dma_chan *dma_rx_ch;
@@ -400,6 +407,17 @@ static void stm32_fmc2_set_buswidth_16(struct stm32_fmc2_nfc *fmc2, bool set)
 	writel_relaxed(pcr, fmc2->io_base + FMC2_PCR);
 }
 
+/* Enable/disable ECC */
+static void stm32_fmc2_set_ecc(struct stm32_fmc2_nfc *fmc2, bool enable)
+{
+	u32 pcr = readl(fmc2->io_base + FMC2_PCR);
+
+	pcr &= ~FMC2_PCR_ECCEN;
+	if (enable)
+		pcr |= FMC2_PCR_ECCEN;
+	writel(pcr, fmc2->io_base + FMC2_PCR);
+}
+
 /* Enable irq sources in case of the sequencer is used */
 static inline void stm32_fmc2_enable_seq_irq(struct stm32_fmc2_nfc *fmc2)
 {
@@ -407,6 +425,8 @@ static inline void stm32_fmc2_enable_seq_irq(struct stm32_fmc2_nfc *fmc2)
 
 	csqier |= FMC2_CSQIER_TCIE;
 
+	fmc2->irq_state = FMC2_IRQ_SEQ;
+
 	writel_relaxed(csqier, fmc2->io_base + FMC2_CSQIER);
 }
 
@@ -418,6 +438,8 @@ static inline void stm32_fmc2_disable_seq_irq(struct stm32_fmc2_nfc *fmc2)
 	csqier &= ~FMC2_CSQIER_TCIE;
 
 	writel_relaxed(csqier, fmc2->io_base + FMC2_CSQIER);
+
+	fmc2->irq_state = FMC2_IRQ_UNKNOWN;
 }
 
 /* Clear irq sources in case of the sequencer is used */
@@ -426,6 +448,68 @@ static inline void stm32_fmc2_clear_seq_irq(struct stm32_fmc2_nfc *fmc2)
 	writel_relaxed(FMC2_CSQICR_CLEAR_IRQ, fmc2->io_base + FMC2_CSQICR);
 }
 
+/* Enable irq sources in case of bch is used */
+static inline void stm32_fmc2_enable_bch_irq(struct stm32_fmc2_nfc *fmc2,
+					     int mode)
+{
+	u32 bchier = readl_relaxed(fmc2->io_base + FMC2_BCHIER);
+
+	if (mode == NAND_ECC_WRITE)
+		bchier |= FMC2_BCHIER_EPBRIE;
+	else
+		bchier |= FMC2_BCHIER_DERIE;
+
+	fmc2->irq_state = FMC2_IRQ_BCH;
+
+	writel_relaxed(bchier, fmc2->io_base + FMC2_BCHIER);
+}
+
+/* Disable irq sources in case of bch is used */
+static inline void stm32_fmc2_disable_bch_irq(struct stm32_fmc2_nfc *fmc2)
+{
+	u32 bchier = readl_relaxed(fmc2->io_base + FMC2_BCHIER);
+
+	bchier &= ~FMC2_BCHIER_DERIE;
+	bchier &= ~FMC2_BCHIER_EPBRIE;
+
+	writel_relaxed(bchier, fmc2->io_base + FMC2_BCHIER);
+
+	fmc2->irq_state = FMC2_IRQ_UNKNOWN;
+}
+
+/* Clear irq sources in case of bch is used */
+static inline void stm32_fmc2_clear_bch_irq(struct stm32_fmc2_nfc *fmc2)
+{
+	writel_relaxed(FMC2_BCHICR_CLEAR_IRQ, fmc2->io_base + FMC2_BCHICR);
+}
+
+/*
+ * Enable ECC logic and reset syndrome/parity bits previously calculated
+ * Syndrome/parity bits is cleared by setting the ECCEN bit to 0
+ */
+static void stm32_fmc2_hwctl(struct nand_chip *chip, int mode)
+{
+	struct stm32_fmc2_nfc *fmc2 = to_stm32_nfc(chip->controller);
+
+	stm32_fmc2_set_ecc(fmc2, false);
+
+	if (chip->ecc.strength != FMC2_ECC_HAM) {
+		u32 pcr = readl_relaxed(fmc2->io_base + FMC2_PCR);
+
+		if (mode == NAND_ECC_WRITE)
+			pcr |= FMC2_PCR_WEN;
+		else
+			pcr &= ~FMC2_PCR_WEN;
+		writel_relaxed(pcr, fmc2->io_base + FMC2_PCR);
+
+		reinit_completion(&fmc2->complete);
+		stm32_fmc2_clear_bch_irq(fmc2);
+		stm32_fmc2_enable_bch_irq(fmc2, mode);
+	}
+
+	stm32_fmc2_set_ecc(fmc2, true);
+}
+
 /*
  * ECC Hamming calculation
  * ECC is 3 bytes for 512 bytes of data (supports error correction up to
@@ -438,6 +522,30 @@ static inline void stm32_fmc2_ham_set_ecc(const u32 ecc_sta, u8 *ecc)
 	ecc[2] = ecc_sta >> 16;
 }
 
+static int stm32_fmc2_ham_calculate(struct nand_chip *chip, const u8 *data,
+				    u8 *ecc)
+{
+	struct stm32_fmc2_nfc *fmc2 = to_stm32_nfc(chip->controller);
+	u32 sr, heccr;
+	int ret;
+
+	ret = readl_relaxed_poll_timeout(fmc2->io_base + FMC2_SR,
+					 sr, sr & FMC2_SR_NWRF, 10, 1000);
+	if (ret) {
+		dev_err(fmc2->dev, "ham timeout\n");
+		return ret;
+	}
+
+	heccr = readl_relaxed(fmc2->io_base + FMC2_HECCR);
+
+	stm32_fmc2_ham_set_ecc(heccr, ecc);
+
+	/* Disable ECC */
+	stm32_fmc2_set_ecc(fmc2, false);
+
+	return 0;
+}
+
 static int stm32_fmc2_ham_correct(struct nand_chip *chip, u8 *dat,
 				  u8 *read_ecc, u8 *calc_ecc)
 {
@@ -490,6 +598,56 @@ static int stm32_fmc2_ham_correct(struct nand_chip *chip, u8 *dat,
 	return 1;
 }
 
+/*
+ * ECC BCH calculation and correction
+ * ECC is 7/13 bytes for 512 bytes of data (supports error correction up to
+ * max of 4-bit/8-bit)
+ */
+static int stm32_fmc2_bch_calculate(struct nand_chip *chip, const u8 *data,
+				    u8 *ecc)
+{
+	struct stm32_fmc2_nfc *fmc2 = to_stm32_nfc(chip->controller);
+	u32 bchpbr;
+
+	/* Wait until the BCH code is ready */
+	if (!wait_for_completion_timeout(&fmc2->complete,
+					 msecs_to_jiffies(1000))) {
+		dev_err(fmc2->dev, "bch timeout\n");
+		stm32_fmc2_disable_bch_irq(fmc2);
+		return -ETIMEDOUT;
+	}
+
+	/* Read parity bits */
+	bchpbr = readl_relaxed(fmc2->io_base + FMC2_BCHPBR1);
+	ecc[0] = bchpbr;
+	ecc[1] = bchpbr >> 8;
+	ecc[2] = bchpbr >> 16;
+	ecc[3] = bchpbr >> 24;
+
+	bchpbr = readl_relaxed(fmc2->io_base + FMC2_BCHPBR2);
+	ecc[4] = bchpbr;
+	ecc[5] = bchpbr >> 8;
+	ecc[6] = bchpbr >> 16;
+
+	if (chip->ecc.strength == FMC2_ECC_BCH8) {
+		ecc[7] = bchpbr >> 24;
+
+		bchpbr = readl_relaxed(fmc2->io_base + FMC2_BCHPBR3);
+		ecc[8] = bchpbr;
+		ecc[9] = bchpbr >> 8;
+		ecc[10] = bchpbr >> 16;
+		ecc[11] = bchpbr >> 24;
+
+		bchpbr = readl_relaxed(fmc2->io_base + FMC2_BCHPBR4);
+		ecc[12] = bchpbr;
+	}
+
+	/* Disable ECC */
+	stm32_fmc2_set_ecc(fmc2, false);
+
+	return 0;
+}
+
 /* BCH algorithm correction */
 static int stm32_fmc2_bch_decode(int eccsize, u8 *dat, u32 *ecc_sta)
 {
@@ -530,6 +688,94 @@ static int stm32_fmc2_bch_decode(int eccsize, u8 *dat, u32 *ecc_sta)
 	return nb_errs;
 }
 
+static int stm32_fmc2_bch_correct(struct nand_chip *chip, u8 *dat,
+				  u8 *read_ecc, u8 *calc_ecc)
+{
+	struct stm32_fmc2_nfc *fmc2 = to_stm32_nfc(chip->controller);
+	u32 ecc_sta[5];
+
+	/* Wait until the decoding error is ready */
+	if (!wait_for_completion_timeout(&fmc2->complete,
+					 msecs_to_jiffies(1000))) {
+		dev_err(fmc2->dev, "bch timeout\n");
+		stm32_fmc2_disable_bch_irq(fmc2);
+		return -ETIMEDOUT;
+	}
+
+	ecc_sta[0] = readl_relaxed(fmc2->io_base + FMC2_BCHDSR0);
+	ecc_sta[1] = readl_relaxed(fmc2->io_base + FMC2_BCHDSR1);
+	ecc_sta[2] = readl_relaxed(fmc2->io_base + FMC2_BCHDSR2);
+	ecc_sta[3] = readl_relaxed(fmc2->io_base + FMC2_BCHDSR3);
+	ecc_sta[4] = readl_relaxed(fmc2->io_base + FMC2_BCHDSR4);
+
+	/* Disable ECC */
+	stm32_fmc2_set_ecc(fmc2, false);
+
+	return stm32_fmc2_bch_decode(chip->ecc.size, dat, ecc_sta);
+}
+
+static int stm32_fmc2_read_page(struct nand_chip *chip, u8 *buf,
+				int oob_required, int page)
+{
+	struct mtd_info *mtd = nand_to_mtd(chip);
+	int ret, i, s, stat, eccsize = chip->ecc.size;
+	int eccbytes = chip->ecc.bytes;
+	int eccsteps = chip->ecc.steps;
+	int eccstrength = chip->ecc.strength;
+	u8 *p = buf;
+	u8 *ecc_calc = chip->ecc.calc_buf;
+	u8 *ecc_code = chip->ecc.code_buf;
+	unsigned int max_bitflips = 0;
+
+	ret = nand_read_page_op(chip, page, 0, NULL, 0);
+	if (ret)
+		return ret;
+
+	for (i = mtd->writesize + FMC2_BBM_LEN, s = 0; s < eccsteps;
+	     s++, i += eccbytes, p += eccsize) {
+		chip->ecc.hwctl(chip, NAND_ECC_READ);
+
+		/* Read the nand page sector (512 bytes) */
+		ret = nand_change_read_column_op(chip, s * eccsize, p,
+						 eccsize, false);
+		if (ret)
+			return ret;
+
+		/* Read the corresponding ECC bytes */
+		ret = nand_change_read_column_op(chip, i, ecc_code,
+						 eccbytes, false);
+		if (ret)
+			return ret;
+
+		/* Correct the data */
+		stat = chip->ecc.correct(chip, p, ecc_code, ecc_calc);
+		if (stat == -EBADMSG)
+			/* Check for empty pages with bitflips */
+			stat = nand_check_erased_ecc_chunk(p, eccsize,
+							   ecc_code, eccbytes,
+							   NULL, 0,
+							   eccstrength);
+
+		if (stat < 0) {
+			mtd->ecc_stats.failed++;
+		} else {
+			mtd->ecc_stats.corrected += stat;
+			max_bitflips = max_t(unsigned int, max_bitflips, stat);
+		}
+	}
+
+	/* Read oob */
+	if (oob_required) {
+		ret = nand_change_read_column_op(chip, mtd->writesize,
+						 chip->oob_poi, mtd->oobsize,
+						 false);
+		if (ret)
+			return ret;
+	}
+
+	return max_bitflips;
+}
+
 /* Sequencer read/write configuration */
 static void stm32_fmc2_rw_page_init(struct nand_chip *chip, int page,
 				    int raw, bool write_data)
@@ -967,7 +1213,12 @@ static irqreturn_t stm32_fmc2_irq(int irq, void *dev_id)
 {
 	struct stm32_fmc2_nfc *fmc2 = (struct stm32_fmc2_nfc *)dev_id;
 
-	stm32_fmc2_disable_seq_irq(fmc2);
+	if (fmc2->irq_state == FMC2_IRQ_SEQ)
+		/* Sequencer is used */
+		stm32_fmc2_disable_seq_irq(fmc2);
+	else if (fmc2->irq_state == FMC2_IRQ_BCH)
+		/* BCH is used */
+		stm32_fmc2_disable_bch_irq(fmc2);
 
 	complete(&fmc2->complete);
 
@@ -1356,35 +1607,27 @@ static int stm32_fmc2_dma_setup(struct stm32_fmc2_nfc *fmc2)
 	fmc2->dma_rx_ch = dma_request_slave_channel(fmc2->dev, "rx");
 	fmc2->dma_ecc_ch = dma_request_slave_channel(fmc2->dev, "ecc");
 
-	if (fmc2->dma_ecc_ch) {
-		ret = sg_alloc_table(&fmc2->dma_ecc_sg, FMC2_MAX_SG,
-				     GFP_KERNEL);
-		if (ret)
-			return ret;
-
-		/* Allocate a buffer to store ECC status registers */
-		fmc2->ecc_buf = devm_kzalloc(fmc2->dev,
-					     FMC2_MAX_ECC_BUF_LEN,
-					     GFP_KERNEL);
-		if (!fmc2->ecc_buf)
-			return -ENOMEM;
-	} else {
-		dev_err(fmc2->dev, "ECC DMA not defined in the device tree\n");
-		return -ENOENT;
+	if (!fmc2->dma_tx_ch || !fmc2->dma_rx_ch || !fmc2->dma_ecc_ch) {
+		dev_warn(fmc2->dev, "DMAs not defined in the device tree, manual mode is used\n");
+		return 0;
 	}
 
-	if (fmc2->dma_tx_ch && fmc2->dma_rx_ch) {
-		ret = sg_alloc_table(&fmc2->dma_data_sg, FMC2_MAX_SG,
+	ret = sg_alloc_table(&fmc2->dma_ecc_sg, FMC2_MAX_SG, GFP_KERNEL);
+	if (ret)
+		return ret;
+
+	/* Allocate a buffer to store ECC status registers */
+	fmc2->ecc_buf = devm_kzalloc(fmc2->dev, FMC2_MAX_ECC_BUF_LEN,
 				     GFP_KERNEL);
-		if (ret)
-			return ret;
+	if (!fmc2->ecc_buf)
+		return -ENOMEM;
 
-		init_completion(&fmc2->dma_data_complete);
-		init_completion(&fmc2->dma_ecc_complete);
-	} else {
-		dev_err(fmc2->dev, "rx/tx DMA not defined in the device tree\n");
-		return -ENOENT;
-	}
+	ret = sg_alloc_table(&fmc2->dma_data_sg, FMC2_MAX_SG, GFP_KERNEL);
+	if (ret)
+		return ret;
+
+	init_completion(&fmc2->dma_data_complete);
+	init_completion(&fmc2->dma_ecc_complete);
 
 	return 0;
 }
@@ -1392,12 +1635,34 @@ static int stm32_fmc2_dma_setup(struct stm32_fmc2_nfc *fmc2)
 /* NAND callbacks setup */
 static void stm32_fmc2_nand_callbacks_setup(struct nand_chip *chip)
 {
-	/* Specific callbacks to read/write a page */
-	chip->ecc.correct = stm32_fmc2_sequencer_correct;
-	chip->ecc.write_page = stm32_fmc2_sequencer_write_page;
-	chip->ecc.read_page = stm32_fmc2_sequencer_read_page;
-	chip->ecc.write_page_raw = stm32_fmc2_sequencer_write_page_raw;
-	chip->ecc.read_page_raw = stm32_fmc2_sequencer_read_page_raw;
+	struct stm32_fmc2_nfc *fmc2 = to_stm32_nfc(chip->controller);
+
+	/*
+	 * Specific callbacks to read/write a page depending on
+	 * the mode (manual/sequencer) and the algo used (Hamming, BCH).
+	 */
+	if (fmc2->dma_tx_ch && fmc2->dma_rx_ch && fmc2->dma_ecc_ch) {
+		/* DMA => use sequencer mode callbacks */
+		chip->ecc.correct = stm32_fmc2_sequencer_correct;
+		chip->ecc.write_page = stm32_fmc2_sequencer_write_page;
+		chip->ecc.read_page = stm32_fmc2_sequencer_read_page;
+		chip->ecc.write_page_raw = stm32_fmc2_sequencer_write_page_raw;
+		chip->ecc.read_page_raw = stm32_fmc2_sequencer_read_page_raw;
+	} else {
+		/* No DMA => use manual mode callbacks */
+		chip->ecc.hwctl = stm32_fmc2_hwctl;
+		if (chip->ecc.strength == FMC2_ECC_HAM) {
+			/* Hamming is used */
+			chip->ecc.calculate = stm32_fmc2_ham_calculate;
+			chip->ecc.correct = stm32_fmc2_ham_correct;
+			chip->ecc.options |= NAND_ECC_GENERIC_ERASED_CHECK;
+		} else {
+			/* BCH is used */
+			chip->ecc.calculate = stm32_fmc2_bch_calculate;
+			chip->ecc.correct = stm32_fmc2_bch_correct;
+			chip->ecc.read_page = stm32_fmc2_read_page;
+		}
+	}
 
 	/* Specific configurations depending on the algo used */
 	if (chip->ecc.strength == FMC2_ECC_HAM)
-- 
1.9.1

