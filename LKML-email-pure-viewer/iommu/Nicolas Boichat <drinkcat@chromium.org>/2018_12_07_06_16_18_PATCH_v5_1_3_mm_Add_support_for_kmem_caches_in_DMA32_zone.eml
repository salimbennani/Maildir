Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 16:18:22 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id A129E580375;
	Thu,  6 Dec 2018 22:16:56 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 22:16:55 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ATres7haEWM5HnFH2Di5E0A//LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpcm6Yh7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyxPDJ2h?=
 =?us-ascii?q?YYUBDOQPOuRXr4fyqFUBthu+HQuhCfjzxjJLnHL6wbc33/g9HQzAwQcuH8gOsH?=
 =?us-ascii?q?PRrNjtLKkSUPy6zK7MzTrZdPNdxCrw6I/Jch89ofGDR65wetfWxEYyDQPFj1OQ?=
 =?us-ascii?q?qY/5MDyPyuQAqHSU7+p6VeKojm4nqhxxoj21yscrkInJiZsYx1bZ/it62IY4Pc?=
 =?us-ascii?q?O0RFJ/bNK+DZdduT+WO5FrTs4hX21koic3x78etZKlcyUG1IkryhvRa/Odb4SE?=
 =?us-ascii?q?/hfuWPuULDhjgX9ldrOyiha2/EWlyOD8WNS43VRPoyVbiNbAq20B2hnc58eZSf?=
 =?us-ascii?q?Zy4EGs0iuV2Q/J8OFLO0U0mLLbK5E/xr4wkYIesVrMHiDogkX6lqyWeVs++uiu?=
 =?us-ascii?q?9evnZq/qppiGN497kg3+M6IuldKjAekgLAQCQ2yW9f6h2LDt40H1WqhGg/4qnq?=
 =?us-ascii?q?XDsZ3XJ9wXpqujDA9U1oYj5Qy/DzCj0NkAmXkHLVRFeA+IjoTwOFHBPur4DfGh?=
 =?us-ascii?q?jFSoiTtrwP7HPrv/DZXXNXXDjrjhcqhn60JGywo808pf55RKBbEFOv7zXVXxtN?=
 =?us-ascii?q?PAAh8jLwO02/rnCMl61o4GXWKPA6yZP73IvV6H++IiOO2MZI4TuDbgJPkp/f/u?=
 =?us-ascii?q?jXklmVADeamlx4cYaHe9Hv5+OUWWfWLsgssdEWcNpgc+TPbliFyeUTFJYHa+Ra?=
 =?us-ascii?q?I85iwhB4KgAofOXYStgL2H3CemEZxafGFGClaQEXj2c4WIQesDaCWXIsV5iDwL?=
 =?us-ascii?q?SaChS5M91RGprAL6yb1nIfTO9i0bspLj0t515+rImBE29Dx0Cdmd0m6XQ2F1mG?=
 =?us-ascii?q?MIWyE53KRlrUNhzVeD1LByg+ZEGtxL+/NJTgA6OIbGwOxhC9DyXQHBcs2TSFm8?=
 =?us-ascii?q?QNWrGjUxTtM3w98TbEdxAdSijhbf3yW0B78ZjaCEBJsx8qjExXj+O959y2ra1K?=
 =?us-ascii?q?kml1QmQdFANWu8iq579gjcHYjJk0qCmqaudKQc2jPN9WiZwWqPukFYTBB/UaHf?=
 =?us-ascii?q?UX8DYUvWqMzz5lneQL+2FbQnLgxBxNafJaRQdN3mk09KRPf5N9TYeGK+hWGwCR?=
 =?us-ascii?q?GMxrOPaYrqf34Q3CHcCEgCjgAS8myKNQk4Bie9vW3eCCZiGk7oY0Pp6eN+sm+0?=
 =?us-ascii?q?TlcozwGWaE1sz6e69QQLhfOCUf8T3qgLuCE6qzpqGlawxNbWC9uGpwp8c6RQe9?=
 =?us-ascii?q?I94FFb1W3HswxxJICvL6dnhlQGaQR4o1vu1wlrCoVHicUqsHIqzA91KaKE0FNA?=
 =?us-ascii?q?dymU3YzqNr3QMGny+BGva6jZ2lzF1NaW+6EP6Ok3qln5vQGpEFYi/Gtj09VPz3?=
 =?us-ascii?q?Sc4ZDKBhIIUZ3tSkY36wR6p7bCbyYn44Pby3JtPre0szPYwN0pGfYqxQymf9dc?=
 =?us-ascii?q?N6OEChT/E8kbB8ioNewrlEKlbhMCPOBO6qE0O9mqeOeB2K6uJOxghi6pjXxb4I?=
 =?us-ascii?q?Bh1UKB7yp9SvPS05kZ2f2Z3wuHWC36jFeuqc33nYFEZTcPHmuw0yTkBYhRZrFs?=
 =?us-ascii?q?coYPE2uhP8q3xtBmjZ73R3FY7EKjB08B2MKxYxqSbkDy0hdK1UsKpnyrgy24wC?=
 =?us-ascii?q?JukzEot6aQwDbBw+D/exUZIG5LQ29igEzoIYi1idAaQUepYxIolBuj+Ub12axb?=
 =?us-ascii?q?qL5jIGnUREdCZzL2IH16UqusqrqCZNZC6ZMpsSlNUOWwe0uaSqP7oxYB1yPjHm?=
 =?us-ascii?q?1exC00dj2wu5X5mQB6h3yZLHppsHXZfsRwzw/F5NPAXf5RwiYGRC5ghDnVHFe8?=
 =?us-ascii?q?Jdqp/daTl5vZqeCxTWGhVp5ScSnt04yAsjC25WlrAR25gvCylcfrEQk80S/nyd?=
 =?us-ascii?q?ZqUT/Eowr7Yonuz666K/5oflF0BF/g7Mp3AoF/nZE3hJ0K23gah5OV8GEDkWfy?=
 =?us-ascii?q?N9VbxK3/YGAMRT4N397a/gzl1Fd/IXKOwoLzTm+dzdd5Z9mmfmMW3Tow78NQB6?=
 =?us-ascii?q?eV9rBEnTZ1rUC+rQLeevV9mjYdyf0z6H8Vme0JuQwtzjmDDbAWB0VXISvslxGQ?=
 =?us-ascii?q?5dCksKpXfHqvcaS31EdmmNChDbKCrRtGVHf3ZJgiBjNw4dtlMF3XznLz8I7kdc?=
 =?us-ascii?q?LUbdISsB2UjhjBg/JUKJI3ivoFmy5nNXjhsn0izu4xlQZu0o2ivIibN2Vt+7q0?=
 =?us-ascii?q?AgJfNj3wfc8S+yvijaBDnsaNxICvH45sGjEKXJvuUPKpHygetfXhNwaSDjI8rm?=
 =?us-ascii?q?2XFqbYHQ+a8E1mtW7AE4i3N3GLI3kU1c5tSwOaJExbnQAYRjE6noMiGwCuxczh?=
 =?us-ascii?q?dlp55z8L6l75rBtM1vxnNx3lXmjDoweoby8+SIKDIxpO8gFC+0DVPNSc7u1pGi?=
 =?us-ascii?q?FX4IahoBaRKmCBZARIEGIJWlGCB1/5Jbmj/t3A8+meBuqjIPrCe7SOqepCV/iW?=
 =?us-ascii?q?wZKjyJdp/zGJNs+XJHltE+U72lZfXXB+A8nYmzIPSzEOlyLQdcGbog2w+jZwrs?=
 =?us-ascii?q?C5//TmQwbv5YqJC7tPPtRj4RG2gaGfN+GOgCZ1MypX1pQJxXXQ0rgQwEYSiz1y?=
 =?us-ascii?q?dzmqCbkAtTDCTKPTmq9UDh4XcSBzNNFP76IzwAZNI9Pbisju2758j/41DUpFVF?=
 =?us-ascii?q?P7lsGoY8wKP3+yNFfdCEmXM7SGICXBw9vrbqOkVb1QkOJUugWqtjaGCEDjJCqM?=
 =?us-ascii?q?ljnzWxCrMOFBlyWbPB1YuIGgfRdhE2njTNT6ahKlNN97lyE5wboxhnnSL24TLS?=
 =?us-ascii?q?B8c19Rrr2X9S5YnvR/G2lb4nV5N+WLhyaZ4PfeKpsNtftrAyJ0l/9V4XggyrtV?=
 =?us-ascii?q?6j1ES+JxmCfIstFupFSmmPGVyjV7SBpOtipLhIWTsERiI6rZ8JxAWXfC/B0V7G?=
 =?us-ascii?q?SQCw4Fp91qCtD0v6BQy97PlL/8KTtY8tLU+9ccCNbQKM6dLHUhNh/pS3boC146?=
 =?us-ascii?q?TDqvfU3SjkdalrnG6XyRqt42p5Hnn5wmQ6VeElcyE6VJJF5iGYkkIZxwWjo/2Z?=
 =?us-ascii?q?ScjcUI7Gb2+BXLRcNZtZnbfvmSG/LqKSucy75eaE1bkvvDMY0PO9ijiARZYV5g?=
 =?us-ascii?q?kdGPQhKIUA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AvAAB+Dwpch0O0hNFjHgEGBwaBUwcLA?=
 =?us-ascii?q?YEwgjsnmHUGgUmJDI4vFIFfEgEBGBMBh1kiNgcNAQMBAQEBAQECARMBAQEIDQk?=
 =?us-ascii?q?IKSMMgjYkAYJiAwMBAiQLAQ0BATcBBQkBAVADMQEFARwGEwWDHIF1DQEEmhk8i?=
 =?us-ascii?q?h2BbDOCdgEBBYcrCBKHXoMTgRwXeIEHg3WFF4VziSaCAYUPkC4JkT8jiWKHVJh?=
 =?us-ascii?q?zAgQCBAUCBQ8hgSwKgXwzGggoCIMnghuJAYVMMzKBBQEBij8BAQ?=
X-IPAS-Result: =?us-ascii?q?A0AvAAB+Dwpch0O0hNFjHgEGBwaBUwcLAYEwgjsnmHUGgUm?=
 =?us-ascii?q?JDI4vFIFfEgEBGBMBh1kiNgcNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkAYJiA?=
 =?us-ascii?q?wMBAiQLAQ0BATcBBQkBAVADMQEFARwGEwWDHIF1DQEEmhk8ih2BbDOCdgEBBYc?=
 =?us-ascii?q?rCBKHXoMTgRwXeIEHg3WFF4VziSaCAYUPkC4JkT8jiWKHVJhzAgQCBAUCBQ8hg?=
 =?us-ascii?q?SwKgXwzGggoCIMnghuJAYVMMzKBBQEBij8BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,324,1539673200"; 
   d="scan'208";a="43969560"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 06 Dec 2018 22:16:54 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726070AbeLGGQv (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 7 Dec 2018 01:16:51 -0500
Received: from mail-pf1-f194.google.com ([209.85.210.194]:33165 "EHLO
        mail-pf1-f194.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726007AbeLGGQs (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 7 Dec 2018 01:16:48 -0500
Received: by mail-pf1-f194.google.com with SMTP id c123so1436066pfb.0
        for <linux-kernel@vger.kernel.org>; Thu, 06 Dec 2018 22:16:48 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=chromium.org; s=google;
        h=from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding;
        bh=NzK+v8SD4i+VFYwyauHYt8uHII5JYwJbxV/psygL2NI=;
        b=GCAm1IN+ZRxbOc7GN7uNAXJJ8+9asqSko3ZUYgKImfZU63d/DjtitlkotDu3aXwDj5
         Iv1yHuvKraDNMyDD480Kx7aNGM25sdgHZaG9Wn7gXCpdWregqeUEyJQiQWwRHOr5rxZN
         LPaXQhG3devZMIz45D0m+r/ow6oBxqByOhh60=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=NzK+v8SD4i+VFYwyauHYt8uHII5JYwJbxV/psygL2NI=;
        b=XNZtz9E5du1tAP7tFord6IIIn+CbUgHkStF6Nq/DEKP1EXs10W3ekwnR7ZRu0GQhfb
         9bZRcSyCtBvrwpad7XHk84HvN/V3fq7yy/S/qVD2gZX4CLgrnJ16ZTVSHiULE9SPTULc
         sg1VMMQPT83WN8GdyM4K5Hjzw3V0jgMJV824IthIYp5TNALbk1LpTkn0jIIr6KdLAg4G
         ia6kHV2CP7HA/hcNGGSVyATc1SLKpzEMQ6eP3OZU+xDoc94m0B+hDdXK09HjZL4nKCd8
         vsA/2yaffxlX4L0jJ1FCfrPefwMe5t7utIp930N+I9AA3lo7W55hVmx1gXG+j63yH72C
         bmsg==
X-Gm-Message-State: AA+aEWYHqFOwi/tFPD4nO/RLfHlF1KP7E2kYBjyo3xNMnbXQN0Ox4Ohc
        +BatRRRI+/+9xTOvwCEj+xsgug==
X-Google-Smtp-Source: AFSGD/Xhr/g/OFHfKU7UGrWKwjX5Riip3DtlLhjvwMxfgqPTmR5dk2b/UOS+VKUsgAbbsuT+kNuVPw==
X-Received: by 2002:a62:4d81:: with SMTP id a123mr1066512pfb.122.1544163407669;
        Thu, 06 Dec 2018 22:16:47 -0800 (PST)
Received: from drinkcat2.tpe.corp.google.com ([2401:fa00:1:b:f659:7f17:ea11:4e8e])
        by smtp.gmail.com with ESMTPSA id z30-v6sm2995944pfg.41.2018.12.06.22.16.43
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Thu, 06 Dec 2018 22:16:46 -0800 (PST)
From: Nicolas Boichat <drinkcat@chromium.org>
To: Will Deacon <will.deacon@arm.com>
Cc: Robin Murphy <robin.murphy@arm.com>,
        Joerg Roedel <joro@8bytes.org>,
        Christoph Lameter <cl@linux.com>,
        Pekka Enberg <penberg@kernel.org>,
        David Rientjes <rientjes@google.com>,
        Joonsoo Kim <iamjoonsoo.kim@lge.com>,
        Andrew Morton <akpm@linux-foundation.org>,
        Vlastimil Babka <vbabka@suse.cz>,
        Michal Hocko <mhocko@suse.com>,
        Mel Gorman <mgorman@techsingularity.net>,
        Levin Alexander <Alexander.Levin@microsoft.com>,
        Huaisheng Ye <yehs1@lenovo.com>,
        Mike Rapoport <rppt@linux.vnet.ibm.com>,
        linux-arm-kernel@lists.infradead.org,
        iommu@lists.linux-foundation.org, linux-kernel@vger.kernel.org,
        linux-mm@kvack.org, Yong Wu <yong.wu@mediatek.com>,
        Matthias Brugger <matthias.bgg@gmail.com>,
        Tomasz Figa <tfiga@google.com>, yingjoe.chen@mediatek.com,
        hch@infradead.org, Matthew Wilcox <willy@infradead.org>
Subject: [PATCH v5 1/3] mm: Add support for kmem caches in DMA32 zone
Date: Fri,  7 Dec 2018 14:16:18 +0800
Message-Id: <20181207061620.107881-2-drinkcat@chromium.org>
X-Mailer: git-send-email 2.20.0.rc2.403.gdbc3b29805-goog
In-Reply-To: <20181207061620.107881-1-drinkcat@chromium.org>
References: <20181207061620.107881-1-drinkcat@chromium.org>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

IOMMUs using ARMv7 short-descriptor format require page tables
to be allocated within the first 4GB of RAM, even on 64-bit systems.
On arm64, this is done by passing GFP_DMA32 flag to memory allocation
functions.

For IOMMU L2 tables that only take 1KB, it would be a waste to allocate
a full page using get_free_pages, so we considered 3 approaches:
 1. This patch, adding support for GFP_DMA32 slab caches.
 2. genalloc, which requires pre-allocating the maximum number of L2
    page tables (4096, so 4MB of memory).
 3. page_frag, which is not very memory-efficient as it is unable
    to reuse freed fragments until the whole page is freed.

This change makes it possible to create a custom cache in DMA32 zone
using kmem_cache_create, then allocate memory using kmem_cache_alloc.

We do not create a DMA32 kmalloc cache array, as there are currently
no users of kmalloc(..., GFP_DMA32). These calls will continue to
trigger a warning, as we keep GFP_DMA32 in GFP_SLAB_BUG_MASK.

This implies that calls to kmem_cache_*alloc on a SLAB_CACHE_DMA32
kmem_cache must _not_ use GFP_DMA32 (it is anyway redundant and
unnecessary).

Signed-off-by: Nicolas Boichat <drinkcat@chromium.org>
---

Changes since v2:
 - Clarified commit message
 - Add entry in sysfs-kernel-slab to document the new sysfs file

(v3 used the page_frag approach)

Changes since v4:
 - Added details to commit message
 - Dropped change that removed GFP_DMA32 from GFP_SLAB_BUG_MASK:
   instead we can just call kmem_cache_*alloc without GFP_DMA32
   parameter. This also means that we can drop PATCH 1/3, as we
   do not make any changes in GFP flag verification.
 - Dropped hunks that added cache_dma32 sysfs file, and moved
   the hunks to PATCH 3/3, so that maintainer can decide whether
   to pick the change independently.

 include/linux/slab.h | 2 ++
 mm/slab.c            | 2 ++
 mm/slab.h            | 3 ++-
 mm/slab_common.c     | 2 +-
 mm/slub.c            | 5 +++++
 5 files changed, 12 insertions(+), 2 deletions(-)

diff --git a/include/linux/slab.h b/include/linux/slab.h
index 11b45f7ae4057c..9449b19c5f107a 100644
--- a/include/linux/slab.h
+++ b/include/linux/slab.h
@@ -32,6 +32,8 @@
 #define SLAB_HWCACHE_ALIGN	((slab_flags_t __force)0x00002000U)
 /* Use GFP_DMA memory */
 #define SLAB_CACHE_DMA		((slab_flags_t __force)0x00004000U)
+/* Use GFP_DMA32 memory */
+#define SLAB_CACHE_DMA32	((slab_flags_t __force)0x00008000U)
 /* DEBUG: Store the last owner for bug hunting */
 #define SLAB_STORE_USER		((slab_flags_t __force)0x00010000U)
 /* Panic if kmem_cache_create() fails */
diff --git a/mm/slab.c b/mm/slab.c
index 73fe23e649c91a..124f8c556d27fb 100644
--- a/mm/slab.c
+++ b/mm/slab.c
@@ -2109,6 +2109,8 @@ int __kmem_cache_create(struct kmem_cache *cachep, slab_flags_t flags)
 	cachep->allocflags = __GFP_COMP;
 	if (flags & SLAB_CACHE_DMA)
 		cachep->allocflags |= GFP_DMA;
+	if (flags & SLAB_CACHE_DMA32)
+		cachep->allocflags |= GFP_DMA32;
 	if (flags & SLAB_RECLAIM_ACCOUNT)
 		cachep->allocflags |= __GFP_RECLAIMABLE;
 	cachep->size = size;
diff --git a/mm/slab.h b/mm/slab.h
index 4190c24ef0e9df..fcf717e12f0a86 100644
--- a/mm/slab.h
+++ b/mm/slab.h
@@ -127,7 +127,8 @@ static inline slab_flags_t kmem_cache_flags(unsigned int object_size,
 
 
 /* Legal flag mask for kmem_cache_create(), for various configurations */
-#define SLAB_CORE_FLAGS (SLAB_HWCACHE_ALIGN | SLAB_CACHE_DMA | SLAB_PANIC | \
+#define SLAB_CORE_FLAGS (SLAB_HWCACHE_ALIGN | SLAB_CACHE_DMA | \
+			 SLAB_CACHE_DMA32 | SLAB_PANIC | \
 			 SLAB_TYPESAFE_BY_RCU | SLAB_DEBUG_OBJECTS )
 
 #if defined(CONFIG_DEBUG_SLAB)
diff --git a/mm/slab_common.c b/mm/slab_common.c
index 70b0cc85db67f8..18b7b809c8d064 100644
--- a/mm/slab_common.c
+++ b/mm/slab_common.c
@@ -53,7 +53,7 @@ static DECLARE_WORK(slab_caches_to_rcu_destroy_work,
 		SLAB_FAILSLAB | SLAB_KASAN)
 
 #define SLAB_MERGE_SAME (SLAB_RECLAIM_ACCOUNT | SLAB_CACHE_DMA | \
-			 SLAB_ACCOUNT)
+			 SLAB_CACHE_DMA32 | SLAB_ACCOUNT)
 
 /*
  * Merge control. If this is set then no merging of slab caches will occur.
diff --git a/mm/slub.c b/mm/slub.c
index c229a9b7dd5448..4caadb926838ef 100644
--- a/mm/slub.c
+++ b/mm/slub.c
@@ -3583,6 +3583,9 @@ static int calculate_sizes(struct kmem_cache *s, int forced_order)
 	if (s->flags & SLAB_CACHE_DMA)
 		s->allocflags |= GFP_DMA;
 
+	if (s->flags & SLAB_CACHE_DMA32)
+		s->allocflags |= GFP_DMA32;
+
 	if (s->flags & SLAB_RECLAIM_ACCOUNT)
 		s->allocflags |= __GFP_RECLAIMABLE;
 
@@ -5671,6 +5674,8 @@ static char *create_unique_id(struct kmem_cache *s)
 	 */
 	if (s->flags & SLAB_CACHE_DMA)
 		*p++ = 'd';
+	if (s->flags & SLAB_CACHE_DMA32)
+		*p++ = 'D';
 	if (s->flags & SLAB_RECLAIM_ACCOUNT)
 		*p++ = 'a';
 	if (s->flags & SLAB_CONSISTENCY_CHECKS)
-- 
2.20.0.rc2.403.gdbc3b29805-goog

