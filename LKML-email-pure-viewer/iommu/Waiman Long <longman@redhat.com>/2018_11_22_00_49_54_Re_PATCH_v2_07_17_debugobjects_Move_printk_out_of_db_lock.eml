Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 22 Nov 2018 00:34:41 -0000
Received: from icoremail.net (unknown [209.85.214.178])
	by mail-app4 (Coremail) with SMTP id cS_KCgC3f2VwpfVbKVvoAQ--.39800S3;
	Thu, 22 Nov 2018 02:35:29 +0800 (CST)
Received: from mail-pl1-f178.google.com (unknown [209.85.214.178])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwCniUVlpfVbyMhkAA--.100S3;
	Thu, 22 Nov 2018 02:35:17 +0800 (CST)
Received: by mail-pl1-f178.google.com with SMTP id u6so6688721plm.8
        for <xuliker@zju.edu.cn>; Wed, 21 Nov 2018 10:35:17 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-original-authentication-results:x-gm-message-state:delivered-to
         :subject:to:cc:references:from:openpgp:autocrypt:organization
         :message-id:date:user-agent:mime-version:in-reply-to
         :content-transfer-encoding:content-language:sender:precedence
         :list-id;
        bh=pReKKpCKEVhYfiwq4N+5GZ6WQkpNkQgefx1oi66K0mU=;
        b=NaOCbtO3jKdw2XWVQeuO5RelqtGsrM/pk5eSyAbfy8l9bkjc2VRoltfpMumtKcMWmk
         clQXb9lA8vqa81qD7EjF8OkbkpdxhK/0a8y+RTWVXZBRSuyOqhBYPOsXzZCgZ2Y15FzD
         c+kz3VHYUwOru4QV7XRTOR8nM3bEQj25K9kssRpylUonYX063rRd8KEyQLpeAy+qfq7D
         dHtXH80EwaCpT1P/wNNm85ouEVJYUwkU9C9GmsCysSCWcboN71RRbIvfjzKGoRFAoxdS
         KDAINstF9CUVMw6AaINU0+b5DNBwYzlYfxdexeF9Xrx3PCC7YPs4PUzQmppXxCHRO6SD
         XXsQ==
X-Original-Authentication-Results: mx.google.com;       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;       dmarc=fail (p=NONE sp=NONE dis=NONE) header.from=redhat.com
X-Gm-Message-State: AA+aEWbmE/PQq+fNuzemOLPfnR9ThlNc1w8GhmHfSBCWkIJONY7NlIAo
	husMaYHTy/tq7SU/zAs51jzJM73cjT7bu7G7AM+UC1G3kziZ4F4=
X-Received: by 2002:a63:4044:: with SMTP id n65mr6827149pga.90.1542825316956;
        Wed, 21 Nov 2018 10:35:16 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:d106:0:0:0:0 with SMTP id l6-v6csp2317157pju;
        Wed, 21 Nov 2018 10:35:16 -0800 (PST)
X-Google-Smtp-Source: AJdET5fICDacav2KtB4JcVyPKzYXrdPd0GI/cHkmWaH1HM5K8mkwnfzNmwYjR7jLXdXkEMPVJ+nR
X-Received: by 2002:a62:5504:: with SMTP id j4-v6mr8033649pfb.166.1542825315989;
        Wed, 21 Nov 2018 10:35:15 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542825315; cv=none;
        d=google.com; s=arc-20160816;
        b=Vr97Asc+5Pf2PkTotI+DD9ECY3SsafXTdpmhABPRx/VJ4WyJf0ca3LZTVghyp97Zjc
         hwUmnIW+Cx7YVIJG0xZ+u4gaH4rfPbmVc6iD/+N3kG/uLOQLpc0USuVYwNr9i0oEWjTI
         f+xhDVEQERwGwKcjX0/WWgo28Q4ZNQHE8p3x2IkYRpsEZe+yHs2wLrej7SVcu045jBhf
         fpOcHE98t4vCBHDz6rE/2RPeyEDApQJV4sfRmBJsEsSIzFDICIkxqwugmAgOWDNzLi1+
         Potp4yU694t/DeS/shwB7Fl6EH0lO3Zgv+gFhfkW+q6Mp6gHhO97crcrU9KmM8Yon8Am
         l2vw==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:content-language
         :content-transfer-encoding:in-reply-to:mime-version:user-agent:date
         :message-id:organization:autocrypt:openpgp:from:references:cc:to
         :subject;
        bh=pReKKpCKEVhYfiwq4N+5GZ6WQkpNkQgefx1oi66K0mU=;
        b=NHtcukeio2VPdfCnOyr0IXcD4vIHIZNHrpUGyTBTxnpR7KWOFXYoabmk9v+4gAQ90P
         xK6+B/D1iYBjmdURihakUOvz5HFhsytNA/B3+w3FhRdLu6YtXi1t07UlLGZD7wu9k+YI
         o9DMfoesXQpkRfiU+jndL24/GXwjsBMyudorR0tIUtkTF64hqpcoyq5vr2IXTbgL1vYr
         fSCZ3ijJDlSxeXB9CBI9xx+wrezTsWcp5f/jrFKBiH2NNx6SHAgDVM5pRUIfGedLfo1+
         /BZfRtVVGMcCd0qw55ex5Jv9AAfYqYJYHCyeRYCo+7+v1UDhW9ahDGIGQqiJRiO0LiSj
         YoGA==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;
       dmarc=fail (p=NONE sp=NONE dis=NONE) header.from=redhat.com
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id c24si19791257pgk.269.2018.11.21.10.35.00;
        Wed, 21 Nov 2018 10:35:15 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1731988AbeKVDZJ (ORCPT <rfc822;yv9200@gmail.com> + 99 others);
        Wed, 21 Nov 2018 22:25:09 -0500
Received: from mx1.redhat.com ([209.132.183.28]:38842 "EHLO mx1.redhat.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726941AbeKVDZJ (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 21 Nov 2018 22:25:09 -0500
Received: from smtp.corp.redhat.com (int-mx06.intmail.prod.int.phx2.redhat.com [10.5.11.16])
        (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
        (No client certificate requested)
        by mx1.redhat.com (Postfix) with ESMTPS id 90D0930832E5;
        Wed, 21 Nov 2018 16:49:56 +0000 (UTC)
Received: from llong.remote.csb (dhcp-17-55.bos.redhat.com [10.18.17.55])
        by smtp.corp.redhat.com (Postfix) with ESMTP id 2B29F5C265;
        Wed, 21 Nov 2018 16:49:55 +0000 (UTC)
Subject: Re: [PATCH v2 07/17] debugobjects: Move printk out of db lock
 critical sections
To: Peter Zijlstra <peterz@infradead.org>,
        Ingo Molnar <mingo@redhat.com>,
        Will Deacon <will.deacon@arm.com>,
        Thomas Gleixner <tglx@linutronix.de>
Cc: linux-kernel@vger.kernel.org, kasan-dev@googlegroups.com,
        linux-mm@kvack.org, iommu@lists.linux-foundation.org,
        Petr Mladek <pmladek@suse.com>,
        Sergey Senozhatsky <sergey.senozhatsky@gmail.com>,
        Andrey Ryabinin <aryabinin@virtuozzo.com>,
        Tejun Heo <tj@kernel.org>,
        Andrew Morton <akpm@linux-foundation.org>
References: <1542653726-5655-1-git-send-email-longman@redhat.com>
 <1542653726-5655-8-git-send-email-longman@redhat.com>
From: Waiman Long <longman@redhat.com>
Openpgp: preference=signencrypt
Autocrypt: addr=longman@redhat.com; prefer-encrypt=mutual; keydata=
 xsFNBFgsZGsBEAC3l/RVYISY3M0SznCZOv8aWc/bsAgif1H8h0WPDrHnwt1jfFTB26EzhRea
 XQKAJiZbjnTotxXq1JVaWxJcNJL7crruYeFdv7WUJqJzFgHnNM/upZuGsDIJHyqBHWK5X9ZO
 jRyfqV/i3Ll7VIZobcRLbTfEJgyLTAHn2Ipcpt8mRg2cck2sC9+RMi45Epweu7pKjfrF8JUY
 r71uif2ThpN8vGpn+FKbERFt4hW2dV/3awVckxxHXNrQYIB3I/G6mUdEZ9yrVrAfLw5M3fVU
 CRnC6fbroC6/ztD40lyTQWbCqGERVEwHFYYoxrcGa8AzMXN9CN7bleHmKZrGxDFWbg4877zX
 0YaLRypme4K0ULbnNVRQcSZ9UalTvAzjpyWnlnXCLnFjzhV7qsjozloLTkZjyHimSc3yllH7
 VvP/lGHnqUk7xDymgRHNNn0wWPuOpR97J/r7V1mSMZlni/FVTQTRu87aQRYu3nKhcNJ47TGY
 evz/U0ltaZEU41t7WGBnC7RlxYtdXziEn5fC8b1JfqiP0OJVQfdIMVIbEw1turVouTovUA39
 Qqa6Pd1oYTw+Bdm1tkx7di73qB3x4pJoC8ZRfEmPqSpmu42sijWSBUgYJwsziTW2SBi4hRjU
 h/Tm0NuU1/R1bgv/EzoXjgOM4ZlSu6Pv7ICpELdWSrvkXJIuIwARAQABzR9Mb25nbWFuIExv
 bmcgPGxsb25nQHJlZGhhdC5jb20+wsF/BBMBAgApBQJYLGRrAhsjBQkJZgGABwsJCAcDAgEG
 FQgCCQoLBBYCAwECHgECF4AACgkQbjBXZE7vHeYwBA//ZYxi4I/4KVrqc6oodVfwPnOVxvyY
 oKZGPXZXAa3swtPGmRFc8kGyIMZpVTqGJYGD9ZDezxpWIkVQDnKM9zw/qGarUVKzElGHcuFN
 ddtwX64yxDhA+3Og8MTy8+8ZucM4oNsbM9Dx171bFnHjWSka8o6qhK5siBAf9WXcPNogUk4S
 fMNYKxexcUayv750GK5E8RouG0DrjtIMYVJwu+p3X1bRHHDoieVfE1i380YydPd7mXa7FrRl
 7unTlrxUyJSiBc83HgKCdFC8+ggmRVisbs+1clMsK++ehz08dmGlbQD8Fv2VK5KR2+QXYLU0
 rRQjXk/gJ8wcMasuUcywnj8dqqO3kIS1EfshrfR/xCNSREcv2fwHvfJjprpoE9tiL1qP7Jrq
 4tUYazErOEQJcE8Qm3fioh40w8YrGGYEGNA4do/jaHXm1iB9rShXE2jnmy3ttdAh3M8W2OMK
 4B/Rlr+Awr2NlVdvEF7iL70kO+aZeOu20Lq6mx4Kvq/WyjZg8g+vYGCExZ7sd8xpncBSl7b3
 99AIyT55HaJjrs5F3Rl8dAklaDyzXviwcxs+gSYvRCr6AMzevmfWbAILN9i1ZkfbnqVdpaag
 QmWlmPuKzqKhJP+OMYSgYnpd/vu5FBbc+eXpuhydKqtUVOWjtp5hAERNnSpD87i1TilshFQm
 TFxHDzbOwU0EWCxkawEQALAcdzzKsZbcdSi1kgjfce9AMjyxkkZxcGc6Rhwvt78d66qIFK9D
 Y9wfcZBpuFY/AcKEqjTo4FZ5LCa7/dXNwOXOdB1Jfp54OFUqiYUJFymFKInHQYlmoES9EJEU
 yy+2ipzy5yGbLh3ZqAXyZCTmUKBU7oz/waN7ynEP0S0DqdWgJnpEiFjFN4/ovf9uveUnjzB6
 lzd0BDckLU4dL7aqe2ROIHyG3zaBMuPo66pN3njEr7IcyAL6aK/IyRrwLXoxLMQW7YQmFPSw
 drATP3WO0x8UGaXlGMVcaeUBMJlqTyN4Swr2BbqBcEGAMPjFCm6MjAPv68h5hEoB9zvIg+fq
 M1/Gs4D8H8kUjOEOYtmVQ5RZQschPJle95BzNwE3Y48ZH5zewgU7ByVJKSgJ9HDhwX8Ryuia
 79r86qZeFjXOUXZjjWdFDKl5vaiRbNWCpuSG1R1Tm8o/rd2NZ6l8LgcK9UcpWorrPknbE/pm
 MUeZ2d3ss5G5Vbb0bYVFRtYQiCCfHAQHO6uNtA9IztkuMpMRQDUiDoApHwYUY5Dqasu4ZDJk
 bZ8lC6qc2NXauOWMDw43z9He7k6LnYm/evcD+0+YebxNsorEiWDgIW8Q/E+h6RMS9kW3Rv1N
 qd2nFfiC8+p9I/KLcbV33tMhF1+dOgyiL4bcYeR351pnyXBPA66ldNWvABEBAAHCwWUEGAEC
 AA8FAlgsZGsCGwwFCQlmAYAACgkQbjBXZE7vHeYxSQ/+PnnPrOkKHDHQew8Pq9w2RAOO8gMg
 9Ty4L54CsTf21Mqc6GXj6LN3WbQta7CVA0bKeq0+WnmsZ9jkTNh8lJp0/RnZkSUsDT9Tza9r
 GB0svZnBJMFJgSMfmwa3cBttCh+vqDV3ZIVSG54nPmGfUQMFPlDHccjWIvTvyY3a9SLeamaR
 jOGye8MQAlAD40fTWK2no6L1b8abGtziTkNh68zfu3wjQkXk4kA4zHroE61PpS3oMD4AyI9L
 7A4Zv0Cvs2MhYQ4Qbbmafr+NOhzuunm5CoaRi+762+c508TqgRqH8W1htZCzab0pXHRfywtv
 0P+BMT7vN2uMBdhr8c0b/hoGqBTenOmFt71tAyyGcPgI3f7DUxy+cv3GzenWjrvf3uFpxYx4
 yFQkUcu06wa61nCdxXU/BWFItryAGGdh2fFXnIYP8NZfdA+zmpymJXDQeMsAEHS0BLTVQ3+M
 7W5Ak8p9V+bFMtteBgoM23bskH6mgOAw6Cj/USW4cAJ8b++9zE0/4Bv4iaY5bcsL+h7TqQBH
 Lk1eByJeVooUa/mqa2UdVJalc8B9NrAnLiyRsg72Nurwzvknv7anSgIkL+doXDaG21DgCYTD
 wGA5uquIgb8p3/ENgYpDPrsZ72CxVC2NEJjJwwnRBStjJOGQX4lV1uhN1XsZjBbRHdKF2W9g
 weim8xU=
Organization: Red Hat
Message-ID: <2ddd9e3d-951e-1892-c941-54be80f7e6aa@redhat.com>
Date: Wed, 21 Nov 2018 11:49:54 -0500
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101
 Thunderbird/52.9.1
MIME-Version: 1.0
In-Reply-To: <1542653726-5655-8-git-send-email-longman@redhat.com>
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: 7bit
Content-Language: en-US
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.16
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16 (mx1.redhat.com [10.5.110.44]); Wed, 21 Nov 2018 16:49:57 +0000 (UTC)
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwCniUVlpfVbyMhkAA--.100S3
Authentication-Results: mail-app4; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoWxtF4DAw48Gw1rKFWfWF1kGrg_yoW3Gr1kp3
	sxKFnxKFWjvwnxJrs7Za1kZry3Gas3Wr13Ar9Iv348GFZ8XrsxGF1fKF9FvF1UXry7tF15
	AF1Yvr93A3yDAwUanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUUjbIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUmvb7Iv0xC_tr1lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Ar0_tr1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Cr0_Gr1UM28EF7xvwVC2
	z280aVAFwI0_Gr1j6F4UJwA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_Gr1j6F4UJwAS0I0E0x
	vYzxvE52x082IY62kv0487Mc02F40EFcxC0VAKzVAqx4xG6I80ewAv7VC0I7IYx2IY67AK
	xVWUGVWUXwAv7VC2z280aVAFwI0_Jr0_Gr1lOx8S6xCaFVCjc4AY6r1j6r4UM4x0Y48IcV
	AKI48JMx02cVCv0xWlc7I2V7IY0VAS07AlzVAYIcxG8wCY1x0264kExVAvwVAq07x20xyl
	c7Ca8VAvwVCFzxkY4VCF77xAMxkIecxEwVCI4VW5MxkI7II2jI8vz4vEwIxGrwCYIxAIcV
	C0I7IYx2IY67AKxVW8JVW5JwCYIxAIcVC0I7IYx2IY6xkF7I0E14v26r4j6F4UMxvI42IY
	6I8E87Iv67AKxVWxJVW8Jr1lcIIF0xvEx4A2jsIEc7CjxVAFwI0_Gr0_Gr1UMxAIw28Icx
	kI7VAKI48JMxAIw28IcVAKzI0EY4vE52x082I5MxCjnVCjjxCrMxC20s026xCaFVCjc4AY
	6r1j6r4UMI8I3I0E5I8CrVAFwI0_Jr0_Jr4lx2IqxVCjr7xvwVAFwI0_JrI_JrWlx4CE17
	CEb7AF67AKxVWUtVW8ZwCIc40Y0x0EwIxGrwCI42IY6xAIw20EY4v20xvaj40_Jr0_JF7v
	cSsGvfC2KfnxnUUI43ZEXa7IU51WlDUUUUU==

On 11/19/2018 01:55 PM, Waiman Long wrote:
> The db->lock is a raw spinlock and so the lock hold time is supposed
> to be short. This will not be the case when printk() is being involved
> in some of the critical sections. In order to avoid the long hold time,
> in case some messages need to be printed, the debug_object_is_on_stack()
> and debug_print_object() calls are now moved out of those critical
> sections.
>
> Signed-off-by: Waiman Long <longman@redhat.com>
> ---
>  lib/debugobjects.c | 61 +++++++++++++++++++++++++++++++++++++-----------------
>  1 file changed, 42 insertions(+), 19 deletions(-)
>
> diff --git a/lib/debugobjects.c b/lib/debugobjects.c
> index 403dd95..4216d3d 100644
> --- a/lib/debugobjects.c
> +++ b/lib/debugobjects.c
> @@ -376,6 +376,8 @@ static void debug_object_is_on_stack(void *addr, int onstack)
>  	struct debug_bucket *db;
>  	struct debug_obj *obj;
>  	unsigned long flags;
> +	bool debug_printobj = false;
> +	bool debug_chkstack = false;
>  
>  	fill_pool();
>  
> @@ -392,7 +394,7 @@ static void debug_object_is_on_stack(void *addr, int onstack)
>  			debug_objects_oom();
>  			return;
>  		}
> -		debug_object_is_on_stack(addr, onstack);
> +		debug_chkstack = true;
>  	}
>  
>  	switch (obj->state) {
> @@ -403,20 +405,25 @@ static void debug_object_is_on_stack(void *addr, int onstack)
>  		break;
>  
>  	case ODEBUG_STATE_ACTIVE:
> -		debug_print_object(obj, "init");
>  		state = obj->state;
>  		raw_spin_unlock_irqrestore(&db->lock, flags);
> +		debug_print_object(obj, "init");
>  		debug_object_fixup(descr->fixup_init, addr, state);
>  		return;
>  
>  	case ODEBUG_STATE_DESTROYED:
> -		debug_print_object(obj, "init");
> +		debug_printobj = true;
>  		break;
>  	default:
>  		break;
>  	}
>  
>  	raw_spin_unlock_irqrestore(&db->lock, flags);
> +	if (debug_chkstack)
> +		debug_object_is_on_stack(addr, onstack);
> +	if (debug_printobj)
> +		debug_print_object(obj, "init");
> +
>  }
>  
>  /**
> @@ -474,6 +481,8 @@ int debug_object_activate(void *addr, struct debug_obj_descr *descr)
>  
>  	obj = lookup_object(addr, db);
>  	if (obj) {
> +		bool debug_printobj = false;
> +
>  		switch (obj->state) {
>  		case ODEBUG_STATE_INIT:
>  		case ODEBUG_STATE_INACTIVE:
> @@ -482,14 +491,14 @@ int debug_object_activate(void *addr, struct debug_obj_descr *descr)
>  			break;
>  
>  		case ODEBUG_STATE_ACTIVE:
> -			debug_print_object(obj, "activate");
>  			state = obj->state;
>  			raw_spin_unlock_irqrestore(&db->lock, flags);
> +			debug_print_object(obj, "activate");
>  			ret = debug_object_fixup(descr->fixup_activate, addr, state);
>  			return ret ? 0 : -EINVAL;
>  
>  		case ODEBUG_STATE_DESTROYED:
> -			debug_print_object(obj, "activate");
> +			debug_printobj = true;
>  			ret = -EINVAL;
>  			break;
>  		default:
> @@ -497,10 +506,13 @@ int debug_object_activate(void *addr, struct debug_obj_descr *descr)
>  			break;
>  		}
>  		raw_spin_unlock_irqrestore(&db->lock, flags);
> +		if (debug_printobj)
> +			debug_print_object(obj, "activate");
>  		return ret;
>  	}
>  
>  	raw_spin_unlock_irqrestore(&db->lock, flags);
> +
>  	/*
>  	 * We are here when a static object is activated. We
>  	 * let the type specific code confirm whether this is
> @@ -532,6 +544,7 @@ void debug_object_deactivate(void *addr, struct debug_obj_descr *descr)
>  	struct debug_bucket *db;
>  	struct debug_obj *obj;
>  	unsigned long flags;
> +	bool debug_printobj = false;
>  
>  	if (!debug_objects_enabled)
>  		return;
> @@ -549,24 +562,27 @@ void debug_object_deactivate(void *addr, struct debug_obj_descr *descr)
>  			if (!obj->astate)
>  				obj->state = ODEBUG_STATE_INACTIVE;
>  			else
> -				debug_print_object(obj, "deactivate");
> +				debug_printobj = true;
>  			break;
>  
>  		case ODEBUG_STATE_DESTROYED:
> -			debug_print_object(obj, "deactivate");
> +			debug_printobj = true;
>  			break;
>  		default:
>  			break;
>  		}
> -	} else {
> +	}
> +
> +	raw_spin_unlock_irqrestore(&db->lock, flags);
> +	if (!obj) {
>  		struct debug_obj o = { .object = addr,
>  				       .state = ODEBUG_STATE_NOTAVAILABLE,
>  				       .descr = descr };
>  
>  		debug_print_object(&o, "deactivate");
> +	} else if (debug_printobj) {
> +		debug_print_object(obj, "deactivate");
>  	}
> -
> -	raw_spin_unlock_irqrestore(&db->lock, flags);
>  }
>  EXPORT_SYMBOL_GPL(debug_object_deactivate);
>  
> @@ -581,6 +597,7 @@ void debug_object_destroy(void *addr, struct debug_obj_descr *descr)
>  	struct debug_bucket *db;
>  	struct debug_obj *obj;
>  	unsigned long flags;
> +	bool debug_printobj = false;
>  
>  	if (!debug_objects_enabled)
>  		return;
> @@ -600,20 +617,22 @@ void debug_object_destroy(void *addr, struct debug_obj_descr *descr)
>  		obj->state = ODEBUG_STATE_DESTROYED;
>  		break;
>  	case ODEBUG_STATE_ACTIVE:
> -		debug_print_object(obj, "destroy");
>  		state = obj->state;
>  		raw_spin_unlock_irqrestore(&db->lock, flags);
> +		debug_print_object(obj, "destroy");
>  		debug_object_fixup(descr->fixup_destroy, addr, state);
>  		return;
>  
>  	case ODEBUG_STATE_DESTROYED:
> -		debug_print_object(obj, "destroy");
> +		debug_printobj = true;
>  		break;
>  	default:
>  		break;
>  	}
>  out_unlock:
>  	raw_spin_unlock_irqrestore(&db->lock, flags);
> +	if (debug_printobj)
> +		debug_print_object(obj, "destroy");
>  }
>  EXPORT_SYMBOL_GPL(debug_object_destroy);
>  
> @@ -642,9 +661,9 @@ void debug_object_free(void *addr, struct debug_obj_descr *descr)
>  
>  	switch (obj->state) {
>  	case ODEBUG_STATE_ACTIVE:
> -		debug_print_object(obj, "free");
>  		state = obj->state;
>  		raw_spin_unlock_irqrestore(&db->lock, flags);
> +		debug_print_object(obj, "free");
>  		debug_object_fixup(descr->fixup_free, addr, state);
>  		return;
>  	default:
> @@ -717,6 +736,7 @@ void debug_object_assert_init(void *addr, struct debug_obj_descr *descr)
>  	struct debug_bucket *db;
>  	struct debug_obj *obj;
>  	unsigned long flags;
> +	bool debug_printobj = false;
>  
>  	if (!debug_objects_enabled)
>  		return;
> @@ -732,22 +752,25 @@ void debug_object_assert_init(void *addr, struct debug_obj_descr *descr)
>  			if (obj->astate == expect)
>  				obj->astate = next;
>  			else
> -				debug_print_object(obj, "active_state");
> +				debug_printobj = true;
>  			break;
>  
>  		default:
> -			debug_print_object(obj, "active_state");
> +			debug_printobj = true;
>  			break;
>  		}
> -	} else {
> +	}
> +
> +	raw_spin_unlock_irqrestore(&db->lock, flags);
> +	if (!obj) {
>  		struct debug_obj o = { .object = addr,
>  				       .state = ODEBUG_STATE_NOTAVAILABLE,
>  				       .descr = descr };
>  
>  		debug_print_object(&o, "active_state");
> +	} else if (debug_printobj) {
> +		debug_print_object(obj, "active_state");
>  	}
> -
> -	raw_spin_unlock_irqrestore(&db->lock, flags);
>  }
>  EXPORT_SYMBOL_GPL(debug_object_active_state);
>  
> @@ -783,10 +806,10 @@ static void __debug_check_no_obj_freed(const void *address, unsigned long size)
>  
>  			switch (obj->state) {
>  			case ODEBUG_STATE_ACTIVE:
> -				debug_print_object(obj, "free");
>  				descr = obj->descr;
>  				state = obj->state;
>  				raw_spin_unlock_irqrestore(&db->lock, flags);
> +				debug_print_object(obj, "free");
>  				debug_object_fixup(descr->fixup_free,
>  						   (void *) oaddr, state);
>  				goto repeat;

As a side note, one of the test systems that I used generated a
debugobjects splat in the bootup process and the system hanged
afterward. Applying this patch alone fix the hanging problem and the
system booted up successfully. So it is not really a good idea to call
printk() while holding a raw spinlock.

Cheers,
Longman
