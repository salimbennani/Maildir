Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:47:00 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id D7629580522;
	Fri, 21 Dec 2018 00:02:58 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 21 Dec 2018 00:02:58 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AruK/XhYlFKCsQzs2osp/yvH/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpc+9bR7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTy9PDJ68?=
 =?us-ascii?q?YYURAeQOP+hYoJX6qVUBohS+HhGsCeH0xz9UhHL7x7E23v49HQzE2gErAtIAsG?=
 =?us-ascii?q?7TrNXwLKodU+e1zK/HzT7eb/xWxCr25Y/IcxAmp/GMUqh8cMTMyUQ0EgPKkEif?=
 =?us-ascii?q?qY3/MDOJyOsNsHKX4PZnVeKqkmMqrRx6rDu3xso0lIXFmoYYxkrZ+Sh33oo5P8?=
 =?us-ascii?q?C0RU1nbdK+EZZdtTmWO5ZsTs88X21ltjw2xqAHtJO1ZiQHy4kryhjCYPKdaYeI?=
 =?us-ascii?q?+AjsVOOJLDd4mn1lfLW/ig6s8Uiv1OL8TNO40FVUoSpflNnDqHQN2wbU6sidRf?=
 =?us-ascii?q?tx5kah2TCR2ADP8uxIP1w4mK7BJ5I8zLM8iIAfvVnAEyPqgkn7ja2bel0h+uey?=
 =?us-ascii?q?6uTnZrvmpoWbN49xkgz+NqUumsqiAeU3KwQOXHaU+f661LL9+U31WbJKj/Mwkq?=
 =?us-ascii?q?bHqpDXPtobpqGnDA9PyIoj6AiwDy2g0NsGmXkLNlVFeAiIj4TxIVHBPOj4Deuj?=
 =?us-ascii?q?g1SriDprw/HGPr7/DZnXIXnDjazsfbJ8605a1QoywspT55NSCrEdPv3zXlX9u8?=
 =?us-ascii?q?DfDh88Kwa02froCM1h1oMCXmKCGq+ZP7nTsV+U/O0vJPOAZI8IuDnnLfgl6OXj?=
 =?us-ascii?q?jXs4mV8bYKmo0oEbaHG+HvR6PUqZZWDgjcsGEWcPpgA+VvDliEWeUT5PYHa/R7?=
 =?us-ascii?q?gz5io7CIKhDofPXJqtj6aD3CqgGp1WZ2ZGCk2DEHvydoWEXesMZzyWIsN7jjME?=
 =?us-ascii?q?Ur2hQZc71R6yrA/616ZnLu3M9y0br53j0sJ55+nSlR4o8zx0AN+Q02WMT2Fyg2?=
 =?us-ascii?q?MJSCU63KF5oUxh1FiD1bJ0jOBfFdxW//lJSBs1NYbAz+xmDND/Qh/Occ2XSFm4?=
 =?us-ascii?q?WNmmASs+TtQqw9AQZUZxHNGijhPG3yquGLIVk72LBJop8qPTxXTxJsB9y2rY26?=
 =?us-ascii?q?kllVUpXsxPNWi+jK5l6wfTH5LJk1mel6uyaKsTxjDN+3mZwWqOpk5YVhVwXrvD?=
 =?us-ascii?q?XX0EYkvWrNL55l7NTrO0CLQnNBdBxtCGKqdQdtLpilBGTu/5ONvCe2Kxh3uwBR?=
 =?us-ascii?q?GQy7OQbYrqfmId3DndCEkEiQwT4WyKNQ8kBielomLeCjNuGEnrY0Pt9+l+tXy6?=
 =?us-ascii?q?QlU1zwGMc01uyb619gQJivybTvMZxqgEtzs5qzVoAFa92MrbBMCEpwV/c6RTf9?=
 =?us-ascii?q?M87E1c2mLEqgNyJJqgL6Nlhl4AaAl3u0Lu1xNqCoRPi8QqrXUqzBZsJqKcyl9O?=
 =?us-ascii?q?azSY3ZXoML3NNmby5Ayva7LR2lzG0NeW570D5+gip1TivAGmDEwi83p83tlR0n?=
 =?us-ascii?q?uc4IjKDQUIXZLwVEY36wZ1p7XAbiYh4IPU0GVmMbOovT/ax9IpGOwlxw66f9de?=
 =?us-ascii?q?LKyLDhXyHNAdB8S0LuwlhUKpbhMdMO9O7qE0O96peOWc2K6sOuZthzamjWVB4I?=
 =?us-ascii?q?Bg3UOA7St8SujU35kbx/GUxBeIVzD5jF25qMD4hZhEZS0OHmq40SXlBI9Rardy?=
 =?us-ascii?q?fIoREmeuPsu3y856h57sXX5Y6VGiC0kH2M+vZRqdcVj90RdM2kQQpHytgTG4wC?=
 =?us-ascii?q?BskzE1sqqf2zTDw+b4exodOW5LR25igU33IYeujNAaX0mobw43mxuj/kv6w6lb?=
 =?us-ascii?q?pKJiL2jcW0tIfi72L318Xau0rLaNf8lP6JYwuyVNTOu8eUyaSqL6oxYC0yLsBW?=
 =?us-ascii?q?xeyCo5dzGrvJX0hBh6iGObLHZuo3vVY8BwxRHD5NPCQf5dxCYJRC59iTPPHFiz?=
 =?us-ascii?q?I8Gp/cmIl5fEqu2+VHiuVpxJfSnr0IOPri275WJxDB27nvCznMDnEAcg3S/60d?=
 =?us-ascii?q?lqSTvHrBLmbob30KS6NPptflN0C1/k98p6BoZ+n5M1hJER2ngVnI+Z/HQZnmfo?=
 =?us-ascii?q?LdVUx7j+Y2ETSj4RzN7Y+wzl2ExlLnKUyIP1THSdws19Z9akZmMawD4y78dPCK?=
 =?us-ascii?q?2M9rxLgTN1okakrQLWefV9gjAdyf405H8bme4Jvhctzj6GArATBkRYOS3slxKV?=
 =?us-ascii?q?79GxtqlXZWCvcaSu20p6h9yuELaCogREUnbjZpgiBTNw7tl4MF/Uy3L88IbkeN?=
 =?us-ascii?q?3Nbd4Jsh2UjgzNj+xUKJI3i/oLijBrOWP7vX051eE7iQZi0o29vIiCM29t5r62?=
 =?us-ascii?q?AgZENj3pYMMe4jPtgrxbnsmIxICjBIlhFi8IXJv1TvKoDTQSuu78NwuVFD08q3?=
 =?us-ascii?q?GbGafQHAOF6UdmqW7PHI6vN32NOHYZytBiTgGHJENDmAAUQCk6npkhGwGqw8zh?=
 =?us-ascii?q?bV555i0L6V7+sBdM0eVoNx/wUmrEoAeoazE0SIWQLRZM7wFC4VvVPtKa7u5pAy?=
 =?us-ascii?q?5Y+ZihphSXKmOHfwRIEX0JWkucClDjILau5NrA8+uZBuakLPvOe7KOqeNAWPeS?=
 =?us-ascii?q?2JKvyZBr/zKNNsWJI3ljAOc32ktFXXBlBcvZny8DRDAQlyLId8Sbvguz+jVrrs?=
 =?us-ascii?q?Cj9/TmQBjg5ZaUBLtIL9pu+wq6gaOCN+OLgCZ5KDBY1o4DxHPSybgf2kIShD9q?=
 =?us-ascii?q?dzW3DbsAsivNRrrKmqBLFx4bdz9zNMxQ4qIg3wlNPNTXhc/v2rFkjv46FVFFWE?=
 =?us-ascii?q?flmsGoY8wKPm68OEnGBEaNKLSJOznLz9vrbqO7TL1alP9UuAGouTaHD0/jOSyO?=
 =?us-ascii?q?ljnzWBCpNOFMjSebMwRfuYG9aBltD2fjQcniah26Nt93kDI3zac1hnPMKW4TLz?=
 =?us-ascii?q?x8f1lRob2X6CMLysl4TkpA5X1hJPLMsSGY5OnRNt5CveFqBCd/nv5y63QgzL5U?=
 =?us-ascii?q?8SQCQ+Z6znj8tNlr9mChlObH9ScvBAtJrDkNm5+juEhuOKzF+5oGUnHBqkFepV?=
 =?us-ascii?q?6MAggH8oM2QubkvLpdn52WzPr+?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AMAQCTnRxch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBZYNsJ4N9lBWCDRSZQRIYEwGHLiI4EgEDAQEBAQEBAgETAQEBCA0JCCkvgjo?=
 =?us-ascii?q?pAYJmAQEBAQIBAQIgBFIGCQEBCg4KAgImAgIDVAYOBQWDHYF6BwEFpk98M4o2g?=
 =?us-ascii?q?QuLNIFXP4ERgxKICYJXAotChBpJNpBjBwINghyPVQoCgVSIK4dUilaPPYFdgXd?=
 =?us-ascii?q?wUIJsgicXjioyAQExgQUBAYtNK4IgAQE?=
X-IPAS-Result: =?us-ascii?q?A0AMAQCTnRxch0O0hNFkHAEBAQQBAQcEAQGBZYNsJ4N9lBW?=
 =?us-ascii?q?CDRSZQRIYEwGHLiI4EgEDAQEBAQEBAgETAQEBCA0JCCkvgjopAYJmAQEBAQIBA?=
 =?us-ascii?q?QIgBFIGCQEBCg4KAgImAgIDVAYOBQWDHYF6BwEFpk98M4o2gQuLNIFXP4ERgxK?=
 =?us-ascii?q?ICYJXAotChBpJNpBjBwINghyPVQoCgVSIK4dUilaPPYFdgXdwUIJsgicXjioyA?=
 =?us-ascii?q?QExgQUBAYtNK4IgAQE?=
X-IronPort-AV: E=Sophos;i="5.56,380,1539673200"; 
   d="scan'208";a="56824342"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 21 Dec 2018 00:02:57 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1732149AbeLUICy (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Fri, 21 Dec 2018 03:02:54 -0500
Received: from mailgw02.mediatek.com ([1.203.163.81]:17493 "EHLO
        mailgw02.mediatek.com" rhost-flags-OK-FAIL-OK-FAIL) by vger.kernel.org
        with ESMTP id S1729898AbeLUICy (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 21 Dec 2018 03:02:54 -0500
X-UUID: c75210cfc2a545278c3b179d8321df86-20181221
X-UUID: c75210cfc2a545278c3b179d8321df86-20181221
Received: from mtkcas36.mediatek.inc [(172.27.4.250)] by mailgw02.mediatek.com
        (envelope-from <yong.wu@mediatek.com>)
        (mailgw01.mediatek.com ESMTP with TLS)
        with ESMTP id 366411924; Fri, 21 Dec 2018 16:02:41 +0800
Received: from MTKCAS36.mediatek.inc (172.27.4.186) by MTKMBS31N2.mediatek.inc
 (172.27.4.87) with Microsoft SMTP Server (TLS) id 15.0.1395.4; Fri, 21 Dec
 2018 16:02:39 +0800
Received: from [10.17.3.153] (10.17.3.153) by MTKCAS36.mediatek.inc
 (172.27.4.170) with Microsoft SMTP Server id 15.0.1395.4 via Frontend
 Transport; Fri, 21 Dec 2018 16:02:38 +0800
Message-ID: <1545379358.29587.51.camel@mhfsdcap03>
Subject: Re: [PATCH v4 10/18] iommu/mediatek: Add mt8183 IOMMU support
From: Yong Wu <yong.wu@mediatek.com>
To: Nicolas Boichat <drinkcat@chromium.org>
CC: Joerg Roedel <joro@8bytes.org>,
        Matthias Brugger <matthias.bgg@gmail.com>,
        Robin Murphy <robin.murphy@arm.com>,
        Rob Herring <robh+dt@kernel.org>,
        Tomasz Figa <tfiga@google.com>,
        Will Deacon <will.deacon@arm.com>,
        <linux-mediatek@lists.infradead.org>,
        <srv_heupstream@mediatek.com>, <devicetree@vger.kernel.org>,
        lkml <linux-kernel@vger.kernel.org>,
        linux-arm Mailing List <linux-arm-kernel@lists.infradead.org>,
        <iommu@lists.linux-foundation.org>, <arnd@arndb.de>,
        <yingjoe.chen@mediatek.com>, <youlin.pei@mediatek.com>,
        "Arvind Yadav" <arvind.yadav.cs@gmail.com>
Date: Fri, 21 Dec 2018 16:02:38 +0800
In-Reply-To: <CANMq1KBMWM8BhMDJo1paVbToibsZGYVOCWBOua81w7fnTCO-bw@mail.gmail.com>
References: <1544258371-4600-1-git-send-email-yong.wu@mediatek.com>
         <1544258371-4600-11-git-send-email-yong.wu@mediatek.com>
         <CANMq1KBMWM8BhMDJo1paVbToibsZGYVOCWBOua81w7fnTCO-bw@mail.gmail.com>
Content-Type: text/plain; charset="UTF-8"
X-Mailer: Evolution 3.2.3-0ubuntu6 
Content-Transfer-Encoding: 7bit
MIME-Version: 1.0
X-MTK: N
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Fri, 2018-12-21 at 12:43 +0800, Nicolas Boichat wrote:
> On Sat, Dec 8, 2018 at 4:42 PM Yong Wu <yong.wu@mediatek.com> wrote:
> >
> > The M4U IP blocks in mt8183 is MediaTek's generation2 M4U which use
> > the ARM Short-descriptor like mt8173, and most of the HW registers
> > are the same.
> >
> > Here list main differences between mt8183 and mt8173/mt2712:
> > 1) mt8183 has only one M4U HW like mt8173 while mt2712 has two.
> > 2) mt8183 don't have the "bclk" clock, it use the EMI clock instead.
> > 3) mt8183 can support the dram over 4GB, but it doesn't call this "4GB
> > mode".
> > 4) mt8183 pgtable base register(0x0) extend bit[1:0] which represent
> > the bit[33:32] in the physical address of the pgtable base, But the
> > standard ttbr0[1] means the S bit which is enabled defaultly, Hence,
> > we add a mask.
> > 5) mt8183 HW has a GALS modules, SMI should enable "has_gals" support.
> > 6) the larb-id in smi-common is remapped. M4U should enable
> > larbid_remapped support.
> >
> > Signed-off-by: Yong Wu <yong.wu@mediatek.com>
> > ---
> >  drivers/iommu/mtk_iommu.c | 31 ++++++++++++++++++++++---------
> >  drivers/iommu/mtk_iommu.h |  1 +
> >  drivers/memory/mtk-smi.c  | 19 +++++++++++++++++++
> >  3 files changed, 42 insertions(+), 9 deletions(-)
> >
> > diff --git a/drivers/iommu/mtk_iommu.c b/drivers/iommu/mtk_iommu.c
> > index 8ab3b69..d91a554 100644
> > --- a/drivers/iommu/mtk_iommu.c
> > +++ b/drivers/iommu/mtk_iommu.c
> > @@ -36,6 +36,7 @@
> >  #include "mtk_iommu.h"
> >
> >  #define REG_MMU_PT_BASE_ADDR                   0x000
> > +#define MMU_PT_ADDR_MASK                       GENMASK(31, 7)
> >
> >  #define REG_MMU_INVALIDATE                     0x020
> >  #define F_ALL_INVLD                            0x2
> > @@ -54,7 +55,7 @@
> >  #define REG_MMU_CTRL_REG                       0x110
> >  #define F_MMU_PREFETCH_RT_REPLACE_MOD          BIT(4)
> >  #define F_MMU_TF_PROTECT_SEL_SHIFT(data) \
> > -       ((data)->plat_data->m4u_plat == M4U_MT2712 ? 4 : 5)
> > +       ((data)->plat_data->m4u_plat == M4U_MT8173 ? 5 : 4)
> 
> Should the shift value be a member of plat_data instead?

It's also ok.
This TF_PROTECT_SEL MACRO looks a bit complex. I can use a new patch to
refactor it.

> 
> >  /* It's named by F_MMU_TF_PROT_SEL in mt2712. */
> >  #define F_MMU_TF_PROTECT_SEL(prot, data) \
> >         (((prot) & 0x3) << F_MMU_TF_PROTECT_SEL_SHIFT(data))
> > @@ -347,7 +348,7 @@ static int mtk_iommu_attach_device(struct iommu_domain *domain,
> >         /* Update the pgtable base address register of the M4U HW */
> >         if (!data->m4u_dom) {
> >                 data->m4u_dom = dom;
> > -               writel(dom->cfg.arm_v7s_cfg.ttbr[0],
> > +               writel(dom->cfg.arm_v7s_cfg.ttbr[0] & MMU_PT_ADDR_MASK,
> >                        data->base + REG_MMU_PT_BASE_ADDR);
> >         }
> >
> > @@ -510,6 +511,7 @@ static int mtk_iommu_of_xlate(struct device *dev, struct of_phandle_args *args)
> >
> >  static int mtk_iommu_hw_init(const struct mtk_iommu_data *data)
> >  {
> > +       enum mtk_iommu_plat m4u_plat = data->plat_data->m4u_plat;
> >         u32 regval;
> >         int ret;
> >
> > @@ -520,7 +522,7 @@ static int mtk_iommu_hw_init(const struct mtk_iommu_data *data)
> >         }
> >
> >         regval = F_MMU_TF_PROTECT_SEL(2, data);
> > -       if (data->plat_data->m4u_plat == M4U_MT8173)
> > +       if (m4u_plat == M4U_MT8173)
> >                 regval |= F_MMU_PREFETCH_RT_REPLACE_MOD;
> >         writel_relaxed(regval, data->base + REG_MMU_CTRL_REG);
> >
> > @@ -541,14 +543,14 @@ static int mtk_iommu_hw_init(const struct mtk_iommu_data *data)
> >                 F_INT_PRETETCH_TRANSATION_FIFO_FAULT;
> >         writel_relaxed(regval, data->base + REG_MMU_INT_MAIN_CONTROL);
> >
> > -       if (data->plat_data->m4u_plat == M4U_MT8173)
> > +       if (m4u_plat == M4U_MT8173)
> >                 regval = (data->protect_base >> 1) | (data->enable_4GB << 31);
> >         else
> >                 regval = lower_32_bits(data->protect_base) |
> >                          upper_32_bits(data->protect_base);
> >         writel_relaxed(regval, data->base + REG_MMU_IVRP_PADDR);
> >
> > -       if (data->enable_4GB && data->plat_data->m4u_plat != M4U_MT8173) {
> > +       if (data->enable_4GB && m4u_plat == M4U_MT2712) {
> >                 /*
> >                  * If 4GB mode is enabled, the validate PA range is from
> >                  * 0x1_0000_0000 to 0x1_ffff_ffff. here record bit[32:30].
> > @@ -558,8 +560,11 @@ static int mtk_iommu_hw_init(const struct mtk_iommu_data *data)
> >         }
> >         writel_relaxed(0, data->base + REG_MMU_DCM_DIS);
> >
> > -       /* It's MISC control register whose default value is ok except mt8173.*/
> > -       if (data->plat_data->m4u_plat == M4U_MT8173)
> > +       /*
> > +        * It's MISC control register whose default value is ok
> > +        * except mt8173 and mt8183.
> > +        */
> > +       if (m4u_plat == M4U_MT8173 || m4u_plat == M4U_MT8183)
> 
> Again, should this be a field in plat_data?

In mt8173 and mt8183, 0x48 is REG_MMU_STANDARD_AXI_MODE while it's
MMU_MISC_CTRL which contain this STANDARD_AXI_MODE bit and some other
bits in the other SoCs.

The register name and meaning are not the same. I guess I can not use a
value like reg_0x48 in plat_data. I'd like to keep the current way. is
it ok?

> 
> >                 writel_relaxed(0, data->base + REG_MMU_STANDARD_AXI_MODE);
> >
> >         if (devm_request_irq(data->dev, data->irq, mtk_iommu_isr, 0,
> > @@ -713,6 +718,7 @@ static int __maybe_unused mtk_iommu_resume(struct device *dev)
> >  {
> >         struct mtk_iommu_data *data = dev_get_drvdata(dev);
> >         struct mtk_iommu_suspend_reg *reg = &data->reg;
> > +       struct mtk_iommu_domain *m4u_dom = data->m4u_dom;
> >         void __iomem *base = data->base;
> >         int ret;
> >
> > @@ -728,8 +734,8 @@ static int __maybe_unused mtk_iommu_resume(struct device *dev)
> >         writel_relaxed(reg->int_control0, base + REG_MMU_INT_CONTROL0);
> >         writel_relaxed(reg->int_main_control, base + REG_MMU_INT_MAIN_CONTROL);
> >         writel_relaxed(reg->ivrp_paddr, base + REG_MMU_IVRP_PADDR);
> > -       if (data->m4u_dom)
> > -               writel(data->m4u_dom->cfg.arm_v7s_cfg.ttbr[0],
> > +       if (m4u_dom)
> > +               writel(m4u_dom->cfg.arm_v7s_cfg.ttbr[0] & MMU_PT_ADDR_MASK,
> >                        base + REG_MMU_PT_BASE_ADDR);
> >         return 0;
> >  }
> > @@ -750,9 +756,16 @@ static int __maybe_unused mtk_iommu_resume(struct device *dev)
> >         .has_bclk     = true,
> >  };
> >
> > +static const struct mtk_iommu_plat_data mt8183_data = {
> > +       .m4u_plat            = M4U_MT8183,
> > +       .larbid_remap_enable = true,
> > +       .larbid_remapped     = {0, 4, 5, 6, 7, 2, 3, 1},
> > +};
> > +
> >  static const struct of_device_id mtk_iommu_of_ids[] = {
> >         { .compatible = "mediatek,mt2712-m4u", .data = &mt2712_data},
> >         { .compatible = "mediatek,mt8173-m4u", .data = &mt8173_data},
> > +       { .compatible = "mediatek,mt8183-m4u", .data = &mt8183_data},
> >         {}
> >  };
> >
> > diff --git a/drivers/iommu/mtk_iommu.h b/drivers/iommu/mtk_iommu.h
> > index 3877050..6385dec 100644
> > --- a/drivers/iommu/mtk_iommu.h
> > +++ b/drivers/iommu/mtk_iommu.h
> > @@ -39,6 +39,7 @@ enum mtk_iommu_plat {
> >         M4U_MT2701,
> >         M4U_MT2712,
> >         M4U_MT8173,
> > +       M4U_MT8183,
> >  };
> >
> >  struct mtk_iommu_plat_data {
> > diff --git a/drivers/memory/mtk-smi.c b/drivers/memory/mtk-smi.c
> > index 3720c77..bced778 100644
> > --- a/drivers/memory/mtk-smi.c
> > +++ b/drivers/memory/mtk-smi.c
> > @@ -285,6 +285,12 @@ static void mtk_smi_larb_config_port_gen1(struct device *dev)
> >         .larb_special_mask = BIT(8) | BIT(9),          /* bdpsys */
> >  };
> >
> > +static const struct mtk_smi_larb_gen mtk_smi_larb_mt8183 = {
> > +       .has_gals          = true,
> > +       .config_port       = mtk_smi_larb_config_port_gen2_general,
> > +       .larb_special_mask = BIT(2) | BIT(3) | BIT(7), /* IPU0 | IPU1 | CCU */
> > +};
> > +
> >  static const struct of_device_id mtk_smi_larb_of_ids[] = {
> >         {
> >                 .compatible = "mediatek,mt8173-smi-larb",
> > @@ -298,6 +304,10 @@ static void mtk_smi_larb_config_port_gen1(struct device *dev)
> >                 .compatible = "mediatek,mt2712-smi-larb",
> >                 .data = &mtk_smi_larb_mt2712
> >         },
> > +       {
> > +               .compatible = "mediatek,mt8183-smi-larb",
> > +               .data = &mtk_smi_larb_mt8183
> > +       },
> >         {}
> >  };
> >
> > @@ -391,6 +401,11 @@ static int mtk_smi_larb_remove(struct platform_device *pdev)
> >         .gen = MTK_SMI_GEN2,
> >  };
> >
> > +static const struct mtk_smi_common_plat mtk_smi_common_mt8183 = {
> > +       .gen      = MTK_SMI_GEN2,
> > +       .has_gals = true,
> > +};
> > +
> >  static const struct of_device_id mtk_smi_common_of_ids[] = {
> >         {
> >                 .compatible = "mediatek,mt8173-smi-common",
> > @@ -404,6 +419,10 @@ static int mtk_smi_larb_remove(struct platform_device *pdev)
> >                 .compatible = "mediatek,mt2712-smi-common",
> >                 .data = &mtk_smi_common_gen2,
> >         },
> > +       {
> > +               .compatible = "mediatek,mt8183-smi-common",
> > +               .data = &mtk_smi_common_mt8183,
> > +       },
> >         {}
> >  };
> >
> > --
> > 1.9.1
> >


