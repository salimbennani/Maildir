Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 21:31:15 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 15A525805F0;
	Tue, 18 Dec 2018 23:23:31 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by fmsmga002-1.fm.intel.com with ESMTP; 18 Dec 2018 23:23:30 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AbE3T8hXSepzWCF+rrHa9YudZ3bfV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhCCuqdThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGo2y?=
 =?us-ascii?q?YYsRAeQcPuhYoYbyqEcTohS8CwasH/vvxz1Ti3/qwaE3yfgtHR3c0QA+Gd8FrX?=
 =?us-ascii?q?TarM/yNKcXSe271KjIwinDb/NR3Tfy8pPIeQ0mr/6QQLl+cNfRyUg1Fwzbk16d?=
 =?us-ascii?q?rpHqMC2P1ugXs2iU8fBgVfi0hm4nrAFxrCKvyt02hYnVn48YzE3P+yZhwIstO9?=
 =?us-ascii?q?G0VEp2bcS5HJZeqS2WLZZ6T8A+T21yuSs3yKUKtYO5cSUJ0pgr2gPTZvydf4SW?=
 =?us-ascii?q?7R/vSvydLDd8iX9jZbmxnQy98VK6xe35TsS00EhFri5CktTUqHAN2ALc6tKdRv?=
 =?us-ascii?q?t+4EihwzCP2B7X6u1eJkA0j6XbJ4Ygwr42iJUTrVzOEjHqlEjylqOaa0sp9vay?=
 =?us-ascii?q?5+j6YbjquoWQOo52hw3mN6QhgM2/AeA2MggUWGib/Pyx1Lni/U3/XbVLgeQ6kq?=
 =?us-ascii?q?rHv5DAI8QUuKq5DxZS0oct7RawES2m3c8GnXkIMl1FYgiLj4v3NFHUJvD3E/O/?=
 =?us-ascii?q?j06rkDdxyPDKJqfhDYnVLnjfjLfheq5w60pdyAow099T/Z1VCqwaLfL3W0/xss?=
 =?us-ascii?q?HYDxAjPwy1xebnFMty1ocEVW2TBa+ZNbvYsUWU6eI3P+mMeIgVtS79K/c/5v7u?=
 =?us-ascii?q?kWU2mVgHcampwJsYcna4Hvt9LkWdYHrshMoBEGgQsgo/SuzqlEONUTpJa3muWK?=
 =?us-ascii?q?I84ykxCJi6AofbWoCtnLuB0T+5Hp1ReG9KEFOMEXDud4WCXPcBcyaSIs5nkjwZ?=
 =?us-ascii?q?WrmtUY4h1ReytADkz7prNPbb+iodtZj7zth6+/XTlQ0u9TxzF8mSyXqNT2Fznm?=
 =?us-ascii?q?MLXTM2xrpwoU5mx1eH0Kh4heFYFNNJ6/NIVAc6KYDTz+hgB9/uXQLBe8+DSEy6?=
 =?us-ascii?q?TdW+HTExUtUxzscNY0lnHdWulBTD3yuwDL8TmLyGH5g08qPa33jsKMdx0XfG1K?=
 =?us-ascii?q?89j1Y4RstDL3Gphql69wLLHY7Gj12Zl7q2daQbxCPC6X2MzXSQs01CUA5/S6PF?=
 =?us-ascii?q?XWsBaUvQqtj54kDCT7qqCbk8NgtByMiCKrZFa9HzjFVGQuvjN8raY26rh2iwAh?=
 =?us-ascii?q?OIzKuWbIX2Y2UdwDndCE8cng8O53mGKxYxCj2ho23ECjxuDkzgY0X3/Ol6qXO7?=
 =?us-ascii?q?SFI0zg6QY01g0bq15gAahfiGR/wP2bIEvT8rqy9oE1alw9LWF92AqhJ9fKVdZN?=
 =?us-ascii?q?M950tH1WLZtgBnIpysNadihkQacwR2uUPu2A56CoFBkcgssXMrwxB+KaOe0FNd?=
 =?us-ascii?q?aTyY2Yr8NaHQKmn35BqvcbLZ2knC0NaK/acC8O43q1H9swCmCEUj829r3MJI03?=
 =?us-ascii?q?SB/JrKCgkSUZXvUkss8xh6prfaYjQy5o/O1H1sN7W0vSHG294zGOQlzROgdc9F?=
 =?us-ascii?q?MKyYDA/yD9EaB8+2Je0qhlildA4LMPpT9a40JcymcfSG1bWvPOZhmjKmkGtG7J?=
 =?us-ascii?q?p80kKK6ypzVOrI04wZzPGf2wuNTy38g0u5ssDrhYBEYikfHnC+ySf4HoFRfLB9?=
 =?us-ascii?q?fYERBWeoPcK33NR+i4fxVHFC8F6sGk0J2NWueRqUdFH92QxQ1UIKoX2ogye4zj?=
 =?us-ascii?q?p0ky03oaqbxiDB3+PidB8fMG5RWGZilUvsIZSzj90CXEmobhIllRu/6Ubh2qhb?=
 =?us-ascii?q?or9yL23SQUdOYij3IHtuUqq2trqefcFP7IkkvjlQUOS5eVqaUKLyowMG0yP/GG?=
 =?us-ascii?q?tT3DI7eCuwupX6nBx6j3iRLG1po3raesFwxBHf68LaRfNK2joGRS94iSTYB1Sm?=
 =?us-ascii?q?Ptmp+8mUmInHsuykS22hUZhTezHxzYycrCu7+XFqARqnkvGzgNLnFhI20S3619?=
 =?us-ascii?q?lsTijIqBf8Yo/216W1K+5nf09oBEPi5Mp+AI1xjowwhJQI03gAmpqV5WYHkXv0?=
 =?us-ascii?q?MdhD2qLxdnsNSSQLw97I+gfl3kJjI2mNx4L4UHWd38Rga8O7YmMQxiIy8cRKBL?=
 =?us-ascii?q?2I47xDmCt/ukC4oh7JYfhhgjcdzuMj6Hsbg+EKogUh1CucDa4JHUlEIyPsjQ+H?=
 =?us-ascii?q?4M6krKVYf2uvdbmw1ExjndGuFr2CowdcWGrndZcmByN/8sJ/MFfU2n3p9o7kYM?=
 =?us-ascii?q?XQbc4UthCMjxfAiO1VJIgwl/UQgypnJHn9vWYky+MgiRxu3Je6vJWIKml3/aK5?=
 =?us-ascii?q?BAJYOSPxZ88J5j7tiqNelN6M34+zBpVhBikLXJzwQP2zCj0SsvDnNxuUHD04t3?=
 =?us-ascii?q?eWAr7fHQ6Z6Ed7oHPDCZGrN3eLJHYHydVuXgWSJEtagAoMRjU1goY5Fhy2xMzm?=
 =?us-ascii?q?aEp55Coe5lvmpRtX0O5oKwPzUmTCpAerdzc0ToKQLAFN4wFG5kfVN9Ge7+1pEy?=
 =?us-ascii?q?FZ+J2hsBKCKmiBawtUCmEJX1SOB0r/Mbm2+dnA7++YC/K+LvvJfLWOsPFeWO2O?=
 =?us-ascii?q?xZ61yYtm+DCMNsqUM3lmDv073FdDXH9jF8TYnTUPVzIYlybXY8GHoxe8/zV9rt?=
 =?us-ascii?q?qj//TzRALv+YyPBqNSMdpx+hC2gqSDN++KiCZ6MzZY0ZwMymHSyLgCx14fkCVu?=
 =?us-ascii?q?dzirEbQdui/BVqPQmqlLDxEFbyN/LtdH76U53gNVI87Ulsv11qJkjv4yE1pKT0?=
 =?us-ascii?q?HhldqzZcMUI2CxLlfHBEeQObSCJD3Lxdz3YKymRb1RiuVUqwO/uTKBH0D/OTSD?=
 =?us-ascii?q?kiHjVwqzPuFUkCGbIBtetZmhchZsDGjvVs7pZgenP993kzI2x6Y5hnfLNW4aLD?=
 =?us-ascii?q?h9fFlBrryW7SNEnPp/H3ZN4WZiLemBgyyZ9fXXKo4Ksft3BSR5j+Jb7248y7tQ?=
 =?us-ascii?q?7SFEQuR6mSrSrtF0pVGmnfKCyj5mUBpItzZKi5iHvURkOaXF6JZAXWzI8w4K7W?=
 =?us-ascii?q?WVWFw2oI5HDdCng61KwdjCj+qnKjBP28rZ58AcCtOSI8WCZikPKx3sTRjVBwsC?=
 =?us-ascii?q?STewfUTUz2NAkeufvimZo4J8qpX2grIOTbFBElUpQKBJQn95FcAPdc8kFggvlq?=
 =?us-ascii?q?SW2YtRvSKz?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAACW8Blch0O0hNFkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGDayeMFot8UgaBNRSXSIFzLRMBhygiNAkNAQMBAQE?=
 =?us-ascii?q?BAQECARMBAQEKCwkIKS+CNiQBgmEBAQEBAgEBAiQTPwUBCQEBChgJExIDDAUYM?=
 =?us-ascii?q?RMFgx2BdQUIBAGnPjOKMYw/gQ+BB4ERghR+iDqCJgKJSJdnBwKBFpA/DBiBXYU?=
 =?us-ascii?q?filqbQoIOTYNfgicXjh4+M4EFAQGNYAEB?=
X-IPAS-Result: =?us-ascii?q?A0ABAACW8Blch0O0hNFkGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGDayeMFot8UgaBNRSXSIFzLRMBhygiNAkNAQMBAQEBAQECARMBAQEKC?=
 =?us-ascii?q?wkIKS+CNiQBgmEBAQEBAgEBAiQTPwUBCQEBChgJExIDDAUYMRMFgx2BdQUIBAG?=
 =?us-ascii?q?nPjOKMYw/gQ+BB4ERghR+iDqCJgKJSJdnBwKBFpA/DBiBXYUfilqbQoIOTYNfg?=
 =?us-ascii?q?icXjh4+M4EFAQGNYAEB?=
X-IronPort-AV: E=Sophos;i="5.56,371,1539673200"; 
   d="scan'208";a="58082190"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 18 Dec 2018 23:23:28 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728022AbeLSHW6 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 19 Dec 2018 02:22:58 -0500
Received: from 178.115.242.59.static.drei.at ([178.115.242.59]:56945 "EHLO
        mail.osadl.at" rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1725294AbeLSHW6 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 19 Dec 2018 02:22:58 -0500
Received: by mail.osadl.at (Postfix, from userid 1001)
        id 7B8655C2288; Wed, 19 Dec 2018 08:22:50 +0100 (CET)
Date: Wed, 19 Dec 2018 08:22:50 +0100
From: Nicholas Mc Guire <der.herr@hofr.at>
To: Joe Perches <joe@perches.com>
Cc: Nicholas Mc Guire <hofrat@osadl.org>,
        Steve French <sfrench@samba.org>, linux-cifs@vger.kernel.org,
        samba-technical@lists.samba.org, linux-kernel@vger.kernel.org
Subject: Re: [PATCH] cifs: check kzalloc return
Message-ID: <20181219072250.GA18501@osadl.at>
References: <1545150439-26055-1-git-send-email-hofrat@osadl.org>
 <4db484684a6e9b096c7fdf57673fd208d1c4005a.camel@perches.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <4db484684a6e9b096c7fdf57673fd208d1c4005a.camel@perches.com>
User-Agent: Mutt/1.5.23 (2014-03-12)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Tue, Dec 18, 2018 at 09:33:58AM -0800, Joe Perches wrote:
> On Tue, 2018-12-18 at 17:27 +0100, Nicholas Mc Guire wrote:
> > kzalloc can return NULL so a check is needed. While there is a
> > check for ret_buf there is no check for the allocation of
> > ret_buf->crfid.fid - this check is thus added. Both call-sites
> > of tconInfoAlloc() check for NULL return of tconInfoAlloc()
> > so returning NULL on failure of kzalloc() here seems appropriate.
> > As the kzalloc() is the only thing here that can fail it is
> > moved to the beginning so as not to initialize other resources
> > on failure of kzalloc.
> > 
> > Signed-off-by: Nicholas Mc Guire <hofrat@osadl.org>
> > Fixes: 3d4ef9a15343 ("smb3: fix redundant opens on root")
> > ---
> > 
> > Problem located with an experimental coccinelle script
> > 
> > While at it make checkpatch happy by using *ret_buf->crfid.fid
> > rather than struct cifs_fid.
> > 
> > Patch was compile tested with: x86_64_defconfig + CIFS=m
> > (with some unrelated smatch warnings and some pending cocci fixes)
> > 
> > Patch is against v4.20-rc7 (localversion-next is next-20181218)
> []
> > diff --git a/fs/cifs/misc.c b/fs/cifs/misc.c
> []
> > @@ -113,6 +113,13 @@ tconInfoAlloc(void)
> >  	struct cifs_tcon *ret_buf;
> >  	ret_buf = kzalloc(sizeof(struct cifs_tcon), GFP_KERNEL);
> >  	if (ret_buf) {
> > +		ret_buf->crfid.fid = kzalloc(sizeof(*ret_buf->crfid.fid),
> > +					     GFP_KERNEL);
> > +		if (!ret_buf->crfid.fid) {
> > +			kfree(ret_buf);
> > +			return NULL;
> > +		}
> > +
> >  		atomic_inc(&tconInfoAllocCount);
> >  		ret_buf->tidStatus = CifsNew;
> >  		++ret_buf->tc_count;
> > @@ -120,8 +127,6 @@ tconInfoAlloc(void)
> >  		INIT_LIST_HEAD(&ret_buf->tcon_list);
> >  		spin_lock_init(&ret_buf->open_file_lock);
> >  		mutex_init(&ret_buf->crfid.fid_mutex);
> > -		ret_buf->crfid.fid = kzalloc(sizeof(struct cifs_fid),
> > -					     GFP_KERNEL);
> >  		spin_lock_init(&ret_buf->stat_lock);
> >  		atomic_set(&ret_buf->num_local_opens, 0);
> >  		atomic_set(&ret_buf->num_remote_opens, 0);
> 
> Perhaps use a more common style by returning early on the
> first possible failure too so the block can be unindented.
>

yup the restructured cleanup would be the better way to go

rather than making this two patches I guess it would be the
best to just skip the intermediate kzalloc only cleanup -
atleast I see little value in that intermediat step - so
could you take care of the kzalloc() in your refactoring 
please ?

thx!
hofrat
 
> Maybe as a separate cleanup patch.
> ---
>  fs/cifs/misc.c | 34 ++++++++++++++++++++--------------
>  1 file changed, 20 insertions(+), 14 deletions(-)
> 
> diff --git a/fs/cifs/misc.c b/fs/cifs/misc.c
> index 113980dba4d8..bee203055b30 100644
> --- a/fs/cifs/misc.c
> +++ b/fs/cifs/misc.c
> @@ -111,21 +111,27 @@ struct cifs_tcon *
>  tconInfoAlloc(void)
>  {
>  	struct cifs_tcon *ret_buf;
> -	ret_buf = kzalloc(sizeof(struct cifs_tcon), GFP_KERNEL);
> -	if (ret_buf) {
> -		atomic_inc(&tconInfoAllocCount);
> -		ret_buf->tidStatus = CifsNew;
> -		++ret_buf->tc_count;
> -		INIT_LIST_HEAD(&ret_buf->openFileList);
> -		INIT_LIST_HEAD(&ret_buf->tcon_list);
> -		spin_lock_init(&ret_buf->open_file_lock);
> -		mutex_init(&ret_buf->crfid.fid_mutex);
> -		ret_buf->crfid.fid = kzalloc(sizeof(struct cifs_fid),
> -					     GFP_KERNEL);
> -		spin_lock_init(&ret_buf->stat_lock);
> -		atomic_set(&ret_buf->num_local_opens, 0);
> -		atomic_set(&ret_buf->num_remote_opens, 0);
> +
> +	ret_buf = kzalloc(sizeof(*ret_buf), GFP_KERNEL);
> +	if (!ret_buf)
> +		return NULL;
> +	ret_buf->crfid.fid = kzalloc(sizeof(*ret_buf->crfid.fid), GFP_KERNEL);
> +	if (!ret_buf->crfid.fid) {
> +		kfree(ret_buf);
> +		return NULL;
>  	}
> +
> +	atomic_inc(&tconInfoAllocCount);
> +	ret_buf->tidStatus = CifsNew;
> +	++ret_buf->tc_count;
> +	INIT_LIST_HEAD(&ret_buf->openFileList);
> +	INIT_LIST_HEAD(&ret_buf->tcon_list);
> +	spin_lock_init(&ret_buf->open_file_lock);
> +	mutex_init(&ret_buf->crfid.fid_mutex);
> +	spin_lock_init(&ret_buf->stat_lock);
> +	atomic_set(&ret_buf->num_local_opens, 0);
> +	atomic_set(&ret_buf->num_remote_opens, 0);
> +
>  	return ret_buf;
>  }
>  
> 
