Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 12:42:31 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 8E5915805CF;
	Tue, 18 Dec 2018 20:24:35 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 18 Dec 2018 20:24:34 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ACDTFDxN3JCx7yrfvqAwl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KPjzrsbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRsleVyJDDY28?=
 =?us-ascii?q?YYUBDPcPM/hEoInmv1sDrwCzBQywCO710DJEmmP60K883u88EQ/GxgsgH9cWvX?=
 =?us-ascii?q?rJsNX6KrkSXv6ox6fI1zXMcfVW1iv96IPVdR0huvSMXbxqccXPz0kgCwPFg06f?=
 =?us-ascii?q?qYzgJTyV1+ANv3KH4OpnUOKikmgqoBxyrDi33soglJXFi4YPxlzZ+yh13pw5Kc?=
 =?us-ascii?q?C7RUJne9KpEZlduzmEO4dqRs4uWWJltSYgxrEYpJK3YDIGxIkjyhPfbfGMbpKG?=
 =?us-ascii?q?7Qj5VOmLJDd1nHJld6y7hxa16UWg1OL8Wdeu0FpQrSpKjMPMtnYT2BzX8MSHTe?=
 =?us-ascii?q?F9/ki51TaO0QDc9P1ELFgqmabHL5Mt2KM8m5QNvUjZAyP7m1n6gLWXe0gm4uSo?=
 =?us-ascii?q?7v7oYrTipp+SLY90jQT+P7wqmsy+B+Q4LwcPU3GY+euizr3j+1P2QLFTgv0xnK?=
 =?us-ascii?q?jZto7VJd4Aq66nDA9azJwj5wy8Dzi4ytQYm2cILFZfdBKAlYjpNEnCIOrkAven?=
 =?us-ascii?q?n1SsjDBryujCPr3gAZXCMGLPkbj8fbtm705cyQwzzc1Q5p5OC7EBJu7zVVH1tN?=
 =?us-ascii?q?DCEhA5NAm0yf79CNphzoMeRX6PAqiBPaPSq1CI5/4vLPOLZIMPuDb9NuIq5/jh?=
 =?us-ascii?q?jXIinV8dfK+p3YYYaXyiH/RmJVmZbmTogtsbDWgKuQ8+RvTwiFKeST5Te2qyX6?=
 =?us-ascii?q?Uk6zE5D4KpE53PRoOqgLyH2ie7GYZbZmRHClCKDHfpeJ+IW/YKaCKOPMBhliYI?=
 =?us-ascii?q?WqSmS48kzRuurhP1y6J7LurI/S0VrYjs1MN15+3UlhE+7yZ0AN6f02yWS2F0n2?=
 =?us-ascii?q?UIRyI53axloEx9zEuD3rZ8g/BCCdNT4PZJWB8gNZHA1+x6F8zyWgXZc9eKUlmm?=
 =?us-ascii?q?RM+qATUwTt0rxd8ObF1wG9GjjhDFwiqrDKUZl72NBJwo7K3c22L9KNp6y3bDzK?=
 =?us-ascii?q?MhlUUpQtNTNW26ga5y7xXcCJTXk0qHjaqqdb4T3CjW9Gidy2qCu0VYUA11UaXB?=
 =?us-ascii?q?Rn0fYkrWrdLk5kLNVbOuCLInMhdfxs6GMKdFdtrpjVBeTvf5JNvee36xm3u3BR?=
 =?us-ascii?q?uQ27yDdpTqdHsH0CXdEkcElRsT8miANQUlAiehomTeDCFhFF71YkPs9/V+p22/?=
 =?us-ascii?q?TkMu0w6KaEhh3aKv+hEJnfycV+8T3rUctSc9qjV0GVG9387WC9uAvQZhYL9QYd?=
 =?us-ascii?q?Qn4FdD1GLZsQN9M4ekL6BjgF4ebgt2s1nv1xVxFoVPj8wqoGk2wwp1LKKSyElB?=
 =?us-ascii?q?eC+A3ZDsJr3XLXH/8wqra6HI1VDRztaX9r0U5/QltlrspgepFkkl83V5yNRV13?=
 =?us-ascii?q?qc5pPXDAsdS57xU0A39wRkqLHeeCUy+4TU1Xh0O6murjDCw84pBPciyhu4f9Zf?=
 =?us-ascii?q?LbmIGxPoH8wbB8ihMuoqm1eyYxIAPeBS8rM0Psy8e/uH3q6rIPhvnDa8gWtb54?=
 =?us-ascii?q?B911qG9zBgRe7Qw5YF3/aY0xOdVzf9kFiuqNr3lp1DZT0IGGqw1zLkBI9IaqJu?=
 =?us-ascii?q?Z4kLDXqhLNOtxtV5gZ7gQHpY9F+lB1Mb186lYxuSb1rh3QJO0UQbu2ComSy9zz?=
 =?us-ascii?q?ZsiTEmsrKf3DDSw+TlbBcGOm9LSHNijFv2Ooi0ktYaUVOsbwgokhul+En7y7Ja?=
 =?us-ascii?q?pKR5M2ncX0NIczLqIGFlV6u6rqCCbNJX6JM0rSVXV/yxYVKARb7noBsa0CTjE3?=
 =?us-ascii?q?FFxD8hdDGquZT5nxpkh2KbN3tzqHvZecdtxRbQ/tDcRPhR3iYYSyl8kzXYGl+8?=
 =?us-ascii?q?P9yx99WOi5jDqvy+V36mVpBLcSjk14SAuDG55W1rBx2yhPSzmtzhEQgn3i73zd?=
 =?us-ascii?q?hqVSPUrBniZonnzbi1MeVifkNwHl/z99J6Gp1ikos3nJwQ2mIVhpSP8XoHjGf8?=
 =?us-ascii?q?K9Nb2a3lYXoJRD4LxcPV4Qf/1E1iKHKJ25z2VnGHzsR9YNm6Z3sc2jgh4MBSFK?=
 =?us-ascii?q?eU8LtEkDNwolq5rgLee+JxnzkDxvs19H4VnfsJtxEzwSWHDbAfBk1YPS3qlxSV?=
 =?us-ascii?q?4NGytqRXZGCzcbeu0Epyh8yuDLaHogtEQnb2Zo8iHTNs7sV4KF/MzHrz6oT+dN?=
 =?us-ascii?q?jRd90TsACUkwzbj+hUM58xkvsKhSx6OWPyp3Elyug7jQBw0pG+poSIN2Jt/Keh?=
 =?us-ascii?q?CB5CKjL1f98T+i3qjatGhcmZxYevHpF8GjkRWJvoUOmlEDYTtfThKgaPHycwqn?=
 =?us-ascii?q?adGbrDAwCf7F1qoG7IE5CuL3uXPmUWzc1+RBmBI0xSmAIUUy8/npEnDQCm3tDh?=
 =?us-ascii?q?fF165jAM5V74tx1MxfhzNxTkVmffpQGoaio7SZSFLRpW6B1C6FnRMcCE8u1zGC?=
 =?us-ascii?q?RY9IW7rAORMmybexhIDWYRV02EAFDjI6Cu5cTa/OieHOa+NPzOYbOBqeFFU/eI?=
 =?us-ascii?q?xJSv0pZp/jqWN8WPOGViAOM/2kZZQX95HMHZkS0VSyMLjyLNc9KbpBCk9y13sM?=
 =?us-ascii?q?+/8ffrWAHu5YeVCLtSK9Jv+x+ojqeZKu6Qnz10KTJZ1pMK2H/Jx6IT3F8UiyFy?=
 =?us-ascii?q?aTatFa4MujLKTKLVgqVXFQIUaztvNMtU6KIxxhNCOdPAhdPvyLF5juQ5C1NEVV?=
 =?us-ascii?q?H6nsGpZMoKI3yyNV/dBUaLMqiGKiPPw83tfay8TrhQhv1OtxKsoTabD1PjPjOb?=
 =?us-ascii?q?mjn1VhCvNPtAgz2BMBNCuIGybBBtBHPnTNLnbB27LdB2gSc3wb0ymnPFK2ocPS?=
 =?us-ascii?q?JgfENKq72a9TlYjelnG2xd8nplKvGJmiaD4OneL5YWsP1rDTx1luJa+ns6zbRV?=
 =?us-ascii?q?4TpARPx0nivSs9Fvr0unkumJ1jpoTh5OpixXi4KMuEUxcZneo6NHX3DF8Vo25G?=
 =?us-ascii?q?WUARkQqJMxDsbmu6Rax8Lnjq//KD5etdnT+J1YT+z3DebPZH4gNwf5XT3ZFg0I?=
 =?us-ascii?q?SRa1OmzFwU9Qivef8juStJds+bb2n59bcaNWSlF9OOkXDE9lVIgZJZltUzUvkZ?=
 =?us-ascii?q?aUiccJ4Ty1qxyHF5YShYzOSv/HWaanEz2el7QRIkJQmb4=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAAClxxlch0O0hNFkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGBVYIWJ4N9gR2GfI4JFIoBjUeBbActEwGEQIJdIjQ?=
 =?us-ascii?q?JDQEDAQEBAQEBAgETAQEBCgsJCCkjDII2JAGCYQEBAQEDAQIgBBkBGx0BAwIJA?=
 =?us-ascii?q?QEFBQsDAwMBAgEqAgICAR8BEQEFARQIBgESBYMdAYFoAQMVBZpJPIsZfBYFARe?=
 =?us-ascii?q?CdwWEQQoZJw1egTAHAgYSjC0XgX+BEYMSgUEBgyk2gmiCVwKJHwMghw6QVgmEL?=
 =?us-ascii?q?Y0zGJFWiUaQITCBJYIOMxoIGxVsgjuCGwkDDAuDSopyIDOBBQEBjWABAQ?=
X-IPAS-Result: =?us-ascii?q?A0ABAAClxxlch0O0hNFkGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGBVYIWJ4N9gR2GfI4JFIoBjUeBbActEwGEQIJdIjQJDQEDAQEBAQEBA?=
 =?us-ascii?q?gETAQEBCgsJCCkjDII2JAGCYQEBAQEDAQIgBBkBGx0BAwIJAQEFBQsDAwMBAgE?=
 =?us-ascii?q?qAgICAR8BEQEFARQIBgESBYMdAYFoAQMVBZpJPIsZfBYFAReCdwWEQQoZJw1eg?=
 =?us-ascii?q?TAHAgYSjC0XgX+BEYMSgUEBgyk2gmiCVwKJHwMghw6QVgmELY0zGJFWiUaQITC?=
 =?us-ascii?q?BJYIOMxoIGxVsgjuCGwkDDAuDSopyIDOBBQEBjWABAQ?=
X-IronPort-AV: E=Sophos;i="5.56,371,1539673200"; 
   d="scan'208,223";a="142696372"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 18 Dec 2018 20:24:19 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727505AbeLSEYR (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 18 Dec 2018 23:24:17 -0500
Received: from mail-pf1-f195.google.com ([209.85.210.195]:39226 "EHLO
        mail-pf1-f195.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726595AbeLSEYQ (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 18 Dec 2018 23:24:16 -0500
Received: by mail-pf1-f195.google.com with SMTP id r136so2146003pfc.6;
        Tue, 18 Dec 2018 20:24:15 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=XTpgnmM1YroqW+k60Sm3TRbsbsV4Ft+BCnu2xqY2XSA=;
        b=D3fV//Tdn2KhnVmqGMR4u+DjuucP7wxDAU7i55uM2YnZRPEtQe+8cdUByYEfIbexpz
         WfNbxW8uj6K8+thNPnGHCFfd+MsyXXk9sxmmuMC5DHIu3Y+6+o+Y77h1CYskD//7bbTL
         AI+QmEUqGimhZWl6iZloXQHLdqkRFS2ojg2URL/6s+Rp9Di8r81QkIUBGs/SV3XVx6wS
         ZvIdAt3MeCMTliH1cLYvsfsxcwOyeKlyWCRHQf9pIGYyPznCW6H+hE/QOaHFhMwM9kW0
         c/5yZSzPd9vxDYHYNx286N7QmLKmNzkU8t5r2XnHWAT50rZ61rAnUywG3+4WBv1cDlDj
         9QEg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=XTpgnmM1YroqW+k60Sm3TRbsbsV4Ft+BCnu2xqY2XSA=;
        b=p1iGjWR7z2gE7L/sNag1NUnmmbSLMebPFtmk60yDz2yqJBxQJxhaXMR6upbfFXcuSp
         XP/auWlcfKLOvbRmIsLKn9sofC0QbfkMXDL61CWy/L1TiZ/WQNiFMZyd8FIAo3+r+LGS
         KUPUif4xOEhHemsILO93nTuvQr8RpSlatT0CtAnxzO9X/VMc0TNtYm6cewxymKnEPeqE
         qREMtivMsqkFP/0Zo6+ry8/CNeQvPsFHjg6wYvu1qs5yX4A0dSmoyJftTb+PGY9D2bQC
         va82webOEQmGk2FUZaksJwj/pn0cyupmk4ljqFQa+GZTuowbGt9RggQEkeq01rztxo2n
         j6rw==
X-Gm-Message-State: AA+aEWaarRVLU0m4OR8IBlO7O07CymQt0j8o1+JxBcRlQbb9oq0SVVWE
        JOmLqFB3tS/E8UWmfOhnJEKcaq15fvQqicZ6n9kyaw==
X-Google-Smtp-Source: AFSGD/UmkIlgoo0iGOfBH90aXRConyYWsAuYKNtgkE5UZvJWZYOLIwbbooG3RBMMF5lRCU64i/Kx9IB4kjkPOpkmPDA=
X-Received: by 2002:a63:82c6:: with SMTP id w189mr18406252pgd.344.1545193454517;
 Tue, 18 Dec 2018 20:24:14 -0800 (PST)
MIME-Version: 1.0
References: <20181219035708.26546-1-lsahlber@redhat.com>
In-Reply-To: <20181219035708.26546-1-lsahlber@redhat.com>
From: Steve French <smfrench@gmail.com>
Date: Tue, 18 Dec 2018 22:24:01 -0600
Message-ID: <CAH2r5mt+5fUbs_USx-mejZgoM9PsmNNgLyS-Gs=OMv=iFs2e6A@mail.gmail.com>
Subject: Re: [PATCH] cifs: fix rmdir + azure + compounding regression
To: Ronnie Sahlberg <lsahlber@redhat.com>,
        LKML <linux-kernel@vger.kernel.org>
Cc: Linux CIFS mailing list <linux-cifs@vger.kernel.org>
Content-Type: multipart/mixed; boundary="000000000000f762ee057d586262"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

--000000000000f762ee057d586262
Content-Type: text/plain; charset="UTF-8"

Updated the patch to merge it with mine.  This will need to go in ASAP
to avoid the regression.  Running additional functional tests on it
and resending to get more eyes on it.


On Tue, Dec 18, 2018 at 9:57 PM Ronnie Sahlberg <lsahlber@redhat.com> wrote:
>
> When we send a SET_INFO command for file disposition, this ends up as
> an iov of a single byte. This causes problems with SMB3 and encryption.
>
> To avoid this, instead of creating a one byte iov for the disposition value
> and then appending an additional iov with a 7 byte padding we now handle this
> as a single 8 byte iov containing both the disposition byte as well as the
> padding in one single buffer.
>
> Signed-off-by: Ronnie Sahlberg <lsahlber@redhat.com>
> ---
>  fs/cifs/smb2inode.c | 14 +++++++-------
>  fs/cifs/smb2ops.c   | 23 +++++++++++++++--------
>  fs/cifs/smb2proto.h |  3 ++-
>  3 files changed, 24 insertions(+), 16 deletions(-)
>
> diff --git a/fs/cifs/smb2inode.c b/fs/cifs/smb2inode.c
> index 633d20b7ca03..a8999f930b22 100644
> --- a/fs/cifs/smb2inode.c
> +++ b/fs/cifs/smb2inode.c
> @@ -97,7 +97,7 @@ smb2_compound_op(const unsigned int xid, struct cifs_tcon *tcon,
>         if (rc)
>                 goto finished;
>
> -       smb2_set_next_command(server, &rqst[num_rqst++]);
> +       smb2_set_next_command(server, &rqst[num_rqst++], 0);
>
>         /* Operation */
>         switch (command) {
> @@ -111,7 +111,7 @@ smb2_compound_op(const unsigned int xid, struct cifs_tcon *tcon,
>                                 SMB2_O_INFO_FILE, 0,
>                                 sizeof(struct smb2_file_all_info) +
>                                           PATH_MAX * 2, 0, NULL);
> -               smb2_set_next_command(server, &rqst[num_rqst]);
> +               smb2_set_next_command(server, &rqst[num_rqst], 0);
>                 smb2_set_related(&rqst[num_rqst++]);
>                 break;
>         case SMB2_OP_DELETE:
> @@ -134,7 +134,7 @@ smb2_compound_op(const unsigned int xid, struct cifs_tcon *tcon,
>                                         COMPOUND_FID, current->tgid,
>                                         FILE_DISPOSITION_INFORMATION,
>                                         SMB2_O_INFO_FILE, 0, data, size);
> -               smb2_set_next_command(server, &rqst[num_rqst]);
> +               smb2_set_next_command(server, &rqst[num_rqst], 1);
>                 smb2_set_related(&rqst[num_rqst++]);
>                 break;
>         case SMB2_OP_SET_EOF:
> @@ -149,7 +149,7 @@ smb2_compound_op(const unsigned int xid, struct cifs_tcon *tcon,
>                                         COMPOUND_FID, current->tgid,
>                                         FILE_END_OF_FILE_INFORMATION,
>                                         SMB2_O_INFO_FILE, 0, data, size);
> -               smb2_set_next_command(server, &rqst[num_rqst]);
> +               smb2_set_next_command(server, &rqst[num_rqst], 0);
>                 smb2_set_related(&rqst[num_rqst++]);
>                 break;
>         case SMB2_OP_SET_INFO:
> @@ -165,7 +165,7 @@ smb2_compound_op(const unsigned int xid, struct cifs_tcon *tcon,
>                                         COMPOUND_FID, current->tgid,
>                                         FILE_BASIC_INFORMATION,
>                                         SMB2_O_INFO_FILE, 0, data, size);
> -               smb2_set_next_command(server, &rqst[num_rqst]);
> +               smb2_set_next_command(server, &rqst[num_rqst], 0);
>                 smb2_set_related(&rqst[num_rqst++]);
>                 break;
>         case SMB2_OP_RENAME:
> @@ -189,7 +189,7 @@ smb2_compound_op(const unsigned int xid, struct cifs_tcon *tcon,
>                                         COMPOUND_FID, current->tgid,
>                                         FILE_RENAME_INFORMATION,
>                                         SMB2_O_INFO_FILE, 0, data, size);
> -               smb2_set_next_command(server, &rqst[num_rqst]);
> +               smb2_set_next_command(server, &rqst[num_rqst], 0);
>                 smb2_set_related(&rqst[num_rqst++]);
>                 break;
>         case SMB2_OP_HARDLINK:
> @@ -213,7 +213,7 @@ smb2_compound_op(const unsigned int xid, struct cifs_tcon *tcon,
>                                         COMPOUND_FID, current->tgid,
>                                         FILE_LINK_INFORMATION,
>                                         SMB2_O_INFO_FILE, 0, data, size);
> -               smb2_set_next_command(server, &rqst[num_rqst]);
> +               smb2_set_next_command(server, &rqst[num_rqst], 0);
>                 smb2_set_related(&rqst[num_rqst++]);
>                 break;
>         default:
> diff --git a/fs/cifs/smb2ops.c b/fs/cifs/smb2ops.c
> index 225fec1cfa67..e25c7aade98a 100644
> --- a/fs/cifs/smb2ops.c
> +++ b/fs/cifs/smb2ops.c
> @@ -1194,7 +1194,7 @@ smb2_ioctl_query_info(const unsigned int xid,
>         rc = SMB2_open_init(tcon, &rqst[0], &oplock, &oparms, path);
>         if (rc)
>                 goto iqinf_exit;
> -       smb2_set_next_command(ses->server, &rqst[0]);
> +       smb2_set_next_command(ses->server, &rqst[0], 0);
>
>         /* Query */
>         memset(&qi_iov, 0, sizeof(qi_iov));
> @@ -1208,7 +1208,7 @@ smb2_ioctl_query_info(const unsigned int xid,
>                                   qi.output_buffer_length, buffer);
>         if (rc)
>                 goto iqinf_exit;
> -       smb2_set_next_command(ses->server, &rqst[1]);
> +       smb2_set_next_command(ses->server, &rqst[1], 0);
>         smb2_set_related(&rqst[1]);
>
>         /* Close */
> @@ -1761,16 +1761,23 @@ smb2_set_related(struct smb_rqst *rqst)
>  char smb2_padding[7] = {0, 0, 0, 0, 0, 0, 0};
>
>  void
> -smb2_set_next_command(struct TCP_Server_Info *server, struct smb_rqst *rqst)
> +smb2_set_next_command(struct TCP_Server_Info *server, struct smb_rqst *rqst,
> +                     bool has_space_for_padding)
>  {
>         struct smb2_sync_hdr *shdr;
>         unsigned long len = smb_rqst_len(server, rqst);
>
>         /* SMB headers in a compound are 8 byte aligned. */
>         if (len & 7) {
> -               rqst->rq_iov[rqst->rq_nvec].iov_base = smb2_padding;
> -               rqst->rq_iov[rqst->rq_nvec].iov_len = 8 - (len & 7);
> -               rqst->rq_nvec++;
> +               if (has_space_for_padding) {
> +                       len = rqst->rq_iov[rqst->rq_nvec - 1].iov_len;
> +                       rqst->rq_iov[rqst->rq_nvec - 1].iov_len =
> +                               (len + 7) & ~7;
> +               } else {
> +                       rqst->rq_iov[rqst->rq_nvec].iov_base = smb2_padding;
> +                       rqst->rq_iov[rqst->rq_nvec].iov_len = 8 - (len & 7);
> +                       rqst->rq_nvec++;
> +               }
>                 len = smb_rqst_len(server, rqst);
>         }
>
> @@ -1820,7 +1827,7 @@ smb2_queryfs(const unsigned int xid, struct cifs_tcon *tcon,
>         rc = SMB2_open_init(tcon, &rqst[0], &oplock, &oparms, &srch_path);
>         if (rc)
>                 goto qfs_exit;
> -       smb2_set_next_command(server, &rqst[0]);
> +       smb2_set_next_command(server, &rqst[0], 0);
>
>         memset(&qi_iov, 0, sizeof(qi_iov));
>         rqst[1].rq_iov = qi_iov;
> @@ -1833,7 +1840,7 @@ smb2_queryfs(const unsigned int xid, struct cifs_tcon *tcon,
>                                   NULL);
>         if (rc)
>                 goto qfs_exit;
> -       smb2_set_next_command(server, &rqst[1]);
> +       smb2_set_next_command(server, &rqst[1], 0);
>         smb2_set_related(&rqst[1]);
>
>         memset(&close_iov, 0, sizeof(close_iov));
> diff --git a/fs/cifs/smb2proto.h b/fs/cifs/smb2proto.h
> index 9f4e9ed9ce53..2fe78acd7d0c 100644
> --- a/fs/cifs/smb2proto.h
> +++ b/fs/cifs/smb2proto.h
> @@ -117,7 +117,8 @@ extern int smb3_crypto_aead_allocate(struct TCP_Server_Info *server);
>  extern unsigned long smb_rqst_len(struct TCP_Server_Info *server,
>                                   struct smb_rqst *rqst);
>  extern void smb2_set_next_command(struct TCP_Server_Info *server,
> -                                 struct smb_rqst *rqst);
> +                                 struct smb_rqst *rqst,
> +                                 bool has_space_for_padding);
>  extern void smb2_set_related(struct smb_rqst *rqst);
>
>  /*
> --
> 2.13.6
>


-- 
Thanks,

Steve

--000000000000f762ee057d586262
Content-Type: text/x-patch; charset="US-ASCII"; 
	name="0001-smb3-Fix-rmdir-compounding-regression-to-strict-serv.patch"
Content-Disposition: attachment; 
	filename="0001-smb3-Fix-rmdir-compounding-regression-to-strict-serv.patch"
Content-Transfer-Encoding: base64
Content-ID: <f_jpuo9fnv0>
X-Attachment-Id: f_jpuo9fnv0

RnJvbSA1MmU4YzVjNjAwN2UyMzEwZGYwOGEwNWRiYTU2MzM5M2VmOWVkOTAwIE1vbiBTZXAgMTcg
MDA6MDA6MDAgMjAwMQpGcm9tOiBSb25uaWUgU2FobGJlcmcgPGxzYWhsYmVyQHJlZGhhdC5jb20+
CkRhdGU6IFR1ZSwgMTggRGVjIDIwMTggMTc6NDk6MDUgLTA2MDAKU3ViamVjdDogW1BBVENIXSBz
bWIzOiBGaXggcm1kaXIgY29tcG91bmRpbmcgcmVncmVzc2lvbiB0byBzdHJpY3Qgc2VydmVycwoK
U29tZSBzZXJ2ZXJzIHJlcXVpcmUgdGhhdCB0aGUgc2V0aW5mbyBtYXRjaGVzIHRoZSBleGFjdCBz
aXplLAphbmQgaW4gdGhpcyBjYXNlIGNvbXBvdW5kaW5nIGNoYW5nZXMgaW50cm9kdWNlZCBieQpj
b21taXQgYzJlMGZlM2Y1YWFlICgiY2lmczogbWFrZSBybWRpcigpIHVzZSBjb21wb3VuZGluZyIp
CmNhdXNlZCB1cyB0byBzZW5kIDggYnl0ZXMgKHBhZGRlZCBsZW5ndGgpIGluc3RlYWQgb2YgMSBi
eXRlCih0aGUgc2l6ZSBvZiB0aGUgc3RydWN0dXJlKS4gIFNlZSBNUy1GU0NDIHNlY3Rpb24gMi40
LjExLgoKRml4aW5nIHRoaXMgd2hlbiB3ZSBzZW5kIGEgU0VUX0lORk8gY29tbWFuZCBmb3IgZGVs
ZXRlIGZpbGUKZGlzcG9zaXRpb24sIHRoaXMgZW5kcyB1cCBhcyBhbiBpb3Ygb2YgYSBzaW5nbGUg
YnV0IHRoaXMKY2F1c2VzIHByb2JsZW1zIHdpdGggU01CMyBhbmQgZW5jcnlwdGlvbi4KClRvIGF2
b2lkIHRoaXMsIGluc3RlYWQgb2YgY3JlYXRpbmcgYSBvbmUgYnl0ZSBpb3YgZm9yIHRoZSBkaXNw
b3NpdGlvbiB2YWx1ZQphbmQgdGhlbiBhcHBlbmRpbmcgYW4gYWRkaXRpb25hbCBpb3Ygd2l0aCBh
IDcgYnl0ZSBwYWRkaW5nIHdlIG5vdyBoYW5kbGUKdGhpcyBhcyBhIHNpbmdsZSA4IGJ5dGUgaW92
IGNvbnRhaW5pbmcgYm90aCB0aGUgZGlzcG9zaXRpb24gYnl0ZSBhcyB3ZWxsIGFzCnRoZSBwYWRk
aW5nIGluIG9uZSBzaW5nbGUgYnVmZmVyLgoKU2lnbmVkLW9mZi1ieTogUm9ubmllIFNhaGxiZXJn
IDxsc2FobGJlckByZWRoYXQuY29tPgpTaWduZWQtb2ZmLWJ5OiBTdGV2ZSBGcmVuY2ggPHN0ZnJl
bmNoQG1pY3Jvc29mdC5jb20+Ci0tLQogZnMvY2lmcy9zbWIyaW5vZGUuYyB8IDE2ICsrKysrKysr
LS0tLS0tLS0KIGZzL2NpZnMvc21iMm9wcy5jICAgfCAyMyArKysrKysrKysrKysrKystLS0tLS0t
LQogZnMvY2lmcy9zbWIycHJvdG8uaCB8ICAzICsrLQogMyBmaWxlcyBjaGFuZ2VkLCAyNSBpbnNl
cnRpb25zKCspLCAxNyBkZWxldGlvbnMoLSkKCmRpZmYgLS1naXQgYS9mcy9jaWZzL3NtYjJpbm9k
ZS5jIGIvZnMvY2lmcy9zbWIyaW5vZGUuYwppbmRleCA5ZTdlZjdlYzJkNzAuLmE4OTk5ZjkzMGIy
MiAxMDA2NDQKLS0tIGEvZnMvY2lmcy9zbWIyaW5vZGUuYworKysgYi9mcy9jaWZzL3NtYjJpbm9k
ZS5jCkBAIC05Nyw3ICs5Nyw3IEBAIHNtYjJfY29tcG91bmRfb3AoY29uc3QgdW5zaWduZWQgaW50
IHhpZCwgc3RydWN0IGNpZnNfdGNvbiAqdGNvbiwKIAlpZiAocmMpCiAJCWdvdG8gZmluaXNoZWQ7
CiAKLQlzbWIyX3NldF9uZXh0X2NvbW1hbmQoc2VydmVyLCAmcnFzdFtudW1fcnFzdCsrXSk7CisJ
c21iMl9zZXRfbmV4dF9jb21tYW5kKHNlcnZlciwgJnJxc3RbbnVtX3Jxc3QrK10sIDApOwogCiAJ
LyogT3BlcmF0aW9uICovCiAJc3dpdGNoIChjb21tYW5kKSB7CkBAIC0xMTEsNyArMTExLDcgQEAg
c21iMl9jb21wb3VuZF9vcChjb25zdCB1bnNpZ25lZCBpbnQgeGlkLCBzdHJ1Y3QgY2lmc190Y29u
ICp0Y29uLAogCQkJCVNNQjJfT19JTkZPX0ZJTEUsIDAsCiAJCQkJc2l6ZW9mKHN0cnVjdCBzbWIy
X2ZpbGVfYWxsX2luZm8pICsKIAkJCQkJICBQQVRIX01BWCAqIDIsIDAsIE5VTEwpOwotCQlzbWIy
X3NldF9uZXh0X2NvbW1hbmQoc2VydmVyLCAmcnFzdFtudW1fcnFzdF0pOworCQlzbWIyX3NldF9u
ZXh0X2NvbW1hbmQoc2VydmVyLCAmcnFzdFtudW1fcnFzdF0sIDApOwogCQlzbWIyX3NldF9yZWxh
dGVkKCZycXN0W251bV9ycXN0KytdKTsKIAkJYnJlYWs7CiAJY2FzZSBTTUIyX09QX0RFTEVURToK
QEAgLTEyNywxNCArMTI3LDE0IEBAIHNtYjJfY29tcG91bmRfb3AoY29uc3QgdW5zaWduZWQgaW50
IHhpZCwgc3RydWN0IGNpZnNfdGNvbiAqdGNvbiwKIAkJcnFzdFtudW1fcnFzdF0ucnFfaW92ID0g
c2lfaW92OwogCQlycXN0W251bV9ycXN0XS5ycV9udmVjID0gMTsKIAotCQlzaXplWzBdID0gODsK
KwkJc2l6ZVswXSA9IDE7IC8qIHNpemVvZiBfX3U4IFNlZSBNUy1GU0NDIHNlY3Rpb24gMi40LjEx
ICovCiAJCWRhdGFbMF0gPSAmZGVsZXRlX3BlbmRpbmdbMF07CiAKIAkJcmMgPSBTTUIyX3NldF9p
bmZvX2luaXQodGNvbiwgJnJxc3RbbnVtX3Jxc3RdLCBDT01QT1VORF9GSUQsCiAJCQkJCUNPTVBP
VU5EX0ZJRCwgY3VycmVudC0+dGdpZCwKIAkJCQkJRklMRV9ESVNQT1NJVElPTl9JTkZPUk1BVElP
TiwKIAkJCQkJU01CMl9PX0lORk9fRklMRSwgMCwgZGF0YSwgc2l6ZSk7Ci0JCXNtYjJfc2V0X25l
eHRfY29tbWFuZChzZXJ2ZXIsICZycXN0W251bV9ycXN0XSk7CisJCXNtYjJfc2V0X25leHRfY29t
bWFuZChzZXJ2ZXIsICZycXN0W251bV9ycXN0XSwgMSk7CiAJCXNtYjJfc2V0X3JlbGF0ZWQoJnJx
c3RbbnVtX3Jxc3QrK10pOwogCQlicmVhazsKIAljYXNlIFNNQjJfT1BfU0VUX0VPRjoKQEAgLTE0
OSw3ICsxNDksNyBAQCBzbWIyX2NvbXBvdW5kX29wKGNvbnN0IHVuc2lnbmVkIGludCB4aWQsIHN0
cnVjdCBjaWZzX3Rjb24gKnRjb24sCiAJCQkJCUNPTVBPVU5EX0ZJRCwgY3VycmVudC0+dGdpZCwK
IAkJCQkJRklMRV9FTkRfT0ZfRklMRV9JTkZPUk1BVElPTiwKIAkJCQkJU01CMl9PX0lORk9fRklM
RSwgMCwgZGF0YSwgc2l6ZSk7Ci0JCXNtYjJfc2V0X25leHRfY29tbWFuZChzZXJ2ZXIsICZycXN0
W251bV9ycXN0XSk7CisJCXNtYjJfc2V0X25leHRfY29tbWFuZChzZXJ2ZXIsICZycXN0W251bV9y
cXN0XSwgMCk7CiAJCXNtYjJfc2V0X3JlbGF0ZWQoJnJxc3RbbnVtX3Jxc3QrK10pOwogCQlicmVh
azsKIAljYXNlIFNNQjJfT1BfU0VUX0lORk86CkBAIC0xNjUsNyArMTY1LDcgQEAgc21iMl9jb21w
b3VuZF9vcChjb25zdCB1bnNpZ25lZCBpbnQgeGlkLCBzdHJ1Y3QgY2lmc190Y29uICp0Y29uLAog
CQkJCQlDT01QT1VORF9GSUQsIGN1cnJlbnQtPnRnaWQsCiAJCQkJCUZJTEVfQkFTSUNfSU5GT1JN
QVRJT04sCiAJCQkJCVNNQjJfT19JTkZPX0ZJTEUsIDAsIGRhdGEsIHNpemUpOwotCQlzbWIyX3Nl
dF9uZXh0X2NvbW1hbmQoc2VydmVyLCAmcnFzdFtudW1fcnFzdF0pOworCQlzbWIyX3NldF9uZXh0
X2NvbW1hbmQoc2VydmVyLCAmcnFzdFtudW1fcnFzdF0sIDApOwogCQlzbWIyX3NldF9yZWxhdGVk
KCZycXN0W251bV9ycXN0KytdKTsKIAkJYnJlYWs7CiAJY2FzZSBTTUIyX09QX1JFTkFNRToKQEAg
LTE4OSw3ICsxODksNyBAQCBzbWIyX2NvbXBvdW5kX29wKGNvbnN0IHVuc2lnbmVkIGludCB4aWQs
IHN0cnVjdCBjaWZzX3Rjb24gKnRjb24sCiAJCQkJCUNPTVBPVU5EX0ZJRCwgY3VycmVudC0+dGdp
ZCwKIAkJCQkJRklMRV9SRU5BTUVfSU5GT1JNQVRJT04sCiAJCQkJCVNNQjJfT19JTkZPX0ZJTEUs
IDAsIGRhdGEsIHNpemUpOwotCQlzbWIyX3NldF9uZXh0X2NvbW1hbmQoc2VydmVyLCAmcnFzdFtu
dW1fcnFzdF0pOworCQlzbWIyX3NldF9uZXh0X2NvbW1hbmQoc2VydmVyLCAmcnFzdFtudW1fcnFz
dF0sIDApOwogCQlzbWIyX3NldF9yZWxhdGVkKCZycXN0W251bV9ycXN0KytdKTsKIAkJYnJlYWs7
CiAJY2FzZSBTTUIyX09QX0hBUkRMSU5LOgpAQCAtMjEzLDcgKzIxMyw3IEBAIHNtYjJfY29tcG91
bmRfb3AoY29uc3QgdW5zaWduZWQgaW50IHhpZCwgc3RydWN0IGNpZnNfdGNvbiAqdGNvbiwKIAkJ
CQkJQ09NUE9VTkRfRklELCBjdXJyZW50LT50Z2lkLAogCQkJCQlGSUxFX0xJTktfSU5GT1JNQVRJ
T04sCiAJCQkJCVNNQjJfT19JTkZPX0ZJTEUsIDAsIGRhdGEsIHNpemUpOwotCQlzbWIyX3NldF9u
ZXh0X2NvbW1hbmQoc2VydmVyLCAmcnFzdFtudW1fcnFzdF0pOworCQlzbWIyX3NldF9uZXh0X2Nv
bW1hbmQoc2VydmVyLCAmcnFzdFtudW1fcnFzdF0sIDApOwogCQlzbWIyX3NldF9yZWxhdGVkKCZy
cXN0W251bV9ycXN0KytdKTsKIAkJYnJlYWs7CiAJZGVmYXVsdDoKZGlmZiAtLWdpdCBhL2ZzL2Np
ZnMvc21iMm9wcy5jIGIvZnMvY2lmcy9zbWIyb3BzLmMKaW5kZXggMjI1ZmVjMWNmYTY3Li5lMjVj
N2FhZGU5OGEgMTAwNjQ0Ci0tLSBhL2ZzL2NpZnMvc21iMm9wcy5jCisrKyBiL2ZzL2NpZnMvc21i
Mm9wcy5jCkBAIC0xMTk0LDcgKzExOTQsNyBAQCBzbWIyX2lvY3RsX3F1ZXJ5X2luZm8oY29uc3Qg
dW5zaWduZWQgaW50IHhpZCwKIAlyYyA9IFNNQjJfb3Blbl9pbml0KHRjb24sICZycXN0WzBdLCAm
b3Bsb2NrLCAmb3Bhcm1zLCBwYXRoKTsKIAlpZiAocmMpCiAJCWdvdG8gaXFpbmZfZXhpdDsKLQlz
bWIyX3NldF9uZXh0X2NvbW1hbmQoc2VzLT5zZXJ2ZXIsICZycXN0WzBdKTsKKwlzbWIyX3NldF9u
ZXh0X2NvbW1hbmQoc2VzLT5zZXJ2ZXIsICZycXN0WzBdLCAwKTsKIAogCS8qIFF1ZXJ5ICovCiAJ
bWVtc2V0KCZxaV9pb3YsIDAsIHNpemVvZihxaV9pb3YpKTsKQEAgLTEyMDgsNyArMTIwOCw3IEBA
IHNtYjJfaW9jdGxfcXVlcnlfaW5mbyhjb25zdCB1bnNpZ25lZCBpbnQgeGlkLAogCQkJCSAgcWku
b3V0cHV0X2J1ZmZlcl9sZW5ndGgsIGJ1ZmZlcik7CiAJaWYgKHJjKQogCQlnb3RvIGlxaW5mX2V4
aXQ7Ci0Jc21iMl9zZXRfbmV4dF9jb21tYW5kKHNlcy0+c2VydmVyLCAmcnFzdFsxXSk7CisJc21i
Ml9zZXRfbmV4dF9jb21tYW5kKHNlcy0+c2VydmVyLCAmcnFzdFsxXSwgMCk7CiAJc21iMl9zZXRf
cmVsYXRlZCgmcnFzdFsxXSk7CiAKIAkvKiBDbG9zZSAqLwpAQCAtMTc2MSwxNiArMTc2MSwyMyBA
QCBzbWIyX3NldF9yZWxhdGVkKHN0cnVjdCBzbWJfcnFzdCAqcnFzdCkKIGNoYXIgc21iMl9wYWRk
aW5nWzddID0gezAsIDAsIDAsIDAsIDAsIDAsIDB9OwogCiB2b2lkCi1zbWIyX3NldF9uZXh0X2Nv
bW1hbmQoc3RydWN0IFRDUF9TZXJ2ZXJfSW5mbyAqc2VydmVyLCBzdHJ1Y3Qgc21iX3Jxc3QgKnJx
c3QpCitzbWIyX3NldF9uZXh0X2NvbW1hbmQoc3RydWN0IFRDUF9TZXJ2ZXJfSW5mbyAqc2VydmVy
LCBzdHJ1Y3Qgc21iX3Jxc3QgKnJxc3QsCisJCSAgICAgIGJvb2wgaGFzX3NwYWNlX2Zvcl9wYWRk
aW5nKQogewogCXN0cnVjdCBzbWIyX3N5bmNfaGRyICpzaGRyOwogCXVuc2lnbmVkIGxvbmcgbGVu
ID0gc21iX3Jxc3RfbGVuKHNlcnZlciwgcnFzdCk7CiAKIAkvKiBTTUIgaGVhZGVycyBpbiBhIGNv
bXBvdW5kIGFyZSA4IGJ5dGUgYWxpZ25lZC4gKi8KIAlpZiAobGVuICYgNykgewotCQlycXN0LT5y
cV9pb3ZbcnFzdC0+cnFfbnZlY10uaW92X2Jhc2UgPSBzbWIyX3BhZGRpbmc7Ci0JCXJxc3QtPnJx
X2lvdltycXN0LT5ycV9udmVjXS5pb3ZfbGVuID0gOCAtIChsZW4gJiA3KTsKLQkJcnFzdC0+cnFf
bnZlYysrOworCQlpZiAoaGFzX3NwYWNlX2Zvcl9wYWRkaW5nKSB7CisJCQlsZW4gPSBycXN0LT5y
cV9pb3ZbcnFzdC0+cnFfbnZlYyAtIDFdLmlvdl9sZW47CisJCQlycXN0LT5ycV9pb3ZbcnFzdC0+
cnFfbnZlYyAtIDFdLmlvdl9sZW4gPQorCQkJCShsZW4gKyA3KSAmIH43OworCQl9IGVsc2Ugewor
CQkJcnFzdC0+cnFfaW92W3Jxc3QtPnJxX252ZWNdLmlvdl9iYXNlID0gc21iMl9wYWRkaW5nOwor
CQkJcnFzdC0+cnFfaW92W3Jxc3QtPnJxX252ZWNdLmlvdl9sZW4gPSA4IC0gKGxlbiAmIDcpOwor
CQkJcnFzdC0+cnFfbnZlYysrOworCQl9CiAJCWxlbiA9IHNtYl9ycXN0X2xlbihzZXJ2ZXIsIHJx
c3QpOwogCX0KIApAQCAtMTgyMCw3ICsxODI3LDcgQEAgc21iMl9xdWVyeWZzKGNvbnN0IHVuc2ln
bmVkIGludCB4aWQsIHN0cnVjdCBjaWZzX3Rjb24gKnRjb24sCiAJcmMgPSBTTUIyX29wZW5faW5p
dCh0Y29uLCAmcnFzdFswXSwgJm9wbG9jaywgJm9wYXJtcywgJnNyY2hfcGF0aCk7CiAJaWYgKHJj
KQogCQlnb3RvIHFmc19leGl0OwotCXNtYjJfc2V0X25leHRfY29tbWFuZChzZXJ2ZXIsICZycXN0
WzBdKTsKKwlzbWIyX3NldF9uZXh0X2NvbW1hbmQoc2VydmVyLCAmcnFzdFswXSwgMCk7CiAKIAlt
ZW1zZXQoJnFpX2lvdiwgMCwgc2l6ZW9mKHFpX2lvdikpOwogCXJxc3RbMV0ucnFfaW92ID0gcWlf
aW92OwpAQCAtMTgzMyw3ICsxODQwLDcgQEAgc21iMl9xdWVyeWZzKGNvbnN0IHVuc2lnbmVkIGlu
dCB4aWQsIHN0cnVjdCBjaWZzX3Rjb24gKnRjb24sCiAJCQkJICBOVUxMKTsKIAlpZiAocmMpCiAJ
CWdvdG8gcWZzX2V4aXQ7Ci0Jc21iMl9zZXRfbmV4dF9jb21tYW5kKHNlcnZlciwgJnJxc3RbMV0p
OworCXNtYjJfc2V0X25leHRfY29tbWFuZChzZXJ2ZXIsICZycXN0WzFdLCAwKTsKIAlzbWIyX3Nl
dF9yZWxhdGVkKCZycXN0WzFdKTsKIAogCW1lbXNldCgmY2xvc2VfaW92LCAwLCBzaXplb2YoY2xv
c2VfaW92KSk7CmRpZmYgLS1naXQgYS9mcy9jaWZzL3NtYjJwcm90by5oIGIvZnMvY2lmcy9zbWIy
cHJvdG8uaAppbmRleCA5ZjRlOWVkOWNlNTMuLjJmZTc4YWNkN2QwYyAxMDA2NDQKLS0tIGEvZnMv
Y2lmcy9zbWIycHJvdG8uaAorKysgYi9mcy9jaWZzL3NtYjJwcm90by5oCkBAIC0xMTcsNyArMTE3
LDggQEAgZXh0ZXJuIGludCBzbWIzX2NyeXB0b19hZWFkX2FsbG9jYXRlKHN0cnVjdCBUQ1BfU2Vy
dmVyX0luZm8gKnNlcnZlcik7CiBleHRlcm4gdW5zaWduZWQgbG9uZyBzbWJfcnFzdF9sZW4oc3Ry
dWN0IFRDUF9TZXJ2ZXJfSW5mbyAqc2VydmVyLAogCQkJCSAgc3RydWN0IHNtYl9ycXN0ICpycXN0
KTsKIGV4dGVybiB2b2lkIHNtYjJfc2V0X25leHRfY29tbWFuZChzdHJ1Y3QgVENQX1NlcnZlcl9J
bmZvICpzZXJ2ZXIsCi0JCQkJICBzdHJ1Y3Qgc21iX3Jxc3QgKnJxc3QpOworCQkJCSAgc3RydWN0
IHNtYl9ycXN0ICpycXN0LAorCQkJCSAgYm9vbCBoYXNfc3BhY2VfZm9yX3BhZGRpbmcpOwogZXh0
ZXJuIHZvaWQgc21iMl9zZXRfcmVsYXRlZChzdHJ1Y3Qgc21iX3Jxc3QgKnJxc3QpOwogCiAvKgot
LSAKMi4xNy4xCgo=
--000000000000f762ee057d586262--
