Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 11 Dec 2018 08:40:06 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id CCD8F580380
	for <like.xu@linux.intel.com>; Mon, 10 Dec 2018 08:57:00 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by orsmga001-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 10 Dec 2018 08:57:00 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AoS/iABDLV0F7d3euIHojUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSPX8ocbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRsZfWTJPDI2/?=
 =?us-ascii?q?aIUADeQBMulXoYfgv1sDrxmwCAaxCO7h1jNHmGT20LYm3+kiCwzKwBYtE84SvH?=
 =?us-ascii?q?nSsd77NL0SUeewzKTQ1zvMce9W1inn6IPVdR4uu/GNUq9ufsrVzUkkCgTIjk2O?=
 =?us-ascii?q?poz5ITyVzP4Bs22B4OtgSO2glWonqwVqrzirx8csjJPGhpgSylze8iV52ok1KM?=
 =?us-ascii?q?S+RUVmYtCkCINduz+GO4Z1WM8uXnxktSUgxrEYt5O2fDIGxIklyhLHdfCLb5SE?=
 =?us-ascii?q?7g/mWeuSOjh0mHdodK+iiBqu9EWtz/PwW8+p21hQtCVFiMPDtnUV2hzT9MeHTv?=
 =?us-ascii?q?x981+l2TaOzADT9vpELVo7lardNp4t2LkwloAcsUjbHy/2nlv5jLOOe0k65uSl?=
 =?us-ascii?q?6P7rbqj7qpKfLYN4lA/zP6Q0lsCiA+k0Kg0OUHKa+eS42r3j50r5QLBSg/0vjK?=
 =?us-ascii?q?bZtY3aKd0GqaGnHQ9azIIj5w+kADehzdQYm2UII0xeeB6Ai4jpOlLOL+7iAfaw?=
 =?us-ascii?q?nlShiDNrx/HAPr38DZTBNHnDkLH9fblj705Q0hY8zdda559PDLEBJ/TzWkD3tN?=
 =?us-ascii?q?zFFBM5NBa0w+n/BNVnyoweQX6PArOeMK7KtV+I5+EvLPeWaI4apTbwMPwl5//o?=
 =?us-ascii?q?jX8kll4RZ6ip3Z0LaH+mGvRqOVmWYX3pgoRJLGERowBrTPD2kEbQFnlXZm2uRO?=
 =?us-ascii?q?Q64Tc0Dp/gCp3MAYWkgbiE1SH8GYVKZ2dAEReVHHL1MomJRfoIOx+UOdJrxzkN?=
 =?us-ascii?q?VLy9TN042BSz8QP31bdja/DZ4zAVro7L0t9z6OvO0xYo+mtvEs6f3mqRGnxyhX?=
 =?us-ascii?q?4CXDQs3apy8nB6n06O1LU9j/FGGNh74fRPXQEnc5nGwL9UEdf3DzrMYtqTAHOv?=
 =?us-ascii?q?U9mrBTV5Gso839IUJUN0CtmvihTr2yusCqUS0buRC8pnoernw3HtKpMlmD7936?=
 =?us-ascii?q?47ggxjG5MXOA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A6AADPmQ5cmBHrdtBkHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGBMIJijBNfizCDCZFZhHyBcxQYFIdtIjQJDQEDAQEBAQEBAgETAQEBAQE?=
 =?us-ascii?q?ICwsGGw4vgjYFAgMaAQaCXAMDAQIkCwETCikDAwECBgEBSAgDAVMZBYMcggIBB?=
 =?us-ascii?q?KZxM4VAhGCHcoQvgVc/gRGCXYsRAok2A5c8BwKCIQSPHwsYkT0smQSBRoIOMxo?=
 =?us-ascii?q?wgy+CJxeOHUExgQeKIYF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0A6AADPmQ5cmBHrdtBkHQEBBQEHBQGBUQgBCwGBMIJijBN?=
 =?us-ascii?q?fizCDCZFZhHyBcxQYFIdtIjQJDQEDAQEBAQEBAgETAQEBAQEICwsGGw4vgjYFA?=
 =?us-ascii?q?gMaAQaCXAMDAQIkCwETCikDAwECBgEBSAgDAVMZBYMcggIBBKZxM4VAhGCHcoQ?=
 =?us-ascii?q?vgVc/gRGCXYsRAok2A5c8BwKCIQSPHwsYkT0smQSBRoIOMxowgy+CJxeOHUExg?=
 =?us-ascii?q?QeKIYF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,339,1539673200"; 
   d="scan'208";a="56273183"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 10 Dec 2018 08:56:59 -0800
Received: from localhost ([::1]:33694 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gWOra-0001PM-MA
	for like.xu@linux.intel.com; Mon, 10 Dec 2018 11:56:58 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:37108)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <pm215@archaic.org.uk>) id 1gWOrK-0001O8-Dw
	for qemu-devel@nongnu.org; Mon, 10 Dec 2018 11:56:43 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <pm215@archaic.org.uk>) id 1gWOrJ-00082w-CD
	for qemu-devel@nongnu.org; Mon, 10 Dec 2018 11:56:42 -0500
Received: from orth.archaic.org.uk ([2001:8b0:1d0::2]:53426)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <pm215@archaic.org.uk>)
	id 1gWOrJ-00080R-0x
	for qemu-devel@nongnu.org; Mon, 10 Dec 2018 11:56:41 -0500
Received: from pm215 by orth.archaic.org.uk with local (Exim 4.89)
	(envelope-from <pm215@archaic.org.uk>)
	id 1gWOrH-0000Mz-0D; Mon, 10 Dec 2018 16:56:39 +0000
From: Peter Maydell <peter.maydell@linaro.org>
To: qemu-devel@nongnu.org
Date: Mon, 10 Dec 2018 16:56:36 +0000
Message-Id: <20181210165636.28366-4-peter.maydell@linaro.org>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <20181210165636.28366-1-peter.maydell@linaro.org>
References: <20181210165636.28366-1-peter.maydell@linaro.org>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 2001:8b0:1d0::2
Subject: [Qemu-devel] [RFC 3/3] target/m68k: Switch to transaction_failed
 hook
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>,
	Laurent Vivier <laurent@vivier.eu>, patches@linaro.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Switch the m68k target from the old unassigned_access hook
to the transaction_failed hook.

The notable difference is that rather than it being called
for all physical memory accesses which fail (including
those made by DMA devices or by the gdbstub), it is only
called for those made by the CPU via its MMU. (In previous
commits we put in explicit checks for the direct physical
loads made by the target/m68k code which will no longer
be handled by calling the unassigned_access hook.)

Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
---
 target/m68k/cpu.h       |  7 ++++---
 target/m68k/cpu.c       |  2 +-
 target/m68k/op_helper.c | 20 ++++++++------------
 3 files changed, 13 insertions(+), 16 deletions(-)

diff --git a/target/m68k/cpu.h b/target/m68k/cpu.h
index b288a3864e0..08828b0581b 100644
--- a/target/m68k/cpu.h
+++ b/target/m68k/cpu.h
@@ -545,9 +545,10 @@ static inline int cpu_mmu_index (CPUM68KState *env, bool ifetch)
 
 int m68k_cpu_handle_mmu_fault(CPUState *cpu, vaddr address, int size, int rw,
                               int mmu_idx);
-void m68k_cpu_unassigned_access(CPUState *cs, hwaddr addr,
-                                bool is_write, bool is_exec, int is_asi,
-                                unsigned size);
+void m68k_cpu_transaction_failed(CPUState *cs, hwaddr physaddr, vaddr addr,
+                                 unsigned size, MMUAccessType access_type,
+                                 int mmu_idx, MemTxAttrs attrs,
+                                 MemTxResult response, uintptr_t retaddr);
 
 #include "exec/cpu-all.h"
 
diff --git a/target/m68k/cpu.c b/target/m68k/cpu.c
index 582e3a73b37..6d09c630b0e 100644
--- a/target/m68k/cpu.c
+++ b/target/m68k/cpu.c
@@ -271,7 +271,7 @@ static void m68k_cpu_class_init(ObjectClass *c, void *data)
     cc->gdb_write_register = m68k_cpu_gdb_write_register;
     cc->handle_mmu_fault = m68k_cpu_handle_mmu_fault;
 #if defined(CONFIG_SOFTMMU)
-    cc->do_unassigned_access = m68k_cpu_unassigned_access;
+    cc->do_transaction_failed = m68k_cpu_transaction_failed;
     cc->get_phys_page_debug = m68k_cpu_get_phys_page_debug;
 #endif
     cc->disas_set_info = m68k_cpu_disas_set_info;
diff --git a/target/m68k/op_helper.c b/target/m68k/op_helper.c
index 8d09ed91c49..6739ab8e436 100644
--- a/target/m68k/op_helper.c
+++ b/target/m68k/op_helper.c
@@ -454,19 +454,15 @@ static inline void do_interrupt_m68k_hardirq(CPUM68KState *env)
     do_interrupt_all(env, 1);
 }
 
-void m68k_cpu_unassigned_access(CPUState *cs, hwaddr addr, bool is_write,
-                                bool is_exec, int is_asi, unsigned size)
+void m68k_cpu_transaction_failed(CPUState *cs, hwaddr physaddr, vaddr addr,
+                                 unsigned size, MMUAccessType access_type,
+                                 int mmu_idx, MemTxAttrs attrs,
+                                 MemTxResult response, uintptr_t retaddr)
 {
     M68kCPU *cpu = M68K_CPU(cs);
     CPUM68KState *env = &cpu->env;
-#ifdef DEBUG_UNASSIGNED
-    qemu_log_mask(CPU_LOG_INT, "Unassigned " TARGET_FMT_plx " wr=%d exe=%d\n",
-             addr, is_write, is_exec);
-#endif
-    if (env == NULL) {
-        /* when called from gdb, env is NULL */
-        return;
-    }
+
+    cpu_restore_state(cs, retaddr, true);
 
     if (m68k_feature(env, M68K_FEATURE_M68040)) {
         env->mmu.mmusr = 0;
@@ -476,7 +472,7 @@ void m68k_cpu_unassigned_access(CPUState *cs, hwaddr addr, bool is_write,
         if (env->sr & SR_S) { /* SUPERVISOR */
             env->mmu.ssw |= M68K_TM_040_SUPER;
         }
-        if (is_exec) { /* instruction or data */
+        if (access_type == MMU_INST_FETCH) { /* instruction or data */
             env->mmu.ssw |= M68K_TM_040_CODE;
         } else {
             env->mmu.ssw |= M68K_TM_040_DATA;
@@ -494,7 +490,7 @@ void m68k_cpu_unassigned_access(CPUState *cs, hwaddr addr, bool is_write,
             break;
         }
 
-        if (!is_write) {
+        if (access_type != MMU_DATA_STORE) {
             env->mmu.ssw |= M68K_RW_040;
         }
 
-- 
2.19.2


