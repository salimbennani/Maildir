Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 11 Dec 2018 08:41:20 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id CFFD15807A2
	for <like.xu@linux.intel.com>; Mon, 10 Dec 2018 09:57:03 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga006-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 10 Dec 2018 09:57:03 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AGyyW5RAa3mdUSy6c+pw+UyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSPX8pcbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRsZfWTJPDI2/?=
 =?us-ascii?q?aIUAAOUPM/tAr4T/pVUDogayCAewCOzx0T9FnWP60K4g3ug9CwzKwBAsEtQTu3?=
 =?us-ascii?q?rUttX1M6ISXPivwqbW0TXMcelW0ir65ofSchEuvO+DXbZ0ccHMzkQvDx3KjkmO?=
 =?us-ascii?q?poz/JT+V0/4CsmiG4OV+UeKvj3UqqwVwojip3MgskI7JipgSylDe+iV02YA4Ls?=
 =?us-ascii?q?C7Rk5jedOoDodcuiKAO4drX88vQHtktDg0x7AGo5K3YSoHxIw5yxLDd/CLbo2F?=
 =?us-ascii?q?7xH4W+qNJDp0mW9qdK66ihu370StzPD3WNOu31ZQtCVFl8HBtnAT2BzX7ciKUv?=
 =?us-ascii?q?99/ka62TaTzADf8O5EIUYplabBLJ4h2LEwmoISsUTFACD2hF37gLGKekgn4OSk?=
 =?us-ascii?q?9vnrb7b8qpOCOYJ5ihvyPrksl8CnBOQ3KAkOX2yV+eSm073j+FX0QKxUgf0zj6?=
 =?us-ascii?q?nVqY3VKtoFpqGnBw9Zy50s6xGiDzegzNsXg2IHIFVBeBKGjIjmJUvCIf/lDfqn?=
 =?us-ascii?q?h1SskTFrx+3JP7H7A5XNKGTDn6nlfbpn90Fczw8zwMtZ55JTDLEBL/TzWlLruN?=
 =?us-ascii?q?zfFB85PBS4w/z7B9VlyoMeRWWPD7edMKPTsl+H+PgjIuaRZIIOvDb9Kv4l5+Ph?=
 =?us-ascii?q?jHMjmF8de7Wp0oUTaHyiAvtmJECZMjLRhMwcGzIKohYmV76tz1mDSiJIIXC1Wa?=
 =?us-ascii?q?06+3c8Eo3hCI7CQoWkhvuGxDu6GZtNIXlLD03JHXr2eoHXZvEXdSjHJ8ZgliAD?=
 =?us-ascii?q?B6GsTpJk2RywuQu/0bd+M+fP5gUespTs0sUz4Pfcwgov/z55BNjIzmeWUmtvlX?=
 =?us-ascii?q?kJTTJl4KcquEF41xKP3LZ1h9ReEtpc4e4PVR01ZrDGyOkvM93uVxiJW96YRFui?=
 =?us-ascii?q?Rp3yGTwtQ8h3xtYfb0t5H/2mjxbKxS3sBKUawe/YTKco+77RiiCib/12zGzLge?=
 =?us-ascii?q?x41wEr?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BHAAD4pw5cmBHrdtBkHgEGBwaBUQkLA?=
 =?us-ascii?q?YEwgmKMcoswgwmRWYR8gXMUGBSHbSI0CQ0BAwEBAQEBAQIBEwEBAQEBCAsLBhs?=
 =?us-ascii?q?OL4I2BQIDGgEGgl8EAiQLARMKKQMDAQIGAkgIAwFsBYMcggIBBKcmM4VAhGCHc?=
 =?us-ascii?q?oQvgVc/gRGCXYsRAokvCodSj2oHAoIhBI8fCxiRPSyZBIFGgg4zGjCDL4InF44?=
 =?us-ascii?q?dQTGBB4ohgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0BHAAD4pw5cmBHrdtBkHgEGBwaBUQkLAYEwgmKMcoswgwm?=
 =?us-ascii?q?RWYR8gXMUGBSHbSI0CQ0BAwEBAQEBAQIBEwEBAQEBCAsLBhsOL4I2BQIDGgEGg?=
 =?us-ascii?q?l8EAiQLARMKKQMDAQIGAkgIAwFsBYMcggIBBKcmM4VAhGCHcoQvgVc/gRGCXYs?=
 =?us-ascii?q?RAokvCodSj2oHAoIhBI8fCxiRPSyZBIFGgg4zGjCDL4InF44dQTGBB4ohgXcBA?=
 =?us-ascii?q?Q?=
X-IronPort-AV: E=Sophos;i="5.56,339,1539673200"; 
   d="scan'208";a="55731101"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 10 Dec 2018 09:56:46 -0800
Received: from localhost ([::1]:34096 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gWPnR-0007j6-Ub
	for like.xu@linux.intel.com; Mon, 10 Dec 2018 12:56:45 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:52911)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <pm215@archaic.org.uk>) id 1gWPnG-0007iw-VG
	for qemu-devel@nongnu.org; Mon, 10 Dec 2018 12:56:36 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <pm215@archaic.org.uk>) id 1gWPnF-0000rW-Ak
	for qemu-devel@nongnu.org; Mon, 10 Dec 2018 12:56:34 -0500
Received: from orth.archaic.org.uk ([2001:8b0:1d0::2]:53454)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <pm215@archaic.org.uk>)
	id 1gWPnF-0000p7-2Z
	for qemu-devel@nongnu.org; Mon, 10 Dec 2018 12:56:33 -0500
Received: from pm215 by orth.archaic.org.uk with local (Exim 4.89)
	(envelope-from <pm215@archaic.org.uk>)
	id 1gWPnC-0000U1-JG; Mon, 10 Dec 2018 17:56:30 +0000
From: Peter Maydell <peter.maydell@linaro.org>
To: qemu-devel@nongnu.org
Date: Mon, 10 Dec 2018 17:56:30 +0000
Message-Id: <20181210175630.30643-1-peter.maydell@linaro.org>
X-Mailer: git-send-email 2.19.2
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 2001:8b0:1d0::2
Subject: [Qemu-devel] [RFC] target/microblaze: Switch to transaction_failed
 hook
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: "Edgar E. Iglesias" <edgar.iglesias@gmail.com>, patches@linaro.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Switch the microblaze target from the old unassigned_access hook
to the transaction_failed hook.

The notable difference is that rather than it being called
for all physical memory accesses which fail (including
those made by DMA devices or by the gdbstub), it is only
called for those made by the CPU via its MMU. For
microblaze this makes no difference because none of the
target CPU code needs to make loads or stores by physical
address.

Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
---
A straightforward conversion, but tagged RFC because I don't have
any microblaze test images and have tested only with "make check".

 target/microblaze/cpu.h       |  7 ++++---
 target/microblaze/cpu.c       |  2 +-
 target/microblaze/op_helper.c | 20 ++++++++++----------
 3 files changed, 15 insertions(+), 14 deletions(-)

diff --git a/target/microblaze/cpu.h b/target/microblaze/cpu.h
index 3c4e0ba80ac..03ca91007d5 100644
--- a/target/microblaze/cpu.h
+++ b/target/microblaze/cpu.h
@@ -388,9 +388,10 @@ static inline void cpu_get_tb_cpu_state(CPUMBState *env, target_ulong *pc,
 }
 
 #if !defined(CONFIG_USER_ONLY)
-void mb_cpu_unassigned_access(CPUState *cpu, hwaddr addr,
-                              bool is_write, bool is_exec, int is_asi,
-                              unsigned size);
+void mb_cpu_transaction_failed(CPUState *cs, hwaddr physaddr, vaddr addr,
+                               unsigned size, MMUAccessType access_type,
+                               int mmu_idx, MemTxAttrs attrs,
+                               MemTxResult response, uintptr_t retaddr);
 #endif
 
 #endif
diff --git a/target/microblaze/cpu.c b/target/microblaze/cpu.c
index 9b546a2c18e..49876b19b38 100644
--- a/target/microblaze/cpu.c
+++ b/target/microblaze/cpu.c
@@ -297,7 +297,7 @@ static void mb_cpu_class_init(ObjectClass *oc, void *data)
 #ifdef CONFIG_USER_ONLY
     cc->handle_mmu_fault = mb_cpu_handle_mmu_fault;
 #else
-    cc->do_unassigned_access = mb_cpu_unassigned_access;
+    cc->do_transaction_failed = mb_cpu_transaction_failed;
     cc->get_phys_page_debug = mb_cpu_get_phys_page_debug;
 #endif
     dc->vmsd = &vmstate_mb_cpu;
diff --git a/target/microblaze/op_helper.c b/target/microblaze/op_helper.c
index 7cdbbcccaef..d25d3b626c8 100644
--- a/target/microblaze/op_helper.c
+++ b/target/microblaze/op_helper.c
@@ -486,18 +486,18 @@ void helper_mmu_write(CPUMBState *env, uint32_t ext, uint32_t rn, uint32_t v)
     mmu_write(env, ext, rn, v);
 }
 
-void mb_cpu_unassigned_access(CPUState *cs, hwaddr addr,
-                              bool is_write, bool is_exec, int is_asi,
-                              unsigned size)
+void mb_cpu_transaction_failed(CPUState *cs, hwaddr physaddr, vaddr addr,
+                               unsigned size, MMUAccessType access_type,
+                               int mmu_idx, MemTxAttrs attrs,
+                               MemTxResult response, uintptr_t retaddr)
 {
     MicroBlazeCPU *cpu;
     CPUMBState *env;
-
-    qemu_log_mask(CPU_LOG_INT, "Unassigned " TARGET_FMT_plx " wr=%d exe=%d\n",
-             addr, is_write ? 1 : 0, is_exec ? 1 : 0);
-    if (cs == NULL) {
-        return;
-    }
+    qemu_log_mask(CPU_LOG_INT, "Transaction failed: vaddr 0x%" VADDR_PRIx
+                  " physaddr 0x" TARGET_FMT_plx "size %d access type %s\n",
+                  addr, physaddr, size,
+                  access_type == MMU_INST_FETCH ? "INST_FETCH" :
+                  (access_type == MMU_DATA_LOAD ? "DATA_LOAD" : "DATA_STORE"));
     cpu = MICROBLAZE_CPU(cs);
     env = &cpu->env;
     if (!(env->sregs[SR_MSR] & MSR_EE)) {
@@ -505,7 +505,7 @@ void mb_cpu_unassigned_access(CPUState *cs, hwaddr addr,
     }
 
     env->sregs[SR_EAR] = addr;
-    if (is_exec) {
+    if (access_type == MMU_INST_FETCH) {
         if ((env->pvr.regs[2] & PVR2_IOPB_BUS_EXC_MASK)) {
             env->sregs[SR_ESR] = ESR_EC_INSN_BUS;
             helper_raise_exception(env, EXCP_HW_EXCP);
-- 
2.19.2


