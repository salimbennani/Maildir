Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:20:29 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id DA680580224
	for <like.xu@linux.intel.com>; Fri, 30 Nov 2018 08:15:02 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga007-1.jf.intel.com with ESMTP; 30 Nov 2018 08:15:02 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AvSL5FhwJldZ/UuHXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0uoXK/ad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWVOXshTWCJBDI2y?=
 =?us-ascii?q?bJUBAPYcM+ZArYTzpVQDoQawCAWwGuzv0SRFhmPq0aAgz+gtDR3K0Q4mEtkTsH?=
 =?us-ascii?q?rUttL1NKIKXO6v0qbI0SvMb+lL0jn68ofJcg0uru+IXbJ0bMHczlEvGB3ZjlqO?=
 =?us-ascii?q?s4zpJTaV2f4NsmeG8eVgUeavhnUjqwFwpDig3N0sio7TioIS0FDE+jx0zYAoLt?=
 =?us-ascii?q?O7UE52ecCoHIdTui2AKod6X8AvT3t2tCs0yrAKo4O3cSoSxJg5xhPTd/6Kfo2G?=
 =?us-ascii?q?4h/gT+mdPTJ1iX1mdb++iBu/9FasxvH5W8SxzlpHoSRIn9/RvX4XzRPT8NKISv?=
 =?us-ascii?q?5l80ehxzmP0wfT5/lAIUA1jqrbN4UhzqQ/lpoVrETPBCj2mF/5jKOOd0Uk/Pan?=
 =?us-ascii?q?6/j/b7n4upORNJV4hhzjPqktgMCzH+o1PwgUU2SG++mwzLjj8lf4QLVOgP02iK?=
 =?us-ascii?q?7ZsJXCKMQCuKG5BhJV3p8+5BmhETepztAYkWAcI1JCZRKHiZTmNE/VIPz/Cfe/?=
 =?us-ascii?q?glesnylxy/HJI73sGpHNLnnFkLf8crdx8U9cyAwvzd9B45JYEK0OIPX2WkLqst?=
 =?us-ascii?q?zYCRk5MwOyw+b6Etl90ZkeWW2XDq+DLKzSqUOI5v4oI+SUYI8VuTX9JOY/6//h?=
 =?us-ascii?q?kH80glsdfaiv3ZsKZ3G0BPVmI0OFYXXyhtcNC3sFvg07TL+itVuZTDQGZ2quR7?=
 =?us-ascii?q?luoXY/CZm6FsHFQYaihqHH2z20WZhfZ2RDA1bLFm/0doKCQLAVZSePZ8NsjDEA?=
 =?us-ascii?q?BoWnUJIrgBSntQvmzOh+I+/JvyEVq5/nkcJ4/vDejg0a8ztyAMKAlWaXQDZvg2?=
 =?us-ascii?q?kKSjQqib15ulF30VyZ0KJ10MBfQPVa/fRPGiM7M5LHxv0yX9n7QAXHVtCSDl+j?=
 =?us-ascii?q?Wti8DDo2S8os394IbAB2HND03T7Z2C//O7IJmqbDIZUl/q/Y2zClP8thxmyA0a?=
 =?us-ascii?q?Awg1QiRuNLNGuvnKk58BLcUd2a236FnrqnIPxPlBXG832OmC/X5BlV?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AdAACbYQFchxHrdtBjHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGBMCqCOIN5iBhfiyuCDZdIgXMUGBSHdiI0CQ0BAwEBAQEBAQIBEwEBAQo?=
 =?us-ascii?q?LCQgbDiMMgjYFAgMaAQaCXAECAwECIAQZAQEECikBAgMBAgYBAQoLBwYCAh8DB?=
 =?us-ascii?q?AICAwEeEgEFAQ4OBhMFglFLggIBBJp1PIodcHwzgnYBAQWHKAgSeYcmg2mBVz+?=
 =?us-ascii?q?DbjWIBYJXix6VGQcCgh4EjxUYkR8smCIPIYElgg0zGjB0BoI1ghsMFxKITIU/Q?=
 =?us-ascii?q?TGBB4tSgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AdAACbYQFchxHrdtBjHQEBBQEHBQGBUQgBCwGBMCqCOIN?=
 =?us-ascii?q?5iBhfiyuCDZdIgXMUGBSHdiI0CQ0BAwEBAQEBAQIBEwEBAQoLCQgbDiMMgjYFA?=
 =?us-ascii?q?gMaAQaCXAECAwECIAQZAQEECikBAgMBAgYBAQoLBwYCAh8DBAICAwEeEgEFAQ4?=
 =?us-ascii?q?OBhMFglFLggIBBJp1PIodcHwzgnYBAQWHKAgSeYcmg2mBVz+DbjWIBYJXix6VG?=
 =?us-ascii?q?QcCgh4EjxUYkR8smCIPIYElgg0zGjB0BoI1ghsMFxKITIU/QTGBB4tSgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,299,1539673200"; 
   d="scan'208";a="42258856"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 30 Nov 2018 08:14:38 -0800
Received: from localhost ([::1]:33605 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gSlR7-0003kU-EN
	for like.xu@linux.intel.com; Fri, 30 Nov 2018 11:14:37 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:45322)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <peter.maydell@linaro.org>) id 1gSlQr-0003kF-JE
	for qemu-devel@nongnu.org; Fri, 30 Nov 2018 11:14:22 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <peter.maydell@linaro.org>) id 1gSlQq-0007Qt-3y
	for qemu-devel@nongnu.org; Fri, 30 Nov 2018 11:14:21 -0500
Received: from mail-oi1-x243.google.com ([2607:f8b0:4864:20::243]:39750)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <peter.maydell@linaro.org>)
	id 1gSlQp-0007Pn-AZ
	for qemu-devel@nongnu.org; Fri, 30 Nov 2018 11:14:20 -0500
Received: by mail-oi1-x243.google.com with SMTP id i6so5155921oia.6
	for <qemu-devel@nongnu.org>; Fri, 30 Nov 2018 08:14:17 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linaro.org; s=google;
	h=mime-version:references:in-reply-to:from:date:message-id:subject:to
	:cc; bh=HjqsSRFKZvgdIE5T/EMuAUCdA3XdTnJV4dd8J/1ZuCI=;
	b=iQjtke6AHjf8s6tUKEnhd1/cgbe9ehWCGWzM3tinr3bHhrPficp7Bt7gMw4fmZyWCS
	hJ7Rg4YRR/vhEgIM2RM4DcKOYXTzQ2358WVFKFEC7+1qr/OsbKAjRAEAaOa3pEulOeDT
	DO2O2hYatCU80N/xUgEkJmBSm/6QWjFGy4Ahg=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:mime-version:references:in-reply-to:from:date
	:message-id:subject:to:cc;
	bh=HjqsSRFKZvgdIE5T/EMuAUCdA3XdTnJV4dd8J/1ZuCI=;
	b=KFNF4gTrvMNNmBvEQbWSGfkYeCT+RYmiL4WfENTSXmUlXtomshGHo5aL9PE1nFL6Cu
	IaeQZNT5byadWcO000uNQ90RziDurR9tWuXzWC1Z+fwuDEemhIctPR63gMJYDOg5YZD5
	+hTc4fUbAZ6YQ8o+kL+P364Cmf18mmXsHPvMNFUXajLyFlAC1KaO5RmvcFCcyJ+6eKea
	BXGMF3UHETX3Is5/XI5ICamS+nr8DOT5R8yw19f6IBnt5mcwF4JMppZIlTefgKRj/PZG
	bsgkp6RV+FnLWWglI9lc9O0+qO4PxbmkRKvFEJ1o9ImHtJtjD8bYDQ3AeC36o8Ni07b/
	gIqA==
X-Gm-Message-State: AA+aEWbxQdqrKozg8LY+pR51ZntwzN0WuLu1xNxN+FRderMciutJT1GL
	ggp5voATJW41+lV/xbd4uFFooY9pfNzqrVfqdnNZrA==
X-Google-Smtp-Source: AFSGD/UjdP1oIVsn8tpXlm3X1TOfo4kztSKgp/jMDnlRbciV7u+uEg5r2A/zEe3g5eOoB/i+U3rc9UoMDWNTJjND/gA=
X-Received: by 2002:aca:b58b:: with SMTP id e133mr3426242oif.25.1543594457118; 
	Fri, 30 Nov 2018 08:14:17 -0800 (PST)
MIME-Version: 1.0
References: <20181120212553.8480-1-aaron@os.amperecomputing.com>
	<20181120212553.8480-9-aaron@os.amperecomputing.com>
In-Reply-To: <20181120212553.8480-9-aaron@os.amperecomputing.com>
From: Peter Maydell <peter.maydell@linaro.org>
Date: Fri, 30 Nov 2018 16:14:05 +0000
Message-ID: <CAFEAcA_kcjm2F_1h2hRC_wW4hdozCQDzY1RmRTGTkEH+De+-Ag@mail.gmail.com>
To: Aaron Lindsay <aaron@os.amperecomputing.com>
Content-Type: text/plain; charset="UTF-8"
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 2607:f8b0:4864:20::243
Subject: Re: [Qemu-devel] [PATCH v8 08/13] target/arm: Add array for
 supported PMU events, generate PMCEID[01]_EL0
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Wei Huang <wei@redhat.com>, Michael Spradling <mspradli@codeaurora.org>,
	Digant Desai <digantd@codeaurora.org>,
	Peter Crosthwaite <crosthwaite.peter@gmail.com>,
	Richard Henderson <richard.henderson@linaro.org>,
	QEMU Developers <qemu-devel@nongnu.org>,
	Alistair Francis <alistair.francis@xilinx.com>,
	qemu-arm <qemu-arm@nongnu.org>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Tue, 20 Nov 2018 at 21:26, Aaron Lindsay
<aaron@os.amperecomputing.com> wrote:
>
> This commit doesn't add any supported events, but provides the framework
> for adding them. We store the pm_event structs in a simple array, and
> provide the mapping from the event numbers to array indexes in the
> supported_event_map array. Because the value of PMCEID[01] depends upon
> which events are supported at runtime, generate it dynamically.
>
> Signed-off-by: Aaron Lindsay <alindsay@codeaurora.org>
> ---
>  target/arm/cpu.c    | 19 +++++++++------
>  target/arm/cpu.h    | 10 ++++++++
>  target/arm/cpu64.c  |  4 ----
>  target/arm/helper.c | 57 +++++++++++++++++++++++++++++++++++++++++++++
>  4 files changed, 79 insertions(+), 11 deletions(-)
>
> diff --git a/target/arm/cpu.c b/target/arm/cpu.c
> index f7bad04f60..208a08e867 100644
> --- a/target/arm/cpu.c
> +++ b/target/arm/cpu.c
> @@ -1019,10 +1019,19 @@ static void arm_cpu_realizefn(DeviceState *dev, Error **errp)
>
>      if (!cpu->has_pmu) {
>          unset_feature(env, ARM_FEATURE_PMU);
> +    }
> +    if (arm_feature(env, ARM_FEATURE_PMU)) {
> +        cpu->pmceid0 = get_pmceid(&cpu->env, 0);
> +        cpu->pmceid1 = get_pmceid(&cpu->env, 1);
> +
> +        if (!kvm_enabled()) {
> +            arm_register_pre_el_change_hook(cpu, &pmu_pre_el_change, 0);
> +            arm_register_el_change_hook(cpu, &pmu_post_el_change, 0);
> +        }
> +    } else {
>          cpu->id_aa64dfr0 &= ~0xf00;
> -    } else if (!kvm_enabled()) {
> -        arm_register_pre_el_change_hook(cpu, &pmu_pre_el_change, 0);
> -        arm_register_el_change_hook(cpu, &pmu_post_el_change, 0);
> +        cpu->pmceid0 = 0;
> +        cpu->pmceid1 = 0;
>      }
>
>      if (!arm_feature(env, ARM_FEATURE_EL2)) {
> @@ -1665,8 +1674,6 @@ static void cortex_a7_initfn(Object *obj)
>      cpu->id_pfr0 = 0x00001131;
>      cpu->id_pfr1 = 0x00011011;
>      cpu->id_dfr0 = 0x02010555;
> -    cpu->pmceid0 = 0x00000000;
> -    cpu->pmceid1 = 0x00000000;
>      cpu->id_afr0 = 0x00000000;
>      cpu->id_mmfr0 = 0x10101105;
>      cpu->id_mmfr1 = 0x40000000;
> @@ -1712,8 +1719,6 @@ static void cortex_a15_initfn(Object *obj)
>      cpu->id_pfr0 = 0x00001131;
>      cpu->id_pfr1 = 0x00011011;
>      cpu->id_dfr0 = 0x02010555;
> -    cpu->pmceid0 = 0x0000000;
> -    cpu->pmceid1 = 0x00000000;
>      cpu->id_afr0 = 0x00000000;
>      cpu->id_mmfr0 = 0x10201105;
>      cpu->id_mmfr1 = 0x20000000;
> diff --git a/target/arm/cpu.h b/target/arm/cpu.h
> index 50de58e4a2..32c3397948 100644
> --- a/target/arm/cpu.h
> +++ b/target/arm/cpu.h
> @@ -993,6 +993,16 @@ void pmu_op_finish(CPUARMState *env);
>  void pmu_pre_el_change(ARMCPU *cpu, void *ignored);
>  void pmu_post_el_change(ARMCPU *cpu, void *ignored);
>
> +/*
> + * get_pmceid
> + * @env: CPUARMState
> + *
> + * Return the PMCEID[01]_EL0 register values corresponding to the counters
> + * which are supported given the current configuration (`which` is 0 or 1 to
> + * indicate which PMCEID should be returned)
> + */

Nit: you should have a line here below the one for "@env"
for the "@which" parameter, and the reference to it in
the text should just be "@which", not "`which`" (or just
put that description in the line saying what @which is
rather than having it in a parenthetical).

> +uint64_t get_pmceid(CPUARMState *env, unsigned which);
> +
>  /* SCTLR bit meanings. Several bits have been reused in newer
>   * versions of the architecture; in that case we define constants
>   * for both old and new bit meanings. Code which tests against those
> diff --git a/target/arm/cpu64.c b/target/arm/cpu64.c
> index 873f059bf2..a1aad772fa 100644
> --- a/target/arm/cpu64.c
> +++ b/target/arm/cpu64.c
> @@ -138,8 +138,6 @@ static void aarch64_a57_initfn(Object *obj)
>      cpu->isar.id_isar6 = 0;
>      cpu->isar.id_aa64pfr0 = 0x00002222;
>      cpu->id_aa64dfr0 = 0x10305106;
> -    cpu->pmceid0 = 0x00000000;
> -    cpu->pmceid1 = 0x00000000;
>      cpu->isar.id_aa64isar0 = 0x00011120;
>      cpu->id_aa64mmfr0 = 0x00001124;
>      cpu->dbgdidr = 0x3516d000;
> @@ -246,8 +244,6 @@ static void aarch64_a72_initfn(Object *obj)
>      cpu->isar.id_isar5 = 0x00011121;
>      cpu->isar.id_aa64pfr0 = 0x00002222;
>      cpu->id_aa64dfr0 = 0x10305106;
> -    cpu->pmceid0 = 0x00000000;
> -    cpu->pmceid1 = 0x00000000;
>      cpu->isar.id_aa64isar0 = 0x00011120;
>      cpu->id_aa64mmfr0 = 0x00001124;
>      cpu->dbgdidr = 0x3516d000;
> diff --git a/target/arm/helper.c b/target/arm/helper.c
> index 75f054fe79..68e9743606 100644
> --- a/target/arm/helper.c
> +++ b/target/arm/helper.c
> @@ -1009,6 +1009,63 @@ static inline uint64_t pmu_counter_mask(CPUARMState *env)
>    return (1 << 31) | ((1 << pmu_num_counters(env)) - 1);
>  }
>
> +typedef struct pm_event {
> +    uint16_t number; /* PMEVTYPER.evtCount is 16 bits wide */
> +    /* If the event is supported on this CPU (used to generate PMCEID[01]) */
> +    bool (*supported)(CPUARMState *);
> +    /*
> +     * Retrieve the current count of the underlying event. The programmed
> +     * counters hold a difference from the return value from this function
> +     */
> +    uint64_t (*get_count)(CPUARMState *);
> +} pm_event;
> +
> +static const pm_event pm_events[] = {
> +};
> +
> +/*
> + * Note: Before increasing MAX_EVENT_ID beyond 0x3f into the 0x40xx range of
> + * events (i.e. the statistical profiling extension), this implementation
> + * should first be updated to something sparse instead of the current
> + * supported_event_map[] array.
> + */
> +#define MAX_EVENT_ID 0x0
> +#define UNSUPPORTED_EVENT UINT16_MAX
> +static uint16_t supported_event_map[MAX_EVENT_ID + 1];
> +
> +/*
> + * Called upon initialization to build PMCEID0_EL0 or PMCEID1_EL0 (indicated by
> + * 'which'). We also use it to build a map of ARM event numbers to indices in
> + * our pm_events array.
> + *
> + * Note: Events in the 0x40XX range are not currently supported.
> + */
> +uint64_t get_pmceid(CPUARMState *env, unsigned which)
> +{
> +    uint64_t pmceid = 0;
> +    unsigned int i;
> +
> +    assert(which <= 1);
> +
> +    for (i = 0; i < ARRAY_SIZE(supported_event_map); i++) {
> +        supported_event_map[i] = UNSUPPORTED_EVENT;
> +    }
> +
> +    for (i = 0; i < ARRAY_SIZE(pm_events); i++) {
> +        const pm_event *cnt = &pm_events[i];
> +        assert(cnt->number <= MAX_EVENT_ID);
> +        /* We do not currently support events in the 0x40xx range */
> +        assert(cnt->number <= 0x3f);
> +
> +        if ((cnt->number & 0x20) == (which << 6) &&
> +                cnt->supported(env)) {
> +            pmceid |= (1 << (cnt->number & 0x1f));
> +            supported_event_map[cnt->number] = i;
> +        }
> +    }
> +    return pmceid;
> +}
> +

Otherwise
Reviewed-by: Peter Maydell <peter.maydell@linaro.org>

thanks
-- PMM

