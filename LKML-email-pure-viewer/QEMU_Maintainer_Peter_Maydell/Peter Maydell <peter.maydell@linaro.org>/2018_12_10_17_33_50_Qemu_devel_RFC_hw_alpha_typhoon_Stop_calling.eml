Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 11 Dec 2018 08:41:02 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id AE4B15807C6
	for <like.xu@linux.intel.com>; Mon, 10 Dec 2018 09:37:59 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 10 Dec 2018 09:38:01 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AQj5USBUDj/NxMz1EIb4874ksE3DV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYbReGt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KptVRTmij?=
 =?us-ascii?q?oINyQh/W/XlMJ+gqFVrhWuqBJw3oDUeIOYOvhxc6/Ac94WWXROXt1KWiBdAY6x?=
 =?us-ascii?q?dZcDAvAdMepEqYT2ulsArQG5BQmpHO7h0CFHhmPo0q0gzu8vFhvJ3Qw9EN0QtH?=
 =?us-ascii?q?TUqMj+OaAKUe+r0KnH0y/DY+lT2Tjn6InHbw4uofWIXb9rdcrRyE8vGBnfjlWX?=
 =?us-ascii?q?s4DlOCmV1usUvmWd8uFuVvqvhnY5pw1toTWj3NoghpTKi44P1FzJ+yV0zJwoKd?=
 =?us-ascii?q?C6UEJ3f8KoHIdNuyyfNIZ5Wd8uTmR1tCkn1rELvJu2cDYMxZ863RDQceaHfJKN?=
 =?us-ascii?q?4h/7VOaePzN4hHV9dbK7hhay6lSgyvbmWsm71lZKszBJkt7WtnACzxDT686HRe?=
 =?us-ascii?q?Vh/kq5xzqDywPe5vtZLUwplqfXMYAtz7Awm5YJrEjOHDf6mEDsg6+XckUk9PKo?=
 =?us-ascii?q?6+PiYrj+v5+TKYp0ihznPqszhMO/H/o3MgwXU2eA/uS8ybvj8lHnT7VRifE2lq?=
 =?us-ascii?q?jZsJPEKsgBqa+5HhdY0oIi6xa5Ejen384UnXgBLFJZZh2Hi5LlNE3JIPD9Fvq/?=
 =?us-ascii?q?hVOskDFkx/DAI73tGJLNLmLMkLv5Z7Zy91ZcyBYvzdBY/59UDrABIPHtVUPru9?=
 =?us-ascii?q?3YEwQ0Mwi1w+bhFdV82ZkSWWOJAq+FLqzStUWE6f4oI+mJN8covi3gIa0l++L2?=
 =?us-ascii?q?li1+3lscZrWym50Qbn++A7JhOUreZHPthtIIFyANphY/S+rxz0SPVCMWa3usUq?=
 =?us-ascii?q?Zv2zcgFYjzCI7CQpyq0qWM2Tr+EpBIa2QDEF2VDHrza62CXPEDbj/UJdVuxScZ?=
 =?us-ascii?q?X7qsQJN0yBe1qQXhwKBmJOeHxipNrJ/myZ156vPekTk08jp7Cdnb1HuCHE9umW?=
 =?us-ascii?q?ZdfzIq0bo3hEVsxlqH1eAsm/FEGMYV4vpYXgo+MbbYzupzEde0XRjOKITaAG26?=
 =?us-ascii?q?S8mrVGliBuk6xMUDNh5w?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BcBAA7ow5cmBHrdtBkH4F4gTGCYoxyi?=
 =?us-ascii?q?zCUYoR8gXMUGBSHbSI0CQ0BAwEBAQEBAQIBEwEBAQEBCAsLBhsOL4I2BQIDGAm?=
 =?us-ascii?q?CXwQCLwETCikDAwECBgJICAMBbAWDHIICAQSnRoVAhGCHcoQvgVc/jn8CiTmXP?=
 =?us-ascii?q?AcCgiEEjx8LGIFciECHISyZBIFGgg4zGjCDL4InF44dQTGBB4ohgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0BcBAA7ow5cmBHrdtBkH4F4gTGCYoxyizCUYoR8gXMUGBS?=
 =?us-ascii?q?HbSI0CQ0BAwEBAQEBAQIBEwEBAQEBCAsLBhsOL4I2BQIDGAmCXwQCLwETCikDA?=
 =?us-ascii?q?wECBgJICAMBbAWDHIICAQSnRoVAhGCHcoQvgVc/jn8CiTmXPAcCgiEEjx8LGIF?=
 =?us-ascii?q?ciECHISyZBIFGgg4zGjCDL4InF44dQTGBB4ohgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,339,1539673200"; 
   d="scan'208";a="54574853"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 10 Dec 2018 09:37:58 -0800
Received: from localhost ([::1]:33986 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gWPVF-0003B6-Nx
	for like.xu@linux.intel.com; Mon, 10 Dec 2018 12:37:57 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:46613)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <pm215@archaic.org.uk>) id 1gWPRN-00080l-3f
	for qemu-devel@nongnu.org; Mon, 10 Dec 2018 12:33:59 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <pm215@archaic.org.uk>) id 1gWPRK-0004Pb-Ln
	for qemu-devel@nongnu.org; Mon, 10 Dec 2018 12:33:56 -0500
Received: from orth.archaic.org.uk ([2001:8b0:1d0::2]:53448)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <pm215@archaic.org.uk>)
	id 1gWPRK-0004Oe-Cg
	for qemu-devel@nongnu.org; Mon, 10 Dec 2018 12:33:54 -0500
Received: from pm215 by orth.archaic.org.uk with local (Exim 4.89)
	(envelope-from <pm215@archaic.org.uk>)
	id 1gWPRH-0000QH-3P; Mon, 10 Dec 2018 17:33:51 +0000
From: Peter Maydell <peter.maydell@linaro.org>
To: qemu-devel@nongnu.org
Date: Mon, 10 Dec 2018 17:33:50 +0000
Message-Id: <20181210173350.13073-1-peter.maydell@linaro.org>
X-Mailer: git-send-email 2.19.2
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 2001:8b0:1d0::2
Subject: [Qemu-devel] [RFC] hw/alpha/typhoon: Stop calling
 cpu_unassigned_access()
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Richard Henderson <rth@twiddle.net>, patches@linaro.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

The typhoon MemoryRegionOps callbacks directly call
cpu_unassigned_access(), presumably as the old-fashioned way
to provoke a CPU exception.  This won't work since commit
6ad4d7eed05a1e235 when we switched Alpha over to the
transaction_failed hook API, because now cpu_unassigned_access()
is a no-op for Alpha.

Make the MemoryRegionOps callbacks use the read_with_attrs
and write_with_attrs hooks, so they can signal a failure
that should cause a CPU exception by returning MEMTX_ERROR.

Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
---
RFC because untested, since I don't have an alpha test image.

 hw/alpha/typhoon.c | 47 ++++++++++++++++++++++++++--------------------
 1 file changed, 27 insertions(+), 20 deletions(-)

diff --git a/hw/alpha/typhoon.c b/hw/alpha/typhoon.c
index 8004afe45b3..cbacea5fbd8 100644
--- a/hw/alpha/typhoon.c
+++ b/hw/alpha/typhoon.c
@@ -75,7 +75,9 @@ static void cpu_irq_change(AlphaCPU *cpu, uint64_t req)
     }
 }
 
-static uint64_t cchip_read(void *opaque, hwaddr addr, unsigned size)
+static MemTxResult cchip_read(void *opaque, hwaddr addr,
+                              uint64_t *data, unsigned size,
+                              MemTxAttrs attrs)
 {
     CPUState *cpu = current_cpu;
     TyphoonState *s = opaque;
@@ -196,11 +198,11 @@ static uint64_t cchip_read(void *opaque, hwaddr addr, unsigned size)
         break;
 
     default:
-        cpu_unassigned_access(cpu, addr, false, false, 0, size);
-        return -1;
+        return MEMTX_ERROR;
     }
 
-    return ret;
+    *data = ret;
+    return MEMTX_OK;
 }
 
 static uint64_t dchip_read(void *opaque, hwaddr addr, unsigned size)
@@ -209,7 +211,8 @@ static uint64_t dchip_read(void *opaque, hwaddr addr, unsigned size)
     return 0;
 }
 
-static uint64_t pchip_read(void *opaque, hwaddr addr, unsigned size)
+static MemTxResult pchip_read(void *opaque, hwaddr addr, uint64_t *data,
+                              unsigned size, MemTxAttrs attrs)
 {
     TyphoonState *s = opaque;
     uint64_t ret = 0;
@@ -294,15 +297,16 @@ static uint64_t pchip_read(void *opaque, hwaddr addr, unsigned size)
         break;
 
     default:
-        cpu_unassigned_access(current_cpu, addr, false, false, 0, size);
-        return -1;
+        return MEMTX_ERROR;
     }
 
-    return ret;
+    *data = ret;
+    return MEMTX_OK;
 }
 
-static void cchip_write(void *opaque, hwaddr addr,
-                        uint64_t val, unsigned size)
+static MemTxResult cchip_write(void *opaque, hwaddr addr,
+                               uint64_t val, unsigned size,
+                               MemTxAttrs attrs)
 {
     TyphoonState *s = opaque;
     uint64_t oldval, newval;
@@ -446,9 +450,10 @@ static void cchip_write(void *opaque, hwaddr addr,
         break;
 
     default:
-        cpu_unassigned_access(current_cpu, addr, true, false, 0, size);
-        return;
+        return MEMTX_ERROR;
     }
+
+    return MEMTX_OK;
 }
 
 static void dchip_write(void *opaque, hwaddr addr,
@@ -457,8 +462,9 @@ static void dchip_write(void *opaque, hwaddr addr,
     /* Skip this.  It's all related to DRAM timing and setup.  */
 }
 
-static void pchip_write(void *opaque, hwaddr addr,
-                        uint64_t val, unsigned size)
+static MemTxResult pchip_write(void *opaque, hwaddr addr,
+                               uint64_t val, unsigned size,
+                               MemTxAttrs attrs)
 {
     TyphoonState *s = opaque;
     uint64_t oldval;
@@ -553,14 +559,15 @@ static void pchip_write(void *opaque, hwaddr addr,
         break;
 
     default:
-        cpu_unassigned_access(current_cpu, addr, true, false, 0, size);
-        return;
+        return MEMTX_ERROR;
     }
+
+    return MEMTX_OK;
 }
 
 static const MemoryRegionOps cchip_ops = {
-    .read = cchip_read,
-    .write = cchip_write,
+    .read_with_attrs = cchip_read,
+    .write_with_attrs = cchip_write,
     .endianness = DEVICE_LITTLE_ENDIAN,
     .valid = {
         .min_access_size = 8,
@@ -587,8 +594,8 @@ static const MemoryRegionOps dchip_ops = {
 };
 
 static const MemoryRegionOps pchip_ops = {
-    .read = pchip_read,
-    .write = pchip_write,
+    .read_with_attrs = pchip_read,
+    .write_with_attrs = pchip_write,
     .endianness = DEVICE_LITTLE_ENDIAN,
     .valid = {
         .min_access_size = 8,
-- 
2.19.2


