Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 28 Nov 2018 08:49:12 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 1304E58041B
	for <like.xu@linux.intel.com>; Tue, 27 Nov 2018 11:40:52 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by fmsmga001-1.fm.intel.com with ESMTP; 27 Nov 2018 11:40:51 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AjQqLxRPKOyi0jg95z/8l6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0I/X+rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZUMhfVzJPDICy?=
 =?us-ascii?q?b4QAE+UOIORXoIfyqVUTtRuzBwuiCezyxjJGmnP5w7Y63v89EQHfxgEsA84CvW?=
 =?us-ascii?q?7JoNjzKawcUfq1zK7NzTjbYP1ZxCr955LSch88pvGHQLB+ftDKxkksEAPFlUmQ?=
 =?us-ascii?q?opHiMjyL1uQCqXOU7+lnVeK0l24qsBtxrSayyccskIbJmpgZxUzD9SV82Ys4I8?=
 =?us-ascii?q?CzRk1jYdO8DpdcqyKXO5FrTs8/QGxkojg2x7MGtJKhYSQHyowrywDDZ/GDaYSE?=
 =?us-ascii?q?/xzuWPiLLTtlh39odqiziwix/EWm1+byTNO70ExQoSpAitTMtm4C1xjU6sWfTv?=
 =?us-ascii?q?t9/1yh2SqU1wzJ5eFEJ100mbDcK547zb48jpsTsULdES/qgEj6krOae0Y+9uS1?=
 =?us-ascii?q?9ujqYa/qqoGSOoJ0kA3yL6YjltS6AesiMwgOW2ab+f671L3m5UD5WatFjvgrkq?=
 =?us-ascii?q?XArZ/VO9obqbC9AwNMyYkj7Au/DzG639sGhnkLK1ZFeBOEj4f3IV3PL+34AO+7?=
 =?us-ascii?q?g1Stljdr2v/HMqfgApXLMnjMjrPhcaxh5E5bzQo+1tZf55VSCrEOJvLzR1X9tN?=
 =?us-ascii?q?vCDh82KwC02froCM1h1oMCXmKCGquZMKLRsVCW/O4uLPSMaZQRuDb8Lfgl+vHv?=
 =?us-ascii?q?gWU4mV8bYammw58XZGqkEfRhJkXKKUfqmcoLRGcWohIlHqutjFyZTSUVYXG0UK?=
 =?us-ascii?q?QhoDYhB8WjBIbHQ4mrx7uZwCa8GIYRf21DFxWAHGnlc9a5XewRYneXK85ljjtW?=
 =?us-ascii?q?TLWkVsot2A+jsErgxqN6I/HI0isfs53lyZ5y/eKEjgw49zF/E5GA1XqQRXp/hG?=
 =?us-ascii?q?ICSmwK2/VaqFZ2j36F3bL5y9hFD9Fa+rsdVw4gPpfaw/Z3TdTvQA/IY/+TRVqm?=
 =?us-ascii?q?S8ngCjY0GIEf2dgLNmtxBty4gheL/yOgALgOi/TfCZw9+KHbxGTZPctxy3/akq?=
 =?us-ascii?q?Imig91EYN0KWS6i/snpEDoDInTnhDczv7yeA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAAC5nP1bhxHrdtBjGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBgTCCTxOMEV+LKIINl0CBcxQYFIRAgxoiNAk?=
 =?us-ascii?q?NAQMBAQEBAQECARMBAQEKCwkIGw4vgjYFAgMaAQaCXAECAwECJB8KKQMDAQIGA?=
 =?us-ascii?q?QEKGAkaAwgDAQsFSRMFgxyCAgEEpwYzii2MDReBQD+BEYMShQGFWwKJJ4FulHc?=
 =?us-ascii?q?JkSUjiVKHOZg3gUaCDTMaCBsVgyeCJxcSjiMpMYEHHIpzgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ABAAC5nP1bhxHrdtBjGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBgTCCTxOMEV+LKIINl0CBcxQYFIRAgxoiNAkNAQMBAQEBAQECA?=
 =?us-ascii?q?RMBAQEKCwkIGw4vgjYFAgMaAQaCXAECAwECJB8KKQMDAQIGAQEKGAkaAwgDAQs?=
 =?us-ascii?q?FSRMFgxyCAgEEpwYzii2MDReBQD+BEYMShQGFWwKJJ4FulHcJkSUjiVKHOZg3g?=
 =?us-ascii?q?UaCDTMaCBsVgyeCJxcSjiMpMYEHHIpzgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,287,1539673200"; 
   d="scan'208";a="55077156"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 27 Nov 2018 11:40:50 -0800
Received: from localhost ([::1]:44204 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gRjE1-0004rN-ON
	for like.xu@linux.intel.com; Tue, 27 Nov 2018 14:40:49 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:40072)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <ehabkost@redhat.com>) id 1gRjDq-0004r4-PD
	for qemu-devel@nongnu.org; Tue, 27 Nov 2018 14:40:40 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <ehabkost@redhat.com>) id 1gRjDn-0005ne-Ge
	for qemu-devel@nongnu.org; Tue, 27 Nov 2018 14:40:38 -0500
Received: from mx1.redhat.com ([209.132.183.28]:39112)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <ehabkost@redhat.com>) id 1gRjDl-0005cO-E3
	for qemu-devel@nongnu.org; Tue, 27 Nov 2018 14:40:35 -0500
Received: from smtp.corp.redhat.com (int-mx08.intmail.prod.int.phx2.redhat.com
	[10.5.11.23])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 8D3CF30842AA;
	Tue, 27 Nov 2018 19:40:25 +0000 (UTC)
Received: from localhost (ovpn-116-21.gru2.redhat.com [10.97.116.21])
	by smtp.corp.redhat.com (Postfix) with ESMTP id C320319748;
	Tue, 27 Nov 2018 19:40:20 +0000 (UTC)
Date: Tue, 27 Nov 2018 17:40:19 -0200
From: Eduardo Habkost <ehabkost@redhat.com>
To: =?iso-8859-1?Q?Marc-Andr=E9?= Lureau <marcandre.lureau@redhat.com>
Message-ID: <20181127194019.GQ18284@habkost.net>
References: <20181127092801.21777-1-marcandre.lureau@redhat.com>
	<20181127092801.21777-16-marcandre.lureau@redhat.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=iso-8859-1
Content-Disposition: inline
In-Reply-To: <20181127092801.21777-16-marcandre.lureau@redhat.com>
User-Agent: Mutt/1.9.2 (2017-12-15)
X-Scanned-By: MIMEDefang 2.84 on 10.5.11.23
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.40]);
	Tue, 27 Nov 2018 19:40:26 +0000 (UTC)
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH for-3.2 v4 15/28] hw: apply accel compat
 properties without touching globals
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Stefano Stabellini <sstabellini@kernel.org>, qemu-devel@nongnu.org,
	Paolo Bonzini <pbonzini@redhat.com>, imammedo@redhat.com,
	Anthony Perard <anthony.perard@citrix.com>,
	"open list:X86" <xen-devel@lists.xenproject.org>,
	Andreas =?iso-8859-1?Q?F=E4rber?= <afaerber@suse.de>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Tue, Nov 27, 2018 at 01:27:48PM +0400, Marc-Andr=E9 Lureau wrote:
> Introduce object_apply_global_props() function, to apply compatibility
> properties from a GPtrArray.
>=20
> For accel compatibility properties, apply them during
> device_post_init(), after accel_register_compat_props() has set them.
>=20
> To populate the compatibility properties, introduce SET_COMPAT(), a
> more generic version of SET_MACHINE_COMPAT() that can set compat
> properties on other objects than Machine, and using GPtrArray.
>=20
> Signed-off-by: Marc-Andr=E9 Lureau <marcandre.lureau@redhat.com>
> ---
>  include/hw/qdev-core.h | 13 +++++++++++++
>  include/qom/object.h   |  3 +++
>  include/sysemu/accel.h |  4 +---
>  accel/accel.c          | 12 ------------
>  hw/core/qdev.c         | 11 +++++++++++
>  hw/xen/xen-common.c    | 38 +++++++++++++++++++-------------------
>  qom/object.c           | 25 +++++++++++++++++++++++++
>  vl.c                   |  2 +-
>  8 files changed, 73 insertions(+), 35 deletions(-)
>=20
> diff --git a/include/hw/qdev-core.h b/include/hw/qdev-core.h
> index a24d0dd566..82afd3c50d 100644
> --- a/include/hw/qdev-core.h
> +++ b/include/hw/qdev-core.h
> @@ -267,6 +267,19 @@ typedef struct GlobalProperty {
>      Error **errp;
>  } GlobalProperty;
> =20
> +#define SET_COMPAT(S, COMPAT)                                       \
> +    do {                                                            \
> +        int i;                                                      \
> +        static GlobalProperty props[] =3D {                           =
\
> +            COMPAT                                                  \
> +        };                                                          \
> +        for (i =3D 0; i < G_N_ELEMENTS(props); i++) {                 =
\
> +            g_ptr_array_add((S)->compat_props, (void *)&props[i]);  \
> +        }                                                           \
> +    } while (0)

I think this macro would be an acceptable alternative to the
existing SET_MACHINE_COMPAT macro trickery, but:

> +
> +void accel_register_compat_props(const GPtrArray *props);
[...]
> @@ -185,7 +183,9 @@ static void xen_accel_class_init(ObjectClass *oc, v=
oid *data)
>      ac->init_machine =3D xen_init;
>      ac->setup_post =3D xen_setup_post;
>      ac->allowed =3D &xen_allowed;
> -    ac->global_props =3D xen_compat_props;
> +    ac->compat_props =3D g_ptr_array_new();
> +
> +    SET_COMPAT(ac, XEN_COMPAT);

I think this is a step backwards.  I like us to be able to
register compat properties without macro magic.  The existence of
SET_MACHINE_COMPAT is a bug and not a feature.

If you really want to use GPtrArray instead of a simple
GlobalProperty* field (I'm not sure I understand the reasoning
behind the choice to use GPtrArray), what about:

static GPtrArray *build_compat_props_array(GlobalProperty *props)
{
    GlobalProperty *p =3D props;
    GPtrArray *array =3D g_ptr_array_new();
    while (p->driver) {
        g_ptr_array_add(array, (void *)p);
    }
    return array;
}


static void xen_accel_class_init(ObjectClass *oc, void *data)
{
    ...
    ac->compat_props =3D build_compat_props_array(xen_compat_props);
}



>  }
> =20
>  #define TYPE_XEN_ACCEL ACCEL_CLASS_NAME("xen")
> diff --git a/qom/object.c b/qom/object.c
> index 17921c0a71..dbdab0aead 100644
> --- a/qom/object.c
> +++ b/qom/object.c
> @@ -370,6 +370,31 @@ static void object_post_init_with_type(Object *obj=
, TypeImpl *ti)
>      }
>  }
> =20
> +void object_apply_global_props(Object *obj, const GPtrArray *props, Er=
ror **errp)
> +{
> +    Error *err =3D NULL;
> +    int i;
> +
> +    if (!props) {
> +        return;
> +    }
> +
> +    for (i =3D 0; i < props->len; i++) {
> +        GlobalProperty *p =3D g_ptr_array_index(props, i);
> +
> +        if (object_dynamic_cast(obj, p->driver) =3D=3D NULL) {
> +            continue;
> +        }
> +        p->used =3D true;
> +        object_property_parse(obj, p->value, p->property, &err);
> +        if (err !=3D NULL) {
> +            error_prepend(&err, "can't apply global %s.%s=3D%s: ",
> +                          p->driver, p->property, p->value);
> +            error_propagate(errp, err);
> +        }
> +    }
> +}
> +
>  static void object_initialize_with_type(void *data, size_t size, TypeI=
mpl *type)
>  {
>      Object *obj =3D data;
> diff --git a/vl.c b/vl.c
> index fa25d1ae2d..c06e94271c 100644
> --- a/vl.c
> +++ b/vl.c
> @@ -2963,7 +2963,7 @@ static void user_register_global_props(void)
>   */
>  static void register_global_properties(MachineState *ms)
>  {
> -    accel_register_compat_props(ms->accelerator);
> +    accel_register_compat_props(ACCEL_GET_CLASS(ms->accelerator)->comp=
at_props);
>      machine_register_compat_props(ms);
>      user_register_global_props();
>  }
> --=20
> 2.20.0.rc1
>=20
>=20

--=20
Eduardo

