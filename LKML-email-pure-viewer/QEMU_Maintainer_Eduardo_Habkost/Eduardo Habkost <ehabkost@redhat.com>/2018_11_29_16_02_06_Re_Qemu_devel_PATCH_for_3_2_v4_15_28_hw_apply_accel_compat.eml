Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 08:47:32 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 206FD580213
	for <like.xu@linux.intel.com>; Thu, 29 Nov 2018 08:02:36 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga004-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 08:02:35 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AR83lYhffpDTuR0mYg9jDvkiZlGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxcWzYR7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyJPDIOi?=
 =?us-ascii?q?YYUMAeoOMvpXoJT/qFQAohWwGBGsCeHtxDJHm3P707E23Po6EQzdwAwgBsgDvG?=
 =?us-ascii?q?jIoNjvKasfV/2+wqnSzTXEavNbwTjz55XVch87u/GDQLVwetfTx0Y1DAzFjVKQ?=
 =?us-ascii?q?qZf5PziI0ekCrWib4PB7WuKsjG4nsB1xryO1xsgyl4bJhpgaykze+Splx4Y1IM?=
 =?us-ascii?q?S1RUhmatCnCJtdrz+WO5d1T884Xm1kpSU3xqcYtZO1fCUG0okryhzHZ/CZb4SF?=
 =?us-ascii?q?5gjvWPufLDtmnn5pZbGyihio/US+yeDxUNS/3kxQoSpfiNbMs2gA1xzN5ciDTf?=
 =?us-ascii?q?tw5kOh2TeU1wDP8eFIO080lazGK5I7xb4wjJUTvVzCHi/whkr2kLebels49uWr?=
 =?us-ascii?q?8ejrf6jqq5yGO4NqhAzzMr4iltG9DOggNwgBRWmb+eCy1L35+k35Ra1HjuQona?=
 =?us-ascii?q?ncrZDWPNkUqbCnAwBL1oYv8g2wDzC70NQegXYIMklFdBWDj4joOFHBPur0DPii?=
 =?us-ascii?q?g1m0lDdrxvbGPqDuA5nXL3jDlqvhcqh560JG1AUzytVf6olSCrEGJvLzVUnxtM?=
 =?us-ascii?q?HCAh8+KQy0zP7rCM9h2YMGRWKPHqiZPbvWsV+J5eIgPfOAZYAIuDvmL/gl5vju?=
 =?us-ascii?q?jWI2mFMHfKmp24cXZ268Hvh8P0qZZn/s0Z88F3wXtF8+UPDykw/FFjpSfGqpGa?=
 =?us-ascii?q?Q74D49FcShF4iEQ4mshLmI2mC8BoFXYWZdTUmBFGqte4iaVvNfVSSJP8U0lzUF?=
 =?us-ascii?q?UaSmGZYs0AzruALkxr4iNOfN5yADqbrl09564fCVkgs9oidpBcaQ2H3YUmdvg2?=
 =?us-ascii?q?kTTCU31q0snUso716Z2u1RhfBClJR3+ulEWxpyYZvV1edzDdzoV0TFY82EQUuO?=
 =?us-ascii?q?WNiqATgtCNk2xoldTVx6HoCPgg3KxSatS58cnb+MH4B8pq/c1nLyIN1h42zL2K?=
 =?us-ascii?q?kokx8tRc4ZZj7uvbJ26wWGX92BqE6ejav/MP1EhCM=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAABaDABchxHrdtBkGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBgTCCTxOMEV+LKYINl0SBcxQYFIRAgzQiNAk?=
 =?us-ascii?q?NAQMBAQEBAQECARMBAQEKCwkIGw4vgjYFAgMaAQaCXAECAwECJB8KKQMDAQIGA?=
 =?us-ascii?q?QEKGAkaAwgDAQsFSRMFgxyCAgEEpzUziiqMFheBQD+BEYMShQGFWwKJK4FulQo?=
 =?us-ascii?q?JkScjiViHRJhOgUaCDTMaCBsVgyeCJxcSjiMpMYEHHIsngXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ABAABaDABchxHrdtBkGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBgTCCTxOMEV+LKYINl0SBcxQYFIRAgzQiNAkNAQMBAQEBAQECA?=
 =?us-ascii?q?RMBAQEKCwkIGw4vgjYFAgMaAQaCXAECAwECJB8KKQMDAQIGAQEKGAkaAwgDAQs?=
 =?us-ascii?q?FSRMFgxyCAgEEpzUziiqMFheBQD+BEYMShQGFWwKJK4FulQoJkScjiViHRJhOg?=
 =?us-ascii?q?UaCDTMaCBsVgyeCJxcSjiMpMYEHHIsngXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,295,1539673200"; 
   d="scan'208";a="53168567"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 29 Nov 2018 08:02:34 -0800
Received: from localhost ([::1]:55000 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gSOlu-0000qB-Bk
	for like.xu@linux.intel.com; Thu, 29 Nov 2018 11:02:34 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:54471)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <ehabkost@redhat.com>) id 1gSOlb-0000mJ-E9
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 11:02:21 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <ehabkost@redhat.com>) id 1gSOlZ-0007NL-SK
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 11:02:15 -0500
Received: from mx1.redhat.com ([209.132.183.28]:52718)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <ehabkost@redhat.com>) id 1gSOlZ-0007Ma-I1
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 11:02:13 -0500
Received: from smtp.corp.redhat.com (int-mx06.intmail.prod.int.phx2.redhat.com
	[10.5.11.16])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 7E805C05000B;
	Thu, 29 Nov 2018 16:02:12 +0000 (UTC)
Received: from localhost (ovpn-116-21.gru2.redhat.com [10.97.116.21])
	by smtp.corp.redhat.com (Postfix) with ESMTP id EED2B5C543;
	Thu, 29 Nov 2018 16:02:08 +0000 (UTC)
Date: Thu, 29 Nov 2018 14:02:06 -0200
From: Eduardo Habkost <ehabkost@redhat.com>
To: =?iso-8859-1?Q?Marc-Andr=E9?= Lureau <marcandre.lureau@redhat.com>
Message-ID: <20181129160206.GL18284@habkost.net>
References: <20181127092801.21777-1-marcandre.lureau@redhat.com>
	<20181127092801.21777-16-marcandre.lureau@redhat.com>
	<20181127194019.GQ18284@habkost.net>
	<CAMxuvaz0FitnFiSD3Ma9r_7z0oM6A_Z3D2nbAh=YBp3mEC72rg@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=iso-8859-1
Content-Disposition: inline
In-Reply-To: <CAMxuvaz0FitnFiSD3Ma9r_7z0oM6A_Z3D2nbAh=YBp3mEC72rg@mail.gmail.com>
User-Agent: Mutt/1.9.2 (2017-12-15)
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.16
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.31]);
	Thu, 29 Nov 2018 16:02:12 +0000 (UTC)
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH for-3.2 v4 15/28] hw: apply accel compat
 properties without touching globals
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: sstabellini <sstabellini@kernel.org>, qemu-devel <qemu-devel@nongnu.org>,
	"Bonzini, Paolo" <pbonzini@redhat.com>,
	Igor Mammedov <imammedo@redhat.com>,
	Anthony PERARD <anthony.perard@citrix.com>, xen-devel@lists.xenproject.org,
	Andreas =?iso-8859-1?Q?F=E4rber?= <afaerber@suse.de>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Wed, Nov 28, 2018 at 12:02:21AM +0400, Marc-Andr=E9 Lureau wrote:
> Hi
>=20
> On Tue, Nov 27, 2018 at 11:40 PM Eduardo Habkost <ehabkost@redhat.com> =
wrote:
> >
> > On Tue, Nov 27, 2018 at 01:27:48PM +0400, Marc-Andr=E9 Lureau wrote:
> > > Introduce object_apply_global_props() function, to apply compatibil=
ity
> > > properties from a GPtrArray.
> > >
> > > For accel compatibility properties, apply them during
> > > device_post_init(), after accel_register_compat_props() has set the=
m.
> > >
> > > To populate the compatibility properties, introduce SET_COMPAT(), a
> > > more generic version of SET_MACHINE_COMPAT() that can set compat
> > > properties on other objects than Machine, and using GPtrArray.
> > >
> > > Signed-off-by: Marc-Andr=E9 Lureau <marcandre.lureau@redhat.com>
> > > ---
> > >  include/hw/qdev-core.h | 13 +++++++++++++
> > >  include/qom/object.h   |  3 +++
> > >  include/sysemu/accel.h |  4 +---
> > >  accel/accel.c          | 12 ------------
> > >  hw/core/qdev.c         | 11 +++++++++++
> > >  hw/xen/xen-common.c    | 38 +++++++++++++++++++-------------------
> > >  qom/object.c           | 25 +++++++++++++++++++++++++
> > >  vl.c                   |  2 +-
> > >  8 files changed, 73 insertions(+), 35 deletions(-)
> > >
> > > diff --git a/include/hw/qdev-core.h b/include/hw/qdev-core.h
> > > index a24d0dd566..82afd3c50d 100644
> > > --- a/include/hw/qdev-core.h
> > > +++ b/include/hw/qdev-core.h
> > > @@ -267,6 +267,19 @@ typedef struct GlobalProperty {
> > >      Error **errp;
> > >  } GlobalProperty;
> > >
> > > +#define SET_COMPAT(S, COMPAT)                                     =
  \
> > > +    do {                                                          =
  \
> > > +        int i;                                                    =
  \
> > > +        static GlobalProperty props[] =3D {                       =
    \
> > > +            COMPAT                                                =
  \
> > > +        };                                                        =
  \
> > > +        for (i =3D 0; i < G_N_ELEMENTS(props); i++) {             =
    \
> > > +            g_ptr_array_add((S)->compat_props, (void *)&props[i]);=
  \
> > > +        }                                                         =
  \
> > > +    } while (0)
> >
> > I think this macro would be an acceptable alternative to the
> > existing SET_MACHINE_COMPAT macro trickery, but:
> >
> > > +
> > > +void accel_register_compat_props(const GPtrArray *props);
> > [...]
> > > @@ -185,7 +183,9 @@ static void xen_accel_class_init(ObjectClass *o=
c, void *data)
> > >      ac->init_machine =3D xen_init;
> > >      ac->setup_post =3D xen_setup_post;
> > >      ac->allowed =3D &xen_allowed;
> > > -    ac->global_props =3D xen_compat_props;
> > > +    ac->compat_props =3D g_ptr_array_new();
> > > +
> > > +    SET_COMPAT(ac, XEN_COMPAT);
> >
> > I think this is a step backwards.  I like us to be able to
> > register compat properties without macro magic.  The existence of
> > SET_MACHINE_COMPAT is a bug and not a feature.
> >
> > If you really want to use GPtrArray instead of a simple
> > GlobalProperty* field (I'm not sure I understand the reasoning
> > behind the choice to use GPtrArray), what about:
>=20
> Except in the Xen case, It needs to register multiple GlobalProperty*,
> not necessarily from contiguous in memory. That's why we have an array
> of ptr.

If you also need to register multiple properties not from a
contiguous array, would a simple wrapper that does a single
g_ptr_array_add() call be enough?


>=20
> >
> > static GPtrArray *build_compat_props_array(GlobalProperty *props)
> > {
> >     GlobalProperty *p =3D props;
> >     GPtrArray *array =3D g_ptr_array_new();
> >     while (p->driver) {
> >         g_ptr_array_add(array, (void *)p);
> >     }
> >     return array;
> > }
> >
> >
> > static void xen_accel_class_init(ObjectClass *oc, void *data)
> > {
> >     ...
> >     ac->compat_props =3D build_compat_props_array(xen_compat_props);
>=20
> If we would register from one place, that would be fine.
>=20
> We could replace the macro by a function, then we would have to
> declare the GlobalProperty arrays manually basically.

I would prefer to replace the macro with a function, if possible.
What do you mean by declaring the GlobalProperty arrays manually?


>=20
> > }
> >
> >
> >
> > >  }
> > >
> > >  #define TYPE_XEN_ACCEL ACCEL_CLASS_NAME("xen")
> > > diff --git a/qom/object.c b/qom/object.c
> > > index 17921c0a71..dbdab0aead 100644
> > > --- a/qom/object.c
> > > +++ b/qom/object.c
> > > @@ -370,6 +370,31 @@ static void object_post_init_with_type(Object =
*obj, TypeImpl *ti)
> > >      }
> > >  }
> > >
> > > +void object_apply_global_props(Object *obj, const GPtrArray *props=
, Error **errp)
> > > +{
> > > +    Error *err =3D NULL;
> > > +    int i;
> > > +
> > > +    if (!props) {
> > > +        return;
> > > +    }
> > > +
> > > +    for (i =3D 0; i < props->len; i++) {
> > > +        GlobalProperty *p =3D g_ptr_array_index(props, i);
> > > +
> > > +        if (object_dynamic_cast(obj, p->driver) =3D=3D NULL) {
> > > +            continue;
> > > +        }
> > > +        p->used =3D true;
> > > +        object_property_parse(obj, p->value, p->property, &err);
> > > +        if (err !=3D NULL) {
> > > +            error_prepend(&err, "can't apply global %s.%s=3D%s: ",
> > > +                          p->driver, p->property, p->value);
> > > +            error_propagate(errp, err);
> > > +        }
> > > +    }
> > > +}
> > > +
> > >  static void object_initialize_with_type(void *data, size_t size, T=
ypeImpl *type)
> > >  {
> > >      Object *obj =3D data;
> > > diff --git a/vl.c b/vl.c
> > > index fa25d1ae2d..c06e94271c 100644
> > > --- a/vl.c
> > > +++ b/vl.c
> > > @@ -2963,7 +2963,7 @@ static void user_register_global_props(void)
> > >   */
> > >  static void register_global_properties(MachineState *ms)
> > >  {
> > > -    accel_register_compat_props(ms->accelerator);
> > > +    accel_register_compat_props(ACCEL_GET_CLASS(ms->accelerator)->=
compat_props);
> > >      machine_register_compat_props(ms);
> > >      user_register_global_props();
> > >  }
> > > --
> > > 2.20.0.rc1
> > >
> > >
> >
> > --
> > Eduardo

--=20
Eduardo

