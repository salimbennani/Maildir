Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 05 Dec 2018 08:42:58 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 965F2580375
	for <like.xu@linux.intel.com>; Tue,  4 Dec 2018 10:45:39 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga006-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 04 Dec 2018 10:45:39 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3ATslh8h3IV9JZHItzsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?seMeKfad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWRPUMZPWSJCDIOz?=
 =?us-ascii?q?YJcAAPcDMulWoIfzukMOoBm8CwSjGe/ixCNEiWHt3aAhz+QhCBvL0BA8E98UrX?=
 =?us-ascii?q?jZqsj+OqcIUeCyyanF1TrNYO5L2Tjn8ojHbxchquyOU71qasXRyk4vFxjZjl6N?=
 =?us-ascii?q?roHqITOV2f4WvGiY6OpgTv6vhnU9qw5vvzevxt0jipXTio0JzVDE8Dx0zYAoLt?=
 =?us-ascii?q?O7UE52ecCoHIdTui2AKod6X8AvT3t2tCs0yrAKo4O3cSoSxJg52xLSb+aLf5WG?=
 =?us-ascii?q?7x79TuqdPDR1iXx/dL6hhBu/91WrxPfmWcmuyllKqzJIktnSuXAJ0Bze8syHSv?=
 =?us-ascii?q?pm/ke9wjaDzQ/T6udZIUwukqrbMZEhzqYxlpoVr0vDAjf7lFvqgKKVbEko5/Wk?=
 =?us-ascii?q?5uf9brn4qJKRN5V4hhz8P6g2n8ywG+U4MgwAX2iB/uS80aXu/VTnT7VPk/06i7?=
 =?us-ascii?q?TWv47EJcsFoq61GhRa0oE+6xa5Ezipzs8YkX4DLFJEexKIkZLlOl7TIP3gCfe/?=
 =?us-ascii?q?glKskCpkxvzcP73hBInNIWbHkLv7Ybl97EtcxRE1zdBY4ZJUBbcBIO/pVk/2rt?=
 =?us-ascii?q?zYAQc1MxaozOb/FNV9yoQeVHqLAq+YM6Pdr0WE5+0yI+SXYI8VuTD9K+Uq5vL0?=
 =?us-ascii?q?jH85n0Mdcret3ZcNdH+4GfFmcA2kZ2HxiIIBDXsSpVh5C+jrk0GZFzhUYXm0Qu?=
 =?us-ascii?q?Q7/D58DYunCYLKQMeqmKCA2yGgWYRbY30DBl2SHHO7SoOfRv1ZbSuTJtNmwCUJ?=
 =?us-ascii?q?UKXkR4I/2BXrrgLj1rd8MsLS/SsXs4+l08J6sPbOnxM//iAhEsKGzmuWRHt1lG?=
 =?us-ascii?q?5bezhj/a94uwRYw1KG3KR/nbQMFNla4vZEXgASL5PQz+VmTdv1X1SSUM2OTQOL?=
 =?us-ascii?q?TsivGz02BvI4ydwJeFo1T9iihxrA2DG2K6UYm7yCGNo/9aeKjCu5HNp013uTjP?=
 =?us-ascii?q?pptFIhWMYacDT+3qM=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ADAABTygZchxHrdtBkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUgQBAQEBCwGBMIJPE4xxjT2JEY44gXMUGBSEQIMMIjUIDQEDAQE?=
 =?us-ascii?q?BAQEBAgETAQEBCgsJCBsOL4I2BQIDGgEGglsBAQEBAgEBAiQfCikDAwECBgEBC?=
 =?us-ascii?q?g4KCRoDCAMBCwUNPBMFFoMGgWoDDQgBBKVFM4gHDYIcjB4XgUA/gRGDEoJXgiq?=
 =?us-ascii?q?DNYImAosglHsuCYo2g12DIyOJW4dLjnqJfYFIA4IIMxoIGxWDJ4InFxKOIykxg?=
 =?us-ascii?q?QcciE+BdwEB?=
X-IPAS-Result: =?us-ascii?q?A0ADAABTygZchxHrdtBkGgEBAQEBAgEBAQEHAgEBAQGBUgQ?=
 =?us-ascii?q?BAQEBCwGBMIJPE4xxjT2JEY44gXMUGBSEQIMMIjUIDQEDAQEBAQEBAgETAQEBC?=
 =?us-ascii?q?gsJCBsOL4I2BQIDGgEGglsBAQEBAgEBAiQfCikDAwECBgEBCg4KCRoDCAMBCwU?=
 =?us-ascii?q?NPBMFFoMGgWoDDQgBBKVFM4gHDYIcjB4XgUA/gRGDEoJXgiqDNYImAosglHsuC?=
 =?us-ascii?q?Yo2g12DIyOJW4dLjnqJfYFIA4IIMxoIGxWDJ4InFxKOIykxgQcciE+BdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,315,1539673200"; 
   d="scan'208";a="43526597"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 04 Dec 2018 10:45:38 -0800
Received: from localhost ([::1]:58491 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gUFhR-0002jv-Pb
	for like.xu@linux.intel.com; Tue, 04 Dec 2018 13:45:37 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:48661)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <ehabkost@redhat.com>) id 1gUFfk-0001b2-CM
	for qemu-devel@nongnu.org; Tue, 04 Dec 2018 13:43:53 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <ehabkost@redhat.com>) id 1gUFfj-0007ZX-Bq
	for qemu-devel@nongnu.org; Tue, 04 Dec 2018 13:43:52 -0500
Received: from mx1.redhat.com ([209.132.183.28]:53950)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <ehabkost@redhat.com>)
	id 1gUFfd-0007Wx-KV; Tue, 04 Dec 2018 13:43:45 -0500
Received: from smtp.corp.redhat.com (int-mx08.intmail.prod.int.phx2.redhat.com
	[10.5.11.23])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id BD1A53001572;
	Tue,  4 Dec 2018 18:43:44 +0000 (UTC)
Received: from localhost (ovpn-116-33.gru2.redhat.com [10.97.116.33])
	by smtp.corp.redhat.com (Postfix) with ESMTP id 293E11948B;
	Tue,  4 Dec 2018 18:43:36 +0000 (UTC)
Date: Tue, 4 Dec 2018 16:43:35 -0200
From: Eduardo Habkost <ehabkost@redhat.com>
To: Igor Mammedov <imammedo@redhat.com>
Message-ID: <20181204184335.GF18284@habkost.net>
References: <20181127125644.GB18284@habkost.net>
	<CAMxuvaySoJ2TokV8M81CVU3Hp4dC25c+PW_p2kk+V88-88U-CQ@mail.gmail.com>
	<20181127133527.GI18284@habkost.net>
	<20181128184027.7d584eaa@redhat.com>
	<CAJ+F1CK5NkgsJWFGZ7kvR81KyeOPE_ytk=tOjKqTUGtbfywmJQ@mail.gmail.com>
	<20181129175055.GQ18284@habkost.net>
	<CAJ+F1CJBKVibRrgjiNKjSJ5ufK=CUodx26aHnKzeL3Cs7adbeA@mail.gmail.com>
	<20181130115526.5974ca7a@redhat.com>
	<20181130114142.GV18284@habkost.net>
	<20181204141724.5f06bd1b@redhat.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=iso-8859-1
Content-Disposition: inline
In-Reply-To: <20181204141724.5f06bd1b@redhat.com>
User-Agent: Mutt/1.9.2 (2017-12-15)
X-Scanned-By: MIMEDefang 2.84 on 10.5.11.23
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.46]);
	Tue, 04 Dec 2018 18:43:44 +0000 (UTC)
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH for-3.2 v4 16/28] hw: apply machine compat
 properties without touching globals
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Peter Maydell <peter.maydell@linaro.org>,
	"Michael S. Tsirkin" <mst@redhat.com>,
	David Hildenbrand <david@redhat.com>,
	Cornelia Huck <cohuck@redhat.com>, QEMU <qemu-devel@nongnu.org>,
	Christian Borntraeger <borntraeger@de.ibm.com>,
	Qemu-s390x list <qemu-s390x@nongnu.org>,
	"open list:ARM" <qemu-arm@nongnu.org>,
	=?iso-8859-1?Q?Marc-Andr=E9?= Lureau <marcandre.lureau@gmail.com>,
	Paolo Bonzini <pbonzini@redhat.com>,
	"open list:sPAPR pseries" <qemu-ppc@nongnu.org>,
	David Gibson <david@gibson.dropbear.id.au>,
	Richard Henderson <rth@twiddle.net>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Tue, Dec 04, 2018 at 02:17:24PM +0100, Igor Mammedov wrote:
> On Fri, 30 Nov 2018 09:41:42 -0200
> Eduardo Habkost <ehabkost@redhat.com> wrote:
>=20
> > On Fri, Nov 30, 2018 at 11:55:26AM +0100, Igor Mammedov wrote:
> > > On Fri, 30 Nov 2018 01:36:03 +0400
> > > Marc-Andr=E9 Lureau <marcandre.lureau@gmail.com> wrote:
> > >  =20
> > > > Hi
> > > >=20
> > > > On Thu, Nov 29, 2018 at 9:51 PM Eduardo Habkost <ehabkost@redhat.=
com> wrote: =20
> > > > >
> > > > > On Thu, Nov 29, 2018 at 02:32:18PM +0400, Marc-Andr=E9 Lureau w=
rote:   =20
> > > > > > Hi
> > > > > > On Wed, Nov 28, 2018 at 9:53 PM Igor Mammedov <imammedo@redha=
t.com> wrote:   =20
> > > > > > >
> > > > > > > On Tue, 27 Nov 2018 11:35:27 -0200
> > > > > > > Eduardo Habkost <ehabkost@redhat.com> wrote:
> > > > > > >   =20
> > > > > > > > On Tue, Nov 27, 2018 at 05:10:05PM +0400, Marc-Andr=E9 Lu=
reau wrote:   =20
> > > > > > > > > On Tue, Nov 27, 2018 at 4:57 PM Eduardo Habkost <ehabko=
st@redhat.com> wrote:   =20
> > > > > > > > > >
> > > > > > > > > > On Tue, Nov 27, 2018 at 01:27:49PM +0400, Marc-Andr=E9=
 Lureau wrote:   =20
> > > > > > > > > > > Similarly to accel properties, move compat properti=
es out of globals
> > > > > > > > > > > registration, and apply the machine compat properti=
es during
> > > > > > > > > > > device_post_init().
> > > > > > > > > > >
> > > > > > > > > > > Signed-off-by: Marc-Andr=E9 Lureau <marcandre.lurea=
u@redhat.com>   =20
> > > > > > > > > > [...]   =20
> > > > > > > > > > > diff --git a/hw/core/qdev.c b/hw/core/qdev.c
> > > > > > > > > > > index 7066d28271..3b31b2c025 100644
> > > > > > > > > > > --- a/hw/core/qdev.c
> > > > > > > > > > > +++ b/hw/core/qdev.c
> > > > > > > > > > > @@ -971,17 +971,26 @@ static void device_initfn(Obj=
ect *obj)
> > > > > > > > > > >  }
> > > > > > > > > > >
> > > > > > > > > > >  static const GPtrArray *ac_compat_props;
> > > > > > > > > > > +static const GPtrArray *mc_compat_props;   =20
> > > > > > > why you didn't use just 'compat_props' for both?
> > > > > > > (it would be cleaner have single registry for compat
> > > > > > > properties, and the place that takes care of registration
> > > > > > > will take care of necessary ordering)   =20
> > > > > >
> > > > > > There are two arrays, one from the accelerator class, the oth=
er from
> > > > > > the machine class. We can't make it a singleton (all compats =
props for
> > > > > > the various machines would be mixed).
> > > > > >
> > > > > > We could create a third array that would be the set of both, =
but that
> > > > > > would require more copy/allocation.   =20
> > > > >
> > > > > I am failing to see the advantage of replacing the `global_prop=
s`
> > > > > static variable from qdev-properties.c with a collection of
> > > > > separate static variables scattered around the code.  I thought
> > > > > the main point of the changes was to reduce the amount of
> > > > > duplicate data stored in static variables. =20
> > > Main point was to use compats for backends then on top of that=20
> > > we added split global from compat properties goal.
> > >  =20
> > > > > I was expecting something like this:
> > > > >
> > > > > accel.c:
> > > > >
> > > > >   void accel_apply_compat_props(AccelState *accel, Object *obj)
> > > > >   {
> > > > >       object_apply_global_props(obj, ACCEL_GET_CLASS(accel)->co=
mpat_props, &error_abort);
> > > > >   }
> > > > >
> > > > > machine.c:
> > > > >
> > > > >   /* Apply compat properties and global properties to an object=
 */
> > > > >   void machine_apply_compat_props(MachineState *ms, Object *obj=
)
> > > > >   {
> > > > >       accel_apply_compat_props(ms->accel, obj);
> > > > >       object_apply_global_props(obj, MACHINE_GET_CLASS(ms)->com=
pat_props, &error_abort);
> > > > >   }
> > > > >
> > > > > compat-props.c:
> > > > >
> > > > >   static void object_apply_compat_props(Object *obj)
> > > > >   {
> > > > >       MachineState *machine =3D MACHINE(qdev_get_machine());
> > > > >       machine_apply_compat_props(machine, obj);
> > > > >   }
> > > > >
> > > > > qdev.c:
> > > > >
> > > > >   static void device_post_init(Object *obj)
> > > > >   {
> > > > >       object_apply_compat_props(obj);
> > > > >       apply_user_provided_globals(obj);
> > > > >   }
> > > > >
> > > > > object_interface.c:
> > > > >
> > > > >   void user_creatable_complete(Object *obj, Error **errp)
> > > > >   {
> > > > >       object_apply_compat_props(obj);
> > > > >       ...
> > > > >       ucc->complete(...)
> > > > >   }
> > > > >   =20
> > > >=20
> > > > I like that solution too (which you also proposed in the other
> > > > thread). But we have to decide whether it's acceptable to referen=
ce
> > > > MachineState, or if the compat properties should be registered. =20
> > > I dislike pulling in machine into basic object code and
> > > I think a separate compats would be cleaner interface without
> > > layer violation. But to unstuck, lets go with qdev_get_machine()
> > > for now. =20
> >=20
> > Which basic object code?  The only reference to machine above is
> > at compat-props.c.  I don't see any layering violation here.
> I see compat properties as just a set of arbitrary properties
> that's applied to objects depending on configuration.
> Which currently includes machine version and accel type
> but in no way inherently tied to them.

I understand you want to have a more generic abstraction layer,
but my question is: why do we need it?  I still don't see which
problems it would solve.

>=20
> As for layering violation, we do it in device model cases
> as it's machine related (ugly 'acceptable' but helps to cut corners)
> and with new interface it will be used wit backends which are not
> machine related at all.

I don't see why it's ugly to have QEMU backend object code use
machine core code.  What problems does it cause?


>=20
> Doing like you suggest would make it usable with current machine
> initialization order (with some fixes) but if one would consider
> a bit earlier time (preconfig time) and creating machine step by
> step from there it might be less usable (as it needs machine instance,
> it still would be possible but probably more tricky (pure speculation))=
.

I agree that this is a problem: we really have a
backend -> compat_props -> current_machine dependency chain here.

Using a registration mechanism that copies data, the dependency
would still exists, but be implicit in the initialization
ordering.  Then the system would silently break as soon as we
reorder the code.

>=20
> So I'd vote for abstracted from machine compat props that could be
> called from any object that implements interface and explicit
> compats registration (like we do now) and explicit registration failure
> if compats happend to be applied to any object. But in case of this
> series I'm fine with any approach just to get compat properties work
> with backends for now.

Thanks.  I agree we'll want to refactor this later.  We may want
to be able to apply compat properties to backend objects before
creating machine and accel instances.

Or maybe we will want to apply only MachineClass::compat_props to
backend objects, and not AccelClass::compat_props?  This is not
clear to me yet.

--=20
Eduardo

