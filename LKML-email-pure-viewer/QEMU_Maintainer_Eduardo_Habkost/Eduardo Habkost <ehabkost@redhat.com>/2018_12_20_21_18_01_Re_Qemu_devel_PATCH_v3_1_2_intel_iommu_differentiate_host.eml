Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:43:06 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 9703A5805F0
	for <like.xu@linux.intel.com>; Thu, 20 Dec 2018 13:19:08 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by fmsmga002-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 20 Dec 2018 13:19:08 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AYUinyBZDGZImuWG3i4wNPEL/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZrsS7bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJWSJPAp2y?=
 =?us-ascii?q?YYgBD+UOIelXsovyqFUToxumBwSiBuzixiJGi3Pqw6I6yP8sER3a0AE6A94CrG?=
 =?us-ascii?q?7ZoMvzOawPUe611q7IzTDbYv1ZxDj99ZLHcgo8rvGLQLl+c9DexlIsFwPClVWQ?=
 =?us-ascii?q?tZHuMjSL2eQNqWeU9OlgVeW0i247sAxxuCagydosiobTmoIZ0EzL9SJ8wIssI9?=
 =?us-ascii?q?CzVU11Yca8HZdOqy2XNJF6Tt4/T2xroio21LMLtJ6hcCQXypkr3wDTZ+CDfoSS?=
 =?us-ascii?q?/x7uWvidLS1liH9mdr+znQi+/Eumx+bhTMe7ykxKoTBAktTUtnACyRjT6s+fR/?=
 =?us-ascii?q?t5/0ehwiqP1xvJ5uFLJ0A0iLDXK5k7wr4/jpYTsELDETHqmEjukqOaakYp9vK1?=
 =?us-ascii?q?5+j6YbjqvIGQOoF0hw3kL6gjmNSzAeEiPQgPW2ib9/681Lrm/UDhWbVFkPg2kr?=
 =?us-ascii?q?TAvJ/HO8sbuLC2AwtM3ok47Ba/EjGm38gGknkcK15FfBOHj4v3NF3UL/H4EO+y?=
 =?us-ascii?q?g1CtkDdt2vDHMaftApTLLnjfjrjheaxx5FJbyAo21t1f4ZVUCrcOIPL1R0/9rt?=
 =?us-ascii?q?vYDgU2MwCs2eboFM191p8CWWKIGqKZNKLSsVyW6e41LOiMeZQYuDL8K/gj+v7v?=
 =?us-ascii?q?gmU1mV4bfam1w5QXbGq0EehhI0WcMjLRhMwcGzIKohYmV76tz1mDSiJIIXC1Wa?=
 =?us-ascii?q?06+3c8Eo3hCI7CQoWkhvuGxDu6GZtNIXlLD03JHXr2eoHXZvEXdSjHJ8ZgliAD?=
 =?us-ascii?q?B6GsTpJk2RywuQu/0bd+M+fP5gUespTs0sUz4Pfcwgov/z55BNjIzmeWUmtvlX?=
 =?us-ascii?q?kJTTJl4KcqgEN60B+m2K19jvBfC5QH5vZAVwI3OZn01eF2C9nuHAnGe4HaZkyh?=
 =?us-ascii?q?R4CLDSw4VN42i/8HaUV6AMnq2h3D1iCpBKQJv6aGCJw97uTX2H2ndJU18GrPyK?=
 =?us-ascii?q?R01wpuecBIL2Dzw/cnrwU=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0APAACkBhxchxHrdtBkGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUwQBAQELAYEwgk8TjHWLHYINl10UgV8VGBSHLiI2Bw0BAwEBAQEBAQI?=
 =?us-ascii?q?BEwEBAQoLCQgbDi+CNgUCAxoBBoJbAQEBAQIBAQIkEwwKKQMCAQECBgEBCg4KC?=
 =?us-ascii?q?RoDCAMBCwVJEwUWgweBeggBBKhrM4opjD8XgUA/gRGDEoQ7IA+FdgKJJyuBcJV?=
 =?us-ascii?q?7CYpWhwMkiXiHZZoNgU0DggQzGggbFYMngicXEo4jKTEBAYEFHIp4DhcwgXcBA?=
 =?us-ascii?q?Q?=
X-IPAS-Result: =?us-ascii?q?A0APAACkBhxchxHrdtBkGwEBAQEDAQEBBwMBAQGBUwQBAQE?=
 =?us-ascii?q?LAYEwgk8TjHWLHYINl10UgV8VGBSHLiI2Bw0BAwEBAQEBAQIBEwEBAQoLCQgbD?=
 =?us-ascii?q?i+CNgUCAxoBBoJbAQEBAQIBAQIkEwwKKQMCAQECBgEBCg4KCRoDCAMBCwVJEwU?=
 =?us-ascii?q?WgweBeggBBKhrM4opjD8XgUA/gRGDEoQ7IA+FdgKJJyuBcJV7CYpWhwMkiXiHZ?=
 =?us-ascii?q?ZoNgU0DggQzGggbFYMngicXEo4jKTEBAYEFHIp4DhcwgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,378,1539673200"; 
   d="scan'208";a="67778400"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mga01b.intel.com with ESMTP/TLS/AES256-SHA; 20 Dec 2018 13:19:07 -0800
Received: from localhost ([::1]:39903 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1ga5ik-0004Pt-JN
	for like.xu@linux.intel.com; Thu, 20 Dec 2018 16:19:06 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:45787)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <ehabkost@redhat.com>) id 1ga5iH-0004Pi-Mt
	for qemu-devel@nongnu.org; Thu, 20 Dec 2018 16:18:38 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <ehabkost@redhat.com>) id 1ga5iE-0004G0-C4
	for qemu-devel@nongnu.org; Thu, 20 Dec 2018 16:18:37 -0500
Received: from mx1.redhat.com ([209.132.183.28]:60968)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <ehabkost@redhat.com>) id 1ga5iE-0004Ea-35
	for qemu-devel@nongnu.org; Thu, 20 Dec 2018 16:18:34 -0500
Received: from smtp.corp.redhat.com (int-mx01.intmail.prod.int.phx2.redhat.com
	[10.5.11.11])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 4A22646288;
	Thu, 20 Dec 2018 21:18:33 +0000 (UTC)
Received: from localhost (ovpn-116-63.gru2.redhat.com [10.97.116.63])
	by smtp.corp.redhat.com (Postfix) with ESMTP id BB769D1EB;
	Thu, 20 Dec 2018 21:18:03 +0000 (UTC)
Date: Thu, 20 Dec 2018 19:18:01 -0200
From: Eduardo Habkost <ehabkost@redhat.com>
To: Igor Mammedov <imammedo@redhat.com>
Message-ID: <20181220211801.GR19442@habkost.net>
References: <1544619939-18102-1-git-send-email-yu.c.zhang@linux.intel.com>
	<1544619939-18102-2-git-send-email-yu.c.zhang@linux.intel.com>
	<20181217141740.16ccfaa1@Igors-MacBook-Pro.local>
	<20181218092723.yhaerzm4vlzgef65@linux.intel.com>
	<20181218155536.2b35a037@Igors-MacBook-Pro.local>
	<20181219025717.6m72hq73p2haexkv@linux.intel.com>
	<20181219114037.5550a562@redhat.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181219114037.5550a562@redhat.com>
User-Agent: Mutt/1.10.1 (2018-07-13)
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.11
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.29]);
	Thu, 20 Dec 2018 21:18:33 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH v3 1/2] intel-iommu: differentiate host
 address width from IOVA address width.
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: "Michael S. Tsirkin" <mst@redhat.com>, qemu-devel@nongnu.org,
	Peter Xu <peterx@redhat.com>, Yu Zhang <yu.c.zhang@linux.intel.com>,
	Paolo Bonzini <pbonzini@redhat.com>, Richard Henderson <rth@twiddle.net>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Wed, Dec 19, 2018 at 11:40:37AM +0100, Igor Mammedov wrote:
> On Wed, 19 Dec 2018 10:57:17 +0800
> Yu Zhang <yu.c.zhang@linux.intel.com> wrote:
> 
> > On Tue, Dec 18, 2018 at 03:55:36PM +0100, Igor Mammedov wrote:
> > > On Tue, 18 Dec 2018 17:27:23 +0800
> > > Yu Zhang <yu.c.zhang@linux.intel.com> wrote:
> > >   
> > > > On Mon, Dec 17, 2018 at 02:17:40PM +0100, Igor Mammedov wrote:  
> > > > > On Wed, 12 Dec 2018 21:05:38 +0800
> > > > > Yu Zhang <yu.c.zhang@linux.intel.com> wrote:
> > > > >   
> > > > > > Currently, vIOMMU is using the value of IOVA address width, instead of
> > > > > > the host address width(HAW) to calculate the number of reserved bits in
> > > > > > data structures such as root entries, context entries, and entries of
> > > > > > DMA paging structures etc.
> > > > > > 
> > > > > > However values of IOVA address width and of the HAW may not equal. For
> > > > > > example, a 48-bit IOVA can only be mapped to host addresses no wider than
> > > > > > 46 bits. Using 48, instead of 46 to calculate the reserved bit may result
> > > > > > in an invalid IOVA being accepted.
> > > > > > 
> > > > > > To fix this, a new field - haw_bits is introduced in struct IntelIOMMUState,
> > > > > > whose value is initialized based on the maximum physical address set to
> > > > > > guest CPU.  
> > > > >   
> > > > > > Also, definitions such as VTD_HOST_AW_39/48BIT etc. are renamed
> > > > > > to clarify.
> > > > > > 
> > > > > > Signed-off-by: Yu Zhang <yu.c.zhang@linux.intel.com>
> > > > > > Reviewed-by: Peter Xu <peterx@redhat.com>
> > > > > > ---  
> > > > > [...]
> > > > >   
> > > > > > @@ -3100,6 +3104,8 @@ static void vtd_iommu_replay(IOMMUMemoryRegion *iommu_mr, IOMMUNotifier *n)
> > > > > >  static void vtd_init(IntelIOMMUState *s)
> > > > > >  {
> > > > > >      X86IOMMUState *x86_iommu = X86_IOMMU_DEVICE(s);
> > > > > > +    CPUState *cs = first_cpu;
> > > > > > +    X86CPU *cpu = X86_CPU(cs);
> > > > > >  
> > > > > >      memset(s->csr, 0, DMAR_REG_SIZE);
> > > > > >      memset(s->wmask, 0, DMAR_REG_SIZE);
> > > > > > @@ -3119,23 +3125,24 @@ static void vtd_init(IntelIOMMUState *s)
> > > > > >      s->cap = VTD_CAP_FRO | VTD_CAP_NFR | VTD_CAP_ND |
> > > > > >               VTD_CAP_MAMV | VTD_CAP_PSI | VTD_CAP_SLLPS |
> > > > > >               VTD_CAP_SAGAW_39bit | VTD_CAP_MGAW(s->aw_bits);
> > > > > > -    if (s->aw_bits == VTD_HOST_AW_48BIT) {
> > > > > > +    if (s->aw_bits == VTD_AW_48BIT) {
> > > > > >          s->cap |= VTD_CAP_SAGAW_48bit;
> > > > > >      }
> > > > > >      s->ecap = VTD_ECAP_QI | VTD_ECAP_IRO;
> > > > > > +    s->haw_bits = cpu->phys_bits;  
> > > > > Is it possible to avoid accessing CPU fields directly or cpu altogether
> > > > > and set phys_bits when iommu is created?  
> > > > 
> > > > Thanks for your comments, Igor.
> > > > 
> > > > Well, I guess you prefer not to query the CPU capabilities while deciding
> > > > the vIOMMU features. But to me, they are not that irrelevant.:)
> > > > 
> > > > Here the hardware address width in vt-d, and the one in cpuid.MAXPHYSADDR
> > > > are referring to the same concept. In VM, both are the maximum guest physical
> > > > address width. If we do not check the CPU field here, we will still have to
> > > > check the CPU field in other places such as build_dmar_q35(), and reset the
> > > > s->haw_bits again.
> > > > 
> > > > Is this explanation convincing enough? :)  
> > > current build_dmar_q35() doesn't do it, it's all new code in this series that
> > > contains not acceptable direct access from one device (iommu) to another (cpu).   
> > > Proper way would be for the owner of iommu to fish limits from somewhere and set
> > > values during iommu creation.  
> > 
> > Well, current build_dmar_q35() doesn't do it, because it is using the incorrect value. :)
> > According to the spec, the host address width is the maximum physical address width,
> > yet current implementation is using the DMA address width. For me, this is not only
> > wrong, but also unsecure. For this point, I think we all agree this need to be fixed.
> > 
> > As to how to fix it - should we query the cpu fields, I still do not understand why
> > this is not acceptable. :)
> > 
> > I had thought of other approaches before, yet I did not choose:
> > 
> > 1> Introduce a new parameter, say, "x-haw-bits" which is used for iommu to limit its  
> > physical address width(similar to the "x-aw-bits" for IOVA). But what should we check
> > this parameter or not? What if this parameter is set to sth. different than the "phys-bits"
> > or not?
> > 
> > 2> Another choice I had thought of is, to query the physical iommu. I abandoned this  
> > idea because my understanding is that vIOMMU is not a passthrued device, it is emulated.
> 
> > So Igor, may I ask why you think checking against the cpu fields so not acceptable? :)
> Because accessing private fields of device from another random device is not robust
> and a subject to breaking in unpredictable manner when field meaning or initialization
> order changes. (analogy to baremetal: one does not solder wire to a CPU die to let
> access some piece of data from random device).
> 

With either the solution below or the one I proposed, we still
have a ordering problem: if we want "-cpu ...,phys-bits=..." to
affect the IOMMU device, we will need the CPU objects to be
created before IOMMU realize.

At least both proposals make the initialization ordering
explicitly a responsibility of the machine code.  In either case,
I don't think we will start creating all CPU objects after device
realize any time soon.


> I've looked at intel-iommu code and how it's created so here is a way to do the thing
> you need using proper interfaces:
> 
> 1. add x-haw_bits property
> 2. include in your series patch
>     '[Qemu-devel] [PATCH] qdev: let machine hotplug handler to override  bus hotplug handler'
> 3. add your iommu to pc_get_hotpug_handler() to redirect plug flow to
>    machine and let _pre_plug handler to check and set x-haw_bits for machine level

Wow, that's a very complex way to pass a single integer from
machine code to device code.  If this is the only way to do that,
we really need to take a step back and rethink our API design.

What's wrong with having a simple
  uint32_t pc_max_phys_bits(PCMachineState*)
function?

> 4. you probably can use phys-bits/host-phys-bits properties to get data that you need
>    also see how ms->possible_cpus, that's how you can get access to CPU from machine
>    layer.
> 
[...]

-- 
Eduardo

