Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  20 Dec 2018 08:40:25 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 8596F58055F;
	Wed, 19 Dec 2018 08:15:21 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by orsmga003-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 19 Dec 2018 08:15:20 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AgC6W4BagUDZoZo2Oy8bWdfD/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpcu7Yh7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTzFPDJ2y?=
 =?us-ascii?q?b4UPDOQPM+hXoIb/qFQSohW+HhGsCeH0xz9UhXL7x7E23/gvHAzE2gErAtIAsG?=
 =?us-ascii?q?7TrNXwLKocSee1zLPSwjXHYfNZwSnz6JLQahAnp/GDQ6lwetfWxEkpEAPFlE+f?=
 =?us-ascii?q?qYjrPz6OyuQNqW+b7+xmVe2xkG4rsQZxoiKgxso1jITCm4wbylfB9SpjwYY1I8?=
 =?us-ascii?q?W1SEBhYdG6DpRfqj+VN5B1QsM+RGFooDw2yrocuZ60ZCQKzY4oxx/ba/CeaYeI?=
 =?us-ascii?q?+A7sVOaQITdmmn1pYq6whxG38UWm1+byVdG03U5UoiZZltTArG0B2hLN5sSdV/?=
 =?us-ascii?q?dw/Vut1SyO2g3R8u1JIl04mbDGJ5Mgw7M8jIcfvEXAEyPshkn6kbKae0M58eay?=
 =?us-ascii?q?8evneK/pppqEOo90lA7+NqMul9ShAeQ3LAcORXKX+eei2735+032XrFKgucxkq?=
 =?us-ascii?q?nDv5DWPcUbpqinDA9Jyosv9QqzAjO83NgFk3QLMkhJdA+EgoT1IV3DIfL1Ae+6?=
 =?us-ascii?q?g1u2kTdrw/7GPqfmApXINnXDlLbhfbBg609T0QYzzs5Q54hSCr4fJPL/Q0jxtd?=
 =?us-ascii?q?LeDhAnKQy52PjnCNpj2YMEQ26PAbGWMLnUsVCW4uIjOe6MZJUauDrlMfgq++bu?=
 =?us-ascii?q?jWMlmV8aZaSp2ZoXaHOmEfh8LESZfGHhgtMAEWcMowo/Q/bmiFyEUT5PeXmyW7?=
 =?us-ascii?q?gw6S08CIKjFY3DXJyigKSd3CenGZ1bfmBGBUqNEXf0bYqEXO0AaCKPIsB7lDwE?=
 =?us-ascii?q?WqOsS4sg1RGoqQ/7xKBrLuvS+i0Eq53j0MJ56PHUlRE37TZ0FdiS03mRT2FomW?=
 =?us-ascii?q?MFXz023KdhrkBnyVeD1q54g/pfFdFI4/NJUwE6NYPTzuBgCtDyXB7BccmNSFq8?=
 =?us-ascii?q?XtqmBjQxRMorw9ASe0Z9B8mijhfb0iWwGL8Vl7uLBJ8u/qLGxXfxJd1wy3LH1K?=
 =?us-ascii?q?knklknTdFDNWyghq5j6QfTA5TFnFmel6avba4cxjLC9H+fzWqSu0FVSA1wXr/D?=
 =?us-ascii?q?XXwFYkvWrM725kXNT7K1DbQnMw1BydONK6dQa93pi0lGS+nnONjEf22xnGKwDw?=
 =?us-ascii?q?6SxryQdIrqZ3kd3CLFBUcZiQ8T42iJORI+Bii7pWLeFyJhFVTob0Po8ul+rXe7?=
 =?us-ascii?q?Q1QwzwGLaU1hyrW09gQUhfyaV/McwLYEtD09pDVzGVa3x8jWBMaYpwp9YKVcZs?=
 =?us-ascii?q?sw70pd2mLHqQNxJJygILpkhl4FbQt3uVjj1xF2CoVGjMgro2kmzAt0KaKEzlxB?=
 =?us-ascii?q?cymU0oz3Or3SMmPy5gyga7bK2lHC19ab4rsP6PU9q1XkoAGpFkoj/29709VP1H?=
 =?us-ascii?q?uc/JHKDAsUUZL+SUs38xl6p7fHYigy/Y/U1HtsMbWqvT/Gwd4mGOwlyhO4dddF?=
 =?us-ascii?q?LKyEDBPyE9EdB8W2MuMqn0ambx0aM+FS7qI7JN6meOac166tP+ZgmyymgH9D4I?=
 =?us-ascii?q?B81EKM6iV9RvTJ35YD3/GXwA+HWy3gg1emt8D9gZpEai0KHmqj1SjkA5ZcZ61v?=
 =?us-ascii?q?fYoRFWiiOcy2xtVkiJ7rVH5V71qjB1IA2M+0dhuedV393QtM1UsJpXyrgze3zz?=
 =?us-ascii?q?txkzsxtKqQwDTOw/j+dBoAImNLXmhigkv2Loiukt8aW1Kkbw43mxu/5Eb23rRU?=
 =?us-ascii?q?q757L2bOX0hIZS/2L2d5X6u0t7qCZdNP6ZwyvSVWVuS8fU6VSrrnrxQG1CPjGn?=
 =?us-ascii?q?NUxConeDGyppX5gxt6hXqdLXZytnbYedt8xQzC5NzaXvNR2jsGRC9liTjYHFS8?=
 =?us-ascii?q?Pt+p/cmKmJfHqOyxS2WhVphLeynx0YyArDe75XFtARCnnfC8gMfnEQs50S/8zd?=
 =?us-ascii?q?VqTj/HrBX/Yonq0aS1L+Rnc1JsBF/97cp6B45/npExhJEWxXgVmJGV8WAbnmf0?=
 =?us-ascii?q?NNVRwbj+Y2YVRT4X397V5xDo2U15IXKO3Y75VHSdws16atm+Y2MW3D897s9QBK?=
 =?us-ascii?q?eV6rxEgTV6ol6ioQ3NZvh9my8XyeEy534Cn+EJpA0twz2eAr8IHElUJyzslwmS?=
 =?us-ascii?q?4NC4o6Vaf2Kvcbm21EpjktGtFrCCogdAWHnnfpcuBzN/7sJ6MFjUyn389pnkeM?=
 =?us-ascii?q?XMbdIUrhCUlhbAj+tPJ54rmPsFmzFnOX7jsn0/0OE0kwZu3Z6hsYiDKmVt+r+5?=
 =?us-ascii?q?AxFCOj30YcMT5i/ijaJEksmK2ICvG41rGi8XU5vwUfKoDDUSuOz7NwaJFT0wsH?=
 =?us-ascii?q?aaFqDZHQ+C80dmtHPPHouvN3GWInkZ0NpjSAOcJExZnAAbQjE6koQlGQCtwczr?=
 =?us-ascii?q?aF156SwJ5l7kthtMzfplOALlXWfYoAeody04SJyCLBdN6gFC5kHVMdGR7+5pHi?=
 =?us-ascii?q?FY+IGhoxKJKmCBewtICmQJUFSeB1//Jrmu+cXA8++AC+q8NfTOZKuBqfdEW/eU?=
 =?us-ascii?q?356v0ZZm/zWRNsWJJHZiFOY22k5CXXB/BsTYlC8DSy0RlyLRccGboA2w9TFwrs?=
 =?us-ascii?q?C66P7rQh7g5ZOTC7tONtVi4xC3gaCeN+6JmSZ2MzBY2okXxX/Pzrgf00UfiyVv?=
 =?us-ascii?q?dzmrDLQBujTBTKPWmq9LEREbbzl/O9dP76I5xgNNI9LUisvp1r5kif44E1dFWk?=
 =?us-ascii?q?LgmsGqZswKInuxNFDdBEaMO7SJOyfLw9zsYa6nTb1QjeNUtwC/uDqBEk/jOCiD?=
 =?us-ascii?q?mCftVxy1Le5MiySbNgREuI6hahZtFXTjTNX+ZxKhLd94lic2zqM0h3/QMW4cMC?=
 =?us-ascii?q?Nxc0dMrr2W8CNZje9zG21H7np5M+aEnzyV4PXfKpYTqfFrGDh7l/pG4HQmzLtY?=
 =?us-ascii?q?9D1ERP1wmCfIstFiuU2pkumRxTphSxdOrjdLhISWvURtI6nZ959AWWra8xIJ92?=
 =?us-ascii?q?mfFxMKp959AN31p69Q0sTPlL70KDpa89Pb580cB83VKMKBKHUgMBrpFyTSDAsK?=
 =?us-ascii?q?VjOrMWDfh0pAkPCd7HGVr546qoTyl5oKULNUSFs1FvZJQnhiSfsGLZRsVzUoi/?=
 =?us-ascii?q?ayisIS+GG+pxncQsZd9sTOUP6IW623cB6WiLBFY10DxrauacwDO4u+10F8Z11S?=
 =?us-ascii?q?mIXRB1GWTd1LujdmbAI/vANK6nc6Bmky3V/1LwCg+nkeEdaqkRMszAhze+Ig8H?=
 =?us-ascii?q?Hr+VhzblbQpW48nVc8nf3hgCuNa3j/Nqq9UYxNCDbzrw42KJy/Cwp8awy/mQp6?=
 =?us-ascii?q?OSvYSqh5jr18eGQtgwjZ/dNNFuRbVrZsewILyLecYPBsmV5bsCS8g0hc+fHCF4?=
 =?us-ascii?q?BhhSMta5enq38G0AVmP/AvIqmFAq1Tx1xesZ6ULimu2/t5lAkZPU8J/kuOYikO?=
 =?us-ascii?q?vkETcL48KHz7raRX9QWelm4bKyA3XP0wr6cvrxtlNg=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ARAAAdbhpch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgVWBFAN/J4N9iBmLfIFgCCUUl0mBdhIYDQYBhy0iNAkNAQMBAQE?=
 =?us-ascii?q?BAQECARMBAQEIDQkIKSMMgjYkAYJhAQEBAQMBAQEgBAsBBQgBASwLAQUJAQEIA?=
 =?us-ascii?q?g4HAwICJgICAyQBLwYBDAYCAQEBFoMHAYIBBAEKjFSabXB8M4J2AQEFgkODYoE?=
 =?us-ascii?q?FAwWBC4s0F4F/gREnDIFhUC6DHgECAoE+AQEKgxyCV4lBh2iEcIsdCYcQhjGEG?=
 =?us-ascii?q?x6Jd4diiUiEeYRGhnuBRoIOfQg7gmyCGwwXg0qFFIVAPzIBAQGBAgEBixQOF4I?=
 =?us-ascii?q?nAQE?=
X-IPAS-Result: =?us-ascii?q?A0ARAAAdbhpch0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBgVW?=
 =?us-ascii?q?BFAN/J4N9iBmLfIFgCCUUl0mBdhIYDQYBhy0iNAkNAQMBAQEBAQECARMBAQEID?=
 =?us-ascii?q?QkIKSMMgjYkAYJhAQEBAQMBAQEgBAsBBQgBASwLAQUJAQEIAg4HAwICJgICAyQ?=
 =?us-ascii?q?BLwYBDAYCAQEBFoMHAYIBBAEKjFSabXB8M4J2AQEFgkODYoEFAwWBC4s0F4F/g?=
 =?us-ascii?q?REnDIFhUC6DHgECAoE+AQEKgxyCV4lBh2iEcIsdCYcQhjGEGx6Jd4diiUiEeYR?=
 =?us-ascii?q?GhnuBRoIOfQg7gmyCGwwXg0qFFIVAPzIBAQGBAgEBixQOF4InAQE?=
X-IronPort-AV: E=Sophos;i="5.56,373,1539673200"; 
   d="scan'208";a="57549331"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 19 Dec 2018 08:15:05 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729165AbeLSQPE (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 19 Dec 2018 11:15:04 -0500
Received: from smtp.domeneshop.no ([194.63.252.55]:54796 "EHLO
        smtp.domeneshop.no" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1728852AbeLSQPD (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 19 Dec 2018 11:15:03 -0500
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed; d=tronnes.org; s=ds201810;
        h=Content-Transfer-Encoding:Content-Type:In-Reply-To:MIME-Version:Date:Message-ID:From:References:Cc:To:Subject; bh=klHXkjLDgSgenCYQncAf+mV+omKU7xjSqPrqf2TxqmU=;
        b=KBfF+fkj1b/wqZ3+nH72bcNUJVfLD3ePzNFfJhUhmCaj7Bnr3qe36nfFKH836PrWzUbFYNKZkrgcuzrKtarqw/nNkWH2Yl8YO9CxDFy6TN2tudPwGSdauevdfvmA9u/gXbMWsJ9cT9RZQDein4xKZgvNu/MQ6INrFvYHvYIiI9j3xk7HZ6IlkDZ2rCnS/xA329OTug3EPwQ07HjLSMidh5aJoH7KDp2lEeOO0oOYR19fD4084fMu4fWrz4bIVG6Cp/w897nBcnTLNfDW/VH4OHlNA7lIZdCNxCpx64XgJDZ2CpMCRrnhBtsKttEuEnpMmu0lMns52+VNM3i2alW5Qg==;
Received: from 211.81-166-168.customer.lyse.net ([81.166.168.211]:59392 helo=[192.168.10.173])
        by smtp.domeneshop.no with esmtpsa (TLS1.2:ECDHE_RSA_AES_128_GCM_SHA256:128)
        (Exim 4.84_2)
        (envelope-from <noralf@tronnes.org>)
        id 1gZeUo-0007co-Tx; Wed, 19 Dec 2018 17:14:54 +0100
Subject: Re: [PATCH] drm/xen-front: Make shmem backed display buffer coherent
To: Oleksandr Andrushchenko <andr2000@gmail.com>,
        xen-devel@lists.xenproject.org, linux-kernel@vger.kernel.org,
        dri-devel@lists.freedesktop.org, daniel.vetter@intel.com,
        jgross@suse.com, boris.ostrovsky@oracle.com
Cc: Oleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>,
        Gerd Hoffmann <kraxel@redhat.com>
References: <20181127103252.20994-1-andr2000@gmail.com>
 <17640791-5306-f7e4-8588-dd39c14e975b@tronnes.org>
 <c5fa494c-2ead-e190-6e8c-43478275f789@gmail.com>
From: =?UTF-8?Q?Noralf_Tr=c3=b8nnes?= <noralf@tronnes.org>
Message-ID: <96086dbe-8065-2d0d-e5f6-4932ffbf956e@tronnes.org>
Date: Wed, 19 Dec 2018 17:14:48 +0100
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:60.0) Gecko/20100101
 Thunderbird/60.3.3
MIME-Version: 1.0
In-Reply-To: <c5fa494c-2ead-e190-6e8c-43478275f789@gmail.com>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org


Den 19.12.2018 09.18, skrev Oleksandr Andrushchenko:
> On 12/18/18 9:20 PM, Noralf TrÃ¸nnes wrote:
>>
>> Den 27.11.2018 11.32, skrev Oleksandr Andrushchenko:
>>> From: Oleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>
>>>
>>> When GEM backing storage is allocated with drm_gem_get_pages
>>> the backing pages may be cached, thus making it possible that
>>> the backend sees only partial content of the buffer which may
>>> lead to screen artifacts. Make sure that the frontend's
>>> memory is coherent and the backend always sees correct display
>>> buffer content.
>>>
>>> Fixes: c575b7eeb89f ("drm/xen-front: Add support for Xen PV display 
>>> frontend")
>>>
>>> Signed-off-by: Oleksandr Andrushchenko 
>>> <oleksandr_andrushchenko@epam.com>
>>> ---
>>> Â  drivers/gpu/drm/xen/xen_drm_front_gem.c | 62 
>>> +++++++++++++++++++------
>>> Â  1 file changed, 48 insertions(+), 14 deletions(-)
>>>
>>> diff --git a/drivers/gpu/drm/xen/xen_drm_front_gem.c 
>>> b/drivers/gpu/drm/xen/xen_drm_front_gem.c
>>> index 47ff019d3aef..c592735e49d2 100644
>>> --- a/drivers/gpu/drm/xen/xen_drm_front_gem.c
>>> +++ b/drivers/gpu/drm/xen/xen_drm_front_gem.c
>>> @@ -33,8 +33,11 @@ struct xen_gem_object {
>>> Â Â Â Â Â  /* set for buffers allocated by the backend */
>>> Â Â Â Â Â  bool be_alloc;
>>> Â  -Â Â Â  /* this is for imported PRIME buffer */
>>> -Â Â Â  struct sg_table *sgt_imported;
>>> +Â Â Â  /*
>>> +Â Â Â Â  * this is for imported PRIME buffer or the one allocated via
>>> +Â Â Â Â  * drm_gem_get_pages.
>>> +Â Â Â Â  */
>>> +Â Â Â  struct sg_table *sgt;
>>> Â  };
>>> Â  Â  static inline struct xen_gem_object *
>>> @@ -77,10 +80,21 @@ static struct xen_gem_object 
>>> *gem_create_obj(struct drm_device *dev,
>>> Â Â Â Â Â  return xen_obj;
>>> Â  }
>>> Â  +struct sg_table *xen_drm_front_gem_get_sg_table(struct 
>>> drm_gem_object *gem_obj)
>>> +{
>>> +Â Â Â  struct xen_gem_object *xen_obj = to_xen_gem_obj(gem_obj);
>>> +
>>> +Â Â Â  if (!xen_obj->pages)
>>> +Â Â Â Â Â Â Â  return ERR_PTR(-ENOMEM);
>>> +
>>> +Â Â Â  return drm_prime_pages_to_sg(xen_obj->pages, xen_obj->num_pages);
>>> +}
>>> +
>>> Â  static struct xen_gem_object *gem_create(struct drm_device *dev, 
>>> size_t size)
>>> Â  {
>>> Â Â Â Â Â  struct xen_drm_front_drm_info *drm_info = dev->dev_private;
>>> Â Â Â Â Â  struct xen_gem_object *xen_obj;
>>> +Â Â Â  struct address_space *mapping;
>>> Â Â Â Â Â  int ret;
>>> Â  Â Â Â Â Â  size = round_up(size, PAGE_SIZE);
>>> @@ -113,10 +127,14 @@ static struct xen_gem_object 
>>> *gem_create(struct drm_device *dev, size_t size)
>>> Â Â Â Â Â Â Â Â Â  xen_obj->be_alloc = true;
>>> Â Â Â Â Â Â Â Â Â  return xen_obj;
>>> Â Â Â Â Â  }
>>> +
>>> Â Â Â Â Â  /*
>>> Â Â Â Â Â Â  * need to allocate backing pages now, so we can share those
>>> Â Â Â Â Â Â  * with the backend
>>> Â Â Â Â Â Â  */
>>
>>
>> Let's see if I understand what you're doing:
>>
>> Here you say that the pages should be DMA accessible for devices that 
>> can
>> only see 4GB.
>
> Yes, your understanding is correct. As we are a para-virtualized 
> device we
>
> do not have strict requirements for 32-bit DMA. But, via dma-buf export,
>
> the buffer we create can be used by real HW, e.g. one can pass-through
>
> real HW devices into a guest domain and they can import our buffer (yes,
>
> they can be IOMMU backed and other conditions may apply).
>
> So, this is why we are limiting to DMA32 here, just to allow more 
> possible
>
> use-cases
>
>>
>>> +Â Â Â  mapping = xen_obj->base.filp->f_mapping;
>>> +Â Â Â  mapping_set_gfp_mask(mapping, GFP_USER | __GFP_DMA32);
>>> +
>>> Â Â Â Â Â  xen_obj->num_pages = DIV_ROUND_UP(size, PAGE_SIZE);
>>> Â Â Â Â Â  xen_obj->pages = drm_gem_get_pages(&xen_obj->base);
>>> Â Â Â Â Â  if (IS_ERR_OR_NULL(xen_obj->pages)) {
>>> @@ -125,8 +143,27 @@ static struct xen_gem_object *gem_create(struct 
>>> drm_device *dev, size_t size)
>>> Â Â Â Â Â Â Â Â Â  goto fail;
>>> Â Â Â Â Â  }
>>> Â  +Â Â Â  xen_obj->sgt = xen_drm_front_gem_get_sg_table(&xen_obj->base);
>>> +Â Â Â  if (IS_ERR_OR_NULL(xen_obj->sgt)){
>>> +Â Â Â Â Â Â Â  ret = PTR_ERR(xen_obj->sgt);
>>> +Â Â Â Â Â Â Â  xen_obj->sgt = NULL;
>>> +Â Â Â Â Â Â Â  goto fail_put_pages;
>>> +Â Â Â  }
>>> +
>>> +Â Â Â  if (!dma_map_sg(dev->dev, xen_obj->sgt->sgl, xen_obj->sgt->nents,
>>> +Â Â Â Â Â Â Â Â Â Â Â  DMA_BIDIRECTIONAL)) {
>>
>>
>> Are you using the DMA streaming API as a way to flush the caches?
> Yes
>> Does this mean that GFP_USER isn't making the buffer coherent?
>
> No, it didn't help. I had a question [1] if there are any other better 
> way
>
> to achieve the same, but didn't have any response yet. So, I implemented
>
> it via DMA API which helped.

As Gerd says asking on the arm list is probably the best way of finding a
future proof solution and understanding what's going on.

But if you don't get any help there and you end up with the present
solution I suggest you add a comment that this is for flushing the caches
on arm. With the current code one can be led to believe that the driver
uses the dma address somewhere.

What about x86, does the problem exist there?

I wonder if you can call dma_unmap_sg() right away since the flushing has
already happened. That would contain this flushing "hack" inside the
gem_create function.

I also suggest calling drm_prime_pages_to_sg() directly to increase
readability, since the check in xen_drm_front_gem_get_sg_table() isn't
necessary for this use case.

Noralf.


>
>>
>> Noralf.
>>
>>> +Â Â Â Â Â Â Â  ret = -EFAULT;
>>> +Â Â Â Â Â Â Â  goto fail_free_sgt;
>>> +Â Â Â  }
>>> +
>>> Â Â Â Â Â  return xen_obj;
>>> Â  +fail_free_sgt:
>>> +Â Â Â  sg_free_table(xen_obj->sgt);
>>> +Â Â Â  xen_obj->sgt = NULL;
>>> +fail_put_pages:
>>> +Â Â Â  drm_gem_put_pages(&xen_obj->base, xen_obj->pages, true, false);
>>> +Â Â Â  xen_obj->pages = NULL;
>>> Â  fail:
>>> Â Â Â Â Â  DRM_ERROR("Failed to allocate buffer with size %zu\n", size);
>>> Â Â Â Â Â  return ERR_PTR(ret);
>>> @@ -149,7 +186,7 @@ void 
>>> xen_drm_front_gem_free_object_unlocked(struct drm_gem_object *gem_obj)
>>> Â Â Â Â Â  struct xen_gem_object *xen_obj = to_xen_gem_obj(gem_obj);
>>> Â  Â Â Â Â Â  if (xen_obj->base.import_attach) {
>>> -Â Â Â Â Â Â Â  drm_prime_gem_destroy(&xen_obj->base, xen_obj->sgt_imported);
>>> +Â Â Â Â Â Â Â  drm_prime_gem_destroy(&xen_obj->base, xen_obj->sgt);
>>> Â Â Â Â Â Â Â Â Â  gem_free_pages_array(xen_obj);
>>> Â Â Â Â Â  } else {
>>> Â Â Â Â Â Â Â Â Â  if (xen_obj->pages) {
>>> @@ -158,6 +195,13 @@ void 
>>> xen_drm_front_gem_free_object_unlocked(struct drm_gem_object *gem_obj)
>>> Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  xen_obj->pages);
>>> Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  gem_free_pages_array(xen_obj);
>>> Â Â Â Â Â Â Â Â Â Â Â Â Â  } else {
>>> +Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  if (xen_obj->sgt) {
>>> + dma_unmap_sg(xen_obj->base.dev->dev,
>>> +Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  xen_obj->sgt->sgl,
>>> +Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  xen_obj->sgt->nents,
>>> +Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  DMA_BIDIRECTIONAL);
>>> +Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  sg_free_table(xen_obj->sgt);
>>> +Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  }
>>> Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  drm_gem_put_pages(&xen_obj->base,
>>> Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  xen_obj->pages, true, false);
>>> Â Â Â Â Â Â Â Â Â Â Â Â Â  }
>>> @@ -174,16 +218,6 @@ struct page 
>>> **xen_drm_front_gem_get_pages(struct drm_gem_object *gem_obj)
>>> Â Â Â Â Â  return xen_obj->pages;
>>> Â  }
>>> Â  -struct sg_table *xen_drm_front_gem_get_sg_table(struct 
>>> drm_gem_object *gem_obj)
>>> -{
>>> -Â Â Â  struct xen_gem_object *xen_obj = to_xen_gem_obj(gem_obj);
>>> -
>>> -Â Â Â  if (!xen_obj->pages)
>>> -Â Â Â Â Â Â Â  return ERR_PTR(-ENOMEM);
>>> -
>>> -Â Â Â  return drm_prime_pages_to_sg(xen_obj->pages, xen_obj->num_pages);
>>> -}
>>> -
>>> Â  struct drm_gem_object *
>>> Â  xen_drm_front_gem_import_sg_table(struct drm_device *dev,
>>> Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  struct dma_buf_attachment *attach,
>>> @@ -203,7 +237,7 @@ xen_drm_front_gem_import_sg_table(struct 
>>> drm_device *dev,
>>> Â Â Â Â Â  if (ret < 0)
>>> Â Â Â Â Â Â Â Â Â  return ERR_PTR(ret);
>>> Â  -Â Â Â  xen_obj->sgt_imported = sgt;
>>> +Â Â Â  xen_obj->sgt = sgt;
>>> Â  Â Â Â Â Â  ret = drm_prime_sg_to_page_addr_arrays(sgt, xen_obj->pages,
>>> Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  NULL, xen_obj->num_pages);
>> _______________________________________________
>> dri-devel mailing list
>> dri-devel@lists.freedesktop.org
>> https://lists.freedesktop.org/mailman/listinfo/dri-devel
>
> Thank you,
>
> Oleksandr
>
> [1] 
> https://www.mail-archive.com/xen-devel@lists.xenproject.org/msg31745.html
>
