Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 12 Dec 2018 08:53:30 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 7FE9558079D;
	Tue, 11 Dec 2018 09:41:32 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by fmsmga006-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 11 Dec 2018 09:41:31 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AaFG9vhDQ1Qlnojy9Ekc8UyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7+r8qwAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VDK/5KlpVRDokj?=
 =?us-ascii?q?8KOT4n/m/KhMJ+j6VVrxCvpxxk247ZYpqYOOZicq7HYd8XX3ZNUtpXWidcAo28?=
 =?us-ascii?q?dYwPD+8ZMOhcqIn9vEUBrRWjDgSxHuzg1j5Ihnzr1qA90eQhFhrG0xIuH98VrH?=
 =?us-ascii?q?TUq9r0NKYOXuCt1qbIyyjMYOlM1Tjh74jIdwksrPeRVrxzacrc0VcjGx/Bg1mK?=
 =?us-ascii?q?tIDoMS2Z2v4Qv2WY8+ZsT+Oihmw/pw1svjSixN0ghpTJi44PyV3I6D91zJgpKd?=
 =?us-ascii?q?C7TkNwfMSqH4FKty6AMot7WsMiTH9suCY90rAGp5G7czYQyJg9xB7QdeaHc46W?=
 =?us-ascii?q?7RLnTuqRJi14hH19dLK+gRa971Sgx/XiWsWo1FtGtDdJn9fSunwXyhDe6dSLRu?=
 =?us-ascii?q?F880qjwTqP0hrc6uBAIUA6j6rbLJshz6Y0lpoSt0TDAyD3lFz1jKCIbEUk/Pan?=
 =?us-ascii?q?6+D+brXhqJ6cMZF7ihvlP6QwlcywH/44PhINX2eF4+S80qPs/UnjTLVNlP02nb?=
 =?us-ascii?q?HVsIrGKsQDuq65HwhV354n6xa+DDepzs4UnHYaLF9efBKHjo7pO0zBIfziDPe/?=
 =?us-ascii?q?hUisnylvx/zcIrLhBZDNJGDZkLj9ZbZ991JcyA0rwNBf/Z1UC60BL+j0WkPrtN?=
 =?us-ascii?q?zYEwU2Mwq7w+v8DNV914UeWX+AA6ODMaPSt0OI6fwrI+WWeIAVvzP9IeA/5/Hy?=
 =?us-ascii?q?lX85hUMdfa6x0JsVb3C3AO5qI0aeYXrqhNcBFnwHvg4/TOzslV2DXiRfZ3e0X6?=
 =?us-ascii?q?Ig+D47DJiqApvERoComLaBxju0HoVKZmBaDVCBCW3nd56EW/cLayKeONVhnSYG?=
 =?us-ascii?q?VbW6T48h1BeutBL1yrZ9L+rU/DEYuozn1NRv++LTkhQy/yRuD8uBy2GNU310nm?=
 =?us-ascii?q?QQSj81xq9/p1ZxylOC0adihfxYGsde5/dIUgc8KJ7dwPZ2C9H0WgLdYNiJTEyq?=
 =?us-ascii?q?TcmhATE0Vtgx2cMBY15hG9W+iRDOxzelDKULl7OVHpA08rjT337qJ8ljzXbK06?=
 =?us-ascii?q?0hj1ojQstLLmCmgq9/9w7OB4/GiUmZlqCqdbgC0y7J7muM0W2OvERAWg5qTarF?=
 =?us-ascii?q?RWwfZlfRrdnh+0zNVaGuBqo9PgtB08GCLLBKZcPvjVhdQPfjOdLeY3++mmuqBB?=
 =?us-ascii?q?aIwK+MY5Tue2kHwCrdD00EmRgJ/XmaLQg+Gjuho2XGATxyFFLvZkTs8fV+qHK7?=
 =?us-ascii?q?VEM00xuGb0p717qx+x4Vg/OcRugX3rIFvichtjp1EEy839LQF9qPuQ5hcL9Abt?=
 =?us-ascii?q?M65VdNzXjZuBBlPpy8M6BigUYTfB5zv0zw2BR4FIVBndIxo3M30QV9M6SY0FBG?=
 =?us-ascii?q?dzOGxp3wPrzXKm/v/BGgcaLW21fe0MqI9acL8vg3t1LjvASxHEo473pny8VV02?=
 =?us-ascii?q?eb5pjSDAsSTIj9XVot+xl7p7HVeC8954zP2H1oMKm0tCLC2t0zCOskzBagY8lQ?=
 =?us-ascii?q?MKeeGADuFM0aAtCkKPY2lFixchIEIOdS+bYuP8Ona/SJwrSrM/tnnD68i2RI/p?=
 =?us-ascii?q?p90kOV+yVgUOHI24sKzO+C3guAUTfxl1OhssHxmYBZajAeBGu/yS74BIFPYq1+?=
 =?us-ascii?q?Z5oECWCrI8ev3NVxm4btW2JE9F6kH14H2M6pdQCSblDnxg1QyEIXrGejmSu5yT?=
 =?us-ascii?q?x0jj4oorCe3CzI3+Ttah4HNnRXS2lliFfmOZK0gMwCXEi0cwgpkwOo5UTgyKhB?=
 =?us-ascii?q?p6R/LG7TTV1TfyfsLGFiUaqwtrycbM5J854otSRXUOKhYVGVULL9oh0a0z/9EG?=
 =?us-ascii?q?ta3jw0azaqupDhlRxglG2dNGpzrGbeecxoxRbQ/tvcSeRT3joHQil1kj3XBlm6?=
 =?us-ascii?q?P9m08tSYjZbDsuaiV22/Up1fazXkzYSFtCGj/21lHQW/n+yvmt3gCQU60jX019?=
 =?us-ascii?q?hwWSXIsRbzeI/r16uhPOJjf0loAkL86sVgFoF/lIswmI8f2XwAipqJ+noHlH/5?=
 =?us-ascii?q?Mc9H1qLmcHoNWTkLzsbQ4Ajk201sNGiFxoznWXWG3stuecO6bXgI1SIn4MBHE6?=
 =?us-ascii?q?OU7L1CnStorVu0twPRYf5hnjgDzfsi8mIVg+YMuAA11CWSHqgSHVVEPSzrjxmI?=
 =?us-ascii?q?89e+rKBNaGeua7ew0ld+ncu6DLGDuQxcXHf5epE/HS5/9Ml/MVTM0GHt5YHgYt?=
 =?us-ascii?q?XfcdUTthiMmRfak+dVMI4xluYNhSd/Im3yp3oly+omjRB02ZG6oZOKK2Fs/KK/?=
 =?us-ascii?q?Hx5ZOSf5Z8IV+jHxk6lemtya0JyoHpVkAj8LRofnTeq0EDIOsvTqLwSOHyc5qn?=
 =?us-ascii?q?iFArrTBxOf5F1lr3LSEJCrKneXK2MCzdh5QBmdJUpfgB0bXTkgn545EByqy9Ll?=
 =?us-ascii?q?cEtj+j8R4Vv4oANWyu10Lxn/TnvfpACwZzY0T5ifMQNW7hxY6EfTK8Ce9eVzHy?=
 =?us-ascii?q?dX/pC6qAyNK2qbZxlHDG0TW0yEAUzjMaeq5dXa7+eYAe++JePUYbqSsexeS+uI?=
 =?us-ascii?q?xZW334tm4TmMN8aPPnpjD/Eh2UpDR3d5G8vHlDUVViwXjDnAb8qapBe65y12od?=
 =?us-ascii?q?qz8PXtWALz+4SPD6FePslo+xCzma2DLfKfhD5lKTZE0ZMB3WXHyKUE014IlS5v?=
 =?us-ascii?q?dyOhEbABtSPWSKLQm6lXDwMUai9pNctI6b480RdJOcLBltz10bt4hOYvC1hZTV?=
 =?us-ascii?q?zhht2pZcsSLmGhNVPHAVyHO6icKTLXw8H4f6W8RKZUjOVVsR2wpDmaH1XiPjSF?=
 =?us-ascii?q?iznmSRSvPftQgyGcORxUoJu9fQp1CWj/UNLmbQW2Md9tgj0wxL00h3XKOnYdMD?=
 =?us-ascii?q?h8aUxNqLKQ4DhcgvV+HWxB83VkIfOFmyaf8+nXNJIWveF3DSRzkuIJqEg9nrhY?=
 =?us-ascii?q?9idJQLlplSLXhtBk5Vqhl63HyjNhVhdVgj1OnJKAvUokPr/WstFEWHDZ7FcO4H?=
 =?us-ascii?q?+WBhAiudRoEJvstrpWx9yJk7j8bH9e8frX8NEaCsySL9iIdDItOAToFBbaFgwA?=
 =?us-ascii?q?SiShNH2ZjEtY1Lmb9WWQhpw7rIX83ZQJV7lXXUA0EfVcDV5qWJQGIZFqTnYqir?=
 =?us-ascii?q?KWksMMzWSxoQOXR8hAuJ3DEPWIDrGnLDefkKkBYh4gwq3xJodVMZf0nwR4a1R+?=
 =?us-ascii?q?tJ7HF0rZQZZGpSglJg09q0Zl62VlQys4yRHLcASotV0UDvO61jQ/gQp9KbAv8y?=
 =?us-ascii?q?zh7X8rIUrLrzM5lkU4397ihGbCI3bKMK6sUNQOWGLPvE8rP8ajTg=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ARAACh9Q9ch0O0hNFcCBwBAQEEAQEHB?=
 =?us-ascii?q?AEBgVEHAQELAYFaghEnjBSMEIIhlz4UgRADTBIBARgTAYcuIjQJDQEDAQEBAQE?=
 =?us-ascii?q?BAgETAQEBCA0JCCkjDII2IoJlAwMBAiQZAQE4BQkBAVADMQEFARwHEgWCUUuCA?=
 =?us-ascii?q?gWaNDyKHYFsM4J2AQEFgQQBhiQIEodqhD8XgX+BEYduDYVRIokZJIcBkD8Jgia?=
 =?us-ascii?q?PICNgfIgKNockLIh3j2kGAgkHDyGBJYIOMxoIGxU7gmyCG4NtihxVIjIBgQEDA?=
 =?us-ascii?q?QEhE4ovAQE?=
X-IPAS-Result: =?us-ascii?q?A0ARAACh9Q9ch0O0hNFcCBwBAQEEAQEHBAEBgVEHAQELAYF?=
 =?us-ascii?q?aghEnjBSMEIIhlz4UgRADTBIBARgTAYcuIjQJDQEDAQEBAQEBAgETAQEBCA0JC?=
 =?us-ascii?q?CkjDII2IoJlAwMBAiQZAQE4BQkBAVADMQEFARwHEgWCUUuCAgWaNDyKHYFsM4J?=
 =?us-ascii?q?2AQEFgQQBhiQIEodqhD8XgX+BEYduDYVRIokZJIcBkD8JgiaPICNgfIgKNockL?=
 =?us-ascii?q?Ih3j2kGAgkHDyGBJYIOMxoIGxU7gmyCG4NtihxVIjIBgQEDAQEhE4ovAQE?=
X-IronPort-AV: E=Sophos;i="5.56,343,1539673200"; 
   d="scan'208";a="44515362"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 11 Dec 2018 09:41:13 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726916AbeLKRiL (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 11 Dec 2018 12:38:11 -0500
Received: from mail-yw1-f65.google.com ([209.85.161.65]:37383 "EHLO
        mail-yw1-f65.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726620AbeLKRiJ (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 11 Dec 2018 12:38:09 -0500
Received: by mail-yw1-f65.google.com with SMTP id h193so5774719ywc.4
        for <linux-kernel@vger.kernel.org>; Tue, 11 Dec 2018 09:38:08 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=toxicpanda-com.20150623.gappssmtp.com; s=20150623;
        h=from:to:subject:date:message-id:in-reply-to:references;
        bh=im1lOdR1gtAkoa5Y+U3jnYHZp+MThsPseW0SoznaozY=;
        b=dElFjUL6mOWqvfIN7pdHq7KvdZA/TSnmClfaII8u1KnK8lIDouqSSwhJtv6wLAYSOd
         psu68HLy6vx5qGKAD+FNvOYuyesDwSpolLB537QXJbQKwvHpmTSfPxGxd0ie62LyOsCC
         bPhbIN2J9w1tFmkIljNhcJjwG/uftGhyT+LsISUVoDJigICYVwZH01j2GhAcX3rRW/Fm
         BIPFOk7G8nUUpHBATObKMzuKipM1jsmXCHQ5TF0C9pJEvQx2gIY3Gqdswaq0leQD6qA0
         8s28SZADVdA4PAF0Vhn5vnPOdVA1ssWBoS8ZuKiY4rCAGueaUKtckTaNkxe0Zf1QiBXO
         /hCg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:subject:date:message-id:in-reply-to
         :references;
        bh=im1lOdR1gtAkoa5Y+U3jnYHZp+MThsPseW0SoznaozY=;
        b=RZYDDcGk79TxfXgbmiGmAFLmCOqatsa4ABDlZVlpk4yHpG3RWjeDwjrRvhGAnp/+tC
         HBSa3Pgx56hLHTDr2TWYvCq9H3OyJSDkRfB36KoZbqy2NJNlh+e0EUPVs1T8Udw+nSSt
         utm5l8/MrEXAtyOXLHCu0oPLzv2VJ2OJ2hVQHKK7AEBtrHX6SBB9rI5PvjBjtBKuIvrN
         k5QfUjlzGiV20ReL758/Yi1/FoAYXayXS+HHOhmpV9KgTFtk8T9zAddjWHHfC3R2AZGq
         zkAY9slKd8mGprov3wMRsO33o5AFbrWPm9Y0/EyVW9Q3M2dL6GEmBSIDzAQXo8uoN2Hb
         7lYA==
X-Gm-Message-State: AA+aEWa2j9jeyGGQk6QqsHrOy4OKdsHcreaRanlVquchsBPVwWV9H9WZ
        9M0GsuNrCmPlLTwc7kDKB7xG7Q==
X-Google-Smtp-Source: AFSGD/UWgQfH/IFA1ziDeQtpo/Az3ijAiizbIBHDC5CCjFtCTgcbOB9TMHT4hPOe6zI/ZWoFy+YT2g==
X-Received: by 2002:a81:56d7:: with SMTP id k206mr17467616ywb.167.1544549887505;
        Tue, 11 Dec 2018 09:38:07 -0800 (PST)
Received: from localhost ([107.15.81.208])
        by smtp.gmail.com with ESMTPSA id v9sm9126070ywh.2.2018.12.11.09.38.06
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Tue, 11 Dec 2018 09:38:06 -0800 (PST)
From: Josef Bacik <josef@toxicpanda.com>
To: kernel-team@fb.com, hannes@cmpxchg.org,
        linux-kernel@vger.kernel.org, tj@kernel.org, david@fromorbit.com,
        akpm@linux-foundation.org, linux-fsdevel@vger.kernel.org,
        linux-mm@kvack.org, riel@redhat.com, jack@suse.cz
Subject: [PATCH 1/3] filemap: kill page_cache_read usage in filemap_fault
Date: Tue, 11 Dec 2018 12:37:59 -0500
Message-Id: <20181211173801.29535-2-josef@toxicpanda.com>
X-Mailer: git-send-email 2.14.3
In-Reply-To: <20181211173801.29535-1-josef@toxicpanda.com>
References: <20181211173801.29535-1-josef@toxicpanda.com>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

If we do not have a page at filemap_fault time we'll do this weird
forced page_cache_read thing to populate the page, and then drop it
again and loop around and find it.  This makes for 2 ways we can read a
page in filemap_fault, and it's not really needed.  Instead add a
FGP_FOR_MMAP flag so that pagecache_get_page() will return a unlocked
page that's in pagecache.  Then use the normal page locking and readpage
logic already in filemap_fault.  This simplifies the no page in page
cache case significantly.

Acked-by: Johannes Weiner <hannes@cmpxchg.org>
Reviewed-by: Jan Kara <jack@suse.cz>
Signed-off-by: Josef Bacik <josef@toxicpanda.com>
---
 include/linux/pagemap.h |  1 +
 mm/filemap.c            | 73 ++++++++++---------------------------------------
 2 files changed, 16 insertions(+), 58 deletions(-)

diff --git a/include/linux/pagemap.h b/include/linux/pagemap.h
index 226f96f0dee0..b13c2442281f 100644
--- a/include/linux/pagemap.h
+++ b/include/linux/pagemap.h
@@ -252,6 +252,7 @@ pgoff_t page_cache_prev_miss(struct address_space *mapping,
 #define FGP_WRITE		0x00000008
 #define FGP_NOFS		0x00000010
 #define FGP_NOWAIT		0x00000020
+#define FGP_FOR_MMAP		0x00000040
 
 struct page *pagecache_get_page(struct address_space *mapping, pgoff_t offset,
 		int fgp_flags, gfp_t cache_gfp_mask);
diff --git a/mm/filemap.c b/mm/filemap.c
index 81adec8ee02c..03bce38d8f2b 100644
--- a/mm/filemap.c
+++ b/mm/filemap.c
@@ -1503,6 +1503,9 @@ EXPORT_SYMBOL(find_lock_entry);
  *   @gfp_mask and added to the page cache and the VM's LRU
  *   list. The page is returned locked and with an increased
  *   refcount. Otherwise, NULL is returned.
+ * - FGP_FOR_MMAP: Similar to FGP_CREAT, only we want to allow the caller to do
+ *   its own locking dance if the page is already in cache, or unlock the page
+ *   before returning if we had to add the page to pagecache.
  *
  * If FGP_LOCK or FGP_CREAT are specified then the function may sleep even
  * if the GFP flags specified for FGP_CREAT are atomic.
@@ -1555,7 +1558,7 @@ struct page *pagecache_get_page(struct address_space *mapping, pgoff_t offset,
 		if (!page)
 			return NULL;
 
-		if (WARN_ON_ONCE(!(fgp_flags & FGP_LOCK)))
+		if (WARN_ON_ONCE(!(fgp_flags & (FGP_LOCK | FGP_FOR_MMAP))))
 			fgp_flags |= FGP_LOCK;
 
 		/* Init accessed so avoid atomic mark_page_accessed later */
@@ -1569,6 +1572,13 @@ struct page *pagecache_get_page(struct address_space *mapping, pgoff_t offset,
 			if (err == -EEXIST)
 				goto repeat;
 		}
+
+		/*
+		 * add_to_page_cache_lru lock's the page, and for mmap we expect
+		 * a unlocked page.
+		 */
+		if (fgp_flags & FGP_FOR_MMAP)
+			unlock_page(page);
 	}
 
 	return page;
@@ -2293,39 +2303,6 @@ generic_file_read_iter(struct kiocb *iocb, struct iov_iter *iter)
 EXPORT_SYMBOL(generic_file_read_iter);
 
 #ifdef CONFIG_MMU
-/**
- * page_cache_read - adds requested page to the page cache if not already there
- * @file:	file to read
- * @offset:	page index
- * @gfp_mask:	memory allocation flags
- *
- * This adds the requested page to the page cache if it isn't already there,
- * and schedules an I/O to read in its contents from disk.
- */
-static int page_cache_read(struct file *file, pgoff_t offset, gfp_t gfp_mask)
-{
-	struct address_space *mapping = file->f_mapping;
-	struct page *page;
-	int ret;
-
-	do {
-		page = __page_cache_alloc(gfp_mask);
-		if (!page)
-			return -ENOMEM;
-
-		ret = add_to_page_cache_lru(page, mapping, offset, gfp_mask);
-		if (ret == 0)
-			ret = mapping->a_ops->readpage(file, page);
-		else if (ret == -EEXIST)
-			ret = 0; /* losing race to add is OK */
-
-		put_page(page);
-
-	} while (ret == AOP_TRUNCATED_PAGE);
-
-	return ret;
-}
-
 #define MMAP_LOTSAMISS  (100)
 
 /*
@@ -2449,9 +2426,11 @@ vm_fault_t filemap_fault(struct vm_fault *vmf)
 		count_memcg_event_mm(vmf->vma->vm_mm, PGMAJFAULT);
 		ret = VM_FAULT_MAJOR;
 retry_find:
-		page = find_get_page(mapping, offset);
+		page = pagecache_get_page(mapping, offset,
+					  FGP_CREAT|FGP_FOR_MMAP,
+					  vmf->gfp_mask);
 		if (!page)
-			goto no_cached_page;
+			return vmf_error(-ENOMEM);
 	}
 
 	if (!lock_page_or_retry(page, vmf->vma->vm_mm, vmf->flags)) {
@@ -2488,28 +2467,6 @@ vm_fault_t filemap_fault(struct vm_fault *vmf)
 	vmf->page = page;
 	return ret | VM_FAULT_LOCKED;
 
-no_cached_page:
-	/*
-	 * We're only likely to ever get here if MADV_RANDOM is in
-	 * effect.
-	 */
-	error = page_cache_read(file, offset, vmf->gfp_mask);
-
-	/*
-	 * The page we want has now been added to the page cache.
-	 * In the unlikely event that someone removed it in the
-	 * meantime, we'll just come back here and read it again.
-	 */
-	if (error >= 0)
-		goto retry_find;
-
-	/*
-	 * An error return from page_cache_read can result if the
-	 * system is low on memory, or a problem occurs while trying
-	 * to schedule I/O.
-	 */
-	return vmf_error(error);
-
 page_not_uptodate:
 	/*
 	 * Umm, take care of errors if the page isn't up-to-date.
-- 
2.14.3

