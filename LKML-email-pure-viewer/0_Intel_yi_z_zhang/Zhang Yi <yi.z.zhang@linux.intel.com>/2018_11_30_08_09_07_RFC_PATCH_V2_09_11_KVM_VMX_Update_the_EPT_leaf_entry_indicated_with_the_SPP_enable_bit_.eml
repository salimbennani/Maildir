Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:14:24 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 9F1A6580213;
	Fri, 30 Nov 2018 00:12:49 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga001-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 30 Nov 2018 00:12:49 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Asaj8vxPMuTkVy36HCWsl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KPj/ocbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Xymp4aV2Rx/ykC?=
 =?us-ascii?q?oJNyA3/nzZhMJzi6xUohyhpwdnw4PWe4yZKOZyc7nBcd4AWWZNQsBcXDFBDIOm?=
 =?us-ascii?q?aIsPCvIMMuVYr4bnoVsOoga1CgutBOjyzTJJhn720bc70ug7EADG3BYvH9QBsH?=
 =?us-ascii?q?nPqNX1NaESUf26zaXSzDXDae9W1in56ITSbh8hpvSMUKt2fMHMykcvDxvIgkuM?=
 =?us-ascii?q?pYHhJT+Zy+oAv3aB4+Z9Vu+jl3QrpgBzrzS328shjpfFipgVx13E7yl0wJg5Kc?=
 =?us-ascii?q?e7RUN4Z9OvDYFeuDuAN4RsR8MvW2Fotzg+yr0BoZO7YicKx4o9xxLFaPyIbZKI?=
 =?us-ascii?q?4hT9W+aVOzt4g2hleL2nixaz90iv1PH8W9Gq3FpWqidJiMTAu34T2xDJ98SKSe?=
 =?us-ascii?q?dx8l2g1DuNzwzT7/tLIUEwlarVMZ4hxbswm4IXsUTCGC/2hUr3gLaVdko64Oio?=
 =?us-ascii?q?7froYrH/qp+bOY50jB/xMr41l8yhDuQ3LBIOU3KY+euizr3j+1P2QLFQgv0xiK?=
 =?us-ascii?q?nZv4jWJd4Hqa6hHw9VzoEj5g67Dzen09QXg2MLLV1YeB+ci4jpOlfOIO33DPul?=
 =?us-ascii?q?glSslitryO7CPrH7HprNKX3Dmq/7fblh805c1BYzzddH6pJUEL4BIe7zVVX2tN?=
 =?us-ascii?q?DCDh85Lha7w+DoCNhm0oMeWGSPArKWMa/IsF+I4P4vLPeIZIMPpDn9LP0l7eb0?=
 =?us-ascii?q?jXAlgV8dYbWp3ZwPZXC6GfRpPV+VYXnrgtcHF2cKuREzTOjriF2ETD5SaGy+X6?=
 =?us-ascii?q?M65jEnFo2mCZ3PSZyqgLyExC27BIFZZnhaClCQFnflb5+LW+wMaCKVIc9tiCYE?=
 =?us-ascii?q?WqKjS4I60RGutQn6y6doL+bO+y0Ys47j28Zx5+HJiR4y8jl0BdyH026RV2F0gn?=
 =?us-ascii?q?8IRzgu0aB8u0N9zE2P0ax5g/NCE9xT6OhEUgM7NZ7a0ux7BMr+WgPHfteVVlmm?=
 =?us-ascii?q?Rs+qDi02TtI029UOeVpyG82+jhDf2CqnG6IamKaVBJMq6K7c32L+J8Bmy3nY0q?=
 =?us-ascii?q?ktiF0mQshKNW2inaN/8wnTB4jUk0SWjaqqdKIc3DLT+2eH12aBoEZYUAtoW6Xf?=
 =?us-ascii?q?QX8fflfWrcj+5k7aUrChE6onPRVbxc6CMKRKbMbpgktARPr4PNTeYmSxm3q/BB?=
 =?us-ascii?q?qSx7OMapbqdHsZ3CnHFEcElAUT926cNQciHiehv37eDDt2GFLzYkPs9O5+qG+7?=
 =?us-ascii?q?Tk401Q2Kc1dt172v+h4RhPycTfwT06kAuCcgrTV0AVm808jXC9qGuwpuYqFcbc?=
 =?us-ascii?q?kh71dA0GLTrxZ9MYC4L6B+ml4edBx6sFnq1xppBYRPj8groGkxwwpvNK2XylVB?=
 =?us-ascii?q?dzCf3ZDuIbDXLmjy/Baya6/ZwF3e0dCW+rsR5/Q8sVnsoAapFk86+XV9z9ZVy2?=
 =?us-ascii?q?ec5onNDAcKUZPxT1w7+ARgq7DbYiky/YXU1XJ3PKmwsz/C3c8pBeQ/xhaheddf?=
 =?us-ascii?q?LL2LFAvoH8IGAMiuLfQgm0K1YRIcIOBS6Kk0Mtu8d/uHxKGkJvxgky+hjWhd5o?=
 =?us-ascii?q?ByzFiM9ytlRuHUxZkFx+yX0RWdVzf7ilesqcT3mYFCZTEPEWuz0ynkBIhNZqJs?=
 =?us-ascii?q?eYYHE3uhI8qyxt9mnZ7iR2ZY9EK/B1MBwMKoeRuSY0b93AFKzkQXvHqnlDC8zz?=
 =?us-ascii?q?x1lTEps6We0DbPw+TkaBoIJGpLSHN+glfrJIi+l8oaU1Swbwg1iBul4l73x6pB?=
 =?us-ascii?q?q6RlLGnTQkBIczLtL254UauwtbuCY8hR55MuqihXVOW8YVaHSr/yuRca0iXjH3?=
 =?us-ascii?q?dAyzA/bT2lppL5nxligmKHMHlztGbZed13xRrH5N3TX/lR0iAERCl5jznaHVy8?=
 =?us-ascii?q?P9iv/dWJmJbPqOG+V2S9VpJNdSnn15+PtCy+5WdyGx2wg+izmsH7EQg9ySL71M?=
 =?us-ascii?q?NlVSTSoBb8f4nkzaK6Me18c0lsBV/87dd6G45knosxgpEQxWYVhpGP8XUblmfz?=
 =?us-ascii?q?NM1R2bjiY3oVWT4L39nV7RDg2E1iLXKG3Zj1V3uDzct6e9m1fHkW1Tkj4MBQB6?=
 =?us-ascii?q?eZ97hEnSpzolqlogPde/l9njEByfQw7H4Wmf0GuA0ozi+FGLAdAVFYPTDwlxSP?=
 =?us-ascii?q?992+sKJXZGO1fbmxzkV+m82hDKqZogFdQ3v5fpYiHSlt7sRwKl7M0Xvz6p36d9?=
 =?us-ascii?q?nUd94cqhqUkxLYhehPNJ0xjuYKhTZgOW/lpnIq0ek7jRhz3Z2guIiHNn5g/Ka4?=
 =?us-ascii?q?Ah5eKz30aNkf+jDrjaZCgMmW25qjEYlmGjUORJHoV+6nECoOtfT7MAaDCD88pW?=
 =?us-ascii?q?2eGbXBBg+T8ltmo2jME5C2NHGXOX8Zws95RBSGIExfgQYUXCg1n5IjFwCqwtDh?=
 =?us-ascii?q?f1l95jwL+lH4rR5MwPpyNxbjSmffuBuoajAsRZmfKxpW8xhC51rPPsyY9O5zBC?=
 =?us-ascii?q?ZY/puurAGWLmybZgJIDXwGW0CeBlDjOKWu6sfE8+SCGuW+KP7Oa62UqeNCT/eI?=
 =?us-ascii?q?2Y6v0ox+8jaMKMqPP3piD/462kZZXnB5AcPZmzoRRCwNiiLNdNWWpBO9+i1xs8?=
 =?us-ascii?q?C+/+7nWAPp5YuTFbRSNc9j9AyxgaeGL+SQnjp2KS5E1pMQwn/F0KIQ3EMJhCF0?=
 =?us-ascii?q?aTasEa4MtSrMTK/Lnq9XDhgbaz58NcdS7qI82BVNNtDfit/vyrF4ifs1AU9fVV?=
 =?us-ascii?q?P9gsGpedAKI2alOVPbBUaLMa6KKiHRz87rYaOzV7tQgf5Qtx2xvzabDkDiMi6C?=
 =?us-ascii?q?lznvSxCgL+VMgDuHMxxZvYG3agxtBnT7TNL6dh27N8d6jD0szr0yg3PKNGgcPi?=
 =?us-ascii?q?B9ckNNtLKQ6yxYj+57G2xA6HplMOaFlzyY7+neNpYZr/9rDj5omOJd5XRpg4dS?=
 =?us-ascii?q?uTlOQ/pnmS3ThsRjr1Gvjq+EzT8jGB9CrTBXmaqBvFluNKvU8JVNQzDP+xdJpW?=
 =?us-ascii?q?ObCggXj9FkFtHita1WxtXV0qn0LWRs6dXRqPkcDs7bYPOGeC4wMFz7XizUBQ0K?=
 =?us-ascii?q?ZTqqM3zPwU1bjPyWsHaSq85p+dDXhJMSR+oDBxQOHfQABxE9EQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AeAAAV8ABch0O0hNFiHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBg2snjBGMCCmBPwE4lzKBcxQYEwGBS4YpIjQJDQEDAQEBAQEBAgE?=
 =?us-ascii?q?TAQEBCA0JCCkvgjYigmUDAwECJFIGCQEBUANUBxIFgxyCAgWnfjOKL4dshCt6g?=
 =?us-ascii?q?RyBETMBgjCLCgKQHZAJBwINkSkYXnyFEIoyiHmBA45bgUaCDXCDPIJQjhgyAQE?=
 =?us-ascii?q?xAQGBAwEBjgEBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AeAAAV8ABch0O0hNFiHAEBAQQBAQcEAQGBUQcBAQsBg2s?=
 =?us-ascii?q?njBGMCCmBPwE4lzKBcxQYEwGBS4YpIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkvg?=
 =?us-ascii?q?jYigmUDAwECJFIGCQEBUANUBxIFgxyCAgWnfjOKL4dshCt6gRyBETMBgjCLCgK?=
 =?us-ascii?q?QHZAJBwINkSkYXnyFEIoyiHmBA45bgUaCDXCDPIJQjhgyAQExAQGBAwEBjgEBA?=
 =?us-ascii?q?Q?=
X-IronPort-AV: E=Sophos;i="5.56,297,1539673200"; 
   d="scan'208";a="42971083"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 30 Nov 2018 00:12:27 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727379AbeK3TRx (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 30 Nov 2018 14:17:53 -0500
Received: from mga01.intel.com ([192.55.52.88]:17444 "EHLO mga01.intel.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1727347AbeK3TRw (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 30 Nov 2018 14:17:52 -0500
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from orsmga003.jf.intel.com ([10.7.209.27])
  by fmsmga101.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 30 Nov 2018 00:09:24 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,297,1539673200"; 
   d="scan'208";a="105480402"
Received: from linux.intel.com ([10.54.29.200])
  by orsmga003.jf.intel.com with ESMTP; 30 Nov 2018 00:09:24 -0800
Received: from dazhang1-ssd.sh.intel.com (unknown [10.239.48.128])
        by linux.intel.com (Postfix) with ESMTP id B8D36580213;
        Fri, 30 Nov 2018 00:09:22 -0800 (PST)
From: Zhang Yi <yi.z.zhang@linux.intel.com>
To: pbonzini@redhat.com, mdontu@bitdefender.com, ncitu@bitdefender.com
Cc: rkrcmar@redhat.com, linux-kernel@vger.kernel.org,
        kvm@vger.kernel.org, Zhang Yi <yi.z.zhang@linux.intel.com>
Subject: [RFC PATCH V2 09/11] KVM: VMX: Update the EPT leaf entry indicated with the SPP enable bit.
Date: Fri, 30 Nov 2018 16:09:07 +0800
Message-Id: <09004f3e9fbe0a74223bf23f1bbe980398fa854b.1543481993.git.yi.z.zhang@linux.intel.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <cover.1543481993.git.yi.z.zhang@linux.intel.com>
References: <cover.1543481993.git.yi.z.zhang@linux.intel.com>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

If the sub-page write permission VM-execution control is set,
treatment of write accesses to guest-physical accesses
depends on the state of the accumulated write-access bit (position 1)
and sub-page permission bit (position 61) in the EPT leaf paging-structure.

Software will update the EPT leaf entry sub-page permission bit while
kvm_set_subpage. If the EPT write-access bit set to 0 and the SPP bit
set to 1 in the leaf EPT paging-structure entry that maps a 4KB page,
then the hardware will look up a VMM-managed Sub-Page Permission Table
(SPPT), which will also be prepared by setup kvm_set_subpage.

Signed-off-by: Zhang Yi <yi.z.zhang@linux.intel.com>
---
 arch/x86/kvm/mmu.c | 100 +++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 100 insertions(+)

diff --git a/arch/x86/kvm/mmu.c b/arch/x86/kvm/mmu.c
index b1773c6..d512125 100644
--- a/arch/x86/kvm/mmu.c
+++ b/arch/x86/kvm/mmu.c
@@ -1668,6 +1668,87 @@ int kvm_arch_write_log_dirty(struct kvm_vcpu *vcpu)
 	return 0;
 }
 
+static bool __rmap_open_subpage_bit(struct kvm *kvm,
+				    struct kvm_rmap_head *rmap_head)
+{
+	struct rmap_iterator iter;
+	bool flush = false;
+	u64 *sptep;
+	u64 spte;
+
+	for_each_rmap_spte(rmap_head, &iter, sptep) {
+		/*
+		 * SPP works only when the page is unwritable
+		 * and SPP bit is set
+		 */
+		flush |= spte_write_protect(sptep, false);
+		spte = *sptep | PT_SPP_MASK;
+		flush |= mmu_spte_update(sptep, spte);
+	}
+
+	return flush;
+}
+
+static int kvm_mmu_open_subpage_write_protect(struct kvm *kvm,
+					      struct kvm_memory_slot *slot,
+					      gfn_t gfn)
+{
+	struct kvm_rmap_head *rmap_head;
+	bool flush = false;
+
+	/*
+	 * we only support spp in a normal 4K level 1 page frame
+	 * If it a huge page, we drop it.
+	 */
+	rmap_head = __gfn_to_rmap(gfn, PT_PAGE_TABLE_LEVEL, slot);
+
+	if (!rmap_head->val)
+		return -EFAULT;
+
+	flush |= __rmap_open_subpage_bit(kvm, rmap_head);
+
+	if (flush)
+		kvm_flush_remote_tlbs(kvm);
+
+	return 0;
+}
+
+static bool __rmap_clear_subpage_bit(struct kvm *kvm,
+				     struct kvm_rmap_head *rmap_head)
+{
+	struct rmap_iterator iter;
+	bool flush = false;
+	u64 *sptep;
+	u64 spte;
+
+	for_each_rmap_spte(rmap_head, &iter, sptep) {
+		spte = (*sptep & ~PT_SPP_MASK) | PT_WRITABLE_MASK;
+		flush |= mmu_spte_update(sptep, spte);
+	}
+
+	return flush;
+}
+
+static int kvm_mmu_clear_subpage_write_protect(struct kvm *kvm,
+					       struct kvm_memory_slot *slot,
+					       gfn_t gfn)
+{
+	struct kvm_rmap_head *rmap_head;
+	bool flush = false;
+
+	rmap_head = __gfn_to_rmap(gfn, PT_PAGE_TABLE_LEVEL, slot);
+
+	if (!rmap_head->val)
+		return -EFAULT;
+
+	flush |= __rmap_clear_subpage_bit(kvm, rmap_head);
+
+	if (flush)
+		kvm_flush_remote_tlbs(kvm);
+
+	return 0;
+}
+
 bool kvm_mmu_slot_gfn_write_protect(struct kvm *kvm,
 				    struct kvm_memory_slot *slot, u64 gfn)
 {
@@ -4175,12 +4256,31 @@ int kvm_mmu_set_subpages(struct kvm *kvm, struct kvm_subpage *spp_info)
 	int npages = spp_info->npages;
 	struct kvm_memory_slot *slot;
 	u32 *wp_map;
+	int ret;
 	int i;
 
 	for (i = 0; i < npages; i++, gfn++) {
 		slot = gfn_to_memslot(kvm, gfn);
 		if (!slot)
 			return -EFAULT;
+
+		/*
+		 * open SPP bit in EPT leaf entry to write protect the
+		 * sub-pages in corresponding page
+		 */
+		if (access != (u32)((1ULL << 32) - 1))
+			ret = kvm_mmu_open_subpage_write_protect(kvm,
+					slot, gfn);
+		else
+			ret = kvm_mmu_clear_subpage_write_protect(kvm,
+					slot, gfn);
+
+		if (ret) {
+			pr_info("SPP ,didn't get the gfn:%llx from EPT leaf level1\n"
+				"Current we didn't support huge page on SPP\n"
+				"Please try to disable the huge page\n", gfn);
+			return -EFAULT;
+		}
 		wp_map = gfn_to_subpage_wp_info(slot, gfn);
 		*wp_map = access;
 	}
-- 
2.7.4

