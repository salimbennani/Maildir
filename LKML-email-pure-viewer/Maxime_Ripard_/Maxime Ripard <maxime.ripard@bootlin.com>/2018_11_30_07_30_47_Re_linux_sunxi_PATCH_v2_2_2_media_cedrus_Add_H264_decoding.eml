Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 16:09:03 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 82EFA580213;
	Thu, 29 Nov 2018 23:33:55 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 23:33:54 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ATIFIixejOWeCuUcLYjYYAhE9lGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc6/YxaN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRPDI28?=
 =?us-ascii?q?cYUBEukPPehXoIbhulQBrxWxBRK0BO7t0TJIiWP60Lcg3ug9CwzL3gotFM8Ovn?=
 =?us-ascii?q?TOq9X1Mb8fX+evw6jHzDXDau1Z0irh5ojJahAuu+uMUq9tesfWzEkgDQzEjlSV?=
 =?us-ascii?q?qYP7JT+VzOUNs3CB4Op6SO2ikHUoqwZ2ojizwscsi4/JipgJxVDD8CV02YA4Ls?=
 =?us-ascii?q?C2Rk58ZN6rCppQtyeCOoRtRcMiRH1ouCI7yr0Ao5K0YC8KyJE/yx7CcPyIbZKI?=
 =?us-ascii?q?4gn7VOmLPTh3mmhpeLK4hxe86USgzuz8Vs+p0FdFsipFjMPAtncX1xzc7MWMV/?=
 =?us-ascii?q?hz/l+51DqRywze7vtILV06mKbFMZIt3709moYJvUnCHCL6gEH7gLOMekgn+eWk?=
 =?us-ascii?q?8fnrb7b8qpOBN4J5iQfzObk0lMOlG+Q3KA0OUnCb+eui0L3j+lX0QKtFjvIoiK?=
 =?us-ascii?q?nVqpPaKtoBpq6/HQBV1pwv6xGlDzepyNgYnH8HI0xZeB+fkYTlJ1XDLOrlAfqx?=
 =?us-ascii?q?nVigiipnyvPaMrH7A5jALGDPkLL7crZ8705cxhAzzdda559MDrEBIfTzWlL+td?=
 =?us-ascii?q?DBDR82LRa0w+D5B9V5z48eXmyOAqmHP6PIqlKI+O0vLPeWZIMPuzbyNeIl5/jw?=
 =?us-ascii?q?gn89g1MderOp3ZQPZHCiAvtmO1mZYWbrgtoZFWcKvwk+Q/LwhFyNTD5efHKyX6?=
 =?us-ascii?q?M65jEmB4OqF4bDRoaxgLOf2Ce3BIFZZmdDClqUC3fna52EW+sQaCKVOsJhkiYL?=
 =?us-ascii?q?Vbm9S4A70hGirg/6y6d9IerS9S0Vrpbj1Nlz5+3OmhA+7z10D8KB026TS2F4hH?=
 =?us-ascii?q?8HRzgz3Kpnu0xy1k+D0bRkg/xfDdFT5fRJXRkgOZ7fyOx6DdbyWgXac9eNSVam?=
 =?us-ascii?q?RMimAD4rQtIwxd8Of1hyG9G4gh/f2CqqBqcfl6aXC5ws7qLcw3/xKt5nxHbd1K?=
 =?us-ascii?q?khiFomTtFVNWK8hK5y7AzTB4/Pk0WEmKemb6Uc3CjR9GidyWqCpl1XUAl1Ua/d?=
 =?us-ascii?q?R3AQelPWrcjl5kPFV7KuCq4oMg1bxc6GK6tFcNvpjVpdSffnOdTeZX+xmmiqCR?=
 =?us-ascii?q?aJwLOMcJTle2EH0CrBD0gElhgZ/WyaOggmGiehv2XeASRzGl31fUPj7/NyqHOh?=
 =?us-ascii?q?QU8y1AGFcUth272x+h4WgPycT+ge3rYFuCcntjV1E0yx39PQC9qcuQVheL9Qbs?=
 =?us-ascii?q?864FdCzWjZrRByPoS8L6B+gV4Taxl4sFnw1xppEIlAkdIlrHUxzAVsL6KVy1dB?=
 =?us-ascii?q?dzKe3ZDtNbzbMGjy/Baza6HI3lHSysqZ+qAK6P4gsVXsoBmpFlY+83Vgy9RVz3?=
 =?us-ascii?q?qc5pDNDAoOUZLwUlw79wRgq7HdeCk944LU1XtjMaSvtj/C2tQpBPYqyxq6ftdf?=
 =?us-ascii?q?Nr+EGxH2E8EAG8euL+kqkUCzbh0YJOBS6LI0P8S+evSc3K6kIulhkyymjGhd+4?=
 =?us-ascii?q?99z1+D+DB6Su7L2JYF3eqV3g+GVzf6kVegvdr7mYFCZTEOAGW/zTLoC5JWZq13?=
 =?us-ascii?q?ZYwLE3uhI9WrxtVigJ7gQ35Z9EO5C1wawsOoeBqSYEb73Q1fzkkXpX2nmS2lzz?=
 =?us-ascii?q?17iT0pr6yf3DDQzOTmbhYIJmlLRGx6h1f2PYe0l8waXFSvbwUxjhul5Fr1yLJB?=
 =?us-ascii?q?pKtiKGnfW0FIcDbsL2FjS6e/qqCNY8pS55w2qyVXV+K8bEueSr78pRsaziziE3?=
 =?us-ascii?q?FfxDA9azGlpJH5kwZmh2KaKXZ5tGDZdt1oxRfD+NzcQuZc3zoHRCViiTjbHEO8?=
 =?us-ascii?q?P8Sv/diPk5fDs+a+V3+uV5FJcCnry5+AuzW/5WFwHRK/mPWzkMX9EQcmyS/7y8?=
 =?us-ascii?q?VqVSLQoRb+eIbrzae6MeFgfkVyH1/z8cl6GoJ/kos2mp4Q32MXhpGU/XoBjGfy?=
 =?us-ascii?q?Ps9X2aP4bHoRWzELx8TZ7xTi2E1mNniJ3Z72Vm2Bwst9YNm3emMX1Tg678xQCq?=
 =?us-ascii?q?eU7bpEkDBxolq5qwLRfPd8ki0cyfso9H4VneUJtBAxwSWaB7AYBVNYMjD0lxSU?=
 =?us-ascii?q?89C+q71aZGW1frixzkZ+nc2hA6uEogFTQ3v5fpYiHSlt7sRwKl7M0Xvz6p36d9?=
 =?us-ascii?q?nUd94cqhqUkxLYhehPNJ0xjuYKhTZgOW/luH0lyu07ggZ00ZC0ooeHMHlt87yj?=
 =?us-ascii?q?AhFDKDL1fcwT9yrpjaZfmMaWwo+uEo9gGjUNQJvnU/aoHCgOuvTgMgaECCc8pW?=
 =?us-ascii?q?uDGbrDAQ+f719rr27IE5CuLX2WJWMWzdN/RBmGP0xfgRsZXDE7np4/CwCry9bt?=
 =?us-ascii?q?cEZ/5jAN+FH4rgFAxf5vNxn6Sm3fvhunai8oSJiDKxpb9hpN6F3SMcya8+J/BS?=
 =?us-ascii?q?VY/oC6oQyJK2ybYRlIDG4TVkyFAVDjIqeh5d3a/+eEAeq+KuPEYa+SpuxGS/eI?=
 =?us-ascii?q?2ZWv35Nk/zmWM8WAIGJiA+cn2kZZXnB5BsfZmygJSyMNjCLAdMqbpBa6+i1qoc?=
 =?us-ascii?q?Gz6vXrWATz5YSRD7teK8lg+xezga2bLe6fmD55KSpE1pML3XLJyL8f3EMLiyFz?=
 =?us-ascii?q?bTatF64MtTXKTKLWla9aFBobayJ1NMtV4KMwxAhNOcjHitzr0r50lOI6C1BAVV?=
 =?us-ascii?q?b5gMGmedQKI32hNFPAHEuLNKqJJTzIw8H0YKOwU75QjP9Ttx2/pzmbCVLjPi+Y?=
 =?us-ascii?q?mjntVhCvN/xMjS6BMBxfvoG9bghiCWz5QN36bR27Ncd9jScqzr0smnPKKWkcPC?=
 =?us-ascii?q?BmfENQtbKQ9z1Xg/VlF2xF73poNu2Emyef7+nFJZcaq/prAiJol+1E5HQ20ada?=
 =?us-ascii?q?7CZBRPZtgivdssZuo026kumI0jdnTBtOqjNRiI2Xp0ltJaXZ+YdGWXvf+BIN7G?=
 =?us-ascii?q?OQCwkFptd/C93vvbxQxcbLlK7pNDhC9NfU99MGB8fIMMKHLGYhMR3xFT/UFgQF?=
 =?us-ascii?q?SzurNWDZh0NFkfCS9mearp41qpX3nJoOS7lbVEE6F/8AC0RlGsACL4lzXj8+jb?=
 =?us-ascii?q?Gbi8sItjKCq0zzSd9cs5KPtPGICP/iI37Nj7ReYRYKh6j7N40ZO4bT1Elra108?=
 =?us-ascii?q?l4PPTRn+R9dI9whofg4xrQ138WB3VGF7j0fsegKo7TkJFOa9hBIegAx5feAs8n?=
 =?us-ascii?q?Hn5FJhdQmCnzc5jERkwYatujuWajOkaf7oBYw=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AFAABn5gBch0O0hNFjGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBVAIBAQEBCwGCaYECJ4N5iHeLKYINFI11iyoGDx0NBgGHdCI3Bg0?=
 =?us-ascii?q?BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmEBAQEBAgEBAiAEUgUBCQEBChgJI?=
 =?us-ascii?q?QICAwwdKwYYgxwBgXkIBAEKpxB8M4QtAYVyCgWCbYkqgVc/hCODHgSEY4JXAol?=
 =?us-ascii?q?TllMHAoIeBIRdgy+GfSMKgVCINIcOin6CXoxXgXczGiODPIInF4NKhRSFQD8yA?=
 =?us-ascii?q?YEBAwEBIRONTQEB?=
X-IPAS-Result: =?us-ascii?q?A0AFAABn5gBch0O0hNFjGgEBAQEBAgEBAQEHAgEBAQGBVAI?=
 =?us-ascii?q?BAQEBCwGCaYECJ4N5iHeLKYINFI11iyoGDx0NBgGHdCI3Bg0BAwEBAQEBAQIBE?=
 =?us-ascii?q?wEBAQgNCQgpIwyCNiQBgmEBAQEBAgEBAiAEUgUBCQEBChgJIQICAwwdKwYYgxw?=
 =?us-ascii?q?BgXkIBAEKpxB8M4QtAYVyCgWCbYkqgVc/hCODHgSEY4JXAolTllMHAoIeBIRdg?=
 =?us-ascii?q?y+GfSMKgVCINIcOin6CXoxXgXczGiODPIInF4NKhRSFQD8yAYEBAwEBIRONTQE?=
 =?us-ascii?q?B?=
X-IronPort-AV: E=Sophos;i="5.56,297,1539673200"; 
   d="asc'?scan'208";a="140224544"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 23:33:53 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726826AbeK3SjM (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 30 Nov 2018 13:39:12 -0500
Received: from mail.bootlin.com ([62.4.15.54]:43751 "EHLO mail.bootlin.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726386AbeK3SjL (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 30 Nov 2018 13:39:11 -0500
Received: by mail.bootlin.com (Postfix, from userid 110)
        id CCBBC207B0; Fri, 30 Nov 2018 08:30:47 +0100 (CET)
X-Spam-Checker-Version: SpamAssassin 3.4.2 (2018-09-13) on mail.bootlin.com
X-Spam-Level: 
X-Spam-Status: No, score=-1.0 required=5.0 tests=ALL_TRUSTED,SHORTCIRCUIT
        shortcircuit=ham autolearn=disabled version=3.4.2
Received: from localhost (aaubervilliers-681-1-63-158.w90-88.abo.wanadoo.fr [90.88.18.158])
        by mail.bootlin.com (Postfix) with ESMTPSA id 939BD20742;
        Fri, 30 Nov 2018 08:30:47 +0100 (CET)
Date: Fri, 30 Nov 2018 08:30:47 +0100
From: Maxime Ripard <maxime.ripard@bootlin.com>
To: Jernej =?utf-8?Q?=C5=A0krabec?= <jernej.skrabec@gmail.com>
Cc: linux-sunxi@googlegroups.com, hans.verkuil@cisco.com,
        acourbot@chromium.org, sakari.ailus@linux.intel.com,
        Laurent Pinchart <laurent.pinchart@ideasonboard.com>,
        tfiga@chromium.org, posciak@chromium.org,
        Paul Kocialkowski <paul.kocialkowski@bootlin.com>,
        Chen-Yu Tsai <wens@csie.org>, linux-kernel@vger.kernel.org,
        linux-arm-kernel@lists.infradead.org, linux-media@vger.kernel.org,
        nicolas.dufresne@collabora.com, jenskuske@gmail.com,
        Thomas Petazzoni <thomas.petazzoni@bootlin.com>
Subject: Re: [linux-sunxi] [PATCH v2 2/2] media: cedrus: Add H264 decoding
 support
Message-ID: <20181130073047.auafqe3rzdqfs32d@flea>
References: <20181115145650.9827-1-maxime.ripard@bootlin.com>
 <2826880.kP3DS59ZBy@jernej-laptop>
 <20181127155028.5ukw3g6zjbnvarbp@flea>
 <6005903.5qHflpuMbl@jernej-laptop>
MIME-Version: 1.0
Content-Type: multipart/signed; micalg=pgp-sha256;
        protocol="application/pgp-signature"; boundary="cc6r7wwwz2glmnhj"
Content-Disposition: inline
In-Reply-To: <6005903.5qHflpuMbl@jernej-laptop>
User-Agent: NeoMutt/20180716
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org


--cc6r7wwwz2glmnhj
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable

On Tue, Nov 27, 2018 at 05:30:00PM +0100, Jernej =C5=A0krabec wrote:
> > > > +static void _cedrus_write_ref_list(struct cedrus_ctx *ctx,
> > > > +				   struct cedrus_run *run,
> > > > +				   const u8 *ref_list, u8 num_ref,
> > > > +				   enum cedrus_h264_sram_off sram)
> > > > +{
> > > > +	const struct v4l2_ctrl_h264_decode_param *decode =3D
> > > > run->h264.decode_param; +	struct vb2_queue *cap_q =3D
> > > > &ctx->fh.m2m_ctx->cap_q_ctx.q;
> > > > +	struct cedrus_dev *dev =3D ctx->dev;
> > > > +	u32 sram_array[CEDRUS_MAX_REF_IDX / sizeof(u32)];
> > > > +	unsigned int size, i;
> > > > +
> > > > +	memset(sram_array, 0, sizeof(sram_array));
> > > > +
> > > > +	for (i =3D 0; i < num_ref; i +=3D 4) {
> > > > +		unsigned int j;
> > > > +
> > > > +		for (j =3D 0; j < 4; j++) {
> > >=20
> > > I don't think you have to complicate with two loops here.
> > > cedrus_h264_write_sram() takes void* and it aligns to 4 anyway. So as=
 long
> > > input buffer is multiple of 4 (u8[CEDRUS_MAX_REF_IDX] qualifies for t=
hat),
> > > you can use single for loop with "u8 sram_array[CEDRUS_MAX_REF_IDX]".
> > > This should make code much more readable.
> >=20
> > This wasn't really about the alignment, but in order to get the
> > offsets in the u32 and the array more easily.
> >=20
> > Breaking out the loop will make that computation less easy on the eye,
> > so I guess it's very subjective.
> >=20
>=20
> For some strange reason, code below fixes decoding issue from one of my t=
est=20
> samples. This is what I actually meant with 1 loop approach:

Do you have that test sample somewhere accessible?

> static void _cedrus_write_ref_list(struct cedrus_ctx *ctx,
> 				   struct cedrus_run *run,
> 				   const u8 *ref_list, u8 num_ref,
> 				   enum cedrus_h264_sram_off sram)
> {
> 	const struct v4l2_ctrl_h264_decode_param *decode =3D run->h264.decode_pa=
ram;
> 	struct vb2_queue *cap_q =3D &ctx->fh.m2m_ctx->cap_q_ctx.q;
> 	struct cedrus_dev *dev =3D ctx->dev;
> 	u8 sram_array[CEDRUS_MAX_REF_IDX];
> 	unsigned int i;
>=20
> 	memset(sram_array, 0, sizeof(sram_array));
> 	num_ref =3D min(num_ref, (u8)CEDRUS_MAX_REF_IDX);
>=20
> 	for (i =3D 0; i < num_ref; i++) {
> 		const struct v4l2_h264_dpb_entry *dpb;
> 		const struct cedrus_buffer *cedrus_buf;
> 		const struct vb2_v4l2_buffer *ref_buf;
> 		unsigned int position;
> 		int buf_idx;
> 		u8 dpb_idx;
>=20
> 		dpb_idx =3D ref_list[i];
> 		dpb =3D &decode->dpb[dpb_idx];
>=20
> 		if (!(dpb->flags & V4L2_H264_DPB_ENTRY_FLAG_ACTIVE))
> 			continue;
>=20
> 		buf_idx =3D vb2_find_tag(cap_q, dpb->tag, 0);
> 		if (buf_idx < 0)
> 			continue;
>=20
> 		ref_buf =3D to_vb2_v4l2_buffer(ctx->dst_bufs[buf_idx]);
> 		cedrus_buf =3D vb2_v4l2_to_cedrus_buffer(ref_buf);
> 		position =3D cedrus_buf->codec.h264.position;
>=20
> 		sram_array[i] |=3D position << 1;
> 		if (ref_buf->field =3D=3D V4L2_FIELD_BOTTOM)
> 			sram_array[i] |=3D BIT(0);
> 	}
>=20
> 	cedrus_h264_write_sram(dev, sram, &sram_array, num_ref);
> }
>=20
> IMO this code is easier to read.

INdeed, thanks!

> > > > +			const struct v4l2_h264_dpb_entry *dpb;
> > > > +			const struct cedrus_buffer *cedrus_buf;
> > > > +			const struct vb2_v4l2_buffer *ref_buf;
> > > > +			unsigned int position;
> > > > +			int buf_idx;
> > > > +			u8 ref_idx =3D i + j;
> > > > +			u8 dpb_idx;
> > > > +
> > > > +			if (ref_idx >=3D num_ref)
> > > > +				break;
> > > > +
> > > > +			dpb_idx =3D ref_list[ref_idx];
> > > > +			dpb =3D &decode->dpb[dpb_idx];
> > > > +
> > > > +			if (!(dpb->flags & V4L2_H264_DPB_ENTRY_FLAG_ACTIVE))
> > > > +				continue;
> > > > +
> > > > +			buf_idx =3D vb2_find_tag(cap_q, dpb->tag, 0);
> > > > +			if (buf_idx < 0)
> > > > +				continue;
> > > > +
> > > > +			ref_buf =3D to_vb2_v4l2_buffer(ctx->dst_bufs[buf_idx]);
> > > > +			cedrus_buf =3D vb2_v4l2_to_cedrus_buffer(ref_buf);
> > > > +			position =3D cedrus_buf->codec.h264.position;
> > > > +
> > > > +			sram_array[i] |=3D position << (j * 8 + 1);
> > > > +			if (ref_buf->field =3D=3D V4L2_FIELD_BOTTOM)
> > >=20
> > > You newer set above flag to buffer so this will be always false.
> >=20
> > As far as I know, the field is supposed to be set by the userspace.
>=20
> How? I thought that only flags at queueing buffers can be set and there i=
s no=20
> bottom/top flag.

https://linuxtv.org/downloads/v4l-dvb-apis/uapi/v4l/buffer.html#c.v4l2_buff=
er

"Indicates the field order of the image in the buffer, see
v4l2_field. This field is not used when the buffer contains VBI
data. Drivers must set it when type refers to a capture stream,
applications when it refers to an output stream."

My understanding is that the application should set it, since we'll
use the output stream's buffer here. But I might very well be wrong
about it :/

Maxime

--=20
Maxime Ripard, Bootlin
Embedded Linux and Kernel engineering
https://bootlin.com

--cc6r7wwwz2glmnhj
Content-Type: application/pgp-signature; name="signature.asc"

-----BEGIN PGP SIGNATURE-----

iHUEABYIAB0WIQRcEzekXsqa64kGDp7j7w1vZxhRxQUCXADnJwAKCRDj7w1vZxhR
xTuYAQCEtGfmiUuTm93fk/hrPJWU/f/FFB088sTduq+8++H61wEA5anWdMhWub1M
AWZzg6ZguMdHkZkIT/ArhF3hHekzrwM=
=oxTm
-----END PGP SIGNATURE-----

--cc6r7wwwz2glmnhj--
