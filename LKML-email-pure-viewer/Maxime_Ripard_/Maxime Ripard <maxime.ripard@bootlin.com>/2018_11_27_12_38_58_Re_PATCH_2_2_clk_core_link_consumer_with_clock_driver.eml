Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 27 Nov 2018 21:03:42 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 24E515803C2;
	Tue, 27 Nov 2018 04:39:19 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by orsmga003-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 27 Nov 2018 04:39:18 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Ap3BgNxXGV8FmSrn0ajdeub8s0sXV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhGFvadThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGo2y?=
 =?us-ascii?q?YYsRAeQcPuhYoYbyqEcTohS8CwasH/vvxz1Ti3/5waE3yf4sHR3c0QA+Gd8FrX?=
 =?us-ascii?q?TarM/yNKcXSe27y7PHzDrCb/NTxzj29ZTGchE5of6WR7J/bNfaxE4qFwzfgVSQ?=
 =?us-ascii?q?qInlMC2P2uQXsmib9/BvVfiyhGM8sA5xpT+vxtsoionIgIIZ0EzL9SJ8wIssI9?=
 =?us-ascii?q?CzVUB1YdmhEJRKtiGaMZN7TdglQ2FvpCY6zrwGuZihcCcWz5QnwhjSYOGEfYiQ?=
 =?us-ascii?q?+h/vSvqdLDNiiH54dr+zmQy+/VWjx+HgTMW50VRHojJBn9XQrHwA1B/e5tKJR/?=
 =?us-ascii?q?Z95EutxyqD2gDV5+pZO047j7DbJIQkwrMolpocr0DDHijulUXog6+ZaF8k9vKr?=
 =?us-ascii?q?6+v5eLXmoIGTN4tuhgH5KKQuldSzAeU+MgcQQ2iW4fqw2KHn8EHjXblHgOM6nr?=
 =?us-ascii?q?PEvJ3ZOcgXvK+0Dg1N3oYm8Rm/DjOm0NoCnXkAKVJIYBaHj4nvO1HTL/H0FPS/?=
 =?us-ascii?q?jEq2kDdt2f/GOqTtApLDL3jFjrjhZ61w61BTyAUt19BT/ZFUBa8bIPL1REDxsM?=
 =?us-ascii?q?bUDhgjMwy72+rnEsly1psCWWKTBa+UKKfSsV6L5u0xOeWNa5IVtS35K/gk4f7u?=
 =?us-ascii?q?kHA4lUUcfamvwZsYdnS4Eu56LEWeZHrmms0BHnsSvgoiUOzqj0WPUT5JaHazQ6?=
 =?us-ascii?q?Iz/DY7BJimDYfeXI+thrOB0Ty/Hp1XYGBGF1+NHW3pd4WCR/cDdiaSLtV9nTwD?=
 =?us-ascii?q?ULirU5Uh2g22tA/m17pnKfLZ+i8ftZ39ztR15OrTlRc09TxzFMmd12CNT2dpnm?=
 =?us-ascii?q?IHXTM23aZ/oVBjxVeHy6R3n/tYFdlL7fNTTgg6LYLcz/B9C93qQA3BZdeJSFGl?=
 =?us-ascii?q?Qtm8GzE+VNAxzsQKY0Z8HdWikx/C0zCrA78Ti7yEGpg0/rjA0Hj2IsZ302zG27?=
 =?us-ascii?q?U5j1k6XstPMnWrhq1l+AjVHYLJl0SZmLysdaQTxyPN8GaDzWyTvEBXSgJwUKPF?=
 =?us-ascii?q?XWwBaUvSt9j2+kTCT7q2A7Q9LgRB0dKCKrdNatDxkFpJXunjN8rEb2KxgWiwAw?=
 =?us-ascii?q?2Iya2KbIbtf2Ud3yDdCEwfngAX/HaGMxU+Byi7r2LfCjxuCUzgY0f2/eZir3O7?=
 =?us-ascii?q?S1c+zxuWYE15y7q15hkViOSBRPwJwLILpj0tqzVuE1a7xNLZFdyAqhFlfKVdZ9?=
 =?us-ascii?q?M9/VhG2XjYtwx7IpyvMaRiikQCfARwukPkzw93BZlYkcg2sHMqyxJ/Kb6Z0FNE?=
 =?us-ascii?q?cDOYwZDwO73NJmnu5hyvbLTW2lXf0NaQ9acC8/A4q1TlvAG0GUsu6XRn099J03?=
 =?us-ascii?q?SC4pXGFhYdUZX0Ukwv7Rh1u6naYjUh54PTzXBjK620vSHN2t03BOop0A2vf8pC?=
 =?us-ascii?q?P6yeEg/yEMoaB9a1JewumlipaA8EPe9I+K41OcOma+WJ2KqxMOl8mzKmiHxN4J?=
 =?us-ascii?q?ph3UKU6yp8VunI0o4FwvGFxAeISy3wjVahss/tn4BEaiofHm6+ySjiGY5Qabd+?=
 =?us-ascii?q?fYcNCWeyPcK3ws9yiILqW35d7FSjHU8J2Ne1eRqOaFzwxRdQ1UULrnO9gyu30j?=
 =?us-ascii?q?t0nysvrqWBxizOwv3uewYdNW5PWWZtk03sIY+yj90BWEiobg4plAaq5Ergxqhb?=
 =?us-ascii?q?orh/IHfXQUtSYyf2KGRiWLOqtrWee85P9I8osSJPXeW8YFCWUL78rwEB0yP+GW?=
 =?us-ascii?q?tT3zQ7dzCsupXkkB12kmOdLHBvrHXHfcF83wvQ5NvZRfRJxDoJWDF4iSXLBli7?=
 =?us-ascii?q?J9Sp/8+bl43AsuC9UGKtTIZTfjPozYODtSu743NlARukkvC3m93nFxU60CDh29?=
 =?us-ascii?q?lrUyXIsAjzYo3x26umNuJne1FiBEXg5MpiBoF+jowwiYkQ2HcAgZWZ53gHkWb1?=
 =?us-ascii?q?MdhA3aL+bXwNRSMEwtLP4Qjl3lFjIWyNx47jSnqdxc5hbcGgYmwKwiI989xKCK?=
 =?us-ascii?q?CM4bxHhyR1o0C0rQLMYfdnmDcdxuAj6Hobg+EPpQoswT+RArEUHUlEIyPskw6E?=
 =?us-ascii?q?4My5rKVSfGyva6S/1FJindC9C7GPugRcWHf6epg4ByNx4NtwMEnQ0HLt8IHrY8?=
 =?us-ascii?q?ffbcgcthCPlxfAju5VKI8+l/YQhCpnP379smMhy+IhkRNu2pS6tpCdK2px5KK5?=
 =?us-ascii?q?HgJYNjrtasMP/THtiLxSn8eM0ICpA5VhAS4LXJrzQPKsETISs+nnNgmUHD09rH?=
 =?us-ascii?q?ebBaTQHQuF5Eh6qHLPFoihN2uLK3kB0dViWB6dKVREjw8OWzU6moM5GhquxMz8?=
 =?us-ascii?q?a0p54jER5ljlqhpD0O5oNh//UnvBqwescDs7VJ+fLB9O5AFY+0jVKdCe7v50Hy?=
 =?us-ascii?q?xA/J2utgmNJXKAZwhSEWEFQE+EB03gPrmz49nP6fOYC/G6L/vPZ7WOtONfW+2J?=
 =?us-ascii?q?xZKpzotp4TKMOt+TMXllCv0xwlBDUmxhG8TFhzUPTDQaliLKb86GvRe85zd4rs?=
 =?us-ascii?q?al/PTwXwLv44SPBqBWMdVu/RC2nKiCO/SRhCZ/NTZXyJcMyWXUx7gY2V4Ykztu?=
 =?us-ascii?q?eCW1EbQcqS7NS7rdmq9JAB4aaCNzN8pI47g/3glXPs7bhc361qRljv4uEFpFUV?=
 =?us-ascii?q?3hmse0Zc0FOW29NVXHBFqVO7SCPzHE38b3YaakQ71KkOpUrwGwuSqcE0L7JDuD?=
 =?us-ascii?q?iiLmVwqxPuBMli2bOB1etZq5chZsD2jjUd3nZge6MN9xkT0537k0imnWOm4bND?=
 =?us-ascii?q?h2a1lNoaGI7SNEnvV/HHRM7mZkLemBgSqW8/PUJYoWsfR1BCR5jOZa4HU8y7tI?=
 =?us-ascii?q?4yBIXv11mC3OrtFwp1GqiPWAyj1iUBBWsDZEmJqLvVl+OaXe7pRBWWzL/BQI7W?=
 =?us-ascii?q?WRDRQFv9pkCt31tKBWxdjCj6bzKDZE89LJ8soQHcnUKMSbMHU/NRrlAiLbDAwA?=
 =?us-ascii?q?TW3jCWaKok1EjfyWvkecv54zrtC4nZsXV7JfEkY8B/UTDmxvG9seJJZxGDgjlO?=
 =?us-ascii?q?jIotQP4C+bpQnQQcgShJHfX+ieSaHqISaYiLQCfRoQyKn0BY4UMZH/2kokYV5/?=
 =?us-ascii?q?yteZU3HMVMxA93UyJjQ/p19ApT0nFjU+?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ADAAAyOv1bh0O0hNFkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUwMBAQEBCwGCaYECFBOMcI00FI1ziTmBbQYPHQMQAYh2IjYHDQE?=
 =?us-ascii?q?DAQEBAQEBAgETAQEBCA0JCCkjDII2JAGCYgECAwECJFIGCQEBChgJJQMMHSsGE?=
 =?us-ascii?q?wUWgwYBggEEAaYJM4oeCgWCbYkggVc/gRGDEopcAokjgXKUIlUHAoIcBIRcgy2?=
 =?us-ascii?q?GfCMKkQGKbo8WDoF4MxojgzyCJxeDSopUPzKBAgMBASETimkpgiQBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ADAAAyOv1bh0O0hNFkGgEBAQEBAgEBAQEHAgEBAQGBUwM?=
 =?us-ascii?q?BAQEBCwGCaYECFBOMcI00FI1ziTmBbQYPHQMQAYh2IjYHDQEDAQEBAQEBAgETA?=
 =?us-ascii?q?QEBCA0JCCkjDII2JAGCYgECAwECJFIGCQEBChgJJQMMHSsGEwUWgwYBggEEAaY?=
 =?us-ascii?q?JM4oeCgWCbYkggVc/gRGDEopcAokjgXKUIlUHAoIcBIRcgy2GfCMKkQGKbo8WD?=
 =?us-ascii?q?oF4MxojgzyCJxeDSopUPzKBAgMBASETimkpgiQBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,286,1539673200"; 
   d="asc'?scan'208";a="54487662"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 27 Nov 2018 04:39:16 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729020AbeK0XhA (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 27 Nov 2018 18:37:00 -0500
Received: from mail.bootlin.com ([62.4.15.54]:39451 "EHLO mail.bootlin.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726421AbeK0Xg7 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 27 Nov 2018 18:36:59 -0500
Received: by mail.bootlin.com (Postfix, from userid 110)
        id 0327C20D2E; Tue, 27 Nov 2018 13:39:09 +0100 (CET)
X-Spam-Checker-Version: SpamAssassin 3.4.2 (2018-09-13) on mail.bootlin.com
X-Spam-Level: 
X-Spam-Status: No, score=-1.0 required=5.0 tests=ALL_TRUSTED,SHORTCIRCUIT,
        URIBL_BLOCKED shortcircuit=ham autolearn=disabled version=3.4.2
Received: from localhost (aaubervilliers-681-1-94-205.w90-88.abo.wanadoo.fr [90.88.35.205])
        by mail.bootlin.com (Postfix) with ESMTPSA id BCF23207BB;
        Tue, 27 Nov 2018 13:38:58 +0100 (CET)
Date: Tue, 27 Nov 2018 13:38:58 +0100
From: Maxime Ripard <maxime.ripard@bootlin.com>
To: Miquel Raynal <miquel.raynal@bootlin.com>
Cc: Michael Turquette <mturquette@baylibre.com>,
        Stephen Boyd <sboyd@kernel.org>,
        Russell King <linux@armlinux.org.uk>,
        Antoine Tenart <antoine.tenart@bootlin.com>,
        Gregory Clement <gregory.clement@bootlin.com>,
        linux-kernel@vger.kernel.org,
        Maxime Chevallier <maxime.chevallier@bootlin.com>,
        Nadav Haklai <nadavh@marvell.com>,
        Thomas Petazzoni <thomas.petazzoni@bootlin.com>,
        linux-clk@vger.kernel.org, linux-arm-kernel@lists.infradead.org
Subject: Re: [PATCH 2/2] clk: core: link consumer with clock driver
Message-ID: <20181127123858.3v344nonsuyqskrt@flea>
References: <20181122212212.16039-1-miquel.raynal@bootlin.com>
 <20181122212212.16039-3-miquel.raynal@bootlin.com>
MIME-Version: 1.0
Content-Type: multipart/signed; micalg=pgp-sha256;
        protocol="application/pgp-signature"; boundary="fxek645th6uycxir"
Content-Disposition: inline
In-Reply-To: <20181122212212.16039-3-miquel.raynal@bootlin.com>
User-Agent: NeoMutt/20180716
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org


--fxek645th6uycxir
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable

Hi Miquel,

On Thu, Nov 22, 2018 at 10:22:12PM +0100, Miquel Raynal wrote:
> One major concern when, for instance, suspending/resuming a platform
> is to never access registers before the underlying clock has been
> resumed, otherwise most of the time the kernel will just crash. One
> solution is to use syscore operations when registering clock drivers
> suspend/resume callbacks. One problem of using syscore_ops is that the
> suspend/resume scheduling will depend on the order of the
> registrations, which brings (unacceptable) randomness in the process.
>=20
> A feature called device links has been introduced to handle such
> situation. It creates dependencies between consumers and providers,
> enforcing e.g. the suspend/resume order when needed. Such feature is
> already in use for regulators.
>=20
> Add device links support in the clock subsystem by creating/deleting
> the links at get/put time.
>=20
> Example of a boot (ESPRESSObin, A3700 SoC) with devices linked to clocks:
> ahci-mvebu d00e0000.sata: Linked as a consumer to d0013000.nb-periph-clk
> mvneta d0030000.ethernet: Linked as a consumer to d0018000.sb-periph-clk
> xhci-hcd d0058000.usb: Linked as a consumer to d0018000.sb-periph-clk
> xenon-sdhci d00d0000.sdhci: Linked as a consumer to d0013000.nb-periph-clk
> xenon-sdhci d00d0000.sdhci: Dropping the link to d0013000.nb-periph-clk
> advk-pcie d0070000.pcie: Linked as a consumer to d0018000.sb-periph-clk
> xenon-sdhci d00d0000.sdhci: Linked as a consumer to d0013000.nb-periph-clk
> xenon-sdhci d00d0000.sdhci: Linked as a consumer to regulator.1
> cpu cpu0: Linked as a consumer to d0013000.nb-periph-clk
> cpu cpu0: Dropping the link to d0013000.nb-periph-clk
> cpu cpu0: Linked as a consumer to d0013000.nb-periph-clk
>=20
> Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
> ---
>  drivers/clk/clk.c            | 20 ++++++++++++++++++++
>  drivers/clk/clkdev.c         | 13 ++++++++++---
>  include/linux/clk-provider.h |  2 ++
>  3 files changed, 32 insertions(+), 3 deletions(-)
>=20
> diff --git a/drivers/clk/clk.c b/drivers/clk/clk.c
> index b799347c5fd6..33a0f2b0533a 100644
> --- a/drivers/clk/clk.c
> +++ b/drivers/clk/clk.c
> @@ -90,6 +90,7 @@ struct clk {
>  	unsigned long max_rate;
>  	unsigned int exclusive_count;
>  	struct hlist_node clks_node;
> +	struct device_link *link;
>  };
> =20
>  /***           runtime pm          ***/
> @@ -262,6 +263,25 @@ struct clk_hw *__clk_get_hw(struct clk *clk)
>  }
>  EXPORT_SYMBOL_GPL(__clk_get_hw);
> =20
> +void __clk_device_link(struct device *consumer, struct clk *clk)
> +{
> +	if (!consumer || !clk || !clk->core)
> +		return;
> +
> +	clk->link =3D device_link_add(consumer, clk->core->dev,
> +				    DL_FLAG_STATELESS);
> +}
> +EXPORT_SYMBOL_GPL(__clk_device_link);
> +
> +void __clk_device_unlink(struct clk *clk)
> +{
> +	if (!clk || !clk->link)
> +		return;
> +
> +	device_link_del(clk->link);
> +}
> +EXPORT_SYMBOL_GPL(__clk_device_unlink);
> +
>  unsigned int clk_hw_get_num_parents(const struct clk_hw *hw)
>  {
>  	return hw->core->num_parents;
> diff --git a/drivers/clk/clkdev.c b/drivers/clk/clkdev.c
> index 9ab3db8b3988..fccfd4c01457 100644
> --- a/drivers/clk/clkdev.c
> +++ b/drivers/clk/clkdev.c
> @@ -194,20 +194,27 @@ EXPORT_SYMBOL(clk_get_sys);
>  struct clk *clk_get(struct device *dev, const char *con_id)
>  {
>  	const char *dev_id =3D dev ? dev_name(dev) : NULL;
> -	struct clk *clk;
> +	struct clk *clk =3D NULL;
> =20
>  	if (dev && dev->of_node) {
>  		clk =3D __of_clk_get_by_name(dev->of_node, dev_id, con_id);
> -		if (!IS_ERR(clk) || PTR_ERR(clk) =3D=3D -EPROBE_DEFER)
> +		if (PTR_ERR(clk) =3D=3D -EPROBE_DEFER)
>  			return clk;
>  	}
> =20
> -	return clk_get_sys(dev_id, con_id);
> +	if (IS_ERR_OR_NULL(clk))
> +		clk =3D clk_get_sys(dev_id, con_id);
> +
> +	if (!IS_ERR(clk))
> +		__clk_device_link(dev, clk);
> +
> +	return clk;

I think this doesn't address all the cases. In your case, where you
have one consumer that is not a clock, and one provider that is a
clock, it works just fine.

However, if you have clocks providers chained, for example with one
oscillator, a clock controller, and a device, the link will be created
between the device and the controller, but there will be no link
between the controller and the oscillator.

Adding a link in __clk_init_parent looks like it would address that
case.

Maxime

--=20
Maxime Ripard, Bootlin
Embedded Linux and Kernel engineering
https://bootlin.com

--fxek645th6uycxir
Content-Type: application/pgp-signature; name="signature.asc"

-----BEGIN PGP SIGNATURE-----

iHUEABYIAB0WIQRcEzekXsqa64kGDp7j7w1vZxhRxQUCW/064gAKCRDj7w1vZxhR
xW7iAQC3xzuT+qhFxNGL9GMTKHyCSb2w/0OnQ2S/u08nBc6NIQEAikxcV0zjBEkM
+4bqiE+IMeX9A8unypgBnSDkegm1VQM=
=Sl7T
-----END PGP SIGNATURE-----

--fxek645th6uycxir--
