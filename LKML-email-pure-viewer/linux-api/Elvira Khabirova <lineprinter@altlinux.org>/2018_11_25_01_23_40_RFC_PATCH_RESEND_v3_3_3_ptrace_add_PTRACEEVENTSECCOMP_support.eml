Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 25 Nov 2018 14:43:12 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id A9DD658037D;
	Sat, 24 Nov 2018 17:23:50 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by fmsmga002-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 24 Nov 2018 17:23:50 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Ai1H7kxzo86t7oonXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e4TIvad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7S60/Vza/4KdxUBLmhi?=
 =?us-ascii?q?cJOSAk/m/UiMNwgq1Urw6uqRxk247ZYpqYNOZ8c67HYd8WWXZNUthXWidcAo28?=
 =?us-ascii?q?dYwPD+8ZMOhXq4n9uVoOrQGkCgKxAe3vyiVHiWT33a0g1OQhDxvJ1xEnEtIKsX?=
 =?us-ascii?q?TUqsv6NL8IUeC0yqnI0SvMb+lN1Djn7IjIbhQhofCKXbJtfsvd004vFxnKjliJ?=
 =?us-ascii?q?r4HuIjCb1vwVvmSF8+ZtUfijh3Mppg1vuDSj28QhhpXTio8UyF3I7Sp0zYcvKd?=
 =?us-ascii?q?GlS0N2YsSoHIZQui2AKod7TcwvTmd1sygg0LIGo4S0fC0SxZQn2RHfb/uHfpCW?=
 =?us-ascii?q?4hLsSumROy10hHF7d7KlgRa970ygxvf7Vsmu31ZGtitFkt/SuXARzxHf9NSLR/?=
 =?us-ascii?q?9n8ku81zuDyRrf5vxHLEwoj6bWKpwszqY1lpUJsETDGiH2mF/xjK+Tbkgk/umo?=
 =?us-ascii?q?6+L6YrTpv5OcNJF7ihv4MqswnsyzGOM4MwYIX2eF4+Sxz6Pj/ULnT7VQlPE2kb?=
 =?us-ascii?q?fWsIrcJcsFoq61GQhV0pws6xqnFTepzMwYnWUbLFJCYB+Hi4npO1LQL/ziAva/?=
 =?us-ascii?q?nk+hkDNqx/DAI73gDY/BLnnFkLf9Y7l971RQxxY0zdBa/5hUEK0OIOrvWk/ts9?=
 =?us-ascii?q?zVFh85PBa1w+b7Etp90ZkSWWKSAqCDNqPSvkSF5uYuI+mKeY8UtyzxK/kj5/7y?=
 =?us-ascii?q?k3A5nUURcrWu3ZsScHq4BOhpI12FYXrwhdcMCWUKvg0gQ+Dwi12CVjhTZ3C1X6?=
 =?us-ascii?q?8n4jE7CYSmDZrMR4y3gbyB2ju7EYNSZmxcFl+MFnLofZ2eW/gQcCKSPtNhkjsc?=
 =?us-ascii?q?WLe7UI8h1RautAzgx7p9NOXU+DYVtZbi1Nhz+u3Smgs+9T1yD8SBzW6NS3t4kX?=
 =?us-ascii?q?8PRz8zxKp/u1Byyk+f0ahkhPxVDd9T6OlPUgsgMZ7czvZ1C9b9Wg/aeteJSVCm?=
 =?us-ascii?q?QsipAD0rT9IxxcMObFh5G9m4kh/D2C+qCacPl7OXHJw07r7c33/pKslg0XnGyr?=
 =?us-ascii?q?cug0MmQsRVM22mnbBw9w7UC47NkEWZkqKqeL8Y3C7M8meD0GWPsFtZUA52TaXK?=
 =?us-ascii?q?Q3QfalHKotT+40PIV6WuBqg/Mgtd1c6CLbNHZcDzglVYWvjvItTebHi3m2erGx?=
 =?us-ascii?q?mIwKiBbI7re2UbwSXcB1IIkwEV/XaaKwc+Aj2trH7ZDDxrDVjveV/j8fFiqHOn?=
 =?us-ascii?q?SU851x2Kb0xk17qy5h4VhfydR+kP3r4evychsTF0HFe739LZENeAowthfKNBYd?=
 =?us-ascii?q?Iy+ltH1GTZtxBjMZykNaxtmlkecwFvtUP0yxp3EplAkdQtrH4y1gVyLbyX0Vxf?=
 =?us-ascii?q?eDKYx5z/IaDXJXTo8xCpaK7W3U/e3c2S+qcO7vQ4tlrisBuoFkok73Vozd1V32?=
 =?us-ascii?q?GA6ZXNCQoYSYjxXVov9xhmu7HaZTEw5oPJ1XF2Laa4qD7D29IzC+sjxRatZNNf?=
 =?us-ascii?q?MKKCFA/vHMwWHcmuKOo2m1e3ahIIJvxd9KkxP8m+bfuJxLarPPp8nDKhlWlH+o?=
 =?us-ascii?q?F93V6W+CpmV+HI2IwJw/eG0QudVjfwlUuuvdrzmY9Zez4SBG2/yS7/CY5VZ61y?=
 =?us-ascii?q?e5sLCGi0L822wNV+m4DiW3pC+FG/AFMG3dejeQCOYFzlwQ1QyUMXrGSnmCu51T?=
 =?us-ascii?q?B1kyslrrGC3CzI2OnicBsHOmhWRGhtl1vsII60j8wEU0isdQQmiByl5UPizahB?=
 =?us-ascii?q?uKt/N3XTQVtPfyXuLWFtSLGwtrmBY85I8p8oqj9YUOe/YVCbTL7yvR0a3jjnH2?=
 =?us-ascii?q?tfwjA7aj6rto/4nxx8lGKSMnJzoGDFdsF3wBfV/MbcSuJJ3joaWCl4jiHaB1im?=
 =?us-ascii?q?MNmu59mUlZbDsualWmKlV51TdzTrzIyauCu6421qHQOwn/SpltL7Fgg61Dfx18?=
 =?us-ascii?q?N2WiXQsBb8fo7r2ry5Me19f0lkHl/869dgFYF4nYs9n5UQ2XkchpWI8nsLi2bz?=
 =?us-ascii?q?MdNH2a3gaHoBXyIEw9nQ4AL9wk1sMmqJx57lVnWa2sZhYti6YmAM1S4n4cFFFr?=
 =?us-ascii?q?yU7KBakitvuVW3sxjRYfdmkzcZyPsu7mMagu4TtAosyCWdHq4dHU1CMSPwkBSI?=
 =?us-ascii?q?6si0rL9La2a3bbiwyE1+kMi9DLGFpwFQQnf4dY0kHS9t9cV/K1PM3Wb36oHlft?=
 =?us-ascii?q?nQcN0SugeVkxfGk+haNpYxmuAWiipgPGL3pWclxPIjjRxywZG6u5CKJH5386K+?=
 =?us-ascii?q?Bh5YKyf5Z8cO+jz2iaZen8CW352gH5l7GzULWofoQuysED4IqfvnMAOOGiUmqn?=
 =?us-ascii?q?iHAbrfAROf6EB+onLNCZ+rMm+YJGIDwdV+XhWdJ1FfgAMJXDU8hJE5DRunxMjg?=
 =?us-ascii?q?cEd/+zAQ6UT0qhpKyuJ0KRb/Vn3TqxuvajcxUJKfNgZZ7hle50fJNsyT9uJyHy?=
 =?us-ascii?q?ZF/p24sQyCMGqbax5TDWEOXEyECEvuPr2v5dnG7uiZCfCyL/rIYbWSt+NeU+2E?=
 =?us-ascii?q?yo6o0otj5zyMLNmAPmF+D/0n3UpORXB5FNrYmzUMSCwXljjBb82BpBe79S14sN?=
 =?us-ascii?q?q/8OnwWA/04YuPCr1SMchg+hysgKeDMfKQizh9KTpCypwMwnrIwqAF3FEOkyFu?=
 =?us-ascii?q?ayWtEbMYuCHXUaLfgbVXAAAbai9pMMtI7rkx3g1MOc7dl9P02aR0jv8zC1dZS1?=
 =?us-ascii?q?PhntulatANI2G4LFnHHlqENKyaJT3XxMH6eb+8SbxVjOlOqxK8oyqUE0/9MTSF?=
 =?us-ascii?q?jDTpUxGvMedRjCCUJhBeuYe9cgpzBmjnVt7pdhq7MNpvhz0s3bI0nm/KNXIbMT?=
 =?us-ascii?q?Vkc0JCtLuQ7SZZgvV5A2NA73plIvOCmyaW9OTYLpcWsf12AiV7je5a4XI6y6dL?=
 =?us-ascii?q?4yFAXvB6hCzSrts9622hx+6LxzVPShdCqj9XwomMuAEqI6LC6pRMRV7L+xUB6G?=
 =?us-ascii?q?SLTRMQqJ8tD9zptKd40NXDlKvvbjxF9oH658wZUuXQNsOdOTICMRPjGSTTEgJN?=
 =?us-ascii?q?GTqqM2zHnU1bjPyI3nSRspw7rIX83p0URekIBxQOCvoGBxE9T5Q5K5BtU2Z8nA?=
 =?us-ascii?q?=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AaAADx+Plbh0O0hNFiHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBAYFZghEnjBFfiyFSBoFJiQaEaoRBhHeBcS4TAYhaIjQJDQEDAQE?=
 =?us-ascii?q?BAQEBAgETAQEBCA0JCCkvQgEOAYFkIoJlAwMBAiQTPwYJAQErJQMMHSsHEgWCU?=
 =?us-ascii?q?UuBdQ0EAaUxM4oajAkXeIEHjnwCj1yQJgmRJCMKii+GTyyZSoINTTCDL4InFxK?=
 =?us-ascii?q?OCz8ygQIDAQEhE4Y3hXMBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AaAADx+Plbh0O0hNFiHAEBAQQBAQcEAQGBUQcBAQsBAYF?=
 =?us-ascii?q?ZghEnjBFfiyFSBoFJiQaEaoRBhHeBcS4TAYhaIjQJDQEDAQEBAQEBAgETAQEBC?=
 =?us-ascii?q?A0JCCkvQgEOAYFkIoJlAwMBAiQTPwYJAQErJQMMHSsHEgWCUUuBdQ0EAaUxM4o?=
 =?us-ascii?q?ajAkXeIEHjnwCj1yQJgmRJCMKii+GTyyZSoINTTCDL4InFxKOCz8ygQIDAQEhE?=
 =?us-ascii?q?4Y3hXMBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,276,1539673200"; 
   d="scan'208";a="54173853"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 24 Nov 2018 17:23:49 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727062AbeKYMNe (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sun, 25 Nov 2018 07:13:34 -0500
Received: from air.basealt.ru ([194.107.17.39]:38926 "EHLO air.basealt.ru"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726515AbeKYMNe (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Sun, 25 Nov 2018 07:13:34 -0500
Received: by air.basealt.ru (Postfix, from userid 490)
        id 8FBDF589AEC; Sun, 25 Nov 2018 01:23:42 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.4.1 (2015-04-28) on
        sa.local.altlinux.org
X-Spam-Level: 
X-Spam-Status: No, score=-2.9 required=5.0 tests=ALL_TRUSTED,BAYES_00
        autolearn=ham autolearn_force=no version=3.4.1
Received: from akathisia (broadband-46-188-15-144.2com.net [46.188.15.144])
        by air.basealt.ru (Postfix) with ESMTPSA id CBA8A589AE8;
        Sun, 25 Nov 2018 01:23:40 +0000 (UTC)
Date: Sun, 25 Nov 2018 02:23:40 +0100
From: Elvira Khabirova <lineprinter@altlinux.org>
To: oleg@redhat.com, rostedt@goodmis.org, mingo@redhat.com
Cc: linux-kernel@vger.kernel.org, ldv@altlinux.org, esyr@redhat.com,
        luto@kernel.org, strace-devel@lists.strace.io,
        linux-api@vger.kernel.org
Subject: [RFC PATCH RESEND v3 3/3] ptrace: add PTRACE_EVENT_SECCOMP support
 to PTRACE_GET_SYSCALL_INFO
Message-ID: <20181125022340.5703400f@akathisia>
In-Reply-To: <20181125022150.46258a20@akathisia>
References: <20181125022150.46258a20@akathisia>
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Extend PTRACE_GET_SYSCALL_INFO to support PTRACE_EVENT_SECCOMP stops.
The information returned is the same as for syscall-enter-stops.

Signed-off-by: Elvira Khabirova <lineprinter@altlinux.org>
Signed-off-by: Dmitry V. Levin <ldv@altlinux.org>
---
 include/linux/ptrace.h    | 1 +
 include/linux/sched.h     | 1 +
 include/linux/tracehook.h | 1 +
 kernel/ptrace.c           | 7 +++++--
 4 files changed, 8 insertions(+), 2 deletions(-)

diff --git a/include/linux/ptrace.h b/include/linux/ptrace.h
index 6c2ffed907f5..a993d0fde865 100644
--- a/include/linux/ptrace.h
+++ b/include/linux/ptrace.h
@@ -166,6 +166,7 @@ static inline void ptrace_event(int event, unsigned long message)
 {
 	if (unlikely(ptrace_event_enabled(current, event))) {
 		current->ptrace_message = message;
+		current->ptrace_event = event;
 		ptrace_notify((event << 8) | SIGTRAP);
 	} else if (event == PTRACE_EVENT_EXEC) {
 		/* legacy EXEC report via SIGTRAP */
diff --git a/include/linux/sched.h b/include/linux/sched.h
index a51c13c2b1a0..86215fb654d6 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -964,6 +964,7 @@ struct task_struct {
 
 	/* Ptrace state: */
 	unsigned long			ptrace_message;
+	int				ptrace_event;
 	kernel_siginfo_t		*last_siginfo;
 
 	struct task_io_accounting	ioac;
diff --git a/include/linux/tracehook.h b/include/linux/tracehook.h
index 633a83fe7051..5d2e5aa07a5c 100644
--- a/include/linux/tracehook.h
+++ b/include/linux/tracehook.h
@@ -66,6 +66,7 @@ static inline int ptrace_report_syscall(struct pt_regs *regs,
 		return 0;
 
 	current->ptrace_message = message;
+	current->ptrace_event = 0;
 	ptrace_notify(SIGTRAP | ((ptrace & PT_TRACESYSGOOD) ? 0x80 : 0));
 
 	/*
diff --git a/kernel/ptrace.c b/kernel/ptrace.c
index 92c47cd5ad84..74a37e74c7f1 100644
--- a/kernel/ptrace.c
+++ b/kernel/ptrace.c
@@ -904,7 +904,9 @@ static int ptrace_get_syscall(struct task_struct *child,
 	unsigned long actual_size;
 	unsigned long write_size;
 
-	if (child->ptrace_message == PTRACE_EVENTMSG_SYSCALL_ENTRY) {
+	if ((child->ptrace_event == 0 &&
+	     child->ptrace_message == PTRACE_EVENTMSG_SYSCALL_ENTRY) ||
+	    child->ptrace_event == PTRACE_EVENT_SECCOMP) {
 		int i;
 
 		info.op = PTRACE_SYSCALL_INFO_ENTRY;
@@ -917,7 +919,8 @@ static int ptrace_get_syscall(struct task_struct *child,
 		for (i = 0; i < ARRAY_SIZE(args); i++)
 			info.entry.args[i] = args[i];
 		actual_size = offsetofend(struct ptrace_syscall_info, entry);
-	} else if (child->ptrace_message == PTRACE_EVENTMSG_SYSCALL_EXIT) {
+	} else if (child->ptrace_event == 0 &&
+		   child->ptrace_message == PTRACE_EVENTMSG_SYSCALL_EXIT) {
 		info.op = PTRACE_SYSCALL_INFO_EXIT;
 		info.arch = syscall_get_arch(child);
 		info.exit.rval = syscall_get_error(child, regs);
-- 
2.19.1

