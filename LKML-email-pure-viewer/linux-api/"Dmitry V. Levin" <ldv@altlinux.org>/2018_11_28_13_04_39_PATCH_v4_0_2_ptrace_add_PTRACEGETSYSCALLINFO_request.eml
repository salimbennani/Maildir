Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 28 Nov 2018 21:43:26 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id C51405802E4;
	Wed, 28 Nov 2018 05:04:50 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by fmsmga002-1.fm.intel.com with ESMTP; 28 Nov 2018 05:04:49 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Al75F/BdvEGxcmY++orAsftQ3lGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc6/ZhCN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRPDI28?=
 =?us-ascii?q?cYUBEukPMulEoIbgvFsOtRmzCBKwBO/z0DJEmmP60bEk3+knDArI3BYgH9ULsH?=
 =?us-ascii?q?nMotn7OqISUeGpzKnSzTTIcvxZ1S3g44bObB8hv/CMXbR+fcHMzkQvEx7KjkuL?=
 =?us-ascii?q?pIP/OzOVyuANs2md7+p9WuOjkWknqxt+ojW2wMonl4fHhoUQyl/e9CV5xp44Jd?=
 =?us-ascii?q?6mR05hZ96rDp9QuzudN4tsTcMvRXxjtiUiyrAep5K3YCwHxI46yxPRdfCLaZWE?=
 =?us-ascii?q?7xH/WOqLIDp1hmppdK+7ihu960Ss1/HwW8uu3FpXrCdJiNnBu3IL2hfO8MaIUO?=
 =?us-ascii?q?F98V2k2TuX1wDc9OVEIUcsmKrFJJ4u3KQwmoAQsUvdBC/2nlv5jKuMekUj4Oio?=
 =?us-ascii?q?5PzrYrTgppCCK495kh/yPrgql8ClHOg1PBYCU3KG9em/yLHv50z0TbdSgv0ziK?=
 =?us-ascii?q?bZsZTaJcoBpq6+Bg9YyoIj6xe5Dze739UUhHoHI0xfeBKBkYfpP0jCIPf2DPe5?=
 =?us-ascii?q?nVusiixmx+7JPrL/GJXBNHvDn6n7fbZ79UFczBA/zddF55JbEr0BOu78WlfttN?=
 =?us-ascii?q?zECR80Kwi0w+fkCNpjzI8fVn+PD7SdMKPTt1+I++0uL/ONZI8TpDbyNfwl6+Ty?=
 =?us-ascii?q?gn8+nF8XZbOp0ocPaHCkAvRmJF2UYXr2jdcADWcFpA0+QPbqiF2fSzFTYXmyUr?=
 =?us-ascii?q?k45jE6DoKmEIjCSpqsgLyHwCe0AJlWanpaBVCLFHfib5+EVOsUaCKOPs9hlSQJ?=
 =?us-ascii?q?VbqmS4A/zx2utwj6y7xhLurT4SAYsZPj1N5o5+zcjx0y9Dp0D9iD3GGJVW17gm?=
 =?us-ascii?q?QIRzou1qBlvUN90kuD0bR/g/FAD9NT/PNJUgA5NZLG1ex1EdLyVxnFfteITlam?=
 =?us-ascii?q?X9qnDSswTtI3398BfUJ9F8++gRDE2iqgG6UVmKCTBJwo7qLc2GD8J8VnxHbAzq?=
 =?us-ascii?q?Uhi1gmTdFJNW2pnaN/8wnTB4jUk0SWjaqqdKIc3DLT+2eH12aBoEZYUAtoW6Xf?=
 =?us-ascii?q?QX8fflfWrcj+5k7aUrChE6onPRVbxc6CMKRKbMbpgktARPvkPNTeYGexm2OrCB?=
 =?us-ascii?q?aMx7OMapfqemoH0CXcDkgEjx4c/XKcOQciASehpnrUDCZyGlL3f0Ps7e5+pWum?=
 =?us-ascii?q?QUAu0QGFcVdt17qv9R4TnvyTVfUT06kAuCcgrTV0AVm808jXC9qGuwpuYqFcbc?=
 =?us-ascii?q?kh71dA0GLTrxZ9MYC4L6B+ml4edBx6v1/v1xVyDYVAjcgqrXMwwApuM66Y10lB?=
 =?us-ascii?q?dzeZ3ZD2Nb3aMW3y/BGpa67L1VDSyteW+qET6Psmr1Xvph2mFk0n839/ydlaz2?=
 =?us-ascii?q?Oc5onWDAoVSZ/+SEI3+AZ1pr7EYigx/Zjb1WBxPqautD/C2NUpBPU+xxakftdf?=
 =?us-ascii?q?Nr6EFQDoH80bAciuNPIlm1yzYh0YO+BS8bY+P9m6ePuexK6rIOFgkSqmjGRa+o?=
 =?us-ascii?q?xyzliA9it8SuHS2ZYFzOqV3g+GVzf6kVegvdr7mYFCZTEOAGW/zTLoC5JWZq13?=
 =?us-ascii?q?ZYwLE3uhI9WrxtVigJ7gQ2RY9F+/CFwcws+mZB2SY0b73QJOz0QXoGWrljeiwD?=
 =?us-ascii?q?xwjj4msLCf3CvIw+n5cBoHO2hLRHRtjFv2IIi0icwaU1asbwQziBSl4kP6zbBB?=
 =?us-ascii?q?pKtjN2nTXVtIfy/uImBiU6u8rLqDb9RU6JM1tyVaS+C8YVGcSr7grBoWySLjH2?=
 =?us-ascii?q?1CxD8lczGmoIn2nxt/iGiFNnZ8sGLZed1sxRfY/NHcR+Re3iAFRCl7jjnbHEO8?=
 =?us-ascii?q?MMOq/dWXlpfDtP6xV2S6W51XcCnry56AtSSh6W1rBx2/g+68mtn9HQcm1i/70s?=
 =?us-ascii?q?FgVT/Uoxbkfonry6O6PPpnf0ZyA1/w8ch6GoB4koYrgJEQ2H4ahoia/HYdkGfz?=
 =?us-ascii?q?N8lb1rz6bHYXWTELxNvV6hD/2EJ/NnKJ2575VnKFz8tifda6Y3ka2iIg789QDq?=
 =?us-ascii?q?eU46dJnS90olq+sALQbuJxnjYbyfsy9nEah/sFtxYqziWYGroSB1VXPTTwlxSU?=
 =?us-ascii?q?6NCztKBXZGescbeqzkZ/k86uDKqeog5CQnb2YYktHTV/7shkNFLM0Xvz6pzred?=
 =?us-ascii?q?XKbNITsAGUnAnEj+RPNJ0xkf8KjzJ9OW3hpX0l1/I7jRt20JGmu4iHLn9h/aOj?=
 =?us-ascii?q?DR5eKz31fNgT+jD2gKZan8aW2Z2vH5p7FjUKWpvoUeynEDYIufv7MAaOFSU2qm?=
 =?us-ascii?q?2HFrrHAQ+f9EBmomrUHJ+xMHGXIGQZwc9mRBmAP0FfhAEUXDMnnp82DAyqxcrh?=
 =?us-ascii?q?cFtn6TAV/FL3thxMyudwPRnlTmjfvBuoaiszSJWHLhpZ9ARC6FnOMcCE8uJ/BS?=
 =?us-ascii?q?JY/oCirAyQLGyUfR9IAHoNWkyFAVDjI7av6cPB8+ieGuqxMf/Oba+SpuxZUveC?=
 =?us-ascii?q?3Yiv3Zd+/zaQKsWPOWFvDv082kpeRHB5Bt7WmzMVRywMkCLNacGbqQy4+i12qM?=
 =?us-ascii?q?C/7fvqVBju5YuJF7tdL9Fv9wqqjqeEMu6anDx5JipA1pMQ2X/Iz6AS3F4MhCFv?=
 =?us-ascii?q?dDmtErUAuTTOTKLKna9XAAAUazluNMtT9K882ghNOcjGitL6zLJ4j/g1C0tbWl?=
 =?us-ascii?q?zlgM2mecsKI2SlPlPdGEmLLKiGJSHMw8zve6y8VKZfjP9KuBywozqbF07jMy+H?=
 =?us-ascii?q?lznoURCvLO5NgDuaPBxYpIGybBJtBXL/Q9Lhbx2xKMV3giEuwb0omnPKMnYRMS?=
 =?us-ascii?q?R9c0NItLGf8TlUjel/G2Nf6HpoNu2Emyef7+nFJZcaq/prAiJol+1E5HQ20ada?=
 =?us-ascii?q?7CZBRPZtgivdssZuo026kumI0jdmUABBqjBOhIKKu0VtIaTY9plaVnbC8xIA9m?=
 =?us-ascii?q?GQCxUMp9t4BdzjoaFQyt7TlK3tLDdO6c7b/cwZB5ucFMXSF34sPlLPFSXIAREC?=
 =?us-ascii?q?U3b/MmXSiGRHnf2S/2HTpZ8//NyksZwCW/d/SUAyE/IAEUdkVIgGPYtwdjApi7?=
 =?us-ascii?q?iWiIgP/3Xo/zfLQ8AP9LzCV+6IEL3Rbn69gKdFYVFAlbf0M6waMpH/2kp/eh99?=
 =?us-ascii?q?houcSBmYZsxEviA0Nlx8m05K6nUrCzRrg08=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAAAKkv5bh0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgmmBAieMEYwJgiFokU+Ed4FzLA0GAYdqIjQJDQEDAQEBAQEBAgE?=
 =?us-ascii?q?TAQEBCA0JCCkjDII2JAGCaQIkEz8GCQIrJQMMHTEBEgWDHAGCAQQBCqcZM4QtA?=
 =?us-ascii?q?YYQBYwVEQaBf4ERgl2BXRkBgUOBNiYBAYNTgiYCiReCAIUBjy5VBwIChnuDLYZ?=
 =?us-ascii?q?8I5EVLIhKhF6MOoINfQiDKBEBghQMC4hehUI8ATMBgQMBAYo7gj4BAQ?=
X-IPAS-Result: =?us-ascii?q?A0ANAAAKkv5bh0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBgmm?=
 =?us-ascii?q?BAieMEYwJgiFokU+Ed4FzLA0GAYdqIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjD?=
 =?us-ascii?q?II2JAGCaQIkEz8GCQIrJQMMHTEBEgWDHAGCAQQBCqcZM4QtAYYQBYwVEQaBf4E?=
 =?us-ascii?q?Rgl2BXRkBgUOBNiYBAYNTgiYCiReCAIUBjy5VBwIChnuDLYZ8I5EVLIhKhF6MO?=
 =?us-ascii?q?oINfQiDKBEBghQMC4hehUI8ATMBgQMBAYo7gj4BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,290,1539673200"; 
   d="scan'208";a="41887825"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 28 Nov 2018 05:04:48 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728421AbeK2AGU (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 28 Nov 2018 19:06:20 -0500
Received: from vmicros1.altlinux.org ([194.107.17.57]:59736 "EHLO
        vmicros1.altlinux.org" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727823AbeK2AGT (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 28 Nov 2018 19:06:19 -0500
Received: from mua.local.altlinux.org (mua.local.altlinux.org [192.168.1.14])
        by vmicros1.altlinux.org (Postfix) with ESMTP id 0187372CC59;
        Wed, 28 Nov 2018 16:04:40 +0300 (MSK)
Received: by mua.local.altlinux.org (Postfix, from userid 508)
        id EA34D7CD0D7; Wed, 28 Nov 2018 16:04:39 +0300 (MSK)
Date: Wed, 28 Nov 2018 16:04:39 +0300
From: "Dmitry V. Levin" <ldv@altlinux.org>
To: Oleg Nesterov <oleg@redhat.com>, Andy Lutomirski <luto@kernel.org>
Cc: Elvira Khabirova <lineprinter@altlinux.org>,
        Eugene Syromyatnikov <esyr@redhat.com>,
        Steven Rostedt <rostedt@goodmis.org>,
        Ingo Molnar <mingo@redhat.com>,
        Kees Cook <keescook@chromium.org>,
        Michael Ellerman <mpe@ellerman.id.au>,
        linux-api@vger.kernel.org, linux-kernel@vger.kernel.org,
        strace-devel@lists.strace.io
Subject: [PATCH v4 0/2] ptrace: add PTRACE_GET_SYSCALL_INFO request
Message-ID: <20181128130439.GB28206@altlinux.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

PTRACE_GET_SYSCALL_INFO lets ptracer obtain details of the syscall
the tracee is blocked in.  The request succeeds when the tracee is in a
syscall-enter-stop, syscall-exit-stop or PTRACE_EVENT_SECCOMP stop,
and fails with -EINVAL otherwise.

There are two reasons for a special syscall-related ptrace request.

Firstly, with the current ptrace API there are cases when ptracer cannot
retrieve necessary information about syscalls.  Some examples include:
* The notorious int-0x80-from-64-bit-task issue.  See [1] for details.
In short, if a 64-bit task performs a syscall through int 0x80, its tracer
has no reliable means to find out that the syscall was, in fact,
a compat syscall, and misidentifies it.
* Syscall-enter-stop and syscall-exit-stop look the same for the tracer.
Common practice is to keep track of the sequence of ptrace-stops in order
not to mix the two syscall-stops up.  But it is not as simple as it looks;
for example, strace had a (just recently fixed) long-standing bug where
attaching strace to a tracee that is performing the execve system call
led to the tracer identifying the following syscall-exit-stop as
syscall-enter-stop, which messed up all the state tracking.
* Since the introduction of commit 84d77d3f06e7e8dea057d10e8ec77ad71f721be3
("ptrace: Don't allow accessing an undumpable mm"), both PTRACE_PEEKDATA
and process_vm_readv become unavailable when the process dumpable flag
is cleared.  On such architectures as ia64 this results in all syscall
arguments being unavailable.

Secondly, ptracers also have to support a lot of arch-specific code for
obtaining information about the tracee.  For some architectures, this
requires a ptrace(PTRACE_PEEKUSER, ...) invocation for every syscall
argument and return value.

PTRACE_GET_SYSCALL_INFO returns the following structure:

struct ptrace_syscall_info {
	__u8 op;	/* PTRACE_SYSCALL_INFO_* */
	__u8 __pad0[3];
	__u32 arch;
	union {
		struct {
			__u64 nr;
			__u64 instruction_pointer;
			__u64 stack_pointer;
			__u64 frame_pointer;
			__u64 args[6];
		} entry;
		struct {
			__s64 rval;
			__u8 is_error;
			__u8 __pad1[7];
		} exit;
		struct {
			__u64 nr;
			__u64 instruction_pointer;
			__u64 stack_pointer;
			__u64 frame_pointer;
			__u64 args[6];
			__u32 ret_data;
			__u8 __pad2[4];
		} seccomp;
	};
};

The structure was chosen according to [2], except for the following
changes:
* arch is returned unconditionally to aid with tracing system calls such as
execve();
* the type of nr field was changed from int to __u64 because syscall
numbers are, as a practical matter, 64 bits;
* stack_pointer and frame_pointer fields were added along with
instruction_pointer field since they are readily available and can save
the tracer from extra PTRACE_GETREGSET calls;
* a boolean is_error field was added along with rval field, this way
the tracer can more reliably distinguish a return value
from an error value.

This changeset should be applied on top of [3] and [4].

[1] https://lore.kernel.org/lkml/CA+55aFzcSVmdDj9Lh_gdbz1OzHyEm6ZrGPBDAJnywm2LF_eVyg@mail.gmail.com/
[2] https://lore.kernel.org/lkml/CAObL_7GM0n80N7J_DFw_eQyfLyzq+sf4y2AvsCCV88Tb3AwEHA@mail.gmail.com/
[3] https://lore.kernel.org/lkml/20181119210139.GA8360@altlinux.org/
[4] https://lore.kernel.org/lkml/20181120001128.GA11300@altlinux.org/

v4:
* Re-split into two commits.
* Do not introduce task_struct.ptrace_event, use child->last_siginfo->si_code
  instead.
* Implement PTRACE_SYSCALL_INFO_SECCOMP and ptrace_syscall_info.seccomp
  support along with PTRACE_SYSCALL_INFO_{ENTRY,EXIT} and
  ptrace_syscall_info.{entry,exit}.

v3:
* Split into three commits.
* Change struct ptrace_syscall_info.
* Support PTRACE_EVENT_SECCOMP by adding ptrace_event to task_struct.
* Add proper defines for ptrace_syscall_info.op values.
* Rename PT_SYSCALL_IS_ENTERING and PT_SYSCALL_IS_EXITING to
* PTRACE_EVENTMSG_SYSCALL_ENTRY and PTRACE_EVENTMSG_SYSCALL_EXIT
* and move them to uapi.

v2:
* Do not use task->ptrace.
* Replace entry_info.is_compat with entry_info.arch, use syscall_get_arch().
* Use addr argument of sys_ptrace to get expected size of the struct;
  return full size of the struct.

Elvira Khabirova (2):
  ptrace: save the type of syscall-stop in ptrace_message
  ptrace: add PTRACE_GET_SYSCALL_INFO request

 include/linux/tracehook.h   |   9 ++--
 include/uapi/linux/ptrace.h |  44 +++++++++++++++
 kernel/ptrace.c             | 103 +++++++++++++++++++++++++++++++++++-
 3 files changed, 152 insertions(+), 4 deletions(-)

-- 
ldv
