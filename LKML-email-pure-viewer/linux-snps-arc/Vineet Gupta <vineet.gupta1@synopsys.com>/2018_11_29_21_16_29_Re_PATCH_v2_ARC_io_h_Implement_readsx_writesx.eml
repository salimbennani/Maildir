Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 08:51:01 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga007.fm.intel.com (fmsmga007.fm.intel.com [10.253.24.52])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 729D1580213;
	Thu, 29 Nov 2018 13:16:40 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga007-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 13:16:40 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AhpD7YhflZOILw1pgEiImWBGClGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc68Yh2N2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRBDI2i?=
 =?us-ascii?q?coUPE+QPM+VWr4n8u1QAohSxBRK0BO7t0TJImmb20Lcm3+g9DQ3KwgotFM8Ovn?=
 =?us-ascii?q?TOq9X1Mb8fXu+0zKnO0zrMce9W0ir85ojVahAhveuDVq93fMrPyEkvER3KgUuM?=
 =?us-ascii?q?qYD/MDOVy/wNs3SB4OZ9Tu+vkG4mqwd2oji33cctipLJipgJxVDD8CV02YA4Ls?=
 =?us-ascii?q?C7Rk5jedOoDodcuiWAO4drTM4uXXtktDs5x7Eao5K2fSoHxIw6yxLDcfCLboeF?=
 =?us-ascii?q?7x35WOqMJTp1gGhpdK+jixu96USgxPPzW8qo3FtPqydKjNbBuWsM2hHW6sWKSu?=
 =?us-ascii?q?Vx8luk1DuLyw/f9vxLLEUqmafbN5Iu2bg9nYcJv0vZBC/5gkD2gbeWdko6/uio?=
 =?us-ascii?q?7PzqYqvpppCCLY94kAL+Pbo0msy5H+s4NhICX2+B+eSzzLHj/Ev5T6tWjvAujK?=
 =?us-ascii?q?XVrJTXKd4GqqO3HQNZyJsv5hWjAzu80dkVn2ELLFdfdxKGi4jpNUvOIPf9Dfqn?=
 =?us-ascii?q?h1SskTFrx+3JP7H4AZXCMGLDkLH/crZ58kJczwQyzdZB6JJOEbwBPv3zVVHrtN?=
 =?us-ascii?q?DCDR82LRa0w+D5B9V5zI8eXniPAqCBPKPIrVCI/v4vI/WLZIINvDb9Kvsl6OD0?=
 =?us-ascii?q?gX42hF8QZq2p3ZoRaHClEfVqOUSZYXzwgtgfFWcGpBYxTOvviFeaSz5ce26yX7?=
 =?us-ascii?q?4g5jE8EI+mDZ3MRoGxgLOb2ye3BJ1WZn1cBVCKHnflbIGEW/YKaCKPLc5tiD0E?=
 =?us-ascii?q?Vb69S4A/0RGirhP1y71iLuDM4C0XqYrj1MRp5+3UjRwy9zt0ANqH32GOSGF0mG?=
 =?us-ascii?q?UIRzgt0aB7oEx9zEqD0Kdij/xZE9xT++1GUgMgOZHAyOx6Dsj4WhjdcdeRVFam?=
 =?us-ascii?q?XtKmDCkrQdIqw98OZEV9F8+4jh/Z3SqnGLsVl72NBJwp/aPQxXnxJ8Bhy3nY0K?=
 =?us-ascii?q?ktlUUpQsxKNWe+nK5w6xDTB5LVk0Wej6uqdr4T3CjX+GeHzGqBpkdYUAFrXKXB?=
 =?us-ascii?q?XHAfYFbWrNvj6kPDSb+uFaooMg9bxcGeLatKb8XjjU9aS/f7JNTef2Wxln+tCh?=
 =?us-ascii?q?mS2LODcpDme2UH0yXbE0gLjQYT8XGCNQg9Ayehp3nTDDhvFVLpfkPt/vNyqHK9?=
 =?us-ascii?q?Tk8o0Q6Ka1dt2Kay+h4QnfacUe8c3qoYuCc9rDV5BEuy0MjIC9WevQZhfL9TYd?=
 =?us-ascii?q?Um4FhZ02LUrAh9Pp2mL6B/iV8SaQV3v0Xy1xppDoVMi9QlrHQvzABqM6KXzEtB?=
 =?us-ascii?q?dy+E3ZD3IrDXNmjy/BWoa67K2lHf0Mya+rsV5PQ/sVXjuACpFkwt83h819lV0n?=
 =?us-ascii?q?2c5ojFDQYIUJLxVFo3+AZ+p73AfiY94IbU32V2Maaoqj/Cx84pBOw9xxm6e9dQ?=
 =?us-ascii?q?LqyFGxHyEsEAHMeuNfEllEKvbhIHO+BS6rU5P8end/uAxa6qM/xsnDOgjWRb/o?=
 =?us-ascii?q?991liA+DZ7Su7Nx5wF2e2X3hObVzfgi1esqsD2mZ1eaT4OBGa+yCjkC5RXZq19?=
 =?us-ascii?q?ZosLDWauI8uqxtRxnZLtWnhY9EK9CFMCwsOmZR2Sb1nl1w1KyUsXuWCnmTe/zz?=
 =?us-ascii?q?FsiTEpr7aQ0zbUw+v/cxoLIGhLS3d4jVftOIS7k8oVXEy1YAc3jhul4kD6yrNf?=
 =?us-ascii?q?pKR+KWnTXEhJczL3L2FkTqu/qL6Cb9RT55MvtCVdSP68bkyCSr7hvxsa1DvuHm?=
 =?us-ascii?q?tfxDwhdzCmoI75nwF8iG+GKHZzrXzZedx/xBvF5dzcQ+JR0SQCRCVilTbXAV28?=
 =?us-ascii?q?NcGz/dqIj5fDrvy+V2W5W51Raybr14CAtCi85WFwGh2whfOzmt7mEQg8zyD70c?=
 =?us-ascii?q?JnVSHJrBb6f4nq2L62MeNhfkl0GlD879B2FZ15kos1nJsQw2QVho2J/Xoblmf+?=
 =?us-ascii?q?KdVa1rj5bHYXRz4LwtjV7RPh2E1iKHKJ2o34Wm+cwstne9m1fGcW1jgh4MBNDa?=
 =?us-ascii?q?ee9KZEkjdtolqksQLRZuBwnjQHxvsv8nIag/wJtxArziWSGb0SGUhYPSrxlxWH?=
 =?us-ascii?q?9dy+raNXZHqxfri0zkZxgdehDLSaqAFGRHn5YosiHTN37shnNVLM0X7z5Zv+dN?=
 =?us-ascii?q?jec90TrQGUnAnaj+dONp0xjPUKiDFjOWL8u30l1uE6gQZv3ZG8oIiINWFt8Lil?=
 =?us-ascii?q?DR5fMz3/f9kT9S31jaZCgsaW2JiiHolmGjUORpfpTOinEDQPtfT8LAaOESYxqn?=
 =?us-ascii?q?OaGbrZAA+e511qr3PJE5C3KX6XIGMVwsllRBmYPEZfmhwbXC0mnp4lEQCn3Nfu?=
 =?us-ascii?q?f11+5jAV+170sB9Myv9zOhn7U2ffohqoazguRJieKhpW8h9N50PPPcOC6eJzGj?=
 =?us-ascii?q?lS/oe9owyVNmybewNIAHkLWkOeAlDsIKKu6cPc8+SCBeq+MvjOYaiIqeNETPeF?=
 =?us-ascii?q?3pav0opg/zaROcSDJHhiD/sn2kVdWXB1AdjWmzIKSyYPjSLCc9abpAug+i1wts?=
 =?us-ascii?q?2+8PPrWB/25YuSEbRSN89j+wuxgaeFOO6dnyJ5KTde1pMRyn7E0rkf3FgOiy5w?=
 =?us-ascii?q?czmhC6gPtSnITKjIgK9YEwYbaz9vNMtP96883hdCOc/YitP21750lP01C01CVV?=
 =?us-ascii?q?zuhM6pf9EKI3qmOVPDBUaLMqmGJDLRz8H2Z6O8VaNfjOFOuxKsvjabFlfpPi6f?=
 =?us-ascii?q?mDnxSxCvLeZMgTmBMxxDo469aAhiCGj5QNLiax22K9t3jTwwwb0piXLGL28cMT?=
 =?us-ascii?q?5gc0xTqr2c9z9XgvJ6G2ZZ9HpqMfGEmzqF7+nfMpsWrfprAiFum+1G+ng117tV?=
 =?us-ascii?q?4z9CRPFunCvSr9huo0ypk+WVyzpnVgZOpShPhI6RoUpiPqDZ/IFaWXnY5BIN8X?=
 =?us-ascii?q?mQCxMSqtplENLvvaVQytnJlK3rKTZC88jb/c0TB8XPLMKHMXwhMQfmGTLODQsF?=
 =?us-ascii?q?SyKrOn/bh0BHjP6S8XiV/dAGrc3On4EDApZRTlEoXqcYDV9oWtUIOppqdig1l7?=
 =?us-ascii?q?mDl98To3G5qU+VDI9ev5baRreJB+30bT+DhpFAZgAU2vX5K4oJP4H20kAkbUN1?=
 =?us-ascii?q?1syeH0vWQMAIuSt5dUo9uk5l9HllUnZ12kTrcAqh7XYfU/mukUhywkF6YOIw5H?=
 =?us-ascii?q?Lv7k0xK17iuiQ9ig8ylM/jjDTXdyT+Zu/kWYBQFjqxtEUrNJ7/axh6YBf0nkF+?=
 =?us-ascii?q?MjrAAbVLgO0zW3psjVriuJ1CFOIUYrBcfBZYke+WYfglzRJTtz27zBZv/vrDDo?=
 =?us-ascii?q?N5hRBsepmp+SETkzl/ZcI4cPSDbJFCyUJd0+fX5nel?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ATAQAhVgBch0O0hNFlHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBZYExgjsnCoxmiyqCDRSZYgGEQIM0IjgSAQMBAQEBAQECARMBAQEIDQkIKSM?=
 =?us-ascii?q?MgjYkAYJiAQIDAQI3BgEBNwEFCQEBAQEIGB4QAy8lAgQBDQoDgxmCAgEEqQGCH?=
 =?us-ascii?q?4J2AQEFhykIinqBHIIWgVeCTIUBgzWCJoEsAZQfilkGAQKCIYgKhx+BWoUQBYM?=
 =?us-ascii?q?fhw6IeJEzgXYzGiOBboFOghsMF4NKilNAATGBBQEBjCCBHwEB?=
X-IPAS-Result: =?us-ascii?q?A0ATAQAhVgBch0O0hNFlHAEBAQQBAQcEAQGBZYExgjsnCox?=
 =?us-ascii?q?miyqCDRSZYgGEQIM0IjgSAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkAYJiAQIDA?=
 =?us-ascii?q?QI3BgEBNwEFCQEBAQEIGB4QAy8lAgQBDQoDgxmCAgEEqQGCH4J2AQEFhykIinq?=
 =?us-ascii?q?BHIIWgVeCTIUBgzWCJoEsAZQfilkGAQKCIYgKhx+BWoUQBYMfhw6IeJEzgXYzG?=
 =?us-ascii?q?iOBboFOghsMF4NKilNAATGBBQEBjCCBHwEB?=
X-IronPort-AV: E=Sophos;i="5.56,295,1539673200"; 
   d="scan'208";a="53230279"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 13:16:39 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726563AbeK3IXP (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 30 Nov 2018 03:23:15 -0500
Received: from us01smtprelay-2.synopsys.com ([198.182.60.111]:35924 "EHLO
        smtprelay.synopsys.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726216AbeK3IXP (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 30 Nov 2018 03:23:15 -0500
Received: from mailhost.synopsys.com (mailhost3.synopsys.com [10.12.238.238])
        by smtprelay.synopsys.com (Postfix) with ESMTP id CB19410C07B3;
        Thu, 29 Nov 2018 13:16:29 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=synopsys.com; s=mail;
        t=1543526189; bh=jSWGDtnuZikYt/TErXicMXsZUhz6K+l15eXWL0s6+ho=;
        h=From:To:CC:Subject:Date:References:From;
        b=L1ecJF3CsbDIvopyVhbpG9n0pBM0Pwsjs94wDTyY5nQu2m0sOhGWIWEOWN/O7DThA
         /JH7EaN1G5E2K7HA0ddB2qbfpl8mRVC+gUimG9FWF9AYrqop8gdbb7L183nH7O//WU
         sTtf/6LfX3jJ0TkLdYrH20EJu7TLK7tZrvhGB/lbUyPmFtMsEXF9+dKSXaallDvcon
         c2i6XNAV/iCfLQQBDed6+nIXsNpuA5IZ3QryGlsqX8Kxr2R3TXcj3ab0ouvvO6YjJv
         n1s6iEJifrZzfwr7dFXGlBKbNELCi+p/mwx/tv9OcSHruZAzlyEwjeovJbLl7x4tDO
         xeH+KxiZ6DhKQ==
Received: from US01WEHTC2.internal.synopsys.com (us01wehtc2-vip.internal.synopsys.com [10.12.239.238])
        by mailhost.synopsys.com (Postfix) with ESMTP id 8352E3D85;
        Thu, 29 Nov 2018 13:16:29 -0800 (PST)
Received: from US01WEMBX2.internal.synopsys.com ([fe80::e4b6:5520:9c0d:250b])
 by US01WEHTC2.internal.synopsys.com ([10.12.239.237]) with mapi id
 14.03.0415.000; Thu, 29 Nov 2018 13:16:29 -0800
From: Vineet Gupta <vineet.gupta1@synopsys.com>
To: Jose Abreu <jose.abreu@synopsys.com>,
        "linux-snps-arc@lists.infradead.org" 
        <linux-snps-arc@lists.infradead.org>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>
CC: Alexey Brodkin <alexey.brodkin@synopsys.com>,
        Joao Pinto <joao.pinto@synopsys.com>,
        Vitor Soares <vitor.soares@synopsys.com>,
        David Laight <David.Laight@ACULAB.COM>
Subject: Re: [PATCH v2] ARC: io.h: Implement reads{x}()/writes{x}()
Thread-Topic: [PATCH v2] ARC: io.h: Implement reads{x}()/writes{x}()
Thread-Index: AQHUh+/oo0RKKbidaU63fw0ncGEK7A==
Date: Thu, 29 Nov 2018 21:16:29 +0000
Message-ID: <C2D7FE5348E1B147BCA15975FBA230750146419EBB@US01WEMBX2.internal.synopsys.com>
References: <19fb2e394afcb073bbc109e432417fbbc03323f6.1543499759.git.joabreu@synopsys.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-originating-ip: [10.144.199.104]
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 11/29/18 6:29 AM, Jose Abreu wrote:=0A=
> Some ARC CPU's do not support unaligned loads/stores. Currently, generic=
=0A=
> implementation of reads{b/w/l}()/writes{b/w/l}() is being used with ARC.=
=0A=
> This can lead to misfunction of some drivers as generic functions do a=0A=
> plain dereference of a pointer that can be unaligned.=0A=
>=0A=
> Let's use {get/put}_unaligned() helper instead of plain dereference of=0A=
> pointer in order to fix this. =0A=
=0A=
Please add a few lines of comment about what the accessor does in general -=
 maybe=0A=
copy-paste from generic file if needed.=0A=
=0A=
> +#define __raw_readsx(t,f) \=0A=
> +static inline void __raw_reads##f(const volatile void __iomem *addr, \=
=0A=
> +				  void *buffer, unsigned int count) \=0A=
> +{ \=0A=
> +	if (count) { \=0A=
=0A=
Could you reduce 1 level of indentation by checking for !count and return.=
=0A=
=0A=
> +		const unsigned long bptr =3D (unsigned long)buffer; \=0A=
> +		u##t *buf =3D buffer; \=0A=
> +\=0A=
> +		do { \=0A=
> +			u##t x =3D __raw_read##f(addr); \=0A=
> +\=0A=
> +			/* Some ARC CPU's don't support unaligned accesses */ \=0A=
> +			if (bptr % ((t) / 8)) { \=0A=
=0A=
This math is loop invariant so instead of using bptr here, have something l=
ike=0A=
is_aligned =3D (unsigned long)buffer % ((t) / 8)) outside the loop. A reaso=
nable=0A=
compiler already does that but this one is easier on eyes.=0A=
=0A=
> +				put_unaligned(x, buf++); \=0A=
> +			} else { \=0A=
> +				*buf++ =3D x; \=0A=
> +			} \=0A=
> +		} while (--count); \=0A=
> +	} \=0A=
> +}=0A=
=0A=
Per your later post the compiler is doing the good job here, but sometimes =
it=0A=
might not. Adding a condition inside a loop is not a good idea in general. =
Better=0A=
to code the 2 loops seperately.=0A=
=0A=
> +=0A=
> +#define __raw_readsb __raw_readsb=0A=
> +__raw_readsx(8, b);=0A=
=0A=
The trailing ; is not needed=0A=
=0A=
> +#define __raw_readsw __raw_readsw=0A=
> +__raw_readsx(16, w);=0A=
> +#define __raw_readsl __raw_readsl=0A=
> +__raw_readsx(32, l);=0A=
=0A=
> +=0A=
>  #define __raw_writeb __raw_writeb=0A=
>  static inline void __raw_writeb(u8 b, volatile void __iomem *addr)=0A=
>  {=0A=
> @@ -126,6 +155,32 @@ static inline void __raw_writel(u32 w, volatile void=
 __iomem *addr)=0A=
>  =0A=
>  }=0A=
>  =0A=
> +#define __raw_writesx(t,f) \=0A=
> +static inline void __raw_writes##f(volatile void __iomem *addr, \=0A=
> +				   const void *buffer, unsigned int count) \=0A=
> +{ \=0A=
> +	if (count) { \=0A=
> +		const unsigned long bptr =3D (unsigned long)buffer; \=0A=
> +		const u##t *buf =3D buffer; \=0A=
> +\=0A=
> +		do { \=0A=
> +			/* Some ARC CPU's don't support unaligned accesses */ \=0A=
> +			if (bptr % ((t) / 8)) { \=0A=
> +				__raw_write##f(get_unaligned(buf++), addr); \=0A=
> +			} else { \=0A=
> +				__raw_write##f(*buf++, addr); \=0A=
> +			} \=0A=
> +		} while (--count); \=0A=
> +	} \=0A=
> +}=0A=
=0A=
Same as for read !=0A=
=0A=
> +=0A=
> +#define __raw_writesb __raw_writesb=0A=
> +__raw_writesx(8, b);=0A=
> +#define __raw_writesw __raw_writesw=0A=
> +__raw_writesx(16, w);=0A=
> +#define __raw_writesl __raw_writesl=0A=
> +__raw_writesx(32, l);=0A=
=0A=
Ditto !=0A=
=0A=
