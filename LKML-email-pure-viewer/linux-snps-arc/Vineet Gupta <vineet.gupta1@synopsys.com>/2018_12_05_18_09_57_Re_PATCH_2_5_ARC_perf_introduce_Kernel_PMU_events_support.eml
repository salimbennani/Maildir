Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 06 Dec 2018 08:57:14 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 4C38E5804C1;
	Wed,  5 Dec 2018 10:13:06 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by fmsmga005-1.fm.intel.com with ESMTP; 05 Dec 2018 10:13:05 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A+A2oZhBugnQ6tSoffT4pUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP79rsSwAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95RWSJfH428?=
 =?us-ascii?q?c4UBAekPPeZZs4bzqFQBrQCmBQSuH+7v1iZIi2Xq0aEmz+gtDwfL1xEgEdIUt3?=
 =?us-ascii?q?TUqc34O6gTUeCz0qbH0ynDZO5X1zfg8IjIbgouquyLULJucMrRz1cgGB3ZjlmK?=
 =?us-ascii?q?pozlIiuV1vgXvGSG9OdgTuKui2ggqwFpuTiuxtwshpPViYISz1DJ7CN0y5s7K9?=
 =?us-ascii?q?2/TU50e9+kEJ1Iui6GMIt2RM0iQ2BnuCogzL0Jo5u7czYSxJs92x7fd+aHf5KO?=
 =?us-ascii?q?4h35UeaePy90hHF7d7KlgRa970ygxvf7Vsmu31ZHqDdOnNrUtn0VyRDf9syKRu?=
 =?us-ascii?q?Fg8kqvxzqDzR3f5+JYLUwulKfWKYYtzqMsmpYJrEjOESD7lF/rgKKSckgo4PWk?=
 =?us-ascii?q?5/jmb7n+qJ+TKYx5hh37P6krhMOyDv83PwkLUmWb+emwyqHv8Ej9TbpWkvE5j6?=
 =?us-ascii?q?zUvI7aKMgHvaG0BRJe3Jw55BalFTim1cwVnXkZI1JBfxKKl5bpO17QL/DiF/u/?=
 =?us-ascii?q?gEqjkC1tx//YOr3tGJLNLmLMkLv5fLZ97VBTyBYrwNxB+55ZDqsNLO/9V0Pvrt?=
 =?us-ascii?q?DUExw0PxCuz+vmCthxzoYeVniOAq+dPqPSq1iI5uc3LumIZY8Vviv9Kvc86/7t?=
 =?us-ascii?q?k3A5g1kdcret3ZcOb3C5EPJmLFuDYXf3nNcBHnkFvhAkQOzpllKCSzhTaGi2X6?=
 =?us-ascii?q?4m4TE7Eo2mAZ/ZRo+xmLyBwDu7HppOa2BCC1CMEmnne5+LWvcRcy+SJs5hkjoZ?=
 =?us-ascii?q?VbmuUYMh1BeutBPkxLpjNObb5ioYtZf73thv++LTjQ0y9SBzD8mF02GCVWB0nn?=
 =?us-ascii?q?8SSD8xxqx/oVF9xU2F0ah3mPFYEd1T5/VUUgY1L5Lczup6C8zsVQLFZNuGVFGm?=
 =?us-ascii?q?QtC+CzErUt0x28MOY1p6G9i6jBDD2DSlD6UWl7yMApw09KXc0mP1J8Z8zXbGya?=
 =?us-ascii?q?Ygg0MnQstJKW2pmKp/+xLPCI7OlkWTj7yqergE3C7R6GeDynKDs1tDUA5wVqXF?=
 =?us-ascii?q?XmoTZlHMotT7/U7CS76uCbI6MgpO08KCK61KasH3glVCXvvsJNPeY2epkWeqGR?=
 =?us-ascii?q?mI3q+MbJbte2gF3yXSEk4EnxoX/XaHLwc+ACihrnnaDDxvE1Lvfkzt/fN/qHO9?=
 =?us-ascii?q?Uk870QWKY1d92Lqy/x4fneacRO8L3rIYpCchrC15E0un0NLIFdWMvQphc79aYd?=
 =?us-ascii?q?Mm/lhH02XVtwh+PpylK6BvnVoecwVxv0Pz2BR7EIRAkc42rHw0yAp+M76X0FRE?=
 =?us-ascii?q?dzmAx5D/JqXXKnXu/BCoc6PZx0vR0MiI9asV6PQ3sVPjvBq3GUok6Hhn19hV03?=
 =?us-ascii?q?2B5pTFFgYSUJTxUlop+Bh+vb3Vfi4954bM3312Laa0qiPC284uBOY91hagftJf?=
 =?us-ascii?q?MKSYFA/yE8wWHdSuJPYtm1izahIEPeZS9KEvMsOidvuG3rOrPel6kDKni2RH/J?=
 =?us-ascii?q?5y0kaW+yVgTe7I2o4Pw+uE0QufSzf8kFChv9jtloBAez4TEXSwyCj+CIFKe619?=
 =?us-ascii?q?YJwECWGtI82w2NVznJrtW39e9F6+CFIKws6peRyOb1Pj2Q1cz1gYoXuimSGg1T?=
 =?us-ascii?q?x7jykprraD3CzJ2+njdAcHNnRXS2V4jFbsIZK7j9YVXEWzawgplR2l5Vv1xqRB?=
 =?us-ascii?q?paR/KXXTTllMfyTsM25iVa6wvKKYY8FT8JMorTlXUOOkbFCAS77yvwEV0zn+EG?=
 =?us-ascii?q?tZ3jw7cS+luo/4nxBjlG2SNnJzo2fHdsFqwhff4sfRRfpQ3joAWSl5hiPbBlm6?=
 =?us-ascii?q?P9m149qUk43Pvfy5V2KkTpdTazXkzZuctCun4m1nGR2+n/GpltznCwQ6yjL719?=
 =?us-ascii?q?9xWCXMrRb8ZJTr1qugPeJmeEloGEHz685gFo5ilYswgYka2WIGiZWN4XoHjWDz?=
 =?us-ascii?q?PM1Z2a3kdnoNRj0Lw9nP7Aj+wkJjLXGJx4P/VnqDxMtsfN26YmIQ2iIg4MFGEq?=
 =?us-ascii?q?aU7LpYnSRrplq0tx7eYf94nj0F0/sh9GYag/0VuAoq1iicAqodHU5CMSzulhSI?=
 =?us-ascii?q?6cuzrKFWZGapbLix21ByndGnDLGevA5cXGz1dYslHS919s9/Kk7D0GXv6oH4f9?=
 =?us-ascii?q?ndddETuQeVkxvaj+hVNYg+lvwFhSd8PWL9vHsly/M0jBB03JG6upSHJHtp/K6j?=
 =?us-ascii?q?HhFYMTj1bdsJ+j7xlaZegtqW34e3E5VkGzULX4HnQeimET0MrvTnKxiBECcnpX?=
 =?us-ascii?q?iFA7rfEhSS6ENnr3LJDpCqOGubJHgfzdV+WhadIFZTjxwTXDU/hpQ5DBylxNT9?=
 =?us-ascii?q?cEdl4TAc/kL4qhxJyu5yNhjwSGHfpBqzajcvSZiSNx5W7gBE50fIPs2S9ONzHy?=
 =?us-ascii?q?dE/pK/qAyBMHCUZwNNDWsRQEyLG0jjPqWy5dnH6+WXHfCxL/zKYbWTs+BeU+qI?=
 =?us-ascii?q?yImr0otn+TaMK8qOMmNjD/09xkpMQ3R5F97FlDUITiwdjzjNYNKDpBeg5i13qd?=
 =?us-ascii?q?iy8PbxVwLq+4SPEKFeMcl19xC1nKeDNPOQhCBjJjZDzZ4MwX7IyL4C3F8dkS1u?=
 =?us-ascii?q?dj+tEageui7JVq7fhqhXDxsDYSNpKMRI97483hVKOcPDitL10aN4jucoC1hfU1?=
 =?us-ascii?q?ztgNqpZcsMI2GyL17HAEeLNLKbJTzE2c33YKW8SaFOg+VQrRG/pTGbE0r7NDSZ?=
 =?us-ascii?q?izbpTwyvMf1LjCyDPBxRpoC9chVuCWjiVt7maQe7MNh4jTIo2700m2jKOHUYMT?=
 =?us-ascii?q?h9dUNNs7KR4TlZgvV5B2xO8H5lIfOYlCae6unSMowWvudzAiRoi+Ja52w3xKFI?=
 =?us-ascii?q?7C5fXvx6hivTosRqo1GnieSPzjtnUBxTqjdEno6LvENiObnH+ZlEQ3rL4BUN7W?=
 =?us-ascii?q?CIARQQu9RlEsHvu7xXytXXiKLzKTJC/8jI8scGG8fUKNyIMHw6PBrtGT7UChYF?=
 =?us-ascii?q?TDGxOWHegUxdjO+d9nmPopcmrZjsnYIESqVHW1wtCvMaFkNlEcQCIZhtWDMklL?=
 =?us-ascii?q?+bjMgQ6nu/rBneXsNavp/cW/KWAPXvLiuZjLZeaxsJx7P4MZocNonh10N+bVl6?=
 =?us-ascii?q?mdeCJ02FcM1Crytgf0cMqUFR63VgBjkexk3obAK8pkcaEeKvkwAekRp4Zvw25S?=
 =?us-ascii?q?yq6FAycB6C7i8xllQh3M7jmSvUeST6BKOxRp1NTSvyuVI4Pp7yT0BydwL41Rhg?=
 =?us-ascii?q?NTHZV/dKiaN7MGlxgyfYuIBTArhdS6NeaRMdzP3RYO8nhwdysCKikHFG4+bIFd?=
 =?us-ascii?q?NNiRM2eNb4sXNG1g9/KtEoPbDZfYJS315XnrmfpWmj0eVnk1xWHFoE7G7HIH1A?=
 =?us-ascii?q?g0cPLLRzYnPwpuE=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AFAADUFAhch0O0hNFkGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUQYBAQELAQGBLyqBD4ECJwqMCF+LL4INFGiNRYkLgXMsCwgBhECDEyI?=
 =?us-ascii?q?0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwxCAQ4BgWQkAYJiAQIDAQIkEwYBATcBB?=
 =?us-ascii?q?QkBAQEBCBgeEAMvJQIEAQ0FBQOCTksBggEBBAqlE4FsM4J2AQEFgTABCwGFaQi?=
 =?us-ascii?q?LAoEcghaBEUaCFzWEShscgzWCJoEsAYgIgW+EE5EhBgECgiSEX4pXgVtNh26HG?=
 =?us-ascii?q?YkJhGmMUoINMxojUIEegRoBMwmCEgwXg0qEUUOFP0ABMYEFAQGCHYVygS6BHwE?=
 =?us-ascii?q?B?=
X-IPAS-Result: =?us-ascii?q?A0AFAADUFAhch0O0hNFkGwEBAQEDAQEBBwMBAQGBUQYBAQE?=
 =?us-ascii?q?LAQGBLyqBD4ECJwqMCF+LL4INFGiNRYkLgXMsCwgBhECDEyI0CQ0BAwEBAQEBA?=
 =?us-ascii?q?QIBEwEBAQgNCQgpIwxCAQ4BgWQkAYJiAQIDAQIkEwYBATcBBQkBAQEBCBgeEAM?=
 =?us-ascii?q?vJQIEAQ0FBQOCTksBggEBBAqlE4FsM4J2AQEFgTABCwGFaQiLAoEcghaBEUaCF?=
 =?us-ascii?q?zWEShscgzWCJoEsAYgIgW+EE5EhBgECgiSEX4pXgVtNh26HGYkJhGmMUoINMxo?=
 =?us-ascii?q?jUIEegRoBMwmCEgwXg0qEUUOFP0ABMYEFAQGCHYVygS6BHwEB?=
X-IronPort-AV: E=Sophos;i="5.56,319,1539673200"; 
   d="scan'208";a="42886346"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 05 Dec 2018 10:13:03 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728188AbeLESJ7 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 5 Dec 2018 13:09:59 -0500
Received: from smtprelay2.synopsys.com ([198.182.60.111]:54354 "EHLO
        smtprelay.synopsys.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727388AbeLESJ7 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 5 Dec 2018 13:09:59 -0500
Received: from mailhost.synopsys.com (mailhost2.synopsys.com [10.13.184.66])
        by smtprelay.synopsys.com (Postfix) with ESMTP id 944FB10C08D9;
        Wed,  5 Dec 2018 10:09:58 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=synopsys.com; s=mail;
        t=1544033398; bh=yLiTtfrRuj9OMIPmAKFnmP1FqzQEqUSzemrdeoxnEH0=;
        h=From:To:CC:Subject:Date:References:From;
        b=TGqISBZpZGtrjXWFSRaqq2THa+iDEEmdk3A/7QXe4pa941PPP5lU4FlLYbZCWKO/J
         Z2W9AvfC0ORr5r4YmPZFADYCb9uDxOcS9PIC5g4FSK9JnVq1AwRtkpllOFZM96i19h
         wOOWa6MYXQn79FPqvPDMOZp163hdChm10pS4WxftU2Gh/7ROaLkxz4dw1hBroHZuef
         7d2IDRKa914243+hc5an3OroZVK66J48Z3FegEkM8VpVJj+ls50xX46M7wnrzeStKJ
         BEdAPAUWKlRmmZ4agN2wthHP9SNDokftBydG6LuhTSrXtkqpzx0nHOfNXZbtTC2wB3
         1KcCn0HRN6TTw==
Received: from US01WXQAHTC1.internal.synopsys.com (us01wxqahtc1.internal.synopsys.com [10.12.238.230])
        by mailhost.synopsys.com (Postfix) with ESMTP id 6FDED3E7A;
        Wed,  5 Dec 2018 10:09:58 -0800 (PST)
Received: from US01WEMBX2.internal.synopsys.com ([fe80::e4b6:5520:9c0d:250b])
 by US01WXQAHTC1.internal.synopsys.com ([::1]) with mapi id 14.03.0415.000;
 Wed, 5 Dec 2018 10:09:58 -0800
From: Vineet Gupta <vineet.gupta1@synopsys.com>
To: Eugeniy Paltsev <Eugeniy.Paltsev@synopsys.com>,
        "linux-snps-arc@lists.infradead.org" 
        <linux-snps-arc@lists.infradead.org>
CC: "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        "Alexey Brodkin" <alexey.brodkin@synopsys.com>,
        Peter Zijlstra <peterz@infradead.org>,
        "Ingo Molnar" <mingo@redhat.com>,
        Arnaldo Carvalho de Melo <acme@kernel.org>,
        Alexander Shishkin <alexander.shishkin@linux.intel.com>,
        Jiri Olsa <jolsa@redhat.com>,
        Namhyung Kim <namhyung@kernel.org>
Subject: Re: [PATCH 2/5] ARC: perf: introduce Kernel PMU events support
Thread-Topic: [PATCH 2/5] ARC: perf: introduce Kernel PMU events support
Thread-Index: AQHUjLzgBlrsNj2oEEKybwd/bQNQoQ==
Date: Wed, 5 Dec 2018 18:09:57 +0000
Message-ID: <C2D7FE5348E1B147BCA15975FBA23075014641B980@US01WEMBX2.internal.synopsys.com>
References: <20181205170609.18690-1-Eugeniy.Paltsev@synopsys.com>
 <20181205170609.18690-3-Eugeniy.Paltsev@synopsys.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-originating-ip: [10.144.199.106]
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 12/5/18 9:06 AM, Eugeniy Paltsev wrote:=0A=
> Export all available ARC architected hardware events as=0A=
> kernel PMU events to make non-generic events accessible.=0A=
>=0A=
> ARC PMU HW allow us to read the list of all available=0A=
> events names. So we generate kernel PMU event list=0A=
> dynamically in arc_pmu_device_probe() using=0A=
> human-readable events names we got from HW instead of=0A=
> using pre-defined events list.=0A=
>=0A=
> -------------------------->8--------------------------=0A=
> $ perf list=0A=
>   [snip]=0A=
>   arc_pmu/bdata64/                  [Kernel PMU event]=0A=
>   arc_pmu/bdcstall/                 [Kernel PMU event]=0A=
>   arc_pmu/bdslot/                   [Kernel PMU event]=0A=
>   arc_pmu/bfbmp/                    [Kernel PMU event]=0A=
>   arc_pmu/bfirqex/                  [Kernel PMU event]=0A=
>   arc_pmu/bflgstal/                 [Kernel PMU event]=0A=
>   arc_pmu/bflush/                   [Kernel PMU event]=0A=
=0A=
Lets call this pct iso pmu since pmu has more of power mgmt connotation. I =
know=0A=
the code has pmu littered all over but atleast the user interface could be =
more=0A=
intuitive.=0A=
=0A=
BTW this approach seems more user friendly and is different from Alexey's e=
arlier=0A=
stab at implementing raw events [1]. He didn't keep around any list (and re=
lied on=0A=
use rlooking in the PRM to find his interesting event of the day) and pass =
as=0A=
*r*foobar.  PeterZ at the time had some reservations with that which I neve=
r fully=0A=
understood.=0A=
=0A=
[1] https://lore.kernel.org/patchwork/patch/568769/=0A=
=0A=
> -------------------------->8--------------------------=0A=
>=0A=
> Signed-off-by: Eugeniy Paltsev <Eugeniy.Paltsev@synopsys.com>=0A=
> ---=0A=
>  arch/arc/kernel/perf_event.c | 107 +++++++++++++++++++++++++++++++++++++=
+++++-=0A=
>  1 file changed, 106 insertions(+), 1 deletion(-)=0A=
>=0A=
> diff --git a/arch/arc/kernel/perf_event.c b/arch/arc/kernel/perf_event.c=
=0A=
> index 811a07a2ca21..97b88b00c418 100644=0A=
> --- a/arch/arc/kernel/perf_event.c=0A=
> +++ b/arch/arc/kernel/perf_event.c=0A=
> @@ -22,12 +22,28 @@=0A=
>  /* HW holds 8 symbols + one for null terminator */=0A=
>  #define ARCPMU_EVENT_NAME_LEN	9=0A=
>  =0A=
> +enum arc_pmu_attr_groups {=0A=
> +	ARCPMU_ATTR_GR_EVENTS,=0A=
> +	ARCPMU_ATTR_GR_FORMATS,=0A=
> +	ARCPMU_NR_ATTR_GR=0A=
> +};=0A=
> +=0A=
> +struct arc_pmu_raw_event_entry {=0A=
> +	char name[ARCPMU_EVENT_NAME_LEN];=0A=
> +};=0A=
> +=0A=
>  struct arc_pmu {=0A=
>  	struct pmu	pmu;=0A=
>  	unsigned int	irq;=0A=
>  	int		n_counters;=0A=
> +	int		n_events;=0A=
>  	u64		max_period;=0A=
>  	int		ev_hw_idx[PERF_COUNT_ARC_HW_MAX];=0A=
> +=0A=
> +	struct arc_pmu_raw_event_entry	*raw_entry;=0A=
> +	struct attribute		**attrs;=0A=
> +	struct perf_pmu_events_attr	*attr;=0A=
> +	const struct attribute_group	*attr_groups[ARCPMU_NR_ATTR_GR + 1];=0A=
>  };=0A=
>  =0A=
>  struct arc_pmu_cpu {=0A=
> @@ -196,6 +212,17 @@ static int arc_pmu_event_init(struct perf_event *eve=
nt)=0A=
>  			 (int)hwc->config, arc_pmu_ev_hw_map[ret]);=0A=
>  		return 0;=0A=
>  =0A=
> +	case PERF_TYPE_RAW:=0A=
> +		if (event->attr.config >=3D arc_pmu->n_events)=0A=
> +			return -ENOENT;=0A=
> +=0A=
> +		hwc->config |=3D event->attr.config;=0A=
> +		pr_debug("init raw event with idx %lld \'%s\'\n",=0A=
> +			 event->attr.config,=0A=
> +			 arc_pmu->raw_entry[event->attr.config].name);=0A=
> +=0A=
> +		return 0;=0A=
> +=0A=
>  	default:=0A=
>  		return -ENOENT;=0A=
>  	}=0A=
> @@ -446,6 +473,68 @@ static void arc_cpu_pmu_irq_init(void *data)=0A=
>  	write_aux_reg(ARC_REG_PCT_INT_ACT, 0xffffffff);=0A=
>  }=0A=
>  =0A=
> +/* Event field occupies the bottom 15 bits of our config field */=0A=
> +PMU_FORMAT_ATTR(event, "config:0-14");=0A=
> +static struct attribute *arc_pmu_format_attrs[] =3D {=0A=
> +	&format_attr_event.attr,=0A=
> +	NULL,=0A=
> +};=0A=
> +=0A=
> +static struct attribute_group arc_pmu_format_attr_gr =3D {=0A=
> +	.name =3D "format",=0A=
> +	.attrs =3D arc_pmu_format_attrs,=0A=
> +};=0A=
> +=0A=
> +static ssize_t=0A=
> +arc_pmu_events_sysfs_show(struct device *dev,=0A=
> +			  struct device_attribute *attr, char *page)=0A=
> +{=0A=
> +	struct perf_pmu_events_attr *pmu_attr;=0A=
> +=0A=
> +	pmu_attr =3D container_of(attr, struct perf_pmu_events_attr, attr);=0A=
> +	return sprintf(page, "event=3D0x%04llx\n", pmu_attr->id);=0A=
> +}=0A=
> +=0A=
> +/*=0A=
> + * We don't add attrs here as we don't have pre-defined list of perf eve=
nts.=0A=
> + * We will generate and add attrs dynamically in probe() after we read H=
W=0A=
> + * configuration.=0A=
> + */=0A=
> +static struct attribute_group arc_pmu_events_attr_gr =3D {=0A=
> +	.name =3D "events",=0A=
> +};=0A=
> +=0A=
> +static void arc_pmu_add_raw_event_attr(int j, char *str)=0A=
> +{=0A=
> +	memmove(arc_pmu->raw_entry[j].name, str, ARCPMU_EVENT_NAME_LEN - 1);=0A=
> +	arc_pmu->attr[j].attr.attr.name =3D arc_pmu->raw_entry[j].name;=0A=
> +	arc_pmu->attr[j].attr.attr.mode =3D VERIFY_OCTAL_PERMISSIONS(0444);=0A=
> +	arc_pmu->attr[j].attr.show =3D arc_pmu_events_sysfs_show;=0A=
> +	arc_pmu->attr[j].id =3D j;=0A=
> +	arc_pmu->attrs[j] =3D &(arc_pmu->attr[j].attr.attr);=0A=
> +}=0A=
> +=0A=
> +static int arc_pmu_raw_alloc(struct device *dev)=0A=
> +{=0A=
> +	arc_pmu->attr =3D devm_kmalloc_array(dev, arc_pmu->n_events + 1,=0A=
> +		sizeof(struct perf_pmu_events_attr), GFP_KERNEL | __GFP_ZERO);=0A=
> +	if (!arc_pmu->attr)=0A=
> +		return -ENOMEM;=0A=
> +=0A=
> +	arc_pmu->attrs =3D devm_kmalloc_array(dev, arc_pmu->n_events + 1,=0A=
> +		sizeof(*arc_pmu->attrs), GFP_KERNEL | __GFP_ZERO);=0A=
> +	if (!arc_pmu->attrs)=0A=
> +		return -ENOMEM;=0A=
> +=0A=
> +	arc_pmu->raw_entry =3D devm_kmalloc_array(dev, arc_pmu->n_events,=0A=
> +		sizeof(struct arc_pmu_raw_event_entry),=0A=
> +		GFP_KERNEL | __GFP_ZERO);=0A=
> +	if (!arc_pmu->raw_entry)=0A=
> +		return -ENOMEM;=0A=
> +=0A=
> +	return 0;=0A=
> +}=0A=
> +=0A=
>  static int arc_pmu_device_probe(struct platform_device *pdev)=0A=
>  {=0A=
>  	struct arc_reg_pct_build pct_bcr;=0A=
> @@ -477,6 +566,11 @@ static int arc_pmu_device_probe(struct platform_devi=
ce *pdev)=0A=
>  	if (!arc_pmu)=0A=
>  		return -ENOMEM;=0A=
>  =0A=
> +	arc_pmu->n_events =3D cc_bcr.c;=0A=
> +=0A=
> +	if (arc_pmu_raw_alloc(&pdev->dev))=0A=
> +		return -ENOMEM;=0A=
> +=0A=
>  	has_interrupts =3D is_isa_arcv2() ? pct_bcr.i : 0;=0A=
>  =0A=
>  	arc_pmu->n_counters =3D pct_bcr.c;=0A=
> @@ -508,8 +602,14 @@ static int arc_pmu_device_probe(struct platform_devi=
ce *pdev)=0A=
>  				arc_pmu->ev_hw_idx[i] =3D j;=0A=
>  			}=0A=
>  		}=0A=
> +=0A=
> +		arc_pmu_add_raw_event_attr(j, cc_name.str);=0A=
>  	}=0A=
>  =0A=
> +	arc_pmu_events_attr_gr.attrs =3D arc_pmu->attrs;=0A=
> +	arc_pmu->attr_groups[ARCPMU_ATTR_GR_EVENTS] =3D &arc_pmu_events_attr_gr=
;=0A=
> +	arc_pmu->attr_groups[ARCPMU_ATTR_GR_FORMATS] =3D &arc_pmu_format_attr_g=
r;=0A=
> +=0A=
>  	arc_pmu->pmu =3D (struct pmu) {=0A=
>  		.pmu_enable	=3D arc_pmu_enable,=0A=
>  		.pmu_disable	=3D arc_pmu_disable,=0A=
> @@ -519,6 +619,7 @@ static int arc_pmu_device_probe(struct platform_devic=
e *pdev)=0A=
>  		.start		=3D arc_pmu_start,=0A=
>  		.stop		=3D arc_pmu_stop,=0A=
>  		.read		=3D arc_pmu_read,=0A=
> +		.attr_groups	=3D arc_pmu->attr_groups,=0A=
>  	};=0A=
>  =0A=
>  	if (has_interrupts) {=0A=
> @@ -540,7 +641,11 @@ static int arc_pmu_device_probe(struct platform_devi=
ce *pdev)=0A=
>  	} else=0A=
>  		arc_pmu->pmu.capabilities |=3D PERF_PMU_CAP_NO_INTERRUPT;=0A=
>  =0A=
> -	return perf_pmu_register(&arc_pmu->pmu, pdev->name, PERF_TYPE_RAW);=0A=
> +	/*=0A=
> +	 * perf parser doesn't really like '-' symbol in events name, so let's=
=0A=
> +	 * use '_' in arc pmu name as it goes to kernel PMU event prefix.=0A=
> +	 */=0A=
> +	return perf_pmu_register(&arc_pmu->pmu, "arc_pmu", PERF_TYPE_RAW);=0A=
>  }=0A=
>  =0A=
>  #ifdef CONFIG_OF=0A=
=0A=
