Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 28 Nov 2018 08:50:47 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga008.fm.intel.com (fmsmga008.fm.intel.com [10.253.24.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 21DFB580322;
	Tue, 27 Nov 2018 16:20:23 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by fmsmga008-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 27 Nov 2018 16:20:17 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AJ1PH+h1RESTYs0JgsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segTLfnxwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJdUcleWCJPHIOy?=
 =?us-ascii?q?YIkBD+QCM+lWsofzp0AWrRa8HgSsGPrvxyVUinPqx6A30eIsGhzG0gw6GNIOtW?=
 =?us-ascii?q?zZosjpNKgMSeC1zLfHzTPeZP5L3jf86JXHeQ0mrPGXU7N/as3RyEkyGA7eklqQ?=
 =?us-ascii?q?qZblPzSQ1uQMrmib6vBsVeW1i24osgx8pCWkyMQ0ioTRmI4Z1lTJ+T9kzIs7O9?=
 =?us-ascii?q?G0UlN3bN24HJdKtiyXNZN6Tt0jTm12pCo3z6AKtJ6ncyUP1pgr2wDTZvmaf4WN?=
 =?us-ascii?q?7BLsSvueLDl9iX9heb+yiRS//E26xeHhWMS7ylNHoytZndXRtn0A0QHY5NKdRf?=
 =?us-ascii?q?tn5Eih3C6C1wDN5eFAJkA5jbTbK5E/zb4qjJYTslrMHjXwmEroiK+abEIk+vKn?=
 =?us-ascii?q?6+j/Y7XmoIGTN5Nshw3gLqgjntazDfk2PwQQRWSX5Oex2KH58UD4QrhGlvg2nb?=
 =?us-ascii?q?PYsJDeK8QbvKm5AwpN34Yn6ha/CSqm0dsBkXkEMl1FYhSHgJbtO13XJ/D5A/G/?=
 =?us-ascii?q?jEq2kDpw2fDGMaPuAo/XInjAjrjhZ7B95FBYyAYpytBf/Z1UBqkbIP3vQk/xqM?=
 =?us-ascii?q?DYDhghPgywwubnC8ty2pkRWGKSGaKZNKLSsVmV5uMgOeWMZYkVuCrjJPgh/fLh?=
 =?us-ascii?q?kXg5mVoFd6mzwZQXcGy4HuhhI0iBYXrjmNYBEXsQsQo5VuDqiECCXiRVZ3a9RK?=
 =?us-ascii?q?884jA7CIS7DYbMXIytgbqB3DulEZ1SfGxJFleMEXLwfYWeR/gMcD6SItNmkjEc?=
 =?us-ascii?q?V7ihTJEu2QuttA/9zbpnKO3U9zYctZLi0th1+uLSmQsz9TxyE8SSzWWNQ3tokW?=
 =?us-ascii?q?MPQj88xLp/rlBlylefzah4hORVGsZI5/NJVQc6NoTQz/ZgBNDwQQ/BetaJSFC7?=
 =?us-ascii?q?QtSpGz0xT9Qxw8MQbEZ5AdmtkhfD3y+yCb8Pi7OLHIA08r7b33XpJMZy0XDG2L?=
 =?us-ascii?q?Mlj1knWMRPM2Kmi7V79wjSAY7JjkqYm7yrdaQawC7C6mODwXCSs0FfVQ56Sb/F?=
 =?us-ascii?q?UmwHZkvKsdT54VvPQKK0BrQ5LARN086CJbFMat3yk1pGQvDvONDdY2K0n2e9Hh?=
 =?us-ascii?q?KIxrKKbIr3dGQRxiTdCE4Ykw8N+XaKLxQxBiCko2jGFjxhCUrvY1/w8el5sH60?=
 =?us-ascii?q?U1U7zx+UYEF717q64BgVheeCRPMVxb8EvCYhqzNpHFeyxd7WCtyApxZ/c6VYe9?=
 =?us-ascii?q?8y/FBH1WfBvQxnIpOgN7xihkIZcwlvo0Pu1hB3CoJckcgqrHIm1hZyJbif0FNb?=
 =?us-ascii?q?czOY3JbwOrLMJ2n2/RCvbbPW217E3NaX/KcP9Oo3q1H5sA61EUoi9m1t08NJ3H?=
 =?us-ascii?q?uE+pXKEA0SXIrrXUYz6Rd7qK/VYykn64zPyH1jLLO7sjnB29IuGuso0RKgf9ZZ?=
 =?us-ascii?q?MKOZGw7+CcwaB86yKOM0n1ildA4LPOdX9KQsJcOpa+OG2LK3POZnhD+njXlH7J?=
 =?us-ascii?q?ph3U6W9it8SvTH35AKw/yD2guHVjH8jEqus8ztmIBEYy0SEXS7yST+GIFRYahy?=
 =?us-ascii?q?d54RCWiyO8232sl+h5n1Vn5C9V6sG0kJ2NW0dhqVdVD92xNf1V4WoXC+hSS31T?=
 =?us-ascii?q?h0nCw3oaqF2yzOxf/vdB4GOm5NWWljgk3gIYmyj9AGQkeoaxIlmwei5Ub/36Jb?=
 =?us-ascii?q?vrhwL3HPQUdUeCj7N2FjUqqquruCecJP844osSNMXeS4YFCaTKP9ohQA3yPiGW?=
 =?us-ascii?q?te2C40dzWwtprlmBx6jXqXLGxvo3rBZcFw2RDf6cTeRfFLxDoGRyp4iT7NClin?=
 =?us-ascii?q?Jdap/taUl5bFsu+gUWKsTZlTcSjtzYOduyq3/2xqARujn/+tnt3rCxQ10Sj+19?=
 =?us-ascii?q?NyTyXHsA78YpX316S9Ke9mflNnBFjm58p4G4F+lJA9hJUR2Xgcm5WU8mALkWb1?=
 =?us-ascii?q?MdVHx63+aGABSiIMw97Q+ALlwlFsLmqVx4LlUXWQ2shhaMO7Ym8M2iI98tpFCK?=
 =?us-ascii?q?Gb7LFfmSt1o1y4rR/eYPRnnzcdz+cu52Aeg+0TpAUtySCdCKgIHUZEJSzsiwiI?=
 =?us-ascii?q?79emoaVSZWavcqK/2FBwnN+/F7GCvh9TWGzidZg8By9w4d5yMFbN0H3194Hld8?=
 =?us-ascii?q?PcbdMVth2IjRjAi/JZJ442lvoPnSBnI37yvWU5y+4nihxjxY26vI+CK2l3/aO2?=
 =?us-ascii?q?GBhYNiDuZ8MI+zHglqJenseQ34CyEZRtADQLXJ30Tf22FDIer+joNwGLEDcksH?=
 =?us-ascii?q?eUBaLfHROD6Edht3/ACIqkN3aTJHkE19liQASdKVdbgAAVWjU6g5E4GhqrxMzn?=
 =?us-ascii?q?bEd2+DQR6kTkpRtLz+JiLwP/XXvHpAe0djc0T4CSLBhM4QFH+UjVKtaS7v5pEy?=
 =?us-ascii?q?Fb452hrxGNKmqBaARTFmwJXk2EB1b+Prih/9XA8u6YBvagIPvKe7mBteteV/KQ?=
 =?us-ascii?q?z5K1zoRm5yqMNtmIPnR6D/w73VdDXWlkG8vDnTUDUTcXlyXLb86Uvxq8/ix3rs?=
 =?us-ascii?q?ai8PXkQg7v5I2PC6dMPtVr4Ry5naCDN+uIjiZjNTlYzo8MxWPPyLUH3F4dlSBu?=
 =?us-ascii?q?dzquEbQBryLNT7jQmqhYDxEFcSNzKdBI4rk43glMP87bl9z02qR5jv4zF1dKS1?=
 =?us-ascii?q?jhltu1aswNJmG3LEnHC1qTNLSaOT3LxNn6brmhSbJLluVbqR2xtSyfE0/iJTmD?=
 =?us-ascii?q?kzjpVxayMeBDli2bPRpeuJ2jfRZpE2TsUNXmahijOt9tkTI22aE0hm/NNWMELT?=
 =?us-ascii?q?h8ckZNoqeM4i9Cnvp/G3JO7nx+IOmAmiaZ6fTYK5kMvftqBCR0i/xV4HAgx7RJ?=
 =?us-ascii?q?6yFEQeR/mDHOod52v1Gmju6PxyJnURVUrDZLgYOLvUN6NqTY9plPQ3DE/B0W4G?=
 =?us-ascii?q?WUChQKocZlC9L1t6BRzNjPiLz8KDNY/93I+sscApucFMXSH2AsPlLKAjndDE4l?=
 =?us-ascii?q?RCS3MGjZzxhSivyd9X29qpk8t4jin4cIRrZHVVszUPQABRIhVP4DOpY/ZTctm6?=
 =?us-ascii?q?/T2MwT4XO0vTHKWd5X+JvAU6TWSc/+ITDRprBfalNc26LxK4gYP5b280dicF5/?=
 =?us-ascii?q?nZnPXU3KUoYejDdma1oPvEhV8HV4Bkc0yk6tPhiy6ngCGda/ngQxjwpjZKIq7j?=
 =?us-ascii?q?i6sAR/HUbDuCZlyBp5ot7imz3ENWepdKo=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AUAAAt3v1bh0O0hNFcCBwBAQEEAQEHB?=
 =?us-ascii?q?AEBgVEHAQELAYEwgjsng3mIGI1wJRSSNYR3gXMSAQEYEwGEOwMCgxoiNAkNAQM?=
 =?us-ascii?q?BAQEBAQECARMBAQEIDQkIKSMMgjYkAYJiAQICAQECIAQZAQE3AQQBCQEBChoCJ?=
 =?us-ascii?q?gICAzEBBQEMEAYBCQkFgxyBeggBBJsDPIodcHwzgnYBAQWHOwgSeYsCF4F/gRE?=
 =?us-ascii?q?zgl+EXCWDBIJXjyJ3j3UJkTEYgVmFC4JuNocDLJdlBgIJBw8hgSWCDTMaCCgIe?=
 =?us-ascii?q?AUGVoFOghsMF4hehWAfMoECAwEBIROMIwEB?=
X-IPAS-Result: =?us-ascii?q?A0AUAAAt3v1bh0O0hNFcCBwBAQEEAQEHBAEBgVEHAQELAYE?=
 =?us-ascii?q?wgjsng3mIGI1wJRSSNYR3gXMSAQEYEwGEOwMCgxoiNAkNAQMBAQEBAQECARMBA?=
 =?us-ascii?q?QEIDQkIKSMMgjYkAYJiAQICAQECIAQZAQE3AQQBCQEBChoCJgICAzEBBQEMEAY?=
 =?us-ascii?q?BCQkFgxyBeggBBJsDPIodcHwzgnYBAQWHOwgSeYsCF4F/gREzgl+EXCWDBIJXj?=
 =?us-ascii?q?yJ3j3UJkTEYgVmFC4JuNocDLJdlBgIJBw8hgSWCDTMaCCgIeAUGVoFOghsMF4h?=
 =?us-ascii?q?ehWAfMoECAwEBIROMIwEB?=
X-IronPort-AV: E=Sophos;i="5.56,288,1539673200"; 
   d="scan'208";a="64277311"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 27 Nov 2018 16:20:15 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726731AbeK1LTr (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 28 Nov 2018 06:19:47 -0500
Received: from mail-pl1-f196.google.com ([209.85.214.196]:43204 "EHLO
        mail-pl1-f196.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726418AbeK1LTr (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 28 Nov 2018 06:19:47 -0500
Received: by mail-pl1-f196.google.com with SMTP id gn14so16445336plb.10
        for <linux-kernel@vger.kernel.org>; Tue, 27 Nov 2018 16:20:10 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=chromium.org; s=google;
        h=mime-version:content-transfer-encoding:to:from:in-reply-to:cc
         :references:message-id:user-agent:subject:date;
        bh=NHbSv6uT60CLENDAoNqJwNosmxG9BQF9K4orEElZrQw=;
        b=dK38a88zD71ixFYKRpIFgEA8hp50b9TsjiSzPOSfJs9T01eTJdzcqmhfhDAUc6V9FU
         0uCtpMp8UdcFpIZhahvJUDUS0rL6pO95sNRu5qchxDaELlaktdOboYklTaA6yraqn3eP
         Kz97N/FarSrASSSIBZYI/lURNSALrP7z+c1pg=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:content-transfer-encoding:to:from
         :in-reply-to:cc:references:message-id:user-agent:subject:date;
        bh=NHbSv6uT60CLENDAoNqJwNosmxG9BQF9K4orEElZrQw=;
        b=fB0lYpqCRSVT9sJ0JdHew+QyVh29RiCa+siSiakpRIHSaAw7W+3OtO9ZrPLOUtw+t8
         g1Upr0jGGKE62NJ+2Ad7yIUwrKD9mXZN1Ra68E4Esi9hB7z1xZUTir9w4EB3zQD3bI7F
         kLD0BoXwKBcSqnVQRhMd2B4I0epeJ6rQydaGnjdIKLII/AvIjPheHlhlbSQRlakx42ZO
         fkWhvgHs3rxsv6zuSvt8TFw17SAAyRn14pJrITJ+ps+/BNsUno9JP0gToKMca5nDbdKI
         eMw/kuylwEjiyPM0IeOf6hfksB0/AdcOWgw4+RhyhprCpWvqudevrd154+G8oBeVT7Rd
         P6hQ==
X-Gm-Message-State: AA+aEWb8mKwBvxixYkdM8OsBuEAch+YjA40IW+g9F4hsI8GV/LVk8WsS
        Ter3E6wefrqWz0mpbRR6OujaqQ==
X-Google-Smtp-Source: AFSGD/UCsLUK7ZJ2L8E8ZXdVqlYSZmVi0AsV2P7nOZ6CU4jdfwFzEAaC15Sbl80P4IRNWIUjLZziAQ==
X-Received: by 2002:a17:902:b903:: with SMTP id bf3mr34005730plb.289.1543364410097;
        Tue, 27 Nov 2018 16:20:10 -0800 (PST)
Received: from localhost ([2620:15c:202:1:fed3:9637:a13a:6c15])
        by smtp.gmail.com with ESMTPSA id 125sm1188870pfg.39.2018.11.27.16.20.09
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Tue, 27 Nov 2018 16:20:09 -0800 (PST)
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: quoted-printable
To: Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        Jiri Slaby <jslaby@suse.com>,
        Ryan Case <ryandcase@chromium.org>
From: Stephen Boyd <swboyd@chromium.org>
In-Reply-To: <20181127022536.104663-1-ryandcase@chromium.org>
Cc: Evan Green <evgreen@chromium.org>,
        Doug Anderson <dianders@chromium.org>,
        linux-kernel@vger.kernel.org, linux-serial@vger.kernel.org,
        Ryan Case <ryandcase@chromium.org>
References: <20181127022536.104663-1-ryandcase@chromium.org>
Message-ID: <154336440880.88331.11610393939844825622@swboyd.mtv.corp.google.com>
User-Agent: alot/0.7
Subject: Re: [PATCH] tty: serial: qcom_geni_serial: Fix softlock
Date: Tue, 27 Nov 2018 16:20:08 -0800
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Quoting Ryan Case (2018-11-26 18:25:36)
> Transfers were being divided into device FIFO sized (64 byte max)
> operations which would poll for completion within a spin_lock_irqsave /
> spin_unlock_irqrestore block. This both made things slow by waiting for
> the FIFO to completely drain before adding further data and would also
> result in softlocks on large transmissions.
> =

> This patch allows larger transfers with continuous FIFO additions as
> space becomes available and removes polling from the interrupt handler.
> =

> Signed-off-by: Ryan Case <ryandcase@chromium.org>
> Version: 1

I've never seen a Version tag before. Did you manually add this?

> diff --git a/drivers/tty/serial/qcom_geni_serial.c b/drivers/tty/serial/q=
com_geni_serial.c
> index 7ded51081add..835a184e0b7d 100644
> --- a/drivers/tty/serial/qcom_geni_serial.c
> +++ b/drivers/tty/serial/qcom_geni_serial.c
> @@ -117,6 +117,8 @@ struct qcom_geni_serial_port {
>         u32 *rx_fifo;
>         u32 loopback;
>         bool brk;
> +
> +       u32 cur_tx_remaining;

Nitpick: Can it just be tx_remaining? And why u32? Why not unsigned int?

>  };
>  =

>  static const struct uart_ops qcom_geni_console_pops;
> @@ -439,6 +441,7 @@ static void qcom_geni_serial_console_write(struct con=
sole *co, const char *s,
>         struct qcom_geni_serial_port *port;
>         bool locked =3D true;
>         unsigned long flags;
> +       unsigned int geni_status;

Nitpick: Use u32 for register reads.

>  =

>         WARN_ON(co->index < 0 || co->index >=3D GENI_UART_CONS_PORTS);
>  =

> @@ -465,9 +470,17 @@ static void qcom_geni_serial_console_write(struct co=
nsole *co, const char *s,
>                 }
>                 writel_relaxed(M_CMD_CANCEL_EN, uport->membase +
>                                                         SE_GENI_M_IRQ_CLE=
AR);
> -       }
> +       } else if ((geni_status & M_GENI_CMD_ACTIVE) && !port->cur_tx_rem=
aining)
> +               /* It seems we can interrupt existing transfers unless al=
l data

Nitpick: Have /* on a line by itself

Is this comment supposed to say "we can't interrupt existing transfers"?

> +                * has been sent, in which case we need to look for done =
first.
> +                */
> +               qcom_geni_serial_poll_tx_done(uport);

Another nitpick: Please put braces around multi-line if branches for
greater code clarity.

>  =

>         __qcom_geni_serial_console_write(uport, s, count);
> +
> +       if (port->cur_tx_remaining)
> +               qcom_geni_serial_setup_tx(uport, port->cur_tx_remaining);

Does this happen? Is the console being used as a tty at the same time?

> +
>         if (locked)
>                 spin_unlock_irqrestore(&uport->lock, flags);
>  }
> @@ -701,40 +714,47 @@ static void qcom_geni_serial_handle_rx(struct uart_=
port *uport, bool drop)
>         port->handle_rx(uport, total_bytes, drop);
>  }
>  =

> -static void qcom_geni_serial_handle_tx(struct uart_port *uport)
> +static void qcom_geni_serial_handle_tx(struct uart_port *uport, bool don=
e,
> +               bool active)
>  {
>         struct qcom_geni_serial_port *port =3D to_dev_port(uport, uport);
>         struct circ_buf *xmit =3D &uport->state->xmit;
>         size_t avail;
>         size_t remaining;
> +       size_t pending;
>         int i;
>         u32 status;
>         unsigned int chunk;
>         int tail;
> -       u32 irq_en;
>  =

> -       chunk =3D uart_circ_chars_pending(xmit);
>         status =3D readl_relaxed(uport->membase + SE_GENI_TX_FIFO_STATUS);
> -       /* Both FIFO and framework buffer are drained */
> -       if (!chunk && !status) {
> +
> +       /* Complete the current tx command before taking newly added data=
 */
> +       if (active)
> +               pending =3D port->cur_tx_remaining;
> +       else
> +               pending =3D uart_circ_chars_pending(xmit);
> +
> +       /* All data has been transmitted and acknowledged as received */
> +       if (!pending && !status && done) {

Nitpick: status is a poor variable name to test here. I don't understand
what this line is doing. Maybe it would help to have another local
variable like 'needs_attention'?

>                 qcom_geni_serial_stop_tx(uport);
>                 goto out_write_wakeup;
>         }
>  =

> -       if (!uart_console(uport)) {
> -               irq_en =3D readl_relaxed(uport->membase + SE_GENI_M_IRQ_E=
N);
> -               irq_en &=3D ~(M_TX_FIFO_WATERMARK_EN);
> -               writel_relaxed(0, uport->membase + SE_GENI_TX_WATERMARK_R=
EG);
> -               writel_relaxed(irq_en, uport->membase + SE_GENI_M_IRQ_EN);
> -       }
> +       avail =3D port->tx_fifo_depth - (status & TX_FIFO_WC);
> +       avail *=3D port->tx_bytes_pw;
> +       if (avail < 0)
> +               avail =3D 0;

How can 'avail' be less than 0? It's size_t which is unsigned? If
underflow is happening from that subtraction or overflow from the
multiply that could be bad but I hope that is impossible.

>  =

> -       avail =3D (port->tx_fifo_depth - port->tx_wm) * port->tx_bytes_pw;
>         tail =3D xmit->tail;
> -       chunk =3D min3((size_t)chunk, (size_t)(UART_XMIT_SIZE - tail), av=
ail);
> +       chunk =3D min3((size_t)pending, (size_t)(UART_XMIT_SIZE - tail), =
avail);

Nitpick: If we made 'avail' unsigned int would we be able to drop the
casts on this min3() call? This line is quite hard to read.

>         if (!chunk)
>                 goto out_write_wakeup;
>  =

> -       qcom_geni_serial_setup_tx(uport, chunk);
> +       if (!port->cur_tx_remaining) {
> +               qcom_geni_serial_setup_tx(uport, pending);
> +               port->cur_tx_remaining =3D pending;
> +       }
>  =

>         remaining =3D chunk;
>         for (i =3D 0; i < chunk; ) {
> @@ -767,6 +786,7 @@ static irqreturn_t qcom_geni_serial_isr(int isr, void=
 *dev)
>  {
>         unsigned int m_irq_status;
>         unsigned int s_irq_status;
> +       unsigned int geni_status;

Nitpick: I guess this driver isn't using u32 for registers already.
Would be nice to mop this up in another patch.

>         struct uart_port *uport =3D dev;
>         unsigned long flags;
>         unsigned int m_irq_en;
>=20
