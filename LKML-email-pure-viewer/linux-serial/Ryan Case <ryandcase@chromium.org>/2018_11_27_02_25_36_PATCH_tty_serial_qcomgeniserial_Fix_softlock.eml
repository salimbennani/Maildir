Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 27 Nov 2018 12:18:42 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 779C7580322;
	Mon, 26 Nov 2018 18:29:28 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 26 Nov 2018 18:29:28 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Auv2Rmh12tN5HdXbQsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segTKfvxwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJBUMhPSiJPDICy?=
 =?us-ascii?q?YYwAAOQOJuZYt4vwqkASoRa9HwSgGPnixiNUinLwwKY00/4hEQbD3AE4A9wPsG?=
 =?us-ascii?q?7brNPoP6oMS++117fHxijEYvNM2Tby8o7IfQ09rv6WRrJ/b9HcxlUvFwPfiVWQ?=
 =?us-ascii?q?rI3lPy6Q1ugXtGib9eVgWPuphmU6qA9xuiCiytkwhoTNnI4Z117J+TtjzIooJt?=
 =?us-ascii?q?C0VFR3bN+mHZdIqS2XNpV6Tt8nTm11uCs11rgLtYCncCQUzZkr2QLTZ+GCfoeW?=
 =?us-ascii?q?/x3vSfqeLDJ2iX14Zb6wmxO//Ey9xeD4SMW51VJHoy5ZndbXsH0Gygbd5dKdSv?=
 =?us-ascii?q?Rn+0eswTaP2B7X6uFDOU00i6XbJIA7wrIqlZocr17DHinol0XylqOWcV8k+uew?=
 =?us-ascii?q?5+TmZLXpuIOcOpdqhg3iNqkigNGzDOomPgQUQmSW+viw2Kfi8ED7WLlKi+c5kq?=
 =?us-ascii?q?jdsJDUP8Qboau5DhdR0oYi7Ra/Ejin3M0bnXYZNlJFfgyIj4zwN1HJLvH4C+mw?=
 =?us-ascii?q?g063nTd1yPDJIKfhDo/OLnfdirfhe6hy60pGxAo019Bf6IpYCqsdL/LrRk/xqN?=
 =?us-ascii?q?vYAwc9Mwy1wOboFs9x14wDWW+UBq+ZMaXSsUKH5+41IumMYpMVtyj5K/Q/+/Hu?=
 =?us-ascii?q?ino5k0cHfaa1xZsXdGy4HvN+LkWZe3Xsg8sBHn0NvgYkTOzqlUeNUThcZ3upW6?=
 =?us-ascii?q?I85zc7CJ+pDIvZR4CthqCB0zm/HpFMem9GDVWMG2/yd4qYQ/cMdD6SIsh5nzwG?=
 =?us-ascii?q?UriuVZUt1RKptA/8zbpnKfHZ+ikZtZLlydh06PfflRA09TxoEcud13uBQH1znm?=
 =?us-ascii?q?MNXzU2xrxwoVRhylef1qh1m+ZXFcdT5/NOUQc2L4TcwPZ4C93pXgLBf9GJSEup?=
 =?us-ascii?q?Q9m8ADExSM4xzMEKY0pnB9qiiRXD1TKwA7AJj7yLGIA08qXE0njyPcl9zWzK1K?=
 =?us-ascii?q?0gj1Y8RMtPOnarhqp+9wjVGo7InF+Vl6esdaQAwiHN8H2PwnaJvEFdSARwS7nK?=
 =?us-ascii?q?XWgDZkvKqtT0/l7NQKWwCbs5KAdBydSNKq1RatL3i1VKQ/PjONfbY2K1gGqwAR?=
 =?us-ascii?q?eIxrWRbIvlYWkd3SPdCFQanAAX53qJKQ8+BiK5qWLEEDNuDU7vY1/r8eRmtXy0?=
 =?us-ascii?q?VFE0wB+QY01hzbW1/AUViuKaS/4I2rIEuSEhqyh7HVqn3tLWDcaAqBRlfKlGfd?=
 =?us-ascii?q?w951JH33rDtwNhJpygM7xihlkGfgRrvkPu0hJ3CplAkckqtn8q0BB+KaWC0FNF?=
 =?us-ascii?q?djOY25/wN6bTKmnz+hCvdqHX1kvf0NaQ5qcA9vA4p0//swGuE0oo629n3MVN03?=
 =?us-ascii?q?uA+pXKCxIfXoj1Ukkp+Bl1ubHbbjMm6IPJyHJjK6+0sjzF29I3H+Ylzhegf9FC?=
 =?us-ascii?q?MKKLDgPyEssaB9SwJ+wugVSmchUEPOVK/q4uI8ymb+eG2LKsPOt4nDOmkH5L75?=
 =?us-ascii?q?xn3kON9ypzUOjI35kezvGc3wuHUSr8jVi7vsD2n4BEeS8dHm6lxSf4A45RY7V4?=
 =?us-ascii?q?fZwXBme2P8232tJ+iob3W35Z6FGsHUkG19KueRaIaVzywxdQ1UUOrXO7gyS4yy?=
 =?us-ascii?q?F7nC8zrqqY2izD2ODidBsBOm5WS2hul1bsIY6oj98EWEikdRQmlByg5Uzi3ahU?=
 =?us-ascii?q?uLx/L3XPQUdPZyX3L2BiXrGwt7aYeM5P9ZUovD5TUOS9Z1CaV7H8rwEb0yPlA2?=
 =?us-ascii?q?tR2jQ7eyu2tZX+mhxwkHidI2prrHrFZcFwwg/S5N7GSv5L3ToGRy54hSPMBlem?=
 =?us-ascii?q?PNmp/tSUl5HdveC4TG+hUpxTcS/2zYKPrie75GtqAQGhkPC3gNHoDQ860Srj3d?=
 =?us-ascii?q?lwSSrItAr8YpXs16miMeNoZE5oCEX+68p7HIFziY8whJAW2XgHiZSZ53sHkWHv?=
 =?us-ascii?q?MdpF3aLydmYCRTkOw9TN+gjqxFVjLm6Vx4L+TnidwdFuZ9igbmMWxyIy9cZKCK?=
 =?us-ascii?q?iP4bxAnCt1pEe4rA3Lbfh8mDcd1eUh6HoAj+4Vvwotyz2XAqoOEklAISzsixOI?=
 =?us-ascii?q?4si7rKVWZ2aga6K81URgktC6ELGNvBtcV23ndZc4Ei999cF/MFPK0H3u5YDoYt?=
 =?us-ascii?q?jQbdQPthKKlxfMlfRaKJU0lvASnypoJXr9vWE5y+48lRFuwZa6vI2dJ2Rs5q25?=
 =?us-ascii?q?BANYNibuZ8MS4TztiadensCL34GgBJlhGzMLXIf2QvKsCj4dqfPnNwOWGj0mtn?=
 =?us-ascii?q?ibAabfHROY6Ep+tH3ACZerN3WKJHUDydViWQKQJEhegAASQTU7kYQ1FgGsxMz9?=
 =?us-ascii?q?bkh54iod6UL/qhtJ0uhoLQXwUn/DpAe0bTc5UJqfIwBT7g5c/EfZK9Ce4vhwHy?=
 =?us-ascii?q?FF/Z2hsQqNJXaAZwlTCWEJW0qEB03sP7W05NnA9fSYCfS6L/fUfbqOruleXe+S?=
 =?us-ascii?q?xZ2zyotm4yqMNsKXM3hiCP07x1NDXW1jFMTfgTkPUCsXlyTCb8OAoBe8+yt3rt?=
 =?us-ascii?q?2w8fjxWQLv45ePBKVWMdl15x+2hqKDPfaKhCllMTZYyo8MxXjQxbgfwlESiiJu?=
 =?us-ascii?q?dzqsEbgati7NVqXQmqBJAB4BdiNzL9BF76Y93glLJM7ahcn51r9+jv4pFVhFUU?=
 =?us-ascii?q?btld2uZcwPO2u9Lk/IBF6XNLSaIj3G29v4Yb6nRr1KkupVtwe8uTKaE0L4OjSD?=
 =?us-ascii?q?lj/pVw2gMO1WjSGbOgBet5+5chp3FWfjS9fmYAWhMNBrlT023aE0hnTSOG4AMD?=
 =?us-ascii?q?h8dllBoaGK4SxEgvVwBWpB42FhLemFnSaZ8ubZJowXsfttHiR7ieZa7G4mxLtS?=
 =?us-ascii?q?6SFOXOZ1lzfKrt5yv1GmlfGCyzp9XxpIrzZLhYSLsl1jOKXZ7JZAX3nE8QkJ7W?=
 =?us-ascii?q?WRDRQKutRkBsfuu6BW1tjAiqbzJC1e/NLT+MtPT/TTfe2dPXVpEgDuET6RLAIf?=
 =?us-ascii?q?UTuiMymLiFZQn/KS3nmUqIUqpJ/xnpYHVr5cUhoyDPxMTgxHHcYDaKxzVzk12e?=
 =?us-ascii?q?qZl8oB72uWtwTKSYNRuZWRBdyIBvC6EieQi/FvbgAFiefiPI0VOobywEFKYVlg?=
 =?us-ascii?q?m4HLBk+WWspC9H4yJjQoqVlApSAtBlY43FjoP0b0uCce?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0APAABFq/xbh0O0hNFbCBwBAQEEAQEHB?=
 =?us-ascii?q?AEBgVEHAQELAYEwgjsnjBGOJZIxhHeBcxIBARgTAYhjIjQJDQEDAQEBAQEBAgE?=
 =?us-ascii?q?TAQEBCA0JCCkjDII2JAGCaQIkCwENAQE3AQUJAlADMQEFASIBCQkFgxyCAgEEm?=
 =?us-ascii?q?hY8ih2BbDOCdgEBBYcqCBKHTIMPgRwXgX+BEYdrhgCQEo90CYIgjwQjiVGHNgE?=
 =?us-ascii?q?sl14CBAIEBQIFDyGBJYINMxowgy+CGwwXiF6FXx8ygQUBAY0WAQE?=
X-IPAS-Result: =?us-ascii?q?A0APAABFq/xbh0O0hNFbCBwBAQEEAQEHBAEBgVEHAQELAYE?=
 =?us-ascii?q?wgjsnjBGOJZIxhHeBcxIBARgTAYhjIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjD?=
 =?us-ascii?q?II2JAGCaQIkCwENAQE3AQUJAlADMQEFASIBCQkFgxyCAgEEmhY8ih2BbDOCdgE?=
 =?us-ascii?q?BBYcqCBKHTIMPgRwXgX+BEYdrhgCQEo90CYIgjwQjiVGHNgEsl14CBAIEBQIFD?=
 =?us-ascii?q?yGBJYINMxowgy+CGwwXiF6FXx8ygQUBAY0WAQE?=
X-IronPort-AV: E=Sophos;i="5.56,285,1539673200"; 
   d="scan'208";a="42387640"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 26 Nov 2018 18:29:26 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728294AbeK0NWj (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 27 Nov 2018 08:22:39 -0500
Received: from mail-pg1-f193.google.com ([209.85.215.193]:42140 "EHLO
        mail-pg1-f193.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727625AbeK0NWj (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 27 Nov 2018 08:22:39 -0500
Received: by mail-pg1-f193.google.com with SMTP id d72so7085346pga.9
        for <linux-kernel@vger.kernel.org>; Mon, 26 Nov 2018 18:26:22 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=chromium.org; s=google;
        h=from:to:cc:subject:date:message-id:mime-version
         :content-transfer-encoding;
        bh=3tWnW018yD6aR84G7V1HqSVMtcAZ4/rrVG+DwsV5Rrc=;
        b=dGVudpIsNXv/rIzsilx/Ih0yJLDvvjJ+4OeSkqRtVm5ZfbtfyGaD7Ub7c6hyOEGg9g
         SyDdACtJWgfkbRAMySc06Ee1oqgMV8m/JkPDcekwZvgIaKHQEIwVA8W72SY3W4jZmZP7
         0rwP3S2ebYHKZEOsF53unU6HiuttsB+sLIFlE=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:mime-version
         :content-transfer-encoding;
        bh=3tWnW018yD6aR84G7V1HqSVMtcAZ4/rrVG+DwsV5Rrc=;
        b=ossD8VjNdiwE9WHTI6DiHSygaB/wRwL4/ph+EQfdPVueWbWfkCUvyTDuxt3iHPGpsg
         uM0g09Q7dGBPDWQWAlgta9vwTULyNWBOk/O0FlcFHpS9yoSXV3YcJIjvEdroirbYIWCp
         DmU9gVwJOELuEXkcUgs1AH3Y3AOGX8h81ZluWwoTSGfOxREbO/INAADDO4ZQhzu8/Zbc
         bnRk9OB4sUxU0ShsbzbIER1ekbNjO2d5d5Wb/D1MPmK8luvrQjpQPQfQQwDBpdrxFRCp
         mGN9DDdTy0IC3Vkij8bXb2dqe38c+p0WnPNjfINJnRWhJHAFyX1RsHOASAvZlkncU669
         pMWA==
X-Gm-Message-State: AA+aEWZBgwSHsgTVjkbVARROqmIxyTRjqyhMH9PbwmV/6iinyT9bTL3F
        JYczQvLXxpPQ4o62dtwyTknaaQ==
X-Google-Smtp-Source: AFSGD/Vay8h2q2J7+g2Yk1OTSFrGNtOfGNa9h49fGhb5VOq3LhD7qnOcz0Xsz8l9AIBloJqP03pYRw==
X-Received: by 2002:a63:fc05:: with SMTP id j5mr27949000pgi.434.1543285582084;
        Mon, 26 Nov 2018 18:26:22 -0800 (PST)
Received: from ryandcase.mtv.corp.google.com ([2620:15c:202:201:ed1c:3d1c:9d92:99cb])
        by smtp.gmail.com with ESMTPSA id b185sm1898674pga.85.2018.11.26.18.26.21
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Mon, 26 Nov 2018 18:26:21 -0800 (PST)
From: Ryan Case <ryandcase@chromium.org>
To: Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        Jiri Slaby <jslaby@suse.com>
Cc: Evan Green <evgreen@chromium.org>,
        Doug Anderson <dianders@chromium.org>,
        linux-kernel@vger.kernel.org, linux-serial@vger.kernel.org,
        Ryan Case <ryandcase@chromium.org>
Subject: [PATCH] tty: serial: qcom_geni_serial: Fix softlock
Date: Mon, 26 Nov 2018 18:25:36 -0800
Message-Id: <20181127022536.104663-1-ryandcase@chromium.org>
X-Mailer: git-send-email 2.20.0.rc0.387.gc7a69e6b6c-goog
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Transfers were being divided into device FIFO sized (64 byte max)
operations which would poll for completion within a spin_lock_irqsave /
spin_unlock_irqrestore block. This both made things slow by waiting for
the FIFO to completely drain before adding further data and would also
result in softlocks on large transmissions.

This patch allows larger transfers with continuous FIFO additions as
space becomes available and removes polling from the interrupt handler.

Signed-off-by: Ryan Case <ryandcase@chromium.org>
Version: 1
---

 drivers/tty/serial/qcom_geni_serial.c | 58 ++++++++++++++++++---------
 1 file changed, 40 insertions(+), 18 deletions(-)

diff --git a/drivers/tty/serial/qcom_geni_serial.c b/drivers/tty/serial/qcom_geni_serial.c
index 7ded51081add..835a184e0b7d 100644
--- a/drivers/tty/serial/qcom_geni_serial.c
+++ b/drivers/tty/serial/qcom_geni_serial.c
@@ -117,6 +117,8 @@ struct qcom_geni_serial_port {
 	u32 *rx_fifo;
 	u32 loopback;
 	bool brk;
+
+	u32 cur_tx_remaining;
 };
 
 static const struct uart_ops qcom_geni_console_pops;
@@ -439,6 +441,7 @@ static void qcom_geni_serial_console_write(struct console *co, const char *s,
 	struct qcom_geni_serial_port *port;
 	bool locked = true;
 	unsigned long flags;
+	unsigned int geni_status;
 
 	WARN_ON(co->index < 0 || co->index >= GENI_UART_CONS_PORTS);
 
@@ -452,6 +455,8 @@ static void qcom_geni_serial_console_write(struct console *co, const char *s,
 	else
 		spin_lock_irqsave(&uport->lock, flags);
 
+	geni_status = readl_relaxed(uport->membase + SE_GENI_STATUS);
+
 	/* Cancel the current write to log the fault */
 	if (!locked) {
 		geni_se_cancel_m_cmd(&port->se);
@@ -465,9 +470,17 @@ static void qcom_geni_serial_console_write(struct console *co, const char *s,
 		}
 		writel_relaxed(M_CMD_CANCEL_EN, uport->membase +
 							SE_GENI_M_IRQ_CLEAR);
-	}
+	} else if ((geni_status & M_GENI_CMD_ACTIVE) && !port->cur_tx_remaining)
+		/* It seems we can interrupt existing transfers unless all data
+		 * has been sent, in which case we need to look for done first.
+		 */
+		qcom_geni_serial_poll_tx_done(uport);
 
 	__qcom_geni_serial_console_write(uport, s, count);
+
+	if (port->cur_tx_remaining)
+		qcom_geni_serial_setup_tx(uport, port->cur_tx_remaining);
+
 	if (locked)
 		spin_unlock_irqrestore(&uport->lock, flags);
 }
@@ -701,40 +714,47 @@ static void qcom_geni_serial_handle_rx(struct uart_port *uport, bool drop)
 	port->handle_rx(uport, total_bytes, drop);
 }
 
-static void qcom_geni_serial_handle_tx(struct uart_port *uport)
+static void qcom_geni_serial_handle_tx(struct uart_port *uport, bool done,
+		bool active)
 {
 	struct qcom_geni_serial_port *port = to_dev_port(uport, uport);
 	struct circ_buf *xmit = &uport->state->xmit;
 	size_t avail;
 	size_t remaining;
+	size_t pending;
 	int i;
 	u32 status;
 	unsigned int chunk;
 	int tail;
-	u32 irq_en;
 
-	chunk = uart_circ_chars_pending(xmit);
 	status = readl_relaxed(uport->membase + SE_GENI_TX_FIFO_STATUS);
-	/* Both FIFO and framework buffer are drained */
-	if (!chunk && !status) {
+
+	/* Complete the current tx command before taking newly added data */
+	if (active)
+		pending = port->cur_tx_remaining;
+	else
+		pending = uart_circ_chars_pending(xmit);
+
+	/* All data has been transmitted and acknowledged as received */
+	if (!pending && !status && done) {
 		qcom_geni_serial_stop_tx(uport);
 		goto out_write_wakeup;
 	}
 
-	if (!uart_console(uport)) {
-		irq_en = readl_relaxed(uport->membase + SE_GENI_M_IRQ_EN);
-		irq_en &= ~(M_TX_FIFO_WATERMARK_EN);
-		writel_relaxed(0, uport->membase + SE_GENI_TX_WATERMARK_REG);
-		writel_relaxed(irq_en, uport->membase + SE_GENI_M_IRQ_EN);
-	}
+	avail = port->tx_fifo_depth - (status & TX_FIFO_WC);
+	avail *= port->tx_bytes_pw;
+	if (avail < 0)
+		avail = 0;
 
-	avail = (port->tx_fifo_depth - port->tx_wm) * port->tx_bytes_pw;
 	tail = xmit->tail;
-	chunk = min3((size_t)chunk, (size_t)(UART_XMIT_SIZE - tail), avail);
+	chunk = min3((size_t)pending, (size_t)(UART_XMIT_SIZE - tail), avail);
 	if (!chunk)
 		goto out_write_wakeup;
 
-	qcom_geni_serial_setup_tx(uport, chunk);
+	if (!port->cur_tx_remaining) {
+		qcom_geni_serial_setup_tx(uport, pending);
+		port->cur_tx_remaining = pending;
+	}
 
 	remaining = chunk;
 	for (i = 0; i < chunk; ) {
@@ -753,11 +773,10 @@ static void qcom_geni_serial_handle_tx(struct uart_port *uport)
 		tail += tx_bytes;
 		uport->icount.tx += tx_bytes;
 		remaining -= tx_bytes;
+		port->cur_tx_remaining -= tx_bytes;
 	}
 
 	xmit->tail = tail & (UART_XMIT_SIZE - 1);
-	if (uart_console(uport))
-		qcom_geni_serial_poll_tx_done(uport);
 out_write_wakeup:
 	if (uart_circ_chars_pending(xmit) < WAKEUP_CHARS)
 		uart_write_wakeup(uport);
@@ -767,6 +786,7 @@ static irqreturn_t qcom_geni_serial_isr(int isr, void *dev)
 {
 	unsigned int m_irq_status;
 	unsigned int s_irq_status;
+	unsigned int geni_status;
 	struct uart_port *uport = dev;
 	unsigned long flags;
 	unsigned int m_irq_en;
@@ -780,6 +800,7 @@ static irqreturn_t qcom_geni_serial_isr(int isr, void *dev)
 	spin_lock_irqsave(&uport->lock, flags);
 	m_irq_status = readl_relaxed(uport->membase + SE_GENI_M_IRQ_STATUS);
 	s_irq_status = readl_relaxed(uport->membase + SE_GENI_S_IRQ_STATUS);
+	geni_status = readl_relaxed(uport->membase + SE_GENI_STATUS);
 	m_irq_en = readl_relaxed(uport->membase + SE_GENI_M_IRQ_EN);
 	writel_relaxed(m_irq_status, uport->membase + SE_GENI_M_IRQ_CLEAR);
 	writel_relaxed(s_irq_status, uport->membase + SE_GENI_S_IRQ_CLEAR);
@@ -794,7 +815,8 @@ static irqreturn_t qcom_geni_serial_isr(int isr, void *dev)
 
 	if (m_irq_status & (M_TX_FIFO_WATERMARK_EN | M_CMD_DONE_EN) &&
 	    m_irq_en & (M_TX_FIFO_WATERMARK_EN | M_CMD_DONE_EN))
-		qcom_geni_serial_handle_tx(uport);
+		qcom_geni_serial_handle_tx(uport, m_irq_status & M_CMD_DONE_EN,
+					geni_status & M_GENI_CMD_ACTIVE);
 
 	if (s_irq_status & S_GP_IRQ_0_EN || s_irq_status & S_GP_IRQ_1_EN) {
 		if (s_irq_status & S_GP_IRQ_0_EN)
-- 
2.20.0.rc0.387.gc7a69e6b6c-goog

