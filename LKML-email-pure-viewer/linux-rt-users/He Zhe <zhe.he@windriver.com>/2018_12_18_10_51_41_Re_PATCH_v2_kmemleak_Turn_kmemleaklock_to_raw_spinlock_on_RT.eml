Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  18 Dec 2018 21:09:25 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 0A6DE5805F0;
	Tue, 18 Dec 2018 02:52:19 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by fmsmga002-1.fm.intel.com with ESMTP; 18 Dec 2018 02:52:17 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Ay3LZQRQKM2zLSIDwt7Hte4eGZtpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64YBWOt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KptVRTmij?=
 =?us-ascii?q?oINyQh/W/KlMJwgqJVrhGvqRNxzIHbYp2aOvV/fqPGZdMXR3FMXtpSWiFbHo+w?=
 =?us-ascii?q?c4UCAugHMO1Fr4f9vVwOrR6mCAeuGuzk1zxHhn/o0qYn1OkgEAHG0xI6E9IOrn?=
 =?us-ascii?q?vZt9v0NKYUUe+o1qnIzCvDYO1M2Tvn9IfIdRUhrOiKULltcsTR0VEiGx3ZgliU?=
 =?us-ascii?q?s4DpIj2Y2voXv2SG7OdsSfijhm8lpg1pvzSj2MQhhpPXio4LxV3I7zh1zYcrKd?=
 =?us-ascii?q?GiVUJ2YMCoHZ1NvC+ALYR2WNktQ2RwtSY61LIGvZm7cTAUyJQo2RHfceaLc4uW?=
 =?us-ascii?q?7RL5UuaePzN4iGhieLKliBa+6UmgyuviWcmoyFtGsDZJn93WunwQ2RHf9NKLRu?=
 =?us-ascii?q?Z+80u9wzqC1gLe5vlBIU8ulKrbL5AhwqQ3lpoWqUnDGi72mEPrjK6Zb0kk+fan?=
 =?us-ascii?q?6/7hYrr4op+QLoh0iw/4MqswgMyyGvo4MgcQUGiB4+i816Ps/Vf/QLpUiv06iK?=
 =?us-ascii?q?7ZsIrVJcgDvK62HxdV0po/6xa4Fzqm1NUYnXoZI15fdxOHkpPkO1XPIPD+EPe+?=
 =?us-ascii?q?jE6gkDZtx/DaILLhBo/BIWTEkLfkZbx98VJTyBIvzdBD4JJZErEBL+jyWk/trt?=
 =?us-ascii?q?PYCQU1Mwypw+n9DtV92ZgTWWaOAq+fLaPTvkWE5uMpI+mQeoAVvCzxJOQi5/7r?=
 =?us-ascii?q?lXU5g0MSfbG13ZsLb3C1BvZmI0KHbnb2gdcBFmEKvgw5TOHxjF2CUDhTZ2u9Xq?=
 =?us-ascii?q?4m5zE7Dp6mApnHRoy3nLOB2yK7FIVMZm9aElCMDWvod4KcVvgWcyKSIshhkj8e?=
 =?us-ascii?q?Wbi7UYAh1wqjtAv7y7phM+rV9TcUtZPl1Nhp+eLTkQs++iBzD8SYy2uNVX17nn?=
 =?us-ascii?q?sURz8q26ByuU99xU2F0aRih/xYFMZc5/VGUgohMZ7czup6C839Ww7bf9eJTkqm?=
 =?us-ascii?q?TcuiAT0rUt0xxNoOaV5nG9q+lhDDwzaqA7gNmrOWHpM07LzT02LxJ8lnzXbGz7?=
 =?us-ascii?q?cuj18hTstLNm2mg6p/+hPXB47IlUWZiqmreb4d3C7L6GeM026OsFtEXw53VKXP?=
 =?us-ascii?q?RWofaVfOrdTl+kPCSKejBqk9PQtf18GOMKtKZcfvjVVdWvjjPs/TY2awm2e2GB?=
 =?us-ascii?q?aJyamAbIvse2UBwirdDFIInBwU/XaDLQI+HDuuo3rCDDxyElLie1/s8eh7qHO8?=
 =?us-ascii?q?Uk80zwGLY1d917av/R4Vn/icS/IV3rILoyohrzR0HFCg39PZEdaApgxhfLlCbt?=
 =?us-ascii?q?M5+ltIyWXZtwllNJy6M69inkIecxhwv072zRp3DptPkMc0o3Iq1gZ9Mr+Y305b?=
 =?us-ascii?q?eDOe3pDwPaPXJ3L2/BCuba7Wx17f3MyX+qcJ9PQ3tVHjsBu1GUol9nVty8NV3G?=
 =?us-ascii?q?eE5pXWEAoSVor8U0Yq9xRgu77WeCg854PO2n1qPqm5qTvC29MvBOs4xResZdZf?=
 =?us-ascii?q?MKWYFADsF80WHdShKOsvm1KxdBILIPhS9LIoP8Ohb/aGwq+rM/p6kzK8kGtH55?=
 =?us-ascii?q?px0kSS+CpmS+7ExooKzOuc3gSaSTj8llChssbslIBAZDESGHe/yCf+CI5QYK1y?=
 =?us-ascii?q?YZgECWO0L8KrwdV+gobnW2RE+167G1MGxMipdAKSblz8xwFR1V4boWe6mSu+1D?=
 =?us-ascii?q?F0lzAprqyC3C3B2ejidRwHOnJVS2lml1vjPY+0j9UCVkiycwcpjAel5Vr9x6VD?=
 =?us-ascii?q?pqRwNXPTQURLfyjxNW1iSbG/trmBY85O7pMnryNXXf+4YVCbTL79vhQb3zniH2?=
 =?us-ascii?q?tY2DA0aTWqto/lkBx9jWKXNGxzo2bBecFs2Rff48TRRP5L0ToBXiV4izjXBl6n?=
 =?us-ascii?q?Mtmt/NWUkYrDs++kW2KgUJ1TbTfkzYeauCSn4m1qBAW1n+qvld3/DQg6zSj72s?=
 =?us-ascii?q?FpVSrSrRbweInr17mgPuJhcUllH1v868t8GoFjnYo8npAQ2X4GhpqL+XoLi3v8?=
 =?us-ascii?q?MdJe2ajmdnoCWSYLw8LJ4AjiwEBjK3OJx4HjWXmHzMpuecK6Yn8I1SIn9M9FFr?=
 =?us-ascii?q?2U7LNfkCtxo1q4qx/RYPdnkjccz/su9GAVg+UTtAUxySWdB6gYHVNEMiz0ixSI?=
 =?us-ascii?q?89e+ob1LZGaodLi8zkt/ksqnDLGfuQFcQ3f5d4wmHS9x6MV/LV3N3Gfy6oHiZN?=
 =?us-ascii?q?nfc9YTugeInBfHiuhfMIgxmeYShSp7JWL9umUoxPUhghxp2ZG6oZKLK2Fw/K+i?=
 =?us-ascii?q?Bh5YNzv1Z94c+z33jKZemNqW0J6rHpl7BjoLW57oR+qyED0OrfTnKxqOEDokp3?=
 =?us-ascii?q?eZA7XfGBGQ6Fx8o3LTCZyrNGyXJHoEzdVkXhadP1dSgAQVXDU8g544GRqmxM3n?=
 =?us-ascii?q?cEdl+D8R4kT0pQdLyuJtLxP/SHvQpB+0ajcoT5iSNBpX7gZf50fMLMyR9ORzEz?=
 =?us-ascii?q?tD/p2mqgyNJXeWZwBJDWEPR0yFCErvPrio5dnc7eeYAvCyIOfJYbWLseZeTeuH?=
 =?us-ascii?q?xYqz0ot6+DaBLsWPMWdjD/042UpDXGp1G8fDmzUIRCwYiTjNb9OApBqn/i13r8?=
 =?us-ascii?q?a/8OnkWQ715IuPDadSPstr+xysnaiDMOuQjj5jKTlEzpMM2WPIyL8H0VEIliFh?=
 =?us-ascii?q?bCOtHqoAtCLXSKLQm7RaDxoaayN1KctJ4Lgw3ghLOc7HlNz10qR0geIyC1dATV?=
 =?us-ascii?q?bhgN2mZdQWI2GhM1PKHFqLNLWDJTHR3877e7+zSb1Og+VSrBCwvTebE0n+PjWM?=
 =?us-ascii?q?jTXpVhavMf1SgyGfJhBRpIa9chN1A2j5UN3mcgG7MMNwjTAuwbw7nHXKNWsdMT?=
 =?us-ascii?q?h6a0xMr72Q4jlegvVwAGFB6ntlLe+ZmyeW9eXYK5AWsed1DSRwje5V/HM6y74G?=
 =?us-ascii?q?pB1DEcd4kiLJst9npRmPlOWV2DdlGCFPpylKg5jD6U9jNqjQ7YhoXXfC4Q4X6m?=
 =?us-ascii?q?ORG1IGqo02JMfovvVwx5D9lK+7fCVC/pTU8OMDBs7YMsOZPWBnOh3sTm2HRDAZ?=
 =?us-ascii?q?RCKmYDmMz3dWl+ufoyWY?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A1AAAB0Rhch0O0hNFkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBZYNsMYNylBKBYC0UmUwBASsBh18iOBIBAwEBAQEBAQIBEwEBAQo?=
 =?us-ascii?q?LCQgpL4I2IoJkAQEBAQIBAQIgBAsBOwsGCQEBChgCAiYCAgNEEAYNAQcBAQGDH?=
 =?us-ascii?q?YF5CAWncnwzhUCEe4ELizSCFoE4gmuICYJXAos7hRSFP4sWBwKRWh5fiSiHUCy?=
 =?us-ascii?q?ZIAIRFIFdgXdNI1CCbYImF44qgWoBASGMMwGBGwMBAQ?=
X-IPAS-Result: =?us-ascii?q?A0A1AAAB0Rhch0O0hNFkGgEBAQEBAgEBAQEHAgEBAQGBZYN?=
 =?us-ascii?q?sMYNylBKBYC0UmUwBASsBh18iOBIBAwEBAQEBAQIBEwEBAQoLCQgpL4I2IoJkA?=
 =?us-ascii?q?QEBAQIBAQIgBAsBOwsGCQEBChgCAiYCAgNEEAYNAQcBAQGDHYF5CAWncnwzhUC?=
 =?us-ascii?q?Ee4ELizSCFoE4gmuICYJXAos7hRSFP4sWBwKRWh5fiSiHUCyZIAIRFIFdgXdNI?=
 =?us-ascii?q?1CCbYImF44qgWoBASGMMwGBGwMBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,367,1539673200"; 
   d="scan'208";a="44478933"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 18 Dec 2018 02:52:16 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726552AbeLRKwN (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 18 Dec 2018 05:52:13 -0500
Received: from mail1.windriver.com ([147.11.146.13]:59864 "EHLO
        mail1.windriver.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726364AbeLRKwN (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 18 Dec 2018 05:52:13 -0500
Received: from ALA-HCA.corp.ad.wrs.com ([147.11.189.40])
        by mail1.windriver.com (8.15.2/8.15.1) with ESMTPS id wBIApkIq018587
        (version=TLSv1 cipher=AES128-SHA bits=128 verify=FAIL);
        Tue, 18 Dec 2018 02:51:47 -0800 (PST)
Received: from [128.224.162.162] (128.224.162.162) by ALA-HCA.corp.ad.wrs.com
 (147.11.189.50) with Microsoft SMTP Server (TLS) id 14.3.408.0; Tue, 18 Dec
 2018 02:51:46 -0800
Subject: Re: [PATCH v2] kmemleak: Turn kmemleak_lock to raw spinlock on RT
To: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
CC: <catalin.marinas@arm.com>, <tglx@linutronix.de>,
        <rostedt@goodmis.org>, <linux-mm@kvack.org>,
        <linux-kernel@vger.kernel.org>, <linux-rt-users@vger.kernel.org>
References: <1542877459-144382-1-git-send-email-zhe.he@windriver.com>
 <20181123095314.hervxkxtqoixovro@linutronix.de>
 <40a63aa5-edb6-4673-b4cc-1bc10e7b3953@windriver.com>
 <20181130181956.eewrlaabtceekzyu@linutronix.de>
 <e7795912-7d93-8f4e-b997-67c4ac1f3549@windriver.com>
 <20181205191400.qrhim3m3ak5hcsuh@linutronix.de>
From: He Zhe <zhe.he@windriver.com>
Message-ID: <16ac893a-a080-18a5-e636-7b7668d978b0@windriver.com>
Date: Tue, 18 Dec 2018 18:51:41 +0800
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.2.1
MIME-Version: 1.0
In-Reply-To: <20181205191400.qrhim3m3ak5hcsuh@linutronix.de>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 8bit
Content-Language: en-US
X-Originating-IP: [128.224.162.162]
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org



On 2018/12/6 03:14, Sebastian Andrzej Siewior wrote:
> On 2018-12-05 21:53:37 [+0800], He Zhe wrote:
>> For call trace 1:
> â€¦
>> Since kmemleak would most likely be used to debug in environments where
>> we would not expect as great performance as without it, and kfree() has raw locks
>> in its main path and other debug function paths, I suppose it wouldn't hurt that
>> we change to raw locks.
> okay.
>
>>>> >From what I reached above, this is RT-only and happens on v4.18 and v4.19.
>>>>
>>>> The call trace above is caused by grabbing kmemleak_lock and then getting
>>>> scheduled and then re-grabbing kmemleak_lock. Using raw lock can also solve
>>>> this problem.
>>> But this is a reader / writer lock. And if I understand the other part
>>> of the thread then it needs multiple readers.
>> For call trace 2:
>>
>> I don't get what "it needs multiple readers" exactly means here.
>>
>> In this call trace, the kmemleak_lock is grabbed as write lock, and then scheduled
>> away, and then grabbed again as write lock from another path. It's a
>> write->write locking, compared to the discussion in the other part of the thread.
>>
>> This is essentially because kmemleak hooks on the very low level memory
>> allocation and free operations. After scheduled away, it can easily re-enter itself.
>> We need raw locks to prevent this from happening.
> With raw locks you wouldn't have multiple readers at the same time.
> Maybe you wouldn't have recursion but since you can't have multiple
> readers you would add lock contention where was none (because you could
> have two readers at the same time).

Sorry for slow reply.

OK. I understand your concern finally. At the commit log said, I wanted to use raw
rwlock but didn't find the DEFINE helper for it. Thinking it would not be expected to
have great performance, I turn to use raw spinlock instead. And yes, this would
introduce worse performance.

Maybe I miss the reason, but why don't we have rwlock_types_raw.h to define raw
rwlock helper for RT? With that, we can cleanly replace kmemleak_lock with a raw
rwlock.

Or should we just define a raw rwlock using basic type, like arch_rwlock_t, only in
kmemleak?

>
>>> Couldn't we just get rid of that kfree() or move it somewhere else?
>>> I mean if the free() memory on CPU-down and allocate it again CPU-up
>>> then we could skip that, rigth? Just allocate it and don't free it
>>> because the CPU will likely get up again.
>> For call trace 1:
>>
>> I went through the CPU hotplug code and found that the allocation of the
>> problematic data, cpuc->shared_regs, is done in intel_pmu_cpu_prepare. And
>> the free is done in intel_pmu_cpu_dying. They are handlers triggered by two
>> different perf events.
>>
>> It seems we can hardly form a convincing method that holds the data while
>> CPUs are off and then uses it again. raw locks would be easy and good enough.
> Why not allocate the memory in intel_pmu_cpu_prepare() if it is not
> already there (otherwise skip the allocation) and in
> intel_pmu_cpu_dying() not free it. It looks easy.

Thanks for your suggestion. I've sent the change for call trace 1 to mainline
mailing list. Hopefully it can be accepted.

Zhe

>
>> Thanks,
>> Zhe
> Sebastian
>

