Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 12 Dec 2018 08:52:53 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 1FD8C58079D;
	Tue, 11 Dec 2018 09:00:25 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by fmsmga006-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 11 Dec 2018 09:00:24 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AMiMqkxN3f1rWvdHUYSAl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KPr6pMbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRsZfWTJcDI2y?=
 =?us-ascii?q?bIUBCOUOM+lDr4nlpVYDtgeyCAq2Ce/z0DJEmmP60Ksn2OohCwHG2wkgEsoBv3?=
 =?us-ascii?q?TVsNX6LqMSUOCox6TWzTXDbvBW2Sr76IjPbBAqvPaBXaxsccfK00YvEx/FjlGR?=
 =?us-ascii?q?qYzjIjOU2f4Bs2+B7+pvTO+ijXMspQJpojW32Msglo3EipgIxl3K6yl12ps5KN?=
 =?us-ascii?q?6kREJhYNOpEoNcuzyZOoZ2WM8vQntktDs4x7AJo5K2eCsHxZI6zBDFcfOHaZKH?=
 =?us-ascii?q?4hf7WeaRPzh4gHVldaqhhxa970eg0PfwVsqq31ZQqCpKjN3MumoK1xzJ5ciLUv?=
 =?us-ascii?q?p9/kG/1jaTzw3f9P1ILEQumabGJZMt3KQ8mocQvEjfBCP7mUf7gLeTdko+++io?=
 =?us-ascii?q?7+rnYq/hpp+ZL4J0jgD+MqIzms2wGOg4MRYBX3Kd+eui0L3v5Er5QbtMjvIoiK?=
 =?us-ascii?q?nUq47aJcsFqa6jGQNV0Zgs6wy5Dzi41NQUh34HLEhKeB6flYjmJ0nOIOzkDfe4?=
 =?us-ascii?q?m1mslDZrx/PYMbH7DZTNM2POkLPgfbZ79k5dxxA/zdFZ55JIFL4BJOj/VVP2tN?=
 =?us-ascii?q?zdFhU5KRC7w/77CNVh0YMTQWKPDbWYMKPOq1CI4fgjI+mRZIAPvjb9JOMo5/rv?=
 =?us-ascii?q?jX8/hF8ccrOl3ZoRaHCkAPtmJ1+VbmbrgtcECW0KpBYxTPT2iF2eVj5ef3SyX6?=
 =?us-ascii?q?Ui6T0hC4KmCoHDRoaqgLGa2Ce7H5tWZn1JC1yWEHfocZmEVOkIaC6IPsBhlTkE?=
 =?us-ascii?q?X6C7S4A9zRGuqBP6y71/I+XO4S0YtZXj1Ntv6+3Jjx4y9yd5D8Cc02GLUmF1kX?=
 =?us-ascii?q?kERz4w3KBjv0N9zk2P3rR/g/xdDdZT/e9GUh8mNZ7AyOx3E9PyVRjHftuTTFam?=
 =?us-ascii?q?Q8+pATc+Tt8qx98OYkB9G8itjxzZ3iqqBaMVmKKPBJAu7q3c2H3xLd5ny3nazK?=
 =?us-ascii?q?khk0UmQsxXOGK7nKF/6RbcC5TJk0qDkaaqbroT3CjK+GeHzmqOuUVYXRV0UaXE?=
 =?us-ascii?q?W3Afe0TXoc745kPEU7+hF7AnPhFdxs6FL6tAcsfpgkleRPf/JNTeZHq8lHqqCh?=
 =?us-ascii?q?aW2LyAdorqdH8b3CXGFkcElRse/XKHNQg4GyegrHjSDD1oFVLzfUzs9fNyp2+8?=
 =?us-ascii?q?Tk8x1wuKdVFu16Kp+h4JgvyRU+8T3rMBuCcmtzV0HFa808jKC9aaoAphZqFcYd?=
 =?us-ascii?q?I74FdIzm/Zsw19Ppq9L6FtnFIecgJ3v1/w2BVzEIlPjc8qrHYyxgpoNa2YyE9B?=
 =?us-ascii?q?dy+f3Z3oILLXLnf9/R+xZK/WwF3Ry8uW9boV5/Q+qFXjux+pG1Em83Vm1dlVzn?=
 =?us-ascii?q?Sd6o/LDAoUTZL+TEI3+wJmqLHdZyk3/5nU2mF0Mamorj/C3MokBes4yhq6Y9hT?=
 =?us-ascii?q?KqKFFA/oHM0cCMijM+gqm1mvbhIZM+Fe7q80P8W6d/SY3K6nJvpvnDWjjW5f+o?=
 =?us-ascii?q?ByzlqM9zZgSu7Px5sF2fCY0RedWDfmkVihtdr7mYZaajEIH2qz0DTrC5RVZqJv?=
 =?us-ascii?q?Y4kLE2CuI8usy9V6hp7tXWNY9VG5C1MH3s+pZQSdb1jn0QJM0kQXpGStmTGkwD?=
 =?us-ascii?q?xsjzEpsq2f0TTOwuTjbhYGOnRHRHJ/jVfqOoW0i9EaXE61bwkmjhel5ED6x7RF?=
 =?us-ascii?q?q6R7NWXcXUBIfy3uJWF4TqSwrqaCY9JI6J4wsyVYSv68YVOZSr76uRcayDnsH2?=
 =?us-ascii?q?hdxDA6cTGlpJP5kgd+iGKcKnZzsXXYddtxxRfZ+NzTW/pR0iAaSyl/jDndHkK8?=
 =?us-ascii?q?MMWx/dWIi5fDtfizVmK7WZ1UayXrz4KAtC2g6G1uAB2/me2zm9L9HQg71y/7y8?=
 =?us-ascii?q?dlVSHSoBngZYnr0rywMfh7cUlwGF/89816F5l9koQqhZEcw3gahoiP8noBnmf+?=
 =?us-ascii?q?KtFb2aP4bHoQSj8H2d/V4A752EJ9KnKF3Z72VnKYwsF5fdm1fnsW2j4h78BNEK?=
 =?us-ascii?q?qU6b1EnShvrVaiowPef+N9nisDxvs083EVnfsJuAU2wyWZA7ASG1RYPCP2mxSJ?=
 =?us-ascii?q?6dC+sLtYZGK1fbes00p+mMirDKuerQFERHb5ZpAiEDds7sV4NVLAynzy5ZvieN?=
 =?us-ascii?q?nNdtITrRyUngzEj+hULpIxi/ULiTBmOWL7oX0q1eo7gQZy0pG9uYiNM39t876h?=
 =?us-ascii?q?Ah5EKj31YNse9Sr3gqZZmsaWwpqjHpF8GjgQWJvoTPSoEC8dtPj9NgaOFiE8pW?=
 =?us-ascii?q?mfGbbFAQCf70JmpWrVE5+3L3GXOGUZzdJ6SRmfPkNfhR4bXC4gkp4lDAyqx9Hh?=
 =?us-ascii?q?cERk5jAX/FH4sQBByuZpNxn5T2feqx2kajYySJiDMhVW6htO6FvSMcyb9uhzBT?=
 =?us-ascii?q?1X/oW9rAyRLWyWfwRJDWYUWkydGlDsJL+u6cPb8+ifAOq+IODDYbGPqexYSveJ?=
 =?us-ascii?q?yoij0opg/zaQKMqPOmNuAOE82kpGRXp5AdjWmy0TSywLkCLAd86bqwm9+i10rc?=
 =?us-ascii?q?C/8e7nWAH15YuIBLtdL89v+w2tgaqYM+6QhSB5KStX158WxH/IzqQf00AWiy10?=
 =?us-ascii?q?azatFrEAvzbXTK3Mgq9XEwIbayRrOcRS8qIzxRNNNtDbi9/v0r54j+U4C1NEVV?=
 =?us-ascii?q?znh8GoatYGI2C7NFPbGkmLMK6KKiHMw8Hyeam8U6FfjP1Itx2svjaWC1PjPjWG?=
 =?us-ascii?q?lzXzSx+jK/1DjCGFMxxYo4y9dhdtCW7+TNPpcBG7Mdl3jSEozr0wnH/FKWkcMT?=
 =?us-ascii?q?1keUNXsrKQ9T9Ygul4G2FZ7ntqN++EmyOY7+neMpkXsPtrDT5yl+JV+3k6z7pV?=
 =?us-ascii?q?7CdZRP16gifSr9huo024nemL0DZoTB1OqjMYzL6M6GlrJ6TVvrlHRnvA+AlFuW?=
 =?us-ascii?q?mQDAsHo99+Isfit6BZ1p7Ek6elbH9i/sje8NEAT/jJYJaHPWArPAD1MDHTCgcC?=
 =?us-ascii?q?V3iiLWjZjgpaiv7U/2DD6tBwhpHymZZGcfkTcV0xEv4AQAwxENUcLZJfUjo6nL?=
 =?us-ascii?q?ufi8AUo3yzsE+VDMZXr4rGUP2JKevgJSzfjrReYRYMh7TiIsBbMoz9xlwnYUNr?=
 =?us-ascii?q?hJjNM1TfUMoLoSB7aAIw5kJX/zw2Smw1xlKgaQ635nIXPeC7kwRwiQZkZ+kpsj?=
 =?us-ascii?q?D27AQZPF3P8RUxjEA1iJ3OgTGSbTj2Mu/kQ51+Ai7os0k3L4O9RBx6O17h1Xd4?=
 =?us-ascii?q?PSvJEuoCx4Brcnpm3UqF4cNC?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AlAADk7A9ch0O0hNFkHgEGBwaBUggLA?=
 =?us-ascii?q?YNrJ5gkgiFollaBcywTAYcuIjUIDQEDAQEBAQEBAgETAQEBCA0JCCkvgjYkAYJ?=
 =?us-ascii?q?pAhoKCwFMCQIYJhIDWgESBYMcggIEAaZwM4oth3yCfYEkHheBf4ERgl0HiwoCi?=
 =?us-ascii?q?TuGfpBCCZFGI5E/AYkjjFuEfAGCDE0wCIMngiYBF44gPjGBBQEBimMBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AlAADk7A9ch0O0hNFkHgEGBwaBUggLAYNrJ5gkgiFolla?=
 =?us-ascii?q?BcywTAYcuIjUIDQEDAQEBAQEBAgETAQEBCA0JCCkvgjYkAYJpAhoKCwFMCQIYJ?=
 =?us-ascii?q?hIDWgESBYMcggIEAaZwM4oth3yCfYEkHheBf4ERgl0HiwoCiTuGfpBCCZFGI5E?=
 =?us-ascii?q?/AYkjjFuEfAGCDE0wCIMngiYBF44gPjGBBQEBimMBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,342,1539673200"; 
   d="scan'208";a="66320020"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 11 Dec 2018 09:00:03 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727251AbeLKQ77 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 11 Dec 2018 11:59:59 -0500
Received: from vmicros1.altlinux.org ([194.107.17.57]:43632 "EHLO
        vmicros1.altlinux.org" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726714AbeLKQ77 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 11 Dec 2018 11:59:59 -0500
Received: from imap.altlinux.org (imap.altlinux.org [194.107.17.38])
        by vmicros1.altlinux.org (Postfix) with ESMTP id 86B9872CC6C;
        Tue, 11 Dec 2018 19:59:53 +0300 (MSK)
Received: from beacon.altlinux.org (unknown [185.6.174.98])
        by imap.altlinux.org (Postfix) with ESMTPSA id 08CD64A4A14;
        Tue, 11 Dec 2018 19:59:53 +0300 (MSK)
From: Vitaly Chikunov <vt@altlinux.org>
To: David Howells <dhowells@redhat.com>,
        Herbert Xu <herbert@gondor.apana.org.au>,
        "David S. Miller" <davem@davemloft.net>, keyrings@vger.kernel.org,
        linux-crypto@vger.kernel.org, linux-kernel@vger.kernel.org
Subject: [RFC PATCH] akcipher: Introduce verify2 for public key algorithms
Date: Tue, 11 Dec 2018 19:59:38 +0300
Message-Id: <20181211165938.1150-1-vt@altlinux.org>
X-Mailer: git-send-email 2.11.0
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Current akcipher .verify() just decrypts signature to uncover message
hash, which is then verified in upper level public_key_verify_signature
by memcmp with the expected signature value, which is never passed into
verify().

This approach is incompatible with ECDSA algorithms, because, to verify
a signature ECDSA algorithm also needs a hash value as input; also, hash
is used in ECDSA (together with a signature divided into halves `r||s`),
not to produce hash, but to produce a number, which is then compared to
`r` (first part of the signature) to determine if the signature is
correct.  Thus, for ECDSA, nor requirements of .verify() itself, nor its
output expectations in public_key_verify_signature aren't satisfied.

Make alternative .verify2() call which gets hash value and produce
complete signature check (without any output, thus max_size() call will
not be needed for verify2() operation).

If .verify2() call is present, it should be used in place of .verify().

Signed-off-by: Vitaly Chikunov <vt@altlinux.org>
---
 crypto/asymmetric_keys/public_key.c | 57 ++++++++++++++++++++++++-------------
 include/crypto/akcipher.h           | 54 +++++++++++++++++++++++++++++++++--
 2 files changed, 89 insertions(+), 22 deletions(-)

diff --git a/crypto/asymmetric_keys/public_key.c b/crypto/asymmetric_keys/public_key.c
index 3bc090b8adef..51dc1c858c7c 100644
--- a/crypto/asymmetric_keys/public_key.c
+++ b/crypto/asymmetric_keys/public_key.c
@@ -242,6 +242,7 @@ int public_key_verify_signature(const struct public_key *pkey,
 	char alg_name[CRYPTO_MAX_ALG_NAME];
 	void *output;
 	unsigned int outlen;
+	int verify2;
 	int ret;
 
 	pr_devel("==>%s()\n", __func__);
@@ -279,14 +280,23 @@ int public_key_verify_signature(const struct public_key *pkey,
 	if (ret)
 		goto error_free_req;
 
-	ret = -ENOMEM;
-	outlen = crypto_akcipher_maxsize(tfm);
-	output = kmalloc(outlen, GFP_KERNEL);
-	if (!output)
-		goto error_free_req;
-
+	verify2 = crypto_akcipher_have_verify2(req);
+	if (!verify2) {
+		/* verify2 does not need output buffer */
+		ret = -ENOMEM;
+		outlen = crypto_akcipher_maxsize(tfm);
+		output = kmalloc(outlen, GFP_KERNEL);
+		if (!output)
+			goto error_free_req;
+
+		sg_init_one(&digest_sg, output, outlen);
+	} else {
+		/* dummy init digest_sg */
+		memset(&digest_sg, 0, sizeof(digest_sg));
+		output = NULL;
+		outlen = 0;
+	}
 	sg_init_one(&sig_sg, sig->s, sig->s_size);
-	sg_init_one(&digest_sg, output, outlen);
 	akcipher_request_set_crypt(req, &sig_sg, &digest_sg, sig->s_size,
 				   outlen);
 	crypto_init_wait(&cwait);
@@ -294,18 +304,27 @@ int public_key_verify_signature(const struct public_key *pkey,
 				      CRYPTO_TFM_REQ_MAY_SLEEP,
 				      crypto_req_done, &cwait);
 
-	/* Perform the verification calculation.  This doesn't actually do the
-	 * verification, but rather calculates the hash expected by the
-	 * signature and returns that to us.
-	 */
-	ret = crypto_wait_req(crypto_akcipher_verify(req), &cwait);
-	if (ret)
-		goto out_free_output;
-
-	/* Do the actual verification step. */
-	if (req->dst_len != sig->digest_size ||
-	    memcmp(sig->digest, output, sig->digest_size) != 0)
-		ret = -EKEYREJECTED;
+	if (!verify2) {
+		/* Perform the verification calculation.  This doesn't actually
+		 * do the verification, but rather calculates the hash expected
+		 * by the signature and returns that to us.
+		 */
+		ret = crypto_wait_req(crypto_akcipher_verify(req), &cwait);
+		if (ret)
+			goto out_free_output;
+
+		/* Do the actual verification step. */
+		if (req->dst_len != sig->digest_size ||
+		    memcmp(sig->digest, output, sig->digest_size) != 0)
+			ret = -EKEYREJECTED;
+	} else {
+		/* Perform full verification in one call. */
+		req->digest = sig->digest;
+		req->digest_len = sig->digest_size;
+		ret = crypto_wait_req(crypto_akcipher_verify2(req), &cwait);
+		if (ret)
+			goto out_free_output;
+	}
 
 out_free_output:
 	kfree(output);
diff --git a/include/crypto/akcipher.h b/include/crypto/akcipher.h
index d6aba84ed2c4..f1ad67474bc1 100644
--- a/include/crypto/akcipher.h
+++ b/include/crypto/akcipher.h
@@ -28,6 +28,8 @@
  *		result.
  *		In case of error where the dst sgl size was insufficient,
  *		it will be updated to the size required for the operation.
+ * @digest:	Digest for verify2.
+ * @digest_len:	Size of the digest.
  * @__ctx:	Start of private context data
  */
 struct akcipher_request {
@@ -36,6 +38,8 @@ struct akcipher_request {
 	struct scatterlist *dst;
 	unsigned int src_len;
 	unsigned int dst_len;
+	u8 *digest;
+	u8 digest_len;
 	void *__ctx[] CRYPTO_MINALIGN_ATTR;
 };
 
@@ -60,6 +64,8 @@ struct crypto_akcipher {
  *		algorithm. In case of error, where the dst_len was insufficient,
  *		the req->dst_len will be updated to the size required for the
  *		operation
+ * @verify2:	Function performs a verify operation as defined by public key
+ *		algorithm.
  * @encrypt:	Function performs an encrypt operation as defined by public key
  *		algorithm. In case of error, where the dst_len was insufficient,
  *		the req->dst_len will be updated to the size required for the
@@ -96,6 +102,7 @@ struct crypto_akcipher {
 struct akcipher_alg {
 	int (*sign)(struct akcipher_request *req);
 	int (*verify)(struct akcipher_request *req);
+	int (*verify2)(struct akcipher_request *req);
 	int (*encrypt)(struct akcipher_request *req);
 	int (*decrypt)(struct akcipher_request *req);
 	int (*set_pub_key)(struct crypto_akcipher *tfm, const void *key,
@@ -400,11 +407,13 @@ static inline int crypto_akcipher_sign(struct akcipher_request *req)
  * crypto_akcipher_verify() - Invoke public key verify operation
  *
  * Function invokes the specific public key verify operation for a given
- * public key algorithm
+ * public key algorithm: basically it does (rsa) decrypt of signature
+ * producing decrypted hash into dst, which should be compared by a caller
+ * with expected hash value.
  *
- * @req:	asymmetric key request
+ * @req:	asymmetric key request (without hash)
  *
- * Return: zero on success; error code in case of error
+ * Return: zero on decryption success; error code in case of error
  */
 static inline int crypto_akcipher_verify(struct akcipher_request *req)
 {
@@ -418,6 +427,45 @@ static inline int crypto_akcipher_verify(struct akcipher_request *req)
 }
 
 /**
+ * crypto_akcipher_verify2() - Invoke public key verify operation
+ *
+ * Function performs complete public key verify operation for a given
+ * public key algorithm
+ *
+ * @req:	asymmetric key request (with hash)
+ *
+ * Return: zero on verification success; error code in case of error
+ */
+static inline int crypto_akcipher_verify2(struct akcipher_request *req)
+{
+	struct crypto_akcipher *tfm = crypto_akcipher_reqtfm(req);
+	struct akcipher_alg *alg = crypto_akcipher_alg(tfm);
+	int ret;
+
+	ret = alg->verify2(req);
+	crypto_stat_akcipher_verify(req, ret);
+	return ret;
+}
+
+/**
+ * crypto_akcipher_have_verify2() - Check for existence of public key verify2
+ * operation
+ *
+ * Function checks for existence of verify2 call for the public key algorithm
+ *
+ * @req:	asymmetric key request (with hash)
+ *
+ * Return: non-zero is verify2 call exists; zero if it does not
+ */
+static inline int crypto_akcipher_have_verify2(struct akcipher_request *req)
+{
+	struct crypto_akcipher *tfm = crypto_akcipher_reqtfm(req);
+	struct akcipher_alg *alg = crypto_akcipher_alg(tfm);
+
+	return !!alg->verify2;
+}
+
+/**
  * crypto_akcipher_set_pub_key() - Invoke set public key operation
  *
  * Function invokes the algorithm specific set key function, which knows
-- 
2.11.0

