Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 29 Nov 2018 18:19:08 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 198655803ED;
	Thu, 29 Nov 2018 01:54:59 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by fmsmga002-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 01:54:57 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AghftnR3zrMjNHFt9smDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segTKPnxwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJOUclNWCJPDIOy?=
 =?us-ascii?q?YZUSAeUDM+ZWrIb8qFUVrRumBwShH//vxz1KhnPqwaE3yfotHAfb1wIgBdIOt3?=
 =?us-ascii?q?HUoc3oOqcOT++1wrPHzTPeZP5K1jf97pbHcgo8qvyLRrJwbdTeyUc1GAPDlVif?=
 =?us-ascii?q?s4PlPzWL2eQXqWSU8+pgWPuphmU6pQ9xpT2vyd0tionPno8a0ErE9SBjzIkpIt?=
 =?us-ascii?q?24TVZ3Yd26H5tKsSGVKY92TtklQ2FytyY20rMHuZ+gfCcW0pgo2QPQa+GBfoOV?=
 =?us-ascii?q?4RzjTP6cLSlkiH9hYr6zmhi//Va6xuHhVcS4zExGoytHn9XUqHwCzQDf5taCR/?=
 =?us-ascii?q?Zy40us2jOC2gHJ5e1YP0w5kK/WJIQvz7M2i5Edq17MHjXsl0XzlKKWdlsr+uyv?=
 =?us-ascii?q?6+n/fLXmqYGTN5VuhgH9LKsugMq/Dvo8MgQUWGib4+u82KXi/U3/XrpKkuU7nr?=
 =?us-ascii?q?fFvJ3eP8gXu6C0DxFP3oo+6BuzEy2q3dUakHUfKVJKYhOHj4znO1HUJ/D4CO+y?=
 =?us-ascii?q?g1CtkDdt2vDHMaTtApbTIXjZlrfuY7J951dbyAs9y9BQ+YhUB6ofIPL8REDxrs?=
 =?us-ascii?q?bUDhwnPAyuxeboFtF92pkZWWKVDa+VKLnSvkOQ5uIzP+mMY5cYuDL8K/gm+fHi?=
 =?us-ascii?q?l3A4mUIGcKmt3JsXbm24H/t8L0WYZ3rsnskOEWMQsgUiS+zqjUWIUSRPaHaqQ6?=
 =?us-ascii?q?I8+jY7BZqmDYjZR4CtnKaO3CChEp1We2BJEFaMEXjzeoWAWvcMbj+SI8B7njwF?=
 =?us-ascii?q?U7ihV5Eu1RW0uADmzLpnK/Le+jcEupL7yNh1++rTmAkw9TxzEcuRyWKNT2Zynm?=
 =?us-ascii?q?MOQD87x6R/oU17ylee3ql0mf1YFdpP5/xXVgc2L4LTz+t/C9rqQALOYs+JSEq6?=
 =?us-ascii?q?QtWhGTw+VMkxw98JY0Z+AdmilArM3yixDr8RlryLAoE0863G03jwIcZ912jJ1K?=
 =?us-ascii?q?07g1Y6RctPMHWshrRj+AjLG47Jj0KZmr6pdasG2i7B7mODzWuUs0FeXw59SqHF?=
 =?us-ascii?q?XXEZZkvLotX1/ELCT7myCbs5NgtN09KNKqxPatfxl1VJWO/jOMjCY2K2g2q/GA?=
 =?us-ascii?q?yHxq2SY4bwe2USxiPdCFManAAV+nqGMQs+BiKlo2/FCDxuFFTvY17j8OVkqXO7?=
 =?us-ascii?q?SFM0wB+Ob0F7y7W1/RsVj+SGS/wPxrIEpDshqzJsEVmgxd3WFcSPqxBhfKpGZ9?=
 =?us-ascii?q?M9+0lI1WTCugx5P5ygKb1ih1EEfwR2uUPuywt4CoFancc2q3MqyRJ4KbiE31NZ?=
 =?us-ascii?q?azOYwZfwN6XLKmnz+RCvbLLW2lHe0dqM5qcD8vM4q0/nvAGoEEoi/G5q091U03?=
 =?us-ascii?q?ua+5XLAxAeUZP3UkYr6Rd6o6vWbTU654PRzXdsK7W7sife29I1A+so0gyvf9NB?=
 =?us-ascii?q?P6KLCgDzE9cWCNOzKOM3gVepaBEEPOdM9KMvO8Omdv2G2LOkPep6nTKmi3hH75?=
 =?us-ascii?q?550k6W6yV8TevI1Y4fw/6ExguHSyv8jFC5v8H3hIBIfy0dEnC+yCjkHoFRYKJy?=
 =?us-ascii?q?cJ0PCWevJc2329p/i4TsW35e6F6sGVcG1NW1dhqValz3xRdQ2lgPoXy7hSu4yC?=
 =?us-ascii?q?R5kysorqWDxiPO2fntdB0dNm5NWmZil1bsLZGogN8AWEinchYmlAGi5Ub83KVb?=
 =?us-ascii?q?oKV/L2/OQUZHZST2LmdiUreuubqGecJA9JQosSBPWuSmfV+aUqL9owcd0y77H2?=
 =?us-ascii?q?pexSo3djGwtpXighx6jnmQLHJyrHrfZMFxyg3T5N3aRf5NwDUGQDN0hiXQBli5?=
 =?us-ascii?q?J9Op58mbl4/fsuCiUGKsTp9TfjPxzYODtyu74ndmAQalkPCwmd3nEA463jH919?=
 =?us-ascii?q?RxUSXIrRD8YpTk1qigMOJneFVoC0H468ZgBo5+lY4wjokK2XcGnpWV4WYHkWDr?=
 =?us-ascii?q?PNRbw63+a2ABRTwKw97T+wXl3ExjLnSUx4P2THmdw81hZ8WkbWMSwC4y88dKCK?=
 =?us-ascii?q?KM5rxegSR1uka4rR7WYfVlnTcS0/ou5GQag+EUogUtyCqdD6sWHUlZOyzsihuJ?=
 =?us-ascii?q?48q/rKVReGagb7yw2FBiktCmCbGIuhtcV2rhepc+AS9w6d1yMFfN0H3w8I7oYt?=
 =?us-ascii?q?fRYswIth2IjRjAlfNaJ4wrlvoFnidnPWP9vXs4y+80lxBu3Je6vJSZJGVp5q62?=
 =?us-ascii?q?HhlYNjjtbcMJ5j7tlbpentqR3423ApVhHTALUIHpTP2yFjISqO/nNx2PEDAnrn?=
 =?us-ascii?q?ebGLzfHRKQ6Ut8rnLPFYyrOG+TJHUD0dpiQxydLlRFgA8IRDU6goI5FgeyycP6?=
 =?us-ascii?q?akh54TQR5kPiphtI1+JlLB3/UmbZpAe1ZTY4UpmfLBxK7g5c40fZK9CR7uV2Hy?=
 =?us-ascii?q?tA5J2usBSNKnCHZwRPFWwJWFaLB1X9Mbm1/9XA7/KUBumjL/vNfLWOr/ZRV+yT?=
 =?us-ascii?q?yJKr04tm+SuMN8qVMnljCf07xlRMXXRjF8vFnDUPTjQdlzjRYM6DuBe85ip3o9?=
 =?us-ascii?q?i/8fTsRQLv/JaPBKFUMdl14BC2hqGDN+GLiSZ9KDZY0I4MxHDSxLge2l4Slz9h?=
 =?us-ascii?q?dz23Hbscsi7NSbramrVLAB4DdyNzKMxI4ro83gZTOM7bidD11r9igv42EVdFUl?=
 =?us-ascii?q?Phld+zZcwXOGGwL1fHBEeNNLSbKjzH2cD3YaWgSbJOiOVYrQG/uTGeE0X7JDSM?=
 =?us-ascii?q?iyHpVwyzMeFLlCyUJgFet5qnchlzCWnvVtbmahygPd9zjD02x6A0h3zQOW4dNz?=
 =?us-ascii?q?h8b11CrrmK4SxEhfV/HnRL7mB5IumchyaZ8+7YJ44KsftqByR4jf5V7G4mxLtV?=
 =?us-ascii?q?8i5EQud4mC/Trt5ovlGnnfODyjthUBpStDlLgJiHslllOaXc7pNAQ2rL/AoR7W?=
 =?us-ascii?q?WMDBQHv9tkBcfpu6BVy9jPkrr8KTZC893O+8scCNPZKMaGMHonLBroFyTYDAoD?=
 =?us-ascii?q?TT63K27fg1ZRn+2V9n2Q/dAGrc3Wn5APTPd+SUYtFuJSXl5iFt0EZpJqRCskgJ?=
 =?us-ascii?q?aSlstO7n27+kr/XsJf66vbW/ybB73GJzCUl/EQfAcFz7r+BY0cMIDhnUdiPAop?=
 =?us-ascii?q?1L/WElbdCIge6hZqaRU59QAUqCBz?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0CbAACntv9bh0O0hNFlHgEGBwaBVAYLA?=
 =?us-ascii?q?QGBLyqBD4ECJ5gZgg0UaJZagV8sDQYBh3IiNwYNAQMBAQEBAQECARMBAQEIDQk?=
 =?us-ascii?q?IKSMMQgEQAYFiJAGCYQEBAQEBAQEBAiQTBgEBNwEFCQEBAwcQCC4DVAYTBQODG?=
 =?us-ascii?q?QGBeQgBAwEKpTiBbDOCdgEBBYEwARQ/hSQIiH+Be4EcF4F/gRGCXTWDHgMBAYE?=
 =?us-ascii?q?nEBCFcokpARKGMJA5CYESgQ+EXYosCBhfe02HZ4cOjVeMUYF3MxoIMIMnCQqCC?=
 =?us-ascii?q?AwXfwEBgiEoaoQqhUA/MgEBAYECAQGBQIkrgk0BAQ?=
X-IPAS-Result: =?us-ascii?q?A0CbAACntv9bh0O0hNFlHgEGBwaBVAYLAQGBLyqBD4ECJ5g?=
 =?us-ascii?q?Zgg0UaJZagV8sDQYBh3IiNwYNAQMBAQEBAQECARMBAQEIDQkIKSMMQgEQAYFiJ?=
 =?us-ascii?q?AGCYQEBAQEBAQEBAiQTBgEBNwEFCQEBAwcQCC4DVAYTBQODGQGBeQgBAwEKpTi?=
 =?us-ascii?q?BbDOCdgEBBYEwARQ/hSQIiH+Be4EcF4F/gRGCXTWDHgMBAYEnEBCFcokpARKGM?=
 =?us-ascii?q?JA5CYESgQ+EXYosCBhfe02HZ4cOjVeMUYF3MxoIMIMnCQqCCAwXfwEBgiEoaoQ?=
 =?us-ascii?q?qhUA/MgEBAYECAQGBQIkrgk0BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,294,1539673200"; 
   d="scan'208";a="42793061"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 01:54:55 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726902AbeK2U7i (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 29 Nov 2018 15:59:38 -0500
Received: from mail.kmu-office.ch ([178.209.48.109]:55044 "EHLO
        mail.kmu-office.ch" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726621AbeK2U7i (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 29 Nov 2018 15:59:38 -0500
Received: from webmail.kmu-office.ch (unknown [IPv6:2a02:418:6a02::a3])
        by mail.kmu-office.ch (Postfix) with ESMTPSA id 444905C035F;
        Thu, 29 Nov 2018 10:54:46 +0100 (CET)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=agner.ch; s=dkim;
        t=1543485286;
        h=from:from:reply-to:subject:subject:date:date:message-id:message-id:
         to:to:cc:cc:mime-version:mime-version:content-type:content-type:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=IhRKtknfUDTtBxqnh2DF1VEj/w7R/lPfi5EqcIYlUok=;
        b=ohhqD/XrMrEJGoZOGNwXATxAgwuc4RC1qoDJTm8aydrwbth9urB9fFOYKiJxuRhf4NKBSV
        hVzWECuf9NlQT6TwfiJyEaaGZeLc/t7s0dDH7MSt0hdwepCh7gyb710BQtMexOsTVdYlVk
        ojsXaz5U3bHj0GtWhlOkTSi2SOyAt2w=
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Date: Thu, 29 Nov 2018 10:54:45 +0100
From: Stefan Agner <stefan@agner.ch>
To: Robin Murphy <robin.murphy@arm.com>
Cc: hongxing.zhu@nxp.com, l.stach@pengutronix.de,
        lorenzo.pieralisi@arm.com, andrew.smirnov@gmail.com,
        linux-pci@vger.kernel.org, linux-kernel@vger.kernel.org,
        bhelgaas@google.com, leonard.crestez@nxp.com, festevam@gmail.com,
        linux-arm-kernel@lists.infradead.org, tpiepho@impinj.com
Subject: Re: [PATCH] pci: imx6: support kernels built in Thumb-2 mode
In-Reply-To: <9861493a-6139-ca3e-41a8-e6fe41c2f3a3@arm.com>
References: <20181128132554.28139-1-stefan@agner.ch>
 <ff476784-b79e-18bf-5870-4365c8377deb@arm.com>
 <074f80db0eceb76672bca283c5de37b9@agner.ch>
 <9861493a-6139-ca3e-41a8-e6fe41c2f3a3@arm.com>
Message-ID: <89a0b0bf3ff340ac5077f6c0de3419a7@agner.ch>
X-Sender: stefan@agner.ch
User-Agent: Roundcube Webmail/1.3.7
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 28.11.2018 20:35, Robin Murphy wrote:
> On 28/11/2018 17:53, Stefan Agner wrote:
>> On 28.11.2018 17:16, Robin Murphy wrote:
>>> Hi Stefan,
>>>
>>> On 28/11/2018 13:25, Stefan Agner wrote:
>>>> Add a fault handler which handles reads in Thumb-2 mode. Install
>>>> the appropriate handler depending on which mode the kernel has
>>>> been built. This avoids an "Unhandled fault: external abort on
>>>> non-linefetch (0x1008) at 0xf0a80000" during boot on a device
>>>> with a PCIe switch connected.
>>>>
>>>> Link: https://lore.kernel.org/linux-pci/20181126161645.8177-1-stefan@agner.ch/
>>>> Signed-off-by: Stefan Agner <stefan@agner.ch>
>>>> ---
>>>> FWIW, I found this manual helpful to write the code below:
>>>> http://hermes.wings.cs.wisc.edu/files/Thumb-2SupplementReferenceManual.pdf#page=43&zoom=100,0,66
>>>
>>> This one's rather less ancient and even more authoritative ;)
>>>
>>> https://static.docs.arm.com/ddi0406/cd/DDI0406C_d_armv7ar_arm.pdf
>>>
>>> (ARMv7 had a few new encodings over and above ARMv6T2, although in
>>> fairness I don't think any should be relevant to this specific case)
>>>
>>
>> Thanks, I tried to find the right document on arm.com, but I timed out
>> after 5 minutes or so :-)
>>
>>>> --
>>>> Stefan
>>>>
>>>>    drivers/pci/controller/dwc/pci-imx6.c | 37 ++++++++++++++++++++++++++-
>>>>    1 file changed, 36 insertions(+), 1 deletion(-)
>>>>
>>>> diff --git a/drivers/pci/controller/dwc/pci-imx6.c b/drivers/pci/controller/dwc/pci-imx6.c
>>>> index 69f86234f7c0..683deb74d69f 100644
>>>> --- a/drivers/pci/controller/dwc/pci-imx6.c
>>>> +++ b/drivers/pci/controller/dwc/pci-imx6.c
>>>> @@ -29,6 +29,7 @@
>>>>    #include <linux/reset.h>
>>>>    #include <linux/pm_domain.h>
>>>>    #include <linux/pm_runtime.h>
>>>> +#include <asm/opcodes.h>
>>>>      #include "pcie-designware.h"
>>>>    @@ -299,6 +300,37 @@ static int imx6q_pcie_abort_handler(unsigned long addr,
>>>>    	return 1;
>>>>    }
>>>>    +static int imx6q_pcie_abort_handler_thumb2(unsigned long addr,
>>>> +		unsigned int fsr, struct pt_regs *regs)
>>>> +{
>>>> +	unsigned long pc = instruction_pointer(regs);
>>>> +	unsigned long instr = *(unsigned long *)pc;
>>>> +	unsigned long thumb2_instr = __mem_to_opcode_thumb16(instr);
>>>> +	int reg = thumb2_instr & 7;
>>>> +
>>>> +	if (!__opcode_is_thumb16(instr & 0x0000ffffUL))
>>>> +		return 1;
>>>
>>> There are plenty of 32-bit Thumb encodings of various LDR/STR
>>> variants, and I doubt we can guarantee that the offset, target
>>> register, and/or addressing mode for a config space access will
>>> *always* suit the (relatively limited) 16-bit ones.
>>
>> Hm, I guess they should be handled too?
>>
>> I looked at the code where I had the abort at hand triggered
>> (dw_pcie_read).
> 
> For the sake of robustness, I think it makes sense to at least handle
> all LDR/LDRH/LDRB encodings which might possibly fall out of a
> read[lwb]() call. Given that we seem to have various versions of this
> decoding in differing states of completeness, perhaps it's even worth
> factoring out into some kind of common "Arm PCI synchronous abort
> handler".
> 

That was actually my approach. dw_pcie_read uses read[lwb](), and this
is how it disassembles:

00000000 <dw_pcie_read>:                                                
                                                                   
   0:   1e4b            subs    r3, r1, #1                              
                                                                   
   2:   4003            ands    r3, r0                                  
                                                                   
   4:   d112            bne.n   2c <dw_pcie_read+0x2c>                  
                                                                   
   6:   2904            cmp     r1, #4                                  
                                                                   
   8:   d00a            beq.n   20 <dw_pcie_read+0x20>                  
                                                                   
   a:   2902            cmp     r1, #2                                  
                                                                   
   c:   d012            beq.n   34 <dw_pcie_read+0x34>                  
                                                                   
   e:   2901            cmp     r1, #1                                  
                                                                   
  10:   d10c            bne.n   2c <dw_pcie_read+0x2c>                  
                                                                   
  12:   7801            ldrb    r1, [r0, #0]                            
                                                                   
  14:   b2c9            uxtb    r1, r1                                  
                                                                   
  16:   f3bf 8f4f       dsb     sy                                      
                                                                   
  1a:   4618            mov     r0, r3                                  
                                                                   
  1c:   6011            str     r1, [r2, #0]                            
                                                                   
  1e:   4770            bx      lr                                      
                                                                   
  20:   6801            ldr     r1, [r0, #0]
  22:   f3bf 8f4f       dsb     sy
  26:   6011            str     r1, [r2, #0]
  28:   4618            mov     r0, r3
  2a:   4770            bx      lr
  2c:   2300            movs    r3, #0
  2e:   2087            movs    r0, #135        ; 0x87
  30:   6013            str     r3, [r2, #0]
  32:   4770            bx      lr
  34:   8801            ldrh    r1, [r0, #0]
  36:   b289            uxth    r1, r1
  38:   f3bf 8f4f       dsb     sy
  3c:   6011            str     r1, [r2, #0]
  3e:   4618            mov     r0, r3
  40:   4770            bx      lr
  42:   bf00            nop

Those three loads should be handled by below code (unless I made a
mistake).


>>>> +
>>>> +	/* Load word/byte and halfword immediate offset */
>>>> +	if (((thumb2_instr & 0xe800) == 0x6800) ||
>>>> +	    ((thumb2_instr & 0xf800) == 0x8800)) {
>>>> +		unsigned long val;
>>>> +
>>>> +		if (thumb2_instr & 0x1000)
>>>> +			val = 0xff;
>>>> +		else if (thumb2_instr & 0x8000)
>>>> +			val = 0xffff;
>>>> +		else
>>>> +			val = 0xffffffffUL;
>>>> +
>>>> +		regs->uregs[reg] = val;
>>>> +		regs->ARM_pc += 2;
>>>> +		return 0;
>>>> +	}
>>>
>>> What about stores? The existing implementation handles them, so either
>>> that's dead code which could perhaps be cleaned up, or they need to be
>>> handled here too.
>>>
>>
>> I think the current handler (imx6q_pcie_abort_handler) checks bit 20,
>> which means it must be a load not?
> 
> Oops, that's just me being dumb - I managed to overlook the pt_regs
> assignment in the second if() block and thought it was just advancing
> the PC, so assumed (because I also didn't bother to actually look up
> the relevant encoding bits) it must be handling stores. Never mind
> that part then.
> 
>>>> +
>>>> +	return 1;
>>>> +}
>>>> +
>>>>    static int imx6_pcie_attach_pd(struct device *dev)
>>>>    {
>>>>    	struct imx6_pcie *imx6_pcie = dev_get_drvdata(dev);
>>>> @@ -1069,6 +1101,8 @@ static struct platform_driver imx6_pcie_driver = {
>>>>      static int __init imx6_pcie_init(void)
>>>>    {
>>>> +	bool thumb2 = IS_ENABLED(CONFIG_THUMB2_KERNEL);
>>>
>>> Can these aborts definitely *only* be triggered by kernel accesses,
>>> and never, say, via an mmap() of anything exposed to userspace?
>>
>> Honestly, I am not very familiar with PCIe, I don't know...
> 
> Yeah, hopefully the linux-pci audience can clear up that one.
> 
> I was thinking in terms of whether we might need a combined handler
> with a runtime "thumb_mode(regs)" check rather than a compile-time
> decision, but Russell has a good point that just reading the
> instruction at all is its own can of worms in that case.

Since the ARM handler also does not support userspace at this point I'd
rather prefer to just exclude that case and pass it to the default
handler. Then we can look at it once a real world case comes up...

--
Stefan

> 
> Robin.
