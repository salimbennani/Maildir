Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:59:35 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id C2BE05805CF;
	Sat, 22 Dec 2018 18:57:58 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by fmsmga004-1.fm.intel.com with ESMTP; 22 Dec 2018 18:57:58 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AB83NyRGv9N6/zGv4uWyFGJ1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75pMW7bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjmk8qxlSgLniD?=
 =?us-ascii?q?0fOjA57m/Zl8J+gqFcrhK6vxxywZXZbJ2JOPdkYq/QZ88WSXZHU81MVyJBGIS8?=
 =?us-ascii?q?b44XAuQPI+lXsZH9qEETphWwBAmsAvngyjpSiX/w3K0xzuMsHhzY0wM+B9IBqm?=
 =?us-ascii?q?7YrNbrO6cIV+C60q3IwC7Mb/NTwzj96YzIfgo9rvGLWLJ9aMzcwlQsGQPdllic?=
 =?us-ascii?q?t5DpMjeP2ugQvWWX8fBsWf+shmI7sQ18ozqiyt8oh4TKnI4Z1F7J+CpjzIs1O9?=
 =?us-ascii?q?G0UlB3bNC4HJZWqiqULZF5Qtk4TGFtoCs6yqMJuZq8fCUS1pQnyADQa+adf4iL?=
 =?us-ascii?q?/B3jTuCRLil8hH5/f7K/nRmy/VChyu36SMa0zE5HojRZntTIrHwByhLe5tadRv?=
 =?us-ascii?q?dg/UqtxSyD2gHR5+1cJEA7j6vbK5ovwr4qkZoTtFzOHiv3mEXwka+XeVwo+uu2?=
 =?us-ascii?q?5OT9ZLXpuJucO5ZzigDwNKQhhNa/DP8mMggBQWeb4/6w1L798k3jRrVFkPk2nr?=
 =?us-ascii?q?PesJDAKsQXvrS5DBNN0oY/9xa/CC+r0NAZnXkEMl1JYh2Gj5XyNlHKIfD4C+q/?=
 =?us-ascii?q?glu2nDdqwfDGIqPuApHXInffl7fheK5361RAxwor0dBf+5VUB6kBIP3pW0/xqM?=
 =?us-ascii?q?bXDhgjPwy03uboEtN91owFVGKLA6+ZNr7SsFCS6uIuJemMeJEauDLnJ/c54P7u?=
 =?us-ascii?q?iGczmUUBcqmxwZsXdHe4E+x8LEWCYXrshdQBHX0QvgUkTuznk1mCUT9VZ3avUK?=
 =?us-ascii?q?Mw/DA7CIS6DYjdQoChmqCO3CC+HpdOfGBJFkiMEWv0d4WDQ/oMazidIsl7njwA?=
 =?us-ascii?q?VLiuUYkh1R61uQ/+yrpnKPfU+yICuZLi0th1+/PclRUo+TNoCMSd1nmHT3tokW?=
 =?us-ascii?q?MQWz82wKd/rFRgxViZz6h3neZUFdxJ6PNPSQc1K5jcw+t+C9DxXwLBesyESFKn?=
 =?us-ascii?q?QtWgHDEwQcg9w94IY0ZhBdqiigrP0DatA78Qj7aLHoA78rrA33jtIMZw02vJ27?=
 =?us-ascii?q?M/j1Y4WMdPNXephqhk9wfNAY7EiEGZl6esdaQB0y/B7maDzWySvE5GVA58S7nK?=
 =?us-ascii?q?XXcaZkHOt9T2+lvCT6OyCbQgKgZB1c+CKq5Nat31jVVHRO3vOMjEb2K2gWewAR?=
 =?us-ascii?q?eIxrWDbIfxf2Ud3SPdCFULkgwJ/HaGMxQ+CTmlo27EEDNuElfvaVv28eZisHO7?=
 =?us-ascii?q?UlM0zwaSYkJ707q65BEUiuKcSv8Jxb0EpToupC9yHFa+2NLWFcGNpw5gfKVafN?=
 =?us-ascii?q?M8701L1WPftwxhIJOgK7puiUIZcwRyp0nuzQl4Cp1ckcg2q3Mn1ApzKb+C3Fxd?=
 =?us-ascii?q?bT+Z3JDwNafRKmn95x2vb6/W2lfD0NeZ4KsP6fI4q0n9swGtDEYt73Jn09xN2X?=
 =?us-ascii?q?uG+prKFBYSUY72Uksv7Rh6pq3VbTMn54zJ0n1gK6+0vSHY29IoHecq1gyvf9NC?=
 =?us-ascii?q?P6yaDg/yFMsaCtOqKOwrnVipcx0FMPpT9K4yI8Opaf+G1LS3M+ZnmTKslX5H75?=
 =?us-ascii?q?xl0kKQ6yp8TfbF3pYEw/2C3gqLTSz8jEqnss3snYBEZDcSHnewyCT+BY5RYLFy?=
 =?us-ascii?q?cpgPCWu0P8K3wdB+jYb3W3FE7F6jG08G2MixdBqQdVP9xw5Q1UcQoXC9giu31T?=
 =?us-ascii?q?90kzIorqqZwiPOxf/vdB4GOm5NWWljgk3gIYmyj9AGQkeoaxIlmwei5Ub/36Jb?=
 =?us-ascii?q?vrhwL3HPQUdUeCj7N2FjXbG3traYYc5P6ZUovD5TUOS9Z1CaV7H8rwEb0yPlA2?=
 =?us-ascii?q?tR2jQ7eyu2tZX+mhxwkHidI2prrHrFZcFwwg/S5N/GSv5QxDYGRDR4hiPRBliz?=
 =?us-ascii?q?JNSp+dSUl5HesuGxTW6hV5tTcTX1woOErie0+WpqARinlfCphtLnCRQ60TP819?=
 =?us-ascii?q?RyUCXIrRX8bZPx26W0L+1nZVVoC0Hm68VhBI5+iIQwiYoU2XgbgJWV4HUGnX3y?=
 =?us-ascii?q?MdVdxaLxcn4NSSQXzN7S5QjvwFdjIW6Rx4LlSnWdxdNsZ8W9YmMTwC487tpFCK?=
 =?us-ascii?q?GJ7Lxfhit1o0G1rQbQYfh7gzccxuEi6H8cg+EVpgUtyj+RDawVHUldJSbsjQiH?=
 =?us-ascii?q?78iirKVLY2aiaaO/21B5ndClEbGOuAVcWGvid5cmHC9w6Nh/MV3W3H3y7IHkZM?=
 =?us-ascii?q?ffbdYJuhKIlBfAivBfKIgtmfoSmSpnJWX9sGUny+EhiBxhw4q6sJKbK2l3/6K5?=
 =?us-ascii?q?Hx1YNiDzZ8wJ4THglqJenseQ34CyEZRtADQLXJ30Tf22FDIer+joNwGLEDcksH?=
 =?us-ascii?q?eUBaLfHROD6Edht3/OE5erN2yOJHkE19piQgORJFdYgAASUzU3hZo5FgGsxMz8?=
 =?us-ascii?q?f0Z1/DER5ljkqhRSzuJkLQXwUmDapA2wcDc7VICfLAZK7gFF/0rVMdKR7uNwHy?=
 =?us-ascii?q?Fb/52ttg+NKnacZwRHE24JQFGEB0v4M7mq5NnA9fWYB+WkI/vPZ7WOtfJRV/OS?=
 =?us-ascii?q?yZ2z1Ytm+i6GNt+TMXl6E/07xk1DUGhjFMTEgDoPUTIYliLXY86fpRex4Sl3rs?=
 =?us-ascii?q?G58PT2VwPj/4qPC71OMdpx/xC6m7uMN+mVhCxhMzZXyosMxWPUyLgYxFMSlyBu?=
 =?us-ascii?q?dzy3HbscryLCUKLQlbFRDxMAbyNzNc1I778z3wVXOM7bjM/12aB8jvIvF1hFUl?=
 =?us-ascii?q?nhkNmzZcMWO2G9KE/HBEGTObWGPzLLxcT3YaK6SbJIjeRUtwe/uTCUE0L4OjSD?=
 =?us-ascii?q?lj/pVw2gMO1WjSGbOgBet5+5chp3FWfjS9fmOVWHN4p7hCM7xJU4j23HMGobPy?=
 =?us-ascii?q?Q6dU5R6vWW4D9Uj+tXBWNM9DxmIPOCliLf6PPXbt4SsP12EmF3mvhc7XAS1bRY?=
 =?us-ascii?q?9mdHSeZzlS+UqcRh8H+8leza5jdqSBMGhjdNjYeCu0QqbanU+4FJH3XJ5hQA6U?=
 =?us-ascii?q?2fDh0Lo51uDdi56PMY8cTGiK+mcGQKyNnT58ZJX8U=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BMAACS+B5ch0O0hNFiHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBVAQBAQsBg2snjHaNPIkWkCwTAQEYEwGHMCI3Bg0BAwEBAQEBAQIBEwEBAQo?=
 =?us-ascii?q?LCQgpIwyCOiKCdgIkGQEbHQEDAgkCBRAHNAMeAhEBBQEOFRIFgx2BaQEDFQWaS?=
 =?us-ascii?q?TyMFRYFAReCdwWCRIFsChknDV6BNwIGEodsgyWBHIIWhnqBZB+GBgKJKYc6kDU?=
 =?us-ascii?q?zBwKCKYgug1+DJwwYgWCIG4drLYksgQaFDYoWAgQCBAUCBQ8hgTuBeE0jgQGCO?=
 =?us-ascii?q?xOCCAwXg0qKdB8yAYEDAQEBix4PF4InAQE?=
X-IPAS-Result: =?us-ascii?q?A0BMAACS+B5ch0O0hNFiHAEBAQQBAQcEAQGBVAQBAQsBg2s?=
 =?us-ascii?q?njHaNPIkWkCwTAQEYEwGHMCI3Bg0BAwEBAQEBAQIBEwEBAQoLCQgpIwyCOiKCd?=
 =?us-ascii?q?gIkGQEbHQEDAgkCBRAHNAMeAhEBBQEOFRIFgx2BaQEDFQWaSTyMFRYFAReCdwW?=
 =?us-ascii?q?CRIFsChknDV6BNwIGEodsgyWBHIIWhnqBZB+GBgKJKYc6kDUzBwKCKYgug1+DJ?=
 =?us-ascii?q?wwYgWCIG4drLYksgQaFDYoWAgQCBAUCBQ8hgTuBeE0jgQGCOxOCCAwXg0qKdB8?=
 =?us-ascii?q?yAYEDAQEBix4PF4InAQE?=
X-IronPort-AV: E=Sophos;i="5.56,386,1539673200"; 
   d="scan'208";a="45129745"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 22 Dec 2018 18:57:56 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2405126AbeLWC5y (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Sat, 22 Dec 2018 21:57:54 -0500
Received: from mail-pf1-f194.google.com ([209.85.210.194]:44701 "EHLO
        mail-pf1-f194.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S2404416AbeLWC5x (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sat, 22 Dec 2018 21:57:53 -0500
Received: by mail-pf1-f194.google.com with SMTP id u6so4387776pfh.11;
        Sat, 22 Dec 2018 18:57:52 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=from:to:cc:subject:date:message-id;
        bh=jzY8tImxS1dt+L6rpiXH7Qu6EdyrYXWUUbSwwyf9T7M=;
        b=ThW0RHWb2fLF2TE9Fvvq/LLqpIKexHf1Lpz8bxKcAPghlKtpNBHSlDxuyV6SLJO495
         akja+8SPswm8T4cyzGroCPLohXSwRviax0zoW3GZx58nRMCu5PEqQjYGQnDnAqfX/VC1
         Dl7w/OWa52ooBSdy6oslQyW09PhqPMLa3XwEI02LAXHbeyoxTLw7eQ79s+6C43qI4N4h
         Ovkmda9F/pGS/RW4gBwj1P5r++9KD+MQW3DkHXFwODKRlAPQP9zPT4JBFHBjBZy4q5Xu
         RwbgYln9LbVJRSe/rG7sjFZSb2M8bVxvP9gPsiTXEIqtx7QrdpldhdCZff6DW+uXa1J6
         CBDg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id;
        bh=jzY8tImxS1dt+L6rpiXH7Qu6EdyrYXWUUbSwwyf9T7M=;
        b=g1v0a11117h0clgYpbavcYBPIuyj0oDkEJMWfM08roTiRHlzyFlod9MGcH/aVFshcd
         qisfvsT1nzV4jP+JNAfW4M+v0LvCQ/1v3HDTB9asJsyNzPQ2F1IKvdwlMPAa0ulLWC8K
         iBM+xlxSwrunStB4evGDkrsYTe4usNdZPOv6HeJubDAHD0wwDeCYXQ04A/Dkn0OhLn9v
         BzvtP2yeDysjrgUKnBnnYOsSJcon7nZHFt5rXrN6uNm/oMjG6O5JNmSeRwU28S9tB1pe
         99HuyP5fdw8tBktmkRctVCEh0CdivQpJlu95ELamUEpUu8tpRvb2eGEa1n1fSldvUvxO
         NkLw==
X-Gm-Message-State: AJcUukeB/v00IPcX23LrzPDQcE3avnzp7mqt9coh3pi0CbLv0wEAhc1F
        igTQPX+gpaLXyWcJLWI97lciOQUq
X-Google-Smtp-Source: ALg8bN4B8aCWItyJx4gP7PIQvqYPv3ZyJH9p+pcTnQMX6P/K777rzeyNPBPVRYhYgJz0eH9z0vml1A==
X-Received: by 2002:a63:334a:: with SMTP id z71mr8061526pgz.400.1545533872359;
        Sat, 22 Dec 2018 18:57:52 -0800 (PST)
Received: from deepa-ubuntu.lan (c-98-234-52-230.hsd1.ca.comcast.net. [98.234.52.230])
        by smtp.gmail.com with ESMTPSA id g185sm34891525pfc.174.2018.12.22.18.57.50
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Sat, 22 Dec 2018 18:57:51 -0800 (PST)
From: Deepa Dinamani <deepa.kernel@gmail.com>
To: davem@davemloft.net, netdev@vger.kernel.org,
        linux-kernel@vger.kernel.org
Cc: linux-nfs@vger.kernel.org, viro@zeniv.linux.org.uk, arnd@arndb.de,
        y2038@lists.linaro.org
Subject: [PATCH v2 1/1] sock: Make sock->sk_stamp thread-safe
Date: Sat, 22 Dec 2018 18:57:35 -0800
Message-Id: <20181223025735.7591-1-deepa.kernel@gmail.com>
X-Mailer: git-send-email 2.17.1
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Al Viro mentioned (Message-ID
<20170626041334.GZ10672@ZenIV.linux.org.uk>)
that there is probably a race condition
lurking in accesses of sk_stamp on 32-bit machines.

sock->sk_stamp is of type ktime_t which is always an s64.
On a 32 bit architecture, we might run into situations of
unsafe access as the access to the field becomes non atomic.

Use seqlocks for synchronization.
This allows us to avoid using spinlocks for readers as
readers do not need mutual exclusion.

Another approach to solve this is to require sk_lock for all
modifications of the timestamps. The current approach allows
for timestamps to have their own lock: sk_stamp_lock.
This allows for the patch to not compete with already
existing critical sections, and side effects are limited
to the paths in the patch.

The addition of the new field maintains the data locality
optimizations from
commit 9115e8cd2a0c ("net: reorganize struct sock for better data
locality")

Note that all the instances of the sk_stamp accesses
are either through the ioctl or the syscall recvmsg.

Signed-off-by: Deepa Dinamani <deepa.kernel@gmail.com>
---
Changes since v1:
* fixed sunrpc sk_stamp update

 include/net/sock.h   | 16 +++++++++++++---
 net/compat.c         | 32 ++++++++++++++++++++++++++------
 net/core/sock.c      | 34 +++++++++++++++++++++++++++++-----
 net/sunrpc/svcsock.c |  2 ++
 4 files changed, 70 insertions(+), 14 deletions(-)

diff --git a/include/net/sock.h b/include/net/sock.h
index fe58aec00d09..2cb641606533 100644
--- a/include/net/sock.h
+++ b/include/net/sock.h
@@ -298,6 +298,7 @@ struct sock_common {
   *	@sk_filter: socket filtering instructions
   *	@sk_timer: sock cleanup timer
   *	@sk_stamp: time stamp of last packet received
+  *	@sk_stamp_seq: lock for accessing sk_stamp
   *	@sk_tsflags: SO_TIMESTAMPING socket options
   *	@sk_tskey: counter to disambiguate concurrent tstamp requests
   *	@sk_zckey: counter to order MSG_ZEROCOPY notifications
@@ -474,6 +475,7 @@ struct sock {
 	const struct cred	*sk_peer_cred;
 	long			sk_rcvtimeo;
 	ktime_t			sk_stamp;
+	seqlock_t		sk_stamp_seq;
 	u16			sk_tsflags;
 	u8			sk_shutdown;
 	u32			sk_tskey;
@@ -2311,8 +2313,11 @@ sock_recv_timestamp(struct msghdr *msg, struct sock *sk, struct sk_buff *skb)
 	    (hwtstamps->hwtstamp &&
 	     (sk->sk_tsflags & SOF_TIMESTAMPING_RAW_HARDWARE)))
 		__sock_recv_timestamp(msg, sk, skb);
-	else
+	else {
+		write_seqlock(&sk->sk_stamp_seq);
 		sk->sk_stamp = kt;
+		write_sequnlock(&sk->sk_stamp_seq);
+	}
 
 	if (sock_flag(sk, SOCK_WIFI_STATUS) && skb->wifi_acked_valid)
 		__sock_recv_wifi_status(msg, sk, skb);
@@ -2332,10 +2337,15 @@ static inline void sock_recv_ts_and_drops(struct msghdr *msg, struct sock *sk,
 
 	if (sk->sk_flags & FLAGS_TS_OR_DROPS || sk->sk_tsflags & TSFLAGS_ANY)
 		__sock_recv_ts_and_drops(msg, sk, skb);
-	else if (unlikely(sock_flag(sk, SOCK_TIMESTAMP)))
+	else if (unlikely(sock_flag(sk, SOCK_TIMESTAMP))) {
+		write_seqlock(&sk->sk_stamp_seq);
 		sk->sk_stamp = skb->tstamp;
-	else if (unlikely(sk->sk_stamp == SK_DEFAULT_STAMP))
+		write_sequnlock(&sk->sk_stamp_seq);
+	} else if (unlikely(sk->sk_stamp == SK_DEFAULT_STAMP)) {
+		write_seqlock(&sk->sk_stamp_seq);
 		sk->sk_stamp = 0;
+		write_sequnlock(&sk->sk_stamp_seq);
+	}
 }
 
 void __sock_tx_timestamp(__u16 tsflags, __u8 *tx_flags);
diff --git a/net/compat.c b/net/compat.c
index 6c9fceeefac0..17da30bd34a9 100644
--- a/net/compat.c
+++ b/net/compat.c
@@ -459,6 +459,7 @@ int compat_sock_get_timestamp(struct sock *sk, struct timeval __user *userstamp)
 {
 	struct compat_timeval __user *ctv;
 	int err;
+	unsigned int seq;
 	struct timeval tv;
 
 	if (COMPAT_USE_64BIT_TIME)
@@ -467,12 +468,21 @@ int compat_sock_get_timestamp(struct sock *sk, struct timeval __user *userstamp)
 	ctv = (struct compat_timeval __user *) userstamp;
 	err = -ENOENT;
 	sock_enable_timestamp(sk, SOCK_TIMESTAMP);
-	tv = ktime_to_timeval(sk->sk_stamp);
+
+	do {
+		seq = read_seqbegin(&sk->sk_stamp_seq);
+		tv = ktime_to_timeval(sk->sk_stamp);
+	} while (read_seqretry(&sk->sk_stamp_seq, seq));
+
 	if (tv.tv_sec == -1)
 		return err;
 	if (tv.tv_sec == 0) {
-		sk->sk_stamp = ktime_get_real();
-		tv = ktime_to_timeval(sk->sk_stamp);
+		ktime_t kt = ktime_get_real();
+
+		write_seqlock(&sk->sk_stamp_seq);
+		sk->sk_stamp = kt;
+		write_sequnlock(&sk->sk_stamp_seq);
+		tv = ktime_to_timeval(kt);
 	}
 	err = 0;
 	if (put_user(tv.tv_sec, &ctv->tv_sec) ||
@@ -486,6 +496,7 @@ int compat_sock_get_timestampns(struct sock *sk, struct timespec __user *usersta
 {
 	struct compat_timespec __user *ctv;
 	int err;
+	unsigned int seq;
 	struct timespec ts;
 
 	if (COMPAT_USE_64BIT_TIME)
@@ -494,12 +505,21 @@ int compat_sock_get_timestampns(struct sock *sk, struct timespec __user *usersta
 	ctv = (struct compat_timespec __user *) userstamp;
 	err = -ENOENT;
 	sock_enable_timestamp(sk, SOCK_TIMESTAMP);
-	ts = ktime_to_timespec(sk->sk_stamp);
+
+	do {
+		seq = read_seqbegin(&sk->sk_stamp_seq);
+		ts = ktime_to_timespec(sk->sk_stamp);
+	} while (read_seqretry(&sk->sk_stamp_seq, seq));
+
 	if (ts.tv_sec == -1)
 		return err;
 	if (ts.tv_sec == 0) {
-		sk->sk_stamp = ktime_get_real();
-		ts = ktime_to_timespec(sk->sk_stamp);
+		ktime_t kt = ktime_get_real();
+
+		write_seqlock(&sk->sk_stamp_seq);
+		sk->sk_stamp = kt;
+		write_sequnlock(&sk->sk_stamp_seq);
+		ts = ktime_to_timespec(kt);
 	}
 	err = 0;
 	if (put_user(ts.tv_sec, &ctv->tv_sec) ||
diff --git a/net/core/sock.c b/net/core/sock.c
index f0e0e12b2e0d..a9a99af24a95 100644
--- a/net/core/sock.c
+++ b/net/core/sock.c
@@ -2783,6 +2783,7 @@ void sock_init_data(struct socket *sock, struct sock *sk)
 	sk->sk_sndtimeo		=	MAX_SCHEDULE_TIMEOUT;
 
 	sk->sk_stamp = SK_DEFAULT_STAMP;
+	seqlock_init(&sk->sk_stamp_seq);
 	atomic_set(&sk->sk_zckey, 0);
 
 #ifdef CONFIG_NET_RX_BUSY_POLL
@@ -2880,15 +2881,27 @@ EXPORT_SYMBOL(lock_sock_fast);
 int sock_get_timestamp(struct sock *sk, struct timeval __user *userstamp)
 {
 	struct timeval tv;
+	unsigned int seq;
 
 	sock_enable_timestamp(sk, SOCK_TIMESTAMP);
-	tv = ktime_to_timeval(sk->sk_stamp);
+
+	do {
+		seq = read_seqbegin(&sk->sk_stamp_seq);
+		tv = ktime_to_timeval(sk->sk_stamp);
+	} while (read_seqretry(&sk->sk_stamp_seq, seq));
+
 	if (tv.tv_sec == -1)
 		return -ENOENT;
 	if (tv.tv_sec == 0) {
-		sk->sk_stamp = ktime_get_real();
-		tv = ktime_to_timeval(sk->sk_stamp);
+		ktime_t kt = ktime_get_real();
+
+		write_seqlock(&sk->sk_stamp_seq);
+		sk->sk_stamp = kt;
+		write_sequnlock(&sk->sk_stamp_seq);
+
+		tv = ktime_to_timeval(kt);
 	}
+
 	return copy_to_user(userstamp, &tv, sizeof(tv)) ? -EFAULT : 0;
 }
 EXPORT_SYMBOL(sock_get_timestamp);
@@ -2896,13 +2909,24 @@ EXPORT_SYMBOL(sock_get_timestamp);
 int sock_get_timestampns(struct sock *sk, struct timespec __user *userstamp)
 {
 	struct timespec ts;
+	unsigned int seq;
 
 	sock_enable_timestamp(sk, SOCK_TIMESTAMP);
-	ts = ktime_to_timespec(sk->sk_stamp);
+
+	do {
+		seq = read_seqbegin(&sk->sk_stamp_seq);
+		ts = ktime_to_timespec(sk->sk_stamp);
+	} while (read_seqretry(&sk->sk_stamp_seq, seq));
+
 	if (ts.tv_sec == -1)
 		return -ENOENT;
 	if (ts.tv_sec == 0) {
-		sk->sk_stamp = ktime_get_real();
+		ktime_t kt = ktime_get_real();
+
+		write_seqlock(&sk->sk_stamp_seq);
+		sk->sk_stamp = kt;
+		write_sequnlock(&sk->sk_stamp_seq);
+
 		ts = ktime_to_timespec(sk->sk_stamp);
 	}
 	return copy_to_user(userstamp, &ts, sizeof(ts)) ? -EFAULT : 0;
diff --git a/net/sunrpc/svcsock.c b/net/sunrpc/svcsock.c
index 986f3ed7d1a2..cd12177720aa 100644
--- a/net/sunrpc/svcsock.c
+++ b/net/sunrpc/svcsock.c
@@ -549,7 +549,9 @@ static int svc_udp_recvfrom(struct svc_rqst *rqstp)
 		/* Don't enable netstamp, sunrpc doesn't
 		   need that much accuracy */
 	}
+	write_seqlock(&svsk->sk_sk->sk_stamp_seq);
 	svsk->sk_sk->sk_stamp = skb->tstamp;
+	write_sequnlock(&svsk->sk_sk->sk_stamp_seq);
 	set_bit(XPT_DATA, &svsk->sk_xprt.xpt_flags); /* there may be more data... */
 
 	len  = skb->len;
-- 
2.17.1

