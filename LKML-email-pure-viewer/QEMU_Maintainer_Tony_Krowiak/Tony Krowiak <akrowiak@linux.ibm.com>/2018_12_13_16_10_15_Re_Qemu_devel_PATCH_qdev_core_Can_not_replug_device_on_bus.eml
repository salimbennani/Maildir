Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  14 Dec 2018 08:39:04 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 73EEF58079D
	for <like.xu@linux.intel.com>; Thu, 13 Dec 2018 08:11:00 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by fmsmga006-1.fm.intel.com with ESMTP; 13 Dec 2018 08:10:59 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AtDYhgBbW2euZYPylNr6ZU5n/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpsy7ZB7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTzJPAo28?=
 =?us-ascii?q?YYUBAeUOMuRXoJXyqVUNsBW+HQuhCuHgxzNViHL6wbM10/86HAHa3gEtBc4CvG?=
 =?us-ascii?q?jaodj3MqoZTOC7zLPPzTXGd/5YxzD96I7Icxs8pP+MR7VwcMTQyUY1FAPOk1Kd?=
 =?us-ascii?q?ppbmPzOP0eQMvWmb4PBjVe+0j24nqgdxoiWgx8s2i4nGnYcVxkrY+iV+xYY4PN?=
 =?us-ascii?q?u1Q1N4b968CJZcqT2WOohsTs8/Xm1luzw2xqMItJO7ZiQG1ZYqywbbZvCdcoWE?=
 =?us-ascii?q?/gjvWeSRLDtimn5odrKyihCv+ka60OL8TNO70FNSoypFjNbMsncN2gTX6siGUf?=
 =?us-ascii?q?t94lyh1SyA1wDV9+FIO0c0lbDUK5I5w74wkIQcsVjbEyPohEn7j7Waelg59uWr?=
 =?us-ascii?q?8ejrfLvrq5+GO4NpiAzyKqEulda+AeQ8PAgORW+b+eGk2b3640L5RahKguQrna?=
 =?us-ascii?q?bHrpDVO8AbqreiDA9Sz4Yj7QqwACm90NgfmXkHLVFFdwydg4nmJlHDOPT4Dfa5?=
 =?us-ascii?q?g1SxnzZn3fHGPrv9AprTKnjPiqvufbF460NHzgozytZf551SCrEcOv7zXVXxtN?=
 =?us-ascii?q?PAAh8jLwO02/rnCMl61o4GXWKPA6yZP73IvV6H++IiOO2MZI4TuDbgJPkp/f/u?=
 =?us-ascii?q?jXklmVADeamlx4cYaHe9HqcuHkOCfHC5gssdCXxY+U06Tff2kxuEVjhcYWv0WL?=
 =?us-ascii?q?gzoTQyCYajBIGEQZixgbuHx2CiE5hLI2xLFF2IQkrubJiODvIFaSaOJZ14nzkZ?=
 =?us-ascii?q?ELSsVYIlkAujrRL30KZPKO3S9SsF85X5249u+ufRmBouoCFyFNmXyGqXTmt5zV?=
 =?us-ascii?q?8PEh8/2KF76XR00VaImfxgiudZHvRX5vVUQkE7P5uaxOt/XZS6ew3GZJ+sQVOj?=
 =?us-ascii?q?T9mhH3llT9c4xtoDb0FVAdiujhnfmSGtBulGuaaMAckI9aTNl1vrINl8wnWOgK?=
 =?us-ascii?q?AilV45Q8JMHWmngLNvsQnZAsjClEDPxPXiTrgVwCOYrDTL9mGJpkwNFVcoCag?=
 =?us-ascii?q?=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BHAACzgxJcmBHrdtBjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUwUBAQsBgTCCTxODfIh4jRQtl1QUgV8SAQEYFIdFIjYHDQEDAQEBAQEBAgE?=
 =?us-ascii?q?TAQEBAQEICwsGGw4vgjYFAgMaAQaCWwEBAQECAQECDxEEEQ4KKQMDAQIGAQEKG?=
 =?us-ascii?q?AICIgQCAgMBUwYBCQMGAgEBAR2Cf4F5CAECApxJiVgBAQFufDOKMYELizEXgX+?=
 =?us-ascii?q?BEScMgjEuhEofgxyCVwKPR0c3hSmLIQmRUwYYgVyIICaBJ4YBgwSGKo90AgQGB?=
 =?us-ascii?q?QITAYFNDoF5MxoIGxU7gmyCJxcSjilUgQeJe1aBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0BHAACzgxJcmBHrdtBjHAEBAQQBAQcEAQGBUwUBAQsBgTC?=
 =?us-ascii?q?CTxODfIh4jRQtl1QUgV8SAQEYFIdFIjYHDQEDAQEBAQEBAgETAQEBAQEICwsGG?=
 =?us-ascii?q?w4vgjYFAgMaAQaCWwEBAQECAQECDxEEEQ4KKQMDAQIGAQEKGAICIgQCAgMBUwY?=
 =?us-ascii?q?BCQMGAgEBAR2Cf4F5CAECApxJiVgBAQFufDOKMYELizEXgX+BEScMgjEuhEofg?=
 =?us-ascii?q?xyCVwKPR0c3hSmLIQmRUwYYgVyIICaBJ4YBgwSGKo90AgQGBQITAYFNDoF5Mxo?=
 =?us-ascii?q?IGxU7gmyCJxcSjilUgQeJe1aBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,349,1539673200"; 
   d="scan'208";a="57351415"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 13 Dec 2018 08:10:59 -0800
Received: from localhost ([::1]:53505 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gXTZi-0000B5-Dg
	for like.xu@linux.intel.com; Thu, 13 Dec 2018 11:10:58 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:37095)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <akrowiak@linux.ibm.com>) id 1gXTZR-00009k-Eo
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 11:10:42 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <akrowiak@linux.ibm.com>) id 1gXTZN-0007us-CC
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 11:10:41 -0500
Received: from mx0b-001b2d01.pphosted.com ([148.163.158.5]:41904
	helo=mx0a-001b2d01.pphosted.com)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <akrowiak@linux.ibm.com>)
	id 1gXTZN-0007sg-5A
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 11:10:37 -0500
Received: from pps.filterd (m0098413.ppops.net [127.0.0.1])
	by mx0b-001b2d01.pphosted.com (8.16.0.22/8.16.0.22) with SMTP id
	wBDGA5I6118075
	for <qemu-devel@nongnu.org>; Thu, 13 Dec 2018 11:10:35 -0500
Received: from e34.co.us.ibm.com (e34.co.us.ibm.com [32.97.110.152])
	by mx0b-001b2d01.pphosted.com with ESMTP id 2pbr04hk05-1
	(version=TLSv1.2 cipher=AES256-GCM-SHA384 bits=256 verify=NOT)
	for <qemu-devel@nongnu.org>; Thu, 13 Dec 2018 11:10:31 -0500
Received: from localhost
	by e34.co.us.ibm.com with IBM ESMTP SMTP Gateway: Authorized Use Only!
	Violators will be prosecuted
	for <qemu-devel@nongnu.org> from <akrowiak@linux.ibm.com>;
	Thu, 13 Dec 2018 16:10:23 -0000
Received: from b03cxnp08025.gho.boulder.ibm.com (9.17.130.17)
	by e34.co.us.ibm.com (192.168.1.134) with IBM ESMTP SMTP Gateway:
	Authorized Use Only! Violators will be prosecuted; 
	(version=TLSv1/SSLv3 cipher=AES256-GCM-SHA384 bits=256/256)
	Thu, 13 Dec 2018 16:10:20 -0000
Received: from b03ledav002.gho.boulder.ibm.com
	(b03ledav002.gho.boulder.ibm.com [9.17.130.233])
	by b03cxnp08025.gho.boulder.ibm.com (8.14.9/8.14.9/NCO v10.0) with
	ESMTP id wBDGAJEX23330836
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256
	verify=FAIL); Thu, 13 Dec 2018 16:10:19 GMT
Received: from b03ledav002.gho.boulder.ibm.com (unknown [127.0.0.1])
	by IMSVA (Postfix) with ESMTP id F32B613605E;
	Thu, 13 Dec 2018 16:10:18 +0000 (GMT)
Received: from b03ledav002.gho.boulder.ibm.com (unknown [127.0.0.1])
	by IMSVA (Postfix) with ESMTP id 7C8F3136059;
	Thu, 13 Dec 2018 16:10:15 +0000 (GMT)
Received: from [9.60.75.235] (unknown [9.60.75.235])
	by b03ledav002.gho.boulder.ibm.com (Postfix) with ESMTP;
	Thu, 13 Dec 2018 16:10:15 +0000 (GMT)
To: Halil Pasic <pasic@linux.ibm.com>, Igor Mammedov <imammedo@redhat.com>
References: <1544469254-11629-1-git-send-email-akrowiak@linux.ibm.com>
	<20181211162303.2e581899@redhat.com>
	<ee5f36b2-e0a0-cdee-ad9a-dbeb36f1583c@linux.ibm.com>
	<20181213130959.4c863705@redhat.com>
	<20181213140341.2b81386d@oc2783563651>
From: Tony Krowiak <akrowiak@linux.ibm.com>
Date: Thu, 13 Dec 2018 11:10:15 -0500
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
	Thunderbird/60.2.1
MIME-Version: 1.0
In-Reply-To: <20181213140341.2b81386d@oc2783563651>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Language: en-US
Content-Transfer-Encoding: 7bit
X-TM-AS-GCONF: 00
x-cbid: 18121316-0016-0000-0000-00000963FCE1
X-IBM-SpamModules-Scores: 
X-IBM-SpamModules-Versions: BY=3.00010219; HX=3.00000242; KW=3.00000007;
	PH=3.00000004; SC=3.00000271; SDB=6.01131231; UDB=6.00587882;
	IPR=6.00911362; 
	MB=3.00024681; MTD=3.00000008; XFM=3.00000015; UTC=2018-12-13 16:10:22
X-IBM-AV-DETECTION: SAVI=unused REMOTE=unused XFE=unused
x-cbparentid: 18121316-0017-0000-0000-00004164B898
Message-Id: <e1c5db7e-8d11-8d2b-8665-3494e66d89b7@linux.ibm.com>
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10434:, ,
	definitions=2018-12-13_03:, , signatures=0
X-Proofpoint-Spam-Details: rule=outbound_notspam policy=outbound score=0
	priorityscore=1501
	malwarescore=0 suspectscore=2 phishscore=0 bulkscore=0 spamscore=0
	clxscore=1015 lowpriorityscore=0 mlxscore=0 impostorscore=0
	mlxlogscore=999 adultscore=0 classifier=spam adjust=0 reason=mlx
	scancount=1 engine=8.0.1-1810050000 definitions=main-1812130139
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 3.x [generic] [fuzzy]
X-Received-From: 148.163.158.5
Subject: Re: [Qemu-devel] [PATCH] qdev/core: Can not replug device on bus
 that allows one device
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: thuth@redhat.com, qemu-devel@nongnu.org, armbru@redhat.com,
	borntraeger@de.ibm.com, pbonzini@redhat.com, f4bug@amsat.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On 12/13/18 8:03 AM, Halil Pasic wrote:
> On Thu, 13 Dec 2018 13:09:59 +0100
> Igor Mammedov <imammedo@redhat.com> wrote:
> 
>> On Tue, 11 Dec 2018 14:41:00 -0500
>> Tony Krowiak <akrowiak@linux.ibm.com> wrote:
>>
>>> On 12/11/18 10:23 AM, Igor Mammedov wrote:
>>>> On Mon, 10 Dec 2018 14:14:14 -0500
>>>> Tony Krowiak <akrowiak@linux.ibm.com> wrote:
>>>>    
>>>>> If the maximum number of devices allowed on a bus is 1 and a device
>>>>> which is plugged into the bus is subsequently unplugged, attempting to replug
>>>>> the device fails with error "Bus 'xxx' does not support hotplugging".
>>>>> The "error" is detected in the qbus_is_full(BusState *bus) function
>>>>> (qdev_monitor.c) because bus->max_index >= bus_class->max_dev. The
>>>>> root of the problem is that the bus->max_index is not decremented when a device
>>>>> is unplugged from the bus. This patch fixes that problem.
>>>>>
>>>>> Signed-off-by: Tony Krowiak <akrowiak@linux.ibm.com>
>>>>> ---
>>>>>    hw/core/qdev.c | 2 ++
>>>>>    1 file changed, 2 insertions(+)
>>>>>
>>>>> diff --git a/hw/core/qdev.c b/hw/core/qdev.c
>>>>> index 6b3cc55b27c2..b35b0bf27925 100644
>>>>> --- a/hw/core/qdev.c
>>>>> +++ b/hw/core/qdev.c
>>>>> @@ -59,6 +59,8 @@ static void bus_remove_child(BusState *bus, DeviceState *child)
>>>>>                snprintf(name, sizeof(name), "child[%d]", kid->index);
>>>>>                QTAILQ_REMOVE(&bus->children, kid, sibling);
>>>>>    
>>>>> +            bus->max_index--;
>>>> that might cause problem when bus is allowed to has more than 1 device
>>>> and unplugged device is not the last one.
>>>> In that case bus_add_child() might create a child with duplicate name.
>>>
>>> I see what you are saying. The max_index is assigned to the child device
>>> index in the bus_add_child() function. The child device index is used to
>>> generate a unique name for the child device. The generated name is then
>>> used to link the child as a property to the bus. When the child is
>>> removed from the bus, the name is regenerated from the child device
>>> index and the named property is . It would therefore appear that the
>>> real purpose of the max_index is to generate indexes for children of
>>> the bus thus ensuring each child has a unique index. In other words,
>>> the max_index value is only tangentially connected to indexing the list
>>> of children.
>>>
>>> This results in a disconnect between the usage of the max_index value
>>> when adding and removing a child from the bus, and the check in the
>>> qbus_is_full() function which compares the max_index to the maximum
>>> number of devices allowed on the bus. If a child has been removed from
>>> the bus, the max_index value does not indicate whether the bus is
>>> full, it only specifies the index to be assigned to the next child to be
>>> added to the bus.
>>>
>>> To resolve this problem, I propose the following:
>>>
>>> Add the following field to struct BusState (include/hw/qdev_core.h):
>>>
>>> struct BusState {
>>>       Object obj;
>>>       DeviceState *parent;
>>>       char *name;
>>>       HotplugHandler *hotplug_handler;
>>>       int max_index;
>>>       bool realized;
>>> +    int num_children;
>>>       QTAILQ_HEAD(ChildrenHead, BusChild) children;
>>>       QLIST_ENTRY(BusState) sibling;
>>> };
>>>
>>> Add the following lines of code to the add/remove child functions in
>>> hw/core/qdev.c:
>>>
>>> static void bus_add_child(BusState *bus, DeviceState *child)
>>> {
>>>       char name[32];
>>>       BusChild *kid = g_malloc0(sizeof(*kid));
>>>
>>>       kid->index = bus->max_index++;
>>>       kid->child = child;
>>>       object_ref(OBJECT(kid->child));
>>>
>>>       QTAILQ_INSERT_HEAD(&bus->children, kid, sibling);
>>>
>>>       /* This transfers ownership of kid->child to the property.  */
>>>       snprintf(name, sizeof(name), "child[%d]", kid->index);
>>>       object_property_add_link(OBJECT(bus), name,
>>>                                object_get_typename(OBJECT(child)),
>>>                                (Object **)&kid->child,
>>>                                NULL, /* read-only property */
>>>                                0, /* return ownership on prop deletion */
>>>                                NULL);
>>>
>>> +    bus->num_children++;
>>> }
>>>
>>> static void bus_remove_child(BusState *bus, DeviceState *child)
>>> {
>>>       BusChild *kid;
>>>
>>>       QTAILQ_FOREACH(kid, &bus->children, sibling) {
>>>           if (kid->child == child) {
>>>               char name[32];
>>>
>>>               snprintf(name, sizeof(name), "child[%d]", kid->index);
>>>               QTAILQ_REMOVE(&bus->children, kid, sibling);
>>>
>>>               /* This gives back ownership of kid->child back to us.  */
>>>               object_property_del(OBJECT(bus), name, NULL);
>>>               object_unref(OBJECT(kid->child));
>>>               g_free(kid);
>>>
>>> +           bus->num_children--;
>>>
>>>               return;
>>>           }
>>>       }
>>> }
>>>
>>> Change the line of code in the qbus_is_full() function in
>>> qdev_monitor.c:
>>>
>>>
>>> static inline bool qbus_is_full(BusState *bus)
>>> {
>>>       BusClass *bus_class = BUS_GET_CLASS(bus);
>>> -    return bus_class->max_dev &&
>>> -           bus->max_index >= bus_class->max_dev;
>>> +    return bus_class->max_dev &&
>>> +           bus->num_children >= bus_class->max_dev;
>>> }
>>>
>>
>> looks good to me
>> [...]
>>
> 
> I agree, the second proposal looks reasonable. Can you send a proper
> patch so I can r-b it?

will do


> 
> Halil
> 


