Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 06 Dec 2018 08:54:20 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 17924580433;
	Wed,  5 Dec 2018 07:08:48 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 05 Dec 2018 07:08:47 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A7SKtqBF64Uy76zXh61gKp51GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75osS6bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJSiJPHI28?=
 =?us-ascii?q?YYsMAeQPM+lXoIvyqEcBoxulHQmhBvjiyiNKi3LswaE2z+osHAPA0Qc9H9wOqn?=
 =?us-ascii?q?PUrNDtOakSS++1zajJxijfYvxNwjjy8pPIeQ0mrPGCR71wcMvQxlE1GAzelVqf?=
 =?us-ascii?q?s5flMiiJ1uQMqWSU8+1gVee2hmMhtgp/oSCvy98yhoXVgo8Z0E3I+CtnzIovON?=
 =?us-ascii?q?G1S1J3bcSlHZZSry2WKot7T8E4T211uis21qcKtYO5cSQW0pgqxR7SZvqaeIaS?=
 =?us-ascii?q?+B3jTvyeITJgiXJlZr2/gxGy/FC+yu3zSMa0ykxGrilbndnWsHACyRjT5tKASv?=
 =?us-ascii?q?tn8UetwTeP1wbN5eFYOU04i7bXJpo7zrItmJcfr17PEjL1lUnqlqObd0cp9vCt?=
 =?us-ascii?q?6+v9Y7XmopGcN5VzigH7Kqkuns2/AeIlMgkBRmSb+vqz1Kfl/ULnRLVGl/o2k6?=
 =?us-ascii?q?ffsJ/EP8QWvbC5AwBL3YY58Rq/DCmp0M4enXYZKFJJYhWHj5LmO13WOvD3Ee+/?=
 =?us-ascii?q?g0iwkDds3/3GOrzhApbTIXTZn7bhYK1w60pdyAo10NBe6IhYCrAHIPLvREDxsM?=
 =?us-ascii?q?bUAQM+Mwyx2+znEsly1psCWWKTBa+UKKPSvkWJ5uIzOeaMY5UZuDbgK/c/4f7u?=
 =?us-ascii?q?gmQ0mVscfamvwJsWZ2q0HvVgI0WFf3Xshs0NHnsNvgo7VObqkkGNUSZPZ3auWK?=
 =?us-ascii?q?Ix/jM7CIW4AovZRYCth7qB3CG8HpBNYmBGC1aMEWrndomeWvcMbj6SLdFlkjAe?=
 =?us-ascii?q?SbehTIoh3wm0tADm07pnMvbU+ioAuJ35z9h15+rTlRIo+TxuFcud0XqAT2V1nm?=
 =?us-ascii?q?MOWj8307pzoU17ylefz6d4h+ZUGsBU5/NMSg06L4LTz/RmC9DuXQLMZtSJR0yg?=
 =?us-ascii?q?Qtm8BTExT8g+w9kBY0tmH9WijxbD3zelArMPlryLAoA0/bzY33TrO8l9zHPG3r?=
 =?us-ascii?q?E7j1Y6WstPKXGmhqln+gfOHYHJjVuWm7yqdasG2i7N73mMzWyJsEFcUw5wVKHF?=
 =?us-ascii?q?UGsbZkvXq9T5+0zDQ6WvCbQhLgtO18qCJrFWZd3uiFVMXO3jN8jGY2Kth2ewAg?=
 =?us-ascii?q?6Fya6WY4r0ZWoRxiXdB1ICkwAI43mGMxMzBiOgo2LYETxvGkjjY0Lq8elitny7?=
 =?us-ascii?q?SlU4wB2Nb01kz7C14AIaheSAS/MP2bIJoDshqzRxHFa6w9LWC9qBqxB9fKlGZt?=
 =?us-ascii?q?M9+lNH1WPftwxyJZGgK6FihlgDcwV4pU/u1hN3Cplensgutn8l0A1yKaeA2lNb?=
 =?us-ascii?q?azyYxYzwOqHQKmTq5h+vb7DZ217A39eW4KsA8+k4pEj5swGvFUoi9Gtn3sJR03?=
 =?us-ascii?q?ud4JXKEQUTXYjwUkYx6xh1ubXabjMh6IPT0H1mKbO0vSPa29I1GOslzQ6tftdC?=
 =?us-ascii?q?MK+eCAD+CcwbB8i0J+wslFikdRYEPOFU9K4pMMKqbfqG2Ki3POl+mDKql3hI4I?=
 =?us-ascii?q?d40kiU7SpzVvbI34oZw/GfxgaHTTb8g0u7vcDthI9EYiseHmyhxij+BY5df7F9?=
 =?us-ascii?q?cpwPCWizPcK33NJ+h5j2Vn5c9V6jAU4G2cCzdRqTaVz9wRNf1UANrXO7niu4yi?=
 =?us-ascii?q?R+kys1oaqHwCzO3+PieQIHO25KXmVjjU3gIZOpj9AcR0WoawkplB245Uf13aRb?=
 =?us-ascii?q?paJ/L3XNTkdMZST5M2ZiUq6ovLqYf8FP8I8osTlQUOmkY1CVUKT9oxgZ0yPkBW?=
 =?us-ascii?q?de3yo0dzKpupX4mRx1lmSdIW13rHrYf8Fw2Bje6MbdRf5XwjoJWi14hSPLCVi7?=
 =?us-ascii?q?Otmj5c+UmIvbsuCiS2KhUYVecCnxwoOHrie752xqARukkvC3m93nFxU60CDh29?=
 =?us-ascii?q?lrUyXIsAjzYo3x26umNuJne1FiBEXg5MpiBoF+jowwiYkT2XcAh5WZ53oHkXrp?=
 =?us-ascii?q?PtVd1qLzd34NRT8Nw97I7wnpwkxjLnSVx43nUnWR2NduZ96/YmkOwCIy89hKCL?=
 =?us-ascii?q?uI7LxDhSZ1p1u4rQHLbvRnkDYS1+Au6GIEjOETowUi0D+dAr8JEElcPCzskQmI?=
 =?us-ascii?q?7t+koKVWYmavbaa/1E5kkd+9C7GCpxlWWGzldZc6AS9w8sJ/PUrQ0H3074HoYt?=
 =?us-ascii?q?jRYsgVth2JiBfAlOlVJYk1lvoLgypnJG38sWcky+49kRxhw5W6sJKbJGVq+aKz?=
 =?us-ascii?q?GgRYOSHtZ8MP5jHtir5Tkd2M0ICoGpVhBy8HXJ/1Tf+zFDIStPLnNxuBETEmq3?=
 =?us-ascii?q?ebH6bfEhGb6Et8s33PFJWrPWmNJHYF1dViWAWdJEtHjQAWRjo6m4A2FhuwyMz9?=
 =?us-ascii?q?akt55S0R5l3lqhtK0O1oLALyUmPepAeudzc1R4KTLBtQ7gFe+UjVNdaS4f50Hy?=
 =?us-ascii?q?Fd5pehthCCKnSHZwRUCmEEQkyFB1f+Prm3+NnP6e6YCvClL/vJZ7WOpvdTV/OJ?=
 =?us-ascii?q?xZKpz4tn8CyANsSJPnl+EfI73lBPUmx+G8Tcgz8PUTAYlzrRb86Hoxex4i13od?=
 =?us-ascii?q?6+8PToWwLv5JGDC7hIMdVo9BC5n72DN/OLhCtiLTZY15UMxWLHybQF3V4SjT1u?=
 =?us-ascii?q?eCepEbgaqSHNS6fQkLdNDxEHcyNzKNdI76Uk0wZXJM7Ukcn12aB4j/IvD1dFVE?=
 =?us-ascii?q?fsmsWoZcwMPmG8O0nLBEeNNLSaOzLLx9v7br+7Sb1VlO9UrQG/uS6HE0//OTSO?=
 =?us-ascii?q?jyXpVxGqMe1WkC6XJgBRuIGjfRZrEmXjSNPmahumMN54lzE2wLs0hm/UOm4YKz?=
 =?us-ascii?q?Rzb0RNrriI5yNCnvp/A3BB7mZiLeScmyeW9e/YKpMXsfttGit1luJa7248y7ta?=
 =?us-ascii?q?9yxEQP11mC3Prt9huV2mk++PyiZ5XxpKsDpEmIWLvUAxcZneo7BMQ3fN+lot8G?=
 =?us-ascii?q?OMBg5C89JpENzmveZQ197TmbjbKTFe/taS9swZUYycfMaGNmcxdBnkAjjZCCMb?=
 =?us-ascii?q?QjOxc2LSnUpQlLeV7HLD6tBurpnqhYpLQ6VeEV84DPUXDmxhHcceO9F2WD0+mL?=
 =?us-ascii?q?KWhcJO4mCx+l2ZEMlXoJHMW+6IDPjHNjmUl/9HagEOzLe+Kp4cYMmzj0hjbERq?=
 =?us-ascii?q?2YHPEGLOUt1X5C5sdAk5pANK6ncoHUMp3EewRAqs8jc6H/S9hVZihAJ/c9Mk/j?=
 =?us-ascii?q?3l+H8rJxzBoy5mwxp5osnsnT3EKG25F6y3R4wDTnOs70U=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AqAACh6Adch0O0hNFkHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGCbH8ng3mIGYwOgWAIJRSDMZQHFIFxAQErAYdTIjQJDQEDAQEBAQEBAgE?=
 =?us-ascii?q?TAQEBCA0JCCkjDII2JAGCYgECAwECIAQZAQE3AQUJAQEKGAICJgICA0QQBgEKA?=
 =?us-ascii?q?gEHAQEBgxyCAgWkOXB8M4J2AQEFgQUBgT2EYAiBC4l3gRyCFoE4DIIxLoRqgxu?=
 =?us-ascii?q?CV499NYU5im0JBYIaAQQDjxUeiXCHPyyHQ4Eaj04CAgICBAUCFIFGgg0zGiODP?=
 =?us-ascii?q?IIbDBeDSoocAT44ATGBBQEBilwBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AqAACh6Adch0O0hNFkHQEBBQEHBQGBUQgBCwGCbH8ng3m?=
 =?us-ascii?q?IGYwOgWAIJRSDMZQHFIFxAQErAYdTIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjD?=
 =?us-ascii?q?II2JAGCYgECAwECIAQZAQE3AQUJAQEKGAICJgICA0QQBgEKAgEHAQEBgxyCAgW?=
 =?us-ascii?q?kOXB8M4J2AQEFgQUBgT2EYAiBC4l3gRyCFoE4DIIxLoRqgxuCV499NYU5im0JB?=
 =?us-ascii?q?YIaAQQDjxUeiXCHPyyHQ4Eaj04CAgICBAUCFIFGgg0zGiODPIIbDBeDSoocAT4?=
 =?us-ascii?q?4ATGBBQEBilwBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,317,1539673200"; 
   d="scan'208";a="55025488"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 05 Dec 2018 07:07:45 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728040AbeLEPEm (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 5 Dec 2018 10:04:42 -0500
Received: from fllv0015.ext.ti.com ([198.47.19.141]:51640 "EHLO
        fllv0015.ext.ti.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727182AbeLEPEl (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 5 Dec 2018 10:04:41 -0500
Received: from lelv0265.itg.ti.com ([10.180.67.224])
        by fllv0015.ext.ti.com (8.15.2/8.15.2) with ESMTP id wB5F4K1k008691;
        Wed, 5 Dec 2018 09:04:20 -0600
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=ti.com;
        s=ti-com-17Q1; t=1544022260;
        bh=TCEuzOFURhsIQBJniBkxDl5bGfdwFTkOlj1sEkXZMdk=;
        h=Subject:To:CC:References:From:Date:In-Reply-To;
        b=cR/NTGETiFLLc2MWeJyfzWYz/GOY3b+ei2NMOGTliUkBetjxGVdi2kpkkc3J7Tk5e
         E/5yjlWbyMaurRFq3lm/nLP3gDlVv+Lps21c7Xd2jbbSvHr5Y7rPIOCTrEeWw2LXNf
         98LpsXouu7jNa5HlTQq05fMDMSvBuW1QoxU3DTls=
Received: from DFLE102.ent.ti.com (dfle102.ent.ti.com [10.64.6.23])
        by lelv0265.itg.ti.com (8.15.2/8.15.2) with ESMTPS id wB5F4Ko5070243
        (version=TLSv1.2 cipher=AES256-GCM-SHA384 bits=256 verify=FAIL);
        Wed, 5 Dec 2018 09:04:20 -0600
Received: from DFLE110.ent.ti.com (10.64.6.31) by DFLE102.ent.ti.com
 (10.64.6.23) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256_P256) id 15.1.1591.10; Wed, 5
 Dec 2018 09:04:19 -0600
Received: from dlep33.itg.ti.com (157.170.170.75) by DFLE110.ent.ti.com
 (10.64.6.31) with Microsoft SMTP Server (version=TLS1_0,
 cipher=TLS_RSA_WITH_AES_256_CBC_SHA) id 15.1.1591.10 via Frontend Transport;
 Wed, 5 Dec 2018 09:04:19 -0600
Received: from [172.24.190.215] (ileax41-snat.itg.ti.com [10.172.224.153])
        by dlep33.itg.ti.com (8.14.3/8.13.8) with ESMTP id wB5F4GF4017571;
        Wed, 5 Dec 2018 09:04:17 -0600
Subject: Re: [PATCH 3/3] mmc: sdhci_am654: Add Initial Support for AM654 SDHCI
 driver
To: Adrian Hunter <adrian.hunter@intel.com>,
        <linux-kernel@vger.kernel.org>,
        <linux-arm-kernel@lists.infradead.org>,
        <devicetree@vger.kernel.org>, <linux-mmc@vger.kernel.org>
CC: <ulf.hansson@linaro.org>, <robh+dt@kernel.org>,
        <mark.rutland@arm.com>, <michal.simek@xilinx.com>, <kishon@ti.com>
References: <20181129161513.31734-1-faiz_abbas@ti.com>
 <20181129161513.31734-4-faiz_abbas@ti.com>
 <2618ec91-09d1-26f3-361e-34a073b1e5ea@intel.com>
From: Faiz Abbas <faiz_abbas@ti.com>
Message-ID: <dfe6c97a-6383-c697-88e5-279f6ca8136e@ti.com>
Date: Wed, 5 Dec 2018 20:37:06 +0530
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.2.1
MIME-Version: 1.0
In-Reply-To: <2618ec91-09d1-26f3-361e-34a073b1e5ea@intel.com>
Content-Type: text/plain; charset="utf-8"
Content-Language: en-US
Content-Transfer-Encoding: 7bit
X-EXCLAIMER-MD-CONFIG: e1e8a2fd-e40a-4ac6-ac9b-f7e9cc9ee180
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi Adrian,

On 05/12/18 7:12 PM, Adrian Hunter wrote:
> On 29/11/18 6:15 PM, Faiz Abbas wrote:
>> The host controllers on TI's AM654 SOCs are not compatible with
>> the phy and consumer model of the sdhci-of-arasan driver. It turns out
>> that for optimal operation at higher speeds, a special tuning procedure
>> needs to be implemented which involves configuration of platform
>> specific phy registers.
>>
>> Therefore, branch out to a new sdhci_am654 driver and add the phy
>> register space with all phy configurations to it. Populate AM654
>> specific callbacks to sdhci_ops and add SDHCI_QUIRKS wherever
>> applicable.
>>
>> Only add support for upto High Speed for SD card and upto DDR52 speed
>> mode for eMMC. Higher speeds will be added in subsequent patches.
>>
...
>> +		sdhci_am654->dll_on = true;
>> +	}
>> +}
>> +
>> +
> 
> Double blank line

Will fix.

> 
>> +static void sdhci_am654_set_power(struct sdhci_host *host, unsigned char mode,
>> +				  unsigned short vdd)
>> +{
>> +	if (!IS_ERR(host->mmc->supply.vmmc)) {
>> +		struct mmc_host *mmc = host->mmc;
>> +
>> +		mmc_regulator_set_ocr(mmc, mmc->supply.vmmc, vdd);
>> +	}
>> +	sdhci_set_power_noreg(host, mode, vdd);
>> +}
>> +
>> +struct sdhci_ops sdhci_am654_ops = {
>> +	.get_max_clock = sdhci_pltfm_clk_get_max_clock,
>> +	.get_timeout_clock = sdhci_pltfm_clk_get_max_clock,
>> +	.set_uhs_signaling = sdhci_set_uhs_signaling,
>> +	.set_bus_width = sdhci_set_bus_width,
>> +	.set_power = sdhci_am654_set_power,
>> +	.set_clock = sdhci_am654_set_clock,
>> +	.reset = sdhci_reset,
>> +};
>> +
>> +static const struct sdhci_pltfm_data sdhci_am654_pdata = {
>> +	.ops = &sdhci_am654_ops,
>> +	.quirks = SDHCI_QUIRK_INVERTED_WRITE_PROTECT |
>> +		  SDHCI_QUIRK_MULTIBLOCK_READ_ACMD12,
>> +	.quirks2 = SDHCI_QUIRK2_PRESET_VALUE_BROKEN,
>> +};
>> +
>> +static int sdhci_am654_init(struct sdhci_host *host)
>> +{
>> +	struct sdhci_pltfm_host *pltfm_host = sdhci_priv(host);
>> +	struct sdhci_am654_data *sdhci_am654 = sdhci_pltfm_priv(pltfm_host);
>> +	u32 ctl_cfg_2 = 0;
>> +	u32 val;
>> +	int ret;
>> +
>> +	regmap_read(sdhci_am654->base, PHY_STAT1, &val);
>> +	if (~val & CALDONE_MASK) {
>> +		/* Calibrate IO lines */
>> +		regmap_update_bits(sdhci_am654->base, PHY_CTRL1,
>> +				   PDB_MASK, PDB_MASK);
>> +		ret = regmap_read_poll_timeout(sdhci_am654->base, PHY_STAT1,
>> +					       val, val & CALDONE_MASK, 1, 20);
>> +		if (ret)
>> +			return ret;
>> +	}
>> +
>> +	/* Enable pins by setting IO mux to 0 */
>> +	regmap_update_bits(sdhci_am654->base, PHY_CTRL1,
>> +			   IOMUX_ENABLE_MASK, 0);
>> +
>> +	/* Set slot type based on SD or eMMC */
>> +	if (host->mmc->caps & MMC_CAP_NONREMOVABLE)
>> +		ctl_cfg_2 = SLOTTYPE_EMBEDDED;
>> +
>> +	regmap_update_bits(sdhci_am654->base, CTL_CFG_2,
>> +			   ctl_cfg_2, SLOTTYPE_MASK);
>> +
>> +	return sdhci_add_host(host);
>> +}
>> +
>> +static int sdhci_am654_get_of_property(struct platform_device *pdev,
>> +					struct sdhci_am654_data *sdhci_am654)
>> +{
>> +	struct device *dev = &pdev->dev;
>> +	int drv_strength;
>> +	int ret;
>> +
>> +	ret = device_property_read_u32(dev, "ti,trm-icp",
>> +				       &sdhci_am654->trm_icp);
>> +	if (ret)
>> +		return ret;
>> +
>> +	ret = device_property_read_u32(dev, "ti,otap-del-sel",
>> +				       &sdhci_am654->otap_del_sel);
>> +	if (ret)
>> +		return ret;
>> +
>> +	ret = device_property_read_u32(dev, "ti,driver-strength-ohm",
>> +				       &drv_strength);
>> +	if (ret)
>> +		return ret;
>> +
>> +	switch (drv_strength) {
>> +	case 50:
>> +		sdhci_am654->drv_strength = DRIVER_STRENGTH_50_OHM;
>> +		break;
>> +	case 33:
>> +		sdhci_am654->drv_strength = DRIVER_STRENGTH_33_OHM;
>> +		break;
>> +	case 66:
>> +		sdhci_am654->drv_strength = DRIVER_STRENGTH_66_OHM;
>> +		break;
>> +	case 100:
>> +		sdhci_am654->drv_strength = DRIVER_STRENGTH_100_OHM;
>> +		break;
>> +	case 40:
>> +		sdhci_am654->drv_strength = DRIVER_STRENGTH_40_OHM;
>> +		break;
>> +	default:
>> +		dev_err(dev, "Invalid driver strength\n");
>> +		return -EINVAL;
>> +	}
>> +
>> +	sdhci_get_of_property(pdev);
>> +
>> +	return 0;
>> +}
>> +
>> +static int sdhci_am654_probe(struct platform_device *pdev)
>> +{
>> +	struct sdhci_pltfm_host *pltfm_host;
>> +	struct sdhci_am654_data *sdhci_am654;
>> +	struct sdhci_host *host;
>> +	struct resource *res;
>> +	struct clk *clk_xin;
>> +	struct device *dev = &pdev->dev;
>> +	void __iomem *base;
>> +	int ret;
>> +
>> +	host = sdhci_pltfm_init(pdev, &sdhci_am654_pdata, sizeof(*sdhci_am654));
>> +	if (IS_ERR(host))
>> +		return PTR_ERR(host);
>> +
>> +	pltfm_host = sdhci_priv(host);
>> +	sdhci_am654 = sdhci_pltfm_priv(pltfm_host);
>> +
>> +	clk_xin = devm_clk_get(dev, "clk_xin");
>> +	if (IS_ERR(clk_xin)) {
>> +		dev_err(dev, "clk_xin clock not found.\n");
>> +		ret = PTR_ERR(clk_xin);
>> +		goto err_pltfm_free;
>> +	}
>> +
>> +	sdhci_am654->clk_ahb = devm_clk_get(dev, "clk_ahb");
>> +	if (IS_ERR(sdhci_am654->clk_ahb)) {
>> +		dev_err(dev, "clk_ahb clock not found.\n");
>> +		ret = PTR_ERR(sdhci_am654->clk_ahb);
>> +		goto err_pltfm_free;
>> +	}
> 
> Did you intend not to enable clks?

Yes. Clocks get enabled as a part of pm_runtime calls.
> 
>> +
>> +	pltfm_host->clk = clk_xin;
>> +
>> +	pm_runtime_enable(dev);
>> +	ret = pm_runtime_get_sync(dev);
>> +	if (ret > 0) {
> 
> Did you intend 'ret > 0'?

Sorry. That was intended to be < 0.

Thanks,
Faiz
