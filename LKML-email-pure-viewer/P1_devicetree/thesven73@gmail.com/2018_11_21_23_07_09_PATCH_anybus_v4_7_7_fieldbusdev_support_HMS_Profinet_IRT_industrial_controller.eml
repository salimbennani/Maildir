Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 22 Nov 2018 00:34:09 -0000
Received: from icoremail.net (unknown [209.85.214.181])
	by mail-app2 (Coremail) with SMTP id by_KCgDHH_rldPVbyvfIAQ--.58858S3;
	Wed, 21 Nov 2018 23:08:23 +0800 (CST)
Received: from mail-pl1-f181.google.com (unknown [209.85.214.181])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwB3Uz_hdPVbnwdkAA--.2094S3;
	Wed, 21 Nov 2018 23:08:17 +0800 (CST)
Received: by mail-pl1-f181.google.com with SMTP id s5-v6so5917161plq.11
        for <xuliker@zju.edu.cn>; Wed, 21 Nov 2018 07:08:17 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:from:to:cc:subject
         :date:message-id:in-reply-to:references:sender:precedence:list-id;
        bh=GBKo96zBI+ZQctKqIEzTLwEZ12K6JbgFDDyDuZuqsBc=;
        b=oFDDfzWB+5wdui0BMRdNp4ZHm007ht2MI5nPW/KwBVBBUQL1WI6gZbEtWxSbkRfXib
         mt1yb2/Kc80UzfC2+tnEydJNsyEP87WcW1wXABWT0SjbqkSRWwqBn47dxaXLiFKwhilY
         aXLNj2qC3op4rN8Ro8dZdaLUkY9h5zwCNF/9ejydBFZQWxRs+MQqSLJDs569UmoNwjah
         rO+bnLqRZkK9V66Eo8FOq7AhDEgmnloscfbBiENjZwlkROCzOlt/6jhNZuaehxuaopTF
         dy+cuX4KpJspl1rMQ9okQY3ZqRtmHWfQJNcYay4zyM4gcoaqqgvWftJOTrJM/0MQX8Tj
         zVHw==
X-Gm-Message-State: AA+aEWYl6aBE9lhuaBDADB1GrJrytE9p5ahq4p3EokxUf+QM6vGs/nDl
	AoSbJaX2buzeqxtKfDXfbwrODYZKdEFv2n78ydVvDIdSBf0xTlc=
X-Received: by 2002:a17:902:2904:: with SMTP id g4mr7095680plb.39.1542812897262;
        Wed, 21 Nov 2018 07:08:17 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:d106:0:0:0:0 with SMTP id l6-v6csp2071730pju;
        Wed, 21 Nov 2018 07:08:16 -0800 (PST)
X-Google-Smtp-Source: AJdET5eJNLxqBnuJSkPGG6Ik6XfVZHtxLfGsRiiLEKXSlPAN9dl9AD9krdCVdr0jWvnfVC32M3AZ
X-Received: by 2002:a62:4194:: with SMTP id g20-v6mr7186348pfd.44.1542812896290;
        Wed, 21 Nov 2018 07:08:16 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542812896; cv=none;
        d=google.com; s=arc-20160816;
        b=RWCCpCcasEubn7n4oN6pBuBYQ5tv1THQzPbXIrdjXvbF50MMcJEe0YNbykxW8kxAUP
         9CiGeY6lQcQ25z6FUqPSkfot1f9m9bARnOm3LxxT1iwN94Lc5l+ICTfHB3JDQh6szMAh
         ljtr889TQDj5Nayo2ATkFj/9ICHhDKPY4rcXJnH9gw0vpAhqlQkeiyHt9vqtT3JxHymA
         YLqMFNCZ+1eqIoZTsSXD/SG76gXFhWKPf5Q5yLXBJJNRn5sGvMFs1TQqWedK7rgmBH2F
         XiO19jXE+0worUaCIBXm3G5k/35Ncig4vdQiF6tVUx77WDiJgn1ViErq7yp294U6nuVR
         l8Ag==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:references:in-reply-to:message-id:date
         :subject:cc:to:from:dkim-signature;
        bh=GBKo96zBI+ZQctKqIEzTLwEZ12K6JbgFDDyDuZuqsBc=;
        b=ViTcjq0+58nBMqz+tocd7/Bwv4qlc8rB90Ou3mTg1zD/HfB8nQIr2LJ6KMLxvsYN48
         Z3i+ggu1gahxr5TruPZEcueE310y1ws7e+SJSWGxhyyLbrSyzDVaAyFcpDNnswm8+AUj
         5t8oSgmA5N0SijnH2Dq/oHppCf3iHB9lp7Rak7pmvEX+pTWHb+PhTW91tSqAUBSzxAsG
         3gMdAsDnzRQ/BF7Sv7PJCWLBTtYNPdY7q88l+TOs7ndaYsRTpUlA2aIXGGjq4A3Pla5m
         bzcNqtXzwwlsct+CeBmDLgWQWTXPRr6hp8BzEYPiS+Z0eq5Zsnbaj/zZjjG5VUr2n1VA
         ogvQ==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@gmail.com header.s=20161025 header.b=ISC7tnyk;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;
       dmarc=pass (p=NONE sp=QUARANTINE dis=NONE) header.from=gmail.com
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id u25si48727164pgm.532.2018.11.21.07.07.47;
        Wed, 21 Nov 2018 07:08:16 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1731354AbeKVBmX (ORCPT <rfc822;nullbytes00@gmail.com>
        + 99 others); Wed, 21 Nov 2018 20:42:23 -0500
Received: from mail-io1-f65.google.com ([209.85.166.65]:33023 "EHLO
        mail-io1-f65.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1731269AbeKVBmW (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 21 Nov 2018 20:42:22 -0500
Received: by mail-io1-f65.google.com with SMTP id f12-v6so4298838iog.0;
        Wed, 21 Nov 2018 07:07:33 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=from:to:cc:subject:date:message-id:in-reply-to:references;
        bh=GBKo96zBI+ZQctKqIEzTLwEZ12K6JbgFDDyDuZuqsBc=;
        b=ISC7tnykYJE4lwRuvV9P6A5tNt2GgH7zZr4kA32leKGrUIkLErTEiFFKyfMqH4b863
         BRCJrRVAUPuplCS/JcUIL/+VlssPjn7/g6QdiON/uGJs1Nub5ZL/jhcrojI252LBkjyo
         h+g85Yu+Nsio35XPfohlfU25anDlv8qTpw+e1tHBhPPRqR8NivNnI0k0llvPw5DefLMK
         tQmeiqkkqvarob/kaJ3KAHjXIQthlnjP/P77PUh8SncqaIeZ7IM6lSwXG4/2GCD37xEB
         brHsH9Kx56QhliHXhSoYpgBvhwdWIMN5XpGxBFLPV5cEIRpNxNDO9/snDeghP+SQ8SZh
         dsuA==
X-Received: by 2002:a6b:c402:: with SMTP id y2mr5457457ioa.77.1542812853097;
        Wed, 21 Nov 2018 07:07:33 -0800 (PST)
Received: from svens-asus.arcx.com ([184.94.50.30])
        by smtp.gmail.com with ESMTPSA id c3sm5113119ioi.2.2018.11.21.07.07.30
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Wed, 21 Nov 2018 07:07:31 -0800 (PST)
From: thesven73@gmail.com
X-Google-Original-From: TheSven73@googlemail.com
To: svendev@arcx.com, robh+dt@kernel.org, linus.walleij@linaro.org
Cc: lee.jones@linaro.org, mark.rutland@arm.com, afaerber@suse.de,
        treding@nvidia.com, david@lechnology.com, noralf@tronnes.org,
        johan@kernel.org, monstr@monstr.eu, michal.vokac@ysoft.com,
        arnd@arndb.de, gregkh@linuxfoundation.org, john.garry@huawei.com,
        geert+renesas@glider.be, robin.murphy@arm.com,
        paul.gortmaker@windriver.com,
        sebastien.bourdelin@savoirfairelinux.com, icenowy@aosc.io,
        stuyoder@gmail.com, maxime.ripard@bootlin.com,
        linux-kernel@vger.kernel.org, devicetree@vger.kernel.org
Subject: [PATCH anybus v4 7/7] fieldbus_dev: support HMS Profinet IRT industrial controller
Date: Wed, 21 Nov 2018 10:07:09 -0500
Message-Id: <20181121150709.6030-8-TheSven73@googlemail.com>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20181121150709.6030-1-TheSven73@googlemail.com>
References: <20181121150709.6030-1-TheSven73@googlemail.com>
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwB3Uz_hdPVbnwdkAA--.2094S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoW3AFWfWFy5AryrAF17Xw1xAFb_yoWfGr17pa
	nxCa4fArWDJrnFk393JF18CrWaq3WrGa48uFyxG3sYv3W7AryvgF48tF95JFyrWrWqkrZ8
	K3Z0yFWrGryUArJanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUUjbIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUmYb7Iv0xC_tr1lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_tr0E3s1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr1j6F4UJwA2z4x0Y4vE
	x4A2jsIE14v26rxl6s0DM28EF7xvwVC2z280aVCY1x0267AKxVW0oVCq3wAac4AC62xK8x
	CEY4vEwIxC4wAS0I0E0xvYzxvE52x082IY62kv0487Mc02F40EFcxC0VAKzVAqx4xG6I80
	ewAv7VC0I7IYx2IY67AKxVWUXVWUAwAv7VC2z280aVAFwI0_Cr0_Gr1UMcvjeVCFs4IE7x
	kEbVWUJVW8JwACjcxG0xvY0x0EwIxGrwAKzVCY07xG64k0F24l7I0Y6sxI4wCY1x0264kE
	xVAvwVAq07x20xylc2xSY4AK6IIF6ryrMxkI7II2jI8vz4vEwIxGrwCYIxAIcVC0I7IYx2
	IY67AKxVW7JVWDJwCYIxAIcVC0I7IYx2IY6xkF7I0E14v26F4j6r4UJwCYIxAIcVC2z280
	aVAFwI0_GcCE3s1lcIIF0xvEx4A2jsIEc7CjxVAFwI0_GcCE3s1l42xK82IYc2Ij64vIr4
	1l42xK82IY64kExVAvwVAq07x20xyl4x8a6x804xWl4I8I3I0E4IkC6x0Yz7v_Jr0_Gr1l
	x2IqxVAqx4xG67AKxVWUJVWUGwC20s026x8GjcxK67AKxVWUGVWUWwC2zVAF1VAY17CE14
	v26r4a6rW5MIIYrxkI7VAKI48JMIIF0xvE42xK8VAvwI8IcIk0rVWUJVWUCbIYCTnIWIev
	Ja73UjIFyTuYvjxU6EoGUUUUU

The Anybus-S PROFINET IRT communication module provides instant integration
to any Ethernet based LAN via SMTP, FTP, HTTP as well as PROFINET and
Modbus-TCP. Additional protocols can be implemented on top of TCP/IP
or UDP using the transparent socket interface.

Official documentation:
https://www.anybus.com/docs/librariesprovider7/default-document-library
/manuals-design-guides/hms-hmsi-168-52.pdf

This implementation is an Anybus-S client driver, designed to be
instantiated by the Anybus-S bus driver when it discovers the Profinet
card.

If loaded successfully, the driver registers itself as a fieldbus_dev,
and userspace can access it through the fieldbus_dev interface.

Signed-off-by: Sven Van Asbroeck <svendev@arcx.com>
---
 drivers/fieldbus/Kconfig        |  17 +++
 drivers/fieldbus/Makefile       |   1 +
 drivers/fieldbus/hms-profinet.c | 223 ++++++++++++++++++++++++++++++++
 3 files changed, 241 insertions(+)
 create mode 100644 drivers/fieldbus/hms-profinet.c

diff --git a/drivers/fieldbus/Kconfig b/drivers/fieldbus/Kconfig
index 00a163a2cbe6..12b0fef591fb 100644
--- a/drivers/fieldbus/Kconfig
+++ b/drivers/fieldbus/Kconfig
@@ -36,4 +36,21 @@ config HMS_ANYBUSS_HOST
 	  typically provide fieldbus and industrial ethernet
 	  functionality.
 
+config HMS_PROFINET
+	tristate "HMS Profinet IRT Controller (Anybus-S)"
+	depends on FIELDBUS_DEV
+	select HMS_ANYBUSS_HOST
+	help
+	 If you say yes here you get support for the HMS Industrial
+	 Networks Profinet IRT Controller.
+
+	 It will be registered with the kernel as a fieldbus_dev,
+	 so userspace can interact with it via the fieldbus_dev userspace
+	 interface(s).
+
+	 This driver can also be built as a module. If so, the module
+	 will be called hms-profinet.
+
+	 If unsure, say N.
+
 endif
diff --git a/drivers/fieldbus/Makefile b/drivers/fieldbus/Makefile
index c47a4bd416f6..c3161c5ce0f1 100644
--- a/drivers/fieldbus/Makefile
+++ b/drivers/fieldbus/Makefile
@@ -9,3 +9,4 @@ fieldbus_dev_core-y		:= dev_core.o
 # Devices
 obj-$(CONFIG_ARCX_ANYBUS_BRIDGE) += anybus-bridge.o
 obj-$(CONFIG_HMS_ANYBUSS_HOST)	+= anybuss-host.o
+obj-$(CONFIG_HMS_PROFINET)	+= hms-profinet.o
diff --git a/drivers/fieldbus/hms-profinet.c b/drivers/fieldbus/hms-profinet.c
new file mode 100644
index 000000000000..434437829339
--- /dev/null
+++ b/drivers/fieldbus/hms-profinet.c
@@ -0,0 +1,223 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * HMS Profinet Client Driver
+ *
+ * Copyright (C) 2018 Arcx Inc
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/slab.h>
+#include <linux/fieldbus_dev.h>
+#include <linux/anybuss-client.h>
+
+#define PROFI_DPRAM_SIZE	512
+
+/*
+ * ---------------------------------------------------------------
+ * Anybus Profinet mailbox messages - definitions
+ * ---------------------------------------------------------------
+ * note that we're depending on the layout of these structures being
+ * exactly as advertised.
+ */
+
+struct msgMacAddr {
+	u8 addr[6];
+};
+
+struct profi_priv {
+	struct fieldbus_dev fbdev;
+	struct anybuss_client *client;
+	struct mutex enable_lock;
+	bool power_on;
+};
+
+static ssize_t
+profi_read_area(struct fieldbus_dev *fbdev, char __user *buf, size_t size,
+			loff_t *offset)
+{
+	struct profi_priv *priv = container_of(fbdev, struct profi_priv, fbdev);
+
+	return anybuss_read_output(priv->client, buf, size, offset);
+}
+
+static ssize_t
+profi_write_area(struct fieldbus_dev *fbdev, const char __user *buf,
+			size_t size, loff_t *offset)
+{
+	struct profi_priv *priv = container_of(fbdev, struct profi_priv, fbdev);
+
+	return anybuss_write_input(priv->client, buf, size, offset);
+}
+
+static int profi_id_get(struct fieldbus_dev *fbdev, char *buf,
+				size_t max_size)
+{
+	struct profi_priv *priv = container_of(fbdev, struct profi_priv, fbdev);
+	struct msgMacAddr response;
+	int ret;
+
+	ret = anybuss_recv_msg(priv->client, 0x0010, &response,
+						sizeof(response));
+	if (ret < 0)
+		return ret;
+	return snprintf(buf, max_size, "%02X:%02X:%02X:%02X:%02X:%02X\n",
+		response.addr[0], response.addr[1],
+		response.addr[2], response.addr[3],
+		response.addr[4], response.addr[5]);
+}
+
+static bool profi_enable_get(struct fieldbus_dev *fbdev)
+{
+	struct profi_priv *priv = container_of(fbdev, struct profi_priv, fbdev);
+	bool power_on;
+
+	mutex_lock(&priv->enable_lock);
+	power_on = priv->power_on;
+	mutex_unlock(&priv->enable_lock);
+
+	return power_on;
+}
+
+static int __profi_enable(struct profi_priv *priv)
+{
+	int ret;
+	struct anybuss_client *client = priv->client;
+	/* Initialization Sequence, Generic Anybus Mode */
+	const struct anybuss_memcfg mem_cfg = {
+		.input_io = 220,
+		.input_dpram = PROFI_DPRAM_SIZE,
+		.input_total = PROFI_DPRAM_SIZE,
+		.output_io = 220,
+		.output_dpram = PROFI_DPRAM_SIZE,
+		.output_total = PROFI_DPRAM_SIZE,
+		.offl_mode = AB_OFFL_MODE_CLEAR,
+	};
+
+	/*
+	 * switch anybus off then on, this ensures we can do a complete
+	 * configuration cycle in case anybus was already on.
+	 */
+	anybuss_set_power(client, false);
+	ret = anybuss_set_power(client, true);
+	if (ret)
+		goto err;
+	ret = anybuss_start_init(client, &mem_cfg);
+	if (ret)
+		goto err;
+	ret = anybuss_finish_init(client);
+	if (ret)
+		goto err;
+	priv->power_on = true;
+	return 0;
+
+err:
+	anybuss_set_power(client, false);
+	priv->power_on = false;
+	return ret;
+}
+
+static int __profi_disable(struct profi_priv *priv)
+{
+	struct anybuss_client *client = priv->client;
+
+	anybuss_set_power(client, false);
+	priv->power_on = false;
+	return 0;
+}
+
+static int profi_simple_enable(struct fieldbus_dev *fbdev, bool enable)
+{
+	int ret;
+	struct profi_priv *priv = container_of(fbdev, struct profi_priv, fbdev);
+
+	mutex_lock(&priv->enable_lock);
+	if (enable)
+		ret = __profi_enable(priv);
+	else
+		ret = __profi_disable(priv);
+	mutex_unlock(&priv->enable_lock);
+
+	return ret;
+}
+
+static void profi_on_area_updated(struct anybuss_client *client)
+{
+	struct profi_priv *priv = anybuss_get_drvdata(client);
+
+	fieldbus_dev_area_updated(&priv->fbdev);
+}
+
+static void profi_on_online_changed(struct anybuss_client *client, bool online)
+{
+	struct profi_priv *priv = anybuss_get_drvdata(client);
+
+	fieldbus_dev_online_changed(&priv->fbdev, online);
+}
+
+static int profinet_probe(struct anybuss_client *client)
+{
+	struct profi_priv *priv;
+	struct device *dev = &client->dev;
+	int err;
+
+	client->on_area_updated = profi_on_area_updated;
+	client->on_online_changed = profi_on_online_changed;
+	priv = devm_kzalloc(dev, sizeof(*priv), GFP_KERNEL);
+	if (!priv)
+		return -ENOMEM;
+	mutex_init(&priv->enable_lock);
+	priv->client = client;
+	priv->fbdev.read_area_sz = priv->fbdev.write_area_sz = PROFI_DPRAM_SIZE;
+	priv->fbdev.card_name = "HMS Profinet IRT (Anybus-S)";
+	priv->fbdev.fieldbus_type = FIELDBUS_DEV_TYPE_PROFINET;
+	priv->fbdev.read_area = profi_read_area;
+	priv->fbdev.write_area = profi_write_area;
+	priv->fbdev.fieldbus_id_get = profi_id_get;
+	priv->fbdev.enable_get = profi_enable_get;
+	priv->fbdev.simple_enable_set = profi_simple_enable;
+	priv->fbdev.parent = dev;
+	err = fieldbus_dev_register(&priv->fbdev);
+	if (err < 0)
+		return err;
+	dev_info(dev, "card detected, registered as %s",
+				dev_name(priv->fbdev.dev));
+	anybuss_set_drvdata(client, priv);
+
+	return 0;
+}
+
+static int profinet_remove(struct anybuss_client *client)
+{
+	struct profi_priv *priv = anybuss_get_drvdata(client);
+
+	fieldbus_dev_unregister(&priv->fbdev);
+	return 0;
+}
+
+static struct anybuss_client_driver profinet_driver = {
+	.probe = profinet_probe,
+	.remove = profinet_remove,
+	.driver		= {
+		.name   = "hms-profinet",
+		.owner	= THIS_MODULE,
+	},
+	.fieldbus_type = 0x0089,
+};
+
+static int __init profinet_init(void)
+{
+	return anybuss_client_driver_register(&profinet_driver);
+}
+module_init(profinet_init);
+
+static void __exit profinet_exit(void)
+{
+	return anybuss_client_driver_unregister(&profinet_driver);
+}
+module_exit(profinet_exit);
+
+MODULE_AUTHOR("Sven Van Asbroeck <svendev@arcx.com>");
+MODULE_DESCRIPTION("HMS Profinet IRT Driver (Anybus-S)");
+MODULE_LICENSE("GPL v2");
-- 
2.17.1
