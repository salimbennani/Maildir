Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 08:53:40 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id BA8EF58079D;
	Wed, 12 Dec 2018 09:35:29 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 12 Dec 2018 09:35:28 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AVCYlrhXvLSQlQ5FHcl1irK6+xQbV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhGEuadThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGoOy?=
 =?us-ascii?q?YZUSAeodM+hWrIf9qFkJoxu/GQaiC+zgyiRQhnL0xqA6z/0hEQTa0AwgA94Crn?=
 =?us-ascii?q?LZp8j1OqcIVuC1ybHFwyjEb/NQ1jf29Y7GchE8ofqRWr9was3RyU8gFwPBj1WQ?=
 =?us-ascii?q?tJfqPymP2eQTsmib6eVgWPmhi2E8sQ1+vj+vxsI1h4TPm4kbyUjE+D1nzIopId?=
 =?us-ascii?q?C0UlN3bNC6HJdKqi2XNJd6TtkjTmxqoCo21LwLtYCncCUP1Zgr2wPQZvmbfISU?=
 =?us-ascii?q?5h/vSOOcLSlkiH55fb+ygha//E2ux+D+Tca7zk5GriRbndTPqnwA0hne5dKaRv?=
 =?us-ascii?q?Z8/kqs3DSC2BrP5e5aJE07iKnWJIQkz7EtiJUesETOEynrk0vslqCWbF8r+u2w?=
 =?us-ascii?q?5uTnfLrmopicOpdqigHxLKsugNazAecmPQgUWWiU5+C82Kfk/U3jT7VGlvw2kq?=
 =?us-ascii?q?/Hv5DGPckXuLK1DgtP3oo+5RuzES2q3MkbkHUbNl5IeRCKg5DsO17UIfD4Cfm/?=
 =?us-ascii?q?g06rkDdu3/3GOrzhApPQLnnMibvhfqhy61RayAUtydBT/pVUC78HIP3tQE/8r8?=
 =?us-ascii?q?LYDhAnPAyu2ernC8ty1pkYWW2RBq+VKqTSsUWH5u43OemDeJcVuCrhK/gi//Pu?=
 =?us-ascii?q?iX45mVwDcqWz0poXdWu1HvBnI0WffHrtjc0NEWYMvgoiUuPqjEeOXiJUZ3a3R6?=
 =?us-ascii?q?g8/C00CJq6DYffQYCgmLyB0z26Hp1KfG9GDUqAEXf1d4qeXfcMZzmfIstgkjwC?=
 =?us-ascii?q?SLigRJUt1RCotA/m1bVnKvDY9TEftZLmzNJ1/fHclQku9TxoCMSQy2ONT2ZqkW?=
 =?us-ascii?q?8SRD8226Z/oUp6ylqY1ah4gvpYFcFc5v9TUwc6M4LcwPJ+C9zoRg3BedKJQk68?=
 =?us-ascii?q?Qtq6GTExUs4xw9gWbklnANWijhfD3ymwD78PjbOLBoc58qbd33j3OsZ8xGzK1K?=
 =?us-ascii?q?gnj1k6XMRPMXeqibJ49wjWH4TJiVmWl762daQA2y7A7GSDwnCIvE1CVA5wUL/K?=
 =?us-ascii?q?XXYQZkbNqdT550XCT6KhCLg9MwtBz9KCJbVOatHzkVpGQ/LjMszEY22tg2ewGQ?=
 =?us-ascii?q?qIxrSUYYX3YWodwjvSBFIEkw8J+3aGLhYxBiGmr2LaDzxuEFbvbljo8el/rnO7?=
 =?us-ascii?q?U0A1wxuLb01ny7q65BoVieaARPMU27IOoD0hpClsHFahw9LWDMKNqBd7c6VCf9?=
 =?us-ascii?q?wx+ldH2njftwxmIJOgKbtvhlofcwRxokPv2A97CoRGkcg2snwqyBB+Jr6f0FNE?=
 =?us-ascii?q?bzmYx4z/OqXLKmnu+xCic7LW2lDb0NaR5qcP6PQ5p0//vA2zEUoi6XFn09hT03?=
 =?us-ascii?q?uT/ZjKCAsSUZTsUkc47RR6prfaYjUj6IPQz3FjLa60sjra0dIzGOQl0gqgf8tY?=
 =?us-ascii?q?MK6cDgDyF9MVBsewJ+0qgVSmdQ8EM/1I+64yPMOmcOWG1bWvPOZhmjKmkGtG7J?=
 =?us-ascii?q?p80kKK6ypzVOrI04wZzPGf2wuNTy38g0u5ssDrhYBEYikfH2qiyST+GIFdfKxz?=
 =?us-ascii?q?fYYRBmeoLM263dF+h5/rW35F+1+vHVIG2Mm1eRWMa1zxxxFf1UMSoXa/gyu30y?=
 =?us-ascii?q?R0ky01rqqYxCHO2eXiewYdNW5RWWZiik3gIY6qgNAAXUikdhQmmwGh5Unn2adb?=
 =?us-ascii?q?vqN/L2/ITEdMfij2KXxiU6SqurqDZc5P9I0nsSFNXOugZlCaT6b3owEG3CP7A2?=
 =?us-ascii?q?te2Dc7eimqu5X4hRB7iHiRLG1urHrfYsxwwRbf5NrBRf9exDYGRS94iSXJCVi4?=
 =?us-ascii?q?JdWm4dKUl5LbuOCkS22hToFTcTXszY6Ytiu0/3dqAR68n/C0gNHnChI10Sz419?=
 =?us-ascii?q?lrUyXHshD8b5Lv16S7N+JnY0ZpCEX968p8BoFxjI8wiIsM1ngdg5Wf5WAHnnvr?=
 =?us-ascii?q?MdVHxaL+a2IARD4RzN7S+gTl2kxjLnSSyoL9V3WdxNZhZtagbmMX3CI9895FCK?=
 =?us-ascii?q?OO4LNYmit1p0KyrRjNbvhlgjcd1fwu5WYZg+4TuQoh1CWdAq0IEkleMizhjBCI?=
 =?us-ascii?q?79G4rKVKa2eja7mw1Exind+/CLGOuB1TWHH8ep06By9/8t1/ME7Q0H308ozkfd?=
 =?us-ascii?q?jQbdEJuRGOnRbPkfNVKI4vmfoQniVoJ3j9vXI+xu4/jBxu24y6vYedJ2Vs+qK5?=
 =?us-ascii?q?HgBXNjnva8wP/THtiL5UntyK0IC3ApVhBjILUYP0TfKvFTIer/XmOByIED0hsX?=
 =?us-ascii?q?ebArvfEBSb6EdnqXLPDp+qO2uWJHkf0dVtWh2dKFZDjwATWTUwhoQ5GRyyxMz9?=
 =?us-ascii?q?bEd54Sgc6UXipRtLzuJoKgPzUmPCpAqzbjc0SZ6fLAdZ7w1Y5kfVN9Ce4fx3Hy?=
 =?us-ascii?q?1C4pKhqwmNIHSBZwtUFWEJRlCEB1f7M7ms/9bA9vaXBvGkI/vSe7mOqvFeV/SV?=
 =?us-ascii?q?xZKpyIRm5C2BNsGOPnlkEv061VBPXXF/G8TFhToPTzYbmD7Kb86evB284DF4rt?=
 =?us-ascii?q?ij8PT3XwLi/YuOC7xPMdV25hC5m6GDO/SLhCZ+LzZY2YgBxXvJyLgZwV4ThDti?=
 =?us-ascii?q?dzirEbQcqyHNSLjclbNQDx4ecylzLtdH77og3glRPs7WktP12aB5jv42CFdFVE?=
 =?us-ascii?q?btmsKzZcwNLGGyKknHBFuQNLmdIT3Lwsf3Yb6zSLFKjeVUsQGwtiifE0P5IjuD?=
 =?us-ascii?q?kDzpXQi1Me5QlCGbIABeuIalfxl3FGjsV8jmZQO7MdNtiT02wKY5hnfLNW4aLD?=
 =?us-ascii?q?h9fFlBrryW7SNEnPp/H3ZN4WZiLemBgyyZ9fXXKo4Ksft3BSR5j/5a4HU/y7dP?=
 =?us-ascii?q?8C5IXuB6mCvMod5ouFymluiPyjx6UBtBsDpLhYSLvVl8NqXd7JVPRXHE/BcV52?=
 =?us-ascii?q?WKFxsKv8dlCsHou61IytnAjqTzKDJD89LS5cQdBsjUJ9iBMHouKhfpHD/UDA0Y?=
 =?us-ascii?q?TT+kL23fhkpdkO2M+X2RtJQ1tp/smJ9dAoNcAXUvEPoeBkMtN9UYPp5zXjRsnb?=
 =?us-ascii?q?PTqcMM4jLqpRLUSe1Zs4rBW/bUBu/gfmW3l75BMiAPx7ywCYUOftng3Eptblhn?=
 =?us-ascii?q?lp7DBUvWUvhDqGtqaQpi8xYFy2R3UmBmgxGtUQiq+nJGUKfsxhM=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BRAAC6RhFch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBVAQBAQsBgTAqggIECyeHQwOFLoszgg0UkkOGIANMEgEBGBMBhECCfiI3Bg0?=
 =?us-ascii?q?BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmEBAQEBAgEBAg8VEwYBATcBBAEJA?=
 =?us-ascii?q?QEBAQgYHhADLyUCBA4FBR2CNEuBagMNCAEEmzsCLolYAQEBgWozgnYBAQWFBhi?=
 =?us-ascii?q?CCQiMPBeBf4E4DBOBTkk1hQGDNYImizKEFZByVQmCJ49IgVyPaiyKAowNgl0CA?=
 =?us-ascii?q?gICBAUCDQEBBYFcgXgzGiN6AYJBPoFdDBeDSopTcoEFAQEhjF8BAQ?=
X-IPAS-Result: =?us-ascii?q?A0BRAAC6RhFch0O0hNFkHAEBAQQBAQcEAQGBVAQBAQsBgTA?=
 =?us-ascii?q?qggIECyeHQwOFLoszgg0UkkOGIANMEgEBGBMBhECCfiI3Bg0BAwEBAQEBAQIBE?=
 =?us-ascii?q?wEBAQgNCQgpIwyCNiQBgmEBAQEBAgEBAg8VEwYBATcBBAEJAQEBAQgYHhADLyU?=
 =?us-ascii?q?CBA4FBR2CNEuBagMNCAEEmzsCLolYAQEBgWozgnYBAQWFBhiCCQiMPBeBf4E4D?=
 =?us-ascii?q?BOBTkk1hQGDNYImizKEFZByVQmCJ49IgVyPaiyKAowNgl0CAgICBAUCDQEBBYF?=
 =?us-ascii?q?cgXgzGiN6AYJBPoFdDBeDSopTcoEFAQEhjF8BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,345,1539673200"; 
   d="scan'208";a="55628154"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 12 Dec 2018 09:35:18 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728198AbeLLRfE (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 12 Dec 2018 12:35:04 -0500
Received: from mx0b-00082601.pphosted.com ([67.231.153.30]:44956 "EHLO
        mx0b-00082601.pphosted.com" rhost-flags-OK-OK-OK-OK)
        by vger.kernel.org with ESMTP id S1727845AbeLLRfD (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 12 Dec 2018 12:35:03 -0500
Received: from pps.filterd (m0148460.ppops.net [127.0.0.1])
        by mx0a-00082601.pphosted.com (8.16.0.27/8.16.0.27) with SMTP id wBCHYGip023452;
        Wed, 12 Dec 2018 09:34:25 -0800
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=fb.com; h=from : to : cc : subject
 : date : message-id : references : in-reply-to : content-type : content-id
 : content-transfer-encoding : mime-version; s=facebook;
 bh=Bw9qNjBLMZikZoPo6otWiJpeM3H6Ae9EgFjG7cJ+gC0=;
 b=OE6ypCDjNPYObr1EZtccYaA6K67WaNU6EQY81MOBBiismWTRFMGeXFI6zMYgyrPjt69R
 J4XrvNR8qLxB74xJHook9xa4juKlCXaZYo22AKaliiR46bHu0mrtTFhWxsIe6rqmptfe
 anpCidZx4KxJCKcBZcnOSFJfuq/ga82/qKE= 
Received: from maileast.thefacebook.com ([199.201.65.23])
        by mx0a-00082601.pphosted.com with ESMTP id 2pb41c0pea-1
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-SHA384 bits=256 verify=NOT);
        Wed, 12 Dec 2018 09:34:24 -0800
Received: from frc-mbx02.TheFacebook.com (2620:10d:c0a1:f82::26) by
 frc-hub04.TheFacebook.com (2620:10d:c021:18::174) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384) id
 15.1.1531.3; Wed, 12 Dec 2018 09:33:31 -0800
Received: from frc-hub03.TheFacebook.com (2620:10d:c021:18::173) by
 frc-mbx02.TheFacebook.com (2620:10d:c0a1:f82::26) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384) id
 15.1.1531.3; Wed, 12 Dec 2018 09:33:31 -0800
Received: from NAM05-DM3-obe.outbound.protection.outlook.com (192.168.183.28)
 by o365-in.thefacebook.com (192.168.177.73) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384) id 15.1.1531.3
 via Frontend Transport; Wed, 12 Dec 2018 09:33:30 -0800
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=fb.onmicrosoft.com;
 s=selector1-fb-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=Bw9qNjBLMZikZoPo6otWiJpeM3H6Ae9EgFjG7cJ+gC0=;
 b=kADGQHUoCqv/w8GPpj9IQjEv5hEbqt52Jgplbtm4gbXzITlux4f4Z/C7+Xw3oLyK9RJcV8XY6dzjf6mcd/19Ivrx1chWopqOv3X11RGOnJa4Ry83QA+3UBtiEqYzW3ep9p2iK5Ve7ZZeZCi1Q68zXyC08AUVKr9cbbk/Qm9SSIo=
Received: from MWHPR15MB1165.namprd15.prod.outlook.com (10.175.2.19) by
 MWHPR15MB1549.namprd15.prod.outlook.com (10.173.235.22) with Microsoft SMTP
 Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1404.22; Wed, 12 Dec 2018 17:33:28 +0000
Received: from MWHPR15MB1165.namprd15.prod.outlook.com
 ([fe80::a165:7ace:d8a:de65]) by MWHPR15MB1165.namprd15.prod.outlook.com
 ([fe80::a165:7ace:d8a:de65%8]) with mapi id 15.20.1404.026; Wed, 12 Dec 2018
 17:33:28 +0000
From: Song Liu <songliubraving@fb.com>
To: Arnaldo Carvalho de Melo <acme@kernel.org>
CC: Peter Zijlstra <peterz@infradead.org>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        "netdev@vger.kernel.org" <netdev@vger.kernel.org>,
        "ast@kernel.org" <ast@kernel.org>,
        "daniel@iogearbox.net" <daniel@iogearbox.net>,
        Kernel Team <Kernel-team@fb.com>,
        Steven Rostedt <rostedt@goodmis.org>
Subject: Re: [PATCH v3 perf, bpf-next 1/4] perf, bpf: Introduce
 PERF_RECORD_BPF_EVENT
Thread-Topic: [PATCH v3 perf, bpf-next 1/4] perf, bpf: Introduce
 PERF_RECORD_BPF_EVENT
Thread-Index: AQHUkan/BrxKv3p0HEGwaC6e4kWgY6V7FkWAgAADU4CAAESogA==
Date: Wed, 12 Dec 2018 17:33:28 +0000
Message-ID: <349F1EC9-107B-4A52-9721-69396B5E99A1@fb.com>
References: <20181211233351.4036381-1-songliubraving@fb.com>
 <20181211233351.4036381-2-songliubraving@fb.com>
 <20181212131549.GZ5289@hirez.programming.kicks-ass.net>
 <20181212132742.GB21027@kernel.org>
In-Reply-To: <20181212132742.GB21027@kernel.org>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-mailer: Apple Mail (2.3445.101.1)
x-originating-ip: [2620:10d:c090:200::5:37be]
x-ms-publictraffictype: Email
x-microsoft-exchange-diagnostics: 1;MWHPR15MB1549;20:LBx1RHCHDCYJw7YNjnYgb28TIustYYMEzFD+iXJ5XBSDTE92x+S+FwfHZwjJyxa/hhm39oBiRBscVM3Y6vi4TzzkzbksU9QvWRByoTa2ypGEmZMeGiticK9raTfijzfoib+NEBk9PXlisAzLEQj7/tLJj7JbNYjcCgZVEYKfmn0=
x-ms-exchange-antispam-srfa-diagnostics: SOS;
x-ms-office365-filtering-correlation-id: df9af030-a0bb-455d-2ba8-08d66057ed8f
x-microsoft-antispam: BCL:0;PCL:0;RULEID:(2390098)(7020095)(4652040)(8989299)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(5600074)(711020)(2017052603328)(7153060)(7193020);SRVR:MWHPR15MB1549;
x-ms-traffictypediagnostic: MWHPR15MB1549:
x-microsoft-antispam-prvs: <MWHPR15MB1549D24AB348BBCCC62E744FB3A70@MWHPR15MB1549.namprd15.prod.outlook.com>
x-ms-exchange-senderadcheck: 1
x-exchange-antispam-report-cfa-test: BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(5005006)(8121501046)(823302103)(10201501046)(3231455)(999002)(11241501185)(944501520)(52105112)(3002001)(93006095)(93001095)(148016)(149066)(150057)(6041310)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123562045)(20161123558120)(20161123564045)(20161123560045)(201708071742011)(7699051)(76991095);SRVR:MWHPR15MB1549;BCL:0;PCL:0;RULEID:;SRVR:MWHPR15MB1549;
x-forefront-prvs: 0884AAA693
x-forefront-antispam-report: SFV:NSPM;SFS:(10019020)(396003)(136003)(376002)(39860400002)(366004)(346002)(199004)(189003)(7736002)(106356001)(305945005)(476003)(478600001)(71200400001)(8936002)(36756003)(486006)(83716004)(25786009)(8676002)(68736007)(33656002)(2616005)(446003)(6486002)(256004)(50226002)(81166006)(14444005)(82746002)(46003)(229853002)(11346002)(81156014)(6436002)(14454004)(6916009)(2906002)(6246003)(76176011)(71190400001)(6512007)(53936002)(99286004)(4326008)(57306001)(105586002)(575784001)(316002)(97736004)(6506007)(5660300001)(54906003)(86362001)(93886005)(6116002)(186003)(53546011)(102836004);DIR:OUT;SFP:1102;SCL:1;SRVR:MWHPR15MB1549;H:MWHPR15MB1165.namprd15.prod.outlook.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;A:1;MX:1;
x-microsoft-antispam-message-info: QdsHMXrA3/tDcUseW4ZpiQuSdS8jcWuch8YeJG0vwZa0U+69F/8kx40T5kB9oS2yM32Jt6yrWRADn9p6Gbr+MGBk2bnALufTqSTVMLwnVPz6T7F7Uy8bpNvqCfl9TLFcsw2GKinBAvufQpEH+83CJVvr2nnGAfTbUzwvIt3b0qIK1I0BQHq/kIVDxaWHYQtJlbTep25MO5alfl1fj7SEuL2LtscOCAqIJf69odKze3c57xX4C5zxOgxqk09UVL8YAlGrUji17yQa8Lf3JTK5J0Le4Qjckd2/FrNb+3DH6E+JOUtGGLoaokaVeund5ctZ
spamdiagnosticoutput: 1:99
spamdiagnosticmetadata: NSPM
Content-Type: text/plain; charset="us-ascii"
Content-ID: <191117BFE399C74CAA395E8625FF4076@namprd15.prod.outlook.com>
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
X-MS-Exchange-CrossTenant-Network-Message-Id: df9af030-a0bb-455d-2ba8-08d66057ed8f
X-MS-Exchange-CrossTenant-originalarrivaltime: 12 Dec 2018 17:33:28.1646
 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: 8ae927fe-1255-47a7-a2af-5f3a069daaa2
X-MS-Exchange-Transport-CrossTenantHeadersStamped: MWHPR15MB1549
X-OriginatorOrg: fb.com
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10434:,, definitions=2018-12-12_04:,,
 signatures=0
X-Proofpoint-Spam-Reason: safe
X-FB-Internal: Safe
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org



> On Dec 12, 2018, at 5:27 AM, Arnaldo Carvalho de Melo <acme@kernel.org> w=
rote:
>=20
> Em Wed, Dec 12, 2018 at 02:15:49PM +0100, Peter Zijlstra escreveu:
>> On Tue, Dec 11, 2018 at 03:33:47PM -0800, Song Liu wrote:
>>> For better performance analysis of BPF programs, this patch introduces
>>> PERF_RECORD_BPF_EVENT, a new perf_event_type that exposes BPF program
>>> load/unload information to user space.
>>>=20
>>> Each BPF program may contain up to BPF_MAX_SUBPROGS (256) sub programs.
>>> The following example shows kernel symbols for a BPF program with 7
>>> sub programs:
>>>=20
>>>    ffffffffa0257cf9 t bpf_prog_b07ccb89267cf242_F
>>>    ffffffffa02592e1 t bpf_prog_2dcecc18072623fc_F
>>>    ffffffffa025b0e9 t bpf_prog_bb7a405ebaec5d5c_F
>>>    ffffffffa025dd2c t bpf_prog_a7540d4a39ec1fc7_F
>>>    ffffffffa025fcca t bpf_prog_05762d4ade0e3737_F
>>>    ffffffffa026108f t bpf_prog_db4bd11e35df90d4_F
>>>    ffffffffa0263f00 t bpf_prog_89d64e4abf0f0126_F
>>>    ffffffffa0257cf9 t bpf_prog_ae31629322c4b018__dummy_tracepoi
>>=20
>> Doesn't BPF have enough information to generate 'saner' names? Going by
>> the thing below, these sub-progs are actually functions, right?
>=20
> Yeah, this looks just like a symbol table, albeit just with functions,
> so far.
>>>        /*
>>>         * Record different types of bpf events:
>>>         *  enum perf_bpf_event_type {
>>>         *     PERF_BPF_EVENT_UNKNOWN           =3D 0,
>>>         *     PERF_BPF_EVENT_PROG_LOAD         =3D 1,
>>>         *     PERF_BPF_EVENT_PROG_UNLOAD       =3D 2,
>>>         *  };
>>>         *
>>>         * struct {
>>>         *      struct perf_event_header header;
>>>         *      u32                             type;
>>>         *      u32                             flags;
>>>         *      u32                             id; // prog_id or other =
id
>>>         *      u32                             sub_id; // subprog id
>>>         *
>>>         *      // for bpf_prog types, bpf prog or subprog
>>>         *      u8                              tag[BPF_TAG_SIZE];
>>>         *      u64                             addr;
>>>         *      u64                             len;
>>>         *      char                            name[];
>>>         *      struct sample_id                sample_id;
>>>         * };
>>>         */
>>=20
>> Isn't this mixing two different things (poorly)? The kallsym update and
>> the BPF load/unload ?
>>=20
>> And while this tracks the bpf kallsyms, it does not do all kallsyms.
>>=20
>> .... Oooh, I see the problem, everybody is doing their own custom
>> kallsym_{add,del}() thing, instead of having that in generic code :-(
>=20
>> This, for example, doesn't track module load/unload nor ftrace
>> trampolines, even though both affect kallsyms.
>=20
> So you think the best would have to be a PERF_RECORD_ that just states
> that code has been loaded at range (addr, len). I.e. much like
> PERF_RECORD_MMAP does, just for userspace? Then it could be used by BPF
> and any other kernel facility like the ones you described?
>=20
> There would be an area that would be used by each of these facilities to
> figure out further info, like we use the mmap->name to go and get the
> symbol table from ELF files, etc, but BPF could use for their specific
> stuff?
>=20
> The above is almost like PERF_RECORD_MMAP (PERF_BPF_EVENT_PROG_LOAD) +
> PERF_RECORD_MUNMAP(PERF_BPF_EVENT_PROG_UNLOAD) in one event, with this
> 'type' thing allowing for more stuff to be put in later, I guess.
>=20
> - Arnaldo

PERF_RECORD_MMAP and PERF_RECORD_BPF_EVENT are issued at different=20
granularities:=20

   One PERF_RECORD_MMAP is issued for each mmap, which may contain=20
   many symbols;
   PERF_RECORD_BPF_EVENT is issued for each symbol (sub program).=20

Unlike mmap to ELF file, where all symbols have static offsets within=20
the file, different sub programs of a BPF program have their own=20
page(s) and random starting addresses within the page(s). Therefore, we=20
cannot have one PERF_RECORD_BPF_EVENT to cover multiple sub programs.=20

Current version has these mmap-like PERF_RECORD_BPF_EVENT in perf.data,=20
which is sufficient for basic profiling cases. For annotation and source
line matching, use space need to process PERF_RECORD_BPF_EVENT (from=20
kernel and synthesized).=20

Thanks,
Song


>>> +void perf_event_bpf_event_prog(enum perf_bpf_event_type type,
>>> +			       struct bpf_prog *prog)
>>> +{
>>> +	if (!atomic_read(&nr_bpf_events))
>>> +		return;
>>> +
>>> +	if (type !=3D PERF_BPF_EVENT_PROG_LOAD &&
>>> +	    type !=3D PERF_BPF_EVENT_PROG_UNLOAD)
>>> +		return;
>>> +
>>> +	if (prog->aux->func_cnt =3D=3D 0) {
>>> +		perf_event_bpf_event_subprog(type, prog,
>>> +					     prog->aux->id, 0);
>>> +	} else {
>>> +		int i;
>>> +
>>> +		for (i =3D 0; i < prog->aux->func_cnt; i++)
>>> +			perf_event_bpf_event_subprog(type, prog->aux->func[i],
>>> +						     prog->aux->id, i);
>>> +	}
>>> +}
>>=20
>=20
> --=20
>=20
> - Arnaldo

