Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:26:45 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from mta-temp.ostc.intel.com (mta-temp.ostc.intel.com [10.54.63.100])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 1E55F58080F;
	Sat,  1 Dec 2018 18:20:52 -0800 (PST)
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by mta-temp.ostc.intel.com (Postfix) with ESMTPS id 566F160DD5;
	Fri, 30 Nov 2018 16:35:10 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga001-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 30 Nov 2018 16:34:15 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ArwyOXx30/VYP2reDsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segSLf/xwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJBUMhPSiJBDI2y?=
 =?us-ascii?q?YIkMAeUPMulXs5L9p0MMoBalGQmgGPnixiNUinLsw6E31fkqHwHc3AwnGtIDqH?=
 =?us-ascii?q?rYotfoNKgIV+C1w6zHwS3eZPxU2Df97ofIfh48qvyLXbNwcMzRyUY1GwPFk1Wf?=
 =?us-ascii?q?s4rlPzyO2+QMtWib8/RvVea1h2E7rAFxpyGiy8ExgYfKnoIY0k7I+Tl9zYovON?=
 =?us-ascii?q?G1RlB3bcS5HJZTqy2WLYp7T8E6T211tis3xacKtYO1cSUF0pgr2hDSZv2df4SV?=
 =?us-ascii?q?/h7vSOCcKipiin1/YrKwnROy/FCgyuLiUsm0105HrjRKktbSrHABzR/T5dadSv?=
 =?us-ascii?q?t74Eih3SyD1wfJ6uFLOUw0lKzbJIA9wrMoiJYfrUDOEjXrlEj4kqOabFgo9+u0?=
 =?us-ascii?q?5+j9Y7jrpIeQN4puhQH/NqQulNa/AeM9MgUWW2ib+OK81KDs/EHgQ7VFkOc2kq?=
 =?us-ascii?q?/Hv5DePMgboaC4AwlL3YY58Bu/ETim38oCnXUdL1JKZgiHj473NFHKOvz4Cu2/?=
 =?us-ascii?q?g1u0nDdx2//GJqHhAonKLnXblLfhfLV95FBGxAs80NBS/JZUCrAHIPLuVU79rt?=
 =?us-ascii?q?3YDhklMwOqx+brEsly1oQbWWiXGK+WLLvSsUOU5uIoO+SMZJUauDfhK/c/4P7i?=
 =?us-ascii?q?l385mUIHcqmv0psac3S4HvVgI0WEbnvgmNYBEWEWvgUgSOzmkkGNUTlWZ3yqRa?=
 =?us-ascii?q?Iz+ik7CJ66DYfEXo2tgruB0zmhEp1VYWBGDFaMEXDzeoWAWvcMbj+SI8B7njwF?=
 =?us-ascii?q?U7ihV5Eu1RW0uADmzLpnK/Le+jcEupL7yNh1++rTmAko+jxvD8Sd1GKNQ3tunm?=
 =?us-ascii?q?wSRT87x6R/oU17ylee3ql0mf1YFdpP5/xXVgc2L4LTz+t/C9rqQALOYs+JSEq6?=
 =?us-ascii?q?QtWhGTwxTcg+w9kUb0Z5GtWtlBbD3yWxDr8RlryLAoE0863G03jwIcZ912jJ1K?=
 =?us-ascii?q?07g1Y6RctPMHWshrRj+AjLG47Jj0KZmr63eqsGwi7C6n2PzWqUs0FeSw5/T6PF?=
 =?us-ascii?q?UXcbZkvVqNT54ljPT7uvCbQhLwtAxtSOKqpMat31k1pGQO3vN8jZY2K0g22wHw?=
 =?us-ascii?q?qHxquQbIr2fGUQxDjSB1Iakw8N53qGNRIxBiG6o23ACjxjDlbvY0Lq8eljp3K3?=
 =?us-ascii?q?VE40zweWb0J/07q54AIahfuZS/kLxLILpD8hqyloHFa6x9/WF9uApw9mfKVAYd?=
 =?us-ascii?q?M84E1L1X7Duwx6JJygK6FihlgRcwlsu0Pu1hN3CphPkMQwrXMqyhZyJryc0F9b?=
 =?us-ascii?q?azyY2pXwMKXNKmbu5BCvd7LW2lbG3dmM/qcA9vs5pEvjvQ2zDUUi7mho3MNT03?=
 =?us-ascii?q?uf4ZXKEhEfUZbwUkYx6hh7qKvWYig754PIy3JsNbO4vSPF29IsHOEl0Aqvf89D?=
 =?us-ascii?q?MKOYEw//C80bB9W0JOM2gVSobxIEM/pU9K47JM6mc/qG2Ki2POdvhj6mjGJH4J?=
 =?us-ascii?q?xj3UKI7SZzVunI35MdyfGCwgSHTyv8jEumss3vg4BEZC0dEXClySf5A45dfKty?=
 =?us-ascii?q?cpgRCWevOsG42s9xh5rwVHFG7l6jAFUG1dSteRqTaVz9wAJR2V4WoXyhhSu30T?=
 =?us-ascii?q?h0nys1oaqY2SzE2/7iewYfOm5XWGliik/hIIi1j9wAXEmkdRMplAaj5Uvhw6hb?=
 =?us-ascii?q?paJ/L3TcQEtSfij2KX1iXbW0traYf8FP75Youz1NUOugeVCaVqL9oxwC3iPhBW?=
 =?us-ascii?q?Re3jM7dzKtupnjhBx1kmGdLHVyrHrfZ85wwwzS5NjdRf5XwzoHSzN0iTjRBlig?=
 =?us-ascii?q?Idap+c+YmIvEsuC7T2ihTIFccTH3zYOcsyu2/W1rDge4n/ypmN3nEA463DT/19?=
 =?us-ascii?q?lrUyXIsRn9bpPq16S8LeJoYE1oCEXg5Mp9H4F0ipEwi40I2XgGmpWV+mIKkWTp?=
 =?us-ascii?q?PtVaw67+bGcNSiQNw97a+wXl3ExjLnSUx4P2THmdw81hZ8WkbWMSwC4y88dKCK?=
 =?us-ascii?q?KM5rxegSR1uka4rR7WYfVlmzcdyPgu52QAj+AHpgUt1TmdDa4IHUZDIyPsjRuI?=
 =?us-ascii?q?4su6rKVWYmavbLex2FB/ndCnELGNvAVcVGzldZclGC969t9/P07U0H3v9oHkf8?=
 =?us-ascii?q?Hdbc4Uth2RiRvBjvJaKJQslvoRnipnOHnwvXkky+49kBxv0ou2vImBK2Vx4q25?=
 =?us-ascii?q?BgRUOSHyZ8MW4jvtl7pRnt6K34CzGZVsAi4EU4HvTfKsDTIer/DnNxuVHT04q3?=
 =?us-ascii?q?ebH6ffHACF5EdnqXLPD46kN3WNKHYFytViQQGXJFZDjwAMQDU6gpk5GxioxMP7?=
 =?us-ascii?q?dUd2+CsR6kTkqhdWyeJoKhr/UnrZpAiycTc5U5yfLBtQ7gFf6EbZK82e7uRvHy?=
 =?us-ascii?q?5G+p2tthCCKmueZw5QF2EGRlSEB0z/Prmp/dTB8++YBvenL/vTe7qOr/ZSV+yP?=
 =?us-ascii?q?xZKp3Ytr5DKMNsSJPnl/APw3wEtDXXZlG8vHnzUDUTAYlyXIb8SDvhez5jV3rt?=
 =?us-ascii?q?yj8PTsQA/v5ZWAC7pRMdVs+hC6m6SDN/SXhCZ2NzlYzI4MxWTTxbgb3V4SjTxu?=
 =?us-ascii?q?dja3HbQBsy7NULzfmqtNAxEHbCNzMdNC77gg0QlVJc7bltT126Zigf4oEFhFT0?=
 =?us-ascii?q?Lum8GzacwOImGwL1fHBEeNNLSbKjzH2cD3YaWgSbJOiOVYrQG/uTGeE0X7JDSM?=
 =?us-ascii?q?iyHpVwyzMeFLlCybIB1euISnfhlxE2TsUNLmZQO9MNJsiT02wLs0hm7FNGIGMD?=
 =?us-ascii?q?h8dV9NoaOU7S9Cnvp/HGlB5GJ/LeaYgyaZ8/XYKpEOvPprGCt0keda4HU8y7RN?=
 =?us-ascii?q?7SBEROZ6mC3drtN1p1Gmk++PyidoURZUqzZLgp6LsltmOanD6pZAXnPEr1ox6j?=
 =?us-ascii?q?C8AhILqt8tKNr1t6lWgozDnaTyJTME9pTW+tEQDs78L9iOO34sdxHuHWiHIhEC?=
 =?us-ascii?q?SGvhFXzWgUNp1Lmj93ua5NBuu5nql9wOV7ZdW3Q0EO8XDgJuG9lUc8Q/ZS8tjb?=
 =?us-ascii?q?PO1J1A3nG5thSEAZwC5p0=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAAAm1gFch0O0hNFjGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGDWRInjBFfjTkUlzSBcRYYEwGHdiI0CQ0BAwEBAQE?=
 =?us-ascii?q?BAQIBEwEBAQgNCQgpL4I2JAGCYQEBAQECAQECJFIFAQkBAQoYCSUDDAEESRMFg?=
 =?us-ascii?q?xyBeggFpzkzii6MGoIWgRGCZC6KXAKJBIIYhQlRjz8HAgKRTYFbiDSHEJYJglS?=
 =?us-ascii?q?BRoINcIM8glCOGDIBATEBgQQBAY1cAQE?=
X-IPAS-Result: =?us-ascii?q?A0ABAAAm1gFch0O0hNFjGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGDWRInjBFfjTkUlzSBcRYYEwGHdiI0CQ0BAwEBAQEBAQIBEwEBAQgNC?=
 =?us-ascii?q?QgpL4I2JAGCYQEBAQECAQECJFIFAQkBAQoYCSUDDAEESRMFgxyBeggFpzkzii6?=
 =?us-ascii?q?MGoIWgRGCZC6KXAKJBIIYhQlRjz8HAgKRTYFbiDSHEJYJglSBRoINcIM8glCOG?=
 =?us-ascii?q?DIBATEBgQQBAY1cAQE?=
X-IronPort-AV: E=Sophos;i="5.56,300,1539673200"; 
   d="scan'208";a="53398940"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 30 Nov 2018 16:34:13 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726581AbeLALpT (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sat, 1 Dec 2018 06:45:19 -0500
Received: from mga07.intel.com ([134.134.136.100]:64273 "EHLO mga07.intel.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726013AbeLALpT (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Sat, 1 Dec 2018 06:45:19 -0500
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from orsmga001.jf.intel.com ([10.7.209.18])
  by orsmga105.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 30 Nov 2018 16:34:10 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,300,1539673200"; 
   d="scan'208";a="114461925"
Received: from yhuang-dev.sh.intel.com (HELO yhuang-dev) ([10.239.13.27])
  by orsmga001.jf.intel.com with ESMTP; 30 Nov 2018 16:34:07 -0800
From: "Huang\, Ying" <ying.huang@intel.com>
To: Daniel Jordan <daniel.m.jordan@oracle.com>
Cc: Andrew Morton <akpm@linux-foundation.org>, <linux-mm@kvack.org>,
        <linux-kernel@vger.kernel.org>,
        "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>,
        Andrea Arcangeli <aarcange@redhat.com>,
        Michal Hocko <mhocko@kernel.org>,
        Johannes Weiner <hannes@cmpxchg.org>,
        Shaohua Li <shli@kernel.org>, Hugh Dickins <hughd@google.com>,
        Minchan Kim <minchan@kernel.org>,
        Rik van Riel <riel@redhat.com>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>,
        Zi Yan <zi.yan@cs.rutgers.edu>
Subject: Re: [PATCH -V7 RESEND 08/21] swap: Support to read a huge swap cluster for swapin a THP
References: <20181120085449.5542-1-ying.huang@intel.com>
        <20181120085449.5542-9-ying.huang@intel.com>
        <20181130233201.6yuzbhymtjddvf3u@ca-dmjordan1.us.oracle.com>
Date: Sat, 01 Dec 2018 08:34:06 +0800
In-Reply-To: <20181130233201.6yuzbhymtjddvf3u@ca-dmjordan1.us.oracle.com>
        (Daniel Jordan's message of "Fri, 30 Nov 2018 15:32:01 -0800")
Message-ID: <8736rirsox.fsf@yhuang-dev.intel.com>
User-Agent: Gnus/5.13 (Gnus v5.13) Emacs/25.2 (gnu/linux)
MIME-Version: 1.0
Content-Type: text/plain; charset=ascii
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi, Daniel,

Daniel Jordan <daniel.m.jordan@oracle.com> writes:

> Hi Ying,
>
> On Tue, Nov 20, 2018 at 04:54:36PM +0800, Huang Ying wrote:
>> diff --git a/mm/swap_state.c b/mm/swap_state.c
>> index 97831166994a..1eedbc0aede2 100644
>> --- a/mm/swap_state.c
>> +++ b/mm/swap_state.c
>> @@ -387,14 +389,42 @@ struct page *__read_swap_cache_async(swp_entry_t entry, gfp_t gfp_mask,
>>  		 * as SWAP_HAS_CACHE.  That's done in later part of code or
>>  		 * else swap_off will be aborted if we return NULL.
>>  		 */
>> -		if (!__swp_swapcount(entry) && swap_slot_cache_enabled)
>> +		if (!__swp_swapcount(entry, &entry_size) &&
>> +		    swap_slot_cache_enabled)
>>  			break;
>>  
>>  		/*
>>  		 * Get a new page to read into from swap.
>>  		 */
>> -		if (!new_page) {
>> -			new_page = alloc_page_vma(gfp_mask, vma, addr);
>> +		if (!new_page ||
>> +		    (IS_ENABLED(CONFIG_THP_SWAP) &&
>> +		     hpage_nr_pages(new_page) != entry_size)) {
>> +			if (new_page)
>> +				put_page(new_page);
>> +			if (IS_ENABLED(CONFIG_THP_SWAP) &&
>> +			    entry_size == HPAGE_PMD_NR) {
>> +				gfp_t gfp;
>> +
>> +				gfp = alloc_hugepage_direct_gfpmask(vma, addr);
>
> vma is NULL when we get here from try_to_unuse, so the kernel will die on
> vma->flags inside alloc_hugepage_direct_gfpmask.

Good catch!  Thanks a lot for your help to pinpoint this bug!

> try_to_unuse swaps in before it finds vma's, but even if those were reversed,
> it seems try_to_unuse wouldn't always have a single vma to pass into this path
> since it's walking the swap_map and multiple processes mapping the same huge
> page can have different huge page advice (and maybe mempolicies?), affecting
> the result of alloc_hugepage_direct_gfpmask.  And yet
> alloc_hugepage_direct_gfpmask needs a vma to do its job.  So, I'm not sure how
> to fix this.
>
> If the entry's usage count were 1, we could find the vma in that common case to
> give read_swap_cache_async, and otherwise allocate small pages.  We'd have THPs
> some of the time and be exactly following alloc_hugepage_direct_gfpmask, but
> would also be conservative when it's uncertain.
>
> Or, if the system-wide THP settings allow it then go for it, but otherwise
> ignore vma hints and always fall back to small pages.  This requires another
> way of controlling THP allocations besides alloc_hugepage_direct_gfpmask.
>
> Or maybe try_to_unuse shouldn't allocate hugepages at all, but then no perf
> improvement for try_to_unuse.
>
> What do you think?

I think that swapoff() which is the main user of try_to_unuse() isn't a
common operation in practical.  So it's not necessary to make it more
complex for this.

In alloc_hugepage_direct_gfpmask(), the only information provided by vma
is: vma->flags & VM_HUGEPAGE.  Because we have no vma available, I think
it is OK to just assume that the flag is cleared.  That is, rely on
system-wide THP settings only.

What do you think about this proposal?

Best Regards,
Huang, Ying
