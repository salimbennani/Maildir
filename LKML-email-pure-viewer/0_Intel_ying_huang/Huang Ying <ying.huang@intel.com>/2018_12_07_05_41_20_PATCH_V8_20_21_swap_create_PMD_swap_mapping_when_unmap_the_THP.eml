Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 16:18:04 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id E581B5804FD;
	Thu,  6 Dec 2018 21:42:41 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga002-1.jf.intel.com with ESMTP; 06 Dec 2018 21:42:41 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A8tB7OxypsW5fHQDXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e4TKvad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWpPUNhMWSJPAY2y?=
 =?us-ascii?q?aIkAD+QaPeZArYTwvEcCoQekCAWwHu7j1iNEi3nr1qM6yeQhFgTG0RQiEdITqn?=
 =?us-ascii?q?vUqtr1P7oQXuC0yqnIwijIYvRW2Df87ojIfQotofGRXb1qd8rRxlIiFwLDjlWM?=
 =?us-ascii?q?t4PlOymZ2fgKs2ie9udtU/+khW0/qwxpvDSj2sMhhpPUio8b1FzI7zh1zYUpKd?=
 =?us-ascii?q?GiSUN2Y8aoHIZUui2ELYd7QsMvT3totSok0LELup22cS4Xw5o93RHfceaIc42Q?=
 =?us-ascii?q?7xLjSumRJTB4iWp7eLKwmRmy61Ksyu7iWcmu1lZFsC5FnsPLtnAX2Bzf8smHSv?=
 =?us-ascii?q?1j8Ue9wTuDyRzf5+VeLUwpm6fXNYQtzqMzm5YPq0jOHy37lF3zjKCMd0Uk/uao?=
 =?us-ascii?q?6/7gYrXjvpKcM450igfjMqUhg8C/Avo3MhIIX2eF/eSwzbrj/EP/QLpUlP07ib?=
 =?us-ascii?q?fZsJ/EKsQBvKK5ABFa0pwl6xmhCzeqytMYnWMILF5dYhKIk5DpO03SIPD/Ffq/?=
 =?us-ascii?q?h1WskDR1yPzcMbzhH47ALnzCkLfnYLZ85FRQyAs1zdBD+Z1UDqsNL+70Wk/0rN?=
 =?us-ascii?q?bYFAM2MxSow+b7D9VwzoMeVniOAq+FKqzStkWE5uIyI+aWYo8Vty3wK/wk5/7o?=
 =?us-ascii?q?kH84lkURfaiv3ZsLdn+4Gu5qLFmeYXrpmt0BC3sFvhIiTOz2j12PSTxTZ3GsUK?=
 =?us-ascii?q?4m5TE7D4SmDYHERo22hLyB3SG7HoBZZ2xcC1CMF2voeJuAW/sWdC2SJcphmCQe?=
 =?us-ascii?q?Vbe9U48hyQ2utAjixrV9NerU+ioYtZH52Nhv/eLTlwo/9Th1D8SbzmGMQHt4nm?=
 =?us-ascii?q?IORz8qwq9/pVZxxUuE0ah9m/ZYD8Bc5+tVUgcmMp7R1+96BMr0Wg7beteJSUyp?=
 =?us-ascii?q?QtOpATwqStIxwtkOY1tyGtm4jxDD2TaqDKERl7CRGJM09afc1WDrJ8lh03bGyL?=
 =?us-ascii?q?Uhj14+T8RSL2KmmLBw+xLTB4HTlUWZjLildaIb0C7J92eDyG6OsVpcUA5xV6XF?=
 =?us-ascii?q?QH8ealHXrdT/+kPNUbuuBa47PQtGzM6IMrFKZcHxjVVaWPfjP8zTbH+rlGeuGx?=
 =?us-ascii?q?mE3LOMY5Dse2UGwirdDlMJkwQS/XaAKAg/CT2to2PYDDxyC13vZ1ng/vV5qHO+?=
 =?us-ascii?q?VkU01R2Fb1V917qp/R4YneCcS/IW3rIDpCchqzV1EEyh397MDNqAvQ5hfKRaYd?=
 =?us-ascii?q?My+1pH0WPZtwpgPp2vNaxih1gecxhpsEPqzRl4FoJAkc0ypnMw0AVyMb6Y0E9G?=
 =?us-ascii?q?dz6Ax5/wPqPYK2bs8xGvcaLZwUze38uM9acJ6/Q4rEvjsRqtFkoj9XVnztZU32?=
 =?us-ascii?q?Gd5pXMEAodT5bxXlwr+Bh9orHQejM96J/M1X1wLam0tSfP2tI0BOc/1hmsZdZe?=
 =?us-ascii?q?MKOeGw/0HM0XHMyuKO0sm1i0YRMIJuFS9KgoP8y4c/uKwrKkPOFlnDi+l2RI/J?=
 =?us-ascii?q?h90l6Q9yp7UuPIxZcFzO2C0QudSjj8i02tssbploBeZDEeB3awxjLgBIFMeKJy?=
 =?us-ascii?q?Z4ELCWG1Ls2zx9V+gYPtWnFC+F6iAVMGxNGmeR6IY1Ph2g1Q0FwdoWa7liug0z?=
 =?us-ascii?q?x0jzYpo7Kf3SzP2ejjdAALOnVWRGlkllrsJYm0j9YHXEmndQQplR2l5VrkyKhf?=
 =?us-ascii?q?vqhwM27TQUJQdSjsM25iSrewtqaFY8NX6pMnqz9XUOe/YVCdULL9uAEV0yDgH2?=
 =?us-ascii?q?tfwjA0aTeqt479nxx7jmKdMXlyoGDYecF22RfQ+tjcSeRN0ToBQSlykSPXCUSk?=
 =?us-ascii?q?P9m14dWUkI/Os+CkWGKmTJFTcyjrzYWbuSu/5G1qBwC/nv+plt3mFwg6zTH019?=
 =?us-ascii?q?1wWSrUqxb8Z5Hh176mPuJ/YkloGFj85tJ5Go5kk4s8npEQ2WUAiZWT8noKimPz?=
 =?us-ascii?q?MdRd2aLjY3sBXz8Lw9jJ4Af73E1vNG6Gx4X8Vn+F2Mtue8G6Yn8K2iI6981KDa?=
 =?us-ascii?q?aU7L9ekidvrFu3sxnRYeRjkTcH0vQh9mQag+4StQopzyWdBK0SHEZCMSztkRSI?=
 =?us-ascii?q?886xrKFNaGmzdriw0VJ0ncq9A7GavgFcRHH5d48+HS9368VzKlPN32f16oH5Y9?=
 =?us-ascii?q?nQdtMTuwaQkxfBiehVNZ0wmuALhSphJWLyo3klx/Qnghxp2JGwpJKHJHl1/KKl?=
 =?us-ascii?q?Hh5YMSX4aNgJ9THqiaZeg9ya34SyHph6HjULXZ3oTe+nET4ItPTnMRqOHyM4qn?=
 =?us-ascii?q?uBBbXfGgqf4l98r33TC5CrK22XJH4BwNVgXhadIVJQgBsOUDUmhJI5FR2qxM/8?=
 =?us-ascii?q?cEd//D8R/UX1qh9NyuJuKhn+XX3TpAauajcoVpefKABa4R1F50fQKcae9P58Hz?=
 =?us-ascii?q?lE/p29qwyAMmyaZwNVDWEQR0yLHVbjMqO15dnH9eiYCfGzL//PYbWItOxfWO2E?=
 =?us-ascii?q?xZOp0ot64TmMMt+DMWVlD/0+wkBDR2x2G9zFmzUTTCwajyLNYNCapBe/+S13r9?=
 =?us-ascii?q?qz8PfxWALo6ouAFaFSMch0+x2thaeDNuiQhDt2KDpC15MMw2PIx6Yb3FIIly5u?=
 =?us-ascii?q?cDytG6watSHRVKLQhrNXDxkDZixpKctH9Lg80RdNOMLBjtP116V1jvo0C1dDSF?=
 =?us-ascii?q?zgldulZc0MI2GhKlzHAFyHO6iBJT3O28v3e7+zSaVMjOVIsB29oSqbE07mPjiZ?=
 =?us-ascii?q?izblTQygMeFSgyGdJxFevIC9chBwCWnsVt7maxu7MMNpgj0y27E7mnTKNWsEOz?=
 =?us-ascii?q?hmb0xNtqGQ7T9fgvhnG21O9HxlLeyFmyaf9+bZK5YWvuFtAiR7jO9a5HU6y71I?=
 =?us-ascii?q?7CBLXvB1mS3SrsJwrFGiiOWA1j1nUB8d4gpM0auNsV9vJu388YNcXnCMqBsO9W?=
 =?us-ascii?q?C4DxUMussgBNryvaxZ1tnIkuT0MjgUoPzO+s5JJ9XdLs3PAXsnPlK9CT/SA00F?=
 =?us-ascii?q?UDetOknegVBQlLeZ8XjD/ctykYTlhJdbEuwTb1cyDP5PTx09RNE=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ADAAC4Bgpch0O0hNFjGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUQYBAQELAYNrJ4wTjjGXO4EkA0wUGBMBh1ciNAkNAQMBAQEBAQECARM?=
 =?us-ascii?q?BAQEIDQkIKS+CNiQBgmIDAwECJFIGCQEBGDgDVAYTBYMcggIFpnUzijCHcIQvg?=
 =?us-ascii?q?haOfwKLJYUPkC4HApE/CxhffYg8hx0BihSPBoFGbIEhMxojgzyCJxeOKjIBATE?=
 =?us-ascii?q?BgQQBAYo/AQE?=
X-IPAS-Result: =?us-ascii?q?A0ADAAC4Bgpch0O0hNFjGwEBAQEDAQEBBwMBAQGBUQYBAQE?=
 =?us-ascii?q?LAYNrJ4wTjjGXO4EkA0wUGBMBh1ciNAkNAQMBAQEBAQECARMBAQEIDQkIKS+CN?=
 =?us-ascii?q?iQBgmIDAwECJFIGCQEBGDgDVAYTBYMcggIFpnUzijCHcIQvghaOfwKLJYUPkC4?=
 =?us-ascii?q?HApE/CxhffYg8hx0BihSPBoFGbIEhMxojgzyCJxeOKjIBATEBgQQBAYo/AQE?=
X-IronPort-AV: E=Sophos;i="5.56,324,1539673200"; 
   d="scan'208";a="43120259"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 06 Dec 2018 21:42:40 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726304AbeLGFm1 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 7 Dec 2018 00:42:27 -0500
Received: from mga01.intel.com ([192.55.52.88]:55177 "EHLO mga01.intel.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726290AbeLGFmY (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 7 Dec 2018 00:42:24 -0500
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from fmsmga007.fm.intel.com ([10.253.24.52])
  by fmsmga101.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 21:42:23 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,324,1539673200"; 
   d="scan'208";a="105567354"
Received: from yhuang-mobile.sh.intel.com ([10.239.196.133])
  by fmsmga007.fm.intel.com with ESMTP; 06 Dec 2018 21:42:21 -0800
From: Huang Ying <ying.huang@intel.com>
To: Andrew Morton <akpm@linux-foundation.org>
Cc: linux-mm@kvack.org, linux-kernel@vger.kernel.org,
        Huang Ying <ying.huang@intel.com>,
        "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>,
        Andrea Arcangeli <aarcange@redhat.com>,
        Michal Hocko <mhocko@kernel.org>,
        Johannes Weiner <hannes@cmpxchg.org>,
        Shaohua Li <shli@kernel.org>, Hugh Dickins <hughd@google.com>,
        Minchan Kim <minchan@kernel.org>,
        Rik van Riel <riel@redhat.com>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>,
        Zi Yan <zi.yan@cs.rutgers.edu>,
        Daniel Jordan <daniel.m.jordan@oracle.com>
Subject: [PATCH -V8 20/21] swap: create PMD swap mapping when unmap the THP
Date: Fri,  7 Dec 2018 13:41:20 +0800
Message-Id: <20181207054122.27822-21-ying.huang@intel.com>
X-Mailer: git-send-email 2.18.1
In-Reply-To: <20181207054122.27822-1-ying.huang@intel.com>
References: <20181207054122.27822-1-ying.huang@intel.com>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This is the final step of the THP swapin support.  When reclaiming a
anonymous THP, after allocating the huge swap cluster and add the THP
into swap cache, the PMD page mapping will be changed to the mapping
to the swap space.  Previously, the PMD page mapping will be split
before being changed.  In this patch, the unmap code is enhanced not
to split the PMD mapping, but create a PMD swap mapping to replace it
instead.  So later when clear the SWAP_HAS_CACHE flag in the last step
of swapout, the huge swap cluster will be kept instead of being split,
and when swapin, the huge swap cluster will be read in one piece into a
THP.  That is, the THP will not be split during swapout/swapin.  This
can eliminate the overhead of splitting/collapsing, and reduce the
page fault count, etc.  But more important, the utilization of THP is
improved greatly, that is, much more THP will be kept when swapping is
used, so that we can take full advantage of THP including its high
performance for swapout/swapin.

Signed-off-by: "Huang, Ying" <ying.huang@intel.com>
Cc: "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>
Cc: Andrea Arcangeli <aarcange@redhat.com>
Cc: Michal Hocko <mhocko@kernel.org>
Cc: Johannes Weiner <hannes@cmpxchg.org>
Cc: Shaohua Li <shli@kernel.org>
Cc: Hugh Dickins <hughd@google.com>
Cc: Minchan Kim <minchan@kernel.org>
Cc: Rik van Riel <riel@redhat.com>
Cc: Dave Hansen <dave.hansen@linux.intel.com>
Cc: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
Cc: Zi Yan <zi.yan@cs.rutgers.edu>
Cc: Daniel Jordan <daniel.m.jordan@oracle.com>
---
 include/linux/huge_mm.h | 11 +++++++++++
 mm/huge_memory.c        | 30 ++++++++++++++++++++++++++++
 mm/rmap.c               | 43 ++++++++++++++++++++++++++++++++++++++++-
 mm/vmscan.c             |  6 +-----
 4 files changed, 84 insertions(+), 6 deletions(-)

diff --git a/include/linux/huge_mm.h b/include/linux/huge_mm.h
index 260357fc9d76..06e4fde57a0f 100644
--- a/include/linux/huge_mm.h
+++ b/include/linux/huge_mm.h
@@ -375,12 +375,16 @@ static inline gfp_t alloc_hugepage_direct_gfpmask(struct vm_area_struct *vma,
 }
 #endif /* CONFIG_TRANSPARENT_HUGEPAGE */
 
+struct page_vma_mapped_walk;
+
 #ifdef CONFIG_THP_SWAP
 extern void __split_huge_swap_pmd(struct vm_area_struct *vma,
 				  unsigned long addr, pmd_t *pmd);
 extern int split_huge_swap_pmd(struct vm_area_struct *vma, pmd_t *pmd,
 			       unsigned long address, pmd_t orig_pmd);
 extern int do_huge_pmd_swap_page(struct vm_fault *vmf, pmd_t orig_pmd);
+extern bool set_pmd_swap_entry(struct page_vma_mapped_walk *pvmw,
+	struct page *page, unsigned long address, pmd_t pmdval);
 
 static inline bool transparent_hugepage_swapin_enabled(
 	struct vm_area_struct *vma)
@@ -421,6 +425,13 @@ static inline int do_huge_pmd_swap_page(struct vm_fault *vmf, pmd_t orig_pmd)
 	return 0;
 }
 
+static inline bool set_pmd_swap_entry(struct page_vma_mapped_walk *pvmw,
+				      struct page *page, unsigned long address,
+				      pmd_t pmdval)
+{
+	return false;
+}
+
 static inline bool transparent_hugepage_swapin_enabled(
 	struct vm_area_struct *vma)
 {
diff --git a/mm/huge_memory.c b/mm/huge_memory.c
index b75af88c505a..27de3e547dc0 100644
--- a/mm/huge_memory.c
+++ b/mm/huge_memory.c
@@ -1938,6 +1938,36 @@ int do_huge_pmd_swap_page(struct vm_fault *vmf, pmd_t orig_pmd)
 	count_vm_event(THP_SWPIN_FALLBACK);
 	goto fallback;
 }
+
+bool set_pmd_swap_entry(struct page_vma_mapped_walk *pvmw, struct page *page,
+			unsigned long address, pmd_t pmdval)
+{
+	struct vm_area_struct *vma = pvmw->vma;
+	struct mm_struct *mm = vma->vm_mm;
+	pmd_t swp_pmd;
+	swp_entry_t entry = { .val = page_private(page) };
+
+	if (swap_duplicate(&entry, HPAGE_PMD_NR) < 0) {
+		set_pmd_at(mm, address, pvmw->pmd, pmdval);
+		return false;
+	}
+	if (list_empty(&mm->mmlist)) {
+		spin_lock(&mmlist_lock);
+		if (list_empty(&mm->mmlist))
+			list_add(&mm->mmlist, &init_mm.mmlist);
+		spin_unlock(&mmlist_lock);
+	}
+	add_mm_counter(mm, MM_ANONPAGES, -HPAGE_PMD_NR);
+	add_mm_counter(mm, MM_SWAPENTS, HPAGE_PMD_NR);
+	swp_pmd = swp_entry_to_pmd(entry);
+	if (pmd_soft_dirty(pmdval))
+		swp_pmd = pmd_swp_mksoft_dirty(swp_pmd);
+	set_pmd_at(mm, address, pvmw->pmd, swp_pmd);
+
+	page_remove_rmap(page, true);
+	put_page(page);
+	return true;
+}
 #endif
 
 static inline void zap_deposited_table(struct mm_struct *mm, pmd_t *pmd)
diff --git a/mm/rmap.c b/mm/rmap.c
index a488d325946d..b7ea50d563a3 100644
--- a/mm/rmap.c
+++ b/mm/rmap.c
@@ -1413,11 +1413,52 @@ static bool try_to_unmap_one(struct page *page, struct vm_area_struct *vma,
 				continue;
 		}
 
+		address = pvmw.address;
+
+#ifdef CONFIG_THP_SWAP
+		/* PMD-mapped THP swap entry */
+		if (IS_ENABLED(CONFIG_THP_SWAP) &&
+		    !pvmw.pte && PageAnon(page)) {
+			pmd_t pmdval;
+
+			VM_BUG_ON_PAGE(PageHuge(page) ||
+				       !PageTransCompound(page), page);
+
+			flush_cache_range(vma, address,
+					  address + HPAGE_PMD_SIZE);
+			mmu_notifier_invalidate_range_start(mm, address,
+					address + HPAGE_PMD_SIZE);
+			if (should_defer_flush(mm, flags)) {
+				/* check comments for PTE below */
+				pmdval = pmdp_huge_get_and_clear(mm, address,
+								 pvmw.pmd);
+				set_tlb_ubc_flush_pending(mm,
+							  pmd_dirty(pmdval));
+			} else
+				pmdval = pmdp_huge_clear_flush(vma, address,
+							       pvmw.pmd);
+
+			/*
+			 * Move the dirty bit to the page. Now the pmd
+			 * is gone.
+			 */
+			if (pmd_dirty(pmdval))
+				set_page_dirty(page);
+
+			/* Update high watermark before we lower rss */
+			update_hiwater_rss(mm);
+
+			ret = set_pmd_swap_entry(&pvmw, page, address, pmdval);
+			mmu_notifier_invalidate_range_end(mm, address,
+					address + HPAGE_PMD_SIZE);
+			continue;
+		}
+#endif
+
 		/* Unexpected PMD-mapped THP? */
 		VM_BUG_ON_PAGE(!pvmw.pte, page);
 
 		subpage = page - page_to_pfn(page) + pte_pfn(*pvmw.pte);
-		address = pvmw.address;
 
 		if (PageHuge(page)) {
 			if (huge_pmd_unshare(mm, &address, pvmw.pte)) {
diff --git a/mm/vmscan.c b/mm/vmscan.c
index 7a67923c09b3..c6af95025fb1 100644
--- a/mm/vmscan.c
+++ b/mm/vmscan.c
@@ -1340,11 +1340,7 @@ static unsigned long shrink_page_list(struct list_head *page_list,
 		 * processes. Try to unmap it here.
 		 */
 		if (page_mapped(page)) {
-			enum ttu_flags flags = ttu_flags | TTU_BATCH_FLUSH;
-
-			if (unlikely(PageTransHuge(page)))
-				flags |= TTU_SPLIT_HUGE_PMD;
-			if (!try_to_unmap(page, flags)) {
+			if (!try_to_unmap(page, ttu_flags | TTU_BATCH_FLUSH)) {
 				nr_unmap_fail++;
 				goto activate_locked;
 			}
-- 
2.18.1

