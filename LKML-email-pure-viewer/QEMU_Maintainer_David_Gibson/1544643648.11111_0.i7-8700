Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  12 Dec 2018 19:40:48 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 096E25803DC
	for <like.xu@linux.intel.com>; Tue, 11 Dec 2018 17:36:06 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by orsmga001-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 11 Dec 2018 17:36:05 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3Afi8WDRamx4JaqirgT/DVAMr/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpsy7Yx7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v6bpgRh31hy?=
 =?us-ascii?q?cdLzM3/mHZhNJzgqJVrx2uuwFwzIzab4+ILPpzfKHTcNwHSWdPQspeSTdBD5iz?=
 =?us-ascii?q?b4cTFecMJ/pUopPgq1YIsBCwBROsBOTqyjJQiHH5x7M60+U8Hgrb3QIgHskBsG?=
 =?us-ascii?q?/TrNXzKawfVv26w7PWzTXCcvxbwjj96InTfRA6pvGMW6h8ftfLyUkoDwPKlUuf?=
 =?us-ascii?q?ppb/Pz+P1+QCrnKX4PB9Ve+2jWMstg9/oj+qxsg2i4nJgJoYylfF9CV92ok6Ps?=
 =?us-ascii?q?a4RFR8Yd6+H5tcrzyVN5FxQsM6WG5npjw1yqcctZ66YScHzoksyR3Ha/GfbYSE?=
 =?us-ascii?q?/hHuWPyMLTtlh39pYqyzihiy/ES61+HxVNG43EhFoyZZj9XBs34A2hjP5sSbT/?=
 =?us-ascii?q?Zx4EKs1SuK2g3W9O1JJ10/m7DBJJ472LEwk4IesUTdES/yn0X7lKuWdkQ/+ui0?=
 =?us-ascii?q?8OTreLrmppmBN4NujQH+KKsultS+AeQ+LAcOQ3CW9fqg2LDg50H1XahGg/4snq?=
 =?us-ascii?q?XHvp3XJd4XqrO7DgNN14Ys8Re/DzOo0NQCmnkHKUpIeAuZgIjsJlHCOe33Aumh?=
 =?us-ascii?q?g1uylDdn3uvJPrr8ApXLMnfMjqzhcbF5605dywo808pT5p1JCrwZJPLzW0nxtM?=
 =?us-ascii?q?HXDxMjMgy0xfrnB8t51o8ERW2PBaqZPbjUsV+P4OIvLO+MZJIPtDb6Mfgl6Obi?=
 =?us-ascii?q?jWUlll8FYampwZwXZWi8HvRnIEWWf2Dgg9gcEWoRugo+TerqiECNUDJJZnayWb?=
 =?us-ascii?q?486S8/CI68EYjDQYWt0/S82jymFMhWenxeEQLLVnPpbJmfHfELbi2UP4lmiDND?=
 =?us-ascii?q?ULGgT4oo01aprBP7zLx8afPZ/zBduZ/92dwm2uvIiBtn8DV1C9iagXiASnwxkm?=
 =?us-ascii?q?4WSjtzxq1mvEFm1n+F1q53heEeEsZcsOhUWAU3PoKJ0uphFtrpURjAdNradFHz?=
 =?us-ascii?q?aVSqGzA6BvY8i/AJalpwAZ32hRTM9ymjBLNTkKaEUs8a6KXZilT4Ocdxg1nH3r?=
 =?us-ascii?q?ImiRFyTsJRNGGOia917A/VQYLTlF2Tmq+wM6UQmifQojTQhVGStV1VBVYjGZ7O?=
 =?us-ascii?q?WmoSMxPb?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAADGZBBcmBHrdtBlFgMBAQEBAQEBA?=
 =?us-ascii?q?QEBAQEHAQEBAQEBgVEEAQEBAQELAYEwgTmBKYwUX4szgg18llYUgWEBDAUYBw2?=
 =?us-ascii?q?HLiI0CQ0BAwEBAQEBAQIBEwEBAQEBCAsLBhsOIwyCNgUCAxgJglsBAQEBAgEBA?=
 =?us-ascii?q?iQZAQEECikBAgIBAQIGAQEKGAkMDgMIAwELBRgxEwUEgxgBgXkIAQSlF4FsM4J?=
 =?us-ascii?q?2AQEFhyQHCIJtiDKBHBeBf4ERgl01hDwOIFaFHKB9CYImhGOKPQsYYHxNjxeHe?=
 =?us-ascii?q?YIvhluIMIFGgg4zGggXGYMnCYISDBcSgXKGWoVTLTGBBAOIF1aBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0ABAADGZBBcmBHrdtBlFgMBAQEBAQEBAQEBAQEHAQEBAQE?=
 =?us-ascii?q?BgVEEAQEBAQELAYEwgTmBKYwUX4szgg18llYUgWEBDAUYBw2HLiI0CQ0BAwEBA?=
 =?us-ascii?q?QEBAQIBEwEBAQEBCAsLBhsOIwyCNgUCAxgJglsBAQEBAgEBAiQZAQEECikBAgI?=
 =?us-ascii?q?BAQIGAQEKGAkMDgMIAwELBRgxEwUEgxgBgXkIAQSlF4FsM4J2AQEFhyQHCIJti?=
 =?us-ascii?q?DKBHBeBf4ERgl01hDwOIFaFHKB9CYImhGOKPQsYYHxNjxeHeYIvhluIMIFGgg4?=
 =?us-ascii?q?zGggXGYMnCYISDBcSgXKGWoVTLTGBBAOIF1aBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,343,1539673200"; 
   d="asc'?scan'208";a="56521932"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 11 Dec 2018 17:36:04 -0800
Received: from localhost ([::1]:42211 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gWtRT-00037Q-UG
	for like.xu@linux.intel.com; Tue, 11 Dec 2018 20:36:03 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:50863)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <dgibson@ozlabs.org>) id 1gWtRI-000378-HP
	for qemu-devel@nongnu.org; Tue, 11 Dec 2018 20:35:54 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <dgibson@ozlabs.org>) id 1gWtRG-0003KI-KA
	for qemu-devel@nongnu.org; Tue, 11 Dec 2018 20:35:52 -0500
Received: from ozlabs.org ([2401:3900:2:1::2]:35263)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <dgibson@ozlabs.org>)
	id 1gWtRF-0003II-IA; Tue, 11 Dec 2018 20:35:50 -0500
Received: by ozlabs.org (Postfix, from userid 1007)
	id 43DzsY75BKz9s55; Wed, 12 Dec 2018 12:35:45 +1100 (AEDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
	d=gibson.dropbear.id.au; s=201602; t=1544578545;
	bh=7g1iuaCInK080hCNp/AQcsuV+cWNakqbdgLOq+xrhQA=;
	h=Date:From:To:Cc:Subject:References:In-Reply-To:From;
	b=bsD1V5I6CWJ3UzXl0Bk9A/Bt5M2th0dlqeTXnN3UE0eGdwG0vQFqF1XtKZY0u1YD0
	H6mfLsdvoqg9X44Lu2C126BkxMOodhEYrciohX6S07jvBnHYQbk9ejHfc6CPf6yrtP
	DW3wQRjFSIUIIxIWbRtCaETFUTfwagRxe3177MfU=
Date: Wed, 12 Dec 2018 11:54:19 +1100
From: David Gibson <david@gibson.dropbear.id.au>
To: =?iso-8859-1?Q?C=E9dric?= Le Goater <clg@kaod.org>
Message-ID: <20181212005418.GG2719@umbus.fritz.box>
References: <20181209194610.29727-1-clg@kaod.org>
	<20181209194610.29727-17-clg@kaod.org>
	<20181211020350.GF4261@umbus.fritz.box>
	<771f030d-b69f-78e4-ac0c-9f37e3ab9c17@kaod.org>
MIME-Version: 1.0
Content-Type: multipart/signed; micalg=pgp-sha256;
	protocol="application/pgp-signature"; boundary="8bBEDOJVaa9YlTAt"
Content-Disposition: inline
In-Reply-To: <771f030d-b69f-78e4-ac0c-9f37e3ab9c17@kaod.org>
User-Agent: Mutt/1.10.1 (2018-07-13)
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 2401:3900:2:1::2
Subject: Re: [Qemu-devel] [PATCH v7 16/19] spapr: introduce a new sPAPR IRQ
 backend supporting XIVE and XICS
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: qemu-ppc@nongnu.org, qemu-devel@nongnu.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>


--8bBEDOJVaa9YlTAt
Content-Type: text/plain; charset=iso-8859-1
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable

On Tue, Dec 11, 2018 at 11:19:01AM +0100, C=E9dric Le Goater wrote:
> On 12/11/18 3:03 AM, David Gibson wrote:
> > On Sun, Dec 09, 2018 at 08:46:07PM +0100, C=E9dric Le Goater wrote:
> >> The interrupt mode is chosen by the CAS negotiation process and
> >> activated after a reset to take into account the required changes in
> >> the machine. These impact the device tree layout, the interrupt
> >> presenter object and the exposed MMIO regions in the case of XIVE.
> >>
> >> This default interrupt mode for the machine is XICS.
> >>
> >> Signed-off-by: C=E9dric Le Goater <clg@kaod.org>
> >> ---
> >>  include/hw/ppc/spapr_irq.h |   1 +
> >>  hw/ppc/spapr.c             |   3 +-
> >>  hw/ppc/spapr_hcall.c       |  13 ++++
> >>  hw/ppc/spapr_irq.c         | 143 +++++++++++++++++++++++++++++++++++++
> >>  4 files changed, 159 insertions(+), 1 deletion(-)
> >>
> >> diff --git a/include/hw/ppc/spapr_irq.h b/include/hw/ppc/spapr_irq.h
> >> index b34d5a00381b..29936498dbc8 100644
> >> --- a/include/hw/ppc/spapr_irq.h
> >> +++ b/include/hw/ppc/spapr_irq.h
> >> @@ -51,6 +51,7 @@ typedef struct sPAPRIrq {
> >>  extern sPAPRIrq spapr_irq_xics;
> >>  extern sPAPRIrq spapr_irq_xics_legacy;
> >>  extern sPAPRIrq spapr_irq_xive;
> >> +extern sPAPRIrq spapr_irq_dual;
> >> =20
> >>  void spapr_irq_init(sPAPRMachineState *spapr, Error **errp);
> >>  int spapr_irq_claim(sPAPRMachineState *spapr, int irq, bool lsi, Erro=
r **errp);
> >> diff --git a/hw/ppc/spapr.c b/hw/ppc/spapr.c
> >> index 5ef87a00f68b..fa41927d95dd 100644
> >> --- a/hw/ppc/spapr.c
> >> +++ b/hw/ppc/spapr.c
> >> @@ -2631,7 +2631,8 @@ static void spapr_machine_init(MachineState *mac=
hine)
> >>      spapr_ovec_set(spapr->ov5, OV5_DRMEM_V2);
> >> =20
> >>      /* advertise XIVE */
> >> -    if (smc->irq->ov5 =3D=3D SPAPR_OV5_XIVE_EXPLOIT) {
> >> +    if (smc->irq->ov5 =3D=3D SPAPR_OV5_XIVE_EXPLOIT ||
> >> +        smc->irq->ov5 =3D=3D SPAPR_OV5_XIVE_BOTH) {
> >>          spapr_ovec_set(spapr->ov5, OV5_XIVE_EXPLOIT);
> >>      }
> >> =20
> >> diff --git a/hw/ppc/spapr_hcall.c b/hw/ppc/spapr_hcall.c
> >> index ae913d070f50..186b6a65543f 100644
> >> --- a/hw/ppc/spapr_hcall.c
> >> +++ b/hw/ppc/spapr_hcall.c
> >> @@ -1654,6 +1654,19 @@ static target_ulong h_client_architecture_suppo=
rt(PowerPCCPU *cpu,
> >>              (spapr_h_cas_compose_response(spapr, args[1], args[2],
> >>                                            ov5_updates) !=3D 0);
> >>      }
> >> +
> >> +    /*
> >> +     * Generate a machine reset when we have an update of the
> >> +     * interrupt mode. Only required on the machine supporting both
> >> +     * mode.
> >> +     */
> >> +    if (!spapr->cas_reboot) {
> >> +        sPAPRMachineClass *smc =3D SPAPR_MACHINE_GET_CLASS(spapr);
> >> +
> >> +        spapr->cas_reboot =3D spapr_ovec_test(ov5_updates, OV5_XIVE_E=
XPLOIT)
> >> +            && smc->irq->ov5 =3D=3D SPAPR_OV5_XIVE_BOTH;
> >> +    }
> >> +
> >>      spapr_ovec_cleanup(ov5_updates);
> >> =20
> >>      if (spapr->cas_reboot) {
> >> diff --git a/hw/ppc/spapr_irq.c b/hw/ppc/spapr_irq.c
> >> index a8e50725397c..7c34939f774a 100644
> >> --- a/hw/ppc/spapr_irq.c
> >> +++ b/hw/ppc/spapr_irq.c
> >> @@ -392,6 +392,149 @@ sPAPRIrq spapr_irq_xive =3D {
> >>      .reset       =3D spapr_irq_reset_xive,
> >>  };
> >> =20
> >> +/*
> >> + * Dual XIVE and XICS IRQ backend.
> >> + *
> >> + * Both interrupt mode, XIVE and XICS, objects are created but the
> >> + * machine starts in legacy interrupt mode (XICS). It can be changed
> >> + * by the CAS negotiation process and, in that case, the new mode is
> >> + * activated after extra machine reset.
> >> + */
> >> +
> >> +/*
> >> + * Returns the sPAPR IRQ backend negotiated by CAS. XICS is the
> >> + * default.
> >> + */
> >> +static sPAPRIrq *spapr_irq_current(sPAPRMachineState *spapr)
> >> +{
> >> +    return spapr_ovec_test(spapr->ov5_cas, OV5_XIVE_EXPLOIT) ?
> >> +        &spapr_irq_xive : &spapr_irq_xics;
> >> +}
> >> +
> >> +static void spapr_irq_init_dual(sPAPRMachineState *spapr, Error **err=
p)
> >> +{
> >> +    MachineState *machine =3D MACHINE(spapr);
> >> +    Error *local_err =3D NULL;
> >> +
> >> +    if (kvm_enabled() && machine_kernel_irqchip_allowed(machine)) {
> >> +        error_setg(errp, "No KVM support for the 'dual' machine");
> >> +        return;
> >> +    }
> >> +
> >> +    spapr_irq_xics.init(spapr, &local_err);
> >> +    if (local_err) {
> >> +        error_propagate(errp, local_err);
> >> +        return;
> >> +    }
> >> +
> >> +    spapr_irq_xive.init(spapr, &local_err);
> >> +    if (local_err) {
> >> +        error_propagate(errp, local_err);
> >> +        return;
> >> +    }
> >> +}
> >> +
> >> +static int spapr_irq_claim_dual(sPAPRMachineState *spapr, int irq, bo=
ol lsi,
> >> +                                Error **errp)
> >> +{
> >> +    int ret;
> >> +    Error *local_err =3D NULL;
> >> +
> >> +    ret =3D spapr_irq_xive.claim(spapr, irq, lsi, &local_err);
> >> +    if (local_err) {
> >> +        error_propagate(errp, local_err);
> >> +        return ret;
> >> +    }
> >> +
> >> +    ret =3D spapr_irq_xics.claim(spapr, irq, lsi, &local_err);
> >> +    if (local_err) {
> >> +        error_propagate(errp, local_err);
> >> +    }
> >> +
> >> +    return ret;
> >> +}
> >> +
> >> +static void spapr_irq_free_dual(sPAPRMachineState *spapr, int irq, in=
t num)
> >> +{
> >> +    spapr_irq_xive.free(spapr, irq, num);
> >> +    spapr_irq_xics.free(spapr, irq, num);
> >> +}
> >> +
> >> +static qemu_irq spapr_qirq_dual(sPAPRMachineState *spapr, int irq)
> >> +{
> >> +    return spapr_irq_current(spapr)->qirq(spapr, irq);
> >=20
> > Urgh... I don't think this is going to work.  IIRC the various devices
> > (PHB, VIO, etc.)  are wired up to their qirqs at realize() time, so if
> > you reboot from a XIVE guest to XICS guest (or maybe the other way
> > around) the peripherals won't be able to signal irqs in the new
> > scheme.
>=20
> It does. The IRQ numbers are claimed in both backends.

Yes, I realize that, but the two backends still have their own set of
qirqs, which have their own set_irq routines associated with them.

> This is the problem since the very beginning. For reset and migration
> to work, we need to keep in sync the IRQ number space of the machine=20
> and the different interrupt controllers.

Sure, we have the numbers in sync, but that won't help if when the
peripherals do a qemu_irq_pulse() it goes to the wrong backend's
trigger routine.


>=20
> C.=20
>=20
>=20
> > I think instead we need a common set of qirqs, whose set_irq routine
> > looks at whether to signal XICS or XIVE.  FOr now I think the easiest
> > approach is to layer those on top of the existing XICS or XIVE
> > specific qirqs.  Later we might want to remove the (input) qirqs
> > entirely from the XICS and XIVE subsystems, instead having just
> > explicit trigger functions.  Then spapr will always supply the qirqs
> > which call into one or the other.
> >=20
> >> +}
> >> +
> >> +static void spapr_irq_print_info_dual(sPAPRMachineState *spapr, Monit=
or *mon)
> >> +{
> >> +    spapr_irq_current(spapr)->print_info(spapr, mon);
> >> +}
> >> +
> >> +static void spapr_irq_dt_populate_dual(sPAPRMachineState *spapr,
> >> +                                       uint32_t nr_servers, void *fdt,
> >> +                                       uint32_t phandle)
> >> +{
> >> +    spapr_irq_current(spapr)->dt_populate(spapr, nr_servers, fdt, pha=
ndle);
> >> +}
> >> +
> >> +static Object *spapr_irq_cpu_intc_create_dual(sPAPRMachineState *spap=
r,
> >> +                                              Object *cpu, Error **er=
rp)
> >> +{
> >> +    Error *local_err =3D NULL;
> >> +
> >> +    spapr_irq_xive.cpu_intc_create(spapr, cpu, &local_err);
> >> +    if (local_err) {
> >> +        error_propagate(errp, local_err);
> >> +        return NULL;
> >> +    }
> >> +
> >> +    /* Default to XICS interrupt mode */
> >> +    return spapr_irq_xics.cpu_intc_create(spapr, cpu, errp);
> >> +}
> >> +
> >> +static int spapr_irq_post_load_dual(sPAPRMachineState *spapr, int ver=
sion_id)
> >> +{
> >> +    /*
> >> +     * Force a reset of the XIVE backend after migration. The machine
> >> +     * defaults to XICS at startup.
> >> +     */
> >> +    if (spapr_ovec_test(spapr->ov5_cas, OV5_XIVE_EXPLOIT)) {
> >> +        spapr_irq_xive.reset(spapr, &error_fatal);
> >> +    }
> >> +
> >> +    return spapr_irq_current(spapr)->post_load(spapr, version_id);
> >> +}
> >> +
> >> +static void spapr_irq_reset_dual(sPAPRMachineState *spapr, Error **er=
rp)
> >> +{
> >> +    /*
> >> +     * Reset the interrupt mode selected by CAS.
> >> +     */
> >> +    spapr_irq_current(spapr)->reset(spapr, errp);
> >> +}
> >> +
> >> +/*
> >> + * Define values in sync with the XIVE and XICS backend
> >> + */
> >> +#define SPAPR_IRQ_DUAL_NR_IRQS     0x2000
> >> +#define SPAPR_IRQ_DUAL_NR_MSIS     (SPAPR_IRQ_DUAL_NR_IRQS - SPAPR_IR=
Q_MSI)
> >> +
> >> +sPAPRIrq spapr_irq_dual =3D {
> >> +    .nr_irqs     =3D SPAPR_IRQ_DUAL_NR_IRQS,
> >> +    .nr_msis     =3D SPAPR_IRQ_DUAL_NR_MSIS,
> >> +    .ov5         =3D SPAPR_OV5_XIVE_BOTH,
> >> +
> >> +    .init        =3D spapr_irq_init_dual,
> >> +    .claim       =3D spapr_irq_claim_dual,
> >> +    .free        =3D spapr_irq_free_dual,
> >> +    .qirq        =3D spapr_qirq_dual,
> >> +    .print_info  =3D spapr_irq_print_info_dual,
> >> +    .dt_populate =3D spapr_irq_dt_populate_dual,
> >> +    .cpu_intc_create =3D spapr_irq_cpu_intc_create_dual,
> >> +    .post_load   =3D spapr_irq_post_load_dual,
> >> +    .reset       =3D spapr_irq_reset_dual,
> >> +};
> >> +
> >>  /*
> >>   * sPAPR IRQ frontend routines for devices
> >>   */
> >=20
>=20

--=20
David Gibson			| I'll have my music baroque, and my code
david AT gibson.dropbear.id.au	| minimalist, thank you.  NOT _the_ _other_
				| _way_ _around_!
http://www.ozlabs.org/~dgibson

--8bBEDOJVaa9YlTAt
Content-Type: application/pgp-signature; name="signature.asc"

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEdfRlhq5hpmzETofcbDjKyiDZs5IFAlwQXDQACgkQbDjKyiDZ
s5J0/Q//T4/pkMvaTElk6cu7Lnlv9YJpdboSA1i4t3oYk/WYSR6T4zRdgkETHCSQ
iOSp4kPNPugz8NyARiZ4SvzpzW2kFhq59FT4DCwzc2/pQQFbqshXparx7JDFbUaB
hKE+LlqY/G1YnGl1rnet99/KBsK1IYTMPK5PD8zfvA0VaByKz864NPg2ID8BuICR
RO+WxRSzXqMyld2iqpKg2G8DX7lnJrR2xJMmVvOdIfpwmoRdPV+4hoopTlUF7M+I
dmDPrnbSaUxjz4zYKd/8hPOfBrCep5dZLBuM6fMD0FRgJgOBMo1sJ7/p8B5XxY0s
XywgFdVk44aGXNcrfr+Cvwp7f7LIsV9NBdQZCgxJprBONEzFONDH7feGBYcuoFXI
HBEj5kzVEgjMQHgSmg0kovjGQhM5iIiWb9Wyq4l5h0e0zc+NLe3ejQjo9xLktrOw
1e8qKe6sC6cTevLCy1Dasbs+ildiSVAurJiyewkxkuMI4eTfuWP+03Jop7CEj+ym
zSJOMZbqPqpq2Gw2SFgofMy+GPvMOjO73BM2wKsu/0XBBLEak0PyC88jk+VQXHcY
XGwAD5zhEynCZlA/VoQbo4R5fxBpVYA9ZMHNS78mX/Mw8L7KFjxomsY8y9nEPyLS
7TS7SAlMBINbG1sNGqEDlVxukOXTrjNGlW0I2TW8RcIOmQrxwNQ=
=Cdn8
-----END PGP SIGNATURE-----

--8bBEDOJVaa9YlTAt--

