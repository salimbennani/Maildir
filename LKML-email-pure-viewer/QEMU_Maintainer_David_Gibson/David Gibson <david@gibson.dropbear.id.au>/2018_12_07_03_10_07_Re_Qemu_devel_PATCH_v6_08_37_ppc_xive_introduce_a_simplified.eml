Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 16:17:45 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 0732B5804F9
	for <like.xu@linux.intel.com>; Thu,  6 Dec 2018 19:54:59 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga007-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 19:54:58 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AmeoB3xQAVpuokDfgVXpSWey9n9psv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa67ZBWAt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KptVRTmij?=
 =?us-ascii?q?oINyQh/W/ZisJ+kqFVoByuqBNj3oHbYo+aOudmfq7ff90XSndNU8hNWyNfGYOx?=
 =?us-ascii?q?dIQPA/YbMOtCs4XwvUYCoB2jDgesHuPvzTpIi2f406IgzeQhEBzJ1xEhEdIPq3?=
 =?us-ascii?q?vUt9L1NKEPWu2y0abH1yvDb/JL1jrm54jIcwsuoeqLXbJ2a8be1FMvFwTdjlqL?=
 =?us-ascii?q?t4PqJSmV2v4Ms2eG9eZvT/+vhnchpgpsrDavwcIshZPIhoIT0l3E8iR4wIIvKt?=
 =?us-ascii?q?KjU053e9mkEIFfty2CKoR2WMQiQ3lztykk0LIGo4S3fCkXx5kh2hXRaOSHfpCW?=
 =?us-ascii?q?7h7/V+udOyp0iG9mdb6lmRq//0itxvfhWsS2yFpGsCVInsXRun0I2RHe7tSLRu?=
 =?us-ascii?q?d480u/3DuDygXe5+RaLU0yiKHVMYQuwqQqmZoWqUnDHjH5mEHxjKKOckUk+/Oo?=
 =?us-ascii?q?6/j8Yrn8qZ+cMZJ0hhv5MqQ0lcyzGeU4Mg4QUGiH4emwyqHv8E7jTLlXk/E7kb?=
 =?us-ascii?q?PVvI7UKMkbvKK1Hg1Y3p4m6xmlDjem1NoYnWMALFJAYB+HlpbmO1TTIPzhEPiw?=
 =?us-ascii?q?nUqsnylvx/zfJbLhBYjNLn7fn7j/ZrZx7EpcyAswzd9B/Z5VBawBLer3Wk/wst?=
 =?us-ascii?q?zYExA4Pxa1w+bhFNVyyIceVXiTDa+eNaPfqlmI5uUpI+mDYo8VpSzxK/8/5/7h?=
 =?us-ascii?q?lXM5g0MSfbG13ZsLb3C1BvBmI0SaYXXymNsAHnoKsxE6TOzrjl2CTDFSa2yzX6?=
 =?us-ascii?q?I6+jE0FoamAZ3fSYCqhbzSlBq9BYBcM2BaFkiXQzCvc4SfR+xKbiWULcl81Dse?=
 =?us-ascii?q?Wv+kQo4l0Bio8wji17tgKPGT4yAdqNfv2cZ4477ukwov/2lxBsWZz2bfVmxxgy?=
 =?us-ascii?q?YESiE72OVlrFVgx0yf+a5/hfNeCJpU/fweSRowN5PX07lnDcvvUBnKZNaDRQWa?=
 =?us-ascii?q?RYCNgD0rT9l559JGTEF0B9i4xkTI2yWCALYSm/qMHpNioYzG2H2kC89jynqO+6?=
 =?us-ascii?q?grlF4gCp9DPHOnioZw9gLIAIiPn1+ej6ynfL5a3SKL/XrVnjnGh11RTAMlCfaN?=
 =?us-ascii?q?ZnsYfEaD9dk=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAADG7QlcmBHrdtBjFgQBAQEBAQIBA?=
 =?us-ascii?q?QEBBwIBAQEBgVEFAQEBAQsBgTAqgQ+BKYwTX4sxgg18llIUgVgJDQUYBw2HVyI?=
 =?us-ascii?q?0CQ0BAwEBAQEBAQIBEwEBAQEBCAsLBhsOIwyCNgUCAxgJglwBAgMBAiQZAQEEC?=
 =?us-ascii?q?ikBAgMBAgYBAQoSBgkdCAMBCwUYHRQTBQSCTUsBggEBBKUcgWwzgnYBAQWHJAc?=
 =?us-ascii?q?Igm2IFoEcF4F/gRGCXTWEZQUBhXGJM4w7inMJgiSEYIM3hwALGGB8TY8NihKGT?=
 =?us-ascii?q?IgugUaCDTMaCBcZgycJgXcbDBcSgXKGWoVTLTGBBAOIRYF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0ABAADG7QlcmBHrdtBjFgQBAQEBAQIBAQEBBwIBAQEBgVE?=
 =?us-ascii?q?FAQEBAQsBgTAqgQ+BKYwTX4sxgg18llIUgVgJDQUYBw2HVyI0CQ0BAwEBAQEBA?=
 =?us-ascii?q?QIBEwEBAQEBCAsLBhsOIwyCNgUCAxgJglwBAgMBAiQZAQEECikBAgMBAgYBAQo?=
 =?us-ascii?q?SBgkdCAMBCwUYHRQTBQSCTUsBggEBBKUcgWwzgnYBAQWHJAcIgm2IFoEcF4F/g?=
 =?us-ascii?q?RGCXTWEZQUBhXGJM4w7inMJgiSEYIM3hwALGGB8TY8NihKGTIgugUaCDTMaCBc?=
 =?us-ascii?q?ZgycJgXcbDBcSgXKGWoVTLTGBBAOIRYF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,324,1539673200"; 
   d="asc'?scan'208";a="54208046"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 06 Dec 2018 19:54:57 -0800
Received: from localhost ([::1]:44002 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gV7E8-0004Bg-UM
	for like.xu@linux.intel.com; Thu, 06 Dec 2018 22:54:56 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:35764)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <dgibson@ozlabs.org>) id 1gV7BK-0001iQ-Ej
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 22:52:07 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <dgibson@ozlabs.org>) id 1gV7BF-0004pL-8v
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 22:52:02 -0500
Received: from ozlabs.org ([2401:3900:2:1::2]:56875)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <dgibson@ozlabs.org>)
	id 1gV7BE-0004n0-EB; Thu, 06 Dec 2018 22:51:57 -0500
Received: by ozlabs.org (Postfix, from userid 1007)
	id 439z6x1nWpz9s9G; Fri,  7 Dec 2018 14:51:53 +1100 (AEDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
	d=gibson.dropbear.id.au; s=201602; t=1544154713;
	bh=2NLoo4ZJ90c2MzgpOfKGjbmuYA9fx5AHXa8llodAkYc=;
	h=Date:From:To:Cc:Subject:References:In-Reply-To:From;
	b=IIZOT5bqQj/lnRVWtdwlakCx8MvVWq4Y9r0F2kNRXsNKGvqUZc5Df8QETpEYmlo0K
	KxAN0+CVdmSwdth85xIg9Ku3hXN6XYfTar1DowjfPjxPlCmk4iQ3ssm/ZM7rw4TZJP
	MqsWYTrLo/PFP84y79FdDQjjA1q79bJ74oM8lg2Y=
Date: Fri, 7 Dec 2018 14:10:07 +1100
From: David Gibson <david@gibson.dropbear.id.au>
To: =?iso-8859-1?Q?C=E9dric?= Le Goater <clg@kaod.org>
Message-ID: <20181207031007.GZ768@umbus.fritz.box>
References: <20181205232251.10446-1-clg@kaod.org>
	<20181205232251.10446-9-clg@kaod.org>
MIME-Version: 1.0
Content-Type: multipart/signed; micalg=pgp-sha256;
	protocol="application/pgp-signature"; boundary="zAZKrYjO7GRpkTOs"
Content-Disposition: inline
In-Reply-To: <20181205232251.10446-9-clg@kaod.org>
User-Agent: Mutt/1.10.1 (2018-07-13)
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 2401:3900:2:1::2
Subject: Re: [Qemu-devel] [PATCH v6 08/37] ppc/xive: introduce a simplified
 XIVE presenter
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: qemu-ppc@nongnu.org, qemu-devel@nongnu.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>


--zAZKrYjO7GRpkTOs
Content-Type: text/plain; charset=iso-8859-1
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable

On Thu, Dec 06, 2018 at 12:22:22AM +0100, C=E9dric Le Goater wrote:
> The last sub-engine of the XIVE architecture is the Interrupt
> Virtualization Presentation Engine (IVPE). On HW, the IVRE and the
> IVPE share elements, the Power Bus interface (CQ), the routing table
> descriptors, and they can be combined in the same HW logic. We do the
> same in QEMU and combine both engines in the XiveRouter for
> simplicity.
>=20
> When the IVRE has completed its job of matching an event source with a
> Notification Virtual Target (NVT) to notify, it forwards the event
> notification to the IVPE sub-engine. The IVPE scans the thread
> interrupt contexts of the Notification Virtual Targets (NVT)
> dispatched on the HW processor threads and if a match is found, it
> signals the thread. If not, the IVPE escalates the notification to
> some other targets and records the notification in a backlog queue.
>=20
> The IVPE maintains the thread interrupt context state for each of its
> NVTs not dispatched on HW processor threads in the Notification
> Virtual Target table (NVTT).
>=20
> The model currently only supports single NVT notifications.
>=20
> Signed-off-by: C=E9dric Le Goater <clg@kaod.org>
> ---
>  include/hw/ppc/xive.h      |  15 +++
>  include/hw/ppc/xive_regs.h |  24 ++++
>  hw/intc/xive.c             | 227 +++++++++++++++++++++++++++++++++++++
>  3 files changed, 266 insertions(+)
>=20
> diff --git a/include/hw/ppc/xive.h b/include/hw/ppc/xive.h
> index 74b547707b17..e9b06e75fc1c 100644
> --- a/include/hw/ppc/xive.h
> +++ b/include/hw/ppc/xive.h
> @@ -327,6 +327,10 @@ typedef struct XiveRouterClass {
>                     XiveEND *end);
>      int (*write_end)(XiveRouter *xrtr, uint8_t end_blk, uint32_t end_idx,
>                       XiveEND *end, uint8_t word_number);
> +    int (*get_nvt)(XiveRouter *xrtr, uint8_t nvt_blk, uint32_t nvt_idx,
> +                   XiveNVT *nvt);
> +    int (*write_nvt)(XiveRouter *xrtr, uint8_t nvt_blk, uint32_t nvt_idx,
> +                     XiveNVT *nvt, uint8_t word_number);
>  } XiveRouterClass;
> =20
>  void xive_eas_pic_print_info(XiveEAS *eas, uint32_t lisn, Monitor *mon);
> @@ -337,6 +341,11 @@ int xive_router_get_end(XiveRouter *xrtr, uint8_t en=
d_blk, uint32_t end_idx,
>                          XiveEND *end);
>  int xive_router_write_end(XiveRouter *xrtr, uint8_t end_blk, uint32_t en=
d_idx,
>                            XiveEND *end, uint8_t word_number);
> +int xive_router_get_nvt(XiveRouter *xrtr, uint8_t nvt_blk, uint32_t nvt_=
idx,
> +                        XiveNVT *nvt);
> +int xive_router_write_nvt(XiveRouter *xrtr, uint8_t nvt_blk, uint32_t nv=
t_idx,
> +                          XiveNVT *nvt, uint8_t word_number);
> +
> =20
>  /*
>   * XIVE END ESBs
> @@ -393,6 +402,7 @@ typedef struct XiveTCTX {
>      qemu_irq    output;
> =20
>      uint8_t     regs[XIVE_TM_RING_COUNT * XIVE_TM_RING_SIZE];
> +    uint32_t    hw_cam;

I don't love having this as a separate field.  Since it also appears
within the register space, it's kind of redundant.  On the other hand,
I see that wiring up the property directly to the register space
doesn't really work.  Not sure how to deal with that one.

>  } XiveTCTX;
> =20
>  /*
> @@ -412,4 +422,9 @@ extern const MemoryRegionOps xive_tm_ops;
> =20
>  void xive_tctx_pic_print_info(XiveTCTX *tctx, Monitor *mon);
> =20
> +static inline uint32_t xive_nvt_cam_line(uint8_t nvt_blk, uint32_t nvt_i=
dx)
> +{
> +    return (nvt_blk << 19) | nvt_idx;
> +}
> +
>  #endif /* PPC_XIVE_H */
> diff --git a/include/hw/ppc/xive_regs.h b/include/hw/ppc/xive_regs.h
> index ede3d04c5eda..85557e730cd8 100644
> --- a/include/hw/ppc/xive_regs.h
> +++ b/include/hw/ppc/xive_regs.h
> @@ -186,4 +186,28 @@ typedef struct XiveEND {
>  #define GETFIELD_BE32(m, v)       GETFIELD(m, be32_to_cpu(v))
>  #define SETFIELD_BE32(m, v, val)  cpu_to_be32(SETFIELD(m, be32_to_cpu(v)=
, val))
> =20
> +/* Notification Virtual Target (NVT) */
> +typedef struct XiveNVT {
> +        uint32_t        w0;
> +#define NVT_W0_VALID             PPC_BIT32(0)
> +        uint32_t        w1;
> +        uint32_t        w2;
> +        uint32_t        w3;
> +        uint32_t        w4;
> +        uint32_t        w5;
> +        uint32_t        w6;
> +        uint32_t        w7;
> +        uint32_t        w8;
> +#define NVT_W8_GRP_VALID         PPC_BIT32(0)
> +        uint32_t        w9;
> +        uint32_t        wa;
> +        uint32_t        wb;
> +        uint32_t        wc;
> +        uint32_t        wd;
> +        uint32_t        we;
> +        uint32_t        wf;
> +} XiveNVT;
> +
> +#define xive_nvt_is_valid(nvt)    (be32_to_cpu((nvt)->w0) & NVT_W0_VALID)
> +
>  #endif /* PPC_XIVE_REGS_H */
> diff --git a/hw/intc/xive.c b/hw/intc/xive.c
> index 80a965c14200..891542920683 100644
> --- a/hw/intc/xive.c
> +++ b/hw/intc/xive.c
> @@ -358,6 +358,25 @@ void xive_tctx_pic_print_info(XiveTCTX *tctx, Monito=
r *mon)
>      }
>  }
> =20
> +/* The HW CAM (23bits) is hardwired to :
> + *
> + *   0x000||0b1||4Bit chip number||7Bit Thread number.
> + *
> + * and when the block grouping extension is enabled :
> + *
> + *   4Bit chip number||0x001||7Bit Thread number.
> + */
> +static uint32_t hw_cam_line(uint8_t chip_id, uint8_t tid)
> +{
> +    bool block_group =3D false; /* TODO (PowerNV) */
> +
> +    if (block_group) {
> +        return 1 << 11 | (chip_id & 0xf) << 7 | (tid & 0x7f);
> +    } else {
> +        return (chip_id & 0xf) << 11 | 1 << 7 | (tid & 0x7f);
> +    }
> +}
> +
>  static void xive_tctx_reset(void *dev)
>  {
>      XiveTCTX *tctx =3D XIVE_TCTX(dev);
> @@ -388,6 +407,12 @@ static void xive_tctx_realize(DeviceState *dev, Erro=
r **errp)
>      cpu =3D POWERPC_CPU(obj);
>      tctx->cs =3D CPU(obj);
> =20
> +    if (!tctx->hw_cam) {
> +        error_setg(errp, "XIVE: HW CAM is not set for CPU %d",
> +                   tctx->cs->cpu_index);

You could do this at realize, rather than reset, couldn't you?

> +        return;
> +    }
> +
>      env =3D &cpu->env;
>      switch (PPC_INPUT(env)) {
>      case PPC_FLAGS_INPUT_POWER7:
> @@ -418,11 +443,17 @@ static const VMStateDescription vmstate_xive_tctx =
=3D {
>      },
>  };
> =20
> +static Property  xive_tctx_properties[] =3D {
> +    DEFINE_PROP_UINT32("hw-cam", XiveTCTX, hw_cam, 0),
> +    DEFINE_PROP_END_OF_LIST(),
> +};
> +
>  static void xive_tctx_class_init(ObjectClass *klass, void *data)
>  {
>      DeviceClass *dc =3D DEVICE_CLASS(klass);
> =20
>      dc->desc =3D "XIVE Interrupt Thread Context";
> +    dc->props =3D xive_tctx_properties;
>      dc->realize =3D xive_tctx_realize;
>      dc->unrealize =3D xive_tctx_unrealize;
>      dc->vmsd =3D &vmstate_xive_tctx;
> @@ -978,6 +1009,194 @@ int xive_router_write_end(XiveRouter *xrtr, uint8_=
t end_blk, uint32_t end_idx,
>     return xrc->write_end(xrtr, end_blk, end_idx, end, word_number);
>  }
> =20
> +int xive_router_get_nvt(XiveRouter *xrtr, uint8_t nvt_blk, uint32_t nvt_=
idx,
> +                        XiveNVT *nvt)
> +{
> +   XiveRouterClass *xrc =3D XIVE_ROUTER_GET_CLASS(xrtr);
> +
> +   return xrc->get_nvt(xrtr, nvt_blk, nvt_idx, nvt);
> +}
> +
> +int xive_router_write_nvt(XiveRouter *xrtr, uint8_t nvt_blk, uint32_t nv=
t_idx,
> +                        XiveNVT *nvt, uint8_t word_number)
> +{
> +   XiveRouterClass *xrc =3D XIVE_ROUTER_GET_CLASS(xrtr);
> +
> +   return xrc->write_nvt(xrtr, nvt_blk, nvt_idx, nvt, word_number);
> +}
> +
> +/*
> + * The thread context register words are in big-endian format.
> + */
> +static int xive_presenter_tctx_match(XiveTCTX *tctx, uint8_t format,
> +                                     uint8_t nvt_blk, uint32_t nvt_idx,
> +                                     bool cam_ignore, uint32_t logic_ser=
v)
> +{
> +    uint32_t cam =3D xive_nvt_cam_line(nvt_blk, nvt_idx);
> +    uint8_t *regs;
> +    uint32_t qw3w2;
> +    uint32_t qw2w2;
> +    uint32_t qw1w2;
> +    uint32_t qw0w2;
> +
> +    /* TODO (PowerNV): ignore low order bits of nvt id */
> +
> +    regs =3D &tctx->regs[TM_QW3_HV_PHYS];
> +    qw3w2 =3D be32_to_cpu(*((uint32_t *) &regs[TM_WORD2]));

This is one of the main places we access regs and we have to do
horrible casting.  Would it make more sense for it to be a uint32_t
array?  Or at least for the local *regs to be.

> +    regs =3D &tctx->regs[TM_QW2_HV_POOL];
> +    qw2w2 =3D be32_to_cpu(*((uint32_t *) &regs[TM_WORD2]));
> +    regs =3D &tctx->regs[TM_QW1_OS];
> +    qw1w2 =3D be32_to_cpu(*((uint32_t *) &regs[TM_WORD2]));
> +    regs =3D &tctx->regs[TM_QW0_USER];
> +    qw0w2 =3D be32_to_cpu(*((uint32_t *) &regs[TM_WORD2]));
> +
> +    if (format =3D=3D 0) {
> +        /* F=3D0 & i=3D1: Logical server notification */

I'm guessing the i=3D1 is the cam_ignore=3D=3Dtrue check?  Maybe put this
comment inside the if block to make that clearer.

> +        if (cam_ignore =3D=3D true) {
> +            qemu_log_mask(LOG_UNIMP, "XIVE: no support for LS NVT %x/%x\=
n",
> +                          nvt_blk, nvt_idx);
> +             return -1;
> +        }
> +
> +        /* F=3D0 & i=3D0: Specific NVT notification */
> +
> +        /* PHYS ring */
> +        if ((qw3w2 & TM_QW3W2_VT) &&
> +            tctx->hw_cam =3D=3D hw_cam_line(nvt_blk, nvt_idx)) {
> +            return TM_QW3_HV_PHYS;
> +        }
> +
> +        /* HV POOL ring */
> +        if ((qw2w2 & TM_QW2W2_VP) &&
> +            cam =3D=3D GETFIELD(TM_QW2W2_POOL_CAM, qw2w2)) {

Does that need to be a GETFIELD_BE32?

> +            return TM_QW2_HV_POOL;
> +        }
> +
> +        /* OS ring */
> +        if ((qw1w2 & TM_QW1W2_VO) &&
> +            cam =3D=3D GETFIELD(TM_QW1W2_OS_CAM, qw1w2)) {

And here.

> +            return TM_QW1_OS;
> +        }
> +    } else {
> +        /* F=3D1 : User level Event-Based Branch (EBB) notification */
> +
> +        /* USER ring */
> +        if  ((qw1w2 & TM_QW1W2_VO) &&
> +             (cam =3D=3D GETFIELD(TM_QW1W2_OS_CAM, qw1w2)) &&

And here.

> +             (qw0w2 & TM_QW0W2_VU) &&
> +             (logic_serv =3D=3D GETFIELD(TM_QW0W2_LOGIC_SERV, qw0w2))) {
> +            return TM_QW0_USER;
> +        }
> +    }
> +    return -1;
> +}
> +
> +typedef struct XiveTCTXMatch {
> +    XiveTCTX *tctx;
> +    uint8_t ring;
> +} XiveTCTXMatch;
> +
> +static bool xive_presenter_match(XiveRouter *xrtr, uint8_t format,
> +                                 uint8_t nvt_blk, uint32_t nvt_idx,
> +                                 bool cam_ignore, uint8_t priority,
> +                                 uint32_t logic_serv, XiveTCTXMatch *mat=
ch)
> +{
> +    CPUState *cs;
> +
> +    /* TODO (PowerNV): handle chip_id overwrite of block field for
> +     * hardwired CAM compares */
> +
> +    CPU_FOREACH(cs) {
> +        PowerPCCPU *cpu =3D POWERPC_CPU(cs);
> +        XiveTCTX *tctx =3D XIVE_TCTX(cpu->intc);
> +        int ring;
> +
> +        /*
> +         * HW checks that the CPU is enabled in the Physical Thread
> +         * Enable Register (PTER).
> +         */
> +
> +        /*
> +         * Check the thread context CAM lines and record matches. We
> +         * will handle CPU exception delivery later
> +         */
> +        ring =3D xive_presenter_tctx_match(tctx, format, nvt_blk, nvt_id=
x,
> +                                         cam_ignore, logic_serv);
> +        /*
> +         * Save the context and follow on to catch duplicates, that we
> +         * don't support yet.
> +         */
> +        if (ring !=3D -1) {
> +            if (match->tctx) {
> +                qemu_log_mask(LOG_GUEST_ERROR, "XIVE: already found a th=
read "
> +                              "context NVT %x/%x\n", nvt_blk, nvt_idx);
> +                return false;
> +            }
> +
> +            match->ring =3D ring;
> +            match->tctx =3D tctx;
> +        }
> +    }
> +
> +    if (!match->tctx) {
> +        qemu_log_mask(LOG_UNIMP, "XIVE: NVT %x/%x is not dispatched\n",
> +                      nvt_blk, nvt_idx);
> +        return false;
> +    }
> +
> +    return true;
> +}
> +
> +/*
> + * This is our simple Xive Presenter Engine model. It is merged in the
> + * Router as it does not require an extra object.
> + *
> + * It receives notification requests sent by the IVRE to find one
> + * matching NVT (or more) dispatched on the processor threads. In case
> + * of a single NVT notification, the process is abreviated and the
> + * thread is signaled if a match is found. In case of a logical server
> + * notification (bits ignored at the end of the NVT identifier), the
> + * IVPE and IVRE select a winning thread using different filters. This
> + * involves 2 or 3 exchanges on the PowerBus that the model does not
> + * support.
> + *
> + * The parameters represent what is sent on the PowerBus
> + */
> +static void xive_presenter_notify(XiveRouter *xrtr, uint8_t format,
> +                                  uint8_t nvt_blk, uint32_t nvt_idx,
> +                                  bool cam_ignore, uint8_t priority,
> +                                  uint32_t logic_serv)
> +{
> +    XiveNVT nvt;
> +    XiveTCTXMatch match =3D { 0 };

IIUC that's initializing the tctx pointer field of match, so should be
NULL, not 0 (yes, technically they're equivalent in C, but using 0 for
a pointer is confusing).

> +    bool found;
> +
> +    /* NVT cache lookup */
> +    if (xive_router_get_nvt(xrtr, nvt_blk, nvt_idx, &nvt)) {
> +        qemu_log_mask(LOG_GUEST_ERROR, "XIVE: no NVT %x/%x\n",
> +                      nvt_blk, nvt_idx);
> +        return;
> +    }
> +
> +    if (!xive_nvt_is_valid(&nvt)) {
> +        qemu_log_mask(LOG_GUEST_ERROR, "XIVE: NVT %x/%x is invalid\n",
> +                      nvt_blk, nvt_idx);
> +        return;
> +    }
> +
> +    found =3D xive_presenter_match(xrtr, format, nvt_blk, nvt_idx, cam_i=
gnore,
> +                                 priority, logic_serv, &match);
> +    if (found) {
> +        return;
> +    }
> +
> +    /* If no matching NVT is dispatched on a HW thread :
> +     * - update the NVT structure if backlog is activated
> +     * - escalate (ESe PQ bits and EAS in w4-5) if escalation is
> +     *   activated
> +     */
> +}
> +
>  /*
>   * An END trigger can come from an event trigger (IPI or HW) or from
>   * another chip. We don't model the PowerBus but the END trigger
> @@ -1047,6 +1266,14 @@ static void xive_router_end_notify(XiveRouter *xrt=
r, uint8_t end_blk,
>      /*
>       * Follows IVPE notification
>       */
> +    xive_presenter_notify(xrtr, format,
> +                          GETFIELD_BE32(END_W6_NVT_BLOCK, end.w6),
> +                          GETFIELD_BE32(END_W6_NVT_INDEX, end.w6),
> +                          GETFIELD_BE32(END_W7_F0_IGNORE, end.w7),
> +                          priority,
> +                          GETFIELD_BE32(END_W7_F1_LOG_SERVER_ID, end.w7)=
);
> +
> +    /* TODO: Auto EOI. */
>  }
> =20
>  static void xive_router_notify(XiveNotifier *xn, uint32_t lisn)

--=20
David Gibson			| I'll have my music baroque, and my code
david AT gibson.dropbear.id.au	| minimalist, thank you.  NOT _the_ _other_
				| _way_ _around_!
http://www.ozlabs.org/~dgibson

--zAZKrYjO7GRpkTOs
Content-Type: application/pgp-signature; name="signature.asc"

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEdfRlhq5hpmzETofcbDjKyiDZs5IFAlwJ5IwACgkQbDjKyiDZ
s5I+1A//fMetzmtSjRZ805wO8yiSdk6rCegV5l1gnV4YPR3iBtkS6VQp0lWFSXML
vmeQz/ryPng+F/H4XnePFWZsR6oaA2zxecUi/vUCPv8V8l655XMHzERZljrIRx4f
UQ4GyoqGyIbY68WpREE8Nryru9qhRZ1UJP6xcC9/0Bt46vqL47rLmZZuSkkXWQtf
9QI4kGGu5uFTiK/T+2ZxAHB8cGkANb7wHQGbFss9PnUY58jwBhObLuf47jQlZqHN
Ax13pP/US922mSWURHTmZyJq8dRBHu3vrmE++3XKY8yG0qxjPsSXYkKP6mjONKPn
LZyHI2h3ROMItq1JGb1jaizxhOjPPJsS9G5gam5lQwKL7CVmrQ/pM/9X+MzGOctF
IGYJVvLs2rWL70Yx+FKOUp+xLIb4ANeBC6MjdRE4svhsQrcABwH5GQNNTAEUTy5A
wlO71E6miGfYcnANkA+7TEVXIc9pZV2iCA2aocpqVrLPXVFZRvJA8yb2yhwDr3IG
/0J7hIHI8cRrGbkcShNSQFuICwnPK+y6XYkeKsejkYTF6zEKsI2w/oqrXePGIS07
ITSK8UFuapYkart+vhid83K84wU01p6h4cgKxJ92iTvYuX8B+j01JvtBSpw1hX1V
2VwKbtV2L7DwPyBMvWTFQnfOSqrD6rYctq3BkCgahNacAs0Min0=
=yZoS
-----END PGP SIGNATURE-----

--zAZKrYjO7GRpkTOs--

