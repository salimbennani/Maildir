Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:50:30 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 71195580375;
	Thu,  6 Dec 2018 08:48:38 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 08:48:38 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AeqgBIxEKkC9wNS19qHdrI51GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ74p8u8bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJVyJPHJ6y?=
 =?us-ascii?q?YYUMAeQGP+lYoZL9p0MMoBalGQWgGPnixiNSi3PqwaE31fkqHwHc3AwnGtIDqG?=
 =?us-ascii?q?jZrNPoO6cIT++0wrTDwzLeb/NMwzfy8ojJeQ0mrP6WW7J/bNDRxlchFg/fi1WQ?=
 =?us-ascii?q?tJblPymP2eUNqGWU9fBgVee1h2E7rAFxpyGiy8ExgYfKnoIY0k7I+Tl9zYovON?=
 =?us-ascii?q?G1RlB3bcS5HJZTqy2WLYp7T8E6T212pSo3yKcKtYO0cSQW0pgr2gLTZ+Gdf4WK?=
 =?us-ascii?q?/h7uUvuaLy1ii3J/Yr2/gg6/8Ui+xe34Ucm5yEhKriVbndnWrHwN1ALc6tKBSv?=
 =?us-ascii?q?Rj+ketwzGP1xrc6u1cIEA0k7TUK4I5z7IuipYetV7PEjL4lUnolqOaa0Yp9vSy?=
 =?us-ascii?q?5+nmYLjqvpqcOJV1igH6PKQugMu/AeEgPwgKXmib//m81bL68U36XrpKlPs2nb?=
 =?us-ascii?q?fdsJzDIsQaqKi5DBFP0os49Ra/ACmp0M4CkXkEMl1FYhSHgJbtO13UJ/D4F/i/?=
 =?us-ascii?q?j0y2kDh33/DGIqHhApLVI3jHkbfhfqhy51RTyQou1t1f45NUCrccIPP8QEPxtd?=
 =?us-ascii?q?rYDgMnPAyw2eroFNJ91oYGU2KVHqCZKL/SsUOP5u83I+mDfo4VuCrnJPgi/fLu?=
 =?us-ascii?q?jWI5lkUbfammxpYXbHG4HvJ7I0SWe3bsg9EBEXsUsQo6VuDllFqCUTtLbXaoQ6?=
 =?us-ascii?q?08/i07CJ6hDYrbRICth6KO0D24Hp1RYGBGDFeMHGzsd4WFXfcMdS2TLtVgkjwC?=
 =?us-ascii?q?SbiuVYsh2Quyuw/9zrptNvDU9TEAtZL/yNh14PXemgsp9Tx0CMSd0HuBT3tukW?=
 =?us-ascii?q?MKXDI22KF/oUpgylaMy6R4gvpYFcBN6PNNSAs1KZncz+liAdDoRg3BZsuJSEqh?=
 =?us-ascii?q?Qti+AjE+VNQxz8UKY0Z8AdqiiB/D0jGuA78UkbyLGZM1/rjd33j3O8Zy1XLG2L?=
 =?us-ascii?q?M9gFkhR8tFLXemibJn9wjPG47JlF2UmLuweqQCwiHB7meDwnCIvEFDTgFwV6LJ?=
 =?us-ascii?q?XXQcZkvTqdT0/UfCT76oCbQ6PQpN08+CKq1WatL3iVVKXuvsONPbY2ipgWe/GQ?=
 =?us-ascii?q?6Ixq+QbIrtY2gSwT/SCFYanAwJ/XaJLw4+Bjy/rGLYFzFuEVPvY0Xx8ehxsn+7?=
 =?us-ascii?q?T0k0zx2UYE1lzba65hkVhfmEQfMJwr0EoDshqylzHFulw9LWCt+Apw19fKVcYd?=
 =?us-ascii?q?Ix+ktH2XjetwxnOpygLqZihlEFfgRzvkPu0Qh3C4pancgrqnMq0BR9KaaC3Fxd?=
 =?us-ascii?q?cDOY2Ij6OqfLJWnq4BCvd6nW10nE39aS5KgO5+o3qlX5sA6yC0ot7m9o099W03?=
 =?us-ascii?q?ub+JXHFw4SUZP3UkYq+Bl2vbDaYi8h54zK0X1gK7W7sjjH29gxHusq1g6gf8tD?=
 =?us-ascii?q?MKODDALzE9AaC9KyJ+AwmlmpbggLPOZd9KMvO8Omdv2G2LOkPep6nTKmi3hH75?=
 =?us-ascii?q?550k6W6yV8TevI1Y4fw/6ExguHSyv8jFC5v8DtmIBLeSsdHnCixijjHoJRYLN9?=
 =?us-ascii?q?fZwKCWu3P8K43NF+iIPzVH5C816jAUgL2MuoeRqUclz80hdc1UURoXy7hyS4yy?=
 =?us-ascii?q?Z4nC0urqqaxCbO2fjtdAIbOm5XQ2lvlVftIYmug9EaRkSodBUplB2+6Eb+xqhb?=
 =?us-ascii?q?orl/LmbJTUdJeSj2M39tUq+qurWeZM5P7YsisT9LX+SkfVCaVrn9rgMY0yz5BW?=
 =?us-ascii?q?texzM7dzawtpXihRN6i2GdLHd1rHXHf8F93hPf5N3aRf5M0TsKXih4iT/LBlei?=
 =?us-ascii?q?O9ml58mbl5DGsuqmTWKuSoVTcTX3zYOHrCa65XdlARqlk/Cxm93nFxM30Sv619?=
 =?us-ascii?q?lsSCXJowzwYojt16SmL+1nelNkC0P768p/Aot+iJc/hIkM2XgGgZWY5XkHnn3y?=
 =?us-ascii?q?MdlB2aL+cWACRTgEw9PO5Ajl2UtjLm+Gxo7jV3WdxNdhaMe+Ym8Mxi096MVKAr?=
 =?us-ascii?q?+O7LNYhSt1vka4rQXJbPh4nzcdyuEh5GQUgu4Xowot0juSAqoJEkZGJyzsmA+F?=
 =?us-ascii?q?79S/rKVReWaufqK81Et4ndC9Er6CphtQV2r+epcnBSVw9NlwMErQ0H3v7YHpYM?=
 =?us-ascii?q?XQbdUWthGOkhbPle5VKI8qlvoRhCpqImb9vXwjy+4mgh1ix5C6vI6bK2pz+KK1?=
 =?us-ascii?q?GAJXNjrwZ8kL4DHikb5entqK34CoBphuAS8EXJzsTfK1Cj4SsennOh2KED09rH?=
 =?us-ascii?q?ebBLXeERWe6Edgs3LADZSrO2uLK3keyNVoXAOdK1BHgAAIQDU6mYY0FgKwy8zk?=
 =?us-ascii?q?bkh5/Sod5kLiphtP1+JoNAT/UmHFqwezcTo0TJmfLBxL7gBN/UvVMMqe7v5tEC?=
 =?us-ascii?q?Fc5JGusAuNKmmDbQRSEW4JQlCEB0zkPrS25djA9PWYBvOjL/TUZ7WCs/deV/CO?=
 =?us-ascii?q?xZKgyYZm+zeMNsOSPnhtFfE720xDXWxnFMTdgTkAVysXlyfVZc6BuBi84jF3rt?=
 =?us-ascii?q?y48PnzWALg+4qPC7hRMdVu4Ry2gr2DN+mfhClnMzZYy4gMyGTMyLge2l4Sli5v?=
 =?us-ascii?q?eyOsEbQGqS7CUqbQlrVLAB4cbiN5LNFI4L4k3glRJc7bjcv42aRljvEuEVdKS1?=
 =?us-ascii?q?zgltutZcwLOGy9MFLHBECWNLWJPzHLwsf3Yb+iRr1UlulbqxqwuTODGU/5IjuD?=
 =?us-ascii?q?jyXpVwyoMexUkCGbPRletJuhfRp3FWfjTMzpahugPd9zjD02x6A0h3zQOW4dNz?=
 =?us-ascii?q?h8b11CrrmK4SxEhfV/HnRL7mB5IumchyaZ8+7YJ44WsPRxBCR0kuNa4HIixLpU?=
 =?us-ascii?q?7CFLXvp1mCTJo95qolGmlPSPyzV9XBpPrDZLmJyEvUF4NarF8ZlAXCWMwBVY1W?=
 =?us-ascii?q?iMBg5CldpnDsbzoakYnsDCiK/pOh9D9dzO9McRDsSSL9iIZj5pEBzmH3bxCw8D?=
 =?us-ascii?q?RCTjYWTegUNauOuf+n2cst4xrZ263NInULlSUFAyXtgTEFpsGNwFaJt6FhYplb?=
 =?us-ascii?q?nT2McD4HeWrxTLQshe+JfdWaTWSc/uIzaQl7UMRxYOzb7iNoMVftnhx0xKdkZ7?=
 =?us-ascii?q?kIjOFgzWUMwb5mVAcAYy6GZK82N+R3wo2FOtPgKr41cRCOS9hQU3gU1maP4usj?=
 =?us-ascii?q?L3/hEtOwyO7A45jFV5pcj/hz2LOGr0JbusRp0GWwL7skEwNtXwRAMjKUWNnEhg?=
 =?us-ascii?q?fBvJTrlWifM0amFvjEnQtJJEHvh0RLdBJhQXwKfTL9Ahy1cUkDi7wUZB6aORDJ?=
 =?us-ascii?q?J4l00wbIKopnRM8wt5aZg+IqmGYOJyzlFPgOqhoyjggvsxyRAYKFsK2GCfYigF?=
 =?us-ascii?q?vAoPLLZwY2KT9/dn6QXKuzJedXJEA+Fsovt3+1kVI+mGwD/8yblFK1D3O+HJa+?=
 =?us-ascii?q?uztm7CnMuJRBsQ21kSmk9e9rhz0Ms/Ox6eWkYv5LicDRIEMYzJMwhOb8tU+z7U?=
 =?us-ascii?q?ZynY9a31yI9xd6C0HePlV/WHr+5Amku5GBsyN58F684IWJ623xecZfvnK7sM0l?=
 =?us-ascii?q?0C4AnqNFOIFrwdZB2PgB8Dosei0IVw24hNYD0QVyE1GyKt563TrxFiuPefX9Ao?=
 =?us-ascii?q?KiMQRqMNMnM7Xp38lyMP+zx6ESKs3+YdgCuD6TC08iDRCiTsR9N5YfOVYw58Tt?=
 =?us-ascii?q?as9nMi8P7ywUXK4IjdJifiMslmvcTCweoAotCMDPYQBaN6uUba3YxFXWSqQkbG?=
 =?us-ascii?q?C9vzLJ/1L8EJbNf0A3u+GnG7jz8vSs73dIKoNqWgjAXsSJxRuY/d3TxlPNLrRR?=
 =?us-ascii?q?8EHBIljucP/q9jLSgeeYAycFa8vgIyLaGgZgKFyM+nUk6kMz4QRP5am7bpL4dL?=
 =?us-ascii?q?xjYhO7fpgEArSYs3mqzuqRYA?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AtAACwUQlch0O0hNFjHgEGBwaBUggLA?=
 =?us-ascii?q?YFaghEnmCGCIZJBhHmBcywTAYQ8AoMZIjUIDQEDAQEBAQEBAgETAQEBCA0JCCk?=
 =?us-ascii?q?vgjYkAYJiAwMBAiRSBgkBAVADVAYBEgWCUUuCAgQBpwMzhAEBAYYmh3CEL4FXP?=
 =?us-ascii?q?45/AqBfBwKCIASPJBaBXIg8hx4siGKRRQGCCzMaI4M8glCNVAE2PwEBMYEFAQG?=
 =?us-ascii?q?KOgEB?=
X-IPAS-Result: =?us-ascii?q?A0AtAACwUQlch0O0hNFjHgEGBwaBUggLAYFaghEnmCGCIZJ?=
 =?us-ascii?q?BhHmBcywTAYQ8AoMZIjUIDQEDAQEBAQEBAgETAQEBCA0JCCkvgjYkAYJiAwMBA?=
 =?us-ascii?q?iRSBgkBAVADVAYBEgWCUUuCAgQBpwMzhAEBAYYmh3CEL4FXP45/AqBfBwKCIAS?=
 =?us-ascii?q?PJBaBXIg8hx4siGKRRQGCCzMaI4M8glCNVAE2PwEBMYEFAQGKOgEB?=
X-IronPort-AV: E=Sophos;i="5.56,323,1539673200"; 
   d="scan'208";a="55827326"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 06 Dec 2018 08:48:37 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726362AbeLFQsd (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 6 Dec 2018 11:48:33 -0500
Received: from usa-sjc-mx-foss1.foss.arm.com ([217.140.101.70]:55696 "EHLO
        foss.arm.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1725907AbeLFQsc (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 6 Dec 2018 11:48:32 -0500
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.72.51.249])
        by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id 12DBE1596;
        Thu,  6 Dec 2018 08:48:32 -0800 (PST)
Received: from e119886-lin.cambridge.arm.com (unknown [10.37.6.11])
        by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPSA id 9A4623F5AF;
        Thu,  6 Dec 2018 08:48:27 -0800 (PST)
From: Andrew Murray <andrew.murray@arm.com>
To: Peter Zijlstra <peterz@infradead.org>,
        Ingo Molnar <mingo@redhat.com>,
        Arnaldo Carvalho de Melo <acme@kernel.org>,
        Richard Henderson <rth@twiddle.net>,
        Ivan Kokshaysky <ink@jurassic.park.msu.ru>,
        Matt Turner <mattst88@gmail.com>,
        Will Deacon <will.deacon@arm.com>,
        Mark Rutland <mark.rutland@arm.com>,
        Shawn Guo <shawnguo@kernel.org>,
        Sascha Hauer <s.hauer@pengutronix.de>,
        Benjamin Herrenschmidt <benh@kernel.crashing.org>,
        Paul Mackerras <paulus@samba.org>,
        Thomas Gleixner <tglx@linutronix.de>,
        Borislav Petkov <bp@alien8.de>,
        Russell King <linux@armlinux.org.uk>, suzuki.poulose@arm.com,
        robin.murphy@arm.com, Michael Ellerman <mpe@ellerman.id.au>
Cc: linux-kernel@vger.kernel.org, linux-alpha@vger.kernel.org,
        linux-arm-kernel@lists.infradead.org,
        linuxppc-dev@lists.ozlabs.org, x86@kernel.org
Subject: [PATCH v3 11/12] x86: perf/core: use PERF_PMU_CAP_NO_EXCLUDE for exclude incapable PMUs
Date: Thu,  6 Dec 2018 16:47:28 +0000
Message-Id: <1544114849-47266-12-git-send-email-andrew.murray@arm.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1544114849-47266-1-git-send-email-andrew.murray@arm.com>
References: <1544114849-47266-1-git-send-email-andrew.murray@arm.com>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

For x86 PMUs that do not support context exclusion let's advertise the
PERF_PMU_CAP_NO_EXCLUDE capability. This ensures that perf will
prevent us from handling events where any exclusion flags are set.
Let's also remove the now unnecessary check for exclusion flags.

This change means that amd/iommu and amd/uncore will now also
indicate that they do not support exclude_{hv|idle} and intel/uncore
that it does not support exclude_{guest|host}.

Signed-off-by: Andrew Murray <andrew.murray@arm.com>
---
 arch/x86/events/amd/iommu.c    | 6 +-----
 arch/x86/events/amd/uncore.c   | 7 ++-----
 arch/x86/events/intel/uncore.c | 9 +--------
 3 files changed, 4 insertions(+), 18 deletions(-)

diff --git a/arch/x86/events/amd/iommu.c b/arch/x86/events/amd/iommu.c
index 3210fee..7635c23 100644
--- a/arch/x86/events/amd/iommu.c
+++ b/arch/x86/events/amd/iommu.c
@@ -223,11 +223,6 @@ static int perf_iommu_event_init(struct perf_event *event)
 	if (is_sampling_event(event) || event->attach_state & PERF_ATTACH_TASK)
 		return -EINVAL;
 
-	/* IOMMU counters do not have usr/os/guest/host bits */
-	if (event->attr.exclude_user || event->attr.exclude_kernel ||
-	    event->attr.exclude_host || event->attr.exclude_guest)
-		return -EINVAL;
-
 	if (event->cpu < 0)
 		return -EINVAL;
 
@@ -414,6 +409,7 @@ static const struct pmu iommu_pmu __initconst = {
 	.read		= perf_iommu_read,
 	.task_ctx_nr	= perf_invalid_context,
 	.attr_groups	= amd_iommu_attr_groups,
+	.capabilities	= PERF_PMU_CAP_NO_EXCLUDE,
 };
 
 static __init int init_one_iommu(unsigned int idx)
diff --git a/arch/x86/events/amd/uncore.c b/arch/x86/events/amd/uncore.c
index 8671de1..988cb9c 100644
--- a/arch/x86/events/amd/uncore.c
+++ b/arch/x86/events/amd/uncore.c
@@ -201,11 +201,6 @@ static int amd_uncore_event_init(struct perf_event *event)
 	if (is_sampling_event(event) || event->attach_state & PERF_ATTACH_TASK)
 		return -EINVAL;
 
-	/* NB and Last level cache counters do not have usr/os/guest/host bits */
-	if (event->attr.exclude_user || event->attr.exclude_kernel ||
-	    event->attr.exclude_host || event->attr.exclude_guest)
-		return -EINVAL;
-
 	/* and we do not enable counter overflow interrupts */
 	hwc->config = event->attr.config & AMD64_RAW_EVENT_MASK_NB;
 	hwc->idx = -1;
@@ -307,6 +302,7 @@ static struct pmu amd_nb_pmu = {
 	.start		= amd_uncore_start,
 	.stop		= amd_uncore_stop,
 	.read		= amd_uncore_read,
+	.capabilities	= PERF_PMU_CAP_NO_EXCLUDE,
 };
 
 static struct pmu amd_llc_pmu = {
@@ -317,6 +313,7 @@ static struct pmu amd_llc_pmu = {
 	.start		= amd_uncore_start,
 	.stop		= amd_uncore_stop,
 	.read		= amd_uncore_read,
+	.capabilities	= PERF_PMU_CAP_NO_EXCLUDE,
 };
 
 static struct amd_uncore *amd_uncore_alloc(unsigned int cpu)
diff --git a/arch/x86/events/intel/uncore.c b/arch/x86/events/intel/uncore.c
index 27a4614..d516161 100644
--- a/arch/x86/events/intel/uncore.c
+++ b/arch/x86/events/intel/uncore.c
@@ -695,14 +695,6 @@ static int uncore_pmu_event_init(struct perf_event *event)
 	if (pmu->func_id < 0)
 		return -ENOENT;
 
-	/*
-	 * Uncore PMU does measure at all privilege level all the time.
-	 * So it doesn't make sense to specify any exclude bits.
-	 */
-	if (event->attr.exclude_user || event->attr.exclude_kernel ||
-			event->attr.exclude_hv || event->attr.exclude_idle)
-		return -EINVAL;
-
 	/* Sampling not supported yet */
 	if (hwc->sample_period)
 		return -EINVAL;
@@ -800,6 +792,7 @@ static int uncore_pmu_register(struct intel_uncore_pmu *pmu)
 			.stop		= uncore_pmu_event_stop,
 			.read		= uncore_pmu_event_read,
 			.module		= THIS_MODULE,
+			.capabilities	= PERF_PMU_CAP_NO_EXCLUDE,
 		};
 	} else {
 		pmu->pmu = *pmu->type->pmu;
-- 
2.7.4

