Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  18 Dec 2018 08:50:54 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 379155805FC
	for <like.xu@linux.intel.com>; Mon, 17 Dec 2018 14:53:40 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 17 Dec 2018 14:53:39 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AlWwYdxIo8bus9AWmmdmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgfKfXxwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJBUMhPWSJPAYGz?=
 =?us-ascii?q?b4UAAOQOIOhYt4vwqVkBoBejCwSgGP3gyiRTi3PqxK03yfgtHR3a0AA8Gd8FrX?=
 =?us-ascii?q?TarM/yNKcXSe27y7PHzDreZP1Kxzj96ZTIcxE8qvyLWLJwa9TeyUgzFwLElViQ?=
 =?us-ascii?q?s5LqMC6V1usXr2iX9fZvVeWqi2M+rQx6vzuhxt80h4XXmo4YyUrI+ThkzIs2P9?=
 =?us-ascii?q?G0VkB2bN6+HJdNtSyWL5V6Tt8mTm1ypSo3xKMKtYSmcCUJxpkr3QDTZv+BfoOV?=
 =?us-ascii?q?+BzsTvyRLi19hH99eLKwmRKy8U+4x+34V8m0y0pKrjFfntnDsHANygbf6s+dSv?=
 =?us-ascii?q?ty5kuh2DCP2B7P6uxcP0w4ianWJ4Q8zrItlZcfq1rPEyH2lUnskaObdF0o+u2y?=
 =?us-ascii?q?5OTmZrXmqIWcN4hxigzmK6QhhMm/AfkhPgcTQWeb5/qz1Ln68ULiR7VKk/s2nb?=
 =?us-ascii?q?XHv5DBIsgboq+5AwxL3Yo55Be/Ei+r0NAZnXkBMVJEdwiLj4nvO1HSPv/4Ce2z?=
 =?us-ascii?q?jEirkDdu3P3GOLrhApPCLnjFjbftZ7F961RTyAYr19BQ+4pUCq0dIPL0QkLxsN?=
 =?us-ascii?q?3YDhwnPACuzOfnFc5w1ocfWWKJH6+YP7nesV6O5uIzPeaMYJUZtyr6K/ggtLbT?=
 =?us-ascii?q?i2QkkwodYbWxxslQL3S5Beh9ZUOeZ3Xqn5EGC2hNuwM/SOnjjhqFSSJSYHCpGL?=
 =?us-ascii?q?sx4yx+BI+4AIOQe4a2nbbU2S66GoFRNHlLD03JHXr2eoHBQfoVdS+JPudnlToL?=
 =?us-ascii?q?U6XnTJUuggqzvg33wKYyM+zP5ycDvoji3tUm2+qGjBw36Hl+C8OW0EmLSGd7mH?=
 =?us-ascii?q?5OQCU5j45lpkko716TmZJ1guBKXYhW/f5IThUSL5PQz+VmTdv1X1SSLZ+yVF+6?=
 =?us-ascii?q?T4D+UnkKRdUrzopLOh4lFg=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BAAACNKBhchxHrdtBlHQEBBQEHBQGBU?=
 =?us-ascii?q?wYBCwGBMIJijHSkf4FzBw4YFIdWIjYHDQEDAQEBAQEBAgETAQEBCgsJCBsOL4I?=
 =?us-ascii?q?2BQIDGgEGglwDAwECJB8KKQMDAQIGAQFICAMBUxkFgx2CAQEEpnGCKjOFQIRsj?=
 =?us-ascii?q?D4XgUA/gRGNcgKJQpdXCZFPCxiJc4dfLJk4gU0OgXlNIxWDJ4InF44eQDGBBxy?=
 =?us-ascii?q?LXIF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0BAAACNKBhchxHrdtBlHQEBBQEHBQGBUwYBCwGBMIJijHS?=
 =?us-ascii?q?kf4FzBw4YFIdWIjYHDQEDAQEBAQEBAgETAQEBCgsJCBsOL4I2BQIDGgEGglwDA?=
 =?us-ascii?q?wECJB8KKQMDAQIGAQFICAMBUxkFgx2CAQEEpnGCKjOFQIRsjD4XgUA/gRGNcgK?=
 =?us-ascii?q?JQpdXCZFPCxiJc4dfLJk4gU0OgXlNIxWDJ4InF44eQDGBBxyLXIF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,366,1539673200"; 
   d="scan'208";a="56276468"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 17 Dec 2018 14:53:39 -0800
Received: from localhost ([::1]:50278 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gZ1la-0005V0-CC
	for like.xu@linux.intel.com; Mon, 17 Dec 2018 17:53:38 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:33416)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <mreitz@redhat.com>) id 1gZ1cY-00070j-Dx
	for qemu-devel@nongnu.org; Mon, 17 Dec 2018 17:44:23 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <mreitz@redhat.com>) id 1gZ1cX-00068q-2P
	for qemu-devel@nongnu.org; Mon, 17 Dec 2018 17:44:18 -0500
Received: from mx1.redhat.com ([209.132.183.28]:40178)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <mreitz@redhat.com>)
	id 1gZ1cU-00066R-3u; Mon, 17 Dec 2018 17:44:14 -0500
Received: from smtp.corp.redhat.com (int-mx03.intmail.prod.int.phx2.redhat.com
	[10.5.11.13])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 6677A92A6F;
	Mon, 17 Dec 2018 22:44:13 +0000 (UTC)
Received: from localhost (ovpn-204-73.brq.redhat.com [10.40.204.73])
	by smtp.corp.redhat.com (Postfix) with ESMTPS id E7FF7608C5;
	Mon, 17 Dec 2018 22:44:12 +0000 (UTC)
From: Max Reitz <mreitz@redhat.com>
To: qemu-block@nongnu.org
Date: Mon, 17 Dec 2018 23:43:26 +0100
Message-Id: <20181217224348.14922-10-mreitz@redhat.com>
In-Reply-To: <20181217224348.14922-1-mreitz@redhat.com>
References: <20181217224348.14922-1-mreitz@redhat.com>
MIME-Version: 1.0
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.13
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.28]);
	Mon, 17 Dec 2018 22:44:13 +0000 (UTC)
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: [Qemu-devel] [PATCH v12 09/31] block: Make path_combine() return
 the path
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Kevin Wolf <kwolf@redhat.com>, Alberto Garcia <berto@igalia.com>,
	qemu-devel@nongnu.org, Max Reitz <mreitz@redhat.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Besides being safe for arbitrary path lengths, after some follow-up
patches all callers will want a freshly allocated buffer anyway.

In the meantime, path_combine_deprecated() is added which has the same
interface as path_combine() had before this patch. All callers to that
function will be converted in follow-up patches.

Signed-off-by: Max Reitz <mreitz@redhat.com>
Reviewed-by: Alberto Garcia <berto@igalia.com>
Reviewed-by: Kevin Wolf <kwolf@redhat.com>
---
 include/block/block.h |  4 +-
 block.c               | 85 ++++++++++++++++++++++++-------------------
 block/vmdk.c          |  3 +-
 3 files changed, 49 insertions(+), 43 deletions(-)

diff --git a/include/block/block.h b/include/block/block.h
index 1e54c8f505..c69b08bef9 100644
--- a/include/block/block.h
+++ b/include/block/block.h
@@ -494,9 +494,7 @@ void bdrv_get_full_backing_filename_from_filename(con=
st char *backed,
=20
 int path_has_protocol(const char *path);
 int path_is_absolute(const char *path);
-void path_combine(char *dest, int dest_size,
-                  const char *base_path,
-                  const char *filename);
+char *path_combine(const char *base_path, const char *filename);
=20
 int bdrv_readv_vmstate(BlockDriverState *bs, QEMUIOVector *qiov, int64_t=
 pos);
 int bdrv_writev_vmstate(BlockDriverState *bs, QEMUIOVector *qiov, int64_=
t pos);
diff --git a/block.c b/block.c
index 22f91fb3ee..933a43c989 100644
--- a/block.c
+++ b/block.c
@@ -152,53 +152,62 @@ int path_is_absolute(const char *path)
 #endif
 }
=20
-/* if filename is absolute, just copy it to dest. Otherwise, build a
+/* if filename is absolute, just return its duplicate. Otherwise, build =
a
    path to it by considering it is relative to base_path. URL are
    supported. */
-void path_combine(char *dest, int dest_size,
-                  const char *base_path,
-                  const char *filename)
+char *path_combine(const char *base_path, const char *filename)
 {
+    const char *protocol_stripped =3D NULL;
     const char *p, *p1;
+    char *result;
     int len;
=20
-    if (dest_size <=3D 0)
-        return;
     if (path_is_absolute(filename)) {
-        pstrcpy(dest, dest_size, filename);
-    } else {
-        const char *protocol_stripped =3D NULL;
+        return g_strdup(filename);
+    }
=20
-        if (path_has_protocol(base_path)) {
-            protocol_stripped =3D strchr(base_path, ':');
-            if (protocol_stripped) {
-                protocol_stripped++;
-            }
+    if (path_has_protocol(base_path)) {
+        protocol_stripped =3D strchr(base_path, ':');
+        if (protocol_stripped) {
+            protocol_stripped++;
         }
-        p =3D protocol_stripped ?: base_path;
+    }
+    p =3D protocol_stripped ?: base_path;
=20
-        p1 =3D strrchr(base_path, '/');
+    p1 =3D strrchr(base_path, '/');
 #ifdef _WIN32
-        {
-            const char *p2;
-            p2 =3D strrchr(base_path, '\\');
-            if (!p1 || p2 > p1)
-                p1 =3D p2;
+    {
+        const char *p2;
+        p2 =3D strrchr(base_path, '\\');
+        if (!p1 || p2 > p1) {
+            p1 =3D p2;
         }
+    }
 #endif
-        if (p1)
-            p1++;
-        else
-            p1 =3D base_path;
-        if (p1 > p)
-            p =3D p1;
-        len =3D p - base_path;
-        if (len > dest_size - 1)
-            len =3D dest_size - 1;
-        memcpy(dest, base_path, len);
-        dest[len] =3D '\0';
-        pstrcat(dest, dest_size, filename);
+    if (p1) {
+        p1++;
+    } else {
+        p1 =3D base_path;
+    }
+    if (p1 > p) {
+        p =3D p1;
     }
+    len =3D p - base_path;
+
+    result =3D g_malloc(len + strlen(filename) + 1);
+    memcpy(result, base_path, len);
+    strcpy(result + len, filename);
+
+    return result;
+}
+
+static void path_combine_deprecated(char *dest, int dest_size,
+                                    const char *base_path,
+                                    const char *filename)
+{
+    char *combined =3D path_combine(base_path, filename);
+    pstrcpy(dest, dest_size, combined);
+    g_free(combined);
 }
=20
 /*
@@ -316,7 +325,7 @@ void bdrv_get_full_backing_filename_from_filename(con=
st char *backed,
         error_setg(errp, "Cannot use relative backing file names for '%s=
'",
                    backed);
     } else {
-        path_combine(dest, sz, backed, backing);
+        path_combine_deprecated(dest, sz, backed, backing);
     }
 }
=20
@@ -4445,8 +4454,8 @@ BlockDriverState *bdrv_find_backing_image(BlockDriv=
erState *bs,
         } else {
             /* If not an absolute filename path, make it relative to the=
 current
              * image's filename path */
-            path_combine(filename_tmp, PATH_MAX, curr_bs->filename,
-                         backing_file);
+            path_combine_deprecated(filename_tmp, PATH_MAX, curr_bs->fil=
ename,
+                                    backing_file);
=20
             /* We are going to compare absolute pathnames */
             if (!realpath(filename_tmp, filename_full)) {
@@ -4455,8 +4464,8 @@ BlockDriverState *bdrv_find_backing_image(BlockDriv=
erState *bs,
=20
             /* We need to make sure the backing filename we are comparin=
g against
              * is relative to the current image filename (or absolute) *=
/
-            path_combine(filename_tmp, PATH_MAX, curr_bs->filename,
-                         curr_bs->backing_file);
+            path_combine_deprecated(filename_tmp, PATH_MAX, curr_bs->fil=
ename,
+                                    curr_bs->backing_file);
=20
             if (!realpath(filename_tmp, backing_file_full)) {
                 continue;
diff --git a/block/vmdk.c b/block/vmdk.c
index c7484fddb6..3d3273e65b 100644
--- a/block/vmdk.c
+++ b/block/vmdk.c
@@ -873,8 +873,7 @@ static int vmdk_parse_extents(const char *desc, Block=
DriverState *bs,
             return -EINVAL;
         }
=20
-        extent_path =3D g_malloc0(PATH_MAX);
-        path_combine(extent_path, PATH_MAX, desc_file_path, fname);
+        extent_path =3D path_combine(desc_file_path, fname);
=20
         ret =3D snprintf(extent_opt_prefix, 32, "extents.%d", s->num_ext=
ents);
         assert(ret < 32);
--=20
2.19.2


