Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  18 Dec 2018 08:51:02 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id AF9A85805FC
	for <like.xu@linux.intel.com>; Mon, 17 Dec 2018 15:04:10 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 17 Dec 2018 15:04:10 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AAx75zxHntDfo3z9H1jI1/51GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ7ypMWwAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95RWSJfDI2y?=
 =?us-ascii?q?bIkAD+QOMuhXsof9v1kDoxmxCAWxCu7j1iFHhmTt0KEmyuQsCx3K0BA8E94Stn?=
 =?us-ascii?q?nfsdX7NL0VUeCw1KTGyi/MbvxL0jnh9ofIcwwhoPCRVr93dMrR01cgFwLZjlSR?=
 =?us-ascii?q?soHlJS2a2fkNs2eB8+psT/6gi2kiqwxopDWk28QiipHRi44L1lzJ9j91zJsoKd?=
 =?us-ascii?q?C7UkJ3f9CpHZtKuy2HNYZ6Wt0uT31stSog17ELt4C3cDIXxJkkyRPTceKLfouO?=
 =?us-ascii?q?7xn+TuieOy14i2hgeL+nhxa970ygyurkW8mw0VZKtTZFksLWunAC0RzT99KLSv?=
 =?us-ascii?q?xn/keuwTqP1gbT5f9YIU0si6bXN50szqQtmpYOsknPBDH6lUv2gaOMa0kp+PCk?=
 =?us-ascii?q?6+H9bbXnop+cOZV0igb7Mqk2g8ywH+E4MhUXU2eG5+u8yqPs/UngTLpRif02j6?=
 =?us-ascii?q?/Zv4zEKsQAoaK5Bw5V0oU95BqlADamzcwVnX0GLFJDZRKGgJLlO1DIIPDkE/i/?=
 =?us-ascii?q?h06gnytsx/DDJbDhBJLNLn7MkLfnYLZx8UlcyBA8zdxH/ZJbFqkBIO7vWk/2rN?=
 =?us-ascii?q?HYCh45Mw+qzOr9B9R9y5gTWWaOAq+fLaPTvkWE5uMpI+mQeoAVvCzxJOQi5/7r?=
 =?us-ascii?q?3jcEn0QAd/ypwYcPcyL/WfBnOFmCJ3zrhNgHDCENpAV5SeXrjFiLV3lUf2qzWK?=
 =?us-ascii?q?QnoSg2DZ/jAYrdS4T+vbqawS3uG5RXYnxBWEmBFGqte4iaVvNJci+LP8J6jhQC?=
 =?us-ascii?q?Ur6uTZJn0guh4xTnwbhqJfaB5ysDqJj438J07eCAqRZn7DFxEoGX12aGTElymW?=
 =?us-ascii?q?UHQSJw27pw8mJnzVLW9KFoy8ZVFMBBr6dMSAo7KYz01eF2C9nuHAnGe4HaGx6d?=
 =?us-ascii?q?Xty6DGRpHZoKyNgUbhM4Qo36gw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ATAAArKhhchxHrdtBlHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgTCBOYEpjBVfjiOWXBSBXxUYAxGHViI0CQ0BAwEBAQEBAQIBEwE?=
 =?us-ascii?q?BAQoLCQgbDiMMgjYFAgMaAQaCXAMDAQIkHwopAwMBAgYBAUgIAwFTGQWDHQGCA?=
 =?us-ascii?q?AEEqR8zhUCEbIw+F4FAP4ERgl2FHoV3Ao9NhimKTVYJhw2KQgsYgV1Nh0k3gSe?=
 =?us-ascii?q?GAZlkgUaCDk0jFTuCbAmCGwMXiBuGA0AxgQcci1yBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0ATAAArKhhchxHrdtBlHAEBAQQBAQcEAQGBUQcBAQsBgTC?=
 =?us-ascii?q?BOYEpjBVfjiOWXBSBXxUYAxGHViI0CQ0BAwEBAQEBAQIBEwEBAQoLCQgbDiMMg?=
 =?us-ascii?q?jYFAgMaAQaCXAMDAQIkHwopAwMBAgYBAUgIAwFTGQWDHQGCAAEEqR8zhUCEbIw?=
 =?us-ascii?q?+F4FAP4ERgl2FHoV3Ao9NhimKTVYJhw2KQgsYgV1Nh0k3gSeGAZlkgUaCDk0jF?=
 =?us-ascii?q?TuCbAmCGwMXiBuGA0AxgQcci1yBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,366,1539673200"; 
   d="scan'208";a="45358799"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 17 Dec 2018 15:04:03 -0800
Received: from localhost ([::1]:50348 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gZ1vf-00066E-3o
	for like.xu@linux.intel.com; Mon, 17 Dec 2018 18:04:03 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:33911)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <mreitz@redhat.com>) id 1gZ1d9-0007fr-EY
	for qemu-devel@nongnu.org; Mon, 17 Dec 2018 17:44:56 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <mreitz@redhat.com>) id 1gZ1d5-0006TH-08
	for qemu-devel@nongnu.org; Mon, 17 Dec 2018 17:44:55 -0500
Received: from mx1.redhat.com ([209.132.183.28]:57282)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <mreitz@redhat.com>)
	id 1gZ1d2-0006Rh-8D; Mon, 17 Dec 2018 17:44:48 -0500
Received: from smtp.corp.redhat.com (int-mx06.intmail.prod.int.phx2.redhat.com
	[10.5.11.16])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 8BCA4C057E26;
	Mon, 17 Dec 2018 22:44:47 +0000 (UTC)
Received: from localhost (ovpn-204-73.brq.redhat.com [10.40.204.73])
	by smtp.corp.redhat.com (Postfix) with ESMTPS id 196FE6530D;
	Mon, 17 Dec 2018 22:44:46 +0000 (UTC)
From: Max Reitz <mreitz@redhat.com>
To: qemu-block@nongnu.org
Date: Mon, 17 Dec 2018 23:43:40 +0100
Message-Id: <20181217224348.14922-24-mreitz@redhat.com>
In-Reply-To: <20181217224348.14922-1-mreitz@redhat.com>
References: <20181217224348.14922-1-mreitz@redhat.com>
MIME-Version: 1.0
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.16
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.31]);
	Mon, 17 Dec 2018 22:44:47 +0000 (UTC)
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: [Qemu-devel] [PATCH v12 23/31] block: Generically refresh runtime
 options
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Kevin Wolf <kwolf@redhat.com>, Alberto Garcia <berto@igalia.com>,
	qemu-devel@nongnu.org, Max Reitz <mreitz@redhat.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Instead of having every block driver which implements
bdrv_refresh_filename() copy all of the strong runtime options over to
bs->full_open_options, implement this process generically in
bdrv_refresh_filename().

This patch only adds this new generic implementation, it does not remove
the old functionality. This is done in a follow-up patch.

With this patch, some superfluous information (that should never have
been there) may be removed from some JSON filenames, as can be seen in
the change to iotest 110's reference output.

Signed-off-by: Max Reitz <mreitz@redhat.com>
Reviewed-by: Alberto Garcia <berto@igalia.com>
---
 block.c                    | 116 ++++++++++++++++++++++++++++++++++++-
 tests/qemu-iotests/110.out |   2 +-
 2 files changed, 116 insertions(+), 2 deletions(-)

diff --git a/block.c b/block.c
index 9f1756b1f4..53cb14a5ed 100644
--- a/block.c
+++ b/block.c
@@ -5317,6 +5317,92 @@ out:
     return to_replace_bs;
 }
=20
+/**
+ * Iterates through the list of runtime option keys that are said to
+ * be "strong" for a BDS.  An option is called "strong" if it changes
+ * a BDS's data.  For example, the null block driver's "size" and
+ * "read-zeroes" options are strong, but its "latency-ns" option is
+ * not.
+ *
+ * If a key returned by this function ends with a dot, all options
+ * starting with that prefix are strong.
+ */
+static const char *const *strong_options(BlockDriverState *bs,
+                                         const char *const *curopt)
+{
+    static const char *const global_options[] =3D {
+        "driver", "filename", NULL
+    };
+
+    if (!curopt) {
+        return &global_options[0];
+    }
+
+    curopt++;
+    if (curopt =3D=3D &global_options[ARRAY_SIZE(global_options) - 1] &&=
 bs->drv) {
+        curopt =3D bs->drv->strong_runtime_opts;
+    }
+
+    return (curopt && *curopt) ? curopt : NULL;
+}
+
+/**
+ * Copies all strong runtime options from bs->options to the given
+ * QDict.  The set of strong option keys is determined by invoking
+ * strong_options().
+ *
+ * Returns true iff any strong option was present in bs->options (and
+ * thus copied to the target QDict) with the exception of "filename"
+ * and "driver".  The caller is expected to use this value to decide
+ * whether the existence of strong options prevents the generation of
+ * a plain filename.
+ */
+static bool append_strong_runtime_options(QDict *d, BlockDriverState *bs=
)
+{
+    bool found_any =3D false;
+    const char *const *option_name =3D NULL;
+
+    if (!bs->drv) {
+        return false;
+    }
+
+    while ((option_name =3D strong_options(bs, option_name))) {
+        bool option_given =3D false;
+
+        assert(strlen(*option_name) > 0);
+        if ((*option_name)[strlen(*option_name) - 1] !=3D '.') {
+            QObject *entry =3D qdict_get(bs->options, *option_name);
+            if (!entry) {
+                continue;
+            }
+
+            qdict_put_obj(d, *option_name, qobject_ref(entry));
+            option_given =3D true;
+        } else {
+            const QDictEntry *entry;
+            for (entry =3D qdict_first(bs->options); entry;
+                 entry =3D qdict_next(bs->options, entry))
+            {
+                if (strstart(qdict_entry_key(entry), *option_name, NULL)=
) {
+                    qdict_put_obj(d, qdict_entry_key(entry),
+                                  qobject_ref(qdict_entry_value(entry)))=
;
+                    option_given =3D true;
+                }
+            }
+        }
+
+        /* While "driver" and "filename" need to be included in a JSON f=
ilename,
+         * their existence does not prohibit generation of a plain filen=
ame. */
+        if (!found_any && option_given &&
+            strcmp(*option_name, "driver") && strcmp(*option_name, "file=
name"))
+        {
+            found_any =3D true;
+        }
+    }
+
+    return found_any;
+}
+
 static bool append_open_options(QDict *d, BlockDriverState *bs)
 {
     const QDictEntry *entry;
@@ -5493,9 +5579,37 @@ void bdrv_refresh_filename(BlockDriverState *bs)
         bs->full_open_options =3D opts;
     }
=20
+    /* Gather the options QDict */
+    opts =3D qdict_new();
+    append_strong_runtime_options(opts, bs);
+
+    if (drv->bdrv_gather_child_options) {
+        /* Some block drivers may not want to present all of their child=
ren's
+         * options, or name them differently from BdrvChild.name */
+        drv->bdrv_gather_child_options(bs, opts, backing_overridden);
+    } else {
+        QLIST_FOREACH(child, &bs->children, next) {
+            if (child->role =3D=3D &child_backing && !backing_overridden=
) {
+                /* We can skip the backing BDS if it has not been overri=
dden */
+                continue;
+            }
+
+            qdict_put(opts, child->name,
+                      qobject_ref(child->bs->full_open_options));
+        }
+
+        if (backing_overridden && !bs->backing) {
+            /* Force no backing file */
+            qdict_put_null(opts, "backing");
+        }
+    }
+
+    qobject_unref(bs->full_open_options);
+    bs->full_open_options =3D opts;
+
     if (bs->exact_filename[0]) {
         pstrcpy(bs->filename, sizeof(bs->filename), bs->exact_filename);
-    } else if (bs->full_open_options) {
+    } else {
         QString *json =3D qobject_to_json(QOBJECT(bs->full_open_options)=
);
         snprintf(bs->filename, sizeof(bs->filename), "json:%s",
                  qstring_get_str(json));
diff --git a/tests/qemu-iotests/110.out b/tests/qemu-iotests/110.out
index 1d0b2475cc..46e6a60510 100644
--- a/tests/qemu-iotests/110.out
+++ b/tests/qemu-iotests/110.out
@@ -22,7 +22,7 @@ Formatting 'TEST_DIR/t.IMGFMT', fmt=3DIMGFMT size=3D671=
08864 backing_file=3Dt.IMGFMT.b
=20
 =3D=3D=3D Nodes without a common directory =3D=3D=3D
=20
-image: json:{"driver": "IMGFMT", "file": {"children": [{"driver": "file"=
, "filename": "TEST_DIR/t.IMGFMT"}, {"driver": "file", "filename": "TEST_=
DIR/t.IMGFMT.copy"}], "driver": "quorum", "blkverify": false, "rewrite-co=
rrupted": false, "vote-threshold": 1}}
+image: json:{"driver": "IMGFMT", "file": {"children": [{"driver": "file"=
, "filename": "TEST_DIR/t.IMGFMT"}, {"driver": "file", "filename": "TEST_=
DIR/t.IMGFMT.copy"}], "driver": "quorum", "vote-threshold": 1}}
 file format: IMGFMT
 virtual size: 64M (67108864 bytes)
 backing file: t.IMGFMT.base (cannot determine actual path)
--=20
2.19.2


