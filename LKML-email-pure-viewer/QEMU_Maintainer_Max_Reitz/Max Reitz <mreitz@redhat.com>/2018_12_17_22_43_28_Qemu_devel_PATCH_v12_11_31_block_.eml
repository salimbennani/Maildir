Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  18 Dec 2018 08:50:55 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 274DA5805CF
	for <like.xu@linux.intel.com>; Mon, 17 Dec 2018 14:54:37 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga003-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 17 Dec 2018 14:54:35 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AQGl7iRE6ddkD0g7Ezs6dcJ1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ7ypMWwAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95RWSJfDI2y?=
 =?us-ascii?q?bIkAD+QOMuhXsof9v1kDoxmxCAWxCu7j1iFHhmTt0KEmyuQsCx3K0BA8E94Stn?=
 =?us-ascii?q?nfsdX7NL0VUeCw1KTGyi/MbvxL0jnh9ofIcwwhoPCRVr93dMrR01cgFwLZjlSR?=
 =?us-ascii?q?soHlJS2a2fkNs2eB8+psT/6gi2kiqwxopDWk28QiipHRi44L1lzJ9j91zJsoKd?=
 =?us-ascii?q?C7UkJ3f9CpHZtKuy2HNYZ6Wt0uT31stSog17ELt4C3cDIXxJkkyRPTceKLfouO?=
 =?us-ascii?q?7xn+TuieOy14i2hgeL+nhxa970ygyurkW8mw0VZKtTZFksLWunAC0RzT99KLSv?=
 =?us-ascii?q?xn/keuwTqP1gbT5f9YIU0si6bXN50szqQtmpYOsknPBDH6lUv2gaOMa0kp+PCk?=
 =?us-ascii?q?6+H9bbXnop+cOZV0igb7Mqk2g8ywH+E4MhUXU2eG5+u8yqPs/UngTLpRif02j6?=
 =?us-ascii?q?/Zv4zEKsQAoaK5Bw5V0oU95BqlADamzcwVnX0GLFJDZRKGgJLlO1DIIPDkE/i/?=
 =?us-ascii?q?h06gnytsx/DDJbDhBJLNLn7MkLfnYLZx8UlcyBA8zdxH/ZJbFqkBIO7vWk/2rN?=
 =?us-ascii?q?HYCh45Mw+qzOr9B9R9y5gTWWaOAq+fLaPTvkWE5uMpI+mQeoAVvCzxJOQi5/7r?=
 =?us-ascii?q?3jcEn0QAd/ypwYcPcyL/WfBnOFmCJ3zrhNgHDCENpAV5SeXrjFiLV3lUf2qzWK?=
 =?us-ascii?q?QnoSg2DZ/jAYrdS4T+vbqawS3uG5RXYnxBWEmBFGqte4iaVvNJci+LP8J6jhQC?=
 =?us-ascii?q?Ur6uTZJn0guh4xTnwbhqJfaB5ysDqJj438J07eCAqRZn7DFxEoGX12aGTElymW?=
 =?us-ascii?q?UHQSJw27pw8mJnzVLW9KFoy8ZVFMBBr6dMSAo7KYz01eF2C9nuHAnGe4HaGx6d?=
 =?us-ascii?q?Xty6DGRpHZoKyNgUbhM4Qo36gw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0CIAADYJxhchxHrdtBlHQEBBQEHBQGBV?=
 =?us-ascii?q?AUBCwGBMIJijHSgAoZwBw4YFIdWIjcGDQEDAQEBAQEBAgETAQEBCgsJCBsOL4I?=
 =?us-ascii?q?2BQIDGgEGglwDAwECJB8KKQMDAQIGAQFICAMBUxkFgx2CAQEEpnKCKjOFQIRsj?=
 =?us-ascii?q?D4XgUA/gRGNUCICiUKXVwmRTwsYiXOHXyyZOIFcgXhNIxWDJ4InFxKODEAxgQc?=
 =?us-ascii?q?ci1yBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0CIAADYJxhchxHrdtBlHQEBBQEHBQGBVAUBCwGBMIJijHS?=
 =?us-ascii?q?gAoZwBw4YFIdWIjcGDQEDAQEBAQEBAgETAQEBCgsJCBsOL4I2BQIDGgEGglwDA?=
 =?us-ascii?q?wECJB8KKQMDAQIGAQFICAMBUxkFgx2CAQEEpnKCKjOFQIRsjD4XgUA/gRGNUCI?=
 =?us-ascii?q?CiUKXVwmRTwsYiXOHXyyZOIFcgXhNIxWDJ4InFxKODEAxgQcci1yBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,366,1539673200"; 
   d="scan'208";a="67234783"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mga01b.intel.com with ESMTP/TLS/AES256-SHA; 17 Dec 2018 14:54:34 -0800
Received: from localhost ([::1]:50281 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gZ1mS-0006KC-CE
	for like.xu@linux.intel.com; Mon, 17 Dec 2018 17:54:32 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:33554)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <mreitz@redhat.com>) id 1gZ1cg-00078o-0S
	for qemu-devel@nongnu.org; Mon, 17 Dec 2018 17:44:27 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <mreitz@redhat.com>) id 1gZ1ce-0006Dm-S1
	for qemu-devel@nongnu.org; Mon, 17 Dec 2018 17:44:25 -0500
Received: from mx1.redhat.com ([209.132.183.28]:43082)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <mreitz@redhat.com>)
	id 1gZ1cZ-00069g-A9; Mon, 17 Dec 2018 17:44:19 -0500
Received: from smtp.corp.redhat.com (int-mx08.intmail.prod.int.phx2.redhat.com
	[10.5.11.23])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 8620590907;
	Mon, 17 Dec 2018 22:44:18 +0000 (UTC)
Received: from localhost (ovpn-204-73.brq.redhat.com [10.40.204.73])
	by smtp.corp.redhat.com (Postfix) with ESMTPS id DAC9819750;
	Mon, 17 Dec 2018 22:44:17 +0000 (UTC)
From: Max Reitz <mreitz@redhat.com>
To: qemu-block@nongnu.org
Date: Mon, 17 Dec 2018 23:43:28 +0100
Message-Id: <20181217224348.14922-12-mreitz@redhat.com>
In-Reply-To: <20181217224348.14922-1-mreitz@redhat.com>
References: <20181217224348.14922-1-mreitz@redhat.com>
MIME-Version: 1.0
X-Scanned-By: MIMEDefang 2.84 on 10.5.11.23
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.29]);
	Mon, 17 Dec 2018 22:44:18 +0000 (UTC)
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: [Qemu-devel] [PATCH v12 11/31] block:
 bdrv_get_full_backing_filename's ret. val.
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Kevin Wolf <kwolf@redhat.com>, Alberto Garcia <berto@igalia.com>,
	qemu-devel@nongnu.org, Max Reitz <mreitz@redhat.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Make bdrv_get_full_backing_filename() return an allocated string instead
of placing the result in a caller-provided buffer.

Signed-off-by: Max Reitz <mreitz@redhat.com>
Reviewed-by: Alberto Garcia <berto@igalia.com>
---
 include/block/block.h |  3 +--
 block.c               | 48 +++++++++++++++----------------------------
 block/qapi.c          | 12 ++---------
 3 files changed, 20 insertions(+), 43 deletions(-)

diff --git a/include/block/block.h b/include/block/block.h
index 9dd573351b..a1e1b59e9c 100644
--- a/include/block/block.h
+++ b/include/block/block.h
@@ -485,8 +485,7 @@ void bdrv_round_to_clusters(BlockDriverState *bs,
=20
 void bdrv_get_backing_filename(BlockDriverState *bs,
                                char *filename, int filename_size);
-void bdrv_get_full_backing_filename(BlockDriverState *bs,
-                                    char *dest, size_t sz, Error **errp)=
;
+char *bdrv_get_full_backing_filename(BlockDriverState *bs, Error **errp)=
;
 char *bdrv_get_full_backing_filename_from_filename(const char *backed,
                                                    const char *backing,
                                                    Error **errp);
diff --git a/block.c b/block.c
index 0cd4412725..615ffa7f40 100644
--- a/block.c
+++ b/block.c
@@ -338,28 +338,16 @@ char *bdrv_get_full_backing_filename_from_filename(=
const char *backed,
     }
 }
=20
-void bdrv_get_full_backing_filename(BlockDriverState *bs, char *dest, si=
ze_t sz,
-                                    Error **errp)
+char *bdrv_get_full_backing_filename(BlockDriverState *bs, Error **errp)
 {
     char *backed;
-    char *full_name;
-    Error *local_error =3D NULL;
=20
     bdrv_refresh_filename(bs);
=20
     backed =3D bs->exact_filename[0] ? bs->exact_filename : bs->filename=
;
-
-    full_name =3D bdrv_get_full_backing_filename_from_filename(backed,
-                                                             bs->backing=
_file,
-                                                             &local_erro=
r);
-    if (full_name) {
-        pstrcpy(dest, sz, full_name);
-        g_free(full_name);
-    } else if (local_error) {
-        error_propagate(errp, local_error);
-    } else if (sz > 0) {
-        *dest =3D '\0';
-    }
+    return bdrv_get_full_backing_filename_from_filename(backed,
+                                                        bs->backing_file=
,
+                                                        errp);
 }
=20
 void bdrv_register(BlockDriver *bdrv)
@@ -2356,7 +2344,7 @@ out:
 int bdrv_open_backing_file(BlockDriverState *bs, QDict *parent_options,
                            const char *bdref_key, Error **errp)
 {
-    char *backing_filename =3D g_malloc0(PATH_MAX);
+    char *backing_filename =3D NULL;
     char *bdref_key_dot;
     const char *reference =3D NULL;
     int ret =3D 0;
@@ -2391,7 +2379,7 @@ int bdrv_open_backing_file(BlockDriverState *bs, QD=
ict *parent_options,
      */
     reference =3D qdict_get_try_str(parent_options, bdref_key);
     if (reference || qdict_haskey(options, "file.filename")) {
-        backing_filename[0] =3D '\0';
+        /* keep backing_filename NULL */
     } else if (bs->backing_file[0] =3D=3D '\0' && qdict_size(options) =3D=
=3D 0) {
         qobject_unref(options);
         goto free_exit;
@@ -2406,8 +2394,7 @@ int bdrv_open_backing_file(BlockDriverState *bs, QD=
ict *parent_options,
             implicit_backing =3D !strcmp(bs->auto_backing_file, bs->back=
ing_file);
         }
=20
-        bdrv_get_full_backing_filename(bs, backing_filename, PATH_MAX,
-                                       &local_err);
+        backing_filename =3D bdrv_get_full_backing_filename(bs, &local_e=
rr);
         if (local_err) {
             ret =3D -EINVAL;
             error_propagate(errp, local_err);
@@ -2428,9 +2415,8 @@ int bdrv_open_backing_file(BlockDriverState *bs, QD=
ict *parent_options,
         qdict_put_str(options, "driver", bs->backing_format);
     }
=20
-    backing_hd =3D bdrv_open_inherit(*backing_filename ? backing_filenam=
e : NULL,
-                                   reference, options, 0, bs, &child_bac=
king,
-                                   errp);
+    backing_hd =3D bdrv_open_inherit(backing_filename, reference, option=
s, 0, bs,
+                                   &child_backing, errp);
     if (!backing_hd) {
         bs->open_flags |=3D BDRV_O_NO_BACKING;
         error_prepend(errp, "Could not open backing file: ");
@@ -4436,7 +4422,6 @@ BlockDriverState *bdrv_find_backing_image(BlockDriv=
erState *bs,
     int is_protocol =3D 0;
     BlockDriverState *curr_bs =3D NULL;
     BlockDriverState *retval =3D NULL;
-    Error *local_error =3D NULL;
=20
     if (!bs || !bs->drv || !backing_file) {
         return NULL;
@@ -4456,21 +4441,22 @@ BlockDriverState *bdrv_find_backing_image(BlockDr=
iverState *bs,
         /* If either of the filename paths is actually a protocol, then
          * compare unmodified paths; otherwise make paths relative */
         if (is_protocol || path_has_protocol(curr_bs->backing_file)) {
+            char *backing_file_full_ret;
+
             if (strcmp(backing_file, curr_bs->backing_file) =3D=3D 0) {
                 retval =3D curr_bs->backing->bs;
                 break;
             }
             /* Also check against the full backing filename for the imag=
e */
-            bdrv_get_full_backing_filename(curr_bs, backing_file_full, P=
ATH_MAX,
-                                           &local_error);
-            if (local_error =3D=3D NULL) {
-                if (strcmp(backing_file, backing_file_full) =3D=3D 0) {
+            backing_file_full_ret =3D bdrv_get_full_backing_filename(cur=
r_bs,
+                                                                   NULL)=
;
+            if (backing_file_full_ret) {
+                bool equal =3D strcmp(backing_file, backing_file_full_re=
t) =3D=3D 0;
+                g_free(backing_file_full_ret);
+                if (equal) {
                     retval =3D curr_bs->backing->bs;
                     break;
                 }
-            } else {
-                error_free(local_error);
-                local_error =3D NULL;
             }
         } else {
             /* If not an absolute filename path, make it relative to the=
 current
diff --git a/block/qapi.c b/block/qapi.c
index 743136b84e..287e38e9de 100644
--- a/block/qapi.c
+++ b/block/qapi.c
@@ -291,18 +291,10 @@ void bdrv_query_image_info(BlockDriverState *bs,
=20
     backing_filename =3D bs->backing_file;
     if (backing_filename[0] !=3D '\0') {
-        char *backing_filename2 =3D g_malloc0(PATH_MAX);
+        char *backing_filename2;
         info->backing_filename =3D g_strdup(backing_filename);
         info->has_backing_filename =3D true;
-        bdrv_get_full_backing_filename(bs, backing_filename2, PATH_MAX, =
&err);
-        if (err) {
-            /* Can't reconstruct the full backing filename, so we must o=
mit
-             * this field and apply a Best Effort to this query. */
-            g_free(backing_filename2);
-            backing_filename2 =3D NULL;
-            error_free(err);
-            err =3D NULL;
-        }
+        backing_filename2 =3D bdrv_get_full_backing_filename(bs, NULL);
=20
         /* Always report the full_backing_filename if present, even if i=
t's the
          * same as backing_filename. That they are same is useful info. =
*/
--=20
2.19.2


