Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  12 Dec 2018 19:41:27 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 0FBBB5803DC;
	Tue, 11 Dec 2018 20:06:54 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga007-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 11 Dec 2018 20:06:53 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AGoEYIxZAau4jzdF6qiP7iHf/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpci9ZR7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyJPDIOi?=
 =?us-ascii?q?YYUSDOQBM+lXoJXgqFQMoxS+HhGsCeH0xz9UmnP7x7E23/g7HA3Y2gErAtIAsG?=
 =?us-ascii?q?7TrNXwLKocX/66zK/OzTXCdPNdxDTy6IjPchA8vPqBWq9/ftTXyUkpFgPFlU6d?=
 =?us-ascii?q?qY/7MDOP0OQCrWyb4/BnVeK1hG4qsgd8qSWsyMc0koTFmJ4Zx1Te+Slkzos5O8?=
 =?us-ascii?q?e0RFN4bNK4CpddtiOXO5NoTs4jXW1kpCM3xqAatZGmeSUF1IgryhrCZ/GCboSF?=
 =?us-ascii?q?4Q7vWeOULDtlgX9qZK+wiAqp/kWm1+byTNO70ExQoSpAitTMtm4C1xjU6sWfVP?=
 =?us-ascii?q?t98Vmu2SyV2wDQ9O5EO0Y0mrTfK5I7xb4wjJUTvVzCHi/whkr2kLebels49uWs?=
 =?us-ascii?q?8ejrf7vrqoGGO4NpiQzyLr4il829DOggNwgBRWmb+eCy1L35+k35Ra1Hjvk3kq?=
 =?us-ascii?q?nfrZDbKt0Xpq2nDA9P1IYs9RK/Ay6h0NUWm3kIMkhFdQmZj4jmJV7OOur0DfSh?=
 =?us-ascii?q?jFS2ljdk2fTGMqfmApXXIXjPiK3hcqpl605A1AozyshS55ZVCrECPv3/QEDwtM?=
 =?us-ascii?q?HDAx89Mgy0xfvnCdpn2oMfX2KPHrGWMKfIvVCU4eIvJvGGZJUJtzblN/gl+/nu?=
 =?us-ascii?q?gGc5mVAHfKmpwYEYaHeiEvRmPkWWe3zsgtgaHGcOvwo+SvHqiVKYXT5SYXayQ7?=
 =?us-ascii?q?wz5jUhBI26CofDQ5ingKad0yejAp1WemdGB0iOEXfvaYqIQfQMaCWUIs9nlTwJ?=
 =?us-ascii?q?TryhS44n1RGzuw720btnLuzI+iIGsZLvzsR65+rWlRsq7zx7E9yd032RT2Fzhm?=
 =?us-ascii?q?4HXSQ23KB4oUx+0FuDy7J3g/5DGNxX5vNJVBo6NJHGw+x7DdDyRhzOftOTRFm6?=
 =?us-ascii?q?RdWmBCk7TsgtzN8Wf0Z9B9KigwjA3yWwBb8ZjbiLBJ0u/aLa0Hj8PMJ9y3fA1K?=
 =?us-ascii?q?k8gFgqWMpPNWu6hqFh8wjfHZLGk0Kcl6yyb6QTwDbN9HufzWqJpExXTRR/Ubvb?=
 =?us-ascii?q?UnwFZkvZt9L55ljcQL+oDrgnNghBycuGKqZRbt3pjFNGROrsOdjEYmKxnXuwCg?=
 =?us-ascii?q?iMxr+WcIXqfGAd1j3HCEcYiwAT4WqGNQ8mCyi8uW3eEiJhGUjvY0z29+l+s220?=
 =?us-ascii?q?TkkvwgGObk1h0ae1+xEPifydTfMTwqwLuCM7pzpoG1a92srcC8CcqAp5YKVcfd?=
 =?us-ascii?q?Q97U9b1WLYsgx9OYCgL6Bih1IEbwR7pUTu1w9zCoVBl8gqo2gnzA5zKaKezVNA?=
 =?us-ascii?q?eCmU3ZH2Or3LNGby+AqjZLLR2lHbyNyW4LsA6Owkq1X/uwGkDlAt83F53NhazX?=
 =?us-ascii?q?Sd5o/GAxEPUZ3sSEk38Rt6p7bEYiQm44PU1HtsMbS7szPY2tIpAvclxQikf9tF?=
 =?us-ascii?q?LKyEEwryGdUAB8eyMOwqh0SpbhUcMeFS6a44Jd+pe+GH2a6rJulgmj2mgH9D4I?=
 =?us-ascii?q?B81EKM6iV9RvTJ35YD3/GXwA+HWy3gg1emt8D9gZpEai0KHmqj1SjkA5ZcZrdz?=
 =?us-ascii?q?fYkXE2iuOdC4xtJki57rRXFY7l+jC0oa18CzfRqdckLy3RdX1UQRunGnnSq4zz?=
 =?us-ascii?q?ppkzAmtKaf3SrOw/j8exoDIGJEWG5ijVL0K4iuk98aRFSobxQulBa95Uf6xrJX?=
 =?us-ascii?q?paRlI2nIXEdIeTP7L2VjUqu2q7qDbNRD6JIusSVLTuu8ZUqWRaL6oxsfyynjBX?=
 =?us-ascii?q?dRxCgndzG2vZX0hx56h3iHLHZwr3rZftt8xQzF69zfRv5R3zwGSzd+iTTMAli8?=
 =?us-ascii?q?Pt+p/ciblpvZs+C+UX6hWYNXcSXx0YyAsy6773VwARKjh/CzhsHnEQ8i3C77zd?=
 =?us-ascii?q?ZqUj/ErBT9YontzKm6NeNnfk91BF7z8cZ6G4d+kpcui5EUw3QVmpKV/X8fm2fp?=
 =?us-ascii?q?Ldpbwb7+bGYKRTMTwN7a+gnl1FdjLnKU3Y35UHqdz9BlZ9m7ZGMWxy0849pLCK?=
 =?us-ascii?q?eS8LxLgy91rkCkogLWZPh3hi0dxuc26H4Gn+EJvxIgziCcArARB0ZUJyLtmAqT?=
 =?us-ascii?q?79CisqpXfn2gfqaq1Epxht2hCLCCogdBWHf2YJsiHClw7tlhP1LIynH89obkeN?=
 =?us-ascii?q?zIZ9IJqhKUiwvAj/RSKJ8pivoKgi9nNXj8vHI/ze47kAdu3Yq7vIWcL2Vt/aS5?=
 =?us-ascii?q?AgNXNzHvZsMT/C3tgrhansqMw4+vGZBhEC0RXJT0VfKoDC4StfP/OgmVCjI8rX?=
 =?us-ascii?q?ObGafFEQ+b9UdrtHbPE5GtN3GKK3gV19RiRB+BJENBhAAYRik1npk8Fgqy3szu?=
 =?us-ascii?q?bF955iwN5l7/shZMyPhnNxzhXWfEvguodi04SJuCLBpV8wFC4V3aMdeF4+J3Hi?=
 =?us-ascii?q?FY+IChrQOXJmyaYQRIEX8GWkieC1//Obmu4MHK8/KECeqmM/vOfbKOpPReVveP?=
 =?us-ascii?q?2JKvy5Zm8CyKNsmVJXliCPs72kVYUHB9GsTZnSgPSiMNmyLMac6buAmz+iltos?=
 =?us-ascii?q?+j9/TrXRrl5ZGTBLtKLdVv5xe2jL+DN+GOhSZ5KjVY1pIWyX/L0rgf21EShD90?=
 =?us-ascii?q?dzmwCrQNrirNTKPWmq9KAB8XcSJzNM1U760i2glBI9LUitTw1rRglP46F09FVU?=
 =?us-ascii?q?D9msGufcEFOXy9O0jdBEmVNLWKPznLw8DsbKO4SL1QivhUthKqtTaaFU/jIiqM?=
 =?us-ascii?q?lz3zWx+zNuFMiTmRPAZCt4GlbhZtFW/jQcr6ah26Nd97lyE5zacoiXPKK2EcNy?=
 =?us-ascii?q?Nxc0dMrr2W8CNZje9zG21H7np5M+aEnzyV4PXfKpYTqfFrGDh7l/pG4HQmzLtY?=
 =?us-ascii?q?9CFFS+ZzmCvXr95upUmpk+iPyjV9VhpOpS1GhIaKvUVkJKXY+YNMWXfC/BIR82?=
 =?us-ascii?q?qQDw4GqMdiCt3q6OhszY3lnbjvYAlL9Zr95tAXB8WcfMiZOXwoKgHiGDP8BQAA?=
 =?us-ascii?q?CzmxOjeMqVZalaS++3uTr4NymJjrhdJaRrJdUl0uPvAXEEJoGJoFOpghDWBsqq?=
 =?us-ascii?q?KSkMNdvSn2lxLWXsgP+8mfDv8=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAAB+iBBch0O0hNFlGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBgTCCO4w7jh8Ulz6CBQEBKwGHLiI0CQ0BAwE?=
 =?us-ascii?q?BAQEBAQIBEwEBAQgNCQgpL4I2JAGCYgECAwECJBM/BgkBAQoYCSUDDAUgAQUBI?=
 =?us-ascii?q?hiDHIICAQSaKDyMCTOKMhKMKReBf4NuNYFBAYZ0giYCiTeHBZA/CYImjyIjYIk?=
 =?us-ascii?q?Ih1osmGECBAIEBQIFDyGBJYIOMxoIKAiDKIIyjkYigTcBAYtQAQE?=
X-IPAS-Result: =?us-ascii?q?A0ABAAB+iBBch0O0hNFlGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBgTCCO4w7jh8Ulz6CBQEBKwGHLiI0CQ0BAwEBAQEBAQIBEwEBA?=
 =?us-ascii?q?QgNCQgpL4I2JAGCYgECAwECJBM/BgkBAQoYCSUDDAUgAQUBIhiDHIICAQSaKDy?=
 =?us-ascii?q?MCTOKMhKMKReBf4NuNYFBAYZ0giYCiTeHBZA/CYImjyIjYIkIh1osmGECBAIEB?=
 =?us-ascii?q?QIFDyGBJYIOMxoIKAiDKIIyjkYigTcBAYtQAQE?=
X-IronPort-AV: E=Sophos;i="5.56,343,1539673200"; 
   d="scan'208";a="55982605"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 11 Dec 2018 20:06:52 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726321AbeLLEGu (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 11 Dec 2018 23:06:50 -0500
Received: from mail-qk1-f193.google.com ([209.85.222.193]:35482 "EHLO
        mail-qk1-f193.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726218AbeLLEGt (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 11 Dec 2018 23:06:49 -0500
Received: by mail-qk1-f193.google.com with SMTP id w204so10020862qka.2;
        Tue, 11 Dec 2018 20:06:48 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:message-id:references
         :mime-version:content-disposition:in-reply-to:user-agent;
        bh=fFhZ3CklTcCwufhpP2IZWbh+thBFUwMG/ZFw2lmBUJE=;
        b=ahvfWM6VsgQ9tViyKzEiKcdEZR5wGyzmUODhmbaeUOwz/CczVXfkl5EQ6gM8OQ4/Wa
         0ckIaI/+YpJCFPb68bOLDWgm9pYpcz3fhSY2/Vssz9u5mvAPWfh/wkOocU1yT81TVrrh
         ccNY4Z00OTdxvD8AO8i+V9az2+e9Kl6yuz1XqVOsdIsAeMp0BJJRY852pkyzJ/+09FkI
         +Gh192zgpBG68ybbYonmnf274Rn9uBtT5XfQrvpZlRvpNKLZeY/U/Remr4xleI1AG10B
         2wS5TQHmKgoLUaTLnLU3AogV6eyaq9TexmAofpKR8i04D+HWx8iabuqE4FirI/O7C126
         V2IQ==
X-Gm-Message-State: AA+aEWb4E1QY1Q1oNG+YCv0N5jNtmELe5dQacVLTASvC5kAQ0tMFAqFy
        kMa4ORqyp2SQP2Ub5G/sQ6aCz4Oy3rw=
X-Google-Smtp-Source: AFSGD/XspDqGS5hNAu270Obft2CTo/nITtYwKGsb234gbarnDfKn2RPVS1YZiqvhXwVvDwpWUSYR3g==
X-Received: by 2002:a37:8781:: with SMTP id j123mr16575830qkd.68.1544587608303;
        Tue, 11 Dec 2018 20:06:48 -0800 (PST)
Received: from dennisz-mbp.dhcp.thefacebook.com ([2620:10d:c091:180::1:cdcb])
        by smtp.gmail.com with ESMTPSA id b20sm11690712qkb.17.2018.12.11.20.06.46
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Tue, 11 Dec 2018 20:06:47 -0800 (PST)
Date: Tue, 11 Dec 2018 23:06:43 -0500
From: Dennis Zhou <dennis@kernel.org>
To: Bart Van Assche <bvanassche@acm.org>
Cc: Jens Axboe <axboe@kernel.dk>, Tejun Heo <tj@kernel.org>,
        Josef Bacik <josef@toxicpanda.com>, kernel-team@fb.com,
        linux-block@vger.kernel.org, cgroups@vger.kernel.org,
        linux-kernel@vger.kernel.org, Ming Lei <ming.lei@redhat.com>
Subject: Re: [PATCH] blkcg: handle dying request_queue when associating a blkg
Message-ID: <20181212040643.GA73727@dennisz-mbp.dhcp.thefacebook.com>
References: <20181211230308.66276-1-dennis@kernel.org>
 <1544570173.185366.397.camel@acm.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <1544570173.185366.397.camel@acm.org>
User-Agent: Mutt/1.10.1 (2018-07-13)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi Bart,

On Tue, Dec 11, 2018 at 03:16:13PM -0800, Bart Van Assche wrote:
> On Tue, 2018-12-11 at 18:03 -0500, Dennis Zhou wrote:
> > diff --git a/block/blk-cgroup.c b/block/blk-cgroup.c
> > index 6bd0619a7d6e..c30661ddc873 100644
> > --- a/block/blk-cgroup.c
> > +++ b/block/blk-cgroup.c
> > @@ -202,6 +202,12 @@ static struct blkcg_gq *blkg_create(struct blkcg *blkcg,
> >  	WARN_ON_ONCE(!rcu_read_lock_held());
> >  	lockdep_assert_held(&q->queue_lock);
> >  
> > +	/* request_queue is dying, do not create/recreate a blkg */
> > +	if (blk_queue_dying(q)) {
> > +		ret = -ENODEV;
> > +		goto err_free_blkg;
> > +	}
> > +
> >  	/* blkg holds a reference to blkcg */
> >  	if (!css_tryget_online(&blkcg->css)) {
> >  		ret = -ENODEV;
> 
> What prevents that the queue state changes after blk_queue_dying() has returned
> and before blkg_create() returns? Are you sure you don't need to protect this
> code with a blk_queue_enter() / blk_queue_exit() pair?
> 

Hmmm. So I think the idea is that we rely on normal shutdown as I don't
think there is anything wrong with creating a blkg on a dying
request_queue. When we are doing association, the request_queue should
be pinned by the open call. What we are racing against is when the
request_queue is shutting down, it goes around and destroys the blkgs.
For clarity, QUEUE_FLAG_DYING is set in blk_cleanup_queue() before
calling blk_exit_queue() which eventually calls blkcg_exit_queue().

The use of blk_queue_dying() is to determine whether blkg shutdown has
already started as if we create one after it has started, we may
incorrectly orphan a blkg and leak it. Both blkg creation and
destruction require holding the queue_lock, so if the QUEUE_FLAG_DYING
flag is set after we've checked it, it means blkg destruction hasn't
started because it has to wait on the queue_lock. If QUEUE_FLAG_DYING is
set, then we have no guarantee of knowing what phase blkg destruction is
in leading to a potential leak.

Thanks,
Dennis
