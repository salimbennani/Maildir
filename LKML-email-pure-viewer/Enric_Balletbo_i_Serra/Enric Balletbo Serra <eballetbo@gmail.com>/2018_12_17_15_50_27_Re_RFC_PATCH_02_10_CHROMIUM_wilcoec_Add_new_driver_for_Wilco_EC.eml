Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  18 Dec 2018 08:46:10 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id C17B05805FC;
	Mon, 17 Dec 2018 07:50:56 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga002-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 17 Dec 2018 07:50:55 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AcWz+IBZnyypNNh94RHrmUqv/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpci9YB7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyNOAo2+?=
 =?us-ascii?q?YIUPAeQPPvtWoZfhqFUBthu+HQuhCfjzyj9RnHL6wbE23/gjHAzAwQcuH8gOsH?=
 =?us-ascii?q?PRrNjtO6kSV/q1zKjUwj7ecv5ZwzP96IzWfRA9uv6MWq97f9fPxkk1DQPKlEib?=
 =?us-ascii?q?pIv7MDyOzOsNt2yb4PR8Ve20jG4qsA5xoj21ycctjonFnJ4aylfB9Shgxos+ON?=
 =?us-ascii?q?62SFZjbNK6DJddszuWO5Z4T888WW1kpSU3xqEctZO6fiUG0IorywLbZvCdcIWF?=
 =?us-ascii?q?4gjvWPiPLTtmnn5pZbayihm0/EO90OPzTNO030xPriddktnDqHQN1xvL58iZRf?=
 =?us-ascii?q?ty4F2h1SyM1w/N8OFEJ147la7BJ54m2L4wmYIfsUXFHiDohEX7lLGaelkg9+Sy?=
 =?us-ascii?q?9ujqbKvqqoWBO4J3lg3yKKUjl86nDeQ9KAcOXmyb+eqm1L3k+E30WLFKjvwwkq?=
 =?us-ascii?q?nEv5HWPMcbqbCjAw9TzIkj7w+zDzCo0dQeg3YHNklIeAyIj4f3IVHCOvP4Auml?=
 =?us-ascii?q?g1Sqjjhrw+rKPrr7ApXCNnTDiqvufa5h605Azwo+1dRf55NXCr4fOv7yVVLxuc?=
 =?us-ascii?q?fcDh84NQy03unmBM981oMYRWKAHKuZPLnOvl+P4+IlO/OMa5MNuDbhN/gl4Obj?=
 =?us-ascii?q?jX8jll8cYammx5wXZGq4HvR7OUqZZ3Xsj8wFEWcLuAo+UePrhEeDUT5Ve3a9Qa?=
 =?us-ascii?q?Y86isnB4KhCIfJXpqtj6CZ3CenAp1WYXhLClKLEXj2bYmEWPAMaCSUIs9miTEE?=
 =?us-ascii?q?UbmhS4k81RChrgP6yrxnLvbK9S0cr57syN915+jLnxEo6TN0F9id032KT2xshG?=
 =?us-ascii?q?wIXD823Kd8oUBn0FeMy6p4judcFdxS4fNJTwg7OYTdz+x8F9D9RAbBcs2VR1ah?=
 =?us-ascii?q?R9WsGSsxQc4pw98Sf0Z9HM2vjhPZ0CqsGbMVk72LC4Yy8qLTxHXxI8d9y3Db1K?=
 =?us-ascii?q?gulVUmQ81PNXG4ia577QTcG4nJk0CBnaawaascxDLN9HuEzWeWoU5XShBwXrvf?=
 =?us-ascii?q?UXAffETWq8/56V3ET7OpDbQnMQ5BycqZJ6tOa93pi0hGRfj5NNTfZWKxh3m/BR?=
 =?us-ascii?q?KSyryQa4rqfn0X3D/BB0gcjwAT4XGGOBAjCSi7vWLREiZiFVL1bEPq6ulxtnW7?=
 =?us-ascii?q?Q1QwzwGLaU1hyrW09gQUhfyaV/McwLYEtD09pDVzGVa3x8jWBMaYpwp9YKVcZs?=
 =?us-ascii?q?sw4EtG1WLcsAx9IpygLqB4il4CaQh3uFnu1xF2CoVGnsgnt3cqzAt0KaKF31JN?=
 =?us-ascii?q?bTKY3ZbsOrLJLmn+5gyga6nT2lvGytaZ5r8P6Ogkq1XkpAymDE4i/Gto0tZL03?=
 =?us-ascii?q?qQ/I7FDBcPXp3rVEY39B96p6/Bbyk55oPU02BsMKauvj/D3dIpGPUqyhK6c9hD?=
 =?us-ascii?q?N6OEERf4E9cGCMi2NOwqh1+pYwoEPeBP7qI7I9mqdvqG2KGxOuZgkymrjWBG4I?=
 =?us-ascii?q?B7z0KN+DBwSu/O35YZ3f6Y2hGLWCv7jFekqsr3g5xLZSkOHmqjzijpHJRRZqxu?=
 =?us-ascii?q?cokRE2ehPsq3ys94h5HzQX5Y9UevCE8c18+tZBWdcUb93QpW1UkMpXynmC24zy?=
 =?us-ascii?q?F7kj0zr6qf2jDOzPrmdBYdJmFLQ2xih0/2IYeol9AaQFSobw8xmRql5Eb23aha?=
 =?us-ascii?q?qL5kL2nOR0dFZCz2L2BkUqutubuOec9P6JU0sSpJVOSwe0yVSrn4oxECySPsA3?=
 =?us-ascii?q?NexCwndzGtopj5nQZ1iHieLHZwq3rVY9pwyg3c5NzfRP5R2CQJRC9jhDnTB1i8?=
 =?us-ascii?q?OcSp/NqOm5fCtOC+S3yuVplJfSb3yoOAsTOx5Xd2Dh2ng/CzhtrnHBA60CDh0N?=
 =?us-ascii?q?lmTyfIrBf6YoTw06S6MORnflRnBVPm6sp6HJ1+nZU0hJ0KxXcagZCV92IdkWjv?=
 =?us-ascii?q?KdVbxb7+bH0VSD4I2dHV4RLp2E1+Ln2TwYL5WW6Qws9gZ9m8f2MX1Tgx78FMCK?=
 =?us-ascii?q?eI8rNEmTF5rUa/rQLUefJ9hCsSyeMy6H4GhOEEoA8tziSeAr8IB0VZMzLjlw+U?=
 =?us-ascii?q?79+gtqVYf3igcaK/1EdlmdChDbeCohxTWXrje5ciGzNw4dt7MF7WzHLz7YTkcs?=
 =?us-ascii?q?HKbd0Prh2UjwvAj+9NJZItkfoKgDBrOGPnsn0j1u47lgdu3ZChsYiDKmVt+r+5?=
 =?us-ascii?q?AxFCOj30YcMT5i/ijaJEksmK2ICvG41rGi8XU5vwUfKoDDUSuOz8OAmUFz08rm?=
 =?us-ascii?q?qbFaDbHQ+C80pmq3PPE5a2N3CYPnUZzNNiRAWDK0xbmgwbQDI6npshHACw2MPh?=
 =?us-ascii?q?aFt55iwW5lPgqBtD0OdoOAfkUmvFuAekcDQ0SIWcLBpL6AFN/VzVPNea7uJyGS?=
 =?us-ascii?q?FY45KgoBaMKmydewRHE2UJVlaYCFDkO7mk/cPA/PSABuqiM/vOZq2DqOxZV/eV?=
 =?us-ascii?q?3JKvz5Fp/zCWOsWUOXliCfI711FHXXB4HcTZhjoORzYWlyLLc86UuhO89jdroc?=
 =?us-ascii?q?C49fThQBjv6peXC7tOLdVv/Ai7gaedOO6RhyZ5KjdY2okPxX/Sz7gf00Adiztz?=
 =?us-ascii?q?dzm2CrkAsS/NTKTNmq5YFRIbaiVzNNdW4KI4xAVCJcnbitbt3L5ikvE1E0tFVU?=
 =?us-ascii?q?Dmmsyxf8MKPnqyNEnZC0eLLriGITzLztrzYaO9T71QkepVuwexuTadD0/sIDCD?=
 =?us-ascii?q?myP1WBCoNOFGlDubMwBGuIGhbhZtDnDuTM7nah2+KtN4kSc6zqE0hnzUM24RKj?=
 =?us-ascii?q?x8c0JLrr2N4iJUmPR/G2pd7nV7KemIgTqW7+7dKpwOq/tkHjx0l/5G4HQ907ZU?=
 =?us-ascii?q?7DtLRPpwmCvTqN5hu1CnkumVxTphXxpDsTJLhIONvUV/NqTV7JhAWXDY/B0T6W?=
 =?us-ascii?q?WcEQgFp9xgCo6nh6cF7NnEl+rYMjpd6JqA+8AGCtfPAM2AN3UlPFziHzuCXyUf?=
 =?us-ascii?q?Sjv+GGfFhkcVuviW8nCJpJ9ykZX2gpNGHrJRXVgxG+8QDWxqGdUDJNF8WTZywu?=
 =?us-ascii?q?3Tt9IB+Xfr9EqZf85dpJ2SE6vKWfg=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AgAABpxRdch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBg2sng3yDe4Qei3eCDRRoiRiNRBSBEAN4EwGBS4J1gxYiNAkNAQM?=
 =?us-ascii?q?BAQEBAQECARMBAQEKCwkIKSMMgjYkAYJhAQEBAQIBAQIgBBkBGx0BAwEBCQEBB?=
 =?us-ascii?q?QULAwcFAiYCAgMfAREBBQELEQYTBYMdgWgBAw0IBZwsPIsQfBYFAReCdwWEMQo?=
 =?us-ascii?q?ZJw1dgTcCBhJ5izMXgUA/gRGCXQcuhEUBBBUigwiCVwKJMA6BeIQXhjuKSkcJk?=
 =?us-ascii?q?VoYgV2ITYcoLJkpMIElbYEhTSOBAYI7ghsJAxeDSopUPjOBBQEBiyIPF4InAQE?=
X-IPAS-Result: =?us-ascii?q?A0AgAABpxRdch0O0hNFjHAEBAQQBAQcEAQGBUQcBAQsBg2s?=
 =?us-ascii?q?ng3yDe4Qei3eCDRRoiRiNRBSBEAN4EwGBS4J1gxYiNAkNAQMBAQEBAQECARMBA?=
 =?us-ascii?q?QEKCwkIKSMMgjYkAYJhAQEBAQIBAQIgBBkBGx0BAwEBCQEBBQULAwcFAiYCAgM?=
 =?us-ascii?q?fAREBBQELEQYTBYMdgWgBAw0IBZwsPIsQfBYFAReCdwWEMQoZJw1dgTcCBhJ5i?=
 =?us-ascii?q?zMXgUA/gRGCXQcuhEUBBBUigwiCVwKJMA6BeIQXhjuKSkcJkVoYgV2ITYcoLJk?=
 =?us-ascii?q?pMIElbYEhTSOBAYI7ghsJAxeDSopUPjOBBQEBiyIPF4InAQE?=
X-IronPort-AV: E=Sophos;i="5.56,365,1539673200"; 
   d="scan'208";a="55489337"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 17 Dec 2018 07:50:45 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2387865AbeLQPul (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 17 Dec 2018 10:50:41 -0500
Received: from mail-qk1-f194.google.com ([209.85.222.194]:41794 "EHLO
        mail-qk1-f194.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726548AbeLQPuk (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 17 Dec 2018 10:50:40 -0500
Received: by mail-qk1-f194.google.com with SMTP id 189so7567689qkj.8
        for <linux-kernel@vger.kernel.org>; Mon, 17 Dec 2018 07:50:39 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc:content-transfer-encoding;
        bh=chorks1ja5fj3TR3R+jgLkI0SM9j4UW5VV1N/YEMfd8=;
        b=lf2ppd8Z6ePXTOzu/rU1oLiXZZ6LrNUX8QjNNmkFTDWTAg1Dm+cT3SeryU2LV17EJb
         x+cWlkTBWdhXG5krpGMh8tCcInqlyHSB2roZOzRGVmW6C2UK4XVn9oSbvbaX4HNOcekO
         pM8AaCEmI5M+Nn4XcIwLz07byrjuQ9Z7xxDuaV9ETvuuNm5Zgj6yUxJ8wDaiFsM6qbBV
         otDkgx5s6dzlCrvIU/shazImCUjXuPgcJCHolUllP8y5DNxmrBDm12EeP6VVlniJBaot
         HvYD6t7pVB0we4PzcDvgBvXNHX5KQaw32yuOVvLHo0h1u9nOTyX+8/hu2UJZ2DTXR9RA
         l8gg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc:content-transfer-encoding;
        bh=chorks1ja5fj3TR3R+jgLkI0SM9j4UW5VV1N/YEMfd8=;
        b=fyAeW0FA+8A8sX5QfSnQ11PUuIgrfavRvk6H6TFzB7gf/uLFQtj29PW1JD45b4n0kh
         mbDHbHXFsBm4SlVaj2rFm8VwJxafY0OCRpdxZsGBZZjSJu5lAfL6IHkQIURObxVJ8RBp
         6S3cZv4RhAjFBnFds6o61qgZdo3QsPMJsVCxcT4qM113GnhXdCqHuWKrLYMhwQu9jtDi
         9glKpq4I9UDmxN1A12Fnb9YUcLfbVPawP6oCmnxJ0HZYoZPxP7vXFBpk/ihDsJ6r2uTU
         X4IZDpxo4A0JJDKcHubbol+cwKxRVAn+dHHSKd6dFJaz16n/s39PVu+AkMf1U5J3stB2
         7egg==
X-Gm-Message-State: AA+aEWbNqapKhED8umX79OoPXAow5F3JyziiMA3YYqjMUpxh+I78T2E/
        4Oi3vFmYljrYLf4zNVTJrGbO60wyItrAyJdcXXo=
X-Google-Smtp-Source: AFSGD/UThi/TZTBxuljuR4U9I0uRpuyMJnbMvbQz/+zAg6i9XZZ+kQJZjPFfWKl5qctLn8ca2Buw0hXzKpr3O8v1LW4=
X-Received: by 2002:a37:cf9b:: with SMTP id v27mr12532904qkl.160.1545061838601;
 Mon, 17 Dec 2018 07:50:38 -0800 (PST)
MIME-Version: 1.0
References: <20181215001843.62404-1-ncrews@google.com> <20181215001843.62404-3-ncrews@google.com>
In-Reply-To: <20181215001843.62404-3-ncrews@google.com>
From: Enric Balletbo Serra <eballetbo@gmail.com>
Date: Mon, 17 Dec 2018 16:50:27 +0100
Message-ID: <CAFqH_52pY-FKfW=nfh6iLc8-sf1wQHQVi4gL8f5Ws9=mGkbmKA@mail.gmail.com>
Subject: Re: [RFC PATCH 02/10] CHROMIUM: wilco_ec: Add new driver for Wilco EC
To: Nick Crews <ncrews@google.com>
Cc: linux-kernel <linux-kernel@vger.kernel.org>,
        Duncan Laurie <dlaurie@google.com>,
        Olof Johansson <olof@lixom.net>,
        Benson Leung <bleung@chromium.org>,
        Guenter Roeck <groeck@chromium.org>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi Nick,

Many thanks for sending this upstream. Adding Guenter as also might be
interested, and some minor comments below.

Missatge de Nick Crews <ncrews@google.com> del dia ds., 15 de des.
2018 a les 1:22:
>
> From: Duncan Laurie <dlaurie@google.com>
>
> This EC is an incompatible variant of the typical Chrome OS embedded
> controller.  It uses the same low-level communication and a similar
> protocol with some significant differences.  The EC firmware does
> not support the same mailbox commands so it is not registered as a
> cros_ec device type.
>
> Signed-off-by: Duncan Laurie <dlaurie@google.com>
> Signed-off-by: Nick Crews <ncrews@google.com>
> ---
>
>  drivers/platform/chrome/Kconfig            |  14 +-
>  drivers/platform/chrome/Makefile           |   3 +
>  drivers/platform/chrome/wilco_ec.h         |  97 +++++
>  drivers/platform/chrome/wilco_ec_mailbox.c | 395 +++++++++++++++++++++
>  4 files changed, 508 insertions(+), 1 deletion(-)
>  create mode 100644 drivers/platform/chrome/wilco_ec.h
>  create mode 100644 drivers/platform/chrome/wilco_ec_mailbox.c
>
> diff --git a/drivers/platform/chrome/Kconfig b/drivers/platform/chrome/Kc=
onfig
> index 16b1615958aa..4168d5e6bedc 100644
> --- a/drivers/platform/chrome/Kconfig
> +++ b/drivers/platform/chrome/Kconfig
> @@ -49,6 +49,18 @@ config CHROMEOS_TBMC
>           To compile this driver as a module, choose M here: the
>           module will be called chromeos_tbmc.
>
> +config WILCO_EC
> +       tristate "ChromeOS Wilco Embedded Controller"
> +       depends on ACPI && (X86 || COMPILE_TEST)
> +       select CROS_EC_LPC_MEC
> +       help
> +         If you say Y here, you get support for talking to the Chrome OS

s/Chrome OS/ChromeOS/ like you did in the config description. For
coherence try to use the same form.

> +         Wilco EC over an eSPI bus. This uses a simple byte-level protoc=
ol
> +         with a checksum.
> +
> +         To compile this driver as a module, choose M here: the
> +         module will be called wilco_ec.
> +
>  config CROS_EC_CTL
>          tristate
>
> @@ -86,7 +98,7 @@ config CROS_EC_LPC
>
>  config CROS_EC_LPC_MEC
>         bool "ChromeOS Embedded Controller LPC Microchip EC (MEC) variant=
"
> -       depends on CROS_EC_LPC
> +       depends on CROS_EC_LPC || WILCO_EC
>         default n
>         help
>           If you say Y here, a variant LPC protocol for the Microchip EC
> diff --git a/drivers/platform/chrome/Makefile b/drivers/platform/chrome/M=
akefile
> index cd591bf872bb..b132ba5b3e3d 100644
> --- a/drivers/platform/chrome/Makefile
> +++ b/drivers/platform/chrome/Makefile
> @@ -12,4 +12,7 @@ cros_ec_lpcs-objs                     :=3D cros_ec_lpc.=
o cros_ec_lpc_reg.o
>  cros_ec_lpcs-$(CONFIG_CROS_EC_LPC_MEC) +=3D cros_ec_lpc_mec.o
>  obj-$(CONFIG_CROS_EC_LPC)              +=3D cros_ec_lpcs.o
>  obj-$(CONFIG_CROS_EC_PROTO)            +=3D cros_ec_proto.o
> +

Unrelated change.

>  obj-$(CONFIG_CROS_KBD_LED_BACKLIGHT)   +=3D cros_kbd_led_backlight.o
> +wilco_ec-objs                          :=3D wilco_ec_mailbox.o
> +obj-$(CONFIG_WILCO_EC)                 +=3D wilco_ec.o
> diff --git a/drivers/platform/chrome/wilco_ec.h b/drivers/platform/chrome=
/wilco_ec.h
> new file mode 100644
> index 000000000000..ba16fcff87c4
> --- /dev/null
> +++ b/drivers/platform/chrome/wilco_ec.h
> @@ -0,0 +1,97 @@
> +/* SPDX-License-Identifier: GPL-2.0 */
> +/*
> + * wilco_ec - Chrome OS Wilco Embedded Controller

Remove 'wilco_ec -' and s/Chrome OS/ChromeOS/

> + *
> + * Copyright 2018 Google LLC
> + *
> + * This software is licensed under the terms of the GNU General Public
> + * License version 2, as published by the Free Software Foundation, and
> + * may be copied, distributed, and modified under those terms.
> + *
> + * This program is distributed in the hope that it will be useful,
> + * but WITHOUT ANY WARRANTY; without even the implied warranty of
> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
> + * GNU General Public License for more details.

You already added the SPDX-identifier so can remove the license boiler-plat=
e.


> + */
> +
> +#ifndef WILCO_EC_H
> +#define WILCO_EC_H
> +
> +#include <linux/device.h>
> +#include <linux/kernel.h>
> +
> +#define WILCO_EC_FLAG_NO_RESPONSE      BIT(0) /* EC does not respond */
> +#define WILCO_EC_FLAG_EXTENDED_DATA    BIT(1) /* EC returns 256 data byt=
es */
> +#define WILCO_EC_FLAG_RAW_REQUEST      BIT(2) /* Do not trim request dat=
a */
> +#define WILCO_EC_FLAG_RAW_RESPONSE     BIT(3) /* Do not trim response da=
ta */
> +#define WILCO_EC_FLAG_RAW              (WILCO_EC_FLAG_RAW_REQUEST | \
> +                                        WILCO_EC_FLAG_RAW_RESPONSE)
> +
> +/**
> + * enum wilco_ec_msg_type - Message type to select a set of command code=
s.
> + * @WILCO_EC_MSG_LEGACY: Legacy EC messages for standard EC behavior.
> + * @WILCO_EC_MSG_PROPERTY: Get/Set/Sync EC controlled NVRAM property.
> + * @WILCO_EC_MSG_TELEMETRY: Telemetry data provided by the EC.
> + */
> +enum wilco_ec_msg_type {
> +       WILCO_EC_MSG_LEGACY =3D 0x00f0,
> +       WILCO_EC_MSG_PROPERTY =3D 0x00f2,
> +       WILCO_EC_MSG_TELEMETRY =3D 0x00f5,
> +};

I think that this is not used for now, remove and introduce it when you use=
 it.

> +
> +/**
> + * struct wilco_ec_device - Wilco Embedded Controller handle.
> + * @dev: Device handle.
> + * @mailbox_lock: Mutex to ensure one mailbox command at a time.
> + * @io_command: I/O port for mailbox command.  Provided by ACPI.
> + * @io_data: I/O port for mailbox data.  Provided by ACPI.
> + * @io_packet: I/O port for mailbox packet data.  Provided by ACPI.
> + * @data_buffer: Buffer used for EC communication.  The same buffer
> + *               is used to hold the request and the response.
> + * @data_size: Size of the data buffer used for EC communication.
> + */
> +struct wilco_ec_device {
> +       struct device *dev;
> +       struct mutex mailbox_lock;
> +       struct resource *io_command;
> +       struct resource *io_data;
> +       struct resource *io_packet;
> +       void *data_buffer;
> +       size_t data_size;
> +};
> +
> +/**
> + * struct wilco_ec_message - Request and response message.
> + * @type: Mailbox message type.
> + * @flags: Message flags.
> + * @command: Mailbox command code.
> + * @result: Result code from the EC.  Non-zero indicates an error.
> + * @request_size: Number of bytes to send to the EC.
> + * @request_data: Buffer containing the request data.
> + * @response_size: Number of bytes expected from the EC.
> + *                 This is 32 by default and 256 if the flag
> + *                 is set for %WILCO_EC_FLAG_EXTENDED_DATA
> + * @response_data: Buffer containing the response data, should be
> + *                 response_size bytes and allocated by caller.
> + */
> +struct wilco_ec_message {
> +       enum wilco_ec_msg_type type;
> +       u8 flags;
> +       u8 command;
> +       u8 result;
> +       size_t request_size;
> +       void *request_data;
> +       size_t response_size;
> +       void *response_data;
> +};
> +
> +/**
> + * wilco_ec_mailbox() - Send request to the EC and receive the response.
> + * @ec: Wilco EC device.
> + * @msg: Wilco EC message.
> + *
> + * Return: Number of bytes received or negative error code on failure.
> + */
> +int wilco_ec_mailbox(struct wilco_ec_device *ec, struct wilco_ec_message=
 *msg);
> +
> +#endif /* WILCO_EC_H */
> diff --git a/drivers/platform/chrome/wilco_ec_mailbox.c b/drivers/platfor=
m/chrome/wilco_ec_mailbox.c
> new file mode 100644
> index 000000000000..6613c18c2a82
> --- /dev/null
> +++ b/drivers/platform/chrome/wilco_ec_mailbox.c
> @@ -0,0 +1,395 @@
> +// SPDX-License-Identifier: GPL-2.0
> +/*
> + * wilco_ec_mailbox - Mailbox interface for Wilco Embedded Controller

Remove 'wilco_ec_mailbox -'

> + *
> + * Copyright 2018 Google LLC
> + *
> + * This software is licensed under the terms of the GNU General Public
> + * License version 2, as published by the Free Software Foundation, and
> + * may be copied, distributed, and modified under those terms.
> + *
> + * This program is distributed in the hope that it will be useful,
> + * but WITHOUT ANY WARRANTY; without even the implied warranty of
> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
> + * GNU General Public License for more details.

Remove the license boiler-plate.

> + */
> +
> +/*
> + * The Wilco EC is similar to a typical Chrome OS embedded controller.
> + * It uses the same MEC based low-level communication and a similar
> + * protocol, but with some important differences.  The EC firmware does
> + * not support the same mailbox commands so it is not registered as a
> + * cros_ec device type.
> + *
> + * Most messages follow a standard format, but there are some exceptions
> + * and an interface is provided to do direct/raw transactions that do no=
t
> + * make assumptions about byte placement.
> + */
> +
> +#include <linux/acpi.h>
> +#include <linux/delay.h>
> +#include <linux/device.h>
> +#include <linux/io.h>
> +#include <linux/mfd/cros_ec_lpc_mec.h>

This file does not exists.

#include "cros_ec_lpc_mec.h" ?

> +#include <linux/module.h>
> +#include <linux/platform_device.h>
> +#include "wilco_ec.h"
> +
> +/* Version of mailbox interface */
> +#define EC_MAILBOX_VERSION             0
> +
> +/* Command to start mailbox transaction */
> +#define EC_MAILBOX_START_COMMAND       0xda
> +
> +/* Version of EC protocol */
> +#define EC_MAILBOX_PROTO_VERSION       3
> +
> +/* Normal commands have a maximum 32 bytes of data */
> +#define EC_MAILBOX_DATA_SIZE           32
> +
> +/* Extended commands have 256 bytes of response data */
> +#define EC_MAILBOX_DATA_SIZE_EXTENDED  256
> +
> +/* Number of header bytes to be counted as data bytes */
> +#define EC_MAILBOX_DATA_EXTRA          2
> +
> +/* Maximum timeout */
> +#define EC_MAILBOX_TIMEOUT             HZ
> +
> +/* EC response flags */
> +#define EC_CMDR_DATA           BIT(0)  /* Data ready for host to read */
> +#define EC_CMDR_PENDING                BIT(1)  /* Write pending to EC */
> +#define EC_CMDR_BUSY           BIT(2)  /* EC is busy processing a comman=
d */
> +#define EC_CMDR_CMD            BIT(3)  /* Last host write was a command =
*/
> +
> +/**
> + * struct wilco_ec_request - Mailbox request message format.
> + * @struct_version: Should be %EC_MAILBOX_PROTO_VERSION
> + * @checksum: Sum of all bytes must be 0.
> + * @mailbox_id: Mailbox identifier, specifies the command set.
> + * @mailbox_version: Mailbox interface version %EC_MAILBOX_VERSION
> + * @reserved: Set to zero.
> + * @data_size: Length of request, data + last 2 bytes of the header.
> + * @command: Mailbox command code, unique for each mailbox_id set.
> + * @reserved_raw: Set to zero for most commands, but is used by
> + *                some command types and for raw commands.
> + */
> +struct wilco_ec_request {
> +       u8 struct_version;
> +       u8 checksum;
> +       u16 mailbox_id;
> +       u8 mailbox_version;
> +       u8 reserved;
> +       u16 data_size;
> +       u8 command;
> +       u8 reserved_raw;
> +} __packed;
> +
> +/**
> + * struct wilco_ec_response - Mailbox response message format.
> + * @struct_version: Should be %EC_MAILBOX_PROTO_VERSION
> + * @checksum: Sum of all bytes must be 0.
> + * @result: Result code from the EC.  Non-zero indicates an error.
> + * @data_size: Length of the response data buffer.
> + * @reserved: Set to zero.
> + * @mbox0: EC returned data at offset 0 is unused (always 0) so this byt=
e
> + *         is treated as part of the header instead of the data.
> + * @data: Response data buffer.  Max size is %EC_MAILBOX_DATA_SIZE_EXTEN=
DED.
> + */
> +struct wilco_ec_response {
> +       u8 struct_version;
> +       u8 checksum;
> +       u16 result;
> +       u16 data_size;
> +       u8 reserved[2];
> +       u8 mbox0;
> +       u8 data[0];
> +} __packed;
> +
> +/**
> + * wilco_ec_response_timed_out() - Wait for EC response.
> + * @ec: EC device.
> + *
> + * Return: true if EC timed out, false if EC did not time out.
> + */
> +static bool wilco_ec_response_timed_out(struct wilco_ec_device *ec)
> +{
> +       unsigned long timeout =3D jiffies + EC_MAILBOX_TIMEOUT;
> +
> +       usleep_range(200, 300);
> +       do {
> +               if (!(inb(ec->io_command->start) &
> +                     (EC_CMDR_PENDING | EC_CMDR_BUSY)))
> +                       return false;
> +               usleep_range(100, 200);
> +       } while (time_before(jiffies, timeout));
> +
> +       return true;
> +}
> +
> +/**
> + * wilco_ec_checksum() - Compute 8bit checksum over data range.
> + * @data: Data to checksum.
> + * @size: Number of bytes to checksum.
> + *
> + * Return: 8bit checksum of provided data.
> + */
> +static u8 wilco_ec_checksum(const void *data, size_t size)
> +{
> +       u8 *data_bytes =3D (u8 *)data;
> +       u8 checksum =3D 0;
> +       size_t i;
> +
> +       for (i =3D 0; i < size; i++)
> +               checksum +=3D data_bytes[i];
> +
> +       return checksum;
> +}
> +
> +/**
> + * wilco_ec_prepare() - Prepare the request structure for the EC.
> + * @msg: EC message with request information.
> + * @rq: EC request structure to fill.
> + */
> +static void wilco_ec_prepare(struct wilco_ec_message *msg,
> +                            struct wilco_ec_request *rq)
> +{
> +       memset(rq, 0, sizeof(*rq));
> +
> +       /* Handle messages without trimming bytes from the request */
> +       if (msg->request_size && msg->flags & WILCO_EC_FLAG_RAW_REQUEST) =
{
> +               rq->reserved_raw =3D *(u8 *)msg->request_data;
> +               msg->request_size--;
> +               memmove(msg->request_data, msg->request_data + 1,
> +                       msg->request_size);
> +       }
> +
> +       /* Fill in request packet */
> +       rq->struct_version =3D EC_MAILBOX_PROTO_VERSION;
> +       rq->mailbox_id =3D msg->type;
> +       rq->mailbox_version =3D EC_MAILBOX_VERSION;
> +       rq->data_size =3D msg->request_size + EC_MAILBOX_DATA_EXTRA;
> +       rq->command =3D msg->command;
> +
> +       /* Checksum header and data */
> +       rq->checksum =3D wilco_ec_checksum(rq, sizeof(*rq));
> +       rq->checksum +=3D wilco_ec_checksum(msg->request_data, msg->reque=
st_size);
> +       rq->checksum =3D -rq->checksum;
> +}
> +
> +/**
> + * wilco_ec_transfer() - Send EC request and receive EC response.
> + * @ec: EC device.
> + * @msg: EC message data for request and response.
> + *
> + * Return: 0 for success or negative error code on failure.
> + */
> +static int wilco_ec_transfer(struct wilco_ec_device *ec,
> +                            struct wilco_ec_message *msg)
> +{
> +       struct wilco_ec_request *rq;
> +       struct wilco_ec_response *rs;
> +       u8 checksum;
> +       size_t size;
> +
> +       /* Prepare request packet */
> +       rq =3D ec->data_buffer;
> +       wilco_ec_prepare(msg, rq);
> +
> +       /* Write request header */
> +       cros_ec_lpc_io_bytes_mec(MEC_IO_WRITE, 0, sizeof(*rq), (u8 *)rq);
> +
> +       /* Write request data */
> +       cros_ec_lpc_io_bytes_mec(MEC_IO_WRITE, sizeof(*rq), msg->request_=
size,
> +                                msg->request_data);
> +
> +       /* Start the command */
> +       outb(EC_MAILBOX_START_COMMAND, ec->io_command->start);
> +
> +       /* Wait for it to complete */
> +       if (wilco_ec_response_timed_out(ec)) {
> +               dev_err(ec->dev, "response timed out\n");
> +               return -ETIMEDOUT;
> +       }
> +
> +       /* Some commands will put the EC into a state where it cannot res=
pond */
> +       if (msg->flags & WILCO_EC_FLAG_NO_RESPONSE) {
> +               dev_dbg(ec->dev, "EC does not respond to this command\n")=
;
> +               return 0;
> +       }
> +
> +       /* Check result */
> +       msg->result =3D inb(ec->io_data->start);
> +       if (msg->result) {
> +               dev_err(ec->dev, "bad response: 0x%02x\n", msg->result);
> +               return -EIO;
> +       }
> +
> +       if (msg->flags & WILCO_EC_FLAG_EXTENDED_DATA) {
> +               /* Extended commands return 256 bytes of data */
> +               size =3D EC_MAILBOX_DATA_SIZE_EXTENDED;
> +       } else {
> +               /* Otherwise EC commands return 32 bytes of data */
> +               size =3D EC_MAILBOX_DATA_SIZE;
> +       }
> +
> +       /* Read back response */
> +       rs =3D ec->data_buffer;
> +       checksum =3D cros_ec_lpc_io_bytes_mec(MEC_IO_READ, 0,
> +                                           sizeof(*rs) + size, (u8 *)rs)=
;
> +       if (checksum) {
> +               dev_err(ec->dev, "bad packet checksum 0x%02x\n", rs->chec=
ksum);
> +               return -EBADMSG;
> +       }
> +       msg->result =3D rs->result;
> +
> +       /* Check the returned data size, skipping the header */
> +       if (rs->data_size !=3D size) {
> +               dev_err(ec->dev, "unexpected packet size (%u !=3D %zu)",
> +                       rs->data_size, size);
> +               return -EMSGSIZE;
> +       }
> +
> +       /* Skip 1 response data byte unless specified */
> +       size =3D (msg->flags & WILCO_EC_FLAG_RAW_RESPONSE) ? 0 : 1;
> +
> +       if (msg->response_size > rs->data_size - size) {
> +               dev_err(ec->dev, "response data too short (%u > %zu)",

Fix the following compiler warning:

warning: format =E2=80=98%u=E2=80=99 expects argument of type =E2=80=98unsi=
gned int=E2=80=99, but
argument 3 has type =E2=80=98size_t=E2=80=99 {aka =E2=80=98l
ong unsigned int=E2=80=99} [-Wformat=3D]

> +                       rs->data_size - size, msg->response_size);
> +               return -EMSGSIZE;
> +       }
> +
> +       /* Ignore response data bytes as requested */
> +       memcpy(msg->response_data, rs->data + size, msg->response_size);
> +
> +       /* Return actual amount of data received */
> +       return msg->response_size;
> +}
> +
> +int wilco_ec_mailbox(struct wilco_ec_device *ec, struct wilco_ec_message=
 *msg)
> +{
> +       size_t size =3D EC_MAILBOX_DATA_SIZE;
> +       int ret;
> +
> +       dev_dbg(ec->dev, "cmd=3D%02x type=3D%04x flags=3D%02x rslen=3D%d =
rqlen=3D%d\n",
> +               msg->command, msg->type, msg->flags, msg->response_size,
> +               msg->request_size);
> +

warning: format =E2=80=98%d=E2=80=99 expects argument of type =E2=80=98int=
=E2=80=99, but argument 7
has type =E2=80=98size_t=E2=80=99 {aka =E2=80=98long unsigned int=E2=80=99}=
 [-Wformat=3D]

> +       if (msg->request_size > size) {
> +               dev_err(ec->dev, "provided request too large: %zu > %zu\n=
",
> +                       msg->request_size, size);
> +               return -EINVAL;
> +       }
> +
> +       /* Check for extended size on response data if flag is set */
> +       if (msg->flags & WILCO_EC_FLAG_EXTENDED_DATA)
> +               size =3D EC_MAILBOX_DATA_SIZE_EXTENDED;
> +
> +       if (msg->response_size > size) {
> +               dev_err(ec->dev, "expected response too large: %zu > %zu\=
n",
> +                       msg->response_size, size);
> +               return -EINVAL;
> +       }
> +       if (msg->request_size && !msg->request_data) {
> +               dev_err(ec->dev, "request data missing\n");
> +               return -EINVAL;
> +       }
> +       if (msg->response_size && !msg->response_data) {
> +               dev_err(ec->dev, "response data missing\n");
> +               return -EINVAL;
> +       }
> +
> +       mutex_lock(&ec->mailbox_lock);
> +
> +       ret =3D wilco_ec_transfer(ec, msg);
> +       if (ret >=3D 0 && msg->result)
> +               ret =3D -EBADMSG;
> +
> +       mutex_unlock(&ec->mailbox_lock);
> +
> +       return ret;
> +}
> +
> +static struct resource *wilco_get_resource(struct platform_device *pdev,
> +                                          int index)
> +{
> +       struct device *dev =3D &pdev->dev;
> +       struct resource *res;
> +
> +       res =3D platform_get_resource(pdev, IORESOURCE_IO, index);
> +       if (!res) {
> +               dev_err(dev, "couldn't find IO resource %d\n", index);
> +               return NULL;
> +       }
> +
> +       if (!devm_request_region(dev, res->start, resource_size(res),
> +                                dev_name(dev))) {
> +               dev_err(dev, "couldn't reserve IO region %d\n", index);
> +               return NULL;
> +       }
> +
> +       return res;
> +}
> +
> +static int wilco_ec_probe(struct platform_device *pdev)
> +{
> +       struct device *dev =3D &pdev->dev;
> +       struct wilco_ec_device *ec;
> +
> +       ec =3D devm_kzalloc(dev, sizeof(*ec), GFP_KERNEL);
> +       if (!ec)
> +               return -ENOMEM;
> +       platform_set_drvdata(pdev, ec);
> +       ec->dev =3D dev;
> +       mutex_init(&ec->mailbox_lock);
> +
> +       /* Largest data buffer size requirement is extended data response=
 */
> +       ec->data_size =3D sizeof(struct wilco_ec_response) +
> +               EC_MAILBOX_DATA_SIZE_EXTENDED;
> +       ec->data_buffer =3D devm_kzalloc(dev, ec->data_size, GFP_KERNEL);
> +       if (!ec->data_buffer)
> +               return -ENOMEM;
> +
> +       /* Prepare access to IO regions provided by ACPI */
> +       ec->io_data =3D wilco_get_resource(pdev, 0);      /* Host Data */
> +       ec->io_command =3D wilco_get_resource(pdev, 1);   /* Host Command=
 */
> +       ec->io_packet =3D wilco_get_resource(pdev, 2);    /* MEC EMI */
> +       if (!ec->io_data || !ec->io_command || !ec->io_packet)
> +               return -ENODEV;
> +
> +       /* Initialize cros_ec register interface for communication */
> +       cros_ec_lpc_mec_init(ec->io_packet->start,
> +                            ec->io_packet->start + EC_MAILBOX_DATA_SIZE)=
;
> +
> +       return 0;
> +}
> +
> +static int wilco_ec_remove(struct platform_device *pdev)
> +{
> +       /* Teardown cros_ec interface */
> +       cros_ec_lpc_mec_destroy();
> +
> +       return 0;
> +}
> +
> +static const struct acpi_device_id wilco_ec_acpi_device_ids[] =3D {
> +       { "GOOG000C", 0 },
> +       { }
> +};
> +MODULE_DEVICE_TABLE(acpi, wilco_ec_acpi_device_ids);
> +
> +static struct platform_driver wilco_ec_driver =3D {
> +       .driver =3D {
> +               .name =3D "wilco_ec",
> +               .acpi_match_table =3D wilco_ec_acpi_device_ids,
> +       },
> +       .probe =3D wilco_ec_probe,
> +       .remove =3D wilco_ec_remove,
> +};
> +
> +module_platform_driver(wilco_ec_driver);
> +
> +MODULE_AUTHOR("Duncan Laurie <dlaurie@chromium.org>");
> +MODULE_LICENSE("GPL");

License mismatch, according to the SPDX identifier you want GPL v2 here.

> +MODULE_DESCRIPTION("Chrome OS Wilco Embedded Controller driver");

s/Chrome OS/ChromeOS/

> +MODULE_ALIAS("platform:wilco-ec");
> --
> 2.20.0.405.gbc1bbc6f85-goog
>

Thanks,
  Enric
