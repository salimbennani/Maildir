Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 25 Nov 2018 22:13:01 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 2AEEB5803EB;
	Sun, 25 Nov 2018 03:09:52 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by fmsmga005-1.fm.intel.com with ESMTP; 25 Nov 2018 03:09:51 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A/eXiLRC+HLYu6yhyVZtNUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7+ps+wAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95fWSJBHI2y?=
 =?us-ascii?q?cogBAOgPPehfoIbyu1QArQCmBQSuH+7v1iZIi2Xq0aAgz+gsEwfL1xEgEdIUt3?=
 =?us-ascii?q?TUqc34OqMVUeCz1qbI0TXDYOlQ2Tzg9oXHaBUhru+WXbJ3d8ra1E4iFwHEjlqM?=
 =?us-ascii?q?t4DoMSiY1ucTvGiB6epvS+avh3QgqwFrrTii38EhgZTHiIISz1DL7yR5wIAtKN?=
 =?us-ascii?q?23SU57fd6kEIZLuC2AK4R2RcYiTmd1syg50r0LoYC3cDQOxZg92hLSZeKLf5KV?=
 =?us-ascii?q?7h/gSOqdOzZ1iXB9dL+8mhq+60ytx+zmWsWq3ltHoTBJnsTDu30O0RHY99KJRe?=
 =?us-ascii?q?Fn/ki73DaCzwDT5f9AIUAzjafbNZEhzaAqlpYJskTMADX2mEPog6+SbEkk/fKo?=
 =?us-ascii?q?6+v/brXnoJ+TKZN0hxngPqgynsGzG/k0PwYQU2SB5Oix16Hv8Vf4TbhIlvE2l7?=
 =?us-ascii?q?PWsJHeJcQVvK65BApV354n6xa+CTemzdsZkWAELF1bYhKHiZbmO1XXLPD/A/a/?=
 =?us-ascii?q?hUqjkC1wyvDYMb3uHI/NImLAkLj/Z7Z97VBTyA4pwdBY/ZJUBakNIOjvVU/pqN?=
 =?us-ascii?q?zYEhg5PhSww+bmC9VyyJkSWG2SAqKCNKPSsFmI5v8gIuWWZY8Vvir9JOYh5/L0?=
 =?us-ascii?q?kXA5nlodd7Gz3ZQLcHC4AuhmI0KBbHrsmNgBEHsKsRA5TODwiF2CTCRcZ3C9X6?=
 =?us-ascii?q?8n4jE7CYSmDZrMR4y3gbyB2ju7EYNSZmxcFl+MFnLofZ2eW/gQcCKSPtNhkjsc?=
 =?us-ascii?q?WLijTI8uywuitAz9y7phKOrU/TYVtZbi1Nhz+u3Smgs+9T1yD8SBzW6NS3t4kX?=
 =?us-ascii?q?8PRz8zxKp/u1Byyk+f0ahkhPxVDcZc5+hJUgc9Np7Q1fZ6BMrwWg/aeteJSVCm?=
 =?us-ascii?q?QsipAD0rT9IxxcMObFh5G9m4kh/D2C+qCacPl7OXHJw07r7c33/pKsZ+0XnG0r?=
 =?us-ascii?q?Mtj10nQsRVM22mibVy9wzSB47PjkWYmLymdaUa3C7R6miDyXCCs11fUA51Sa/F?=
 =?us-ascii?q?R2wQZlPKrdTl4UPPV6KhBq45MgRf08KCKrFFatvyjVpYQvfvP9DeY2G0m2e0Hh?=
 =?us-ascii?q?uIwrKMbIz3e2QSxindCU4EkxwN8naCLwQxGiCho2fGBjx0CV3ve1/s8fV5qH6j?=
 =?us-ascii?q?U0A71R+KYFN727q14BEVg+ecRO0V3r8fvCchqjN0HEuy3t7MCtqAoRZhc7tYYd?=
 =?us-ascii?q?8n/FhH0mfZvRRnPpO8N6BimkIecwNvskPy1hV3D4JAkdQqrHIq1gZyNbiU0FRb?=
 =?us-ascii?q?dzOc3JDwPLLXJ3L2/BCuba7Wx17f3MyX+qcJ9PQ3tVHjsBu1GUol9nVty8NV3G?=
 =?us-ascii?q?eE5pXWEAoSVor8XVwz9xdkqLDVfCk865nP2n1xLKa7qDnC29EuBOs70Ruge9Zf?=
 =?us-ascii?q?MKWZFA79CcEaBs6uKPA0lFitdB4LIOdS9KssNcO8a/SGwLKrPPpnnD++jWVH/Z?=
 =?us-ascii?q?px3V6W+yt9Su7HxZAFw/6D0wuDVjf8ikqhs8/tlYBFYzESAnSwySz+CIFNYa1y?=
 =?us-ascii?q?eJ4BCX2yLM2v2tV+m5ntVmZC9F6iG1wJwtWpdgeVb1Dn2w1fy14XoX2+lSSk1T?=
 =?us-ascii?q?N0lywmobSF3CzJxeTvbx4HOm9NRGl/glbgO4m0j9YGXEe2awgljgeq5UH/x6JD?=
 =?us-ascii?q?vqRwM3HTQVtUfyjxN2xjUqqwuqCCYsJV85MorCNXXf+4YVCbTL79vhQb3zniH2?=
 =?us-ascii?q?tY2DA0aTWqto/lkBx9jWKXNGxzo2bBecFs2Rff48TRRfxL0TocRyl4ij7XCkKn?=
 =?us-ascii?q?P9az/tWUlJbDsuagWGKnTZBTdSjrzYWdtCq0/2FqABu/n+ytld3jCwQ1zSj719?=
 =?us-ascii?q?xyXyXSsBn8epXr17i9Me9/fkhnHlj859B4GoF/lIs9n5UQ2XkchpWI8nsLi2bz?=
 =?us-ascii?q?MdNH2a3gaHoBXyIEw9nQ4AL9wk1sMmqJx57lVnWa2sZhZMO1YmIM1iI98sBFEq?=
 =?us-ascii?q?GU7LNfkCtxo1q4qx/RYPdnkjccz/su9GAVg+UTtAUxySWdB6gYHVNEMiz0ixSI?=
 =?us-ascii?q?89e+ob1SZGaucri/zlBynN6/A7GZvgFTRmz5dYw8Ei9q4cVyK1bM0Hz16oH5d9?=
 =?us-ascii?q?jcd9MTthuIkxjei+hZMo4+lv0PhSB/I2LyoWUly/InjRxpxZy6oI+HK2B38KO4?=
 =?us-ascii?q?GBFYMCD1Z9gI+jHslqtemseW34ayHpRuADkLXZ3oTe62HzIWr/joKwGOEDgkoH?=
 =?us-ascii?q?eBBbXfBROf6Fthr3/XCJ+kLXaXJH0Ezdl4QBmdOVdSgAQVXDU8g544GRqmxM3n?=
 =?us-ascii?q?cEdl+D8R4kT0pQdLyuJtLxP/SHvQpB+0ajcoT5iSNBhW4RtH50jLKsyS9P5zEz?=
 =?us-ascii?q?tb/p28rwyNN2qbaB5TDWwSXkyEBlbjPqSh5NXa8uiYAPa+IOXKYbmUteNeUPKI?=
 =?us-ascii?q?z4q10oR65zaMKtmPPn56Avw73UpDQGl5G9nDlDUJUSAXjCXNb8iUpBqn/i13r8?=
 =?us-ascii?q?a/8OnkWQ715IuPDadSPstr+xysnaiDMOuQjj5jKTlEzpMM2WPIyL8H0V4SlS5u?=
 =?us-ascii?q?djqtEbcBtSLXT6LQgKhXDxEFZCNpKctI9Lkx3g1MOc7dl9P02aR0jv8zC1dZS1?=
 =?us-ascii?q?PhntulatANI2G4LFnHHlqENKyaJT3XxMH6ebmzSaBLg+VOqRKxuSyXE0viPjmY?=
 =?us-ascii?q?kznpVhavMfxDjS2BPRxevp29fQhpCWT5UN3mbRi7OsdtjTIq2b00mm/KNWkEPD?=
 =?us-ascii?q?hgckNNq6ec4j9CjvpjG2xO8HxlIPKAmyaY6enYN5kXveFqAiRyi+JV/nA6x6FJ?=
 =?us-ascii?q?4yFDQfx/gDHSocJ2o1G6jumPzSJqURpUpTZNgYKLvENiNr3Y95lAQ3nE+h0N4H?=
 =?us-ascii?q?6UCxQLodtlF9Lut7pRytjJiKL8NjNC/8jI8ssbAsiHYP6AZTAZNgLgXHbvEAYL?=
 =?us-ascii?q?RDjjDmzFjUVb2rnGzWGYoJE8kZX2kpMIDIdcTFUdH/UTDkNqWtcFJcEkcCkjlO?=
 =?us-ascii?q?u5i8gB+Xq3qlH6TcBXpJfBHqaQAP61cx6agKNCah9Oxqn3e9dAfrbn0lBvPwEp?=
 =?us-ascii?q?1L/BHFDdCJUU+nVs?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A3AADwgfpbh0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgmmBAieDeYgYX4sgUAEBBoE1FIkGhGqGEIMogXMUGAMQAYRAhBo?=
 =?us-ascii?q?iNAkNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkAYJhAQEBAQIBAQIgBBkBASoKA?=
 =?us-ascii?q?wEEAQkBAQgCGAICBSECAgMMSAYTBYMcAYF0BQgEAYsImmBwfDOCdgEBBYcTCIE?=
 =?us-ascii?q?LiWKBHIEPgQeBEYMShH6DBIJXgSwBAYdTGoF4hU2PIwEGAgGGfIooIwqBT02EP?=
 =?us-ascii?q?oMshniHfpAygUaCDTMaMIFhgU4JghKDbYUUhT5AMoECAwEBIROMNgEB?=
X-IPAS-Result: =?us-ascii?q?A0A3AADwgfpbh0O0hNFjHAEBAQQBAQcEAQGBUQcBAQsBgmm?=
 =?us-ascii?q?BAieDeYgYX4sgUAEBBoE1FIkGhGqGEIMogXMUGAMQAYRAhBoiNAkNAQMBAQEBA?=
 =?us-ascii?q?QECARMBAQEIDQkIKSMMgjYkAYJhAQEBAQIBAQIgBBkBASoKAwEEAQkBAQgCGAI?=
 =?us-ascii?q?CBSECAgMMSAYTBYMcAYF0BQgEAYsImmBwfDOCdgEBBYcTCIELiWKBHIEPgQeBE?=
 =?us-ascii?q?YMShH6DBIJXgSwBAYdTGoF4hU2PIwEGAgGGfIooIwqBT02EPoMshniHfpAygUa?=
 =?us-ascii?q?CDTMaMIFhgU4JghKDbYUUhT5AMoECAwEBIROMNgEB?=
X-IronPort-AV: E=Sophos;i="5.56,277,1539673200"; 
   d="scan'208";a="54684923"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 25 Nov 2018 03:08:49 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726290AbeKYV7f (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sun, 25 Nov 2018 16:59:35 -0500
Received: from mail.kernel.org ([198.145.29.99]:51334 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726131AbeKYV7f (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Sun, 25 Nov 2018 16:59:35 -0500
Received: from archlinux (cpc91196-cmbg18-2-0-cust659.5-4.cable.virginm.net [81.96.234.148])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 605FC20855;
        Sun, 25 Nov 2018 11:08:42 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1543144124;
        bh=GIEtklm0N5P5qr+IzcaKqDZ08yG7u8cVtaAwGDUbbCM=;
        h=Date:From:To:Cc:Subject:In-Reply-To:References:From;
        b=odfpNRVVbjHDW5rgbQ+y017McagTN9jDTkZgc3UZsUvP7wYC665LnQq42DKQ03c0x
         xmLhBpvOGy0t9rDwhAigcs29ujCwHMlqxFMcg6bqDLI4k2vHjVIcZ/IEmHKdnFH8v0
         1Ka35lLOXKNqTa9cn+ZSzZbfKGnrsDTSuhOCXwyc=
Date: Sun, 25 Nov 2018 11:08:39 +0000
From: Jonathan Cameron <jic23@kernel.org>
To: "Popa, Stefan Serban" <StefanSerban.Popa@analog.com>
Cc: "Ardelean, Alexandru" <alexandru.Ardelean@analog.com>,
        "lars@metafoo.de" <lars@metafoo.de>,
        "knaack.h@gmx.de" <knaack.h@gmx.de>,
        "Hennerich, Michael" <Michael.Hennerich@analog.com>,
        "giuliano.belinassi@gmail.com" <giuliano.belinassi@gmail.com>,
        "pmeerw@pmeerw.net" <pmeerw@pmeerw.net>,
        "gregkh@linuxfoundation.org" <gregkh@linuxfoundation.org>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        "linux-iio@vger.kernel.org" <linux-iio@vger.kernel.org>,
        "devel@driverdev.osuosl.org" <devel@driverdev.osuosl.org>,
        "kernel-usp@googlegroups.com" <kernel-usp@googlegroups.com>
Subject: Re: [PATCH] staging: iio: ad7780: Add gain & filter gpio support
Message-ID: <20181125110839.4a3aecf9@archlinux>
In-Reply-To: <1542884458.30645.22.camel@analog.com>
References: <20181121180443.tjgcpu2webrq53rh@smtp.gmail.com>
        <1542884458.30645.22.camel@analog.com>
X-Mailer: Claws Mail 3.17.1 (GTK+ 2.24.32; x86_64-pc-linux-gnu)
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Thu, 22 Nov 2018 11:01:00 +0000
"Popa, Stefan Serban" <StefanSerban.Popa@analog.com> wrote:

> On Mi, 2018-11-21 at 16:04 -0200, Giuliano Belinassi wrote:
> > Previously, the AD7780 driver only supported gpio for the 'powerdown'
> > pin. This commit adds suppport for the 'gain' and 'filter' pin. =20
> Hey,
>=20
> Comments inline.
> >=20
> > Signed-off-by: Giuliano Belinassi <giuliano.belinassi@usp.br>
> > ---
> > =C2=A0drivers/staging/iio/adc/ad7780.c=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=
=A0=C2=A0| 61 ++++++++++++++++++++++++--
> > =C2=A0include/linux/iio/adc/ad_sigma_delta.h |=C2=A0=C2=A05 +++
> > =C2=A02 files changed, 62 insertions(+), 4 deletions(-)
> >=20
> > diff --git a/drivers/staging/iio/adc/ad7780.c
> > b/drivers/staging/iio/adc/ad7780.c
> > index c4a85789c2db..69794f06dbcd 100644
> > --- a/drivers/staging/iio/adc/ad7780.c
> > +++ b/drivers/staging/iio/adc/ad7780.c
> > @@ -39,6 +39,9 @@
> > =C2=A0#define AD7170_PATTERN		(AD7780_PAT0 | AD7170_PAT2)
> > =C2=A0#define AD7170_PATTERN_MASK	(AD7780_PAT0 | AD7780_PAT1 |
> > AD7170_PAT2)
> > =C2=A0
> > +#define AD7780_GAIN_GPIO	0
> > +#define AD7780_FILTER_GPIO	1
> > +
> > =C2=A0struct ad7780_chip_info {
> > =C2=A0	struct iio_chan_spec	channel;
> > =C2=A0	unsigned int		pattern_mask;
> > @@ -50,6 +53,8 @@ struct ad7780_state {
> > =C2=A0	const struct ad7780_chip_info	*chip_info;
> > =C2=A0	struct regulator		*reg;
> > =C2=A0	struct gpio_desc		*powerdown_gpio;
> > +	struct gpio_desc		*gain_gpio;
> > +	struct gpio_desc		*filter_gpio;
> > =C2=A0	unsigned int	gain;
> > =C2=A0
> > =C2=A0	struct ad_sigma_delta sd;
> > @@ -115,18 +120,51 @@ static int ad7780_read_raw(struct iio_dev
> > *indio_dev,
> > =C2=A0	return -EINVAL;
> > =C2=A0}
> > =C2=A0
> > +static int ad7780_write_raw(struct iio_dev *indio_dev,
> > +			=C2=A0=C2=A0=C2=A0=C2=A0struct iio_chan_spec const *chan,
> > +			=C2=A0=C2=A0=C2=A0=C2=A0int val,
> > +			=C2=A0=C2=A0=C2=A0=C2=A0int val2,
> > +			=C2=A0=C2=A0=C2=A0=C2=A0long m)
> > +{
> > +	struct ad7780_state *st =3D iio_priv(indio_dev);
> > +
> > +	if (m !=3D IIO_CHAN_INFO_RAW)
> > +		return -EINVAL;
> > +
> > +	if (st->chip_info->is_ad778x) {
> > +		switch(val) {
> > +		case AD7780_GAIN_GPIO: =20
>=20
> I think that instead of setting the gain directly, we should use
> the=C2=A0IIO_CHAN_INFO_SCALE attribute. At page 12 of the ad7780 datashee=
t there
> is a formula from which the output code can be calculated:
> Code =3D 2^(N =E2=88=92 1)
> =C3=97 [(AIN =C3=97 Gain /VREF) + 1]. So, by setting the scale from user =
space, the
> driver can calculate the correct gain by using the formula above. Also, it
> would be useful to introduce scale available.
> Furthermore, there is a new
> ad7124 adc driver which does this exact thing. Take a look here:=C2=A0htt=
ps://gi
> thub.com/analogdevicesinc/linux/blob/master/drivers/iio/adc/ad7124.c#L337.
>=20
> > +			gpiod_set_value(st->gain_gpio, val2);
> > +		break;
> > +		case AD7780_FILTER_GPIO: =20
>=20
> The attribute that should be used to configure the filter gpio is
> IIO_CHAN_INFO_SAMP_FREQ. So, we should have 10 Hz and 16.7 Hz available
> sampling frequencies. If from user space the 10 Hz sampling freq is
> requested, then we set the FILTER pin high, while for 16.7 Hz the FILTER
> pin will be low.

Absolutely agreed with Stefan here.  If it had been decoupled from sampling
frequency (sometimes they are) then we have specific controls for filters
as well.  Here it directly effects the sampling frequency.

Please in future avoid any driver specific control like you have here.
I haven't really worked out what the interface is beyond some sort
of bitmap passed through a write to a magic channel?

If there isn't an existing interface in IIO for what you want to do
please propose one rather than doing something that will only work
with a particular userspace.  One of the primary purposes of having
a subsystem is to standardise interfaces.  This definitely doesn't
do that!

Will be good to have the support along the lines Stefan suggested though!

Thanks,

Jonathan



>=20
> > +			gpiod_set_value(st->filter_gpio, val2);
> > +		break;
> > +		default:
> > +			return -EINVAL;
> > +		}
> > +	}
> > +
> > +	return 0;
> > +}
> > +
> > =C2=A0static int ad7780_postprocess_sample(struct ad_sigma_delta *sigma=
_delta,
> > =C2=A0				=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0unsigned int raw_sample)
> > =C2=A0{
> > =C2=A0	struct ad7780_state *st =3D ad_sigma_delta_to_ad7780(sigma_delta=
);
> > =C2=A0	const struct ad7780_chip_info *chip_info =3D st->chip_info;
> > +	int val;
> > =C2=A0
> > =C2=A0	if ((raw_sample & AD7780_ERR) ||
> > =C2=A0	=C2=A0=C2=A0=C2=A0=C2=A0((raw_sample & chip_info->pattern_mask) =
!=3D chip_info- =20
> > >pattern)) =20
> > =C2=A0		return -EIO;
> > =C2=A0
> > =C2=A0	if (chip_info->is_ad778x) {
> > -		if (raw_sample & AD7780_GAIN)
> > +		val =3D raw_sample & AD7780_GAIN;
> > +
> > +		if (val !=3D gpiod_get_value(st->gain_gpio))
> > +			return -EIO;
> > +
> > +		if (val)
> > =C2=A0			st->gain =3D 1;
> > =C2=A0		else
> > =C2=A0			st->gain =3D 128;
> > @@ -141,18 +179,20 @@ static const struct ad_sigma_delta_info
> > ad7780_sigma_delta_info =3D {
> > =C2=A0	.has_registers =3D false,
> > =C2=A0};
> > =C2=A0
> > -#define AD7780_CHANNEL(bits, wordsize) \
> > +#define AD7170_CHANNEL(bits, wordsize) \
> > =C2=A0	AD_SD_CHANNEL_NO_SAMP_FREQ(1, 0, 0, bits, 32, wordsize - bits)
> > +#define AD7780_CHANNEL(bits, wordsize) \
> > +	AD_SD_CHANNEL_GAIN_FILTER(1, 0, 0, bits, 32, wordsize - bits)
> > =C2=A0
> > =C2=A0static const struct ad7780_chip_info ad7780_chip_info_tbl[] =3D {
> > =C2=A0	[ID_AD7170] =3D {
> > -		.channel =3D AD7780_CHANNEL(12, 24),
> > +		.channel =3D AD7170_CHANNEL(12, 24),
> > =C2=A0		.pattern =3D AD7170_PATTERN,
> > =C2=A0		.pattern_mask =3D AD7170_PATTERN_MASK,
> > =C2=A0		.is_ad778x =3D false,
> > =C2=A0	},
> > =C2=A0	[ID_AD7171] =3D {
> > -		.channel =3D AD7780_CHANNEL(16, 24),
> > +		.channel =3D AD7170_CHANNEL(16, 24),
> > =C2=A0		.pattern =3D AD7170_PATTERN,
> > =C2=A0		.pattern_mask =3D AD7170_PATTERN_MASK,
> > =C2=A0		.is_ad778x =3D false,
> > @@ -173,6 +213,7 @@ static const struct ad7780_chip_info
> > ad7780_chip_info_tbl[] =3D {
> > =C2=A0
> > =C2=A0static const struct iio_info ad7780_info =3D {
> > =C2=A0	.read_raw =3D ad7780_read_raw,
> > +	.write_raw =3D ad7780_write_raw,
> > =C2=A0};
> > =C2=A0
> > =C2=A0static int ad7780_probe(struct spi_device *spi)
> > @@ -222,6 +263,18 @@ static int ad7780_probe(struct spi_device *spi)
> > =C2=A0		goto error_disable_reg;
> > =C2=A0	}
> > =C2=A0
> > +	if (st->chip_info->is_ad778x) {
> > +		st->gain_gpio =3D devm_gpiod_get_optional(&spi->dev,
> > +							"gain",
> > +							GPIOD_OUT_HIGH);
> > +		if (IS_ERR(st->gain_gpio)) {
> > +			ret =3D PTR_ERR(st->gain_gpio);
> > +			dev_err(&spi->dev, "Failed to request gain GPIO:
> > %d\n",
> > +				ret);
> > +			goto error_disable_reg;
> > +		}
> > +	}
> > +
> > =C2=A0	ret =3D ad_sd_setup_buffer_and_trigger(indio_dev);
> > =C2=A0	if (ret)
> > =C2=A0		goto error_disable_reg;
> > diff --git a/include/linux/iio/adc/ad_sigma_delta.h
> > b/include/linux/iio/adc/ad_sigma_delta.h
> > index 730ead1a46df..6cadab6fd5fd 100644
> > --- a/include/linux/iio/adc/ad_sigma_delta.h
> > +++ b/include/linux/iio/adc/ad_sigma_delta.h
> > @@ -173,6 +173,11 @@ int ad_sd_validate_trigger(struct iio_dev
> > *indio_dev, struct iio_trigger *trig);
> > =C2=A0	__AD_SD_CHANNEL(_si, _channel, -1, _address, _bits, \
> > =C2=A0		_storagebits, _shift, NULL, IIO_VOLTAGE, 0)
> > =C2=A0
> > +#define AD_SD_CHANNEL_GAIN_FILTER(_si, _channel, _address, _bits, \
> > +	_storagebits, _shift) \
> > +	__AD_SD_CHANNEL(_si, _channel, -1, _address, _bits, \
> > +		_storagebits, _shift, NULL, IIO_VOLTAGE,
> > BIT(IIO_CHAN_INFO_RAW))
> > +
> > =C2=A0#define AD_SD_TEMP_CHANNEL(_si, _address, _bits, _storagebits, _s=
hift) \
> > =C2=A0	__AD_SD_CHANNEL(_si, 0, -1, _address, _bits, \
> > =C2=A0		_storagebits, _shift, NULL, IIO_TEMP,  =20

