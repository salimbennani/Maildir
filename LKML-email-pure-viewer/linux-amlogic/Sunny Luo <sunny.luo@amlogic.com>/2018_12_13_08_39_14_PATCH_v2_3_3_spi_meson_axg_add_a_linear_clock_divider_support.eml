Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 21:21:06 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 190C058079C;
	Thu, 13 Dec 2018 00:39:53 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga004-1.jf.intel.com with ESMTP; 13 Dec 2018 00:39:53 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AH+6MaBRTo9x0n8dbKxz6g+u6Ltpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64YBOFt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZAo2y?=
 =?us-ascii?q?cZYBAeQCM+hfrYb9qVQBoge/BQm3HOPiyCRFhmPq0aAgz+gsCx3K0BAmEtkTsH?=
 =?us-ascii?q?rUttL1NKIKXO6o0anIyzPDbvNL0jn79YjIdQ0qrPaXXbJtd8rRz0kuGxnBjlWN?=
 =?us-ascii?q?rozoJCma1uEJs2ic4OpgVP6gh3Q7pAF2pzii38EhgZTKiIIN0l3I6zl1zYIvKd?=
 =?us-ascii?q?GlRkN3f8SoHIZTui2GLYd7Q8EvT3l1tCom0LEKp522cDIJxZg92hLSauSLf5aV?=
 =?us-ascii?q?7h7+TuqdPDZ1iGx/dL++hxu+61WsxvDzW8SyzV1EtDBKksPWuXAIzxHT6taISv?=
 =?us-ascii?q?96/kq5xzaP2B7c6vteLUA3i6XbMZghzaA0lpYJtkTDBCD2lF33jK+QaEok5vCl?=
 =?us-ascii?q?5/r7brjivJOQKoF5hh/kPqgzmcGzHf40PwkMUmSD/OSzzrzj/Un3QLVQif02l7?=
 =?us-ascii?q?HUsJTbJcQdu664DBZZ0oU95BalCTepztAYkWAALFNLfhKIkZLpNkrQIPD3E/i/?=
 =?us-ascii?q?mU6gkDR1yPDcOL3uHJHNImLEkLf7crZx81RcxxYrzdBD+5JUDakMIPbyWk/yqt?=
 =?us-ascii?q?PUFBA4MxGvzubjCdV90J4eWG2VDq+YNqPSrUGH5uY1L+aQY48VvS73K+I56P72?=
 =?us-ascii?q?kX85hVgdcLGp3ZQNaXC4Au5pI0KDbXrsn9cOC2EKvgUlQezuiV2CVyNTZnmoU6?=
 =?us-ascii?q?I94DE7FJypDYPZSo+xh7yB2T+xHodKaWBeFlCMDXDoep2GW/cLdi2eOMxhkjsC?=
 =?us-ascii?q?VbinTI8szhWutA78y7p6IevY4CwYtZT/1Ndr4+3fjw099TtxD86FyWGCU3l0nn?=
 =?us-ascii?q?8URz8xxK1wu1d9yleE0ah7mfBYD8Zc5/FSXwc+NJ7cyfF6Ct/oVgLAeNeJVEip?=
 =?us-ascii?q?QtG8DT4tSdIxxscEY1xhFNW6khDDwy2qDqcWl7ORApw46Kbc33nrKMZ7xHbLz6?=
 =?us-ascii?q?0hj1ggQstSOmyqnK9/9w7PB4HXl0WVjbqldaMZ3CTV7meM0XKOvF1EUA53SajK?=
 =?us-ascii?q?QGoQZlXIotjj5kPNVbmuCa85PQtHzsKCLqhKatjtjVhdQPfjOdLeY3++mmuqBB?=
 =?us-ascii?q?aIwK+MY5Tue2kHwCrdD00EmRgJ/XmaLQg+Gjuho2XGATNzD13vfV3j/fN+qHyh?=
 =?us-ascii?q?SE801B+Fb0t62rqx+x4Vg+GcSvwJ0rIFvichtyt7HFKn093KDNqAohJrfL9Abt?=
 =?us-ascii?q?Ml/FdHyWXZuhRhPpyhKqBigUIecwR3vk/0yxV7EIJAkdIurHMrygpyJrmV0FdA?=
 =?us-ascii?q?dzOewJDxNafbKmj0/BCzdaHW3kvS38qR+qcK8P44sUnsvBm1Fko+9HVqy8Na03?=
 =?us-ascii?q?+C6ZTFEgUTUYj9XV0q9xdnvb7aZCo954TK1XB3Nam0sznC288mBec/yxagectf?=
 =?us-ascii?q?P72AFAPoD8IaAM2uIvQwm1e1dhIEIPxS9KksMsKmavuKwrKkMPxhnTKml2tH5o?=
 =?us-ascii?q?9931mI9yp9TO7IwpkEz+uZ3guBSzfzklOhvtrrloBDYDEYBnC/xjT8BI5Neq1y?=
 =?us-ascii?q?ep4GCX2vI8Kr3Np+nYPiW3lC+F6lGVwGws6pdQOOYFPn2Q1fyFoYoWagmSu+1D?=
 =?us-ascii?q?F0lzAprqyC3C3B2ejidRwHOnJVS2lml1vjPY+0j9UCVkiycwcpjAel5Vr9x6VD?=
 =?us-ascii?q?pKV/LnPfQEdScyjtMmFiVLC9tr6DY85J9ZMpvj9bUOW6YVCGVLH9pwEW3D/kH2?=
 =?us-ascii?q?tb3Do7bS2luo3lnxxmj2KQNHRzo2DDecFzxhff48bQReVL0ToFRyl4iD/XCUa6?=
 =?us-ascii?q?P9Sy+dWUlpHDsv2xVm67V51TdzXrwp2EtCeh+WJqBhi/leipmtL7CQg6zTP719?=
 =?us-ascii?q?5yWCTIthn8ZZPn16a7MeJhZURoAF7868xnGoBxiIcwhZcQ2WQEiZWR53YIjWDz?=
 =?us-ascii?q?MdBD06LkcHUNXSILw8LS4AX9201sNHOJy5j5VnWA2MRhYda6b3gS2iI86cBKFa?=
 =?us-ascii?q?iV4KZFnStzvlq3swbRbeJhkTcazPsk8GQajP0RuAox0iWdBagfHUxZPSzvjRuE?=
 =?us-ascii?q?9d6/o7tMZGazb7ewzlFxks67DLGNuQxcXHf5epE/HS5/9Ml/MVTM0GHt5YHgYt?=
 =?us-ascii?q?XfcdUTthiMmRfak+dVMI4xluYNhSd/JWL9unglx/Q6jBN025G6oZOHK35s/K+i?=
 =?us-ascii?q?Bh5YNzv1Z94c+z33jKZemNqW0J6rHpl7BjoLW57oR+qyED0OrfTnKxqOEDokp3?=
 =?us-ascii?q?iAA7XfGguf6Fp8o3LLDpCmLHWXJHgfzdV/SxiRPk1fgAYIXDokmp41DBylxMvk?=
 =?us-ascii?q?cE1h/DAe+kb4qgdQyuJvLxT/UH3QpAK2ZTcvUpSfMABa7gJf50fWLMye6Ph8Hz?=
 =?us-ascii?q?pD852lrQyNLHGbZgtSAWEIXEyEG07sPr206dbc9OiYA/K0L+HSbrWWtexeS/CI?=
 =?us-ascii?q?yIqv04th4jaML9iPMWNkD/EhwUpDWnZ5G8vCljULSiwXkT/NbsGBqBe9/C13st?=
 =?us-ascii?q?6w8PDxVA3z4ouPDqNYMc9z9BCunaeDK+mQiT55KTlG15MMxnzIyLkF0F4RkSFu?=
 =?us-ascii?q?cDatHqoatS7QV6LdgatXDx8dayNuO8pE9aM83g9ROcHFjtP5zKJ3jvkwC11dT1?=
 =?us-ascii?q?zuhtmpZdAWI2G6LF7IHluLO6+cJTLVw8D7e6e8SbxLgeVQth2wvyubEkD5MjSC?=
 =?us-ascii?q?kTnpSw6gMeVWgC6HOxxevZm3cgxxBmj7UNLmdhq7PcdrjT03xL04nG/FOXQAPj?=
 =?us-ascii?q?h8bUxNqKad7SdZgvV5BmxA4WBpLeiCmyaF8ebYLowavudsAiRxj+ha+mg1y6NJ?=
 =?us-ascii?q?7CFYQ/x4gCvTocRoo1Gjk+mPzCJoURtOqjlRgoKLsl5vOaHY9plGRHbF8wgB7W?=
 =?us-ascii?q?SWCxQWudRlDsfjtLxXytjKx+rPL2Jn+sjXteEGANfSYJaNKn0mNxvkMD3ZFg0I?=
 =?us-ascii?q?SXisL26J1GJHl/THzWCTqIlyjoXr0M4VV7ldRRoxC/QyA0FhG9MDK9F8WTZywu?=
 =?us-ascii?q?3Tt9IB+Xfr9EqZf85dpJ2SE6vKWfg=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAACgGRJch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgmmBAicKjAuOM44uiRIUgWIpAxABh0MiNAkNAQMBAQEBAQECARM?=
 =?us-ascii?q?BAQEIDQkIKSMMgjYkAYJiAwMBAiRSBgkBARg4A1QGDgUFgxwBgX8BBadpM4o1h?=
 =?us-ascii?q?32EP4FXP4ERh1cghXcCiTUKgXOEFX1Sj3kHAoIkBIQlQIpOFoFcTYd5hyibD4I?=
 =?us-ascii?q?OMxojgzwJgh4XiBuGDzIBATGBBQEBizKBHwEB?=
X-IPAS-Result: =?us-ascii?q?A0ANAACgGRJch0O0hNFjHAEBAQQBAQcEAQGBUQcBAQsBgmm?=
 =?us-ascii?q?BAicKjAuOM44uiRIUgWIpAxABh0MiNAkNAQMBAQEBAQECARMBAQEIDQkIKSMMg?=
 =?us-ascii?q?jYkAYJiAwMBAiRSBgkBARg4A1QGDgUFgxwBgX8BBadpM4o1h32EP4FXP4ERh1c?=
 =?us-ascii?q?ghXcCiTUKgXOEFX1Sj3kHAoIkBIQlQIpOFoFcTYd5hyibD4IOMxojgzwJgh4Xi?=
 =?us-ascii?q?BuGDzIBATGBBQEBizKBHwEB?=
X-IronPort-AV: E=Sophos;i="5.56,347,1539673200"; 
   d="scan'208";a="43883246"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 13 Dec 2018 00:39:50 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727707AbeLMIjs (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 13 Dec 2018 03:39:48 -0500
Received: from mail-sz2.amlogic.com ([211.162.65.114]:52978 "EHLO
        mail-sz2.amlogic.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727604AbeLMIjq (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 13 Dec 2018 03:39:46 -0500
Received: from localhost.localdomain (10.28.8.16) by mail-sz2.amlogic.com
 (10.28.11.6) with Microsoft SMTP Server id 15.0.1320.4; Thu, 13 Dec 2018
 16:40:09 +0800
From: Sunny Luo <sunny.luo@amlogic.com>
To: Mark Brown <broonie@kernel.org>
CC: Sunny Luo <sunny.luo@amlogic.com>,
        Yixun Lan <yixun.lan@amlogic.com>,
        Neil Armstrong <narmstrong@baylibre.com>,
        Jerome Brunet <jbrunet@baylibre.com>,
        Kevin Hilman <khilman@baylibre.com>,
        Carlo Caione <carlo@caione.org>,
        Jianxin Pan <jianxin.pan@amlogic.com>,
        Xingyu Chen <xingyu.chen@amlogic.com>,
        <linux-spi@vger.kernel.org>, <linux-amlogic@lists.infradead.org>,
        <linux-arm-kernel@lists.infradead.org>,
        <linux-kernel@vger.kernel.org>
Subject: [PATCH v2 3/3] spi: meson-axg: add a linear clock divider support
Date: Thu, 13 Dec 2018 16:39:14 +0800
Message-ID: <1544690354-16409-4-git-send-email-sunny.luo@amlogic.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1544690354-16409-1-git-send-email-sunny.luo@amlogic.com>
References: <1544690354-16409-1-git-send-email-sunny.luo@amlogic.com>
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [10.28.8.16]
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The SPICC controller in Meson-AXG SoC is capable of using
a linear clock divider to reach a much fine tuned range of clocks,
while the old controller only use a power of two clock divider,
result at a more coarse clock range.

Also convert the clock registration into Common Clock Framework.

Signed-off-by: Sunny Luo <sunny.luo@amlogic.com>
Signed-off-by: Yixun Lan <yixun.lan@amlogic.com>
---
 drivers/spi/Kconfig           |   2 +-
 drivers/spi/spi-meson-spicc.c | 209 ++++++++++++++++++++++++++++++++++--------
 2 files changed, 170 insertions(+), 41 deletions(-)

diff --git a/drivers/spi/Kconfig b/drivers/spi/Kconfig
index 9f89cb1..75f7362 100644
--- a/drivers/spi/Kconfig
+++ b/drivers/spi/Kconfig
@@ -384,7 +384,7 @@ config SPI_FSL_ESPI
 
 config SPI_MESON_SPICC
 	tristate "Amlogic Meson SPICC controller"
-	depends on ARCH_MESON || COMPILE_TEST
+	depends on OF && COMMON_CLK && (ARCH_MESON || COMPILE_TEST)
 	help
 	  This enables master mode support for the SPICC (SPI communication
 	  controller) available in Amlogic Meson SoCs.
diff --git a/drivers/spi/spi-meson-spicc.c b/drivers/spi/spi-meson-spicc.c
index 0384c28..59af18e 100644
--- a/drivers/spi/spi-meson-spicc.c
+++ b/drivers/spi/spi-meson-spicc.c
@@ -116,6 +116,9 @@
 #define SPICC_DWADDR	0x24	/* Write Address of DMA */
 
 #define SPICC_ENH_CTL0	0x38	/* Enhanced Feature */
+#define SPICC_ENH_CLK_CS_DELAY_MASK	GENMASK(15, 0)
+#define SPICC_ENH_DATARATE_MASK		GENMASK(23, 16)
+#define SPICC_ENH_DATARATE_EN		BIT(24)
 #define SPICC_ENH_MOSI_OEN		BIT(25)
 #define SPICC_ENH_CLK_OEN		BIT(26)
 #define SPICC_ENH_CS_OEN		BIT(27)
@@ -131,6 +134,7 @@
 struct meson_spicc_data {
 	unsigned int			max_speed_hz;
 	bool				has_oen;
+	bool				has_enhance_clk_div;
 };
 
 struct meson_spicc_device {
@@ -138,6 +142,7 @@ struct meson_spicc_device {
 	struct platform_device		*pdev;
 	void __iomem			*base;
 	struct clk			*core;
+	struct clk			*clk;
 	struct spi_message		*message;
 	struct spi_transfer		*xfer;
 	const struct meson_spicc_data	*data;
@@ -325,40 +330,6 @@ static irqreturn_t meson_spicc_irq(int irq, void *data)
 	return IRQ_HANDLED;
 }
 
-static u32 meson_spicc_setup_speed(struct meson_spicc_device *spicc, u32 conf,
-				   u32 speed)
-{
-	unsigned long parent, value;
-	unsigned int i, div;
-
-	parent = clk_get_rate(spicc->core);
-
-	/* Find closest inferior/equal possible speed */
-	for (i = 0 ; i < 7 ; ++i) {
-		/* 2^(data_rate+2) */
-		value = parent >> (i + 2);
-
-		if (value <= speed)
-			break;
-	}
-
-	/* If provided speed it lower than max divider, use max divider */
-	if (i > 7) {
-		div = 7;
-		dev_warn_once(&spicc->pdev->dev, "unable to get close to speed %u\n",
-			      speed);
-	} else
-		div = i;
-
-	dev_dbg(&spicc->pdev->dev, "parent %lu, speed %u -> %lu (%u)\n",
-		parent, speed, value, div);
-
-	conf &= ~SPICC_DATARATE_MASK;
-	conf |= FIELD_PREP(SPICC_DATARATE_MASK, div);
-
-	return conf;
-}
-
 static void meson_spicc_setup_xfer(struct meson_spicc_device *spicc,
 				   struct spi_transfer *xfer)
 {
@@ -367,9 +338,6 @@ static void meson_spicc_setup_xfer(struct meson_spicc_device *spicc,
 	/* Read original configuration */
 	conf = conf_orig = readl_relaxed(spicc->base + SPICC_CONREG);
 
-	/* Select closest divider */
-	conf = meson_spicc_setup_speed(spicc, conf, xfer->speed_hz);
-
 	/* Setup word width */
 	conf &= ~SPICC_BITLENGTH_MASK;
 	conf |= FIELD_PREP(SPICC_BITLENGTH_MASK,
@@ -378,6 +346,8 @@ static void meson_spicc_setup_xfer(struct meson_spicc_device *spicc,
 	/* Ignore if unchanged */
 	if (conf != conf_orig)
 		writel_relaxed(conf, spicc->base + SPICC_CONREG);
+
+	clk_set_rate(spicc->clk, xfer->speed_hz);
 }
 
 static int meson_spicc_transfer_one(struct spi_master *master,
@@ -486,9 +456,6 @@ static int meson_spicc_unprepare_transfer(struct spi_master *master)
 	/* Disable all IRQs */
 	writel(0, spicc->base + SPICC_INTREG);
 
-	/* Disable controller */
-	writel_bits_relaxed(SPICC_ENABLE, 0, spicc->base + SPICC_CONREG);
-
 	device_reset_optional(&spicc->pdev->dev);
 
 	return 0;
@@ -528,6 +495,157 @@ static void meson_spicc_cleanup(struct spi_device *spi)
 	spi->controller_state = NULL;
 }
 
+/*
+ * The Clock Mux
+ *            x-----------------x   x------------x    x------\
+ *        |---| 0) fixed factor |---| 1) old div |----|      |
+ *        |   x-----------------x   x------------x    |      |
+ * src ---|                                           |5) mux|-- out
+ *        |   x-----------------x   x------------x    |      |
+ *        |---| 2) fixed factor |---| 3) new div |0---|      |
+ *            x-----------------x   x------------x    x------/
+ *
+ * Clk path for GX series:
+ *    src -> 0 -> 1 -> out
+ *
+ * Clk path for AXG series:
+ *    src -> 0 -> 1 -> 5 -> out
+ *    src -> 2 -> 3 -> 5 -> out
+ */
+
+/* algorithm for div0 + div1: rate = freq / 4 / (2 ^ N) */
+static struct clk_fixed_factor meson_spicc_div0 = {
+	.mult	= 1,
+	.div	= 4,
+};
+
+static struct clk_divider meson_spicc_div1 = {
+	.reg	= (void *)SPICC_CONREG,
+	.shift	= 16,
+	.width	= 3,
+	.flags	= CLK_DIVIDER_POWER_OF_TWO,
+};
+
+/* algorithm for div2 + div3: rate = freq / 2 / (N + 1) */
+static struct clk_fixed_factor meson_spicc_div2 = {
+	.mult	= 1,
+	.div	= 2,
+};
+
+static struct clk_divider meson_spicc_div3 = {
+	.reg	= (void *)SPICC_ENH_CTL0,
+	.shift	= 16,
+	.width	= 8,
+};
+
+static struct clk_mux meson_spicc_sel = {
+	.reg	= (void *)SPICC_ENH_CTL0,
+	.mask	= 0x1,
+	.shift	= 24,
+};
+
+static int meson_spicc_clk_init(struct meson_spicc_device *spicc)
+{
+	struct device *dev = &spicc->pdev->dev;
+	struct clk_fixed_factor *div0;
+	struct clk_divider *div1;
+	struct clk_mux *mux;
+	struct clk_init_data init;
+	struct clk *clk;
+	const char *parent_names[1];
+	const char *mux_parent_names[2];
+	char name[32];
+
+	div0 = &meson_spicc_div0;
+	snprintf(name, sizeof(name), "%s#_div0", dev_name(dev));
+	init.name = name;
+	init.ops = &clk_fixed_factor_ops;
+	init.flags = 0;
+	parent_names[0] = __clk_get_name(spicc->core);
+	init.parent_names = parent_names;
+	init.num_parents = 1;
+
+	div0->hw.init = &init;
+
+	clk = devm_clk_register(dev, &div0->hw);
+	if (WARN_ON(IS_ERR(clk)))
+		return PTR_ERR(clk);
+
+	div1 = &meson_spicc_div1;
+	snprintf(name, sizeof(name), "%s#_div1", dev_name(dev));
+	init.name = name;
+	init.ops = &clk_divider_ops;
+	init.flags = CLK_SET_RATE_PARENT;
+	parent_names[0] = __clk_get_name(clk);
+	init.parent_names = parent_names;
+	init.num_parents = 1;
+
+	div1->reg = spicc->base + (u64)div1->reg;
+	div1->hw.init = &init;
+
+	clk = devm_clk_register(dev, &div1->hw);
+	if (WARN_ON(IS_ERR(clk)))
+		return PTR_ERR(clk);
+
+	if (!spicc->data->has_enhance_clk_div) {
+		spicc->clk = clk;
+		return 0;
+	}
+
+	mux_parent_names[0] = __clk_get_name(clk);
+
+	div0 = &meson_spicc_div2;
+	snprintf(name, sizeof(name), "%s#_div2", dev_name(dev));
+	init.name = name;
+	init.ops = &clk_fixed_factor_ops;
+	init.flags = 0;
+	parent_names[0] = __clk_get_name(spicc->core);
+	init.parent_names = parent_names;
+	init.num_parents = 1;
+
+	div0->hw.init = &init;
+
+	clk = devm_clk_register(dev, &div0->hw);
+	if (WARN_ON(IS_ERR(clk)))
+		return PTR_ERR(clk);
+
+	div1 = &meson_spicc_div3;
+	snprintf(name, sizeof(name), "%s#_div3", dev_name(dev));
+	init.name = name;
+	init.ops = &clk_divider_ops;
+	init.flags = CLK_SET_RATE_PARENT;
+	parent_names[0] = __clk_get_name(clk);
+	init.parent_names = parent_names;
+	init.num_parents = 1;
+
+	div1->reg = spicc->base + (u64)div1->reg;
+	div1->hw.init = &init;
+
+	clk = devm_clk_register(dev, &div1->hw);
+	if (WARN_ON(IS_ERR(clk)))
+		return PTR_ERR(clk);
+
+	mux_parent_names[1] = __clk_get_name(clk);
+
+	mux = &meson_spicc_sel;
+	snprintf(name, sizeof(name), "%s#_sel", dev_name(dev));
+	init.name = name;
+	init.ops = &clk_mux_ops;
+	init.parent_names = mux_parent_names;
+	init.num_parents = 2;
+	init.flags = CLK_SET_RATE_PARENT | CLK_SET_RATE_NO_REPARENT;
+
+	mux->reg = spicc->base + (u64)mux->reg;
+	mux->hw.init = &init;
+
+	spicc->clk = devm_clk_register(dev, &mux->hw);
+	if (WARN_ON(IS_ERR(spicc->clk)))
+		return PTR_ERR(spicc->clk);
+
+	clk_set_parent(spicc->clk, clk);
+	return 0;
+}
+
 static int meson_spicc_probe(struct platform_device *pdev)
 {
 	struct spi_master *master;
@@ -557,6 +675,10 @@ static int meson_spicc_probe(struct platform_device *pdev)
 		goto out_master;
 	}
 
+	/* Set master mode and enable controller */
+	writel_relaxed(SPICC_ENABLE | SPICC_MODE_MASTER,
+		       spicc->base + SPICC_CONREG);
+
 	/* Disable all IRQs */
 	writel_relaxed(0, spicc->base + SPICC_INTREG);
 
@@ -603,6 +725,12 @@ static int meson_spicc_probe(struct platform_device *pdev)
 	master->max_speed_hz = min_t(unsigned int, rate >> 1,
 				     spicc->data->max_speed_hz);
 
+	ret = meson_spicc_clk_init(spicc);
+	if (ret) {
+		dev_err(&pdev->dev, "clock registration failed\n");
+		goto out_master;
+	}
+
 	ret = devm_spi_register_master(&pdev->dev, master);
 	if (ret) {
 		dev_err(&pdev->dev, "spi master registration failed\n");
@@ -639,6 +767,7 @@ static const struct meson_spicc_data meson_spicc_gx_data = {
 static const struct meson_spicc_data meson_spicc_axg_data = {
 	.max_speed_hz		= 80000000,
 	.has_oen		= true,
+	.has_enhance_clk_div	= true,
 };
 
 static const struct of_device_id meson_spicc_of_match[] = {
-- 
2.7.4

