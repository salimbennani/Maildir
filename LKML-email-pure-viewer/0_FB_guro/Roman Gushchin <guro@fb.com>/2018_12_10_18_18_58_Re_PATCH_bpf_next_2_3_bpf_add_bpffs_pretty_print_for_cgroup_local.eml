Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 11 Dec 2018 08:41:33 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 3A5FC5807A2;
	Mon, 10 Dec 2018 10:19:47 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga003-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 10 Dec 2018 10:19:46 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AlmiIchF67686zIJdy5F25p1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75osy5bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJVyJPHJ6y?=
 =?us-ascii?q?b5cBAeQCM+ZXrYj9qEcBoxSxHgmsHOHixyRUhn/vx6A2z/gtHR3Y0AEmAtkAsG?=
 =?us-ascii?q?7UrNLwNKoKTe61y6zIwi/Fb/hL2Dn99ZPIchA9rvGMXLJwd9faxE4gFwPYlFWQ?=
 =?us-ascii?q?rpfoPz2O2egXr2eb6O9gWPuphmU6qA9xuiCiytkwhoTNnI4Z117J+TtjzIooJt?=
 =?us-ascii?q?C0VFR3bN+mHZdIqS2XNpV6Tt8nTm11pCo117gLtoKncCUO1JgqwgDTZ+Cbf4WN?=
 =?us-ascii?q?5x/uVeOcLDNmiH9qd7+znxiy/lajx+HgU8S51VJHoy5ZntTJqn8ByQLc5tSCR/?=
 =?us-ascii?q?dj5Eis2iyA2gXN5uxEPU85lazWIIM7zLEqjJocq0HDEzf2mEroiK+WcV0p+van?=
 =?us-ascii?q?6+v5eLXqvJycOJFuigH4LKsuntazAeMiMggBR2Sb+OK826P//UDhXrlGkvk7nr?=
 =?us-ascii?q?PEvJ3UO8gXvLO1DgxJ3oo56huyDS+q0NECknkGKFJFdgiHj4/sO1zWJPD4DPG/?=
 =?us-ascii?q?g0mjkTtyxPDJIKfhApPTIXjHibvherh860hCxwop1t1f+Z1UBa8bIP7pWU/+qs?=
 =?us-ascii?q?bYDhknPAyw2ernD8991owGVWKVHqCZKL/SsUOP5u83J+mMZYwVtyjnJ/kq+v7j?=
 =?us-ascii?q?lns5mV4bfam00pobcnG4HvJ6I0qHZXrgmMsOEWAPvgAmVuzllEWCUSJPZ3a1R6?=
 =?us-ascii?q?885is0CIO6DYjZQYChmryB3DqhEZ1QaWBLEVSMEXbud4WZVPYAciOSIsl9kjMa?=
 =?us-ascii?q?UbitUZMu1RartAXi0bpoMvLU+jEEtZLkzNV15erTmg8o+Tx3CMSd1WeNT2Zvk2?=
 =?us-ascii?q?MMRj822r1/oENnxleC16h4n+JXFdhJ6/xVVQc6MIbWz/ZmBNDqRgLBYtCJRU68?=
 =?us-ascii?q?TdW9ATExSdExz8UUY0lnGdWvlRTD3yusA78ImL2HHp008qTA33fvI8Zx0WrJ1K?=
 =?us-ascii?q?4kj1M+WMtAKXWmhrJj9wjUH4PJkF+Wl6CweaQY3S7C7mGDzWWVsUFcUQ5wV7jF?=
 =?us-ascii?q?XH8FakvXq9T5+l3NT7u0Bbs7NQtBzNaIKrFWZd3xkVVGWPDjNczDbG2rhWe/Gw?=
 =?us-ascii?q?yExrOWY4rsYGUSwiPdBE8AkwAQ+HaGMRMzBiOgo2LYETxvGkjjY0Lq8elitny7?=
 =?us-ascii?q?SlU4wB2Nb01kz7C14AIaheSAS/MP2bIJoDoupC9qHFmjxd7WC8CPpwx6fKpCZ9?=
 =?us-ascii?q?Mw+1NH1WPftwxgMZ2sNaFihlgCcwtpu0PizQl4CoJFkcIytnMl0BJyKb6E0FNG?=
 =?us-ascii?q?bz6YwZHwOrjQKmnu/BCua7Ta2k3E3NaR4KcP7PU4q1PsvAyyEkoi8nNn08Ra0n?=
 =?us-ascii?q?eG55XKChYSXoz1Ukot6xd6oLTaaDEn54zIzX1sLbW0sjja1t0zAOsq1BmhcMlf?=
 =?us-ascii?q?Ma+eDwDyDtAVCNKoKOwpnFipcAkJPORT9K4yIsOneOGK2K+tPOZ8gj2miX5L75?=
 =?us-ascii?q?x60kKJ7yB8UPLH344Zw/GE2QuKTzf9jEq7vs/rg4xFZDESEXC5ySjrH4NRYqxy?=
 =?us-ascii?q?fYAWCWahOcG3x9N+h4LzVH5c7lKsG1QG2MqxcxqIc1P9xRFQ1VgQoXG/gyu4zi?=
 =?us-ascii?q?B7nCszrqWC2yzC2eLiewQdOm5KXWVtkU3jIYypgN8ERkioaA4pmQCh5Ub7wahb?=
 =?us-ascii?q?uat+I3PSQUdOYyj5MWViXrGsubqFZs5F8IkovjlPUOSgfVCaTabwohsb0y/5H2?=
 =?us-ascii?q?pS3is7dyysupjimxx6iWSdLGt8rXbDeMFwwwvf68LYRfJLwjUGQyx4gyHNBleg?=
 =?us-ascii?q?J9mp4cmUl5Dbv+C8TW2hTJ5TcSrszY+aryu0/25qAR6+n/C1hNLnFxM30Sv619?=
 =?us-ascii?q?lsSCXJowzwYojt16SmL+1nelNkC0P768p/Aot+iJc/hIkM2XgGgZWY5XoGnn30?=
 =?us-ascii?q?MdlB26L+bXwNSCUPw97U5gjlxUJiImiIx4L/SnWS3M9ha8OmbWMR3yI399pKB7?=
 =?us-ascii?q?uM7LxYgSt1pUK1rQHLbvh8hDsdyeYu52Qcg+EGowctyiSdArYPHUhXJyDslhKI?=
 =?us-ascii?q?78ygo6VTfmqgbb+w1E9ml9C7EL6Cuh1cWGr+epo6GC9w78Z/P0jW3Hz99I7kY8?=
 =?us-ascii?q?XQYswJthKPjRjAledVJYk1lvoLgypnJG38sWcky+49kRxhw5W6sJKbJGVq+aKz?=
 =?us-ascii?q?GgRYOSHtZ8MP5jHtir5TntqR34CqBJlgGy8EXJ31TfKzCzIStO/qNwKPED06t3?=
 =?us-ascii?q?eaFqDTHQ6Z6Ed6sX3PF4qnOG2QJHkc1d9iXgWSJFRDgAAIWzU3hoU2GRqtxMzl?=
 =?us-ascii?q?bUd1/DQR5kPjpxtIy+JoMQT/U2jFqAepbDc0VIaQLB5M4g5e4EfVNNSU7vhvEC?=
 =?us-ascii?q?FA4p2hsAuNJ3SZZwtSCGEGRFeEC0r/PrW05tnA7uuYBve4L/TUerWDsuheV/aO?=
 =?us-ascii?q?xZKy3Ypq5TeMNsOTPnZ8C/03wFZMXXd8G87BgTUAVzQXlz7Rb86cvBq9+ip3rt?=
 =?us-ascii?q?2m8PT2Qg3v45GDC6BVMdVp9BC7mqODN++WhCZkJjdUzJIMxXnUyLcB2F4ekT1h?=
 =?us-ascii?q?dz6oEb4Yry7CULrQmrNLDx4ccy5zNNVH76M/3glOOM7XkND11qR/jv46FVhFT0?=
 =?us-ascii?q?HhmtqyaMwOImG9Mk7HBUmROLSHIz3L39/4YaemRbJMi+VUsgW6uSyHHE/7IjSD?=
 =?us-ascii?q?iz7pWgi1PuFRly6bJgJRuYGnfhZpCGjuV9bmahy9MN9qgjw627w0hnXWNWECNT?=
 =?us-ascii?q?hwaV9CrrqV7SlAmPVwB3RB7mZ5LemDgyuZ8+jYKpMMvfR3GCh7i+Ja72o8y7ZO?=
 =?us-ascii?q?6CFERfp1mDbdr9J0olGmlPWPxSRjUBZUtjlLg4eLt114OarF7plARWrE/BUV4G?=
 =?us-ascii?q?SQERsKod5lCtzpu69Iy9nPlLj8KDFN89/P+cscBs7UKN+IMXY7MBrpHiLUAxUB?=
 =?us-ascii?q?TTKxKW7fgEldw7mu8Siwp4Imq56kvJMTAutYXVI8F9sUAAJuG9lUc7ltWTZxq7?=
 =?us-ascii?q?mehchAymelrBLRRcMS6p/aTPW6D/+pIzGc2+oXLyAUyK/1eNxAfrbw3FZvPxwj?=
 =?us-ascii?q?xNzH?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ApAAAfrQ5ch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUwUBAQsBAYEvgiwECxQTh0EDhS6LMIINFIkMjjGBJANMEgEBGBMBhECDLSI?=
 =?us-ascii?q?2Bw0BAwEBAQEBAQIBEwEBAQgNCQgpIwxCAQ4BgWQkAYJhAQEBAQIBAQIPFRMGA?=
 =?us-ascii?q?QE3AQUJAQEBAQgOCgkVEAMMIyUCBA4FBR2Cf4FqAwgFCAECAps1Ai6JWAEBAYF?=
 =?us-ascii?q?qM4J2AQEFhHwYggkIjCEXgX+BEYMShEojFIM1giaLK4pLiwEJikOHAQsYgVyFF?=
 =?us-ascii?q?4pKmQkCAgICBAUCDQEBBYFNA4IETSMVgyeCGwwXEoM4ilNygQUBASGDQ4VnASW?=
 =?us-ascii?q?CJwEB?=
X-IPAS-Result: =?us-ascii?q?A0ApAAAfrQ5ch0O0hNFkHAEBAQQBAQcEAQGBUwUBAQsBAYE?=
 =?us-ascii?q?vgiwECxQTh0EDhS6LMIINFIkMjjGBJANMEgEBGBMBhECDLSI2Bw0BAwEBAQEBA?=
 =?us-ascii?q?QIBEwEBAQgNCQgpIwxCAQ4BgWQkAYJhAQEBAQIBAQIPFRMGAQE3AQUJAQEBAQg?=
 =?us-ascii?q?OCgkVEAMMIyUCBA4FBR2Cf4FqAwgFCAECAps1Ai6JWAEBAYFqM4J2AQEFhHwYg?=
 =?us-ascii?q?gkIjCEXgX+BEYMShEojFIM1giaLK4pLiwEJikOHAQsYgVyFF4pKmQkCAgICBAU?=
 =?us-ascii?q?CDQEBBYFNA4IETSMVgyeCGwwXEoM4ilNygQUBASGDQ4VnASWCJwEB?=
X-IronPort-AV: E=Sophos;i="5.56,339,1539673200"; 
   d="scan'208";a="55296603"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 10 Dec 2018 10:19:44 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728689AbeLJSTl (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 10 Dec 2018 13:19:41 -0500
Received: from mx0a-00082601.pphosted.com ([67.231.145.42]:38854 "EHLO
        mx0a-00082601.pphosted.com" rhost-flags-OK-OK-OK-OK)
        by vger.kernel.org with ESMTP id S1726699AbeLJSTk (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 10 Dec 2018 13:19:40 -0500
Received: from pps.filterd (m0044008.ppops.net [127.0.0.1])
        by mx0a-00082601.pphosted.com (8.16.0.27/8.16.0.27) with SMTP id wBAIFFkW031084;
        Mon, 10 Dec 2018 10:19:17 -0800
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=fb.com; h=from : to : cc : subject
 : date : message-id : references : in-reply-to : content-type : content-id
 : content-transfer-encoding : mime-version; s=facebook;
 bh=hw5DPuZuonFZdqTqMxagMmy4kKcGYCfImM6xlrSnWA8=;
 b=RlDsUd+AIg0sk8PhMFKOCVQ3PHhDRCA55UD/HxGMAv7fP+/0Btzw62F4qhnRdhgiThkM
 pWx64KsdK4Zh8kv1VuHbNjzWlgTDZ8XXP2V2Ug4J4oIdoyxrTSti1mQDuVeOoAuG0acy
 r3TiZ1Eg0hhLIT/ffBqyJpURnxjB377zjT0= 
Received: from maileast.thefacebook.com ([199.201.65.23])
        by mx0a-00082601.pphosted.com with ESMTP id 2p9v1w0bkp-4
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-SHA384 bits=256 verify=NOT);
        Mon, 10 Dec 2018 10:19:17 -0800
Received: from frc-mbx01.TheFacebook.com (2620:10d:c0a1:f82::25) by
 frc-hub05.TheFacebook.com (2620:10d:c021:18::175) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384) id
 15.1.1531.3; Mon, 10 Dec 2018 10:19:00 -0800
Received: from frc-hub01.TheFacebook.com (2620:10d:c021:18::171) by
 frc-mbx01.TheFacebook.com (2620:10d:c0a1:f82::25) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384) id
 15.1.1531.3; Mon, 10 Dec 2018 10:19:00 -0800
Received: from NAM05-DM3-obe.outbound.protection.outlook.com (192.168.183.28)
 by o365-in.thefacebook.com (192.168.177.71) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384) id 15.1.1531.3
 via Frontend Transport; Mon, 10 Dec 2018 10:19:00 -0800
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=fb.onmicrosoft.com;
 s=selector1-fb-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=hw5DPuZuonFZdqTqMxagMmy4kKcGYCfImM6xlrSnWA8=;
 b=ZLNudDqN4EPwyKkBsLlpJitG1N0G7RQ4srykAhFM14gUM0C2egWpUhXOx5Nx4fUFiAwl2zhl954I03JNn0NOr8Y0luknKbbi3YA3AtE4eqEGskgZrp48zLR9wK4GoYPHwUarHXDYwcr2z2kRqNn7QUz6Ik4Xw4SxA1bXO697Tog=
Received: from BYAPR15MB2631.namprd15.prod.outlook.com (20.179.156.24) by
 BYAPR15MB2549.namprd15.prod.outlook.com (20.179.155.18) with Microsoft SMTP
 Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1404.19; Mon, 10 Dec 2018 18:18:58 +0000
Received: from BYAPR15MB2631.namprd15.prod.outlook.com
 ([fe80::990:c2e0:2a8a:25c5]) by BYAPR15MB2631.namprd15.prod.outlook.com
 ([fe80::990:c2e0:2a8a:25c5%3]) with mapi id 15.20.1404.026; Mon, 10 Dec 2018
 18:18:58 +0000
From: Roman Gushchin <guro@fb.com>
To: Martin Lau <kafai@fb.com>
CC: Roman Gushchin <guroan@gmail.com>,
        "netdev@vger.kernel.org" <netdev@vger.kernel.org>,
        Kernel Team <Kernel-team@fb.com>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        "Alexei Starovoitov" <ast@kernel.org>,
        Daniel Borkmann <daniel@iogearbox.net>
Subject: Re: [PATCH bpf-next 2/3] bpf: add bpffs pretty print for cgroup local
 storage maps
Thread-Topic: [PATCH bpf-next 2/3] bpf: add bpffs pretty print for cgroup
 local storage maps
Thread-Index: AQHUjpCFRX6wnHEMq0K3+QCygntWjaV1p60AgAKkzwA=
Date: Mon, 10 Dec 2018 18:18:58 +0000
Message-ID: <20181210181852.GA28954@tower.DHCP.thefacebook.com>
References: <20181208005315.3500-1-guro@fb.com>
 <20181208005315.3500-2-guro@fb.com>
 <20181209015627.tkyspsafhwl3ak5b@kafai-mbp.dhcp.thefacebook.com>
In-Reply-To: <20181209015627.tkyspsafhwl3ak5b@kafai-mbp.dhcp.thefacebook.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-clientproxiedby: MWHPR04CA0058.namprd04.prod.outlook.com
 (2603:10b6:300:6c::20) To BYAPR15MB2631.namprd15.prod.outlook.com
 (2603:10b6:a03:152::24)
x-ms-exchange-messagesentrepresentingtype: 1
x-originating-ip: [2620:10d:c090:200::6:9244]
x-ms-publictraffictype: Email
x-microsoft-exchange-diagnostics: 1;BYAPR15MB2549;20:s9s8Bbb4OxSc5Fl4IIRkkHmM08YQvkfOVT8G9zTrP3ZNBg7lbnFoOq8AbTZ3WOCp1mkJ4oXrEmId81a4QWVEo8XkOzb/2XSW/1ljQsUumMvYNVGrpASh8wCR2FZXpK5Zfkmx3/FGkfRPRQ7vqo3sIhuCGzCOQX4vXgIKpe3XuU0=
x-ms-office365-filtering-correlation-id: a8ddaa89-0d92-4599-6640-08d65ecbf3b7
x-microsoft-antispam: BCL:0;PCL:0;RULEID:(2390098)(7020095)(4652040)(8989299)(5600074)(711020)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(2017052603328)(7153060)(7193020);SRVR:BYAPR15MB2549;
x-ms-traffictypediagnostic: BYAPR15MB2549:
x-microsoft-antispam-prvs: <BYAPR15MB254998A9B615A376B69AB523BEA50@BYAPR15MB2549.namprd15.prod.outlook.com>
x-ms-exchange-senderadcheck: 1
x-exchange-antispam-report-cfa-test: BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(8121501046)(5005006)(823302103)(93006095)(93001095)(3002001)(10201501046)(3231455)(999002)(11241501185)(944501520)(52105112)(148016)(149066)(150057)(6041310)(20161123560045)(20161123562045)(20161123564045)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123558120)(201708071742011)(7699051)(76991095);SRVR:BYAPR15MB2549;BCL:0;PCL:0;RULEID:;SRVR:BYAPR15MB2549;
x-forefront-prvs: 08828D20BC
x-forefront-antispam-report: SFV:NSPM;SFS:(10019020)(346002)(396003)(39860400002)(376002)(366004)(136003)(199004)(189003)(71200400001)(9686003)(6512007)(386003)(5660300001)(97736004)(71190400001)(14454004)(102836004)(106356001)(446003)(6506007)(105586002)(2906002)(186003)(8676002)(486006)(99286004)(478600001)(46003)(6436002)(52116002)(7736002)(33896004)(6636002)(53936002)(316002)(6486002)(76176011)(476003)(305945005)(11346002)(25786009)(81166006)(81156014)(256004)(14444005)(6862004)(8936002)(1076002)(86362001)(229853002)(6116002)(33656002)(4326008)(6246003)(68736007)(54906003)(39060400002)(42262002);DIR:OUT;SFP:1102;SCL:1;SRVR:BYAPR15MB2549;H:BYAPR15MB2631.namprd15.prod.outlook.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;A:1;MX:1;
x-microsoft-antispam-message-info: iisSv0sO5VXTJPqEHaq3hSYGS12TMPHTskS5ykvaseyjcsyabd9TFgczgdBKMYu8cnQk48wbb6uDfo5cNnvxXdv86ywAUQWG1otaZkooOzDKf6N/qQOwQrlMzm1QTgZwpX04tLijekyYugsStMxlcTTCAFRMB3R0hDrsvQ1fLFywOX1D6rQyDD+kWEbQVTICBn6TWJZbbm05AcO9clQQmfKCiQfBJyx3GyLZeyYNkmEKr4EmJT+2VGuaQLS1Pp2udbpLNrTkGLFrZOwjb4/H37C0xdb7367xeyHkXTDvkmiTjF8YxKTDdgpqXLQm5FqK
spamdiagnosticoutput: 1:99
spamdiagnosticmetadata: NSPM
Content-Type: text/plain; charset="us-ascii"
Content-ID: <425FAA4079CE3942B4070CDDF991A41A@namprd15.prod.outlook.com>
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
X-MS-Exchange-CrossTenant-Network-Message-Id: a8ddaa89-0d92-4599-6640-08d65ecbf3b7
X-MS-Exchange-CrossTenant-originalarrivaltime: 10 Dec 2018 18:18:58.2930
 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: 8ae927fe-1255-47a7-a2af-5f3a069daaa2
X-MS-Exchange-Transport-CrossTenantHeadersStamped: BYAPR15MB2549
X-OriginatorOrg: fb.com
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10434:,, definitions=2018-12-10_06:,,
 signatures=0
X-Proofpoint-Spam-Reason: safe
X-FB-Internal: Safe
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Sat, Dec 08, 2018 at 05:56:30PM -0800, Martin Lau wrote:
> On Fri, Dec 07, 2018 at 04:53:14PM -0800, Roman Gushchin wrote:
> > Implement bpffs pretty printing for cgroup local storage maps
> > (both shared and per-cpu).
> > Output example (captured for tools/testing/selftests/bpf/netcnt_prog.c)=
:
> >=20
> > Shared:
> >   $ cat /sys/fs/bpf/map_2
> >   # WARNING!! The output is for debug purpose only
> >   # WARNING!! The output format will change
> >   {4294968594,1}: {9999,1039896}
> >=20
> > Per-cpu:
> >   $ cat /sys/fs/bpf/map_1
> >   # WARNING!! The output is for debug purpose only
> >   # WARNING!! The output format will change
> >   {4294968594,1}: {
> >   	cpu0: {0,0,0,0,0}
> >   	cpu1: {0,0,0,0,0}
> >   	cpu2: {1,104,0,0,0}
> >   	cpu3: {0,0,0,0,0}
> >   }
> >=20
> > Signed-off-by: Roman Gushchin <guro@fb.com>
> > Cc: Alexei Starovoitov <ast@kernel.org>
> > Cc: Daniel Borkmann <daniel@iogearbox.net>
> > ---
> >  include/linux/btf.h        | 10 +++++
> >  kernel/bpf/local_storage.c | 90 +++++++++++++++++++++++++++++++++++++-
> >  2 files changed, 99 insertions(+), 1 deletion(-)
> >=20
> > diff --git a/include/linux/btf.h b/include/linux/btf.h
> > index 8c2199b5d250..ac67bc4cbfd9 100644
> > --- a/include/linux/btf.h
> > +++ b/include/linux/btf.h
> > @@ -5,6 +5,7 @@
> >  #define _LINUX_BTF_H 1
> > =20
> >  #include <linux/types.h>
> > +#include <uapi/linux/btf.h>
> > =20
> >  struct btf;
> >  struct btf_type;
> > @@ -63,4 +64,13 @@ static inline const char *btf_name_by_offset(const s=
truct btf *btf,
> >  }
> >  #endif
> > =20
> > +static inline const struct btf_type *btf_orig_type(const struct btf *b=
tf,
> > +						   const struct btf_type *t)
> > +{
> > +	while (t && BTF_INFO_KIND(t->info) =3D=3D BTF_KIND_TYPEDEF)
> > +		t =3D btf_type_by_id(btf, t->type);
> Only typedef is allowed?  Not even const?
> If that is not the case, can btf_type_id_size() be reused?
> The "type following" has already been done once and then remembered
> in the verification time.
>=20
> If cgroup_storage_check_btf() can only allow typedef, please
> move "btf_orig_type()" to the local_storage.c.
>=20
> > +
> > +	return t;
> > +}
> > +
> >  #endif
> > diff --git a/kernel/bpf/local_storage.c b/kernel/bpf/local_storage.c
> > index b65017dead44..7b51fe1aba3c 100644
> > --- a/kernel/bpf/local_storage.c
> > +++ b/kernel/bpf/local_storage.c
> > @@ -1,11 +1,13 @@
> >  //SPDX-License-Identifier: GPL-2.0
> >  #include <linux/bpf-cgroup.h>
> >  #include <linux/bpf.h>
> > +#include <linux/btf.h>
> >  #include <linux/bug.h>
> >  #include <linux/filter.h>
> >  #include <linux/mm.h>
> >  #include <linux/rbtree.h>
> >  #include <linux/slab.h>
> > +#include <uapi/linux/btf.h>
> > =20
> >  DEFINE_PER_CPU(struct bpf_cgroup_storage*, bpf_cgroup_storage[MAX_BPF_=
CGROUP_STORAGE_TYPE]);
> > =20
> > @@ -308,6 +310,91 @@ static int cgroup_storage_delete_elem(struct bpf_m=
ap *map, void *key)
> >  	return -EINVAL;
> >  }
> > =20
> > +static int cgroup_storage_check_btf(const struct bpf_map *map,
> > +				    const struct btf *btf,
> > +				    const struct btf_type *key_type,
> Actually, in "map_check_btf()" (just before cgroup_storage_check_btf()
> is called), btf_type_id_size() has already been called
> to get the true size and the resolved type (i.e. BTF_INFO_KIND_STRUCT her=
e)
> in order to reject "key_size !=3D map->key_size".  Hence, the key_type
> passed to cgroup_storage_check_btf() here will not be KIND_TYPEDEF or
> KIND_CONST.

So, the type here is a structure, and its fields are typedefs of ints.
Looks like reusing btf_type_id_size() is the best approach.

>=20
> > +				    const struct btf_type *value_type)
> > +{
> > +	const struct btf_type *st, *t;
> > +	struct btf_member *m;
> > +
> > +	/* Key is expected to be of struct bpf_cgroup_storage_key type,
> > +	 * which is:
> > +	 * struct bpf_cgroup_storage_key {
> > +	 *	__u64	cgroup_inode_id;
> > +	 *	__u32	attach_type;
> > +	 * };
> > +	 */
> > +
> > +	/*
> > +	 * Key_type must be a structure (or a typedef of a structure) with
> > +	 * two members.
> > +	 */
> > +	st =3D btf_orig_type(btf, key_type);
> > +	if (BTF_INFO_KIND(st->info) !=3D BTF_KIND_STRUCT ||
> > +	    BTF_INFO_VLEN(st->info) !=3D 2)
> > +		return -EINVAL;
> > +
> > +	/*
> > +	 * The first field must be a 64 bit integer at 0 offset.
> > +	 */
> > +	m =3D (struct btf_member *)(st + 1);
> > +	t =3D btf_orig_type(btf, btf_type_by_id(btf, m->type));
> > +	if (!t || BTF_INFO_KIND(t->info) !=3D BTF_KIND_INT || m->offset ||
> > +	    t->size !=3D
> > +	    FIELD_SIZEOF(struct bpf_cgroup_storage_key, cgroup_inode_id))
> Instead of t->size,
> BTF_INT_BITS() and BTF_INT_OFFSET() need to be checked (please refer to t=
he
> key_type check in array_map_check_btf()).

Gotcha.

>=20
> I think exposing "btf_type_int_is_regular()" from btf.c will be easier he=
re.
> Actually, add "btf_type_is_reg_int(t, expected_size)" to btf.h and btf.c,
> like (uncompiled and untested code):

>=20
> /*
>  * Not a bit field and it must be the expected size.
>  */
> bool btf_type_is_reg_int(const struct btf_type *t, u32 expected_size)
> {
>  	u8 nr_bits, nr_bytes;
>         u32 int_data;
>=20
> 	if (!btf_type_is_int(t))
> 		return false;
>=20
> 	int_data =3D btf_type_int(t);
> 	nr_bits =3D BTF_INT_BITS(int_data);
> 	nr_bytes =3D BITS_ROUNDUP_BYTES(nr_bits);
> 	if (BITS_PER_BYTE_MASKED(nr_bits) ||
> 	    BTF_INT_OFFSET(int_data) ||
> 	    nr_bytes !=3D expected_size)
>                 return false;
>=20
> 	return true;
> }

Looks good to me. Will implement in v2.

Thanks!
