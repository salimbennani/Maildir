Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 08:57:08 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id C90FA5807A2;
	Wed, 12 Dec 2018 15:55:06 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga003-1.jf.intel.com with ESMTP; 12 Dec 2018 15:55:06 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ANSrcLRKzuATqn85XstmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgULf7zrarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZXshfSTFPDI2/?=
 =?us-ascii?q?YYUIDeUBM+lXoYbmp1sWrxazHhWgCeD1xzNUnHL6wbE23uI8Gg/GxgwgGNcOvW?=
 =?us-ascii?q?zbotXvNacdTf2+wbXOzTXDaPNW3Sv945XPfx8/u/GMXK5/fNHLxkkpFwPFiVGQ?=
 =?us-ascii?q?qZD/MzOTyOsNr3GW4ux9Xuysk24qsx99riSry8s2l4XEiJwZxkrZ+Sh63Io5P9?=
 =?us-ascii?q?y1RUxjbdOkDJdcrT+WOoR3T884XW1ltik3xqcbtZKneCUHzoksyQTFZPydaYeI?=
 =?us-ascii?q?5wruVOaPLjd8g3JoYKy/hxms/ki60OH8Vde70ExMriVbltnArHcN1wbc6sSfS/?=
 =?us-ascii?q?t9+Fmu2SqX2gzN9u1JJVo4mbfVJpI/2LI8i5kevVjZEiL3mkj6lKqWeV8l+uis?=
 =?us-ascii?q?5eTneLLmppqEOo9wiwH+NLkum8OmDeQ7LAcORW6b9vq41LH6+k34TrNKgeMskq?=
 =?us-ascii?q?TCrpDaKtoUprSjDw9WzIkj8RC/ACmi0NgCmnkHNl1FdAqdj4f1I1HOPOz4DfCn?=
 =?us-ascii?q?jlSokTdrxO7JMqfuA5XQNXXDlLbhfbBg609T0gYzzNZf545KBbEFOv78RkjxtN?=
 =?us-ascii?q?nABB8jLwO02/rnCMl61o4GWWKAGK6ZML/Ivl+P/O4vI/SMa5UTuDbyMPUl4//u?=
 =?us-ascii?q?jXkkmV4SZ6Wp3J0XaGymEfRiOUmWfX3sgtIZG2cQogU+VPDqiEGFUTNLZXayWL?=
 =?us-ascii?q?wz6is4CIKhC4fDQIetjaeF3Ce6GJ1We29HBkqNEXfua4WLRfMMZDiOLc9mlzwO?=
 =?us-ascii?q?TaKhRJM51RGyqA/6zKJqIfDP+i0YspLj18J55/fJmhEw7jF0C8Wd02eQT2B7hG?=
 =?us-ascii?q?8IRjk23Lxhrkx50FuMza94g/lAH9xJ+/xJShs6NYLbz+FiCND9QATBcs2NSFan?=
 =?us-ascii?q?WNqmBz4xQ8k1w98PZUZ9BtqjggrC3yqsH78aibiLCIYo/aLb2nj7P9x9xGre1K?=
 =?us-ascii?q?k9k1kmRdNCOnC8ia5h6QffHY7JnF+fl6axa6sc2inB9GOAzWqLuEFVSwpwUaTD?=
 =?us-ascii?q?XXACaUrat9X55kXeT7CwDbQrKBdOycmHKqFScN3mkU1GROv/ONTZe2++hn2/BQ?=
 =?us-ascii?q?iWyb+WbIrlYWMd3D7DB0gCiA0T+XeGNQ4jBiauuW7eDTpuFU7xbEPo6+VxtHS7?=
 =?us-ascii?q?TkosxQGQc0Jhz6a1+gIShfGEV/MT37cEuCA9qzV0HFexxc7WB8CHpwp7eKVcYN?=
 =?us-ascii?q?U94Fhc2GLdtgx9OIGgLq94il4fdQR3o13h1xFtBopclsgqqWsgzBBuJqKAzFNB?=
 =?us-ascii?q?azSY0IjqNb3TNGbz8w6gaq7M1l7FzdaZ570A6PI7q1XkogGkDU4i83Rh09lI3H?=
 =?us-ascii?q?qQ/JTKDAwOUZ3vVkY77QR1p7bfYiMl/YPbyWVsMbWosj/Fw98oBPYlxgy8cNtF?=
 =?us-ascii?q?MaKEFBX9E8sVB8W1LOwqml6pbg8LPexI9a40Od+meOWC2KKxIOlgmzemh3xd4I?=
 =?us-ascii?q?9hykKM6zZ8SunQ0pYfwvGXwhGIVy3hg1emqMz3n55LZSsTHmam1SfrHopRabBs?=
 =?us-ascii?q?coYRDmeuJda6xtF/h57rRn5Z+0SvB1IA2M+1ZxWSa0bx0hFX1UQSuXangze3zy?=
 =?us-ascii?q?RokzE1qaqSxCzPw+X4eBsHIGJLX3RijVH3LIiwjtAaWlWobgczmBuk40b627ZU?=
 =?us-ascii?q?pKBlI2bPRkdIejD8L3t+XauoqrqCf8lP5YsqsSpNSuS8YlOaSrnnrxsBySzjHG?=
 =?us-ascii?q?hexDE9dz60vJX0hBh6iGObLHZuo3vVY8BwxRHD5NPCQf5dxCYJRC59iTPPHFiz?=
 =?us-ascii?q?I8Gp/cmIl5fEqu2/V3iuVppJfSnpzIOAsjC25WlrAR25gvCylcfrEQk80S/nyd?=
 =?us-ascii?q?ZqUT/Eowr7Yonuz666K/5oflF0BF/g7Mp3AoJ+nZExhJ0K2Xgam4+a/XwIkWro?=
 =?us-ascii?q?NdVb2KT+bGcCRDIRwt7V5hTl11NnLn6T2435UXCdyNN7Z9amemMWxj4978dSBa?=
 =?us-ascii?q?eR7bxEnjF6rkC2rA3Pevh9gikSyeE153EEmeEJtxEgziGcArAUAElZMjbglxWO?=
 =?us-ascii?q?79CisqpXYHyjfqS31Ep7hdqhFq2NohlAWHblfZcvBTNw7sJ6MF7W0Xz88IfkeM?=
 =?us-ascii?q?TLbdIItx2ZiBPAj+lTKJIsmfsGnytnOWThvXI7z+43lwBh3Za/vIKfMWVi4Lq5?=
 =?us-ascii?q?AgJENj3yf84c4SvijaFansaLxYyvGohhFy4PXJvpS/KoDT0Tue7mNwaIDD0ztH?=
 =?us-ascii?q?ObFaDDEg+Y7Udst2jPHIyzN3GLOHkZys1vRBuHK0xang8URy82noIjGgCp2czh?=
 =?us-ascii?q?c1p55jYL6V7jsRZMzuNoNx/iUmbQvguoazE0SISBIxpS9A1N+0DVMcmG5OJpAy?=
 =?us-ascii?q?5Y5oGhrBCKKmGDZwVICnwJWlWZB1/5OLmi/8LA8++eBuqxNPbOZbSOqepDV/aH?=
 =?us-ascii?q?356v041m/yqSOcWLJHVtE/o72k9bV3BjB8vZgykPSzAQly/Vb86Uuha8+i50rs?=
 =?us-ascii?q?C+6vjrWxjv5YyAC7RMK9Vv5gu2jLyHN+6RgiZ5NDlZ2okNxX/O1LgQwloShzty?=
 =?us-ascii?q?eDmqFLQKrTTNQ77Imq9LEx4bbDt+O9FV760nxAlCJ87ahsnx1r55lfM1D1ZFVV?=
 =?us-ascii?q?r8msCmf8AKIme9NE/ZC0aPLriJOTrLw8Tva6OmVbJQlPlUtwG3uTuDD0/jPzGD?=
 =?us-ascii?q?myP1WBy1Le5MjD+UPBpFtYG5cxZtD3XjTd38Zh26Nt93kSM5wbkuinzWMm4cNC?=
 =?us-ascii?q?B2c1lRob2I8SNYnvJ/FnRB73V/K+mEnieZ7+/AJZcXsftkGCJ0l+1B7XQ+yrtV?=
 =?us-ascii?q?6jxERfNvlCvTqN5uv0+pku2VxjV7VxpOr2UDuIXek0FlI6TQ8NFuUHfC8RYJ7C?=
 =?us-ascii?q?3EBVIErtpjB9nruohfz9HOkOT4LzIUt5rQ/M0BF43LId6MMHYmPjL3FzPOSggI?=
 =?us-ascii?q?VzimMSfYnUMZ2P2f6Hyeo4Qgp5XEhpUDUPlYWUYzG/dcDV5qWJQtPZpxQj4+2Y?=
 =?us-ascii?q?ScgcULrS66rR/MVO1AuZ3MVbePGrPpJSrPyfF7Zh5A/7r+Zb8ePJf81kdhIg1l?=
 =?us-ascii?q?nYHiH0vWQMAIvSR9ZQ84p0oL92JxGCl7/0/oIiGq5nIIXaqwkxNwiAx4bP8F8D?=
 =?us-ascii?q?bq6k0wYF3Qq3102HItlNvsh3iueT7rIaH4CZpKBiT9sQ4uO5PhTgBdbFepkApv?=
 =?us-ascii?q?MzKSA/p0hqFjPVp2lAvVv5cHTftVV64CegIMwfiRa90hy1EaoSKikwsP3+zPQb?=
 =?us-ascii?q?tvjhErd5Hk+2hH0QIgYMIdJqHKIqdNiF9KifTdkDWv07Uc2g4Vb28L8GSWZGZc?=
 =?us-ascii?q?tVYJPZEvISqv+vAq7wGezWgQMFMQXuYn96o5vng2PP6Nmme5i+ZO?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AUAAB9nxFch0O0hNFkHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGDayeMFV+LM4Ihlz8UgV8sEwGHPiI0CQ0BAwEBAQEBAQIBEwEBAQgNCQg?=
 =?us-ascii?q?pL4I2JAGCYgMDAQIkCwFGBgkBARg4AykrBgESBYMcggIFp3UzhAIBhiiHfYQ/F?=
 =?us-ascii?q?4F/gRGHdwWFcgKPRX6QSQmCJ48lCxhgkGaJKZE8IIIOMxoIJgqDJ4InF41mAVc?=
 =?us-ascii?q?eAQExgQQBAQGMawEB?=
X-IPAS-Result: =?us-ascii?q?A0AUAAB9nxFch0O0hNFkHQEBBQEHBQGBUQgBCwGDayeMFV+?=
 =?us-ascii?q?LM4Ihlz8UgV8sEwGHPiI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpL4I2JAGCYgMDA?=
 =?us-ascii?q?QIkCwFGBgkBARg4AykrBgESBYMcggIFp3UzhAIBhiiHfYQ/F4F/gRGHdwWFcgK?=
 =?us-ascii?q?PRX6QSQmCJ48lCxhgkGaJKZE8IIIOMxoIJgqDJ4InF41mAVceAQExgQQBAQGMa?=
 =?us-ascii?q?wEB?=
X-IronPort-AV: E=Sophos;i="5.56,346,1539673200"; 
   d="scan'208";a="43841688"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 12 Dec 2018 15:55:00 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728530AbeLLXv5 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 12 Dec 2018 18:51:57 -0500
Received: from anholt.net ([50.246.234.109]:59094 "EHLO anholt.net"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1728460AbeLLXvz (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 12 Dec 2018 18:51:55 -0500
Received: from localhost (localhost [127.0.0.1])
        by anholt.net (Postfix) with ESMTP id E119310A1D98;
        Wed, 12 Dec 2018 15:51:54 -0800 (PST)
X-Virus-Scanned: Debian amavisd-new at anholt.net
Received: from anholt.net ([127.0.0.1])
        by localhost (kingsolver.anholt.net [127.0.0.1]) (amavisd-new, port 10024)
        with LMTP id u3_SVJ6UX-ya; Wed, 12 Dec 2018 15:51:51 -0800 (PST)
Received: from eliezer.anholt.net (localhost [127.0.0.1])
        by anholt.net (Postfix) with ESMTP id 3C1A210A0372;
        Wed, 12 Dec 2018 15:51:51 -0800 (PST)
Received: by eliezer.anholt.net (Postfix, from userid 1000)
        id 320C02FE36EE; Wed, 12 Dec 2018 15:51:50 -0800 (PST)
From: Eric Anholt <eric@anholt.net>
To: Florian Fainelli <f.fainelli@gmail.com>,
        linux-watchdog@vger.kernel.org, devicetree@vger.kernel.org,
        Guenter Roeck <linux@roeck-us.net>,
        Wim Van Sebroeck <wim@linux-watchdog.org>,
        Lee Jones <lee.jones@linaro.org>,
        Stefan Wahren <stefan.wahren@i2se.com>,
        Mark Rutland <mark.rutland@arm.com>,
        Rob Herring <robh+dt@kernel.org>
Cc: linux-rpi-kernel@lists.infradead.org,
        linux-arm-kernel@lists.infradead.org, linux-kernel@vger.kernel.org,
        bcm-kernel-feedback-list@broadcom.com,
        Eric Anholt <eric@anholt.net>
Subject: [PATCH v4 2/5] bcm2835-pm: Move bcm2835-watchdog's DT probe to an MFD.
Date: Wed, 12 Dec 2018 15:51:47 -0800
Message-Id: <20181212235150.6491-3-eric@anholt.net>
X-Mailer: git-send-email 2.20.0.rc1
In-Reply-To: <20181212235150.6491-1-eric@anholt.net>
References: <20181212235150.6491-1-eric@anholt.net>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The PM block that the wdt driver was binding to actually has multiple
features we want to expose (power domains, reset, watchdog).  Move the
DT attachment to a MFD driver and make WDT probe against MFD.

Signed-off-by: Eric Anholt <eric@anholt.net>
Reviewed-by: Guenter Roeck <linux@roeck-us.net>
---

v3: don't reset bcm2835_power_off_wdt on remove, drop pm driver's
    empty remove, sort includes, add a "static".
v4: no change

 arch/arm/mach-bcm/Kconfig      |  1 +
 drivers/mfd/Makefile           |  1 +
 drivers/mfd/bcm2835-pm.c       | 64 ++++++++++++++++++++++++++++++++++
 drivers/watchdog/bcm2835_wdt.c | 26 +++++---------
 include/linux/mfd/bcm2835-pm.h | 13 +++++++
 5 files changed, 88 insertions(+), 17 deletions(-)
 create mode 100644 drivers/mfd/bcm2835-pm.c
 create mode 100644 include/linux/mfd/bcm2835-pm.h

diff --git a/arch/arm/mach-bcm/Kconfig b/arch/arm/mach-bcm/Kconfig
index 25aac6ee2ab1..95242c2162a2 100644
--- a/arch/arm/mach-bcm/Kconfig
+++ b/arch/arm/mach-bcm/Kconfig
@@ -167,6 +167,7 @@ config ARCH_BCM2835
 	select BCM2835_TIMER
 	select PINCTRL
 	select PINCTRL_BCM2835
+	select MFD_CORE
 	help
 	  This enables support for the Broadcom BCM2835 and BCM2836 SoCs.
 	  This SoC is used in the Raspberry Pi and Roku 2 devices.
diff --git a/drivers/mfd/Makefile b/drivers/mfd/Makefile
index 12980a4ad460..ee6fb6af655e 100644
--- a/drivers/mfd/Makefile
+++ b/drivers/mfd/Makefile
@@ -10,6 +10,7 @@ obj-$(CONFIG_MFD_88PM805)	+= 88pm805.o 88pm80x.o
 obj-$(CONFIG_MFD_ACT8945A)	+= act8945a.o
 obj-$(CONFIG_MFD_SM501)		+= sm501.o
 obj-$(CONFIG_MFD_ASIC3)		+= asic3.o tmio_core.o
+obj-$(CONFIG_ARCH_BCM2835)	+= bcm2835-pm.o
 obj-$(CONFIG_MFD_BCM590XX)	+= bcm590xx.o
 obj-$(CONFIG_MFD_BD9571MWV)	+= bd9571mwv.o
 cros_ec_core-objs		:= cros_ec.o
diff --git a/drivers/mfd/bcm2835-pm.c b/drivers/mfd/bcm2835-pm.c
new file mode 100644
index 000000000000..53839e6a81e7
--- /dev/null
+++ b/drivers/mfd/bcm2835-pm.c
@@ -0,0 +1,64 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * PM MFD driver for Broadcom BCM2835
+ *
+ * This driver binds to the PM block and creates the MFD device for
+ * the WDT driver.
+ */
+
+#include <linux/delay.h>
+#include <linux/io.h>
+#include <linux/mfd/bcm2835-pm.h>
+#include <linux/mfd/core.h>
+#include <linux/module.h>
+#include <linux/of_address.h>
+#include <linux/of_platform.h>
+#include <linux/platform_device.h>
+#include <linux/types.h>
+#include <linux/watchdog.h>
+
+static const struct mfd_cell bcm2835_pm_devs[] = {
+	{ .name = "bcm2835-wdt" },
+};
+
+static int bcm2835_pm_probe(struct platform_device *pdev)
+{
+	struct resource *res;
+	struct device *dev = &pdev->dev;
+	struct bcm2835_pm *pm;
+
+	pm = devm_kzalloc(dev, sizeof(*pm), GFP_KERNEL);
+	if (!pm)
+		return -ENOMEM;
+	platform_set_drvdata(pdev, pm);
+
+	pm->dev = dev;
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	pm->base = devm_ioremap_resource(dev, res);
+	if (IS_ERR(pm->base))
+		return PTR_ERR(pm->base);
+
+	return devm_mfd_add_devices(dev, -1,
+				    bcm2835_pm_devs, ARRAY_SIZE(bcm2835_pm_devs),
+				    NULL, 0, NULL);
+}
+
+static const struct of_device_id bcm2835_pm_of_match[] = {
+	{ .compatible = "brcm,bcm2835-pm-wdt", },
+	{},
+};
+MODULE_DEVICE_TABLE(of, bcm2835_pm_of_match);
+
+static struct platform_driver bcm2835_pm_driver = {
+	.probe		= bcm2835_pm_probe,
+	.driver = {
+		.name =	"bcm2835-pm",
+		.of_match_table = bcm2835_pm_of_match,
+	},
+};
+module_platform_driver(bcm2835_pm_driver);
+
+MODULE_AUTHOR("Eric Anholt <eric@anholt.net>");
+MODULE_DESCRIPTION("Driver for Broadcom BCM2835 PM MFD");
+MODULE_LICENSE("GPL");
diff --git a/drivers/watchdog/bcm2835_wdt.c b/drivers/watchdog/bcm2835_wdt.c
index ed05514cc2dc..1834524ae373 100644
--- a/drivers/watchdog/bcm2835_wdt.c
+++ b/drivers/watchdog/bcm2835_wdt.c
@@ -12,6 +12,7 @@
 
 #include <linux/delay.h>
 #include <linux/types.h>
+#include <linux/mfd/bcm2835-pm.h>
 #include <linux/module.h>
 #include <linux/io.h>
 #include <linux/watchdog.h>
@@ -47,6 +48,8 @@ struct bcm2835_wdt {
 	spinlock_t		lock;
 };
 
+static struct bcm2835_wdt *bcm2835_power_off_wdt;
+
 static unsigned int heartbeat;
 static bool nowayout = WATCHDOG_NOWAYOUT;
 
@@ -148,10 +151,7 @@ static struct watchdog_device bcm2835_wdt_wdd = {
  */
 static void bcm2835_power_off(void)
 {
-	struct device_node *np =
-		of_find_compatible_node(NULL, NULL, "brcm,bcm2835-pm-wdt");
-	struct platform_device *pdev = of_find_device_by_node(np);
-	struct bcm2835_wdt *wdt = platform_get_drvdata(pdev);
+	struct bcm2835_wdt *wdt = bcm2835_power_off_wdt;
 	u32 val;
 
 	/*
@@ -169,7 +169,7 @@ static void bcm2835_power_off(void)
 
 static int bcm2835_wdt_probe(struct platform_device *pdev)
 {
-	struct resource *res;
+	struct bcm2835_pm *pm = dev_get_drvdata(pdev->dev.parent);
 	struct device *dev = &pdev->dev;
 	struct bcm2835_wdt *wdt;
 	int err;
@@ -181,10 +181,7 @@ static int bcm2835_wdt_probe(struct platform_device *pdev)
 
 	spin_lock_init(&wdt->lock);
 
-	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-	wdt->base = devm_ioremap_resource(dev, res);
-	if (IS_ERR(wdt->base))
-		return PTR_ERR(wdt->base);
+	wdt->base = pm->base;
 
 	watchdog_set_drvdata(&bcm2835_wdt_wdd, wdt);
 	watchdog_init_timeout(&bcm2835_wdt_wdd, heartbeat, dev);
@@ -211,8 +208,10 @@ static int bcm2835_wdt_probe(struct platform_device *pdev)
 		return err;
 	}
 
-	if (pm_power_off == NULL)
+	if (pm_power_off == NULL) {
 		pm_power_off = bcm2835_power_off;
+		bcm2835_power_off_wdt = wdt;
+	}
 
 	dev_info(dev, "Broadcom BCM2835 watchdog timer");
 	return 0;
@@ -226,18 +225,11 @@ static int bcm2835_wdt_remove(struct platform_device *pdev)
 	return 0;
 }
 
-static const struct of_device_id bcm2835_wdt_of_match[] = {
-	{ .compatible = "brcm,bcm2835-pm-wdt", },
-	{},
-};
-MODULE_DEVICE_TABLE(of, bcm2835_wdt_of_match);
-
 static struct platform_driver bcm2835_wdt_driver = {
 	.probe		= bcm2835_wdt_probe,
 	.remove		= bcm2835_wdt_remove,
 	.driver = {
 		.name =		"bcm2835-wdt",
-		.of_match_table = bcm2835_wdt_of_match,
 	},
 };
 module_platform_driver(bcm2835_wdt_driver);
diff --git a/include/linux/mfd/bcm2835-pm.h b/include/linux/mfd/bcm2835-pm.h
new file mode 100644
index 000000000000..b7d0ee1feffa
--- /dev/null
+++ b/include/linux/mfd/bcm2835-pm.h
@@ -0,0 +1,13 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+
+#ifndef BCM2835_MFD_PM_H
+#define BCM2835_MFD_PM_H
+
+#include <linux/regmap.h>
+
+struct bcm2835_pm {
+	struct device *dev;
+	void __iomem *base;
+};
+
+#endif /* BCM2835_MFD_PM_H */
-- 
2.20.0.rc1

