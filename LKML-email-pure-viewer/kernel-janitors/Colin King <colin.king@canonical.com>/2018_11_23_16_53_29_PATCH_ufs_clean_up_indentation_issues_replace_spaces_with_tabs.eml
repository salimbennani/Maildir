Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 24 Nov 2018 12:36:10 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 14ABC580460;
	Fri, 23 Nov 2018 08:53:37 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga006-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 23 Nov 2018 08:53:36 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A1wfOnxbcMCL52cUdPotP2kH/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpci8Zh7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyxPDJ2h?=
 =?us-ascii?q?YYUBDOQPOulXoJXyqVsVtRuzBxKhBP/sxzJSmnP7x7E23uYnHArb3AIgBdUOsH?=
 =?us-ascii?q?HModjrM6cSVeG1zK/VxjvGbvNW3zj945XPfx89pvGMWbNwcczLxUksFgPFiFqQ?=
 =?us-ascii?q?pJf5MDyP0OQNtG6b7+t8Wu21j24rsR1+oj+qxso1jITCm4Ebykjc+Cln3Io4Ic?=
 =?us-ascii?q?e0RFN1bNK6CpdcqiKXO5dsTs4jQWxkoCI3xqActZKmfyUHzI4ryh3bZvCdboSE?=
 =?us-ascii?q?/wzvWeCMKjlinn1lYqiwhxOq/Eig1OL8Us603U5UripKjNbMrGoB1x/N5cidTP?=
 =?us-ascii?q?ty4EOh1SyI1wDJ5eFIOUE0lazFJJ492rM8iIYfvEDZEiPrlkj6krWaelgn9+S0?=
 =?us-ascii?q?8ejqY7frqoeZN4BuiwH+Nqoumta4AeQ9KgUOW2mb+eKh1Lzs5EH5Q6tFjucwkq?=
 =?us-ascii?q?bHtJDWPMMbp6C/AwBLyIYu8Ai/Dzi439QCh3UHL0xKeAiBj4f3P1HCOvf4De2w?=
 =?us-ascii?q?g1i0ijdk2+jGPqH9ApXKNnXDlLbhfbVj5EJGxwsz0MtS55ZVCrEHPfLyVVX9tN?=
 =?us-ascii?q?3eDh8lLQO0x/zrB8l61oMbQWiPGLOWMLvOsV+U4eIiO+mMa5UUuDbhMfcl4OTi?=
 =?us-ascii?q?jX8kmVAHe6mp0oAaaHS5HvRgPkWYbmDggtYHEWcWoAU+SPbmh0GFUT5Wf3yyRb?=
 =?us-ascii?q?4z5iknCIK6CofOXoKtgLuf0yuhHZ1WYWZGClaLEXrzc4WEWvEMaD+dI8N7kzwE?=
 =?us-ascii?q?U6ShRJEl1R20qAD6zL9nJPLO+iIErZLjyMR15+rLmB4o7jx0D8Od02KXQ2FuhG?=
 =?us-ascii?q?wIRSQ73KR+oUx711eC3rJ0g/1eFdxP+fxJVh02OoLbz+x/E9ryQB7Ofs+VSFa6?=
 =?us-ascii?q?RdWrGTIxQcg3w9MUZ0Z9Gs+tjhbM3yexB78VlrqLBIE7867G3njxIdp9xGjC1K?=
 =?us-ascii?q?U7k1YmRc5PP3W8hqFj7wjTG5LJk0KBmqm3b6scwjDC+H2DzWWUukFYSxB/UaPC?=
 =?us-ascii?q?UXAbZUvWqND561jGT7+vD7QnLwRAxdSDKqtMdt3mk1FGSO3/N9TZZmK7g32wCg?=
 =?us-ascii?q?qQxrOQcIrqfH0Q0zjHB0gajQ8f53aGOhI4Bie6vW3eCidjFVbuY0Pq7Ol/p2m3?=
 =?us-ascii?q?Tk4yzwGWcUJh06C59QIShfyZU/kTxK4LuD89qzVoG1awx87WC9uFpwpmYKVcYd?=
 =?us-ascii?q?M87E1b1W7DsAx9JJigL6Fkhl4RaAl3u0Lu1xNqCoRPi8QqrXUqzBZsJqKcyl9O?=
 =?us-ascii?q?azSY3ZXoML3NNmby5Ayva7LR2lzGytmW/rkA6fsmpFTjpg2mDVci/Gh93NlT0H?=
 =?us-ascii?q?uc4YvKAREWUZLwVEY36hd7q6vbYik7+4Pby3lsPbOovT/F3tIjHPElxQq4f9dD?=
 =?us-ascii?q?LKOEExf/Es0HB8S0NOMmgVmobhIeM+BU+645JMemd/qA2K62M+dshjOmjWJb4I?=
 =?us-ascii?q?9j1kKA7TZzSunN35wd2fGXwhOHVyvgjFemqs33g4FEai0IEWql1CfkA5RdZqts?=
 =?us-ascii?q?coYRCGeiOtG4yc96h5HwRXFY7lmjB1Ud1c+teBqSaUH93AJK2UQWp3ynhTW3zz?=
 =?us-ascii?q?hunz41qaqf2TTEw/7+exofJm5LWG5igE/sIIi1ldwbXFKkbxM0lBuj/kv6w6lb?=
 =?us-ascii?q?pKJiL2jcW0tIfi72L318Xau0rLaNf8lP6JYwuyVNTOu8eUyaSqL6oxYC0SPsBX?=
 =?us-ascii?q?FexDM4dzGtoJn5hAZ1iGGeLHZyqnrWZ8dwyAzb5NzdQ/5RwzUHSDN5iTnRGliz?=
 =?us-ascii?q?Id2p8c+ImJfEt+C0T3ihWYFLcSn30YOAszO25G1wDh24hfyzmNznEQ4h3C//1t?=
 =?us-ascii?q?lqUzjIrRnmbonq0aS6Lfxofk1yCFDg7Mp6H5l0kpEsi5EIxXgampKV8GIEkWjp?=
 =?us-ascii?q?MNVXw6L+bGcXSj4NzN7Y+wzl2ExlLnKUyIP1THSdws19Z9akZmMawD4y78dPCK?=
 =?us-ascii?q?2M9rxLgTN1okakrQLWefV9mzYdyfg053IAjeAGphEtzjmDDbAIBkZXIzbslxuT?=
 =?us-ascii?q?4tC6raVXYnuvcLeq2Ep/m9ChEK+NogVGVHnlfZciGDd67t9jP1LUzH3z9obkdc?=
 =?us-ascii?q?HMbdIUsx2YiRbBgPJTKJIsjfoKnitnNHn5vX0kze47kBNv0Yu7vIiBN2Vi4qa5?=
 =?us-ascii?q?DgREOT3yYsMZ4ivtgrpGnsaKw4CvGY1sFS4RU5vvSfKoDSgetfD6NwuVFD08q3?=
 =?us-ascii?q?GbGafQHAOF6UdmqW7PHI6vN32NOHYZytBiTgGHJENDmAAUQCk6npkhGwCo3sPh?=
 =?us-ascii?q?dVl25isL6l7ksBdMyf9oNxriUmfZvgiocSw5SJyeLBpQ8wFD6F3ZMc2Y7uJvAS?=
 =?us-ascii?q?5Y+oetoxCKKmyefw5IF30GWlSYB1D/Obmj/dnB8++FBuqnMvvBe7OOpfZFV/eP?=
 =?us-ascii?q?w5Kv3ZBr/zKNNsWJI3ljAOc32ktFXXBlBcvZny8DRDAQlyLId8Sbvguz+jVrrs?=
 =?us-ascii?q?Cj9/TmQALv6pWOC7tRMtVv+gq6gaSZN+6XiyZ2NyxY1o4XxXLTzLgf3VgSizxh?=
 =?us-ascii?q?djW3ELQAszLNQ7zUmqNNExEbbCZzPtNS760gxglNJdLbitTt27Fik/46EE1FWk?=
 =?us-ascii?q?Lhm82zYcwKInqwNFfGBEaNKbSHKifHw8DxYaOgV7JQiP9YuAG3uTaeC0XjJCiM?=
 =?us-ascii?q?lyH1VxCzNuFBlD2bPB1buI2nbhlhE3TsTNL4ZR29K9J3iTw2wbsphnLFL2IcMD?=
 =?us-ascii?q?58c19Tob2U9y9XnvJ/G2lZ5Hp/MeaEgzqZ7/XfKpsOsfpkGCJ0l+db4HQ807RU?=
 =?us-ascii?q?7SFES+ZzmCvdtdNup1Cmku+SyjtoShZOqzBLhJ6VskVmI6nW6p5AWXOXtC4KuE?=
 =?us-ascii?q?iOBBkMpsotJsD0u6FL1t/R3Pb/NSxC8snI+tU0AsHVLISdLSxyHwDuHWv/Cw8E?=
 =?us-ascii?q?S3aINGfQzxhWl/WT8DuWr541gpPlnp0IS7RSUBo+EfZMWRctJ8ALPJoiBmBsqr?=
 =?us-ascii?q?WclsNdoCPm9BQ=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A1AADBL/hbh0O0hNFjHgEGBwaBUwcLA?=
 =?us-ascii?q?YNrJ4N5iHeLIYIhgy6TeYFxFhgTAYhaIjYHDQEDAQEBAQEBAgETAQEBCA0JCCk?=
 =?us-ascii?q?vgjYkAYJpAiAECwFGBgkCHwUCJgICA0QWEwWDHIICBAGnEHwzhUCEWoELhlOEK?=
 =?us-ascii?q?4FXP4wlglcCiSOWXwcCghwEjwQjkQcBmDCBTQKCBDMaI4M8gicXjhw/ATKBBQE?=
 =?us-ascii?q?BjCEBAQ?=
X-IPAS-Result: =?us-ascii?q?A0A1AADBL/hbh0O0hNFjHgEGBwaBUwcLAYNrJ4N5iHeLIYI?=
 =?us-ascii?q?hgy6TeYFxFhgTAYhaIjYHDQEDAQEBAQEBAgETAQEBCA0JCCkvgjYkAYJpAiAEC?=
 =?us-ascii?q?wFGBgkCHwUCJgICA0QWEwWDHIICBAGnEHwzhUCEWoELhlOEK4FXP4wlglcCiSO?=
 =?us-ascii?q?WXwcCghwEjwQjkQcBmDCBTQKCBDMaI4M8gicXjhw/ATKBBQEBjCEBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,270,1539673200"; 
   d="scan'208";a="53477239"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 23 Nov 2018 08:53:34 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2633061AbeKXDic (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 23 Nov 2018 22:38:32 -0500
Received: from youngberry.canonical.com ([91.189.89.112]:49696 "EHLO
        youngberry.canonical.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1729195AbeKXDic (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 23 Nov 2018 22:38:32 -0500
Received: from 1.general.cking.uk.vpn ([10.172.193.212] helo=localhost)
        by youngberry.canonical.com with esmtpsa (TLS1.0:RSA_AES_256_CBC_SHA1:32)
        (Exim 4.76)
        (envelope-from <colin.king@canonical.com>)
        id 1gQEht-0001Vl-SY; Fri, 23 Nov 2018 16:53:29 +0000
From: Colin King <colin.king@canonical.com>
To: Evgeniy Dushistov <dushistov@mail.ru>
Cc: kernel-janitors@vger.kernel.org, linux-kernel@vger.kernel.org
Subject: [PATCH] ufs: clean up indentation issues, replace spaces with tabs
Date: Fri, 23 Nov 2018 16:53:29 +0000
Message-Id: <20181123165329.24323-1-colin.king@canonical.com>
X-Mailer: git-send-email 2.19.1
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From: Colin Ian King <colin.king@canonical.com>

There is a hunk of code where spaces are used for identations, and it
off by one in an editor. Clean this up by replacing them with tabs.
Also remove one blank line.

Signed-off-by: Colin Ian King <colin.king@canonical.com>
---
 fs/ufs/inode.c | 87 +++++++++++++++++++++++++-------------------------
 1 file changed, 43 insertions(+), 44 deletions(-)

diff --git a/fs/ufs/inode.c b/fs/ufs/inode.c
index c843ec858cf7..c4fb99eddff4 100644
--- a/fs/ufs/inode.c
+++ b/fs/ufs/inode.c
@@ -1066,52 +1066,51 @@ static int ufs_alloc_lastblock(struct inode *inode, loff_t size)
 
 	lastpage = ufs_get_locked_page(mapping, lastfrag >>
 				       (PAGE_SHIFT - inode->i_blkbits));
-       if (IS_ERR(lastpage)) {
-               err = -EIO;
-               goto out;
-       }
-
-       end = lastfrag & ((1 << (PAGE_SHIFT - inode->i_blkbits)) - 1);
-       bh = page_buffers(lastpage);
-       for (i = 0; i < end; ++i)
-               bh = bh->b_this_page;
-
-
-       err = ufs_getfrag_block(inode, lastfrag, bh, 1);
-
-       if (unlikely(err))
-	       goto out_unlock;
-
-       if (buffer_new(bh)) {
-	       clear_buffer_new(bh);
-	       clean_bdev_bh_alias(bh);
-	       /*
-		* we do not zeroize fragment, because of
-		* if it maped to hole, it already contains zeroes
-		*/
-	       set_buffer_uptodate(bh);
-	       mark_buffer_dirty(bh);
-	       set_page_dirty(lastpage);
-       }
-
-       if (lastfrag >= UFS_IND_FRAGMENT) {
-	       end = uspi->s_fpb - ufs_fragnum(lastfrag) - 1;
-	       phys64 = bh->b_blocknr + 1;
-	       for (i = 0; i < end; ++i) {
-		       bh = sb_getblk(sb, i + phys64);
-		       lock_buffer(bh);
-		       memset(bh->b_data, 0, sb->s_blocksize);
-		       set_buffer_uptodate(bh);
-		       mark_buffer_dirty(bh);
-		       unlock_buffer(bh);
-		       sync_dirty_buffer(bh);
-		       brelse(bh);
-	       }
-       }
+	if (IS_ERR(lastpage)) {
+		err = -EIO;
+		goto out;
+	}
+
+	end = lastfrag & ((1 << (PAGE_SHIFT - inode->i_blkbits)) - 1);
+	bh = page_buffers(lastpage);
+	for (i = 0; i < end; ++i)
+		bh = bh->b_this_page;
+
+	err = ufs_getfrag_block(inode, lastfrag, bh, 1);
+
+	if (unlikely(err))
+		goto out_unlock;
+
+	if (buffer_new(bh)) {
+		clear_buffer_new(bh);
+		clean_bdev_bh_alias(bh);
+		/*
+		 * we do not zeroize fragment, because of
+		 * if it maped to hole, it already contains zeroes
+		 */
+		set_buffer_uptodate(bh);
+		mark_buffer_dirty(bh);
+		set_page_dirty(lastpage);
+	}
+
+	if (lastfrag >= UFS_IND_FRAGMENT) {
+		end = uspi->s_fpb - ufs_fragnum(lastfrag) - 1;
+		phys64 = bh->b_blocknr + 1;
+		for (i = 0; i < end; ++i) {
+			bh = sb_getblk(sb, i + phys64);
+			lock_buffer(bh);
+			memset(bh->b_data, 0, sb->s_blocksize);
+			set_buffer_uptodate(bh);
+			mark_buffer_dirty(bh);
+			unlock_buffer(bh);
+			sync_dirty_buffer(bh);
+			brelse(bh);
+		}
+	}
 out_unlock:
-       ufs_put_locked_page(lastpage);
+	ufs_put_locked_page(lastpage);
 out:
-       return err;
+	return err;
 }
 
 static void ufs_truncate_blocks(struct inode *inode)
-- 
2.19.1

