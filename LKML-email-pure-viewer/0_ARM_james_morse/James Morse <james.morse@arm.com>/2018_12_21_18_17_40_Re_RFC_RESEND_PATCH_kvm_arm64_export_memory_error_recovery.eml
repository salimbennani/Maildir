Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:54:10 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id AF66358050C;
	Fri, 21 Dec 2018 10:17:50 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 21 Dec 2018 10:17:50 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AvkF9FBbFeAyyS65jJXDyiZz/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpc+zZx7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyxPDJ6i?=
 =?us-ascii?q?YYsBDOQPM+hXoIb/qFQSohW+HhGsCeH0xz9UhHL7x7E23/gvHAzE2gErAtIAsG?=
 =?us-ascii?q?7TrNXwLKocVfq6zKzWwjXYcvhY3jD96JLTch8/vPqBWrBwftDUyUYxDAPJlFCQ?=
 =?us-ascii?q?qYv/PzOOyOsAqHKU7/BlVe61l2EnrARxryGpy8wxiYfJnpoYxk7Y+Sh92oo5ON?=
 =?us-ascii?q?O1RFBhbdK5E5ZcqzuWOop0T886XW1kpSQ3xqcbtZO0YCQG0okrywLCZ/CdcYWE?=
 =?us-ascii?q?/hTuX/uLLzhinnJqYre/ig6y8Ue+zu38UdG50EhFriVbiNnArHMN2ALJ6siBVP?=
 =?us-ascii?q?R9+l2t2TGV1wDc8u1EIEY0mrTHK5M53LI8ip4evV7eEiL4hkn6lrKae0Y49uSy?=
 =?us-ascii?q?6unqYK3qppqGOI91jgH+PL4umsu6AekgNggOXm6b+fmz1bH6/k32Xq9Kjvsona?=
 =?us-ascii?q?ndqZzaIsoapqinDA9PyYsj9Rm/ACm80NgCnnkIMkhFeBSZgIjtIV3OJ+r4Dfin?=
 =?us-ascii?q?j1S2jDhr3+zGPqHmApjVKnjDkbThcqhn509T1Qo+1tRf55NSCrEcL/P/QE7xtN?=
 =?us-ascii?q?rEDhAnNwy42froCNJ41okGQ2KAHreZML/OsV+P/u8vI/ODZI4JuDnnLPgp/f7u?=
 =?us-ascii?q?jWIjll8bcqmkxp8XaHG+HvR7LESVe3vsgtEdEWgUugoyVvDliFqHUTRLfXa9Q7?=
 =?us-ascii?q?o85i0nCIKhFYrMXJutgLyG3Ce4BJFWfHpJClKXHHfsdoWEXeoMaS2ILs9glDwE?=
 =?us-ascii?q?SaauS4s72R6ysw/6zqJtLvDI9S0AqZLjyN916vXQlR4o8zx4FcCd02CXQGFykW?=
 =?us-ascii?q?MFXDs23KF5oUxgxVaPy6l4g/pEFdNN4/NFSBs1NZnZz+ZiEdD9RhrBfsuVSFah?=
 =?us-ascii?q?WtipHCs+TswvzNMUY0ZyAdOijgvd0CqsBLMVk7+LBJkw8q/H23jxJsB9y2vJ1a?=
 =?us-ascii?q?U7jlkmRNdPOnOihqJl6wfTAIvJmV2Dl6m2baQcwDLN9GCbwGWTpk5YThB/Xb/F?=
 =?us-ascii?q?XX8FYEvWtsr25kXZQr+qCLQnNBZByMGYJqtLbN3pkUtJRPP5NNvCZGKxnn+6BQ?=
 =?us-ascii?q?yUybOUcIrqZ2Id0T3BCEgFlgAT+mqGNQg+Byu7v2LSFjtuFUjrY0Pt9+l+p2i2?=
 =?us-ascii?q?Tks1zwGMck1g2KC5+h8ThfyAVfwT2qgItzsmqzVxBFy9xc7ZC8Kcpwp9e6VRec?=
 =?us-ascii?q?ky4FNZ2mPWqQN8PoasILt/hlEDaQt3uUDu1xJpCohblcgqrXUqzBd9KK6C0VNB?=
 =?us-ascii?q?cS+Y0o70OrHNNmby+xWvYbbM2l7CyNaW5rsP6PMgplTjoQGlDFYt/29m0tlVyX?=
 =?us-ascii?q?Sc4JrKAREWUZLwVEY36hd7q6vbYik7+4Pby3lsPbOovT/F3tIjHPElxQq4f9dD?=
 =?us-ascii?q?LKOEExf/E9cbB8eyMuMqgUWmbhUeMOBU6qE0JcKme+Ka16GxOOZvgSypjX5A4I?=
 =?us-ascii?q?B7yU+M8yt8SujV35cK2f2Y3w2HVyvig1elqMz4hYdEZTQKFGql1SfkHJJRZrF1?=
 =?us-ascii?q?fYsTCWauIte7x9Vki572Rn5Y8kWuB1cH2M+vZBqTYEbx3QxW1UQLv3OnnTG0wC?=
 =?us-ascii?q?BzkzEstqCfxjDBw/z+dBobPW5GXGtigk32IYi3jNAaW1KkbxMzmxum5kb6xq5b?=
 =?us-ascii?q?q7p5L2TIRUdIfi72L3xtU6eqt7qCZdJP540ssSlNTOu8ZlWaQKbnoxQGyyPjA3?=
 =?us-ascii?q?dexDcjejCqoJr5mAZ2iGCcLHZ1t3fZfcBwxRHC5N3TX/JR3zwGRDVmhjnTHFSz?=
 =?us-ascii?q?I96p/dCMnZfZru++T36hVoFUcSTzzoOPriq76XdqAR2ihf+znNLnHBM+0S/60d?=
 =?us-ascii?q?lqSCrJoAz9Yonty6S1L+ZnclN0C1/77spwApt+nZcohJEMxXgagY2Y/X8GkWfw?=
 =?us-ascii?q?K9pXw6z/Y2QWRT4X3dHV+hPq11N5LnKG3I/5UnSdws18Z9i1eG8W2yQ979xUB6?=
 =?us-ascii?q?eQ9rBLgSx1ol+gpwLLffd9hisdyecp6HMCn+EJvw8twj+cA78IG0lYIDfslw+J?=
 =?us-ascii?q?792lqKVXZWCvcaW/1UZknNChCq2CrR9YWHrjZpgiGipw5N1lMF3QyH3z9p3keN?=
 =?us-ascii?q?7IYN0IrBKUlBPAj/VPJJI1i/oHni5nOWP7vX04xO83lx1u3ZemvIeZL2Vh5r62?=
 =?us-ascii?q?AhldNjftfcMc5intjbpCnsaRx42vHI9uGjAVU5vzV/6oDCgetff6NwaNDT08rG?=
 =?us-ascii?q?2UGaHEEA+b6UdmqW/PEp+xO3GWInkZ0cttRB2HKENDhwAUWS0wnoQlGQCy2Mzh?=
 =?us-ascii?q?bEB56ygR517/txtM0/9oOAP5UmvFvweobTE0SJeEIRpS7wFC4VrVMMOE4uJyGS?=
 =?us-ascii?q?FY4oOurAiXJmOHYARICHkDWlaYCFD7Irmu+d7A/vCYBuWgLvvOYraOqe1EW/eL?=
 =?us-ascii?q?35Kv1YRm8CiWNsWSJXlvFPk72ktFXXBkFMXVgTQPSyoLly3Ta86Xvguz+ipyrs?=
 =?us-ascii?q?qn6vTkRBrv5ZeTC7tVKdhg4Q22jryZN+GOhCd1MzJY1pIXyH/Mybgf2kMSii50?=
 =?us-ascii?q?ezmsF7QAqTDCTKbKlqBLCB4bbjt5NNFU4KIkwglNJcnbh8vp1r55i/45EUtKWU?=
 =?us-ascii?q?b9lcGpe8MKJXqwNFfGBEaNKbSHKifHw8DxYaOgV7JQiP9YuAG3uTaeC0XjJCiM?=
 =?us-ascii?q?lyH1VxCzNuFBlCGaMwZYuIG4cxZtD3DsTdPmahKhNt93giY7wbk1hnPMKG4dPi?=
 =?us-ascii?q?Jwc0JLrr2M8yxYhu9zFHBG7npgfqG4nHOh4vXVMN4zuOpnDyBw37ZC7Wg30f1Q?=
 =?us-ascii?q?5TBISfhxsC/TqNd0pBehiObZmRR9Vx8biD9OiZnDmEJ4IqiRoptJXHvfuhcK93?=
 =?us-ascii?q?6dIx0Qop1uDdi56PMY8cTGiK+mcGQKyNnT58ZJQpGMcM8=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AFAAD6LR1ch0O0hNFjGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUwMBAQEBCwGDayeDfZV2LRSXS4FzLRMBhzAiNgcNAQMBAQEBAQE?=
 =?us-ascii?q?CARMBAQEIDQkIKS+COikBgmYBAQEBAgEBAiAETQUFAQkBAQoYAgImAgIDVAYNB?=
 =?us-ascii?q?gIBAQGDHYF6CAQBpiR8M4ovgQuLNIFXP4ERJ4JriAmCVwKJOQ4ygUqEZpEcBwK?=
 =?us-ascii?q?CJQSILocMHooLh1SbaQiBfzMaI4M8gicXEo4LPwEBMYEFAQGOLgEB?=
X-IPAS-Result: =?us-ascii?q?A0AFAAD6LR1ch0O0hNFjGgEBAQEBAgEBAQEHAgEBAQGBUwM?=
 =?us-ascii?q?BAQEBCwGDayeDfZV2LRSXS4FzLRMBhzAiNgcNAQMBAQEBAQECARMBAQEIDQkIK?=
 =?us-ascii?q?S+COikBgmYBAQEBAgEBAiAETQUFAQkBAQoYAgImAgIDVAYNBgIBAQGDHYF6CAQ?=
 =?us-ascii?q?BpiR8M4ovgQuLNIFXP4ERJ4JriAmCVwKJOQ4ygUqEZpEcBwKCJQSILocMHooLh?=
 =?us-ascii?q?1SbaQiBfzMaI4M8gicXEo4LPwEBMYEFAQGOLgEB?=
X-IronPort-AV: E=Sophos;i="5.56,382,1539673200"; 
   d="scan'208";a="45991186"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 21 Dec 2018 10:17:47 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2388670AbeLUSRo (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Fri, 21 Dec 2018 13:17:44 -0500
Received: from usa-sjc-mx-foss1.foss.arm.com ([217.140.101.70]:56310 "EHLO
        foss.arm.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1731660AbeLUSRo (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 21 Dec 2018 13:17:44 -0500
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.72.51.249])
        by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id 7B23EEBD;
        Fri, 21 Dec 2018 10:17:43 -0800 (PST)
Received: from [10.1.196.105] (eglon.cambridge.arm.com [10.1.196.105])
        by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPSA id 87D223F575;
        Fri, 21 Dec 2018 10:17:41 -0800 (PST)
From: James Morse <james.morse@arm.com>
Subject: Re: [RFC RESEND PATCH] kvm: arm64: export memory error recovery
 capability to user space
To: Peter Maydell <peter.maydell@linaro.org>
Cc: gengdongjiu <gengdongjiu@huawei.com>,
        =?UTF-8?B?UmFkaW0gS3LEjW3DocWZ?= <rkrcmar@redhat.com>,
        Jonathan Corbet <corbet@lwn.net>,
        Christoffer Dall <christoffer.dall@arm.com>,
        Marc Zyngier <marc.zyngier@arm.com>,
        Catalin Marinas <catalin.marinas@arm.com>,
        Will Deacon <will.deacon@arm.com>,
        kvm-devel <kvm@vger.kernel.org>,
        "open list:DOCUMENTATION" <linux-doc@vger.kernel.org>,
        lkml - Kernel Mailing List <linux-kernel@vger.kernel.org>,
        arm-mail-list <linux-arm-kernel@lists.infradead.org>
References: <0184EA26B2509940AA629AE1405DD7F201FFC21E@dggema523-mbx.china.huawei.com>
 <c01e3ed0-f66c-f7df-295a-70b44bad49ff@arm.com>
 <CAFEAcA8No4tti6o9oErdfGKyHqRTfXebO4fuEOhBApFAxw=LOg@mail.gmail.com>
Message-ID: <1d73ec5a-b58d-1e00-b681-53cd80cba999@arm.com>
Date: Fri, 21 Dec 2018 18:17:40 +0000
User-Agent: Mozilla/5.0 (X11; Linux aarch64; rv:60.0) Gecko/20100101
 Thunderbird/60.3.1
MIME-Version: 1.0
In-Reply-To: <CAFEAcA8No4tti6o9oErdfGKyHqRTfXebO4fuEOhBApFAxw=LOg@mail.gmail.com>
Content-Type: text/plain; charset=utf-8
Content-Language: en-GB
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi Peter,

On 19/12/2018 19:02, Peter Maydell wrote:
> On Mon, 17 Dec 2018 at 15:56, James Morse <james.morse@arm.com> wrote:
>> I don't think this really matters. Its only the NMIlike notifications that the
>> guest doesn't have to register or poll. The ones we support today extend the
>> architectures existing behaviour: you would have taken an external-abort on a
>> real system, whether you know about the additional metadata doesn't matter to Qemu.
> 
> Consider the case where we booted the guest using a DTB and no ACPI
> table at all -- we certainly can't just call QEMU code that tries to
> add entries to a nonexistent table.

Sure, because you know which of the two sets of firmware-table you're providing.

I'm taking the behaviour of physical machines as the template for what we should
do here. I can boot a DT-only kernel on Seattle. Firmware has no idea I did
this, it will still take DRAM uncorrected-error IRQs in firmware, and generate
CPER records in the POLLed areas. But the kernel will never look, because it
booted with DT.
What happens if the kernel goes on to access the corrupt location? It either
gets corrupt values back, or an external abort, depending on the design of the
memory-controller.

X-gene uses an IRQ for its firmware-first notification. Booted with DT that
interrupt can be asserted, but as the OS has didn't know to register it, its
never taken. We eventually get the same corrupt-values/external-abort behaviour.

KVM/Linux is acting as the memory controller using stage2. When an error is
detected by the host it unmaps the page from stage2, and refuses to map it again
until its fixed up in Qemu's memory map (which can happen automatically). If the
kernel can't fix it itself, the AO signal is like the DRAM-IRQ above, and the AR
like the external abort.
We don't have a parallel to the 'gets corrupt values back' behaviour as Linux
will always unmap hwpoison pages from user-space/guests.

If the host-kernel wasn't build with CONFIG_MEMORY_FAILURE, its like the memory
controller doesn't support any of the above. I think knowing this is the closest
to what you want.


> My main point is that there
> needs to be logic in Dongjiu's QEMU patches that checks more than
> just "does this KVM feature exist". I'm not sufficiently familiar
> with all this RAS stuff to be certain what those checks should
> be and what the right choices are; I just know we need to check
> *something*...

I think this is the crux of where we don't see this the same way.
The v8.2 RAS stuff is new, RAS support on arm64 is not. Kernel support arrived
at roughly the same time, but not CPU support. There are v8.0 systems that
support RAS. There are DT systems that can do the same with edac drivers.
The physical v8.0 systems that do this, are doing it without any extra CPU support.

I think x86's behaviour here includes some history, which we don't have.
From the order of the HEST entries, it looks like the machine-check stuff came
first, then firmware-first using a 'GHES' entry in that table.
I think Qemu on x86 only supports the emulated machine check stuff, so it needs
to check KVM has the widget to do this.
If Qemu on x86 supported firmware-first, I don't think there would be anything
to check. (details below)


>>> Let us see the X86's QEMU logic:
>>> 1. Before the vCPU created, it will set a default env->mcg_cap value with
>>
>>> MCE_CAP_DEF flag, MCG_SER_P means it expected the guest CPU model supports
>>> RAS error recovery.[1] 2. when the vCPU initialize, it will check whether host
>>> kernel support this feature[2]. Only when host kernel and default env->mcg_cap
>>> value all expected this feature, then it will setup vCPU support RAS error
>>> recovery[3].
>>
>> This looks like KVM exposing a CPU capability to Qemu, which then configures the
>> behaviour KVM gives to the guest. This doesn't tell you anything about what the
>> guest supports.
> 
> It tells you what the *guest CPU* supports, which for x86 is a combination
> of (a) what did the user/machine model ask for and (b) what can KVM
> actually implement. I don't much care whether the guest OS supports
> anything or not, that's its business... but it does seem odd to me
> that the equivalent Arm code is not similarly saying "what were we
> asked for, and what can we do?".

The flow is something like:
For AO, generate CPER records, and notify the OS via NOTIFY_POLL (which isn't
really a notification) or some flavour of IRQ.
To do this, Qemu needs to be able to write to its reserved area of guest memory,
and possibly trigger an interrupt.

For AR, generate CPER records and notify the OS via external abort. (the
presence of the CPER records makes this NOTIFY_SEA or NOTIFY_SEI).
To do this, Qemu again needs to be able to write to guest memory, set guest
registers (KVM_SET_ONE_REG()). If it wants to inject an
SError-Interrupt/Asynchronous-external-abort while the guest has it masked, it
needs KVM_SET_VCPU_EVENTS().

Nothing here depends on the CPU or kernel configuration. This is all ACPI stuff,
so its the same on x86. (The only difference is external-abort becomes NMI,
which is probably done through SET_VCPU_EVENTS())

What were we asked for? Qemu wants to know if it can write to guest memory,
guest registers (for synchronous external abort) and trigger interrupts. It has
always been able to do these things.


> I think one question here which it would be good to answer is:
> if we are modelling a guest and we haven't specifically provided
> it an ACPI table to tell it about memory errors, what do we do
> when we get a sigbus from the host? We have basically two choices:
>  (1) send the guest an SError (aka asynchronous external abort)
>      anyway (with no further info about what the memory error is)

For an AR signal an external abort is valid. Its up to the implementation
whether these are synchronous or asynchronous. Qemu can only take a signal for
something that was synchronous, so you can choose between the two.
Synchronous external abort is marginally better as an unaware OS knows its
affects this thread, and may be able to kill it.
SError with an imp-def ESR is indistinguishable from 'part of the soc fell out',
and should always result in a panic().


>  (2) just stop QEMU (as we would for a memory error in QEMU's
>      own memory)

This is also valid. A machine may take external-abort to EL3 and then
reboot/crash/burn.


Just in case this is the deeper issue: I keep picking on memory-errors, what
about CPU errors?
Linux can't handle these at all, unless they are also memory errors. If we take
an imprecise abort from a guest KVM can't tell Qemu using signals. We don't have
any mechanism to tell user-space about imprecise exceptions. In this case KVM
throws an imp-def SError back at the affected vcpu, these are allowed to be
imprecise, as this is the closest thing we have.

This does mean that any AO/AR signal Qemu gets is a memory error.


Happy New Year,

James
