Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  20 Dec 2018 19:13:07 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id BCB39580261;
	Thu, 20 Dec 2018 00:37:06 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 20 Dec 2018 00:37:05 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A6Hj8qB3l755G9Gt7smDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segSKv/xwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJOUcZfVSNPAo2y?=
 =?us-ascii?q?YYgSAeQfIelWoJL9p0MMoBalGQmsHfnixiNUinPq36A31fkqHwHc3AwnGtIDqH?=
 =?us-ascii?q?rao8/zNKwPUe+1za3IzTHCb/xM3Df985XDfxc8rv6WW7J8a8jRxVMhFgPEilWQ?=
 =?us-ascii?q?rY3lMCmQ1uQWqGWb7uxgVf6xhG4jsQ1+vj+vxsI1h4TPm4kbyUjE+D1nzIopId?=
 =?us-ascii?q?C0UlN3bNC6HJdKqi2XNJd6TtkjTmxqoCo21KEKtJqhcCUJyJkr3QPTZv2GfoSS?=
 =?us-ascii?q?/x7uUOicLDFlj3x/Yr2/nQy98U24x+38SMa01FFKozJbktnDqH8NzQbf6suZRf?=
 =?us-ascii?q?tn+EeuxzKP2xrU6uFeLkA4javbK5g/zb4sjpcfr1jPEyvslEnrgqKaaF8o9vWr?=
 =?us-ascii?q?5uj7eLnrp52RO5dxig7kM6QunsK/Af4/MggLR2Wb/eW81Lv+/Uz2WblKjeM5kr?=
 =?us-ascii?q?PfsJ/EIcQXv6m5AgFT0ok98RayFCmm0NsGknkdNl5FewyIj5LvO17QJPD0F/C/?=
 =?us-ascii?q?g06jkDtz3fDJIqXhAonRLnjEiLrhebd9601CxwYpwtFf+olZCrUAIPL1R0/wu8?=
 =?us-ascii?q?bUDh4/Mwyo3ennDM9x2Z8ZWWKKGqWZKr/dsUeU5uIzJOmBfI8Vtyz8K/g5/fHu?=
 =?us-ascii?q?imU1mV8Afaaz25sXZ2u1HvBnI0WffHrtjc0NEWYMvgoiUuPqjEeOXiJUZ3a3R6?=
 =?us-ascii?q?g8/C00CJq6DYffQYCgmKaO3Dy7Hp1RZWBKEEqMHm3qd4ifX/cMaSSSItJukzAe?=
 =?us-ascii?q?VLihTZMh2g+qtAPg17VnKe/U8DUCtZ3/zNh1+/HTlRYq+Dx3Fcud1XuBT2V1nm?=
 =?us-ascii?q?wSQT8207tyoUh8yleFzKh5jOZUFd1V5/NVTAg6MYTQwPB9C9D3QgjBZMuGSE66?=
 =?us-ascii?q?QtW6BjE8Vs8+zMUQY0ljAdmijgrM3yyxA7ALkbyHA5g08qHZ33j1PMt9z3fG1K?=
 =?us-ascii?q?88j1gpWMdPNGumhrJh+AjXHYLGj0KZl6Oyf6QGwCHN7HuDzXaJvExATQF/S7vF?=
 =?us-ascii?q?Um4FakvWt9v54FjCQKGoCbk8NgtByMiCKrZFa9HzjFVGQuvjN8raY26rh2iwAh?=
 =?us-ascii?q?OIzKuWbIX2Y2UdwDndCE8cngAP/HaGMA8+Bjuho2PeFjBuCUjjY0T28el6qXO7?=
 =?us-ascii?q?SEA0whqOb01g0bq15xEUieadS/MVwrILpiMhpy9oE1a62tLcE8CAqBZ5fKVAfd?=
 =?us-ascii?q?M9509K2njdtwNjMZ2vMaBjikQFfARqokzhzRN3CoZHkcg0t34qyAtyKaSF0FJO?=
 =?us-ascii?q?bT+Y3JbwOqHJJWn25hygd6nW2lTG2taM5qgP8Og4q0nkvAyxFksi7m9r3MVP33?=
 =?us-ascii?q?qd5pXFFgwSUZ3qX0Yz9hh6oazaYyYn64PV031sLbe7sjvY1901A+slzw6qf81D?=
 =?us-ascii?q?P6OcCA/yD8oaCtC0KOwrh1emdAgEM/1V9KIuOcOpaeGG2K+yMOl8hj2miXlI75?=
 =?us-ascii?q?5n0kKL8SpxUerI35cDw/GF0QqLTTb8jFG9ss/pnYBIfy0dHm26ySL8Ho5eerVy?=
 =?us-ascii?q?fZoXCWepO8C2xtR+i4TtWnJC716jGlUG1dSteRqTaVz9wAJR2V4WoXyhhSu30T?=
 =?us-ascii?q?h0nys1oaqY2SzE2/7iewYfOm5XWGliik/hIYqugNAAX0iobA8pmAG+5UngxKhb?=
 =?us-ascii?q?p6V/L2/NTkdOZCX2K2BiUq2ttruNecJP6ZUosTlJX+S4e1yVVrn9ox4C2SP5A2?=
 =?us-ascii?q?Re3Cw7dy2tupjhnx11kmWdIGxxrHrYf8F93hPf5N3aRf5M0TsKXih4iT/LBlei?=
 =?us-ascii?q?O9ml58mbl5DGsuqmTWKuSoVTcTX3zYOHrCa75ndlARylk/Czh93oCw460SDg2t?=
 =?us-ascii?q?luVCXIqgv8Y4bx26S7N+JnYldnBFvm58VmHYF+l5M6hIsM1ngCmpWV4X0HnH/2?=
 =?us-ascii?q?MdVa2qLxdmABRDAVzN7O/AjqxldjIWmXyILjWXWQ2c9hZ9i8YmML1SMx9cFKCK?=
 =?us-ascii?q?GI7LNamSt5uEa3rQXUYfJlhDcS1eMu6GIGg+EOoAct0iKdArUIEUhZJyPskQmI?=
 =?us-ascii?q?78ulrKVWf2uvdbmw1ExjndGuFr2CowdcWGrndZcmByN/8sJ/MFfU2n3p9o7kYM?=
 =?us-ascii?q?XQbc4UthCMiBjPle9VKJYslvYQgSpnJHnwvXkky+49kBxv0ou2vImBK2Vx4q25?=
 =?us-ascii?q?BgRUOSHyZ8MW4jvtl7pRnt6K34CzGZVsAjcLU4HtTf22CzIer+jnOxyNED0hqX?=
 =?us-ascii?q?ebBLzfEhWE6Ep9q3LPEparN2yYJXUDzNViQgWdK1JbgAwOQDo6mZs5HBiwxMP9?=
 =?us-ascii?q?aEd5+iwR5lngpxpMzeJoKgD/UnrFqweucDs0U5+fLBxZ7gxZ40fVMMqe7v98Hi?=
 =?us-ascii?q?1C/52hqhCNJXKfZwhSEW4JXUmEDUj5Pray/dnA7/SYBu2mIvvOf7qOqO9eV/SJ?=
 =?us-ascii?q?xZ610Ytm5TGMNsqRMXl4Ev07wVFOXXR4G8TfhjUORDYblyPLb86Huhi8/jd7od?=
 =?us-ascii?q?y48PTuQAjv/5eAC6NOMdVz/BC7mb2MN/OLiyZjNzlZ1okAxXvJyLUE2F4Siidu?=
 =?us-ascii?q?dySiELgatC7NSr7QlbFTDxIBdyxzM85I5bom3gZRIc7bls/11rlgg/4pCldFUE?=
 =?us-ascii?q?btld2zacMWI2GyKlXHCV2PNLSHIz3L3s72bbm9Sb1WkOVbqRmwtSyHHE/kOzSJ?=
 =?us-ascii?q?jyPpWAy3MeFQkCGbOwRTuYGnfRZrDGjjTdTmZQW6Md93lzI2x7I0i2jONW4dNz?=
 =?us-ascii?q?h8bkxMoqeR7SNenvVwBWhB4mB5IumDnibKp9Xff7SXq2duD2xbk+NB+3lyn7la?=
 =?us-ascii?q?6CBfX/Fdgibertdy5Vqhl7/c5CBgVU9iozADu4OPuURrPL6RopVJXzDGug0M6W?=
 =?us-ascii?q?GRAhERj9pjFtDr/atXz46cx+rIND5e/oeMroMnDM/OJZfCaSJ5PA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AmAACFUxtch0O0hNFjHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGDayeDPj+IGYt8KYFkFJdJgSQDTC0TAYRAgm0iNAkNAQMBAQEBAQECARM?=
 =?us-ascii?q?BAQEIDQkIKSMMgjYkAYJhAQEBAQIBAQIJFwQZAQE3AQQBCQEBCAILDQICJgICA?=
 =?us-ascii?q?x8SAQUBHAYTBQODGoF6CAWLcJAIPIopcHwzgnYBAQWHKAgSeYs0eoEchCOFAYM?=
 =?us-ascii?q?IMYImi0SFGZBiBwKCKY88GJFcLJlQMIElgg5NI4EBBoI1ghsMFxKDOIp0HjMBg?=
 =?us-ascii?q?QQBAY1gAQE?=
X-IPAS-Result: =?us-ascii?q?A0AmAACFUxtch0O0hNFjHQEBBQEHBQGBUQgBCwGDayeDPj+?=
 =?us-ascii?q?IGYt8KYFkFJdJgSQDTC0TAYRAgm0iNAkNAQMBAQEBAQECARMBAQEIDQkIKSMMg?=
 =?us-ascii?q?jYkAYJhAQEBAQIBAQIJFwQZAQE3AQQBCQEBCAILDQICJgICAx8SAQUBHAYTBQO?=
 =?us-ascii?q?DGoF6CAWLcJAIPIopcHwzgnYBAQWHKAgSeYs0eoEchCOFAYMIMYImi0SFGZBiB?=
 =?us-ascii?q?wKCKY88GJFcLJlQMIElgg5NI4EBBoI1ghsMFxKDOIp0HjMBgQQBAY1gAQE?=
X-IronPort-AV: E=Sophos;i="5.56,376,1539673200"; 
   d="scan'208";a="56670547"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 20 Dec 2018 00:37:04 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728249AbeLTIeB (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Thu, 20 Dec 2018 03:34:01 -0500
Received: from mail-it1-f193.google.com ([209.85.166.193]:37561 "EHLO
        mail-it1-f193.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725766AbeLTIeA (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 20 Dec 2018 03:34:00 -0500
Received: by mail-it1-f193.google.com with SMTP id b5so1663110iti.2
        for <linux-kernel@vger.kernel.org>; Thu, 20 Dec 2018 00:33:59 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=intel-com.20150623.gappssmtp.com; s=20150623;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc:content-transfer-encoding;
        bh=+9O6srsL96hdtlNdE7M+X7pd54ofOCXf1UHXy//gwiQ=;
        b=PZrvSlqt/DRr3hZ5JUAPsW8SB0uafWFccGKuw/dBvbSZY9t/46P/oFkCsIHcIRmhrj
         rQl5nodH8tgz7HRECMI1fkJZsw2X51nJjbrwf0I8tUsXX3WkVYhzVNtgS4KuDtzWfrOY
         tOGMrq5F0O0DA0fgAZm6wLmxMAXsgG+Yfn5cN+25yNKwLnwEa9PwIbcJU4vIyJW6ChTL
         XA8L4HTVADkiOZ9ciIkUcvMcFLJRohkbyR//Gs+//jOxT6OugW77EsFAPwZe02EQWuwi
         fXGnC/QfykTYLRLuh6r74pbNoft2jGezziYZpnPQ807HQ0IadQ8zpKlIslZbXjpGposF
         rHrw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc:content-transfer-encoding;
        bh=+9O6srsL96hdtlNdE7M+X7pd54ofOCXf1UHXy//gwiQ=;
        b=BfB8LKY/EI8bWVQtXiVF6Jz7e2ctb/5WbEGZifTYvUOPHNjZcPBNQOHj8RGQHb3n53
         +r3yQYFOkd/xyCJFETBt8ywPHM0rD1HyXnlV1rhhfmx2BQZOPwSnEYRiK+PFS5em1zQf
         kHWsD+3ChJby4mTlFhNILAWyp64Nm9gqhcX2NNiyHbcPZhVw12ig9E2soqqZ15FLQbmS
         D/pUJJT8gjXP+JF2QLPmy2QDjEhR9YQbTl0BcXTYxo8MaT2Kx7H9yN+B0xUwOeF9DD3B
         mrkR54Vjnz8HSUaAr2KZ1dtAEt0G0f/dmn/iS6HmUo0JQFlM87W1kU0t/dI28KDBCdjJ
         +Feg==
X-Gm-Message-State: AA+aEWbAmg8e70XceTYHaNOMfZ9jslGSBCdzThi5cy8b1lDiDye8sA8h
        R7Md5TJXtSv5s7vA/Kk1gaXlbt+KS5XK33mwdhU=
X-Google-Smtp-Source: AFSGD/XpxF8Q8uy+VhAwpjxjI7JwdKlq6sZyk+uh5cQEGHhT2Rvw8GdYX/mvw7hKaov8ztyn7UUf06WY7/NYL1KAP3E=
X-Received: by 2002:a24:4648:: with SMTP id j69mr9517683itb.56.1545294838786;
 Thu, 20 Dec 2018 00:33:58 -0800 (PST)
MIME-Version: 1.0
References: <20170817000548.32038-1-jglisse@redhat.com> <20170817000548.32038-8-jglisse@redhat.com>
In-Reply-To: <20170817000548.32038-8-jglisse@redhat.com>
From: Dan Williams <dan.j.williams@intel.com>
Date: Thu, 20 Dec 2018 00:33:47 -0800
Message-ID: <CAA9_cmeag7n4yeiP6pYZSz80KyxqfwbsXJCWvyNE4PSaxCKA3A@mail.gmail.com>
Subject: Re: [HMM-v25 07/19] mm/ZONE_DEVICE: new type of ZONE_DEVICE for
 unaddressable memory v5
To: =?UTF-8?B?SsOpcsO0bWUgR2xpc3Nl?= <jglisse@redhat.com>
Cc: Andrew Morton <akpm@linux-foundation.org>,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>,
        linux-mm <linux-mm@kvack.org>,
        John Hubbard <jhubbard@nvidia.com>,
        David Nellans <dnellans@nvidia.com>,
        Balbir Singh <bsingharora@gmail.com>,
        Ross Zwisler <ross.zwisler@linux.intel.com>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Wed, Aug 16, 2017 at 5:06 PM J=C3=A9r=C3=B4me Glisse <jglisse@redhat.com=
> wrote:
>
> HMM (heterogeneous memory management) need struct page to support migrati=
on
> from system main memory to device memory.  Reasons for HMM and migration =
to
> device memory is explained with HMM core patch.
>
> This patch deals with device memory that is un-addressable memory (ie CPU
> can not access it). Hence we do not want those struct page to be manage
> like regular memory. That is why we extend ZONE_DEVICE to support differe=
nt
> types of memory.
>
> A persistent memory type is define for existing user of ZONE_DEVICE and a
> new device un-addressable type is added for the un-addressable memory typ=
e.
> There is a clear separation between what is expected from each memory typ=
e
> and existing user of ZONE_DEVICE are un-affected by new requirement and n=
ew
> use of the un-addressable type. All specific code path are protect with
> test against the memory type.
>
> Because memory is un-addressable we use a new special swap type for when
> a page is migrated to device memory (this reduces the number of maximum
> swap file).
>
> The main two additions beside memory type to ZONE_DEVICE is two callbacks=
.
> First one, page_free() is call whenever page refcount reach 1 (which mean=
s
> the page is free as ZONE_DEVICE page never reach a refcount of 0). This
> allow device driver to manage its memory and associated struct page.
>
> The second callback page_fault() happens when there is a CPU access to
> an address that is back by a device page (which are un-addressable by the
> CPU). This callback is responsible to migrate the page back to system
> main memory. Device driver can not block migration back to system memory,
> HMM make sure that such page can not be pin into device memory.
>
> If device is in some error condition and can not migrate memory back then
> a CPU page fault to device memory should end with SIGBUS.
>
> Changed since v4:
>   - s/DEVICE_PUBLIC/DEVICE_HOST (to free DEVICE_PUBLIC for HMM-CDM)
> Changed since v3:
>   - fix comments that was still using UNADDRESSABLE as keyword
>   - kernel configuration simplification
> Changed since v2:
>   - s/DEVICE_UNADDRESSABLE/DEVICE_PRIVATE
> Changed since v1:
>   - rename to device private memory (from device unaddressable)
>
> Signed-off-by: J=C3=A9r=C3=B4me Glisse <jglisse@redhat.com>
> Acked-by: Dan Williams <dan.j.williams@intel.com>
> Cc: Ross Zwisler <ross.zwisler@linux.intel.com>
[..]
>  fs/proc/task_mmu.c       |  7 +++++
>  include/linux/ioport.h   |  1 +
>  include/linux/memremap.h | 73 ++++++++++++++++++++++++++++++++++++++++++=
++++++
>  include/linux/mm.h       | 12 ++++++++
>  include/linux/swap.h     | 24 ++++++++++++++--
>  include/linux/swapops.h  | 68 ++++++++++++++++++++++++++++++++++++++++++=
++
>  kernel/memremap.c        | 34 ++++++++++++++++++++++
>  mm/Kconfig               | 11 +++++++-
>  mm/memory.c              | 61 ++++++++++++++++++++++++++++++++++++++++
>  mm/memory_hotplug.c      | 10 +++++--
>  mm/mprotect.c            | 14 ++++++++++
>  11 files changed, 309 insertions(+), 6 deletions(-)
>
[..]
> diff --git a/include/linux/memremap.h b/include/linux/memremap.h
> index 93416196ba64..8e164ec9eed0 100644
> --- a/include/linux/memremap.h
> +++ b/include/linux/memremap.h
> @@ -4,6 +4,8 @@
>  #include <linux/ioport.h>
>  #include <linux/percpu-refcount.h>
>
> +#include <asm/pgtable.h>
> +

So it turns out, over a year later, that this include was a mistake
and makes the build fragile.

>  struct resource;
>  struct device;
>
[..]
> +typedef int (*dev_page_fault_t)(struct vm_area_struct *vma,
> +                               unsigned long addr,
> +                               const struct page *page,
> +                               unsigned int flags,
> +                               pmd_t *pmdp);

I recently included this file somewhere that did not have a pile of
other mm headers included and 0day reports:

  In file included from arch/m68k/include/asm/pgtable_mm.h:148:0,
                    from arch/m68k/include/asm/pgtable.h:5,
                    from include/linux/memremap.h:7,
                    from drivers//dax/bus.c:3:
   arch/m68k/include/asm/motorola_pgtable.h: In function 'pgd_offset':
>> arch/m68k/include/asm/motorola_pgtable.h:199:11: error: dereferencing po=
inter to incomplete type 'const struct mm_struct'
     return mm->pgd + pgd_index(address);
              ^~
I assume this pulls in the entirety of pgtable.h just to get the pmd_t
definition?

> +typedef void (*dev_page_free_t)(struct page *page, void *data);
> +
>  /**
>   * struct dev_pagemap - metadata for ZONE_DEVICE mappings
> + * @page_fault: callback when CPU fault on an unaddressable device page
> + * @page_free: free page callback when page refcount reaches 1
>   * @altmap: pre-allocated/reserved memory for vmemmap allocations
>   * @res: physical address range covered by @ref
>   * @ref: reference count that pins the devm_memremap_pages() mapping
>   * @dev: host device of the mapping for debug
> + * @data: private data pointer for page_free()
> + * @type: memory type: see MEMORY_* in memory_hotplug.h
>   */
>  struct dev_pagemap {
> +       dev_page_fault_t page_fault;

Rather than try to figure out how to forward declare pmd_t, how about
just move dev_page_fault_t out of the generic dev_pagemap and into the
HMM specific container structure? This should be straightfoward on top
of the recent refactor.
