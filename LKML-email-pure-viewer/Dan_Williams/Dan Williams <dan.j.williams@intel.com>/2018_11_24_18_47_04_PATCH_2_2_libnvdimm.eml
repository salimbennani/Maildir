Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 25 Nov 2018 14:42:33 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 4D6525803C2;
	Sat, 24 Nov 2018 10:59:55 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 24 Nov 2018 10:59:54 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AHGgHnxGxyqXduYYxrccstp1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75o8mzbnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjmk8qxlSgLniD?=
 =?us-ascii?q?0fOjAk8G/ZlMJ+gqFZrxKvqRNwzJLbbo6ONPpmfK7QZs8aSGhbU8pNSyBMGIGx?=
 =?us-ascii?q?Yo0SBOQBJ+ZYqIz9qkMAoxSkAwmnGePgyj5Mhn/y3K01yeEhERrb1wEnAt0Bqn?=
 =?us-ascii?q?LUoM/3NKsIX+G1za3IzTHCb/xM3Df985PFchEnofGQQ71wddDdxlUoFwPAl1id?=
 =?us-ascii?q?r5HuMT2S1uQIqWeb7uxgWPqgi24mtwFxoiWvydw2hobVgYIVz1bJ/jh6zoYtPd?=
 =?us-ascii?q?C0VlJ3bNq+HJdNuSyWKZF6Tt4hTm10oio3y78LtYamcCUEx5kr3QPTZvKIfoSS?=
 =?us-ascii?q?/x7uWuecLS15iX9lfr+0mgy8/lK6yuLmU8m5yFZKoTRBktnLrn0NyRPT5dadSv?=
 =?us-ascii?q?dn/UeuxyyP1wbN5eFAO0w0krDbK5E5zr4xkJocr1jDEzfolEnqiKKabFgo9+a2?=
 =?us-ascii?q?5+j9f7nrpYOQO5V1hwz8Kqgun9awAeU8MggARWib/uG82aXn/U34RrVKk/I3nr?=
 =?us-ascii?q?DasJ/EP8QboLC2AwtM3oYk5Re/CSmp0M4DkHkZI1JKZgiHg5LqO17QOvD4C+mw?=
 =?us-ascii?q?g1C2nDds3fDGMaXtAo/RIXjbjLfhYbF95lZYyAoyztBQ+YhYC74cIP/oXk/xtd?=
 =?us-ascii?q?rYDgI2MgCuwubnDsl92Z0aWW6VHqCZN6bSu0eS5u0zO+mMeJMVuDHlJvgl/fHu?=
 =?us-ascii?q?jGM5lkUafaWz3ZsXdWq3HvJpI0iCZXrsg9EBEXoFvwYkTezqjkGCXiBXZ3qoQ6?=
 =?us-ascii?q?084TQ7Apq8DYjfXoCtnKCB3CCjE51UYWBJFEqAEXTvd4WCXfcMbzmfIstgkjwC?=
 =?us-ascii?q?SLigRJUt1RCotA/m1bVnKvDY9TEftZLmzNJ1/fHclQku9TxoCMSQy3uCT3p0nm?=
 =?us-ascii?q?MPRD86xrp/rlZ/ylqY1ah4gvpYFcFc5v9TUwc6M4LcwPJ+C9zoRg3BedKJQk68?=
 =?us-ascii?q?Qtq6GTExUs4xw9gWbkZ+AdqiiArP3y6rA7APkbyLC4c58qbd33j3OsZ8xGzK1K?=
 =?us-ascii?q?gnj1k6XMRPMXeqibJ49wjWH4TJiVmWl762daQA2y7A7HqMwnCQvE5GSgJwUb/K?=
 =?us-ascii?q?XXYEZkTIq9T14UfCT7yrCbQjKQZBzc+CKq1Xatzml1lGRfHjOMjAbGK1gWu/GR?=
 =?us-ascii?q?GIxraUZorwZ2odxDndCFQDkw0L4HmJLxY+CTm7r2LeFjNuE0nvbF3q8eRlrHO7?=
 =?us-ascii?q?T0k0zxyFbkF71rq1/AIViuKYS/8Jwr0EvyIhoS1uHFmhx9LWF8aApw15caVAYN?=
 =?us-ascii?q?M95VBH1X7Ztw19JJCgM7puhlkEcwRzvkPu0Rp3B55EkcgrqnMq0QVzJbiZ0FNH?=
 =?us-ascii?q?azOXw5TwNqfLJWn1+RClc7TW1U3G0NaK5qcP7+w1pE/nvA63GUst7XVm38NO3H?=
 =?us-ascii?q?uB+5rFFgwSUZH2UkYp7BV6o7DaYi8g54Lbz3FsMK+0siPc1NItHucq1hGgf9JH?=
 =?us-ascii?q?OqOeCADyC9EaB9SpKOEym1mpcwgIM/xI+K81P8Opbf2G2KGwMeZknTKmi3lH4Y?=
 =?us-ascii?q?9n3kKN8Sp8VvDH35Ifz/6E2QuHUi/2jE29vcDvhYBEeTYSE3KlySjlGIFefLdy?=
 =?us-ascii?q?cpsMCWu0Jc242M9+h5/0V3FE7lGjA04J19GzeRqVaVzwxglQ1UURoXy6liq01T?=
 =?us-ascii?q?10kzc1rqWB2CzC2fjtdB0COmRTXmltkU/sIZSoj9AdREWpbwkpmAGl5Erg3Khb?=
 =?us-ascii?q?uaJ/InLXQUdJeSj2Mm5jXrGxtrqEf85A9pcovT9LX+S7ZFCQUqT9rAcC0yP/A2?=
 =?us-ascii?q?tewyg2dzOwtZXjnBx6i2WdIGxorHXDesFwxhbf5NrCSv5XxTcGQCh4iT/KBlmz?=
 =?us-ascii?q?JdWp/NOUl4vdveC6TW6uSppTcSzzx4OaqCS7/XFqAQG4n/2rmtzoCw863TX519?=
 =?us-ascii?q?lrUyXFtxL8Yojt16SnPuNrZEhoBFng68VkHoFyiJc/hJYV2XICnJWa4WIHkXvv?=
 =?us-ascii?q?MdVcwa/+b2ACRT8Rz97V/QjqwktjLn2SyoL9V3WdxNZhZtagbmMX3CI9895FCK?=
 =?us-ascii?q?OO4LNYmit1p0KyrRjNbvhlgjcd1fwu5WYfg+EIuwoi1D+RA74MEklDISzjiQ6I?=
 =?us-ascii?q?4Mugo6VNa2aiaryw1Et4ndC8A7COuABcWHDlepg8GS989NlwMFXJ0Hfr8IHrZM?=
 =?us-ascii?q?HQbc4Pth2TixrAk+9VKJcrmvsLnyVnP3/9vWY+y+46lhFu2ZC6vI6aK2Ri5q65?=
 =?us-ascii?q?AxhYNiHraMMX4D3ikaFensOO1YC1ApphAikLXIfvTf+wCz0dr/PnNwKTEDEmrn?=
 =?us-ascii?q?ebBKHSHQue6EdgsnLOHIqnN3CRJHkF09piQAORK1BYgAARRD86hII2Fhi2xMz9?=
 =?us-ascii?q?d0d0/jIR6UT9qhRS0eJkLQX/Xn3cpAe1aTc0VZ6fIwBN7gxZ40fVMMqe7v98Hi?=
 =?us-ascii?q?1C/52hqhCNJXKfZwhSEW4JXUmEDUj5Pray/dnA7/SYBu2mIvrOZrWOtPVeV+qS?=
 =?us-ascii?q?ypKpyIdm5DGMNsOAPnR5C/0720xDXW12GsjDmjUPTTAXmDzJb8KBuBi8/Sh3pN?=
 =?us-ascii?q?il8Pv3QALv+ZePC7xKPNVv5R+2gKSDN+2RhCpjKjZYzJQMxXDWx7gFwV4SkDpj?=
 =?us-ascii?q?dz2sEbQGqC7MQ7jcmq5RDx4HdSxzMNFE4L473glIIcTbkM/61qZkjv4pDFdITU?=
 =?us-ascii?q?bumtyyaswQPW68NEnLBEKKNLmdIT3Lwsf3Yb6zSLFKjeVUsQGwtiifE0P5IjuD?=
 =?us-ascii?q?kDzpXQi1Me5QlCGbIABeuIalfxZxCGjjScjqZQGhPNBrjT0537s0i2jONW4dNz?=
 =?us-ascii?q?h8bkxMoqeR7SNenvVwBWhB4mB5IumDniaT9/PYJYoOsft3HiR0kPpX4XQgxLtT?=
 =?us-ascii?q?6SFERfp1lzPTr95uuV6mlOaPxyFjUBpPrDZLmY2KsV9jOaXf6plPR3LE8AgR4m?=
 =?us-ascii?q?WXDhRZ7+diX9nuvb1Aj97RmKP2LR9G8snI5o1EXo7TMs3UHmAmNE/FETicMwoB?=
 =?us-ascii?q?ST+iMHqX00BUlreQsGKUqpw7o533sJsIVrJfElcyE6VJWQxeANUeLcIvDXsfmr?=
 =?us-ascii?q?mBgZtQ6A=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AhAAApn/lbh0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgmlwEieDeYgYX4tLgT85gy6TeoFzFBgHDAGEOwOEHCI0CQ0BAwE?=
 =?us-ascii?q?BAQEBAQIBEwEBAQgNCQgpIwyCNiKCZQMDAQIgBFIGCQEBJAImAgIDRBAZBYMcA?=
 =?us-ascii?q?YIBBQqmUnwzihYFgQuKfnqBHIFEgjGDMBkCgTuDKoJXAokjhjk0j3IHAoIghFy?=
 =?us-ascii?q?KS5EIjUOKbYFGgg1NI4M8giQDF4NKinMeAQExAYEEAQGJQIJMAQE?=
X-IPAS-Result: =?us-ascii?q?A0AhAAApn/lbh0O0hNFjHAEBAQQBAQcEAQGBUQcBAQsBgml?=
 =?us-ascii?q?wEieDeYgYX4tLgT85gy6TeoFzFBgHDAGEOwOEHCI0CQ0BAwEBAQEBAQIBEwEBA?=
 =?us-ascii?q?QgNCQgpIwyCNiKCZQMDAQIgBFIGCQEBJAImAgIDRBAZBYMcAYIBBQqmUnwzihY?=
 =?us-ascii?q?FgQuKfnqBHIFEgjGDMBkCgTuDKoJXAokjhjk0j3IHAoIghFyKS5EIjUOKbYFGg?=
 =?us-ascii?q?g1NI4M8giQDF4NKinMeAQExAYEEAQGJQIJMAQE?=
X-IronPort-AV: E=Sophos;i="5.56,275,1539673200"; 
   d="scan'208";a="63793159"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 24 Nov 2018 10:59:37 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726138AbeKYFsf (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sun, 25 Nov 2018 00:48:35 -0500
Received: from mga03.intel.com ([134.134.136.65]:36303 "EHLO mga03.intel.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1725738AbeKYFsf (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Sun, 25 Nov 2018 00:48:35 -0500
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from fmsmga007.fm.intel.com ([10.253.24.52])
  by orsmga103.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 24 Nov 2018 10:59:32 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,275,1539673200"; 
   d="scan'208";a="88361859"
Received: from dwillia2-desk3.jf.intel.com (HELO dwillia2-desk3.amr.corp.intel.com) ([10.54.39.16])
  by fmsmga007.fm.intel.com with ESMTP; 24 Nov 2018 10:59:32 -0800
Subject: [PATCH 2/2] libnvdimm,
 pfn: Pad pfn namespaces relative to other regions
From: Dan Williams <dan.j.williams@intel.com>
To: linux-nvdimm@lists.01.org
Cc: stable@vger.kernel.org, linux-kernel@vger.kernel.org,
        vishal.l.verma@intel.com, dave.jiang@intel.com
Date: Sat, 24 Nov 2018 10:47:04 -0800
Message-ID: <154308522458.237140.16550557898744466932.stgit@dwillia2-desk3.amr.corp.intel.com>
In-Reply-To: <154308521932.237140.13650270234597178173.stgit@dwillia2-desk3.amr.corp.intel.com>
References: <154308521932.237140.13650270234597178173.stgit@dwillia2-desk3.amr.corp.intel.com>
User-Agent: StGit/0.18-2-gc94f
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Commit cfe30b872058 "libnvdimm, pmem: adjust for section collisions with
'System RAM'" enabled Linux to workaround occasions where platform
firmware arranges for "System RAM" and "Persistent Memory" to collide
within a single section boundary. Unfortunately, as reported in this
issue [1], platform firmware can inflict the same collision between
persistent memory regions.

The approach of interrogating iomem_resource does not work in this
case because platform firmware may merge multiple regions into a single
iomem_resource range. Instead provide a method to interrogate regions
that share the same parent bus.

This is a stop-gap until the core-MM can grow support for hotplug on
sub-section boundaries.

[1]: https://github.com/pmem/ndctl/issues/76

Fixes: cfe30b872058 ("libnvdimm, pmem: adjust for section collisions with...")
Cc: <stable@vger.kernel.org>
Signed-off-by: Dan Williams <dan.j.williams@intel.com>
---
 drivers/nvdimm/nd-core.h     |    2 +
 drivers/nvdimm/pfn_devs.c    |   64 ++++++++++++++++++++++++------------------
 drivers/nvdimm/region_devs.c |   41 +++++++++++++++++++++++++++
 3 files changed, 80 insertions(+), 27 deletions(-)

diff --git a/drivers/nvdimm/nd-core.h b/drivers/nvdimm/nd-core.h
index 182258f64417..d0c621b32f72 100644
--- a/drivers/nvdimm/nd-core.h
+++ b/drivers/nvdimm/nd-core.h
@@ -111,6 +111,8 @@ resource_size_t nd_pmem_available_dpa(struct nd_region *nd_region,
 		struct nd_mapping *nd_mapping, resource_size_t *overlap);
 resource_size_t nd_blk_available_dpa(struct nd_region *nd_region);
 resource_size_t nd_region_available_dpa(struct nd_region *nd_region);
+int nd_region_conflict(struct nd_region *nd_region, resource_size_t start,
+		resource_size_t size);
 resource_size_t nvdimm_allocated_dpa(struct nvdimm_drvdata *ndd,
 		struct nd_label_id *label_id);
 int alias_dpa_busy(struct device *dev, void *data);
diff --git a/drivers/nvdimm/pfn_devs.c b/drivers/nvdimm/pfn_devs.c
index 24c64090169e..6f22272e8d80 100644
--- a/drivers/nvdimm/pfn_devs.c
+++ b/drivers/nvdimm/pfn_devs.c
@@ -649,14 +649,47 @@ static u64 phys_pmem_align_down(struct nd_pfn *nd_pfn, u64 phys)
 			ALIGN_DOWN(phys, nd_pfn->align));
 }
 
+/*
+ * Check if pmem collides with 'System RAM', or other regions when
+ * section aligned.  Trim it accordingly.
+ */
+static void trim_pfn_device(struct nd_pfn *nd_pfn, u32 *start_pad, u32 *end_trunc)
+{
+	struct nd_namespace_common *ndns = nd_pfn->ndns;
+	struct nd_namespace_io *nsio = to_nd_namespace_io(&ndns->dev);
+	struct nd_region *nd_region = to_nd_region(nd_pfn->dev.parent);
+	const resource_size_t start = nsio->res.start;
+	const resource_size_t end = start + resource_size(&nsio->res);
+	resource_size_t adjust, size;
+
+	*start_pad = 0;
+	*end_trunc = 0;
+
+	adjust = start - PHYS_SECTION_ALIGN_DOWN(start);
+	size = resource_size(&nsio->res) + adjust;
+	if (region_intersects(start - adjust, size, IORESOURCE_SYSTEM_RAM,
+				IORES_DESC_NONE) == REGION_MIXED
+			|| nd_region_conflict(nd_region, start - adjust, size))
+		*start_pad = PHYS_SECTION_ALIGN_UP(start) - start;
+
+	/* Now check that end of the range does not collide. */
+	adjust = PHYS_SECTION_ALIGN_UP(end) - end;
+	size = resource_size(&nsio->res) + adjust;
+	if (region_intersects(start, size, IORESOURCE_SYSTEM_RAM,
+				IORES_DESC_NONE) == REGION_MIXED
+			|| !IS_ALIGNED(end, nd_pfn->align)
+			|| nd_region_conflict(nd_region, start, size + adjust))
+		*end_trunc = end - phys_pmem_align_down(nd_pfn, end);
+}
+
 static int nd_pfn_init(struct nd_pfn *nd_pfn)
 {
 	u32 dax_label_reserve = is_nd_dax(&nd_pfn->dev) ? SZ_128K : 0;
 	struct nd_namespace_common *ndns = nd_pfn->ndns;
-	u32 start_pad = 0, end_trunc = 0;
+	struct nd_namespace_io *nsio = to_nd_namespace_io(&ndns->dev);
 	resource_size_t start, size;
-	struct nd_namespace_io *nsio;
 	struct nd_region *nd_region;
+	u32 start_pad, end_trunc;
 	struct nd_pfn_sb *pfn_sb;
 	unsigned long npfns;
 	phys_addr_t offset;
@@ -688,30 +721,7 @@ static int nd_pfn_init(struct nd_pfn *nd_pfn)
 
 	memset(pfn_sb, 0, sizeof(*pfn_sb));
 
-	/*
-	 * Check if pmem collides with 'System RAM' when section aligned and
-	 * trim it accordingly
-	 */
-	nsio = to_nd_namespace_io(&ndns->dev);
-	start = PHYS_SECTION_ALIGN_DOWN(nsio->res.start);
-	size = resource_size(&nsio->res);
-	if (region_intersects(start, size, IORESOURCE_SYSTEM_RAM,
-				IORES_DESC_NONE) == REGION_MIXED) {
-		start = nsio->res.start;
-		start_pad = PHYS_SECTION_ALIGN_UP(start) - start;
-	}
-
-	start = nsio->res.start;
-	size = PHYS_SECTION_ALIGN_UP(start + size) - start;
-	if (region_intersects(start, size, IORESOURCE_SYSTEM_RAM,
-				IORES_DESC_NONE) == REGION_MIXED
-			|| !IS_ALIGNED(start + resource_size(&nsio->res),
-				nd_pfn->align)) {
-		size = resource_size(&nsio->res);
-		end_trunc = start + size - phys_pmem_align_down(nd_pfn,
-				start + size);
-	}
-
+	trim_pfn_device(nd_pfn, &start_pad, &end_trunc);
 	if (start_pad + end_trunc)
 		dev_info(&nd_pfn->dev, "%s alignment collision, truncate %d bytes\n",
 				dev_name(&ndns->dev), start_pad + end_trunc);
@@ -722,7 +732,7 @@ static int nd_pfn_init(struct nd_pfn *nd_pfn)
 	 * implementation will limit the pfns advertised through
 	 * ->direct_access() to those that are included in the memmap.
 	 */
-	start += start_pad;
+	start = nsio->res.start + start_pad;
 	size = resource_size(&nsio->res);
 	npfns = PFN_SECTION_ALIGN_UP((size - start_pad - end_trunc - SZ_8K)
 			/ PAGE_SIZE);
diff --git a/drivers/nvdimm/region_devs.c b/drivers/nvdimm/region_devs.c
index 174a418cb171..e7377f1028ef 100644
--- a/drivers/nvdimm/region_devs.c
+++ b/drivers/nvdimm/region_devs.c
@@ -1184,6 +1184,47 @@ int nvdimm_has_cache(struct nd_region *nd_region)
 }
 EXPORT_SYMBOL_GPL(nvdimm_has_cache);
 
+struct conflict_context {
+	struct nd_region *nd_region;
+	resource_size_t start, size;
+};
+
+static int region_conflict(struct device *dev, void *data)
+{
+	struct nd_region *nd_region;
+	struct conflict_context *ctx = data;
+	resource_size_t res_end, region_end, region_start;
+
+	if (!is_memory(dev))
+		return 0;
+
+	nd_region = to_nd_region(dev);
+	if (nd_region == ctx->nd_region)
+		return 0;
+
+	res_end = ctx->start + ctx->size;
+	region_start = nd_region->ndr_start;
+	region_end = region_start + nd_region->ndr_size;
+	if (ctx->start >= region_start && ctx->start < region_end)
+		return -EBUSY;
+	if (res_end > region_start && res_end <= region_end)
+		return -EBUSY;
+	return 0;
+}
+
+int nd_region_conflict(struct nd_region *nd_region, resource_size_t start,
+		resource_size_t size)
+{
+	struct nvdimm_bus *nvdimm_bus = walk_to_nvdimm_bus(&nd_region->dev);
+	struct conflict_context ctx = {
+		.nd_region = nd_region,
+		.start = start,
+		.size = size,
+	};
+
+	return device_for_each_child(&nvdimm_bus->dev, &ctx, region_conflict);
+}
+
 void __exit nd_region_devs_exit(void)
 {
 	ida_destroy(&region_ida);

