Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 04 Dec 2018 18:29:02 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id BB44C580375;
	Mon,  3 Dec 2018 19:34:00 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga004-1.jf.intel.com with ESMTP; 03 Dec 2018 19:34:00 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AJJp1yRUCSuA2TQ/BtOw0JQiXArjV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhGHuqdThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGoyz?=
 =?us-ascii?q?b4UNAOQBM+hWrJTzqUUSohulHQmhBvjiyiNUinLswaE2z/gtHAPA0Qc9H9wOqn?=
 =?us-ascii?q?PUrNDtOakcS++1yrTDwjXCb/NS3Tf96ZLHchU6ofqRWr9/bNDeyU81GwPHlFmR?=
 =?us-ascii?q?p43lPzeR1uQMqWeb6vFgWPmui24htwF+vDyvyt0whYnOg4IY01bJ/jh3zoYyIN?=
 =?us-ascii?q?23Uk97Ydi8HZtTqS6aLY12Td0mQ21yvyY60LIGtJimdyYJ0JQq3wDTZ+CDfoSS?=
 =?us-ascii?q?/x7uWvidLS1liH9mZL6znRe//Eq4xuHiSsW51ExGoylFn9XWq3wA1h7e5tKaRv?=
 =?us-ascii?q?Z58Uqs3yuE2RrJ5eFeO080kLLWK54/zb40kZoeqVrDHiDol0XslqOWdVsr+vKu?=
 =?us-ascii?q?6+v5ZrXqvJicN5V7ig3mM6QunNKwAfggPwQQQ2SW/f6w2KDt8EHnWrlGk/47nr?=
 =?us-ascii?q?XDvJ3bJ8kXvqu5DBVU0oYn5Ra/FTCm0NEAkHkDLVJFfg+HjofwN1HNPv/4F/G/?=
 =?us-ascii?q?jEqokDtywPDHMLvhDYvXLnXYjrfhcqhy61RGxAow099f/ZRUBa8FIP7pXU/xrt?=
 =?us-ascii?q?PYAgcjMwOo2+bnFMl91oQGVGKLA6+ZM73dvUWH5+IyOOSMYI4VuDDgK/kq/fLu?=
 =?us-ascii?q?jHk5mUMDcqmtx5cYdHe4HvF+KUWDfXXsmssBEXsNvgcmTOzlklyCUSJJaHa1Ra?=
 =?us-ascii?q?485iw7B5igDYfMXY2thL2B3CGmHpxZfGxGC1aMEWv2eIWAQfsDdCWSIsp5mDwe?=
 =?us-ascii?q?SbehU5Mh1Q2ptALiybpnKfTb9jcbtZLk0th14erTmAo29Tx1CcSdzm6MQ3t1nm?=
 =?us-ascii?q?MOWz85wqR/rVZhxVeE1Khym+ZYGsBL5/NVTgc6MobRwPZhC9DyXQLBfc2FSEy8?=
 =?us-ascii?q?TdWkGjwxStMxw9kTY0dyAdmijxbD3za0DL8RjbCEGJs08qfE1XjrO8l902rG1L?=
 =?us-ascii?q?Umj1Q+QctAL2umirR79wjSHYHJlUqZmr2udaQd2i7N6WiCwXCPvEFeTA5/T6HF?=
 =?us-ascii?q?UWoDaUvRqNTz/lnCQKO2CbQ7LgtBztaPJbZQZd33k1pKXvfjN87YY2KqhWiwAx?=
 =?us-ascii?q?GExrePbIrvf2UQxyHdCEkCkwAO8neKLwk+BiG9o23ACDxiD07gY0Tp8eNmsnO0?=
 =?us-ascii?q?Ulc0zx2Wb01mz7e65wQaheKCRP8J3rILoiEhqy5qE1a7xN/WD9uApwx8fKRTe9?=
 =?us-ascii?q?894VFH1X7HuAx5JJCvM6dihlsGeQRto0zuzwl3CplHkcUysHMqzQ9yKaWE0FNB?=
 =?us-ascii?q?dzKUx4zwNqfQKmno+BCvaqjW2l7F3daS+6cP7uk4qlr5sAGoEEoi72to091P33?=
 =?us-ascii?q?SA4ZXKCRIYUYjtXUYv6xh6u7babzEn6IPQy3JtPre7sz/Y190yGesq1wyvf9Fc?=
 =?us-ascii?q?MKODCg//CMkaB8moKOw3lFmldBMEPOZO9KEqO8OqbeeJ2KmuPOx4hjKpkXxH4J?=
 =?us-ascii?q?xh0kKL7yd9SvPI04wZzP2C3wqHVy3zjFGuss3snYBEZDcSHnewyCT+BY5RYLFy?=
 =?us-ascii?q?cpgPCWu0P8K3wdB+jYb3W3FE7F6jG08G2MixdBqIblzywRdf1V4Krnyggye4yS?=
 =?us-ascii?q?J7kysorqaGwCPB2eDiewcZNW5RQ2lii0zhIYy1j9AcQUipYBIllBqj5Ubm2adb?=
 =?us-ascii?q?oL5zIHXUQUdNZyL2NX1tUrOstrqeZM5C8JMpsSRNXOW8e1yaUaP9ox0B3iPnHm?=
 =?us-ascii?q?tewi07dj6wtpX4mRx6lHySLHJpoHXFfsFwwA/V5MbASv5JwjoGWC54hCHVBlem?=
 =?us-ascii?q?Jdmp/taUl5DZvuClTW2hVZ5TcSjtzYyesiu2/mlqARy5n/CuldzrCwk60Snn19?=
 =?us-ascii?q?Z0USXEtgrzYo7u166iK+JoYlFoBEPg68p9Aox/kpE/hJYK1XgYh5WV+2EKkWPy?=
 =?us-ascii?q?MdVdxKL/Y2ABRT8Nw97J/gfl3FdvIW6Ox4L8Tn+d2NduZ8GmYmMK3SIw98NKB7?=
 =?us-ascii?q?2V7LBenSt1v0C3rQTeYfVmmjcdyP0u6GMVgu0TuQotyDmdDa4WHUVCISPskBGI?=
 =?us-ascii?q?5cikrKpLfGavbaSw1E1mkNCkDbGCoRtTVGz3e5g8Bi9w8ttwMEjX33Lt8IHkd8?=
 =?us-ascii?q?LdbdYSth2SjhfBgPJZKJM3lvoWmyVnPXjxsmEiy+4+lRZux421vJCbK2Vx+6K0?=
 =?us-ascii?q?GgJYNjrwZ88J+zDil6BentuN34C0H5VsATELXJruTfK1HzMer/XnNwCSEDIirn?=
 =?us-ascii?q?eXA6bQHQia6E1+tXLAD4irN22LJHke1dhtXwOSJEtbgAAJRjk6moM5GxuuxMzg?=
 =?us-ascii?q?dkd5+z8Q6kT5qhtK1uJnKR3/Xn3Dqwevbzc+UIKfIwZO7gFe+0fVNtST7uBpEC?=
 =?us-ascii?q?Fd4JKhtxaBKnCBawRLEGEJWVGEB1b5Mbm1/tTA9+mYBuyjL/rBe7mOqOpeV+uW?=
 =?us-ascii?q?ypKryIdp4zGMNsCXNHl4E/I7wlZDXWx+G8nBmzQPTDEXlzvQb8GBohew4DZ3rs?=
 =?us-ascii?q?e58PTkQw/v4YqPC71PMdRg4Ry2gKGDN/KOiyZ9MzpXypQMxXrQwrgFwFESkz1u?=
 =?us-ascii?q?dyWqEbkYtS7CUqPQmqxUDx4acS9zN9FI76Uz3gZTI87bl8j126V8jv40DVdFSF?=
 =?us-ascii?q?PgltuoZcwMP2GyKlfHCFyXO7SBID3B29v3br+kSb1MkOVUsAW9tiyGE0D4JDSM?=
 =?us-ascii?q?iTnoWwqrMeFNlyybOB1euIegchdiE2TjTdTmagGlP99zlzE53bo0hnbSP24GLT?=
 =?us-ascii?q?d8a19NrqGX7S5AnvV/GmlB4mB5IuWehymZ7/fXKpANvPtvAyR0kf9a4Xsgx7tU?=
 =?us-ascii?q?6iFEWOJ6mC/IotFypFGml/GFyiB7XxpWtjZLmIWLsF1iOKrD8JlAXHfE/BQV4m?=
 =?us-ascii?q?SRCxQFvd1lCtL0tqBUy9jPkr/zKThY/9LV+8scG9bbKMadPHU9NhrpHW2cMAxQ?=
 =?us-ascii?q?aDe3KWHSmARikfWZ8W3d+oc7rpz9sJsIRKVSWFE8GrUdEEszT/IYJ5Iicjoi2Y?=
 =?us-ascii?q?GaiMoJ7H+l5E3dTcMcvNbYV/aWAPzqMx6Yi6VJY10DxrauftdbDZHyx0E3Mgoy?=
 =?us-ascii?q?p4/NAUeFGIkV+iA=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AgAABU9AVch0O0hNFbCBwBAQEEAQEHB?=
 =?us-ascii?q?AEBgVEHAQELAYJpgQIng3mIGIwPKYFkFJI7hHmBJANMLA0GAYgJIjQJDQEDAQE?=
 =?us-ascii?q?BAQEBAgETAQEBCgsJCCkjDII2JAGCYQEBAQEDAQIgBBkBATcBBQkBAQoLAwMDA?=
 =?us-ascii?q?QIBAgImAgIDHxIBBQEUCAYTBYMcAYIBBQqZPjyKHXB8M4J2AQEFhy0DBRJ5ixF?=
 =?us-ascii?q?6gRyBEYMSgwUZBBiBIoMpgleJMoV+fJAWBwKCI4RdijwYgVuFEYo6LI09inUwg?=
 =?us-ascii?q?SWCDU0jgQEGgjWCGwwXg0qFFIVgHjMBgQQBAYsBAQE?=
X-IPAS-Result: =?us-ascii?q?A0AgAABU9AVch0O0hNFbCBwBAQEEAQEHBAEBgVEHAQELAYJ?=
 =?us-ascii?q?pgQIng3mIGIwPKYFkFJI7hHmBJANMLA0GAYgJIjQJDQEDAQEBAQEBAgETAQEBC?=
 =?us-ascii?q?gsJCCkjDII2JAGCYQEBAQEDAQIgBBkBATcBBQkBAQoLAwMDAQIBAgImAgIDHxI?=
 =?us-ascii?q?BBQEUCAYTBYMcAYIBBQqZPjyKHXB8M4J2AQEFhy0DBRJ5ixF6gRyBEYMSgwUZB?=
 =?us-ascii?q?BiBIoMpgleJMoV+fJAWBwKCI4RdijwYgVuFEYo6LI09inUwgSWCDU0jgQEGgjW?=
 =?us-ascii?q?CGwwXg0qFFIVgHjMBgQQBAYsBAQE?=
X-IronPort-AV: E=Sophos;i="5.56,312,1539673200"; 
   d="scan'208";a="55944759"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 03 Dec 2018 19:33:58 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726030AbeLDDd4 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 3 Dec 2018 22:33:56 -0500
Received: from mail-oi1-f194.google.com ([209.85.167.194]:46146 "EHLO
        mail-oi1-f194.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725971AbeLDDd4 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 3 Dec 2018 22:33:56 -0500
Received: by mail-oi1-f194.google.com with SMTP id x202so13004851oif.13
        for <linux-kernel@vger.kernel.org>; Mon, 03 Dec 2018 19:33:55 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=intel-com.20150623.gappssmtp.com; s=20150623;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=5NQOYfu0gso17ENW2tOFxX2Qb2a1xkVETAFlxtlKLcw=;
        b=yMHQWIfb72r3cv2AzFYAg1hl2xJGWIG2m++5H6qUQbxu/WbwmSZjWFwv5AFxxryJZ0
         U/ptCk9oZy6fmo281HS7kTmTWcTNf9/y6ElxX00oyISyic3y2W9TXLx6ADu4QJjnYHSr
         HkDIEZKPoYnOZOKPDWKDb/lMxUaM4xwwwdv2KLIZRoO8ROESf7RWaSLeoWd6+pOH76mn
         l9Gx7AJZEX/eeXHFitTgW3IXBZrkBVQhiThGpNzN9YbNF1ZJUXUadiFyJOwSuIGvNX4l
         SB0u5Xy2WKskaJ4XL/2nqNum1EqgaW8AL9ltRIqVCl4ZFwjHmTrma360vj4RDobvFFnO
         r2AA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=5NQOYfu0gso17ENW2tOFxX2Qb2a1xkVETAFlxtlKLcw=;
        b=dLHmrI9zuNzNj8jou4jLapSE2utrfDm+NqoPW0v0cqdLt6EtDvj8cod3IyVxlYQ3ra
         FB653kkaepZIhe7hX8aNolbM6x2Q+s8DjVe7oxxUj3PogjLm6+L/1IuKgOgapCTqQg/v
         VZqEKW+SrAYYi26Ntw3gAfEQHzDTKdwxX9YWcxc3ChHtATlMVXID8PRDbJcpmDAnHgg8
         dPMCeG2/wKkjXFO95L3GVSUywJJRGkcQBoRkBCYJUa7S0WNrpRvTAD0nfqr/r71xo00S
         lqxhjajwcASH4jJEmX9DIfg+OaZMgh/p2SClZYd/TjGx7C0Q6BzDvA3YIUvLc/C5GJOl
         aFqQ==
X-Gm-Message-State: AA+aEWbkyLFUB7jZ5WWp5g0h4LGlshM+rHD9ZcKvWm+7Veti6zr2BL3L
        /P0BF3AU8OHrc43ws8hTICG3YgSmWN+QZqlLRINFJA==
X-Google-Smtp-Source: AFSGD/UFAaoougO9Y9pJeOcPMFne/uY73ffBVxiWxsSqqyW3P3BgjoF3fwarI+P43IS4eFERVWtqV2BiVfiTps94mo8=
X-Received: by 2002:aca:d946:: with SMTP id q67mr4502019oig.0.1543894435141;
 Mon, 03 Dec 2018 19:33:55 -0800 (PST)
MIME-Version: 1.0
References: <154353682674.1676897.15440708268545845062.stgit@dwillia2-desk3.amr.corp.intel.com>
 <20181130154902.GL10377@bombadil.infradead.org> <CAPcyv4iE375mP7eJP4nb76shWNaATy6FcZYi800wZ3iAJE8G8g@mail.gmail.com>
 <20181130162435.GM10377@bombadil.infradead.org> <CAPcyv4gBwtCxN4xTncsyShMwMzNiLG3SxKA-frYh9Fn-f6QV=g@mail.gmail.com>
 <CAPcyv4gDO7sUJgE5kKe=VC5uUG36QaUrkb6tCrtnaFMkgdSYGw@mail.gmail.com>
 <20181130195021.GN10377@bombadil.infradead.org> <CAPcyv4iqA84WbE8pE=Yi15Q0T8JUXnPZss27HqhQTP08F9sTrQ@mail.gmail.com>
In-Reply-To: <CAPcyv4iqA84WbE8pE=Yi15Q0T8JUXnPZss27HqhQTP08F9sTrQ@mail.gmail.com>
From: Dan Williams <dan.j.williams@intel.com>
Date: Mon, 3 Dec 2018 19:33:43 -0800
Message-ID: <CAPcyv4jFwpsiMTwj3tzbQ4NjV_XnO5-2hTqKYOaWtRCGtT=T+g@mail.gmail.com>
Subject: Re: [PATCH] dax: Fix Xarray conversion of dax_unlock_mapping_entry()
To: Matthew Wilcox <willy@infradead.org>
Cc: linux-nvdimm <linux-nvdimm@lists.01.org>, Jan Kara <jack@suse.cz>,
        linux-fsdevel <linux-fsdevel@vger.kernel.org>,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Fri, Nov 30, 2018 at 12:05 PM Dan Williams <dan.j.williams@intel.com> wrote:
>
> On Fri, Nov 30, 2018 at 11:50 AM Matthew Wilcox <willy@infradead.org> wrote:
> >
> > On Fri, Nov 30, 2018 at 09:01:07AM -0800, Dan Williams wrote:
> > > On Fri, Nov 30, 2018 at 8:33 AM Dan Williams <dan.j.williams@intel.com> wrote:
> > > >
> > > > On Fri, Nov 30, 2018 at 8:24 AM Matthew Wilcox <willy@infradead.org> wrote:
> > > > >
> > > > > On Fri, Nov 30, 2018 at 07:54:49AM -0800, Dan Williams wrote:
> > > > > > Looks good to me, although can we make that cookie an actual type? I
> > > > > > think it's mostly ok to pass around (void *) for 'entry' inside of
> > > > > > fs/dax.c, but once an entry leaves that file I'd like it to have an
> > > > > > explicit type to catch people that might accidentally pass a (struct
> > > > > > page *) to the unlock routine.
> > > > >
> > > > > That's a really good idea.  Something like this?
> > > > >
> > > > > typedef struct {
> > > > >         void *v;
> > > > > } dax_entry_t;
> > > >
> > > > Yes, please.
> >
> > Oh.  The caller needs to interpret it to see if the entry was successfully
> > locked, so it needs to be an integer type (or we need a comparison
> > function ... bleh).
> >
> > > > > I could see us making good use of that within dax.c.
> > >
> > > I'm now thinking that this is a nice improvement for 4.21. For 4.20-rc
> > > lets do the localized fix.
> >
> > I think both patches are equally risky.  I admit this patch crosses a
> > file boundary, but the other patch changes dax_make_entry() which is
> > used by several functions which aren't part of this path, whereas this
> > patch only changes functions used in the path which is known to be buggy.
>
> I'm almost buying this argument... but I'd feel better knowing that
> all dax_make_entry() usages are safe against this bug pattern. I
> didn't audit the other occurrences of dax_make_entry() for this bug,
> did you build some confidence here?
>
> >
> > This patch has the advantage of getting us closer to where we want to be
> > sooner.
>
> One comment below...
>
> >
> >
> > From 1135b8d08f23ab4f5b28261535a817f3de9297c9 Mon Sep 17 00:00:00 2001
> > From: Matthew Wilcox <willy@infradead.org>
> > Date: Fri, 30 Nov 2018 11:05:06 -0500
> > Subject: [PATCH] dax: Change lock/unlock API
> >
> > Return the unlock cookie from dax_lock_mapping_entry() and
> > pass it to dax_unlock_mapping_entry().  This fixes a bug where
> > dax_unlock_mapping_entry() was assuming that the page was PMD-aligned
> > if the entry was a PMD entry.
> >
> > Debugged-by: Dan Williams <dan.j.williams@intel.com>
> > Fixes: 9f32d221301c ("dax: Convert dax_lock_mapping_entry to XArray")
> > Signed-off-by: Matthew Wilcox <willy@infradead.org>
> > ---
> >  fs/dax.c            | 21 ++++++++-------------
> >  include/linux/dax.h | 15 +++++++++------
> >  mm/memory-failure.c |  6 ++++--
> >  3 files changed, 21 insertions(+), 21 deletions(-)
> >
> > diff --git a/fs/dax.c b/fs/dax.c
> > index 9bcce89ea18e..d2c04e802978 100644
> > --- a/fs/dax.c
> > +++ b/fs/dax.c
> > @@ -351,20 +351,20 @@ static struct page *dax_busy_page(void *entry)
> >   * @page: The page whose entry we want to lock
> >   *
> >   * Context: Process context.
> > - * Return: %true if the entry was locked or does not need to be locked.
> > + * Return: A cookie to pass to dax_unlock_mapping_entry() or 0 if the
> > + * entry could not be locked.
> >   */
> > -bool dax_lock_mapping_entry(struct page *page)
> > +dax_entry_t dax_lock_mapping_entry(struct page *page)
> >  {
> >         XA_STATE(xas, NULL, 0);
> >         void *entry;
> > -       bool locked;
> >
> >         /* Ensure page->mapping isn't freed while we look at it */
> >         rcu_read_lock();
> >         for (;;) {
> >                 struct address_space *mapping = READ_ONCE(page->mapping);
> >
> > -               locked = false;
> > +               entry = NULL;
> >                 if (!dax_mapping(mapping))
> >                         break;
> >
> > @@ -375,7 +375,7 @@ bool dax_lock_mapping_entry(struct page *page)
> >                  * otherwise we would not have a valid pfn_to_page()
> >                  * translation.
> >                  */
> > -               locked = true;
> > +               entry = (void *)~0UL;
> >                 if (S_ISCHR(mapping->host->i_mode))
> >                         break;
> >
> > @@ -400,23 +400,18 @@ bool dax_lock_mapping_entry(struct page *page)
> >                 break;
> >         }
> >         rcu_read_unlock();
> > -       return locked;
> > +       return (dax_entry_t)entry;
> >  }
> >
> > -void dax_unlock_mapping_entry(struct page *page)
> > +void dax_unlock_mapping_entry(struct page *page, dax_entry_t entry)
>
> Let's not require the page to be passed back, it can be derived:
>
>     page = pfn_to_page(dax_to_pfn((void*) entry));
>
> A bit more symmetric that way and canonical with other locking schemes
> that return a cookie.

The patch does not apply on top of the pending fixes. could resend on
top of the current libnvdimm-fixes branch [1]?

I think because we are changing the calling convention to take return
a locked dax_entry_t type, I feel like we should go back to the
originally proposed names of these interfaces. I.e.

    dax_entry_t dax_lock_page(struct page *page)

    void dax_unlock_page(dax_entry_t entry)

Yes, it introduces an entry-to-pfn and pfn-to-page conversion.
However, If I can't convince you to drop the page argument, lets at
least do the name change. I.e. offload the responsibility of conveying
that this is not the traditional page lock to the fact that a
dax_entry is returned and passed back to the unlock routine.

[1]: https://git.kernel.org/pub/scm/linux/kernel/git/nvdimm/nvdimm.git/log/?h=libnvdimm-fixes
