Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 11 Dec 2018 12:56:28 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id F36215807A2;
	Mon, 10 Dec 2018 20:49:47 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga003-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 10 Dec 2018 20:49:47 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A2s+5rRAUttGa6Hc/8SozUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7/rsSwAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95fWSJBHI2y?=
 =?us-ascii?q?cpEPD+QOMulEsobypVUBoxilBQm0Bu7i0SNIimPs0KEmz+gsCx/K0Qo9FNwOqn?=
 =?us-ascii?q?TUq9D1Ob8cXe6v1qbI0DHDZO5Z1zvn9YPGdQwur/SSUrJ2d8re10kuGw3YhViX?=
 =?us-ascii?q?sYzqJS6V1uAIs2eH7OptTuavi28hqwFsrTmj3MYshZLMho4P1l/E8iB5zZ8zKN?=
 =?us-ascii?q?alS0B7ecapHIVMuyyeLYd6X80vT39ytConybAKpYS3cSkIxZg/wxPTcf+Kf5SS?=
 =?us-ascii?q?7h79WuudPC10iXxqdb+5mh2861KvyvfmWcmxyFtKrjRKkt3Ltn0VyRzT5daISu?=
 =?us-ascii?q?Fn8keixzmPzQbT5f9AIUwukqrbMZEhzqYxlpoVr0vDAjf7lFvqgKKSbEko5+al?=
 =?us-ascii?q?5/r9brn7pZKQK5V4hwD8P6g2n8ywG+U4MgwAX2iB/uS80aXu/Un4QLVMk/03nb?=
 =?us-ascii?q?DVsJPEKsQBoK62HQtV3p8k6xexCTepzs4YkGIZLFJKZh2HlZLlO1LQL/DiC/ew?=
 =?us-ascii?q?nVCsnC1sx/DcMb3tGo/NIWTbkLf9YbZ97FZRyA4yzdBc+Z1YEL4AIO/oV0/1td?=
 =?us-ascii?q?zYCAI5MgOuz+bmDtV9yp0RWWaVDqCFN6PStEeC5vgzLOmUeI8VpDH9JuAl5/H0?=
 =?us-ascii?q?jH85hUUSfa6z0ZsXdXC3BPJmI0qCbHrog9cBF3oKvwUkQOzrjl2CTSBcZ3KoU6?=
 =?us-ascii?q?0g4TE7DZqsDZ3fSYC1nLyBwCC7E4VUZmBBFF+AC3Tod4KCW/cKbyKfOcthkj0C?=
 =?us-ascii?q?Vbi8RI4tzxCutAnmy7V5KurY4DEXtZXm1NJt/e3ciQky9SBoD8Say2yCVXp0nm?=
 =?us-ascii?q?MPRz81xqx/u1ZyylWY3Kh8gvxYE8FT5vxTXgc7M57c0/J1C9ToVg3dedeJTU6s?=
 =?us-ascii?q?Qs+6DjEpUtIx39gObl5+G9q4iBDPxS6qA74PmLyNC5w56abc33n3J8ZgxHfKzq?=
 =?us-ascii?q?ghj186QsRRMW2qnLJw9w/WB4TRiUWWi76qdbgA3C7K7GqM0HCBvF9GXwJqUaXK?=
 =?us-ascii?q?R3YfZlDIotT/4U/CS7yuCbEjMgZazc6CK61KasDmjFlcRffjPsjebHy1m2uqGR?=
 =?us-ascii?q?mIwbaMZpLwe2oBxCXdFFQEkwcL8HmbLwc+GDmur3jeDDN0E1LveF3j8e9lpXO/?=
 =?us-ascii?q?T080yRyKbkJ727q0/B4VmeKTS/cJ0r0Yvychri1+HEyh0NLOF9qAuw1hcb1AYd?=
 =?us-ascii?q?M85VdH0n7Ztwx9P5C6M6BunFkecx5zv0Pv0RV3BZ5NkcwrrHMs0QpzJriU0FJH?=
 =?us-ascii?q?dzOEw5/wPqfbJXX1/BCqc6TWwE3R0M6K+qcT7/Q1s0/svAW3GUst7Xpm08NZ3G?=
 =?us-ascii?q?CB5prXFgUSV5HxUkEp9xVho7HaYy89557b1HF2MKm0tCPC1MwtBOc/1hmgeNJf?=
 =?us-ascii?q?OrueFADuC80aG9SuKOsyllmpcxIIJvxd+LQ1PsOmbfSG3qGrMf1knDKni2RH/Y?=
 =?us-ascii?q?983liN9yp6Vu7HwZIFz+uE0QuAUjf2lE2hvdzvmYBYeTESGXKyyTLlBIFNfKJy?=
 =?us-ascii?q?Z5sECWC0L82x2Np+nZ/tV2dE+1G5A1MJxdGmeQCVb1z7xgBQ0UUXoXq6mSq31T?=
 =?us-ascii?q?B0kjcprraB0yzK2ejtaB0HOmtTTml4kVjsOZS0j8wdXEWwbwkplQGp5Ebgy6hA?=
 =?us-ascii?q?uaR/KXLeQUNJfyjwMmFjXbG8truEY85T9pwotT9bX/i7YVCfUrT9uQcV0zv/H2?=
 =?us-ascii?q?tCwzA2bzOqtY/jnxx5i2KdK2x/rGHDdsFzxhff5drcSuBX3jcdQCl4iD/XBkWz?=
 =?us-ascii?q?PtWz/NWUkYvDvf66V267SpJTdizrx5uatCSn/W1qHQG/n/erl9znCwc61jX319?=
 =?us-ascii?q?trVSXOtxv8Zojr16KnMeNoZEVoBVn869ZkFYF6iIc/mJYQ2X0CjJWP4XUHiXvz?=
 =?us-ascii?q?Mclc2a/mb3oCXz8Lz8TV4Aj4wkJjKH2Jypn9VnWcxMtheta7bnkX2iI788BFFq?=
 =?us-ascii?q?OU4KZYkityp1qytRjRbuRlnjcB1fsu72YXg+QIuAou1CqRGL4TEldDPSzwiRuI?=
 =?us-ascii?q?9cuxo7tNZGagarWw0Et+nda8DLCNuA1cWXD5eos8Ei909MlwLFXM0Hjr4IH+ZN?=
 =?us-ascii?q?bQdc4TtgGTkxrYk+hVL5cxmuALhCV9P2L9oGYly/U6jRF12ZG6vY6HK3hi/a6j?=
 =?us-ascii?q?Ax5YMCH1aN0X+j33kalemcOW1Zi1Hpp9AjULQIfoTfWwHT0Jr/vnMAKOECAmpn?=
 =?us-ascii?q?efBLrSBguf6EZgr3LSHJGnLXCXJH8Fzdp8QBmRPlBQgAcRXD8ihJ42ChiqxND9?=
 =?us-ascii?q?cEd+/j0R5ET3qh5SxeJzLRX/Tn3TpAS1ajc3VZifKgBZ7hpZ6kfRMMye6P9zHi?=
 =?us-ascii?q?5C8p2gqgyNNnKUZwBSAW4VXUyEAkjpPqOy6tnY7+iYGu2+IuPOYLWJtOxeTuqI?=
 =?us-ascii?q?yoip0od85DaMMcOPPnZ5Av0/20pDW215GsvDlzUOTSwXizzCb8qBqBig/S13q9?=
 =?us-ascii?q?i18O73VwL3+YuPF7xSPM1v+x+ogKeDNO2QhCdjJTZbzJMMwnDIx6YF3F4PkCFj?=
 =?us-ascii?q?bD2tEbUGtS7QQ6PcgK5XDxgHayxtMMtE9b4z3g5IOcTDkNP6yqZ4juIpC1dCTV?=
 =?us-ascii?q?HugNypatcQI26jNFLLHkKLNLWdKD3PwsH3Z768SLJKgOVVsR2wpSiUE0v5Mjuf?=
 =?us-ascii?q?kDnpUgilMftQgyGDIBxepIa9fw5xCWjiSdLqcAG0PMVrgj0237I0gGjHNWodMT?=
 =?us-ascii?q?h6bkNMoaec7SJegvVjBWNB6mBpIvWDmyac9+PYMIoZseN3AiRokOJX+HQ7xKFT?=
 =?us-ascii?q?7CFBRfx1njPdr99uo168lOmPxSFqUB5PqjZNmYKKsl9uOaTf9plcR3nE+AgB4n?=
 =?us-ascii?q?mXCxQP9JNZDYilm60UgvLI3uqnIjAE89/8/M0ACsySI8WCZikbPALtCQLTWRMM?=
 =?us-ascii?q?UDquPmL3g01bjeHU93eQ6JM9r8vCgp0LH/VjXUExXt5cQmFuP9EEJppmFHtwib?=
 =?us-ascii?q?eGiMsD5lK6rR/MVINbtJWBXfWXV6a8YA2FhKVJMkNbiYjzKp4eY8iigxRv?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAACvQA9ch0O0hNFkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGDayeMFF+LMYINFJc9FIFfEgEBGBMBh20iNAkNAQM?=
 =?us-ascii?q?BAQEBAQECARMBAQEIDQkIKS+CNiQBgmIBAQEDAQIPFRM/BgkBAQoUBAklAwwFG?=
 =?us-ascii?q?DETBR2Cf4ICAwKbP4lYAQEBgWozhTGEfIwhEQaBQD+EI4ROARIBg1SCJgKJLwq?=
 =?us-ascii?q?BcIQUfVGPFVUHAgKNYYNhCxiBXCOEdGiJYiyYXQIEBgUCEwGBRoEdcXAVggiBH?=
 =?us-ascii?q?4InF44+UYEFAQEhiACCPgEB?=
X-IPAS-Result: =?us-ascii?q?A0ABAACvQA9ch0O0hNFkGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGDayeMFF+LMYINFJc9FIFfEgEBGBMBh20iNAkNAQMBAQEBAQECARMBA?=
 =?us-ascii?q?QEIDQkIKS+CNiQBgmIBAQEDAQIPFRM/BgkBAQoUBAklAwwFGDETBR2Cf4ICAwK?=
 =?us-ascii?q?bP4lYAQEBgWozhTGEfIwhEQaBQD+EI4ROARIBg1SCJgKJLwqBcIQUfVGPFVUHA?=
 =?us-ascii?q?gKNYYNhCxiBXCOEdGiJYiyYXQIEBgUCEwGBRoEdcXAVggiBH4InF44+UYEFAQE?=
 =?us-ascii?q?hiACCPgEB?=
X-IronPort-AV: E=Sophos;i="5.56,341,1539673200"; 
   d="scan'208";a="55804775"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 10 Dec 2018 20:49:46 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730178AbeLKEqk (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 10 Dec 2018 23:46:40 -0500
Received: from mx0b-001b2d01.pphosted.com ([148.163.158.5]:33398 "EHLO
        mx0a-001b2d01.pphosted.com" rhost-flags-OK-OK-OK-FAIL)
        by vger.kernel.org with ESMTP id S1729060AbeLKEqj (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 10 Dec 2018 23:46:39 -0500
Received: from pps.filterd (m0098413.ppops.net [127.0.0.1])
        by mx0b-001b2d01.pphosted.com (8.16.0.22/8.16.0.22) with SMTP id wBB4j2Jp070480
        for <linux-kernel@vger.kernel.org>; Mon, 10 Dec 2018 23:46:37 -0500
Received: from e14.ny.us.ibm.com (e14.ny.us.ibm.com [129.33.205.204])
        by mx0b-001b2d01.pphosted.com with ESMTP id 2pa1xb1g02-1
        (version=TLSv1.2 cipher=AES256-GCM-SHA384 bits=256 verify=NOT)
        for <linux-kernel@vger.kernel.org>; Mon, 10 Dec 2018 23:46:37 -0500
Received: from localhost
        by e14.ny.us.ibm.com with IBM ESMTP SMTP Gateway: Authorized Use Only! Violators will be prosecuted
        for <linux-kernel@vger.kernel.org> from <paulmck@linux.vnet.ibm.com>;
        Tue, 11 Dec 2018 04:46:37 -0000
Received: from b01cxnp22033.gho.pok.ibm.com (9.57.198.23)
        by e14.ny.us.ibm.com (146.89.104.201) with IBM ESMTP SMTP Gateway: Authorized Use Only! Violators will be prosecuted;
        (version=TLSv1/SSLv3 cipher=AES256-GCM-SHA384 bits=256/256)
        Tue, 11 Dec 2018 04:46:33 -0000
Received: from b01ledav003.gho.pok.ibm.com (b01ledav003.gho.pok.ibm.com [9.57.199.108])
        by b01cxnp22033.gho.pok.ibm.com (8.14.9/8.14.9/NCO v10.0) with ESMTP id wBB4kWaG21626950
        (version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256 verify=FAIL);
        Tue, 11 Dec 2018 04:46:32 GMT
Received: from b01ledav003.gho.pok.ibm.com (unknown [127.0.0.1])
        by IMSVA (Postfix) with ESMTP id 92608B2066;
        Tue, 11 Dec 2018 04:46:32 +0000 (GMT)
Received: from b01ledav003.gho.pok.ibm.com (unknown [127.0.0.1])
        by IMSVA (Postfix) with ESMTP id 5DB7AB2065;
        Tue, 11 Dec 2018 04:46:32 +0000 (GMT)
Received: from paulmck-ThinkPad-W541 (unknown [9.80.231.34])
        by b01ledav003.gho.pok.ibm.com (Postfix) with ESMTP;
        Tue, 11 Dec 2018 04:46:32 +0000 (GMT)
Received: by paulmck-ThinkPad-W541 (Postfix, from userid 1000)
        id EFA9816C5F79; Mon, 10 Dec 2018 20:46:31 -0800 (PST)
Date: Mon, 10 Dec 2018 20:46:31 -0800
From: "Paul E. McKenney" <paulmck@linux.ibm.com>
To: "He, Bo" <bo.he@intel.com>
Cc: Steven Rostedt <rostedt@goodmis.org>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        "josh@joshtriplett.org" <josh@joshtriplett.org>,
        "mathieu.desnoyers@efficios.com" <mathieu.desnoyers@efficios.com>,
        "jiangshanlai@gmail.com" <jiangshanlai@gmail.com>,
        "Zhang, Jun" <jun.zhang@intel.com>,
        "Xiao, Jin" <jin.xiao@intel.com>,
        "Zhang, Yanmin" <yanmin.zhang@intel.com>,
        "Bai, Jie A" <jie.a.bai@intel.com>
Subject: Re: rcu_preempt caused oom
Reply-To: paulmck@linux.ibm.com
References: <20181204194936.GD4170@linux.ibm.com>
 <CD6925E8781EFD4D8E11882D20FC406D52A16605@SHSMSX104.ccr.corp.intel.com>
 <20181205174435.GU4170@linux.ibm.com>
 <CD6925E8781EFD4D8E11882D20FC406D52A16C46@SHSMSX104.ccr.corp.intel.com>
 <20181206173808.GI4170@linux.ibm.com>
 <CD6925E8781EFD4D8E11882D20FC406D52A180C5@SHSMSX104.ccr.corp.intel.com>
 <20181207141131.GP4170@linux.ibm.com>
 <20181209195601.GA7854@linux.ibm.com>
 <CD6925E8781EFD4D8E11882D20FC406D52A186D0@SHSMSX104.ccr.corp.intel.com>
 <20181211003838.GD4170@linux.ibm.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181211003838.GD4170@linux.ibm.com>
User-Agent: Mutt/1.5.21 (2010-09-15)
X-TM-AS-GCONF: 00
x-cbid: 18121104-0052-0000-0000-00000365319F
X-IBM-SpamModules-Scores: 
X-IBM-SpamModules-Versions: BY=3.00010211; HX=3.00000242; KW=3.00000007;
 PH=3.00000004; SC=3.00000270; SDB=6.01130043; UDB=6.00587171; IPR=6.00910176;
 MB=3.00024649; MTD=3.00000008; XFM=3.00000015; UTC=2018-12-11 04:46:36
X-IBM-AV-DETECTION: SAVI=unused REMOTE=unused XFE=unused
x-cbparentid: 18121104-0053-0000-0000-00005F0FCF2D
Message-Id: <20181211044631.GA19942@linux.ibm.com>
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10434:,, definitions=2018-12-11_02:,,
 signatures=0
X-Proofpoint-Spam-Details: rule=outbound_notspam policy=outbound score=0 priorityscore=1501
 malwarescore=0 suspectscore=0 phishscore=0 bulkscore=0 spamscore=0
 clxscore=1015 lowpriorityscore=0 mlxscore=0 impostorscore=0
 mlxlogscore=999 adultscore=0 classifier=spam adjust=0 reason=mlx
 scancount=1 engine=8.0.1-1810050000 definitions=main-1812110044
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Mon, Dec 10, 2018 at 04:38:38PM -0800, Paul E. McKenney wrote:
> On Mon, Dec 10, 2018 at 06:56:18AM +0000, He, Bo wrote:
> > Hi, 
> >    We have start the test with the CONFIG_PROVE_RCU=y, and also add one 2s to detect the preempt rcu hang, hope we can get more useful logs tomorrow.
> >    I also enclosed the config and the debug patches for you review.
> 
> I instead suggest the (lightly tested) debug patch shown below, which
> tracks wakeups of RCU's grace-period kthreads and dumps them out if a
> given requested grace period fails to start.  Again, it is necessary to
> build with CONFIG_PROVE_RCU=y, that is, with CONFIG_PROVE_LOCKING=y.

Right.  This time without commenting out the wakeup as a test of the
diagnostic.  :-/

Please use the patch below instead of the one that I sent in my
previous email.

							Thanx, Paul

------------------------------------------------------------------------

commit adfc7dff659495a3433d5084256be59eee0ac6df
Author: Paul E. McKenney <paulmck@linux.ibm.com>
Date:   Mon Dec 10 16:33:59 2018 -0800

    rcu: Improve diagnostics for failed RCU grace-period start
    
    Backported from v4.21/v5.0
    
    If a grace period fails to start (for example, because you commented
    out the last two lines of rcu_accelerate_cbs_unlocked()), rcu_core()
    will invoke rcu_check_gp_start_stall(), which will notice and complain.
    However, this complaint is lacking crucial debugging information such
    as when the last wakeup executed and what the value of ->gp_seq was at
    that time.  This commit therefore removes the current pr_alert() from
    rcu_check_gp_start_stall(), instead invoking show_rcu_gp_kthreads(),
    which has been updated to print the needed information, which is collected
    by rcu_gp_kthread_wake().
    
    Signed-off-by: Paul E. McKenney <paulmck@linux.ibm.com>

diff --git a/kernel/rcu/tree.c b/kernel/rcu/tree.c
index 0b760c1369f7..4bcd8753e293 100644
--- a/kernel/rcu/tree.c
+++ b/kernel/rcu/tree.c
@@ -626,25 +626,57 @@ void rcu_sched_force_quiescent_state(void)
 }
 EXPORT_SYMBOL_GPL(rcu_sched_force_quiescent_state);
 
+/*
+ * Convert a ->gp_state value to a character string.
+ */
+static const char *gp_state_getname(short gs)
+{
+	if (gs < 0 || gs >= ARRAY_SIZE(gp_state_names))
+		return "???";
+	return gp_state_names[gs];
+}
+
+/*
+ * Return the root node of the specified rcu_state structure.
+ */
+static struct rcu_node *rcu_get_root(struct rcu_state *rsp)
+{
+	return &rsp->node[0];
+}
+
 /*
  * Show the state of the grace-period kthreads.
  */
 void show_rcu_gp_kthreads(void)
 {
 	int cpu;
+	unsigned long j;
+	unsigned long ja;
+	unsigned long jr;
+	unsigned long jw;
 	struct rcu_data *rdp;
 	struct rcu_node *rnp;
 	struct rcu_state *rsp;
 
+	j = jiffies;
 	for_each_rcu_flavor(rsp) {
-		pr_info("%s: wait state: %d ->state: %#lx\n",
-			rsp->name, rsp->gp_state, rsp->gp_kthread->state);
+		ja = j - READ_ONCE(rsp->gp_activity);
+		jr = j - READ_ONCE(rsp->gp_req_activity);
+		jw = j - READ_ONCE(rsp->gp_wake_time);
+		pr_info("%s: wait state: %s(%d) ->state: %#lx delta ->gp_activity %lu ->gp_req_activity %lu ->gp_wake_time %lu ->gp_wake_seq %ld ->gp_seq %ld ->gp_seq_needed %ld ->gp_flags %#x\n",
+			rsp->name, gp_state_getname(rsp->gp_state),
+			rsp->gp_state,
+			rsp->gp_kthread ? rsp->gp_kthread->state : 0x1ffffL,
+			ja, jr, jw, (long)READ_ONCE(rsp->gp_wake_seq),
+			(long)READ_ONCE(rsp->gp_seq),
+			(long)READ_ONCE(rcu_get_root(rsp)->gp_seq_needed),
+			READ_ONCE(rsp->gp_flags));
 		rcu_for_each_node_breadth_first(rsp, rnp) {
 			if (ULONG_CMP_GE(rsp->gp_seq, rnp->gp_seq_needed))
 				continue;
-			pr_info("\trcu_node %d:%d ->gp_seq %lu ->gp_seq_needed %lu\n",
-				rnp->grplo, rnp->grphi, rnp->gp_seq,
-				rnp->gp_seq_needed);
+			pr_info("\trcu_node %d:%d ->gp_seq %ld ->gp_seq_needed %ld\n",
+				rnp->grplo, rnp->grphi, (long)rnp->gp_seq,
+				(long)rnp->gp_seq_needed);
 			if (!rcu_is_leaf_node(rnp))
 				continue;
 			for_each_leaf_node_possible_cpu(rnp, cpu) {
@@ -653,8 +685,8 @@ void show_rcu_gp_kthreads(void)
 				    ULONG_CMP_GE(rsp->gp_seq,
 						 rdp->gp_seq_needed))
 					continue;
-				pr_info("\tcpu %d ->gp_seq_needed %lu\n",
-					cpu, rdp->gp_seq_needed);
+				pr_info("\tcpu %d ->gp_seq_needed %ld\n",
+					cpu, (long)rdp->gp_seq_needed);
 			}
 		}
 		/* sched_show_task(rsp->gp_kthread); */
@@ -690,14 +722,6 @@ void rcutorture_get_gp_data(enum rcutorture_type test_type, int *flags,
 }
 EXPORT_SYMBOL_GPL(rcutorture_get_gp_data);
 
-/*
- * Return the root node of the specified rcu_state structure.
- */
-static struct rcu_node *rcu_get_root(struct rcu_state *rsp)
-{
-	return &rsp->node[0];
-}
-
 /*
  * Enter an RCU extended quiescent state, which can be either the
  * idle loop or adaptive-tickless usermode execution.
@@ -1285,16 +1309,6 @@ static void record_gp_stall_check_time(struct rcu_state *rsp)
 	rsp->n_force_qs_gpstart = READ_ONCE(rsp->n_force_qs);
 }
 
-/*
- * Convert a ->gp_state value to a character string.
- */
-static const char *gp_state_getname(short gs)
-{
-	if (gs < 0 || gs >= ARRAY_SIZE(gp_state_names))
-		return "???";
-	return gp_state_names[gs];
-}
-
 /*
  * Complain about starvation of grace-period kthread.
  */
@@ -1693,7 +1707,8 @@ static bool rcu_future_gp_cleanup(struct rcu_state *rsp, struct rcu_node *rnp)
  * Don't do a self-awaken, and don't bother awakening when there is
  * nothing for the grace-period kthread to do (as in several CPUs
  * raced to awaken, and we lost), and finally don't try to awaken
- * a kthread that has not yet been created.
+ * a kthread that has not yet been created.  If all those checks are
+ * passed, track some debug information and awaken.
  */
 static void rcu_gp_kthread_wake(struct rcu_state *rsp)
 {
@@ -1701,6 +1716,8 @@ static void rcu_gp_kthread_wake(struct rcu_state *rsp)
 	    !READ_ONCE(rsp->gp_flags) ||
 	    !rsp->gp_kthread)
 		return;
+	WRITE_ONCE(rsp->gp_wake_time, jiffies);
+	WRITE_ONCE(rsp->gp_wake_seq, READ_ONCE(rsp->gp_seq));
 	swake_up_one(&rsp->gp_wq);
 }
 
@@ -2802,16 +2819,11 @@ rcu_check_gp_start_stall(struct rcu_state *rsp, struct rcu_node *rnp,
 		raw_spin_unlock_irqrestore_rcu_node(rnp, flags);
 		return;
 	}
-	pr_alert("%s: g%ld->%ld gar:%lu ga:%lu f%#x gs:%d %s->state:%#lx\n",
-		 __func__, (long)READ_ONCE(rsp->gp_seq),
-		 (long)READ_ONCE(rnp_root->gp_seq_needed),
-		 j - rsp->gp_req_activity, j - rsp->gp_activity,
-		 rsp->gp_flags, rsp->gp_state, rsp->name,
-		 rsp->gp_kthread ? rsp->gp_kthread->state : 0x1ffffL);
 	WARN_ON(1);
 	if (rnp_root != rnp)
 		raw_spin_unlock_rcu_node(rnp_root);
 	raw_spin_unlock_irqrestore_rcu_node(rnp, flags);
+	show_rcu_gp_kthreads();
 }
 
 /*
diff --git a/kernel/rcu/tree.h b/kernel/rcu/tree.h
index 4e74df768c57..0e051d9b5f1a 100644
--- a/kernel/rcu/tree.h
+++ b/kernel/rcu/tree.h
@@ -327,6 +327,8 @@ struct rcu_state {
 	struct swait_queue_head gp_wq;		/* Where GP task waits. */
 	short gp_flags;				/* Commands for GP task. */
 	short gp_state;				/* GP kthread sleep state. */
+	unsigned long gp_wake_time;		/* Last GP kthread wake. */
+	unsigned long gp_wake_seq;		/* ->gp_seq at ^^^. */
 
 	/* End of fields guarded by root rcu_node's lock. */
 

