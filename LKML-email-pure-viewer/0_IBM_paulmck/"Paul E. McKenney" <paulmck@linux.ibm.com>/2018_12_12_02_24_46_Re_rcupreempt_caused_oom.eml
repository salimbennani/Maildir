Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  12 Dec 2018 19:41:01 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 882285803DC;
	Tue, 11 Dec 2018 18:25:00 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga006-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 11 Dec 2018 18:25:00 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AAl/uBBJv4s5jUdh+vdmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgULvXzrarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZUMhfVzJPDJ6m?=
 =?us-ascii?q?b4sBAOUOIftXoIvzqFUNthu+HQuhCfjzyjNUnHL6wbE23v4/HQzAwQcuH8gOsH?=
 =?us-ascii?q?PRrNjtOqscS/q6zLTMzT7eYP1awyr25o/UfR4kv/6MW7RwftTRyEUhCgjIiU2Q?=
 =?us-ascii?q?ppb4PzOR0+QCr2ub4vFkVeKujW4ntg5wriKuxsg3j4nFnJ4aylfB9Shgxos+ON?=
 =?us-ascii?q?62SFZjbNK6DJddszuWO5Z4T888WW1kpSU3xqEctZO6fiUG0JAqywTcZvGHaYSE?=
 =?us-ascii?q?/xPuWeeLLTtlh39ofq+0iQyo/ki60OL8U9G50FZUoSpBldnBrm4N1xPN5cidUP?=
 =?us-ascii?q?d9/Vmu2SyJ1w/N7uFIO0c0lbDUK5I5w74wkIQcsVjbEyPohEn7iLWaelgq9+S2?=
 =?us-ascii?q?8ejrf7brqoOGO4J1iAzyKqEulda+AeQ8PAgORW+b+eGk2b3n/E35RqhKj/Ivnq?=
 =?us-ascii?q?narp/aP8IbqbC9AwNM1YYi5RC/ACm80NkDg3kHI0xKeAidg4jqJV7OOvb4Aum7?=
 =?us-ascii?q?g1i2lzdr3f/GMqX7AprRNnjDjKvhfbFl5k5YyQozzs5Q64hbC7EcO//zXk7xtN?=
 =?us-ascii?q?rFDh42KQC0wuDnCMlj2YMaQ26AHqiZMKbKu1+S+u0vO/WMZJMSuDvlK/gq/f/u?=
 =?us-ascii?q?jWMjll8aZ6Wp3YYXZ2q+HvRpOEiZZXvsgtEcEWYFpAY+TerqiEGcXj5XfXq9Q6?=
 =?us-ascii?q?U85jQjAoK8EYjDXpytgKCG3CqjHJ1WYX5JBkqPEXfvcYWEXfAMZTmWIs9glDwE?=
 =?us-ascii?q?SLegR5Ug1RGoqA/11b5nIvDI9S0fsJLpzMJ16PHLlREu6Tx0CNyQ3HuWT2F0mW?=
 =?us-ascii?q?MIRCU63Lplrkx/0VqD1al4g/pFFd1c/f9JUwE6NYLCwOx+Edz9RgXBftKRQla8?=
 =?us-ascii?q?XtqmGS0xTs42w9IWYEZyAdOiggrH3yqrGbAVkbOLCYcw8qLd2XjxOsl8x2zH1K?=
 =?us-ascii?q?knk1kpXM9POXe6ia548gjZH5TJnFmBl6a2aaQc2zbA+3qZwmqQok5USg5wXr/D?=
 =?us-ascii?q?XXAEeETWq9P15kfBT7+rDbQqKQ9Byc+EKqtXZdzll1RGRPH/ONvAZ2K9gXu/BR?=
 =?us-ascii?q?GNxrmUdorlZ30d3DnBCEgDiw0c4GyJNRYgCSu7o2LRFjpuFUnxbEPq6uR+rHK7?=
 =?us-ascii?q?TkkpzwCFdUFh1ry1+gILivyYUf8cwrUEuCI5oTVuAFm9x87WC8aHpwd5YKVcYN?=
 =?us-ascii?q?Y94FBb1WLZtw1xJICgI7plhl4EdwR3vkXu1xpsB4VEkMgqqm4qzQVoJaKZ1lNB?=
 =?us-ascii?q?ay2X3ZTqNrLLLWny+Qila7TK1VHGzNaW5qAP5ewipFXnog6oGVQt8nV939ZOzn?=
 =?us-ascii?q?uT+4/FDAwRUZL2TEY67Bx6p7DcYikg6ILYz3xsMa+osjDc39IlHvcqyhGlf91H?=
 =?us-ascii?q?KqOLCBfyE9EGB8ipMOErm0WpYggYM+xI9a80P9mpd/2J2KOwOOZgnTSmjXlI4Y?=
 =?us-ascii?q?xn00KM8TZ8RfDM35of3/6Y2Q6HXS/mjFi9qsD3hZxEZTYKE2qlyCjrGJReZrdv?=
 =?us-ascii?q?coYME2uuJdO4xs9/h5L0R3FX7lqjCE4Y18+zfhqSaUfw3QlR1UQRvHymljG0zz?=
 =?us-ascii?q?1ykzE1sKWf2DbCzPjldBoCImRLXnVtjU/wIYioiNAXREipbwkzmBql/0r63LVb?=
 =?us-ascii?q?pKJkImnXQEdIeTX2Lm54XquxsLqCf9BA6JcyvSpLV+S8ZEiQSqThrBsCzyPjA2?=
 =?us-ascii?q?xeySg5dz6woJX5nB96iGWHIHZotnXZesJwxRbZ5NPCQ/5cxT4GRCh+iTnKCVmw?=
 =?us-ascii?q?Jdip/dOIl5jdtuCyTX6uVppWcSPz14OPqDO75XF2AR24h/2ymsfoEQ8g3S/51t?=
 =?us-ascii?q?lqUz7FrBL9YontyqS7PvhrfkhuBF/g9cV6HptynZc3hJEVwXIanIma/WIbkWfv?=
 =?us-ascii?q?NtVWwaH+Y2AMRTIRw97V/RLq2EtsLn+Sw4L5V3OdwtZuZtWgY2MW3D494N5OCK?=
 =?us-ascii?q?uO8LNEmi51qEKirQ3Nefh9gisdyfw25X4fguEJuxAiwj+TA78MBklYITLjlw6T?=
 =?us-ascii?q?4N+gtqVXa32icbyx1Ep4gNCgA6uOogBaWHblZJgiGTV84dl4MFLJyHfz8J3reM?=
 =?us-ascii?q?HMbdIPsR2ZiwvAj+9QKJ4rl/sFnyxnOX/mvX0+yu42lhhu3ZC8vIiaJGRh5qO5?=
 =?us-ascii?q?AhhENjLrY8Mf4C3ijaFbnsyOxYCgAo1hGikXXJvvVf+nCygdtfPjNwaTCjE8rm?=
 =?us-ascii?q?qbFKHbHQ+e7kdmsn3OH4qqN3GROHkW09FiSAOBK0xYhQAeRC86kYIhFgC22Mzh?=
 =?us-ascii?q?d1905jIL6V79tBRM0fhkNwXlXmfcuQeoaSo0SJ6FIxpN9QxC40bVMcqD7uN8BS?=
 =?us-ascii?q?1Y/5uhrBCTJWyffQhHEWYJWkmcDVD5Irau/cXA8/SfBuemL/rOZqiOqfVDV/iS?=
 =?us-ascii?q?w5KjyJBm/zGKNsWAJXRiC/w72kxeXXF2AcjZmjMPSzAJmCLJdcKUuBC8+ihvpM?=
 =?us-ascii?q?Cl7PvrQB7v5ZeIC7ZKMdVg5RG2gaSAN+6Rnip5KixY1pQDxXDW0rgfwUUShjpq?=
 =?us-ascii?q?dzmsF7QAqCHMQLjRmq9REx4UdSdzONFU4KI72wlHIdTbhc/t1r5kkv41DE9IWk?=
 =?us-ascii?q?b8ms6yf8wFPWG8OEnDBEaKL7mGITzLw8fqYaKzU7FQjeNUtwGutjafCUPsIjOD?=
 =?us-ascii?q?lzzxXRC1Le5MlD2bPABZuIylbhZtCG3jQMj6ZRGhLNB3jSM5wbsvi3PONG4cNy?=
 =?us-ascii?q?V8ckxXor2R6yNYnutwG2hb4nV5KumEnj6T7/PEJZYOrftrHiN0mvpa4XsgzbtV?=
 =?us-ascii?q?6SBERPptlyrTrt5huVemkuaUxzpjURpOrCtLhY2RsUVjP6XZ6odPWXLe8B0R6m?=
 =?us-ascii?q?WQDkdCm9wwQP3i/+h6zZKHwKj0bjdP29PS4cYYQcPTLZTUCnc5NQvVH2vMBRYB?=
 =?us-ascii?q?SDWoHWXegVFN1vCY8zueqZ1phILrnc9EcrZGUBQYULs/AWdoGtoPMd0/CistjL?=
 =?us-ascii?q?qeh80g4Xu4sQmXRc9f+JvAU6TBUr3UND+FgOwcNFMzyrTiINFWb9Wj1g=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAADacBBch0O0hNFlGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGDayeMFF+LM4INFIh/jj8UgWIPAQEYEwGEQAKCbCI?=
 =?us-ascii?q?0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpL4I2JAGCYQEBAQEDAQIPFRM/BgYDAQEKE?=
 =?us-ascii?q?QMBAQEBCSUDDAUNCyMOEwUdgn+BagMVAwKbNYlYAQEBgWozhTGCVQ2CHIw7EQa?=
 =?us-ascii?q?BQD+EI4JXgXcBEgGFegKJMQqBcIQUfVGPGScuBwICjWM9gyQLGIFcI4R0aIllL?=
 =?us-ascii?q?I54iWgCBAYFAhMBgUaBHXFwFUgNgTOBH4InF44+UQGBBAEBIYgFgj4BAQ?=
X-IPAS-Result: =?us-ascii?q?A0ABAADacBBch0O0hNFlGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGDayeMFF+LM4INFIh/jj8UgWIPAQEYEwGEQAKCbCI0CQ0BAwEBAQEBA?=
 =?us-ascii?q?QIBEwEBAQgNCQgpL4I2JAGCYQEBAQEDAQIPFRM/BgYDAQEKEQMBAQEBCSUDDAU?=
 =?us-ascii?q?NCyMOEwUdgn+BagMVAwKbNYlYAQEBgWozhTGCVQ2CHIw7EQaBQD+EI4JXgXcBE?=
 =?us-ascii?q?gGFegKJMQqBcIQUfVGPGScuBwICjWM9gyQLGIFcI4R0aIllLI54iWgCBAYFAhM?=
 =?us-ascii?q?BgUaBHXFwFUgNgTOBH4InF44+UQGBBAEBIYgFgj4BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,343,1539673200"; 
   d="scan'208";a="55974275"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 11 Dec 2018 18:24:58 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726343AbeLLCYz (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 11 Dec 2018 21:24:55 -0500
Received: from mx0a-001b2d01.pphosted.com ([148.163.156.1]:44238 "EHLO
        mx0a-001b2d01.pphosted.com" rhost-flags-OK-OK-OK-OK)
        by vger.kernel.org with ESMTP id S1726218AbeLLCYz (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 11 Dec 2018 21:24:55 -0500
Received: from pps.filterd (m0098404.ppops.net [127.0.0.1])
        by mx0a-001b2d01.pphosted.com (8.16.0.22/8.16.0.22) with SMTP id wBC2OMQO033417
        for <linux-kernel@vger.kernel.org>; Tue, 11 Dec 2018 21:24:54 -0500
Received: from e13.ny.us.ibm.com (e13.ny.us.ibm.com [129.33.205.203])
        by mx0a-001b2d01.pphosted.com with ESMTP id 2paqh43w6r-1
        (version=TLSv1.2 cipher=AES256-GCM-SHA384 bits=256 verify=NOT)
        for <linux-kernel@vger.kernel.org>; Tue, 11 Dec 2018 21:24:54 -0500
Received: from localhost
        by e13.ny.us.ibm.com with IBM ESMTP SMTP Gateway: Authorized Use Only! Violators will be prosecuted
        for <linux-kernel@vger.kernel.org> from <paulmck@linux.vnet.ibm.com>;
        Wed, 12 Dec 2018 02:24:52 -0000
Received: from b01cxnp23032.gho.pok.ibm.com (9.57.198.27)
        by e13.ny.us.ibm.com (146.89.104.200) with IBM ESMTP SMTP Gateway: Authorized Use Only! Violators will be prosecuted;
        (version=TLSv1/SSLv3 cipher=AES256-GCM-SHA384 bits=256/256)
        Wed, 12 Dec 2018 02:24:48 -0000
Received: from b01ledav003.gho.pok.ibm.com (b01ledav003.gho.pok.ibm.com [9.57.199.108])
        by b01cxnp23032.gho.pok.ibm.com (8.14.9/8.14.9/NCO v10.0) with ESMTP id wBC2OlrA24444996
        (version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256 verify=FAIL);
        Wed, 12 Dec 2018 02:24:47 GMT
Received: from b01ledav003.gho.pok.ibm.com (unknown [127.0.0.1])
        by IMSVA (Postfix) with ESMTP id 1A8CAB205F;
        Wed, 12 Dec 2018 02:24:47 +0000 (GMT)
Received: from b01ledav003.gho.pok.ibm.com (unknown [127.0.0.1])
        by IMSVA (Postfix) with ESMTP id D80BDB2064;
        Wed, 12 Dec 2018 02:24:46 +0000 (GMT)
Received: from paulmck-ThinkPad-W541 (unknown [9.85.166.18])
        by b01ledav003.gho.pok.ibm.com (Postfix) with ESMTP;
        Wed, 12 Dec 2018 02:24:46 +0000 (GMT)
Received: by paulmck-ThinkPad-W541 (Postfix, from userid 1000)
        id 5DF3A16C5FCC; Tue, 11 Dec 2018 18:24:46 -0800 (PST)
Date: Tue, 11 Dec 2018 18:24:46 -0800
From: "Paul E. McKenney" <paulmck@linux.ibm.com>
To: "He, Bo" <bo.he@intel.com>
Cc: Steven Rostedt <rostedt@goodmis.org>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        "josh@joshtriplett.org" <josh@joshtriplett.org>,
        "mathieu.desnoyers@efficios.com" <mathieu.desnoyers@efficios.com>,
        "jiangshanlai@gmail.com" <jiangshanlai@gmail.com>,
        "Zhang, Jun" <jun.zhang@intel.com>,
        "Xiao, Jin" <jin.xiao@intel.com>,
        "Zhang, Yanmin" <yanmin.zhang@intel.com>,
        "Bai, Jie A" <jie.a.bai@intel.com>
Subject: Re: rcu_preempt caused oom
Reply-To: paulmck@linux.ibm.com
References: <20181205174435.GU4170@linux.ibm.com>
 <CD6925E8781EFD4D8E11882D20FC406D52A16C46@SHSMSX104.ccr.corp.intel.com>
 <20181206173808.GI4170@linux.ibm.com>
 <CD6925E8781EFD4D8E11882D20FC406D52A180C5@SHSMSX104.ccr.corp.intel.com>
 <20181207141131.GP4170@linux.ibm.com>
 <20181209195601.GA7854@linux.ibm.com>
 <CD6925E8781EFD4D8E11882D20FC406D52A186D0@SHSMSX104.ccr.corp.intel.com>
 <20181211003838.GD4170@linux.ibm.com>
 <20181211044631.GA19942@linux.ibm.com>
 <CD6925E8781EFD4D8E11882D20FC406D52A18E53@SHSMSX104.ccr.corp.intel.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <CD6925E8781EFD4D8E11882D20FC406D52A18E53@SHSMSX104.ccr.corp.intel.com>
User-Agent: Mutt/1.5.21 (2010-09-15)
X-TM-AS-GCONF: 00
x-cbid: 18121202-0064-0000-0000-00000384DF36
X-IBM-SpamModules-Scores: 
X-IBM-SpamModules-Versions: BY=3.00010214; HX=3.00000242; KW=3.00000007;
 PH=3.00000004; SC=3.00000270; SDB=6.01130475; UDB=6.00587430; IPR=6.00910609;
 MB=3.00024658; MTD=3.00000008; XFM=3.00000015; UTC=2018-12-12 02:24:51
X-IBM-AV-DETECTION: SAVI=unused REMOTE=unused XFE=unused
x-cbparentid: 18121202-0065-0000-0000-00003BA57812
Message-Id: <20181212022446.GV4170@linux.ibm.com>
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10434:,, definitions=2018-12-11_09:,,
 signatures=0
X-Proofpoint-Spam-Details: rule=outbound_notspam policy=outbound score=0 priorityscore=1501
 malwarescore=0 suspectscore=0 phishscore=0 bulkscore=0 spamscore=0
 clxscore=1015 lowpriorityscore=0 mlxscore=0 impostorscore=0
 mlxlogscore=999 adultscore=0 classifier=spam adjust=0 reason=mlx
 scancount=1 engine=8.0.1-1810050000 definitions=main-1812120017
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Wed, Dec 12, 2018 at 01:37:40AM +0000, He, Bo wrote:
> We reproduced the issue panic in hung_task with the patch "Improve diagnostics for failed RCU grace-period start", but unfortunately maybe it's due to the loglevel, the show_rcu_gp_kthreads doesn't print any logs, we will improve the build and run the test to double check.

Well, at least the diagnostics didn't prevent the problem from happening.  ;-)

							Thanx, Paul

> -----Original Message-----
> From: Paul E. McKenney <paulmck@linux.ibm.com> 
> Sent: Tuesday, December 11, 2018 12:47 PM
> To: He, Bo <bo.he@intel.com>
> Cc: Steven Rostedt <rostedt@goodmis.org>; linux-kernel@vger.kernel.org; josh@joshtriplett.org; mathieu.desnoyers@efficios.com; jiangshanlai@gmail.com; Zhang, Jun <jun.zhang@intel.com>; Xiao, Jin <jin.xiao@intel.com>; Zhang, Yanmin <yanmin.zhang@intel.com>; Bai, Jie A <jie.a.bai@intel.com>
> Subject: Re: rcu_preempt caused oom
> 
> On Mon, Dec 10, 2018 at 04:38:38PM -0800, Paul E. McKenney wrote:
> > On Mon, Dec 10, 2018 at 06:56:18AM +0000, He, Bo wrote:
> > > Hi, 
> > >    We have start the test with the CONFIG_PROVE_RCU=y, and also add one 2s to detect the preempt rcu hang, hope we can get more useful logs tomorrow.
> > >    I also enclosed the config and the debug patches for you review.
> > 
> > I instead suggest the (lightly tested) debug patch shown below, which 
> > tracks wakeups of RCU's grace-period kthreads and dumps them out if a 
> > given requested grace period fails to start.  Again, it is necessary 
> > to build with CONFIG_PROVE_RCU=y, that is, with CONFIG_PROVE_LOCKING=y.
> 
> Right.  This time without commenting out the wakeup as a test of the diagnostic.  :-/
> 
> Please use the patch below instead of the one that I sent in my previous email.
> 
> 							Thanx, Paul
> 
> ------------------------------------------------------------------------
> 
> commit adfc7dff659495a3433d5084256be59eee0ac6df
> Author: Paul E. McKenney <paulmck@linux.ibm.com>
> Date:   Mon Dec 10 16:33:59 2018 -0800
> 
>     rcu: Improve diagnostics for failed RCU grace-period start
>     
>     Backported from v4.21/v5.0
>     
>     If a grace period fails to start (for example, because you commented
>     out the last two lines of rcu_accelerate_cbs_unlocked()), rcu_core()
>     will invoke rcu_check_gp_start_stall(), which will notice and complain.
>     However, this complaint is lacking crucial debugging information such
>     as when the last wakeup executed and what the value of ->gp_seq was at
>     that time.  This commit therefore removes the current pr_alert() from
>     rcu_check_gp_start_stall(), instead invoking show_rcu_gp_kthreads(),
>     which has been updated to print the needed information, which is collected
>     by rcu_gp_kthread_wake().
>     
>     Signed-off-by: Paul E. McKenney <paulmck@linux.ibm.com>
> 
> diff --git a/kernel/rcu/tree.c b/kernel/rcu/tree.c index 0b760c1369f7..4bcd8753e293 100644
> --- a/kernel/rcu/tree.c
> +++ b/kernel/rcu/tree.c
> @@ -626,25 +626,57 @@ void rcu_sched_force_quiescent_state(void)
>  }
>  EXPORT_SYMBOL_GPL(rcu_sched_force_quiescent_state);
>  
> +/*
> + * Convert a ->gp_state value to a character string.
> + */
> +static const char *gp_state_getname(short gs) {
> +	if (gs < 0 || gs >= ARRAY_SIZE(gp_state_names))
> +		return "???";
> +	return gp_state_names[gs];
> +}
> +
> +/*
> + * Return the root node of the specified rcu_state structure.
> + */
> +static struct rcu_node *rcu_get_root(struct rcu_state *rsp) {
> +	return &rsp->node[0];
> +}
> +
>  /*
>   * Show the state of the grace-period kthreads.
>   */
>  void show_rcu_gp_kthreads(void)
>  {
>  	int cpu;
> +	unsigned long j;
> +	unsigned long ja;
> +	unsigned long jr;
> +	unsigned long jw;
>  	struct rcu_data *rdp;
>  	struct rcu_node *rnp;
>  	struct rcu_state *rsp;
>  
> +	j = jiffies;
>  	for_each_rcu_flavor(rsp) {
> -		pr_info("%s: wait state: %d ->state: %#lx\n",
> -			rsp->name, rsp->gp_state, rsp->gp_kthread->state);
> +		ja = j - READ_ONCE(rsp->gp_activity);
> +		jr = j - READ_ONCE(rsp->gp_req_activity);
> +		jw = j - READ_ONCE(rsp->gp_wake_time);
> +		pr_info("%s: wait state: %s(%d) ->state: %#lx delta ->gp_activity %lu ->gp_req_activity %lu ->gp_wake_time %lu ->gp_wake_seq %ld ->gp_seq %ld ->gp_seq_needed %ld ->gp_flags %#x\n",
> +			rsp->name, gp_state_getname(rsp->gp_state),
> +			rsp->gp_state,
> +			rsp->gp_kthread ? rsp->gp_kthread->state : 0x1ffffL,
> +			ja, jr, jw, (long)READ_ONCE(rsp->gp_wake_seq),
> +			(long)READ_ONCE(rsp->gp_seq),
> +			(long)READ_ONCE(rcu_get_root(rsp)->gp_seq_needed),
> +			READ_ONCE(rsp->gp_flags));
>  		rcu_for_each_node_breadth_first(rsp, rnp) {
>  			if (ULONG_CMP_GE(rsp->gp_seq, rnp->gp_seq_needed))
>  				continue;
> -			pr_info("\trcu_node %d:%d ->gp_seq %lu ->gp_seq_needed %lu\n",
> -				rnp->grplo, rnp->grphi, rnp->gp_seq,
> -				rnp->gp_seq_needed);
> +			pr_info("\trcu_node %d:%d ->gp_seq %ld ->gp_seq_needed %ld\n",
> +				rnp->grplo, rnp->grphi, (long)rnp->gp_seq,
> +				(long)rnp->gp_seq_needed);
>  			if (!rcu_is_leaf_node(rnp))
>  				continue;
>  			for_each_leaf_node_possible_cpu(rnp, cpu) { @@ -653,8 +685,8 @@ void show_rcu_gp_kthreads(void)
>  				    ULONG_CMP_GE(rsp->gp_seq,
>  						 rdp->gp_seq_needed))
>  					continue;
> -				pr_info("\tcpu %d ->gp_seq_needed %lu\n",
> -					cpu, rdp->gp_seq_needed);
> +				pr_info("\tcpu %d ->gp_seq_needed %ld\n",
> +					cpu, (long)rdp->gp_seq_needed);
>  			}
>  		}
>  		/* sched_show_task(rsp->gp_kthread); */ @@ -690,14 +722,6 @@ void rcutorture_get_gp_data(enum rcutorture_type test_type, int *flags,  }  EXPORT_SYMBOL_GPL(rcutorture_get_gp_data);
>  
> -/*
> - * Return the root node of the specified rcu_state structure.
> - */
> -static struct rcu_node *rcu_get_root(struct rcu_state *rsp) -{
> -	return &rsp->node[0];
> -}
> -
>  /*
>   * Enter an RCU extended quiescent state, which can be either the
>   * idle loop or adaptive-tickless usermode execution.
> @@ -1285,16 +1309,6 @@ static void record_gp_stall_check_time(struct rcu_state *rsp)
>  	rsp->n_force_qs_gpstart = READ_ONCE(rsp->n_force_qs);  }
>  
> -/*
> - * Convert a ->gp_state value to a character string.
> - */
> -static const char *gp_state_getname(short gs) -{
> -	if (gs < 0 || gs >= ARRAY_SIZE(gp_state_names))
> -		return "???";
> -	return gp_state_names[gs];
> -}
> -
>  /*
>   * Complain about starvation of grace-period kthread.
>   */
> @@ -1693,7 +1707,8 @@ static bool rcu_future_gp_cleanup(struct rcu_state *rsp, struct rcu_node *rnp)
>   * Don't do a self-awaken, and don't bother awakening when there is
>   * nothing for the grace-period kthread to do (as in several CPUs
>   * raced to awaken, and we lost), and finally don't try to awaken
> - * a kthread that has not yet been created.
> + * a kthread that has not yet been created.  If all those checks are
> + * passed, track some debug information and awaken.
>   */
>  static void rcu_gp_kthread_wake(struct rcu_state *rsp)  { @@ -1701,6 +1716,8 @@ static void rcu_gp_kthread_wake(struct rcu_state *rsp)
>  	    !READ_ONCE(rsp->gp_flags) ||
>  	    !rsp->gp_kthread)
>  		return;
> +	WRITE_ONCE(rsp->gp_wake_time, jiffies);
> +	WRITE_ONCE(rsp->gp_wake_seq, READ_ONCE(rsp->gp_seq));
>  	swake_up_one(&rsp->gp_wq);
>  }
>  
> @@ -2802,16 +2819,11 @@ rcu_check_gp_start_stall(struct rcu_state *rsp, struct rcu_node *rnp,
>  		raw_spin_unlock_irqrestore_rcu_node(rnp, flags);
>  		return;
>  	}
> -	pr_alert("%s: g%ld->%ld gar:%lu ga:%lu f%#x gs:%d %s->state:%#lx\n",
> -		 __func__, (long)READ_ONCE(rsp->gp_seq),
> -		 (long)READ_ONCE(rnp_root->gp_seq_needed),
> -		 j - rsp->gp_req_activity, j - rsp->gp_activity,
> -		 rsp->gp_flags, rsp->gp_state, rsp->name,
> -		 rsp->gp_kthread ? rsp->gp_kthread->state : 0x1ffffL);
>  	WARN_ON(1);
>  	if (rnp_root != rnp)
>  		raw_spin_unlock_rcu_node(rnp_root);
>  	raw_spin_unlock_irqrestore_rcu_node(rnp, flags);
> +	show_rcu_gp_kthreads();
>  }
>  
>  /*
> diff --git a/kernel/rcu/tree.h b/kernel/rcu/tree.h index 4e74df768c57..0e051d9b5f1a 100644
> --- a/kernel/rcu/tree.h
> +++ b/kernel/rcu/tree.h
> @@ -327,6 +327,8 @@ struct rcu_state {
>  	struct swait_queue_head gp_wq;		/* Where GP task waits. */
>  	short gp_flags;				/* Commands for GP task. */
>  	short gp_state;				/* GP kthread sleep state. */
> +	unsigned long gp_wake_time;		/* Last GP kthread wake. */
> +	unsigned long gp_wake_seq;		/* ->gp_seq at ^^^. */
>  
>  	/* End of fields guarded by root rcu_node's lock. */
>  
> 


