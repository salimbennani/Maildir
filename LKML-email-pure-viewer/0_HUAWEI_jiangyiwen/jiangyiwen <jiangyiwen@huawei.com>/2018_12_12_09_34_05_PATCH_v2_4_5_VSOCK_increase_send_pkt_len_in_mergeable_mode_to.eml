Return-Path: <virtualization-bounces@lists.linux-foundation.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 21:20:15 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 056C458079C
	for <like.xu@linux.intel.com>; Wed, 12 Dec 2018 22:13:48 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga003-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 12 Dec 2018 22:13:47 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AS7EQ7hz/Cv+x0wLXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0usRLvad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXXRPUMZMWSJCDI2z?=
 =?us-ascii?q?YYQAD+sZPetarYfwqEYCoBWiCQawC+3v0SFHi2Tq3aA4yestDR3K0QI+E98IrX?=
 =?us-ascii?q?/arM/1NKAXUe2tzqnIzC/Mb/VZ2Tb96YjJfA4uofeRVr93c8rRyFMgFwXKjlSQ?=
 =?us-ascii?q?qIzkMS2a1uIWvmib8upvT+yuhHAmqw1rvjevwcIsh5DPi4kIxF7E8iB5z5w0Jd?=
 =?us-ascii?q?2+UEN7Zd+kEJ1NtyCVOYt2Rd4iQ2d1tykg1r0GuJm7fC4QxJQg3R7fZPqKeJWL?=
 =?us-ascii?q?7BL7TOudPDh1iG5/dL6hmhq+7FKsxvD9W8SwylpGszRJnsHRunwRzRDf98qKR/?=
 =?us-ascii?q?ln8ku82DuDzR3f5+BHLEwsmqfWK4QtzqA/m5cXq0jPADL6lFvsgKKYdkgp/PWj?=
 =?us-ascii?q?5f79bbX8vJCcMpd5igHgPaQqncyyGeE4PRIPX2if4+i80Lzj/UvkQLRFgP02lb?=
 =?us-ascii?q?TZsJbHKssBuq65AghV0oA55xa4FTem38wUnXgBLF1bZBKKl5XlNl7SLPziE/uz?=
 =?us-ascii?q?nkmgnC12y/3HOrDtGIjBImbbnLfkZ7l96kpcyAQpzdBY4pJZEq8BIPPpWk/tqd?=
 =?us-ascii?q?zXFBs5Mw21wun9FNV914QeWWSWDqCCN6PSrFmI6f4xLOmXf4IVvDf9K+M55/71?=
 =?us-ascii?q?l3M5nV4dfa+03ZoYcXy4EPNmI1ifYXXxmNgBDWYKvg04TODwj12CSzFTa26oX6?=
 =?us-ascii?q?0g/jE7FJ6mDYDbS4CpgbyB3zm0EodZZ2BbEV2MFXbod4OZW/YDci6SI8lhkiAa?=
 =?us-ascii?q?WrilUYMuyRautAqpg4dhNffery0EqYr4hp8y4+zIiQp08T1yEtST1HyLQ2hon2?=
 =?us-ascii?q?QOATgs0+d6qE15z16Flq9gn/1fE8cU+fJTThozMZ/OxvB7DNahZwTaY93cTV+n?=
 =?us-ascii?q?RsmhUy8wVM4sytsPcU9hGtKkywrOxjenGKM9k72QGIdy9qPawmi0KcFgzXrPyK?=
 =?us-ascii?q?gmiR8hWMQYLnCshKN0613OAZXUmV6SjaegePcg23v26GqNxGzGnEhaVgl7Q6SN?=
 =?us-ascii?q?CWsDa0Xfq9TwzlnPQ7+nFfIsNQ4XjYbID6pBatTkiR19Ar/fI9XEYGO30S/kAA?=
 =?us-ascii?q?2U7qmBYIrjZyMW2yCLTAAmmhsU+z65PA4xTnOjqnnZEzVoGnr1bk/s+PU4o3S+?=
 =?us-ascii?q?GBwa1QaPOk9g3ry66x8KiPrUH/ES17QLqSY+pjNcHEu0wN/XTdGHolwyL+1nfd?=
 =?us-ascii?q?oh7QIfhirivAtnM8nldvg6iw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AtAAAb+BFchwyp04xjHgEGBwaBUQkLA?=
 =?us-ascii?q?YJpA4EmCoxqizODLpYygXMUGAsJg3qDRiI0CQ0BAwEBAQEBAQIBEwEBAQoLCQg?=
 =?us-ascii?q?pIwyCNgUCAxoBBoJdAgQBAQsZEwwKEAUJCgEDAwECBgITGBUBAwQIAwEFAwIBA?=
 =?us-ascii?q?gEVATUBDAYCAQEBgxwBggAFCqd6JQ6FQIRxBYw8F4E/QIdBAQSHOQKQDDaQBEY?=
 =?us-ascii?q?JgxGDeoM/gm2EIBiBXIgLEiaHJ4kphHSEOYZpgUaCDnBQgmyCJAMXEohMhUwyA?=
 =?us-ascii?q?QExgQQRilVYgR8BAQ?=
X-IPAS-Result: =?us-ascii?q?A0AtAAAb+BFchwyp04xjHgEGBwaBUQkLAYJpA4EmCoxqizO?=
 =?us-ascii?q?DLpYygXMUGAsJg3qDRiI0CQ0BAwEBAQEBAQIBEwEBAQoLCQgpIwyCNgUCAxoBB?=
 =?us-ascii?q?oJdAgQBAQsZEwwKEAUJCgEDAwECBgITGBUBAwQIAwEFAwIBAgEVATUBDAYCAQE?=
 =?us-ascii?q?BgxwBggAFCqd6JQ6FQIRxBYw8F4E/QIdBAQSHOQKQDDaQBEYJgxGDeoM/gm2EI?=
 =?us-ascii?q?BiBXIgLEiaHJ4kphHSEOYZpgUaCDnBQgmyCJAMXEohMhUwyAQExgQQRilVYgR8?=
 =?us-ascii?q?BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,347,1539673200"; 
   d="scan'208";a="44776277"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from mail.linuxfoundation.org ([140.211.169.12])
  by mtab.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 12 Dec 2018 22:13:47 -0800
Received: from mail.linux-foundation.org (localhost [127.0.0.1])
	by mail.linuxfoundation.org (Postfix) with ESMTP id B05D3898;
	Wed, 12 Dec 2018 09:34:16 +0000 (UTC)
X-Original-To: virtualization@lists.linux-foundation.org
Delivered-To: virtualization@mail.linuxfoundation.org
Received: from smtp1.linuxfoundation.org (smtp1.linux-foundation.org
	[172.17.192.35])
	by mail.linuxfoundation.org (Postfix) with ESMTPS id 77DE3868
	for <virtualization@lists.linux-foundation.org>;
	Wed, 12 Dec 2018 09:34:13 +0000 (UTC)
X-Greylist: domain auto-whitelisted by SQLgrey-1.7.6
Received: from huawei.com (szxga07-in.huawei.com [45.249.212.35])
	by smtp1.linuxfoundation.org (Postfix) with ESMTPS id 49B807DB
	for <virtualization@lists.linux-foundation.org>;
	Wed, 12 Dec 2018 09:34:11 +0000 (UTC)
Received: from DGGEMS401-HUB.china.huawei.com (unknown [172.30.72.59])
	by Forcepoint Email with ESMTP id E5B4075E41E05;
	Wed, 12 Dec 2018 17:34:07 +0800 (CST)
Received: from [127.0.0.1] (10.177.16.168) by DGGEMS401-HUB.china.huawei.com
	(10.3.19.201) with Microsoft SMTP Server id 14.3.408.0; Wed, 12 Dec 2018
	17:34:07 +0800
To: Stefan Hajnoczi <stefanha@redhat.com>, "Michael S. Tsirkin"
	<mst@redhat.com>, Jason Wang <jasowang@redhat.com>
From: jiangyiwen <jiangyiwen@huawei.com>
Subject: [PATCH v2 4/5] VSOCK: increase send pkt len in mergeable mode to
	improve performance
Message-ID: <5C10D60D.2010202@huawei.com>
Date: Wed, 12 Dec 2018 17:34:05 +0800
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101
	Thunderbird/38.5.1
MIME-Version: 1.0
X-Originating-IP: [10.177.16.168]
X-CFilter-Loop: Reflected
X-Spam-Status: No, score=-2.6 required=5.0 tests=BAYES_00,RCVD_IN_DNSWL_LOW
	autolearn=ham version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	smtp1.linux-foundation.org
Cc: netdev@vger.kernel.org, kvm@vger.kernel.org,
	virtualization@lists.linux-foundation.org
X-BeenThere: virtualization@lists.linux-foundation.org
X-Mailman-Version: 2.1.12
Precedence: list
List-Id: Linux virtualization <virtualization.lists.linux-foundation.org>
List-Unsubscribe: <https://lists.linuxfoundation.org/mailman/options/virtualization>,
	<mailto:virtualization-request@lists.linux-foundation.org?subject=unsubscribe>
List-Archive: <http://lists.linuxfoundation.org/pipermail/virtualization/>
List-Post: <mailto:virtualization@lists.linux-foundation.org>
List-Help: <mailto:virtualization-request@lists.linux-foundation.org?subject=help>
List-Subscribe: <https://lists.linuxfoundation.org/mailman/listinfo/virtualization>,
	<mailto:virtualization-request@lists.linux-foundation.org?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Sender: virtualization-bounces@lists.linux-foundation.org
Errors-To: virtualization-bounces@lists.linux-foundation.org

Since VSOCK already support mergeable rx buffer, so it can
implement the balance with performance and guest memory,
we can increase the sent pkt len to improve performance.
And in order to be compatible with old version, so we still
send max default rx buf size once.

Signed-off-by: Yiwen Jiang <jiangyiwen@huawei.com>
---
 drivers/vhost/vsock.c                   | 33 ++++++++++++++++++++++++++++-----
 include/linux/virtio_vsock.h            |  3 +++
 net/vmw_vsock/virtio_transport.c        | 18 ++++++++++++++++++
 net/vmw_vsock/virtio_transport_common.c |  7 ++++---
 4 files changed, 53 insertions(+), 8 deletions(-)

diff --git a/drivers/vhost/vsock.c b/drivers/vhost/vsock.c
index c7ab0dd..9600133 100644
--- a/drivers/vhost/vsock.c
+++ b/drivers/vhost/vsock.c
@@ -44,6 +44,8 @@ struct vhost_vsock {
 	atomic_t queued_replies;

 	u32 guest_cid;
+
+	bool mergeable;
 };

 static u32 vhost_transport_get_local_cid(void)
@@ -151,7 +153,6 @@ static int get_rx_bufs(struct vhost_virtqueue *vq,
 	struct vhost_virtqueue *tx_vq = &vsock->vqs[VSOCK_VQ_TX];
 	bool added = false;
 	bool restart_tx = false;
-	int mergeable;
 	size_t vsock_hlen;

 	mutex_lock(&vq->mutex);
@@ -159,12 +160,11 @@ static int get_rx_bufs(struct vhost_virtqueue *vq,
 	if (!vq->private_data)
 		goto out;

-	mergeable = vhost_has_feature(vq, VIRTIO_VSOCK_F_MRG_RXBUF);
 	/*
 	 * Guest fill page for rx vq in mergeable case, so it will not
 	 * allocate pkt structure, we should reserve size of pkt in advance.
 	 */
-	if (likely(mergeable))
+	if (likely(vsock->mergeable))
 		vsock_hlen = sizeof(struct virtio_vsock_pkt);
 	else
 		vsock_hlen = sizeof(struct virtio_vsock_hdr);
@@ -195,7 +195,7 @@ static int get_rx_bufs(struct vhost_virtqueue *vq,
 		spin_unlock_bh(&vsock->send_pkt_list_lock);

 		headcount = get_rx_bufs(vq, vq->heads, vsock_hlen + pkt->len,
-				&in, likely(mergeable) ? UIO_MAXIOV : 1);
+				&in, likely(vsock->mergeable) ? UIO_MAXIOV : 1);
 		if (headcount <= 0) {
 			spin_lock_bh(&vsock->send_pkt_list_lock);
 			list_add(&pkt->list, &vsock->send_pkt_list);
@@ -214,7 +214,7 @@ static int get_rx_bufs(struct vhost_virtqueue *vq,
 		len = iov_length(&vq->iov[out], in);
 		iov_iter_init(&iov_iter, READ, &vq->iov[out], in, len);

-		if (likely(mergeable))
+		if (likely(vsock->mergeable))
 			pkt->mrg_rxbuf_hdr.num_buffers = cpu_to_le16(headcount);
 		nbytes = copy_to_iter(&pkt->hdr, vsock_hlen, &iov_iter);
 		if (nbytes != vsock_hlen) {
@@ -303,6 +303,22 @@ static void vhost_transport_send_pkt_work(struct vhost_work *work)
 	return len;
 }

+static u32
+vhost_transport_get_max_pkt_len(u32 guest_cid)
+{
+	int len = VIRTIO_VSOCK_DEFAULT_RX_BUF_SIZE;
+	struct vhost_vsock *vsock;
+
+	vsock = vhost_vsock_get(guest_cid);
+	if (!vsock)
+		return len;
+
+	if (vsock->mergeable)
+		len = VIRTIO_VSOCK_MAX_PKT_BUF_SIZE;
+
+	return len;
+}
+
 static int
 vhost_transport_cancel_pkt(struct vsock_sock *vsk)
 {
@@ -602,6 +618,8 @@ static int vhost_vsock_dev_open(struct inode *inode, struct file *file)

 	atomic_set(&vsock->queued_replies, 0);

+	vsock->mergeable = false;
+
 	vqs[VSOCK_VQ_TX] = &vsock->vqs[VSOCK_VQ_TX];
 	vqs[VSOCK_VQ_RX] = &vsock->vqs[VSOCK_VQ_RX];
 	vsock->vqs[VSOCK_VQ_TX].handle_kick = vhost_vsock_handle_tx_kick;
@@ -726,6 +744,9 @@ static int vhost_vsock_set_features(struct vhost_vsock *vsock, u64 features)
 		return -EFAULT;
 	}

+	if (features & (1 << VIRTIO_VSOCK_F_MRG_RXBUF))
+		vsock->mergeable = true;
+
 	for (i = 0; i < ARRAY_SIZE(vsock->vqs); i++) {
 		vq = &vsock->vqs[i];
 		mutex_lock(&vq->mutex);
@@ -848,6 +869,8 @@ static long vhost_vsock_dev_compat_ioctl(struct file *f, unsigned int ioctl,
 	},

 	.send_pkt = vhost_transport_send_pkt,
+
+	.max_pkt_len = vhost_transport_get_max_pkt_len,
 };

 static int __init vhost_vsock_init(void)
diff --git a/include/linux/virtio_vsock.h b/include/linux/virtio_vsock.h
index 734eeed..ad95319 100644
--- a/include/linux/virtio_vsock.h
+++ b/include/linux/virtio_vsock.h
@@ -82,6 +82,9 @@ struct virtio_transport {

 	/* Takes ownership of the packet */
 	int (*send_pkt)(struct virtio_vsock_pkt *pkt);
+
+	/* Get max pkt len, cid only be used for Host */
+	u32 (*max_pkt_len)(u32 cid);
 };

 ssize_t
diff --git a/net/vmw_vsock/virtio_transport.c b/net/vmw_vsock/virtio_transport.c
index 148b58a..809085a 100644
--- a/net/vmw_vsock/virtio_transport.c
+++ b/net/vmw_vsock/virtio_transport.c
@@ -222,6 +222,22 @@ static int virtio_transport_send_pkt_loopback(struct virtio_vsock *vsock,
 	return len;
 }

+static u32
+virtio_transport_get_max_pkt_len(u32 cid)
+{
+	int len = VIRTIO_VSOCK_DEFAULT_RX_BUF_SIZE;
+	struct virtio_vsock *vsock;
+
+	vsock = virtio_vsock_get();
+	if (!vsock)
+		return len;
+
+	if (vsock->mergeable)
+		len = VIRTIO_VSOCK_MAX_PKT_BUF_SIZE;
+
+	return len;
+}
+
 static int
 virtio_transport_cancel_pkt(struct vsock_sock *vsk)
 {
@@ -675,6 +691,8 @@ static void virtio_vsock_rx_done(struct virtqueue *vq)
 	},

 	.send_pkt = virtio_transport_send_pkt,
+
+	.max_pkt_len = virtio_transport_get_max_pkt_len,
 };

 static int virtio_vsock_probe(struct virtio_device *vdev)
diff --git a/net/vmw_vsock/virtio_transport_common.c b/net/vmw_vsock/virtio_transport_common.c
index 123a8b6..cc14ace 100644
--- a/net/vmw_vsock/virtio_transport_common.c
+++ b/net/vmw_vsock/virtio_transport_common.c
@@ -159,7 +159,8 @@ static int virtio_transport_send_pkt_info(struct vsock_sock *vsk,
 	u32 src_cid, src_port, dst_cid, dst_port;
 	struct virtio_vsock_sock *vvs;
 	struct virtio_vsock_pkt *pkt;
-	u32 pkt_len = info->pkt_len;
+	u32 pkt_len;
+	u32 max_pkt_len;

 	src_cid = vm_sockets_get_local_cid();
 	src_port = vsk->local_addr.svm_port;
@@ -174,8 +175,8 @@ static int virtio_transport_send_pkt_info(struct vsock_sock *vsk,
 	vvs = vsk->trans;

 	/* we can send less than pkt_len bytes */
-	if (pkt_len > VIRTIO_VSOCK_DEFAULT_RX_BUF_SIZE)
-		pkt_len = VIRTIO_VSOCK_DEFAULT_RX_BUF_SIZE;
+	max_pkt_len = virtio_transport_get_ops()->max_pkt_len(dst_cid);
+	pkt_len = min(max_pkt_len, info->pkt_len);

 	/* virtio_transport_get_credit might return less than pkt_len credit */
 	pkt_len = virtio_transport_get_credit(vvs, pkt_len);
-- 
1.8.3.1


_______________________________________________
Virtualization mailing list
Virtualization@lists.linux-foundation.org
https://lists.linuxfoundation.org/mailman/listinfo/virtualization
