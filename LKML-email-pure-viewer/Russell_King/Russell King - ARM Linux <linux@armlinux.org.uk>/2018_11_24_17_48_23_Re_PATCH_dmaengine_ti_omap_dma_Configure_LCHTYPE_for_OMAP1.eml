Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 25 Nov 2018 14:42:28 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 1D80958037D;
	Sat, 24 Nov 2018 09:48:57 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 24 Nov 2018 09:48:56 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AVGQuKxIF5AIU9HqkEtmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgUL/XzrarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZUMhfVzJPDJ6/?=
 =?us-ascii?q?YYsBAOUOIftXoIvzqFsVtRuzBxKhBP/zxjNUmnP6wbc33/onHArb3AIgBdUOsH?=
 =?us-ascii?q?HModvpKacSSvu1w7fMzTXHcvhY3Db96I7Hchs8uP2HQK59f9bWx0IyEQ3Fj1OQ?=
 =?us-ascii?q?qZHqPjiI0ekNt2mb7+x9VeOgkGMosRtxoj2rxsctjInJm40UxkrD9SVjz4Y5P8?=
 =?us-ascii?q?C4SE1ibNOiDZBeuSaaN45sTcMjRWFloDw1yqcDuZ6/fSgKzoknxhHFZ/yAaYiI?=
 =?us-ascii?q?7QjvVPuSITtgn3JlYKywiAiv/ki81OL8TdW03ExMriVbjtnBsG0G2R/L6sWfVP?=
 =?us-ascii?q?dx4kOs1SyS2w3d9O1IO104mKnHJ5I7w7M9lIIfvEbAEyPslkj6krWae0s49uSy?=
 =?us-ascii?q?9ejrf7brq5mBPIFukA7+KL4hmsmnDOQ4LAcOW2+b9Pyi1L3s40L5Wq9Gjv4ona?=
 =?us-ascii?q?nDtpDVO8AbqrS+Aw9P3YYv8xe/DzG439QEhXQLMk5JdRadg4T0NVzCPur0Aeq8?=
 =?us-ascii?q?jliwijtmxvLLMqXkAprXL3jDlLnhfax6605Z0AczydFf55RJCrAOOf7zWVH+tM?=
 =?us-ascii?q?beDhAnNwy42uHnCdt71owAQ2KCGbGZMKzMvl+S/O4vIPeDZJUTuDnjL/gp/fnu?=
 =?us-ascii?q?jWU2mVMFZ6mmwYMXaGykHvRhO0iZZXvsgtQfHmsQsQs+UffniFmDUT5VenazUL?=
 =?us-ascii?q?gw5jA9CIK6E4jDQpqhj6CG3Ce+BpdWfHxJCkiQEXf0cIWJQ/cMZziTIs99iDME?=
 =?us-ascii?q?UqKtS4881R60sg/6xKFqLu7V+i0eqJLi28J55+zVlREu6zN0C96R3H2KT2Fxhm?=
 =?us-ascii?q?kIXSM53LhjoUxhzVeOyap4g/tGGtBJ5PNJVQE6NZjbz+FhD9DyWwTBfsqGSVq8?=
 =?us-ascii?q?Q9WmBy0xQcw1w9MUf0l9HNCihAjZ3yW2G78Vi6CLBJss/63GxHjxJ8F9y3Xc2K?=
 =?us-ascii?q?k7lVYmQNBCNWmnhq556gjSCJTFk0Sfl6a2a6sc2DTB+3uEzWqLpEtYShJ/Ub3Z?=
 =?us-ascii?q?XXADYUvbtdf56VnET7O0DbQnMxFOyciNKqZRbt3pjFNGROrsOdjEYmKxnXuwCg?=
 =?us-ascii?q?iMxr+WcIXqfGAd1j3HCEcYiwAT4WqGNQ8mCyi8uW3eEiJhGUjvY0z29+l+s220?=
 =?us-ascii?q?TkkzwwGObE1h0r619wURhfydTfMTw70FtD0gqzVyAFaywdbWB8CcqApmeaVWec?=
 =?us-ascii?q?k970tf1WLFqwx9OYStIL14iV4AbQt7pUPu2A9xCoVbj8cqqmgnzA5zKaKezVNA?=
 =?us-ascii?q?eCmU3ZH2Or3LNGby+AqjZLLR2lHbyNyW4LsA6Owkq1X/uwGkDlYi83Ri09lSz3?=
 =?us-ascii?q?uc5pXLABAOUZ7rVUY37Rx6p7DcYiky/I7U0XxsMa+psj7Nwd4pBe0lygq+cNdb?=
 =?us-ascii?q?Kq+LCAjyE8gCDci0NOMqg0Spbg4DPO1K7qE0O92pdvSY16+rJupvhy+mgnld74?=
 =?us-ascii?q?B70UKM8DR8R/XM35YExfGYwwSGWy39jFenrsD4h4REaSsOEWq4zCjuHJRRabFq?=
 =?us-ascii?q?fYYXFWeuJNW6x9Vjh5L3R3FU7l+iB1Mc18+vdhqfdFj93QxW1UQKrn2rgyq4zz?=
 =?us-ascii?q?pokz43qqqTxjDBw+PndBAfIG5EWHFijUvwIYizl90aRkmoYBQzmxu/+En6wLJX?=
 =?us-ascii?q?pKJhIGnJQEdEZjT5IHtmUqStqLWCeclP6JUzvCVTUeS8Z02aS7Hnrxsb1SPjA3?=
 =?us-ascii?q?VRxDQhez62vZX5mgRwiHiBI3ZrsHrZZcZwyA/f5dzdX/JQ3iAKRDJliTnRHVW8?=
 =?us-ascii?q?O9ip/dOJl5bMqOy+VmShVoFNfinv14+PqCy75WhyCx2lg/+zgsHnERQ90SLj1d?=
 =?us-ascii?q?llTz/IrBX/Yonszai6KvhofkprBF/97cp1BId+n5A0hJER33gam5qU8WAGkWf1?=
 =?us-ascii?q?LdVUx6b+YGARSj4Mxt7f+BLl11F7LnKV24L5UW2Qw8t7aNm9eG8W2CM978ZRBa?=
 =?us-ascii?q?eQ7bxEmzZ1o1WioQLQZ/h9gikSyf805HEGhOEJvRInzj+BDbAKAUlYISvsmgyL?=
 =?us-ascii?q?79+kraVbfmavcaWq20p4ktCsF7WCogBaWHbkdZYuBy5w7sNjMF3S1H3/8J3reN?=
 =?us-ascii?q?7VbdgLrB2bjw/Aj/RJKJI2jvcKgCtnOWHnsnE/xe80kwdu3Y2ks4idMGpi4ri5?=
 =?us-ascii?q?AhFDOz3xZsMT/CztjKlEksaX2YCvAotuGjERUJT0SvKoFSoYte77OAaWDD08tn?=
 =?us-ascii?q?CbFKLDHQ+Y7UdqtXPOHIqtN3GKP3kZ1tRiSQKZJExehgAUQTo7koQ4FgCs2Mzu?=
 =?us-ascii?q?bkN56ioN6V7/rxtG0vhoOAXnUmfDuAeobS85R4OFIxpR6gFC+l3ZMciD7u9oGy?=
 =?us-ascii?q?FY/5uhrBGCK2CBZgRIC30JVVKAB1z5Irau4tzA+fCCBuWiN/vOfamOqetGWveK?=
 =?us-ascii?q?352v15Vp/y2WOsWTJHViDOA72kleXXB/AcvZgC4CSygWlyLLcs6aqw2w+ixxrs?=
 =?us-ascii?q?Cj7vvrXBjj6peIC7tXKd9v4Qy5gb+fN+6MgyZ0MTZZ1pQRxX/R1bgQxlgShzt1?=
 =?us-ascii?q?dzmqF7QAujXATKbRmq9REh4aZDl/NMpO76IgwAZNPdTXhc/y1r59lvQ1EUtKVU?=
 =?us-ascii?q?T9msG1YswHO2G9O03GBEaIN7SGJCfHw8LtYaO7Rr1fkv9UtwCruTuAF0/jPzKD?=
 =?us-ascii?q?lyTmVhy1MOFMij2bMwJauI2nbhltDm3jRsr8ahKnKN93kSE2wbosi3zQKG4TKi?=
 =?us-ascii?q?J8fF1Nr7GK6SNYg+5yG2hA7npjMOmFlDyV7+jeKpYKr/RrBj54mP5d4HQ/07FV?=
 =?us-ascii?q?9j1LRORpmCvOqd5ju02mkuiKyjZ9TBVCsCpEhIKVskVkIqjZ8phAWXDZ/BMC92?=
 =?us-ascii?q?mQChIKp8d7Bd3roaxf1t/PlKfrIjdY793U5dccB9TTKM+fMHsuKxzpGDvVDAsD?=
 =?us-ascii?q?VTGqNGHfiFZbkPGd7XCVqpk6qp7xmJsBULNbVVo1Fu8EBURhBtANPJB3XjZ32Y?=
 =?us-ascii?q?Kc2ecB/332jx7KR8Rcs5aPAvubG/KpKzGCjrhCah0gwLD5a4oSYMmz9FZvZRFZ?=
 =?us-ascii?q?vMyeFFDdUvhOuCpobkk/p0Abo1ZkSWhm4V/+cQ6p5DcwFPi71lt+ozFbKcAs8i?=
 =?us-ascii?q?r8qwMzJ1zXtAM5ikw1mNP4kXaWajG3MaTmDtIeMDb9q0VkasCzeA1ydwDn2BU8?=
 =?us-ascii?q?bDo=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ACAADCjflbh0O0hNFjGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGBMCqBD4ECJwSMDY4OFGaWQhSBXxQYCwgBiFoiNAk?=
 =?us-ascii?q?NAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkAYJiAQIDAQIkEwYBATcBBQkBAQoYC?=
 =?us-ascii?q?SUDDAUoIQEXgxwBggEBAwEKpV6BbDOCdgEBBYcXCIwJFz6BQYERgl01gxCBVoV?=
 =?us-ascii?q?ziVOWMQmRJAsYgVmILocBLJgEgUaCDTMaCCwEgycJghIMF38BAopCglhAMoEFA?=
 =?us-ascii?q?QGMDAEB?=
X-IPAS-Result: =?us-ascii?q?A0ACAADCjflbh0O0hNFjGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGBMCqBD4ECJwSMDY4OFGaWQhSBXxQYCwgBiFoiNAkNAQMBAQEBAQECA?=
 =?us-ascii?q?RMBAQEIDQkIKSMMgjYkAYJiAQIDAQIkEwYBATcBBQkBAQoYCSUDDAUoIQEXgxw?=
 =?us-ascii?q?BggEBAwEKpV6BbDOCdgEBBYcXCIwJFz6BQYERgl01gxCBVoVziVOWMQmRJAsYg?=
 =?us-ascii?q?VmILocBLJgEgUaCDTMaCCwEgycJghIMF38BAopCglhAMoEFAQGMDAEB?=
X-IronPort-AV: E=Sophos;i="5.56,273,1539673200"; 
   d="scan'208";a="63786264"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 24 Nov 2018 09:48:54 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726445AbeKYEhj (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sat, 24 Nov 2018 23:37:39 -0500
Received: from pandora.armlinux.org.uk ([78.32.30.218]:41992 "EHLO
        pandora.armlinux.org.uk" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725880AbeKYEhj (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sat, 24 Nov 2018 23:37:39 -0500
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
        d=armlinux.org.uk; s=pandora-2014; h=Sender:In-Reply-To:Content-Type:
        MIME-Version:References:Message-ID:Subject:Cc:To:From:Date:Reply-To:
        Content-Transfer-Encoding:Content-ID:Content-Description:Resent-Date:
        Resent-From:Resent-Sender:Resent-To:Resent-Cc:Resent-Message-ID:List-Id:
        List-Help:List-Unsubscribe:List-Subscribe:List-Post:List-Owner:List-Archive;
         bh=BQJHxF1J0il6O8yNgQgtphdYspqFwdOUwLTRgBjUR+o=; b=cxDe0L5Ao41nKBSixvyNsPdnm
        xmlNrFPnM2k4BLsp0szH+/Fv21i2XDniXTpdh72SCWfXdcGr0yeqmYSFGfBaD4dom4Lji5JnDGb79
        v5MAHlPy6hnv6iHKd0n0U85usKkZP+PYtpdkswFafh0XpjkJcHZfEeS/bX9HQU8mSpAdI=;
Received: from n2100.armlinux.org.uk ([fd8f:7570:feb6:1:214:fdff:fe10:4f86]:41613)
        by pandora.armlinux.org.uk with esmtpsa (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
        (Exim 4.90_1)
        (envelope-from <linux@armlinux.org.uk>)
        id 1gQc2e-0006FL-L2; Sat, 24 Nov 2018 17:48:28 +0000
Received: from linux by n2100.armlinux.org.uk with local (Exim 4.90_1)
        (envelope-from <linux@n2100.armlinux.org.uk>)
        id 1gQc2b-00060n-EU; Sat, 24 Nov 2018 17:48:25 +0000
Date: Sat, 24 Nov 2018 17:48:23 +0000
From: Russell King - ARM Linux <linux@armlinux.org.uk>
To: Aaro Koskinen <aaro.koskinen@iki.fi>, Greg KH <greg@kroah.com>
Cc: Peter Ujfalusi <peter.ujfalusi@ti.com>, vkoul@kernel.org,
        dan.j.williams@intel.com, dmaengine@vger.kernel.org,
        linux-kernel@vger.kernel.org, tony@atomide.com,
        linux-omap@vger.kernel.org,
        Felipe Balbi <felipe.balbi@linux.intel.com>
Subject: Re: [PATCH] dmaengine: ti: omap-dma: Configure LCH_TYPE for OMAP1
Message-ID: <20181124174823.GQ6920@n2100.armlinux.org.uk>
References: <20181119104040.12885-1-peter.ujfalusi@ti.com>
 <20181119184649.GE16897@darkstar.musicnaut.iki.fi>
 <6af8c6e7-bf5c-5555-161b-5d3fb7ecae43@ti.com>
 <20181120210406.GB24888@darkstar.musicnaut.iki.fi>
 <4eb3b03e-0a97-6195-f162-e03e32705fe0@ti.com>
 <20181122220114.GB11423@darkstar.musicnaut.iki.fi>
 <cb1355b5-0d2e-1f83-5ea1-7615350ca0ec@ti.com>
 <20181124001740.GI12912@darkstar.musicnaut.iki.fi>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181124001740.GI12912@darkstar.musicnaut.iki.fi>
User-Agent: Mutt/1.5.23 (2014-03-12)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Sat, Nov 24, 2018 at 02:17:40AM +0200, Aaro Koskinen wrote:
> Hi,
> 
> On Fri, Nov 23, 2018 at 01:45:46PM +0200, Peter Ujfalusi wrote:
> > On 23/11/2018 0.01, Aaro Koskinen wrote:
> > > With that reverted, the DMA works OK (and I can also now confirm that
> > > OMAP_DMA_LCH_2D works). I haven't yet checked if we actually need that
> > > quirk in OMAP UDC,
> > 
> > The omap_udc driver is a bit of a mess, need to check it myself, but for
> > now we can just set the quirk_ep_out_aligned_size and investigate later.
> 
> OK, with quirk_ep_out_aligned_size we get 770/16xx DMA working again,
> but on 15xx the omap_udc DMA still doesn't work (tested today for the
> first time ever, I have no idea if it has ever worked and if so, when?).

Hmm, there's more questionable stuff in this driver, and the gadget
layer.

Fundamental fact of struct device - it's a ref-counted structure and
will only be freed when the last reference is dropped.  dev_unregister()
merely drops the refcount, it doesn't guarantee that it's dropped to
zero (iow, there can be other users).  Only when the refcount drops
to zero is the dev.release function called.  However:

usb_add_gadget_udc_release(..., release)
{
        if (release)
                gadget->dev.release = release;
        else
                gadget->dev.release = usb_udc_nop_release;
        device_initialize(&gadget->dev);
        ret = device_add(&gadget->dev);
}

At this point, that struct device is registered, so its refcount can
be increased by other users.

void usb_del_gadget_udc(struct usb_gadget *gadget)
{
...
        device_unregister(&gadget->dev);
        memset(&gadget->dev, 0x00, sizeof(gadget->dev));
}

That memset() is down-right wrong - the refcount on this struct device
may _not_ be zero at this point, the struct device could well be in
use by another thread.  That memset will trample over the contents of
the structure potentially while someone else is using it, and
_potentially_ before the gadget->dev.release function has been called.

However, that _may_ be a good thing when you read the omap_udc code:

        status = usb_add_gadget_udc_release(&pdev->dev, &udc->gadget,
                        omap_udc_release);

During the omap_udc_remove() function:
{
...
        usb_del_gadget_udc(&udc->gadget);
        if (udc->driver)
                return -EBUSY;

        udc->done = &done;

... more dereferences of udc, which is a _global_ variable ...

        wait_for_completion(&done);
}

Now, omap_udc_release() does this:

        complete(udc->done);
        kfree(udc);
        udc = NULL;

So, when usb_del_gadget_udc() is called, if device_unregister() within
there drops the last reference count, omap_udc_release() will be called
immediately.  Since udc->done hasn't been setup at that point, that
complete() will fail with a NULL pointer dereference.  If that doesn't
happen, then the kfree() and following set of the global 'udc' variable
to NULL means that all future references to 'udc' after the call to
usb_del_gadget_udc() in omap_udc_remove() will be dereferencing a NULL
pointer.  So one way or the other, this leads to a kernel OOPS.

If, on the other hand, omap_udc_release() was not called in
device_unregister(), the function pointer will be zeroed by the
memset(), which will lead to 'udc' never being freed - in other words,
we leak memory.

What's more is that 'done' is never "completed" so we end up hanging
at the wait_for_completion().

Then there's the pointless:

        if (udc->driver)
                return -EBUSY;

in omap_udc_remove().  The effect of returning an error is... what
exactly?  It doesn't prevent the device being removed at all, it
doesn't delay it, in fact the whole "remove returns an int" is
nothing but confusion - the return value from all driver remove
methods is completely ignored.

If udc->driver is still set at this point, it basically means that
we skip the rest of the tear down, but the platform device will
still be unbound from the driver, leaving (eg) the transceiver phy
still claimed, the procfs file still registered, the interrupts
still claimed, the memory region still registered, etc.  If omap_udc
is built as a module, the module could even be removed while all
that is still registered.

So, whatever way I look at this, the code in the removal path both
in omap_udc and the gadget removal code higher up looks very wrong
and broken to me.

-- 
RMK's Patch system: http://www.armlinux.org.uk/developer/patches/
FTTC broadband for 0.8mile line in suburbia: sync at 12.1Mbps down 622kbps up
According to speedtest.net: 11.9Mbps down 500kbps up
