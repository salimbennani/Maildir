Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 29 Nov 2018 08:40:18 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id AAE22580322;
	Wed, 28 Nov 2018 11:28:27 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 28 Nov 2018 11:28:26 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Ab4CkchKdy2QYOAnovdmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgULP//rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZUMhfVzJPDJ6/?=
 =?us-ascii?q?YYsBAOUOIftXoIvzqFsVtRuzBxKhBP/zxjNUmnP6wbc33/onHArb3AIgBdUOsH?=
 =?us-ascii?q?HModvpKacSSvu1w7fMzTXHcvhY3Db96I7Hchs8uP2HQK59f9bWx0IyEQ3Fj1OQ?=
 =?us-ascii?q?qZHqPjiI0ekNt2mb7+x9VeOgkGMosRtxoj2rxsctjInJm40UxkrD9SVjz4Y5P8?=
 =?us-ascii?q?C4SE1ibNOiDZBeuSaaN45sTcMjRWFloDw1yqcDuZ6/fSgKzoknxhHFZ/yAaYiI?=
 =?us-ascii?q?7QjvVPuSITtgn3JlYKywiAiv/ki81OL8TdW03ExMriVbjtnBsG0G2R/L6sWfVP?=
 =?us-ascii?q?dx4kOs1SyS2w3d9O1IO104mKnHJ5I7w7M9lIIfvVrfEiPqhUn7iaCbeVgr9+Wr?=
 =?us-ascii?q?7unoeKjpq5+CO4JxhAzyLLgiltG6DOgmLwQDUG2W+eqh273t8030RbtKgeMrnq?=
 =?us-ascii?q?XFtZ3XKsobq624DgJTz40t8QywDy2839QdhXQHLExKeBaAj4XxJVHOL+73De2l?=
 =?us-ascii?q?j1Svjjhr3fbGMaPlApnXKXjDirjhca58605a1gUz0chS64xIBrwFOv7/R0H8uM?=
 =?us-ascii?q?LCAhMkMAG43/zrBdR/248GXGKAGK6ZMKfcsV+S4eIvJvGBZIsUuDb7Nvgk6Ofi?=
 =?us-ascii?q?jXwnll8He6mmw58XZGm/HvVoJUWWf2Dsj8wfEWcFoAU+VvbmiF6cXj5JYXa9Qa?=
 =?us-ascii?q?Y86is8CIK8AofPXpqtj6CZ3CenAp1WYXhLClSNEXfraYqIQfgNaD+JL89lkzwE?=
 =?us-ascii?q?U6WhSoA72RGvsg/616RoLu7O9iIEspLj0cB/5/fPmhEq6Tx0E8Od3nmNT25un2?=
 =?us-ascii?q?MIWyU53KdlrUx911eMy654g/NDGNxX5vNJVBo6NJHGw+x7DdDyRhzOftOTRFm6?=
 =?us-ascii?q?RdWmBCk7TsgtzN8Wf0Z9B9KigwjB3yqtHbAZjb+LBJsy8qLa2Hj8PMJ9y3fA1K?=
 =?us-ascii?q?k8gFgqWMpPNWu6hqFh8wjfHZLGk0Kcl6yyb6QTwDbN9HufzWqJpExXShVwUaXC?=
 =?us-ascii?q?XXAcfEfWt8725kHZQr+qCLQnNBZByMGYJqtLbN3pkUtJRPP5NNvCZGKxnn+6BQ?=
 =?us-ascii?q?yUybOUcIrqZ2Id0T3eCEcelQAf53KGNQkkCSenrGLTFzhuFVPpY0Px/uhysnK7?=
 =?us-ascii?q?Tkkozw6Ua01tzaa6+hkQhfaEUfMcwqoEuDs9qzVzBFuywsjZC8SeqAZ7fKVTe9?=
 =?us-ascii?q?U94ExZ2mLfsAB9Op+gL6VmhlMFdwR3vkXu1wh4C4lakMgqqm8qwxR2Ka6CzFxB?=
 =?us-ascii?q?cDaY14jqOrLLMmny4Ayva6nO117DytmW5LkA5O44q1r5ugGpDVQt83N83tlR0n?=
 =?us-ascii?q?uc4IjKDQUIXZLwVEY36wZ1p7XAbiYh4IPU0GVmMbOovT/ax9IpGOwlxw68f9de?=
 =?us-ascii?q?NaOEExPyE80aBsS0NOwmgV+pbggAPOBT8q40MNird/+H2K6tIeZhkyiqjWVB4I?=
 =?us-ascii?q?BhzE2M8zBwRfLP35YA2/uYxBeIVy/gjFe9tcD6gZpLZTUMEWuw1yflBJRdabZv?=
 =?us-ascii?q?fYkWE2iuJc63xtJgh5P2X35Y9VijB04J2cOzeBqSaUD90hNU1UgNvXOnni64xS?=
 =?us-ascii?q?Rukz41tqqfwDDOw+P6eRsHJ25HXnVtgU3tIIi0ld8aWkeoYhMtlBuk40b62qda?=
 =?us-ascii?q?qL5+L2nVXUdHYSz2I3t+Xau3s7qIe9RP548wsSVLTOS8ZkiXSqT8oxQGySzjBX?=
 =?us-ascii?q?ZRxDchezGspJr5hR16hHuBI3lpqHrWZN9/xQ3Y5NzaXvNR2jsGRC9liTjYHFS8?=
 =?us-ascii?q?Pt+p/cmKmJfHqOyxS2WhVphLeynx0YyArDe75XFtARCnn/Gzm8frEAgg3S/gyt?=
 =?us-ascii?q?lqUz7FrBL9YontyqS7PvhrfkhuBF/g9cV6HptynZc3hJEVwXIanIma/WIbkWfv?=
 =?us-ascii?q?NtVWwaD+Y2AXRT4IwN7V5xLp2FZ5IXKKxIL5V3OdzdVnZ9ShZmMW2yQ9791FCa?=
 =?us-ascii?q?uO7bxEmzd1rUS8rQ7Lffd9mTIdw+M06HEGm+EJpBYtziKFD7ESB0ZYOjbglxaJ?=
 =?us-ascii?q?79C4t6hXYGevcb6t1Etxh9yhDbeCoh1CV3b9YJstAShw7sBnOlLWzHLz8p3keM?=
 =?us-ascii?q?XXbd8LtR2biRbAg/JVKJIsjPUKgyVnNHn5vX0kze47kBNv0Yu7vIiBN2Vi4qa5?=
 =?us-ascii?q?DgREOT3yYsMZ4ivtgrpGnsaKw4CvGY1sGjAKXJvrV/2kCjwTuur8NwaSDjI8sG?=
 =?us-ascii?q?yUFqTFHQ+Q80pmq3PPE5a2N3CYPnUZzNNiRAWDK0xbmgwbQDI6npshHACw2MPh?=
 =?us-ascii?q?aFt55iwW5lPgthtMzedoOwP+U2jFogeodyw0SIOeLBdN6gFC5kHVMdGR7+5pHi?=
 =?us-ascii?q?FY+IGhoxKJKmCBewtICmQJUFSeB1//Jrmu+cXA8++AC+WlNfTOZrGOqfFEW/eM?=
 =?us-ascii?q?2JKiyY9m/zeKNsWSMXhuFfw72kxfXX9nH8TVgSkASysSlyjVdc6UuA+8+jFrrs?=
 =?us-ascii?q?C46PnrWhjg5Y6RBLtJK9lv5wq6gaSeN+6TmSZ5LyxX1ogXyH/Mybgf2kMSii50?=
 =?us-ascii?q?ezmsF7QAqTDCTKbKlqBLCB4bbjt5NNFU4KIkwglNJcnbh8v1175/k/41EkpFWk?=
 =?us-ascii?q?bnms2zfswKJGe9NFzcCUaPNbSGIyDLws7tbaO9T71QkPtbtxmqtTmHFE/jOyyJ?=
 =?us-ascii?q?lyP1WBC3LeFMkCabMQReuI6jcxZtCmvjTNP8Zh24Kt93ijI2zqMuhnPXLm4RKj?=
 =?us-ascii?q?x8c0JLrr2N4iJUmPR/G2pd7nV7KemIgTqW7+7dKpwOq/tkHjx0l/5G4HQ907Za?=
 =?us-ascii?q?9jxES+dvmCTMrt9iuVWmkuiUxzpjURpOrCtLhY2RsUVjP6XZ6odPWXLe8B0R6m?=
 =?us-ascii?q?WQDgwAp8F5Bd33p6BQ1t/PmbrvKDdD9tLY59cTC9LIJ8KHLnUhNwHkGDrVDAsD?=
 =?us-ascii?q?UD6qOnvTh01bkPGO6HKVqoI2pYTrmJoLUrVbTkA6FusGCkR5G9wPOJd2USkikb?=
 =?us-ascii?q?6ejc4I42KxrRjRRMpAuJDHWemfAfHuKDafkLlFaAEEwbL+LYQPKIL731ZuZUV9?=
 =?us-ascii?q?nITPSALsWoVpoyt8dUcIp19T+XxyVSVnx0X/dAqp7GQ7Ef+ygw5zhAxjZ+gk6D?=
 =?us-ascii?q?br5REwPFWc9wUql0xko8j+mj2VdHbSLaG/FcQeIhDR/2wwNI7rC1JxbAuvjWRt?=
 =?us-ascii?q?LjLARrRMn/1nb28tlQyK6sgHIuJVUaAROExY/vqQffh9lA0E8ig=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AnAAA26/5bh0O0hNFjGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBZYExKoEPgQInBJgVgg0UaJg5FBgLCAGHbiI4EgEDAQEBAQEBAgE?=
 =?us-ascii?q?TAQEBCA0JCCkjDII2JAGCYgECAwECJBMGAQE3AQUJAQEKGAklAwwFKCETBYMcA?=
 =?us-ascii?q?YIBAQMBCqYygWwzgnYBAQWHKgiMFhc+gUGBEYJdNYMTh0mgHQmRJgsYkRUsmBy?=
 =?us-ascii?q?BXYF2MxoILAQ7gmwJghKBIgEIijyCWUAygQUBAY1jAQE?=
X-IPAS-Result: =?us-ascii?q?A0AnAAA26/5bh0O0hNFjGgEBAQEBAgEBAQEHAgEBAQGBZYE?=
 =?us-ascii?q?xKoEPgQInBJgVgg0UaJg5FBgLCAGHbiI4EgEDAQEBAQEBAgETAQEBCA0JCCkjD?=
 =?us-ascii?q?II2JAGCYgECAwECJBMGAQE3AQUJAQEKGAklAwwFKCETBYMcAYIBAQMBCqYygWw?=
 =?us-ascii?q?zgnYBAQWHKgiMFhc+gUGBEYJdNYMTh0mgHQmRJgsYkRUsmByBXYF2MxoILAQ7g?=
 =?us-ascii?q?mwJghKBIgEIijyCWUAygQUBAY1jAQE?=
X-IronPort-AV: E=Sophos;i="5.56,291,1539673200"; 
   d="scan'208";a="54120175"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 28 Nov 2018 11:26:24 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729111AbeK2G0D (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 29 Nov 2018 01:26:03 -0500
Received: from pandora.armlinux.org.uk ([78.32.30.218]:53738 "EHLO
        pandora.armlinux.org.uk" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725772AbeK2G0D (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 29 Nov 2018 01:26:03 -0500
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
        d=armlinux.org.uk; s=pandora-2014; h=Sender:In-Reply-To:Content-Type:
        MIME-Version:References:Message-ID:Subject:Cc:To:From:Date:Reply-To:
        Content-Transfer-Encoding:Content-ID:Content-Description:Resent-Date:
        Resent-From:Resent-Sender:Resent-To:Resent-Cc:Resent-Message-ID:List-Id:
        List-Help:List-Unsubscribe:List-Subscribe:List-Post:List-Owner:List-Archive;
         bh=LNtpoEPWX7MDc9gcUZkN+Oz0VQs2d2Zaf48By6SM7jY=; b=F+tbipXhF0cc2KciWsiEHe6BJ
        WBo6MkSKz9yVtB+0rvl4ezc1VwCuNUJU+kWyGA4Z2oaKH7pV+VWBCm7svJ8R1Ry8EPIDwgsyeHJh1
        bdvufI3xbR1TSZOa0YMDoV29Y4ze2RM35ISxdoWX2pKEpExno0wI0UI8rC9sPS0HYdOjw=;
Received: from n2100.armlinux.org.uk ([2001:4d48:ad52:3201:214:fdff:fe10:4f86]:42195)
        by pandora.armlinux.org.uk with esmtpsa (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
        (Exim 4.90_1)
        (envelope-from <linux@armlinux.org.uk>)
        id 1gS5QZ-0006Yo-E5; Wed, 28 Nov 2018 19:23:15 +0000
Received: from linux by n2100.armlinux.org.uk with local (Exim 4.90_1)
        (envelope-from <linux@n2100.armlinux.org.uk>)
        id 1gS5QR-0006p5-Ek; Wed, 28 Nov 2018 19:23:07 +0000
Date: Wed, 28 Nov 2018 19:23:02 +0000
From: Russell King - ARM Linux <linux@armlinux.org.uk>
To: Linus Torvalds <torvalds@linux-foundation.org>
Cc: linux-arch@vger.kernel.org, linux-ia64@vger.kernel.org,
        linux-parisc@vger.kernel.org,
        David Woodhouse <dwmw2@infradead.org>,
        the arch/x86 maintainers <x86@kernel.org>,
        Linux List Kernel Mailing <linux-kernel@vger.kernel.org>,
        iommu@lists.linux-foundation.org, linux-alpha@vger.kernel.org,
        xen-devel@lists.xenproject.org, robin.murphy@arm.com,
        Christoph Hellwig <hch@lst.de>,
        linux-arm-kernel@lists.infradead.org
Subject: Re: remove the ->mapping_error method from dma_map_ops V2
Message-ID: <20181128192301.GN30658@n2100.armlinux.org.uk>
References: <20181122170715.GI30658@n2100.armlinux.org.uk>
 <CAHk-=wgfGzXuDAKFQPdzMib3QCRHfSTsy5=gLU-WCoya+Ym+1A@mail.gmail.com>
 <11829e3c-7302-f821-cf5c-863e5267a17b@arm.com>
 <CAHk-=whxf0zqutExPr_j1A625Z3gcL6k_ABzKo1BtzN4F93hkA@mail.gmail.com>
 <20181123065511.GA17856@lst.de>
 <20181128074117.GA21126@lst.de>
 <CAHk-=wg5+rXK8dpjkSmK7tuz29VfxVWNEwmTVYB409mmyLkeew@mail.gmail.com>
 <20181128174545.GJ30658@n2100.armlinux.org.uk>
 <CAHk-=whnz4Kty6cas11bc2Gh=9zTzeeRS2k=dV9Hfc4B=xnHkQ@mail.gmail.com>
 <20181128180841.GM30658@n2100.armlinux.org.uk>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181128180841.GM30658@n2100.armlinux.org.uk>
User-Agent: Mutt/1.5.23 (2014-03-12)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Wed, Nov 28, 2018 at 06:08:41PM +0000, Russell King - ARM Linux wrote:
> On Wed, Nov 28, 2018 at 10:00:06AM -0800, Linus Torvalds wrote:
> > On Wed, Nov 28, 2018 at 9:45 AM Russell King - ARM Linux
> > <linux@armlinux.org.uk> wrote:
> > >
> > > > I don't think this is a huge deal, but ERR_PTR() has been hugely
> > > > successful elsewhere. And I'm not hugely convinced about all these
> > > > "any address can be valid" arguments. How the hell do you generate a
> > > > random dma address in the last page that isn't even page-aligned?
> > >
> > > kmalloc() a 64-byte buffer, dma_map_single() that buffer.
> > 
> > No.
> > 
> > You already cannot do that kmalloc(), exactly because of ERR_PTR().
> 
> I'm very sorry, but I think you are confused.
> 
> kmalloc() returns a _virtual_ address, which quite rightly must not be
> in the top 4K of 4GB, exactly due to ERR_PTR().  That is fine.
> 
> However, that is a completely different kettle of fish from a physical
> or DMA address - neither of which are virtual addresses.
> 
> Now, say we have 1GB of RAM which starts at 0xc0000000 _physical_.
> The kernel is configured with a 2GB/2GB user/kernel split, which means
> all 1GB of RAM is mapped as lowmem from 0x80000000 to 0xbfffffff
> inclusive.  This means kmalloc() can return any address in that range.
> 
> ERR_PTR() will work correctly on any of those pointers, meaning that
> none of them will be seen as an error.
> 
> However, map any virtual address in the range of 0xbffff000 to
> 0xbfffffff into DMA space, and the resulting DMA address could well
> be in the range of 0xfffff000 to 0xffffffff - precisely the range
> of addresses that you are advocating to be used for error codes.
> 
> > The whole argument of "every possible piece of memory is DMA'able" is
> > just wrong.
> 
> I'm very sorry, but I do not buy your argument - you are conflating
> virtual addresses which ERR_PTR() deals in with physical and bus
> addresses - and if you persist down this route, you will cause
> regressions.

Here's another case:

i.MX6 with 4GB of RAM.  Devices are mapped to 0-0x0fffffff physical,
RAM is mapped to 0x10000000-0xffffffff physical.  The last 256MB of
RAM is not accessible as this is a 32-bit device.  DMA addresses are
the same as physical addresses.

While the final physical page will be highmem in a normal kernel,
and thus will not be available for kmalloc(), that doesn't mean it
can't happen.  A crashdump kernel loaded high in physical memory
(eg, last 512MB and given the last 512MB to play around in) would
have the top 512MB as lowmem, and therefore available for kmalloc().

If a page is available in lowmem, it's available for kmalloc(), and
we can't say that we will never allocate memory from such a page for
DMA - if we do and we're using an IS_ERR_VALUE() scheme, it _will_
break if that happens as memory will end up being mapped by the DMA
API but dma_mapping_error() will see it as a failure.

It won't be an obvious breakage, because it depends on the right
conditions happening - a kmalloc() from the top page of physical
RAM and that being passed to dma_map_single().  IOW, it's not something
that a quick boot test would find, it's something that is likely to
cause failures after a system has been running for a period of time.

There are other situations where there are possibilities - such as:

	dma_map_page(dev, page, offset, size, direction)

If 'page' is a highmem page which happens to be the top page in the
4GB space, and offset is non-zero, and there's a 1:1 mapping between
physical address and DMA address, the returned value will be
0xfffff000 + offset - within the "last 4095 values are errors"
range.

Networking uses this for fragments - the packet fragment list is
a list of pages, offsets and sizes - we have sendpage() that may
end up finding that last page, and TCP-sized packets may be
generated from it which would certianly result in non-zero offsets
being passed to dma_map_page().

So, whatever way _I_ look at it, I find your proposal to be unsafe
and potentially regression causing, and I *completely* and strongly
oppose it in its current form.

-- 
RMK's Patch system: http://www.armlinux.org.uk/developer/patches/
FTTC broadband for 0.8mile line in suburbia: sync at 12.1Mbps down 622kbps up
According to speedtest.net: 11.9Mbps down 500kbps up
