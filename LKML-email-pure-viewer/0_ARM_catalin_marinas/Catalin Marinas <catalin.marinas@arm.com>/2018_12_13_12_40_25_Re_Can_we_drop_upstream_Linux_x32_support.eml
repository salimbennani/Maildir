Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 21:23:53 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id C0EF158061F;
	Thu, 13 Dec 2018 04:40:52 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 13 Dec 2018 04:40:52 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ApzvP9RFzVWNmj5JVh/RHJ51GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75o8u8bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJWSJPAp2y?=
 =?us-ascii?q?YZYMAeoPMulXs5TyqFkAohulHQmhBvjiyiNUinLswaE2z/4sHR/A0Qc9H9wOqn?=
 =?us-ascii?q?PUrNDtOaoMS++10LPHzTHCb/NQxDzz75LHcgogofGKR71watfaxE4zGAzfklWf?=
 =?us-ascii?q?s4jlPzKT1ugXtmiU9fBgVeOpi2E9sAF8uSKgxt0pioXTmo0VzVXE+Dx/zY0oJt?=
 =?us-ascii?q?O4UFZ2bcC4HJZUrS2WKoV7Tt04T211uys21qcKtJ+5cSQS1pgr2hzSZ+aaf4WH?=
 =?us-ascii?q?/h7vTvudLStliH5/er+zmxC/+lW6xOLmTMm7ylNKozJFktbSsnAN0ATe6taISv?=
 =?us-ascii?q?Rj5EetwzWP2B7J6uFCP080kbDXK5k7wr4/jpYTsELDETHqmEjukqOaakEp9vK1?=
 =?us-ascii?q?5+npfLnqvIKQOoxohg3kM6kjmNSzAeEiPQgPW2ib9/681Lrm/UDhRLVKj/s2kr?=
 =?us-ascii?q?TWsZzDJsQUuLS5AwlL3YYn8hq/CDmn0NIGknkdN19FZh2HgJbzO13UI/D3E+2/?=
 =?us-ascii?q?g1Kynzdv3fzGOafhAprVInjZjLjhZap961JbyAcrydBf5pFUBa8bLPP8R0/8r9?=
 =?us-ascii?q?jYDh4/MwypzOfrEtR91oUCWW2RBq+VKr/dsViN5ug3OemDeJcVuCrhK/gi//Pu?=
 =?us-ascii?q?jWU2mV4Bfaaz2psbcnC4Hul8LEWfbnrhmdMBEWYMvgojQ+3mklyCUThPZ3msW6?=
 =?us-ascii?q?Iw/C00CIWjDY3bXICinKSB3DunHp1Rfm1GCFeMHmnye4WHXPcMbiSSIsh6nzwA?=
 =?us-ascii?q?VLihTZIh1B60uA/7zbpnMvTb+ikCuZ3/09h14vXZlQsu+jxsE8Sdz2aNQnlukW?=
 =?us-ascii?q?MTRz8226N/rVZnyliZ06h1mPhYFd1V5/NUXQY2L5/cz+pmC9/sXgLNZMuGSFGj?=
 =?us-ascii?q?Qt++GzE+Usoxw8MSY0Z6A9iijQrM3yywD78RlryEHpo08q3H0nj1JsZ9zWvG1a?=
 =?us-ascii?q?Y7g1knRMtPKXOphqpl+wfPAI7Jll2Tl7y2eqQEwC7N6GCDwHKTs05CTg5/T7/J?=
 =?us-ascii?q?XXAFaUvQttT2+EXCQ7iqCbQkNwtBzdWPKq9Lat3vkFVHS+3vONXYY2KthWiwAQ?=
 =?us-ascii?q?yEya+LbIrvY28dxjnSCFAYkwAP+naLLRUxCT2/o23AFjBuFUjgY0X38eZgrnO2?=
 =?us-ascii?q?VUs0zwCMb0182Lu54B8VhfqAS/wN2rIIojsuqzJxHFylxdLZF8KApxZ9fKVbed?=
 =?us-ascii?q?49/FZH1WfetwxhPpyhL7puhkIEfwRwpUPu0xR3CoNPkcUxqHMqzQxyKb+X0V9b?=
 =?us-ascii?q?djOY24zwNaPTKmXo4B+vbKvW0EnE0NmK4qcP9Og4q1L7sQ6zEkot7Xpm3MdV0n?=
 =?us-ascii?q?eG/ZrKERcdXoj3UkY08Bh6uarXYi0854PSyH1tPrO4sj7E29I1GuQlzgyscMtY?=
 =?us-ascii?q?MKOBDAXyCdEVB9CyKOw2nFikdhIFPP1I+KEoJc+ndvuG17StPOZvhz+miWVH4I?=
 =?us-ascii?q?Zg0kOD7SZ8S+jI34obzPGcxAeISzD8jFK5uMDthY9EfS0SHna4ySX8Ho5RZ7F9?=
 =?us-ascii?q?cpwRCWizJM273NN+iID3W35Z7VKsG0kJ2Mu0dhWMdVz92gtQ2F8ToXymnyu40j?=
 =?us-ascii?q?N1nysorqqZwCzB3eDieAAbNW5MQWlolU3sLpSsj9AGQEioaBAklRuk5Urgx6lX?=
 =?us-ascii?q?vr9/L3TVQUpTeyj2LmdiUra/t7aYYs5P7o8ovjtTUOimfV+aTbv9qQMA0yz/B2?=
 =?us-ascii?q?te2Cw7dzayt5X7hRN6kmGdLHV0rHbDYsF/3xTf5N/dRf5XwDUGQjJ1iT3WBli6?=
 =?us-ascii?q?Itmo8s+Yl5bFsuCiSW2hUodffjXszYOFrCG7/3FlAQWjn/Cvnd3qCQg73jX819?=
 =?us-ascii?q?VwVyXIrRD8b5Lv16S7N+JnY0ZpCEX968p8BoFxjI8wiIsM1ngdg5Wf5WAHnnvr?=
 =?us-ascii?q?MdVHxaL+a2IART0RzN7U+gTl2FBjIWiPx4L2TXidxsphZ9+nYmIZwC497sZKCL?=
 =?us-ascii?q?uK47xAhyd6vl24rQfJa/hngjgd0ecu6GIdg+wRvQotzyadDaoIEUhWIyPsjAiI?=
 =?us-ascii?q?4M6krKpMemmva7ew2VF6ndCgCrGCvw5dVGz4epckAS9/8MF/PEjQ333074HuYM?=
 =?us-ascii?q?PQYs4Lth2IjxfAiPBYKI42lvoPnyZmOHjyvXs4y+4glhxu3Iq3vIyGK2Vr4aK4?=
 =?us-ascii?q?DQRUNjzzZ8MP5D7tibxSkdqR34CqBp9hACkEXIP0TfK0FzIfre/oOByJED04t3?=
 =?us-ascii?q?eXA77fHRKE5UdirnLPFY2rNn6NKHkYy9ViWAeSJEhFjA8IWzU6m4YzFhq2y8z5?=
 =?us-ascii?q?bEd5+jcR60b6qhRWz+JnKQL/Xn3DpAuyaTc0VZufLAdQ7g5Y/EfYKsie7uN1Hy?=
 =?us-ascii?q?FF8Zyttg2NKmqHZwtWCWEFQFCLB1fmPrO2/9nP7/CYBvaiL/vJebiPqeteV+qR?=
 =?us-ascii?q?xZKyyIRm+SyANt6IPnlkAP02wU5DXXF/G8TElDQDUS0XlyTRb8GFoBew4DF4rs?=
 =?us-ascii?q?e68P7zQgLg+ZOPC6dOMdVo4x22gbmMN++ThCZ6KDZUzJAMxWXPyLgQwlESkTxu?=
 =?us-ascii?q?dyK2HLQEtC7NSr/Qm6BNAx4abSNzKNVH76Ym0gZRPs7bj8v/1qRkgf4tF1dFSV?=
 =?us-ascii?q?vhl9mzaswXOG69Lk3IBUaROLSCJD3G2MX3YaK6Sb1Ng+RYrRywuTCHE0D9OjSP?=
 =?us-ascii?q?jSXmVxeqMetUliGUIAReuJ2hchZqEWXjUNPmahihPNBrlzE53b00iW3MNWMHNT?=
 =?us-ascii?q?h8ckVNrqCf7C9Cg/V/HXBB4WRhLeWehymZ6OzYII4MsfR3GiR0i/5a4HMixrpV?=
 =?us-ascii?q?9i5EQvl1mCrUrtF2olCmkvOAyjxoUBdVrjZLhYSLvVhtOKnD95lAX2rE8wwJ7W?=
 =?us-ascii?q?mKFxsKoN5lWZXTvPV5zNTe3IbuNDBH8sjP/spUU8zJNMWvM3c7NxftXjnOA11W?=
 =?us-ascii?q?YySsMDT0jlBUlPCUvlictJk8o4OkzJEHVrZfVVpzE/oAC0JsB/QLOpIxVTQhx+?=
 =?us-ascii?q?3IxPUU7Gaz+UGCDP5RuYrKA7fLWa3i?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BXAADoUhJch0O0hNFdBhwBAQEEAQEHB?=
 =?us-ascii?q?AEBgVQEAQELAQGDaieaNBSZMywTAYQ8AoMGIjcGDQEDAQEBAQEBAgETAQEBCA0?=
 =?us-ascii?q?JCCkvQgEMAYFmJAGCYQEBAQECAQECJBM/BQEJAQEKDgQGCSUDDDoOBgoJBYMcg?=
 =?us-ascii?q?XkIBAGncTOKMYw8gVc/gyVQLoRzhWkCiTuBd5UIVQcCgiQEjyYjCpFAmyWBeDM?=
 =?us-ascii?q?aI4M8giQDF44dPwEBMYEFAQGDRYkDAQE?=
X-IPAS-Result: =?us-ascii?q?A0BXAADoUhJch0O0hNFdBhwBAQEEAQEHBAEBgVQEAQELAQG?=
 =?us-ascii?q?DaieaNBSZMywTAYQ8AoMGIjcGDQEDAQEBAQEBAgETAQEBCA0JCCkvQgEMAYFmJ?=
 =?us-ascii?q?AGCYQEBAQECAQECJBM/BQEJAQEKDgQGCSUDDDoOBgoJBYMcgXkIBAGncTOKMYw?=
 =?us-ascii?q?8gVc/gyVQLoRzhWkCiTuBd5UIVQcCgiQEjyYjCpFAmyWBeDMaI4M8giQDF44dP?=
 =?us-ascii?q?wEBMYEFAQGDRYkDAQE?=
X-IronPort-AV: E=Sophos;i="5.56,349,1539673200"; 
   d="scan'208";a="55028736"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 13 Dec 2018 04:40:34 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729148AbeLMMkb (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 13 Dec 2018 07:40:31 -0500
Received: from usa-sjc-mx-foss1.foss.arm.com ([217.140.101.70]:32894 "EHLO
        foss.arm.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1729145AbeLMMkb (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 13 Dec 2018 07:40:31 -0500
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.72.51.249])
        by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id B3A4BA78;
        Thu, 13 Dec 2018 04:40:30 -0800 (PST)
Received: from localhost (unknown [10.1.25.102])
        by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPSA id 758FF3F575;
        Thu, 13 Dec 2018 04:40:30 -0800 (PST)
Received: from cmarinas by localhost with local (Exim 4.89)
        (envelope-from <catalin.marinas@arm.com>)
        id 1gXQHx-0001Pq-Na; Thu, 13 Dec 2018 12:40:25 +0000
Date: Thu, 13 Dec 2018 12:40:25 +0000
From: Catalin Marinas <catalin.marinas@arm.com>
To: Andy Lutomirski <luto@kernel.org>
Cc: Rich Felker <dalias@libc.org>, tg@mirbsd.de,
        Linus Torvalds <torvalds@linux-foundation.org>,
        X86 ML <x86@kernel.org>, LKML <linux-kernel@vger.kernel.org>,
        Linux API <linux-api@vger.kernel.org>,
        "H. Peter Anvin" <hpa@zytor.com>,
        Peter Zijlstra <peterz@infradead.org>,
        Borislav Petkov <bp@alien8.de>,
        Florian Weimer <fweimer@redhat.com>,
        Mike Frysinger <vapier@gentoo.org>,
        "H. J. Lu" <hjl.tools@gmail.com>, x32@buildd.debian.org,
        Arnd Bergmann <arnd@arndb.de>,
        Will Deacon <will.deacon@arm.com>
Subject: Re: Can we drop upstream Linux x32 support?
Message-ID: <20181213124025.bczxzj6ez34joo6v@localhost>
References: <CALCETrXoRAibsbWa9nfbDrt0iEuebMnCMhSFg-d9W-J2g8mDjw@mail.gmail.com>
 <CAHk-=wi_Kp=3XmGDdzmadzFSPFvuL+aAJ6ZPAR=o4z=KwYT2vw@mail.gmail.com>
 <Pine.BSM.4.64L.1812112150480.21176@herc.mirbsd.org>
 <CALCETrWgpAX7FV23zHmid83SsgnwFMKD4a_-xSEgB6v0kJR5sA@mail.gmail.com>
 <Pine.BSM.4.64L.1812112327500.21176@herc.mirbsd.org>
 <CALCETrXf0rmadycxmpGxd41qP9X+PAjyGHTwbGhKyp6oMKMRrA@mail.gmail.com>
 <Pine.BSM.4.64L.1812120231410.21176@herc.mirbsd.org>
 <CALCETrUYn=S=hmJ0tKdm2LoSgkWchY2_65sH7hJZp7wfS30giw@mail.gmail.com>
 <20181212165237.GT23599@brightrain.aerifal.cx>
 <CALCETrV6+YAazq7vY_aR=4kXc4ykXb1Se7hgvHeEVJtbZ91=Qg@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <CALCETrV6+YAazq7vY_aR=4kXc4ykXb1Se7hgvHeEVJtbZ91=Qg@mail.gmail.com>
User-Agent: NeoMutt/20170113 (1.7.2)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Wed, Dec 12, 2018 at 10:03:30AM -0800, Andy Lutomirski wrote:
> On Wed, Dec 12, 2018 at 8:52 AM Rich Felker <dalias@libc.org> wrote:
> > On Wed, Dec 12, 2018 at 08:39:53AM -0800, Andy Lutomirski wrote:
> > > I'm proposing another alternative.  Given that x32 already proves that
> > > the user bitness model doesn't have to match the kernel model (in x32,
> > > user "long" is 32-bit but the kernel ABI "long" is 64-bit), I'm
> > > proposing extending this to just make the kernel ABI be LP64.  So
> > > __kernel_size_t would be 64-bit and pointers in kernel data structures
> > > would be 64-bit.  In other words, most or all of the kernel ABI would
> > > just match x86_64.
> > >
> > > As far as I can tell, the only thing that really needs unusual
> > > toolchain features here is that C doesn't have an extra-wide pointer
> > > type.  The kernel headers would need a way to say "this pointer is
> > > still logically a pointer, and user code may assume that it's 32 bits,
> > > but it has 8-byte alignment."
> >
> > None of this works on the userspace/C side, nor should any attempt be
> > made to make it work. Types fundamentally cannot have alignments
> > larger than their size. If you want to make the alignment of some
> > pointers 8, you have to make their size 8, and then you just have LP64
> > again if you did it for all pointers.
> >
> > If on the other hand you tried to make just some pointers "wide
> > pointers", you'd also be completely breaking the specified API
> > contracts of standard interfaces. For example in struct iovec's
> > iov_base, &foo->iov_base is no longer a valid pointer to an object of
> > type void* that you can pass to interfaces expecting void**. Sloppy
> > misunderstandings like what you're making now are exactly why x32 is
> > already broken and buggy (&foo->tv_nsec already has wrong type for
> > struct timespec foo).
> 
> I don't think it's quite that broken.  For the struct iovec example,
> we currently have:
> 
>            struct iovec {
>                void  *iov_base;    /* Starting address */
>                size_t iov_len;     /* Number of bytes to transfer */
>            };
> 
> we could have, instead: (pardon any whitespace damage)
> 
>            struct iovec {
>                void  *iov_base;    /* Starting address */
>                uint32_t __pad0;
>                size_t iov_len;     /* Number of bytes to transfer */
>                uint32_t __pad1;
>            } __attribute__((aligned(8));
> 
> or the same thing but where iov_len is uint64_t.  A pointer to
> iov_base still works exactly as expected.  Something would need to be
> done to ensure that the padding is all zeroed, which might be a real
> problem.

We looked at this approach briefly for arm64/ILP32 and zeroing the pads
was the biggest problem. User programs would not explicitly zero the pad
and I'm not sure the compiler would be any smarter. This means it's the
kernel's responsibility to zero the pad (around get_user,
copy_from_user), so it doesn't actually simplify the kernel side of the
syscall interface.

If the data flow goes the other way (kernel to user), this approach
works fine.

> No one wants to actually type all the macro gunk into the headers to
> make this work, but this type of transformation is what I have in mind
> when the compiler is asked to handle the headers.  Or there could
> potentially be a tool that automatically consumes the uapi headers and
> spits out modified headers like this.

If the compiler can handle the zeroing, that would be great, though not
sure how (some __attribute__((zero)) which generates a type constructor
for such structure; it kind of departs from what the C language offers).

> Realistically, I think a much better model would be to use true ILP32
> code, where all the memory layouts in the uapi match i386.

The conclusion we came to on arm64 was that an ILP32 ABI should not
really be any different from a _new_ 32-bit architecture ABI. It differs
from arm32 a bit (different syscall numbers, off_t is 64-bit,
sigcontext) but not significantly as it is still able to use the
majority of the compat_sys_* wrappers.

-- 
Catalin
