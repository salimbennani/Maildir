Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:53:12 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 71D385804F9;
	Thu,  6 Dec 2018 12:34:57 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 12:34:57 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AWzo+UBKcHkPgqO4WT9mcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgULvn9rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZUMhfVzJPDJ6/?=
 =?us-ascii?q?YYsBAOUOIftXoIvzqFsVtRuzBxKhBP/zxjJSmnP6wbc33/onHArb3AIgBdUOsH?=
 =?us-ascii?q?HModjoNqcSVvq1zK/VxjvBcfxW3Tj955LSfRA6vPqBWrJwftTVyUkgDQzKlE6Q?=
 =?us-ascii?q?pJfmPzyLzOQNtXaU7+56WeKokW4npBh8rz6yzckvkonEnpwZxkzA+Clj3Yo4K8?=
 =?us-ascii?q?O0RFRmbdOnDJdcrSCXOoluTs4jQmxkojs2xqAGtJKhYSQHzIorywTQZvGGdYWD?=
 =?us-ascii?q?/wjtW/yLIThigXJoYLK/iAi28Uin0uD8SMa030hQriZfkdnDqGoN1xrN5ciDUP?=
 =?us-ascii?q?d9+V2h2TmX2wDS7OFLP1w0mLLFJ5I9xrM8jIcfvErdEiPshUn7j7Oael8l9+Wq?=
 =?us-ascii?q?8+jnZ6/ppp6YN496kAH+NaEul9S7AeQ5NAgOQmea9f2/1LL95035RqtFjvkvnq?=
 =?us-ascii?q?nevpHaI9oUprSiDg9L3YYs9Qy/Ay2l0NsGh3kHKkxKeBadg4juIVHOL+j0De2j?=
 =?us-ascii?q?jFS0jDdr2/fGM6XlApXMLXjMjq3tfLlg60NHzAozzNZf549bC70bIfLzXFPxu8?=
 =?us-ascii?q?LcDhMjLwO0xOPnAs1n1owCQWKPHrOZMKTKvF+I/O0vIvWMa5USuDrnK/gl+uTh?=
 =?us-ascii?q?jXk2mVIGeamp3J0XaG23H/h8IkWZZ2bsjckFEWsQogU+S+nqgkWYUTFPf3ayQ7?=
 =?us-ascii?q?485jYjBYKkCofMWJqhgL+G3Ce9GJ1WYXtLClSNEXfuaoWFVO0AaCOUIs99jDME?=
 =?us-ascii?q?UaKtRJMm1RGrrAX60aZoLvLI+i0EspLuzMJ65/bTlRE19jx4Fd6d3HuPT2xvmm?=
 =?us-ascii?q?MIRjk23L1woEBny1eD17R4jOJcFdBJ+/xJVQI6P4bGz+NmE9DyRh7BftCRRVal?=
 =?us-ascii?q?WNqmBys9TtYww9AUZUZ9FM6vjhTC3yqsHr8UmKaHBJ0y8qLAwXfxI9xxxGrB1K?=
 =?us-ascii?q?kkl1MmWNdANXW6hq5j8AjeH5PGnF+Hl6m0b6gc3DTC9GGYzWWQukFUVwpwUabA?=
 =?us-ascii?q?XXAbfUbWqdX55kXfT76hE7gnMw1BydKcJatOcNHmkVJGRPL7MtTEf22xg3uwBQ?=
 =?us-ascii?q?qPxr6UcYXlYXsd0zvHBEgEiQ8T+22GOhY4Biq6p2LeDTpuFU/gYk/28Ol+rm+7?=
 =?us-ascii?q?QVEwzw2Qc0Jh0L+18AYPhfOAU/MTwq4EuCA5pjVoHVa92tXWC8aApwthZqlcfc?=
 =?us-ascii?q?kx4FBd1WLdtgx9OJOgIrtmhl4fdQR3okzv2w92CoVGjcglsncqwBBuJqKf1VNL?=
 =?us-ascii?q?bymY0ozoOr3LNmny+wiiZLTS2l7A39eZ5KcO5O4jpFX+oQ6mDEwi83Zg09lLyH?=
 =?us-ascii?q?ac4pTKDAwPUZP+SEo39h56p63EbSk5/Y/byXpsMaysuD/Yx90pHPclygqnf9pH?=
 =?us-ascii?q?MKKECRX+HNEAC8mvKOwlgV6pbh0fMeBW9a40Od6mdvSc1K6qOuZggCypjWBd7I?=
 =?us-ascii?q?9h1UKM8jJ2SvTU0JYd3/GYwgyHWi/mjFegrs/4g5pEaiwVHmalzyjrGpRRZqxr?=
 =?us-ascii?q?cYkXE2iuJ9C4yctkh57qXX5V71qjB1IA2M+0dhuedV393QtM1UsJpXyrgze3zz?=
 =?us-ascii?q?txkzsxtKqQwDTOw/j+dBoAImNKRGhigU3sIISulNAaQU6oYhMtlBuk40b62qda?=
 =?us-ascii?q?qL5+L2nVXUdHYSz2I3t+Xau3s7qIe9RP548wsSVLTOS8ZkiXSrznrBsA0CPjHG?=
 =?us-ascii?q?xeyCogdz6wuZX5nB16iGSDI3Z1t3fZfcBwxRHC5N3TX/JR3zwGRDVmhjnTHFSz?=
 =?us-ascii?q?I96p/dCMnZfZru++T36hVoFUcSTzzYKPriy76XdoAR2+mfC+gdnnEQk80S/m2N?=
 =?us-ascii?q?hmTyTIrBDgYob106S2K/5ofk5tBFXk8cp1Bpl+kpcshJEXwXUahY+a/XsdnWfz?=
 =?us-ascii?q?LNVUw6T+bHUWSD4Pwt7V5hXl2UJ5InKIwYL5SmuSws97a9amZWMW3zo379pWB6?=
 =?us-ascii?q?eM8LxEgSx1r0K9rQLQYvhyhC0RyPUw534Bn+EGphAtwT6DDbAIEklVJijslxWO?=
 =?us-ascii?q?79Cjo6Rbfmevcb6s1EVgmdCtFq2NogZZWHzhYJctATdw7tljMFLLyHDz9obkeN?=
 =?us-ascii?q?zKYdMSrBKUlQrAj/NOKJIwjfcKgStnOWTgvXwq0eI7jBpu3Y2ks4iDMWli4KW5?=
 =?us-ascii?q?AhtAPD3ve8wT4i3tjbpZnsuOxI+gBJJhGjEWXJfySfKoDSkftfDmNwaIDT09pW?=
 =?us-ascii?q?2XGbvZHQ+D9khmq2jDHIysN3GSPHMZ18ltRAGBJExDhwAZRDc6kYQ8Fg+038zt?=
 =?us-ascii?q?alt56ioS5l7lqRtM1+RoOAPkUmrEoAeoazE0SIWQLRZM7wFC4VvVPtKa7u5pAy?=
 =?us-ascii?q?5Y+ZihphSXKmOHfwRIEX0JWkucClHjObmu+MDA8/WCCeq4NffOerKOqepRV/qT?=
 =?us-ascii?q?wZKv041m/yuDN8mVP3liCeE71VRHXXxjB8vZnDAPQTQNly3Rd86buAu8+ipvo8?=
 =?us-ascii?q?C/7vvrWQHv5YiOC7dIMtVv4Re2gaidOO6KmSZ5Mi1V1pcNxX/O1bge00QeiyBo?=
 =?us-ascii?q?dzmxD7sAsTTBQ77Xmq9SFxQbcT98NNNU76Ig2QlAIdTUis7u2b5ikPE0C01JVV?=
 =?us-ascii?q?jgmsyyYcwKIme9NE7IBUqRNbSGIyHLzN/zYa+mVbJQi+BUvQWquTmHC0/jIiiD?=
 =?us-ascii?q?lz7xWhCzMOFMiTuXMwBEtI6hchZiF27jQcniah26Nt93kDI3zac1hnPMKW4TLz?=
 =?us-ascii?q?x8f1lRob2X6CNSmu9/FHBZ7np5MemEnD6U7unCJZYQtPtrAyJ0mPpb4XQ60bRV?=
 =?us-ascii?q?6i5ESedxmCvTqN5uvl6nnvOOyjphTBpBtDJLiJiXskVlPKWKvqVHDEzN+h4cpU?=
 =?us-ascii?q?mNDRADv5MxENHyvaRZ0vDOkqzpITtP+t6S+tETUZv6MsWCZVAjNgDvUB7ZCAQM?=
 =?us-ascii?q?RCXjYWHSg0NUmeq69XCPqJU+7J/2l8xdGfdgSFUpG6ZCWQxeF9sYLcIyB2t8nA?=
 =?us-ascii?q?=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAABVhwlch0O0hNFkGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUgMBAQEBAQsBg2snmCKCDRRollKBJANMFBgTAYdXIjUIDQE?=
 =?us-ascii?q?DAQEBAQEBAgETAQEBCA0JCCkjDII2JAGCYQEBAQEDAQI3BgEBNwEFCQEBCg4HA?=
 =?us-ascii?q?wklAwwFSRMFgxyCAgWlZoIfgnYBAQWHJQiINYJOgRwXgX+BEYIUSTWINoIEIo8?=
 =?us-ascii?q?5fI9XVQmROwsYkTaZDIFIAWmBITMaCCgIO4JsghsJAxeIXoVeITKBAgMBASETi?=
 =?us-ascii?q?gYBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ABAABVhwlch0O0hNFkGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUgMBAQEBAQsBg2snmCKCDRRollKBJANMFBgTAYdXIjUIDQEDAQEBAQEBAgETA?=
 =?us-ascii?q?QEBCA0JCCkjDII2JAGCYQEBAQEDAQI3BgEBNwEFCQEBCg4HAwklAwwFSRMFgxy?=
 =?us-ascii?q?CAgWlZoIfgnYBAQWHJQiINYJOgRwXgX+BEYIUSTWINoIEIo85fI9XVQmROwsYk?=
 =?us-ascii?q?TaZDIFIAWmBITMaCCgIO4JsghsJAxeIXoVeITKBAgMBASETigYBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,323,1539673200"; 
   d="scan'208";a="65685203"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 06 Dec 2018 12:34:55 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726027AbeLFUew (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 6 Dec 2018 15:34:52 -0500
Received: from mail.kernel.org ([198.145.29.99]:48738 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1725945AbeLFUew (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 6 Dec 2018 15:34:52 -0500
Received: from localhost (unknown [66.115.192.46])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id B3D9C20892;
        Thu,  6 Dec 2018 20:34:50 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1544128490;
        bh=KZ6s2fJ1WWeh277p0EeDsjnOxayRM6gWMrFD0LbLPqU=;
        h=Date:From:To:Cc:Subject:References:In-Reply-To:From;
        b=FPVPdInLPH04jolZuycavZJteuK+BQhCtF8tENnzlbzsQchQeE189pGCwk2DEnNSy
         S3bgjmoqOaOVspCXJSvo9KlSXqbuBrkqbzmHkoxKq9Ns3YnLA2kQRLjaWYc3y40BOU
         3uGu6FEix0e9Y2Avk+39Yr1vsDrmmAPsp87diHjs=
Date: Thu, 6 Dec 2018 14:34:50 -0600
From: Bjorn Helgaas <helgaas@kernel.org>
To: Randy Dunlap <rdunlap@infradead.org>
Cc: LKML <linux-kernel@vger.kernel.org>,
        linux-pci <linux-pci@vger.kernel.org>,
        Jonathan Corbet <corbet@lwn.net>,
        Logan Gunthorpe <logang@deltatee.com>
Subject: Re: [PATCH] pci: p2pdma: clean up documentation and kernel-doc
Message-ID: <20181206203449.GA247703@google.com>
References: <9f17c653-07dd-bf00-a4a2-fccbd9470603@infradead.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <9f17c653-07dd-bf00-a4a2-fccbd9470603@infradead.org>
User-Agent: Mutt/1.10.1 (2018-07-13)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Sat, Dec 01, 2018 at 09:31:34AM -0800, Randy Dunlap wrote:
> From: Randy Dunlap <rdunlap@infradead.org>
> 
> Fix typos, spellos, and grammar in p2pdma.rst and p2pdma.c.
> 
> Fix return value(s) in function pci_p2pmem_alloc_sgl().
> 
> Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
> Cc: linux-pci@vger.kernel.org
> Cc: Bjorn Helgaas <bhelgaas@google.com>
> Cc: Jonathan Corbet <corbet@lwn.net>
> Cc: Logan Gunthorpe <logang@deltatee.com>

Applied with Logan's ack to pci/peer-to-peer for v4.21, thanks!

> ---
>  Documentation/driver-api/pci/p2pdma.rst |    4 ++--
>  drivers/pci/p2pdma.c                    |   14 +++++++-------
>  2 files changed, 9 insertions(+), 9 deletions(-)
> 
> --- lnx-420-rc4.orig/Documentation/driver-api/pci/p2pdma.rst
> +++ lnx-420-rc4/Documentation/driver-api/pci/p2pdma.rst
> @@ -49,7 +49,7 @@ For example, in the NVMe Target Copy Off
>    in that it exposes any CMB (Controller Memory Buffer) as a P2P memory
>    resource (provider), it accepts P2P memory pages as buffers in requests
>    to be used directly (client) and it can also make use of the CMB as
> -  submission queue entries (orchastrator).
> +  submission queue entries (orchestrator).
>  * The RDMA driver is a client in this arrangement so that an RNIC
>    can DMA directly to the memory exposed by the NVMe device.
>  * The NVMe Target driver (nvmet) can orchestrate the data from the RNIC
> @@ -111,7 +111,7 @@ that's compatible with all clients using
>  If more than one provider is supported, the one nearest to all the clients will
>  be chosen first. If more than one provider is an equal distance away, the
>  one returned will be chosen at random (it is not an arbitrary but
> -truely random). This function returns the PCI device to use for the provider
> +truly random). This function returns the PCI device to use for the provider
>  with a reference taken and therefore when it's no longer needed it should be
>  returned with pci_dev_put().
>  
> --- lnx-420-rc4.orig/drivers/pci/p2pdma.c
> +++ lnx-420-rc4/drivers/pci/p2pdma.c
> @@ -422,7 +422,7 @@ static int upstream_bridge_distance_warn
>   *
>   * Returns -1 if any of the clients are not compatible (behind the same
>   * root port as the provider), otherwise returns a positive number where
> - * a lower number is the preferrable choice. (If there's one client
> + * a lower number is the preferable choice. (If there's one client
>   * that's the same as the provider it will return 0, which is best choice).
>   *
>   * For now, "compatible" means the provider and the clients are all behind
> @@ -493,7 +493,7 @@ EXPORT_SYMBOL_GPL(pci_has_p2pmem);
>   * @num_clients: number of client devices in the list
>   *
>   * If multiple devices are behind the same switch, the one "closest" to the
> - * client devices in use will be chosen first. (So if one of the providers are
> + * client devices in use will be chosen first. (So if one of the providers is
>   * the same as one of the clients, that provider will be used ahead of any
>   * other providers that are unrelated). If multiple providers are an equal
>   * distance away, one will be chosen at random.
> @@ -580,7 +580,7 @@ EXPORT_SYMBOL_GPL(pci_alloc_p2pmem);
>   * pci_free_p2pmem - free peer-to-peer DMA memory
>   * @pdev: the device the memory was allocated from
>   * @addr: address of the memory that was allocated
> - * @size: number of bytes that was allocated
> + * @size: number of bytes that were allocated
>   */
>  void pci_free_p2pmem(struct pci_dev *pdev, void *addr, size_t size)
>  {
> @@ -617,7 +617,7 @@ EXPORT_SYMBOL_GPL(pci_p2pmem_virt_to_bus
>   * @nents: the number of SG entries in the list
>   * @length: number of bytes to allocate
>   *
> - * Returns 0 on success
> + * Return: %NULL on error or &struct scatterlist pointer and @nents on success
>   */
>  struct scatterlist *pci_p2pmem_alloc_sgl(struct pci_dev *pdev,
>  					 unsigned int *nents, u32 length)
> @@ -673,7 +673,7 @@ EXPORT_SYMBOL_GPL(pci_p2pmem_free_sgl);
>   *
>   * Published memory can be used by other PCI device drivers for
>   * peer-2-peer DMA operations. Non-published memory is reserved for
> - * exlusive use of the device driver that registers the peer-to-peer
> + * exclusive use of the device driver that registers the peer-to-peer
>   * memory.
>   */
>  void pci_p2pmem_publish(struct pci_dev *pdev, bool publish)
> @@ -733,7 +733,7 @@ EXPORT_SYMBOL_GPL(pci_p2pdma_map_sg);
>   * @use_p2pdma: returns whether to enable p2pdma or not
>   *
>   * Parses an attribute value to decide whether to enable p2pdma.
> - * The value can select a PCI device (using it's full BDF device
> + * The value can select a PCI device (using its full BDF device
>   * name) or a boolean (in any format strtobool() accepts). A false
>   * value disables p2pdma, a true value expects the caller
>   * to automatically find a compatible device and specifying a PCI device
> @@ -784,7 +784,7 @@ EXPORT_SYMBOL_GPL(pci_p2pdma_enable_stor
>   *		whether p2pdma is enabled
>   * @page: contents of the stored value
>   * @p2p_dev: the selected p2p device (NULL if no device is selected)
> - * @use_p2pdma: whether p2pdme has been enabled
> + * @use_p2pdma: whether p2pdma has been enabled
>   *
>   * Attributes that use pci_p2pdma_enable_store() should use this function
>   * to show the value of the attribute.
> 
> 
