Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 21:34:48 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 3223D580522;
	Wed, 19 Dec 2018 04:56:02 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by fmsmga002-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 19 Dec 2018 04:56:01 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Aob6gVxXyFD6hO5ZNSqAwt1rPSWfV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhCAvadThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGoyz?=
 =?us-ascii?q?b4UNAOQBM+hWrJTzqUUSohulHQmhBvjiyiNUinLswaE2z/gtHAPA0Qc9H9wOqn?=
 =?us-ascii?q?PUrNDtOakPTOC1yajIzSneZP1Lwzj855bHchY7rvqRWr9watfRyUwuFwPZlFmQ?=
 =?us-ascii?q?spbqPjyL2eQLqWeW9PFvVfioi2E9tg5+vj+vxsI2hobVgYIVz0nJ+CNky4g2Pd?=
 =?us-ascii?q?21UFB3bcKgHZdKqi2XOZV6Ttk/T2xrpCo20LwLtJyjcCQU1JgqwwTTZv+HfoSS?=
 =?us-ascii?q?/B7vSOWcLS15iX9nfr+0mgy8/lK6yuLmU8m5yFZKoTRBktnLrn0NyRPT5dadSv?=
 =?us-ascii?q?dn/UeuxyyP1wbN5eFAO0w0krDbK5E5zr4xkJocr1jDEzfolEnqiKKabFgo9+a2?=
 =?us-ascii?q?5+j9f7nrpYOQO5V1hwz8Kqgun9awAeU8MggARWib/uG82aXn/U34RrVKk/I3nr?=
 =?us-ascii?q?DasJ/EP8QboLC2AwtM3oYk5Re/CSmp0M4DkHkZI1JKZgiHg5LqO17QOvD4C+mw?=
 =?us-ascii?q?g1C2nDds3fDGMaXtAo/RIXjbjLfhYbF95lZYyAoyztBQ+YhYC74cIP/oXk/xtd?=
 =?us-ascii?q?rYDgI2MgCuwubnDsl92Z0aWW6VHqCZN6bSu0eS5u0zO+mMeJMVuDHlJvgl/fHu?=
 =?us-ascii?q?jGM5lkUafaWz3ZsXdWq3HvJpI0iCZXrsg9EBEXoFvwYkTezqjkGCXiBXZ3qoQ6?=
 =?us-ascii?q?084TQ7Apq8DYjfXoCtnKCB3CCjE51UYWBJFEqAEXTvd4WCXfcMbzmfIstgkjwC?=
 =?us-ascii?q?SLigRJUt1RCotA/m1bVnKvDY9TEftZLmzNJ1/fHclQku9TxoCMSQy3uCT3p0nm?=
 =?us-ascii?q?MPRD86xrp/rlZ/ylqY1ah4gvpYFcFc5v9TUwc6M4LcwPJ+C9zoRg3BedKJQk68?=
 =?us-ascii?q?Qtq6GTExUs4xw9gWbkZ+AdqiiArP3y6rA7APkbyLC4c58qbd33j3OsZ8xGzK1K?=
 =?us-ascii?q?gnj1k6XMRPMXeqibJ49wjWH4TJiVmWl762daQA2y7A7HqMwnCQvE5GSgJwUb/K?=
 =?us-ascii?q?XXYEZkTIq9T14UfCT7yrCbQjKQZBzc+CKq1Xatzml1lGRfHjOMjAbGK1gWu/GR?=
 =?us-ascii?q?GIxraUZorwZ2odxDndCFQDkw0L4HmJLxY+CTm7r2LeFjNuE0nvbF3q8eRlrHO7?=
 =?us-ascii?q?T0k0zxyFbkF71rq1/AIViuKYS/8Jwr0EvyIhoS1uHFmhx9LWF8aApw15caVAYN?=
 =?us-ascii?q?M95VBH1X7Ztw19JJCgM7puhlkEcwRzvkPu0Rp3B55EkcgrqnMq0QVzJbiZ0FNH?=
 =?us-ascii?q?azOXw5TwNqfLJWn1+RClc7TW1U3G0NaK5qcP7+w1pE/nvA63GUst7XVm38NO3H?=
 =?us-ascii?q?uB+5rFFgwSUZH2UkYp7BV6o7DaYi8g54Lbz3FsMK+0siPc1NItHucq1hGgf9JH?=
 =?us-ascii?q?OqOeCADyC9EaB9SpKOEym1mpcwgIM/xI+K81P8Opbf2G2KGwMeZknTKmi3lH4Y?=
 =?us-ascii?q?9n3kKN8Sp8VvDH35Ifz/6E2QuHUi/2jE29vcDvhYBEeTYSE3KlySjlGIFefLdy?=
 =?us-ascii?q?cpsMCWu0Jc242M9+h5/0V3FE7lGjA04J19GzeRqVaVzwxglQ1UURoXy6liq01T?=
 =?us-ascii?q?10kzc1rqWB2CzC2fjtdB0COmRTXmltkU/sIZSoj9AdREWpbwkpmAGl5Erg3Khb?=
 =?us-ascii?q?uaJ/InLXQUdJeSj2Mm5jXrGxtrqEf85A9pcovT9LX+S7ZFCQUqT9rAcC0yP/A2?=
 =?us-ascii?q?tewyg2dzOwtZXjnBx6i2WdIGxorHXDesFwxhbf5NrCSv5XxTcGQCh4iT/KBlmz?=
 =?us-ascii?q?JdWp/NOUl4vdveC6TW6uSppTcSzzx4OaqCS7/XFqAQG4n/2rmtzoCw863TX519?=
 =?us-ascii?q?lrUyXFtxL8Yojt16SnPuNrZEhoBFng68VkHoFyiJc/hJYV2XICnJWa4WIHkXvv?=
 =?us-ascii?q?MdVcwa/+b2ACRT8Rz97V/QjqwktjLn2SyoL9V3WdxNZhZtagbmMX3CI9895FCK?=
 =?us-ascii?q?OO4LNYmit1p0KyrRjNbvhlgjcd1fwu5WYfg+EIuwoi1D+RA74MEklDISzjiQ6I?=
 =?us-ascii?q?4Mugo6VNa2aiaryw1Et4ndC8A7COuABcWHDlepg8GS989NlwMFXJ0Hfr8IHrZM?=
 =?us-ascii?q?HQbc4Pth2TixrAk+9VKJcrmvsLnyVnP3/9vWY+y+46lhFu2ZC6vI6aK2Ri5q65?=
 =?us-ascii?q?AxhYNiHraMMX4D3ikaFensOO1YC1ApphAikLXIfvTf+wCz0dr/PnNwKTEDEmrn?=
 =?us-ascii?q?ebBKHSHQue6EdgsnLOHIqnN3CRJHkF09piQAORK1BYgAARRD86hII2Fhi2xMz9?=
 =?us-ascii?q?d0d0/jIR6UT9qhRS0eJkLQX/Xn3cpAe1aTc0VZ6fIwBN7gxZ40fVMMqe7v98Hi?=
 =?us-ascii?q?1C/52hqhCNJXKfZwhSEW4JXUmEDUj5Pray/dnA7/SYBu2mIvrOZrWOtPVeV+qS?=
 =?us-ascii?q?ypKpyIdm5DGMNsOAPnR5C/0720xDXW12GsjDmjUPTTAXmDzJb8KBuBi8/Sh3pN?=
 =?us-ascii?q?il8Pv3QALv+ZePC7xKPNVv5R+2gKSDN+2RhCpjKjZYzJQMxXDWx7gFwV4SkDpj?=
 =?us-ascii?q?dz2sEbQGqC7MQ7jcmq5RDx4HdSxzMNFE4L473glIIcTbkM/61qZkjv4pDFdITU?=
 =?us-ascii?q?bumtyyaswQPW68NEnLBEKKNLmdIT3Lwsf3Yb6zSLFKjeVUsQGwtiifE0P5IjuD?=
 =?us-ascii?q?kDzpXQi1Me5QlCGbIABeuIalfxZxCGjjScjqZQGhPNBrjT0537s0i2jONW4dNz?=
 =?us-ascii?q?h8bkxMoqeR7SNenvVwBWhB4mB5IumDniaT9/PYJYoOsft3HiR0kPpX4XQgxLtT?=
 =?us-ascii?q?6SFERfp1lzPTr95uuV6mlOaPxyFjUBpPrDZLmY2KsV9jOaXf6plPR3LE8AgR4m?=
 =?us-ascii?q?WXDhRZ7+diX+HvvKVZ0ZDgkK/yODFP6ZqA4cQYF+DQKcSaLGAmNxv5XjLZWlgr?=
 =?us-ascii?q?VzmuYFrCgk1B2Mqb5nCTp9BusYXpmYZIUbZLWVo8PvkADU1pF9sHZpxwW2V3wv?=
 =?us-ascii?q?agkMcU6C/m/1HqT8JAs8WCD6rKDA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AXAAB+Pxpch0O0hNFkHgEGBwaBUQkLA?=
 =?us-ascii?q?YNrJ4N9lBWBawUdFJdJgXMtEwGHKyI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwy?=
 =?us-ascii?q?CNiQBgmEBAQEBAwECIAQZAQE3AQUJAQEKCwMDAwECAQICJgICAx8SAQUBFAgGC?=
 =?us-ascii?q?wgFA4MaggIFm2k8iilwfDOCdgEBBYcqCBJ5izSBVz+BEYJkLogJgleJS4F2hRa?=
 =?us-ascii?q?QXwcCgiUEjzkYkVmZczCBJYIOMxojgQEGgjWCGwwXg0qKWzczgQUBAY1gAQE?=
X-IPAS-Result: =?us-ascii?q?A0AXAAB+Pxpch0O0hNFkHgEGBwaBUQkLAYNrJ4N9lBWBawU?=
 =?us-ascii?q?dFJdJgXMtEwGHKyI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmEBAQEBA?=
 =?us-ascii?q?wECIAQZAQE3AQUJAQEKCwMDAwECAQICJgICAx8SAQUBFAgGCwgFA4MaggIFm2k?=
 =?us-ascii?q?8iilwfDOCdgEBBYcqCBJ5izSBVz+BEYJkLogJgleJS4F2hRaQXwcCgiUEjzkYk?=
 =?us-ascii?q?VmZczCBJYIOMxojgQEGgjWCGwwXg0qKWzczgQUBAY1gAQE?=
X-IronPort-AV: E=Sophos;i="5.56,372,1539673200"; 
   d="scan'208";a="142745097"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 19 Dec 2018 04:56:00 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728533AbeLSMz5 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 19 Dec 2018 07:55:57 -0500
Received: from mail-ed1-f67.google.com ([209.85.208.67]:38387 "EHLO
        mail-ed1-f67.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726833AbeLSMz5 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 19 Dec 2018 07:55:57 -0500
Received: by mail-ed1-f67.google.com with SMTP id h50so16877239ede.5
        for <linux-kernel@vger.kernel.org>; Wed, 19 Dec 2018 04:55:55 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=broadcom.com; s=google;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=MAfLH1EZQD20uBK2TrTBmxwRXAyaLXXO4enNZzYPr/8=;
        b=gPDmYItpFdcr21u1CT34XRBw6ywAnTTNDlJFdQgGGbktlqmyouWbHkNvDMgkAuYu0s
         ihYBqQAmbPbPC863GYv4Br1QO+xs8SVWpLboRMxxWERT+p8kaPgs6TKVIMaEOVezK/dx
         hN884LoXy5fgj8ujdR/GM9OelCcLCVQyM7Q7M=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=MAfLH1EZQD20uBK2TrTBmxwRXAyaLXXO4enNZzYPr/8=;
        b=tnlTFYkw+cBAWIP10jqPe7kIVJEs5EZRbAHnI3kt0uia2qQ7pnm8H4qD21f/qQ5lv5
         jgf7S+bKWn7bfQGJ2KNM9HqRDiX0rDiJJIZiF6npHqssk24bIjVo8Eye6S5ROg/bXqWd
         WUgkthv72QcRfdOHbhrZHSOAtK0g0Pdj+TWefUgRCRRJSaPvouvqGS6w8QD96uVzfnuR
         K8D9jGy1KonQzUFOP6s5pnmyrvy7723LZEhlcE65f5e07sAJJAsq/y6AQLBUiUoWGI/S
         LZjgT2n9lhgpnMIqAwpXj/9Q8cImUkXt50Al2O1mH+QNTnvdC5fcxi0MbLScikMmpLuP
         K/Gw==
X-Gm-Message-State: AA+aEWaHm1ZORDxFiDzDig8XH17pBaDKYH1gLmDO3ECcc+GySX7P5iGn
        O5QRsCBsXYPwmd91E9/B/AkYsbk2q6r154CwXioa3w==
X-Google-Smtp-Source: AFSGD/W3zUR6Cezuo3357ZqX6XnYZtbnLT349w886skhrgUaJ7P00H5UH4Ic0FAENvdIn+VEctrsb91K5YoFRd0bejM=
X-Received: by 2002:a50:ab82:: with SMTP id u2mr20165164edc.111.1545224155167;
 Wed, 19 Dec 2018 04:55:55 -0800 (PST)
MIME-Version: 1.0
References: <20181204155122.6327-1-douliyangs@gmail.com> <alpine.DEB.2.21.1812191136550.1651@nanos.tec.linutronix.de>
In-Reply-To: <alpine.DEB.2.21.1812191136550.1651@nanos.tec.linutronix.de>
From: Sumit Saxena <sumit.saxena@broadcom.com>
Date: Wed, 19 Dec 2018 18:25:44 +0530
Message-ID: <CAL2rwxq8kKMtPY6SvWzMCUUfYGSJyjjSFCKu4zvLpRyWvQtWNw@mail.gmail.com>
Subject: Re: [PATCH 0/3] irq/core: Fix and expand the irq affinity descriptor
To: Thomas Gleixner <tglx@linutronix.de>
Cc: douliyangs@gmail.com, LKML <linux-kernel@vger.kernel.org>,
        linux-pci@vger.kernel.org,
        Kashyap Desai <kashyap.desai@broadcom.com>,
        Shivasharan Srikanteshwara 
        <shivasharan.srikanteshwara@broadcom.com>,
        Ming Lei <ming.lei@redhat.com>, Christoph Hellwig <hch@lst.de>,
        Bjorn Helgaas <bhelgaas@google.com>, douliyang1@huawei.com
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Wed, Dec 19, 2018 at 4:23 PM Thomas Gleixner <tglx@linutronix.de> wrote:
>
> On Tue, 4 Dec 2018, Dou Liyang wrote:
>
> > Now,  Spreading the interrupt affinity info by a cpumask pointer is not
> > enough, meets a problem[1] and hard to expand in the future.
> >
> > Fix it by:
> >
> >      +-----------------------------------+
> >      |                                   |
> >      |     struct cpumask *affinity      |
> >      |                                   |
> >      +-----------------------------------+
> >                        |
> >     +------------------v-------------------+
> >     |                                      |
> >     | struct irq_affinity_desc {           |
> >     |     struct cpumask   mask;           |
> >     |     unsigned int     is_managed : 1; |
> >     | };                                   |
> >     |                                      |
> >     +--------------------------------------+
> >
>
> So, I've applied that lot for 4.21 (or whatever number it will be). That's
> only the first step for solving Kashyap's problem.
>
> IIRC, then Kashap wanted to get initial interrupt spreading for these extra
> magic interrupts as well, but not have them marked managed.
>
> That's trivial to do now with the two queued changes in that area:
>
>   - The rework above
>
>   - The support for interrupt sets from Jens
>
> Just adding a small bitfield to struct irq_affinity which allows to tell
> the core that a particular interrupt set is not managed does the trick.
>
> Untested patch below.
>
> Kashyap, is that what you were looking for and if so, does it work?
Thomas,
We could not test these patches as they did net get applied to latest
linux-block tree cleanly.

Our requirement is: 1. extra interrupts should be un-managed and 2.
should be spread to CPUs of local NUMA node.
If interrupts are un-managed but not spread as per our requirement,
then still driver/userspace apps can manage by spreading
them as required by calling API- irq_set_affinity_hint().

Thanks,
Sumit
>
> Thanks,
>
>         tglx
>
> 8<-----------------
>
> Subject: genirq/affinity: Add support for non-managed affinity sets
> From: Thomas Gleixner <tglx@linutronix.de>
> Date: Tue, 18 Dec 2018 16:46:47 +0100
>
> Some drivers need an extra set of interrupts which are not marked managed,
> but should get initial interrupt spreading.
>
> Add a bitmap to struct irq_affinity which allows the driver to mark a
> particular set of interrupts as non managed. Check the bitmap during
> spreading and use the result to mark the interrupts in the sets
> accordingly.
>
> The unmanaged interrupts get initial spreading, but user space can change
> their affinity later on.
>
> Usage example:
>
>       struct irq_affinity affd = { .pre_vectors = 2 };
>       int sets[2];
>
>       /* Fill in sets[] */
>
>       affd.nr_sets = 2;
>       affd.sets = &sets;
>       affd.unmanaged_sets = 0x02;
>
>       ......
>
> So both sets are properly spread out, but the second set is not marked
> managed.
>
> Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
> ---
>  include/linux/interrupt.h |   10 ++++++----
>  kernel/irq/affinity.c     |   24 ++++++++++++++----------
>  2 files changed, 20 insertions(+), 14 deletions(-)
>
> --- a/kernel/irq/affinity.c
> +++ b/kernel/irq/affinity.c
> @@ -99,7 +99,8 @@ static int __irq_build_affinity_masks(co
>                                       cpumask_var_t *node_to_cpumask,
>                                       const struct cpumask *cpu_mask,
>                                       struct cpumask *nmsk,
> -                                     struct irq_affinity_desc *masks)
> +                                     struct irq_affinity_desc *masks,
> +                                     bool managed)
>  {
>         int n, nodes, cpus_per_vec, extra_vecs, done = 0;
>         int last_affv = firstvec + numvecs;
> @@ -154,6 +155,7 @@ static int __irq_build_affinity_masks(co
>                         }
>                         irq_spread_init_one(&masks[curvec].mask, nmsk,
>                                                 cpus_per_vec);
> +                       masks[curvec].is_managed = managed;
>                 }
>
>                 done += v;
> @@ -176,7 +178,8 @@ static int __irq_build_affinity_masks(co
>  static int irq_build_affinity_masks(const struct irq_affinity *affd,
>                                     int startvec, int numvecs, int firstvec,
>                                     cpumask_var_t *node_to_cpumask,
> -                                   struct irq_affinity_desc *masks)
> +                                   struct irq_affinity_desc *masks,
> +                                   bool managed)
>  {
>         int curvec = startvec, nr_present, nr_others;
>         int ret = -ENOMEM;
> @@ -196,7 +199,8 @@ static int irq_build_affinity_masks(cons
>         /* Spread on present CPUs starting from affd->pre_vectors */
>         nr_present = __irq_build_affinity_masks(affd, curvec, numvecs,
>                                                 firstvec, node_to_cpumask,
> -                                               cpu_present_mask, nmsk, masks);
> +                                               cpu_present_mask, nmsk, masks,
> +                                               managed);
>
>         /*
>          * Spread on non present CPUs starting from the next vector to be
> @@ -211,7 +215,7 @@ static int irq_build_affinity_masks(cons
>         cpumask_andnot(npresmsk, cpu_possible_mask, cpu_present_mask);
>         nr_others = __irq_build_affinity_masks(affd, curvec, numvecs,
>                                                firstvec, node_to_cpumask,
> -                                              npresmsk, nmsk, masks);
> +                                              npresmsk, nmsk, masks, managed);
>         put_online_cpus();
>
>         if (nr_present < numvecs)
> @@ -268,10 +272,11 @@ irq_create_affinity_masks(int nvecs, con
>
>         for (i = 0, usedvecs = 0; i < nr_sets; i++) {
>                 int this_vecs = affd->sets ? affd->sets[i] : affvecs;
> +               bool managed = !test_bit(i, &affd->unmanaged_sets);
>                 int ret;
>
> -               ret = irq_build_affinity_masks(affd, curvec, this_vecs,
> -                                               curvec, node_to_cpumask, masks);
> +               ret = irq_build_affinity_masks(affd, curvec, this_vecs, curvec,
> +                                              node_to_cpumask, masks, managed);
>                 if (ret) {
>                         kfree(masks);
>                         masks = NULL;
> @@ -289,10 +294,6 @@ irq_create_affinity_masks(int nvecs, con
>         for (; curvec < nvecs; curvec++)
>                 cpumask_copy(&masks[curvec].mask, irq_default_affinity);
>
> -       /* Mark the managed interrupts */
> -       for (i = affd->pre_vectors; i < nvecs - affd->post_vectors; i++)
> -               masks[i].is_managed = 1;
> -
>  outnodemsk:
>         free_node_to_cpumask(node_to_cpumask);
>         return masks;
> @@ -316,6 +317,9 @@ int irq_calc_affinity_vectors(int minvec
>         if (affd->nr_sets) {
>                 int i;
>
> +               if (WARN_ON_ONCE(affd->nr_sets > BITS_PER_LONG))
> +                       return 0;
> +
>                 for (i = 0, set_vecs = 0;  i < affd->nr_sets; i++)
>                         set_vecs += affd->sets[i];
>         } else {
> --- a/include/linux/interrupt.h
> +++ b/include/linux/interrupt.h
> @@ -249,12 +249,14 @@ struct irq_affinity_notify {
>   *                     the MSI(-X) vector space
>   * @nr_sets:           Length of passed in *sets array
>   * @sets:              Number of affinitized sets
> + * @unmanaged_sets:    Bitmap to mark members of @sets as unmanaged
>   */
>  struct irq_affinity {
> -       int     pre_vectors;
> -       int     post_vectors;
> -       int     nr_sets;
> -       int     *sets;
> +       int             pre_vectors;
> +       int             post_vectors;
> +       int             nr_sets;
> +       int             *sets;
> +       unsigned long   unmanaged_sets;
>  };
>
>  /**
