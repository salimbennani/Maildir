Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:56:44 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 1324E580522;
	Fri, 21 Dec 2018 19:18:04 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 21 Dec 2018 19:18:03 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A47l8tBKYF3PMQxAortmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgUKfT4rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZUMhfVzJPDJ6/?=
 =?us-ascii?q?YYsBAOUOIftXoIvzqFsVtRuzBxKhBP/zxjJSmnP6wbc33/onHArb3AIgBdUOsH?=
 =?us-ascii?q?HModjpMKcZTO+6zKjSzTXEcvhb3in96InSchAmuvyNXKx/cczQyUkxDQ/FilSQ?=
 =?us-ascii?q?qYr4PzKazOgNtHKb7+V6WeKyiG4qsgd8qSWsyMc0koTFmJ4Zx1Te+Slkzos5O8?=
 =?us-ascii?q?e0RFN4bNK4CpddtiOXO5NrTs4mQ2xkoiI3xqMctZKlfCUHxo4rywDZZveaaYaH?=
 =?us-ascii?q?+AjjW/yUITpghHJqZra/hxGq/Ei+xe3zSNO03ExJriVbiNnMsG4C1xjJ5siAUP?=
 =?us-ascii?q?t98V+t2TeJ1w/N9uFJOV44mbbfJpI737I9mIQfvV7eEiL1hEn6lq6be0c89uit?=
 =?us-ascii?q?8evnY7HmppGGN49zjwHzKqAums25AeQlPQkCRmub9vqm1L3l40L5RKxGjvo4k6?=
 =?us-ascii?q?nfrp/aP98WprC2AwBLyIYv8RW/ACm80NQeg3YHKEhJeBWdj4jmI13OOuz3De+j?=
 =?us-ascii?q?g1Swlzdm3/TGPrziAprTNHTCn6rhcK15605dzgoz0N9e64hVCrEHPPL8REvxuM?=
 =?us-ascii?q?bEAR8+Ngy+2/znB8ll1oMCRWKPBbeUMKPIvl+J+uIgOe6MaJUVuDbgMfcl4fHu?=
 =?us-ascii?q?gGQ9mV8ce6mpwJQWZGq5HvRgP0WWf37sjs0dHmcNuwo0VPbqh0GaUT5Pe3ayWL?=
 =?us-ascii?q?ox6SsgCIKmCofDRZqhgKab0ye5BZBWYmFGClaREXbnbYmEWvEMaD6MLc9liDAL?=
 =?us-ascii?q?Sb+hS4o53xG0qAD606ZnLvbT+iAAtpLszt516/fXlREz7zN0Ccud3nqJT2F1mG?=
 =?us-ascii?q?MIWjA30Lp+oUx71leMz6x4j+ZEGtxU4vNDSh06OoLEz+xmF9DyXRrMccqTR1a4?=
 =?us-ascii?q?XNqqGzExQcg3w98VfUl9HdKujhTA3yqvB78YjLiLBJ0y8qLB0Hn9Pcd9y3Da1K?=
 =?us-ascii?q?Y/i1kqWNdANWqjhqRn7QjcG5bJk1mFl6atbakTwTTC9HmdwmaUvEFXSghwUb7b?=
 =?us-ascii?q?UnAZfUbWqdX55kXfT76hE7gnMw1BydKcJatOcNHmkVJGRPL7MtTEf22xg3uwBQ?=
 =?us-ascii?q?qPxr6UcIrqemAd3CLBCEgEkwEf52qGORI5Bie7p2LeDTpuFV30bkPo8Ol+rm67?=
 =?us-ascii?q?T0AuwwGLaU1hy6S6+hoPifOATPMT26oOuD09pDVsAFa9w9XWBsKaqAplYqpdbs?=
 =?us-ascii?q?0y4Vdd2W3CqgxyI4avL6Zhhl4ZbQR6pEfu1xRxCoVdnskmtnIqzAxuKa2G1FNN?=
 =?us-ascii?q?bS+X3Zf1OrfPMGn94Aiva7LK2lHZyNuX+roP5O4kpFn5vQCpFlAt83No09RO13?=
 =?us-ascii?q?uc55PKDBcdUJ7rU0Y38QR6qK/eYiUn+4zU0nhsO7GusjDew9IpGPclyhG4ctdF?=
 =?us-ascii?q?MaOLCBX9E9cHCMipMuAqnUambggFPOxL6KE7JcemeOaY166xO+ZgmimrjWBG4I?=
 =?us-ascii?q?B7z0KN+DBwSu/O35YZ3f6Y2hGLWCv7jFekqsr3g5xLZSkOHmqjzijpHI5QZqxo?=
 =?us-ascii?q?cYcLE2uuONC3xtNlip7pWn5Y8kOjBlwc1M+ofxqSc0Ly3QlK2UsLpnynnDOyzy?=
 =?us-ascii?q?ZonDExsqqfwCvOzvzgdBUdIG5LR2pijVD2LYivld8aX0uobwkvlBS740b33Kxb?=
 =?us-ascii?q?pKV5L2nOTkZEZSn2L2d+UqSusrqOedJA6JQtsS9PSuSzfUiaSqLhoxsdyy7iH3?=
 =?us-ascii?q?FRxDchezGou5X5mQd3iGacLHZ1sXrYdtt8xRbZ5NzAW/FR2iAKSzV/iTnSHlK8?=
 =?us-ascii?q?JcWm/c2Il5ffteCzT2GhWYdScSXxzYOAqTG05WtlARCkm/Czm9vnERU10CPh1t?=
 =?us-ascii?q?lqUznIowj4YoXxy6u6NudndFFyBFDg88p6Bp1+kowoiZEV2HgahY+a8WAJkGjt?=
 =?us-ascii?q?KtVbxbzxbGAWSjEV2d7V7xPo2EliLnKP2oL4WW+RwspnZ9mmfGwW3jgx4NxNCK?=
 =?us-ascii?q?eR9LZEhzd6okKkrQLNZvhwhisdyfwr6HIAguAGogwtzjiGArAJHElVJijslxWO?=
 =?us-ascii?q?79Cjo6Rbfmevcb6s1EVgmdCtFq2NogZZWHzhYJctATdw7tljMFLLyHD88ZvreN?=
 =?us-ascii?q?7UbdIOrBGUlwrAgvNRKJIwkPoKmCVmNXj8vX0j1+40kxhu0Yums4iALmVn5Li5?=
 =?us-ascii?q?DQJANj3pe8MT/SngjaREkcaTwY+vBY9tGikRUJvrUPKoEy8StfL9OAaVCzA8rn?=
 =?us-ascii?q?abGbzCHQ6Q8ktmrnTPE4y1OHGTPnUW0dJiRByFLkxFnA8URCk6noI+Fg2yxM3h?=
 =?us-ascii?q?d1p55ikM5lHirBtA0PloNx75UmfQvwqobjY0SJ6CLBtZ9A1C5kHVMdCA4eJ3BS?=
 =?us-ascii?q?1X4pqhrAmVIGyBewtIFX0JWlCDB137Prmh+9jA8+ubBuq/NffOYq+OqetRV/iW?=
 =?us-ascii?q?35Kvz5Bm8i2INsWOOHliEvI61lBCXXB/B8TWhTEPRzYLmCLKas6RvA289TFvrs?=
 =?us-ascii?q?Cj7PTrXxri6pGSC7RJK9Vg5RC3jb2HN+6Rnyt5LTdY1pURxX7H0rQf3VgSiz1w?=
 =?us-ascii?q?eDmpC7gPqSnNTKfIkK9NExEbcz9zNNdP768kwglNOMvbhsnp2bJikvE1C0lKVV?=
 =?us-ascii?q?r6l8GtZMwKJXy9NVzdCEaKMrSGOSPEw8XtbaygTr1Qif1etwestjaDD0/jIjOD?=
 =?us-ascii?q?miHpVh+1N+FMiSCbPBpGt4C8chZiE27jTN39Zx2/Md93iyA2wLIuinPLM24cLS?=
 =?us-ascii?q?Zzc0dXorKM6iNYh6Y3J2sU33NrJO+L0x2Z5u6QfpIftvJxRD90nuVy73Ezyr8T?=
 =?us-ascii?q?5yZBEq9bgizX+/dq62+niO7HniRmSh1muDtNhZzNuURkJLWf8YNPH2vHqkFepV?=
 =?us-ascii?q?6MAggH8oM2QubkvLpdn52WzPr+?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AWAABorB1ch0O0hNFkGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBZYNsmkcUaJFohzEBhzAiOBIBAwEBAQEBAQIBEwEBAQgNCQg?=
 =?us-ascii?q?pL4I6KQGCZgEBAQEDAQIkEz8GCQEBCg4KCRMSAwwFKCEYgx2CAgQBpyQziiWMP?=
 =?us-ascii?q?xeBf4ERgl01iDqCJgKJQYYfgVKQFAmRXQwYkWAtm1CBd000BIMokFo/gTgBAY5?=
 =?us-ascii?q?/AQE?=
X-IPAS-Result: =?us-ascii?q?A0AWAABorB1ch0O0hNFkGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BZYNsmkcUaJFohzEBhzAiOBIBAwEBAQEBAQIBEwEBAQgNCQgpL4I6KQGCZgEBA?=
 =?us-ascii?q?QEDAQIkEz8GCQEBCg4KCRMSAwwFKCEYgx2CAgQBpyQziiWMPxeBf4ERgl01iDq?=
 =?us-ascii?q?CJgKJQYYfgVKQFAmRXQwYkWAtm1CBd000BIMokFo/gTgBAY5/AQE?=
X-IronPort-AV: E=Sophos;i="5.56,383,1539673200"; 
   d="scan'208";a="57421414"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 21 Dec 2018 19:18:02 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1731264AbeLVDR4 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Fri, 21 Dec 2018 22:17:56 -0500
Received: from zeniv.linux.org.uk ([195.92.253.2]:48810 "EHLO
        ZenIV.linux.org.uk" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1728705AbeLVDRz (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 21 Dec 2018 22:17:55 -0500
Received: from viro by ZenIV.linux.org.uk with local (Exim 4.91 #2 (Red Hat Linux))
        id 1gaXnQ-0008UJ-1j; Sat, 22 Dec 2018 03:17:48 +0000
Date: Sat, 22 Dec 2018 03:17:48 +0000
From: Al Viro <viro@zeniv.linux.org.uk>
To: Yafang Shao <laoar.shao@gmail.com>
Cc: mcgrof@kernel.org, keescook@chromium.org, adobriyan@gmail.com,
        akpm@linux-foundation.org, linux-fsdevel@vger.kernel.org,
        linux-kernel@vger.kernel.org
Subject: Re: [PATCH] proc: sysctl: fix double drop_sysctl_table()
Message-ID: <20181222031747.GA2217@ZenIV.linux.org.uk>
References: <1545444741-31694-1-git-send-email-laoar.shao@gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <1545444741-31694-1-git-send-email-laoar.shao@gmail.com>
User-Agent: Mutt/1.10.1 (2018-07-13)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Sat, Dec 22, 2018 at 10:12:21AM +0800, Yafang Shao wrote:
> The callers of insert_header() will drop sysctl table whatever
> insert_header() successes or fails.
> So we can't call drop_sysctl_table() in insert_header().
> 
> The call sites of insert_header() are all in fs/proc/proc_sysctl.c.

Except that at least insert_links() does this:

	...
        core_parent->header.nreg++;
	...
        err = insert_header(core_parent, links);
        if (err)
                kfree(links);
out:
        drop_sysctl_table(&core_parent->header);
with that drop clearly paired with explicit increment of nreg.  So your
patch appears to break at least that one.

Looking at the rest of callers... __register_sysctl_table() demonstrates
the same pattern - explicit increment of nreg, then insert_header(),
then *unconditional* drop undoing that increment.

The third and last caller (get_subdir()) appears to be different.
We do insert_header(), if it succeeds we bump nreg on new and
unconditionally drop a reference to dir, as well as new.

Let's look at the callers of that sucker.

        /* Reference moved down the diretory tree get_subdir */
        dir->header.nreg++;
        spin_unlock(&sysctl_lock);

        /* Find the directory for the ctl_table */
        for (name = path; name; name = nextname) {
                int namelen;
                nextname = strchr(name, '/');
                if (nextname) {  
                        namelen = nextname - name;
                        nextname++;
                } else {
                        namelen = strlen(name);
                } 
                if (namelen == 0)
                        continue;

                dir = get_subdir(dir, name, namelen);
                if (IS_ERR(dir))
                        goto fail;
        }

        spin_lock(&sysctl_lock);
        if (insert_header(dir, header))
                goto fail_put_dir_locked;

Aha...  So we are traversing a tree and it smells like get_subdir()
expects dir to be pinned by the caller, drops that reference and
either fails or returns the next tree node pinned.

_IF_ that matches the behaviour of get_subdir(), the code above
makes sense -
	grab dir
	for each non-empty pathname component
		next = get_subdir(dir, component)
		// dir got dropped
		if get_subdir has failed
			goto fail
		// next got grabbed
		dir = next
	insert_header(dir, header)
	drop dir
	if insert_header was successful
		return header
fail:
	// all references grabbed by the above are dropped by now

So let's look at get_subdir() from refcounting POV (ignoring the locking
for now):
        subdir = find_subdir(dir, name, namelen);
        if (!IS_ERR(subdir))
                goto found;
        if (PTR_ERR(subdir) != -ENOENT)
                goto failed;
yeccchhhhhhh....  What's wrong with if (subdir == ERR_PTR(-ENOENT))?
Anyway, find_subdir() appears to be refcounting-neutral.
        new = new_dir(set, name, namelen);
OK, looks like we are creating a new object here.  What's the value of .nreg
in it?  new_dir() itself doesn't seem to set it, but the thing it calls at
the end (init_header()) does set it to 1.  OK, so we'd got a reference to
new object, our counter being 1.  On failure it appears to return NULL.
OK...
        subdir = ERR_PTR(-ENOMEM);
        if (!new)
                goto failed;
right, so if allocation in new_dir() has failed, we are buggering off to the
same 'failed' label as on other exits.  In failure case new_dir() is
refcounting-neutral, so we are in the same environment.
        /* Was the subdir added while we dropped the lock? */
        subdir = find_subdir(dir, name, namelen);
        if (!IS_ERR(subdir))
                goto found;
        if (PTR_ERR(subdir) != -ENOENT)
                goto failed;
Interesting...  So we can get to 'failed' in some cases when new_dir()
has not failed.
        /* Nope.  Use the our freshly made directory entry. */
        err = insert_header(dir, &new->header);
        subdir = ERR_PTR(err);
        if (err)
                goto failed;
Looks like it expects insert_header() to be refcounting-neutral in failure
case...
        subdir = new;
found:
        subdir->header.nreg++;

OK, we can get here from 3 places:
	* subdir found by lookup before we even tried to allocate new.
new is NULL, subdir has just gotten a reference grabbed.
	* subdir found by re-lookup after new had been allocated.
new is non-NULL and we are holding one reference to it, subdir has
just gotten a reference grabbed and it's not equal to new.
	* new got successfully inserted into dir; subdir is equal
to new and we'd just grabbed the second reference to it.

Looks like in all those cases we have a reference grabbed on subdir
*and* a reference grabbed on new (if non-NULL).  Covers all 3 cases.,,

failed:
... and now we rejoin the failure paths (a lousy label name, that - we
get here on success as well).
        if (IS_ERR(subdir))
		whine
	drop reference to dir (the one that caller had grabbed for us)
	if new is not NULL
		drop reference to new.
	return subdir.

OK, in success case we have ended up with the total effect
	drop dir
	grab subdir
Holds in all 3 cases above.  On failure, we have dropped the reference
grabbed by new_dir (if any) and dropped dir.  That matches the behaviour
guessed by the look of the caller, and it definitely expects
insert_header() to be refcounting-neutral on failures.

And AFAICS, insert_header() is that.  Before your patch, that is...

The bottom line is, proposed behaviour change appears to be broken for all
callers.

NAK.

PS: I was going to add that get_subdir() was in bad need of comments, until
I actually looked around.  And right in front of that function we have this:
/**
 * get_subdir - find or create a subdir with the specified name.
 * @dir:  Directory to create the subdirectory in
 * @name: The name of the subdirectory to find or create
 * @namelen: The length of name
 *
 * Takes a directory with an elevated reference count so we know that
 * if we drop the lock the directory will not go away.  Upon success
 * the reference is moved from @dir to the returned subdirectory.
 * Upon error an error code is returned and the reference on @dir is
 * simply dropped.
 */

So it *IS* documented, description does match the behaviour and
I should've bloody well checked if it's there first.  And verified
that it does match the code, of course, but that's generally
simpler than deriving the behaviour from code and trying to come
up with sane description of such.
