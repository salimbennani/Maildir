Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 29 Nov 2018 18:19:18 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from FMSMGA003.fm.intel.com (fmsmga003.fm.intel.com [10.253.24.29])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 9510B5803ED
	for <like.xu@linux.intel.com>; Thu, 29 Nov 2018 02:10:15 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by FMSMGA003-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 02:10:15 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A8rZ0HxY+HfvH3kWka23NNqv/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpsy5YB7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTy9PDIOi?=
 =?us-ascii?q?YYUBDeUBM/pXoIfyqFUBsBW+HQuhCuHgxzNViHL6wbM10/86HAHa3gEtBc4CvG?=
 =?us-ascii?q?jOodj3MqoZTOC7zLPPzTXGd/5bxCny6I7Kch87pPGMXLRwetfTx0YxDQPFlEuf?=
 =?us-ascii?q?qYr+PzyJ1uQNtmmb4Pd8VemyjGMosB9+oj6vxso3iYnGmJgVylba+iV92oo6Oc?=
 =?us-ascii?q?e4R1RgYd6kEZtQsS6aO5FxQsM4TGFloSA3waAFt56jZCUG1ogryh3FZ/CaboSF?=
 =?us-ascii?q?4QjvWPifLDp4nn5pZbCyiw6z/EWu0OHwSNe43VVQoiZYiNXBtnIA2hrO4cadUP?=
 =?us-ascii?q?R95F2u2TOX2gDT9O5EJUc0mLLfK54g2b4wioETvV7MHi/whUX6lqiWdl8r+uSw?=
 =?us-ascii?q?6uTnZKvppoOEOoNqlg3zMb4iltGiDek7KAQCQWaW9OSm2LH+/0D1WLBKgec3kq?=
 =?us-ascii?q?ndvpDaP8MbpquhDg9MzIkj7gu/Ay6739sGg3kIMlZFdAucgIjuJlHOJuz3Aumk?=
 =?us-ascii?q?g1irlDdrxvPGMaP7DpTCM3jOiLPhfbd7605Bxws/19Ff55RICr4fJPL/QFP+tN?=
 =?us-ascii?q?vdDhIiNQy0xODnCNp71oMDQ26PBbWZMKzKvV+S+u0vO/WMZJMSuDvlL/gl5v3u?=
 =?us-ascii?q?gmEjlV4SYKmkxp8XaHG+HvR7LESVe3vsgtEdEWgUugoyVvDliFqHUW0bWnCpQq?=
 =?us-ascii?q?hp5i0nEJn0SsDHR5uxm/qH2yG0GIAQYXpJTVWFEHPtfoPDXO8QaSWUOYh4nzkZ?=
 =?us-ascii?q?ELSsVYIlhiyorxLwnr9uL+7I/X8BuJf+kdR4+eDX0As/7CF5FNi11WaLQGdp2G?=
 =?us-ascii?q?QSSGgtwap9rEdhn0qFyrVymPdCFNZetM9OBz8zMprbh8Z9DcLzXAOJKs+DT1C0?=
 =?us-ascii?q?Q9OnKSs8QtI435kFZEMrX527gxXemianHbIRv7qMApMy7+TbxXeiCdx6ziPs2a?=
 =?us-ascii?q?8jhlwnRINvOHe8i6hk/AjWBoLV2xGTmqCqXacRxijA8CGI12OVvEBeX0h3S6qT?=
 =?us-ascii?q?DiNXXVffsdmsvhCKdLSpE7lyd1IZkcM=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A6AAAiuv9bhxHrdtBlHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUwUBAQsBgTCCYoN5iHeLKYINiR6OJIF2ERgUh3IiNgcNAQMBAQEBAQECARM?=
 =?us-ascii?q?BAQEKCwkIGw4vgjYFAgMaAQaCWwEBAQECAQECIAQfCiwCAQECBgEBCg4KAgIiB?=
 =?us-ascii?q?AICAwFTBgESBYMcgXUFCAEEpjl8M4VBhGyBC4sLF4FAP4NuNYgFglcCj2qQLwo?=
 =?us-ascii?q?JkTIYgVqFEIMkhw6IeIEDjlGBTQuBe30IgyeCJxeOMS0xgQeLQYF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0A6AAAiuv9bhxHrdtBlHAEBAQQBAQcEAQGBUwUBAQsBgTC?=
 =?us-ascii?q?CYoN5iHeLKYINiR6OJIF2ERgUh3IiNgcNAQMBAQEBAQECARMBAQEKCwkIGw4vg?=
 =?us-ascii?q?jYFAgMaAQaCWwEBAQECAQECIAQfCiwCAQECBgEBCg4KAgIiBAICAwFTBgESBYM?=
 =?us-ascii?q?cgXUFCAEEpjl8M4VBhGyBC4sLF4FAP4NuNYgFglcCj2qQLwoJkTIYgVqFEIMkh?=
 =?us-ascii?q?w6IeIEDjlGBTQuBe30IgyeCJxeOMS0xgQeLQYF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,294,1539673200"; 
   d="scan'208";a="54820670"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 29 Nov 2018 02:10:14 -0800
Received: from localhost ([::1]:53171 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gSJGv-0002Mq-Lg
	for like.xu@linux.intel.com; Thu, 29 Nov 2018 05:10:13 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:44019)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <benh@kernel.crashing.org>) id 1gSJCC-00061W-J3
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 05:05:24 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <benh@kernel.crashing.org>) id 1gSJC7-00051S-RY
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 05:05:20 -0500
Received: from gate.crashing.org ([63.228.1.57]:58734)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <benh@kernel.crashing.org>)
	id 1gSJC7-00050i-A0
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 05:05:15 -0500
Received: from localhost (localhost.localdomain [127.0.0.1])
	by gate.crashing.org (8.14.1/8.14.1) with ESMTP id wATA4rt0031277;
	Thu, 29 Nov 2018 04:04:55 -0600
Message-ID: <d276b15312d32f3368c847a4f8155e351de6f17e.camel@kernel.crashing.org>
From: Benjamin Herrenschmidt <benh@kernel.crashing.org>
To: Paolo Bonzini <pbonzini@redhat.com>, qemu-devel@nongnu.org
Date: Thu, 29 Nov 2018 21:04:53 +1100
In-Reply-To: <2856b2ac-b14c-e72d-be96-93f9b39bc982@redhat.com>
References: <f4349b9ee95cbd9d5b16e9033fdf0d7c9e99aebf.camel@kernel.crashing.org>
	<2856b2ac-b14c-e72d-be96-93f9b39bc982@redhat.com>
Content-Type: text/plain; charset="UTF-8"
User-Agent: Evolution 3.30.2 (3.30.2-2.fc29) 
Mime-Version: 1.0
Content-Transfer-Encoding: 7bit
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.6.x [fuzzy]
X-Received-From: 63.228.1.57
Subject: Re: [Qemu-devel] [RFC/PATCH] i386: Atomically update PTEs with mttcg
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Thu, 2018-11-29 at 10:26 +0100, Paolo Bonzini wrote:
> On 29/11/18 00:15, Benjamin Herrenschmidt wrote:
> > Afaik, this isn't well documented (at least it wasn't when I last looked)
> > but OSes such as Linux rely on this behaviour:
> > 
> > The HW updates to the page tables need to be done atomically with the
> > checking of the present bit (and other permissions).
> > 
> > This is what allows Linux to do simple xchg of PTEs with 0 and assume
> > the value read has "final" stable dirty and accessed bits (the TLB
> > invalidation is deferred).
> > 
> > Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
> > ---
> > 
> > This is lightly tested at this point, mostly to gather comments on the
> > approach.
> 
> Looks good, but please kill the notdirty stuff first.  It's not needed
> and it's a clear bug.  When migrating, it can lead to PTEs being
> migrated without accessed and dirty bits.

I thought that too but looking closely with rth, it seems it's still
setting *those* dirty bits, it just avoids the collision test with the
translator. Unless I missed something...

Do you still want to kill them ? They are warty, no doubt...
 
For powerpc I need a cmpxchgq variant too, I'll probably split the
patch adding those mem ops from the rest as well.

Annoyingly, fixing riscv will need some tests on target_ulong size.

Cheers,
Ben.

> Paolo
> 
> > I noticed that RiscV is attempting to do something similar but with endian
> > bugs, at least from my reading of the code.
> > 
> >  include/exec/memory_ldst.inc.h |   3 +
> >  memory_ldst.inc.c              |  38 ++++++++++++
> >  target/i386/excp_helper.c      | 104 +++++++++++++++++++++++++--------
> >  3 files changed, 121 insertions(+), 24 deletions(-)
> > 
> > diff --git a/include/exec/memory_ldst.inc.h b/include/exec/memory_ldst.inc.h
> > index 272c20f02e..b7a41a0ad4 100644
> > --- a/include/exec/memory_ldst.inc.h
> > +++ b/include/exec/memory_ldst.inc.h
> > @@ -28,6 +28,9 @@ extern uint64_t glue(address_space_ldq, SUFFIX)(ARG1_DECL,
> >      hwaddr addr, MemTxAttrs attrs, MemTxResult *result);
> >  extern void glue(address_space_stl_notdirty, SUFFIX)(ARG1_DECL,
> >      hwaddr addr, uint32_t val, MemTxAttrs attrs, MemTxResult *result);
> > +extern uint32_t glue(address_space_cmpxchgl_notdirty, SUFFIX)(ARG1_DECL,
> > +    hwaddr addr, uint32_t old, uint32_t new, MemTxAttrs attrs,
> > +    MemTxResult *result);
> >  extern void glue(address_space_stw, SUFFIX)(ARG1_DECL,
> >      hwaddr addr, uint32_t val, MemTxAttrs attrs, MemTxResult *result);
> >  extern void glue(address_space_stl, SUFFIX)(ARG1_DECL,
> > diff --git a/memory_ldst.inc.c b/memory_ldst.inc.c
> > index acf865b900..63af8f7dd2 100644
> > --- a/memory_ldst.inc.c
> > +++ b/memory_ldst.inc.c
> > @@ -320,6 +320,44 @@ void glue(address_space_stl_notdirty, SUFFIX)(ARG1_DECL,
> >      RCU_READ_UNLOCK();
> >  }
> >  
> > +/* This is meant to be used for atomic PTE updates under MT-TCG */
> > +uint32_t glue(address_space_cmpxchgl_notdirty, SUFFIX)(ARG1_DECL,
> > +    hwaddr addr, uint32_t old, uint32_t new, MemTxAttrs attrs, MemTxResult *result)
> > +{
> > +    uint8_t *ptr;
> > +    MemoryRegion *mr;
> > +    hwaddr l = 4;
> > +    hwaddr addr1;
> > +    MemTxResult r;
> > +    uint8_t dirty_log_mask;
> > +
> > +    /* Must test result */
> > +    assert(result);
> > +
> > +    RCU_READ_LOCK();
> > +    mr = TRANSLATE(addr, &addr1, &l, true, attrs);
> > +    if (l < 4 || !memory_access_is_direct(mr, true)) {
> > +        r = MEMTX_ERROR;
> > +    } else {
> > +        uint32_t orig = old;
> > +
> > +        ptr = qemu_map_ram_ptr(mr->ram_block, addr1);
> > +        old = atomic_cmpxchg(ptr, orig, new);
> > +
> > +        if (old == orig) {
> > +            dirty_log_mask = memory_region_get_dirty_log_mask(mr);
> > +            dirty_log_mask &= ~(1 << DIRTY_MEMORY_CODE);
> > +            cpu_physical_memory_set_dirty_range(memory_region_get_ram_addr(mr) + addr,
> > +                                                4, dirty_log_mask);
> > +        }
> > +        r = MEMTX_OK;
> > +    }
> > +    *result = r;
> > +    RCU_READ_UNLOCK();
> > +
> > +    return old;
> > +}
> > +
> >  /* warning: addr must be aligned */
> >  static inline void glue(address_space_stl_internal, SUFFIX)(ARG1_DECL,
> >      hwaddr addr, uint32_t val, MemTxAttrs attrs,
> > diff --git a/target/i386/excp_helper.c b/target/i386/excp_helper.c
> > index 49231f6b69..5ccb9d6d6a 100644
> > --- a/target/i386/excp_helper.c
> > +++ b/target/i386/excp_helper.c
> > @@ -157,11 +157,45 @@ int x86_cpu_handle_mmu_fault(CPUState *cs, vaddr addr, int size,
> >  
> >  #else
> >  
> > +static inline uint64_t update_entry(CPUState *cs, target_ulong addr,
> > +                                    uint64_t orig_entry, uint32_t bits)
> > +{
> > +    uint64_t new_entry = orig_entry | bits;
> > +
> > +    /* Write the updated bottom 32-bits */
> > +    if (qemu_tcg_mttcg_enabled()) {
> > +        uint32_t old_le = cpu_to_le32(orig_entry);
> > +        uint32_t new_le = cpu_to_le32(new_entry);
> > +        MemTxResult result;
> > +        uint32_t old_ret;
> > +
> > +        old_ret = address_space_cmpxchgl_notdirty(cs->as, addr,
> > +                                                  old_le, new_le,
> > +                                                  MEMTXATTRS_UNSPECIFIED,
> > +                                                  &result);
> > +        if (result == MEMTX_OK) {
> > +            if (old_ret != old_le) {
> > +                new_entry = 0;
> > +            }
> > +            return new_entry;
> > +        }
> > +
> > +        /* Do we need to support this case where PTEs aren't in RAM ?
> > +         *
> > +         * For now fallback to non-atomic case
> > +         */
> > +    }
> > +
> > +    x86_stl_phys_notdirty(cs, addr, new_entry);
> > +
> > +    return new_entry;
> > +}
> > +
> >  static hwaddr get_hphys(CPUState *cs, hwaddr gphys, MMUAccessType access_type,
> >                          int *prot)
> >  {
> >      CPUX86State *env = &X86_CPU(cs)->env;
> > -    uint64_t rsvd_mask = PG_HI_RSVD_MASK;
> > +    uint64_t rsvd_mask;
> >      uint64_t ptep, pte;
> >      uint64_t exit_info_1 = 0;
> >      target_ulong pde_addr, pte_addr;
> > @@ -172,6 +206,8 @@ static hwaddr get_hphys(CPUState *cs, hwaddr gphys, MMUAccessType access_type,
> >          return gphys;
> >      }
> >  
> > + restart:
> > +    rsvd_mask = PG_HI_RSVD_MASK;
> >      if (!(env->nested_pg_mode & SVM_NPT_NXE)) {
> >          rsvd_mask |= PG_NX_MASK;
> >      }
> > @@ -198,8 +234,10 @@ static hwaddr get_hphys(CPUState *cs, hwaddr gphys, MMUAccessType access_type,
> >                  goto do_fault_rsvd;
> >              }
> >              if (!(pml4e & PG_ACCESSED_MASK)) {
> > -                pml4e |= PG_ACCESSED_MASK;
> > -                x86_stl_phys_notdirty(cs, pml4e_addr, pml4e);
> > +                pml4e = update_entry(cs, pml4e_addr, pml4e, PG_ACCESSED_MASK);
> > +                if (!pml4e) {
> > +                    goto restart;
> > +                }
> >              }
> >              ptep &= pml4e ^ PG_NX_MASK;
> >              pdpe_addr = (pml4e & PG_ADDRESS_MASK) +
> > @@ -213,8 +251,10 @@ static hwaddr get_hphys(CPUState *cs, hwaddr gphys, MMUAccessType access_type,
> >              }
> >              ptep &= pdpe ^ PG_NX_MASK;
> >              if (!(pdpe & PG_ACCESSED_MASK)) {
> > -                pdpe |= PG_ACCESSED_MASK;
> > -                x86_stl_phys_notdirty(cs, pdpe_addr, pdpe);
> > +                pdpe = update_entry(cs, pdpe_addr, pdpe, PG_ACCESSED_MASK);
> > +                if (!pdpe) {
> > +                    goto restart;
> > +                }
> >              }
> >              if (pdpe & PG_PSE_MASK) {
> >                  /* 1 GB page */
> > @@ -256,8 +296,10 @@ static hwaddr get_hphys(CPUState *cs, hwaddr gphys, MMUAccessType access_type,
> >          }
> >          /* 4 KB page */
> >          if (!(pde & PG_ACCESSED_MASK)) {
> > -            pde |= PG_ACCESSED_MASK;
> > -            x86_stl_phys_notdirty(cs, pde_addr, pde);
> > +            pde = update_entry(cs, pde_addr, pde, PG_ACCESSED_MASK);
> > +            if (!pde) {
> > +                goto restart;
> > +            }
> >          }
> >          pte_addr = (pde & PG_ADDRESS_MASK) + (((gphys >> 12) & 0x1ff) << 3);
> >          pte = x86_ldq_phys(cs, pte_addr);
> > @@ -295,8 +337,10 @@ static hwaddr get_hphys(CPUState *cs, hwaddr gphys, MMUAccessType access_type,
> >          }
> >  
> >          if (!(pde & PG_ACCESSED_MASK)) {
> > -            pde |= PG_ACCESSED_MASK;
> > -            x86_stl_phys_notdirty(cs, pde_addr, pde);
> > +            pde = update_entry(cs, pde_addr, pde, PG_ACCESSED_MASK);
> > +            if (!pde) {
> > +                goto restart;
> > +            }
> >          }
> >  
> >          /* page directory entry */
> > @@ -376,7 +420,7 @@ int x86_cpu_handle_mmu_fault(CPUState *cs, vaddr addr, int size,
> >      int error_code = 0;
> >      int is_dirty, prot, page_size, is_write, is_user;
> >      hwaddr paddr;
> > -    uint64_t rsvd_mask = PG_HI_RSVD_MASK;
> > +    uint64_t rsvd_mask;
> >      uint32_t page_offset;
> >      target_ulong vaddr;
> >  
> > @@ -401,6 +445,8 @@ int x86_cpu_handle_mmu_fault(CPUState *cs, vaddr addr, int size,
> >          goto do_mapping;
> >      }
> >  
> > + restart:
> > +    rsvd_mask = PG_HI_RSVD_MASK;
> >      if (!(env->efer & MSR_EFER_NXE)) {
> >          rsvd_mask |= PG_NX_MASK;
> >      }
> > @@ -436,8 +482,10 @@ int x86_cpu_handle_mmu_fault(CPUState *cs, vaddr addr, int size,
> >                      goto do_fault_rsvd;
> >                  }
> >                  if (!(pml5e & PG_ACCESSED_MASK)) {
> > -                    pml5e |= PG_ACCESSED_MASK;
> > -                    x86_stl_phys_notdirty(cs, pml5e_addr, pml5e);
> > +                    pml5e = update_entry(cs, pml5e_addr, pml5e, PG_ACCESSED_MASK);
> > +                    if (!pml5e) {
> > +                        goto restart;
> > +                    }
> >                  }
> >                  ptep = pml5e ^ PG_NX_MASK;
> >              } else {
> > @@ -456,8 +504,10 @@ int x86_cpu_handle_mmu_fault(CPUState *cs, vaddr addr, int size,
> >                  goto do_fault_rsvd;
> >              }
> >              if (!(pml4e & PG_ACCESSED_MASK)) {
> > -                pml4e |= PG_ACCESSED_MASK;
> > -                x86_stl_phys_notdirty(cs, pml4e_addr, pml4e);
> > +                pml4e = update_entry(cs, pml4e_addr, pml4e, PG_ACCESSED_MASK);
> > +                if (!pml4e) {
> > +                    goto restart;
> > +                }
> >              }
> >              ptep &= pml4e ^ PG_NX_MASK;
> >              pdpe_addr = ((pml4e & PG_ADDRESS_MASK) + (((addr >> 30) & 0x1ff) << 3)) &
> > @@ -472,8 +522,10 @@ int x86_cpu_handle_mmu_fault(CPUState *cs, vaddr addr, int size,
> >              }
> >              ptep &= pdpe ^ PG_NX_MASK;
> >              if (!(pdpe & PG_ACCESSED_MASK)) {
> > -                pdpe |= PG_ACCESSED_MASK;
> > -                x86_stl_phys_notdirty(cs, pdpe_addr, pdpe);
> > +                pdpe = update_entry(cs, pdpe_addr, pdpe, PG_ACCESSED_MASK);
> > +                if (!pdpe) {
> > +                    goto restart;
> > +                }
> >              }
> >              if (pdpe & PG_PSE_MASK) {
> >                  /* 1 GB page */
> > @@ -520,8 +572,10 @@ int x86_cpu_handle_mmu_fault(CPUState *cs, vaddr addr, int size,
> >          }
> >          /* 4 KB page */
> >          if (!(pde & PG_ACCESSED_MASK)) {
> > -            pde |= PG_ACCESSED_MASK;
> > -            x86_stl_phys_notdirty(cs, pde_addr, pde);
> > +            pde = update_entry(cs, pde_addr, pde, PG_ACCESSED_MASK);
> > +            if (!pde) {
> > +                goto restart;
> > +            }
> >          }
> >          pte_addr = ((pde & PG_ADDRESS_MASK) + (((addr >> 12) & 0x1ff) << 3)) &
> >              a20_mask;
> > @@ -563,8 +617,10 @@ int x86_cpu_handle_mmu_fault(CPUState *cs, vaddr addr, int size,
> >          }
> >  
> >          if (!(pde & PG_ACCESSED_MASK)) {
> > -            pde |= PG_ACCESSED_MASK;
> > -            x86_stl_phys_notdirty(cs, pde_addr, pde);
> > +            pde = update_entry(cs, pde_addr, pde, PG_ACCESSED_MASK);
> > +            if (!pde) {
> > +                goto restart;
> > +            }
> >          }
> >  
> >          /* page directory entry */
> > @@ -634,11 +690,11 @@ do_check_protect_pse36:
> >      /* yes, it can! */
> >      is_dirty = is_write && !(pte & PG_DIRTY_MASK);
> >      if (!(pte & PG_ACCESSED_MASK) || is_dirty) {
> > -        pte |= PG_ACCESSED_MASK;
> > -        if (is_dirty) {
> > -            pte |= PG_DIRTY_MASK;
> > +        pte = update_entry(cs, pte_addr, pte,
> > +                           PG_ACCESSED_MASK | (is_dirty ? PG_DIRTY_MASK : 0));
> > +        if (!pte) {
> > +            goto restart;
> >          }
> > -        x86_stl_phys_notdirty(cs, pte_addr, pte);
> >      }
> >  
> >      if (!(pte & PG_DIRTY_MASK)) {
> > 
> > 


