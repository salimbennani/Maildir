Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  14 Dec 2018 08:43:31 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga007.fm.intel.com (fmsmga007.fm.intel.com [10.253.24.52])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 5478058061F
	for <like.xu@linux.intel.com>; Thu, 13 Dec 2018 16:03:47 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by fmsmga007-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 13 Dec 2018 16:03:47 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3ASgzNohZsPqA4lLZqjv2d7BX/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZrsW9bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJVCJPAp2y?=
 =?us-ascii?q?YYUNAOoPIelXoYbyqVQToxumBwSiBuzixiJGi3Pqw6I6yP8sER3E0QE6A94CrG?=
 =?us-ascii?q?7ZodfzOawPUe611q7IzTDbYv5Lxzj97orIfQokofGNW7J7bMjfxlc1FwPfkFqQ?=
 =?us-ascii?q?r5flMC+V1uQIsmiU8vZgXv+ohmE8tQ5xpDivy9wviobXnIIVzE7L9SFjzIkpP9?=
 =?us-ascii?q?23UlV7Yd6lEJtWuCGWLYx2QtktQ2xxvisx174IuYajcSQU1JgqxATTZ+Gaf4WL?=
 =?us-ascii?q?+B7vSuicLDdiiH54er+znxe//Ea6xuHiSMW500xGojdfntTMtH0A0QHY5NKdRf?=
 =?us-ascii?q?tn5Eih3C6C1wDN5eFAJkA5ja7bK586wr4sjZofq0vDHinrmEnsi6+WbEok9vCp?=
 =?us-ascii?q?6+ThfLrmuoeRO5Fohgz9KKgih9GzDOciPgQQUWWW+f6w2KDh8EHhRbVFlPw2kq?=
 =?us-ascii?q?3XsJDAIsQbo7a0AxZL3YYm9hazFiqp38oGnXYZKFJJYQmIj4/0O1HIPP/3E+y/?=
 =?us-ascii?q?j1OokDdqxPDJIKftA5rQLnXblLfhfLB961NTyQYpzNBf4Y5UBa8FIP7pRkDxs9?=
 =?us-ascii?q?nYAwQ/MwyzxebnB9N91p4EVWKIGK+ZP7vesUWU6eI3P+mMeIgVtS75K/gk5P7h?=
 =?us-ascii?q?k2U1mFAAfaSy2ZsXaXa4HulpIkmDYHrshMsBHnkOvgYkUOPqj1iCAnZuYW2vVf?=
 =?us-ascii?q?c8+i0jE9DhSoPCXZy2xrqG2ii9A9tRfG8BD1mNFXLhccKDQ+sNbySJZdZslyFB?=
 =?us-ascii?q?WbW/Roty6Be1qQWvzrNmKvbTqDQVsI+m2NVr6umWjxwr6DFvE+yb1GeCSXwymX?=
 =?us-ascii?q?kHECQr1qJyqlAo11GYzKJjiOZZH9EA2/QcSwo/KNvQwvJ3D/j0XQTOeMrPT0yp?=
 =?us-ascii?q?Efu8BjRkZN83wdYLYkA1O9i4lB3FxCGqBr4Zi/TfDpEy8orf0mL3KsI7wGzPz6?=
 =?us-ascii?q?kgiVZgRdFAYz71zpVj/hTeUtaa236SkLynIOFFhHbA?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AMAADE8hJchxHrdtBjGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUgUBAQELAYEwgmKDfIh4izOCDYkhjjOBcxQYFIdFIjUIDQEDAQEBAQE?=
 =?us-ascii?q?BAgETAQEBCgsJCBsOL4I2BQIDGgEGglsBAQEBAgEBAiAEHwopAwIBAQIGAQEKE?=
 =?us-ascii?q?gYCAiIEAgIDAUUOGQWDHIF0BQgBBKgMfDOFQYRrgQuLMReBQD+DbjWIBYJXAok?=
 =?us-ascii?q?7hlOQdwoJkVkYgVyIRocoijOPFoFIAYILfQiDJ4ImAReOMS0xgQeKSIF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0AMAADE8hJchxHrdtBjGwEBAQEDAQEBBwMBAQGBUgUBAQE?=
 =?us-ascii?q?LAYEwgmKDfIh4izOCDYkhjjOBcxQYFIdFIjUIDQEDAQEBAQEBAgETAQEBCgsJC?=
 =?us-ascii?q?BsOL4I2BQIDGgEGglsBAQEBAgEBAiAEHwopAwIBAQIGAQEKEgYCAiIEAgIDAUU?=
 =?us-ascii?q?OGQWDHIF0BQgBBKgMfDOFQYRrgQuLMReBQD+DbjWIBYJXAok7hlOQdwoJkVkYg?=
 =?us-ascii?q?VyIRocoijOPFoFIAYILfQiDJ4ImAReOMS0xgQeKSIF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,350,1539673200"; 
   d="scan'208";a="142072637"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 13 Dec 2018 16:03:46 -0800
Received: from localhost ([::1]:57492 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gXaxF-0003r2-VN
	for like.xu@linux.intel.com; Thu, 13 Dec 2018 19:03:45 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:34612)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <benh@kernel.crashing.org>) id 1gXax6-0003qt-T8
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 19:03:37 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <benh@kernel.crashing.org>) id 1gXax1-00024e-G6
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 19:03:36 -0500
Received: from gate.crashing.org ([63.228.1.57]:58872)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <benh@kernel.crashing.org>)
	id 1gXax0-0001lN-V6
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 19:03:31 -0500
Received: from localhost (localhost.localdomain [127.0.0.1])
	by gate.crashing.org (8.14.1/8.14.1) with ESMTP id wBE03Hq7013089;
	Thu, 13 Dec 2018 18:03:18 -0600
Message-ID: <0a60912dfd70d652fc48d7b20401499b0bcb2a90.camel@kernel.crashing.org>
From: Benjamin Herrenschmidt <benh@kernel.crashing.org>
To: qemu-devel@nongnu.org
Date: Fri, 14 Dec 2018 11:03:17 +1100
In-Reply-To: <20181213235804.14956-3-benh@kernel.crashing.org>
References: <20181213235804.14956-1-benh@kernel.crashing.org>
	<20181213235804.14956-3-benh@kernel.crashing.org>
Content-Type: text/plain; charset="UTF-8"
User-Agent: Evolution 3.30.2 (3.30.2-2.fc29) 
Mime-Version: 1.0
Content-Transfer-Encoding: 7bit
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.6.x [fuzzy]
X-Received-From: 63.228.1.57
Subject: Re: [Qemu-devel] [PATCH 3/3] ppc: Fix radix RC updates
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Paolo Bonzini <pbonzini@redhat.com>,
	Richard Henderson <richard.henderson@linaro.org>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Fri, 2018-12-14 at 10:58 +1100, Benjamin Herrenschmidt wrote:
> They should be atomic for MTTCG. Note: a real POWER9 core doesn't actually
> implement atomic PTE updates, it always fault for SW to handle it. Only
> the nest MMU (used by some accelerator devices and GPUs) implements
> those HW updates.
> 
> However, the architecture does allow the core to do it, and doing so
> in TCG is faster than letting the guest do it.

Note: ppc hash MMU needs fixes too but of a different nature. I have
some queued up as well, but as-is, they are entangled with other ppc
target fixes, so I'll send them separately via David.

Cheers,
Ben.

> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
> ---
>  target/ppc/cpu.h         |  1 +
>  target/ppc/mmu-radix64.c | 70 +++++++++++++++++++++++++++++++++-------
>  2 files changed, 59 insertions(+), 12 deletions(-)
> 
> diff --git a/target/ppc/cpu.h b/target/ppc/cpu.h
> index ab68abe8a2..afdef2af2f 100644
> --- a/target/ppc/cpu.h
> +++ b/target/ppc/cpu.h
> @@ -493,6 +493,7 @@ struct ppc_slb_t {
>  #define DSISR_AMR                0x00200000
>  /* Unsupported Radix Tree Configuration */
>  #define DSISR_R_BADCONFIG        0x00080000
> +#define DSISR_ATOMIC_RC          0x00040000
>  
>  /* SRR1 error code fields */
>  
> diff --git a/target/ppc/mmu-radix64.c b/target/ppc/mmu-radix64.c
> index ab76cbc835..dba95aabdc 100644
> --- a/target/ppc/mmu-radix64.c
> +++ b/target/ppc/mmu-radix64.c
> @@ -28,6 +28,15 @@
>  #include "mmu-radix64.h"
>  #include "mmu-book3s-v3.h"
>  
> +static inline bool ppc_radix64_hw_rc_updates(CPUPPCState *env)
> +{
> +#ifdef CONFIG_ATOMIC64
> +    return true;
> +#else
> +    return !qemu_tcg_mttcg_enabled();
> +#endif
> +}
> +
>  static bool ppc_radix64_get_fully_qualified_addr(CPUPPCState *env, vaddr eaddr,
>                                                   uint64_t *lpid, uint64_t *pid)
>  {
> @@ -120,11 +129,18 @@ static bool ppc_radix64_check_prot(PowerPCCPU *cpu, int rwx, uint64_t pte,
>          return true;
>      }
>  
> +    /* Check RC bits if necessary */
> +    if (!ppc_radix64_hw_rc_updates(env)) {
> +        if (!(pte & R_PTE_R) || ((rwx == 1) && !(pte & R_PTE_C))) {
> +            *fault_cause |= DSISR_ATOMIC_RC;
> +            return true;
> +        }
> +    }
> +
>      return false;
>  }
>  
> -static void ppc_radix64_set_rc(PowerPCCPU *cpu, int rwx, uint64_t pte,
> -                               hwaddr pte_addr, int *prot)
> +static uint64_t ppc_radix64_set_rc(PowerPCCPU *cpu, int rwx, uint64_t pte, hwaddr pte_addr)
>  {
>      CPUState *cs = CPU(cpu);
>      uint64_t npte;
> @@ -133,17 +149,38 @@ static void ppc_radix64_set_rc(PowerPCCPU *cpu, int rwx, uint64_t pte,
>  
>      if (rwx == 1) { /* Store/Write */
>          npte |= R_PTE_C; /* Set change bit */
> -    } else {
> -        /*
> -         * Treat the page as read-only for now, so that a later write
> -         * will pass through this function again to set the C bit.
> -         */
> -        *prot &= ~PAGE_WRITE;
>      }
> +    if (pte == npte) {
> +        return pte;
> +    }
> +
> +#ifdef CONFIG_ATOMIC64
> +    if (qemu_tcg_mttcg_enabled()) {
> +        uint64_t old_be = cpu_to_be32(pte);
> +        uint64_t new_be = cpu_to_be32(npte);
> +        MemTxResult result;
> +        uint64_t old_ret;
> +
> +        old_ret = address_space_cmpxchgq_notdirty(cs->as, pte_addr,
> +                                                  old_be, new_be,
> +                                                  MEMTXATTRS_UNSPECIFIED,
> +                                                  &result);
> +        if (result == MEMTX_OK) {
> +            if (old_ret != old_be && old_ret != new_be) {
> +                return 0;
> +            }
> +            return npte;
> +        }
>  
> -    if (pte ^ npte) { /* If pte has changed then write it back */
> -        stq_phys(cs->as, pte_addr, npte);
> +        /* Do we need to support this case where PTEs aren't in RAM ?
> +         *
> +         * For now fallback to non-atomic case
> +         */
>      }
> +#endif
> +
> +    stq_phys(cs->as, pte_addr, npte);
> +    return npte;
>  }
>  
>  static uint64_t ppc_radix64_walk_tree(PowerPCCPU *cpu, vaddr eaddr,
> @@ -234,6 +271,7 @@ int ppc_radix64_handle_mmu_fault(PowerPCCPU *cpu, vaddr eaddr, int rwx,
>  
>      /* Walk Radix Tree from Process Table Entry to Convert EA to RA */
>      page_size = PRTBE_R_GET_RTS(prtbe0);
> + restart:
>      pte = ppc_radix64_walk_tree(cpu, eaddr & R_EADDR_MASK,
>                                  prtbe0 & PRTBE_R_RPDB, prtbe0 & PRTBE_R_RPDS,
>                                  &raddr, &page_size, &fault_cause, &pte_addr);
> @@ -244,8 +282,16 @@ int ppc_radix64_handle_mmu_fault(PowerPCCPU *cpu, vaddr eaddr, int rwx,
>      }
>  
>      /* Update Reference and Change Bits */
> -    ppc_radix64_set_rc(cpu, rwx, pte, pte_addr, &prot);
> -
> +    if (ppc_radix64_hw_rc_updates(env)) {
> +        pte = ppc_radix64_set_rc(cpu, rwx, pte, pte_addr);
> +        if (!pte) {
> +            goto restart;
> +        }
> +    }
> +    /* If the page doesn't have C, treat it as read only */
> +    if (!(pte & R_PTE_C)) {
> +        prot &= ~PAGE_WRITE;
> +    }
>      tlb_set_page(cs, eaddr & TARGET_PAGE_MASK, raddr & TARGET_PAGE_MASK,
>                   prot, mmu_idx, 1UL << page_size);
>      return 0;


