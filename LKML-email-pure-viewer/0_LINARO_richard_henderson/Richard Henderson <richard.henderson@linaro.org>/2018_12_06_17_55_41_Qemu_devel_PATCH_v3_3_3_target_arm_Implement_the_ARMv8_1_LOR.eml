Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:51:27 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 097F4580375
	for <like.xu@linux.intel.com>; Thu,  6 Dec 2018 10:06:59 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 10:06:58 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AlleM1xa8mhD9MRBfC2E05/j/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZrsm/bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjmk8qxlSgLniD?=
 =?us-ascii?q?0fOjA57m/ZhM9+gqVZrxKvuhJ/24zZboOaOfZjcK7RYc0VRXFaU8pNSyBMGJ+w?=
 =?us-ascii?q?YpETA+YdO+tTsonzp0EJrRu7HQSiGOLvxSNIhnDsx601zvkqHwPY0wwmAt0Brm?=
 =?us-ascii?q?7UrM7yNKcUTOu4y7PIzTTfYPNWwzj98pXHfgohof6SW7J/bNTeyVM0FwPCiFWd?=
 =?us-ascii?q?sojlPzKT1usXqWib6PBsVeW1i24osgx8pCWkyMQ0ioTRmI4Z1lPJ+T9kzIooJt?=
 =?us-ascii?q?C0UlB3bNCkHZdKqi2XNZN6Tt4hTmxsoio21KEKtJGhcCQXyJkqwwTTZ+GFfoSW?=
 =?us-ascii?q?5B/oSfyfLi1ihH1/fbKynxay/lakyu37TsS01FdKrjFZktnXrHwN2BrT6tWdRv?=
 =?us-ascii?q?t65Eeh1i6D1wHV6u5aPUA5jbTXJ4Iiz7Iqi5YfrEfOEjXolEj4jKKabFgo9+qw?=
 =?us-ascii?q?5+TieLrmp5ucN4FuigH5N6QjgtW/Dvo9MggTRmSU5Pqz1KP98k39WblFlfo2kr?=
 =?us-ascii?q?TfsJ/GO8sbvam1AwtU0oYg9RmzFTin0MkAkHkDLVJFfg+HjofzN1HPJvD4Eemw?=
 =?us-ascii?q?g1C2nDh3wPDGO6bsApPKLnjFn7fhe6t951RbyAopwtBT/4hUBa0ZIPLvRk/xs8?=
 =?us-ascii?q?TVDhs4Mwy33enrEtp81p4FVGKLA6+ZNr7SsFCS6uIuJemMeJEauDLnJ/c54P7u?=
 =?us-ascii?q?iCxxpFkGYKP83YcLcGvqWbNiIl6FejzqhdEOF3pMuRAxC+njiVmHWDgUYG6uXq?=
 =?us-ascii?q?U6/XYiBYe7SIvOWI2p04GHxzqxS5hfZ2RaDQKVHHL1MomJRfoILTifO9JsiSAs?=
 =?us-ascii?q?U7+nRIk8kxa0u1jh1rBlI+HIrzAero/pz9Nv5ufexi01oCV5CtnY32yTQmVcmG?=
 =?us-ascii?q?QOSDkrmqdlrh9T0FCGhJJ5iPxRD9Abx/5PXgogLpnah7hgCtvyUxjNONeETlqr?=
 =?us-ascii?q?WM6hBxk1T9Q42dhIZFxyTYbxxivf1janVudG34eAA4Y5p/rR?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A5AACvZAlcmBHrdtBkHgEGBwaBUwcLA?=
 =?us-ascii?q?YEwgmKMcoswgwmWUoFzEgEBGBSHVyI2Bw0BAwEBAQEBAQIBEwEBAQEBCAsLBhs?=
 =?us-ascii?q?OIwyCNgUCAxgJglwDAwECJBkBAQQKKQECAwECBgEBPgoIAwEwAQUBHBkFgxyCA?=
 =?us-ascii?q?gEBA5o8PIodgWwzgnYBAQWCQ4RiCBKHXoMTgRyBVz+BEYJdhQ+GAokihhd8UI9?=
 =?us-ascii?q?cBwKCIASPFwsYgVyIBjaHHphlBgIJBw8hgSwEggJNMIMvghsMF4hehV5TgQeHb?=
 =?us-ascii?q?VaBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0A5AACvZAlcmBHrdtBkHgEGBwaBUwcLAYEwgmKMcoswgwm?=
 =?us-ascii?q?WUoFzEgEBGBSHVyI2Bw0BAwEBAQEBAQIBEwEBAQEBCAsLBhsOIwyCNgUCAxgJg?=
 =?us-ascii?q?lwDAwECJBkBAQQKKQECAwECBgEBPgoIAwEwAQUBHBkFgxyCAgEBA5o8PIodgWw?=
 =?us-ascii?q?zgnYBAQWCQ4RiCBKHXoMTgRyBVz+BEYJdhQ+GAokihhd8UI9cBwKCIASPFwsYg?=
 =?us-ascii?q?VyIBjaHHphlBgIJBw8hgSwEggJNMIMvghsMF4hehV5TgQeHbVaBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,323,1539673200"; 
   d="scan'208";a="54853257"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 06 Dec 2018 10:06:57 -0800
Received: from localhost ([::1]:42395 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gUy36-000260-UE
	for like.xu@linux.intel.com; Thu, 06 Dec 2018 13:06:56 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:46157)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <richard.henderson@linaro.org>) id 1gUy1L-0000hl-CR
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 13:05:14 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <richard.henderson@linaro.org>) id 1gUxsN-0004ED-Ah
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 12:55:52 -0500
Received: from mail-oi1-x243.google.com ([2607:f8b0:4864:20::243]:35642)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <richard.henderson@linaro.org>)
	id 1gUxsN-0004Dx-4k
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 12:55:51 -0500
Received: by mail-oi1-x243.google.com with SMTP id v6so1152975oif.2
	for <qemu-devel@nongnu.org>; Thu, 06 Dec 2018 09:55:51 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linaro.org; s=google;
	h=from:to:cc:subject:date:message-id:in-reply-to:references;
	bh=0B/G4FmI+h9HzG+GTEg9D78s05gOBmsBKnkq5yNo1VA=;
	b=aBrYWT2pGZa6nsajrZ0BL2VIREtecjJ6D0v8RdW+dO2wAR8uSftW9AeweASShC8EsG
	R0bxmx4Hq+6kl0Wrd8SBiRmNqEN3l2xgLu08Ne7B3IJvt7Fa/OtkGCHrJH2o2DMuzgYP
	rmHMdjMxwzlUqcXBnqFr0elZ7ywHK/L3PVnmc=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
	:references;
	bh=0B/G4FmI+h9HzG+GTEg9D78s05gOBmsBKnkq5yNo1VA=;
	b=R/lwHcsU79ycUaZfcWQgD48vVrIVdDaQtc70TKcy0iTU+oNqxS+EPQ70+FzvD1RhYg
	PAKXBST167t4QX9FrQGSHN+b7XZ4dqNPDUKSeFXfNM6IPrGxeOLC0oEJDlAVT1K7e05c
	rlutykKDsLbWIJzIlcJi1gJLBS23TZveJfrHFVL1cOVNYRXRpyhEQCNRMAUI34vHSPhd
	stCS3AFPYE83+LxJMVEMx60e4fHclnkoDAdEcLM+ozaatTCdfB7hiFah6t2JqVTeNCy2
	e038QgNg/Pmyr8Vya692x26nGg9RGKGR5eMboXHBYe0CcaTvdtMxPiHecIOvmQdF2m+S
	+6ww==
X-Gm-Message-State: AA+aEWZC2D0GbNU3lJCtVe84NdZprA5xsAaUmh+G6paLXHAxOgGyV4NX
	3r73qHGCi2tbvHxLhvKU/RwCKBKWRgN5Yw==
X-Google-Smtp-Source: AFSGD/UA92joKFJ7C1ZanCYoISVArxT0xK5De+ePkskGwAqR/YrXJX1tPG82tmi2OPbwI0tttsRugQ==
X-Received: by 2002:aca:ea57:: with SMTP id i84mr18368727oih.346.1544118949766;
	Thu, 06 Dec 2018 09:55:49 -0800 (PST)
Received: from cloudburst.twiddle.net (172.189-204-159.bestel.com.mx.
	[189.204.159.172])
	by smtp.gmail.com with ESMTPSA id 18sm873756otf.59.2018.12.06.09.55.48
	(version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
	Thu, 06 Dec 2018 09:55:49 -0800 (PST)
From: Richard Henderson <richard.henderson@linaro.org>
To: qemu-devel@nongnu.org
Date: Thu,  6 Dec 2018 11:55:41 -0600
Message-Id: <20181206175541.29508-4-richard.henderson@linaro.org>
X-Mailer: git-send-email 2.17.2
In-Reply-To: <20181206175541.29508-1-richard.henderson@linaro.org>
References: <20181206175541.29508-1-richard.henderson@linaro.org>
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 2607:f8b0:4864:20::243
Subject: [Qemu-devel] [PATCH v3 3/3] target/arm: Implement the ARMv8.1-LOR
 extension
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: peter.maydell@linaro.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Provide a trivial implementation with zero limited ordering regions,
which causes the LDLAR and STLLR instructions to devolve into the
LDAR and STLR instructions from the base ARMv8.0 instruction set.

Signed-off-by: Richard Henderson <richard.henderson@linaro.org>

---
v2: Mark LORID_EL1 read-only.
    Add TLOR access checks.
    Conditionally unmask TLOR in hcr/scr_write.
v3: Fix isar_feature_aa64_lor.
    Split out access_lor_ns.
    Defer all {E2H,TGE} vs TLOR testing to arm_hcr_el2_eff.
---
 target/arm/cpu.h           |  5 +++
 target/arm/cpu64.c         |  1 +
 target/arm/helper.c        | 75 ++++++++++++++++++++++++++++++++++++++
 target/arm/translate-a64.c | 12 ++++++
 4 files changed, 93 insertions(+)

diff --git a/target/arm/cpu.h b/target/arm/cpu.h
index 05ac883b6b..c943f35dd9 100644
--- a/target/arm/cpu.h
+++ b/target/arm/cpu.h
@@ -3340,6 +3340,11 @@ static inline bool isar_feature_aa64_sve(const ARMISARegisters *id)
     return FIELD_EX64(id->id_aa64pfr0, ID_AA64PFR0, SVE) != 0;
 }
 
+static inline bool isar_feature_aa64_lor(const ARMISARegisters *id)
+{
+    return FIELD_EX64(id->id_aa64mmfr1, ID_AA64MMFR1, LO) != 0;
+}
+
 /*
  * Forward to the above feature tests given an ARMCPU pointer.
  */
diff --git a/target/arm/cpu64.c b/target/arm/cpu64.c
index 1a4289c9dd..1d57be0c91 100644
--- a/target/arm/cpu64.c
+++ b/target/arm/cpu64.c
@@ -326,6 +326,7 @@ static void aarch64_max_initfn(Object *obj)
 
         t = cpu->isar.id_aa64mmfr1;
         t = FIELD_DP64(t, ID_AA64MMFR1, HPDS, 1); /* HPD */
+        t = FIELD_DP64(t, ID_AA64MMFR1, LO, 1);
         cpu->isar.id_aa64mmfr1 = t;
 
         /* Replicate the same data to the 32-bit id registers.  */
diff --git a/target/arm/helper.c b/target/arm/helper.c
index 4d25bafd12..1e20956376 100644
--- a/target/arm/helper.c
+++ b/target/arm/helper.c
@@ -1281,6 +1281,7 @@ static void scr_write(CPUARMState *env, const ARMCPRegInfo *ri, uint64_t value)
 {
     /* Begin with base v8.0 state.  */
     uint32_t valid_mask = 0x3fff;
+    ARMCPU *cpu = arm_env_get_cpu(env);
 
     if (arm_el_is_aa64(env, 3)) {
         value |= SCR_FW | SCR_AW;   /* these two bits are RES1.  */
@@ -1303,6 +1304,9 @@ static void scr_write(CPUARMState *env, const ARMCPRegInfo *ri, uint64_t value)
             valid_mask &= ~SCR_SMD;
         }
     }
+    if (cpu_isar_feature(aa64_lor, cpu)) {
+        valid_mask |= SCR_TLOR;
+    }
 
     /* Clear all-context RES0 bits.  */
     value &= valid_mask;
@@ -3963,6 +3967,9 @@ static void hcr_write(CPUARMState *env, const ARMCPRegInfo *ri, uint64_t value)
          */
         valid_mask &= ~HCR_TSC;
     }
+    if (cpu_isar_feature(aa64_lor, cpu)) {
+        valid_mask |= HCR_TLOR;
+    }
 
     /* Clear RES0 bits.  */
     value &= valid_mask;
@@ -5028,6 +5035,42 @@ static uint64_t id_aa64pfr0_read(CPUARMState *env, const ARMCPRegInfo *ri)
     return pfr0;
 }
 
+/* Shared logic between LORID and the rest of the LOR* registers.
+ * Secure state has already been delt with.
+ */
+static CPAccessResult access_lor_ns(CPUARMState *env)
+{
+    int el = arm_current_el(env);
+
+    if (el < 2 && (arm_hcr_el2_eff(env) & HCR_TLOR)) {
+        return CP_ACCESS_TRAP_EL2;
+    }
+    if (el < 3 && (env->cp15.scr_el3 & SCR_TLOR)) {
+        return CP_ACCESS_TRAP_EL3;
+    }
+    return CP_ACCESS_OK;
+}
+
+static CPAccessResult access_lorid(CPUARMState *env, const ARMCPRegInfo *ri,
+                                   bool isread)
+{
+    if (arm_is_secure_below_el3(env)) {
+        /* Access ok in secure mode.  */
+        return CP_ACCESS_OK;
+    }
+    return access_lor_ns(env);
+}
+
+static CPAccessResult access_lor_other(CPUARMState *env,
+                                       const ARMCPRegInfo *ri, bool isread)
+{
+    if (arm_is_secure_below_el3(env)) {
+        /* Access denied in secure mode.  */
+        return CP_ACCESS_TRAP;
+    }
+    return access_lor_ns(env);
+}
+
 void register_cp_regs_for_features(ARMCPU *cpu)
 {
     /* Register all the coprocessor registers based on feature bits */
@@ -5769,6 +5812,38 @@ void register_cp_regs_for_features(ARMCPU *cpu)
         define_one_arm_cp_reg(cpu, &sctlr);
     }
 
+    if (cpu_isar_feature(aa64_lor, cpu)) {
+        /*
+         * A trivial implementation of ARMv8.1-LOR leaves all of these
+         * registers fixed at 0, which indicates that there are zero
+         * supported Limited Ordering regions.
+         */
+        static const ARMCPRegInfo lor_reginfo[] = {
+            { .name = "LORSA_EL1", .state = ARM_CP_STATE_AA64,
+              .opc0 = 3, .opc1 = 0, .crn = 10, .crm = 4, .opc2 = 0,
+              .access = PL1_RW, .accessfn = access_lor_other,
+              .type = ARM_CP_CONST, .resetvalue = 0 },
+            { .name = "LOREA_EL1", .state = ARM_CP_STATE_AA64,
+              .opc0 = 3, .opc1 = 0, .crn = 10, .crm = 4, .opc2 = 1,
+              .access = PL1_RW, .accessfn = access_lor_other,
+              .type = ARM_CP_CONST, .resetvalue = 0 },
+            { .name = "LORN_EL1", .state = ARM_CP_STATE_AA64,
+              .opc0 = 3, .opc1 = 0, .crn = 10, .crm = 4, .opc2 = 2,
+              .access = PL1_RW, .accessfn = access_lor_other,
+              .type = ARM_CP_CONST, .resetvalue = 0 },
+            { .name = "LORC_EL1", .state = ARM_CP_STATE_AA64,
+              .opc0 = 3, .opc1 = 0, .crn = 10, .crm = 4, .opc2 = 3,
+              .access = PL1_RW, .accessfn = access_lor_other,
+              .type = ARM_CP_CONST, .resetvalue = 0 },
+            { .name = "LORID_EL1", .state = ARM_CP_STATE_AA64,
+              .opc0 = 3, .opc1 = 0, .crn = 10, .crm = 4, .opc2 = 7,
+              .access = PL1_R, .accessfn = access_lorid,
+              .type = ARM_CP_CONST, .resetvalue = 0 },
+            REGINFO_SENTINEL
+        };
+        define_arm_cp_regs(cpu, lor_reginfo);
+    }
+
     if (cpu_isar_feature(aa64_sve, cpu)) {
         define_one_arm_cp_reg(cpu, &zcr_el1_reginfo);
         if (arm_feature(env, ARM_FEATURE_EL2)) {
diff --git a/target/arm/translate-a64.c b/target/arm/translate-a64.c
index fd36425f1a..e1da1e4d6f 100644
--- a/target/arm/translate-a64.c
+++ b/target/arm/translate-a64.c
@@ -2290,6 +2290,12 @@ static void disas_ldst_excl(DisasContext *s, uint32_t insn)
         }
         return;
 
+    case 0x8: /* STLLR */
+        if (!dc_isar_feature(aa64_lor, s)) {
+            break;
+        }
+        /* StoreLORelease is the same as Store-Release for QEMU.  */
+        /* fall through */
     case 0x9: /* STLR */
         /* Generate ISS for non-exclusive accesses including LASR.  */
         if (rn == 31) {
@@ -2301,6 +2307,12 @@ static void disas_ldst_excl(DisasContext *s, uint32_t insn)
                   disas_ldst_compute_iss_sf(size, false, 0), is_lasr);
         return;
 
+    case 0xc: /* LDLAR */
+        if (!dc_isar_feature(aa64_lor, s)) {
+            break;
+        }
+        /* LoadLOAcquire is the same as Load-Acquire for QEMU.  */
+        /* fall through */
     case 0xd: /* LDAR */
         /* Generate ISS for non-exclusive accesses including LASR.  */
         if (rn == 31) {
-- 
2.17.2


