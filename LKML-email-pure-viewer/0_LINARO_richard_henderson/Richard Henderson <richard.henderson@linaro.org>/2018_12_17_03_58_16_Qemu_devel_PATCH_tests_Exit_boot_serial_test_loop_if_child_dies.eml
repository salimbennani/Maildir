Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  17 Dec 2018 14:06:36 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id DA4C05805FC
	for <like.xu@linux.intel.com>; Sun, 16 Dec 2018 19:58:45 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 16 Dec 2018 19:58:45 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AD0QlKBM+ap7XuD+Q2Psl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0I/X7rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZXshfSSJPDIC7?=
 =?us-ascii?q?YYUSF+oMP+RWoobgq1YAsRexGxKsCfjzxjNUnHL6wbc33/g9HQzAwQcuH8gOsH?=
 =?us-ascii?q?PRrNjtKKkSUPy6zKnSwjXZcvxdxDXz55bOch88v/6MR6lwcc3XyUIyEA7FlFSQ?=
 =?us-ascii?q?ppDlPzyPzOQCrnKX7+p+WuKplmEotRtxoiOoxscqkYTJgoMVylbe+iVjx4Y5P9?=
 =?us-ascii?q?q4SFR0YdO9FpZbqiKUN5NuT888X21luzw2xqAbtZO4ZiQG1poqyh7FZ/CacYWE?=
 =?us-ascii?q?+hbuWeSLLTtlmn5oeaiziwuv/UWg0OHwS8m53VRMoyFYiNfDrGoN2AbW6sWfSv?=
 =?us-ascii?q?ty4EOh2TGX2gDX6+FEOlw0lbHBJ54uxL4wi4AfsUPZHi/5gEn2jamWeVs4+uWw?=
 =?us-ascii?q?9ejrfrbrqoWBO4NpiQzyKLoil8K/DOgiLwQDXXCX+eGm273i+U35Tq9Kjvozkq?=
 =?us-ascii?q?TBqZDVO8EbprOgDwBIzIkj9QiwDzO/3NsDmnkHMVRFdw6ZgIjyPF3OJPH4DfSh?=
 =?us-ascii?q?jFi2nzZr2ujLPrngApXLM3jCn63tfbd7605A1gUzycpT6I5TCrEEO//zXEjxtN?=
 =?us-ascii?q?rXDh8/Lgy42eHnCM9y1o8GQ2KAHreZML/OsV+P/u8vJ+iMZIwLtzrnJPkl+uXj?=
 =?us-ascii?q?jXs4mV8bYKmo0oEbaHG+HvR6PUqZZWDgjcsGEWcP7UIDSvf3ggiCTSJLfCT1GK?=
 =?us-ascii?q?Y9/S0gToShC4jFW8aqmrPG2S66GphfYCdBEkyNFnHzMJyJXupJZC+ML8syrzof?=
 =?us-ascii?q?SLL0ToYg0Q2p5hb3zqciIufK9yldr5/6ydVu+8XVkhc98yEyCN6ShHqQRWN5lX?=
 =?us-ascii?q?9dWjktwapkqlZ8wFrQ7a8tmvFdCJlf6u1EVi88MpjTyfE8DMr9CSzbedLcclet?=
 =?us-ascii?q?Qty8DXkRQ9Q9zsUVZEA1T8+jhRDKxSbsA7ITm7GRH5sy2qbd2XHrIIB60XmQh/?=
 =?us-ascii?q?pptEUvXsYabT7uvaV47QWGQteRy0g=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AjAAA1HhdchxHrdtBjHgEGBwaBUQkLA?=
 =?us-ascii?q?YEwgmKMdIsWgwmWXIFzEgEBGBSHRyI0CQ0BAwEBAQEBAQIBEwEBAQoLCQgbDiM?=
 =?us-ascii?q?MgjYFAgMaAQaCXwQCJBkBAQQKKQECAwECBgI+CggDATABBQE1BYMdggEBBJsVP?=
 =?us-ascii?q?IoggWwzgnYBAQWCQ4RUCBKHa4MlgRyBVz+BEYJdggCJFYlEhwmQTgcCgiQEjyc?=
 =?us-ascii?q?LGIFdiBY3hyiZPQYCCQcPIYElgg5NMIMvghsMF4hehWBRgQeLeIF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0AjAAA1HhdchxHrdtBjHgEGBwaBUQkLAYEwgmKMdIsWgwm?=
 =?us-ascii?q?WXIFzEgEBGBSHRyI0CQ0BAwEBAQEBAQIBEwEBAQoLCQgbDiMMgjYFAgMaAQaCX?=
 =?us-ascii?q?wQCJBkBAQQKKQECAwECBgI+CggDATABBQE1BYMdggEBBJsVPIoggWwzgnYBAQW?=
 =?us-ascii?q?CQ4RUCBKHa4MlgRyBVz+BEYJdggCJFYlEhwmQTgcCgiQEjycLGIFdiBY3hyiZP?=
 =?us-ascii?q?QYCCQcPIYElgg5NMIMvghsMF4hehWBRgQeLeIF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,364,1539673200"; 
   d="scan'208";a="56608703"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 16 Dec 2018 19:58:44 -0800
Received: from localhost ([::1]:44748 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gYk3H-0006Kx-TG
	for like.xu@linux.intel.com; Sun, 16 Dec 2018 22:58:43 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:54226)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <richard.henderson@linaro.org>) id 1gYk2z-0006Kq-5R
	for qemu-devel@nongnu.org; Sun, 16 Dec 2018 22:58:26 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <richard.henderson@linaro.org>) id 1gYk2v-0004jP-Vk
	for qemu-devel@nongnu.org; Sun, 16 Dec 2018 22:58:25 -0500
Received: from mail-pg1-x541.google.com ([2607:f8b0:4864:20::541]:36882)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <richard.henderson@linaro.org>)
	id 1gYk2v-0004fT-Ds
	for qemu-devel@nongnu.org; Sun, 16 Dec 2018 22:58:21 -0500
Received: by mail-pg1-x541.google.com with SMTP id c25so3934189pgb.4
	for <qemu-devel@nongnu.org>; Sun, 16 Dec 2018 19:58:20 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linaro.org; s=google;
	h=from:to:cc:subject:date:message-id;
	bh=w7fWnVzY/WUPJH5roDqudJcuJDnr5Q6BtqUrE7en6Jk=;
	b=B9oqlUCVDIvCwI5fuSRPQNgtohZ5WEV61bjmDa+dwxrtmFaYpf8JJpvAtcfDkJIr1C
	Fig1NFTDx9k0L8nGSMcIFJ9zI5WHBUYq7Khur2ULRB5C1/867ljBReqbjr/NENf6anXC
	AyXdzz8GbejpzkT+qXXIxqqSATAQ0NATJXLCA=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:subject:date:message-id;
	bh=w7fWnVzY/WUPJH5roDqudJcuJDnr5Q6BtqUrE7en6Jk=;
	b=hJRSP5z2B7tE5z3b4nKfBU2ZfN9uBfDf2NwVMjnZJLufNKr2b/pnwfUKqStid+iX5+
	xsvbkAy88VTMG+cx3prQSWtthisNNg0orU3ygTtpa/D1Sso/Yq+4Rjx7MWIZc/obX5Jd
	Zbdxdcg9AVqR7DKytzVO4Obh5HzqyHUgOaruBXkzCFT67RXkeAI2HUwmml9VuWKV6eZ5
	5ngIBYyhjvgxOOn5NNPAfU7mGxIZCmjh0cq/kbh62Bma+anInjnAYzXMAhIXQvZSpz1c
	ctRR3jFJPeq+R+IKBOE0pNL8PFpQ/Hxb0JuS15/9s3pzZIDXhuFvrktJ5fTx0cJpLnJA
	Kn5A==
X-Gm-Message-State: AA+aEWZ2p7j64rbKEb7pGn+IkzBTzhn5tnbhwPyWX1ol8b3avMRGB4DV
	c9LQyTfEGt3ZDyoMudL8KP9urP1+Zf8=
X-Google-Smtp-Source: AFSGD/UYSXqZGFeyZbDE0epx14NuWfljZx86PxMRNLxZVylHS+VAdenX43puys4g2CrSDRRU+fW01g==
X-Received: by 2002:a62:870e:: with SMTP id i14mr11758902pfe.41.1545019099469; 
	Sun, 16 Dec 2018 19:58:19 -0800 (PST)
Received: from cloudburst.twiddle.net (97-126-115-157.tukw.qwest.net.
	[97.126.115.157]) by smtp.gmail.com with ESMTPSA id
	f67sm25727551pff.29.2018.12.16.19.58.17
	(version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
	Sun, 16 Dec 2018 19:58:18 -0800 (PST)
From: Richard Henderson <richard.henderson@linaro.org>
To: qemu-devel@nongnu.org
Date: Sun, 16 Dec 2018 19:58:16 -0800
Message-Id: <20181217035816.21777-1-richard.henderson@linaro.org>
X-Mailer: git-send-email 2.17.2
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 2607:f8b0:4864:20::541
Subject: [Qemu-devel] [PATCH] tests: Exit boot-serial-test loop if child dies
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Laurent Vivier <lvivier@redhat.com>, Paolo Bonzini <pbonzini@redhat.com>,
	Thomas Huth <thuth@redhat.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

There's no point in waiting 5 full minutes when there will be
no more output.  Compute timeout based on elapsed wall clock
time instead of N * delays, as the delay is a minimum sleep time.

Cc: Thomas Huth <thuth@redhat.com>
Cc: Laurent Vivier <lvivier@redhat.com>
Cc: Paolo Bonzini <pbonzini@redhat.com>
Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
---
 tests/libqtest.h         |  8 +++++
 tests/boot-serial-test.c | 16 +++++++--
 tests/libqtest.c         | 70 +++++++++++++++++++++++++---------------
 3 files changed, 65 insertions(+), 29 deletions(-)

diff --git a/tests/libqtest.h b/tests/libqtest.h
index 96a6c01352..9758c51be6 100644
--- a/tests/libqtest.h
+++ b/tests/libqtest.h
@@ -1011,4 +1011,12 @@ bool qmp_rsp_is_err(QDict *rsp);
  */
 void qmp_assert_error_class(QDict *rsp, const char *class);
 
+/**
+ * qtest_probe_child:
+ * @s: QTestState instance to operate on.
+ *
+ * Returns: true if the child is still alive.
+ */
+bool qtest_probe_child(QTestState *s);
+
 #endif
diff --git a/tests/boot-serial-test.c b/tests/boot-serial-test.c
index 8ec6aed35d..54b9347325 100644
--- a/tests/boot-serial-test.c
+++ b/tests/boot-serial-test.c
@@ -130,11 +130,12 @@ static testdef_t tests[] = {
 
 static bool check_guest_output(const testdef_t *test, int fd)
 {
-    int i, nbr = 0, pos = 0, ccnt;
+    int nbr = 0, pos = 0, ccnt;
+    time_t now, start = time(NULL);
     char ch;
 
-    /* Poll serial output... Wait at most 360 seconds */
-    for (i = 0; i < 36000; ++i) {
+    /* Poll serial output... */
+    while (1) {
         ccnt = 0;
         while (ccnt++ < 512 && (nbr = read(fd, &ch, 1)) == 1) {
             if (ch == test->expect[pos]) {
@@ -148,6 +149,15 @@ static bool check_guest_output(const testdef_t *test, int fd)
             }
         }
         g_assert(nbr >= 0);
+        /* Wait only if the child is still alive.  */
+        if (!qtest_probe_child(global_qtest)) {
+            break;
+        }
+        /* Wait at most 360 seconds.  */
+        now = time(NULL);
+        if (now - start >= 360) {
+            break;
+        }
         g_usleep(10000);
     }
 
diff --git a/tests/libqtest.c b/tests/libqtest.c
index 43be078518..1d75d3c936 100644
--- a/tests/libqtest.c
+++ b/tests/libqtest.c
@@ -39,10 +39,11 @@ struct QTestState
 {
     int fd;
     int qmp_fd;
+    pid_t qemu_pid;  /* our child QEMU process */
+    int wstatus;
+    bool big_endian;
     bool irq_level[MAX_IRQ];
     GString *rx;
-    pid_t qemu_pid;  /* our child QEMU process */
-    bool big_endian;
 };
 
 static GHookList abrt_hooks;
@@ -96,36 +97,52 @@ static int socket_accept(int sock)
     return ret;
 }
 
+bool qtest_probe_child(QTestState *s)
+{
+    pid_t pid = s->qemu_pid;
+
+    if (pid != -1) {
+        pid = waitpid(pid, &s->wstatus, WNOHANG);
+        if (pid == 0) {
+            return true;
+        }
+        s->qemu_pid = -1;
+    }
+    return false;
+}
+
 static void kill_qemu(QTestState *s)
 {
-    if (s->qemu_pid != -1) {
-        int wstatus = 0;
-        pid_t pid;
-
-        kill(s->qemu_pid, SIGTERM);
-        TFR(pid = waitpid(s->qemu_pid, &wstatus, 0));
+    pid_t pid = s->qemu_pid;
+    int wstatus;
 
+    /* Skip wait if qtest_probe_child already reaped.  */
+    if (pid != -1) {
+        kill(pid, SIGTERM);
+        TFR(pid = waitpid(s->qemu_pid, &s->wstatus, 0));
         assert(pid == s->qemu_pid);
-        /*
-         * We expect qemu to exit with status 0; anything else is
-         * fishy and should be logged with as much detail as possible.
-         */
-        if (wstatus) {
-            if (WIFEXITED(wstatus)) {
-                fprintf(stderr, "%s:%d: kill_qemu() tried to terminate QEMU "
-                        "process but encountered exit status %d\n",
-                        __FILE__, __LINE__, WEXITSTATUS(wstatus));
-            } else if (WIFSIGNALED(wstatus)) {
-                int sig = WTERMSIG(wstatus);
-                const char *signame = strsignal(sig) ?: "unknown ???";
-                const char *dump = WCOREDUMP(wstatus) ? " (core dumped)" : "";
+    }
 
-                fprintf(stderr, "%s:%d: kill_qemu() detected QEMU death "
-                        "from signal %d (%s)%s\n",
-                        __FILE__, __LINE__, sig, signame, dump);
-            }
-            abort();
+    /*
+     * We expect qemu to exit with status 0; anything else is
+     * fishy and should be logged with as much detail as possible.
+     */
+    wstatus = s->wstatus;
+    if (wstatus) {
+        if (WIFEXITED(wstatus)) {
+            fprintf(stderr, "%s:%d: kill_qemu() tried to terminate QEMU "
+                    "process but encountered exit status %d\n",
+                    __FILE__, __LINE__, WEXITSTATUS(wstatus));
+        } else if (WIFSIGNALED(wstatus)) {
+            int sig = WTERMSIG(wstatus);
+            const char *signame = strsignal(sig) ?: "unknown ???";
+            const char *dump = WCOREDUMP(wstatus) ? " (core dumped)" : "";
+
+            fprintf(stderr, "%s:%d: kill_qemu() detected QEMU death "
+                    "from signal %d (%s)%s\n",
+                    __FILE__, __LINE__, sig, signame, dump);
         }
+        abort();
     }
 }
 
@@ -228,6 +245,7 @@ QTestState *qtest_init_without_qmp_handshake(const char *extra_args)
 
     g_test_message("starting QEMU: %s", command);
 
+    s->wstatus = 0;
     s->qemu_pid = fork();
     if (s->qemu_pid == 0) {
         setenv("QEMU_AUDIO_DRV", "none", true);
-- 
2.17.2


