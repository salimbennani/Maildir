Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 21:34:30 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 21057580522
	for <like.xu@linux.intel.com>; Wed, 19 Dec 2018 04:39:59 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga002-1.jf.intel.com with ESMTP; 19 Dec 2018 04:39:59 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3Aaz6CRhClK/3SWcypMAGAUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSPXyrsbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRshfWSxfDI2/?=
 =?us-ascii?q?YYsAAPYOMvtaoIbzulUOtRmzCwujCe/yxDJEmmH53bYh3uQ9DQ3LxhAsE84UvX?=
 =?us-ascii?q?jKqtj+KaccUfqyzKnN1TjOc/VW2Sv96IjPdBAgoeyHU6h/f8TN1UQhCw3LhUiX?=
 =?us-ascii?q?pIP/OTOVyuQNs2+d7+tgT+6vk3AoqxtrrTi128ghkZXGhoMJylDe9CV4z5w5Ks?=
 =?us-ascii?q?G/SE5+eNOpFoZbuSKCN4ZuXM8uX2JltDwnxrEbupO3ZjYGxZonyhLFdvCKcZCE?=
 =?us-ascii?q?7g/iWeqPOzt0mmxpdK+lixqv8UWty/fwW8m03VtMsyFLiMPDtmoX2BzW8sWHSu?=
 =?us-ascii?q?Vy/kOm2TuX0wDT6/pEIVwvlabBJJ4hxKMwmoAUsUTZES/6gET2jKmIeUU44uWk?=
 =?us-ascii?q?9fjrb7b8qpOBKoN5iRvyProgl8G/G+g0LwoDU3Ce+eum1b3j+UP5QK9Njv0ziq?=
 =?us-ascii?q?TZqY7VJcEGpqKgHgBazJgj5Ai7Dzu/y9sYmmQHLFRZdx2ZlIjlPFXOIPH7Dfih?=
 =?us-ascii?q?mVitnypryujCPr3gBJXNM3fCnK3gfbZ7905T1g4zwcpD6JJTD7EMO/TzWkj3tN?=
 =?us-ascii?q?zXCB85Lha4w+H9CNVyzo8eQ36AAreFMKPOtl+F/uYvI+iPZIALojr8JOUl6uXq?=
 =?us-ascii?q?jX84n18dYKao0YEWaHC+AvRpPUGZbWDwjdcGFGdZ9jc4V/Hg3V2eTSZINTH1W6?=
 =?us-ascii?q?Mn+ip9DoWgAoHeAIe3j/uE1Sa/G5RQIWdeFlGLF2yvboiBRrIAZTyfJpxclCcZ?=
 =?us-ascii?q?X+2kQo4lyRb8rQL/1v9rI/TZ/mgCuIv+2cNpz+vUkx406HpzFcvKyHyHTWx/gj?=
 =?us-ascii?q?YVQSQr1rt0u013xwS/1v1AiuFcXfBO/elAVBtyYYbV0ug8B83oQAvHYv+CSUq8?=
 =?us-ascii?q?Q8XgCjY0GIEf2dgLNm97B9WliAGL5weQKoU53+iCAoA09aTNmWD8Pc9nx17N1b?=
 =?us-ascii?q?U7jklgScxKYz71zpVj/hTeUtaa236SkLynIOFFhHbA?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AiAACvOxpchxHrdtBkGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBZYExgTmBFo0Iix2CDZlQFRgDEYcrIjgSAQMBAQEBAQECARM?=
 =?us-ascii?q?BAQEKCwkIGw4jDII2BQIDGgEGglwBAgMBAiQTDAopAwMBAgYBAQoYCRUICAMBC?=
 =?us-ascii?q?wULPhiDHQGCAQEEqEozii+CLooRgVc/gRGDEog6giYCj1iRXAcCHIINhGeKRgw?=
 =?us-ascii?q?YgV5NiAOHK5oCgV2Bd3CDPQiGRYoNQYE4i2mBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0AiAACvOxpchxHrdtBkGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BZYExgTmBFo0Iix2CDZlQFRgDEYcrIjgSAQMBAQEBAQECARMBAQEKCwkIGw4jD?=
 =?us-ascii?q?II2BQIDGgEGglwBAgMBAiQTDAopAwMBAgYBAQoYCRUICAMBCwULPhiDHQGCAQE?=
 =?us-ascii?q?EqEozii+CLooRgVc/gRGDEog6giYCj1iRXAcCHIINhGeKRgwYgV5NiAOHK5oCg?=
 =?us-ascii?q?V2Bd3CDPQiGRYoNQYE4i2mBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,372,1539673200"; 
   d="scan'208";a="44654461"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 19 Dec 2018 04:39:58 -0800
Received: from localhost ([::1]:59802 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gZb8n-0007yF-OK
	for like.xu@linux.intel.com; Wed, 19 Dec 2018 07:39:57 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:57577)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <prvs=884673768=anthony.perard@citrix.com>)
	id 1gZb8S-0007ub-VH
	for qemu-devel@nongnu.org; Wed, 19 Dec 2018 07:39:37 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <prvs=884673768=anthony.perard@citrix.com>)
	id 1gZb8Q-0004Ur-6l
	for qemu-devel@nongnu.org; Wed, 19 Dec 2018 07:39:36 -0500
Received: from smtp03.citrix.com ([162.221.156.55]:54924)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71)
	(envelope-from <prvs=884673768=anthony.perard@citrix.com>)
	id 1gZb8O-0004R0-25; Wed, 19 Dec 2018 07:39:34 -0500
X-IronPort-AV: E=Sophos;i="5.56,372,1539648000"; d="scan'208";a="73768290"
Date: Wed, 19 Dec 2018 12:39:26 +0000
From: Anthony PERARD <anthony.perard@citrix.com>
To: Paul Durrant <paul.durrant@citrix.com>
Message-ID: <20181219123926.GA1288@perard.uk.xensource.com>
References: <20181217133011.31433-1-paul.durrant@citrix.com>
	<20181217133011.31433-17-paul.durrant@citrix.com>
MIME-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Content-Disposition: inline
In-Reply-To: <20181217133011.31433-17-paul.durrant@citrix.com>
User-Agent: Mutt/1.11.1 (2018-12-01)
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 162.221.156.55
Subject: Re: [Qemu-devel] [PATCH v6 16/18] xen: automatically create
 XenBlockDevice-s
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Kevin Wolf <kwolf@redhat.com>, Stefano Stabellini <sstabellini@kernel.org>,
	qemu-block@nongnu.org, qemu-devel@nongnu.org,
	Max Reitz <mreitz@redhat.com>, xen-devel@lists.xenproject.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Mon, Dec 17, 2018 at 01:30:09PM +0000, Paul Durrant wrote:
> +static char *xen_block_blockdev_add(const char *id, QDict *qdict,
> +                                    Error **errp)
> +{
> +    const char *driver = qdict_get_try_str(qdict, "driver");
> +    BlockdevOptions *options = NULL;
> +    Error *local_err = NULL;
> +    char *str = NULL;
> +    char *node_name;
> +    Visitor *v;
> +
> +    if (!driver) {
> +        error_setg(errp, "no 'driver' parameter");
> +        return NULL;
> +    }
> +
> +    node_name = g_strdup_printf("%s-%s", id, driver);
> +    qdict_put_str(qdict, "node-name", node_name);
> +
> +    qdict_iter(qdict, add_item, &str);
> +
> +    trace_xen_block_blockdev_add(str);
> +    g_free(str);
> +
> +    v = qobject_input_visitor_new_flat_confused(qdict, errp);

Kevin seems to say that this could be done without the _flat_confused
version. The flat_confused version seems to be useful just because
the key "cache.direct" is used earlier, and because everything in qdict
is a string.

I think instead, qobject_input_visitor_new could be used. You would just
need to replace
    qdict_put_str(qdict, "cache.direct", "on");
by
    QDict *cache = qdict_new();
    qdict_put_str(cache, "direct", "on");
    qdict_put_obj(qdict, "cache", QOBJECT(cache));

And also the property "read-only" which seems to be a bool as well. I've
check all property in the qdict, and I think that the only two that
needs to be changes. And then, we can use:
    v = qobject_input_visitor_new(qdict); which never fails.

You'll just need "qapi/qobject-input-visitor.h" instead of "block/qdict.h"

> +    if (!v) {
> +        goto fail;
> +    }
> +
> +    visit_type_BlockdevOptions(v, NULL, &options, &local_err);
> +    visit_free(v);
> +
> +    if (local_err) {
> +        error_propagate(errp, local_err);
> +        goto fail;
> +    }
> +
> +    qmp_blockdev_add(options, &local_err);
> +
> +    if (local_err) {
> +        error_propagate(errp, local_err);
> +        goto fail;
> +    }
> +
> +    qapi_free_BlockdevOptions(options);
> +
> +    return node_name;
> +
> +fail:
> +    if (options) {
> +        qapi_free_BlockdevOptions(options);
> +    }
> +    g_free(node_name);
> +
> +    return NULL;
> +}
[...]
> +static XenBlockDrive *xen_block_drive_create(const char *id,
> +                                             const char *device_type,
> +                                             QDict *opts, Error **errp)
> +{
> +    const char *params = qdict_get_try_str(opts, "params");
> +    const char *mode = qdict_get_try_str(opts, "mode");
> +    const char *direct_io_safe = qdict_get_try_str(opts, "direct-io-safe");
> +    const char *discard_enable = qdict_get_try_str(opts, "discard-enable");
> +    char *driver = NULL;
> +    char *filename = NULL;
> +    XenBlockDrive *drive = NULL;
> +    Error *local_err = NULL;
> +    QDict *qdict;
> +
> +    if (params) {
> +        char **v = g_strsplit(params, ":", 2);
> +
> +        if (v[1] == NULL) {
> +            filename = g_strdup(v[0]);
> +            driver = g_strdup("file");
> +        } else {
> +            if (strcmp(v[0], "aio") == 0) {
> +                driver = g_strdup("file");
> +            } else if (strcmp(v[0], "vhd") == 0) {
> +                driver = g_strdup("vpc");
> +            } else {
> +                driver = g_strdup(v[0]);
> +            }
> +            filename = g_strdup(v[1]);
> +        }
> +
> +        g_strfreev(v);
> +    }
> +
> +    if (!filename) {
> +        error_setg(errp, "no filename");
> +        goto done;
> +    }
> +    assert(driver);
> +
> +    drive = g_new0(XenBlockDrive, 1);
> +    drive->id = g_strdup(id);
> +
> +    qdict = qdict_new();
> +
> +    qdict_put_str(qdict, "driver", "file");
> +    qdict_put_str(qdict, "filename", filename);
> +
> +    if (mode && *mode != 'w') {
> +        qdict_put_str(qdict, "read-only", "on");
> +    }
> +
> +    if (direct_io_safe) {
> +        unsigned long value;
> +
> +        if (!qemu_strtoul(direct_io_safe, NULL, 2, &value) && !!value) {
> +            qdict_put_str(qdict, "cache.direct", "on");
> +            qdict_put_str(qdict, "aio", "native");
> +        }
> +    }
> +
> +    if (discard_enable) {
> +        unsigned long value;
> +
> +        if (!qemu_strtoul(discard_enable, NULL, 2, &value) && !!value) {
> +            qdict_put_str(qdict, "discard", "unmap");
> +        }
> +    }
> +
> +    /*
> +     * It is necessary to turn file locking off as an emulated device
> +     * may have already opened the same image file.
> +     */
> +    qdict_put_str(qdict, "locking", "off");
> +
> +    xen_block_drive_layer_add(drive, qdict, &local_err);
> +    qobject_unref(qdict);
> +
> +    if (local_err) {
> +        error_propagate(errp, local_err);
> +        goto done;
> +    }
> +
> +    /* If the image is a raw file then we are done */

I don't think that is true, as I have this warning in QEMU:
qemu-system-i386: warning: Opening a block device as a file using the 'file' driver is deprecated

We would need a "raw" driver.

> +    if (!strcmp(driver, "file")) {
> +        goto done;
> +    }
> +
> +    qdict = qdict_new();
> +
> +    qdict_put_str(qdict, "driver", driver);
> +
> +    xen_block_drive_layer_add(drive, qdict, &local_err);
> +    qobject_unref(qdict);
> +
> +done:
> +    g_free(driver);
> +    g_free(filename);
> +
> +    if (local_err) {
> +        xen_block_drive_destroy(drive, NULL);
> +        return NULL;
> +    }
> +
> +    return drive;
> +}

-- 
Anthony PERARD

