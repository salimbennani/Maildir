Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:19:58 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 5C2EF580213
	for <like.xu@linux.intel.com>; Fri, 30 Nov 2018 07:38:02 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga005-1.jf.intel.com with ESMTP; 30 Nov 2018 07:38:02 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AaANd3x/IH12QA/9uRHKM819IXTAuvvDOBiVQ1KB+?=
 =?us-ascii?q?0+4QIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyaM+ZwcKPDcN8DXGZPXNteVzZYDo2h?=
 =?us-ascii?q?cosPFPIBMvhEoInhvlcOqRy+BAexD+/ryjJEg3n70qom3eohDwzKxRUsEdATv3?=
 =?us-ascii?q?TOtdn7KboSUfutzKbW0TrDc+5d1TPj5ITUdxwsp+yHU7BtfsrL0UQhFx3LgFuT?=
 =?us-ascii?q?p4LiPTyV2OYCs2aG4ep4V++hiWEqpxx/rzSz2MgskZLEip4Jxl3e6Sl02po5Kc?=
 =?us-ascii?q?G+RUVmYdCkCpxQtySCOoZqRsMtWH9nuDwmyr0BpJW1fTIFyI47yB7ecfOMbo+F?=
 =?us-ascii?q?7Qn9W+aLPTd4g2loeLOwhxmo9Uigy/fzWtOo31ZNqypIi9/BvW0O2RzL8sWLVO?=
 =?us-ascii?q?dx80S71TqSygze6ftILV46mKfbMZIt37w9moIOvUnHESL6glj6gLOKekk++uWk?=
 =?us-ascii?q?9v7rbqvgq5SBLYF7kBv+Pb4rmsGnAeQ3LAwOX2+D9OS41b3j5lH5QK5Qgv05lK?=
 =?us-ascii?q?nZrYrWJcMBpq62GwNV04Aj5AijDzq+ztgUgXoKIEhYdB6ajIXlIU/CLf74APul?=
 =?us-ascii?q?nlihki9nx/XcMb3gBpXNIGLDkLDkfbtl8k5T1g8zzc1G651JFL4BPuz8WkvouN?=
 =?us-ascii?q?PDCR85Lgq0zPr5B9Vm0Y8eXWOPAqyHP6/Ivl6I+/oiI+2NZI8TpTb8JOIp5//o?=
 =?us-ascii?q?jX8lh1AdebOl0ocQaHC9BflmJUKZYXzjgtcHDGcGpA0+TPbliFGaSz5ce26yX7?=
 =?us-ascii?q?4g5jE8EI+mCYbDRoOzj7Cb0ya7A4ZbZmRHClCKDHfpeJ+IW/YKaCKOPMBhliYI?=
 =?us-ascii?q?WqSmS48khlmTshTnwe9nMvbM4X9f8pbiz8RuoevUkx406HpzFcva1miMS2R9mC?=
 =?us-ascii?q?QPXyM326Zk5lVwz0rG3aVmjvgLKNpI+vkcVw47MYLbnfV3Ds23Vg/fc9PMUlu/?=
 =?us-ascii?q?X9i9HRk3SdQ+xcJIZFxyTM6/hBLO1Db/HrkOiraQD4Y1+K+P43+kPst41jPK2b?=
 =?us-ascii?q?csi3EgRc1AM3DggbRwpCbJAIucukGTmry2cuwz1TTG9W7LmWCDpl1feA9/WKHE?=
 =?us-ascii?q?VDYUYU6A/oex3V/LU7L7UedvCQBG08PXb/QXZw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ApAACwWAFchxHrdtBjHgEGBwaBUQkLA?=
 =?us-ascii?q?YEwgmKMcIspUgaBEIEhiCOOKRSBXxQYFId2IjQJDQEDAQEBAQEBAgETAQEBCgs?=
 =?us-ascii?q?JCBsOIwyCNgUCAxoHglwDAwECJBkBAQQKJAUBAgMBAgYBATcHCggDATgbGQWDH?=
 =?us-ascii?q?IF1DQEDAaU+gWwzgnYBAQWCQ4RmCIdsRYNpF3iBB4ERM4IqhHEtV4R6Io8skQs?=
 =?us-ascii?q?JkTcYiWmHNphdgUaCDTMaCBsVgyeCGwwXEoM4ilVwgQQDinwqLIF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0ApAACwWAFchxHrdtBjHgEGBwaBUQkLAYEwgmKMcIspUga?=
 =?us-ascii?q?BEIEhiCOOKRSBXxQYFId2IjQJDQEDAQEBAQEBAgETAQEBCgsJCBsOIwyCNgUCA?=
 =?us-ascii?q?xoHglwDAwECJBkBAQQKJAUBAgMBAgYBATcHCggDATgbGQWDHIF1DQEDAaU+gWw?=
 =?us-ascii?q?zgnYBAQWCQ4RmCIdsRYNpF3iBB4ERM4IqhHEtV4R6Io8skQsJkTcYiWmHNphdg?=
 =?us-ascii?q?UaCDTMaCBsVgyeCGwwXEoM4ilVwgQQDinwqLIF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,299,1539673200"; 
   d="scan'208";a="55560026"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 30 Nov 2018 07:38:01 -0800
Received: from localhost ([::1]:33379 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gSkrg-0001Wo-HP
	for like.xu@linux.intel.com; Fri, 30 Nov 2018 10:38:00 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:51511)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <berto@igalia.com>) id 1gSkZa-0007S9-Ci
	for qemu-devel@nongnu.org; Fri, 30 Nov 2018 10:19:21 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <berto@igalia.com>) id 1gSkZY-0006Wm-6G
	for qemu-devel@nongnu.org; Fri, 30 Nov 2018 10:19:18 -0500
Received: from fanzine.igalia.com ([91.117.99.155]:53249)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <berto@igalia.com>)
	id 1gSkZU-00062W-4y; Fri, 30 Nov 2018 10:19:14 -0500
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed; d=igalia.com;
	s=20170329; 
	h=References:In-Reply-To:References:In-Reply-To:Message-Id:Date:Subject:Cc:To:From;
	bh=vfOn7LrIPrUtIqwPybHPPVH5CxL4TEgXyWwWtzaWwR4=; 
	b=Q3gIfvPYfjFmBZsL2j/jDjeGV50+nEL2la+hTFK78TF1PA1T7OivTXm8fpfK22dQyYRM0On65NKD3Ed6OkimxKFg7wb4edMhJ29nNmiG2ctmPPVOrrymdomdZ+aPhwUCaARbMEnjfV1pzmY2nYvEwnFiCTRCx03b49Wbn/bDJcguqGQN/hpuEG4jlthgqkMGf+AAey3PPd+WXN2U/wfems+EbMOAau8rwLULul5oSP7osMnEW4PaMxZFecfQMLVjP1Hf/4fEb265ROlpMJm/QQP5s7YCCYsOXVcBkUWPtWraLT//rFiBFTWSWNH/TJ4ZjY4qlqAyxS4EvCRWih6F9A==;
Received: from [194.100.51.2] (helo=perseus.local)
	by fanzine.igalia.com with esmtpsa 
	(Cipher TLS1.2:ECDHE_RSA_AES_256_GCM_SHA384:256) (Exim)
	id 1gSkYp-0007XG-4M; Fri, 30 Nov 2018 16:18:31 +0100
Received: from berto by perseus.local with local (Exim 4.89)
	(envelope-from <berto@igalia.com>)
	id 1gSkYZ-0003eW-K9; Fri, 30 Nov 2018 17:18:15 +0200
From: Alberto Garcia <berto@igalia.com>
To: qemu-devel@nongnu.org
Date: Fri, 30 Nov 2018 17:17:46 +0200
Message-Id: <290118caaf7b7247cf2d29e47041af0cf09c4835.1543590618.git.berto@igalia.com>
X-Mailer: git-send-email 2.11.0
In-Reply-To: <cover.1543590618.git.berto@igalia.com>
References: <cover.1543590618.git.berto@igalia.com>
In-Reply-To: <cover.1543590618.git.berto@igalia.com>
References: <cover.1543590618.git.berto@igalia.com>
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x (no
	timestamps) [generic] [fuzzy]
X-Received-From: 91.117.99.155
Subject: [Qemu-devel] [RFC PATCH v2 08/12] block: Allow changing the backing
 file on reopen
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Kevin Wolf <kwolf@redhat.com>, Alberto Garcia <berto@igalia.com>,
	qemu-block@nongnu.org, Max Reitz <mreitz@redhat.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

This patch allows the user to change the backing file of an image that
is being reopened. Here's what it does:

 - In bdrv_reopen_prepare(): check that the value of 'backing' points
   to an existing node or is null. If it points to an existing node it
   also needs to make sure that replacing the backing file will not
   create a cycle in the node graph (i.e. you cannot reach the parent
   from the new backing file).

 - In bdrv_reopen_commit(): perform the actual node replacement by
   calling bdrv_set_backing_hd(). It may happen that there are
   temporary implicit nodes between the BDS that we are reopening and
   the backing file that we want to replace (e.g. a commit fiter node),
   so we must skip them.

Although x-blockdev-reopen is meant to be used like blockdev-add,
there's an important thing that must be taken into account: the only
way to set a new backing file is by using a reference to an existing
node (previously added with e.g. blockdev-add).  If 'backing' contains
a dictionary with a new set of options ({"driver": "qcow2", "file": {
... }}) then it is interpreted that the _existing_ backing file must
be reopened with those options.

Signed-off-by: Alberto Garcia <berto@igalia.com>
---
 block.c | 108 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 106 insertions(+), 2 deletions(-)

diff --git a/block.c b/block.c
index 5ecdbbac9e..e8babee971 100644
--- a/block.c
+++ b/block.c
@@ -2909,6 +2909,27 @@ BlockDriverState *bdrv_open(const char *filename, const char *reference,
 }
 
 /*
+ * Returns true if @child can be reached recursively from @bs
+ */
+static bool bdrv_recurse_has_child(BlockDriverState *bs,
+                                   BlockDriverState *child)
+{
+    BdrvChild *c;
+
+    if (bs == child) {
+        return true;
+    }
+
+    QLIST_FOREACH(c, &bs->children, next) {
+        if (bdrv_recurse_has_child(c->bs, child)) {
+            return true;
+        }
+    }
+
+    return false;
+}
+
+/*
  * Adds a BlockDriverState to a simple queue for an atomic, transactional
  * reopen of multiple devices.
  *
@@ -3210,6 +3231,51 @@ static void bdrv_reopen_perm(BlockReopenQueue *q, BlockDriverState *bs,
     *shared = cumulative_shared_perms;
 }
 
+/* Return 0 if the 'backing' option of @bs can be replaced with
+ * @value, otherwise return < 0 and set @errp. */
+static int bdrv_reopen_parse_backing(BlockDriverState *bs, QObject *value,
+                                     Error **errp)
+{
+    BlockDriverState *overlay_bs, *new_backing_bs;
+    const char *str;
+
+    switch (qobject_type(value)) {
+    case QTYPE_QNULL:
+        new_backing_bs = NULL;
+        break;
+    case QTYPE_QSTRING:
+        str = qobject_get_try_str(value);
+        new_backing_bs = bdrv_lookup_bs(NULL, str, errp);
+        if (new_backing_bs == NULL) {
+            return -EINVAL;
+        } else if (bdrv_recurse_has_child(new_backing_bs, bs)) {
+            error_setg(errp, "Making '%s' a backing file of '%s' "
+                       "would create a cycle", str, bs->node_name);
+            return -EINVAL;
+        }
+        break;
+    default:
+        /* 'backing' does not allow any other data type */
+        g_assert_not_reached();
+    }
+
+    /* Skip all links that point to an implicit node, if any
+     * (e.g. a commit filter node). We don't want to change those. */
+    overlay_bs = bs;
+    while (backing_bs(overlay_bs) && backing_bs(overlay_bs)->implicit) {
+        overlay_bs = backing_bs(overlay_bs);
+    }
+
+    if (new_backing_bs != backing_bs(overlay_bs)) {
+        if (bdrv_is_backing_chain_frozen(overlay_bs, backing_bs(overlay_bs),
+                                         errp)) {
+            return -EPERM;
+        }
+    }
+
+    return 0;
+}
+
 /*
  * Prepares a BlockDriverState for reopen. All changes are staged in the
  * 'opaque' field of the BDRVReopenState, which is used and allocated by
@@ -3351,6 +3417,19 @@ int bdrv_reopen_prepare(BDRVReopenState *reopen_state, BlockReopenQueue *queue,
             QObject *new = entry->value;
             QObject *old = qdict_get(reopen_state->bs->options, entry->key);
 
+            /*
+             * Allow changing the 'backing' option. The new value can be
+             * either a reference to an existing node (using its node name)
+             * or NULL to simply detach the current backing file.
+             */
+            if (!strcmp(entry->key, "backing")) {
+                ret = bdrv_reopen_parse_backing(reopen_state->bs, new, errp);
+                if (ret < 0) {
+                    goto error;
+                }
+                continue; /* 'backing' option processed, go to the next one */
+            }
+
             /* Allow child references (child_name=node_name) as long as they
              * point to the current child (i.e. everything stays the same). */
             if (qobject_type(new) == QTYPE_QSTRING) {
@@ -3429,9 +3508,10 @@ error:
 void bdrv_reopen_commit(BDRVReopenState *reopen_state)
 {
     BlockDriver *drv;
-    BlockDriverState *bs;
+    BlockDriverState *bs, *new_backing_bs;
     BdrvChild *child;
-    bool old_can_write, new_can_write;
+    bool old_can_write, new_can_write, change_backing_bs;
+    QObject *qobj;
 
     assert(reopen_state != NULL);
     bs = reopen_state->bs;
@@ -3456,6 +3536,15 @@ void bdrv_reopen_commit(BDRVReopenState *reopen_state)
     bs->read_only = !(reopen_state->flags & BDRV_O_RDWR);
     bs->detect_zeroes      = reopen_state->detect_zeroes;
 
+    qobj = qdict_get(bs->options, "backing");
+    change_backing_bs = (qobj != NULL);
+    if (change_backing_bs) {
+        const char *str = qobject_get_try_str(qobj);
+        new_backing_bs = str ? bdrv_find_node(str) : NULL;
+        qdict_del(bs->explicit_options, "backing");
+        qdict_del(bs->options, "backing");
+    }
+
     /* Remove child references from bs->options and bs->explicit_options.
      * Child options were already removed in bdrv_reopen_queue_child() */
     QLIST_FOREACH(child, &bs->children, next) {
@@ -3463,6 +3552,21 @@ void bdrv_reopen_commit(BDRVReopenState *reopen_state)
         qdict_del(bs->options, child->name);
     }
 
+    /* Change the backing file if a new one was specified. We do this
+     * after updating bs->options, so bdrv_refresh_filename() (called
+     * from bdrv_set_backing_hd()) has the new values. */
+    if (change_backing_bs) {
+        BlockDriverState *overlay = bs;
+        /* Skip all links that point to an implicit node, if any
+         * (e.g. a commit filter node). We don't want to change those. */
+        while (backing_bs(overlay) && backing_bs(overlay)->implicit) {
+            overlay = backing_bs(overlay);
+        }
+        if (new_backing_bs != backing_bs(overlay)) {
+            bdrv_set_backing_hd(overlay, new_backing_bs, &error_abort);
+        }
+    }
+
     bdrv_refresh_limits(bs, NULL);
 
     bdrv_set_perm(reopen_state->bs, reopen_state->perm,
-- 
2.11.0


