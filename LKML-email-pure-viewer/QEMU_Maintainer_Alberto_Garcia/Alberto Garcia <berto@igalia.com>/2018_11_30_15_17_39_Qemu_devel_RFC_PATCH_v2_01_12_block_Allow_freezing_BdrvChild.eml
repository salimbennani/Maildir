Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:19:49 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 0B46C58054E
	for <like.xu@linux.intel.com>; Fri, 30 Nov 2018 07:30:50 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 30 Nov 2018 07:30:49 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AU/gxvBUrDBOx8K6oVUedp2TFuNXV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZRSDu6dThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXSm1dUMhRSSFNG5qw?=
 =?us-ascii?q?YYkSAOobJOpWspT9p0AWrRSgGQasGPrjyjtPhn74wKY21+QsHQTA0QMnA9wAsG?=
 =?us-ascii?q?rZoMzsOKkQTO+11rDEwyjeb/NNwTfy9pTHcgw8qv2IQ758bc/dxE8yHA3Hk1qQ?=
 =?us-ascii?q?s5ToMTOL2OoDsGaV6OhvVeythG4ptg9xujqiyMUjh4XUiI8Z1k7L9T5izYopOd?=
 =?us-ascii?q?G1UlJ3bMS4HJdMsSyRKot4QtklQ2FtoCs31rkGtoWlcygQ1JQnwAPUZf2dfIiS?=
 =?us-ascii?q?/h3jVfyeKip/iX1+Zr2/nQqy8U+7x+39Wcm7ylJKritfndXWqn8N0BnT59GBR/?=
 =?us-ascii?q?Bg/UmhwS6C2x7P5uxHO0w4iLfXJp07zrIumJcesV7PEjL0lUnukaObckop9vK1?=
 =?us-ascii?q?5+j7frnqvJ+RO5Juhg3gNKklh9axDv4iMgcUWmiW4eS826Pn/U3+WLhKivw2kr?=
 =?us-ascii?q?LFsJDBP8gbqai5AxJP3oYk8Ra/AC+q0NUenXYZMFJIYAyLg5TqNl3UPfz0EPSy?=
 =?us-ascii?q?j06ynDplx/3KJKDtD5fVInjGirjhfLJ960BGyAo0yNBS/4tUBa8EIPLuQ0P+qc?=
 =?us-ascii?q?LXDgEnPAyw2uroE9J91p4YWW2THKCZK6TesVuJ5uIsPeaAfoAUuCvlJvgh5v7u?=
 =?us-ascii?q?i2I5mFAHcamo25sXdG63HvB8L0qFZnrsh8wMEWENvgo4Q+zqjkCCXSRUZ3aoUK?=
 =?us-ascii?q?Iw/is7B56+DYffWoCth6SM3CO6Hp1VeG9KEF+NEWrzeoWAWvcMbj+SI8B7njwF?=
 =?us-ascii?q?U7ihV5Eu1RW0uADmzLpnK7mcxysDqJi21MRp//aB0lY29CdoFIKb1GeCSXwymX?=
 =?us-ascii?q?kHADo/3aR6qEo6zU+f0K9+mLtBGNlOov9ETAo+ZqPa1PFwXtX7WwbdeYWQRVO7?=
 =?us-ascii?q?B9mrHzw1C8g82sIDeFpVHdKkgRbemS2wDOgOiraJCZcop7/axGX7PM1nynzLh5?=
 =?us-ascii?q?Um2kArR9YKOWC4i6pX8Q/VCIjU1UKDmPWEb6MZiQfJ/mqZ0W3Gk0hCWw95GfHP?=
 =?us-ascii?q?UGoDYWPXot3950qERLirX+d0ejBdwNKPf/MZIubiik9LEbK8Zdk=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BeAAAsVwFchxHrdtBjHgEGBwaBUwcLA?=
 =?us-ascii?q?YEwgmKMcIspUgaBEIEhiCOOKYFzFBgUh3YiNgcNAQMBAQEBAQECARMBAQEKCwk?=
 =?us-ascii?q?IGw4jDII2BQIDGgeCXAMDAQIkGQEBBAopAQIDAQIGAQE+CggDATgbGQWDHIF1D?=
 =?us-ascii?q?QEDAaU9gWwzgnYBAQWCQ4RlCIdshC4XeIEHgREzgiqLEYkGh3KPPwmRNxiJaYc?=
 =?us-ascii?q?2mF2BTAGCBjMaCBsVgyeCGwwXg0qKVXCBBAOLUoF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0BeAAAsVwFchxHrdtBjHgEGBwaBUwcLAYEwgmKMcIspUga?=
 =?us-ascii?q?BEIEhiCOOKYFzFBgUh3YiNgcNAQMBAQEBAQECARMBAQEKCwkIGw4jDII2BQIDG?=
 =?us-ascii?q?geCXAMDAQIkGQEBBAopAQIDAQIGAQE+CggDATgbGQWDHIF1DQEDAaU9gWwzgnY?=
 =?us-ascii?q?BAQWCQ4RlCIdshC4XeIEHgREzgiqLEYkGh3KPPwmRNxiJaYc2mF2BTAGCBjMaC?=
 =?us-ascii?q?BsVgyeCGwwXg0qKVXCBBAOLUoF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,299,1539673200"; 
   d="scan'208";a="54407947"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 30 Nov 2018 07:30:49 -0800
Received: from localhost ([::1]:33320 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gSkki-00035G-GJ
	for like.xu@linux.intel.com; Fri, 30 Nov 2018 10:30:48 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:51508)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <berto@igalia.com>) id 1gSkZa-0007S4-CQ
	for qemu-devel@nongnu.org; Fri, 30 Nov 2018 10:19:21 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <berto@igalia.com>) id 1gSkZY-0006Wi-6L
	for qemu-devel@nongnu.org; Fri, 30 Nov 2018 10:19:18 -0500
Received: from fanzine.igalia.com ([91.117.99.155]:53253)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <berto@igalia.com>)
	id 1gSkZU-00062b-54; Fri, 30 Nov 2018 10:19:14 -0500
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed; d=igalia.com;
	s=20170329; 
	h=References:In-Reply-To:References:In-Reply-To:Message-Id:Date:Subject:Cc:To:From;
	bh=TKCMVeQAc6YWJjYhVmIKWfmS8u/QzRdzMGShOgGuU9s=; 
	b=FrwSfm8wATwx7vqQPzK4xyWsB2iCSsHQ+I7IXC6PQN5YpXhFhue4Rzp0CpRc5yj0A+4fvr56kdaqlBukW+0ZgRUtUkbK6R29EnztTQI5t3/mf5KtZN8iznjjA8zUpq1DdXF5uYnv89DflVzg2mRVHK+Tjy60PouOr0rgaqBB68s0PmNUjSTV+PKxNTeifB3OvFNiYX8itMecL2IaJfPwRZgpcqLBqkSbxyDgcQqYmN1vNX4CHEd+lz9atFiiqG1Cbe38xZ4mPQ4PFWzXpKpAKXcjXpqe3dBLnzfYGmFctxQh3PD6mm9uSSx+WKIJnVkjzRPqgpugrqYz3c5+4aOcjg==;
Received: from [194.100.51.2] (helo=perseus.local)
	by fanzine.igalia.com with esmtpsa 
	(Cipher TLS1.2:ECDHE_RSA_AES_256_GCM_SHA384:256) (Exim)
	id 1gSkYp-0007X8-5y; Fri, 30 Nov 2018 16:18:31 +0100
Received: from berto by perseus.local with local (Exim 4.89)
	(envelope-from <berto@igalia.com>)
	id 1gSkYZ-0003eA-Cn; Fri, 30 Nov 2018 17:18:15 +0200
From: Alberto Garcia <berto@igalia.com>
To: qemu-devel@nongnu.org
Date: Fri, 30 Nov 2018 17:17:39 +0200
Message-Id: <5ed36dbab081a599ba9dcbeb7d43aa101461450d.1543590618.git.berto@igalia.com>
X-Mailer: git-send-email 2.11.0
In-Reply-To: <cover.1543590618.git.berto@igalia.com>
References: <cover.1543590618.git.berto@igalia.com>
In-Reply-To: <cover.1543590618.git.berto@igalia.com>
References: <cover.1543590618.git.berto@igalia.com>
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x (no
	timestamps) [generic] [fuzzy]
X-Received-From: 91.117.99.155
Subject: [Qemu-devel] [RFC PATCH v2 01/12] block: Allow freezing BdrvChild
 links
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Kevin Wolf <kwolf@redhat.com>, Alberto Garcia <berto@igalia.com>,
	qemu-block@nongnu.org, Max Reitz <mreitz@redhat.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Our permission system is useful to define what operations are allowed
on a certain block node and includes things like BLK_PERM_WRITE or
BLK_PERM_RESIZE among others.

One of the permissions is BLK_PERM_GRAPH_MOD which allows "changing
the node that this BdrvChild points to". The exact meaning of this has
never been very clear, but it can be understood as "change any of the
links connected to the node". This can be used to prevent changing a
backing link, but it's too coarse.

This patch adds a new 'frozen' attribute to BdrvChild, which forbids
detaching the link from the node it points to, and new API to freeze
and unfreeze a backing chain.

Signed-off-by: Alberto Garcia <berto@igalia.com>
---
 block.c                   | 62 +++++++++++++++++++++++++++++++++++++++++++++++
 include/block/block.h     |  5 ++++
 include/block/block_int.h |  5 ++++
 3 files changed, 72 insertions(+)

diff --git a/block.c b/block.c
index 4f5ff2cc12..4f55fb339a 100644
--- a/block.c
+++ b/block.c
@@ -2062,6 +2062,8 @@ static void bdrv_replace_child_noperm(BdrvChild *child,
     BlockDriverState *old_bs = child->bs;
     int i;
 
+    assert(!child->frozen);
+
     if (old_bs && new_bs) {
         assert(bdrv_get_aio_context(old_bs) == bdrv_get_aio_context(new_bs));
     }
@@ -2278,6 +2280,10 @@ void bdrv_set_backing_hd(BlockDriverState *bs, BlockDriverState *backing_hd,
     bool update_inherits_from = bdrv_chain_contains(bs, backing_hd) &&
         bdrv_inherits_from_recursive(backing_hd, bs);
 
+    if (bdrv_is_backing_chain_frozen(bs, backing_bs(bs), errp)) {
+        return;
+    }
+
     if (backing_hd) {
         bdrv_ref(backing_hd);
     }
@@ -3812,6 +3818,58 @@ BlockDriverState *bdrv_find_base(BlockDriverState *bs)
     return bdrv_find_overlay(bs, NULL);
 }
 
+/* Return true if at least one of the backing links between @bs and
+ * @base is frozen. @errp is set if that's the case. */
+bool bdrv_is_backing_chain_frozen(BlockDriverState *bs, BlockDriverState *base,
+                                  Error **errp)
+{
+    BlockDriverState *i;
+
+    for (i = bs; i != base && i->backing; i = backing_bs(i)) {
+        if (i->backing->frozen) {
+            error_setg(errp, "Cannot remove link from '%s' to '%s'",
+                       i->node_name, backing_bs(i)->node_name);
+            return true;
+        }
+    }
+
+    return false;
+}
+
+/*
+ * Freeze all backing links between @bs and @base.
+ * If any of the links is already frozen the operation is aborted and
+ * none of the links are modified.
+ * Returns 0 on success. On failure returns < 0 and sets @errp.
+ */
+int bdrv_freeze_backing_chain(BlockDriverState *bs, BlockDriverState *base,
+                              Error **errp)
+{
+    BlockDriverState *i;
+
+    if (bdrv_is_backing_chain_frozen(bs, base, errp)) {
+        return -EPERM;
+    }
+
+    for (i = bs; i != base && i->backing; i = backing_bs(i)) {
+        i->backing->frozen = true;
+    }
+
+    return 0;
+}
+
+/* Unfreeze all backing links between @bs and @base. The caller must
+ * ensure that all links are frozen before using this function. */
+void bdrv_unfreeze_backing_chain(BlockDriverState *bs, BlockDriverState *base)
+{
+    BlockDriverState *i;
+
+    for (i = bs; i != base && i->backing; i = backing_bs(i)) {
+        assert(i->backing->frozen);
+        i->backing->frozen = false;
+    }
+}
+
 /*
  * Drops images above 'base' up to and including 'top', and sets the image
  * above 'top' to have base as its backing file.
@@ -3861,6 +3919,10 @@ int bdrv_drop_intermediate(BlockDriverState *top, BlockDriverState *base,
         goto exit;
     }
 
+    if (bdrv_is_backing_chain_frozen(top, base, NULL)) {
+        goto exit;
+    }
+
     /* If 'base' recursively inherits from 'top' then we should set
      * base->inherits_from to top->inherits_from after 'top' and all
      * other intermediate nodes have been dropped.
diff --git a/include/block/block.h b/include/block/block.h
index f70a843b72..6f10a8fcfc 100644
--- a/include/block/block.h
+++ b/include/block/block.h
@@ -353,6 +353,11 @@ int bdrv_drop_intermediate(BlockDriverState *top, BlockDriverState *base,
 BlockDriverState *bdrv_find_overlay(BlockDriverState *active,
                                     BlockDriverState *bs);
 BlockDriverState *bdrv_find_base(BlockDriverState *bs);
+bool bdrv_is_backing_chain_frozen(BlockDriverState *bs, BlockDriverState *base,
+                                  Error **errp);
+int bdrv_freeze_backing_chain(BlockDriverState *bs, BlockDriverState *base,
+                              Error **errp);
+void bdrv_unfreeze_backing_chain(BlockDriverState *bs, BlockDriverState *base);
 
 
 typedef struct BdrvCheckResult {
diff --git a/include/block/block_int.h b/include/block/block_int.h
index f605622216..05d925227a 100644
--- a/include/block/block_int.h
+++ b/include/block/block_int.h
@@ -661,6 +661,11 @@ struct BdrvChild {
      */
     uint64_t shared_perm;
 
+    /**
+     * This link is frozen: the child cannot be detached from the parent.
+     */
+    bool frozen;
+
     QLIST_ENTRY(BdrvChild) next;
     QLIST_ENTRY(BdrvChild) next_parent;
 };
-- 
2.11.0


