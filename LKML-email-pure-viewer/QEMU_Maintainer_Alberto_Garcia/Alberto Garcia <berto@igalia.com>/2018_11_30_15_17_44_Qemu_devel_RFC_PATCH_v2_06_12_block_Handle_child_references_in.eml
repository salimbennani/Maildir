Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:19:45 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 13EFC580213
	for <like.xu@linux.intel.com>; Fri, 30 Nov 2018 07:28:16 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga004-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 30 Nov 2018 07:28:15 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AwSSMzhdu41Wjig+knuj+1auFlGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc26YBKN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNwdWWRPXthcWzVYDo2+?=
 =?us-ascii?q?coQPFfMNM/tFr4nmv1sBswexBRW1COPrzT9JiGL90ak63ugkFwzJ2xAuEdIQvX?=
 =?us-ascii?q?jNtdn7NrodUfqswKfV0DXDdOtW1inh54jUbxstpe+AUa51fcfX1EIhFR7Kjk+I?=
 =?us-ascii?q?pILlIT2b2OcDvW+Z4OpuV+2vhXMpqxlzrzatycogl4fEip4LxVDf7ih13Jo5KM?=
 =?us-ascii?q?ekRENhfdKoDJ1dvDyaOYtsRcMiRnlltTo+yrIdp5G7ZjQKyJM6zBDecfOHaZSH?=
 =?us-ascii?q?4hP5W+2MJjp3n2xqeKijhxa16kWgy+L8WdOw0FZLtCVJiMXDtncI1xHK7MWMV/?=
 =?us-ascii?q?hz/l+51DqRywze6ftILV0pmafYMZIt3LA9m5oJvUjeHCL6gFj6gauZe0k+5+Sk?=
 =?us-ascii?q?9/jrbq/mq5OBLYN4lAfzObk0lMOlG+Q3KA0OUnCb+eui0L3j+lX0QLFLjv0tjq?=
 =?us-ascii?q?nZq4rWJcsdpq6kGQNV1Zwj6xmnAzen1tQXg2UHIUpbdB6bjIXlIUzCLO37APul?=
 =?us-ascii?q?nVihnjdmy+rbMrDjGpnNK2LMkLblfbZz8U5czw8zwMhG551KD7EBPev/VVLvu9?=
 =?us-ascii?q?zGEBA5NxW4zP3gCNVg0IMRRXyAArSePKPWsF+I5fwgL/ODZY8IoDv9L/kl5/jz?=
 =?us-ascii?q?jX42g1MdfK+p3YcJZ3C8BPhpP0KZYX/3j9cHFmcKuAU+TOr3iFGYVj5TfXmyU7?=
 =?us-ascii?q?om5j4nEIKmEZvDRoe1jbyF3Se7HYNZanpJC1CRCnroc4SEW/ERaCOdOMNhkzoE?=
 =?us-ascii?q?VaS/RI8lzx2hqAj6y780ZtfS4TAS4JL/yMButaqUkRAp6ScyCcOb3GeQCWZukS?=
 =?us-ascii?q?QNTj4y2al55ktl1laE17M/mvFdCJlf6u1EVlQHM4XBxbl/AtH2RgWTZ9qMVROq?=
 =?us-ascii?q?T8urBXQrQ8sszsQSS0B6Hdqkk1bExSX9GKIflbGAGMkp9LnB1WP6Pcd3xiX60/?=
 =?us-ascii?q?w4glw7B8dCK2Cirqh48QfVGsjOiUrKubytcPE12CTA7nuEhUWHpkpZWUYkW6jf?=
 =?us-ascii?q?QXc3Z0TfqdXwoEjFSun9WvwcLgJdxJvaeeNxYdrzgAADG6ru?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ApAADKVQFchxHrdtBjHgEGBwaBUQkLA?=
 =?us-ascii?q?YEwgmKMcIspUgaBEIlEiTCEeRSBXxQYFId2IjQJDQEDAQEBAQEBAgETAQEBCgs?=
 =?us-ascii?q?JCBsOIwyCNgUCAxoHglwDAwECJBkBAQQKKQECAwECBgEBPgoIAwE4GxkFgxyBd?=
 =?us-ascii?q?Q0BAwGlPoFsM4J2AQEFgkOEZQiHbIQuF3iBB4ERM4dIAYVyiSsBhgCGHIpvCYo?=
 =?us-ascii?q?uhwkYiWmBSYVtLJgxgUaCDTMaCBsVgyeCGzWDOIpVcIEEA4tSgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ApAADKVQFchxHrdtBjHgEGBwaBUQkLAYEwgmKMcIspUga?=
 =?us-ascii?q?BEIlEiTCEeRSBXxQYFId2IjQJDQEDAQEBAQEBAgETAQEBCgsJCBsOIwyCNgUCA?=
 =?us-ascii?q?xoHglwDAwECJBkBAQQKKQECAwECBgEBPgoIAwE4GxkFgxyBdQ0BAwGlPoFsM4J?=
 =?us-ascii?q?2AQEFgkOEZQiHbIQuF3iBB4ERM4dIAYVyiSsBhgCGHIpvCYouhwkYiWmBSYVtL?=
 =?us-ascii?q?JgxgUaCDTMaCBsVgyeCGzWDOIpVcIEEA4tSgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,299,1539673200"; 
   d="scan'208";a="64759108"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mga01b.intel.com with ESMTP/TLS/AES256-SHA; 30 Nov 2018 07:28:15 -0800
Received: from localhost ([::1]:33303 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gSkiE-000700-8b
	for like.xu@linux.intel.com; Fri, 30 Nov 2018 10:28:14 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:51507)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <berto@igalia.com>) id 1gSkZa-0007S3-CL
	for qemu-devel@nongnu.org; Fri, 30 Nov 2018 10:19:21 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <berto@igalia.com>) id 1gSkZW-0006Va-8Y
	for qemu-devel@nongnu.org; Fri, 30 Nov 2018 10:19:18 -0500
Received: from fanzine.igalia.com ([91.117.99.155]:53250)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <berto@igalia.com>)
	id 1gSkZU-00062Z-1I; Fri, 30 Nov 2018 10:19:12 -0500
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed; d=igalia.com;
	s=20170329; 
	h=References:In-Reply-To:References:In-Reply-To:Message-Id:Date:Subject:Cc:To:From;
	bh=DVQYrdiVdKT3JauIXY0Wq3Ez5mZk89LUsYDy0o6GKL8=; 
	b=iAqgUxlfpMO321NJbW2kQ5LnmHTHMSIE1Y0/Y6f9C6yAncQ4xb5/dK1bhcwGLMaMgigP7M9ex5pOkGU5pJkAGRg3kKdOONuNJfYs5HLqOjgwTvJetmblfaTwnjiTqfKveqWo71DfD5KCOXVXFIbp+SF0cjVyw2jnv1AGzdqH2uAmRhOf7u1q2EC++YguqmexF3fdyCbekuginFTsfu+vH75zCmeLJ9oA6iAUd8D8FWjz5O/3jxbz4lpsulNePKxyXVY0noh0880MvgnLd8eVYFTcstmmAcclsEHKFBtEPLzGBRbKwTXwmGm8IQgZAvaUcEdgT/NCBX14jG+43G33PA==;
Received: from [194.100.51.2] (helo=perseus.local)
	by fanzine.igalia.com with esmtpsa 
	(Cipher TLS1.2:ECDHE_RSA_AES_256_GCM_SHA384:256) (Exim)
	id 1gSkYp-0007XD-4F; Fri, 30 Nov 2018 16:18:31 +0100
Received: from berto by perseus.local with local (Exim 4.89)
	(envelope-from <berto@igalia.com>)
	id 1gSkYZ-0003eO-I6; Fri, 30 Nov 2018 17:18:15 +0200
From: Alberto Garcia <berto@igalia.com>
To: qemu-devel@nongnu.org
Date: Fri, 30 Nov 2018 17:17:44 +0200
Message-Id: <8f88f59eee7e9b7882fc4f6d0e6ff57bd8754375.1543590618.git.berto@igalia.com>
X-Mailer: git-send-email 2.11.0
In-Reply-To: <cover.1543590618.git.berto@igalia.com>
References: <cover.1543590618.git.berto@igalia.com>
In-Reply-To: <cover.1543590618.git.berto@igalia.com>
References: <cover.1543590618.git.berto@igalia.com>
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x (no
	timestamps) [generic] [fuzzy]
X-Received-From: 91.117.99.155
Subject: [Qemu-devel] [RFC PATCH v2 06/12] block: Handle child references in
 bdrv_reopen_queue()
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Kevin Wolf <kwolf@redhat.com>, Alberto Garcia <berto@igalia.com>,
	qemu-block@nongnu.org, Max Reitz <mreitz@redhat.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Children in QMP are specified with BlockdevRef / BlockdevRefOrNull,
which can contain a set of child options, a child reference, or
NULL. In optional attributes like "backing" it can also be missing.

Only the first case (set of child options) is being handled properly
by bdrv_reopen_queue(). This patch deals with all the others.

Here's how these cases should be handled when bdrv_reopen_queue() is
deciding what to do with each child of a BlockDriverState:

   1) Set of child options: the options are removed from the parent's
      options QDict and are passed to the child with a recursive
      bdrv_reopen_queue() call. This case was already working fine.

   2) Child reference: there's two possibilites here.

      2a) Reference to the current child: the child is put in the
          reopen queue, keeping its current set of options (since this
          was a child reference there was no way to specify a
          different set of options).

      2b) Reference to a different BDS: the current child is not put
          in the reopen queue at all. Passing a reference to a
          different BDS can be used to replace a child, although at
          the moment no driver implements this, so it results in an
          error. In any case, the current child is not going to be
          reopened (and might in fact disappear if it's replaced)

   3) NULL: This is similar to (2b). Although no driver allows this
      yet it can be used to detach the current child so it should not
      be put in the reopen queue.

   4) Missing option: at the moment "backing" is the only case where
      this can happen. With "blockdev-add", leaving "backing" out
      means that the default backing file is opened. We don't want to
      open a new image during reopen, so we require that "backing" is
      always present. We'll relax this requirement a bit in the next
      patch.

Signed-off-by: Alberto Garcia <berto@igalia.com>
---
 block.c               | 45 ++++++++++++++++++++++++++++++++++++++-------
 include/block/block.h |  1 +
 2 files changed, 39 insertions(+), 7 deletions(-)

diff --git a/block.c b/block.c
index da4e062178..4a2f81b129 100644
--- a/block.c
+++ b/block.c
@@ -3032,9 +3032,19 @@ static BlockReopenQueue *bdrv_reopen_queue_child(BlockReopenQueue *bs_queue,
     bs_entry->state.perm = UINT64_MAX;
     bs_entry->state.shared_perm = 0;
 
+    /* If keep_old_opts is false then it means that unspecified
+     * options must be reset to its original value. We don't allow
+     * resetting 'backing' but we need to know if the option is
+     * missing in order to decide if we have to return an error. */
+    if (!keep_old_opts) {
+        bs_entry->state.backing_missing =
+            !qdict_haskey(options, "backing") &&
+            !qdict_haskey(options, "backing.driver");
+    }
+
     QLIST_FOREACH(child, &bs->children, next) {
-        QDict *new_child_options;
-        char *child_key_dot;
+        QDict *new_child_options = NULL;
+        bool child_keep_old = keep_old_opts;
 
         /* reopen can only change the options of block devices that were
          * implicitly created and inherited options. For other (referenced)
@@ -3043,13 +3053,27 @@ static BlockReopenQueue *bdrv_reopen_queue_child(BlockReopenQueue *bs_queue,
             continue;
         }
 
-        child_key_dot = g_strdup_printf("%s.", child->name);
-        qdict_extract_subqdict(explicit_options, NULL, child_key_dot);
-        qdict_extract_subqdict(options, &new_child_options, child_key_dot);
-        g_free(child_key_dot);
+        /* Check if the options contain a child reference */
+        if (qdict_haskey(options, child->name)) {
+            const char *childref = qdict_get_try_str(options, child->name);
+            /* The current child must not be reopened if the child
+             * reference does not point to it. */
+            if (g_strcmp0(childref, child->bs->node_name)) {
+                continue;
+            }
+            /* If the child reference points to the current child then
+             * reopen it with its existing set of options. */
+            child_keep_old = true;
+        } else {
+            /* Extract child options ("child-name.*") */
+            char *child_key_dot = g_strdup_printf("%s.", child->name);
+            qdict_extract_subqdict(explicit_options, NULL, child_key_dot);
+            qdict_extract_subqdict(options, &new_child_options, child_key_dot);
+            g_free(child_key_dot);
+        }
 
         bdrv_reopen_queue_child(bs_queue, child->bs, new_child_options,
-                                child->role, options, flags, keep_old_opts);
+                                child->role, options, flags, child_keep_old);
     }
 
     return bs_queue;
@@ -3306,6 +3330,13 @@ int bdrv_reopen_prepare(BDRVReopenState *reopen_state, BlockReopenQueue *queue,
 
     drv_prepared = true;
 
+    if (reopen_state->backing_missing) {
+        error_setg(errp, "backing is missing for '%s'",
+                   reopen_state->bs->node_name);
+        ret = -EINVAL;
+        goto error;
+    }
+
     /* Options that are not handled are only okay if they are unchanged
      * compared to the old state. It is expected that some options are only
      * used for the initial open, but not reopen (e.g. filename) */
diff --git a/include/block/block.h b/include/block/block.h
index a061ef3944..e21616a038 100644
--- a/include/block/block.h
+++ b/include/block/block.h
@@ -187,6 +187,7 @@ typedef struct BDRVReopenState {
     BlockDriverState *bs;
     int flags;
     BlockdevDetectZeroesOptions detect_zeroes;
+    bool backing_missing;
     uint64_t perm, shared_perm;
     QDict *options;
     QDict *explicit_options;
-- 
2.11.0


