Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 29 Nov 2018 08:38:23 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 1DB7C5803ED;
	Wed, 28 Nov 2018 08:10:34 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 28 Nov 2018 08:10:32 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AiSn8RxxaKgx+vbfXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e8SK/ad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWpPUNhMWSJPAY2y?=
 =?us-ascii?q?aJAPD/IDMOtDs4Xxu0EDoQekCAWwGO/izCJDiH/s3a091uQsCQ7I3BYhH90SrX?=
 =?us-ascii?q?/asc/6NKYUUeCp1aXGwinDb/JI1jf77ojHbA0qrPaSUrJqcMre1VMjFxjfgVWR?=
 =?us-ascii?q?r4zlIymZ2foRs2ia8eVgU+SvhHA8pgF2uDig3Nsjio3XiY4P1l/E8iB5zZ8zKN?=
 =?us-ascii?q?alRkB7ZtukH4FRtyGcL4Z2XMYiQ2VpuCY8170HtoS3fCkWyJkh2hXRaOSHfpCW?=
 =?us-ascii?q?7h7/UOudOyp0iXx7dL6lmhq/8lSsxvf9W8S2yFpGsyVInsTWunwQ2BHe69KLRu?=
 =?us-ascii?q?Zg8kqgwzqDygHe5+dZKk4uj6XbMYQuwrsom5oTr0vDGij2lV3ojK+ZaEok4PKk?=
 =?us-ascii?q?6+f5bbX8oJ+TKYt0hhv5MqQ0lcyzGeU4Mg4QUGiH4emwyqHv8EnjTLlXgPA6jL?=
 =?us-ascii?q?PVvI3ZKMgHvKK0Ag1Y3p4m6xmlDjem1NoYnWMALFJAYB+Hi4npO1fTIPH3FPu/?=
 =?us-ascii?q?gEqjkC1tx//YOr3tG5LNL3bFkLj/Z7Zw8FBcyAUtwtBF/Z5UCa8OIOj1WkDvsN?=
 =?us-ascii?q?zUFBg5Mxa7w+r/EtVyypseWX6TAq+eKK7StV6I5uExLOWWa44VpS3wK/wk5/7o?=
 =?us-ascii?q?kH84lkURfaiv3ZsLdn+4Gu5qLFmeYXrpmt0BC3sFvhIiTOz2j12PST5TaGyzX6?=
 =?us-ascii?q?Ig/D47D5iqDYfeRo+3hryB0zy2HplXZmBAF1CNHm3kd4SCW/cQdi2SJtVtnSAD?=
 =?us-ascii?q?VbikU4Uhzw2htBfmy7p7KerZ4i8YtZX929Rv5O3Tkhcy9TpzD8mG12GNTmd0nn?=
 =?us-ascii?q?4HRjMs3aB/p1B9xUmH0aRin/NYEtlT7etTUggmLZ7c0/B6C9fqVw3bZdeJSFGm?=
 =?us-ascii?q?Qta8DTErVN0xwcQDY0J8G9WkkxDC0DCmA74Tl7yXGpM09rjQ0GT2J8Z403zGzr?=
 =?us-ascii?q?Uuj0E6QstTMm2rnq1/+BLVB4LTl0WZlryldaIT3CPW8GeDzGyOvFxXUQJqUKXF?=
 =?us-ascii?q?W2wfaVXSrdjj+kzCSLquA6w9MgRd0c6CNrdKatrxgFpbXvjjJsrRb3ixm2iqAx?=
 =?us-ascii?q?aI3a2DbIztd2UZ3yXdDUwEnhsX/XaHMwg+Gyigr3jfDDxoCVLgfUfs/fNip3O8?=
 =?us-ascii?q?S08+1xuKYFF517qp5h4VguSRRO4J0bIapigtsTV0E0y739LNFdWAoRFsfKFdYd?=
 =?us-ascii?q?M7/VdG2njVtw17Ppy8Ma9igkQSfBhwv0Przx93EJlPkdA2rHM2ywp/Mb6Y0FJE?=
 =?us-ascii?q?dzOfwZDwOr3WJnPu/By1bK7WwFXe0NeQ+qcA8/k4r1TjvAe0Fkst6Xln0t9V02?=
 =?us-ascii?q?eC6ZXOFgYdTZXxUkMv/Rhgu77aejU955/T1XB0K6a0tiHN2t03C+ol0BqvZMpf?=
 =?us-ascii?q?P76eGw/0EM0aANauJfcum1ioaBIEIe9T+LQ1P8Oga/uJxqqrMPx8kzKhiGRN+J?=
 =?us-ascii?q?p93V6U9ypgVu7I2I4IwvGF3gedSzjwllagssDtloBCajEfBW6/ySniBI5Maax+?=
 =?us-ascii?q?Z4cLCWGyI8KpwtVynYLiW3ld9FS7HVMJxNepeQaOb1z6xQBQz0UXrmC9liui0j?=
 =?us-ascii?q?N0lCslrqyB0yzUwuTubQYINXRPRGZ/k1jsO4+0j9YBUUisbggpkgal5Engy6ha?=
 =?us-ascii?q?oqR/M3fcQUNScyfqKGFiV7O6tqCebM5X9JMorSJXXfy8YFCbULL8owEW0zj+H2?=
 =?us-ascii?q?tY3z07czCqupPknx11km6dLXBzrGbHdsF03xvQ+NvcRftJ1DocWCZ4kSXXBkS7?=
 =?us-ascii?q?P9Sx/9WbjY3DsuO9V2KmTJFTajPkzYCDtCu6421lHxu/kuu3mt3mFwg6zCD628?=
 =?us-ascii?q?NrVSXOsBbzfI3r276mPuJge0liHEX85NZiGoFijoswg4kd2HgAiZWS53YHk2bz?=
 =?us-ascii?q?MdNA1KL6bXoNQyMLwtHP7Ajk3k1jMmyGx4bjWnqBxcthYsGwYnkK1SIl88BKFK?=
 =?us-ascii?q?CU4aRHnSRvo1q0twLRYeVnkTcbxvsj83oag+APuAowwSSRGLESHU9EPSPykxSE?=
 =?us-ascii?q?9cyxrKJSZGy3a7i/yFJ+ncy9DLGFugxcXXf5epQ4EiNq4MRwLknM0GHt5YH+Y9?=
 =?us-ascii?q?bfc8gTthKPnhfEjuhVLo8xl/UQiSpmP2L9oWMqy+ohgRNy2pG6uZCNK39x86Kh?=
 =?us-ascii?q?Hh5YKjr1atsP+jHqiKZShMeX0JqpHpV8ATULR5roQOmsEDITs/TnKgmPHCc9qn?=
 =?us-ascii?q?edBbrQAwuf5F16oHLIFpChL2uXK2UBzdV+WBmdI1RSjxsOUzU9mp45CxqmxMj8?=
 =?us-ascii?q?cEpi4jAR51j4qgZDy+5yNhn/VHvfqxmsajsuVJefKx9W5BlY50jJKcye8v5zHy?=
 =?us-ascii?q?ZA852jtgONL3KUZx9SAWEVQECEBE3jPrqz5dnG6eeYHfGzL//PYbWItOxfWO2E?=
 =?us-ascii?q?xZOp0ot64TmMMt+DMWVlD/0+wkBDR2x2G9zFmzUTTCwajyLMb8mGpBel5y14tM?=
 =?us-ascii?q?a//O7wWALo44uPBKBfMdFu+xCwnKeCOPSchCd/KTZEyJwMwWXEx6QY3F4Xkytu?=
 =?us-ascii?q?bSWiEawctS7RS6Ldgq9XAAAaayNwN8tI7rgw3gpXOc7chdP6yKR4juMuC1peUV?=
 =?us-ascii?q?zhm8epZdEFIm2nNVPHAlqLO6qCJTHR3873Zqa8Q6VKjOpIrx2wpSqbE0j7MzuZ?=
 =?us-ascii?q?ijnmTAqvPv9MjS2BOBxeuZqwchJsCWjlUdLnZQe3MN5xjT0q37I0gmnGOnIbMT?=
 =?us-ascii?q?h5a0lNtKGf7TtEgvVjHGxM9mZlLeiBmyqD8+bUMIoZsft1DSRyjO9a5HU6y71I?=
 =?us-ascii?q?7CBLXvB1mS3SrsJwrFGiiOWA1j1nUB9WoDZRmI2LpVliObne9pRYWXfL5hQN7W?=
 =?us-ascii?q?CRCxQMv9RkC93vtLpWytjAj6/zLDZC89TJ/coTHcTUKcSHMGY/PhrtAjLbEAwF?=
 =?us-ascii?q?TTv4fV3Y0mhcluyCvl6YtJ43rtC4nJsIV68eV1EvEP4eIlpqEcZEI5ptWD4g17?=
 =?us-ascii?q?mBg5hby2C5qUz8XsRR9qvOV/SORNjzKTufi7QMMxYSwLi+No0SMJG91lBjZ198?=
 =?us-ascii?q?kazNAUPbWd0LqSpkOFxn6H5R+WRzGzVgk3nubRmgtTpKTaa5?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ACAABkvf5bh0O0hNFkGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBgVqCESeMEV+LKimBPzloiW2MWYFzEgEBGBM?=
 =?us-ascii?q?Bh24iNAkNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkAYJpAiQZAQE3AQUJAlADW?=
 =?us-ascii?q?hMFglFLggIEAaYJgWwzgnYBAQWHNAiHa4QreoEcgREzgioHiwqLGYUEkAAHAoM?=
 =?us-ascii?q?QjiECFpEVmCECBAIEBQITAYFGgg0zGgQfgzyCG4NtinRRAYEEAQGNMwEB?=
X-IPAS-Result: =?us-ascii?q?A0ACAABkvf5bh0O0hNFkGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBgVqCESeMEV+LKimBPzloiW2MWYFzEgEBGBMBh24iNAkNAQMBA?=
 =?us-ascii?q?QEBAQECARMBAQEIDQkIKSMMgjYkAYJpAiQZAQE3AQUJAlADWhMFglFLggIEAaY?=
 =?us-ascii?q?JgWwzgnYBAQWHNAiHa4QreoEcgREzgioHiwqLGYUEkAAHAoMQjiECFpEVmCECB?=
 =?us-ascii?q?AIEBQITAYFGgg0zGgQfgzyCG4NtinRRAYEEAQGNMwEB?=
X-IronPort-AV: E=Sophos;i="5.56,291,1539673200"; 
   d="scan'208";a="54078528"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 28 Nov 2018 08:10:31 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728982AbeK2DMh (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 28 Nov 2018 22:12:37 -0500
Received: from userp2120.oracle.com ([156.151.31.85]:48496 "EHLO
        userp2120.oracle.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727979AbeK2DMh (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 28 Nov 2018 22:12:37 -0500
Received: from pps.filterd (userp2120.oracle.com [127.0.0.1])
        by userp2120.oracle.com (8.16.0.22/8.16.0.22) with SMTP id wASG9H21192841;
        Wed, 28 Nov 2018 16:10:06 GMT
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=oracle.com; h=from : to : cc :
 subject : date : message-id; s=corp-2018-07-02;
 bh=HIIkZr31oEk2TrTQTa6H9fLt9liRixVmqY18y4r8FsM=;
 b=VloKSpubsDr+czfHF1K0ewvsTW1Oz3/lCrcJpXeIqpP6WqUyf/O1dFuWz2qAe3qqHPzI
 JJ/+blJd5Y4NXlBpAfLvaYhJJQ678bgntOxRhpiv6deRtcRNi7HVIl5Q8e/xmfg4hGb5
 NO1OVoBFmU3G1DDX1g/eYYoQeby89IJ2E8UEUNCY/EsQEph8EUKK6RrgC++glmcIpIpf
 qUdc8vZEZ0malPtaGC08361VT7EAWsm0d1br1OBW7ZOxyT+ggn72EEGQa8m1tyim7NNj
 COwoDSnSEaSwvQS3D7aQJgutiYY43gaConxEtefs0HOmbd3suZJhxaB0RldqyUKPc0rn dw== 
Received: from aserv0022.oracle.com (aserv0022.oracle.com [141.146.126.234])
        by userp2120.oracle.com with ESMTP id 2nxy9rb4gd-1
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=OK);
        Wed, 28 Nov 2018 16:10:06 +0000
Received: from aserv0122.oracle.com (aserv0122.oracle.com [141.146.126.236])
        by aserv0022.oracle.com (8.14.4/8.14.4) with ESMTP id wASGA4UD000609
        (version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256 verify=OK);
        Wed, 28 Nov 2018 16:10:05 GMT
Received: from abhmp0010.oracle.com (abhmp0010.oracle.com [141.146.116.16])
        by aserv0122.oracle.com (8.14.4/8.14.4) with ESMTP id wASGA4Je023052;
        Wed, 28 Nov 2018 16:10:04 GMT
Received: from ca-dev-arm44.us.oracle.com (/10.211.8.237)
        by default (Oracle Beehive Gateway v4.0)
        with ESMTP ; Wed, 28 Nov 2018 08:10:04 -0800
From: Eric Saint-Etienne <eric.saint.etienne@oracle.com>
To: Linux Kernel <linux-kernel@vger.kernel.org>
Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>,
        Arnaldo Carvalho de Melo <acme@kernel.org>,
        Ingo Molnar <mingo@redhat.com>, Jiri Olsa <jolsa@redhat.com>,
        Peter Zijlstra <peterz@infradead.org>,
        Namhyung Kim <namhyung@kernel.org>,
        Darren Kenny <darren.kenny@oracle.com>,
        Eric Saint-Etienne <eric.saintetienne@gmail.com>
Subject: [PATCH v3] perf symbols: Cannot disassemble some routines when debuginfo present
Date: Wed, 28 Nov 2018 08:35:34 -0800
Message-Id: <1543422934-1228-1-git-send-email-eric.saint.etienne@oracle.com>
X-Mailer: git-send-email 1.8.3.1
X-Proofpoint-Virus-Version: vendor=nai engine=5900 definitions=9091 signatures=668686
X-Proofpoint-Spam-Details: rule=notspam policy=default score=0 suspectscore=0 malwarescore=0
 phishscore=0 bulkscore=0 spamscore=0 mlxscore=0 mlxlogscore=999
 adultscore=0 classifier=spam adjust=0 reason=mlx scancount=1
 engine=8.0.1-1810050000 definitions=main-1811280142
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

When the kernel is compiled with -ffunction-sections and perf uses the
kernel debuginfo, perf fails the very first symbol lookup and ends up with
an hex offset inside [kernel.vmlinux]. It's due to how perf loads the maps.

Indeed only .text gets loaded by map_groups__find() into al->map.
Consequently al->map address range encompass the whole kernel image.
But then map__load() loads many function maps by splitting al->map,
which reduces al->map range drastically. Very likely the target address is
then in one of those newly created function maps, so we need to lookup the
map again to find that new map.

I'm not sure if this issue is only specific to the kernel but at least it
occurs withe the kernel dso, and when we're not using the kernel debuginfo,
perf will fallback to using kallsyms and then the first lookup will work.

The split of .text section happens in dso_process_kernel_symbol() where we
call map_groups__find_by_name() to find an existing map, but with
-ffunction-sections and a symbol belonging to a new (function) map, such
map doesn't exist yet so we end up creating one and adjusting existing maps
accordingly because adjust_kernel_syms is set there.

This patch makes sure that the event address we're looking-up is indeed
within the map we've found, otherwise we lookup another map again.
Only one extra lookup at most is required for the proper map to be found,
if it exists.

Signed-off-by: Eric Saint-Etienne <eric.saint.etienne@oracle.com>
Reviewed-by: Darren Kenny <darren.kenny@oracle.com>
---
 tools/perf/util/event.c | 53 +++++++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 51 insertions(+), 2 deletions(-)

diff --git a/tools/perf/util/event.c b/tools/perf/util/event.c
index e9c108a..f7cad1a 100644
--- a/tools/perf/util/event.c
+++ b/tools/perf/util/event.c
@@ -1569,9 +1569,58 @@ struct map *thread__find_map(struct thread *thread, u8 cpumode, u64 addr,
 		 * Kernel maps might be changed when loading symbols so loading
 		 * must be done prior to using kernel maps.
 		 */
-		if (load_map)
+		if (load_map) {
+			/*
+			 * Note when using -ffunction-sections on the kernel:
+			 *
+			 * Only .text got loaded into al->map at this point.
+			 * Consequently al->map address range encompass the
+			 * whole image.
+			 *
+			 * map__load() will split this map into many function
+			 * maps by shrinking al->map accordingly.
+			 *
+			 * The split happens in dso_process_kernel_symbol()
+			 * where we call map_groups__find_by_name() to find an
+			 * existing map, but with -ffunction-sections and a
+			 * symbol belonging to a new (function) map, such map
+			 * doesn't exist yet so we end up creating one and
+			 * adjusting existing maps accordingly because
+			 * adjust_kernel_syms is set there.
+			 */
+
 			map__load(al->map);
-		al->addr = al->map->map_ip(al->map, al->addr);
+
+			/*
+			 * Note when using -ffunction-sections on the kernel:
+			 *
+			 * Very likely the target address will now be in one of
+			 * the newly created function maps but al->map still
+			 * points to .text which has been drastically shrank by
+			 * the split done in map__load()
+			 */
+			if (al->addr < al->map->start ||
+			    al->addr >= al->map->end) {
+				al->map = map_groups__find(mg, al->addr);
+
+				/*
+				 * map_groups__find() should always find a map
+				 * because the target address was initially
+				 * found in .text which got split by map__load()
+				 * *WITHOUT INTRODUCING ANY GAP*
+				 */
+				WARN_ONCE(al->map == NULL,
+					  "map__load created unexpected gaps!");
+			}
+		}
+
+		/*
+		 * In case the later call to map_groups__find() didn't find a
+		 * suitable map (it should always, but better be safe) we make
+		 * sure that al->map is still valid before deferencing it.
+		 */
+		if (al->map != NULL)
+			al->addr = al->map->map_ip(al->map, al->addr);
 	}
 
 	return al->map;
-- 
1.8.3.1

