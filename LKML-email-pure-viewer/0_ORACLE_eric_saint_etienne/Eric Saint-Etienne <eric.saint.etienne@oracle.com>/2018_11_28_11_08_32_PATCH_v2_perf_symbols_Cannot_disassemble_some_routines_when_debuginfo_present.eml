Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 28 Nov 2018 21:41:50 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 6029F5803C2;
	Wed, 28 Nov 2018 02:43:42 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga001-1.jf.intel.com with ESMTP; 28 Nov 2018 02:43:42 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ALp26txKoDa6TIFv7TNmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgUL/j6rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZXshfSTFPDI2/?=
 =?us-ascii?q?YYUIFOoBJeRVopLhq1cStxayGROhCP/zxjJOm3T43bc60+MkEQze0wIgBdMOv2?=
 =?us-ascii?q?jJp9voLqgSUOa1zLXRwTvMc/NW2Cny6I7Och8/vPqBWqx/cdDQyUYzDQ/FlU+f?=
 =?us-ascii?q?qY3jPzOJzOgCrXSb7+t+WuKpjW4otRp8oj+1xsg2lobJgpwaxkrY+iV+xYY4PN?=
 =?us-ascii?q?u1Q1N1b96jFZtfrSCaN41uT8M8RmFovCc6yrsbuZ+0ZiQKyYgnyhjCYPKEa4iF?=
 =?us-ascii?q?+gzvWPqVLDtimX5odqyziwyv/UWj1uHwTMi53VRSoiZYndTAq2oB2wHc58WGUP?=
 =?us-ascii?q?dx41qt1DeV2wzO6exJJ10/m7DBJJ472LEwk4IesUTdES/yn0X7lLGWdko69eiy?=
 =?us-ascii?q?8ejnYavppoWaN4BqjgHyKKMumtawAeggMwgOWXaU+fik2bH94UH0RK9GguA4n6?=
 =?us-ascii?q?XHqpzWOMcWqrKjDwJU0Isv8xO/AC2n0NQck3kHNlVFeBefgojtOlHOJu34DPim?=
 =?us-ascii?q?j1Svjjhr3fbGMaPlApnUKXjCnrHhcqhn60NH1gozws5Q54hOBrECPv3zQEnxu8?=
 =?us-ascii?q?LcDhMjNAy02ennBM1n1owCQWKPHrOZMKTKvF+M5+IvIPeDaJUauTbgMPUl4//u?=
 =?us-ascii?q?jXkkmV4SZ6Wp3J0XaGymEfRiOUmWfX3sgtIZG2cQogU+VPDqiEGFUTNLZ3a9Ra?=
 =?us-ascii?q?M85i0hB4KhF4vDRp2tj6aH3Ce0BZBWYmFGClaREXbnbYmEWvEMaD6MLc9liDAL?=
 =?us-ascii?q?Sb+hS4o53xG0qAD606ZnLvbT+iAAt5Lj08Z66/fQlRE18zx0CcOd3nqJT2F1mG?=
 =?us-ascii?q?MIWjA30Lp+oUx71leMz6x4j+ZEGtxU4vNDSh06OoLEz+xmF9DyXRrMcc2SSFam?=
 =?us-ascii?q?RdWmAis9TsgrzN8MeEt9H9Sijhbe3yulGbMVlrqLBIAq/aLYxXT+O8F9y3Pe3q?=
 =?us-ascii?q?k7k1YmWtdPNXGhhqNn9AjcHYjJn1+dl6arb6sc2iHN+XyHzWqPukFYTQFxXb/E?=
 =?us-ascii?q?XXAZekvZs9D56lneQL+pDLQtKhFBxtKaKqtWdt3pik1LS+r5N9TAfW29gWewCg?=
 =?us-ascii?q?yOxrOXcoXqfWIR3CHeCEgBlwAe5nKGNQk4Bie8rGPSFj1uFVTzY0zy9elysm+0?=
 =?us-ascii?q?TkgxzwuSdU1uy6K1+gIJhfybU/4cw6gLuDk/pDluHFayxdTWC8GeqApnZ6hcZd?=
 =?us-ascii?q?I94FFa1WPWrQB9P5qgL7x8iV4aaQh4o0Tu1xBvAIVajccqtG8qzBZ1Ka+AzFNB?=
 =?us-ascii?q?djaY3ZfsOr3XKmj+5gyvZ7TR2lHE1NaW+6EP6PsjplXnvQGpEFci8np939lU1X?=
 =?us-ascii?q?uc+ovFDA4IXZ3tVUY38gBwp6vGbSkl+4PUyXpsPLGuvT/Gxd0oC/Uqyxa6c9hE?=
 =?us-ascii?q?LaOLCRX9E8sZB8ipNuwngFypbhMCPOBP+684JcKmd/2a2KG1OOZshi6pjWNC4I?=
 =?us-ascii?q?plyEKD6zJ8SvLU35YC2/yZ3haHWy3gg1u7s8H3mZpLZTcdHmekzSjkBYhRZrB9?=
 =?us-ascii?q?fIoRCGeuJdG3yct6h5L3R3FY81ujDUsc2MC1YRqSc0D93QpI2EQNoHyohTG3zy?=
 =?us-ascii?q?ZpnDEutKaf2jLBw/7jdBYeJmFEXm1igkryLoiuiNAaWlOlbwwolBuj+Eb7yLJX?=
 =?us-ascii?q?pKV5L2nPX0hIezL6IH1lUqu1rrCCedJA6Is0sSVLV+SxeVCbSr/nrxoayS/jBH?=
 =?us-ascii?q?ZexDYgejGuu5X5mQF6iW2HIHZyqnrZZd9/xRPF6NPAQv5R2yIMRDNkhjnPGli8?=
 =?us-ascii?q?I96p8M2Wl5jZqOC+VGGhVppJfSnw14yAtyi75WxsARKhmfC+gdnnEQk80S/m2N?=
 =?us-ascii?q?hmTyTIrBDgYob106S2K/5ofk5tBFXk8cp1Bpl+kpcshJEXwXUbho+a/X0dnWfx?=
 =?us-ascii?q?MNVb37nzbH4MRT4N3t7U7xLp2ExlLnKV2Y35Um+RzddmZ9m/emkWwD4y79hWCK?=
 =?us-ascii?q?eI67xJhSh1rUC5rQ7LYfh9gy0Syf0h6HMBh+EJuQwtzjiSA7wIHElYOzDsmAqM?=
 =?us-ascii?q?79yksKpXY2Ove6Cq1EVihdChEK2CogZEVXb8e5ciHjV/4t9xMV3Sy33z9p/reM?=
 =?us-ascii?q?PLYt0NrB2UnAzNj+xUKJI3i/oLijBrOWP7vX051eE7iQZi0o29vIiCM29t5r62?=
 =?us-ascii?q?AgZENj3pYMMe4i3tjaFbnsqM3oGgBJNhGigQXJvzTPKlCzYStfXhNwaTHzwwsH?=
 =?us-ascii?q?abGbzDHQCB7EdqtW7AE5euN3uPPnkW0c1iRAWBJExYmA0bRy81npk9FgC33sDh?=
 =?us-ascii?q?dFp56ysV5l75rBtM1+1pOwP+UmfZuAendDM0RIKDIxpR6wFI/13VPtCG7uJvAy?=
 =?us-ascii?q?FY+YWsrA6XJWyeeQtIFnsFWlCeC1DgI7mu5sTA8+6CCeqlNPbOZbSOqepDV/aH?=
 =?us-ascii?q?356v041m/yqSOcWLJHVtE/o72k9bV3BjB8vZgykPSzAQly/Vb8+bowq8+jRqrs?=
 =?us-ascii?q?+l9vTnQhnv5YyJC7tdKthv/xG2gaGeN++fnip5KDBY1o8Syn/M0rQQwFkSiyR2?=
 =?us-ascii?q?fTm3DbsArTLNTL7XmqJPDx4UdSJzNMhL76I9xAVNOtTbitT61rFmlP41FkxFWE?=
 =?us-ascii?q?flmsGoY8wKPm68OEnGBEaNKLSJOznLz9vrbqO7TL1alP9UuAGouTaHD0/jOSyO?=
 =?us-ascii?q?mCP0Vx+0K+FDkiGaMAZauIG8aRttDWnjTNT7ahy0KtN3jDs2waEqiXPOL2ITLT?=
 =?us-ascii?q?98c0ZVpL2K8SxYmul/G3BG7nd9MemEmiOZ4/PEJZoMrfRrAjp7l+RB7XQ+yrtV?=
 =?us-ascii?q?6jxERfNvlCvTqN5uv0+pku2VxjV7VxpOry5BhJiXskV6JaXZ6p5AVG7E/R0X62?=
 =?us-ascii?q?WQDhUKp919Bdzuu6Bf0N7PlK3oJTdG8tLU+9YcBsfOJMKGNnohLQTmGDrOAAQZ?=
 =?us-ascii?q?Sj6rMDKXu0sItPCU623djZUgrJXo0M4KS7lGRBk2G+kcB0BNAtMPOtF0UykinL?=
 =?us-ascii?q?rdi9QHsymQth7UEehAv5uPbfuTB+mqBSqYgL9CalNczKn5JsIIP4z9xwpvdlh3?=
 =?us-ascii?q?moLHM03KVNtJr2tqaQpi8xYFy2R3UmBmgxGtUQiq+nJGUKfsxhM=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAABAcP5bh0O0hNFkGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBVAEBAQEBAQsBgVqCESeMcIsqKYE/OWiJbY5MEgEBGBMBh2k?=
 =?us-ascii?q?iNwYNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkAYJpAiQZAQE3AQUJAlADWhMFg?=
 =?us-ascii?q?lFLggIEAaUugWwzgnYBAQWHRQiHaoQreoEcgREzgioHiwqLGYUEkAAHAoMQjiE?=
 =?us-ascii?q?CFpEVmCECBAIEBQITAYFcgXczGgQfgzyCG4NtinRRAYEEAQGMeQEB?=
X-IPAS-Result: =?us-ascii?q?A0ANAABAcP5bh0O0hNFkGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BVAEBAQEBAQsBgVqCESeMcIsqKYE/OWiJbY5MEgEBGBMBh2kiNwYNAQMBAQEBA?=
 =?us-ascii?q?QECARMBAQEIDQkIKSMMgjYkAYJpAiQZAQE3AQUJAlADWhMFglFLggIEAaUugWw?=
 =?us-ascii?q?zgnYBAQWHRQiHaoQreoEcgREzgioHiwqLGYUEkAAHAoMQjiECFpEVmCECBAIEB?=
 =?us-ascii?q?QITAYFcgXczGgQfgzyCG4NtinRRAYEEAQGMeQEB?=
X-IronPort-AV: E=Sophos;i="5.56,290,1539673200"; 
   d="scan'208";a="55166589"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 28 Nov 2018 02:43:40 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727970AbeK1Vot (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 28 Nov 2018 16:44:49 -0500
Received: from userp2120.oracle.com ([156.151.31.85]:53106 "EHLO
        userp2120.oracle.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727476AbeK1Vot (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 28 Nov 2018 16:44:49 -0500
Received: from pps.filterd (userp2120.oracle.com [127.0.0.1])
        by userp2120.oracle.com (8.16.0.22/8.16.0.22) with SMTP id wASAdb97110122;
        Wed, 28 Nov 2018 10:43:12 GMT
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=oracle.com; h=from : to : cc :
 subject : date : message-id; s=corp-2018-07-02;
 bh=JMFQMXzSIZjHqboz3NrICNq/xNAz1lgO+DAw1lScLtg=;
 b=NphKfWPjfYOT+4Q7ewzeLTZgFoJuz9aZyC8s1KeCxi4Tw4JsZ0KWRPp1DsAiLw930My7
 XLKz6j6JOy+wCHrTDk++nwaH3JM1UFSltx/RrsAX8ZrDD81ofaPaxJm7kYZ9FmwA3HLp
 U3n/huz4v6i5WtBHEjTiOaeLWHSJv1INumJ+mE5dzFpOJGhBpEfVlifApggEs4XC9LSV
 IXKffCfcfQHpyYIeesYtQXCKsHPYGICKefafZ2sjT3ThIsP0HgyxvNTsMV+TR5KYQrPu
 6JMr7yb5kmqMFCePUuPNiIvcsbGbFIE3XRTdKPZfIcsoAb3dBmp8wUsatpF+K4iRH3A1 tA== 
Received: from aserv0022.oracle.com (aserv0022.oracle.com [141.146.126.234])
        by userp2120.oracle.com with ESMTP id 2nxy9r9deb-1
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=OK);
        Wed, 28 Nov 2018 10:43:11 +0000
Received: from aserv0121.oracle.com (aserv0121.oracle.com [141.146.126.235])
        by aserv0022.oracle.com (8.14.4/8.14.4) with ESMTP id wASAh6WH032407
        (version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256 verify=OK);
        Wed, 28 Nov 2018 10:43:06 GMT
Received: from abhmp0012.oracle.com (abhmp0012.oracle.com [141.146.116.18])
        by aserv0121.oracle.com (8.14.4/8.13.8) with ESMTP id wASAh4m2011351;
        Wed, 28 Nov 2018 10:43:04 GMT
Received: from ca-dev-arm44.us.oracle.com (/10.211.8.237)
        by default (Oracle Beehive Gateway v4.0)
        with ESMTP ; Wed, 28 Nov 2018 02:43:04 -0800
From: Eric Saint-Etienne <eric.saint.etienne@oracle.com>
To: Linux Kernel <linux-kernel@vger.kernel.org>
Cc: Alexander Shishkin <alexander.shishkin@linux.intel.co>,
        Arnaldo Carvalho de Melo <acme@kernel.org>,
        Ingo Molnar <mingo@redhat.com>, Jiri Olsa <jolsa@redhat.com>,
        Peter Zijlstra <peterz@infradead.org>,
        Namhyung Kim <namhyung@kernel.org>,
        Darren Kenny <darren.kenny@oracle.com>,
        Eric Saint-Etienne <eric.saintetienne@gmail.com>
Subject: [PATCH v2] perf symbols: Cannot disassemble some routines when debuginfo present
Date: Wed, 28 Nov 2018 03:08:32 -0800
Message-Id: <1543403312-26687-1-git-send-email-eric.saint.etienne@oracle.com>
X-Mailer: git-send-email 1.8.3.1
X-Proofpoint-Virus-Version: vendor=nai engine=5900 definitions=9090 signatures=668685
X-Proofpoint-Spam-Details: rule=notspam policy=default score=0 suspectscore=0 malwarescore=0
 phishscore=0 bulkscore=0 spamscore=0 mlxscore=0 mlxlogscore=999
 adultscore=0 classifier=spam adjust=0 reason=mlx scancount=1
 engine=8.0.1-1810050000 definitions=main-1811280096
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

When the kernel is compiled with -ffunction-sections and perf uses the
kernel debuginfo, perf fails the very first symbol lookup and ends up with
an hex offset inside [kernel.vmlinux]. It's due to how perf loads the maps.

Indeed only .text gets loaded by map_groups__find() into al->map.
Consequently al->map address range encompass the whole kernel image.
But then map__load() loads many function maps by splitting al->map,
which reduces al->map range drastically. Very likely the target address is
then in one of those newly created function maps, so we need to lookup the
map again to find that new map.

I'm not sure if this issue is only specific to the kernel but at least it
occurs withe the kernel dso, and when we're not using the kernel debuginfo,
perf will fallback to using kallsyms and then the first lookup will work.

The split of .text section happens in dso_process_kernel_symbol() where we
call map_groups__find_by_name() to find an existing map, but with
-ffunction-sections and a symbol belonging to a new (function) map, such
map doesn't exist yet so we end up creating one and adjusting existing maps
accordingly because adjust_kernel_syms is set there.

This patch makes sure that the event address we're looking-up is indeed
within the map we've found, otherwise we lookup another map again.
Only one extra lookup at most is required for the proper map to be found,
if it exists.

Signed-off-by: Eric Saint-Etienne <eric.saint.etienne@oracle.com>
Reviewed-by: Darren Kenny <darren.kenny@oracle.com>
---
 tools/perf/util/event.c | 49 +++++++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 47 insertions(+), 2 deletions(-)

diff --git a/tools/perf/util/event.c b/tools/perf/util/event.c
index e9c108a..be333a9 100644
--- a/tools/perf/util/event.c
+++ b/tools/perf/util/event.c
@@ -1569,9 +1569,54 @@ struct map *thread__find_map(struct thread *thread, u8 cpumode, u64 addr,
 		 * Kernel maps might be changed when loading symbols so loading
 		 * must be done prior to using kernel maps.
 		 */
-		if (load_map)
+		if (load_map) {
+			/*
+			 * Note when using -ffunction-sections on the kernel:
+			 *
+			 * Only .text got loaded into al->map at this point.
+			 * Consequently al->map address range encompass the
+			 * whole image.
+			 *
+			 * map__load() will split this map into many function
+			 * maps by shrinking al->map accordingly.
+			 *
+			 * The split happens in dso_process_kernel_symbol()
+			 * where we call map_groups__find_by_name() to find an
+			 * existing map, but with -ffunction-sections and a
+			 * symbol belonging to a new (function) map, such map
+			 * doesn't exist yet so we end up creating one and
+			 * adjusting existing maps accordingly because
+			 * adjust_kernel_syms is set there.
+			 */
+
 			map__load(al->map);
-		al->addr = al->map->map_ip(al->map, al->addr);
+
+			/*
+			 * Note when using -ffunction-sections on the kernel:
+			 *
+			 * Very likely the target address will now be in one of
+			 * the newly created function maps but al->map still
+			 * points to .text which has been drastically shrank by
+			 * the split done in map__load()
+			 */
+			if (al->addr < al->map->start ||
+			    al->addr >= al->map->end)
+				al->map = map_groups__find(mg, al->addr);
+
+			/*
+			 * map_groups__find() should always find a map because
+			 * the target address was initially found in .text which
+			 * got split *without introducing gaps* by map__load()
+			 */
+		}
+
+		/*
+		 * In case the later call to map_groups__find() didn't find a
+		 * suitable map (it should always, but better be safe) we make
+		 * sure that al->map is still valid before deferencing it.
+		 */
+		if (al->map != NULL)
+			al->addr = al->map->map_ip(al->map, al->addr);
 	}
 
 	return al->map;
-- 
1.8.3.1

