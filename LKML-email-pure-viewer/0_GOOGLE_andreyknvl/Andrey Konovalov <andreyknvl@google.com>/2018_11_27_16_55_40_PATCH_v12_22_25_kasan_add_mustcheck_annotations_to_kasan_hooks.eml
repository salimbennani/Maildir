Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 28 Nov 2018 08:47:24 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga008.fm.intel.com (fmsmga008.fm.intel.com [10.253.24.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 30C95580460;
	Tue, 27 Nov 2018 08:57:01 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga008-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 27 Nov 2018 08:57:00 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ASY2/DRd1qjqTB7Uv7zbqOfSclGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc+/ZxyN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRBDI2i?=
 =?us-ascii?q?coUBAekPM+FaoInzqFQAogC+BRGuCe701jNFhWX70bEg3ug9DQ3L2hErEdIUsH?=
 =?us-ascii?q?TTqdX4LLsfUeaow6nS0zrCb+5d1zL66IjOdRAhv+uDXbZ3ccrP1EIiEBnKjlON?=
 =?us-ascii?q?poz/ITyU1ucNs26F7+pkTu+vhGknqwZ+ojir2MggkJXGhoUQyl3d8yhy3YU7Jc?=
 =?us-ascii?q?WgRUJlfdKpFIFcuzyUOodoWM8uXmJltDogxrAHu5O3ZDYGx447yxLDbvGKcYyF?=
 =?us-ascii?q?7Qz/WOuUPDt1hHdodK+jixu3/0Ws1+7xWtWx3VtFsyZFnNrBu3UD2hDP98SLVv?=
 =?us-ascii?q?5w/kmv2TuOygze7PxPL1oumqrBMZEhx6Y9lpoNvkTHGS/7gFv2jKCIeUU+4OSo?=
 =?us-ascii?q?6ProYq/gppCCM494kAb+Mr4hmsCnAOQ4NBYBX3SD9OiiyLHu+Vf1TKhEg/EoiK?=
 =?us-ascii?q?XVrZPXKdgBqqO4AQJZyoMj5Ay+Dzei3tQYh34HLFdddRKDjojpPUzOIf/hAfe8?=
 =?us-ascii?q?nVusijFryO7CPrH4BZXMIH7Dn6n7fbtm9U5cxxQ8zcpF65JXFL4BOvTzVVH1tN?=
 =?us-ascii?q?DCCR85KQO0z/79CNphzoMeRX6PAqiBPaPWsF+I5fwgL/ODZY8Iozv9L/kl5/jz?=
 =?us-ascii?q?jX42g1MdfK+p3YcJZ3C8BPhpP0KZYX/0iNcbDWgKphY+TPDtiFCaUT5cfXeyX7?=
 =?us-ascii?q?4m6TE8Eo6mDZrDSZqrgLyOxyq7GpxWZmZbClGDC3vodoOEW+sSZyKWOMNujjsE?=
 =?us-ascii?q?Vb25QY87yR6urBP6y6ZgLufM+C0Ysozs2MJ25+3UkxEy8zt0At+Z02GMSWF0g2?=
 =?us-ascii?q?wJSyU33KB5vUxy1FOD3bJkjPxfENxZ/+lJXRsiNZ7A0+x6DMj/VRjafteJT1am?=
 =?us-ascii?q?Qc+qASsrQdIz2NIOZ0d9G9O/jhHMxSaqArkVl6CVC5ww6K7Tw3/xJ8NlwXbcyK?=
 =?us-ascii?q?Yhl0UmQtdINWC+ha5w7Q7TC5TNk0WYjamqc6sc0TXJ9GeCy2qOoU5ZXBRxUaXD?=
 =?us-ascii?q?QXAQeE/Woc7l6UPFSr+kEa4nPRdZyc6eNqtKbcXkgkhcS/f9JtvSeWKxlH22BR?=
 =?us-ascii?q?aT2LyMao3me2Ee3CXYDEgJiAQT/XeANQgjCSatuWPeDDpyFV3xZ0Pg6/VxqHS+?=
 =?us-ascii?q?TkUs1QGFc1Vh16ap+h4SnfGTVukc3qwatys7qzV7BlC938nIBNqGvAdheKRcYd?=
 =?us-ascii?q?Ug4FZIz27Ztgp9PoC+IKBmnFIRbwN3v0b23RVtFopAidQqrG8tzAdqNaKY0VZB?=
 =?us-ascii?q?dzSE3ZDwOrzbMHXy8Aqoa67M3lHe0dCW+qgU5fQ8qlXjuhypF0U4/3Vm1dlVz2?=
 =?us-ascii?q?WT5pHQAAUOVpLxV1499wJmqLHCfik9+4TU2GV2PqmwrDDD1MwmBes/xhm7YtdQ?=
 =?us-ascii?q?LbmLFAnxE80dGcijM+gqm1mvbhIZM+Fe7q80P8W6d/SY3K6nJvpvnDWjjW5f+o?=
 =?us-ascii?q?ByzlqM9zZgSu7Px5sEw+yY0hGbWDvmjVahstr4mYZLZTwJGmq/yC7kBJNeZ6Fo?=
 =?us-ascii?q?fIYLD3uuLNOzxtlkm5HtXHtY/ka5B1wawM+pZQaSb1vl0A1K1EQYvWaomTGlwD?=
 =?us-ascii?q?xziT0pqLSQ3DbPw+j7aBUIIGpLS3R8glf2Joi0icsXXEypbwgviRuk6lz2x6ld?=
 =?us-ascii?q?pKRjMWbTRV1EcDTxL2FnSqGwrKaNY9ZT6JM0tiVaSOS9YVGARr/9uRcayD7jH2?=
 =?us-ascii?q?1FyTA/djGqvIj5nhNghGKcKnZzsGTWecVqyRjD49zcQOZb3iAaSylglTnXGl+8?=
 =?us-ascii?q?MsGr/dqOjZfDseO+V2W7Wp1IaybrzoCAtCq95WJ0Bx2yhPSzmtzhEQgn3i73zd?=
 =?us-ascii?q?hqVSPUrBniZonnzbi1MeVifkNwHl/z99J6Gp1ikos3nJwR2WIVhpKP8XoFkGfz?=
 =?us-ascii?q?N85W2ab/bHoLWD4KzMTZ4Anj2E1/MH2Jw5j1WWmawstkf9O6eH8Z2joh78BWD6?=
 =?us-ascii?q?eZ9L9EkjF0olairQLRfOJynjESyfY17H4agucJuBcizymHA7ASG1VYMjLolxiS?=
 =?us-ascii?q?89++q6BXbn61cbeszEp+gcyhDLaarwFZWXb5eY0tETV+78phK1LMzGP86pv/d9?=
 =?us-ascii?q?bOd9ITuQaZkxPBj+hTNZIwmeAGhSthOWLho3Ilz/Q3ggBp3ZG/pIKHMXli/Lql?=
 =?us-ascii?q?Ah5EMT34f98T+jbojapEn8eZxYavHoh6GjUQXZvlVvaoEDMUtfT6OAeCCjw8qn?=
 =?us-ascii?q?GHGbXBGQ+T8ltpr3XKE5qzLXGYOGEZzcl+RBmaPEFQmxobXDI+np4kDAyqwNHh?=
 =?us-ascii?q?fVx95jAQ4F74txRNxvhpNxn5TmfQugOoZi0oR5iYKRpc9htC6FvNMcyC8uJzGD?=
 =?us-ascii?q?lV/p+7owyINGObfB5EDX0TVkyHGlDjPaSu5d/a/OiDHee+K/rOYbOTqe1RTfuI?=
 =?us-ascii?q?xJSv0pd48DaILMmAIn5iD/gj0EpZQX95A9jZmykISyEPlyPNaNObpA6h+iJtqM?=
 =?us-ascii?q?Cz6u/rWAXp5YuAELZSNdRv+xargaaMLeKQhSB5KSpG2ZMI33PH1L8f3FsKgSF0?=
 =?us-ascii?q?azatCagAtTLKTK/Imq9YER8bayBwNMtJ9a483RNNOcnUitzrzL54k+U1BkxBVV?=
 =?us-ascii?q?zgnMGpeMMLL3u8NFPBGEaEKrCGKSfXzMHwZKO2UadQg/lMtx2spTabFFfuMS6e?=
 =?us-ascii?q?lzbyTRCgL+FNgDufPBxfo4y9dhdtCW7+TNPpcBG7Mdl3jSEozr0wnH/FKWkcMT?=
 =?us-ascii?q?1keUNXsrKQ9T9Ygul4G2FZ8nplLOyElzyF4OXCNpkWseVkAiJvmuJe4XQ6zaZV?=
 =?us-ascii?q?7S5eSPx0nivSssBho1W8nuaTzTpnVQJEqixXi4KToUViJaLZ+4FAWHne+hIN6G?=
 =?us-ascii?q?SQCxISqNpkCt3goaZQytfUmaL3KTdC9c/U/MQGC8jVLsKHLGQuMR7zFDHICwsF?=
 =?us-ascii?q?SG3jCWaKrkpRivyDvkeEp5I7rJnq0M4HUK5SXl0zF/UyFEV/AMEFMoVwGDgjlO?=
 =?us-ascii?q?jfxOcM6Gq3qhXcXo1iuYzOTv+UAvKnfDmdjLVJfTMHxrT3KYlVPYr+jQgqRlx7?=
 =?us-ascii?q?gJ7bU3TBQNNKvGU1YhElvUZK7lBxSWo830+jYQSotjtbPveolxo3jENbaP4s8j?=
 =?us-ascii?q?73qwM8L0bDoCo21kw4g9TjiCu5eST0aqy3WNcSQxX1s0x5Hp7ySAFzJVmtnEhg?=
 =?us-ascii?q?cjvJTrlWiZNpb2UtgwjZ798HMv5GTLZYZwcQjdWeYvg03E4U/i6j7UtG4/bVT5?=
 =?us-ascii?q?BlkV1uObeqo2hNxEpGa8QpIqqYcKNK1l14gqOIoz/t2OcsxgMXO0cK9iWVYiFe?=
 =?us-ascii?q?/AQtP6MlbxC14uhl7wDKzz5KYmtKTec2pvts+ms0IeHGxCXlhfoLDEG6NKSzIr?=
 =?us-ascii?q?iQpmzGlMOSWRtk0E8FjEBY+b533N04W0WTUE8rwf2aEBFfcYLnIBteJ/hD8nfS?=
 =?us-ascii?q?cDzG5eDE25kzLZS7GeHlV8eHrqNSiUWhSkJhM40S44wkF4Ow0UeQecvuMrNDzB?=
 =?us-ascii?q?w3+AXtDFyfCbJCfxfd1H8uuc335p56xolQOy8QBS0pOD+7oLzWqxQqjeedUdMe?=
 =?us-ascii?q?ZnYcV5EDcHUsV5v+02R0pXVLRAb/lKozyQWO4iX5ryKaRG3xZdtuaPqOYDt8Dd?=
 =?us-ascii?q?Ct4jQ49e69jluBtt3/IW79ffFlvtnG86tOopeBBPR8TrRntUrY3Y5CSCruG1bG?=
 =?us-ascii?q?DNr9A5HvcYQqZtG8Xm6zT1i7gi0vQsH6Mf6iKa+HhQyuToFR5s3T8z0uL9P1Ky?=
 =?us-ascii?q?ACBxpqp+YO+q96LVkMbpchfTbstgIjJ+m6fleblNK0TDDpYRJMSfUX5+igaLle?=
 =?us-ascii?q?ySxkOuagzncIR4s8w+Px/UNbANlArRDExPKnL6AWF2DIGmFBdgDIu2Bxw2tgLO?=
 =?us-ascii?q?c2xqEkwA7UvFwbLRiPdep0eCpFuc0xARWZJnAgTiIXXVKTxanZ5QesmpAb5TdY?=
 =?us-ascii?q?ltAcheJfvXf9vrfbYTSxSKKstJPZujYhat5gpLd+Z8irAcKaudvlgjHARYPM+l?=
 =?us-ascii?q?mGSzK3CPNAhvBUISRFUPdPhGcpMNAHvowH7lA+AIN2Ar1MBeEWr6itcT1+EWZG?=
 =?us-ascii?q?1zcBS6uE3TofkqGi3bbG0BaaddIpNxlS9N1Bi8AUVWt6bz02q6ikWIHbmHWDV3?=
 =?us-ascii?q?AQZgwU6EAE4AMGi581cufuyJTHQYUKyDNMpf9wFCzRGd0g81r9V3HTglXiTvil?=
 =?us-ascii?q?u/Km0BgUz//21NQfHhllBgwVw+dQi1ttIatybqodpIjHtheMdFjmpyTszuW8LV?=
 =?us-ascii?q?VcwMGScEf3SMLBtGzhQmgH4XQOXoJn1n7SD9IRnhB/ZaJto09DZMiie0Dj93kh?=
 =?us-ascii?q?wqxqAbCzVoas3Vlh5XIHQTq6VtlLFuBivHrJVzB/JZOmspPoP9NVWGAD1oearg?=
 =?us-ascii?q?Jwlkl3Pj/x6p1aLN9E5jkSFGxGpzmHscqxTtNH8cBxCJAIL5F0vHKrS/AMA4SY?=
 =?us-ascii?q?v3Bj4u+n8XTe4T1p9Q7inDg=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AUAAAydv1bh0O0hNFkHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGBMII7J4wRjAiBaDmXLIEkA0wSAQEYEwGIeiI0CQ0BAwEBAQEBAQIBEwE?=
 =?us-ascii?q?BAQgNCQgpIwyCNiQBgmIDAwECJAsBDQEBHhkBBQkBARg4AzEBBQEcBgESBYMcg?=
 =?us-ascii?q?gIBBJl3PIodgWwzgnYBAQWBBAEBhh4IEodQgw+BHBeBf4FEhX0ChzyLF5R3CYI?=
 =?us-ascii?q?ggxKLfhiJUoc5LJdkAgQCBAUCBQ8hgSVsgSFNI4M8ghsMF4NKihwBNz8ygQUBA?=
 =?us-ascii?q?Y0PAQE?=
X-IPAS-Result: =?us-ascii?q?A0AUAAAydv1bh0O0hNFkHQEBBQEHBQGBUQgBCwGBMII7J4w?=
 =?us-ascii?q?RjAiBaDmXLIEkA0wSAQEYEwGIeiI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCN?=
 =?us-ascii?q?iQBgmIDAwECJAsBDQEBHhkBBQkBARg4AzEBBQEcBgESBYMcggIBBJl3PIodgWw?=
 =?us-ascii?q?zgnYBAQWBBAEBhh4IEodQgw+BHBeBf4FEhX0ChzyLF5R3CYIggxKLfhiJUoc5L?=
 =?us-ascii?q?JdkAgQCBAUCBQ8hgSVsgSFNI4M8ghsMF4NKihwBNz8ygQUBAY0PAQE?=
X-IronPort-AV: E=Sophos;i="5.56,287,1539673200"; 
   d="scan'208";a="52844526"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 27 Nov 2018 08:56:59 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1731853AbeK1DzE (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 27 Nov 2018 22:55:04 -0500
Received: from mail-wm1-f44.google.com ([209.85.128.44]:51288 "EHLO
        mail-wm1-f44.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1731816AbeK1DzD (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 27 Nov 2018 22:55:03 -0500
Received: by mail-wm1-f44.google.com with SMTP id j207so15506079wmj.1
        for <linux-kernel@vger.kernel.org>; Tue, 27 Nov 2018 08:56:30 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding;
        bh=N8jYgDbVKt3tw47AlDQNwZCbiy1BMntGMdo2UlIpEQI=;
        b=FKQNuSOTJW4cI4UcMN2RMDAj67rDzAAuvIhRvYzrA5MRBzvI7iBS9pNRw+tGfyAPy5
         J4kITg0pv/5kwt/0WqqCW5vwwjIxYhMXJQnr0Zuo7IfhOi/DhNph6xMuFi/J0eB/vWls
         ZoYGMPImV6SSIHtBxVj2ohaIPo1AwQqp6QzZUsCVsEir5T2Qwp0at7yHW2Ez9ekmn4Cf
         Jkdh5pCyYqW7lPMgC7l5jv1YgEyaPp1txFdlImHREgqqUnNbKKTp6d9F/SoqhrG6K5R0
         o/mtuEHYAsIeNgDX86Sqr81v4KgPr7XHTjxZnrGJJXGtnkq1k43BVPH0a7rPx0Ah/qEL
         BO9w==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=N8jYgDbVKt3tw47AlDQNwZCbiy1BMntGMdo2UlIpEQI=;
        b=TRtP0Pbf13FwtzMvEXaLdzKbtiKshdIoqWKka4CaBpj2itP+AWBqrFKp2w1eNESv+M
         cTdRWdGRd5FBb8vSZJpBuluX3cjnmHFd+iTUNuLYsJc+7yCof6WdLuRxbO4vOwCrhyK1
         A9yKDJxDj0ju8DdwC6t72BbikrIgDKryNNuQoZr5JrztN/BT//+ltOdpJPGSEu4rJUZw
         qdJASm37sNSRlRILXavc9LQSuziOvbFv29LGip5tW+QB5oSOjrxTMxgzj6E6WH8wUqxO
         YkvHxczQb4rpmfKX/2GJdb/Vyo9PYOMPj+hmbUxbo6zQqRWP9Yo6h7H+7Qz2zYxzcRXG
         PhcQ==
X-Gm-Message-State: AA+aEWY14xVYD2StPbpPqFx05DruxgLKKOA1vIbiSA60srmfubTEyzX1
        lybyXuNYUMnj3Y+yAFJ8mORBcw==
X-Google-Smtp-Source: AFSGD/V0pKFbmSN/3YfdNV+APeYj2FMajP/ADMEQwkFKF66VbuRLak9h2rPCP9UGSIvjwojxKkEfyg==
X-Received: by 2002:a1c:174f:: with SMTP id 76mr1184907wmx.116.1543337789747;
        Tue, 27 Nov 2018 08:56:29 -0800 (PST)
Received: from andreyknvl0.muc.corp.google.com ([2a00:79e0:15:10:3180:41f8:3010:ff61])
        by smtp.gmail.com with ESMTPSA id k73sm6383099wmd.36.2018.11.27.08.56.28
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Tue, 27 Nov 2018 08:56:28 -0800 (PST)
From: Andrey Konovalov <andreyknvl@google.com>
To: Andrey Ryabinin <aryabinin@virtuozzo.com>,
        Alexander Potapenko <glider@google.com>,
        Dmitry Vyukov <dvyukov@google.com>,
        Catalin Marinas <catalin.marinas@arm.com>,
        Will Deacon <will.deacon@arm.com>,
        Christoph Lameter <cl@linux.com>,
        Andrew Morton <akpm@linux-foundation.org>,
        Mark Rutland <mark.rutland@arm.com>,
        Nick Desaulniers <ndesaulniers@google.com>,
        Marc Zyngier <marc.zyngier@arm.com>,
        Dave Martin <dave.martin@arm.com>,
        Ard Biesheuvel <ard.biesheuvel@linaro.org>,
        "Eric W . Biederman" <ebiederm@xmission.com>,
        Ingo Molnar <mingo@kernel.org>,
        Paul Lawrence <paullawrence@google.com>,
        Geert Uytterhoeven <geert@linux-m68k.org>,
        Arnd Bergmann <arnd@arndb.de>,
        "Kirill A . Shutemov" <kirill.shutemov@linux.intel.com>,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        Kate Stewart <kstewart@linuxfoundation.org>,
        Mike Rapoport <rppt@linux.vnet.ibm.com>,
        kasan-dev@googlegroups.com, linux-doc@vger.kernel.org,
        linux-kernel@vger.kernel.org, linux-arm-kernel@lists.infradead.org,
        linux-sparse@vger.kernel.org, linux-mm@kvack.org,
        linux-kbuild@vger.kernel.org
Cc: Kostya Serebryany <kcc@google.com>,
        Evgeniy Stepanov <eugenis@google.com>,
        Lee Smith <Lee.Smith@arm.com>,
        Ramana Radhakrishnan <Ramana.Radhakrishnan@arm.com>,
        Jacob Bramley <Jacob.Bramley@arm.com>,
        Ruben Ayrapetyan <Ruben.Ayrapetyan@arm.com>,
        Jann Horn <jannh@google.com>,
        Mark Brand <markbrand@google.com>,
        Chintan Pandya <cpandya@codeaurora.org>,
        Vishwath Mohan <vishwath@google.com>,
        Andrey Konovalov <andreyknvl@google.com>
Subject: [PATCH v12 22/25] kasan: add __must_check annotations to kasan hooks
Date: Tue, 27 Nov 2018 17:55:40 +0100
Message-Id: <6d8c6f59c5b5a3dde569f893ecf3b56e58030ba1.1543337629.git.andreyknvl@google.com>
X-Mailer: git-send-email 2.20.0.rc0.387.gc7a69e6b6c-goog
In-Reply-To: <cover.1543337629.git.andreyknvl@google.com>
References: <cover.1543337629.git.andreyknvl@google.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This patch adds __must_check annotations to kasan hooks that return a
pointer to make sure that a tagged pointer always gets propagated.

Suggested-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
---
 include/linux/kasan.h | 16 ++++++++++------
 mm/kasan/common.c     | 15 +++++++++------
 2 files changed, 19 insertions(+), 12 deletions(-)

diff --git a/include/linux/kasan.h b/include/linux/kasan.h
index 8da7b7a4397a..b40ea104dd36 100644
--- a/include/linux/kasan.h
+++ b/include/linux/kasan.h
@@ -49,16 +49,20 @@ void kasan_cache_create(struct kmem_cache *cache, unsigned int *size,
 void kasan_poison_slab(struct page *page);
 void kasan_unpoison_object_data(struct kmem_cache *cache, void *object);
 void kasan_poison_object_data(struct kmem_cache *cache, void *object);
-void *kasan_init_slab_obj(struct kmem_cache *cache, const void *object);
+void * __must_check kasan_init_slab_obj(struct kmem_cache *cache,
+					const void *object);
 
-void *kasan_kmalloc_large(const void *ptr, size_t size, gfp_t flags);
+void * __must_check kasan_kmalloc_large(const void *ptr, size_t size,
+						gfp_t flags);
 void kasan_kfree_large(void *ptr, unsigned long ip);
 void kasan_poison_kfree(void *ptr, unsigned long ip);
-void *kasan_kmalloc(struct kmem_cache *s, const void *object, size_t size,
-		  gfp_t flags);
-void *kasan_krealloc(const void *object, size_t new_size, gfp_t flags);
+void * __must_check kasan_kmalloc(struct kmem_cache *s, const void *object,
+					size_t size, gfp_t flags);
+void * __must_check kasan_krealloc(const void *object, size_t new_size,
+					gfp_t flags);
 
-void *kasan_slab_alloc(struct kmem_cache *s, void *object, gfp_t flags);
+void * __must_check kasan_slab_alloc(struct kmem_cache *s, void *object,
+					gfp_t flags);
 bool kasan_slab_free(struct kmem_cache *s, void *object, unsigned long ip);
 
 struct kasan_cache {
diff --git a/mm/kasan/common.c b/mm/kasan/common.c
index 195ca385cf7a..1144e741feb6 100644
--- a/mm/kasan/common.c
+++ b/mm/kasan/common.c
@@ -373,7 +373,8 @@ static u8 assign_tag(struct kmem_cache *cache, const void *object, bool new)
 #endif
 }
 
-void *kasan_init_slab_obj(struct kmem_cache *cache, const void *object)
+void * __must_check kasan_init_slab_obj(struct kmem_cache *cache,
+						const void *object)
 {
 	struct kasan_alloc_meta *alloc_info;
 
@@ -389,7 +390,8 @@ void *kasan_init_slab_obj(struct kmem_cache *cache, const void *object)
 	return (void *)object;
 }
 
-void *kasan_slab_alloc(struct kmem_cache *cache, void *object, gfp_t flags)
+void * __must_check kasan_slab_alloc(struct kmem_cache *cache, void *object,
+					gfp_t flags)
 {
 	return kasan_kmalloc(cache, object, cache->object_size, flags);
 }
@@ -449,8 +451,8 @@ bool kasan_slab_free(struct kmem_cache *cache, void *object, unsigned long ip)
 	return __kasan_slab_free(cache, object, ip, true);
 }
 
-void *kasan_kmalloc(struct kmem_cache *cache, const void *object, size_t size,
-		   gfp_t flags)
+void * __must_check kasan_kmalloc(struct kmem_cache *cache, const void *object,
+					size_t size, gfp_t flags)
 {
 	unsigned long redzone_start;
 	unsigned long redzone_end;
@@ -482,7 +484,8 @@ void *kasan_kmalloc(struct kmem_cache *cache, const void *object, size_t size,
 }
 EXPORT_SYMBOL(kasan_kmalloc);
 
-void *kasan_kmalloc_large(const void *ptr, size_t size, gfp_t flags)
+void * __must_check kasan_kmalloc_large(const void *ptr, size_t size,
+						gfp_t flags)
 {
 	struct page *page;
 	unsigned long redzone_start;
@@ -506,7 +509,7 @@ void *kasan_kmalloc_large(const void *ptr, size_t size, gfp_t flags)
 	return (void *)ptr;
 }
 
-void *kasan_krealloc(const void *object, size_t size, gfp_t flags)
+void * __must_check kasan_krealloc(const void *object, size_t size, gfp_t flags)
 {
 	struct page *page;
 
-- 
2.20.0.rc0.387.gc7a69e6b6c-goog

