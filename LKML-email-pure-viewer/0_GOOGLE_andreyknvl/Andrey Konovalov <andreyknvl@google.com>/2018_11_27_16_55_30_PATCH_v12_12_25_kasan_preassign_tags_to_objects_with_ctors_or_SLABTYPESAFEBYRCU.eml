Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 28 Nov 2018 08:47:29 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 250145803C2;
	Tue, 27 Nov 2018 08:58:56 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga006-1.jf.intel.com with ESMTP; 27 Nov 2018 08:58:56 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A/hOzfhfFT1G9Lb/W2qr5j7BClGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc+/ZxyN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRBDI2i?=
 =?us-ascii?q?coUBAekPM+FaoInzqFQAogC+BRGuCe701jNFhWX70bEg3ug9DQ3L2hErEdIUsH?=
 =?us-ascii?q?TTqdX4LLsfUeaow6nS0zrCb+5d1zL66IjOdRAhv+uDXbZ3ccrP1EIiEBnKjlON?=
 =?us-ascii?q?poz/ITyU1ucNs26F7+pkTu+vhGknqwZ+ojir2MggkJXGhoUQyl3d8yhy3YU7Jc?=
 =?us-ascii?q?WgRUJlfdKpFIFcuzyUOodoWM8uXmJltDogxrAHu5O3ZDYGx447yxLDbvGKcYyF?=
 =?us-ascii?q?7Qz/WOuUPDt1hHdodK+jixu3/0Ws1+7xWtWx3VtFsyZFnNrBu3UD2hDP98SLVv?=
 =?us-ascii?q?5w/kmv2TuOygze7PxPL1oumqrBMZEhx6Y9lpoNvkTHGS/7gFv2jKCIeUU+4OSo?=
 =?us-ascii?q?6ProYq/gppCCM494kAb+Mr4hmsCnAOQ4NBYBX3SD9OiiyLHu+Vf1TKhEg/EoiK?=
 =?us-ascii?q?XVrZPXKdgBqqO4AQJZyoMj5Ay+Dzei3tQYh34HLFdddRKDjojpPUzOIf/hAfe8?=
 =?us-ascii?q?nVusijFryO7CPrH4BZXMIH7Dn6n7fbtm9U5cxxQ8zcpF65JXFL4BOvTzVVH1tN?=
 =?us-ascii?q?DCCR85KQO0z/79CNphzoMeRX6PAqiBPaPWsF+I5fwgL/ODZY8Iozv9L/kl5/jz?=
 =?us-ascii?q?jX42g1MdfK+p3YcJZ3C8BPhpP0KZYX/0iNcbDWgKphY+TPDtiFCaUT5cfXeyX7?=
 =?us-ascii?q?4m6TE8Eo6mDZrDSZqrgLyOxyq7GpxWZmZbClGDC3vodoOEW+sSZyKWOMNujjsE?=
 =?us-ascii?q?Vb25QY87yR6urBP6y6ZgLufM+C0Ysozs2MJ25+3UkxEy8zt0At+Z02GMSWF0g2?=
 =?us-ascii?q?wJSyU33KB5vUxy1FOD3bJkjPxfENxZ/+lJXRsiNZ7A0+x6DMj/VRjafteJT1am?=
 =?us-ascii?q?Qc+qASsrQdIz2NIOZ0d9G9O/jhHMxSaqArkVl6CVC5ww6K7Tw3/xJ8NlwXbcyK?=
 =?us-ascii?q?Yhl0UmQtdINWC+ha5w7Q7TC5TNk0WYjamqc6sc0TXJ9GeCy2qOoU5ZXBRxUaXD?=
 =?us-ascii?q?QXAQeE/Woc7l6UPFSr+kEa4nPRdZyc6eNqtKbcXkgkhcS/f9JtvSeWKxlH22BR?=
 =?us-ascii?q?aT2LyMao3me2Ee3CXYDEgJiAQT/XeANQgjCSatuWPeDDpyFV3xZ0Pg6/VxqHS+?=
 =?us-ascii?q?TkUs1QGFc1Vh16ap+h4SnfGTVukc3qwatys7qzV7BlC938nIBNqGvAdheKRcYd?=
 =?us-ascii?q?Ug4FZIz27Ztgp9PoC+IKBmnFIRbwN3v0b23RVtFopAidQqrG8tzAdqNaKY0VZB?=
 =?us-ascii?q?dzSE3ZDwOrzbMHXy8Aqoa67M3lHe0dCW+qgU5fQ8qlXjuhypF0U4/3Vm1dlVz2?=
 =?us-ascii?q?WT5pHQAAUOVpLxV1499wJmqLHCfik9+4TU2GV2PqmwrDDD1MwmBes/xhm7YtdQ?=
 =?us-ascii?q?LbmLFAnxE80dGcijM+gqm1mvbhIZM+Fe7q80P8W6d/SY3K6nJvpvnDWjjW5f+o?=
 =?us-ascii?q?ByzlqM9zZgSu7Px5sEw+yY0hGbWDvmjVahstr4mYZLZTwJGmq/yC7kBJNeZ6Fo?=
 =?us-ascii?q?fIYLD3uuLNOzxtlkm5HtXHtY/ka5B1wawM+pZQaSb1vl0A1K1EQYvWaomTGlwD?=
 =?us-ascii?q?xziT0pqLSQ3DbPw+j7aBUIIGpLS3R8glf2Joi0icsXXEypbwgviRuk6lz2x6ld?=
 =?us-ascii?q?pKRjMWbTRV1EcDTxL2FnSqGwrKaNY9ZT6JM0tiVaSOS9YVGARr/9uRcayD7jH2?=
 =?us-ascii?q?1FyTA/djGqvIj5nhNghGKcKnZzsGTWecVqyRjD49zcQOZb3iAaSylglTnXGl+8?=
 =?us-ascii?q?MsGr/dqOjZfDseO+V2W7Wp1IaybrzoCAtCq95WJ0Bx2yhPSzmtzhEQgn3i73zd?=
 =?us-ascii?q?hqVSPUrBniZonnzbi1MeVifkNwHl/z99J6Gp1ikos3nJwR2WIVhpKP8XoFkGfz?=
 =?us-ascii?q?N85W2ab/bHoLWD4KzMTZ4Anj2E1/MH2Jw5j1WWmawstkf9O6eH8Z2joh78BWD6?=
 =?us-ascii?q?eZ9L9EkjF0olairQLRfOJynjESyfY17H4agucJuBcizymHA7ASG1VYMjLolxiS?=
 =?us-ascii?q?89++q6BXbn61cbeszEp+gcyhDLaarwFZWXb5eY0tETV+78phK1LMzGP86pv/d9?=
 =?us-ascii?q?bOd9ITuQaZkxPBj+hTNZIwmeAGhSthOWLho3Ilz/Q3ggBp3ZG/pIKHMXli/Lql?=
 =?us-ascii?q?Ah5EMT34f98T+jbojapEn8eZxYavHoh6GjUQXZvlVvaoEDMUtfT6OAeCCjw8qn?=
 =?us-ascii?q?GHGbXBGQ+T8ltpr3XKE5qzLXGYOGEZzcl+RBmaPEFQmxobXDI+np4kDAyqwNHh?=
 =?us-ascii?q?fVx95jAQ4F74txRNxvhpNxn5TmfQugOoZi0oR5iYKRpc9htC6FvNMcyC8uJzGD?=
 =?us-ascii?q?lV/p+7owyINGObfB5EDX0TVkyHGlDjPaSu5d/a/OiDHee+K/rOYbOTqe1RTfuI?=
 =?us-ascii?q?xJSv0pd48DaILMmAIn5iD/gj0EpZQX95A9jZmykISyEPlyPNaNObpA6h+iJtqM?=
 =?us-ascii?q?Cz6u/rWAXp5YuAELZSNdRv+xargaaMLeKQhSB5KSpG2ZMI33PH1L8f3FsKgSF0?=
 =?us-ascii?q?azatCagAtTLKTK/Imq9YER8bayBwNMtJ9a483RNNOcnUitzrzL54k+U1BkxBVV?=
 =?us-ascii?q?zgnMGpeMMLL3u8NFPBGEaEKrCGKSfXzMHwZKO2UadQg/lMtx2spTabFFfuMS6e?=
 =?us-ascii?q?lzbyTRCgL+FNgDufPBxfo4y9dhdtCW7+TNPpcBG7Mdl3jSEozr0wnH/FKWkcMT?=
 =?us-ascii?q?1keUNXsrKQ9T9Ygul4G2FZ8nplLOyElzyF4OXCNpkWseVkAiJvmuJe4XQ6zaZV?=
 =?us-ascii?q?7S5eSPx0nivSssBho1W8nuaTzTpnVQJEqixXi4KToUViJaLZ+4FAWHne+hIN6G?=
 =?us-ascii?q?SQCxISqNpkCt3goaZQytfUmaL3KTdC9c/U/MQGC8jVLsKHLGQuMR7zFDHICwsF?=
 =?us-ascii?q?SG3jCWaKrkpRivyDvkeEp5I7rJnq0M4HUK5SXl0zF/UyFEV/AMEFMoVwGDgjlO?=
 =?us-ascii?q?jfxOcM6Gq3qhXcXo1iuYzOTv+UAvKnfDmdjLVJfTMHxrT3KYlVPYr+jQgqRlx7?=
 =?us-ascii?q?gJ7bU3TBQNNKvGU1YhElvUZK7lBxSWo830+jYQSotjtbPveolxo3jENbaP4s8j?=
 =?us-ascii?q?73qwM8L0bDoCo21kw4g9TjiCu5eST0aqy3WNcSQxX1s0x5Hp7ySAFzJVmtnEhg?=
 =?us-ascii?q?cjvJTrlWiZNpb2UtgwjZ798HMv5GTLZYZwcQjdWeYvg03E4U/i6j7UtG4/bVT5?=
 =?us-ascii?q?BlkV1uObeqo2hNxEpGa8QpIqqYcKNK1l14gqOIoz/t2OcsxgMXO0cK9iWVYiFe?=
 =?us-ascii?q?/AQtP6MlbxC14uhl7wDKzz5KYmtKTec2pvts+ms0IeHGxCXlhfoLDEG6NKSzIr?=
 =?us-ascii?q?iQpmzGlMOSWRtk0E8FjEBY+b533N04W0WTUE8rwf2aEBFfcYLnIBteJ/hD8nfS?=
 =?us-ascii?q?cDzG5eDE25kzLZS7GeHlV8eHrqNSiUWhSkJhM40S44wkF4Ow0UeQecvuMrNDzB?=
 =?us-ascii?q?w3+AXtDFyfCbJCfxfd1H8uuc335p56xolQOy8QBS0pOD+7oLzWqxQqjeedUdMe?=
 =?us-ascii?q?ZnYcV5EDcHUsV5v+02R0pXVLRAb/lKozyQWO4iX5ryKaRG3xZdtuaPqOYDt8Dd?=
 =?us-ascii?q?Ct4jQ49e69jluBtt3/IW79ffFlvtnG86tOopeBBPR8TrRntUrY3Y5CSCruG1bG?=
 =?us-ascii?q?DNr9A5HvcYQqZtG8Xm6zT1i7gi0vQsH6Mf6iKa+HhQyuToFR5s3T8z0uL9P1Ky?=
 =?us-ascii?q?ACBxpqp+YO+q96LVkMbpchfTbstgIjJ+m6fleblNK0TDDpYRJMSfUX5+igaLle?=
 =?us-ascii?q?ySxkOuagzncIR4s8w+Px/UNbANlArRDExPKnL6AWF2DIGmFBdgDIu2Bxw2tgLO?=
 =?us-ascii?q?c2xqEkwA7UvFwbLRiPdep0eCpFuc0xARWZJnAgTiIXXVKTxanZ5QesmpAb5TdY?=
 =?us-ascii?q?ltAcheJfvXf9vrfbYTSxSKKstJPZujYhat5gpLd+Z8irAcKaudvlgjHARYPM+l?=
 =?us-ascii?q?mGSzK3CPNAhvBUISRFUPdPhGcpMNAHvowH7lA+AIN2Ar1MBeEWr6itcT1+EWZG?=
 =?us-ascii?q?1zcBS6uE3TofkqGi3bbG0BaaddIpNxlS9N1Bi8AUVWt6bz02q6ikWIHbmHWDV3?=
 =?us-ascii?q?AQZgwU6EAE4AMGi581cufuyJTHQYUKyDNMpf9wFCzRGd0g81r9V3HTglXiTvil?=
 =?us-ascii?q?u/Km0BgUz//21NQfHhllBgwVw+dQi1ttIatybqodpIjHtheMdFjmpyTszuW8LV?=
 =?us-ascii?q?VcwMGScEf3SMLBtGzhQmgH4XQOXoJn1n7SD9IRnhB/ZaJto09DZMiie0Dj93kh?=
 =?us-ascii?q?wqxqAbCzVoas3Vlh5XIHQTq6VtlLFuBivHrJVzB/JZOmspPoP9NVWGAD1oearg?=
 =?us-ascii?q?Jwlkl3Pj/x6p1aLN9E5jkSFGxGpzmHscqxTtNH8cBxCJAIL5F0vHKrS/AMA4SY?=
 =?us-ascii?q?v3Bj4u+n8XTe4T1p9Q7inDg=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AfAADtdv1bh0O0hNFkHgEGBwaBUQkLA?=
 =?us-ascii?q?YEwgjsnmBmBaDmSNYR3gSQDTBIBARgTAYh6IjQJDQEDAQEBAQEBAgETAQEBCA0?=
 =?us-ascii?q?JCCkjDII2JAGCYgMDAQIkCwENAQEeGQEFCQEBGDgDMQEFARwGARIFgxyCAgEEm?=
 =?us-ascii?q?Xo8ih2BbDOCdgEBBYEEAQGGHggSh1CDD4EcF4F/gREzhX0ChzyJKYFulHcJgiC?=
 =?us-ascii?q?DEoR3hwcYiVKHOSyXZAIEAgQFAgUPIYElbIEhTSODPIIbDBcSgziKHAE3PzKBB?=
 =?us-ascii?q?QEBjQ8BAQ?=
X-IPAS-Result: =?us-ascii?q?A0AfAADtdv1bh0O0hNFkHgEGBwaBUQkLAYEwgjsnmBmBaDm?=
 =?us-ascii?q?SNYR3gSQDTBIBARgTAYh6IjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2JAGCY?=
 =?us-ascii?q?gMDAQIkCwENAQEeGQEFCQEBGDgDMQEFARwGARIFgxyCAgEEmXo8ih2BbDOCdgE?=
 =?us-ascii?q?BBYEEAQGGHggSh1CDD4EcF4F/gREzhX0ChzyJKYFulHcJgiCDEoR3hwcYiVKHO?=
 =?us-ascii?q?SyXZAIEAgQFAgUPIYElbIEhTSODPIIbDBcSgziKHAE3PzKBBQEBjQ8BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,287,1539673200"; 
   d="scan'208";a="41757967"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 27 Nov 2018 08:58:54 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1731704AbeK1Dyo (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 27 Nov 2018 22:54:44 -0500
Received: from mail-wm1-f65.google.com ([209.85.128.65]:39820 "EHLO
        mail-wm1-f65.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1731493AbeK1Dyn (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 27 Nov 2018 22:54:43 -0500
Received: by mail-wm1-f65.google.com with SMTP id n133so6219853wmd.4
        for <linux-kernel@vger.kernel.org>; Tue, 27 Nov 2018 08:56:11 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding;
        bh=4s2WHY6CF+7V+5ETRMCx8aRRLenfz3ucdYpRRnO2KsM=;
        b=ie7jabn+eKGrSyU6M1ZrcJxSWuT6cq77fF2R9lUfLQIi8Gr2qJk90uP4rQdAwYc3i/
         BzkjjICxP9uNZ2wir+A+L1ko8NYWBwSA37ftS+H+Bmn3ZEcr0DAJupJUdUY++MRLSAdl
         GOVXtJSg0ysWC871IXVicxLiL+ZxjqXjJddmGFKHXYIAtsZ7/5tihtIoxdg6u6JDgmWg
         FWO4vo+zhbRqj0ebJBVKVL16OatDIs8Xy4oot9zqeDWTgMoQmiHv5WqJrpGree3Dobsg
         ZoTJ2eZeqDWXjB9kJf7uYraVLaqZSZs9L3pdZCmNeVa6ZGWdIaxsoEQbVKRvWxEIoCoN
         EziA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=4s2WHY6CF+7V+5ETRMCx8aRRLenfz3ucdYpRRnO2KsM=;
        b=gc9PUwpZAX0LLlIyI+HFtBeG9Vk/0mXyTWbrFzeraQFUwlJikOplh+tF0AlRT6B/94
         4nIURxZCawBxI2fo/G20tejragtmp+kPfW4ziQWkLt4b+6fOb6Dm9bCdRI1St7H5mdM0
         fqYE/DX+NMtQqllw/8LOJr+B9L/V79vvi7LYuAO+uxe/z3mFUUn58JUkj2sQncvP4gSh
         EeOtp9Aq8h79GU54Eue7ljcKioas0WnrNxIFhBRS4fD4UkDpLkQsFUv8chPsKi9YaZ7D
         z7/qUT2QP4RQ6KBYy+qFtPOEHZULDvf0FpFbly4JjEaNcvKJCfKmE370abnKaqPDch8F
         CY2A==
X-Gm-Message-State: AA+aEWbybRqHCeZg0YyF5XdypUWzmgVCo7m+OJOymsaOUCxDm2VLDuDX
        wZebL1LjzZtkXASwXGaM9jha+w==
X-Google-Smtp-Source: AJdET5conMtQ/SqFrfQKf7PVc7uFAQ/al26Ds5DRdODjlyFRzE6MxacgkfMsqlhDuH9BpluipOVEOw==
X-Received: by 2002:a1c:2304:: with SMTP id j4mr27714121wmj.14.1543337770742;
        Tue, 27 Nov 2018 08:56:10 -0800 (PST)
Received: from andreyknvl0.muc.corp.google.com ([2a00:79e0:15:10:3180:41f8:3010:ff61])
        by smtp.gmail.com with ESMTPSA id k73sm6383099wmd.36.2018.11.27.08.56.09
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Tue, 27 Nov 2018 08:56:09 -0800 (PST)
From: Andrey Konovalov <andreyknvl@google.com>
To: Andrey Ryabinin <aryabinin@virtuozzo.com>,
        Alexander Potapenko <glider@google.com>,
        Dmitry Vyukov <dvyukov@google.com>,
        Catalin Marinas <catalin.marinas@arm.com>,
        Will Deacon <will.deacon@arm.com>,
        Christoph Lameter <cl@linux.com>,
        Andrew Morton <akpm@linux-foundation.org>,
        Mark Rutland <mark.rutland@arm.com>,
        Nick Desaulniers <ndesaulniers@google.com>,
        Marc Zyngier <marc.zyngier@arm.com>,
        Dave Martin <dave.martin@arm.com>,
        Ard Biesheuvel <ard.biesheuvel@linaro.org>,
        "Eric W . Biederman" <ebiederm@xmission.com>,
        Ingo Molnar <mingo@kernel.org>,
        Paul Lawrence <paullawrence@google.com>,
        Geert Uytterhoeven <geert@linux-m68k.org>,
        Arnd Bergmann <arnd@arndb.de>,
        "Kirill A . Shutemov" <kirill.shutemov@linux.intel.com>,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        Kate Stewart <kstewart@linuxfoundation.org>,
        Mike Rapoport <rppt@linux.vnet.ibm.com>,
        kasan-dev@googlegroups.com, linux-doc@vger.kernel.org,
        linux-kernel@vger.kernel.org, linux-arm-kernel@lists.infradead.org,
        linux-sparse@vger.kernel.org, linux-mm@kvack.org,
        linux-kbuild@vger.kernel.org
Cc: Kostya Serebryany <kcc@google.com>,
        Evgeniy Stepanov <eugenis@google.com>,
        Lee Smith <Lee.Smith@arm.com>,
        Ramana Radhakrishnan <Ramana.Radhakrishnan@arm.com>,
        Jacob Bramley <Jacob.Bramley@arm.com>,
        Ruben Ayrapetyan <Ruben.Ayrapetyan@arm.com>,
        Jann Horn <jannh@google.com>,
        Mark Brand <markbrand@google.com>,
        Chintan Pandya <cpandya@codeaurora.org>,
        Vishwath Mohan <vishwath@google.com>,
        Andrey Konovalov <andreyknvl@google.com>
Subject: [PATCH v12 12/25] kasan: preassign tags to objects with ctors or SLAB_TYPESAFE_BY_RCU
Date: Tue, 27 Nov 2018 17:55:30 +0100
Message-Id: <b2c17b6674f1737f981ffa6dca7fdfc059a88435.1543337629.git.andreyknvl@google.com>
X-Mailer: git-send-email 2.20.0.rc0.387.gc7a69e6b6c-goog
In-Reply-To: <cover.1543337629.git.andreyknvl@google.com>
References: <cover.1543337629.git.andreyknvl@google.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

An object constructor can initialize pointers within this objects based on
the address of the object. Since the object address might be tagged, we
need to assign a tag before calling constructor.

The implemented approach is to assign tags to objects with constructors
when a slab is allocated and call constructors once as usual. The
downside is that such object would always have the same tag when it is
reallocated, so we won't catch use-after-frees on it.

Also pressign tags for objects from SLAB_TYPESAFE_BY_RCU caches, since
they can be validy accessed after having been freed.

Reviewed-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
Reviewed-by: Dmitry Vyukov <dvyukov@google.com>
Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
---
 mm/slab.c |  2 +-
 mm/slub.c | 24 ++++++++++++++----------
 2 files changed, 15 insertions(+), 11 deletions(-)

diff --git a/mm/slab.c b/mm/slab.c
index 26f60a22e5e0..27859fb39889 100644
--- a/mm/slab.c
+++ b/mm/slab.c
@@ -2574,7 +2574,7 @@ static void cache_init_objs(struct kmem_cache *cachep,
 
 	for (i = 0; i < cachep->num; i++) {
 		objp = index_to_obj(cachep, page, i);
-		kasan_init_slab_obj(cachep, objp);
+		objp = kasan_init_slab_obj(cachep, objp);
 
 		/* constructor could break poison info */
 		if (DEBUG == 0 && cachep->ctor) {
diff --git a/mm/slub.c b/mm/slub.c
index e739d46600b9..08740c3f3745 100644
--- a/mm/slub.c
+++ b/mm/slub.c
@@ -1451,16 +1451,17 @@ static inline bool slab_free_freelist_hook(struct kmem_cache *s,
 #endif
 }
 
-static void setup_object(struct kmem_cache *s, struct page *page,
+static void *setup_object(struct kmem_cache *s, struct page *page,
 				void *object)
 {
 	setup_object_debug(s, page, object);
-	kasan_init_slab_obj(s, object);
+	object = kasan_init_slab_obj(s, object);
 	if (unlikely(s->ctor)) {
 		kasan_unpoison_object_data(s, object);
 		s->ctor(object);
 		kasan_poison_object_data(s, object);
 	}
+	return object;
 }
 
 /*
@@ -1568,16 +1569,16 @@ static bool shuffle_freelist(struct kmem_cache *s, struct page *page)
 	/* First entry is used as the base of the freelist */
 	cur = next_freelist_entry(s, page, &pos, start, page_limit,
 				freelist_count);
+	cur = setup_object(s, page, cur);
 	page->freelist = cur;
 
 	for (idx = 1; idx < page->objects; idx++) {
-		setup_object(s, page, cur);
 		next = next_freelist_entry(s, page, &pos, start, page_limit,
 			freelist_count);
+		next = setup_object(s, page, next);
 		set_freepointer(s, cur, next);
 		cur = next;
 	}
-	setup_object(s, page, cur);
 	set_freepointer(s, cur, NULL);
 
 	return true;
@@ -1599,7 +1600,7 @@ static struct page *allocate_slab(struct kmem_cache *s, gfp_t flags, int node)
 	struct page *page;
 	struct kmem_cache_order_objects oo = s->oo;
 	gfp_t alloc_gfp;
-	void *start, *p;
+	void *start, *p, *next;
 	int idx, order;
 	bool shuffle;
 
@@ -1651,13 +1652,16 @@ static struct page *allocate_slab(struct kmem_cache *s, gfp_t flags, int node)
 
 	if (!shuffle) {
 		for_each_object_idx(p, idx, s, start, page->objects) {
-			setup_object(s, page, p);
-			if (likely(idx < page->objects))
-				set_freepointer(s, p, p + s->size);
-			else
+			if (likely(idx < page->objects)) {
+				next = p + s->size;
+				next = setup_object(s, page, next);
+				set_freepointer(s, p, next);
+			} else
 				set_freepointer(s, p, NULL);
 		}
-		page->freelist = fixup_red_left(s, start);
+		start = fixup_red_left(s, start);
+		start = setup_object(s, page, start);
+		page->freelist = start;
 	}
 
 	page->inuse = page->objects;
-- 
2.20.0.rc0.387.gc7a69e6b6c-goog

