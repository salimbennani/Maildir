Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:45:24 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 5CCA858042F;
	Thu,  6 Dec 2018 04:26:28 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 04:26:27 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AN3bdDB+C80CGBf9uRHKM819IXTAuvvDOBiVQ1KB8?=
 =?us-ascii?q?1ukeIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CRWRPQNtfWSJCDI27?=
 =?us-ascii?q?bYQPAeUOM+lDr4nlpVYDtgeyCAq2Ce/z0DJEmmP60Ksn2OohCwHG2wkgEsoSvX?=
 =?us-ascii?q?TSsdr1LrkdUOCox6fNyjXDafRW2Snn54jMdRAhv+yHULVqfsrX1EYvDR3Kj1WT?=
 =?us-ascii?q?qYzjITOV0v8As2ec7+pnWuKvj3AopxttrTiow8chk4/EjZ8WxFDc7Sh13po5KN?=
 =?us-ascii?q?miREJmb9OoDoFcuzyZOodqWM8vQmNltD4kxrIcpZK3YC0HxZYjyhHBd/CKdpWE?=
 =?us-ascii?q?7xLmWeqMPTt1gXxodK+8ihqu9EWtxfDwVse33VtPoCdJjsTAumwI2hzd5MiKS+?=
 =?us-ascii?q?Zx80G80jiVzQ/T8PtLIUUsmKrbNZEhxrkwm4INsUTMACD2gl/6jKyIeUU+/Oin?=
 =?us-ascii?q?9eDnbq/hpp+GOI94kgD+MqIwlcyjGek0LBQCUmyB9eih2rDv41f1TKhJg/EqiK?=
 =?us-ascii?q?XUsZLXKdwepqGjAg9V1ogj6wy4DzejyNkYmXgHLFRYeBOIloTpOE/BIOr+Dfih?=
 =?us-ascii?q?h1SgiTBrxv7APrL/GJXANWbDkLj/crZn8UJcyxQ8zcpZ551KDrENOvXzWlX+tN?=
 =?us-ascii?q?DAFB82LxS0w/r7CNV6zo4eXWOPAqyHP6/Ivl6I+/kiI+2NZI8TpTb8JOIp5//o?=
 =?us-ascii?q?jX8lh1AdebOl0ocQaHC9Bv5mOVmWYWLwgtcdFmcHpgo+Q/briF2eSzFTYGy+X6?=
 =?us-ascii?q?Ih5j4hDoKmApzORoSsgLyHwSe6EYdaZmFAClCQD3joc5+IVOsLaCKXOsVhiCAL?=
 =?us-ascii?q?VaC9S4890hGjrA36y715IebO+S0YspTj1N5y5+DIkREy9Dp0D9mS0m2XTmF0mH?=
 =?us-ascii?q?8ISCEy3KxlvUN9zVKD27Big/NEDdxT++9JUgAiOJHG1Ox6C9fyWgHbcteTUlmm?=
 =?us-ascii?q?QM6rATUwTtI33t8PbFxxG9SkjhDfwSWqB6UZmKCMBJwx6qjcxWT+J95hy3ba06?=
 =?us-ascii?q?ksl1omTdFJNWG8gq5/9hLcB4jGk0iCk6aqdKIc3DPC9WuZzGqOul1YXxB0Uanf?=
 =?us-ascii?q?QX8fYU7Wp8zj5kzeV7+uFagnMgxZxMGfMKRKdMPmgU9GRPj5PtTeeHy+m2G3CR?=
 =?us-ascii?q?aMxbOMaY7qdn4Z3CXcDkgEjg8S8WyHNQg4GieuvWbeACZyGlLoZkPm6fN+p2+j?=
 =?us-ascii?q?Tk8o0wGKaFVs2Kev9R4Lm/OQUfMT0agCuCc6tTp0Gk2w39bXC9qGugpgc79QYd?=
 =?us-ascii?q?I74Fdby23ZsxZxMYCnL6BnnlQeaRh4v1vy1xVrDYVNidQqrHIvzAp1NaKY0FNA?=
 =?us-ascii?q?eymE3ZzqPb3XMG3y/BGpa67ZwVze1NeW+qES6PU3sVnjvQepFlY8/HVjydVaz3?=
 =?us-ascii?q?yc5pDSBgoITZ3xSlo39wR9p7zCeCY9453b1HJyPqi0qDPNwM8pC/Y/xRamfNdf?=
 =?us-ascii?q?N72EGRT2E80bAciuNeMrl0KobhICIOBd6qo0M9m6ePuB3a6hJPxgky6+jWRb/I?=
 =?us-ascii?q?B91VqB9iphSuLSw5kJ2fCZ3gudWDf6g1esqcT3mYFCZTEPEWuz0ynkBIhNZqJs?=
 =?us-ascii?q?eYYHE3uhI8qyxt9mnZ7iR2ZY9EK/B1MBwMKpYxuSYEDn0g1KyEsXpmarmS2mwD?=
 =?us-ascii?q?xukjElt7aQ0zbKw+v/ahUHIGlLRG95gFfoIIi0ic0aXUeyYwgokhul+Vj1x6xB?=
 =?us-ascii?q?qKtjKGnTRF9CfzLqIGF6Tquwqr2CbtZP6ZMpqylWUP6wYUuHSr77uBYa1yLjH2?=
 =?us-ascii?q?1DxDE0bT2qu5P5nwBkh2KZNnp8sH3ZecRozxfF+NPcXeJR3iYBRCRgiznYHEK8?=
 =?us-ascii?q?P9qq/dWTjZvDqfqxV2GiVp1Sdynk04WAuTC/5W1rBx2/gv+ylsfmEQg8zS/0yd?=
 =?us-ascii?q?1qWT/Uoxb7Z4nhz766Pv5/fkl0GF/87NJ3G4FknYs3np0Q23kahpOO8HoDkGfz?=
 =?us-ascii?q?N8hb2K3kYHoMQz4L38Da4Az/1EJ/KXKJwprzVm+Bzct5e9m6fmQW1zo+789QCa?=
 =?us-ascii?q?eY9rxEnTZvrVq+ogLcevx9njYbyfsz538WmeAJuAwxziqDBrAeB1VXPSvplx6Q?=
 =?us-ascii?q?9dCxsL1XZHqzcbi3zEd+mNGhDLKYrQ1GVnf2ZIwiHTNu4cVlK13Dzmfz6o7/dd?=
 =?us-ascii?q?nUbNITsACUkhjag+hULpIxiuQFhS59NW3hun0lzvYxjQZy0pGioIiHN2Jt8bql?=
 =?us-ascii?q?Ah5fMz35fcIS9SvrjaZDhcaWxIGvE45lGjUKWpvoUP2pHCgTtfThKwaBDjk8pm?=
 =?us-ascii?q?2HFrrYGA+V8F1moG7XE5C3K3GXI2EUws54SxmaIExfnRoYXDEnnpMiEgCqxcrh?=
 =?us-ascii?q?cFp25zwL5174rAdMxfxsNxXlTmjfowKoYC8uSJeDNBpW8h1C50DNPMyc9O1zGj?=
 =?us-ascii?q?9X/oa7oAyRMGCbZBlIDWIUWkyCHV/jJaKj5d3B8+ieG+q/IOHCYbSIqexCSfiI?=
 =?us-ascii?q?wYij3Zdh/zaJLs+PJGVtD+Un2kpfWnB0A8TYmzISSywOiiLCdcibqA2n+i1wqM?=
 =?us-ascii?q?C//+/mWAbu5YuJFrtTPs9j+xGwgaefKeGQgDx1Jipf1pMJ3XXI0qQQ3EYOiyFy?=
 =?us-ascii?q?cDmgCbQAujDMTKLTma9XDgQXayBpNMtP4KIzwBNNOdPAit7u0r54j/g1C0pKVF?=
 =?us-ascii?q?D7m8GpY9AKLH+5NF/dGEmLM7GGLyXRw87reaO8VaFQjOJMuhKqpDaUCFXjMSqD?=
 =?us-ascii?q?ljXzUxCvMPpBjCWaPBxYpYG8fQxhCWnlTNL6dBK7NMV7giExwb0xnnnKL3ITMS?=
 =?us-ascii?q?Bgc0NRqb2d9T9YgvR6G2Bb8nVpN/WLmyaH4OneMZsWtfprAiJpl+NV+ng6yr1V?=
 =?us-ascii?q?7D1aS/xxgifdstluo1S+mOmV1jVnSAZOqipMhI+TvURtI6PZ9pxBWXbC5B0M7G?=
 =?us-ascii?q?WQBA4Mp9tqEdDvv6FQyt7SlKP8MjtC8tTU/dcCCMjQMs6ILH0hMR+6UALTWSID?=
 =?us-ascii?q?QSSmJCnllkVXkfeT8DXBp4Iro5LtnpsIYqFaTkAoEeEIDQJuG9lUZN9eWj40mL?=
 =?us-ascii?q?iXgdRA3X2ipQHcQsZd9sTIUvOeDO/HJzGegr1JIRAPxOW8ZagWN5HhygRce0R5?=
 =?us-ascii?q?m5qCT0bOTM1OpTNJYQgzr0FAtnN5Szt3k2nsdgqp4XlbMPeunxg/kUMqau0x/T?=
 =?us-ascii?q?Pt5REyL0DLoiIruEArnJPuhjXHNHbOLaO0Fa1bAiHzsQBlLZL/R0B5YAS5mkpM?=
 =?us-ascii?q?PS3BAblWiu0kPUtrkg7HpZxXGbZ4RKhJfBIKjaWcY90s0FJBumOswkoRoaPsD5?=
 =?us-ascii?q?d4mRRiVJm2s3VGk1Zqb8YwDajRIrdZi1ZXm6SCtzOp0eZ3xxURcQJF1WqIe2Yy?=
 =?us-ascii?q?pVAMP78qb36t9/Zvrxafhz9KfmQkXuAv5Plt8xV5c8KBxCGo/7NYI121Me2SNb?=
 =?us-ascii?q?jR727MmNWBX1c2104SjGFK+r951cpleE2RAQRn6bKLHFw7JMzNKAxPJ55X/WLY?=
 =?us-ascii?q?OzSft+rMzIhdNp+4UOvvSLnK/IodnE/sOQ8zA4UKppANF4ehlkTRN9vmKpYM0x?=
 =?us-ascii?q?Br7wPuchHNJe5FMDiKnSwHrtyhwZs/iYBHKncXAGhmMSiq+LvTjgsrhvOZW5Ex?=
 =?us-ascii?q?eHhMGsNOG2g3U4WF02gRlXVNADSt1+sfgkDW4jX9qyjdFjzUf99if+yVYhUqA9?=
 =?us-ascii?q?azr3F30q65jhby9ZHYLnuyYdFjvNDIweAXvZCKD7VTV7Yr9w/kkpRcD1ijTHTC?=
 =?us-ascii?q?F9W4b8zoYpQoadXrEHu8WVGXhDUyQMP8et2qK/7MyS7lSJxI+LSKwCwuL8+6Gy?=
 =?us-ascii?q?8THV8kqOwO/r5UYQwFfop+ZEC4tEI5LaPpZE+xyNOiC0ygMzRTRv9ZhbGzfbpb?=
 =?us-ascii?q?5yM2aOOwjnctGNVyhcq2608JQNkjxleW/va+e4RbVja5Uiheeh/OoS5/jGh8Ku?=
 =?us-ascii?q?s3xfkXxBLOrElaMjaXeegvY2tB6ZV0KkmfLj1VEG0xRxq8hJDf5weql+Qd5SZS?=
 =?us-ascii?q?nNZ81exDrWjwuYLZbDuwWaut75LPvHxkJfsvv6A5CpDuPcKcqNuKnSfDQYbZqB?=
 =?us-ascii?q?GtVC+8CupUncVWLCtEQf5O32Y/NppC8a9A6kd5bM4mIKRIErVk8qqycSZMCS8U?=
 =?us-ascii?q?0D9fSYWNwHoDiOL60LzfwFPYc505ORpBvJhcqtQaVCFybywEo7K7TMPdkGrAAm?=
 =?us-ascii?q?wKJhoDqAhL7yoemYJqOOPo+ozFSNlL0TES6/Z1VDbbU5pl7V32TkmIjlXiDvas?=
 =?us-ascii?q?ieqk2URV1v2omt0aXgNvTEFHwqNVm1EuJbVfL6gLopWMszmGb0r2sWvhjuy8Kx?=
 =?us-ascii?q?0ZzczSak29F5LMr3HxejMT9GdSRoJVznzbU5MInE4xbKctuUUJJYWOeVj37D9i?=
 =?us-ascii?q?wJ5mW/G8VMa21xMmp2sHQyuCDdVMEadlvUjRVTkjZIqk+7v/PJAHa2lc4pCM43?=
 =?us-ascii?q?RelkJzOiq+19IIIsdB+DMdXz5RpR2Su9y9TMAF0shzWcxfauxjsmvwTfsXcKOa?=
 =?us-ascii?q?pGc77/m2kifU?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ATAACUFAlch0O0hNFkHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGBMII7J4wTjXY5lzqBJANMEgEBGBMBh1YiNAkNAQMBAQEBAQECARMBAQE?=
 =?us-ascii?q?IDQkIKSMMgjYkAYJiAwMBAiQLAQ0BAR4ZAQUJAQEYOAMxAQUBHAYBEgWDHIICA?=
 =?us-ascii?q?QSaADyKHYFsM4J2AQEFgQQBAYYgCBKHXYMTgRwXgX+BRIV9Aoc8iTeBb5U7CYI?=
 =?us-ascii?q?kgxSMDhiBXIgFNoceiQ6PVgIEAgQFAgUPIYElbIEhTSODPIIbDBeDSoocATc/M?=
 =?us-ascii?q?oEFAQGKZwEB?=
X-IPAS-Result: =?us-ascii?q?A0ATAACUFAlch0O0hNFkHQEBBQEHBQGBUQgBCwGBMII7J4w?=
 =?us-ascii?q?TjXY5lzqBJANMEgEBGBMBh1YiNAkNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkA?=
 =?us-ascii?q?YJiAwMBAiQLAQ0BAR4ZAQUJAQEYOAMxAQUBHAYBEgWDHIICAQSaADyKHYFsM4J?=
 =?us-ascii?q?2AQEFgQQBAYYgCBKHXYMTgRwXgX+BRIV9Aoc8iTeBb5U7CYIkgxSMDhiBXIgFN?=
 =?us-ascii?q?oceiQ6PVgIEAgQFAgUPIYElbIEhTSODPIIbDBeDSoocATc/MoEFAQGKZwEB?=
X-IronPort-AV: E=Sophos;i="5.56,322,1539673200"; 
   d="scan'208";a="54084971"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 06 Dec 2018 04:26:26 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729761AbeLFMZU (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 6 Dec 2018 07:25:20 -0500
Received: from mail-wm1-f67.google.com ([209.85.128.67]:37912 "EHLO
        mail-wm1-f67.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1729743AbeLFMZS (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 6 Dec 2018 07:25:18 -0500
Received: by mail-wm1-f67.google.com with SMTP id m22so841189wml.3
        for <linux-kernel@vger.kernel.org>; Thu, 06 Dec 2018 04:25:17 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding;
        bh=8uSAA6A1aRTWO16DLBjPQUae1SegzQbJDGVzmV8tpfs=;
        b=tLSUtkLSM4VsoseHSxkk9UlgsSF9LYHyfSyPHzE/hgw9NdIVRYjEYCt2b2sZUlJG/1
         uqDS28//AknGUJ6zk2zY4PKdQ8+4tirjbHwaZwuxUYII8/CJ2BuOvvpkEq/aDfpTbtoA
         VH3gjYgJrXPk8eyVj8GZp51F8r6L+zIZ6ZpfxVzGvB6LVe2umAITfjSip/j218/bx97S
         HEvzXQSP2vxF0z4FWOYeSDWfMGAnX7lb9LTbaJAupapKa+mQu+Pwrsg7gUZRweVO212H
         R6tMZh/eBx1slp1fOaIraS+NDJMvXZ3LH07qR8gRV2FudaCq+whsbKrPssVnGqelpPwL
         B8eA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=8uSAA6A1aRTWO16DLBjPQUae1SegzQbJDGVzmV8tpfs=;
        b=jlPkaMX0SwnMn1bCyWR5/xkWEgQ5cU0gkYnsW4pHj7Il5RjbnApufSDu57xRIh/c+k
         hslmvfXaQtkedxxUqsWqc6wZVbLlZGJ7P9ZJq/zg0l+9kBjqHTHVZozt9yFqu4QTAzqv
         v8KSUxh7rnDGaIqmnQcip9RqS9fD8b3nmpA/ZNNnM3iJ+3WF0ksA7JgjQqI22lT127ju
         qBSkibpyPWioGzWqw+JSOF/iNiruro8ttw2YrxhrVEodN3euOmiJEkF8utbIY5xTuQ23
         SGdHJBL2zPEgBdY2XMc6Vdjy41JqbXKJgoh2vRNJtYYzfn3LSyZzFgKNEn7EWJ7xygHg
         9qyA==
X-Gm-Message-State: AA+aEWYw+cHQfH7dwUAhbM8n0ruFi7FmCVrLisxNVKEAxhCRNnEd/LQ6
        5iiD+yvW009W8fa5pLL3wiIy2g==
X-Google-Smtp-Source: AFSGD/V4zIb54Ou409sQv+ZnuWNPIZMqrE2tacqLuIwacW/LC9rLfpzzJFwYCO48owsIvI7L30/Cmg==
X-Received: by 2002:a1c:4681:: with SMTP id t123mr9124048wma.24.1544099116333;
        Thu, 06 Dec 2018 04:25:16 -0800 (PST)
Received: from andreyknvl0.muc.corp.google.com ([2a00:79e0:15:10:3180:41f8:3010:ff61])
        by smtp.gmail.com with ESMTPSA id j8sm339988wrt.40.2018.12.06.04.25.14
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Thu, 06 Dec 2018 04:25:15 -0800 (PST)
From: Andrey Konovalov <andreyknvl@google.com>
To: Andrey Ryabinin <aryabinin@virtuozzo.com>,
        Alexander Potapenko <glider@google.com>,
        Dmitry Vyukov <dvyukov@google.com>,
        Catalin Marinas <catalin.marinas@arm.com>,
        Will Deacon <will.deacon@arm.com>,
        Christoph Lameter <cl@linux.com>,
        Andrew Morton <akpm@linux-foundation.org>,
        Mark Rutland <mark.rutland@arm.com>,
        Nick Desaulniers <ndesaulniers@google.com>,
        Marc Zyngier <marc.zyngier@arm.com>,
        Dave Martin <dave.martin@arm.com>,
        Ard Biesheuvel <ard.biesheuvel@linaro.org>,
        "Eric W . Biederman" <ebiederm@xmission.com>,
        Ingo Molnar <mingo@kernel.org>,
        Paul Lawrence <paullawrence@google.com>,
        Geert Uytterhoeven <geert@linux-m68k.org>,
        Arnd Bergmann <arnd@arndb.de>,
        "Kirill A . Shutemov" <kirill.shutemov@linux.intel.com>,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        Kate Stewart <kstewart@linuxfoundation.org>,
        Mike Rapoport <rppt@linux.vnet.ibm.com>,
        kasan-dev@googlegroups.com, linux-doc@vger.kernel.org,
        linux-kernel@vger.kernel.org, linux-arm-kernel@lists.infradead.org,
        linux-sparse@vger.kernel.org, linux-mm@kvack.org,
        linux-kbuild@vger.kernel.org
Cc: Kostya Serebryany <kcc@google.com>,
        Evgeniy Stepanov <eugenis@google.com>,
        Lee Smith <Lee.Smith@arm.com>,
        Ramana Radhakrishnan <Ramana.Radhakrishnan@arm.com>,
        Jacob Bramley <Jacob.Bramley@arm.com>,
        Ruben Ayrapetyan <Ruben.Ayrapetyan@arm.com>,
        Jann Horn <jannh@google.com>,
        Mark Brand <markbrand@google.com>,
        Chintan Pandya <cpandya@codeaurora.org>,
        Vishwath Mohan <vishwath@google.com>,
        Andrey Konovalov <andreyknvl@google.com>
Subject: [PATCH v13 17/25] kasan: add bug reporting routines for tag-based mode
Date: Thu,  6 Dec 2018 13:24:35 +0100
Message-Id: <aee6897b1bd077732a315fd84c6b4f234dbfdfcb.1544099024.git.andreyknvl@google.com>
X-Mailer: git-send-email 2.20.0.rc1.387.gf8505762e3-goog
In-Reply-To: <cover.1544099024.git.andreyknvl@google.com>
References: <cover.1544099024.git.andreyknvl@google.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This commit adds rountines, that print tag-based KASAN error reports.
Those are quite similar to generic KASAN, the difference is:

1. The way tag-based KASAN finds the first bad shadow cell (with a
   mismatching tag). Tag-based KASAN compares memory tags from the shadow
   memory to the pointer tag.

2. Tag-based KASAN reports all bugs with the "KASAN: invalid-access"
   header.

Also simplify generic KASAN find_first_bad_addr.

Reviewed-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
Reviewed-by: Dmitry Vyukov <dvyukov@google.com>
Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
---
 mm/kasan/generic_report.c | 16 ++++-------
 mm/kasan/kasan.h          |  5 ++++
 mm/kasan/report.c         | 57 +++++++++++++++++++++------------------
 mm/kasan/tags_report.c    | 18 +++++++++++++
 4 files changed, 59 insertions(+), 37 deletions(-)

diff --git a/mm/kasan/generic_report.c b/mm/kasan/generic_report.c
index 5201d1770700..a4604cceae59 100644
--- a/mm/kasan/generic_report.c
+++ b/mm/kasan/generic_report.c
@@ -33,16 +33,13 @@
 #include "kasan.h"
 #include "../slab.h"
 
-static const void *find_first_bad_addr(const void *addr, size_t size)
+void *find_first_bad_addr(void *addr, size_t size)
 {
-	u8 shadow_val = *(u8 *)kasan_mem_to_shadow(addr);
-	const void *first_bad_addr = addr;
+	void *p = addr;
 
-	while (!shadow_val && first_bad_addr < addr + size) {
-		first_bad_addr += KASAN_SHADOW_SCALE_SIZE;
-		shadow_val = *(u8 *)kasan_mem_to_shadow(first_bad_addr);
-	}
-	return first_bad_addr;
+	while (p < addr + size && !(*(u8 *)kasan_mem_to_shadow(p)))
+		p += KASAN_SHADOW_SCALE_SIZE;
+	return p;
 }
 
 static const char *get_shadow_bug_type(struct kasan_access_info *info)
@@ -50,9 +47,6 @@ static const char *get_shadow_bug_type(struct kasan_access_info *info)
 	const char *bug_type = "unknown-crash";
 	u8 *shadow_addr;
 
-	info->first_bad_addr = find_first_bad_addr(info->access_addr,
-						info->access_size);
-
 	shadow_addr = (u8 *)kasan_mem_to_shadow(info->first_bad_addr);
 
 	/*
diff --git a/mm/kasan/kasan.h b/mm/kasan/kasan.h
index 33cc3b0e017e..82a23b23ff93 100644
--- a/mm/kasan/kasan.h
+++ b/mm/kasan/kasan.h
@@ -119,6 +119,7 @@ void kasan_poison_shadow(const void *address, size_t size, u8 value);
 void check_memory_region(unsigned long addr, size_t size, bool write,
 				unsigned long ret_ip);
 
+void *find_first_bad_addr(void *addr, size_t size);
 const char *get_bug_type(struct kasan_access_info *info);
 
 void kasan_report(unsigned long addr, size_t size,
@@ -139,10 +140,14 @@ static inline void quarantine_remove_cache(struct kmem_cache *cache) { }
 
 #ifdef CONFIG_KASAN_SW_TAGS
 
+void print_tags(u8 addr_tag, const void *addr);
+
 u8 random_tag(void);
 
 #else
 
+static inline void print_tags(u8 addr_tag, const void *addr) { }
+
 static inline u8 random_tag(void)
 {
 	return 0;
diff --git a/mm/kasan/report.c b/mm/kasan/report.c
index 64a74f334c45..214d85035f99 100644
--- a/mm/kasan/report.c
+++ b/mm/kasan/report.c
@@ -64,11 +64,10 @@ static int __init kasan_set_multi_shot(char *str)
 }
 __setup("kasan_multi_shot", kasan_set_multi_shot);
 
-static void print_error_description(struct kasan_access_info *info,
-					const char *bug_type)
+static void print_error_description(struct kasan_access_info *info)
 {
 	pr_err("BUG: KASAN: %s in %pS\n",
-		bug_type, (void *)info->ip);
+		get_bug_type(info), (void *)info->ip);
 	pr_err("%s of size %zu at addr %px by task %s/%d\n",
 		info->is_write ? "Write" : "Read", info->access_size,
 		info->access_addr, current->comm, task_pid_nr(current));
@@ -272,6 +271,8 @@ void kasan_report_invalid_free(void *object, unsigned long ip)
 
 	start_report(&flags);
 	pr_err("BUG: KASAN: double-free or invalid-free in %pS\n", (void *)ip);
+	print_tags(get_tag(object), reset_tag(object));
+	object = reset_tag(object);
 	pr_err("\n");
 	print_address_description(object);
 	pr_err("\n");
@@ -279,41 +280,45 @@ void kasan_report_invalid_free(void *object, unsigned long ip)
 	end_report(&flags);
 }
 
-static void kasan_report_error(struct kasan_access_info *info)
-{
-	unsigned long flags;
-
-	start_report(&flags);
-
-	print_error_description(info, get_bug_type(info));
-	pr_err("\n");
-
-	if (!addr_has_shadow(info->access_addr)) {
-		dump_stack();
-	} else {
-		print_address_description((void *)info->access_addr);
-		pr_err("\n");
-		print_shadow_for_address(info->first_bad_addr);
-	}
-
-	end_report(&flags);
-}
-
 void kasan_report(unsigned long addr, size_t size,
 		bool is_write, unsigned long ip)
 {
 	struct kasan_access_info info;
+	void *tagged_addr;
+	void *untagged_addr;
+	unsigned long flags;
 
 	if (likely(!report_enabled()))
 		return;
 
 	disable_trace_on_warning();
 
-	info.access_addr = (void *)addr;
-	info.first_bad_addr = (void *)addr;
+	tagged_addr = (void *)addr;
+	untagged_addr = reset_tag(tagged_addr);
+
+	info.access_addr = tagged_addr;
+	if (addr_has_shadow(untagged_addr))
+		info.first_bad_addr = find_first_bad_addr(tagged_addr, size);
+	else
+		info.first_bad_addr = untagged_addr;
 	info.access_size = size;
 	info.is_write = is_write;
 	info.ip = ip;
 
-	kasan_report_error(&info);
+	start_report(&flags);
+
+	print_error_description(&info);
+	if (addr_has_shadow(untagged_addr))
+		print_tags(get_tag(tagged_addr), info.first_bad_addr);
+	pr_err("\n");
+
+	if (addr_has_shadow(untagged_addr)) {
+		print_address_description(untagged_addr);
+		pr_err("\n");
+		print_shadow_for_address(info.first_bad_addr);
+	} else {
+		dump_stack();
+	}
+
+	end_report(&flags);
 }
diff --git a/mm/kasan/tags_report.c b/mm/kasan/tags_report.c
index 8af15e87d3bc..573c51d20d09 100644
--- a/mm/kasan/tags_report.c
+++ b/mm/kasan/tags_report.c
@@ -37,3 +37,21 @@ const char *get_bug_type(struct kasan_access_info *info)
 {
 	return "invalid-access";
 }
+
+void *find_first_bad_addr(void *addr, size_t size)
+{
+	u8 tag = get_tag(addr);
+	void *p = reset_tag(addr);
+	void *end = p + size;
+
+	while (p < end && tag == *(u8 *)kasan_mem_to_shadow(p))
+		p += KASAN_SHADOW_SCALE_SIZE;
+	return p;
+}
+
+void print_tags(u8 addr_tag, const void *addr)
+{
+	u8 *shadow = (u8 *)kasan_mem_to_shadow(addr);
+
+	pr_err("Pointer tag: [%02x], memory tag: [%02x]\n", addr_tag, *shadow);
+}
-- 
2.20.0.rc1.387.gf8505762e3-goog

