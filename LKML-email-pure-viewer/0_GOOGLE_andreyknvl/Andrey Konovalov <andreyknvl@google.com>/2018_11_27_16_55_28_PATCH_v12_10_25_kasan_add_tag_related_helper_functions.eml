Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 28 Nov 2018 08:47:22 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from FMSMGA003.fm.intel.com (fmsmga003.fm.intel.com [10.253.24.29])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 984535803C2;
	Tue, 27 Nov 2018 08:56:52 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by FMSMGA003-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 27 Nov 2018 08:56:52 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AXZ/BKRKhdisSNGkewdmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgVL//zrarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZXshfSTFPDI2/?=
 =?us-ascii?q?YYUIDeUBM+lXoYbmp1sWrxazHhWgCeD1xzNUnHL6wbE23uI8Gg/GxgwgGNcOvW?=
 =?us-ascii?q?zIodXzKagSS/66zanVxjvGaPNW3zD96JbSfRAlpvGMQ697fM3LxkkpCgzFlEuf?=
 =?us-ascii?q?qIzmPzOTyOQNt3OW7+VnVeKohG4nrx9+riKzyccrj4nEn4QYwU3H+yVh2Is5O8?=
 =?us-ascii?q?G0RUphbdK5HpZcqTuWO5Z1T88+WW1luSQ3xqUYtZGhYCQG1JEqyhzbZvOZb4SF?=
 =?us-ascii?q?5w/vWeaULDtlmH5ofbyyiwux/ES8z+DxWdS40FhJoydAnNTAqm0B2wDW58iJRP?=
 =?us-ascii?q?tw/1qt1DCS3A7J8O5EO1o7la/DJp4h3LEwkp0TvFzdHi/5hkr2lrWadkY69eiy?=
 =?us-ascii?q?7eTofLHmqoWbN49uhQHyKqUumsqhDuQkKgUCQXSX9OCm2LH+80D1Xq9GguA1n6?=
 =?us-ascii?q?XFqpzXJMYWqra8AwBP04Yj7xi/Dy2h0NQdhXQHKFNFeBSaj4nmIl3OI+73De25?=
 =?us-ascii?q?g1uylDdn3vfGP7PnAprTNHjOi6nhfblj5E5G0gYzzs5Q54hSCr4fJPL/QEjxtM?=
 =?us-ascii?q?bXDhMhKQy73/7nCMlh1oMZQW+PBq6ZMKDMvlOS6eMvPvKBZIsUuDb7Nvgk6OTi?=
 =?us-ascii?q?jX4/mV8BY6ap2YEbZ2y/HvRjO0+Ze2bjgs8dEWcWuQozVOzqh0eDUT5PfXmyWL?=
 =?us-ascii?q?gw5jEmCI28C4fDSZuggLiA3Ce9A51XaXpKClGKEXf0aYqEX+0AZz6VIs9kijYE?=
 =?us-ascii?q?T6SuS5c91RGysw/307hnLu3K9SECtpLj09515+vUlRwp8Tx0DsKd03yCTm1un2?=
 =?us-ascii?q?MIQSM20757oUBn1liD1q14ieRCFdNP//NJThs6NZnEwuNgENDyWgXBftSTRFa8?=
 =?us-ascii?q?WNqmAyo8TtYww98IfkZ8FM+ujhHF3yq2HbAVk6aHC4Az8qLZx3LxPdpyy27a1K?=
 =?us-ascii?q?k9iFkrWshPOneghqJl8wjTBpTGk0OWl6uxcaQc3SjN9HqMzGaUvUFYVhJwXrvB?=
 =?us-ascii?q?XXwFekTWqtH57FvYT7CyEbQnLhdBycmaJ6RXcNLpk0tJSO3jONvEZWKxgHm/BR?=
 =?us-ascii?q?CPyrOIb4rqfmEd0T7ZCEgFlQAT4HmHORI/Bienv2LREjhuGUjzbEPr9Ol0sGm7?=
 =?us-ascii?q?QVMszwGWc01h0KK49QMPivyCVfwfxLIEtz0nqzVvAlm92cnbC96BpwpnYaVdbs?=
 =?us-ascii?q?kx4FZB1WLFqQN9OoasILxlhl4baw53pV/h1w1rCoVclsgntG8qzAt3KaKfzFNB?=
 =?us-ascii?q?dzOZ0YrsOrHNLWny5hSva6/Q2lHRy9uW/qYP6PIlq1Tspg2pF0wi82l53NlRyX?=
 =?us-ascii?q?eT+pLKDA8KW5LrTkk37wR6p63dYiQl/YzU0WNjMKaqvT7Cwd4mH/YlxQu6cNdZ?=
 =?us-ascii?q?M6OEExHyHtYeB8ivLuwqhleoYggFPOBU6K47Iceme+Ga166sOeZqhCimgnhf4I?=
 =?us-ascii?q?BhzkKM8DJxS+7V35of3/6UxAqGVzfmg1envcD6goREZTAUHmqixinoHo9RZqtu?=
 =?us-ascii?q?fYkVDWeiOdG4xtJ7h5T1QX5X6EajB08a2M+uYReSdV390hFK2kQNvHOnnjG0zz?=
 =?us-ascii?q?pqnDEzr6qTxTDBzP7mdBUaJGFLXm5ijVH3LIiwjtAaWlWobgczmBuk40b627ZU?=
 =?us-ascii?q?pKBlI2bPRkdIejD8L3t+XauoqrqCf8lP5YsosCVWSui9YUqWSqXgoxscyC7jG2?=
 =?us-ascii?q?pexDYmdzCloJn5nhp6iH6DI3Z3tnbWZcZwxRLH7tzGWfFRxiYGRDV/iTTPBFiz?=
 =?us-ascii?q?JcOp/daXl5fEqOy+THiuVp5QcSnqy4OPqi276HZuAR2+mfCzh9LmHRI70S/9y9?=
 =?us-ascii?q?llSyHIoAzgbYns0qSwKfhncVVwBF/g98p6HZlzk4sqi5EXw3QahJSV/XwcnGf3?=
 =?us-ascii?q?MNVb37/+bXUXST4Kxd7V/Bbq2El5In2VwIL5U22XwtF9aNmifmMWxiU94thJCK?=
 =?us-ascii?q?iO7bxIhyt1okeiogLXbvhwhTMdyfoo6H4HjOAFogstziOBAr8MGUlUJzDjlxON?=
 =?us-ascii?q?79qmtqVYeH6vcaSs1Ep5hd2hCbCCogJGV3rjdJYtAzRw7tlhP1LWy3L89JvkeN?=
 =?us-ascii?q?bLYNIXtx2UlQrAjudPJJIwkPoKmTRoOWbnsXI5zO47iARk3Yums4ifN2Vt4KW5?=
 =?us-ascii?q?DwZENj3yYsMf4DDsgrxYnsaLxICvBZRhFy4PXJvpS/KoDT0Tue7mNwaIDD0ztH?=
 =?us-ascii?q?ObFaDDEg+Y7Udst2jPHIyzN3GLOHkZys1vSwKHK0xYhAAUQS82npokFg2xwMzh?=
 =?us-ascii?q?cUF55i0e51LiqxtMzP5oOAf7UmvFuAiobTI0QoCFLBVK9gFC+1vVMcuG4+JxBS?=
 =?us-ascii?q?5Y+4OurBeXJmyHfQhIDnwJWk+ZB1DlJLau/sLN8+yZBuq4MvvPbq+Cqe1YV/eU?=
 =?us-ascii?q?252v1pFq8CqLNsWKJnNiFeE02lJfXXBlHMTUgzUOSysKlyLUcs6UvhG89jdsrs?=
 =?us-ascii?q?C49vTrVxni5Y+OC7tULNVu9Aq6gaaFN+6Mmil5LSxU2Y8LxX/N0LIfxkIdizly?=
 =?us-ascii?q?dzmxFrQNrS7NQ7zRmq9UDB4bajl/NMhS76I70QlCJ9Tbis7u1rNjiv41ClFFVU?=
 =?us-ascii?q?Hum82zZMwKJX29O03DBEqRKLuGIjjLydntYaygUb1QkPlUtxqotDmBDk/sJS6D?=
 =?us-ascii?q?mCfpVhy1NeFMjTqWPBhfuIG7bxZsBnLvTNPgah2nLtB3iSc6zqEzhnPPLWQcKy?=
 =?us-ascii?q?Rzc1tRrr2M6iNVmul/G21E7nZ/MeaIgTqW7+nGJZYQqvZrBiV0l+RH4HU10bdV?=
 =?us-ascii?q?7SdEROBrlyvWtNJhv1amkuyXwDp9TBVOsipLhJ6MvUh6OaTW7J9AWXPF/BIL9W?=
 =?us-ascii?q?qRChQKqMFjCt3goK1QztnPlKTuKDZN6d7U/M0cB9TKJ8KDKnYuLR3pGDuHRDcC?=
 =?us-ascii?q?GBetOXvSlgRngfiY93uUqNBuo4L9kZAPTL5dfEI0DO8HDVZ3G5oJJ5IhGnsNlb?=
 =?us-ascii?q?OLhcgE6GD2lB7NTd1XuJPAHqadBfTjJSyxgr5DaB8Fh7j/KNJXfqH+2lB4exFE?=
 =?us-ascii?q?jZnJHFSYCdxTszBiaREcr0JK/3xzCGY03hShIiik/HYXFPj8uxcsiw13eqx5/z?=
 =?us-ascii?q?7w6lM2IBzPrTExlkAqsdz/hHaadzunaO+PXIVSQwb5vkM2NNuvXAdxaUu+kEVv?=
 =?us-ascii?q?MzHsTqhUybBncDYvwCTco5pUBflETeVgaRod2fyNL6Ej1XxYqyO61QlM4u6TTd?=
 =?us-ascii?q?NLkgcwfIHkinVaxwVlJIo8JrTVDK5IyEVAw6yJoymk3/wwxwlYIFwCpifaXScS?=
 =?us-ascii?q?uwQyK6UiLiyktrhp4BaB3SFeZGwFUfYCq+hvsEg6PrLEhwTh2L0LBk2qPvGbKa?=
 =?us-ascii?q?KUoXOIwciET0g5y0cOlkRf5pB51sAsd0fSXEcqmv/ZMh0TPoLwOAdabsdIvCzW?=
 =?us-ascii?q?dDyF9/fcx510Mp+VH/rtC+SJsfBQym6tAgthOo0W8sUHVs2g2V/Va8LuNqIEzz?=
 =?us-ascii?q?0k/gGtL1KAWrABUQiH2B0Grtq/wYJp0I0VcjgHDSN3MCis5rvKuAIuqP6CWt4s?=
 =?us-ascii?q?ZTEdRIRScjp8dde7kGZm9zIIJji63u8DzQGEpXeoqy7RATXxdd9LdPKVfghtD9?=
 =?us-ascii?q?fw8jI6pez+qFjY9d37IGX8PM4q7trO7+wdj5WKEfVZSf96qUiK38FgTmGuG0rG?=
 =?us-ascii?q?DsS4IZP9I900ZMHwDn+lSFG5gD8dQMD2M9KgaKOPhFesDalZvZOHlA0yKdOwDD?=
 =?us-ascii?q?EZFgl9oalX669xfxErZ5s9fA6tslpuNOq4OgjOlp2HWWChYRFbVfZaxOO8L+he?=
 =?us-ascii?q?1SwgRuagzncqCJ03ma3/u20MXpAOiln3jbDrXIlDTSX2HWIXM1HMpDA4k2wnLe?=
 =?us-ascii?q?Yv3uo6xw3gtVgaLiDNdep1ZWgCtNY5UxfaDm97BSIbXViVjc/j6xSw2rkUt39S?=
 =?us-ascii?q?hdtb0u1ttHn4o4/RZy+qVKW3qJLT9S06Yo5i6454LYGrGdeLq5rEgnSLT4LMvx?=
 =?us-ascii?q?KMSjKSE/tch8heJz9eTPBUmGYjf8scttwFoW8wVcp2HbVXD7ErvKziPSB8FTI6?=
 =?us-ascii?q?yS4fSpPGwjoPnqG90b6cnRCVJtBqMxUfuZMHjtYDeyFxZSwaqaC5UJjOjCmPTW?=
 =?us-ascii?q?1PaAMS6xlcoQ4Hnaduce3/ponFVplBz3hRuf0wGi/KEIR4slj2UGebhXDmR/i7?=
 =?us-ascii?q?1e+kxwRfyLTryNZfEBp+D1VNgu9Mkw4rJatxJq04uo/RriTOdEX0pmvhxeKqYl?=
 =?us-ascii?q?5Lxomcc1z+EZqArnL1SDYR0WMbSJUJy3zFE5kW1Q1jZ+JjoFRKPZDjf0PW5CIt?=
 =?us-ascii?q?zIcvGKO3EYivxlA4vTMFTTqrF9ZpFe5rqhTUVSdjbpTtr4/qaLtIRWoF0ZuRsV?=
 =?us-ascii?q?pI2GZqNSmnwJ5bNYkZ6zgARjVeojODuPO9T8pM3cIwBJgJdIQs80zhEb9JbcDC?=
 =?us-ascii?q?60Y9vabinzqAo2gx?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AYAAAydv1bh0O0hNFkHgEGBwaBUQkLA?=
 =?us-ascii?q?YEwgjsnmBmBaDlolkQUgRADTBIBARgTAYh6IjQJDQEDAQEBAQEBAgETAQEBCA0?=
 =?us-ascii?q?JCCkjDII2JAGCYgMDAQIvAQ0BAR4ZAQUJAQEYOAMxAQUBHAYBEgWDHIICAQSZd?=
 =?us-ascii?q?zyKHYIfgnYBAQWBBAEBhh4IEodQgw+BHBeBf4ERM4Iqg1MCgUqFcokFghKUdwm?=
 =?us-ascii?q?CIIMSi34YiVKHOZgQAgQCBAUCBQ8hgSVsgSFNI4M8ghsMF4NKihwBNz8ygQUBA?=
 =?us-ascii?q?Y0PAQE?=
X-IPAS-Result: =?us-ascii?q?A0AYAAAydv1bh0O0hNFkHgEGBwaBUQkLAYEwgjsnmBmBaDl?=
 =?us-ascii?q?olkQUgRADTBIBARgTAYh6IjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2JAGCY?=
 =?us-ascii?q?gMDAQIvAQ0BAR4ZAQUJAQEYOAMxAQUBHAYBEgWDHIICAQSZdzyKHYIfgnYBAQW?=
 =?us-ascii?q?BBAEBhh4IEodQgw+BHBeBf4ERM4Iqg1MCgUqFcokFghKUdwmCIIMSi34YiVKHO?=
 =?us-ascii?q?ZgQAgQCBAUCBQ8hgSVsgSFNI4M8ghsMF4NKihwBNz8ygQUBAY0PAQE?=
X-IronPort-AV: E=Sophos;i="5.56,287,1539673200"; 
   d="scan'208";a="52844486"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 27 Nov 2018 08:56:51 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1731686AbeK1Dyl (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 27 Nov 2018 22:54:41 -0500
Received: from mail-wr1-f68.google.com ([209.85.221.68]:45368 "EHLO
        mail-wr1-f68.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1731672AbeK1Dyk (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 27 Nov 2018 22:54:40 -0500
Received: by mail-wr1-f68.google.com with SMTP id v6so23430567wrr.12
        for <linux-kernel@vger.kernel.org>; Tue, 27 Nov 2018 08:56:08 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding;
        bh=4oAU6JK5SXFQXeBM1Fe+Zgca3Nk1YiOq990k4sZRE+4=;
        b=chHHj6XiLJ1QKKEppmZn3nW3M1nj5ouQtd9MSTUznHKjvgqVF/v4xI9Y1YFsHlbbBq
         CSzpZBkiHVXiwuP2IvcEvmn2l+ACnXU70oPxn7BBA0EFig7Xp5XTEQ2lbPWBUm1TpnWl
         ztrMUYtCo/NZxGswmiCsj1OxlNGSTBWUB0zNlh7A2Vt+iiZz/rU8Un83hj8zK6J0e4Q5
         9fYt35f8iAvFSDW5y+spN/XSXHhfS8Qn/tKymZQal4z1tzvGfnjhmOOp/TEjf97C2QnL
         osfR/x0T+JRZhCfPOwTfvnGCqmtng5ADUgrKmUslv7YfxPGHSUFdSoSk0KfyJUNdkUMw
         tjIA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=4oAU6JK5SXFQXeBM1Fe+Zgca3Nk1YiOq990k4sZRE+4=;
        b=YNb8EmQsa7Rfp/c40RdwPdfXy5n1IEvSYGfgcOqYhbkC2fug9PjckNQYbrFYwLIaFk
         HyS/fsA1qmCHAYseRYuC560Wsxm1+8P2g9S0BuQxxgj3PS5uecHfhXD2TXZXFS4lkBpB
         h0dbvYAG0kgNX7nF06UAHegJj/ZL7AJGU6iFFYgqe9Wo7Ml7wW7v2I6fySQi1kN+PkGe
         ioG8bHxvZ+2J/pPX3YPUDQEbuMNOE42tkMkqKXce5SRSHDA/N63n/L46u7vDDUZUEjkJ
         6fnw/ud6WH5ag0xMcmJOT/nlDPA0gGpFiXvle6sAQbui2o6FKLLKqKWAEcX5gFsec1C/
         qwXA==
X-Gm-Message-State: AA+aEWbsWaUmz3aXx2pfKbJBfOEweXWcURh8rFeWd1NxK7SYh6jUpU0w
        pHrLeJXPfFZyfPxJmdnZ/NsPjQ==
X-Google-Smtp-Source: AFSGD/UiIJUobpt6jmnooRInVxYH9JCQFfF0BEjmP/f3qfSwiz7KnNbDRbiiK84/8RrZcPMtgzZFsA==
X-Received: by 2002:a05:6000:1287:: with SMTP id f7mr29807646wrx.302.1543337767063;
        Tue, 27 Nov 2018 08:56:07 -0800 (PST)
Received: from andreyknvl0.muc.corp.google.com ([2a00:79e0:15:10:3180:41f8:3010:ff61])
        by smtp.gmail.com with ESMTPSA id k73sm6383099wmd.36.2018.11.27.08.56.05
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Tue, 27 Nov 2018 08:56:06 -0800 (PST)
From: Andrey Konovalov <andreyknvl@google.com>
To: Andrey Ryabinin <aryabinin@virtuozzo.com>,
        Alexander Potapenko <glider@google.com>,
        Dmitry Vyukov <dvyukov@google.com>,
        Catalin Marinas <catalin.marinas@arm.com>,
        Will Deacon <will.deacon@arm.com>,
        Christoph Lameter <cl@linux.com>,
        Andrew Morton <akpm@linux-foundation.org>,
        Mark Rutland <mark.rutland@arm.com>,
        Nick Desaulniers <ndesaulniers@google.com>,
        Marc Zyngier <marc.zyngier@arm.com>,
        Dave Martin <dave.martin@arm.com>,
        Ard Biesheuvel <ard.biesheuvel@linaro.org>,
        "Eric W . Biederman" <ebiederm@xmission.com>,
        Ingo Molnar <mingo@kernel.org>,
        Paul Lawrence <paullawrence@google.com>,
        Geert Uytterhoeven <geert@linux-m68k.org>,
        Arnd Bergmann <arnd@arndb.de>,
        "Kirill A . Shutemov" <kirill.shutemov@linux.intel.com>,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        Kate Stewart <kstewart@linuxfoundation.org>,
        Mike Rapoport <rppt@linux.vnet.ibm.com>,
        kasan-dev@googlegroups.com, linux-doc@vger.kernel.org,
        linux-kernel@vger.kernel.org, linux-arm-kernel@lists.infradead.org,
        linux-sparse@vger.kernel.org, linux-mm@kvack.org,
        linux-kbuild@vger.kernel.org
Cc: Kostya Serebryany <kcc@google.com>,
        Evgeniy Stepanov <eugenis@google.com>,
        Lee Smith <Lee.Smith@arm.com>,
        Ramana Radhakrishnan <Ramana.Radhakrishnan@arm.com>,
        Jacob Bramley <Jacob.Bramley@arm.com>,
        Ruben Ayrapetyan <Ruben.Ayrapetyan@arm.com>,
        Jann Horn <jannh@google.com>,
        Mark Brand <markbrand@google.com>,
        Chintan Pandya <cpandya@codeaurora.org>,
        Vishwath Mohan <vishwath@google.com>,
        Andrey Konovalov <andreyknvl@google.com>
Subject: [PATCH v12 10/25] kasan: add tag related helper functions
Date: Tue, 27 Nov 2018 17:55:28 +0100
Message-Id: <643b46fbcd6433a4be18b3a19ce9f3e727618a8d.1543337629.git.andreyknvl@google.com>
X-Mailer: git-send-email 2.20.0.rc0.387.gc7a69e6b6c-goog
In-Reply-To: <cover.1543337629.git.andreyknvl@google.com>
References: <cover.1543337629.git.andreyknvl@google.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This commit adds a few helper functions, that are meant to be used to
work with tags embedded in the top byte of kernel pointers: to set, to
get or to reset the top byte.

Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
---
 arch/arm64/include/asm/kasan.h  |  8 +++++--
 arch/arm64/include/asm/memory.h | 12 +++++++++++
 arch/arm64/mm/kasan_init.c      |  2 ++
 include/linux/kasan.h           | 13 ++++++++++++
 mm/kasan/kasan.h                | 31 +++++++++++++++++++++++++++
 mm/kasan/tags.c                 | 37 +++++++++++++++++++++++++++++++++
 6 files changed, 101 insertions(+), 2 deletions(-)

diff --git a/arch/arm64/include/asm/kasan.h b/arch/arm64/include/asm/kasan.h
index 8758bb008436..b52aacd2c526 100644
--- a/arch/arm64/include/asm/kasan.h
+++ b/arch/arm64/include/asm/kasan.h
@@ -4,12 +4,16 @@
 
 #ifndef __ASSEMBLY__
 
-#ifdef CONFIG_KASAN
-
 #include <linux/linkage.h>
 #include <asm/memory.h>
 #include <asm/pgtable-types.h>
 
+#define arch_kasan_set_tag(addr, tag)	__tag_set(addr, tag)
+#define arch_kasan_reset_tag(addr)	__tag_reset(addr)
+#define arch_kasan_get_tag(addr)	__tag_get(addr)
+
+#ifdef CONFIG_KASAN
+
 /*
  * KASAN_SHADOW_START: beginning of the kernel virtual addresses.
  * KASAN_SHADOW_END: KASAN_SHADOW_START + 1/N of kernel virtual addresses,
diff --git a/arch/arm64/include/asm/memory.h b/arch/arm64/include/asm/memory.h
index e2c9857157f2..83c1366a1233 100644
--- a/arch/arm64/include/asm/memory.h
+++ b/arch/arm64/include/asm/memory.h
@@ -219,6 +219,18 @@ static inline unsigned long kaslr_offset(void)
 #define untagged_addr(addr)	\
 	((__typeof__(addr))sign_extend64((u64)(addr), 55))
 
+#ifdef CONFIG_KASAN_SW_TAGS
+#define __tag_shifted(tag)	((u64)(tag) << 56)
+#define __tag_set(addr, tag)	(__typeof__(addr))( \
+		((u64)(addr) & ~__tag_shifted(0xff)) | __tag_shifted(tag))
+#define __tag_reset(addr)	untagged_addr(addr)
+#define __tag_get(addr)		(__u8)((u64)(addr) >> 56)
+#else
+#define __tag_set(addr, tag)	(addr)
+#define __tag_reset(addr)	(addr)
+#define __tag_get(addr)		0
+#endif
+
 /*
  * Physical vs virtual RAM address space conversion.  These are
  * private definitions which should NOT be used outside memory.h
diff --git a/arch/arm64/mm/kasan_init.c b/arch/arm64/mm/kasan_init.c
index 7a4a0904cac8..1df536bdabcb 100644
--- a/arch/arm64/mm/kasan_init.c
+++ b/arch/arm64/mm/kasan_init.c
@@ -253,6 +253,8 @@ void __init kasan_init(void)
 	memset(kasan_early_shadow_page, KASAN_SHADOW_INIT, PAGE_SIZE);
 	cpu_replace_ttbr1(lm_alias(swapper_pg_dir));
 
+	kasan_init_tags();
+
 	/* At this point kasan is fully initialized. Enable error messages */
 	init_task.kasan_depth = 0;
 	pr_info("KernelAddressSanitizer initialized\n");
diff --git a/include/linux/kasan.h b/include/linux/kasan.h
index c56af24bd3e7..a477ce2abdc9 100644
--- a/include/linux/kasan.h
+++ b/include/linux/kasan.h
@@ -169,6 +169,19 @@ static inline void kasan_cache_shutdown(struct kmem_cache *cache) {}
 
 #define KASAN_SHADOW_INIT 0xFF
 
+void kasan_init_tags(void);
+
+void *kasan_reset_tag(const void *addr);
+
+#else /* CONFIG_KASAN_SW_TAGS */
+
+static inline void kasan_init_tags(void) { }
+
+static inline void *kasan_reset_tag(const void *addr)
+{
+	return (void *)addr;
+}
+
 #endif /* CONFIG_KASAN_SW_TAGS */
 
 #endif /* LINUX_KASAN_H */
diff --git a/mm/kasan/kasan.h b/mm/kasan/kasan.h
index 19b950eaccff..b080b8d92812 100644
--- a/mm/kasan/kasan.h
+++ b/mm/kasan/kasan.h
@@ -8,6 +8,10 @@
 #define KASAN_SHADOW_SCALE_SIZE (1UL << KASAN_SHADOW_SCALE_SHIFT)
 #define KASAN_SHADOW_MASK       (KASAN_SHADOW_SCALE_SIZE - 1)
 
+#define KASAN_TAG_KERNEL	0xFF /* native kernel pointers tag */
+#define KASAN_TAG_INVALID	0xFE /* inaccessible memory tag */
+#define KASAN_TAG_MAX		0xFD /* maximum value for random tags */
+
 #define KASAN_FREE_PAGE         0xFF  /* page was freed */
 #define KASAN_PAGE_REDZONE      0xFE  /* redzone for kmalloc_large allocations */
 #define KASAN_KMALLOC_REDZONE   0xFC  /* redzone inside slub object */
@@ -126,6 +130,33 @@ static inline void quarantine_reduce(void) { }
 static inline void quarantine_remove_cache(struct kmem_cache *cache) { }
 #endif
 
+#ifdef CONFIG_KASAN_SW_TAGS
+
+u8 random_tag(void);
+
+#else
+
+static inline u8 random_tag(void)
+{
+	return 0;
+}
+
+#endif
+
+#ifndef arch_kasan_set_tag
+#define arch_kasan_set_tag(addr, tag)	((void *)(addr))
+#endif
+#ifndef arch_kasan_reset_tag
+#define arch_kasan_reset_tag(addr)	((void *)(addr))
+#endif
+#ifndef arch_kasan_get_tag
+#define arch_kasan_get_tag(addr)	0
+#endif
+
+#define set_tag(addr, tag)	((void *)arch_kasan_set_tag((addr), (tag)))
+#define reset_tag(addr)		((void *)arch_kasan_reset_tag(addr))
+#define get_tag(addr)		arch_kasan_get_tag(addr)
+
 /*
  * Exported functions for interfaces called from assembly or from generated
  * code. Declarations here to avoid warning about missing declarations.
diff --git a/mm/kasan/tags.c b/mm/kasan/tags.c
index 04194923c543..1c4e7ce2e6fe 100644
--- a/mm/kasan/tags.c
+++ b/mm/kasan/tags.c
@@ -38,6 +38,43 @@
 #include "kasan.h"
 #include "../slab.h"
 
+static DEFINE_PER_CPU(u32, prng_state);
+
+void kasan_init_tags(void)
+{
+	int cpu;
+
+	for_each_possible_cpu(cpu)
+		per_cpu(prng_state, cpu) = get_random_u32();
+}
+
+/*
+ * If a preemption happens between this_cpu_read and this_cpu_write, the only
+ * side effect is that we'll give a few allocated in different contexts objects
+ * the same tag. Since tag-based KASAN is meant to be used a probabilistic
+ * bug-detection debug feature, this doesn't have significant negative impact.
+ *
+ * Ideally the tags use strong randomness to prevent any attempts to predict
+ * them during explicit exploit attempts. But strong randomness is expensive,
+ * and we did an intentional trade-off to use a PRNG. This non-atomic RMW
+ * sequence has in fact positive effect, since interrupts that randomly skew
+ * PRNG at unpredictable points do only good.
+ */
+u8 random_tag(void)
+{
+	u32 state = this_cpu_read(prng_state);
+
+	state = 1664525 * state + 1013904223;
+	this_cpu_write(prng_state, state);
+
+	return (u8)(state % (KASAN_TAG_MAX + 1));
+}
+
+void *kasan_reset_tag(const void *addr)
+{
+	return reset_tag(addr);
+}
+
 void check_memory_region(unsigned long addr, size_t size, bool write,
 				unsigned long ret_ip)
 {
-- 
2.20.0.rc0.387.gc7a69e6b6c-goog

