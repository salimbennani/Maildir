Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:45:34 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from FMSMGA003.fm.intel.com (fmsmga003.fm.intel.com [10.253.24.29])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 5D3FB5804F9;
	Thu,  6 Dec 2018 04:30:01 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by FMSMGA003-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 04:30:00 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AmeI1dxNhXwO55Ijxt5El6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0Kfn4r8bcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRsZfWTJcDI2y?=
 =?us-ascii?q?bIUBCOgOPehXoIfyvFsOtRmzCBKwCO7s0DJEmmX70bEm3+knDArI3BYgH9ULsH?=
 =?us-ascii?q?nMsNj1MrodUfqrw6jI0D7NavRW2TH66IjWaB8hpfaMXaxtesfW00YvER7Kjk+O?=
 =?us-ascii?q?po3lPDOV0PoNs2yA4upvUuKvjGEnqwVvrTS12sgsjYzJi5sTx1vZ9it52J44Kc?=
 =?us-ascii?q?OkREN/e9KoDZVduz+AO4drQc4uX3tktSc4x7Eep5K0ZjQGxIgiyhPdb/GIbZSE?=
 =?us-ascii?q?7xf+WOuRJDp0mW5pdbexihqv8kWs1ujxW8ap3FZErSdIl9fBumwQ2xDP78WHRP?=
 =?us-ascii?q?V980a81TuJygvd8PtLIVoumqreM5MhwqA/lp4UsUnbAC/2l1v5jLWMekUn5Oeo?=
 =?us-ascii?q?8eLnbavippOGMI90kA7+Prwvmsy5H+s4LhADU3aH9em4zrHv4EP0TKtQgvErka?=
 =?us-ascii?q?TVrIrWKMUZq6KhBg9ayIcj6xKxDze819QYmGEKLFZEeBKBkojoNEjCIPPmAvel?=
 =?us-ascii?q?hVSjjjNry+nBPrzvBJXCMGLDnaz/fbZy9UFc0hA/zdNB6JJODLEOPvbzVlX2tN?=
 =?us-ascii?q?zCAR81Kxa0zPr/CNVhyoMeXnqCAquYMKPRr1CE/O0uI/SXaY8RuTb9LeUl5vH0?=
 =?us-ascii?q?gX84n18dYbem3Z8NZH+kGfRmJl2TYWDwjdcZDWcKog0+QfTqiFKYUD5Te2y9X6?=
 =?us-ascii?q?Um6jE7FYKpF4HDRo+2jbyF3Se7GIBWZ29cBlCNF3foa5uLW/MWZC2OJc9hlyQO?=
 =?us-ascii?q?VaK9RI85yRGuqAj6xqJlLurT5CIUr5Hj1N9z5+3VkhE/7jh0D8Wb02GQQGB4hG?=
 =?us-ascii?q?IIRzkq3K9hpUxx0EuM0a99g/ZAD9xc++tJUhsmNZ7b1+F1EcvyWgLGfteKUlqm?=
 =?us-ascii?q?WM+pATMqQ9I1wt8OZVt9Gtq4ghDC2SqqH6Eal7iRCJMo9aLc2mD7J9xhxHbeyK?=
 =?us-ascii?q?khk14mT9NMNWK8gK5z7QzTB4/TnEWfmKanbqAc3C/L9GeewmuCpkBYUAhsUarb?=
 =?us-ascii?q?WXATfFfZrdP85knaVb+hFawnMhddyc6FMqZFd8fmjUtYS/v5ONTReWSxm3yuCh?=
 =?us-ascii?q?aOwb+MaInqe2AZ3CjGDEgEkgYT/WuJNAQkByehpX7eAyJqFV71f0zs9ux+omuh?=
 =?us-ascii?q?TkAo1wGKc1Fh172t9xEIn/OcVe0c0qgEuCg7rTV0B0iy39TNBtqEpgpherhcYN?=
 =?us-ascii?q?wn7FdG02LZqxJyPpi6I69+gV4edhx9v1ny2BVvFoVAjc8qoWs2zApzLKKY109B?=
 =?us-ascii?q?dzOY3JzqJr3bMG7y/Aqra67X3FHe382b+qMO6PQ+tlXisxulFksk83V7zdZV12?=
 =?us-ascii?q?GQ6YnNDAoXSZjxSFo49wBmp7HGZSkw/5nb1XlyPqi7rDDD28glC/A4yhm9Zdhf?=
 =?us-ascii?q?NqCEFAjsE8ABA8iuKeoqm0Wmbx4ePeBS8rI0MN2id/ecxKGrO+Ngliq8jWtb+I?=
 =?us-ascii?q?B9zl6M9y1kR+/IwpYJ2e2X0hGGVjf8llihtM/3lJtAZTETGGq/1CflCJRQZq10?=
 =?us-ascii?q?YYYEF2OuL9erydV5gp7nQ2RY+0K7B1MaxM+pfgKfb0b83QJMz0sXu2GomSyiwz?=
 =?us-ascii?q?xyjT4ptKuf0DXSzOv4cBoIJ3BERHNljVfqOoW0i9EaXE61bwkmjhel5ED6x7RF?=
 =?us-ascii?q?q6R7NWXcXUBIfy3uJWF4TqSwrqaCY9JI6J4wsSRXUf6wYFCARr7mvhsa1TjuH2?=
 =?us-ascii?q?9fxDA9ajGrtY/1nx18iGKBMnlzqGDVdt13xRfa/NbcX+Je3iIaRClkjjnaHlq8?=
 =?us-ascii?q?MMOz/dWXlJfDtfqyV3m7WZ1QcinrzIWAuzW95WBxBR2/nvazmsDoEAQg0C/70c?=
 =?us-ascii?q?VqWjvMrBrmfobr0KG6O/p9fkZ0HF/899Z6GoZmn4ownp4Q3mIWhpeU/XoBimrz?=
 =?us-ascii?q?NdRb2aTjbHsCXzILwtjV4BT7101nNH6G24X5VnCFyMt7e9a6en8W2j46781SC6?=
 =?us-ascii?q?eb9r1EkTF1olqltw3RZ/d9kywZyfsv7n4anu4ItBAsziWbHrAdA01YMTbwmBSP?=
 =?us-ascii?q?6tC0tL9Xa3q3cbisyEp+msisDLSDogFfQnn1YJkjEjFr7sVjLl3Mymb85Z/+eN?=
 =?us-ascii?q?nfdt8TshyUkxHdj+laMp4xl/wKhTZ5NmL5p3Eq1+k7jRl215GgoIeHM3lt/L6+?=
 =?us-ascii?q?AhNAKj31YMYT9ivsjKlEmMaWwpuvHo5gGjgQWJvoTPSoEC8dtPj9NgaOFiE8pW?=
 =?us-ascii?q?mfGbbFAQCf70JmpWrVE5+3L3GXOGUZzdJ6SRaGPkNfhwQUXCggkp49CwCn38jh?=
 =?us-ascii?q?cEZ/5jAM6V/0sBpMyuR0NxbhVmfTvhunajAxSJKHNhpZ8hlC51vJMcyZ9u9zHT?=
 =?us-ascii?q?tX/pi/owyWMGCbex5EDWIUWkyHGlDjOKOh5cLb/uicB+q+KebOYLqUpexfUfeI?=
 =?us-ascii?q?2Yyg0o988zmQMcWPO2FoD+cn1UpbQXB5B8PZli0PSiwQiiLNdtObqw26+iFttc?=
 =?us-ascii?q?C/9/LrWA306IuLCrtSN8hv+h+sjaeCMe6QmDh2KTJC2pwQwn/IzaAV3EQOhCF2?=
 =?us-ascii?q?azmtDbMAuDbNTK3Om69XDB0bayJpOMtL9aI82QZNNtDBitPozb51lfo1C1ZDVV?=
 =?us-ascii?q?z8lcClf80KI2ehNFzZAEaHLqiJJTrOw8vve6OzVaVQjPlItx23oTuUCVLjMS+Z?=
 =?us-ascii?q?lzb3VxGjK+VMjCCAMRxauYG9dAttCGf5QNLnbB27LMF4jTkszbIogXPKMHYWMS?=
 =?us-ascii?q?JgfENVsr2Q8SRYj+1jG2xA63ppN/WLlzyF4OnYNJkWt+BmAiB1l+Jc/XQ7xKFZ?=
 =?us-ascii?q?7CBCRPxphiTSqsRirE2hkumK0jBnSgZBqi5XhIKXukVvIaXY+YNGWXbB/RIN63?=
 =?us-ascii?q?2fChUKp9R/DN3vtLtdytzOlKL1NTdD/MjY/coaB8jINs2HNGAtPgbuGD7RX0M5?=
 =?us-ascii?q?SmuCM23Fil0VquCb/HyTr55y/pH2iZMES7laUnQrF+kGF0N3DttEK5ByCHdsuL?=
 =?us-ascii?q?qWnMcO6Xek5CHWWMxCs5bEUbrGDvHuJDuDpbZDYBQMzPXzKoFFcsXX3k1+cEgy?=
 =?us-ascii?q?opXXGE3OFYRBvDx8bQgqiEpK93d6Qys43EezLkuG6WMaEf+y1js/kAp4aP9loD?=
 =?us-ascii?q?zl/14zJ1yMoSIqkU84gv3smzXXezn0euP4YoBSD2LYukE6NZWzFxl0aQn0kUFt?=
 =?us-ascii?q?PzDCb7tLiv1rcmU9zEf3uYFOAuJbVa0MRBYVyO2afb182lB0riSh2F8B7uzAX9?=
 =?us-ascii?q?8qvQ0ma5Oz51dHwR5kapZhLK/IIYJNz15NlueAuTKu2uktwQgYYUEX/zXWMAsB?=
 =?us-ascii?q?ok9ADKQ6IyOu8qQ47AWYmH1ZZXQIXvwmivtw8wU2POHWi2rG0rVAYmy8LOWCK6?=
 =?us-ascii?q?WYtnLb3ZqOTl4r314MkUhI56Ne3sAkfE6ZEUsoye3VXzEAL8GKGxBTYMtf7jCH?=
 =?us-ascii?q?eC+UuqPf0JR6PoinPunySKmFs6NCxgqIFRgkV6EF9NgAGNH43EjGIIHiJaQZyB?=
 =?us-ascii?q?MF7R7uYl6CCaINMDuRnH8tosykzJJqw4RZbmUUG2k7OyS6/bbauxEnhNKHXdE/?=
 =?us-ascii?q?eHBcWZELYDZ+EuCgmiURgDwGRBO23+4U0g2L6XW08inaDTTwYsBmTOeRZAh3Cd?=
 =?us-ascii?q?awvz449v7ywX/R/ZKWAmb+M9148ovK6OUVoL6EBulSQL07tF3Tzc0Qf3W3Vybr?=
 =?us-ascii?q?GMGvKp77ZsF4ddXpDnKzTUayjTk4Z8j2O9mpI+6DhgS+Ac57vYSBwHgeJNOhGy?=
 =?us-ascii?q?seHBpuqudLsK1xaBcfS546ZwP48gFgZ6/5Jx2XhJHmanyrJXN8QuNQyOy8YfQD?=
 =?us-ascii?q?xjAqYsez0n0sRNc2wr/zuQQuRYsLihWW7L7lL7JeTDT+H3tDMU2bpisjlmxlcP?=
 =?us-ascii?q?0y3/syxRTWmV0dNS2bMu1vdGFA+do7AAXWaVpsB2VwZEWbhIqGwge2w7Ub+WMJ?=
 =?us-ascii?q?kMxZ3u5FmHz/uILPbjWxXqCitZTStWwnd9dw5+VSOJDuavCauYzXhCCXGJrLrg?=
 =?us-ascii?q?CaWTSmP/5bnMVALiVFRvVBhWAiP4oBo4UXrQIUV8Qzb4ZGEK40oaq2IW5+FTYO?=
 =?us-ascii?q?5SsYUZ6QmiIEj/v62rHf0ByXdcJmeB8Nq5xEx9cQTQZ5ZSQRoKKsTYLLj3TCQW?=
 =?us-ascii?q?8OZE8X7AJR9EcMkYRYYO/o+szLQYVKxjoQpOh7FmPPF5915x74R3uQjFzQVvqs?=
 =?us-ascii?q?iaqq0BhUwfaq1cMUHFZ7CE5A16NfjE5tK7xtLaQUlorLqSOTM0L8snjkxOavKB?=
 =?us-ascii?q?9W08KQP1n5CpfV8HHkWzcH9FUKSoJVjnLSD5Ifl0x+cqlv7FFNJp22P0P7zz86?=
 =?us-ascii?q?zo9qWb6iWoTjw1cjsGZDRC23Et5NI/9pvUiRWzB/ZZ2v7pL/NMZ8WGhVrbSbp0?=
 =?us-ascii?q?1UgQ1ONCi+15NYLN8FtjcKUCJCsDabot+aR8pE1st7SZQLJ4Es6D/GBKpYNc3J?=
 =?us-ascii?q?8DUNsbv1xyqcomhkvQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AXAADQFAlch0O0hNFkHgEGBwaBUQkLA?=
 =?us-ascii?q?YEwgjsnmgk5aJZSFIEQA0wSAQEYEwGHViI0CQ0BAwEBAQEBAQIBEwEBAQgNCQg?=
 =?us-ascii?q?pIwyCNiQBgmIDAwECLwENAQEeGQEFCQEBGDgDMQEFARwGARIFgxyCAgEEmgA8i?=
 =?us-ascii?q?h2CH4J2AQEFgQQBAYYgCBKHXYMTgRwXgX+BETOCKoNTAoFKhXKJE4ITlTsJgiS?=
 =?us-ascii?q?DFIwOGIlhh1SJDo9WAgQCBAUCBQ8hgSVsgSFNI4M8ghsMF4NKihwBNz8ygQUBA?=
 =?us-ascii?q?YpnAQE?=
X-IPAS-Result: =?us-ascii?q?A0AXAADQFAlch0O0hNFkHgEGBwaBUQkLAYEwgjsnmgk5aJZ?=
 =?us-ascii?q?SFIEQA0wSAQEYEwGHViI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmIDA?=
 =?us-ascii?q?wECLwENAQEeGQEFCQEBGDgDMQEFARwGARIFgxyCAgEEmgA8ih2CH4J2AQEFgQQ?=
 =?us-ascii?q?BAYYgCBKHXYMTgRwXgX+BETOCKoNTAoFKhXKJE4ITlTsJgiSDFIwOGIlhh1SJD?=
 =?us-ascii?q?o9WAgQCBAUCBQ8hgSVsgSFNI4M8ghsMF4NKihwBNz8ygQUBAYpnAQE?=
X-IronPort-AV: E=Sophos;i="5.56,322,1539673200"; 
   d="scan'208";a="54795994"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 06 Dec 2018 04:29:59 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729780AbeLFM0z (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 6 Dec 2018 07:26:55 -0500
Received: from mail-wr1-f65.google.com ([209.85.221.65]:40363 "EHLO
        mail-wr1-f65.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1729609AbeLFMZH (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 6 Dec 2018 07:25:07 -0500
Received: by mail-wr1-f65.google.com with SMTP id p4so287185wrt.7
        for <linux-kernel@vger.kernel.org>; Thu, 06 Dec 2018 04:25:05 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding;
        bh=qsCjCKV+q57Vg4Qo+ex38n8fMkQGTNd9MzBlJ42c62w=;
        b=lYPWD4dzXCyGlWApicPbPWrOJcyzUAMrHRa9ML+WypDuXdVkzJ/cNmx3Tj3z5kn0X+
         wXsJE/+j+Upc/1yIDjCHMrh4af5GeudR6utpq6u2ci47XkTpdttHYOChrnJgRCp1Jes2
         estwO/nvoxmr4u9CJvAs4fwDMRhOR3SASD46MBoLNGjCKdYhlnqD4Qy52vO72QuyB+Fb
         jiSB4eJh3TYn8dAVPZx5dk/WDuwIDlyfcLXcTABmAqAcpqSsx3o3o9xSpKnO97j6yKsd
         ROuu+YVoBACV0QzThJXynS8N/eIMhCvtBaD5xvna4tCWj53zdpp907T0luqWbFsjQUj8
         NWdA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=qsCjCKV+q57Vg4Qo+ex38n8fMkQGTNd9MzBlJ42c62w=;
        b=nNhhA4u7tJqB7EfAiTqHPWfiaJ29NaGU9HqcwFcNnCF9zj2UCVBbKCoz7KlzaQU0yQ
         X+PiaHRMdnsq7QXMUGEpKY0wVQSD11zMuUgxox081fPBvPjcpKDzD+GzOasW7sOb2ZaN
         p5qu/x/85N9QJxK/U4AV2OdLvhpLW/9heR1jWPqj1IdYxPzTVbL+Wv2egiIbzVUW19Ww
         a1ppcqWi+kOyRNWKMD/qp3Z0FTa31qSSEKeR6N0SLwkV2mpNIK4i8eW/1r5hMkP3x1x5
         3opL8mfSU9ngYAUOkRVy4kRSzsg50NLzr1QhNMTZEtklcirFZy65FGzG56hHHbvliU5E
         afBQ==
X-Gm-Message-State: AA+aEWb9bcWAlCj4zvtH9ECCSC021nWfuB1et5x9xu8N5SBdMa4qm4st
        TvNhSa0AKJgLEK8io/xbVVsHUQ==
X-Google-Smtp-Source: AFSGD/XUku20Jyax7BJye38HG84DVpktJbYsI3QLS0+xkAhyhZ+Y+sA1HXilshs7C7kohJO9GetxgA==
X-Received: by 2002:adf:9591:: with SMTP id p17mr26240808wrp.224.1544099104494;
        Thu, 06 Dec 2018 04:25:04 -0800 (PST)
Received: from andreyknvl0.muc.corp.google.com ([2a00:79e0:15:10:3180:41f8:3010:ff61])
        by smtp.gmail.com with ESMTPSA id j8sm339988wrt.40.2018.12.06.04.25.02
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Thu, 06 Dec 2018 04:25:03 -0800 (PST)
From: Andrey Konovalov <andreyknvl@google.com>
To: Andrey Ryabinin <aryabinin@virtuozzo.com>,
        Alexander Potapenko <glider@google.com>,
        Dmitry Vyukov <dvyukov@google.com>,
        Catalin Marinas <catalin.marinas@arm.com>,
        Will Deacon <will.deacon@arm.com>,
        Christoph Lameter <cl@linux.com>,
        Andrew Morton <akpm@linux-foundation.org>,
        Mark Rutland <mark.rutland@arm.com>,
        Nick Desaulniers <ndesaulniers@google.com>,
        Marc Zyngier <marc.zyngier@arm.com>,
        Dave Martin <dave.martin@arm.com>,
        Ard Biesheuvel <ard.biesheuvel@linaro.org>,
        "Eric W . Biederman" <ebiederm@xmission.com>,
        Ingo Molnar <mingo@kernel.org>,
        Paul Lawrence <paullawrence@google.com>,
        Geert Uytterhoeven <geert@linux-m68k.org>,
        Arnd Bergmann <arnd@arndb.de>,
        "Kirill A . Shutemov" <kirill.shutemov@linux.intel.com>,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        Kate Stewart <kstewart@linuxfoundation.org>,
        Mike Rapoport <rppt@linux.vnet.ibm.com>,
        kasan-dev@googlegroups.com, linux-doc@vger.kernel.org,
        linux-kernel@vger.kernel.org, linux-arm-kernel@lists.infradead.org,
        linux-sparse@vger.kernel.org, linux-mm@kvack.org,
        linux-kbuild@vger.kernel.org
Cc: Kostya Serebryany <kcc@google.com>,
        Evgeniy Stepanov <eugenis@google.com>,
        Lee Smith <Lee.Smith@arm.com>,
        Ramana Radhakrishnan <Ramana.Radhakrishnan@arm.com>,
        Jacob Bramley <Jacob.Bramley@arm.com>,
        Ruben Ayrapetyan <Ruben.Ayrapetyan@arm.com>,
        Jann Horn <jannh@google.com>,
        Mark Brand <markbrand@google.com>,
        Chintan Pandya <cpandya@codeaurora.org>,
        Vishwath Mohan <vishwath@google.com>,
        Andrey Konovalov <andreyknvl@google.com>
Subject: [PATCH v13 10/25] kasan: add tag related helper functions
Date: Thu,  6 Dec 2018 13:24:28 +0100
Message-Id: <f6c6437bb8e143bc44f42c3c259c62e734be7935.1544099024.git.andreyknvl@google.com>
X-Mailer: git-send-email 2.20.0.rc1.387.gf8505762e3-goog
In-Reply-To: <cover.1544099024.git.andreyknvl@google.com>
References: <cover.1544099024.git.andreyknvl@google.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This commit adds a few helper functions, that are meant to be used to
work with tags embedded in the top byte of kernel pointers: to set, to
get or to reset the top byte.

Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
---
 arch/arm64/include/asm/kasan.h  |  8 +++++--
 arch/arm64/include/asm/memory.h | 12 +++++++++++
 arch/arm64/mm/kasan_init.c      |  2 ++
 include/linux/kasan.h           | 13 ++++++++++++
 mm/kasan/kasan.h                | 31 +++++++++++++++++++++++++++
 mm/kasan/tags.c                 | 37 +++++++++++++++++++++++++++++++++
 6 files changed, 101 insertions(+), 2 deletions(-)

diff --git a/arch/arm64/include/asm/kasan.h b/arch/arm64/include/asm/kasan.h
index 8758bb008436..b52aacd2c526 100644
--- a/arch/arm64/include/asm/kasan.h
+++ b/arch/arm64/include/asm/kasan.h
@@ -4,12 +4,16 @@
 
 #ifndef __ASSEMBLY__
 
-#ifdef CONFIG_KASAN
-
 #include <linux/linkage.h>
 #include <asm/memory.h>
 #include <asm/pgtable-types.h>
 
+#define arch_kasan_set_tag(addr, tag)	__tag_set(addr, tag)
+#define arch_kasan_reset_tag(addr)	__tag_reset(addr)
+#define arch_kasan_get_tag(addr)	__tag_get(addr)
+
+#ifdef CONFIG_KASAN
+
 /*
  * KASAN_SHADOW_START: beginning of the kernel virtual addresses.
  * KASAN_SHADOW_END: KASAN_SHADOW_START + 1/N of kernel virtual addresses,
diff --git a/arch/arm64/include/asm/memory.h b/arch/arm64/include/asm/memory.h
index e2c9857157f2..83c1366a1233 100644
--- a/arch/arm64/include/asm/memory.h
+++ b/arch/arm64/include/asm/memory.h
@@ -219,6 +219,18 @@ static inline unsigned long kaslr_offset(void)
 #define untagged_addr(addr)	\
 	((__typeof__(addr))sign_extend64((u64)(addr), 55))
 
+#ifdef CONFIG_KASAN_SW_TAGS
+#define __tag_shifted(tag)	((u64)(tag) << 56)
+#define __tag_set(addr, tag)	(__typeof__(addr))( \
+		((u64)(addr) & ~__tag_shifted(0xff)) | __tag_shifted(tag))
+#define __tag_reset(addr)	untagged_addr(addr)
+#define __tag_get(addr)		(__u8)((u64)(addr) >> 56)
+#else
+#define __tag_set(addr, tag)	(addr)
+#define __tag_reset(addr)	(addr)
+#define __tag_get(addr)		0
+#endif
+
 /*
  * Physical vs virtual RAM address space conversion.  These are
  * private definitions which should NOT be used outside memory.h
diff --git a/arch/arm64/mm/kasan_init.c b/arch/arm64/mm/kasan_init.c
index 7a4a0904cac8..1df536bdabcb 100644
--- a/arch/arm64/mm/kasan_init.c
+++ b/arch/arm64/mm/kasan_init.c
@@ -253,6 +253,8 @@ void __init kasan_init(void)
 	memset(kasan_early_shadow_page, KASAN_SHADOW_INIT, PAGE_SIZE);
 	cpu_replace_ttbr1(lm_alias(swapper_pg_dir));
 
+	kasan_init_tags();
+
 	/* At this point kasan is fully initialized. Enable error messages */
 	init_task.kasan_depth = 0;
 	pr_info("KernelAddressSanitizer initialized\n");
diff --git a/include/linux/kasan.h b/include/linux/kasan.h
index c56af24bd3e7..a477ce2abdc9 100644
--- a/include/linux/kasan.h
+++ b/include/linux/kasan.h
@@ -169,6 +169,19 @@ static inline void kasan_cache_shutdown(struct kmem_cache *cache) {}
 
 #define KASAN_SHADOW_INIT 0xFF
 
+void kasan_init_tags(void);
+
+void *kasan_reset_tag(const void *addr);
+
+#else /* CONFIG_KASAN_SW_TAGS */
+
+static inline void kasan_init_tags(void) { }
+
+static inline void *kasan_reset_tag(const void *addr)
+{
+	return (void *)addr;
+}
+
 #endif /* CONFIG_KASAN_SW_TAGS */
 
 #endif /* LINUX_KASAN_H */
diff --git a/mm/kasan/kasan.h b/mm/kasan/kasan.h
index 19b950eaccff..b080b8d92812 100644
--- a/mm/kasan/kasan.h
+++ b/mm/kasan/kasan.h
@@ -8,6 +8,10 @@
 #define KASAN_SHADOW_SCALE_SIZE (1UL << KASAN_SHADOW_SCALE_SHIFT)
 #define KASAN_SHADOW_MASK       (KASAN_SHADOW_SCALE_SIZE - 1)
 
+#define KASAN_TAG_KERNEL	0xFF /* native kernel pointers tag */
+#define KASAN_TAG_INVALID	0xFE /* inaccessible memory tag */
+#define KASAN_TAG_MAX		0xFD /* maximum value for random tags */
+
 #define KASAN_FREE_PAGE         0xFF  /* page was freed */
 #define KASAN_PAGE_REDZONE      0xFE  /* redzone for kmalloc_large allocations */
 #define KASAN_KMALLOC_REDZONE   0xFC  /* redzone inside slub object */
@@ -126,6 +130,33 @@ static inline void quarantine_reduce(void) { }
 static inline void quarantine_remove_cache(struct kmem_cache *cache) { }
 #endif
 
+#ifdef CONFIG_KASAN_SW_TAGS
+
+u8 random_tag(void);
+
+#else
+
+static inline u8 random_tag(void)
+{
+	return 0;
+}
+
+#endif
+
+#ifndef arch_kasan_set_tag
+#define arch_kasan_set_tag(addr, tag)	((void *)(addr))
+#endif
+#ifndef arch_kasan_reset_tag
+#define arch_kasan_reset_tag(addr)	((void *)(addr))
+#endif
+#ifndef arch_kasan_get_tag
+#define arch_kasan_get_tag(addr)	0
+#endif
+
+#define set_tag(addr, tag)	((void *)arch_kasan_set_tag((addr), (tag)))
+#define reset_tag(addr)		((void *)arch_kasan_reset_tag(addr))
+#define get_tag(addr)		arch_kasan_get_tag(addr)
+
 /*
  * Exported functions for interfaces called from assembly or from generated
  * code. Declarations here to avoid warning about missing declarations.
diff --git a/mm/kasan/tags.c b/mm/kasan/tags.c
index 04194923c543..1c4e7ce2e6fe 100644
--- a/mm/kasan/tags.c
+++ b/mm/kasan/tags.c
@@ -38,6 +38,43 @@
 #include "kasan.h"
 #include "../slab.h"
 
+static DEFINE_PER_CPU(u32, prng_state);
+
+void kasan_init_tags(void)
+{
+	int cpu;
+
+	for_each_possible_cpu(cpu)
+		per_cpu(prng_state, cpu) = get_random_u32();
+}
+
+/*
+ * If a preemption happens between this_cpu_read and this_cpu_write, the only
+ * side effect is that we'll give a few allocated in different contexts objects
+ * the same tag. Since tag-based KASAN is meant to be used a probabilistic
+ * bug-detection debug feature, this doesn't have significant negative impact.
+ *
+ * Ideally the tags use strong randomness to prevent any attempts to predict
+ * them during explicit exploit attempts. But strong randomness is expensive,
+ * and we did an intentional trade-off to use a PRNG. This non-atomic RMW
+ * sequence has in fact positive effect, since interrupts that randomly skew
+ * PRNG at unpredictable points do only good.
+ */
+u8 random_tag(void)
+{
+	u32 state = this_cpu_read(prng_state);
+
+	state = 1664525 * state + 1013904223;
+	this_cpu_write(prng_state, state);
+
+	return (u8)(state % (KASAN_TAG_MAX + 1));
+}
+
+void *kasan_reset_tag(const void *addr)
+{
+	return reset_tag(addr);
+}
+
 void check_memory_region(unsigned long addr, size_t size, bool write,
 				unsigned long ret_ip)
 {
-- 
2.20.0.rc1.387.gf8505762e3-goog

