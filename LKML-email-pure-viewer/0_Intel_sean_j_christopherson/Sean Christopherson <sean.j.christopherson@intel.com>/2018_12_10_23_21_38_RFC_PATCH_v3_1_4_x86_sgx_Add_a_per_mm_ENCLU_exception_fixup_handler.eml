Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 11 Dec 2018 08:45:04 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id CD98A5807A2;
	Mon, 10 Dec 2018 15:25:11 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 10 Dec 2018 15:25:11 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Ahl2oBR2TP3Y+Eee5smDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segeK/jxwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJBUMhPSiJPDICy?=
 =?us-ascii?q?YYwNAOoPMulWoJL9p0MMoBalGQWhB/nixiNSi3PqwaE31fkqHwHc3AwnGtIDqG?=
 =?us-ascii?q?nao8vvO6cUTOu40qnIzS/Cb/NNxTf975DIchA/rvGWRrJwdszRwlQoGgPekFqf?=
 =?us-ascii?q?s4rlMymX1ugXr2eb7/BgVeO0i247rAFxujivydk2ionSgYIVzEvJ9SR/wIYpO9?=
 =?us-ascii?q?K4TFR3bsKjEJtVriyXMZZ9TMA6Q2xwpio21rkLtYSmcCUE1pgr3QPTZv+bf4SS?=
 =?us-ascii?q?4x/uVv6dLSp8iX57Yr6yhxa//VKgx+HiTMW4zUhGojZDn9LRrH4CzQbT5dKCSv?=
 =?us-ascii?q?Zl/keuxzKP1wfL5+FaLkA7i7DbJ4QiwrEujJoTt1rMHivslEXxlq+WeV0o+umu?=
 =?us-ascii?q?6+v5frXrvoGQO5Nwhw3kL6gjlNKzDf4lPgUNQ2SX4+Wx2b/78U38WrpKj/k2kq?=
 =?us-ascii?q?fDsJDdIMQWvqq5Aw5T0oY+5BezFjSm38oCnXkBMl1FfAuLj4/nOlHIPv/4F+yy?=
 =?us-ascii?q?g0qjkDh13fDKJL7hDYvXLnjFjrjheaxx60lGyAo81dxf/Y5bCqkdIPLvXU/8rN?=
 =?us-ascii?q?jYDh46MwOq2ermB8h925gaWWKOBK+ZLazTvUWJ5uIpP+mDeosVtCzhJPgi4v7k?=
 =?us-ascii?q?lWU5lkMFfam1wZsXb2i1HvR8LEWYfXrjmNABHX0KvgojVuPqjlKCXCVXZ3azWa?=
 =?us-ascii?q?I8+z46BJinDYfFWoCinriB0D2nEZ1RY2BMEkqMHmvwd4WYR/cMbzqfIs1mkjMa?=
 =?us-ascii?q?T7ShSIgh1ReotA/90LdnKuvU+isFtZPsztR15uvTlQ0s+jxwFciSz2aNT2RslG?=
 =?us-ascii?q?MSWzA2xLx/oVB6ylqby6d4mPxYFdtQ5/9TSAc1L5zcwvd+C9DzXALBY9iIREyn?=
 =?us-ascii?q?QtWgHTE+UNYxz8USbEZ6HtWolgrD0DayA78Ji7yLA4Q58qHG0Hj3Pcp9z3fG27?=
 =?us-ascii?q?Mnj1kpWcZPMWymhqhi9wncHYLJkkOZl7q0eqQYxiLC6GCDzW+WtkFCTAFwSbnF?=
 =?us-ascii?q?XWwYZkbOsNv2/F3CQKG0BbQnKARBz9WCJbVMatHuiVVGR/LjONDFbmK1mmewAw?=
 =?us-ascii?q?uIx7yWYIrrfWUdwDvSCEwenw8P+naGMBA0Bj29rGLGEDxuCVXvblvx/uZktnO0?=
 =?us-ascii?q?UFU4zwGQYE1nzLq65BgViOeYS/MS2LIEpSggpy91HFa7w9LZFd6AqxB9c6VbZN?=
 =?us-ascii?q?M3+E1H2n7BtwxhIpygKLhvhkIfcwRyuEPuyxV3C4Vancg2tn8qyxByKaaZ0FNH?=
 =?us-ascii?q?eDOVxpTwOrzRKmnv8xGjca/W2lfC0NmI/qcD8ug3q1LmvAuxDEot721n08VJ03?=
 =?us-ascii?q?ub/pjFFg4SXoz+U0kp9xl2varVYjQg6IzO031sMq60siHZ1tItBeslzAugfthF?=
 =?us-ascii?q?PKOFEg/yD9MVB8y0JOM2nFipawoOPPpO+64sI8Oma/yG1barPeZ9hj6pkX5L4Y?=
 =?us-ascii?q?F90k2W8Sp8RfXF35IEw/GewwuGWC3wjFanssDrh49EYSseEXa4ySjhHIRRfLF9?=
 =?us-ascii?q?fZ4XCWeyJM263s9+h5/xVHFC7l6sGlQG1NWveRWMdVz93BRc2lgNrnyjhCS30S?=
 =?us-ascii?q?Z0kzYvrqeE2CzOwuLidAcIO2JRRWlii0vsLpawj9wAQEeoaA0pngO/5Unm36hb?=
 =?us-ascii?q?uLh/L27LTEZIfij6NWFjXrGrtrqfZc5C85cosSRRUOShblGWUL/9ox0G0yz9G2?=
 =?us-ascii?q?tS3iw0dzavup/hhRx1lHqdLGpvrHreYcxwxw3Q5MbfRf5S2ToKXjJ4hiPUBli/?=
 =?us-ascii?q?Ptmp+8ubl5HYv+C6VmKhUIBTcCbxwYOBsiu7+XNlARmlk/+vnd3nFBAw0TXn2N?=
 =?us-ascii?q?lySSXIsBH8b5Hr1qugNuJrZEtoBF7668dhHoF+k40whIwf2HQAh5WV+2YHnnn3?=
 =?us-ascii?q?MdlBxa3+a38NTyYRw9HJ+AjlxFFjLnWRyoL6THqdw9FtZ9mnYmwM3CI94NtHCK?=
 =?us-ascii?q?OV7LxCgCt0rUC0rQPXYfhhgDgdzeEi52Idg+EMoAAt1DmSAqgOHUlEOizhjxGI?=
 =?us-ascii?q?79G9rKpNfmquf6a/1FFind+/FrGNuR9TWGz2epo5GS9w78N/ME/D0XHp64Hkfs?=
 =?us-ascii?q?XQYswXthGOjxjAiO1VIoorlvUWnSpnJX79vXo9xu4nihxu2Iu2vYmdJGVr4aK5?=
 =?us-ascii?q?GQVYNjzuasMX+zHti7ten8mM04CuGJVhBisEXJ/yQf20FzISsOztNxySHz0ktn?=
 =?us-ascii?q?ebBb3fEBeE50h8qHLPF42rO2uTJHkE1thiQBidJEpCgAEbRjk6n5g5Fhy0y8zl?=
 =?us-ascii?q?akt2+jcR5lvgoBtW1u1oLwX/UnvYpAqwaDc7Up2fIwRN7g1Y+0fZK8+e7v9wHy?=
 =?us-ascii?q?FF+J2utheNJ3efZwRJC2EJR0OFC0riPrmo+dnP7eyYCvCiIPvJZLWEsfZeWOuQ?=
 =?us-ascii?q?xZKzzotm+C6BN8WIPnl/Fv07x1BMXXZjF8TCnDUPTSMXmjnJb86aohe85yJ2ot?=
 =?us-ascii?q?q+8PTtRALg+4+PB6FOPtVo/hC8mb2DOPKIhCZlNTZY0YsBxX/Wx7ge314SiCBu?=
 =?us-ascii?q?eyOuEbQasi7NQ7zfmrVKDx4AcC5zMMpI76Qh3ghCI8Lbi9X11qJmgf4xEVtKSV?=
 =?us-ascii?q?vhmsSxb8wQP269LE/HBFqMNLmePzLL3tr4YbmiRrxQlulUsxywtC2fE0/iODSD?=
 =?us-ascii?q?ijboWwquMeFKkCGUIhhetJuhfRZqDGjpVMjmZQGjMN9rkT02xqU5hm/LNW4ZKz?=
 =?us-ascii?q?Rzb1lBoaGQ7SxGhPVyAGhB7ntjLemZlCeV9ejYKpAKsfR1BiR4jf5V4HM/y7FN?=
 =?us-ascii?q?9iFLWOR1mDfOrt5pu1ynkvOAyjxiUBpPrDZEnIOKvUV4NqXf+ZlNQnLE/BML7W?=
 =?us-ascii?q?WNBBUGvdplCtvzu69OztjDjr78KDBH84GcwcxJO8jTLcuceFUlPBv5HjPORF8Z?=
 =?us-ascii?q?Qjq7HWXegVFBivaU923TopVs7tDNnpUJAppcUFo8DLtOD0VjE9sqOpp7Xjo417?=
 =?us-ascii?q?WciZhMrVC5thjKQMxE9qjKSvGVH727Ii6xhL1Fah1Yh7/1e8BbJt2l809vcF93?=
 =?us-ascii?q?mMLNAUWUFfJEuC5iaUcPqUZO8X5zSCVn2Uv/aQCqpmQaFv21mBMwog9/Z/k9sj?=
 =?us-ascii?q?bq/1ozYFHNoX102HI8kNOtqjCLcSXtK7+wUJtNDCy841M8O5W9QUB+bRezhlBj?=
 =?us-ascii?q?LDfJXalWiZNhc3xmjEnXvp4ZXbZwRLNJKD8Zw+qaYb183V1Cp2OnzElc6O3tDZ?=
 =?us-ascii?q?pkiRtscJiwonYG0AVmOpp9DKrcNeJt00RXg6OUpSypnrQ13RMZD0UA6mWffGgP?=
 =?us-ascii?q?okNecvEeKjal5KRe6A6GgCdZcSBYT/c2r+h43kI7Nf6Jwy/p3/hEME/nZMKFKK?=
 =?us-ascii?q?bMgGXJk4ajQkkxzV8Pj0lI56Nx1493aEedUQYtirCRDRUSKc3aKQxPdM1U3HnV?=
 =?us-ascii?q?YSuK9+7KxMQmbM2GCun0QLrW5+4viUW+EVNsRtxU4w=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AEAAB69Q5ch0O0hNFkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUgQBAQEBCwGDaxUSmE6BPzmXPYFzFBgTAYFLhiIiNQgNAQMBAQE?=
 =?us-ascii?q?BAQECARMBAQEIDQkIKS+CNiQBgmIDAwECJAsBRgYJAQEYOANUBgESBYMcggIFp?=
 =?us-ascii?q?ykzhAIBhimHcoQveoEcgUSCMYsKAok1AYFzhRGQOwcCkUQLGJE9iSKQDoFIAYI?=
 =?us-ascii?q?LcIM8gicXjWYBVx4BATEBgQQBAYwcAQE?=
X-IPAS-Result: =?us-ascii?q?A0AEAAB69Q5ch0O0hNFkGgEBAQEBAgEBAQEHAgEBAQGBUgQ?=
 =?us-ascii?q?BAQEBCwGDaxUSmE6BPzmXPYFzFBgTAYFLhiIiNQgNAQMBAQEBAQECARMBAQEID?=
 =?us-ascii?q?QkIKS+CNiQBgmIDAwECJAsBRgYJAQEYOANUBgESBYMcggIFpykzhAIBhimHcoQ?=
 =?us-ascii?q?veoEcgUSCMYsKAok1AYFzhRGQOwcCkUQLGJE9iSKQDoFIAYILcIM8gicXjWYBV?=
 =?us-ascii?q?x4BATEBgQQBAYwcAQE?=
X-IronPort-AV: E=Sophos;i="5.56,340,1539673200"; 
   d="scan'208";a="54620145"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 10 Dec 2018 15:25:09 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730094AbeLJXWH (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 10 Dec 2018 18:22:07 -0500
Received: from mga04.intel.com ([192.55.52.120]:11277 "EHLO mga04.intel.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1727919AbeLJXV7 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 10 Dec 2018 18:21:59 -0500
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from orsmga001.jf.intel.com ([10.7.209.18])
  by fmsmga104.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 10 Dec 2018 15:21:57 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,340,1539673200"; 
   d="scan'208";a="117684769"
Received: from sjchrist-coffee.jf.intel.com ([10.54.74.154])
  by orsmga001.jf.intel.com with ESMTP; 10 Dec 2018 15:21:57 -0800
From: Sean Christopherson <sean.j.christopherson@intel.com>
To: Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        x86@kernel.org, Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>,
        Sean Christopherson <sean.j.christopherson@intel.com>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        Andy Lutomirski <luto@kernel.org>,
        Peter Zijlstra <peterz@infradead.org>
Cc: "H. Peter Anvin" <hpa@zytor.com>, linux-kernel@vger.kernel.org,
        linux-sgx@vger.kernel.org, Andy Lutomirski <luto@amacapital.net>,
        Josh Triplett <josh@joshtriplett.org>,
        Haitao Huang <haitao.huang@linux.intel.com>,
        Jethro Beekman <jethro@fortanix.com>,
        "Dr . Greg Wettstein" <greg@enjellic.com>
Subject: [RFC PATCH v3 1/4] x86/sgx: Add a per-mm ENCLU exception fixup handler
Date: Mon, 10 Dec 2018 15:21:38 -0800
Message-Id: <20181210232141.5425-2-sean.j.christopherson@intel.com>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <20181210232141.5425-1-sean.j.christopherson@intel.com>
References: <20181210232141.5425-1-sean.j.christopherson@intel.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Intel Software Guard Extensions (SGX) introduces a new CPL3-only
"enclave" mode that runs as a sort of black box shared object that is
hosted by an untrusted "normal" CPl3 process.

Entering an enclave can only be done through SGX-specific instructions,
EENTER and ERESUME, and is a non-trivial process.  Because of the
complexity of transitioning to/from an enclave, the vast majority of
enclaves are expected to utilize a library to handle the actual
transitions.  This is roughly analogous to how e.g. a libc and dynamic
linker are used by most applications.

Another crucial characteristic of SGX enclaves is that they can generate
exceptions as part of their normal (at least as "normal" as SGX can be)
operation that need to be handled *in* the enclave and/or are unique
to SGX.

And because they are essentially fancy shared objects, a process can
host any number of enclaves, each of which can execute multiple threads
simultaneously.

Putting everything together, userspace enclaves will utilize a library
that must be prepared to handle any and (almost) all exceptions any time
at least one thread may be executing in an enclave.  Leveraging signals
to handle the enclave exceptions is unpleasant, to put it mildly, e.g.
the SGX library must constantly (un)register its signal handler based
on whether or not at least one thread is executing in an enclave, and
filter and forward exceptions that aren't related to its enclaves.  This
becomes particularly nasty when using multiple levels of libraries that
register signal handlers, e.g. running an enclave via cgo inside of the
Go runtime.

Add per-mm, i.e. per-process, exception fixup on ENCLU to so that the
kernel can redirect unhandled exceptions, i.e. exceptions would otherwise
generate a signal, to a user-provided exception handler.  The exception
handler ABI roughly follows the System V 64-bit ABI for function calls:

  - %rdi: trap number
  - %rsi: error code
  - %rdx: address

Cc: Andy Lutomirski <luto@amacapital.net>
Cc: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
Cc: Dave Hansen <dave.hansen@linux.intel.com>
Cc: Josh Triplett <josh@joshtriplett.org>
Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
---
 arch/x86/include/asm/mmu.h     |  4 ++++
 arch/x86/include/asm/sgx.h     | 13 +++++++++++++
 arch/x86/kernel/cpu/sgx/main.c | 18 ++++++++++++++++++
 3 files changed, 35 insertions(+)

diff --git a/arch/x86/include/asm/mmu.h b/arch/x86/include/asm/mmu.h
index 5ff3e8af2c20..1665c84e5844 100644
--- a/arch/x86/include/asm/mmu.h
+++ b/arch/x86/include/asm/mmu.h
@@ -54,6 +54,10 @@ typedef struct {
 	/* address of the bounds directory */
 	void __user *bd_addr;
 #endif
+#ifdef CONFIG_INTEL_SGX_CORE
+	unsigned long enclu_address;
+	unsigned long enclu_exception_handler;
+#endif
 } mm_context_t;
 
 #define INIT_MM_CONTEXT(mm)						\
diff --git a/arch/x86/include/asm/sgx.h b/arch/x86/include/asm/sgx.h
index d4f61d1c5c2a..bbf808a0ca91 100644
--- a/arch/x86/include/asm/sgx.h
+++ b/arch/x86/include/asm/sgx.h
@@ -309,6 +309,19 @@ static inline int __emodt(struct sgx_secinfo *secinfo, void *addr)
 	return __encls_ret_2(SGX_EMODT, secinfo, addr);
 }
 
+#ifdef CONFIG_INTEL_SGX_CORE
+extern bool fixup_sgx_enclu_exception(struct pt_regs *regs, int trapnr,
+				      unsigned long error_code,
+				      unsigned long fault_addr);
+#else
+static inline bool fixup_sgx_enclu_exception(struct pt_regs *regs, int trapnr,
+					     unsigned long error_code,
+					     unsigned long fault_addr)
+{
+	return false;
+}
+#endif
+
 struct sgx_epc_page *sgx_alloc_page(void *owner, bool reclaim);
 int __sgx_free_page(struct sgx_epc_page *page);
 void sgx_free_page(struct sgx_epc_page *page);
diff --git a/arch/x86/kernel/cpu/sgx/main.c b/arch/x86/kernel/cpu/sgx/main.c
index 30fd69f1fc07..1994e003581d 100644
--- a/arch/x86/kernel/cpu/sgx/main.c
+++ b/arch/x86/kernel/cpu/sgx/main.c
@@ -363,6 +363,24 @@ void sgx_page_reclaimable(struct sgx_epc_page *page)
 }
 EXPORT_SYMBOL_GPL(sgx_page_reclaimable);
 
+bool fixup_sgx_enclu_exception(struct pt_regs *regs, int trapnr,
+			       unsigned long error_code,
+			       unsigned long fault_addr)
+{
+	if (current->mm->context.enclu_address != regs->ip)
+		return false;
+
+	if (!current->mm->context.enclu_address &&
+	    !current->mm->context.enclu_exception_handler)
+		return false;
+
+	regs->ip = current->mm->context.enclu_exception_handler;
+	regs->di = trapnr;
+	regs->si = error_code;
+	regs->dx = fault_addr;
+	return true;
+}
+
 static __init void sgx_free_epc_section(struct sgx_epc_section *section)
 {
 	struct sgx_epc_page *page;
-- 
2.19.2

