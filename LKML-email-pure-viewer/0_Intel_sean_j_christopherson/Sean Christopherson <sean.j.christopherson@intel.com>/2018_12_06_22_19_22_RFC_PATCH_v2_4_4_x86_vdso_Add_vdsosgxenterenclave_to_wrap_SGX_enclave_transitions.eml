Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:54:41 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 89751580375;
	Thu,  6 Dec 2018 14:19:40 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 14:19:40 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AfrlXyR0sgV50rcg0smDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segRLvzxwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJBUMhPSiJPDICy?=
 =?us-ascii?q?YYwNAOoPMulWoJL9p0MMoBalGQWhB/nixiNSi3PqwaE31fkqHwHc3AwnGtIDqG?=
 =?us-ascii?q?nao8vvO6cUTOu40qnIzS/Cb/NNxTf975DIchA/rvGWRrJwdszRwlQoGgPekFqf?=
 =?us-ascii?q?s4rlMymX1ugXr2eb7/BgVeO0i247rAFxujivydk2ionSgYIVzEvJ9SR/wIYpO9?=
 =?us-ascii?q?K4TFR3bsKjEJtVriyXMZZ9TM0lQ2Ftoik6y7sGtIa/fCcX05Qr3QXfZOeBfoOV?=
 =?us-ascii?q?4RzjTP6cLSlkiH9hYr6zmhi//Va6xuHhVcS4zExGoytHn9XUq3wA2RPe5tKaRv?=
 =?us-ascii?q?Zz8UqtwyuD2g7S5+1eL004iKzWIIM7zLEqjJocq0HDEzf2mEroiK+WcV0p+van?=
 =?us-ascii?q?6+v5eLXqvJycOJFuigH4LKsuntazAeMiMggBR2Sb+OK826P//UDhXrlGkvk7nr?=
 =?us-ascii?q?PEvJ3UO8gXvLO1DgxJ3oo56huyDS+q0NECknkGKFJFdgiHj4/sO1zWJPD4DPG/?=
 =?us-ascii?q?g0mjkTtyxPDJIKfhApPTIXjHibvherh860hCxwop1t1f+Z1UBa8bIP7pWU/+qs?=
 =?us-ascii?q?bYDhknPAyw2ernD8991owGVWKVHqCZKL/SsUOP5u83J+mMZYwVtyjnJ/kq+v7j?=
 =?us-ascii?q?lns5mV4bfam00pobcnG4HvJ6I0qHZXrgmMsOEWAPvgAmVuzllEWCUSJPZ3a1R6?=
 =?us-ascii?q?885is0CIO6DYjZQYChmryB3DqhEZ1QaWBLEVSMEXbud4WZVPYAciOSIsl9kjMa?=
 =?us-ascii?q?UbitUZMu1RartAXi0bpoMvLU+jEEtZLkzNV15erTmg8o+Tx3CMSd1WeNT2Zvk2?=
 =?us-ascii?q?MMRj822r1/oENnxleC16h4n+JXFdhJ6/xVVQc6MIbWz/ZmBNDqRgLBYtCJRU68?=
 =?us-ascii?q?TdW9ATExSdExz8UUY0lnGdWvlRTD3yusA78ImL2HHp008qTA33fvI8Zx0WrJ1K?=
 =?us-ascii?q?4kj1M+WMtAKXWmhrJj9wjUH4PJkF+Wl6CweaQY3S7C7mGDzWWVsUFcUQ5wV7jF?=
 =?us-ascii?q?XH8FakvXq9T5+l3NT7u0Bbs7NQtBzNaIKrFWZd3xkVVGWPDjNczDbG2rhWe/Gw?=
 =?us-ascii?q?yExrOWY4rsYGUSwiPdBE8AkwAQ+HaGMRMzBiOgo2LYETxvGkjjY0Lq8elitny7?=
 =?us-ascii?q?SlU4wB2Nb01kz7C14AIaheSAS/MP2bIJoDoupC9qHFmjxd7WC8CPpwx6fKpCZ9?=
 =?us-ascii?q?Mw+1NH1WPftwxgMZ2sNaFihlgCcwtpu0PizQl4CoJFkcIytnMl0BJyKb6E0FNG?=
 =?us-ascii?q?bz6YwZHwOrjQKmnu/BCua7Ta2k3E3NaR4KcP7PU4q1PsvAyyEkoi8nNn08Ra0n?=
 =?us-ascii?q?eG55XKChYSXoz1Ukot6xd6oLTaaDEn54zIzX1sLbW0sjja1t0zAOsq1BmhcMlf?=
 =?us-ascii?q?Ma+eDwDyDtAVCNKoKOwpnFipcAkJPORT9K4yIsOneOGK2K+tPOZ8gj2miX5L75?=
 =?us-ascii?q?x60kKJ7yB8UPLH344Zw/GE2QuKTzf9jEq7vs/rg4xFZDESEXC5ySjrH4NRYqxy?=
 =?us-ascii?q?fYAWCWahOcG3x9N+h4LzVH5c7lKsG1QG2MqxcxqIc1P9xRFQ1VgQoXG/gyu4zi?=
 =?us-ascii?q?B7nCszrqWC2yzC2eLiewQdOm5KXWVtkU3jIYypgN8ERkioaA4pmQCh5Ub7wahb?=
 =?us-ascii?q?uat+I3PSQUdOYyj5MWViXrGsubqFZs5F8IkovjlPUOSgfVCaTabwohsb0y/5H2?=
 =?us-ascii?q?pS3is7dyysupjimxx6iWSdLGt8rXbDeMFwwwvf68LYRfJLwjUGQyx4gyHNBleg?=
 =?us-ascii?q?J9mp4cmUl5Dbv+C8TW2hTJ5TcSrszY+aryu0/25qAR6+n/C1hNLnFxM30Sv619?=
 =?us-ascii?q?lsSCXJowzwYojt16SmL+1nelNkC0P768p/Aot+iJc/hIkM2XgGgZWY5XoGnn30?=
 =?us-ascii?q?MdlB26L+bXwNSCUPw97U5gjlxUJiImiIx4L/SnWS3M9ha8OmbWMR3yI399pKB7?=
 =?us-ascii?q?uM7LxYgSt1pUK1rQHLbvh8hDsdyeYu52Qcg+EGowctyiSdArYPHUhXJyDslhKI?=
 =?us-ascii?q?78ygo6VTfmqgbb+w1E9ml9C7EL6Cuh1cWGr+epo6GC9w78Z/P0jW3Hz99I7kY8?=
 =?us-ascii?q?XQYswJthKPjRjAledVJYk1lvoLgypnJG38sWcky+49kRxhw5W6sJKbJGVq+aKz?=
 =?us-ascii?q?GgRYOSHtZ8MP5jHtir5TntqR34CqBJlgGy8EXJ31TfKzCzIStO/qNwKPED06t3?=
 =?us-ascii?q?eaFqDTHQ6Z6Ed6sX3PF4qnOG2QJHkc1d9iXgWSJFRDgAAIWzU3hoU2GRqtxMzl?=
 =?us-ascii?q?bUd1/DQR5kPjpxtIy+JoMQT/U2jFqAepbDc0VIaQLB5M4g5e4EfVNNSU7vhvEC?=
 =?us-ascii?q?FA4p2hsAuNJ3SZZwtSCGEGRFeEC0r/PrW05tnA7uuYBve4L/TUerWDsuheV/aO?=
 =?us-ascii?q?xZKy3Ypq5TeMNsOTPnZ8C/03wFZMXXd8G87BgTUAVzQXlz7Rb86cvBq9+ip3rt?=
 =?us-ascii?q?2m8PT2Qg3v45GDC6BVMdVp9BC7mqODN++WhCZkJjdUzJIMxXnUyLcB2F4ekT1h?=
 =?us-ascii?q?dz6oEb4Yry7CULrQmrNLDx4ccy5zNNVH76M/3glOOM7XkND11qR/jv46FVhFT0?=
 =?us-ascii?q?HhmtqyaMwOImG9Mk7HBUmROLSHIz3L39/4YaemRbJMi+VUsgW6uSyHHE/7IjSD?=
 =?us-ascii?q?iz7pWgi1PuFRly6bJgJRuYGnfhZpCGjuV9bmahy9MN9qgjw627w0hnXWNWECNT?=
 =?us-ascii?q?hwaV9CrrqV7SlAmPVwB3RB7mZ5LemDgyuZ8+jYKpMMvfR3GCh7i+Ja72o8y7ZO?=
 =?us-ascii?q?6CFERfp1mDbdr9J0olGmlPWPxSRjUBZUtjlLg4eLt114OarF7plARWrE/BUV4G?=
 =?us-ascii?q?SQERsKod5lCtzpu69Iy9nPlLj8KDFN89/P+cscBs7UKN+IMXY7MBrpHiLUAxUB?=
 =?us-ascii?q?TTKxKW7fgEldw7mu8Si8qJQr4rzxhJ0LS6VAV119QvcHFkNNH9EYJppzGDQ+nu?=
 =?us-ascii?q?jfxPII4n+3t1H+QMhbrpbKTLrGHfrrOB6djL9ZewEPx7Loa4geYMmz+kptbRFf?=
 =?us-ascii?q?m4DMElCYCdVMpCJmRhU5rEVE7D51SWhlnwrPbRms+3saC7aMkwI1jRU2Ne413D?=
 =?us-ascii?q?7o4loxdhzGqX102Flhx/3mjCqXfTq3K72/Gcl6AjT5/2g4NIj2RU4hYQSskApk?=
 =?us-ascii?q?PTHfSrR5i7pmaHAtiQnAtJ8JEvlZG+kMWBIMyOvfVfQq1U9AsCzvkVdK+ebfG7?=
 =?us-ascii?q?NjkgUweJKhpn4G3BhsOo0bP6vVcZFEx14YraKUvzS00fgxzRUFIEBFpHifcShO?=
 =?us-ascii?q?ugoDNqMnPDav5uxh8xeFnRNCfnQBU7whpfc8pRB1APiJ0y+1i+0LEUu2LeHKav?=
 =?us-ascii?q?rB42U=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AHAAArnwlch0O0hNFaCRoBAQEBAQIBA?=
 =?us-ascii?q?QEBBwIBAQEBgVMDAQEBAQsBgVUFghEnmCIpgT85aJFZhHkUgWIRGBMBgUuGDCI?=
 =?us-ascii?q?2Bw0BAwEBAQEBAQIBEwEBAQgNCQgpL4I2JAGCYgMDAQIkCwFGBgkBARg4A1QGA?=
 =?us-ascii?q?RIFglFLggIFpzkzhAIBhiiHcIQveoEcgREBMoIqhHsRhgUCiTEBhhZrj1dVBwK?=
 =?us-ascii?q?KO4cACxiRNiyIYo9+gU0JgX1wgzyCJxcSjVQBVx4BATEBgQQBAYo6AQE?=
X-IPAS-Result: =?us-ascii?q?A0AHAAArnwlch0O0hNFaCRoBAQEBAQIBAQEBBwIBAQEBgVM?=
 =?us-ascii?q?DAQEBAQsBgVUFghEnmCIpgT85aJFZhHkUgWIRGBMBgUuGDCI2Bw0BAwEBAQEBA?=
 =?us-ascii?q?QIBEwEBAQgNCQgpL4I2JAGCYgMDAQIkCwFGBgkBARg4A1QGARIFglFLggIFpzk?=
 =?us-ascii?q?zhAIBhiiHcIQveoEcgREBMoIqhHsRhgUCiTEBhhZrj1dVBwKKO4cACxiRNiyIY?=
 =?us-ascii?q?o9+gU0JgX1wgzyCJxcSjVQBVx4BATEBgQQBAYo6AQE?=
X-IronPort-AV: E=Sophos;i="5.56,324,1539673200"; 
   d="scan'208";a="141122707"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 06 Dec 2018 14:19:38 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726209AbeLFWTh (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 6 Dec 2018 17:19:37 -0500
Received: from mga06.intel.com ([134.134.136.31]:39981 "EHLO mga06.intel.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726122AbeLFWTb (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 6 Dec 2018 17:19:31 -0500
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from orsmga008.jf.intel.com ([10.7.209.65])
  by orsmga104.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 14:19:28 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,324,1539673200"; 
   d="scan'208";a="99313301"
Received: from sjchrist-coffee.jf.intel.com ([10.54.74.154])
  by orsmga008.jf.intel.com with ESMTP; 06 Dec 2018 14:19:28 -0800
From: Sean Christopherson <sean.j.christopherson@intel.com>
To: Andy Lutomirski <luto@kernel.org>,
        Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        x86@kernel.org, Dave Hansen <dave.hansen@linux.intel.com>,
        Peter Zijlstra <peterz@infradead.org>
Cc: "H. Peter Anvin" <hpa@zytor.com>, linux-kernel@vger.kernel.org,
        Andy Lutomirski <luto@amacapital.net>,
        Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>,
        Josh Triplett <josh@joshtriplett.org>
Subject: [RFC PATCH v2 4/4] x86/vdso: Add __vdso_sgx_enter_enclave() to wrap SGX enclave transitions
Date: Thu,  6 Dec 2018 14:19:22 -0800
Message-Id: <20181206221922.31012-5-sean.j.christopherson@intel.com>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <20181206221922.31012-1-sean.j.christopherson@intel.com>
References: <20181206221922.31012-1-sean.j.christopherson@intel.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Intel Software Guard Extensions (SGX) SGX introduces a new CPL3-only
enclave mode that runs as a sort of black box shared object that is
hosted by an untrusted normal CPL3 process.

Enclave transitions have semantics that are a lovely blend of SYCALL,
SYSRET and VM-Exit.  In a non-faulting scenario, entering and exiting
an enclave can only be done through SGX-specific instructions, EENTER
and EEXIT respectively.  EENTER+EEXIT is analogous to SYSCALL+SYSRET,
e.g. EENTER/SYSCALL load RCX with the next RIP and EEXIT/SYSRET load
RIP from R{B,C}X.

But in a faulting/interrupting scenario, enclave transitions act more
like VM-Exit and VMRESUME.  Maintaining the black box nature of the
enclave means that hardware must automatically switch CPU context when
an Asynchronous Exiting Event (AEE) occurs, an AEE being any interrupt
or exception (exceptions are AEEs because asynchronous in this context
is relative to the enclave and not CPU execution, e.g. the enclave
doesn't get an opportunity to save/fuzz CPU state).

Like VM-Exits, all AEEs jump to a common location, referred to as the
Asynchronous Exiting Point (AEP).  The AEP is specified at enclave entry
via register passed to EENTER/ERESUME, similar to how the hypervisor
specifies the VM-Exit point (via VMCS.HOST_RIP at VMLAUNCH/VMRESUME).
Resuming the enclave/VM after the exiting event is handled is done via
ERESUME/VMRESUME respectively.  In SGX, AEEs that are handled by the
kernel, e.g. INTR, NMI and most page faults, IRET will journey back to
the AEP which then ERESUMEs th enclave.

Enclaves also behave a bit like VMs in the sense that they can generate
exceptions as part of their normal operation that for all intents and
purposes need to handled in the enclave/VM.  However, unlike VMX, SGX
doesn't allow the host to modify its guest's, a.k.a. enclave's, state,
as doing so would circumvent the enclave's security.  So to handle an
exception, the enclave must first be re-entered through the normal
EENTER flow (SYSCALL/SYSRET behavior), and then resumed via ERESUME
(VMRESUME behavior) after the source of the exception is resolved.

All of the above is just the tip of the iceberg when it comes to running
an enclave.  But, SGX was designed in such a way that the host process
can utilize a library to build, launch and run an enclave.  This is
roughly analogous to how e.g. libc implementations are used by most
applications so that the application can focus on its business logic.

The big gotcha is that because enclaves can generate *and* handle
exceptions, any SGX library must be prepared to handle nearly any
exception at any time (well, any time a thread is executing in an
enclave).  In Linux, this means the SGX library must register a
signal handler in order to intercept relevant exceptions and forward
them to the enclave (or in some cases, take action on behalf of the
enclave).  Unfortunately, Linux's signal mechanism doesn't mesh well
with libraries, e.g. signal handlers are process wide, are difficult
to chain, etc...  This becomes particularly nasty when using multiple
levels of libraries that register signal handlers, e.g. running an
enclave via cgo inside of the Go runtime.

In comes vDSO to save the day.  Now that vDSO can fixup exceptions,
add a function, __vdso_sgx_enter_enclave(), to wrap enclave transitions
and intercept any exceptions that occur when running the enclave.

__vdso_sgx_enter_enclave() accepts four parameters:

  - A pointer to a Thread Control Structure (TCS).  A TCS is a page
    within the enclave that defines/tracks the context of an enclave
    thread.

  - An opaque pointer passed to the enclave via RDI, e.g. to marshal
    data into the enclave.

  - A pointer to a struct sgx_enclave_exit_info that is used to relay
    exit/fault information back to the caller.  The primary variable
    in the exit info is the ENCLU leaf at the time of exit, which can
    be queried to determine whether the enclave exited cleanly (EEXIT),
    or took an exception (EENTER or ERESUME).

    The exact leaf is captured, instead of e.g. a fault flag, so that
    the caller can identity whether a fault occurred in the enclave or
    on EENTER.   A fault on EENTER generally means the enclave has died
    and needs to be restarted.

    On a clean EEXIT, registers RDI, RSI and RDX are captured as-is,
    e.g. to pass data out of the enclave.  On a fault that is reported
    to the caller, the exit info is stuffed (by way of the vDSO fixup
    handler) with the trapnr, error_code and address.  Not all enclave
    exits are reported to the caller, e.g. interrupts and faults that
    are handled by the kernel do not trigger fixup and IRET back to
    ENCLU[ERESUME], i.e. unconditionally resume the enclave.

  - An optional exit handler that, when defined, is invoked prior to
    returning.  The callback provides the enclave's untrusted runtime an
    opportunity to resolve a fault or service a remote procedure call
    without losing its stack context.

    In addition to allowing the runtime to do silly shenanigans with its
    stack, e.g. pushing data onto the stack from within the enclave, the
    handler approach preserves the full call stack for debugging purposes.
    For example, to accept a new EPC page into the enclave, an enclave
    with a single TCS must re-EENTER the enclave using the same TCS to
    EACCEPT the new page prior to executing ERESUME to restart at the
    fault context.  The handler approach allows reentry without undoing
    the original call stack, i.e. preserves the view of the original
    interrupted call.

    Note that this effectively requires userspace to implement an exit
    handler if they want to support correctable enclave faults, as there
    is no other way to request ERESUME.

Suggested-by: Andy Lutomirski <luto@amacapital.net>
Cc: Andy Lutomirski <luto@amacapital.net>
Cc: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
Cc: Dave Hansen <dave.hansen@linux.intel.com>
Cc: Josh Triplett <josh@joshtriplett.org>
Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
---
 arch/x86/entry/vdso/Makefile             |   1 +
 arch/x86/entry/vdso/vdso.lds.S           |   1 +
 arch/x86/entry/vdso/vsgx_enter_enclave.c | 119 +++++++++++++++++++++++
 3 files changed, 121 insertions(+)
 create mode 100644 arch/x86/entry/vdso/vsgx_enter_enclave.c

diff --git a/arch/x86/entry/vdso/Makefile b/arch/x86/entry/vdso/Makefile
index eb543ee1bcec..8b530e20e8be 100644
--- a/arch/x86/entry/vdso/Makefile
+++ b/arch/x86/entry/vdso/Makefile
@@ -18,6 +18,7 @@ VDSO32-$(CONFIG_IA32_EMULATION)	:= y
 
 # files to link into the vdso
 vobjs-y := vdso-note.o vclock_gettime.o vgetcpu.o
+vobjs-$(VDSO64-y)		+= vsgx_enter_enclave.o
 
 # files to link into kernel
 obj-y				+= vma.o extable.o
diff --git a/arch/x86/entry/vdso/vdso.lds.S b/arch/x86/entry/vdso/vdso.lds.S
index d3a2dce4cfa9..50952a995a6c 100644
--- a/arch/x86/entry/vdso/vdso.lds.S
+++ b/arch/x86/entry/vdso/vdso.lds.S
@@ -25,6 +25,7 @@ VERSION {
 		__vdso_getcpu;
 		time;
 		__vdso_time;
+		__vdso_sgx_enter_enclave;
 	local: *;
 	};
 }
diff --git a/arch/x86/entry/vdso/vsgx_enter_enclave.c b/arch/x86/entry/vdso/vsgx_enter_enclave.c
new file mode 100644
index 000000000000..896c2eb079bb
--- /dev/null
+++ b/arch/x86/entry/vdso/vsgx_enter_enclave.c
@@ -0,0 +1,119 @@
+// SPDX-License-Identifier: (GPL-2.0 OR BSD-3-Clause)
+// Copyright(c) 2018 Intel Corporation.
+
+#include <uapi/linux/errno.h>
+#include <uapi/linux/types.h>
+
+#include "extable.h"
+
+/*
+ * The exit info/handler definitions will live elsewhere in the actual
+ * implementation, e.g. arch/x86/include/uapi/asm/sgx.h.
+ */
+struct sgx_enclave_exit_info {
+	__u32   leaf;
+	union {
+		struct {
+			__u16 trapnr;
+			__u16 error_code;
+			__u64 address;
+		} fault;
+		struct {
+			__u64 rdi;
+			__u64 rsi;
+			__u64 rdx;
+		} eexit;
+	};
+};
+
+typedef long (sgx_enclave_exit_handler)(struct sgx_enclave_exit_info *exit_info,
+					void *tcs, void *priv);
+
+/*
+ * ENCLU (ENCLave User) is an umbrella instruction for a variety of CPL3
+ * SGX functions,  The ENCLU function that is executed is specified in EAX,
+ * with each function potentially having more leaf-specific operands beyond
+ * EAX.  In the vDSO we're only concerned with the leafs that are used to
+ * transition to/from the enclave.
+ */
+enum sgx_enclu_leaf {
+	SGX_EENTER	= 2,
+	SGX_ERESUME	= 3,
+	SGX_EEXIT	= 4,
+};
+
+notrace long __vdso_sgx_enter_enclave(void *tcs, void *priv,
+				      struct sgx_enclave_exit_info *exit_info,
+				      sgx_enclave_exit_handler *exit_handler)
+{
+	u64 rdi, rsi, rdx;
+	u32 leaf;
+
+	if (!tcs || !exit_info)
+		return -EINVAL;
+
+	leaf = SGX_EENTER;
+
+enter_enclave:
+	asm volatile(
+		/*
+		 * When an event occurs in an enclave, hardware first exits the
+		 * enclave to the AEP, switching CPU context along the way, and
+		 * *then* delivers the event as usual.  As part of the context
+		 * switching, registers are loaded with synthetic state (except
+		 * BP and SP, which are saved/restored).  The defined synthetic
+		 * state loads registers so that simply executing ENCLU will do
+		 * ERESUME, e.g. RAX=4, RBX=TCS and RCX=AEP after an AEE.  So,
+		 * we only need to load RAX, RBX and RCX for the initial entry.
+		 * The AEP can point at that same ENCLU, fixup will jump us out
+		 * if an exception was unhandled.
+		 */
+		"	lea	1f(%%rip), %%rcx\n"
+		"1:	enclu\n"
+		"2:\n"
+
+		".pushsection .fixup, \"ax\" \n"
+		"3:	jmp 2b\n"
+		".popsection\n"
+		_ASM_VDSO_EXTABLE_HANDLE(1b, 3b)
+
+		: "=a"(leaf), "=D" (rdi), "=S" (rsi), "=d" (rdx)
+		: "a" (leaf), "b" (tcs), "D" (priv)
+		: "cc", "memory",
+		  "rcx", "r8", "r9", "r10", "r11", "r12", "r13", "r14", "r15"
+	);
+
+	/*
+	 * EEXIT means we left the assembly blob via EEXIT, anything else is
+	 * an unhandled exception (handled exceptions and interrupts simply
+	 * ERESUME from the AEP).
+	 */
+	exit_info->leaf = leaf;
+	if (leaf == SGX_EEXIT) {
+		exit_info->eexit.rdi = rdi;
+		exit_info->eexit.rsi = rsi;
+		exit_info->eexit.rdx = rdx;
+	} else {
+		exit_info->fault.trapnr = rdi;
+		exit_info->fault.error_code = rsi;
+		exit_info->fault.address = rdx;
+	}
+
+	/*
+	 * Invoke the caller's exit handler if one was provided.  The return
+	 * value tells us whether to re-enter the enclave (EENTER or ERESUME)
+	 * or to return (EEXIT).
+	 */
+	if (exit_handler) {
+		leaf = exit_handler(exit_info, tcs, priv);
+		if (leaf == SGX_EENTER || leaf == SGX_ERESUME)
+			goto enter_enclave;
+		if (leaf == SGX_EEXIT)
+			return 0;
+		return -EINVAL;
+	} else if (leaf != SGX_EEXIT) {
+		return -EFAULT;
+	}
+
+	return 0;
+}
-- 
2.19.2

