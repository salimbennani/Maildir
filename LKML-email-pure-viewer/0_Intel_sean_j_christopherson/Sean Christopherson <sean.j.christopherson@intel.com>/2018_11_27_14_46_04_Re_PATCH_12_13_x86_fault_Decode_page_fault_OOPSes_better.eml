Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 28 Nov 2018 08:45:51 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 3CAAB5803C2;
	Tue, 27 Nov 2018 06:46:10 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 27 Nov 2018 06:46:09 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ALF5AlhwPPUJZbHfXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e8XKvad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWRPUMZPWSJcAY28?=
 =?us-ascii?q?YYQAAPYcMulaoYb9vEMOoBmlCAmwGO/i0CNEimPs0KEk1ekqDAHI3BYnH9ILqH?=
 =?us-ascii?q?nascv6O70UUeuo0qTIzS/Db/JN2Tfh74jIahAhru+WXbJrdsrRz1QkGgTejlqO?=
 =?us-ascii?q?s4PlOSmZ1uYXv2eH7+pgT+Ovi3U7qwF2ujivxtkjipPShoISzFDJ7iR5wIApJd?=
 =?us-ascii?q?KmTE53e8KrEJxVtyyDMYZ9X8AsQ3lwtSok1rELvYS3cDUExZg53RLTdv+Kf5SS?=
 =?us-ascii?q?7h/iVuudOSp0iXZ7dL6lhxu/8VKsx+3iWsWuzVpGsypIn9/RvX4XzRPT8NKISv?=
 =?us-ascii?q?5l80ehxzmP0wfT5/laIUA7i6XbMYQtwr0umZoJt0TMACv2lF/xjK+MeUUo4umo?=
 =?us-ascii?q?6+L5bbX6vpKQKZN4hwXkPqgzlMGzH/40PhUNUmSH4+ix1b/u8VX8QLpQj/02lq?=
 =?us-ascii?q?fZsIrdJcQevqO5Bw5V0oA+6xewFjum08oXnWMBLF1bfBKLlo/pOl/IIP/mF/ey?=
 =?us-ascii?q?mEqskDh1yPDcJLHhAYvCLmLFkLj/ebZx8UlcyBA8zdxH/ZJbFqkBIO7vWk/2rN?=
 =?us-ascii?q?HYCh45Mw+qzOr9B9R9y5gTWWaOAq+fLaPTvkWE5uMpI+mQeoAVvCzxJOQi5/7r?=
 =?us-ascii?q?lXU5g0MSfbG13ZsLb3C1BvRmLF+YYXrwmNgBFn0GvgojTOPwjl2CXiVeZ3KzX6?=
 =?us-ascii?q?I6+zE6B5iqDYbFRoCxnrOB2D23EYFRZmBDElqMC2vnd52YW/cQbyKfOs1hkjsa?=
 =?us-ascii?q?WrS7SI8h0heutAn9y7d8KurU+ysYtY/s1dRv5u3Tkw0y+iJwD8iHz26NSGR0lH?=
 =?us-ascii?q?sSRzAqxKB/vVB9ylCb3KdimPxYFdtT5/BTXgcgL5Hczfd3C9TzWgLHY9eIR0yq?=
 =?us-ascii?q?QtSgATEtUN0xx8UCbFp6G9WnlhrDxTalA6cJl7yXA5w56qHc0GL3J8pnz3bG1b?=
 =?us-ascii?q?Muj18pQsZUMW2mh6h/9xXcBoLTkkWZkbqqeroY3CLX6GiDym+OtllCUAFsSaXF?=
 =?us-ascii?q?QWwfZkzOoNvk/EzCUaGhBa4nMgRbz86CMbVFatvugVVCR/fjPdDebnm1m2exAx?=
 =?us-ascii?q?aI27yNYJDre2UbwCXSFkwEnxoP8naBMAg0Hj2hrH7GDDxyCVLvZFvh/vRkp3Ol?=
 =?us-ascii?q?UEA41QGKYFdn17qu5BEVg+eRS/cS3rICpScgpC94HFe739LKFdWAoxBtc7lbYd?=
 =?us-ascii?q?M4+F1Hz37WtxRhPpy8KKBvnkIecwVyv0PpyxV3CoVBndI2rH8wywpyM6aY0FJH?=
 =?us-ascii?q?dzOXxp3wPrzXKm/v/BGgcaLW21fe0MqI9acL8vg3t1LjvASxHEo473pny8VV02?=
 =?us-ascii?q?eb5pjSFgUSVYz+U0kp+Bl6vb3VeTQ96J7O2n1qMqm0tSHC1sktBOskzBagYthe?=
 =?us-ascii?q?PLmFFA/0D80VGcyuJPY2lFiuaxIOJPpS+7IsP8O6a/uG37amPeZ9nD68kWtL+o?=
 =?us-ascii?q?F80kKW+Cp6Re7FxJIFw/Ce3guaWDbwllahssbrmY9aYTEeBHawyS/hBIRJfK19?=
 =?us-ascii?q?YZ4LCXuyI82w3th+nZ/tVGJC+165GlwG39WleRyMYFzn3A1czFgYrmajmSSl0T?=
 =?us-ascii?q?N0iTYprqyE0SzKwuTicgcHO2FRSGlji1fsPZa7j9QAUEe0aAgpkQOv5VzmyKhD?=
 =?us-ascii?q?uKR/M27TTF9Ifij3NW1jUrG8tqGfY85J854otSRXUOKhYVGVULL9oh0a0z/9EG?=
 =?us-ascii?q?ta3jw0azaqupDhlRxglG2dNGpzrGbeecxoxxfQ/sbcRf1S3joBXiV4kiPYBlu/?=
 =?us-ascii?q?P9mo+9WbiZHDv/u6V2KgUJ1TbCbqwZmBtCu9+W1lHxm/k+qvld3gFAgwyTX72M?=
 =?us-ascii?q?VyVSXUsBb8ZZHm1qSgPuJgZEVoBl7868xhF4F6k4swgowQ2HcAipWU+3oHjXn8?=
 =?us-ascii?q?MdFB1a3ia3oNQCYBw8TJ7wj9xE1jMnWJypr6VnqHw8ttfdm6Yn4M1SI74MBHE6?=
 =?us-ascii?q?OU7L1CnStorVu0twPRYf5hnjgDzfsi8mIVg+YMuAA11CWSHqgSHVVEPSzrjxmI?=
 =?us-ascii?q?6tG+rKZNa2q1f7m/ylF+ncy/A7GYuQ5TRmz5epg5EC9078V/Nk/M0XLp5oHlft?=
 =?us-ascii?q?nQccwcthmOnxjciOhVLYo7luAWiip/JWL9oXolxvYnjRxp2JG2pomGJH9r/KKk?=
 =?us-ascii?q?GR5YLTz1atgX+jHsi6Zeg8mX05quHpVnBjUEQp/oQei0HzIVsPTtLxyOHyEkqn?=
 =?us-ascii?q?eHBbrfGheS51x8oHLIF5CrKmubJH0Ezdh5QBmdJUpfgB0bXTkgn545EByqy9Ll?=
 =?us-ascii?q?cEtj+j8R4Vv4oANWyu10Lxn/TnvfpACwZzc2UpefKQRZ7hpY60fJK8Ce7f9zHy?=
 =?us-ascii?q?JF/p2ntgONMXeWZwBJDWEPR0yFCErvPrio5dnc7eeYAvCyIOfJYbWLseZeTeuH?=
 =?us-ascii?q?xYqz0ot6+DaBLsWOPn5/D/0ix0pMR3Z5F97CmzUITSwXmDnAb8qapBe65y12od?=
 =?us-ascii?q?qz8PXtWALz+4SPD6FePslo+xCzma2DLfKfhD5lKTZE0ZMB3X/Ix6Ye3F4RiCFu?=
 =?us-ascii?q?diOhEbcatS7KQ6LfhLVXDwMAay5oMMtI7qQ83hRCOMLBi9P10KJ4geAxC1tfSV?=
 =?us-ascii?q?PhncSpb9QQI26hLFPHGFqLNLOeKDLR3sH4erm8RqNQjelOsx2wuC2WE0viPjSF?=
 =?us-ascii?q?ijnoWAqjMeBKjCGHIhNevJuxfQpqCWjmVNjmcAG0MMdrjT0qxr05nm/KNW8ZMT?=
 =?us-ascii?q?Rmb0xBtKGf7SNGjfV5AGFB6ntlLe+ZmyeW9eXYK5AWsed1DSRwje5V/HM6y75N?=
 =?us-ascii?q?5iFeWPN1gDfSrsJpo1y+kuiA0DxnUB9PqjZNnI2KvEViNr/f9plPQnvE+BMN7W?=
 =?us-ascii?q?ONCxUFvddlC9vvu7xOxdjLjq78NDBC89eHtfcbUuHSJNPPFGc9Nh/oAiXXDUNR?=
 =?us-ascii?q?SSO3MkncilZbnfXU8Wea+MsUsJ/pzaEDQ7kTf1wvF+gGDVxlEcYZJ5E/CigpmL?=
 =?us-ascii?q?jdjogD5WC/twXWXMVXpIvAUNqTB+niLHCSirwSNEhA+q/xMYlGbt6z4EdlcFQv?=
 =?us-ascii?q?2d2SQ0c=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ACAADjV/1bh0O0hNFkGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBg1kSJ4wRX4spKYFkEQOXLIFzFBgTAYh6IjQ?=
 =?us-ascii?q?JDQEDAQEBAQEBAgETAQEBCA0JCCkvgjYkAYJiAQIDAQIkEz8GCQEBCg4KCSUDD?=
 =?us-ascii?q?AVJEwWDHIICBaYBM4NBhmqMDXqBHIERghR+hDsgg1uCJgKJI4FyhAt3hSiKTQc?=
 =?us-ascii?q?CkSULGIFZiC+HA5g3gUaCDXCDPIInF44+HgEBMYEFAQGKQw4XgicBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ACAADjV/1bh0O0hNFkGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBg1kSJ4wRX4spKYFkEQOXLIFzFBgTAYh6IjQJDQEDAQEBAQEBA?=
 =?us-ascii?q?gETAQEBCA0JCCkvgjYkAYJiAQIDAQIkEz8GCQEBCg4KCSUDDAVJEwWDHIICBaY?=
 =?us-ascii?q?BM4NBhmqMDXqBHIERghR+hDsgg1uCJgKJI4FyhAt3hSiKTQcCkSULGIFZiC+HA?=
 =?us-ascii?q?5g3gUaCDXCDPIInF44+HgEBMYEFAQGKQw4XgicBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,286,1539673200"; 
   d="scan'208";a="53504871"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 27 Nov 2018 06:46:08 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728506AbeK1BoN (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 27 Nov 2018 20:44:13 -0500
Received: from mga14.intel.com ([192.55.52.115]:62065 "EHLO mga14.intel.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726299AbeK1BoN (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 27 Nov 2018 20:44:13 -0500
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from orsmga001.jf.intel.com ([10.7.209.18])
  by fmsmga103.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 27 Nov 2018 06:46:04 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,286,1539673200"; 
   d="scan'208";a="112292528"
Received: from sjchrist-coffee.jf.intel.com (HELO linux.intel.com) ([10.54.74.154])
  by orsmga001.jf.intel.com with ESMTP; 27 Nov 2018 06:46:04 -0800
Date: Tue, 27 Nov 2018 06:46:04 -0800
From: Sean Christopherson <sean.j.christopherson@intel.com>
To: Andy Lutomirski <luto@kernel.org>
Cc: x86@kernel.org, LKML <linux-kernel@vger.kernel.org>,
        Yu-cheng Yu <yu-cheng.yu@intel.com>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        Peter Zijlstra <peterz@infradead.org>,
        Borislav Petkov <bp@alien8.de>
Subject: Re: [PATCH 12/13] x86/fault: Decode page fault OOPSes better
Message-ID: <20181127144603.GA3130@linux.intel.com>
References: <cover.1542667307.git.luto@kernel.org>
 <9c621efcf6a86f7d215941dab3dca0acd1274638.1542667307.git.luto@kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <9c621efcf6a86f7d215941dab3dca0acd1274638.1542667307.git.luto@kernel.org>
User-Agent: Mutt/1.5.24 (2015-08-30)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Mon, Nov 19, 2018 at 02:45:36PM -0800, Andy Lutomirski wrote:
> One of Linus' favorite hobbies seems to be looking at OOPSes and
> decoding the error code in his head.  This is not one of my favorite
> hobbies :)
> 
> Teach the page fault OOPS hander to decode the error code.  If it's
> a !USER fault from user mode, print an explicit note to that effect
> and print out the addresses of various tables that might cause such
> an error.
> 
> With this patch applied, if I intentionally point the LDT at 0x0 and
> run the x86 selftests, I get:
> 
> BUG: unable to handle kernel NULL pointer dereference at 0000000000000000
> HW error: normal kernel read fault
> This was a system access from user code
> IDT: 0xfffffe0000000000 (limit=0xfff) GDT: 0xfffffe0000001000 (limit=0x7f)
> LDTR: 0x50 -- base=0x0 limit=0xfff7
> TR: 0x40 -- base=0xfffffe0000003000 limit=0x206f
> PGD 800000000456e067 P4D 800000000456e067 PUD 4623067 PMD 0
> SMP PTI
> CPU: 0 PID: 153 Comm: ldt_gdt_64 Not tainted 4.19.0+ #1317
> Hardware name: ...
> RIP: 0033:0x401454
> 
> Signed-off-by: Andy Lutomirski <luto@kernel.org>
> ---
>  arch/x86/mm/fault.c | 84 +++++++++++++++++++++++++++++++++++++++++++++
>  1 file changed, 84 insertions(+)
> 
> diff --git a/arch/x86/mm/fault.c b/arch/x86/mm/fault.c
> index 092ed6b1df8a..f34241fcc633 100644
> --- a/arch/x86/mm/fault.c
> +++ b/arch/x86/mm/fault.c
> @@ -27,6 +27,7 @@
>  #include <asm/vm86.h>			/* struct vm86			*/
>  #include <asm/mmu_context.h>		/* vma_pkey()			*/
>  #include <asm/efi.h>			/* efi_recover_from_page_fault()*/
> +#include <asm/desc.h>			/* store_idt(), ...		*/
>  
>  #define CREATE_TRACE_POINTS
>  #include <asm/trace/exceptions.h>
> @@ -571,10 +572,53 @@ static int is_f00f_bug(struct pt_regs *regs, unsigned long address)
>  	return 0;
>  }
>  
> +static void show_ldttss(const struct desc_ptr *gdt, const char *name, u16 index)
> +{
> +	u32 offset = (index >> 3) * sizeof(struct desc_struct);
> +	unsigned long addr;
> +	struct ldttss_desc desc;
> +
> +	if (index == 0) {
> +		pr_alert("%s: NULL\n", name);
> +		return;
> +	}
> +
> +	if (offset + sizeof(struct ldttss_desc) >= gdt->size) {
> +		pr_alert("%s: 0x%hx -- out of bounds\n", name, index);
> +		return;
> +	}
> +
> +	if (probe_kernel_read(&desc, (void *)(gdt->address + offset),
> +			      sizeof(struct ldttss_desc))) {
> +		pr_alert("%s: 0x%hx -- GDT entry is not readable\n",
> +			 name, index);
> +		return;
> +	}
> +
> +	addr = desc.base0 | (desc.base1 << 16) | (desc.base2 << 24);
> +#ifdef CONFIG_X86_64
> +	addr |= ((u64)desc.base3 << 32);
> +#endif
> +	pr_alert("%s: 0x%hx -- base=0x%lx limit=0x%x\n",
> +		 name, index, addr, (desc.limit0 | (desc.limit1 << 16)));
> +}
> +
> +static void errstr(unsigned long ec, char *buf, unsigned long mask,
> +		   const char *txt)
> +{
> +	if (ec & mask) {
> +		if (buf[0])
> +			strcat(buf, " ");
> +		strcat(buf, txt);
> +	}
> +}
> +
>  static void
>  show_fault_oops(struct pt_regs *regs, unsigned long error_code,
>  		unsigned long address)
>  {
> +	char errtxt[64];
> +
>  	if (!oops_may_print())
>  		return;
>  
> @@ -602,6 +646,46 @@ show_fault_oops(struct pt_regs *regs, unsigned long error_code,
>  		 address < PAGE_SIZE ? "NULL pointer dereference" : "paging request",
>  		 (void *)address);
>  
> +	errtxt[0] = 0;
> +	errstr(error_code, errtxt, X86_PF_PROT, "PROT");
> +	errstr(error_code, errtxt, X86_PF_WRITE, "WRITE");
> +	errstr(error_code, errtxt, X86_PF_USER, "USER");
> +	errstr(error_code, errtxt, X86_PF_RSVD, "RSVD");
> +	errstr(error_code, errtxt, X86_PF_INSTR, "INSTR");
> +	errstr(error_code, errtxt, X86_PF_PK, "PK");
> +	pr_alert("HW error: %s\n", error_code ? errtxt :
> +		 "normal kernel read fault");

What about something like this instead of manually handling the case
where error_code==0 so that we get e.g. "!PROT KERNEL READ" instead of
"normal kernel read fault"?  Not sure !PROT and/or KERNEL are needed,
but getting at least "PROT READ" seems useful.

	errstr(!error_code, errtxt, X86_PF_PROT, "!PROT");
	errstr(!error_code, errtxt, X86_PF_USER, "KERNEL");
	errstr(!error_code, errtxt, X86_PF_WRITE | X86_PF_INSTR, "READ");

And change the pr_alert to "HW error code:"?

The original is confusing (to me) because "HW error: normal kernel read fault"
obfuscates the fact that we're printing the #PF error code, i.e. it looks
like an arbitrary kernel message.


This:

    HW error code: !PROT KERNEL READ
    This was a system access from user code

or:

    HW error code: !PROT READ
    This was a system access from user code

or:

    HW error code: KERNEL READ
    This was a system access from user code

or:
    HW error code: READ
    This was a system access from user code

are all less confusing IMO.

> +	if (!(error_code & X86_PF_USER) && user_mode(regs)) {
> +		struct desc_ptr idt, gdt;
> +		u16 ldtr, tr;
> +
> +		pr_alert("This was a system access from user code\n");
> +
> +		/*
> +		 * This can happen for quite a few reasons.  The more obvious
> +		 * ones are faults accessing the GDT, or LDT.  Perhaps
> +		 * surprisingly, if the CPU tries to deliver a benign or
> +		 * contributory exception from user code and gets a page fault
> +		 * during delivery, the page fault can be delivered as though
> +		 * it originated directly from user code.  This could happen
> +		 * due to wrong permissions on the IDT, GDT, LDT, TSS, or
> +		 * kernel or IST stack.
> +		 */
> +		store_idt(&idt);
> +
> +		/* Usable even on Xen PV -- it's just slow. */
> +		native_store_gdt(&gdt);
> +
> +		pr_alert("IDT: 0x%lx (limit=0x%hx) GDT: 0x%lx (limit=0x%hx)\n",
> +			 idt.address, idt.size, gdt.address, gdt.size);
> +
> +		store_ldt(ldtr);
> +		show_ldttss(&gdt, "LDTR", ldtr);
> +
> +		store_tr(tr);
> +		show_ldttss(&gdt, "TR", tr);
> +	}
> +
>  	dump_pagetable(address);
>  }
>  
> -- 
> 2.17.2
> 
