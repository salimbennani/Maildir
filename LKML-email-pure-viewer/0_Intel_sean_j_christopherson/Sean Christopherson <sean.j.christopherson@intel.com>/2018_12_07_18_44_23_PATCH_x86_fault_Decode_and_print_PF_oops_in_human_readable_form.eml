Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 09 Dec 2018 18:52:37 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 89EE35804F9;
	Fri,  7 Dec 2018 10:44:37 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga003-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 07 Dec 2018 10:44:36 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A5sbCMR+aGmVlPf9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1O8WIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CRWRPQNtfWSJCDI27?=
 =?us-ascii?q?bYQPAeUOM+lDr4nlpVYDtgeyCAq2Ce/z0DJEmmP60Ksn2OohCwHG2wkgEsoTvn?=
 =?us-ascii?q?vKttr1MroZXP61zKnSzDXDdO9W2TDl6IjIbB8hu+qMXbV2ccHMzkQvDB3KgU+W?=
 =?us-ascii?q?qYD/PTOZzPgCs2iB7+phTuKvl2knqxlxojex3McskY7JhoQOx1DF8yV53Jg6Jd?=
 =?us-ascii?q?miREFnZt6kFYJduieHPIV4RcMiRntnuCc8yrAeup60YjIKyJI5yB7bcfCHdJKI?=
 =?us-ascii?q?4h3lWe2MIjl4nGpodKyjixu260Ss1+PxWteu3FpXrSdJjsPAu3EP2hDL98SKRP?=
 =?us-ascii?q?Rw8l281TuB2A3f8PxILE41mKbBNpIt3L89m5wOukrZBCD2gl/5jKqOe0Uk5Oeo?=
 =?us-ascii?q?7+Pnb634pp+TKYB0kBvyMqcwlcylB+Q3LAwOU3Kc+eSm273v5Uz5QLNUgf0qiq?=
 =?us-ascii?q?TVrozWKMABqqKkDQJZzJwv5wu8Aju6ytgVnHsKIEpAeB2djojpP1/OIOr/Dfe6?=
 =?us-ascii?q?m1mslDZrx/bbPrzuG5nNLWbMkK3nfblj705Q0Q0zzN5Z551KELEMO+zzWkDvu9?=
 =?us-ascii?q?zCFBM5MBK7w/zhCNpj0oMSQ2WPArWWMK/Kq1+H+vovI/WQZI8SoDv9L/kl5/3w?=
 =?us-ascii?q?gnMjll4dYLKk3Z8WaHC+A/RnLF+VYXvqgtcdD2gKuhAyQ/DtiF2HSTRTfWq9X7?=
 =?us-ascii?q?og5jEnD4KrFYfDSZqsgLydxii7GYdaZmBbCl+WF3foeJ6JW/MNaCKUP89gnSYI?=
 =?us-ascii?q?VbmnS489yx6usBX2xKZgLurR4icYr47s1MBp5+3PkhE/7T50D8OD3G2XTGF0mW?=
 =?us-ascii?q?UIRzkx3K1kpUx9y1GD0bV3gvBCFNxT4e9JXRk+NZLG0+N6DNXyUBrbftiVUFam?=
 =?us-ascii?q?XsmmATYpQ90r2N8OY0F9G9a4ghDZxSWqAaQYl7iKBJwy76Ld0GL9J8d7y3bayq?=
 =?us-ascii?q?Yhi0MqTddINW2jnqR/7RTcB5bVk0WFkKanbacc0zTL9GuZyWqOvVtXUAh/Uaje?=
 =?us-ascii?q?WXAfZ03Wrcn250/YTr+uD6gnPRVFycKYNqRKbdjph01cRPj/INTef36xm2CoCB?=
 =?us-ascii?q?mV3LyMcpTld38d3CrHDkgEiB4c/XCBOQg6BSehpmbeASdqFVLuZUPs7OZ/pGm6?=
 =?us-ascii?q?Tk8y0wGFcUlh26Cp9R4SgPyWU+kT0a4cuCc9tzV0G06w0M/MBNqeuQVtZqVcbs?=
 =?us-ascii?q?k74Fdcy23ZsRdwPpihL6Bkm14ffB57v0Lo1xVrFIpAldImo28tzAp3MaiYyk9O?=
 =?us-ascii?q?dyuE3ZDsPb3aMnXy/BGqa67RxlHe0NaX9r0T6PgirFXjpgWpFksk83VoyNRV13?=
 =?us-ascii?q?qc5pPXDAsdS57xU0A39wRkqLHeeCUy+4TU1Xh0O6murjDCw84pBPciyhu4Zdhf?=
 =?us-ascii?q?NL2LFQDsHMwaHcShM/EqlEWzYRICP+BS87A0Mtiid/uH3q6rIelhkCinjWRB/I?=
 =?us-ascii?q?ByzEaM+zBgRe7P2pYP2+uY0RefVzfgkFehtdj6mIBZZT0IAmWz0ynlBI5Laa10?=
 =?us-ascii?q?coYGEmOuI8yxxtVjiJ/hQX9Y9Fi/B1wY3M+lYwadb1v43QdIz0QYvWSnmTekzz?=
 =?us-ascii?q?xzizwptKuf0zDUzOT4aRUHPXRHRG98glf2IIi4lswVU1Ksbwc0ihSl/0H6x65A?=
 =?us-ascii?q?qaR7LmnTR1pIfifsI2FjVKuwqqSNY8pV5Jw0tiVXVfy2YUqGRb7lvxsazyTjEn?=
 =?us-ascii?q?NexTA6bT2ruo/1nwdniGKbN3tzqHvZecdtxRbQ/tDcRPhR3iYYSyl8kzXYGl+8?=
 =?us-ascii?q?P9yx99WOi5jDqvy+V36mVpBLcynk15mAtCi45W1tGxG/hOq8mt7kEQg71y/0yd?=
 =?us-ascii?q?9qWD7MrBb9ZInryqu7PfhmfkluGF/z9c56FptinYs3gZEawWIaiYmN/XobjWfz?=
 =?us-ascii?q?Ns1W2KLkY3oKXzILwd/V4A7+1U1nL3KJwZ/5V3qHzstgYdm6fn0Z2iYn489WD6?=
 =?us-ascii?q?eU6aROnTFprVqgsQLRff99ky8eyfQ06X4WmeEJuBc3wSWbDbAfBk1YPS3qlxSV?=
 =?us-ascii?q?4NGytqRXZGCzcbeu0Epyh8yuDLaHogtEQnb2Zo8iHTNs7sV4KF/M1Xzz6oL+d9?=
 =?us-ascii?q?XKY9McqAaUkwvegOhPM50+iOAKhSV8NGL5vH0lzfM7jBN00ZG7uoiHN3ti/Kaj?=
 =?us-ascii?q?DhFEMT31YtsZ+ivxgqZGgsaWw4evE419GjUMWZvkV/OpHygUtfT6LAaOCzw8p2?=
 =?us-ascii?q?yfGbreGw+f9Uhno2jOE5CtK3GYOn0Zwc9+SxmaIUxVmBoUUykinp4lCgCqw9Ts?=
 =?us-ascii?q?f1xj6TAW4l74twFAyuZ1NxTkVmffpQGoaio7SZSFLRpW6B1C6FnRMcCE8u1zGC?=
 =?us-ascii?q?RY9IW7rAORMmybexhIDWYRV0yGHV/jO6eh5cLa/+iEHOa+LObOYbaTqexYTfiI?=
 =?us-ascii?q?3omi0o9n/zaKK8WOMWNuD/w92kpfQ395H97VlCkISywSjyjNddKUpA+g+i1rqc?=
 =?us-ascii?q?Cy6PTqWAXy5YuWFrtdK9Nv9wqtgaeEMe6Qiz10KTJZ1pMK2H/Jx6IT3F8UiyFy?=
 =?us-ascii?q?aTatFa4MujLKTKLVgqVXFQIUaztvNMtU6KIxxglNNtDaitP21b54j+Q5C1RfVV?=
 =?us-ascii?q?zmlcGme9YKI3ymNF7cAEaLNbKGJSDEws3tYKO8T6FQg/tQtxGqpTmbFErjNCyZ?=
 =?us-ascii?q?lzb1TxCvLf1MjCaDMRNEpYGyaQxtBnbjTd78bh27McR6jTk3wb0ym3PLOnQQMT?=
 =?us-ascii?q?l6c0NRsLKQ6TlUjel4G2xE9nBlN/WLmz6F7+nELZYbqedrAiVxl+5A/Hs20ada?=
 =?us-ascii?q?7CFaS/xzgybSqt9uo1e7kuiA0DZnURxOqipVi4KPp0ltJaLZ9pxYU3be4B0N9X?=
 =?us-ascii?q?mQCwgNp9Z9CtzgoaZQyt3OlKL1MDhD8tLU8tEaB8jbM8+HNHshMRz0GD/bFgcF?=
 =?us-ascii?q?TDirNX3BiExZiv2d6nqVrp1p4qTrzbYHVLITdFUzDf4cQhBpFcIPZpd+WCgpl5?=
 =?us-ascii?q?afjcgV9Ty/qgXcQINRuZWRErq7B/n+YBKEkb5BZgETwrKweYAOKorT2EF4bFR+?=
 =?us-ascii?q?2oPQFByUFehAviB7Jj01okFW7GJ3Bjkr1l7ocBGF4XkdD/e4kxc6zAxkbrJpvA?=
 =?us-ascii?q?vs5FI+PRLloCYxgE88g52xnT+VYBb1LaGtQZtRDSvk8UQ8ZNezYgB6akWXmkhi?=
 =?us-ascii?q?PS2ME7dQibRnXXpmhA/Vpd1EHvsKCeVuZwUR3vWeeb0Q3EhfrTvvkUVfzeLBCJ?=
 =?us-ascii?q?ZkxE0mfMjo52IQhSpgYcQzKKiWI7BGnXZKgafbhSKh0KgawBUfPFoK6GOfYjUP?=
 =?us-ascii?q?vgRcLbQvIWyquOds8w2ZhzxbeGUWTP0sivNs6k45fe+HynSzgPZ4NkmtOrnHfO?=
 =?us-ascii?q?uisG/amJvNGwto2w=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ADAAB1vgpch0O0hNFjGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGCaYECJ4wTjBEpgT85lzuBcxQYDQYBh10iNAkNAQM?=
 =?us-ascii?q?BAQEBAQECARMBAQEIDQkIKSMMgjYkAYJiAwMBAi8BRgYJAQFQA1QGARIFgxwBg?=
 =?us-ascii?q?gEFCqcYhAIBhiUFh3OEL3qBHIERM4IxggKBSgSBGSYBAYV5Aok3gXCEFHyPakY?=
 =?us-ascii?q?HAocGgRqJIAsYgVyIPYceAYkQhHGLGoFGgg1wgzyCJxeIXoUIAVceAQExAQGBA?=
 =?us-ascii?q?wEBiCeCPgEB?=
X-IPAS-Result: =?us-ascii?q?A0ADAAB1vgpch0O0hNFjGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGCaYECJ4wTjBEpgT85lzuBcxQYDQYBh10iNAkNAQMBAQEBAQECARMBA?=
 =?us-ascii?q?QEIDQkIKSMMgjYkAYJiAwMBAi8BRgYJAQFQA1QGARIFgxwBggEFCqcYhAIBhiU?=
 =?us-ascii?q?Fh3OEL3qBHIERM4IxggKBSgSBGSYBAYV5Aok3gXCEFHyPakYHAocGgRqJIAsYg?=
 =?us-ascii?q?VyIPYceAYkQhHGLGoFGgg1wgzyCJxeIXoUIAVceAQExAQGBAwEBiCeCPgEB?=
X-IronPort-AV: E=Sophos;i="5.56,327,1539673200"; 
   d="scan'208";a="65836336"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 07 Dec 2018 10:44:35 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726209AbeLGSoc (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 7 Dec 2018 13:44:32 -0500
Received: from mga18.intel.com ([134.134.136.126]:4013 "EHLO mga18.intel.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726041AbeLGSob (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 7 Dec 2018 13:44:31 -0500
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from fmsmga008.fm.intel.com ([10.253.24.58])
  by orsmga106.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 07 Dec 2018 10:44:31 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,327,1539673200"; 
   d="scan'208";a="107838178"
Received: from sjchrist-coffee.jf.intel.com ([10.54.74.154])
  by fmsmga008.fm.intel.com with ESMTP; 07 Dec 2018 10:44:30 -0800
From: Sean Christopherson <sean.j.christopherson@intel.com>
To: Dave Hansen <dave.hansen@linux.intel.com>,
        Andy Lutomirski <luto@kernel.org>,
        Peter Zijlstra <peterz@infradead.org>,
        Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        x86@kernel.org
Cc: "H. Peter Anvin" <hpa@zytor.com>, linux-kernel@vger.kernel.org,
        Linus Torvalds <torvalds@linux-foundation.org>,
        Rik van Riel <riel@surriel.com>,
        Yu-cheng Yu <yu-cheng.yu@intel.com>,
        Ingo Molnar <mingo@kernel.org>
Subject: [PATCH] x86/fault: Decode and print #PF oops in human readable form
Date: Fri,  7 Dec 2018 10:44:23 -0800
Message-Id: <20181207184423.1962-1-sean.j.christopherson@intel.com>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <CAHk-=whk_fsnxVMvF1T2fFCaP2WrvSybABrLQCWLJyCvHw6NKA@mail.gmail.com>
References: <CAHk-=whk_fsnxVMvF1T2fFCaP2WrvSybABrLQCWLJyCvHw6NKA@mail.gmail.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Linus pointed out[1] that deciphering the raw #PF error code and
printing a more human readable message are two different things,
e.g. not-executable, not-writable, protection keys and even SGX faults
are all some form of permission violation faults, and a #PF with the
USER bit cleared in the error code does not indicate that the fault
originated in kernel code.

Remove the per-bit decoding of the error code and instead print the raw
error code followed by a brief description of what caused the fault, the
effective privilege level of the faulting access, and whether the fault
originated in user code or kernel code.

This provides the user with the information needed to do basic triage
on 99.9% oopses without polluting the message with information that is
useless the vast majority of the time, e.g. an oops on a protection keys
violation is beyond rare, stating that an oops *wasn't* due to a keys
violation is pointless noise.

[1] https://lkml.kernel.org/r/CAHk-=whk_fsnxVMvF1T2fFCaP2WrvSybABrLQCWLJyCvHw6NKA@mail.gmail.com

Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
Cc: Andy Lutomirski <luto@kernel.org>
Cc: Borislav Petkov <bp@alien8.de>
Cc: Dave Hansen <dave.hansen@linux.intel.com>
Cc: H. Peter Anvin <hpa@zytor.com>
Cc: Linus Torvalds <torvalds@linux-foundation.org>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Rik van Riel <riel@surriel.com>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Yu-cheng Yu <yu-cheng.yu@intel.com>
Cc: linux-kernel@vger.kernel.org
Cc: Ingo Molnar <mingo@kernel.org>
Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
---
 arch/x86/mm/fault.c | 41 ++++++++++-------------------------------
 1 file changed, 10 insertions(+), 31 deletions(-)

diff --git a/arch/x86/mm/fault.c b/arch/x86/mm/fault.c
index 2ff25ad33233..85de05d41f58 100644
--- a/arch/x86/mm/fault.c
+++ b/arch/x86/mm/fault.c
@@ -603,24 +603,9 @@ static void show_ldttss(const struct desc_ptr *gdt, const char *name, u16 index)
 		 name, index, addr, (desc.limit0 | (desc.limit1 << 16)));
 }
 
-/*
- * This helper function transforms the #PF error_code bits into
- * "[PROT] [USER]" type of descriptive, almost human-readable error strings:
- */
-static void err_str_append(unsigned long error_code, char *buf, unsigned long mask, const char *txt)
-{
-	if (error_code & mask) {
-		if (buf[0])
-			strcat(buf, " ");
-		strcat(buf, txt);
-	}
-}
-
 static void
 show_fault_oops(struct pt_regs *regs, unsigned long error_code, unsigned long address)
 {
-	char err_txt[64];
-
 	if (!oops_may_print())
 		return;
 
@@ -648,27 +633,21 @@ show_fault_oops(struct pt_regs *regs, unsigned long error_code, unsigned long ad
 		 address < PAGE_SIZE ? "NULL pointer dereference" : "paging request",
 		 (void *)address);
 
-	err_txt[0] = 0;
-
-	/*
-	 * Note: length of these appended strings including the separation space and the
-	 * zero delimiter must fit into err_txt[].
-	 */
-	err_str_append(error_code, err_txt, X86_PF_PROT,  "[PROT]" );
-	err_str_append(error_code, err_txt, X86_PF_WRITE, "[WRITE]");
-	err_str_append(error_code, err_txt, X86_PF_USER,  "[USER]" );
-	err_str_append(error_code, err_txt, X86_PF_RSVD,  "[RSVD]" );
-	err_str_append(error_code, err_txt, X86_PF_INSTR, "[INSTR]");
-	err_str_append(error_code, err_txt, X86_PF_PK,    "[PK]"   );
-
-	pr_alert("#PF error: %s\n", error_code ? err_txt : "[normal kernel read fault]");
+	pr_alert("#PF: error_code(0x%04lx) - %s\n", error_code,
+		!(error_code & X86_PF_PROT) ? "not-present page" :
+		(error_code & X86_PF_RSVD)  ? "reserved bit violation" :
+					      "permissions violation");
+	pr_alert("#PF: %s-privileged %s from %s code\n",
+		(error_code & X86_PF_USER)  ? "user" : "supervisor",
+		(error_code & X86_PF_INSTR) ? "instruction fetch" :
+		(error_code & X86_PF_WRITE) ? "write access" :
+					      "read access",
+			    user_mode(regs) ? "user" : "kernel");
 
 	if (!(error_code & X86_PF_USER) && user_mode(regs)) {
 		struct desc_ptr idt, gdt;
 		u16 ldtr, tr;
 
-		pr_alert("This was a system access from user code\n");
-
 		/*
 		 * This can happen for quite a few reasons.  The more obvious
 		 * ones are faults accessing the GDT, or LDT.  Perhaps
-- 
2.19.2

