Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 27 Nov 2018 08:38:19 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 3C472580322;
	Mon, 26 Nov 2018 08:56:23 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 26 Nov 2018 08:56:22 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AR2p52BKl8GslFMFIQNmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgUL/3yrarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZXchfSixPDJ2y?=
 =?us-ascii?q?YYQNAeoOIehXoIbyqVsVtRuzBxKhBP/txzJSmnP6wbc33/knHArb3AIgBdUOsH?=
 =?us-ascii?q?HModvxM6cdT/2+wrPWwjXZc/xW2Sny6JPVeR0mo/GMWqx/fNHJyUYxDQPKklWQ?=
 =?us-ascii?q?ppL+Pz+PyusNtG2b4vNmWOmyhWAnrARxrSKuxscqkoTGnJ4Vykze9SljxoY6P9?=
 =?us-ascii?q?i4R1B9bNW5E5VQrzmXO5VqTs4mWW1kpSg3xqMctZKmfyUG1I4ryh/dZvCffIWF?=
 =?us-ascii?q?4AjvWPuRLDtlnn5pZbKyihio/UWgxODxUNS/3kxQoSpfiNbMs2gA1xzN5ciDTf?=
 =?us-ascii?q?tw5lmh2TmR2ADJ8O1EIl47lbDdK5E/xr48jJ0TsV7MHiPumUX2irGZdlk89+S2?=
 =?us-ascii?q?9+jqZq/qqoKSOoNqkA3yL6cjltClDek5MAUCR22b9v691L3n8035WrJKjvgun6?=
 =?us-ascii?q?ndsZDaI9kbp6GgDw9WzIkj8RC/ACmi0NgBmnkGIlRFdwydj4XyJVHOL+73De2l?=
 =?us-ascii?q?j1Svjjhr3fbGMaPlApnXKXjDirjhca5n60FA0Aoz0cxf55VMB7EFIfLzWVH+uM?=
 =?us-ascii?q?bXDx8kKAG0x+fnCNNg1oIRQ26PA6mZML/Mvl+M/O4gP+6MZIoNsjbnN/cl/+Lu?=
 =?us-ascii?q?jWM+mVIFfammx5oXaGyiEfRhOUmZYWfsjc0HEWcFpQc+SO3qiFufUT9cfXqyXq?=
 =?us-ascii?q?Q85i0lB4KiF4vMWoetgLmZ1iehApJWfnxGCkyLEXrwdYWEXOkDZDiRIs9mlDwE?=
 =?us-ascii?q?U7+hRpQl1RGvsg/61rVmIvDV+i0eqZLsytx16/fPmhE18Dx+F96d3H2VT2Fogm?=
 =?us-ascii?q?MIQCc707pkoUx9zVeD0rJ0g+ZCGtxR/P5JVgY6NZjBz+11EdzyWwTBfsuXR1ai?=
 =?us-ascii?q?WNmpHTYxTtcpyd8Uf0l9A8mijgzE3yeyAL8ajbqLCIYw8qLdxXfxIcl9xm3C1K?=
 =?us-ascii?q?kgiVkmX8ROOXenhq556wjcGYrJn1+FmKatcKQWxDTN+3ubzWqSoEFYVxZ9Xrjf?=
 =?us-ascii?q?UnABeETat9T56VnET7+1F7snNAxNycqBKqtPbt3kllFGRPblONTDbGO9gWawBR?=
 =?us-ascii?q?CUxrySaIrmYXkS3CLYCEIciQAc4W6GNRQiBiemu2/RESZhFUzxbE/28elxsnW7?=
 =?us-ascii?q?TlQqwAGMdEBh07u1+hgIhf2TUf8T37QEuDs/pDVwBlqyw9XWC9+YrQp7YKpcec?=
 =?us-ascii?q?894EtA1W/Bqwx9P5mgL6d+hl4ecwV7pV/u2w9wCoValcgqrXUqzAVpJKKc0VNB?=
 =?us-ascii?q?cS6Y3J/qNr3WLGny4A6ga6rM1l7C19aW/78F6O4kpFX7oAGpCk0i/m193NlRzX?=
 =?us-ascii?q?Sd6YvFDQoIXZ3qT0Y46gJ1p7fZYik6+YPZznlsMaiysj/f1NMlHuolyhC8f9hB?=
 =?us-ascii?q?NKOIDhP9E8ofB8K2Muwlh0Cpbg4YPOBV7KM1P96me+Ga16KxPedgnCipjWJI4I?=
 =?us-ascii?q?1m1kKM9ix8SvPH3pofwvGY2BeHWCn4jFu7rs/3noVEbykIHmWj0SjkGJJRZqpq?=
 =?us-ascii?q?cIYRCGehP9e4xs9jiJ7qQXJY8kCsB0kH2MOwZRWddVj90hBO2kQNpnynnzC1zz?=
 =?us-ascii?q?h1kzEvs6qe0zbCw+XkdBobJGFLQHNugkvrIYixl9oaRlSnbxA1lBu54kb336ha?=
 =?us-ascii?q?pKVlI2jTW0tIZDX2L2d5X6u0t7qCZdNP6ZwyvSVWVuS8fU6VSrrnrxQG1CPjGn?=
 =?us-ascii?q?NUxConeDGyppX5gxt6hXqfLHlptnrZesJwxRDF6NzHX/FR3TkGRCh+iTbJAFix?=
 =?us-ascii?q?JN2p/dSSl5feveGyTWOhVptPcSb1yYOMrje05WpvARenhfC8hsXnERQm0S/8z9?=
 =?us-ascii?q?RrVT/HrBHmbonp1qS6N/lqfk1pBF/69sp7FZtykoo2hJEMx3cago+Z8mYAkWf2?=
 =?us-ascii?q?Kd9bw77xbGIRRT4XxN7Y+Avl11diLn6Tx4L5S2+Sws1uZ9ShZmMW2yQ9791FCa?=
 =?us-ascii?q?uO7bxEmzd1rUS8rQ7Lffd9mTIdw+M06HEGm+EJpBYtziKFD7AXHElYPjbjmw6G?=
 =?us-ascii?q?7t+gt6VXeHigcaKr20Vgh9ChA6qPogVdWHb/Z5cjEjV87sR5MFLQznLz7pvod8?=
 =?us-ascii?q?XXbdIWrheUiQvPj/BJKJItkfoHnTZnOWX4vXE/yu80lxpu3YyhvIicKmVg56a5?=
 =?us-ascii?q?Ah9eNj3oaMIf4DDtjaBCnsmI24CjBIluGjIOXJHwV/KnDCoStej7NwaJCDAzsW?=
 =?us-ascii?q?2UGb3bHQ+C8ktmq2/PHouvN3GWInkZ0NpjSAOcJExZnAAbQjE6koQlGQCtwczr?=
 =?us-ascii?q?aF156SwJ5l7kthtMzfplNxvlXWfaugiocS04SISFIBpV8wFC5FrVMcqE4eJoBC?=
 =?us-ascii?q?xY+pyhrAqQKm2UfQhIDGcJWlCaCFDnJLWh+d7A8+2ADOqkM/TOeamOqfBZV/qQ?=
 =?us-ascii?q?xZOv1ZZm/y+RNsqVOHluFeY72k1FXXB2AMnZnzQPSyoKlyPCdcKbpRG8+jFpoc?=
 =?us-ascii?q?C76vjkRAXv5Y6XAbtILdpv4wy2gbuEN+OIhCZ2NzdY1pAPxX/J0rQf30QSiyZh?=
 =?us-ascii?q?dzazC7QAqDXNQbnUmq9WCR4bdixyONFJ76I6wglCJ8rbhsnp2b5/i/4/E01FWk?=
 =?us-ascii?q?D5msG1ecwKJHmwO0naBEmQLrSJOz3Kz9vzYaO9UrBQiORUtxutuTeUCUPjPzKD?=
 =?us-ascii?q?lyX3WBCrK+1DkCabPBlGsoGnbhltEXTjTM7hahCjLN93jDg2zacoiX/QKWEcMS?=
 =?us-ascii?q?Zzc0VWo72U7CNYhOh/GmNb4npkK+mEhziW7+3CJpkKtvtrBzx+l/hG73Qi17tV?=
 =?us-ascii?q?8CZESeR1mSTIqN5uplCmku+XxTtmUBpBsDBLhI2QsEVmOKXZ8IRAWHne8BIM62?=
 =?us-ascii?q?WQFwoFp99/BtLzvKBQz4uHqKWmBD5Eu/nd59MRAdTZMorTPHMndxHgAibZChcI?=
 =?us-ascii?q?VxasL2jUg0Ebm/aXoDndiJkxqp/okYFGb7QTe0E0DP5SXkhoBpoCLY1tdjMjn6?=
 =?us-ascii?q?TdhdJetlSkqxyEZsJX9qjKTPmSDO6nfDSegJFcagEDwb7ja48UM9uoiARZdlBm?=
 =?us-ascii?q?kdGSSALrVtdXr3gkN1dsrQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0CxBQBWJfxbh0O0hNFkHQEBBQEHBQGBV?=
 =?us-ascii?q?AUBCwGCaYECJ4xwiyOCDRRmJIIminSKeikHDAGEQIQjIjcGDQEDAQEBAQEBAgE?=
 =?us-ascii?q?TAQEBCA0JCCkjDII2JAGCYQEBAQECAQECJFIFAQkBAQoYLgNUBgESBYMcAYF5C?=
 =?us-ascii?q?AMCpxczhC0BgROEXowJF4F/gRGCXTWEPUGFWwKJI4FuhAhCATSPcgmCIIRciku?=
 =?us-ascii?q?BWU2OYiyJQY5EgVuBd00jFYMnCYpQDWSFMSAxgQQBAQEgiQ4qgiMBAQ?=
X-IPAS-Result: =?us-ascii?q?A0CxBQBWJfxbh0O0hNFkHQEBBQEHBQGBVAUBCwGCaYECJ4x?=
 =?us-ascii?q?wiyOCDRRmJIIminSKeikHDAGEQIQjIjcGDQEDAQEBAQEBAgETAQEBCA0JCCkjD?=
 =?us-ascii?q?II2JAGCYQEBAQECAQECJFIFAQkBAQoYLgNUBgESBYMcAYF5CAMCpxczhC0BgRO?=
 =?us-ascii?q?EXowJF4F/gRGCXTWEPUGFWwKJI4FuhAhCATSPcgmCIIRcikuBWU2OYiyJQY5Eg?=
 =?us-ascii?q?VuBd00jFYMnCYpQDWSFMSAxgQQBAQEgiQ4qgiMBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,283,1539673200"; 
   d="scan'208";a="139594671"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 26 Nov 2018 08:56:21 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727205AbeK0Duy (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 26 Nov 2018 22:50:54 -0500
Received: from smtprelay0081.hostedemail.com ([216.40.44.81]:42108 "EHLO
        smtprelay.hostedemail.com" rhost-flags-OK-OK-OK-FAIL)
        by vger.kernel.org with ESMTP id S1726266AbeK0Duy (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 26 Nov 2018 22:50:54 -0500
Received: from filter.hostedemail.com (clb03-v110.bra.tucows.net [216.40.38.60])
        by smtprelay03.hostedemail.com (Postfix) with ESMTP id B6F8F837F242;
        Mon, 26 Nov 2018 16:56:12 +0000 (UTC)
X-Session-Marker: 6A6F6540706572636865732E636F6D
X-Spam-Summary: 2,0,0,,d41d8cd98f00b204,joe@perches.com,:::::::::::::::::::::::,RULES_HIT:1:2:41:69:355:379:599:800:960:973:982:988:989:1260:1277:1311:1313:1314:1345:1359:1437:1515:1516:1518:1593:1594:1605:1730:1747:1777:1792:1801:2194:2198:2199:2200:2393:2553:2559:2562:2693:2828:2895:2899:3138:3139:3140:3141:3142:3622:3865:3866:3867:3870:3871:3872:3873:3874:4051:4250:4321:4605:5007:6119:6121:7903:8531:8603:10004:10848:11026:11232:11473:11657:11658:11914:12043:12295:12296:12438:12555:12663:12679:12683:12740:12760:12895:12986:13439:14659:21080:21433:21451:21611:21627:30003:30054:30070:30083:30090:30091,0,RBL:47.151.153.53:@perches.com:.lbl8.mailshell.net-62.8.0.100 64.201.201.201,CacheIP:none,Bayesian:0.5,0.5,0.5,Netcheck:none,DomainCache:0,MSF:not bulk,SPF:fn,MSBL:0,DNSBL:none,Custom_rules:0:0:0,LFtime:29,LUA_SUMMARY:none
X-HE-Tag: sheep80_35decc2a17c63
X-Filterd-Recvd-Size: 10234
Received: from XPS-9350.home (unknown [47.151.153.53])
        (Authenticated sender: joe@perches.com)
        by omf05.hostedemail.com (Postfix) with ESMTPA;
        Mon, 26 Nov 2018 16:56:10 +0000 (UTC)
Message-ID: <8a67fcf5cd421ab369787468248b37709bb4bac1.camel@perches.com>
Subject: Re: [PATCH] staging: iio: adc: ad7280a: check for devm_kasprint()
 failure
From: Joe Perches <joe@perches.com>
To: Dan Carpenter <dan.carpenter@oracle.com>,
        Nicholas Mc Guire <der.herr@hofr.at>
Cc: Nicholas Mc Guire <hofrat@osadl.org>,
        Lars-Peter Clausen <lars@metafoo.de>,
        devel@driverdev.osuosl.org,
        Michael Hennerich <Michael.Hennerich@analog.com>,
        linux-iio@vger.kernel.org,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        linux-kernel@vger.kernel.org,
        Peter Meerwald-Stadler <pmeerw@pmeerw.net>,
        Hartmut Knaack <knaack.h@gmx.de>,
        Jonathan Cameron <jic23@kernel.org>
Date: Mon, 26 Nov 2018 08:56:08 -0800
In-Reply-To: <20181126132612.GJ2970@unbuntlaptop>
References: <1543225144-27468-1-git-send-email-hofrat@osadl.org>
         <20181126130032.GJ3088@unbuntlaptop> <20181126131009.GA19931@osadl.at>
         <20181126132612.GJ2970@unbuntlaptop>
Content-Type: text/plain; charset="ISO-8859-1"
User-Agent: Evolution 3.30.1-1build1 
Mime-Version: 1.0
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Mon, 2018-11-26 at 16:26 +0300, Dan Carpenter wrote:
> On Mon, Nov 26, 2018 at 02:10:09PM +0100, Nicholas Mc Guire wrote:
> > On Mon, Nov 26, 2018 at 04:00:32PM +0300, Dan Carpenter wrote:
> > > On Mon, Nov 26, 2018 at 10:39:04AM +0100, Nicholas Mc Guire wrote:
> > > > devm_kasprintf() may return NULL on failure of internal allocation thus
> > > > the assignments to  attr.name  are not safe if not checked. On error
> > > > ad7280_attr_init() returns a negative return so -ENOMEM should be
> > > > OK here (passed on as return value of the probe function).
> > > > 
> > > > Signed-off-by: Nicholas Mc Guire <hofrat@osadl.org>
> > > > Fixes: 2051f25d2a26 ("iio: adc: New driver for AD7280A Lithium Ion Battery Monitoring System2")
> > > > ---
> > > > 
> > > > Problem located with an experimental coccinelle script
> > > > 
> > > > As using   if(!st->iio_attr[cnt].dev_attr.attr.name)  seamed quite
> > > > unreadable in this case the  (var  == NULL)  variant was used. Not
> > >                                    ^^
> > > Why two spaces?
> > 
> > just a typo 
> > 
> > > > sure if there are objections against this (checkpatch.pl issues
> > > > a CHECK on this).
> > > > 
> > > 
> > > You should just follow checkpatch rules here.  If you don't, someone
> > > else will just send a patch to make it checkpatch compliant.  One thing
> > > you could do is at the start of the loop do:
> > > 
> > > 	struct iio_dev_attr *attr = &st->iio_attr[cnt];
> > > 
> > > Then it becomes:
> > > 
> > > 	if (!attr->dev_attr.attr.name)
> > > 
> > > It's slightly more readable that way.  Keep in mind that we increment o
> > > cnt++ in the middle of the loop so you'll have to update attr as well.
> > > 
> > My understanding was that CHECK: notes are not strict rules but
> > those that may vary from case to case.
> 
> Checkpatch is just a script.  It's not a genius or the king of the
> world.

Or, as someone once wrote, more sentient than a squirrel.

> I actually agree with checkpatch on this one but it's a minor thing.
> Sometimes a maintainer will get obsessed with minor things.

Like #include file ordering by length or alphabet

> Btw, when I get annoyed with checkpatch, I feel like it's pretty obvious
> I am correct.  I'm not like other kernel developers who have debatable
> style preferences...  ;)

Yup.

btw:  Using temporaries like the below can reduce object
size a bit too. (allyesconfig)

$ size drivers/staging/iio/adc/ad7280a.o*
   text	   data	    bss	    dec	    hex	filename
  16287	   2848	    896	  20031	   4e3f	drivers/staging/iio/adc/ad7280a.o.new
  16623	   2848	    896	  20367	   4f8f	drivers/staging/iio/adc/ad7280a.o.old

---
 drivers/staging/iio/adc/ad7280a.c | 116 ++++++++++++++++++--------------------
 1 file changed, 56 insertions(+), 60 deletions(-)

diff --git a/drivers/staging/iio/adc/ad7280a.c b/drivers/staging/iio/adc/ad7280a.c
index 0bb9ab174f2a..1542285b492c 100644
--- a/drivers/staging/iio/adc/ad7280a.c
+++ b/drivers/staging/iio/adc/ad7280a.c
@@ -499,6 +499,7 @@ static const struct attribute_group ad7280_attrs_group = {
 static int ad7280_channel_init(struct ad7280_state *st)
 {
 	int dev, ch, cnt;
+	struct iio_chan_spec *chan;
 
 	st->channels = devm_kcalloc(&st->spi->dev, (st->slave_num + 1) * 12 + 2,
 				    sizeof(*st->channels), GFP_KERNEL);
@@ -508,51 +509,52 @@ static int ad7280_channel_init(struct ad7280_state *st)
 	for (dev = 0, cnt = 0; dev <= st->slave_num; dev++)
 		for (ch = AD7280A_CELL_VOLTAGE_1; ch <= AD7280A_AUX_ADC_6;
 			ch++, cnt++) {
+			chan = &st->channels[cnt];
 			if (ch < AD7280A_AUX_ADC_1) {
-				st->channels[cnt].type = IIO_VOLTAGE;
-				st->channels[cnt].differential = 1;
-				st->channels[cnt].channel = (dev * 6) + ch;
-				st->channels[cnt].channel2 =
-					st->channels[cnt].channel + 1;
+				chan->type = IIO_VOLTAGE;
+				chan->differential = 1;
+				chan->channel = (dev * 6) + ch;
+				chan->channel2 = chan->channel + 1;
 			} else {
-				st->channels[cnt].type = IIO_TEMP;
-				st->channels[cnt].channel = (dev * 6) + ch - 6;
+				chan->type = IIO_TEMP;
+				chan->channel = (dev * 6) + ch - 6;
 			}
-			st->channels[cnt].indexed = 1;
-			st->channels[cnt].info_mask_separate =
-				BIT(IIO_CHAN_INFO_RAW);
-			st->channels[cnt].info_mask_shared_by_type =
+			chan->indexed = 1;
+			chan->info_mask_separate = BIT(IIO_CHAN_INFO_RAW);
+			chan->info_mask_shared_by_type =
 				BIT(IIO_CHAN_INFO_SCALE);
-			st->channels[cnt].address =
-				ad7280a_devaddr(dev) << 8 | ch;
-			st->channels[cnt].scan_index = cnt;
-			st->channels[cnt].scan_type.sign = 'u';
-			st->channels[cnt].scan_type.realbits = 12;
-			st->channels[cnt].scan_type.storagebits = 32;
-			st->channels[cnt].scan_type.shift = 0;
+			chan->address = ad7280a_devaddr(dev) << 8 | ch;
+			chan->scan_index = cnt;
+			chan->scan_type.sign = 'u';
+			chan->scan_type.realbits = 12;
+			chan->scan_type.storagebits = 32;
+			chan->scan_type.shift = 0;
 		}
 
-	st->channels[cnt].type = IIO_VOLTAGE;
-	st->channels[cnt].differential = 1;
-	st->channels[cnt].channel = 0;
-	st->channels[cnt].channel2 = dev * 6;
-	st->channels[cnt].address = AD7280A_ALL_CELLS;
-	st->channels[cnt].indexed = 1;
-	st->channels[cnt].info_mask_separate = BIT(IIO_CHAN_INFO_RAW);
-	st->channels[cnt].info_mask_shared_by_type = BIT(IIO_CHAN_INFO_SCALE);
-	st->channels[cnt].scan_index = cnt;
-	st->channels[cnt].scan_type.sign = 'u';
-	st->channels[cnt].scan_type.realbits = 32;
-	st->channels[cnt].scan_type.storagebits = 32;
-	st->channels[cnt].scan_type.shift = 0;
+	chan = &st->channels[cnt];
+	chan->type = IIO_VOLTAGE;
+	chan->differential = 1;
+	chan->channel = 0;
+	chan->channel2 = dev * 6;
+	chan->address = AD7280A_ALL_CELLS;
+	chan->indexed = 1;
+	chan->info_mask_separate = BIT(IIO_CHAN_INFO_RAW);
+	chan->info_mask_shared_by_type = BIT(IIO_CHAN_INFO_SCALE);
+	chan->scan_index = cnt;
+	chan->scan_type.sign = 'u';
+	chan->scan_type.realbits = 32;
+	chan->scan_type.storagebits = 32;
+	chan->scan_type.shift = 0;
+
 	cnt++;
-	st->channels[cnt].type = IIO_TIMESTAMP;
-	st->channels[cnt].channel = -1;
-	st->channels[cnt].scan_index = cnt;
-	st->channels[cnt].scan_type.sign = 's';
-	st->channels[cnt].scan_type.realbits = 64;
-	st->channels[cnt].scan_type.storagebits = 64;
-	st->channels[cnt].scan_type.shift = 0;
+	chan = &st->channels[cnt];
+	chan->type = IIO_TIMESTAMP;
+	chan->channel = -1;
+	chan->scan_index = cnt;
+	chan->scan_type.sign = 's';
+	chan->scan_type.realbits = 64;
+	chan->scan_type.storagebits = 64;
+	chan->scan_type.shift = 0;
 
 	return cnt + 1;
 }
@@ -561,6 +563,7 @@ static int ad7280_attr_init(struct ad7280_state *st)
 {
 	int dev, ch, cnt;
 	unsigned int index;
+	struct iio_dev_attr *iio;
 
 	st->iio_attr = devm_kcalloc(&st->spi->dev, 2, sizeof(*st->iio_attr) *
 				    (st->slave_num + 1) * AD7280A_CELLS_PER_DEV,
@@ -571,37 +574,30 @@ static int ad7280_attr_init(struct ad7280_state *st)
 	for (dev = 0, cnt = 0; dev <= st->slave_num; dev++)
 		for (ch = AD7280A_CELL_VOLTAGE_1; ch <= AD7280A_CELL_VOLTAGE_6;
 			ch++, cnt++) {
+			iio = &st->iio_attr[cnt];
 			index = dev * AD7280A_CELLS_PER_DEV + ch;
-			st->iio_attr[cnt].address =
-				ad7280a_devaddr(dev) << 8 | ch;
-			st->iio_attr[cnt].dev_attr.attr.mode =
-				0644;
-			st->iio_attr[cnt].dev_attr.show =
-				ad7280_show_balance_sw;
-			st->iio_attr[cnt].dev_attr.store =
-				ad7280_store_balance_sw;
-			st->iio_attr[cnt].dev_attr.attr.name =
+			iio->address = ad7280a_devaddr(dev) << 8 | ch;
+			iio->dev_attr.attr.mode = 0644;
+			iio->dev_attr.show = ad7280_show_balance_sw;
+			iio->dev_attr.store = ad7280_store_balance_sw;
+			iio->dev_attr.attr.name =
 				devm_kasprintf(&st->spi->dev, GFP_KERNEL,
 					       "in%d-in%d_balance_switch_en",
 					       index, index + 1);
-			ad7280_attributes[cnt] =
-				&st->iio_attr[cnt].dev_attr.attr;
+			ad7280_attributes[cnt] = &iio->dev_attr.attr;
+
 			cnt++;
-			st->iio_attr[cnt].address =
-				ad7280a_devaddr(dev) << 8 |
+			iio = &st->iio_attr[cnt];
+			iio->address = ad7280a_devaddr(dev) << 8 |
 				(AD7280A_CB1_TIMER + ch);
-			st->iio_attr[cnt].dev_attr.attr.mode =
-				0644;
-			st->iio_attr[cnt].dev_attr.show =
-				ad7280_show_balance_timer;
-			st->iio_attr[cnt].dev_attr.store =
-				ad7280_store_balance_timer;
-			st->iio_attr[cnt].dev_attr.attr.name =
+			iio->dev_attr.attr.mode = 0644;
+			iio->dev_attr.show = ad7280_show_balance_timer;
+			iio->dev_attr.store = ad7280_store_balance_timer;
+			iio->dev_attr.attr.name =
 				devm_kasprintf(&st->spi->dev, GFP_KERNEL,
 					       "in%d-in%d_balance_timer",
 					       index, index + 1);
-			ad7280_attributes[cnt] =
-				&st->iio_attr[cnt].dev_attr.attr;
+			ad7280_attributes[cnt] = &iio->dev_attr.attr;
 		}
 
 	ad7280_attributes[cnt] = NULL;

