Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 12 Dec 2018 08:51:48 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id BA1FF580380;
	Tue, 11 Dec 2018 08:35:52 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga003-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 11 Dec 2018 08:35:52 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AeaybJRIP6sJQNLe6cdmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgULvn/rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZUMhfVzJPDJ6/?=
 =?us-ascii?q?YYsBAOUOIftXoIvzqFsVtRuzBxKhBP/zxjNUmnP6wbc33/onHArb3AIgBdUOsH?=
 =?us-ascii?q?HModr1NacSVeS1x7TGwzrddfxZxTD96I7VeR0mr/CMXLZwcc7LxUYyCQzKlEmf?=
 =?us-ascii?q?qYvjPz6OzOsNqW2b4/B8WuKojm4qsgd8qSWsyMc0koTFmJ4Zx1Te+Slkzos5O8?=
 =?us-ascii?q?e0RFN4bNK4CpddtiOXO5NoTs8/QWxkojs2x7IatZKhYSQG1IkrywTdZvCbdYWD?=
 =?us-ascii?q?/wjtW/yLIThigXJoYLK/iAi28Uin0uD8SMa030hQriZfkdnDqGoN1xrN5ciDUP?=
 =?us-ascii?q?d9+V2h2TmX2wDS7OFLP1w0mLLFJ5I9xrM8jIcfvErdEiPshUn7j7Oael8l9+Wq?=
 =?us-ascii?q?8+jnZ6/ppp6YN496kAH+NaEul9S7AeQ5NAgOQmea9f2/1LL95035RqtFjvkvnq?=
 =?us-ascii?q?nevpHaI9oUprSiDg9L3YYs9Qy/Ay2l0NsGh3kHKkxKeBadg4juIVHOL+j0De2j?=
 =?us-ascii?q?jFS0jDdr2/fGM6XlApXMLXjMjq3tfLlg60NHzAozzNZf549bC70bIfLzXFPxu8?=
 =?us-ascii?q?LcDhMjLwO0xOPnAs1n1owCQWKPHrOZMKTKvF+I/O0vIvWMa5USuDrnK/gl+uTh?=
 =?us-ascii?q?jXk2mVIGeamp3J0XaG23H/h8IkWZZ2bsjckFEWsQogU+S+nqgkWYUTFPf3ayQ7?=
 =?us-ascii?q?485jYjBYKkCofMWJqhgL+G3Ce9GJ1WYXtLClSNEXfuaoWFVO0AaCOUIs99jDME?=
 =?us-ascii?q?UaKtRJMm1RGrrAX60aZoLvLI+i0EspLuzMJ65/bTlRE19jx4Fd6d3HuPT2xvmm?=
 =?us-ascii?q?MIRjk23L1woEBny1eD17R4jOJcFdBJ+/xJVQI6P4bGz+NmE9DyRh7BftCRRVal?=
 =?us-ascii?q?WNqmBys9TtYww9AUZUZ9FM6vjhTC3yqsHr8UmKaHBJ0y8qLAwXfxI9xxxGrB1K?=
 =?us-ascii?q?kkl1MmWNdANXW6hq5j8AjeH5PGnF+Hl6m0b6gc3DTC9GGYzWWQukFUVwpwUabA?=
 =?us-ascii?q?XXAbfUbWqdX55kXfT76hE7gnMw1BydKcJatOcNHmkVJGRPL7MtTEf22xg3uwBQ?=
 =?us-ascii?q?qPxr6UcYXlYXsd0zvHBEgEiQ8T+22GOhY4Biq6p2LeDTpuFU/gYk/28Ol+rm+7?=
 =?us-ascii?q?QVEwzw2Qc0Jh0L+18AYPhfOAU/MTwq4EuCA5pjVoHVa92tXWC8aApwthZqlcfc?=
 =?us-ascii?q?kx4FBd1WLdtgx9OJOgIrtmhl4fdQR3okzv2w92CoVGjcglsncqwBBuJqKf1VNL?=
 =?us-ascii?q?bymY0ozoOr3LNmny+wiiZLTS2l7A39eZ5KcO5O4jpFX+oQ6mDEwi83Zg09lLyH?=
 =?us-ascii?q?ac4pTKDAwPUZP+SEo39h56p63EbSk5/Y/byXpsMaysuD/Yx90pHPclygqnf9pH?=
 =?us-ascii?q?MKKECRX+HNEAC8mvKOwlgV6pbh0fMeBW9a40Od6mdvSc1K6qOuZggCypjWBd7I?=
 =?us-ascii?q?9h1UKM8jJ2SvTU0JYd3/GYwgyHWi/mjFegrs/4g5pEaiwVHmalzyjrGpRRZqxr?=
 =?us-ascii?q?cYkXE2iuJ9C4yctkh57qXX5V71qjB1IA2M+0dhuedV393QtM1UsJpXyrgze3zz?=
 =?us-ascii?q?txkzsxtKqQwDTOw/j+dBoAImNKRGhigU3sIISulNAaQU6oYhMtlBuk40b62qda?=
 =?us-ascii?q?qL5+L2nVXUdHYSz2I3t+Xau3s7qIe9RP548wsSVLTOS8ZkiXSrznrBsA0CPjHG?=
 =?us-ascii?q?xeyCogdz6wuZX5nB16iGSDI3Z1t3fZfcBwxRHC5N3TX/JR3zwGRDVmhjnTHFSz?=
 =?us-ascii?q?I96p/dCMnZfZru++T36hVoFUcSTzzYKPriy76XdoAR2+mfC+gdnnEQk80S/m2N?=
 =?us-ascii?q?hmTyTIrBDgYob106S2K/5ofk5tBFXk8cp1Bpl+kpcshJEXwXUahY+a/XsdnWfz?=
 =?us-ascii?q?LNVUw6T+bHUWSD4Pwt7V5hXl2UJ5InKIwYL5SmuSws97a9amZWMW3zo379pWB6?=
 =?us-ascii?q?eM8LxEgSx1r0K9rQLQYvhyhC0RyPUw534Bn+EGphAtwT6DDbAIEklVJijslxWO?=
 =?us-ascii?q?79Cjo6Rbfmevcb6s1EVgmdCtFq2NogZZWHzhYJctATdw7tljMFLLyHDz9obkeN?=
 =?us-ascii?q?zKYdMSrBKUlQrAj/NOKJIwjfcKgStnOWTgvXwq0eI7jBpu3Y2ks4iDMWli4KW5?=
 =?us-ascii?q?AhtAPD3ve8wT4i3tjbpZnsuOxI+gBJJhGjEWXJfySfKoDSkftfDmNwaIDT09pW?=
 =?us-ascii?q?2XGbvZHQ+D9khmq2jDHIysN3GSPHMZ18ltRAGBJExDhwAZRDc6kYQ8Fg+038zt?=
 =?us-ascii?q?alt56ioS5l7lqRtM1+RoOAPkUmrEoAeoazE0SIWQLRZM7wFC4VvVPtKa7u5pAy?=
 =?us-ascii?q?5Y+ZihphSXKmOHfwRIEX0JWkucClHjObmu+MDA8/WCCeq4NffOerKOqepRV/qT?=
 =?us-ascii?q?wZKv041m/yuDN8mVP3liCeE71VRHXXxjB8vZnDAPQTQNly3Rd86buAu8+ipvo8?=
 =?us-ascii?q?C/7vvrWQHv5YiOC7dIMtVv4Re2gaidOO6KmSZ5Mi1V1pcNxX/O1bge00QeiyBo?=
 =?us-ascii?q?dzmxD7sAsTTBQ77Xmq9SFxQbcT98NNNU76Ig2QlAIdTUis7u2b5ikPE0C01JVV?=
 =?us-ascii?q?jgmsyyYcwKIme9NE7IBUqRNbSGIyHLzN/zYa+mVbJQi+BUvQWquTmHC0/jIiiD?=
 =?us-ascii?q?lz7xWhCzMOFMiTuXMwBEtI6hchZiF27jQcniah26Nt93kDI3zac1hnPMKW4TLz?=
 =?us-ascii?q?x8f1lRob2X6CNSmu9/FHBZ7np5MemEnD6U7unCJZYQtPtrAyJ0mPpb4XQ60bRV?=
 =?us-ascii?q?6i5ESedxmCvTqN5uvl6nnvOOyjphTBpBtDJLiJiXskVlPKWKvqVHDEzD9hMLpU?=
 =?us-ascii?q?CNEQwKtpMxENrluqYWz8XVjKLiAD5Y9pTf+s5KVObOL8fSD3slNVLFFTffCw1N?=
 =?us-ascii?q?GSGqMWWZi0FUm/aU3nSPq94xrZ26y8lGcaNSSFFgTqBSMU9iBtFXZc4vBj4=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAABV5g9ch0O0hNFkGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBg2sUE4wUX4sxgg0Ulz6BcywTAYcuIjQJDQE?=
 =?us-ascii?q?DAQEBAQEBAgETAQEBCA0JCCkvgjYkAYJiAQIDAQI3PwYJAQEKGAklAwwFGDETB?=
 =?us-ascii?q?YMcggIEAaccii2MO4FXP4ERgxKINoImAolChXyRPQcCgiIEjyAjkUCaeYIOMxo?=
 =?us-ascii?q?jgzyCJxeOHT8BATGBBQEBimMBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ABAABV5g9ch0O0hNFkGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBg2sUE4wUX4sxgg0Ulz6BcywTAYcuIjQJDQEDAQEBAQEBAgETA?=
 =?us-ascii?q?QEBCA0JCCkvgjYkAYJiAQIDAQI3PwYJAQEKGAklAwwFGDETBYMcggIEAaccii2?=
 =?us-ascii?q?MO4FXP4ERgxKINoImAolChXyRPQcCgiIEjyAjkUCaeYIOMxojgzyCJxeOHT8BA?=
 =?us-ascii?q?TGBBQEBimMBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,342,1539673200"; 
   d="scan'208";a="44501568"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 11 Dec 2018 08:35:50 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727662AbeLKQfo (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 11 Dec 2018 11:35:44 -0500
Received: from usa-sjc-mx-foss1.foss.arm.com ([217.140.101.70]:52608 "EHLO
        foss.arm.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726723AbeLKQfn (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 11 Dec 2018 11:35:43 -0500
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.72.51.249])
        by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id D8D2215AB;
        Tue, 11 Dec 2018 08:35:42 -0800 (PST)
Received: from edgewater-inn.cambridge.arm.com (usa-sjc-imap-foss1.foss.arm.com [10.72.51.249])
        by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPA id A9FB83F575;
        Tue, 11 Dec 2018 08:35:42 -0800 (PST)
Received: by edgewater-inn.cambridge.arm.com (Postfix, from userid 1000)
        id BD0D31AE0D31; Tue, 11 Dec 2018 16:36:05 +0000 (GMT)
Date: Tue, 11 Dec 2018 16:36:05 +0000
From: Will Deacon <will.deacon@arm.com>
To: Robin Murphy <robin.murphy@arm.com>
Cc: catalin.marinas@arm.com, linux-arm-kernel@lists.infradead.org,
        linux-kernel@vger.kernel.org, jonathan.cameron@huawei.com,
        cyrilc@xilinx.com, james.morse@arm.com, anshuman.khandual@arm.com
Subject: Re: [PATCH] arm64: Add memory hotplug support
Message-ID: <20181211163605.GC12597@edgewater-inn.cambridge.arm.com>
References: <0a0c7d3b8fbe1b2b399eeb6889027031335d2af1.1544453739.git.robin.murphy@arm.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <0a0c7d3b8fbe1b2b399eeb6889027031335d2af1.1544453739.git.robin.murphy@arm.com>
User-Agent: Mutt/1.11.1+30 (d10eec459b35) ()
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Mon, Dec 10, 2018 at 03:29:01PM +0000, Robin Murphy wrote:
> Wire up the basic support for hot-adding memory. Since memory hotplug
> is fairly tightly coupled to sparsemem, we tweak pfn_valid() to also
> cross-check the presence of a section in the manner of the generic
> implementation, before falling back to memblock to check for no-map
> regions within a present section as before. By having arch_add_memory(()
> create the linear mapping first, this then makes everything work in the
> way that __add_section() expects.
> 
> We expect hotplug to be ACPI-driven, so the swapper_pg_dir updates
> should be safe from races by virtue of the global device hotplug lock.
> 
> Signed-off-by: Robin Murphy <robin.murphy@arm.com>
> ---
> 
> Looks like I'm not going to have the whole pte_devmap story figured out
> in time to land any ZONE_DEVICE support this cycle, but since this patch
> also stands alone as a complete feature (and has ended up remarkably
> simple and self-contained), I hope we might consider getting it merged
> on its own merit.
> 
> Robin.
> 
>  arch/arm64/Kconfig   |  3 +++
>  arch/arm64/mm/init.c |  8 ++++++++
>  arch/arm64/mm/mmu.c  | 12 ++++++++++++
>  arch/arm64/mm/numa.c | 10 ++++++++++
>  4 files changed, 33 insertions(+)
> 
> diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig
> index 6d2b25f51bb3..7b855ae45747 100644
> --- a/arch/arm64/Kconfig
> +++ b/arch/arm64/Kconfig
> @@ -261,6 +261,9 @@ config ZONE_DMA32
>  config HAVE_GENERIC_GUP
>  	def_bool y
>  
> +config ARCH_ENABLE_MEMORY_HOTPLUG
> +	def_bool y
> +
>  config SMP
>  	def_bool y
>  
> diff --git a/arch/arm64/mm/init.c b/arch/arm64/mm/init.c
> index 2983e0fc1786..82e0b08f2e31 100644
> --- a/arch/arm64/mm/init.c
> +++ b/arch/arm64/mm/init.c
> @@ -291,6 +291,14 @@ int pfn_valid(unsigned long pfn)
>  
>  	if ((addr >> PAGE_SHIFT) != pfn)
>  		return 0;
> +
> +#ifdef CONFIG_SPARSEMEM
> +	if (pfn_to_section_nr(pfn) >= NR_MEM_SECTIONS)
> +		return 0;
> +
> +	if (!valid_section(__nr_to_section(pfn_to_section_nr(pfn))))
> +		return 0;

I'm a bit nervous about the call to __nr_to_section() here. How do we
ensure that the section number we're passing stays within the bounds of
the mem_section array?

> +#endif
>  	return memblock_is_map_memory(addr);
>  }
>  EXPORT_SYMBOL(pfn_valid);
> diff --git a/arch/arm64/mm/mmu.c b/arch/arm64/mm/mmu.c
> index e1b2d58a311a..22379a74d289 100644
> --- a/arch/arm64/mm/mmu.c
> +++ b/arch/arm64/mm/mmu.c
> @@ -1044,3 +1044,15 @@ int pud_free_pmd_page(pud_t *pudp, unsigned long addr)
>  	pmd_free(NULL, table);
>  	return 1;
>  }
> +
> +#ifdef CONFIG_MEMORY_HOTPLUG
> +int arch_add_memory(int nid, u64 start, u64 size, struct vmem_altmap *altmap,
> +		    bool want_memblock)
> +{
> +	__create_pgd_mapping(swapper_pg_dir, start, __phys_to_virt(start),
> +			     size, PAGE_KERNEL, pgd_pgtable_alloc, 0);
> +
> +	return __add_pages(nid, start >> PAGE_SHIFT, size >> PAGE_SHIFT,
> +			   altmap, want_memblock);
> +}

If we're mapping the new memory into the linear map, shouldn't we be
respecting rodata_full and debug page alloc by forcing page granularity
and tweaking the permissions?

Will
