Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 27 Nov 2018 08:38:37 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 90AA2580322;
	Mon, 26 Nov 2018 09:13:49 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 26 Nov 2018 09:13:48 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A/Xv+FB8VE5dTqv9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1+gWIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDwULs6Wymt771zRRHoli?=
 =?us-ascii?q?kJKjA3/mLQhMNygqJbuwqhqh5kzoLIfI2YLuZyc7nBcd8GQ2dKQ8ZfVzZGAoO5?=
 =?us-ascii?q?d4YAD+sBPeJcr4LgqVUBswGxChWrBOPp1zRFgXH33aw+0+QlCw3JwRIvEMgSv3?=
 =?us-ascii?q?TTqtX4L70dUfqwzKXS0TrDaPZW1C775YPVcR4huemBUaxsfcfV00UjCg3IgkuK?=
 =?us-ascii?q?pYD4PD6Zyv4BvmmZ4uZ4S+6jlmwqpxtsrjWg2ssgkJTFip4Ixlze9yh13IA4Ls?=
 =?us-ascii?q?CiRkFhe96rCp5QujmaN4RoRsMiRHlluDg1yrIYo563ZisKx4o9xx7ZdfOHd5KE?=
 =?us-ascii?q?4hX5VOaeOTt4hXRld6yjhxuq70Ss1unxWtOp3FtEsCZJiMTAu3MR2xDJ68WKSO?=
 =?us-ascii?q?Nx/kK71jaO0wDT5PtEIUcxlafDL54hw7gwloccsEjaHS/5hl/2jKmIeUUg4+So?=
 =?us-ascii?q?7OrmYrP4qZ+GLIJ0lA7+Pbo0msClAuQ3LBIOX26F9uS4zrHj+lf5QLpSgv0sjq?=
 =?us-ascii?q?bZqIzaJdgcpqOhBw9V04Uj5AilAzapzdQVhn0HLFNDeBKagInlIVDOIPbkDfih?=
 =?us-ascii?q?h1Sgiitkx/fDPrf5GJXCMmDDkKv9fbZ680NcyBA8zdFD551ODbENOvLzWlLru9?=
 =?us-ascii?q?zeAR80KAi0w+fhCNVg2YISQ2OPAqmFMKzMtV+E/P4gI+6JZIUNojbyN+Al5+Ly?=
 =?us-ascii?q?jX8+gVIdf66p0oUNZHC7GfRmJUOZYX33j9cFEGcKuBc+TePwhF2DVz5Te2i9X6?=
 =?us-ascii?q?Ym6j4nD4KmCJ/JRpqxj7yZwCe7AppWa3hcBVCXEXfocIaEV+0WaC2IIM9siTgE?=
 =?us-ascii?q?VbmnS4882hCirg76y7x7LuXK/i0Ur47s1N9w5+fLjxE96SR0D9iB02GKV2x0nX?=
 =?us-ascii?q?kHRzks0KB7oExy0FGD0adjjvxcFNxT4e5JUwggOZ7dyex6F879WgbbctiVT1am?=
 =?us-ascii?q?R82sASstQdIp398Of0F9Fs2/gR/ZwSqlHaUZl7yRC5wy6aLTwX7xK8F5y3bF0a?=
 =?us-ascii?q?khi0IrQs9ONW2gm65++BLfB4/Pk0WFiamqcb4Q0zLK9GeG1WCOpl1XUBZsUaXZ?=
 =?us-ascii?q?WnASflbZos7n5kzcVbOuCa4oMg1aycGcLKtHcdnpjVRARPf+N9XSeWOxm2GsBR?=
 =?us-ascii?q?mWwrOAdpble2IY3C/FEkgLjxgT/WqaNQg5Hiqhv2PeDDlpFVLzY0Pt8fNyqG+h?=
 =?us-ascii?q?Qk8z1QGKa0xh17y6+hMOgfycSvUT3q8LuSs7qjV0Gkq90MzSC9aauwVhe6Bca8?=
 =?us-ascii?q?sn4FhbzWLZqxB9Ppu4Iq94gl4RbQt2sF3u1hltEYpAjNUlo2kszApxLqKYzkhM?=
 =?us-ascii?q?dzeZ3ZD2J73WJXP+/BGpa67KxF7e1Mya9bsI6PQ9s1/jph2mFlI+83V71NlYy3?=
 =?us-ascii?q?ud5ojQAAUOS57wU0Y3+AJ8p7HVeSQ944LU1XtxMai7qDPC2tQpBPc7xRakZdtQ?=
 =?us-ascii?q?LKSEFArqGc0AG8euMPAqm0Subh8cJuBS9bI7MNm8d/Sb366nJuBgkyy8jWRG+Y?=
 =?us-ascii?q?xyzliD9y5hReHWxZYFxPeY0xCDVzf9ilehr8/2lZpFZTEUAmqw1yzkCJRNaa11?=
 =?us-ascii?q?eIYBEX2uLNGvxtVim57tXGZV9V6iB18c2M6lYwGSb0H73QBL0UQXoHqnmTa3zj?=
 =?us-ascii?q?BukjEpqLaf0zLKw+j4aBUHPWtLTnF4jVjwOYi0k8waXE+wYggrjhSl/0X6x6tc?=
 =?us-ascii?q?pKhlNGncW0RIfyv3L2FkTKSwsKGPY8pO6JMurCVWX/6wYVGcSr7hvRQa1znvEH?=
 =?us-ascii?q?dZxDA+bzuqoIn2nwRmiGKBK3Z+tHrYdtt3xRvF5tzcRPhR0yECRCl5jznXG1e9?=
 =?us-ascii?q?M8Oo/dWSi5fMrOS+W3i9WZ1UdCnh1ZmAuzej5W12HR2/mOi+mt79Hgg7yyP718?=
 =?us-ascii?q?RqWj/OrBbzeYTr06W6MeR6fkhnHlP86sx6Gp1gnYs0np0fxX8ahpCN93odjWjz?=
 =?us-ascii?q?Kclb2b75bHcVQD4Lwt3V7xL/1ExtMH2J3J75WWuHwsR6eda6eGwW1zk578BLDq?=
 =?us-ascii?q?eU8bNFkTF0olq+sQLef/x9ki0Bxvsp7X4Qm/sJtxY1ziWBHrASGlFVPTDrlxSN?=
 =?us-ascii?q?9dy/rb9YZGCycbirz0p+nMusDLWDogFaRXb4dY0uHS527sVjLl3M1Gf/5Z3jeN?=
 =?us-ascii?q?nVddgTrAGbkw/cj+hJL5I8juEFijBgOWL5oH0p0eo7jQF10JG+vYiHLXht/a2j?=
 =?us-ascii?q?Dh5ZMD31e90c+jX3galCmcaW2pilHo99FTUTQJvoUfWoHSoQtfv9MgaBDiY8pm?=
 =?us-ascii?q?2HGbbFHg+f9URmr2/JE5+xLHGaP30ZzdRkRBmAK01TmgEUXDMmnpEnEgCm3tDu?=
 =?us-ascii?q?cEB85joJ/F73tgNMyv50Nxn4SmrepACoaiotSJiCNhVW6BtO51zSMcyY4eJ+BC?=
 =?us-ascii?q?VY/pynrAyQJW2XfQVIDWcVWkOaA1DvJKWh5d7F8+KAHOqxM+POYamSqexZT/qI?=
 =?us-ascii?q?xYyg0opl/zaPN8WDJHpiD+c82kpMQ395AdnZmy4URiwTliLNadObpRim9i12qM?=
 =?us-ascii?q?C/7OrkWAb16YSTDLtSNM1l+wqqjqebK+6QmCF5JC5C2ZMR3nDI0qYQ3V4IhyFq?=
 =?us-ascii?q?djmgCrAAtS/LTKLNla5bFR8bayVvNMRW66IwxBVCOcneitntzL53kuY1C0tZVV?=
 =?us-ascii?q?zmgsypec0KI2SnOFzbHkqEKLSGKiPNw8zsZaO8SLtQjPhbthGquDabFVPjMSqH?=
 =?us-ascii?q?lzXzSx+vNuRMhjmBPBNCoIG9bgptCW/7QdPmcBK7Ntp3jTwwwbIsh3LKNXQTMT?=
 =?us-ascii?q?5zc05Wqr2Q7CVYguhwGmBb73plK/WElDid7+XCNpkWtv5rUWxIkLde4XIn2/5W?=
 =?us-ascii?q?4TtCSfhdhiTftJhtrkugn+3JzSBoFFJKqzBWlMeOuG1hJ6zS9d9HQ3mX0ggK6D?=
 =?us-ascii?q?CvChAO7/doA9bovegE1dnLkOT/JT5J9NT89NEZQcPTLZTUYzIaLRP1FWuMX0M+?=
 =?us-ascii?q?RjmxODSHig=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AYAADiKPxbh0O0hNFkHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGDayeMEV+LI4IhkjGEd4FzLBMBiGMiNAkNAQMBAQEBAQECARMBAQEIDQk?=
 =?us-ascii?q?IKS+CNiKCZQMDAQJ2BgkBAVADKSsHEgWDHIICBAGnVooggi6FMIQrgVc/jnwCi?=
 =?us-ascii?q?H8klhlGBwKCHASPERaRCCyZSoINMxojgzyQWj8BATGBBQEBi3sBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AYAADiKPxbh0O0hNFkHQEBBQEHBQGBUQgBCwGDayeMEV+?=
 =?us-ascii?q?LI4IhkjGEd4FzLBMBiGMiNAkNAQMBAQEBAQECARMBAQEIDQkIKS+CNiKCZQMDA?=
 =?us-ascii?q?QJ2BgkBAVADKSsHEgWDHIICBAGnVooggi6FMIQrgVc/jnwCiH8klhlGBwKCHAS?=
 =?us-ascii?q?PERaRCCyZSoINMxojgzyQWj8BATGBBQEBi3sBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,283,1539673200"; 
   d="scan'208";a="139600440"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 26 Nov 2018 09:13:47 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726872AbeK0EC2 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 26 Nov 2018 23:02:28 -0500
Received: from foss.arm.com ([217.140.101.70]:42918 "EHLO foss.arm.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726253AbeK0ECO (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 26 Nov 2018 23:02:14 -0500
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.72.51.249])
        by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id CA76115AD;
        Mon, 26 Nov 2018 09:07:30 -0800 (PST)
Received: from edgewater-inn.cambridge.arm.com (usa-sjc-imap-foss1.foss.arm.com [10.72.51.249])
        by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPA id 9A9353F71D;
        Mon, 26 Nov 2018 09:07:30 -0800 (PST)
Received: by edgewater-inn.cambridge.arm.com (Postfix, from userid 1000)
        id 178121AE0776; Mon, 26 Nov 2018 17:07:48 +0000 (GMT)
From: Will Deacon <will.deacon@arm.com>
To: linux-kernel@vger.kernel.org, linux-mm@kvack.org
Cc: cpandya@codeaurora.org, toshi.kani@hpe.com, tglx@linutronix.de,
        mhocko@suse.com, akpm@linux-foundation.org,
        sean.j.christopherson@intel.com, Will Deacon <will.deacon@arm.com>
Subject: [PATCH v4 1/5] ioremap: Rework pXd_free_pYd_page() API
Date: Mon, 26 Nov 2018 17:07:43 +0000
Message-Id: <1543252067-30831-2-git-send-email-will.deacon@arm.com>
X-Mailer: git-send-email 2.1.4
In-Reply-To: <1543252067-30831-1-git-send-email-will.deacon@arm.com>
References: <1543252067-30831-1-git-send-email-will.deacon@arm.com>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The recently merged API for ensuring break-before-make on page-table
entries when installing huge mappings in the vmalloc/ioremap region is
fairly counter-intuitive, resulting in the arch freeing functions
(e.g. pmd_free_pte_page()) being called even on entries that aren't
present. This resulted in a minor bug in the arm64 implementation, giving
rise to spurious VM_WARN messages.

This patch moves the pXd_present() checks out into the core code,
refactoring the callsites at the same time so that we avoid the complex
conjunctions when determining whether or not we can put down a huge
mapping.

Cc: Chintan Pandya <cpandya@codeaurora.org>
Cc: Toshi Kani <toshi.kani@hpe.com>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Michal Hocko <mhocko@suse.com>
Cc: Andrew Morton <akpm@linux-foundation.org>
Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
Reviewed-by: Toshi Kani <toshi.kani@hpe.com>
Signed-off-by: Will Deacon <will.deacon@arm.com>
---
 lib/ioremap.c | 56 ++++++++++++++++++++++++++++++++++++++++++--------------
 1 file changed, 42 insertions(+), 14 deletions(-)

diff --git a/lib/ioremap.c b/lib/ioremap.c
index 517f5853ffed..6c72764af19c 100644
--- a/lib/ioremap.c
+++ b/lib/ioremap.c
@@ -76,6 +76,25 @@ static int ioremap_pte_range(pmd_t *pmd, unsigned long addr,
 	return 0;
 }
 
+static int ioremap_try_huge_pmd(pmd_t *pmd, unsigned long addr,
+				unsigned long end, phys_addr_t phys_addr,
+				pgprot_t prot)
+{
+	if (!ioremap_pmd_enabled())
+		return 0;
+
+	if ((end - addr) != PMD_SIZE)
+		return 0;
+
+	if (!IS_ALIGNED(phys_addr, PMD_SIZE))
+		return 0;
+
+	if (pmd_present(*pmd) && !pmd_free_pte_page(pmd, addr))
+		return 0;
+
+	return pmd_set_huge(pmd, phys_addr, prot);
+}
+
 static inline int ioremap_pmd_range(pud_t *pud, unsigned long addr,
 		unsigned long end, phys_addr_t phys_addr, pgprot_t prot)
 {
@@ -89,13 +108,8 @@ static inline int ioremap_pmd_range(pud_t *pud, unsigned long addr,
 	do {
 		next = pmd_addr_end(addr, end);
 
-		if (ioremap_pmd_enabled() &&
-		    ((next - addr) == PMD_SIZE) &&
-		    IS_ALIGNED(phys_addr + addr, PMD_SIZE) &&
-		    pmd_free_pte_page(pmd, addr)) {
-			if (pmd_set_huge(pmd, phys_addr + addr, prot))
-				continue;
-		}
+		if (ioremap_try_huge_pmd(pmd, addr, next, phys_addr + addr, prot))
+			continue;
 
 		if (ioremap_pte_range(pmd, addr, next, phys_addr + addr, prot))
 			return -ENOMEM;
@@ -103,6 +117,25 @@ static inline int ioremap_pmd_range(pud_t *pud, unsigned long addr,
 	return 0;
 }
 
+static int ioremap_try_huge_pud(pud_t *pud, unsigned long addr,
+				unsigned long end, phys_addr_t phys_addr,
+				pgprot_t prot)
+{
+	if (!ioremap_pud_enabled())
+		return 0;
+
+	if ((end - addr) != PUD_SIZE)
+		return 0;
+
+	if (!IS_ALIGNED(phys_addr, PUD_SIZE))
+		return 0;
+
+	if (pud_present(*pud) && !pud_free_pmd_page(pud, addr))
+		return 0;
+
+	return pud_set_huge(pud, phys_addr, prot);
+}
+
 static inline int ioremap_pud_range(p4d_t *p4d, unsigned long addr,
 		unsigned long end, phys_addr_t phys_addr, pgprot_t prot)
 {
@@ -116,13 +149,8 @@ static inline int ioremap_pud_range(p4d_t *p4d, unsigned long addr,
 	do {
 		next = pud_addr_end(addr, end);
 
-		if (ioremap_pud_enabled() &&
-		    ((next - addr) == PUD_SIZE) &&
-		    IS_ALIGNED(phys_addr + addr, PUD_SIZE) &&
-		    pud_free_pmd_page(pud, addr)) {
-			if (pud_set_huge(pud, phys_addr + addr, prot))
-				continue;
-		}
+		if (ioremap_try_huge_pud(pud, addr, next, phys_addr + addr, prot))
+			continue;
 
 		if (ioremap_pmd_range(pud, addr, next, phys_addr + addr, prot))
 			return -ENOMEM;
-- 
2.1.4

