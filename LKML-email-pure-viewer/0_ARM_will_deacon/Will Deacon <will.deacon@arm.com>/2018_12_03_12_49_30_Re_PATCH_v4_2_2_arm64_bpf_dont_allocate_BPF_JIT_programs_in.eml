Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 04 Dec 2018 08:52:21 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id E58E9580375;
	Mon,  3 Dec 2018 04:49:16 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 03 Dec 2018 04:49:16 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Al4R1Jx/uOOyfQf9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1+wXIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CS2RPXthfWTFCDIOy?=
 =?us-ascii?q?YIQAE/cOMuRWoInmv1sDrwCzBRWwCO711jNEmmX70bM83u88EQ/GxgsgH9cWvX?=
 =?us-ascii?q?vUrdX1MKMSWv27wqbW1zrMc/RW2THg44XPfBEhoPWMXbZqfcXM10YgDR/KjlKW?=
 =?us-ascii?q?qYH+JTyVzOENv3KH4OpnUOKikmgqoBxyrDi33soglJXFi4YPxlzZ+yh13pw5Kc?=
 =?us-ascii?q?C7RUJne9KpEZlduzmEO4drQM4uWXxktSkmxrEcpJK3YDUGxI4lyhLDbfGMbpKG?=
 =?us-ascii?q?7Qj5VOmLJDd1nHJld6y7hxa16UWg1OL8Wdeu0FpQrSpKjMPMtnYT2BzX8MSHTe?=
 =?us-ascii?q?F9/ki51TaO0QDc9P1ELFgqmabHL5Mt2KM8m5QNvUjZAyP7m1n6gLWXe0gm4uSo?=
 =?us-ascii?q?7v7oYrTipp+SLY90jQT+P7wqmsy+B+Q4LwcPU3GY+euizr3j+1P2QLFTgv0xnK?=
 =?us-ascii?q?jZto7VJd4Aq66nDA9azJwj5wy8Dzi4ytQYm2cILFZfdBKAlYjpNEnCIOrkAven?=
 =?us-ascii?q?n1SsjDBryujCPr3gAZXCMGLPkbj8fbtm705cyQwzzc1Q5p5OC7EBJu7zVVH1tN?=
 =?us-ascii?q?DCEhA5NAm0yf79CNphzoMeRX6PAqiBPaPSq1CI5/4vLPOLZIMPuDb9NuIq5/jh?=
 =?us-ascii?q?jXIinV8dfK+p3YYYaXyiH/RmJVmZbmTogtsbDWgKuQ8+RvTwiFKeST5Te2qyX6?=
 =?us-ascii?q?Uk6zE5D4KpE53PRoOqgLyH2ie7GYZbZmRHClCKDHfpeJ+IW/YKaCKOPMBhliYI?=
 =?us-ascii?q?WqSmS48kzRuurhP1y6J7LurI/S0VrYjs1MN15+3UlhE+7yZ0AN6f02yWS2F0n2?=
 =?us-ascii?q?UIRyI53axloEx9zEuD3rZ8g/BCCdNT4PZJWB8gNZHA1+x6F8zyWgXZc9eKUlmm?=
 =?us-ascii?q?RM+qATUwTt0rxd8ObF1wG9GjjhDFwiqrDKUZl72NBJwo7K3c22L9KNp6y3bDzK?=
 =?us-ascii?q?MhlUUpQtNTNW26ga5y7xXcCJTXk0qHjaqqdb4T3CjW9Gidy2qCu0VYUA11UaXB?=
 =?us-ascii?q?Rn0fYkrWrdLk5kLNVbOuCLInMhdfxs6GMKdFdtrpjVBeTvf5JNvee36xm3u3BR?=
 =?us-ascii?q?uQ27yDdpTqdHsH0CXdEkcElRsT8miANQUlAiehomTeDCFhFF71YkPs9/V+p22/?=
 =?us-ascii?q?TkMu0w6KaEhh3aKv+hEJnfycV+8T3rUctSc9qjV0GVG9387WC9uAvQZhYL9QYd?=
 =?us-ascii?q?Qn4FdD1GLZsQN9M4ekL6BjgF4ebgt2s1nv1xVxFoVPj8wqoGk2wwp1LKKSyElB?=
 =?us-ascii?q?eC+A3ZDsJr3XLXH/8wqra6HI1VDRztaX9r0U5/QltlrspgepFkkl83V5yNRV13?=
 =?us-ascii?q?qc5pPXDAsdS57xU0A39wRkqLHeeCUy+4TU1Xh0O6murjDCw84pBPciyhu4f9Zf?=
 =?us-ascii?q?LbmIGxPoH8wbB8ihMuoqm1eyYxIAPeBS8rM0Psy8e/uH3q6rIPhvnDa8gWtb54?=
 =?us-ascii?q?B911qG9zBgRe7Qw5YF3/aY0xOdVzf9kFiuqNr3lp1DZT0IGGqw1zLkBI9IaqJu?=
 =?us-ascii?q?Z4kLDXqhLNOtxtV5gZ7gQHpY9F+lB1Mb186lYxuSb1rh3QJO0UQbu2ComSy9zz?=
 =?us-ascii?q?ZsiTEmsrKf3DDSw+TlbBcGOm9LSHNijFv2Ooi0ktYaUVOsbwgokhul+En7y7Ja?=
 =?us-ascii?q?pKR5M2ncX0NIczLqIGFlV6u6rqCCbNJX6JM0rSVXV/yxYVKARb7noBsa0CTjE3?=
 =?us-ascii?q?FFxD8hdDGquZT5nxpkh2KbN3tzqHvZecdtxRbQ/tDcRPhR3iYYSyl8kzXYGl+8?=
 =?us-ascii?q?P9yx99WOi5jDqvy+V36mVpBLcSjk14SAuDG55W1rBx2yhPSzmtzhEQgn3i73zd?=
 =?us-ascii?q?hqVSPUrBniZonnzbi1MeVifkNwHl/z99J6Gp1ikos3nJwQ2mIVhpSP8XoHjGf8?=
 =?us-ascii?q?K9Nb2a3lYXoJRD4LxcPV4Qf/1E1iKHKJ25z2VnGHzsR9YNm6Z3sc2jgh4MBSFK?=
 =?us-ascii?q?eU8LtEkDNwolq5rgLee+JxnzkDxvs19H4VnfsJtxEzwSWHDbAfBk1YPS3qlxSV?=
 =?us-ascii?q?4NGytqRXZGCzcbeu0Epyh8yuDLaHogtEQnb2Zo8iHTNs7sV4KF/MzHrz6oT+dN?=
 =?us-ascii?q?jRd90TsACUkwzbj+hUM58xkvsKhSx6OWPyp3Elyug7jQBw0pG+poSIN2Jt/Keh?=
 =?us-ascii?q?CB5CKjL1f98T+i3qjatGhcmZxYevHpF8GjkRWJvoUOmlEDYTtfThKgaPHycwqn?=
 =?us-ascii?q?adGbrDAwCf7F1qoG7IE5CuL3uXPmUWzc1+RBmBI0xSmAIUUy8/npEnDQCm3tDh?=
 =?us-ascii?q?fF165jAM5V74tx1MxfhzNxTkVmffpQGoaio7SZSFLRpW6B1C6FnRMcCE8u1zGC?=
 =?us-ascii?q?RY9IW7rAORMmybexhIDWYRV02EAFDjI6Cu5cTa/OieHOa+NPzOYbOBqeFFU/eI?=
 =?us-ascii?q?xJSv0pZp/jqWN8WPOGViAOM/2kZZQX95HMHZkS0VSyMLjyLNc9KbpBCk9y13sM?=
 =?us-ascii?q?+/8ffrWAHu5YeVCLtSK9Jv+x+ojqeZKu6Qnz10KTJZ1pMK2H/Jx6IT3F8UiyFy?=
 =?us-ascii?q?aTatFa4MujLKTKLVgqVXFQIUaztvNMtU6KIxxhNCOdPAhdPvyLF5juQ5C1NEVV?=
 =?us-ascii?q?H6nsGpZMoKI3yyNV/dBUaLMqiGKiPPw83tfay8TrhQhv1OtxKsoTabD1PjPjOb?=
 =?us-ascii?q?mjn1VhCvNPtAgz2BMBNCuIGybBBtBHPnTNLnbB27LdB2gSc3wb0ymnPFK2ocPS?=
 =?us-ascii?q?JgfENKq72a9TlYjelnG2xd8nplKvGJmiaD4OneL5YWsP1rDTx1luJa+ns6zbRV?=
 =?us-ascii?q?4TpARPx0nivSs9Fvr0unkumJ1jpoTh5OpixXi4KMuEUxcZneo7BaVT7u/R8W7W?=
 =?us-ascii?q?iNFRkO749sENGpsaFd0djCibz+LB9G8tTd58xaANLbfpGpKn0kZCXoHDqcIAYM?=
 =?us-ascii?q?RjmtfTXAhkhZ1v2f/3aSqLAzsJ2qk50LHOwIHGcpH+8XXxw2VOcJJ416C3Z9ye?=
 =?us-ascii?q?aW?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAADlJQVch0O0hNFiGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGDayeMEV+NOBSXNIFzLBMBiAMiNAkNAQMBAQEBAQE?=
 =?us-ascii?q?CARMBAQEKCwkIKS+CNiQBgmIBAgMBAjc/BgkBAQoYCSUDDAUYMRMFgxyCAgQBp?=
 =?us-ascii?q?iqKH4wcgVc/hCOEShGDW4ImAosflSEHAoIfBIgPhn8jkSaaM4INMxojgzyCJxe?=
 =?us-ascii?q?OHT8BATGBBQEBiB8BJYInAQE?=
X-IPAS-Result: =?us-ascii?q?A0ABAADlJQVch0O0hNFiGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGDayeMEV+NOBSXNIFzLBMBiAMiNAkNAQMBAQEBAQECARMBAQEKCwkIK?=
 =?us-ascii?q?S+CNiQBgmIBAgMBAjc/BgkBAQoYCSUDDAUYMRMFgxyCAgQBpiqKH4wcgVc/hCO?=
 =?us-ascii?q?EShGDW4ImAosflSEHAoIfBIgPhn8jkSaaM4INMxojgzyCJxeOHT8BATGBBQEBi?=
 =?us-ascii?q?B8BJYInAQE?=
X-IronPort-AV: E=Sophos;i="5.56,310,1539673200"; 
   d="scan'208";a="43267231"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 03 Dec 2018 04:49:14 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726588AbeLCMuG (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 3 Dec 2018 07:50:06 -0500
Received: from foss.arm.com ([217.140.101.70]:36616 "EHLO foss.arm.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726570AbeLCMuG (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 3 Dec 2018 07:50:06 -0500
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.72.51.249])
        by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id E0CDE1688;
        Mon,  3 Dec 2018 04:49:10 -0800 (PST)
Received: from edgewater-inn.cambridge.arm.com (usa-sjc-imap-foss1.foss.arm.com [10.72.51.249])
        by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPA id AF9A53F614;
        Mon,  3 Dec 2018 04:49:10 -0800 (PST)
Received: by edgewater-inn.cambridge.arm.com (Postfix, from userid 1000)
        id A0DA11AE1062; Mon,  3 Dec 2018 12:49:30 +0000 (GMT)
Date: Mon, 3 Dec 2018 12:49:30 +0000
From: Will Deacon <will.deacon@arm.com>
To: Ard Biesheuvel <ard.biesheuvel@linaro.org>
Cc: Linux Kernel Mailing List <linux-kernel@vger.kernel.org>,
        Daniel Borkmann <daniel@iogearbox.net>,
        Alexei Starovoitov <ast@kernel.org>,
        Rick Edgecombe <rick.p.edgecombe@intel.com>,
        Eric Dumazet <eric.dumazet@gmail.com>,
        Jann Horn <jannh@google.com>,
        Kees Cook <keescook@chromium.org>,
        Jessica Yu <jeyu@kernel.org>, Arnd Bergmann <arnd@arndb.de>,
        Catalin Marinas <catalin.marinas@arm.com>,
        Mark Rutland <mark.rutland@arm.com>,
        "David S. Miller" <davem@davemloft.net>,
        linux-arm-kernel <linux-arm-kernel@lists.infradead.org>,
        "<netdev@vger.kernel.org>" <netdev@vger.kernel.org>
Subject: Re: [PATCH v4 2/2] arm64/bpf: don't allocate BPF JIT programs in
 module memory
Message-ID: <20181203124930.GB25097@arm.com>
References: <20181123221804.440-1-ard.biesheuvel@linaro.org>
 <20181123221804.440-3-ard.biesheuvel@linaro.org>
 <20181130182629.GA16085@arm.com>
 <CAKv+Gu9QVHLWu5H3Ok1Kbm=vtzd1KaHUn2VEij6oToW5aPR9uA@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <CAKv+Gu9QVHLWu5H3Ok1Kbm=vtzd1KaHUn2VEij6oToW5aPR9uA@mail.gmail.com>
User-Agent: Mutt/1.5.23 (2014-03-12)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Fri, Nov 30, 2018 at 08:20:06PM +0100, Ard Biesheuvel wrote:
> On Fri, 30 Nov 2018 at 19:26, Will Deacon <will.deacon@arm.com> wrote:
> >
> > On Fri, Nov 23, 2018 at 11:18:04PM +0100, Ard Biesheuvel wrote:
> > > The arm64 module region is a 128 MB region that is kept close to
> > > the core kernel, in order to ensure that relative branches are
> > > always in range. So using the same region for programs that do
> > > not have this restriction is wasteful, and preferably avoided.
> > >
> > > Now that the core BPF JIT code permits the alloc/free routines to
> > > be overridden, implement them by vmalloc()/vfree() calls from a
> > > dedicated 128 MB region set aside for BPF programs. This ensures
> > > that BPF programs are still in branching range of each other, which
> > > is something the JIT currently depends upon (and is not guaranteed
> > > when using module_alloc() on KASLR kernels like we do currently).
> > > It also ensures that placement of BPF programs does not correlate
> > > with the placement of the core kernel or modules, making it less
> > > likely that leaking the former will reveal the latter.
> > >
> > > This also solves an issue under KASAN, where shadow memory is
> > > needlessly allocated for all BPF programs (which don't require KASAN
> > > shadow pages since they are not KASAN instrumented)
> > >
> > > Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
> > > ---
> > >  arch/arm64/include/asm/memory.h |  5 ++++-
> > >  arch/arm64/net/bpf_jit_comp.c   | 13 +++++++++++++
> > >  2 files changed, 17 insertions(+), 1 deletion(-)
> > >
> > > diff --git a/arch/arm64/include/asm/memory.h b/arch/arm64/include/asm/memory.h
> > > index b96442960aea..ee20fc63899c 100644
> > > --- a/arch/arm64/include/asm/memory.h
> > > +++ b/arch/arm64/include/asm/memory.h
> > > @@ -62,8 +62,11 @@
> > >  #define PAGE_OFFSET          (UL(0xffffffffffffffff) - \
> > >       (UL(1) << (VA_BITS - 1)) + 1)
> > >  #define KIMAGE_VADDR         (MODULES_END)
> > > +#define BPF_JIT_REGION_START (VA_START + KASAN_SHADOW_SIZE)
> > > +#define BPF_JIT_REGION_SIZE  (SZ_128M)
> > > +#define BPF_JIT_REGION_END   (BPF_JIT_REGION_START + BPF_JIT_REGION_SIZE)
> > >  #define MODULES_END          (MODULES_VADDR + MODULES_VSIZE)
> > > -#define MODULES_VADDR                (VA_START + KASAN_SHADOW_SIZE)
> > > +#define MODULES_VADDR                (BPF_JIT_REGION_END)
> > >  #define MODULES_VSIZE                (SZ_128M)
> > >  #define VMEMMAP_START                (PAGE_OFFSET - VMEMMAP_SIZE)
> > >  #define PCI_IO_END           (VMEMMAP_START - SZ_2M)
> > > diff --git a/arch/arm64/net/bpf_jit_comp.c b/arch/arm64/net/bpf_jit_comp.c
> > > index a6fdaea07c63..76c2ab40c02d 100644
> > > --- a/arch/arm64/net/bpf_jit_comp.c
> > > +++ b/arch/arm64/net/bpf_jit_comp.c
> > > @@ -940,3 +940,16 @@ struct bpf_prog *bpf_int_jit_compile(struct bpf_prog *prog)
> > >                                          tmp : orig_prog);
> > >       return prog;
> > >  }
> > > +
> > > +void *bpf_jit_alloc_exec(unsigned long size)
> > > +{
> > > +     return __vmalloc_node_range(size, PAGE_SIZE, BPF_JIT_REGION_START,
> > > +                                 BPF_JIT_REGION_END, GFP_KERNEL,
> > > +                                 PAGE_KERNEL_EXEC, 0, NUMA_NO_NODE,
> > > +                                 __builtin_return_address(0));
> >
> > I guess we'll want VM_IMMEDIATE_UNMAP here if Rich gets that merged.
> 
> I think akpm already queued up that patch.
> 
> > In the
> > meantime, I wonder if it's worth zeroing the region in bpf_jit_free_exec()?
> > (although we'd need the size information...).
> >
> 
> Not sure. What exactly would that achieve?

I think the zero encoding is guaranteed to be undefined, so it would limit
the usefulness of any stale, executable TLB entries. However, we'd also need
cache maintenance to make that stuff visible to the I side, so it's probably
not worth it, especially if akpm has queued the stuff from Rich.

Maybe just add an:

/* FIXME: Remove this when VM_IMMEDIATE_UNMAP is supported */
#ifndef VM_IMMEDIATE_UNMAP
#define VM_IMMEDIATE_UNMAP	0
#endif

so we remember to come back and sort this out? Up to you.

Will
