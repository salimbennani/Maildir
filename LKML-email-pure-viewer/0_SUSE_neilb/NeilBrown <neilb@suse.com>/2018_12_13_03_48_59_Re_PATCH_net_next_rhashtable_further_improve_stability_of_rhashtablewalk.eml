Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 21:17:28 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 1DA43580380;
	Wed, 12 Dec 2018 19:49:18 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga006-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 12 Dec 2018 19:49:17 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AGyqIHBx5pb9lPBfXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e4RIvad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWpPUNhfWSJcAIy8?=
 =?us-ascii?q?YYgBAOUdMuZDt4nwpUADrRSiCQS2Hu7j1iNEimPw0KYn0+ohCwbG3Ak4EtwWrn?=
 =?us-ascii?q?vUrdH1OboIUeCywqjIyyjIYvRQ2Tjj6YjIdgsurOqXXbJtasre11MjGB/CjlWV?=
 =?us-ascii?q?sIHoOS6e2OoKs2ie9eVgVOSvhnY9pAFpuDevwN0jhpPOhoIPxVDI7z92wJszKN?=
 =?us-ascii?q?alS0B7ecapHIVMuyyeLYd6X80vT39ytConybAKpYS3cSkIxZg/2hLSb/yKf5KV?=
 =?us-ascii?q?7h/tVOudOyl0iGx5dL6lmRq/8Uetx+vhXceuyllKtDBKktzUu3ANyRPT7s+HR+?=
 =?us-ascii?q?Nj/keuxzmPzRrf6uJaLkAuk6rUNZohzqQ3lpoJvkTPBi72mEPog6+Kbkgo5PSk?=
 =?us-ascii?q?5uD9brn7qJKQKZV4hhz9P6gygMCyAOY1PhALX2eB+OS80LPj/Vf+QLVPlvA2lq?=
 =?us-ascii?q?jZsJbHJcUUv6K5ABFa0pwl6xmhCzeqydMYnHcBLF1bYhKKlJbpO17QL/DiF/u/?=
 =?us-ascii?q?gEqjkC1tx//YOr3tGJLNLmLMkLv5Z7Zy91ZcyBYvzdBY/59UDrABIPHtVUPru9?=
 =?us-ascii?q?3YEwQ0Mwi1w+bhFdV82ZkSWWOJAq+FLqzStUWE6f4oI+mJfIUVoiryK+A55/7y?=
 =?us-ascii?q?in80gV8dcrOo3ZsLcn+4Ge5qI0WEYXX2hNcBHnwHvg4/TOzslV2DXiRfZ3e0X6?=
 =?us-ascii?q?Ig+D47DJiqApvERoComLaBxju0HoVKZmBaDVCBCXXod4KaVPsWayKSJclhkjoD?=
 =?us-ascii?q?VbW6T48h1BeutBL1yrZ9L+rU/DEYuozn1NRv++LTkhQy/yRuD8uBy2GNU310nm?=
 =?us-ascii?q?QQSjAsx6B/oUt9ylSZ3ahimfNYF8de5/dIUgc8KJ7dwPZ2C9H0WgLdYNiJTEyq?=
 =?us-ascii?q?TcmhATE0Vtgx2cMBY15hG9W+iRDOxymqDKUTl7CRAJw087jT337+J8tmz3bG1a?=
 =?us-ascii?q?8hj0QpQ8dVNG2mgLJ/+BbXB4LTj0qZkKOqf7wG3CHR7GeD0XaOvEZAXQFtS6rF?=
 =?us-ascii?q?Q24QalHWrdvj4EPCVKGhCbIgPgtFys6CL69KZ8btjVVHQvfjJdvfb3iwm2e2GR?=
 =?us-ascii?q?aH2LeMYJD2dGUa2SXXEFIEnBwL/XaaKQg+AT+srH/EAzxwC13jeUPs/vN4qHOg?=
 =?us-ascii?q?UEA0yRqHb0lg17qz5x4UiuaQS/IV3rIYpighry94E0q639LTE9CAvRZufL1AYd?=
 =?us-ascii?q?Mh51dKzX7Ztw14PpynM6Bihl4ffx5rv0/00BV3EIFAkcksrHMl1wdyLaOY0FVc?=
 =?us-ascii?q?dzKXx5zwO7vXKnXs8xCrcaLZxlbe0NOO8KcV9Ps4s0njvB2uFkc66Xpn18da0n?=
 =?us-ascii?q?SC6ZTKFgYdSo/xXVst+Bh8pLHaZTc96pjQ1X1tN6m0rzDD18goBOsj1havYdNf?=
 =?us-ascii?q?PLmYGw/1Fs0QH9KuJ/Aym1i1chIEO/hf9a4pP8+8a/SKwq+qPOZ6kzKggmRK+4?=
 =?us-ascii?q?R90kOK9yphRe/ExZcFw/eE3gSZUzfwlkuussfymYpcfzEdAnK/yTT4BI5WfqBy?=
 =?us-ascii?q?Z4cLBnu0LM2t29p+gIThW3hG+165BlMKwdOmdgCWb1PgwwJQz0MXoXq8lCu8zj?=
 =?us-ascii?q?x0lSwpr6WF0CzPxeTiaAQIOmpRSGZ+ilfsJJC+j8oGU0iwcwgpiByl6F76xqha?=
 =?us-ascii?q?vqh+L3PfQVxVfyjwNGxiVqqwtryfY89A8p8osCNXUPiiblCeULLyvxwa0yb7FW?=
 =?us-ascii?q?tE2D87by2quon+nxFiimKSNmxzrHnaecF33xvf/8bTRf1S3joHQil3lz/XC0O4?=
 =?us-ascii?q?P9mo+9WUipjCvvq/V2KnSp1cby3rwZmcuyu84G1gGQe/kOyrmt37DQg61jf21t?=
 =?us-ascii?q?lwWiXPthr8YIjr16KhPOJjf0loAkL86sVgFoF/lIswmI8f2XwAipqJ+noHlH/5?=
 =?us-ascii?q?Mc9H1qLmcHoNWTkLzsbW4Af/2U1vNHKJx5/jWXWbzctsfN26YmIQ2iIg4MFGEq?=
 =?us-ascii?q?aU7LpYnSRrplq0tx7eYf94nj0F0/sh9GYag/0VuAoq1iidB7ESHUpCMiD2mRWH?=
 =?us-ascii?q?8cu+rLlJa2a1are/ylB+nd+6AbGGowFcXmv5e5g4ES9x6MV/LEzD0Hnp5o74f9?=
 =?us-ascii?q?nQaMoZtgeInBfYk+hVNJUxm+IWhSpgPGLxp3wkxPQ9jRxzxpG6p4mHJn5p/KK4?=
 =?us-ascii?q?BB5YKzL0a9kS+jHrkaZRgMKW05qzEZVmHzUBRIHoQu6wEDIOqfTnMB6DHyYmpX?=
 =?us-ascii?q?ecHbrfABWT6EN7r3/UF5CrNneXJGQWzNl4RRmdIlBfjx4QXDkggpE5EQWqztT7?=
 =?us-ascii?q?cEhl/jAR+kL4qhxUx+JqLRb/V3nQpByyZjcoUpSfLwdW7gJf50fTK8Oe9fl+Hy?=
 =?us-ascii?q?VZ/p2nsQyMJXaXZwVODWEVREOEA0rvMaWp5dnF6+KYHPaxL+PSYbWSruxTT/eJ?=
 =?us-ascii?q?xZWy0ot/4jaDLMOPMmN5D/083EpDUmt0G8DYmzUJViwWmDjBb8+dpBeg5CJ3qt?=
 =?us-ascii?q?qz/+jsWALq/YGPEaddMc1z+xCqhqeOL+6Qizh4KTZb1ZMMxGXEyLsF3F4VhCFh?=
 =?us-ascii?q?aSOtEakbtSPWSKLQm6lXDwMUai9pNctI6b480RdJOcLBltz10bt4hOYvC1hZTV?=
 =?us-ascii?q?zhht2pZcsSLm6nKVPIH1yLO6qGJDHRx8H3YLixSblRjOVSqh2xtiyXE07lPjSf?=
 =?us-ascii?q?iTbpUwqjPv1LjCGeJBZeop2ycg5xCWj/S9LrcgG7MN5yjTEs3bI4nG/FNW4CPj?=
 =?us-ascii?q?h6aE5NqryQ7SVFgvRwAWBB73xlLfWalCad9eXXNpEWsf5zCCRui+1a+Gg6y6dS?=
 =?us-ascii?q?7CxcRP16gi3Srttvo1GgiuaOyzpnXwBIqjZEn4+LuURiOaPE9phPQ3rE/RQN7X?=
 =?us-ascii?q?mOBBQOvddqFtrvu6UDguTIwYL+Mj1P6c6czdZUU8jZMsiKKmYJPh3vFDnOSgId?=
 =?us-ascii?q?RDiic2bFiApUjafB2GeSq80cp5nosoAJVbkTAFo4F/cQIl94B9FEK5ByCGB32Y?=
 =?us-ascii?q?WHhdIFsCLt5CLaQ99X69WeDqqf?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BZAABq1RFch0O0hNFjFgUBAQEBAwEBA?=
 =?us-ascii?q?QcDAQEBgWWBW4EPgQInmCeCDRSXU4FfAg0dCwgBhz4iOBIBAwEBAQEBAQIBEwE?=
 =?us-ascii?q?BAQgNCQgpIwyCNiQBgmEBAQEBAgEBAnYFAQkBAQoYCRMSAwwBRwYTBXiCJAGBc?=
 =?us-ascii?q?wUIBAEKqCyKJw+CbYlPF4E/QIQjhE4BEgGFegKJGZdzCYMRg3qKZIFcTYdLK4c?=
 =?us-ascii?q?nLI1xjH+BBnFwFTuCbAmCHQEXfwEIBHiMLSwyAYEEAQGKDQ8XA4IkAQE?=
X-IPAS-Result: =?us-ascii?q?A0BZAABq1RFch0O0hNFjFgUBAQEBAwEBAQcDAQEBgWWBW4E?=
 =?us-ascii?q?PgQInmCeCDRSXU4FfAg0dCwgBhz4iOBIBAwEBAQEBAQIBEwEBAQgNCQgpIwyCN?=
 =?us-ascii?q?iQBgmEBAQEBAgEBAnYFAQkBAQoYCRMSAwwBRwYTBXiCJAGBcwUIBAEKqCyKJw+?=
 =?us-ascii?q?CbYlPF4E/QIQjhE4BEgGFegKJGZdzCYMRg3qKZIFcTYdLK4cnLI1xjH+BBnFwF?=
 =?us-ascii?q?TuCbAmCHQEXfwEIBHiMLSwyAYEEAQGKDQ8XA4IkAQE?=
X-IronPort-AV: E=Sophos;i="5.56,347,1539673200"; 
   d="asc'?scan'208";a="141927180"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 12 Dec 2018 19:49:15 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726814AbeLMDtN (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 12 Dec 2018 22:49:13 -0500
Received: from mx2.suse.de ([195.135.220.15]:60244 "EHLO mx1.suse.de"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726437AbeLMDtN (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 12 Dec 2018 22:49:13 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (unknown [195.135.220.254])
        by mx1.suse.de (Postfix) with ESMTP id 19FD9AC81;
        Thu, 13 Dec 2018 03:49:10 +0000 (UTC)
From: NeilBrown <neilb@suse.com>
To: Herbert Xu <herbert@gondor.apana.org.au>
Date: Thu, 13 Dec 2018 14:48:59 +1100
Cc: Thomas Graf <tgraf@suug.ch>, Tom Herbert <tom@quantonium.net>,
        David Miller <davem@davemloft.net>, netdev@vger.kernel.org,
        linux-kernel@vger.kernel.org
Subject: Re: [PATCH net-next] rhashtable: further improve stability of rhashtable_walk
In-Reply-To: <20181213014309.uufaeoijhympgxbz@gondor.apana.org.au>
References: <153086109256.2825.15329014177598382684.stgit@noble> <87zhtkeimx.fsf@notabene.neil.brown.name> <20181207053943.7zacyn5uvqkfnfoi@gondor.apana.org.au> <87k1kico1o.fsf@notabene.neil.brown.name> <20181211051755.modgomqzszkbiihe@gondor.apana.org.au> <87mupbvch0.fsf@notabene.neil.brown.name> <20181212054601.wbzpxjunnsfi62mz@gondor.apana.org.au> <87efanuu06.fsf@notabene.neil.brown.name> <20181212080037.j2zs22t57uxdu2jr@gondor.apana.org.au> <87bm5ruo3f.fsf@notabene.neil.brown.name> <20181213014309.uufaeoijhympgxbz@gondor.apana.org.au>
Message-ID: <8736r2ulw4.fsf@notabene.neil.brown.name>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="=-=-=";
        micalg=pgp-sha256; protocol="application/pgp-signature"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

--=-=-=
Content-Type: text/plain
Content-Transfer-Encoding: quoted-printable

On Thu, Dec 13 2018, Herbert Xu wrote:

> On Wed, Dec 12, 2018 at 07:49:08PM +1100, NeilBrown wrote:
>> On Wed, Dec 12 2018, Herbert Xu wrote:
>>=20
>> > On Wed, Dec 12, 2018 at 05:41:29PM +1100, NeilBrown wrote:
>> >>
>> >> So you would substantially slow down the rhashtable_walk_start() step.
>> >
>> > This whole thing is meant for uses such as /proc and netlink
>> > enumeration.  Speed is definitely not a prerogative of these
>> > iterators.
>>=20
>> An RCU grace period is typically 10s of milliseconds.  It doesn't take
>> very many of those to start being noticed.
>
> Why would you even need an RCU grace period for deleting and adding
> the walker object to the bucket list? You just allocate a new one
> each time and free the old one after an RCU grace period.  I don't
> see where the latency is coming from.

Yes, you could rcu_free the old one and allocate a new one.  Then you
would have to be ready to deal with memory allocation failure which
complicates usage (I already don't like that rhashtable_insert() can
report -ENOMEM!).

Another problem with inserting a marker object on rhashtable_walk_stop()
is that it might not be clear where to insert it.
You would have to take the spinlock, and then you might find that the
location that you want to mark has been deleted from the list.  I think
you can probably still manage a reliable placement, but it could get
messy.

>
>> > For that matter, if speed was an issue then surely you would
>> > not drop out of the RCU read lock at all while iterating.
>>=20
>> tipc_nl_sk_walk() drops out of RCU for every object.
>> I don't know what it is used for, but I doubt that making it thousands
>> of times slower would be a good thing.
>
> Now you're conflating two different things.  Dropping the RCU
> isn't necessarily slow.  We were talking about waiting for an
> RCU grace period which would only come into play if you were
> suspending the walk indefinitely.  Actually as I said above even
> there you don't really need to wait.

How would rhashtable_walk_stop() know if it was indefinite or not?

Yes, if you allocate a new marker on each rhashtable_walk_start()
(passing in a gfp_t and coping with errors) then you don't need to wait
a grace period.  If you reuse one to avoid the errors, you do.

>
>> > It sounds to me like you're trying to use this interface for
>> > something that it's simply not designed to do.
>>=20
>> I'm just trying to make sure we have a reliable data structure which I
>> can use without having to be worried that I might accidentally hit some
>> unsupported behaviour.
>
> Now that is something I agree with.
>
>> I don't really see why you think my patch is all that complex.
>> The only conceptual change is that hash chains are now ordered, and
>> ordered chains are easy to understand.
>> The biggest part of the code change is just moving some code from
>> rhashtable_walk_start() to rhashtable_walk_next().
>>=20
>> Why don't you like it?
>
> My main beef is the fact that it doesn't work with rhlist.  So down
> the track either we'll have to add more complexity for rhlist or
> we will have to rip this out again do something completely different.

You have previously said that functionality which isn't needed by current
code should not be a concern.  No current code ever stops and restarts
an rhlist walk, so this shouldn't be relevant.  Solve that problem
when/if we come to it.

If this is really the main beef, then let's turn the question around.
Suppose this patch had landed before rhltables had landed.  How would we
implement rhltables without breaking this functionality?

Keeping all the objects with the same key in a linked list is clearly a
good idea - make this a circular list as there is no obvious "first".

*Not* keeping them all in the hash chain is ideal, but not essential.
I see three costs with this.
One is that we would compare the same key multiple times for lookup.
How much of a problem is that? A failing compare is usually quite quick,
and most rhltable uses have inline memcmp for comparison (admittedly not
all).

The second cost is tracking the chain length against elasticity.
We could flag one object with each key as a 'master' (low bit of the
'next' pointer) and only count the masters.  When lookup raced with
remove this might get a slightly incorrect count, but I don't think that
hurts.

Finally, there is more pointer chasing as the chains are longer.

Was performance part of the reason for adding rhltables?  It isn't
mentioned in the commit message, but it is easy to miss things.

Thanks,
NeilBrown



>
> Cheers,
> --=20
> Email: Herbert Xu <herbert@gondor.apana.org.au>
> Home Page: http://gondor.apana.org.au/~herbert/
> PGP Key: http://gondor.apana.org.au/~herbert/pubkey.txt

--=-=-=
Content-Type: application/pgp-signature; name="signature.asc"

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEG8Yp69OQ2HB7X0l6Oeye3VZigbkFAlwR1qsACgkQOeye3VZi
gbm9EQ//YMmhaw/7qwcdmu7LkybnSiR7bI0EkcaEFLLLL2ujLgOQmg4SpaueNFuo
PLOvmOfbpq1UGGt8OVOjPt0Fy4M/Bca0CczgkVZY8eagQtoTkxa9KFgsddZPLB4q
2RguKZr489AJre1/Q2JIONdS4ZnIMQXclnlLHjeMp4pSUv6C4pL4BUQ+z8K3geD7
EREz6SMfGSsU1oIY49QAomKQ2yjlxwbYYc2FbLVF/2YmO9DJPrWGTVNUV2AevdlT
dJNDxkR34WqK2sps4VRdZjRdawxbdR9CZrhh28DbxAO8Z0lV0zJfm/7buo3dX1Br
h4T7+U6i+WPqH/nGCzda6H1j1OC23eIjGME9hVcv/RpO881Pnd0oxGxP1ly0i01G
GmDr913bhzFqUEh/lVFGQAtfnEaxK7NK/Z57gWKC1+yr41lAmo8fZGY9xW0bCA7L
Lr5/PhFYL2INTY3WC8P2VtJzYhfM+TfJbOn7dP6lFkKgd0kS5ieiLvaSfZ+Ua/hI
gswPlPgWPdU0adNu789bszpm00lybI8SNP1JkDTXsEIZw/HwYovtpIt7HvlwVj58
6XrWXi+upb1FiH/uEBDtjONx0UJsoLHK16gV28ZWkVJlDHtW7Gyg87ERyd79UOtA
DrzmX29zvK/ob5alPwXIvbeJzsy2J52889bGHYwxbKhhAUuu8n8=
=7HH4
-----END PGP SIGNATURE-----
--=-=-=--
