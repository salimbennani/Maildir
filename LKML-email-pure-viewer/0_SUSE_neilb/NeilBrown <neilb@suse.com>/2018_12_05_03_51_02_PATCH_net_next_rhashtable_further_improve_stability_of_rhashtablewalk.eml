Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 05 Dec 2018 14:28:50 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 1697F580375;
	Tue,  4 Dec 2018 19:51:24 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 04 Dec 2018 19:51:23 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AtkUilBG1zGZ6ayrF1zVNYZ1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75os+/bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJVyJPHI2y?=
 =?us-ascii?q?YZYNAOoPPuhXoJXyp0AWrRa8HgSsC//jxyVSi3PqwaE2z+IsGhzG0gw6GNIOtW?=
 =?us-ascii?q?zZos3rO6cTVeC40bPIzTLNbvNQxDzw747IfQ4gofGIRr19atHRyVQ0FwzblFmf?=
 =?us-ascii?q?tYvlPzaM2+kLrmOV7PJgWPqxh2I7rwx9uCWjy8kyhoXTm44YyUzI+T94zYs3Pd?=
 =?us-ascii?q?G0VUp2bN6+HJdNuSyXN5F6Tt08T210oio21L0LtJG9cSMX0poo3QTfZOaCc4WQ?=
 =?us-ascii?q?4hLsSuKRITBgiXJ7d7KwmQyy/VKjyuLiTMm01khFri5fntnLrHAN2ATf6smBSv?=
 =?us-ascii?q?Rj4keswSiD2xzX5+1ePEw5m7TXJ4Q8zrMzipYfq0XOEy3ulEXzlqCWd0Ek+uay?=
 =?us-ascii?q?6+TgZ7XrvpucN45yigHjPaUig8+/DvoiMggIQWeb/f2w1Lrt/E3/XrpKlOY7kr?=
 =?us-ascii?q?fWsJ/EP8QXvK25DBFP0oYl9Rm/Cy2q0NMCnXkINF5FYg6Ij5D1O1HSJ/D1FfO/?=
 =?us-ascii?q?g1WvkDh13fzHMaDhD47JLnjClrfhYLl851RdyAo10dBQ+ZZUBqsdL/L0X0/7rM?=
 =?us-ascii?q?bYAQMhMwyo3+bnD81w1oMEVmKOHq+WKqTSvUWI5uIyOeaMYoAVtS35K/gk4f7u?=
 =?us-ascii?q?kHA4lUUcfamvwZsYdnS4Eu56LEWeZHrmms0BHnsSvgoiUOzqj0WPUTxUZ3msRa?=
 =?us-ascii?q?485TY7CISgDYfEXY2thL2B3CGmHpxZfGxGC1aMEWv2eIWAQfsDdCWSIsp5mDwe?=
 =?us-ascii?q?SbehU5Mh1Q2ptALi0bVnNerU+iobtZ75zth6/e/TmAo29Tx1CcSdzm6MQ3t1nm?=
 =?us-ascii?q?MOWz85wqR/rVZhxVeE1Khym+ZYGsBL5/NVTgc6MobRz+9gBND0QA7BetaJR0yg?=
 =?us-ascii?q?QtWpGjwxStMxw9kTY0dyAdmijxbD3za0DL8RjbCEGJs08qfE1XjrO8l902rG1L?=
 =?us-ascii?q?Umj1Q+X8RAL3OmibBl+wjTHYHJlV6ZmLisdagb2C7N92KDzW6VsUFcUQ5wV7jF?=
 =?us-ascii?q?XH8FakvXq9T5+l3NT7u0Bbs7NQtBzNaIKrFWZd3xkVVGWPDjNczDbG2rhWe/Gw?=
 =?us-ascii?q?yExrOWY4rsYGUSwiPdBVMAkwAS+3aGKAc/Cj2go2LYEDxhC1bvb1nw/ul5rXOx?=
 =?us-ascii?q?VlU0wB2Sb019y7q1/QYYheCdS/MW2bIEpCchqjVuEFahxd7WDMCApw5gfKVabt?=
 =?us-ascii?q?Mw+1NH1WPftwxgMZ2sNaFihlgCcwtpu0PizQl4CoJFkcIytnMl0BJyKb6E0FNG?=
 =?us-ascii?q?bz6Xx5TwNaPYK2bs/BGjcbXZ2kzD39mM/KcP6/M4q0v4sQGtF0oi9Whn0tZP33?=
 =?us-ascii?q?ud4JXKEBQdUZbrXkkr8Bh6oqnQYjMh6IPMyX1sLa60vyfC2tI0Hucq1gysftZf?=
 =?us-ascii?q?MKyeEg/yHNYXB8yvKOwshlioYQgIPOFU9K4oIcymc+GK17KsPOZlhDiml3hI4J?=
 =?us-ascii?q?hh0kKQ8CpxUvTI35cZzP6CxAuISjD8gE2nss/pg4BEZCgeEXalxijgGYFeeLdy?=
 =?us-ascii?q?fYENCWq1J823x9N+h4PiWnJC9V6jAU8G19GteRaIc1P92ghQ31wNoXO7gSu40y?=
 =?us-ascii?q?B0kzYxo6uf3SzC2eTjeAAcOm5WQmlvllPsIYmyj9AHU0mkdQkplB255Unkw6hX?=
 =?us-ascii?q?vrhwL27WQU1QZSj5M3liUrestrqFe8NP6oknsT9UUOS/ZlCWUKX9rAEZ0yPgHm?=
 =?us-ascii?q?tewi40dzext5X9nhx6jn+dLXlpoHrYf8Fw2QnQ5NjGSfFN2ToGQTFyiSPLCVik?=
 =?us-ascii?q?I9mp4dKUmo/Ds++kUGKtTJ9TcSjtzY6bsCu75GtqAQCwnvypm93nFxQ63jH/19?=
 =?us-ascii?q?VwSSrIqxP8aJHx16umKeJnYlVoBFjk5sp5AI5+k5E8hJEN2XcAgJWV8mEKkWPy?=
 =?us-ascii?q?MdVdxKL/Y2ABRT8Nw97J/gfl3FdvIW6Ox4L8Tn+d2NduZ8GmYmMK3SIw98VKCK?=
 =?us-ascii?q?aX7LNehyd0rES3rRnNYfdjhDcS0uUh6GQVg+wSvAotzyOdAq0dHEVCPCzskQiI?=
 =?us-ascii?q?4M66rKlNeGmvdr2w3lJknd+9FLGCvh1cWHHhd5c+Gi9w699zMVPW333194HkY8?=
 =?us-ascii?q?LQbdMIux2QkhfAifVVKZ0rmvoLgypnJXzyvXk/x+Enihxu2ImwvJKbJGV14KK5?=
 =?us-ascii?q?HhlYOyXuaMwJ/THtibtektyS34CyBZhhHjQLXJ31TfOnCj4StPLnNxqQHz04sH?=
 =?us-ascii?q?uUBb3fHQqH4kd8s33PC4yrN22QJHQBz9VtXhydK1JEgAwOQDU2hJ05Fh2pxMz8?=
 =?us-ascii?q?dkd2/CsR60X8qhtNzOJoKhb+Xn3epAeudjc7VpyfIABK4QFF4kffKdae4f5rHy?=
 =?us-ascii?q?FE4p2hqxSAK2ycZwRVFGEJR1aLB1b5Mrm14tnA9eeYC/G6L/vPZ7WOtONfW+2J?=
 =?us-ascii?q?xZKpzotp4TKMOt+TMXllCv0xwlBDUmxhG8TFhzUPTDQalyLTYM6apxe8+Sx3ot?=
 =?us-ascii?q?q88PTxXwLv6pWAC6FPMdV04B22haaDN+iNhCd2MzpY15UMxWPWx7gbxlIdlyZu?=
 =?us-ascii?q?dzy1G7QaqSHNVL7QmrNQDxMDcSxzKdBH77gi0QhNI8LbjtL126V8jv40DVdFSF?=
 =?us-ascii?q?PgltuoZcwMP2GyKlfHCFyXO7SBID3B29v3br+kSb1MkOVUsAW9uSqaE0/mJDiM?=
 =?us-ascii?q?iyPlWAyvMe5SiiGWJxheuIC7chZwBmnvVtPmahunMNBpiT0626E7hnTPNWQEKz?=
 =?us-ascii?q?hzb1tNrqGM7SNfmvh+G3ZO7nxgLemFnSaW9+jZKpYMvvttDSR5jOZa4HU8y7tI?=
 =?us-ascii?q?4yBIXv11mC3OrtFwp1GqiPWAyj1iUEkGljEeuIKMuEx5cYrD/5cIDWrL5hsDxX?=
 =?us-ascii?q?6NFhtMrNszTpXPtrpax8LT3JLuYGNC/sje8NEAL8fTLs6AKjwoKRPvEXjTFgRD?=
 =?us-ascii?q?RCP9cSnjgEkVsPyI/HCPstButp/psIMTQ7lHU1o0C/ZcDEl5SphKDJ5pXz9stL?=
 =?us-ascii?q?+fiMMSrS6ypQfcQe1Wt47KU/aVD+mpLjuF2+pqfRwNlJX1LIA5LIrk3QQ2bFR7?=
 =?us-ascii?q?mI7iAFfLUJZGpSg3PVx8m1lE7HUrFj574EnicA74pSZLTfM=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BbAAAHSgdch0O0hNFkHQEBBQEHBQGBV?=
 =?us-ascii?q?AUBCwGBWoIRJ5gggiFolmGBXwINHRMBh0wiNwYNAQMBAQEBAQECARMBAQEIDQk?=
 =?us-ascii?q?IKS+CNiQBgmIDAwECJFIGCQEBGBMTEgMMAUcGARIFglFLAYF0DQQBpgkzih4Pg?=
 =?us-ascii?q?m2JMReBP0CBEYJdhR6FcwKJMZcXCYMNhymHI4FbiAuHQCyIWoEDkEmBd3AVO4J?=
 =?us-ascii?q?sgiYBF44xLDKBBQEBiFclBoIgAQE?=
X-IPAS-Result: =?us-ascii?q?A0BbAAAHSgdch0O0hNFkHQEBBQEHBQGBVAUBCwGBWoIRJ5g?=
 =?us-ascii?q?ggiFolmGBXwINHRMBh0wiNwYNAQMBAQEBAQECARMBAQEIDQkIKS+CNiQBgmIDA?=
 =?us-ascii?q?wECJFIGCQEBGBMTEgMMAUcGARIFglFLAYF0DQQBpgkzih4Pgm2JMReBP0CBEYJ?=
 =?us-ascii?q?dhR6FcwKJMZcXCYMNhymHI4FbiAuHQCyIWoEDkEmBd3AVO4JsgiYBF44xLDKBB?=
 =?us-ascii?q?QEBiFclBoIgAQE?=
X-IronPort-AV: E=Sophos;i="5.56,316,1539673200"; 
   d="asc'?scan'208";a="54569419"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 04 Dec 2018 19:51:21 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726924AbeLEDvQ (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 4 Dec 2018 22:51:16 -0500
Received: from mx2.suse.de ([195.135.220.15]:55290 "EHLO mx1.suse.de"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726830AbeLEDvP (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 4 Dec 2018 22:51:15 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (unknown [195.135.220.254])
        by mx1.suse.de (Postfix) with ESMTP id 25401AEF7;
        Wed,  5 Dec 2018 03:51:13 +0000 (UTC)
From: NeilBrown <neilb@suse.com>
To: Thomas Graf <tgraf@suug.ch>,
        Herbert Xu <herbert@gondor.apana.org.au>,
        Tom Herbert <tom@quantonium.net>,
        David Miller <davem@davemloft.net>
Date: Wed, 05 Dec 2018 14:51:02 +1100
Cc: netdev@vger.kernel.org, linux-kernel@vger.kernel.org
Subject: [PATCH net-next] rhashtable: further improve stability of rhashtable_walk
In-Reply-To: <153086109256.2825.15329014177598382684.stgit@noble>
References: <153086101070.2825.6850140624411927465.stgit@noble> <153086109256.2825.15329014177598382684.stgit@noble>
Message-ID: <87zhtkeimx.fsf@notabene.neil.brown.name>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="=-=-=";
        micalg=pgp-sha256; protocol="application/pgp-signature"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

--=-=-=
Content-Type: text/plain
Content-Transfer-Encoding: quoted-printable


If the sequence:
   obj =3D rhashtable_walk_next(iter);
   rhashtable_walk_stop(iter);
   rhashtable_remove_fast(ht, &obj->head, params);
   rhashtable_walk_start(iter);

 races with another thread inserting or removing
 an object on the same hash chain, a subsequent
 rhashtable_walk_next() is not guaranteed to get the "next"
 object. It is possible that an object could be
 repeated, or missed.

 This can be made more reliable by keeping the objects in a hash chain
 sorted by memory address.  A subsequent rhashtable_walk_next()
 call can reliably find the correct position in the list, and thus
 find the 'next' object.

 It is not possible to take this approach with an rhltable as keeping
 the hash chain in order is not so easy.  When the first object with a
 given key is removed, it is replaced in the chain with the next
 object with the same key, and the address of that object may not be
 correctly ordered.
 I have not yet found any way to achieve the same stability
 with rhltables, that doesn't have a major impact on lookup
 or insert.  No code currently in Linux would benefit from
 such extra stability.

 With this patch:
 - a new object is always inserted after the last object with a
   smaller address, or at the start.
 - when rhashtable_walk_start() is called, it records that 'p' is not
   'safe', meaning that it cannot be dereferenced.  The revalidation
   that was previously done here is moved to rhashtable_walk_next()
 - when rhashtable_walk_next() is called while p is not NULL and not
   safe, it walks the chain looking for the first object with an
   address greater than p and returns that.  If there is none, it moves
   to the next hash chain.

Signed-off-by: NeilBrown <neilb@suse.com>
=2D--

This is a resend of a patch that I sent back in July.  I couldn't
applied then because it assumed another rhashtable patch which hadn't
landed yet - it now has.

NeilBrown

 include/linux/rhashtable-types.h |  1 +
 include/linux/rhashtable.h       | 10 ++++-
 lib/rhashtable.c                 | 82 ++++++++++++++++++++++++++----------=
----
 3 files changed, 62 insertions(+), 31 deletions(-)

diff --git a/include/linux/rhashtable-types.h b/include/linux/rhashtable-ty=
pes.h
index 763d613ce2c2..bc3e84547ba7 100644
=2D-- a/include/linux/rhashtable-types.h
+++ b/include/linux/rhashtable-types.h
@@ -126,6 +126,7 @@ struct rhashtable_iter {
 	struct rhashtable_walker walker;
 	unsigned int slot;
 	unsigned int skip;
+	bool p_is_unsafe;
 	bool end_of_table;
 };
=20
diff --git a/include/linux/rhashtable.h b/include/linux/rhashtable.h
index 20f9c6af7473..4a8056b66bfb 100644
=2D-- a/include/linux/rhashtable.h
+++ b/include/linux/rhashtable.h
@@ -635,7 +635,12 @@ static inline void *__rhashtable_insert_fast(
 		    (params.obj_cmpfn ?
 		     params.obj_cmpfn(&arg, rht_obj(ht, head)) :
 		     rhashtable_compare(&arg, rht_obj(ht, head)))) {
=2D			pprev =3D &head->next;
+			if (rhlist) {
+				pprev =3D &head->next;
+			} else {
+				if (head < obj)
+					pprev =3D &head->next;
+			}
 			continue;
 		}
=20
@@ -1131,7 +1136,8 @@ static inline int rhashtable_walk_init(struct rhashta=
ble *ht,
  * Note that if you restart a walk after rhashtable_walk_stop you
  * may see the same object twice.  Also, you may miss objects if
  * there are removals in between rhashtable_walk_stop and the next
=2D * call to rhashtable_walk_start.
+ * call to rhashtable_walk_start.  Note that this is different to
+ * rhashtable_walk_enter() which never misses objects.
  *
  * For a completely stable walk you should construct your own data
  * structure outside the hash table.
diff --git a/lib/rhashtable.c b/lib/rhashtable.c
index 852ffa5160f1..d4154b9a29a1 100644
=2D-- a/lib/rhashtable.c
+++ b/lib/rhashtable.c
@@ -225,6 +225,7 @@ static int rhashtable_rehash_one(struct rhashtable *ht,=
 unsigned int old_hash)
 	struct bucket_table *old_tbl =3D rht_dereference(ht->tbl, ht);
 	struct bucket_table *new_tbl =3D rhashtable_last_table(ht, old_tbl);
 	struct rhash_head __rcu **pprev =3D rht_bucket_var(old_tbl, old_hash);
+	struct rhash_head __rcu **inspos;
 	int err =3D -EAGAIN;
 	struct rhash_head *head, *next, *entry;
 	spinlock_t *new_bucket_lock;
@@ -253,12 +254,15 @@ static int rhashtable_rehash_one(struct rhashtable *h=
t, unsigned int old_hash)
 	new_bucket_lock =3D rht_bucket_lock(new_tbl, new_hash);
=20
 	spin_lock_nested(new_bucket_lock, SINGLE_DEPTH_NESTING);
=2D	head =3D rht_dereference_bucket(new_tbl->buckets[new_hash],
=2D				      new_tbl, new_hash);
=2D
+	inspos =3D &new_tbl->buckets[new_hash];
+	head =3D rht_dereference_bucket(*inspos, new_tbl, new_hash);
+	while (!rht_is_a_nulls(head) && head < entry) {
+		inspos =3D &head->next;
+		head =3D rht_dereference_bucket(*inspos, new_tbl, new_hash);
+	}
 	RCU_INIT_POINTER(entry->next, head);
=20
=2D	rcu_assign_pointer(new_tbl->buckets[new_hash], entry);
+	rcu_assign_pointer(*inspos, entry);
 	spin_unlock(new_bucket_lock);
=20
 	rcu_assign_pointer(*pprev, next);
@@ -554,6 +558,10 @@ static struct bucket_table *rhashtable_insert_one(stru=
ct rhashtable *ht,
 		return ERR_PTR(-ENOMEM);
=20
 	head =3D rht_dereference_bucket(*pprev, tbl, hash);
+	while (!ht->rhlist && !rht_is_a_nulls(head) && head < obj) {
+		pprev =3D &head->next;
+		head =3D rht_dereference_bucket(*pprev, tbl, hash);
+	}
=20
 	RCU_INIT_POINTER(obj->next, head);
 	if (ht->rhlist) {
@@ -648,10 +656,10 @@ EXPORT_SYMBOL_GPL(rhashtable_insert_slow);
  *
  * This function prepares a hash table walk.
  *
=2D * Note that if you restart a walk after rhashtable_walk_stop you
=2D * may see the same object twice.  Also, you may miss objects if
=2D * there are removals in between rhashtable_walk_stop and the next
=2D * call to rhashtable_walk_start.
+ * A walk is guaranteed to return every object that was in
+ * the table before this call, and is still in the table when
+ * rhashtable_walk_next() returns NULL.  Duplicates can be
+ * seen, but only if there is a rehash event during the walk.
  *
  * For a completely stable walk you should construct your own data
  * structure outside the hash table.
@@ -735,19 +743,10 @@ int rhashtable_walk_start_check(struct rhashtable_ite=
r *iter)
=20
 	if (iter->p && !rhlist) {
 		/*
=2D		 * We need to validate that 'p' is still in the table, and
=2D		 * if so, update 'skip'
+		 * 'p' will be revalidated when rhashtable_walk_next()
+		 * is called.
 		 */
=2D		struct rhash_head *p;
=2D		int skip =3D 0;
=2D		rht_for_each_rcu(p, iter->walker.tbl, iter->slot) {
=2D			skip++;
=2D			if (p =3D=3D iter->p) {
=2D				iter->skip =3D skip;
=2D				goto found;
=2D			}
=2D		}
=2D		iter->p =3D NULL;
+		iter->p_is_unsafe =3D true;
 	} else if (iter->p && rhlist) {
 		/* Need to validate that 'list' is still in the table, and
 		 * if so, update 'skip' and 'p'.
@@ -864,15 +863,39 @@ void *rhashtable_walk_next(struct rhashtable_iter *it=
er)
 	bool rhlist =3D ht->rhlist;
=20
 	if (p) {
=2D		if (!rhlist || !(list =3D rcu_dereference(list->next))) {
=2D			p =3D rcu_dereference(p->next);
=2D			list =3D container_of(p, struct rhlist_head, rhead);
=2D		}
=2D		if (!rht_is_a_nulls(p)) {
=2D			iter->skip++;
=2D			iter->p =3D p;
=2D			iter->list =3D list;
=2D			return rht_obj(ht, rhlist ? &list->rhead : p);
+		if (!rhlist && iter->p_is_unsafe) {
+			/*
+			 * First time next() was called after start().
+			 * Need to find location of 'p' in the list.
+			 */
+			struct rhash_head *p;
+
+			iter->skip =3D 0;
+			rht_for_each_rcu(p, iter->walker.tbl, iter->slot) {
+				iter->skip++;
+				if (p <=3D iter->p)
+					continue;
+
+				/* p is the next object after iter->p */
+				iter->p =3D p;
+				iter->p_is_unsafe =3D false;
+				return rht_obj(ht, p);
+			}
+			/* There is no "next" object in the list, move
+			 * to next hash chain.
+			 */
+		} else {
+			if (!rhlist || !(list =3D rcu_dereference(list->next))) {
+				p =3D rcu_dereference(p->next);
+				list =3D container_of(p, struct rhlist_head,
+						    rhead);
+			}
+			if (!rht_is_a_nulls(p)) {
+				iter->skip++;
+				iter->p =3D p;
+				iter->list =3D list;
+				return rht_obj(ht, rhlist ? &list->rhead : p);
+			}
 		}
=20
 		/* At the end of this slot, switch to next one and then find
@@ -882,6 +905,7 @@ void *rhashtable_walk_next(struct rhashtable_iter *iter)
 		iter->slot++;
 	}
=20
+	iter->p_is_unsafe =3D false;
 	return __rhashtable_walk_find_next(iter);
 }
 EXPORT_SYMBOL_GPL(rhashtable_walk_next);
=2D-=20
2.14.0.rc0.dirty


--=-=-=
Content-Type: application/pgp-signature; name="signature.asc"

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEG8Yp69OQ2HB7X0l6Oeye3VZigbkFAlwHSygACgkQOeye3VZi
gbnDWw/+K+GVxehFAtWhyiuK+gI9g1uV5ThFp5yV70S9BuTXUQiKAZMH9h7pe11k
NLgtq0iOl442UvsRNb0GxlDtevJYdMcPnaW1jt3oE9fnoYm1Etr/dLDUwmJGNeUs
0vYZwcy0uEZ7Y++pHlLZ38NGsLD806egNfduUzzvfE+UDT7S8mD/wUrPsFZGOMo0
uGyVgxTimx0g62V/wx4bq8OlotUGb78OWDlnVMjGMElj6DQC5X5qIotwzaTw8cD7
90jrDjJ/9RKdzA8rSfXpzMZEAWZWg6w17j2ifMNSBpLMFLN68yKLJPlgJGLCpNau
AfU3omBAWYGLMnOyqcPsLAq7J9ZqCZDR3kz12pgXjWIMDouzn/yPMVal71s5hGC6
Ee238xygU/QTw2p5FNHUTL5fQXA9yFzHIqpr/CpUTfhn9HdFZ4GwWlEfUC9xk4Q3
CvYTKI04o/Cec5WZHExGGuVcX2BIBYZ9CB+KrJmm6SNggmITnCE4H4+kIhfOzz5j
/Pwrpk7zKPx1wQXLY72HwndlHnVi+ftWp/l1W4VZEDpeLrJlTKLB70bEK0ZnecHD
KL8M/+XXoG6pOJR4PMsF2smE76tqb2jFw7RddFbrMnykoq+fHGlH49S6StFBIXLw
xfVR1E7PVrLR7C2jCngYcTa7NG5rfaMHJvacOvr3ERATnk6Wqeo=
=CQV/
-----END PGP SIGNATURE-----
--=-=-=--
