Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 08:52:12 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 1EBA6580213;
	Thu, 29 Nov 2018 15:06:42 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 15:06:42 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ArnDMXh1KR4fXupgpsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segSKf7xwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJBUMhPWSJPH4Cy?=
 =?us-ascii?q?YIkBD+UPMulXs4bzp0AWrRa8HgSsGOHixyVUinPqx6A30eIsGhzG0gw6GNIOtW?=
 =?us-ascii?q?zZos3rO6cTVeC40bPIzTLNbvNQxDzw747IfQ4gofGIRr19atHRyVQ0FwzblFmf?=
 =?us-ascii?q?tYvlPzaM2+kLrmOV7PJgWPqxh2I7rwx9uCWjy8kyhoXTm44YyUzI+T94zYs3Pd?=
 =?us-ascii?q?G0VUp2bN6+HJdNuSyXN5F6Tt08T210oio21L0LtJG9cSMX0poo3QTfZOaCc4WQ?=
 =?us-ascii?q?4hLsSuKRITBgiXJ7d7KwmQyy/VKjyuLiTMm01khFri5fntnLrHAN2ATf6smBSv?=
 =?us-ascii?q?Rj4keswSiD2xzX5+1ePEw5m7TXJ4Q8zrMzipYfq0XOEy3ulEXzlqCWd0Ek+uay?=
 =?us-ascii?q?6+TgZ7XrvpucN45yigHjPaUig8+/DvoiMggIQWeb/f2w1Lrt/E3/XrpKlOY7kr?=
 =?us-ascii?q?fWsJ/EP8QXvK25DBFP0oYl9Rm/Cy2q0NMCnXkINF5FYg6Ij5D1O1HSJ/D1FfO/?=
 =?us-ascii?q?g1WvkDh13fzHMaDhD47JLnjClrfhYLl851RdyAo10dBQ+ZZUBqsdL/L0X0/7rM?=
 =?us-ascii?q?bYAQMhMwyo3+bnD81w1oMEVmKOHq+WKqTSvUWI5uIyOeaMYoAVtS35K/gk4f7u?=
 =?us-ascii?q?kHA4lUUcfamvwZsYdnS4Eu56LEWeZHrmms0BHnsSvgoiUOzqj0WPUTxUZ3msRa?=
 =?us-ascii?q?485TY7CISgDYfEXY2thL2B3CGmHpxZfGxGC1aMEWv2eIWAQfsDdCWSIsp5mDwe?=
 =?us-ascii?q?SbehU5Mh1Q2ptALi0bVnNerU+iobtZ75zth6/e/TmAo29Tx1CcSdzm6MQ3t1nm?=
 =?us-ascii?q?MOWz85wqR/rVZhxVeE1Khym+ZYGsBL5/NVTgc6MobRz+9gBND0QA7BetaJR0yg?=
 =?us-ascii?q?QtWpGjwxStMxw9kTY0dyAdmijxbD3za0DL8RjbCEGJs08qfE1XjrO8l902rG1L?=
 =?us-ascii?q?Umj1Q+X8RAL3OmibBl+wjTHYHJlV6ZmLisdagb2C7N92KDzW6VsUFcUQ5wV7jF?=
 =?us-ascii?q?XH8FakvXq9T5+l3NT7u0Bbs7NQtBzNaIKrFWZd3xkVVGWPDjNczDbG2rhWe/Gw?=
 =?us-ascii?q?yExrOWY4rsYGUSwiPdBVMAkwAS+3aGKAc/Cj2go2LYEDxhC1bvb1nw/ul5rXOx?=
 =?us-ascii?q?VlU0wB2Sb019y7q1/QYYheCdS/MW2bIEpCchqjVuEFahxd7WDMCApw5gfKVabt?=
 =?us-ascii?q?Mw+1NH1WPftwxgMZ2sNaFihlgCcwtpu0PizQl4CoJFkcIytnMl0BJyKb6E0FNG?=
 =?us-ascii?q?bz6Xx5TwNaPYK2bs/BGjcbXZ2kzD39mM/KcP6/M4q0v4sQGtF0oi9Whn0tZP33?=
 =?us-ascii?q?ud4JXKEBQdUZbrXkkr8Bh6oqnQYjMh6IPMyX1sLa60vyfC2tI0Hucq1gysftZf?=
 =?us-ascii?q?MKyeEg/yHNYXB8yvKOwshlioYQgIPOFU9K4oIcymc+GK17KsPOZlhDiml3hI4J?=
 =?us-ascii?q?hh0kKQ8CpxUvTI35cZzP6CxAuISjD8gE2nss/pg4BEZCgeEXalxijgGYFeeLdy?=
 =?us-ascii?q?fYENCWq1J823x9N+h4PiWnJC9V6jAU8G19GteRaIc1P92ghQ31wNoXO7gSu40y?=
 =?us-ascii?q?B0kzYxo6uf3SzC2eTjeAAcOm5WQmlvllPsIYmyj9AHU0mkdQkplB255Unkw6hX?=
 =?us-ascii?q?vrhwL27WQU1QZSj5M3liUrestrqFe8NP6oknsT9UUOS/ZlCWUKX9rAEZ0yPgHm?=
 =?us-ascii?q?tewi40dzext5X9nhx6jn+dLXlpoHrYf8Fw2QnQ5NjGSfFN2ToGQTFyiSPLCVik?=
 =?us-ascii?q?I9mp4dKUmo/Ds++kUGKtTJ9TcSjtzY6bsCu75GtqAQCwnvypm93nFxQ63jH/19?=
 =?us-ascii?q?VwSSrIqxP8aJHx16umKeJnYlVoBFjk5sp5AI5+k5E8hJEN2XcAgJWV8mEKkWPy?=
 =?us-ascii?q?MdVdxKL/Y2ABRT8Nw97J/gfl3FdvIW6Ox4L8Tn+d2NduZ8GmYmMK3SIw98VKCK?=
 =?us-ascii?q?aX7LNehyd0rES3rRnNYfdjhDcS0uUh6GQVg+wSvAotzyOdAq0dHEVCPCzskQiI?=
 =?us-ascii?q?4M66rKlNeGmvdr2w3lJknd+9FLGCvh1cWHHhd5c+Gi9w699zMVPW333194HkY8?=
 =?us-ascii?q?LQbdMIux2QkhfAifVVKZ0rmvoLgypnJXzyvXk/x+Enihxu2ImwvJKbJGV14KK5?=
 =?us-ascii?q?HhlYOyXuaMwJ/THtibtektyS34CyBZhhHjQLXJ31TfOnCj4StPLnNxqQHz04sH?=
 =?us-ascii?q?uUBb3fHQqH4kd8s33PC4yrN22QJHQBz9VtXhydK1JEgAwOQDU2hJ05Fh2pxMz8?=
 =?us-ascii?q?dkd2/CsR60X8qhtNzOJoKhb+Xn3epAeudjc7VpyfIABK4QFF4kffKdae4f5rHy?=
 =?us-ascii?q?FE4p2hqxSAK2ycZwRVFGEJR1aLB1b5Mrm14tnA9eeYC/G6L/vPZ7WOtONfW+2J?=
 =?us-ascii?q?xZKpzotp4TKMOt+TMXllCv0xwlBDUmxhG8TFhzUPTDQalyLTYM6apxe8+Sx3ot?=
 =?us-ascii?q?q88PTxXwLv6pWAC6FPMdV04B22haaDN+iNhCd2MzpY15UMxWPWx7gbxlIdlyZu?=
 =?us-ascii?q?dzy1G7QaqSHNVL7QmrNQDxMDcSxzKdBH77gi0QhNI8LbjtL126V8jv40DVdFSF?=
 =?us-ascii?q?PgltuoZcwMP2GyKlfHCFyXO7SBID3B29v3br+kSb1MkOVUsAW9uSqaE0/mJDiM?=
 =?us-ascii?q?iyPlWAyvMe5SiiGWJxheuIC7chZwBmnvVtPmahunMNBpiT0626E7hnTPNWQEKz?=
 =?us-ascii?q?hzb1tNrqGM7SNfmvh+G3ZO7nxgLemFnSaW9+jZKpYMvvttDSR5jOZa4HU8y7tI?=
 =?us-ascii?q?4yBIXv11mC3OrtFwp1GqiPWAyj1iUEkGljEepo+Fsw1GMLTF8Z8IDXTA9QMR6m?=
 =?us-ascii?q?O4CBkQodZhTNr1tPYD5MLIkffVJTZG2cjT4s1UU87ZKcaNGGE8KhevEznRWlhW?=
 =?us-ascii?q?BQW3PH3S0hQO2MqZ8WeY+91j8sDh?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AtAAD6bwBch0O0hNFlHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGDayeDeYgYjAmBaDmDMYpDiTyBcywTAYQ7A4M2IjQJDQEDAQEBAQEBAgE?=
 =?us-ascii?q?TAQEBCA0JCCkvgjYkAYJiAwMBAiAEUgYJAQEYDAIYDgICA0QQBhMFgxyBdQ0EA?=
 =?us-ascii?q?ak+fDOKL4ELiwsXgT9AgREzhAcZAYZDglcCj2qQOQmDCY5BColZhzmaFIINcBW?=
 =?us-ascii?q?DJ4InDAuOMSwyAYEEAQGNPwEB?=
X-IPAS-Result: =?us-ascii?q?A0AtAAD6bwBch0O0hNFlHQEBBQEHBQGBUQgBCwGDayeDeYg?=
 =?us-ascii?q?YjAmBaDmDMYpDiTyBcywTAYQ7A4M2IjQJDQEDAQEBAQEBAgETAQEBCA0JCCkvg?=
 =?us-ascii?q?jYkAYJiAwMBAiAEUgYJAQEYDAIYDgICA0QQBhMFgxyBdQ0EAak+fDOKL4ELiws?=
 =?us-ascii?q?XgT9AgREzhAcZAYZDglcCj2qQOQmDCY5BColZhzmaFIINcBWDJ4InDAuOMSwyA?=
 =?us-ascii?q?YEEAQGNPwEB?=
X-IronPort-AV: E=Sophos;i="5.56,296,1539673200"; 
   d="scan'208";a="53243342"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 15:06:40 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727342AbeK3KNo (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 30 Nov 2018 05:13:44 -0500
Received: from mx2.suse.de ([195.135.220.15]:36944 "EHLO mx1.suse.de"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726393AbeK3KNn (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 30 Nov 2018 05:13:43 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay1.suse.de (unknown [195.135.220.254])
        by mx1.suse.de (Postfix) with ESMTP id 53059AC66;
        Thu, 29 Nov 2018 23:06:33 +0000 (UTC)
From: NeilBrown <neilb@suse.com>
To: Jeff Layton <jlayton@kernel.org>
Date: Fri, 30 Nov 2018 10:04:08 +1100
Subject: [PATCH 07/12] fs/locks: allow a lock request to block other
 requests.
Cc: "J. Bruce Fields" <bfields@fieldses.org>,
        Martin Wilck <mwilck@suse.de>, linux-fsdevel@vger.kernel.org,
        Frank Filz <ffilzlnx@mindspring.com>,
        linux-kernel@vger.kernel.org
Message-ID: <154353264847.32133.3141626293377932243.stgit@noble>
In-Reply-To: <154353251599.32133.1085882002675619240.stgit@noble>
References: <154353251599.32133.1085882002675619240.stgit@noble>
User-Agent: StGit/0.17.1-dirty
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Currently, a lock can block pending requests, but all pending
requests are equal.  If lots of pending requests are
mutually exclusive, this means they will all be woken up
and all but one will fail.  This can hurt performance.

So we will allow pending requests to block other requests.
Only the first request will be woken, and it will wake the others.

This patch doesn't implement this fully, but prepares the way.

- It acknowledges that a request might be blocking other requests,
  and when the request is converted to a lock, those blocked
  requests are moved across.
- When a request is requeued or discarded, all blocked requests are
  woken.
- When deadlock-detection looks for the lock which blocks a
  given request, we follow the chain of ->fl_blocker all
  the way to the top.

Tested-by: kernel test robot <rong.a.chen@intel.com>
Signed-off-by: NeilBrown <neilb@suse.com>
Reviewed-by: J. Bruce Fields <bfields@redhat.com>
---
 fs/locks.c |   43 +++++++++++++++++++++++++++++++++++++------
 1 file changed, 37 insertions(+), 6 deletions(-)

diff --git a/fs/locks.c b/fs/locks.c
index 492d970c67d7..1260c265ba62 100644
--- a/fs/locks.c
+++ b/fs/locks.c
@@ -402,6 +402,24 @@ void locks_copy_lock(struct file_lock *new, struct file_lock *fl)
 
 EXPORT_SYMBOL(locks_copy_lock);
 
+static void locks_move_blocks(struct file_lock *new, struct file_lock *fl)
+{
+	struct file_lock *f;
+
+	/*
+	 * As ctx->flc_lock is held, new requests cannot be added to
+	 * ->fl_blocked_requests, so we don't need a lock to check if it
+	 * is empty.
+	 */
+	if (list_empty(&fl->fl_blocked_requests))
+		return;
+	spin_lock(&blocked_lock_lock);
+	list_splice_init(&fl->fl_blocked_requests, &new->fl_blocked_requests);
+	list_for_each_entry(f, &fl->fl_blocked_requests, fl_blocked_member)
+		f->fl_blocker = new;
+	spin_unlock(&blocked_lock_lock);
+}
+
 static inline int flock_translate_cmd(int cmd) {
 	if (cmd & LOCK_MAND)
 		return cmd & (LOCK_MAND | LOCK_RW);
@@ -693,6 +711,7 @@ static void __locks_wake_up_blocks(struct file_lock *blocker)
 static void locks_delete_block(struct file_lock *waiter)
 {
 	spin_lock(&blocked_lock_lock);
+	__locks_wake_up_blocks(waiter);
 	__locks_delete_block(waiter);
 	spin_unlock(&blocked_lock_lock);
 }
@@ -716,6 +735,12 @@ static void __locks_insert_block(struct file_lock *blocker,
 	list_add_tail(&waiter->fl_blocked_member, &blocker->fl_blocked_requests);
 	if (IS_POSIX(blocker) && !IS_OFDLCK(blocker))
 		locks_insert_global_blocked(waiter);
+
+	/* The requests in waiter->fl_blocked are known to conflict with
+	 * waiter, but might not conflict with blocker, or the requests
+	 * and lock which block it.  So they all need to be woken.
+	 */
+	__locks_wake_up_blocks(waiter);
 }
 
 /* Must be called with flc_lock held. */
@@ -888,8 +913,11 @@ static struct file_lock *what_owner_is_waiting_for(struct file_lock *block_fl)
 	struct file_lock *fl;
 
 	hash_for_each_possible(blocked_hash, fl, fl_link, posix_owner_key(block_fl)) {
-		if (posix_same_owner(fl, block_fl))
-			return fl->fl_blocker;
+		if (posix_same_owner(fl, block_fl)) {
+			while (fl->fl_blocker)
+				fl = fl->fl_blocker;
+			return fl;
+		}
 	}
 	return NULL;
 }
@@ -982,6 +1010,7 @@ static int flock_lock_inode(struct inode *inode, struct file_lock *request)
 	if (request->fl_flags & FL_ACCESS)
 		goto out;
 	locks_copy_lock(new_fl, request);
+	locks_move_blocks(new_fl, request);
 	locks_insert_lock_ctx(new_fl, &ctx->flc_flock);
 	new_fl = NULL;
 	error = 0;
@@ -1175,6 +1204,7 @@ static int posix_lock_inode(struct inode *inode, struct file_lock *request,
 			goto out;
 		}
 		locks_copy_lock(new_fl, request);
+		locks_move_blocks(new_fl, request);
 		locks_insert_lock_ctx(new_fl, &fl->fl_list);
 		fl = new_fl;
 		new_fl = NULL;
@@ -2586,13 +2616,14 @@ void locks_remove_file(struct file *filp)
 int
 posix_unblock_lock(struct file_lock *waiter)
 {
-	int status = 0;
+	int status = -ENOENT;
 
 	spin_lock(&blocked_lock_lock);
-	if (waiter->fl_blocker)
+	if (waiter->fl_blocker) {
+		__locks_wake_up_blocks(waiter);
 		__locks_delete_block(waiter);
-	else
-		status = -ENOENT;
+		status = 0;
+	}
 	spin_unlock(&blocked_lock_lock);
 	return status;
 }


