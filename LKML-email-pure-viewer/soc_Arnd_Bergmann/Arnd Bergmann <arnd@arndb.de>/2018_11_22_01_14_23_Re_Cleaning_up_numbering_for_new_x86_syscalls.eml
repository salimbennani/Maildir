Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 22 Nov 2018 00:34:45 -0000
Received: from icoremail.net (unknown [209.85.214.175])
	by mail-app4 (Coremail) with SMTP id cS_KCgD3_wOUpvVbDWDoAQ--.39035S3;
	Thu, 22 Nov 2018 02:40:20 +0800 (CST)
Received: from mail-pl1-f175.google.com (unknown [209.85.214.175])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwCniUWLpvVbIc1kAA--.144S3;
	Thu, 22 Nov 2018 02:40:11 +0800 (CST)
Received: by mail-pl1-f175.google.com with SMTP id 101so416858pld.6
        for <xuliker@zju.edu.cn>; Wed, 21 Nov 2018 10:40:11 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-original-authentication-results:x-gm-message-state:delivered-to
         :mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc:sender:precedence:list-id;
        bh=k/nbbnLcoB2UD/mJAsAgrOoPAKxIOgOaJZPIaXY/YOo=;
        b=Jszs9SyGH5jnytPD5l/nt1PXLpJJxNzLAxEK43I4gzi1o4YUL6kOV+4XtOmO5hLILs
         mgxqwE4w9t3Gxx/KCUvA1iraDxAzWaSSjoPAK0RHLq7veczQmsOlrf3qDXj6QZJCHs/h
         FVEI/wwqWzRen+9zhzTV5mlI2GpcHitL3Znmc1nDP+7bJqOXN2cxhZbD1Ayy0FfxdBeb
         wLbvWvUaNtzKe2RgpTclSTF1FFZtd6pCGKT6XPAKywKOXN5WPc9zBp2JXkTPJH7n8gyD
         xUw7kN0J9BqL+2aYJBg+y2cF20Oa6TFDTvCdvB8YVDNgnBz1GsBOWeIr8DE6yRZ4c94h
         KaSw==
X-Original-Authentication-Results: mx.google.com;       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
X-Gm-Message-State: AA+aEWY3ekSXiKp6jvytQKGAmUgJWeKhovTBAaMSjOdId3bNUQUEy87x
	0dkb7R3aSMt/XErNNbmVZoadRQVW1cxud0VDwdiFU40Zjoxtvwo=
X-Received: by 2002:a63:4613:: with SMTP id t19-v6mr7086852pga.197.1542825611077;
        Wed, 21 Nov 2018 10:40:11 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:d106:0:0:0:0 with SMTP id l6-v6csp2322171pju;
        Wed, 21 Nov 2018 10:40:10 -0800 (PST)
X-Google-Smtp-Source: AFSGD/Xhv65PqVc41xO+nbixAV4LI1jhqxH7hfnspX+UtzxoymhMns7JM1oyoKLI2awXlbYspN+/
X-Received: by 2002:a62:2c81:: with SMTP id s123mr4500562pfs.174.1542825610107;
        Wed, 21 Nov 2018 10:40:10 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542825610; cv=none;
        d=google.com; s=arc-20160816;
        b=evATONNUEye1G29GCyaiWFxw1wsDPnXNXm4BBpePoOvZlKv6Fpm6akUVwQBGwVgtbM
         Ubv8Ujw78hvaitrhfkYcLXDesPyGlO1Gcky+nQv6sBSkSa3nh3ZaAUVnJr55jzodVJXF
         9MX6Y+wztVwOh+OdUDzsdrr0bmO06t5Rlo7QrH0yrtx4CAL6Rr9MInh2+6teCTEY3Fou
         PbGQSFFOMdZlwy6WRvYoqMDdSaAKFNSR/WbMrKpTVObO2RuL0efj5J/vP7LS5BGXlQtT
         NMyUD9dAipPBYdX8whM+qdA9hugaLKELjdA/RHzaZqMERC1NNRHJY1zcuw3RBMqy1PiI
         Vh/g==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:cc:to:subject:message-id:date:from
         :in-reply-to:references:mime-version;
        bh=k/nbbnLcoB2UD/mJAsAgrOoPAKxIOgOaJZPIaXY/YOo=;
        b=ktdmhfbHDUVB5H4O4/ZEVxWJvpMBmCxPHrMSejYl65sI4ZlQVwgArAUraKu+egBO09
         TT5eTD84o7un4U0SNQBg8aJsKQyQf/U93/uf5PtZiU++ZX3oWJAobQmHHFnirp0IroDF
         ewfbhstPhtQBBDkqaE58HN7voBBI4DNWBHGI/ohImgNWLRidBrJVt3yUsqm0+02mGdrF
         vUKX1Bdx4g1S0+wAuaqBlNpN+TnyCwxnj+oBCYqKG3ZDBZ/W8P7iGBhUS29ufC+eCi7W
         6J75XNaE680kiPjtSL8Z7gq+KrgTRZVSRwi7m2MatRBVtw88MmUBxKYbSQ+QGva+fct4
         cbBw==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id n12si6095849pgb.563.2018.11.21.10.39.54;
        Wed, 21 Nov 2018 10:40:10 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1732152AbeKVDt4 (ORCPT <rfc822;yv9200@gmail.com> + 99 others);
        Wed, 21 Nov 2018 22:49:56 -0500
Received: from mail-qt1-f195.google.com ([209.85.160.195]:33589 "EHLO
        mail-qt1-f195.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725995AbeKVDt4 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 21 Nov 2018 22:49:56 -0500
Received: by mail-qt1-f195.google.com with SMTP id l11so4641684qtp.0
        for <linux-kernel@vger.kernel.org>; Wed, 21 Nov 2018 09:14:40 -0800 (PST)
X-Received: by 2002:aed:35c5:: with SMTP id d5mr6717396qte.212.1542820479445;
 Wed, 21 Nov 2018 09:14:39 -0800 (PST)
MIME-Version: 1.0
References: <CALCETrVPcgKarpTOsdTfODkNA76W04WvW+tNWoOx6+Em0KS04A@mail.gmail.com>
In-Reply-To: <CALCETrVPcgKarpTOsdTfODkNA76W04WvW+tNWoOx6+Em0KS04A@mail.gmail.com>
From: Arnd Bergmann <arnd@arndb.de>
Date: Wed, 21 Nov 2018 18:14:23 +0100
Message-ID: <CAK8P3a2E7RAOSUJRbc_0WeQO8vVH+GsZXuo=GMHj0Rvu+_A2ZQ@mail.gmail.com>
Subject: Re: Cleaning up numbering for new x86 syscalls?
To: Andy Lutomirski <luto@kernel.org>
Cc: "the arch/x86 maintainers" <x86@kernel.org>,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>,
        Borislav Petkov <bp@alien8.de>,
        Peter Zijlstra <peterz@infradead.org>,
        Tycho Andersen <tycho@tycho.ws>,
        Daniel Colascione <dancol@google.com>,
        Florian Weimer <fweimer@redhat.com>, carlos@redhat.com,
        Rich Felker <dalias@libc.org>
Content-Type: text/plain; charset="UTF-8"
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwCniUWLpvVbIc1kAA--.144S3
Authentication-Results: mail-app4; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoWxJw18Aw4rtrW8XF15ZrykGrg_yoWrGF1fpF
	WFya45Grn5JF4xAr9rJw48WFyFkr93AFWUXwn0yrs7ZrZxGry8tr9YqayavF15Jrs7GFWj
	vw4jvryDGrZ8ZFJanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUPIb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Ar0_tr1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Cr0_Gr1UM28EF7xvwVC2
	z280aVAFwI0_Gr1j6F4UJwA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_Gr1j6F4UJwAS0I0E0x
	vYzxvE52x082IY62kv0487Mc02F40EFcxC0VAKzVAqx4xG6I80ewAv7VC0I7IYx2IY67AK
	xVWUAVWUtwAv7VC2z280aVAFwI0_Gr0_Cr1lOx8S6xCaFVCjc4AY6r1j6r4UM4x0Y48IcV
	AKI48JMx02cVCv0xWlc7CjxVAKzI0EY4vE52x082I5MxkFs20EY4vE44CYbxCE4x80FwCY
	02Avz4vEIxC_XwCY0x0Ix7I2Y4AK64vIr41lcIIF0xvE2Ix0cI8IcVAFwI0_Xr0_Ar1lcI
	IF0xvE2Ix0cI8IcVCY1x0267AKxVW8JVWxJwCYIxAIcVC2z280aVAFwI0_Cr0_Gr1UMxvI
	42IY6I8E87Iv6xkF7I0E14v26r4j6r4UJwCF04k20xvY0x0EwIxGrwCF04k20xvEw4C26c
	xK6c8Ij28IcwCF72vE77IF4wCFx2IqxVCFs4IE7xkEbVWUJVW8JwC20s026c02F40E14v2
	6r1j6r18MI8I3I0E7480Y4vE14v26r106r1rMI8E67AF67kF1VAFwI0_Jw0_GFylIxkGc2
	Ij64vIr41lIxAIcVCF04k26cxKx2IYs7xG6r1j6r1xYxBIdaVFxhVjvjDU0xZFpf9x07bH
	wZxUUUUU=

On Tue, Nov 20, 2018 at 1:25 AM Andy Lutomirski <luto@kernel.org> wrote:
>
> Hi all-
>
> We currently have some giant turds in the way that syscalls are
> numbered.  We have the x86_32 table, which is totally sane other than
> some legacy multiplexers.  Then we have the x86_64 table, which is,
> um, demented:
>
>  - The numbers don't match x86_32.  I have no idea why.

I think it was an early attempt at cleanup up the table, and only
adding those that were still used. Back in the days, each architecture
had its own table, and of course they started out as separate
top-level architectures.

>  - We use bit 30, which triggers in_x32_syscall().  It should have
> been bit 31, bit I digress.
>
>  - We have this weird set of extra x32 syscalls that start at 512.
> Who wants to bet whether we have no bugs if someone does syscall with,
> say, nr == 512 (i.e. not 512 | BIT(30)) or nr == (16 | BIT(30))?  The
> latter would be non-compat ioctl with in_x32_syscall() set and hence
> in_compat_syscall() set.

The comment in the table says it's purely for keeping the calls
in separate cache lines. I don't know if the cache lines make
a difference in the end, but it seems that once we start running
into the x32 syscall numbers, I think we just treat them like any
others, we just choose to never call them from a 64-bit glibc.

> I propose we consider some subset of the following:
>
> 1. Introduce restart_syscall_2().  Make its number be 1024.  Maybe
> someday we could start using it instead of restart_syscall().  The
> only issue I can see is programs that allow restart_syscall() using
> seccomp but don't allow the new variant.
>
> 2. Introduce an outright ban on new syscalls with nr < 1024.

This would leave a hole of several hundred numbers if we do it
for all architectures. Wasting multiple kilobytes for a cosmetic
cleanup might be considered excessive.

> 3. Introduce an outright ban on the addition of new __x32_compat
> syscalls.  If new compat hacks are needed, they can use
> in_compat_syscall(), thank you very much.

I would definitely want to keep anything regarding x32 out of the
common syscall implementation. If you want to add on to that
pile, please do it in arch/x86, not in kernel/ or fs/.

If we decide that x32 is a failed experiment and we don't keep
it working in the future, let's just kill it off right away. I'm fairly
sure nobody depends on it for anything real, the only users I
could find are either for showing off benchmark results or for
playing around with it for fun. Most of that fun part has apparently
ended many years ago, but there is still some work going into
debian/x32. We probably need to coordinate with them and see
if they know of actual users before removing it. Popcon lists
5 active users [1] and a sharp downward trend.

> 4. Modify the wrappers of the __x32_compat entries so that they will
> return -ENOSYS if in_x32_syscall() returns false.

No objection here, but what would that help?

> 5. Adjust the scripts so that we only have to wire up new syscalls
> once.  They'll have a nr above 1024, and they'll have the same nr on
> all x86 variants.
>
> Thoughts?

I would definitely welcome assigning the same syscall numbers across
all architectures. It is a needless burden for the libc developers to
figure out for each syscall which kernel is known to support it.
When a call gets added, they typically add logic to check for the
system call at runtime, but for older syscalls, it helps to know when
all architectures support it once the minimum kernel version for
a libc has been raised beyond that.

Please see also the work that Firoz Khan has been posting
for generalizing the tables on all architectures to use the
format we have on x86, arm and s390. I hope we can merge it
all for 4.21, and then build on top of that for generalization and
cleanups.

      Arnd

[1] https://popcon.debian.org/stat/sub-x32.png
