Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  14 Dec 2018 21:50:13 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga008.fm.intel.com (fmsmga008.fm.intel.com [10.253.24.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 597965805FC;
	Fri, 14 Dec 2018 04:52:01 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by fmsmga008-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 14 Dec 2018 04:52:01 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A8NcbpRKQLzY8lcF/rtmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgULv/7rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZUclRWS5ODIOy?=
 =?us-ascii?q?YYUMEuQPI/pXr5Llp1YMtha+GRWgCfnzxjNUmnP736s32PkhHwHc2wwgGsoDvW?=
 =?us-ascii?q?jOrNXzKagZTP24w7fSzTXMavNZwzH96I7VeR0mu/6MR7RwftfKxEY1DQPFiEif?=
 =?us-ascii?q?ppf/MzyIyOsAqm6W5PdjW+K3k2MrtR19rzy1yssxhITFmJgZxk3H+Cll2oo4JN?=
 =?us-ascii?q?+1RFZlbdK4FJZcrSKXOotsTs8/QmxkpDw2xqACtJO6eiUB1Y4pyATFa/OddoiF?=
 =?us-ascii?q?+hLjW/iVITd/nH9lZr2/iAio8US6ye3zSNO00FBUoSpBiNXMsWoN1xPL5siGTP?=
 =?us-ascii?q?ty4Fuh1C6R2wzP7uxIO104mKTFJ5I737I9lYYfvV7CEyL0gEn2ibWZdkQg+uim?=
 =?us-ascii?q?8eTnZbDmq4eYN491jAH+L6svltW8AesmKAgOWXaU+eCl2L3k80z5RqtFjuctn6?=
 =?us-ascii?q?nHv5DVO94bqrS6AwBLyIYj7QiwDzO83NQfh3kHI0pJeAibgIjxJ1HOPPf4AO+7?=
 =?us-ascii?q?g1Stkzdk2erKP7L8ApjWKnjDkbHhfaty6kJGyQozy8xf6IxQCr0bPP3zXUrxvs?=
 =?us-ascii?q?TCDhAlKwy03/rnCNJl24MeQ22PA7OZP7nVsVOS5uIvPvODZIkauDvmL/gl5vju?=
 =?us-ascii?q?jWI2mFMHfKmp24cXZ268Hvh8P0qZZn/siM8bEWgWpgo+UPDqiFqaXD5RYHa9Qb?=
 =?us-ascii?q?gw5jI8CIKgC4fDQZuggLiA3Ce9A51XaXpKClGKEXf0aYqEX+0AZz6VIs9kijYE?=
 =?us-ascii?q?T6SuS5c91RGysw/306BoLvHU+i0ftpLvzsJ16PfRlRwp8Tx0DsKd03yCTm1un2?=
 =?us-ascii?q?MIQSM20757oUBn1liD1q14ieRCFdNP//NJThs6NZnEwux5Ed/yXBjNftOISFm8?=
 =?us-ascii?q?RNWmDio8TtYww98IfkZ8FM+ujhHF3yq2HbAVk6aHC4Az8qLZx3LxPdpyy27a1K?=
 =?us-ascii?q?k9iFkrWtZAOne4hqFh7QTTB5TGk0OCl6m0c6QQ2yrN9GSGzWqKp0xYVA9wUaPY?=
 =?us-ascii?q?XXEQfEfWrNL55l/cQL+qE7goLgxBycuaIKtQdtLplUlGROvkONnGfm2+gXmwCg?=
 =?us-ascii?q?iSyrOMdoXqfX4d0zvbCEUflwAT/HCGNRUxByu7omLeCiBuGkzrY0/27eZ+r3a7?=
 =?us-ascii?q?RFcuzw6Wd01hy6a1+hkNiPyASvMT27UEuDshqzR0Blq9w8jaC92apwplfaVcZ9?=
 =?us-ascii?q?w97UxD1WLYsQx9I5OhI7pjhl4YbwR4oUfu2w9rBYVHlMggtGkqwxZqKaKEzFNB?=
 =?us-ascii?q?cCuV0or0OrLJJWj94hCuZ7TN1VHDzdmZ4KEP6Pc/q1X9pwypEksi83N609hayX?=
 =?us-ascii?q?ec55PKDBYMXpL1SEo46x96p7TCaCkn+4zUzWFsMbWzsjLa29MpGfEpxQq6c9Ze?=
 =?us-ascii?q?MKOLDgnyE8IBCsiqKewqnUWpbx0eMOBT8q40I92pd/+c1KG3O+ZgmSqsjX5b74?=
 =?us-ascii?q?BlzkKM6y18R/bS35YE3/6XxBGHWCr7jFu7tMD4h5pEZTALEmWj0yfkAJNeabNo?=
 =?us-ascii?q?fYYMD2ejOMm3xtR4h57wVH9U7l+jB1Ua2MC3fRqedUDy3QpV1U4Pu3yohTO4zy?=
 =?us-ascii?q?BokzEutqee3C3Oz/7idRYdIW5LWW9igEzoIYi1idAaQUepYxIolBuj+Ub12axb?=
 =?us-ascii?q?qL5jIGnUREdCZzL2IH16UqusqrqCZNZC6JEyviVNU+S8YleaRqTmoxQA0CPjHG?=
 =?us-ascii?q?pexDYleDGsoZj5mx16iGSALHd8tnbZeMdwxQvB69zYX/Jewj0GRCxggznNGle8?=
 =?us-ascii?q?J8Wp/cmTl5rbsuGxTWWhWodRcSnqy4ONry+75WxsAR2ikPG/gNznEQ4m0SDl09?=
 =?us-ascii?q?lmTznHrBH5YoPzzaS1LfpnflV0BF/788d6GZtxkooqiJEQxHgVnJOV/XUcnGf3?=
 =?us-ascii?q?MNVb37/+bXUXST4Kxd7V/Bbq2El5In2VwIL5U22XwtF9aNmifmMWxiU94thPCK?=
 =?us-ascii?q?eV77xLhzF5o1SmogLKffhygC0dxuAw534AjOEEow4tziSbArAPEkhUJy3slxKU?=
 =?us-ascii?q?79+gqKVbfnqgcb+11EBmh9CuEKmCoh1AWHb+YpoiAShw7sBlPFPNynLz7JzkeM?=
 =?us-ascii?q?LLbdISrRCUlxbAj+5IKJM+jPYKhCxnOX7jsn0h0eI0kRtu3ZSitoidN2pt5L65?=
 =?us-ascii?q?AgJfNjDtfMwc4DbtjaJDnsqM24CvA45sGjEKXJvuUPKpHygetfXhNwaSDjI8rm?=
 =?us-ascii?q?2XFqbYHQ+a8E1mtW7AE4i3N3GLI3kU1ddiSwOYJENBmwAYRik6koQ6FgC3x8zh?=
 =?us-ascii?q?bUF56SoK5lPjrhtMy+RoNwTwU2vFpQeobCs0R4abLBZM8g5C4ELVO9SE7u1vBy?=
 =?us-ascii?q?FY4oGhrAuVJ22bYARIEHgJWlGeCFDlJLWu/t7A8+6XBuelK/vOYLOOqfFRVvuS?=
 =?us-ascii?q?xJKv1Jdm8CiINsmVInZiCPg70FJZXX9lA8TZhykPSysPmiLNccGbpRS8+i52rs?=
 =?us-ascii?q?yl8/TrQgXv5YSRBLtILNVv4Au7gaOCN+6WmSZ4JixU1pIKxX/U1rcf2EQehD1p?=
 =?us-ascii?q?dzmoCb4ArzLCTLrMmq9LCB4Wczl8NNZT4KImwAZMOdTXitf01rNjiv41ClFFVU?=
 =?us-ascii?q?Hum82zZMwKJX29O03DBEqRKLuGIjjLydntYaygUb1QkPlUtxqotDaHEk/jOy6P?=
 =?us-ascii?q?mCXzWx+zMeFDkiebMQdauIG8dBZtFGfiQMjnah29LN94kzk2zacoiXPNMG4WKS?=
 =?us-ascii?q?J8fF9Vrr2M8SNYhe1yGmxb4XpjKOmEmiCZ4PHZK5YWq/RrBCt0mvle4HQ7zbtV?=
 =?us-ascii?q?8S5FSOZ0mCvUst5hvVWmnvOTxTpgVRod4gpM0Z6Lul8kJaXQ55RacXLF+g8dq2?=
 =?us-ascii?q?SWFxkO4dBiD47BoadVn/HVkq67AjpY/Nfd+81UU8HOLs6vOWAnPRCvFDOCX1hN?=
 =?us-ascii?q?diKiKWyK3x8Vq/qV7HDA68Fi8pU=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAABnphNch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBg2sng3yIGY4FFJdDgXMsEwGEPAKDCSI0CQ0BAwEBAQEBAQIBEwE?=
 =?us-ascii?q?BAQgNCQgpL4I2JAGCYQEBAQEDAQIgBFIGCQEBCgsKAwICJgICAx8SAQUBHBkFg?=
 =?us-ascii?q?xyCAQWaLDyLD3wzii8SeYszFz6BQYERgxKBVIYzglcCizaEFoY7ixEJgRaBEo8?=
 =?us-ascii?q?yGGB9j3WKQI8SMIElgg5NJBRsBoI1giQDF44ePjMBgQQBAY03AQE?=
X-IPAS-Result: =?us-ascii?q?A0ANAABnphNch0O0hNFjHAEBAQQBAQcEAQGBUQcBAQsBg2s?=
 =?us-ascii?q?ng3yIGY4FFJdDgXMsEwGEPAKDCSI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpL4I2J?=
 =?us-ascii?q?AGCYQEBAQEDAQIgBFIGCQEBCgsKAwICJgICAx8SAQUBHBkFgxyCAQWaLDyLD3w?=
 =?us-ascii?q?zii8SeYszFz6BQYERgxKBVIYzglcCizaEFoY7ixEJgRaBEo8yGGB9j3WKQI8SM?=
 =?us-ascii?q?IElgg5NJBRsBoI1giQDF44ePjMBgQQBAY03AQE?=
X-IronPort-AV: E=Sophos;i="5.56,353,1539673200"; 
   d="scan'208";a="142133586"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 14 Dec 2018 04:52:00 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730984AbeLNMgj (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 14 Dec 2018 07:36:39 -0500
Received: from mail-qt1-f196.google.com ([209.85.160.196]:33726 "EHLO
        mail-qt1-f196.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1730362AbeLNMgh (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 14 Dec 2018 07:36:37 -0500
Received: by mail-qt1-f196.google.com with SMTP id l11so5993990qtp.0;
        Fri, 14 Dec 2018 04:36:37 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=IJWcXh9F9+owIeg4owxsGscTGbFFGmdRksELWLDUZTo=;
        b=l8rYzY42bqKP8aB/8R/KRAD4nDDXFvLtSKsFlM/gzvQlVYvkri/6HypyHNXeVPEVh9
         XKAUE036VajQGYZEiVOebHV91QjGrAR+KIKnLR5pJZPxsy413GirWvS6Cca+gy3o1Gkm
         cQ3BcxxAD96ROL3JPttM/Jp7XH6vtINyReBvb4QIuijOrlD2nAketPzH4rJoTcvcz8Vy
         byOqTAOyXyE3fCn67WauGEkSqAhEHTrLQ9pTw7eUq4yKFC5zyl0oOPa0T9t9EmP8Fs56
         x8D4Qpyti22xwN2bAEw6YcgF18ijSWZAyHnwxrjh0dLKWqGNnkPHOp63ARKV2dCQL/lS
         HjUQ==
X-Gm-Message-State: AA+aEWYa4LpPYHstpEK1ftpJ6vmdt099T28cmTT601Fv2sNHW2FYqu8O
        T2LSGXUqXUN3pYISlphHICyFDoQD4HDkudaAjXA=
X-Google-Smtp-Source: AFSGD/XwTzQWGMosfRpU0oE6o60jDxE4OG/BJ9bluVUl4BYR3u8Z9SPu6YZdAGeEytXk2voKaHTqwCYCCQdRMygbNuI=
X-Received: by 2002:ac8:7451:: with SMTP id h17mr2439929qtr.319.1544790996514;
 Fri, 14 Dec 2018 04:36:36 -0800 (PST)
MIME-Version: 1.0
References: <1542125174-8204-1-git-send-email-thor.thayer@linux.intel.com> <1542125174-8204-2-git-send-email-thor.thayer@linux.intel.com>
In-Reply-To: <1542125174-8204-2-git-send-email-thor.thayer@linux.intel.com>
From: Arnd Bergmann <arnd@arndb.de>
Date: Fri, 14 Dec 2018 13:36:19 +0100
Message-ID: <CAK8P3a1+LKakyD_gJTiNqKwNuP2Ptr_Wj4zJXf=+SDHSJHbexA@mail.gmail.com>
Subject: Re: [RESEND 1/4] mfd: altera-sysmgr: Add SOCFPGA System Manager abstraction
To: thor.thayer@linux.intel.com
Cc: Lee Jones <lee.jones@linaro.org>,
        Dinh Nguyen <dinguyen@kernel.org>,
        Russell King - ARM Linux <linux@armlinux.org.uk>,
        Catalin Marinas <catalin.marinas@arm.com>,
        Will Deacon <will.deacon@arm.com>,
        Giuseppe Cavallaro <peppe.cavallaro@st.com>,
        Alexandre Torgue <alexandre.torgue@st.com>,
        Jose Abreu <joabreu@synopsys.com>,
        David Miller <davem@davemloft.net>,
        Maxime Coquelin <mcoquelin.stm32@gmail.com>,
        Mauro Carvalho Chehab <mchehab+samsung@kernel.org>,
        Bjorn Andersson <bjorn.andersson@linaro.org>,
        Olof Johansson <olof@lixom.net>,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>,
        Linux ARM <linux-arm-kernel@lists.infradead.org>,
        Networking <netdev@vger.kernel.org>
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Tue, Nov 13, 2018 at 5:03 PM <thor.thayer@linux.intel.com> wrote:
>
> From: Thor Thayer <thor.thayer@linux.intel.com>
>
> The SOCFPGA System Manager register block aggregate different
> peripheral functions into one place.
> On 32 bit ARM parts, the syscon framework fits this problem well.
> On 64 bit ARM parts, the System Manager can only be accessed by
> EL3 secure mode. Since a SMC call to EL3 is required, a new
> driver using regmaps similar to syscon was created that handles
> the SMC call.
> Since regmaps abstract out the underlying register access, the
> changes to drivers using System Manager are minimal.
>
> Signed-off-by: Thor Thayer <thor.thayer@linux.intel.com>
> ---
> Resend - update use_single_rw to use_single_read and
>          use_single_write which was added in 4.20.

Sorry for stepping in late here, I forgot to review it earlier and
Lee had to remind me to take a look.

> +static const struct regmap_config s10_sysmgr_regmap_cfg = {
> +       .name = "s10_sysmgr",
> +       .reg_bits = 32,
> +       .reg_stride = 4,
> +       .val_bits = 32,
> +       .reg_read = s10_protected_reg_read,
> +       .reg_write = s10_protected_reg_write,
> +       .fast_io = true,
> +       .use_single_read = true,
> +       .use_single_write = true,
> +};

The new regmap seems fine to me, that looks like a good way
of abstracting the two hardware methods.

> +/**
> + * socfpga_is_s10
> + * Determine if running on Stratix10 platform.
> + * Return: True if running Stratix10, otherwise false.
> + */
> +static int socfpga_is_s10(void)
> +{
> +       return of_machine_is_compatible("altr,socfpga-stratix10");
> +}

I don't really like the way you are checking for a specific here
here though, that is something that should only be done in
an absolute emergency when there is no way of fixing the
device tree files.

Since this is a new driver for a device that is not used in
mainline kernels yet (AFAICT), let's fix the binding and add
a proper detection method here.

> +
> +/**
> + * of_sysmgr_register
> + * Create and register the Altera System Manager regmap.
> + * Return: Pointer to new sysmgr on success.
> + *         Pointer error on failure.
> + */
> +static struct altr_sysmgr *of_sysmgr_register(struct device_node *np)
> +{
> +       struct altr_sysmgr *sysmgr;
> +       struct regmap *regmap;
> +       u32 reg_io_width;
> +       int ret;
> +       struct regmap_config sysmgr_config = s10_sysmgr_regmap_cfg;
> +       struct resource res;
> +
> +       if (!of_device_is_compatible(np, "altr,sys-mgr"))
> +               return ERR_PTR(-EINVAL);
> +
> +       sysmgr = kzalloc(sizeof(*sysmgr), GFP_KERNEL);
> +       if (!sysmgr)
> +               return ERR_PTR(-ENOMEM);
> +
> +       if (of_address_to_resource(np, 0, &res)) {
> +               ret = -ENOMEM;
> +               goto err_map;
> +       }
> +
> +       /* Need physical address for SMCC call */
> +       sysmgr->base = (void __iomem *)res.start;

The cast here seems really ugly. Instead of mixinx up
address spaces, how about adding a resource_size_t
member in the sysmgr structure?

> +        * search for reg-io-width property in DT. If it is not provided,
> +        * default to 4 bytes. regmap_init will return an error if values
> +        * are invalid so there is no need to check them here.
> +        */
> +       ret = of_property_read_u32(np, "reg-io-width", &reg_io_width);
> +       if (ret)
> +               reg_io_width = 4;

How likely is it that this would ever not be four bytes? It looks
like you just copied this from syscon, but it really should not be
needed.

> +struct regmap *altr_sysmgr_node_to_regmap(struct device_node *np)
> +{
> +       struct altr_sysmgr *sysmgr = NULL;
> +
> +       if (!socfpga_is_s10())
> +               return syscon_node_to_regmap(np);

Why do you go through syscon here? Doesn't this add a lot of complexity?

I'd suggest using regmap_init_mmio() directly and open-coding the
initialization you need as you do for the s10 case.

> +       if (!p_sysmgr)
> +               sysmgr = of_sysmgr_register(np);
> +       else
> +               sysmgr = p_sysmgr;
> +
> +       if (IS_ERR_OR_NULL(sysmgr))
> +               return ERR_CAST(sysmgr);

Don't use IS_ERR_OR_NULL(), it's just a sign that your API
is bad. Instead, define the interface either so that you
always return NULL on error or that you always return an
PTR_ERR() value on error.

> +struct regmap *altr_sysmgr_regmap_lookup_by_compatible(const char *s)
> +{
> +       struct device_node *sysmgr_np;
> +       struct regmap *regmap;
> +
> +       if (!socfpga_is_s10())
> +               return syscon_regmap_lookup_by_compatible(s);
> +
> +       sysmgr_np = of_find_compatible_node(NULL, NULL, s);
> +       if (!sysmgr_np)
> +               return ERR_PTR(-ENODEV);
> +
> +       regmap = altr_sysmgr_node_to_regmap(sysmgr_np);
> +       of_node_put(sysmgr_np);
> +
> +       return regmap;
> +}
> +EXPORT_SYMBOL_GPL(altr_sysmgr_regmap_lookup_by_compatible);

That should not be needed, just look it up by phandle and be done
with it. Again, lookup by compatible should only be needed for
compatibility with old DTB files, but you should be able to fix the
binding so you always have a phandle to the correct node here,
at least for the s10 case.

For the older chips with existing DTs, I guess drivers can fall back to
the syscon method directly.

> +EXPORT_SYMBOL_GPL(altr_sysmgr_regmap_lookup_by_pdevname);

Same comment.

        Arnd
