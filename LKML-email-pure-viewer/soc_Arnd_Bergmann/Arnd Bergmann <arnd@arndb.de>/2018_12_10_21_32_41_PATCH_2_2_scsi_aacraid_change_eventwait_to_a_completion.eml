Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 11 Dec 2018 08:44:07 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 4051E5807A2;
	Mon, 10 Dec 2018 13:35:13 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga005-1.jf.intel.com with ESMTP; 10 Dec 2018 13:35:13 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Airdx6xExC2wqFffd6UBaVJ1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75osm7bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJVyJPHJ6y?=
 =?us-ascii?q?YYUMAeQGP+lYoYbyqVQVrRumBwShH//jxzxSi3Pqx6A2z/gtHAfb1wIgBdIOt3?=
 =?us-ascii?q?HUoc3pOacIV+C60bTDwCjdYPNM1jf97ZLHchYnofqRWr9/a9DRyU8yGA7elFqQ?=
 =?us-ascii?q?s4rlMC6O2egXrmeU8fNtWOSygGAkswF8uiajytsoh4XTm44YxE7I+T9kzIs2Od?=
 =?us-ascii?q?G0Uk92bNy8HJdNqy2XM5F6Tt4mTm12oio3xaAKtYSmcCUOx5kqwQPUZeadfIiS?=
 =?us-ascii?q?+B3jUf6cITdmi3Jhf7Kynwiy8Ue+xe3mTMW000hFrjBDktbSsnABzRvT6tKISv?=
 =?us-ascii?q?dl/0eh3yiA1xzL5+1aPUw5kbDXJ4Mvz7IujJYfrEfOEjPslEj3jqKabkAk9fKp?=
 =?us-ascii?q?6+TjbLXmvJicN4pshwH6M6QunNG/AOshPggNQWeb4+K826Pn/UHgR7VLgPs2nb?=
 =?us-ascii?q?fDsJ3BO8QbqbC2AxVP3oYg9Rm/FTGm38ocnXUdK1JFYh2Hg5DzO17SOPD4Eeu/?=
 =?us-ascii?q?g1O0nTdvxvDGPaPuDo/CL3jei7rhebd960hByAs819xf5pRUCq0fL/L3QEP+qN?=
 =?us-ascii?q?vYDhohOQyu3+nnEMl91p8ZWW+XAq+WKqLSsUOS6eIoOeWMZJIVtyz7K/gq/PPu?=
 =?us-ascii?q?iX45mVkAfaimx5cXaXa4Huh4LEWde3bjntABEWIStAokUOPqkEGCUSJUZ3uqXa?=
 =?us-ascii?q?I84S80BJilDYfEQICthruB0Ty/Hp1XYGBGF1+NHW3pd4WCR/cDdiaSLtV9nTwD?=
 =?us-ascii?q?ULirU5Uh2g22tA/m17pnKfLZ9TcDtZLj09h15PfflQso+jx2FMmd12CNT2dpnm?=
 =?us-ascii?q?IHXTM23aZ/oVBjxVeHy6R3n/tYFdlL7fNTTgg6LYLcz/B9C93qWQLOZNGJREyi?=
 =?us-ascii?q?QtWnGz4xSN0xzsQKY0Z8HdWikx/C0zCrA78Ti7yEGpg0/rjA0Hj2IsZ302zG27?=
 =?us-ascii?q?U5j1k6XstPMnWribNl+AjNGYHFiUWZmLysdaQHwiHN8mCPzW6NvEFdVA59SqHF?=
 =?us-ascii?q?XXEZZkvLotX1/ELCT7myCbs5NgtN09KNKqxPatfxl1VJWO/jOMjCY2K2g2q/GA?=
 =?us-ascii?q?yHxq2SY4bwe2USxiPdCFManAAV5nuGMQk+BiG8o2PRFjBuFFTvY1/y/ul6sn+0?=
 =?us-ascii?q?Ukg0zwSSZU17y7W14gIVheCbS/4LwrIEuSIhqzJoHFa939PaEcaAqxBmfKVGZd?=
 =?us-ascii?q?M94VFH1W3Cugx5P5ygKb1ih1EEfwR2uUPuywt4CoFancc2q3MqyRJ4KbiE31NZ?=
 =?us-ascii?q?azOYwZfwN6XNJWn24h+uZLDZ21HE3NmN56cA9e43q1PgvAGuCEov6HFn09hT03?=
 =?us-ascii?q?uB6ZTGFgsSUZTtUkkp8xh2va3VYi4454nMz31jLbG0siPe29IuHOYkygugc81D?=
 =?us-ascii?q?P6+eFQ7yE9cVB86hKOExn1ipbxQEPP1d9aIuPsOmceeG17CvPOp6gD2mimFH6p?=
 =?us-ascii?q?hn0k2Q7yp8VvLI35EdzvGC3wuISy3zjE28vcDwg4xEYy8dHnC+yST9GIFefKly?=
 =?us-ascii?q?cpsVBme0JM23wM5zh5rsW35e6V6iCEkK2M6veRqOcVP92Rdc2lgQoXyigSG41S?=
 =?us-ascii?q?B7kyk1rqqD2yzD2+TjdBsdNm9LXmVilkrsIY6vgtAeXUioaRUplRS/6Ub7wahb?=
 =?us-ascii?q?uLpwL23JTUhUeCj2KnloUrGsubqaf85P9JQovD1VUOume1CaSb39oxwA3yP4BW?=
 =?us-ascii?q?RexzM7dzCsuprnmRx3k2adLHd1rHrEdsB83xbf5NrARfFP2joKXjV3iT7SBlKk?=
 =?us-ascii?q?Jdmm4c2Ul4vfsuC5T2+gVodccS7xwYOCtSu743ZnARm+n/C1h93mHhI20S7919?=
 =?us-ascii?q?l2SyrIqAzwbZXs16S/KehnZFVnBEfg68pmHYFziogwi4sR2XQAhpWV4GAIkWH8?=
 =?us-ascii?q?MdhA3aL+bXwNRSMEwtLP4Qjl3lFjIWyNx47jSnqdxc5hbcGgYmwKwiI989xKCK?=
 =?us-ascii?q?CM4bxBnCt1oUC3oRjfYPdjhTcd1eUh6GQBjO4XogotwT6QArQTHUleICztmA6E?=
 =?us-ascii?q?79G4rKVLemmvdaK821Z5ndCkFLuCuB1TWG7lepc+Gi999tl/MFXJ0HHp64DrYt?=
 =?us-ascii?q?/Qbc8Ith2PkhfNlOxVKJM3lvoXiitrI2P9vXs5y+EliRxix421vI+CK2915qK2?=
 =?us-ascii?q?HgZYNiHpZ8MU4jzilrxRnsGS34CyBJlhHigLUYDsTfKpFjISqPvmOxyPED06tn?=
 =?us-ascii?q?eUB77fERWD50dhqnLFC4qrOG2PJHkF0dViQwGQJE5FjwARQjo6hYQ1FhywyMzi?=
 =?us-ascii?q?bUd55S0R5ljipRtX0e9oMxj/UmHCpAancDs0SZ6fLAZI4QFG/UvaLcue7udrFS?=
 =?us-ascii?q?FC4pKhtBCNKnCcZwlQDWAJXVGEB0n+Pra049nM6fOYBu24L/vBeriOre1eV/GV?=
 =?us-ascii?q?xZOgyIdm/jCMNtmRMXlmFfE0xk1DXXVhEcTDhzoPUzAXlz7Kb8ODpBez5Cx3rs?=
 =?us-ascii?q?O88PTqQg7v5pGPC7xdMdpx4RC2nLyDOvWUhCZ4LzZYy5wNyWXJyLgZwF4dlSVu?=
 =?us-ascii?q?eyOxHrQHsC7HVLjQlbNPDx4HdyNzM9NF4Lgh3gZWI87UlNP02qR8jv40EFpFUV?=
 =?us-ascii?q?3hmse0Zc0FOW29NVXHBFqVO7SCPzHE38b3YaakQ71KkOpUrwGwuSqcE0L7IjSD?=
 =?us-ascii?q?ljzpWwqzPu1WkC6bPAJRuIemfxZpCGjjSs/maxKhPN92iz023aM7hnfQOWEANj?=
 =?us-ascii?q?h8dltHrqeM4iNAnvV/B2tB42JlLOaenSaZ6ujYKpAOvvpqAiR7jeRa4HshxrtR?=
 =?us-ascii?q?7SFEQuF1mSTIot5vpVGmjveAyj59XBVSrTZLgdHDgUI3EKnQ7oVNUj7j0TdF12?=
 =?us-ascii?q?yRB1wxoN94FtzovbsYntHGn7j6KTtq9tPf58wHCs3VbsmANSxleVDLETvZF0Mo?=
 =?us-ascii?q?CxztfUvYm1BalfWf5zfd+po3qJLEnJsIV68dVVYwUPgdDxIhVJYnKY1rXzVssv?=
 =?us-ascii?q?jTtMMU6GCloR+bDJFft4rbV/TUGfjzJSyCgL9sYAEByrf1a48UM9uo9VZlbwxT?=
 =?us-ascii?q?hoLGU2DdR99IqytnJls9ukNB2HFkSGE5nU7oPFD+qEQPHOK5y0ZlwjB1Zv4goX?=
 =?us-ascii?q?K1uw86?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAAB72w5ch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgVqCESeME44xlz2BcywTAYdtIjQJDQEDAQEBAQEBAgETAQEBCA0?=
 =?us-ascii?q?JCCkvgjYkAYJiAwMBAiQLAUYGCQEBPhIDOhoGARIFglFLggIEAackM4oqh3KEL?=
 =?us-ascii?q?xc+gUGBEYF7i3MCiTmBcJVMCYEVgRCPHwsYYIkRh0wsiHaRVIIOTSQUgyeCJxe?=
 =?us-ascii?q?OHj8ygQQBAQGMHAEB?=
X-IPAS-Result: =?us-ascii?q?A0ANAAB72w5ch0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBgVq?=
 =?us-ascii?q?CESeME44xlz2BcywTAYdtIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkvgjYkAYJiA?=
 =?us-ascii?q?wMBAiQLAUYGCQEBPhIDOhoGARIFglFLggIEAackM4oqh3KELxc+gUGBEYF7i3M?=
 =?us-ascii?q?CiTmBcJVMCYEVgRCPHwsYYIkRh0wsiHaRVIIOTSQUgyeCJxeOHj8ygQQBAQGMH?=
 =?us-ascii?q?AEB?=
X-IronPort-AV: E=Sophos;i="5.56,339,1539673200"; 
   d="scan'208";a="43493452"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 10 Dec 2018 13:33:54 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729961AbeLJVdu (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 10 Dec 2018 16:33:50 -0500
Received: from mout.kundenserver.de ([212.227.126.187]:56351 "EHLO
        mout.kundenserver.de" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1728088AbeLJVdu (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 10 Dec 2018 16:33:50 -0500
Received: from wuerfel.lan ([109.192.41.194]) by mrelayeu.kundenserver.de
 (mreue002 [212.227.15.129]) with ESMTPA (Nemesis) id
 0M9j3f-1gbilr2rtP-00D1Ct; Mon, 10 Dec 2018 22:33:36 +0100
From: Arnd Bergmann <arnd@arndb.de>
To: Adaptec OEM Raid Solutions <aacraid@microsemi.com>,
        "James E.J. Bottomley" <jejb@linux.ibm.com>,
        "Martin K. Petersen" <martin.petersen@oracle.com>
Cc: Arnd Bergmann <arnd@arndb.de>,
        Raghava Aditya Renukunta 
        <RaghavaAditya.Renukunta@microsemi.com>,
        Prasad B Munirathnam <prasad.munirathnam@microsemi.com>,
        Dave Carroll <david.carroll@microsemi.com>,
        Dan Carpenter <dan.carpenter@oracle.com>,
        Johannes Thumshirn <jthumshirn@suse.de>,
        linux-scsi@vger.kernel.org, linux-kernel@vger.kernel.org
Subject: [PATCH 2/2] scsi: aacraid: change event_wait to a completion
Date: Mon, 10 Dec 2018 22:32:41 +0100
Message-Id: <20181210213301.1065510-2-arnd@arndb.de>
X-Mailer: git-send-email 2.20.0
In-Reply-To: <20181210213301.1065510-1-arnd@arndb.de>
References: <20181210213301.1065510-1-arnd@arndb.de>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Provags-ID: V03:K1:kxdNZyNNJz19uuP6Iwhkdm+DBfCJ9YU8YmmGGgZSnvEPkbRYe4M
 l2boWkj9TelrH9D4+PQNkmvck4aJ9PWcNERJQr1LkxWliwGm8F3SvTMvoBQ2wcM0p8wVgQD
 +qzqzW8lFPppo+GaXKfFDibwBCia+nKSgg20lWO0k0xHIRnYZ3zG/+rkz/2pp2wVZOFZzrn
 WdnbnC+ASEqZmB/w2DwMQ==
X-Spam-Flag: NO
X-UI-Out-Filterresults: notjunk:1;V03:K0:hwMhN/bSMqw=:w1J/3KC1u7cdXiIRChjDfN
 T5RXxQFbu4Ub42STk185IYJ+/2y9CB/D2E1IQjezvIcMlKv1ayusss/zdP+eZDJLUB8Gt8sxY
 g63vM7mO7uQiYhNLoU281kvE90Mnx2wmZF1QT2/SBSEBPMeBFYeXhUTMuu3jnE8dr+KM1hYWi
 crGEWDnPjKClh44Yo96C83k4I1YqP5pSreO7lEXwrtpqng/9yjXkNqsodvWOOiT1iOLTSf2p3
 AfOBaZI1hF9GxN4jwg53rW9r0unQEQ7xRxYQKO0l8vPK8TmM895fAzfNcSOyr2rQpiKT8hePY
 k6EKSUyg9HOr1mXgC2mdc+TQxPQlXxWuNfNI9JFGFg87vAzP20TtOrGiuqZxjawdII3XV0zmw
 wwwm7qtM/LZLyR8ud7irMvIxrZ2xWlBo3PX4I1eyWVqwAG/Q+N7trOKar6pSEF3acHTwi9S6c
 oSReo1Vtm3nJvlaozRjivxNeZ/v+O7y5iYfm3dTspMgBWRx3Fusda4IsmpYBffi/pLPEdRpGW
 HXjdcyE8bPw4dcPku0BaLirzilB9N75WQGg9sWfOgp4tycR2VAhsL5vFCJD/k/2A0ZfQetxP9
 Ny6uB5ZsLLwL3sIr2oh0qy4kxwHntsAGuKES9rSccVe49tB+LhiWW5UCtfap+21nzlRn3JZtU
 Wv3BumiYCuPSfdC50Geyg4x9xIcUrc1Xu1h/NCgWLkOZjrC+djyKIMgT6/tBoV/IdkQQXhR/O
 bORjjH/Y7e6Rk535A9tFY+gjY8/1kTH/uZ8afg==
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The event_wait semaphore has completion semantics, so we can
change it over to the completion interface for clarity without
changing the behavior.

Signed-off-by: Arnd Bergmann <arnd@arndb.de>
---
 drivers/scsi/aacraid/aacraid.h  |  3 ++-
 drivers/scsi/aacraid/commctrl.c |  1 -
 drivers/scsi/aacraid/commsup.c  | 15 +++++++--------
 drivers/scsi/aacraid/dpcsup.c   | 19 +++++++++----------
 drivers/scsi/aacraid/linit.c    |  2 +-
 drivers/scsi/aacraid/src.c      |  2 +-
 6 files changed, 20 insertions(+), 22 deletions(-)

diff --git a/drivers/scsi/aacraid/aacraid.h b/drivers/scsi/aacraid/aacraid.h
index 531a0b9a58f8..3291d1c16864 100644
--- a/drivers/scsi/aacraid/aacraid.h
+++ b/drivers/scsi/aacraid/aacraid.h
@@ -40,6 +40,7 @@
 #define nblank(x) _nblank(x)[0]
 
 #include <linux/interrupt.h>
+#include <linux/completion.h>
 #include <linux/pci.h>
 #include <scsi/scsi_host.h>
 
@@ -1313,7 +1314,7 @@ struct fib {
 	 *	This is the event the sendfib routine will wait on if the
 	 *	caller did not pass one and this is synch io.
 	 */
-	struct semaphore	event_wait;
+	struct completion	event_wait;
 	spinlock_t		event_lock;
 
 	u32			done;	/* gets set to 1 when fib is complete */
diff --git a/drivers/scsi/aacraid/commctrl.c b/drivers/scsi/aacraid/commctrl.c
index 6a6ad9477786..e2899ff7913e 100644
--- a/drivers/scsi/aacraid/commctrl.c
+++ b/drivers/scsi/aacraid/commctrl.c
@@ -41,7 +41,6 @@
 #include <linux/blkdev.h>
 #include <linux/delay.h> /* ssleep prototype */
 #include <linux/kthread.h>
-#include <linux/semaphore.h>
 #include <linux/uaccess.h>
 #include <scsi/scsi_host.h>
 
diff --git a/drivers/scsi/aacraid/commsup.c b/drivers/scsi/aacraid/commsup.c
index 7ed51a77e39d..d5a6aa9676c8 100644
--- a/drivers/scsi/aacraid/commsup.c
+++ b/drivers/scsi/aacraid/commsup.c
@@ -44,7 +44,6 @@
 #include <linux/delay.h>
 #include <linux/kthread.h>
 #include <linux/interrupt.h>
-#include <linux/semaphore.h>
 #include <linux/bcd.h>
 #include <scsi/scsi.h>
 #include <scsi/scsi_host.h>
@@ -189,7 +188,7 @@ int aac_fib_setup(struct aac_dev * dev)
 		fibptr->hw_fib_va = hw_fib;
 		fibptr->data = (void *) fibptr->hw_fib_va->data;
 		fibptr->next = fibptr+1;	/* Forward chain the fibs */
-		sema_init(&fibptr->event_wait, 0);
+		init_completion(&fibptr->event_wait);
 		spin_lock_init(&fibptr->event_lock);
 		hw_fib->header.XferState = cpu_to_le32(0xffffffff);
 		hw_fib->header.SenderSize =
@@ -623,7 +622,7 @@ int aac_fib_send(u16 command, struct fib *fibptr, unsigned long size,
 		}
 		if (wait) {
 			fibptr->flags |= FIB_CONTEXT_FLAG_WAIT;
-			if (down_interruptible(&fibptr->event_wait)) {
+			if (wait_for_completion_interruptible(&fibptr->event_wait)) {
 				fibptr->flags &= ~FIB_CONTEXT_FLAG_WAIT;
 				return -EFAULT;
 			}
@@ -659,7 +658,7 @@ int aac_fib_send(u16 command, struct fib *fibptr, unsigned long size,
 			 * hardware failure has occurred.
 			 */
 			unsigned long timeout = jiffies + (180 * HZ); /* 3 minutes */
-			while (down_trylock(&fibptr->event_wait)) {
+			while (!try_wait_for_completion(&fibptr->event_wait)) {
 				int blink;
 				if (time_is_before_eq_jiffies(timeout)) {
 					struct aac_queue * q = &dev->queues->queue[AdapNormCmdQueue];
@@ -689,9 +688,9 @@ int aac_fib_send(u16 command, struct fib *fibptr, unsigned long size,
 				 */
 				schedule();
 			}
-		} else if (down_interruptible(&fibptr->event_wait)) {
+		} else if (wait_for_completion_interruptible(&fibptr->event_wait)) {
 			/* Do nothing ... satisfy
-			 * down_interruptible must_check */
+			 * wait_for_completion_interruptible must_check */
 		}
 
 		spin_lock_irqsave(&fibptr->event_lock, flags);
@@ -777,7 +776,7 @@ int aac_hba_send(u8 command, struct fib *fibptr, fib_callback callback,
 			return -EFAULT;
 
 		fibptr->flags |= FIB_CONTEXT_FLAG_WAIT;
-		if (down_interruptible(&fibptr->event_wait))
+		if (wait_for_completion_interruptible(&fibptr->event_wait))
 			fibptr->done = 2;
 		fibptr->flags &= ~(FIB_CONTEXT_FLAG_WAIT);
 
@@ -1538,7 +1537,7 @@ static int _aac_reset_adapter(struct aac_dev *aac, int forced, u8 reset_type)
 		  || fib->flags & FIB_CONTEXT_FLAG_WAIT) {
 			unsigned long flagv;
 			spin_lock_irqsave(&fib->event_lock, flagv);
-			up(&fib->event_wait);
+			complete(&fib->event_wait);
 			spin_unlock_irqrestore(&fib->event_lock, flagv);
 			schedule();
 			retval = 0;
diff --git a/drivers/scsi/aacraid/dpcsup.c b/drivers/scsi/aacraid/dpcsup.c
index ddc69738375f..40a771dd1c0e 100644
--- a/drivers/scsi/aacraid/dpcsup.c
+++ b/drivers/scsi/aacraid/dpcsup.c
@@ -38,7 +38,6 @@
 #include <linux/slab.h>
 #include <linux/completion.h>
 #include <linux/blkdev.h>
-#include <linux/semaphore.h>
 
 #include "aacraid.h"
 
@@ -129,7 +128,7 @@ unsigned int aac_response_normal(struct aac_queue * q)
 			spin_lock_irqsave(&fib->event_lock, flagv);
 			if (!fib->done) {
 				fib->done = 1;
-				up(&fib->event_wait);
+				complete(&fib->event_wait);
 			}
 			spin_unlock_irqrestore(&fib->event_lock, flagv);
 
@@ -376,16 +375,16 @@ unsigned int aac_intr_normal(struct aac_dev *dev, u32 index, int isAif,
 				start_callback = 1;
 			} else {
 				unsigned long flagv;
-				int complete = 0;
+				int completed = 0;
 
 				dprintk((KERN_INFO "event_wait up\n"));
 				spin_lock_irqsave(&fib->event_lock, flagv);
 				if (fib->done == 2) {
 					fib->done = 1;
-					complete = 1;
+					completed = 1;
 				} else {
 					fib->done = 1;
-					up(&fib->event_wait);
+					complete(&fib->event_wait);
 				}
 				spin_unlock_irqrestore(&fib->event_lock, flagv);
 
@@ -395,7 +394,7 @@ unsigned int aac_intr_normal(struct aac_dev *dev, u32 index, int isAif,
 					mflags);
 
 				FIB_COUNTER_INCREMENT(aac_config.NativeRecved);
-				if (complete)
+				if (completed)
 					aac_fib_complete(fib);
 			}
 		} else {
@@ -428,16 +427,16 @@ unsigned int aac_intr_normal(struct aac_dev *dev, u32 index, int isAif,
 				start_callback = 1;
 			} else {
 				unsigned long flagv;
-				int complete = 0;
+				int completed = 0;
 
 				dprintk((KERN_INFO "event_wait up\n"));
 				spin_lock_irqsave(&fib->event_lock, flagv);
 				if (fib->done == 2) {
 					fib->done = 1;
-					complete = 1;
+					completed = 1;
 				} else {
 					fib->done = 1;
-					up(&fib->event_wait);
+					complete(&fib->event_wait);
 				}
 				spin_unlock_irqrestore(&fib->event_lock, flagv);
 
@@ -447,7 +446,7 @@ unsigned int aac_intr_normal(struct aac_dev *dev, u32 index, int isAif,
 					mflags);
 
 				FIB_COUNTER_INCREMENT(aac_config.NormalRecved);
-				if (complete)
+				if (completed)
 					aac_fib_complete(fib);
 			}
 		}
diff --git a/drivers/scsi/aacraid/linit.c b/drivers/scsi/aacraid/linit.c
index 42defee90eb2..1c5d54c2f031 100644
--- a/drivers/scsi/aacraid/linit.c
+++ b/drivers/scsi/aacraid/linit.c
@@ -1560,7 +1560,7 @@ static void __aac_shutdown(struct aac_dev * aac)
 			struct fib *fib = &aac->fibs[i];
 			if (!(fib->hw_fib_va->header.XferState & cpu_to_le32(NoResponseExpected | Async)) &&
 			    (fib->hw_fib_va->header.XferState & cpu_to_le32(ResponseExpected)))
-				up(&fib->event_wait);
+				complete(&fib->event_wait);
 		}
 		kthread_stop(aac->thread);
 		aac->thread = NULL;
diff --git a/drivers/scsi/aacraid/src.c b/drivers/scsi/aacraid/src.c
index 7a51ccfa8662..8377aec0649d 100644
--- a/drivers/scsi/aacraid/src.c
+++ b/drivers/scsi/aacraid/src.c
@@ -106,7 +106,7 @@ static irqreturn_t aac_src_intr_message(int irq, void *dev_id)
 			spin_lock_irqsave(&dev->sync_fib->event_lock, sflags);
 			if (dev->sync_fib->flags & FIB_CONTEXT_FLAG_WAIT) {
 				dev->management_fib_count--;
-				up(&dev->sync_fib->event_wait);
+				complete(&dev->sync_fib->event_wait);
 			}
 			spin_unlock_irqrestore(&dev->sync_fib->event_lock,
 						sflags);
-- 
2.20.0

