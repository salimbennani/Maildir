Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:16:47 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 6D49D580213;
	Fri, 30 Nov 2018 03:41:57 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga006-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 30 Nov 2018 03:41:56 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Akwbdqx+QeDENvP9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1+gVIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CSmVBUMReWSxPDI2/?=
 =?us-ascii?q?coUBEfYOPf1Ar4T/vFYOsQeyCBOwCO/z1jNFhHn71rA63eQ7FgHG2RQtEs4UsH?=
 =?us-ascii?q?TSsdr+KbofXv6vzKnHyDXMdfVW2THg44XPaB8hu/eMUq9rfMXL00kvER7KgU6K?=
 =?us-ascii?q?pYP4ITyYz+IAuHWY4ep4Te+jlXIrpgVrrjSyyMoglJPFip8Wx1zY7yl0wYQ4Kc?=
 =?us-ascii?q?WmREJnZdOoCphduiGAO4doXM8uXXtktDs+x7AJv5OwYTIEx449xxHFbvyKa4iI?=
 =?us-ascii?q?7QznVOaWOTp4mn1ld6ylhxqo8kiv1Pf8Vs+q31ZOtCZFlcPMtn8V2xzS7MiIVO?=
 =?us-ascii?q?d981+/1TqT0w3f8PxILE4qmabBNpIswaI8moASvEnBBiP2nV/5jK6SdkUq4Oio?=
 =?us-ascii?q?7OHnb63ipp+dMY90lw7/Pr0tmsOhG+Q4NBYBX2yC9eS72rzj+1P2QK9Rg/0ona?=
 =?us-ascii?q?nWroraKd4YpqGnGQ9V1Jgs6xKlAzehytQYkmELLEhZdxKfk4jpJ1bOLej8Dfe+?=
 =?us-ascii?q?gFSjji1nxv/bPrD6BpXNL37DkKrufLpn6k5czhYzws5b555OFr4BJ/fzUFfrtN?=
 =?us-ascii?q?PEFh85LxC0w+H/BdV9zIweWH6PDbWeMK/IsV+I+/ggI++DZIIOvDb9Kv4l5+Ph?=
 =?us-ascii?q?jHMjmF8de7Wp0oUTaHyiAvtmJECZa2L2gtgdCWcKohY+TOvyhV2AVj5ceWy+X6?=
 =?us-ascii?q?E75jE9DoKmCpzORoSsgLyHwSe6EYdaZmFAClCQD3joc5+IVOsLaCKXOsVhiCAL?=
 =?us-ascii?q?VaC9S4890hGjrBX1y6FnLurT+S0Ur4jj28J35+DIkREy9Dp0D9mS0m2XTmF0mH?=
 =?us-ascii?q?8ISCEy3KxlvUN9zVKD27Big/NEDdxT++9JUgAiOJ7f1eN6Dcr+WgbAftiTTlam?=
 =?us-ascii?q?Tc6rATUwTtI33t8PbFxxG9SkjhDfwSWqB6UZmKCMBJwx6qjcxWT+J95hy3ba06?=
 =?us-ascii?q?ksl0QpTdFRNWK4nKJ/9xLcB4jSk0qHkaamcqAc3C3I9GeH1meOuEBYUAhtUaTK?=
 =?us-ascii?q?R3wfZ03Wrcjn6UPGVbOhFbMnMg5Zw86YNqRKcsHpjUlBRPr7JdvReXyxlHmqCR?=
 =?us-ascii?q?aI3LyMapHqdHsb3CjGDEgEkgYT/WuJNAQkByehpX7eAyJqFV71f0zs9ux+omuh?=
 =?us-ascii?q?TkAo1wGKc1Fh172t9x4JhPycTvQT3q4EuCYhsTl0AEyx39XMC9qEpgpheqpcbM?=
 =?us-ascii?q?g54FdG02LZqgN8MoahL6Bkml4RbQB3s1ny2BVwD4VKidIqo28yzApuNaKY10tM?=
 =?us-ascii?q?eCmc3Z/uNbzYNGnz8Aq0ZK7Lx17RytCW+qQI6PQmsFjjuACpFkw/83RoydVV0n?=
 =?us-ascii?q?2c5onUAwoWS57+TkE39x1irbHAfiY9/5/U1WFrMaSssj7CxsglC/c/xhehf9dQ?=
 =?us-ascii?q?KqWEFADpHs0eBsiuLvEqmlezYhIFOuBS6LA7P8e8e/Sa366rOf5qnCi6gmRf/I?=
 =?us-ascii?q?B9zkWM+jJmSu7Jw5kK2euY0RaAVzvmileurNr3mYFdaT4OBGW/zTXrC5BLZq11?=
 =?us-ascii?q?e4YGEmOuI8yxxtVjiJ/hQX9Y9Fi/B1wY3M+lYwadb1v43QdIz0QYvWSnmTekzz?=
 =?us-ascii?q?xzizworquf0DbOwuj4bxoHJ2hLSXJmjVftJ4i0kt8bUFKpbwgviBuq+0L6y7JH?=
 =?us-ascii?q?q6R4KmnZWV1IcDTuL2F+TquwsaKPY8xV55MysiVXU+O8bUqBSrHnoBsa0CLjH2?=
 =?us-ascii?q?1AyzA9bDyqvpT5nxpniGOSNnpzrXzZed1uyhfb/tDTWflR3j8eTililTbXHkS8?=
 =?us-ascii?q?P8Wu/diMl5bMqOe+W3ijVp1Sdynm1oeAtCq95W13DhyzhfGzmtv7EQck1S/3zc?=
 =?us-ascii?q?VlVSLNrBzkeInky7y6Mf57fklvHFL86NB1GoBknoswmZEfw34ahpqO8HoDkGfz?=
 =?us-ascii?q?N8hb2K3kYHoMQz4L38Da4Az/1EJ/KXKJwprzVm+Bzct5e9m6fmQW1zo478BLC6?=
 =?us-ascii?q?eb9qZInCVrrVqjsQLef+J9kSwDxvs0534XmOUJuAsrziWADbEeB0hYPSrwlxuW?=
 =?us-ascii?q?69CytrlYZGGqcbKozkpxgcihDK2eogFbQHv5ZpAiHSpq4sR+Kl3M1mDz6pr/eN?=
 =?us-ascii?q?nRdt8TshyUkxHdj+laMp4xl/wKhTZ5NmL5p3Eq1+k7jRl215GgoIeHM3lt/L6+?=
 =?us-ascii?q?AhNALTL6fcQT+jXwjapEmsaWwpuiHpFgGjUNQZvpQuikEDMUtfT7KQmOFCcwpW?=
 =?us-ascii?q?ucGbraBQWf8ltpr2rTE5C3MHGaPHsZws9nRBaDP0xTmhwUUC85np4kFQCq2crh?=
 =?us-ascii?q?f11i5j0K4l74qx1Myv9nNhXlU2ffohuoZSkwSJSFMBVW6QRC7V/PMcOC9uJzAz?=
 =?us-ascii?q?1Y/pq5oQ2NLWybeh1IDXwTVUyCHVzjJb6u5d/P8+WDAuq+Lv3OYaiBqOBEVveI?=
 =?us-ascii?q?w46v3ZVi/zqWKsqPOXxiBeUh2kVfRXB5B9jZmzIXRiwXiS3Nbs2bpBS9+iFtrc?=
 =?us-ascii?q?C/6vPrWA3x6ouVFrtSKs5i+xS3gaeFKu6Rizx1KTde1pMQ23DIzKIT00IViyFr?=
 =?us-ascii?q?bzOtC6gPtTbRTKLMna9aFwQUaz5oO8tS8a093hNBOcrait7u0r54j/g1C0pKVF?=
 =?us-ascii?q?D7m8GpY9AKLH+5NF/dGEmLM7GGLyXRw87reaO8VaFQjOJMuh2suDabFlXvMSiZ?=
 =?us-ascii?q?mzb1VxCgL+dMgTqfPBxfvoG9bxlsBXLiTNLgdh20Ltt3gScqzr0zg3PALXQcPi?=
 =?us-ascii?q?Rkc0NRsr2Q6jtVg/VlFGxH63plLO+ElD6Y7unYMJkWt/RrDz9wl+Jb5nQ61rRU?=
 =?us-ascii?q?4DtFRPxzhCvdsNpur0u6nemIzzo0GCZJ/z1LnoOQoURrP43T7JBdX3veuhMKvk?=
 =?us-ascii?q?uKDBFfjsFjBpXFtrpfz9HJkuqnIS1E//rd580QDY7YJZTUYzIaLRP1FWuMX0M+?=
 =?us-ascii?q?RjmxODSa3hQFnQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AMAQBjIQFch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBZYNsJ4N5lCGCDRSZJywTAYd0IjgSAQMBAQEBAQECARMBAQEIDQkIKS+CNiQ?=
 =?us-ascii?q?BgmEBAQEBAgEBAiBWBgkBAQoLBwYCAiYCAgMfEgEFAQ4OGQWDHIF6CAWbFTyLD?=
 =?us-ascii?q?YEvii4SeYsQFz6BQYERgxKIBYJXAokpMYFBlRYJgROBD48VGF+QQCyYHzCBPIF?=
 =?us-ascii?q?2TSQUbAaCNYIkAxeOHj4zgQUBAY4bAQE?=
X-IPAS-Result: =?us-ascii?q?A0AMAQBjIQFch0O0hNFjHAEBAQQBAQcEAQGBZYNsJ4N5lCG?=
 =?us-ascii?q?CDRSZJywTAYd0IjgSAQMBAQEBAQECARMBAQEIDQkIKS+CNiQBgmEBAQEBAgEBA?=
 =?us-ascii?q?iBWBgkBAQoLBwYCAiYCAgMfEgEFAQ4OGQWDHIF6CAWbFTyLDYEvii4SeYsQFz6?=
 =?us-ascii?q?BQYERgxKIBYJXAokpMYFBlRYJgROBD48VGF+QQCyYHzCBPIF2TSQUbAaCNYIkA?=
 =?us-ascii?q?xeOHj4zgQUBAY4bAQE?=
X-IronPort-AV: E=Sophos;i="5.56,298,1539673200"; 
   d="scan'208";a="53306935"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 30 Nov 2018 03:41:55 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726696AbeK3Wuu (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 30 Nov 2018 17:50:50 -0500
Received: from mail-qk1-f194.google.com ([209.85.222.194]:38348 "EHLO
        mail-qk1-f194.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726473AbeK3Wuu (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 30 Nov 2018 17:50:50 -0500
Received: by mail-qk1-f194.google.com with SMTP id d19so2955859qkg.5;
        Fri, 30 Nov 2018 03:41:49 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=nZQHKiZnV9bH/l6eyhiWqAq+vzH9+nbM90oA3cnkcJE=;
        b=HL5AzEmCmYUFuerpT02ODuC3QFjRk7GmaHaOZFDYYNxLjTNNWl0vIoH+3w1G5R3RDC
         qE8y65QDGi0AyzDroZ96guCsGjk9lgXQls6Uy9HSsL6GeSwjH9ZekPTHVDETB+T2ZuCT
         eoMvWAPYhYm5IzuL8miTJaZAx5qEFCxbe99DEN8YBm57ElZ76ENcgdJu534UOrGqBRt6
         Ii48568lz33xPWaGQqrnfHUnC4GrEp2p016ust+Iu1P3e2o0/Qe/D8l3+Fd+iJ4aVXjI
         IEQ4w39PpmMla0R61jfU37QNmeuVF5VuM9bRaqMxKRBYnLcd8clNBAIA7WI/AESFYWUc
         3krA==
X-Gm-Message-State: AA+aEWb9qiqLyl0CSn/lIVv9VXUlJAWL0va7j/xcFoRUenYOI6h1Q56g
        eNybNgGqYkfEL+3Y+3kH9uEAVkO4xJ/Rvnn93Ow=
X-Google-Smtp-Source: AFSGD/W2Ag7ZKN8Yo/eug3aP0ShV5cYy54AlR7JsGBuclCFMA0CVL0nYP5RNiO90mGH3zj/WbNc3HsX2ktfGSj893wE=
X-Received: by 2002:ae9:e102:: with SMTP id g2mr4591998qkm.343.1543578109004;
 Fri, 30 Nov 2018 03:41:49 -0800 (PST)
MIME-Version: 1.0
References: <20181120105124.14733-1-christian@brauner.io> <87in0g5aqo.fsf@oldenburg.str.redhat.com>
 <36323361-90BD-41AF-AB5B-EE0D7BA02C21@amacapital.net> <993B98AC-51DF-4131-AF7F-7DA2A7F485F1@brauner.io>
 <CALCETrWnQNMQcCmFZrftVVYgAMW6DT3gyxvVb_v9_enUCUkHiw@mail.gmail.com>
 <20181129195551.woe2bl3z3yaysqb6@brauner.io> <6E21165F-2C76-4877-ABD9-0C86D55FD6AA@amacapital.net>
 <CAK8P3a2i9DFaS9-3A9V_pKwFfwVR0bDqgLosmivge3Cx2VyiuQ@mail.gmail.com>
 <87y39b2lm2.fsf@xmission.com> <20181130065606.kmilbbq46oeycjp5@brauner.io>
In-Reply-To: <20181130065606.kmilbbq46oeycjp5@brauner.io>
From: Arnd Bergmann <arnd@arndb.de>
Date: Fri, 30 Nov 2018 12:41:28 +0100
Message-ID: <CAK8P3a0kqPii5TwFAo_JHLX=o_FDMFVKXxgzzbDjLFZ7OQ5QCQ@mail.gmail.com>
Subject: Re: [PATCH v2] signal: add procfd_signal() syscall
To: christian@brauner.io
Cc: "Eric W . Biederman" <ebiederm@xmission.com>,
        Andy Lutomirski <luto@amacapital.net>,
        Andy Lutomirski <luto@kernel.org>,
        Florian Weimer <fweimer@redhat.com>,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>,
        "Serge E. Hallyn" <serge@hallyn.com>, Jann Horn <jannh@google.com>,
        Andrew Morton <akpm@linux-foundation.org>,
        Oleg Nesterov <oleg@redhat.com>, cyphar@cyphar.com,
        Al Viro <viro@zeniv.linux.org.uk>,
        Linux FS-devel Mailing List <linux-fsdevel@vger.kernel.org>,
        Linux API <linux-api@vger.kernel.org>,
        Daniel Colascione <dancol@google.com>,
        Tim Murray <timmurray@google.com>, linux-man@vger.kernel.org,
        Kees Cook <keescook@chromium.org>
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Fri, Nov 30, 2018 at 7:56 AM Christian Brauner <christian@brauner.io> wrote:
> On Thu, Nov 29, 2018 at 11:13:57PM -0600, Eric W. Biederman wrote:
> > Arnd Bergmann <arnd@arndb.de> writes:
> > > On Thu, Nov 29, 2018 at 9:14 PM Andy Lutomirski <luto@amacapital.net> wrote:
> > >
> > > It looks like we already have a 'struct signalfd_siginfo' that is defined in a
> > > sane architecture-independent way, so I'd suggest we use that.
> >
> > Unfortunately it isn't maintained very well.  What you can
> > express with signalfd_siginfo is a subset what you can express with
> > siginfo.  Many of the linux extensions to siginfo for exception
> > information add pointers and have integers right after those pointers.
> > Not all of those linux specific extentions for exceptions are handled
> > by signalfd_siginfo (it needs new fields).

Would those fit in the 30 remaining padding bytes?

> > As originally defined siginfo had the sigval_t union at the end so it
> > was perfectly fine on both 32bit and 64bit as it only had a single
> > pointer in the structure and the other fields were 32bits in size.

The problem with sigval_t of course is that it is incompatible between
32-bit and 64-bit. We can add the same information, but at least on
the syscall level that would have to be a __u64.

> > Although I do feel the pain as x86_64 has to deal with 3 versions
> > of siginfo.  A 64bit one.  A 32bit one for ia32.  A 32bit one for x32
> > with a 64bit si_clock_t.

At least you and Al have managed to get it down to a single source-level
definition across all architectures, but there is also the (lesser) problem
that the structure has a slightly different binary layout on each of the
classic architectures.

If we go with Andy's suggestion of having only a single binary layout
on x86 for the new call, I'd argue that we should also make it have
the exact same layout on all other architectures.

> > > We may then also want to make sure that any system call that takes a
> > > siginfo has a replacement that takes a signalfd_siginfo, and that this
> > > replacement can be used to implement the old version purely in
> > > user space.
> >
> > If you are not implementing CRIU and reinserting exceptions to yourself.
> > At most user space wants the ability to implement sigqueue:
> >
> > AKA:
> > sigqueue(pid_t pid, int sig, const union sigval value);
> >
> > Well sigqueue with it's own si_codes so the following would cover all
> > the use cases I know of:
> > int sendnewsig(pid_t pid, int sig, int si_code, const union sigval value);
> >
> > The si_code could even be set to SI_USER to request that the normal
> > trusted SI_USER values be filled in.  si_code values of < 0 if not
> > recognized could reasonably safely be treated as the _rt member of
> > the siginfo union.  Or perhaps better we error out in such a case.
> >
> > If we want to be flexible and not have N kinds of system calls that
> > is the direction I would go.  That is simple, and you don't need any of
> > the rest.

I'm not sure I understand what you are suggesting here. Would the
low-level implementation of this be based on procfd, or do you
mean that would be done for pid_t at the kernel level, plus another
syscall for procfd?

> > Alternatively we abandon the mistake of sigqueueinfo and not allow
> > a signal number in the arguments that differs from the si_signo in the
> > siginfo and allow passing the entire thing unchanged from sender to
> > receiver.  That is maximum flexibility.

This would be regardless of which flavor of siginfo (today's arch
specific one, signalfd_siginfo, or a new one) we pass, right?

> > signalfd_siginfo just sucks in practice.  It is larger that siginfo 104
> > bytes versus 48.  We must deliver it to userspace as a siginfo so it
> > must be translated.  Because of the translation signalfd_siginfo adds
> > no flexiblity in practice, because it can not just be passed through.
> > Finallay signalfd_siginfo does not have encodings for all of the
> > siginfo union members, so it fails to be fully general.
> >
> > Personally if I was to define signalfd_siginfo today I would make it:
> > struct siginfo_subset {
> >       __u32 sis_signo;
> >       __s32 sis_errno;
> >       __s32 sis_code;
> >         __u32 sis_pad;
> >       __u32 sis_pid;
> >       __u32 sis_uid;
> >       __u64 sis_data (A pointer or integer data field);
> > };
> >
> > That is just 32bytes, and is all that is needed for everything
> > except for synchronous exceptions.  Oh and that happens to be a proper
> > subset of a any sane siginfo layout, on both 32bit and 64bit.

And that would work for signalfd and waitid_time64, but not for
procfd_signal/kill/sendsiginfo?

> > This is one of those rare times where POSIX is sane and what linux
> > has implemented is not.
>
> Thanks for the in-depth explanation. So your point is that we are better
> off if we stick with siginfo_t instead of struct signalfd_siginfo in
> procfd_signal()?

I think it means we still need more discussion. Using signalfd_siginfo
without further changes doesn't seem sufficient because of the missing
sigval and the excessive length adds some cost.

siginfo_t as it is now still has a number of other downsides, and Andy in
particular didn't like the idea of having three new variants on x86
(depending on how you count). His alternative suggestion of having
a single syscall entry point that takes a 'signfo_t __user *' but interprets
it as compat_siginfo depending on in_compat_syscall()/in_x32_syscall()
should work correctly, but feels wrong to me, or at least inconsistent
with how we do this elsewhere.

        Arnd
