Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 21:23:27 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id B5B3658061F
	for <like.xu@linux.intel.com>; Thu, 13 Dec 2018 04:10:39 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga004-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 13 Dec 2018 04:10:39 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AUxXHLxaBCC/0kaNLRFPxHtP/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZrsu/bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJWSJPAp2y?=
 =?us-ascii?q?YYgNAOoPMulXs4bzqUYWrRa8BwehC/7jxzFUinDoxq03yPghHAPc0QA8A94CrG?=
 =?us-ascii?q?rYodPoP6kSS+C1y6zIwC3AYfNZ3jf98pXDfBc7rvGJWLJ/b9feyU4xFwjYiViQ?=
 =?us-ascii?q?qInlMCmQ1uQIrWeU8u1gWPm1i2E5tg5xoiKgxts2hobVgYIVz0nJ+CNky4g2Pd?=
 =?us-ascii?q?21UFB3bcKnHZdKqi2WKoh7Ttk8T2xmuCs20KAKtJyjcCQU1JgqwwTTZ+GJfoSW?=
 =?us-ascii?q?+B7vSeWcLDliiH57e7+ygQu5/1K6xe3mTMa01U5HripbndnIsXAAzxjT6smcSv?=
 =?us-ascii?q?th5UetwzmP1wbO6u1eJkA0j6XbJ4Ygwr42iJUTrVzOEjHqlEj1lqOaa1go9+uy?=
 =?us-ascii?q?5+j5bLjrpoWQO5J2hw3mN6QhgM2/AeA2MggUWGib/Pyx1KT98k38XbVGl+A5nb?=
 =?us-ascii?q?fHsJ/EIcQXv7W2AwhI0oYl9xmwESym3NMcnXkGL1JKZgiLjof0O1zWJPD4DPG/?=
 =?us-ascii?q?g0mjkTtxxvDGOKHhDYvJLnTZjLjherN95lVayAo0y9Bf6JRUCqwbLPL0QE/xu8?=
 =?us-ascii?q?TUDgUlPAys3+bnFNJ925saWWKOAa+WLrnesFCV5u80J+mMZYkVuCvyKvQ/5v7u?=
 =?us-ascii?q?i2M5lkEZfaWzwZQXb3W4TbxbJV6Eay/snssZCjVN+Q4/V/DxzluFVzFVejC1Ra?=
 =?us-ascii?q?174zg6DIevC8DEXpysh7qamz62G4ATam1YB1TfLHHzao/RXv4NbD6VcNZslyFB?=
 =?us-ascii?q?WbW/Rotkzxy3qQLh15JhKezb/DBesojsg8No7e/eng1n6DpvEs6G2HuMRWwnom?=
 =?us-ascii?q?Rdezgwzehcu0tiy16AmfxxgOZfCt1a5NtNUwEnJdjdxek8ANf3DFHvZNCMHXep?=
 =?us-ascii?q?Rc/uJDg0S989xMFGN0d4EtCngxzE9zCnD78ci/qAA5liofGU5GT4O8sokyWO76?=
 =?us-ascii?q?ImlVRzB5IXbWA=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A2AAAcSxJcmBHrdtBjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUwUBAQsBgTCCYox0jUCJIY4zFIFfFBgUh0QiNgcNAQMBAQEBAQECARMBAQE?=
 =?us-ascii?q?BAQgLCwYbDi+CNgUCAxoBBoJbAQEBAQIBAQIkEwwKKQMCAQECBgEBCg4KCR0IA?=
 =?us-ascii?q?wELSAYKCQWDHIF0BQgBBKd7M4VAhHKMPBdyTj+BEYJkLoRKH4VzAo9HR4VgiyE?=
 =?us-ascii?q?JkU4LGIFciBA2gSeGAYMElkWBTQWCAk0jFTuCbIInFxKODEAxgQcciV9WgXcBA?=
 =?us-ascii?q?Q?=
X-IPAS-Result: =?us-ascii?q?A0A2AAAcSxJcmBHrdtBjHAEBAQQBAQcEAQGBUwUBAQsBgTC?=
 =?us-ascii?q?CYox0jUCJIY4zFIFfFBgUh0QiNgcNAQMBAQEBAQECARMBAQEBAQgLCwYbDi+CN?=
 =?us-ascii?q?gUCAxoBBoJbAQEBAQIBAQIkEwwKKQMCAQECBgEBCg4KCR0IAwELSAYKCQWDHIF?=
 =?us-ascii?q?0BQgBBKd7M4VAhHKMPBdyTj+BEYJkLoRKH4VzAo9HR4VgiyEJkU4LGIFciBA2g?=
 =?us-ascii?q?SeGAYMElkWBTQWCAk0jFTuCbIInFxKODEAxgQcciV9WgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,348,1539673200"; 
   d="scan'208";a="56188433"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 13 Dec 2018 04:10:39 -0800
Received: from localhost ([::1]:52005 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gXPp8-0003R2-7L
	for like.xu@linux.intel.com; Thu, 13 Dec 2018 07:10:38 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:34480)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <imammedo@redhat.com>) id 1gXPok-0003MG-2g
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 07:10:20 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <imammedo@redhat.com>) id 1gXPob-0005A8-VO
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 07:10:13 -0500
Received: from mx1.redhat.com ([209.132.183.28]:50060)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <imammedo@redhat.com>) id 1gXPoZ-00058q-RE
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 07:10:05 -0500
Received: from smtp.corp.redhat.com (int-mx06.intmail.prod.int.phx2.redhat.com
	[10.5.11.16])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 669038E588;
	Thu, 13 Dec 2018 12:10:02 +0000 (UTC)
Received: from localhost (unknown [10.43.2.182])
	by smtp.corp.redhat.com (Postfix) with ESMTP id 98A3661B95;
	Thu, 13 Dec 2018 12:10:00 +0000 (UTC)
Date: Thu, 13 Dec 2018 13:09:59 +0100
From: Igor Mammedov <imammedo@redhat.com>
To: Tony Krowiak <akrowiak@linux.ibm.com>
Message-ID: <20181213130959.4c863705@redhat.com>
In-Reply-To: <ee5f36b2-e0a0-cdee-ad9a-dbeb36f1583c@linux.ibm.com>
References: <1544469254-11629-1-git-send-email-akrowiak@linux.ibm.com>
	<20181211162303.2e581899@redhat.com>
	<ee5f36b2-e0a0-cdee-ad9a-dbeb36f1583c@linux.ibm.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.16
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.28]);
	Thu, 13 Dec 2018 12:10:02 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH] qdev/core: Can not replug device on bus
 that allows one device
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: thuth@redhat.com, qemu-devel@nongnu.org, armbru@redhat.com,
	pasic@linux.ibm.com, borntraeger@de.ibm.com, pbonzini@redhat.com,
	f4bug@amsat.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Tue, 11 Dec 2018 14:41:00 -0500
Tony Krowiak <akrowiak@linux.ibm.com> wrote:

> On 12/11/18 10:23 AM, Igor Mammedov wrote:
> > On Mon, 10 Dec 2018 14:14:14 -0500
> > Tony Krowiak <akrowiak@linux.ibm.com> wrote:
> >   
> >> If the maximum number of devices allowed on a bus is 1 and a device
> >> which is plugged into the bus is subsequently unplugged, attempting to replug
> >> the device fails with error "Bus 'xxx' does not support hotplugging".
> >> The "error" is detected in the qbus_is_full(BusState *bus) function
> >> (qdev_monitor.c) because bus->max_index >= bus_class->max_dev. The
> >> root of the problem is that the bus->max_index is not decremented when a device
> >> is unplugged from the bus. This patch fixes that problem.
> >>
> >> Signed-off-by: Tony Krowiak <akrowiak@linux.ibm.com>
> >> ---
> >>   hw/core/qdev.c | 2 ++
> >>   1 file changed, 2 insertions(+)
> >>
> >> diff --git a/hw/core/qdev.c b/hw/core/qdev.c
> >> index 6b3cc55b27c2..b35b0bf27925 100644
> >> --- a/hw/core/qdev.c
> >> +++ b/hw/core/qdev.c
> >> @@ -59,6 +59,8 @@ static void bus_remove_child(BusState *bus, DeviceState *child)
> >>               snprintf(name, sizeof(name), "child[%d]", kid->index);
> >>               QTAILQ_REMOVE(&bus->children, kid, sibling);
> >>   
> >> +            bus->max_index--;  
> > that might cause problem when bus is allowed to has more than 1 device
> > and unplugged device is not the last one.
> > In that case bus_add_child() might create a child with duplicate name.  
> 
> I see what you are saying. The max_index is assigned to the child device
> index in the bus_add_child() function. The child device index is used to
> generate a unique name for the child device. The generated name is then
> used to link the child as a property to the bus. When the child is
> removed from the bus, the name is regenerated from the child device
> index and the named property is . It would therefore appear that the
> real purpose of the max_index is to generate indexes for children of
> the bus thus ensuring each child has a unique index. In other words,
> the max_index value is only tangentially connected to indexing the list
> of children.
> 
> This results in a disconnect between the usage of the max_index value
> when adding and removing a child from the bus, and the check in the
> qbus_is_full() function which compares the max_index to the maximum
> number of devices allowed on the bus. If a child has been removed from
> the bus, the max_index value does not indicate whether the bus is
> full, it only specifies the index to be assigned to the next child to be
> added to the bus.
> 
> To resolve this problem, I propose the following:
> 
> Add the following field to struct BusState (include/hw/qdev_core.h):
> 
> struct BusState {
>      Object obj;
>      DeviceState *parent;
>      char *name;
>      HotplugHandler *hotplug_handler;
>      int max_index;
>      bool realized;
> +    int num_children;
>      QTAILQ_HEAD(ChildrenHead, BusChild) children;
>      QLIST_ENTRY(BusState) sibling;
> };
> 
> Add the following lines of code to the add/remove child functions in
> hw/core/qdev.c:
> 
> static void bus_add_child(BusState *bus, DeviceState *child)
> {
>      char name[32];
>      BusChild *kid = g_malloc0(sizeof(*kid));
> 
>      kid->index = bus->max_index++;
>      kid->child = child;
>      object_ref(OBJECT(kid->child));
> 
>      QTAILQ_INSERT_HEAD(&bus->children, kid, sibling);
> 
>      /* This transfers ownership of kid->child to the property.  */
>      snprintf(name, sizeof(name), "child[%d]", kid->index);
>      object_property_add_link(OBJECT(bus), name,
>                               object_get_typename(OBJECT(child)),
>                               (Object **)&kid->child,
>                               NULL, /* read-only property */
>                               0, /* return ownership on prop deletion */
>                               NULL);
> 
> +    bus->num_children++;
> }
> 
> static void bus_remove_child(BusState *bus, DeviceState *child)
> {
>      BusChild *kid;
> 
>      QTAILQ_FOREACH(kid, &bus->children, sibling) {
>          if (kid->child == child) {
>              char name[32];
> 
>              snprintf(name, sizeof(name), "child[%d]", kid->index);
>              QTAILQ_REMOVE(&bus->children, kid, sibling);
> 
>              /* This gives back ownership of kid->child back to us.  */
>              object_property_del(OBJECT(bus), name, NULL);
>              object_unref(OBJECT(kid->child));
>              g_free(kid);
> 
> +           bus->num_children--;
> 
>              return;
>          }
>      }
> }
> 
> Change the line of code in the qbus_is_full() function in
> qdev_monitor.c:
> 
> 
> static inline bool qbus_is_full(BusState *bus)
> {
>      BusClass *bus_class = BUS_GET_CLASS(bus);
> -    return bus_class->max_dev &&
> -           bus->max_index >= bus_class->max_dev;
> +    return bus_class->max_dev &&
> +           bus->num_children >= bus_class->max_dev;
> }
> 

looks good to me
[...]

