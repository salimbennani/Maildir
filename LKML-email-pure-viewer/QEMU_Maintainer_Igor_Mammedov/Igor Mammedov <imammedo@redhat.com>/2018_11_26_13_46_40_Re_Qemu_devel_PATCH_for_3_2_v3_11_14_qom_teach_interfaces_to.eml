Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 26 Nov 2018 21:53:42 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id B63125803C2
	for <like.xu@linux.intel.com>; Mon, 26 Nov 2018 05:47:23 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga003-1.jf.intel.com with ESMTP; 26 Nov 2018 05:47:23 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AnOwyih8zCTmk2/9uRHKM819IXTAuvvDOBiVQ1KB+?=
 =?us-ascii?q?0+gVIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CS2RPXthfWS9DDYOy?=
 =?us-ascii?q?YIQAE+UPM/tAr4T/pVUDogayCAewCOzx0T9FnWP23bQg3ug9DQ3KwA4tEtQTu3?=
 =?us-ascii?q?rUttX1M6ISXPi2wqnHyjXDde5d1zDn54jNdxAuv+yDXbVuccHMzkQvFgbFgU+V?=
 =?us-ascii?q?qYzgITyay+MNvnOB7+V+SO2vi3Qoqx1rrjezwccsj5DEi4QIwV7K8iV5xZw6Jd?=
 =?us-ascii?q?y+SENjZt6lEZ9QuDuBOIttWM8iRHtouCk8x7YbupC7ZDAHxIo7yxPccfCLbpWE?=
 =?us-ascii?q?7xH5WOqPLzp1hGhpdK+9ihqq70Ss1unxWtOp3FtEsCZJiMTAu3MD2hDJ9MSKSf?=
 =?us-ascii?q?1w9Vq71zmVzQDc8ORELFg0laXFL54hxaY9lp4SsUTYAi/2g1/6jKCQdkU54OSo?=
 =?us-ascii?q?7P7nYrr+qp+dMY97lB3+P7wwlsCjAuk0KBUCU3WY9OimyrHu8030TK9XgvA0iq?=
 =?us-ascii?q?XZtYrVJcUfpq63GQ9V1YMj5g6mDzi41dQYgGALI09bdxKZkYfpP0jCL+v/Dfei?=
 =?us-ascii?q?hVSjjClkx+vBMr3lA5XNLWbMnK3ufLZg80NczAszzdZC55NbEL0BIfTzWlPvu9?=
 =?us-ascii?q?zcFBM2Lwu0w+P8BdV70YMeX22PAqmEMK/Itl+I/O0vL/GWZIAJoDb9N+Ql5/n2?=
 =?us-ascii?q?gH89mF8dfrem0YEYaXClBflmJ0SZYXzxgtYOC2sKvww+TPD0h12GSzJce3GyX6?=
 =?us-ascii?q?dvrgw9E5+sWIffWpi20vvG2CagAoYQYGdABVaRV3DyeMKBUvYIbSuUZch5jj0D?=
 =?us-ascii?q?U6PmUoIkyFSiuRH3z+laKPHJ8HgdvJPnyN8n/uDWiFQ++CJ5C4GH3niQQnpotm?=
 =?us-ascii?q?UPQTAwweZ4u0Mq0UqJ06Vzn6lFE8dO7ehCSAYwOM3gyLlfAsr5HyvHcs0IAHK7?=
 =?us-ascii?q?WNivHHllS9sryNYIb1xwXdG/lB3KwgKwDrMVnqDND5sxpPHyxX/0cudyzGyO8a?=
 =?us-ascii?q?AkilQqRdUHYWyjj6t6+gTUL5TEn0WQi+ChcqFKj32Fz3uK0Wfb5BIQawV3S6iQ?=
 =?us-ascii?q?GClHPkY=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A9AACG+PtbhxHrdtBiHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGBMIE5gRYTg3mIGF+LBxqCDYdigTiOIoFzFBgLCYRATgEEg1AiNAkNAQM?=
 =?us-ascii?q?BAQEBAQECARMBAQEKCwkIGw4jDIIoDgUCAxoBBoJcAQICAQECIAQfCikDAgEBA?=
 =?us-ascii?q?gYBAQoaAgUdBAICAwELSAYTBYMcAYF0BQgBBAqlIHwzhC0BCwGBBoRZgQuKWCY?=
 =?us-ascii?q?XgUA/hCOCEIJugwSCVwKPGYR0i3UJhnyKKAsYgiaHK4c3jUOKbYFGgg1NIxWDJ?=
 =?us-ascii?q?wmCHhcSiEyFP0AxgQcciXeBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0A9AACG+PtbhxHrdtBiHQEBBQEHBQGBUQgBCwGBMIE5gRY?=
 =?us-ascii?q?Tg3mIGF+LBxqCDYdigTiOIoFzFBgLCYRATgEEg1AiNAkNAQMBAQEBAQECARMBA?=
 =?us-ascii?q?QEKCwkIGw4jDIIoDgUCAxoBBoJcAQICAQECIAQfCikDAgEBAgYBAQoaAgUdBAI?=
 =?us-ascii?q?CAwELSAYTBYMcAYF0BQgBBAqlIHwzhC0BCwGBBoRZgQuKWCYXgUA/hCOCEIJug?=
 =?us-ascii?q?wSCVwKPGYR0i3UJhnyKKAsYgiaHK4c3jUOKbYFGgg1NIxWDJwmCHhcSiEyFP0A?=
 =?us-ascii?q?xgQcciXeBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,282,1539673200"; 
   d="scan'208";a="54811142"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 26 Nov 2018 05:47:23 -0800
Received: from localhost ([::1]:36049 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gRHEQ-0004RC-Dv
	for like.xu@linux.intel.com; Mon, 26 Nov 2018 08:47:22 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:39234)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <imammedo@redhat.com>) id 1gRHE2-0004Q1-4v
	for qemu-devel@nongnu.org; Mon, 26 Nov 2018 08:46:59 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <imammedo@redhat.com>) id 1gRHDy-0003pB-ST
	for qemu-devel@nongnu.org; Mon, 26 Nov 2018 08:46:58 -0500
Received: from mx1.redhat.com ([209.132.183.28]:41850)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <imammedo@redhat.com>)
	id 1gRHDo-0003kZ-Vu; Mon, 26 Nov 2018 08:46:45 -0500
Received: from smtp.corp.redhat.com (int-mx06.intmail.prod.int.phx2.redhat.com
	[10.5.11.16])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id C72CF30821E5;
	Mon, 26 Nov 2018 13:46:43 +0000 (UTC)
Received: from localhost (unknown [10.43.2.182])
	by smtp.corp.redhat.com (Postfix) with ESMTP id C82285C1B2;
	Mon, 26 Nov 2018 13:46:41 +0000 (UTC)
Date: Mon, 26 Nov 2018 14:46:40 +0100
From: Igor Mammedov <imammedo@redhat.com>
To: =?UTF-8?B?TWFyYy1BbmRyw6k=?= Lureau <marcandre.lureau@redhat.com>
Message-ID: <20181126144640.361f21f0@redhat.com>
In-Reply-To: <20181107123652.23417-12-marcandre.lureau@redhat.com>
References: <20181107123652.23417-1-marcandre.lureau@redhat.com>
	<20181107123652.23417-12-marcandre.lureau@redhat.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.16
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.47]);
	Mon, 26 Nov 2018 13:46:44 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH for-3.2 v3 11/14] qom: teach interfaces to
 implement post-init
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: wei@redhat.com, Peter Maydell <peter.maydell@linaro.org>,
	peter.crosthwaite@xilinx.com, qemu-devel@nongnu.org,
	julian@codesourcery.com, qemu-arm@nongnu.org,
	antonynpavlov@gmail.com, greg.bellows@linaro.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Wed,  7 Nov 2018 16:36:49 +0400
Marc-Andr=C3=A9 Lureau <marcandre.lureau@redhat.com> wrote:

> The following patches are going to implement post_init callbacks for
> settings properties. The interface post_init are called before the
> instance post_init, so the default interface behaviour can be
> overriden if necessary.


CCing ARM guys who touched arm_cpu_post_init() in the past,
pls provide feedback if suggested below approach is acceptable.


> Signed-off-by: Marc-Andr=C3=A9 Lureau <marcandre.lureau@redhat.com>
> ---
>  qom/object.c                |  8 +++++++-
>  tests/check-qom-interface.c | 23 +++++++++++++++++++++--
>  2 files changed, 28 insertions(+), 3 deletions(-)
>=20
> diff --git a/qom/object.c b/qom/object.c
> index b1a7f70550..980eeb8283 100644
> --- a/qom/object.c
> +++ b/qom/object.c
> @@ -290,7 +290,6 @@ static void type_initialize(TypeImpl *ti)
>          assert(ti->instance_size =3D=3D 0);
>          assert(ti->abstract);
>          assert(!ti->instance_init);
> -        assert(!ti->instance_post_init);
>          assert(!ti->instance_finalize);
>          assert(!ti->num_interfaces);
>      }
> @@ -363,6 +362,13 @@ static void object_init_with_type(Object *obj, TypeI=
mpl *ti)
> =20
>  static void object_post_init_with_type(Object *obj, TypeImpl *ti)
>  {
> +    GSList *e;
> +
> +    for (e =3D ti->class->interfaces; e; e =3D e->next) {
> +        TypeImpl *itype =3D OBJECT_CLASS(e->data)->type;
> +        object_post_init_with_type(obj, itype);
> +    }
isn't arm_cpu_post_init() issue[1] still valid here?
1) http://patchwork.ozlabs.org/patch/969002/

probably cleanest/easiest way is to get rid of arm_cpu_post_init()
by calling it from leaf classes and then drop device_post_init()
along with switching to interface approach.

CCing guys who touched arm_cpu_post_init() in the past

>      if (ti->instance_post_init) {
>          ti->instance_post_init(obj);
>      }
> diff --git a/tests/check-qom-interface.c b/tests/check-qom-interface.c
> index 2177f0dce5..cd2dd6dcee 100644
> --- a/tests/check-qom-interface.c
> +++ b/tests/check-qom-interface.c
> @@ -31,9 +31,27 @@ typedef struct TestIfClass {
>      uint32_t test;
>  } TestIfClass;
> =20
> +typedef struct DirectImpl {
> +    Object parent_obj;
> +
> +    bool if_post_init;
> +} DirectImpl;
> +
> +#define TYPE_DIRECT_IMPL "direct-impl"
> +#define DIRECT_IMPL(obj) \
> +    OBJECT_CHECK(DirectImpl, (obj), TYPE_DIRECT_IMPL)
> +
> +static void test_if_post_init(Object *obj)
> +{
> +    DirectImpl *d =3D DIRECT_IMPL(obj);
> +
> +    d->if_post_init =3D true;
> +}
> +
>  static const TypeInfo test_if_info =3D {
>      .name          =3D TYPE_TEST_IF,
>      .parent        =3D TYPE_INTERFACE,
> +    .instance_post_init =3D test_if_post_init,
>      .class_size =3D sizeof(TestIfClass),
>  };
> =20
> @@ -47,11 +65,10 @@ static void test_class_init(ObjectClass *oc, void *da=
ta)
>      tc->test =3D PATTERN;
>  }
> =20
> -#define TYPE_DIRECT_IMPL "direct-impl"
> -
>  static const TypeInfo direct_impl_info =3D {
>      .name =3D TYPE_DIRECT_IMPL,
>      .parent =3D TYPE_OBJECT,
> +    .instance_size =3D sizeof(DirectImpl),
>      .class_init =3D test_class_init,
>      .interfaces =3D (InterfaceInfo[]) {
>          { TYPE_TEST_IF },
> @@ -70,10 +87,12 @@ static void test_interface_impl(const char *type)
>  {
>      Object *obj =3D object_new(type);
>      TestIf *iobj =3D TEST_IF(obj);
> +    DirectImpl *d =3D DIRECT_IMPL(obj);
>      TestIfClass *ioc =3D TEST_IF_GET_CLASS(iobj);
> =20
>      g_assert(iobj);
>      g_assert(ioc->test =3D=3D PATTERN);
> +    g_assert(d->if_post_init =3D=3D true);
>      object_unref(obj);
>  }
> =20


