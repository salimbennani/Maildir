Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 28 Nov 2018 08:45:36 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 2EEAB5803C2
	for <like.xu@linux.intel.com>; Tue, 27 Nov 2018 06:30:52 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 27 Nov 2018 06:30:51 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A9yLJxRcsBlyAHIeVIfi/FOp2lGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxcW8bB7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyJPDIOi?=
 =?us-ascii?q?YYUMDeUBM+lXoJXyqVUTtRuzBwuiCezyxjJGmnP5w7Y63v89EQzExgEsA84CvG?=
 =?us-ascii?q?jKoNjzKawcUfq1zK7NzTjbbP1W1jD96JLVeR4mu/6MWLdwftTMxkkoCQPOk1Kd?=
 =?us-ascii?q?qY3gPzyP0+QNtnaU4PdnVe+0kW4otRx+oji1yccwkIXGmoUVylXd+Ch/3Y07Js?=
 =?us-ascii?q?W4RVZlbdK4E5ZcrTyWO5Z1T884XW1ltiY3xqcbtZO5ZCQG1ogryhrFZ/CafYWE?=
 =?us-ascii?q?/AjvWPuSLDp2nn5pZrGyihCv+ka60OL8TNO70FNSoypFjNbMsncN2gTX6siGUf?=
 =?us-ascii?q?t94lyh1SyA1wDV9+FIO0c0lbDUK5I5w74wkIQcsVjbEyPohEn7j7Waelg59uWr?=
 =?us-ascii?q?8ejrfLvrq5+GO4NpiAzyKqEulda+AeQ8PAgORW+b+eGk2b3640L5RahKguQrna?=
 =?us-ascii?q?bHrpDVO8AbqreiDA9Sz4Yj7QqwACm90NgfmXkHLVFFdwydg4nmJlHDOPT4Dfa5?=
 =?us-ascii?q?g1SxnzZn3fHGPrv9AprTKnjPiqvufbF460NHzgozytZf551SCrEcOv7zXVXxtN?=
 =?us-ascii?q?PAAh8jLwO02/rnCMl61o4GXWKPA6yZP73IvV6H++IiOO2MZI4TuDbgJPkp/f/u?=
 =?us-ascii?q?jXklmVADeamlx4cYaHe9HqcuHkOCfHC5gssdCXxY+U06Tff2kxuEVjhcYWv0WL?=
 =?us-ascii?q?gzoTQyCYajBIGEQZixgbuHx2CiE5hLI2xLFF2IQkrubJiODvIFaSaOJZ14nzkZ?=
 =?us-ascii?q?ELSsVYIlkAujrRL30KZPKO3S9SsF85X5249u+ufRmBouoCFyFNmXyGqXTmt5zV?=
 =?us-ascii?q?8PEgM226V2ugRd10uDmfxkg+FEFfRJ6v9JWxt8PpnZmb9UEdf3DyPOec3BbV+j?=
 =?us-ascii?q?R9iqBi95GtM0ytoLbkp6M8+vghDKw2yhBLpDxO/DP4A97q+Jhyu5HM160XuTkf?=
 =?us-ascii?q?B511Q=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AYAAARVP1bhxHrdtBkHAECBAEIBAGBU?=
 =?us-ascii?q?gcBDAGBMIJPE4wRX4spgg2JHY4jgW8YGBSIeiI0CQ0BAwEBAQEBAQIBEwEBAQo?=
 =?us-ascii?q?LCQgbDi+CNgUCAxoBBoJbAQEBAQIBAQIkEwwKKQMCAQECBgEBCg4HDB0IAwELS?=
 =?us-ascii?q?AYTBYMcgXUFCAEEpgczhUCEa4wNF4FAP4ERgxKCEIhMAokVEoV5Q5ApCYophnw?=
 =?us-ascii?q?LGIFZh3k2hwMsiUKOSYFGgg1NIxU7gmyCJAMXEo4MQDGBBxyKfIF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0AYAAARVP1bhxHrdtBkHAECBAEIBAGBUgcBDAGBMIJPE4w?=
 =?us-ascii?q?RX4spgg2JHY4jgW8YGBSIeiI0CQ0BAwEBAQEBAQIBEwEBAQoLCQgbDi+CNgUCA?=
 =?us-ascii?q?xoBBoJbAQEBAQIBAQIkEwwKKQMCAQECBgEBCg4HDB0IAwELSAYTBYMcgXUFCAE?=
 =?us-ascii?q?EpgczhUCEa4wNF4FAP4ERgxKCEIhMAokVEoV5Q5ApCYophnwLGIFZh3k2hwMsi?=
 =?us-ascii?q?UKOSYFGgg1NIxU7gmyCJAMXEo4MQDGBBxyKfIF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,286,1539673200"; 
   d="scan'208";a="139747415"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 27 Nov 2018 06:30:50 -0800
Received: from localhost ([::1]:42752 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gReO2-0000ET-Ao
	for like.xu@linux.intel.com; Tue, 27 Nov 2018 09:30:50 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:33767)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <imammedo@redhat.com>) id 1gReNn-0000Dv-PF
	for qemu-devel@nongnu.org; Tue, 27 Nov 2018 09:30:41 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <imammedo@redhat.com>) id 1gReNj-0001lP-MC
	for qemu-devel@nongnu.org; Tue, 27 Nov 2018 09:30:35 -0500
Received: from mx1.redhat.com ([209.132.183.28]:41242)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <imammedo@redhat.com>) id 1gReNj-0001gc-E2
	for qemu-devel@nongnu.org; Tue, 27 Nov 2018 09:30:31 -0500
Received: from smtp.corp.redhat.com (int-mx02.intmail.prod.int.phx2.redhat.com
	[10.5.11.12])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 5C32A30056AB;
	Tue, 27 Nov 2018 14:30:30 +0000 (UTC)
Received: from localhost (unknown [10.43.2.182])
	by smtp.corp.redhat.com (Postfix) with ESMTP id D541360C6E;
	Tue, 27 Nov 2018 14:30:12 +0000 (UTC)
Date: Tue, 27 Nov 2018 15:30:10 +0100
From: Igor Mammedov <imammedo@redhat.com>
To: Thomas Huth <thuth@redhat.com>
Message-ID: <20181127153010.2fd8c889@redhat.com>
In-Reply-To: <1542049690-12826-6-git-send-email-thuth@redhat.com>
References: <1542049690-12826-1-git-send-email-thuth@redhat.com>
	<1542049690-12826-6-git-send-email-thuth@redhat.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.12
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.47]);
	Tue, 27 Nov 2018 14:30:30 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH for-3.2 5/7] tests/acpi-utils: Drop
 dependence on global_qtest
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Laurent Vivier <lvivier@redhat.com>, Ben Warren <ben@skyportsystems.com>,
	qemu-devel@nongnu.org, Paolo Bonzini <pbonzini@redhat.com>,
	John Snow <jsnow@redhat.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Mon, 12 Nov 2018 20:08:08 +0100
Thomas Huth <thuth@redhat.com> wrote:

> From: Eric Blake <eblake@redhat.com>
> 
> As a general rule, we prefer avoiding implicit global state
> because it makes code harder to safely copy and paste without
> thinking about the global state.  Adjust the helper code to
> use explicit state instead, and update all callers.
> 
> bios-tables-test no longer depends on global_qtest, now that it
> passes explicit state through the testsuite data; an assert
> proves this fact (although we will get rid of it later, once
> global_qtest is gone).
> 
> Signed-off-by: Eric Blake <eblake@redhat.com>
> [thuth: adapted patch to current master branch]
> Signed-off-by: Thomas Huth <thuth@redhat.com>

Acked-by/Tested-by: Igor Mammedov <imammedo@redhat.com>

> ---
>  tests/acpi-utils.c       | 19 +++++------
>  tests/acpi-utils.h       | 63 +++++++++++++++++++------------------
>  tests/bios-tables-test.c | 82 +++++++++++++++++++++++++-----------------------
>  tests/vmgenid-test.c     | 24 +++++++-------
>  4 files changed, 96 insertions(+), 92 deletions(-)
> 
> diff --git a/tests/acpi-utils.c b/tests/acpi-utils.c
> index 41dc1ea..6dc8ca1 100644
> --- a/tests/acpi-utils.c
> +++ b/tests/acpi-utils.c
> @@ -32,7 +32,7 @@ uint8_t acpi_calc_checksum(const uint8_t *data, int len)
>      return sum;
>  }
>  
> -uint32_t acpi_find_rsdp_address(void)
> +uint32_t acpi_find_rsdp_address(QTestState *qts)
>  {
>      uint32_t off;
>  
> @@ -42,7 +42,7 @@ uint32_t acpi_find_rsdp_address(void)
>          int i;
>  
>          for (i = 0; i < sizeof sig - 1; ++i) {
> -            sig[i] = readb(off + i);
> +            sig[i] = qtest_readb(qts, off + i);
>          }
>  
>          if (!memcmp(sig, "RSD PTR ", sizeof sig)) {
> @@ -52,14 +52,15 @@ uint32_t acpi_find_rsdp_address(void)
>      return off;
>  }
>  
> -void acpi_parse_rsdp_table(uint32_t addr, AcpiRsdpDescriptor *rsdp_table)
> +void acpi_parse_rsdp_table(QTestState *qts, uint32_t addr,
> +                           AcpiRsdpDescriptor *rsdp_table)
>  {
> -    ACPI_READ_FIELD(rsdp_table->signature, addr);
> +    ACPI_READ_FIELD(qts, rsdp_table->signature, addr);
>      ACPI_ASSERT_CMP64(rsdp_table->signature, "RSD PTR ");
>  
> -    ACPI_READ_FIELD(rsdp_table->checksum, addr);
> -    ACPI_READ_ARRAY(rsdp_table->oem_id, addr);
> -    ACPI_READ_FIELD(rsdp_table->revision, addr);
> -    ACPI_READ_FIELD(rsdp_table->rsdt_physical_address, addr);
> -    ACPI_READ_FIELD(rsdp_table->length, addr);
> +    ACPI_READ_FIELD(qts, rsdp_table->checksum, addr);
> +    ACPI_READ_ARRAY(qts, rsdp_table->oem_id, addr);
> +    ACPI_READ_FIELD(qts, rsdp_table->revision, addr);
> +    ACPI_READ_FIELD(qts, rsdp_table->rsdt_physical_address, addr);
> +    ACPI_READ_FIELD(qts, rsdp_table->length, addr);
>  }
> diff --git a/tests/acpi-utils.h b/tests/acpi-utils.h
> index ac52abd..a06a4ed 100644
> --- a/tests/acpi-utils.h
> +++ b/tests/acpi-utils.h
> @@ -28,34 +28,34 @@ typedef struct {
>      bool tmp_files_retain;   /* do not delete the temp asl/aml */
>  } AcpiSdtTable;
>  
> -#define ACPI_READ_FIELD(field, addr)            \
> -    do {                                        \
> -        memread(addr, &field, sizeof(field));   \
> -        addr += sizeof(field);                  \
> +#define ACPI_READ_FIELD(qts, field, addr)                \
> +    do {                                                 \
> +        qtest_memread(qts, addr, &field, sizeof(field)); \
> +        addr += sizeof(field);                           \
>      } while (0)
>  
> -#define ACPI_READ_ARRAY_PTR(arr, length, addr)  \
> -    do {                                        \
> -        int idx;                                \
> -        for (idx = 0; idx < length; ++idx) {    \
> -            ACPI_READ_FIELD(arr[idx], addr);    \
> -        }                                       \
> +#define ACPI_READ_ARRAY_PTR(qts, arr, length, addr)      \
> +    do {                                                 \
> +        int idx;                                         \
> +        for (idx = 0; idx < length; ++idx) {             \
> +            ACPI_READ_FIELD(qts, arr[idx], addr);        \
> +        }                                                \
>      } while (0)
>  
> -#define ACPI_READ_ARRAY(arr, addr)                               \
> -    ACPI_READ_ARRAY_PTR(arr, sizeof(arr) / sizeof(arr[0]), addr)
> +#define ACPI_READ_ARRAY(qts, arr, addr)                                 \
> +    ACPI_READ_ARRAY_PTR(qts, arr, sizeof(arr) / sizeof(arr[0]), addr)
>  
> -#define ACPI_READ_TABLE_HEADER(table, addr)                      \
> +#define ACPI_READ_TABLE_HEADER(qts, table, addr)                 \
>      do {                                                         \
> -        ACPI_READ_FIELD((table)->signature, addr);               \
> -        ACPI_READ_FIELD((table)->length, addr);                  \
> -        ACPI_READ_FIELD((table)->revision, addr);                \
> -        ACPI_READ_FIELD((table)->checksum, addr);                \
> -        ACPI_READ_ARRAY((table)->oem_id, addr);                  \
> -        ACPI_READ_ARRAY((table)->oem_table_id, addr);            \
> -        ACPI_READ_FIELD((table)->oem_revision, addr);            \
> -        ACPI_READ_ARRAY((table)->asl_compiler_id, addr);         \
> -        ACPI_READ_FIELD((table)->asl_compiler_revision, addr);   \
> +        ACPI_READ_FIELD(qts, (table)->signature, addr);          \
> +        ACPI_READ_FIELD(qts, (table)->length, addr);             \
> +        ACPI_READ_FIELD(qts, (table)->revision, addr);           \
> +        ACPI_READ_FIELD(qts, (table)->checksum, addr);           \
> +        ACPI_READ_ARRAY(qts, (table)->oem_id, addr);             \
> +        ACPI_READ_ARRAY(qts, (table)->oem_table_id, addr);       \
> +        ACPI_READ_FIELD(qts, (table)->oem_revision, addr);       \
> +        ACPI_READ_ARRAY(qts, (table)->asl_compiler_id, addr);    \
> +        ACPI_READ_FIELD(qts, (table)->asl_compiler_revision, addr);     \
>      } while (0)
>  
>  #define ACPI_ASSERT_CMP(actual, expected) do { \
> @@ -70,18 +70,19 @@ typedef struct {
>      g_assert_cmpstr(ACPI_ASSERT_CMP_str, ==, expected); \
>  } while (0)
>  
> -#define ACPI_READ_GENERIC_ADDRESS(field, addr)       \
> -    do {                                             \
> -        ACPI_READ_FIELD((field).space_id, addr);     \
> -        ACPI_READ_FIELD((field).bit_width, addr);    \
> -        ACPI_READ_FIELD((field).bit_offset, addr);   \
> -        ACPI_READ_FIELD((field).access_width, addr); \
> -        ACPI_READ_FIELD((field).address, addr);      \
> +#define ACPI_READ_GENERIC_ADDRESS(qts, field, addr)       \
> +    do {                                                  \
> +        ACPI_READ_FIELD(qts, (field).space_id, addr);     \
> +        ACPI_READ_FIELD(qts, (field).bit_width, addr);    \
> +        ACPI_READ_FIELD(qts, (field).bit_offset, addr);   \
> +        ACPI_READ_FIELD(qts, (field).access_width, addr); \
> +        ACPI_READ_FIELD(qts, (field).address, addr);      \
>      } while (0)
>  
>  
>  uint8_t acpi_calc_checksum(const uint8_t *data, int len);
> -uint32_t acpi_find_rsdp_address(void);
> -void acpi_parse_rsdp_table(uint32_t addr, AcpiRsdpDescriptor *rsdp_table);
> +uint32_t acpi_find_rsdp_address(QTestState *qts);
> +void acpi_parse_rsdp_table(QTestState *qts, uint32_t addr,
> +                           AcpiRsdpDescriptor *rsdp_table);
>  
>  #endif  /* TEST_ACPI_UTILS_H */
> diff --git a/tests/bios-tables-test.c b/tests/bios-tables-test.c
> index d661d9b..fabbed9 100644
> --- a/tests/bios-tables-test.c
> +++ b/tests/bios-tables-test.c
> @@ -39,6 +39,7 @@ typedef struct {
>      struct smbios_21_entry_point smbios_ep_table;
>      uint8_t *required_struct_types;
>      int required_struct_types_len;
> +    QTestState *qts;
>  } test_data;
>  
>  static char disk[] = "tests/acpi-test-disk-XXXXXX";
> @@ -78,7 +79,7 @@ static void free_test_data(test_data *data)
>  
>  static void test_acpi_rsdp_address(test_data *data)
>  {
> -    uint32_t off = acpi_find_rsdp_address();
> +    uint32_t off = acpi_find_rsdp_address(data->qts);
>      g_assert_cmphex(off, <, 0x100000);
>      data->rsdp_addr = off;
>  }
> @@ -88,7 +89,7 @@ static void test_acpi_rsdp_table(test_data *data)
>      AcpiRsdpDescriptor *rsdp_table = &data->rsdp_table;
>      uint32_t addr = data->rsdp_addr;
>  
> -    acpi_parse_rsdp_table(addr, rsdp_table);
> +    acpi_parse_rsdp_table(data->qts, addr, rsdp_table);
>  
>      /* rsdp checksum is not for the whole table, but for the first 20 bytes */
>      g_assert(!acpi_calc_checksum((uint8_t *)rsdp_table, 20));
> @@ -104,7 +105,7 @@ static void test_acpi_rsdt_table(test_data *data)
>      uint32_t rsdt_table_length;
>  
>      /* read the header */
> -    ACPI_READ_TABLE_HEADER(rsdt_table, addr);
> +    ACPI_READ_TABLE_HEADER(data->qts, rsdt_table, addr);
>      ACPI_ASSERT_CMP(rsdt_table->signature, "RSDT");
>  
>      rsdt_table_length = le32_to_cpu(rsdt_table->length);
> @@ -116,7 +117,7 @@ static void test_acpi_rsdt_table(test_data *data)
>  
>      /* get the addresses of the tables pointed by rsdt */
>      tables = g_new0(uint32_t, tables_nr);
> -    ACPI_READ_ARRAY_PTR(tables, tables_nr, addr);
> +    ACPI_READ_ARRAY_PTR(data->qts, tables, tables_nr, addr);
>  
>      checksum = acpi_calc_checksum((uint8_t *)rsdt_table, rsdt_table_length) +
>                 acpi_calc_checksum((uint8_t *)tables,
> @@ -135,11 +136,11 @@ static void fadt_fetch_facs_and_dsdt_ptrs(test_data *data)
>  
>      /* FADT table comes first */
>      addr = le32_to_cpu(data->rsdt_tables_addr[0]);
> -    ACPI_READ_TABLE_HEADER(&hdr, addr);
> +    ACPI_READ_TABLE_HEADER(data->qts, &hdr, addr);
>      ACPI_ASSERT_CMP(hdr.signature, "FACP");
>  
> -    ACPI_READ_FIELD(data->facs_addr, addr);
> -    ACPI_READ_FIELD(data->dsdt_addr, addr);
> +    ACPI_READ_FIELD(data->qts, data->facs_addr, addr);
> +    ACPI_READ_FIELD(data->qts, data->dsdt_addr, addr);
>  }
>  
>  static void sanitize_fadt_ptrs(test_data *data)
> @@ -182,13 +183,13 @@ static void test_acpi_facs_table(test_data *data)
>      AcpiFacsDescriptorRev1 *facs_table = &data->facs_table;
>      uint32_t addr = le32_to_cpu(data->facs_addr);
>  
> -    ACPI_READ_FIELD(facs_table->signature, addr);
> -    ACPI_READ_FIELD(facs_table->length, addr);
> -    ACPI_READ_FIELD(facs_table->hardware_signature, addr);
> -    ACPI_READ_FIELD(facs_table->firmware_waking_vector, addr);
> -    ACPI_READ_FIELD(facs_table->global_lock, addr);
> -    ACPI_READ_FIELD(facs_table->flags, addr);
> -    ACPI_READ_ARRAY(facs_table->resverved3, addr);
> +    ACPI_READ_FIELD(data->qts, facs_table->signature, addr);
> +    ACPI_READ_FIELD(data->qts, facs_table->length, addr);
> +    ACPI_READ_FIELD(data->qts, facs_table->hardware_signature, addr);
> +    ACPI_READ_FIELD(data->qts, facs_table->firmware_waking_vector, addr);
> +    ACPI_READ_FIELD(data->qts, facs_table->global_lock, addr);
> +    ACPI_READ_FIELD(data->qts, facs_table->flags, addr);
> +    ACPI_READ_ARRAY(data->qts, facs_table->resverved3, addr);
>  
>      ACPI_ASSERT_CMP(facs_table->signature, "FACS");
>  }
> @@ -197,17 +198,17 @@ static void test_acpi_facs_table(test_data *data)
>   *   load ACPI table at @addr into table descriptor @sdt_table
>   *   and check that header checksum matches actual one.
>   */
> -static void fetch_table(AcpiSdtTable *sdt_table, uint32_t addr)
> +static void fetch_table(QTestState *qts, AcpiSdtTable *sdt_table, uint32_t addr)
>  {
>      uint8_t checksum;
>  
>      memset(sdt_table, 0, sizeof(*sdt_table));
> -    ACPI_READ_TABLE_HEADER(&sdt_table->header, addr);
> +    ACPI_READ_TABLE_HEADER(qts, &sdt_table->header, addr);
>  
>      sdt_table->aml_len = le32_to_cpu(sdt_table->header.length)
>                           - sizeof(AcpiTableHeader);
>      sdt_table->aml = g_malloc0(sdt_table->aml_len);
> -    ACPI_READ_ARRAY_PTR(sdt_table->aml, sdt_table->aml_len, addr);
> +    ACPI_READ_ARRAY_PTR(qts, sdt_table->aml, sdt_table->aml_len, addr);
>  
>      checksum = acpi_calc_checksum((uint8_t *)sdt_table,
>                                    sizeof(AcpiTableHeader)) +
> @@ -221,7 +222,7 @@ static void test_acpi_dsdt_table(test_data *data)
>      AcpiSdtTable dsdt_table;
>      uint32_t addr = le32_to_cpu(data->dsdt_addr);
>  
> -    fetch_table(&dsdt_table, addr);
> +    fetch_table(data->qts, &dsdt_table, addr);
>      ACPI_ASSERT_CMP(dsdt_table.header.signature, "DSDT");
>  
>      /* Since DSDT isn't in RSDT, add DSDT to ASL test tables list manually */
> @@ -239,7 +240,7 @@ static void fetch_rsdt_referenced_tables(test_data *data)
>          uint32_t addr;
>  
>          addr = le32_to_cpu(data->rsdt_tables_addr[i]);
> -        fetch_table(&ssdt_table, addr);
> +        fetch_table(data->qts, &ssdt_table, addr);
>  
>          /* Add table to ASL test tables list */
>          g_array_append_val(data->tables, ssdt_table);
> @@ -482,32 +483,32 @@ static bool smbios_ep_table_ok(test_data *data)
>      struct smbios_21_entry_point *ep_table = &data->smbios_ep_table;
>      uint32_t addr = data->smbios_ep_addr;
>  
> -    ACPI_READ_ARRAY(ep_table->anchor_string, addr);
> +    ACPI_READ_ARRAY(data->qts, ep_table->anchor_string, addr);
>      if (memcmp(ep_table->anchor_string, "_SM_", 4)) {
>          return false;
>      }
> -    ACPI_READ_FIELD(ep_table->checksum, addr);
> -    ACPI_READ_FIELD(ep_table->length, addr);
> -    ACPI_READ_FIELD(ep_table->smbios_major_version, addr);
> -    ACPI_READ_FIELD(ep_table->smbios_minor_version, addr);
> -    ACPI_READ_FIELD(ep_table->max_structure_size, addr);
> -    ACPI_READ_FIELD(ep_table->entry_point_revision, addr);
> -    ACPI_READ_ARRAY(ep_table->formatted_area, addr);
> -    ACPI_READ_ARRAY(ep_table->intermediate_anchor_string, addr);
> +    ACPI_READ_FIELD(data->qts, ep_table->checksum, addr);
> +    ACPI_READ_FIELD(data->qts, ep_table->length, addr);
> +    ACPI_READ_FIELD(data->qts, ep_table->smbios_major_version, addr);
> +    ACPI_READ_FIELD(data->qts, ep_table->smbios_minor_version, addr);
> +    ACPI_READ_FIELD(data->qts, ep_table->max_structure_size, addr);
> +    ACPI_READ_FIELD(data->qts, ep_table->entry_point_revision, addr);
> +    ACPI_READ_ARRAY(data->qts, ep_table->formatted_area, addr);
> +    ACPI_READ_ARRAY(data->qts, ep_table->intermediate_anchor_string, addr);
>      if (memcmp(ep_table->intermediate_anchor_string, "_DMI_", 5)) {
>          return false;
>      }
> -    ACPI_READ_FIELD(ep_table->intermediate_checksum, addr);
> -    ACPI_READ_FIELD(ep_table->structure_table_length, addr);
> +    ACPI_READ_FIELD(data->qts, ep_table->intermediate_checksum, addr);
> +    ACPI_READ_FIELD(data->qts, ep_table->structure_table_length, addr);
>      if (ep_table->structure_table_length == 0) {
>          return false;
>      }
> -    ACPI_READ_FIELD(ep_table->structure_table_address, addr);
> -    ACPI_READ_FIELD(ep_table->number_of_structures, addr);
> +    ACPI_READ_FIELD(data->qts, ep_table->structure_table_address, addr);
> +    ACPI_READ_FIELD(data->qts, ep_table->number_of_structures, addr);
>      if (ep_table->number_of_structures == 0) {
>          return false;
>      }
> -    ACPI_READ_FIELD(ep_table->smbios_bcd_revision, addr);
> +    ACPI_READ_FIELD(data->qts, ep_table->smbios_bcd_revision, addr);
>      if (acpi_calc_checksum((uint8_t *)ep_table, sizeof *ep_table) ||
>          acpi_calc_checksum((uint8_t *)ep_table + 0x10,
>                             sizeof *ep_table - 0x10)) {
> @@ -526,7 +527,7 @@ static void test_smbios_entry_point(test_data *data)
>          int i;
>  
>          for (i = 0; i < sizeof sig - 1; ++i) {
> -            sig[i] = readb(off + i);
> +            sig[i] = qtest_readb(data->qts, off + i);
>          }
>  
>          if (!memcmp(sig, "_SM_", sizeof sig)) {
> @@ -569,9 +570,9 @@ static void test_smbios_structs(test_data *data)
>      for (i = 0; i < le16_to_cpu(ep_table->number_of_structures); i++) {
>  
>          /* grab type and formatted area length from struct header */
> -        type = readb(addr);
> +        type = qtest_readb(data->qts, addr);
>          g_assert_cmpuint(type, <=, SMBIOS_MAX_TYPE);
> -        len = readb(addr + 1);
> +        len = qtest_readb(data->qts, addr + 1);
>  
>          /* single-instance structs must not have been encountered before */
>          if (smbios_single_instance(type)) {
> @@ -583,7 +584,7 @@ static void test_smbios_structs(test_data *data)
>          prv = crt = 1;
>          while (prv || crt) {
>              prv = crt;
> -            crt = readb(addr + len);
> +            crt = qtest_readb(data->qts, addr + len);
>              len++;
>          }
>  
> @@ -620,9 +621,9 @@ static void test_acpi_one(const char *params, test_data *data)
>                             data->machine, "kvm:tcg",
>                             params ? params : "", disk);
>  
> -    qtest_start(args);
> +    data->qts = qtest_init(args);
>  
> -    boot_sector_test(global_qtest);
> +    boot_sector_test(data->qts);
>  
>      data->tables = g_array_new(false, true, sizeof(AcpiSdtTable));
>      test_acpi_rsdp_address(data);
> @@ -646,7 +647,8 @@ static void test_acpi_one(const char *params, test_data *data)
>      test_smbios_entry_point(data);
>      test_smbios_structs(data);
>  
> -    qtest_quit(global_qtest);
> +    assert(!global_qtest);
> +    qtest_quit(data->qts);
>      g_free(args);
>  }
>  
> diff --git a/tests/vmgenid-test.c b/tests/vmgenid-test.c
> index 0a6fb55..c9c4f8c 100644
> --- a/tests/vmgenid-test.c
> +++ b/tests/vmgenid-test.c
> @@ -31,7 +31,7 @@ typedef struct {
>      uint32_t vgia_val;
>  } QEMU_PACKED VgidTable;
>  
> -static uint32_t acpi_find_vgia(void)
> +static uint32_t acpi_find_vgia(QTestState *qts)
>  {
>      uint32_t rsdp_offset;
>      uint32_t guid_offset = 0;
> @@ -45,18 +45,18 @@ static uint32_t acpi_find_vgia(void)
>      int i;
>  
>      /* Wait for guest firmware to finish and start the payload. */
> -    boot_sector_test(global_qtest);
> +    boot_sector_test(qts);
>  
>      /* Tables should be initialized now. */
> -    rsdp_offset = acpi_find_rsdp_address();
> +    rsdp_offset = acpi_find_rsdp_address(qts);
>  
>      g_assert_cmphex(rsdp_offset, <, RSDP_ADDR_INVALID);
>  
> -    acpi_parse_rsdp_table(rsdp_offset, &rsdp_table);
> +    acpi_parse_rsdp_table(qts, rsdp_offset, &rsdp_table);
>  
>      rsdt = le32_to_cpu(rsdp_table.rsdt_physical_address);
>      /* read the header */
> -    ACPI_READ_TABLE_HEADER(&rsdt_table, rsdt);
> +    ACPI_READ_TABLE_HEADER(qts, &rsdt_table, rsdt);
>      ACPI_ASSERT_CMP(rsdt_table.signature, "RSDT");
>      rsdt_table_length = le32_to_cpu(rsdt_table.length);
>  
> @@ -67,22 +67,22 @@ static uint32_t acpi_find_vgia(void)
>  
>      /* get the addresses of the tables pointed by rsdt */
>      tables = g_new0(uint32_t, tables_nr);
> -    ACPI_READ_ARRAY_PTR(tables, tables_nr, rsdt);
> +    ACPI_READ_ARRAY_PTR(qts, tables, tables_nr, rsdt);
>  
>      for (i = 0; i < tables_nr; i++) {
>          uint32_t addr = le32_to_cpu(tables[i]);
> -        ACPI_READ_TABLE_HEADER(&ssdt_table, addr);
> +        ACPI_READ_TABLE_HEADER(qts, &ssdt_table, addr);
>          if (!strncmp((char *)ssdt_table.oem_table_id, "VMGENID", 7)) {
>              /* the first entry in the table should be VGIA
>               * That's all we need
>               */
> -            ACPI_READ_FIELD(vgid_table.name_op, addr);
> +            ACPI_READ_FIELD(qts, vgid_table.name_op, addr);
>              g_assert(vgid_table.name_op == 0x08);  /* name */
> -            ACPI_READ_ARRAY(vgid_table.vgia, addr);
> +            ACPI_READ_ARRAY(qts, vgid_table.vgia, addr);
>              g_assert(memcmp(vgid_table.vgia, "VGIA", 4) == 0);
> -            ACPI_READ_FIELD(vgid_table.val_op, addr);
> +            ACPI_READ_FIELD(qts, vgid_table.val_op, addr);
>              g_assert(vgid_table.val_op == 0x0C);  /* dword */
> -            ACPI_READ_FIELD(vgid_table.vgia_val, addr);
> +            ACPI_READ_FIELD(qts, vgid_table.vgia_val, addr);
>              /* The GUID is written at a fixed offset into the fw_cfg file
>               * in order to implement the "OVMF SDT Header probe suppressor"
>               * see docs/specs/vmgenid.txt for more details
> @@ -100,7 +100,7 @@ static void read_guid_from_memory(QemuUUID *guid)
>      uint32_t vmgenid_addr;
>      int i;
>  
> -    vmgenid_addr = acpi_find_vgia();
> +    vmgenid_addr = acpi_find_vgia(global_qtest);
>      g_assert(vmgenid_addr);
>  
>      /* Read the GUID directly from guest memory */


