Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  14 Dec 2018 08:37:23 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 96A2B58079D
	for <like.xu@linux.intel.com>; Thu, 13 Dec 2018 06:25:53 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga006-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 13 Dec 2018 06:25:53 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AxbODnRHlOF3oIxbbulSL051GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ7yr8mwAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95fWSJBHI2y?=
 =?us-ascii?q?bIkAD+QOMulEoIfzukMOoBm8CwSjGe/ixCNEiWHt3aAhz+QhCBvL0BA8E94Ssn?=
 =?us-ascii?q?nZqsj+OqcIUeCyyanF1TbNb/xR2Tfn9YPGdQouofSJXb1ubMXRzlcvHB7Cg1WR?=
 =?us-ascii?q?rIzqJTaV1uETvGeG6OptTvivhHA6pAFxuDev2t0ghZXOhoIQ013J8zhyzoUtJd?=
 =?us-ascii?q?CgVkJ3fd2pHIFNuy2HNIZ6WN0uTm9otSog17ELu4a3cDYWxJkj3RLTdvKKf5aS?=
 =?us-ascii?q?7h7+V+ucLy10iGxmdb+5mh2861KvyvfmWcmxyFtKrjRKkt3Ltn0V0xzT69OHSu?=
 =?us-ascii?q?dm/ku71jaP0R3T5vtDIUAumqrXM58hwrgumZoPqUnPADP6lUbsgKOLa0kp+fKk?=
 =?us-ascii?q?5/rpb7jmvJOQKo15hhn7Mqs0m8y/Beo4MhIJX2ie4em8zaPs/UjkQLlTk/I5jL?=
 =?us-ascii?q?fZv47eJcgCvaG5BBJV0oA/5BmhFDeq19AYnXgELF1bYh6GgJXpNknKIPD5C/e/?=
 =?us-ascii?q?nlutnC1qx/DAIr3uHJHNImLfn7fmeLZw8EhcyA01zdBQ4ZJUF6sNIPXpWk/+rN?=
 =?us-ascii?q?DYFAM2MxSow+b7D9VwzoceWWOMAqCHKq/TvkKI6/krI+mNYo8VpTn8J+Ik5/7o?=
 =?us-ascii?q?kX82h1sdcbO10psQbXDrVslgOFiTNHrwns8aQyBNugslUPesjlqEXjhOIXGoUO?=
 =?us-ascii?q?U57zA/DYugSoDbWoGqhqfGxSq+A9haa35LDgOxF2z1fdCBUvYIdCXAO8Jkj3kI?=
 =?us-ascii?q?WKasT8o72AizuRTm47xgKOXS52sfr520z8V/5eDYiUQv8ydpBd+WyWCHQjJImT?=
 =?us-ascii?q?YtTiU9mYl5rVb8gnOey6VxnrQMENVJ7PpPXh03c5rB1eFzFvjoVw7Bd8vPQ1Gj?=
 =?us-ascii?q?FIaIGzY0G/M+xMVGRk94HtiuiQ6LiyuvCroQmrCMLIY5/qLVwz76IMMrmCWO77?=
 =?us-ascii?q?Uok1RzGpgHDmahnKMqslGLX4M=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BwAABraxJcmBHrdtBjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBVAQBAQsBgTCCTxODfIh4jUB8iCWOR4FiERgUhECDBCI3Bg0BAwEBAQEBAQI?=
 =?us-ascii?q?BEwEBAQEBCAsLBhsOL4I2BQIDGgEGglsBAQEBAgEBAiAEHwopAwIBAQIGAQEKG?=
 =?us-ascii?q?AICBR0EAgIDAQs6AQ0GEwWDHIF0BQgBBKZ0fDOFQIRwgQuIaYJIF4FAP4ERgl0?=
 =?us-ascii?q?1ghCCWheDBIJXAok/gXOEFZFICZFOCxiJbIdemUmBXIF4TSMVgyeCJxeOHkAxg?=
 =?us-ascii?q?QccijWBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0BwAABraxJcmBHrdtBjHAEBAQQBAQcEAQGBVAQBAQsBgTC?=
 =?us-ascii?q?CTxODfIh4jUB8iCWOR4FiERgUhECDBCI3Bg0BAwEBAQEBAQIBEwEBAQEBCAsLB?=
 =?us-ascii?q?hsOL4I2BQIDGgEGglsBAQEBAgEBAiAEHwopAwIBAQIGAQEKGAICBR0EAgIDAQs?=
 =?us-ascii?q?6AQ0GEwWDHIF0BQgBBKZ0fDOFQIRwgQuIaYJIF4FAP4ERgl01ghCCWheDBIJXA?=
 =?us-ascii?q?ok/gXOEFZFICZFOCxiJbIdemUmBXIF4TSMVgyeCJxeOHkAxgQccijWBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,349,1539673200"; 
   d="scan'208";a="66674622"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mga01b.intel.com with ESMTP/TLS/AES256-SHA; 13 Dec 2018 06:25:52 -0800
Received: from localhost ([::1]:52897 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gXRvz-0001a0-T8
	for like.xu@linux.intel.com; Thu, 13 Dec 2018 09:25:51 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:53195)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <imammedo@redhat.com>) id 1gXRul-0000qW-KJ
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 09:24:41 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <imammedo@redhat.com>) id 1gXRug-0006pl-BE
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 09:24:35 -0500
Received: from mx1.redhat.com ([209.132.183.28]:51678)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <imammedo@redhat.com>) id 1gXRuf-0006nw-RQ
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 09:24:30 -0500
Received: from smtp.corp.redhat.com (int-mx08.intmail.prod.int.phx2.redhat.com
	[10.5.11.23])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id E625E30041F8;
	Thu, 13 Dec 2018 14:24:28 +0000 (UTC)
Received: from localhost (unknown [10.43.2.182])
	by smtp.corp.redhat.com (Postfix) with ESMTP id 7EFDC25262;
	Thu, 13 Dec 2018 14:24:18 +0000 (UTC)
Date: Thu, 13 Dec 2018 15:24:17 +0100
From: Igor Mammedov <imammedo@redhat.com>
To: =?UTF-8?B?TWFyYy1BbmRyw6k=?= Lureau <marcandre.lureau@redhat.com>
Message-ID: <20181213152417.3add33cd@redhat.com>
In-Reply-To: <CAMxuvayALT-jFsQxjLuO18Gz8y3444ZtJLx0wt4GzpV3nnUbnQ@mail.gmail.com>
References: <20180910083222.8245-1-marcandre.lureau@redhat.com>
	<20180910083222.8245-7-marcandre.lureau@redhat.com>
	<62b5734c-c23e-cfc2-701e-45692a7f1bd1@redhat.com>
	<20181213130130.40a31420@redhat.com>
	<CAMxuvayALT-jFsQxjLuO18Gz8y3444ZtJLx0wt4GzpV3nnUbnQ@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
X-Scanned-By: MIMEDefang 2.84 on 10.5.11.23
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.43]);
	Thu, 13 Dec 2018 14:24:29 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH v12 6/6] tpm: add ACPI memory clear
 interface
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Eduardo Habkost <ehabkost@redhat.com>,
	"Michael S . Tsirkin" <mst@redhat.com>, Laszlo Ersek <lersek@redhat.com>,
	Stefan Berger <stefanb@linux.vnet.ibm.com>,
	qemu-devel <qemu-devel@nongnu.org>, "Bonzini, Paolo" <pbonzini@redhat.com>,
	Philippe Mathieu Daude <philmd@redhat.com>,
	Richard Henderson <rth@twiddle.net>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Thu, 13 Dec 2018 16:18:09 +0400
Marc-Andr=C3=A9 Lureau <marcandre.lureau@redhat.com> wrote:

> On Thu, Dec 13, 2018 at 4:01 PM Igor Mammedov <imammedo@redhat.com> wrote:
> >
> > On Wed, 12 Dec 2018 17:22:21 +0100
> > Philippe Mathieu-Daud=C3=A9 <philmd@redhat.com> wrote:
> > =20
> > > On 9/10/18 10:32 AM, Marc-Andr=C3=A9 Lureau wrote: =20
> > > > This allows to pass the last failing test from the Windows HLK TPM =
2.0
> > > > TCG PPI 1.3 tests.
> > > >
> > > > The interface is described in the "TCG Platform Reset Attack
> > > > Mitigation Specification", chapter 6 "ACPI _DSM Function". According
> > > > to Laszlo, it's not so easy to implement in OVMF, he suggested to do
> > > > it in qemu instead.
> > > >
> > > > Signed-off-by: Marc-Andr=C3=A9 Lureau <marcandre.lureau@redhat.com>
> > > > ---
> > > >  hw/tpm/tpm_ppi.h     |  2 ++
> > > >  hw/i386/acpi-build.c | 46 ++++++++++++++++++++++++++++++++++++++++=
++++
> > > >  hw/tpm/tpm_crb.c     |  1 +
> > > >  hw/tpm/tpm_ppi.c     | 22 +++++++++++++++++++++
> > > >  hw/tpm/tpm_tis.c     |  1 +
> > > >  docs/specs/tpm.txt   |  2 ++
> > > >  hw/tpm/trace-events  |  3 +++
> > > >  7 files changed, 77 insertions(+)
> > > >
> > > > diff --git a/hw/tpm/tpm_ppi.h b/hw/tpm/tpm_ppi.h
> > > > index c2ab2ed300..b8f67962c7 100644
> > > > --- a/hw/tpm/tpm_ppi.h
> > > > +++ b/hw/tpm/tpm_ppi.h
> > > > @@ -23,4 +23,6 @@ typedef struct TPMPPI {
> > > >  bool tpm_ppi_init(TPMPPI *tpmppi, struct MemoryRegion *m,
> > > >                    hwaddr addr, Object *obj, Error **errp);
> > > > =20
> > >
> > > Can you add documentation?
> > > =20
> > > > +void tpm_ppi_reset(TPMPPI *tpmppi);
> > > > +
> > > >  #endif /* TPM_TPM_PPI_H */
> > > > diff --git a/hw/i386/acpi-build.c b/hw/i386/acpi-build.c
> > > > index c5e9a6e11d..2ab3e8fae7 100644
> > > > --- a/hw/i386/acpi-build.c
> > > > +++ b/hw/i386/acpi-build.c
> > > > @@ -1824,6 +1824,13 @@ build_tpm_ppi(TPMIf *tpm, Aml *dev)
> > > >      pprq =3D aml_name("PPRQ");
> > > >      pprm =3D aml_name("PPRM");
> > > >
> > > > +    aml_append(dev,
> > > > +               aml_operation_region("TPP3", AML_SYSTEM_MEMORY,
> > > > +                                    aml_int(TPM_PPI_ADDR_BASE + 0x=
15a), =20
> > >
> > > Can you add a definition for this magic value?
> > > Maybe:
> > >
> > > #define TPM_PPI_MEMORY_OVERWRITE_OFFSET 0x15a
> > >
> > > or
> > >
> > > #define TPM_PPI_MOVV_OFFSET 0x15a =20
> > I'd prefer explicit numeric values there as it's a bit easier to review
> > and grep in 'spec' since one doesn't have to jump to define definition
> > first to find out value to compare with spec.
> > What I'd add though is verbatim comment from spec like we do
> > in APCI code so we could jump to the field of interest in spec
> > just doing copy&paste&search =20
>=20
> I don't mind.
> Philippe, are you okay going back to numeric values?
>=20
> Igor, is this comment what you would expect where the 0x15a value is used:
> /* 0x15a: movv field in ACPI PPI Interface, see specs/tpm.txt */
>=20
usually field name is sufficient, so something like:
 foo(0.15a /* movv, docs/specs/tpm.txt */)


> thanks
> > =20
> > > =20
> > > > +                                    0x1));
> > > > +    field =3D aml_field("TPP3", AML_BYTE_ACC, AML_NOLOCK, AML_PRES=
ERVE);
> > > > +    aml_append(field, aml_named_field("MOVV", 8));
> > > > +    aml_append(dev, field);
> > > >      /*
> > > >       * DerefOf in Windows is broken with SYSTEM_MEMORY.  Use a dyn=
amic
> > > >       * operation region inside of a method for getting FUNC[op].
> > > > @@ -2166,7 +2173,46 @@ build_tpm_ppi(TPMIf *tpm, Aml *dev)
> > > >              aml_append(ifctx, aml_return(aml_buffer(1, zerobyte)));
> > > >          }
> > > >          aml_append(method, ifctx);
> > > > +
> > > > +        ifctx =3D aml_if(
> > > > +            aml_equal(uuid,
> > > > +                      aml_touuid("376054ED-CC13-4675-901C-4756D7F2=
D45D")));
> > > > +        {
> > > > +            /* standard DSM query function */
> > > > +            ifctx2 =3D aml_if(aml_equal(function, zero));
> > > > +            {
> > > > +                uint8_t byte_list[1] =3D { 0x03 };
> > > > +                aml_append(ifctx2, aml_return(aml_buffer(1, byte_l=
ist)));
> > > > +            }
> > > > +            aml_append(ifctx, ifctx2);
> > > > +
> > > > +            /*
> > > > +             * TCG Platform Reset Attack Mitigation Specification =
1.0 Ch.6
> > > > +             *
> > > > +             * Arg 2 (Integer): Function Index =3D 1
> > > > +             * Arg 3 (Package): Arguments =3D Package: Type: Integ=
er
> > > > +             *                  Operation Value of the Request
> > > > +             * Returns: Type: Integer
> > > > +             *          0: Success
> > > > +             *          1: General Failure
> > > > +             */
> > > > +            ifctx2 =3D aml_if(aml_equal(function, one));
> > > > +            {
> > > > +                aml_append(ifctx2,
> > > > +                           aml_store(aml_derefof(aml_index(argumen=
ts, zero)),
> > > > +                                     op));
> > > > +                {
> > > > +                    aml_append(ifctx2, aml_store(op, aml_name("MOV=
V")));
> > > > +
> > > > +                    /* 0: success */
> > > > +                    aml_append(ifctx2, aml_return(zero));
> > > > +                }
> > > > +            }
> > > > +            aml_append(ifctx, ifctx2);
> > > > +        }
> > > > +        aml_append(method, ifctx);
> > > >      }
> > > > +
> > > >      aml_append(dev, method);
> > > >  }
> > > >
> > > > diff --git a/hw/tpm/tpm_crb.c b/hw/tpm/tpm_crb.c
> > > > index b243222fd6..48f6a716ad 100644
> > > > --- a/hw/tpm/tpm_crb.c
> > > > +++ b/hw/tpm/tpm_crb.c
> > > > @@ -233,6 +233,7 @@ static void tpm_crb_reset(void *dev)
> > > >  {
> > > >      CRBState *s =3D CRB(dev);
> > > >
> > > > +    tpm_ppi_reset(&s->ppi);
> > > >      tpm_backend_reset(s->tpmbe);
> > > >
> > > >      memset(s->regs, 0, sizeof(s->regs));
> > > > diff --git a/hw/tpm/tpm_ppi.c b/hw/tpm/tpm_ppi.c
> > > > index f2f07f895e..ac05ba8d3c 100644
> > > > --- a/hw/tpm/tpm_ppi.c
> > > > +++ b/hw/tpm/tpm_ppi.c
> > > > @@ -16,8 +16,30 @@
> > > >  #include "qapi/error.h"
> > > >  #include "cpu.h"
> > > >  #include "sysemu/memory_mapping.h"
> > > > +#include "sysemu/reset.h"
> > > >  #include "migration/vmstate.h"
> > > >  #include "tpm_ppi.h"
> > > > +#include "trace.h"
> > > > +
> > > > +void tpm_ppi_reset(TPMPPI *tpmppi)
> > > > +{
> > > > +    if (tpmppi->buf[0x15a] & 0x1) { =20
> > >
> > > TPM_PPI_MOVV_OFFSET
> > > =20
> > > > +        GuestPhysBlockList guest_phys_blocks;
> > > > +        GuestPhysBlock *block;
> > > > +
> > > > +        guest_phys_blocks_init(&guest_phys_blocks);
> > > > +        guest_phys_blocks_append(&guest_phys_blocks);
> > > > +        QTAILQ_FOREACH(block, &guest_phys_blocks.head, next) {
> > > > +            trace_tpm_ppi_memset(block->host_addr,
> > > > +                             block->target_end - block->target_sta=
rt);
> > > > +            memset(block->host_addr, 0,
> > > > +                   block->target_end - block->target_start);
> > > > +            memory_region_set_dirty(block->mr, 0,
> > > > +                                    block->target_end - block->tar=
get_start);
> > > > +        }
> > > > +        guest_phys_blocks_free(&guest_phys_blocks);
> > > > +    }
> > > > +}
> > > >
> > > >  bool tpm_ppi_init(TPMPPI *tpmppi, struct MemoryRegion *m,
> > > >                    hwaddr addr, Object *obj, Error **errp)
> > > > diff --git a/hw/tpm/tpm_tis.c b/hw/tpm/tpm_tis.c
> > > > index 70432ffe8b..d9bfa956cc 100644
> > > > --- a/hw/tpm/tpm_tis.c
> > > > +++ b/hw/tpm/tpm_tis.c
> > > > @@ -868,6 +868,7 @@ static void tpm_tis_reset(DeviceState *dev)
> > > >      s->be_buffer_size =3D MIN(tpm_backend_get_buffer_size(s->be_dr=
iver),
> > > >                              TPM_TIS_BUFFER_MAX);
> > > >
> > > > +    tpm_ppi_reset(&s->ppi);
> > > >      tpm_backend_reset(s->be_driver);
> > > >
> > > >      s->active_locty =3D TPM_TIS_NO_LOCALITY;
> > > > diff --git a/docs/specs/tpm.txt b/docs/specs/tpm.txt
> > > > index 332c2ae597..ce9bda3c89 100644
> > > > --- a/docs/specs/tpm.txt
> > > > +++ b/docs/specs/tpm.txt
> > > > @@ -121,6 +121,8 @@ layout:
> > > >   +----------+--------+--------+-----------------------------------=
--------+
> > > >   | next_step|   0x1  |  0x159 | Operation to execute after reboot =
by      |
> > > >   |          |        |        | firmware. Used by firmware.       =
        |
> > > > + +----------+--------+--------+-----------------------------------=
--------+
> > > > + | movv     |   0x1  |  0x15a | Memory overwrite variable         =
        |
> > > >   +----------+--------+--------+-----------------------------------=
--------+
> > > >
> > > >     The following values are supported for the 'func' field. They c=
orrespond
> > > > diff --git a/hw/tpm/trace-events b/hw/tpm/trace-events
> > > > index 25bee0cecf..920d32ad55 100644
> > > > --- a/hw/tpm/trace-events
> > > > +++ b/hw/tpm/trace-events
> > > > @@ -51,3 +51,6 @@ tpm_tis_mmio_write_init_abort(void) "Initiating a=
bort"
> > > >  tpm_tis_mmio_write_lowering_irq(void) "Lowering IRQ"
> > > >  tpm_tis_mmio_write_data2send(uint32_t value, unsigned size) "Data =
to send to TPM: 0x%08x (size=3D%d)"
> > > >  tpm_tis_pre_save(uint8_t locty, uint32_t rw_offset) "locty: %d, rw=
_offset =3D %u"
> > > > +
> > > > +# hw/tpm/tpm_ppi.c
> > > > +tpm_ppi_memset(uint8_t *ptr, size_t size) "memset: %p %zu"
> > > > =20
> > >
> > > I'd split this patch in 2: Add ACPI, Add tpm_ppi_reset. =20
> > =20
>=20


