Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  17 Dec 2018 16:15:13 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 68C2B5805E2
	for <like.xu@linux.intel.com>; Mon, 17 Dec 2018 00:02:49 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga005-1.jf.intel.com with ESMTP; 17 Dec 2018 00:02:49 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A69tpKxU0ZMgoOujAAm9PdM+N0NbV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYbRODt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZDI2y?=
 =?us-ascii?q?b5UBAekDMuZWoIbyu1QAowamBQSuBu3ixSJEi3Hq0aIkyOQsCh3G0Q46Et4SrH?=
 =?us-ascii?q?jYsMv5OaEPWu611qnIyjDDYutV1zfy74jIaA0qr/aWUrJ1dMre11QgFwTbjl6N?=
 =?us-ascii?q?roHlPjaV2f4Is2ie8eVvSOWvhnU9qw5vvzevxt0jipXTio0JzVDE8Dx0zYAoLt?=
 =?us-ascii?q?O7UE52ecCoHIdTui2AKod6X8AvT3t2tCs0yrAKo4O3cSoSxJg52xLSb+aLf5WG?=
 =?us-ascii?q?7x79TuqdPDR1iXx/dL6hhBu/91WrxPfmWcmuyllKqzJIktnSuXAJ0Bze8syHSv?=
 =?us-ascii?q?pm/ke9wjaDzQ/T6udZIUwukqrbMZEhzqYxlpoVr0vDAjf7lFvqgKKVbEko5/Wk?=
 =?us-ascii?q?5uf9brn4qJKRN5V4hhz8P6g2n8ywG+U4MgwAX2iB/uS80aXu/VTnT7VPk/06i7?=
 =?us-ascii?q?TWv47EJcsFoq61GhRa0oE+6xa5Ezipzs8YkX4DLFJEexKIkZLlOl7TIP3gCfe/?=
 =?us-ascii?q?glKskCpkxvzcP73hBInNIWbHkLv7Ybl97EtcxRE1zdBY4ZJUBbcBIO/pVk/2rt?=
 =?us-ascii?q?zYAQc1MxaozOb/FNV9yoQeVHqLAq+YM6Pdr0WE5+0yI+SXYI8VuTD9K+Uq5vL0?=
 =?us-ascii?q?jH85n0Mdcret3ZcNdH+4GfFmcA2kZ2HxiIIBDXsSpVh5C+jrk0GZFzhUYXm0Qu?=
 =?us-ascii?q?Q7/D58DYunCYLKQMeqmKCA2yGgWYRbY30DBl2SHHO7SoOfRv1ZbSuTJtNmwCUJ?=
 =?us-ascii?q?UKXkR4I/2BXrrgLj1rd8MsLS/SsXs4+l08J6sPbOnxM//iAhEsKGzmuWRHt1lG?=
 =?us-ascii?q?5bezhj8KlhoEA16laH3aV+ieZRE9Abs/9ATAY2HYTRw+xzF5b5XQeXLfmTT1Pz?=
 =?us-ascii?q?Y9qhG3kUR9c0ztMJfQ4pGtCrixXO0y2CGbIZl7WXQpcz9/SPjDDKO89hxiOeh+?=
 =?us-ascii?q?EahF48T54KbDX+iw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0DFAwDBVhdchxHrdtBkHQEBBQEHBQGBZ?=
 =?us-ascii?q?QKBL4JPE4x0ixaCDYkjkCgUGBSHUyI4EgEDAQEBAQEBAgETAQEBCgsJCBsOL0I?=
 =?us-ascii?q?BDgGBZAUCAxoBBoJcAQICAQECJBMMCikDAgEBAgYBAQohHQgDAQtIBhMFgx2Bd?=
 =?us-ascii?q?AUIAQSoQjOCTIdRjD4XgUA/gRGBcIEiimACiUKGUpEFCZFPI4FdhRyCeodfgwq?=
 =?us-ascii?q?WWoFdgXdNIxU7gmyCJxcSjgxAMYEHHIUphjOBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0DFAwDBVhdchxHrdtBkHQEBBQEHBQGBZQKBL4JPE4x0ixa?=
 =?us-ascii?q?CDYkjkCgUGBSHUyI4EgEDAQEBAQEBAgETAQEBCgsJCBsOL0IBDgGBZAUCAxoBB?=
 =?us-ascii?q?oJcAQICAQECJBMMCikDAgEBAgYBAQohHQgDAQtIBhMFgx2BdAUIAQSoQjOCTId?=
 =?us-ascii?q?RjD4XgUA/gRGBcIEiimACiUKGUpEFCZFPI4FdhRyCeodfgwqWWoFdgXdNIxU7g?=
 =?us-ascii?q?myCJxcSjgxAMYEHHIUphjOBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,364,1539673200"; 
   d="scan'208";a="44315232"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 17 Dec 2018 00:01:48 -0800
Received: from localhost ([::1]:45294 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gYnqV-0005Lg-UE
	for like.xu@linux.intel.com; Mon, 17 Dec 2018 03:01:47 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:51566)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <imammedo@redhat.com>) id 1gYnq8-0005LL-Oe
	for qemu-devel@nongnu.org; Mon, 17 Dec 2018 03:01:25 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <imammedo@redhat.com>) id 1gYnq2-0007J3-IB
	for qemu-devel@nongnu.org; Mon, 17 Dec 2018 03:01:24 -0500
Received: from mx1.redhat.com ([209.132.183.28]:38004)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <imammedo@redhat.com>) id 1gYnpz-0007Dy-SF
	for qemu-devel@nongnu.org; Mon, 17 Dec 2018 03:01:17 -0500
Received: from smtp.corp.redhat.com (int-mx07.intmail.prod.int.phx2.redhat.com
	[10.5.11.22])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 2E51C461CD;
	Mon, 17 Dec 2018 08:01:13 +0000 (UTC)
Received: from Igors-MacBook-Pro.local (ovpn-112-32.ams2.redhat.com
	[10.36.112.32])
	by smtp.corp.redhat.com (Postfix) with ESMTP id B7DAF1055006;
	Mon, 17 Dec 2018 08:01:06 +0000 (UTC)
Date: Mon, 17 Dec 2018 09:00:59 +0100
From: Igor Mammedov <imammedo@redhat.com>
To: David Hildenbrand <david@redhat.com>
Message-ID: <20181217090104.3f113551@Igors-MacBook-Pro.local>
In-Reply-To: <20181214131043.25071-3-david@redhat.com>
References: <20181214131043.25071-1-david@redhat.com>
	<20181214131043.25071-3-david@redhat.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
X-Scanned-By: MIMEDefang 2.84 on 10.5.11.22
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.29]);
	Mon, 17 Dec 2018 08:01:13 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH v5 2/2] memory-device: rewrite address
 assignment using ranges
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: "Dr . David Alan Gilbert" <dgilbert@redhat.com>,
	David Gibson <david@gibson.dropbear.id.au>,
	qemu-devel@nongnu.org, Eduardo Habkost <ehabkost@redhat.com>,
	"Michael S . Tsirkin" <mst@redhat.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Fri, 14 Dec 2018 14:10:43 +0100
David Hildenbrand <david@redhat.com> wrote:

> Let's rewrite it properly using ranges. This fixes certain overflows that
> are right now possible. E.g.
> 
> qemu-system-x86_64 -m 4G,slots=20,maxmem=40G -M pc \
>     -object memory-backend-file,id=mem1,share,mem-path=/dev/zero,size=2G
>     -device pc-dimm,memdev=mem1,id=dimm1,addr=-0x40000000
> 
> Now properly errors out instead of succeeding. (Note that qapi
> parsing of huge uint64_t values is broken and fixes are on the way)
> 
> "can't add memory device [0xffffffffa0000000:0x80000000], usable range for
> memory devices [0x140000000:0xe00000000]"
> 
> Signed-off-by: David Hildenbrand <david@redhat.com>

Reviewed-by: Igor Mammedov <imammedo@redhat.com>

> ---
>  hw/mem/memory-device.c | 51 +++++++++++++++++++++---------------------
>  1 file changed, 26 insertions(+), 25 deletions(-)
> 
> diff --git a/hw/mem/memory-device.c b/hw/mem/memory-device.c
> index 8be63c8032..5f2c408036 100644
> --- a/hw/mem/memory-device.c
> +++ b/hw/mem/memory-device.c
> @@ -100,9 +100,8 @@ static uint64_t memory_device_get_free_addr(MachineState *ms,
>                                              uint64_t align, uint64_t size,
>                                              Error **errp)
>  {
> -    uint64_t address_space_start, address_space_end;
>      GSList *list = NULL, *item;
> -    uint64_t new_addr = 0;
> +    Range as, new = range_empty;
>  
>      if (!ms->device_memory) {
>          error_setg(errp, "memory devices (e.g. for memory hotplug) are not "
> @@ -115,13 +114,11 @@ static uint64_t memory_device_get_free_addr(MachineState *ms,
>                           "enabled, please specify the maxmem option");
>          return 0;
>      }
> -    address_space_start = ms->device_memory->base;
> -    address_space_end = address_space_start +
> -                        memory_region_size(&ms->device_memory->mr);
> -    g_assert(address_space_end >= address_space_start);
> +    range_init_nofail(&as, ms->device_memory->base,
> +                      memory_region_size(&ms->device_memory->mr));
>  
> -    /* address_space_start indicates the maximum alignment we expect */
> -    if (!QEMU_IS_ALIGNED(address_space_start, align)) {
> +    /* start of address space indicates the maximum alignment we expect */
> +    if (!QEMU_IS_ALIGNED(range_lob(&as), align)) {
>          error_setg(errp, "the alignment (0x%" PRIx64 ") is not supported",
>                     align);
>          return 0;
> @@ -145,20 +142,18 @@ static uint64_t memory_device_get_free_addr(MachineState *ms,
>      }
>  
>      if (hint) {
> -        new_addr = *hint;
> -        if (new_addr < address_space_start) {
> +        if (range_init(&new, *hint, size) || !range_contains_range(&as, &new)) {
>              error_setg(errp, "can't add memory device [0x%" PRIx64 ":0x%" PRIx64
> -                       "] before 0x%" PRIx64, new_addr, size,
> -                       address_space_start);
> -            return 0;
> -        } else if ((new_addr + size) > address_space_end) {
> -            error_setg(errp, "can't add memory device [0x%" PRIx64 ":0x%" PRIx64
> -                       "] beyond 0x%" PRIx64, new_addr, size,
> -                       address_space_end);
> +                       "], usable range for memory devices [0x%" PRIx64 ":0x%"
> +                       PRIx64 "]", *hint, size, range_lob(&as),
> +                       range_size(&as));
>              return 0;
>          }
>      } else {
> -        new_addr = address_space_start;
> +        if (range_init(&new, range_lob(&as), size)) {
> +            error_setg(errp, "can't add memory device, device too big");
> +            return 0;
> +        }
>      }
>  
>      /* find address range that will fit new memory device */
> @@ -166,30 +161,36 @@ static uint64_t memory_device_get_free_addr(MachineState *ms,
>      for (item = list; item; item = g_slist_next(item)) {
>          const MemoryDeviceState *md = item->data;
>          const MemoryDeviceClass *mdc = MEMORY_DEVICE_GET_CLASS(OBJECT(md));
> -        uint64_t md_size, md_addr;
> +        uint64_t next_addr;
> +        Range tmp;
>  
> -        md_addr = mdc->get_addr(md);
> -        md_size = memory_device_get_region_size(md, &error_abort);
> +        range_init_nofail(&tmp, mdc->get_addr(md),
> +                          memory_device_get_region_size(md, &error_abort));
>  
> -        if (ranges_overlap(md_addr, md_size, new_addr, size)) {
> +        if (range_overlaps_range(&tmp, &new)) {
>              if (hint) {
>                  const DeviceState *d = DEVICE(md);
>                  error_setg(errp, "address range conflicts with memory device"
>                             " id='%s'", d->id ? d->id : "(unnamed)");
>                  goto out;
>              }
> -            new_addr = QEMU_ALIGN_UP(md_addr + md_size, align);
> +
> +            next_addr = QEMU_ALIGN_UP(range_upb(&tmp) + 1, align);
> +            if (!next_addr || range_init(&new, next_addr, range_size(&new))) {
> +                range_make_empty(&new);
> +                break;
> +            }
>          }
>      }
>  
> -    if (new_addr + size > address_space_end) {
> +    if (!range_contains_range(&as, &new)) {
>          error_setg(errp, "could not find position in guest address space for "
>                     "memory device - memory fragmented due to alignments");
>          goto out;
>      }
>  out:
>      g_slist_free(list);
> -    return new_addr;
> +    return range_lob(&new);
>  }
>  
>  MemoryDeviceInfoList *qmp_memory_device_list(void)


