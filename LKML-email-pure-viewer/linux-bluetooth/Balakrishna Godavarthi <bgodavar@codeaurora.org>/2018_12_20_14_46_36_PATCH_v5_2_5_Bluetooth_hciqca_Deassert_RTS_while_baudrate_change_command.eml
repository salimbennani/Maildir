Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:37:19 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 9D87158050C;
	Thu, 20 Dec 2018 06:47:03 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 20 Dec 2018 06:47:03 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A0XHK6xQ8Kxx8rN9Rr2L9GHiJqdpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64YBWCt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KptVRTmij?=
 =?us-ascii?q?oINyQh/W/XlMJ+kaxVrhGmqRN9zY7bb46bNOFmfq7fZt4WWWlMU9xNWyFbHo+w?=
 =?us-ascii?q?c40CBPcBM+ZCqIn9okMDoAakCgmoHuzvySVIhn7t3a061eQuCxzN0g0nH90Tqn?=
 =?us-ascii?q?vUss/6NL0OUeC1zanD0DLOYOhZ2Tf69YfHaA4hruuWXb9rbcXRzlQgGB3fgVWN?=
 =?us-ascii?q?s4zlOCmV2f4Xv2ic9epgWvuihmg6oA9yujii3tkghpXNi44P11zJ+zt1zJwoKd?=
 =?us-ascii?q?C7VEJ3e9+pHZlIuy2HK4d7TNkuT392tCs+0LEKpJq2cDIXxJkjwRPUduaJfJKS?=
 =?us-ascii?q?4h35UeacOTd4i2xheLK4nxuy70egxfPmVsWu01ZFsDBFkt/SuXAJzRDT7dKHSv?=
 =?us-ascii?q?Rl8keg3zaAyRzT5/laLUwokafXMYMtz7AumpYJrEjOHTP6lF/3gaKUbkkk//Kn?=
 =?us-ascii?q?6+XjYrXovJ+cMIp0hxn6MqQvnMy/HOs5PhENX2eF4+S80qPs/UngTLVNgPw2lL?=
 =?us-ascii?q?fWsIrBKMQFqa62HRVV3pwg6xmhFTem1soXnX0dIFJCYhKHgJDlO0vSL/DgEfe/?=
 =?us-ascii?q?n1OsnS9vx/DHPb3uHI/BL3fekLr6ebZ96khcyBc8zNxF5pJUDK0BL+z3WkPrqN?=
 =?us-ascii?q?PYCRo5ORSuw+n7ENV9yp8eWWWXD6+ZKqzSsEOI6fgoI+WWZI8VpSzyK/4q5/P1?=
 =?us-ascii?q?iX85mFkdfbSm3JcNaXC4GOhmLFudYXb2ntgBFmIKtBIkTOP2kF2CTSJTZ3GqUq?=
 =?us-ascii?q?0m/TE7CIWmDYTZSoC3mrOB3jy2HplXZmBAF1CNHm3kd4SCW/cQdi2SJtVtnSAD?=
 =?us-ascii?q?VbikU4Uhzw2htBfmy7p7KerZ4i4Yuojl1NRv4+3TlAs99Tp7D8mG12GNTmd0nn?=
 =?us-ascii?q?4HRjMs3aB/p1B9xUmH0aRin/NYEtlT7etTUggmLZ7c0/B6C9fqVw3cZNiJVkip?=
 =?us-ascii?q?Ts+mAT4rSNIx2MEBY0B6F9WmjRDD2i6qDqQRl7yKApw0763d02LwJ8Z713bJyq?=
 =?us-ascii?q?0hg0M6TctIMG2snrR/+BTLB47Vj0WZkL6nerkG0y7T6miP12qOs1teUA5rT6rF?=
 =?us-ascii?q?W2sSZk/XrdT/+0PDQKWiCbUhMgtd18GCLrFGZcHujVVDXP3jIsjRY3qtm2esAh?=
 =?us-ascii?q?aF3q+MbIvve2UawCXdCEgFnxoP/XqcMgg+HCOho2PYDDxhDl/vZ0Ls8e9jqHK0?=
 =?us-ascii?q?VEM0zgeKb1F/2Lqx4BIamfucS/YL1LIepCghsyl0HEq639/OEdWAoxRufapCbt?=
 =?us-ascii?q?I9+ltIzn/ZuBFnMZymLKBigUAefh9zv0Pv0RV3F4pBndIrrHMs0Ap9N6aY3Eld?=
 =?us-ascii?q?eDOf2JD6IqfXJXXq/BCzd67W3UnT0daL+qsV9Ps0sVTivAGzGUok/HVqyN1V03?=
 =?us-ascii?q?qa5pXXAwseS5PxUkAr9xdko7HWeDUy54TR1Xd0K6m7rifC2841BOsi0hugZdZf?=
 =?us-ascii?q?P7+eGw/oDsIaANKiKOo0lFizbxIIJfxd+7QwP8y7afSGwqmrPOB7kTKijGRH5p?=
 =?us-ascii?q?19002W+yp9TO7Iw4gKw/WC0gSbUDf8iU+rstrrloBceTESAm2/xDDkBY5QfKFz?=
 =?us-ascii?q?fZwHCXyzI82x3dh+g5/tW3hF9F+sHV8G2cmpeQaMYFz5xwFfyUMXoXm/kyui0z?=
 =?us-ascii?q?N0iy0prraY3CHWweTtbgAHOm1IRGlll1vsOpK7j9MZXEipaQgmih2l6F3+x6ha?=
 =?us-ascii?q?oqR/MmbSTV1JfyjwM2FtTK+wuqCebM5I7ZMiqT9XX/ikYVCGVr79pAMX0iP5EG?=
 =?us-ascii?q?tZ3jw7dTCqupPikhx+iWKdKmtzrXXDdcFxwxff+MLTRfpL0jUaQyl4jCHdBkKg?=
 =?us-ascii?q?MNmx4dWUi5DDv/i9V227V51faynrzZ6auyu96m1nGhm/n/G1mt36Hgk2yy7719?=
 =?us-ascii?q?92VSrWqBbweJXk16O/Meh/ZElnGEf869ZmGoF5ioYwgZAQ2XsAiZmP83sIj3zz?=
 =?us-ascii?q?MclF1qLkd3UCWyQLw9HO7Qjh2U1jKG+Jxo3jWnWcxMthe8e1YmcM1i0h6MBKDb?=
 =?us-ascii?q?+e7KZYkittvlq4sQXRbOBhnjcazPsi8n8bjPsPuAow1SWdGbESEFJcPSztkRSI?=
 =?us-ascii?q?8t+/oL9WZGapbbi/yk5+kcq9A7GFpwFWQGz5dYs6HS9s8sV/N0rB32bp5YHjfN?=
 =?us-ascii?q?nQcMgfthmJkxrbi+hVKZQxlucFhCZ9OGL9u2ElxPA/jRB0wZ66u42HIX13/K2l?=
 =?us-ascii?q?Gh5YKiH1Z8QL9zHvl6lem9iZ35u1EpV9ADkLX4boTfG1EDIUr/vnLB2DEDk9qn?=
 =?us-ascii?q?edBLreEhWT6EZgr3LTDZ+rM2ubK2UezdVnXBOdPlBQgBgIXDUmmZ40DgCrxMv8?=
 =?us-ascii?q?cEdg+zAe/Fj4pgFXyuJvMRn/XXzSpAOpajcyVZieIwBa7gBE50fJL8Oe6vh/ED?=
 =?us-ascii?q?1f/p2ktAaNMHCUZxxUDWEVXUyJH1DjMaev5dnD8OiYB/CyL/jUYbWJpuxRSe2I?=
 =?us-ascii?q?xY+00oZ9+zaMN8OPPmRtDvEh20pDW2x5FNrdmzkVVyMXkCfNZdaBpBig4i13st?=
 =?us-ascii?q?y/8PPzVQ31+IuAEKFSPstv+hyshaeDNvWdhCJ4KTZey5MNymXEyLkZ3F4OlS5u?=
 =?us-ascii?q?cyOhHqgHtS7IVKjQgLNYDwYHayNvM8tF97483ghIOcLBltz5zKJ3jv4rBFdDTl?=
 =?us-ascii?q?HhnsCpZcoXI2CyLl/HBUCLNKiYKj3P2c34faS8SbhIhuVOqxKwoSqbE1PkPjmb?=
 =?us-ascii?q?lzjmTRavMeRNjCGdJBNfuYG9fQxrCWjsV9/mbhy7MNlqjTw527E0h3XKNXICPj?=
 =?us-ascii?q?h4aU9CsrqQ7SYLysl4TmlI9HFoKcGEnCKF6uDeLNARq/QvSiZzl+tcpnQ3x7FY?=
 =?us-ascii?q?9i5sS/l8mS+Updlr5xmklemGzBJkXQBIpzINg5iE7mt4PqCM3JBEUHXe/QkN62?=
 =?us-ascii?q?zYJBMGrsVsEMHvuugEwNfImKvtIS1q+NXY8MIBHc/OIYSAKnV3YkmhIyLdEAZQ?=
 =?us-ascii?q?FW3jDmrYnUEIyPw=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BoAAD5qRtch0O0hNFkHQEBBQEHBQGBU?=
 =?us-ascii?q?gcBCwEBgX+BayeMdYscgiGJD446gXMVGBMBhy4iNQgNAQMBAQEBAQECARMBAQE?=
 =?us-ascii?q?IDQkIKSMMQgEOAQYBgV0igmUDAwECJAsBDQEBNwEFCQEBUAMpKwcKCAWDHYF1D?=
 =?us-ascii?q?AEFpn+BbDOCdgEBBYckCId+gyWBHBeBQD+BEYJkiw6JTYcPkBhLCZFZJIl4h2U?=
 =?us-ascii?q?siSGQQIFIA4IJfQiDJ4IbiQGFRzgygQUBAYEUhl6FbgEB?=
X-IPAS-Result: =?us-ascii?q?A0BoAAD5qRtch0O0hNFkHQEBBQEHBQGBUgcBCwEBgX+Baye?=
 =?us-ascii?q?MdYscgiGJD446gXMVGBMBhy4iNQgNAQMBAQEBAQECARMBAQEIDQkIKSMMQgEOA?=
 =?us-ascii?q?QYBgV0igmUDAwECJAsBDQEBNwEFCQEBUAMpKwcKCAWDHYF1DAEFpn+BbDOCdgE?=
 =?us-ascii?q?BBYckCId+gyWBHBeBQD+BEYJkiw6JTYcPkBhLCZFZJIl4h2UsiSGQQIFIA4IJf?=
 =?us-ascii?q?QiDJ4IbiQGFRzgygQUBAYEUhl6FbgEB?=
X-IronPort-AV: E=Sophos;i="5.56,377,1539673200"; 
   d="scan'208";a="142936241"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 20 Dec 2018 06:47:02 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2387782AbeLTOq7 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Thu, 20 Dec 2018 09:46:59 -0500
Received: from smtp.codeaurora.org ([198.145.29.96]:53866 "EHLO
        smtp.codeaurora.org" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1730470AbeLTOq5 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 20 Dec 2018 09:46:57 -0500
Received: by smtp.codeaurora.org (Postfix, from userid 1000)
        id 1C8FF608FC; Thu, 20 Dec 2018 14:46:56 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=codeaurora.org;
        s=default; t=1545317216;
        bh=0B9GVC752BwFbK8CYti9/n+e+zeQbgDayO5vKzYzwrM=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=fY09vD5I3vml74/aRNixqFXmCOi4nEDPmCAsbLuOe8CTbZKDsuFfBMj/XvkcmKiQL
         Z+0Tw/q3juFL6VHOFEERYZOz10WLaInqs8Q4NfN/0u9zrEVr82uQrjQJRLZx6LBbS7
         4m2lrMRtk7Kkbws6a4zKdUrlmJPdrCuNk/wZ8Jic=
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
        pdx-caf-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-2.7 required=2.0 tests=ALL_TRUSTED,BAYES_00,
        DKIM_INVALID,DKIM_SIGNED autolearn=no autolearn_force=no version=3.4.0
Received: from bgodavar-linux.qualcomm.com (blr-c-bdr-fw-01_globalnat_allzones-outside.qualcomm.com [103.229.19.19])
        (using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
        (No client certificate requested)
        (Authenticated sender: bgodavar@smtp.codeaurora.org)
        by smtp.codeaurora.org (Postfix) with ESMTPSA id C237A605A5;
        Thu, 20 Dec 2018 14:46:52 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=codeaurora.org;
        s=default; t=1545317215;
        bh=0B9GVC752BwFbK8CYti9/n+e+zeQbgDayO5vKzYzwrM=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=cq+Kw195nPi/dq8tslY3jrshWoZgu+1ABVkNfinxvgPFVkZ4/pi58NSBObB0GiP36
         F1CFBSCjGtuELaBiL3bV9uW1cn4+G/c2C75mUkKJ4a0ZT/LqiqFYcXVcIOBpstilHY
         +xv9oYtS79i+H96g8QKJfko/nVhkS8dn5VXqoOO0=
DMARC-Filter: OpenDMARC Filter v1.3.2 smtp.codeaurora.org C237A605A5
Authentication-Results: pdx-caf-mail.web.codeaurora.org; dmarc=none (p=none dis=none) header.from=codeaurora.org
Authentication-Results: pdx-caf-mail.web.codeaurora.org; spf=none smtp.mailfrom=bgodavar@codeaurora.org
From: Balakrishna Godavarthi <bgodavar@codeaurora.org>
To: marcel@holtmann.org, johan.hedberg@gmail.com, johan@kernel.org
Cc: mka@chromium.org, linux-kernel@vger.kernel.org,
        linux-bluetooth@vger.kernel.org, hemantg@codeaurora.org,
        linux-arm-msm@vger.kernel.org,
        Balakrishna Godavarthi <bgodavar@codeaurora.org>
Subject: [PATCH v5 2/5] Bluetooth: hci_qca: Deassert RTS while baudrate change command
Date: Thu, 20 Dec 2018 20:16:36 +0530
Message-Id: <20181220144639.15928-3-bgodavar@codeaurora.org>
X-Mailer: git-send-email 2.19.1
In-Reply-To: <20181220144639.15928-1-bgodavar@codeaurora.org>
References: <20181220144639.15928-1-bgodavar@codeaurora.org>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This patch will help to stop frame reassembly errors while changing
the baudrate. This is because host send a change baudrate request
command to the chip with 115200 bps, Whereas chip will change their
UART clocks to the enable for new baudrate and sends the response
for the change request command with newer baudrate, On host side
we are still operating in 115200 bps which results of reading garbage
data. Here we are pulling RTS line, so that chip we will wait to send data
to host until host change its baudrate.

Signed-off-by: Balakrishna Godavarthi <bgodavar@codeaurora.org>
Tested-by: Matthias Kaehlcke <mka@chromium.org>
Reviewed-by: Matthias Kaehlcke <mka@chromium.org>
---
 drivers/bluetooth/hci_qca.c | 24 +++++++++++++-----------
 1 file changed, 13 insertions(+), 11 deletions(-)

diff --git a/drivers/bluetooth/hci_qca.c b/drivers/bluetooth/hci_qca.c
index 5a07c2370289..1680ead6cc3d 100644
--- a/drivers/bluetooth/hci_qca.c
+++ b/drivers/bluetooth/hci_qca.c
@@ -963,7 +963,6 @@ static int qca_set_baudrate(struct hci_dev *hdev, uint8_t baudrate)
 	struct hci_uart *hu = hci_get_drvdata(hdev);
 	struct qca_data *qca = hu->priv;
 	struct sk_buff *skb;
-	struct qca_serdev *qcadev;
 	u8 cmd[] = { 0x01, 0x48, 0xFC, 0x01, 0x00 };
 
 	if (baudrate > QCA_BAUDRATE_3200000)
@@ -977,13 +976,6 @@ static int qca_set_baudrate(struct hci_dev *hdev, uint8_t baudrate)
 		return -ENOMEM;
 	}
 
-	/* Disabling hardware flow control is mandatory while
-	 * sending change baudrate request to wcn3990 SoC.
-	 */
-	qcadev = serdev_device_get_drvdata(hu->serdev);
-	if (qcadev->btsoc_type == QCA_WCN3990)
-		hci_uart_set_flow_control(hu, true);
-
 	/* Assign commands to change baudrate and packet type. */
 	skb_put_data(skb, cmd, sizeof(cmd));
 	hci_skb_pkt_type(skb) = HCI_COMMAND_PKT;
@@ -999,9 +991,6 @@ static int qca_set_baudrate(struct hci_dev *hdev, uint8_t baudrate)
 	schedule_timeout(msecs_to_jiffies(BAUDRATE_SETTLE_TIMEOUT_MS));
 	set_current_state(TASK_RUNNING);
 
-	if (qcadev->btsoc_type == QCA_WCN3990)
-		hci_uart_set_flow_control(hu, false);
-
 	return 0;
 }
 
@@ -1086,6 +1075,7 @@ static int qca_check_speeds(struct hci_uart *hu)
 static int qca_set_speed(struct hci_uart *hu, enum qca_speed_type speed_type)
 {
 	unsigned int speed, qca_baudrate;
+	struct qca_serdev *qcadev;
 	int ret;
 
 	if (speed_type == QCA_INIT_SPEED) {
@@ -1097,6 +1087,15 @@ static int qca_set_speed(struct hci_uart *hu, enum qca_speed_type speed_type)
 		if (!speed)
 			return 0;
 
+		/* Deassert RTS while changing the baudrate of chip and host.
+		 * This will prevent chip from transmitting its response with
+		 * the new baudrate while the host port is still operating at
+		 * the old speed.
+		 */
+		qcadev = serdev_device_get_drvdata(hu->serdev);
+		if (qcadev->btsoc_type == QCA_WCN3990)
+			serdev_device_set_rts(hu->serdev, false);
+
 		qca_baudrate = qca_get_baudrate_value(speed);
 		bt_dev_dbg(hu->hdev, "Set UART speed to %d", speed);
 		ret = qca_set_baudrate(hu->hdev, qca_baudrate);
@@ -1104,6 +1103,9 @@ static int qca_set_speed(struct hci_uart *hu, enum qca_speed_type speed_type)
 			return ret;
 
 		host_set_baudrate(hu, speed);
+
+		if (qcadev->btsoc_type == QCA_WCN3990)
+			serdev_device_set_rts(hu->serdev, true);
 	}
 
 	return 0;
-- 
The Qualcomm Innovation Center, Inc. is a member of the Code Aurora Forum,
a Linux Foundation Collaborative Project

