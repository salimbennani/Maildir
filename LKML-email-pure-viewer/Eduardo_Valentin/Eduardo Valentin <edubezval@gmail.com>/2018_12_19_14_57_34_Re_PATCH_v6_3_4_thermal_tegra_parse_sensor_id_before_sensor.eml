Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  20 Dec 2018 08:39:13 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 82749580522;
	Wed, 19 Dec 2018 06:57:41 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga003-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 19 Dec 2018 06:57:41 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AHWxQ/B0oHvZ5vDbfsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segTKvnxwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJPUMhRSSJPH4Cy?=
 =?us-ascii?q?b4UAAOUdIOlXrYfyp0AWrRa8HgSsGP/jxyVUinPqx6A2zeIsGhzG0gw6GNIOtW?=
 =?us-ascii?q?zZotroO6cPS++11rTHzTLeZPxZwzj97JbHchY9ofGNW7J7bM3cxlcyGAPYlVqf?=
 =?us-ascii?q?t43kPy2P2eQJqGWb4O9gWviui24jsQ1+vj+vxsI1h4TPm4kbyUjE+D1nzIopId?=
 =?us-ascii?q?C0UlN3bNC6HJdKqi2XNJd6TtkjTmxqoCo21LwLtYKmcCUPyZkqyBHSZvmEfoSW?=
 =?us-ascii?q?/h7vSeOcLDlmiH17ZL6yghS//Vagx+D9U8S500tGriRLktTJuHACyQfc5dWCR/?=
 =?us-ascii?q?Z54Eus2CuA2gbO4e9eO080j7DUK5s5z74wiJUTtUPDEzfomEX5kqCWbF8o+uu2?=
 =?us-ascii?q?5OT9ZLXpuJucO5VzigHkPaQigs2/AeImPQgSR2WX5/iw2bn58UHkTrhGkOc6nr?=
 =?us-ascii?q?TavZzGP8gWp6y0DxdQ0ok56ha/Czmm0M4fnXkCNF9FfBOHj470O1DBOfz4Dumw?=
 =?us-ascii?q?g06qkDh1w/DKJ7rhA5vLLnfdirfsZqh960FCxwop19xf5IxbCqsHIP3tXk/9rt?=
 =?us-ascii?q?vYDgU2MwCs2eboFM191p8CWWKIGqKZNKLSsVyW6e41LOiMeZQYuDL8K/gj+v7v?=
 =?us-ascii?q?gmU1mV4bfam1w5QXbGq0EehhI0WceXDsmMsOEX8WvgoiS+znkF2CXiRSZ3auRa?=
 =?us-ascii?q?084Ss3CIK7DYjZQICtj6eM3CO6Hp1Qe2BHBUqAEXbud4WYRfgMbDieLdNmkjwB?=
 =?us-ascii?q?TbKhUZMu1QmytA/mzLpqNujU+ioGup7519h14OvTlRc19TFvC8Sd0meNT3x7n2?=
 =?us-ascii?q?8SRj822rx/rlJ5yluZzad4hPlYH8RJ5/xVSgc6KYLcz+tiBt/oQQLBftCJSFW8?=
 =?us-ascii?q?TtW8Gz4xTMk8w9sPY0Z7BtWjgQrP3yusA78JibOLAIY4/b7b33j0P8x90WrJ1L?=
 =?us-ascii?q?E9j1k6RctCLW6mibR59wTJA47Jkl+Wl6CldakH2C7N9WGDzXeBvU1CUQ5wV7nF?=
 =?us-ascii?q?Um4bZkfMsdv54UbCRae0Cbs7KgtB1dKCKqxSZ9L0l1pGWunsNM7eY22rnWewHg?=
 =?us-ascii?q?iHxrWLYIrueGUd2SHdBVMAkwAS+3aGKAc/Cj2go2LYEDxhC1bvb1nw/ul5rXOx?=
 =?us-ascii?q?VlU0wB2Sb019y7q1/QYYiuGGRPMNwL0IoichpC9yHFamwd3WDcGNpw5gfKVafN?=
 =?us-ascii?q?M8701L1WPftwxhIJOgK7puiUIZcwRyp0nuzQl4Cp1ckcg2q3Mn1BZyKaOd0FNG?=
 =?us-ascii?q?azOY3ZDxNqfLKmXo+xCvcarW2lDY0NaZ4aoP7PU4q1P+vACmDEYi8nNn08VL3H?=
 =?us-ascii?q?uY/JnFEA0SUZfpWEYt6xd6v63aYjU6547Mz3JsNbe7szDc1NMpHucq0QugcMpF?=
 =?us-ascii?q?P6OCFw/yFNMaCtOqKOwrnVipcx0FMPpT9K4yI8Opaf+G1LS3M+ZnmTKslX5H75?=
 =?us-ascii?q?xl0kKQ6yp8TfbF3pYYw/2CwgSLTTb9jFe7vcDxloBJfjUSHmu5ySj5C49dfKxy?=
 =?us-ascii?q?fYAXCWiwJ8273Mlxh5noW3RA7l6sG0sG2NO1eRqVd1H9xwxQ2lgNrny9hCS4yC?=
 =?us-ascii?q?Z4kzc3oaqF3SzC2vjtewADOmFWWmZil1DsIY6vgtAeXUioaRUplRS/6Ub7wahb?=
 =?us-ascii?q?uLpwL23JTUhUeCj2KnloUrGsubqaf85P9JQovD1XUeS9e1ybSqTxowAH0yPlBG?=
 =?us-ascii?q?ZewDE7dze3upT2hRB6iWSdLGpto3rdY81/2RDf5NnET/5LwjUGXDV4iSXQBlWk?=
 =?us-ascii?q?Pdmm58+Ul5TAsuC5TW6hTYdccSrozYOBsiu0+2tqDAa7n/CynN3nDAc73TX619?=
 =?us-ascii?q?lsSSXHshL8bpP32KS9NOJtZlNoC0Pk68pmBoF+lZM9hZEK1ngdnJmV/3sHkWHo?=
 =?us-ascii?q?PNVf2KL+amcNRDERz97U5gjlxFNsLnaTy43lUXWdx9NrZ8OmbWMOxiI988dKBb?=
 =?us-ascii?q?+X7LNenCt5uFq4rR/Lbvh7kTcQ0v8u6H8cg+EUtwsh1CSdArYOHUZGOSzgjQiH?=
 =?us-ascii?q?79e7rK9PfmagbaCw1FZindCmFLyCpwBcWHXjdZs4Ey5/8N5/ME7S333p8Y7rZs?=
 =?us-ascii?q?PQbd0Iux2QkhfAifVVKZ0rmvoLgypnJXzyvXk/x+Enihxu2ImwvJKbJGV14KK5?=
 =?us-ascii?q?HhlYOyXpZ8MU/zHhl6dfkdyQ34CyBZVhATQLUYDsTfKpFjISqPvmOxyPED06tn?=
 =?us-ascii?q?eUB77fERWD50dhqnLFC4qrOG2PJHkF0dViQwGQK1dFjwATWDU6g4Q1FgS3xMH6?=
 =?us-ascii?q?dEd55zYR5kP3qxdWy+JoMQX/XXnbpAuydjg0T52fJgJM7g5e/0fVLdCe7uVrEi?=
 =?us-ascii?q?Fa5JKhqRKCKneBawRUF20JWVGEB1P+Prmo/9bA6POVBu6/L/vIfLWPpvZSV/aO?=
 =?us-ascii?q?xZKzzIRm+yyAOdmIPnlnF/c7wFZMXWhlG8TFnDUCUywWlyXQb86CuRez4Ct3ot?=
 =?us-ascii?q?qk8PTsXgLv6pCCC79TMdVp5hC3jr2PN++WhCZlNzlY0okAymPPyLgaxFQSkT1h?=
 =?us-ascii?q?dyGxEbQcsi7AVKLQlbFWDx4YaCNzNdFE76Em3glKNs7UlMn11qNjjvMuD1dFVF?=
 =?us-ascii?q?rhmtymZMAQImG9Mk/HC1iPNLicOTLLxMT3a7umSbJMlOVUqwGwuTGDHkD5IzSM?=
 =?us-ascii?q?jCPpWA6vMO1WiCGbPQdTuIW8chZrFGjiQ8jqahy9MN9rkzI2xac4iW/NNW4ZKT?=
 =?us-ascii?q?J8aV9CrqWM7SNEhfVyA3BB7ntgLeWehymV9fXXKpYIvvttGSl0k+Na4HIny7pa?=
 =?us-ascii?q?9i1ERfp1mDfMod5quV2pju6Pyj9/WhpUtjlLnJ6LvVllOajB9phPQ3DE/BcM7W?=
 =?us-ascii?q?WWExsLpttlBcfpu6Bf0dXPkKPzKDFf89Pb58ccBs7UKN6ZP3olKxbmBDnUDA5W?=
 =?us-ascii?q?BQKsYF7ShgR7kbnG6XuUhp4kq5TtkdwFTboNB3IvEfZPJ0h4FcYOJ99JVzcpl6?=
 =?us-ascii?q?KaioZc6HajphTDWsxelp/CX/OWR/7oLWDK3vF/exIUzOagfswoPYrh1hknMwEi?=
 =?us-ascii?q?kQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AHAABKWxpch0O0hNFkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwEBgS+BLYEOJ4wWi3xQAQEGgTUUiQ8Db41IgXMTAQE?=
 =?us-ascii?q?YEwGHLSI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwxCAQ4BBgGBXSQBgmEBAQEBA?=
 =?us-ascii?q?gEBAiQTBgEbHQEDAQEJAQEFBQ4KCSUDDAUPEQEFASITBYMdgWkBAwgFCAEEnEs?=
 =?us-ascii?q?8jBUWBQEXgncFhD0KGScNXoE3AgYSixGBHBd4gQeBEYMSiDqCJgKJP4YZflGQD?=
 =?us-ascii?q?QmGUIsGJIl3h2KZWwIEAgQFAgUPIYElgg5NI4M8ghsMF4NKinQfMoEEAQEBO4R?=
 =?us-ascii?q?8gxGFGAEB?=
X-IPAS-Result: =?us-ascii?q?A0AHAABKWxpch0O0hNFkGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwEBgS+BLYEOJ4wWi3xQAQEGgTUUiQ8Db41IgXMTAQEYEwGHLSI0CQ0BA?=
 =?us-ascii?q?wEBAQEBAQIBEwEBAQgNCQgpIwxCAQ4BBgGBXSQBgmEBAQEBAgEBAiQTBgEbHQE?=
 =?us-ascii?q?DAQEJAQEFBQ4KCSUDDAUPEQEFASITBYMdgWkBAwgFCAEEnEs8jBUWBQEXgncFh?=
 =?us-ascii?q?D0KGScNXoE3AgYSixGBHBd4gQeBEYMSiDqCJgKJP4YZflGQDQmGUIsGJIl3h2K?=
 =?us-ascii?q?ZWwIEAgQFAgUPIYElgg5NI4M8ghsMF4NKinQfMoEEAQEBO4R8gxGFGAEB?=
X-IronPort-AV: E=Sophos;i="5.56,373,1539673200"; 
   d="scan'208";a="57008005"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 19 Dec 2018 06:57:39 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729651AbeLSO5h (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 19 Dec 2018 09:57:37 -0500
Received: from mail-pl1-f193.google.com ([209.85.214.193]:42319 "EHLO
        mail-pl1-f193.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727569AbeLSO5h (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 19 Dec 2018 09:57:37 -0500
Received: by mail-pl1-f193.google.com with SMTP id y1so9565310plp.9;
        Wed, 19 Dec 2018 06:57:36 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=XXBl35SiC5sbTtuVVQBVyQMkywsQQ1Wi3yIAEWFyQ1I=;
        b=iB4g+XCkb+jywU2MmeDbdlC+ii8HrEeaOoVzSiSwBn44/8m6l3xkSSKSeO9mM4SvI1
         cRAHUc8Nczj2NyQGNWxU3OnUCZjNoIZrDAcqaTmC4SlJhSUNyD9LO6UCFx29r0/4EbuS
         FbjwKMqy9tPdn5qaPjoMPjuaV6pe6jRux5BgGOry4zuEUuc08eKw59AmFyz6+FsyJgiL
         zq/6J4nrKEVmKDxP7G5dYnZtDa2yEqowYp1F8EjbphVWFwNsf1qGiy2yXrAuK/L86HnE
         YvFRW4+rHCdghVimET9iRc+a9AZVo7Lzak/Kl/ZziA2WwOzvMdAFnNWAYMAjWe703bum
         gmxQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:message-id:references
         :mime-version:content-disposition:in-reply-to:user-agent;
        bh=XXBl35SiC5sbTtuVVQBVyQMkywsQQ1Wi3yIAEWFyQ1I=;
        b=GEjVg8Psyn4exoorwEunyHDONNoDzdf5Dd1FRBV+FY00I8C0pqrpy1sOPnOq8TE74h
         5jdiUX397xIe/DP5uqeR2t2rcEo6qCFS8mY2GaXCQNYRtRH8QgI2LifTNWSFWh1xVsa4
         Njywv8xKAHoF18xqXK2XhQ74BlFkvUKMktOWlBnPTDhbKGqj7R6z0cPTCjAnx7YEBDu4
         GSZahy63pWv9DroZ/8PmsDaUcsGKYPZ70jzQELhUKF7tSHHD0aeS0wUwJzMqkksY3J0t
         Nlpg6RW/06OxJDPjJkcEnQPYsdMo3utRhdnGxst5AUgaXN1oTrNNs22vUZRveq9o5eTs
         mWWg==
X-Gm-Message-State: AA+aEWYPcQCZkzIj8YSRl65CuK7oCC25BZ82fSGTFyTAaghLh6ptf1I0
        ralBm8UpGa3QM1aKmA7Yavw=
X-Google-Smtp-Source: AFSGD/WioJIjXryfWCWlOBG+l6IxCfn8r7l7/+WhTCnnn2iAQgs5p3UUPx5xKpLUCJpNFbMi9ZtUbA==
X-Received: by 2002:a17:902:9a04:: with SMTP id v4mr21004777plp.34.1545231456110;
        Wed, 19 Dec 2018 06:57:36 -0800 (PST)
Received: from localhost.localdomain ([2601:644:8201:32e0:7256:81ff:febd:926d])
        by smtp.gmail.com with ESMTPSA id y6sm37507078pfd.104.2018.12.19.06.57.34
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Wed, 19 Dec 2018 06:57:35 -0800 (PST)
Date: Wed, 19 Dec 2018 06:57:34 -0800
From: Eduardo Valentin <edubezval@gmail.com>
To: Wei Ni <wni@nvidia.com>
Cc: rui.zhang@intel.com, thierry.reding@gmail.com,
        daniel.lezcano@linaro.org, linux-tegra@vger.kernel.org,
        srikars@nvidia.com, linux-kernel@vger.kernel.org,
        linux-pm@vger.kernel.org
Subject: Re: [PATCH v6 3/4] thermal: tegra: parse sensor id before sensor
 register
Message-ID: <20181219145732.GA3516@localhost.localdomain>
References: <1544780993-20744-1-git-send-email-wni@nvidia.com>
 <1544780993-20744-4-git-send-email-wni@nvidia.com>
 <20181219012450.GA2842@localhost.localdomain>
 <5c48701f-aafc-2db0-2191-41f169c8f33f@nvidia.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <5c48701f-aafc-2db0-2191-41f169c8f33f@nvidia.com>
User-Agent: Mutt/1.5.23 (2014-03-12)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Wed, Dec 19, 2018 at 11:00:10AM +0800, Wei Ni wrote:
> 
> 
> On 19/12/2018 9:24 AM, Eduardo Valentin wrote:
> > On Fri, Dec 14, 2018 at 05:49:52PM +0800, Wei Ni wrote:
> >> Since different platforms may not support all 4
> >> sensors, so the sensor registration may be failed.
> >> Add codes to parse dt to find sensor id which
> >> need to be registered. So that the registration
> >> can be successful on all platform.
> >>
> >> Signed-off-by: Wei Ni <wni@nvidia.com>
> >> ---
> >>  drivers/thermal/tegra/soctherm.c | 45 ++++++++++++++++++++++++++++++++++++++--
> >>  1 file changed, 43 insertions(+), 2 deletions(-)
> >>
> >> diff --git a/drivers/thermal/tegra/soctherm.c b/drivers/thermal/tegra/soctherm.c
> >> index fd2703c0cfc5..6bee31cd4621 100644
> >> --- a/drivers/thermal/tegra/soctherm.c
> >> +++ b/drivers/thermal/tegra/soctherm.c
> >> @@ -1224,6 +1224,41 @@ static void soctherm_init(struct platform_device *pdev)
> >>  	tegra_soctherm_throttle(&pdev->dev);
> >>  }
> >>  
> >> +static bool tegra_soctherm_find_sensor_id(unsigned int sensor_id)
> >> +{
> >> +	bool ret = false;
> >> +	struct of_phandle_args sensor_specs;
> >> +	struct device_node *np, *sensor_np;
> >> +
> >> +	np = of_find_node_by_name(NULL, "thermal-zones");
> >> +	if (!np)
> >> +		return ret;
> >> +
> >> +	for_each_available_child_of_node(np, sensor_np) {
> >> +		if (of_parse_phandle_with_args(sensor_np, "thermal-sensors",
> >> +						 "#thermal-sensor-cells",
> >> +						 0, &sensor_specs))
> >> +			continue;
> >> +
> >> +		if (sensor_specs.args_count != 1) {
> >> +			WARN(sensor_specs.args_count != 1,
> >> +			     "%s: wrong cells in sensor specifier %d\n",
> >> +			     sensor_specs.np->name, sensor_specs.args_count);
> >> +			continue;
> >> +		}
> >> +
> >> +		if (sensor_specs.args[0] == sensor_id) {
> >> +			of_node_put(sensor_np);
> >> +			ret = true;
> >> +			break;
> >> +		}
> >> +	}
> >> +
> >> +	of_node_put(np);
> >> +
> >> +	return ret;
> >> +}
> > 
> > So, I am still failing to see why this is really needed. 
> > 
> > Why can't you simply resolve this with different compatibles?
> > If the sensor is not present or disabled, the compatible is not, well,
> > compatible anymore.
> 
> This driver can support three Tegra chip t124, t132 and t210. And we
> also support some platforms for every chips. As the description in the
> commit, different platforms may not support all 4 sensors, so I
> upstreamed this patch.

ok.. Which means, all platforms need to have a proper DT that describes
the correct amount of sensors.

> If we use different compatibles, I think we can't resolve it simply,
> because we also need to add codes to configure which platform support
> which sensors, and may add more in the future. If use this patch, we

There is a very common way of solving this, you can pass .data and grab
after calling of_node_match(), just like the tegra soc thermal driver
already does.

> doesn't need to do any more in the future.

Well, if the patch is needed to add support for different versions of
your sensor block, then there is no reason why not patching.

> Actually in my original change, I just ignore the registration failure
> to fix this issue, it will not affect loading driver, but as Daniel's
> comment, it's not better to ignore, so I followed his comment to refer

It is not good to ignore. The correct thing to do here is for tegra to
have correct DT entries for each sensor block version, to correctly
represent the amount of sensors present in the RTL, then you reflect
that in device driver using compatible. This way you wont need to ignore
failures, and you will support the correct amount of sensors for each
block version.

> the QORIQ thermal driver to get the sensor id.
> 

I am not sure that is a good example to follow.

> Thanks.
> Wei.
> 
> > 
> >> +
> >>  static const struct of_device_id tegra_soctherm_of_match[] = {
> >>  #ifdef CONFIG_ARCH_TEGRA_124_SOC
> >>  	{
> >> @@ -1365,13 +1400,16 @@ static int tegra_soctherm_probe(struct platform_device *pdev)
> >>  		zone->sg = soc->ttgs[i];
> >>  		zone->ts = tegra;
> >>  
> >> +		if (!tegra_soctherm_find_sensor_id(soc->ttgs[i]->id))
> >> +			continue;
> >> +
> >>  		z = devm_thermal_zone_of_sensor_register(&pdev->dev,
> >>  							 soc->ttgs[i]->id, zone,
> >>  							 &tegra_of_thermal_ops);
> >>  		if (IS_ERR(z)) {
> >>  			err = PTR_ERR(z);
> >> -			dev_err(&pdev->dev, "failed to register sensor: %d\n",
> >> -				err);
> >> +			dev_err(&pdev->dev, "failed to register sensor %s: %d\n",
> >> +				soc->ttgs[i]->name, err);
> >>  			goto disable_clocks;
> >>  		}
> >>  
> >> @@ -1434,6 +1472,9 @@ static int __maybe_unused soctherm_resume(struct device *dev)
> >>  		struct thermal_zone_device *tz;
> >>  
> >>  		tz = tegra->thermctl_tzs[soc->ttgs[i]->id];
> >> +		if (!tz)
> >> +			continue;
> >> +
> >>  		err = tegra_soctherm_set_hwtrips(dev, soc->ttgs[i], tz);
> >>  		if (err) {
> >>  			dev_err(&pdev->dev,
> >> -- 
> >> 2.7.4
> >>
