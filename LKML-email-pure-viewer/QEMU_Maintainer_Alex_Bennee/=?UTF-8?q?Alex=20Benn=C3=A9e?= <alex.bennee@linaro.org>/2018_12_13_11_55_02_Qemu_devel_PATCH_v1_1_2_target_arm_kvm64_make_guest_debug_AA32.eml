Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 21:23:11 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 1F8575803DC
	for <like.xu@linux.intel.com>; Thu, 13 Dec 2018 03:57:31 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 13 Dec 2018 03:57:30 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3ACGaFpheMW4F2sjiqKrI/uy/WlGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxcW8Zh7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyxPDJ2y?=
 =?us-ascii?q?YYUMCOQOP+hYoIbhqFUBsBW+HQuhCuHgxzNViHL6wbM10/86HAHa3wEtBc4CvW?=
 =?us-ascii?q?7IoNj3MqoZTOC7zLPPzTXGd/5bxTP955bHcxs8vPyDQ7RwcczLzkYxCgjIiU+f?=
 =?us-ascii?q?qYj7MDKazOgCqHaU7+xmVe2xlWEqsAVxojmpxsg2kInJgZgZylfe9SV22Ys4I8?=
 =?us-ascii?q?CzRk1jYdO8DpdcqyKXO5FrTs8/QGxkojg2x7MGtJKhYSQHyowryh3CZ/CdboSE?=
 =?us-ascii?q?/BHuWPyMLTp7hH9pYryyihm0/EO90OPzTNO030xPriddktnDqHQN1xvL58iDS/?=
 =?us-ascii?q?t95Vuh2S2V2wDc7OFEPFo4la3BK54u2rIwl5wTvlrfHiLuhkn6kKybel859uS1?=
 =?us-ascii?q?6OnreKvqq5GcOoNulw3zMLwimsmlDuQ5NggOUXKb+eO51LD75E32XrBKjuAvnq?=
 =?us-ascii?q?bErp/aO9oUpqqgDwBO1YYj9hC/ACu439QDmnUHKFNFeBGZgITzNFDOPej1DfO+?=
 =?us-ascii?q?g1SqjTdqyOrKPrznApXRMHfDlK3tcqp6605Z0wczy9df55RbCrEHPfL/QEjxtM?=
 =?us-ascii?q?bXDhMhKQy73/7nCMlh1oMZQW+PBq6ZMKDMvlOS6eMvPvKBZIsUuDb7Nvgk6OTi?=
 =?us-ascii?q?jX4/mV8BY6ap2YEbZ2y/HvRjcA2kZ2HxiIIBDXsSpVh5C+jrk0GZFzhUYXm0Qu?=
 =?us-ascii?q?Q7/D58DYunCYLKQMeqmKCA2yGgWYRbY30DBl2SHHO7SoOfRv1ZbSuTJtNmwCUJ?=
 =?us-ascii?q?UKXkR4I/2BXrrgLj1rd8MsLS/SsXs4+l08J6sPbOnxM//iAhEsKGzmuWRHt1lG?=
 =?us-ascii?q?5bezhjxa16vAlxx0mO1YB+hPpXE8EV4OlGASkgMpuJ5uh3G5jYVwTH/9rBHF+i?=
 =?us-ascii?q?T8XgCzw3SN8869sPZU9nHJOllB+VjHniOKMci7HeXM98yanbxXWkYp8lk3s=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0CKAABcSBJcmBHrdtBjHQEBBQEHBQGBV?=
 =?us-ascii?q?AUBCwGBMIJig3yIeI48mEkUAQEYFIFLhXkiNwYNAQMBAQEBAQECARMBAQEBAQg?=
 =?us-ascii?q?LCwYbDiMMgjYFAgMaAQaCXAMDAQIgBAsBDQEBBAopAQIDAQIGAQEkAiIEAgIDA?=
 =?us-ascii?q?TABBQEcGQWDHIIBAQMBmzI8ih1wfDOCdgEBBYJDg2WBBQgSeYZygyOBHIIWgRG?=
 =?us-ascii?q?BcG2GA4I3glehEQcCkU4LGIlsh16ZIgYCCQcPIYE7gXgzSoMvghs1iEyFP3KBB?=
 =?us-ascii?q?4oEKiyBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0CKAABcSBJcmBHrdtBjHQEBBQEHBQGBVAUBCwGBMIJig3y?=
 =?us-ascii?q?IeI48mEkUAQEYFIFLhXkiNwYNAQMBAQEBAQECARMBAQEBAQgLCwYbDiMMgjYFA?=
 =?us-ascii?q?gMaAQaCXAMDAQIgBAsBDQEBBAopAQIDAQIGAQEkAiIEAgIDATABBQEcGQWDHII?=
 =?us-ascii?q?BAQMBmzI8ih1wfDOCdgEBBYJDg2WBBQgSeYZygyOBHIIWgRGBcG2GA4I3glehE?=
 =?us-ascii?q?QcCkU4LGIlsh16ZIgYCCQcPIYE7gXgzSoMvghs1iEyFP3KBB4oEKiyBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,348,1539673200"; 
   d="scan'208";a="55024745"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 13 Dec 2018 03:57:30 -0800
Received: from localhost ([::1]:51924 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gXPcP-0000kT-GO
	for like.xu@linux.intel.com; Thu, 13 Dec 2018 06:57:29 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:55926)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <alex.bennee@linaro.org>) id 1gXPaB-0007dT-TJ
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 06:55:12 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <alex.bennee@linaro.org>) id 1gXPa6-00007G-JS
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 06:55:11 -0500
Received: from mail-wm1-x342.google.com ([2a00:1450:4864:20::342]:35368)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <alex.bennee@linaro.org>)
	id 1gXPa6-000069-Ba
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 06:55:06 -0500
Received: by mail-wm1-x342.google.com with SMTP id c126so2096223wmh.0
	for <qemu-devel@nongnu.org>; Thu, 13 Dec 2018 03:55:06 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linaro.org; s=google;
	h=from:to:cc:subject:date:message-id:in-reply-to:references
	:mime-version:content-transfer-encoding;
	bh=2WKnsWU8peQgKSPMtKad0YkSHbbdgmPXuVtkQNcYNoU=;
	b=dYMnoe7QWiKtyHhcJDjD4B5nuaEo8q04K6tsbW0Z2KdmFfnDgtsK+/cjBcAu3aDwQK
	0+b9TlFf1665Qp18UEnru5Jtd0Q9DnH9Vc34IWhBrTtnv47QV5rdAdI6wI9axoRqgEK2
	/TJlr7sKLaZkK8NqaLBpTv5yf61ineFqUySkU=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
	:references:mime-version:content-transfer-encoding;
	bh=2WKnsWU8peQgKSPMtKad0YkSHbbdgmPXuVtkQNcYNoU=;
	b=CRFGWYNloC01+K1/Yt1FUYT4HS63OoHKGvnqLRZQxXYTkZoJ9KnKPZE//+/A9whJcR
	6uHCW6CGtuUR0RHwgaTenbSKyUlrMNq6CVb3Zhlml4anhd0MeC4vXQHqOlV8G6tqmvIn
	sLSu/fIRuIAL+lnSjF+0kwt3fTr8d3CEow1FjKwrtnZnQU1kVghe07Zl3Ogu8cYNxQSf
	N1IzOBnCxk5DXMmFuPwodmeif5kCp8W4blNTNvKZv6s+uusPXazeBj+UgVoEl4k5sOWP
	d7FXnjIpcbKmfFefGihdumq02z8qK/U2j05cnh6O95C6Bx1dHf1eM3ME33oDfDqmZsNE
	e1Uw==
X-Gm-Message-State: AA+aEWamL1eXGuYXeJYyp2bVnOPsbIfUVpgspuGLCDt1i3mp0S9Lx0h5
	/lTbg6RlJQoYsFmhotoX9JehWtMkxyI=
X-Google-Smtp-Source: AFSGD/WZFlL+4ehxbcz+tKSww0ARsVSOxRlYMrcIQa7dwQ6gW/hQhjWzH8gbBYBKS6i8MxnlCftc2w==
X-Received: by 2002:a1c:c90b:: with SMTP id f11mr9889949wmb.33.1544702105176; 
	Thu, 13 Dec 2018 03:55:05 -0800 (PST)
Received: from zen.linaro.local ([81.128.185.34])
	by smtp.gmail.com with ESMTPSA id v5sm2174274wrn.71.2018.12.13.03.55.03
	(version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
	Thu, 13 Dec 2018 03:55:04 -0800 (PST)
Received: from zen.linaroharston (localhost [127.0.0.1])
	by zen.linaro.local (Postfix) with ESMTP id 844A43E035F;
	Thu, 13 Dec 2018 11:55:03 +0000 (GMT)
From: =?UTF-8?q?Alex=20Benn=C3=A9e?= <alex.bennee@linaro.org>
To: qemu-devel@nongnu.org
Date: Thu, 13 Dec 2018 11:55:02 +0000
Message-Id: <20181213115503.24188-2-alex.bennee@linaro.org>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20181213115503.24188-1-alex.bennee@linaro.org>
References: <20181213115503.24188-1-alex.bennee@linaro.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 2a00:1450:4864:20::342
Subject: [Qemu-devel] [PATCH v1 1/2] target/arm: kvm64 make guest debug AA32
 break point aware
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: mark.rutland@arm.com, Peter Maydell <peter.maydell@linaro.org>,
	Omair Javaid <omair.javaid@linaro.org>,
	ard.biesheuvel@linaro.org, qemu-arm@nongnu.org,
	=?UTF-8?q?Alex=20Benn=C3=A9e?= <alex.bennee@linaro.org>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

When supported by the hardware we can run AA32 guests or even AA64 EL1
code with AA32 EL0 mode code. Inserting a AA64 break point into AA32
code tends to break things. This is especially acute with gdb as it
inserts temporary breakpoints when stepping through code.

The heuristic of checking the current mode works but it's not perfect.
A user could be placing a break point in code after a mode switch and
that will still fail. However there doesn't seem to be a way to force
a hbreak by default. According to "set breakpoint auto-hw on":

  This is the default behavior. When GDB sets a breakpoint, it will try
  to use the target memory map to decide if software or hardware
  breakpoint must be used.

Reported-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
Signed-off-by: Alex Benn√©e <alex.bennee@linaro.org>
Cc: Omair Javaid <omair.javaid@linaro.org>
---
 target/arm/kvm64.c | 13 ++++++++++---
 1 file changed, 10 insertions(+), 3 deletions(-)

diff --git a/target/arm/kvm64.c b/target/arm/kvm64.c
index 0a502091e7..dd564a59b7 100644
--- a/target/arm/kvm64.c
+++ b/target/arm/kvm64.c
@@ -989,14 +989,20 @@ int kvm_arch_get_registers(CPUState *cs)
     return ret;
 }
 
-/* C6.6.29 BRK instruction */
+/* BRK (A64) and BKPT (A32) instructions */
 static const uint32_t brk_insn = 0xd4200000;
+static const uint32_t bkpt_insn = 0xe1200070;
 
 int kvm_arch_insert_sw_breakpoint(CPUState *cs, struct kvm_sw_breakpoint *bp)
 {
+    CPUARMState *env = &ARM_CPU(cs)->env;
+    int el = arm_current_el(env);
+    bool is_aa64 = arm_el_is_aa64(env, el);
+    const uint32_t *bpi = is_aa64 ? &brk_insn : &bkpt_insn;
+
     if (have_guest_debug) {
         if (cpu_memory_rw_debug(cs, bp->pc, (uint8_t *)&bp->saved_insn, 4, 0) ||
-            cpu_memory_rw_debug(cs, bp->pc, (uint8_t *)&brk_insn, 4, 1)) {
+            cpu_memory_rw_debug(cs, bp->pc, (uint8_t *)bpi, 4, 1)) {
             return -EINVAL;
         }
         return 0;
@@ -1012,7 +1018,7 @@ int kvm_arch_remove_sw_breakpoint(CPUState *cs, struct kvm_sw_breakpoint *bp)
 
     if (have_guest_debug) {
         if (cpu_memory_rw_debug(cs, bp->pc, (uint8_t *)&brk, 4, 0) ||
-            brk != brk_insn ||
+            !(brk == brk_insn || brk == bkpt_insn) ||
             cpu_memory_rw_debug(cs, bp->pc, (uint8_t *)&bp->saved_insn, 4, 1)) {
             return -EINVAL;
         }
@@ -1055,6 +1061,7 @@ bool kvm_arm_handle_debug(CPUState *cs, struct kvm_debug_exit_arch *debug_exit)
             return false;
         }
         break;
+    case EC_AA32_BKPT:
     case EC_AA64_BKPT:
         if (kvm_find_sw_breakpoint(cs, env->pc)) {
             return true;
-- 
2.17.1


