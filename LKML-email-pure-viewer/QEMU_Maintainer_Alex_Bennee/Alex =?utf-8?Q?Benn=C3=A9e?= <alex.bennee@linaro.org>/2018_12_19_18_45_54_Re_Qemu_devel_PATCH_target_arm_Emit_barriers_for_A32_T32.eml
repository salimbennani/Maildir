Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  20 Dec 2018 08:41:45 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 0A01258055F
	for <like.xu@linux.intel.com>; Wed, 19 Dec 2018 10:46:29 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 19 Dec 2018 10:46:28 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3ArLHwux35MX0D8/VzsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?seMeK/ad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWRBUchRWSJfAIyy?=
 =?us-ascii?q?YYgBAOUdMuhXsof9v1kDoxmxCAWxCu7j1iFHhmTt0K0myuQsCx3K0BA6Et8Mtn?=
 =?us-ascii?q?nfsdX7NL0VUeCw1KTF0THDYO1Z2Dzg9YXHbBYhofeWWr1ubMHczlMgFwfbgVSf?=
 =?us-ascii?q?s4DqJC2a1uILs2eF8eVtTuavi28hqw5ruDivwd0gio7ThoIa013J8zhyzoUtJd?=
 =?us-ascii?q?CgVkJ3fd2pHIFNuy2HNIZ6WN0uTm9otSog17ELu4a3cSsXxJg92hLTdf+Kf5KV?=
 =?us-ascii?q?7h/gVOudOzl1iX1jdbminRi961Kgxff5VsSs0FZFsC5Fkt7Uu3AJ1hzT8dSHSu?=
 =?us-ascii?q?Bn8keu3zaPyhrf6uZeIUA7jabbKpghzaAslpcLr0jPAiz7lF/rgKOLdUgo4Pak?=
 =?us-ascii?q?5urnb7n8u5ORNZd4igTkPaQvnsy/D/44Mg8LX2WD4OSzyrjj/VDgTLpXkPI2jL?=
 =?us-ascii?q?fWsJTDKcsAoa65HglV3Zo95BakCDum1NUYnXoZI15fdxOHkpDkO1XPIPD+EPe+?=
 =?us-ascii?q?jE6gkDZtx/DaILLhBo/BIWTEkLfkZrt97UlcyAw8zdBZ+pJYELYBIOj8WkPprt?=
 =?us-ascii?q?zXEgc5MxCow+bgENh90oIeWWGRDaODP6LSrESF5uYuI+mKeY8UtyzxK/kj5/7y?=
 =?us-ascii?q?k3A5nUURcrWu3ZsSOziFGO97KRCZfWb0mYVGVmMLpRYlCurtjlKETHhUfXn1Wq?=
 =?us-ascii?q?s94jQyDsWhFZvCQYa2x6WM2Tr+EpBIa2QVN1aXDH29coyFX+sLOjufJ9IknjEa?=
 =?us-ascii?q?WLzkUYI4yBy1qCf8zLxoKPeS/TcX4on+3tp47PGGiBcp6DZvBN6c2Wzec2Yhpm?=
 =?us-ascii?q?4USiV++alurUF5zh/XyaVkjuYeENVC6/5NVi8+NJjV1es8DMr9DFHvZNCMHX+i?=
 =?us-ascii?q?T8XuKzw3SFM8i4sHZ0ttXd+viBbO0gKuArkcjbvNA4Y7pPGPl0PtLtpwni6VnJ?=
 =?us-ascii?q?IqiEMrF44WbTWr?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AvAABVkRpchxHrdtBkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUwUBAQsBgTCCTxODfYh4ix2CDXyWYYFzEwEBGBSEQIJtIjYHDQEDAQEBAQE?=
 =?us-ascii?q?BAgETAQEBCgsJCBsOIwyCNgUCAxoBBoJcAQICAQECIAQZAQEECikBAgIBAQIGA?=
 =?us-ascii?q?QEKGgIFHQQCAgMBCwEkAQUBARsGEwWDHYF6CAEDAZxPPIopcHwzgnYBAQWCQ4N?=
 =?us-ascii?q?kgQUIEhBpihiBHIIWgRGBcG01hQGDCIJXoTYHAopUhw4YgV6FH4J6h2KZWwYCC?=
 =?us-ascii?q?QcPIYErAYIHM0qDL4IbDBcSiEyFP3KBB4tpgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AvAABVkRpchxHrdtBkHAEBAQQBAQcEAQGBUwUBAQsBgTC?=
 =?us-ascii?q?CTxODfYh4ix2CDXyWYYFzEwEBGBSEQIJtIjYHDQEDAQEBAQEBAgETAQEBCgsJC?=
 =?us-ascii?q?BsOIwyCNgUCAxoBBoJcAQICAQECIAQZAQEECikBAgIBAQIGAQEKGgIFHQQCAgM?=
 =?us-ascii?q?BCwEkAQUBARsGEwWDHYF6CAEDAZxPPIopcHwzgnYBAQWCQ4NkgQUIEhBpihiBH?=
 =?us-ascii?q?IIWgRGBcG01hQGDCIJXoTYHAopUhw4YgV6FH4J6h2KZWwYCCQcPIYErAYIHM0q?=
 =?us-ascii?q?DL4IbDBcSiEyFP3KBB4tpgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,373,1539673200"; 
   d="scan'208";a="67582457"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mga01b.intel.com with ESMTP/TLS/AES256-SHA; 19 Dec 2018 10:46:27 -0800
Received: from localhost ([::1]:33570 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gZgrT-0006hl-9x
	for like.xu@linux.intel.com; Wed, 19 Dec 2018 13:46:27 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:37694)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <alex.bennee@linaro.org>) id 1gZgr2-0006gs-M8
	for qemu-devel@nongnu.org; Wed, 19 Dec 2018 13:46:01 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <alex.bennee@linaro.org>) id 1gZgqz-0002Ks-Ke
	for qemu-devel@nongnu.org; Wed, 19 Dec 2018 13:46:00 -0500
Received: from mail-wm1-x342.google.com ([2a00:1450:4864:20::342]:39563)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <alex.bennee@linaro.org>)
	id 1gZgqz-0002KM-CG
	for qemu-devel@nongnu.org; Wed, 19 Dec 2018 13:45:57 -0500
Received: by mail-wm1-x342.google.com with SMTP id f81so7509537wmd.4
	for <qemu-devel@nongnu.org>; Wed, 19 Dec 2018 10:45:56 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linaro.org; s=google;
	h=references:user-agent:from:to:cc:subject:in-reply-to:date
	:message-id:mime-version:content-transfer-encoding;
	bh=3CPCBglxqJ+CwWIuzfs2qNqGxOVeQitBUt6WxgrJhOk=;
	b=UM3yMTdT2p5VabgPpsx93ZlU4FEfU5TfHXf91lqTv3vD+euyWjOM2wxVE5eIl8iuTQ
	iBm64wY9+xh6mAf85OsDkeJv+EIEDfHeigE55O79kuSom49yUdiUAL+X0sUCoQAfn4ZJ
	c0BHUU403VYx5TrdV+LnDLox3mLSZ6MYT0ly0=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:references:user-agent:from:to:cc:subject
	:in-reply-to:date:message-id:mime-version:content-transfer-encoding;
	bh=3CPCBglxqJ+CwWIuzfs2qNqGxOVeQitBUt6WxgrJhOk=;
	b=Nn+WQFljTs9H7Hun85ZCXaNQBX6EcLOJFdYsK45vOupJw735iGAWiKtcstMo7ib/ZD
	TfA+Ogc480NCo4iGOrmakt1LkI+rUfJNzDFPMuwfg4mm4owdQbBTk7aUNFHQityuWw1p
	jQI67DfE8VLIdhXtktHVluYEEdcPs+CoGX0xuyJZ/1r0mzHE+GDcoFGCHoIJW5gLTRe3
	UjLaSIgYCIWwiDD9o/gAocj1sQAlhyHx3NmGyhaL1PLHOHOlgvTfDJTpGeTaENGDxmDo
	oJ+iE8IpHOB4YE68rtI6QhKYCmYggUPNSJMazVn15jo9+KxrWWBDiUNjJiEbfEJntzkB
	pncw==
X-Gm-Message-State: AA+aEWbgzLnF2OFyK/8u/20/7hIDk8IGYNs3a9i9H8a1pbNahMRf5lr+
	TrmoOdVmHszHrFsX/0Yel3vmIl2EJhw=
X-Google-Smtp-Source: AFSGD/UrSRsuggCGl4NTLl+apD+oMYogjjlJPg6g8KCILWd6d0wpW5pVvBL1cMd+N/mSk3GPRHrI5g==
X-Received: by 2002:a1c:f0e:: with SMTP id 14mr8124890wmp.37.1545245155808;
	Wed, 19 Dec 2018 10:45:55 -0800 (PST)
Received: from zen.linaro.local ([81.128.185.34])
	by smtp.gmail.com with ESMTPSA id
	t12sm9522288wrr.65.2018.12.19.10.45.55
	(version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
	Wed, 19 Dec 2018 10:45:55 -0800 (PST)
Received: from zen (localhost [127.0.0.1])
	by zen.linaro.local (Postfix) with ESMTPS id ADC703E0380;
	Wed, 19 Dec 2018 18:45:54 +0000 (GMT)
References: <20181210152850.435-1-peter.maydell@linaro.org>
User-agent: mu4e 1.1.0; emacs 26.1.90
From: Alex =?utf-8?Q?Benn=C3=A9e?= <alex.bennee@linaro.org>
To: Peter Maydell <peter.maydell@linaro.org>
In-reply-to: <20181210152850.435-1-peter.maydell@linaro.org>
Date: Wed, 19 Dec 2018 18:45:54 +0000
Message-ID: <87h8f99wyl.fsf@linaro.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 2a00:1450:4864:20::342
Subject: Re: [Qemu-devel] [PATCH] target/arm: Emit barriers for A32/T32
 load-acquire/store-release insns
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: qemu-arm@nongnu.org, Richard Henderson <richard.henderson@linaro.org>,
	qemu-devel@nongnu.org, patches@linaro.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>


Peter Maydell <peter.maydell@linaro.org> writes:

> Now that MTTCG is here, the comment in the 32-bit Arm decoder that
> "Since the emulation does not have barriers, the acquire/release
> semantics need no special handling" is no longer true. Emit the
> correct barriers for the load-acquire/store-release insns, as
> we already do in the A64 decoder.
>
> Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
> ---
> I've not run into this in practice, and there's very little
> aarch32 code out there that is built to use the new-in-v8
> instructions as far as I'm aware, but since it would be very
> painful to track down this bug if we ran into it in the
> wild it seems worth fixing...

There should be a patch in reply to this that ports my barrier tests to
a linux-user tcg test case. However I've been unable to get the "mp"
test to fail under translation, even on aarch64 hosts
(ThunderX/qemu-test) which are nominally out of order. x86 hosts are
pretty forgiving anyway. The SynQuacer being A53 based is stubbornly
in-order so won't fail anyway. If you have access to any fancy OoO
AArch32 hardware to confirm the test is good please let me know.

Anyway I can at least confirm that when running the mp_acqrel test case
that the correct barrier ops are emitted. All the barrier tests pass
so:

Tested-by: Alex Benn=C3=A9e <alex.bennee@linaro.org>
[by inspection]
Reviewed-by: Alex Benn=C3=A9e <alex.bennee@linaro.org>


> ---
>  target/arm/translate.c | 33 ++++++++++++++++++++++++++-------
>  1 file changed, 26 insertions(+), 7 deletions(-)
>
> diff --git a/target/arm/translate.c b/target/arm/translate.c
> index 7c4675ffd8a..e8fd824f3f5 100644
> --- a/target/arm/translate.c
> +++ b/target/arm/translate.c
> @@ -9733,6 +9733,8 @@ static void disas_arm_insn(DisasContext *s, unsigne=
d int insn)
>                      rd =3D (insn >> 12) & 0xf;
>                      if (insn & (1 << 23)) {
>                          /* load/store exclusive */
> +                        bool is_ld =3D extract32(insn, 20, 1);
> +                        bool is_lasr =3D !extract32(insn, 8, 1);
>                          int op2 =3D (insn >> 8) & 3;
>                          op1 =3D (insn >> 21) & 0x3;
>
> @@ -9760,11 +9762,12 @@ static void disas_arm_insn(DisasContext *s, unsig=
ned int insn)
>                          addr =3D tcg_temp_local_new_i32();
>                          load_reg_var(s, addr, rn);
>
> -                        /* Since the emulation does not have barriers,
> -                           the acquire/release semantics need no special
> -                           handling */
> +                        if (is_lasr && !is_ld) {
> +                            tcg_gen_mb(TCG_MO_ALL | TCG_BAR_STRL);
> +                        }
> +
>                          if (op2 =3D=3D 0) {
> -                            if (insn & (1 << 20)) {
> +                            if (is_ld) {
>                                  tmp =3D tcg_temp_new_i32();
>                                  switch (op1) {
>                                  case 0: /* lda */
> @@ -9810,7 +9813,7 @@ static void disas_arm_insn(DisasContext *s, unsigne=
d int insn)
>                                  }
>                                  tcg_temp_free_i32(tmp);
>                              }
> -                        } else if (insn & (1 << 20)) {
> +                        } else if (is_ld) {
>                              switch (op1) {
>                              case 0: /* ldrex */
>                                  gen_load_exclusive(s, rd, 15, addr, 2);
> @@ -9847,6 +9850,10 @@ static void disas_arm_insn(DisasContext *s, unsign=
ed int insn)
>                              }
>                          }
>                          tcg_temp_free_i32(addr);
> +
> +                        if (is_lasr && is_ld) {
> +                            tcg_gen_mb(TCG_MO_ALL | TCG_BAR_LDAQ);
> +                        }
>                      } else if ((insn & 0x00300f00) =3D=3D 0) {
>                          /* 0bcccc_0001_0x00_xxxx_xxxx_0000_1001_xxxx
>                          *  - SWP, SWPB
> @@ -10862,6 +10869,8 @@ static void disas_thumb2_insn(DisasContext *s, ui=
nt32_t insn)
>                  tcg_gen_addi_i32(tmp, tmp, s->pc);
>                  store_reg(s, 15, tmp);
>              } else {
> +                bool is_lasr =3D false;
> +                bool is_ld =3D extract32(insn, 20, 1);
>                  int op2 =3D (insn >> 6) & 0x3;
>                  op =3D (insn >> 4) & 0x3;
>                  switch (op2) {
> @@ -10883,12 +10892,18 @@ static void disas_thumb2_insn(DisasContext *s, =
uint32_t insn)
>                  case 3:
>                      /* Load-acquire/store-release exclusive */
>                      ARCH(8);
> +                    is_lasr =3D true;
>                      break;
>                  }
> +
> +                if (is_lasr && !is_ld) {
> +                    tcg_gen_mb(TCG_MO_ALL | TCG_BAR_STRL);
> +                }
> +
>                  addr =3D tcg_temp_local_new_i32();
>                  load_reg_var(s, addr, rn);
>                  if (!(op2 & 1)) {
> -                    if (insn & (1 << 20)) {
> +                    if (is_ld) {
>                          tmp =3D tcg_temp_new_i32();
>                          switch (op) {
>                          case 0: /* ldab */
> @@ -10927,12 +10942,16 @@ static void disas_thumb2_insn(DisasContext *s, =
uint32_t insn)
>                          }
>                          tcg_temp_free_i32(tmp);
>                      }
> -                } else if (insn & (1 << 20)) {
> +                } else if (is_ld) {
>                      gen_load_exclusive(s, rs, rd, addr, op);
>                  } else {
>                      gen_store_exclusive(s, rm, rs, rd, addr, op);
>                  }
>                  tcg_temp_free_i32(addr);
> +
> +                if (is_lasr && is_ld) {
> +                    tcg_gen_mb(TCG_MO_ALL | TCG_BAR_LDAQ);
> +                }
>              }
>          } else {
>              /* Load/store multiple, RFE, SRS.  */


--
Alex Benn=C3=A9e

