Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:20:30 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga007.fm.intel.com (fmsmga007.fm.intel.com [10.253.24.52])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id ECAA6580224
	for <like.xu@linux.intel.com>; Fri, 30 Nov 2018 08:17:39 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by fmsmga007-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 30 Nov 2018 08:17:39 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AMDvrsxXG4ua4A0diXDiRF/ytx1zV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYbRaGt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KptVRTmij?=
 =?us-ascii?q?oINyQh/WHZhMN+jLxVrxCvqRJ8zIHbfI6bOudmfq7ff90XSndNU8hNWyNfGYOx?=
 =?us-ascii?q?dJcPD/MbMOpEs4XwvVkDoB2jDgesHuPvzTpIi2fq0K0+zesgHhzN0RE+ENIItn?=
 =?us-ascii?q?TTtsv6P7oVXO+vyKnH0zrCY+lN1jjj7ojIdA4uru+XULJ0cMrRz1MgFxnCjlmK?=
 =?us-ascii?q?rozlJTyV2/0LvmOG7ORgTfqih3A7pwxyuDSj29ogh4rTio4LxF3J9T91zJs3KN?=
 =?us-ascii?q?GgS0N3fMSoHIZOuyyZLYd6X8AvTmFytCs0xbALv4OwcjIQx5Q93RHfbuSKc4iW?=
 =?us-ascii?q?7RLnU+acOTN4hHN+eLKjnBa+60egyuvhVsWu11ZKtCVFnsHNtnALyRPT9tCKRu?=
 =?us-ascii?q?Vh8kqiwzqDyh3f5+JeLUwqm6fWK4QtzqMym5YLtETMBC72mEH4jK+McUUk//Cl?=
 =?us-ascii?q?6/35bbXju5+QLpJ7hR/gMqswnsyzGP83Mg8TX2id5euzyqbj8Ur9QLVLjf05jL?=
 =?us-ascii?q?PVsZ/HJckDoq65AglV0pss6hqlDjem1sgYkmcDLF5fZB2HiI3pNkrIIPD/C/e/?=
 =?us-ascii?q?jFKskCpxy/DBJL3hDY3BLmLfn7f5YbZ990lcxRI3zdBe5JJbFKsNIf3uWkLqsN?=
 =?us-ascii?q?zYDxk5MxG7wur9CdV90J8eVnyLAqODLKzStlqItaoSJfKRbtoVpCrlMKpioPrv?=
 =?us-ascii?q?lmMi31kae6avwN0Qcn//G/1nJ0CQZz3rmssAFmER+RMzSfGvhFCcXDoAWnCpQq?=
 =?us-ascii?q?hp4zg6DJ6hX57OQ53ojLGf0SP+BJBPe21dFniKFnHncZjCXO0DPzmPKM1smSBR?=
 =?us-ascii?q?SL66VoU63guvvgKp970yN+fR52gUuIzu0PBz4Ovckwx08iZ7XOqH1GTYZmV5ji?=
 =?us-ascii?q?siSjkwXa039UV5x0fF26V+hfFVPdhS4fpTVUE9L5GKnL8yMMz7Rg+UJoTBc12h?=
 =?us-ascii?q?WNjzWTw=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0COAADQYQFchxHrdtBjHgEGBwaBUwcLA?=
 =?us-ascii?q?QGBL4Jig3mId4srgg18lkyBdg8BARgUhDsDAoM2IjYHDQEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BCgsJCBsOIwxCARABgWIFAgMYCYJcAQICAQECIB0BAQQKKQECAgEBAgYBAQoaA?=
 =?us-ascii?q?gUaAwQCAgMBCwEkAQUBARsZBYMcgXoIAQMBmnM8ih1wgS+CdgEBBYJDg2CBBQg?=
 =?us-ascii?q?SEGmJc4EcghaBEAGBcG01hQGDBIJXlVqKXQcCkTcYiVmHRiyYCgYCCQcPIYEsB?=
 =?us-ascii?q?4F/M0qDL4IbDBcSiEyFP3KBB4ZihBoqLIF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0COAADQYQFchxHrdtBjHgEGBwaBUwcLAQGBL4Jig3mId4s?=
 =?us-ascii?q?rgg18lkyBdg8BARgUhDsDAoM2IjYHDQEDAQEBAQEBAgETAQEBCgsJCBsOIwxCA?=
 =?us-ascii?q?RABgWIFAgMYCYJcAQICAQECIB0BAQQKKQECAgEBAgYBAQoaAgUaAwQCAgMBCwE?=
 =?us-ascii?q?kAQUBARsZBYMcgXoIAQMBmnM8ih1wgS+CdgEBBYJDg2CBBQgSEGmJc4EcghaBE?=
 =?us-ascii?q?AGBcG01hQGDBIJXlVqKXQcCkTcYiVmHRiyYCgYCCQcPIYEsB4F/M0qDL4IbDBc?=
 =?us-ascii?q?SiEyFP3KBB4ZihBoqLIF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,299,1539673200"; 
   d="scan'208";a="140273746"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 30 Nov 2018 08:17:38 -0800
Received: from localhost ([::1]:33627 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gSlU1-0005w1-Vp
	for like.xu@linux.intel.com; Fri, 30 Nov 2018 11:17:38 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:45879)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <alex.bennee@linaro.org>) id 1gSlSY-00059e-Fj
	for qemu-devel@nongnu.org; Fri, 30 Nov 2018 11:16:07 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <alex.bennee@linaro.org>) id 1gSlSV-0000HH-PG
	for qemu-devel@nongnu.org; Fri, 30 Nov 2018 11:16:06 -0500
Received: from mail-wm1-x341.google.com ([2a00:1450:4864:20::341]:38837)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <alex.bennee@linaro.org>)
	id 1gSlSV-0000Fj-HD
	for qemu-devel@nongnu.org; Fri, 30 Nov 2018 11:16:03 -0500
Received: by mail-wm1-x341.google.com with SMTP id k198so6289915wmd.3
	for <qemu-devel@nongnu.org>; Fri, 30 Nov 2018 08:16:03 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linaro.org; s=google;
	h=references:user-agent:from:to:cc:subject:in-reply-to:date
	:message-id:mime-version:content-transfer-encoding;
	bh=dxtYatjfhm+CvNawagA+xuUj7Ni5B6U6oQA9g+Yc4OE=;
	b=FWjAYROKZpY8vNXoInK8+WX1lWJm8sWtI8Hv4EAndqCrDHbVFA+I0ltO1LoutEMmwQ
	OTkhMWhfDqbrxMC9Hh0GxyFCRhE0bzZeb6+7l3fb10SO5EayQ5I0odKL9AY2gpbebtNA
	bpOVtNlVcMdqBwGg6t/Yeeb91WYWe9dK5vgQQ=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:references:user-agent:from:to:cc:subject
	:in-reply-to:date:message-id:mime-version:content-transfer-encoding;
	bh=dxtYatjfhm+CvNawagA+xuUj7Ni5B6U6oQA9g+Yc4OE=;
	b=p37ECuMFcBo104baxm/Yubkft52H/kcDHWnEy426KvDtCv0Guc4mLFTM69dwTeiBUW
	zBF1yrEQ8BgqLqCFHbYPcXdlkFEZbwUBPgD5Lvd4BmAGbLSsXrCmpJDieaIZsvyL77wv
	wchvtJspstH3ALp1lEVBikyhl1W3lGnCgE2kOXTQJi0p4Dcca3YJHRuMkQJ060e/JRM/
	ON5o6ppSI0kCmjfgth7Xrl33OU7q54Si9rpIJwo1mjd2tlPqO4o6duT3btnDPPoRQ4qe
	Dacsu/uNvL8ZX8fR6UTnlNvC1j82wzUgvAcFMSOWEsri+5lgtvrxNk8UxU5i8pXvkHq0
	SgOg==
X-Gm-Message-State: AA+aEWYxNxRpdyzsNiz7nqo9xTh3DZlUTYDgu/e+lk4+W6cww70B1n3D
	Jeu2Z5iQor8oTwzgjWiHoIrRJvUGLw8=
X-Google-Smtp-Source: AFSGD/XHzPWNhWm5dU9uJoDPiIgT0M8cL5D13fWd5av1/iSaWhGy+ply45iLLywunXJdJ6vur+p8lA==
X-Received: by 2002:a1c:48c1:: with SMTP id
	v184-v6mr6280810wma.26.1543594561740; 
	Fri, 30 Nov 2018 08:16:01 -0800 (PST)
Received: from zen.linaro.local ([81.128.185.34])
	by smtp.gmail.com with ESMTPSA id
	x12sm5852279wrt.20.2018.11.30.08.16.00
	(version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
	Fri, 30 Nov 2018 08:16:01 -0800 (PST)
Received: from zen (localhost [127.0.0.1])
	by zen.linaro.local (Postfix) with ESMTPS id 5BAEC3E0190;
	Fri, 30 Nov 2018 16:16:00 +0000 (GMT)
References: <20181123144558.5048-1-richard.henderson@linaro.org>
	<20181123144558.5048-9-richard.henderson@linaro.org>
User-agent: mu4e 1.1.0; emacs 26.1.90
From: Alex =?utf-8?Q?Benn=C3=A9e?= <alex.bennee@linaro.org>
To: qemu-devel@nongnu.org
In-reply-to: <20181123144558.5048-9-richard.henderson@linaro.org>
Date: Fri, 30 Nov 2018 16:16:00 +0000
Message-ID: <87tvjy35j3.fsf@linaro.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 2a00:1450:4864:20::341
Subject: Re: [Qemu-devel] [PATCH for-4.0 v2 08/37] tcg/i386: Force
 qemu_ld/st arguments into fixed registers
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Alistair.Francis@wdc.com
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>


Richard Henderson <richard.henderson@linaro.org> writes:

> This is an incremental step toward moving the qemu_ld/st
> code sequence out of line.
>
> Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
> ---
>  tcg/i386/tcg-target.inc.c | 203 +++++++++++++++++++++++++++++++-------
>  1 file changed, 169 insertions(+), 34 deletions(-)
>
> diff --git a/tcg/i386/tcg-target.inc.c b/tcg/i386/tcg-target.inc.c
> index 07df4b2b12..50e5dc31b3 100644
> --- a/tcg/i386/tcg-target.inc.c
> +++ b/tcg/i386/tcg-target.inc.c
> @@ -171,6 +171,80 @@ static bool have_lzcnt;
>
>  static tcg_insn_unit *tb_ret_addr;
>
> +typedef enum {
> +    ARG_ADDR,
> +    ARG_STVAL,
> +    ARG_LDVAL,
> +} QemuMemArgType;
> +
> +#ifdef CONFIG_SOFTMMU
> +/*
> + * Constraint to choose a particular register.  This is used for softmmu
> + * loads and stores.  Registers with no assignment get an empty string.
> + */
> +static const char * const one_reg_constraint[TCG_TARGET_NB_REGS] =3D {
> +    [TCG_REG_EAX] =3D "a",
> +    [TCG_REG_EBX] =3D "b",
> +    [TCG_REG_ECX] =3D "c",
> +    [TCG_REG_EDX] =3D "d",
> +    [TCG_REG_ESI] =3D "S",
> +    [TCG_REG_EDI] =3D "D",
> +#if TCG_TARGET_REG_BITS =3D=3D 64
> +    [TCG_REG_R8]  =3D "E",
> +    [TCG_REG_R9]  =3D "N",
> +#endif
> +};
> +
> +/*
> + * Calling convention for the softmmu load and store thunks.
> + *
> + * For 64-bit, we mostly use the host calling convention, therefore the
> + * real first argument is reserved for the ENV parameter that is passed
> + * on to the slow path helpers.
> + *
> + * For 32-bit, the host calling convention is stack based; we invent a
> + * private convention that uses 4 of the 6 available host registers.
> + * We reserve EAX and EDX as temporaries for use by the thunk, we require
> + * INDEX_op_qemu_st_i32 to have a 'q' register from which to store, and
> + * further complicate this last by wanting a call-clobbered for that sto=
re.
> + * The 'q' requirement allows MO_8 stores at all; the call-clobbered part
> + * allows bswap to operate in-place, clobbering the input.
> + */
> +static TCGReg softmmu_arg(QemuMemArgType type, bool is_64, int hi)
> +{
> +    switch (type) {
> +    case ARG_ADDR:
> +        tcg_debug_assert(!hi || TARGET_LONG_BITS > TCG_TARGET_REG_BITS);
> +        if (TCG_TARGET_REG_BITS =3D=3D 64) {
> +            return tcg_target_call_iarg_regs[1];
> +        } else {
> +            return hi ? TCG_REG_EDI : TCG_REG_ESI;
> +        }
> +    case ARG_STVAL:
> +        tcg_debug_assert(!hi || (TCG_TARGET_REG_BITS =3D=3D 32 && is_64)=
);
> +        if (TCG_TARGET_REG_BITS =3D=3D 64) {
> +            return tcg_target_call_iarg_regs[2];
> +        } else {
> +            return hi ? TCG_REG_EBX : TCG_REG_ECX;
> +        }
> +    case ARG_LDVAL:
> +        tcg_debug_assert(!hi || (TCG_TARGET_REG_BITS =3D=3D 32 && is_64)=
);
> +        return tcg_target_call_oarg_regs[hi];
> +    }
> +    g_assert_not_reached();
> +}
> +
> +static const char *constrain_memop_arg(QemuMemArgType type, bool is_64, =
int hi)
> +{
> +    return one_reg_constraint[softmmu_arg(type, is_64, hi)];
> +}
> +#else
> +static const char *constrain_memop_arg(QemuMemArgType type, bool is_64, =
int hi)
> +{
> +    return "L";
> +}
> +#endif /* CONFIG_SOFTMMU */
> +
>  static bool patch_reloc(tcg_insn_unit *code_ptr, int type,
>                          intptr_t value, intptr_t addend)
>  {
> @@ -1680,11 +1754,15 @@ static TCGReg tcg_out_tlb_load(TCGContext *s, TCG=
Reg addrlo, TCGReg addrhi,
>         copies the entire guest address for the slow path, while truncati=
on
>         for the 32-bit host happens with the fastpath ADDL below.  */
>      if (TCG_TARGET_REG_BITS =3D=3D 64) {
> -        base =3D tcg_target_call_iarg_regs[1];
> +        tcg_debug_assert(addrlo =3D=3D tcg_target_call_iarg_regs[1]);
> +        if (TARGET_LONG_BITS =3D=3D 32) {
> +            tcg_out_ext32u(s, addrlo, addrlo);
> +        }
> +        base =3D addrlo;
>      } else {
>          base =3D r1;
> +        tcg_out_mov(s, ttype, base, addrlo);
>      }
> -    tcg_out_mov(s, ttype, base, addrlo);
>
>      /* jne slow_path */
>      tcg_out_opc(s, OPC_JCC_long + JCC_JNE, 0, 0, 0);
> @@ -2009,16 +2087,22 @@ static void tcg_out_qemu_ld_direct(TCGContext *s,=
 TCGReg datalo, TCGReg datahi,
>     common. */
>  static void tcg_out_qemu_ld(TCGContext *s, const TCGArg *args, bool is64)
>  {
> -    TCGReg datalo, datahi, addrlo;
> -    TCGReg addrhi __attribute__((unused));
> +    TCGReg datalo, addrlo;
> +    TCGReg datahi __attribute__((unused)) =3D -1;
> +    TCGReg addrhi __attribute__((unused)) =3D -1;
>      TCGMemOpIdx oi;
>      TCGMemOp opc;
> +    int i =3D -1;
>
> -    datalo =3D *args++;
> -    datahi =3D (TCG_TARGET_REG_BITS =3D=3D 32 && is64 ? *args++ : 0);
> -    addrlo =3D *args++;
> -    addrhi =3D (TARGET_LONG_BITS > TCG_TARGET_REG_BITS ? *args++ : 0);
> -    oi =3D *args++;
> +    datalo =3D args[++i];

Swapping to i =3D -1 and pre-indexes seems a little unnatural here
compared to a more normal 0 and i++ unless there was a specific reason
to have i in the range of 2-4?

> +    if (TCG_TARGET_REG_BITS =3D=3D 32 && is64) {
> +        datahi =3D args[++i];
> +    }
> +    addrlo =3D args[++i];
> +    if (TARGET_LONG_BITS > TCG_TARGET_REG_BITS) {
> +        addrhi =3D args[++i];
> +    }
> +    oi =3D args[++i];
>      opc =3D get_memop(oi);
>
>  #if defined(CONFIG_SOFTMMU)
> @@ -2027,6 +2111,15 @@ static void tcg_out_qemu_ld(TCGContext *s, const T=
CGArg *args, bool is64)
>          tcg_insn_unit *label_ptr[2];
>          TCGReg base;
>
> +        tcg_debug_assert(datalo =3D=3D softmmu_arg(ARG_LDVAL, is64, 0));
> +        if (TCG_TARGET_REG_BITS =3D=3D 32 && is64) {
> +            tcg_debug_assert(datahi =3D=3D softmmu_arg(ARG_LDVAL, is64, =
1));
> +        }
> +        tcg_debug_assert(addrlo =3D=3D softmmu_arg(ARG_ADDR, 0, 0));
> +        if (TARGET_LONG_BITS > TCG_TARGET_REG_BITS) {
> +            tcg_debug_assert(addrhi =3D=3D softmmu_arg(ARG_ADDR, 0, 1));
> +        }
> +
>          base =3D tcg_out_tlb_load(s, addrlo, addrhi, mem_index, opc,
>                                  label_ptr, offsetof(CPUTLBEntry, addr_re=
ad));
>
> @@ -2149,16 +2242,22 @@ static void tcg_out_qemu_st_direct(TCGContext *s,=
 TCGReg datalo, TCGReg datahi,
>
>  static void tcg_out_qemu_st(TCGContext *s, const TCGArg *args, bool is64)
>  {
> -    TCGReg datalo, datahi, addrlo;
> -    TCGReg addrhi __attribute__((unused));
> +    TCGReg datalo, addrlo;
> +    TCGReg datahi __attribute__((unused)) =3D -1;
> +    TCGReg addrhi __attribute__((unused)) =3D -1;
>      TCGMemOpIdx oi;
>      TCGMemOp opc;
> +    int i =3D -1;

And again here

>
> -    datalo =3D *args++;
> -    datahi =3D (TCG_TARGET_REG_BITS =3D=3D 32 && is64 ? *args++ : 0);
> -    addrlo =3D *args++;
> -    addrhi =3D (TARGET_LONG_BITS > TCG_TARGET_REG_BITS ? *args++ : 0);
> -    oi =3D *args++;
> +    datalo =3D args[++i];
> +    if (TCG_TARGET_REG_BITS =3D=3D 32 && is64) {
> +        datahi =3D args[++i];
> +    }
> +    addrlo =3D args[++i];
> +    if (TARGET_LONG_BITS > TCG_TARGET_REG_BITS) {
> +        addrhi =3D args[++i];
> +    }
> +    oi =3D args[++i];
>      opc =3D get_memop(oi);
>
>  #if defined(CONFIG_SOFTMMU)
> @@ -2167,6 +2266,15 @@ static void tcg_out_qemu_st(TCGContext *s, const T=
CGArg *args, bool is64)
>          tcg_insn_unit *label_ptr[2];
>          TCGReg base;
>
> +        tcg_debug_assert(datalo =3D=3D softmmu_arg(ARG_STVAL, is64, 0));
> +        if (TCG_TARGET_REG_BITS =3D=3D 32 && is64) {
> +            tcg_debug_assert(datahi =3D=3D softmmu_arg(ARG_STVAL, is64, =
1));
> +        }
> +        tcg_debug_assert(addrlo =3D=3D softmmu_arg(ARG_ADDR, 0, 0));
> +        if (TARGET_LONG_BITS > TCG_TARGET_REG_BITS) {
> +            tcg_debug_assert(addrhi =3D=3D softmmu_arg(ARG_ADDR, 0, 1));
> +        }
> +
>          base =3D tcg_out_tlb_load(s, addrlo, addrhi, mem_index, opc,
>                                  label_ptr, offsetof(CPUTLBEntry, addr_wr=
ite));
>
> @@ -2836,15 +2944,6 @@ static const TCGTargetOpDef *tcg_target_op_def(TCG=
Opcode op)
>      static const TCGTargetOpDef r_r_re =3D { .args_ct_str =3D { "r", "r"=
, "re" } };
>      static const TCGTargetOpDef r_0_re =3D { .args_ct_str =3D { "r", "0"=
, "re" } };
>      static const TCGTargetOpDef r_0_ci =3D { .args_ct_str =3D { "r", "0"=
, "ci" } };
> -    static const TCGTargetOpDef r_L =3D { .args_ct_str =3D { "r", "L" } =
};
> -    static const TCGTargetOpDef L_L =3D { .args_ct_str =3D { "L", "L" } =
};
> -    static const TCGTargetOpDef r_L_L =3D { .args_ct_str =3D { "r", "L",=
 "L" } };
> -    static const TCGTargetOpDef r_r_L =3D { .args_ct_str =3D { "r", "r",=
 "L" } };
> -    static const TCGTargetOpDef L_L_L =3D { .args_ct_str =3D { "L", "L",=
 "L" } };
> -    static const TCGTargetOpDef r_r_L_L
> -        =3D { .args_ct_str =3D { "r", "r", "L", "L" } };
> -    static const TCGTargetOpDef L_L_L_L
> -        =3D { .args_ct_str =3D { "L", "L", "L", "L" } };
>      static const TCGTargetOpDef x_x =3D { .args_ct_str =3D { "x", "x" } =
};
>      static const TCGTargetOpDef x_x_x =3D { .args_ct_str =3D { "x", "x",=
 "x" } };
>      static const TCGTargetOpDef x_x_x_x
> @@ -3026,17 +3125,53 @@ static const TCGTargetOpDef *tcg_target_op_def(TC=
GOpcode op)
>          }
>
>      case INDEX_op_qemu_ld_i32:
> -        return TARGET_LONG_BITS <=3D TCG_TARGET_REG_BITS ? &r_L : &r_L_L;
> -    case INDEX_op_qemu_st_i32:
> -        return TARGET_LONG_BITS <=3D TCG_TARGET_REG_BITS ? &L_L : &L_L_L;
> +        {
> +            static TCGTargetOpDef ld32;
> +            int i;
> +
> +            ld32.args_ct_str[0] =3D constrain_memop_arg(ARG_LDVAL, 0, 0);
> +            for (i =3D 0; i * TCG_TARGET_REG_BITS < TARGET_LONG_BITS;
>      ++i) {

This formulation is a bit weird to follow, at first I thought it was
going to overflow TCG_MAX_OP_ARGS until I realised what it was doing.
Maybe a helper function would be a little clearer:

               for (src_reg =3D 0; src_reg < tcg_target_regs_for(TARGET_LON=
G_BITS), ++i)

Same comment applies bellow.

> +                ld32.args_ct_str[i + 1] =3D constrain_memop_arg(ARG_ADDR=
, 0, i);
> +            }
> +            return &ld32;
> +        }
>      case INDEX_op_qemu_ld_i64:
> -        return (TCG_TARGET_REG_BITS =3D=3D 64 ? &r_L
> -                : TARGET_LONG_BITS <=3D TCG_TARGET_REG_BITS ? &r_r_L
> -                : &r_r_L_L);
> +        {
> +            static TCGTargetOpDef ld64;
> +            int i, j =3D 0;
> +
> +            for (i =3D 0; i * TCG_TARGET_REG_BITS < 64; ++i) {
> +                ld64.args_ct_str[j++] =3D constrain_memop_arg(ARG_LDVAL,=
 1, i);
> +            }
> +            for (i =3D 0; i * TCG_TARGET_REG_BITS < TARGET_LONG_BITS; ++=
i) {
> +                ld64.args_ct_str[j++] =3D constrain_memop_arg(ARG_ADDR, =
0, i);
> +            }
> +            return &ld64;
> +        }
> +    case INDEX_op_qemu_st_i32:
> +        {
> +            static TCGTargetOpDef st32;
> +            int i;
> +
> +            st32.args_ct_str[0] =3D constrain_memop_arg(ARG_STVAL, 0, 0);
> +            for (i =3D 0; i * TCG_TARGET_REG_BITS < TARGET_LONG_BITS; ++=
i) {
> +                st32.args_ct_str[i + 1] =3D constrain_memop_arg(ARG_ADDR=
, 0, i);
> +            }
> +            return &st32;
> +        }
>      case INDEX_op_qemu_st_i64:
> -        return (TCG_TARGET_REG_BITS =3D=3D 64 ? &L_L
> -                : TARGET_LONG_BITS <=3D TCG_TARGET_REG_BITS ? &L_L_L
> -                : &L_L_L_L);
> +        {
> +            static TCGTargetOpDef st64;
> +            int i, j =3D 0;
> +
> +            for (i =3D 0; i * TCG_TARGET_REG_BITS < 64; ++i) {
> +                st64.args_ct_str[j++] =3D constrain_memop_arg(ARG_STVAL,=
 1, i);
> +            }
> +            for (i =3D 0; i * TCG_TARGET_REG_BITS < TARGET_LONG_BITS; ++=
i) {
> +                st64.args_ct_str[j++] =3D constrain_memop_arg(ARG_ADDR, =
0, i);
> +            }
> +            return &st64;
> +        }
>
>      case INDEX_op_brcond2_i32:
>          {


--
Alex Benn=C3=A9e

