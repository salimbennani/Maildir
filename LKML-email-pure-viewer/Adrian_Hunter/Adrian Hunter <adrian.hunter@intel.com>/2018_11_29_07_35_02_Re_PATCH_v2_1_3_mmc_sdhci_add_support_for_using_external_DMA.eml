Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 29 Nov 2018 18:17:42 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from FMSMGA003.fm.intel.com (fmsmga003.fm.intel.com [10.253.24.29])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 340335803ED;
	Wed, 28 Nov 2018 23:39:58 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by FMSMGA003-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 28 Nov 2018 23:39:47 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A7ZMnORMUfKJpjXYUDxAl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KPj8oMbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRttfWTJPAo28?=
 =?us-ascii?q?aIsBDOQPMuhXoIb/u1QAogC+BRGuCe701j9FhGX70bEm3+kvEwzL2hErEdIUsH?=
 =?us-ascii?q?TTqdX4LLsfXv2vzKnJ1zrDae5d1zXg6IjObhAuv+uMVq93fMXL1EYvDQLFgU+W?=
 =?us-ascii?q?qYD/PzOVy+INs3SF4Op6Tu+vimgnqx1vrTir3Msjlo7JhocMx13C6C53w541KM?=
 =?us-ascii?q?WmREJnZdOoCoZcui+EO4dsX88vQH1ktDw7x7AEoZK3YSYHxZs9yxLCZfGKfJKE?=
 =?us-ascii?q?7g/tWeuQOzt0mWxpdbO5ih2v60av0Pf8WdOx0FtSripKjN3MtncV2hzN5ciIVO?=
 =?us-ascii?q?F98l2i2TmRzQDT7P9LIUQumarcMZ4hzaY8lpsVsUvdAi/7gFv6gLOSe0k+5+Sl?=
 =?us-ascii?q?5frrbq/7qpKfK4N4kADzP6Y2lsy6G+s4MwwOX2aB+eS70b3u5Un5QLRMjv0rna?=
 =?us-ascii?q?jVqZPaKtoBpq6/HQBV1p8v6xGxDjegztsYh2IKLExKeB2ZlYjlIVLOL+7iDfe5?=
 =?us-ascii?q?nVuslC1nx/fcPr3uGpnNNGTMkK/9fbZh7E5R0A4zzdFc551KEL0AL+/zV1T1tN?=
 =?us-ascii?q?zZCB85LgO1z/zmCNV7yoMRR2aPDrWFP6PVtF+C/vgvLPWUZI8JpDb9LOAo5/70?=
 =?us-ascii?q?gn84hV8SZ66p0YEXaHClBPtmJUqZbGHogtcAF2cKowU/QPbriF2ETT5ceXKyU7?=
 =?us-ascii?q?gg6TE8DYKsFZ3DSZy1gLydwCe7GYVbZmJBCl+SC3vodIKEW/EKaCKVOcJhlj0E?=
 =?us-ascii?q?Vb68S44uzx2utQn6y6Z5IerQ4CEXqZXj1N1t7e3JiR4y7SB0D9ia02yVVW50hW?=
 =?us-ascii?q?MIRzg13Kxlu0xy0FWD3LN8g/xZE9xT+vxIXh07NZ7a0+x1FdTyVhjdcdeOTVas?=
 =?us-ascii?q?Ws+mDi0pTtIt398OZF5wG9a4gRDFxSaqB74VmKaNBJw76a/c23nxJ8Bgy3fJzq?=
 =?us-ascii?q?Uhjl8mQtdROm2inKJw6w/TB4vRmUWDi6mqbbgc3DLK9Gqb0GWBpl9YXxBqXaXF?=
 =?us-ascii?q?R38fYFDWosr/5k/FS7+uCrEnMg9axM6GK6tKbMDpjFpcSPfiPtTef3y+m2OqCR?=
 =?us-ascii?q?mUwbOMaZLge38B0yXFFEgEjwcT8G6bOgckGCeuvXjSDDx0GlLpeEPj7+9+pWi/?=
 =?us-ascii?q?Tk81yQGKckJg26C0+h4TmfyTVfcT0qgYtycmrjV+BEy90M7OC9qcuwphe71RYc?=
 =?us-ascii?q?884FdC0mLZqwx9P5y6I6B+nFIedB53v0fv1xVxBYVNiswqrHIszApvJqOUylJB?=
 =?us-ascii?q?dzWE3Z/uPr3bMHX9/Beqa6TOwFHRzM6W+rsT6PQ/s1jspgWpGVQt8np509hZyW?=
 =?us-ascii?q?CT5ojXAwUIV5LxUUE39wZhqrHeYyk94Z7U1HJ2Pam1tD/Cx8wmBO8/xhm8eNdf?=
 =?us-ascii?q?NbuOFBXuHM0CG8iuNOsqlkCpbxIZJuxd6LQ4PsKmd/Sc3q6rM/1tnDanjWRB/Y?=
 =?us-ascii?q?B83ViA9yt6Su7UwZkFx+uU0ReAVzf5lF2hqNz4mZhYZTEOGWqy0TLkBI9NaaJo?=
 =?us-ascii?q?Z4YEFGCuL9exxtpgnZ7tWmdU+0K5CFMCxcCmZwCSb1v73QBL0UQXoHqnmTa3zj?=
 =?us-ascii?q?BukjEpqLaf0zLKw+j4aBUHPWtLTnF4jVjwOYi0k8waXE+wYgkplRup/0b7y7JA?=
 =?us-ascii?q?pKRiKWneWkNIfynwL2F/Xaq8rLuCY8hT6Jw2tSVbSvizYVefSrTluRsVzzvjH3?=
 =?us-ascii?q?dCxDA8bzyquI/2nwZ5iGKeK3Z/tmHZdttzxRfc5dzcQ+Be3jwdSSl8iDnXAEW8?=
 =?us-ascii?q?Ptaz8dWVkZfDrv6xV2a7WpJPdinryJuKtDGn6m1yHR2/g/ezl8XnEAcg1i/3zd?=
 =?us-ascii?q?tqVSTOrBvnZonr1qK6Mf9of0VyBV/87dZ6FZ96kocqmJ4Q3n0ajI2P/XUbiWfz?=
 =?us-ascii?q?Lclb2aXmYXoOXzELwsTZ4Aj42EJ5KHKJyJn0VnGcwstnetm7bXka2iM778BWFq?=
 =?us-ascii?q?iU6KZIkjdyolq9tQjRe+Ryni8Byfsy734Xm+QJuAsuziqHGLwTE1dXPTfwlxuW?=
 =?us-ascii?q?9dCxt7tYZHygcbWr0Ep+nNahDKyNow1GWXb5fIsiEjF07sllLF3M13jz4Jn+eN?=
 =?us-ascii?q?bMddITqgGUkxDYguhJL5Ixk+AGhCt9NmL7oH0l0PU7jR110JG+vYiHLXht/a2j?=
 =?us-ascii?q?Dh5ZMD31e90c+jX3galCmcaW2pilHo99FTUTQJvoUfWoHSoJuvv9MAaOFCA8pm?=
 =?us-ascii?q?2fGbrCBgKf7EZmr3TSE5GkLX2XJX8Zzcl8SxmZPkBQnAcUXDAilJ4jCg+q3NDh?=
 =?us-ascii?q?cFt+5j0J5F73sB5MxfxzNxXlTmfTvgSoaio3SJiCKhpZ9BpC6lzRMcyf6OJzAi?=
 =?us-ascii?q?5Z8oegrAyLNmyUeQBIAXsVVUyDAlDpJqOu6sXY8+iEGuq+KOPDYLWJqexDTveI?=
 =?us-ascii?q?2Iig0o188zaXMcWPOHZiAuY/2kpCW3B5BsvYly8OSywRiyLCccqbqA2g9S1wq8?=
 =?us-ascii?q?C16O7rVx735YuTF7tSNs1i+xCojqeCNO6Qhyd5JSxb1pMWwn/Ix6YQ3EQPiyF1?=
 =?us-ascii?q?bDStFbUAtSjQTKPfgKNXDhgbaz9tO8tM9a4zwg5NOcvDgNPvyrF4luI1C0tCVV?=
 =?us-ascii?q?H5gM6peNcFI3ujO1LHHkqLMLWGKCbPw8H2Z6O8VLJRgP9Vtx22pTaUDUvjMi6f?=
 =?us-ascii?q?mDnuUhClKftMgz2DPBxCpIG9dQ5gCXTiTNLjcBG0LMV7giE2wbIqgHPHLmocMT?=
 =?us-ascii?q?l6c0NQobyc9yJYgvNjG2Nf6nppN/WLmyGc7+PAMJYZreNrAjhol+Jd+Hk7y6Fa?=
 =?us-ascii?q?7CdBRPx0nivdtt9vo1G8nemJxTpqSx5OqjdNhIKWskRuI6TZ9p9cWXna+BIB93?=
 =?us-ascii?q?mfCxMPp4gtNtq6kKBNzMnGkurBKD5E/JqA78sVAceSLNOdOVIuNBPoHHjfCw5T?=
 =?us-ascii?q?HhCxMmSKrkBHkfiUvl2IqIQ3sNC4kZYUS7ZdElwoEO8XEGxkGsAPJNF8WTZywu?=
 =?us-ascii?q?3Tt9IB+Xfr9EqZf85dpJ2SE6vKWfg=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAAD1lv9bh0O0hNFkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGDWRIng3mIGF+LKYFoJRSXLhSBYhEYEwGHcSI0CQ0?=
 =?us-ascii?q?BAwEBAQEBAQIBEwEBAQgNCQgpL4I2JAGCYQEBAQECAQECIARSBgkBAQoYAgImA?=
 =?us-ascii?q?gIDVAYKAwYCAQEBgxyBeggFpXx8M4otgQuLC4FXP4ERJwyCX4RKIIMbglcCiR+?=
 =?us-ascii?q?BeIRRgQSEYIpTBwKCHQSPCwYYgVqINIcMmEqBRoINMxojgzyCJxeOHz0BATGBB?=
 =?us-ascii?q?QEBimWCTQEB?=
X-IPAS-Result: =?us-ascii?q?A0ABAAD1lv9bh0O0hNFkGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGDWRIng3mIGF+LKYFoJRSXLhSBYhEYEwGHcSI0CQ0BAwEBAQEBAQIBE?=
 =?us-ascii?q?wEBAQgNCQgpL4I2JAGCYQEBAQECAQECIARSBgkBAQoYAgImAgIDVAYKAwYCAQE?=
 =?us-ascii?q?BgxyBeggFpXx8M4otgQuLC4FXP4ERJwyCX4RKIIMbglcCiR+BeIRRgQSEYIpTB?=
 =?us-ascii?q?wKCHQSPCwYYgVqINIcMmEqBRoINMxojgzyCJxeOHz0BATGBBQEBimWCTQEB?=
X-IronPort-AV: E=Sophos;i="5.56,293,1539673200"; 
   d="scan'208";a="54806504"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 28 Nov 2018 23:39:46 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726966AbeK2SlI (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 29 Nov 2018 13:41:08 -0500
Received: from mga18.intel.com ([134.134.136.126]:42167 "EHLO mga18.intel.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726641AbeK2SlI (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 29 Nov 2018 13:41:08 -0500
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from orsmga006.jf.intel.com ([10.7.209.51])
  by orsmga106.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 28 Nov 2018 23:36:42 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,293,1539673200"; 
   d="scan'208";a="95659300"
Received: from ahunter-desktop.fi.intel.com (HELO [10.237.72.130]) ([10.237.72.130])
  by orsmga006.jf.intel.com with ESMTP; 28 Nov 2018 23:36:38 -0800
Subject: Re: [PATCH v2 1/3] mmc: sdhci: add support for using external DMA
 devices
To: Chunyan Zhang <zhang.lyra@gmail.com>
Cc: Chunyan Zhang <zhang.chunyan@linaro.org>,
        Ulf Hansson <ulf.hansson@linaro.org>,
        linux-mmc@vger.kernel.org,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>,
        Arnd Bergmann <arnd@arndb.de>, Mark Brown <broonie@kernel.org>,
        kishon@ti.com, nsekhar@ti.com
References: <1542007566-9449-1-git-send-email-zhang.chunyan@linaro.org>
 <1542007566-9449-2-git-send-email-zhang.chunyan@linaro.org>
 <84836600-c705-9ac3-297e-bb67a611daca@intel.com>
 <CAAfSe-us5aKOv9F6KHwvJR_cMAF8KFo6W1Gs_B3zBiNOuD10Qg@mail.gmail.com>
From: Adrian Hunter <adrian.hunter@intel.com>
Organization: Intel Finland Oy, Registered Address: PL 281, 00181 Helsinki,
 Business Identity Code: 0357606 - 4, Domiciled in Helsinki
Message-ID: <f78de042-69cf-5345-f16f-236d04d57051@intel.com>
Date: Thu, 29 Nov 2018 09:35:02 +0200
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.3.1
MIME-Version: 1.0
In-Reply-To: <CAAfSe-us5aKOv9F6KHwvJR_cMAF8KFo6W1Gs_B3zBiNOuD10Qg@mail.gmail.com>
Content-Type: text/plain; charset=utf-8
Content-Language: en-US
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 29/11/18 8:22 AM, Chunyan Zhang wrote:
> On Tue, 20 Nov 2018 at 21:41, Adrian Hunter <adrian.hunter@intel.com> wrote:
>>
>> On 12/11/18 9:26 AM, Chunyan Zhang wrote:
>>> Some standard SD host controllers can support both external dma
>>> controllers as well as ADMA/SDMA in which the SD host controller
>>> acts as DMA master. TI's omap controller is the case as an example.
>>>
>>> Currently the generic SDHCI code supports ADMA/SDMA integrated in
>>> the host controller but does not have any support for external DMA
>>> controllers implemented using dmaengine, meaning that custom code is
>>> needed for any systems that use an external DMA controller with SDHCI.
>>
>> I still think you probably need to reset the DMA if there are transfer
>> errors - perhaps you could comment on that.  Also there are some comments below.
> 
> With regard to "transfer error", do you mean if
> sdhci_external_dma_setup() failed?

No, I mean any error interrupt that can leave the DMA uncompleted.  For
SDHCI, resetting the data circuit cleans that up, but presumably something
is needed for external DMA?

> 
> Thanks,
> Chunyan
> 
> 
>>
>>>
>>> Signed-off-by: Chunyan Zhang <zhang.chunyan@linaro.org>
>>> ---
>>>  drivers/mmc/host/Kconfig |  13 ++++
>>>  drivers/mmc/host/sdhci.c | 181 ++++++++++++++++++++++++++++++++++++++++++++++-
>>>  drivers/mmc/host/sdhci.h |   8 +++
>>>  3 files changed, 201 insertions(+), 1 deletion(-)
>>>
>>> diff --git a/drivers/mmc/host/Kconfig b/drivers/mmc/host/Kconfig
>>> index 1b58739..7bf3eff 100644
>>> --- a/drivers/mmc/host/Kconfig
>>> +++ b/drivers/mmc/host/Kconfig
>>> @@ -977,3 +977,16 @@ config MMC_SDHCI_OMAP
>>>         If you have a controller with this interface, say Y or M here.
>>>
>>>         If unsure, say N.
>>> +
>>> +config MMC_SDHCI_EXTERNAL_DMA
>>> +        bool "Support external DMA in standard SD host controller"
>>
>> It would be simpler if the drivers that needed it just selected it e.g.
>>
>> config MMC_SDHCI_OMAP
>>         tristate "TI SDHCI Controller Support"
>>         depends on MMC_SDHCI_PLTFM && OF
>>         select MMC_SDHCI_EXTERNAL_DMA if DMA_ENGINE
>>
>>> +     depends on MMC_SDHCI
>>> +     depends on DMA_ENGINE
>>> +     help
>>> +       This is an option for using external DMA device via dmaengine
>>> +       framework.
>>> +
>>> +       If you have a controller which support using external DMA device
>>> +       for data transfer, can say Y.
>>> +
>>> +       If unsure, say N.
>>> diff --git a/drivers/mmc/host/sdhci.c b/drivers/mmc/host/sdhci.c
>>> index 99bdae5..853cc98 100644
>>> --- a/drivers/mmc/host/sdhci.c
>>> +++ b/drivers/mmc/host/sdhci.c
>>> @@ -14,6 +14,7 @@
>>>   */
>>>
>>>  #include <linux/delay.h>
>>> +#include <linux/dmaengine.h>
>>>  #include <linux/ktime.h>
>>>  #include <linux/highmem.h>
>>>  #include <linux/io.h>
>>> @@ -1309,6 +1310,158 @@ static void sdhci_del_timer(struct sdhci_host *host, struct mmc_request *mrq)
>>>               del_timer(&host->timer);
>>>  }
>>>
>>> +#if IS_ENABLED(CONFIG_MMC_SDHCI_EXTERNAL_DMA)
>>> +static int sdhci_external_dma_init(struct sdhci_host *host)
>>> +{
>>> +     int ret = 0;
>>> +     struct mmc_host *mmc = host->mmc;
>>> +
>>> +     host->tx_chan = dma_request_chan(mmc->parent, "tx");
>>> +     if (IS_ERR(host->tx_chan)) {
>>> +             ret = PTR_ERR(host->tx_chan);
>>> +             if (ret != -EPROBE_DEFER)
>>> +                     pr_warn("Failed to request TX DMA channel.\n");
>>> +             host->tx_chan = NULL;
>>> +             return ret;
>>> +     }
>>> +
>>> +     host->rx_chan = dma_request_chan(mmc->parent, "rx");
>>> +     if (IS_ERR(host->rx_chan)) {
>>> +             if (host->tx_chan) {
>>> +                     dma_release_channel(host->tx_chan);
>>> +                     host->tx_chan = NULL;
>>> +             }
>>> +
>>> +             ret = PTR_ERR(host->rx_chan);
>>> +             if (ret != -EPROBE_DEFER)
>>> +                     pr_warn("Failed to request RX DMA channel.\n");
>>> +             host->rx_chan = NULL;
>>> +     }
>>> +
>>> +     return ret;
>>> +}
>>> +
>>> +static inline struct dma_chan *
>>> +sdhci_external_dma_channel(struct sdhci_host *host, struct mmc_data *data)
>>> +{
>>> +     return data->flags & MMC_DATA_WRITE ? host->tx_chan : host->rx_chan;
>>> +}
>>> +
>>> +static int sdhci_external_dma_setup(struct sdhci_host *host,
>>> +                                 struct mmc_command *cmd)
>>> +{
>>> +     int ret = 0, i;
>>> +     struct dma_async_tx_descriptor *desc;
>>> +     struct mmc_data *data = cmd->data;
>>
>> cmd->data might be NULL?  Have you tested this?
>>
>>> +     struct dma_chan *chan;
>>> +     struct dma_slave_config cfg;
>>> +     dma_cookie_t cookie;
>>> +
>>> +     if (!host->mapbase)
>>> +             return -EINVAL;
>>> +
>>> +     cfg.src_addr = host->mapbase + SDHCI_BUFFER;
>>> +     cfg.dst_addr = host->mapbase + SDHCI_BUFFER;
>>> +     cfg.src_addr_width = DMA_SLAVE_BUSWIDTH_4_BYTES;
>>> +     cfg.dst_addr_width = DMA_SLAVE_BUSWIDTH_4_BYTES;
>>> +     cfg.src_maxburst = data->blksz / 4;
>>> +     cfg.dst_maxburst = data->blksz / 4;
>>> +
>>> +     /* Sanity check: all the SG entries must be aligned by block size. */
>>> +     for (i = 0; i < data->sg_len; i++) {
>>> +             if ((data->sg + i)->length % data->blksz)
>>> +                     return -EINVAL;
>>> +     }
>>> +
>>> +     chan = sdhci_external_dma_channel(host, data);
>>> +
>>> +     ret = dmaengine_slave_config(chan, &cfg);
>>> +     if (ret)
>>> +             return ret;
>>> +
>>> +     desc = dmaengine_prep_slave_sg(chan, data->sg, data->sg_len,
>>> +                                    mmc_get_dma_dir(data),
>>> +                                    DMA_PREP_INTERRUPT | DMA_CTRL_ACK);
>>> +     if (!desc)
>>> +             return -EINVAL;
>>> +
>>> +     desc->callback = NULL;
>>> +     desc->callback_param = NULL;
>>> +
>>> +     cookie = dmaengine_submit(desc);
>>> +     if (cookie < 0)
>>> +             ret = cookie;
>>> +
>>> +     return ret;
>>> +}
>>> +
>>> +static void sdhci_external_dma_release(struct sdhci_host *host)
>>> +{
>>> +     if (host->tx_chan) {
>>> +             dma_release_channel(host->tx_chan);
>>> +             host->tx_chan = NULL;
>>> +     }
>>> +
>>> +     if (host->rx_chan) {
>>> +             dma_release_channel(host->rx_chan);
>>> +             host->rx_chan = NULL;
>>> +     }
>>> +
>>> +     sdhci_switch_external_dma(host, false);
>>> +}
>>> +
>>> +static void sdhci_external_dma_prepare_data(struct sdhci_host *host,
>>> +                                         struct mmc_command *cmd)
>>> +{
>>> +     if (sdhci_external_dma_setup(host, cmd)) {
>>> +             sdhci_external_dma_release(host);
>>> +             pr_err("%s: Failed to setup external DMA, switch to the DMA/PIO which standard SDHCI provides.\n",
>>> +                    mmc_hostname(host->mmc));
>>> +     } else {
>>> +             /* Prepare for using external dma */
>>> +             host->flags |= SDHCI_REQ_USE_DMA;
>>> +     }
>>> +
>>> +     sdhci_prepare_data(host, cmd);
>>> +}
>>> +
>>> +static void sdhci_external_dma_pre_transfer(struct sdhci_host *host,
>>> +                                         struct mmc_command *cmd)
>>> +{
>>> +     struct dma_chan *chan = sdhci_external_dma_channel(host, cmd->data);
>>
>> cmd->data might be NULL?  Have you tested this?
>>
>>> +
>>> +     if (cmd->opcode != MMC_SET_BLOCK_COUNT) {
>>
>> I would have thought:
>>
>>         if (cmd->data)
>>
>>> +             sdhci_set_timeout(host, cmd);
>>> +             dma_async_issue_pending(chan);
>>> +     }
>>> +}
>>> +#else
>>> +static int sdhci_external_dma_init(struct sdhci_host *host)
>>> +{
>>> +     return 0;
>>
>> That should return an error, perhaps -EOPNOTSUPP.
>>
>>> +}
>>> +
>>> +static void sdhci_external_dma_release(struct sdhci_host *host)
>>> +{}
>>> +
>>> +static void sdhci_external_dma_prepare_data(struct sdhci_host *host,
>>> +                                         struct mmc_command *cmd)
>>> +{
>>> +     /* If SDHCI_EXTDMA not supported, PIO will be used */
>>
>> SDHCI_EXTDMA is now MMC_SDHCI_EXTERNAL_DMA
>>
>>> +     sdhci_prepare_data(host, cmd);
>>> +}
>>> +
>>> +static void sdhci_external_dma_pre_transfer(struct sdhci_host *host,
>>> +                                         struct mmc_command *cmd)
>>> +{}
>>> +#endif
>>> +
>>> +void sdhci_switch_external_dma(struct sdhci_host *host, bool en)
>>> +{
>>> +     host->use_external_dma = en;
>>> +}
>>> +EXPORT_SYMBOL_GPL(sdhci_switch_external_dma);
>>> +
>>>  void sdhci_send_command(struct sdhci_host *host, struct mmc_command *cmd)
>>>  {
>>>       int flags;
>>> @@ -1355,7 +1508,10 @@ void sdhci_send_command(struct sdhci_host *host, struct mmc_command *cmd)
>>>               host->data_cmd = cmd;
>>>       }
>>>
>>> -     sdhci_prepare_data(host, cmd);
>>> +     if (host->use_external_dma)
>>> +             sdhci_external_dma_prepare_data(host, cmd);
>>> +     else
>>> +             sdhci_prepare_data(host, cmd);
>>>
>>>       sdhci_writel(host, cmd->arg, SDHCI_ARGUMENT);
>>>
>>> @@ -1397,6 +1553,9 @@ void sdhci_send_command(struct sdhci_host *host, struct mmc_command *cmd)
>>>               timeout += 10 * HZ;
>>>       sdhci_mod_timer(host, cmd->mrq, timeout);
>>>
>>> +     if (host->use_external_dma)
>>> +             sdhci_external_dma_pre_transfer(host, cmd);
>>> +
>>>       sdhci_writew(host, SDHCI_MAKE_CMD(cmd->opcode, flags), SDHCI_COMMAND);
>>>  }
>>>  EXPORT_SYMBOL_GPL(sdhci_send_command);
>>> @@ -4133,6 +4292,19 @@ int sdhci_setup_host(struct sdhci_host *host)
>>>                       return ret;
>>>       }
>>>
>>> +     if (host->use_external_dma) {
>>> +             ret = sdhci_external_dma_init(host);
>>> +             if (ret == -EPROBE_DEFER)
>>> +                     goto unreg;
>>> +
>>> +             /*
>>> +              * Fall back to use the DMA/PIO integrated in standard SDHCI
>>> +              * instead of external DMA devices.
>>> +              */
>>> +             if (ret)
>>> +                     sdhci_switch_external_dma(host, false);
>>> +     }
>>> +
>>>       return 0;
>>>
>>>  unreg:
>>> @@ -4161,6 +4333,10 @@ void sdhci_cleanup_host(struct sdhci_host *host)
>>>               dma_free_coherent(mmc_dev(mmc), host->align_buffer_sz +
>>>                                 host->adma_table_sz, host->align_buffer,
>>>                                 host->align_addr);
>>> +
>>> +     if (host->use_external_dma)
>>> +             sdhci_external_dma_release(host);
>>> +
>>>       host->adma_table = NULL;
>>>       host->align_buffer = NULL;
>>>  }
>>> @@ -4295,6 +4471,9 @@ void sdhci_remove_host(struct sdhci_host *host, int dead)
>>>                                 host->adma_table_sz, host->align_buffer,
>>>                                 host->align_addr);
>>>
>>> +     if (host->use_external_dma)
>>> +             sdhci_external_dma_release(host);
>>> +
>>>       host->adma_table = NULL;
>>>       host->align_buffer = NULL;
>>>  }
>>> diff --git a/drivers/mmc/host/sdhci.h b/drivers/mmc/host/sdhci.h
>>> index b001cf4..8e50a97 100644
>>> --- a/drivers/mmc/host/sdhci.h
>>> +++ b/drivers/mmc/host/sdhci.h
>>> @@ -475,6 +475,7 @@ struct sdhci_host {
>>>
>>>       int irq;                /* Device IRQ */
>>>       void __iomem *ioaddr;   /* Mapped address */
>>> +     phys_addr_t mapbase;    /* physical address base */
>>>       char *bounce_buffer;    /* For packing SDMA reads/writes */
>>>       dma_addr_t bounce_addr;
>>>       unsigned int bounce_buffer_size;
>>> @@ -524,6 +525,7 @@ struct sdhci_host {
>>>       bool pending_reset;     /* Cmd/data reset is pending */
>>>       bool irq_wake_enabled;  /* IRQ wakeup is enabled */
>>>       bool v4_mode;           /* Host Version 4 Enable */
>>> +     bool use_external_dma;
>>>
>>>       struct mmc_request *mrqs_done[SDHCI_MAX_MRQS];  /* Requests done */
>>>       struct mmc_command *cmd;        /* Current command */
>>> @@ -552,6 +554,11 @@ struct sdhci_host {
>>>       struct timer_list timer;        /* Timer for timeouts */
>>>       struct timer_list data_timer;   /* Timer for data timeouts */
>>>
>>> +#if IS_ENABLED(CONFIG_MMC_SDHCI_EXTERNAL_DMA)
>>> +     struct dma_chan *rx_chan;
>>> +     struct dma_chan *tx_chan;
>>> +#endif
>>> +
>>>       u32 caps;               /* CAPABILITY_0 */
>>>       u32 caps1;              /* CAPABILITY_1 */
>>>       bool read_caps;         /* Capability flags have been read */
>>> @@ -785,5 +792,6 @@ void sdhci_start_tuning(struct sdhci_host *host);
>>>  void sdhci_end_tuning(struct sdhci_host *host);
>>>  void sdhci_reset_tuning(struct sdhci_host *host);
>>>  void sdhci_send_tuning(struct sdhci_host *host, u32 opcode);
>>> +void sdhci_switch_external_dma(struct sdhci_host *host, bool en);
>>>
>>>  #endif /* __SDHCI_HW_H */
>>>
>>
> 

