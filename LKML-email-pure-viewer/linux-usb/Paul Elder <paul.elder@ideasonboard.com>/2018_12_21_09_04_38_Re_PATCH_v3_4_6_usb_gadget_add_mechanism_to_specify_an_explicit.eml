Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:47:56 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 9D22B5805F0;
	Fri, 21 Dec 2018 01:05:05 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga006-1.jf.intel.com with ESMTP; 21 Dec 2018 01:05:05 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A4a4BNRX8yDH/B5We8v3NT/lGewbV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhCGvadThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGo2y?=
 =?us-ascii?q?YYsRAeQcPuhYoYbyqEcTohS8CwasH/vvxz1Ti3/qwaE3yfgtHR3c0QA+Gd8FrX?=
 =?us-ascii?q?TarM/yNKcXSe271rPHzSjHb/hL1jn97JXHfQ47ofqRWr9wadDeyVQrFw/fkFqQ?=
 =?us-ascii?q?rZHqMC2P1ukWsmiU8vRvWvi0i24grQF+uT+vyd02iobUnI4a1lfE9SBgzYszON?=
 =?us-ascii?q?a2S1Z7bMa6HJdMsyyWLZZ6T808T21ypSo3yaEKtYS6cSUI0Jgr2hzSZvKdf4SV?=
 =?us-ascii?q?4x/vTvudLDZkiH5/Zb6zmhC/+lW6xOLmTMm7ylNKozJFktbSsnAN0ATe6taISv?=
 =?us-ascii?q?Rj5EetwzWP2B7J6uFCP080kbDXK5k7wr4/jpYTsELDETHqmEjukqOaakEp9vK1?=
 =?us-ascii?q?5+npfLnqvIKQOoxohg3kM6kjmNSzAeEiPQgPW2ib9/681Lrm/UDhRLVKj/s2kr?=
 =?us-ascii?q?TWsZzDJsQUuLS5AwlL3YYn8hq/CDmn0NIGknkdN19FZh2HgJbzO13UI/D3E+2/?=
 =?us-ascii?q?g1Kynzdv3fzGOafhAprVInjZjLjhZap961JbyAcrydBf5pFUBa8bLPP8R0/8r9?=
 =?us-ascii?q?jYDh4/MwypzOfrEtR91oUCWW2RBq+VKr/dsViN5ug3OemDeJcVuCrhK/gi//Pu?=
 =?us-ascii?q?jWU2mV4Bfaaz2psbcnC4Hul8LEWfbnrhmdMBEWYMvgojQ+3mklyCUThPZ3msW6?=
 =?us-ascii?q?Iw/C00CIWjDY3bXICinKSB3DunHp1Rfm1JEEuMEXfvd4WHQfsMcjidIs16nzwA?=
 =?us-ascii?q?VLihTZIh1B60uA/7zbpnMvTb+ikCuZ3/09h14vXZlQsu+jxsE8Sdz2aNQnl3nm?=
 =?us-ascii?q?wSQT86xqR/oU1nxVeF3qh1mPhYFd1V5/NUXQY2L5/cz+pmC9/sXgLNZMuGSFGj?=
 =?us-ascii?q?Qt++GzE+Usoxw8MSY0Z6A9itkwrM3zS0DLMPl7yEHpo08rnC0Hj3IMp9z3XG1K?=
 =?us-ascii?q?wlj1Q9RstPNGumhrNw9gTJBo7JlVmZmLiudagGwCHN82KDx3KUvE5ESA5wTbnF?=
 =?us-ascii?q?XXcHa0TLt9v5+F3NQ6WuCbs9NAtB0tCNKq1RZ93tjFVGQurjOdvEb2KwnWewGQ?=
 =?us-ascii?q?iHxreWYIX2fGUd2T3XCFIYnAAL4XaGKQ8+Cz+9o2LfCTxuEk7vY0Ps8OVktHO3?=
 =?us-ascii?q?VEg0zxuOb01g0bq19QUYhfidS/MVw7IFtz0tqzRyHFahwd3WD8CMqBZmfKVZed?=
 =?us-ascii?q?k9+ktI1XrFtwxhOZytN7pthloAfAV4oUzv1w97BZ5dkcc3tnwqyglyKaWG0F5a?=
 =?us-ascii?q?czOY3JbwOqDYK2Xo/RCvbbLW1U/a0NqM5qgP7/E4oU35vA61Dkoi72ln095N3n?=
 =?us-ascii?q?qc+5XGFhYdXYjwU0Y37Rd6ob7abzI554PV031sLKa1viXD29IvGOsq1BKgc81D?=
 =?us-ascii?q?P6ODEQ/4C9caCNS2KOw2h1ipaQoJPPpT9KEoJcymbeaJ2KmxMOZmgj2ml2VH7J?=
 =?us-ascii?q?lh3U2W8ypzV/DH34wCw/GexQaHUzb8jFG8ssH4g4xEZDcSHnahxijgHoJeeqpy?=
 =?us-ascii?q?fYMTA2e0P8K33sl+h4LqW3NA9F+jBkkK2c+zdRqJclz92xZd1UAWoXyhhCu5wC?=
 =?us-ascii?q?Z4kzAvrqqDwiPOx/7uewYAOm5OXGNil0vjIZCoj9AGW0ildwopmwG/5Ub5xKhb?=
 =?us-ascii?q?o75zL3LJTkdLfCj2LmdiXbW2treZZ85P6ZUosThYUeimYFCaTKL9rAUe0y/5A2?=
 =?us-ascii?q?RewzU7fSmwuprlhxx6lH6dLHFroXvZY85wwg3T5N7dRf5XxTcGQCh4iT/KBlmz?=
 =?us-ascii?q?JdWp/NOUl4vdveC6TW6uSppTcSzzx4OaqCS7/XFqAQG4n/2rmd3oCwk63TX719?=
 =?us-ascii?q?l3TyrIqhn8b5Lv16S7N+JnY0ZpCEX968p8BoFxjI8wiIsM1ngdg5Wf5WAHnnvr?=
 =?us-ascii?q?MdVHxaL+a2IARTsKw97W+gfpwkNiIWySx4LlSHqd2NBuaMegYmMZwS8968FKCK?=
 =?us-ascii?q?GJ7L1Lhyd1o1y4rR7Pbvh5hDsS1fwu6HsCieETpAUt1jmdAqwVHURAISzskBGI?=
 =?us-ascii?q?48q/rapNYmavbKOw1FF/nd26CLGCowdcWGv2e5s4HC9w6Nl/P0zI0HHp9o7kf9?=
 =?us-ascii?q?zQZ8oJthKIixfAk/RVKJUpm/URnyVnPmb9vWA/x+4/kBxjxpW6vImBK2Vw86O1?=
 =?us-ascii?q?GB9YNjvpZ8wN/jHhl7pRnsGT34q3BJVuBi0LXIf0TfKvCD8St+7oNwOQHz0nsH?=
 =?us-ascii?q?ubBaDTHQyC6EdlsnLPFYqkN2qMKXkdzNViQgSdJUNFjAAVWjU6goA2FgSwyMP9?=
 =?us-ascii?q?d0d54ygb5kTkpRtU1uJoKx7/X3/fpQevdzc0UYWfIwBQ7g1Y/EfVNsqe7u1oEi?=
 =?us-ascii?q?Fc/52hqhGNK2OBawRJC2EJRlKLB1T5Mray4tnA9vCSBvCiIPvWfbWOteteWu+I?=
 =?us-ascii?q?xZ2x04tm/DWMNsSVMnlhFf073UVDUm5jG8TEgDUCUCgXlyPLb86Gqxaw4Cx3rs?=
 =?us-ascii?q?aj8Pv1XALj/5eAC7xXMd934RC5nb+DN/KMhCZ+MTtXzI4MymTSyLcB3F8ekSVu?=
 =?us-ascii?q?dzi2HLQEtC7NSr/Qm6BNAx4abSNzKNVH76Ym0gZRPs7bj8v/1qRkgf4tF1dFSV?=
 =?us-ascii?q?vhl9m1ZcwLJmGxLk/ICFyXO7SGOzLLxdr6Yae9Sb1WkeVVuAe8uTedE0//IDuD?=
 =?us-ascii?q?kyPlWAyoMeFJlCubJgBRuJmhchZxDmjuVNLnZQe9MN9yjD02x6U7h3LKNWEGNz?=
 =?us-ascii?q?h8fFhArrmR7SNen/V+FHZN7ntjLemYhSmZ6/PUJYoRsftuUWxIkLdz5H08g4BJ?=
 =?us-ascii?q?4TtCDKhuhCbIqPZ0pE6im++DjDpuSgRHsDoNiY6W6xZMI6Lco6FJRHKM0RYB4H?=
 =?us-ascii?q?/YXwwDut8jB9njtrp4y9TCnbn0Lj1F+sjYu8AbAp6He4q8LHM9PE+xS3bvBwwf?=
 =?us-ascii?q?QGvubDmHig=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAABkrBxch0O0hNFkDgsBAQEBAQEBA?=
 =?us-ascii?q?QEBAQEHAQEBAQEBgVEEAQEBAQELAQGDaieMFl+LHYINFGiWY4FzLRMBhy4iNAk?=
 =?us-ascii?q?NAQMBAQEBAQECARMBAQEIDQkIKSMMQgEQAYFmKQGCZgEBAQECAQECJBMGAQEyB?=
 =?us-ascii?q?QEEAQkBAQoYCRMSAwwFSQoJBYMdgXoIBAGlUoFsM4J2AQEFhzEIiyOBHIFXP4E?=
 =?us-ascii?q?Rgl01iDqCJolNhhGBAJBiBwKCJQSPMSSRX5tZgg4zGiODPIIbCQMXEoM4ihhaI?=
 =?us-ascii?q?TKBBQEBgwSISSuCIAEB?=
X-IPAS-Result: =?us-ascii?q?A0ABAABkrBxch0O0hNFkDgsBAQEBAQEBAQEBAQEHAQEBAQE?=
 =?us-ascii?q?BgVEEAQEBAQELAQGDaieMFl+LHYINFGiWY4FzLRMBhy4iNAkNAQMBAQEBAQECA?=
 =?us-ascii?q?RMBAQEIDQkIKSMMQgEQAYFmKQGCZgEBAQECAQECJBMGAQEyBQEEAQkBAQoYCRM?=
 =?us-ascii?q?SAwwFSQoJBYMdgXoIBAGlUoFsM4J2AQEFhzEIiyOBHIFXP4ERgl01iDqCJolNh?=
 =?us-ascii?q?hGBAJBiBwKCJQSPMSSRX5tZgg4zGiODPIIbCQMXEoM4ihhaITKBBQEBgwSISSu?=
 =?us-ascii?q?CIAEB?=
X-IronPort-AV: E=Sophos;i="5.56,380,1539673200"; 
   d="scan'208";a="44959564"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 21 Dec 2018 01:04:51 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729309AbeLUJEs (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Fri, 21 Dec 2018 04:04:48 -0500
Received: from perceval.ideasonboard.com ([213.167.242.64]:49382 "EHLO
        perceval.ideasonboard.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725883AbeLUJEs (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 21 Dec 2018 04:04:48 -0500
Received: from emerald.amanokami.net (173-16-160-11.client.mchsi.com [173.16.160.11])
        by perceval.ideasonboard.com (Postfix) with ESMTPSA id 33152558;
        Fri, 21 Dec 2018 10:04:44 +0100 (CET)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=ideasonboard.com;
        s=mail; t=1545383085;
        bh=mt96DXKMKuCa2+i0ih/l/ZXWPLKmvzgn1HY2xQqr+vY=;
        h=Date:From:To:Cc:Subject:References:In-Reply-To:From;
        b=AJjZIyVkqxpaZFkEp1WSzhrdHEXWi/ZV8zJviZAz6NDS6RF5M36x8YocNYLOtrPuD
         NcIUc5sonH/H6a+Ix7crP53KTm+rgr9NAWBD/shxcHjQoo0t7lBSxbsmpQoFO7n1mQ
         C23ouRGwIpmkC9/zm9dl3slqeDiv1BAlX4jWjT34=
Date: Fri, 21 Dec 2018 03:04:38 -0600
From: Paul Elder <paul.elder@ideasonboard.com>
To: Alan Stern <stern@rowland.harvard.edu>
Cc: laurent.pinchart@ideasonboard.com, kieran.bingham@ideasonboard.com,
        b-liu@ti.com, rogerq@ti.com, balbi@kernel.org,
        gregkh@linuxfoundation.org, USB list <linux-usb@vger.kernel.org>,
        Kernel development list <linux-kernel@vger.kernel.org>
Subject: Re: [PATCH v3 4/6] usb: gadget: add mechanism to specify an explicit
 status stage
Message-ID: <20181221090438.GA2140@emerald.amanokami.net>
References: <20181219092647.12397-5-paul.elder@ideasonboard.com>
 <Pine.LNX.4.44L0.1812191048580.1260-100000@iolanthe.rowland.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <Pine.LNX.4.44L0.1812191048580.1260-100000@iolanthe.rowland.org>
User-Agent: Mutt/1.9.4 (2018-02-28)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Wed, Dec 19, 2018 at 11:01:52AM -0500, Alan Stern wrote:
> On Wed, 19 Dec 2018, Paul Elder wrote:
> 
> > A usb gadget function driver may or may not want to delay the status
> > stage of a control OUT request. An instance it might want to is to
> ---------------------------------------------^
> Typo: missing "where"

ack

> 
> > asynchronously validate the data of a class-specific request.
> > 
> > A function driver that wants an explicit status stage should set the
> > newly added explicit_status flag of the usb_request corresponding to the
> > data stage. Later on the function driver can explicitly complete the
> > status stage by enqueueing a usb_request for ACK, or calling
> > usb_ep_set_halt() for STALL.
> > 
> > To support both explicit and implicit status stages, a UDC driver must
> > call the newly added usb_gadget_control_complete function right after
> > calling usb_gadget_giveback_request. The status of the request that was
> > just given back must be fed into usb_gadget_control_complete. To support
> > the explicit status stage, it might then check what stage the
> > usb_request was queued in, and send an ACK.
> 
> I don't really understand that last sentence.  Perhaps what you mean is
> that depending on the direction of the control transfer, the driver
> should either ACK the host's 0-length data packet (control-IN) or send
> a 0-length DATA1 packet (control-OUT)?

Yes, that is what I meant, though for MUSB I've only implemented and
tested the control OUT case.

> > Signed-off-by: Paul Elder <paul.elder@ideasonboard.com>
> > v1 Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
> > ---
> > Changes from v2:
> > 
> > Add status parameter to usb_gadget_control_complete, so that a
> > usb_request is not queued if the status of the just given back request
> > is nonzero.
> > 
> > Changes from v1:
> > 
> > Complete change of API. Now we use a flag that should be set in the
> > usb_request that is queued for the data stage to signal to the UDC that
> > we want to delay the status stage (as opposed to setting a flag in the
> > UDC itself, that persists across all requests). We now also provide a
> > function for UDC drivers to very easily allow implicit status stages, to
> > mitigate the need to convert all function drivers to this new API at
> > once, and to make it easier for UDC drivers to convert.
> > 
> >  drivers/usb/gadget/udc/core.c | 34 ++++++++++++++++++++++++++++++++++
> >  include/linux/usb/gadget.h    | 10 ++++++++++
> >  2 files changed, 44 insertions(+)
> > 
> > diff --git a/drivers/usb/gadget/udc/core.c b/drivers/usb/gadget/udc/core.c
> > index af88b48c1cea..0a0ccd2b7639 100644
> > --- a/drivers/usb/gadget/udc/core.c
> > +++ b/drivers/usb/gadget/udc/core.c
> > @@ -894,6 +894,40 @@ EXPORT_SYMBOL_GPL(usb_gadget_giveback_request);
> >  
> >  /* ------------------------------------------------------------------------- */
> >  
> > +/**
> > + * usb_gadget_control_complete - complete the status stage of a control
> > + *	request, or delay it
> > + * Context: in_interrupt()
> > + *
> > + * @gadget: gadget whose control request's status stage should be completed
> > + * @explicit_status: true to delay status stage, false to complete here
> > + * @status: completion code of previously completed request
> > + *
> > + * This is called by device controller drivers after returning the completed
> > + * request back to the gadget layer, to either complete or delay the status
> > + * stage.
> > + */
> > +void usb_gadget_control_complete(struct usb_gadget *gadget,
> > +		unsigned int explicit_status, int status)
> > +{
> > +	struct usb_request *req;
> > +
> > +	if (explicit_status || status)
> > +		return;
> > +
> > +	/* Send an implicit status-stage request for ep0 */
> > +	req = usb_ep_alloc_request(gadget->ep0, GFP_ATOMIC);
> > +	if (req) {
> > +		req->length = 0;
> > +		req->explicit_status = 0;
> 
> Oops!  I should have spotted this in the previous version, sorry. The
> implicit status-stage request should have its ->explicit_status set, so
> that we don't try to submit another status request when this one
> completes.

No, it's fine; the previous version had it set to 1 :)

I didn't think it mattered, but the way you describe it makes it seem
like it would matter depending on the UDC driver implementation, so I'll
put it back in.

> Also, would it look better if the type of explicit_status was bool 
> instead of unsigned int (both here and in the structure)?

Yes, it would; I'll make the change.

> Either way, once this change is made:
> 
> Acked-by: Alan Stern <stern@rowland.harvard.edu>

Thank you :)

> > +		req->complete = usb_ep_free_request;
> > +		usb_ep_queue(gadget->ep0, req, GFP_ATOMIC);
> > +	}
> > +}
> > +EXPORT_SYMBOL_GPL(usb_gadget_control_complete);
> > +
> > +/* ------------------------------------------------------------------------- */
> > +
> >  /**
> >   * gadget_find_ep_by_name - returns ep whose name is the same as sting passed
> >   *	in second parameter or NULL if searched endpoint not found
> > diff --git a/include/linux/usb/gadget.h b/include/linux/usb/gadget.h
> > index e5cd84a0f84a..1e3a23637468 100644
> > --- a/include/linux/usb/gadget.h
> > +++ b/include/linux/usb/gadget.h
> > @@ -73,6 +73,7 @@ struct usb_ep;
> >   *	Note that for writes (IN transfers) some data bytes may still
> >   *	reside in a device-side FIFO when the request is reported as
> >   *	complete.
> > + * @explicit_status: If true, delays the status stage
> >   *
> >   * These are allocated/freed through the endpoint they're used with.  The
> >   * hardware's driver can add extra per-request data to the memory it returns,
> > @@ -114,6 +115,8 @@ struct usb_request {
> >  
> >  	int			status;
> >  	unsigned		actual;
> > +
> > +	unsigned		explicit_status:1;
> >  };
> >  
> >  /*-------------------------------------------------------------------------*/
> > @@ -850,6 +853,13 @@ extern void usb_gadget_giveback_request(struct usb_ep *ep,
> >  
> >  /*-------------------------------------------------------------------------*/
> >  
> > +/* utility to complete or delay status stage */
> > +
> > +void usb_gadget_control_complete(struct usb_gadget *gadget,
> > +		unsigned int explicit_status, int status);
> > +
> > +/*-------------------------------------------------------------------------*/
> > +
> >  /* utility to find endpoint by name */
> >  
> >  extern struct usb_ep *gadget_find_ep_by_name(struct usb_gadget *g,
> > 
> 

Paul Elder
