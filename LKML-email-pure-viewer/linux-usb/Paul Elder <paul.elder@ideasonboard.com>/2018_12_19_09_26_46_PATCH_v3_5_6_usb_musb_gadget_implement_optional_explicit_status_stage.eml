Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 21:32:27 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id E590558043E;
	Wed, 19 Dec 2018 01:27:25 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 19 Dec 2018 01:27:25 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ASasGcR3rHhPNFNzHsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segSL/vxwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QLYpUjqg8qhrUgflhi?=
 =?us-ascii?q?cZOTAk/m/Zict+g6BVoB2uqBJ/2JbUbYOOOfZifa7QZ88WSHBdUspNUSFKH4Oy?=
 =?us-ascii?q?b5EID+oEJetWtZPyp0YKrRCjCgesAP7gxSFShnTr2qA6y/4uERzC3AA6Ad0OtG?=
 =?us-ascii?q?nbo8vvNKoJUOC60bfHwi/Yb/NR3zfy84/IfQo7of6RR75/bc3RyUw2Gg7Dk16e?=
 =?us-ascii?q?qpTlMiuL2ugRt2WX9fdsWOyxh2I9tg18oSSjyt0th4TLno4YzlHJ+T92zYs6P9?=
 =?us-ascii?q?G1TFR3bcC6HJZUsSyRKpF4Tdk4Q25yvSY30r0GtoC/fCgN0Jkn2RHfZOKdc4SS?=
 =?us-ascii?q?4RLsSvyRITFmi3JhYr6/gAyy8Ue4xu39UMm7zkpKozJbntXQsn0BzQHf58aZRv?=
 =?us-ascii?q?dn40us2iqD2xrS5+xGOUw0kLDUK58lwr4+jJoTtkHDEzfymEX3iq+Wa0ol9vGr?=
 =?us-ascii?q?6+v5eLXmoIGTN4tthgH5PKUunNKwAf4jPwgQUGiU5/682Kfg/ULnWrVKiOM5kq?=
 =?us-ascii?q?3DvJDdP8Qbqba1AxVJ3YY79xa/EzCm3cwcnXkGL1JKZgiLjof0O1zVJPD4DPG/?=
 =?us-ascii?q?g0mjkTtxxvDGOKHhDYvJLnTZjLjherN94VZGyAUv1dBf+45UCrYZLfLzQEDxtc?=
 =?us-ascii?q?DYAQU+MwCuw+bnFc9y1oURWW+UBq+ZMaXSsUKH5+41IumMYpMVtyj5K/Q/+/Hu?=
 =?us-ascii?q?ino5k0cHfaa1xZsXdGy4HvN+LkWbZnrjnM0NEWQNvgo4Suzqj0aPUTpSZ3a0Qq?=
 =?us-ascii?q?I96Ss3CIOgDYffWI+thKaN0zu8Hp1TfmpGEEyDEW/0d4WYXPcBcDidItRhkjwD?=
 =?us-ascii?q?VritUZUh2gustALhz7pnL+zU+jAXtJ751dh14fHTmg829TBuE8ud1GSNRXlunm?=
 =?us-ascii?q?wUXz82wLx/oUtlx1eAy6d4heZUFdhS5/xTVAc6OoXRz+h7C9D0RwLAcc2FSFeg?=
 =?us-ascii?q?QtW6Hz4xSsg9zMMJY0Z4A9+ilAzM3zK2A78JkLyGHIE7/bjC33fvPcp9y2zJ1K?=
 =?us-ascii?q?86j1Y4RMtDMmmmhq169wjXHIPJl0SZl6C3daUTxiLN9WGDzXaQs0FcSgJ/TaLF?=
 =?us-ascii?q?XXUHbEvMsdv5/l/CT6OpCbk/LwRO09CCJbVQZt3pl1pGQuzjN8rYY2+qn2ewBB?=
 =?us-ascii?q?CIxq6DbYbwemUd2jndB1YAkwwJ4XmGMg0+DD+7o23CFDxuCU7vY0T0/OliqXO7?=
 =?us-ascii?q?S0g0zx2Kb0xhzba15gQZhfuGS/MX37IEvighpi5wHFa82dLWFtWBqxBgfKVafd?=
 =?us-ascii?q?My/lNH2XjFuAx6O5yqN7piiUIGcwRro0Pu0A16BZ9Ekcc0o3Il0gpzJbiD31Nc?=
 =?us-ascii?q?ajyXx5bwOr7QKmns5x2vb6/W2lfD0NeZ4KsP6fI4q0n9swGtDEYt73Jn09xN2X?=
 =?us-ascii?q?uG+prKFBYSUY72Uksv9xl6uqvWbTUn64LV1X1jK6+0sjDZ1tItBeslzAugfthF?=
 =?us-ascii?q?PKOFEg/yD9MVB8y0JOM2nFipawoOPPpO+64sI8Oma/yG1baxPOZhgD2pl35H75?=
 =?us-ascii?q?160k6W8SpzVPTI35ccz/6ExASHUyrzg0m7ssDwn4BJfjUSHmu5ySj5C49dfKxy?=
 =?us-ascii?q?fYAXCWiwJ8273Mlxh5noW3RA7l6sG0sG2NO1eRqVd1H83QxQ2V4XoHC9giu40j?=
 =?us-ascii?q?p0niotrqqe2izO3uvjeAAGOm5NWGltk1PsLZKogNAdWUiidxIpmwe95Ubm26hb?=
 =?us-ascii?q?o7xyL2vJTkdSfCj2LGZiXrGrtrWYYM5P65IosSNJX+S6el2aTr/9ox0H0yLsBW?=
 =?us-ascii?q?dexTY7dy20tZX9hRB1lGWdLHNrpnrDZc5w3Qvf5MDbRfNJ3jsJXi54hSPVBli9?=
 =?us-ascii?q?Odmk5tGUl5bFsuCjWGOtTJxTcS/3zYyesCu3/3FlARq6n/qrgN3oDRA60TPn19?=
 =?us-ascii?q?ltTSjIrwzzYojx26S6LOJoZE9oBFDn5sp+G4F+lJYwhZ4K1XgbgJWV4WQIkWPp?=
 =?us-ascii?q?PdpH3qL+aWIHRSQXzN7N/AjlxEpjI2qMx4L4VXWS2NFtZtekbWMNxiIy8dpKB7?=
 =?us-ascii?q?yK47xekit4uV64rQPXYfhgkTYR0/ou6HgGg+4XvAoh1DmSArcXHUNAJyzjiwyI?=
 =?us-ascii?q?78yirKVQfGuvbb+w1E9kkdGgFr6CpBxcWG3iepcjBiJw6sR/MFTR0Hz88I3ked?=
 =?us-ascii?q?/Qbc4NuR2QiRvPk+9VKJcpnPoQmSVnIX79vWEiy+MjlhNhx5a6vIyaK2l3+KK5?=
 =?us-ascii?q?HwVVNjn0Z8MV5zHsgrxSnseQ34CzAJphHi8HU4fvTfKtCDgSr+joNx6SED0grX?=
 =?us-ascii?q?eWAbjfEhWa6Eh4tHLDCYyrO2uUJHkEztViWR+dK1ZEgA0PWDU6n5g5Fh2lxcD7?=
 =?us-ascii?q?cUd54CwR6UD8qhdW1u1oMBz/WH/FpAi0cjc0VISfLB1O4wBC4EfVLNWe7v9pEC?=
 =?us-ascii?q?Fe5JGhtwuNKmqUZwlTCWEJW0qEB03sP7W05NnA9fSYCfS6L/fUfbqOruleXe+S?=
 =?us-ascii?q?xZ2zyotm4yqMNsKXM3liEfI720lDXXN4G8jDmDUPUSsXly3TYM6BuRe84TZ6rs?=
 =?us-ascii?q?S+8PTtRQLu6pGDC7pUMdVz5R+2hb2POPKXhCZ8MTxYzI8DxWfUyLgD214fkzth?=
 =?us-ascii?q?dyS2HrQaqyHMTLjcmqtWDxMAbyNzNc1I778z3wVXOM7bjM/12aB8jvIvF1hFUl?=
 =?us-ascii?q?nhkNmzZcMWO2G9KE/HBEGTObSaJD3Lxtv7br+mRbJMjOVbqRuwtC2fE0/iODSD?=
 =?us-ascii?q?ijboWwquMeFKkCGUIhhetJuhfRZqDGjpVMjmZQGjMN9rkT02xqU5h3PQOm4aND?=
 =?us-ascii?q?h8ckVNoaWR7CNYmPp/HWNB42FhLemFnSaZ8ubZJowXsfttHiR7ieZa7G4mxLtS?=
 =?us-ascii?q?6SEXDMByzS/bs8RjpU3giuiJwTpuSgZmqzpGjZmMu09lML/VsJJHXDKM/xMA92?=
 =?us-ascii?q?yWTR4LodRlA9jHuqxdw8PIkqj0IS1OtdnT+JgyHc/RffqOLX5pHB7lFSScWBMM?=
 =?us-ascii?q?UDrtOGXTilZ1kf2f/2aSqJI9o4Lg3pEJT+kIBxQOCvoGBxE9T5Q5K5BtU2Z8nA?=
 =?us-ascii?q?=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BvAADLDRpch0O0hNFjHQEBBQEHBQGBV?=
 =?us-ascii?q?AUBCwGDaxQTmBKCIZdcgV8tEwGHKiI3Bg0BAwEBAQEBAQIBEwEBAQoLCQgpIwy?=
 =?us-ascii?q?CNiKCZQMDAQIkCwENAQEyBQEFCQEBUANUBxIFgx2CAgQBpj6BbDOCdgEBBYEAh?=
 =?us-ascii?q?isIh36DJYEcgVc/gRGHe4V3iUeHD5BbBwKCJQSEJosGJIFdj3mJR4EFkQyBeDM?=
 =?us-ascii?q?aI4M8ghsMF4NKinEiMoEEAQEBO40lAQE?=
X-IPAS-Result: =?us-ascii?q?A0BvAADLDRpch0O0hNFjHQEBBQEHBQGBVAUBCwGDaxQTmBK?=
 =?us-ascii?q?CIZdcgV8tEwGHKiI3Bg0BAwEBAQEBAQIBEwEBAQoLCQgpIwyCNiKCZQMDAQIkC?=
 =?us-ascii?q?wENAQEyBQEFCQEBUANUBxIFgx2CAgQBpj6BbDOCdgEBBYEAhisIh36DJYEcgVc?=
 =?us-ascii?q?/gRGHe4V3iUeHD5BbBwKCJQSEJosGJIFdj3mJR4EFkQyBeDMaI4M8ghsMF4NKi?=
 =?us-ascii?q?nEiMoEEAQEBO40lAQE?=
X-IronPort-AV: E=Sophos;i="5.56,372,1539673200"; 
   d="scan'208";a="56970692"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 19 Dec 2018 01:27:24 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728798AbeLSJ1O (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 19 Dec 2018 04:27:14 -0500
Received: from perceval.ideasonboard.com ([213.167.242.64]:38838 "EHLO
        perceval.ideasonboard.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1728780AbeLSJ1L (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 19 Dec 2018 04:27:11 -0500
Received: from localhost.localdomain (unknown [96.44.9.229])
        by perceval.ideasonboard.com (Postfix) with ESMTPSA id 26CA6549;
        Wed, 19 Dec 2018 10:27:09 +0100 (CET)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=ideasonboard.com;
        s=mail; t=1545211630;
        bh=Atp3vudVybsWiiaiKZx+fWna9sAtxTMeHB+ZwYb71xI=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=Lj70RAGsRFtpVbYlrPq7M17nFssQHstDrHhljxL0kw2rjxUn13soBNhAbDpYWWS4S
         k8b0tfmbfN5jggRbqexKBAEZLhgfe4NxVFxs58t9jem3XQeBzBONrVy3kDK+Zwk+yh
         QSZFSW8yTVorGQhMk7KS9vzMPVzDKtx6+ng+tt9I=
From: Paul Elder <paul.elder@ideasonboard.com>
To: laurent.pinchart@ideasonboard.com, kieran.bingham@ideasonboard.com
Cc: Paul Elder <paul.elder@ideasonboard.com>, b-liu@ti.com,
        stern@rowland.harvard.edu, rogerq@ti.com, balbi@kernel.org,
        gregkh@linuxfoundation.org, linux-usb@vger.kernel.org,
        linux-kernel@vger.kernel.org
Subject: [PATCH v3 5/6] usb: musb: gadget: implement optional explicit status stage
Date: Wed, 19 Dec 2018 04:26:46 -0500
Message-Id: <20181219092647.12397-6-paul.elder@ideasonboard.com>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <20181219092647.12397-1-paul.elder@ideasonboard.com>
References: <20181219092647.12397-1-paul.elder@ideasonboard.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Implement the mechanism for optional explicit status stage for the MUSB
driver. This allows a function driver to specify what to reply for the
status stage. The functionality for an implicit status stage is
retained.

Signed-off-by: Paul Elder <paul.elder@ideasonboard.com>
v1 Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
v1 Acked-by: Bin Liu <b-liu@ti.com>
---
Changes from v2:
- update call to usb_gadget_control_complete to include status
- since sending STALL from the function driver is now done with
  usb_ep_set_halt, there is no need for the internal ep0_send_response to
  take a stall/ack parameter; remove the parameter and make the function
  only send ack, and remove checking for the status reply in the
  usb_request for the status stage

Changes from v1:
- obvious change to implement v2 mechanism laid out by 4/6 of this
  series (send_response, and musb_g_ep0_send_response function has
  been removed, call to usb_gadget_control_complete has been added)
- ep0_send_response's ack argument has been changed from stall
- last_packet flag in ep0_rxstate has been removed, since it is equal to
  req != NULL

 drivers/usb/musb/musb_gadget.c     |  2 ++
 drivers/usb/musb/musb_gadget_ep0.c | 23 +++++++++++++++++++++++
 2 files changed, 25 insertions(+)

diff --git a/drivers/usb/musb/musb_gadget.c b/drivers/usb/musb/musb_gadget.c
index d3f33f449445..a7a992ab0c9d 100644
--- a/drivers/usb/musb/musb_gadget.c
+++ b/drivers/usb/musb/musb_gadget.c
@@ -145,6 +145,8 @@ __acquires(ep->musb->lock)
 
 	trace_musb_req_gb(req);
 	usb_gadget_giveback_request(&req->ep->end_point, &req->request);
+	usb_gadget_control_complete(&musb->g, request->explicit_status,
+			request->status);
 	spin_lock(&musb->lock);
 	ep->busy = busy;
 }
diff --git a/drivers/usb/musb/musb_gadget_ep0.c b/drivers/usb/musb/musb_gadget_ep0.c
index 91a5027b5c1f..bbce8a9d77e4 100644
--- a/drivers/usb/musb/musb_gadget_ep0.c
+++ b/drivers/usb/musb/musb_gadget_ep0.c
@@ -458,6 +458,23 @@ __acquires(musb->lock)
 	return handled;
 }
 
+static int ep0_send_ack(struct musb *musb)
+{
+	void __iomem *regs = musb->control_ep->regs;
+	u16 ackpend;
+
+	if (musb->ep0_state != MUSB_EP0_STAGE_RX &&
+	    musb->ep0_state != MUSB_EP0_STAGE_STATUSIN)
+		return -EINVAL;
+
+	ackpend = MUSB_CSR0_P_DATAEND | MUSB_CSR0_P_SVDRXPKTRDY;
+
+	musb_ep_select(musb->mregs, 0);
+	musb_writew(regs, MUSB_CSR0, ackpend);
+
+	return 0;
+}
+
 /* we have an ep0out data packet
  * Context:  caller holds controller lock
  */
@@ -504,10 +521,13 @@ static void ep0_rxstate(struct musb *musb)
 	if (req) {
 		musb->ackpend = csr;
 		musb_g_ep0_giveback(musb, req);
+		if (req->explicit_status)
+			return;
 		if (!musb->ackpend)
 			return;
 		musb->ackpend = 0;
 	}
+
 	musb_ep_select(musb->mregs, 0);
 	musb_writew(regs, MUSB_CSR0, csr);
 }
@@ -939,6 +959,9 @@ musb_g_ep0_queue(struct usb_ep *e, struct usb_request *r, gfp_t gfp_flags)
 	case MUSB_EP0_STAGE_ACKWAIT:	/* zero-length data */
 		status = 0;
 		break;
+	case MUSB_EP0_STAGE_STATUSIN:
+		status = ep0_send_ack(musb);
+		goto cleanup;
 	default:
 		musb_dbg(musb, "ep0 request queued in state %d",
 				musb->ep0_state);
-- 
2.19.2

