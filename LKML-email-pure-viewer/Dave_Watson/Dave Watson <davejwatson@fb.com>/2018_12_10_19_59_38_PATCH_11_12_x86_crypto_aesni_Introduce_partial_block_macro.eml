Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 11 Dec 2018 08:42:54 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 498EF5807A2;
	Mon, 10 Dec 2018 12:00:16 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga007-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 10 Dec 2018 12:00:15 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ANhcQuBJRVITB0xOYTdmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgULf37rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZXshfSTFPAp+y?=
 =?us-ascii?q?YYUMAeoOP+hXr4jhqFUBohS+HhGsCeH0xz9Un3/7x7E23/g7HA3Y2gErAtIAsG?=
 =?us-ascii?q?7TrNXwLKocX/q6zLfWwj7eb/xZwyv96JPPchAnvPqBWq9/ftDPyUYxFQPEgE+f?=
 =?us-ascii?q?qZD+PzOS0OQAqGab4PF6We2zjG4nrhh8rz6yzckijYnJg5gaylHC9ShhwYs4Ks?=
 =?us-ascii?q?e0SFVgbtOiDZBetDmaOpNoTs8+R2xkojs2x7MYtZKhYSQHy4grywTeZvGFa4SE?=
 =?us-ascii?q?/BPuWPiNLTp9mX5pZK+wihOu/kS8zuDwSsy53EtJoyZZl9TBs20B2hnN5sSZS/?=
 =?us-ascii?q?Zx41+t2TiR2A3Q9u1JJEU5mK7GJ5I837E9k4QcvlneEiDsnUj7jrGZe0ok9+Wt?=
 =?us-ascii?q?6unqbbvrq5CaOoRpkA/xKL4ulda6AekgMggBQWyb+eOk2b398k32Xq9Kguc1kq?=
 =?us-ascii?q?bHqpDaI9oUpqqjDw9SyIYj5A6zDzag0NsGgXkKNExJdA6DgoTzJl3DLu70Ae2i?=
 =?us-ascii?q?j1mvjDtn3fHLM7/5DpXINHfDkbPhfbhn605bzQo+1dRf55NSCrEcL/P/Q0zxu8?=
 =?us-ascii?q?LCDh8/LQO0x//rCNJz14MYR22PGLSUML3dsVCW/OIjOeqMa5EPuDb7Nfcl4+Ti?=
 =?us-ascii?q?jXgjmV8SZaWpx4cYaGikHvR6JEWUeX7sgtYCEWgUpAY/Q/HqhUaGUT5SYXayQq?=
 =?us-ascii?q?096is6CIKgEYfMWIStjKad0ye8G51cfnpGBUyUEXf0a4WEXO8BaCKILc9gjjwL?=
 =?us-ascii?q?T7+hR5Uh1RGzrgD6zbVnI/HQ+i0Zs5Ljydd06/fSlRE06Tx7EcCd33uRQGFzm2?=
 =?us-ascii?q?MCXyU207xnoUxh1leD1rB1g/5fFdNN/f9JUQA6NZjaz+x9EN3yXgPBftGUSFep?=
 =?us-ascii?q?WNmmADcxTs4vzN8KeUpyB9KijhXb1SqwH7AVj6CLBIAz8q/ExXfxPMZ9y3HF1K?=
 =?us-ascii?q?U7lVkpWMlPOHaihq5+8QjTGoHIn1+Yl6asaaQTwirN+H2fwmqJuUFSSBRwXrnd?=
 =?us-ascii?q?XXADekvWqsz05kDYQL+oE7gnNgpBxtSEKqtFcdDpiVRGRPH+ONXReW6xmmGwBQ?=
 =?us-ascii?q?qWybOIdoblZ2Id3CDFAkgejw8T5WqGNRQ5Biq5vm3RFiJuGkz1b0Ps6+Z+rmi7?=
 =?us-ascii?q?QVEyzw2Na01h1L+1+hoOiPyYSvMT2K8EuSg7pzV1Gla9w8zZC96aqwV9e6VcZM?=
 =?us-ascii?q?s34E1b2mLBqwx9IpugIrh/iVEEbQR4oVni1xVtBYVGisglsnUqwRF2KaKZ1lNB?=
 =?us-ascii?q?ajyZ0YrxOr3RNmn94hSvZ7TK1VHZ1dac4r0P5+ggq1X/oAGpEVIv82lm09lQ1H?=
 =?us-ascii?q?uc+pXKDQoIXZLtSEo38AJ6p7XbYik76IPZznlsMaiysj/f1NMlHuolyhC8f9hB?=
 =?us-ascii?q?NKOIDhP9E8ofB8K2Muwlh0Cpbg4YPOBV7KM7JcemeOWJ2aG1POdshimpjXla74?=
 =?us-ascii?q?9n1EKM9C18SvDT0pYBwvGY2BaHVjjmgFegtMD3hZ5LZTUIEmWjzijkAZZbZrdu?=
 =?us-ascii?q?coYTFWeuP8q3y81+hp7wQXJX6ESvBlIG2MCzfxqSYEfw3QlR1UQRvHymljG0zz?=
 =?us-ascii?q?1ykzE1sKWf2DbCzPjldBoCImRLXnVtjU/wIYioiNAXRFKobwk1mxS//0b12q9b?=
 =?us-ascii?q?qL55L2bNW0dIfjH6IH14Xau0q7WNfdRP6JQusShMVOS8YFaaSqPyohcA0iPjGX?=
 =?us-ascii?q?deyy4/dz2wppr5mBl6gnqHLHlvtHrZZd1wxRDH6d3cRP5dxDoHSDNjiTnKAFix?=
 =?us-ascii?q?JN2p/dSSl5feveGyTWOhVptPcSb1yYOMrje05WpvARenhfC8hsXnERQm0S/8z9?=
 =?us-ascii?q?RqVz/HrAz/Yono0KS2K/lncVNrBF//6sp6HJ9xko0riZEU2HgagIiV/HUdnWfy?=
 =?us-ascii?q?N9VbxbzxbH4XSTEXxN7V5RDv2Fd/IXKR24L5SnKdz9NhZtagZWMawCA978FMCK?=
 =?us-ascii?q?qP6LxEnC11oke3rA7LYPh9mCsdxuUq6HIAn+4Jvw8txD2HAr8OBUlYITDslxOQ?=
 =?us-ascii?q?4tC9tqpXZXyjcbit1EVkm9ChA6qPogVdWHb/Z5cjEjV87sR5MFLQznLz7pvod8?=
 =?us-ascii?q?XXbdIWrheUiQvPj/BJKJItkfoHnS9nOWP+vXI/0eI6gwJh3YqmvIeZMWVi57y2?=
 =?us-ascii?q?AgRXNjDuY8MT+zftjbtRn8qM3oCvGIlhFSsPXJfyUf2oFzcSv+z9NwmSCD08tm?=
 =?us-ascii?q?ubGb3HEA+D70dmqmjDEpGxOHGROXkZ1s5iRBiGKUxbgQAUWig6n5EjGgCrwszh?=
 =?us-ascii?q?bFl25jQL6lHkrRtMz/piNwPjXWfHuAeodjA0RYCEIxVM6QFC41rVPdaa7uJuBC?=
 =?us-ascii?q?xY+pyhrAqQKm2UfQhIDGcJWlCaCFDnJLWh+d7A8+2ADOqkM/TOeamOqfBZV/qQ?=
 =?us-ascii?q?x5KgyI5m8CiXNsmVInluFf472ldAXXBkHcTWgS4PRjcTlyLMac6buRi99jd2rs?=
 =?us-ascii?q?C57PTkRgbv6ZGTBLtVNNVl4wq2jrubN+6MmCZ5Li5V15MLxX/V0bgfwUQdiyd0?=
 =?us-ascii?q?ezm2FrQAsyHNQbnUmq9WCR4bdixyONFJ76I6wglCJ8rbhsnp2b5/i/4/E01FWk?=
 =?us-ascii?q?D5msG1ecwKJHmwNFPZC0aKN7SGJjzLz9v0YaOmTr1Qg/tbtwetuTaACELjOjWD?=
 =?us-ascii?q?lz/0VxGgK+1MjSebPABAt4G5aBpiFW/jTNf+YB2hLNB3lSE2waEzhn7SL2EcLC?=
 =?us-ascii?q?Nzc1lTobyQ9y9YhvR/FndF7npkK+mEhimY4/PZKpYQrftkHCB0m/hG73Q9zrtf?=
 =?us-ascii?q?9DtES+BtmCvOst5upEmrkvWOyjpiShZBtixHi56LvUp8P6XU7Z1AWXfC/BIQ4m?=
 =?us-ascii?q?ScERUKp915CtLxv6Bc0MTAlKX2KD1a6dLb4dMcB9TIKMKAKHcgMQDmGDjRDAsE?=
 =?us-ascii?q?Sz6kLWDeh0xHn/GU+X2YtZw6qpnqmJoTRb5XTl01FvUGCkt7GNwOOot4XjQhke?=
 =?us-ascii?q?3TsMldxXekphTLWI1qo9iTVv+IC/j1NB6Wir9IYAFOyKvxK41VMZf0nUV/PB0y?=
 =?us-ascii?q?vpnMEkvcFetNqy1gYkdgolhL+XlyVUU83EXqbg7r63gWQ7r8pQI7hAVzZ6wO8D?=
 =?us-ascii?q?73+FotOhKevzc9nkc8n5PmhTmKazPrMI+rUIpLDSfo8UM2N8W/C0xxbAuvjQlv?=
 =?us-ascii?q?LibcW7V5kbRtbyZohRXatJ8JHuRTB+UQZB4W2OHSbO85yUhbgjuoyFUB5ubfD5?=
 =?us-ascii?q?Zm0gwwfsj/gWhH3ldPZcA4bZPZOLFOyBAEiquQsy233/wqxwk2KUxL+2SXLn1b?=
 =?us-ascii?q?8HcUP6UrcnL7ttdn7haPzn4aIDAB?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0B8AQBpxQ5ch0O0hNFkHQEBBQEHBQGBZ?=
 =?us-ascii?q?YExgiwECyeHQQOFLosxgiGYYQNMEgEBGBMBh20iOBIBAwEBAQEBAQIBEwEBAQg?=
 =?us-ascii?q?NCQgpIwyCNiQBgmICAQMBAg8oBgEBNwEFCQEBAQE+EAMvJQIEAQ0FBR2Cf4FqA?=
 =?us-ascii?q?xUBBJtGAi6JWAEBAYIdgnYBAQWFAhiCCQiKX4ElHReBf4EQNI07iTeXQAmCJY9?=
 =?us-ascii?q?CgVyIQIchiSKBBY5iAgICAgQFAg0BAQWBXYF3MxojgzyCGwkCGINKilNygQUBA?=
 =?us-ascii?q?SGLdwEB?=
X-IPAS-Result: =?us-ascii?q?A0B8AQBpxQ5ch0O0hNFkHQEBBQEHBQGBZYExgiwECyeHQQO?=
 =?us-ascii?q?FLosxgiGYYQNMEgEBGBMBh20iOBIBAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBg?=
 =?us-ascii?q?mICAQMBAg8oBgEBNwEFCQEBAQE+EAMvJQIEAQ0FBR2Cf4FqAxUBBJtGAi6JWAE?=
 =?us-ascii?q?BAYIdgnYBAQWFAhiCCQiKX4ElHReBf4EQNI07iTeXQAmCJY9CgVyIQIchiSKBB?=
 =?us-ascii?q?Y5iAgICAgQFAg0BAQWBXYF3MxojgzyCGwkCGINKilNygQUBASGLdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,339,1539673200"; 
   d="scan'208";a="54595656"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 10 Dec 2018 12:00:13 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729652AbeLJUAI (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 10 Dec 2018 15:00:08 -0500
Received: from mx0b-00082601.pphosted.com ([67.231.153.30]:52584 "EHLO
        mx0b-00082601.pphosted.com" rhost-flags-OK-OK-OK-OK)
        by vger.kernel.org with ESMTP id S1727596AbeLJUAG (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 10 Dec 2018 15:00:06 -0500
Received: from pps.filterd (m0109332.ppops.net [127.0.0.1])
        by mx0a-00082601.pphosted.com (8.16.0.27/8.16.0.27) with SMTP id wBAJxNeE031979;
        Mon, 10 Dec 2018 11:59:55 -0800
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=fb.com; h=from : to : cc : subject
 : date : message-id : references : in-reply-to : content-type : content-id
 : content-transfer-encoding : mime-version; s=facebook;
 bh=laFvmhLu1XU8kPONGuHW6OuXsXiuED390f4AeWqxBZk=;
 b=ol1GCFJdaiKBzOum6uUK0LeRZgRVYxl1SXg1zT/HwKpFwXXk4Q8PtlNa3EFGJz2LxzUr
 Cz0vXR8iQyUm1Tjg/3G/XG4PUJPNC0WeQm4gaolz/p/wPP9TM1QOgTErTGdX3fnvLuVa
 P4QHkgShPj7VpXbquT4UVULmF1BQtBURygc= 
Received: from mail.thefacebook.com ([199.201.64.23])
        by mx0a-00082601.pphosted.com with ESMTP id 2p9wvx872q-13
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-SHA384 bits=256 verify=NOT);
        Mon, 10 Dec 2018 11:59:54 -0800
Received: from prn-hub03.TheFacebook.com (2620:10d:c081:35::127) by
 prn-hub06.TheFacebook.com (2620:10d:c081:35::130) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384) id
 15.1.1531.3; Mon, 10 Dec 2018 11:59:40 -0800
Received: from NAM05-CO1-obe.outbound.protection.outlook.com (192.168.54.28)
 by o365-in.thefacebook.com (192.168.16.27) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384) id 15.1.1531.3
 via Frontend Transport; Mon, 10 Dec 2018 11:59:40 -0800
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=fb.onmicrosoft.com;
 s=selector1-fb-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=laFvmhLu1XU8kPONGuHW6OuXsXiuED390f4AeWqxBZk=;
 b=ayUEim2QD55MsqNCDdgKMWlNtOh8/rnRdKOmeneEC0X6JnrTHzIBCcLZRLr3nvf2qWYgvje6E0v6eUAdUVR7s754T0GCui17Tr94DymQS967YKZsf/ZAq7jANhmYRKlCyj9/D6jhOIzuFxF/zS3xGx+k5cGm7LTpSoDZwosVdF4=
Received: from MWHPR15MB1134.namprd15.prod.outlook.com (10.175.2.12) by
 MWHPR15MB1118.namprd15.prod.outlook.com (10.175.2.8) with Microsoft SMTP
 Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1404.19; Mon, 10 Dec 2018 19:59:38 +0000
Received: from MWHPR15MB1134.namprd15.prod.outlook.com
 ([fe80::911d:ed1a:7e45:6434]) by MWHPR15MB1134.namprd15.prod.outlook.com
 ([fe80::911d:ed1a:7e45:6434%4]) with mapi id 15.20.1404.026; Mon, 10 Dec 2018
 19:59:38 +0000
From: Dave Watson <davejwatson@fb.com>
To: Herbert Xu <herbert@gondor.apana.org.au>,
        Junaid Shahid <junaids@google.com>,
        Steffen Klassert <steffen.klassert@secunet.com>,
        "linux-crypto@vger.kernel.org" <linux-crypto@vger.kernel.org>
CC: Doron Roberts-Kedes <doronrk@fb.com>,
        Sabrina Dubroca <sd@queasysnail.net>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        Stephan Mueller <smueller@chronox.de>
Subject: [PATCH 11/12] x86/crypto: aesni: Introduce partial block macro
Thread-Topic: [PATCH 11/12] x86/crypto: aesni: Introduce partial block macro
Thread-Index: AQHUkMLhsUg1ZlT5qEOkVFI0jgUkaQ==
Date: Mon, 10 Dec 2018 19:59:38 +0000
Message-ID: <67137103e3a6b4ac0f20fe94eef0575536b11af8.1544471415.git.davejwatson@fb.com>
References: <cover.1544471415.git.davejwatson@fb.com>
In-Reply-To: <cover.1544471415.git.davejwatson@fb.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
user-agent: NeoMutt/20180716
x-clientproxiedby: MWHPR0201CA0066.namprd02.prod.outlook.com
 (2603:10b6:301:73::43) To MWHPR15MB1134.namprd15.prod.outlook.com
 (2603:10b6:320:22::12)
x-ms-exchange-messagesentrepresentingtype: 1
x-originating-ip: [2620:10d:c090:180::1:2261]
x-ms-publictraffictype: Email
x-microsoft-exchange-diagnostics: 1;MWHPR15MB1118;20:H2M5j3tIDwGbeK8hg533xU2Wg0q3GhivKMDIndYDOFfIgBA7zI9jG12+d8Qls34c6yi+cubBZl/dBXt3te9YZTX84nZCHB4pM2obbSOPopUdXUHzulDVoFg/EygOVsWDgs2Vx34wA0kkYQouYC3/hgBm5RExafl++etcGk/0Za0=
x-ms-office365-filtering-correlation-id: 5d46d37e-d2d1-4607-d2cd-08d65eda03d2
x-microsoft-antispam: BCL:0;PCL:0;RULEID:(2390098)(7020095)(4652040)(8989299)(5600074)(711020)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(2017052603328)(7153060)(7193020);SRVR:MWHPR15MB1118;
x-ms-traffictypediagnostic: MWHPR15MB1118:
x-microsoft-antispam-prvs: <MWHPR15MB111801531BB5066BBA7700E3DDA50@MWHPR15MB1118.namprd15.prod.outlook.com>
x-ms-exchange-senderadcheck: 1
x-exchange-antispam-report-cfa-test: BCL:0;PCL:0;RULEID:(8211001083)(3230017)(999002)(11241501185)(6040522)(2401047)(8121501046)(5005006)(3231472)(944501520)(52105112)(3002001)(93006095)(93001095)(10201501046)(148016)(149066)(150057)(6041310)(20161123560045)(20161123558120)(20161123562045)(20161123564045)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(201708071742011)(7699051)(76991095);SRVR:MWHPR15MB1118;BCL:0;PCL:0;RULEID:;SRVR:MWHPR15MB1118;
x-forefront-prvs: 08828D20BC
x-forefront-antispam-report: SFV:NSPM;SFS:(10019020)(346002)(366004)(396003)(376002)(39860400002)(136003)(189003)(199004)(102836004)(5660300001)(305945005)(36756003)(106356001)(99286004)(316002)(7736002)(4326008)(81156014)(54906003)(68736007)(76176011)(53936002)(2906002)(14454004)(58126008)(478600001)(6506007)(386003)(52116002)(186003)(8936002)(110136005)(118296001)(6116002)(2616005)(97736004)(476003)(11346002)(256004)(6436002)(2501003)(25786009)(6512007)(81166006)(8676002)(86362001)(486006)(46003)(14444005)(446003)(105586002)(6486002)(71200400001)(71190400001);DIR:OUT;SFP:1102;SCL:1;SRVR:MWHPR15MB1118;H:MWHPR15MB1134.namprd15.prod.outlook.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;MX:1;A:1;
x-microsoft-antispam-message-info: 3WJ21OzUudcd6S/51caXAWI+kT081P6JqEpvUGxbQk/GVLhwKzCB18z+26rGnZdt9I9NGtpf0UHA3v/EGgJVUXLNyUrfO1zrwsXLIuaCW40GJGspPllv6wfgjoL42qRTopLehaarP9GG5GIAV7g/45YxEWkZ+p9sUKcS1h5x7P8T2b5qrkXUPUKJphwMN3c8bk5aDeDB83bzOT0HWGkMP02KENX7FR+D8RgKmNgR5V57d6j16t7hbBqq3bEOw3fRQ4XBR2LT68ESvJ7z79MSk1rjaM+fM1M1TiMdujoqELOE8NFD1o/PkcU3ztacIhiy
spamdiagnosticoutput: 1:99
spamdiagnosticmetadata: NSPM
Content-Type: text/plain; charset="us-ascii"
Content-ID: <AE772F2144BDCA44A208FC5231E0D859@namprd15.prod.outlook.com>
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
X-MS-Exchange-CrossTenant-Network-Message-Id: 5d46d37e-d2d1-4607-d2cd-08d65eda03d2
X-MS-Exchange-CrossTenant-originalarrivaltime: 10 Dec 2018 19:59:38.4437
 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: 8ae927fe-1255-47a7-a2af-5f3a069daaa2
X-MS-Exchange-Transport-CrossTenantHeadersStamped: MWHPR15MB1118
X-OriginatorOrg: fb.com
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10434:,, definitions=2018-12-10_07:,,
 signatures=0
X-Proofpoint-Spam-Reason: safe
X-FB-Internal: Safe
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Before this diff, multiple calls to GCM_ENC_DEC will
succeed, but only if all calls are a multiple of 16 bytes.

Handle partial blocks at the start of GCM_ENC_DEC, and update
aadhash as appropriate.

The data offset %r11 is also updated after the partial block.

Signed-off-by: Dave Watson <davejwatson@fb.com>
---
 arch/x86/crypto/aesni-intel_avx-x86_64.S | 156 ++++++++++++++++++++++-
 1 file changed, 150 insertions(+), 6 deletions(-)

diff --git a/arch/x86/crypto/aesni-intel_avx-x86_64.S b/arch/x86/crypto/aes=
ni-intel_avx-x86_64.S
index ff00ad19064d..af45fc57db90 100644
--- a/arch/x86/crypto/aesni-intel_avx-x86_64.S
+++ b/arch/x86/crypto/aesni-intel_avx-x86_64.S
@@ -301,6 +301,12 @@ VARIABLE_OFFSET =3D 16*8
         vmovdqu  HashKey(arg2), %xmm13      # xmm13 =3D HashKey
         add arg5, InLen(arg2)
=20
+        # initialize the data pointer offset as zero
+        xor     %r11d, %r11d
+
+        PARTIAL_BLOCK \GHASH_MUL, arg3, arg4, arg5, %r11, %xmm8, \ENC_DEC
+        sub %r11, arg5
+
         mov     arg5, %r13                  # save the number of bytes of =
plaintext/ciphertext
         and     $-16, %r13                  # r13 =3D r13 - (r13 mod 16)
=20
@@ -737,6 +743,150 @@ _read_next_byte_lt8_\@:
 _done_read_partial_block_\@:
 .endm
=20
+# PARTIAL_BLOCK: Handles encryption/decryption and the tag partial blocks
+# between update calls.
+# Requires the input data be at least 1 byte long due to READ_PARTIAL_BLOC=
K
+# Outputs encrypted bytes, and updates hash and partial info in gcm_data_c=
ontext
+# Clobbers rax, r10, r12, r13, xmm0-6, xmm9-13
+.macro PARTIAL_BLOCK GHASH_MUL CYPH_PLAIN_OUT PLAIN_CYPH_IN PLAIN_CYPH_LEN=
 DATA_OFFSET \
+        AAD_HASH ENC_DEC
+        mov 	PBlockLen(arg2), %r13
+        cmp	$0, %r13
+        je	_partial_block_done_\@	# Leave Macro if no partial blocks
+        # Read in input data without over reading
+        cmp	$16, \PLAIN_CYPH_LEN
+        jl	_fewer_than_16_bytes_\@
+        vmovdqu	(\PLAIN_CYPH_IN), %xmm1	# If more than 16 bytes, just fill=
 xmm
+        jmp	_data_read_\@
+
+_fewer_than_16_bytes_\@:
+        lea	(\PLAIN_CYPH_IN, \DATA_OFFSET, 1), %r10
+        mov	\PLAIN_CYPH_LEN, %r12
+        READ_PARTIAL_BLOCK %r10 %r12 %xmm1
+
+        mov PBlockLen(arg2), %r13
+
+_data_read_\@:				# Finished reading in data
+
+        vmovdqu	PBlockEncKey(arg2), %xmm9
+        vmovdqu	HashKey(arg2), %xmm13
+
+        lea	SHIFT_MASK(%rip), %r12
+
+        # adjust the shuffle mask pointer to be able to shift r13 bytes
+        # r16-r13 is the number of bytes in plaintext mod 16)
+        add	%r13, %r12
+        vmovdqu	(%r12), %xmm2		# get the appropriate shuffle mask
+        vpshufb %xmm2, %xmm9, %xmm9		# shift right r13 bytes
+
+.if  \ENC_DEC =3D=3D  DEC
+        vmovdqa	%xmm1, %xmm3
+        pxor	%xmm1, %xmm9		# Cyphertext XOR E(K, Yn)
+
+        mov	\PLAIN_CYPH_LEN, %r10
+        add	%r13, %r10
+        # Set r10 to be the amount of data left in CYPH_PLAIN_IN after fil=
ling
+        sub	$16, %r10
+        # Determine if if partial block is not being filled and
+        # shift mask accordingly
+        jge	_no_extra_mask_1_\@
+        sub	%r10, %r12
+_no_extra_mask_1_\@:
+
+        vmovdqu	ALL_F-SHIFT_MASK(%r12), %xmm1
+        # get the appropriate mask to mask out bottom r13 bytes of xmm9
+        vpand	%xmm1, %xmm9, %xmm9		# mask out bottom r13 bytes of xmm9
+
+        vpand	%xmm1, %xmm3, %xmm3
+        vmovdqa	SHUF_MASK(%rip), %xmm10
+        vpshufb	%xmm10, %xmm3, %xmm3
+        vpshufb	%xmm2, %xmm3, %xmm3
+        vpxor	%xmm3, \AAD_HASH, \AAD_HASH
+
+        cmp	$0, %r10
+        jl	_partial_incomplete_1_\@
+
+        # GHASH computation for the last <16 Byte block
+        \GHASH_MUL \AAD_HASH, %xmm13, %xmm0, %xmm10, %xmm11, %xmm5, %xmm6
+        xor	%eax,%eax
+
+        mov	%rax, PBlockLen(arg2)
+        jmp	_dec_done_\@
+_partial_incomplete_1_\@:
+        add	\PLAIN_CYPH_LEN, PBlockLen(arg2)
+_dec_done_\@:
+        vmovdqu	\AAD_HASH, AadHash(arg2)
+.else
+        vpxor	%xmm1, %xmm9, %xmm9			# Plaintext XOR E(K, Yn)
+
+        mov	\PLAIN_CYPH_LEN, %r10
+        add	%r13, %r10
+        # Set r10 to be the amount of data left in CYPH_PLAIN_IN after fil=
ling
+        sub	$16, %r10
+        # Determine if if partial block is not being filled and
+        # shift mask accordingly
+        jge	_no_extra_mask_2_\@
+        sub	%r10, %r12
+_no_extra_mask_2_\@:
+
+        vmovdqu	ALL_F-SHIFT_MASK(%r12), %xmm1
+        # get the appropriate mask to mask out bottom r13 bytes of xmm9
+        vpand	%xmm1, %xmm9, %xmm9
+
+        vmovdqa	SHUF_MASK(%rip), %xmm1
+        vpshufb %xmm1, %xmm9, %xmm9
+        vpshufb %xmm2, %xmm9, %xmm9
+        vpxor	%xmm9, \AAD_HASH, \AAD_HASH
+
+        cmp	$0, %r10
+        jl	_partial_incomplete_2_\@
+
+        # GHASH computation for the last <16 Byte block
+        \GHASH_MUL \AAD_HASH, %xmm13, %xmm0, %xmm10, %xmm11, %xmm5, %xmm6
+        xor	%eax,%eax
+
+        mov	%rax, PBlockLen(arg2)
+        jmp	_encode_done_\@
+_partial_incomplete_2_\@:
+        add	\PLAIN_CYPH_LEN, PBlockLen(arg2)
+_encode_done_\@:
+        vmovdqu	\AAD_HASH, AadHash(arg2)
+
+        vmovdqa	SHUF_MASK(%rip), %xmm10
+        # shuffle xmm9 back to output as ciphertext
+        vpshufb	%xmm10, %xmm9, %xmm9
+        vpshufb	%xmm2, %xmm9, %xmm9
+.endif
+        # output encrypted Bytes
+        cmp	$0, %r10
+        jl	_partial_fill_\@
+        mov	%r13, %r12
+        mov	$16, %r13
+        # Set r13 to be the number of bytes to write out
+        sub	%r12, %r13
+        jmp	_count_set_\@
+_partial_fill_\@:
+        mov	\PLAIN_CYPH_LEN, %r13
+_count_set_\@:
+        vmovdqa	%xmm9, %xmm0
+        vmovq	%xmm0, %rax
+        cmp	$8, %r13
+        jle	_less_than_8_bytes_left_\@
+
+        mov	%rax, (\CYPH_PLAIN_OUT, \DATA_OFFSET, 1)
+        add	$8, \DATA_OFFSET
+        psrldq	$8, %xmm0
+        vmovq	%xmm0, %rax
+        sub	$8, %r13
+_less_than_8_bytes_left_\@:
+        movb	%al, (\CYPH_PLAIN_OUT, \DATA_OFFSET, 1)
+        add	$1, \DATA_OFFSET
+        shr	$8, %rax
+        sub	$1, %r13
+        jne	_less_than_8_bytes_left_\@
+_partial_block_done_\@:
+.endm # PARTIAL_BLOCK
+
 #ifdef CONFIG_AS_AVX
 ##########################################################################=
#####
 # GHASH_MUL MACRO to implement: Data*HashKey mod (128,127,126,121,0)
@@ -856,9 +1006,6 @@ _done_read_partial_block_\@:
 	setreg
         vmovdqu AadHash(arg2), reg_i
=20
-	# initialize the data pointer offset as zero
-	xor     %r11d, %r11d
-
 	# start AES for num_initial_blocks blocks
 	vmovdqu CurCount(arg2), \CTR
=20
@@ -1798,9 +1945,6 @@ ENDPROC(aesni_gcm_dec_avx_gen2)
 	setreg
 	vmovdqu AadHash(arg2), reg_i
=20
-	# initialize the data pointer offset as zero
-	xor     %r11d, %r11d
-
 	# start AES for num_initial_blocks blocks
 	vmovdqu CurCount(arg2), \CTR
=20
--=20
2.17.1

