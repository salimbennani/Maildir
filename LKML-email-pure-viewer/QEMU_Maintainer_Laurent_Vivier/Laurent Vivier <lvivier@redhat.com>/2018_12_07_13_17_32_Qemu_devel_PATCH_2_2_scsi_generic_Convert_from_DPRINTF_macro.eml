Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 09 Dec 2018 18:49:12 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 0CDEF5803E4
	for <like.xu@linux.intel.com>; Fri,  7 Dec 2018 05:21:05 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 07 Dec 2018 05:21:04 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AoyNnvxaPz75bQaxbtnljz2P/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZrsm9bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJVyJPHI2y?=
 =?us-ascii?q?YYgNAOoPMulWoJTzp0MMoBW8CgSgGe3ixiNWiX/txqA2z/0hHBva0AA8A94CrH?=
 =?us-ascii?q?LZp8j1OqcIVuC1ybHFwzPZYPNLwzfy9o7Icgw8qv6DXLJwb8vRxlc1FwjYiViQ?=
 =?us-ascii?q?rZLlPzKL1uQMrWeb9fFtVfixhGE6qwF+uCSvyt0whYnOg4IY01bJ/jh6zoYtPd?=
 =?us-ascii?q?C0VlJ3bN2+HJdNqi2XNJF6Tt0sTmxooio2178LtYalcCQWzJkr3QPTZvKZf4SS?=
 =?us-ascii?q?/x7uV+icLS1miH9mfr+0mgy8/lK6yuLmU8m5yFZKoTRBktnLrn0N0x3T6tObSv?=
 =?us-ascii?q?tm5Euh1jCP1x3J5uFDO0A0mrLXK58nwrEuipoeqVrPEjP1lUnskaOaa0Yp9vK2?=
 =?us-ascii?q?5+npYrjqvIKQOo1shgH7KKsum8i/AeoiMggJWmiW4f2826Pm/U3kWblFk+M5kr?=
 =?us-ascii?q?fHv5DePMgUvam5AxJT0ok/9Rm/FDCq0NAZnXkEMl1JYh2Gj5XxNlHKIfD4C+q/?=
 =?us-ascii?q?glu2nDdqwfDGIqPuApHXInffl7fheK1w60hbyAo1wtBf4Y9UBqsGIPLpVU/9rM?=
 =?us-ascii?q?bYAQMhMwyo3+bnD81w1ocfWWKMHKCVKqzTsUKT6+IrIumMYpIVuTnnJ/gk4f7u?=
 =?us-ascii?q?kWE2mVsHcaa12psXbSPwI/J9Pk/MYWbwmsxTViAOvxEiV6rsj1uNVyMVYGy9GK?=
 =?us-ascii?q?c15zU+AYThCp/fR4erm/uY0SKmW5FbeG1CWW2KCmriIoCNWvMQb3CLL8p81zAJ?=
 =?us-ascii?q?S7WlDpUszAyjrxPSzb1hIezJvCoCusX4ydJ36ubPwAw07iF+FM+H0muAHF1zy3?=
 =?us-ascii?q?oFQiJz0K1hrEhVzFCF3q5lxftCGo99/fRMByMzKITRyfAyNdHsWw/bNoONVle4?=
 =?us-ascii?q?Q9i8KSs8QtI435kFZEMrSIbqtQzKwyf/W+xdrLeMHpFht/uEh3U=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AZAABJcwpcmBHrdtBjHgEGBwaBUQkLA?=
 =?us-ascii?q?YEwgmKMcosxgwmWU4FzFBgUh1siNAkNAQMBAQEBAQECARMBAQEBAQgLCwYbDi+?=
 =?us-ascii?q?CNgUCAxoBBoJcAwMBAiQfCikDAwECBgEBSAgDAVMQCQWDHIICAQSlfzOFQIRtj?=
 =?us-ascii?q?B8XgUA/gRGCXYsRAok3hgSRLAmRQAsYgVyIBzaHH5kbgUaCDTMaCBsVgyeCJxc?=
 =?us-ascii?q?SjgxAMYEHHIgtgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AZAABJcwpcmBHrdtBjHgEGBwaBUQkLAYEwgmKMcosxgwm?=
 =?us-ascii?q?WU4FzFBgUh1siNAkNAQMBAQEBAQECARMBAQEBAQgLCwYbDi+CNgUCAxoBBoJcA?=
 =?us-ascii?q?wMBAiQfCikDAwECBgEBSAgDAVMQCQWDHIICAQSlfzOFQIRtjB8XgUA/gRGCXYs?=
 =?us-ascii?q?RAok3hgSRLAmRQAsYgVyIBzaHH5kbgUaCDTMaCBsVgyeCJxcSjgxAMYEHHIgtg?=
 =?us-ascii?q?XcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,326,1539673200"; 
   d="scan'208";a="65788001"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mga01b.intel.com with ESMTP/TLS/AES256-SHA; 07 Dec 2018 05:21:03 -0800
Received: from localhost ([::1]:46263 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gVG3z-0000RN-7t
	for like.xu@linux.intel.com; Fri, 07 Dec 2018 08:21:03 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:48700)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <lvivier@redhat.com>) id 1gVG0i-0005Ch-GR
	for qemu-devel@nongnu.org; Fri, 07 Dec 2018 08:17:41 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <lvivier@redhat.com>) id 1gVG0h-0006Pl-BN
	for qemu-devel@nongnu.org; Fri, 07 Dec 2018 08:17:40 -0500
Received: from mx1.redhat.com ([209.132.183.28]:44886)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <lvivier@redhat.com>) id 1gVG0h-0006Lx-1Y
	for qemu-devel@nongnu.org; Fri, 07 Dec 2018 08:17:39 -0500
Received: from smtp.corp.redhat.com (int-mx06.intmail.prod.int.phx2.redhat.com
	[10.5.11.16])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 57FB5C059B78;
	Fri,  7 Dec 2018 13:17:38 +0000 (UTC)
Received: from thinkpad.redhat.com (ovpn-204-190.brq.redhat.com
	[10.40.204.190])
	by smtp.corp.redhat.com (Postfix) with ESMTP id 5B8CF79D61;
	Fri,  7 Dec 2018 13:17:36 +0000 (UTC)
From: Laurent Vivier <lvivier@redhat.com>
To: qemu-devel@nongnu.org
Date: Fri,  7 Dec 2018 14:17:32 +0100
Message-Id: <20181207131732.21073-2-lvivier@redhat.com>
In-Reply-To: <20181207131732.21073-1-lvivier@redhat.com>
References: <20181207131732.21073-1-lvivier@redhat.com>
MIME-Version: 1.0
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.16
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.32]);
	Fri, 07 Dec 2018 13:17:38 +0000 (UTC)
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: [Qemu-devel] [PATCH 2/2] scsi-generic: Convert from DPRINTF() macro
 to trace events
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Fam Zheng <fam@euphon.net>, Paolo Bonzini <pbonzini@redhat.com>,
	=?UTF-8?q?Philippe=20Mathieu-Daud=C3=A9?= <f4bug@amsat.org>,
	Laurent Vivier <lvivier@redhat.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Signed-off-by: Laurent Vivier <lvivier@redhat.com>
---
 hw/scsi/scsi-generic.c | 56 ++++++++++++++++++++----------------------
 hw/scsi/trace-events   | 11 +++++++++
 2 files changed, 37 insertions(+), 30 deletions(-)

diff --git a/hw/scsi/scsi-generic.c b/hw/scsi/scsi-generic.c
index 7237b4162e..842f8e0893 100644
--- a/hw/scsi/scsi-generic.c
+++ b/hw/scsi/scsi-generic.c
@@ -18,21 +18,10 @@
 #include "hw/scsi/scsi.h"
 #include "hw/scsi/emulation.h"
 #include "sysemu/block-backend.h"
+#include "trace.h"
=20
 #ifdef __linux__
=20
-//#define DEBUG_SCSI
-
-#ifdef DEBUG_SCSI
-#define DPRINTF(fmt, ...) \
-do { printf("scsi-generic: " fmt , ## __VA_ARGS__); } while (0)
-#else
-#define DPRINTF(fmt, ...) do {} while(0)
-#endif
-
-#define BADF(fmt, ...) \
-do { fprintf(stderr, "scsi-generic: " fmt , ## __VA_ARGS__); } while (0)
-
 #include <scsi/sg.h>
 #include "scsi/constants.h"
=20
@@ -98,8 +87,7 @@ static void scsi_command_complete_noio(SCSIGenericReq *=
r, int ret)
         }
     }
=20
-    DPRINTF("Command complete 0x%p tag=3D0x%x status=3D%d\n",
-            r, r->req.tag, status);
+    trace_scsi_generic_command_complete_noio(r, r->req.tag, status);
=20
     scsi_req_complete(&r->req, status);
 done:
@@ -259,7 +247,7 @@ static void scsi_read_complete(void * opaque, int ret=
)
     }
=20
     len =3D r->io_header.dxfer_len - r->io_header.resid;
-    DPRINTF("Data ready tag=3D0x%x len=3D%d\n", r->req.tag, len);
+    trace_scsi_generic_read_complete(r->req.tag, len);
=20
     r->len =3D -1;
=20
@@ -335,7 +323,7 @@ static void scsi_read_data(SCSIRequest *req)
     SCSIDevice *s =3D r->req.dev;
     int ret;
=20
-    DPRINTF("scsi_read_data tag=3D0x%x\n", req->tag);
+    trace_scsi_generic_read_data(req->tag);
=20
     /* The request is used as the AIO opaque value, so add a ref.  */
     scsi_req_ref(&r->req);
@@ -356,7 +344,7 @@ static void scsi_write_complete(void * opaque, int re=
t)
     SCSIGenericReq *r =3D (SCSIGenericReq *)opaque;
     SCSIDevice *s =3D r->req.dev;
=20
-    DPRINTF("scsi_write_complete() ret =3D %d\n", ret);
+    trace_scsi_generic_write_complete(ret);
=20
     assert(r->req.aiocb !=3D NULL);
     r->req.aiocb =3D NULL;
@@ -371,7 +359,7 @@ static void scsi_write_complete(void * opaque, int re=
t)
     if (r->req.cmd.buf[0] =3D=3D MODE_SELECT && r->req.cmd.buf[4] =3D=3D=
 12 &&
         s->type =3D=3D TYPE_TAPE) {
         s->blocksize =3D (r->buf[9] << 16) | (r->buf[10] << 8) | r->buf[=
11];
-        DPRINTF("block size %d\n", s->blocksize);
+        trace_scsi_generic_write_complete_blocksize(s->blocksize);
     }
=20
     scsi_command_complete_noio(r, ret);
@@ -388,7 +376,7 @@ static void scsi_write_data(SCSIRequest *req)
     SCSIDevice *s =3D r->req.dev;
     int ret;
=20
-    DPRINTF("scsi_write_data tag=3D0x%x\n", req->tag);
+    trace_scsi_generic_write_data(req->tag);
     if (r->len =3D=3D 0) {
         r->len =3D r->buflen;
         scsi_req_data(&r->req, r->len);
@@ -411,6 +399,21 @@ static uint8_t *scsi_get_buf(SCSIRequest *req)
     return r->buf;
 }
=20
+static void scsi_generic_command_dump(uint8_t *cmd, int len)
+{
+    int i;
+    char *line_buffer, *p;
+
+    line_buffer =3D g_malloc(len * 5 + 1);
+
+    for (i =3D 0, p =3D line_buffer; i < len; i++) {
+        p +=3D sprintf(p, " 0x%02x", cmd[i]);
+    }
+    trace_scsi_generic_send_command(line_buffer);
+
+    g_free(line_buffer);
+}
+
 /* Execute a scsi command.  Returns the length of the data expected by t=
he
    command.  This will be Positive for data transfers from the device
    (eg. disk reads), negative for transfers to the device (eg. disk writ=
es),
@@ -422,16 +425,9 @@ static int32_t scsi_send_command(SCSIRequest *req, u=
int8_t *cmd)
     SCSIDevice *s =3D r->req.dev;
     int ret;
=20
-#ifdef DEBUG_SCSI
-    DPRINTF("Command: data=3D0x%02x", cmd[0]);
-    {
-        int i;
-        for (i =3D 1; i < r->req.cmd.len; i++) {
-            printf(" 0x%02x", cmd[i]);
-        }
-        printf("\n");
+    if (trace_event_get_state_backends(TRACE_SCSI_GENERIC_SEND_COMMAND))=
 {
+        scsi_generic_command_dump(cmd, r->req.cmd.len);
     }
-#endif
=20
     if (r->req.cmd.xfer =3D=3D 0) {
         g_free(r->buf);
@@ -693,7 +689,7 @@ static void scsi_generic_realize(SCSIDevice *s, Error=
 **errp)
=20
     /* define device state */
     s->type =3D scsiid.scsi_type;
-    DPRINTF("device type %d\n", s->type);
+    trace_scsi_generic_realize_type(s->type);
=20
     switch (s->type) {
     case TYPE_TAPE:
@@ -716,7 +712,7 @@ static void scsi_generic_realize(SCSIDevice *s, Error=
 **errp)
         break;
     }
=20
-    DPRINTF("block size %d\n", s->blocksize);
+    trace_scsi_generic_realize_blocksize(s->blocksize);
=20
     /* Only used by scsi-block, but initialize it nevertheless to be cle=
an.  */
     s->default_scsi_version =3D -1;
diff --git a/hw/scsi/trace-events b/hw/scsi/trace-events
index e9625f790c..3c2fd7f52f 100644
--- a/hw/scsi/trace-events
+++ b/hw/scsi/trace-events
@@ -320,3 +320,14 @@ scsi_disk_emulate_command_UNKNOWN(int cmd, const cha=
r *name) "Unknown SCSI comma
 scsi_disk_dma_command_READ(uint64_t lba, uint32_t len) "Read (sector %" =
PRId64 ", count %u)"
 scsi_disk_dma_command_WRITE(const char *cmd, uint64_t lba, int len) "Wri=
te %s(sector %" PRId64 ", count %u)"
 scsi_disk_new_request(uint32_t lun, uint32_t tag, const char *line) "Com=
mand: lun=3D%d tag=3D0x%x data=3D%s"
+
+# hw/scsi/scsi-generic.c
+scsi_generic_command_complete_noio(void *req, uint32_t tag, int statuc) =
"Command complete %p tag=3D0x%x status=3D%d"
+scsi_generic_read_complete(uint32_t tag, int len) "Data ready tag=3D0x%x=
 len=3D%d"
+scsi_generic_read_data(uint32_t tag) "scsi_read_data tag=3D0x%x"
+scsi_generic_write_complete(int ret) "scsi_write_complete() ret =3D %d"
+scsi_generic_write_complete_blocksize(int blocksize) "block size %d"
+scsi_generic_write_data(uint32_t tag) "scsi_write_data tag=3D0x%x"
+scsi_generic_send_command(const char *line) "Command: data=3D%s"
+scsi_generic_realize_type(int type) "device type %d"
+scsi_generic_realize_blocksize(int blocksize) "block size %d"
--=20
2.19.2


