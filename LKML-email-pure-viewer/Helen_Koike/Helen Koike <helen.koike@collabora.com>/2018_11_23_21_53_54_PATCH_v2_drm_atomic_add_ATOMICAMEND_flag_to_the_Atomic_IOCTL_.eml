Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 24 Nov 2018 12:37:37 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 774D8580460;
	Fri, 23 Nov 2018 13:54:11 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga006-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 23 Nov 2018 13:54:11 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AXGCsARzNtJuhGEjXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0ewXI/ad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYO/1icK3dY94WXHNNU9tLWCNcHo6z?=
 =?us-ascii?q?co0PAfYdMuZGsobxuUYFoR++CAWxAe/izCJDiH3r0q0gy+kvER/I0hEuEdwNt3?=
 =?us-ascii?q?rbo8n6OqgJUeCtzqTF1inDYvBM1Dvh8oXEbhIsrPeRVrxwa8rRzkwvGhvHgFqO?=
 =?us-ascii?q?rYzqITWV3fkIvWic7upgVvyggHMgpgFxvDevwtkjio/TioIWzVDE9CZ5z5guKN?=
 =?us-ascii?q?KkT057ZdqkH4FLuCGdLYt5WNkuTH1vuCY/07ALv4OwciYNyJQi3RHfavqHfpCG?=
 =?us-ascii?q?4hL5SumePyp3i2x+eLK8mxay9lCgxvf7Vsmu31ZGtjZKkt7ItnAJzRPc8c+HSu?=
 =?us-ascii?q?Fn8Uu7xTmP0AXT5vlLIUAzkqrbJJohzaArlpoUrETDBDP5l1vsgKCKcUUk/+6l?=
 =?us-ascii?q?4PnkbLX+vpKQKZN4hwXkPqgzlMGzH/40PhUNUmSH4+ix1b/u8VX2TbhLlPE6jK?=
 =?us-ascii?q?fUvZDAKcgFuKK0ARVZ3pg95xu9CTqtzc4WkmMdLF1ffRKKl4jpNE/KIPD/Ffq/?=
 =?us-ascii?q?nVusnylxx/zcPb3uHI/NLn7dn7flZ7p97FRcyAUrwdBe4ZJbFK0BLertVkPtsN?=
 =?us-ascii?q?HUFAI1PgKqz+r9Fdlw1Z8SVXiOD6KbKK/StEWH5uMrI+mCfo8VvzP9JuAh5/7v?=
 =?us-ascii?q?i385hFAccbCq3ZQJcnC4GOppI0GAbXrrjNYBF3kFvhAlQez0h12NTyRTa2yxX6?=
 =?us-ascii?q?0i/DE7DpypDYPZSoCqmryB0z+3HodKaWBeFlCMDXDoep2AW/cNayKdPNVtkzMZ?=
 =?us-ascii?q?VbW6T48h1BeutBL1yrZ9L+rU/DEYuozn1NRv++LTkhQy/yRuD8uBy2GNU310nm?=
 =?us-ascii?q?QQSj82xq9/oFB9xU2E0aRig/xYCMZc5/VGUgohMZ7czup6C839Ww7bf9eJTkqm?=
 =?us-ascii?q?TcuiAT0rUt0xxNoOaV5nG9q+lhDDwzaqA7gNmryJA5w77LjQ33v2J8Z7zXbG07?=
 =?us-ascii?q?Isj10nQstJKG2nibRz9wnVB47VjUqZk7ymergb3C7I7G2D13aBvFlEUA5sVqXI?=
 =?us-ascii?q?RWoQZlDWrdT+5UPOVaWuBq4lMgZazc6CK61KasDmjFlcRffjPsjebHy1m2uqGR?=
 =?us-ascii?q?mIwbaMZpLwe2oBxCXdFFQEkwcL8HaFLwc+AD2to2bfDDN0E1LvbFjh8e1/qHO9?=
 =?us-ascii?q?U081wBuGb0xn17qp5BEVgeaQRO8U3rIBoC0hsSl7HE6h39LKDNqNvxduc79CYd?=
 =?us-ascii?q?wj+ltH1XjWtwpmPpO+KaBugVoecwdyv0PqzBh3DoRAkc43rHIl1gZyKKSY0E9f?=
 =?us-ascii?q?eDOcx5z/JrrXKmzq9hC1d6HWwk3e0MqR+qoX9fs3sUvjsx+zGkoi6Xpn1cJV3G?=
 =?us-ascii?q?Wa5pjRCAoSUJTxUls49hRgprHaZDU96J3Q1XF2Laa0tTrC0cozBOQ50hagY8tf?=
 =?us-ascii?q?MKScGQ/uEs0aAs+uKPAqm1mpdB4EIPpe9KkuP8OidvuG3qGrMf1knDKni2RH/Y?=
 =?us-ascii?q?983liN9yp6Vu7HwZIFz+uE0QuAUjf2lE2hvdzvmYBYeTESGXKyxjLgBIFPaax9?=
 =?us-ascii?q?Y4YKBX21LM2q29pxnZjtW31f9F69HF4G3M6peRyPb13yxwFQ1EIXoWC5liu81T?=
 =?us-ascii?q?B7jzYprq+H1izU3+vibAYHOnJMRGR6jVbsPJK4gMwAUEmpbwgmjh2l5Unhyqhf?=
 =?us-ascii?q?paR/KXTTQEhScyj3KWFiTrW/tr6Yb8FT75MotD1dUP6gblCCVr79vxwa3jv5H2?=
 =?us-ascii?q?tf2D80bSuqtYj+nxBgjmKSMmxzrHvAdc5s3xjf4MHTSuBL3joBQil1kj3XBlm6?=
 =?us-ascii?q?P9m08tSYjZbDsuaiV22/Up1fazXkzYSFtCGj/21lHQW/n+yvmt3gCQU70S7728?=
 =?us-ascii?q?NqVCnStxb8f4/r2r++MeJmeEloGVD959B7GoF4jos/mpUQ1WIGiZWS+HoNiX3z?=
 =?us-ascii?q?PslD2aLicHoNQiYGw9zP7wj/201jLXWJy5jiVnqHwcthZNi6YmUI1SI79M1KDK?=
 =?us-ascii?q?aU7LpZnSp6uFa4rATRYeRjkTcZ0/ch9Hkag+QRsgo30iqdGqwSHVVfPSH0lxWH?=
 =?us-ascii?q?9de+oL9VZGaud7i9z05+ndGnDLGfrQBQQnf5epE+HSBu6sVzKk7D0Hr26ov8Yt?=
 =?us-ascii?q?nfccoTtgGIkxfHl+VVK4g+lvsQiSpnJGLyp3sly+EggBxq3JG6upWHKmp38KK4?=
 =?us-ascii?q?BB5YKiP6Z8cJ9j7xiqZem96c35qzEZV5BjULQJzoQOqtEDITtvToLRyCETMipX?=
 =?us-ascii?q?eABbrQAxWf51x4oHLVHJCmLHWXJHgfzdV/SxiRPk1fgAYIXDokmp41DBylxMvk?=
 =?us-ascii?q?cE1h/DAe+kb4qgdQyuJvLxT/TmDfpAKyZjY1UpefKgdW7hpZ50fUKsGe6uNzHy?=
 =?us-ascii?q?dF/pyutgCNK2qbZxhWAmENQECLG1fjPry279na7+eYHva+L+fJYbiWsuNRTfCI?=
 =?us-ascii?q?xZay0od8+zaMK96CPn1jD/09x0pCUmp1G8XfmzUTVSMXkzjBYNKcpBe54id3tN?=
 =?us-ascii?q?yw8Oz3WALz4ouCE7lSPs9q+x+omqePLfKQiDx6KTZF1ZMM2HnIx6IE3FMJjyFu?=
 =?us-ascii?q?dj+tEakPtCLXTaLQnLNXAAAfay9pKMRI6Kc81BFXOcHHktP1yqJ4jvktBlZFUl?=
 =?us-ascii?q?zhh9ipZdEQLGG7Ll/HH0GLNLKJJTDQx8H3YKW8SaBfjelOth2wvyqbHFHnPjiZ?=
 =?us-ascii?q?izbpUBWvO/lWjC6HJBxepJ29chF1BGjjUt3max67MNx2jTEswr00nHTKNWECPj?=
 =?us-ascii?q?hmbkNNtaad7SdZgvV5BmxA4WBpLeiCmyaF8ebYLowavudsAiRxj+ha+mg1y6NJ?=
 =?us-ascii?q?7CFYQ/x4gDHdrsN1rFG8jOaOyiBrUB5PqjtQgIKLvENiObjW95VaWHbE+g4N4n?=
 =?us-ascii?q?uUCxgQu9RlDdjvsbhKytfTjKLzNCtC89XM8MsABsjULdiLP2Y7PRX1GD7bEg0F?=
 =?us-ascii?q?QCWvNWHegUxdjf6T+meUrpg8tpjjhp4ORqVHW1wyE/MQEl5lE8AaIJdrQjMklq?=
 =?us-ascii?q?aWjc4S6nq4qRnRRcNasYjGV/KSG/rvLjmZgKJAZxsJx7P4MIsSOpf620xkdll1?=
 =?us-ascii?q?goDKF1DMUtBKpy0yJjMz9WlE7nlyBkQywUbkZ0v56X4JEf+5kjYyiw1jcaIs+W?=
 =?us-ascii?q?G/zU0wIw/qqS89lgESntTmjHjFcDP1IaH2XoZXCCfcvE81NprxRBx8Kwa1mBo3?=
 =?us-ascii?q?Z3//W7tNgu44JihQgwjGtM4KRa9R?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AbAAAqdvhbh0O0hNFjHgEGBwaBUQkLA?=
 =?us-ascii?q?YJpgQIng3mUGIIhlyeBcywNBgGIWiI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwy?=
 =?us-ascii?q?CNiSCagIgBAsBRgYJAiQCGA4CAgNaEwWDHAGCAQQBCqZ5fDOELQELAYVcBYELh?=
 =?us-ascii?q?lOEK4FXP4clgUiDOIJXAqACBwKCHASEXIZLg10jgVkjh2WHJyyJQYNWjDOCDTM?=
 =?us-ascii?q?aI4M8gicXg0qFFIVWJzOBBQEBjCEBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AbAAAqdvhbh0O0hNFjHgEGBwaBUQkLAYJpgQIng3mUGII?=
 =?us-ascii?q?hlyeBcywNBgGIWiI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiSCagIgBAsBR?=
 =?us-ascii?q?gYJAiQCGA4CAgNaEwWDHAGCAQQBCqZ5fDOELQELAYVcBYELhlOEK4FXP4clgUi?=
 =?us-ascii?q?DOIJXAqACBwKCHASEXIZLg10jgVkjh2WHJyyJQYNWjDOCDTMaI4M8gicXg0qFF?=
 =?us-ascii?q?IVWJzOBBQEBjCEBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,271,1539673200"; 
   d="scan'208";a="53499406"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 23 Nov 2018 13:54:09 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727150AbeKXIkG (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sat, 24 Nov 2018 03:40:06 -0500
Received: from bhuna.collabora.co.uk ([46.235.227.227]:33426 "EHLO
        bhuna.collabora.co.uk" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726979AbeKXIkG (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sat, 24 Nov 2018 03:40:06 -0500
Received: from [127.0.0.1] (localhost [127.0.0.1])
        (Authenticated sender: koike)
        with ESMTPSA id D15FD263AE1
From: Helen Koike <helen.koike@collabora.com>
To: David Airlie <airlied@linux.ie>
Cc: dnicoara@chromium.org, alexandros.frantzis@collabora.com,
        linux-kernel@vger.kernel.org, dri-devel@lists.freedesktop.org,
        Gustavo Padovan <gustavo.padovan@collabora.com>,
        tomasz Figa <tfiga@chromium.org>,
        Sean Paul <seanpaul@google.com>, kernel@collabora.com,
        =?UTF-8?q?St=C3=A9phane=20Marchesin?= <marcheu@google.com>
Subject: [PATCH v2] drm/atomic: add ATOMIC_AMEND flag to the Atomic IOCTL.
Date: Fri, 23 Nov 2018 19:53:54 -0200
Message-Id: <20181123215354.14540-1-helen.koike@collabora.com>
X-Mailer: git-send-email 2.19.1
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This flag tells core to jump ahead the queued update if the conditions
in drm_atomic_async_check() are met. That means we are only able to do an
async update if no modeset is pending and update for the same plane is
not queued.

It uses the already in place infrastructure for async updates.

It is useful for cursor updates and async PageFlips over the atomic
ioctl, otherwise in some cases updates may be delayed to the point the
user will notice it. Note that for now it's only enabled for cursor
planes.

DRM_MODE_ATOMIC_AMEND should be passed to the Atomic IOCTL to use this
feature.

Signed-off-by: Gustavo Padovan <gustavo.padovan@collabora.com>
Signed-off-by: Enric Balletbo i Serra <enric.balletbo@collabora.com>
[updated for upstream]
Signed-off-by: Helen Koike <helen.koike@collabora.com>
---
Hi,

This is the second attempt to introduce the new ATOMIC_AMEND flag for atomic
operations, see the commit message for a more detailed description.

This was tested using a small program that exercises the uAPI for easy
sanity testing. The program was created by Alexandros and modified by
Enric to test the capability flag [2].

To test, just build the program and use the --atomic flag to use the cursor
plane with the ATOMIC_AMEND flag. E.g.

  drm_cursor --atomic

The test worked on a rockchip Ficus v1.1 board on top of mainline plus
the patch to update cursors asynchronously through atomic for the
drm/rockchip driver plus the DRM_CAP_ASYNC_UPDATE patch.

Alexandros also did a proof-of-concept to use this flag and draw cursors
using atomic if possible on ozone [1].

Thanks
Helen

[1] https://chromium-review.googlesource.com/c/chromium/src/+/1092711
[2] https://gitlab.collabora.com/eballetbo/drm-cursor/commits/async-capability


Changes in v2:
- rebase tree
- do not fall back to a non-async update if if there isn't any
pending commit to amend

Changes in v1:
- https://patchwork.freedesktop.org/patch/243088/
- Only enable it if userspace requests it.
- Only allow async update for cursor type planes.
- Rename ASYNC_UPDATE for ATOMIC_AMEND.

 drivers/gpu/drm/drm_atomic_helper.c | 6 +++++-
 drivers/gpu/drm/drm_atomic_uapi.c   | 6 ++++++
 include/uapi/drm/drm_mode.h         | 4 +++-
 3 files changed, 14 insertions(+), 2 deletions(-)

diff --git a/drivers/gpu/drm/drm_atomic_helper.c b/drivers/gpu/drm/drm_atomic_helper.c
index 269f1a74de38..333190c6a0a4 100644
--- a/drivers/gpu/drm/drm_atomic_helper.c
+++ b/drivers/gpu/drm/drm_atomic_helper.c
@@ -934,7 +934,7 @@ int drm_atomic_helper_check(struct drm_device *dev,
 	if (ret)
 		return ret;
 
-	if (state->legacy_cursor_update)
+	if (state->async_update || state->legacy_cursor_update)
 		state->async_update = !drm_atomic_helper_async_check(dev, state);
 
 	return ret;
@@ -1602,6 +1602,10 @@ int drm_atomic_helper_async_check(struct drm_device *dev,
 	if (new_plane_state->fence)
 		return -EINVAL;
 
+	/* Only allow async update for cursor type planes. */
+	if (plane->type != DRM_PLANE_TYPE_CURSOR)
+		return -EINVAL;
+
 	/*
 	 * Don't do an async update if there is an outstanding commit modifying
 	 * the plane.  This prevents our async update's changes from getting
diff --git a/drivers/gpu/drm/drm_atomic_uapi.c b/drivers/gpu/drm/drm_atomic_uapi.c
index d5b7f315098c..d5d26fe85ecf 100644
--- a/drivers/gpu/drm/drm_atomic_uapi.c
+++ b/drivers/gpu/drm/drm_atomic_uapi.c
@@ -28,6 +28,7 @@
 
 #include <drm/drm_atomic_uapi.h>
 #include <drm/drm_atomic.h>
+#include <drm/drm_atomic_uapi.h>
 #include <drm/drm_print.h>
 #include <drm/drm_drv.h>
 #include <drm/drm_writeback.h>
@@ -1275,6 +1276,10 @@ int drm_mode_atomic_ioctl(struct drm_device *dev,
 			(arg->flags & DRM_MODE_PAGE_FLIP_EVENT))
 		return -EINVAL;
 
+	if ((arg->flags & DRM_MODE_ATOMIC_ALLOW_MODESET) &&
+			(arg->flags & DRM_MODE_ATOMIC_AMEND))
+		return -EINVAL;
+
 	drm_modeset_acquire_init(&ctx, DRM_MODESET_ACQUIRE_INTERRUPTIBLE);
 
 	state = drm_atomic_state_alloc(dev);
@@ -1283,6 +1288,7 @@ int drm_mode_atomic_ioctl(struct drm_device *dev,
 
 	state->acquire_ctx = &ctx;
 	state->allow_modeset = !!(arg->flags & DRM_MODE_ATOMIC_ALLOW_MODESET);
+	state->async_update = !!(arg->flags & DRM_MODE_ATOMIC_AMEND);
 
 retry:
 	copied_objs = 0;
diff --git a/include/uapi/drm/drm_mode.h b/include/uapi/drm/drm_mode.h
index d3e0fe31efc5..0adb28d27e9e 100644
--- a/include/uapi/drm/drm_mode.h
+++ b/include/uapi/drm/drm_mode.h
@@ -733,13 +733,15 @@ struct drm_mode_destroy_dumb {
 #define DRM_MODE_ATOMIC_TEST_ONLY 0x0100
 #define DRM_MODE_ATOMIC_NONBLOCK  0x0200
 #define DRM_MODE_ATOMIC_ALLOW_MODESET 0x0400
+#define DRM_MODE_ATOMIC_AMEND 0x0800
 
 #define DRM_MODE_ATOMIC_FLAGS (\
 		DRM_MODE_PAGE_FLIP_EVENT |\
 		DRM_MODE_PAGE_FLIP_ASYNC |\
 		DRM_MODE_ATOMIC_TEST_ONLY |\
 		DRM_MODE_ATOMIC_NONBLOCK |\
-		DRM_MODE_ATOMIC_ALLOW_MODESET)
+		DRM_MODE_ATOMIC_ALLOW_MODESET |\
+		DRM_MODE_ATOMIC_AMEND)
 
 struct drm_mode_atomic {
 	__u32 flags;
-- 
2.19.1

