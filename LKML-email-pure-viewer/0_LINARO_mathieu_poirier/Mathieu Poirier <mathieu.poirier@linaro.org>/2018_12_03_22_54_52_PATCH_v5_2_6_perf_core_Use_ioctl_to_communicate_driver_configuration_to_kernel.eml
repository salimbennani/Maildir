Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 04 Dec 2018 08:59:04 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 98C9458014B;
	Mon,  3 Dec 2018 14:58:34 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 03 Dec 2018 14:58:34 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AFix3exYnPsf0bUUy49DILQn/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpci8Yh7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v6bpgRh31hy?=
 =?us-ascii?q?cdLzM38H/ZhNF+gqxYpxyupRJ/w5XMYIyXL/dyYr/RcMkGSWdbQspdSypMCZ68?=
 =?us-ascii?q?YYsVCOoBOP5VoY7nqFsSrRu+BBejBP7ywTFSgX/23Lc60+U/HgHcwQctGNcOv2?=
 =?us-ascii?q?7IrNX1NacdT/21wLPQzTXEbvNWwzb955bSch06pfGMXLRwftDLyUkoDQ/FiU+Q?=
 =?us-ascii?q?qYP8Mj6Ty+8DsHCb4vJ+We6zj2MrsRx9rzaxyss2l4XEhZ4ZxkrF+Ch72Io4JN?=
 =?us-ascii?q?61RFRmbdOrEpZcrSKXO5FoTs4iTGxlvjsxxKcctp6hZicKzYwqxx7BZPyDdIiF?=
 =?us-ascii?q?+gzjVOmPLjdinn5le6ywhwy08Ue+zu3wTM600ExFriZdk9nMsG4C1wDL58SZVv?=
 =?us-ascii?q?dw+l2t1SuB2gzN8O1IPEM5mbbBJ5MgwLM8jp8Tvl7CHi/ylkX2lqiWdkA89+is?=
 =?us-ascii?q?6uTnZKjmp5CFO493lA7+KKIuldK7AeghNQgPUW6b9vqm1LD44035T6tFjucsnq?=
 =?us-ascii?q?narp/aP8IbqbC9AwNP1YYj8Rm/Ay+80NsEhXkHME5FeBWfgojtOlHOI+73Ae2w?=
 =?us-ascii?q?glSxizprw/HGPrv8ApTCNHTDkbHhfapj5E5Y0gY80ddf55dMALEbPP3zQlPxtM?=
 =?us-ascii?q?DfDhIhMwy72efnCMln2YMZQ26PArKZP7nUsV+H/e8vJ+iMZIkIuDfyMfQl5vju?=
 =?us-ascii?q?jWMnll8ZZ6WmwZwXaHWgFPR8P0qZeWbsgssGEWoSvAo+S/LlhEeBUT5UYXayWa?=
 =?us-ascii?q?U86yo/CIKnC4fDW4+sjKaA3Ce9Ap1ZeGRGBkqQHnfvcoWOQ+0MZz6KIs99jjwE?=
 =?us-ascii?q?UqCsRJU61RGusw/6yKBrLvDO9S0arp/j0Nl15+vOlRA97zB0DsKd032TQGFwhG?=
 =?us-ascii?q?8HWzg23KVnq0xn1liDybR4g+BfFdFL5PNGSAE6OYTYz+x7Ed/yXA3Bc8yNSFan?=
 =?us-ascii?q?RNWmHD4wQsgww98If0ZyBdGiggrf0CqtBr8fj6aLC4As8qLAw3jxIN5wxGvc26?=
 =?us-ascii?q?k/kVYqWMtPOneghq5k6QfTAYnFk0Gal6avcaQRxyrN9GaFzWqTs0BUSg9wUaPZ?=
 =?us-ascii?q?XX8BYkvat8j25kTHT7W2E7QoLhNBydKeKqtNctDmkE9JROn9N9jEY2K+gWGwBQ?=
 =?us-ascii?q?2WybOKd4fqf2Qd3CPACEkLiQwT/HCGNRQgCSeluW7REDtuFVf3aUP27eZ+sG+7?=
 =?us-ascii?q?TlMzzwySc01h1r+1+hkJhfycS/IfxK4EtD0mqzVuGFa93tTWC9WbqgplfaVcZ8?=
 =?us-ascii?q?494Vhd2WLYsQx9IoKvL6R4ilECdAR3ulvk1w9rBYVYjcgqsHQqwRJoJqKczlxA?=
 =?us-ascii?q?eC2X3JDqNrLMN2n94Qqga6jV2lHZztab4aMP6PU+q1X+swClDEsi83N709ZL13?=
 =?us-ascii?q?uQ/InFDA0XUZjpSEY46wB6p63GYik6/47V1WBsPbOovTPY2tMpBPEqyhCvf9pE?=
 =?us-ascii?q?NKOEFQnyE9AVBsS0KewqnUSpYQwAPOxI6KE0OMamfeOc2KG3JOZggC6mjWNf7Y?=
 =?us-ascii?q?Bn00KD6zBzSvTV0JYC2f2Y2BWIVy39jFu4rs/4g4REaiwMEWqlzijkApVcZqlz?=
 =?us-ascii?q?fYYNFGevLNe7xtR4h57xRXFY8ESvCE8B2M+sYRCSdUDy3RVM1UQLpnyqgSu5zz?=
 =?us-ascii?q?1unzAptKafxzHOw+L5eRoDO25LQnRijFj2LYi1idAaQFanbwwzmBS54kb6wrBR?=
 =?us-ascii?q?pL5jIGnLXUdIYy/2InlgUqSqrLqCYM1P6JQyvSVMSuu8YlOaSr/7oxQE1SPuBG?=
 =?us-ascii?q?9exDE9dzG3tZT1hR16iGSBLHltqHrVY91/xRDa5NbEX/5ewiIGRDVkiTnQHlW9?=
 =?us-ascii?q?P8Om/dKOm5fBs+C+UXmsVplScSnt0IOBuzG35WxsAR2jgf+znsfrHhQ90S/+z9?=
 =?us-ascii?q?NqTznHrA7gYon30KS3KeFncVNpBFPm68p6B5txko0/hJwL3Xgah5OV/WcIkGvp?=
 =?us-ascii?q?MNVb377+Y2QJRTIR39HV5w3l0lV5Ln2V34L5Smmdwsx5atm/Y2MW2Tgy49pECa?=
 =?us-ascii?q?iK97xEgTV6okCjog3Pe/h9kSwQyf8v6H4cnuEItxAhziSbArAOA0ZYOTbgmAiP?=
 =?us-ascii?q?79C7tK9XfnqgcaCs1EpimtCsFK2CogZZWHrje5YtBylw7thkMFLX0X3+8YXkeN?=
 =?us-ascii?q?jWbdIOuRyYiRbAj+5JKJ0vkvoGnzZoOWX4vXc90e40kQRu3Y2mvIiAM2hi57i2?=
 =?us-ascii?q?AhlcNj3ofc8T/iztgL1ansaX2YCvA5pgFi8KXJvuUfKnDjYSue77OAaJFT02sm?=
 =?us-ascii?q?2bFqbHHQ+D9EdmqGrCE5KxOHGSOnYZ1s9uRAWHKExcnQAUXyg6npgjGQCx38Hh?=
 =?us-ascii?q?dEZ55jYM5l/3sBdMy+RoNwXhXWfbvgundjA0SJ2HJhpM8g5C/1vVMdCZ7u9rHy?=
 =?us-ascii?q?BY+YChrBWQKmOBYQREF3oJWkuCB1DsJbSu4djA8+6FBuuxNffOYLOOqfBAWPeM?=
 =?us-ascii?q?356gzoxm/zOUPMWVInZiF+E72lZEXX1hG8TWhTQPSy8UlyLMdcKbpw28+ip4rs?=
 =?us-ascii?q?+h6vTrRRnv6JCLC7tTN9Vv5h+3jb2CN+6WmCZ2NzJY2okQyn/PzbgVxEQShD12?=
 =?us-ascii?q?dzmxDbQAsjbAQ7jNmqBMFR4UdSNyONFM76I9xQRNPc/bitXo1r93lPI1ClFFVU?=
 =?us-ascii?q?D/lcGtf8AFP2a9NFbfDkaRKLuGPSHLw93wYa6kVb1QjeBUuwestjqBD0DjPiqM?=
 =?us-ascii?q?lz/yWhCrMOFMijybPRNEtIG8dBZtFXbsTNb8ZhKnN993iCU8wacoiXPSKW4cLT?=
 =?us-ascii?q?98fltNr7KK6yNYh/R/G2pZ4XtkLemLgSCZ7+bDJ5YSsPtrBDl0lu1A7HQ7zbtV?=
 =?us-ascii?q?8D9LRPhvlCTOqd5upgLuru7awzFiXTJNpyxNiYbNul9tfe3B+4VNQ2Ts/RQD92?=
 =?us-ascii?q?ycBh0G4dx/BZmntLpdxdvPvKbyLipS/dXJ+8cVG8nTLoSAKnVyHwDuHWvxBRcF?=
 =?us-ascii?q?TDO2fVnYhlZcnevaonicspg7p4WqgJ0PUL5WTnQxF/UTEEMjG8YNdsQkFgg4mK?=
 =?us-ascii?q?KW2ZZbrUG1qwPcEZ1X?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AYAABztAVch0O0hNFjHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGBWoIRJ4wRX41PlzSBcxIBARgTAYgJIjQJDQEDAQEBAQEBAgETAQEBCgs?=
 =?us-ascii?q?JCCkjDII2IoJlAwMBAiQZAQE3AQUJAQE+EgMxAQUBHAcSBYJRS4ICBZpGPIodg?=
 =?us-ascii?q?WwzgnYBAQWHKAgSh1uDE4EcgVc/g24HiwqJIA6GfpAWBwKCHwSPGQIWiVuHS4k?=
 =?us-ascii?q?Ej0ICBAIJAgUPIYElgg0zGjCDL4IbDBcSiEyFXyAygQUBAYgPK4IgAQE?=
X-IPAS-Result: =?us-ascii?q?A0AYAABztAVch0O0hNFjHQEBBQEHBQGBUQgBCwGBWoIRJ4w?=
 =?us-ascii?q?RX41PlzSBcxIBARgTAYgJIjQJDQEDAQEBAQEBAgETAQEBCgsJCCkjDII2IoJlA?=
 =?us-ascii?q?wMBAiQZAQE3AQUJAQE+EgMxAQUBHAcSBYJRS4ICBZpGPIodgWwzgnYBAQWHKAg?=
 =?us-ascii?q?Sh1uDE4EcgVc/g24HiwqJIA6GfpAWBwKCHwSPGQIWiVuHS4kEj0ICBAIJAgUPI?=
 =?us-ascii?q?YElgg0zGjCDL4IbDBcSiEyFXyAygQUBAYgPK4IgAQE?=
X-IronPort-AV: E=Sophos;i="5.56,312,1539673200"; 
   d="scan'208";a="65135070"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 03 Dec 2018 14:58:32 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726106AbeLCWzH (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 3 Dec 2018 17:55:07 -0500
Received: from mail-pf1-f194.google.com ([209.85.210.194]:41581 "EHLO
        mail-pf1-f194.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726065AbeLCWzD (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 3 Dec 2018 17:55:03 -0500
Received: by mail-pf1-f194.google.com with SMTP id b7so7128494pfi.8
        for <linux-kernel@vger.kernel.org>; Mon, 03 Dec 2018 14:55:02 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=from:to:cc:subject:date:message-id:in-reply-to:references;
        bh=BBqRtwO6PGFlctrxGALj04LHSsu+aeiHiAedSoB+rfE=;
        b=RrOlJSG+Y3gW+Hafk4V78OWWfljaTZ5GM8h7jKFhNzSrBGauShndYBsxuAvE5uJLyO
         4DyEUr9wBXtcSPvf43JR49GhFDGwG0cvN3+CK3ONl/CwdPAtZJjuIT6zg2bZoVSPDpuv
         870pz5JUGRNp4Yo84G2tgEbopj8SYXZGe+XCI=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references;
        bh=BBqRtwO6PGFlctrxGALj04LHSsu+aeiHiAedSoB+rfE=;
        b=k3GlnJGt5b44/U9qFYM2Yny4KCpyE84Bf6JVZju23FgDZPOlVU9Fmz+5bRS2Ufs0Sc
         XzDaREY2lGlrj8m4gNK2/24HzHwao2eHGNt2f1WZqTi2keVc927S0CU8/V/IQV/WpNgS
         u2A6rezNAeyVFsLTKFcvCAnd/lTW5iJcyJd/JInVoMo2LCMMfThXub3R2Lw76lh9o/FN
         o02BLAoXFCnAk7E1EDIGvMOwrCiT0IXDYomUBeTCoRIILf4lM8ZY95WknfuE2MGcWNIr
         a8dAmvikKmN20R9oeo/XQ3MGHtp5SR7JaVAiIoIJJDUznhuCNa91uQwPdpqU9Cs/fUub
         2mnA==
X-Gm-Message-State: AA+aEWaOmF990AzvZqiKEUBv/y3dTcdqxJvDHqdFSHeoWXMJ35UNDinP
        WB8OxfyTOS9seA3nhvD1lJECQg==
X-Google-Smtp-Source: AFSGD/W5+iPnfp7wUKDIF0Ne85dncUb/tNL7nN1NSX3EyKppb1J6RLDsXadxXHnnvCeNj5LeEqLDfw==
X-Received: by 2002:a63:c10f:: with SMTP id w15mr14594722pgf.199.1543877702346;
        Mon, 03 Dec 2018 14:55:02 -0800 (PST)
Received: from xps15.cg.shawcable.net (S0106002369de4dac.cg.shawcable.net. [68.147.8.254])
        by smtp.gmail.com with ESMTPSA id v9sm20933057pfg.144.2018.12.03.14.55.00
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-SHA bits=128/128);
        Mon, 03 Dec 2018 14:55:01 -0800 (PST)
From: Mathieu Poirier <mathieu.poirier@linaro.org>
To: acme@kernel.org, peterz@infradead.org, gregkh@linuxfoundation.org
Cc: mingo@redhat.com, tglx@linutronix.de,
        alexander.shishkin@linux.intel.com, schwidefsky@de.ibm.com,
        heiko.carstens@de.ibm.com, will.deacon@arm.com,
        mark.rutland@arm.com, jolsa@redhat.com, namhyung@kernel.org,
        adrian.hunter@intel.com, ast@kernel.org, hpa@zytor.com,
        suzuki.poulosi@arm.com, linux-s390@vger.kernel.org,
        linux-kernel@vger.kernel.org, linux-arm-kernel@lists.infradead.org
Subject: [PATCH v5 2/6] perf/core: Use ioctl to communicate driver configuration to kernel
Date: Mon,  3 Dec 2018 15:54:52 -0700
Message-Id: <1543877696-17174-3-git-send-email-mathieu.poirier@linaro.org>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1543877696-17174-1-git-send-email-mathieu.poirier@linaro.org>
References: <1543877696-17174-1-git-send-email-mathieu.poirier@linaro.org>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This patch adds the mechanic needed for user space to send PMU specific
configuration to the kernel driver using an ioctl() command.  That way
events can keep track of options that don't fit in the perf_event_attr
structure like the selection of a CoreSight sink to use for the session.

Signed-off-by: Mathieu Poirier <mathieu.poirier@linaro.org>
---
 include/linux/perf_event.h | 38 ++++++++++++++++++++++++++
 kernel/events/core.c       | 67 ++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 105 insertions(+)

diff --git a/include/linux/perf_event.h b/include/linux/perf_event.h
index 53c500f0ca79..8e69b7e309e7 100644
--- a/include/linux/perf_event.h
+++ b/include/linux/perf_event.h
@@ -114,6 +114,14 @@ struct hw_perf_event_extra {
 	int		idx;	/* index in shared_regs->regs[] */
 };
 
+/*
+ * PMU driver configuration
+ */
+struct pmu_drv_config {
+	void		*config;
+	raw_spinlock_t	lock;
+};
+
 /**
  * struct hw_perf_event - performance event hardware details:
  */
@@ -178,6 +186,9 @@ struct hw_perf_event {
 	/* Last sync'ed generation of filters */
 	unsigned long			addr_filters_gen;
 
+	/* PMU driver configuration */
+	struct pmu_drv_config		drv_config;
+
 /*
  * hw_perf_event::state flags; used to track the PERF_EF_* state.
  */
@@ -447,6 +458,17 @@ struct pmu {
 	 * Filter events for PMU-specific reasons.
 	 */
 	int (*filter_match)		(struct perf_event *event); /* optional */
+
+	/*
+	 * Validate complex PMU configuration that don't fit in the
+	 * perf_event_attr struct.  Returns a PMU specific pointer or an error
+	 * value < 0.
+	 *
+	 * As with addr_filters_validate(), runs in the context of the ioctl()
+	 * process and is not serialized with the rest of the PMU callbacks.
+	 */
+	void *(*drv_config_validate)	(struct perf_event *event,
+					 u64 value);
 };
 
 enum perf_addr_filter_action_t {
@@ -1235,6 +1257,11 @@ static inline bool has_addr_filter(struct perf_event *event)
 	return event->pmu->nr_addr_filters;
 }
 
+static inline bool has_drv_config(struct perf_event *event)
+{
+	return event->pmu->drv_config_validate;
+}
+
 /*
  * An inherited event uses parent's filters
  */
@@ -1249,6 +1276,17 @@ perf_event_addr_filters(struct perf_event *event)
 	return ifh;
 }
 
+static inline struct pmu_drv_config *
+perf_event_get_drv_config(struct perf_event *event)
+{
+	struct pmu_drv_config *cfg = &event->hw.drv_config;
+
+	if (event->parent)
+		cfg = &event->parent->hw.drv_config;
+
+	return cfg;
+}
+
 extern void perf_event_addr_filters_sync(struct perf_event *event);
 
 extern int perf_output_begin(struct perf_output_handle *handle,
diff --git a/kernel/events/core.c b/kernel/events/core.c
index 84530ab358c3..af7a53c97744 100644
--- a/kernel/events/core.c
+++ b/kernel/events/core.c
@@ -5003,6 +5003,8 @@ static inline int perf_fget_light(int fd, struct fd *p)
 static int perf_event_set_output(struct perf_event *event,
 				 struct perf_event *output_event);
 static int perf_event_set_filter(struct perf_event *event, void __user *arg);
+static int perf_event_set_drv_config(struct perf_event *event,
+				     void __user *arg);
 static int perf_event_set_bpf_prog(struct perf_event *event, u32 prog_fd);
 static int perf_copy_attr(struct perf_event_attr __user *uattr,
 			  struct perf_event_attr *attr);
@@ -5089,6 +5091,10 @@ static long _perf_ioctl(struct perf_event *event, unsigned int cmd, unsigned lon
 
 		return perf_event_modify_attr(event,  &new_attr);
 	}
+
+	case PERF_EVENT_IOC_SET_DRV_CONFIG:
+		return perf_event_set_drv_config(event, (void __user *)arg);
+
 	default:
 		return -ENOTTY;
 	}
@@ -9128,6 +9134,66 @@ static int perf_event_set_filter(struct perf_event *event, void __user *arg)
 	return ret;
 }
 
+static void perf_drv_config_replace(struct perf_event *event, void *drv_data)
+{
+	unsigned long flags;
+	struct pmu_drv_config *drv_config = &event->hw.drv_config;
+
+	if (!has_drv_config(event))
+		return;
+
+	/* Children take their configuration from their parent */
+	if (event->parent)
+		return;
+
+	/* Make sure the PMU doesn't get a handle on the data */
+	raw_spin_lock_irqsave(&drv_config->lock, flags);
+	drv_config->config = drv_data;
+	raw_spin_unlock_irqrestore(&drv_config->lock, flags);
+}
+
+static int
+perf_event_process_drv_config(struct perf_event *event, u64 value)
+{
+	int ret = -EINVAL;
+	void *drv_data;
+
+	/* Make sure ctx.mutex is held */
+	lockdep_assert_held(&event->ctx->mutex);
+
+	/* Children take their configuration from their parent */
+	if (WARN_ON_ONCE(event->parent))
+		goto out;
+
+	drv_data = event->pmu->drv_config_validate(event, value);
+	if (IS_ERR(drv_data)) {
+		ret = PTR_ERR(drv_data);
+		goto out;
+	}
+
+	perf_drv_config_replace(event, drv_data);
+
+	ret = 0;
+out:
+	return ret;
+}
+
+static int perf_event_set_drv_config(struct perf_event *event, void __user *arg)
+{
+	int ret;
+	u64 value;
+
+	if (!has_drv_config(event))
+		return -EINVAL;
+
+	if (copy_from_user(&value, arg, sizeof(value)))
+		return -EFAULT;
+
+	ret = perf_event_process_drv_config(event, value);
+
+	return ret;
+}
+
 /*
  * hrtimer based swevent callback
  */
@@ -10052,6 +10118,7 @@ perf_event_alloc(struct perf_event_attr *attr, int cpu,
 	if (attr->freq && attr->sample_freq)
 		hwc->sample_period = 1;
 	hwc->last_period = hwc->sample_period;
+	raw_spin_lock_init(&hwc->drv_config.lock);
 
 	local64_set(&hwc->period_left, hwc->sample_period);
 
-- 
2.7.4

