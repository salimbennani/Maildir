Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 27 Nov 2018 08:40:49 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id AE3DF5802E4
	for <like.xu@linux.intel.com>; Mon, 26 Nov 2018 12:21:04 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 26 Nov 2018 12:21:04 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A/umL+BaAEkmt/mq696o52nz/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpsy4bB7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyxPDJ2y?=
 =?us-ascii?q?YYUMCOQOP+hYoZTlp1YMrxWzChSgCe3zxjBWnX/7xrE23/g7HA3axgEsA84CvX?=
 =?us-ascii?q?LJp9v1LqcSVuW1wbHNzTXCafNX2S3y6JLVfR06u/6DQbdwfdDWyUk1GAPIiEib?=
 =?us-ascii?q?p4/9Pz6NyOgBr2uW4/B9We6yiGMrsR99rzavy8s2l4XEhJoZx1/G+Clj3Yo4Jt?=
 =?us-ascii?q?K1RFRmbdK6E5ZcrSCXOoRwT8g/WW9nojw6xacDuZOjfCgF1pAnxxnHZvyDcoiI?=
 =?us-ascii?q?+Q7jVP2LLTd3gnJlZaizhxGo8Uiv0uH8V8+030hWriddjNXAqnMA2wbO5sSaSf?=
 =?us-ascii?q?Zx5Fmt1DiP2gzJ9+1JI1g4la/BJJ4gxr4wmIATsUPGHiLugUX5kqqWdlg99ue1?=
 =?us-ascii?q?9evnfKvpppuFO4BvjQH+L6IuldChDuQjNQQOW2mb+eei27H58kz5Xa1Hjvk3kq?=
 =?us-ascii?q?nfrZDbKt4Xpq+/Aw9JzIkj7wyzACuh0NQdhnQHKlVFeBSIj4jvJlHCOvf4De2w?=
 =?us-ascii?q?g1i0ijdk2+jGPqH9ApXKNnXDlLbhfbVj5EJGxwsz0MtS55ZVCrEHPfLyVVX9tN?=
 =?us-ascii?q?3eDh8lLQO0x/zrB8l61oMbCiqyBLSEOvbSrUOQ/bBoZO2Nf5MO/jD6Lfcj+rjp?=
 =?us-ascii?q?l3B+nFYceayg29wQcGy5GfJ9ZFyUZGepjtofHGNZgwwlUea/jVSDVSJUNW+/Wr?=
 =?us-ascii?q?956jwlBYbjF4raW422nJSH2yG0GIAQYXpJXUuRG3XlfJnRRvEXdSiJKdVgmDFX?=
 =?us-ascii?q?ab/0UoIkyFSiuRH3z5JhKezb/DBesojskJA/y/eb01ke/CJ1A4y012iLB051mm?=
 =?us-ascii?q?kFXSN8lPRzrk15wFqZzYBijvBYHMAV7PRMBENyDZ7dy+1iE926fwvdftaEVROK?=
 =?us-ascii?q?S8iqgHllVtIwx9oCS1xwF9WrklbI2C/8R/ctmqCGHtQR+7PQ0nz1b5JlxmrLzu?=
 =?us-ascii?q?8khkgqT89LHWmngKdl8E7UHYGfwGuDkKP/cKUazSfX+E+Kxm/Iu1tXA104arnM?=
 =?us-ascii?q?QX1KPhielt/+/E6XCub2Ubk=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AcAAAaVfxbhxHrdtBkHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGBMIJijBFfiySCDZc8gXMSAQEYFIhjIjQJDQEDAQEBAQEBAgETAQEBCgs?=
 =?us-ascii?q?JCBsOIwyCNgUCAxoBBoJcAwMBAiQZAQUKKQECAQIBAgYBAQUaKQgDASgIAQUBH?=
 =?us-ascii?q?AYBCQkFgxyBagMVAQICmnQ8jAkzgncFhQgNbYEkAgYSh0yBZ4EogRwXgX+BEY1?=
 =?us-ascii?q?rAokfhnGEP4szCYgCiSIjgVmHeDaHASyXXQIEAgQFAgUPIYElgg19gy+CGwkDF?=
 =?us-ascii?q?xKDOIpxU4EHikOBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0AcAAAaVfxbhxHrdtBkHQEBBQEHBQGBUQgBCwGBMIJijBF?=
 =?us-ascii?q?fiySCDZc8gXMSAQEYFIhjIjQJDQEDAQEBAQEBAgETAQEBCgsJCBsOIwyCNgUCA?=
 =?us-ascii?q?xoBBoJcAwMBAiQZAQUKKQECAQIBAgYBAQUaKQgDASgIAQUBHAYBCQkFgxyBagM?=
 =?us-ascii?q?VAQICmnQ8jAkzgncFhQgNbYEkAgYSh0yBZ4EogRwXgX+BEY1rAokfhnGEP4szC?=
 =?us-ascii?q?YgCiSIjgVmHeDaHASyXXQIEAgQFAgUPIYElgg19gy+CGwkDFxKDOIpxU4EHikO?=
 =?us-ascii?q?BdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,283,1539673200"; 
   d="scan'208";a="64043508"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mga01b.intel.com with ESMTP/TLS/AES256-SHA; 26 Nov 2018 12:21:03 -0800
Received: from localhost ([::1]:38641 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gRNNP-00071h-1F
	for like.xu@linux.intel.com; Mon, 26 Nov 2018 15:21:03 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:53706)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <tcminyard@gmail.com>) id 1gRN81-0001lG-Cb
	for qemu-devel@nongnu.org; Mon, 26 Nov 2018 15:05:11 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <tcminyard@gmail.com>) id 1gRN7w-0001Jb-8X
	for qemu-devel@nongnu.org; Mon, 26 Nov 2018 15:05:09 -0500
Received: from mail-ot1-x343.google.com ([2607:f8b0:4864:20::343]:38136)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <tcminyard@gmail.com>) id 1gRN7u-0001HR-7m
	for qemu-devel@nongnu.org; Mon, 26 Nov 2018 15:05:02 -0500
Received: by mail-ot1-x343.google.com with SMTP id e12so13562976otl.5
	for <qemu-devel@nongnu.org>; Mon, 26 Nov 2018 12:04:56 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
	h=sender:from:to:cc:subject:date:message-id:in-reply-to:references;
	bh=gM/LgMxXMeTIaMuAOPS6MexKvnSoDE/MEUCH4U4EIoY=;
	b=RNX9W8sr+nnBRrnGL7y/9BIkTCUWnqCZLaYgACMz20b7PrVV+YZaR8rr49hZRsdqWd
	fOYxy0DN84Rmz5c7y+dBF00M2iBdJ205HFSMvsaQegoLY6i7/Awc35Vhbx/K+gm0WPgF
	Vv+fETuEDq+wo4+GqoLznkF+WSQxzmEmrCGhH4eWru3/sbq/Ci86m/WSWq+3IR6Byoma
	FVz8ubxUZoxl3c7EOcLVmtNuabliJxzYAWF1N6Y7uec7q0OL9+57ZfqF/X+yy81uQn6L
	BOycgmBxLZjFtnIXgIUsQRWQretMgJeAyA13WP3KLwjvLJml6/r8HqMfPV1IC3YTAo5C
	DM+g==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:sender:from:to:cc:subject:date:message-id
	:in-reply-to:references;
	bh=gM/LgMxXMeTIaMuAOPS6MexKvnSoDE/MEUCH4U4EIoY=;
	b=UUY+1FUIbxRQ6i1g9PW32dc3Q8/FhDDVmoChHkMQDQA4fEqdv0CkvcpGs5zhWX1FJ1
	9Od0FrIPIyz+AI9PMz5EBiwKmhOJqXMFnQ3PD5U0rJR0HbD3ULtDdUWlMSdKvDx1Axg4
	Hi5KLGEB5KTbpCGW3UI8CrzU9xQFRf8D7ttF4DNt6kZcfKpRBqROHHuUoMitCu/0mhhy
	wDyyxlH6spWSWrsYBrLBIysa6rxQgJPpLt4+VXmr9DboR07Etepl5t9PfJ43lguRReAK
	OYGWSQwzBfyvo5mMfHQvvV0dTJtOFjqq6Z/iOdnBd7htSBJxtmG9NvgQicELBCwRsHjH
	dgwA==
X-Gm-Message-State: AA+aEWYheC0AtnbDtf1mZoD5JLla9yleAVIuNbcSsSOk2HbsdXshr8TS
	xVYhhh1Kq7WNBSzgpFNTMg==
X-Google-Smtp-Source: AFSGD/XlYza6yLq9budI+DgyoPG5GVDpchMzgTaROlnugIU/4bin6BlTENN9ITCTAvnxTivbHBxmtA==
X-Received: by 2002:a9d:6108:: with SMTP id i8mr16943726otj.278.1543262695933; 
	Mon, 26 Nov 2018 12:04:55 -0800 (PST)
Received: from serve.minyard.net ([47.184.128.64])
	by smtp.gmail.com with ESMTPSA id 4sm390426otw.39.2018.11.26.12.04.51
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Mon, 26 Nov 2018 12:04:52 -0800 (PST)
Received: from t430.minyard.net (t430m.minyard.net [192.168.27.3])
	by serve.minyard.net (Postfix) with ESMTPA id CA45A1DA0;
	Mon, 26 Nov 2018 14:04:48 -0600 (CST)
Received: by t430.minyard.net (Postfix, from userid 1000)
	id 6B329301468; Mon, 26 Nov 2018 14:04:46 -0600 (CST)
From: minyard@acm.org
To: qemu-devel@nongnu.org, "Dr . David Alan Gilbert" <dgilbert@redhat.com>,
	=?UTF-8?q?Philippe=20Mathieu-Daud=C3=A9?= <philmd@redhat.com>,
	Peter Maydell <peter.maydell@linaro.org>
Date: Mon, 26 Nov 2018 14:04:26 -0600
Message-Id: <20181126200435.23408-8-minyard@acm.org>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20181126200435.23408-1-minyard@acm.org>
References: <20181126200435.23408-1-minyard@acm.org>
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 2607:f8b0:4864:20::343
Subject: [Qemu-devel] [PATCH v3 07/16] i2c:pm_smbus: Fix pm_smbus handling
 of I2C block read
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Paolo Bonzini <pbonzini@redhat.com>, Corey Minyard <cminyard@mvista.com>,
	Corey Minyard <minyard@acm.org>, "Michael S . Tsirkin" <mst@redhat.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

From: Corey Minyard <cminyard@mvista.com>

The I2C block read function of pm_smbus was completely broken.  It
required doing some direct I2C handling because it didn't have a
defined size, the OS code just reads bytes until it marks the
transaction finished.

This also required adjusting how the AMIBIOS workaround code worked,
the I2C block mode was setting STS_HOST_BUSY during a transaction,
so that bit could no longer be used to inform the host status read
code to start the transaction.  Create a explicit bool for that
operation.

Also, don't read the next byte from the device in byte-by-byte
mode unless the OS is actually clearing the byte done bit.  Just
assuming that's what the OS is doing is a bad idea.

Signed-off-by: Corey Minyard <cminyard@mvista.com>
---
 hw/i2c/pm_smbus.c         | 86 ++++++++++++++++++++++++++++++---------
 include/hw/i2c/pm_smbus.h |  6 +++
 2 files changed, 73 insertions(+), 19 deletions(-)

diff --git a/hw/i2c/pm_smbus.c b/hw/i2c/pm_smbus.c
index f3c6cc46f9..8793113c25 100644
--- a/hw/i2c/pm_smbus.c
+++ b/hw/i2c/pm_smbus.c
@@ -118,19 +118,30 @@ static void smb_transaction(PMSMBus *s)
         }
         break;
     case PROT_I2C_BLOCK_READ:
-        if (read) {
-            int xfersize = s->smb_data0;
-            if (xfersize > sizeof(s->smb_data)) {
-                xfersize = sizeof(s->smb_data);
-            }
-            ret = smbus_read_block(bus, addr, s->smb_data1, s->smb_data,
-                                   xfersize, false, true);
-            goto data8;
-        } else {
-            /* The manual says the behavior is undefined, just set DEV_ERR. */
+        /* According to the Linux i2c-i801 driver:
+         *   NB: page 240 of ICH5 datasheet shows that the R/#W
+         *   bit should be cleared here, even when reading.
+         *   However if SPD Write Disable is set (Lynx Point and later),
+         *   the read will fail if we don't set the R/#W bit.
+         * So at least Linux may or may not set the read bit here.
+         * So just ignore the read bit for this command.
+         */
+        if (i2c_start_transfer(bus, addr, 0)) {
             goto error;
         }
-        break;
+        ret = i2c_send(bus, s->smb_data1);
+        if (ret) {
+            goto error;
+        }
+        if (i2c_start_transfer(bus, addr, 1)) {
+            goto error;
+        }
+        s->in_i2c_block_read = true;
+        s->smb_blkdata = i2c_recv(s->smbus);
+        s->op_done = false;
+        s->smb_stat |= STS_HOST_BUSY | STS_BYTE_DONE;
+        goto out;
+
     case PROT_BLOCK_DATA:
         if (read) {
             ret = smbus_read_block(bus, addr, cmd, s->smb_data,
@@ -208,6 +219,7 @@ static void smb_transaction_start(PMSMBus *s)
 {
     if (s->smb_ctl & CTL_INTREN) {
         smb_transaction(s);
+        s->start_transaction_on_status_read = false;
     } else {
         /* Do not execute immediately the command; it will be
          * executed when guest will read SMB_STAT register.  This
@@ -217,6 +229,7 @@ static void smb_transaction_start(PMSMBus *s)
          * checking for status.  If STS_HOST_BUSY doesn't get
          * set, it gets stuck. */
         s->smb_stat |= STS_HOST_BUSY;
+        s->start_transaction_on_status_read = true;
     }
 }
 
@@ -226,19 +239,38 @@ smb_irq_value(PMSMBus *s)
     return ((s->smb_stat & ~STS_HOST_BUSY) != 0) && (s->smb_ctl & CTL_INTREN);
 }
 
+static bool
+smb_byte_by_byte(PMSMBus *s)
+{
+    if (s->op_done) {
+        return false;
+    }
+    if (s->in_i2c_block_read) {
+        return true;
+    }
+    return !(s->smb_auxctl & AUX_BLK);
+}
+
 static void smb_ioport_writeb(void *opaque, hwaddr addr, uint64_t val,
                               unsigned width)
 {
     PMSMBus *s = opaque;
+    uint8_t clear_byte_done;
 
     SMBUS_DPRINTF("SMB writeb port=0x%04" HWADDR_PRIx
                   " val=0x%02" PRIx64 "\n", addr, val);
     switch(addr) {
     case SMBHSTSTS:
+        clear_byte_done = s->smb_stat & val & STS_BYTE_DONE;
         s->smb_stat &= ~(val & ~STS_HOST_BUSY);
-        if (!s->op_done && !(s->smb_auxctl & AUX_BLK)) {
+        if (clear_byte_done && smb_byte_by_byte(s)) {
             uint8_t read = s->smb_addr & 0x01;
 
+            if (s->in_i2c_block_read) {
+                /* See comment below PROT_I2C_BLOCK_READ above. */
+                read = 1;
+            }
+
             s->smb_index++;
             if (!read && s->smb_index == s->smb_data0) {
                 uint8_t prot = (s->smb_ctl >> 2) & 0x07;
@@ -265,12 +297,23 @@ static void smb_ioport_writeb(void *opaque, hwaddr addr, uint64_t val,
                 s->smb_stat |= STS_BYTE_DONE;
             } else if (s->smb_ctl & CTL_LAST_BYTE) {
                 s->op_done = true;
-                s->smb_blkdata = s->smb_data[s->smb_index];
+                if (s->in_i2c_block_read) {
+                    s->in_i2c_block_read = false;
+                    s->smb_blkdata = i2c_recv(s->smbus);
+                    i2c_nack(s->smbus);
+                    i2c_end_transfer(s->smbus);
+                } else {
+                    s->smb_blkdata = s->smb_data[s->smb_index];
+                }
                 s->smb_index = 0;
                 s->smb_stat |= STS_INTR;
                 s->smb_stat &= ~STS_HOST_BUSY;
             } else {
-                s->smb_blkdata = s->smb_data[s->smb_index];
+                if (s->in_i2c_block_read) {
+                    s->smb_blkdata = i2c_recv(s->smbus);
+                } else {
+                    s->smb_blkdata = s->smb_data[s->smb_index];
+                }
                 s->smb_stat |= STS_BYTE_DONE;
             }
         }
@@ -281,6 +324,10 @@ static void smb_ioport_writeb(void *opaque, hwaddr addr, uint64_t val,
             if (!s->op_done) {
                 s->smb_index = 0;
                 s->op_done = true;
+                if (s->in_i2c_block_read) {
+                    s->in_i2c_block_read = false;
+                    i2c_end_transfer(s->smbus);
+                }
             }
             smb_transaction_start(s);
         }
@@ -334,8 +381,9 @@ static uint64_t smb_ioport_readb(void *opaque, hwaddr addr, unsigned width)
     switch(addr) {
     case SMBHSTSTS:
         val = s->smb_stat;
-        if (s->smb_stat & STS_HOST_BUSY) {
+        if (s->start_transaction_on_status_read) {
             /* execute command now */
+            s->start_transaction_on_status_read = false;
             s->smb_stat &= ~STS_HOST_BUSY;
             smb_transaction(s);
         }
@@ -356,10 +404,10 @@ static uint64_t smb_ioport_readb(void *opaque, hwaddr addr, unsigned width)
         val = s->smb_data1;
         break;
     case SMBBLKDAT:
-        if (s->smb_index >= PM_SMBUS_MAX_MSG_SIZE) {
-            s->smb_index = 0;
-        }
-        if (s->smb_auxctl & AUX_BLK) {
+        if (s->smb_auxctl & AUX_BLK && !s->in_i2c_block_read) {
+            if (s->smb_index >= PM_SMBUS_MAX_MSG_SIZE) {
+                s->smb_index = 0;
+            }
             val = s->smb_data[s->smb_index++];
             if (!s->op_done && s->smb_index == s->smb_data0) {
                 s->op_done = true;
diff --git a/include/hw/i2c/pm_smbus.h b/include/hw/i2c/pm_smbus.h
index 6dd5b7040b..7bcca97672 100644
--- a/include/hw/i2c/pm_smbus.h
+++ b/include/hw/i2c/pm_smbus.h
@@ -33,6 +33,12 @@ typedef struct PMSMBus {
     /* Set on block transfers after the last byte has been read, so the
        INTR bit can be set at the right time. */
     bool op_done;
+
+    /* Set during an I2C block read, so we know how to handle data. */
+    bool in_i2c_block_read;
+
+    /* Used to work around a bug in AMIBIOS, see smb_transaction_start() */
+    bool start_transaction_on_status_read;
 } PMSMBus;
 
 void pm_smbus_init(DeviceState *parent, PMSMBus *smb, bool force_aux_blk);
-- 
2.17.1


