Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 21:21:19 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id C317D58079C;
	Thu, 13 Dec 2018 01:00:34 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 13 Dec 2018 01:00:34 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AIygSdRNgvbgUvdeXyrgl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KPjyosbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRtpeWCNODIy+?=
 =?us-ascii?q?coUBEeQBM+VYoYbzqVUOtgO+CAu3CePz0z9FnGP60bEg3ukjFwzNwQwuH8gJsH?=
 =?us-ascii?q?TRtNj7KbsSXv6tzKnI0zrDae5d1Cr66InIbx8qvPaBXalrfsrWyUggChjIjlaO?=
 =?us-ascii?q?poz/OTOayOANv3Kc7+p6WuKikmgqoBxyrDi33soglJXFi4YPxlzZ+yh13pw5Kc?=
 =?us-ascii?q?C7RUJne9KpEZlduzmHO4dqTc4uWXxktSgkxrEcpZK3ZioHxZshyhXCcfKIaZKI?=
 =?us-ascii?q?7QjmVOuJITd3mnZleLWnihas/kiv1Pf8WtO30FlUtCpFlMfDtnQX2xzU8MiHRe?=
 =?us-ascii?q?Nx/kan2TmRywDe8v9ILVwwmKbBNpIszKA8moAOvUnAAiP6gkT7ga2OekUh4Oeo?=
 =?us-ascii?q?6uDnYrv8pp+bMo95kgX+MqUomsyiDuU0KwsOUHaB+eS6yrLj+VT1QLJEj/0wjK?=
 =?us-ascii?q?bZqovXJdoUpqGnGQ9ZyIUj5AilDzegztsYmWMLLFVfeBKIl4TpIU3BIOjkDfej?=
 =?us-ascii?q?hFShiDNrx/HFPrL/GJnMIWXDnazlfbZ87U5c1QUywcpe55JSFrEOPvbzVlXtu9?=
 =?us-ascii?q?zfCx8zKxa0zPr/CNVhyoMeXnqCAq+DP6PTrV+H/OUvL/OMZI8Iojn9Lfcl6uXq?=
 =?us-ascii?q?jX84n18dYKao0YEWaHC+AvRpPUGZbWDwjdcGFGcAphA+Q/DyiF2eTT5TYG6/X6?=
 =?us-ascii?q?A75j4lEo6mDoDDRoargLyGxyq7GpxWZmZbClGDC3vodoOEW+sSZyKWOMNujjsE?=
 =?us-ascii?q?Vb25QY87yR6urBP6y6ZgLufM4CIYrpLj1N925+HJjxE97z50At+Z02GMSWF0g2?=
 =?us-ascii?q?wJSyU33KB5vUxy1FOD3bJkjPxfENxZ/+lJXRsiNZ7A0+x6DMj/WgHbcdePUlqm?=
 =?us-ascii?q?RtSmDis3TtI+2NIOZ0d9G9O/jhHMxSaqArkVl6CVC5ww6K7Tw3/xJ8NlwXbcyK?=
 =?us-ascii?q?Yhl0UmQtdINWC+m6Fw7RbTCJDTn0WZjamqc78c0zDL9GuEyWqOv0RYUAprXKXB?=
 =?us-ascii?q?XHAfYFbWrNvj6kPDSb+uFaooMg9bxcGeLatKb8XjjU9aS/f7JNTef2Wxln+tCh?=
 =?us-ascii?q?mS2LODcpDme2UH0yXbE0gLjQYT8G2CNQg/ACehvm3fACZvFVLpf0Pj7+1+pGmn?=
 =?us-ascii?q?QU8zygGAd1dh2Kat+h4JmfycTOse3q4FuCckrDV0AFa93tLMB9qcvQZhe79cYd?=
 =?us-ascii?q?c84FdB2mLUrAh9Pp2mL6B/iV8SaQV3v0Xy1xppDoVMi9QlrHQvzABqM6KXzEtB?=
 =?us-ascii?q?dy+E3ZD3IrDYMG3y8w6gaqHI2lDSys2Z+roS5/sirVXjvwapFlQ5/nVj0tlV1W?=
 =?us-ascii?q?ac55rQAAoTV5LxTlg49xxgq77GZSk94pve1WdwPqmsrj/Cx9UpCfMlyxa9ZdtQ?=
 =?us-ascii?q?LLmIFQ7yE8IAAciuJ/cnm1yobhICIeBT+7Q4P8Kgd/uaxqGrOPxsky6hjWRC+I?=
 =?us-ascii?q?p9yF6D9zJgSu7U2JYI2+uY3gqbWDjmlleur8f3lZpCZT4MBGq/yDHoC5JLaa12?=
 =?us-ascii?q?YIkEF32uI8qxxthlg57tWnhY9EOsBl8c2c+pfwaSYEL53QFKyUsXpnmnkzOizz?=
 =?us-ascii?q?NoizEpsraf3CvWzuXidRoLIG5KSHN5jVfxJ4i5lNQaXEmubwg0mxqp/0f6x65H?=
 =?us-ascii?q?pKthK2nfW1tHfy/zL2t6SKu/qqKCY9JT6JMvqShXUv6zYUqZSr7+pBsWyTjjEH?=
 =?us-ascii?q?FdxDA4djGqvIv2nxphhWKZLXZzqmfZeM5qyRfe4tzcWeBe3j4cSCZkjjnXA0C2?=
 =?us-ascii?q?P8O18tWMi5fDrue+WnqhV5JJdinn14GAtCq95WBxBR2/nvazmsDoEAQg0C/70c?=
 =?us-ascii?q?VqWjvMrBrmfobr0KG6O/p9fkZ0HF/899Z6GoZmn4sznp4Q2GIWhpWI/XUdl2fz?=
 =?us-ascii?q?Ps5W2ab/bHoLWD4KzMTZ4Anj2E1/MH2Jw5j1WWmawstkf9O6eH8Z2joh78BWD6?=
 =?us-ascii?q?eZ9LlEnSp2olWitw7Qb+ZyniwByfQw8n4VmP8GuBAiziiGBrASHE9YPTHjlhiS?=
 =?us-ascii?q?7tC+qrlXa3ircbSqyEV+mtWhBqmYog5AQHb5ZosiHSho48VjN1LM1Wf/64D+d9?=
 =?us-ascii?q?nWcNITrQaUkxbbguhRKZIxkOcKhCV9NWL8u30l1/A0jRh00Z6mu4iHLn1n/Lil?=
 =?us-ascii?q?DR5AKj31e8QT9yn2gqlEmcaW252vEo9lGjUWR5boSfOoEDQPtfXoLQqOETs8qm?=
 =?us-ascii?q?uFFrrbBwOQ9EBmr3fXGZCxK36XPGUZzcllRBSFJkxQmgUUUyshnpIjCgCm3s/h?=
 =?us-ascii?q?cFp65jAM4F73sABMx/lsNxn+VGffuQipZi01SJiZMBpZ8AVC613JPsyZ6+J5Bz?=
 =?us-ascii?q?tY8YG5rAyRNmybYBxFDGEOWkyZHlDjI6Oh5d/a/+iDAeq+KfTObK6KqexfUfeI?=
 =?us-ascii?q?2J2u3pFn/zaKKsWAIH1iA+cn1UpEWHBzA97ZlCkXSywLiyLNaNaWpBei9S12rc?=
 =?us-ascii?q?C/8/XrVBjs5YuVDLtSPstg+wqrgaeYLOOQgCd5KTBF1pID33PIyb4f3EIMhCFq?=
 =?us-ascii?q?bTWiDbMAtSvVRqLKhqBXFwIbaz90NMZQ9a08wxJCOdTFhdL1zLJ4iv81BkxBVV?=
 =?us-ascii?q?zgnMGpeMMLL3u8NFPBGEaEKrCGKSfXzMHwZKO2UadQg/lMtx2spTabFFfuPiiC?=
 =?us-ascii?q?lznsTRygLftAgz2bPBNAvoGwaRJtCWnlTNL7ZRy3Kt53jTsqwbIqgnPGL3ITMT?=
 =?us-ascii?q?95c0lVtL2f8TtYguljG2xG9ndkLfOLmyCc7+nZLJYZqfpqAiRumOJc73Q30L9V?=
 =?us-ascii?q?7CBCRPxolyretN9uo1e6kuaRzjprSgZBqjFOhNHDgUI3c5/Q+JBNXT7muloy/H?=
 =?us-ascii?q?6XABcL7ZMxEN/wk7pS1cnUk6nwKXFE/s6CuYM4ANLZLtCAeEIgPADgHD/PDUNR?=
 =?us-ascii?q?STmxOGfNgApFkfyI/3mUtZkSo4Lp3pEJT+kIekYyE6YhFkl9HNEEaL1wTz9sxa?=
 =?us-ascii?q?WRi98EzXmzth/cQINdpJ+RBaHaOunmNDvM1eoMXBAP276taN1LboA=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AMAADsHhJch0O0hNFcBxsBAQEBAwEBA?=
 =?us-ascii?q?QcDAQEBgVIFAQEBCwGBVQWCESeDfJYTJRSDMZQPFIFzKwGEOwMCgwMiNQgNAQM?=
 =?us-ascii?q?BAQEBAQECARMBAQEIDQkIKSMMgjYkAYJhAQEBAQIBAQIgHQEBMgUBBAEJAQEKG?=
 =?us-ascii?q?AICJgICA0QQBgEXFoI7S4F5CAWlc3CBL4J2AQEFhzAIgQuLMReBQD+BRIJfhE4?=
 =?us-ascii?q?BEgEME4MEgleLNIUTkEoJkVkYkUqJLpAbgUcBgRtxMxoIKAh4BQZWgU6CGwwXi?=
 =?us-ascii?q?F6FYB8ygQIDAQEhE4lQDxcDgiQBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AMAADsHhJch0O0hNFcBxsBAQEBAwEBAQcDAQEBgVIFAQE?=
 =?us-ascii?q?BCwGBVQWCESeDfJYTJRSDMZQPFIFzKwGEOwMCgwMiNQgNAQMBAQEBAQECARMBA?=
 =?us-ascii?q?QEIDQkIKSMMgjYkAYJhAQEBAQIBAQIgHQEBMgUBBAEJAQEKGAICJgICA0QQBgE?=
 =?us-ascii?q?XFoI7S4F5CAWlc3CBL4J2AQEFhzAIgQuLMReBQD+BRIJfhE4BEgEME4MEgleLN?=
 =?us-ascii?q?IUTkEoJkVkYkUqJLpAbgUcBgRtxMxoIKAh4BQZWgU6CGwwXiF6FYB8ygQIDAQE?=
 =?us-ascii?q?hE4lQDxcDgiQBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,348,1539673200"; 
   d="scan'208";a="66636481"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 13 Dec 2018 01:00:32 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727194AbeLMJA3 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 13 Dec 2018 04:00:29 -0500
Received: from mail.kernel.org ([198.145.29.99]:43208 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1725949AbeLMJA2 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 13 Dec 2018 04:00:28 -0500
Received: from localhost (unknown [104.132.0.74])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 2337D20849;
        Thu, 13 Dec 2018 09:00:27 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1544691627;
        bh=n60jGYTA/cKtftl3HoEEGpChDFMsL9X1Zzmy/CGdafY=;
        h=In-Reply-To:Subject:To:References:From:Cc:Date:From;
        b=Xulx05i19h7jFFRHMAeXFXCVrfhvV+m6PqVuIvnMWKZ+Olr5aILeaRuptg4Irz3fl
         bxqTX8WhPe6tndc3U2APdeMKb7lat3wFpJSL4RA08KSzOuhg+Z+UkxPZg2wkGh8ZJn
         MZrrzcPDJ+PUXd6moutluLNSFavnUTGD4xiQyMkM=
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: quoted-printable
In-Reply-To: <20181211141627.GA526@e107981-ln.cambridge.arm.com>
Subject: Re: [PATCH 05/12] PCI: aardvark: add suspend to RAM support
To: "Rafael J. Wysocki" <rjw@rjwysocki.net>,
        Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
References: <20181123141831.8214-1-miquel.raynal@bootlin.com> <1999610.6DN9RK2Tt3@aspire.rjw.lan> <20181204094558.GA24588@e107981-ln.cambridge.arm.com> <1966692.fVZYlVgWHv@aspire.rjw.lan> <20181211141627.GA526@e107981-ln.cambridge.arm.com>
Message-ID: <154469162632.19322.13092710881803732022@swboyd.mtv.corp.google.com>
From: Stephen Boyd <sboyd@kernel.org>
User-Agent: alot/0.8
Cc: Miquel Raynal <miquel.raynal@bootlin.com>, sudeep.holla@arm.com,
        Gregory Clement <gregory.clement@bootlin.com>,
        Jason Cooper <jason@lakedaemon.net>,
        Andrew Lunn <andrew@lunn.ch>,
        Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>,
        Thomas Petazzoni <thomas.petazzoni@bootlin.com>,
        Bjorn Helgaas <bhelgaas@google.com>,
        devicetree@vger.kernel.org, Rob Herring <robh+dt@kernel.org>,
        Mark Rutland <mark.rutland@arm.com>, linux-pci@vger.kernel.org,
        linux-kernel@vger.kernel.org, linux-arm-kernel@lists.infradead.org,
        Antoine Tenart <antoine.tenart@bootlin.com>,
        Maxime Chevallier <maxime.chevallier@bootlin.com>,
        Nadav Haklai <nadavh@marvell.com>
Date: Thu, 13 Dec 2018 01:00:26 -0800
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Quoting Lorenzo Pieralisi (2018-12-11 06:16:27)
> On Tue, Dec 04, 2018 at 10:42:19PM +0100, Rafael J. Wysocki wrote:
> > On Tuesday, December 4, 2018 10:45:58 AM CET Lorenzo Pieralisi wrote:
> > > On Mon, Dec 03, 2018 at 11:00:20PM +0100, Rafael J. Wysocki wrote:
> > > > On Monday, December 3, 2018 4:38:46 PM CET Miquel Raynal wrote:
> > >=20
> > > I did not ask my question (that may be silly) properly apologies. I k=
now
> > > that the S2R context allows sleeping the question is, in case
> > > clk_disable_unprepare() (and resume counterparts) sleeps,
> >=20
> > If it just sleeps, then this is not a problem, but if it actually *wait=
s*
> > for something meaningful to happen (which I guess is what you really me=
an),
> > then things may go awry.
> >=20
> > > what is going to wake it up, given that we are in the S2R NOIRQ phase=
 and as
> > > you said the action handlers (that are possibly required to wake up t=
he eg
> > > clk_disable_unprepare() caller) are disabled (unless, AFAIK,
> > > IRQF_NO_SUSPEND is passed at IRQ request time in the respective drive=
r).
> >=20
> > So if it waits for an action handler to do something and wake it up, it=
 may
> > very well deadlock.  I have no idea if that really happens, though.
> >=20
> > > The clk API implementations back-ends are beyond my depth, I just wan=
ted
> > > to make sure I understand how the S2R flow is expected to work in this
> > > specific case.
> >=20
> > Action handlers won't run unless the IRQs are marked as IRQF_NO_SUSPEND
> > (well, there are a few more complications I don't recall exactly, but
> > that's the basic rule).  If anything depends on them to run, it will bl=
ock.
>=20
> Stephen, any comments on this ?

Sorry I seemed to miss this email. BTW, what is an "action handler"
here? The IRQ action handler?

> I would like to understand if it is safe
> to call a clk_*unprepare/prepare_* function (that may have a blocking
> back-end waiting on a wake-up event triggered by an IRQ action) in the
> suspend/resume NOIRQ phase.

Does this ever occur in practice? I imagine "blocking back-end waiting
on a wake-up event" would be some sort of i2c or SPI based "slow" clk
that is prepared/unprepared in the NOIRQ phase of suspend/resume? So
that function call into the clk API fails because the i2c or SPI
controller used to toggle the clk on/off state relies on the
controller's IRQ to manage the transaction over the bus but that IRQ is
disabled. I suppose this is possible but I've never heard of it
happening in practice. Do you have such a scenario?

>=20
> It is not clear how the unprepare/prepare() callers can possibly know
> whether it is safe to block at that stage given that IRQ actions are
> suspended and the wake-up may never trigger.
>=20

Is this solved in other situations somehow? I don't think clk consumers
have any idea that things are safe or not safe to use in the NOIRQ phase
of suspend, but I also don't see how clks are special here. Any provider
consumer pattern would fall into the same trap, but maybe clks are the
first ones to get here.

It seems like a larger problem with NOIRQ suspend in general and how it
is too coarse of a solution for suspend ordering of devices. It's not
like we need *all* device interrupts to be disabled to do something in
suspend with one particular device. Most likely, we just need the device
and all it's children to be suspended and this device to have it's IRQ
disabled for the NOIRQ suspend callback to work. (Maybe any devices it's
supplying with device links too?)

If that's really the case, then I can see how one device and it's
children are suspended and the irq for it is disabled but the providing
devices (clk, regulator, bus controller, etc.) are still fully active
and not suspended but in fact completely usable and able to service
interrupts. If that all makes sense, then I would answer the question
with a definitive "yes it's all fine" because the clk consumer could be
in the NOIRQ phase of its suspend but the clk provider wouldn't have
even started suspending yet when clk_disable_unprepare() is called.

