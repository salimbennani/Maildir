Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:14:34 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 578725802E4;
	Fri, 30 Nov 2018 00:31:45 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga001-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 30 Nov 2018 00:31:45 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AZuKiBxIy21uQCPpwwNmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgULPz+rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZQsleWCNPDJ28?=
 =?us-ascii?q?YYQNAeoPPuhXoZTzqVsVtRuzBxKhBP/2yjJSmnP6wbc33uYnHArb3AIgBdUOsH?=
 =?us-ascii?q?HModvoKKcdT/i1zKnWwjXFcvhbxDD96YjVfRs8pvyMRql/cc3RyEYyDA7FjUuf?=
 =?us-ascii?q?qZbjPzyL0uQBqW+b7/BvVe+2jWMstgJ/oiC3y8syloXEgpgZxk3K+Cln2oo5ON?=
 =?us-ascii?q?61RFJhbdOlEpZcrzyWO5d5T884Xm1ltjg2xqcatZKhfiUHx5IqzAPFZfOdaYiH?=
 =?us-ascii?q?+BfjWf6RIThmgHJlf6qyhwi98Ue+0O3wTMq030hQripDjNbMsmoB1xvJ6siIUv?=
 =?us-ascii?q?d9/0Gh1iiT1w3L9O1IPUQ5mbDGJ5Mv3LI8jIcfvEffEiPsmUj7jreadkA+9eip?=
 =?us-ascii?q?7+TnbK/mppiZN4JsjgH+M6IumtGwAOghMQgBQXKb+eKi273n5EH5R7tLjvsona?=
 =?us-ascii?q?nDq53aO8sbqbCjAwNP0YYs9Qy/DzG439Qch3UHK0hFeB2fg4jzJ17OOOz4Deu4?=
 =?us-ascii?q?g1m0lDdrxvPGMaP7DpTCM3jOi7Phfbd7605Bxws/19Ff55RICr4fJPL/QFP+tN?=
 =?us-ascii?q?vdDhUhKQy73/7nCMlh1oMZQW+PArWWMKLOsVCS4eIjOemMZJIPtzb7JPgo/Pru?=
 =?us-ascii?q?jX4/mV8Acqilx5oXaHakHvt4J0WVe2bjgtAEEW0SpAoxUPTqiEGeUT5Uf3uyXa?=
 =?us-ascii?q?U86S8hBIKlCofDQIatgLua0Se/H51WYH1GC1+WHXfpcYWER+kDaCaILsB9lTwE?=
 =?us-ascii?q?UKCrS5U92hG2qA/6171nI/LO9S0DtZLj09t16/fJlR4o9zx5FMCd02CLT2FpkW?=
 =?us-ascii?q?IEXT423KZjoUNjzlePy7R3g/tdFdZL/fNGTh86NYLAz+x9E93yWRjOftGTRFai?=
 =?us-ascii?q?Q9WpGzcxTt0qzt8KYkZ9Hciijx/Z0yqrBb8Vi6KEBJgu/q3A2HjxIt53y2za26?=
 =?us-ascii?q?k5k1kmXsxPOHW7iaFl6QjcGZTFk0WDmKasbqQTwijN+GCHzWqNuUFYVBV9UaHE?=
 =?us-ascii?q?XXAZe0vXos715kLET7+yF7snNhFNxtKFKqtPctfpl0lJRO//ONTCZGK8g3q/Cg?=
 =?us-ascii?q?yWxrySdobqe38S3CPGCEcalQAe5nKGNQk4Bie8rGPSFj1uFVTzY0zy9elysm+0?=
 =?us-ascii?q?TkgxzwuSdU1uy6K1+gIJhfybU/4TwrMEuCImqzVoHFa838jaC8aaqwpmZqVcZd?=
 =?us-ascii?q?I94FFI1W/Cswx9P5qgL71th1IEcgR3uV/u2AtzColajccqq3YqxhJoKa2EyFNB?=
 =?us-ascii?q?ay+Y3ZfoN7LNLmn94h+uZLDW213Ey9mW57oA5+4+q1XguwGpCFEv83Fm09lTzn?=
 =?us-ascii?q?ud6Y/GDAsUUZLtTEk38wJ2qK3dYik4/4nUz2FjMbGosj/e3NIkHOskygu6c9hD?=
 =?us-ascii?q?Kq+FFQ/yHNccB8ihM+Eqn1mpbhQZPOFd7qI0PsWmd+eY166vJupvgDWmjWFf6o?=
 =?us-ascii?q?Bnzk2M7zZ8SvLP35sd2fGY3xeIWC3mjFi8tcD7g4ZEai8IHmq+0CTrGJReZqlv?=
 =?us-ascii?q?cokVE2euJMu3y856h57sXX5Y6VGiC0kH2M+vZRqdcVj90RdM2kQQpHytgTG4wC?=
 =?us-ascii?q?BskzE1sqqf2zTDwuTjdBYdOm9HXnJijUrqIYWvi9AaXU6obxUmlRe/5Eb6wbRb?=
 =?us-ascii?q?q7p7L2XJXUhIeC32JXl4UqSsrrqCf9JP6JQwvCVVSuu8e1OaSr36oxcAyCPsBW?=
 =?us-ascii?q?hexDM6dzGspJr5mQd3iGacLHZ1sXrYdtt8xRbZ5NzAW/FR2iAKSzV/iTnSHlK8?=
 =?us-ascii?q?JcWm/c2Il5ffteCzT2KgWYdUcSXxz4OAtS276HZuAR2+mfCzh9LmHRI70S/9y9?=
 =?us-ascii?q?llSyHIoAzgbYns0qSwKfhncVVwBF/g98p6HZlzkogqi5ERw3QahoiV8mABkWf8?=
 =?us-ascii?q?Kthb3aP+bHwQRT8E2dLV4Q7l2FF9IXKN3Y72SnKdws55bdmgfmwWwj4979xNCK?=
 =?us-ascii?q?qM6bxEnCh1rUCioQPff/d9hSsdxuU06HEBne4JogUtwz6ZArATG0lYICPtmw6J?=
 =?us-ascii?q?79C4sKVYemKvfaKs20p5mNCrFKuCrR1EWHblZpciGjd97tl4MFLJynHy65vreN?=
 =?us-ascii?q?/NbdIIrR2UkgzNj+xUKJI3i/oLijBrOWP7vX051eE7iQZi0o29vIiCM29t5r62?=
 =?us-ascii?q?AgZENj3pYMMe4irigrxZnsaSwoCjBJFhGigQUZvsTPKoFi8StPv9OwaPFj08tm?=
 =?us-ascii?q?mUGb7FEQCD70dmqmrFE4q3OHGPOHkZ0dJiSQGfJENFhQAbQi46koQlFgywx8zh?=
 =?us-ascii?q?bUR55i0X5lHisRtB0eZoNxj5UmfCqwakcDY0SJ6DLBVI6gFO/VvaMcub7uhrBS?=
 =?us-ascii?q?FX4oWhrBCRKmycfwlJDWYJWlGdB1D+JLau48PM8/OfBuq4IPvDerGOqe1YV/eV?=
 =?us-ascii?q?ypOjyIpm/zCQNsqROnluFeE02k1GXXphAcTWhy0PSzALlyLKd8ObpAmz+ix0rs?=
 =?us-ascii?q?C88fTnQgHv5ZGIC7tdL9pv4Q22gbyYOu6UhSZ5LytY15wWyX/JzrgfwEAdiyV0?=
 =?us-ascii?q?ezaxFrQAsDbHTLjMla9PEx4bdyRzOdNS4KIhxQZNI9DUi9Pv2r58j/44EFNFVV?=
 =?us-ascii?q?3nmsG0as0GOWC9NFXbBEmVMLSKPyHEw8byYamkU71fkP1UtwGsuTacC0LjIjWD?=
 =?us-ascii?q?lzzzWx+zK+1DkCGbMwJYuIymdhZtCG7jTM/paxGhMd93iyE2zqMwhn/QKWEcNj?=
 =?us-ascii?q?18eVtXrrKM9SNYnul/G2tZ43tlN+aEnSOZ7+jeKpkOsPprAj57l+RV4Hkhz7tV?=
 =?us-ascii?q?7SdEROF6mSfIr95upU2mnfeLyjZ9TBVOrTNL18q3uhBZJKrQ55AIZX/F9xIMpT?=
 =?us-ascii?q?GLFhsDttIjFtTusKBR4sPIn6P0LjpS75Tf+s5KQ4DYJdyGO3c9KxfkMCDbARFD?=
 =?us-ascii?q?TjOxM2zbwUtHn7Xa8nyTs4h/o4Lp3ZkDULlWUHQxF+gGEQJkGtIYKZt6Vz9ilq?=
 =?us-ascii?q?SUyIYM5HyjvFzaQMZyoJ/KTLSRDO/pJTLfiqNLI1MMwLXlPcEQO5f91khKdFZ3?=
 =?us-ascii?q?hsLJFlDWUNQLpTduKkcwoUNQ4D1lQ3cy0kbNdAyg+jkQGOSykxpwjRFxMso38z?=
 =?us-ascii?q?K52Es6PlrHomMal1g90YH+izeAfBbyIb22UIUQDDD74RtieqjnShp4OFXh1Xdv?=
 =?us-ascii?q?My3JEvcI1+Nt?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ADAADI9ABch0O0hNFiGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUQYBAQELAYJpgQIng3mIGIwIgWglFJcyFIFiERgDEAGEOwMCgzQiNAk?=
 =?us-ascii?q?NAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkAYJiAQICAQECIAQZAQE3AQQBCQEBC?=
 =?us-ascii?q?hoCJgICA0QQBgESBYMcAYF5CAWmBXB8M4J2AQEFhyoIgQuLDBeBQD+BETNkgXu?=
 =?us-ascii?q?ERjuDBIJXiRsIgXiEDXhQhF+KWQmGf4o3GIFaTYRDgySHDoh5jG2CcYFGgg0zG?=
 =?us-ascii?q?ggoCHgLVoFOCYISDBeIG0OFYB8ygQIDAQEhE41NAQE?=
X-IPAS-Result: =?us-ascii?q?A0ADAADI9ABch0O0hNFiGwEBAQEDAQEBBwMBAQGBUQYBAQE?=
 =?us-ascii?q?LAYJpgQIng3mIGIwIgWglFJcyFIFiERgDEAGEOwMCgzQiNAkNAQMBAQEBAQECA?=
 =?us-ascii?q?RMBAQEIDQkIKSMMgjYkAYJiAQICAQECIAQZAQE3AQQBCQEBChoCJgICA0QQBgE?=
 =?us-ascii?q?SBYMcAYF5CAWmBXB8M4J2AQEFhyoIgQuLDBeBQD+BETNkgXuERjuDBIJXiRsIg?=
 =?us-ascii?q?XiEDXhQhF+KWQmGf4o3GIFaTYRDgySHDoh5jG2CcYFGgg0zGggoCHgLVoFOCYI?=
 =?us-ascii?q?SDBeIG0OFYB8ygQIDAQEhE41NAQE?=
X-IronPort-AV: E=Sophos;i="5.56,298,1539673200"; 
   d="scan'208";a="42972821"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 30 Nov 2018 00:31:43 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727027AbeK3TkM (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 30 Nov 2018 14:40:12 -0500
Received: from mail.kernel.org ([198.145.29.99]:47470 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726459AbeK3TkM (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 30 Nov 2018 14:40:12 -0500
Received: from localhost (unknown [104.132.0.74])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 289A02146D;
        Fri, 30 Nov 2018 08:31:39 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1543566699;
        bh=Ym/r0XtDXljhM9nbyq98/dadFcQArhTvMbg8fMAeoHA=;
        h=To:From:In-Reply-To:Cc:References:Subject:Date:From;
        b=d6ov26LmS/Mn0c6Pn/cwU4haNAFIj9ASYkQX9lEWHTiOS5/c/jgFMTiS0mNR7Kn6/
         XgZsHmdsm6eG8yJPSznYMB/7Wyq9xvgzSstsoNc0onEjU2rh6+mq5rpQ+fVgi17DPw
         ehRt5oUGas1Bn6R5OkweQnktqcCkdfc/KaCt6no8=
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: quoted-printable
To: Sugaya Taichi <sugaya.taichi@socionext.com>,
        devicetree@vger.kernel.org, linux-arm-kernel@lists.infradead.org,
        linux-clk@vger.kernel.org, linux-kernel@vger.kernel.org,
        linux-serial@vger.kernel.org
From: Stephen Boyd <sboyd@kernel.org>
In-Reply-To: <1542589274-13878-8-git-send-email-sugaya.taichi@socionext.com>
Cc: Michael Turquette <mturquette@baylibre.com>,
        Rob Herring <robh+dt@kernel.org>,
        Mark Rutland <mark.rutland@arm.com>,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        Daniel Lezcano <daniel.lezcano@linaro.org>,
        Thomas Gleixner <tglx@linutronix.de>,
        Russell King <linux@armlinux.org.uk>,
        Jiri Slaby <jslaby@suse.com>,
        Masami Hiramatsu <masami.hiramatsu@linaro.org>,
        Jassi Brar <jaswinder.singh@linaro.org>,
        Sugaya Taichi <sugaya.taichi@socionext.com>
References: <1542589274-13878-1-git-send-email-sugaya.taichi@socionext.com>
 <1542589274-13878-8-git-send-email-sugaya.taichi@socionext.com>
Message-ID: <154356669840.88331.4455990896653868594@swboyd.mtv.corp.google.com>
User-Agent: alot/0.7
Subject: Re: [PATCH 07/14] clock: milbeaut: Add Milbeaut M10V clock control
Date: Fri, 30 Nov 2018 00:31:38 -0800
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Quoting Sugaya Taichi (2018-11-18 17:01:12)
> Add Milbeaut M10V clock ( including PLL ) control.

Please give some more details here.

> =

> Signed-off-by: Sugaya Taichi <sugaya.taichi@socionext.com>
> ---
>  drivers/clk/Makefile   |   1 +
>  drivers/clk/clk-m10v.c | 671 +++++++++++++++++++++++++++++++++++++++++++=
++++++

And this is different from Uniphier? Maybe we need a socionext
directory under drivers/clk/.

>  2 files changed, 672 insertions(+)
>  create mode 100644 drivers/clk/clk-m10v.c
> =

> diff --git a/drivers/clk/clk-m10v.c b/drivers/clk/clk-m10v.c
> new file mode 100644
> index 0000000..aa92a69
> --- /dev/null
> +++ b/drivers/clk/clk-m10v.c
> @@ -0,0 +1,671 @@
> +// SPDX-License-Identifier: GPL-2.0
> +/*
> + * Copyright (C) 2018 Socionext Inc.
> + * Copyright (C) 2016 Linaro Ltd.
> + *
> + */
> +
> +#include <linux/clk-provider.h>
> +#include <linux/clkdev.h>

Is this include used?

> +#include <linux/delay.h>
> +#include <linux/err.h>
> +#include <linux/io.h>
> +#include <linux/of_address.h>
> +#include <linux/of.h>
> +#include <linux/spinlock.h>
> +
> +#define CLKSEL1                0x0
> +#define CLKSEL(n)      (((n) - 1) * 4 + CLKSEL1)
> +
> +#define PLLCNT1                0x30
> +#define PLLCNT(n)      (((n) - 1) * 4 + PLLCNT1)
> +
> +#define CLKSTOP1       0x54
> +#define CLKSTOP(n)     (((n) - 1) * 4 + CLKSTOP1)
> +
> +#define CRSWR          0x8c
> +#define CRRRS          0x90
> +#define CRRSM          0x94
> +
> +#define to_m10v_mux(_hw)       container_of(_hw, struct m10v_mux, hw)
> +#define to_m10v_gate(_hw)      container_of(_hw, struct m10v_gate, hw)
> +#define to_m10v_div(_hw)       container_of(_hw, struct m10v_div, hw)
> +#define to_m10v_pll(_hw)       container_of(_hw, struct m10v_pll, hw)
> +
> +static void __iomem *clk_base;
> +static struct device_node *np_top;
> +static DEFINE_SPINLOCK(crglock);

Please make more specific names for these global variables by prefixing
with m10v_. Also consider getting rid of the iomem and np_top globals
entirely and associate those with clks differently.

> +
> +static __init void __iomem *m10v_clk_iomap(void)
> +{
> +       if (clk_base)
> +               return clk_base;
> +
> +       np_top =3D of_find_compatible_node(NULL, NULL,
> +                       "socionext,milbeaut-m10v-clk-regs");
> +       if (!np_top) {
> +               pr_err("%s: CLK iomap failed!\n", __func__);

We haven't iomapped yet though.

> +               return NULL;
> +       }
> +
> +       clk_base =3D of_iomap(np_top, 0);
> +       of_node_put(np_top);

Would be nicer to use platform_device APIs instead of OF ones.

> +
> +       return clk_base;
> +}
> +
> +struct m10v_mux {
> +       struct clk_hw hw;
> +       const char *cname;
> +       u32 parent;
> +};
> +
> +static u8 m10v_mux_get_parent(struct clk_hw *hw)
> +{
> +       struct m10v_mux *mcm =3D to_m10v_mux(hw);
> +       struct clk_hw *parent;
> +       int i;
> +
> +       i =3D clk_hw_get_num_parents(hw);
> +       while (i--) {
> +               parent =3D clk_hw_get_parent_by_index(hw, i);
> +               if (clk_hw_get_rate(parent))
> +                       break;
> +       }
> +
> +       if (i < 0) {
> +               pr_info("%s:%s no parent?!\n",
> +                       __func__, mcm->cname);
> +               i =3D 0;
> +       }
> +
> +       return i;
> +}
> +
> +static int m10v_mux_set_parent(struct clk_hw *hw, u8 index)
> +{
> +       struct m10v_mux *mcm =3D to_m10v_mux(hw);
> +
> +       mcm->parent =3D index;
> +       return 0;
> +}
> +
> +static const struct clk_ops m10v_mux_ops =3D {
> +       .get_parent =3D m10v_mux_get_parent,
> +       .set_parent =3D m10v_mux_set_parent,
> +       .determine_rate =3D __clk_mux_determine_rate,
> +};
> +
> +void __init m10v_clk_mux_setup(struct device_node *node)
> +{
> +       const char *clk_name =3D node->name;
> +       struct clk_init_data init;
> +       const char **parent_names;
> +       struct m10v_mux *mcm;
> +       struct clk *clk;
> +       int i, parents;
> +
> +       if (!m10v_clk_iomap())
> +               return;
> +
> +       of_property_read_string(node, "clock-output-names", &clk_name);
> +
> +       parents =3D of_clk_get_parent_count(node);
> +       if (parents < 2) {
> +               pr_err("%s: not a mux\n", clk_name);

How is this possible?

> +               return;
> +       }
> +
> +       parent_names =3D kzalloc((sizeof(char *) * parents), GFP_KERNEL);
> +       if (!parent_names)
> +               return;
> +
> +       for (i =3D 0; i < parents; i++)
> +               parent_names[i] =3D of_clk_get_parent_name(node, i);

This is of_clk_parent_fill().

> +
> +       mcm =3D kzalloc(sizeof(*mcm), GFP_KERNEL);
> +       if (!mcm)
> +               goto err_mcm;
> +
> +       init.name =3D clk_name;
> +       init.ops =3D &m10v_mux_ops;
> +       init.flags =3D CLK_IS_BASIC | CLK_SET_RATE_PARENT;

Please don't use CLK_IS_BASIC unless you need it.

> +       init.num_parents =3D parents;
> +       init.parent_names =3D parent_names;
> +
> +       mcm->cname =3D clk_name;
> +       mcm->parent =3D 0;
> +       mcm->hw.init =3D &init;
> +
> +       clk =3D clk_register(NULL, &mcm->hw);
> +       if (IS_ERR(clk))
> +               goto err_clk;
> +
> +       of_clk_add_provider(node, of_clk_src_simple_get, clk);
> +       return;
> +
> +err_clk:
> +       kfree(mcm);
> +err_mcm:
> +       kfree(parent_names);
> +}
> +CLK_OF_DECLARE(m10v_clk_mux, "socionext,milbeaut-m10v-clk-mux",
> +                       m10v_clk_mux_setup);

Any chance you can use a platform driver?

> +
> +struct m10v_pll {
> +       struct clk_hw hw;
> +       const char *cname;
> +       const struct clk_ops ops;
> +       u32 offset;
> +       u32 div, mult;
> +       bool ro;
> +};
> +
> +#define ST     1
> +#define SEL    2
> +
> +static void _mpg_enable(struct clk_hw *hw, unsigned int enable)
> +{
> +       struct m10v_pll *mpg =3D to_m10v_pll(hw);
> +       unsigned long flags;
> +       u32 val;
> +
> +       if (mpg->ro) {
> +               pr_debug("%s:%d %s: read-only\n",
> +                        __func__, __LINE__, mpg->cname);
> +               return;
> +       }
> +
> +       spin_lock_irqsave(&crglock, flags);
> +
> +       val =3D readl(clk_base + PLLCNT(SEL));
> +       if (enable)
> +               val |=3D BIT(mpg->offset);
> +       else
> +               val &=3D ~BIT(mpg->offset);
> +       writel(val, clk_base + PLLCNT(SEL));
> +
> +       spin_unlock_irqrestore(&crglock, flags);
> +}
> +
> +static int mpg_enable(struct clk_hw *hw)
> +{
> +       _mpg_enable(hw, 1);
> +       return 0;
> +}
> +
> +static void mpg_disable(struct clk_hw *hw)
> +{
> +       _mpg_enable(hw, 0);
> +}
> +
> +static int mpg_is_enabled(struct clk_hw *hw)
> +{
> +       struct m10v_pll *mpg =3D to_m10v_pll(hw);
> +
> +       return readl(clk_base + PLLCNT(SEL)) & (1 << mpg->offset);
> +}
> +
> +static void _mpg_prepare(struct clk_hw *hw, unsigned int on)
> +{
> +       struct m10v_pll *mpg =3D to_m10v_pll(hw);
> +       unsigned long flags;
> +       u32 val;
> +
> +       if (mpg->ro) {

Should have different RO ops for read-only clks.

> +               pr_debug("%s:%d %s: read-only\n",
> +                        __func__, __LINE__, mpg->cname);
> +               return;
> +       }
> +
> +       val =3D readl(clk_base + PLLCNT(ST));
> +       if (!on =3D=3D !(val & BIT(mpg->offset)))
> +               return;
> +
> +       /* disable */

Please remove obvious comments.

> +       mpg_disable(hw);
> +
> +       spin_lock_irqsave(&crglock, flags);
> +
> +       val =3D readl(clk_base + PLLCNT(ST));
> +       if (on)
> +               val |=3D BIT(mpg->offset);
> +       else
> +               val &=3D ~BIT(mpg->offset);
> +       writel(val, clk_base + PLLCNT(ST));
> +
> +       spin_unlock_irqrestore(&crglock, flags);
> +
> +       udelay(on ? 200 : 10);
> +}
> +
> +static int mpg_prepare(struct clk_hw *hw)
> +{
> +       _mpg_prepare(hw, 1);
> +       return 0;
> +}
> +
> +static void mpg_unprepare(struct clk_hw *hw)
> +{
> +       _mpg_prepare(hw, 0);
> +}
> +
> +static int mpg_set_rate(struct clk_hw *hw, unsigned long rate,
> +                               unsigned long prate)
> +{

Why is this implemented then?

> +       return 0;
> +}
> +
> +static unsigned long mpg_recalc_rate(struct clk_hw *hw,
> +               unsigned long prate)
> +{
> +       struct m10v_pll *mpg =3D to_m10v_pll(hw);
> +       unsigned long long rate =3D prate;
> +
> +       if (mpg_is_enabled(hw)) {
> +               rate =3D (unsigned long long)prate * mpg->mult;
> +               do_div(rate, mpg->div);
> +       }
> +
> +       return (unsigned long)rate;
> +}
> +
> +static long mpg_round_rate(struct clk_hw *hw, unsigned long rate,
> +                               unsigned long *prate)
> +{
> +       struct m10v_pll *mpg =3D to_m10v_pll(hw);
> +       unsigned long long temp_rate =3D (unsigned long long)*prate * mpg=
->mult;
> +
> +       if (mpg->ro)
> +               return mpg_recalc_rate(hw, *prate);
> +
> +       return do_div(temp_rate, mpg->div);

There shouldn't be round_rate implemented at all if the device is
'read-only' or can't change frequency because set_rate op is empty.

> +}
> +
[..]
> +
> +static void mdc_set_div(struct m10v_div *mdc, u32 div)
> +{
> +       u32 off, shift, val;
> +
> +       off =3D mdc->offset / 32 * 4;
> +       shift =3D mdc->offset % 32;
> +
> +       val =3D readl(clk_base + CLKSEL1 + off);
> +       val &=3D ~(mdc->mask << shift);
> +       val |=3D (div << shift);
> +       writel(val, clk_base + CLKSEL1 + off);
> +
> +       if (mdc->waitdchreq) {
> +               unsigned int count =3D 250;
> +
> +               writel(1, clk_base + CLKSEL(11));
> +
> +               do {
> +                       udelay(1);
> +               } while (--count && readl(clk_base + CLKSEL(11)) & 1);

Use readl_poll_timeout()?

> +
> +               if (!count)
> +                       pr_err("%s:%s CLK(%d) couldn't stabilize\n",
> +                               __func__, mdc->cname, mdc->offset);
> +       }
> +}
> +
[...]
> +
> +void __init m10v_clk_gate_setup(struct device_node *node)
> +{
> +       const char *clk_name =3D node->name;
> +       struct clk_init_data init;
> +       const char *parent_name;
> +       struct m10v_gate *mgc;
> +       struct clk *clk;
> +       u32 offset;
> +       int ret;
> +
> +       if (!m10v_clk_iomap())
> +               return;
> +
> +       of_property_read_string(node, "clock-output-names", &clk_name);
> +
> +       ret =3D of_property_read_u32(node, "offset", &offset);
> +       if (ret) {
> +               pr_err("%s: missing 'offset' property\n", clk_name);
> +               return;
> +       }
> +
> +       parent_name =3D of_clk_get_parent_name(node, 0);
> +
> +       mgc =3D kzalloc(sizeof(*mgc), GFP_KERNEL);
> +       if (!mgc)
> +               return;
> +
> +       init.name =3D clk_name;
> +       init.ops =3D &m10v_gate_ops;
> +       init.flags =3D CLK_IS_BASIC | CLK_SET_RATE_PARENT;
> +       init.parent_names =3D &parent_name;
> +       init.num_parents =3D 1;
> +
> +       mgc->cname =3D clk_name;
> +       mgc->offset =3D offset;
> +       mgc->hw.init =3D &init;
> +       if (of_get_property(node, "read-only", NULL))
> +               mgc->ro =3D true;
> +
> +       clk =3D clk_register(NULL, &mgc->hw);

Please use clk_hw based registration and provider APIs.

> +       if (IS_ERR(clk))
> +               kfree(mgc);
> +       else
> +               of_clk_add_provider(node, of_clk_src_simple_get, clk);
> +}
> +CLK_OF_DECLARE(m10v_clk_gate, "socionext,milbeaut-m10v-clk-gate",
> +               m10v_clk_gate_setup);
> -- =


I suspect this driver will significantly change so I'm not reviewing
any further until it's sent again.

