Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 06 Dec 2018 08:56:00 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 9CF0B5804C1;
	Wed,  5 Dec 2018 09:00:13 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 05 Dec 2018 09:00:12 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Anwpi4hdIHBRujF3jpf04sQxQlGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc6+bBWN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRdDYyz?=
 =?us-ascii?q?YIUBEeoPMuRWr4f+qVQAsBWwBRK0BO7t0TJImmb20Lcm3+g9CwzL3gotFM8Ovn?=
 =?us-ascii?q?TOq9X1Mb8fX/2pzKbW1TXDb+1Z2THg44XVdRAgoeyDVq93fMrK0kYvEAPEgUiL?=
 =?us-ascii?q?pIzmITyVzOINvHaf7+Z6UuKvkWEnphh3rzOyxckskpHEipwJxl3A7yl13Yg4Kc?=
 =?us-ascii?q?OiREJmYtOoDIFcuiCYOoduX88uX25ltDwnxrAIp5K3ZjQGxI4lyhPQbfGMbpKG?=
 =?us-ascii?q?7Qj5VOmLJDd1nHJld6y7hxa16UWg1OL8Wdeu0FpQrSpKjMPMtnYT2BzX8MSHTe?=
 =?us-ascii?q?F9/ki51TaO0QDc9P1ELFgqmabHL5Mt2KM8m5QNvUjZAyP7m1n6gLWXe0gm4uSo?=
 =?us-ascii?q?7v7oYrTipp+SLY90jQT+P7wqmsy+B+Q4LwcPU3GY+euizr3j+1P2QLFTgv0xnK?=
 =?us-ascii?q?jZto7VJd4Aq66nDA9azJwj5wy8Dzi4ytQYm2cILFZfdBKAlYjpNEnCIOrkAven?=
 =?us-ascii?q?n1SsjDBryujCPr3gAZXCMGLPkbj8fbtm705cyQwzzc1Q5p5OC7EBJu7zVVH1tN?=
 =?us-ascii?q?DCEhA5NAm0yf79CNphzoMeRX6PAqiBPaPSq1CI5/4vLPOLZIMPuDb9NuIq5/jh?=
 =?us-ascii?q?jXIinV8dfK+p3YYYaXyiH/RmJVmZbmTogtsbDWgKuQ8+RvTwiFKeST5Te2qyX6?=
 =?us-ascii?q?Uk6zE5D4KpE53PRoOqgLyH2ie7GYZbZmRHClCKDHfpeJ+IW/YKaCKOPMBhliYI?=
 =?us-ascii?q?WqSmS48kzRuurhP1y6J7LurI/S0VrYjs1MN15+3UlhE+7yZ0AN6f02yWS2F0n2?=
 =?us-ascii?q?UIRyI53axloEx9zEuD3rZ8g/BCCdNT4PZJWB8gNZHA1+x6F8zyWgXZc9eKUlmm?=
 =?us-ascii?q?RM+qATUwTt0rxd8ObF1wG9GjjhDFwiqrDKUZl72NBJwo7K3c22L9KNp6y3bDzK?=
 =?us-ascii?q?MhlUUpQtNTNW26ga5y7xXcCJTXk0qHjaqqdb4T3CjW9Gidy2qCu0VYUA11UaXB?=
 =?us-ascii?q?Rn0fYkrWrdLk5kLNVbOuCLInMhdfxs6GMKdFdtrpjVBeTvf5JNvee36xm3u3BR?=
 =?us-ascii?q?uQ27yDdpTqdHsH0CXdEkcElRsT8miANQUlAiehomTeDCFhFF71YkPs9/V+p22/?=
 =?us-ascii?q?TkMu0w6KaEhh3aKv+hEJnfycV+8T3rUctSc9qjV0GVG9387WC9uAvQZhYL9QYd?=
 =?us-ascii?q?Qn4FdD1GLZsQN9M4ekL6BjgF4ebgt2s1nv1xVxFoVPj8wqoGk2wwp1LKKSyElB?=
 =?us-ascii?q?eC+A3ZDsJr3XLXH/8wqra6HI1VDRztaX9r0U5/QltlrspgepFkkl83V5yNRV13?=
 =?us-ascii?q?qc5pPXDAsdS57xU0A39wRkqLHeeCUy+4TU1Xh0O6murjDCw84pBPciyhu4f9Zf?=
 =?us-ascii?q?LbmIGxPoH8wbB8ihMuoqm1eyYxIAPeBS8rM0Psy8e/uH3q6rIPhvnDa8gWtb54?=
 =?us-ascii?q?B911qG9zBgRe7Qw5YF3/aY0xOdVzf9kFiuqNr3lp1DZT0IGGqw1zLkBI9IaqJu?=
 =?us-ascii?q?Z4kLDXqhLNOtxtV5gZ7gQHpY9F+lB1Mb186lYxuSb1rh3QJO0UQbu2ComSy9zz?=
 =?us-ascii?q?ZsiTEmsrKf3DDSw+TlbBcGOm9LSHNijFv2Ooi0ktYaUVOsbwgokhul+En7y7Ja?=
 =?us-ascii?q?pKR5M2ncX0NIczLqIGFlV6u6rqCCbNJX6JM0rSVXV/yxYVKARb7noBsa0CTjE3?=
 =?us-ascii?q?FFxD8hdDGquZT5nxpkh2KbN3tzqHvZecdtxRbQ/tDcRPhR3iYYSyl8kzXYGl+8?=
 =?us-ascii?q?P9yx99WOi5jDqvy+V36mVpBLcSjk14SAuDG55W1rBx2yhPSzmtzhEQgn3i73zd?=
 =?us-ascii?q?hqVSPUrBniZonnzbi1MeVifkNwHl/z99J6Gp1ikos3nJwQ2mIVhpSP8XoHjGf8?=
 =?us-ascii?q?K9Nb2a3lYXoJRD4LxcPV4Qf/1E1iKHKJ25z2VnGHzsR9YNm6Z3sc2jgh4MBSFK?=
 =?us-ascii?q?eU8LtEkDNwolq5rgLee+JxnzkDxvs19H4VnfsJtxEzwSWHDbAfBk1YPS3qlxSV?=
 =?us-ascii?q?4NGytqRXZGCzcbeu0Epyh8yuDLaHogtEQnb2Zo8iHTNs7sV4KF/MzHrz6oT+dN?=
 =?us-ascii?q?jRd90TsACUkwzbj+hUM58xkvsKhSx6OWPyp3Elyug7jQBw0pG+poSIN2Jt/Keh?=
 =?us-ascii?q?CB5CKjL1f98T+i3qjatGhcmZxYevHpF8GjkRWJvoUOmlEDYTtfThKgaPHycwqn?=
 =?us-ascii?q?adGbrDAwCf7F1qoG7IE5CuL3uXPmUWzc1+RBmBI0xSmAIUUy8/npEnDQCm3tDh?=
 =?us-ascii?q?fF165jAM5V74tx1MxfhzNxTkVmffpQGoaio7SZSFLRpW6B1C6FnRMcCE8u1zGC?=
 =?us-ascii?q?RY9IW7rAORMmybexhIDWYRV02EAFDjI6Cu5cTa/OieHOa+NPzOYbOBqeFFU/eI?=
 =?us-ascii?q?xJSv0pZp/jqWN8WPOGViAOM/2kZZQX95HMHZkS0VSyMLjyLNc9KbpBCk9y13sM?=
 =?us-ascii?q?+/8ffrWAHu5YeVCLtSK9Jv+x+ojqeZKu6Qnz10KTJZ1pMK2H/Jx6IT3F8UiyFy?=
 =?us-ascii?q?aTatFa4MujLKTKLVgqVXFQIUaztvNMtU6KIxxhNCOdPAhdPvyLF5juQ5C1NEVV?=
 =?us-ascii?q?H6nsGpZMoKI3yyNV/dBUaLMqiGKiPPw83tfay8TrhQhv1OtxKsoTabD1PjPjOb?=
 =?us-ascii?q?mjn1VhCvNPtAgz2BMBNCuIGybBBtBHPnTNLnbB27LdB2gSc3wb0ymnPFK2ocPS?=
 =?us-ascii?q?JgfENKq72a9TlYjelnG2xd8nplKvGJmiaD4OneL5YWsP1rDTx1luJa+ns6zbRV?=
 =?us-ascii?q?4TpARPx0nivSs9Fvr0unkumJ1jpoTh5OpixXi4KMuEUxcZneo6VJX3fV9Voh5H?=
 =?us-ascii?q?7YXwgGrsBNAdrjtqlN0N/VneT0MjgUt5rq/NERHMicC9+COWBpZQToAjPPDE0G?=
 =?us-ascii?q?UDuiL0nbhkpUivbU8Wea+MsUsJ/pzaESR6dbWVp9PPQLBgwxB9YFMZtfXT4+l7?=
 =?us-ascii?q?OfyskS6izt/1HqWMxGs8WfBbqpCvL1JWPc1OEcag=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAAAsAwhch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBg2sng3mIGYwOgWglFJc4ggcrAYQ7AwKDEyI0CQ0BAwEBAQEBAQI?=
 =?us-ascii?q?BEwEBAQgNCQgpIwyCNiQBgmEBAQEBAgEBAiAEGQEBNwEEAQkBAQoOCgICJgICA?=
 =?us-ascii?q?0QQBgEXgxyBeggFpQBwfDOCdgEBBYckCIELixMXgUA/gREzgjEuhQGDBIJXiSs?=
 =?us-ascii?q?KhgJ8UIRoim0JkUIYgVuIO4cZiQmPdYFGgg0zGggoCHgLVoFOghsMF4hehWAfM?=
 =?us-ascii?q?oECAwEBIROKKAEB?=
X-IPAS-Result: =?us-ascii?q?A0ANAAAsAwhch0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBg2s?=
 =?us-ascii?q?ng3mIGYwOgWglFJc4ggcrAYQ7AwKDEyI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpI?=
 =?us-ascii?q?wyCNiQBgmEBAQEBAgEBAiAEGQEBNwEEAQkBAQoOCgICJgICA0QQBgEXgxyBegg?=
 =?us-ascii?q?FpQBwfDOCdgEBBYckCIELixMXgUA/gREzgjEuhQGDBIJXiSsKhgJ8UIRoim0Jk?=
 =?us-ascii?q?UIYgVuIO4cZiQmPdYFGgg0zGggoCHgLVoFOghsMF4hehWAfMoECAwEBIROKKAE?=
 =?us-ascii?q?B?=
X-IronPort-AV: E=Sophos;i="5.56,318,1539673200"; 
   d="scan'208";a="53959323"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 05 Dec 2018 09:00:11 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727796AbeLERAI (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 5 Dec 2018 12:00:08 -0500
Received: from mail.kernel.org ([198.145.29.99]:56784 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726918AbeLERAI (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 5 Dec 2018 12:00:08 -0500
Received: from localhost (unknown [104.132.0.74])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 689DD2084C;
        Wed,  5 Dec 2018 17:00:07 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1544029207;
        bh=Tw1pjOzzR3JELLMTEbUNki1sX+wPBmOQPPKoW9OmBOU=;
        h=To:From:In-Reply-To:Cc:References:Subject:Date:From;
        b=GPbWDeJD8A+1/ft1J5lU/91Ww+VbnCYMtEsOV2srFih6hb9Y3DdKR4offBwLQivSV
         cTVuTTx7C+mLTB2B6xtpV3+snYTS6sXpaiSKq870TwdIUyFYOquxMHwQ/VW7tLj0jt
         c1moGzE7dpvsHDOzPF/Sle2jdRk74JZ2E/nQAg1M=
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: quoted-printable
To: Taniya Das <tdas@codeaurora.org>,
        Viresh Kumar <viresh.kumar@linaro.org>
From: Stephen Boyd <sboyd@kernel.org>
In-Reply-To: <20181205061600.7zglbpkgbktn27am@vireshk-i7>
Cc: "Rafael J. Wysocki" <rjw@rjwysocki.net>,
        linux-kernel@vger.kernel.org, linux-pm@vger.kernel.org,
        Rajendra Nayak <rnayak@codeaurora.org>,
        devicetree@vger.kernel.org, robh@kernel.org,
        skannan@codeaurora.org, linux-arm-msm@vger.kernel.org,
        evgreen@google.com
References: <1543722903-10989-1-git-send-email-tdas@codeaurora.org>
 <1543722903-10989-3-git-send-email-tdas@codeaurora.org>
 <20181204051231.mm5ixli7ckpfzvd4@vireshk-i7>
 <154396249199.88331.1800559141437859959@swboyd.mtv.corp.google.com>
 <154396472692.88331.13742924031474269133@swboyd.mtv.corp.google.com>
 <49139ae4-4373-9e70-02ad-80f7bbc4494c@codeaurora.org>
 <20181205061600.7zglbpkgbktn27am@vireshk-i7>
Message-ID: <154402920660.88331.5729780274488650479@swboyd.mtv.corp.google.com>
User-Agent: alot/0.7
Subject: Re: [PATCH v11 2/2] cpufreq: qcom-hw: Add support for QCOM cpufreq HW driver
Date: Wed, 05 Dec 2018 09:00:06 -0800
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Quoting Viresh Kumar (2018-12-04 22:16:00)
> On 05-12-18, 09:07, Taniya Das wrote:
> > Hello Stephen, Viresh
> > =

> > Thanks for the code and suggestions.
> > =

> > Having a NR_DOMAINS '2' makes the driver not scalable for re-use.
> =

> Sure, I didn't like it either and that wasn't really what I was suggestin=
g in
> the first place. I didn't wanted to write the code myself and pass it on,=
 but I
> have it now anyway :)
> =

> It may have a bug or two in there, but compiles just fine and is rebased =
over
> your patch Taniya.

If we move the ioremap of registers to the cpufreq_driver::init path
then we need to unmap it on cpufreq_driver::exit. In fact, all the
devm_*() code in the init path needs to change to non-devm. Otherwise
it's a nice simplification!

> +static int qcom_cpufreq_hw_read_lut(struct device *dev,
> +                                   struct cpufreq_policy *policy,
> +                                   void __iomem *base)
>  {
>         u32 data, src, lval, i, core_count, prev_cc =3D 0, prev_freq =3D =
0, freq;
> -       unsigned int max_cores =3D cpumask_weight(&c->related_cpus);
> +       unsigned int max_cores =3D cpumask_weight(policy->cpus);
> +       struct cpufreq_frequency_table  *table;
>  =

> -       c->table =3D devm_kcalloc(dev, LUT_MAX_ENTRIES + 1,
> -                               sizeof(*c->table), GFP_KERNEL);
> -       if (!c->table)
> +       table =3D devm_kcalloc(dev, LUT_MAX_ENTRIES + 1,
> +                               sizeof(*table), GFP_KERNEL);

This one.

> +       if (!table)
>                 return -ENOMEM;
>  =

>         for (i =3D 0; i < LUT_MAX_ENTRIES; i++) {
> @@ -194,22 +154,29 @@ static void qcom_get_related_cpus(int index, struct=
 cpumask *m)
>         }
>  }
>  =

> -static int qcom_cpu_resources_init(struct platform_device *pdev,
> -                                  unsigned int cpu, int index,
> -                                  unsigned long xo_rate,
> -                                  unsigned long cpu_hw_rate)
> +static int qcom_cpufreq_hw_cpu_init(struct cpufreq_policy *policy)
>  {
> -       struct cpufreq_qcom *c;
> +       struct device *dev =3D &global_pdev->dev;
> +       struct of_phandle_args args;
> +       struct device_node *cpu_np;
>         struct resource *res;
> -       struct device *dev =3D &pdev->dev;
>         void __iomem *base;
> -       int ret, cpu_r;
> +       int ret, index;
>  =

> -       c =3D devm_kzalloc(dev, sizeof(*c), GFP_KERNEL);
> -       if (!c)
> -               return -ENOMEM;
> +       cpu_np =3D of_cpu_device_node_get(policy->cpu);
> +       if (!cpu_np)
> +               return -EINVAL;
> +
> +       ret =3D of_parse_phandle_with_args(cpu_np, "qcom,freq-domain",
> +                       "#freq-domain-cells", 0, &args);
> +       of_node_put(cpu_np);
>  =

> -       res =3D platform_get_resource(pdev, IORESOURCE_MEM, index);
> +       if (ret)
> +               return ret;
> +
> +       index =3D args.args[0];
> +
> +       res =3D platform_get_resource(global_pdev, IORESOURCE_MEM, index);
>         base =3D devm_ioremap_resource(dev, res);

And this one.

>         if (IS_ERR(base))
>                 return PTR_ERR(base);

Here's a patch to squash in to fix those tiny problems. I left it as
devm_ioremap_resource() because that has all the nice features of
resource requesting inside and it didn't seem too bad to devm_iounmap()
on the exit path.

---------8<--------------

 drivers/cpufreq/qcom-cpufreq-hw.c | 37 ++++++++++++++++++++++++++---------=
--
 1 file changed, 26 insertions(+), 11 deletions(-)

diff --git a/drivers/cpufreq/qcom-cpufreq-hw.c b/drivers/cpufreq/qcom-cpufr=
eq-hw.c
index bcf9bb37298a..1e865e216839 100644
--- a/drivers/cpufreq/qcom-cpufreq-hw.c
+++ b/drivers/cpufreq/qcom-cpufreq-hw.c
@@ -10,6 +10,7 @@
 #include <linux/module.h>
 #include <linux/of_address.h>
 #include <linux/of_platform.h>
+#include <linux/slab.h>
 =

 #define LUT_MAX_ENTRIES			40U
 #define LUT_SRC				GENMASK(31, 30)
@@ -77,8 +78,7 @@ static int qcom_cpufreq_hw_read_lut(struct device *dev,
 	unsigned int max_cores =3D cpumask_weight(policy->cpus);
 	struct cpufreq_frequency_table	*table;
 =

-	table =3D devm_kcalloc(dev, LUT_MAX_ENTRIES + 1,
-				sizeof(*table), GFP_KERNEL);
+	table =3D kcalloc(LUT_MAX_ENTRIES + 1, sizeof(*table), GFP_KERNEL);
 	if (!table)
 		return -ENOMEM;
 =

@@ -144,7 +144,7 @@ static void qcom_get_related_cpus(int index, struct cpu=
mask *m)
 =

 		ret =3D of_parse_phandle_with_args(cpu_np, "qcom,freq-domain",
 						 "#freq-domain-cells", 0,
-						  &args);
+						 &args);
 		of_node_put(cpu_np);
 		if (ret < 0)
 			continue;
@@ -170,7 +170,6 @@ static int qcom_cpufreq_hw_cpu_init(struct cpufreq_poli=
cy *policy)
 	ret =3D of_parse_phandle_with_args(cpu_np, "qcom,freq-domain",
 			"#freq-domain-cells", 0, &args);
 	of_node_put(cpu_np);
-
 	if (ret)
 		return ret;
 =

@@ -184,13 +183,15 @@ static int qcom_cpufreq_hw_cpu_init(struct cpufreq_po=
licy *policy)
 	/* HW should be in enabled state to proceed */
 	if (!(readl_relaxed(base + REG_ENABLE) & 0x1)) {
 		dev_err(dev, "Domain-%d cpufreq hardware not enabled\n", index);
-		return -ENODEV;
+		ret =3D -ENODEV;
+		goto error;
 	}
 =

 	qcom_get_related_cpus(index, policy->cpus);
 	if (!cpumask_weight(policy->cpus)) {
 		dev_err(dev, "Domain-%d failed to get related CPUs\n", index);
-		return -ENOENT;
+		ret =3D -ENOENT;
+		goto error;
 	}
 =

 	policy->driver_data =3D base + REG_PERF_STATE;
@@ -198,11 +199,25 @@ static int qcom_cpufreq_hw_cpu_init(struct cpufreq_po=
licy *policy)
 	ret =3D qcom_cpufreq_hw_read_lut(dev, policy, base);
 	if (ret) {
 		dev_err(dev, "Domain-%d failed to read LUT\n", index);
-		return ret;
+		goto error;
 	}
 =

 	policy->fast_switch_possible =3D true;
 =

+	return 0;
+
+error:
+	devm_iounmap(dev, base);
+	return ret;
+}
+
+static int qcom_cpufreq_hw_cpu_exit(struct cpufreq_policy *policy)
+{
+	void __iomem *base =3D policy->driver_data - REG_PERF_STATE;
+
+	kfree(policy->freq_table);
+	devm_iounmap(&global_pdev->dev, base);
+
 	return 0;
 }
 =

@@ -219,6 +234,7 @@ static struct cpufreq_driver cpufreq_qcom_hw_driver =3D=
 {
 	.target_index	=3D qcom_cpufreq_hw_target_index,
 	.get		=3D qcom_cpufreq_hw_get,
 	.init		=3D qcom_cpufreq_hw_cpu_init,
+	.exit		=3D qcom_cpufreq_hw_cpu_exit,
 	.fast_switch    =3D qcom_cpufreq_hw_fast_switch,
 	.name		=3D "qcom-cpufreq-hw",
 	.attr		=3D qcom_cpufreq_hw_attr,
@@ -248,12 +264,11 @@ static int qcom_cpufreq_hw_driver_probe(struct platfo=
rm_device *pdev)
 	ret =3D cpufreq_register_driver(&cpufreq_qcom_hw_driver);
 	if (ret) {
 		dev_err(&pdev->dev, "CPUFreq HW driver failed to register\n");
-		return ret;
+	} else {
+		dev_dbg(&pdev->dev, "QCOM CPUFreq HW driver initialized\n");
 	}
 =

-	dev_dbg(&pdev->dev, "QCOM CPUFreq HW driver initialized\n");
-
-	return 0;
+	return ret;
 }
 =

 static int qcom_cpufreq_hw_driver_remove(struct platform_device *pdev)
