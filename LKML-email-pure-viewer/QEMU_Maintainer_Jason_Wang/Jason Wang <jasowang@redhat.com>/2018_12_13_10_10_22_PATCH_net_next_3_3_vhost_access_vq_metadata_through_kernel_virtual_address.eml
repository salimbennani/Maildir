Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 21:22:12 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 94F5158079C;
	Thu, 13 Dec 2018 02:10:47 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga007-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 13 Dec 2018 02:10:47 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ALJFbIhwE31cnRrPXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e8UKvad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7S60/Vza/4KdxUBLmiD?=
 =?us-ascii?q?kJOSM3/m/UiMNwgrlboAqjqhFk34LYfJuYOOZicq/BYd8XQ3dKUMZLVyxGB4Ox?=
 =?us-ascii?q?d48BAPAaPeZfqYn2ulsBogG4BQmjGejizT1IiWXt3a093eUuCwfG3AM7EtIUrn?=
 =?us-ascii?q?vbsdX1O70OUeyv0KbIyjDDYupQ1Dzg64bIaggsre+QUb90a8bd1EciGx3fglmN?=
 =?us-ascii?q?qoHpIymZ2+UPvmSD8eZsSeaih3Q6pwx/vDSj3Nogh4rHi44P1FzJ9iN0y5svK9?=
 =?us-ascii?q?KiUk50e9ukHYNQty6EM4t2RdsvQ39nuCkk0L0Ko527czYQyJQh2RHfb+aLc4+S?=
 =?us-ascii?q?4hLsTOqRIDF4i2x5eL+nmRq+7UytxvfhWsS6zlpGtDdJn9rQunwX1hHe6NCLSv?=
 =?us-ascii?q?5n8Ueg3TaP2RrT6uZBIU0skarbKpghwqM/l5YKskTMADX2mEPog6+Sb0kk/eap?=
 =?us-ascii?q?6+L5bbX8vZKcKYB0hR/kMqg0mcywH/44Mg4QUGif4+i806fj/ULhTLVQkvI2ir?=
 =?us-ascii?q?XZsIzdJckDoq65AgxV3Zg55xewEjery9AYnXgBLFJYdxOLlYnpO1fSIP/mCfez?=
 =?us-ascii?q?mUijkDBux/reJL3uHo3NLmTfkLfmZbt961RTyAsvzd9F4JJYELEBIO/pVU/3u9?=
 =?us-ascii?q?zVFRs5Mw2yw+b6B9RxzIIeWWSTAqCHNKPeq0OH5uUqI+OUfo8apC79K+Q55/7p?=
 =?us-ascii?q?lXI5m1gdcrez0ZsUb3C4GPJmI0KCbHrog9cBF3oKvwUkQOzrjl2CTSBcZ3KoU6?=
 =?us-ascii?q?0g4TE7DZqsDZ3fSYC1nLyBwCC7E4VMaWBdClCMFnToe5+eW/gWaiKfOcthkj0C?=
 =?us-ascii?q?Vbi8RI4tzxCutAnmy7V5KurY4DEXtZXm1NJt/e3ciQky9SBoD8Say2yNTHt7nm?=
 =?us-ascii?q?USSz8y3aBwu0p9yliY3Kh8gvxYE8FT5vxTXgc7M57c0/J1C9ToVg3dedeJTU6s?=
 =?us-ascii?q?Qs+6DjEpUtIx39gObl5gFNq4kBDMwTCmA78PmLyNH5w77KTc03/1J8Z+znbG0L?=
 =?us-ascii?q?Isj10nQstJKG2nibRz9wnVB47VjUqZk7ymergb3C7I7G2D13aBvFlEUA5sVqXI?=
 =?us-ascii?q?RW0QaVHIrdvn/E/CT6WhCbI8MgRfz86PMa9KatzvjVVbS/bvItXeY2Stm2iuAR?=
 =?us-ascii?q?aE3K+DbI3ve28FxiXSFFAEkxwP/XaBLQU+Giaho2fZDDxyFVLuY1ng8fVkpHO8?=
 =?us-ascii?q?VE80ywCKb0tu17eu/h4VhPqcS+4c374euSchrSl0E0i5397MF9WAoA9hdr1GYd?=
 =?us-ascii?q?wh+FdHyX7ZtwtlM5O6K6BtmFEffBp3vk/0zBp3F5hPntIsrHMpywpyN7mV0FdA?=
 =?us-ascii?q?dzOewJDxNafbKmj0/BCzdaHW3kvS38qR+qcK8P44sUnsvBm1Fko+9HVqy9lU02?=
 =?us-ascii?q?aG6prWFgYTUJLxXVwx9xh1vLzaZig954XJ1XxjK6W0sznC2843C+sh0BqvY9Bf?=
 =?us-ascii?q?MKacHg/oD8IaH9SuKPAtm1WxdBIEPfxd+7QuP8y7cPuKwqirM/h6nDKnlGhI/J?=
 =?us-ascii?q?py0kaR+CViUO7I2JAFzuqc3guGUTf8kVigvtr2mYBCeTEdAG6/xTL4C45WY614?=
 =?us-ascii?q?ZZwLBnu2I82r2tV+gIbgWn5Z9FK5B1IKwtSpeQeUb1Hm2Q1Q1EIXoWGomCeizj?=
 =?us-ascii?q?x0lS0pobSb3CDU3+vicx8HMHZRRGZ+lVfsPZS0j9cCUUiqdQcpjhil5UX9x6RB?=
 =?us-ascii?q?v6RwNWrTQURJfyjwMW5iVLC9tr6DY85J9ZMpvj9bUOW6YVCGVLH9pwEW3D/kH2?=
 =?us-ascii?q?tb3Do7bS2luo3lnxxmj2KQNHZyo2Deec1qxxff5drcSOVV3joHQil4lDbWCkK9?=
 =?us-ascii?q?P9mv4dWbiZPDvvqiWGKmU51ZaTPrwp+YtCun+W1qBgWyn/Opld3mCwQ60TL72M?=
 =?us-ascii?q?NsVSXHtxv8Zojr16KnMeNoZEVoBVn869ZkFYF6iIc/mJYQ2X0CjJWP4XUHiXvz?=
 =?us-ascii?q?Mclc2a/maXoNRD0LzMTP7AnrxkJjNW6JyJzjVnqG3MRhfda6b3gS2iI86cBKFa?=
 =?us-ascii?q?iV4KZFnStzvlq3swbRbeJhkTcazPsk8GQajP0RuAox0iWdBagfHVVfPSzpjRiJ?=
 =?us-ascii?q?7sqxrKNKZGa0ariw1VFzndSgDLGEvwFdV2z1epYkHS9s8Mp/NEjA32H06oHhYN?=
 =?us-ascii?q?PQd84ctgWIkxfciOhYMIk+meANhSpjJGLxp3kly/MggBxq3JG6upWHKmp38KK4?=
 =?us-ascii?q?BB5YKiP6Z8cJ9j7xiqZem96c35qzEZV5BjULQJzoQOqqED0IsPToKR2OHCcgqn?=
 =?us-ascii?q?uBGrrfAAyf6Fpgr33VCJCmLHWXJHgfzdV/SxiRPk1fgAYIXDokmp41DBylxMvk?=
 =?us-ascii?q?cE1h/DAe+kb4qgdQyuJvLxT+UmDfpBqxajcpUpefKgBa7hpF50fTPsyT9eZzHy?=
 =?us-ascii?q?Be/p28ow2BMG2bZwJUDW4XXkyIHUzsPr6r5dPY6eiXGvK+L+fSYbWJseFeV+mH?=
 =?us-ascii?q?xZOs0otl/jaALMaPPmNlD/00xEVDR215G9/CljULSiwXkT/NbsGBqBe9/C13st?=
 =?us-ascii?q?6w8PDxVA3z4ouPDqNYMc9z9BCunaeDK+mQiT5jJjZFzZwM32HHybgF0F4WiiFj?=
 =?us-ascii?q?bD2tEbUGtS7QQ6PcgK5XDxgHayxtMMtE9b4z3g5IOcTDkNP6yqZ4juIpC1dCTV?=
 =?us-ascii?q?HhhsCpZckQL26hLl/IGEaLO6qAJTDQx8H3YKW8SaBfjelOth2wvyqbHFHnPjiZ?=
 =?us-ascii?q?izbpUBWvO/lWjC6HJBxepJ29chF1BGnjVt3mbBi7MN5xjTIuwLw0hmnFNWgTMT?=
 =?us-ascii?q?Vnd0NNr7uQ7T5Xg/llGmxB6GZlIveAmyqD8+bYLZMW4rNXBXFxjP5y+nk2y7JJ?=
 =?us-ascii?q?qipDQbg9miLJqcFnpV6OiOSDyjN7FhFJr3IDh5yOlVttNL+f9ZRaX3vAuhUX4i?=
 =?us-ascii?q?HYFRUQu8ZsDtz9srxRzd7nkKPoNCwE99PS4NtZCc/JLs6OLHsmN1zuAjGQRA0I?=
 =?us-ascii?q?UTKmK0nBiEFH1vKf7HuYqt49sJeo0J4PTKJLEV84DPUXDmx7E9EYZpR6RDUplf?=
 =?us-ascii?q?iclsFby2C5qUzzTd5duNj4X/SdSaHtIS2ekrBCaDMSzL/4JJhVPYr+jR8xImJm?=
 =?us-ascii?q?lZjHThKDFetGpTdsO1c5?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AeAAAsLxJch0O0hNFjHgEGBwaBUQkLA?=
 =?us-ascii?q?YFaghEVEox0jVSXQIF2ERgTAYFLhXgiNAkNAQMBAQEBAQECARMBAQEIDQkIKS+?=
 =?us-ascii?q?CNiKCZQMDAQIkWAkBAVADVAcJCQWCUUuCAQWnUDOKNYw8F4FAP4ERjW4CkESQS?=
 =?us-ascii?q?wmRTgsYiWyHXokukBuBRoIOMxoIGxWDJ4InF44qMgEBMYEFAQEcjDUBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AeAAAsLxJch0O0hNFjHgEGBwaBUQkLAYFaghEVEox0jVS?=
 =?us-ascii?q?XQIF2ERgTAYFLhXgiNAkNAQMBAQEBAQECARMBAQEIDQkIKS+CNiKCZQMDAQIkW?=
 =?us-ascii?q?AkBAVADVAcJCQWCUUuCAQWnUDOKNYw8F4FAP4ERjW4CkESQSwmRTgsYiWyHXok?=
 =?us-ascii?q?ukBuBRoIOMxoIGxWDJ4InF44qMgEBMYEFAQEcjDUBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,348,1539673200"; 
   d="scan'208";a="44799229"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 13 Dec 2018 02:10:45 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728177AbeLMKKm (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 13 Dec 2018 05:10:42 -0500
Received: from mx1.redhat.com ([209.132.183.28]:58672 "EHLO mx1.redhat.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1727721AbeLMKKk (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 13 Dec 2018 05:10:40 -0500
Received: from smtp.corp.redhat.com (int-mx08.intmail.prod.int.phx2.redhat.com [10.5.11.23])
        (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
        (No client certificate requested)
        by mx1.redhat.com (Postfix) with ESMTPS id 658F62D7FB;
        Thu, 13 Dec 2018 10:10:39 +0000 (UTC)
Received: from jason-ThinkPad-T450s.redhat.com (ovpn-12-21.pek2.redhat.com [10.72.12.21])
        by smtp.corp.redhat.com (Postfix) with ESMTP id DFC6719C7E;
        Thu, 13 Dec 2018 10:10:36 +0000 (UTC)
From: Jason Wang <jasowang@redhat.com>
To: mst@redhat.com, jasowang@redhat.com, kvm@vger.kernel.org,
        virtualization@lists.linux-foundation.org, netdev@vger.kernel.org,
        linux-kernel@vger.kernel.org
Subject: [PATCH net-next 3/3] vhost: access vq metadata through kernel virtual address
Date: Thu, 13 Dec 2018 18:10:22 +0800
Message-Id: <20181213101022.12475-4-jasowang@redhat.com>
In-Reply-To: <20181213101022.12475-1-jasowang@redhat.com>
References: <20181213101022.12475-1-jasowang@redhat.com>
X-Scanned-By: MIMEDefang 2.84 on 10.5.11.23
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16 (mx1.redhat.com [10.5.110.30]); Thu, 13 Dec 2018 10:10:39 +0000 (UTC)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

It was noticed that the copy_user() friends that was used to access
virtqueue metdata tends to be very expensive for dataplane
implementation like vhost since it involves lots of software check,
speculation barrier, hardware feature toggling (e.g SMAP). The
extra cost will be more obvious when transferring small packets.

This patch tries to eliminate those overhead by pin vq metadata pages
and access them through vmap(). During SET_VRING_ADDR, we will setup
those mappings and memory accessors are modified to use pointers to
access the metadata directly.

Note, this was only done when device IOTLB is not enabled. We could
use similar method to optimize it in the future.

Tests shows about ~24% improvement on TX PPS when using virtio-user +
vhost_net + xdp1 on TAP (CONFIG_HARDENED_USERCOPY is not enabled):

Before: ~5.0Mpps
After:  ~6.1Mpps

Signed-off-by: Jason Wang <jasowang@redhat.com>
---
 drivers/vhost/vhost.c | 178 ++++++++++++++++++++++++++++++++++++++++++
 drivers/vhost/vhost.h |  11 +++
 2 files changed, 189 insertions(+)

diff --git a/drivers/vhost/vhost.c b/drivers/vhost/vhost.c
index bafe39d2e637..1bd24203afb6 100644
--- a/drivers/vhost/vhost.c
+++ b/drivers/vhost/vhost.c
@@ -443,6 +443,9 @@ void vhost_dev_init(struct vhost_dev *dev,
 		vq->indirect = NULL;
 		vq->heads = NULL;
 		vq->dev = dev;
+		memset(&vq->avail_ring, 0, sizeof(vq->avail_ring));
+		memset(&vq->used_ring, 0, sizeof(vq->used_ring));
+		memset(&vq->desc_ring, 0, sizeof(vq->desc_ring));
 		mutex_init(&vq->mutex);
 		vhost_vq_reset(dev, vq);
 		if (vq->handle_kick)
@@ -614,6 +617,102 @@ static void vhost_clear_msg(struct vhost_dev *dev)
 	spin_unlock(&dev->iotlb_lock);
 }
 
+static int vhost_init_vmap(struct vhost_vmap *map, unsigned long uaddr,
+			   size_t size, int write)
+{
+	struct page **pages;
+	int npages = DIV_ROUND_UP(size, PAGE_SIZE);
+	int npinned;
+	void *vaddr;
+
+	pages = kmalloc_array(npages, sizeof(struct page *), GFP_KERNEL);
+	if (!pages)
+		return -ENOMEM;
+
+	npinned = get_user_pages_fast(uaddr, npages, write, pages);
+	if (npinned != npages)
+		goto err;
+
+	vaddr = vmap(pages, npages, VM_MAP, PAGE_KERNEL);
+	if (!vaddr)
+		goto err;
+
+	map->pages = pages;
+	map->addr = vaddr + (uaddr & (PAGE_SIZE - 1));
+	map->npages = npages;
+
+	return 0;
+
+err:
+	if (npinned > 0)
+		release_pages(pages, npinned);
+	kfree(pages);
+	return -EFAULT;
+}
+
+static void vhost_uninit_vmap(struct vhost_vmap *map)
+{
+	if (!map->addr)
+		return;
+
+	vunmap(map->addr);
+	release_pages(map->pages, map->npages);
+	kfree(map->pages);
+
+	map->addr = NULL;
+	map->pages = NULL;
+	map->npages = 0;
+}
+
+static void vhost_clean_vmaps(struct vhost_virtqueue *vq)
+{
+	vhost_uninit_vmap(&vq->avail_ring);
+	vhost_uninit_vmap(&vq->desc_ring);
+	vhost_uninit_vmap(&vq->used_ring);
+}
+
+static int vhost_setup_vmaps(struct vhost_virtqueue *vq, unsigned long avail,
+			     unsigned long desc, unsigned long used)
+{
+	size_t event = vhost_has_feature(vq, VIRTIO_RING_F_EVENT_IDX) ? 2 : 0;
+	size_t avail_size, desc_size, used_size;
+	int ret;
+
+	vhost_clean_vmaps(vq);
+
+	avail_size = sizeof(*vq->avail) +
+		     sizeof(*vq->avail->ring) * vq->num + event;
+	ret = vhost_init_vmap(&vq->avail_ring, avail, avail_size, false);
+	if (ret) {
+		vq_err(vq, "Fail to setup vmap for avail ring!\n");
+		goto err_avail;
+	}
+
+	desc_size = sizeof(*vq->desc) * vq->num;
+	ret = vhost_init_vmap(&vq->desc_ring, desc, desc_size, false);
+	if (ret) {
+		vq_err(vq, "Fail to setup vmap for desc ring!\n");
+		goto err_desc;
+	}
+
+	used_size = sizeof(*vq->used) +
+		    sizeof(*vq->used->ring) * vq->num + event;
+	ret = vhost_init_vmap(&vq->used_ring, used, used_size, true);
+	if (ret) {
+		vq_err(vq, "Fail to setup vmap for used ring!\n");
+		goto err_used;
+	}
+
+	return 0;
+
+err_used:
+	vhost_uninit_vmap(&vq->used_ring);
+err_desc:
+	vhost_uninit_vmap(&vq->avail_ring);
+err_avail:
+	return -EFAULT;
+}
+
 void vhost_dev_cleanup(struct vhost_dev *dev)
 {
 	int i;
@@ -626,6 +725,7 @@ void vhost_dev_cleanup(struct vhost_dev *dev)
 		if (dev->vqs[i]->call_ctx)
 			eventfd_ctx_put(dev->vqs[i]->call_ctx);
 		vhost_vq_reset(dev, dev->vqs[i]);
+		vhost_clean_vmaps(dev->vqs[i]);
 	}
 	vhost_dev_free_iovecs(dev);
 	if (dev->log_ctx)
@@ -873,6 +973,14 @@ static inline void __user *__vhost_get_user(struct vhost_virtqueue *vq,
 
 static inline int vhost_put_avail_event(struct vhost_virtqueue *vq)
 {
+	if (!vq->iotlb) {
+		struct vring_used *used = vq->used_ring.addr;
+
+		*((__virtio16 *)&used->ring[vq->num]) =
+			cpu_to_vhost16(vq, vq->avail_idx);
+		return 0;
+	}
+
 	return vhost_put_user(vq, cpu_to_vhost16(vq, vq->avail_idx),
 			      vhost_avail_event(vq));
 }
@@ -881,6 +989,13 @@ static inline int vhost_put_used(struct vhost_virtqueue *vq,
 				 struct vring_used_elem *head, int idx,
 				 int count)
 {
+	if (!vq->iotlb) {
+		struct vring_used *used = vq->used_ring.addr;
+
+		memcpy(used->ring + idx, head, count * sizeof(*head));
+		return 0;
+	}
+
 	return vhost_copy_to_user(vq, vq->used->ring + idx, head,
 				  count * sizeof(*head));
 }
@@ -888,6 +1003,13 @@ static inline int vhost_put_used(struct vhost_virtqueue *vq,
 static inline int vhost_put_used_flags(struct vhost_virtqueue *vq)
 
 {
+	if (!vq->iotlb) {
+		struct vring_used *used = vq->used_ring.addr;
+
+		used->flags = cpu_to_vhost16(vq, vq->used_flags);
+		return 0;
+	}
+
 	return vhost_put_user(vq, cpu_to_vhost16(vq, vq->used_flags),
 			      &vq->used->flags);
 }
@@ -895,6 +1017,13 @@ static inline int vhost_put_used_flags(struct vhost_virtqueue *vq)
 static inline int vhost_put_used_idx(struct vhost_virtqueue *vq)
 
 {
+	if (!vq->iotlb) {
+		struct vring_used *used = vq->used_ring.addr;
+
+		used->idx = cpu_to_vhost16(vq, vq->last_used_idx);
+		return 0;
+	}
+
 	return vhost_put_user(vq, cpu_to_vhost16(vq, vq->last_used_idx),
 			      &vq->used->idx);
 }
@@ -926,12 +1055,26 @@ static inline int vhost_put_used_idx(struct vhost_virtqueue *vq)
 static inline int vhost_get_avail_idx(struct vhost_virtqueue *vq,
 				      __virtio16 *idx)
 {
+	if (!vq->iotlb) {
+		struct vring_avail *avail = vq->avail_ring.addr;
+
+		*idx = avail->idx;
+		return 0;
+	}
+
 	return vhost_get_avail(vq, *idx, &vq->avail->idx);
 }
 
 static inline int vhost_get_avail_head(struct vhost_virtqueue *vq,
 				       __virtio16 *head, int idx)
 {
+	if (!vq->iotlb) {
+		struct vring_avail *avail = vq->avail_ring.addr;
+
+		*head = avail->ring[idx & (vq->num - 1)];
+		return 0;
+	}
+
 	return vhost_get_avail(vq, *head,
 			       &vq->avail->ring[idx & (vq->num - 1)]);
 }
@@ -939,24 +1082,52 @@ static inline int vhost_get_avail_head(struct vhost_virtqueue *vq,
 static inline int vhost_get_avail_flags(struct vhost_virtqueue *vq,
 					__virtio16 *flags)
 {
+	if (!vq->iotlb) {
+		struct vring_avail *avail = vq->avail_ring.addr;
+
+		*flags = avail->flags;
+		return 0;
+	}
+
 	return vhost_get_avail(vq, *flags, &vq->avail->flags);
 }
 
 static inline int vhost_get_used_event(struct vhost_virtqueue *vq,
 				       __virtio16 *event)
 {
+	if (!vq->iotlb) {
+		struct vring_avail *avail = vq->avail_ring.addr;
+
+		*event = (__virtio16)avail->ring[vq->num];
+		return 0;
+	}
+
 	return vhost_get_avail(vq, *event, vhost_used_event(vq));
 }
 
 static inline int vhost_get_used_idx(struct vhost_virtqueue *vq,
 				     __virtio16 *idx)
 {
+	if (!vq->iotlb) {
+		struct vring_used *used = vq->used_ring.addr;
+
+		*idx = used->idx;
+		return 0;
+	}
+
 	return vhost_get_used(vq, *idx, &vq->used->idx);
 }
 
 static inline int vhost_get_desc(struct vhost_virtqueue *vq,
 				 struct vring_desc *desc, int idx)
 {
+	if (!vq->iotlb) {
+		struct vring_desc *d = vq->desc_ring.addr;
+
+		*desc = *(d + idx);
+		return 0;
+	}
+
 	return vhost_copy_from_user(vq, desc, vq->desc + idx, sizeof(*desc));
 }
 
@@ -1551,6 +1722,13 @@ long vhost_vring_ioctl(struct vhost_dev *d, unsigned int ioctl, void __user *arg
 			}
 		}
 
+		if (!vq->iotlb && vhost_setup_vmaps(vq, a.avail_user_addr,
+							a.desc_user_addr,
+							a.used_user_addr)) {
+			r = -EINVAL;
+			break;
+		}
+
 		vq->log_used = !!(a.flags & (0x1 << VHOST_VRING_F_LOG));
 		vq->desc = (void __user *)(unsigned long)a.desc_user_addr;
 		vq->avail = (void __user *)(unsigned long)a.avail_user_addr;
diff --git a/drivers/vhost/vhost.h b/drivers/vhost/vhost.h
index 466ef7542291..89dc0ad3d055 100644
--- a/drivers/vhost/vhost.h
+++ b/drivers/vhost/vhost.h
@@ -80,6 +80,12 @@ enum vhost_uaddr_type {
 	VHOST_NUM_ADDRS = 3,
 };
 
+struct vhost_vmap {
+	struct page **pages;
+	void *addr;
+	int npages;
+};
+
 /* The virtqueue structure describes a queue attached to a device. */
 struct vhost_virtqueue {
 	struct vhost_dev *dev;
@@ -90,6 +96,11 @@ struct vhost_virtqueue {
 	struct vring_desc __user *desc;
 	struct vring_avail __user *avail;
 	struct vring_used __user *used;
+
+	struct vhost_vmap avail_ring;
+	struct vhost_vmap desc_ring;
+	struct vhost_vmap used_ring;
+
 	const struct vhost_umem_node *meta_iotlb[VHOST_NUM_ADDRS];
 	struct file *kick;
 	struct eventfd_ctx *call_ctx;
-- 
2.17.1

