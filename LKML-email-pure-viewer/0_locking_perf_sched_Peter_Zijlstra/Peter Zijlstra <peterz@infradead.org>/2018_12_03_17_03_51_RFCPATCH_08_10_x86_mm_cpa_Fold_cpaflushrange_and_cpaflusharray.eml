Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 04 Dec 2018 08:55:42 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id B6ABC58014B;
	Mon,  3 Dec 2018 09:15:08 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga006-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 03 Dec 2018 09:15:08 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AKAoCYxebaN0j/mhAWnhGwVwGlGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc6+YBKN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4qF2QxHqlS?=
 =?us-ascii?q?gHLSY0/mLZhcJ+jKxVvg+vpxJwzIHIe4GVLPhzc7jBfd8GS2dNQtpdWjZDD466?=
 =?us-ascii?q?coABD/ABPeFdr4TlvVUBswe+Che2BOjyyTBIh3323akh0+Q9CwHJxhErEtUWsH?=
 =?us-ascii?q?vKsNX6Kr0SUOGuwanJyzXDYelW1i3g54fWaB8uvOuAXbVqccre0EQiER7OgFaI?=
 =?us-ascii?q?qYH9IT+ZyuAAv3KG4+duS+6jkXMrpgJtrjS1x8ohiJHFipwax1ze6Cl0zpg5Kc?=
 =?us-ascii?q?emREJmY9OoCoZcuz2GO4ZwX8gsWXtnuDwgxb0DoZO7fDYFyJAgxxPHdfyHfJaH?=
 =?us-ascii?q?4gj5WOaSPzh4nnRld6y7hxqo9kig0OL8WtG10FZMsCVFjsHBum4R2xHX8MSLV/?=
 =?us-ascii?q?Vw8lm71TqS1A3f9vtILEE2mKbDLp4u2L8wlp4dsUTZGS/2nV37jKuXdkUi5+ip?=
 =?us-ascii?q?5P3rYrb4qZ+GMY97lAX+Pr0pms2xB+Q3LBIOUnOF+eSzyrLj51f1QLZUgf0slK?=
 =?us-ascii?q?nWrpTaKd4cpq6jDA9Zypwj5AqnDze6zNQYmmEKLFZEeBKEkYflIV7PIO3jAPe7?=
 =?us-ascii?q?glSsliprxv/cMr3gBJXNMmbMkLP7cblh7E5czRI5zcpD6JJMFrEBPPXzV1fxtN?=
 =?us-ascii?q?PCDx85Lxa7w+H9BNV9y4MRQ2SPAqCCPaPWsF+I4P8vIuaWaI8Uvjb9N+Yq5/r0?=
 =?us-ascii?q?gXAlnl8deLGj3YELZ3CgAvRmP0KZbGLugtcGD2gGpAk+TOvsiF2EVj5efHKyX6?=
 =?us-ascii?q?M65jEmB4OqF4bDRoaxgLOf2Ce3BIFZZmdDClqUC3fna52EW+sQaCKVOsJuiCcE?=
 =?us-ascii?q?VbimS48izx2urhX1y7h8I+rQ+y0Ys4/j1ddv6+3SkxEy6SJ7D8CH326RSGF0m3?=
 =?us-ascii?q?sCRyUq06BnvUx91lCD3LB7g/NCE9xf/fdJUgYgOp7awOx3ENTyWgPHfteUR1eq?=
 =?us-ascii?q?WNSmATctTt0vx98CeVpyG9KnjhrbxSqlH6cVl6CXBJwz6q/TwmL+J9hjxHrc1K?=
 =?us-ascii?q?kulV8mQtBROm2ggaJ/8wvTB4vNk0iCk6aqdKIc3DPC9WuZzGqOul1YXxB0Uanf?=
 =?us-ascii?q?QX8fYU7Wp8zj5kzeV7+uFagnMgxZxMGfMKRKdMPmgU9GRPj5PtTeeHy+m2GrCB?=
 =?us-ascii?q?aMx7OMapfqemoH0CXcDkgEjx4c/XKcOQciASehpnrUDCZyGlL3f0Ps7e5+pWun?=
 =?us-ascii?q?Tk81ygGKaFFh17q1+xIPmfyQUfQT3qgAuCcgrTV0E02w39bXC9qGugpgc79QYd?=
 =?us-ascii?q?I74Fdby23ZsxZxMYCnL6BnnlQeaRh4v1vy1xVrDYVNidIlrHc0wwt9N62Z0ElN?=
 =?us-ascii?q?eCiF3Z/tILLXLGry/Bexa6PN3lHe0dCW+roA6fgiqlXjuh2pGVQm83l9z9ZV1H?=
 =?us-ascii?q?6c7I3QDAUOSZLxTlo39x9iqrDafykx/Z/b2WdtMKm0qDDC3d0pCfAhyhaheddf?=
 =?us-ascii?q?LayFGBXzE80cG8ihNugql0K1YRIDOeBY7LQ0MN++d/uaxK6rO/5tnCinjWtb+o?=
 =?us-ascii?q?99yF+D9y1mRu7OwZkF2fCY0hKbWDjmiFeur974mZpDZTEUBWe/zSnkBIhMZqx9?=
 =?us-ascii?q?Z4oLCGGuI9GpydV6nZLiR3lY9Fu7DVMcxMCpYQaSb0D63QBI1UUXoGarmCuiwz?=
 =?us-ascii?q?xvjjEpqLGS3CjPw+TkaRoGNXRHRGhkjVfwP4e0i8oWU1SvbwgsjBGl/1r1x7BH?=
 =?us-ascii?q?pKRjKGneWUVIcDLsL2FhUauwsaCOY9VV55MrsiVXUeK8bk6cSrPmpxsa0iXjH3?=
 =?us-ascii?q?ZRxTwhdjGqvIn5kAJ+iG6HMHlzq3/Zc9lqxRjD/NzcWeJR3j0eSSh4kzbXAUKw?=
 =?us-ascii?q?P9uo/dWSjJrDtuG+V2S8VpxcayXrzIWAtDel6m1uGxGwg/ezmtj/GwggzSD7z8?=
 =?us-ascii?q?VqVTnPrBvkYYnkzaW6Pfhnfkl1HlD87cV6F5p6kosxgpEQxHcbio+U/XoBjWf8?=
 =?us-ascii?q?L9Fb1bjiY3oKQD4B28TV7xT92E1/MnKJwJr0VnCcwstifda2eG0X1Twm78BWFq?=
 =?us-ascii?q?iU9qdLkjVvolq3tg/RZfl9njEAyfoh8nIagucJuBYzwSWZGLwdAU5YPSn0nRSS?=
 =?us-ascii?q?89++tLlXZHqocbWoyEp+mtWhAKuDow5GXnb5Z4wiHTRx7shkNFLM0Xvz6pzred?=
 =?us-ascii?q?XKbNITsAGUnAnEj+RPNJ0xkf8KjzJ9OW3hpX0l1/I7jRt20J6hpoeHLGFt/L+j?=
 =?us-ascii?q?Dh5cKz34fMcT+jDrjaZDkceaxYGvHpN9GjoVWJvkV+6nEDUXtf7/LQaBDCU8qm?=
 =?us-ascii?q?uHGbrYBQKf6l1pr3fRHJCwLX2XOGMVzdZ/RBmeOUxfhhobXC4hk549FwCqwtHh?=
 =?us-ascii?q?cUhj6jAQ4F74tgVDyuZyOxbjVWffoR+iai0oR5iHMBpW8gZC6l/VMMyZ8+JzBj?=
 =?us-ascii?q?xY8YenrACXMWybYAJIDW4SV0yABlDjOKSu5Nba/+iZAOq+M+XBYbGUpeNCUPeI?=
 =?us-ascii?q?wIql0pF68DaUKsWPIn5iAuU72kVdXHB5GMfZmzQVRywUjSLNaMGbqwmm+i1qtc?=
 =?us-ascii?q?Cy6/DrWAPp5YuSBLpeK9Rv+xaqgaidM+6cnjp2KTFd1pkU33/H1KAf3EIOiyFp?=
 =?us-ascii?q?bzSiC6kAujXXTK3Omq5bFRobayJoOctM7qI82BRNOMHBhtP00L54kuA6C1NfWV?=
 =?us-ascii?q?P9ncGpYNQAI3uhO1PfGEaLKLOGKCXXw8H2ZKOwU6FfgP9IuB2wpzmbFVTuPjCC?=
 =?us-ascii?q?lznvShCuPvtAjCCdPBxCpo69dgxhBnTkTNLjche7KsN4jSUqwb0ogXPHLW4dPi?=
 =?us-ascii?q?J6c0NIr72Q6ztXg/R/G2Nb6HplIvKJmyKY7+neN5YXvuFnAiVyl+JG/ns6z6FZ?=
 =?us-ascii?q?4z1DRPxwy2PuqYtiqk+r1OmGzCFqVjJPrCpGgMSAukAmcaHE6p5oWnve+h8Jq2?=
 =?us-ascii?q?KKBFBCv9Z5B8f9k6FWxMLGmK/6JHFF6d2H09EbAp3sJd6KKjITMBjtAyLOBUNR?=
 =?us-ascii?q?VTO3OHvNr01bnuub+nCcot49sJe6y8lGcaNSSFFgTqBSMU9iBtFXeJo=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A4AABaYwVch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUwUBAQsBAYNqFRKDeYh3iy2CIZc0gXMsEwGICSI2Bw0BAwEBAQEBAQIBEwE?=
 =?us-ascii?q?BAQoLCQgpIwxCARABgWIigmUDAwECIAQZAQE3AQUJAQEkAgUhAgIDDB0rBxIFg?=
 =?us-ascii?q?xyCAgWlFnB8DCeCdgEBBYJEhFgIgQuLEReBQD+BEYsXgleJDiSXBgoJgiOPDiO?=
 =?us-ascii?q?RJQEsiFiRNg2BeU0wCIMnghsMF4hehUA/MoEFAQGFQIUXAQE?=
X-IPAS-Result: =?us-ascii?q?A0A4AABaYwVch0O0hNFjHAEBAQQBAQcEAQGBUwUBAQsBAYN?=
 =?us-ascii?q?qFRKDeYh3iy2CIZc0gXMsEwGICSI2Bw0BAwEBAQEBAQIBEwEBAQoLCQgpIwxCA?=
 =?us-ascii?q?RABgWIigmUDAwECIAQZAQE3AQUJAQEkAgUhAgIDDB0rBxIFgxyCAgWlFnB8DCe?=
 =?us-ascii?q?CdgEBBYJEhFgIgQuLEReBQD+BEYsXgleJDiSXBgoJgiOPDiORJQEsiFiRNg2Be?=
 =?us-ascii?q?U0wCIMnghsMF4hehUA/MoEFAQGFQIUXAQE?=
X-IronPort-AV: E=Sophos;i="5.56,311,1539673200"; 
   d="scan'208";a="65074956"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 03 Dec 2018 09:15:06 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727055AbeLCRPD (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 3 Dec 2018 12:15:03 -0500
Received: from merlin.infradead.org ([205.233.59.134]:36690 "EHLO
        merlin.infradead.org" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726998AbeLCROr (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 3 Dec 2018 12:14:47 -0500
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
        d=infradead.org; s=merlin.20170209; h=Content-Type:MIME-Version:References:
        Subject:Cc:To:From:Date:Message-Id:Sender:Reply-To:Content-Transfer-Encoding:
        Content-ID:Content-Description:Resent-Date:Resent-From:Resent-Sender:
        Resent-To:Resent-Cc:Resent-Message-ID:In-Reply-To:List-Id:List-Help:
        List-Unsubscribe:List-Subscribe:List-Post:List-Owner:List-Archive;
        bh=86ctNEwtySJGrtRpJrRdK01iee/o4tYWrfB/fsmXXwY=; b=o22thSot/94TmQK6F1abfJ80zH
        wchA/biJuN+o4aX0dhHd17mPRDQlTjSHq0Nl0j79EAB8+NqcikrWJcd21PK4MdXrE/68UGw7EzhcI
        g1SahObI3zkrTm/tpG/ogFNlM5ic1k6gj9rvaumd2fqh62LxvAHgyYqIUpHA7cCNCWzpQjTgJ06Z5
        5yhwuC+iIWGmIN/X/ZUfEtftqsoqB3iR8K6rXN+ol4ABReUmjQQZX2IPu9prLsouNU1eebKLFuaJ8
        kEEXq/ToyFI3bacriwgwpD8bpK9hSPQUvitsEzraJHhG+svfHXRkF+RsjLcS3MTIf2zzQ/RmlYE/A
        cleDWxdw==;
Received: from j217100.upc-j.chello.nl ([24.132.217.100] helo=hirez.programming.kicks-ass.net)
        by merlin.infradead.org with esmtpsa (Exim 4.90_1 #2 (Red Hat Linux))
        id 1gTrni-0001H8-1F; Mon, 03 Dec 2018 17:14:39 +0000
Received: by hirez.programming.kicks-ass.net (Postfix, from userid 0)
        id 2FCD92029F4CB; Mon,  3 Dec 2018 18:14:26 +0100 (CET)
Message-Id: <20181203171043.559855600@infradead.org>
User-Agent: quilt/0.65
Date: Mon, 03 Dec 2018 18:03:51 +0100
From: Peter Zijlstra <peterz@infradead.org>
To: dave.hansen@intel.com, luto@kernel.org, peterz@infradead.org
Cc: x86@kernel.org, Tom.StDenis@amd.com, linux-kernel@vger.kernel.org
Subject: [RFC][PATCH 08/10] x86/mm/cpa: Fold cpa_flush_range() and cpa_flush_array()
References: <20181203170343.054618965@infradead.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Note that the cache flush loop in cpa_flush_*() is identical when we
use __cpa_addr(); further observe that flush_tlb_kernel_range() is a
special case of to the cpa_flush_array() TLB invalidation code.

This then means the two functions are virtually identical. Fold these
two functions into a single cpa_flush() call.

Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
---
 arch/x86/mm/pageattr.c |   92 +++++++++----------------------------------------
 1 file changed, 18 insertions(+), 74 deletions(-)

--- a/arch/x86/mm/pageattr.c
+++ b/arch/x86/mm/pageattr.c
@@ -304,51 +304,7 @@ static void cpa_flush_all(unsigned long
 	on_each_cpu(__cpa_flush_all, (void *) cache, 1);
 }
 
-static bool __inv_flush_all(int cache)
-{
-	BUG_ON(irqs_disabled() && !early_boot_irqs_disabled);
-
-	if (cache && !static_cpu_has(X86_FEATURE_CLFLUSH)) {
-		cpa_flush_all(cache);
-		return true;
-	}
-
-	return false;
-}
-
-static void cpa_flush_range(unsigned long start, int numpages, int cache)
-{
-	unsigned int i, level;
-	unsigned long addr;
-
-	WARN_ON(PAGE_ALIGN(start) != start);
-
-	if (__inv_flush_all(cache))
-		return;
-
-	flush_tlb_kernel_range(start, start + PAGE_SIZE * numpages);
-
-	if (!cache)
-		return;
-
-	/*
-	 * We only need to flush on one CPU,
-	 * clflush is a MESI-coherent instruction that
-	 * will cause all other CPUs to flush the same
-	 * cachelines:
-	 */
-	for (i = 0, addr = start; i < numpages; i++, addr += PAGE_SIZE) {
-		pte_t *pte = lookup_address(addr, &level);
-
-		/*
-		 * Only flush present addresses:
-		 */
-		if (pte && (pte_val(*pte) & _PAGE_PRESENT))
-			clflush_cache_range((void *) addr, PAGE_SIZE);
-	}
-}
-
-void __cpa_flush_array(void *data)
+void __cpa_flush_tlb(void *data)
 {
 	struct cpa_data *cpa = data;
 	unsigned int i;
@@ -357,33 +313,31 @@ void __cpa_flush_array(void *data)
 		__flush_tlb_one_kernel(__cpa_addr(cpa, i));
 }
 
-static void cpa_flush_array(struct cpa_data *cpa, int cache)
+static void cpa_flush(struct cpa_data *data, int cache)
 {
+	struct cpa_data *cpa = data;
 	unsigned int i;
 
-	if (cpa_check_flush_all(cache))
+	BUG_ON(irqs_disabled() && !early_boot_irqs_disabled);
+
+	if (cache && !static_cpu_has(X86_FEATURE_CLFLUSH)) {
+		cpa_flush_all(cache);
 		return;
+	}
 
 	if (cpa->numpages <= tlb_single_page_flush_ceiling)
-		on_each_cpu(__cpa_flush_array, cpa, 1);
+		on_each_cpu(__cpa_flush_tlb, cpa, 1);
 	else
 		flush_tlb_all();
 
 	if (!cache)
 		return;
 
-	/*
-	 * We only need to flush on one CPU,
-	 * clflush is a MESI-coherent instruction that
-	 * will cause all other CPUs to flush the same
-	 * cachelines:
-	 */
 	for (i = 0; i < cpa->numpages; i++) {
 		unsigned long addr = __cpa_addr(cpa, i);
 		unsigned int level;
-		pte_t *pte;
 
-		pte = lookup_address(addr, &level);
+		pte_t *pte = lookup_address(addr, &level);
 
 		/*
 		 * Only flush present addresses:
@@ -1698,7 +1652,6 @@ static int change_page_attr_set_clr(unsi
 {
 	struct cpa_data cpa;
 	int ret, cache, checkalias;
-	unsigned long baddr = 0;
 
 	memset(&cpa, 0, sizeof(cpa));
 
@@ -1732,11 +1685,6 @@ static int change_page_attr_set_clr(unsi
 			 */
 			WARN_ON_ONCE(1);
 		}
-		/*
-		 * Save address for cache flush. *addr is modified in the call
-		 * to __change_page_attr_set_clr() below.
-		 */
-		baddr = make_addr_canonical_again(*addr);
 	}
 
 	/* Must avoid aliasing mappings in the highmem code */
@@ -1784,11 +1732,7 @@ static int change_page_attr_set_clr(unsi
 		goto out;
 	}
 
-	if (cpa.flags & (CPA_PAGES_ARRAY | CPA_ARRAY))
-		cpa_flush_array(&cpa, cache);
-	else
-		cpa_flush_range(baddr, numpages, cache);
-
+	cpa_flush(&cpa, cache);
 out:
 	return ret;
 }
@@ -2097,18 +2041,18 @@ static int __set_memory_enc_dec(unsigned
 	/*
 	 * Before changing the encryption attribute, we need to flush caches.
 	 */
-	cpa_flush_range(addr, numpages, 1);
+	cpa_flush(&cpa, 1);
 
 	ret = __change_page_attr_set_clr(&cpa, 1);
 
 	/*
-	 * After changing the encryption attribute, we need to flush TLBs
-	 * again in case any speculative TLB caching occurred (but no need
-	 * to flush caches again).  We could just use cpa_flush_all(), but
-	 * in case TLB flushing gets optimized in the cpa_flush_range()
-	 * path use the same logic as above.
+	 * After changing the encryption attribute, we need to flush TLBs again
+	 * in case any speculative TLB caching occurred (but no need to flush
+	 * caches again).  We could just use cpa_flush_all(), but in case TLB
+	 * flushing gets optimized in the cpa_flush() path use the same logic
+	 * as above.
 	 */
-	cpa_flush_range(addr, numpages, 0);
+	cpa_flush(&cpa, 0);
 
 	return ret;
 }


