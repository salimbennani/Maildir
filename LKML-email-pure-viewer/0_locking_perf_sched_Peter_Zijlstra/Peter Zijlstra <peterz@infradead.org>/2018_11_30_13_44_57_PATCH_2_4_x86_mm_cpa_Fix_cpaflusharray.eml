Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:18:34 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id A039B580224;
	Fri, 30 Nov 2018 06:06:44 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga002-1.jf.intel.com with ESMTP; 30 Nov 2018 06:06:44 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AlpW5UB8UPXWWp/9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1+4eIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDwULs6Wymt771zRRHrhi?=
 =?us-ascii?q?gJOT43/n/KhMx+g61UvA+upwdnw4PWe4yVKOZyc63Bcd8GX2dMXMBcXDFBDIOm?=
 =?us-ascii?q?aIsPCvIMM/xGoInhuVQOtwa1CgqtBOPtzj9InWP23bcg3O88FgzGxBIvH84Qv3?=
 =?us-ascii?q?TOrdT4L6YSUea7zKnS1zrMcu1Z1i3g54TSdRAhu/6MUKt2fMHMykcvDxvIgkuM?=
 =?us-ascii?q?pYHhJT+Zy+oAv3aB4+Z9Vu+jl3QrpgBzrzS32MshhZPFip8bx1za7yl13ps5KN?=
 =?us-ascii?q?+iREJmfdKoDJ1dvDyAOYRsWMMtWWRotT46yrIYvZ67ezAHyIooxxHBcfyLaYuI?=
 =?us-ascii?q?7Qz5VOaXPzh4gGhpeLWlhxa96USgy+v8Wdeo0FtSsCZJjt3BumoQ2xHd9MSLUO?=
 =?us-ascii?q?Zx80S91TqV1g3e6PlIIUUumqraL54hzKQwlp0WsUnbGi/2mUP2jLKZd0k9+ein?=
 =?us-ascii?q?9f7nYrP4qZ+YLoN0jQ//MqIwlcylGuk4LAcOUHaB+eim173s41f5QLNUgf0yiK?=
 =?us-ascii?q?XZt4raJcsDqq6jHwBVypoj6wq4Dzq+1NQYnHoHI0xfdBOIkojkIFXOIPH+Dfei?=
 =?us-ascii?q?jFWgijZrx/baPrL/BpXBNGTMkLDkfbxl8U5T1BIzzcxD55JTErwBIOj8Wk7ttN?=
 =?us-ascii?q?PCCR81KQy0w/v9B9V72YMTQmaPAq6fMKPPvl6E/OMvI++QZIALvDbxMeQq5/nr?=
 =?us-ascii?q?jXUhg18SYbGp3YcLaHC/BvlmIUKZbmT2jtcCFmcKuAw+TOvxhV2GUD5TYWuyXq?=
 =?us-ascii?q?0m6jE6DoKmEZnMRoS3jLOd2ye7G4VcZnpaBVCUDXfoa4KEVu8WZyKJIs9hlT8E?=
 =?us-ascii?q?WaK7S4A71xGjrwv6y7thLurJ9SwUr5Pj1N5p5+LNkRE+7yB7D8OY02uVVWF7gn?=
 =?us-ascii?q?sIRyMq3KB4uUF9yU2M0a5ij/xcFNxc/fVJUgghOJ7Yzux6Dc3yWw3bcteITlam?=
 =?us-ascii?q?XsupATUrQt0txN8OZl53G8++gRDbwyqqH7gVmqSWC5Mu7KLTwWL9J8ZnxHbAz6?=
 =?us-ascii?q?kukV8mTsxLNW2lg65/8xPeB4rIk0Wfiqarer4Q3C/L9Gef02WOuFtUXxJ3UaXA?=
 =?us-ascii?q?RXoffFfZrczl5kPeSL+jEakoPRFfycGcMKdKasfmjVNdRPj9PtTTeGaxm2a2BR?=
 =?us-ascii?q?aVybKAdovqe2MB3CrDDEgIiRwc/XGDNQImHCeuv3reDCByFVLoe07s7eh+qHa8?=
 =?us-ascii?q?Tk8ozwGLb1dt16av9h4Sn/ycT/IT3rQLuCo6rzV0HVC938/ZCtaapgpherlcbs?=
 =?us-ascii?q?054FtdyW3ZsAl9NIS6L69+nl4ebxh3v0T22hptDoVPj8cro20qzQZoMq2YzU5O?=
 =?us-ascii?q?eCme3ZDzPb3XNHL//BSua67Qx1Hf38ya+qYJ6PQktVrjuBulGVYl83Viy9NVyW?=
 =?us-ascii?q?eT5o3WDAoOVpL8SkY29wVgq77GeCU85oPU2mdqMam7qTLC39MpBO04yhevZdtf?=
 =?us-ascii?q?MaWEFBPsHM0eHcShNOsqm12xZBIeIO9S7LI0P9+hd/aewq6rPfpvkyi8jWta54?=
 =?us-ascii?q?BxyESM+DRmSu7JxpoK3+uX3g+aWDjillehtcb3lJtAZTETGGq/1CflCJRQZq10?=
 =?us-ascii?q?YYYEF2OuL9erydV5gp7nQ2RY+0K7B1MaxM+pfgKfblz83QFK1UUbu2enmTa+zz?=
 =?us-ascii?q?FvlzEpr6yf3DHBwuj4dRoHPHJLS3dmjVv2PYe0iNUaVlCybwc1jBul+Vr6x69D?=
 =?us-ascii?q?qaR9NWbTW0RIfyvxL214Sau/rLmCY81O6JMurypXVv+xYVSbSr77vhsb3DnvH2?=
 =?us-ascii?q?pYxDAnaT6qvo/1kAB9iGKYNHxztmbWedlsxRfD49zRXf5Q0SABRCViiznXB168?=
 =?us-ascii?q?MsKt/dWVkZfDr++/W3igVp1VbSnk04eAuDGn6m1tBB21h+qzlcH/EQgmzS/70M?=
 =?us-ascii?q?FnVSbSoxb9eIXr17m6PvhhfklnH1L878t6Godjkoo/np0Q2H4ahomL8noDi2v8?=
 =?us-ascii?q?LdJb2afmZnoXWTEL28LV4BTi2EB7K3KJxoH5WW+Hzspveda6eX8W1Twn789RFq?=
 =?us-ascii?q?iU9rNEkDBxolq5qwLRfPd8ki0cyfso9H4VneUJtBAxwSWaB7AYBVNYMjD0lxSU?=
 =?us-ascii?q?89C+q71aZHqocbi1zkZ/nMquDLefogFHQ3b5e4wvHStx7sV5LVLN32f/6oDieN?=
 =?us-ascii?q?nMc90TsgeYnAvHj+hQMJgxjOYFhTJ7OWLhun0o0/U0ggZp3ZG+oYiLMWFt/L+i?=
 =?us-ascii?q?Dx5cNz31Yd4T+z73gaZfmMaWw56gHpF7FjoXW5voSOqiECgOuvT/KwaODDo8p2?=
 =?us-ascii?q?+ZGbXFGA+Q9lxmo2jTE5yxNHGXOXoZzchkRBaHP0xSmwQUXDQ8np4kGQGm3s3h?=
 =?us-ascii?q?cEFl5j8P4l70sAdDyuVtNxPnSGfQuB+oaisoSJiYNBdX7gZC51rMMcyD9O1zGT?=
 =?us-ascii?q?tU/oamrAyLJWyWfABIDWAPWkyZCFHvJLiu5d/c8+eGAuqyNefBYbKLqeZGTfeH?=
 =?us-ascii?q?2Yqv0pd6/zaLLsiPPmdtD/w42kpAXHB1AcfZmy8ISywYiS3NddObpAyn9y1zr8?=
 =?us-ascii?q?C/9unrWQ316YuODbtSLctg+xSsjaifMO6QgT5zKSxE2ZMU2X/I1L8f0UYIhCFz?=
 =?us-ascii?q?bDatC6oPtC7XQKLUm69aFBobayJ1NMtV4KMwxAhNOcjHitzr0r50lOI6C1BAVV?=
 =?us-ascii?q?b5gMGmedQKI32hNFPAHEuLKLWGJTjRz87re6+zVb1Qg/tStxCrvTabEknjPimM?=
 =?us-ascii?q?ljXzVhCvN/1Mgz+fPBBEpI69dRNtA3D5TN36ch27LMN3jTouzLw0nHzKM2scMT?=
 =?us-ascii?q?l6c0xVr7yQ7TlXgvNwG2Fa6nplLO+EmzuW7uXCK5YWt+drDTpwl+5A/Hs6zL5V?=
 =?us-ascii?q?v2l4Q6l5kTXf6N5npUqrlMGOzCZqVFxFrTMPzIaWoUJKOqjD8JREH3He81ZF9W?=
 =?us-ascii?q?iMBg4Yj9pjBMfmt61Zxp7Ijq2gBi1F9ofs8NcRHYDmKcCDK2Y7OFK9ADPIAREX?=
 =?us-ascii?q?ZT+tO3vWi0FUnLeV7HLD/ctykYTlhJdbEuwTb1cyDP5PUkk=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AeAAD6QgFch0O0hNFkHgEGBwaBUQkLA?=
 =?us-ascii?q?YNrFRKDeYh3iymCIZc0gXMsEwGHdiI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwy?=
 =?us-ascii?q?CNiKCZQMDAQIgBBkBATcBBQkBASQCBSECAgMMHSsHEgWDHAGCAQWlTnB8DCeCd?=
 =?us-ascii?q?gEBBYJEhFwHCIELiw8XgUA/jCiCV4kvln4KCYIijwojkR8siE+RKIINTTAIgye?=
 =?us-ascii?q?CGwwXiF6FQD8ygQUBAY1JAQE?=
X-IPAS-Result: =?us-ascii?q?A0AeAAD6QgFch0O0hNFkHgEGBwaBUQkLAYNrFRKDeYh3iym?=
 =?us-ascii?q?CIZc0gXMsEwGHdiI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiKCZQMDAQIgB?=
 =?us-ascii?q?BkBATcBBQkBASQCBSECAgMMHSsHEgWDHAGCAQWlTnB8DCeCdgEBBYJEhFwHCIE?=
 =?us-ascii?q?Liw8XgUA/jCiCV4kvln4KCYIijwojkR8siE+RKIINTTAIgyeCGwwXiF6FQD8yg?=
 =?us-ascii?q?QUBAY1JAQE?=
X-IronPort-AV: E=Sophos;i="5.56,298,1539673200"; 
   d="scan'208";a="42242197"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 30 Nov 2018 06:06:43 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726871AbeLABPo (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 30 Nov 2018 20:15:44 -0500
Received: from bombadil.infradead.org ([198.137.202.133]:44616 "EHLO
        bombadil.infradead.org" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726582AbeLABPo (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 30 Nov 2018 20:15:44 -0500
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
        d=infradead.org; s=bombadil.20170209; h=Content-Type:MIME-Version:References:
        Subject:Cc:To:From:Date:Message-Id:Sender:Reply-To:Content-Transfer-Encoding:
        Content-ID:Content-Description:Resent-Date:Resent-From:Resent-Sender:
        Resent-To:Resent-Cc:Resent-Message-ID:In-Reply-To:List-Id:List-Help:
        List-Unsubscribe:List-Subscribe:List-Post:List-Owner:List-Archive;
        bh=k5DBNKfj7R4vuRl0uYCsPIspnLkumZndZcevVZZ7rMQ=; b=fDHHoDVyW/igCpZFgJu5mc17tr
        0eCJmmKgWa5w3yIgcXCfe95kANOBUb9DFKmTdPCkEkjP5Hz01FRTlAiQZ4fIxmn6DJXNgxK+aaG1n
        BV+f9MKRSjFaaNDh8nH+ldo7msPm/uY4iejk0Oc3XmuNgfRk5xK2PXLdNhISZ0baeF15PyH0OVLGT
        aAKVQaszbSkkqlkcJQtbr7fWgpCPdBm+aYqXqbYduSky1gqAVs6lFETfVEL3TDoKRAYbFMx83Nn2Q
        HVNE6XIRC4YGTn328l+f87RQgUccFrXNS9U8dii++cVqFbZj9WfoVzIfO82Pu1tq7DFzj7YBbduM4
        Q3UqJQNw==;
Received: from j217100.upc-j.chello.nl ([24.132.217.100] helo=hirez.programming.kicks-ass.net)
        by bombadil.infradead.org with esmtpsa (Exim 4.90_1 #2 (Red Hat Linux))
        id 1gSjQv-0003Dr-2M; Fri, 30 Nov 2018 14:06:17 +0000
Received: by hirez.programming.kicks-ass.net (Postfix, from userid 0)
        id 631E52029FD64; Fri, 30 Nov 2018 15:06:14 +0100 (CET)
Message-Id: <20181130140337.547357878@infradead.org>
User-Agent: quilt/0.65
Date: Fri, 30 Nov 2018 14:44:57 +0100
From: Peter Zijlstra <peterz@infradead.org>
To: dave.hansen@intel.com, luto@kernel.org, peterz@infradead.org
Cc: x86@kernel.org, Tom.StDenis@amd.com, linux-kernel@vger.kernel.org
Subject: [PATCH 2/4] x86/mm/cpa: Fix cpa_flush_array()
References: <20181130134455.490139778@infradead.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Disposition: inline; filename=peterz-cpa-fix-flush_array.patch
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

In commit:

  a7295fd53c39 ("x86/mm/cpa: Use flush_tlb_kernel_range()")

I misread the cpa array code and incorrectly used
tlb_flush_kernel_range(), resulting in missing TLB flushes and
consequent failures.

Iterate the array and invalidate the individual pages instead.

Fixes: a7295fd53c39 ("x86/mm/cpa: Use flush_tlb_kernel_range()")
Reported-by: "StDenis, Tom" <Tom.StDenis@amd.com>
Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
---
 arch/x86/mm/mm_internal.h |    2 +
 arch/x86/mm/pageattr.c    |   62 ++++++++++++++++++++++++++++------------------
 arch/x86/mm/tlb.c         |    4 ++
 3 files changed, 43 insertions(+), 25 deletions(-)

--- a/arch/x86/mm/mm_internal.h
+++ b/arch/x86/mm/mm_internal.h
@@ -19,4 +19,6 @@ extern int after_bootmem;
 
 void update_cache_mode_entry(unsigned entry, enum page_cache_mode cache);
 
+extern unsigned long tlb_single_page_flush_ceiling;
+
 #endif	/* __X86_MM_INTERNAL_H */
--- a/arch/x86/mm/pageattr.c
+++ b/arch/x86/mm/pageattr.c
@@ -26,6 +26,8 @@
 #include <asm/pat.h>
 #include <asm/set_memory.h>
 
+#include "mm_internal.h"
+
 /*
  * The current flushing context - we pass it instead of 5 arguments:
  */
@@ -302,20 +304,16 @@ static void cpa_flush_all(unsigned long
 	on_each_cpu(__cpa_flush_all, (void *) cache, 1);
 }
 
-static bool __cpa_flush_range(unsigned long start, int numpages, int cache)
+static bool cpa_check_flush_all(int cache)
 {
 	BUG_ON(irqs_disabled() && !early_boot_irqs_disabled);
 
-	WARN_ON(PAGE_ALIGN(start) != start);
-
 	if (cache && !static_cpu_has(X86_FEATURE_CLFLUSH)) {
 		cpa_flush_all(cache);
 		return true;
 	}
 
-	flush_tlb_kernel_range(start, start + PAGE_SIZE * numpages);
-
-	return !cache;
+	return false;
 }
 
 static void cpa_flush_range(unsigned long start, int numpages, int cache)
@@ -323,7 +321,14 @@ static void cpa_flush_range(unsigned lon
 	unsigned int i, level;
 	unsigned long addr;
 
-	if (__cpa_flush_range(start, numpages, cache))
+	WARN_ON(PAGE_ALIGN(start) != start);
+
+	if (cpa_check_flush_all(cache))
+		return;
+
+	flush_tlb_kernel_range(start, start + PAGE_SIZE * numpages);
+
+	if (!cache)
 		return;
 
 	/*
@@ -343,13 +348,28 @@ static void cpa_flush_range(unsigned lon
 	}
 }
 
-static void cpa_flush_array(unsigned long baddr, unsigned long *start,
-			    int numpages, int cache,
-			    int in_flags, struct page **pages)
+void __cpa_flush_array(void *data)
 {
-	unsigned int i, level;
+	struct cpa_data *cpa = data;
+	unsigned int i;
 
-	if (__cpa_flush_range(baddr, numpages, cache))
+	for (i = 0; i < cpa->numpages; i++)
+		__flush_tlb_one_kernel(__cpa_addr(cpa, i));
+}
+
+static void cpa_flush_array(struct cpa_data *cpa, int cache)
+{
+	unsigned int i;
+
+	if (cpa_check_flush_all(cache))
+		return;
+
+	if (cpa->numpages <= tlb_single_page_flush_ceiling)
+		on_each_cpu(__cpa_flush_array, cpa, 1);
+	else
+		flush_tlb_all();
+
+	if (!cache)
 		return;
 
 	/*
@@ -358,15 +378,11 @@ static void cpa_flush_array(unsigned lon
 	 * will cause all other CPUs to flush the same
 	 * cachelines:
 	 */
-	for (i = 0; i < numpages; i++) {
-		unsigned long addr;
+	for (i = 0; i < cpa->numpages; i++) {
+		unsigned long addr = __cpa_addr(cpa, i);
+		unsigned int level;
 		pte_t *pte;
 
-		if (in_flags & CPA_PAGES_ARRAY)
-			addr = (unsigned long)page_address(pages[i]);
-		else
-			addr = start[i];
-
 		pte = lookup_address(addr, &level);
 
 		/*
@@ -1765,12 +1781,10 @@ static int change_page_attr_set_clr(unsi
 		goto out;
 	}
 
-	if (cpa.flags & (CPA_PAGES_ARRAY | CPA_ARRAY)) {
-		cpa_flush_array(baddr, addr, numpages, cache,
-				cpa.flags, pages);
-	} else {
+	if (cpa.flags & (CPA_PAGES_ARRAY | CPA_ARRAY))
+		cpa_flush_array(&cpa, cache);
+	else
 		cpa_flush_range(baddr, numpages, cache);
-	}
 
 out:
 	return ret;
--- a/arch/x86/mm/tlb.c
+++ b/arch/x86/mm/tlb.c
@@ -16,6 +16,8 @@
 #include <asm/apic.h>
 #include <asm/uv/uv.h>
 
+#include "mm_internal.h"
+
 /*
  *	TLB flushing, formerly SMP-only
  *		c/o Linus Torvalds.
@@ -664,7 +666,7 @@ void native_flush_tlb_others(const struc
  *
  * This is in units of pages.
  */
-static unsigned long tlb_single_page_flush_ceiling __read_mostly = 33;
+unsigned long tlb_single_page_flush_ceiling __read_mostly = 33;
 
 void flush_tlb_mm_range(struct mm_struct *mm, unsigned long start,
 				unsigned long end, unsigned int stride_shift,


