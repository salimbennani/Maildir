Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 09 Dec 2018 18:50:13 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 0FC045803E4
	for <like.xu@linux.intel.com>; Fri,  7 Dec 2018 07:20:33 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 07 Dec 2018 07:20:32 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AeK7aBRAKJlQP5hVdNsr5UyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP37r8WwAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95PWSxPAo28?=
 =?us-ascii?q?aIgBAeQPMulXrYbyu1QAowamBQSuBu3ixSJEi3Hq0aIkyOQsCh3G0Q46Et4SrH?=
 =?us-ascii?q?jZotf4OaEPWu611qnIyjDDYutZ1zfn6YjHbg0qrOyIXb1qcsre11QkGgTbgVqL?=
 =?us-ascii?q?rYzqJTCV2foWvmiB8eVvSOKvhHQ7qw1rvjevwcIsh5DPi4kIxF7E8iB5z5w0Jd?=
 =?us-ascii?q?2+UEN7Zd+kH4BOtyGbLYt2XtkuQ2ZyuCY10rEGoIC0fC0XyJg9wB7fcfOHfo6V?=
 =?us-ascii?q?6RzgTOacOSl0iG5mdb6lmhq+7EutxvfiWsS60FtGtDdJn9vUunwTyxDe7tKLRu?=
 =?us-ascii?q?Zz80u/wzqDygPe5+9eLUwqlqfWLYMqzKQqmZoJq0vDGzf7mEXog6+ScUUp4uyo?=
 =?us-ascii?q?6+X8YrX6vZ+QLYB0igfjMqg0ncy/G+s4PhAPX2id5+u8yKXu8VPlTLhJlPE6j7?=
 =?us-ascii?q?TVvZPAKcgFqKO0AxVZ3psh5hqnCjepytUYnX0JLFJffxKHipDkO0jQL/D9EPez?=
 =?us-ascii?q?mkmjnyl1x//YOr3tG47CLn/ekLfnYbly9VVcxA03zdBe5JJbFKsNIf3uWkLpsN?=
 =?us-ascii?q?zYDxk5MxG7wur9CdV90J8eVnyLAqODLKzStlqI6/kpI+mLYo8VtzD9K+U/6/7p?=
 =?us-ascii?q?l385lkcRfbO10psPdHC4AvNmLl2dYXrtgdcOD30GvwUjTOHxjF2CUDhTZ2u9Xq?=
 =?us-ascii?q?4m5zE7Dp6mApnHRoy3nLOB2yK7TdVrYHtbAAWMDWvwbNfDHPMNcz6JZMlmlDMC?=
 =?us-ascii?q?SP6mUYBm0BivsArzzf1gNvbV/SsD8ovu0cUw6+DNmBVhyDpvEs7I1miMS31zzH?=
 =?us-ascii?q?oFQiJz0K1hrEg40FqazKVjn9ReEtpc4e4PVR01YoXBxe53AMynRwTaY92SQ0yn?=
 =?us-ascii?q?SNj1PTZkcNY4z94LYlw1INingxbfxC20RpgalrGVH5814+qIwWP8Ist7123Byo?=
 =?us-ascii?q?E/jkM6X8xdJ2rgjal6oUybTZfElljcm6u0eKA02inL+2Gei22UswsQBBd9VLiA?=
 =?us-ascii?q?UX0Ba0/+q9P/6UXfCbi0BuJ0HBFGzJuvMKpBIvfthFZLDKPuMtDXYG+ZgWq8BR?=
 =?us-ascii?q?+UgLiLady5KC0mwCzBBR1cwEgo9nGcOF17X3/5rg=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BDAAB1jgpcmBHrdtBgAxoBAQEBAQIBA?=
 =?us-ascii?q?QEBBwIBAQEBgWWBMYE5gSmDeoh4izGBYC2SVYZtFBgDEYFLhhIiOBIBAwEBAQE?=
 =?us-ascii?q?BAQIBEwEBAQEBCAsLBhsOIwyCNgUCAxoBBoJcAQIDAQIgBBEOCiUEAwMBAgYBA?=
 =?us-ascii?q?QoYAgIiBAICAwFTBgEMBgIBAQGDHAGCAQEEpTx8M4VAhG2BC4sUF4FAP4ERJ4J?=
 =?us-ascii?q?rhGtdgj2CVwKJJQiBZBaEFEY2UI9gCYcGgzmHBgYYgVxNhzoQJocfLIEPgj6FF?=
 =?us-ascii?q?5ALgV2BdjMaCBsVO4JsCYsThV4iMYEHHIdZKymBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0BDAAB1jgpcmBHrdtBgAxoBAQEBAQIBAQEBBwIBAQEBgWW?=
 =?us-ascii?q?BMYE5gSmDeoh4izGBYC2SVYZtFBgDEYFLhhIiOBIBAwEBAQEBAQIBEwEBAQEBC?=
 =?us-ascii?q?AsLBhsOIwyCNgUCAxoBBoJcAQIDAQIgBBEOCiUEAwMBAgYBAQoYAgIiBAICAwF?=
 =?us-ascii?q?TBgEMBgIBAQGDHAGCAQEEpTx8M4VAhG2BC4sUF4FAP4ERJ4JrhGtdgj2CVwKJJ?=
 =?us-ascii?q?QiBZBaEFEY2UI9gCYcGgzmHBgYYgVxNhzoQJocfLIEPgj6FF5ALgV2BdjMaCBs?=
 =?us-ascii?q?VO4JsCYsThV4iMYEHHIdZKymBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,326,1539673200"; 
   d="scan'208";a="54267017"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 07 Dec 2018 07:20:32 -0800
Received: from localhost ([::1]:46711 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gVHvb-0001wb-1z
	for like.xu@linux.intel.com; Fri, 07 Dec 2018 10:20:31 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:54385)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <eblake@redhat.com>) id 1gVHvR-0001vP-4L
	for qemu-devel@nongnu.org; Fri, 07 Dec 2018 10:20:22 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <eblake@redhat.com>) id 1gVHvQ-0007gi-2c
	for qemu-devel@nongnu.org; Fri, 07 Dec 2018 10:20:21 -0500
Received: from mx1.redhat.com ([209.132.183.28]:48386)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <eblake@redhat.com>)
	id 1gVHvL-0007JX-2V; Fri, 07 Dec 2018 10:20:15 -0500
Received: from smtp.corp.redhat.com (int-mx04.intmail.prod.int.phx2.redhat.com
	[10.5.11.14])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 62F818666A;
	Fri,  7 Dec 2018 15:20:14 +0000 (UTC)
Received: from [10.10.125.104] (ovpn-125-104.rdu2.redhat.com [10.10.125.104])
	by smtp.corp.redhat.com (Postfix) with ESMTP id 099265DD61;
	Fri,  7 Dec 2018 15:20:00 +0000 (UTC)
To: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>,
	"qemu-devel@nongnu.org" <qemu-devel@nongnu.org>
References: <20181130220344.3350618-1-eblake@redhat.com>
	<20181130220344.3350618-12-eblake@redhat.com>
	<66333381-b387-9396-03ed-0aae3b4225fb@virtuozzo.com>
From: Eric Blake <eblake@redhat.com>
Organization: Red Hat, Inc.
Message-ID: <ff7cae77-30f5-b7f4-8f45-c8a7b4edef4b@redhat.com>
Date: Fri, 7 Dec 2018 09:19:58 -0600
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
	Thunderbird/60.3.1
MIME-Version: 1.0
In-Reply-To: <66333381-b387-9396-03ed-0aae3b4225fb@virtuozzo.com>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Language: en-US
Content-Transfer-Encoding: 7bit
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.14
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.26]);
	Fri, 07 Dec 2018 15:20:14 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH 11/14] nbd/client: Add
 nbd_receive_export_list()
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Kevin Wolf <kwolf@redhat.com>,
	"qemu-block@nongnu.org" <qemu-block@nongnu.org>,
	"rjones@redhat.com" <rjones@redhat.com>, Max Reitz <mreitz@redhat.com>,
	"nsoffer@redhat.com" <nsoffer@redhat.com>,
	"jsnow@redhat.com" <jsnow@redhat.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On 12/7/18 4:04 AM, Vladimir Sementsov-Ogievskiy wrote:
> 01.12.2018 1:03, Eric Blake wrote:
>> We want to be able to detect whether a given qemu NBD server is
>> exposing the right export(s) and dirty bitmaps, at least for
>> regression testing.  We could use 'nbd-client -l' from the upstream
>> NBD project to list exports, but it's annoying to rely on
>> out-of-tree binaries; furthermore, nbd-client doesn't necessarily
>> know about all of the qemu NBD extensions.  Thus, we plan on adding
>> a new mode to qemu-nbd that merely sniffs all possible information
>> from the server during handshake phase, then disconnects and dumps
>> the information.
>>
>> This patch adds the low-level client code for grabbing the list
>> of exports.  It benefits from the recent refactoring patches, as
>> well as a minor tweak of changing nbd_opt_go() to nbd_opt_info_go(),
>> in order to share as much code as possible when it comes to doing
>> validation of server replies.  The resulting information is stored
>> in an array of NBDExportInfo which has been expanded to hold more
>> members, along with a convenience function for freeing the list.
>>
>> Signed-off-by: Eric Blake <eblake@redhat.com>
>> ---

>> +
>> +/* Query details about a server's exports, then disconnect without
>> + * going into transmission phase. Return a count of the exports listed
>> + * in @info by the server, or -1 on error. Caller must free @info. */
>> +int nbd_receive_export_list(QIOChannel *ioc, QCryptoTLSCreds *tlscreds,
>> +                            const char *hostname, NBDExportInfo **info,
>> +                            Error **errp)
>> +{
>> +    int result;
>> +    int count = 0;
>> +    int i;
>> +    int rc;
>> +    int ret = -1;
>> +    NBDExportInfo *array = NULL;
>> +    uint32_t oldflags;
>> +    QIOChannel *sioc = NULL;
> 
> it's a bit confusing that you use sioc name for the second produced ioc, when
> in nbd_client_init it's visa-versa.
> 
> So, I assume that you mean Secure ioc, when in nbd_client_init it is Socket ioc.

I can s/sioc/outioc/ if that helps. Basically, the output ioc is the 
same as the original ioc for plaintext, and a secure wrapper socket for tls.

>> +    case 0: /* oldstyle, parse length and flags */
>> +        array = g_new0(NBDExportInfo, 1);
>> +        array->name = g_strdup("");
>> +        count = 1;
>> +
>> +        if (nbd_read(ioc, &array->size, sizeof(array->size), errp) < 0) {
>> +            error_prepend(errp, "Failed to read export length: ");
>> +            goto out;
>> +        }
>> +        array->size = be64_to_cpu(array->size);
>> +
>> +        if (nbd_read(ioc, &oldflags, sizeof(oldflags), errp) < 0) {
>> +            error_prepend(errp, "Failed to read export flags: ");
>> +            goto out;
>> +        }
>> +        oldflags = be32_to_cpu(oldflags);
>> +        if (oldflags & ~0xffff) {
>> +            error_setg(errp, "Unexpected export flags %0x" PRIx32, oldflags);
>> +            goto out;
>> +        }
>> +        array->flags = oldflags;
> 
> 
> ^^^
> this is a common part of nbd_receive_export_list and nbd_receive_negotiate,
> can we move it to nbd_start_negotiate?

Not quite, but I could probably create yet another helper function.

> 
>> +
>> + out:
>> +    qio_channel_shutdown(ioc, QIO_CHANNEL_SHUTDOWN_BOTH, NULL);
>> +    qio_channel_close(ioc, NULL);
> 
> interesting, why we don't close it (only shutdown) in other nbd code..

I presume you mean block/nbd-client.c:nbd_teardown_connection, which 
indeed oncly calls qio_channel_shutdown() followed by object_unref().  I 
think that unref'ing a channel implies a close, but if not, then that 
code is leaking an fd (shutdown ends the connection, but does not close 
resources).  I'll have to debug that, but it's independent of this patch.

-- 
Eric Blake, Principal Software Engineer
Red Hat, Inc.           +1-919-301-3266
Virtualization:  qemu.org | libvirt.org

