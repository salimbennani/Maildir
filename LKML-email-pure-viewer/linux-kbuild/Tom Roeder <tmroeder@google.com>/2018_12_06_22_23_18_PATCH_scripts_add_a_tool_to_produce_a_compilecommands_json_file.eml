Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:54:48 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id D04A25804F9;
	Thu,  6 Dec 2018 14:26:59 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by fmsmga006-1.fm.intel.com with ESMTP; 06 Dec 2018 14:26:59 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ABhWRDxxrzUvKkO7XCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e8VK/ad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWRPUMVeWCJGH42y?=
 =?us-ascii?q?b5UBAPYaPeZArYTwvEcOoQekCAWwHu7j1j1Fi3nr1qM6yeQhFgTG0RQ+EdIJtX?=
 =?us-ascii?q?Tfscn7NKAMXu+o0qbI1yjIYvRK2Tf48ojIdQ4uruySUrJqasfRxk4vFwTKjlWU?=
 =?us-ascii?q?t4PpJS+a1uMIs2WC6edrSOyhi2kiqw5rozivwN8hio3NhoILz1DI7yJ5wJw6Jd?=
 =?us-ascii?q?C+VUV1YsakHYNOuy2GM4Z6WN4uTm92tCog17ELuoK3cDILxZkl3xLTdeCLfoyS?=
 =?us-ascii?q?7h/gVOudOyl0iGx7dL6lmRq+7VWsx+vhXceuyllKtDBKktzUu3ANyRPT7s+HR+?=
 =?us-ascii?q?Nj/keuxzmPzRrf6uJaLkAuk6rUNZohzqQ3lpoJvkTPBi72mEPog6+Kbkgo5PSk?=
 =?us-ascii?q?5uD9brn7qJKQKZV4hhz9P6gygMCyAOY1PhALX2eB+OS80LPj/Vf+QLVPlvA2lq?=
 =?us-ascii?q?jZsJbHJcUUv6K5ABFa0pwl6xmhCzeqydMYnHcBLF1bYhKKlJbpO17QL/DiF/u/?=
 =?us-ascii?q?gEqjkC1tx//YOr3tGJLNLmLMkLv5Z7Zy91ZcyBYvzdBY/59UDrABIPHtVUPru9?=
 =?us-ascii?q?3YEwQ0Mwi1w+bhFdV82ZkSWWOJAq+FLqzStUWE6f4oI+mJfIUVoiryK+A55/7y?=
 =?us-ascii?q?in80gV8dcrOo3ZsLcn+4Ge5qI0WEYXX2hNcBHnwHvg4/TOzslV2DXiRfZ3e0X6?=
 =?us-ascii?q?Ig+D47DJiqApvERoComLaBxju0HoVKZmBaDVCBCXXod4KaVPsWayKSJclhkjoD?=
 =?us-ascii?q?VbW6T48h1BeutBL1yrZ9L+rU/DEYuozn1NRv++LTkhQy/yRuD8uBy2GNU310nm?=
 =?us-ascii?q?QQSjAsx6B/oUt9ylSZ3ahimfNYF8de5/dIUgc8KJ7dwPZ2C9H0WgLdYNiJTEyq?=
 =?us-ascii?q?TcmhATE0Vtgx2cMBY15hG9W+iRDOxymqDKUTl7CRAJw087jT337+J8tmz3bG1a?=
 =?us-ascii?q?8hj0QpQ8dVNG2mgLJ/+BbXB4LTj0qZkKOqf7wG3CHR7GeD0XaOvEZAXQFtS6rF?=
 =?us-ascii?q?Q24QalHWrdvj4EPCVKGhCbIgPgtFys6CL69KZ8btjVVHQvfjJdvfb3iwm2e2GR?=
 =?us-ascii?q?aH2LeMYJD2dGUa2SXXEFIEnBwL/XaaKQg+AT+srH/EAzxwC13jeUPs/vN4qHOg?=
 =?us-ascii?q?UEA0yRqHb0lg17qz5x4UiuaQS/IV3rIYpighry94E0q639LTE9CAvRZufL1AYd?=
 =?us-ascii?q?Mh51dKzX7Ztw14PpynM6Bihl4ffx5rv0/00BV3EIFAkcksrHMl1wdyLaOY0FVc?=
 =?us-ascii?q?dzKXx5zwO7vXKnXs8xCrcaLZxlbe0NOO8KcV9Ps4s0njvB2uFkc66Xpn18da0n?=
 =?us-ascii?q?SC6ZTKFgYdSo/xXVst+Bh8pLHaZTc96pjQ1X1tN6m0rzDD18goBOsj1havYdNf?=
 =?us-ascii?q?PLmYGw/1Fs0QH9KuJ/Aym1i1chIEO/hf9a4pP8+8a/SKwq+qPOZ6kzKggmRK+4?=
 =?us-ascii?q?R90kOK9yphRe/ExZcFw/eE3gSZUzfwlkuussfymYpcfzEdAnK/yTT4BI5WfqBy?=
 =?us-ascii?q?Z4cLBnu0LM2t29p+gIThW3hG+165BlMKwdOmdgCWb1PgwwJQz0MXoXq8lCu8zj?=
 =?us-ascii?q?x0lSwpr6WF0CzPxeTiaAQIOmpRSGZ+ilfsJJC+j8oGU0iwcwgpiByl6F76xqha?=
 =?us-ascii?q?vqh+L3PfQVxVfyjwNGxiVqqwtryfY89A8p8osCNXUPiiblCeULLyvxwa0yb7FW?=
 =?us-ascii?q?tE2D87by2quon+nxFiimKSNmxzrHnaecF33xvf/8bTRf1S3joHQil3lz/XC0O4?=
 =?us-ascii?q?P9mo+9WUipjCvvq/V2KnSp1cby3rwZmcuyu84G1gGQe/kOyrmt37DQg61jf21t?=
 =?us-ascii?q?lwWiXPthr8YIjr16KhPOJjf0loAkL86sVgFoF/lIswmI8f2XwAipqJ+noHlH/5?=
 =?us-ascii?q?Mc9H1qLmcHoNWTkLzsbW4Af/2U1vNHKJx5/jWXWbzctsfN26YmIQ2iIg4MFGEq?=
 =?us-ascii?q?aU7LpYnSRrplq0tx7eYf94nj0F0/sh9GYag/0VuAoq1iidB7ESHUpCMiD2mRWH?=
 =?us-ascii?q?8cu+rLlJa2a1are/ylB+nd+6AbGGowFcXmv5e5g4ES9x6MV/LEzD0Hnp5o74f9?=
 =?us-ascii?q?nQaMoZtgeInBfYk+hVNJUxm+IWhSpgPGLxp3wkxPQ9jRxzxpG6p4mHJn5p/KK4?=
 =?us-ascii?q?BB5YKzL0a9kS+jHrkaZRgMKW05qzEZVmHzUBRIHoQu6wEDIOqfTnMB6DHyYmpX?=
 =?us-ascii?q?ecHbrfABWT6EN7r3/UF5CrNneXJGQWzNl4RRmdIlBfjx4QXDkggpE5EQWqztT7?=
 =?us-ascii?q?cEhl/jAR+kL4qhxUx+JqLRb/V3nQpByyZjcoUpSfLwdW7gJf50fTK8Oe9fl+Hy?=
 =?us-ascii?q?VZ/p2nsQyMJXaXZwVODWEVREOEA0rvMaWp5dnF6+KYHPaxL+PSYbWSruxTT/eJ?=
 =?us-ascii?q?xZWy0ot/4jaDLMOPMmN5D/083EpDUmt0G8DYmzUJViwWmDjBb8+dpBeg5CJ3qt?=
 =?us-ascii?q?qz/+jsWALq/YGPEaddMc1z+xCqhqeOL+6Qizh4KTZb1ZMMxGXEyLsF3F4VhCFh?=
 =?us-ascii?q?aSOtEakbtSPWSKLQm6lXDwMUai9pNctI6b480RdJOcLBltz10bt4hOYvC1hZTV?=
 =?us-ascii?q?zhht2pZcsSLm6nKVPIH1yLO6qGJDHRx8H3YLixSblRjOVSqh2xtiyXE07lPjSf?=
 =?us-ascii?q?iTbpUwqjPv1LjCGeJBZeop2ycg5xCWj/S9LrcgG7MN5yjTEs3bI4nG/FNW4CPj?=
 =?us-ascii?q?h6aE5NqryQ7SVFgvRwAWBB73xlLfWalCad9eXXNpEWsf5zCCRui+1a+Gg6y6dS?=
 =?us-ascii?q?7CxcRP16gi3Srttvo1GgiuaOyzpnXwBIqjZEn4+LuURiOaPE9phPQ3rE/RQN7X?=
 =?us-ascii?q?mOBBQOvddqFtrvu6UDguTIwYf6Mz5C8sjTtfoVAsHYIYrTIXMkOBbgXjvdFwIF?=
 =?us-ascii?q?TCSsHXrYjE1alvyC6jueqZ1s7tDJmZEOQ7sTcVUvG/BSXkFkF9wLJNFzXTYgub?=
 =?us-ascii?q?uSls0P+3v4qhTNEpZ0pJfCA86VBL3VLzuVgKMMMwcN27T1IYkJHoL83ENmZx9x?=
 =?us-ascii?q?m4GcSBmYZsxEviA0Nlx8m05K6nUrCzRrg08=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AUAADfoAlch0O0hNFjHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGBVYEUgQIng3qIGYwPgiFokVmEeRSBEANMLAsIAYQ8AoMZIjQJDQEDAQE?=
 =?us-ascii?q?BAQEBAgETAQEBCA0JCCkjDII2JAGCaQIgHQEBNwEFCQIkAiYCAgMxAQUBIgESB?=
 =?us-ascii?q?YMcAYIBBQqaYzyKHXCBL4J2AQEFgURAQIRjCBJ5hmWELxeBf4ERgl2DUwIBgSW?=
 =?us-ascii?q?DP4I1IpA1kCwJhTiBTIEZiR4LGIIpjwwBLIhihGyLAzCBJWwNgRRNIxU7gmwJg?=
 =?us-ascii?q?hKDbUeETYVgHjMBgQQBAYo6AQE?=
X-IPAS-Result: =?us-ascii?q?A0AUAADfoAlch0O0hNFjHQEBBQEHBQGBUQgBCwGBVYEUgQI?=
 =?us-ascii?q?ng3qIGYwPgiFokVmEeRSBEANMLAsIAYQ8AoMZIjQJDQEDAQEBAQEBAgETAQEBC?=
 =?us-ascii?q?A0JCCkjDII2JAGCaQIgHQEBNwEFCQIkAiYCAgMxAQUBIgESBYMcAYIBBQqaYzy?=
 =?us-ascii?q?KHXCBL4J2AQEFgURAQIRjCBJ5hmWELxeBf4ERgl2DUwIBgSWDP4I1IpA1kCwJh?=
 =?us-ascii?q?TiBTIEZiR4LGIIpjwwBLIhihGyLAzCBJWwNgRRNIxU7gmwJghKDbUeETYVgHjM?=
 =?us-ascii?q?BgQQBAYo6AQE?=
X-IronPort-AV: E=Sophos;i="5.56,324,1539673200"; 
   d="scan'208";a="43085288"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 06 Dec 2018 14:26:57 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726136AbeLFWXx (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 6 Dec 2018 17:23:53 -0500
Received: from mail-qk1-f201.google.com ([209.85.222.201]:40064 "EHLO
        mail-qk1-f201.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725986AbeLFWXw (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 6 Dec 2018 17:23:52 -0500
Received: by mail-qk1-f201.google.com with SMTP id y83so1733883qka.7
        for <linux-kernel@vger.kernel.org>; Thu, 06 Dec 2018 14:23:52 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=date:message-id:mime-version:subject:from:to:cc;
        bh=50o4MvtjLTdhL3u0ZwwFnXOeAd7cA9fIDGEIiqzQvao=;
        b=AZei+II2V6jWx0me6vDCCyk0FIhbhE8opLZeexdh9DmxcCLX4hvVdEAcN6E2zWa10q
         LY1sTCif6FTGn5I2rusoGg9XR4JvaFvA4MchJgB0PDvnFjd7ebXnfNwA4rNSxWTwqxs1
         yZ+jwLi3PHmtQQ9uoXI+cNNH8wF8Di5e/3DbqSmKKAJXsRyLfXG2PfEpU7cZogBuA56Z
         dNJs7a60Jx4PXNJBdFuJstSu4PSm64KzgIHhjGvXESKL9IGUyDv7o03Z7ms/oWIwTa8O
         N7M/wVy158EGCqDp8Gk27Acn3ggJjwXaVut8zeh4z+Uk+GztEPFvMqLTKG4e+4z+1n2V
         8+qw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:message-id:mime-version:subject:from:to:cc;
        bh=50o4MvtjLTdhL3u0ZwwFnXOeAd7cA9fIDGEIiqzQvao=;
        b=jBzKDF4JQs5QwdHqrmC5C5gyhoynPgB8k8MLrCdGDNjLeR3fIk0DUKP0ORZ6uVE88n
         CxWk01wuXmTHyXnRUzE2VT/98OxnprJxZqN/ZDQGz8xvRxJE4HVbQmDOWcVTe5zMRFEy
         UfRhdKthHUNkwuj3bL5PcGbQbY5GFGA45eaemGnwR1ESdoF3dwZ5wPAsn0CocFm+PbVz
         lxAUxXORBsVf7MFWCSCHXzYhN/blLgx7i9B/52jnh1nViV4iXIi1JQuEy05s6JSUYBZg
         h36r70sPpgr1OscDK/Z3VoAef8oHJxOBdVjMaJoeHPzmD/LKi7wqqtvOtZE9M0G1aQdA
         9GgA==
X-Gm-Message-State: AA+aEWZCYx7dFnsoLNsmlY7edK5mU6fRKtpwaEZ2iPes+tNKh63128Yv
        BWL33WJ+vdXd5gcKxgz2nwa3o95RYITMlw==
X-Google-Smtp-Source: AFSGD/UXXY8g2CPTbqMvLEz+PJH0Ny3gcdb4PNzFYEuKY1tJVUhKl/ujqNQzpAG4utta+JOJE4qA8XBUiOqAiA==
X-Received: by 2002:a0c:879a:: with SMTP id 26mr22484767qvj.62.1544135031575;
 Thu, 06 Dec 2018 14:23:51 -0800 (PST)
Date: Thu,  6 Dec 2018 14:23:18 -0800
Message-Id: <20181206222318.218157-1-tmroeder@google.com>
Mime-Version: 1.0
X-Mailer: git-send-email 2.20.0.rc2.403.gdbc3b29805-goog
Subject: [PATCH] scripts: add a tool to produce a compile_commands.json file
From: Tom Roeder <tmroeder@google.com>
To: Masahiro Yamada <yamada.masahiro@socionext.com>,
        Michal Marek <michal.lkml@markovi.net>
Cc: linux-kbuild@vger.kernel.org, linux-kernel@vger.kernel.org,
        Tom Roeder <tmroeder@google.com>
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The LLVM/Clang project provides many tools for analyzing C source code.
Many of these tools are based on LibTooling
(https://clang.llvm.org/docs/LibTooling.html), which depends on a
database of compiler flags. The standard container for this database is
compile_commands.json, which consists of a list of JSON objects, each
with "directory", "file", and "command" fields.

Some build systems, like cmake or bazel, produce this compilation
information directly. Naturally, Makefiles don't. However, the kernel
makefiles already create .<target>.o.cmd files that contain all the
information needed to build a compile_commands.json file.

So, this commit adds scripts/gen_compile_commands.py, which recursively
searches through a directory for .<target>.o.cmd files and extracts
appropriate compile commands from them. It writes a
compile_commands.json file that LibTooling-based tools can use.

By default, gen_compile_commands.py starts its search in its working
directory and (over)writes compile_commands.json in the working
directory. However, it also supports --output and --directory flags for
out-of-tree use.

Note that while gen_compile_commands.py enables the use of clang-based
tools, it does not require the kernel to be compiled with clang. E.g.,
the following sequence of commands produces a compile_commands.json file
that works correctly with LibTooling.

make defconfig
make
scripts/gen_compile_commands.py

Also note that this script is written to work correctly in both Python 2
and Python 3, so it does not specify the Python version in its first
line.

For an example of the utility of this script: after running
gen_compile_commands.json on the latest kernel version, I was able to
use Vim + the YouCompleteMe pluging + clangd to automatically jump to
definitions and declarations. Obviously, cscope and ctags provide some
of this functionality; the advantage of supporting LibTooling is that it
opens the door to many other clang-based tools that understand the code
directly and do not rely on regular expressions and heuristics.

Tested: Built several recent kernel versions and ran the script against
them, testing tools like clangd (for editor/LSP support) and clang-check
(for static analysis). Also extracted some test .cmd files from a kernel
build and wrote a test script to check that the script behaved correctly
with all permutations of the --output and --directory flags.

Signed-off-by: Tom Roeder <tmroeder@google.com>
---
 scripts/gen_compile_commands.py | 146 ++++++++++++++++++++++++++++++++
 1 file changed, 146 insertions(+)
 create mode 100755 scripts/gen_compile_commands.py

diff --git a/scripts/gen_compile_commands.py b/scripts/gen_compile_commands.py
new file mode 100755
index 000000000000..d6c4d7281976
--- /dev/null
+++ b/scripts/gen_compile_commands.py
@@ -0,0 +1,146 @@
+#!/usr/bin/env python
+# SPDX-License-Identifier: GPL-2.0
+#
+# Copyright (C) Google LLC, 2018
+#
+# Author: Tom Roeder <tmroeder@google.com>
+#
+"""A tool for generating compile_commands.json in the Linux kernel."""
+
+import argparse
+import json
+import logging
+import os
+import re
+
+_DEFAULT_OUTPUT = 'compile_commands.json'
+_DEFAULT_LOG_LEVEL = 'WARNING'
+
+_FILENAME_PATTERN = r'^\..*\.cmd$'
+_LINE_PATTERN = r'^cmd_[^ ]*\.o := (.* )([^ ]*\.c)$'
+_VALID_LOG_LEVELS = ['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL']
+
+# A kernel build generally has over 2000 entries in its compile_commands.json
+# database. If this code finds 500 or fewer, then warn the user that they might
+# not have all the .cmd files, and they might need to compile the kernel.
+_LOW_COUNT_THRESHOLD = 500
+
+
+def parse_arguments():
+    """Sets up and parses command-line arguments.
+
+    Returns:
+        log_level: A logging level to filter log output.
+        directory: The directory to search for .cmd files.
+        output: Where to write the compile-commands JSON file.
+    """
+    usage = 'Creates a compile_commands.json database from kernel .cmd files'
+    parser = argparse.ArgumentParser(description=usage)
+
+    directory_help = ('Path to the kernel source directory to search '
+                      '(defaults to the working directory)')
+    parser.add_argument('-d', '--directory', type=str, help=directory_help)
+
+    output_help = ('The location to write compile_commands.json (defaults to '
+                   'compile_commands.json in the search directory)')
+    parser.add_argument('-o', '--output', type=str, help=output_help)
+
+    log_level_help = ('The level of log messages to produce (one of ' +
+                      ', '.join(_VALID_LOG_LEVELS) + '; defaults to ' +
+                      _DEFAULT_LOG_LEVEL + ')')
+    parser.add_argument(
+        '--log_level', type=str, default=_DEFAULT_LOG_LEVEL,
+        help=log_level_help)
+
+    args = parser.parse_args()
+
+    log_level = args.log_level
+    if log_level not in _VALID_LOG_LEVELS:
+        raise ValueError('%s is not a valid log level' % log_level)
+
+    directory = args.directory or os.getcwd()
+    output = args.output or os.path.join(directory, _DEFAULT_OUTPUT)
+    directory = os.path.abspath(directory)
+
+    return log_level, directory, output
+
+
+def process_line(root_directory, file_directory, command_prefix, relative_path):
+    """Extracts information from a .cmd line and creates an entry from it.
+
+    Args:
+        root_directory: The directory that was searched for .cmd files. Usually
+            used directly in the "directory" entry in compile_commands.json.
+        file_directory: The path to the directory the .cmd file was found in.
+        command_prefix: The extracted command line, up to the last element.
+        relative_path: The .c file from the end of the extracted command.
+            Usually relative to root_directory, but sometimes relative to
+            file_directory and sometimes neither.
+
+    Returns:
+        An entry to append to compile_commands.
+
+    Raises:
+        ValueError: Could not find the extracted file based on relative_path and
+            root_directory or file_directory.
+    """
+
+    cur_dir = root_directory
+    expected_path = os.path.join(cur_dir, relative_path)
+    if not os.path.exists(expected_path):
+        # Try using file_directory instead. Some of the tools have a different
+        # style of .cmd file than the kernel.
+        cur_dir = file_directory
+        expected_path = os.path.join(cur_dir, relative_path)
+        if not os.path.exists(expected_path):
+            raise ValueError('File %s not in %s or %s' %
+                             (relative_path, root_directory, file_directory))
+    return {
+        'directory': cur_dir,
+        'file': relative_path,
+        'command': command_prefix + relative_path,
+    }
+
+
+def main():
+    """Walks through the directory and finds and parses .cmd files."""
+    log_level, directory, output = parse_arguments()
+
+    level = getattr(logging, log_level)
+    logging.basicConfig(format='%(levelname)s: %(message)s', level=level)
+
+    filename_matcher = re.compile(_FILENAME_PATTERN)
+    line_matcher = re.compile(_LINE_PATTERN)
+
+    compile_commands = []
+    for dirpath, _, filenames in os.walk(directory):
+        for filename in filenames:
+            if not filename_matcher.match(filename):
+                continue
+            filepath = os.path.join(dirpath, filename)
+
+            with open(filepath, 'rt') as f:
+                for line in f:
+                    result = line_matcher.match(line)
+                    if not result:
+                        continue
+
+                    try:
+                        entry = process_line(directory, dirpath,
+                                             result.group(1), result.group(2))
+                        compile_commands.append(entry)
+                    except ValueError as err:
+                        logging.info('Could not add line from %s: %s',
+                                     filepath, err)
+
+    with open(output, 'wt') as f:
+        json.dump(compile_commands, f, indent=2, sort_keys=True)
+
+    count = len(compile_commands)
+    if count < _LOW_COUNT_THRESHOLD:
+        logging.warning(
+            'Found %s entries. Have you compiled the kernel?', count)
+
+
+if __name__ == '__main__':
+    main()
-- 
2.20.0.rc2.403.gdbc3b29805-goog

