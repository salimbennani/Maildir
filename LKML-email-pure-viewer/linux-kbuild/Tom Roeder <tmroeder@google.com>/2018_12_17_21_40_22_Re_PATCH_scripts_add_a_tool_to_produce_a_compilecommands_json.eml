Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  18 Dec 2018 08:50:21 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 503A35805FC;
	Mon, 17 Dec 2018 13:40:33 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga007-1.jf.intel.com with ESMTP; 17 Dec 2018 13:40:33 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Az9OWARdQ5TG9uv7UUNHNJJ1elGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc6/ZxGN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRPDI28?=
 =?us-ascii?q?cYUBEukPPehXoIbhulQBrxWxBRK0BO7t0TJImmP60Lcm3+g9CwzKwgotFM8Ovn?=
 =?us-ascii?q?TOq9X1Mb8fX/6yzKnN0D7Nc/RW1ing54fWaBAqvPaBXa51ccrLzkkgCR7KgUuK?=
 =?us-ascii?q?qYH+MDOV0eMNs2ef7+V+T+6gl2knqwRorzWp28wihI7JhocPxVDF8yV02II1Jd?=
 =?us-ascii?q?mmSE5+e9KkF4FQty6cOoBrQc0iW3lltDgmxrACo5K3YSYHxIo9yxLCaPGLb5KE?=
 =?us-ascii?q?7xPhWeqJPzt1hWxpdK66ihqv8UWv1ujxWtS23VtPoSdIl9fMumwW2BDO78WKSf?=
 =?us-ascii?q?V9/kmh1DuKygze6/tLLVwxmKfbJZ4t3749m5wOukrZBCD2gl/5jKqOe0Uk5Oeo?=
 =?us-ascii?q?7+Pnb634pp+TKYB0kBvyMqcwlcylB+Q3LAwOU3Kc+eSm273v5Uz5QLNUgf0qiq?=
 =?us-ascii?q?TVrozWKMABqqKkDQJZzJwv5wu8Aju6ytgVnHsKIEpAeB2djojpP1/OIOr/Dfe6?=
 =?us-ascii?q?m1mslDZrx/bbPrzuG5nNLWbMkK3nfblj705Q0Q0zzN5Z551KELEMO+zzWkDvu9?=
 =?us-ascii?q?zCFBM5MBK7w/zhCNpj0oMSQ2WPArWWMK/Kq1+H+vovI/WQZI8SoDv9L/kl5/3w?=
 =?us-ascii?q?gnMjll4dYLKk3Z8WaHC+A/RnLF+VYXvqgtcdD2gKuhAyQ/DtiF2HSTRTfWq9X7?=
 =?us-ascii?q?og5jEnD4KrFYfDSZqsgLydxii7GYdaZmBbCl+WF3foeJ6JW/MNaCKUP89gnSYI?=
 =?us-ascii?q?VbmnS489yx6usBX2xKZgLurR4icYr47s1MBp5+3PkhE/7T50D8OD3G2XTGF0mW?=
 =?us-ascii?q?UIRzkx3K1kpUx9y1GD0bV3gvBCFNxT4e9JXRk+NZLG0+N6DNXyUBrbftiVUFam?=
 =?us-ascii?q?XsmmATYpQ90r2N8OY0F9G9a4ghDZxSWqAaQYl7iKBJwy76Ld0GL9J8d7y3bayq?=
 =?us-ascii?q?Yhi0MqTddINW2jnqR/7RTcB5bVk0WFkKanbacc0zTL9GuZyWqOvVtXUAh/Uaje?=
 =?us-ascii?q?WXAfZ03Wrcn250/YTr+uD6gnPRVFycKYNqRKbdjph01cRPj/INTef36xm2CoCB?=
 =?us-ascii?q?mV3LyMcpTld38d3CrHDkgEiB4c/XCBOQg6BSehpmbeASdqFVLuZUPs7OZ/pGm6?=
 =?us-ascii?q?Tk8y0wGFcUlh26Cp9R4SgPyWU+kT0a4cuCc9tzV0G06w0M/MBNqeuQVtZqVcbs?=
 =?us-ascii?q?k74Fdcy23ZsRdwPpihL6Bkm14ffB57v0Lo1xVrFIpAldImo28tzAp3MaiYyk9O?=
 =?us-ascii?q?dyuE3ZDsPb3aMnXy/BGqa67RxlHe0NaX9r0T6PgirFXjpgWpFksk83VoyNRV13?=
 =?us-ascii?q?qc5pPXDAsdS57xU0A39wRkqLHeeCUy+4TU1Xh0O6murjDCw84pBPciyhu4Zdhf?=
 =?us-ascii?q?NL2LFQDsHMwaHcShM/EqlEWzYRICP+BS87A0Mtiid/uH3q6rIelhkCinjWRB/I?=
 =?us-ascii?q?ByzEaM+zBgRe7P2pYP2+uY0RefVzfgkFehtdj6mIBZZT0IAmWz0ynlBI5Laa10?=
 =?us-ascii?q?coYGEmOuI8yxxtVjiJ/hQX9Y9Fi/B1wY3M+lYwadb1v43QdIz0QYvWSnmTekzz?=
 =?us-ascii?q?xzizwptKuf0zDUzOT4aRUHPXRHRG98glf2IIi4lswVU1Ksbwc0ihSl/0H6x65A?=
 =?us-ascii?q?qaR7LmnTR1pIfifsI2FjVKuwqqSNY8pV5Jw0tiVXVfy2YUqGRb7lvxsazyTjEn?=
 =?us-ascii?q?NexTA6bT2ruo/1nwdniGKbN3tzqHvZecdtxRbQ/tDcRPhR3iYYSyl8kzXYGl+8?=
 =?us-ascii?q?P9yx99WOi5jDqvy+V36mVpBLcynk15mAtCi45W1tGxG/hOq8mt7kEQg71y/0yd?=
 =?us-ascii?q?9qWD7MrBb9ZInryqu7PfhmfkluGF/z9c56FptinYs3gZEawWIaiYmN/XobjWfz?=
 =?us-ascii?q?Ns1W2KLkY3oKXzILwd/V4A7+1U1nL3KJwZ/5V3qHzstgYdm6fn0Z2iYn489WD6?=
 =?us-ascii?q?eU6aROnTFprVqgsQLRff99ky8eyfQ06X4WmeEJuBc3wSWbDbAfBk1YPS3qlxSV?=
 =?us-ascii?q?4NGytqRXZGCzcbeu0Epyh8yuDLaHogtEQnb2Zo8iHTNs7sV4KF/M1Xzz6oL+d9?=
 =?us-ascii?q?XKY9McqAaUkwvegOhPM50+iOAKhSV8NGL5vH0lzfM7jBN00ZG7uoiHN3ti/Kaj?=
 =?us-ascii?q?DhFEMT31YtsZ+ivxgqZGgsaWw4evE419GjUMWZvkV/OpHygUtfT6LAaOCzw8p2?=
 =?us-ascii?q?yfGbreGw+f9Uhno2jOE5CtK3GYOn0Zwc9+SxmaIUxVmBoUUykinp4lCgCqw9Ts?=
 =?us-ascii?q?f1xj6TAW4l74twFAyuZ1NxTkVmffpQGoaio7SZSFLRpW6B1C6FnRMcCE8u1zGC?=
 =?us-ascii?q?RY9IW7rAORMmybexhIDWYRV0yGHV/jO6eh5cLa/+iEHOa+LObOYbaTqexYTfiI?=
 =?us-ascii?q?3omi0o9n/zaKK8WOMWNuD/w92kpfQ395H97VlCkISywSjyjNddKUpA+g+i1rqc?=
 =?us-ascii?q?Cy6PTqWAXy5YuWFrtdK9Nv9wqtgaeEMe6Qiz10KTJZ1pMK2H/Jx6IT3F8UiyFy?=
 =?us-ascii?q?aTatFa4MujLKTKLVgqVXFQIUaztvNMtU6KIxxglNNtDaitP21b54j+Q5C1RfVV?=
 =?us-ascii?q?zmlcGme9YKI3ymNF7cAEaLNbKGJSDEws3tYKO8T6FQg/tQtxGqpTmbFErjNCyZ?=
 =?us-ascii?q?lzb1TxCvLf1MjCaDMRNEpYGyaQxtBnbjTd78bh27McR6jTk3wb0ym3PLOnQQMT?=
 =?us-ascii?q?l6c0NRsLKQ6TlUjel4G2xE9nBlN/WLmz6F7+nELZYbqedrAiVxl+5A/Hs20ada?=
 =?us-ascii?q?7CFaS/xzgybSqt9uo1e7kuiA0DZnURxOqipVi4KPp0ltJaLZ9pxYU3be4B0N9X?=
 =?us-ascii?q?mQCwgNp9Z9CtzgoaZQyt3OlKL1MDhD8tLU8tEaB8jbM8+HNHshMRz0GD/bFgcF?=
 =?us-ascii?q?TDirNX3BiExZiv2d6nqVrp1p4qTrzb8HUbZbVUYyXsITD01pFZRWMZ5yVz8t17?=
 =?us-ascii?q?uSl8cI5GC5hALWT8RduJ3XSrSZBvC5exiDirwRWxwNiYn/IIgeLMWvx0l4bVR2?=
 =?us-ascii?q?kZ7iFE3XUtRA5CZma1ln8w127HFiQzhriAreYQS37SpWTKbskw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AnAAByFxhch0O0hNFlGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGBMIE5gQInjBWOBhRokV+EfYEkA0wHDAEBGAsIAYd?=
 =?us-ascii?q?RBSI0CQ0BAwEBAQEBAQIBEwEBAQoLCQgpIwyCNiQBgmEBAQEBAgEBAjcGAQE3A?=
 =?us-ascii?q?QQBCQEBChgJJQMMBSABBQECIBMFgx0BgXgIAQQKnEo8iWs+gh+CdgEBBYFEQIU?=
 =?us-ascii?q?iCBKLEIEcF4F/gRGCXTWDHgIBhRmCBCKJQYcMj3hWCYU9gVCBHIkmCxiBXYUcg?=
 =?us-ascii?q?nqHXyyOBosLBgIJBw8hgSVtDYEUTSMVO4JsCYISg22FFIVgHzIBgQMBAQEOjWE?=
 =?us-ascii?q?BAQ?=
X-IPAS-Result: =?us-ascii?q?A0AnAAByFxhch0O0hNFlGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGBMIE5gQInjBWOBhRokV+EfYEkA0wHDAEBGAsIAYdRBSI0CQ0BAwEBA?=
 =?us-ascii?q?QEBAQIBEwEBAQoLCQgpIwyCNiQBgmEBAQEBAgEBAjcGAQE3AQQBCQEBChgJJQM?=
 =?us-ascii?q?MBSABBQECIBMFgx0BgXgIAQQKnEo8iWs+gh+CdgEBBYFEQIUiCBKLEIEcF4F/g?=
 =?us-ascii?q?RGCXTWDHgIBhRmCBCKJQYcMj3hWCYU9gVCBHIkmCxiBXYUcgnqHXyyOBosLBgI?=
 =?us-ascii?q?JBw8hgSVtDYEUTSMVO4JsCYISg22FFIVgHzIBgQMBAQEOjWEBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,366,1539673200"; 
   d="scan'208";a="57852784"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 17 Dec 2018 13:40:31 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728562AbeLQVk2 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 17 Dec 2018 16:40:28 -0500
Received: from mail-pf1-f193.google.com ([209.85.210.193]:37563 "EHLO
        mail-pf1-f193.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727594AbeLQVk2 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 17 Dec 2018 16:40:28 -0500
Received: by mail-pf1-f193.google.com with SMTP id y126so7014024pfb.4
        for <linux-kernel@vger.kernel.org>; Mon, 17 Dec 2018 13:40:27 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=tRqDX3mvbAKAnKDtvep2dsCs/MxLTiDqqvg91a+H7gw=;
        b=jX2P+Zu1EKzHOg06kJmhb2Ih+p+ePF5hoi7VPhnoGFKyPMMMvwpDALriktE6bq2Y9e
         786y9XQQ7UYYqYgOwzKioPG1/UTjvqYCSkuFzcSVmcz2jb1EUCrDc4L75r0GWpEJd+P8
         u3wWoBypPdPyiXOZ0VeI8zKmeW1vF7KgdRF/t6cxuAsz1uVSWLo9vn629w572nu93CZ3
         NOU3dI5LzFOAcM++iJhbZ6VGepBnJAbYPNc12PNJR0INLEVKTrBBORHqYxQKyNc8N+YN
         +ZMxcMqUpPRazwzS9BvXJwHsAopR3dQz4mvlKgARCw8P7DLkoARDhOdT/58YRPg1/BB2
         qEkQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:message-id:references
         :mime-version:content-disposition:in-reply-to:user-agent;
        bh=tRqDX3mvbAKAnKDtvep2dsCs/MxLTiDqqvg91a+H7gw=;
        b=eM3sF2YPm/Q2747x3ds0Zjod8v5yMal7cUENaAP2PgB7+/i2svL+UqlFu9r0YujOqc
         Qi1xChFi6RqIIXF+bJsO82+n7X2fmouGUPRQbmq87600C/SnLJGzc8DHIiioKLwxprjG
         z2OxXzPufd5Ujax6vxxQ+AnHVZgPowuxLm4S0MtY7Z1uiL6ftkGspZR6bW/khL4iVnTr
         LnMf4RPqQRDV9kxSZrfoRUCMN9ZlFGvnsR9jqer10mEHTXWlH0ytsYbduR19UdOMczEc
         bFSlTNLcvaH0csu4fdwokE95aM3jlGHtU8bPvNLmtx14ZcmyDr243hSNUqoDwyEMKuD/
         OdYQ==
X-Gm-Message-State: AA+aEWYmoMb6k+EeLy671qC7fEzljqPtIgLsbzUg6eyiHzeYSckuz8Lt
        vhz2EWOv5PWIzgwIAV6gwzIktP4xc38R5Q==
X-Google-Smtp-Source: AFSGD/Xy9fEYONQd+4SQVofmVK5VLhj4Ju8rmGOJjtGoqYsL1htQmydtKv7EueapA+M1StCCkoVEDA==
X-Received: by 2002:a62:c101:: with SMTP id i1mr14269517pfg.80.1545082826824;
        Mon, 17 Dec 2018 13:40:26 -0800 (PST)
Received: from google.com ([2620:15c:17:4:f0b1:8ff5:16a0:5f15])
        by smtp.gmail.com with ESMTPSA id k14sm19189290pgs.52.2018.12.17.13.40.25
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Mon, 17 Dec 2018 13:40:25 -0800 (PST)
Date: Mon, 17 Dec 2018 13:40:22 -0800
From: Tom Roeder <tmroeder@google.com>
To: Masahiro Yamada <yamada.masahiro@socionext.com>
Cc: Michal Marek <michal.lkml@markovi.net>,
        Linux Kbuild mailing list <linux-kbuild@vger.kernel.org>,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>
Subject: Re: [PATCH] scripts: add a tool to produce a compile_commands.json
 file
Message-ID: <20181217214022.GA38778@google.com>
References: <20181206222318.218157-1-tmroeder@google.com>
 <CAK7LNATZm6T9bjcAxB_WQw-um-Hjkhiew6qg8CRLayr8qYzLeQ@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <CAK7LNATZm6T9bjcAxB_WQw-um-Hjkhiew6qg8CRLayr8qYzLeQ@mail.gmail.com>
User-Agent: Mutt/1.10.1 (2018-07-13)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Sat, Dec 15, 2018 at 06:37:49PM +0900, Masahiro Yamada wrote:
> On Fri, Dec 7, 2018 at 7:24 AM Tom Roeder <tmroeder@google.com> wrote:
> >
> > The LLVM/Clang project provides many tools for analyzing C source code.
> > Many of these tools are based on LibTooling
> > (https://clang.llvm.org/docs/LibTooling.html), which depends on a
> > database of compiler flags. The standard container for this database is
> > compile_commands.json, which consists of a list of JSON objects, each
> > with "directory", "file", and "command" fields.
> >
> > Some build systems, like cmake or bazel, produce this compilation
> > information directly. Naturally, Makefiles don't. However, the kernel
> > makefiles already create .<target>.o.cmd files that contain all the
> > information needed to build a compile_commands.json file.
> >
> > So, this commit adds scripts/gen_compile_commands.py, which recursively
> > searches through a directory for .<target>.o.cmd files and extracts
> > appropriate compile commands from them. It writes a
> > compile_commands.json file that LibTooling-based tools can use.
> >
> > By default, gen_compile_commands.py starts its search in its working
> > directory and (over)writes compile_commands.json in the working
> > directory. However, it also supports --output and --directory flags for
> > out-of-tree use.
> >
> > Note that while gen_compile_commands.py enables the use of clang-based
> > tools, it does not require the kernel to be compiled with clang. E.g.,
> > the following sequence of commands produces a compile_commands.json file
> > that works correctly with LibTooling.
> >
> > make defconfig
> > make
> > scripts/gen_compile_commands.py
> >
> > Also note that this script is written to work correctly in both Python 2
> > and Python 3, so it does not specify the Python version in its first
> > line.
> >
> > For an example of the utility of this script: after running
> > gen_compile_commands.json on the latest kernel version, I was able to
> > use Vim + the YouCompleteMe pluging + clangd to automatically jump to
> > definitions and declarations. Obviously, cscope and ctags provide some
> > of this functionality; the advantage of supporting LibTooling is that it
> > opens the door to many other clang-based tools that understand the code
> > directly and do not rely on regular expressions and heuristics.
> >
> > Tested: Built several recent kernel versions and ran the script against
> > them, testing tools like clangd (for editor/LSP support) and clang-check
> > (for static analysis). Also extracted some test .cmd files from a kernel
> > build and wrote a test script to check that the script behaved correctly
> > with all permutations of the --output and --directory flags.
> >
> > Signed-off-by: Tom Roeder <tmroeder@google.com>
> 
> 
> I am fine with this,
> but I have one question.
> 
> The generated compile_commands.json
> contains $(pound)

To make sure we're talking about the same thing: the instances that I've
seen of "#" occur in macro definitions in the "command" field in some of
the JSON objects. For example, I see things like
-D\"KBUILD_STR(s)=\\#s\".

> 
> How is it handled?

The Python json module takes care of escaping the output to make a valid
JSON string for the "command" field. The gen_compile_commands.py script
doesn't take any special action for that or any other character in its
output.

> Should it be replaced with '\#' ?

I don't think it needs to be changed, given my experience with this
script and its testing so far: the output seems to work for me. However,
are you running into problems due to the presence of this character or
inadequate escaping? Please let me know, and I'd be happy to look into
it.

Tom
