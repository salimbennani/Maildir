Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 08:44:59 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 4E1885805CF;
	Tue, 18 Dec 2018 14:54:30 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 18 Dec 2018 14:54:29 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AXYyvLBLW5mNHtP3i/9mcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgUL//+rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZUMhfVzJPDJ6/?=
 =?us-ascii?q?YYsBAOUOIftXoIvzqFsVtRuzBxKhBP/zxjJSmnP6wbc33/onHArb3AIgBdUOsH?=
 =?us-ascii?q?HModvrM6cSVP2+wrXPzTrdcvxZxy3945XPfxA9pPGMR7VwftTMxkYxDQPIlVqQ?=
 =?us-ascii?q?qYviPzOa0uQCrXKX4PZnVeKqkmMqrRx6rDaoxscpkIbJh4QVx0jA9SV93oY1IM?=
 =?us-ascii?q?e0SElhYd6rFpZbqiKUN5NuT888X21lvDw2xqAItJKlZiQG1ZcqywLFZ/GGcYWE?=
 =?us-ascii?q?+gzvWeePLTtkgX9pZbKyiAq3/ES9yODxU8a53VNEriZZidbAq3UA2h/d6siJSv?=
 =?us-ascii?q?Zw+1qt1DeV2AzP7+xJIU40mbfbJpMn37U+jIAcsV7ZES/zgEj2jLGZdkEj+uWw?=
 =?us-ascii?q?9eTnbavppoWGO493lA7+KKIuldK7AegiNQgORWeb9fy91L3l40L5XK1HguMqnq?=
 =?us-ascii?q?TdqpzWOMoWqrCjDwNI0Ysv9wyzAjak3dgAmHkINlNFeBaJj4jzPFHOJej1DfO+?=
 =?us-ascii?q?g1SqjTdqyOnKPr7/DZXXKHjMjrPhca96609Szgo808pf6olKCrEOPv3zQFX9tN?=
 =?us-ascii?q?/GAR8jNQy73eLnBM961oMEVmKDGrWZP7/KsV+U+uIvJPGBZIsUuDb+Nfcp/fHv?=
 =?us-ascii?q?jWIilF8ZfKmp24YXaX+iEvRnJUWZfWTjgtMbHWgWuQo+SfTgiEeeXj5Le3ayQ6?=
 =?us-ascii?q?U86yk7CI28DIfDWpqigLub0Ce7A51ZfGZGCl+XHHfsdoWEXeoMaS2ILs9glDwE?=
 =?us-ascii?q?SaauS4s72R6ysw/6zqJtLvDI9S0AqZLjyN916vXRlRE16zN4Fced02aLT2FymW?=
 =?us-ascii?q?MFXDs23KF5oUxgxVaPy6l4g/pEFdNN4/NFSBs1NZnZz+ZiEdD9RhrBfsuVSFah?=
 =?us-ascii?q?WtipGyoxTtI2w98NeUp9Ac+tjhLY0iquAr8VkaGLBZMu/qLd2XjxO9hyy3Lc2K?=
 =?us-ascii?q?Y9iFkmR9NFNXe6ia5n6wjTG4nJnl2al6mwc6QQxirN9GaZwmqIs0FVSwpwUaTD?=
 =?us-ascii?q?XXACaUrat9X55kXeT7CwDbQrKBdOycmHKqFScN3mkU1GROv/ONTZe2++hn2/BQ?=
 =?us-ascii?q?iWyb+WbIrlYWMd3D7DB0gClAwT+XWGNQ06Biq6p2LeDTpuFU/gYk/28Ol+rm+7?=
 =?us-ascii?q?QVEwzw2Qc0Jh0L+18AYPhfOAU/MTwq4EuCA5pjppBlm9wczZB8CApwV7eqVces?=
 =?us-ascii?q?0y4FFc2GLdtgx9OIGgLq94il4fdQR3o13h1xFtBopclsgqqWsgzBBuJqKAzFNB?=
 =?us-ascii?q?azSY0IjsOr3WL2ny+wyva67W213EzNaa4KAP6O48q1XiugGpGVEv83Fm09lTzn?=
 =?us-ascii?q?ud6Y/GDAsUUZLtTEk38wJ2qK3dYik4/4nUz2FjMbGosj/e3NIkHPEqyhK+cNZQ?=
 =?us-ascii?q?LqyFFBX+HNYHB8ezMuMqnVupbhUaPO1J8K40PsWmd+aJ2aKxPeZgmi6mgnpD4I?=
 =?us-ascii?q?xnzk2M8C98QPbS35kZ2/GYwheHVzDkgVahr8D7g5xLaSsTH2q/0yfkAoFRa7Z2?=
 =?us-ascii?q?fYYKD2euPsK2ys9/h57rR35X6lqjC0ka18+ufBqYd0b90hFI1UQLvXynnjO1zy?=
 =?us-ascii?q?Z1kz41tKWfxjHBw+P4eBoBJGFLXmhigU7wLoeui9AVQVanbxIulBuj/kv6w6lb?=
 =?us-ascii?q?pKJiL2jcW0tIfi72L318Xau0rLaNf8lP6JYwuyVNTOu8eUyaSqL6oxYC0yLjHn?=
 =?us-ascii?q?FSxTAhezGxp5X5mQd3iGacLHZ1sXrYdtt8xRbZ5NzAW/FR2iAKSzV/iTnSHlK8?=
 =?us-ascii?q?JcWm/c2Il5ffteCzT2ChWYdJcSnozoOAszG35XZwDh28nPCzm9vnHhY80SLg09?=
 =?us-ascii?q?lqVCPIrAvzY4Xx1qS6N/5ncVdsBFPm98V6HYR+mJMqhJ4MwXgamomV/X0fnGbz?=
 =?us-ascii?q?K9pb3rjybHgMRT4N2NPV5Anl2Et+LnOG3Y75V3Odwtd/aNm+eG8ZxiU978VSAq?=
 =?us-ascii?q?eO8LNEhTd1oka/rQ/JYvhyhDYdxeEu6H4Hme4JvgUtwz6ZArATG0lYICPtmw6J?=
 =?us-ascii?q?79C4sKVYemKvfaKs20p5mNCrFKuCrR1EWHblZpciGjd97sB+MFLPynL/8I/ld8?=
 =?us-ascii?q?fLbdIPqBKUiQzPgPZPKJI+jfcKgStnOWTgvXwq0eI7jBpu3Y2ks4iDMWli4KW5?=
 =?us-ascii?q?AhtAPD3ve8wT4i3tjbpZnsuOw4CvGZBhFi8KXZTyS/KoDSkSte/mNwuVFD08q3?=
 =?us-ascii?q?GbGafQHAOF6UdmqW7PHI6vN32NOHYZytBiTgGHJENDmAAUQCk6npkhGw+x3sPh?=
 =?us-ascii?q?d0N55i0L6l78txtB0eZoNxj5UmfCqwakcDY0SJ6DLBVI6gFO/VvaMcub7uhrBS?=
 =?us-ascii?q?FX4oWhrBCRKmycfwlID3sGWkmaCFD4JLWu+cPM8+uFBuq9MvvOZ6+BqfdFWveM?=
 =?us-ascii?q?xJKv1JZm/jmWOsWOOHliE+M02k5ZUX9lHMTZni0FSzYLmCLVc86buBC89zV3r8?=
 =?us-ascii?q?C47fTrQR/v6pGJC7dIKtVv/Ba2gaiYOu6UhSZ5LytY15wWyX/JzrgfwEAdiyV0?=
 =?us-ascii?q?ezaxFrQAsDbHTLjMla9PEx4bdyRzOdNI760i3wlNOs3bitLv2r57lP41DFhFWk?=
 =?us-ascii?q?L7msG0fswHOGW9NFLBBEaWO7WKPzzLw8frYayiTb1clvlbtxq1uTyDCU/sIiyD?=
 =?us-ascii?q?lyX1VxCoKexDljybMwdEuI6jchdhE2zjTNP9Zx2/Md93iyA2wLIuinPLM24cLS?=
 =?us-ascii?q?Zzc0dXorKM6iNYh+11G3Zd4Xp9MemEhyGZ4vHEKpYXtPtnGDh7m/hG73Q61bRV?=
 =?us-ascii?q?6jpJRPh0mCvUs95vrEuqkuiJyjp7ThVOrixHi56MvUVnIa/Z7IVPWW7Y/BIR6m?=
 =?us-ascii?q?WdExQLqMFjCt3quqBQzMDAlaPzKDhY9dLU8tARB8zVKMKBLXogPgDlGD/SDAsZ?=
 =?us-ascii?q?UzGrMXvTiFBakPGXpTWpqc0fo4PlmJsUTfdqXVk8GvpSXlVsGdUOKdFyVygtkb?=
 =?us-ascii?q?+Bi+YT4nG/qx/cVNkctZfCAKG8G/LqfQqeiPF+YBYEzKmweZgWLIr210F4QlZ9?=
 =?us-ascii?q?m4vOFgzbWtUb8X4pVRM9vEgYqCs2dWY0wU+wL1r1uHI=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AZAADieRlch0O0hNFkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGBMIE5gQInjBaLe4INFGiRYYR9gSQDTBMBARgLCAG?=
 =?us-ascii?q?HGAUiNAkNAQMBAQEBAQECARMBAQEKCwkIKSMMgjYkAYJhAQEBAQIBAQI3BgEBL?=
 =?us-ascii?q?AsBBAEJAQEKGAklAwwFIAEFAQIgEwWDHQGBeAgBBAqbPDyKKYIfgnYBAQWBREC?=
 =?us-ascii?q?FJggSixGBHBeBf4ERgl01gx4CAYUZggQiiUWHDY99VwmFP4FQgR2JKAwYgV2FH?=
 =?us-ascii?q?4J6h2Esjg+LEQYCCQcPIYElbQ2BFE0jFTuCbAmCEoNthRSFYB8yAYEDAQEBDo1?=
 =?us-ascii?q?SAQE?=
X-IPAS-Result: =?us-ascii?q?A0AZAADieRlch0O0hNFkGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGBMIE5gQInjBaLe4INFGiRYYR9gSQDTBMBARgLCAGHGAUiNAkNAQMBA?=
 =?us-ascii?q?QEBAQECARMBAQEKCwkIKSMMgjYkAYJhAQEBAQIBAQI3BgEBLAsBBAEJAQEKGAk?=
 =?us-ascii?q?lAwwFIAEFAQIgEwWDHQGBeAgBBAqbPDyKKYIfgnYBAQWBRECFJggSixGBHBeBf?=
 =?us-ascii?q?4ERgl01gx4CAYUZggQiiUWHDY99VwmFP4FQgR2JKAwYgV2FH4J6h2Esjg+LEQY?=
 =?us-ascii?q?CCQcPIYElbQ2BFE0jFTuCbAmCEoNthRSFYB8yAYEDAQEBDo1SAQE?=
X-IronPort-AV: E=Sophos;i="5.56,370,1539673200"; 
   d="scan'208";a="56906165"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 18 Dec 2018 14:53:41 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727801AbeLRWxi (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 18 Dec 2018 17:53:38 -0500
Received: from mail-pg1-f196.google.com ([209.85.215.196]:36920 "EHLO
        mail-pg1-f196.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726716AbeLRWxi (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 18 Dec 2018 17:53:38 -0500
Received: by mail-pg1-f196.google.com with SMTP id c25so6988523pgb.4
        for <linux-kernel@vger.kernel.org>; Tue, 18 Dec 2018 14:53:37 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=P5TlQZh9Fz4Rj0odi6st1Dq9S34t61Vy/4bZeHbPvtw=;
        b=mGdO4Cax7g7JxaTJNQJ0UoiQwtIXXDfv0os0D7TcFeDuhzgAIwVDy2UKlotKwd2h+2
         yFaOfSrclvTZht7JvCSAGCrncXyKDhy0J+YAxgkV6dugpuscfIgp/OUUa4i0GImDBOXa
         D8fdOxzvfhfTs62ecRrHSB0XTFhtG9BcZkjUT6jqBQwsqB1oBdBCNG8OAc/Gnf8S5Uns
         6ag273Fh8HA8emnXakQ15c3/iTC17uDWoFZ3lKW+nOXZAjf0W3qZ6s5F3+JP0SDNgQDA
         ajyCXaBXpSVBLfXgmrdTJo6UerwwGsBQrwobQwbQWDo1oQHEkI8j5Glbb0IqNiBokGjb
         9ZBg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:message-id:references
         :mime-version:content-disposition:in-reply-to:user-agent;
        bh=P5TlQZh9Fz4Rj0odi6st1Dq9S34t61Vy/4bZeHbPvtw=;
        b=lmnDlnGB9zITTYngRuIZu0payZ4n0qrbO74HKjwdv8V4Pe5ncZBLpV9Rg9jGUcDE1Z
         X5iNeZxKKkU0MqWJSf900SpX+0P/72DOo86pEPU7RMQttvy4Hx/OT6Qi+6EyQQu9IguJ
         fCSGVVEN7vCKR59jjrCkolfCmtwCalfQHh8vhzXIdlqfhj2B12eXXV/CMWL71Ew6IK0J
         vifFuoTyc72m489bqtsl20Vxz952p6WtOylrtahVWX9+rzcU/fUU1z73JUtET4YoHwbO
         GJw4Qwv03+T7wyAMz36yAgycFO3q2bn1y6B6FOUb1ziPoQpDVeWeENmrybWWa4bEUsUd
         sXZQ==
X-Gm-Message-State: AA+aEWYzc9YLNZsPk64A/ub6/x9wLxzuh1ck24Hw2TNtXQR13hWWS5pA
        oMaXwG3tQbuyh3u62n0mmSgNlE2jUuHqWw==
X-Google-Smtp-Source: AFSGD/XT3HfThfVMUQy4FIcJWs5YTSmkrLksDVtQwV/SWscYhXsl8hLq4EJ6eduPT/XdGgxkKMibsg==
X-Received: by 2002:a63:9d05:: with SMTP id i5mr814559pgd.98.1545173616986;
        Tue, 18 Dec 2018 14:53:36 -0800 (PST)
Received: from google.com ([2620:15c:17:4:f0b1:8ff5:16a0:5f15])
        by smtp.gmail.com with ESMTPSA id y12sm32161785pfk.70.2018.12.18.14.53.35
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Tue, 18 Dec 2018 14:53:36 -0800 (PST)
Date: Tue, 18 Dec 2018 14:53:31 -0800
From: Tom Roeder <tmroeder@google.com>
To: Masahiro Yamada <yamada.masahiro@socionext.com>
Cc: Michal Marek <michal.lkml@markovi.net>,
        Linux Kbuild mailing list <linux-kbuild@vger.kernel.org>,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>
Subject: Re: [PATCH] scripts: add a tool to produce a compile_commands.json
 file
Message-ID: <20181218225331.GA232743@google.com>
References: <20181206222318.218157-1-tmroeder@google.com>
 <CAK7LNATZm6T9bjcAxB_WQw-um-Hjkhiew6qg8CRLayr8qYzLeQ@mail.gmail.com>
 <20181217214022.GA38778@google.com>
 <CAK7LNATG9y04UdJ-Z5AwLHXUcnbWo5Butee0pkL+MFzds04wCA@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <CAK7LNATG9y04UdJ-Z5AwLHXUcnbWo5Butee0pkL+MFzds04wCA@mail.gmail.com>
User-Agent: Mutt/1.10.1 (2018-07-13)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Tue, Dec 18, 2018 at 11:17:35AM +0900, Masahiro Yamada wrote:
> On Tue, Dec 18, 2018 at 8:21 AM Tom Roeder <tmroeder@google.com> wrote:
> >
> > On Sat, Dec 15, 2018 at 06:37:49PM +0900, Masahiro Yamada wrote:
> > > On Fri, Dec 7, 2018 at 7:24 AM Tom Roeder <tmroeder@google.com> wrote:
> > > >
> > > > The LLVM/Clang project provides many tools for analyzing C source code.
> > > > Many of these tools are based on LibTooling
> > > > (https://clang.llvm.org/docs/LibTooling.html), which depends on a
> > > > database of compiler flags. The standard container for this database is
> > > > compile_commands.json, which consists of a list of JSON objects, each
> > > > with "directory", "file", and "command" fields.
> > > >
> > > > Some build systems, like cmake or bazel, produce this compilation
> > > > information directly. Naturally, Makefiles don't. However, the kernel
> > > > makefiles already create .<target>.o.cmd files that contain all the
> > > > information needed to build a compile_commands.json file.
> > > >
> > > > So, this commit adds scripts/gen_compile_commands.py, which recursively
> > > > searches through a directory for .<target>.o.cmd files and extracts
> > > > appropriate compile commands from them. It writes a
> > > > compile_commands.json file that LibTooling-based tools can use.
> > > >
> > > > By default, gen_compile_commands.py starts its search in its working
> > > > directory and (over)writes compile_commands.json in the working
> > > > directory. However, it also supports --output and --directory flags for
> > > > out-of-tree use.
> > > >
> > > > Note that while gen_compile_commands.py enables the use of clang-based
> > > > tools, it does not require the kernel to be compiled with clang. E.g.,
> > > > the following sequence of commands produces a compile_commands.json file
> > > > that works correctly with LibTooling.
> > > >
> > > > make defconfig
> > > > make
> > > > scripts/gen_compile_commands.py
> > > >
> > > > Also note that this script is written to work correctly in both Python 2
> > > > and Python 3, so it does not specify the Python version in its first
> > > > line.
> > > >
> > > > For an example of the utility of this script: after running
> > > > gen_compile_commands.json on the latest kernel version, I was able to
> > > > use Vim + the YouCompleteMe pluging + clangd to automatically jump to
> > > > definitions and declarations. Obviously, cscope and ctags provide some
> > > > of this functionality; the advantage of supporting LibTooling is that it
> > > > opens the door to many other clang-based tools that understand the code
> > > > directly and do not rely on regular expressions and heuristics.
> > > >
> > > > Tested: Built several recent kernel versions and ran the script against
> > > > them, testing tools like clangd (for editor/LSP support) and clang-check
> > > > (for static analysis). Also extracted some test .cmd files from a kernel
> > > > build and wrote a test script to check that the script behaved correctly
> > > > with all permutations of the --output and --directory flags.
> > > >
> > > > Signed-off-by: Tom Roeder <tmroeder@google.com>
> > >
> > >
> > > I am fine with this,
> > > but I have one question.
> > >
> > > The generated compile_commands.json
> > > contains $(pound)
> >
> > To make sure we're talking about the same thing: the instances that I've
> > seen of "#" occur in macro definitions in the "command" field in some of
> > the JSON objects. For example, I see things like
> > -D\"KBUILD_STR(s)=\\#s\".
> 
> 
> 
> When I ran this tool against the latest kernel
> (specifically, since commit 9564a8cf)
> I saw the following in "command" field.
> 
> -D\"BUILD_STR(s)=$(pound)s\"
> 
> 
> I am not sure whether it is a problem or not.
> 
> I do not care about this tool much.
> I will queue up this patch shortly if it is OK with you.

Fixed now and sent out in a v2 patch. I'm new to the kernel mailing
lists, and I don't know if I'm supposed to link the v2 patch to this
thread. From a glance at the archives, it looked to me like new versions
of patches start their own threads, so that's what I've done here.

> 
> 
> Thanks.
> 
> 
> > >
> > > How is it handled?
> >
> > The Python json module takes care of escaping the output to make a valid
> > JSON string for the "command" field. The gen_compile_commands.py script
> > doesn't take any special action for that or any other character in its
> > output.
> >
> > > Should it be replaced with '\#' ?
> >
> > I don't think it needs to be changed, given my experience with this
> > script and its testing so far: the output seems to work for me. However,
> > are you running into problems due to the presence of this character or
> > inadequate escaping? Please let me know, and I'd be happy to look into
> > it.
> >
> > Tom
> 
> 
> 
> --
> Best Regards
> Masahiro Yamada
