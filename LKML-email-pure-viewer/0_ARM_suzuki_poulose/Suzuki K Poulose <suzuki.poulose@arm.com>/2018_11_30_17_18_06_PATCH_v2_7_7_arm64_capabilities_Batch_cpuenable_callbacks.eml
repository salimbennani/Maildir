Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:21:01 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 1D30E580224;
	Fri, 30 Nov 2018 09:18:44 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga003-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 30 Nov 2018 09:18:43 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3APYZGEBw9FYNvwCnXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e4VKPad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7S60/Vza/4KdxUBLmiD?=
 =?us-ascii?q?kJOSM3/m/UjcJ/jqxboAm5pxF92IPYfJ2ZOeBicq7HYd8WWWxMVdtRWSxbBYO8?=
 =?us-ascii?q?apMCAfccPedZson9pFoOpga7CwKxHu3vzSJIhnvx3a0hzesqDAbL3Bc9H9MPrX?=
 =?us-ascii?q?TUr9T1OL0KUeCy0anIyTLDb+hI1jrm8ofIaBUhreuQUrJ3dMrc0E8iHB7GgFWI?=
 =?us-ascii?q?sYHpIS+Z2+AXv2SG4edsS/ijh3Mkpg1tuDSix8UhhpHXio4IyF3I7zh1zYkpKd?=
 =?us-ascii?q?GiVUJ3fcOoHIFSui2GMYZ9X9ksTHtyuCkgz70LoZ67czYOyJQg3xPfdfOHfJaS?=
 =?us-ascii?q?4h75V+aePy14hHR7d7K7nRqy9lKgyuLkWsm11lZFsDZFn8HSunwR0xHf8NWLR/?=
 =?us-ascii?q?Vj8ku7xDqC1Bzf5vtFLE02jabbLoQuwr80lpodq0TDGSr2lV3yjK+XcEUk5+ep?=
 =?us-ascii?q?5/3kYrr4vJ+cMZF7igXnPqQplM2/B/o3MhIVUmiF9uSzyqfj8Vf6QLpUlP02lL?=
 =?us-ascii?q?fWsJTAKcQcvK65DBdZ0pw/5BanEzemzNMYkGEDLFJEexKIkZLlOl7TIP3jCfe/?=
 =?us-ascii?q?glKskCpkxvzcP73hBInNIWbHkLv7Ybl97EtcwhIpzd9D/5JUFq0BIPXrV0/xrt?=
 =?us-ascii?q?PYDwM5PBazw+r9CNV9y5kRWWSAAqKCNKPSsFmI5v8gIuWWZY8Vvir9JOYh5/L0?=
 =?us-ascii?q?kXA5nlodd7Gz3ZQLcHC4AuhmI0KBbHruhdcOD30Gvgk5TOzsjl2CViVeZ3KzX6?=
 =?us-ascii?q?I6+zE6B5iqDYbFRoCxnrOB2D23EYFRZmBDElqMC2vnd52YW/cQbyKfOtVukicE?=
 =?us-ascii?q?VbimSI8tzwuuuxX4y7d8KurU+ysYtY/s1dRv5u3Tkw0y+iJwD8iHz26NSGR0lH?=
 =?us-ascii?q?sSRzAqxKB/vVB9ylCb3Kh7mfNYE8Zf5/dIUgggM57cwPd3C9TzWgLHY9eIR0yq?=
 =?us-ascii?q?QtSgATEtUN0xx8UCbFp6G9WnlhrDxTalA6cJl7yXA5w56r/T0GLvJ8lj0XrG1L?=
 =?us-ascii?q?Muj189QsRRM22qgap/9wvWB47NiEiZk6eqdaIB3C/C7muDzGyOvF1GXw50S6nK?=
 =?us-ascii?q?QXcfZk7Op9Tj+kzCV6OuCaggMgZZ1MGNMLVKZcPzgVVGXvjjPs/ebHy3m2qrAR?=
 =?us-ascii?q?aIx7WMbJflemkH3SXdDlQEnB4X/XqcKQc+ASKhqXrEDDNyDVLvf1/s8e5mpXOn?=
 =?us-ascii?q?T080ygaKb1Fh17u14BIVmeaQS/QJ3rIAuSchrTp0EU2539LXDdqAugVgcL9dYd?=
 =?us-ascii?q?M7/FdIy2bZuxZhMZynKqBonkQefBhvv0PyyxV3DZ1NntIurHw0wwt9N6KZ3Ela?=
 =?us-ascii?q?eDOFwJ//ILvXKmr1/BCxcKPW3lDe0NCL+qYA8vg4qlPjvB23GUom6Xloz95V03?=
 =?us-ascii?q?6E7JXQEAUSSY7xUlow9xVip7DafzMx6J/O2XxtMam7qDnC290yCeshyxagecpf?=
 =?us-ascii?q?MayeGA/zFc0aG9ahKOgwl1e1aRIEOfhY9LQoMMO+a/uGxKmrMf56nDKnkWtI+p?=
 =?us-ascii?q?p93V+L9yZmTO7HwYwFw/CB0gSbTTj8iEquvd7tmYBDYzEfBW6/ySniBI5Maax+?=
 =?us-ascii?q?Z4cLCWGyI8KpwtVynYLiW3ld9FS7HVMJxNepeQaOb1z6xQBR1UUXrWanmCei1D?=
 =?us-ascii?q?x0jjcpo7Gb3CzPxeTiaRUGNnRKRGlkkVfjP4y0g8oGU0ivaggjjAGl6lrix6hH?=
 =?us-ascii?q?uKR/KHHeQUVScCjsLGFiUaywuqCZY8FV65MosiRXUOKiblCcUbP9pxoa0yX+H2?=
 =?us-ascii?q?pR3jw7djequonnkBx+km6SMHFzrH/Bc8Fq2Rjf/MDcReJW3jceRCh3kz7XCkK+?=
 =?us-ascii?q?P9mo+9WZjJPDsuG4V2K8WZxfayjrzYWctCSl4W1mGwGwn/e2mtf/Cwg1zTf718?=
 =?us-ascii?q?V2VSXPtBv8YZPk16WgPeJnY0lnHln868VhF4F6k4swgowQ2HcAipWU+3oHjXn8?=
 =?us-ascii?q?MdFB1a3ia3oNQCYBw8TJ7wj9xE1jMnWJypr8VnWcwctufcO2Y20I1SIm88BFFr?=
 =?us-ascii?q?2U46dakitvrVq1tgbRYfl7njcAxvoi8n8ag+cVuAUzyiWRGKwdHU5dPSb0jRSH?=
 =?us-ascii?q?88i+rLlLZGaoabWwyE1+ndW7ALCDuA5cXmv5eow5HS9x9ch/NFPM0Hvu6oDrYt?=
 =?us-ascii?q?XQbNQTtgGKnBfEleRaNJUxlv8Sjyp9JW39pWEly/I8jRF2xp61po+HK2Fw/K6j?=
 =?us-ascii?q?Bh5YKyb4Z8cS+jHrkKZfkdya34GpHpV9BDoLWIHkQu6vEDIXrf7nLRqBECUgqn?=
 =?us-ascii?q?eHHrrSBQ2f511jr33RCJCnLW2XKGMazdV/RxmdOUpfjxoPXDghmp45FwaqxNHu?=
 =?us-ascii?q?cUtj5zAR4EL4pQVIyu5yKxb/VWLfrh+yajgoUJifMAZW7gZa6kbVNsye8/tzHz?=
 =?us-ascii?q?xC8Z2ntgCNMWubZwJHDWwSXkyEBlbjPqSh5NXa8uiYAPa+IOXKYbmUteNeUPKI?=
 =?us-ascii?q?z4q10oR65zaMKtmPPn56Av07xEVDXHN5G8fYmzkVSCwXjSXNb8GFqxem5y13td?=
 =?us-ascii?q?uy8PDqWALp+IuOBKFeMdRp+xCqn6iDM/Scizp+KTZdzpkM32PHyKAD3F4OjCFj?=
 =?us-ascii?q?byOiEakbui7XUq3RmrVbDxoaay5oMMtI7qQ83hRCOMLBi9P10KJ4geAxC1tfSV?=
 =?us-ascii?q?PhncSpb9QQI26hLFPHGFqLNLOeKD3XwsH3ZLmwRqFKgOpItx2/pzCbHlTnPjSC?=
 =?us-ascii?q?kTnpSh+uPftNjCGdIBxRpoW9fgxxBmjkSdLscge7P8NvjT0q3b00gWvHNG4GPj?=
 =?us-ascii?q?h6dkNNr7uQ4jtZg/V/AWNB6HVlIPKAmyaY6enYN5kXveFqAiRyi+JV/nA6x6FJ?=
 =?us-ascii?q?4yFDQfwm0BfV+9pvpUy21+CVz39kXQBIpzJjgIOQoV4kOKPX7JBMVH/IuhUX4j?=
 =?us-ascii?q?a+ERMP8uB4GMDsuuhzguDIiab0MzoKp8nJ79YfBo7ML9+DN2EsGRPzHXjfCw5T?=
 =?us-ascii?q?Hm3jDn3Wm0EIyKLazXaStJVv8pU=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AYAAC2bwFch0O0hNFjHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGDayeMEYwKgiGXNIFzLBMBh3YiNAkNAQMBAQEBAQECARMBAQEIDQkIKS+?=
 =?us-ascii?q?CNiKCZQMDAQIaClIGCQEBUANUGQWDHIICBAGnNjOKLIdshC6BVz+BEY1uAokqA?=
 =?us-ascii?q?5cIBwKRORaRHyyZd4INTSODPIInF44dPwEBMYEFAQGNSQEB?=
X-IPAS-Result: =?us-ascii?q?A0AYAAC2bwFch0O0hNFjHQEBBQEHBQGBUQgBCwGDayeMEYw?=
 =?us-ascii?q?KgiGXNIFzLBMBh3YiNAkNAQMBAQEBAQECARMBAQEIDQkIKS+CNiKCZQMDAQIaC?=
 =?us-ascii?q?lIGCQEBUANUGQWDHIICBAGnNjOKLIdshC6BVz+BEY1uAokqA5cIBwKRORaRHyy?=
 =?us-ascii?q?Zd4INTSODPIInF44dPwEBMYEFAQGNSQEB?=
X-IronPort-AV: E=Sophos;i="5.56,299,1539673200"; 
   d="scan'208";a="54422840"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 30 Nov 2018 09:18:42 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727768AbeLAE2i (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 30 Nov 2018 23:28:38 -0500
Received: from foss.arm.com ([217.140.101.70]:32774 "EHLO foss.arm.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1727733AbeLAE2i (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 30 Nov 2018 23:28:38 -0500
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.72.51.249])
        by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id 82AB0EBD;
        Fri, 30 Nov 2018 09:18:39 -0800 (PST)
Received: from en101.cambridge.arm.com (en101.cambridge.arm.com [10.1.196.93])
        by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPA id 08D4F3F5A0;
        Fri, 30 Nov 2018 09:18:37 -0800 (PST)
From: Suzuki K Poulose <suzuki.poulose@arm.com>
To: linux-arm-kernel@lists.infradead.org
Cc: linux-kernel@vger.kernel.org, will.deacon@arm.com,
        catalin.marinas@arm.com, dave.martin@arm.com, mark.rutland@arm.com,
        vladimir.murzin@arm.com, Suzuki K Poulose <suzuki.poulose@arm.com>
Subject: [PATCH v2 7/7] arm64: capabilities: Batch cpu_enable callbacks
Date: Fri, 30 Nov 2018 17:18:06 +0000
Message-Id: <1543598286-2663-8-git-send-email-suzuki.poulose@arm.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1543598286-2663-1-git-send-email-suzuki.poulose@arm.com>
References: <1543598286-2663-1-git-send-email-suzuki.poulose@arm.com>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

We use a stop_machine call for each available capability to
enable it on all the CPUs available at boot time. Instead
we could batch the cpu_enable callbacks to a single stop_machine()
call to save us some time.

Reviewed-by: Vladimiri Murzin <vladimir.murzin@arm.com>
Tested-by: Vladimiri Murzin <vladimir.murzin@arm.com>
Signed-off-by: Suzuki K Poulose <suzuki.poulose@arm.com>
---
 arch/arm64/include/asm/cpufeature.h |  3 ++
 arch/arm64/kernel/cpufeature.c      | 70 +++++++++++++++++++++++--------------
 2 files changed, 47 insertions(+), 26 deletions(-)

diff --git a/arch/arm64/include/asm/cpufeature.h b/arch/arm64/include/asm/cpufeature.h
index 7e2ec64..0a15e2c 100644
--- a/arch/arm64/include/asm/cpufeature.h
+++ b/arch/arm64/include/asm/cpufeature.h
@@ -357,6 +357,9 @@ extern DECLARE_BITMAP(cpu_hwcaps, ARM64_NCAPS);
 extern struct static_key_false cpu_hwcap_keys[ARM64_NCAPS];
 extern struct static_key_false arm64_const_caps_ready;
 
+#define for_each_available_cap(cap)		\
+	for_each_set_bit(cap, cpu_hwcaps, ARM64_NCAPS)
+
 bool this_cpu_has_cap(unsigned int cap);
 
 static inline bool cpu_have_feature(unsigned int num)
diff --git a/arch/arm64/kernel/cpufeature.c b/arch/arm64/kernel/cpufeature.c
index 13d729c..b12b9933 100644
--- a/arch/arm64/kernel/cpufeature.c
+++ b/arch/arm64/kernel/cpufeature.c
@@ -1531,11 +1531,27 @@ static void update_cpu_capabilities(u16 scope_mask)
 	}
 }
 
-static int __enable_cpu_capability(void *arg)
+/*
+ * Enable all the available capabilities on this CPU. The capabilities
+ * with BOOT_CPU scope are handled separately and hence skipped here.
+ */
+static int cpu_enable_non_boot_scope_capabilities(void *__unused)
 {
-	const struct arm64_cpu_capabilities *cap = arg;
+	int i;
+	u16 non_boot_scope = SCOPE_ALL & ~SCOPE_BOOT_CPU;
 
-	cap->cpu_enable(cap);
+	for_each_available_cap(i) {
+		const struct arm64_cpu_capabilities *cap = cpu_hwcaps_ptrs[i];
+
+		if (WARN_ON(!cap))
+			continue;
+
+		if (!(cap->type & non_boot_scope))
+			continue;
+
+		if (cap->cpu_enable)
+			cap->cpu_enable(cap);
+	}
 	return 0;
 }
 
@@ -1543,21 +1559,29 @@ static int __enable_cpu_capability(void *arg)
  * Run through the enabled capabilities and enable() it on all active
  * CPUs
  */
-static void __init
-__enable_cpu_capabilities(const struct arm64_cpu_capabilities *caps,
-			  u16 scope_mask)
+static void __init enable_cpu_capabilities(u16 scope_mask)
 {
+	int i;
+	const struct arm64_cpu_capabilities *caps;
+	bool boot_scope;
+
 	scope_mask &= ARM64_CPUCAP_SCOPE_MASK;
-	for (; caps->matches; caps++) {
-		unsigned int num = caps->capability;
+	boot_scope = !!(scope_mask & SCOPE_BOOT_CPU);
 
-		if (!(caps->type & scope_mask) || !cpus_have_cap(num))
+	for (i = 0; i < ARM64_NCAPS; i++) {
+		unsigned int num;
+
+		caps = cpu_hwcaps_ptrs[i];
+		if (!caps || !(caps->type & scope_mask))
+			continue;
+		num = caps->capability;
+		if (!cpus_have_cap(num))
 			continue;
 
 		/* Ensure cpus_have_const_cap(num) works */
 		static_branch_enable(&cpu_hwcap_keys[num]);
 
-		if (caps->cpu_enable) {
+		if (boot_scope && caps->cpu_enable)
 			/*
 			 * Capabilities with SCOPE_BOOT_CPU scope are finalised
 			 * before any secondary CPU boots. Thus, each secondary
@@ -1566,25 +1590,19 @@ __enable_cpu_capabilities(const struct arm64_cpu_capabilities *caps,
 			 * the boot CPU, for which the capability must be
 			 * enabled here. This approach avoids costly
 			 * stop_machine() calls for this case.
-			 *
-			 * Otherwise, use stop_machine() as it schedules the
-			 * work allowing us to modify PSTATE, instead of
-			 * on_each_cpu() which uses an IPI, giving us a PSTATE
-			 * that disappears when we return.
 			 */
-			if (scope_mask & SCOPE_BOOT_CPU)
-				caps->cpu_enable(caps);
-			else
-				stop_machine(__enable_cpu_capability,
-					     (void *)caps, cpu_online_mask);
-		}
+			caps->cpu_enable(caps);
 	}
-}
 
-static void __init enable_cpu_capabilities(u16 scope_mask)
-{
-	__enable_cpu_capabilities(arm64_errata, scope_mask);
-	__enable_cpu_capabilities(arm64_features, scope_mask);
+	/*
+	 * For all non-boot scope capabilities, use stop_machine()
+	 * as it schedules the work allowing us to modify PSTATE,
+	 * instead of on_each_cpu() which uses an IPI, giving us a
+	 * PSTATE that disappears when we return.
+	 */
+	if (!boot_scope)
+		stop_machine(cpu_enable_non_boot_scope_capabilities,
+			     NULL, cpu_online_mask);
 }
 
 /*
-- 
2.7.4

