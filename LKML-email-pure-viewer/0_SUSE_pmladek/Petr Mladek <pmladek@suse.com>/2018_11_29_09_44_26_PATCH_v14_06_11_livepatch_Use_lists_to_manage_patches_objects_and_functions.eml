Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 29 Nov 2018 18:19:00 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 01AAB5802E4;
	Thu, 29 Nov 2018 01:46:05 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 01:45:59 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3APeaXlB99rTkRcv9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1uoRIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CRWRPQNtfWSJCDI27?=
 =?us-ascii?q?bYQPAfEBPf5aooTmu1cCsQGzCRW2Ce/z1jNFgGL9060g0+QmFAHLxBYuEMwSsH?=
 =?us-ascii?q?TOsd77M6MSXvqow6bWzjXIcvRb2S/46IjMaB8uvO+DXbFrfMrK1EkvDB3Kgk+M?=
 =?us-ascii?q?poziOjOYz+IAuHWY4ep4Te+jlXIrpgVrrjSyyMoglJPFip8Wx1zY7yl0wYQ4Kc?=
 =?us-ascii?q?WlREN/YdOoCoZcui+aOodsXM8uXX1ktDwkxrAGtpO2ejUBxo49yB7FcfOHdpCF?=
 =?us-ascii?q?4hL9W+aVJjd1nGxleL2hiBao60SgyfPzVtOy0FlUqipJiN7MtmoC1xDL68iHTO?=
 =?us-ascii?q?Vy/lu51DqRywze7vtILV06mKbFMZIt3709moYJvUnCHCL6gED2g7WXdkUg9Oio?=
 =?us-ascii?q?8ePnYrD+q5+YNo90jBz+M6s3lsy8H+s4KA4OUHaf+eil073i80v5T6tQjvAtjK?=
 =?us-ascii?q?nZv47VJd4Bqq66HQBVyIAj5Ai7Dzu819QYh3YHIEpfeB2bl4jpJ03OIPfgAPe7?=
 =?us-ascii?q?glSskylky+rJP738GZjNKnnDkLH8fbdy8UJcyQwzzcxB6JJQEL0OPPXzWkrpvt?=
 =?us-ascii?q?zCEhA5KxC0w/rgCNhl1oMRQ2OPArODP6PVq1OI5v8vLPOKZI8aozv9L/kl5/jz?=
 =?us-ascii?q?jX42g1MdfK+p3YcJZ3C8BPhpP0KZYX/0iNcbDWgKphY+TPDtiFCaUz5TYGi9U7?=
 =?us-ascii?q?g/5jE8DoKmC4DDS5upgLyA2ie7A5JXanpHClCKDXfnaYGEV+0QZyKVJ89riiYE?=
 =?us-ascii?q?WqS5S489yRGusxf3xKB8LurU/S0Ytojv1MJv6O3Rjhwy8T10D8KA02CCVW10n2?=
 =?us-ascii?q?UIRyMo06B7u0By1lCD0a1gifxCCdNT/+9JUhs9NZPEzOx1EdbyVhjFfteIUlmm?=
 =?us-ascii?q?RNqmDCo1TtIwxd8Ofkl8F8+jjhDFwyqlHbsVm6aXC5wz96LWx2LxKNply3bayK?=
 =?us-ascii?q?khiEErTdZVOm24mKFz7QjTCJTPk0WCiamqc6MQ3CrO9GeGyWqDp0VYUA92UaXY?=
 =?us-ascii?q?UnETfErWrdLl5kzcS7+iE6goMgxEycSaMKtFdsXpjUlaRPfkINnRfni+m3muCh?=
 =?us-ascii?q?qSxrODdozqe34D0yXbE0UElwET/XCbNQkxHCuhomTeDCBwGlLreU/j7e5+qHaj?=
 =?us-ascii?q?RE8u0w6Kd1Fh16ay+hMNmfycSvYT3rUYuCchqzR4Bkq908jRC9qaowphfaNcYd?=
 =?us-ascii?q?wm7VdD1GLZsRF9P5O6I6BjgF4ebxp4v0f02xprDYVAlNAgrGk2wwpqNaKYzFRB?=
 =?us-ascii?q?eiuC0pD0JLLWJXf9/RC1Z6HNx1HRzcyZ+qEM6PQ/tVXupwWpFksk83V63NhZyX?=
 =?us-ascii?q?qc5pPWDAUMVZL9SFo49x9/p7vCeCky+5vU1WFwMamzqjLD288pCPE5xRq6ftZf?=
 =?us-ascii?q?MLmLFAn9E8ABA8iuKeoqm0Wmbx4ePeBS8rI0MN2id/ecxKGrO+Ngliq8jWtb+I?=
 =?us-ascii?q?B9zl6M9y1kR+7S3pYK3+uX3hGaWDf7lluhtN74mZpFZT0LAmWw0yzkC5NPaa1o?=
 =?us-ascii?q?eoYLD3yjI8m2xtV4mp7sVGRU9F+lB1MaxsCpfQCeYED63Q1VzU4Xu2ComTOkzz?=
 =?us-ascii?q?xolDEktqqe3C3Uz+XibhYHIXNLRG95gFfoIIi0ic0aXUeyYwgokhul+Vj1x6xB?=
 =?us-ascii?q?qKtjKGnTRF9CfzLqIGF6Tquwqr2CbtZN6JwyqyVXU+e8YVeARr7muRQa0CDjH2?=
 =?us-ascii?q?pYxD8lcTGnoZH5nx18iGKAI3d/tnvZecdsxRjB4NzQX+Je3j0DRCNgkznYGkC8?=
 =?us-ascii?q?P8W1/dWTj5rCsvqxV2W7Wp1RcCnry5iNtC+65W1sHB2+kOq/mtzhEQgmzyD708?=
 =?us-ascii?q?NmWjnPrBb5eoPrzbi1Mfp7fkl0A1/x88l6FZt/kocqhJEQxGIVhpOa/XcclWfz?=
 =?us-ascii?q?MNNb2b/xbXYXRD4LxcLV7xbh2EF5Mn2JwIf5XG2HwsR9f9m6fn8W2iUl4sBPCa?=
 =?us-ascii?q?eU76ZLkTF7o1WmtgLRfeZyni0GxvQw8n4ajPoEuA4sziWbH7ATElNUPS3qlxSU?=
 =?us-ascii?q?8d++qL9ba3qocbi1zEB+h8yuDKmeogFAX3b0YosiHSh17sllMVPDynvz6pz/eN?=
 =?us-ascii?q?nLbNIerRmUkxbGj+hIJ5M9jPsKhSx7OW3juX0p0fI0jRtr3ZuipoiIN31t/L6l?=
 =?us-ascii?q?Ah5fLjD6fNkc+jbpjaZDhMqW252vE45lGjUKWpvoUP2pHCgTtfThKwaBDjk8pm?=
 =?us-ascii?q?2HFrrYGA+V8F1moG7XE5C3K3GXI2EUzdd4SxmYOkNfmxoYXCkgkp46CwCqx9Hh?=
 =?us-ascii?q?cEFj6TAK/VP4rhpMyuR1NxjwSGvfpQGoaisqR5ibNhZZ8gZC50LNO8yE8u1zBz?=
 =?us-ascii?q?1Y/oGmrAGVKm2bYBlIDXgUWkOeAVDvJKKu5d7G8+iXHee+K/rOYbOTqe1RTfuI?=
 =?us-ascii?q?xJSv0pd48DaILMmAIn5iD/gj0EpZQX95A9jZmykISyEPlyLCcc+bpBS/+i12tM?=
 =?us-ascii?q?y/8+7rWAXg5YSREbtSLM5v9guygaeCMe6QmSl4JSxZ1pMK2X/H1rwf0EQOhCFp?=
 =?us-ascii?q?cjmnCa4AujLVTKLMhq9XCAYWZDluNMRT9aIzwAlMNdTfitP0zbN4iv81C1FYVV?=
 =?us-ascii?q?3ugM2pZMoKI32jO1PDHkqEKLOGJTjTycHtfay8UaFQjPlTtxCopTabEkrjMi6f?=
 =?us-ascii?q?mDXzSx+vMf9DjCeAMRxauYG9dAttCGf5QNLnbB27LMF4jTkszbIogXPKMHYWMS?=
 =?us-ascii?q?JgfENVsr2Q8SRYj+1/GmNb6HplKOiEmyCB4OjZKpYZq/1rAitvmuJe4XQ6zaZV?=
 =?us-ascii?q?7S5eSPx0nivSssBho1W8nuaTzTpnVUkGljEepoORvA1BPr7Y8JAIDXTF/xUWxW?=
 =?us-ascii?q?adERIHo51iENK5/+hyzcPP3Jr0KTJI9N/J84NIBdDTKceNN3cJKxflGDfISgAC?=
 =?us-ascii?q?SGjvfUTenUtGlPiMvleYqJUh4szpkpcIR6RzT0EuG7URGBI2MsYFJcJPUy8+2Z?=
 =?us-ascii?q?ufhcIF5jLqtBzVTclXvbjcS+mfR/7oLWDK3vF/exIUzOagfswoPYrh1hknMwEi?=
 =?us-ascii?q?kQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAABStP9bh0O0hNFlHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBg2snjBGMCIINFJcugXMsEwGHcSI0CQ0BAwEBAQEBAQIBEwEBAQg?=
 =?us-ascii?q?NCQgpL4I2JAGCYgMDAQIkUgYJAQEYBx8SA1QGARIFgxyCAgQBpzIzii2Ha4QrF?=
 =?us-ascii?q?4FAP4ERgmSCAokIAosZhA2QfQmKK4Z8CxiJY4c5iHiRGoINMxoIGxU7gmyCJxe?=
 =?us-ascii?q?OHj8ygQUBAY04AQE?=
X-IPAS-Result: =?us-ascii?q?A0ANAABStP9bh0O0hNFlHAEBAQQBAQcEAQGBUQcBAQsBg2s?=
 =?us-ascii?q?njBGMCIINFJcugXMsEwGHcSI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpL4I2JAGCY?=
 =?us-ascii?q?gMDAQIkUgYJAQEYBx8SA1QGARIFgxyCAgQBpzIzii2Ha4QrF4FAP4ERgmSCAok?=
 =?us-ascii?q?IAosZhA2QfQmKK4Z8CxiJY4c5iHiRGoINMxoIGxU7gmyCJxeOHj8ygQUBAY04A?=
 =?us-ascii?q?QE?=
X-IronPort-AV: E=Sophos;i="5.56,294,1539673200"; 
   d="scan'208";a="53120147"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 01:45:58 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728055AbeK2Ut4 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 29 Nov 2018 15:49:56 -0500
Received: from mx2.suse.de ([195.135.220.15]:48092 "EHLO mx1.suse.de"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1727040AbeK2Utz (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 29 Nov 2018 15:49:55 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (unknown [195.135.220.254])
        by mx1.suse.de (Postfix) with ESMTP id 03833ADBE;
        Thu, 29 Nov 2018 09:45:08 +0000 (UTC)
From: Petr Mladek <pmladek@suse.com>
To: Jiri Kosina <jikos@kernel.org>,
        Josh Poimboeuf <jpoimboe@redhat.com>,
        Miroslav Benes <mbenes@suse.cz>
Cc: Jason Baron <jbaron@akamai.com>,
        Joe Lawrence <joe.lawrence@redhat.com>,
        Evgenii Shatokhin <eshatokhin@virtuozzo.com>,
        live-patching@vger.kernel.org, linux-kernel@vger.kernel.org,
        Petr Mladek <pmladek@suse.com>, Jessica Yu <jeyu@kernel.org>
Subject: [PATCH v14 06/11] livepatch: Use lists to manage patches, objects and functions
Date: Thu, 29 Nov 2018 10:44:26 +0100
Message-Id: <20181129094431.7801-7-pmladek@suse.com>
X-Mailer: git-send-email 2.13.7
In-Reply-To: <20181129094431.7801-1-pmladek@suse.com>
References: <20181129094431.7801-1-pmladek@suse.com>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From: Jason Baron <jbaron@akamai.com>

Currently klp_patch contains a pointer to a statically allocated array of
struct klp_object and struct klp_objects contains a pointer to a statically
allocated array of klp_func. In order to allow for the dynamic allocation
of objects and functions, link klp_patch, klp_object, and klp_func together
via linked lists. This allows us to more easily allocate new objects and
functions, while having the iterator be a simple linked list walk.

The static structures are added to the lists early. It allows to add
the dynamically allocated objects before klp_init_object() and
klp_init_func() calls. Therefore it reduces the further changes
to the code.

This patch does not change the existing behavior.

Signed-off-by: Jason Baron <jbaron@akamai.com>
[pmladek@suse.com: Initialize lists before init calls]
Signed-off-by: Petr Mladek <pmladek@suse.com>
Cc: Josh Poimboeuf <jpoimboe@redhat.com>
Cc: Jessica Yu <jeyu@kernel.org>
Cc: Jiri Kosina <jikos@kernel.org>
Cc: Miroslav Benes <mbenes@suse.cz>
---
 include/linux/livepatch.h | 19 +++++++++++++++++--
 kernel/livepatch/core.c   |  9 +++++++--
 2 files changed, 24 insertions(+), 4 deletions(-)

diff --git a/include/linux/livepatch.h b/include/linux/livepatch.h
index 1366dbb159ab..662e4cf664b8 100644
--- a/include/linux/livepatch.h
+++ b/include/linux/livepatch.h
@@ -24,6 +24,7 @@
 #include <linux/module.h>
 #include <linux/ftrace.h>
 #include <linux/completion.h>
+#include <linux/list.h>
 
 #if IS_ENABLED(CONFIG_LIVEPATCH)
 
@@ -42,6 +43,7 @@
  *		can be found (optional)
  * @old_func:	pointer to the function being patched
  * @kobj:	kobject for sysfs resources
+ * @node:	list node for klp_object func_list
  * @stack_node:	list node for klp_ops func_stack list
  * @old_size:	size of the old function
  * @new_size:	size of the new function
@@ -80,6 +82,7 @@ struct klp_func {
 	/* internal */
 	void *old_func;
 	struct kobject kobj;
+	struct list_head node;
 	struct list_head stack_node;
 	unsigned long old_size, new_size;
 	bool kobj_alive;
@@ -117,6 +120,8 @@ struct klp_callbacks {
  * @funcs:	function entries for functions to be patched in the object
  * @callbacks:	functions to be executed pre/post (un)patching
  * @kobj:	kobject for sysfs resources
+ * @func_list:	dynamic list of the function entries
+ * @node:	list node for klp_patch obj_list
  * @mod:	kernel module associated with the patched object
  *		(NULL for vmlinux)
  * @kobj_alive: @kobj has been added and needs freeing
@@ -130,6 +135,8 @@ struct klp_object {
 
 	/* internal */
 	struct kobject kobj;
+	struct list_head func_list;
+	struct list_head node;
 	struct module *mod;
 	bool kobj_alive;
 	bool patched;
@@ -141,6 +148,7 @@ struct klp_object {
  * @objs:	object entries for kernel objects to be patched
  * @list:	list node for global list of registered patches
  * @kobj:	kobject for sysfs resources
+ * @obj_list:	dynamic list of the object entries
  * @kobj_alive: @kobj has been added and needs freeing
  * @enabled:	the patch is enabled (but operation may be incomplete)
  * @forced:	was involved in a forced transition
@@ -155,6 +163,7 @@ struct klp_patch {
 	/* internal */
 	struct list_head list;
 	struct kobject kobj;
+	struct list_head obj_list;
 	bool kobj_alive;
 	bool enabled;
 	bool forced;
@@ -162,14 +171,20 @@ struct klp_patch {
 	struct completion finish;
 };
 
-#define klp_for_each_object(patch, obj) \
+#define klp_for_each_object_static(patch, obj) \
 	for (obj = patch->objs; obj->funcs || obj->name; obj++)
 
-#define klp_for_each_func(obj, func) \
+#define klp_for_each_object(patch, obj)	\
+	list_for_each_entry(obj, &patch->obj_list, node)
+
+#define klp_for_each_func_static(obj, func) \
 	for (func = obj->funcs; \
 	     func->old_name || func->new_func || func->old_sympos; \
 	     func++)
 
+#define klp_for_each_func(obj, func)	\
+	list_for_each_entry(func, &obj->func_list, node)
+
 int klp_enable_patch(struct klp_patch *);
 
 void arch_klp_init_object_loaded(struct klp_patch *patch,
diff --git a/kernel/livepatch/core.c b/kernel/livepatch/core.c
index e01dfa3b58d2..c48f34272473 100644
--- a/kernel/livepatch/core.c
+++ b/kernel/livepatch/core.c
@@ -662,20 +662,25 @@ static int klp_init_patch_before_free(struct klp_patch *patch)
 		return -EINVAL;
 
 	INIT_LIST_HEAD(&patch->list);
+	INIT_LIST_HEAD(&patch->obj_list);
 	patch->kobj_alive = false;
 	patch->enabled = false;
 	patch->forced = false;
 	INIT_WORK(&patch->free_work, klp_free_patch_work_fn);
 	init_completion(&patch->finish);
 
-	klp_for_each_object(patch, obj) {
+	klp_for_each_object_static(patch, obj) {
 		if (!obj->funcs)
 			return -EINVAL;
 
+		INIT_LIST_HEAD(&obj->func_list);
 		obj->kobj_alive = false;
+		list_add_tail(&obj->node, &patch->obj_list);
 
-		klp_for_each_func(obj, func)
+		klp_for_each_func_static(obj, func) {
 			func->kobj_alive = false;
+			list_add_tail(&func->node, &obj->func_list);
+		}
 	}
 
 	if (!try_module_get(patch->mod))
-- 
2.13.7

