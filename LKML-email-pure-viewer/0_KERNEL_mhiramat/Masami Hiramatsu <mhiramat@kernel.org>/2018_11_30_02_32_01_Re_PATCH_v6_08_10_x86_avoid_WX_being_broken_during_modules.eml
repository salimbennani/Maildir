Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 11:05:59 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 59D7B580460;
	Thu, 29 Nov 2018 18:35:12 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 18:35:11 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Askghjh2xmpeGNRIjsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segSLP/xwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJPUMhRSSJPH4Cy?=
 =?us-ascii?q?YIkBD+QGMulXs4bzp0AWrRa8HgSsGOHixyVUinH0waE03OIsGhzG0gw6GNIOtW?=
 =?us-ascii?q?zZotLvO6cJS++1yajIxijBYfNXwzfy8o3IfQo9ofGXQLJ7bM3cyUwvFwPElFWf?=
 =?us-ascii?q?s4nlMCmJ1ukWsGiU8fBgVeSxhG4jsQ1xpSKvxsg1h4TPm4kbyUjE+D1nzIopId?=
 =?us-ascii?q?C0UlN3bNC6HJdKqi2XNJd6TtkjTmxqoCo2170LtJChcCQUxpkqyQTTZ+KGfoSS?=
 =?us-ascii?q?/x7uVfudLDFlj3x/Yr2/nQy98U24x+38SMa01FFKozJbktnDqH8NzQbf6suZRf?=
 =?us-ascii?q?tn+EeuxzKP2xrU6uFeLkA4javbK5g/zb4sjpcfr1jPEyvslEnrgqKaaF8o9vWr?=
 =?us-ascii?q?5uj7eLnrp52RO5dxig7kM6QunsK/Af4/MggLR2Wb/eW81Lv+/Uz2WblKjeM5kr?=
 =?us-ascii?q?PfsJ/EIcQXv6m5AgFT0ok98RayFCmm0NsGknkdNl5FewyIj5LvO17QJPD0F/C/?=
 =?us-ascii?q?g06jkDtz3fDJIqXhAonRLnjEiLrhebd9601CxwYpwtFf+olZCrUAIPL1R0/wu8?=
 =?us-ascii?q?bUDh4/Mwyo3ennDM9x2Z8ZWWKKGqWZKr/dsUeU5uIzJOmBfI8Vtyz8K/g5/fHu?=
 =?us-ascii?q?imU1mV8Afaaz25sXZ2u1HvBnI0WffHrtjc0NEWYMvgoiUuPqjEeOXiJUZ3a3R6?=
 =?us-ascii?q?g8/C00CJq6DYffQYCgmL6B3CClEZFMZWBGDVaMEXHvd4ifX/cMaSSSItJukzAe?=
 =?us-ascii?q?VLihTZMh2g+qtAPg17VnKe/U8DUCtZ3/zNh1+/HTlRYq+DNuFMSd02aNT2Jukm?=
 =?us-ascii?q?MSXTA23rtyoUh8yleFzKh5jOZUFd1V5/NVTAg6MYTQwPB9C9D3QgjBZMuGSE66?=
 =?us-ascii?q?QtW6BjE8VtExzMUIY0pnH9WijwrM3yylA7IOk7yLBZo08r/T3nTrJsZ9zWrG27?=
 =?us-ascii?q?clj1U8XsRPMmimjLZl9wfPH47Jj1mZl6GyeKsBxiHN6nmMwXCOvE5CVg5wSrvK?=
 =?us-ascii?q?XXYYakvSrtT540fCQqSqCbQmNAtB1MGDJrFLat3vkVVJWvPjNM7CbGK2nme6HQ?=
 =?us-ascii?q?yIya+UbIr2Z2Ud2z3QB1UenAAN43mKLwg+CT2no2LFEjNuE0niY0ft8el4tXO6?=
 =?us-ascii?q?QVU4zwCMb019ybW1/gQZiuCbS/MWxrgEojsuqy1oHFah2NLbE8aApwtkfKVbfd?=
 =?us-ascii?q?M94FdG2XjFtwBnOZygNaRihl8YcwR4pE7u0xR3CoNdkckltn8qzQxyKb6G31NF?=
 =?us-ascii?q?bT+XwZfwOrjPIGno4B+vc7LW2k3Z0NuO4KgP7Oo3qlr9swCpDEYt6Ghn3MRP3H?=
 =?us-ascii?q?ua5ZXKCxQSXIn1UkY28Rh6ur7bbjM854PSyX1jL620viXe1NIuAesv0gygcMtH?=
 =?us-ascii?q?MKOYCA/yFNUXBsizKOAwh1eldBMFPOBI+64yMMOrbP+G2K+tPOZ9kzOql2VH4I?=
 =?us-ascii?q?Zh0k2S8ypwUPLH35EAw/uAxAuISy/8jEu9ssDwgY1EfzASEXalxij+GYFRYbd+?=
 =?us-ascii?q?fYAVBme0Is2738lxiITpW3FF6lGjHVQG2MmydBqWblz92xBQ1EsNrXymnyu40y?=
 =?us-ascii?q?J7kzUzoqWD2yzOxvzodAAbNW5TWGlikVDsLJC0jtAbRkSpbxIllAC45Ub83KVb?=
 =?us-ascii?q?oKV/L2/OQUZHZST2LmdiUreuubqGecJA9JQosSBPWuSmfV+aUqL9owcd0y77HW?=
 =?us-ascii?q?tR3io7dzKpupX+hRB6k3iSLHVwrHrYf8F/2xHf6cfYRf5Q2DoGWSZ5hSPWBli6?=
 =?us-ascii?q?I9mm49GUm43fveC5UmKrTodTfjXzzYOcqCu74nVnAB2lkPC0gNHnEwk60Sng2t?=
 =?us-ascii?q?luVCXIqgv8Y4bx26S7N+JnYldnBFvm58VmHYF+l5M6hIsM1ngCmpWV4X0HnH/w?=
 =?us-ascii?q?MdpB2KLydnoNRSMRzN7T7wjow0ljLnOPx4LkWXSR2MphZ9+mYmwI3iIx9dxFCK?=
 =?us-ascii?q?CR7LZchyt6vkK4rR7NYfh6hjodzPou6H0AjO0Ttgsi0D6dAqwMEklCJiPjiQ6I?=
 =?us-ascii?q?79+loaVTZWavd6Ww1UVkkdCgCrGCvh9TWHLjdpg+Gi9w6911MEjQ333r9oHkZN?=
 =?us-ascii?q?7QYMoPth2TlhfMlelUJ4g3lvoXnipnImP9sGYhy+46ixxuwJ67sJKGK2Vr4KK2?=
 =?us-ascii?q?HBpYOifpaMMU/zHnlbxekdqO34CzApVhHS0GU4DyQvKvFDISqO7rNwKTEDAnrn?=
 =?us-ascii?q?ebGLzfHRKQ6Ut8rnLPFYyrOG+TJHUD0dpiQxydLlRFgA8IRDU6goI5Fgeyyczj?=
 =?us-ascii?q?akh54y4e5kXiphtQ0O5oNAT/UmTCpAeucDg0U4OSLB5X7gFE+kfUPtaS7uN1Hy?=
 =?us-ascii?q?FE4JKhqBaBJXCcZwRNFWsJQFCLB0j/Prmy4tnN6+iZBu2jL/vXfLWBs+peW+2T?=
 =?us-ascii?q?xZKo1Itm8C2BNsGOPnlkEv061VBPXXF/G8TFhToPTzYbmD7Kb86evB284DF4rt?=
 =?us-ascii?q?ij8PT3XwLi/YuPBKVTMdVs+BC2gL2PN+2KhCZ+JjZXyIkMxWLTyLUE2F4Siidu?=
 =?us-ascii?q?dySiELgatC7NSr7QlbFTDxIBdyxzM85I5bom3gZRIc7bls/11rlgg/EvFldKTk?=
 =?us-ascii?q?bhld+pZMAQJ2G9NUjKBEKKNLSAOD3KzNv7YaK6Sb1MkupUswe8tiqcE0/mJj6D?=
 =?us-ascii?q?jSXmVwizMeFQiyGWJABeuIC4chp3FWfvVs7pah2lP99xljA2xbw0hnXXNW8TKz?=
 =?us-ascii?q?R8ckVNrqGO4iNcmPlwB2tB7n99J+mehymZ9/XYKooRsfZzAiV7jeRa4HE7y7tT?=
 =?us-ascii?q?9C5FRfx1lzHUrt5huFymluiPyjx6UBtBsDpLhYSLvVl8NqXd7JVPRXHE/BdepV?=
 =?us-ascii?q?mXXjIDq9J7QvTqurwYnt7GkaPvAClH7NvO8I0XAM2Ce+ydN390FBPyETvVRCsE?=
 =?us-ascii?q?VzeuPH3EmgQJlfGT7HSQp4QSqZX2npcKDLhBWwpmRbshFk15EYlac99MVTQ+nO?=
 =?us-ascii?q?ve1ZZQ6A=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAAB3oQBch0O0hNFkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGDayeDeYgYX4sqgg0UiQqOJoFzFBgTAYd0IjQJDQE?=
 =?us-ascii?q?DAQEBAQEBAgETAQEBCA0JCCkjDII2JAGCYQEBAQECAQECHgEFGQEBMgUBBQkBA?=
 =?us-ascii?q?QoOCgEDCxoDAgM5GwYTBYMcgXUFBwEFjQ+aYGsBgQAzgnYBAQWHLAgiZolygRw?=
 =?us-ascii?q?XgUA/hCOIAoJaiQmCEoRRM4UtilkJkScLGJEcmE6BRoINTTAIgyeCGwwXiF6FT?=
 =?us-ascii?q?jEygQIDAQEDAR0TCwGMeQEB?=
X-IPAS-Result: =?us-ascii?q?A0ABAAB3oQBch0O0hNFkGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGDayeDeYgYX4sqgg0UiQqOJoFzFBgTAYd0IjQJDQEDAQEBAQEBAgETA?=
 =?us-ascii?q?QEBCA0JCCkjDII2JAGCYQEBAQECAQECHgEFGQEBMgUBBQkBAQoOCgEDCxoDAgM?=
 =?us-ascii?q?5GwYTBYMcgXUFBwEFjQ+aYGsBgQAzgnYBAQWHLAgiZolygRwXgUA/hCOIAoJai?=
 =?us-ascii?q?QmCEoRRM4UtilkJkScLGJEcmE6BRoINTTAIgyeCGwwXiF6FTjEygQIDAQEDAR0?=
 =?us-ascii?q?TCwGMeQEB?=
X-IronPort-AV: E=Sophos;i="5.56,297,1539673200"; 
   d="scan'208";a="140203795"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 18:35:10 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727336AbeK3Njs (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 30 Nov 2018 08:39:48 -0500
Received: from mail.kernel.org ([198.145.29.99]:38742 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726409AbeK3Njs (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 30 Nov 2018 08:39:48 -0500
Received: from devnote (p35161-mobac01.tokyo.ocn.ne.jp [153.233.26.161])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id D14F52081C;
        Fri, 30 Nov 2018 02:32:03 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1543545126;
        bh=7fb/mknNp2uDvoF30aUIHW5Fpu9ka7CwGvHKm9X3eFE=;
        h=Date:From:To:Cc:Subject:In-Reply-To:References:From;
        b=R3TEfebIqSMGFP5w6RT/EGLFX3OSHQLLaQT2D6Sk5h1x5m44ov9KU4DUTFNlyYTJf
         uHmNALwLYCT2Lsk5EyolS3oFdrO+XCpOOMR/zSB3wZgU4eZgyxw8xELz0vmIXqVjPM
         pVCwxz9tVN+CrrdVKujE4PtZOC9TmqeN7poqanQo=
Date: Fri, 30 Nov 2018 11:32:01 +0900
From: Masami Hiramatsu <mhiramat@kernel.org>
To: Nadav Amit <namit@vmware.com>
Cc: Ingo Molnar <mingo@redhat.com>,
        "Edgecombe, Rick P" <rick.p.edgecombe@intel.com>,
        LKML <linux-kernel@vger.kernel.org>, X86 ML <x86@kernel.org>,
        "H. Peter Anvin" <hpa@zytor.com>,
        Thomas Gleixner <tglx@linutronix.de>,
        Borislav Petkov <bp@alien8.de>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        Peter Zijlstra <peterz@infradead.org>,
        Damian Tometzki <linux_dti@icloud.com>,
        linux-integrity <linux-integrity@vger.kernel.org>,
        LSM List <linux-security-module@vger.kernel.org>,
        Andy Lutomirski <luto@kernel.org>,
        Kees Cook <keescook@chromium.org>,
        Dave Hansen <dave.hansen@intel.com>,
        Masami Hiramatsu <mhiramat@kernel.org>
Subject: Re: [PATCH v6 08/10] x86: avoid W^X being broken during modules
 loading
Message-Id: <20181130113201.c215e2a48c756230ddb48da3@kernel.org>
In-Reply-To: <5E938E6F-6BE6-4F86-AC9E-5C389B492682@vmware.com>
References: <20181120203545.34928-1-namit@vmware.com>
        <20181120203545.34928-9-namit@vmware.com>
        <5E938E6F-6BE6-4F86-AC9E-5C389B492682@vmware.com>
X-Mailer: Sylpheed 3.5.0 (GTK+ 2.24.30; x86_64-pc-linux-gnu)
Mime-Version: 1.0
Content-Type: text/plain; charset=ISO-2022-JP
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Wed, 28 Nov 2018 18:59:30 +0000
Nadav Amit <namit@vmware.com> wrote:

> > On Nov 20, 2018, at 12:35 PM, Nadav Amit <namit@vmware.com> wrote:
> > 
> > When modules and BPF filters are loaded, there is a time window in
> > which some memory is both writable and executable. An attacker that has
> > already found another vulnerability (e.g., a dangling pointer) might be
> > able to exploit this behavior to overwrite kernel code. This patch
> > prevents having writable executable PTEs in this stage.
> > 
> > In addition, avoiding having R+X mappings can also slightly simplify the
> > patching of modules code on initialization (e.g., by alternatives and
> > static-key), as would be done in the next patch.
> > 
> > To avoid having W+X mappings, set them initially as RW (NX) and after
> > they are set as RO set them as X as well. Setting them as executable is
> > done as a separate step to avoid one core in which the old PTE is cached
> > (hence writable), and another which sees the updated PTE (executable),
> > which would break the W^X protection.
> > 
> > Cc: Andy Lutomirski <luto@kernel.org>
> > Cc: Kees Cook <keescook@chromium.org>
> > Cc: Peter Zijlstra <peterz@infradead.org>
> > Cc: Dave Hansen <dave.hansen@intel.com>
> > Cc: Masami Hiramatsu <mhiramat@kernel.org>
> > Suggested-by: Thomas Gleixner <tglx@linutronix.de>
> > Suggested-by: Andy Lutomirski <luto@amacapital.net>
> > Signed-off-by: Nadav Amit <namit@vmware.com>
> > ---
> > arch/x86/kernel/alternative.c | 28 +++++++++++++++++++++-------
> > arch/x86/kernel/module.c      |  2 +-
> > include/linux/filter.h        |  6 ++++++
> > kernel/module.c               | 10 ++++++++++
> > 4 files changed, 38 insertions(+), 8 deletions(-)
> > 
> > diff --git a/arch/x86/kernel/alternative.c b/arch/x86/kernel/alternative.c
> > index 8fc4685f3117..18415e3b6000 100644
> > --- a/arch/x86/kernel/alternative.c
> > +++ b/arch/x86/kernel/alternative.c
> > @@ -667,15 +667,29 @@ void __init alternative_instructions(void)
> >  * handlers seeing an inconsistent instruction while you patch.
> >  */
> > void *__init_or_module text_poke_early(void *addr, const void *opcode,
> > -					      size_t len)
> > +				       size_t len)
> > {
> > 	unsigned long flags;
> > -	local_irq_save(flags);
> > -	memcpy(addr, opcode, len);
> > -	local_irq_restore(flags);
> > -	sync_core();
> > -	/* Could also do a CLFLUSH here to speed up CPU recovery; but
> > -	   that causes hangs on some VIA CPUs. */
> > +
> > +	if (static_cpu_has(X86_FEATURE_NX) &&
> > +	    is_module_text_address((unsigned long)addr)) {
> > +		/*
> > +		 * Modules text is marked initially as non-executable, so the
> > +		 * code cannot be running and speculative code-fetches are
> > +		 * prevented. We can just change the code.
> > +		 */
> > +		memcpy(addr, opcode, len);
> > +	} else {
> > +		local_irq_save(flags);
> > +		memcpy(addr, opcode, len);
> > +		local_irq_restore(flags);
> > +		sync_core();
> > +
> > +		/*
> > +		 * Could also do a CLFLUSH here to speed up CPU recovery; but
> > +		 * that causes hangs on some VIA CPUs.
> > +		 */
> > +	}
> > 	return addr;
> > }
> > 
> > diff --git a/arch/x86/kernel/module.c b/arch/x86/kernel/module.c
> > index b052e883dd8c..cfa3106faee4 100644
> > --- a/arch/x86/kernel/module.c
> > +++ b/arch/x86/kernel/module.c
> > @@ -87,7 +87,7 @@ void *module_alloc(unsigned long size)
> > 	p = __vmalloc_node_range(size, MODULE_ALIGN,
> > 				    MODULES_VADDR + get_module_load_offset(),
> > 				    MODULES_END, GFP_KERNEL,
> > -				    PAGE_KERNEL_EXEC, 0, NUMA_NO_NODE,
> > +				    PAGE_KERNEL, 0, NUMA_NO_NODE,
> > 				    __builtin_return_address(0));
> > 	if (p && (kasan_module_alloc(p, size) < 0)) {
> > 		vfree(p);
> > diff --git a/include/linux/filter.h b/include/linux/filter.h
> > index de629b706d1d..ee9ae03c5f56 100644
> > --- a/include/linux/filter.h
> > +++ b/include/linux/filter.h
> > @@ -704,7 +704,13 @@ static inline void bpf_prog_unlock_ro(struct bpf_prog *fp)
> > 
> > static inline void bpf_jit_binary_lock_ro(struct bpf_binary_header *hdr)
> > {
> > +	/*
> > +	 * Perform mapping changes in two stages to avoid opening a time-window
> > +	 * in which a PTE is cached in any TLB as writable, but marked as
> > +	 * executable in the memory-resident mappings (e.g., page-tables).
> > +	 */
> > 	set_memory_ro((unsigned long)hdr, hdr->pages);
> > +	set_memory_x((unsigned long)hdr, hdr->pages);
> > }
> > 
> > static inline void bpf_jit_binary_unlock_ro(struct bpf_binary_header *hdr)
> > diff --git a/kernel/module.c b/kernel/module.c
> > index 49a405891587..7cb207249437 100644
> > --- a/kernel/module.c
> > +++ b/kernel/module.c
> > @@ -1946,9 +1946,19 @@ void module_enable_ro(const struct module *mod, bool after_init)
> > 	if (!rodata_enabled)
> > 		return;
> > 
> > +	/*
> > +	 * Perform mapping changes in two stages to avoid opening a time-window
> > +	 * in which a PTE is cached in any TLB as writable, but marked as
> > +	 * executable in the memory-resident mappings (e.g., page-tables).
> > +	 */
> > 	frob_text(&mod->core_layout, set_memory_ro);
> > +	frob_text(&mod->core_layout, set_memory_x);
> > +
> > 	frob_rodata(&mod->core_layout, set_memory_ro);
> > +
> > 	frob_text(&mod->init_layout, set_memory_ro);
> > +	frob_text(&mod->init_layout, set_memory_x);
> > +
> > 	frob_rodata(&mod->init_layout, set_memory_ro);
> > 
> > 	if (after_init)
> > -- 
> > 2.17.1
> 
> Rick pointed out that I screwed up ftrace and kprobes.
> 
> For kprobes, I think I need to add set_memory_x() to alloc_insn_page() and
> change arch_ftrace_update_trampoline().

Oops, right. It should be easy to fix for kprobe :) what you need is below.

diff --git a/arch/x86/kernel/kprobes/core.c b/arch/x86/kernel/kprobes/core.c
index c33b06f..51818f3 100644
--- a/arch/x86/kernel/kprobes/core.c
+++ b/arch/x86/kernel/kprobes/core.c
@@ -431,8 +431,10 @@ void *alloc_insn_page(void)
        void *page;
 
        page = module_alloc(PAGE_SIZE);
-       if (page)
+       if (page) {
                set_memory_ro((unsigned long)page & PAGE_MASK, 1);
+               set_memory_x((unsigned long)page & PAGE_MASK, 1);
+       }
 
        return page;
 }


> 
> For arch_ftrace_update_trampoline(), I think I should remove not use
> set_memory_rw() when patching in __probe_kernel_write() should be done
> through text_poke().

right.

> 
> I$B!G(Bll give it another look and send another version later.

Thank you,

> 
> Regards,
> Nadav
> 
> 


-- 
Masami Hiramatsu <mhiramat@kernel.org>
