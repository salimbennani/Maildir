Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 11:05:53 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id DB811580213;
	Thu, 29 Nov 2018 18:27:11 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga007-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 18:27:11 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AxcW7YRc7eInghj30KnHodFGclGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc6+YxSN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRPDI28?=
 =?us-ascii?q?cYUBEukPMuRWr4f6qFQBsRSwBRK0BO7t0TJImn370Lcm3+ojDQ3KwgotFM8Ovn?=
 =?us-ascii?q?TOq9X1Mb8fX+evw6nT1zrDavJW0ir/5ojJaBAuu/SMUqhsccrK1EkkCgTIjlCQ?=
 =?us-ascii?q?qYzkJTOazOENvHKH7+d7VuKglXQnqwdvrTir3MssjZPJho0Mx13C6C53w541KM?=
 =?us-ascii?q?WmREJnZdOoCoZcui+EO4dsX88vQH1ktDw7x7AEoZK3YSgHxZo9yxLBZfGKfZKE?=
 =?us-ascii?q?7gziWeqLPDt1hW9pdbSijBio60eg0PfzVsys3VZKsCVFlt7Mu2gT1xzc9MeHUO?=
 =?us-ascii?q?Fx/kS/1jaV0QDc9OVELVozlarBJJ4t2r8wlpwNvkTfBiL6hln6gauMekk59OWk?=
 =?us-ascii?q?9f7rbqjlq5OALYN5iwPzPrwrmsOlAOQ4NgYOX3Kc+eS5zLDj+Uz5QLNXjvw5i6?=
 =?us-ascii?q?XZs47VJd4dpqGnBw9Zy4Ej6hi5Dzi4ytQVhmcHLF1bdxKdlYTpOE/BIOr+Dfih?=
 =?us-ascii?q?h1SgijBrx+rJPrH5GJXCMmDDkKv9fbZ680NczAszzdNB6J5OBbABPen+WkvwtN?=
 =?us-ascii?q?zeEx84PBa4w+fhCNVhyIweXXiDDbOeMKPXqVWI/P4gI/GQZI8JvzbwM/gl6OTv?=
 =?us-ascii?q?jX8lg1AderOl3ZsKaH+iGPRmLF6UYX7tgtcHDGcLsRAyTO3siF2eTzFTY2y+UL?=
 =?us-ascii?q?475jE+EIimF5vMRpixgLyd2ye2Bp9WZmdYBVyWEnfocIOEW/ELaC+JJs9hkzoE?=
 =?us-ascii?q?VaWuSoM71BGushP6xKRjLubO5iIYspfj3sBv5+LPjREy6SB0D8OF3m6XVGF0nm?=
 =?us-ascii?q?QIRzws0KBlu0N9yEyO0ax5g/xeCNxS6OlFUgY8NZ7A0eN6D8r+VR7GfteMUFym?=
 =?us-ascii?q?WMmpASktTtItxN8De0V9FM+kjhzZ2yqqAqUal7qEBJEv9qLc3n7xJ9tyynrc1a?=
 =?us-ascii?q?khiUUmTdVLNWG8mqF/8A3TDZbTk0qFj6aqabgc3CnV+Wie12WOol9XXBRwUarf?=
 =?us-ascii?q?W3AffVXZrdL+6kPGTL+uDLAnPxBFyc6DLKtKd9LogU9HRPflJNTRfWaxl32sCh?=
 =?us-ascii?q?aPw7OGdJDqdHkF3CXBFEgElBge8mucOgggGCituWLeAyZoFVL0fUzs9/JzqHe6?=
 =?us-ascii?q?Tk8y0gGLYFdt17uz+h4Jm/OcT+kf0a4DuCcksz90Bkqy38rKC9qcoApsZLlcYd?=
 =?us-ascii?q?I44FdAyWLZtwx8Moa8L6x4gV4eaQB3v0Lo1xV4EYhAlckqrHU3zAt9M66Y0VVB?=
 =?us-ascii?q?dy+G0pD0ILHYNm7y/BW3Ya7Mxl7eyMqW+rsI6PkgsVrjuB+mF0U8/HRnydVayG?=
 =?us-ascii?q?ac6YjQAwoUUpLxVVg3+gN+p7HbZCk9+ozV2WdtMamyrj/NxdYpCPE5xRanetdV?=
 =?us-ascii?q?KLmEGxPqE80GG8iuL/Qnmli0bh4eIO9e7q81P8O8ePuA166mJ+JgnDOgjWRa74?=
 =?us-ascii?q?FxyEOM9yxgSuHW25YJ2e2X3gyCVz3klleurtj3mZxYZTEVBme/0ynkC5JLaa1o?=
 =?us-ascii?q?YIkLDn2iI8upydVkhp7hQmJX+0SnB1wbxsCpYx2Sb1rm0A1U1EQXp2GnmCSiwz?=
 =?us-ascii?q?x1lTEpsrSQ3CjUz+v+cxoHP3ZBRHN+glf0PYi0k9caUVCobggojhek5Vz2x7NG?=
 =?us-ascii?q?pKR5NGTTRUZIfy7rL2BtSKewt7yCY9JR55MsqylYTOO8YVWCQL7nvxQayz/jH3?=
 =?us-ascii?q?dZxD0jdTGloI/5nx95iGKaNnpzt2DWecJzxRfe4tzTW/hR0yECRCl5jznXG1e9?=
 =?us-ascii?q?M8Oo/dWSi5fMrOS+W3i9WZ1UdCnh1ZmAuzej5W12HR2/mOi+m939Hgg9yyP71d?=
 =?us-ascii?q?hqVSPToRb4Y4nr0bm6MO19cklpAl/899R1GoVknoQsg5EQ3GAQho+J8nofjWfz?=
 =?us-ascii?q?LdJb1Lr9bHUXRD4H2d7V4BX/101lIXKE3Ib5VnSbwst8aNi2eGIW2iQh789UDK?=
 =?us-ascii?q?eY9qBLnSxwolCgtwLefeB9nisByfsp8HMahuAJuAk3wSmHDLEdA1JYPTDymBSS?=
 =?us-ascii?q?9N+xsr9XZGm0fLi01Up+m82hDb6YrgFdXnb5ZoktHStq4spjN1LM1WX56pv4d9?=
 =?us-ascii?q?nIcdITqhqUng/cj+hSLZI9jPsLijBhOWLgpn0l0O87gAdq3ZG7uoiHNmps8Li4?=
 =?us-ascii?q?Ah5eKj36eccT9ivxgqZZm8acx5qvEYl5GjUXQJvoSuqlHykIuvTgMwaODScwqn?=
 =?us-ascii?q?OGGbfEGQ+f6UFmr2/AEpyxNnGXImUZwstmRBWHOENfhwUUVi0gnpElDgCq2NDh?=
 =?us-ascii?q?cEBh6zAT/FH4rwVDyvlyOxnjSGvfpxqoajQpSJiZNhVW9RpP50PUMcyY8+JyED?=
 =?us-ascii?q?tU/pynrAyRNGObYx5EAn0OWkyBH1rjJKWh5cHc8+iEAeqzN/vPYbKTqexHSveH?=
 =?us-ascii?q?35Sv3pF9/zaLMMWPMWJvD/k62kpFQHB4FN7VmzQJSywLiS3Na9SXqwu7+i1yts?=
 =?us-ascii?q?q/6ujkWBrz5YuTDLtfKdVv9A63gaeANO6QhTx1KTVC1pMLyn/H1qIf3EMJiyx1?=
 =?us-ascii?q?czmtELIAtTPCTa7Km69XCQIbZD13NMdS86082QxNM9bBitzpzr54kuI1C1BdWF?=
 =?us-ascii?q?P7h8GmftYKLH+9NV/dAEaLNa+LJTnKw8HxfKO9RqdcjORStx2spzmbF1XvMSiE?=
 =?us-ascii?q?lznsTxqvK/1DjDmHPBxCv4GwagptCWnmTN78dhK3KsN4jT0ozr0ynX7KMW8cMT?=
 =?us-ascii?q?5hc0JCtLGQ7CVYgulhFGxF9HZqMe6EmyOB5enCNpkWqedrAjhzl+9C4HU10b1V?=
 =?us-ascii?q?7CRFRPxzgCTTr95urEugkumA0TdnVBtOqjBWhIOEp0liOKPZ9oVeVnbA5h4C8W?=
 =?us-ascii?q?KQCxFZ7+diX+bztr5dzJD1k7nvJTteu4bO+tAACsTIAM2AN3YkMAGvHyTbWlgr?=
 =?us-ascii?q?VzmuYETWnEVYkbmy92ecq5EmsYWkzJ8OS6VSUVUpPvAXEEJoGJoFOpghDWBsqq?=
 =?us-ascii?q?KSkMNdvSn2lxLWXsgP+8mfDv8=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAACgngBch0O0hNFaChoBAQEBAQIBA?=
 =?us-ascii?q?QEBBwIBAQEBgVEFAQEBAQsBg2snjBFfiyqCDRSJCo4mgXMUGBMBh3QiNAkNAQM?=
 =?us-ascii?q?BAQEBAQECARMBAQEIDQkIKSMMgjYkAYJhAQEBAQIBAQIkEwYBATcBBAEJAQEKG?=
 =?us-ascii?q?C4DORsGEwWDHIF1BQcBBadygWwzgnYBAQWHLAgiiliBHBeBQD+DbjWEVoYGixu?=
 =?us-ascii?q?EUTOQBgmRJwsYkRwsmCKBRnOBGk0wCDuCBGiCG4kBhU4xMoECAwEBAwEdEwsBj?=
 =?us-ascii?q?HkBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ABAACgngBch0O0hNFaChoBAQEBAQIBAQEBBwIBAQEBgVE?=
 =?us-ascii?q?FAQEBAQsBg2snjBFfiyqCDRSJCo4mgXMUGBMBh3QiNAkNAQMBAQEBAQECARMBA?=
 =?us-ascii?q?QEIDQkIKSMMgjYkAYJhAQEBAQIBAQIkEwYBATcBBAEJAQEKGC4DORsGEwWDHIF?=
 =?us-ascii?q?1BQcBBadygWwzgnYBAQWHLAgiiliBHBeBQD+DbjWEVoYGixuEUTOQBgmRJwsYk?=
 =?us-ascii?q?RwsmCKBRnOBGk0wCDuCBGiCG4kBhU4xMoECAwEBAwEdEwsBjHkBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,297,1539673200"; 
   d="scan'208";a="54344266"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 18:27:10 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727269AbeK3Nep (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 30 Nov 2018 08:34:45 -0500
Received: from mail.kernel.org ([198.145.29.99]:37968 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726549AbeK3Nep (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 30 Nov 2018 08:34:45 -0500
Received: from devnote (p35161-mobac01.tokyo.ocn.ne.jp [153.233.26.161])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 801892081C;
        Fri, 30 Nov 2018 02:27:01 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1543544824;
        bh=Vs73a5tdNjvytXo30yVfUHBKOA9Fb1+lWCgI7AvduBQ=;
        h=Date:From:To:Cc:Subject:In-Reply-To:References:From;
        b=a/JqyJXa0CQ7GWBKPp/Nlmjro6eW2JSwfj8AhqcYGndq0YzUVWb0SL2BnC5he5yHt
         Lu+ZD+BoFWUScKc+WkFlAqF19n+7tCjSA2uqnZROGc9zOWB5/xwAyTOJLaW7rrTXxM
         hbu6qv8TDRbnBbyCkMkIeG5EkhTNj9SRtUF47pj0=
Date: Fri, 30 Nov 2018 11:26:58 +0900
From: Masami Hiramatsu <mhiramat@kernel.org>
To: Steven Rostedt <rostedt@goodmis.org>
Cc: linux-kernel@vger.kernel.org, Ingo Molnar <mingo@kernel.org>,
        Andrew Morton <akpm@linux-foundation.org>,
        Thomas Gleixner <tglx@linutronix.de>,
        Peter Zijlstra <peterz@infradead.org>,
        Josh Poimboeuf <jpoimboe@redhat.com>,
        Frederic Weisbecker <frederic@kernel.org>,
        Joel Fernandes <joel@joelfernandes.org>,
        Andy Lutomirski <luto@kernel.org>,
        Mark Rutland <mark.rutland@arm.com>, systemtap@sourceware.org,
        Alexei Starovoitov <ast@kernel.org>,
        Daniel Borkmann <daniel@iogearbox.net>
Subject: Re: [RFC][PATCH 00/14] function_graph: Rewrite to allow multiple
 users
Message-Id: <20181130112658.337e92b79e243034973b6997@kernel.org>
In-Reply-To: <20181129114652.3696d6d7@gandalf.local.home>
References: <20181122012708.491151844@goodmis.org>
        <20181126182112.422b914dd00ecb36e15f7b07@kernel.org>
        <20181126113215.4259d473@gandalf.local.home>
        <20181129232927.74ca5f294e97fc58b15bf8c6@kernel.org>
        <20181129114652.3696d6d7@gandalf.local.home>
X-Mailer: Sylpheed 3.5.0 (GTK+ 2.24.30; x86_64-pc-linux-gnu)
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Thu, 29 Nov 2018 11:46:52 -0500
Steven Rostedt <rostedt@goodmis.org> wrote:

> On Thu, 29 Nov 2018 23:29:27 +0900
> Masami Hiramatsu <mhiramat@kernel.org> wrote:
> 
> > > One way to solve this is to also have a counter array that gets updated
> > > every time the index array gets updated. And save the counter to the
> > > shadow stack index as well. This way, we only call the return if the
> > > counter on the stack matches what's in the counter on the counter array
> > > for the index.  
> > 
> > Hmm, but we already know the current stack "header" entry when calling
> > handlers, don't we? I thought we just calcurate out from curr_ret_stack.
> 
> Basically we have this:
> 
>  array: | &fgraph_ops_1 | &fgraph_ops_2 | &fgraph_ops_stub | ...
> 
> On entry of function we do:
> 
	push header(including original ret_addr) onto ret_stack

> 	for (i = 0; i < array_entries; i++) {
> 		if (array[i]->entryfunc(...)) {
> 			push i onto ret_stack;
> 		}
> 	}
> 
> On the return side, we do:
> 
> 	idx = pop ret_stack;
> 
> 	array[idx]->retfunc(...);

So at this point we have the header on ret_stack, don't we? :)

Anyway, I think we may provide an API for unwinder to find correct
original return address form ret_stack. That is OK for me.


> 
> We only call the retfunc of a fgraph_ops if it returned non-zero from
> its entryfunc(). The return can happen a long time from now (which is
> why I don't save the &fgraph_ops on the ret_stack, because then we would
> never be able to free it).
> 
> In the mean time, lets say we unregistered (and freed) fgraph_ops_2 and
> then added fgraph_ops_3, so the array looks like:
> 
>  array: | &fgraph_ops_1 | &fgraph_ops_3 | &fgraph_ops_stub | ...
> 
> Then a function that was called when fgraph_ops_2 was on the stack
> returns, it will call array[1]->retfunc() which now belongs to
> fgraph_ops_3 and not fgraph_ops_2.
> 
> But if we add a counter array that gets updated when new ops are added
> to the array, we have this:
> 
>  cnt_array: |       4       |     2         |       0          |
>      array: | &fgraph_ops_1 | &fgraph_ops_2 | &fgraph_ops_stub | ...
> 
> And do:
> 
> 	for (i = 0; i < array_entries; i++) {
> 		if (array[i]->entryfunc(...)) {
> 			idx = cnt_array[i] << 8 | i;
> 			push idx onto ret_stack;
> 		}
> 	}
> 
> Then on return we have:
> 
> 	idx = pop ret_stack;
> 
> 	if (idx >> 8 == cnt_array[idx & 0xff])
> 		array[idx & 0xff]->retfunc(...);
> 
> It wouldn't call fgraph_ops_3 because we would change the cnt_array
> when we remove fgraph_ops_2 and the return would not match, as
> cnt_array[1] would then be "3".
> 
> > 
> > > > By the way, are there any way to hold a private data on each ret_stack entry?
> > > > Since kretprobe supports "entry data" passed from entry_handler to
> > > > return handler, we have to store the data or data-instance on the ret_stack.
> > > > 
> > > > This feature is used by systemtap to save the function entry data, like
> > > > function parameters etc., so that return handler analyzes the parameters
> > > > with return value.  
> > > 
> > > Yes, I remember you telling me about this at plumbers, and while I was
> > > writing this code I had that in mind. It wouldn't be too hard to
> > > implement, I just left it off for now. I also left it off because I
> > > have some questions about what exactly is needed. What size do you
> > > require to be stored. Especially if we want to keep the shadow stack
> > > smaller. I was going to find a way to implement some of the data that
> > > is already stored via the ret_stack with this instead, and make the
> > > ret_stack entry smaller. Should we allow just sizeof(long)*3? or just
> > > let user choose any size and if they run out of stack, then too bad. We
> > > just wont let it crash.  
> > 
> > I need only sizeof(unsigned long). If the kretprobe user requires more,
> > it will be fall back to current method -- get an "instance" and store
> > its address to the entry :-)
> 
> Awesome, then this shouldn't be too hard to implement.

Oops, anyway I noticed that I must store a value on each area so that we can
identify which kretprobe is using that if there are several kretprobes on same
function. So, kretprobe implementation will be something like below.

kretprobe_retfunc(trace, regs)
{
	kp = get_kprobe(trace->func);

	if (private == to_kretprobe(kp)) // this is directly mapped to current kprobe
		goto found_kretprobe;

	if (!list_empty(&kp->list)) {	// we need to find from multiple kretprobes
		list_for_each_entry(kp, &kp->list, list)
			if (private == kp)
				goto found_kretprobe;
	}

	// Or this must be an instance
	struct kretprobe_instance *ri = trace->private;
	rp = ri->rp;
	if (valid_kretprobe(rp))
		rp->handler(ri, regs);
	kretprobe_recycle_instance(ri);
	goto out;

found_kretprobe:
	struct kretprobe_instance rii = {.rp = to_kretprobe(kp),
		.ret_addr=trace->ret, .task = current}
	rp->handler(&rii, regs);

out:
	return 0;
}

I think we talked about pt_regs, which is redundant for return probe, so it should
be just a return value. (but how we pass it? trace->retval?)
That is OK for ftrace (but the transition needs more code).
And I would like to ask ebpf and systemtap people that is OK since it will change
the kernel ABI.

Thank you,

-- 
Masami Hiramatsu <mhiramat@kernel.org>
