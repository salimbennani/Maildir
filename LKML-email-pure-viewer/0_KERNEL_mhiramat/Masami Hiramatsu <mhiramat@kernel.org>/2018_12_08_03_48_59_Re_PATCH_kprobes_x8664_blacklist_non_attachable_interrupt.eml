Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 09 Dec 2018 18:54:46 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 591FD5804F7;
	Fri,  7 Dec 2018 19:49:12 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga003-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 07 Dec 2018 19:49:11 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Awo/xAxUYi6nYnVIA3DPZJa2UgaHV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhCAvqdThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGo2y?=
 =?us-ascii?q?YYsRAeQcPuhXrYf9qVwBohSiCgesH/vvxz1Ti3/q36A3yfgtHwPa0AA+Gd8FrX?=
 =?us-ascii?q?TarM/yNKcXSe27y7PHzS7ZYPNT2Df29YrGchE7of6WWLJ/a9bRyVIyFwjYiViQ?=
 =?us-ascii?q?rIzlPzKP1usXtmiU9fZgWPmsi2E5sQFxpCagxsM2honOnIIVxUnJ+CNky4g2Pd?=
 =?us-ascii?q?21UFB3bcKgHZdKqi2XOZV6Ttk/T2xrpCo20LwLtJyjcCQU1Zgr2wTTZ+GIfoSV?=
 =?us-ascii?q?+B7vSumcLDhiiH54fL+yiRC/+lW6xOLmTMm7ylNKozJFktbSsnAN0ATe6taISv?=
 =?us-ascii?q?Rj5EetwzWP2B7J6uFCP080kbDXK5k7wr4/jpYTsELDETHqmEjukqOaakEp9vK1?=
 =?us-ascii?q?5+npfLnqvIKQOoxohg3kM6kjmNSzAeEiPQgPW2ib9/681Lrm/UDhRLVKj/s2kr?=
 =?us-ascii?q?TWsZzDJsQUuLS5AwlL3YYn8hq/CDmn0NIGknkdN19FZh2HgJbzO13UI/D3E+2/?=
 =?us-ascii?q?g1Kynzdv3fzGOafhAprVInjZjLjhZap961JbyAcrydBf5pFUBa8bLPP8R0/8r9?=
 =?us-ascii?q?jYDh4/MwypzOfrEtR91oUCWW2RBq+VKr/dsViN5ug3OemDeJcVuCrhK/gi//Pu?=
 =?us-ascii?q?jWU2mV4Bfaaz2psbcnC4Hul8LEWfbnrhmdMBEWYMvgojQ+3mklyCUThPZ3msW6?=
 =?us-ascii?q?Iw/C00CIWjDY3bXICinKSB3DunHp1Rfm1GCFeMHmnye4WHXPcMbiSSIsh6nzwA?=
 =?us-ascii?q?VLihTZIh1B60uA/7zbpnMvTb+ikCuZ3/09h14vXZlQsu+jxsE8Sdz2aNQnlukW?=
 =?us-ascii?q?MTRz8226N/rVZnyliZ06h1mPhYFd1V5/NUXQY2L5/cz+pmC9/sXgLNZMuGSFGj?=
 =?us-ascii?q?Qt++GzE+Usoxw8MSY0Z6A9iijQrM3yywD78RlryEHpo08q3H0nj1JsZ9zWvG1a?=
 =?us-ascii?q?Y7g1knRMtPKXOphqpl+wfPAI7Jll2Tl7y2eqQEwC7N6GCDwHKTs05CTg5/T7/J?=
 =?us-ascii?q?XXAFaUvQttT2+EXCQ7iqCbQkNwtBzdWPKq9Lat3vkFVHS+3vONXYY2KthWiwAQ?=
 =?us-ascii?q?yEya+LbIrvY28dxjnSCFAYkwAP+naLLRUxCT2/o23AFjBuFUjgY0X38eZgrnO2?=
 =?us-ascii?q?VUs0zwCMb0182Lu54B8VhfqAS/wN2rIIojsuqzJxHFylxdLZF8KApxZ9fKVbed?=
 =?us-ascii?q?49/FZH1WfetwxhPpyhL7puhkIEfwRwpUPu0xR3CoNPkcUxqHMqzQxyKb+X0V9b?=
 =?us-ascii?q?djOY24zwNaPTKmXo4B+vbKvW0EnE0NmK4qcP9Og4q1L7sQ6zEkot7Xpm3MdV0n?=
 =?us-ascii?q?eG/ZrKERcdXoj3UkY08Bh6uarXYi0854PSyH1tPrO4sj7E29I1GuQlzgyscMtY?=
 =?us-ascii?q?MKOBDAXyCdEVB9CyKOw2nFikdhIFPP1I+KEoJc+ndvuG17StPOZvhz+miWVH4I?=
 =?us-ascii?q?Zg0kOD7SZ8S+jI34obzPGcxAeISzD8jFK5uMDthY9EfS0SHna4ySX8Ho5RZ7F9?=
 =?us-ascii?q?cpwRCWizJM273NN+iID3W35Z7VKsG0kJ2Mu0dhWMdVz92gtQ2F8ToXymnyu40j?=
 =?us-ascii?q?N1nysorqqZwCzB3eDieAAbNW5MQWlolU3sLpSsj9AGQEioaBAklRuk5Urgx6lX?=
 =?us-ascii?q?vr9/L3TVQUpTeyj2LmdiUra/t7aYYs5P7o8ovjtTUOimfV+aTbv9qQMA0yz/B2?=
 =?us-ascii?q?te2Cw7dzayt5X7hRN6kmGdLHV0rHbDYsF/3xTf5N/dRf5XwDUGQjJ1iT3WBli6?=
 =?us-ascii?q?Itmo8s+Yl5bFsuCiSW2hUodffjXszYOFrCG7/3FlAQWjn/Cvnd3qCQg73jX819?=
 =?us-ascii?q?VwVyXIrRD8b5Lv16S7N+JnY0ZpCEX968p8BoFxjI8wiIsM1ngdg5Wf5WAHnnvr?=
 =?us-ascii?q?MdVHxaL+a2IART0RzN7U+gTl2FBjIWiPx4L2TXidxsphZ9+nYmIZwC497sZKCL?=
 =?us-ascii?q?uK47xAhyd6vl24rQfJa/hngjgd0ecu6GIdg+wRvQotzyadDaoIEUhWIyPsjAiI?=
 =?us-ascii?q?4M6krKpMemmva7ew2VF6ndCgCrGCvw5dVGz4epckAS9/8MF/PEjQ333074HuYM?=
 =?us-ascii?q?PQYs4Lth2IjxfAiPBYKI42lvoPnyZmOHjyvXs4y+4glhxu3Iq3vIyGK2Vr4aK4?=
 =?us-ascii?q?DQRUNjzzZ8MP5D7tibxSkdqR34CqBp9hACkEXIP0TfK0FzIfre/oOByJED04t3?=
 =?us-ascii?q?eXA77fHRKE5UdirnLPFY2rNn6NKHkYy9ViWAeSJEhFjA8IWzU6m4YzFhq2y8z5?=
 =?us-ascii?q?bEd5+jcR60b6qhRWz+JnKQL/Xn3DpAuyaTc0VZufLAdQ7g5Y/EfYKsie7uN1Hy?=
 =?us-ascii?q?FF8Zyttg2NKmqHZwtWCWEFQFCLB1fmPrO2/9nP7/CYBvaiL/vJebiPqeteV+qR?=
 =?us-ascii?q?xZKyyIRm+SyANt6IPnlkAP02wU5DXXF/G8TElDQDUS0XlyTRb8GFoBew4DF4rs?=
 =?us-ascii?q?e68P7zQgLg+ZOPC6dOMdVo4x22gbmMN++ThCZ6KDZUzJAMxWXPyLgQwlESkTxu?=
 =?us-ascii?q?dyK2HLQEtC7NSr/Qm6BNAx4abSNzKNVH76Ym0gZRPs7bj8v/1qRkgf4tF1dFSV?=
 =?us-ascii?q?vhl9mzaswXOG69Lk3IBUaROLSCJD3G2MX3YaK6Sb1Ng+RYrRywuTCHE0D9OjSP?=
 =?us-ascii?q?jSXmVxeqMetUliGUIAReuJ2hchZqEWXjUNPmahihPNBrlzE53b00iW3MNWMHNT?=
 =?us-ascii?q?h8ckVNrqCf7C9Cg/V/HXBB4WRhLeWehymZ6OzYII4MsfR3GiR0i/5a4HMixrpV?=
 =?us-ascii?q?9i5EQvl1mCrUrtF2olCmkvOAyjxoUBdVrjZLhYSLvVhtOKnD95lAX2rE8wwJ7W?=
 =?us-ascii?q?mKFxsKoN5lWZXTvPV5zNTVmau7EjZN89OcqdEdCMjVbsuBPGAsODLmHTfVCE0O?=
 =?us-ascii?q?Sjv9Zk/FgEkItfiJ/3iU5rg7sJHpkYYVV/cPUVw0DPofA1hNH9EYJppzGDQ+nu?=
 =?us-ascii?q?jI34Yz+XOioUyJF41htZfdW6fXWK23JQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AdAABrPgtch0O0hNFkGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBVAMBAQELAYNrJ4xyjT8UiH4OkCQUGBMBh10iNwYNAQMBAQEBAQECARM?=
 =?us-ascii?q?BAQEKCwkIKSMMgjYkAYJhAQEBAQIBAQIkEwYBATcBBAEJAQEKEgMDLgMeGw0OB?=
 =?us-ascii?q?hMFgxyBagMIBQcBBac0gWwzgnYBAQWFDQ2CFAgiimSBHBeBQD+BEYMSgleIBYk?=
 =?us-ascii?q?5gXCEFEY1kAMuCY4cgyQLGJE4LI5yig2BXIF3TTAIO4JsghsMF4hehU4xMoECA?=
 =?us-ascii?q?wEBAwEdEwsBiwsBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AdAABrPgtch0O0hNFkGwEBAQEDAQEBBwMBAQGBVAMBAQE?=
 =?us-ascii?q?LAYNrJ4xyjT8UiH4OkCQUGBMBh10iNwYNAQMBAQEBAQECARMBAQEKCwkIKSMMg?=
 =?us-ascii?q?jYkAYJhAQEBAQIBAQIkEwYBATcBBAEJAQEKEgMDLgMeGw0OBhMFgxyBagMIBQc?=
 =?us-ascii?q?BBac0gWwzgnYBAQWFDQ2CFAgiimSBHBeBQD+BEYMSgleIBYk5gXCEFEY1kAMuC?=
 =?us-ascii?q?Y4cgyQLGJE4LI5yig2BXIF3TTAIO4JsghsMF4hehU4xMoECAwEBAwEdEwsBiws?=
 =?us-ascii?q?BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,328,1539673200"; 
   d="scan'208";a="65893032"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 07 Dec 2018 19:49:09 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726107AbeLHDtE (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 7 Dec 2018 22:49:04 -0500
Received: from mail.kernel.org ([198.145.29.99]:59866 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726077AbeLHDtE (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 7 Dec 2018 22:49:04 -0500
Received: from devnote (NE2965lan1.rev.em-net.ne.jp [210.141.244.193])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 1E97C2083D;
        Sat,  8 Dec 2018 03:49:00 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1544240942;
        bh=9OmH9ZXqtw3frSj3RoK8S9X5vqtPfpoJlTo3k5sBb9g=;
        h=Date:From:To:Cc:Subject:In-Reply-To:References:From;
        b=gkEeU+F1Pe1UYalXlMHsaUavGFYFujLV9ZAOS9ljHVkse9mEMHpNkahaUhgkxL2fD
         a5Vaihnt8Briw1/86MDYUX+kHNV2FVn49I48h5+8FcFuu0mwQAGHdF0cpKNgmyKb1k
         2psfvxp9lnMN5MuZQPLKcxYeBWHtTbsp6QioXrO4=
Date: Sat, 8 Dec 2018 12:48:59 +0900
From: Masami Hiramatsu <mhiramat@kernel.org>
To: Andrea Righi <righi.andrea@gmail.com>
Cc: "Naveen N. Rao" <naveen.n.rao@linux.vnet.ibm.com>,
        Anil S Keshavamurthy <anil.s.keshavamurthy@intel.com>,
        "David S. Miller" <davem@davemloft.net>,
        Yonghong Song <yhs@fb.com>, Andy Lutomirski <luto@kernel.org>,
        Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        "H. Peter Anvin" <hpa@zytor.com>, x86@kernel.org,
        linux-kernel@vger.kernel.org
Subject: Re: [PATCH] kprobes: x86_64: blacklist non-attachable interrupt
 functions
Message-Id: <20181208124859.7318e32abfab4cc6dc2da3a8@kernel.org>
In-Reply-To: <20181207175805.GA1369@Dell>
References: <20181206095648.GA8249@Dell>
        <20181207234731.f52a8c1eff6c0e72c073ad40@kernel.org>
        <20181208010120.c3eda9042912068aecc68317@kernel.org>
        <20181207175805.GA1369@Dell>
X-Mailer: Sylpheed 3.5.0 (GTK+ 2.24.30; x86_64-pc-linux-gnu)
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Fri, 7 Dec 2018 18:58:05 +0100
Andrea Righi <righi.andrea@gmail.com> wrote:

> On Sat, Dec 08, 2018 at 01:01:20AM +0900, Masami Hiramatsu wrote:
> > Hi Andrea and Ingo,
> > 
> > Here is the patch what I meant. I just ran it on qemu-x86, and seemed working.
> > After introducing this patch, I will start adding arch_populate_kprobe_blacklist()
> > to some arches.
> > 
> > Thank you,
> > 
> > [RFC] kprobes: x86/kprobes: Blacklist symbols in arch-defined prohibited area
> > 
> > From: Masami Hiramatsu <mhiramat@kernel.org>
> > 
> > Blacklist symbols in arch-defined probe-prohibited areas.
> > With this change, user can see all symbols which are prohibited
> > to probe in debugfs.
> > 
> > All archtectures which have custom prohibit areas should define
> > its own arch_populate_kprobe_blacklist() function, but unless that,
> > all symbols marked __kprobes are blacklisted.
> 
> What about iterating all symbols and use arch_within_kprobe_blacklist()
> to check if we need to blacklist them or not.

Sorry, I don't want to iterate all ksyms since it may take a long time
(especially embedded small devices.)

> 
> In this way we don't have to introduce an
> arch_populate_kprobe_blacklist() for each architecture.

Hmm, I had a same idea, but there are some arch which prohibit probing
extable entries (e.g. arm64.) For correctness of the blacklist, I think
it should be listed (not entire the function body).
I also rather like to remove arch_within_kprobe_blacklist() instead.

Thank you,

> 
> Something like the following maybe.
> 
> Thanks.
> 
> [RFC] kprobes: blacklist all symbols in arch-defined prohibited area
> 
> From: Andrea Righi <righi.andrea@gmail.com>
> 
> Blacklist symbols in arch-defined probe-prohibited areas.
> With this change, user can see all symbols which are prohibited
> to probe in debugfs.
> 
> Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
> Signed-off-by: Andrea Righi <righi.andrea@gmail.com>
> ---
>  kernel/kprobes.c | 55 +++++++++++++++++++++++++++++++++++++++++--------------
>  1 file changed, 41 insertions(+), 14 deletions(-)
> 
> diff --git a/kernel/kprobes.c b/kernel/kprobes.c
> index 90e98e233647..e67598dd7468 100644
> --- a/kernel/kprobes.c
> +++ b/kernel/kprobes.c
> @@ -2093,6 +2093,35 @@ void dump_kprobe(struct kprobe *kp)
>  }
>  NOKPROBE_SYMBOL(dump_kprobe);
>  
> +static int kprobe_blacklist_add(unsigned long entry)
> +{
> +	struct kprobe_blacklist_entry *ent;
> +	unsigned long offset = 0, size = 0;
> +
> +	if (!kernel_text_address(entry) ||
> +	    !kallsyms_lookup_size_offset(entry, &size, &offset))
> +		return -EINVAL;
> +
> +	ent = kmalloc(sizeof(*ent), GFP_KERNEL);
> +	if (!ent)
> +		return -ENOMEM;
> +	ent->start_addr = entry;
> +	ent->end_addr = entry + size;
> +	INIT_LIST_HEAD(&ent->list);
> +	list_add_tail(&ent->list, &kprobe_blacklist);
> +
> +	return 0;
> +}
> +
> +static int arch_populate_kprobe_blacklist(void *data, const char *name,
> +					  struct module *mod,
> +					  unsigned long entry)
> +{
> +	if (arch_within_kprobe_blacklist(entry))
> +		kprobe_blacklist_add(entry);
> +	return 0;
> +}
> +
>  /*
>   * Lookup and populate the kprobe_blacklist.
>   *
> @@ -2104,24 +2133,22 @@ NOKPROBE_SYMBOL(dump_kprobe);
>  static int __init populate_kprobe_blacklist(unsigned long *start,
>  					     unsigned long *end)
>  {
> -	unsigned long *iter;
> -	struct kprobe_blacklist_entry *ent;
> -	unsigned long entry, offset = 0, size = 0;
> +	unsigned long entry, *iter;
> +	int ret;
>  
> +	/* Blacklist all arch_within_kprobe_blacklist() symbols */
> +        mutex_lock(&module_mutex);
> +	kallsyms_on_each_symbol(arch_populate_kprobe_blacklist, NULL);
> +        mutex_unlock(&module_mutex);
> +
> +	/* Add explicitly blacklisted symbols */
>  	for (iter = start; iter < end; iter++) {
>  		entry = arch_deref_entry_point((void *)*iter);
> -
> -		if (!kernel_text_address(entry) ||
> -		    !kallsyms_lookup_size_offset(entry, &size, &offset))
> +		ret = kprobe_blacklist_add(entry);
> +		if (ret == -EINVAL)
>  			continue;
> -
> -		ent = kmalloc(sizeof(*ent), GFP_KERNEL);
> -		if (!ent)
> -			return -ENOMEM;
> -		ent->start_addr = entry;
> -		ent->end_addr = entry + size;
> -		INIT_LIST_HEAD(&ent->list);
> -		list_add_tail(&ent->list, &kprobe_blacklist);
> +		if (ret < 0)
> +			return ret;
>  	}
>  	return 0;
>  }


-- 
Masami Hiramatsu <mhiramat@kernel.org>
