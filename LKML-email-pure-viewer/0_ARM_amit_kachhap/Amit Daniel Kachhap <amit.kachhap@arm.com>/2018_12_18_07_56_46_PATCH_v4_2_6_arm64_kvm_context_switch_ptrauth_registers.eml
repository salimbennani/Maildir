Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  18 Dec 2018 18:08:39 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 148315805FC;
	Mon, 17 Dec 2018 23:57:29 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga004-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 17 Dec 2018 23:57:29 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AALfwlhKNzaU7Jx6FsdmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgULvv9rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZXshfSTFPDI2/?=
 =?us-ascii?q?YYUIDeUBM/1Yr5H/qlYVsReyGROhCP/1xzNUmnP727Ax3eQ7EQHB2QwtB84DsH?=
 =?us-ascii?q?HVrNXpKawcX/q6zK/JzTrda/NdxDLz55LUfRAhofGDR6pwetfWxEY1EgPFj0mQ?=
 =?us-ascii?q?pZbmPzyPyusNs2ib4PB4Ve+0kWEnsQRxriKzyccrj4nEn4QYwU3H+yVh2Is5O8?=
 =?us-ascii?q?G0RUphbdK5HpZcqTuWO5Z1T88+WW1luSQ3xqUYtZKmfiUG0okryhHDZ/CdboSE?=
 =?us-ascii?q?/g/vWPyTLDtkgn9uZaixiAyo8Ue6z+3xTsm030hOripCitTMqH8N2ALJ6sSdSf?=
 =?us-ascii?q?ty4F2h2TCR2ADX8O1EJlo0laXDJ54gxL4/iIYTvFzdEiPqnEj6lrKae0s69uSy?=
 =?us-ascii?q?9ujqYanqqoWdOoJ2kg3+N74hms27AeQ2KAgOWG2b9Py41L3i+035XbpLguQ1kq?=
 =?us-ascii?q?bHqpDaI9oUpqqgDw9S3Icj7QiwDy293dQGknkIMkhFdAiEj4f3IVHOJu73DfOl?=
 =?us-ascii?q?j1SrijdryOjKPqf9DZXVMnjDjLDhcK55605dywo808pT5p1JCrwaJPLzW0nxtM?=
 =?us-ascii?q?HXDxMjMgy0xfrnB8t51o8ERW2PBaqZOrvIsVCU/uIvP/WMZIgNtTb9Mfcl5uLu?=
 =?us-ascii?q?gmU+mVMHfampwIEYaHa3Hvl9J0WZYHzsgsoOEGsQvwo+SvDqh0OGUTJJe3myWK?=
 =?us-ascii?q?c87CkhCI26FYfDWpytgLuZ0Se5GZ1ZeHpKClOLEXfucYWEXOwBaCaTIs9njzwF?=
 =?us-ascii?q?WqKtS44n1RGyqgD6z6BrIfbT+i0drZjjzsR65/XPlREu8jx5F96S03qNT2FznW?=
 =?us-ascii?q?MEXSU207p9oUFmzleD0K54g+FXFNBJ5vNJVBs6OoDYz+BgF9/yXQfBdM+TSFm6?=
 =?us-ascii?q?WtWmHS0xTtUpzt8NeUl9Hc+ujhTC3yWwBb8VmKeGBJg18qLawnjwKNxxy3fA1K?=
 =?us-ascii?q?k9kVYmRtFDOnGhhq567wLTHZLGk12Fl6a2cqQRxDPC+32dzWWQpk1YUBR/UaPe?=
 =?us-ascii?q?XX8BYEvaqtD55kDHT7+qErknNgpBycifKqpFcNHpjFNGROv9N9TaeW6+h2CwBR?=
 =?us-ascii?q?OQzLOWcIXqY3kd3DnaCEUcjg8c52iGOhYkCiehuW3eCiduGkzpY0739el+qXW7?=
 =?us-ascii?q?TlI7zg2Qbk1h0aa19QARhfCGV/wT2bcEsj87qzpoBFa9w87WC92Yqgp9faVcZN?=
 =?us-ascii?q?Q94EtH1WPZrQB9IoasL6d4hl4acgR3uUzu2g5zCoVBl8gqsXwrwBBzKaKezFNO?=
 =?us-ascii?q?aTeY0YrsNb3QL2n45AqvZLLO2lHCzNaW/b8C5+48q1r9swCmCEoj/2983NlIzn?=
 =?us-ascii?q?ST/JPKDAkVUZLvSUs38xl6p7fHYigy/Y/U1HtsMbWqvT/Gwd4mGOwlyhO4dddF?=
 =?us-ascii?q?LKyEDBPyE9EdB8W2KO0qhkKlYQ4eMOFT9K47JcWmd/Sd1a6vPeZgmi+mjGtd7I?=
 =?us-ascii?q?B81EKM6zRzSurS05kZxPGY2xONVy3gg1e5rsD3hYdEaCkIHmq+1SfrHpRRabB1?=
 =?us-ascii?q?fYoRD2ehPde3xtRni5HxQXFY8EOsCE0c2M+ufxqfdFj93QxW1UQKrn2rgyq4zz?=
 =?us-ascii?q?pokz43qqqTxjDBw+PndBAfIG5EWHFijUvwIYizl90bXEmoYxIplRe//kb62q5b?=
 =?us-ascii?q?qb97L2nSR0dIYif3I3tjUqu2qrqNfcpP5Ik0viVQVeS2eUqaRaLloxsGzyPjGH?=
 =?us-ascii?q?NTxDIheDGwuZX5nBt6hHiGLHlpr3rZesBwxRHB69zaXvNR2jsGRC9liTjYHFS8?=
 =?us-ascii?q?Pt+p/cmKmJfHqOyxS2WhVphLeynx0YyArDe75XFtARCnn/G8gNrnHRI40S/60d?=
 =?us-ascii?q?lnTiHIrBf6Yon22KW2K+Nnfk90BFDi78p2AJ1xkow1hJsIw3gVmo2V/WYbkWf0?=
 =?us-ascii?q?Kdhb2rjxbHsXST4L3t7a+g7l2EJ4I3KNxoL5UGidw8R7a9m7ZGMWxjwy78RQBK?=
 =?us-ascii?q?iI67xEmDN/okCkogLJffh9gjAdxOMr6H4bgOEGohAhzyuDDbAJAUlXIzbsmA+W?=
 =?us-ascii?q?4NCko6Vaf2Kvcbm21EpjktGtFrCCogdAWHnnfpcuBzN/7sJ6MFjUyn389pnkeM?=
 =?us-ascii?q?XMbdIUrhCUjxDAj+1PJJMwjPUKgzdnOXnmvX0k0OM7iR1u3ZenvImIMWlt/aS5?=
 =?us-ascii?q?AgJGOT3xfc8c5jbtjaNGlMaMw4+vBolhGikMXJbwVv2nCjUStfD6NwqUFD08t2?=
 =?us-ascii?q?yWGb7eHQ+Z9UdnoGjDE5GtN3GLOnYZyc9uSwWaJExamAoURik1noYlFgC2w8zs?=
 =?us-ascii?q?aEV56SoU5lHmsRtA0P5oOwP8UmfCpweodzE0R4KELBdN6gFC5kHVMdGR7+5pHi?=
 =?us-ascii?q?FY+IGhoxKJKmCBewtICmQJUFSeB1//Jrmu+cXA8++AC+u+KPvOfKyOqfFEWPeO?=
 =?us-ascii?q?356vyYxm/zCDNsiUOnliDvs72ldMXHxjGsTZnSkPRDITly7Xc8GboxK88DVtrs?=
 =?us-ascii?q?+j6PTrRB7v5YyXBrtSL9pv+hO2gaSCN+KKhyZ5MzFY1pwSyn/S1bgfx0UfiyVv?=
 =?us-ascii?q?dzmrDLQBujTBTKPWmq9LEREbbzl/O9dP76I5xgNNI9LUisvp1r5kif44E01KVU?=
 =?us-ascii?q?H6lcGze8MLI3uxNFfGBEuQMLSGJDvLw9z4YK+mSL1QivlUuAO0uTqBD0DjOTGD?=
 =?us-ascii?q?nSHzVx+zKeFMkD2bPBtGtYGhcxZtDHLvQ878ZhKnMN94kzs2zKYwhnPLM24cLD?=
 =?us-ascii?q?d9f1lMrr2W8SNXnPF/F3Zd4XpiKOmOgzyZ4PXAKpYKrftrBTx5luJA73Q8zrtV?=
 =?us-ascii?q?7SdES+R0mSvStNFupV6mn/KLyjpmVhpOtzlKiJiKvUVkJaXW6J1AVWzY8xIK6G?=
 =?us-ascii?q?XDQygN8t9kDMD//qlKz53Mmbj1JTNq99PP4dBaBs7aMsuLPXMtdx3zF236FgwA?=
 =?us-ascii?q?GBeuNH2Xq0VbkfyWvl6cpZg6o4CkzJMLS6MdV1U+FvMTEmxsBtlEK5ByCGB32Y?=
 =?us-ascii?q?WHhdIFsCLt5CLaQ99X69WeDqqf?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AUAADNpxhch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUgYBAQsBgmmBAieYDoIhl0YUgVg0AxABgUuGEyI1CA0BAwEBAQEBAQIBEwE?=
 =?us-ascii?q?BAQoLCQgpIwyCNiQBgmIDAwECJFIGCQEBHDQDJSEOEQgFgx0BggAEAah7M4o7h?=
 =?us-ascii?q?36EQYFXP4ERh1gUhgYCiSIggXiFFJBTBwKHD4YvhCMWgiqPKps2A4IJMxojgzw?=
 =?us-ascii?q?Jgh4XhhqICzcBATEBgQQBAYsrgk0BAQ?=
X-IPAS-Result: =?us-ascii?q?A0AUAADNpxhch0O0hNFkHAEBAQQBAQcEAQGBUgYBAQsBgmm?=
 =?us-ascii?q?BAieYDoIhl0YUgVg0AxABgUuGEyI1CA0BAwEBAQEBAQIBEwEBAQoLCQgpIwyCN?=
 =?us-ascii?q?iQBgmIDAwECJFIGCQEBHDQDJSEOEQgFgx0BggAEAah7M4o7h36EQYFXP4ERh1g?=
 =?us-ascii?q?UhgYCiSIggXiFFJBTBwKHD4YvhCMWgiqPKps2A4IJMxojgzwJgh4XhhqICzcBA?=
 =?us-ascii?q?TEBgQQBAYsrgk0BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,367,1539673200"; 
   d="scan'208";a="56783026"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 17 Dec 2018 23:57:27 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726661AbeLRH50 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 18 Dec 2018 02:57:26 -0500
Received: from foss.arm.com ([217.140.101.70]:39762 "EHLO foss.arm.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726505AbeLRH5Y (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 18 Dec 2018 02:57:24 -0500
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.72.51.249])
        by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id 3BFA115BF;
        Mon, 17 Dec 2018 23:57:23 -0800 (PST)
Received: from a75553-lin.blr.arm.com (a75553-lin.blr.arm.com [10.162.0.175])
        by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPA id 678D93F575;
        Mon, 17 Dec 2018 23:57:19 -0800 (PST)
From: Amit Daniel Kachhap <amit.kachhap@arm.com>
To: linux-arm-kernel@lists.infradead.org
Cc: Christoffer Dall <christoffer.dall@arm.com>,
        Marc Zyngier <marc.zyngier@arm.com>,
        Catalin Marinas <catalin.marinas@arm.com>,
        Will Deacon <will.deacon@arm.com>,
        Andrew Jones <drjones@redhat.com>,
        Dave Martin <Dave.Martin@arm.com>,
        Ramana Radhakrishnan <ramana.radhakrishnan@arm.com>,
        kvmarm@lists.cs.columbia.edu,
        Kristina Martsenko <kristina.martsenko@arm.com>,
        linux-kernel@vger.kernel.org,
        Amit Daniel Kachhap <amit.kachhap@arm.com>,
        Mark Rutland <mark.rutland@arm.com>
Subject: [PATCH v4 2/6] arm64/kvm: context-switch ptrauth registers
Date: Tue, 18 Dec 2018 13:26:46 +0530
Message-Id: <1545119810-12182-3-git-send-email-amit.kachhap@arm.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1545119810-12182-1-git-send-email-amit.kachhap@arm.com>
References: <1545119810-12182-1-git-send-email-amit.kachhap@arm.com>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

When pointer authentication is supported, a guest may wish to use it.
This patch adds the necessary KVM infrastructure for this to work, with
a semi-lazy context switch of the pointer auth state.

Pointer authentication feature is only enabled when VHE is built
into the kernel and present into CPU implementation so only VHE code
paths are modified.

When we schedule a vcpu, we disable guest usage of pointer
authentication instructions and accesses to the keys. While these are
disabled, we avoid context-switching the keys. When we trap the guest
trying to use pointer authentication functionality, we change to eagerly
context-switching the keys, and enable the feature. The next time the
vcpu is scheduled out/in, we start again.

Pointer authentication consists of address authentication and generic
authentication, and CPUs in a system might have varied support for
either. Where support for either feature is not uniform, it is hidden
from guests via ID register emulation, as a result of the cpufeature
framework in the host.

Unfortunately, address authentication and generic authentication cannot
be trapped separately, as the architecture provides a single EL2 trap
covering both. If we wish to expose one without the other, we cannot
prevent a (badly-written) guest from intermittently using a feature
which is not uniformly supported (when scheduled on a physical CPU which
supports the relevant feature). When the guest is scheduled on a
physical CPU lacking the feature, these attemts will result in an UNDEF
being taken by the guest.

Signed-off-by: Mark Rutland <mark.rutland@arm.com>
Signed-off-by: Amit Daniel Kachhap <amit.kachhap@arm.com>
Cc: Marc Zyngier <marc.zyngier@arm.com>
Cc: Christoffer Dall <christoffer.dall@arm.com>
Cc: kvmarm@lists.cs.columbia.edu
---
 arch/arm/include/asm/kvm_host.h     |  1 +
 arch/arm64/include/asm/cpufeature.h |  6 +++
 arch/arm64/include/asm/kvm_host.h   | 24 ++++++++++++
 arch/arm64/include/asm/kvm_hyp.h    |  7 ++++
 arch/arm64/kernel/traps.c           |  1 +
 arch/arm64/kvm/handle_exit.c        | 24 +++++++-----
 arch/arm64/kvm/hyp/Makefile         |  1 +
 arch/arm64/kvm/hyp/ptrauth-sr.c     | 73 +++++++++++++++++++++++++++++++++++++
 arch/arm64/kvm/hyp/switch.c         |  4 ++
 arch/arm64/kvm/sys_regs.c           | 40 ++++++++++++++++----
 virt/kvm/arm/arm.c                  |  2 +
 11 files changed, 166 insertions(+), 17 deletions(-)
 create mode 100644 arch/arm64/kvm/hyp/ptrauth-sr.c

diff --git a/arch/arm/include/asm/kvm_host.h b/arch/arm/include/asm/kvm_host.h
index 0f012c8..02d9bfc 100644
--- a/arch/arm/include/asm/kvm_host.h
+++ b/arch/arm/include/asm/kvm_host.h
@@ -351,6 +351,7 @@ static inline int kvm_arm_have_ssbd(void)
 
 static inline void kvm_vcpu_load_sysregs(struct kvm_vcpu *vcpu) {}
 static inline void kvm_vcpu_put_sysregs(struct kvm_vcpu *vcpu) {}
+static inline void kvm_arm_vcpu_ptrauth_config(struct kvm_vcpu *vcpu) {}
 
 #define __KVM_HAVE_ARCH_VM_ALLOC
 struct kvm *kvm_arch_alloc_vm(void);
diff --git a/arch/arm64/include/asm/cpufeature.h b/arch/arm64/include/asm/cpufeature.h
index 1c8393f..ac7d496 100644
--- a/arch/arm64/include/asm/cpufeature.h
+++ b/arch/arm64/include/asm/cpufeature.h
@@ -526,6 +526,12 @@ static inline bool system_supports_generic_auth(void)
 		cpus_have_const_cap(ARM64_HAS_GENERIC_AUTH);
 }
 
+static inline bool system_supports_ptrauth(void)
+{
+	return IS_ENABLED(CONFIG_ARM64_PTR_AUTH) &&
+		cpus_have_const_cap(ARM64_HAS_ADDRESS_AUTH);
+}
+
 #define ARM64_SSBD_UNKNOWN		-1
 #define ARM64_SSBD_FORCE_DISABLE	0
 #define ARM64_SSBD_KERNEL		1
diff --git a/arch/arm64/include/asm/kvm_host.h b/arch/arm64/include/asm/kvm_host.h
index 1b9eed9..629712d 100644
--- a/arch/arm64/include/asm/kvm_host.h
+++ b/arch/arm64/include/asm/kvm_host.h
@@ -146,6 +146,18 @@ enum vcpu_sysreg {
 	PMSWINC_EL0,	/* Software Increment Register */
 	PMUSERENR_EL0,	/* User Enable Register */
 
+	/* Pointer Authentication Registers */
+	APIAKEYLO_EL1,
+	APIAKEYHI_EL1,
+	APIBKEYLO_EL1,
+	APIBKEYHI_EL1,
+	APDAKEYLO_EL1,
+	APDAKEYHI_EL1,
+	APDBKEYLO_EL1,
+	APDBKEYHI_EL1,
+	APGAKEYLO_EL1,
+	APGAKEYHI_EL1,
+
 	/* 32bit specific registers. Keep them at the end of the range */
 	DACR32_EL2,	/* Domain Access Control Register */
 	IFSR32_EL2,	/* Instruction Fault Status Register */
@@ -439,6 +451,18 @@ static inline bool kvm_arch_check_sve_has_vhe(void)
 		return true;
 }
 
+void kvm_arm_vcpu_ptrauth_enable(struct kvm_vcpu *vcpu);
+void kvm_arm_vcpu_ptrauth_disable(struct kvm_vcpu *vcpu);
+
+static inline void kvm_arm_vcpu_ptrauth_config(struct kvm_vcpu *vcpu)
+{
+	/* Disable ptrauth and use it in a lazy context via traps */
+	if (has_vhe() && system_supports_ptrauth())
+		kvm_arm_vcpu_ptrauth_disable(vcpu);
+}
+
+void kvm_arm_vcpu_ptrauth_trap(struct kvm_vcpu *vcpu);
+
 static inline void kvm_arch_hardware_unsetup(void) {}
 static inline void kvm_arch_sync_events(struct kvm *kvm) {}
 static inline void kvm_arch_vcpu_uninit(struct kvm_vcpu *vcpu) {}
diff --git a/arch/arm64/include/asm/kvm_hyp.h b/arch/arm64/include/asm/kvm_hyp.h
index 23aca66..ebffd44 100644
--- a/arch/arm64/include/asm/kvm_hyp.h
+++ b/arch/arm64/include/asm/kvm_hyp.h
@@ -152,6 +152,13 @@ bool __fpsimd_enabled(void);
 void activate_traps_vhe_load(struct kvm_vcpu *vcpu);
 void deactivate_traps_vhe_put(void);
 
+void __ptrauth_switch_to_guest(struct kvm_vcpu *vcpu,
+			       struct kvm_cpu_context *host_ctxt,
+			       struct kvm_cpu_context *guest_ctxt);
+void __ptrauth_switch_to_host(struct kvm_vcpu *vcpu,
+			      struct kvm_cpu_context *host_ctxt,
+			      struct kvm_cpu_context *guest_ctxt);
+
 u64 __guest_enter(struct kvm_vcpu *vcpu, struct kvm_cpu_context *host_ctxt);
 void __noreturn __hyp_do_panic(unsigned long, ...);
 
diff --git a/arch/arm64/kernel/traps.c b/arch/arm64/kernel/traps.c
index 5f4d9ac..90e18de 100644
--- a/arch/arm64/kernel/traps.c
+++ b/arch/arm64/kernel/traps.c
@@ -748,6 +748,7 @@ static const char *esr_class_str[] = {
 	[ESR_ELx_EC_CP14_LS]		= "CP14 LDC/STC",
 	[ESR_ELx_EC_FP_ASIMD]		= "ASIMD",
 	[ESR_ELx_EC_CP10_ID]		= "CP10 MRC/VMRS",
+	[ESR_ELx_EC_PAC]		= "Pointer authentication trap",
 	[ESR_ELx_EC_CP14_64]		= "CP14 MCRR/MRRC",
 	[ESR_ELx_EC_ILL]		= "PSTATE.IL",
 	[ESR_ELx_EC_SVC32]		= "SVC (AArch32)",
diff --git a/arch/arm64/kvm/handle_exit.c b/arch/arm64/kvm/handle_exit.c
index ab35929..5c47a8f47 100644
--- a/arch/arm64/kvm/handle_exit.c
+++ b/arch/arm64/kvm/handle_exit.c
@@ -174,19 +174,25 @@ static int handle_sve(struct kvm_vcpu *vcpu, struct kvm_run *run)
 }
 
 /*
+ * Handle the guest trying to use a ptrauth instruction, or trying to access a
+ * ptrauth register. This trap should not occur as we enable ptrauth during
+ * vcpu schedule itself but is anyway kept here for any unfortunate scenario.
+ */
+void kvm_arm_vcpu_ptrauth_trap(struct kvm_vcpu *vcpu)
+{
+	if (system_supports_ptrauth())
+		kvm_arm_vcpu_ptrauth_enable(vcpu);
+	else
+		kvm_inject_undefined(vcpu);
+}
+
+/*
  * Guest usage of a ptrauth instruction (which the guest EL1 did not turn into
- * a NOP).
+ * a NOP), or guest EL1 access to a ptrauth register.
  */
 static int kvm_handle_ptrauth(struct kvm_vcpu *vcpu, struct kvm_run *run)
 {
-	/*
-	 * We don't currently support ptrauth in a guest, and we mask the ID
-	 * registers to prevent well-behaved guests from trying to make use of
-	 * it.
-	 *
-	 * Inject an UNDEF, as if the feature really isn't present.
-	 */
-	kvm_inject_undefined(vcpu);
+	kvm_arm_vcpu_ptrauth_trap(vcpu);
 	return 1;
 }
 
diff --git a/arch/arm64/kvm/hyp/Makefile b/arch/arm64/kvm/hyp/Makefile
index 82d1904..17cec99 100644
--- a/arch/arm64/kvm/hyp/Makefile
+++ b/arch/arm64/kvm/hyp/Makefile
@@ -19,6 +19,7 @@ obj-$(CONFIG_KVM_ARM_HOST) += switch.o
 obj-$(CONFIG_KVM_ARM_HOST) += fpsimd.o
 obj-$(CONFIG_KVM_ARM_HOST) += tlb.o
 obj-$(CONFIG_KVM_ARM_HOST) += hyp-entry.o
+obj-$(CONFIG_KVM_ARM_HOST) += ptrauth-sr.o
 
 # KVM code is run at a different exception code with a different map, so
 # compiler instrumentation that inserts callbacks or checks into the code may
diff --git a/arch/arm64/kvm/hyp/ptrauth-sr.c b/arch/arm64/kvm/hyp/ptrauth-sr.c
new file mode 100644
index 0000000..1bfaf74
--- /dev/null
+++ b/arch/arm64/kvm/hyp/ptrauth-sr.c
@@ -0,0 +1,73 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * arch/arm64/kvm/hyp/ptrauth-sr.c: Guest/host ptrauth save/restore
+ *
+ * Copyright 2018 Arm Limited
+ * Author: Mark Rutland <mark.rutland@arm.com>
+ *         Amit Daniel Kachhap <amit.kachhap@arm.com>
+ */
+#include <linux/compiler.h>
+#include <linux/kvm_host.h>
+
+#include <asm/cpucaps.h>
+#include <asm/cpufeature.h>
+#include <asm/kvm_asm.h>
+#include <asm/kvm_hyp.h>
+#include <asm/pointer_auth.h>
+
+static __always_inline bool __hyp_text __ptrauth_is_enabled(struct kvm_vcpu *vcpu)
+{
+	return vcpu->arch.hcr_el2 & (HCR_API | HCR_APK);
+}
+
+#define __ptrauth_save_key(regs, key)						\
+({										\
+	regs[key ## KEYLO_EL1] = read_sysreg_s(SYS_ ## key ## KEYLO_EL1);	\
+	regs[key ## KEYHI_EL1] = read_sysreg_s(SYS_ ## key ## KEYHI_EL1);	\
+})
+
+static __always_inline void __hyp_text __ptrauth_save_state(struct kvm_cpu_context *ctxt)
+{
+	__ptrauth_save_key(ctxt->sys_regs, APIA);
+	__ptrauth_save_key(ctxt->sys_regs, APIB);
+	__ptrauth_save_key(ctxt->sys_regs, APDA);
+	__ptrauth_save_key(ctxt->sys_regs, APDB);
+	__ptrauth_save_key(ctxt->sys_regs, APGA);
+}
+
+#define __ptrauth_restore_key(regs, key) 					\
+({										\
+	write_sysreg_s(regs[key ## KEYLO_EL1], SYS_ ## key ## KEYLO_EL1);	\
+	write_sysreg_s(regs[key ## KEYHI_EL1], SYS_ ## key ## KEYHI_EL1);	\
+})
+
+static __always_inline void __hyp_text __ptrauth_restore_state(struct kvm_cpu_context *ctxt)
+{
+	__ptrauth_restore_key(ctxt->sys_regs, APIA);
+	__ptrauth_restore_key(ctxt->sys_regs, APIB);
+	__ptrauth_restore_key(ctxt->sys_regs, APDA);
+	__ptrauth_restore_key(ctxt->sys_regs, APDB);
+	__ptrauth_restore_key(ctxt->sys_regs, APGA);
+}
+
+void __hyp_text __ptrauth_switch_to_guest(struct kvm_vcpu *vcpu,
+					  struct kvm_cpu_context *host_ctxt,
+					  struct kvm_cpu_context *guest_ctxt)
+{
+	if (!__ptrauth_is_enabled(vcpu))
+		return;
+
+	__ptrauth_save_state(host_ctxt);
+	__ptrauth_restore_state(guest_ctxt);
+}
+
+void __hyp_text __ptrauth_switch_to_host(struct kvm_vcpu *vcpu,
+					 struct kvm_cpu_context *host_ctxt,
+					 struct kvm_cpu_context *guest_ctxt)
+{
+	if (!__ptrauth_is_enabled(vcpu))
+		return;
+
+	__ptrauth_save_state(guest_ctxt);
+	__ptrauth_restore_state(host_ctxt);
+}
diff --git a/arch/arm64/kvm/hyp/switch.c b/arch/arm64/kvm/hyp/switch.c
index 85a2a5c..6c57552 100644
--- a/arch/arm64/kvm/hyp/switch.c
+++ b/arch/arm64/kvm/hyp/switch.c
@@ -508,6 +508,8 @@ int kvm_vcpu_run_vhe(struct kvm_vcpu *vcpu)
 	sysreg_restore_guest_state_vhe(guest_ctxt);
 	__debug_switch_to_guest(vcpu);
 
+	__ptrauth_switch_to_guest(vcpu, host_ctxt, guest_ctxt);
+
 	__set_guest_arch_workaround_state(vcpu);
 
 	do {
@@ -519,6 +521,8 @@ int kvm_vcpu_run_vhe(struct kvm_vcpu *vcpu)
 
 	__set_host_arch_workaround_state(vcpu);
 
+	__ptrauth_switch_to_host(vcpu, host_ctxt, guest_ctxt);
+
 	sysreg_save_guest_state_vhe(guest_ctxt);
 
 	__deactivate_traps(vcpu);
diff --git a/arch/arm64/kvm/sys_regs.c b/arch/arm64/kvm/sys_regs.c
index 1ca592d..6af6c7d 100644
--- a/arch/arm64/kvm/sys_regs.c
+++ b/arch/arm64/kvm/sys_regs.c
@@ -986,6 +986,32 @@ static bool access_pmuserenr(struct kvm_vcpu *vcpu, struct sys_reg_params *p,
 	{ SYS_DESC(SYS_PMEVTYPERn_EL0(n)),					\
 	  access_pmu_evtyper, reset_unknown, (PMEVTYPER0_EL0 + n), }
 
+
+void kvm_arm_vcpu_ptrauth_enable(struct kvm_vcpu *vcpu)
+{
+	vcpu->arch.hcr_el2 |= (HCR_API | HCR_APK);
+}
+
+void kvm_arm_vcpu_ptrauth_disable(struct kvm_vcpu *vcpu)
+{
+	vcpu->arch.hcr_el2 &= ~(HCR_API | HCR_APK);
+}
+
+static bool trap_ptrauth(struct kvm_vcpu *vcpu,
+			 struct sys_reg_params *p,
+			 const struct sys_reg_desc *rd)
+{
+	kvm_arm_vcpu_ptrauth_trap(vcpu);
+	return false;
+}
+
+#define __PTRAUTH_KEY(k)						\
+	{ SYS_DESC(SYS_## k), trap_ptrauth, reset_unknown, k }
+
+#define PTRAUTH_KEY(k)							\
+	__PTRAUTH_KEY(k ## KEYLO_EL1),					\
+	__PTRAUTH_KEY(k ## KEYHI_EL1)
+
 static bool access_cntp_tval(struct kvm_vcpu *vcpu,
 		struct sys_reg_params *p,
 		const struct sys_reg_desc *r)
@@ -1040,14 +1066,6 @@ static u64 read_id_reg(struct sys_reg_desc const *r, bool raz)
 			kvm_debug("SVE unsupported for guests, suppressing\n");
 
 		val &= ~(0xfUL << ID_AA64PFR0_SVE_SHIFT);
-	} else if (id == SYS_ID_AA64ISAR1_EL1) {
-		const u64 ptrauth_mask = (0xfUL << ID_AA64ISAR1_APA_SHIFT) |
-					 (0xfUL << ID_AA64ISAR1_API_SHIFT) |
-					 (0xfUL << ID_AA64ISAR1_GPA_SHIFT) |
-					 (0xfUL << ID_AA64ISAR1_GPI_SHIFT);
-		if (val & ptrauth_mask)
-			kvm_debug("ptrauth unsupported for guests, suppressing\n");
-		val &= ~ptrauth_mask;
 	} else if (id == SYS_ID_AA64MMFR1_EL1) {
 		if (val & (0xfUL << ID_AA64MMFR1_LOR_SHIFT))
 			kvm_debug("LORegions unsupported for guests, suppressing\n");
@@ -1316,6 +1334,12 @@ static const struct sys_reg_desc sys_reg_descs[] = {
 	{ SYS_DESC(SYS_TTBR1_EL1), access_vm_reg, reset_unknown, TTBR1_EL1 },
 	{ SYS_DESC(SYS_TCR_EL1), access_vm_reg, reset_val, TCR_EL1, 0 },
 
+	PTRAUTH_KEY(APIA),
+	PTRAUTH_KEY(APIB),
+	PTRAUTH_KEY(APDA),
+	PTRAUTH_KEY(APDB),
+	PTRAUTH_KEY(APGA),
+
 	{ SYS_DESC(SYS_AFSR0_EL1), access_vm_reg, reset_unknown, AFSR0_EL1 },
 	{ SYS_DESC(SYS_AFSR1_EL1), access_vm_reg, reset_unknown, AFSR1_EL1 },
 	{ SYS_DESC(SYS_ESR_EL1), access_vm_reg, reset_unknown, ESR_EL1 },
diff --git a/virt/kvm/arm/arm.c b/virt/kvm/arm/arm.c
index feda456..1f3b6ed 100644
--- a/virt/kvm/arm/arm.c
+++ b/virt/kvm/arm/arm.c
@@ -388,6 +388,8 @@ void kvm_arch_vcpu_load(struct kvm_vcpu *vcpu, int cpu)
 		vcpu_clear_wfe_traps(vcpu);
 	else
 		vcpu_set_wfe_traps(vcpu);
+
+	kvm_arm_vcpu_ptrauth_config(vcpu);
 }
 
 void kvm_arch_vcpu_put(struct kvm_vcpu *vcpu)
-- 
2.7.4

