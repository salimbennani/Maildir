Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 23 Nov 2018 08:30:23 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 71A9B580460;
	Thu, 22 Nov 2018 09:32:53 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga007-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 22 Nov 2018 09:32:53 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AgymzMBXaalbhbSXqNuJsOan4kEXV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhGCvqdThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGo2y?=
 =?us-ascii?q?YYsRAeQCP+lYoZTzqFQSohWxBAmiA//vyiRQhnL0xqA6z+YsHh3a0AE6A94Dsn?=
 =?us-ascii?q?LZp8j1OqcIVuC1ybHFwzLZYPNK2Tf96ZbHcg08qv+CQ71waszRyU4vFgzblFWQ?=
 =?us-ascii?q?spHuMjSQ1usXr2ib7+tgWvyyi2I9tg5+vCOvxsEriojJmI0V0EvE+D5nz4Y7K9?=
 =?us-ascii?q?24SVJ0Yd+jEJtLrS2VK4x2QsY7TmxupS00xLoGuZuhcygLzpQq3wDQa/KJc4iJ?=
 =?us-ascii?q?/h3jVeGRISxiiH15f7K/ghC/+lWjxO3kTsS4zkpGoy5fntXRuH0ByQbf5tWER/?=
 =?us-ascii?q?dh5Eus2DSC2xjO5uxFI004j7fXJ4Muz7Iqi5YevlrPEjXrlEj4j6KbcFgv9PKy?=
 =?us-ascii?q?5OT9eLrmo4eRN49qhQH6NaQjgtK/AesmPQgURWSb+vqz1Kfl/ULnRLVGlPo2kr?=
 =?us-ascii?q?PWsJzCJMQboLC2AxNN34o99xqyCy2q3MkWkHUZNl5JZRGKg5TzN1zPIv30FfK/?=
 =?us-ascii?q?jE6tkDdvyfDGJLrhApDVI3jHkbfhe6t96kFFxAow099f/ZRUBa8FIP7qXU/wut?=
 =?us-ascii?q?rYAQEjMwGv3ebnB8ty1pkEVWKMHKCZKqXSvkGM5u41JOmMfoAVtC7nK/c5//7u?=
 =?us-ascii?q?kWM5mVgFcKmt3JsXa263Eu5pIkWEenfshtYBEWEXvgsxVuDqiVuCUSJNaHa2Ra?=
 =?us-ascii?q?4z+jY7CIe+B4fZWo+tmKCB3Du8HpBOZmBJEFGMEWvyeIWDQfsMaD+SLdVnkjwL?=
 =?us-ascii?q?TrWhT44h1ReztA710bZnL+zU+jEGupLnztR6++rTlRQq/zxuE8udy32NT31znm?=
 =?us-ascii?q?4QRT82275wrVZ+yleE16h4hftYGMdX5/NIVAc6KJHdw/Z7C9D0RgLOYNOJREy6?=
 =?us-ascii?q?TdWhBDE7VsgxzMMWY0ZhB9WiiQjO0DCxA78VkLyLB4Y48rjG0HjzPMt9z3fG1K?=
 =?us-ascii?q?88j1gpWMdPNGumhrJh+AjXHYLGj0KZl6Oyf6QGwCHN7HuDzXaJvExAUw5/S6PF?=
 =?us-ascii?q?UWobZkvXt9v54EzCQqSqCbQmNAtB1MGDJrFLat3vkVVJWvPjNM7CbGK2nme6HQ?=
 =?us-ascii?q?yIya+UbIr2Z2Ud2z3QB1UenAAN43mKLwg+CT2no2LFEjNuE1XjY0fv8el7rHO2?=
 =?us-ascii?q?VUs0zwCMb0182Lu54B8VhfqAS/wN2rIIojsuqzJxHFylxdLZF8KApxZ9fKVbed?=
 =?us-ascii?q?4y/U1I1XzHuABnPpyvNaZihkUAfARxpE7u0xR3CoNdkckltn8qzQxyKb6G31NF?=
 =?us-ascii?q?bT+XwZfwOrjPIGno4B+vc7LW2k3Z0NuO5qcP6fE4q1L/vAGpFksu6Wln38NS03?=
 =?us-ascii?q?uG4pXKDQwSUZ3qX0Yz9hh6oazaYyYn64PV031sLbe7sjvY1901A+slzw6qf81D?=
 =?us-ascii?q?P6OcCA/yD8oaCtC0J+wuhVeoYQwLPeBI+KEvIsOpauGJ2KioPOZngjKrlmBH4I?=
 =?us-ascii?q?F70kKR+CtwUO/I35AZw/6G2guLTSvzjFCkssrvg4BLeSkSHnajySjjHINQZrBy?=
 =?us-ascii?q?cZwXBmu0Isy3xs9xh5jiW3ND8F6jBlUG2NKmeBaIblz92xFQ2loToXC9hSS4yD?=
 =?us-ascii?q?l0mSkzrqWDxCzO3/jidB0fN25RRWltkU3jIZKpgNAdRkSoaRYmlAGk5Urj26dU?=
 =?us-ascii?q?vqB/IHTNTkdSeCj2KXpvUq+xtrqEfs5O54kksSRRUOSgf1+aTqTxrAcd0yPmB2?=
 =?us-ascii?q?Fe3iw0dym2upXlmBx3kGKcLHdpoHvZY81w3grf5NrHSP5V3zoGQjR4iDbNCli9?=
 =?us-ascii?q?Odmp4cubl5PZvu+iUGKhU4VZcTP3woOYqCu7+WpqDAW9n/+pgN3nEgs60Sjh29?=
 =?us-ascii?q?lxTyrIrxX8Yojt16ukN+JqZU1oBF7668pnFYByiIowhJcM2XcEgpWZ52YIkWD2?=
 =?us-ascii?q?Md9Dw6LxcGINRSIXw97S+AXk2FdsLnWTy4L7V3WdxNBsZ927YmMQxyI84NpGCK?=
 =?us-ascii?q?aS7LxYgyR1pkC0oh7WYfh4hj0d0+ch6GYGg+EVvwog1iadDaoTHUVCPSzsig6H?=
 =?us-ascii?q?79axrKhMYGavcL6w1FdxnNy7DbGCpB1cV2j9eps4ASBw6cB/OkrW0HLv8oHkZM?=
 =?us-ascii?q?XQbdULux2RkhfAjPJaJIg/l/UUnipnJXzyvWc+xOEllxxu0oq3vIyGK2Vr4aK4?=
 =?us-ascii?q?DQRUNjzzZ8MP5D7tibxSkdqR34CqBp9hACkEXIP0TfK0FzIfrejnNwGLEDEmq3?=
 =?us-ascii?q?aUA7zfHRKE6Ed9rnLCCJSrN3CRJHkEwtRuXhidJEpDgA8KWDU2hII2FgevxMb5?=
 =?us-ascii?q?akd2+igR5kLkqhtL0u9nLAPwUmDbpAe1cDs0TIWfIQFS7gFD4UfVLMOf4vhyHy?=
 =?us-ascii?q?Fe4p2usgiNJnaHaARPCGEDQlaECEz7Prmy+dnA9PCVBuikIPvLf7qOsvZSV+uS?=
 =?us-ascii?q?yZKsz4tm/CuMNsOVMXl5FPA73ktDXXZkG8XWgTkPSioXlz7TYM6fvhuz5ip3rs?=
 =?us-ascii?q?Wn+vTxRA3v/ZePC6dVMdh3+xG2hrqDN/eNhCljLzZUzIgMxXjOyLgQx1MSjyBu?=
 =?us-ascii?q?dz+wEbUPryLNTaTQmrNJAB4fcS98KMxI76ck1AlXJcHbks/11qJ/jvMtC1dKS1?=
 =?us-ascii?q?3hmsKqZcwLOW29N0nHBEGENLuYPz3L3tr3bLi4Sb1RiuVUqhKxtSyaE0/lIjSM?=
 =?us-ascii?q?iT3pWwqzPuFLiSGRJAZet52lchZxFWjjS8rrZQemMNBslz053701imnONW4dKj?=
 =?us-ascii?q?V8d0JNrruN7SJXmPl/GmpB7mZ7IumAgSqW8+7YKpMOu/txHit0j/5a4Gg9y7ZN?=
 =?us-ascii?q?8CFERfl1lDHOodJ0v16mkveAyjx8XRpKqzZLgp+LvEp4NaXY8JlARWjL/BYX4W?=
 =?us-ascii?q?qMDBQKosNvCsfztKBI1tjPiKXzJS9C8t3O+8scAsnUKMSfP3sgMRrmAjjUDAQe?=
 =?us-ascii?q?QD6vNGHfgVFdkf6I+n2UqJg6tobjmJ4URrBHU1w1E6BSNkMwMtgFOpZ+WHsbnL?=
 =?us-ascii?q?+egdRAsXShoRjUSd9ypJ3LVvuOR/7oLWDKo6NDYk4tyK/4LIkOfqH2wEple1Rg?=
 =?us-ascii?q?h8yeHkPMXdFAv2ttYxQyp1RA6mNWQ2M92knkbRjr63gWQ63n1iUqgxdzNLx+vA?=
 =?us-ascii?q?zn5E06cx+T/HM9?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0COAQBg5/Zbh0O0hNFiHQEBBQEHBQGBZ?=
 =?us-ascii?q?YExKoEPgQInCoNuiHeLIoFoJRSXOoFfLAcMAYhSIjgSAQMBAQEBAQECARMBAQE?=
 =?us-ascii?q?IDQkIKSMMgjYkAYJhAQEBAQIBAQIgHQEBEyQBBQkBAQEBCA4KAgINGQICA1QCB?=
 =?us-ascii?q?BMFgxwBgXkIAQSoWXCBL4J2AQEFhxoIgQuKfoFXP4FEgl+EOAIRARIBgyOCV4k?=
 =?us-ascii?q?BIDKBQIRLNI9yBwKCHASLJ4QAgXyPDJlWN4EFcU0jgzwJghIMFxJtAQyCPopwV?=
 =?us-ascii?q?IECAwEBIROJYoEfAYEeAQE?=
X-IPAS-Result: =?us-ascii?q?A0COAQBg5/Zbh0O0hNFiHQEBBQEHBQGBZYExKoEPgQInCoN?=
 =?us-ascii?q?uiHeLIoFoJRSXOoFfLAcMAYhSIjgSAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkA?=
 =?us-ascii?q?YJhAQEBAQIBAQIgHQEBEyQBBQkBAQEBCA4KAgINGQICA1QCBBMFgxwBgXkIAQS?=
 =?us-ascii?q?oWXCBL4J2AQEFhxoIgQuKfoFXP4FEgl+EOAIRARIBgyOCV4kBIDKBQIRLNI9yB?=
 =?us-ascii?q?wKCHASLJ4QAgXyPDJlWN4EFcU0jgzwJghIMFxJtAQyCPopwVIECAwEBIROJYoE?=
 =?us-ascii?q?fAYEeAQE?=
X-IronPort-AV: E=Sophos;i="5.56,266,1539673200"; 
   d="scan'208";a="41908911"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 22 Nov 2018 09:32:47 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2406251AbeKWEKF (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 22 Nov 2018 23:10:05 -0500
Received: from mail.efficios.com ([167.114.142.138]:36036 "EHLO
        mail.efficios.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1731476AbeKWEKE (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 22 Nov 2018 23:10:04 -0500
Received: from localhost (ip6-localhost [IPv6:::1])
        by mail.efficios.com (Postfix) with ESMTP id 62788E1FD;
        Thu, 22 Nov 2018 12:29:44 -0500 (EST)
Received: from mail.efficios.com ([IPv6:::1])
        by localhost (mail02.efficios.com [IPv6:::1]) (amavisd-new, port 10032)
        with ESMTP id pIL4_smxxJaf; Thu, 22 Nov 2018 12:29:43 -0500 (EST)
Received: from localhost (ip6-localhost [IPv6:::1])
        by mail.efficios.com (Postfix) with ESMTP id A1F14E1FA;
        Thu, 22 Nov 2018 12:29:43 -0500 (EST)
DKIM-Filter: OpenDKIM Filter v2.10.3 mail.efficios.com A1F14E1FA
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=efficios.com;
        s=default; t=1542907783;
        bh=JRB1cHnZVs2Q1494Tm4yX9b2eb8zwIL23tApa4FqV2c=;
        h=Date:From:To:Message-ID:MIME-Version;
        b=O7MHUe0NNkZ46p2Ci3+/Cnd1wS9KO/815lRfptucOdVQPIFwpZd9mERySer175RVB
         y39KQMODBeQmmY2NsT/HDw3y01+qtm6dkZMKUPXo6qdsYe5j2CuINdhPrR4c/uKO/E
         CpcQMjiQj3ouevbysHl95r+Wnv/69df7akjxAG2f/KI/OxbU82yNPijkKP5FA33HjA
         1zKzi6J3niVQtHLbUd//n9XsMhyLw8kRBGK6M+NXbFMaesEer+8GYvfv50ImxSnlS2
         xoKdq7n2Vl+goqrI4RjfX8TYp+6K55GPxO8EKiCwBnR9uGc7SWVsZpRLnUA8Pa/bH9
         6F8M29IXt9dmw==
X-Virus-Scanned: amavisd-new at efficios.com
Received: from mail.efficios.com ([IPv6:::1])
        by localhost (mail02.efficios.com [IPv6:::1]) (amavisd-new, port 10026)
        with ESMTP id kFycq6WV28TC; Thu, 22 Nov 2018 12:29:43 -0500 (EST)
Received: from mail02.efficios.com (mail02.efficios.com [167.114.142.138])
        by mail.efficios.com (Postfix) with ESMTP id 80169E1EF;
        Thu, 22 Nov 2018 12:29:43 -0500 (EST)
Date: Thu, 22 Nov 2018 12:29:43 -0500 (EST)
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
To: Florian Weimer <fweimer@redhat.com>
Cc: Rich Felker <dalias@libc.org>, carlos <carlos@redhat.com>,
        Joseph Myers <joseph@codesourcery.com>,
        Szabolcs Nagy <szabolcs.nagy@arm.com>,
        libc-alpha <libc-alpha@sourceware.org>,
        Thomas Gleixner <tglx@linutronix.de>,
        Ben Maurer <bmaurer@fb.com>,
        Peter Zijlstra <peterz@infradead.org>,
        "Paul E. McKenney" <paulmck@linux.vnet.ibm.com>,
        Boqun Feng <boqun.feng@gmail.com>,
        Will Deacon <will.deacon@arm.com>,
        Dave Watson <davejwatson@fb.com>, Paul Turner <pjt@google.com>,
        linux-kernel <linux-kernel@vger.kernel.org>,
        linux-api <linux-api@vger.kernel.org>
Message-ID: <644835950.10383.1542907783295.JavaMail.zimbra@efficios.com>
In-Reply-To: <87k1l5xd33.fsf@oldenburg.str.redhat.com>
References: <20181121183936.8176-1-mathieu.desnoyers@efficios.com> <20181122143603.GD23599@brightrain.aerifal.cx> <782067422.9852.1542899056778.JavaMail.zimbra@efficios.com> <20181122151444.GE23599@brightrain.aerifal.cx> <686626451.10113.1542901620250.JavaMail.zimbra@efficios.com> <87wop5xeit.fsf@oldenburg.str.redhat.com> <1045257294.10291.1542905262086.JavaMail.zimbra@efficios.com> <87k1l5xd33.fsf@oldenburg.str.redhat.com>
Subject: Re: [RFC PATCH v4 1/5] glibc: Perform rseq(2) registration at nptl
 init and thread creation
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: 7bit
X-Originating-IP: [167.114.142.138]
X-Mailer: Zimbra 8.8.10_GA_3047 (ZimbraWebClient - FF52 (Linux)/8.8.10_GA_3041)
Thread-Topic: glibc: Perform rseq(2) registration at nptl init and thread creation
Thread-Index: 4oU0aXTlYLrkMjd1q0cczFwLPsKVtQ==
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org



----- On Nov 22, 2018, at 11:59 AM, Florian Weimer fweimer@redhat.com wrote:

> * Mathieu Desnoyers:
> 
>> ----- On Nov 22, 2018, at 11:28 AM, Florian Weimer fweimer@redhat.com wrote:
>>
>>> * Mathieu Desnoyers:
>>> 
>>>> Here is one scenario: we have 2 early adopter libraries using rseq which
>>>> are deployed in an environment with an older glibc (which does not
>>>> support rseq).
>>>>
>>>> Of course, none of those libraries can be dlclose'd unless they somehow
>>>> track all registered threads.
>>> 
>>> Well, you can always make them NODELETE so that dlclose is not an issue.
>>> If the library is small enough, that shouldn't be a problem.
>>
>> That's indeed what I do with lttng-ust, mainly due to use of pthread_key.
>>
>>> 
>>>> But let's focus on how exactly those libraries can handle lazily
>>>> registering rseq. They can use pthread_key, and pthread_setspecific on
>>>> first use by the thread to setup a destructor function to be invoked
>>>> at thread exit. But each early adopter library is unaware of the
>>>> other, so if we just use a "is_initialized" flag, the first destructor
>>>> to run will unregister rseq while the second library may still be
>>>> using it.
>>> 
>>> I don't think you need unregistering if the memory is initial-exec TLS
>>> memory.  Initial-exec TLS memory is tied directly to the TCB and cannot
>>> be freed while the thread is running, so it should be safe to put the
>>> rseq area there even if glibc knows nothing about it.
>>
>> Is it true for user-supplied stacks as well ?
> 
> I'm not entirely sure because the glibc terminology is confusing, but I
> think it places intial-exec TLS into the static TLS area (so that it has
> a fixed offset from the TCB).  The static TLS area is placed on the
> user-supplied stack.

You said earlier in the email thread that user-supplied stack can be
reclaimed by __free_tcb () while the thread still runs, am I correct ?
If so, then we really want to unregister the rseq TLS before that.

I notice that __free_tcb () calls __deallocate_stack (), which invokes
_dl_deallocate_tls (). Accessing the TLS from the kernel upon preemption
would appear fragile after this call.

[...]

>> One issue here is that early adopter libraries cannot always use
>> the IE model. I tried using it for other TLS variables in lttng-ust, and
>> it ended up hanging our CI tests when tracing a sample application with
>> lttng-ust under a Java virtual machine: being dlopen'd in a process that
>> possibly already exhausts the number of available backup TLS IE entries
>> seems to have odd effects. This is why I'm worried about using the IE model
>> within lttng-ust.
> 
> You can work around this by preloading the library.  I'm not sure if
> this is a compelling reason not to use initial-exec TLS memory.

LTTng-UST is meant to be used as a dependency for e.g. a java logger,
or a python logger. Those rely on dlopen, and it would be very painful
to ask all users to preload lttng-ust within their environment which is
sometimes already complex. It works today through dlopen, and I consider
this a user-facing behavior which I am very reluctant to break.

> 
>>>> The same problem arises if we have an application early adopter which
>>>> explicitly deal with rseq, with a library early adopter. The issue is
>>>> similar, except that the application will explicitly want to unregister
>>>> rseq before exiting the thread, which leaves a race window where rseq
>>>> is unregistered, but the library may still need to use it.
>>>>
>>>> The reference counter solves this: only the last rseq user for a thread
>>>> performs unregistration.
>>> 
>>> If you do explicit unregistration, you will run into issues related to
>>> destructor ordering.  You should really find a way to avoid that.
>>
>> The per-thread reference counter is a way to avoid issues that arise from
>> lack of destructor ordering. Is it an acceptable approach for you, or
>> you have something else in mind ?
> 
> Only for the involved libraries.  It will not help if other TLS
> destructors run and use these libraries.

You bring an interesting point. The reference counter suffice to ensure
that the kernel will not try to reference the TLS area beyond its registration
scope, but it does not guarantee that another destructor (or a signal
handler) won't try to use the rseq TLS area after it has been unregistered.

Unregistration of the TLS before freeing its memory is required for correctness.

However, a use-after-unregistration can be dealt with by other means. This
is one of the reasons why I want to upstream the "cpu_opv" system call into
Linux: this is a fallback mechanism to use when rseq cannot do forward
progress (e.g. debugger single-stepping), or to use in those scenarios
where rseq is not registered (early at thread creation, or late at thread
exit). Moreover, it allows handling use-cases of migration of data between
per-cpu data structures, which is pretty much impossible to do right if we
only have rseq available.

Thanks,

Mathieu

-- 
Mathieu Desnoyers
EfficiOS Inc.
http://www.efficios.com
