Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 24 Nov 2018 12:36:39 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 1C53358037D;
	Fri, 23 Nov 2018 09:52:30 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 23 Nov 2018 09:52:29 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AM6cYMxZjmekY3qLEVL9XEgX/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpcm+Yx7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyJPDIOi?=
 =?us-ascii?q?YYUMDeUBM/tWoIbhqFUBrBuwAhWsBPj3yjJKnXL2wa833Pg9HQzcwAAtHdQDu2?=
 =?us-ascii?q?nUotXvM6cSVPi4wq7SwjXfb/NW2Cny6JXVeR4vv/6MRrRwcc3RyEYxDQPFlUib?=
 =?us-ascii?q?pIvgPzyPyuQNs2mb4PR9Ve61lmEotRpxoj6oxsYslIbJnJkVx0va+iV3zoY1JM?=
 =?us-ascii?q?G3SE98Yd6/CpdfqyaaN45vT84kXmpmtiE6yrgctp66eigH0IooxxDRa/yGb4eI?=
 =?us-ascii?q?4xXjVP2LLThkg3JlfbSyjAux/0i40uDwSNW43VJQoiZYnNTAqGoB2wHQ58SbUP?=
 =?us-ascii?q?dw/0Ws1S6S2w3S6OxIO104mbfUJpI737I9mYQfvV7eEiL4m0j7irKdeF8+9eiy?=
 =?us-ascii?q?8evnZ63rpp+COI9wjQHzKroumsOhDuQiKAQOXHaU+f661LL9+U31WrJKjuc5kq?=
 =?us-ascii?q?XBsZDaI9oUprKhDgNLzoou7wyzAyqo3dgGh3ULMVFIdA6dg4XoOVzCOPX4Au2+?=
 =?us-ascii?q?g1Sonjdr3ffGPrj5D5XJL3jDlqrhfLlk505f1gUz19Zf6IxQCr0YJ/LyVEnxu8?=
 =?us-ascii?q?LCDhIiLQy0zPjoCM9n2oMdR22PGKmZP73WsVOS4eIvOeaMaJcPuDnhM/gl++Lu?=
 =?us-ascii?q?jXghlF8ZfKmp3oUYZGq3H/R7OEiZZXvsgtEcEWYFpAY+TerqiEGcXj5XfXq9Q6?=
 =?us-ascii?q?U85jQjAoK8EYjDXpytgKCG3CqjHp1ZfGFGCkyWHnfvbYmEW+oMZziUIs9uiTEE?=
 =?us-ascii?q?UbmhS4k81RChrgP6yrxnLvbK9S0cr57syN915+jLnxEo6TN0F9id032KT2xsnG?=
 =?us-ascii?q?MIQCE50Lp8oUx6zFeD1694judcFdxS4fNJTwg7OYTdz+x8F9D9RAbBcs2VR1ah?=
 =?us-ascii?q?R9WsGSsxQc4pw98Sf0Z9HM2vgQrY3yqqBL8VlKaHBIYu/aLexHXxI8d9y3Db1K?=
 =?us-ascii?q?gulVUmQ81PNXG4ia577QTcG4nJk0CBnaawaascxDLN9HuEzWeWv0FXSghwXb/B?=
 =?us-ascii?q?XXAefETWq9v561jGT7+vD7QnLwRAxdSDKqtMdt3mk1FGSO3/N9TZZmK7g32wCg?=
 =?us-ascii?q?qQxrOQcIrqfH0Q0zjHB0gajQ8f53aGOhI4Bie6vW3eCjtiFVbsY0Pp9elzs3e7?=
 =?us-ascii?q?Tk4yzwGXYExtzbu1+hgJhfOCT/MfxK4LuCAkqz9sBlayw8rWC8acpwpmZKhTfM?=
 =?us-ascii?q?ky4ElZ2m7DtwxyJJqgL7t8iV4YaAl3u0Lu1xNqCoRPi8QqrXUqzBZsJqKcyl9O?=
 =?us-ascii?q?azSY3ZXoML3NNmby5Ayva7LR2lzGzNaW+6IP6PMkq1XjvAClDFYi/29g09lP13?=
 =?us-ascii?q?uc55PKDAUJXJL1U0Y38QV6pr7Abik84YPUyWNjMa2uvjDe3NIpAfMvygy8cNdH?=
 =?us-ascii?q?LKOECAjyHtUACMiqNuMrlEambxIeMO9J6a47Itmpd/2F2K6sIuZthzamjWVB4I?=
 =?us-ascii?q?Bg3UOA7St8SujU35kbx/GUxBeIVzD5jF25qMD4hZhEZS0OHmq40SXlBJNRardu?=
 =?us-ascii?q?cooRCGauI9e4xtNxh5P2X35Y9VijB04J2cOzeBqSaUD90hNU1UgNvXOnni64xS?=
 =?us-ascii?q?Rukz41tqqfwDDOw+P6eRodO25EWHNtjU3xLoizldwaWlanbxIolBe8+Un13axb?=
 =?us-ascii?q?q7lhIGnJRkdIeTP7L2VjUqu2q7qDbNRD6JIusSVLTuu8ZUqWRaL6oxsfyynjBX?=
 =?us-ascii?q?dRxCgndzG2vZX0hxx7iGOHIHdztnbZYtxwxRHE6dzYRP5R2CcGRSZihTnWAFi8?=
 =?us-ascii?q?I8em/dGOm5jfteC+UnqrVodPfinz0YOAqCy76HVoARKlhfCzmd7nEQ8g3S/gzd?=
 =?us-ascii?q?ZqVibIrBf6Yob10aS3KuZnfkhuBF/h5Mt2AIB+ko0shJ4O3XgWnIma/X0CkW3r?=
 =?us-ascii?q?K9VUxbr+bGYRRT4M29PU4BLq2Ep5InKLxoL5UG6Qws9gZ9m8f2MX1Tgx78FMCK?=
 =?us-ascii?q?eI8rNEmTF5rUa/rQLUefJ9hCsSyeMy6H4GhOEEoAktwT+cArwIHUlYIDbjlxKH?=
 =?us-ascii?q?792lqKVXZWCvcaW/1UZknNChCq2CrR9YWHrjZpgiGipw5N1lMF3QyH3z9p3keN?=
 =?us-ascii?q?7IYNIWtx2UkA3Pg/JbKZ0vjfoKmTRoOXjmsnI70e47ggdj3ZW7vIiBNmVs87i1?=
 =?us-ascii?q?Ah9eNj3pecwT/ivhgrpZnsaTx4qvBIluGi0XXJv0SvKlCC4StfPiNwqUETwzsH?=
 =?us-ascii?q?GbGafEHQ+E6UdrtHbPE5GtN3GKK3gV19RiRB+BJENBhAAYRik1npk8Fgqy3szu?=
 =?us-ascii?q?bF955iwN5l7/shZD0fhnNx77UmfCvguobio0RYObLBpX6AFC+kjUPdaf7uJ1Ay?=
 =?us-ascii?q?FX4JmhoBaRJWycYgRCFXsJVVCcB1D/Irmu4sHN8+qCCeq7MfTOeq+CqfBEW/eL?=
 =?us-ascii?q?2JKv0ZZm/zCWOcWUJXRiC/w72kxeXXF2AcjZmjMPSzAJmCLJdcKUuBC8+ihvpM?=
 =?us-ascii?q?Cl7PvrQB7v5ZeIC7ZKMdRv/A22gb6eN+GKgiZ1My1Y1pQKxX/H07Uf2F8Siydz?=
 =?us-ascii?q?dziiC7gAtCjNTL7Ola9TFRIUdyRzNM5Q5aImwgZNIdLbis/y1rNgjv46FVZFVV?=
 =?us-ascii?q?/imsGof8AKIHu9NFTIBEmVLrSGOCbLztrzYaO9T71QkepVuwexuTadD0/sIDCD?=
 =?us-ascii?q?myP1WBCoNOFGlDubMwBGuIGhbhZtDnDuQ8j7ahKgKt94kz03zacwhnPLLmMcNT?=
 =?us-ascii?q?l8c0VQrryf9y9Yg/N/G3Bf4XphN+WLhyGZ7+zAIJYMrfRrGjh0l/5d4Hki17tV?=
 =?us-ascii?q?7SRESOZplyfIstFuo0+pku+UxzpjURpOrCtLhY2RsUVjP6XZ6odPWXLe8B0R6m?=
 =?us-ascii?q?WQDgwAp8F5Bd33p6BQ1t/PmbrzKThY9dLU+MocB87MJ8OGMHouKxzpGDHPAQsB?=
 =?us-ascii?q?TD6rM3zfhkNHnPGT8H2VsoY1qpz2lJUSTb9bUQ99KvRPMEVuHJQsLZN0Uylsxb?=
 =?us-ascii?q?KSiM8B/lK6rRPaAsJAscaUeOiVBKDKISqZjLRZLzcF2rX/PIkJLcWv3kV+alh3?=
 =?us-ascii?q?gcLGFlHWWsFAuDZJYwE6oU5M92M4RWo2jRG2Ijix6WMeQKbn1iU9jRFzNKF0rG?=
 =?us-ascii?q?/h?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BbAAAvPfhbh0O0hNFjHQEBBQEHBQGBV?=
 =?us-ascii?q?AUBCwGBMIE5gQInCoNviHeLIYFoJRSXO4FfLAcMAYhaIjcGDQEDAQEBAQEBAgE?=
 =?us-ascii?q?TAQEBCA0JCCkjDII2JAGCYQEBAQECAQECIB0BARMkAQQBCQEBAQEIDgoCAg0ZA?=
 =?us-ascii?q?gIDVAIEEwWDHAGBeQgBBKYUcIEvgnYBAQWHFQiBC4p+gVc/gUSCKjWESwESAYM?=
 =?us-ascii?q?jgleJG4F4hEs0ToRYikwHAoIcBIgJhx6RCJlWNoEGcU0jgzwJghI1gziKcFSBA?=
 =?us-ascii?q?gMBASETiS+BHwGBHgEB?=
X-IPAS-Result: =?us-ascii?q?A0BbAAAvPfhbh0O0hNFjHQEBBQEHBQGBVAUBCwGBMIE5gQI?=
 =?us-ascii?q?nCoNviHeLIYFoJRSXO4FfLAcMAYhaIjcGDQEDAQEBAQEBAgETAQEBCA0JCCkjD?=
 =?us-ascii?q?II2JAGCYQEBAQECAQECIB0BARMkAQQBCQEBAQEIDgoCAg0ZAgIDVAIEEwWDHAG?=
 =?us-ascii?q?BeQgBBKYUcIEvgnYBAQWHFQiBC4p+gVc/gUSCKjWESwESAYMjgleJG4F4hEs0T?=
 =?us-ascii?q?oRYikwHAoIcBIgJhx6RCJlWNoEGcU0jgzwJghI1gziKcFSBAgMBASETiS+BHwG?=
 =?us-ascii?q?BHgEB?=
X-IronPort-AV: E=Sophos;i="5.56,270,1539673200"; 
   d="scan'208";a="54083583"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 23 Nov 2018 09:52:26 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2441016AbeKXEhj (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 23 Nov 2018 23:37:39 -0500
Received: from mail.efficios.com ([167.114.142.138]:44994 "EHLO
        mail.efficios.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1730951AbeKXEhj (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 23 Nov 2018 23:37:39 -0500
Received: from localhost (ip6-localhost [IPv6:::1])
        by mail.efficios.com (Postfix) with ESMTP id 5B70380DC6;
        Fri, 23 Nov 2018 12:52:22 -0500 (EST)
Received: from mail.efficios.com ([IPv6:::1])
        by localhost (mail02.efficios.com [IPv6:::1]) (amavisd-new, port 10032)
        with ESMTP id hYq9d5zcCxay; Fri, 23 Nov 2018 12:52:21 -0500 (EST)
Received: from localhost (ip6-localhost [IPv6:::1])
        by mail.efficios.com (Postfix) with ESMTP id 8FB6D80DBF;
        Fri, 23 Nov 2018 12:52:21 -0500 (EST)
DKIM-Filter: OpenDKIM Filter v2.10.3 mail.efficios.com 8FB6D80DBF
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=efficios.com;
        s=default; t=1542995541;
        bh=W3C9jppVpnmK0YZX4i7gGbENo5LXaJ+HUqqmIA0Yc4M=;
        h=Date:From:To:Message-ID:MIME-Version;
        b=fXXuDk4UvA8Nw+IwMMUyaeEqpqIfe/tJR2gKZFKuktSYEMUxl/a+334j0kD1vHmS5
         942AiS8p2nrd6PzpJ8ZMcZKIuUxvRniSIyIdzPFjRro9blAIXG+DPSpscF37O3Fj8y
         NSqBIRQzAF2nE+aAednF+bWoegIoYINzkQpnCNtMwnjQXV+hmow8mYGCqlYn0ZHFoS
         n3xO4gg8Za10IhmrliQYuP7Jp3521mh75r7VVwtEjFQ1Do3LjHaryX/XiuoCEzObcJ
         ggLQMN64UrVsMqcVHHhOICH5kiwfzMUZlk1iJ1nkQrtc3HWdzuAzVQF22W13EuAIC1
         +FfS6zkMe6iLQ==
X-Virus-Scanned: amavisd-new at efficios.com
Received: from mail.efficios.com ([IPv6:::1])
        by localhost (mail02.efficios.com [IPv6:::1]) (amavisd-new, port 10026)
        with ESMTP id gR0nWQ2QjrrA; Fri, 23 Nov 2018 12:52:21 -0500 (EST)
Received: from mail02.efficios.com (mail02.efficios.com [167.114.142.138])
        by mail.efficios.com (Postfix) with ESMTP id 6F5EB80DB7;
        Fri, 23 Nov 2018 12:52:21 -0500 (EST)
Date: Fri, 23 Nov 2018 12:52:21 -0500 (EST)
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
To: Rich Felker <dalias@libc.org>
Cc: Florian Weimer <fweimer@redhat.com>, carlos <carlos@redhat.com>,
        Joseph Myers <joseph@codesourcery.com>,
        Szabolcs Nagy <szabolcs.nagy@arm.com>,
        libc-alpha <libc-alpha@sourceware.org>,
        Thomas Gleixner <tglx@linutronix.de>,
        Ben Maurer <bmaurer@fb.com>,
        Peter Zijlstra <peterz@infradead.org>,
        "Paul E. McKenney" <paulmck@linux.vnet.ibm.com>,
        Boqun Feng <boqun.feng@gmail.com>,
        Will Deacon <will.deacon@arm.com>,
        Dave Watson <davejwatson@fb.com>, Paul Turner <pjt@google.com>,
        linux-kernel <linux-kernel@vger.kernel.org>,
        linux-api <linux-api@vger.kernel.org>
Message-ID: <865273158.11687.1542995541389.JavaMail.zimbra@efficios.com>
In-Reply-To: <20181123173019.GK23599@brightrain.aerifal.cx>
References: <20181121183936.8176-1-mathieu.desnoyers@efficios.com> <1045257294.10291.1542905262086.JavaMail.zimbra@efficios.com> <87k1l5xd33.fsf@oldenburg.str.redhat.com> <20181122171010.GH23599@brightrain.aerifal.cx> <871s7cvt1l.fsf@oldenburg.str.redhat.com> <20181123142843.GJ23599@brightrain.aerifal.cx> <1150466925.11664.1542992720871.JavaMail.zimbra@efficios.com> <20181123173019.GK23599@brightrain.aerifal.cx>
Subject: Re: [RFC PATCH v4 1/5] glibc: Perform rseq(2) registration at nptl
 init and thread creation
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: 7bit
X-Originating-IP: [167.114.142.138]
X-Mailer: Zimbra 8.8.10_GA_3047 (ZimbraWebClient - FF52 (Linux)/8.8.10_GA_3041)
Thread-Topic: glibc: Perform rseq(2) registration at nptl init and thread creation
Thread-Index: +tP/nHsSVTVHcfxkwhXbP9/nYqpEyA==
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

----- On Nov 23, 2018, at 12:30 PM, Rich Felker dalias@libc.org wrote:

> On Fri, Nov 23, 2018 at 12:05:20PM -0500, Mathieu Desnoyers wrote:
>> ----- On Nov 23, 2018, at 9:28 AM, Rich Felker dalias@libc.org wrote:
>> [...]
>> > 
>> > Absolutely. As long as it's in libc, implicit destruction will happen.
>> > Actually I think the glibc code shound unconditionally unregister the
>> > rseq address at exit (after blocking signals, so no application code
>> > can run) in case a third-party rseq library was linked and failed to
>> > do so before thread exit (e.g. due to mismatched ref counts) rather
>> > than respecting the reference count, since it knows it's the last
>> > user. This would make potentially-buggy code safer.
>> 
>> OK, let me go ahead with a few ideas/questions along that path.
>                                                 ^^^^^^^^^^^^^^^
>> 
>> Let's say our stated goal is to let the "exit" system call from the
>> glibc thread exit path perform rseq unregistration (without explicit
>> unregistration beforehand). Let's look at what we need.
> 
> This is not "along that path". The above-quoted text is not about
> assuming it's safe to make SYS_exit without unregistering the rseq
> object, but rather about glibc being able to perform the
> rseq-unregister syscall without caring about reference counts, since
> it knows no other code that might depend on rseq can run after it.

When saying "along that path", what I mean is: if we go in that direction,
then we should look into going all the way there, and rely on thread
exit to implicitly unregister the TLS area.

Do you see any reason for doing an explicit unregistration at thread
exit rather than simply rely on the exit system call ?


> 
>> First, we need the TLS area to be valid until the exit system call
>> is invoked by the thread. If glibc defines __rseq_abi as a weak symbol,
>> I'm not entirely sure we can guarantee the IE model if another library
>> gets its own global-dynamic weak symbol elected at execution time. Would
>> it be better to switch to a "strong" symbol for the glibc __rseq_abi
>> rather than weak ?
> 
> This doesn't help; still whichever comes first in link order would
> override. Either way __rseq_abi would be in static TLS, though,
> because any dynamically-loaded library is necessarily loaded after
> libc, which is loaded at initial exec time.

OK, AFAIU so you argue for leaving the __rseq_abi symbol "weak". Just making
sure I correctly understand your position.

Something can be technically correct based on the current implementation,
but fragile with respect to future changes. We need to carefully distinguish
between the two when exposing ABIs.

> 
>> There has been presumptions about signals being blocked when the thread
>> exits throughout this email thread. Out of curiosity, what code is
>> responsible for disabling signals in this situation ?

This question is still open.

> Related to this,
>> is it valid to access a IE model TLS variable from a signal handler at
>> _any_ point where the signal handler nests over thread's execution ?
>> This includes early start and just before invoking the exit system call.
> 
> It should be valid to access *any* TLS object like this, but the
> standards don't cover it well. Right now access to dynamic TLS from
> signal handlers is unsafe in glibc, but static is safe.

Which is a shame for the lttng-ust tracer, which needs global-dynamic
TLS variables so it can be dlopen'd, but aims at allowing tracing from
signal handlers. It looks like due to limitations of global-dynamic
TLS, tracing from instrumented signal handlers with lttng-ust tracepoints
could crash the process if the signal handler nests early at thread start
or late before thread exit. One way out of this would be to ensure signals
are blocked at thread start/exit, but I can't find the code responsible for
doing this within glibc.

Thanks,

Mathieu

-- 
Mathieu Desnoyers
EfficiOS Inc.
http://www.efficios.com
