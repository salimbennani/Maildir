Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 23 Nov 2018 08:28:50 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 7495B58037D;
	Thu, 22 Nov 2018 07:05:23 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga002-1.jf.intel.com with ESMTP; 22 Nov 2018 07:05:23 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ApbP+hhA/5AOAYgyKZvy+UyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7+oc+wAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95fWSJBHI2y?=
 =?us-ascii?q?bIkAD+QcM+lXs4bzqFoOoxyiBQm3HOPiyCRFhmP00KImz+gsCx3K0Q4mEtkTsH?=
 =?us-ascii?q?rUttL1NKIKXO6y1qbI0TXDb/JI1jfg9YPGfA4uoeqKXbJ3ccve11MvFxjYhViX?=
 =?us-ascii?q?rIzqJS+V1uQMs2eF8upsT/+ghHA8qwF3pTiuxtkjipPSho8O1F/E+yt5wIcpKt?=
 =?us-ascii?q?25T057esSoH4dXtyGfLoZ7RN4pTW9vuCY/0LIGuJi7cTAWyJQn3RHfd+aLfJWP?=
 =?us-ascii?q?4h77SumRLzl4hHN5d7K+gBay6lKsxfH7Vsmx1ltBsylLksHUu3wTyxDe7tKLRu?=
 =?us-ascii?q?Zz80u/wzqDygPe5v1eLU01l6fXM4Mtz78ym5YJrEjPAyD7lF/rgKKZaEko4PWk?=
 =?us-ascii?q?5urkb7jgu5SSLZV7ihvkPaQrgsG/Afo3MgwJX2WD5+S826Ps/VfjTLVJkPI2iK?=
 =?us-ascii?q?/Zv47eJcgBoa65GQBV3p4i6xa5ETimzMwVkWcbIF9BYh6LkobkN0/ULPzlDvqz?=
 =?us-ascii?q?n06gnTZpyvzeO73uGJTNLnzNkLf7erZ97lZRyA4yzdBZ+pJVBagNIPHtVU/rst?=
 =?us-ascii?q?zXEBs5PxWzw+fpDtVyyJkeVHmRAq+WLqzSq0WE5uExLOmWYo8apjL9J+Ii5/70?=
 =?us-ascii?q?gn81gUUdcrWx3ZsLdHC4GexrI0GYYXrvnNgNC2gLvhclQezuiV2CVyNTZnmoU6?=
 =?us-ascii?q?I94DE7FJypDYPZSo+xh7yB2T+xHodKaWBeFlCMDXDoep2EW/gWaSKSPtVukjse?=
 =?us-ascii?q?WbihVo8uzxeutADhxrpjL+rU/DAYtJ352Nh04e3TiQ899ThuA8uB1GGNSnl+nn?=
 =?us-ascii?q?kUSD8uwKB/vUt9x0+B0ah/nfNUD99T5/RPUgc8Mp7R1Oh6C9H0WgLccdaFUlem?=
 =?us-ascii?q?QtO6AT4vStI92cMBY0F4G9+6lBDMwzKqA6MJl7yMHJE76Lnc33j2J8Z+0XrGzr?=
 =?us-ascii?q?Muj1s9T8tLNG2mgLN/9gfJC47IlUWZi7ildaAG0CHR82eDyHKEvFtEXw5oTaXF?=
 =?us-ascii?q?QXcfa1PVrdvj4EPOVbuuCbU9PQtHxs6PMa9KatzvjVVbS/bvItXeY2Stm2iuAR?=
 =?us-ascii?q?aE3K+DbI3ve28FxiXSFFAEkxwP/XaBLQUxGz2uo3zAAzB0FVLgeUXs8fJgp3O9?=
 =?us-ascii?q?SUM0ywKKb0hl17eu/h4VhPqcS+4c374euSchrSl0E0i5397MF9WAoA9hdr1GYd?=
 =?us-ascii?q?wh+FdHyX7ZtwtlM5O9Na9imEARfx53v0z00RV3EZtPkc4xoXMuzQpyL7+Y0Vxb?=
 =?us-ascii?q?ezOZ25DwJqPYKm3o8B+zbK7W30nU0MyK9acX9PQ4t1LjsRm1Fkoj9nVn1MVV03?=
 =?us-ascii?q?uc55nQEAoeS5XxUlwz9xh7obHabTIw54fV1X1qLKm1vSXO29MvBOs51Bmge81T?=
 =?us-ascii?q?P7+DFA/3C8caHdShKPQ2m1i1aRIJJPpd9KoqMMKpafSH2LSnM/19nD27l2tH5o?=
 =?us-ascii?q?N90kWS9ydnTu7I3pAFw+yX3wedVjf8ikuhvd7zmYxeeT4SGW+/wzD+BIFNfq1y?=
 =?us-ascii?q?YZoLCWC2Lsy329VynYLiV2RZ9V6jHVwG3sCpdAGWb1z82w1QyEsWrWammSu+0z?=
 =?us-ascii?q?x7jTUporCD0yzJxuTobAAHNXJTRGl+kVfsJpC5j8obXEe0dQcpjgaq5UHgy6hd?=
 =?us-ascii?q?uqt/NWjTTV5UcCfsK2FtT7W/tqCFY85J854otSRXUOKhYVGVULL9oh0a0z/9EG?=
 =?us-ascii?q?ta3jw0azaqupDhlRxglG2dNGpzrGbeecxoxRbf5cbQRP5L0jodWSl4jyLaBly9?=
 =?us-ascii?q?P9mv4NWVmI3PsuG4V2K9SJJTdTPnwp+HtCu+/WdqGwGwn+ivmt37Fgg3yS372M?=
 =?us-ascii?q?NwVSXLrxb8ZZPn17+gPuJkfUloBVn85NR8GoxlloswhZcQ2WUVh5mP/HoHl3vz?=
 =?us-ascii?q?Pstf2a7kcHUNQjsLycbP4Af5wE1jMm6Jx4XhW3Sd2MRhYMO2YmEX2iI79M1KDK?=
 =?us-ascii?q?aU7LpZnSp6uFa4rATRYeRjkTcZ0/ch9Hkag+QRsgo30iqdGqwSHVVfPSH0lBSH?=
 =?us-ascii?q?9dG+oL9XZGaya7ew0kV+kMulDLGDpAFcRXn4do0jHS928sVwLlbM3Gfv5YHjfd?=
 =?us-ascii?q?nadcgTuQGMkxfck+hVL4o8lv8LhSpkI23xp3MkxPAgjRxyw566ppOIJHt3/KK2?=
 =?us-ascii?q?GRNYMjz1Z8UO+jDil6pen8CW35yxEZVlADkEQJzoTfewGjIIqfvnLxqOECE7qn?=
 =?us-ascii?q?qDBbrfGgqf5F1nrn3VFZCrKmqXJGIYzdh5QBmdJUpfgB0bXTkgn545EByqy9Ll?=
 =?us-ascii?q?cEtj+j8R4Vv4oANWyu10Lxn/TnvfpACwZzgvUpefKx5W7hxY60fRLMyT9eZzHy?=
 =?us-ascii?q?Be/p28ow2BMG2bZwJUDW4XXkyIHUzsPr6r5dPY6eiXGvK+L+fSYbWJseFeVe2H?=
 =?us-ascii?q?xZex3Yt95TqMKt+DPnp/D/04x0pDW2p2G9/CljULSiwXkT/NbsGBqBe9/C13st?=
 =?us-ascii?q?6w8PDxVA3z4ouPDqNYMc9z9BCunaeDK+mQiT55KDZfy5MM3GLIx6IZ3FIIkCFu?=
 =?us-ascii?q?cD+tEbsbuC7JTaLQnLJXDhEBZyNyMstI87wz3g1XNcHHjdP106ZyjuQpBFddSV?=
 =?us-ascii?q?zhhsapaNQKI26jNVPHB0WLNLWcKT3I2cH3Zqy8RqNKjOVJrB29ojKbE07lPjSe?=
 =?us-ascii?q?mDjlTRGvMedQjC6FOBxSop2ychFoCWL7VtLpdgW7MMNrjT0x2bA7nG7KOnUGMT?=
 =?us-ascii?q?dic0JBtLmQ7SJDj/V7GmxB6GdlLOaelyaY6enYNogZsf9xDitokOJa5Wwwy6FJ?=
 =?us-ascii?q?4yFcWPx1hCzSo8Zyo1Gnl+mD0CZoXABSpTZLmo2Lu15vOaHY9plGRHbF8wgB7W?=
 =?us-ascii?q?SWCxQWudRlDsfjtLxXytjKjKjzMitN88rI/csAAMjZMMKGP2AnMRrsGT7UChMK?=
 =?us-ascii?q?TD+rNW7FgUxdn+qf9nmUrpg8t5jtl4ACSr5dVFwpCPwaDl5pE8AFIJdyDXsYlu?=
 =?us-ascii?q?uhjcUIrVSzqBrcXo0OspnDV/uJKfHuIj3fiqNLMUgm27T9eKEaKo361lEqRlRh?=
 =?us-ascii?q?moPbFlDLFYRIqzFhbwIp5klA6355X2ApwGroZA2s634UDri/mRtg2Vg2Wvgk6D?=
 =?us-ascii?q?q5uwR/HVHNviZl1RBpwdg=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AtAAA6xfZbh0O0hNFiHQEBBQEHBQGBU?=
 =?us-ascii?q?wYBCwGBMCWBFIECJwqDboh3iyKBaCUUlyYUgV8sBwwBiFIiNgcNAQMBAQEBAQE?=
 =?us-ascii?q?CARMBAQEIDQkIKSMMgjYkAYJhAQEBAQIBAQIgBBkBARMkAQQBCQEBAQEIDgoCA?=
 =?us-ascii?q?g0ZAgIDVAIEEwWDHAGBeQgBBKhYcHwzgnYBAQWHHwiBC4p+gVc/gUSCX4Rngxu?=
 =?us-ascii?q?CV4sThEs0j3IHAoIcBI8nkQiZVicGggBNI4M8CYISDBcSgziKcFSBAgMBASETi?=
 =?us-ascii?q?VMEgSoBgR4BAQ?=
X-IPAS-Result: =?us-ascii?q?A0AtAAA6xfZbh0O0hNFiHQEBBQEHBQGBUwYBCwGBMCWBFIE?=
 =?us-ascii?q?CJwqDboh3iyKBaCUUlyYUgV8sBwwBiFIiNgcNAQMBAQEBAQECARMBAQEIDQkIK?=
 =?us-ascii?q?SMMgjYkAYJhAQEBAQIBAQIgBBkBARMkAQQBCQEBAQEIDgoCAg0ZAgIDVAIEEwW?=
 =?us-ascii?q?DHAGBeQgBBKhYcHwzgnYBAQWHHwiBC4p+gVc/gUSCX4RngxuCV4sThEs0j3IHA?=
 =?us-ascii?q?oIcBI8nkQiZVicGggBNI4M8CYISDBcSgziKcFSBAgMBASETiVMEgSoBgR4BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,266,1539673200"; 
   d="scan'208";a="54432677"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 22 Nov 2018 07:04:21 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2405725AbeKWBoC (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 22 Nov 2018 20:44:02 -0500
Received: from mail.efficios.com ([167.114.142.138]:51508 "EHLO
        mail.efficios.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1728272AbeKWBoC (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 22 Nov 2018 20:44:02 -0500
Received: from localhost (ip6-localhost [IPv6:::1])
        by mail.efficios.com (Postfix) with ESMTP id 7E3B02504CC;
        Thu, 22 Nov 2018 10:04:17 -0500 (EST)
Received: from mail.efficios.com ([IPv6:::1])
        by localhost (mail02.efficios.com [IPv6:::1]) (amavisd-new, port 10032)
        with ESMTP id W2wSU6brnzaR; Thu, 22 Nov 2018 10:04:17 -0500 (EST)
Received: from localhost (ip6-localhost [IPv6:::1])
        by mail.efficios.com (Postfix) with ESMTP id 082972504B9;
        Thu, 22 Nov 2018 10:04:17 -0500 (EST)
DKIM-Filter: OpenDKIM Filter v2.10.3 mail.efficios.com 082972504B9
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=efficios.com;
        s=default; t=1542899057;
        bh=/jGcv3ikfocAK+t2x7GFxnhMfNd9oklnCzgNoZY7JQc=;
        h=Date:From:To:Message-ID:MIME-Version;
        b=dHL9CJrMrXqdieDm5o+mEAgBq+bCJsMhBLoNFnq/fDMxi2KMSTodQRd3pLI98nj2l
         wOOWbMXfuJRX5Tw3NIGQFE2zZzhNcS5Wv8KKQ2s1QiGvdFu0Ts6G7HzUcFy7worGiL
         7dgFb9nxwOiOX/IU2FlusrEhbqj6i/E4axMm0+UX3TT3OjEDLF5aWmmpvkPKWFQpXw
         +eQrjT8VPjlGE063I91d/VV1yw4aNLLLqQsirmMAW1+1/8WjdHYW4pUWhcaCulVGlv
         +YZTAQosV90jzZum7orL0ON/bgBr9dhVZlqI0J3D8W9D6VOklTdMqamhxFc62wl/nx
         NNPEenWBFRnmw==
X-Virus-Scanned: amavisd-new at efficios.com
Received: from mail.efficios.com ([IPv6:::1])
        by localhost (mail02.efficios.com [IPv6:::1]) (amavisd-new, port 10026)
        with ESMTP id wV8wBdqjCTrL; Thu, 22 Nov 2018 10:04:16 -0500 (EST)
Received: from mail02.efficios.com (mail02.efficios.com [167.114.142.138])
        by mail.efficios.com (Postfix) with ESMTP id DB5C72504B2;
        Thu, 22 Nov 2018 10:04:16 -0500 (EST)
Date: Thu, 22 Nov 2018 10:04:16 -0500 (EST)
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
To: Rich Felker <dalias@libc.org>
Cc: carlos <carlos@redhat.com>, Florian Weimer <fweimer@redhat.com>,
        Joseph Myers <joseph@codesourcery.com>,
        Szabolcs Nagy <szabolcs.nagy@arm.com>,
        libc-alpha <libc-alpha@sourceware.org>,
        Thomas Gleixner <tglx@linutronix.de>,
        Ben Maurer <bmaurer@fb.com>,
        Peter Zijlstra <peterz@infradead.org>,
        "Paul E. McKenney" <paulmck@linux.vnet.ibm.com>,
        Boqun Feng <boqun.feng@gmail.com>,
        Will Deacon <will.deacon@arm.com>,
        Dave Watson <davejwatson@fb.com>, Paul Turner <pjt@google.com>,
        linux-kernel <linux-kernel@vger.kernel.org>,
        linux-api <linux-api@vger.kernel.org>
Message-ID: <782067422.9852.1542899056778.JavaMail.zimbra@efficios.com>
In-Reply-To: <20181122143603.GD23599@brightrain.aerifal.cx>
References: <20181121183936.8176-1-mathieu.desnoyers@efficios.com> <20181122143603.GD23599@brightrain.aerifal.cx>
Subject: Re: [RFC PATCH v4 1/5] glibc: Perform rseq(2) registration at nptl
 init and thread creation
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: 7bit
X-Originating-IP: [167.114.142.138]
X-Mailer: Zimbra 8.8.10_GA_3047 (ZimbraWebClient - FF52 (Linux)/8.8.10_GA_3041)
Thread-Topic: glibc: Perform rseq(2) registration at nptl init and thread creation
Thread-Index: tTPuXGNepoFLbbnqmkjFnnTYo2v1fg==
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

----- On Nov 22, 2018, at 9:36 AM, Rich Felker dalias@libc.org wrote:

> On Wed, Nov 21, 2018 at 01:39:32PM -0500, Mathieu Desnoyers wrote:
>> Register rseq(2) TLS for each thread (including main), and unregister
>> for each thread (excluding main). "rseq" stands for Restartable
>> Sequences.
> 
> Maybe I'm missing something obvious, but "unregister" does not seem to
> be a meaningful operation. Can you clarify what it's for?

There are really two ways rseq TLS can end up being unregistered: either
through an explicit call to the rseq "unregister", or when the OS frees the
thread's task struct.

You bring an interesting point here: do we need to explicitly unregister
rseq at thread exit, or can we leave that to the OS ?

The key thing to look for here is whether it's valid to access the
TLS area of the thread from preemption or signal delivery happening
at the very end of START_THREAD_DEFN. If it's OK to access it until
the very end of the thread lifetime, then we could do without an
explicit unregistration. However, if at any given point of the late
thread lifetime we end up in a situation where reading or writing to
that TLS area can cause corruption, then we need to carefully
unregister it before that memory is reclaimed/reused.

What we have below the current location for the __rseq_unregister_current_thread ()
call is as follows. I'm not all that convinced that it's valid to access the TLS
area up until __exit_thread () at the very end, especially after setting
setxid_futex back to 0.

Thoughts ?

  /* Unregister rseq TLS from kernel. */
  if (has_rseq && __rseq_unregister_current_thread ())
    abort();

  advise_stack_range (pd->stackblock, pd->stackblock_size, (uintptr_t) pd,
                      pd->guardsize);

  /* If the thread is detached free the TCB.  */
  if (IS_DETACHED (pd))
    /* Free the TCB.  */
    __free_tcb (pd);
  else if (__glibc_unlikely (pd->cancelhandling & SETXID_BITMASK))
    {
      /* Some other thread might call any of the setXid functions and expect
         us to reply.  In this case wait until we did that.  */
      do
        /* XXX This differs from the typical futex_wait_simple pattern in that
           the futex_wait condition (setxid_futex) is different from the
           condition used in the surrounding loop (cancelhandling).  We need
           to check and document why this is correct.  */
        futex_wait_simple (&pd->setxid_futex, 0, FUTEX_PRIVATE);
      while (pd->cancelhandling & SETXID_BITMASK);

      /* Reset the value so that the stack can be reused.  */
      pd->setxid_futex = 0;
    }

  /* We cannot call '_exit' here.  '_exit' will terminate the process.

     The 'exit' implementation in the kernel will signal when the
     process is really dead since 'clone' got passed the CLONE_CHILD_CLEARTID
     flag.  The 'tid' field in the TCB will be set to zero.

     The exit code is zero since in case all threads exit by calling
     'pthread_exit' the exit status must be 0 (zero).  */
  __exit_thread ();

  /* NOTREACHED */

Thanks,

Mathieu


-- 
Mathieu Desnoyers
EfficiOS Inc.
http://www.efficios.com
