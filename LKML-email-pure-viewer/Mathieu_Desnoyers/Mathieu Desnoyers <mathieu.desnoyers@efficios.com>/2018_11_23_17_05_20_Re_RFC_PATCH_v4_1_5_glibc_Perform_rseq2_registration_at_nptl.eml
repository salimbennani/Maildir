Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 24 Nov 2018 12:36:20 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id DFC7C580460;
	Fri, 23 Nov 2018 09:05:28 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga003-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 23 Nov 2018 09:05:28 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A26vqMBWGpOE7WrBFvvbr1lMkeuDV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhGDuqdThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGo2y?=
 =?us-ascii?q?YYsRAeQCP+lYoZTzqFQSohWxBAmiA//vyiRQhnL0xqA6z+YsHh3a0AE6A94Dsn?=
 =?us-ascii?q?LZp8j1OqcIVuC1ybHFwzLZYPNK2Tf96ZbHcg08qv+CQ71waszRyU4vFgzblFWQ?=
 =?us-ascii?q?spHuMjSQ1usXr2ib7+tgWvyyi2I9tg5+vCOvxsEriojJmI0V0EvE+D5nz4Y7K9?=
 =?us-ascii?q?24SVJ0Yd+jEJtLrS2VK4x2QsY7TmxupS00xLoGuZuhcygLzpQq3wDQa/KJc4iJ?=
 =?us-ascii?q?/h3jVeGRISxiiH15f7K/ghC/+lWjxO3kTsS4zkpGoy5fntXRuH0ByQbf5tWER/?=
 =?us-ascii?q?dh5Eus2DSC2xjO5uxFI004j7fXJ4Muz7Iqi5YevlrPEjXrlEj4j6KbcFgv9PKy?=
 =?us-ascii?q?5OT9eLrmo4eRN49qhQH6NaQjgtK/AesmPQgURWSb+vqz1Kfl/ULnRLVGlPo2kr?=
 =?us-ascii?q?PWsJzCJMQboLC2AxNN34o99xqyCy2q3MkWkHUZNl5JZRGKg5TzN1zPIv30FfK/?=
 =?us-ascii?q?jE6tkDdvyfDGJLrhApDVI3jHkbfhe6t96kFFxAow099f/ZRUBa8FIP7qXU/wut?=
 =?us-ascii?q?rYAQEjMwGv3ebnB8ty1pkEVWKMHKCZKqXSvkGM5u41JOmMfoAVtC7nK/c5//7u?=
 =?us-ascii?q?kWM5mVgFcKmt3JsXa263Eu5pIkWEenfshtYBEWEXvgsxVuDqiVuCUSJNaHa2Ra?=
 =?us-ascii?q?4z+jY7CIe+B4fZWo+tmKCB3Du8HpBOZmBJEFGMEWvyeIWDQfsMaD+SLdVnkjwL?=
 =?us-ascii?q?TrWhT44h1ReztA710bZnL+zU+jEGupLnztR6++rTlRQq/zxuE8udy32NT31znm?=
 =?us-ascii?q?4QRT82275wrVZ+yleE16h4hftYGMdX5/NIVAc6KJHdw/Z7C9D0RgLOYNOJREy6?=
 =?us-ascii?q?TdWhBDE7VsgxzMMWY0ZhB9WiiQjO0DCxA78VkLyLB4Y48rjG0HjzPMt9z3fG1K?=
 =?us-ascii?q?88j1gpWMdPNGumhrJh+AjXHYLGj0KZl6Oyf6QGwCHN7HuDzXaJvExAUw5/S6PF?=
 =?us-ascii?q?UWobZkvXt9v54EzCQqSqCbQmNAtB1MGDJrFLat3vkVVJWvPjNM7CbGK2nme6HQ?=
 =?us-ascii?q?yIya+UbIr2Z2Ud2z3QB1UenAAN43mKLwg+CT2no2LFEjNuE1XjY0fv8el7rHO2?=
 =?us-ascii?q?VUs0zwCMb0182Lu54B8VhfqAS/wN2rIIojsuqzJxHFylxdLZF8KApxZ9fKVbed?=
 =?us-ascii?q?4y/U1I1XzHuABnPpyvNaZihkUAfARxpE7u0xR3CoNdkckltn8qzQxyKb6G31NF?=
 =?us-ascii?q?bT+XwZfwOrjPIGno4B+vc7LW2k3Z0NuO5qcP6fE4q1L/vAGpFksu6Wln38NS03?=
 =?us-ascii?q?uG4pXKDQwSUZ3qX0Yz9hh6oazaYyYn64PV031sLbe7sjvY1901A+slzw6qf81D?=
 =?us-ascii?q?P6OcCA/yD8oaCtC0J+wuhVeoYQwLPeBI+KEvIsOpauGJ2KioPOZngjKrlmBH4I?=
 =?us-ascii?q?F70kKR+CtwUO/I35AZw/6G2guLTSvzjFCkssrvg4BLeSkSHnajySjjHINQZrBy?=
 =?us-ascii?q?cZwXBmu0Isy3xs9xh5jiW3ND8F6jBlUG2NKmeBaIblz92xFQ2loToXC9hSS4yD?=
 =?us-ascii?q?l0mSkzrqWDxCzO3/jidB0fN25RRWltkU3jIZKpgNAdRkSoaRYmlAGk5Urj26dU?=
 =?us-ascii?q?vqB/IHTNTkdSeCj2KXpvUq+xtrqEfs5O54kksSRRUOSgf1+aTqTxrAcd0yPmB2?=
 =?us-ascii?q?Fe3iw0dym2upXlmBx3kGKcLHdpoHvZY81w3grf5NrHSP5V3zoGQjR4iDbNCli9?=
 =?us-ascii?q?Odmp4cubl5PZvu+iUGKhU4VZcTP3woOYqCu7+WpqDAW9n/+pgN3nEgs60Sjh29?=
 =?us-ascii?q?lxTyrIrxX8Yojt16ukN+JqZU1oBF7668pnFYByiIowhJcM2XcEgpWZ52YIkWD2?=
 =?us-ascii?q?Md9Dw6LxcGINRSIXw97S+AXk2FdsLnWTy4L7V3WdxNBsZ927YmMQxyI84NpGCK?=
 =?us-ascii?q?aS7LxYgyR1pkC0oh7WYfh4hj0d0+ch6GYGg+EVvwog1iadDaoTHUVCPSzsig6H?=
 =?us-ascii?q?79axrKhMYGavcL6w1FdxnNy7DbGCpB1cV2j9eps4ASBw6cB/OkrW0HLv8oHkZM?=
 =?us-ascii?q?XQbdULux2RkhfAjPJaJIg/l/UUnipnJXzyvWc+xOEllxxu0oq3vIyGK2Vr4aK4?=
 =?us-ascii?q?DQRUNjzzZ8MP5D7tibxSkdqR34CqBp9hACkEXIP0TfK0FzIfrejnNwGLEDEmq3?=
 =?us-ascii?q?aUA7zfHRKE6Ed9rnLCCJSrN3CRJHkEwtRuXhidJEpDgA8KWDU2hII2FgevxMb5?=
 =?us-ascii?q?akd2+igR5kLkqhtL0u9nLAPwUmDbpAe1cDs0TIWfIQFS7gFD4UfVLMOf4vhyHy?=
 =?us-ascii?q?Fe4p2usgiNJnaHaARPCGEDQlaECEz7Prmy+dnA9PCVBuikIPvLf7qOsvZSV+uS?=
 =?us-ascii?q?yZKsz4tm/CuMNsOVMXl5FPA73ktDXXZkG8XWgTkPSioXlz7TYM6fvhuz5ip3rs?=
 =?us-ascii?q?Wn+vTxRA3v/ZePC6dVMdh3+xG2hrqDN/eNhCljLzZUzIgMxXjOyLgQx1MSjyBu?=
 =?us-ascii?q?dz+wEbUPryLNTaTQmrNJAB4fcS98KMxI76ck1AlXJcHbks/11qJ/jvMtC1dKS1?=
 =?us-ascii?q?3hmsKqZcwLOW29N0nHBEGENLuYPz3L3tr3bLi4Sb1RiuVUqhKxtSyaE0/lIjSM?=
 =?us-ascii?q?iT3pWwqzPuFLiSGRJAZet52lchZxFWjjS8rrZQemMNBslz053701imnONW4dKj?=
 =?us-ascii?q?V8d0JNrruN7SJXmPl/GmpB7mZ7IumAgSqW8+7YKpMOu/txHit0j/5a4Gg9y7ZN?=
 =?us-ascii?q?8CFERfl1lDHOodJ0v16mkveAyjx8XRpKqzZLgp+LvEp4NaXY8JlARWjL/BYX4W?=
 =?us-ascii?q?qMDBQKosNvCsfztKBI1tjPiKXzJS9C8t3O+8scAsnUKMSfP3sgMRrmAjjUDAQe?=
 =?us-ascii?q?QD6vNGHfgVFdkf6I+n2UqJg6tobjmJ4URrBHU1w1E6BSNkMwJt0JIN9ZUzcnnK?=
 =?us-ascii?q?TT2MIB4Xu3tzHVRc9R+JfdWaTBL+/oLWO8hKVEZhYViZ/1NoIUJ4DhwAQ2b1Bm?=
 =?us-ascii?q?nIXHBgzcUMtLpTxsdBQcrUtD8XN/SXZ10EXgPFD+qEQPHOK5y0ZlwjB1Zv4goX?=
 =?us-ascii?q?K1uw86?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0DNAQCKMvhbh0O0hNFjHgEGBwaBZYExg?=
 =?us-ascii?q?TmBAicKg2+Id4shgWg5lzuBXS4HDAGIWiI4EgEDAQEBAQEBAgETAQEBCA0JCCk?=
 =?us-ascii?q?jDII2JAGCYgMDAQIgHQEBEyQBBQkBAQEBCA4MAg0ZAgIDVAIEEwWDHAGCAQEEp?=
 =?us-ascii?q?iRwgS+CdgEBBYcVCIELin6BVz+BRIIqNYRLARIBgyOCV4kbgXiESzROjyQHAoI?=
 =?us-ascii?q?cBI8nkQiZVjeBBXFNI4M8CYISDBcSgziKcFSBAgMBASETiS+BHwGBHgEB?=
X-IPAS-Result: =?us-ascii?q?A0DNAQCKMvhbh0O0hNFjHgEGBwaBZYExgTmBAicKg2+Id4s?=
 =?us-ascii?q?hgWg5lzuBXS4HDAGIWiI4EgEDAQEBAQEBAgETAQEBCA0JCCkjDII2JAGCYgMDA?=
 =?us-ascii?q?QIgHQEBEyQBBQkBAQEBCA4MAg0ZAgIDVAIEEwWDHAGCAQEEpiRwgS+CdgEBBYc?=
 =?us-ascii?q?VCIELin6BVz+BRIIqNYRLARIBgyOCV4kbgXiESzROjyQHAoIcBI8nkQiZVjeBB?=
 =?us-ascii?q?XFNI4M8CYISDBcSgziKcFSBAgMBASETiS+BHwGBHgEB?=
X-IronPort-AV: E=Sophos;i="5.56,270,1539673200"; 
   d="scan'208";a="42009958"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 23 Nov 2018 09:05:27 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2436814AbeKXDu1 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 23 Nov 2018 22:50:27 -0500
Received: from mail.efficios.com ([167.114.142.138]:41984 "EHLO
        mail.efficios.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1732237AbeKXDu0 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 23 Nov 2018 22:50:26 -0500
Received: from localhost (ip6-localhost [IPv6:::1])
        by mail.efficios.com (Postfix) with ESMTP id E227C80168;
        Fri, 23 Nov 2018 12:05:21 -0500 (EST)
Received: from mail.efficios.com ([IPv6:::1])
        by localhost (mail02.efficios.com [IPv6:::1]) (amavisd-new, port 10032)
        with ESMTP id 025FihbIMhMg; Fri, 23 Nov 2018 12:05:21 -0500 (EST)
Received: from localhost (ip6-localhost [IPv6:::1])
        by mail.efficios.com (Postfix) with ESMTP id 4BE9E80160;
        Fri, 23 Nov 2018 12:05:21 -0500 (EST)
DKIM-Filter: OpenDKIM Filter v2.10.3 mail.efficios.com 4BE9E80160
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=efficios.com;
        s=default; t=1542992721;
        bh=j84pmQO+YKuw4w2kLWuU6d+VzTAtPPCWMpYC5OKCPjI=;
        h=Date:From:To:Message-ID:MIME-Version;
        b=kqHH8VXWWiZmz9L5t23PWf93yz8DxwFlZOrhUB5n1FIwC7LB0qp6tsBafgh1gGWql
         TDsabUBQ+VXNe+s0EuGE/SIoyP/ItoPHzGPuDwMSC5QSZ5ECKKQCuBhDtsJGiRUQ50
         vziS0T1vRw+KSdrdnRJD9zwxdqjNcJTivPVMD4BTtzWaoCTI83jdcMniSVkyJlFEQ2
         Me3zH37VTO/iqpQwUKVTVn3cgzTJZ+nmGneXsXO8L1Y/hq15CL6ENHqENt2YFtbiS9
         yYhsXC2wwea9K11WOlZb5xjHVIyVSOkAJigDiIUVO5hC1VSF0h4Bcv08KUgvlYEbfn
         AJRHFlGFa4QJg==
X-Virus-Scanned: amavisd-new at efficios.com
Received: from mail.efficios.com ([IPv6:::1])
        by localhost (mail02.efficios.com [IPv6:::1]) (amavisd-new, port 10026)
        with ESMTP id v79uhz9ja7fd; Fri, 23 Nov 2018 12:05:21 -0500 (EST)
Received: from mail02.efficios.com (mail02.efficios.com [167.114.142.138])
        by mail.efficios.com (Postfix) with ESMTP id 2CEC380158;
        Fri, 23 Nov 2018 12:05:21 -0500 (EST)
Date: Fri, 23 Nov 2018 12:05:20 -0500 (EST)
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
To: Rich Felker <dalias@libc.org>
Cc: Florian Weimer <fweimer@redhat.com>, carlos <carlos@redhat.com>,
        Joseph Myers <joseph@codesourcery.com>,
        Szabolcs Nagy <szabolcs.nagy@arm.com>,
        libc-alpha <libc-alpha@sourceware.org>,
        Thomas Gleixner <tglx@linutronix.de>,
        Ben Maurer <bmaurer@fb.com>,
        Peter Zijlstra <peterz@infradead.org>,
        "Paul E. McKenney" <paulmck@linux.vnet.ibm.com>,
        Boqun Feng <boqun.feng@gmail.com>,
        Will Deacon <will.deacon@arm.com>,
        Dave Watson <davejwatson@fb.com>, Paul Turner <pjt@google.com>,
        linux-kernel <linux-kernel@vger.kernel.org>,
        linux-api <linux-api@vger.kernel.org>
Message-ID: <1150466925.11664.1542992720871.JavaMail.zimbra@efficios.com>
In-Reply-To: <20181123142843.GJ23599@brightrain.aerifal.cx>
References: <20181121183936.8176-1-mathieu.desnoyers@efficios.com> <686626451.10113.1542901620250.JavaMail.zimbra@efficios.com> <87wop5xeit.fsf@oldenburg.str.redhat.com> <1045257294.10291.1542905262086.JavaMail.zimbra@efficios.com> <87k1l5xd33.fsf@oldenburg.str.redhat.com> <20181122171010.GH23599@brightrain.aerifal.cx> <871s7cvt1l.fsf@oldenburg.str.redhat.com> <20181123142843.GJ23599@brightrain.aerifal.cx>
Subject: Re: [RFC PATCH v4 1/5] glibc: Perform rseq(2) registration at nptl
 init and thread creation
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: 7bit
X-Originating-IP: [167.114.142.138]
X-Mailer: Zimbra 8.8.10_GA_3047 (ZimbraWebClient - FF52 (Linux)/8.8.10_GA_3041)
Thread-Topic: glibc: Perform rseq(2) registration at nptl init and thread creation
Thread-Index: ARgaREecntcbLPPp7zBSi7U8W/gzsQ==
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

----- On Nov 23, 2018, at 9:28 AM, Rich Felker dalias@libc.org wrote:
[...]
> 
> Absolutely. As long as it's in libc, implicit destruction will happen.
> Actually I think the glibc code shound unconditionally unregister the
> rseq address at exit (after blocking signals, so no application code
> can run) in case a third-party rseq library was linked and failed to
> do so before thread exit (e.g. due to mismatched ref counts) rather
> than respecting the reference count, since it knows it's the last
> user. This would make potentially-buggy code safer.

OK, let me go ahead with a few ideas/questions along that path.

Let's say our stated goal is to let the "exit" system call from the
glibc thread exit path perform rseq unregistration (without explicit
unregistration beforehand). Let's look at what we need.

First, we need the TLS area to be valid until the exit system call
is invoked by the thread. If glibc defines __rseq_abi as a weak symbol,
I'm not entirely sure we can guarantee the IE model if another library
gets its own global-dynamic weak symbol elected at execution time. Would
it be better to switch to a "strong" symbol for the glibc __rseq_abi
rather than weak ?

If we rely on implicit unregistration by the exit system call, then we
need to be really sure that the __rseq_abi TLS area can be accessed
(load and store) from kernel preemption up to the point where exit
is invoked. If we have that guarantee with the IE model, then we should
be fine. This means the memory area with the __rseq_abi sits can only
be re-used after the tid field in the TLB is set to 0 by the exit system
call. Looking at allocatestack.c, it looks like the FREE_P () macro
does exactly that.

With all the above respected, we could rely on implicit rseq unregistration
by thread exit rather than do an explicit unregister. We could still need
to increment the __rseq_refcount upon thread start however, so we can
ensure early adopter libraries won't unregister rseq while glibc is using
it. No need to bring the refcount back to 0 in glibc though.

There has been presumptions about signals being blocked when the thread
exits throughout this email thread. Out of curiosity, what code is
responsible for disabling signals in this situation ? Related to this,
is it valid to access a IE model TLS variable from a signal handler at
_any_ point where the signal handler nests over thread's execution ?
This includes early start and just before invoking the exit system call.

Thanks,

Mathieu

-- 
Mathieu Desnoyers
EfficiOS Inc.
http://www.efficios.com
