Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (61.164.42.155:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 18 Nov 2018 02:38:18 -0000
Received: from icoremail.net (unknown [209.85.215.182])
	by mail-app2 (Coremail) with SMTP id by_KCgDXv+5buvBbxMqtAQ--.51863S3;
	Sun, 18 Nov 2018 09:03:24 +0800 (CST)
Received: from mail-pg1-f182.google.com (unknown [209.85.215.182])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwCHZUFZuvBbXltPAA--.9478S3;
	Sun, 18 Nov 2018 09:03:22 +0800 (CST)
Received: by mail-pg1-f182.google.com with SMTP id n2so5049700pgm.3
        for <xuliker@zju.edu.cn>; Sat, 17 Nov 2018 17:03:22 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:date:from:to:cc
         :subject:message-id:reply-to:references:mime-version
         :content-disposition:in-reply-to:user-agent:sender:precedence
         :list-id;
        bh=6gpN3ShItAMSgPSk9+2mmeZZdcFO8BKuodfMu9Xx5cY=;
        b=Wz521Mup3ccl/3pw9NjuVYboCu9jhhTUVU1bkLhaTYlVjdC1h6gHRoiGZnhgCcako0
         finodJqy+Q/KNf3pfZMLlzZDeCJqjDuFrvwzeUt06PGWnziTb/AHWZCU3nxduCS1N8z5
         Ha9/trEHuwgTG9eKQBqkkzDxOhGs0DL1Civbxj9yqaCKNMCUatByXf2n7Z5GSKFzLagA
         JoHbkS01Dp6bIgZbBl40bKuYp0nZr43uuTqiDm0Z0SG98CzMrdpRkELjkuIuYMZ6OqSZ
         CWKtL6PzwXu82Ny9ThKmET5nuwYXQksLCd+Yg5AVbjQ3+gQZVuiJjuDgHICZ0DubbI+k
         OIxg==
X-Gm-Message-State: AGRZ1gJHw3I2qrC6vhrh2cAb7404vryy4vrD8qF8A2fbE3ynX56DHrfD
	wr7/EHGlNW1w3vN/K0qTvEAmb6o6vcayG/aAos9yoxRvRGSRc/kOEA==
X-Received: by 2002:a62:ab0d:: with SMTP id p13mr16782461pff.211.1542503001748;
        Sat, 17 Nov 2018 17:03:21 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:d106:0:0:0:0 with SMTP id l6-v6csp1050149pju;
        Sat, 17 Nov 2018 17:03:20 -0800 (PST)
X-Google-Smtp-Source: AJdET5ckxBACOCi5BiOWnkoQcILdO1HhGfyTMtb0bFDkpruuLlGrM98shWPmu8mLe5AZSmjWiHZT
X-Received: by 2002:a63:c746:: with SMTP id v6-v6mr15544505pgg.108.1542503000724;
        Sat, 17 Nov 2018 17:03:20 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542503000; cv=none;
        d=google.com; s=arc-20160816;
        b=gjBB2HMMCkdHdzux5drcgOZMmK5itliNbEYGB15G+wSSsXKuxvVPH8eYRqphbwQHqx
         TDyoe2dbYWJ66fdc8O0QKVQl3JGp4FU2fxod4ZRhptAXPfl1fvFVQtYHE6GPGU2QBoIx
         VpYGG0Le7sux8NEeh+HtJeeQ/bBDrDeNP3lyiC+QJQ1ITwyBJI29mgzG6I8qFrOvsJqV
         GBxpLFQ8X+Ua9G9jIA0gXmeAd/MW2pz6VyiN5SKsGZqeNlNWBrgUNEOv6UFaYI1YHYAH
         h3suv1gbFWsMRmOmHcZUhEQrUWH3XDk7/qODVEj5/5Xc+weerV942KDhvTCK18Y7V0TH
         YjsA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:user-agent:in-reply-to
         :content-disposition:mime-version:references:reply-to:message-id
         :subject:cc:to:from:date:dkim-signature;
        bh=6gpN3ShItAMSgPSk9+2mmeZZdcFO8BKuodfMu9Xx5cY=;
        b=HKR2+gQrNe4MfKDxD1YiGQLEFjCbbjfV+mN7o6IlTZn9M3+mp0nrcPUtv8M5ASMKSh
         5XCsidsmmd6UqREMpTp/QMPVi9a6KPK4SVC/5rcu2pnRoO48LHPOJcms1T+m5nsIOsFw
         BfgiSTke5uEDJWY1Z4BZCyLlayhz/2zzlBCElCjDxdauj+jQgJ8Pe1Fb/QVcRQpn/aCN
         zaCRcZs0axAf4GeifkaO8b32bJzoiJw65HslyLPSjLTqvUCyiwPtYzD6ugfzE81aaAs6
         hsrDb8r8ho85v3nVN+J2DeQ21HbYxOzwVth79pUNfA4XxQOZDkRBPDS1q79f7DCQTYEF
         CO9w==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@gmail.com header.s=20161025 header.b=RSZHO8df;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;
       dmarc=pass (p=NONE sp=QUARANTINE dis=NONE) header.from=gmail.com
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id j132si4839817pfc.84.2018.11.17.17.02.39;
        Sat, 17 Nov 2018 17:03:20 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726862AbeKRLVH (ORCPT <rfc822;javier.barrio.mart@gmail.com>
        + 99 others); Sun, 18 Nov 2018 06:21:07 -0500
Received: from mail-ed1-f68.google.com ([209.85.208.68]:40434 "EHLO
        mail-ed1-f68.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725734AbeKRLVG (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sun, 18 Nov 2018 06:21:06 -0500
Received: by mail-ed1-f68.google.com with SMTP id d3so21990597edx.7
        for <linux-kernel@vger.kernel.org>; Sat, 17 Nov 2018 17:02:31 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=date:from:to:cc:subject:message-id:reply-to:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=6gpN3ShItAMSgPSk9+2mmeZZdcFO8BKuodfMu9Xx5cY=;
        b=RSZHO8dfMO59T5DrdFJhsn61gko4zau+aMOsWFTt6P5dg4X4n9mCwHS6XpeQyECB/g
         P0qfO0BnUvsM5Fa/Hi0CPSXGQjEDp4UFbDyLdmvitmGNGiZIn9eftyuuIeWJS+jX736j
         EGF7/jkLthfs/c+CMyB3i13FrEnnB/GPrGiaZ/30qZ+cJPct36xJc6ROd+onnWS8IhU2
         xmv0+ia8i2HFK4R5jZngLe1hjGh4gxrMx5fEONpi0/rT+2X0P6xG2gXqS7wIsl0RwS8j
         JnAt1q/IWwkB+6/Ft5oQm2Fp15ZihFytnONgJluiaf6ck6BuatPnYsPkqeWUvsRzoV71
         NNPA==
X-Received: by 2002:a05:6402:796:: with SMTP id d22mr13202326edy.81.1542502951137;
        Sat, 17 Nov 2018 17:02:31 -0800 (PST)
Received: from localhost ([185.92.221.13])
        by smtp.gmail.com with ESMTPSA id x58sm8174055edm.10.2018.11.17.17.02.30
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Sat, 17 Nov 2018 17:02:30 -0800 (PST)
Date: Sun, 18 Nov 2018 01:02:29 +0000
From: Wei Yang <richard.weiyang@gmail.com>
To: Wengang Wang <wen.gang.wang@oracle.com>
Cc: cl@linux.com, penberg@kernel.org, rientjes@google.com,
        iamjoonsoo.kim@lge.com, akpm@linux-foundation.org,
        linux-mm@kvack.org, linux-kernel@vger.kernel.org
Subject: Re: [PATCH] mm: use this_cpu_cmpxchg_double in put_cpu_partial
Message-ID: <20181118010229.esa32zk5hpob67y7@master>
Reply-To: Wei Yang <richard.weiyang@gmail.com>
References: <20181117013335.32220-1-wen.gang.wang@oracle.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181117013335.32220-1-wen.gang.wang@oracle.com>
User-Agent: NeoMutt/20170113 (1.7.2)
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwCHZUFZuvBbXltPAA--.9478S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoWxWw43Wry5ZryDtryxWw4UJwb_yoWrZFW3pa
	yfG3W3GFWkCryIkw4fGFWvk348t34xAFW7Jay2q34rurn8Xr1vqFyIyryvvFy5ur1xZry0
	vr4vy3Wa9F4UZaUanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUUjbIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUPFb7Iv0xC_KF4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Xr0_Ar1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1l84ACjcxK6I8E
	87Iv67AKxVW0oVCq3wA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_GcCE3s1le2I262IYc4CY6c
	8Ij28IcVAaY2xG8wAqx4xG64xvF2IEw4CE5I8CrVC2j2WlYx0E2Ix0cI8IcVAFwI0_Jr0_
	Jr4lYx0Ex4A2jsIE14v26r1j6r4UMcvjeVCFs4IE7xkEbVWUJVW8JwACjcxG0xvEwIxGrw
	CjxxvEa2IrMxkF7I0Ew4C26cxK6c8Ij28IcwCY1Ik26cxK6xAEc7vF6xCjj44lc2xSY4AK
	6IIF6w4lc2IjII80xcxEwVAKI48JMxvI42IY6xIIjxv20xvE14v26r1j6r1xMxvI42IY6x
	IIjxv20xvEc7CjxVAFwI0_Jr0_Gr1lcIIF0xvEx4A2jsIE14v26F4j6r4UJwCYIxAIcVC2
	z280aVCY1x0267AKxVW8JVW8Jr1l42xK82IYc2Ij64vIr41l42xK82IY64kExVAvwVAq07
	x20xyl4x8a6x804xWl4I8I3I0E4IkC6x0Yz7v_Jr0_Gr1lx2IqxVAqx4xG67AKxVWUJVWU
	GwC20s026x8GjcxK67AKxVWUGVWUWwC2zVAF1VAY17CE14v26r1q6r43MIIYrxkI7VAKI4
	8JMIIF0xvE42xK8VAvwI8IcIk0rVWrJr0_WFyUJbIYCTnIWIevJa73UjIFyTuYvjxUqP8n
	UUUUU

On Fri, Nov 16, 2018 at 05:33:35PM -0800, Wengang Wang wrote:
>The this_cpu_cmpxchg makes the do-while loop pass as long as the
>s->cpu_slab->partial as the same value. It doesn't care what happened to
>that slab. Interrupt is not disabled, and new alloc/free can happen in the

Well, I seems to understand your description.

There are two slabs

   * one which put_cpu_partial() trying to free an object
   * one which is the first slab in cpu_partial list

There is some tricky case, the first slab in cpu_partial list we
reference to will change since interrupt is not disabled.

>interrupt handlers. Theoretically, after we have a reference to the it,

                                                                 ^^^
							 one more word?

>stored in _oldpage_, the first slab on the partial list on this CPU can be

                                            ^^^
One little suggestion here, mayby use cpu_partial would be more easy to
understand. I confused this with the partial list in kmem_cache_node at
the first time.  :-)

>moved to kmem_cache_node and then moved to different kmem_cache_cpu and
>then somehow can be added back as head to partial list of current
>kmem_cache_cpu, though that is a very rare case. If that rare case really

Actually, no matter what happens after the removal of the first slab in
cpu_partial, it would leads to problem.

>happened, the reading of oldpage->pobjects may get a 0xdead0000
>unexpectedly, stored in _pobjects_, if the reading happens just after
>another CPU removed the slab from kmem_cache_node, setting lru.prev to
>LIST_POISON2 (0xdead000000000200). The wrong _pobjects_(negative) then
>prevents slabs from being moved to kmem_cache_node and being finally freed.
>
>We see in a vmcore, there are 375210 slabs kept in the partial list of one
>kmem_cache_cpu, but only 305 in-use objects in the same list for
>kmalloc-2048 cache. We see negative values for page.pobjects, the last page
>with negative _pobjects_ has the value of 0xdead0004, the next page looks
>good (_pobjects is 1).
>
>For the fix, I wanted to call this_cpu_cmpxchg_double with
>oldpage->pobjects, but failed due to size difference between
>oldpage->pobjects and cpu_slab->partial. So I changed to call
>this_cpu_cmpxchg_double with _tid_. I don't really want no alloc/free
>happen in between, but just want to make sure the first slab did expereince
>a remove and re-add. This patch is more to call for ideas.

Maybe not an exact solution.

I took a look into the code and change log.

_tid_ is introduced by commit 8a5ec0ba42c4 ('Lockless (and preemptless)
fastpaths for slub'), which is used to guard cpu_freelist. While we don't
modify _tid_ when cpu_partial changes.

May need another _tid_ for cpu_partial?

>
>Signed-off-by: Wengang Wang <wen.gang.wang@oracle.com>
>---
> mm/slub.c | 20 +++++++++++++++++---
> 1 file changed, 17 insertions(+), 3 deletions(-)
>
>diff --git a/mm/slub.c b/mm/slub.c
>index e3629cd..26539e6 100644
>--- a/mm/slub.c
>+++ b/mm/slub.c
>@@ -2248,6 +2248,7 @@ static void put_cpu_partial(struct kmem_cache *s, struct page *page, int drain)
> {
> #ifdef CONFIG_SLUB_CPU_PARTIAL
> 	struct page *oldpage;
>+	unsigned long tid;
> 	int pages;
> 	int pobjects;
> 
>@@ -2255,8 +2256,12 @@ static void put_cpu_partial(struct kmem_cache *s, struct page *page, int drain)
> 	do {
> 		pages = 0;
> 		pobjects = 0;
>-		oldpage = this_cpu_read(s->cpu_slab->partial);
> 
>+		tid = this_cpu_read(s->cpu_slab->tid);
>+		/* read tid before reading oldpage */
>+		barrier();
>+
>+		oldpage = this_cpu_read(s->cpu_slab->partial);
> 		if (oldpage) {
> 			pobjects = oldpage->pobjects;
> 			pages = oldpage->pages;
>@@ -2283,8 +2288,17 @@ static void put_cpu_partial(struct kmem_cache *s, struct page *page, int drain)
> 		page->pobjects = pobjects;
> 		page->next = oldpage;
> 
>-	} while (this_cpu_cmpxchg(s->cpu_slab->partial, oldpage, page)
>-								!= oldpage);
>+		/* we dont' change tid, but want to make sure it didn't change
>+		 * in between. We don't really hope alloc/free not happen on
>+		 * this CPU, but don't want the first slab be removed from and
>+		 * then re-added as head to this partial list. If that case
>+		 * happened, pobjects may read 0xdead0000 when this slab is just
>+		 * removed from kmem_cache_node by other CPU setting lru.prev
>+		 * to LIST_POISON2.
>+		 */
>+	} while (this_cpu_cmpxchg_double(s->cpu_slab->partial, s->cpu_slab->tid,
>+					 oldpage, tid, page, tid) == 0);
>+
> 	if (unlikely(!s->cpu_partial)) {
> 		unsigned long flags;
> 
>-- 
>2.9.5

-- 
Wei Yang
Help you, Help me
