Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (61.164.42.155:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 12 Nov 2018 15:15:32 -0000
Received: from icoremail.net (unknown [209.85.210.181])
	by mail-app2 (Coremail) with SMTP id by_KCgD3_6fIaulbLkJ9AQ--.37856S3;
	Mon, 12 Nov 2018 19:58:01 +0800 (CST)
Received: from mail-pf1-f181.google.com (unknown [209.85.210.181])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwBnPjrHaulbJ5oxAA--.1513S3;
	Mon, 12 Nov 2018 19:57:59 +0800 (CST)
Received: by mail-pf1-f181.google.com with SMTP id b81-v6so3732975pfe.11
        for <xuliker@zju.edu.cn>; Mon, 12 Nov 2018 03:57:59 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-original-authentication-results:x-gm-message-state:delivered-to
         :from:to:cc:subject:date:message-id:sender:precedence:list-id;
        bh=MWci8EfPf+ksEY4D/jG7PIAGRQvZC+uVUBw6a5iAdVM=;
        b=hRv8/DDFb+zGOlz7W3iBXw+3cyOMtjmkd/GJ1j/DEK/OLRpl/k9QLTAtgCubU08txn
         TmK00OcWK379xpz6bfA4sCaq+baFU6aqtIqDaYlT94NABHzP0CTGhoMHmONxeLaVs7Rx
         WzCE79uM92eBFNtrdKcmoww/F/+k5PYHK4hyM6q7/UzkNHLKp2In8GH5OiSZzBdnlyqC
         SGw7dwEAzKDDmisgqsdNuWUFyE8RBbs2oSTzlkKjosdsBIzEuKBBkgN02C6GUPSL8SSr
         kXD96bPPJu50DQidpv1PDHjStLDONAOQ+OY650P9yA78vu3FpQR9D4nVyZJlt3jS1Hqq
         hcAA==
X-Original-Authentication-Results: mx.google.com;       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
X-Gm-Message-State: AGRZ1gL7ATFYn39n1AvHl2Il6kWoyPm3hyRtLkHjle1p3nk/3AoJQU46
	Flt5/gccQsy9WjkqWjdGTFeTIJYo+flpkglLlttAAuHXqFX6a4ry0A==
X-Received: by 2002:aa7:87d0:: with SMTP id i16-v6mr634621pfo.20.1542023878886;
        Mon, 12 Nov 2018 03:57:58 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp3094094pjt;
        Mon, 12 Nov 2018 03:57:58 -0800 (PST)
X-Google-Smtp-Source: AJdET5eL3DUAISZYELJg9aBChA2ei4/ohC/4Z41CBM37tfg5qKGqLH5h9yApv0uuBc6eHYrf7p6v
X-Received: by 2002:a17:902:6ac5:: with SMTP id i5-v6mr676536plt.2.1542023878012;
        Mon, 12 Nov 2018 03:57:58 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542023877; cv=none;
        d=google.com; s=arc-20160816;
        b=ukaWCSc81ofFm3kM1upnIoWHfSFW6Tdfn1uSWcuriidXjx9uj7LweyXP1gfTHz/z4X
         nY2aeLXYsdDddZfhTvWEjYt37SnzUSR49G87BO696BpqRKMul5WR3vsRr+/eFsKCNL43
         MCYuQv1FPf+CT7/Di7IqbdKUaQVdivLgx2eMoNPABK1zpE3daIn8XrGzoI8xPd9S7rJB
         u9eyGtOQ5zogpqrgm+4X3IY1McvZKLwarUUOdZJaYgpMUw+ojVU0UU88fpW/b6Vo8avt
         Xk0KomDF1EadLGY49ByoYmDJI2/y2c33erb9PO6mfc34qBikKr4T47kzRSsXFsBQZ6bC
         egUA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:message-id:date:subject:cc:to:from;
        bh=MWci8EfPf+ksEY4D/jG7PIAGRQvZC+uVUBw6a5iAdVM=;
        b=ZAerkVa755l5CjskpujWuR/peepyhCQ+T7iTt7e8vZBOyIoe3EiqIM2TtDIoBX/Ak0
         18Zf7nOVx5I0zO7nsJw/nwaK91idEXDsjEDHE2e+JSLz0nreOmwj7rHZrZIw5NiwYpnl
         tOVupjs8C0Q8D4q+SgufkVhL5XuJYvhQpbcV2XH+CyebDjuwUVWmC52yMUxgZegvwpK+
         tlLvQI/18FgF+U1KDcuhTHLw7BfNHz51lWwKzxTBDetcvpxgQd5FJfdQQE7QUgjg272G
         UQt/Mb1hzOIznY2jCf7QZF3MHOlPmYDW1IDoMFi/OhqVpSLELhsGO3QqYPmPO5zXOaat
         JwzA==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id 1-v6si5967509plp.383.2018.11.12.03.57.42;
        Mon, 12 Nov 2018 03:57:57 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729470AbeKLVuY (ORCPT <rfc822;tomnomnom1@gmail.com>
        + 99 others); Mon, 12 Nov 2018 16:50:24 -0500
Received: from foss.arm.com ([217.140.101.70]:34486 "EHLO foss.arm.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1728302AbeKLVuY (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 12 Nov 2018 16:50:24 -0500
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.72.51.249])
        by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id A297080D;
        Mon, 12 Nov 2018 03:57:27 -0800 (PST)
Received: from e112298-lin.cambridge.arm.com (usa-sjc-imap-foss1.foss.arm.com [10.72.51.249])
        by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPA id D5F5B3F5A0;
        Mon, 12 Nov 2018 03:57:25 -0800 (PST)
From: Julien Thierry <julien.thierry@arm.com>
To: linux-arm-kernel@lists.infradead.org
Cc: linux-kernel@vger.kernel.org, daniel.thompson@linaro.org,
        joel@joelfernandes.org, marc.zyngier@arm.com,
        christoffer.dall@arm.com, james.morse@arm.com,
        catalin.marinas@arm.com, will.deacon@arm.com,
        Julien Thierry <julien.thierry@arm.com>
Subject: [PATCH v6 00/24] arm64: provide pseudo NMI with GICv3
Date: Mon, 12 Nov 2018 11:56:51 +0000
Message-Id: <1542023835-21446-1-git-send-email-julien.thierry@arm.com>
X-Mailer: git-send-email 1.9.1
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwBnPjrHaulbJ5oxAA--.1513S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoWxuw1rZF17Jw1rArWrWF47XFb_yoW3ZF15pa
	y8C3s8Xr4rGFyUu39xZwn7uryYyws5J3y5trykJ34jgF1YyFy0vr4rtFy5CF47C34DW3yY
	vF4YyF10ga4qyaDanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUPFb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Ar0_tr1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Cr0_Gr1UM28EF7xvwVC2
	z280aVAFwI0_GcCE3s1l84ACjcxK6I8E87Iv6xkF7I0E14v26rxl6s0DM2AIxVAIcxkEcV
	Aq07x20xvEncxIr21l5I8CrVACY4xI64kE6c02F40Ex7xfMcIj6xIIjxv20xvE14v26r1j
	6r18McIj6I8E87Iv67AKxVW8JVWxJwAm72CE4IkC6x0Yz7v_Jr0_Gr1lF7xvr2IYc2Ij64
	vIr41l7I0Y6sxI4wCY1x0264kExVAvwVAq07x20xylc7Ca8VAvwVCFzxkY4VCF77xAMxkI
	ecxEwVCI4VW8KwCY0x0Ix7I2Y4AK64vIr41lcIIF0xvE2Ix0cI8IcVAFwI0_Gr0_Xr1lcI
	IF0xvE2Ix0cI8IcVCY1x0267AKxVW8JVWxJwCYIxAIcVC2z280aVAFwI0_GcCE3s1lcIIF
	0xvEx4A2jsIEc7CjxVAFwI0_GcCE3s1l42xK82IYc2Ij64vIr41l42xK82IY64kExVAvwV
	Aq07x20xyl4x8a6x804xWl4I8I3I0E4IkC6x0Yz7v_Jr0_Gr1lx2IqxVAqx4xG67AKxVWU
	JVWUGwC20s026x8GjcxK67AKxVWUGVWUWwC2zVAF1VAY17CE14v26r1q6r43MIIYrxkI7V
	AKI48JMIIF0xvE42xK8VAvwI8IcIk0rVW8JVW3JbIYCTnIWIevJa73UjIFyTuYvjxUHzV1
	UUUUU

Hi,

This series is a continuation of the work started by Daniel [1]. The goal
is to use GICv3 interrupt priorities to simulate an NMI.

The patches depend on the core API for NMIs patches [2].

To achieve this, set two priorities, one for standard interrupts and
another, higher priority, for NMIs. Whenever we want to disable interrupts,
we mask the standard priority instead so NMIs can still be raised. Some
corner cases though still require to actually mask all interrupts
effectively disabling the NMI.

Daniel Thompson ran some benchmarks [3] on a previous version showing a
small (<1%) performance drop when using interrupt priorities on Cortex-A53
and GIC-500.

Currently, only PPIs and SPIs can be set as NMIs. IPIs being currently
hardcoded IRQ numbers, there isn't a generic interface to set SGIs as NMI
for now. LPIs being controlled by the ITS cannot be delivered as NMI.
When an NMI is active on a CPU, no other NMI can be triggered on the CPU.

Requirements to use this:
- Have GICv3
- SCR_EL3.FIQ is set to 1 when linux runs or have single security state
- Select Kernel Feature -> Use ICC system registers for IRQ masking

* Patches 1 and 2 are just a bit of cleanup

* Patch 3 introduces a CPU feature to check if priority masking should be
  used

* Patches 4 and 5 add the support for priority masking in GICv3 driver

* Patches 6 to 11 add the support for priority masking the arch/arm64
  code

* Patches 12 and 13 allow us to apply alternatives earlier in the boot
  process

* Patches 14 to 16 starts the PMR masking on cpu startup and provides
  primitives for arm64 GICv3 driver to perform priority masking

* Patches 17 to 20 Add support for pseudo-NMIs in GICv3 driver

* Patches 21 to 23 Add support for receiving NMIs in arch/arm64

* Patch 24 adds the build config and command line option to enable
  pseudo-NMIs

Changes since v5[4]:
* Rebased on v4.20-rc2
* Reorganized patches again
* Renamed compile option + PMR values defines
* Write PMR enablement for cpu startup in C
* Fix wrong array size passed to __apply_alternatives
* Do not touch PMR in pt_regs when not using irq masking
* Remove ISB between PMR and IAR -> turns out it is not needed
* Simplify irqflags code after introducing PMR in it
* Use ref count API to track PPIs set as NMI
* Simplify NMI exit path

Changes since V4[5]:
* Rebased to v4.19-rc1
* Adapted GIC driver to the core NMI API
* Added option to disable priority masking on command line
* Added Daniel's Tested-by on patches related replacing PSR.I toggling with
  PMR masking
* Fix scope matching for alternative features.
* Spotted some more places using PSR.I or daif and replaced with generic
  interrupt functions

Changes since V3[6]:
* Big refactoring. As suggested by Marc Z., some of the bigger patches
  needed to be split into smaller one.
* Try to reduce the amount of #ifdef for the new feature by introducing
  an individual cpufeature for priority masking
* Do not track which alternatives have been applied (was a bit dodgy
  anyway), and use an alternative for VHE cpu_enable callback
* Fix a build failure with arm by adding the correct RPR accessors
* Added Suggested-by tags for changes from comming or inspired by Daniel's
  series. Do let me know if you feel I missed something and am not giving
  you due credit.

Changes since V2[7]:
* Series rebase to v4.17-rc6
* Adapt pathces 1 and 2 to the rework of cpufeatures framework
* Use the group0 detection scheme in the GICv3 driver to identify
  the priority view, and drop the use of a fake interrupt
* Add the case for a GIC configured in a single security state
* Use local_daif_restore instead of local_irq_enable the first time
  we enable interrupts after a bp hardening in the handling of a kernel
  entry. Otherwise PRS.I remains set...

Changes since V1[8]:
* Series rebased to v4.15-rc8.
* Check for arm64_early_features in this_cpu_has_cap (spotted by Suzuki).
* Fix issue where debug exception were not masked when enabling debug in
  mdscr_el1.

Changes since RFC[9]:
* The series was rebased to v4.15-rc2 which implied some changes mainly
  related to the work on exception entries and daif flags by James Morse.
  - The first patch in the previous series was dropped because no longer
    applicable.
  - With the semantics James introduced of "inheriting" daif flags,
    handling of PMR on exception entry is simplified as PMR is not altered
    by taking an exception and already inherited from previous state.
  - James pointed out that taking a PseudoNMI before reading the FAR_EL1
    register should not be allowed as per the TRM (D10.2.29):
    "FAR_EL1 is made UNKNOWN on an exception return from EL1."
    So in this submission PSR.I bit is cleared only after FAR_EL1 is read.
* For KVM, only deal with PMR unmasking/restoring in common code, and VHE
  specific code makes sure PSR.I bit is set when necessary.
* When detecting the GIC priority view (patch 5), wait for an actual
  interrupt instead of trying only once.


[1] http://www.spinics.net/lists/arm-kernel/msg525077.html
[2] https://lkml.org/lkml/2018/11/12/2113
[3] https://lkml.org/lkml/2018/7/20/803
[4] https://lkml.org/lkml/2018/8/28/693
[5] https://lkml.org/lkml/2018/7/24/321
[6] https://lkml.org/lkml/2018/5/21/276
[7] https://lkml.org/lkml/2018/1/17/335
[8] https://www.spinics.net/lists/arm-kernel/msg620763.html
[9] https://www.spinics.net/lists/arm-kernel/msg610736.html

Cheers,

Julien

-->

Daniel Thompson (1):
  arm64: alternative: Apply alternatives early in boot process

Julien Thierry (23):
  arm64: Remove unused daif related functions/macros
  arm64: cpufeature: Set SYSREG_GIC_CPUIF as a boot system feature
  arm64: cpufeature: Add cpufeature for IRQ priority masking
  arm/arm64: gic-v3: Add PMR and RPR accessors
  irqchip/gic-v3: Switch to PMR masking before calling IRQ handler
  arm64: ptrace: Provide definitions for PMR values
  arm64: Make PMR part of task context
  arm64: Unmask PMR before going idle
  arm64: kvm: Unmask PMR before entering guest
  arm64: irqflags: Use ICC_PMR_EL1 for interrupt masking
  arm64: daifflags: Include PMR in daifflags restore operations
  arm64: alternative: Allow alternative status checking per cpufeature
  irqchip/gic-v3: Factor group0 detection into functions
  arm64: Switch to PMR masking when starting CPUs
  arm64: gic-v3: Implement arch support for priority masking
  irqchip/gic-v3: Detect if GIC can support pseudo-NMIs
  irqchip/gic-v3: Handle pseudo-NMIs
  irqchip/gic: Add functions to access irq priorities
  irqchip/gic-v3: Allow interrupts to be set as pseudo-NMI
  arm64: Handle serror in NMI context
  arm64: Skip preemption when exiting an NMI
  arm64: Skip irqflags tracing for NMI in IRQs disabled context
  arm64: Enable the support of pseudo-NMIs

 Documentation/admin-guide/kernel-parameters.txt |   6 +
 Documentation/arm64/booting.txt                 |   5 +
 arch/arm/include/asm/arch_gicv3.h               |  33 ++++
 arch/arm64/Kconfig                              |  14 ++
 arch/arm64/include/asm/alternative.h            |   4 +-
 arch/arm64/include/asm/arch_gicv3.h             |  32 +++
 arch/arm64/include/asm/assembler.h              |  10 +-
 arch/arm64/include/asm/cpucaps.h                |   3 +-
 arch/arm64/include/asm/cpufeature.h             |  10 +
 arch/arm64/include/asm/daifflags.h              |  20 +-
 arch/arm64/include/asm/efi.h                    |   3 +-
 arch/arm64/include/asm/irqflags.h               | 132 ++++++++++---
 arch/arm64/include/asm/kvm_host.h               |  12 ++
 arch/arm64/include/asm/processor.h              |   3 +
 arch/arm64/include/asm/ptrace.h                 |  20 +-
 arch/arm64/kernel/alternative.c                 |  60 +++++-
 arch/arm64/kernel/asm-offsets.c                 |   1 +
 arch/arm64/kernel/cpufeature.c                  |  42 +++-
 arch/arm64/kernel/entry.S                       |  40 ++++
 arch/arm64/kernel/process.c                     |   6 +
 arch/arm64/kernel/smp.c                         |  34 ++++
 arch/arm64/kernel/traps.c                       |   8 +-
 arch/arm64/kvm/hyp/switch.c                     |  16 ++
 arch/arm64/mm/proc.S                            |  18 ++
 drivers/irqchip/irq-gic-common.c                |  10 +
 drivers/irqchip/irq-gic-common.h                |   2 +
 drivers/irqchip/irq-gic-v3.c                    | 250 +++++++++++++++++++++---
 include/linux/irqchip/arm-gic-common.h          |   2 +-
 28 files changed, 695 insertions(+), 101 deletions(-)

--
1.9.1
