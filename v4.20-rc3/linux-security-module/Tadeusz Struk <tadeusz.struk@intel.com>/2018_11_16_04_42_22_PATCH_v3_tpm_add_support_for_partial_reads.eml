Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 16 Nov 2018 00:30:01 -0000
Received: from icoremail.net (unknown [209.85.210.170])
	by mail-app2 (Coremail) with SMTP id by_KCgDHH95R2u1bM+WcAQ--.46038S3;
	Fri, 16 Nov 2018 04:42:58 +0800 (CST)
Received: from mail-pf1-f170.google.com (unknown [209.85.210.170])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwAXkExP2u1b7ohFAA--.776S3;
	Fri, 16 Nov 2018 04:42:55 +0800 (CST)
Received: by mail-pf1-f170.google.com with SMTP id x2-v6so10244321pfm.7
        for <xuliker@zju.edu.cn>; Thu, 15 Nov 2018 12:42:55 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-original-authentication-results:x-gm-message-state:delivered-to
         :subject:from:to:cc:date:message-id:user-agent:mime-version
         :content-transfer-encoding:sender:precedence:list-id;
        bh=lQwHHgGU4zsz43KEuYarHcfwfclYVrIk7ECoYfTSgoI=;
        b=Oh/BuLiSvG8CpjRB42Q+6wKQHi3XJ3cCIJ6+7VGo9OOK2G0DQC0/Nr+WwXe7kmJjAh
         VryOiRtq8AVRGXOxE5xBBCwzfLTmCtq9WK1FImPUL4p8ravK6dHArA1vNElJfQuZ8po+
         YEymuP67ie99gmwpgPmBwaf6YzVUyiZqWmWApd+QDbSlfdVSJmdZ05M4gawP/J4N3cyj
         1oEozDsvD+Q8FVufvvrbPCu+FeqSPv5+J8cP0RA6uOLBrvjpD27lmu8FauuawLfBrlPX
         khSjTxrax7NMGpZp6AjahFsSYjOsGk63y1EuvN4jNXtH/DjbQl95Q7rIHLnrYZMxqge9
         sOmQ==
X-Original-Authentication-Results: mx.google.com;       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;       dmarc=fail (p=NONE sp=NONE dis=NONE) header.from=intel.com
X-Gm-Message-State: AGRZ1gJlF++jXSYQAyO+6zUd2t9j/qcRbms7wA2Bce6IWNsoQ7J1jEQY
	HuCCAC4PSADbSxaObR6GHa+0TM/xMlEX/42KOFoAROzdDfuuJzersw==
X-Received: by 2002:a62:4105:: with SMTP id o5-v6mr7855640pfa.85.1542314575486;
        Thu, 15 Nov 2018 12:42:55 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:d106:0:0:0:0 with SMTP id l6-v6csp1049110pju;
        Thu, 15 Nov 2018 12:42:54 -0800 (PST)
X-Google-Smtp-Source: AJdET5cG669U7hZgjlgSXCdYg+vxySejdBNjTWOcxlEVkLeuexTNcGlBnhvlOzoonbCrd6rb5UPb
X-Received: by 2002:a17:902:b68d:: with SMTP id c13mr7827470pls.102.1542314574635;
        Thu, 15 Nov 2018 12:42:54 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542314574; cv=none;
        d=google.com; s=arc-20160816;
        b=AV8K9BXadQ06hFOgCRu/NkqsL+R4CRjRM4roJOt8mbEv+j4Wt0LgmiR4nGXoAzytGN
         16swUaWgg0suTmU422thHtSLPGM75PMARdh616qdyMHKUZ/gklByW/BNwfKi9bIM0b/8
         93MRmgI92eJpnsyQYH1ixpKlMQaVCQOaZLZKJHg9SWrP9TRfYjQhH9MaQEshPuzU5hDS
         LVADqaNKNQi29PrHuZQ146c5Qw2HAyJ0hmvcugu+6nxbbLrVBmGAQHATCsEIhSorXzAR
         n2TK+8pwpxe6NpCu/8l133PxVg/lsi3XlvMWrQvp6gEoinCAoKD4eFgIYp7dsM+sjXT/
         CbMA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:content-transfer-encoding:mime-version
         :user-agent:message-id:date:cc:to:from:subject;
        bh=lQwHHgGU4zsz43KEuYarHcfwfclYVrIk7ECoYfTSgoI=;
        b=mLGF6n8hQy5sPv7XfEOjJDBpZy3RK8KdAxZJfrQhUgL5vIB1Km/e2Thim9+PWC2tlg
         7KR7EEFYxwZbIhuVtfGf9ph4g0+NvGcuuSNQTzK95CO5zqiGB29O4T2GjIaUSrdEbaY/
         uoMtZZWaSHgKq8UgqNmYJ/h4k8u5MeXJF46+xa/FHh1MPPsMESmiYBVbW6sQXpqZUGTp
         U03RZBTVev+23pxzU40KGGS87+OIAI+S/STQty08Nxonci3VzPEoW1XT1d2LtQP2SOLv
         6J/saNYyGdDRVVnoTtjDpr6fQ8kZ0ANAb0mlkegxeIwxhpQf8x4u1RKf3+b2+6sjFm6o
         Bm8Q==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;
       dmarc=fail (p=NONE sp=NONE dis=NONE) header.from=intel.com
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id a6si98324pfo.90.2018.11.15.12.42.39;
        Thu, 15 Nov 2018 12:42:54 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2388916AbeKPGvq (ORCPT <rfc822;kristofer.rye@gmail.com>
        + 99 others); Fri, 16 Nov 2018 01:51:46 -0500
Received: from mga04.intel.com ([192.55.52.120]:65333 "EHLO mga04.intel.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1725809AbeKPGvp (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 16 Nov 2018 01:51:45 -0500
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from orsmga007.jf.intel.com ([10.7.209.58])
  by fmsmga104.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 15 Nov 2018 12:42:23 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,237,1539673200"; 
   d="scan'208";a="89654745"
Received: from tstruk-mobl1.jf.intel.com ([10.7.196.53])
  by orsmga007.jf.intel.com with ESMTP; 15 Nov 2018 12:42:22 -0800
Subject: [PATCH v3] tpm: add support for partial reads
From: Tadeusz Struk <tadeusz.struk@intel.com>
To: jarkko.sakkinen@linux.intel.com
Cc: jgg@ziepe.ca, linux-integrity@vger.kernel.org,
        linux-security-module@vger.kernel.org,
        linux-kernel@vger.kernel.org, tadeusz.struk@intel.com
Date: Thu, 15 Nov 2018 12:42:22 -0800
Message-ID: <154231454280.17567.455994477207265338.stgit@tstruk-mobl1.jf.intel.com>
User-Agent: StGit/unknown-version
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwAXkExP2u1b7ohFAA--.776S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoWxXrW8JF4kGF15uFyUKF1fXrb_yoWrtr45pa
	yak3s5CrWDJr429rn7J3ZxZw43W3Z3W3WUKF9rG347Zr97uw1Ygr1rtF1IgFy2vrn5trZa
	k395Wr15WF1DZw7anT9S1TB71UUUUUUqnTZGkaVYY2UrUUUUjbIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUP2b7Iv0xC_KF4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Ar0_tr1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Cr0_Gr1UM28EF7xvwVC2
	z280aVAFwI0_GcCE3s1l84ACjcxK6I8E87Iv6xkF7I0E14v26rxl6s0DM2AIxVAIcxkEcV
	Aq07x20xvEncxIr21l5I8CrVACY4xI64kE6c02F40Ex7xfMcIj6xIIjxv20xvE14v26r1j
	6r18McIj6I8E87Iv67AKxVWUJVW8JwAm72CE4IkC6x0Yz7v_Jr0_Gr1lF7xvr2IY64vIr4
	1l7I0Y6sxI4wCY1x0264kExVAvwVAq07x20xylc7Ca8VAvwVCFzxkY4VCF77xAMxkIecxE
	wVCI4VW7MxkI7II2jI8vz4vEwIxGrwCYIxAIcVC0I7IYx2IY67AKxVW8JVW5JwCYIxAIcV
	C0I7IYx2IY6xkF7I0E14v26r4j6F4UMxvI42IY6I8E87Iv67AKxVW8Jr0_Cr1UMxvI42IY
	6I8E87Iv6xkF7I0E14v26r4UJVWxJr1l42xK82IYc2Ij64vIr41l42xK82IY64kExVAvwV
	Aq07x20xyl4x8a6x804xWl4I8I3I0E4IkC6x0Yz7v_Jr0_Gr1lx2IqxVAqx4xG67AKxVWU
	JVWUGwC20s026x8GjcxK67AKxVWUGVWUWwC2zVAF1VAY17CE14v26r126r1DMIIYrxkI7V
	AKI48JMIIF0xvE42xK8VAvwI8IcIk0rVW3JVWrJrUvcSsGvfC2KfnxnUUI43ZEXa7IU5Ss
	jUUUUUU==

Currently to read a response from the TPM device an application needs
provide big enough buffer for the whole response and read it in one go.
The application doesn't know how big the response it beforehand so it
always needs to maintain a 4K buffer and read the max (4K).
In case if the user of the TSS library doesn't provide big enough
buffer the TCTI spec says that the library should set the required
size and return TSS2_TCTI_RC_INSUFFICIENT_BUFFER error code so that the
application could allocate a bigger buffer and call receive again.
To make it possible in the TSS library, this requires being able to do
partial reads from the driver.
The library would read the 10 bytes header first to get the actual size
of the response from the header, and then read the rest of the response.

This patch adds support for partial reads, i.e. the user can read the
response in one or multiple reads, until the whole response is consumed.
The user can also read only part of the response and ignore
the rest by issuing a new write to send a new command.

Signed-off-by: Tadeusz Struk <tadeusz.struk@intel.com>
---
The usecase is implemented in this TSS commit:
https://github.com/tpm2-software/tpm2-tss/commit/ce982f67a67dc08e24683d30b05800648d8a264c

Changes in v3:
 - Remove link to usecase implemented in TSS out of the commit message.
 - Update the conddition in tpm_common_poll() to take into account
   the partial_data also.

Changes in v2:
 - Allow writes after only partial response is consumed to maintain
   backwords compatibility.
---
 drivers/char/tpm/tpm-dev-common.c |   41 ++++++++++++++++++++++++++++---------
 drivers/char/tpm/tpm-dev.h        |    2 ++
 2 files changed, 33 insertions(+), 10 deletions(-)

diff --git a/drivers/char/tpm/tpm-dev-common.c b/drivers/char/tpm/tpm-dev-common.c
index 99b5133a9d05..5d43b0c28565 100644
--- a/drivers/char/tpm/tpm-dev-common.c
+++ b/drivers/char/tpm/tpm-dev-common.c
@@ -64,6 +64,7 @@ static void tpm_timeout_work(struct work_struct *work)
 
 	mutex_lock(&priv->buffer_mutex);
 	priv->data_pending = 0;
+	priv->partial_data = 0;
 	memset(priv->data_buffer, 0, sizeof(priv->data_buffer));
 	mutex_unlock(&priv->buffer_mutex);
 	wake_up_interruptible(&priv->async_wait);
@@ -90,22 +91,39 @@ ssize_t tpm_common_read(struct file *file, char __user *buf,
 	ssize_t ret_size = 0;
 	int rc;
 
-	del_singleshot_timer_sync(&priv->user_read_timer);
-	flush_work(&priv->timeout_work);
 	mutex_lock(&priv->buffer_mutex);
+	if (priv->data_pending || priv->partial_data) {
+		if (*off == 0)
+			priv->partial_data = priv->data_pending;
+
+		ret_size = min_t(ssize_t, size, priv->partial_data);
+		if (ret_size <= 0) {
+			ret_size = 0;
+			priv->data_pending = 0;
+			priv->partial_data = 0;
+			goto out;
+		}
 
-	if (priv->data_pending) {
-		ret_size = min_t(ssize_t, size, priv->data_pending);
-		if (ret_size > 0) {
-			rc = copy_to_user(buf, priv->data_buffer, ret_size);
-			memset(priv->data_buffer, 0, priv->data_pending);
-			if (rc)
-				ret_size = -EFAULT;
+		rc = copy_to_user(buf, priv->data_buffer + *off, ret_size);
+		if (rc) {
+			memset(priv->data_buffer, 0, TPM_BUFSIZE);
+			priv->partial_data = 0;
+			ret_size = -EFAULT;
+		} else {
+			memset(priv->data_buffer + *off, 0, ret_size);
+			priv->partial_data -= ret_size;
+			*off += ret_size;
 		}
 
 		priv->data_pending = 0;
 	}
 
+out:
+	if (!priv->partial_data) {
+		*off = 0;
+		del_singleshot_timer_sync(&priv->user_read_timer);
+		flush_work(&priv->timeout_work);
+	}
 	mutex_unlock(&priv->buffer_mutex);
 	return ret_size;
 }
@@ -150,6 +168,9 @@ ssize_t tpm_common_write(struct file *file, const char __user *buf,
 		goto out;
 	}
 
+	priv->partial_data = 0;
+	*off = 0;
+
 	/*
 	 * If in nonblocking mode schedule an async job to send
 	 * the command return the size.
@@ -184,7 +205,7 @@ __poll_t tpm_common_poll(struct file *file, poll_table *wait)
 
 	poll_wait(file, &priv->async_wait, wait);
 
-	if (priv->data_pending)
+	if (priv->data_pending || priv->partial_data)
 		mask = EPOLLIN | EPOLLRDNORM;
 	else
 		mask = EPOLLOUT | EPOLLWRNORM;
diff --git a/drivers/char/tpm/tpm-dev.h b/drivers/char/tpm/tpm-dev.h
index a126b575cb8c..a2ca6a7a06f1 100644
--- a/drivers/char/tpm/tpm-dev.h
+++ b/drivers/char/tpm/tpm-dev.h
@@ -11,6 +11,8 @@ struct file_priv {
 
 	/* Holds the amount of data passed or an error code from async op */
 	ssize_t data_pending;
+	/* For partial reads, holds the reminder of a response */
+	ssize_t partial_data;
 	struct mutex buffer_mutex;
 
 	struct timer_list user_read_timer;      /* user needs to claim result */
