Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 14 Nov 2018 00:36:25 -0000
Received: from icoremail.net (unknown [209.85.214.171])
	by mail-app2 (Coremail) with SMTP id by_KCgDXv9JaI+tbxVmIAQ--.41262S3;
	Wed, 14 Nov 2018 03:17:47 +0800 (CST)
Received: from mail-pl1-f171.google.com (unknown [209.85.214.171])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwB3VkJYI+tb4Ow5AA--.6892S3;
	Wed, 14 Nov 2018 03:17:44 +0800 (CST)
Received: by mail-pl1-f171.google.com with SMTP id w22-v6so6499326plk.0
        for <xuliker@zju.edu.cn>; Tue, 13 Nov 2018 11:17:44 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:date:from:to:cc
         :subject:message-id:references:mime-version:content-disposition
         :in-reply-to:user-agent:sender:precedence:list-id;
        bh=eyXKSAXrFcy6Gbu9uPgpFrVw8htCHZwhRAvOnXKlGxo=;
        b=IgL8KQxLJYi9H3psZyB/qvczqoPZ/QsOJALdQYaSu1FF1mM5WWje3dabb3e3ikM078
         CyvGi89zIJ5Vg5sdSXtrcqQkREZFNalnSAPx+VC8L3LhvAufEi8hqXsfO2i1uelD6qL6
         kbtB0sG2hGcdPHopmwzwpCsJSW2InrwOYnfNbVX0xEcWRj/IZ19j/gLJNJi+4TUnDMQO
         thHAuG9Q4Uw7JZxjcKN2vxBxMJZ0xN8UwPd20U5s52zp8OHJ0UWhWNhmeqslrNMBQ2km
         g9I1qJ81M0kmwlI1kmBN0Zd+FLxpeMHZgx/+K/fNH7r4DKQaLQBSSdGZNsfs8aG2rwSO
         PVsw==
X-Gm-Message-State: AGRZ1gKetQvaw5brHx9zYXNPdbZeIiWNPyfw/8jzuyquo2+6UL8JCrEx
	Nm4Mex21NPNvx7ULZLri6A9Tli+/pLn9Jt/8ctCOgazIA/vIseswWA==
X-Received: by 2002:a17:902:887:: with SMTP id 7-v6mr6417487pll.283.1542136664158;
        Tue, 13 Nov 2018 11:17:44 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp4880086pjt;
        Tue, 13 Nov 2018 11:17:43 -0800 (PST)
X-Google-Smtp-Source: AJdET5ew/M3cPH5PDs6Y3fnP/yLWR0lexciIytyq0xgBj2x5B/3UAusyc4np5eQcEa0t/6FrlhhJ
X-Received: by 2002:a17:902:9009:: with SMTP id a9-v6mr6381390plp.134.1542136663193;
        Tue, 13 Nov 2018 11:17:43 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542136663; cv=none;
        d=google.com; s=arc-20160816;
        b=evrcvAupoP4ATLIW/uSBQiE3i9pYQnPc4CM2Wj/OZV4AD5nhPBVIDioi80qtGhFQ2Y
         BPiSY9ssWDI81aDc/7Lfs7bqbO2ysDQyNCZpNv7Rmtl8A2OLbBAiULurY+xduAJJXl86
         +i59oEc75cL1RImbh8y8z4lb4kk9YuIygHKpssvpmgRpS8JmbHelzfssWUOCUYLVfGQX
         CagdTbAMcpm4ekpBO5tx5sQiQtuH2KBbUO4UBwY0AJLoOvy7zmAcDSo00iGfTbhiH+uX
         C+skHX70O7KG7zVIBGJCB+C69Fh4roxDHzAti1N2vBt4sQLG32FzLre64htC39lymZm3
         AhrA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:user-agent:in-reply-to
         :content-disposition:mime-version:references:message-id:subject:cc
         :to:from:date:dkim-signature;
        bh=eyXKSAXrFcy6Gbu9uPgpFrVw8htCHZwhRAvOnXKlGxo=;
        b=oUAlxabxVlVJAXCk6tBZ6dM3rJVV0bDKdfS7D0esdgsRNHk0hh+ijpHwvNnKnHTn2F
         5Be+9cC++6DXauV2HG2Hh5LjlBSR7x0kBwDBX2pVs6yEjDDQeOvcpKvOnxGNYdMbOVF+
         H9mkMXDCI0+FkCB/ySk0Aeswyxbq0G/bCsLJDGX1s44Bo0NLa+jhMsutdBmiigOqVJ1T
         3P67AXrCyFE5ntOVSLjXnL9SpRY3TY9Cm+DAjSv+xT3RwbVTaFgGu9XocduplpXrf+iM
         ojyskIxmeXoUb0vrZDk63h/AHuHukSj/6hHHta/WOxlHDzbgLt6hCAYlm5tolKL1pdOE
         wtJg==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=fail header.i=@gmail.com header.s=20161025 header.b=NF2c8DuA;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;
       dmarc=fail (p=NONE sp=NONE dis=NONE) header.from=kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id k135si2038654pgc.574.2018.11.13.11.17.28;
        Tue, 13 Nov 2018 11:17:43 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728034AbeKNFPP (ORCPT <rfc822;ecarlos1024@gmail.com>
        + 99 others); Wed, 14 Nov 2018 00:15:15 -0500
Received: from mail-qk1-f194.google.com ([209.85.222.194]:46247 "EHLO
        mail-qk1-f194.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725748AbeKNFPO (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 14 Nov 2018 00:15:14 -0500
Received: by mail-qk1-f194.google.com with SMTP id q1so21467130qkf.13;
        Tue, 13 Nov 2018 11:15:45 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=sender:date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=eyXKSAXrFcy6Gbu9uPgpFrVw8htCHZwhRAvOnXKlGxo=;
        b=NF2c8DuAFMhsUJo4vRyAtcKqhdtevrIoq7zi49LyZsdhsPttWtPZ7yM1WIHiZ1GIUm
         p3LcwyMMiaaVAsqD1+82mvnWgaM0K0IBlqjtFTHQ6ZkGPxWvkFo+fWuTdUSftLSlNR2W
         EcFRpsm5XRwPdBUYSefvTH6RWmG/q+bNvIQlQ3uETbMRaLh/RA6GfjPBTQ/j0VF5zge9
         dEPXLQKuzi1BuRSt/QwLSTvdolVpzbQInw4sLAIMir1tfMOvCBHx92TiyPDbGOTHG/lU
         SjrwCnpA9EzH/VJ/5vViJAQtxjOuQvCqcArwIpk4kwZXgQQ2tTBE9OlOIFnPRZEPSLJF
         dX1g==
X-Received: by 2002:aed:2151:: with SMTP id 75mr6442961qtc.24.1542136545023;
        Tue, 13 Nov 2018 11:15:45 -0800 (PST)
Received: from localhost ([2620:10d:c091:200::6:e2a7])
        by smtp.gmail.com with ESMTPSA id l30sm3749116qte.44.2018.11.13.11.15.43
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Tue, 13 Nov 2018 11:15:44 -0800 (PST)
Date: Tue, 13 Nov 2018 11:15:41 -0800
From: Tejun Heo <tj@kernel.org>
To: Roman Gushchin <guro@fb.com>
Cc: Roman Gushchin <guroan@gmail.com>, Oleg Nesterov <oleg@redhat.com>,
        "cgroups@vger.kernel.org" <cgroups@vger.kernel.org>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        Kernel Team <Kernel-team@fb.com>,
        Linus Torvalds <torvalds@linux-foundation.org>,
        Andrew Morton <akpm@linux-foundation.org>,
        Ingo Molnar <mingo@redhat.com>
Subject: Re: [PATCH v2 3/6] cgroup: cgroup v2 freezer
Message-ID: <20181113191541.GM2509588@devbig004.ftw2.facebook.com>
References: <20181112230422.5911-1-guro@fb.com>
 <20181112230422.5911-5-guro@fb.com>
 <20181113020817.GE2509588@devbig004.ftw2.facebook.com>
 <20181113184751.GB21629@tower.DHCP.thefacebook.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181113184751.GB21629@tower.DHCP.thefacebook.com>
User-Agent: Mutt/1.5.21 (2010-09-15)
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwB3VkJYI+tb4Ow5AA--.6892S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoWxXF47Ar48CF48uw4DCw4kZwb_yoWruw47p3
	98KF4fKan7Jw1j9r1Iqw40vFZ5KrWktry5GryrJ340yFsIqF9xtrs7J3y5CFW0vrZ7J34j
	qayYg3Z8Cas0yFDanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUPIb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Ar0_tr1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Cr0_Gr1UM28EF7xvwVC2
	z280aVAFwI0_Cr1j6rxdM28EF7xvwVC2z280aVCY1x0267AKxVWxJr0_GcWle2I262IYc4
	CY6c8Ij28IcVAaY2xG8wAqx4xG64xvF2IEw4CE5I8CrVC2j2WlYx0E2Ix0cI8IcVAFwI0_
	JrI_JrylYx0Ex4A2jsIE14v26r1j6r4UMcvjeVCFs4IE7xkEbVWUJVW8JwACjcxG0xvEwI
	xGrwCjxxvEa2IrMxkF7I0Ew4C26cxK6c8Ij28IcwCY1Ik26cxK6xAEc7vF6xCjj44lc2xS
	Y4AK6IIF6rWlc2IjII80xcxEwVAKI48JMxvI42IY6xIIjxv20xvE14v26r4j6ryUMxvI42
	IY6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1lcIIF0xvEx4A2jsIE14v26r4UJVWxJr1lcIIF
	0xvEx4A2jsIEc7CjxVAFwI0_Gr1j6F4UJwCF04k20xvY0x0EwIxGrwCF04k20xvEw4C26c
	xK6c8Ij28IcwCF72vE77IF4wCFx2IqxVCFs4IE7xkEbVWUJVW8JwC20s026c02F40E14v2
	6r1j6r18MI8I3I0E7480Y4vE14v26r106r1rMI8E67AF67kF1VAFwI0_Jw0_GFylIxkGc2
	Ij64vIr41lIxAIcVCF04k26cxKx2IYs7xG6r4j6FyUYxBIdaVFxhVjvjDU0xZFpf9x07bL
	5lnUUUUU=

Hello, Roman.

On Tue, Nov 13, 2018 at 06:47:55PM +0000, Roman Gushchin wrote:
> > > +	/* Should the cgroup and its descendants be frozen. */
> > > +	bool freeze;
> > 
> > Why not have this in freezer too?
> 
> I thought that this variable is just the state of the cgroup.freeze knob,
> where the freezer field contains the internal state of the freezer, and
> can in theory be allocated dynamically.
> 
> Not a strong preference, I can move it there too, if you prefer to.

Yeah, let's just put it together.

> > > +void cgroup_freezer_enter(void);
> > > +void cgroup_freezer_leave(void);
> > 
> > So, if we use freeze, freezing, frozen instead, the aboves can be
> > cgroup_frozen_enter() and cgroup_frozen_leave() (or begin/end).
> 
> Idk, maybe cgroup_enter_frozen()/cgroup_leave_frozen() ?

Sure.

> > > +	/* task is in the cgroup freezer loop */
> > 
> > The above comment isn't strictly true, right?
> 
> Why so?
> 
> It actually means that the task is looping somewhere in the signal delivery loop
> after entering cgroup_freezer_enter() and before cgroup_freezer_leave().
> 
> Maybe simple "task is frozen by the cgroup freezer"?

Yeah, sounds good.

> > > @@ -5642,6 +5700,23 @@ void cgroup_post_fork(struct task_struct *child)
> > >  			cset->nr_tasks++;
> > >  			css_set_move_task(child, NULL, cset, false);
> > >  		}
> > > +
> > > +		if (unlikely(cgroup_frozen(child) &&
> > > +			     (child->flags & ~PF_KTHREAD))) {
> > 
> > I don't think we need explicit PF_KTHREAD test here.  We don't allow
> > kthreads in non-root cgroups anyway and if we wanna change that there
> > are a bunch of other things which need updating anyway.
> 
> Don't we? I think we do. I've proposed a patch to fix this some time ago
> (https://lkml.org/lkml/2017/10/12/556), but was NAKed by Peter.

Ah, right, I thought that went in.  Oh well, let's keep the test then.

> > > +	/*
> > > +	 * Did we race with fork() or exit()? Np, everything is still frozen.
> > > +	 */
> > > +	if (frozen == test_bit(CGRP_FROZEN, &cgrp->flags))
> > > +		return;
> > > +
> > > +	if (frozen)
> > > +		set_bit(CGRP_FROZEN, &cgrp->flags);
> > > +	else
> > > +		clear_bit(CGRP_FROZEN, &cgrp->flags);
> > 
> > I'm not sure this is wrong but it feels a bit weird to tie the actual
> > state transition to notification.  Wouldn't it be more
> > straight-forward if CGRP_FROZEN bit is purely determined by whether
> > the tasks are frozen or not and the notification just checks that
> > against the last notified state and generate a notification if they're
> > different?
> 
> So, maybe cgroup_notify_frozen() is not the best name, maybe
> cgroup_propagate_frozen() better reflects what's happening here.
> We need to recalc the state of ancestor cgroups, and we have to do it
> with cgroup_mutex held, this is why we do it from the delayed work
> context (on hot paths).

Can't we protect that state with css_set_lock too?  That's what task
states are protected by and the cgroup state is a mere aggregation of
task states.

> The first pat of the function can be probably separated and called
> immediately. Is this what you're suggesting?

Pretty much.  I think separating out state transitions and
notifications would make it more straightforward.

> > So that all these state transitions are synchronous with the actual
> > freezing events and we can just queue per-cgroup work items all the
> > way to the top if the new state is different from the last one
> > cgroup-by-cgroup?
> 
> Hm, Idk. Why it's better?

So, the pieces are - 1. task states, 2. cgroup states and
3. notifications.  The current code ties together #2 and #3 together
which is weird because #2 is a mere aggregation of #1.  Also, that
way, notifications become a lot more robust because whether to
generate a notification or not can be solely determined from #2
flipping.  ie. sth like the following

	change_task_frozen_state()
	{
		update counters
		if (cgroup state needs to change) {
			change cgroup state;
			queue notification work;
			repeat for the parent;
		}
	}

where notification work always notifies should work and trivially
satisfies the requirement (there should be at least one notification
since the last state transition) without any further work.  Wouldn't
this be easier and more robust?  The current code depends on
annotating each possible transition event, which is kinda fragile.

> > > +	if (lock_task_sighand(task, &flags)) {
> > > +		if (test_bit(CGRP_FREEZE, &dst->flags))
> > > +			task->jobctl |= JOBCTL_TRAP_FREEZE;
> > > +		else
> > > +			task->jobctl &= ~JOBCTL_TRAP_FREEZE;
> > 
> > How are these flags synchronized?
> 
> Using the css_set_lock.

But other JOBCTL_TRAP bits aren't synchronized by css_set_lock, right?

Thanks.

-- 
tejun
