Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 15 Nov 2018 08:31:26 -0000
Received: from icoremail.net (unknown [209.85.215.172])
	by mail-app2 (Coremail) with SMTP id by_KCgDnX18J5exbA2aVAQ--.44892S3;
	Thu, 15 Nov 2018 11:16:26 +0800 (CST)
Received: from mail-pg1-f172.google.com (unknown [209.85.215.172])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwCHAE0I5exbx35BAA--.10891S3;
	Thu, 15 Nov 2018 11:16:24 +0800 (CST)
Received: by mail-pg1-f172.google.com with SMTP id w3-v6so8306269pgs.11
        for <xuliker@zju.edu.cn>; Wed, 14 Nov 2018 19:16:24 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-original-authentication-results:x-gm-message-state:delivered-to
         :from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding:sender:precedence:list-id;
        bh=XTDO0fxDXo+CVrGARq5WBYLmB0VLxcihF77acpRDvQU=;
        b=PmtwOYkF7xzsvGZrpZ0kfWAKxZjwe2A8cfGBW2lm/Wnigc80Tp750XcJ9CNPd/Ba5y
         Xtk90Iiq/SPmcLZTWJHKZW8KCYLI60JE98jCEkvS8PPdddI6zcsbaZBV2p9awlBVWahB
         F3ErdgdCOCN5vU+g24WJxF2tYPgM78NTydM9vYJ3sxkMREl5uu24Wvm8B3TCzyyzZXD9
         Hv8gVtS96zwWBMTUMlSSchEvSb9Q8AyFMEdxg0/KmuLOOwRrHG8r0JPe2GAvdlTX+uGL
         GqZIeL2ycbBFKThHVwxJE1qp0DPHb6ZkUN+zvlHIePXGlHbVpsEHk3/mAUFkyQGwPq5a
         8O9A==
X-Original-Authentication-Results: mx.google.com;       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
X-Gm-Message-State: AGRZ1gJVToJy0+rdL61X+7jrrH5W/+rzOrqKPSWwvEiLmfHtEphvORYn
	84jIyI7jujuEzNFDPIp1vEpI5v46Ox91qkWvVTkG+F2Z+NYk77WwEQ==
X-Received: by 2002:a62:c20b:: with SMTP id l11-v6mr4751211pfg.251.1542251783746;
        Wed, 14 Nov 2018 19:16:23 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:d106:0:0:0:0 with SMTP id l6-v6csp48413pju;
        Wed, 14 Nov 2018 19:16:22 -0800 (PST)
X-Google-Smtp-Source: AJdET5ecFTdf12psCi1zW/vjkP2lBjPUM9KgTL2On25BY23xgBBF9VbNaRL41OyYyHIDD0M5reul
X-Received: by 2002:a17:902:714e:: with SMTP id u14-v6mr4608275plm.8.1542251782852;
        Wed, 14 Nov 2018 19:16:22 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542251782; cv=none;
        d=google.com; s=arc-20160816;
        b=eDC1QexKs8Giz96M+Nn0r5kFUMHbWTryThYIbZgGaNZrqbDwe1p1/pE8M340Y2j7rM
         PSYeQvsK47id7AwrJ5+gF7wJJ644gyfJs0AXQ6rv/fmSFbhQiddE6e9pRQr46aBatVm8
         Ht5fD7x9kS9fOPuXzd6RnkD+hrWTuofacZ/gNlR5aOnfPjtP2O2l1XUY/rqgMZv8hnw2
         3bhANKDQEwMfcQj9ED3lzEJpNLEibHADfSv1nQYs5INIIXZx/LyQC7U9O9UOXmGg37Pf
         UMpUcTdmhpu74P0pUpBc6i0P2perTQdk4AKlY1tIvAFad8/Pydnd4HANsZDTEBH0pfui
         fqGQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:content-transfer-encoding:mime-version
         :references:in-reply-to:message-id:date:subject:cc:to:from;
        bh=XTDO0fxDXo+CVrGARq5WBYLmB0VLxcihF77acpRDvQU=;
        b=PKrMkqhCobJXqygLf43imUiy34Jdk3EorZlO+nQV16UPX4zsC8xvLLXSN2OAoEhhBp
         Mx7CV/Bfdo6wZ/0C05EdZ9o0/teM81vcUW9BypFB6m/MmO/RElbO81G2l1TflWeNuc2M
         uMsQqugGGPc2e7WJA7rqXnFHfdSvPfOlkgqqVI+GQg88w7I1ttlYTBk1vzrcCwYf7R1q
         MenAKk9D9B42eJRX9rf5iyQcPphOMaWLQ+PcZYR31wuIKztfOznza4FhsC0EayZ55iLf
         WiKax83XOrSkjDf6C5k0rzjV07SpLukoy5Ihx+/60oCbogEuK+ND8OSTJN5OeuKC8wOW
         24gw==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id 186-v6si28201651pfc.95.2018.11.14.19.16.08;
        Wed, 14 Nov 2018 19:16:22 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727084AbeKONVz (ORCPT <rfc822;kristofer.rye@gmail.com>
        + 99 others); Thu, 15 Nov 2018 08:21:55 -0500
Received: from cloudserver094114.home.pl ([79.96.170.134]:57850 "EHLO
        cloudserver094114.home.pl" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726689AbeKONVy (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 15 Nov 2018 08:21:54 -0500
Received: from 64.114.255.114 (64.114.255.114) (HELO aspire.rjw.lan)
 by serwer1319399.home.pl (79.96.170.134) with SMTP (IdeaSmtpServer 0.83.148)
 id 99c4a3471693d3da; Thu, 15 Nov 2018 04:15:51 +0100
From: "Rafael J. Wysocki" <rjw@rjwysocki.net>
To: Peter Zijlstra <peterz@infradead.org>
Cc: Linux PM <linux-pm@vger.kernel.org>,
        Giovanni Gherdovich <ggherdovich@suse.cz>,
        Doug Smythies <dsmythies@telus.net>,
        Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>,
        LKML <linux-kernel@vger.kernel.org>,
        Frederic Weisbecker <frederic@kernel.org>,
        Mel Gorman <mgorman@suse.de>,
        Daniel Lezcano <daniel.lezcano@linaro.org>
Subject: Re: [RFC/RFT][PATCH v5] cpuidle: New timer events oriented governor for tickless systems
Date: Thu, 15 Nov 2018 04:15:59 +0100
Message-ID: <3270197.PFh8UsvZCP@aspire.rjw.lan>
In-Reply-To: <20181111154017.GD3021@worktop>
References: <102783770.7hZjAahU8c@aspire.rjw.lan> <20181111154017.GD3021@worktop>
MIME-Version: 1.0
Content-Transfer-Encoding: 7Bit
Content-Type: text/plain; charset="us-ascii"
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwCHAE0I5exbx35BAA--.10891S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoWxGw45AFyxuw18try3urW8Crg_yoWrZryfpr
	WUKa1DtFn7XFy7tr1xtw4rXr9I9rW8CF43tFyrGF9Yyr98Zw1SgrWkK3yYga4xCrs7tw1j
	vF1jg347Ca9YyFDanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUPYb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Xr0_Ar1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1l84ACjcxK6I8E
	87Iv67AKxVW0oVCq3wA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_GcCE3s1le2I262IYc4CY6c
	8Ij28IcVAaY2xG8wAqx4xG64xvF2IEw4CE5I8CrVC2j2WlYx0E2Ix0cI8IcVAFwI0_JrI_
	JrylYx0Ex4A2jsIE14v26r4j6F4UMcvjeVCFs4IE7xkEbVWUJVW8JwACjcxG0xvEwIxGrw
	CjxxvEa2IrMxkF7I0Ew4C26cxK6c8Ij28IcwCY1Ik26cxK6xAEc7vF6xCjj44lc2xSY4AK
	6IIF6r48MxkI7II2jI8vz4vEwIxGrwCYIxAIcVC0I7IYx2IY67AKxVWUCVW8JwCYIxAIcV
	C0I7IYx2IY6xkF7I0E14v26r1j6r4UMxvI42IY6I8E87Iv67AKxVWxJr0_GcWlcIIF0xvE
	x4A2jsIEc7CjxVAFwI0_Cr1j6rxdMxAIw28IcxkI7VAKI48JMxAIw28IcVAKzI0EY4vE52
	x082I5MxCjnVCjjxCrMxC20s026xCaFVCjc4AY6r1j6r4UMI8I3I0E5I8CrVAFwI0_Jr0_
	Jr4lx2IqxVCjr7xvwVAFwI0_JrI_JrWlx4CE17CEb7AF67AKxVWUtVW8ZwCIc40Y0x0EwI
	xGrwCI42IY6xAIw20EY4v20xvaj40_Zr0_Wr1UYxBIdaVFxhVjvjDU0xZFpf9x07bLkuxU
	UUUU=

On Sunday, November 11, 2018 4:40:17 PM CET Peter Zijlstra wrote:
> On Thu, Nov 08, 2018 at 06:25:07PM +0100, Rafael J. Wysocki wrote:
> > +unsigned int teo_idle_duration(struct cpuidle_driver *drv,
> > +			       struct teo_cpu *cpu_data,
> > +			       unsigned int sleep_length_us)
> > +{
> > +	u64 range, max_spread, sum, max, min;
> > +	unsigned int i, count;
> > +
> > +	/*
> > +	 * If the sleep length is below the target residency of idle state 1,
> > +	 * the only viable choice is to select the first available (enabled)
> > +	 * idle state, so return immediately in that case.
> > +	 */
> > +	if (sleep_length_us < drv->states[1].target_residency)
> > +		return sleep_length_us;
> > +
> > +	/*
> > +	 * The purpose of this function is to check if there is a pattern of
> > +	 * wakeups indicating that it would be better to select a state
> > +	 * shallower than the deepest one matching the sleep length or the
> > +	 * deepest one at all if the sleep lenght is long.  Larger idle duration
> > +	 * values are beyond the interesting range.
> > +	 */
> > +	range = drv->states[drv->state_count-1].target_residency;
> > +	range = min_t(u64, sleep_length_us, range + (range >> 2));
> > +
> > +	/*
> > +	 * This is the value to compare with the distance between the average
> > +	 * and the greatest sample to decide whether or not it is small enough.
> > +	 * Take 10 us as the total cap of it.
> > +	 */
> > +	max_spread = max_t(u64, range >> MAX_SPREAD_SHIFT, 10);
> > +
> > +	/*
> > +	 * First pass: compute the sum of interesting samples, the minimum and
> > +	 * maximum of them and count them.
> > +	 */
> > +	count = 0;
> > +	sum = 0;
> > +	max = 0;
> > +	min = UINT_MAX;
> > +
> > +	for (i = 0; i < INTERVALS; i++) {
> > +		u64 val = cpu_data->intervals[i];
> > +
> > +		if (val >= range)
> > +			continue;
> > +
> > +		count++;
> > +		sum += val;
> > +		if (max < val)
> > +			max = val;
> > +
> > +		if (min > val)
> > +			min = val;
> > +	}
> > +
> > +	/* Give up if the number of interesting samples is too small. */
> > +	if (count <= INTERVALS / 2)
> > +		return sleep_length_us;
> > +
> > +	/*
> > +	 * If the distance between the max or min and the average is too large,
> > +	 * try to refine by discarding the max, as long as the count is above 3.
> > +	 */
> > +	while (count > 3 && max > max_spread &&
> > +	       ((max - max_spread) * count > sum ||
> > +	        (min + max_spread) * count < sum)) {
> > +
> > +		range = max;
> > +
> > +		/*
> > +		 * Compute the sum of samples in the interesting range.  Count
> > +		 * them and find the maximum of them.
> > +		 */
> > +		count = 0;
> > +		sum = 0;
> > +		max = 0;
> > +
> > +		for (i = 0; i < INTERVALS; i++) {
> > +			u64 val = cpu_data->intervals[i];
> > +
> > +			if (val >= range)
> > +				continue;
> > +
> > +			count++;
> > +			sum += val;
> > +			if (max < val)
> > +				max = val;
> > +		}
> > +	}
> > +
> > +	return div64_u64(sum, count);
> > +}
> 
> By always discarding the larger value; you're searching for the first or
> shortest peak, right?

Yes, basically.

> While that is always a safe value; it might not be the best value.

Sure.

> Also; I think you can write the whole thing shorter; maybe like:
> 
> 
> 	do {
> 		count = sum = max = 0;
> 		min = UINT_MAX;
> 
> 		for (i = 0; i < INTERVALS; i++) {
> 			u64 val = cpu_data->intervals[i];
> 
> 			if (val >= range)
> 				continue;
> 
> 			count++;
> 			sum += val;
> 			max = max(max, val);
> 			min = min(min, val);
> 		}
> 
> 		range = max;
> 
> 	} while (count > 3 && max > max_spread &&
> 	         ((max - max_spread) * count > sum ||
> 		  (min + max_spread) * count < sum));
> 
> per the fact that <= INTERVALS/2 := > 3, without assuming that you need
> one more condition in there for the first pass or something.

The reason I wrote it this way was because I needed to compute the min
in the first pass only and then the count from the first pass was compared
with INTERVALS/2 to decide whether or not to do more passes.

> Anyway; a fair while ago I proposed a different estimator. I've not had
> time to dig through the 4 prior versions so I cannot tell if you've
> already tried this, but the idea was simple:
> 
>   - track the last @n wakeup distances in the @idle-states buckets;
>   - sum the buckets in increasing idle state and pick the state before
>     you reach 50% of @n.
> 
> That is computationally cheaper than what you have; and should allow you
> to increase @n without making the computation more expensive.

I can do something similar (actually, I have a prototype ready already),
but do it after walking the idle states once (which will give us a preliminary
idle state choice based on the time to the closest timer and the "history")
and then sum the buckets below the idle state selected so far in the decreasing
order (that will tend to select a shallower state in "tie" situations).
