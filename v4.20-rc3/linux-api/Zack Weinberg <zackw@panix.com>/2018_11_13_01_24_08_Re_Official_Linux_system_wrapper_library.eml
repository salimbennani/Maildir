Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 13 Nov 2018 00:33:39 -0000
Received: from icoremail.net (unknown [209.85.214.179])
	by mail-app2 (Coremail) with SMTP id by_KCgDHHyZou+lb7S5_AQ--.38816S3;
	Tue, 13 Nov 2018 01:42:01 +0800 (CST)
Received: from mail-pl1-f179.google.com (unknown [209.85.214.179])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwBHL0tmu+lbNTAzAA--.308S3;
	Tue, 13 Nov 2018 01:41:58 +0800 (CST)
Received: by mail-pl1-f179.google.com with SMTP id b5-v6so4670346pla.6
        for <xuliker@zju.edu.cn>; Mon, 12 Nov 2018 09:41:58 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-original-authentication-results:x-gm-message-state:delivered-to
         :mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc:sender:precedence:list-id;
        bh=AZU38p393HQjn3xeJ+qPNBZfxhYnrWfTvqeafKQqVWM=;
        b=fwmotCQ3XWP9v48DKcnPR7L44/8AHLZCf0ZS9apctSh4RS9cVrn7Y8d5TT9z3UrG8F
         TVcjr8ytgQPJijZwKrtBX8gCIMhEcJF0KcxX23aYU3LAYgJ85t4iLucX7x/1wBZQYUVR
         HjwnNm1mK9KDp4gzbLvXvo7fS5s0aObH3bOopF1yHlIdA+4J2uGSJ0ZKyoEx5BdcOVm7
         /siabLQvOxh+rmFbTJ3pH4lFmx3vteM+vgzgTZL+/N1BrIh+sfzeQdgrjHhOcU1pH9Jr
         wgbZm/a013dQWCP2r8cvNIcLg4nGVX5BeG0fm9c04rUelVRbV+euGCd5b9T2Eyz+FqGZ
         6u6A==
X-Original-Authentication-Results: mx.google.com;       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
X-Gm-Message-State: AGRZ1gJGbwMJ4QuQZHZyLHULp1fuPc1r9TisERC8qWuVk7/4bSjnYss6
	2zH6N7TfZgaLngxb/AxAaLpn+Vi/ZjgCxNKVkbjExKm3TMJnkyfZiA==
X-Received: by 2002:a17:902:166:: with SMTP id 93-v6mr1762041plb.68.1542044517912;
        Mon, 12 Nov 2018 09:41:57 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp3477302pjt;
        Mon, 12 Nov 2018 09:41:56 -0800 (PST)
X-Google-Smtp-Source: AJdET5dRh0qp9ytl5AzfNVKMZbZEjT5e5ScnJdtrSZW0gkJMyO+ngetriOLPSBG7emHThL0QDUtM
X-Received: by 2002:a65:58ca:: with SMTP id e10mr1459879pgu.99.1542044516844;
        Mon, 12 Nov 2018 09:41:56 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542044516; cv=none;
        d=google.com; s=arc-20160816;
        b=TCmz+NCso7zuzy/9xic/WI03IpL+3qm3Pp1NotDWyaevWC4rTe6EMe/vqpIr7S9Fon
         3VtBKR6thaWmrHA+ttiMSOk3K0fJ8ezZ/IBu38Acu28RFOJLLd0+6r16EIf7/cfjk4wy
         x+z+3IYv6PDJQrJbZOeBRS7L0eYUVxtgJBd+UuMIIk+FgeeYI5xnNDqoYUbcg5VU+Gne
         MRbWAiKiObjzANk06m1uWoRDToE4BRsTVp98j0Bk8RMENZUfUmt4souzlPlHEdB7apuv
         3IBxYxzy4aeoCg9GiAunaP0Hq7SG9P5cEtpX+t7SUgDYHmUaR+Xkdk+5/9kpqlBE9eGV
         ADKQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:cc:to:subject:message-id:date:from
         :in-reply-to:references:mime-version;
        bh=AZU38p393HQjn3xeJ+qPNBZfxhYnrWfTvqeafKQqVWM=;
        b=gH5fFT7lbWDHKA6jhj7++vLkEu9BTTMKskQoZ5cw/eEGNJqBnvNoPXjQAw8ha2FK/t
         v18leU27dmogfn9Q+9Ls6M1/EM5EKKZ/Bd2SgEzU1Yg0KUCIQHio7jp5xmx4VGAcSobU
         1LmVvtYLFjHMtJlngC0sHYBjsi3KToXq+vmutPy56Rl8CdtLGG7AmxY32h3Q9T61p0Fv
         v5XaWBsaTYqEsLWvPoV7TKVQ8A1eZNn5JLZU6khfrn6hw3+u0ULSSxBg4Ut80L3MUSvg
         WJcxNHHs4gM3VmG+ircN0MGb6AfirUR3t9x6eNq0/8gFwVZahq/keQ97YNqf3SzvB71h
         OA0w==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id m3-v6si18718887pfm.118.2018.11.12.09.41.41;
        Mon, 12 Nov 2018 09:41:56 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730063AbeKMDfh (ORCPT <rfc822;berg.ding@gmail.com> + 99 others);
        Mon, 12 Nov 2018 22:35:37 -0500
Received: from l2mail1.panix.com ([166.84.1.75]:64588 "EHLO l2mail1.panix.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1727185AbeKMDfg (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 12 Nov 2018 22:35:36 -0500
X-Greylist: delayed 1010 seconds by postgrey-1.27 at vger.kernel.org; Mon, 12 Nov 2018 22:35:31 EST
Received: from mailbackend.panix.com (mailbackend.panix.com [166.84.1.89])
        by l2mail1.panix.com (Postfix) with ESMTPS id 43B94804E;
        Mon, 12 Nov 2018 12:24:31 -0500 (EST)
Received: from mail-it1-f178.google.com (mail-it1-f178.google.com [209.85.166.178])
        by mailbackend.panix.com (Postfix) with ESMTPSA id 681A82C316;
        Mon, 12 Nov 2018 12:24:29 -0500 (EST)
Received: by mail-it1-f178.google.com with SMTP id w7-v6so14341243itd.1;
        Mon, 12 Nov 2018 09:24:29 -0800 (PST)
X-Received: by 2002:a02:212a:: with SMTP id e42-v6mr1590255jaa.59.1542043469183;
 Mon, 12 Nov 2018 09:24:29 -0800 (PST)
MIME-Version: 1.0
References: <CAKOZuesB4R=dCz4merWQN0FSCGrXmOgUUr4ienSbStBJguNv8g@mail.gmail.com>
 <bbc12da5-830e-99a7-95e3-d9da42947dc9@gmail.com> <877ehjx447.fsf@oldenburg.str.redhat.com>
 <CAKOZues5SEESpJU=6MDTrPXTA1KTZFGNQE4Lw4t0fO-WBTU62w@mail.gmail.com>
 <875zx2vhpd.fsf@oldenburg.str.redhat.com> <CAKOZuetdgk1QYhx1538-98rFpogMin=8DkPnCtU9_=ip23Vk7w@mail.gmail.com>
In-Reply-To: <CAKOZuetdgk1QYhx1538-98rFpogMin=8DkPnCtU9_=ip23Vk7w@mail.gmail.com>
From: Zack Weinberg <zackw@panix.com>
Date: Mon, 12 Nov 2018 12:24:08 -0500
X-Gmail-Original-Message-ID: <CAKCAbMiHC9r54h=XeW7CkBZ1Z5eHr9MPH3Rn7KTc9DjoHG=8UA@mail.gmail.com>
Message-ID: <CAKCAbMiHC9r54h=XeW7CkBZ1Z5eHr9MPH3Rn7KTc9DjoHG=8UA@mail.gmail.com>
Subject: Re: Official Linux system wrapper library?
To: dancol@google.com
Cc: Florian Weimer <fweimer@redhat.com>,
        "Michael Kerrisk (man-pages)" <mtk.manpages@gmail.com>,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>,
        joelaf@google.com, linux-api@vger.kernel.org, w@1wt.eu,
        vbabka@suse.cz, "Carlos O'Donell" <carlos@redhat.com>,
        GNU C Library <libc-alpha@sourceware.org>
Content-Type: text/plain; charset="UTF-8"
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwBHL0tmu+lbNTAzAA--.308S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoWxKF1fKF15Jw1fKw1rCr48JFb_yoW7ZrWxpF
	WYgFy2kF4DAF1kZr1v9w4xWa4F9F4fAay5Gr9xK34kA390gFnagF4fKa1a9F1DZwsa93Wj
	qF409FyDuan8Za7anT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUmvb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Ar0_tr1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Cr0_Gr1UM28EF7xvwVC2
	z280aVAFwI0_Gr1j6F4UJwA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_Gr1j6F4UJwAS0I0E0x
	vYzxvE52x082IY62kv0487Mc02F40EFcxC0VAKzVAqx4xG6I80ewAv7VC0I7IYx2IY67AK
	xVWUJVWUGwAv7VC2z280aVAFwI0_Jr0_Gr1lOx8S6xCaFVCjc4AY6r1j6r4UM4x0Y48IcV
	AKI48JMx02cVCv0xWlc7CjxVAKzI0EY4vE52x082I5MxkFs20EY4vE44CYbxCE4x80FwCY
	02Avz4vEIxC_GwCY0x0Ix7I2Y4AK64vIr41lcIIF0xvE2Ix0cI8IcVAFwI0_JFI_Gr1lcI
	IF0xvE2Ix0cI8IcVCY1x0267AKxVWUJVW8JwCYIxAIcVC2z280aVAFwI0_Gr1j6F4UJwCY
	IxAIcVC2z280aVCY1x0267AKxVW8Jr0_Cr1UMxAIw28IcxkI7VAKI48JMxAIw28IcVAKzI
	0EY4vE52x082I5MxCjnVCjjxCrMxC20s026xCaFVCjc4AY6r1j6r4UMxCIbckI1I0E14v2
	6r1Y6r17MI8I3I0E5I8CrVAFwI0_Jr0_Jr4lx2IqxVCjr7xvwVAFwI0_JrI_JrWlx4CE17
	CEb7AF67AKxVWUtVW8ZwCIc40Y0x0EwIxGrwCI42IY6xAIw20EY4v20xvaj40_Gr0_ZrUv
	cSsGvfC2KfnxnUUI43ZEXa7IUOkMa5UUUUU==

Daniel Colascione <dancol@google.com> wrote:
> >> If the kernel provides a system call, libc should provide a C wrapper
> >> for it, even if in the opinion of the libc maintainers, that system
> >> call is flawed.

I would like to state general support for this principle; in fact, I
seriously considered preparing patches that made exactly this change,
about a year ago, posting them, and calling for objections.  Then
$dayjob ate all my hacking time (and is still doing so, alas).

Nonetheless I do think there are exceptions, such as those that are
completely obsolete (bdflush, socketcall) and those that cannot be
used without stomping on glibc's own data structures (set_robust_list
is the only one of these I know about off the top of my head, but
there may well be others).

Daniel Colascione <dancol@google.com> wrote:
> We can learn something from how Windows does things. On that system,
> what we think of as "libc" is actually two parts. (More, actually, but
> I'm simplifying.) At the lowest level, you have the semi-documented
> ntdll.dll, which contains raw system call wrappers and arcane
> kernel-userland glue. On top of ntdll live the "real" libc
> (msvcrt.dll, kernel32.dll, etc.) that provide conventional
> application-level glue.

This is an appealing idea at first sight; there are several other
constituencies for it besides frustrated kernel hackers, such as
alternative system programming languages (Rust, Go) that want to
minimize dependencies on legacy "C library" functionality.   If we
could find a clean way to do it, I would support it.

The trouble is that "raw system call wrappers and arcane
kernel-userland glue" turns out to be a lot more code, with a lot more
tentacles in both directions, than you might think.  If you compare
the sizes of the text sections of `ntdll.dll` and `libc.so.6` you will
notice that the former is _bigger_.  The reason for this, as far as I
can determine (without any access to Microsoft's internal
documentation or source code ;-) is that ntdll.dll contains the
dynamic linker-equivalent, a basic memory allocator, the stack
unwinder, and a good chunk of the core thread library. (It also has
stuff in it that's needed by programs that run early during boot and
can't use kernel32.dll, but that's not our problem.)  I don't think
this is an accident or an engineering compromise.  It is necessary for
the dynamic loader to understand threads, and the thread library to
understand shared library semantics.  It is necessary for both of
those components to allocate memory.  And both of those components are
naturally tightly coupled to the kernel, and in particular they have
to be up and running from the first user-space instruction executed in
a new process, so it's natural to put them in the component that is
responsible for talking directly to the kernel.

But the _consequence_ of this design is, ntdll.dll defines the
semantics of shared library loading, and the semantics of threads, for
the entire system.  A hypothetical equivalent liblinuxabi.so.1 would
have to do the same.  And that means you wouldn't get as much
decoupling from the C and POSIX standards -- both of which specify at
least part of those semantics -- as you want, and we would still be
having these arguments.  For example, it would be every bit as
troublesome for liblinuxabi.so.1 to export set_robust_list as it would
be for libc.so.6 to do that.

You might be able to get out of most of the tangle by putting the
dynamic loader in a separate process, and that's _also_ an appealing
idea for several other reasons, but it would still need to understand
some of the thread-related data structures within the processes it
manipulated, so I don't think it would help enough to be worth it (in
a complete greenfields design where I get to ignore POSIX and rewrite
the kernel API from scratch, now, that might be a different story).

On a larger note, the fundamental complaint here is a project process
/ communication complaint.  We haven't been communicating enough with
the kernel team, fair criticism.  We can do better.  But the
communication has to go both ways.  When, for instance, we tell you
that membarrier needs to have its semantics nailed down in terms of
the C++17 memory model, that actually needs to happen.  When we tell
you that we can't use UAPI headers directly unless you commit to
honoring all of the standard-sourced namespace constraints on
user-visible headers, that needs to end the argument unless and until
someone does commit to doing all of that work on the kernel side.  (We
could discuss things we could do to make that work easier from your
end -- the __USE macros could stand to be better documented, for
instance -- but ultimately someone has to do the work.)

And, because this is a process / communication problem, you cannot
expect there to be a purely technical fix.   Your position appears,
from where I'm sitting, to be something like "if we split glibc into
two pieces, then you and us will never have to talk to each other
again" which, I'm sorry, I can't see that working out in the long run.

> (For example, for a long time now, I've wanted to go
> beyond POSIX and improve the system's signal handling API, and this
> improvement requires userspace cooperation.)

This is also an appealing notion, but the first step should be to
eliminate all of the remaining uses for asynchronous signals: for
instance, give us process handles already!  Once a program only ever
needs to call sigaction() to deal with
SIGSEGV/SIGBUS/SIGILL/SIGFPE/SIGTRAP, then we can think about
inventing a better replacement for that scenario.

zw
