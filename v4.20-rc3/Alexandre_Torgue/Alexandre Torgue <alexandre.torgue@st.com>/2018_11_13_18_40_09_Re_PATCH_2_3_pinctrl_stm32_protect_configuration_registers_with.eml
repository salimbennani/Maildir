Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (61.164.42.155:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 13 Nov 2018 15:23:11 -0000
Received: from icoremail.net (unknown [209.85.214.170])
	by mail-app2 (Coremail) with SMTP id by_KCgDHH35Jqupb5HeFAQ--.40338S3;
	Tue, 13 Nov 2018 18:41:14 +0800 (CST)
Received: from mail-pl1-f170.google.com (unknown [209.85.214.170])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwCngj5HqupbS8M3AA--.9663S3;
	Tue, 13 Nov 2018 18:41:11 +0800 (CST)
Received: by mail-pl1-f170.google.com with SMTP id x21-v6so3085566pln.9
        for <xuliker@zju.edu.cn>; Tue, 13 Nov 2018 02:41:11 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-original-authentication-results:x-gm-message-state:delivered-to
         :subject:to:cc:references:from:message-id:date:user-agent
         :mime-version:in-reply-to:content-language:content-transfer-encoding
         :sender:precedence:list-id;
        bh=u/t3h+gqF1GDQa7k+ecwKoQRCTWVJiLEOG62uDD6yj4=;
        b=eM59qO8qsO2FRv6TiPKxwNylfnVrLm9KQXIsQjlTqHVtKqmPWV6FjvIatBersk7Iso
         4JbL3teu+pZ3Pdxs+ly0XuAms3Ksjice8JQi5Swk3XBzEnO2mz/nzJp/bZMYD5g/TJWR
         nbSnHZnDnCHuidtKEgK8DsUz5qKx4sEuQpfBF+EzNhgIZIfsCXMor/x23idAcDXX8JcP
         DQTocWBC/R9mGmQyo11YxPFQDRdEczilzeXvDqDwU0FAjkSNmar8wNOIhAR8Z8oi/Lha
         rs82XgofY5kDMyPk1s5Y3EC0VMtE2MMjOhzF9fbkOhIvfozZn7eOvTTAj/ia+MXlEKT8
         Sm6w==
X-Original-Authentication-Results: mx.google.com;       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
X-Gm-Message-State: AGRZ1gI0jlnzKgzOntQFDH20hpXvFnzlWKF/p2GW56kVOCslsH730pE3
	m3qtI+BPDSEbUY93DiJOdco+/RmJaITSXN8nYYmIYrkikATo25yOqQ==
X-Received: by 2002:a17:902:50e3:: with SMTP id c32-v6mr4510644plj.39.1542105671477;
        Tue, 13 Nov 2018 02:41:11 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp4296547pjt;
        Tue, 13 Nov 2018 02:41:10 -0800 (PST)
X-Google-Smtp-Source: AJdET5fWO8VLqEmz1IVdxxtutS99+8Ooojd+VJ8/eDihS2Cd/EEf6TEPzTPva42kuhbHgGQgmM6q
X-Received: by 2002:a63:5c22:: with SMTP id q34mr4199811pgb.417.1542105670179;
        Tue, 13 Nov 2018 02:41:10 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542105670; cv=none;
        d=google.com; s=arc-20160816;
        b=PbLjNcu57OQydJ1se+AvrAz6+aB8Z3HlTUUlp1DuRx1gnHZHCxSnmMh6xyJIlvEs+8
         IHdMTbBBID+tqcLE3vhhYLGrcn4Bcfn10GfxKYfuiS1bB+4cnE1s7nn3pZhlGathAPQR
         6f3sQ+2/aVJkphlHFH1Sn+WMLH2x8rfMVOk28Q+rX9lh0jHQCILQaTOLMiZtpK/ObjCA
         j1z6vBJ+FktMzCrlLew6JDFEuL9TE2U3ncTzNy5FjR7p1oxmH0dT250wb9Q2nkid9T3q
         NBlUVLqXDD5kQH0w6rudG44QWy79Nzv3B3YgZ4/1IgbvAD9npz4atEOEVaoJL/Kj2ysv
         tIhA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:content-transfer-encoding
         :content-language:in-reply-to:mime-version:user-agent:date
         :message-id:from:references:cc:to:subject;
        bh=u/t3h+gqF1GDQa7k+ecwKoQRCTWVJiLEOG62uDD6yj4=;
        b=iwHwQibXsp+L8DTiQ9l+Fw5XPE0LW1lO8KkAkBlD1ivygKwglcUFB8GL0tex0mI42S
         h6xNyPHpcaN2ZZJGrPn56eyhMJhkC2mUIgSBYVg6ZO7ToMZd5Vb62qIV9fD03KOyv73B
         WqEpNBwJelBuHv4BkkvernEFLKLFTItJjJVNw9PF1F+pOl3O6sR/CSyqJ7UzoKA4tbDc
         lHG6PmSINnoZ4YkjCQcFZd1M0zvSq5dXYdRbzo9IutB3kFhhNPyqa7G+nJ/aRM2OjLJ/
         2Pt3rwzBEVRPQs6cqXA6PFPapUI9Pwynf8Xjw1Fv77RDtWzkd7jpMkW93NaIPzbZZ5M3
         DvnA==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id v123-v6si21638157pfb.65.2018.11.13.02.40.55;
        Tue, 13 Nov 2018 02:41:10 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1732302AbeKMUiD (ORCPT <rfc822;revogelaar@gmail.com>
        + 99 others); Tue, 13 Nov 2018 15:38:03 -0500
Received: from mx07-00178001.pphosted.com ([62.209.51.94]:21690 "EHLO
        mx07-00178001.pphosted.com" rhost-flags-OK-OK-OK-OK)
        by vger.kernel.org with ESMTP id S1732104AbeKMUiC (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 13 Nov 2018 15:38:02 -0500
Received: from pps.filterd (m0046668.ppops.net [127.0.0.1])
        by mx07-.pphosted.com (8.16.0.21/8.16.0.21) with SMTP id wADAdF2j002842;
        Tue, 13 Nov 2018 11:40:11 +0100
Received: from beta.dmz-eu.st.com (beta.dmz-eu.st.com [164.129.1.35])
        by mx07-00178001.pphosted.com with ESMTP id 2nnnp28rq5-1
        (version=TLSv1 cipher=ECDHE-RSA-AES256-SHA bits=256 verify=NOT);
        Tue, 13 Nov 2018 11:40:11 +0100
Received: from zeta.dmz-eu.st.com (zeta.dmz-eu.st.com [164.129.230.9])
        by beta.dmz-eu.st.com (STMicroelectronics) with ESMTP id 1464431;
        Tue, 13 Nov 2018 10:40:11 +0000 (GMT)
Received: from Webmail-eu.st.com (sfhdag3node2.st.com [10.75.127.8])
        by zeta.dmz-eu.st.com (STMicroelectronics) with ESMTP id D9F36291B;
        Tue, 13 Nov 2018 10:40:10 +0000 (GMT)
Received: from [10.201.21.58] (10.75.127.45) by SFHDAG3NODE2.st.com
 (10.75.127.8) with Microsoft SMTP Server (TLS) id 15.0.1347.2; Tue, 13 Nov
 2018 11:40:10 +0100
Subject: Re: [PATCH 2/3] pinctrl: stm32: protect configuration registers with
 a hwspinlock
To: Benjamin Gaignard <benjamin.gaignard@linaro.org>,
        <linus.walleij@linaro.org>, <robh+dt@kernel.org>
CC: <linux-gpio@vger.kernel.org>, <devicetree@vger.kernel.org>,
        <linux-arm-kernel@lists.infradead.org>,
        <linux-kernel@vger.kernel.org>,
        <linux-stm32@st-md-mailman.stormreply.com>,
        Benjamin Gaignard <benjamin.gaignard@st.com>
References: <20181113095142.32015-1-benjamin.gaignard@st.com>
 <20181113095142.32015-3-benjamin.gaignard@st.com>
From: Alexandre Torgue <alexandre.torgue@st.com>
Message-ID: <e6bab4d5-851b-e283-5240-f7e4f81fd5bc@st.com>
Date: Tue, 13 Nov 2018 11:40:09 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.2.1
MIME-Version: 1.0
In-Reply-To: <20181113095142.32015-3-benjamin.gaignard@st.com>
Content-Type: text/plain; charset="utf-8"; format=flowed
Content-Language: en-US
Content-Transfer-Encoding: 7bit
X-Originating-IP: [10.75.127.45]
X-ClientProxiedBy: SFHDAG3NODE1.st.com (10.75.127.7) To SFHDAG3NODE2.st.com
 (10.75.127.8)
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10434:,, definitions=2018-11-13_07:,,
 signatures=0
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwCngj5HqupbS8M3AA--.9663S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoW3Jr4kGF1xur4DGr1kWw18Grg_yoW7KFW8pF
	Z7JFyYkFsrXryj9w4DAF1j9FnxK397tanxJrWIga4fGF1jqr95ta1fGry8Ar4UtF97Aanx
	WF43Was5uaykJaUanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUUjbIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUmab7Iv0xC_Cr1lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Ar0_tr1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Cr0_Gr1UM28EF7xvwVC2
	z280aVAFwI0_GcCE3s1l84ACjcxK6I8E87Iv6xkF7I0E14v26rxl6s0DM2AIxVAIcxkEcV
	Aq07x20xvEncxIr21l5I8CrVACY4xI64kE6c02F40Ex7xfMcIj6xIIjxv20xvE14v26r1j
	6r18McIj6I8E87Iv67AKxVW8JVWxJwAm72CE4IkC6x0Yz7v_Jr0_Gr1lF7xvr2IY64vIr4
	1l7I0Y6sxI4wCYjI0SjxkI62AI1cAE67vIY487MxkF7I0Ew4C26cxK6c8Ij28IcwCY1Ik2
	6cxK6xAEc7vF6xCjj44lc2xSY4AK6IIF6r4DMxkI7II2jI8vz4vEwIxGrwCYIxAIcVC0I7
	IYx2IY67AKxVW8JVW5JwCYIxAIcVC0I7IYx2IY6xkF7I0E14v26r4j6F4UMxvI42IY6I8E
	87Iv67AKxVWxJr0_GcWlcIIF0xvEx4A2jsIEc7CjxVAFwI0_Cr1j6rxdMxAIw28IcxkI7V
	AKI48JMxAIw28IcVAKzI0EY4vE52x082I5MxCjnVCjjxCrMxC20s026xCaFVCjc4AY6r1j
	6r4UMI8I3I0E5I8CrVAFwI0_Jr0_Jr4lx2IqxVCjr7xvwVAFwI0_JrI_JrWlx4CE17CEb7
	AF67AKxVWUtVW8ZwCIc40Y0x0EwIxGrwCI42IY6xAIw20EY4v20xvaj40_Gr0_ZrUvcSsG
	vfC2KfnxnUUI43ZEXa7IU5s2-5UUUUU==

Hi Benjamin

On 11/13/18 10:51 AM, Benjamin Gaignard wrote:
> If a hwspinlock if defined in device tree use it to protect
> configuration registers.
> 
> Signed-off-by: Benjamin Gaignard <benjamin.gaignard@st.com>
> ---
>   drivers/pinctrl/stm32/pinctrl-stm32.c | 71 ++++++++++++++++++++++++++++++++++-
>   1 file changed, 70 insertions(+), 1 deletion(-)
> 
> diff --git a/drivers/pinctrl/stm32/pinctrl-stm32.c b/drivers/pinctrl/stm32/pinctrl-stm32.c
> index a9bec6e6fdd1..dce9dabaf4d5 100644
> --- a/drivers/pinctrl/stm32/pinctrl-stm32.c
> +++ b/drivers/pinctrl/stm32/pinctrl-stm32.c
> @@ -8,6 +8,7 @@


Acked-by: Alexandre TORGUE <alexandre.torgue@st.com>



>    */
>   #include <linux/clk.h>
>   #include <linux/gpio/driver.h>
> +#include <linux/hwspinlock.h>
>   #include <linux/io.h>
>   #include <linux/irq.h>
>   #include <linux/mfd/syscon.h>
> @@ -51,6 +52,8 @@
>   #define gpio_range_to_bank(chip) \
>   		container_of(chip, struct stm32_gpio_bank, range)
>   
> +#define HWSPINLOCK_TIMEOUT	5 /* msec */
> +
>   static const char * const stm32_gpio_functions[] = {
>   	"gpio", "af0", "af1",
>   	"af2", "af3", "af4",
> @@ -91,6 +94,7 @@ struct stm32_pinctrl {
>   	struct irq_domain	*domain;
>   	struct regmap		*regmap;
>   	struct regmap_field	*irqmux[STM32_GPIO_PINS_PER_BANK];
> +	struct hwspinlock *hwlock;
>   };
>   
>   static inline int stm32_gpio_pin(int gpio)
> @@ -576,14 +580,24 @@ static int stm32_pmx_get_func_groups(struct pinctrl_dev *pctldev,
>   static void stm32_pmx_set_mode(struct stm32_gpio_bank *bank,
>   		int pin, u32 mode, u32 alt)
>   {
> +	struct stm32_pinctrl *pctl = dev_get_drvdata(bank->gpio_chip.parent);
>   	u32 val;
>   	int alt_shift = (pin % 8) * 4;
>   	int alt_offset = STM32_GPIO_AFRL + (pin / 8) * 4;
>   	unsigned long flags;
> +	int err = 0;
>   
>   	clk_enable(bank->clk);
>   	spin_lock_irqsave(&bank->lock, flags);
>   
> +	if (pctl->hwlock)
> +		err = hwspin_lock_timeout(pctl->hwlock, HWSPINLOCK_TIMEOUT);
> +
> +	if (err) {
> +		dev_err(pctl->dev, "Can't get hwspinlock\n");
> +		goto unlock;
> +	}
> +
>   	val = readl_relaxed(bank->base + alt_offset);
>   	val &= ~GENMASK(alt_shift + 3, alt_shift);
>   	val |= (alt << alt_shift);
> @@ -594,6 +608,10 @@ static void stm32_pmx_set_mode(struct stm32_gpio_bank *bank,
>   	val |= mode << (pin * 2);
>   	writel_relaxed(val, bank->base + STM32_GPIO_MODER);
>   
> +	if (pctl->hwlock)
> +		hwspin_unlock(pctl->hwlock);
> +
> +unlock:
>   	spin_unlock_irqrestore(&bank->lock, flags);
>   	clk_disable(bank->clk);
>   }
> @@ -683,17 +701,31 @@ static const struct pinmux_ops stm32_pmx_ops = {
>   static void stm32_pconf_set_driving(struct stm32_gpio_bank *bank,
>   	unsigned offset, u32 drive)
>   {
> +	struct stm32_pinctrl *pctl = dev_get_drvdata(bank->gpio_chip.parent);
>   	unsigned long flags;
>   	u32 val;
> +	int err = 0;
>   
>   	clk_enable(bank->clk);
>   	spin_lock_irqsave(&bank->lock, flags);
>   
> +	if (pctl->hwlock)
> +		err = hwspin_lock_timeout(pctl->hwlock, HWSPINLOCK_TIMEOUT);
> +
> +	if (err) {
> +		dev_err(pctl->dev, "Can't get hwspinlock\n");
> +		goto unlock;
> +	}
> +
>   	val = readl_relaxed(bank->base + STM32_GPIO_TYPER);
>   	val &= ~BIT(offset);
>   	val |= drive << offset;
>   	writel_relaxed(val, bank->base + STM32_GPIO_TYPER);
>   
> +	if (pctl->hwlock)
> +		hwspin_unlock(pctl->hwlock);
> +
> +unlock:
>   	spin_unlock_irqrestore(&bank->lock, flags);
>   	clk_disable(bank->clk);
>   }
> @@ -719,17 +751,31 @@ static u32 stm32_pconf_get_driving(struct stm32_gpio_bank *bank,
>   static void stm32_pconf_set_speed(struct stm32_gpio_bank *bank,
>   	unsigned offset, u32 speed)
>   {
> +	struct stm32_pinctrl *pctl = dev_get_drvdata(bank->gpio_chip.parent);
>   	unsigned long flags;
>   	u32 val;
> +	int err = 0;
>   
>   	clk_enable(bank->clk);
>   	spin_lock_irqsave(&bank->lock, flags);
>   
> +	if (pctl->hwlock)
> +		err = hwspin_lock_timeout(pctl->hwlock, HWSPINLOCK_TIMEOUT);
> +
> +	if (err) {
> +		dev_err(pctl->dev, "Can't get hwspinlock\n");
> +		goto unlock;
> +	}
> +
>   	val = readl_relaxed(bank->base + STM32_GPIO_SPEEDR);
>   	val &= ~GENMASK(offset * 2 + 1, offset * 2);
>   	val |= speed << (offset * 2);
>   	writel_relaxed(val, bank->base + STM32_GPIO_SPEEDR);
>   
> +	if (pctl->hwlock)
> +		hwspin_unlock(pctl->hwlock);
> +
> +unlock:
>   	spin_unlock_irqrestore(&bank->lock, flags);
>   	clk_disable(bank->clk);
>   }
> @@ -755,17 +801,31 @@ static u32 stm32_pconf_get_speed(struct stm32_gpio_bank *bank,
>   static void stm32_pconf_set_bias(struct stm32_gpio_bank *bank,
>   	unsigned offset, u32 bias)
>   {
> +	struct stm32_pinctrl *pctl = dev_get_drvdata(bank->gpio_chip.parent);
>   	unsigned long flags;
>   	u32 val;
> +	int err = 0;
>   
>   	clk_enable(bank->clk);
>   	spin_lock_irqsave(&bank->lock, flags);
>   
> +	if (pctl->hwlock)
> +		err = hwspin_lock_timeout(pctl->hwlock, HWSPINLOCK_TIMEOUT);
> +
> +	if (err) {
> +		dev_err(pctl->dev, "Can't get hwspinlock\n");
> +		goto unlock;
> +	}
> +
>   	val = readl_relaxed(bank->base + STM32_GPIO_PUPDR);
>   	val &= ~GENMASK(offset * 2 + 1, offset * 2);
>   	val |= bias << (offset * 2);
>   	writel_relaxed(val, bank->base + STM32_GPIO_PUPDR);
>   
> +	if (pctl->hwlock)
> +		hwspin_unlock(pctl->hwlock);
> +
> +unlock:
>   	spin_unlock_irqrestore(&bank->lock, flags);
>   	clk_disable(bank->clk);
>   }
> @@ -1140,7 +1200,7 @@ int stm32_pctl_probe(struct platform_device *pdev)
>   	struct device *dev = &pdev->dev;
>   	struct stm32_pinctrl *pctl;
>   	struct pinctrl_pin_desc *pins;
> -	int i, ret, banks = 0;
> +	int i, ret, hwlock_id, banks = 0;
>   
>   	if (!np)
>   		return -EINVAL;
> @@ -1160,6 +1220,15 @@ int stm32_pctl_probe(struct platform_device *pdev)
>   
>   	platform_set_drvdata(pdev, pctl);
>   
> +	/* hwspinlock is optional */
> +	hwlock_id = of_hwspin_lock_get_id(pdev->dev.of_node, 0);
> +	if (hwlock_id < 0) {
> +		if (hwlock_id == -EPROBE_DEFER)
> +			return hwlock_id;
> +	} else {
> +		pctl->hwlock = hwspin_lock_request_specific(hwlock_id);
> +	}
> +
>   	pctl->dev = dev;
>   	pctl->match_data = match->data;
>   	ret = stm32_pctrl_build_state(pdev);
> 
