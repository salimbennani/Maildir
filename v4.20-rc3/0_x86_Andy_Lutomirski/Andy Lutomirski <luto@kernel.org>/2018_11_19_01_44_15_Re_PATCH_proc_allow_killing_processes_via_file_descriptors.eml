Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 19 Nov 2018 00:47:24 -0000
Received: from icoremail.net (unknown [209.85.210.182])
	by mail-app2 (Coremail) with SMTP id by_KCgDXv9IqpfFbfn+yAQ--.53176S3;
	Mon, 19 Nov 2018 01:45:16 +0800 (CST)
Received: from mail-pf1-f182.google.com (unknown [209.85.210.182])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwDnz0sopfFb4nBSAA--.15997S3;
	Mon, 19 Nov 2018 01:45:12 +0800 (CST)
Received: by mail-pf1-f182.google.com with SMTP id b7so470071pfi.8
        for <xuliker@zju.edu.cn>; Sun, 18 Nov 2018 09:45:12 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:mime-version
         :references:in-reply-to:from:date:message-id:subject:to:cc:sender
         :precedence:list-id;
        bh=oNZtxricH8VCmcfIxt8qVe7e51FKvNWHQXITy2s7Thc=;
        b=ItyGIhK1F8yAQ2MpSBk0otCv7kN7S9bn5F7uq8vfPVMOp7wm09TZh2vQ7NH5azopL0
         kF4b2vcqYTUTmXXXv+qVsuOiCM1o8RVhNy2XWyqDgWuZ4jrpBa8LHyZlD5NyoMK14T/4
         4Emak0DTg9iDb8WjIAsnrfCmPlEZN6eUPd6qCardOIm6BDYfH8w4U9rLP3e3YCZEzyEC
         6jiyUKlXTOlFQWaQMKJWWpwBBlYHy8F+OXl9RcoVkNQ7r4WckBAxyvl7r7TUrayHxWxV
         +2UnWKuLA1aEx/tf4MChD7+DzEW/252pd8eEdvj6GvIqM2ht3snOjk+qQAGvSOrvoSLL
         HINw==
X-Gm-Message-State: AGRZ1gIS1qG8jD99wA8VxcAGAJIvbkAnJGgdt5zqr097oXs3VQXElD8a
	/FQUHL/Xt6+o0wVnmqb/AgSD5bnODEsGPspLVsAMVgSxZDpRMVY=
X-Received: by 2002:a62:6241:: with SMTP id w62-v6mr19570705pfb.69.1542563112153;
        Sun, 18 Nov 2018 09:45:12 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:d106:0:0:0:0 with SMTP id l6-v6csp1751709pju;
        Sun, 18 Nov 2018 09:45:11 -0800 (PST)
X-Google-Smtp-Source: AJdET5dgfuYYb3WU7efCfH7Mc+jq6pD1+NnfrqM9uUgorPKU1zuzQUchHNRLC8tJ3gH/F/sJuz95
X-Received: by 2002:a62:682:: with SMTP id 124-v6mr19706429pfg.161.1542563111234;
        Sun, 18 Nov 2018 09:45:11 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542563111; cv=none;
        d=google.com; s=arc-20160816;
        b=DYXOviez28I7cZsmqk7GJ1zbXMPEWgjmaF6ODHqXdUC6n99lJayWxNO1oD6gc5aAJ7
         Xjl1qmTdn9FFjLJWQMhkfNlEJX8NSnWEyi73z35TF67pr+ak2uYGtYOg958iXiXhOGI7
         qH8IPxChiJBMf6o5oUYROydV9N3BQdkmyrhN0JmqNnI0h35oysNeKBf9wdVpkN8lL/Ax
         KRP5wljYEYs/DBy1m0xmSoPkZJa4Re2X2vI9BS1d84d0r9+4b0bom1FGj5cdg0LbphYj
         EhZIRmIOQtnBAnbWp0ozCf102kikhxwDPdL3RXeKivXRH5c1qHN7A4CPA1CS3Y1R2Naj
         wrWw==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:cc:to:subject:message-id:date:from
         :in-reply-to:references:mime-version:dkim-signature;
        bh=oNZtxricH8VCmcfIxt8qVe7e51FKvNWHQXITy2s7Thc=;
        b=wPFoDsoTDINwb91py8Oh5sMFSAlVt12kbAi81NBCWXRT0epxi/4F9q4GoNrFqdcAIA
         3Zwy1XPvzQFbDdGfICn2It8OueEXimun8AGDFbsep27LNlIFAfzaZ/aTUa9r47e0a3VE
         YYOQtmLgVz8bj2dYDAxc1+OCXbwlXIEZ+GCg85Kpy5W3UYcIALiQudW6C0/DiEGo4zn/
         GlsYSpLRHT62psUWA/mEGM8v4KocZTDZ3BQzR510Uyu5VXd4HgRu7Wm0wrwucp0oX8aT
         IjYJUNHzUR+GXgIYM5Ut42CYBJxjjUCY0Xn1y8hR6ufXadc8ZbnYHqYhPMa+aH3yxd15
         LQgA==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@kernel.org header.s=default header.b=uga8K6Kc;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;
       dmarc=pass (p=NONE sp=NONE dis=NONE) header.from=kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id ay1si6404493plb.410.2018.11.18.09.44.55;
        Sun, 18 Nov 2018 09:45:11 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727115AbeKSEFW (ORCPT <rfc822;xtanabe@gmail.com> + 99 others);
        Sun, 18 Nov 2018 23:05:22 -0500
Received: from mail.kernel.org ([198.145.29.99]:40972 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726523AbeKSEFV (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Sun, 18 Nov 2018 23:05:21 -0500
Received: from mail-wr1-f48.google.com (mail-wr1-f48.google.com [209.85.221.48])
        (using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 482B2208E3
        for <linux-kernel@vger.kernel.org>; Sun, 18 Nov 2018 17:44:28 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1542563068;
        bh=HA98euqYy3wEgON3mmY8TFT9et9Xln146bQy9GbsbMI=;
        h=References:In-Reply-To:From:Date:Subject:To:Cc:From;
        b=uga8K6KcFlGl/mx8jabRYAiry78uryKEqpdtVmfyGyRvhOmVTxstF1+w0Rq9ZFe/0
         zvaHKHaAh1KoVwNAV4jwOZYLWl4EwSFK3eHv/OXmdjOovF35ia/qgb9pMS3yFKtwIp
         TXY7Ceq972D8ndfZ38owKZ8mRnl59ng/vQqXglI4=
Received: by mail-wr1-f48.google.com with SMTP id x10so951153wrs.8
        for <linux-kernel@vger.kernel.org>; Sun, 18 Nov 2018 09:44:28 -0800 (PST)
X-Received: by 2002:a5d:5541:: with SMTP id g1mr2387353wrw.330.1542563066707;
 Sun, 18 Nov 2018 09:44:26 -0800 (PST)
MIME-Version: 1.0
References: <20181118111751.6142-1-christian@brauner.io> <CAKOZuet3s0WxxPgrtrNkq8YiOWhYAiK6yEio6PKVV9J_H4_TSA@mail.gmail.com>
 <CALCETrUd2Y2MmO8Qx8aUvQDOTNiyj35Y7bctPBZe0p2i1EUiLw@mail.gmail.com> <20181118174148.nvkc4ox2uorfatbm@brauner.io>
In-Reply-To: <20181118174148.nvkc4ox2uorfatbm@brauner.io>
From: Andy Lutomirski <luto@kernel.org>
Date: Sun, 18 Nov 2018 09:44:15 -0800
X-Gmail-Original-Message-ID: <CALCETrXJrk3Jys_T6P=PxO4JY=H-1e9hcMVyBxQJvMRYf=5vfQ@mail.gmail.com>
Message-ID: <CALCETrXJrk3Jys_T6P=PxO4JY=H-1e9hcMVyBxQJvMRYf=5vfQ@mail.gmail.com>
Subject: Re: [PATCH] proc: allow killing processes via file descriptors
To: Christian Brauner <christian@brauner.io>
Cc: Andrew Lutomirski <luto@kernel.org>,
        Daniel Colascione <dancol@google.com>,
        "Eric W. Biederman" <ebiederm@xmission.com>,
        LKML <linux-kernel@vger.kernel.org>,
        "Serge E. Hallyn" <serge@hallyn.com>, Jann Horn <jannh@google.com>,
        Andrew Morton <akpm@linux-foundation.org>,
        Oleg Nesterov <oleg@redhat.com>,
        Aleksa Sarai <cyphar@cyphar.com>,
        Al Viro <viro@zeniv.linux.org.uk>,
        Linux FS Devel <linux-fsdevel@vger.kernel.org>,
        Linux API <linux-api@vger.kernel.org>,
        Tim Murray <timmurray@google.com>,
        Kees Cook <keescook@chromium.org>,
        David Howells <dhowells@redhat.com>
Content-Type: text/plain; charset="UTF-8"
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwDnz0sopfFb4nBSAA--.15997S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoWxuw1rGw48Zry7Xr1xGF1xZrb_yoW7Kr13pF
	WFga1akF4DGF1Iy3s2gr48XF10yw4xtrW3Xrn3Kry0ywn0vF1IqryfKr4Y9F9rursaka12
	qrWqqFZrZ3W5Z3DanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUPFb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Ar0_tr1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1l84ACjcxK6I8E
	87Iv67AKxVW8Jr0_Cr1UM28EF7xvwVC2z280aVCY1x0267AKxVW8Jr0_Cr1UM2AIxVAIcx
	kEcVAq07x20xvEncxIr21l5I8CrVACY4xI64kE6c02F40Ex7xfMcIj6xIIjxv20xvE14v2
	6r1j6r18McIj6I8E87Iv67AKxVWUJVW8JwAm72CE4IkC6x0Yz7v_Jr0_Gr1lF7xvr2IY64
	vIr41l7I0Y6sxI4wCY1x0264kExVAvwVAq07x20xylc2xSY4AK6IIF6r4lc2IjII80xcxE
	wVAKI48JMxvI42IY6xIIjxv20xvE14v26r1I6r4UMxvI42IY6xIIjxv20xvEc7CjxVAFwI
	0_Jr0_Gr1lcIIF0xvEx4A2jsIE14v26r4j6F4UMxvI42IY6I8E87Iv6xkF7I0E14v26r4j
	6r4UJwCF04k20xvY0x0EwIxGrwCF04k20xvEw4C26cxK6c8Ij28IcwCF72vE77IF4wCFx2
	IqxVCFs4IE7xkEbVWUJVW8JwCFI7km07C267AKxVWUtVW8ZwC20s026c02F40E14v26r1j
	6r18MI8I3I0E7480Y4vE14v26r106r1rMI8E67AF67kF1VAFwI0_GFv_WrylIxkGc2Ij64
	vIr41lIxAIcVCF04k26cxKx2IYs7xG6Fyj6rWUJbIYCTnIWIevJa73UjIFyTuYvjxUmb18
	DUUUU

On Sun, Nov 18, 2018 at 9:42 AM Christian Brauner <christian@brauner.io> wrote:
>
> On Sun, Nov 18, 2018 at 07:38:09AM -0800, Andy Lutomirski wrote:
> > On Sun, Nov 18, 2018 at 5:59 AM Daniel Colascione <dancol@google.com> wrote:
> > >
> > > I had been led to believe that the proposal would be a comprehensive
> > > process API, not an ioctl basically equivalent to my previous patch.
> > > If you had a more comprehensive proposal, please just share it on LKML
> > > instead of limiting the discussion to those able to attend these
> > > various conferences. If there's some determined opposition to a
> > > general new process API, this opposition needs a fair and full airing,
> > > as not everyone can attend these conferences.
> > >
> > > On Sun, Nov 18, 2018 at 3:17 AM, Christian Brauner <christian@brauner.io> wrote:
> > > > With this patch an open() call on /proc/<pid> will give userspace a handle
> > > > to struct pid of the process associated with /proc/<pid>. This allows to
> > > > maintain a stable handle on a process.
> > > > I have been discussing various approaches extensively during technical
> > > > conferences this year culminating in a long argument with Eric at Linux
> > > > Plumbers. The general consensus was that having a handle on a process
> > > > will be something that is very simple and easy to maintain
> > >
> > > ioctls are the opposite of "easy to maintain". Their
> > > file-descriptor-specific behavior makes it difficult to use the things
> > > safely. If you want to take this approach, please make a new system
> > > call. An ioctl is just a system call with a very strange spelling and
> > > unfortunate collision semantics.
> > >
> > > > with the
> > > > option of being extensible via a more advanced api if the need arises.
> > >
> > > The need *has* arisen; see my exithand patch.
> > >
> > > > I
> > > > believe that this patch is the most simple, dumb, and therefore
> > > > maintainable solution.
> > > >
> > > > The need for this has arisen in order to reliably kill a process without
> > > > running into issues of the pid being recycled as has been described in the
> > > > rejected patch [1].
> > >
> > > That patch was not "rejected". It was tabled pending the more
> > > comprehensive process API proposal that was supposed to have emerged.
> > > This patch is just another variant of the sort of approach we
> > > discussed on that patch's thread here. As I mentioned on that thread,
> > > the right approach option is a new system call, not an ioctl.
> > >
> > >  To fulfill the need described in that patchset a new
> > > > ioctl() PROC_FD_SIGNAL is added. It can be used to send signals to a
> > > > process via a file descriptor:
> > > >
> > > > int fd = open("/proc/1234", O_DIRECTORY | O_CLOEXEC);
> > > > ioctl(fd, PROC_FD_SIGNAL, SIGKILL);
> > > > close(fd);
> > > >
> > > > Note, the stable handle will allow us to carefully extend this feature in
> > > > the future.
> > >
> > > We still need the ability to synchronously wait on a process's death,
> > > as in my patch set. I will be refreshing that patch set.
> >
> > I fully agree that a more comprehensive, less expensive API for
> > managing processes would be nice.  But I also think that this patch
> > (using the directory fd and ioctl) is better from a security
> > perspective than using a new file in /proc.
> >
> > I have an old patch to make proc directory fds pollable:
> >
> > https://lore.kernel.org/patchwork/patch/345098/
> >
> > That patch plus the one in this thread might make a nice addition to
> > the kernel even if we expect something much better to come along
> > later.
>
> I agree. Eric's point was to make the first implementation of this as
> simple as possible that's why this patch is intentionally almost
> trivial. And I like it for its simplicity.
>
> I had a more comprehensive API proposal of which open(/proc/<pid>) was a
> part. I didn't send out alongside this patch as Eric clearly prefered to
> only have the /proc/<pid> part. Here is the full proposal as I intended
> to originally send it out:
>
> The gist is to have file descriptors for processes which is obviously not a new
> idea. This has been done before in other OSes and it has been tried before in
> Linux [2], [3] (Thanks to Kees for pointing out these patches.). So I want to
> make it very clear that I'm not laying claim to this being my or even a novel
> idea in any way. However, I want to diverge from previous approaches with my
> suggestion. (Though I can't be sure that there's not something similar in other
> OSes already.)
>
> One of the main motivations for having procfds is to have a race-free way of
> configuring, starting, polling, and killing a process. Basically, a process
> lifecycle api if you want to think about it that way. The api should also be
> easily extendable in the future to avoid running into the limitations we
> currently see with the clone*() syscall(s) again.
>
> One of the crucial points of the api is to *separate the configuration
> of a process through a procfd from actually creating the process*.
> This is a crucial property expressed in the open*() system calls. First, get a
> stable handle on an object then allow for ways to configure it. As such the
> procfd api shares the same insight with Al's and David's new mount api.
> (Fwiw, Andy also pointed out similarities with posix_spawn().)
> What I envisioned was to have the following syscalls (multiple name suggestions):
>
> 1. int process_open / proc_open / procopen
> 2. int process_config / proc_config / procconfig or ioctl()-based
> 3. int process_info / proc_info / procinfo or ioctl()-based
> 4. int process_manage / proc_manage / procmanage or ioctl()-based

Emails crossed :(

For process management, I generally like this, although we might do
better if we make execve() effectively invalidate the handle.  Then we
avoid a bunch of nasty permission issues.  For process *creation*, we
have the problem that libc authors feel that they can't safely use fds
at all.  There was a proposal for "high fds" a long time back to solve
that.  We might finally need to do something like that.
