Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 19 Nov 2018 00:47:53 -0000
Received: from icoremail.net (unknown [209.85.215.176])
	by mail-app2 (Coremail) with SMTP id by_KCgDnX19DB_JbZGa0AQ--.53589S3;
	Mon, 19 Nov 2018 08:43:48 +0800 (CST)
Received: from mail-pg1-f176.google.com (unknown [209.85.215.176])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwCXfEhAB_JbpN5TAA--.19082S3;
	Mon, 19 Nov 2018 08:43:44 +0800 (CST)
Received: by mail-pg1-f176.google.com with SMTP id w7so13003307pgp.13
        for <xuliker@zju.edu.cn>; Sun, 18 Nov 2018 16:43:44 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:date:from:to:cc
         :subject:message-id:references:mime-version:content-disposition
         :in-reply-to:user-agent:sender:precedence:list-id;
        bh=HIAJ5A44ie0pl/XLi0oyLjmhS1mBYpcr/NQyaM+JtoA=;
        b=VmzS6FhEsAj0XyeGqNKCuPok4hGjsTooe8nqMWUXUBHNapbfL/w2jKhUPMZmm36Qkx
         wi6J84wnABY0/BFkq+L0qg+EBfE9JiS/6sL7ZfMd/V/M53iJ9km4Sx7nvF+ej8QX5/v6
         xJJRj53q2RY8zuJ/f49KnlLqqQ3OOznTnIIZRw7CHSqKFAe5p8rcuMkeAQqqtkl+uUEa
         BZfxwYMf46nBho66Wiy6jmPch21t99eVaghQombysavmheCndF/yQAkN/xvpeqK9tPK8
         9MqIXsPVbKEiGDwJuQvXPv5O4Mn9EEO3NVP4GZcDbNecXGaYB42MSYwFoEwGIzqgd8Og
         vVnw==
X-Gm-Message-State: AGRZ1gIsZrAG+Ey0+ebeFRCwxOXjSXWXVMDQMFEYonzIYBOq5+/9lXBV
	a/t0rmTFUhPXiGseBwzhtiZuQIvsM6vaFasccDCeU5YdzP0p5lc=
X-Received: by 2002:a62:6241:: with SMTP id w62-v6mr20646645pfb.69.1542588223781;
        Sun, 18 Nov 2018 16:43:43 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:d106:0:0:0:0 with SMTP id l6-v6csp2046932pju;
        Sun, 18 Nov 2018 16:43:42 -0800 (PST)
X-Google-Smtp-Source: AJdET5cQ9SMSwSAgOyqsXk8V4xR7GNlb2zhCvO+OeOFAHLA6L0YLdeL8m1e9//jvAOtcxXxSKxhH
X-Received: by 2002:a65:560e:: with SMTP id l14mr18271855pgs.168.1542588222655;
        Sun, 18 Nov 2018 16:43:42 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542588222; cv=none;
        d=google.com; s=arc-20160816;
        b=fph+7ju2EbVGuQQBU4INpWUXltW3qt+zdBB8umw7NFHnyIR1V5FBtRkLbmYktJY4RU
         YiYmKykUgT+61v7PkB9lKioIY5fpJdiN+nfZpqe3qlAUcZ0oWdAmi6ZnOK66i9q2wp1N
         brQ881YgR0HXNjvNjU2+rfzrj605RB27Ccm0zNMx085dACIOWa5VFXjQ13YBED3MZnmO
         Jq1wk0Vj/KTXyRAlU+XA9E+/sLPIqsUOdt29tx+bjTGkcCAozIZe3J12BUgsAFwa+aU+
         YtUbjWASThTfpzenpbEFVlCc2wltAa2bQeJVZuzfnLG3PJjfwHCLMq5khjCgL4rIkcYx
         yxcA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:user-agent:in-reply-to
         :content-disposition:mime-version:references:message-id:subject:cc
         :to:from:date:dkim-signature;
        bh=HIAJ5A44ie0pl/XLi0oyLjmhS1mBYpcr/NQyaM+JtoA=;
        b=FDdHzYqd3Y9ddPU5zC7GXryJybW186iUY6xHVdfQ5H6OeH7cvkMCiHACgVx3GMzs2X
         2h8rsLFCrQ+9gordj5Wg0zlxWybbVzYkqCv1GIahcF3HlX3YdE7MDCnWQJpLhYUducOG
         bubDSTfhlVcda4m/s0ZblhAWw31aDMSAMh5sJvbaHvR3NLo/10EUbqNG2DZcvb7wDImP
         n4tRwAOWeVH009L2+6z5aJRJRn2wzrvA6pnUXZDNDvjQ6YKPsovyx2C6cqshXTPLe6BO
         5rfadxGmjkFsFcl+VFVLv2Scu0Q0psPpb0Cxx88tBJG/qymz48M9V6SObMA/7/IlJjtD
         FPjg==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@brauner.io header.s=google header.b=JaQlf0vi;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id a8si15265660pgw.380.2018.11.18.16.43.13;
        Sun, 18 Nov 2018 16:43:42 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726127AbeKSLCl (ORCPT <rfc822;piyush.popli@gmail.com>
        + 99 others); Mon, 19 Nov 2018 06:02:41 -0500
Received: from mail-pg1-f193.google.com ([209.85.215.193]:41583 "EHLO
        mail-pg1-f193.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725811AbeKSLCk (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 19 Nov 2018 06:02:40 -0500
Received: by mail-pg1-f193.google.com with SMTP id 70so13014466pgh.8
        for <linux-kernel@vger.kernel.org>; Sun, 18 Nov 2018 16:40:49 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=brauner.io; s=google;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=HIAJ5A44ie0pl/XLi0oyLjmhS1mBYpcr/NQyaM+JtoA=;
        b=JaQlf0viQb4WyMuT0L+WQhPU+Z1JIWKYb8vuzRBkrkJXo+qOzVZB0GDn7t+mf44QeD
         rdXrbdLyRCa9NvGTlhbtiGwlmXJ7CTPPZenl3Q11F5d7r3l9/3CZnLiW9Y+q/vCxilYR
         KEgkFlSto8yFQbO0CGNFGa0dP+Ctz/g5xX4ZwRP3ARQnWMMUbBfwYzz3ry2OLmkd4+YR
         0b+g25UlXV6hisiPCb1wqYXZFWQmvkmdBakCzr6stMaK9k7oJRMzeLNxCv1cabnLjXsn
         64ceQeoii4QB1Is/OHFJqLuOYLp8Pxt9B1A4hybhrjEvtRV5H+mBgMoKLHFf4RoxbplE
         hzTw==
X-Received: by 2002:aa7:8552:: with SMTP id y18mr21166799pfn.83.1542588048886;
        Sun, 18 Nov 2018 16:40:48 -0800 (PST)
Received: from brauner.io ([130.195.55.139])
        by smtp.gmail.com with ESMTPSA id m17-v6sm42967259pfi.102.2018.11.18.16.40.42
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Sun, 18 Nov 2018 16:40:48 -0800 (PST)
Date: Mon, 19 Nov 2018 01:40:39 +0100
From: Christian Brauner <christian@brauner.io>
To: Daniel Colascione <dancol@google.com>
Cc: Andy Lutomirski <luto@amacapital.net>,
        Aleksa Sarai <cyphar@cyphar.com>,
        Andy Lutomirski <luto@kernel.org>,
        Randy Dunlap <rdunlap@infradead.org>,
        "Eric W. Biederman" <ebiederm@xmission.com>,
        LKML <linux-kernel@vger.kernel.org>,
        "Serge E. Hallyn" <serge@hallyn.com>, Jann Horn <jannh@google.com>,
        Andrew Morton <akpm@linux-foundation.org>,
        Oleg Nesterov <oleg@redhat.com>,
        Al Viro <viro@zeniv.linux.org.uk>,
        Linux FS Devel <linux-fsdevel@vger.kernel.org>,
        Linux API <linux-api@vger.kernel.org>,
        Tim Murray <timmurray@google.com>,
        Kees Cook <keescook@chromium.org>,
        Jan Engelhardt <jengelh@inai.de>
Subject: Re: [PATCH] proc: allow killing processes via file descriptors
Message-ID: <20181119004037.d4avmjyiooa7ujyf@brauner.io>
References: <CALCETrVscRwQG55-j1SKc2TmSb1-=5861804ojUuviNzdyDOrA@mail.gmail.com>
 <CAKOZuevRq-igh06zS_nsGG400zXrKFCtajpEG9-xgU2+Rtb2Pw@mail.gmail.com>
 <20181118190504.ixglsqbn6mxkcdzu@yavin>
 <CAKOZuetfqvn1uVqKJ=16iEzG4g449YOjC_tLM60eKBSkv9u+bQ@mail.gmail.com>
 <608F2959-800D-46EE-A7CD-8C972ACD2F02@amacapital.net>
 <20181118204317.seaztq7fqmysucns@brauner.io>
 <CAKOZueuWzu2GuJ-w3yb01P9uyO1WniKG+i=BUsweVdA-KgEjhw@mail.gmail.com>
 <20181118212336.53hh3qbjughrtc2l@brauner.io>
 <20181118213021.24asgwkci3do6oby@brauner.io>
 <CAKOZuetT8mzZJR-K_W0VM7Dg1c1SnH8tW-HXxMT77yS0DE453w@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
In-Reply-To: <CAKOZuetT8mzZJR-K_W0VM7Dg1c1SnH8tW-HXxMT77yS0DE453w@mail.gmail.com>
User-Agent: NeoMutt/20180716
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwCXfEhAB_JbpN5TAA--.19082S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoWxtry8CrWDAr18Kr1UWFWfZrb_yoW7AF4UpF
	48JF18KFW8Ja40kr10gw4rXFySgry3Gr15Wrsxta15Ar4qvF4FqrnxJrW5uFn5Cr1kCw1U
	ZFW0y39xuw18AFUanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUUjbIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUmSb7Iv0xC_KF4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Xr0_Ar1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1l84ACjcxK6I8E
	87Iv67AKxVW0oVCq3wA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_GcCE3s1le2I262IYc4CY6c
	8Ij28IcVAaY2xG8wAqx4xG64xvF2IEw4CE5I8CrVC2j2WlYx0E2Ix0cI8IcVAFwI0_Jr0_
	Jr4lYx0Ex4A2jsIE14v26r1j6r4UMcvjeVCFs4IE7xkEbVWUJVW8JwACjcxG0xvEwIxGrw
	CjxxvEa2IrMxkF7I0Ew4C26cxK6c8Ij28IcwCY1Ik26cxK6xAEc7vF6xCjj44lc2xSY4AK
	6IIF6w1lc2IjII80xcxEwVAKI48JMxvI42IY6xIIjxv20xvE14v26r1j6r1xMxvI42IY6x
	IIjxv20xvEc7CjxVAFwI0_Jr0_Gr1lcIIF0xvEx4A2jsIE14v26r4UJVWxJr1lcIIF0xvE
	x4A2jsIEc7CjxVAFwI0_Gr1j6F4UJwCF04k20xvY0x0EwIxGrwCF04k20xvEw4C26cxK6c
	8Ij28IcwCF72vE77IF4wCFx2IqxVCFs4IE7xkEbVWUJVW8JwCFI7km07C267AKxVWUXVWU
	AwC20s026c02F40E14v26r1j6r18MI8I3I0E7480Y4vE14v26r106r1rMI8E67AF67kF1V
	AFwI0_GFv_WrylIxkGc2Ij64vIr41lIxAIcVCF04k26cxKx2IYs7xG6rWUJVWrZr1UYxBI
	daVFxhVjvjDU0xZFpf9x07bn3kZUUUUU=

On Sun, Nov 18, 2018 at 04:31:22PM -0800, Daniel Colascione wrote:
> On Sun, Nov 18, 2018 at 1:30 PM, Christian Brauner <christian@brauner.io> wrote:
> > On Sun, Nov 18, 2018 at 10:23:36PM +0100, Christian Brauner wrote:
> >> On Sun, Nov 18, 2018 at 12:54:10PM -0800, Daniel Colascione wrote:
> >> > On Sun, Nov 18, 2018 at 12:43 PM, Christian Brauner
> >> > <christian@brauner.io> wrote:
> >> > > On Sun, Nov 18, 2018 at 01:28:41PM -0700, Andy Lutomirski wrote:
> >> > >>
> >> > >>
> >> > >> > On Nov 18, 2018, at 12:44 PM, Daniel Colascione <dancol@google.com> wrote:
> >> > >> >
> >> > >>
> >> > >> >
> >> > >> > That is, I'm proposing an API that looks like this:
> >> > >> >
> >> > >> > int process_kill(int procfs_dfd, int signo, const union sigval value)
> >> > >> >
> >> > >> > If, later, process_kill were to *also* accept process-capability FDs,
> >> > >> > nothing would break.
> >> > >>
> >> > >> Except that this makes it ambiguous to the caller as to whether their current creds are considered.  So it would need to be a different syscall or at least a flag.  Otherwise a lot of those nice theoretical properties go away.
> >> > >
> >> > > I can add a flag argument
> >> > > int process_signal(int procfs_dfd, int signo, siginfo_t *info, int flags)
> >> > > The way I see it process_signal() should be equivalent to kill(pid, signal) for now.
> >> > > That is siginfo_t is cleared and set to:
> >> > >
> >> > > info.si_signo = sig;
> >> > > info.si_errno = 0;
> >> > > info.si_code = SI_USER;
> >> > > info.si_pid = task_tgid_vnr(current);
> >> > > info.si_uid = from_kuid_munged(current_user_ns(), current_uid());
> >> >
> >> > That makes sense. I just don't want to get into a situation where
> >> > callers feel that they *have* to use the PID-based APIs to send a
> >> > signal because process_kill doesn't offer some bit of functionality.
> >>
> >> Yeah.
> >>
> >> >
> >> > Are you imagining something like requiring info t be NULL unless flags
> >> > contains some "I have a siginfo_t" value?
> >>
> >> Well, I was actually thinking about something like:
> >>
> >> /**
> >>  *  sys_process_signal - send a signal to a process trough a process file descriptor
> >>  *  @fd: the file descriptor of the process
> >>  *  @sig: signal to be sent
> >>  *  @info: the signal info
> >>  *  @flags: future flags to be passed
> >>  */
> >> SYSCALL_DEFINE4(process_signal, int, fd, int, sig, siginfo_t __user *, info,
> >>               int, flags)
> >> {
> >>       struct pid *pid;
> >>       struct fd *f;
> >>       kernel_siginfo_t kinfo;
> >>
> >>       /* Do not allow users to pass garbage. */
> >>       if (flags)
> >>               return -EINVAL;
> >>
> >>       int ret = __copy_siginfo_from_user(sig, &kinfo, info);
> >>       if (unlikely(ret))
> >>               return ret;
> >>
> >>       /* For now, enforce that caller's creds are used. */
> >>       kinfo.si_pid = task_tgid_vnr(current);
> >>       kinfo.si_uid = from_kuid_munged(current_user_ns(), current_uid());
> 
> How about doing it this way? If info is NULL, act like kill(2);
> otherwise, act like rt_sigqueueinfo(2).
> 
> (Not actual working or compiled code.)
> 
> SYSCALL_DEFINE4(process_signal, int, fd, int, sig, siginfo_t __user *, info,
>               int, flags)
> {
>         struct fd f = { 0 };
>         kernel_siginfo_t kinfo;
>         int ret;
> 
>         /* Make API extension possible.  */
>         ret = -EINVAL;
>         if (flags)
>                 goto out;
> 
>         ret = -EBADF;
>         f = fdget(fd);
>         if (!f.file)
>                 goto out;
> 
>         ret = mumble_mumble_check_real_proc_file(f.file);
>         if (ret)
>                 goto out;
> 
>         /* Act like kill(2) or rt_sigqueueinfo(2) depending on whether
>          * the user gave us a siginfo structure.
>          */
>         if (info) {
>                 ret = __copy_siginfo_from_user(sig, &kinfo, info);
>                 if (ret)
>                         goto out;
>                 /* Combine this logic with rt_sigqueueinfo(2) */
>                 ret = -EPERM;
>                 if ((info->si_code >= 0 || info->si_code == SI_TKILL) &&
>                     (task_pid_vnr(current) != pid))
>                         goto out;
> 
>         } else {
>                 /* Combine this logic with kill(2) */
>                 clear_siginfo(&kinfo);
>                 kinfo.si_signo = sig;
>                 kinfo.si_errno = 0;
>                 kinfo.si_code = SI_USER;
>                 kinfo.si_pid = task_tgid_vnr(current);
>                 kinfo.si_uid = from_kuid_munged(current_user_ns(),
> current_uid());
>         }
> 
>         ret = kill_pid_info(sig, &kinfo, proc_pid(file_inode(f.file)));
> 
> out:
>         if (f.file)
>                 fput(f);
>         return ret;
> }

Right, allowing to ass NULL might make sense. I had:

/**
 *  sys_process_signal - send a signal to a process trough a process file descriptor
 *  @fd: the file descriptor of the process
 *  @sig: signal to be sent
 *  @info: the signal info
 *  @flags: future flags to be passed
 */
SYSCALL_DEFINE4(procfd_kill, int, fd, int, sig, siginfo_t __user *, info, int, flags)
{
       int ret;
       struct pid *pid;
       kernel_siginfo_t kinfo;
       struct fd f;

       /* Do not allow users to pass garbage. */
       if (flags)
               return -EINVAL;

       ret = __copy_siginfo_from_user(sig, &kinfo, info);
       if (unlikely(ret))
               return ret;

       /* For now, enforce that caller's creds are used. */
       kinfo.si_pid = task_tgid_vnr(current);
       kinfo.si_uid = from_kuid_munged(current_user_ns(), current_uid());

       f = fdget_raw(fd);
       if (!f.file)
               return -EBADF;

       ret = -EINVAL;
       /* Is this a process file descriptor? */
       if (!proc_is_procfd(f.file) || !d_is_dir(f.file->f_path.dentry))
               goto err;

       pid = f.file->private_data;
       if (!pid)
               goto err;

       ret = -EPERM;
       /*
        * Not even root can pretend to send signals from the kernel.
        * Nor can they impersonate a kill()/tgkill(), which adds source info.
        */
       if ((kinfo.si_code >= 0 || kinfo.si_code == SI_TKILL) &&
           (task_pid(current) != pid))
               goto err;

       ret = kill_pid_info(sig, &kinfo, pid);

err:
       fdput(f);
       return ret;
}
