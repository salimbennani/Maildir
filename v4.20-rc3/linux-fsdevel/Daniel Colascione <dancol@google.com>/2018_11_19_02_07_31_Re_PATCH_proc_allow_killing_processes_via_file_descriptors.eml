Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 19 Nov 2018 00:47:26 -0000
Received: from icoremail.net (unknown [209.85.215.174])
	by mail-app2 (Coremail) with SMTP id by_KCgC3fyWNqvFb95iyAQ--.52689S3;
	Mon, 19 Nov 2018 02:08:14 +0800 (CST)
Received: from mail-pg1-f174.google.com (unknown [209.85.215.174])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwAH5UCCqvFblH5SAA--.1004S3;
	Mon, 19 Nov 2018 02:08:02 +0800 (CST)
Received: by mail-pg1-f174.google.com with SMTP id n2so5596238pgm.3
        for <xuliker@zju.edu.cn>; Sun, 18 Nov 2018 10:08:02 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:mime-version
         :in-reply-to:references:from:date:message-id:subject:to:cc:sender
         :precedence:list-id;
        bh=OkxUC9gqkiM0F1BvhyKuD3GceDfHx+4+mBXytetxRCM=;
        b=EaVsiKZjMsgmADecym1mZY3bmvRncp8Ld6CaCE48ZFD8yxXrZLBN8C8mp0CC1r9IrP
         V1DWWX1VJ2YXyNL6Mt/WxGjY8BzaP2b/Y+DAXYkgUk7LLaB90wNo54HJVY1eqxKnMYlG
         WVFGsvR75AtyMOvuthV/S+7Ib5RkxNd/+Cz1y8OgxpQn6NDHQyvgE4laJ7uS2/lTYe2s
         6zcXh1e6DMMpnGGR7zLao+z8aL02JnGaE9ORqWC9MMMAb3PSt887wqtOe+iNcmaYB8wR
         Q+ySIsFjzkfeOlM9zmuvPyGF1Ui83kJtAm+h2ifQJbRhoo2EI17K9a53PpUYZgPcpr1+
         M2BA==
X-Gm-Message-State: AGRZ1gKKh8s5VAGW9kEar5rH7VKk8X000qX6wKfsfosFsQ2tNjD2V7Hf
	eiW5QwYKVFlCFThYwtBMkR/X3MYkrjexV5T3/nZUXGzo/kbKbj0=
X-Received: by 2002:a62:2292:: with SMTP id p18mr16982779pfj.9.1542564482383;
        Sun, 18 Nov 2018 10:08:02 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:d106:0:0:0:0 with SMTP id l6-v6csp1769964pju;
        Sun, 18 Nov 2018 10:08:01 -0800 (PST)
X-Google-Smtp-Source: AJdET5eJ6nFBcfMLvnLuAEviGiMJOaTv0ZnDnuEZMfPbjeAAO+YmBihqCz1DNztFbb/tQ5nGzP4g
X-Received: by 2002:a63:df50:: with SMTP id h16mr17535863pgj.421.1542564481176;
        Sun, 18 Nov 2018 10:08:01 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542564481; cv=none;
        d=google.com; s=arc-20160816;
        b=ddf+T8ghBm8x0nPM3P/1Oy0oX5dMRYXaPiyVEWZoTJjwrSl7d+JR2rA8Cdi3tB59EU
         W/147jmBVSNzhsoHia7Z1QXVNYLj8YQx3JKM5k7FqG790wmBqzxqBXVkZneei2x8EEZy
         1aHt9bSIk8gxmpD8+4D5GJCz87CL6T30Lyiz3q4hYi7+1+COSXtPhLq7RRbzkGiybYae
         Dmn09ldVXlfmZW1bzg6ZTrBK84JDQAQXgDzpp0Q+7B4bHNWN9qvohlYvyq/Bef0cxWU9
         qNbRzxQbryFplK3y0M3AcpPVrW6sxaysedYfwmJY5vgvwjzOGMqxVrTlvWsub3Ca3JY+
         yyNg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:cc:to:subject:message-id:date:from
         :references:in-reply-to:mime-version:dkim-signature;
        bh=OkxUC9gqkiM0F1BvhyKuD3GceDfHx+4+mBXytetxRCM=;
        b=T7jIAXIRYfnezdZZxfMJqkDJVV+0r0BBv4qGh2xNmrYwyIkix1AgBuBK/3yMSPuw1P
         /3bDxuHGzq8g6/7kPg74TbbnZwVu5Fw1thirFFyECuUcBIJlOe2P18ICs0ZGdFjAk4xG
         Vk579kpQREJ6RrBmjyIYaNe5nWI/iyMpc2dnclwj//jTPbwEsreRNSHfDXzfeqkkjRMW
         c9cHMpf8uJlBcg9s5EDFKZ+l2nE21At2TuaBjJJRQNAlSmrKPKhlIrVARloP81ZNuEo8
         vEkDhiA0L4nx5h2HNRfrICz/9BtZCTE0kWMqAjzQz5Inf5ARloDbTcyJwcyrLDAUAAJR
         BfSQ==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@google.com header.s=20161025 header.b="MXbj5/lU";
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;
       dmarc=pass (p=REJECT sp=REJECT dis=NONE) header.from=google.com
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id 2-v6si12519883pfq.129.2018.11.18.10.07.44;
        Sun, 18 Nov 2018 10:08:01 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727120AbeKSE23 (ORCPT <rfc822;xtanabe@gmail.com> + 99 others);
        Sun, 18 Nov 2018 23:28:29 -0500
Received: from mail-vs1-f67.google.com ([209.85.217.67]:34340 "EHLO
        mail-vs1-f67.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726822AbeKSE23 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sun, 18 Nov 2018 23:28:29 -0500
Received: by mail-vs1-f67.google.com with SMTP id y27so16540881vsi.1
        for <linux-kernel@vger.kernel.org>; Sun, 18 Nov 2018 10:07:33 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc;
        bh=OkxUC9gqkiM0F1BvhyKuD3GceDfHx+4+mBXytetxRCM=;
        b=MXbj5/lU3jX5TN39a1zwyfJfifY9YwmAAgwahR9yMBFAaQUCxlq7vVJf9f6cGEYMKW
         oX4zYQYB6XNdhr07Ye5svr+JPqy6Xz8C51DpxZQVrFr1fgUyNQIUBCa3byUFqVXVqDSF
         c2xTJ3LuSpzhG3p+dJJrKzSTBZqpORwGUlStZ1D4AvGMl+nSYGwVeuWAYiJSR9dS+/lL
         MTfQRK1ArleEwr3Up8nRw3QluIexoj+WG/bhGSXhVGbDpE8iv9xdopNH/jJNsjTcetQF
         Q4/xfmuugQAqPi60LC5JAmoZMagN9euQ1/VcVWRIoZM+PbCNS12LD58xJLgU1oKf6pgn
         sxmQ==
X-Received: by 2002:a67:b44:: with SMTP id 65mr7809440vsl.77.1542564452790;
 Sun, 18 Nov 2018 10:07:32 -0800 (PST)
MIME-Version: 1.0
Received: by 2002:a67:f48d:0:0:0:0:0 with HTTP; Sun, 18 Nov 2018 10:07:31
 -0800 (PST)
In-Reply-To: <20181118174148.nvkc4ox2uorfatbm@brauner.io>
References: <20181118111751.6142-1-christian@brauner.io> <CAKOZuet3s0WxxPgrtrNkq8YiOWhYAiK6yEio6PKVV9J_H4_TSA@mail.gmail.com>
 <CALCETrUd2Y2MmO8Qx8aUvQDOTNiyj35Y7bctPBZe0p2i1EUiLw@mail.gmail.com> <20181118174148.nvkc4ox2uorfatbm@brauner.io>
From: Daniel Colascione <dancol@google.com>
Date: Sun, 18 Nov 2018 10:07:31 -0800
Message-ID: <CAKOZueto1CmUSWFKjOkazcDcZH6CiXXCr4U=ghewLh8GjE2-=A@mail.gmail.com>
Subject: Re: [PATCH] proc: allow killing processes via file descriptors
To: Christian Brauner <christian@brauner.io>
Cc: Andy Lutomirski <luto@kernel.org>,
        "Eric W. Biederman" <ebiederm@xmission.com>,
        LKML <linux-kernel@vger.kernel.org>,
        "Serge E. Hallyn" <serge@hallyn.com>, Jann Horn <jannh@google.com>,
        Andrew Morton <akpm@linux-foundation.org>,
        Oleg Nesterov <oleg@redhat.com>,
        Aleksa Sarai <cyphar@cyphar.com>,
        Al Viro <viro@zeniv.linux.org.uk>,
        Linux FS Devel <linux-fsdevel@vger.kernel.org>,
        Linux API <linux-api@vger.kernel.org>,
        Tim Murray <timmurray@google.com>,
        Kees Cook <keescook@chromium.org>,
        David Howells <dhowells@redhat.com>
Content-Type: text/plain; charset="UTF-8"
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwAH5UCCqvFblH5SAA--.1004S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoWxuw1rGw48Zry7Xr1xGF1xZrb_yoWxKw1fpF
	WFga1aka1DGFyIy3s2gF4xJF1Fyw4ftrW3Xrn3Kry0ywn0yF1Iqrn3Kw4Y9FyDWr4S9a12
	qrWqvFZrZ3WUZaDanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUPCb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Ar0_tr1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Cr0_Gr1UM28EF7xvwVC2
	z280aVAFwI0_Gr1j6F4UJwA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_Gr1j6F4UJwAS0I0E0x
	vYzxvE52x082IY62kv0487Mc02F40EFcxC0VAKzVAqx4xG6I80ewAv7VC0I7IYx2IY67AK
	xVWUJVWUGwAv7VC2z280aVAFwI0_Jr0_Gr1lOx8S6xCaFVCjc4AY6r1j6r4UMx02cVCv0x
	Wlc7CjxVAKzI0EY4vE52x082I5MxkFs20EY4vE44CYbxCE4x80FwCY02Avz4vEIxC_XwCY
	0x0Ix7I2Y4AK64vIr41lcIIF0xvE2Ix0cI8IcVAFwI0_Jr0_JF4lcIIF0xvE2Ix0cI8IcV
	CY1x0267AKxVWUJVW8JwCYIxAIcVC2z280aVAFwI0_Gr0_Cr1lcIIF0xvEx4A2jsIEc7Cj
	xVAFwI0_Gr0_Gr1UMxAIw28IcxkI7VAKI48JMxAIw28IcVAKzI0EY4vE52x082I5MxCjnV
	CjjxCrMxC20s026xCaFVCjc4AY6r1j6r4UMxCIbckI1I0E14v26r4a6rW5MI8I3I0E5I8C
	rVAFwI0_Jr0_Jr4lx2IqxVCjr7xvwVAFwI0_JrI_JrWlx4CE17CEb7AF67AKxVW8ZVWrXw
	CIc40Y0x0EwIxGrwCI42IY6xAIw20EY4v20xvaj40_Wr1j6rW3JrUvcSsGvfC2KfnxnUUI
	43ZEXa7IUOyc_DUUUUU==

On Sun, Nov 18, 2018 at 9:41 AM, Christian Brauner <christian@brauner.io> wrote:
> On Sun, Nov 18, 2018 at 07:38:09AM -0800, Andy Lutomirski wrote:
>> On Sun, Nov 18, 2018 at 5:59 AM Daniel Colascione <dancol@google.com> wrote:
>> >
>> > I had been led to believe that the proposal would be a comprehensive
>> > process API, not an ioctl basically equivalent to my previous patch.
>> > If you had a more comprehensive proposal, please just share it on LKML
>> > instead of limiting the discussion to those able to attend these
>> > various conferences. If there's some determined opposition to a
>> > general new process API, this opposition needs a fair and full airing,
>> > as not everyone can attend these conferences.
>> >
>> > On Sun, Nov 18, 2018 at 3:17 AM, Christian Brauner <christian@brauner.io> wrote:
>> > > With this patch an open() call on /proc/<pid> will give userspace a handle
>> > > to struct pid of the process associated with /proc/<pid>. This allows to
>> > > maintain a stable handle on a process.
>> > > I have been discussing various approaches extensively during technical
>> > > conferences this year culminating in a long argument with Eric at Linux
>> > > Plumbers. The general consensus was that having a handle on a process
>> > > will be something that is very simple and easy to maintain
>> >
>> > ioctls are the opposite of "easy to maintain". Their
>> > file-descriptor-specific behavior makes it difficult to use the things
>> > safely. If you want to take this approach, please make a new system
>> > call. An ioctl is just a system call with a very strange spelling and
>> > unfortunate collision semantics.
>> >
>> > > with the
>> > > option of being extensible via a more advanced api if the need arises.
>> >
>> > The need *has* arisen; see my exithand patch.
>> >
>> > > I
>> > > believe that this patch is the most simple, dumb, and therefore
>> > > maintainable solution.
>> > >
>> > > The need for this has arisen in order to reliably kill a process without
>> > > running into issues of the pid being recycled as has been described in the
>> > > rejected patch [1].
>> >
>> > That patch was not "rejected". It was tabled pending the more
>> > comprehensive process API proposal that was supposed to have emerged.
>> > This patch is just another variant of the sort of approach we
>> > discussed on that patch's thread here. As I mentioned on that thread,
>> > the right approach option is a new system call, not an ioctl.
>> >
>> >  To fulfill the need described in that patchset a new
>> > > ioctl() PROC_FD_SIGNAL is added. It can be used to send signals to a
>> > > process via a file descriptor:
>> > >
>> > > int fd = open("/proc/1234", O_DIRECTORY | O_CLOEXEC);
>> > > ioctl(fd, PROC_FD_SIGNAL, SIGKILL);
>> > > close(fd);
>> > >
>> > > Note, the stable handle will allow us to carefully extend this feature in
>> > > the future.
>> >
>> > We still need the ability to synchronously wait on a process's death,
>> > as in my patch set. I will be refreshing that patch set.
>>
>> I fully agree that a more comprehensive, less expensive API for
>> managing processes would be nice.  But I also think that this patch
>> (using the directory fd and ioctl) is better from a security
>> perspective than using a new file in /proc.
>>
>> I have an old patch to make proc directory fds pollable:
>>
>> https://lore.kernel.org/patchwork/patch/345098/
>>
>> That patch plus the one in this thread might make a nice addition to
>> the kernel even if we expect something much better to come along
>> later.
>
> I agree. Eric's point was to make the first implementation of this as
> simple as possible that's why this patch is intentionally almost
> trivial. And I like it for its simplicity.
>
> I had a more comprehensive API proposal of which open(/proc/<pid>) was a
> part. I didn't send out alongside this patch as Eric clearly prefered to
> only have the /proc/<pid> part. Here is the full proposal as I intended
> to originally send it out:

Thanks.

> The gist is to have file descriptors for processes which is obviously not a new
> idea. This has been done before in other OSes and it has been tried before in
> Linux [2], [3] (Thanks to Kees for pointing out these patches.). So I want to
> make it very clear that I'm not laying claim to this being my or even a novel
> idea in any way. However, I want to diverge from previous approaches with my
> suggestion. (Though I can't be sure that there's not something similar in other
> OSes already.)

Windows works basically as you describe. You can create a process is
suspended state, configure it however you want, then let it run.
CreateProcess (and even moreso, NtCreateProcess) also provide a rich
(and *extensible*) interface for pre-creation process configuration.

>> One of the main motivations for having procfds is to have a race-free way of
> configuring, starting, polling, and killing a process. Basically, a process
> lifecycle api if you want to think about it that way. The api should also be
> easily extendable in the future to avoid running into the limitations we
> currently see with the clone*() syscall(s) again.
>
> One of the crucial points of the api is to *separate the configuration
> of a process through a procfd from actually creating the process*.
> This is a crucial property expressed in the open*() system calls. First, get a
> stable handle on an object then allow for ways to configure it. As such the
> procfd api shares the same insight with Al's and David's new mount api.
> (Fwiw, Andy also pointed out similarities with posix_spawn().)
> What I envisioned was to have the following syscalls (multiple name suggestions):
>
> 1. int process_open / proc_open / procopen
> 2. int process_config / proc_config / procconfig or ioctl()-based
> 3. int process_info / proc_info / procinfo or ioctl()-based
> 4. int process_manage / proc_manage / procmanage or ioctl()-based

The API you've proposed seems fine to me, although I'd either 1)
consolidate operations further into one system call, or 2) separate
the different management operations into more and different system
calls that can be audited independently. The grouping you've proposed
seems to have the worst aspects of API splitting and API multiplexing.
But I have no objection to it in spirit.

That said, while I do want to fix process configuration and startup
generally, I want to fix specific holes in the existing API surface
first. The two patches I've already sent do that, and this work
shouldn't wait on an ideal larger process-API overhaul that may or may
not arrive. Based on previous history, I suspect that an API of the
scope you're proposing would take years to overcome all LKML
objections and land. I don't want to wait that long when we can make
smaller fixes that would not conflict with the general architecture.

The original patch on this thread is half of the right fix. While I
think we should use a system call instead of an ioctl, and while I
have some specific implementation critiques (which I described in a
different message), it's the right general sort of thing. We should
merge it.

Next, I want to merge my exithand proposal, or something like it. It's
likewise a simple change that, in a minimal way, addresses a
longstanding API deficiency. I'm very strongly against the
POLLERR-on-directory variant of the idea.
