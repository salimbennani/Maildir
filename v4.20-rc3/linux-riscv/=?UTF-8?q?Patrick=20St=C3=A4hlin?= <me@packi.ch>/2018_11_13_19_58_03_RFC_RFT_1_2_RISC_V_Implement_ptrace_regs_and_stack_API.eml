Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 14 Nov 2018 00:36:45 -0000
Received: from icoremail.net (unknown [209.85.215.179])
	by mail-app2 (Coremail) with SMTP id by_KCgDHH+YcLetbi5aIAQ--.40830S3;
	Wed, 14 Nov 2018 03:59:24 +0800 (CST)
Received: from mail-pg1-f179.google.com (unknown [209.85.215.179])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwC3n0saLetbWBI6AA--.7119S3;
	Wed, 14 Nov 2018 03:59:22 +0800 (CST)
Received: by mail-pg1-f179.google.com with SMTP id w7so6179225pgp.13
        for <xuliker@zju.edu.cn>; Tue, 13 Nov 2018 11:59:22 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-original-authentication-results:x-gm-message-state:delivered-to
         :from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding:sender:precedence:list-id;
        bh=zE8BhuPm0eRMGv/EBH/Qb7J9EL51XKggC7h6h5aU9Hg=;
        b=TWwRr1RSDHNicf4kwC0P7A8B5tmPvkAnYNdTNlhYb360yLUe9oVeVyidTrF1T9dYK3
         jAq+MWUF4NGXzAvn9n/0TV8mZlicTurYtSC0sN6ocKUnuCx7CVGnB1xaL58WiutEaxXo
         JDlQuPDg90e36rAdaWE3Jp8dxXL7Fwby1as3GPbuMjuxIPoOFN+sQnfWneDoFXKbse1P
         5vhJLCDCqSs9OPQn6box9jEBUYGSogCueCEnDHu/MM7RYgiXO+fKFwseokBH7N6U4quf
         UU4xeNiRob7gW/9T/lYGn6VOauBBk48XFK03yBuG64JE8RU2KB/3tco918nAEo+wG4JE
         yDcw==
X-Original-Authentication-Results: mx.google.com;       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
X-Gm-Message-State: AGRZ1gKpOAFeyXuv61gYoFvhppvdyK4qALvohsBmR6Sl4+TA/Prf9pm0
	bxctxnLUtDYx/16ErWESTStYomLnb+nGbxx5mR9x0bO2HZgUm7/84A==
X-Received: by 2002:a65:66ce:: with SMTP id c14mr5918505pgw.450.1542139161941;
        Tue, 13 Nov 2018 11:59:21 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp4922014pjt;
        Tue, 13 Nov 2018 11:59:20 -0800 (PST)
X-Google-Smtp-Source: AJdET5chl2/SlU1EOF3k191EsFFV9jZS5O7naDTujRLQvNHoKH6R/KFou0eH7TdqowcGqkatAaF7
X-Received: by 2002:a62:51c1:: with SMTP id f184-v6mr6564384pfb.101.1542139160612;
        Tue, 13 Nov 2018 11:59:20 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542139160; cv=none;
        d=google.com; s=arc-20160816;
        b=0ojjCNSe60NMv90kCWTyO0IX5fo5+38r8+NLPlegVOsSDGgnC7WBN/P0y+QoG/xHTH
         OSzn//7BVdyhZqPApiJjlOHMdWiK3AKOcf8QZEGaoZp5otd62GUx/SXcEDFaAUObB74c
         joigQ5WDqYFLPb8G6pG+NKLblMW2Tq7u7beXMuMY0wLhY6tPUO1Hm1JvYlyTqfjLdxE/
         CTSG4Tje4P34ebNfFqGUMmhA1mxafPZiW5WxsoycbZvrHVPU/AMFTBvAtVgd06j9ueGr
         lPPv9z15Ggx/BSZn0Ax/Z3cUBwjUNOgaEGumFn16m+nzRwLBS8tYILKT27JEACvz9suc
         EbOA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:content-transfer-encoding:mime-version
         :references:in-reply-to:message-id:date:subject:cc:to:from;
        bh=zE8BhuPm0eRMGv/EBH/Qb7J9EL51XKggC7h6h5aU9Hg=;
        b=fKwxvSzMaLarkEJlOdBzp+jaE7m1IHvlQgrEVMsEGvgnbkHAI+mOshK8ZeN1NlT64g
         KhIgMCRJ577JYdy3p1mK8Wy3s9824iSSDrcGGfcTfIOQ7i8IUOCRXUeiww4ozvf0dM9T
         pnXGCaM5lro6KlPCRxi6QuVPD3WKl6dLbooO7ff80ec0/21y2ET6U18DXSN/shE4KWoY
         NdBCcBxqcIr+XbTQaaEoHqMcG5tAhGz6dxpMZB2MSRUdZLorQP7sOnTuWdTiRbfPVIYr
         Tzi1bG6W7JKUTF2PIINZo1oD39dn6DtXggY+qMtuH44ZBK0AXDrv2HDGL8RYTNNYYes/
         HPww==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id i5-v6si8912568plt.108.2018.11.13.11.59.05;
        Tue, 13 Nov 2018 11:59:20 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730896AbeKNF6G (ORCPT <rfc822;ecarlos1024@gmail.com>
        + 99 others); Wed, 14 Nov 2018 00:58:06 -0500
Received: from mail.binarylogic.ch ([88.198.23.72]:47886 "EHLO
        mail.binarylogic.ch" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725748AbeKNF6F (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 14 Nov 2018 00:58:05 -0500
Received: from fortknox.localdomain (unknown [192.168.122.1])
        by mail.binarylogic.ch (Postfix) with ESMTP id 0B4CEDF6FF;
        Tue, 13 Nov 2018 20:58:23 +0100 (CET)
From: =?UTF-8?q?Patrick=20St=C3=A4hlin?= <me@packi.ch>
To: linux-riscv@lists.infradead.org
Cc: linux-kernel@vger.kernel.org,
        =?UTF-8?q?Patrick=20St=C3=A4hlin?= <me@packi.ch>,
        Palmer Dabbelt <palmer@sifive.com>,
        Albert Ou <aou@eecs.berkeley.edu>,
        Oleg Nesterov <oleg@redhat.com>
Subject: [RFC/RFT 1/2] RISC-V: Implement ptrace regs and stack API
Date: Tue, 13 Nov 2018 20:58:03 +0100
Message-Id: <20181113195804.22825-2-me@packi.ch>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20181113195804.22825-1-me@packi.ch>
References: <20181113195804.22825-1-me@packi.ch>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwC3n0saLetbWBI6AA--.7119S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoWxtw45CFW3GFyDWw13WF4fuFg_yoW7KF4DpF
	s8CwnrtF4UGFy8uay3JFWDWr90y397X3y7Cw4fGa1fA340y3y5Kw1IkFy5Kr1xJryUGF12
	9FWrKr4DuFW5X3DanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUPab7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Ar0_tr1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Cr0_Gr1UM28EF7xvwVC2
	z280aVAFwI0_GcCE3s1l84ACjcxK6I8E87Iv6xkF7I0E14v26rxl6s0DM2AIxVAIcxkEcV
	Aq07x20xvEncxIr21l5I8CrVACY4xI64kE6c02F40Ex7xfMcIj6xIIjxv20xvE14v26r1j
	6r18McIj6I8E87Iv67AKxVWUJVW8JwAm72CE4IkC6x0Yz7v_Jr0_Gr1lF7xvr2IYc2Ij64
	vIr41l7I0Y6sxI4wCY1x0264kExVAvwVAq07x20xylc7Ca8VAvwVCFzxkY4VCF77xAMxkI
	ecxEwVCI4VWrMxkI7II2jI8vz4vEwIxGrwCYIxAIcVC0I7IYx2IY67AKxVW5JVW7JwCYIx
	AIcVC0I7IYx2IY6xkF7I0E14v26r4j6F4UMxvI42IY6I8E87Iv67AKxVW8Jr0_Cr1UMxvI
	42IY6I8E87Iv6xkF7I0E14v26r4UJVWxJr1l42xK82IYc2Ij64vIr41l42xK82IY64kExV
	AvwVAq07x20xyl4x8a6x804xWl4I8I3I0E4IkC6x0Yz7v_Jr0_Gr1lx2IqxVAqx4xG67AK
	xVWUJVWUGwC20s026x8GjcxK67AKxVWUGVWUWwC2zVAF1VAY17CE14v26r126r1DMIIYrx
	kI7VAKI48JMIIF0xvE42xK8VAvwI8IcIk0rVW8JVW3JbIYCTnIWIevJa73UjIFyTuYvjxU
	dY0PDUUUU

Needed for kprobes support. Copied and adapted from arm64 code.

Signed-off-by: Patrick St√§hlin <me@packi.ch>
---
 arch/riscv/Kconfig              |  1 +
 arch/riscv/include/asm/ptrace.h | 34 +++++++++++
 arch/riscv/kernel/ptrace.c      | 99 +++++++++++++++++++++++++++++++++
 3 files changed, 134 insertions(+)

diff --git a/arch/riscv/Kconfig b/arch/riscv/Kconfig
index 55da93f4e818..b157ac82d486 100644
--- a/arch/riscv/Kconfig
+++ b/arch/riscv/Kconfig
@@ -43,6 +43,7 @@ config RISCV
 	select RISCV_TIMER
 	select GENERIC_IRQ_MULTI_HANDLER
 	select ARCH_HAS_PTE_SPECIAL
+	select HAVE_REGS_AND_STACK_ACCESS_API
 
 config MMU
 	def_bool y
diff --git a/arch/riscv/include/asm/ptrace.h b/arch/riscv/include/asm/ptrace.h
index 2c5df945d43c..70c0ad08ac08 100644
--- a/arch/riscv/include/asm/ptrace.h
+++ b/arch/riscv/include/asm/ptrace.h
@@ -16,6 +16,7 @@
 
 #include <uapi/asm/ptrace.h>
 #include <asm/csr.h>
+#include <linux/compiler.h>
 
 #ifndef __ASSEMBLY__
 
@@ -68,6 +69,7 @@ struct pt_regs {
 
 #define user_mode(regs) (((regs)->sstatus & SR_SPP) == 0)
 
+#define MAX_REG_OFFSET offsetof(struct pt_regs, orig_a0)
 
 /* Helpers for working with the instruction pointer */
 #define GET_IP(regs) ((regs)->sepc)
@@ -99,6 +101,17 @@ static inline void user_stack_pointer_set(struct pt_regs *regs,
 	SET_USP(regs, val);
 }
 
+/* Valid only for Kernel mode traps. */
+static inline unsigned long kernel_stack_pointer(struct pt_regs *regs)
+{
+	return regs->sp;
+}
+
+static inline unsigned long regs_return_value(struct pt_regs *regs)
+{
+	return regs->a0;
+}
+
 /* Helpers for working with the frame pointer */
 #define GET_FP(regs) ((regs)->s0)
 #define SET_FP(regs, val) (GET_FP(regs) = (val))
@@ -113,6 +126,27 @@ static inline void frame_pointer_set(struct pt_regs *regs,
 	SET_FP(regs, val);
 }
 
+extern int regs_query_register_offset(const char *name);
+extern unsigned long regs_get_kernel_stack_nth(struct pt_regs *regs,
+					       unsigned int n);
+
+/**
+ * regs_get_register() - get register value from its offset
+ * @regs:	pt_regs from which register value is gotten
+ * @offset:	offset of the register.
+ *
+ * regs_get_register returns the value of a register whose offset from @regs.
+ * The @offset is the offset of the register in struct pt_regs.
+ * If @offset is bigger than MAX_REG_OFFSET, this returns 0.
+ */
+static inline unsigned long regs_get_register(struct pt_regs *regs,
+					      unsigned int offset)
+{
+	if (unlikely(offset > MAX_REG_OFFSET))
+		return 0;
+
+	return *(unsigned long *)((unsigned long)regs + offset);
+}
 #endif /* __ASSEMBLY__ */
 
 #endif /* _ASM_RISCV_PTRACE_H */
diff --git a/arch/riscv/kernel/ptrace.c b/arch/riscv/kernel/ptrace.c
index 60f1e02eed36..5b684e4ffc10 100644
--- a/arch/riscv/kernel/ptrace.c
+++ b/arch/riscv/kernel/ptrace.c
@@ -130,6 +130,105 @@ const struct user_regset_view *task_user_regset_view(struct task_struct *task)
 	return &riscv_user_native_view;
 }
 
+struct pt_regs_offset {
+	const char *name;
+	int offset;
+};
+
+#define REG_OFFSET_NAME(r) {.name = #r, .offset = offsetof(struct pt_regs, r)}
+#define REG_OFFSET_END {.name = NULL, .offset = 0}
+
+static const struct pt_regs_offset regoffset_table[] = {
+	REG_OFFSET_NAME(sepc),
+	REG_OFFSET_NAME(ra),
+	REG_OFFSET_NAME(sp),
+	REG_OFFSET_NAME(gp),
+	REG_OFFSET_NAME(tp),
+	REG_OFFSET_NAME(t0),
+	REG_OFFSET_NAME(t1),
+	REG_OFFSET_NAME(t2),
+	REG_OFFSET_NAME(s0),
+	REG_OFFSET_NAME(s1),
+	REG_OFFSET_NAME(a0),
+	REG_OFFSET_NAME(a1),
+	REG_OFFSET_NAME(a2),
+	REG_OFFSET_NAME(a3),
+	REG_OFFSET_NAME(a4),
+	REG_OFFSET_NAME(a5),
+	REG_OFFSET_NAME(a6),
+	REG_OFFSET_NAME(a7),
+	REG_OFFSET_NAME(s2),
+	REG_OFFSET_NAME(s3),
+	REG_OFFSET_NAME(s4),
+	REG_OFFSET_NAME(s5),
+	REG_OFFSET_NAME(s6),
+	REG_OFFSET_NAME(s7),
+	REG_OFFSET_NAME(s8),
+	REG_OFFSET_NAME(s9),
+	REG_OFFSET_NAME(s10),
+	REG_OFFSET_NAME(s11),
+	REG_OFFSET_NAME(t3),
+	REG_OFFSET_NAME(t4),
+	REG_OFFSET_NAME(t5),
+	REG_OFFSET_NAME(t6),
+	REG_OFFSET_NAME(sstatus),
+	REG_OFFSET_NAME(sbadaddr),
+	REG_OFFSET_NAME(scause),
+	REG_OFFSET_NAME(orig_a0),
+	REG_OFFSET_END,
+};
+
+/**
+ * regs_query_register_offset() - query register offset from its name
+ * @name:	the name of a register
+ *
+ * regs_query_register_offset() returns the offset of a register in struct
+ * pt_regs from its name. If the name is invalid, this returns -EINVAL;
+ */
+int regs_query_register_offset(const char *name)
+{
+	const struct pt_regs_offset *roff;
+
+	for (roff = regoffset_table; roff->name != NULL; roff++)
+		if (!strcmp(roff->name, name))
+			return roff->offset;
+	return -EINVAL;
+}
+
+/**
+ * regs_within_kernel_stack() - check the address in the stack
+ * @regs:      pt_regs which contains kernel stack pointer.
+ * @addr:      address which is checked.
+ *
+ * regs_within_kernel_stack() checks @addr is within the kernel stack page(s).
+ * If @addr is within the kernel stack, it returns true. If not, returns false.
+ */
+static bool regs_within_kernel_stack(struct pt_regs *regs, unsigned long addr)
+{
+	return (addr & ~(THREAD_SIZE - 1))  ==
+		(kernel_stack_pointer(regs) & ~(THREAD_SIZE - 1));
+}
+
+/**
+ * regs_get_kernel_stack_nth() - get Nth entry of the stack
+ * @regs:	pt_regs which contains kernel stack pointer.
+ * @n:		stack entry number.
+ *
+ * regs_get_kernel_stack_nth() returns @n th entry of the kernel stack which
+ * is specified by @regs. If the @n th entry is NOT in the kernel stack,
+ * this returns 0.
+ */
+unsigned long regs_get_kernel_stack_nth(struct pt_regs *regs, unsigned int n)
+{
+	unsigned long *addr = (unsigned long *)kernel_stack_pointer(regs);
+
+	addr += n;
+	if (regs_within_kernel_stack(regs, (unsigned long)addr))
+		return *addr;
+	else
+		return 0;
+}
+
 void ptrace_disable(struct task_struct *child)
 {
 	clear_tsk_thread_flag(child, TIF_SYSCALL_TRACE);
-- 
2.17.1
