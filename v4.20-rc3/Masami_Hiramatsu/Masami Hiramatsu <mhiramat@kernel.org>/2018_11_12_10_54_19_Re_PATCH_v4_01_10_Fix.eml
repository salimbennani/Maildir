Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 12 Nov 2018 07:36:48 -0000
Received: from icoremail.net (unknown [209.85.215.182])
	by mail-app2 (Coremail) with SMTP id by_KCgC3f0F36+hbfO95AQ--.36271S3;
	Mon, 12 Nov 2018 10:54:48 +0800 (CST)
Received: from mail-pg1-f182.google.com (unknown [209.85.215.182])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwCHaUV16+hbi1kvAA--.7546S3;
	Mon, 12 Nov 2018 10:54:45 +0800 (CST)
Received: by mail-pg1-f182.google.com with SMTP id 70so3356300pgh.8
        for <xuliker@zju.edu.cn>; Sun, 11 Nov 2018 18:54:45 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:date:from:to:cc
         :subject:message-id:in-reply-to:references:mime-version
         :content-transfer-encoding:sender:precedence:list-id;
        bh=iUPTeUlkDZopWO147HbzQEtm1dPP6+ks/t7K/3YKNA0=;
        b=CbxPdLyuXlRX+s8+Ahb9WcLQJ/ALWflHo5kRzNHFCCK8oEugi8P3RsJJV03LhQgTyE
         y4NSAMBNyz6qs9KnGlQ+M4UyXH2U/mJPBmrw9zAc1D1dt/eKAod8oUzn7F8HHs1K7KUm
         VG9v52qDSiRKV9G3PHz4RUNlHMLDHbMNJTqqWWYcil41R1ToFtfZwLhlmk+TH0loKKhg
         ubsLnbr2R+6BjDhS80c8KBZ+vbGzKPfe8DKWIDXzuxcr9yBci2jC8pocVwgyVRdtfNg7
         44lLIH0p9S6n16o9WvrMM3c8He5OkP17LVCkoX5v5zeh3G1xp16pW8zi0GId2m9yJFIq
         Q/qA==
X-Gm-Message-State: AGRZ1gIlcYw42NemkElkC4d7IcO8wm36l1BNiMXNxSNZcctTsmdr4S9R
	FL3AzD+/uMuV262vNUEuMDKxvaUiPjY8sQRNl/rO8f2nQNhawBfVmg==
X-Received: by 2002:a62:22c3:: with SMTP id p64-v6mr18910358pfj.9.1541991285319;
        Sun, 11 Nov 2018 18:54:45 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp2699168pjt;
        Sun, 11 Nov 2018 18:54:44 -0800 (PST)
X-Google-Smtp-Source: AJdET5cD4nfdEfaIRmP1sscTNSrdi1V5G9Pn9slYQu+f98CAZseioqa6VYb+OV/eME4pWqtKYCXv
X-Received: by 2002:a17:902:a5cc:: with SMTP id t12-v6mr18269598plq.298.1541991284340;
        Sun, 11 Nov 2018 18:54:44 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1541991284; cv=none;
        d=google.com; s=arc-20160816;
        b=ZbTKDzfLPdV00fr6wpiBZ3dJBJ8gpFd7X1wMFey2f38ac8va2LKkf4q0zQ0GVTYnvQ
         LSGuyrK53OtFF5vPjNp0EjDOUpPhTPij9yYjXg8M4TRfVacI0mqpARrAWwunmANACZX8
         um0QEI1/Ohuxzsd+wONtyjcW8gDAQKMnOKto9srGehUkF+8nUv4yWbL0yXJav0IQp+l/
         OUlWFqXr4bdndjyM4xCJBMB9nyJehe0Vf+N8+25P+GVnVpPQif1k/11o+5JFaC4jukar
         fi+oKVKVH9RXiHQBF6d6BrpmdQPnmdyvq1OzH5LjS+owTofDGgdDn1DgvJcKG+lT0KjW
         lwjQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:content-transfer-encoding:mime-version
         :references:in-reply-to:message-id:subject:cc:to:from:date
         :dkim-signature;
        bh=iUPTeUlkDZopWO147HbzQEtm1dPP6+ks/t7K/3YKNA0=;
        b=JPnxiWxSDxjm+B8qx0nwFllO1S49Rj6SBb4fmNTwB38ETo6xblpmykF7SPejAc18uZ
         +Wiv0+w0iiVpTxXZwCj3ieWtvmkkUxQ4wWQF8RQkGiCYAy88F6+jmqdYIwIcjCRXjzRd
         YTk9EAAanR64rD+wCuW1xjXiIjhfVHnpdvb6NTJgnP3+Nw6rHpMvX5J14zTJJ4E54H1u
         c17CsD1MKbqiBNeJtP9eVU6y682sywz4gmgsEMawZYqle0zZTQpot3mfZrLOzuzu6XRM
         7Mcxdt1mmboRXQCPtkdef551jeA5OQibe6/Kl9JAcLp50egw+PwKb2qBbb/5AUOUAvlp
         U4bQ==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@kernel.org header.s=default header.b="YGPdZQV/";
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;
       dmarc=pass (p=NONE sp=NONE dis=NONE) header.from=kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id n9-v6si18105983pfh.96.2018.11.11.18.54.29;
        Sun, 11 Nov 2018 18:54:44 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730314AbeKLMp1 (ORCPT <rfc822;changseok.bae@gmail.com>
        + 99 others); Mon, 12 Nov 2018 07:45:27 -0500
Received: from mail.kernel.org ([198.145.29.99]:50214 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1729884AbeKLMp1 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 12 Nov 2018 07:45:27 -0500
Received: from devnote (NE2965lan1.rev.em-net.ne.jp [210.141.244.193])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 6B3E9208A3;
        Mon, 12 Nov 2018 02:54:21 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1541991263;
        bh=E4po7NNr+yh8akWTpaMrcpEQ2F1dZwvZK8uJLkGbD+w=;
        h=Date:From:To:Cc:Subject:In-Reply-To:References:From;
        b=YGPdZQV/6/QhsEW6vkZA0skX73WOWMFH94M+W4a6jzzOXqQE5zDMZjO7LQ/cg/Q8q
         8jqxD2KmiFjEPR5inPPmNgd+8PgTN+tsRPFa4twQuJqTN1AyslgdqAr49h/W0gnL5K
         Qgr3AL0ZcIUdn4HxjSJHKvG5vjTmQ4gJqHBkCz3U=
Date: Mon, 12 Nov 2018 11:54:19 +0900
From: Masami Hiramatsu <mhiramat@kernel.org>
To: Nadav Amit <namit@vmware.com>
Cc: Ingo Molnar <mingo@redhat.com>, <linux-kernel@vger.kernel.org>,
        <x86@kernel.org>, "H. Peter Anvin" <hpa@zytor.com>,
        Thomas Gleixner <tglx@linutronix.de>,
        Borislav Petkov <bp@alien8.de>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        Jiri Kosina <jkosina@suse.cz>,
        Andy Lutomirski <luto@kernel.org>,
        Kees Cook <keescook@chromium.org>,
        Dave Hansen <dave.hansen@intel.com>,
        Masami Hiramatsu <mhiramat@kernel.org>
Subject: Re: [PATCH v4 01/10] Fix
 "x86/alternatives: Lockdep-enforce text_mutex in text_poke*()"
Message-Id: <20181112115419.3e86d8a522b6c7457c036dc9@kernel.org>
In-Reply-To: <20181110231732.15060-2-namit@vmware.com>
References: <20181110231732.15060-1-namit@vmware.com>
        <20181110231732.15060-2-namit@vmware.com>
X-Mailer: Sylpheed 3.5.0 (GTK+ 2.24.30; x86_64-pc-linux-gnu)
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwCHaUV16+hbi1kvAA--.7546S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoW3WF17AF4fJr1xuFWUArykAFb_yoW3WFyfpF
	ZrKFn5JFZ8GFyxZwnrJa1YvFyaywnagrWUG3yDJa4av3Wagryqqr1kCw1Yvwn3KrW0gw4Y
	yrW5KasIgw1jyFDanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUUjbIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUPIb7Iv0xC_KF4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Ar0_tr1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Cr0_Gr1UM28EF7xvwVC2
	z280aVAFwI0_GcCE3s1l84ACjcxK6I8E87Iv6xkF7I0E14v26rxl6s0DM2AIxVAIcxkEcV
	Aq07x20xvEncxIr21l5I8CrVACY4xI64kE6c02F40Ex7xfMcIj6xIIjxv20xvE14v26r1j
	6r18McIj6I8E87Iv67AKxVWxJVW8Jr1lOx8S6xCaFVCjc4AY6r1j6r4UM4x0Y48IcxkI7V
	AKI48JMx02cVCv0xWlc7CjxVAKzI0EY4vE52x082I5MxkFs20EY4vE44CYbxCE4x80FwCY
	02Avz4vEIxC_Gr1lc2IjII80xcxEwVAKI48JMxvI42IY6xIIjxv20xvE14v26r1I6r4UMx
	vI42IY6xIIjxv20xvEc7CjxVAFwI0_Jr0_Gr1lcIIF0xvEx4A2jsIE14v26rxl6s0DMxvI
	42IY6I8E87Iv6xkF7I0E14v26rxl6s0DMxAIw28IcxkI7VAKI48JMxAIw28IcVAKzI0EY4
	vE52x082I5MxCjnVCjjxCrMxC20s026xCaFVCjc4AY6r1j6r4UMI8I3I0E5I8CrVAFwI0_
	Jr0_Jr4lx2IqxVCjr7xvwVAFwI0_JrI_JrWlx4CE17CEb7AF67AKxVWUtVW8ZwCIc40Y0x
	0EwIxGrwCI42IY6xAIw20EY4v20xvaj40_Zr0_Wr1UYxBIdaVFxhVjvjDU0xZFpf9x07b0
	xhdUUUUU=

On Sat, 10 Nov 2018 15:17:23 -0800
Nadav Amit <namit@vmware.com> wrote:

> text_mutex is currently expected to be held before text_poke() is
> called, but we kgdb does not take the mutex, and instead *supposedly*
> ensures the lock is not taken and will not be acquired by any other core
> while text_poke() is running.
> 
> The reason for the "supposedly" comment is that it is not entirely clear
> that this would be the case if gdb_do_roundup is zero.
> 
> This patch creates two wrapper functions, text_poke() and
> text_poke_kgdb() which do or do not run the lockdep assertion
> respectively.
> 
> While we are at it, change the return code of text_poke() to something
> meaningful. One day, callers might actually respect it and the existing
> BUG_ON() when patching fails could be removed. For kgdb, the return
> value can actually be used.

Hm, this looks reasonable and good to me.

Reviewed-by: Masami Hiramatsu <mhiramat@kernel.org>

Thank you!

> 
> Cc: Jiri Kosina <jkosina@suse.cz>
> Cc: Andy Lutomirski <luto@kernel.org>
> Cc: Kees Cook <keescook@chromium.org>
> Cc: Dave Hansen <dave.hansen@intel.com>
> Cc: Masami Hiramatsu <mhiramat@kernel.org>
> Fixes: 9222f606506c ("x86/alternatives: Lockdep-enforce text_mutex in text_poke*()")
> Suggested-by: Peter Zijlstra <peterz@infradead.org>
> Signed-off-by: Nadav Amit <namit@vmware.com>
> ---
>  arch/x86/include/asm/text-patching.h |  3 +-
>  arch/x86/kernel/alternative.c        | 72 +++++++++++++++++++++-------
>  arch/x86/kernel/kgdb.c               | 15 ++++--
>  3 files changed, 66 insertions(+), 24 deletions(-)
> 
> diff --git a/arch/x86/include/asm/text-patching.h b/arch/x86/include/asm/text-patching.h
> index e85ff65c43c3..5a2600370763 100644
> --- a/arch/x86/include/asm/text-patching.h
> +++ b/arch/x86/include/asm/text-patching.h
> @@ -34,7 +34,8 @@ extern void *text_poke_early(void *addr, const void *opcode, size_t len);
>   * On the local CPU you need to be protected again NMI or MCE handlers seeing an
>   * inconsistent instruction while you patch.
>   */
> -extern void *text_poke(void *addr, const void *opcode, size_t len);
> +extern int text_poke(void *addr, const void *opcode, size_t len);
> +extern int text_poke_kgdb(void *addr, const void *opcode, size_t len);
>  extern int poke_int3_handler(struct pt_regs *regs);
>  extern void *text_poke_bp(void *addr, const void *opcode, size_t len, void *handler);
>  extern int after_bootmem;
> diff --git a/arch/x86/kernel/alternative.c b/arch/x86/kernel/alternative.c
> index ebeac487a20c..ebe9210dc92e 100644
> --- a/arch/x86/kernel/alternative.c
> +++ b/arch/x86/kernel/alternative.c
> @@ -678,23 +678,12 @@ void *__init_or_module text_poke_early(void *addr, const void *opcode,
>  	return addr;
>  }
>  
> -/**
> - * text_poke - Update instructions on a live kernel
> - * @addr: address to modify
> - * @opcode: source of the copy
> - * @len: length to copy
> - *
> - * Only atomic text poke/set should be allowed when not doing early patching.
> - * It means the size must be writable atomically and the address must be aligned
> - * in a way that permits an atomic write. It also makes sure we fit on a single
> - * page.
> - */
> -void *text_poke(void *addr, const void *opcode, size_t len)
> +static int __text_poke(void *addr, const void *opcode, size_t len)
>  {
>  	unsigned long flags;
>  	char *vaddr;
>  	struct page *pages[2];
> -	int i;
> +	int i, r = 0;
>  
>  	/*
>  	 * While boot memory allocator is runnig we cannot use struct
> @@ -702,8 +691,6 @@ void *text_poke(void *addr, const void *opcode, size_t len)
>  	 */
>  	BUG_ON(!after_bootmem);
>  
> -	lockdep_assert_held(&text_mutex);
> -
>  	if (!core_kernel_text((unsigned long)addr)) {
>  		pages[0] = vmalloc_to_page(addr);
>  		pages[1] = vmalloc_to_page(addr + PAGE_SIZE);
> @@ -712,7 +699,8 @@ void *text_poke(void *addr, const void *opcode, size_t len)
>  		WARN_ON(!PageReserved(pages[0]));
>  		pages[1] = virt_to_page(addr + PAGE_SIZE);
>  	}
> -	BUG_ON(!pages[0]);
> +	if (!pages[0])
> +		return -EFAULT;
>  	local_irq_save(flags);
>  	set_fixmap(FIX_TEXT_POKE0, page_to_phys(pages[0]));
>  	if (pages[1])
> @@ -727,9 +715,57 @@ void *text_poke(void *addr, const void *opcode, size_t len)
>  	/* Could also do a CLFLUSH here to speed up CPU recovery; but
>  	   that causes hangs on some VIA CPUs. */
>  	for (i = 0; i < len; i++)
> -		BUG_ON(((char *)addr)[i] != ((char *)opcode)[i]);
> +		if (((char *)addr)[i] != ((char *)opcode)[i])
> +			r = -EFAULT;
>  	local_irq_restore(flags);
> -	return addr;
> +	return r;
> +}
> +
> +/**
> + * text_poke - Update instructions on a live kernel
> + * @addr: address to modify
> + * @opcode: source of the copy
> + * @len: length to copy
> + *
> + * Only atomic text poke/set should be allowed when not doing early patching.
> + * It means the size must be writable atomically and the address must be aligned
> + * in a way that permits an atomic write. It also makes sure we fit on a single
> + * page.
> + */
> +int text_poke(void *addr, const void *opcode, size_t len)
> +{
> +	int r;
> +
> +	lockdep_assert_held(&text_mutex);
> +
> +	r = __text_poke(addr, opcode, len);
> +
> +	/*
> +	 * TODO: change the callers to consider the return value and remove this
> +	 *       historical assertion.
> +	 */
> +	BUG_ON(r);
> +
> +	return r;
> +}
> +
> +/**
> + * text_poke_kgdb - Update instructions on a live kernel by kgdb
> + * @addr: address to modify
> + * @opcode: source of the copy
> + * @len: length to copy
> + *
> + * Only atomic text poke/set should be allowed when not doing early patching.
> + * It means the size must be writable atomically and the address must be aligned
> + * in a way that permits an atomic write. It also makes sure we fit on a single
> + * page.
> + *
> + * Context: should only be used by kgdb, which ensures no other core is running,
> + *	    despite the fact it does not hold the text_mutex.
> + */
> +int text_poke_kgdb(void *addr, const void *opcode, size_t len)
> +{
> +	return __text_poke(addr, opcode, len);
>  }
>  
>  static void do_sync_core(void *info)
> diff --git a/arch/x86/kernel/kgdb.c b/arch/x86/kernel/kgdb.c
> index 8e36f249646e..8091b2e381d4 100644
> --- a/arch/x86/kernel/kgdb.c
> +++ b/arch/x86/kernel/kgdb.c
> @@ -763,13 +763,15 @@ int kgdb_arch_set_breakpoint(struct kgdb_bkpt *bpt)
>  	if (!err)
>  		return err;
>  	/*
> -	 * It is safe to call text_poke() because normal kernel execution
> +	 * It is safe to call text_poke_kgdb() because normal kernel execution
>  	 * is stopped on all cores, so long as the text_mutex is not locked.
>  	 */
>  	if (mutex_is_locked(&text_mutex))
>  		return -EBUSY;
> -	text_poke((void *)bpt->bpt_addr, arch_kgdb_ops.gdb_bpt_instr,
> -		  BREAK_INSTR_SIZE);
> +	err = text_poke_kgdb((void *)bpt->bpt_addr, arch_kgdb_ops.gdb_bpt_instr,
> +			     BREAK_INSTR_SIZE);
> +	if (err)
> +		return err;
>  	err = probe_kernel_read(opc, (char *)bpt->bpt_addr, BREAK_INSTR_SIZE);
>  	if (err)
>  		return err;
> @@ -788,12 +790,15 @@ int kgdb_arch_remove_breakpoint(struct kgdb_bkpt *bpt)
>  	if (bpt->type != BP_POKE_BREAKPOINT)
>  		goto knl_write;
>  	/*
> -	 * It is safe to call text_poke() because normal kernel execution
> +	 * It is safe to call text_poke_kgdb() because normal kernel execution
>  	 * is stopped on all cores, so long as the text_mutex is not locked.
>  	 */
>  	if (mutex_is_locked(&text_mutex))
>  		goto knl_write;
> -	text_poke((void *)bpt->bpt_addr, bpt->saved_instr, BREAK_INSTR_SIZE);
> +	err = text_poke_kgdb((void *)bpt->bpt_addr, bpt->saved_instr,
> +			     BREAK_INSTR_SIZE);
> +	if (err)
> +		return err;
>  	err = probe_kernel_read(opc, (char *)bpt->bpt_addr, BREAK_INSTR_SIZE);
>  	if (err || memcmp(opc, bpt->saved_instr, BREAK_INSTR_SIZE))
>  		goto knl_write;
> -- 
> 2.17.1
> 


-- 
Masami Hiramatsu <mhiramat@kernel.org>
