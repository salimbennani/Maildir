Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (61.164.42.155:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 14 Nov 2018 14:45:16 -0000
Received: from icoremail.net (unknown [209.85.210.170])
	by mail-app2 (Coremail) with SMTP id by_KCgDXv2Ju8+tbfDOPAQ--.43378S3;
	Wed, 14 Nov 2018 18:05:35 +0800 (CST)
Received: from mail-pf1-f170.google.com (unknown [209.85.210.170])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwCHb0ts8+tbY_A9AA--.3374S3;
	Wed, 14 Nov 2018 18:05:32 +0800 (CST)
Received: by mail-pf1-f170.google.com with SMTP id e22-v6so7657429pfn.8
        for <xuliker@zju.edu.cn>; Wed, 14 Nov 2018 02:05:32 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-original-authentication-results:x-gm-message-state:delivered-to
         :subject:to:cc:references:from:message-id:date:user-agent
         :mime-version:in-reply-to:content-language:content-transfer-encoding
         :sender:precedence:list-id;
        bh=rgLUU5bx/02jdTLJXDFImjOd5Ja0/wD6MvEfYCvC1uE=;
        b=M4pF+eUqgEh3cK7LTjF45aST7kzEtpnppvHTfJscU559xvtR1f6VRS3fzoZ3CaSdu8
         gAjsaNLy2vidihGka1LMoPUA5gtiOiVeywmbr9ZcesHYncUo1/24quS1h1ec7hR/+D4w
         gzFII9Bbw/0DpmrTaAclcwOjNjJ/Ws2KwZSnts5ipEuaGNFqP4zSoW+RikddLOiCJ96w
         Miq1yGy/XZimhvVCXdnjWlj8XMhDre7iAKFHk3+G3amvwwBsMhWYA65F5R+/0YPfLLVx
         qJwGV+IwumR06xP4abOLYLJYObUJxuqnqjSJ9dKP8ZzM5lT5BgSMEUapj13YEqKiADOH
         Q1Ag==
X-Original-Authentication-Results: mx.google.com;       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
X-Gm-Message-State: AGRZ1gJpgclgTSbN6ly8uVAAvorFueUm+bf5GPEJgtxHekV6eudBlfgX
	owJI1HcVeDzbdV0PenoZE81UNBWiC3FoPSJUOjEp7agN9U9IUcN+4Q==
X-Received: by 2002:a62:ce8e:: with SMTP id y136-v6mr1275282pfg.201.1542189932250;
        Wed, 14 Nov 2018 02:05:32 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp5603746pjt;
        Wed, 14 Nov 2018 02:05:30 -0800 (PST)
X-Google-Smtp-Source: AJdET5dm5B+q/i/yz03xer1G8bYimLc+7D8fuzwt8K3eWLjh40uNzWxMiXl/Q4AgM/Sw80gMT1wS
X-Received: by 2002:a63:1157:: with SMTP id 23mr1142029pgr.245.1542189930847;
        Wed, 14 Nov 2018 02:05:30 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542189930; cv=none;
        d=google.com; s=arc-20160816;
        b=Rt2w6xA062OsniPHjKZEtqjgBavlk9ykkVV4+cZfqymqCN89SnCyUBBvHLW8Ecb4+r
         hufEtjMsTWBGTcfZRH4J+m+NevnYPGwJwGFJvq6rqVQa7Un6mIQfNyT4Gm9dN2dVq6tv
         dZw1iPG5zYDQhFJ258oZqmeXcSKgSSjLn1ArK7wGwwbzj52WFSIV3U9iPX5qNQiCC5RH
         eWlsz/NAXtSPLVESE0JExNBYrc2tMwp0lr4pmPjHMEcGklgq4RNa7CAFZaomoIm1DkWL
         FSlqyvj33wl5DqyitaZJVh3PSF8Uz7yFsKjP1v8kONpvMZAsGxMaFkaOSRPIALfK3vHn
         xSeg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:content-transfer-encoding
         :content-language:in-reply-to:mime-version:user-agent:date
         :message-id:from:references:cc:to:subject;
        bh=rgLUU5bx/02jdTLJXDFImjOd5Ja0/wD6MvEfYCvC1uE=;
        b=cTV63x7qay1pf+KQlDEXBPt02DttN6tRb9n8xd9d1UsbxgqJtYwQVTTYMGm4pN62Q9
         mhvWMfMjczUDUNEOWvRagl1+VRatx6MIIt24GELHaOxHk0qxTs3gvQpzDC1ClV4IYNdT
         clwj5jPeH1qNpwBvFs4YqKziGBZ1acHQtoYHFnRBbEnp7CT0JaWfmv8gl0R0yGDEgX8Y
         z4OCVMJylXLs3w2hFSUOX3yn0tWNcHzwaMgn6oOaKqafvQJ6wwHSssMCHK3IyVNgihmk
         XB1M5H3eFJ4sWFQWUP5uTE/lkgTmct1AFV8SZeNz6c1Ujvy0y7Ys4cnaseQA4xT2yY7Y
         bFTg==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id e27si7696417pgm.527.2018.11.14.02.05.16;
        Wed, 14 Nov 2018 02:05:30 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1732822AbeKNUHA (ORCPT <rfc822;docz2a@gmail.com> + 99 others);
        Wed, 14 Nov 2018 15:07:00 -0500
Received: from srv-hp10-72.netsons.net ([94.141.22.72]:58938 "EHLO
        srv-hp10-72.netsons.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1732765AbeKNUG7 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 14 Nov 2018 15:06:59 -0500
Received: from [109.168.11.45] (port=41864 helo=[192.168.101.125])
        by srv-hp10.netsons.net with esmtpsa (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
        (Exim 4.91)
        (envelope-from <luca@lucaceresoli.net>)
        id 1gMs1p-009JRL-M8; Wed, 14 Nov 2018 11:04:09 +0100
Subject: Re: [PATCH v4 1/4] dt-bindings: media: i2c: Add bindings for Maxim
 Integrated MAX9286
To: kieran.bingham@ideasonboard.com, linux-renesas-soc@vger.kernel.org,
        linux-media@vger.kernel.org, devicetree@vger.kernel.org,
        sakari.ailus@iki.fi
Cc: =?UTF-8?Q?Niklas_S=c3=b6derlund?= <niklas.soderlund@ragnatech.se>,
        Jacopo Mondi <jacopo@jmondi.org>,
        Laurent Pinchart <laurent.pinchart@ideasonboard.com>,
        Kieran Bingham <kieran.bingham+renesas@ideasonboard.com>,
        linux-kernel@vger.kernel.org,
        Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>,
        Jacopo Mondi <jacopo+renesas@jmondi.org>
References: <20181102154723.23662-1-kieran.bingham@ideasonboard.com>
 <20181102154723.23662-2-kieran.bingham@ideasonboard.com>
 <b3ef6780-a1a7-e86c-0dba-916d9398c1ef@lucaceresoli.net>
 <66239f2a-0159-8120-6dbb-8af0ce8b132a@ideasonboard.com>
From: Luca Ceresoli <luca@lucaceresoli.net>
Message-ID: <d699e133-1459-7ce8-18e4-47bad5f66314@lucaceresoli.net>
Date: Wed, 14 Nov 2018 11:04:09 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.2.1
MIME-Version: 1.0
In-Reply-To: <66239f2a-0159-8120-6dbb-8af0ce8b132a@ideasonboard.com>
Content-Type: text/plain; charset=utf-8
Content-Language: en-US
Content-Transfer-Encoding: 7bit
X-AntiAbuse: This header was added to track abuse, please include it with any abuse report
X-AntiAbuse: Primary Hostname - srv-hp10.netsons.net
X-AntiAbuse: Original Domain - vger.kernel.org
X-AntiAbuse: Originator/Caller UID/GID - [47 12] / [47 12]
X-AntiAbuse: Sender Address Domain - lucaceresoli.net
X-Get-Message-Sender-Via: srv-hp10.netsons.net: authenticated_id: luca@lucaceresoli.net
X-Authenticated-Sender: srv-hp10.netsons.net: luca@lucaceresoli.net
X-Source: 
X-Source-Args: 
X-Source-Dir: 
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwCHb0ts8+tbY_A9AA--.3374S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoW3ZF1DZr13WFWfAFW8ZF43KFg_yoWkuw1Upr
	ZxJFWftr4DXr1xuanFqr18Xw1Y9Fn7Ja1UXF13AryrAr909r9ayFyakw1ruFyUJrWkXa4a
	qr4UAFsrZrnYvaDanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUmIb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Xr0_Ar1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1l84ACjcxK6I8E
	87Iv67AKxVW0oVCq3wA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_GcCE3s1le2I262IYc4CY6c
	8Ij28IcVAaY2xG8wAqx4xG64xvF2IEw4CE5I8CrVC2j2WlYx0E2Ix0cI8IcVAFwI0_Jr0_
	Jr4lYx0Ex4A2jsIE14v26r4j6F4UMcvjeVCFs4IE7xkEbVWUJVW8JwACjcxG0xvEwIxGrw
	CjxxvEa2IrMxk0xIA0c2IEe2xFo4CEbIxvr21lc7CjxVAKzI0EY4vE52x082I5MxkFs20E
	Y4vE44CYbxCE4x80FwCY02Avz4vEIxC_Gw1lc2IjII80xcxEwVAKI48JMxvI42IY6xIIjx
	v20xvE14v26r4j6ryUMxvI42IY6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1lcIIF0xvEx4A2
	jsIE14v26F4UJVW0owCYIxAIcVC2z280aVCY1x0267AKxVWxJr0_GcWl42xK82IYc2Ij64
	vIr41l42xK82IY64kExVAvwVAq07x20xyl4x8a6x804xWl4I8I3I0E4IkC6x0Yz7v_Jr0_
	Gr1lx2IqxVAqx4xG67AKxVWUJVWUGwC20s026x8GjcxK67AKxVWUGVWUWwC2zVAF1VAY17
	CE14v26r1q6r43MIIYrxkI7VAKI48JMIIF0xvE42xK8VAvwI8IcIk0rVWUCVW8JbIYCTnI
	WIevJa73UjIFyTuYvjxUQEdyDUUUU

Hi Kieran,

On 14/11/18 00:12, Kieran Bingham wrote:
> Hi Luca,
> 
> On 13/11/2018 14:42, Luca Ceresoli wrote:
>> Hi Kieran, All,
>>
>> sorry for joining this late... See below my considerations.
> 
> I'd say you're on time - not late,
> 
> Thanks for joining :)
> 
>>
>> On 02/11/18 16:47, Kieran Bingham wrote:
>>> From: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
>>>
>>> The MAX9286 deserializes video data received on up to 4 Gigabit
>>> Multimedia Serial Links (GMSL) and outputs them on a CSI-2 port using up
>>> to 4 data lanes.
>>>
>>> Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
>>> Signed-off-by: Jacopo Mondi <jacopo+renesas@jmondi.org>
>>> Signed-off-by: Kieran Bingham <kieran.bingham+renesas@ideasonboard.com>
>>>
>>> ---
>>> v3:
>>>  - Update binding descriptions
>>>
>>> v4:
>>>  - Define the use of a CSI2 D-PHY
>>>  - Rename pwdn-gpios to enable-gpios (with inverted polarity)
>>>  - Remove clock-lanes mapping support
>>>  - rewrap text blocks
>>>  - Fix typos
>>> ---
>>>  .../bindings/media/i2c/maxim,max9286.txt      | 182 ++++++++++++++++++
>>>  1 file changed, 182 insertions(+)
>>>  create mode 100644 Documentation/devicetree/bindings/media/i2c/maxim,max9286.txt
>>>
>>> diff --git a/Documentation/devicetree/bindings/media/i2c/maxim,max9286.txt b/Documentation/devicetree/bindings/media/i2c/maxim,max9286.txt
>>> new file mode 100644
>>> index 000000000000..672f6a4d417d
>>> --- /dev/null
>>> +++ b/Documentation/devicetree/bindings/media/i2c/maxim,max9286.txt
>>> @@ -0,0 +1,182 @@
>>> +Maxim Integrated Quad GMSL Deserializer
>>> +---------------------------------------
>>> +
>>> +The MAX9286 deserializer receives video data on up to 4 Gigabit Multimedia
>>> +Serial Links (GMSL) and outputs them on a CSI-2 D-PHY port using up to 4 data
>>> +lanes.
>>> +
>>> +In addition to video data, the GMSL links carry a bidirectional control channel
>>> +that encapsulates I2C messages. The MAX9286 forwards all I2C traffic not
>>> +addressed to itself to the other side of the links, where a GMSL serializer
>>> +will output it on a local I2C bus. In the other direction all I2C traffic
>>> +received over GMSL by the MAX9286 is output on the local I2C bus.
>>> +
>>> +Required Properties:
>>> +
>>> +- compatible: Shall be "maxim,max9286"
>>> +- reg: I2C device address
>>> +
>>> +Optional Properties:
>>> +
>>> +- poc-supply: Regulator providing Power over Coax to the cameras
>>> +- enable-gpios: GPIO connected to the #PWDN pin with inverted polarity
>>> +
>>> +Required endpoint nodes:
>>> +-----------------------
>>> +
>>> +The connections to the MAX9286 GMSL and its endpoint nodes are modeled using
>>> +the OF graph bindings in accordance with the video interface bindings defined
>>> +in Documentation/devicetree/bindings/media/video-interfaces.txt.
>>> +
>>> +The following table lists the port number corresponding to each device port.
>>> +
>>> +        Port            Description
>>> +        ----------------------------------------
>>> +        Port 0          GMSL Input 0
>>> +        Port 1          GMSL Input 1
>>> +        Port 2          GMSL Input 2
>>> +        Port 3          GMSL Input 3
>>> +        Port 4          CSI-2 Output
>>> +
>>> +Optional Endpoint Properties for GMSL Input Ports (Port [0-3]):
>>> +
>>> +- remote-endpoint: phandle to the remote GMSL source endpoint subnode in the
>>> +  remote node port.
>>> +
>>> +Required Endpoint Properties for CSI-2 Output Port (Port 4):
>>> +
>>> +- remote-endpoint: phandle to the remote CSI-2 sink endpoint node.
>>> +- data-lanes: array of physical CSI-2 data lane indexes.
>>> +
>>> +Required i2c-mux nodes:
>>> +----------------------
>>> +
>>> +Each GMSL link is modeled as a child bus of an i2c bus multiplexer/switch, in
>>> +accordance with bindings described in
>>> +Documentation/devicetree/bindings/i2c/i2c-mux.txt. The serializer device on the
>>> +remote end of the GMSL link shall be modelled as a child node of the
>>> +corresponding I2C bus.
>>> +
>>> +Required i2c child bus properties:
>>> +- all properties described as required i2c child bus nodes properties in
>>> +  Documentation/devicetree/bindings/i2c/i2c-mux.txt.
>>> +
>>> +Example:
>>> +-------
>>> +
>>> +	gmsl-deserializer@2c {
>>> +		compatible = "maxim,max9286";Not at all late - Just on time 
>>> +		reg = <0x2c>;
>>> +		poc-supply = <&camera_poc_12v>;
>>> +		enable-gpios = <&gpio 13 GPIO_ACTIVE_LOW>;
>>> +
>>> +		#address-cells = <1>;
>>> +		#size-cells = <0>;
>>> +
>>> +		ports {
>>> +			#address-cells = <1>;
>>> +			#size-cells = <0>;
>>> +
>>> +			port@0 {
>>> +				reg = <0>;
>>> +				max9286_in0: endpoint {
>>> +					remote-endpoint = <&rdacm20_out0>;
>>> +				};
>>> +			};
>>> +
>>> +			port@1 {
>>> +				reg = <1>;
>>> +				max9286_in1: endpoint {
>>> +					remote-endpoint = <&rdacm20_out1>;
>>> +				};
>>> +			};
>>> +
>>> +			port@2 {
>>> +				reg = <2>;
>>> +				max9286_in2: endpoint {
>>> +					remote-endpoint = <&rdacm20_out2>;
>>> +				};
>>> +			};
>>> +
>>> +			port@3 {
>>> +				reg = <3>;
>>> +				max9286_in3: endpoint {
>>> +					remote-endpoint = <&rdacm20_out3>;
>>> +				};
>>> +			};
>>> +
>>> +			port@4 {
>>> +				reg = <4>;
>>> +				max9286_out: endpoint {
>>> +					data-lanes = <1 2 3 4>;
>>> +					remote-endpoint = <&csi40_in>;
>>> +				};
>>> +			};
>>> +		};
>>> +
>>> +		i2c@0 {
>>> +			#address-cells = <1>;
>>> +			#size-cells = <0>;
>>> +			reg = <0>;
>>> +
>>> +			camera@51 {
>>> +				compatible = "imi,rdacm20";
>>> +				reg = <0x51 0x61>;
>>
>> I find this kind of address mapping is the weak point in this patchset.
>>
>> The ser-deser chipset splits the world in "local" and "remote" side. The
>> camera node belongs to the remote side, but the 0x51 and 0x61 addresses
>> belong to the local side.
> 
> Well, in our use case - in fact the camera has a set of fixed addresses
> (0x30,0x40,0x50) for each camera - and these are the addresses we are
> requesting the camera to be updated to. Once the camera is communicated
> with - the first step is to reprogram the device to respond to the
> addresses specified here.

Yes, the way it works is clear.

>> Think about supporting N different main boards
>> and M remote boards. 0x51 might be available on some main boards but not
>> all. IMO under the camera@51 (even the i2c@0) node there should be only
>> remote hardware description. To support the N*M possible combinations,
>> there should be:
> 
> Of course - well in fact all of our I2C addresses across our two max9286
> instances, and 8 camera devices share the same bus 'address space'.
> 
> It's crucial to provide this address on a per board level, which is why
> it is specified in the DT.
> 
> I wonder if perhaps it was a mistake to include the camera description
> in this part of the example, as it's not related to the max9286
> specifically.

Interesting point. In my case I'm thinking DT overlays, they help me a
lot in finding a proper generalization. With some generalization, camera
modules [the same would happen with display modules] are similar to
beaglebone capes or rpi hats:

 1. there can be different camera modules being designed over time
 2. there can be different base boards being designed over time
 3. there is a standard interconnection between them (mechanical,
    electrical, communication bus)
 4. camera modules and base boards are designed and sold independently
    (thanks to point 3)

Overlays are a natural choice in this case. Even bootloader-time
overlays will suffice for my reasoning, let's remove the hotplug mess
from this discussion.

Now, in this patch you are modeling the remote camera as if it were a
"normal" I2C device, except:

 a) it has 2 slave addresses (no problem with this)
 b) the 2 slave addresses in DT are not the physical ones

With this model it seems natural to write "camera@51/reg = <0x51 0x61>"
in the camera DT overlay. Except 0x51 and 0x61 do not exist on the
camera module, those numbers come from the base board, since you know
those two addresses are not used on the bus where gmsl-deserializer@2c
is. But it works.

Then one year later a random SBC vendor starts selling a new base board
that has on the same i2c bus a GMSL deser and a random i2c chip,
unrelated to cameras, at address 0x51. Bang, the camera sensor does not
work anymore, but there is no hardware reason for it not to work. Well,
easy to fix, find an address that is unused on all known base boards and
replace, say, 0x51->0x71 in the camera overlay. (OK, I violated the "DT
as a stable ABI" principle)

But then other boards appear and, taking this to an extreme, you can get
to a situation where every i2c address is used on at least one board.
How do you fix that?

Maybe this scenario is a bit too apocalyptic, and maybe too much for
current automotive uses, but I think it illustrates how the current
model is not generic enough. Since there is no existing code in the
kernel yet, I think we should strive to do better in order to minimize
future problems.


My approach is instead to clearly split the local and remote domain. The
latter is what could be moved to an overlay. For example:

&i2c0 {
    serializer@3d {
        reg = <0x3d>;
        ...

        /* Guaranteed not physically present on i2c0 */
        i2c-alias-pool = /bits/ 16 <0x20 0x21 0x22 0x23 0x24 0x25>;

        i2c-mux {
            #address-cells = <1>;
            #size-cells = <0>;

	    i2c@0 {
                reg = <0>;
                #address-cells = <1>;
                #size-cells = <0>;

                // ------8<------ this could be moved to an overlay
                sensor@50 {
                    reg = <0x50>;
                    ...
                    endpoint {...};
                };
                eeprom@51 {
                    reg = <0x51>;
                    ...
                };
                // ------8<------
            };

	    i2c@1 {
                reg = <1>;
                #address-cells = <1>;
                #size-cells = <0>;

                // ------8<------
                sensor@50 {
                    reg = <0x50>;
                    ...
                    endpoint {...};
                };
                eeprom@51 {
                    reg = <0x51>;
                    ...
                };
                // ------8<------
            };
        };
    };
};

The core difference is that I split the camera@51/reg property in two:

 * sensor@50/reg: the remote side (camera overlay);
   carries the physical i2c address (note both sensors are at 0x50)
 * serializer@3d/i2c-alias-pool: the local side (base board);
   lists a pool of addresses that are not used on the i2c bus

See how there is no mixing between local and remote. The pool will
differ from one base board to another.

To implement this, I developed an "i2c address translator" that maps
physical remote addresses to local addresses from the pool at runtime.
It still needs some work, but address translation it is working.

>>  * a DT for the main board mentioning only addresses for the
>>    local i2c bus, down to the i2c@0 with address-cells, size-cells and
>>    reg properties
>>  * a DT overlay for each remote board, mentioning the remote i2c
>>    chips with their physical addresses, but no local addresses
>>
>> The only way I could devise to be generic is to bind each physical
>> remote address to a local address at runtime.
>>
>> Also, to be implemented reliably, an address translation feature is
>> required on the local (de)ser chip.
>>
>> So the question is: can the max9286 chip do i2c address translation?
>>
> 
> Yes, The max9286 (deser) can do i2c address translation - but so too can
> the max9271 (serialiser)

Good!

> We do our address translation on the camera (serialiser) side.

By "address translation" I mean the i2c address is changed by some
device in the middle between the i2c master and the slave. In this sense
you are not doing address translation, you are rather modifying the chip
addresses. Then transactions happen with the new (0x51/0x61) address,
which does not get modified during subsequent transactions.

> The cameras *all* boot with the same i2c address (and thus all conflict)
>  - We disable all links
>  - We enable /one/ link
>  - We initialise and reprogram the address of that camera to the address
>    specified in the camera node. - Then we move to the next camera.
> 
> The reality is we 'just need' a spare address on the I2C bus - but as
> yet - there is no mechanism in I2C core to request a spare address.

Not a reliable one, definitely, since there could be i2c devices unknown
to the software. This is why I had to introduce the alias pool: the DT
writer is required to know which addresses are available and list them
in DT.

-- 
Luca
