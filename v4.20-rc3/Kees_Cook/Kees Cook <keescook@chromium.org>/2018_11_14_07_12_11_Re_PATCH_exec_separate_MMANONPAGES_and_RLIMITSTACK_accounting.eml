Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 14 Nov 2018 00:37:15 -0000
Received: from icoremail.net (unknown [209.85.214.177])
	by mail-app2 (Coremail) with SMTP id by_KCgDXv95sWutbfamJAQ--.41734S3;
	Wed, 14 Nov 2018 07:12:45 +0800 (CST)
Received: from mail-pl1-f177.google.com (unknown [209.85.214.177])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwBnTkpqWutbSME6AA--.4278S3;
	Wed, 14 Nov 2018 07:12:42 +0800 (CST)
Received: by mail-pl1-f177.google.com with SMTP id a14so2168236plm.12
        for <xuliker@zju.edu.cn>; Tue, 13 Nov 2018 15:12:42 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:mime-version
         :in-reply-to:references:from:date:message-id:subject:to:cc:sender
         :precedence:list-id;
        bh=oNRmVuVrKG20e9jr6EoIZ/cSw2DsSCbLw8t8ZyDKGyw=;
        b=qq52nAgDzT2U+ZSQeUM84Fjggf53iv4kRmuSezmGce6ezY/BjWplNrvx0xV9ZVQ7JU
         3qGEn2Rk1Z2g1Xf8yjIWua3WPs55Br/KoK3LoEpXmzRV1QMHnP2stlerZblHwpXrGtUi
         Xj3POFG+TqfioXOhun6NJRt7cgANdir+7XYVpdCJWlgTlMaOO35vkU2cLwNgn0nvNDJA
         DRia53KuH7fVcfxI1JqiW8iX/bvOdXbia35I0swtU5eN05SOsWOv0BDfgbGZR6BX7VAe
         2h6LX5w6fy544BI3B/mRVreeUt5b7Ha4oPTN2sa5+hhtc94kQ/rlQHEzYa0QGIiDm8UH
         7z+g==
X-Gm-Message-State: AGRZ1gLQ491HL5OlwAWq91RSSQq5uCJOEIH088wxuPeTOR8Gf+un1X5t
	KutTlm1cHDuZ1OadEC5DEm9YnPoG6lm27omr7WGYZZw3K4MYnbdE/w==
X-Received: by 2002:a17:902:bd46:: with SMTP id b6mr4227213plx.231.1542150761823;
        Tue, 13 Nov 2018 15:12:41 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp5113219pjt;
        Tue, 13 Nov 2018 15:12:40 -0800 (PST)
X-Google-Smtp-Source: AJdET5eF1B07BfCDcLbmvWt0kIlai/YlMnvhdk7iODaCcqJ1IgD3qLKwKzqFFWQ3gT6pY1I8SXag
X-Received: by 2002:a17:902:59c8:: with SMTP id d8mr7069048plj.116.1542150760836;
        Tue, 13 Nov 2018 15:12:40 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542150760; cv=none;
        d=google.com; s=arc-20160816;
        b=Se/xG/h70BbYyin9dVTjA42dduEv0ST7R50fZtRZb6SzZJtoHPnJG2KYuOyHW/v0tb
         4HNobaKgP7Hg2d1h8UIII4cq3T1xu5iV+6nYZ89GPHD0f5MjyrQJvWcV37YpRHSCKGRl
         irtmrpVYOR31dAjAtHr0MbvACxlOYHq6uXbCT9P6j/qD8ceax9WIUDQM8VoyCcN0tkZU
         cCs5StG2Y9oyK7iARkevQQsrEFB8le3Hdmvx1QndMJl6n0hUAl82tO8ZUv0RCeir+GRw
         tkNYaDvxsLIl8N6Bd3cECfza3BsexH308+XoauiOPWARrLrmFS5um4sbO7TrLEvZP4iD
         TkmQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:cc:to:subject:message-id:date:from
         :references:in-reply-to:mime-version:dkim-signature;
        bh=oNRmVuVrKG20e9jr6EoIZ/cSw2DsSCbLw8t8ZyDKGyw=;
        b=AYeIULjQJaPDN/46IfvmU6wZLGiMC96CWyCa+OwvWnP0Pps7W1k4qvwKJYMJ+9eyoA
         s8Q5GupKarX7CtRltXRM6cMh7KOO+S+kXKJmMB0JX9LU5z5Frz/ijDcTgTwsBdoarFVB
         kqxLxupOsKpc0Aj02G3I3bvC2D/tWPZ3sVxHPgLO1tJRCv2BP5L/OIlOth8vuMjU9qqw
         Zc7F/ZxufM7HQu0YOsCWXlMJMYxognsQfSW1/oIR7Vs2SGObwyyaQVI2vpZPtqWXetqS
         XnBfstBwhXiW3eABq269ddcarAinsulhxdjALfNEgeD7dhhV84emBowLAv9TObpguiKc
         y1Qg==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@chromium.org header.s=google header.b=K5o1tmJh;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;
       dmarc=pass (p=NONE sp=NONE dis=NONE) header.from=chromium.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id x15-v6si21674537pll.41.2018.11.13.15.12.25;
        Tue, 13 Nov 2018 15:12:40 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1731745AbeKNJMm (ORCPT <rfc822;ecarlos1024@gmail.com>
        + 99 others); Wed, 14 Nov 2018 04:12:42 -0500
Received: from mail-yw1-f68.google.com ([209.85.161.68]:46936 "EHLO
        mail-yw1-f68.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726408AbeKNJMm (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 14 Nov 2018 04:12:42 -0500
Received: by mail-yw1-f68.google.com with SMTP id t13so2342834ywe.13
        for <linux-kernel@vger.kernel.org>; Tue, 13 Nov 2018 15:12:14 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=chromium.org; s=google;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc;
        bh=oNRmVuVrKG20e9jr6EoIZ/cSw2DsSCbLw8t8ZyDKGyw=;
        b=K5o1tmJhleQ4W6S89xWNEW4uyymHrsh87lDxf723VMQkCCvTPH5UDzSIdDaWSnUfVs
         r2wSDr5ms8XpzOB89oRLu/GTdsnkb5d9CrmhDPyMqpMk7N8fSONCfnryW3boHQtsPSDh
         kypkzfCTsnFkN4Ql407ckeWUOVT0Hy4QvGkKY=
X-Received: by 2002:a0d:ec91:: with SMTP id v139-v6mr2624040ywe.384.1542150733343;
        Tue, 13 Nov 2018 15:12:13 -0800 (PST)
Received: from mail-yw1-f46.google.com (mail-yw1-f46.google.com. [209.85.161.46])
        by smtp.gmail.com with ESMTPSA id x189-v6sm4135052ywd.76.2018.11.13.15.12.12
        for <linux-kernel@vger.kernel.org>
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Tue, 13 Nov 2018 15:12:12 -0800 (PST)
Received: by mail-yw1-f46.google.com with SMTP id x2so98739ywc.9
        for <linux-kernel@vger.kernel.org>; Tue, 13 Nov 2018 15:12:12 -0800 (PST)
X-Received: by 2002:a0d:cd84:: with SMTP id p126-v6mr7116312ywd.288.1542150731799;
 Tue, 13 Nov 2018 15:12:11 -0800 (PST)
MIME-Version: 1.0
Received: by 2002:a25:b906:0:0:0:0:0 with HTTP; Tue, 13 Nov 2018 15:12:11
 -0800 (PST)
In-Reply-To: <20181112160910.GA28440@redhat.com>
References: <20181112160910.GA28440@redhat.com>
From: Kees Cook <keescook@chromium.org>
Date: Tue, 13 Nov 2018 17:12:11 -0600
X-Gmail-Original-Message-ID: <CAGXu5jKzwmTV-45cxLPwif9Uc1SyFjyhe+VjG3vK=VTtAbWTgw@mail.gmail.com>
Message-ID: <CAGXu5jKzwmTV-45cxLPwif9Uc1SyFjyhe+VjG3vK=VTtAbWTgw@mail.gmail.com>
Subject: Re: [PATCH] exec: separate MM_ANONPAGES and RLIMIT_STACK accounting
To: Oleg Nesterov <oleg@redhat.com>
Cc: Andrew Morton <akpm@linux-foundation.org>,
        Ben Woodard <woodard@redhat.com>,
        "Eric W. Biederman" <ebiederm@xmission.com>,
        Michal Hocko <mhocko@suse.com>,
        LKML <linux-kernel@vger.kernel.org>
Content-Type: text/plain; charset="UTF-8"
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwBnTkpqWutbSME6AA--.4278S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoW3Xr43XF18tFWUKF47Kw4fuFg_yoW7Cr1xpF
	n3Ca4aqF4ftrW8KF12qw1DZr15Wws8JrWDArW7J34rZ345Gr1YqrsrKayvyrZ7C3yvva4r
	XrWYgrZxCrs8W3DanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUBSb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Xr0_Ar1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1l84ACjcxK6I8E
	87Iv67AKxVW0oVCq3wA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_GcCE3s1le2I262IYc4CY6c
	8Ij28IcVAaY2xG8wAqx4xG64xvF2IEw4CE5I8CrVC2j2WlYx0E2Ix0cI8IcVAFwI0_Jr0_
	Jr4lYx0Ex4A2jsIE14v26r1j6r4UMcvjeVCFs4IE7xkEbVWUJVW8JwCjxxvEa2IrMxkF7I
	0Ew4C26cxK6c8Ij28IcwCY1Ik26cxK6xAEc7vF6xCjj44lc2xSY4AK6IIF6FWlc2IjII80
	xcxEwVAKI48JMxvI42IY6xIIjxv20xvE14v26r1I6r4UMxvI42IY6xIIjxv20xvEc7CjxV
	AFwI0_Jr0_Gr1lcIIF0xvEx4A2jsIE14v26r4UJVWxJr1lcIIF0xvEx4A2jsIEc7CjxVAF
	wI0_Gr1j6F4UJwCF04k20xvY0x0EwIxGrwCF04k20xvEw4C26cxK6c8Ij28IcwCF72vE77
	IF4wCFx2IqxVCFs4IE7xkEbVWUJVW8JwC20s026c02F40E14v26r1j6r18MI8I3I0E7480
	Y4vE14v26r106r1rMI8E67AF67kF1VAFwI0_JF0_Jw1lIxkGc2Ij64vIr41lIxAIcVCF04
	k26cxKx2IYs7xG6Fyj6rWUJbIYCTnIWIevJa73UjIFyTuYvjxUQiL0DUUUU

On Mon, Nov 12, 2018 at 10:09 AM, Oleg Nesterov <oleg@redhat.com> wrote:
> get_arg_page() checks bprm->rlim_stack.rlim_cur and re-calculates the
> "extra" size for argv/envp pointers every time, this is a bit ugly and
> even not strictly correct: acct_arg_size() must not account this size.
>
> Remove all the rlimit code in get_arg_page(). Instead, add bprm->argmin
> calculated once at the start of __do_execve_file() and change copy_strings
> to check bprm->p >= bprm->argmin.
>
> The patch adds the new helper, prepare_arg_pages() which initializes
> bprm->argc/envc and bprm->argmin.
>
> Signed-off-by: Oleg Nesterov <oleg@redhat.com>

Acked-by: Kees Cook <keescook@chromium.org>

Thanks for nailing this all down. :)

-Kees

> ---
>  fs/exec.c               | 103 +++++++++++++++++++++++-------------------------
>  include/linux/binfmts.h |   1 +
>  2 files changed, 51 insertions(+), 53 deletions(-)
>
> diff --git a/fs/exec.c b/fs/exec.c
> index fc281b7..61a5460 100644
> --- a/fs/exec.c
> +++ b/fs/exec.c
> @@ -218,55 +218,10 @@ static struct page *get_arg_page(struct linux_binprm *bprm, unsigned long pos,
>         if (ret <= 0)
>                 return NULL;
>
> -       if (write) {
> -               unsigned long size = bprm->vma->vm_end - bprm->vma->vm_start;
> -               unsigned long ptr_size, limit;
> -
> -               /*
> -                * Since the stack will hold pointers to the strings, we
> -                * must account for them as well.
> -                *
> -                * The size calculation is the entire vma while each arg page is
> -                * built, so each time we get here it's calculating how far it
> -                * is currently (rather than each call being just the newly
> -                * added size from the arg page).  As a result, we need to
> -                * always add the entire size of the pointers, so that on the
> -                * last call to get_arg_page() we'll actually have the entire
> -                * correct size.
> -                */
> -               ptr_size = (bprm->argc + bprm->envc) * sizeof(void *);
> -               if (ptr_size > ULONG_MAX - size)
> -                       goto fail;
> -               size += ptr_size;
> -
> -               acct_arg_size(bprm, size / PAGE_SIZE);
> -
> -               /*
> -                * We've historically supported up to 32 pages (ARG_MAX)
> -                * of argument strings even with small stacks
> -                */
> -               if (size <= ARG_MAX)
> -                       return page;
> -
> -               /*
> -                * Limit to 1/4 of the max stack size or 3/4 of _STK_LIM
> -                * (whichever is smaller) for the argv+env strings.
> -                * This ensures that:
> -                *  - the remaining binfmt code will not run out of stack space,
> -                *  - the program will have a reasonable amount of stack left
> -                *    to work from.
> -                */
> -               limit = _STK_LIM / 4 * 3;
> -               limit = min(limit, bprm->rlim_stack.rlim_cur / 4);
> -               if (size > limit)
> -                       goto fail;
> -       }
> +       if (write)
> +               acct_arg_size(bprm, vma_pages(bprm->vma));
>
>         return page;
> -
> -fail:
> -       put_page(page);
> -       return NULL;
>  }
>
>  static void put_arg_page(struct page *page)
> @@ -492,6 +447,50 @@ static int count(struct user_arg_ptr argv, int max)
>         return i;
>  }
>
> +static int prepare_arg_pages(struct linux_binprm *bprm,
> +                       struct user_arg_ptr argv, struct user_arg_ptr envp)
> +{
> +       unsigned long limit, ptr_size;
> +
> +       bprm->argc = count(argv, MAX_ARG_STRINGS);
> +       if (bprm->argc < 0)
> +               return bprm->argc;
> +
> +       bprm->envc = count(envp, MAX_ARG_STRINGS);
> +       if (bprm->envc < 0)
> +               return bprm->envc;
> +
> +       /*
> +        * Limit to 1/4 of the max stack size or 3/4 of _STK_LIM
> +        * (whichever is smaller) for the argv+env strings.
> +        * This ensures that:
> +        *  - the remaining binfmt code will not run out of stack space,
> +        *  - the program will have a reasonable amount of stack left
> +        *    to work from.
> +        */
> +       limit = _STK_LIM / 4 * 3;
> +       limit = min(limit, bprm->rlim_stack.rlim_cur / 4);
> +       /*
> +        * We've historically supported up to 32 pages (ARG_MAX)
> +        * of argument strings even with small stacks
> +        */
> +       limit = max(limit, (unsigned long)ARG_MAX);
> +       /*
> +        * We must account for the size of all the argv and envp pointers to
> +        * the argv and envp strings, since they will also take up space in
> +        * the stack. They aren't stored until much later when we can't
> +        * signal to the parent that the child has run out of stack space.
> +        * Instead, calculate it here so it's possible to fail gracefully.
> +        */
> +       ptr_size = (bprm->argc + bprm->envc) * sizeof(void *);
> +       if (limit <= ptr_size)
> +               return -E2BIG;
> +       limit -= ptr_size;
> +
> +       bprm->argmin = bprm->p - limit;
> +       return 0;
> +}
> +
>  /*
>   * 'copy_strings()' copies argument/environment strings from the old
>   * processes's memory to the new process's stack.  The call to get_user_pages()
> @@ -527,6 +526,8 @@ static int copy_strings(int argc, struct user_arg_ptr argv,
>                 pos = bprm->p;
>                 str += len;
>                 bprm->p -= len;
> +               if (bprm->p < bprm->argmin)
> +                       goto out;
>
>                 while (len > 0) {
>                         int offset, bytes_to_copy;
> @@ -1789,12 +1790,8 @@ static int __do_execve_file(int fd, struct filename *filename,
>         if (retval)
>                 goto out_unmark;
>
> -       bprm->argc = count(argv, MAX_ARG_STRINGS);
> -       if ((retval = bprm->argc) < 0)
> -               goto out;
> -
> -       bprm->envc = count(envp, MAX_ARG_STRINGS);
> -       if ((retval = bprm->envc) < 0)
> +       retval = prepare_arg_pages(bprm, argv, envp);
> +       if (retval < 0)
>                 goto out;
>
>         retval = prepare_binprm(bprm);
> diff --git a/include/linux/binfmts.h b/include/linux/binfmts.h
> index e9f5fe6..03200a8 100644
> --- a/include/linux/binfmts.h
> +++ b/include/linux/binfmts.h
> @@ -25,6 +25,7 @@ struct linux_binprm {
>  #endif
>         struct mm_struct *mm;
>         unsigned long p; /* current top of mem */
> +       unsigned long argmin; /* rlimit marker for copy_strings() */
>         unsigned int
>                 /*
>                  * True after the bprm_set_creds hook has been called once
> --
> 2.5.0
>
>



-- 
Kees Cook
