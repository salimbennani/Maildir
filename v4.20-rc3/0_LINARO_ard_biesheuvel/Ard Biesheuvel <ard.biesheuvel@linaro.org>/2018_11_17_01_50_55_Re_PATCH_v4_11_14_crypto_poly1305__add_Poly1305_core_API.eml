Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (61.164.42.155:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 17 Nov 2018 03:15:53 -0000
Received: from icoremail.net (unknown [209.85.210.174])
	by mail-app2 (Coremail) with SMTP id by_KCgDXv5pVdO9bT7qmAQ--.49815S3;
	Sat, 17 Nov 2018 09:52:21 +0800 (CST)
Received: from mail-pf1-f174.google.com (unknown [209.85.210.174])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwBnTkpSdO9bM9RLAA--.2415S3;
	Sat, 17 Nov 2018 09:52:19 +0800 (CST)
Received: by mail-pf1-f174.google.com with SMTP id x2-v6so12198973pfm.7
        for <xuliker@zju.edu.cn>; Fri, 16 Nov 2018 17:52:18 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:mime-version
         :references:in-reply-to:from:date:message-id:subject:to:cc
         :content-transfer-encoding:sender:precedence:list-id;
        bh=ycuo47DcdIyVxcWRHg64i/Y1sXk5HFv3kYE+fCxWqNw=;
        b=um0ZXESB/ANdeGRfNMGvfau8dMfZ5M6I1X8mw3bKX0Xr9+/QNQ/JM67Qju2gt2ndXa
         2PkWbC0ctDznT/qijm7i9lBagRBJisRCel7781PuuunDSCb5YQ6T3O+FGry5SXm1WcJ9
         cJFvhdJQlWkz7IXfVAfa9N1O7FX46ixzcNMQ4ffImbeAA2qcDBaRI7UQke+CylIyMiH3
         65zyFFwqbtNSYxvtAtmr7QEdOvh0AGOHiZFElLH+QkG99wsxAuP2EGcdbG2znw1qtbhK
         Fu8t+Ju6812C6glsREQ1tUPYhvjNf6ooQeLHhrgq0hpUbzLrjAvx8lIfopusKBzKqLCC
         /VHQ==
X-Gm-Message-State: AGRZ1gI0xw0LhnfmVgE+IR+owm+mEiJk4GXnOfJOsr5bjh6g9fC4DuhU
	qFVh0BntibrwFSiSZQHgXNPF0IG5F2bn5xG3ClNFAkbwZRARnW8=
X-Received: by 2002:a63:bc02:: with SMTP id q2mr12249535pge.116.1542419538616;
        Fri, 16 Nov 2018 17:52:18 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:d106:0:0:0:0 with SMTP id l6-v6csp38926pju;
        Fri, 16 Nov 2018 17:52:17 -0800 (PST)
X-Google-Smtp-Source: AJdET5c5lqtBZi+iLwcCYrnfbIlL9LHeDsZMYhtUe+mYvPxSerXtYLkyzdE/dNW1iUnzDzbGaYa7
X-Received: by 2002:a17:902:b90c:: with SMTP id bf12-v6mr12514551plb.1.1542419537144;
        Fri, 16 Nov 2018 17:52:17 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542419537; cv=none;
        d=google.com; s=arc-20160816;
        b=QS+/vGUSc0XoMFY0nZPR/ALAHYpEvWHmft5/ZGQRv8+AIW4D5JqRh9Vp7axmZdKCuX
         6InPnK/OCoUsluJlP/lXkFxa5HmCRnpCQnQ+A7znQITE/Mr1568NXo38D2oac3kLWikR
         HfvW6mWsO4wq9kHvarlKjOJARaPiCOCq2BNJyYhi5pKmQrtIT1WjFgcZvO8Y2wlLqLGa
         qdw6wRQJreDjMRzXmFqMEh1pFfceBSxX5bIvKfwFtEzDYpMWM6ZodU6TQitfcA2VoTFM
         W4wooEV/DM0cMI0a9dNeAvbkOHJF7rRmaeEEuiqOEw6UyH1JbDlGbinxDDrF41nNpV7Z
         nypg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:content-transfer-encoding:cc:to:subject
         :message-id:date:from:in-reply-to:references:mime-version
         :dkim-signature;
        bh=ycuo47DcdIyVxcWRHg64i/Y1sXk5HFv3kYE+fCxWqNw=;
        b=Lehcx+mjDTxq/QEjwZV9M4MJu2KcFSOrN4GDRQeCfpoINjT6xCoeuAr8Feb20IOlAE
         aDwH//FDSviXdkPG/HY1nEv6RMJBWmddP5bGkSfN7gmXBDGrIPyW/FxJ/ge1AxpsAMcc
         /QwNWdWRXlikU91ajr1DZAMMWQhUmaa4FkbXaE5HS+alcckD0qCDqhn81VImGb8OUUim
         M7agCaaZQBf92bLaJWNmHkZzgwb8QWGqzg/bkubjtfiREV22U2Gju0zojeAHYYHBXIKb
         8oepdGT22mc25RDXrgdNLibqJjDAh85hOc98KnIn5UPuhZ8hyeL4P6CZMh2x2Tal+SUO
         R0FA==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@linaro.org header.s=google header.b=P5j8CB8Z;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;
       dmarc=pass (p=NONE sp=NONE dis=NONE) header.from=linaro.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id k25si5101964pfe.10.2018.11.16.17.52.02;
        Fri, 16 Nov 2018 17:52:17 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730845AbeKQMF5 (ORCPT <rfc822;xjxyklwx@gmail.com> + 99 others);
        Sat, 17 Nov 2018 07:05:57 -0500
Received: from mail-it1-f193.google.com ([209.85.166.193]:52994 "EHLO
        mail-it1-f193.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1730388AbeKQMF5 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sat, 17 Nov 2018 07:05:57 -0500
Received: by mail-it1-f193.google.com with SMTP id t190-v6so657715itb.2
        for <linux-kernel@vger.kernel.org>; Fri, 16 Nov 2018 17:51:07 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc:content-transfer-encoding;
        bh=ycuo47DcdIyVxcWRHg64i/Y1sXk5HFv3kYE+fCxWqNw=;
        b=P5j8CB8ZqvaV+jsaLIlI/z5HCbjt+LfqB1/HG1MEeDWJBYIoj072dBxT4MJFZ7okGi
         x+cbRlJBYKFyOQmH+ly3WeqIQrym9jvM9WaYaRFIcJyYs32yTgQ6oQK6CaXuhx0Y0ZCF
         6OjvKMx1a/J+ogCcNHl3NLpcyd6obCaaIAV2k=
X-Received: by 2002:a24:2190:: with SMTP id e138-v6mr610664ita.71.1542419466986;
 Fri, 16 Nov 2018 17:51:06 -0800 (PST)
MIME-Version: 1.0
References: <20181117012631.23528-1-ebiggers@kernel.org> <20181117012631.23528-12-ebiggers@kernel.org>
In-Reply-To: <20181117012631.23528-12-ebiggers@kernel.org>
From: Ard Biesheuvel <ard.biesheuvel@linaro.org>
Date: Fri, 16 Nov 2018 17:50:55 -0800
Message-ID: <CAKv+Gu-VicDdZqa=4nbo4EY5r2qTNngYuGyO-MymyoJ0NQP8tA@mail.gmail.com>
Subject: Re: [PATCH v4 11/14] crypto: poly1305 - add Poly1305 core API
To: Eric Biggers <ebiggers@kernel.org>
Cc: "open list:HARDWARE RANDOM NUMBER GENERATOR CORE" 
        <linux-crypto@vger.kernel.org>,
        Herbert Xu <herbert@gondor.apana.org.au>,
        linux-fscrypt@vger.kernel.org,
        linux-arm-kernel <linux-arm-kernel@lists.infradead.org>,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>,
        Paul Crowley <paulcrowley@google.com>,
        Greg Kaiser <gkaiser@google.com>,
        "Jason A. Donenfeld" <Jason@zx2c4.com>,
        Samuel Neves <samuel.c.p.neves@gmail.com>,
        Tomer Ashur <tomer.ashur@esat.kuleuven.be>,
        Eric Biggers <ebiggers@google.com>,
        Martin Willi <martin@strongswan.org>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwBnTkpSdO9bM9RLAA--.2415S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoW3Kw47ZF4UuFy5Ar4fKr45Wrg_yoWDKFy7pr
	n8u345KrW3trW7u3WDWFn8JF909392g3yUWr43J34fJw1DAr1ftrsrKr1YkFn8JrWkZr9x
	ursY9rZxuw4Sya7anT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUPFb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Xr0_Ar1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1l84ACjcxK6I8E
	87Iv67AKxVW0oVCq3wA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_GcCE3s1le2I262IYc4CY6c
	8Ij28IcVAaY2xG8wAqx4xG64xvF2IEw4CE5I8CrVC2j2WlYx0E2Ix0cI8IcVAFwI0_Jr0_
	Jr4lYx0Ex4A2jsIE14v26r1j6r4UMcvjeVCFs4IE7xkEbVWUJVW8JwACjcxG0xvEwIxGrw
	CjxxvEa2IrMxkF7I0Ew4C26cxK6c8Ij28IcwCY1Ik26cxK6xAEc7vF6xCjj44lc2xSY4AK
	6IIF6w4lc2IjII80xcxEwVAKI48JMxvI42IY6xIIjxv20xvE14v26r1I6r4UMxvI42IY6x
	IIjxv20xvEc7CjxVAFwI0_Jr0_Gr1lcIIF0xvEx4A2jsIE14v26r4UJVWxJr1lcIIF0xvE
	x4A2jsIEc7CjxVAFwI0_Gr1j6F4UJwCF04k20xvY0x0EwIxGrwCF04k20xvEw4C26cxK6c
	8Ij28IcwCF72vE77IF4wCFx2IqxVCFs4IE7xkEbVWUJVW8JwC20s026c02F40E14v26r1j
	6r18MI8I3I0E7480Y4vE14v26r106r1rMI8E67AF67kF1VAFwI0_Jw0_GFylIxkGc2Ij64
	vIr41lIxAIcVCF04k26cxKx2IYs7xG6Fyj6rWUJbIYCTnIWIevJa73UjIFyTuYvjxUQNJ5
	DUUUU

On Fri, 16 Nov 2018 at 17:29, Eric Biggers <ebiggers@kernel.org> wrote:
>
> From: Eric Biggers <ebiggers@google.com>
>
> Expose a low-level Poly1305 API which implements the
> =CE=B5-almost-=E2=88=86-universal (=CE=B5A=E2=88=86U) hash function under=
lying the Poly1305 MAC
> and supports block-aligned inputs only.
>
> This is needed for Adiantum hashing, which builds an =CE=B5A=E2=88=86U ha=
sh function
> from NH and a polynomial evaluation in GF(2^{130}-5); this polynomial
> evaluation is identical to the one the Poly1305 MAC does.  However, the
> crypto_shash Poly1305 API isn't very appropriate for this because its
> calling convention assumes it is used as a MAC, with a 32-byte "one-time
> key" provided for every digest.
>
> But by design, in Adiantum hashing the performance of the polynomial
> evaluation isn't nearly as critical as NH.  So it suffices to just have
> some C helper functions.  Thus, this patch adds such functions.
>
> Acked-by: Martin Willi <martin@strongswan.org>
> Signed-off-by: Eric Biggers <ebiggers@google.com>

Acked-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>

> ---
>  crypto/poly1305_generic.c | 174 ++++++++++++++++++++++----------------
>  include/crypto/poly1305.h |  16 ++++
>  2 files changed, 115 insertions(+), 75 deletions(-)
>
> diff --git a/crypto/poly1305_generic.c b/crypto/poly1305_generic.c
> index a23173f351b7..2a06874204e8 100644
> --- a/crypto/poly1305_generic.c
> +++ b/crypto/poly1305_generic.c
> @@ -38,7 +38,7 @@ int crypto_poly1305_init(struct shash_desc *desc)
>  {
>         struct poly1305_desc_ctx *dctx =3D shash_desc_ctx(desc);
>
> -       memset(dctx->h.h, 0, sizeof(dctx->h.h));
> +       poly1305_core_init(&dctx->h);
>         dctx->buflen =3D 0;
>         dctx->rset =3D false;
>         dctx->sset =3D false;
> @@ -47,23 +47,16 @@ int crypto_poly1305_init(struct shash_desc *desc)
>  }
>  EXPORT_SYMBOL_GPL(crypto_poly1305_init);
>
> -static void poly1305_setrkey(struct poly1305_desc_ctx *dctx, const u8 *k=
ey)
> +void poly1305_core_setkey(struct poly1305_key *key, const u8 *raw_key)
>  {
>         /* r &=3D 0xffffffc0ffffffc0ffffffc0fffffff */
> -       dctx->r.r[0] =3D (get_unaligned_le32(key +  0) >> 0) & 0x3ffffff;
> -       dctx->r.r[1] =3D (get_unaligned_le32(key +  3) >> 2) & 0x3ffff03;
> -       dctx->r.r[2] =3D (get_unaligned_le32(key +  6) >> 4) & 0x3ffc0ff;
> -       dctx->r.r[3] =3D (get_unaligned_le32(key +  9) >> 6) & 0x3f03fff;
> -       dctx->r.r[4] =3D (get_unaligned_le32(key + 12) >> 8) & 0x00fffff;
> -}
> -
> -static void poly1305_setskey(struct poly1305_desc_ctx *dctx, const u8 *k=
ey)
> -{
> -       dctx->s[0] =3D get_unaligned_le32(key +  0);
> -       dctx->s[1] =3D get_unaligned_le32(key +  4);
> -       dctx->s[2] =3D get_unaligned_le32(key +  8);
> -       dctx->s[3] =3D get_unaligned_le32(key + 12);
> +       key->r[0] =3D (get_unaligned_le32(raw_key +  0) >> 0) & 0x3ffffff=
;
> +       key->r[1] =3D (get_unaligned_le32(raw_key +  3) >> 2) & 0x3ffff03=
;
> +       key->r[2] =3D (get_unaligned_le32(raw_key +  6) >> 4) & 0x3ffc0ff=
;
> +       key->r[3] =3D (get_unaligned_le32(raw_key +  9) >> 6) & 0x3f03fff=
;
> +       key->r[4] =3D (get_unaligned_le32(raw_key + 12) >> 8) & 0x00fffff=
;
>  }
> +EXPORT_SYMBOL_GPL(poly1305_core_setkey);
>
>  /*
>   * Poly1305 requires a unique key for each tag, which implies that we ca=
n't set
> @@ -75,13 +68,16 @@ unsigned int crypto_poly1305_setdesckey(struct poly13=
05_desc_ctx *dctx,
>  {
>         if (!dctx->sset) {
>                 if (!dctx->rset && srclen >=3D POLY1305_BLOCK_SIZE) {
> -                       poly1305_setrkey(dctx, src);
> +                       poly1305_core_setkey(&dctx->r, src);
>                         src +=3D POLY1305_BLOCK_SIZE;
>                         srclen -=3D POLY1305_BLOCK_SIZE;
>                         dctx->rset =3D true;
>                 }
>                 if (srclen >=3D POLY1305_BLOCK_SIZE) {
> -                       poly1305_setskey(dctx, src);
> +                       dctx->s[0] =3D get_unaligned_le32(src +  0);
> +                       dctx->s[1] =3D get_unaligned_le32(src +  4);
> +                       dctx->s[2] =3D get_unaligned_le32(src +  8);
> +                       dctx->s[3] =3D get_unaligned_le32(src + 12);
>                         src +=3D POLY1305_BLOCK_SIZE;
>                         srclen -=3D POLY1305_BLOCK_SIZE;
>                         dctx->sset =3D true;
> @@ -91,41 +87,37 @@ unsigned int crypto_poly1305_setdesckey(struct poly13=
05_desc_ctx *dctx,
>  }
>  EXPORT_SYMBOL_GPL(crypto_poly1305_setdesckey);
>
> -static unsigned int poly1305_blocks(struct poly1305_desc_ctx *dctx,
> -                                   const u8 *src, unsigned int srclen,
> -                                   u32 hibit)
> +static void poly1305_blocks_internal(struct poly1305_state *state,
> +                                    const struct poly1305_key *key,
> +                                    const void *src, unsigned int nblock=
s,
> +                                    u32 hibit)
>  {
>         u32 r0, r1, r2, r3, r4;
>         u32 s1, s2, s3, s4;
>         u32 h0, h1, h2, h3, h4;
>         u64 d0, d1, d2, d3, d4;
> -       unsigned int datalen;
>
> -       if (unlikely(!dctx->sset)) {
> -               datalen =3D crypto_poly1305_setdesckey(dctx, src, srclen)=
;
> -               src +=3D srclen - datalen;
> -               srclen =3D datalen;
> -       }
> +       if (!nblocks)
> +               return;
>
> -       r0 =3D dctx->r.r[0];
> -       r1 =3D dctx->r.r[1];
> -       r2 =3D dctx->r.r[2];
> -       r3 =3D dctx->r.r[3];
> -       r4 =3D dctx->r.r[4];
> +       r0 =3D key->r[0];
> +       r1 =3D key->r[1];
> +       r2 =3D key->r[2];
> +       r3 =3D key->r[3];
> +       r4 =3D key->r[4];
>
>         s1 =3D r1 * 5;
>         s2 =3D r2 * 5;
>         s3 =3D r3 * 5;
>         s4 =3D r4 * 5;
>
> -       h0 =3D dctx->h.h[0];
> -       h1 =3D dctx->h.h[1];
> -       h2 =3D dctx->h.h[2];
> -       h3 =3D dctx->h.h[3];
> -       h4 =3D dctx->h.h[4];
> -
> -       while (likely(srclen >=3D POLY1305_BLOCK_SIZE)) {
> +       h0 =3D state->h[0];
> +       h1 =3D state->h[1];
> +       h2 =3D state->h[2];
> +       h3 =3D state->h[3];
> +       h4 =3D state->h[4];
>
> +       do {
>                 /* h +=3D m[i] */
>                 h0 +=3D (get_unaligned_le32(src +  0) >> 0) & 0x3ffffff;
>                 h1 +=3D (get_unaligned_le32(src +  3) >> 2) & 0x3ffffff;
> @@ -154,16 +146,36 @@ static unsigned int poly1305_blocks(struct poly1305=
_desc_ctx *dctx,
>                 h1 +=3D h0 >> 26;       h0 =3D h0 & 0x3ffffff;
>
>                 src +=3D POLY1305_BLOCK_SIZE;
> -               srclen -=3D POLY1305_BLOCK_SIZE;
> -       }
> +       } while (--nblocks);
>
> -       dctx->h.h[0] =3D h0;
> -       dctx->h.h[1] =3D h1;
> -       dctx->h.h[2] =3D h2;
> -       dctx->h.h[3] =3D h3;
> -       dctx->h.h[4] =3D h4;
> +       state->h[0] =3D h0;
> +       state->h[1] =3D h1;
> +       state->h[2] =3D h2;
> +       state->h[3] =3D h3;
> +       state->h[4] =3D h4;
> +}
>
> -       return srclen;
> +void poly1305_core_blocks(struct poly1305_state *state,
> +                         const struct poly1305_key *key,
> +                         const void *src, unsigned int nblocks)
> +{
> +       poly1305_blocks_internal(state, key, src, nblocks, 1 << 24);
> +}
> +EXPORT_SYMBOL_GPL(poly1305_core_blocks);
> +
> +static void poly1305_blocks(struct poly1305_desc_ctx *dctx,
> +                           const u8 *src, unsigned int srclen, u32 hibit=
)
> +{
> +       unsigned int datalen;
> +
> +       if (unlikely(!dctx->sset)) {
> +               datalen =3D crypto_poly1305_setdesckey(dctx, src, srclen)=
;
> +               src +=3D srclen - datalen;
> +               srclen =3D datalen;
> +       }
> +
> +       poly1305_blocks_internal(&dctx->h, &dctx->r,
> +                                src, srclen / POLY1305_BLOCK_SIZE, hibit=
);
>  }
>
>  int crypto_poly1305_update(struct shash_desc *desc,
> @@ -187,9 +199,9 @@ int crypto_poly1305_update(struct shash_desc *desc,
>         }
>
>         if (likely(srclen >=3D POLY1305_BLOCK_SIZE)) {
> -               bytes =3D poly1305_blocks(dctx, src, srclen, 1 << 24);
> -               src +=3D srclen - bytes;
> -               srclen =3D bytes;
> +               poly1305_blocks(dctx, src, srclen, 1 << 24);
> +               src +=3D srclen - (srclen % POLY1305_BLOCK_SIZE);
> +               srclen %=3D POLY1305_BLOCK_SIZE;
>         }
>
>         if (unlikely(srclen)) {
> @@ -201,30 +213,18 @@ int crypto_poly1305_update(struct shash_desc *desc,
>  }
>  EXPORT_SYMBOL_GPL(crypto_poly1305_update);
>
> -int crypto_poly1305_final(struct shash_desc *desc, u8 *dst)
> +void poly1305_core_emit(const struct poly1305_state *state, void *dst)
>  {
> -       struct poly1305_desc_ctx *dctx =3D shash_desc_ctx(desc);
>         u32 h0, h1, h2, h3, h4;
>         u32 g0, g1, g2, g3, g4;
>         u32 mask;
> -       u64 f =3D 0;
> -
> -       if (unlikely(!dctx->sset))
> -               return -ENOKEY;
> -
> -       if (unlikely(dctx->buflen)) {
> -               dctx->buf[dctx->buflen++] =3D 1;
> -               memset(dctx->buf + dctx->buflen, 0,
> -                      POLY1305_BLOCK_SIZE - dctx->buflen);
> -               poly1305_blocks(dctx, dctx->buf, POLY1305_BLOCK_SIZE, 0);
> -       }
>
>         /* fully carry h */
> -       h0 =3D dctx->h.h[0];
> -       h1 =3D dctx->h.h[1];
> -       h2 =3D dctx->h.h[2];
> -       h3 =3D dctx->h.h[3];
> -       h4 =3D dctx->h.h[4];
> +       h0 =3D state->h[0];
> +       h1 =3D state->h[1];
> +       h2 =3D state->h[2];
> +       h3 =3D state->h[3];
> +       h4 =3D state->h[4];
>
>         h2 +=3D (h1 >> 26);     h1 =3D h1 & 0x3ffffff;
>         h3 +=3D (h2 >> 26);     h2 =3D h2 & 0x3ffffff;
> @@ -254,16 +254,40 @@ int crypto_poly1305_final(struct shash_desc *desc, =
u8 *dst)
>         h4 =3D (h4 & mask) | g4;
>
>         /* h =3D h % (2^128) */
> -       h0 =3D (h0 >>  0) | (h1 << 26);
> -       h1 =3D (h1 >>  6) | (h2 << 20);
> -       h2 =3D (h2 >> 12) | (h3 << 14);
> -       h3 =3D (h3 >> 18) | (h4 <<  8);
> +       put_unaligned_le32((h0 >>  0) | (h1 << 26), dst +  0);
> +       put_unaligned_le32((h1 >>  6) | (h2 << 20), dst +  4);
> +       put_unaligned_le32((h2 >> 12) | (h3 << 14), dst +  8);
> +       put_unaligned_le32((h3 >> 18) | (h4 <<  8), dst + 12);
> +}
> +EXPORT_SYMBOL_GPL(poly1305_core_emit);
> +
> +int crypto_poly1305_final(struct shash_desc *desc, u8 *dst)
> +{
> +       struct poly1305_desc_ctx *dctx =3D shash_desc_ctx(desc);
> +       __le32 digest[4];
> +       u64 f =3D 0;
> +
> +       if (unlikely(!dctx->sset))
> +               return -ENOKEY;
> +
> +       if (unlikely(dctx->buflen)) {
> +               dctx->buf[dctx->buflen++] =3D 1;
> +               memset(dctx->buf + dctx->buflen, 0,
> +                      POLY1305_BLOCK_SIZE - dctx->buflen);
> +               poly1305_blocks(dctx, dctx->buf, POLY1305_BLOCK_SIZE, 0);
> +       }
> +
> +       poly1305_core_emit(&dctx->h, digest);
>
>         /* mac =3D (h + s) % (2^128) */
> -       f =3D (f >> 32) + h0 + dctx->s[0]; put_unaligned_le32(f, dst +  0=
);
> -       f =3D (f >> 32) + h1 + dctx->s[1]; put_unaligned_le32(f, dst +  4=
);
> -       f =3D (f >> 32) + h2 + dctx->s[2]; put_unaligned_le32(f, dst +  8=
);
> -       f =3D (f >> 32) + h3 + dctx->s[3]; put_unaligned_le32(f, dst + 12=
);
> +       f =3D (f >> 32) + le32_to_cpu(digest[0]) + dctx->s[0];
> +       put_unaligned_le32(f, dst + 0);
> +       f =3D (f >> 32) + le32_to_cpu(digest[1]) + dctx->s[1];
> +       put_unaligned_le32(f, dst + 4);
> +       f =3D (f >> 32) + le32_to_cpu(digest[2]) + dctx->s[2];
> +       put_unaligned_le32(f, dst + 8);
> +       f =3D (f >> 32) + le32_to_cpu(digest[3]) + dctx->s[3];
> +       put_unaligned_le32(f, dst + 12);
>
>         return 0;
>  }
> diff --git a/include/crypto/poly1305.h b/include/crypto/poly1305.h
> index 493244c46664..34317ed2071e 100644
> --- a/include/crypto/poly1305.h
> +++ b/include/crypto/poly1305.h
> @@ -38,6 +38,22 @@ struct poly1305_desc_ctx {
>         bool sset;
>  };
>
> +/*
> + * Poly1305 core functions.  These implement the =CE=B5-almost-=E2=88=86=
-universal hash
> + * function underlying the Poly1305 MAC, i.e. they don't add an encrypte=
d nonce
> + * ("s key") at the end.  They also only support block-aligned inputs.
> + */
> +void poly1305_core_setkey(struct poly1305_key *key, const u8 *raw_key);
> +static inline void poly1305_core_init(struct poly1305_state *state)
> +{
> +       memset(state->h, 0, sizeof(state->h));
> +}
> +void poly1305_core_blocks(struct poly1305_state *state,
> +                         const struct poly1305_key *key,
> +                         const void *src, unsigned int nblocks);
> +void poly1305_core_emit(const struct poly1305_state *state, void *dst);
> +
> +/* Crypto API helper functions for the Poly1305 MAC */
>  int crypto_poly1305_init(struct shash_desc *desc);
>  unsigned int crypto_poly1305_setdesckey(struct poly1305_desc_ctx *dctx,
>                                         const u8 *src, unsigned int srcle=
n);
> --
> 2.19.1.1215.g8438c0b245-goog
>
