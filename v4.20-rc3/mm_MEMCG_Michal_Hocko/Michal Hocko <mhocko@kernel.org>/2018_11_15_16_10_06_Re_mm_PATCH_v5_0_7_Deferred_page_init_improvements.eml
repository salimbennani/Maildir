Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 15 Nov 2018 08:32:09 -0000
Received: from icoremail.net (unknown [209.85.214.173])
	by mail-app2 (Coremail) with SMTP id by_KCgDnX9P_Ke1b9TaYAQ--.44986S3;
	Thu, 15 Nov 2018 16:10:40 +0800 (CST)
Received: from mail-pl1-f173.google.com (unknown [209.85.214.173])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwCngT3_Ke1br6tCAA--.7356S3;
	Thu, 15 Nov 2018 16:10:39 +0800 (CST)
Received: by mail-pl1-f173.google.com with SMTP id b5-v6so9117678pla.6
        for <xuliker@zju.edu.cn>; Thu, 15 Nov 2018 00:10:39 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-original-authentication-results:x-gm-message-state:delivered-to
         :date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent:sender:precedence
         :list-id;
        bh=3IEOLZp/mnHgq3CMaESL5RgFidg04+v3H+74ENDflxw=;
        b=iJwrLSUSCgiM4DvVwhND2Svay4jRT9KzjBqWNlBc7SWARbKmsgFGPcluOezk0lNfZE
         xV6nAPaPmkm0puSEaj+M2XHOs53N52zirAWF9KNoXjt2VZhcinfS1FZMGypEc9ffAnLB
         Adi8yACq5+4oxe6QWMxaIe7m4nyEfr7j9BKhDQvCAg1+4gHr0furFcIrYEMoIA6xbAy4
         SnckDX3f5DOZqywJcSo3ucpuvEk0U/ZXIdWoYRGUdU+IjzHu2mjoooBxo0jw8IUe/1qz
         la9U+f4c7THH8NDkEDOATq/wG6o0FJ7aTkDxrTgIPZh0IxHgzahIm2sgYia8mhitw5iV
         ysTw==
X-Original-Authentication-Results: mx.google.com;       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;       dmarc=fail (p=NONE sp=NONE dis=NONE) header.from=kernel.org
X-Gm-Message-State: AGRZ1gJqhEkABjInYsy0ub7KP/LQx0CS8wq0umOslZHJeQCubNSCEpXu
	6w94vz49kM/Ex3ghxkllB9kNKppEAmk8p9DzvMDx0IpDzQtBpeaMmA==
X-Received: by 2002:a17:902:6b4b:: with SMTP id g11-v6mr5249081plt.213.1542269439105;
        Thu, 15 Nov 2018 00:10:39 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:d106:0:0:0:0 with SMTP id l6-v6csp263418pju;
        Thu, 15 Nov 2018 00:10:37 -0800 (PST)
X-Google-Smtp-Source: AJdET5enP0+sBf1Tn49qaWA5DeCzKJYMjpiTNaRxzDM6iloWXr2NRDns9ikDYvGAwI2tmMijWT8p
X-Received: by 2002:a17:902:8214:: with SMTP id x20-v6mr5095263pln.224.1542269437646;
        Thu, 15 Nov 2018 00:10:37 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542269437; cv=none;
        d=google.com; s=arc-20160816;
        b=PlSP9XdXwIhOg3Mm0IKfVUwOSvb4HTo6cizcr3u7I5WMHxmw9lIoVtn5zh2D4bpzJq
         wzWEtEfbdl0OPQYz4x7Bf7D5vokKcvJNH//RH6AqrAcik4EUjbgZrrqbT7pOA0RsWRtY
         H+qkCuD6eKXxXijB7RQh2l/1h67rdRTE1VIHnemkFaxOUpzWL3bbYye9kUKkdxtu5uEG
         w5f7z0Ruj+pfSMXxMUhhSKEjOGvGQ4QvizkGkGqR+GT99hFhwz7ZOGg85jbkDvudAHn/
         n8QGeyk7iS6EW1DdqdKWJBxm6shPzbAsHkUWv7WCoriAZ7nyJl5CIkWioqvJK9FE3wdv
         hWdA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:user-agent:in-reply-to
         :content-disposition:mime-version:references:message-id:subject:cc
         :to:from:date;
        bh=3IEOLZp/mnHgq3CMaESL5RgFidg04+v3H+74ENDflxw=;
        b=h3ANdyXS9Qau2MRhQccVyfQFKwIfBW2uKAZz49D+CKpZQfFyZj4NfDK5Bi1+BBMDSO
         ufTi1jVr9eqK+IDmlJZCoSfPZohWjCEJBaYv8qtaf6WfDfVE88z8qUZwgy//ZYvekik2
         /CcYLnpoGPhG1SsNA16nv+6vPsAlozNedG3nDxIs2Beb7lRgrZzBbvtP3NiPQUdvkvU6
         TJFQZVZex6iqnrKZzj/FoHIRX1Ctn4vRwWMXaUjuei/y0iNzl/Km2/xTUA+B+byjeQ/I
         sqXETBt8Abgr7dsMjCu8yAJ+NZuXuEc3YT/3xfcQ4IxvtSTGpLFMTY4uE9UOluEXK2Qn
         3iuQ==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;
       dmarc=fail (p=NONE sp=NONE dis=NONE) header.from=kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id bi6si9835532plb.279.2018.11.15.00.10.23;
        Thu, 15 Nov 2018 00:10:37 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728936AbeKOSQ7 (ORCPT <rfc822;jroi.martin@gmail.com>
        + 99 others); Thu, 15 Nov 2018 13:16:59 -0500
Received: from mx2.suse.de ([195.135.220.15]:38242 "EHLO mx1.suse.de"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1728280AbeKOSQ7 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 15 Nov 2018 13:16:59 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (unknown [195.135.220.254])
        by mx1.suse.de (Postfix) with ESMTP id E1AFCAEAE;
        Thu, 15 Nov 2018 08:10:09 +0000 (UTC)
Date: Thu, 15 Nov 2018 09:10:06 +0100
From: Michal Hocko <mhocko@kernel.org>
To: Alexander Duyck <alexander.h.duyck@linux.intel.com>
Cc: akpm@linux-foundation.org, linux-mm@kvack.org,
        sparclinux@vger.kernel.org, linux-kernel@vger.kernel.org,
        linux-nvdimm@lists.01.org, davem@davemloft.net,
        pavel.tatashin@microsoft.com, mingo@kernel.org,
        kirill.shutemov@linux.intel.com, dan.j.williams@intel.com,
        dave.jiang@intel.com, rppt@linux.vnet.ibm.com, willy@infradead.org,
        vbabka@suse.cz, khalid.aziz@oracle.com, ldufour@linux.vnet.ibm.com,
        mgorman@techsingularity.net, yi.z.zhang@linux.intel.com
Subject: Re: [mm PATCH v5 0/7] Deferred page init improvements
Message-ID: <20181115081006.GC23831@dhcp22.suse.cz>
References: <154145268025.30046.11742652345962594283.stgit@ahduyck-desk1.jf.intel.com>
 <20181114150742.GZ23419@dhcp22.suse.cz>
 <9e8218eb-80bf-fc02-ae56-42ccfddb572e@linux.intel.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <9e8218eb-80bf-fc02-ae56-42ccfddb572e@linux.intel.com>
User-Agent: Mutt/1.10.1 (2018-07-13)
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwCngT3_Ke1br6tCAA--.7356S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoWxWr4xJFy5trWDurW5tF1UKFg_yoWrtFW8pF
	W3K3Z0krWkCrWxZw10yw1xZFyFvrs3Gr45AF98Kr9rA3s8Gr9Fvr47tw4YkF97WFsay3Wa
	vr4jv34DA3Z8ZaDanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUPFb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Ar0_tr1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Cr0_Gr1UM28EF7xvwVC2
	z280aVAFwI0_GcCE3s1l84ACjcxK6I8E87Iv6xkF7I0E14v26rxl6s0DM2AIxVAIcxkEcV
	Aq07x20xvEncxIr21l5I8CrVACY4xI64kE6c02F40Ex7xfMcIj6xIIjxv20xvE14v26r1j
	6r18McIj6I8E87Iv67AKxVW8JVWxJwAm72CE4IkC6x0Yz7v_Jr0_Gr1lF7xvr2IY64vIr4
	1l7I0Y6sxI4wCY1x0264kExVAvwVAq07x20xylc7Ca8VAvwVCFzxkY4VCF77xAMxkIecxE
	wVCI4VW8ZwCY0x0Ix7I2Y4AK64vIr41lcIIF0xvE2Ix0cI8IcVAFwI0_Gr0_Xr1lcIIF0x
	vE2Ix0cI8IcVCY1x0267AKxVW8JVWxJwCYIxAIcVC2z280aVAFwI0_Cr1j6rxdMxvI42IY
	6I8E87Iv6xkF7I0E14v26F4UJVW0owCF04k20xvY0x0EwIxGrwCF04k20xvEw4C26cxK6c
	8Ij28IcwCF72vE77IF4wCFx2IqxVCFs4IE7xkEbVWUJVW8JwC20s026c02F40E14v26r1j
	6r18MI8I3I0E7480Y4vE14v26r106r1rMI8E67AF67kF1VAFwI0_GFv_WrylIxkGc2Ij64
	vIr41lIxAIcVCF04k26cxKx2IYs7xG6Fyj6rWUJbIYCTnIWIevJa73UjIFyTuYvjxUHiZc
	UUUUU

On Wed 14-11-18 16:50:23, Alexander Duyck wrote:
> 
> 
> On 11/14/2018 7:07 AM, Michal Hocko wrote:
> > On Mon 05-11-18 13:19:25, Alexander Duyck wrote:
> > > This patchset is essentially a refactor of the page initialization logic
> > > that is meant to provide for better code reuse while providing a
> > > significant improvement in deferred page initialization performance.
> > > 
> > > In my testing on an x86_64 system with 384GB of RAM and 3TB of persistent
> > > memory per node I have seen the following. In the case of regular memory
> > > initialization the deferred init time was decreased from 3.75s to 1.06s on
> > > average. For the persistent memory the initialization time dropped from
> > > 24.17s to 19.12s on average. This amounts to a 253% improvement for the
> > > deferred memory initialization performance, and a 26% improvement in the
> > > persistent memory initialization performance.
> > > 
> > > I have called out the improvement observed with each patch.
> > 
> > I have only glanced through the code (there is a lot of the code to look
> > at here). And I do not like the code duplication and the way how you
> > make the hotplug special. There shouldn't be any real reason for that
> > IMHO (e.g. why do we init pfn-at-a-time in early init while we do
> > pageblock-at-a-time for hotplug). I might be wrong here and the code
> > reuse might be really hard to achieve though.
> 
> Actually it isn't so much that hotplug is special. The issue is more that
> the non-hotplug case is special in that you have to perform a number of
> extra checks for things that just aren't necessary for the hotplug case.

Can we hide those behind a helper (potentially with a jump label if
necessary) and still share a large part of the code? Also this code is
quite old and maybe we are overzealous with the early checks. Do we
really need them. Why should be early boot memory any different from the
hotplug. The only exception I can see should really be deferred
initialization check.

> If anything I would probably need a new iterator that would be able to take
> into account all the checks for the non-hotplug case and then provide ranges
> of PFNs to initialize.
> 
> > I am also not impressed by new iterators because this api is quite
> > complex already. But this is mostly a detail.
> 
> Yeah, the iterators were mostly an attempt at hiding some of the complexity.
> Being able to break a loop down to just an iterator provding the start of
> the range and the number of elements to initialize is pretty easy to
> visualize, or at least I thought so.

I am not against hiding the complexity. I am mostly concerned that we
have too many of those iterators. Maybe we can reuse existing ones in
some way. If that is not really possible or it would make even more mess
then fair enough and go with new ones.

> > Thing I do not like is that you keep microptimizing PageReserved part
> > while there shouldn't be anything fundamental about it. We should just
> > remove it rather than make the code more complex. I fell more and more
> > guilty to add there actually.
> 
> I plan to remove it, but don't think I can get to it in this patch set.

What I am trying to argue is that we should simply drop the
__SetPageReserved as an independent patch prior to this whole series.
As I've mentioned earlier, I have added this just to be sure and part of
that was that __add_section has set the reserved bit. This is no longer
the case since d0dc12e86b31 ("mm/memory_hotplug: optimize memory
hotplug").

Nobody should really depend on that because struct pages are in
undefined state after __add_pages and they should get fully initialized
after move_pfn_range_to_zone.

If you really insist on setting the reserved bit then it really has to
happen much sooner than it is right now. So I do not really see any
point in doing so. Sure there are some pfn walkers that really need to
do pfn_to_online_page because pfn_valid is not sufficient but that is
largely independent on any optimization work in this area.

I am sorry if I haven't been clear about that before. Does it make more
sense to you now?

P.S.
There is always that tempting thing to follow the existing code and
tweak it for a new purpose. This approach, however, adds more and more
complex code on top of something that might be wrong or stale already.
I have seen that in MM code countless times and I have contributed to
that myself. I am sorry to push back on this so hard but this code is
a mess and any changes to make it more optimal should really make sure
the foundations are solid before. Been there done that, not a huge fun
but that is the price for having basically unmaintained piece of code
that random usecases stop by and do what they need without ever
following up later.
-- 
Michal Hocko
SUSE Labs
